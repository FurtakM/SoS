// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// FogOff ( 7 ) ;
  11: LD_INT 7
  13: PPUSH
  14: CALL_OW 344
// RandomizeAll ;
  18: CALL_OW 11
// InitVariables ;
  22: CALL 66 0 0
// LoadBuildings ;
  26: CALL 94 0 0
// PrepareAlliance ;
  30: CALL 637 0 0
// music_nat := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
  34: LD_ADDR_OWVAR 71
  38: PUSH
  39: LD_INT 1
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 2
  54: PPUSH
  55: CALL_OW 12
  59: ARRAY
  60: ST_TO_ADDR
// Action ;
  61: CALL 3429 0 0
// end ;
  65: END
// export debug ; export function InitVariables ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: CALL 18150 0 1
// end ; end_of_file
  91: PPOPN 1
  93: END
// export function LoadBuildings ; var i , tmp , b , j ; begin
  94: LD_INT 0
  96: PPUSH
  97: PPUSH
  98: PPUSH
  99: PPUSH
 100: PPUSH
// tmp := LoadVariable ( 13a_buildings , [ [ 7 , 1 , b_warehouse , 70 , 46 , 3 , 10 , 0 , 0 , 0 ] ] ) ;
 101: LD_ADDR_VAR 0 3
 105: PUSH
 106: LD_STRING 13a_buildings
 108: PPUSH
 109: LD_INT 7
 111: PUSH
 112: LD_INT 1
 114: PUSH
 115: LD_INT 1
 117: PUSH
 118: LD_INT 70
 120: PUSH
 121: LD_INT 46
 123: PUSH
 124: LD_INT 3
 126: PUSH
 127: LD_INT 10
 129: PUSH
 130: LD_INT 0
 132: PUSH
 133: LD_INT 0
 135: PUSH
 136: LD_INT 0
 138: PUSH
 139: EMPTY
 140: LIST
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: LIST
 146: LIST
 147: LIST
 148: LIST
 149: LIST
 150: PUSH
 151: EMPTY
 152: LIST
 153: PPUSH
 154: CALL_OW 30
 158: ST_TO_ADDR
// bc_kind1 := - 1 ;
 159: LD_ADDR_OWVAR 44
 163: PUSH
 164: LD_INT 1
 166: NEG
 167: ST_TO_ADDR
// bc_kind2 := - 1 ;
 168: LD_ADDR_OWVAR 45
 172: PUSH
 173: LD_INT 1
 175: NEG
 176: ST_TO_ADDR
// for i in tmp do
 177: LD_ADDR_VAR 0 2
 181: PUSH
 182: LD_VAR 0 3
 186: PUSH
 187: FOR_IN
 188: IFFALSE 433
// begin uc_side := 7 ;
 190: LD_ADDR_OWVAR 20
 194: PUSH
 195: LD_INT 7
 197: ST_TO_ADDR
// uc_nation := i [ 2 ] ;
 198: LD_ADDR_OWVAR 21
 202: PUSH
 203: LD_VAR 0 2
 207: PUSH
 208: LD_INT 2
 210: ARRAY
 211: ST_TO_ADDR
// if i [ 2 ] = 2 then
 212: LD_VAR 0 2
 216: PUSH
 217: LD_INT 2
 219: ARRAY
 220: PUSH
 221: LD_INT 2
 223: EQUAL
 224: IFFALSE 234
// uc_side := 4 ;
 226: LD_ADDR_OWVAR 20
 230: PUSH
 231: LD_INT 4
 233: ST_TO_ADDR
// bc_type := i [ 3 ] ;
 234: LD_ADDR_OWVAR 42
 238: PUSH
 239: LD_VAR 0 2
 243: PUSH
 244: LD_INT 3
 246: ARRAY
 247: ST_TO_ADDR
// if i [ 3 ] in [ b_oil_mine , b_siberite_mine ] then
 248: LD_VAR 0 2
 252: PUSH
 253: LD_INT 3
 255: ARRAY
 256: PUSH
 257: LD_INT 29
 259: PUSH
 260: LD_INT 30
 262: PUSH
 263: EMPTY
 264: LIST
 265: LIST
 266: IN
 267: IFFALSE 300
// SetResourceVisibility ( i [ 4 ] , i [ 5 ] , i [ 1 ] ) ;
 269: LD_VAR 0 2
 273: PUSH
 274: LD_INT 4
 276: ARRAY
 277: PPUSH
 278: LD_VAR 0 2
 282: PUSH
 283: LD_INT 5
 285: ARRAY
 286: PPUSH
 287: LD_VAR 0 2
 291: PUSH
 292: LD_INT 1
 294: ARRAY
 295: PPUSH
 296: CALL_OW 441
// if i [ 8 ] then
 300: LD_VAR 0 2
 304: PUSH
 305: LD_INT 8
 307: ARRAY
 308: IFFALSE 324
// bc_kind1 := i [ 8 ] ;
 310: LD_ADDR_OWVAR 44
 314: PUSH
 315: LD_VAR 0 2
 319: PUSH
 320: LD_INT 8
 322: ARRAY
 323: ST_TO_ADDR
// if i [ 9 ] then
 324: LD_VAR 0 2
 328: PUSH
 329: LD_INT 9
 331: ARRAY
 332: IFFALSE 348
// bc_kind2 := i [ 9 ] ;
 334: LD_ADDR_OWVAR 45
 338: PUSH
 339: LD_VAR 0 2
 343: PUSH
 344: LD_INT 9
 346: ARRAY
 347: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 4 ] , i [ 5 ] , i [ 6 ] ) ;
 348: LD_ADDR_VAR 0 4
 352: PUSH
 353: LD_VAR 0 2
 357: PUSH
 358: LD_INT 4
 360: ARRAY
 361: PPUSH
 362: LD_VAR 0 2
 366: PUSH
 367: LD_INT 5
 369: ARRAY
 370: PPUSH
 371: LD_VAR 0 2
 375: PUSH
 376: LD_INT 6
 378: ARRAY
 379: PPUSH
 380: CALL_OW 47
 384: ST_TO_ADDR
// SetBLevel ( b , i [ 7 ] ) ;
 385: LD_VAR 0 4
 389: PPUSH
 390: LD_VAR 0 2
 394: PUSH
 395: LD_INT 7
 397: ARRAY
 398: PPUSH
 399: CALL_OW 241
// if i [ 10 ] then
 403: LD_VAR 0 2
 407: PUSH
 408: LD_INT 10
 410: ARRAY
 411: IFFALSE 431
// PlaceWeaponTurret ( b , i [ 10 ] ) ;
 413: LD_VAR 0 4
 417: PPUSH
 418: LD_VAR 0 2
 422: PUSH
 423: LD_INT 10
 425: ARRAY
 426: PPUSH
 427: CALL_OW 431
// end ;
 431: GO 187
 433: POP
 434: POP
// if HexInfo ( 144 , 65 ) = 0 then
 435: LD_INT 144
 437: PPUSH
 438: LD_INT 65
 440: PPUSH
 441: CALL_OW 428
 445: PUSH
 446: LD_INT 0
 448: EQUAL
 449: IFFALSE 486
// begin uc_side := 4 ;
 451: LD_ADDR_OWVAR 20
 455: PUSH
 456: LD_INT 4
 458: ST_TO_ADDR
// bc_type := b_warehouse ;
 459: LD_ADDR_OWVAR 42
 463: PUSH
 464: LD_INT 1
 466: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 144 , 65 , 1 ) ;
 467: LD_ADDR_VAR 0 4
 471: PUSH
 472: LD_INT 144
 474: PPUSH
 475: LD_INT 65
 477: PPUSH
 478: LD_INT 1
 480: PPUSH
 481: CALL_OW 47
 485: ST_TO_ADDR
// end ; for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 486: LD_ADDR_VAR 0 2
 490: PUSH
 491: LD_INT 22
 493: PUSH
 494: LD_INT 7
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: PUSH
 501: LD_INT 2
 503: PUSH
 504: LD_INT 30
 506: PUSH
 507: LD_INT 0
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 30
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: PPUSH
 533: CALL_OW 69
 537: PUSH
 538: FOR_IN
 539: IFFALSE 591
// for j = 1 to 3 do
 541: LD_ADDR_VAR 0 5
 545: PUSH
 546: DOUBLE
 547: LD_INT 1
 549: DEC
 550: ST_TO_ADDR
 551: LD_INT 3
 553: PUSH
 554: FOR_TO
 555: IFFALSE 587
// SetResourceType ( GetBase ( i ) , j , 3000 / j ) ;
 557: LD_VAR 0 2
 561: PPUSH
 562: CALL_OW 274
 566: PPUSH
 567: LD_VAR 0 5
 571: PPUSH
 572: LD_INT 3000
 574: PUSH
 575: LD_VAR 0 5
 579: DIVREAL
 580: PPUSH
 581: CALL_OW 277
 585: GO 554
 587: POP
 588: POP
 589: GO 538
 591: POP
 592: POP
// for i in FilterUnitsInArea ( spot_area , [ f_side , 7 ] ) do
 593: LD_ADDR_VAR 0 2
 597: PUSH
 598: LD_INT 3
 600: PPUSH
 601: LD_INT 22
 603: PUSH
 604: LD_INT 7
 606: PUSH
 607: EMPTY
 608: LIST
 609: LIST
 610: PPUSH
 611: CALL_OW 70
 615: PUSH
 616: FOR_IN
 617: IFFALSE 630
// RemoveUnit ( i ) ;
 619: LD_VAR 0 2
 623: PPUSH
 624: CALL_OW 64
 628: GO 616
 630: POP
 631: POP
// end ; end_of_file
 632: LD_VAR 0 1
 636: RET
// export JMM , Burlak , freedom ; export Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Belkov , Gnyevko , Masha ; export squad1 , squad2 ; export function PrepareAlliance ; var tmp , i , veh ; begin
 637: LD_INT 0
 639: PPUSH
 640: PPUSH
 641: PPUSH
 642: PPUSH
// uc_side := 7 ;
 643: LD_ADDR_OWVAR 20
 647: PUSH
 648: LD_INT 7
 650: ST_TO_ADDR
// uc_nation := 1 ;
 651: LD_ADDR_OWVAR 21
 655: PUSH
 656: LD_INT 1
 658: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 13a_ ) ;
 659: LD_ADDR_EXP 2
 663: PUSH
 664: LD_STRING JMM
 666: PPUSH
 667: LD_EXP 1
 671: NOT
 672: PPUSH
 673: LD_STRING 13a_
 675: PPUSH
 676: CALL 22049 0 3
 680: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 13a_ ) ;
 681: LD_ADDR_EXP 3
 685: PUSH
 686: LD_STRING Burlak
 688: PPUSH
 689: LD_EXP 1
 693: NOT
 694: PPUSH
 695: LD_STRING 13a_
 697: PPUSH
 698: CALL 22049 0 3
 702: ST_TO_ADDR
// if debug then
 703: LD_EXP 1
 707: IFFALSE 742
// begin PrepareHuman ( sex_male , 4 , 10 ) ;
 709: LD_INT 1
 711: PPUSH
 712: LD_INT 4
 714: PPUSH
 715: LD_INT 10
 717: PPUSH
 718: CALL_OW 380
// JMM := CreateHuman ;
 722: LD_ADDR_EXP 2
 726: PUSH
 727: CALL_OW 44
 731: ST_TO_ADDR
// Burlak := CreateHuman ;
 732: LD_ADDR_EXP 3
 736: PUSH
 737: CALL_OW 44
 741: ST_TO_ADDR
// end ; freedom := FilterUnitsInArea ( freedom_base , [ [ f_side , 7 ] , [ f_or , [ f_nation , 1 ] , [ f_nation , 3 ] ] , [ f_btype , b_warehouse ] ] ) ;
 742: LD_ADDR_EXP 4
 746: PUSH
 747: LD_INT 1
 749: PPUSH
 750: LD_INT 22
 752: PUSH
 753: LD_INT 7
 755: PUSH
 756: EMPTY
 757: LIST
 758: LIST
 759: PUSH
 760: LD_INT 2
 762: PUSH
 763: LD_INT 23
 765: PUSH
 766: LD_INT 1
 768: PUSH
 769: EMPTY
 770: LIST
 771: LIST
 772: PUSH
 773: LD_INT 23
 775: PUSH
 776: LD_INT 3
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: LIST
 787: PUSH
 788: LD_INT 30
 790: PUSH
 791: LD_INT 1
 793: PUSH
 794: EMPTY
 795: LIST
 796: LIST
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: LIST
 802: PPUSH
 803: CALL_OW 70
 807: ST_TO_ADDR
// if freedom then
 808: LD_EXP 4
 812: IFFALSE 939
// begin freedom := freedom [ 1 ] ;
 814: LD_ADDR_EXP 4
 818: PUSH
 819: LD_EXP 4
 823: PUSH
 824: LD_INT 1
 826: ARRAY
 827: ST_TO_ADDR
// SetBName ( freedom , freedom ) ;
 828: LD_EXP 4
 832: PPUSH
 833: LD_STRING freedom
 835: PPUSH
 836: CALL_OW 500
// CenterNowOnUnits ( freedom ) ;
 840: LD_EXP 4
 844: PPUSH
 845: CALL_OW 87
// PlaceHumanInUnit ( JMM , freedom ) ;
 849: LD_EXP 2
 853: PPUSH
 854: LD_EXP 4
 858: PPUSH
 859: CALL_OW 52
// PlaceHumanInUnit ( Burlak , freedom ) ;
 863: LD_EXP 3
 867: PPUSH
 868: LD_EXP 4
 872: PPUSH
 873: CALL_OW 52
// SetResourceType ( GetBase ( freedom ) , mat_cans , 1000 ) ;
 877: LD_EXP 4
 881: PPUSH
 882: CALL_OW 274
 886: PPUSH
 887: LD_INT 1
 889: PPUSH
 890: LD_INT 1000
 892: PPUSH
 893: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_oil , 400 ) ;
 897: LD_EXP 4
 901: PPUSH
 902: CALL_OW 274
 906: PPUSH
 907: LD_INT 2
 909: PPUSH
 910: LD_INT 400
 912: PPUSH
 913: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_siberit , 30 ) ;
 917: LD_EXP 4
 921: PPUSH
 922: CALL_OW 274
 926: PPUSH
 927: LD_INT 3
 929: PPUSH
 930: LD_INT 30
 932: PPUSH
 933: CALL_OW 277
// end else
 937: GO 1026
// begin PlaceUnitArea ( JMM , freedom_base , false ) ;
 939: LD_EXP 2
 943: PPUSH
 944: LD_INT 1
 946: PPUSH
 947: LD_INT 0
 949: PPUSH
 950: CALL_OW 49
// PlaceUnitXYR ( Burlak , GetX ( JMM ) , GetY ( JMM ) , 8 , false ) ;
 954: LD_EXP 3
 958: PPUSH
 959: LD_EXP 2
 963: PPUSH
 964: CALL_OW 250
 968: PPUSH
 969: LD_EXP 2
 973: PPUSH
 974: CALL_OW 251
 978: PPUSH
 979: LD_INT 8
 981: PPUSH
 982: LD_INT 0
 984: PPUSH
 985: CALL_OW 50
// ComTurnUnit ( JMM , Burlak ) ;
 989: LD_EXP 2
 993: PPUSH
 994: LD_EXP 3
 998: PPUSH
 999: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
1003: LD_EXP 3
1007: PPUSH
1008: LD_EXP 2
1012: PPUSH
1013: CALL_OW 119
// CenterNowOnUnits ( JMM ) ;
1017: LD_EXP 2
1021: PPUSH
1022: CALL_OW 87
// end ; SetClass ( JMM , 2 ) ;
1026: LD_EXP 2
1030: PPUSH
1031: LD_INT 2
1033: PPUSH
1034: CALL_OW 336
// tmp := [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] , [ us_double_gun , us_laser , us_rocket_launcher , us_gatling_gun , us_cargo_bay ] ] ;
1038: LD_ADDR_VAR 0 2
1042: PUSH
1043: LD_INT 2
1045: PUSH
1046: LD_INT 3
1048: PUSH
1049: LD_INT 4
1051: PUSH
1052: LD_INT 5
1054: PUSH
1055: EMPTY
1056: LIST
1057: LIST
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 5
1063: PUSH
1064: LD_INT 9
1066: PUSH
1067: LD_INT 7
1069: PUSH
1070: LD_INT 4
1072: PUSH
1073: LD_INT 12
1075: PUSH
1076: EMPTY
1077: LIST
1078: LIST
1079: LIST
1080: LIST
1081: LIST
1082: PUSH
1083: EMPTY
1084: LIST
1085: LIST
1086: ST_TO_ADDR
// for i = 1 to 5 do
1087: LD_ADDR_VAR 0 3
1091: PUSH
1092: DOUBLE
1093: LD_INT 1
1095: DEC
1096: ST_TO_ADDR
1097: LD_INT 5
1099: PUSH
1100: FOR_TO
1101: IFFALSE 1285
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 5 + 1 ] , 100 ) ;
1103: LD_VAR 0 2
1107: PUSH
1108: LD_INT 1
1110: ARRAY
1111: PUSH
1112: LD_VAR 0 3
1116: PUSH
1117: LD_INT 4
1119: MOD
1120: PUSH
1121: LD_INT 1
1123: PLUS
1124: ARRAY
1125: PPUSH
1126: LD_INT 1
1128: PUSH
1129: LD_INT 3
1131: PUSH
1132: EMPTY
1133: LIST
1134: LIST
1135: PUSH
1136: LD_INT 1
1138: PPUSH
1139: LD_INT 2
1141: PPUSH
1142: CALL_OW 12
1146: ARRAY
1147: PPUSH
1148: LD_INT 1
1150: PPUSH
1151: LD_VAR 0 2
1155: PUSH
1156: LD_INT 2
1158: ARRAY
1159: PUSH
1160: LD_VAR 0 3
1164: PUSH
1165: LD_INT 5
1167: MOD
1168: PUSH
1169: LD_INT 1
1171: PLUS
1172: ARRAY
1173: PPUSH
1174: LD_INT 100
1176: PPUSH
1177: CALL 26913 0 5
// veh := CreateVehicle ;
1181: LD_ADDR_VAR 0 4
1185: PUSH
1186: CALL_OW 45
1190: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_INT 0
1198: PPUSH
1199: LD_INT 5
1201: PPUSH
1202: CALL_OW 12
1206: PPUSH
1207: CALL_OW 233
// if freedom then
1211: LD_EXP 4
1215: IFFALSE 1248
// begin if IsInArea ( freedom , freedom_base ) then
1217: LD_EXP 4
1221: PPUSH
1222: LD_INT 1
1224: PPUSH
1225: CALL_OW 308
1229: IFFALSE 1246
// PlaceUnitArea ( veh , freedom_base , false ) end else
1231: LD_VAR 0 4
1235: PPUSH
1236: LD_INT 1
1238: PPUSH
1239: LD_INT 0
1241: PPUSH
1242: CALL_OW 49
1246: GO 1283
// PlaceUnitXYR ( veh , GetX ( JMM ) , GetY ( JMM ) , 14 , false ) ;
1248: LD_VAR 0 4
1252: PPUSH
1253: LD_EXP 2
1257: PPUSH
1258: CALL_OW 250
1262: PPUSH
1263: LD_EXP 2
1267: PPUSH
1268: CALL_OW 251
1272: PPUSH
1273: LD_INT 14
1275: PPUSH
1276: LD_INT 0
1278: PPUSH
1279: CALL_OW 50
// end ;
1283: GO 1100
1285: POP
1286: POP
// uc_nation := 3 ;
1287: LD_ADDR_OWVAR 21
1291: PUSH
1292: LD_INT 3
1294: ST_TO_ADDR
// tmp := [ [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] ] ;
1295: LD_ADDR_VAR 0 2
1299: PUSH
1300: LD_INT 21
1302: PUSH
1303: LD_INT 22
1305: PUSH
1306: LD_INT 23
1308: PUSH
1309: LD_INT 24
1311: PUSH
1312: EMPTY
1313: LIST
1314: LIST
1315: LIST
1316: LIST
1317: PUSH
1318: LD_INT 43
1320: PUSH
1321: LD_INT 44
1323: PUSH
1324: LD_INT 45
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: LIST
1331: PUSH
1332: EMPTY
1333: LIST
1334: LIST
1335: ST_TO_ADDR
// for i = 1 to 5 do
1336: LD_ADDR_VAR 0 3
1340: PUSH
1341: DOUBLE
1342: LD_INT 1
1344: DEC
1345: ST_TO_ADDR
1346: LD_INT 5
1348: PUSH
1349: FOR_TO
1350: IFFALSE 1477
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 3 + 1 ] , 100 ) ;
1352: LD_VAR 0 2
1356: PUSH
1357: LD_INT 1
1359: ARRAY
1360: PUSH
1361: LD_VAR 0 3
1365: PUSH
1366: LD_INT 4
1368: MOD
1369: PUSH
1370: LD_INT 1
1372: PLUS
1373: ARRAY
1374: PPUSH
1375: LD_INT 1
1377: PUSH
1378: LD_INT 3
1380: PUSH
1381: EMPTY
1382: LIST
1383: LIST
1384: PUSH
1385: LD_INT 1
1387: PPUSH
1388: LD_INT 2
1390: PPUSH
1391: CALL_OW 12
1395: ARRAY
1396: PPUSH
1397: LD_INT 1
1399: PPUSH
1400: LD_VAR 0 2
1404: PUSH
1405: LD_INT 2
1407: ARRAY
1408: PUSH
1409: LD_VAR 0 3
1413: PUSH
1414: LD_INT 3
1416: MOD
1417: PUSH
1418: LD_INT 1
1420: PLUS
1421: ARRAY
1422: PPUSH
1423: LD_INT 100
1425: PPUSH
1426: CALL 26913 0 5
// veh := CreateVehicle ;
1430: LD_ADDR_VAR 0 4
1434: PUSH
1435: CALL_OW 45
1439: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1440: LD_VAR 0 4
1444: PPUSH
1445: LD_INT 0
1447: PPUSH
1448: LD_INT 5
1450: PPUSH
1451: CALL_OW 12
1455: PPUSH
1456: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1460: LD_VAR 0 4
1464: PPUSH
1465: LD_INT 1
1467: PPUSH
1468: LD_INT 0
1470: PPUSH
1471: CALL_OW 49
// end ;
1475: GO 1349
1477: POP
1478: POP
// if not FilterAllUnits ( [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
1479: LD_INT 2
1481: PUSH
1482: LD_INT 34
1484: PUSH
1485: LD_INT 12
1487: PUSH
1488: EMPTY
1489: LIST
1490: LIST
1491: PUSH
1492: LD_INT 34
1494: PUSH
1495: LD_INT 51
1497: PUSH
1498: EMPTY
1499: LIST
1500: LIST
1501: PUSH
1502: EMPTY
1503: LIST
1504: LIST
1505: LIST
1506: PPUSH
1507: CALL_OW 69
1511: NOT
1512: IFFALSE 1578
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 ) ;
1514: LD_INT 22
1516: PPUSH
1517: LD_INT 3
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_INT 51
1525: PPUSH
1526: LD_INT 0
1528: PPUSH
1529: CALL 26913 0 5
// veh := CreateVehicle ;
1533: LD_ADDR_VAR 0 4
1537: PUSH
1538: CALL_OW 45
1542: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1543: LD_VAR 0 4
1547: PPUSH
1548: LD_INT 0
1550: PPUSH
1551: LD_INT 5
1553: PPUSH
1554: CALL_OW 12
1558: PPUSH
1559: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1563: LD_VAR 0 4
1567: PPUSH
1568: LD_INT 1
1570: PPUSH
1571: LD_INT 0
1573: PPUSH
1574: CALL_OW 49
// end ; tmp := LoadVariable ( 13a_Masha , [ ] ) ;
1578: LD_ADDR_VAR 0 2
1582: PUSH
1583: LD_STRING 13a_Masha
1585: PPUSH
1586: EMPTY
1587: PPUSH
1588: CALL_OW 30
1592: ST_TO_ADDR
// if tmp then
1593: LD_VAR 0 2
1597: IFFALSE 1680
// begin PrepareVehicle ( tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] , 100 ) ;
1599: LD_VAR 0 2
1603: PUSH
1604: LD_INT 1
1606: ARRAY
1607: PPUSH
1608: LD_VAR 0 2
1612: PUSH
1613: LD_INT 2
1615: ARRAY
1616: PPUSH
1617: LD_VAR 0 2
1621: PUSH
1622: LD_INT 3
1624: ARRAY
1625: PPUSH
1626: LD_VAR 0 2
1630: PUSH
1631: LD_INT 4
1633: ARRAY
1634: PPUSH
1635: LD_INT 100
1637: PPUSH
1638: CALL 26913 0 5
// Masha := CreateVehicle ;
1642: LD_ADDR_EXP 36
1646: PUSH
1647: CALL_OW 45
1651: ST_TO_ADDR
// PlaceUnitArea ( Masha , freedom_base , false ) ;
1652: LD_EXP 36
1656: PPUSH
1657: LD_INT 1
1659: PPUSH
1660: LD_INT 0
1662: PPUSH
1663: CALL_OW 49
// SetMark ( Masha , - 7 ) ;
1667: LD_EXP 36
1671: PPUSH
1672: LD_INT 7
1674: NEG
1675: PPUSH
1676: CALL_OW 242
// end ; uc_side := 4 ;
1680: LD_ADDR_OWVAR 20
1684: PUSH
1685: LD_INT 4
1687: ST_TO_ADDR
// tmp := [ ] ;
1688: LD_ADDR_VAR 0 2
1692: PUSH
1693: EMPTY
1694: ST_TO_ADDR
// squad1 := [ ] ;
1695: LD_ADDR_EXP 37
1699: PUSH
1700: EMPTY
1701: ST_TO_ADDR
// squad2 := [ ] ;
1702: LD_ADDR_EXP 38
1706: PUSH
1707: EMPTY
1708: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
1709: LD_ADDR_EXP 19
1713: PUSH
1714: LD_STRING Joan
1716: PPUSH
1717: LD_EXP 1
1721: NOT
1722: PPUSH
1723: LD_STRING 13a_
1725: PPUSH
1726: CALL 22049 0 3
1730: ST_TO_ADDR
// if Joan then
1731: LD_EXP 19
1735: IFFALSE 1753
// tmp := tmp ^ Joan ;
1737: LD_ADDR_VAR 0 2
1741: PUSH
1742: LD_VAR 0 2
1746: PUSH
1747: LD_EXP 19
1751: ADD
1752: ST_TO_ADDR
// Roth := PrepareUnit ( Roth , ( not debug ) , 13a_ ) ;
1753: LD_ADDR_EXP 5
1757: PUSH
1758: LD_STRING Roth
1760: PPUSH
1761: LD_EXP 1
1765: NOT
1766: PPUSH
1767: LD_STRING 13a_
1769: PPUSH
1770: CALL 22049 0 3
1774: ST_TO_ADDR
// if Roth then
1775: LD_EXP 5
1779: IFFALSE 1797
// tmp := tmp ^ Roth ;
1781: LD_ADDR_VAR 0 2
1785: PUSH
1786: LD_VAR 0 2
1790: PUSH
1791: LD_EXP 5
1795: ADD
1796: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13a_ ) ;
1797: LD_ADDR_EXP 10
1801: PUSH
1802: LD_STRING Denis
1804: PPUSH
1805: LD_EXP 1
1809: NOT
1810: PPUSH
1811: LD_STRING 13a_
1813: PPUSH
1814: CALL 22049 0 3
1818: ST_TO_ADDR
// if Denis then
1819: LD_EXP 10
1823: IFFALSE 1841
// tmp := tmp ^ Denis ;
1825: LD_ADDR_VAR 0 2
1829: PUSH
1830: LD_VAR 0 2
1834: PUSH
1835: LD_EXP 10
1839: ADD
1840: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 13a_ ) ;
1841: LD_ADDR_EXP 20
1845: PUSH
1846: LD_STRING DeltaDoctor
1848: PPUSH
1849: LD_EXP 1
1853: NOT
1854: PPUSH
1855: LD_STRING 13a_
1857: PPUSH
1858: CALL 22049 0 3
1862: ST_TO_ADDR
// if DeltaDoctor then
1863: LD_EXP 20
1867: IFFALSE 1885
// tmp := tmp ^ DeltaDoctor ;
1869: LD_ADDR_VAR 0 2
1873: PUSH
1874: LD_VAR 0 2
1878: PUSH
1879: LD_EXP 20
1883: ADD
1884: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 13a_ ) ;
1885: LD_ADDR_EXP 18
1889: PUSH
1890: LD_STRING Simms
1892: PPUSH
1893: LD_EXP 1
1897: NOT
1898: PPUSH
1899: LD_STRING 13a_
1901: PPUSH
1902: CALL 22049 0 3
1906: ST_TO_ADDR
// if Simms then
1907: LD_EXP 18
1911: IFFALSE 1929
// tmp := tmp ^ Simms ;
1913: LD_ADDR_VAR 0 2
1917: PUSH
1918: LD_VAR 0 2
1922: PUSH
1923: LD_EXP 18
1927: ADD
1928: ST_TO_ADDR
// Gossudarov := PrepareUnit ( Gossudarov , ( not debug ) , 13a_ ) ;
1929: LD_ADDR_EXP 21
1933: PUSH
1934: LD_STRING Gossudarov
1936: PPUSH
1937: LD_EXP 1
1941: NOT
1942: PPUSH
1943: LD_STRING 13a_
1945: PPUSH
1946: CALL 22049 0 3
1950: ST_TO_ADDR
// if Gossudarov then
1951: LD_EXP 21
1955: IFFALSE 1973
// tmp := tmp ^ Gossudarov ;
1957: LD_ADDR_VAR 0 2
1961: PUSH
1962: LD_VAR 0 2
1966: PUSH
1967: LD_EXP 21
1971: ADD
1972: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , 13a_ ) ;
1973: LD_ADDR_EXP 22
1977: PUSH
1978: LD_STRING Kirilenkova
1980: PPUSH
1981: LD_EXP 1
1985: NOT
1986: PPUSH
1987: LD_STRING 13a_
1989: PPUSH
1990: CALL 22049 0 3
1994: ST_TO_ADDR
// if Kirilenkova then
1995: LD_EXP 22
1999: IFFALSE 2017
// tmp := tmp ^ Kirilenkova ;
2001: LD_ADDR_VAR 0 2
2005: PUSH
2006: LD_VAR 0 2
2010: PUSH
2011: LD_EXP 22
2015: ADD
2016: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2017: LD_ADDR_EXP 25
2021: PUSH
2022: LD_STRING Petrosyan
2024: PPUSH
2025: LD_EXP 1
2029: NOT
2030: PPUSH
2031: LD_STRING 13a_
2033: PPUSH
2034: CALL 22049 0 3
2038: ST_TO_ADDR
// if Petrosyan then
2039: LD_EXP 25
2043: IFFALSE 2061
// tmp := tmp ^ Petrosyan ;
2045: LD_ADDR_VAR 0 2
2049: PUSH
2050: LD_VAR 0 2
2054: PUSH
2055: LD_EXP 25
2059: ADD
2060: ST_TO_ADDR
// Scholtze := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2061: LD_ADDR_EXP 26
2065: PUSH
2066: LD_STRING Petrosyan
2068: PPUSH
2069: LD_EXP 1
2073: NOT
2074: PPUSH
2075: LD_STRING 13a_
2077: PPUSH
2078: CALL 22049 0 3
2082: ST_TO_ADDR
// if Scholtze then
2083: LD_EXP 26
2087: IFFALSE 2105
// tmp := tmp ^ Scholtze ;
2089: LD_ADDR_VAR 0 2
2093: PUSH
2094: LD_VAR 0 2
2098: PUSH
2099: LD_EXP 26
2103: ADD
2104: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , ( not debug ) , 13a_ ) ;
2105: LD_ADDR_EXP 24
2109: PUSH
2110: LD_STRING Dolgov
2112: PPUSH
2113: LD_EXP 1
2117: NOT
2118: PPUSH
2119: LD_STRING 13a_
2121: PPUSH
2122: CALL 22049 0 3
2126: ST_TO_ADDR
// if Dolgov then
2127: LD_EXP 24
2131: IFFALSE 2149
// tmp := tmp ^ Dolgov ;
2133: LD_ADDR_VAR 0 2
2137: PUSH
2138: LD_VAR 0 2
2142: PUSH
2143: LD_EXP 24
2147: ADD
2148: ST_TO_ADDR
// for i in tmp do
2149: LD_ADDR_VAR 0 3
2153: PUSH
2154: LD_VAR 0 2
2158: PUSH
2159: FOR_IN
2160: IFFALSE 2185
// PlaceUnitXYR ( i , 160 , 78 , 22 , false ) ;
2162: LD_VAR 0 3
2166: PPUSH
2167: LD_INT 160
2169: PPUSH
2170: LD_INT 78
2172: PPUSH
2173: LD_INT 22
2175: PPUSH
2176: LD_INT 0
2178: PPUSH
2179: CALL_OW 50
2183: GO 2159
2185: POP
2186: POP
// squad1 := tmp ;
2187: LD_ADDR_EXP 37
2191: PUSH
2192: LD_VAR 0 2
2196: ST_TO_ADDR
// tmp := [ ] ;
2197: LD_ADDR_VAR 0 2
2201: PUSH
2202: EMPTY
2203: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrova , ( not debug ) , 13a_ ) ;
2204: LD_ADDR_EXP 30
2208: PUSH
2209: LD_STRING Petrova
2211: PPUSH
2212: LD_EXP 1
2216: NOT
2217: PPUSH
2218: LD_STRING 13a_
2220: PPUSH
2221: CALL 22049 0 3
2225: ST_TO_ADDR
// if Petrovova then
2226: LD_EXP 30
2230: IFFALSE 2248
// tmp := tmp ^ Petrovova ;
2232: LD_ADDR_VAR 0 2
2236: PUSH
2237: LD_VAR 0 2
2241: PUSH
2242: LD_EXP 30
2246: ADD
2247: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , ( not debug ) , 13a_ ) ;
2248: LD_ADDR_EXP 23
2252: PUSH
2253: LD_STRING Titov
2255: PPUSH
2256: LD_EXP 1
2260: NOT
2261: PPUSH
2262: LD_STRING 13a_
2264: PPUSH
2265: CALL 22049 0 3
2269: ST_TO_ADDR
// if Titov then
2270: LD_EXP 23
2274: IFFALSE 2292
// tmp := tmp ^ Titov ;
2276: LD_ADDR_VAR 0 2
2280: PUSH
2281: LD_VAR 0 2
2285: PUSH
2286: LD_EXP 23
2290: ADD
2291: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , ( not debug ) , 13a_ ) ;
2292: LD_ADDR_EXP 33
2296: PUSH
2297: LD_STRING Karamazov
2299: PPUSH
2300: LD_EXP 1
2304: NOT
2305: PPUSH
2306: LD_STRING 13a_
2308: PPUSH
2309: CALL 22049 0 3
2313: ST_TO_ADDR
// if Karamazov then
2314: LD_EXP 33
2318: IFFALSE 2336
// tmp := tmp ^ Karamazov ;
2320: LD_ADDR_VAR 0 2
2324: PUSH
2325: LD_VAR 0 2
2329: PUSH
2330: LD_EXP 33
2334: ADD
2335: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13a_ ) ;
2336: LD_ADDR_EXP 16
2340: PUSH
2341: LD_STRING Frank
2343: PPUSH
2344: LD_EXP 1
2348: NOT
2349: PPUSH
2350: LD_STRING 13a_
2352: PPUSH
2353: CALL 22049 0 3
2357: ST_TO_ADDR
// if Frank then
2358: LD_EXP 16
2362: IFFALSE 2380
// tmp := tmp ^ Frank ;
2364: LD_ADDR_VAR 0 2
2368: PUSH
2369: LD_VAR 0 2
2373: PUSH
2374: LD_EXP 16
2378: ADD
2379: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13a_ ) ;
2380: LD_ADDR_EXP 7
2384: PUSH
2385: LD_STRING Donaldson
2387: PPUSH
2388: LD_EXP 1
2392: NOT
2393: PPUSH
2394: LD_STRING 13a_
2396: PPUSH
2397: CALL 22049 0 3
2401: ST_TO_ADDR
// if Donaldson then
2402: LD_EXP 7
2406: IFFALSE 2424
// tmp := tmp ^ Donaldson ;
2408: LD_ADDR_VAR 0 2
2412: PUSH
2413: LD_VAR 0 2
2417: PUSH
2418: LD_EXP 7
2422: ADD
2423: ST_TO_ADDR
// for i in tmp do
2424: LD_ADDR_VAR 0 3
2428: PUSH
2429: LD_VAR 0 2
2433: PUSH
2434: FOR_IN
2435: IFFALSE 2475
// begin PlaceUnitXYR ( i , 117 , 8 , 6 , false ) ;
2437: LD_VAR 0 3
2441: PPUSH
2442: LD_INT 117
2444: PPUSH
2445: LD_INT 8
2447: PPUSH
2448: LD_INT 6
2450: PPUSH
2451: LD_INT 0
2453: PPUSH
2454: CALL_OW 50
// ComTurnXY ( i , 117 , 8 ) ;
2458: LD_VAR 0 3
2462: PPUSH
2463: LD_INT 117
2465: PPUSH
2466: LD_INT 8
2468: PPUSH
2469: CALL_OW 118
// end ;
2473: GO 2434
2475: POP
2476: POP
// squad2 := tmp ;
2477: LD_ADDR_EXP 38
2481: PUSH
2482: LD_VAR 0 2
2486: ST_TO_ADDR
// uc_side := 0 ;
2487: LD_ADDR_OWVAR 20
2491: PUSH
2492: LD_INT 0
2494: ST_TO_ADDR
// uc_nation := 0 ;
2495: LD_ADDR_OWVAR 21
2499: PUSH
2500: LD_INT 0
2502: ST_TO_ADDR
// InitHc ;
2503: CALL_OW 19
// hc_importance := 0 ;
2507: LD_ADDR_OWVAR 32
2511: PUSH
2512: LD_INT 0
2514: ST_TO_ADDR
// hc_name := Find some goods! ;
2515: LD_ADDR_OWVAR 26
2519: PUSH
2520: LD_STRING Find some goods!
2522: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2523: LD_INT 0
2525: PPUSH
2526: LD_INT 12
2528: PPUSH
2529: LD_INT 1
2531: PPUSH
2532: CALL_OW 380
// PlaceUnitXY ( CreateHuman , 96 , 108 , false ) ;
2536: CALL_OW 44
2540: PPUSH
2541: LD_INT 96
2543: PPUSH
2544: LD_INT 108
2546: PPUSH
2547: LD_INT 0
2549: PPUSH
2550: CALL_OW 48
// InitHc ;
2554: CALL_OW 19
// end ;
2558: LD_VAR 0 1
2562: RET
// every 3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) do var Louis , veh ;
2563: LD_INT 22
2565: PUSH
2566: LD_INT 7
2568: PUSH
2569: EMPTY
2570: LIST
2571: LIST
2572: PUSH
2573: LD_INT 23
2575: PUSH
2576: LD_INT 0
2578: PUSH
2579: EMPTY
2580: LIST
2581: LIST
2582: PUSH
2583: EMPTY
2584: LIST
2585: LIST
2586: PPUSH
2587: CALL_OW 69
2591: IFFALSE 3056
2593: GO 2595
2595: DISABLE
2596: LD_INT 0
2598: PPUSH
2599: PPUSH
// begin InGameOn ;
2600: CALL_OW 8
// RemoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) [ 1 ] ) ;
2604: LD_INT 22
2606: PUSH
2607: LD_INT 7
2609: PUSH
2610: EMPTY
2611: LIST
2612: LIST
2613: PUSH
2614: LD_INT 23
2616: PUSH
2617: LD_INT 0
2619: PUSH
2620: EMPTY
2621: LIST
2622: LIST
2623: PUSH
2624: EMPTY
2625: LIST
2626: LIST
2627: PPUSH
2628: CALL_OW 69
2632: PUSH
2633: LD_INT 1
2635: ARRAY
2636: PPUSH
2637: CALL_OW 64
// game_speed := 4 ;
2641: LD_ADDR_OWVAR 65
2645: PUSH
2646: LD_INT 4
2648: ST_TO_ADDR
// ComMoveXY ( JMM , 93 , 100 ) ;
2649: LD_EXP 2
2653: PPUSH
2654: LD_INT 93
2656: PPUSH
2657: LD_INT 100
2659: PPUSH
2660: CALL_OW 111
// ComMoveXY ( Burlak , 93 , 99 ) ;
2664: LD_EXP 3
2668: PPUSH
2669: LD_INT 93
2671: PPUSH
2672: LD_INT 99
2674: PPUSH
2675: CALL_OW 111
// AddComTurnXY ( [ JMM , Burlak ] , 81 , 112 ) ;
2679: LD_EXP 2
2683: PUSH
2684: LD_EXP 3
2688: PUSH
2689: EMPTY
2690: LIST
2691: LIST
2692: PPUSH
2693: LD_INT 81
2695: PPUSH
2696: LD_INT 112
2698: PPUSH
2699: CALL_OW 178
// wait ( 0 0$5 ) ;
2703: LD_INT 175
2705: PPUSH
2706: CALL_OW 67
// music_nat := 2 ;
2710: LD_ADDR_OWVAR 71
2714: PUSH
2715: LD_INT 2
2717: ST_TO_ADDR
// music_class := 4 ;
2718: LD_ADDR_OWVAR 72
2722: PUSH
2723: LD_INT 4
2725: ST_TO_ADDR
// CenterNowOnXY ( 80 , 130 ) ;
2726: LD_INT 80
2728: PPUSH
2729: LD_INT 130
2731: PPUSH
2732: CALL_OW 86
// uc_nation := 2 ;
2736: LD_ADDR_OWVAR 21
2740: PUSH
2741: LD_INT 2
2743: ST_TO_ADDR
// uc_side := 2 ;
2744: LD_ADDR_OWVAR 20
2748: PUSH
2749: LD_INT 2
2751: ST_TO_ADDR
// hc_gallery = sandar ;
2752: LD_ADDR_OWVAR 33
2756: PUSH
2757: LD_STRING sandar
2759: ST_TO_ADDR
// hc_face_number = 1 ;
2760: LD_ADDR_OWVAR 34
2764: PUSH
2765: LD_INT 1
2767: ST_TO_ADDR
// hc_name = Louis Schulz ;
2768: LD_ADDR_OWVAR 26
2772: PUSH
2773: LD_STRING Louis Schulz
2775: ST_TO_ADDR
// hc_attr = [ 13 , 11 ] ;
2776: LD_ADDR_OWVAR 29
2780: PUSH
2781: LD_INT 13
2783: PUSH
2784: LD_INT 11
2786: PUSH
2787: EMPTY
2788: LIST
2789: LIST
2790: ST_TO_ADDR
// hc_basic_skills = [ 0 , 0 , 0 , 0 ] ;
2791: LD_ADDR_OWVAR 30
2795: PUSH
2796: LD_INT 0
2798: PUSH
2799: LD_INT 0
2801: PUSH
2802: LD_INT 0
2804: PUSH
2805: LD_INT 0
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 7 , 7 ] ;
2814: LD_ADDR_OWVAR 31
2818: PUSH
2819: LD_INT 10
2821: PUSH
2822: LD_INT 6
2824: PUSH
2825: LD_INT 7
2827: PUSH
2828: LD_INT 7
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: ST_TO_ADDR
// hc_sex = sex_male ;
2837: LD_ADDR_OWVAR 27
2841: PUSH
2842: LD_INT 1
2844: ST_TO_ADDR
// hc_class = 1 ;
2845: LD_ADDR_OWVAR 28
2849: PUSH
2850: LD_INT 1
2852: ST_TO_ADDR
// hc_importance = 100 ;
2853: LD_ADDR_OWVAR 32
2857: PUSH
2858: LD_INT 100
2860: ST_TO_ADDR
// Louis = CreateHuman ;
2861: LD_ADDR_VAR 0 1
2865: PUSH
2866: CALL_OW 44
2870: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_flame_thrower , 100 ) ;
2871: LD_INT 14
2873: PPUSH
2874: LD_INT 3
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_INT 26
2882: PPUSH
2883: LD_INT 100
2885: PPUSH
2886: CALL 26913 0 5
// veh := CreateVehicle ;
2890: LD_ADDR_VAR 0 2
2894: PUSH
2895: CALL_OW 45
2899: ST_TO_ADDR
// SetMark ( veh , - 2 ) ;
2900: LD_VAR 0 2
2904: PPUSH
2905: LD_INT 2
2907: NEG
2908: PPUSH
2909: CALL_OW 242
// PlaceUnitXY ( veh , 80 , 130 , false ) ;
2913: LD_VAR 0 2
2917: PPUSH
2918: LD_INT 80
2920: PPUSH
2921: LD_INT 130
2923: PPUSH
2924: LD_INT 0
2926: PPUSH
2927: CALL_OW 48
// PlaceHumanInUnit ( Louis , veh ) ;
2931: LD_VAR 0 1
2935: PPUSH
2936: LD_VAR 0 2
2940: PPUSH
2941: CALL_OW 52
// ComMoveXY ( Louis , 80 , 109 ) ;
2945: LD_VAR 0 1
2949: PPUSH
2950: LD_INT 80
2952: PPUSH
2953: LD_INT 109
2955: PPUSH
2956: CALL_OW 111
// AddComExitVehicle ( Louis ) ;
2960: LD_VAR 0 1
2964: PPUSH
2965: CALL_OW 181
// AddComMoveXY ( Louis , 80 , 131 ) ;
2969: LD_VAR 0 1
2973: PPUSH
2974: LD_INT 80
2976: PPUSH
2977: LD_INT 131
2979: PPUSH
2980: CALL_OW 171
// wait ( 0 0$06 ) ;
2984: LD_INT 210
2986: PPUSH
2987: CALL_OW 67
// InGameOff ;
2991: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
2995: LD_INT 35
2997: PPUSH
2998: CALL_OW 67
// until IsAt ( Louis , 80 , 131 ) ;
3002: LD_VAR 0 1
3006: PPUSH
3007: LD_INT 80
3009: PPUSH
3010: LD_INT 131
3012: PPUSH
3013: CALL_OW 307
3017: IFFALSE 2995
// SetSide ( veh , 7 ) ;
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_INT 7
3026: PPUSH
3027: CALL_OW 235
// RemoveUnit ( Louis ) ;
3031: LD_VAR 0 1
3035: PPUSH
3036: CALL_OW 64
// music_nat := 3 ;
3040: LD_ADDR_OWVAR 71
3044: PUSH
3045: LD_INT 3
3047: ST_TO_ADDR
// music_class := 0 ;
3048: LD_ADDR_OWVAR 72
3052: PUSH
3053: LD_INT 0
3055: ST_TO_ADDR
// end ;
3056: PPOPN 2
3058: END
// every 0 0$10 trigger squad1 do var i , xy ;
3059: LD_EXP 37
3063: IFFALSE 3426
3065: GO 3067
3067: DISABLE
3068: LD_INT 0
3070: PPUSH
3071: PPUSH
// begin enable ;
3072: ENABLE
// i := squad1 [ rand ( 1 , squad1 ) ] ;
3073: LD_ADDR_VAR 0 1
3077: PUSH
3078: LD_EXP 37
3082: PUSH
3083: LD_INT 1
3085: PPUSH
3086: LD_EXP 37
3090: PPUSH
3091: CALL_OW 12
3095: ARRAY
3096: ST_TO_ADDR
// if IsInUnit ( i ) then
3097: LD_VAR 0 1
3101: PPUSH
3102: CALL_OW 310
3106: IFFALSE 3110
// exit ;
3108: GO 3426
// ComRemember ( i ) ;
3110: LD_VAR 0 1
3114: PPUSH
3115: CALL_OW 143
// xy := [ ShiftX ( GetX ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) , ShiftY ( GetY ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) ] ;
3119: LD_ADDR_VAR 0 2
3123: PUSH
3124: LD_VAR 0 1
3128: PPUSH
3129: CALL_OW 250
3133: PPUSH
3134: LD_INT 0
3136: PPUSH
3137: LD_INT 5
3139: PPUSH
3140: CALL_OW 12
3144: PPUSH
3145: LD_INT 2
3147: PPUSH
3148: LD_INT 7
3150: PPUSH
3151: CALL_OW 12
3155: PPUSH
3156: CALL_OW 272
3160: PUSH
3161: LD_VAR 0 1
3165: PPUSH
3166: CALL_OW 251
3170: PPUSH
3171: LD_INT 0
3173: PPUSH
3174: LD_INT 5
3176: PPUSH
3177: CALL_OW 12
3181: PPUSH
3182: LD_INT 2
3184: PPUSH
3185: LD_INT 7
3187: PPUSH
3188: CALL_OW 12
3192: PPUSH
3193: CALL_OW 273
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) <> 0 or not ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
3202: LD_VAR 0 2
3206: PUSH
3207: LD_INT 1
3209: ARRAY
3210: PPUSH
3211: LD_VAR 0 2
3215: PUSH
3216: LD_INT 2
3218: ARRAY
3219: PPUSH
3220: CALL_OW 428
3224: PUSH
3225: LD_INT 0
3227: NONEQUAL
3228: PUSH
3229: LD_VAR 0 2
3233: PUSH
3234: LD_INT 1
3236: ARRAY
3237: PPUSH
3238: LD_VAR 0 2
3242: PUSH
3243: LD_INT 2
3245: ARRAY
3246: PPUSH
3247: CALL_OW 488
3251: NOT
3252: OR
3253: IFFALSE 3257
// exit ;
3255: GO 3426
// AddComMoveXY ( i , xy [ 1 ] , xy [ 2 ] ) ;
3257: LD_VAR 0 1
3261: PPUSH
3262: LD_VAR 0 2
3266: PUSH
3267: LD_INT 1
3269: ARRAY
3270: PPUSH
3271: LD_VAR 0 2
3275: PUSH
3276: LD_INT 2
3278: ARRAY
3279: PPUSH
3280: CALL_OW 171
// AddComWait ( i , 0 0$10 ) ;
3284: LD_VAR 0 1
3288: PPUSH
3289: LD_INT 350
3291: PPUSH
3292: CALL_OW 202
// if Prob ( 60 ) and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) then
3296: LD_INT 60
3298: PPUSH
3299: CALL_OW 13
3303: PUSH
3304: LD_INT 22
3306: PUSH
3307: LD_INT 4
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: LD_INT 21
3316: PUSH
3317: LD_INT 3
3319: PUSH
3320: EMPTY
3321: LIST
3322: LIST
3323: PUSH
3324: EMPTY
3325: LIST
3326: LIST
3327: PPUSH
3328: CALL_OW 69
3332: AND
3333: IFFALSE 3417
// begin AddComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , i ) ) ;
3335: LD_VAR 0 1
3339: PPUSH
3340: LD_INT 22
3342: PUSH
3343: LD_INT 4
3345: PUSH
3346: EMPTY
3347: LIST
3348: LIST
3349: PUSH
3350: LD_INT 21
3352: PUSH
3353: LD_INT 3
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: PUSH
3360: EMPTY
3361: LIST
3362: LIST
3363: PPUSH
3364: CALL_OW 69
3368: PPUSH
3369: LD_VAR 0 1
3373: PPUSH
3374: CALL_OW 74
3378: PPUSH
3379: CALL_OW 180
// repeat wait ( 0 0$30 ) ;
3383: LD_INT 1050
3385: PPUSH
3386: CALL_OW 67
// until IsInUnit ( i ) ;
3390: LD_VAR 0 1
3394: PPUSH
3395: CALL_OW 310
3399: IFFALSE 3383
// wait ( 0 0$30 ) ;
3401: LD_INT 1050
3403: PPUSH
3404: CALL_OW 67
// AddComExitBuilding ( i ) ;
3408: LD_VAR 0 1
3412: PPUSH
3413: CALL_OW 182
// end ; AddComReturn ( i ) ;
3417: LD_VAR 0 1
3421: PPUSH
3422: CALL_OW 204
// end ; end_of_file
3426: PPOPN 2
3428: END
// export function Action ; begin
3429: LD_INT 0
3431: PPUSH
// InGameOn ;
3432: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
3436: LD_EXP 2
3440: PPUSH
3441: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
3445: LD_EXP 2
3449: PPUSH
3450: LD_STRING D1-JMM-1
3452: PPUSH
3453: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
3457: LD_EXP 3
3461: PPUSH
3462: LD_STRING D1-Bur-1
3464: PPUSH
3465: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3469: LD_EXP 2
3473: PPUSH
3474: LD_STRING D1-JMM-2
3476: PPUSH
3477: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
3481: LD_EXP 3
3485: PPUSH
3486: LD_STRING D1-Bur-2
3488: PPUSH
3489: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3493: LD_EXP 2
3497: PPUSH
3498: LD_STRING D1-JMM-3
3500: PPUSH
3501: CALL_OW 88
// Say ( Burlak , D1-Bur-3 ) ;
3505: LD_EXP 3
3509: PPUSH
3510: LD_STRING D1-Bur-3
3512: PPUSH
3513: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3517: LD_EXP 2
3521: PPUSH
3522: LD_STRING D1-JMM-4
3524: PPUSH
3525: CALL_OW 88
// Say ( Burlak , D1-Bur-4 ) ;
3529: LD_EXP 3
3533: PPUSH
3534: LD_STRING D1-Bur-4
3536: PPUSH
3537: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3541: LD_EXP 2
3545: PPUSH
3546: LD_STRING D1-JMM-5
3548: PPUSH
3549: CALL_OW 88
// Say ( Burlak , D1-Bur-5 ) ;
3553: LD_EXP 3
3557: PPUSH
3558: LD_STRING D1-Bur-5
3560: PPUSH
3561: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3565: LD_EXP 2
3569: PPUSH
3570: LD_STRING D1-JMM-6
3572: PPUSH
3573: CALL_OW 88
// Say ( Burlak , D1-Bur-6 ) ;
3577: LD_EXP 3
3581: PPUSH
3582: LD_STRING D1-Bur-6
3584: PPUSH
3585: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
3589: LD_EXP 2
3593: PPUSH
3594: LD_STRING D1-JMM-7
3596: PPUSH
3597: CALL_OW 88
// wait ( 20 ) ;
3601: LD_INT 20
3603: PPUSH
3604: CALL_OW 67
// Query ( QTruck ) ;
3608: LD_STRING QTruck
3610: PPUSH
3611: CALL_OW 97
// InGameOff ;
3615: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
3619: LD_STRING MArtPickup
3621: PPUSH
3622: CALL_OW 337
// SetAreaMapShow ( escape_area , 1 ) ;
3626: LD_INT 2
3628: PPUSH
3629: LD_INT 1
3631: PPUSH
3632: CALL_OW 424
// end ;
3636: LD_VAR 0 1
3640: RET
// every 0 0$3 trigger FilterUnitsInArea ( escape_area , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) = 2 and IsInUnit ( JMM ) and IsInUnit ( Burlak ) and ( GetWeapon ( IsInUnit ( JMM ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] or GetWeapon ( IsInUnit ( Burlak ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] ) do var i , macmilanVeh , burlakVeh ;
3641: LD_INT 2
3643: PPUSH
3644: LD_INT 21
3646: PUSH
3647: LD_INT 2
3649: PUSH
3650: EMPTY
3651: LIST
3652: LIST
3653: PUSH
3654: LD_INT 33
3656: PUSH
3657: LD_INT 1
3659: PUSH
3660: EMPTY
3661: LIST
3662: LIST
3663: PUSH
3664: LD_INT 3
3666: PUSH
3667: LD_INT 58
3669: PUSH
3670: EMPTY
3671: LIST
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: EMPTY
3678: LIST
3679: LIST
3680: LIST
3681: PPUSH
3682: CALL_OW 70
3686: PUSH
3687: LD_INT 2
3689: EQUAL
3690: PUSH
3691: LD_EXP 2
3695: PPUSH
3696: CALL_OW 310
3700: AND
3701: PUSH
3702: LD_EXP 3
3706: PPUSH
3707: CALL_OW 310
3711: AND
3712: PUSH
3713: LD_EXP 2
3717: PPUSH
3718: CALL_OW 310
3722: PPUSH
3723: CALL_OW 264
3727: PUSH
3728: LD_INT 51
3730: PUSH
3731: LD_INT 12
3733: PUSH
3734: LD_EXP 40
3738: PUSH
3739: LD_INT 32
3741: PUSH
3742: EMPTY
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: IN
3748: PUSH
3749: LD_EXP 3
3753: PPUSH
3754: CALL_OW 310
3758: PPUSH
3759: CALL_OW 264
3763: PUSH
3764: LD_INT 51
3766: PUSH
3767: LD_INT 12
3769: PUSH
3770: LD_EXP 40
3774: PUSH
3775: LD_INT 32
3777: PUSH
3778: EMPTY
3779: LIST
3780: LIST
3781: LIST
3782: LIST
3783: IN
3784: OR
3785: AND
3786: IFFALSE 3996
3788: GO 3790
3790: DISABLE
3791: LD_INT 0
3793: PPUSH
3794: PPUSH
3795: PPUSH
// begin macmilanVeh := IsInUnit ( JMM ) ;
3796: LD_ADDR_VAR 0 2
3800: PUSH
3801: LD_EXP 2
3805: PPUSH
3806: CALL_OW 310
3810: ST_TO_ADDR
// burlakVeh := IsInUnit ( Burlak ) ;
3811: LD_ADDR_VAR 0 3
3815: PUSH
3816: LD_EXP 3
3820: PPUSH
3821: CALL_OW 310
3825: ST_TO_ADDR
// SaveVariable ( [ GetChassis ( macmilanVeh ) , GetEngine ( macmilanVeh ) , control_manual , GetWeapon ( macmilanVeh ) , GetMark ( macmilanVeh ) , GetNation ( macmilanVeh ) ] , 14a_JMMVeh ) ;
3826: LD_VAR 0 2
3830: PPUSH
3831: CALL_OW 265
3835: PUSH
3836: LD_VAR 0 2
3840: PPUSH
3841: CALL_OW 262
3845: PUSH
3846: LD_INT 1
3848: PUSH
3849: LD_VAR 0 2
3853: PPUSH
3854: CALL_OW 264
3858: PUSH
3859: LD_VAR 0 2
3863: PPUSH
3864: CALL_OW 271
3868: PUSH
3869: LD_VAR 0 2
3873: PPUSH
3874: CALL_OW 248
3878: PUSH
3879: EMPTY
3880: LIST
3881: LIST
3882: LIST
3883: LIST
3884: LIST
3885: LIST
3886: PPUSH
3887: LD_STRING 14a_JMMVeh
3889: PPUSH
3890: CALL_OW 39
// SaveVariable ( [ GetChassis ( burlakVeh ) , GetEngine ( burlakVeh ) , control_manual , GetWeapon ( burlakVeh ) , GetMark ( burlakVeh ) , GetNation ( burlakVeh ) ] , 14a_BurlakVeh ) ;
3894: LD_VAR 0 3
3898: PPUSH
3899: CALL_OW 265
3903: PUSH
3904: LD_VAR 0 3
3908: PPUSH
3909: CALL_OW 262
3913: PUSH
3914: LD_INT 1
3916: PUSH
3917: LD_VAR 0 3
3921: PPUSH
3922: CALL_OW 264
3926: PUSH
3927: LD_VAR 0 3
3931: PPUSH
3932: CALL_OW 271
3936: PUSH
3937: LD_VAR 0 3
3941: PPUSH
3942: CALL_OW 248
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: PPUSH
3955: LD_STRING 14a_BurlakVeh
3957: PPUSH
3958: CALL_OW 39
// SaveCharacters ( JMM , 14a_JMM ) ;
3962: LD_EXP 2
3966: PPUSH
3967: LD_STRING 14a_JMM
3969: PPUSH
3970: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
3974: LD_EXP 3
3978: PPUSH
3979: LD_STRING 14a_Burlak
3981: PPUSH
3982: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
3986: LD_INT 1
3988: PPUSH
3989: LD_STRING %_cont
3991: PPUSH
3992: CALL_OW 340
// end ;
3996: PPOPN 3
3998: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 950 ] ] ] ) do
3999: LD_INT 22
4001: PUSH
4002: LD_INT 4
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 3
4011: PUSH
4012: LD_INT 24
4014: PUSH
4015: LD_INT 950
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: PUSH
4022: EMPTY
4023: LIST
4024: LIST
4025: PUSH
4026: EMPTY
4027: LIST
4028: LIST
4029: PPUSH
4030: CALL_OW 69
4034: IFFALSE 4046
4036: GO 4038
4038: DISABLE
// YouLost ( FriendlyFire ) ;
4039: LD_STRING FriendlyFire
4041: PPUSH
4042: CALL_OW 104
4046: END
// every 0 0$1 trigger IsDead ( Burlak ) do
4047: LD_EXP 3
4051: PPUSH
4052: CALL_OW 301
4056: IFFALSE 4068
4058: GO 4060
4060: DISABLE
// YouLost ( Burlak ) ;
4061: LD_STRING Burlak
4063: PPUSH
4064: CALL_OW 104
4068: END
// every 0 0$1 trigger IsDead ( JMM ) do
4069: LD_EXP 2
4073: PPUSH
4074: CALL_OW 301
4078: IFFALSE 4090
4080: GO 4082
4082: DISABLE
// YouLost ( JMM ) ; end_of_file
4083: LD_STRING JMM
4085: PPUSH
4086: CALL_OW 104
4090: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
4091: LD_INT 0
4093: PPUSH
// ar_miner := 81 ;
4094: LD_ADDR_EXP 46
4098: PUSH
4099: LD_INT 81
4101: ST_TO_ADDR
// ar_crane := 88 ;
4102: LD_ADDR_EXP 45
4106: PUSH
4107: LD_INT 88
4109: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
4110: LD_ADDR_EXP 40
4114: PUSH
4115: LD_INT 89
4117: ST_TO_ADDR
// us_hack := 99 ;
4118: LD_ADDR_EXP 41
4122: PUSH
4123: LD_INT 99
4125: ST_TO_ADDR
// us_artillery := 97 ;
4126: LD_ADDR_EXP 42
4130: PUSH
4131: LD_INT 97
4133: ST_TO_ADDR
// ar_bio_bomb := 91 ;
4134: LD_ADDR_EXP 43
4138: PUSH
4139: LD_INT 91
4141: ST_TO_ADDR
// ar_mortar := 92 ;
4142: LD_ADDR_EXP 44
4146: PUSH
4147: LD_INT 92
4149: ST_TO_ADDR
// ru_radar := 98 ;
4150: LD_ADDR_EXP 39
4154: PUSH
4155: LD_INT 98
4157: ST_TO_ADDR
// tech_Artillery := 80 ;
4158: LD_ADDR_EXP 47
4162: PUSH
4163: LD_INT 80
4165: ST_TO_ADDR
// tech_RadMat := 81 ;
4166: LD_ADDR_EXP 48
4170: PUSH
4171: LD_INT 81
4173: ST_TO_ADDR
// tech_BasicTools := 82 ;
4174: LD_ADDR_EXP 49
4178: PUSH
4179: LD_INT 82
4181: ST_TO_ADDR
// tech_Cargo := 83 ;
4182: LD_ADDR_EXP 50
4186: PUSH
4187: LD_INT 83
4189: ST_TO_ADDR
// tech_Track := 84 ;
4190: LD_ADDR_EXP 51
4194: PUSH
4195: LD_INT 84
4197: ST_TO_ADDR
// tech_Crane := 85 ;
4198: LD_ADDR_EXP 52
4202: PUSH
4203: LD_INT 85
4205: ST_TO_ADDR
// tech_Bulldozer := 86 ;
4206: LD_ADDR_EXP 53
4210: PUSH
4211: LD_INT 86
4213: ST_TO_ADDR
// tech_Hovercraft := 87 ;
4214: LD_ADDR_EXP 54
4218: PUSH
4219: LD_INT 87
4221: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
4222: LD_ADDR_EXP 55
4226: PUSH
4227: LD_INT 88
4229: ST_TO_ADDR
// class_mastodont := 31 ;
4230: LD_ADDR_EXP 56
4234: PUSH
4235: LD_INT 31
4237: ST_TO_ADDR
// class_horse := 21 ;
4238: LD_ADDR_EXP 57
4242: PUSH
4243: LD_INT 21
4245: ST_TO_ADDR
// end ;
4246: LD_VAR 0 1
4250: RET
// every 1 do
4251: GO 4253
4253: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
4254: CALL 4091 0 0
4258: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4259: LD_INT 0
4261: PPUSH
// if p2 = 100 then
4262: LD_VAR 0 2
4266: PUSH
4267: LD_INT 100
4269: EQUAL
4270: IFFALSE 5273
// begin if not StreamModeActive then
4272: LD_EXP 58
4276: NOT
4277: IFFALSE 4287
// StreamModeActive := true ;
4279: LD_ADDR_EXP 58
4283: PUSH
4284: LD_INT 1
4286: ST_TO_ADDR
// if p3 = 0 then
4287: LD_VAR 0 3
4291: PUSH
4292: LD_INT 0
4294: EQUAL
4295: IFFALSE 4301
// InitStreamMode ;
4297: CALL 5433 0 0
// if p3 = 1 then
4301: LD_VAR 0 3
4305: PUSH
4306: LD_INT 1
4308: EQUAL
4309: IFFALSE 4319
// sRocket := true ;
4311: LD_ADDR_EXP 63
4315: PUSH
4316: LD_INT 1
4318: ST_TO_ADDR
// if p3 = 2 then
4319: LD_VAR 0 3
4323: PUSH
4324: LD_INT 2
4326: EQUAL
4327: IFFALSE 4337
// sSpeed := true ;
4329: LD_ADDR_EXP 62
4333: PUSH
4334: LD_INT 1
4336: ST_TO_ADDR
// if p3 = 3 then
4337: LD_VAR 0 3
4341: PUSH
4342: LD_INT 3
4344: EQUAL
4345: IFFALSE 4355
// sEngine := true ;
4347: LD_ADDR_EXP 64
4351: PUSH
4352: LD_INT 1
4354: ST_TO_ADDR
// if p3 = 4 then
4355: LD_VAR 0 3
4359: PUSH
4360: LD_INT 4
4362: EQUAL
4363: IFFALSE 4373
// sSpec := true ;
4365: LD_ADDR_EXP 61
4369: PUSH
4370: LD_INT 1
4372: ST_TO_ADDR
// if p3 = 5 then
4373: LD_VAR 0 3
4377: PUSH
4378: LD_INT 5
4380: EQUAL
4381: IFFALSE 4391
// sLevel := true ;
4383: LD_ADDR_EXP 65
4387: PUSH
4388: LD_INT 1
4390: ST_TO_ADDR
// if p3 = 6 then
4391: LD_VAR 0 3
4395: PUSH
4396: LD_INT 6
4398: EQUAL
4399: IFFALSE 4409
// sArmoury := true ;
4401: LD_ADDR_EXP 66
4405: PUSH
4406: LD_INT 1
4408: ST_TO_ADDR
// if p3 = 7 then
4409: LD_VAR 0 3
4413: PUSH
4414: LD_INT 7
4416: EQUAL
4417: IFFALSE 4427
// sRadar := true ;
4419: LD_ADDR_EXP 67
4423: PUSH
4424: LD_INT 1
4426: ST_TO_ADDR
// if p3 = 8 then
4427: LD_VAR 0 3
4431: PUSH
4432: LD_INT 8
4434: EQUAL
4435: IFFALSE 4445
// sBunker := true ;
4437: LD_ADDR_EXP 68
4441: PUSH
4442: LD_INT 1
4444: ST_TO_ADDR
// if p3 = 9 then
4445: LD_VAR 0 3
4449: PUSH
4450: LD_INT 9
4452: EQUAL
4453: IFFALSE 4463
// sHack := true ;
4455: LD_ADDR_EXP 69
4459: PUSH
4460: LD_INT 1
4462: ST_TO_ADDR
// if p3 = 10 then
4463: LD_VAR 0 3
4467: PUSH
4468: LD_INT 10
4470: EQUAL
4471: IFFALSE 4481
// sFire := true ;
4473: LD_ADDR_EXP 70
4477: PUSH
4478: LD_INT 1
4480: ST_TO_ADDR
// if p3 = 11 then
4481: LD_VAR 0 3
4485: PUSH
4486: LD_INT 11
4488: EQUAL
4489: IFFALSE 4499
// sRefresh := true ;
4491: LD_ADDR_EXP 71
4495: PUSH
4496: LD_INT 1
4498: ST_TO_ADDR
// if p3 = 12 then
4499: LD_VAR 0 3
4503: PUSH
4504: LD_INT 12
4506: EQUAL
4507: IFFALSE 4517
// sExp := true ;
4509: LD_ADDR_EXP 72
4513: PUSH
4514: LD_INT 1
4516: ST_TO_ADDR
// if p3 = 13 then
4517: LD_VAR 0 3
4521: PUSH
4522: LD_INT 13
4524: EQUAL
4525: IFFALSE 4535
// sDepot := true ;
4527: LD_ADDR_EXP 73
4531: PUSH
4532: LD_INT 1
4534: ST_TO_ADDR
// if p3 = 14 then
4535: LD_VAR 0 3
4539: PUSH
4540: LD_INT 14
4542: EQUAL
4543: IFFALSE 4553
// sFlag := true ;
4545: LD_ADDR_EXP 74
4549: PUSH
4550: LD_INT 1
4552: ST_TO_ADDR
// if p3 = 15 then
4553: LD_VAR 0 3
4557: PUSH
4558: LD_INT 15
4560: EQUAL
4561: IFFALSE 4571
// sKamikadze := true ;
4563: LD_ADDR_EXP 82
4567: PUSH
4568: LD_INT 1
4570: ST_TO_ADDR
// if p3 = 16 then
4571: LD_VAR 0 3
4575: PUSH
4576: LD_INT 16
4578: EQUAL
4579: IFFALSE 4589
// sTroll := true ;
4581: LD_ADDR_EXP 83
4585: PUSH
4586: LD_INT 1
4588: ST_TO_ADDR
// if p3 = 17 then
4589: LD_VAR 0 3
4593: PUSH
4594: LD_INT 17
4596: EQUAL
4597: IFFALSE 4607
// sSlow := true ;
4599: LD_ADDR_EXP 84
4603: PUSH
4604: LD_INT 1
4606: ST_TO_ADDR
// if p3 = 18 then
4607: LD_VAR 0 3
4611: PUSH
4612: LD_INT 18
4614: EQUAL
4615: IFFALSE 4625
// sLack := true ;
4617: LD_ADDR_EXP 85
4621: PUSH
4622: LD_INT 1
4624: ST_TO_ADDR
// if p3 = 19 then
4625: LD_VAR 0 3
4629: PUSH
4630: LD_INT 19
4632: EQUAL
4633: IFFALSE 4643
// sTank := true ;
4635: LD_ADDR_EXP 87
4639: PUSH
4640: LD_INT 1
4642: ST_TO_ADDR
// if p3 = 20 then
4643: LD_VAR 0 3
4647: PUSH
4648: LD_INT 20
4650: EQUAL
4651: IFFALSE 4661
// sRemote := true ;
4653: LD_ADDR_EXP 88
4657: PUSH
4658: LD_INT 1
4660: ST_TO_ADDR
// if p3 = 21 then
4661: LD_VAR 0 3
4665: PUSH
4666: LD_INT 21
4668: EQUAL
4669: IFFALSE 4679
// sPowell := true ;
4671: LD_ADDR_EXP 89
4675: PUSH
4676: LD_INT 1
4678: ST_TO_ADDR
// if p3 = 22 then
4679: LD_VAR 0 3
4683: PUSH
4684: LD_INT 22
4686: EQUAL
4687: IFFALSE 4697
// sTeleport := true ;
4689: LD_ADDR_EXP 92
4693: PUSH
4694: LD_INT 1
4696: ST_TO_ADDR
// if p3 = 23 then
4697: LD_VAR 0 3
4701: PUSH
4702: LD_INT 23
4704: EQUAL
4705: IFFALSE 4715
// sOilTower := true ;
4707: LD_ADDR_EXP 94
4711: PUSH
4712: LD_INT 1
4714: ST_TO_ADDR
// if p3 = 24 then
4715: LD_VAR 0 3
4719: PUSH
4720: LD_INT 24
4722: EQUAL
4723: IFFALSE 4733
// sShovel := true ;
4725: LD_ADDR_EXP 95
4729: PUSH
4730: LD_INT 1
4732: ST_TO_ADDR
// if p3 = 25 then
4733: LD_VAR 0 3
4737: PUSH
4738: LD_INT 25
4740: EQUAL
4741: IFFALSE 4751
// sSheik := true ;
4743: LD_ADDR_EXP 96
4747: PUSH
4748: LD_INT 1
4750: ST_TO_ADDR
// if p3 = 26 then
4751: LD_VAR 0 3
4755: PUSH
4756: LD_INT 26
4758: EQUAL
4759: IFFALSE 4769
// sEarthquake := true ;
4761: LD_ADDR_EXP 98
4765: PUSH
4766: LD_INT 1
4768: ST_TO_ADDR
// if p3 = 27 then
4769: LD_VAR 0 3
4773: PUSH
4774: LD_INT 27
4776: EQUAL
4777: IFFALSE 4787
// sAI := true ;
4779: LD_ADDR_EXP 99
4783: PUSH
4784: LD_INT 1
4786: ST_TO_ADDR
// if p3 = 28 then
4787: LD_VAR 0 3
4791: PUSH
4792: LD_INT 28
4794: EQUAL
4795: IFFALSE 4805
// sCargo := true ;
4797: LD_ADDR_EXP 102
4801: PUSH
4802: LD_INT 1
4804: ST_TO_ADDR
// if p3 = 29 then
4805: LD_VAR 0 3
4809: PUSH
4810: LD_INT 29
4812: EQUAL
4813: IFFALSE 4823
// sDLaser := true ;
4815: LD_ADDR_EXP 103
4819: PUSH
4820: LD_INT 1
4822: ST_TO_ADDR
// if p3 = 30 then
4823: LD_VAR 0 3
4827: PUSH
4828: LD_INT 30
4830: EQUAL
4831: IFFALSE 4841
// sExchange := true ;
4833: LD_ADDR_EXP 104
4837: PUSH
4838: LD_INT 1
4840: ST_TO_ADDR
// if p3 = 31 then
4841: LD_VAR 0 3
4845: PUSH
4846: LD_INT 31
4848: EQUAL
4849: IFFALSE 4859
// sFac := true ;
4851: LD_ADDR_EXP 105
4855: PUSH
4856: LD_INT 1
4858: ST_TO_ADDR
// if p3 = 32 then
4859: LD_VAR 0 3
4863: PUSH
4864: LD_INT 32
4866: EQUAL
4867: IFFALSE 4877
// sPower := true ;
4869: LD_ADDR_EXP 106
4873: PUSH
4874: LD_INT 1
4876: ST_TO_ADDR
// if p3 = 33 then
4877: LD_VAR 0 3
4881: PUSH
4882: LD_INT 33
4884: EQUAL
4885: IFFALSE 4895
// sRandom := true ;
4887: LD_ADDR_EXP 107
4891: PUSH
4892: LD_INT 1
4894: ST_TO_ADDR
// if p3 = 34 then
4895: LD_VAR 0 3
4899: PUSH
4900: LD_INT 34
4902: EQUAL
4903: IFFALSE 4913
// sShield := true ;
4905: LD_ADDR_EXP 108
4909: PUSH
4910: LD_INT 1
4912: ST_TO_ADDR
// if p3 = 35 then
4913: LD_VAR 0 3
4917: PUSH
4918: LD_INT 35
4920: EQUAL
4921: IFFALSE 4931
// sTime := true ;
4923: LD_ADDR_EXP 109
4927: PUSH
4928: LD_INT 1
4930: ST_TO_ADDR
// if p3 = 36 then
4931: LD_VAR 0 3
4935: PUSH
4936: LD_INT 36
4938: EQUAL
4939: IFFALSE 4949
// sTools := true ;
4941: LD_ADDR_EXP 110
4945: PUSH
4946: LD_INT 1
4948: ST_TO_ADDR
// if p3 = 101 then
4949: LD_VAR 0 3
4953: PUSH
4954: LD_INT 101
4956: EQUAL
4957: IFFALSE 4967
// sSold := true ;
4959: LD_ADDR_EXP 75
4963: PUSH
4964: LD_INT 1
4966: ST_TO_ADDR
// if p3 = 102 then
4967: LD_VAR 0 3
4971: PUSH
4972: LD_INT 102
4974: EQUAL
4975: IFFALSE 4985
// sDiff := true ;
4977: LD_ADDR_EXP 76
4981: PUSH
4982: LD_INT 1
4984: ST_TO_ADDR
// if p3 = 103 then
4985: LD_VAR 0 3
4989: PUSH
4990: LD_INT 103
4992: EQUAL
4993: IFFALSE 5003
// sFog := true ;
4995: LD_ADDR_EXP 79
4999: PUSH
5000: LD_INT 1
5002: ST_TO_ADDR
// if p3 = 104 then
5003: LD_VAR 0 3
5007: PUSH
5008: LD_INT 104
5010: EQUAL
5011: IFFALSE 5021
// sReset := true ;
5013: LD_ADDR_EXP 80
5017: PUSH
5018: LD_INT 1
5020: ST_TO_ADDR
// if p3 = 105 then
5021: LD_VAR 0 3
5025: PUSH
5026: LD_INT 105
5028: EQUAL
5029: IFFALSE 5039
// sSun := true ;
5031: LD_ADDR_EXP 81
5035: PUSH
5036: LD_INT 1
5038: ST_TO_ADDR
// if p3 = 106 then
5039: LD_VAR 0 3
5043: PUSH
5044: LD_INT 106
5046: EQUAL
5047: IFFALSE 5057
// sTiger := true ;
5049: LD_ADDR_EXP 77
5053: PUSH
5054: LD_INT 1
5056: ST_TO_ADDR
// if p3 = 107 then
5057: LD_VAR 0 3
5061: PUSH
5062: LD_INT 107
5064: EQUAL
5065: IFFALSE 5075
// sBomb := true ;
5067: LD_ADDR_EXP 78
5071: PUSH
5072: LD_INT 1
5074: ST_TO_ADDR
// if p3 = 108 then
5075: LD_VAR 0 3
5079: PUSH
5080: LD_INT 108
5082: EQUAL
5083: IFFALSE 5093
// sWound := true ;
5085: LD_ADDR_EXP 86
5089: PUSH
5090: LD_INT 1
5092: ST_TO_ADDR
// if p3 = 109 then
5093: LD_VAR 0 3
5097: PUSH
5098: LD_INT 109
5100: EQUAL
5101: IFFALSE 5111
// sBetray := true ;
5103: LD_ADDR_EXP 90
5107: PUSH
5108: LD_INT 1
5110: ST_TO_ADDR
// if p3 = 110 then
5111: LD_VAR 0 3
5115: PUSH
5116: LD_INT 110
5118: EQUAL
5119: IFFALSE 5129
// sContamin := true ;
5121: LD_ADDR_EXP 91
5125: PUSH
5126: LD_INT 1
5128: ST_TO_ADDR
// if p3 = 111 then
5129: LD_VAR 0 3
5133: PUSH
5134: LD_INT 111
5136: EQUAL
5137: IFFALSE 5147
// sOil := true ;
5139: LD_ADDR_EXP 93
5143: PUSH
5144: LD_INT 1
5146: ST_TO_ADDR
// if p3 = 112 then
5147: LD_VAR 0 3
5151: PUSH
5152: LD_INT 112
5154: EQUAL
5155: IFFALSE 5165
// sStu := true ;
5157: LD_ADDR_EXP 97
5161: PUSH
5162: LD_INT 1
5164: ST_TO_ADDR
// if p3 = 113 then
5165: LD_VAR 0 3
5169: PUSH
5170: LD_INT 113
5172: EQUAL
5173: IFFALSE 5183
// sBazooka := true ;
5175: LD_ADDR_EXP 100
5179: PUSH
5180: LD_INT 1
5182: ST_TO_ADDR
// if p3 = 114 then
5183: LD_VAR 0 3
5187: PUSH
5188: LD_INT 114
5190: EQUAL
5191: IFFALSE 5201
// sMortar := true ;
5193: LD_ADDR_EXP 101
5197: PUSH
5198: LD_INT 1
5200: ST_TO_ADDR
// if p3 = 115 then
5201: LD_VAR 0 3
5205: PUSH
5206: LD_INT 115
5208: EQUAL
5209: IFFALSE 5219
// sRanger := true ;
5211: LD_ADDR_EXP 111
5215: PUSH
5216: LD_INT 1
5218: ST_TO_ADDR
// if p3 = 116 then
5219: LD_VAR 0 3
5223: PUSH
5224: LD_INT 116
5226: EQUAL
5227: IFFALSE 5237
// sComputer := true ;
5229: LD_ADDR_EXP 112
5233: PUSH
5234: LD_INT 1
5236: ST_TO_ADDR
// if p3 = 117 then
5237: LD_VAR 0 3
5241: PUSH
5242: LD_INT 117
5244: EQUAL
5245: IFFALSE 5255
// s30 := true ;
5247: LD_ADDR_EXP 113
5251: PUSH
5252: LD_INT 1
5254: ST_TO_ADDR
// if p3 = 118 then
5255: LD_VAR 0 3
5259: PUSH
5260: LD_INT 118
5262: EQUAL
5263: IFFALSE 5273
// s60 := true ;
5265: LD_ADDR_EXP 114
5269: PUSH
5270: LD_INT 1
5272: ST_TO_ADDR
// end ; if p2 = 101 then
5273: LD_VAR 0 2
5277: PUSH
5278: LD_INT 101
5280: EQUAL
5281: IFFALSE 5409
// begin case p3 of 1 :
5283: LD_VAR 0 3
5287: PUSH
5288: LD_INT 1
5290: DOUBLE
5291: EQUAL
5292: IFTRUE 5296
5294: GO 5303
5296: POP
// hHackUnlimitedResources ; 2 :
5297: CALL 17005 0 0
5301: GO 5409
5303: LD_INT 2
5305: DOUBLE
5306: EQUAL
5307: IFTRUE 5311
5309: GO 5318
5311: POP
// hHackSetLevel10 ; 3 :
5312: CALL 17138 0 0
5316: GO 5409
5318: LD_INT 3
5320: DOUBLE
5321: EQUAL
5322: IFTRUE 5326
5324: GO 5333
5326: POP
// hHackSetLevel10YourUnits ; 4 :
5327: CALL 17223 0 0
5331: GO 5409
5333: LD_INT 4
5335: DOUBLE
5336: EQUAL
5337: IFTRUE 5341
5339: GO 5348
5341: POP
// hHackInvincible ; 5 :
5342: CALL 17671 0 0
5346: GO 5409
5348: LD_INT 5
5350: DOUBLE
5351: EQUAL
5352: IFTRUE 5356
5354: GO 5363
5356: POP
// hHackInvisible ; 6 :
5357: CALL 17782 0 0
5361: GO 5409
5363: LD_INT 6
5365: DOUBLE
5366: EQUAL
5367: IFTRUE 5371
5369: GO 5378
5371: POP
// hHackChangeYourSide ; 7 :
5372: CALL 17839 0 0
5376: GO 5409
5378: LD_INT 7
5380: DOUBLE
5381: EQUAL
5382: IFTRUE 5386
5384: GO 5393
5386: POP
// hHackChangeUnitSide ; 8 :
5387: CALL 17881 0 0
5391: GO 5409
5393: LD_INT 8
5395: DOUBLE
5396: EQUAL
5397: IFTRUE 5401
5399: GO 5408
5401: POP
// hHackFog ; end ;
5402: CALL 17982 0 0
5406: GO 5409
5408: POP
// end ; end ;
5409: LD_VAR 0 7
5413: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
5414: GO 5416
5416: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5417: LD_STRING initStreamRollete();
5419: PPUSH
5420: CALL_OW 559
// InitStreamMode ;
5424: CALL 5433 0 0
// DefineStreamItems ( ) ;
5428: CALL 5897 0 0
// end ;
5432: END
// function InitStreamMode ; begin
5433: LD_INT 0
5435: PPUSH
// streamModeActive := false ;
5436: LD_ADDR_EXP 58
5440: PUSH
5441: LD_INT 0
5443: ST_TO_ADDR
// normalCounter := 36 ;
5444: LD_ADDR_EXP 59
5448: PUSH
5449: LD_INT 36
5451: ST_TO_ADDR
// hardcoreCounter := 16 ;
5452: LD_ADDR_EXP 60
5456: PUSH
5457: LD_INT 16
5459: ST_TO_ADDR
// sRocket := false ;
5460: LD_ADDR_EXP 63
5464: PUSH
5465: LD_INT 0
5467: ST_TO_ADDR
// sSpeed := false ;
5468: LD_ADDR_EXP 62
5472: PUSH
5473: LD_INT 0
5475: ST_TO_ADDR
// sEngine := false ;
5476: LD_ADDR_EXP 64
5480: PUSH
5481: LD_INT 0
5483: ST_TO_ADDR
// sSpec := false ;
5484: LD_ADDR_EXP 61
5488: PUSH
5489: LD_INT 0
5491: ST_TO_ADDR
// sLevel := false ;
5492: LD_ADDR_EXP 65
5496: PUSH
5497: LD_INT 0
5499: ST_TO_ADDR
// sArmoury := false ;
5500: LD_ADDR_EXP 66
5504: PUSH
5505: LD_INT 0
5507: ST_TO_ADDR
// sRadar := false ;
5508: LD_ADDR_EXP 67
5512: PUSH
5513: LD_INT 0
5515: ST_TO_ADDR
// sBunker := false ;
5516: LD_ADDR_EXP 68
5520: PUSH
5521: LD_INT 0
5523: ST_TO_ADDR
// sHack := false ;
5524: LD_ADDR_EXP 69
5528: PUSH
5529: LD_INT 0
5531: ST_TO_ADDR
// sFire := false ;
5532: LD_ADDR_EXP 70
5536: PUSH
5537: LD_INT 0
5539: ST_TO_ADDR
// sRefresh := false ;
5540: LD_ADDR_EXP 71
5544: PUSH
5545: LD_INT 0
5547: ST_TO_ADDR
// sExp := false ;
5548: LD_ADDR_EXP 72
5552: PUSH
5553: LD_INT 0
5555: ST_TO_ADDR
// sDepot := false ;
5556: LD_ADDR_EXP 73
5560: PUSH
5561: LD_INT 0
5563: ST_TO_ADDR
// sFlag := false ;
5564: LD_ADDR_EXP 74
5568: PUSH
5569: LD_INT 0
5571: ST_TO_ADDR
// sKamikadze := false ;
5572: LD_ADDR_EXP 82
5576: PUSH
5577: LD_INT 0
5579: ST_TO_ADDR
// sTroll := false ;
5580: LD_ADDR_EXP 83
5584: PUSH
5585: LD_INT 0
5587: ST_TO_ADDR
// sSlow := false ;
5588: LD_ADDR_EXP 84
5592: PUSH
5593: LD_INT 0
5595: ST_TO_ADDR
// sLack := false ;
5596: LD_ADDR_EXP 85
5600: PUSH
5601: LD_INT 0
5603: ST_TO_ADDR
// sTank := false ;
5604: LD_ADDR_EXP 87
5608: PUSH
5609: LD_INT 0
5611: ST_TO_ADDR
// sRemote := false ;
5612: LD_ADDR_EXP 88
5616: PUSH
5617: LD_INT 0
5619: ST_TO_ADDR
// sPowell := false ;
5620: LD_ADDR_EXP 89
5624: PUSH
5625: LD_INT 0
5627: ST_TO_ADDR
// sTeleport := false ;
5628: LD_ADDR_EXP 92
5632: PUSH
5633: LD_INT 0
5635: ST_TO_ADDR
// sOilTower := false ;
5636: LD_ADDR_EXP 94
5640: PUSH
5641: LD_INT 0
5643: ST_TO_ADDR
// sShovel := false ;
5644: LD_ADDR_EXP 95
5648: PUSH
5649: LD_INT 0
5651: ST_TO_ADDR
// sSheik := false ;
5652: LD_ADDR_EXP 96
5656: PUSH
5657: LD_INT 0
5659: ST_TO_ADDR
// sEarthquake := false ;
5660: LD_ADDR_EXP 98
5664: PUSH
5665: LD_INT 0
5667: ST_TO_ADDR
// sAI := false ;
5668: LD_ADDR_EXP 99
5672: PUSH
5673: LD_INT 0
5675: ST_TO_ADDR
// sCargo := false ;
5676: LD_ADDR_EXP 102
5680: PUSH
5681: LD_INT 0
5683: ST_TO_ADDR
// sDLaser := false ;
5684: LD_ADDR_EXP 103
5688: PUSH
5689: LD_INT 0
5691: ST_TO_ADDR
// sExchange := false ;
5692: LD_ADDR_EXP 104
5696: PUSH
5697: LD_INT 0
5699: ST_TO_ADDR
// sFac := false ;
5700: LD_ADDR_EXP 105
5704: PUSH
5705: LD_INT 0
5707: ST_TO_ADDR
// sPower := false ;
5708: LD_ADDR_EXP 106
5712: PUSH
5713: LD_INT 0
5715: ST_TO_ADDR
// sRandom := false ;
5716: LD_ADDR_EXP 107
5720: PUSH
5721: LD_INT 0
5723: ST_TO_ADDR
// sShield := false ;
5724: LD_ADDR_EXP 108
5728: PUSH
5729: LD_INT 0
5731: ST_TO_ADDR
// sTime := false ;
5732: LD_ADDR_EXP 109
5736: PUSH
5737: LD_INT 0
5739: ST_TO_ADDR
// sTools := false ;
5740: LD_ADDR_EXP 110
5744: PUSH
5745: LD_INT 0
5747: ST_TO_ADDR
// sSold := false ;
5748: LD_ADDR_EXP 75
5752: PUSH
5753: LD_INT 0
5755: ST_TO_ADDR
// sDiff := false ;
5756: LD_ADDR_EXP 76
5760: PUSH
5761: LD_INT 0
5763: ST_TO_ADDR
// sFog := false ;
5764: LD_ADDR_EXP 79
5768: PUSH
5769: LD_INT 0
5771: ST_TO_ADDR
// sReset := false ;
5772: LD_ADDR_EXP 80
5776: PUSH
5777: LD_INT 0
5779: ST_TO_ADDR
// sSun := false ;
5780: LD_ADDR_EXP 81
5784: PUSH
5785: LD_INT 0
5787: ST_TO_ADDR
// sTiger := false ;
5788: LD_ADDR_EXP 77
5792: PUSH
5793: LD_INT 0
5795: ST_TO_ADDR
// sBomb := false ;
5796: LD_ADDR_EXP 78
5800: PUSH
5801: LD_INT 0
5803: ST_TO_ADDR
// sWound := false ;
5804: LD_ADDR_EXP 86
5808: PUSH
5809: LD_INT 0
5811: ST_TO_ADDR
// sBetray := false ;
5812: LD_ADDR_EXP 90
5816: PUSH
5817: LD_INT 0
5819: ST_TO_ADDR
// sContamin := false ;
5820: LD_ADDR_EXP 91
5824: PUSH
5825: LD_INT 0
5827: ST_TO_ADDR
// sOil := false ;
5828: LD_ADDR_EXP 93
5832: PUSH
5833: LD_INT 0
5835: ST_TO_ADDR
// sStu := false ;
5836: LD_ADDR_EXP 97
5840: PUSH
5841: LD_INT 0
5843: ST_TO_ADDR
// sBazooka := false ;
5844: LD_ADDR_EXP 100
5848: PUSH
5849: LD_INT 0
5851: ST_TO_ADDR
// sMortar := false ;
5852: LD_ADDR_EXP 101
5856: PUSH
5857: LD_INT 0
5859: ST_TO_ADDR
// sRanger := false ;
5860: LD_ADDR_EXP 111
5864: PUSH
5865: LD_INT 0
5867: ST_TO_ADDR
// sComputer := false ;
5868: LD_ADDR_EXP 112
5872: PUSH
5873: LD_INT 0
5875: ST_TO_ADDR
// s30 := false ;
5876: LD_ADDR_EXP 113
5880: PUSH
5881: LD_INT 0
5883: ST_TO_ADDR
// s60 := false ;
5884: LD_ADDR_EXP 114
5888: PUSH
5889: LD_INT 0
5891: ST_TO_ADDR
// end ;
5892: LD_VAR 0 1
5896: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5897: LD_INT 0
5899: PPUSH
5900: PPUSH
5901: PPUSH
5902: PPUSH
5903: PPUSH
// result := [ ] ;
5904: LD_ADDR_VAR 0 1
5908: PUSH
5909: EMPTY
5910: ST_TO_ADDR
// if campaign_id = 1 then
5911: LD_OWVAR 69
5915: PUSH
5916: LD_INT 1
5918: EQUAL
5919: IFFALSE 9085
// begin case mission_number of 1 :
5921: LD_OWVAR 70
5925: PUSH
5926: LD_INT 1
5928: DOUBLE
5929: EQUAL
5930: IFTRUE 5934
5932: GO 6010
5934: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
5935: LD_ADDR_VAR 0 1
5939: PUSH
5940: LD_INT 2
5942: PUSH
5943: LD_INT 4
5945: PUSH
5946: LD_INT 11
5948: PUSH
5949: LD_INT 12
5951: PUSH
5952: LD_INT 15
5954: PUSH
5955: LD_INT 16
5957: PUSH
5958: LD_INT 22
5960: PUSH
5961: LD_INT 23
5963: PUSH
5964: LD_INT 26
5966: PUSH
5967: EMPTY
5968: LIST
5969: LIST
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: PUSH
5978: LD_INT 101
5980: PUSH
5981: LD_INT 102
5983: PUSH
5984: LD_INT 106
5986: PUSH
5987: LD_INT 116
5989: PUSH
5990: LD_INT 117
5992: PUSH
5993: LD_INT 118
5995: PUSH
5996: EMPTY
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: PUSH
6004: EMPTY
6005: LIST
6006: LIST
6007: ST_TO_ADDR
6008: GO 9083
6010: LD_INT 2
6012: DOUBLE
6013: EQUAL
6014: IFTRUE 6018
6016: GO 6102
6018: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6019: LD_ADDR_VAR 0 1
6023: PUSH
6024: LD_INT 2
6026: PUSH
6027: LD_INT 4
6029: PUSH
6030: LD_INT 11
6032: PUSH
6033: LD_INT 12
6035: PUSH
6036: LD_INT 15
6038: PUSH
6039: LD_INT 16
6041: PUSH
6042: LD_INT 22
6044: PUSH
6045: LD_INT 23
6047: PUSH
6048: LD_INT 26
6050: PUSH
6051: EMPTY
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: PUSH
6062: LD_INT 101
6064: PUSH
6065: LD_INT 102
6067: PUSH
6068: LD_INT 105
6070: PUSH
6071: LD_INT 106
6073: PUSH
6074: LD_INT 108
6076: PUSH
6077: LD_INT 116
6079: PUSH
6080: LD_INT 117
6082: PUSH
6083: LD_INT 118
6085: PUSH
6086: EMPTY
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: LIST
6093: LIST
6094: LIST
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: ST_TO_ADDR
6100: GO 9083
6102: LD_INT 3
6104: DOUBLE
6105: EQUAL
6106: IFTRUE 6110
6108: GO 6198
6110: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6111: LD_ADDR_VAR 0 1
6115: PUSH
6116: LD_INT 2
6118: PUSH
6119: LD_INT 4
6121: PUSH
6122: LD_INT 5
6124: PUSH
6125: LD_INT 11
6127: PUSH
6128: LD_INT 12
6130: PUSH
6131: LD_INT 15
6133: PUSH
6134: LD_INT 16
6136: PUSH
6137: LD_INT 22
6139: PUSH
6140: LD_INT 26
6142: PUSH
6143: LD_INT 36
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: LIST
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: PUSH
6158: LD_INT 101
6160: PUSH
6161: LD_INT 102
6163: PUSH
6164: LD_INT 105
6166: PUSH
6167: LD_INT 106
6169: PUSH
6170: LD_INT 108
6172: PUSH
6173: LD_INT 116
6175: PUSH
6176: LD_INT 117
6178: PUSH
6179: LD_INT 118
6181: PUSH
6182: EMPTY
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: LIST
6188: LIST
6189: LIST
6190: LIST
6191: PUSH
6192: EMPTY
6193: LIST
6194: LIST
6195: ST_TO_ADDR
6196: GO 9083
6198: LD_INT 4
6200: DOUBLE
6201: EQUAL
6202: IFTRUE 6206
6204: GO 6302
6206: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6207: LD_ADDR_VAR 0 1
6211: PUSH
6212: LD_INT 2
6214: PUSH
6215: LD_INT 4
6217: PUSH
6218: LD_INT 5
6220: PUSH
6221: LD_INT 8
6223: PUSH
6224: LD_INT 11
6226: PUSH
6227: LD_INT 12
6229: PUSH
6230: LD_INT 15
6232: PUSH
6233: LD_INT 16
6235: PUSH
6236: LD_INT 22
6238: PUSH
6239: LD_INT 23
6241: PUSH
6242: LD_INT 26
6244: PUSH
6245: LD_INT 36
6247: PUSH
6248: EMPTY
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: LIST
6255: LIST
6256: LIST
6257: LIST
6258: LIST
6259: LIST
6260: LIST
6261: PUSH
6262: LD_INT 101
6264: PUSH
6265: LD_INT 102
6267: PUSH
6268: LD_INT 105
6270: PUSH
6271: LD_INT 106
6273: PUSH
6274: LD_INT 108
6276: PUSH
6277: LD_INT 116
6279: PUSH
6280: LD_INT 117
6282: PUSH
6283: LD_INT 118
6285: PUSH
6286: EMPTY
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: LIST
6292: LIST
6293: LIST
6294: LIST
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: ST_TO_ADDR
6300: GO 9083
6302: LD_INT 5
6304: DOUBLE
6305: EQUAL
6306: IFTRUE 6310
6308: GO 6422
6310: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6311: LD_ADDR_VAR 0 1
6315: PUSH
6316: LD_INT 2
6318: PUSH
6319: LD_INT 4
6321: PUSH
6322: LD_INT 5
6324: PUSH
6325: LD_INT 6
6327: PUSH
6328: LD_INT 8
6330: PUSH
6331: LD_INT 11
6333: PUSH
6334: LD_INT 12
6336: PUSH
6337: LD_INT 15
6339: PUSH
6340: LD_INT 16
6342: PUSH
6343: LD_INT 22
6345: PUSH
6346: LD_INT 23
6348: PUSH
6349: LD_INT 25
6351: PUSH
6352: LD_INT 26
6354: PUSH
6355: LD_INT 36
6357: PUSH
6358: EMPTY
6359: LIST
6360: LIST
6361: LIST
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: PUSH
6374: LD_INT 101
6376: PUSH
6377: LD_INT 102
6379: PUSH
6380: LD_INT 105
6382: PUSH
6383: LD_INT 106
6385: PUSH
6386: LD_INT 108
6388: PUSH
6389: LD_INT 109
6391: PUSH
6392: LD_INT 112
6394: PUSH
6395: LD_INT 116
6397: PUSH
6398: LD_INT 117
6400: PUSH
6401: LD_INT 118
6403: PUSH
6404: EMPTY
6405: LIST
6406: LIST
6407: LIST
6408: LIST
6409: LIST
6410: LIST
6411: LIST
6412: LIST
6413: LIST
6414: LIST
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: ST_TO_ADDR
6420: GO 9083
6422: LD_INT 6
6424: DOUBLE
6425: EQUAL
6426: IFTRUE 6430
6428: GO 6562
6430: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6431: LD_ADDR_VAR 0 1
6435: PUSH
6436: LD_INT 2
6438: PUSH
6439: LD_INT 4
6441: PUSH
6442: LD_INT 5
6444: PUSH
6445: LD_INT 6
6447: PUSH
6448: LD_INT 8
6450: PUSH
6451: LD_INT 11
6453: PUSH
6454: LD_INT 12
6456: PUSH
6457: LD_INT 15
6459: PUSH
6460: LD_INT 16
6462: PUSH
6463: LD_INT 20
6465: PUSH
6466: LD_INT 21
6468: PUSH
6469: LD_INT 22
6471: PUSH
6472: LD_INT 23
6474: PUSH
6475: LD_INT 25
6477: PUSH
6478: LD_INT 26
6480: PUSH
6481: LD_INT 30
6483: PUSH
6484: LD_INT 31
6486: PUSH
6487: LD_INT 32
6489: PUSH
6490: LD_INT 36
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: LIST
6505: LIST
6506: LIST
6507: LIST
6508: LIST
6509: LIST
6510: LIST
6511: LIST
6512: LIST
6513: PUSH
6514: LD_INT 101
6516: PUSH
6517: LD_INT 102
6519: PUSH
6520: LD_INT 105
6522: PUSH
6523: LD_INT 106
6525: PUSH
6526: LD_INT 108
6528: PUSH
6529: LD_INT 109
6531: PUSH
6532: LD_INT 112
6534: PUSH
6535: LD_INT 116
6537: PUSH
6538: LD_INT 117
6540: PUSH
6541: LD_INT 118
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: ST_TO_ADDR
6560: GO 9083
6562: LD_INT 7
6564: DOUBLE
6565: EQUAL
6566: IFTRUE 6570
6568: GO 6682
6570: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6571: LD_ADDR_VAR 0 1
6575: PUSH
6576: LD_INT 2
6578: PUSH
6579: LD_INT 4
6581: PUSH
6582: LD_INT 5
6584: PUSH
6585: LD_INT 7
6587: PUSH
6588: LD_INT 11
6590: PUSH
6591: LD_INT 12
6593: PUSH
6594: LD_INT 15
6596: PUSH
6597: LD_INT 16
6599: PUSH
6600: LD_INT 20
6602: PUSH
6603: LD_INT 21
6605: PUSH
6606: LD_INT 22
6608: PUSH
6609: LD_INT 23
6611: PUSH
6612: LD_INT 25
6614: PUSH
6615: LD_INT 26
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: PUSH
6634: LD_INT 101
6636: PUSH
6637: LD_INT 102
6639: PUSH
6640: LD_INT 103
6642: PUSH
6643: LD_INT 105
6645: PUSH
6646: LD_INT 106
6648: PUSH
6649: LD_INT 108
6651: PUSH
6652: LD_INT 112
6654: PUSH
6655: LD_INT 116
6657: PUSH
6658: LD_INT 117
6660: PUSH
6661: LD_INT 118
6663: PUSH
6664: EMPTY
6665: LIST
6666: LIST
6667: LIST
6668: LIST
6669: LIST
6670: LIST
6671: LIST
6672: LIST
6673: LIST
6674: LIST
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: ST_TO_ADDR
6680: GO 9083
6682: LD_INT 8
6684: DOUBLE
6685: EQUAL
6686: IFTRUE 6690
6688: GO 6830
6690: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6691: LD_ADDR_VAR 0 1
6695: PUSH
6696: LD_INT 2
6698: PUSH
6699: LD_INT 4
6701: PUSH
6702: LD_INT 5
6704: PUSH
6705: LD_INT 6
6707: PUSH
6708: LD_INT 7
6710: PUSH
6711: LD_INT 8
6713: PUSH
6714: LD_INT 11
6716: PUSH
6717: LD_INT 12
6719: PUSH
6720: LD_INT 15
6722: PUSH
6723: LD_INT 16
6725: PUSH
6726: LD_INT 20
6728: PUSH
6729: LD_INT 21
6731: PUSH
6732: LD_INT 22
6734: PUSH
6735: LD_INT 23
6737: PUSH
6738: LD_INT 25
6740: PUSH
6741: LD_INT 26
6743: PUSH
6744: LD_INT 30
6746: PUSH
6747: LD_INT 31
6749: PUSH
6750: LD_INT 32
6752: PUSH
6753: LD_INT 36
6755: PUSH
6756: EMPTY
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: LIST
6765: LIST
6766: LIST
6767: LIST
6768: LIST
6769: LIST
6770: LIST
6771: LIST
6772: LIST
6773: LIST
6774: LIST
6775: LIST
6776: LIST
6777: PUSH
6778: LD_INT 101
6780: PUSH
6781: LD_INT 102
6783: PUSH
6784: LD_INT 103
6786: PUSH
6787: LD_INT 105
6789: PUSH
6790: LD_INT 106
6792: PUSH
6793: LD_INT 108
6795: PUSH
6796: LD_INT 109
6798: PUSH
6799: LD_INT 112
6801: PUSH
6802: LD_INT 116
6804: PUSH
6805: LD_INT 117
6807: PUSH
6808: LD_INT 118
6810: PUSH
6811: EMPTY
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: PUSH
6824: EMPTY
6825: LIST
6826: LIST
6827: ST_TO_ADDR
6828: GO 9083
6830: LD_INT 9
6832: DOUBLE
6833: EQUAL
6834: IFTRUE 6838
6836: GO 6986
6838: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
6839: LD_ADDR_VAR 0 1
6843: PUSH
6844: LD_INT 2
6846: PUSH
6847: LD_INT 4
6849: PUSH
6850: LD_INT 5
6852: PUSH
6853: LD_INT 6
6855: PUSH
6856: LD_INT 7
6858: PUSH
6859: LD_INT 8
6861: PUSH
6862: LD_INT 11
6864: PUSH
6865: LD_INT 12
6867: PUSH
6868: LD_INT 15
6870: PUSH
6871: LD_INT 16
6873: PUSH
6874: LD_INT 20
6876: PUSH
6877: LD_INT 21
6879: PUSH
6880: LD_INT 22
6882: PUSH
6883: LD_INT 23
6885: PUSH
6886: LD_INT 25
6888: PUSH
6889: LD_INT 26
6891: PUSH
6892: LD_INT 28
6894: PUSH
6895: LD_INT 30
6897: PUSH
6898: LD_INT 31
6900: PUSH
6901: LD_INT 32
6903: PUSH
6904: LD_INT 36
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: LIST
6913: LIST
6914: LIST
6915: LIST
6916: LIST
6917: LIST
6918: LIST
6919: LIST
6920: LIST
6921: LIST
6922: LIST
6923: LIST
6924: LIST
6925: LIST
6926: LIST
6927: LIST
6928: LIST
6929: PUSH
6930: LD_INT 101
6932: PUSH
6933: LD_INT 102
6935: PUSH
6936: LD_INT 103
6938: PUSH
6939: LD_INT 105
6941: PUSH
6942: LD_INT 106
6944: PUSH
6945: LD_INT 108
6947: PUSH
6948: LD_INT 109
6950: PUSH
6951: LD_INT 112
6953: PUSH
6954: LD_INT 114
6956: PUSH
6957: LD_INT 116
6959: PUSH
6960: LD_INT 117
6962: PUSH
6963: LD_INT 118
6965: PUSH
6966: EMPTY
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: PUSH
6980: EMPTY
6981: LIST
6982: LIST
6983: ST_TO_ADDR
6984: GO 9083
6986: LD_INT 10
6988: DOUBLE
6989: EQUAL
6990: IFTRUE 6994
6992: GO 7190
6994: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
6995: LD_ADDR_VAR 0 1
6999: PUSH
7000: LD_INT 2
7002: PUSH
7003: LD_INT 4
7005: PUSH
7006: LD_INT 5
7008: PUSH
7009: LD_INT 6
7011: PUSH
7012: LD_INT 7
7014: PUSH
7015: LD_INT 8
7017: PUSH
7018: LD_INT 9
7020: PUSH
7021: LD_INT 10
7023: PUSH
7024: LD_INT 11
7026: PUSH
7027: LD_INT 12
7029: PUSH
7030: LD_INT 13
7032: PUSH
7033: LD_INT 14
7035: PUSH
7036: LD_INT 15
7038: PUSH
7039: LD_INT 16
7041: PUSH
7042: LD_INT 17
7044: PUSH
7045: LD_INT 18
7047: PUSH
7048: LD_INT 19
7050: PUSH
7051: LD_INT 20
7053: PUSH
7054: LD_INT 21
7056: PUSH
7057: LD_INT 22
7059: PUSH
7060: LD_INT 23
7062: PUSH
7063: LD_INT 24
7065: PUSH
7066: LD_INT 25
7068: PUSH
7069: LD_INT 26
7071: PUSH
7072: LD_INT 28
7074: PUSH
7075: LD_INT 30
7077: PUSH
7078: LD_INT 31
7080: PUSH
7081: LD_INT 32
7083: PUSH
7084: LD_INT 36
7086: PUSH
7087: EMPTY
7088: LIST
7089: LIST
7090: LIST
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: LIST
7099: LIST
7100: LIST
7101: LIST
7102: LIST
7103: LIST
7104: LIST
7105: LIST
7106: LIST
7107: LIST
7108: LIST
7109: LIST
7110: LIST
7111: LIST
7112: LIST
7113: LIST
7114: LIST
7115: LIST
7116: LIST
7117: PUSH
7118: LD_INT 101
7120: PUSH
7121: LD_INT 102
7123: PUSH
7124: LD_INT 103
7126: PUSH
7127: LD_INT 104
7129: PUSH
7130: LD_INT 105
7132: PUSH
7133: LD_INT 106
7135: PUSH
7136: LD_INT 107
7138: PUSH
7139: LD_INT 108
7141: PUSH
7142: LD_INT 109
7144: PUSH
7145: LD_INT 110
7147: PUSH
7148: LD_INT 111
7150: PUSH
7151: LD_INT 112
7153: PUSH
7154: LD_INT 114
7156: PUSH
7157: LD_INT 116
7159: PUSH
7160: LD_INT 117
7162: PUSH
7163: LD_INT 118
7165: PUSH
7166: EMPTY
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: PUSH
7184: EMPTY
7185: LIST
7186: LIST
7187: ST_TO_ADDR
7188: GO 9083
7190: LD_INT 11
7192: DOUBLE
7193: EQUAL
7194: IFTRUE 7198
7196: GO 7402
7198: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7199: LD_ADDR_VAR 0 1
7203: PUSH
7204: LD_INT 2
7206: PUSH
7207: LD_INT 3
7209: PUSH
7210: LD_INT 4
7212: PUSH
7213: LD_INT 5
7215: PUSH
7216: LD_INT 6
7218: PUSH
7219: LD_INT 7
7221: PUSH
7222: LD_INT 8
7224: PUSH
7225: LD_INT 9
7227: PUSH
7228: LD_INT 10
7230: PUSH
7231: LD_INT 11
7233: PUSH
7234: LD_INT 12
7236: PUSH
7237: LD_INT 13
7239: PUSH
7240: LD_INT 14
7242: PUSH
7243: LD_INT 15
7245: PUSH
7246: LD_INT 16
7248: PUSH
7249: LD_INT 17
7251: PUSH
7252: LD_INT 18
7254: PUSH
7255: LD_INT 19
7257: PUSH
7258: LD_INT 20
7260: PUSH
7261: LD_INT 21
7263: PUSH
7264: LD_INT 22
7266: PUSH
7267: LD_INT 23
7269: PUSH
7270: LD_INT 24
7272: PUSH
7273: LD_INT 25
7275: PUSH
7276: LD_INT 26
7278: PUSH
7279: LD_INT 28
7281: PUSH
7282: LD_INT 30
7284: PUSH
7285: LD_INT 31
7287: PUSH
7288: LD_INT 32
7290: PUSH
7291: LD_INT 34
7293: PUSH
7294: LD_INT 36
7296: PUSH
7297: EMPTY
7298: LIST
7299: LIST
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: LIST
7307: LIST
7308: LIST
7309: LIST
7310: LIST
7311: LIST
7312: LIST
7313: LIST
7314: LIST
7315: LIST
7316: LIST
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: LIST
7322: LIST
7323: LIST
7324: LIST
7325: LIST
7326: LIST
7327: LIST
7328: LIST
7329: PUSH
7330: LD_INT 101
7332: PUSH
7333: LD_INT 102
7335: PUSH
7336: LD_INT 103
7338: PUSH
7339: LD_INT 104
7341: PUSH
7342: LD_INT 105
7344: PUSH
7345: LD_INT 106
7347: PUSH
7348: LD_INT 107
7350: PUSH
7351: LD_INT 108
7353: PUSH
7354: LD_INT 109
7356: PUSH
7357: LD_INT 110
7359: PUSH
7360: LD_INT 111
7362: PUSH
7363: LD_INT 112
7365: PUSH
7366: LD_INT 114
7368: PUSH
7369: LD_INT 116
7371: PUSH
7372: LD_INT 117
7374: PUSH
7375: LD_INT 118
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: PUSH
7396: EMPTY
7397: LIST
7398: LIST
7399: ST_TO_ADDR
7400: GO 9083
7402: LD_INT 12
7404: DOUBLE
7405: EQUAL
7406: IFTRUE 7410
7408: GO 7630
7410: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7411: LD_ADDR_VAR 0 1
7415: PUSH
7416: LD_INT 1
7418: PUSH
7419: LD_INT 2
7421: PUSH
7422: LD_INT 3
7424: PUSH
7425: LD_INT 4
7427: PUSH
7428: LD_INT 5
7430: PUSH
7431: LD_INT 6
7433: PUSH
7434: LD_INT 7
7436: PUSH
7437: LD_INT 8
7439: PUSH
7440: LD_INT 9
7442: PUSH
7443: LD_INT 10
7445: PUSH
7446: LD_INT 11
7448: PUSH
7449: LD_INT 12
7451: PUSH
7452: LD_INT 13
7454: PUSH
7455: LD_INT 14
7457: PUSH
7458: LD_INT 15
7460: PUSH
7461: LD_INT 16
7463: PUSH
7464: LD_INT 17
7466: PUSH
7467: LD_INT 18
7469: PUSH
7470: LD_INT 19
7472: PUSH
7473: LD_INT 20
7475: PUSH
7476: LD_INT 21
7478: PUSH
7479: LD_INT 22
7481: PUSH
7482: LD_INT 23
7484: PUSH
7485: LD_INT 24
7487: PUSH
7488: LD_INT 25
7490: PUSH
7491: LD_INT 26
7493: PUSH
7494: LD_INT 27
7496: PUSH
7497: LD_INT 28
7499: PUSH
7500: LD_INT 30
7502: PUSH
7503: LD_INT 31
7505: PUSH
7506: LD_INT 32
7508: PUSH
7509: LD_INT 33
7511: PUSH
7512: LD_INT 34
7514: PUSH
7515: LD_INT 36
7517: PUSH
7518: EMPTY
7519: LIST
7520: LIST
7521: LIST
7522: LIST
7523: LIST
7524: LIST
7525: LIST
7526: LIST
7527: LIST
7528: LIST
7529: LIST
7530: LIST
7531: LIST
7532: LIST
7533: LIST
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: LIST
7541: LIST
7542: LIST
7543: LIST
7544: LIST
7545: LIST
7546: LIST
7547: LIST
7548: LIST
7549: LIST
7550: LIST
7551: LIST
7552: LIST
7553: PUSH
7554: LD_INT 101
7556: PUSH
7557: LD_INT 102
7559: PUSH
7560: LD_INT 103
7562: PUSH
7563: LD_INT 104
7565: PUSH
7566: LD_INT 105
7568: PUSH
7569: LD_INT 106
7571: PUSH
7572: LD_INT 107
7574: PUSH
7575: LD_INT 108
7577: PUSH
7578: LD_INT 109
7580: PUSH
7581: LD_INT 110
7583: PUSH
7584: LD_INT 111
7586: PUSH
7587: LD_INT 112
7589: PUSH
7590: LD_INT 113
7592: PUSH
7593: LD_INT 114
7595: PUSH
7596: LD_INT 116
7598: PUSH
7599: LD_INT 117
7601: PUSH
7602: LD_INT 118
7604: PUSH
7605: EMPTY
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: PUSH
7624: EMPTY
7625: LIST
7626: LIST
7627: ST_TO_ADDR
7628: GO 9083
7630: LD_INT 13
7632: DOUBLE
7633: EQUAL
7634: IFTRUE 7638
7636: GO 7846
7638: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7639: LD_ADDR_VAR 0 1
7643: PUSH
7644: LD_INT 1
7646: PUSH
7647: LD_INT 2
7649: PUSH
7650: LD_INT 3
7652: PUSH
7653: LD_INT 4
7655: PUSH
7656: LD_INT 5
7658: PUSH
7659: LD_INT 8
7661: PUSH
7662: LD_INT 9
7664: PUSH
7665: LD_INT 10
7667: PUSH
7668: LD_INT 11
7670: PUSH
7671: LD_INT 12
7673: PUSH
7674: LD_INT 14
7676: PUSH
7677: LD_INT 15
7679: PUSH
7680: LD_INT 16
7682: PUSH
7683: LD_INT 17
7685: PUSH
7686: LD_INT 18
7688: PUSH
7689: LD_INT 19
7691: PUSH
7692: LD_INT 20
7694: PUSH
7695: LD_INT 21
7697: PUSH
7698: LD_INT 22
7700: PUSH
7701: LD_INT 23
7703: PUSH
7704: LD_INT 24
7706: PUSH
7707: LD_INT 25
7709: PUSH
7710: LD_INT 26
7712: PUSH
7713: LD_INT 27
7715: PUSH
7716: LD_INT 28
7718: PUSH
7719: LD_INT 30
7721: PUSH
7722: LD_INT 31
7724: PUSH
7725: LD_INT 32
7727: PUSH
7728: LD_INT 33
7730: PUSH
7731: LD_INT 34
7733: PUSH
7734: LD_INT 36
7736: PUSH
7737: EMPTY
7738: LIST
7739: LIST
7740: LIST
7741: LIST
7742: LIST
7743: LIST
7744: LIST
7745: LIST
7746: LIST
7747: LIST
7748: LIST
7749: LIST
7750: LIST
7751: LIST
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: PUSH
7770: LD_INT 101
7772: PUSH
7773: LD_INT 102
7775: PUSH
7776: LD_INT 103
7778: PUSH
7779: LD_INT 104
7781: PUSH
7782: LD_INT 105
7784: PUSH
7785: LD_INT 106
7787: PUSH
7788: LD_INT 107
7790: PUSH
7791: LD_INT 108
7793: PUSH
7794: LD_INT 109
7796: PUSH
7797: LD_INT 110
7799: PUSH
7800: LD_INT 111
7802: PUSH
7803: LD_INT 112
7805: PUSH
7806: LD_INT 113
7808: PUSH
7809: LD_INT 114
7811: PUSH
7812: LD_INT 116
7814: PUSH
7815: LD_INT 117
7817: PUSH
7818: LD_INT 118
7820: PUSH
7821: EMPTY
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: PUSH
7840: EMPTY
7841: LIST
7842: LIST
7843: ST_TO_ADDR
7844: GO 9083
7846: LD_INT 14
7848: DOUBLE
7849: EQUAL
7850: IFTRUE 7854
7852: GO 8078
7854: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
7855: LD_ADDR_VAR 0 1
7859: PUSH
7860: LD_INT 1
7862: PUSH
7863: LD_INT 2
7865: PUSH
7866: LD_INT 3
7868: PUSH
7869: LD_INT 4
7871: PUSH
7872: LD_INT 5
7874: PUSH
7875: LD_INT 6
7877: PUSH
7878: LD_INT 7
7880: PUSH
7881: LD_INT 8
7883: PUSH
7884: LD_INT 9
7886: PUSH
7887: LD_INT 10
7889: PUSH
7890: LD_INT 11
7892: PUSH
7893: LD_INT 12
7895: PUSH
7896: LD_INT 13
7898: PUSH
7899: LD_INT 14
7901: PUSH
7902: LD_INT 15
7904: PUSH
7905: LD_INT 16
7907: PUSH
7908: LD_INT 17
7910: PUSH
7911: LD_INT 18
7913: PUSH
7914: LD_INT 19
7916: PUSH
7917: LD_INT 20
7919: PUSH
7920: LD_INT 21
7922: PUSH
7923: LD_INT 22
7925: PUSH
7926: LD_INT 23
7928: PUSH
7929: LD_INT 24
7931: PUSH
7932: LD_INT 25
7934: PUSH
7935: LD_INT 26
7937: PUSH
7938: LD_INT 27
7940: PUSH
7941: LD_INT 28
7943: PUSH
7944: LD_INT 29
7946: PUSH
7947: LD_INT 30
7949: PUSH
7950: LD_INT 31
7952: PUSH
7953: LD_INT 32
7955: PUSH
7956: LD_INT 33
7958: PUSH
7959: LD_INT 34
7961: PUSH
7962: LD_INT 36
7964: PUSH
7965: EMPTY
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: LIST
7972: LIST
7973: LIST
7974: LIST
7975: LIST
7976: LIST
7977: LIST
7978: LIST
7979: LIST
7980: LIST
7981: LIST
7982: LIST
7983: LIST
7984: LIST
7985: LIST
7986: LIST
7987: LIST
7988: LIST
7989: LIST
7990: LIST
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: LIST
7998: LIST
7999: LIST
8000: LIST
8001: PUSH
8002: LD_INT 101
8004: PUSH
8005: LD_INT 102
8007: PUSH
8008: LD_INT 103
8010: PUSH
8011: LD_INT 104
8013: PUSH
8014: LD_INT 105
8016: PUSH
8017: LD_INT 106
8019: PUSH
8020: LD_INT 107
8022: PUSH
8023: LD_INT 108
8025: PUSH
8026: LD_INT 109
8028: PUSH
8029: LD_INT 110
8031: PUSH
8032: LD_INT 111
8034: PUSH
8035: LD_INT 112
8037: PUSH
8038: LD_INT 113
8040: PUSH
8041: LD_INT 114
8043: PUSH
8044: LD_INT 116
8046: PUSH
8047: LD_INT 117
8049: PUSH
8050: LD_INT 118
8052: PUSH
8053: EMPTY
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: PUSH
8072: EMPTY
8073: LIST
8074: LIST
8075: ST_TO_ADDR
8076: GO 9083
8078: LD_INT 15
8080: DOUBLE
8081: EQUAL
8082: IFTRUE 8086
8084: GO 8310
8086: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8087: LD_ADDR_VAR 0 1
8091: PUSH
8092: LD_INT 1
8094: PUSH
8095: LD_INT 2
8097: PUSH
8098: LD_INT 3
8100: PUSH
8101: LD_INT 4
8103: PUSH
8104: LD_INT 5
8106: PUSH
8107: LD_INT 6
8109: PUSH
8110: LD_INT 7
8112: PUSH
8113: LD_INT 8
8115: PUSH
8116: LD_INT 9
8118: PUSH
8119: LD_INT 10
8121: PUSH
8122: LD_INT 11
8124: PUSH
8125: LD_INT 12
8127: PUSH
8128: LD_INT 13
8130: PUSH
8131: LD_INT 14
8133: PUSH
8134: LD_INT 15
8136: PUSH
8137: LD_INT 16
8139: PUSH
8140: LD_INT 17
8142: PUSH
8143: LD_INT 18
8145: PUSH
8146: LD_INT 19
8148: PUSH
8149: LD_INT 20
8151: PUSH
8152: LD_INT 21
8154: PUSH
8155: LD_INT 22
8157: PUSH
8158: LD_INT 23
8160: PUSH
8161: LD_INT 24
8163: PUSH
8164: LD_INT 25
8166: PUSH
8167: LD_INT 26
8169: PUSH
8170: LD_INT 27
8172: PUSH
8173: LD_INT 28
8175: PUSH
8176: LD_INT 29
8178: PUSH
8179: LD_INT 30
8181: PUSH
8182: LD_INT 31
8184: PUSH
8185: LD_INT 32
8187: PUSH
8188: LD_INT 33
8190: PUSH
8191: LD_INT 34
8193: PUSH
8194: LD_INT 36
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: LIST
8207: LIST
8208: LIST
8209: LIST
8210: LIST
8211: LIST
8212: LIST
8213: LIST
8214: LIST
8215: LIST
8216: LIST
8217: LIST
8218: LIST
8219: LIST
8220: LIST
8221: LIST
8222: LIST
8223: LIST
8224: LIST
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: LIST
8232: LIST
8233: PUSH
8234: LD_INT 101
8236: PUSH
8237: LD_INT 102
8239: PUSH
8240: LD_INT 103
8242: PUSH
8243: LD_INT 104
8245: PUSH
8246: LD_INT 105
8248: PUSH
8249: LD_INT 106
8251: PUSH
8252: LD_INT 107
8254: PUSH
8255: LD_INT 108
8257: PUSH
8258: LD_INT 109
8260: PUSH
8261: LD_INT 110
8263: PUSH
8264: LD_INT 111
8266: PUSH
8267: LD_INT 112
8269: PUSH
8270: LD_INT 113
8272: PUSH
8273: LD_INT 114
8275: PUSH
8276: LD_INT 116
8278: PUSH
8279: LD_INT 117
8281: PUSH
8282: LD_INT 118
8284: PUSH
8285: EMPTY
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: PUSH
8304: EMPTY
8305: LIST
8306: LIST
8307: ST_TO_ADDR
8308: GO 9083
8310: LD_INT 16
8312: DOUBLE
8313: EQUAL
8314: IFTRUE 8318
8316: GO 8454
8318: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8319: LD_ADDR_VAR 0 1
8323: PUSH
8324: LD_INT 2
8326: PUSH
8327: LD_INT 4
8329: PUSH
8330: LD_INT 5
8332: PUSH
8333: LD_INT 7
8335: PUSH
8336: LD_INT 11
8338: PUSH
8339: LD_INT 12
8341: PUSH
8342: LD_INT 15
8344: PUSH
8345: LD_INT 16
8347: PUSH
8348: LD_INT 20
8350: PUSH
8351: LD_INT 21
8353: PUSH
8354: LD_INT 22
8356: PUSH
8357: LD_INT 23
8359: PUSH
8360: LD_INT 25
8362: PUSH
8363: LD_INT 26
8365: PUSH
8366: LD_INT 30
8368: PUSH
8369: LD_INT 31
8371: PUSH
8372: LD_INT 32
8374: PUSH
8375: LD_INT 33
8377: PUSH
8378: LD_INT 34
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: LIST
8398: LIST
8399: LIST
8400: LIST
8401: PUSH
8402: LD_INT 101
8404: PUSH
8405: LD_INT 102
8407: PUSH
8408: LD_INT 103
8410: PUSH
8411: LD_INT 106
8413: PUSH
8414: LD_INT 108
8416: PUSH
8417: LD_INT 112
8419: PUSH
8420: LD_INT 113
8422: PUSH
8423: LD_INT 114
8425: PUSH
8426: LD_INT 116
8428: PUSH
8429: LD_INT 117
8431: PUSH
8432: LD_INT 118
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: LIST
8439: LIST
8440: LIST
8441: LIST
8442: LIST
8443: LIST
8444: LIST
8445: LIST
8446: LIST
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: ST_TO_ADDR
8452: GO 9083
8454: LD_INT 17
8456: DOUBLE
8457: EQUAL
8458: IFTRUE 8462
8460: GO 8686
8462: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8463: LD_ADDR_VAR 0 1
8467: PUSH
8468: LD_INT 1
8470: PUSH
8471: LD_INT 2
8473: PUSH
8474: LD_INT 3
8476: PUSH
8477: LD_INT 4
8479: PUSH
8480: LD_INT 5
8482: PUSH
8483: LD_INT 6
8485: PUSH
8486: LD_INT 7
8488: PUSH
8489: LD_INT 8
8491: PUSH
8492: LD_INT 9
8494: PUSH
8495: LD_INT 10
8497: PUSH
8498: LD_INT 11
8500: PUSH
8501: LD_INT 12
8503: PUSH
8504: LD_INT 13
8506: PUSH
8507: LD_INT 14
8509: PUSH
8510: LD_INT 15
8512: PUSH
8513: LD_INT 16
8515: PUSH
8516: LD_INT 17
8518: PUSH
8519: LD_INT 18
8521: PUSH
8522: LD_INT 19
8524: PUSH
8525: LD_INT 20
8527: PUSH
8528: LD_INT 21
8530: PUSH
8531: LD_INT 22
8533: PUSH
8534: LD_INT 23
8536: PUSH
8537: LD_INT 24
8539: PUSH
8540: LD_INT 25
8542: PUSH
8543: LD_INT 26
8545: PUSH
8546: LD_INT 27
8548: PUSH
8549: LD_INT 28
8551: PUSH
8552: LD_INT 29
8554: PUSH
8555: LD_INT 30
8557: PUSH
8558: LD_INT 31
8560: PUSH
8561: LD_INT 32
8563: PUSH
8564: LD_INT 33
8566: PUSH
8567: LD_INT 34
8569: PUSH
8570: LD_INT 36
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: LIST
8577: LIST
8578: LIST
8579: LIST
8580: LIST
8581: LIST
8582: LIST
8583: LIST
8584: LIST
8585: LIST
8586: LIST
8587: LIST
8588: LIST
8589: LIST
8590: LIST
8591: LIST
8592: LIST
8593: LIST
8594: LIST
8595: LIST
8596: LIST
8597: LIST
8598: LIST
8599: LIST
8600: LIST
8601: LIST
8602: LIST
8603: LIST
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: PUSH
8610: LD_INT 101
8612: PUSH
8613: LD_INT 102
8615: PUSH
8616: LD_INT 103
8618: PUSH
8619: LD_INT 104
8621: PUSH
8622: LD_INT 105
8624: PUSH
8625: LD_INT 106
8627: PUSH
8628: LD_INT 107
8630: PUSH
8631: LD_INT 108
8633: PUSH
8634: LD_INT 109
8636: PUSH
8637: LD_INT 110
8639: PUSH
8640: LD_INT 111
8642: PUSH
8643: LD_INT 112
8645: PUSH
8646: LD_INT 113
8648: PUSH
8649: LD_INT 114
8651: PUSH
8652: LD_INT 116
8654: PUSH
8655: LD_INT 117
8657: PUSH
8658: LD_INT 118
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: PUSH
8680: EMPTY
8681: LIST
8682: LIST
8683: ST_TO_ADDR
8684: GO 9083
8686: LD_INT 18
8688: DOUBLE
8689: EQUAL
8690: IFTRUE 8694
8692: GO 8842
8694: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8695: LD_ADDR_VAR 0 1
8699: PUSH
8700: LD_INT 2
8702: PUSH
8703: LD_INT 4
8705: PUSH
8706: LD_INT 5
8708: PUSH
8709: LD_INT 7
8711: PUSH
8712: LD_INT 11
8714: PUSH
8715: LD_INT 12
8717: PUSH
8718: LD_INT 15
8720: PUSH
8721: LD_INT 16
8723: PUSH
8724: LD_INT 20
8726: PUSH
8727: LD_INT 21
8729: PUSH
8730: LD_INT 22
8732: PUSH
8733: LD_INT 23
8735: PUSH
8736: LD_INT 25
8738: PUSH
8739: LD_INT 26
8741: PUSH
8742: LD_INT 30
8744: PUSH
8745: LD_INT 31
8747: PUSH
8748: LD_INT 32
8750: PUSH
8751: LD_INT 33
8753: PUSH
8754: LD_INT 34
8756: PUSH
8757: LD_INT 35
8759: PUSH
8760: LD_INT 36
8762: PUSH
8763: EMPTY
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: LIST
8769: LIST
8770: LIST
8771: LIST
8772: LIST
8773: LIST
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: LIST
8781: LIST
8782: LIST
8783: LIST
8784: LIST
8785: PUSH
8786: LD_INT 101
8788: PUSH
8789: LD_INT 102
8791: PUSH
8792: LD_INT 103
8794: PUSH
8795: LD_INT 106
8797: PUSH
8798: LD_INT 108
8800: PUSH
8801: LD_INT 112
8803: PUSH
8804: LD_INT 113
8806: PUSH
8807: LD_INT 114
8809: PUSH
8810: LD_INT 115
8812: PUSH
8813: LD_INT 116
8815: PUSH
8816: LD_INT 117
8818: PUSH
8819: LD_INT 118
8821: PUSH
8822: EMPTY
8823: LIST
8824: LIST
8825: LIST
8826: LIST
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: PUSH
8836: EMPTY
8837: LIST
8838: LIST
8839: ST_TO_ADDR
8840: GO 9083
8842: LD_INT 19
8844: DOUBLE
8845: EQUAL
8846: IFTRUE 8850
8848: GO 9082
8850: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
8851: LD_ADDR_VAR 0 1
8855: PUSH
8856: LD_INT 1
8858: PUSH
8859: LD_INT 2
8861: PUSH
8862: LD_INT 3
8864: PUSH
8865: LD_INT 4
8867: PUSH
8868: LD_INT 5
8870: PUSH
8871: LD_INT 6
8873: PUSH
8874: LD_INT 7
8876: PUSH
8877: LD_INT 8
8879: PUSH
8880: LD_INT 9
8882: PUSH
8883: LD_INT 10
8885: PUSH
8886: LD_INT 11
8888: PUSH
8889: LD_INT 12
8891: PUSH
8892: LD_INT 13
8894: PUSH
8895: LD_INT 14
8897: PUSH
8898: LD_INT 15
8900: PUSH
8901: LD_INT 16
8903: PUSH
8904: LD_INT 17
8906: PUSH
8907: LD_INT 18
8909: PUSH
8910: LD_INT 19
8912: PUSH
8913: LD_INT 20
8915: PUSH
8916: LD_INT 21
8918: PUSH
8919: LD_INT 22
8921: PUSH
8922: LD_INT 23
8924: PUSH
8925: LD_INT 24
8927: PUSH
8928: LD_INT 25
8930: PUSH
8931: LD_INT 26
8933: PUSH
8934: LD_INT 27
8936: PUSH
8937: LD_INT 28
8939: PUSH
8940: LD_INT 29
8942: PUSH
8943: LD_INT 30
8945: PUSH
8946: LD_INT 31
8948: PUSH
8949: LD_INT 32
8951: PUSH
8952: LD_INT 33
8954: PUSH
8955: LD_INT 34
8957: PUSH
8958: LD_INT 35
8960: PUSH
8961: LD_INT 36
8963: PUSH
8964: EMPTY
8965: LIST
8966: LIST
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: LIST
8974: LIST
8975: LIST
8976: LIST
8977: LIST
8978: LIST
8979: LIST
8980: LIST
8981: LIST
8982: LIST
8983: LIST
8984: LIST
8985: LIST
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: LIST
8991: LIST
8992: LIST
8993: LIST
8994: LIST
8995: LIST
8996: LIST
8997: LIST
8998: LIST
8999: LIST
9000: LIST
9001: PUSH
9002: LD_INT 101
9004: PUSH
9005: LD_INT 102
9007: PUSH
9008: LD_INT 103
9010: PUSH
9011: LD_INT 104
9013: PUSH
9014: LD_INT 105
9016: PUSH
9017: LD_INT 106
9019: PUSH
9020: LD_INT 107
9022: PUSH
9023: LD_INT 108
9025: PUSH
9026: LD_INT 109
9028: PUSH
9029: LD_INT 110
9031: PUSH
9032: LD_INT 111
9034: PUSH
9035: LD_INT 112
9037: PUSH
9038: LD_INT 113
9040: PUSH
9041: LD_INT 114
9043: PUSH
9044: LD_INT 115
9046: PUSH
9047: LD_INT 116
9049: PUSH
9050: LD_INT 117
9052: PUSH
9053: LD_INT 118
9055: PUSH
9056: EMPTY
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: PUSH
9076: EMPTY
9077: LIST
9078: LIST
9079: ST_TO_ADDR
9080: GO 9083
9082: POP
// end else
9083: GO 9314
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9085: LD_ADDR_VAR 0 1
9089: PUSH
9090: LD_INT 1
9092: PUSH
9093: LD_INT 2
9095: PUSH
9096: LD_INT 3
9098: PUSH
9099: LD_INT 4
9101: PUSH
9102: LD_INT 5
9104: PUSH
9105: LD_INT 6
9107: PUSH
9108: LD_INT 7
9110: PUSH
9111: LD_INT 8
9113: PUSH
9114: LD_INT 9
9116: PUSH
9117: LD_INT 10
9119: PUSH
9120: LD_INT 11
9122: PUSH
9123: LD_INT 12
9125: PUSH
9126: LD_INT 13
9128: PUSH
9129: LD_INT 14
9131: PUSH
9132: LD_INT 15
9134: PUSH
9135: LD_INT 16
9137: PUSH
9138: LD_INT 17
9140: PUSH
9141: LD_INT 18
9143: PUSH
9144: LD_INT 19
9146: PUSH
9147: LD_INT 20
9149: PUSH
9150: LD_INT 21
9152: PUSH
9153: LD_INT 22
9155: PUSH
9156: LD_INT 23
9158: PUSH
9159: LD_INT 24
9161: PUSH
9162: LD_INT 25
9164: PUSH
9165: LD_INT 26
9167: PUSH
9168: LD_INT 27
9170: PUSH
9171: LD_INT 28
9173: PUSH
9174: LD_INT 29
9176: PUSH
9177: LD_INT 30
9179: PUSH
9180: LD_INT 31
9182: PUSH
9183: LD_INT 32
9185: PUSH
9186: LD_INT 33
9188: PUSH
9189: LD_INT 34
9191: PUSH
9192: LD_INT 35
9194: PUSH
9195: LD_INT 36
9197: PUSH
9198: EMPTY
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: LIST
9216: LIST
9217: LIST
9218: LIST
9219: LIST
9220: LIST
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: LIST
9226: LIST
9227: LIST
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: PUSH
9236: LD_INT 101
9238: PUSH
9239: LD_INT 102
9241: PUSH
9242: LD_INT 103
9244: PUSH
9245: LD_INT 104
9247: PUSH
9248: LD_INT 105
9250: PUSH
9251: LD_INT 106
9253: PUSH
9254: LD_INT 107
9256: PUSH
9257: LD_INT 108
9259: PUSH
9260: LD_INT 109
9262: PUSH
9263: LD_INT 110
9265: PUSH
9266: LD_INT 111
9268: PUSH
9269: LD_INT 112
9271: PUSH
9272: LD_INT 113
9274: PUSH
9275: LD_INT 114
9277: PUSH
9278: LD_INT 115
9280: PUSH
9281: LD_INT 116
9283: PUSH
9284: LD_INT 117
9286: PUSH
9287: LD_INT 118
9289: PUSH
9290: EMPTY
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: PUSH
9310: EMPTY
9311: LIST
9312: LIST
9313: ST_TO_ADDR
// if result then
9314: LD_VAR 0 1
9318: IFFALSE 9607
// begin normal :=  ;
9320: LD_ADDR_VAR 0 3
9324: PUSH
9325: LD_STRING 
9327: ST_TO_ADDR
// hardcore :=  ;
9328: LD_ADDR_VAR 0 4
9332: PUSH
9333: LD_STRING 
9335: ST_TO_ADDR
// for i = 1 to normalCounter do
9336: LD_ADDR_VAR 0 5
9340: PUSH
9341: DOUBLE
9342: LD_INT 1
9344: DEC
9345: ST_TO_ADDR
9346: LD_EXP 59
9350: PUSH
9351: FOR_TO
9352: IFFALSE 9453
// begin tmp := 0 ;
9354: LD_ADDR_VAR 0 2
9358: PUSH
9359: LD_STRING 0
9361: ST_TO_ADDR
// if result [ 1 ] then
9362: LD_VAR 0 1
9366: PUSH
9367: LD_INT 1
9369: ARRAY
9370: IFFALSE 9435
// if result [ 1 ] [ 1 ] = i then
9372: LD_VAR 0 1
9376: PUSH
9377: LD_INT 1
9379: ARRAY
9380: PUSH
9381: LD_INT 1
9383: ARRAY
9384: PUSH
9385: LD_VAR 0 5
9389: EQUAL
9390: IFFALSE 9435
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9392: LD_ADDR_VAR 0 1
9396: PUSH
9397: LD_VAR 0 1
9401: PPUSH
9402: LD_INT 1
9404: PPUSH
9405: LD_VAR 0 1
9409: PUSH
9410: LD_INT 1
9412: ARRAY
9413: PPUSH
9414: LD_INT 1
9416: PPUSH
9417: CALL_OW 3
9421: PPUSH
9422: CALL_OW 1
9426: ST_TO_ADDR
// tmp := 1 ;
9427: LD_ADDR_VAR 0 2
9431: PUSH
9432: LD_STRING 1
9434: ST_TO_ADDR
// end ; normal := normal & tmp ;
9435: LD_ADDR_VAR 0 3
9439: PUSH
9440: LD_VAR 0 3
9444: PUSH
9445: LD_VAR 0 2
9449: STR
9450: ST_TO_ADDR
// end ;
9451: GO 9351
9453: POP
9454: POP
// for i = 1 to hardcoreCounter do
9455: LD_ADDR_VAR 0 5
9459: PUSH
9460: DOUBLE
9461: LD_INT 1
9463: DEC
9464: ST_TO_ADDR
9465: LD_EXP 60
9469: PUSH
9470: FOR_TO
9471: IFFALSE 9576
// begin tmp := 0 ;
9473: LD_ADDR_VAR 0 2
9477: PUSH
9478: LD_STRING 0
9480: ST_TO_ADDR
// if result [ 2 ] then
9481: LD_VAR 0 1
9485: PUSH
9486: LD_INT 2
9488: ARRAY
9489: IFFALSE 9558
// if result [ 2 ] [ 1 ] = 100 + i then
9491: LD_VAR 0 1
9495: PUSH
9496: LD_INT 2
9498: ARRAY
9499: PUSH
9500: LD_INT 1
9502: ARRAY
9503: PUSH
9504: LD_INT 100
9506: PUSH
9507: LD_VAR 0 5
9511: PLUS
9512: EQUAL
9513: IFFALSE 9558
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9515: LD_ADDR_VAR 0 1
9519: PUSH
9520: LD_VAR 0 1
9524: PPUSH
9525: LD_INT 2
9527: PPUSH
9528: LD_VAR 0 1
9532: PUSH
9533: LD_INT 2
9535: ARRAY
9536: PPUSH
9537: LD_INT 1
9539: PPUSH
9540: CALL_OW 3
9544: PPUSH
9545: CALL_OW 1
9549: ST_TO_ADDR
// tmp := 1 ;
9550: LD_ADDR_VAR 0 2
9554: PUSH
9555: LD_STRING 1
9557: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9558: LD_ADDR_VAR 0 4
9562: PUSH
9563: LD_VAR 0 4
9567: PUSH
9568: LD_VAR 0 2
9572: STR
9573: ST_TO_ADDR
// end ;
9574: GO 9470
9576: POP
9577: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
9578: LD_STRING getStreamItemsFromMission("
9580: PUSH
9581: LD_VAR 0 3
9585: STR
9586: PUSH
9587: LD_STRING ","
9589: STR
9590: PUSH
9591: LD_VAR 0 4
9595: STR
9596: PUSH
9597: LD_STRING ")
9599: STR
9600: PPUSH
9601: CALL_OW 559
// end else
9605: GO 9614
// ToLua ( getStreamItemsFromMission("","") ) ;
9607: LD_STRING getStreamItemsFromMission("","")
9609: PPUSH
9610: CALL_OW 559
// end ;
9614: LD_VAR 0 1
9618: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9619: LD_EXP 58
9623: PUSH
9624: LD_EXP 63
9628: AND
9629: IFFALSE 9753
9631: GO 9633
9633: DISABLE
9634: LD_INT 0
9636: PPUSH
9637: PPUSH
// begin enable ;
9638: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9639: LD_ADDR_VAR 0 2
9643: PUSH
9644: LD_INT 22
9646: PUSH
9647: LD_OWVAR 2
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 2
9658: PUSH
9659: LD_INT 34
9661: PUSH
9662: LD_INT 7
9664: PUSH
9665: EMPTY
9666: LIST
9667: LIST
9668: PUSH
9669: LD_INT 34
9671: PUSH
9672: LD_INT 45
9674: PUSH
9675: EMPTY
9676: LIST
9677: LIST
9678: PUSH
9679: LD_INT 34
9681: PUSH
9682: LD_INT 28
9684: PUSH
9685: EMPTY
9686: LIST
9687: LIST
9688: PUSH
9689: LD_INT 34
9691: PUSH
9692: LD_INT 47
9694: PUSH
9695: EMPTY
9696: LIST
9697: LIST
9698: PUSH
9699: EMPTY
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: PPUSH
9710: CALL_OW 69
9714: ST_TO_ADDR
// if not tmp then
9715: LD_VAR 0 2
9719: NOT
9720: IFFALSE 9724
// exit ;
9722: GO 9753
// for i in tmp do
9724: LD_ADDR_VAR 0 1
9728: PUSH
9729: LD_VAR 0 2
9733: PUSH
9734: FOR_IN
9735: IFFALSE 9751
// begin SetLives ( i , 0 ) ;
9737: LD_VAR 0 1
9741: PPUSH
9742: LD_INT 0
9744: PPUSH
9745: CALL_OW 234
// end ;
9749: GO 9734
9751: POP
9752: POP
// end ;
9753: PPOPN 2
9755: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
9756: LD_EXP 58
9760: PUSH
9761: LD_EXP 64
9765: AND
9766: IFFALSE 9850
9768: GO 9770
9770: DISABLE
9771: LD_INT 0
9773: PPUSH
9774: PPUSH
// begin enable ;
9775: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
9776: LD_ADDR_VAR 0 2
9780: PUSH
9781: LD_INT 22
9783: PUSH
9784: LD_OWVAR 2
9788: PUSH
9789: EMPTY
9790: LIST
9791: LIST
9792: PUSH
9793: LD_INT 32
9795: PUSH
9796: LD_INT 3
9798: PUSH
9799: EMPTY
9800: LIST
9801: LIST
9802: PUSH
9803: EMPTY
9804: LIST
9805: LIST
9806: PPUSH
9807: CALL_OW 69
9811: ST_TO_ADDR
// if not tmp then
9812: LD_VAR 0 2
9816: NOT
9817: IFFALSE 9821
// exit ;
9819: GO 9850
// for i in tmp do
9821: LD_ADDR_VAR 0 1
9825: PUSH
9826: LD_VAR 0 2
9830: PUSH
9831: FOR_IN
9832: IFFALSE 9848
// begin SetLives ( i , 0 ) ;
9834: LD_VAR 0 1
9838: PPUSH
9839: LD_INT 0
9841: PPUSH
9842: CALL_OW 234
// end ;
9846: GO 9831
9848: POP
9849: POP
// end ;
9850: PPOPN 2
9852: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
9853: LD_EXP 58
9857: PUSH
9858: LD_EXP 61
9862: AND
9863: IFFALSE 9956
9865: GO 9867
9867: DISABLE
9868: LD_INT 0
9870: PPUSH
// begin enable ;
9871: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
9872: LD_ADDR_VAR 0 1
9876: PUSH
9877: LD_INT 22
9879: PUSH
9880: LD_OWVAR 2
9884: PUSH
9885: EMPTY
9886: LIST
9887: LIST
9888: PUSH
9889: LD_INT 2
9891: PUSH
9892: LD_INT 25
9894: PUSH
9895: LD_INT 5
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: PUSH
9902: LD_INT 25
9904: PUSH
9905: LD_INT 9
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: PUSH
9912: LD_INT 25
9914: PUSH
9915: LD_INT 8
9917: PUSH
9918: EMPTY
9919: LIST
9920: LIST
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: LIST
9926: LIST
9927: PUSH
9928: EMPTY
9929: LIST
9930: LIST
9931: PPUSH
9932: CALL_OW 69
9936: PUSH
9937: FOR_IN
9938: IFFALSE 9954
// begin SetClass ( i , 1 ) ;
9940: LD_VAR 0 1
9944: PPUSH
9945: LD_INT 1
9947: PPUSH
9948: CALL_OW 336
// end ;
9952: GO 9937
9954: POP
9955: POP
// end ;
9956: PPOPN 1
9958: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
9959: LD_EXP 58
9963: PUSH
9964: LD_EXP 62
9968: AND
9969: PUSH
9970: LD_OWVAR 65
9974: PUSH
9975: LD_INT 7
9977: LESS
9978: AND
9979: IFFALSE 9993
9981: GO 9983
9983: DISABLE
// begin enable ;
9984: ENABLE
// game_speed := 7 ;
9985: LD_ADDR_OWVAR 65
9989: PUSH
9990: LD_INT 7
9992: ST_TO_ADDR
// end ;
9993: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
9994: LD_EXP 58
9998: PUSH
9999: LD_EXP 65
10003: AND
10004: IFFALSE 10206
10006: GO 10008
10008: DISABLE
10009: LD_INT 0
10011: PPUSH
10012: PPUSH
10013: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10014: LD_ADDR_VAR 0 3
10018: PUSH
10019: LD_INT 81
10021: PUSH
10022: LD_OWVAR 2
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: PUSH
10031: LD_INT 21
10033: PUSH
10034: LD_INT 1
10036: PUSH
10037: EMPTY
10038: LIST
10039: LIST
10040: PUSH
10041: EMPTY
10042: LIST
10043: LIST
10044: PPUSH
10045: CALL_OW 69
10049: ST_TO_ADDR
// if not tmp then
10050: LD_VAR 0 3
10054: NOT
10055: IFFALSE 10059
// exit ;
10057: GO 10206
// if tmp > 5 then
10059: LD_VAR 0 3
10063: PUSH
10064: LD_INT 5
10066: GREATER
10067: IFFALSE 10079
// k := 5 else
10069: LD_ADDR_VAR 0 2
10073: PUSH
10074: LD_INT 5
10076: ST_TO_ADDR
10077: GO 10089
// k := tmp ;
10079: LD_ADDR_VAR 0 2
10083: PUSH
10084: LD_VAR 0 3
10088: ST_TO_ADDR
// for i := 1 to k do
10089: LD_ADDR_VAR 0 1
10093: PUSH
10094: DOUBLE
10095: LD_INT 1
10097: DEC
10098: ST_TO_ADDR
10099: LD_VAR 0 2
10103: PUSH
10104: FOR_TO
10105: IFFALSE 10204
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10107: LD_VAR 0 3
10111: PUSH
10112: LD_VAR 0 1
10116: ARRAY
10117: PPUSH
10118: LD_VAR 0 1
10122: PUSH
10123: LD_INT 4
10125: MOD
10126: PUSH
10127: LD_INT 1
10129: PLUS
10130: PPUSH
10131: CALL_OW 259
10135: PUSH
10136: LD_INT 10
10138: LESS
10139: IFFALSE 10202
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10141: LD_VAR 0 3
10145: PUSH
10146: LD_VAR 0 1
10150: ARRAY
10151: PPUSH
10152: LD_VAR 0 1
10156: PUSH
10157: LD_INT 4
10159: MOD
10160: PUSH
10161: LD_INT 1
10163: PLUS
10164: PPUSH
10165: LD_VAR 0 3
10169: PUSH
10170: LD_VAR 0 1
10174: ARRAY
10175: PPUSH
10176: LD_VAR 0 1
10180: PUSH
10181: LD_INT 4
10183: MOD
10184: PUSH
10185: LD_INT 1
10187: PLUS
10188: PPUSH
10189: CALL_OW 259
10193: PUSH
10194: LD_INT 1
10196: PLUS
10197: PPUSH
10198: CALL_OW 237
10202: GO 10104
10204: POP
10205: POP
// end ;
10206: PPOPN 3
10208: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10209: LD_EXP 58
10213: PUSH
10214: LD_EXP 66
10218: AND
10219: IFFALSE 10239
10221: GO 10223
10223: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10224: LD_INT 4
10226: PPUSH
10227: LD_OWVAR 2
10231: PPUSH
10232: LD_INT 0
10234: PPUSH
10235: CALL_OW 324
10239: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10240: LD_EXP 58
10244: PUSH
10245: LD_EXP 95
10249: AND
10250: IFFALSE 10270
10252: GO 10254
10254: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10255: LD_INT 19
10257: PPUSH
10258: LD_OWVAR 2
10262: PPUSH
10263: LD_INT 0
10265: PPUSH
10266: CALL_OW 324
10270: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10271: LD_EXP 58
10275: PUSH
10276: LD_EXP 67
10280: AND
10281: IFFALSE 10383
10283: GO 10285
10285: DISABLE
10286: LD_INT 0
10288: PPUSH
10289: PPUSH
// begin enable ;
10290: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10291: LD_ADDR_VAR 0 2
10295: PUSH
10296: LD_INT 22
10298: PUSH
10299: LD_OWVAR 2
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: PUSH
10308: LD_INT 2
10310: PUSH
10311: LD_INT 34
10313: PUSH
10314: LD_INT 11
10316: PUSH
10317: EMPTY
10318: LIST
10319: LIST
10320: PUSH
10321: LD_INT 34
10323: PUSH
10324: LD_INT 30
10326: PUSH
10327: EMPTY
10328: LIST
10329: LIST
10330: PUSH
10331: EMPTY
10332: LIST
10333: LIST
10334: LIST
10335: PUSH
10336: EMPTY
10337: LIST
10338: LIST
10339: PPUSH
10340: CALL_OW 69
10344: ST_TO_ADDR
// if not tmp then
10345: LD_VAR 0 2
10349: NOT
10350: IFFALSE 10354
// exit ;
10352: GO 10383
// for i in tmp do
10354: LD_ADDR_VAR 0 1
10358: PUSH
10359: LD_VAR 0 2
10363: PUSH
10364: FOR_IN
10365: IFFALSE 10381
// begin SetLives ( i , 0 ) ;
10367: LD_VAR 0 1
10371: PPUSH
10372: LD_INT 0
10374: PPUSH
10375: CALL_OW 234
// end ;
10379: GO 10364
10381: POP
10382: POP
// end ;
10383: PPOPN 2
10385: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10386: LD_EXP 58
10390: PUSH
10391: LD_EXP 68
10395: AND
10396: IFFALSE 10416
10398: GO 10400
10400: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10401: LD_INT 32
10403: PPUSH
10404: LD_OWVAR 2
10408: PPUSH
10409: LD_INT 0
10411: PPUSH
10412: CALL_OW 324
10416: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10417: LD_EXP 58
10421: PUSH
10422: LD_EXP 69
10426: AND
10427: IFFALSE 10608
10429: GO 10431
10431: DISABLE
10432: LD_INT 0
10434: PPUSH
10435: PPUSH
10436: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10437: LD_ADDR_VAR 0 2
10441: PUSH
10442: LD_INT 22
10444: PUSH
10445: LD_OWVAR 2
10449: PUSH
10450: EMPTY
10451: LIST
10452: LIST
10453: PUSH
10454: LD_INT 33
10456: PUSH
10457: LD_INT 3
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: PUSH
10464: EMPTY
10465: LIST
10466: LIST
10467: PPUSH
10468: CALL_OW 69
10472: ST_TO_ADDR
// if not tmp then
10473: LD_VAR 0 2
10477: NOT
10478: IFFALSE 10482
// exit ;
10480: GO 10608
// side := 0 ;
10482: LD_ADDR_VAR 0 3
10486: PUSH
10487: LD_INT 0
10489: ST_TO_ADDR
// for i := 1 to 8 do
10490: LD_ADDR_VAR 0 1
10494: PUSH
10495: DOUBLE
10496: LD_INT 1
10498: DEC
10499: ST_TO_ADDR
10500: LD_INT 8
10502: PUSH
10503: FOR_TO
10504: IFFALSE 10552
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10506: LD_OWVAR 2
10510: PUSH
10511: LD_VAR 0 1
10515: NONEQUAL
10516: PUSH
10517: LD_OWVAR 2
10521: PPUSH
10522: LD_VAR 0 1
10526: PPUSH
10527: CALL_OW 81
10531: PUSH
10532: LD_INT 2
10534: EQUAL
10535: AND
10536: IFFALSE 10550
// begin side := i ;
10538: LD_ADDR_VAR 0 3
10542: PUSH
10543: LD_VAR 0 1
10547: ST_TO_ADDR
// break ;
10548: GO 10552
// end ;
10550: GO 10503
10552: POP
10553: POP
// if not side then
10554: LD_VAR 0 3
10558: NOT
10559: IFFALSE 10563
// exit ;
10561: GO 10608
// for i := 1 to tmp do
10563: LD_ADDR_VAR 0 1
10567: PUSH
10568: DOUBLE
10569: LD_INT 1
10571: DEC
10572: ST_TO_ADDR
10573: LD_VAR 0 2
10577: PUSH
10578: FOR_TO
10579: IFFALSE 10606
// if Prob ( 60 ) then
10581: LD_INT 60
10583: PPUSH
10584: CALL_OW 13
10588: IFFALSE 10604
// SetSide ( i , side ) ;
10590: LD_VAR 0 1
10594: PPUSH
10595: LD_VAR 0 3
10599: PPUSH
10600: CALL_OW 235
10604: GO 10578
10606: POP
10607: POP
// end ;
10608: PPOPN 3
10610: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10611: LD_EXP 58
10615: PUSH
10616: LD_EXP 71
10620: AND
10621: IFFALSE 10740
10623: GO 10625
10625: DISABLE
10626: LD_INT 0
10628: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10629: LD_ADDR_VAR 0 1
10633: PUSH
10634: LD_INT 22
10636: PUSH
10637: LD_OWVAR 2
10641: PUSH
10642: EMPTY
10643: LIST
10644: LIST
10645: PUSH
10646: LD_INT 21
10648: PUSH
10649: LD_INT 1
10651: PUSH
10652: EMPTY
10653: LIST
10654: LIST
10655: PUSH
10656: LD_INT 3
10658: PUSH
10659: LD_INT 23
10661: PUSH
10662: LD_INT 0
10664: PUSH
10665: EMPTY
10666: LIST
10667: LIST
10668: PUSH
10669: EMPTY
10670: LIST
10671: LIST
10672: PUSH
10673: EMPTY
10674: LIST
10675: LIST
10676: LIST
10677: PPUSH
10678: CALL_OW 69
10682: PUSH
10683: FOR_IN
10684: IFFALSE 10738
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10686: LD_VAR 0 1
10690: PPUSH
10691: CALL_OW 257
10695: PUSH
10696: LD_INT 1
10698: PUSH
10699: LD_INT 2
10701: PUSH
10702: LD_INT 3
10704: PUSH
10705: LD_INT 4
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: IN
10714: IFFALSE 10736
// SetClass ( un , rand ( 1 , 4 ) ) ;
10716: LD_VAR 0 1
10720: PPUSH
10721: LD_INT 1
10723: PPUSH
10724: LD_INT 4
10726: PPUSH
10727: CALL_OW 12
10731: PPUSH
10732: CALL_OW 336
10736: GO 10683
10738: POP
10739: POP
// end ;
10740: PPOPN 1
10742: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
10743: LD_EXP 58
10747: PUSH
10748: LD_EXP 70
10752: AND
10753: IFFALSE 10832
10755: GO 10757
10757: DISABLE
10758: LD_INT 0
10760: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10761: LD_ADDR_VAR 0 1
10765: PUSH
10766: LD_INT 22
10768: PUSH
10769: LD_OWVAR 2
10773: PUSH
10774: EMPTY
10775: LIST
10776: LIST
10777: PUSH
10778: LD_INT 21
10780: PUSH
10781: LD_INT 3
10783: PUSH
10784: EMPTY
10785: LIST
10786: LIST
10787: PUSH
10788: EMPTY
10789: LIST
10790: LIST
10791: PPUSH
10792: CALL_OW 69
10796: ST_TO_ADDR
// if not tmp then
10797: LD_VAR 0 1
10801: NOT
10802: IFFALSE 10806
// exit ;
10804: GO 10832
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
10806: LD_VAR 0 1
10810: PUSH
10811: LD_INT 1
10813: PPUSH
10814: LD_VAR 0 1
10818: PPUSH
10819: CALL_OW 12
10823: ARRAY
10824: PPUSH
10825: LD_INT 100
10827: PPUSH
10828: CALL_OW 234
// end ;
10832: PPOPN 1
10834: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
10835: LD_EXP 58
10839: PUSH
10840: LD_EXP 72
10844: AND
10845: IFFALSE 10943
10847: GO 10849
10849: DISABLE
10850: LD_INT 0
10852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
10853: LD_ADDR_VAR 0 1
10857: PUSH
10858: LD_INT 22
10860: PUSH
10861: LD_OWVAR 2
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: PUSH
10870: LD_INT 21
10872: PUSH
10873: LD_INT 1
10875: PUSH
10876: EMPTY
10877: LIST
10878: LIST
10879: PUSH
10880: EMPTY
10881: LIST
10882: LIST
10883: PPUSH
10884: CALL_OW 69
10888: ST_TO_ADDR
// if not tmp then
10889: LD_VAR 0 1
10893: NOT
10894: IFFALSE 10898
// exit ;
10896: GO 10943
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
10898: LD_VAR 0 1
10902: PUSH
10903: LD_INT 1
10905: PPUSH
10906: LD_VAR 0 1
10910: PPUSH
10911: CALL_OW 12
10915: ARRAY
10916: PPUSH
10917: LD_INT 1
10919: PPUSH
10920: LD_INT 4
10922: PPUSH
10923: CALL_OW 12
10927: PPUSH
10928: LD_INT 3000
10930: PPUSH
10931: LD_INT 9000
10933: PPUSH
10934: CALL_OW 12
10938: PPUSH
10939: CALL_OW 492
// end ;
10943: PPOPN 1
10945: END
// every 0 0$1 trigger StreamModeActive and sDepot do
10946: LD_EXP 58
10950: PUSH
10951: LD_EXP 73
10955: AND
10956: IFFALSE 10976
10958: GO 10960
10960: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
10961: LD_INT 1
10963: PPUSH
10964: LD_OWVAR 2
10968: PPUSH
10969: LD_INT 0
10971: PPUSH
10972: CALL_OW 324
10976: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
10977: LD_EXP 58
10981: PUSH
10982: LD_EXP 74
10986: AND
10987: IFFALSE 11070
10989: GO 10991
10991: DISABLE
10992: LD_INT 0
10994: PPUSH
10995: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
10996: LD_ADDR_VAR 0 2
11000: PUSH
11001: LD_INT 22
11003: PUSH
11004: LD_OWVAR 2
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: PUSH
11013: LD_INT 21
11015: PUSH
11016: LD_INT 3
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: PUSH
11023: EMPTY
11024: LIST
11025: LIST
11026: PPUSH
11027: CALL_OW 69
11031: ST_TO_ADDR
// if not tmp then
11032: LD_VAR 0 2
11036: NOT
11037: IFFALSE 11041
// exit ;
11039: GO 11070
// for i in tmp do
11041: LD_ADDR_VAR 0 1
11045: PUSH
11046: LD_VAR 0 2
11050: PUSH
11051: FOR_IN
11052: IFFALSE 11068
// SetBLevel ( i , 10 ) ;
11054: LD_VAR 0 1
11058: PPUSH
11059: LD_INT 10
11061: PPUSH
11062: CALL_OW 241
11066: GO 11051
11068: POP
11069: POP
// end ;
11070: PPOPN 2
11072: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11073: LD_EXP 58
11077: PUSH
11078: LD_EXP 75
11082: AND
11083: IFFALSE 11194
11085: GO 11087
11087: DISABLE
11088: LD_INT 0
11090: PPUSH
11091: PPUSH
11092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11093: LD_ADDR_VAR 0 3
11097: PUSH
11098: LD_INT 22
11100: PUSH
11101: LD_OWVAR 2
11105: PUSH
11106: EMPTY
11107: LIST
11108: LIST
11109: PUSH
11110: LD_INT 25
11112: PUSH
11113: LD_INT 1
11115: PUSH
11116: EMPTY
11117: LIST
11118: LIST
11119: PUSH
11120: EMPTY
11121: LIST
11122: LIST
11123: PPUSH
11124: CALL_OW 69
11128: ST_TO_ADDR
// if not tmp then
11129: LD_VAR 0 3
11133: NOT
11134: IFFALSE 11138
// exit ;
11136: GO 11194
// un := tmp [ rand ( 1 , tmp ) ] ;
11138: LD_ADDR_VAR 0 2
11142: PUSH
11143: LD_VAR 0 3
11147: PUSH
11148: LD_INT 1
11150: PPUSH
11151: LD_VAR 0 3
11155: PPUSH
11156: CALL_OW 12
11160: ARRAY
11161: ST_TO_ADDR
// if Crawls ( un ) then
11162: LD_VAR 0 2
11166: PPUSH
11167: CALL_OW 318
11171: IFFALSE 11182
// ComWalk ( un ) ;
11173: LD_VAR 0 2
11177: PPUSH
11178: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11182: LD_VAR 0 2
11186: PPUSH
11187: LD_INT 5
11189: PPUSH
11190: CALL_OW 336
// end ;
11194: PPOPN 3
11196: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11197: LD_EXP 58
11201: PUSH
11202: LD_EXP 76
11206: AND
11207: PUSH
11208: LD_OWVAR 67
11212: PUSH
11213: LD_INT 4
11215: LESS
11216: AND
11217: IFFALSE 11236
11219: GO 11221
11221: DISABLE
// begin Difficulty := Difficulty + 1 ;
11222: LD_ADDR_OWVAR 67
11226: PUSH
11227: LD_OWVAR 67
11231: PUSH
11232: LD_INT 1
11234: PLUS
11235: ST_TO_ADDR
// end ;
11236: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11237: LD_EXP 58
11241: PUSH
11242: LD_EXP 77
11246: AND
11247: IFFALSE 11350
11249: GO 11251
11251: DISABLE
11252: LD_INT 0
11254: PPUSH
// begin for i := 1 to 5 do
11255: LD_ADDR_VAR 0 1
11259: PUSH
11260: DOUBLE
11261: LD_INT 1
11263: DEC
11264: ST_TO_ADDR
11265: LD_INT 5
11267: PUSH
11268: FOR_TO
11269: IFFALSE 11348
// begin uc_nation := nation_nature ;
11271: LD_ADDR_OWVAR 21
11275: PUSH
11276: LD_INT 0
11278: ST_TO_ADDR
// uc_side := 0 ;
11279: LD_ADDR_OWVAR 20
11283: PUSH
11284: LD_INT 0
11286: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11287: LD_ADDR_OWVAR 29
11291: PUSH
11292: LD_INT 12
11294: PUSH
11295: LD_INT 12
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: ST_TO_ADDR
// hc_agressivity := 20 ;
11302: LD_ADDR_OWVAR 35
11306: PUSH
11307: LD_INT 20
11309: ST_TO_ADDR
// hc_class := class_tiger ;
11310: LD_ADDR_OWVAR 28
11314: PUSH
11315: LD_INT 14
11317: ST_TO_ADDR
// hc_gallery :=  ;
11318: LD_ADDR_OWVAR 33
11322: PUSH
11323: LD_STRING 
11325: ST_TO_ADDR
// hc_name :=  ;
11326: LD_ADDR_OWVAR 26
11330: PUSH
11331: LD_STRING 
11333: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11334: CALL_OW 44
11338: PPUSH
11339: LD_INT 0
11341: PPUSH
11342: CALL_OW 51
// end ;
11346: GO 11268
11348: POP
11349: POP
// end ;
11350: PPOPN 1
11352: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11353: LD_EXP 58
11357: PUSH
11358: LD_EXP 78
11362: AND
11363: IFFALSE 11372
11365: GO 11367
11367: DISABLE
// StreamSibBomb ;
11368: CALL 11373 0 0
11372: END
// export function StreamSibBomb ; var i , x , y ; begin
11373: LD_INT 0
11375: PPUSH
11376: PPUSH
11377: PPUSH
11378: PPUSH
// result := false ;
11379: LD_ADDR_VAR 0 1
11383: PUSH
11384: LD_INT 0
11386: ST_TO_ADDR
// for i := 1 to 16 do
11387: LD_ADDR_VAR 0 2
11391: PUSH
11392: DOUBLE
11393: LD_INT 1
11395: DEC
11396: ST_TO_ADDR
11397: LD_INT 16
11399: PUSH
11400: FOR_TO
11401: IFFALSE 11600
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11403: LD_ADDR_VAR 0 3
11407: PUSH
11408: LD_INT 10
11410: PUSH
11411: LD_INT 20
11413: PUSH
11414: LD_INT 30
11416: PUSH
11417: LD_INT 40
11419: PUSH
11420: LD_INT 50
11422: PUSH
11423: LD_INT 60
11425: PUSH
11426: LD_INT 70
11428: PUSH
11429: LD_INT 80
11431: PUSH
11432: LD_INT 90
11434: PUSH
11435: LD_INT 100
11437: PUSH
11438: LD_INT 110
11440: PUSH
11441: LD_INT 120
11443: PUSH
11444: LD_INT 130
11446: PUSH
11447: LD_INT 140
11449: PUSH
11450: LD_INT 150
11452: PUSH
11453: EMPTY
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: PUSH
11470: LD_INT 1
11472: PPUSH
11473: LD_INT 15
11475: PPUSH
11476: CALL_OW 12
11480: ARRAY
11481: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11482: LD_ADDR_VAR 0 4
11486: PUSH
11487: LD_INT 10
11489: PUSH
11490: LD_INT 20
11492: PUSH
11493: LD_INT 30
11495: PUSH
11496: LD_INT 40
11498: PUSH
11499: LD_INT 50
11501: PUSH
11502: LD_INT 60
11504: PUSH
11505: LD_INT 70
11507: PUSH
11508: LD_INT 80
11510: PUSH
11511: LD_INT 90
11513: PUSH
11514: LD_INT 100
11516: PUSH
11517: LD_INT 110
11519: PUSH
11520: LD_INT 120
11522: PUSH
11523: LD_INT 130
11525: PUSH
11526: LD_INT 140
11528: PUSH
11529: LD_INT 150
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: PUSH
11549: LD_INT 1
11551: PPUSH
11552: LD_INT 15
11554: PPUSH
11555: CALL_OW 12
11559: ARRAY
11560: ST_TO_ADDR
// if ValidHex ( x , y ) then
11561: LD_VAR 0 3
11565: PPUSH
11566: LD_VAR 0 4
11570: PPUSH
11571: CALL_OW 488
11575: IFFALSE 11598
// begin result := [ x , y ] ;
11577: LD_ADDR_VAR 0 1
11581: PUSH
11582: LD_VAR 0 3
11586: PUSH
11587: LD_VAR 0 4
11591: PUSH
11592: EMPTY
11593: LIST
11594: LIST
11595: ST_TO_ADDR
// break ;
11596: GO 11600
// end ; end ;
11598: GO 11400
11600: POP
11601: POP
// if result then
11602: LD_VAR 0 1
11606: IFFALSE 11666
// begin ToLua ( playSibBomb() ) ;
11608: LD_STRING playSibBomb()
11610: PPUSH
11611: CALL_OW 559
// wait ( 0 0$14 ) ;
11615: LD_INT 490
11617: PPUSH
11618: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11622: LD_VAR 0 1
11626: PUSH
11627: LD_INT 1
11629: ARRAY
11630: PPUSH
11631: LD_VAR 0 1
11635: PUSH
11636: LD_INT 2
11638: ARRAY
11639: PPUSH
11640: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11644: LD_VAR 0 1
11648: PUSH
11649: LD_INT 1
11651: ARRAY
11652: PPUSH
11653: LD_VAR 0 1
11657: PUSH
11658: LD_INT 2
11660: ARRAY
11661: PPUSH
11662: CALL_OW 429
// end ; end ;
11666: LD_VAR 0 1
11670: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11671: LD_EXP 58
11675: PUSH
11676: LD_EXP 80
11680: AND
11681: IFFALSE 11693
11683: GO 11685
11685: DISABLE
// YouLost (  ) ;
11686: LD_STRING 
11688: PPUSH
11689: CALL_OW 104
11693: END
// every 0 0$1 trigger StreamModeActive and sFog do
11694: LD_EXP 58
11698: PUSH
11699: LD_EXP 79
11703: AND
11704: IFFALSE 11718
11706: GO 11708
11708: DISABLE
// FogOff ( your_side ) ;
11709: LD_OWVAR 2
11713: PPUSH
11714: CALL_OW 344
11718: END
// every 0 0$1 trigger StreamModeActive and sSun do
11719: LD_EXP 58
11723: PUSH
11724: LD_EXP 81
11728: AND
11729: IFFALSE 11757
11731: GO 11733
11733: DISABLE
// begin solar_recharge_percent := 0 ;
11734: LD_ADDR_OWVAR 79
11738: PUSH
11739: LD_INT 0
11741: ST_TO_ADDR
// wait ( 5 5$00 ) ;
11742: LD_INT 10500
11744: PPUSH
11745: CALL_OW 67
// solar_recharge_percent := 100 ;
11749: LD_ADDR_OWVAR 79
11753: PUSH
11754: LD_INT 100
11756: ST_TO_ADDR
// end ;
11757: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
11758: LD_EXP 58
11762: PUSH
11763: LD_EXP 82
11767: AND
11768: IFFALSE 12007
11770: GO 11772
11772: DISABLE
11773: LD_INT 0
11775: PPUSH
11776: PPUSH
11777: PPUSH
// begin tmp := [ ] ;
11778: LD_ADDR_VAR 0 3
11782: PUSH
11783: EMPTY
11784: ST_TO_ADDR
// for i := 1 to 6 do
11785: LD_ADDR_VAR 0 1
11789: PUSH
11790: DOUBLE
11791: LD_INT 1
11793: DEC
11794: ST_TO_ADDR
11795: LD_INT 6
11797: PUSH
11798: FOR_TO
11799: IFFALSE 11904
// begin uc_nation := nation_nature ;
11801: LD_ADDR_OWVAR 21
11805: PUSH
11806: LD_INT 0
11808: ST_TO_ADDR
// uc_side := 0 ;
11809: LD_ADDR_OWVAR 20
11813: PUSH
11814: LD_INT 0
11816: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11817: LD_ADDR_OWVAR 29
11821: PUSH
11822: LD_INT 12
11824: PUSH
11825: LD_INT 12
11827: PUSH
11828: EMPTY
11829: LIST
11830: LIST
11831: ST_TO_ADDR
// hc_agressivity := 20 ;
11832: LD_ADDR_OWVAR 35
11836: PUSH
11837: LD_INT 20
11839: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
11840: LD_ADDR_OWVAR 28
11844: PUSH
11845: LD_INT 17
11847: ST_TO_ADDR
// hc_gallery :=  ;
11848: LD_ADDR_OWVAR 33
11852: PUSH
11853: LD_STRING 
11855: ST_TO_ADDR
// hc_name :=  ;
11856: LD_ADDR_OWVAR 26
11860: PUSH
11861: LD_STRING 
11863: ST_TO_ADDR
// un := CreateHuman ;
11864: LD_ADDR_VAR 0 2
11868: PUSH
11869: CALL_OW 44
11873: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
11874: LD_VAR 0 2
11878: PPUSH
11879: LD_INT 1
11881: PPUSH
11882: CALL_OW 51
// tmp := tmp ^ un ;
11886: LD_ADDR_VAR 0 3
11890: PUSH
11891: LD_VAR 0 3
11895: PUSH
11896: LD_VAR 0 2
11900: ADD
11901: ST_TO_ADDR
// end ;
11902: GO 11798
11904: POP
11905: POP
// repeat wait ( 0 0$1 ) ;
11906: LD_INT 35
11908: PPUSH
11909: CALL_OW 67
// for un in tmp do
11913: LD_ADDR_VAR 0 2
11917: PUSH
11918: LD_VAR 0 3
11922: PUSH
11923: FOR_IN
11924: IFFALSE 11998
// begin if IsDead ( un ) then
11926: LD_VAR 0 2
11930: PPUSH
11931: CALL_OW 301
11935: IFFALSE 11955
// begin tmp := tmp diff un ;
11937: LD_ADDR_VAR 0 3
11941: PUSH
11942: LD_VAR 0 3
11946: PUSH
11947: LD_VAR 0 2
11951: DIFF
11952: ST_TO_ADDR
// continue ;
11953: GO 11923
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
11955: LD_VAR 0 2
11959: PPUSH
11960: LD_INT 3
11962: PUSH
11963: LD_INT 22
11965: PUSH
11966: LD_INT 0
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: PUSH
11973: EMPTY
11974: LIST
11975: LIST
11976: PPUSH
11977: CALL_OW 69
11981: PPUSH
11982: LD_VAR 0 2
11986: PPUSH
11987: CALL_OW 74
11991: PPUSH
11992: CALL_OW 115
// end ;
11996: GO 11923
11998: POP
11999: POP
// until not tmp ;
12000: LD_VAR 0 3
12004: NOT
12005: IFFALSE 11906
// end ;
12007: PPOPN 3
12009: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12010: LD_EXP 58
12014: PUSH
12015: LD_EXP 83
12019: AND
12020: IFFALSE 12074
12022: GO 12024
12024: DISABLE
// begin ToLua ( displayTroll(); ) ;
12025: LD_STRING displayTroll();
12027: PPUSH
12028: CALL_OW 559
// wait ( 3 3$00 ) ;
12032: LD_INT 6300
12034: PPUSH
12035: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12039: LD_STRING hideTroll();
12041: PPUSH
12042: CALL_OW 559
// wait ( 1 1$00 ) ;
12046: LD_INT 2100
12048: PPUSH
12049: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12053: LD_STRING displayTroll();
12055: PPUSH
12056: CALL_OW 559
// wait ( 1 1$00 ) ;
12060: LD_INT 2100
12062: PPUSH
12063: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12067: LD_STRING hideTroll();
12069: PPUSH
12070: CALL_OW 559
// end ;
12074: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12075: LD_EXP 58
12079: PUSH
12080: LD_EXP 84
12084: AND
12085: IFFALSE 12148
12087: GO 12089
12089: DISABLE
12090: LD_INT 0
12092: PPUSH
// begin p := 0 ;
12093: LD_ADDR_VAR 0 1
12097: PUSH
12098: LD_INT 0
12100: ST_TO_ADDR
// repeat game_speed := 1 ;
12101: LD_ADDR_OWVAR 65
12105: PUSH
12106: LD_INT 1
12108: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12109: LD_INT 35
12111: PPUSH
12112: CALL_OW 67
// p := p + 1 ;
12116: LD_ADDR_VAR 0 1
12120: PUSH
12121: LD_VAR 0 1
12125: PUSH
12126: LD_INT 1
12128: PLUS
12129: ST_TO_ADDR
// until p >= 60 ;
12130: LD_VAR 0 1
12134: PUSH
12135: LD_INT 60
12137: GREATEREQUAL
12138: IFFALSE 12101
// game_speed := 4 ;
12140: LD_ADDR_OWVAR 65
12144: PUSH
12145: LD_INT 4
12147: ST_TO_ADDR
// end ;
12148: PPOPN 1
12150: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12151: LD_EXP 58
12155: PUSH
12156: LD_EXP 85
12160: AND
12161: IFFALSE 12307
12163: GO 12165
12165: DISABLE
12166: LD_INT 0
12168: PPUSH
12169: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12170: LD_ADDR_VAR 0 1
12174: PUSH
12175: LD_INT 22
12177: PUSH
12178: LD_OWVAR 2
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: PUSH
12187: LD_INT 2
12189: PUSH
12190: LD_INT 30
12192: PUSH
12193: LD_INT 0
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: PUSH
12200: LD_INT 30
12202: PUSH
12203: LD_INT 1
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: LIST
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: PPUSH
12219: CALL_OW 69
12223: ST_TO_ADDR
// if not depot then
12224: LD_VAR 0 1
12228: NOT
12229: IFFALSE 12233
// exit ;
12231: GO 12307
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12233: LD_ADDR_VAR 0 2
12237: PUSH
12238: LD_VAR 0 1
12242: PUSH
12243: LD_INT 1
12245: PPUSH
12246: LD_VAR 0 1
12250: PPUSH
12251: CALL_OW 12
12255: ARRAY
12256: PPUSH
12257: CALL_OW 274
12261: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12262: LD_VAR 0 2
12266: PPUSH
12267: LD_INT 1
12269: PPUSH
12270: LD_INT 0
12272: PPUSH
12273: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12277: LD_VAR 0 2
12281: PPUSH
12282: LD_INT 2
12284: PPUSH
12285: LD_INT 0
12287: PPUSH
12288: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12292: LD_VAR 0 2
12296: PPUSH
12297: LD_INT 3
12299: PPUSH
12300: LD_INT 0
12302: PPUSH
12303: CALL_OW 277
// end ;
12307: PPOPN 2
12309: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12310: LD_EXP 58
12314: PUSH
12315: LD_EXP 86
12319: AND
12320: IFFALSE 12417
12322: GO 12324
12324: DISABLE
12325: LD_INT 0
12327: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12328: LD_ADDR_VAR 0 1
12332: PUSH
12333: LD_INT 22
12335: PUSH
12336: LD_OWVAR 2
12340: PUSH
12341: EMPTY
12342: LIST
12343: LIST
12344: PUSH
12345: LD_INT 21
12347: PUSH
12348: LD_INT 1
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: PUSH
12355: LD_INT 3
12357: PUSH
12358: LD_INT 23
12360: PUSH
12361: LD_INT 0
12363: PUSH
12364: EMPTY
12365: LIST
12366: LIST
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: PUSH
12372: EMPTY
12373: LIST
12374: LIST
12375: LIST
12376: PPUSH
12377: CALL_OW 69
12381: ST_TO_ADDR
// if not tmp then
12382: LD_VAR 0 1
12386: NOT
12387: IFFALSE 12391
// exit ;
12389: GO 12417
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12391: LD_VAR 0 1
12395: PUSH
12396: LD_INT 1
12398: PPUSH
12399: LD_VAR 0 1
12403: PPUSH
12404: CALL_OW 12
12408: ARRAY
12409: PPUSH
12410: LD_INT 200
12412: PPUSH
12413: CALL_OW 234
// end ;
12417: PPOPN 1
12419: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12420: LD_EXP 58
12424: PUSH
12425: LD_EXP 87
12429: AND
12430: IFFALSE 12509
12432: GO 12434
12434: DISABLE
12435: LD_INT 0
12437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12438: LD_ADDR_VAR 0 1
12442: PUSH
12443: LD_INT 22
12445: PUSH
12446: LD_OWVAR 2
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: PUSH
12455: LD_INT 21
12457: PUSH
12458: LD_INT 2
12460: PUSH
12461: EMPTY
12462: LIST
12463: LIST
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: PPUSH
12469: CALL_OW 69
12473: ST_TO_ADDR
// if not tmp then
12474: LD_VAR 0 1
12478: NOT
12479: IFFALSE 12483
// exit ;
12481: GO 12509
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12483: LD_VAR 0 1
12487: PUSH
12488: LD_INT 1
12490: PPUSH
12491: LD_VAR 0 1
12495: PPUSH
12496: CALL_OW 12
12500: ARRAY
12501: PPUSH
12502: LD_INT 60
12504: PPUSH
12505: CALL_OW 234
// end ;
12509: PPOPN 1
12511: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12512: LD_EXP 58
12516: PUSH
12517: LD_EXP 88
12521: AND
12522: IFFALSE 12621
12524: GO 12526
12526: DISABLE
12527: LD_INT 0
12529: PPUSH
12530: PPUSH
// begin enable ;
12531: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12532: LD_ADDR_VAR 0 1
12536: PUSH
12537: LD_INT 22
12539: PUSH
12540: LD_OWVAR 2
12544: PUSH
12545: EMPTY
12546: LIST
12547: LIST
12548: PUSH
12549: LD_INT 61
12551: PUSH
12552: EMPTY
12553: LIST
12554: PUSH
12555: LD_INT 33
12557: PUSH
12558: LD_INT 2
12560: PUSH
12561: EMPTY
12562: LIST
12563: LIST
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: LIST
12569: PPUSH
12570: CALL_OW 69
12574: ST_TO_ADDR
// if not tmp then
12575: LD_VAR 0 1
12579: NOT
12580: IFFALSE 12584
// exit ;
12582: GO 12621
// for i in tmp do
12584: LD_ADDR_VAR 0 2
12588: PUSH
12589: LD_VAR 0 1
12593: PUSH
12594: FOR_IN
12595: IFFALSE 12619
// if IsControledBy ( i ) then
12597: LD_VAR 0 2
12601: PPUSH
12602: CALL_OW 312
12606: IFFALSE 12617
// ComUnlink ( i ) ;
12608: LD_VAR 0 2
12612: PPUSH
12613: CALL_OW 136
12617: GO 12594
12619: POP
12620: POP
// end ;
12621: PPOPN 2
12623: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12624: LD_EXP 58
12628: PUSH
12629: LD_EXP 89
12633: AND
12634: IFFALSE 12774
12636: GO 12638
12638: DISABLE
12639: LD_INT 0
12641: PPUSH
12642: PPUSH
// begin ToLua ( displayPowell(); ) ;
12643: LD_STRING displayPowell();
12645: PPUSH
12646: CALL_OW 559
// uc_side := 0 ;
12650: LD_ADDR_OWVAR 20
12654: PUSH
12655: LD_INT 0
12657: ST_TO_ADDR
// uc_nation := 2 ;
12658: LD_ADDR_OWVAR 21
12662: PUSH
12663: LD_INT 2
12665: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12666: LD_ADDR_OWVAR 37
12670: PUSH
12671: LD_INT 14
12673: ST_TO_ADDR
// vc_engine := engine_siberite ;
12674: LD_ADDR_OWVAR 39
12678: PUSH
12679: LD_INT 3
12681: ST_TO_ADDR
// vc_control := control_apeman ;
12682: LD_ADDR_OWVAR 38
12686: PUSH
12687: LD_INT 5
12689: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12690: LD_ADDR_OWVAR 40
12694: PUSH
12695: LD_INT 29
12697: ST_TO_ADDR
// un := CreateVehicle ;
12698: LD_ADDR_VAR 0 2
12702: PUSH
12703: CALL_OW 45
12707: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12708: LD_VAR 0 2
12712: PPUSH
12713: LD_INT 1
12715: PPUSH
12716: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12720: LD_INT 35
12722: PPUSH
12723: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12727: LD_VAR 0 2
12731: PPUSH
12732: LD_INT 22
12734: PUSH
12735: LD_OWVAR 2
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PPUSH
12744: CALL_OW 69
12748: PPUSH
12749: LD_VAR 0 2
12753: PPUSH
12754: CALL_OW 74
12758: PPUSH
12759: CALL_OW 115
// until IsDead ( un ) ;
12763: LD_VAR 0 2
12767: PPUSH
12768: CALL_OW 301
12772: IFFALSE 12720
// end ;
12774: PPOPN 2
12776: END
// every 0 0$1 trigger StreamModeActive and sStu do
12777: LD_EXP 58
12781: PUSH
12782: LD_EXP 97
12786: AND
12787: IFFALSE 12803
12789: GO 12791
12791: DISABLE
// begin ToLua ( displayStucuk(); ) ;
12792: LD_STRING displayStucuk();
12794: PPUSH
12795: CALL_OW 559
// ResetFog ;
12799: CALL_OW 335
// end ;
12803: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
12804: LD_EXP 58
12808: PUSH
12809: LD_EXP 90
12813: AND
12814: IFFALSE 12955
12816: GO 12818
12818: DISABLE
12819: LD_INT 0
12821: PPUSH
12822: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
12823: LD_ADDR_VAR 0 2
12827: PUSH
12828: LD_INT 22
12830: PUSH
12831: LD_OWVAR 2
12835: PUSH
12836: EMPTY
12837: LIST
12838: LIST
12839: PUSH
12840: LD_INT 21
12842: PUSH
12843: LD_INT 1
12845: PUSH
12846: EMPTY
12847: LIST
12848: LIST
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PPUSH
12854: CALL_OW 69
12858: ST_TO_ADDR
// if not tmp then
12859: LD_VAR 0 2
12863: NOT
12864: IFFALSE 12868
// exit ;
12866: GO 12955
// un := tmp [ rand ( 1 , tmp ) ] ;
12868: LD_ADDR_VAR 0 1
12872: PUSH
12873: LD_VAR 0 2
12877: PUSH
12878: LD_INT 1
12880: PPUSH
12881: LD_VAR 0 2
12885: PPUSH
12886: CALL_OW 12
12890: ARRAY
12891: ST_TO_ADDR
// SetSide ( un , 0 ) ;
12892: LD_VAR 0 1
12896: PPUSH
12897: LD_INT 0
12899: PPUSH
12900: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
12904: LD_VAR 0 1
12908: PPUSH
12909: LD_OWVAR 3
12913: PUSH
12914: LD_VAR 0 1
12918: DIFF
12919: PPUSH
12920: LD_VAR 0 1
12924: PPUSH
12925: CALL_OW 74
12929: PPUSH
12930: CALL_OW 115
// wait ( 0 0$20 ) ;
12934: LD_INT 700
12936: PPUSH
12937: CALL_OW 67
// SetSide ( un , your_side ) ;
12941: LD_VAR 0 1
12945: PPUSH
12946: LD_OWVAR 2
12950: PPUSH
12951: CALL_OW 235
// end ;
12955: PPOPN 2
12957: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
12958: LD_EXP 58
12962: PUSH
12963: LD_EXP 91
12967: AND
12968: IFFALSE 13074
12970: GO 12972
12972: DISABLE
12973: LD_INT 0
12975: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12976: LD_ADDR_VAR 0 1
12980: PUSH
12981: LD_INT 22
12983: PUSH
12984: LD_OWVAR 2
12988: PUSH
12989: EMPTY
12990: LIST
12991: LIST
12992: PUSH
12993: LD_INT 2
12995: PUSH
12996: LD_INT 30
12998: PUSH
12999: LD_INT 0
13001: PUSH
13002: EMPTY
13003: LIST
13004: LIST
13005: PUSH
13006: LD_INT 30
13008: PUSH
13009: LD_INT 1
13011: PUSH
13012: EMPTY
13013: LIST
13014: LIST
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: LIST
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PPUSH
13025: CALL_OW 69
13029: ST_TO_ADDR
// if not depot then
13030: LD_VAR 0 1
13034: NOT
13035: IFFALSE 13039
// exit ;
13037: GO 13074
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13039: LD_VAR 0 1
13043: PUSH
13044: LD_INT 1
13046: ARRAY
13047: PPUSH
13048: CALL_OW 250
13052: PPUSH
13053: LD_VAR 0 1
13057: PUSH
13058: LD_INT 1
13060: ARRAY
13061: PPUSH
13062: CALL_OW 251
13066: PPUSH
13067: LD_INT 70
13069: PPUSH
13070: CALL_OW 495
// end ;
13074: PPOPN 1
13076: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13077: LD_EXP 58
13081: PUSH
13082: LD_EXP 92
13086: AND
13087: IFFALSE 13298
13089: GO 13091
13091: DISABLE
13092: LD_INT 0
13094: PPUSH
13095: PPUSH
13096: PPUSH
13097: PPUSH
13098: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13099: LD_ADDR_VAR 0 5
13103: PUSH
13104: LD_INT 22
13106: PUSH
13107: LD_OWVAR 2
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PUSH
13116: LD_INT 21
13118: PUSH
13119: LD_INT 1
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PPUSH
13130: CALL_OW 69
13134: ST_TO_ADDR
// if not tmp then
13135: LD_VAR 0 5
13139: NOT
13140: IFFALSE 13144
// exit ;
13142: GO 13298
// for i in tmp do
13144: LD_ADDR_VAR 0 1
13148: PUSH
13149: LD_VAR 0 5
13153: PUSH
13154: FOR_IN
13155: IFFALSE 13296
// begin d := rand ( 0 , 5 ) ;
13157: LD_ADDR_VAR 0 4
13161: PUSH
13162: LD_INT 0
13164: PPUSH
13165: LD_INT 5
13167: PPUSH
13168: CALL_OW 12
13172: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13173: LD_ADDR_VAR 0 2
13177: PUSH
13178: LD_VAR 0 1
13182: PPUSH
13183: CALL_OW 250
13187: PPUSH
13188: LD_VAR 0 4
13192: PPUSH
13193: LD_INT 3
13195: PPUSH
13196: LD_INT 12
13198: PPUSH
13199: CALL_OW 12
13203: PPUSH
13204: CALL_OW 272
13208: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13209: LD_ADDR_VAR 0 3
13213: PUSH
13214: LD_VAR 0 1
13218: PPUSH
13219: CALL_OW 251
13223: PPUSH
13224: LD_VAR 0 4
13228: PPUSH
13229: LD_INT 3
13231: PPUSH
13232: LD_INT 12
13234: PPUSH
13235: CALL_OW 12
13239: PPUSH
13240: CALL_OW 273
13244: ST_TO_ADDR
// if ValidHex ( x , y ) then
13245: LD_VAR 0 2
13249: PPUSH
13250: LD_VAR 0 3
13254: PPUSH
13255: CALL_OW 488
13259: IFFALSE 13294
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13261: LD_VAR 0 1
13265: PPUSH
13266: LD_VAR 0 2
13270: PPUSH
13271: LD_VAR 0 3
13275: PPUSH
13276: LD_INT 3
13278: PPUSH
13279: LD_INT 6
13281: PPUSH
13282: CALL_OW 12
13286: PPUSH
13287: LD_INT 1
13289: PPUSH
13290: CALL_OW 483
// end ;
13294: GO 13154
13296: POP
13297: POP
// end ;
13298: PPOPN 5
13300: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13301: LD_EXP 58
13305: PUSH
13306: LD_EXP 93
13310: AND
13311: IFFALSE 13405
13313: GO 13315
13315: DISABLE
13316: LD_INT 0
13318: PPUSH
13319: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13320: LD_ADDR_VAR 0 2
13324: PUSH
13325: LD_INT 22
13327: PUSH
13328: LD_OWVAR 2
13332: PUSH
13333: EMPTY
13334: LIST
13335: LIST
13336: PUSH
13337: LD_INT 32
13339: PUSH
13340: LD_INT 1
13342: PUSH
13343: EMPTY
13344: LIST
13345: LIST
13346: PUSH
13347: LD_INT 21
13349: PUSH
13350: LD_INT 2
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: LIST
13361: PPUSH
13362: CALL_OW 69
13366: ST_TO_ADDR
// if not tmp then
13367: LD_VAR 0 2
13371: NOT
13372: IFFALSE 13376
// exit ;
13374: GO 13405
// for i in tmp do
13376: LD_ADDR_VAR 0 1
13380: PUSH
13381: LD_VAR 0 2
13385: PUSH
13386: FOR_IN
13387: IFFALSE 13403
// SetFuel ( i , 0 ) ;
13389: LD_VAR 0 1
13393: PPUSH
13394: LD_INT 0
13396: PPUSH
13397: CALL_OW 240
13401: GO 13386
13403: POP
13404: POP
// end ;
13405: PPOPN 2
13407: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13408: LD_EXP 58
13412: PUSH
13413: LD_EXP 94
13417: AND
13418: IFFALSE 13484
13420: GO 13422
13422: DISABLE
13423: LD_INT 0
13425: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13426: LD_ADDR_VAR 0 1
13430: PUSH
13431: LD_INT 22
13433: PUSH
13434: LD_OWVAR 2
13438: PUSH
13439: EMPTY
13440: LIST
13441: LIST
13442: PUSH
13443: LD_INT 30
13445: PUSH
13446: LD_INT 29
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: PPUSH
13457: CALL_OW 69
13461: ST_TO_ADDR
// if not tmp then
13462: LD_VAR 0 1
13466: NOT
13467: IFFALSE 13471
// exit ;
13469: GO 13484
// DestroyUnit ( tmp [ 1 ] ) ;
13471: LD_VAR 0 1
13475: PUSH
13476: LD_INT 1
13478: ARRAY
13479: PPUSH
13480: CALL_OW 65
// end ;
13484: PPOPN 1
13486: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13487: LD_EXP 58
13491: PUSH
13492: LD_EXP 96
13496: AND
13497: IFFALSE 13626
13499: GO 13501
13501: DISABLE
13502: LD_INT 0
13504: PPUSH
// begin uc_side := 0 ;
13505: LD_ADDR_OWVAR 20
13509: PUSH
13510: LD_INT 0
13512: ST_TO_ADDR
// uc_nation := nation_arabian ;
13513: LD_ADDR_OWVAR 21
13517: PUSH
13518: LD_INT 2
13520: ST_TO_ADDR
// hc_gallery :=  ;
13521: LD_ADDR_OWVAR 33
13525: PUSH
13526: LD_STRING 
13528: ST_TO_ADDR
// hc_name :=  ;
13529: LD_ADDR_OWVAR 26
13533: PUSH
13534: LD_STRING 
13536: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13537: LD_INT 1
13539: PPUSH
13540: LD_INT 11
13542: PPUSH
13543: LD_INT 10
13545: PPUSH
13546: CALL_OW 380
// un := CreateHuman ;
13550: LD_ADDR_VAR 0 1
13554: PUSH
13555: CALL_OW 44
13559: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13560: LD_VAR 0 1
13564: PPUSH
13565: LD_INT 1
13567: PPUSH
13568: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13572: LD_INT 35
13574: PPUSH
13575: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13579: LD_VAR 0 1
13583: PPUSH
13584: LD_INT 22
13586: PUSH
13587: LD_OWVAR 2
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PPUSH
13596: CALL_OW 69
13600: PPUSH
13601: LD_VAR 0 1
13605: PPUSH
13606: CALL_OW 74
13610: PPUSH
13611: CALL_OW 115
// until IsDead ( un ) ;
13615: LD_VAR 0 1
13619: PPUSH
13620: CALL_OW 301
13624: IFFALSE 13572
// end ;
13626: PPOPN 1
13628: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13629: LD_EXP 58
13633: PUSH
13634: LD_EXP 98
13638: AND
13639: IFFALSE 13651
13641: GO 13643
13643: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13644: LD_STRING earthquake(getX(game), 0, 32)
13646: PPUSH
13647: CALL_OW 559
13651: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13652: LD_EXP 58
13656: PUSH
13657: LD_EXP 99
13661: AND
13662: IFFALSE 13753
13664: GO 13666
13666: DISABLE
13667: LD_INT 0
13669: PPUSH
// begin enable ;
13670: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13671: LD_ADDR_VAR 0 1
13675: PUSH
13676: LD_INT 22
13678: PUSH
13679: LD_OWVAR 2
13683: PUSH
13684: EMPTY
13685: LIST
13686: LIST
13687: PUSH
13688: LD_INT 21
13690: PUSH
13691: LD_INT 2
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: LD_INT 33
13700: PUSH
13701: LD_INT 3
13703: PUSH
13704: EMPTY
13705: LIST
13706: LIST
13707: PUSH
13708: EMPTY
13709: LIST
13710: LIST
13711: LIST
13712: PPUSH
13713: CALL_OW 69
13717: ST_TO_ADDR
// if not tmp then
13718: LD_VAR 0 1
13722: NOT
13723: IFFALSE 13727
// exit ;
13725: GO 13753
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13727: LD_VAR 0 1
13731: PUSH
13732: LD_INT 1
13734: PPUSH
13735: LD_VAR 0 1
13739: PPUSH
13740: CALL_OW 12
13744: ARRAY
13745: PPUSH
13746: LD_INT 1
13748: PPUSH
13749: CALL_OW 234
// end ;
13753: PPOPN 1
13755: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
13756: LD_EXP 58
13760: PUSH
13761: LD_EXP 100
13765: AND
13766: IFFALSE 13907
13768: GO 13770
13770: DISABLE
13771: LD_INT 0
13773: PPUSH
13774: PPUSH
13775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13776: LD_ADDR_VAR 0 3
13780: PUSH
13781: LD_INT 22
13783: PUSH
13784: LD_OWVAR 2
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: LD_INT 25
13795: PUSH
13796: LD_INT 1
13798: PUSH
13799: EMPTY
13800: LIST
13801: LIST
13802: PUSH
13803: EMPTY
13804: LIST
13805: LIST
13806: PPUSH
13807: CALL_OW 69
13811: ST_TO_ADDR
// if not tmp then
13812: LD_VAR 0 3
13816: NOT
13817: IFFALSE 13821
// exit ;
13819: GO 13907
// un := tmp [ rand ( 1 , tmp ) ] ;
13821: LD_ADDR_VAR 0 2
13825: PUSH
13826: LD_VAR 0 3
13830: PUSH
13831: LD_INT 1
13833: PPUSH
13834: LD_VAR 0 3
13838: PPUSH
13839: CALL_OW 12
13843: ARRAY
13844: ST_TO_ADDR
// if Crawls ( un ) then
13845: LD_VAR 0 2
13849: PPUSH
13850: CALL_OW 318
13854: IFFALSE 13865
// ComWalk ( un ) ;
13856: LD_VAR 0 2
13860: PPUSH
13861: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
13865: LD_VAR 0 2
13869: PPUSH
13870: LD_INT 9
13872: PPUSH
13873: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
13877: LD_INT 28
13879: PPUSH
13880: LD_OWVAR 2
13884: PPUSH
13885: LD_INT 2
13887: PPUSH
13888: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
13892: LD_INT 29
13894: PPUSH
13895: LD_OWVAR 2
13899: PPUSH
13900: LD_INT 2
13902: PPUSH
13903: CALL_OW 322
// end ;
13907: PPOPN 3
13909: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
13910: LD_EXP 58
13914: PUSH
13915: LD_EXP 101
13919: AND
13920: IFFALSE 14031
13922: GO 13924
13924: DISABLE
13925: LD_INT 0
13927: PPUSH
13928: PPUSH
13929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13930: LD_ADDR_VAR 0 3
13934: PUSH
13935: LD_INT 22
13937: PUSH
13938: LD_OWVAR 2
13942: PUSH
13943: EMPTY
13944: LIST
13945: LIST
13946: PUSH
13947: LD_INT 25
13949: PUSH
13950: LD_INT 1
13952: PUSH
13953: EMPTY
13954: LIST
13955: LIST
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: PPUSH
13961: CALL_OW 69
13965: ST_TO_ADDR
// if not tmp then
13966: LD_VAR 0 3
13970: NOT
13971: IFFALSE 13975
// exit ;
13973: GO 14031
// un := tmp [ rand ( 1 , tmp ) ] ;
13975: LD_ADDR_VAR 0 2
13979: PUSH
13980: LD_VAR 0 3
13984: PUSH
13985: LD_INT 1
13987: PPUSH
13988: LD_VAR 0 3
13992: PPUSH
13993: CALL_OW 12
13997: ARRAY
13998: ST_TO_ADDR
// if Crawls ( un ) then
13999: LD_VAR 0 2
14003: PPUSH
14004: CALL_OW 318
14008: IFFALSE 14019
// ComWalk ( un ) ;
14010: LD_VAR 0 2
14014: PPUSH
14015: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14019: LD_VAR 0 2
14023: PPUSH
14024: LD_INT 8
14026: PPUSH
14027: CALL_OW 336
// end ;
14031: PPOPN 3
14033: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14034: LD_EXP 58
14038: PUSH
14039: LD_EXP 102
14043: AND
14044: IFFALSE 14188
14046: GO 14048
14048: DISABLE
14049: LD_INT 0
14051: PPUSH
14052: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14053: LD_ADDR_VAR 0 2
14057: PUSH
14058: LD_INT 22
14060: PUSH
14061: LD_OWVAR 2
14065: PUSH
14066: EMPTY
14067: LIST
14068: LIST
14069: PUSH
14070: LD_INT 21
14072: PUSH
14073: LD_INT 2
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: PUSH
14080: LD_INT 2
14082: PUSH
14083: LD_INT 34
14085: PUSH
14086: LD_INT 12
14088: PUSH
14089: EMPTY
14090: LIST
14091: LIST
14092: PUSH
14093: LD_INT 34
14095: PUSH
14096: LD_INT 51
14098: PUSH
14099: EMPTY
14100: LIST
14101: LIST
14102: PUSH
14103: LD_INT 34
14105: PUSH
14106: LD_INT 32
14108: PUSH
14109: EMPTY
14110: LIST
14111: LIST
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: LIST
14117: LIST
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: PPUSH
14124: CALL_OW 69
14128: ST_TO_ADDR
// if not tmp then
14129: LD_VAR 0 2
14133: NOT
14134: IFFALSE 14138
// exit ;
14136: GO 14188
// for i in tmp do
14138: LD_ADDR_VAR 0 1
14142: PUSH
14143: LD_VAR 0 2
14147: PUSH
14148: FOR_IN
14149: IFFALSE 14186
// if GetCargo ( i , mat_artifact ) = 0 then
14151: LD_VAR 0 1
14155: PPUSH
14156: LD_INT 4
14158: PPUSH
14159: CALL_OW 289
14163: PUSH
14164: LD_INT 0
14166: EQUAL
14167: IFFALSE 14184
// SetCargo ( i , mat_siberit , 100 ) ;
14169: LD_VAR 0 1
14173: PPUSH
14174: LD_INT 3
14176: PPUSH
14177: LD_INT 100
14179: PPUSH
14180: CALL_OW 290
14184: GO 14148
14186: POP
14187: POP
// end ;
14188: PPOPN 2
14190: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14191: LD_EXP 58
14195: PUSH
14196: LD_EXP 103
14200: AND
14201: IFFALSE 14384
14203: GO 14205
14205: DISABLE
14206: LD_INT 0
14208: PPUSH
14209: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14210: LD_ADDR_VAR 0 2
14214: PUSH
14215: LD_INT 22
14217: PUSH
14218: LD_OWVAR 2
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PPUSH
14227: CALL_OW 69
14231: ST_TO_ADDR
// if not tmp then
14232: LD_VAR 0 2
14236: NOT
14237: IFFALSE 14241
// exit ;
14239: GO 14384
// for i := 1 to 2 do
14241: LD_ADDR_VAR 0 1
14245: PUSH
14246: DOUBLE
14247: LD_INT 1
14249: DEC
14250: ST_TO_ADDR
14251: LD_INT 2
14253: PUSH
14254: FOR_TO
14255: IFFALSE 14382
// begin uc_side := your_side ;
14257: LD_ADDR_OWVAR 20
14261: PUSH
14262: LD_OWVAR 2
14266: ST_TO_ADDR
// uc_nation := nation_american ;
14267: LD_ADDR_OWVAR 21
14271: PUSH
14272: LD_INT 1
14274: ST_TO_ADDR
// vc_chassis := us_morphling ;
14275: LD_ADDR_OWVAR 37
14279: PUSH
14280: LD_INT 5
14282: ST_TO_ADDR
// vc_engine := engine_siberite ;
14283: LD_ADDR_OWVAR 39
14287: PUSH
14288: LD_INT 3
14290: ST_TO_ADDR
// vc_control := control_computer ;
14291: LD_ADDR_OWVAR 38
14295: PUSH
14296: LD_INT 3
14298: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14299: LD_ADDR_OWVAR 40
14303: PUSH
14304: LD_INT 10
14306: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14307: LD_VAR 0 2
14311: PUSH
14312: LD_INT 1
14314: ARRAY
14315: PPUSH
14316: CALL_OW 310
14320: NOT
14321: IFFALSE 14368
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14323: CALL_OW 45
14327: PPUSH
14328: LD_VAR 0 2
14332: PUSH
14333: LD_INT 1
14335: ARRAY
14336: PPUSH
14337: CALL_OW 250
14341: PPUSH
14342: LD_VAR 0 2
14346: PUSH
14347: LD_INT 1
14349: ARRAY
14350: PPUSH
14351: CALL_OW 251
14355: PPUSH
14356: LD_INT 12
14358: PPUSH
14359: LD_INT 1
14361: PPUSH
14362: CALL_OW 50
14366: GO 14380
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14368: CALL_OW 45
14372: PPUSH
14373: LD_INT 1
14375: PPUSH
14376: CALL_OW 51
// end ;
14380: GO 14254
14382: POP
14383: POP
// end ;
14384: PPOPN 2
14386: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14387: LD_EXP 58
14391: PUSH
14392: LD_EXP 104
14396: AND
14397: IFFALSE 14619
14399: GO 14401
14401: DISABLE
14402: LD_INT 0
14404: PPUSH
14405: PPUSH
14406: PPUSH
14407: PPUSH
14408: PPUSH
14409: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14410: LD_ADDR_VAR 0 6
14414: PUSH
14415: LD_INT 22
14417: PUSH
14418: LD_OWVAR 2
14422: PUSH
14423: EMPTY
14424: LIST
14425: LIST
14426: PUSH
14427: LD_INT 21
14429: PUSH
14430: LD_INT 1
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: PUSH
14437: LD_INT 3
14439: PUSH
14440: LD_INT 23
14442: PUSH
14443: LD_INT 0
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: EMPTY
14451: LIST
14452: LIST
14453: PUSH
14454: EMPTY
14455: LIST
14456: LIST
14457: LIST
14458: PPUSH
14459: CALL_OW 69
14463: ST_TO_ADDR
// if not tmp then
14464: LD_VAR 0 6
14468: NOT
14469: IFFALSE 14473
// exit ;
14471: GO 14619
// s1 := rand ( 1 , 4 ) ;
14473: LD_ADDR_VAR 0 2
14477: PUSH
14478: LD_INT 1
14480: PPUSH
14481: LD_INT 4
14483: PPUSH
14484: CALL_OW 12
14488: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14489: LD_ADDR_VAR 0 4
14493: PUSH
14494: LD_VAR 0 6
14498: PUSH
14499: LD_INT 1
14501: ARRAY
14502: PPUSH
14503: LD_VAR 0 2
14507: PPUSH
14508: CALL_OW 259
14512: ST_TO_ADDR
// if s1 = 1 then
14513: LD_VAR 0 2
14517: PUSH
14518: LD_INT 1
14520: EQUAL
14521: IFFALSE 14541
// s2 := rand ( 2 , 4 ) else
14523: LD_ADDR_VAR 0 3
14527: PUSH
14528: LD_INT 2
14530: PPUSH
14531: LD_INT 4
14533: PPUSH
14534: CALL_OW 12
14538: ST_TO_ADDR
14539: GO 14549
// s2 := 1 ;
14541: LD_ADDR_VAR 0 3
14545: PUSH
14546: LD_INT 1
14548: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14549: LD_ADDR_VAR 0 5
14553: PUSH
14554: LD_VAR 0 6
14558: PUSH
14559: LD_INT 1
14561: ARRAY
14562: PPUSH
14563: LD_VAR 0 3
14567: PPUSH
14568: CALL_OW 259
14572: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14573: LD_VAR 0 6
14577: PUSH
14578: LD_INT 1
14580: ARRAY
14581: PPUSH
14582: LD_VAR 0 2
14586: PPUSH
14587: LD_VAR 0 5
14591: PPUSH
14592: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14596: LD_VAR 0 6
14600: PUSH
14601: LD_INT 1
14603: ARRAY
14604: PPUSH
14605: LD_VAR 0 3
14609: PPUSH
14610: LD_VAR 0 4
14614: PPUSH
14615: CALL_OW 237
// end ;
14619: PPOPN 6
14621: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14622: LD_EXP 58
14626: PUSH
14627: LD_EXP 105
14631: AND
14632: IFFALSE 14711
14634: GO 14636
14636: DISABLE
14637: LD_INT 0
14639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14640: LD_ADDR_VAR 0 1
14644: PUSH
14645: LD_INT 22
14647: PUSH
14648: LD_OWVAR 2
14652: PUSH
14653: EMPTY
14654: LIST
14655: LIST
14656: PUSH
14657: LD_INT 30
14659: PUSH
14660: LD_INT 3
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: PUSH
14667: EMPTY
14668: LIST
14669: LIST
14670: PPUSH
14671: CALL_OW 69
14675: ST_TO_ADDR
// if not tmp then
14676: LD_VAR 0 1
14680: NOT
14681: IFFALSE 14685
// exit ;
14683: GO 14711
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14685: LD_VAR 0 1
14689: PUSH
14690: LD_INT 1
14692: PPUSH
14693: LD_VAR 0 1
14697: PPUSH
14698: CALL_OW 12
14702: ARRAY
14703: PPUSH
14704: LD_INT 1
14706: PPUSH
14707: CALL_OW 234
// end ;
14711: PPOPN 1
14713: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14714: LD_EXP 58
14718: PUSH
14719: LD_EXP 106
14723: AND
14724: IFFALSE 14836
14726: GO 14728
14728: DISABLE
14729: LD_INT 0
14731: PPUSH
14732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
14733: LD_ADDR_VAR 0 2
14737: PUSH
14738: LD_INT 22
14740: PUSH
14741: LD_OWVAR 2
14745: PUSH
14746: EMPTY
14747: LIST
14748: LIST
14749: PUSH
14750: LD_INT 2
14752: PUSH
14753: LD_INT 30
14755: PUSH
14756: LD_INT 27
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: LD_INT 30
14765: PUSH
14766: LD_INT 26
14768: PUSH
14769: EMPTY
14770: LIST
14771: LIST
14772: PUSH
14773: LD_INT 30
14775: PUSH
14776: LD_INT 28
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: LIST
14787: LIST
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: PPUSH
14793: CALL_OW 69
14797: ST_TO_ADDR
// if not tmp then
14798: LD_VAR 0 2
14802: NOT
14803: IFFALSE 14807
// exit ;
14805: GO 14836
// for i in tmp do
14807: LD_ADDR_VAR 0 1
14811: PUSH
14812: LD_VAR 0 2
14816: PUSH
14817: FOR_IN
14818: IFFALSE 14834
// SetLives ( i , 1 ) ;
14820: LD_VAR 0 1
14824: PPUSH
14825: LD_INT 1
14827: PPUSH
14828: CALL_OW 234
14832: GO 14817
14834: POP
14835: POP
// end ;
14836: PPOPN 2
14838: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
14839: LD_EXP 58
14843: PUSH
14844: LD_EXP 107
14848: AND
14849: IFFALSE 15136
14851: GO 14853
14853: DISABLE
14854: LD_INT 0
14856: PPUSH
14857: PPUSH
14858: PPUSH
// begin i := rand ( 1 , 7 ) ;
14859: LD_ADDR_VAR 0 1
14863: PUSH
14864: LD_INT 1
14866: PPUSH
14867: LD_INT 7
14869: PPUSH
14870: CALL_OW 12
14874: ST_TO_ADDR
// case i of 1 :
14875: LD_VAR 0 1
14879: PUSH
14880: LD_INT 1
14882: DOUBLE
14883: EQUAL
14884: IFTRUE 14888
14886: GO 14898
14888: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
14889: LD_STRING earthquake(getX(game), 0, 32)
14891: PPUSH
14892: CALL_OW 559
14896: GO 15136
14898: LD_INT 2
14900: DOUBLE
14901: EQUAL
14902: IFTRUE 14906
14904: GO 14920
14906: POP
// begin ToLua ( displayStucuk(); ) ;
14907: LD_STRING displayStucuk();
14909: PPUSH
14910: CALL_OW 559
// ResetFog ;
14914: CALL_OW 335
// end ; 3 :
14918: GO 15136
14920: LD_INT 3
14922: DOUBLE
14923: EQUAL
14924: IFTRUE 14928
14926: GO 15032
14928: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14929: LD_ADDR_VAR 0 2
14933: PUSH
14934: LD_INT 22
14936: PUSH
14937: LD_OWVAR 2
14941: PUSH
14942: EMPTY
14943: LIST
14944: LIST
14945: PUSH
14946: LD_INT 25
14948: PUSH
14949: LD_INT 1
14951: PUSH
14952: EMPTY
14953: LIST
14954: LIST
14955: PUSH
14956: EMPTY
14957: LIST
14958: LIST
14959: PPUSH
14960: CALL_OW 69
14964: ST_TO_ADDR
// if not tmp then
14965: LD_VAR 0 2
14969: NOT
14970: IFFALSE 14974
// exit ;
14972: GO 15136
// un := tmp [ rand ( 1 , tmp ) ] ;
14974: LD_ADDR_VAR 0 3
14978: PUSH
14979: LD_VAR 0 2
14983: PUSH
14984: LD_INT 1
14986: PPUSH
14987: LD_VAR 0 2
14991: PPUSH
14992: CALL_OW 12
14996: ARRAY
14997: ST_TO_ADDR
// if Crawls ( un ) then
14998: LD_VAR 0 3
15002: PPUSH
15003: CALL_OW 318
15007: IFFALSE 15018
// ComWalk ( un ) ;
15009: LD_VAR 0 3
15013: PPUSH
15014: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15018: LD_VAR 0 3
15022: PPUSH
15023: LD_INT 8
15025: PPUSH
15026: CALL_OW 336
// end ; 4 :
15030: GO 15136
15032: LD_INT 4
15034: DOUBLE
15035: EQUAL
15036: IFTRUE 15040
15038: GO 15114
15040: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15041: LD_ADDR_VAR 0 2
15045: PUSH
15046: LD_INT 22
15048: PUSH
15049: LD_OWVAR 2
15053: PUSH
15054: EMPTY
15055: LIST
15056: LIST
15057: PUSH
15058: LD_INT 30
15060: PUSH
15061: LD_INT 29
15063: PUSH
15064: EMPTY
15065: LIST
15066: LIST
15067: PUSH
15068: EMPTY
15069: LIST
15070: LIST
15071: PPUSH
15072: CALL_OW 69
15076: ST_TO_ADDR
// if not tmp then
15077: LD_VAR 0 2
15081: NOT
15082: IFFALSE 15086
// exit ;
15084: GO 15136
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15086: LD_VAR 0 2
15090: PUSH
15091: LD_INT 1
15093: ARRAY
15094: PPUSH
15095: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15099: LD_VAR 0 2
15103: PUSH
15104: LD_INT 1
15106: ARRAY
15107: PPUSH
15108: CALL_OW 65
// end ; 5 .. 7 :
15112: GO 15136
15114: LD_INT 5
15116: DOUBLE
15117: GREATEREQUAL
15118: IFFALSE 15126
15120: LD_INT 7
15122: DOUBLE
15123: LESSEQUAL
15124: IFTRUE 15128
15126: GO 15135
15128: POP
// StreamSibBomb ; end ;
15129: CALL 11373 0 0
15133: GO 15136
15135: POP
// end ;
15136: PPOPN 3
15138: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15139: LD_EXP 58
15143: PUSH
15144: LD_EXP 108
15148: AND
15149: IFFALSE 15305
15151: GO 15153
15153: DISABLE
15154: LD_INT 0
15156: PPUSH
15157: PPUSH
15158: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15159: LD_ADDR_VAR 0 2
15163: PUSH
15164: LD_INT 81
15166: PUSH
15167: LD_OWVAR 2
15171: PUSH
15172: EMPTY
15173: LIST
15174: LIST
15175: PUSH
15176: LD_INT 2
15178: PUSH
15179: LD_INT 21
15181: PUSH
15182: LD_INT 1
15184: PUSH
15185: EMPTY
15186: LIST
15187: LIST
15188: PUSH
15189: LD_INT 21
15191: PUSH
15192: LD_INT 2
15194: PUSH
15195: EMPTY
15196: LIST
15197: LIST
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: LIST
15203: PUSH
15204: EMPTY
15205: LIST
15206: LIST
15207: PPUSH
15208: CALL_OW 69
15212: ST_TO_ADDR
// if not tmp then
15213: LD_VAR 0 2
15217: NOT
15218: IFFALSE 15222
// exit ;
15220: GO 15305
// p := 0 ;
15222: LD_ADDR_VAR 0 3
15226: PUSH
15227: LD_INT 0
15229: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15230: LD_INT 35
15232: PPUSH
15233: CALL_OW 67
// p := p + 1 ;
15237: LD_ADDR_VAR 0 3
15241: PUSH
15242: LD_VAR 0 3
15246: PUSH
15247: LD_INT 1
15249: PLUS
15250: ST_TO_ADDR
// for i in tmp do
15251: LD_ADDR_VAR 0 1
15255: PUSH
15256: LD_VAR 0 2
15260: PUSH
15261: FOR_IN
15262: IFFALSE 15293
// if GetLives ( i ) < 1000 then
15264: LD_VAR 0 1
15268: PPUSH
15269: CALL_OW 256
15273: PUSH
15274: LD_INT 1000
15276: LESS
15277: IFFALSE 15291
// SetLives ( i , 1000 ) ;
15279: LD_VAR 0 1
15283: PPUSH
15284: LD_INT 1000
15286: PPUSH
15287: CALL_OW 234
15291: GO 15261
15293: POP
15294: POP
// until p > 20 ;
15295: LD_VAR 0 3
15299: PUSH
15300: LD_INT 20
15302: GREATER
15303: IFFALSE 15230
// end ;
15305: PPOPN 3
15307: END
// every 0 0$1 trigger StreamModeActive and sTime do
15308: LD_EXP 58
15312: PUSH
15313: LD_EXP 109
15317: AND
15318: IFFALSE 15353
15320: GO 15322
15322: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15323: LD_INT 28
15325: PPUSH
15326: LD_OWVAR 2
15330: PPUSH
15331: LD_INT 2
15333: PPUSH
15334: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15338: LD_INT 30
15340: PPUSH
15341: LD_OWVAR 2
15345: PPUSH
15346: LD_INT 2
15348: PPUSH
15349: CALL_OW 322
// end ;
15353: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15354: LD_EXP 58
15358: PUSH
15359: LD_EXP 110
15363: AND
15364: IFFALSE 15485
15366: GO 15368
15368: DISABLE
15369: LD_INT 0
15371: PPUSH
15372: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15373: LD_ADDR_VAR 0 2
15377: PUSH
15378: LD_INT 22
15380: PUSH
15381: LD_OWVAR 2
15385: PUSH
15386: EMPTY
15387: LIST
15388: LIST
15389: PUSH
15390: LD_INT 21
15392: PUSH
15393: LD_INT 1
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: PUSH
15400: LD_INT 3
15402: PUSH
15403: LD_INT 23
15405: PUSH
15406: LD_INT 0
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: PUSH
15413: EMPTY
15414: LIST
15415: LIST
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: LIST
15421: PPUSH
15422: CALL_OW 69
15426: ST_TO_ADDR
// if not tmp then
15427: LD_VAR 0 2
15431: NOT
15432: IFFALSE 15436
// exit ;
15434: GO 15485
// for i in tmp do
15436: LD_ADDR_VAR 0 1
15440: PUSH
15441: LD_VAR 0 2
15445: PUSH
15446: FOR_IN
15447: IFFALSE 15483
// begin if Crawls ( i ) then
15449: LD_VAR 0 1
15453: PPUSH
15454: CALL_OW 318
15458: IFFALSE 15469
// ComWalk ( i ) ;
15460: LD_VAR 0 1
15464: PPUSH
15465: CALL_OW 138
// SetClass ( i , 2 ) ;
15469: LD_VAR 0 1
15473: PPUSH
15474: LD_INT 2
15476: PPUSH
15477: CALL_OW 336
// end ;
15481: GO 15446
15483: POP
15484: POP
// end ;
15485: PPOPN 2
15487: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15488: LD_EXP 58
15492: PUSH
15493: LD_EXP 111
15497: AND
15498: IFFALSE 15786
15500: GO 15502
15502: DISABLE
15503: LD_INT 0
15505: PPUSH
15506: PPUSH
15507: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15508: LD_OWVAR 2
15512: PPUSH
15513: LD_INT 9
15515: PPUSH
15516: LD_INT 1
15518: PPUSH
15519: LD_INT 1
15521: PPUSH
15522: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15526: LD_INT 9
15528: PPUSH
15529: LD_OWVAR 2
15533: PPUSH
15534: CALL_OW 343
// uc_side := 9 ;
15538: LD_ADDR_OWVAR 20
15542: PUSH
15543: LD_INT 9
15545: ST_TO_ADDR
// uc_nation := 2 ;
15546: LD_ADDR_OWVAR 21
15550: PUSH
15551: LD_INT 2
15553: ST_TO_ADDR
// hc_name := Dark Warrior ;
15554: LD_ADDR_OWVAR 26
15558: PUSH
15559: LD_STRING Dark Warrior
15561: ST_TO_ADDR
// hc_gallery :=  ;
15562: LD_ADDR_OWVAR 33
15566: PUSH
15567: LD_STRING 
15569: ST_TO_ADDR
// hc_noskilllimit := true ;
15570: LD_ADDR_OWVAR 76
15574: PUSH
15575: LD_INT 1
15577: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15578: LD_ADDR_OWVAR 31
15582: PUSH
15583: LD_INT 30
15585: PUSH
15586: LD_INT 30
15588: PUSH
15589: LD_INT 30
15591: PUSH
15592: LD_INT 30
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: LIST
15599: LIST
15600: ST_TO_ADDR
// un := CreateHuman ;
15601: LD_ADDR_VAR 0 3
15605: PUSH
15606: CALL_OW 44
15610: ST_TO_ADDR
// hc_noskilllimit := false ;
15611: LD_ADDR_OWVAR 76
15615: PUSH
15616: LD_INT 0
15618: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15619: LD_VAR 0 3
15623: PPUSH
15624: LD_INT 1
15626: PPUSH
15627: CALL_OW 51
// ToLua ( playRanger() ) ;
15631: LD_STRING playRanger()
15633: PPUSH
15634: CALL_OW 559
// p := 0 ;
15638: LD_ADDR_VAR 0 2
15642: PUSH
15643: LD_INT 0
15645: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15646: LD_INT 35
15648: PPUSH
15649: CALL_OW 67
// p := p + 1 ;
15653: LD_ADDR_VAR 0 2
15657: PUSH
15658: LD_VAR 0 2
15662: PUSH
15663: LD_INT 1
15665: PLUS
15666: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15667: LD_VAR 0 3
15671: PPUSH
15672: CALL_OW 256
15676: PUSH
15677: LD_INT 1000
15679: LESS
15680: IFFALSE 15694
// SetLives ( un , 1000 ) ;
15682: LD_VAR 0 3
15686: PPUSH
15687: LD_INT 1000
15689: PPUSH
15690: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15694: LD_VAR 0 3
15698: PPUSH
15699: LD_INT 81
15701: PUSH
15702: LD_OWVAR 2
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: PUSH
15711: LD_INT 91
15713: PUSH
15714: LD_VAR 0 3
15718: PUSH
15719: LD_INT 30
15721: PUSH
15722: EMPTY
15723: LIST
15724: LIST
15725: LIST
15726: PUSH
15727: EMPTY
15728: LIST
15729: LIST
15730: PPUSH
15731: CALL_OW 69
15735: PPUSH
15736: LD_VAR 0 3
15740: PPUSH
15741: CALL_OW 74
15745: PPUSH
15746: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
15750: LD_VAR 0 2
15754: PUSH
15755: LD_INT 80
15757: GREATER
15758: PUSH
15759: LD_VAR 0 3
15763: PPUSH
15764: CALL_OW 301
15768: OR
15769: IFFALSE 15646
// if un then
15771: LD_VAR 0 3
15775: IFFALSE 15786
// RemoveUnit ( un ) ;
15777: LD_VAR 0 3
15781: PPUSH
15782: CALL_OW 64
// end ;
15786: PPOPN 3
15788: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
15789: LD_EXP 112
15793: IFFALSE 15909
15795: GO 15797
15797: DISABLE
15798: LD_INT 0
15800: PPUSH
15801: PPUSH
15802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
15803: LD_ADDR_VAR 0 2
15807: PUSH
15808: LD_INT 81
15810: PUSH
15811: LD_OWVAR 2
15815: PUSH
15816: EMPTY
15817: LIST
15818: LIST
15819: PUSH
15820: LD_INT 21
15822: PUSH
15823: LD_INT 1
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PPUSH
15834: CALL_OW 69
15838: ST_TO_ADDR
// ToLua ( playComputer() ) ;
15839: LD_STRING playComputer()
15841: PPUSH
15842: CALL_OW 559
// if not tmp then
15846: LD_VAR 0 2
15850: NOT
15851: IFFALSE 15855
// exit ;
15853: GO 15909
// for i in tmp do
15855: LD_ADDR_VAR 0 1
15859: PUSH
15860: LD_VAR 0 2
15864: PUSH
15865: FOR_IN
15866: IFFALSE 15907
// for j := 1 to 4 do
15868: LD_ADDR_VAR 0 3
15872: PUSH
15873: DOUBLE
15874: LD_INT 1
15876: DEC
15877: ST_TO_ADDR
15878: LD_INT 4
15880: PUSH
15881: FOR_TO
15882: IFFALSE 15903
// SetSkill ( i , j , 10 ) ;
15884: LD_VAR 0 1
15888: PPUSH
15889: LD_VAR 0 3
15893: PPUSH
15894: LD_INT 10
15896: PPUSH
15897: CALL_OW 237
15901: GO 15881
15903: POP
15904: POP
15905: GO 15865
15907: POP
15908: POP
// end ;
15909: PPOPN 3
15911: END
// every 0 0$1 trigger s30 do var i , tmp ;
15912: LD_EXP 113
15916: IFFALSE 15985
15918: GO 15920
15920: DISABLE
15921: LD_INT 0
15923: PPUSH
15924: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
15925: LD_ADDR_VAR 0 2
15929: PUSH
15930: LD_INT 22
15932: PUSH
15933: LD_OWVAR 2
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 69
15946: ST_TO_ADDR
// if not tmp then
15947: LD_VAR 0 2
15951: NOT
15952: IFFALSE 15956
// exit ;
15954: GO 15985
// for i in tmp do
15956: LD_ADDR_VAR 0 1
15960: PUSH
15961: LD_VAR 0 2
15965: PUSH
15966: FOR_IN
15967: IFFALSE 15983
// SetLives ( i , 300 ) ;
15969: LD_VAR 0 1
15973: PPUSH
15974: LD_INT 300
15976: PPUSH
15977: CALL_OW 234
15981: GO 15966
15983: POP
15984: POP
// end ;
15985: PPOPN 2
15987: END
// every 0 0$1 trigger s60 do var i , tmp ;
15988: LD_EXP 114
15992: IFFALSE 16061
15994: GO 15996
15996: DISABLE
15997: LD_INT 0
15999: PPUSH
16000: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16001: LD_ADDR_VAR 0 2
16005: PUSH
16006: LD_INT 22
16008: PUSH
16009: LD_OWVAR 2
16013: PUSH
16014: EMPTY
16015: LIST
16016: LIST
16017: PPUSH
16018: CALL_OW 69
16022: ST_TO_ADDR
// if not tmp then
16023: LD_VAR 0 2
16027: NOT
16028: IFFALSE 16032
// exit ;
16030: GO 16061
// for i in tmp do
16032: LD_ADDR_VAR 0 1
16036: PUSH
16037: LD_VAR 0 2
16041: PUSH
16042: FOR_IN
16043: IFFALSE 16059
// SetLives ( i , 600 ) ;
16045: LD_VAR 0 1
16049: PPUSH
16050: LD_INT 600
16052: PPUSH
16053: CALL_OW 234
16057: GO 16042
16059: POP
16060: POP
// end ;
16061: PPOPN 2
16063: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16064: LD_INT 0
16066: PPUSH
// case cmd of 301 :
16067: LD_VAR 0 1
16071: PUSH
16072: LD_INT 301
16074: DOUBLE
16075: EQUAL
16076: IFTRUE 16080
16078: GO 16112
16080: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16081: LD_VAR 0 6
16085: PPUSH
16086: LD_VAR 0 7
16090: PPUSH
16091: LD_VAR 0 8
16095: PPUSH
16096: LD_VAR 0 4
16100: PPUSH
16101: LD_VAR 0 5
16105: PPUSH
16106: CALL 17313 0 5
16110: GO 16233
16112: LD_INT 302
16114: DOUBLE
16115: EQUAL
16116: IFTRUE 16120
16118: GO 16157
16120: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16121: LD_VAR 0 6
16125: PPUSH
16126: LD_VAR 0 7
16130: PPUSH
16131: LD_VAR 0 8
16135: PPUSH
16136: LD_VAR 0 9
16140: PPUSH
16141: LD_VAR 0 4
16145: PPUSH
16146: LD_VAR 0 5
16150: PPUSH
16151: CALL 17404 0 6
16155: GO 16233
16157: LD_INT 303
16159: DOUBLE
16160: EQUAL
16161: IFTRUE 16165
16163: GO 16202
16165: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16166: LD_VAR 0 6
16170: PPUSH
16171: LD_VAR 0 7
16175: PPUSH
16176: LD_VAR 0 8
16180: PPUSH
16181: LD_VAR 0 9
16185: PPUSH
16186: LD_VAR 0 4
16190: PPUSH
16191: LD_VAR 0 5
16195: PPUSH
16196: CALL 16238 0 6
16200: GO 16233
16202: LD_INT 304
16204: DOUBLE
16205: EQUAL
16206: IFTRUE 16210
16208: GO 16232
16210: POP
// hHackTeleport ( unit , x , y ) ; end ;
16211: LD_VAR 0 2
16215: PPUSH
16216: LD_VAR 0 4
16220: PPUSH
16221: LD_VAR 0 5
16225: PPUSH
16226: CALL 17997 0 3
16230: GO 16233
16232: POP
// end ;
16233: LD_VAR 0 12
16237: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16238: LD_INT 0
16240: PPUSH
16241: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16242: LD_VAR 0 1
16246: PUSH
16247: LD_INT 1
16249: LESS
16250: PUSH
16251: LD_VAR 0 1
16255: PUSH
16256: LD_INT 3
16258: GREATER
16259: OR
16260: PUSH
16261: LD_VAR 0 5
16265: PPUSH
16266: LD_VAR 0 6
16270: PPUSH
16271: CALL_OW 428
16275: OR
16276: IFFALSE 16280
// exit ;
16278: GO 17000
// uc_side := your_side ;
16280: LD_ADDR_OWVAR 20
16284: PUSH
16285: LD_OWVAR 2
16289: ST_TO_ADDR
// uc_nation := nation ;
16290: LD_ADDR_OWVAR 21
16294: PUSH
16295: LD_VAR 0 1
16299: ST_TO_ADDR
// bc_level = 1 ;
16300: LD_ADDR_OWVAR 43
16304: PUSH
16305: LD_INT 1
16307: ST_TO_ADDR
// case btype of 1 :
16308: LD_VAR 0 2
16312: PUSH
16313: LD_INT 1
16315: DOUBLE
16316: EQUAL
16317: IFTRUE 16321
16319: GO 16332
16321: POP
// bc_type := b_depot ; 2 :
16322: LD_ADDR_OWVAR 42
16326: PUSH
16327: LD_INT 0
16329: ST_TO_ADDR
16330: GO 16944
16332: LD_INT 2
16334: DOUBLE
16335: EQUAL
16336: IFTRUE 16340
16338: GO 16351
16340: POP
// bc_type := b_warehouse ; 3 :
16341: LD_ADDR_OWVAR 42
16345: PUSH
16346: LD_INT 1
16348: ST_TO_ADDR
16349: GO 16944
16351: LD_INT 3
16353: DOUBLE
16354: EQUAL
16355: IFTRUE 16359
16357: GO 16370
16359: POP
// bc_type := b_lab ; 4 .. 9 :
16360: LD_ADDR_OWVAR 42
16364: PUSH
16365: LD_INT 6
16367: ST_TO_ADDR
16368: GO 16944
16370: LD_INT 4
16372: DOUBLE
16373: GREATEREQUAL
16374: IFFALSE 16382
16376: LD_INT 9
16378: DOUBLE
16379: LESSEQUAL
16380: IFTRUE 16384
16382: GO 16436
16384: POP
// begin bc_type := b_lab_half ;
16385: LD_ADDR_OWVAR 42
16389: PUSH
16390: LD_INT 7
16392: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16393: LD_ADDR_OWVAR 44
16397: PUSH
16398: LD_INT 10
16400: PUSH
16401: LD_INT 11
16403: PUSH
16404: LD_INT 12
16406: PUSH
16407: LD_INT 15
16409: PUSH
16410: LD_INT 14
16412: PUSH
16413: LD_INT 13
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: PUSH
16424: LD_VAR 0 2
16428: PUSH
16429: LD_INT 3
16431: MINUS
16432: ARRAY
16433: ST_TO_ADDR
// end ; 10 .. 13 :
16434: GO 16944
16436: LD_INT 10
16438: DOUBLE
16439: GREATEREQUAL
16440: IFFALSE 16448
16442: LD_INT 13
16444: DOUBLE
16445: LESSEQUAL
16446: IFTRUE 16450
16448: GO 16527
16450: POP
// begin bc_type := b_lab_full ;
16451: LD_ADDR_OWVAR 42
16455: PUSH
16456: LD_INT 8
16458: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
16459: LD_ADDR_OWVAR 44
16463: PUSH
16464: LD_INT 10
16466: PUSH
16467: LD_INT 12
16469: PUSH
16470: LD_INT 14
16472: PUSH
16473: LD_INT 13
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: PUSH
16482: LD_VAR 0 2
16486: PUSH
16487: LD_INT 9
16489: MINUS
16490: ARRAY
16491: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
16492: LD_ADDR_OWVAR 45
16496: PUSH
16497: LD_INT 11
16499: PUSH
16500: LD_INT 15
16502: PUSH
16503: LD_INT 12
16505: PUSH
16506: LD_INT 15
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: LIST
16513: LIST
16514: PUSH
16515: LD_VAR 0 2
16519: PUSH
16520: LD_INT 9
16522: MINUS
16523: ARRAY
16524: ST_TO_ADDR
// end ; 14 :
16525: GO 16944
16527: LD_INT 14
16529: DOUBLE
16530: EQUAL
16531: IFTRUE 16535
16533: GO 16546
16535: POP
// bc_type := b_workshop ; 15 :
16536: LD_ADDR_OWVAR 42
16540: PUSH
16541: LD_INT 2
16543: ST_TO_ADDR
16544: GO 16944
16546: LD_INT 15
16548: DOUBLE
16549: EQUAL
16550: IFTRUE 16554
16552: GO 16565
16554: POP
// bc_type := b_factory ; 16 :
16555: LD_ADDR_OWVAR 42
16559: PUSH
16560: LD_INT 3
16562: ST_TO_ADDR
16563: GO 16944
16565: LD_INT 16
16567: DOUBLE
16568: EQUAL
16569: IFTRUE 16573
16571: GO 16584
16573: POP
// bc_type := b_ext_gun ; 17 :
16574: LD_ADDR_OWVAR 42
16578: PUSH
16579: LD_INT 17
16581: ST_TO_ADDR
16582: GO 16944
16584: LD_INT 17
16586: DOUBLE
16587: EQUAL
16588: IFTRUE 16592
16590: GO 16620
16592: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
16593: LD_ADDR_OWVAR 42
16597: PUSH
16598: LD_INT 19
16600: PUSH
16601: LD_INT 23
16603: PUSH
16604: LD_INT 19
16606: PUSH
16607: EMPTY
16608: LIST
16609: LIST
16610: LIST
16611: PUSH
16612: LD_VAR 0 1
16616: ARRAY
16617: ST_TO_ADDR
16618: GO 16944
16620: LD_INT 18
16622: DOUBLE
16623: EQUAL
16624: IFTRUE 16628
16626: GO 16639
16628: POP
// bc_type := b_ext_radar ; 19 :
16629: LD_ADDR_OWVAR 42
16633: PUSH
16634: LD_INT 20
16636: ST_TO_ADDR
16637: GO 16944
16639: LD_INT 19
16641: DOUBLE
16642: EQUAL
16643: IFTRUE 16647
16645: GO 16658
16647: POP
// bc_type := b_ext_radio ; 20 :
16648: LD_ADDR_OWVAR 42
16652: PUSH
16653: LD_INT 22
16655: ST_TO_ADDR
16656: GO 16944
16658: LD_INT 20
16660: DOUBLE
16661: EQUAL
16662: IFTRUE 16666
16664: GO 16677
16666: POP
// bc_type := b_ext_siberium ; 21 :
16667: LD_ADDR_OWVAR 42
16671: PUSH
16672: LD_INT 21
16674: ST_TO_ADDR
16675: GO 16944
16677: LD_INT 21
16679: DOUBLE
16680: EQUAL
16681: IFTRUE 16685
16683: GO 16696
16685: POP
// bc_type := b_ext_computer ; 22 :
16686: LD_ADDR_OWVAR 42
16690: PUSH
16691: LD_INT 24
16693: ST_TO_ADDR
16694: GO 16944
16696: LD_INT 22
16698: DOUBLE
16699: EQUAL
16700: IFTRUE 16704
16702: GO 16715
16704: POP
// bc_type := b_ext_track ; 23 :
16705: LD_ADDR_OWVAR 42
16709: PUSH
16710: LD_INT 16
16712: ST_TO_ADDR
16713: GO 16944
16715: LD_INT 23
16717: DOUBLE
16718: EQUAL
16719: IFTRUE 16723
16721: GO 16734
16723: POP
// bc_type := b_ext_laser ; 24 :
16724: LD_ADDR_OWVAR 42
16728: PUSH
16729: LD_INT 25
16731: ST_TO_ADDR
16732: GO 16944
16734: LD_INT 24
16736: DOUBLE
16737: EQUAL
16738: IFTRUE 16742
16740: GO 16753
16742: POP
// bc_type := b_control_tower ; 25 :
16743: LD_ADDR_OWVAR 42
16747: PUSH
16748: LD_INT 36
16750: ST_TO_ADDR
16751: GO 16944
16753: LD_INT 25
16755: DOUBLE
16756: EQUAL
16757: IFTRUE 16761
16759: GO 16772
16761: POP
// bc_type := b_breastwork ; 26 :
16762: LD_ADDR_OWVAR 42
16766: PUSH
16767: LD_INT 31
16769: ST_TO_ADDR
16770: GO 16944
16772: LD_INT 26
16774: DOUBLE
16775: EQUAL
16776: IFTRUE 16780
16778: GO 16791
16780: POP
// bc_type := b_bunker ; 27 :
16781: LD_ADDR_OWVAR 42
16785: PUSH
16786: LD_INT 32
16788: ST_TO_ADDR
16789: GO 16944
16791: LD_INT 27
16793: DOUBLE
16794: EQUAL
16795: IFTRUE 16799
16797: GO 16810
16799: POP
// bc_type := b_turret ; 28 :
16800: LD_ADDR_OWVAR 42
16804: PUSH
16805: LD_INT 33
16807: ST_TO_ADDR
16808: GO 16944
16810: LD_INT 28
16812: DOUBLE
16813: EQUAL
16814: IFTRUE 16818
16816: GO 16829
16818: POP
// bc_type := b_armoury ; 29 :
16819: LD_ADDR_OWVAR 42
16823: PUSH
16824: LD_INT 4
16826: ST_TO_ADDR
16827: GO 16944
16829: LD_INT 29
16831: DOUBLE
16832: EQUAL
16833: IFTRUE 16837
16835: GO 16848
16837: POP
// bc_type := b_barracks ; 30 :
16838: LD_ADDR_OWVAR 42
16842: PUSH
16843: LD_INT 5
16845: ST_TO_ADDR
16846: GO 16944
16848: LD_INT 30
16850: DOUBLE
16851: EQUAL
16852: IFTRUE 16856
16854: GO 16867
16856: POP
// bc_type := b_solar_power ; 31 :
16857: LD_ADDR_OWVAR 42
16861: PUSH
16862: LD_INT 27
16864: ST_TO_ADDR
16865: GO 16944
16867: LD_INT 31
16869: DOUBLE
16870: EQUAL
16871: IFTRUE 16875
16873: GO 16886
16875: POP
// bc_type := b_oil_power ; 32 :
16876: LD_ADDR_OWVAR 42
16880: PUSH
16881: LD_INT 26
16883: ST_TO_ADDR
16884: GO 16944
16886: LD_INT 32
16888: DOUBLE
16889: EQUAL
16890: IFTRUE 16894
16892: GO 16905
16894: POP
// bc_type := b_siberite_power ; 33 :
16895: LD_ADDR_OWVAR 42
16899: PUSH
16900: LD_INT 28
16902: ST_TO_ADDR
16903: GO 16944
16905: LD_INT 33
16907: DOUBLE
16908: EQUAL
16909: IFTRUE 16913
16911: GO 16924
16913: POP
// bc_type := b_oil_mine ; 34 :
16914: LD_ADDR_OWVAR 42
16918: PUSH
16919: LD_INT 29
16921: ST_TO_ADDR
16922: GO 16944
16924: LD_INT 34
16926: DOUBLE
16927: EQUAL
16928: IFTRUE 16932
16930: GO 16943
16932: POP
// bc_type := b_siberite_mine ; end ;
16933: LD_ADDR_OWVAR 42
16937: PUSH
16938: LD_INT 30
16940: ST_TO_ADDR
16941: GO 16944
16943: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
16944: LD_ADDR_VAR 0 8
16948: PUSH
16949: LD_VAR 0 5
16953: PPUSH
16954: LD_VAR 0 6
16958: PPUSH
16959: LD_VAR 0 3
16963: PPUSH
16964: CALL_OW 47
16968: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
16969: LD_OWVAR 42
16973: PUSH
16974: LD_INT 32
16976: PUSH
16977: LD_INT 33
16979: PUSH
16980: EMPTY
16981: LIST
16982: LIST
16983: IN
16984: IFFALSE 17000
// PlaceWeaponTurret ( b , weapon ) ;
16986: LD_VAR 0 8
16990: PPUSH
16991: LD_VAR 0 4
16995: PPUSH
16996: CALL_OW 431
// end ;
17000: LD_VAR 0 7
17004: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17005: LD_INT 0
17007: PPUSH
17008: PPUSH
17009: PPUSH
17010: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17011: LD_ADDR_VAR 0 4
17015: PUSH
17016: LD_INT 22
17018: PUSH
17019: LD_OWVAR 2
17023: PUSH
17024: EMPTY
17025: LIST
17026: LIST
17027: PUSH
17028: LD_INT 2
17030: PUSH
17031: LD_INT 30
17033: PUSH
17034: LD_INT 0
17036: PUSH
17037: EMPTY
17038: LIST
17039: LIST
17040: PUSH
17041: LD_INT 30
17043: PUSH
17044: LD_INT 1
17046: PUSH
17047: EMPTY
17048: LIST
17049: LIST
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: LIST
17055: PUSH
17056: EMPTY
17057: LIST
17058: LIST
17059: PPUSH
17060: CALL_OW 69
17064: ST_TO_ADDR
// if not tmp then
17065: LD_VAR 0 4
17069: NOT
17070: IFFALSE 17074
// exit ;
17072: GO 17133
// for i in tmp do
17074: LD_ADDR_VAR 0 2
17078: PUSH
17079: LD_VAR 0 4
17083: PUSH
17084: FOR_IN
17085: IFFALSE 17131
// for j = 1 to 3 do
17087: LD_ADDR_VAR 0 3
17091: PUSH
17092: DOUBLE
17093: LD_INT 1
17095: DEC
17096: ST_TO_ADDR
17097: LD_INT 3
17099: PUSH
17100: FOR_TO
17101: IFFALSE 17127
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17103: LD_VAR 0 2
17107: PPUSH
17108: CALL_OW 274
17112: PPUSH
17113: LD_VAR 0 3
17117: PPUSH
17118: LD_INT 99999
17120: PPUSH
17121: CALL_OW 277
17125: GO 17100
17127: POP
17128: POP
17129: GO 17084
17131: POP
17132: POP
// end ;
17133: LD_VAR 0 1
17137: RET
// export function hHackSetLevel10 ; var i , j ; begin
17138: LD_INT 0
17140: PPUSH
17141: PPUSH
17142: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17143: LD_ADDR_VAR 0 2
17147: PUSH
17148: LD_INT 21
17150: PUSH
17151: LD_INT 1
17153: PUSH
17154: EMPTY
17155: LIST
17156: LIST
17157: PPUSH
17158: CALL_OW 69
17162: PUSH
17163: FOR_IN
17164: IFFALSE 17216
// if IsSelected ( i ) then
17166: LD_VAR 0 2
17170: PPUSH
17171: CALL_OW 306
17175: IFFALSE 17214
// begin for j := 1 to 4 do
17177: LD_ADDR_VAR 0 3
17181: PUSH
17182: DOUBLE
17183: LD_INT 1
17185: DEC
17186: ST_TO_ADDR
17187: LD_INT 4
17189: PUSH
17190: FOR_TO
17191: IFFALSE 17212
// SetSkill ( i , j , 10 ) ;
17193: LD_VAR 0 2
17197: PPUSH
17198: LD_VAR 0 3
17202: PPUSH
17203: LD_INT 10
17205: PPUSH
17206: CALL_OW 237
17210: GO 17190
17212: POP
17213: POP
// end ;
17214: GO 17163
17216: POP
17217: POP
// end ;
17218: LD_VAR 0 1
17222: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17223: LD_INT 0
17225: PPUSH
17226: PPUSH
17227: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17228: LD_ADDR_VAR 0 2
17232: PUSH
17233: LD_INT 22
17235: PUSH
17236: LD_OWVAR 2
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 21
17247: PUSH
17248: LD_INT 1
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: PPUSH
17259: CALL_OW 69
17263: PUSH
17264: FOR_IN
17265: IFFALSE 17306
// begin for j := 1 to 4 do
17267: LD_ADDR_VAR 0 3
17271: PUSH
17272: DOUBLE
17273: LD_INT 1
17275: DEC
17276: ST_TO_ADDR
17277: LD_INT 4
17279: PUSH
17280: FOR_TO
17281: IFFALSE 17302
// SetSkill ( i , j , 10 ) ;
17283: LD_VAR 0 2
17287: PPUSH
17288: LD_VAR 0 3
17292: PPUSH
17293: LD_INT 10
17295: PPUSH
17296: CALL_OW 237
17300: GO 17280
17302: POP
17303: POP
// end ;
17304: GO 17264
17306: POP
17307: POP
// end ;
17308: LD_VAR 0 1
17312: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17313: LD_INT 0
17315: PPUSH
// uc_side := your_side ;
17316: LD_ADDR_OWVAR 20
17320: PUSH
17321: LD_OWVAR 2
17325: ST_TO_ADDR
// uc_nation := nation ;
17326: LD_ADDR_OWVAR 21
17330: PUSH
17331: LD_VAR 0 1
17335: ST_TO_ADDR
// InitHc ;
17336: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17340: LD_INT 0
17342: PPUSH
17343: LD_VAR 0 2
17347: PPUSH
17348: LD_VAR 0 3
17352: PPUSH
17353: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17357: LD_VAR 0 4
17361: PPUSH
17362: LD_VAR 0 5
17366: PPUSH
17367: CALL_OW 428
17371: PUSH
17372: LD_INT 0
17374: EQUAL
17375: IFFALSE 17399
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17377: CALL_OW 44
17381: PPUSH
17382: LD_VAR 0 4
17386: PPUSH
17387: LD_VAR 0 5
17391: PPUSH
17392: LD_INT 1
17394: PPUSH
17395: CALL_OW 48
// end ;
17399: LD_VAR 0 6
17403: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17404: LD_INT 0
17406: PPUSH
17407: PPUSH
// uc_side := your_side ;
17408: LD_ADDR_OWVAR 20
17412: PUSH
17413: LD_OWVAR 2
17417: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17418: LD_VAR 0 1
17422: PUSH
17423: LD_INT 1
17425: PUSH
17426: LD_INT 2
17428: PUSH
17429: LD_INT 3
17431: PUSH
17432: LD_INT 4
17434: PUSH
17435: LD_INT 5
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: LIST
17442: LIST
17443: LIST
17444: IN
17445: IFFALSE 17457
// uc_nation := nation_american else
17447: LD_ADDR_OWVAR 21
17451: PUSH
17452: LD_INT 1
17454: ST_TO_ADDR
17455: GO 17500
// if chassis in [ 11 , 12 , 13 , 14 ] then
17457: LD_VAR 0 1
17461: PUSH
17462: LD_INT 11
17464: PUSH
17465: LD_INT 12
17467: PUSH
17468: LD_INT 13
17470: PUSH
17471: LD_INT 14
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: LIST
17478: LIST
17479: IN
17480: IFFALSE 17492
// uc_nation := nation_arabian else
17482: LD_ADDR_OWVAR 21
17486: PUSH
17487: LD_INT 2
17489: ST_TO_ADDR
17490: GO 17500
// uc_nation := nation_russian ;
17492: LD_ADDR_OWVAR 21
17496: PUSH
17497: LD_INT 3
17499: ST_TO_ADDR
// vc_chassis := chassis ;
17500: LD_ADDR_OWVAR 37
17504: PUSH
17505: LD_VAR 0 1
17509: ST_TO_ADDR
// vc_engine := engine ;
17510: LD_ADDR_OWVAR 39
17514: PUSH
17515: LD_VAR 0 2
17519: ST_TO_ADDR
// vc_control := control ;
17520: LD_ADDR_OWVAR 38
17524: PUSH
17525: LD_VAR 0 3
17529: ST_TO_ADDR
// vc_weapon := weapon ;
17530: LD_ADDR_OWVAR 40
17534: PUSH
17535: LD_VAR 0 4
17539: ST_TO_ADDR
// un := CreateVehicle ;
17540: LD_ADDR_VAR 0 8
17544: PUSH
17545: CALL_OW 45
17549: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
17550: LD_VAR 0 8
17554: PPUSH
17555: LD_INT 0
17557: PPUSH
17558: LD_INT 5
17560: PPUSH
17561: CALL_OW 12
17565: PPUSH
17566: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
17570: LD_VAR 0 8
17574: PPUSH
17575: LD_VAR 0 5
17579: PPUSH
17580: LD_VAR 0 6
17584: PPUSH
17585: LD_INT 1
17587: PPUSH
17588: CALL_OW 48
// end ;
17592: LD_VAR 0 7
17596: RET
// export hInvincible ; every 1 do
17597: GO 17599
17599: DISABLE
// hInvincible := [ ] ;
17600: LD_ADDR_EXP 115
17604: PUSH
17605: EMPTY
17606: ST_TO_ADDR
17607: END
// every 10 do var i ;
17608: GO 17610
17610: DISABLE
17611: LD_INT 0
17613: PPUSH
// begin enable ;
17614: ENABLE
// if not hInvincible then
17615: LD_EXP 115
17619: NOT
17620: IFFALSE 17624
// exit ;
17622: GO 17668
// for i in hInvincible do
17624: LD_ADDR_VAR 0 1
17628: PUSH
17629: LD_EXP 115
17633: PUSH
17634: FOR_IN
17635: IFFALSE 17666
// if GetLives ( i ) < 1000 then
17637: LD_VAR 0 1
17641: PPUSH
17642: CALL_OW 256
17646: PUSH
17647: LD_INT 1000
17649: LESS
17650: IFFALSE 17664
// SetLives ( i , 1000 ) ;
17652: LD_VAR 0 1
17656: PPUSH
17657: LD_INT 1000
17659: PPUSH
17660: CALL_OW 234
17664: GO 17634
17666: POP
17667: POP
// end ;
17668: PPOPN 1
17670: END
// export function hHackInvincible ; var i ; begin
17671: LD_INT 0
17673: PPUSH
17674: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
17675: LD_ADDR_VAR 0 2
17679: PUSH
17680: LD_INT 2
17682: PUSH
17683: LD_INT 21
17685: PUSH
17686: LD_INT 1
17688: PUSH
17689: EMPTY
17690: LIST
17691: LIST
17692: PUSH
17693: LD_INT 21
17695: PUSH
17696: LD_INT 2
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PUSH
17703: EMPTY
17704: LIST
17705: LIST
17706: LIST
17707: PPUSH
17708: CALL_OW 69
17712: PUSH
17713: FOR_IN
17714: IFFALSE 17775
// if IsSelected ( i ) then
17716: LD_VAR 0 2
17720: PPUSH
17721: CALL_OW 306
17725: IFFALSE 17773
// begin if i in hInvincible then
17727: LD_VAR 0 2
17731: PUSH
17732: LD_EXP 115
17736: IN
17737: IFFALSE 17757
// hInvincible := hInvincible diff i else
17739: LD_ADDR_EXP 115
17743: PUSH
17744: LD_EXP 115
17748: PUSH
17749: LD_VAR 0 2
17753: DIFF
17754: ST_TO_ADDR
17755: GO 17773
// hInvincible := hInvincible union i ;
17757: LD_ADDR_EXP 115
17761: PUSH
17762: LD_EXP 115
17766: PUSH
17767: LD_VAR 0 2
17771: UNION
17772: ST_TO_ADDR
// end ;
17773: GO 17713
17775: POP
17776: POP
// end ;
17777: LD_VAR 0 1
17781: RET
// export function hHackInvisible ; var i , j ; begin
17782: LD_INT 0
17784: PPUSH
17785: PPUSH
17786: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17787: LD_ADDR_VAR 0 2
17791: PUSH
17792: LD_INT 21
17794: PUSH
17795: LD_INT 1
17797: PUSH
17798: EMPTY
17799: LIST
17800: LIST
17801: PPUSH
17802: CALL_OW 69
17806: PUSH
17807: FOR_IN
17808: IFFALSE 17832
// if IsSelected ( i ) then
17810: LD_VAR 0 2
17814: PPUSH
17815: CALL_OW 306
17819: IFFALSE 17830
// ComForceInvisible ( i ) ;
17821: LD_VAR 0 2
17825: PPUSH
17826: CALL_OW 496
17830: GO 17807
17832: POP
17833: POP
// end ;
17834: LD_VAR 0 1
17838: RET
// export function hHackChangeYourSide ; begin
17839: LD_INT 0
17841: PPUSH
// if your_side = 8 then
17842: LD_OWVAR 2
17846: PUSH
17847: LD_INT 8
17849: EQUAL
17850: IFFALSE 17862
// your_side := 0 else
17852: LD_ADDR_OWVAR 2
17856: PUSH
17857: LD_INT 0
17859: ST_TO_ADDR
17860: GO 17876
// your_side := your_side + 1 ;
17862: LD_ADDR_OWVAR 2
17866: PUSH
17867: LD_OWVAR 2
17871: PUSH
17872: LD_INT 1
17874: PLUS
17875: ST_TO_ADDR
// end ;
17876: LD_VAR 0 1
17880: RET
// export function hHackChangeUnitSide ; var i , j ; begin
17881: LD_INT 0
17883: PPUSH
17884: PPUSH
17885: PPUSH
// for i in all_units do
17886: LD_ADDR_VAR 0 2
17890: PUSH
17891: LD_OWVAR 3
17895: PUSH
17896: FOR_IN
17897: IFFALSE 17975
// if IsSelected ( i ) then
17899: LD_VAR 0 2
17903: PPUSH
17904: CALL_OW 306
17908: IFFALSE 17973
// begin j := GetSide ( i ) ;
17910: LD_ADDR_VAR 0 3
17914: PUSH
17915: LD_VAR 0 2
17919: PPUSH
17920: CALL_OW 255
17924: ST_TO_ADDR
// if j = 8 then
17925: LD_VAR 0 3
17929: PUSH
17930: LD_INT 8
17932: EQUAL
17933: IFFALSE 17945
// j := 0 else
17935: LD_ADDR_VAR 0 3
17939: PUSH
17940: LD_INT 0
17942: ST_TO_ADDR
17943: GO 17959
// j := j + 1 ;
17945: LD_ADDR_VAR 0 3
17949: PUSH
17950: LD_VAR 0 3
17954: PUSH
17955: LD_INT 1
17957: PLUS
17958: ST_TO_ADDR
// SetSide ( i , j ) ;
17959: LD_VAR 0 2
17963: PPUSH
17964: LD_VAR 0 3
17968: PPUSH
17969: CALL_OW 235
// end ;
17973: GO 17896
17975: POP
17976: POP
// end ;
17977: LD_VAR 0 1
17981: RET
// export function hHackFog ; begin
17982: LD_INT 0
17984: PPUSH
// FogOff ( true ) ;
17985: LD_INT 1
17987: PPUSH
17988: CALL_OW 344
// end ;
17992: LD_VAR 0 1
17996: RET
// export function hHackTeleport ( unit , x , y ) ; begin
17997: LD_INT 0
17999: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18000: LD_VAR 0 1
18004: PPUSH
18005: LD_VAR 0 2
18009: PPUSH
18010: LD_VAR 0 3
18014: PPUSH
18015: LD_INT 1
18017: PPUSH
18018: LD_INT 1
18020: PPUSH
18021: CALL_OW 483
// CenterOnXY ( x , y ) ;
18025: LD_VAR 0 2
18029: PPUSH
18030: LD_VAR 0 3
18034: PPUSH
18035: CALL_OW 84
// end ; end_of_file
18039: LD_VAR 0 4
18043: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
18044: LD_INT 0
18046: PPUSH
18047: PPUSH
18048: PPUSH
18049: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
18050: LD_VAR 0 1
18054: PPUSH
18055: CALL_OW 264
18059: PUSH
18060: LD_EXP 43
18064: EQUAL
18065: IFFALSE 18137
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
18067: LD_INT 68
18069: PPUSH
18070: LD_VAR 0 1
18074: PPUSH
18075: CALL_OW 255
18079: PPUSH
18080: CALL_OW 321
18084: PUSH
18085: LD_INT 2
18087: EQUAL
18088: IFFALSE 18100
// eff := 70 else
18090: LD_ADDR_VAR 0 4
18094: PUSH
18095: LD_INT 70
18097: ST_TO_ADDR
18098: GO 18108
// eff := 30 ;
18100: LD_ADDR_VAR 0 4
18104: PUSH
18105: LD_INT 30
18107: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
18108: LD_VAR 0 1
18112: PPUSH
18113: CALL_OW 250
18117: PPUSH
18118: LD_VAR 0 1
18122: PPUSH
18123: CALL_OW 251
18127: PPUSH
18128: LD_VAR 0 4
18132: PPUSH
18133: CALL_OW 495
// end ; end ;
18137: LD_VAR 0 2
18141: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
18142: LD_INT 0
18144: PPUSH
// end ;
18145: LD_VAR 0 4
18149: RET
// export function SOS_Command ( cmd ) ; begin
18150: LD_INT 0
18152: PPUSH
// end ;
18153: LD_VAR 0 2
18157: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
18158: LD_INT 0
18160: PPUSH
// end ;
18161: LD_VAR 0 6
18165: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
18166: LD_INT 0
18168: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
18169: LD_VAR 0 1
18173: PUSH
18174: LD_INT 250
18176: EQUAL
18177: PUSH
18178: LD_VAR 0 2
18182: PPUSH
18183: CALL_OW 264
18187: PUSH
18188: LD_EXP 46
18192: EQUAL
18193: AND
18194: IFFALSE 18215
// MinerPlaceMine ( unit , x , y ) ;
18196: LD_VAR 0 2
18200: PPUSH
18201: LD_VAR 0 4
18205: PPUSH
18206: LD_VAR 0 5
18210: PPUSH
18211: CALL 20564 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
18215: LD_VAR 0 1
18219: PUSH
18220: LD_INT 251
18222: EQUAL
18223: PUSH
18224: LD_VAR 0 2
18228: PPUSH
18229: CALL_OW 264
18233: PUSH
18234: LD_EXP 46
18238: EQUAL
18239: AND
18240: IFFALSE 18261
// MinerDetonateMine ( unit , x , y ) ;
18242: LD_VAR 0 2
18246: PPUSH
18247: LD_VAR 0 4
18251: PPUSH
18252: LD_VAR 0 5
18256: PPUSH
18257: CALL 20841 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
18261: LD_VAR 0 1
18265: PUSH
18266: LD_INT 252
18268: EQUAL
18269: PUSH
18270: LD_VAR 0 2
18274: PPUSH
18275: CALL_OW 264
18279: PUSH
18280: LD_EXP 46
18284: EQUAL
18285: AND
18286: IFFALSE 18307
// MinerCreateMinefield ( unit , x , y ) ;
18288: LD_VAR 0 2
18292: PPUSH
18293: LD_VAR 0 4
18297: PPUSH
18298: LD_VAR 0 5
18302: PPUSH
18303: CALL 21258 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
18307: LD_VAR 0 1
18311: PUSH
18312: LD_INT 253
18314: EQUAL
18315: PUSH
18316: LD_VAR 0 2
18320: PPUSH
18321: CALL_OW 257
18325: PUSH
18326: LD_INT 5
18328: EQUAL
18329: AND
18330: IFFALSE 18351
// ComBinocular ( unit , x , y ) ;
18332: LD_VAR 0 2
18336: PPUSH
18337: LD_VAR 0 4
18341: PPUSH
18342: LD_VAR 0 5
18346: PPUSH
18347: CALL 21629 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
18351: LD_VAR 0 1
18355: PUSH
18356: LD_INT 254
18358: EQUAL
18359: PUSH
18360: LD_VAR 0 2
18364: PPUSH
18365: CALL_OW 264
18369: PUSH
18370: LD_EXP 41
18374: EQUAL
18375: AND
18376: PUSH
18377: LD_VAR 0 3
18381: PPUSH
18382: CALL_OW 263
18386: PUSH
18387: LD_INT 3
18389: EQUAL
18390: AND
18391: IFFALSE 18407
// HackDestroyVehicle ( unit , selectedUnit ) ;
18393: LD_VAR 0 2
18397: PPUSH
18398: LD_VAR 0 3
18402: PPUSH
18403: CALL 19924 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
18407: LD_VAR 0 1
18411: PUSH
18412: LD_INT 255
18414: EQUAL
18415: PUSH
18416: LD_VAR 0 2
18420: PPUSH
18421: CALL_OW 264
18425: PUSH
18426: LD_INT 14
18428: PUSH
18429: LD_INT 53
18431: PUSH
18432: EMPTY
18433: LIST
18434: LIST
18435: IN
18436: AND
18437: PUSH
18438: LD_VAR 0 4
18442: PPUSH
18443: LD_VAR 0 5
18447: PPUSH
18448: CALL_OW 488
18452: AND
18453: IFFALSE 18477
// CutTreeXYR ( unit , x , y , 12 ) ;
18455: LD_VAR 0 2
18459: PPUSH
18460: LD_VAR 0 4
18464: PPUSH
18465: LD_VAR 0 5
18469: PPUSH
18470: LD_INT 12
18472: PPUSH
18473: CALL 18490 0 4
// end ;
18477: LD_VAR 0 6
18481: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
18482: LD_INT 0
18484: PPUSH
// end ;
18485: LD_VAR 0 4
18489: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
18490: LD_INT 0
18492: PPUSH
18493: PPUSH
18494: PPUSH
18495: PPUSH
18496: PPUSH
18497: PPUSH
18498: PPUSH
18499: PPUSH
18500: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
18501: LD_VAR 0 1
18505: NOT
18506: PUSH
18507: LD_VAR 0 2
18511: PPUSH
18512: LD_VAR 0 3
18516: PPUSH
18517: CALL_OW 488
18521: NOT
18522: OR
18523: PUSH
18524: LD_VAR 0 4
18528: NOT
18529: OR
18530: IFFALSE 18534
// exit ;
18532: GO 18874
// list := [ ] ;
18534: LD_ADDR_VAR 0 13
18538: PUSH
18539: EMPTY
18540: ST_TO_ADDR
// if x - r < 0 then
18541: LD_VAR 0 2
18545: PUSH
18546: LD_VAR 0 4
18550: MINUS
18551: PUSH
18552: LD_INT 0
18554: LESS
18555: IFFALSE 18567
// min_x := 0 else
18557: LD_ADDR_VAR 0 7
18561: PUSH
18562: LD_INT 0
18564: ST_TO_ADDR
18565: GO 18583
// min_x := x - r ;
18567: LD_ADDR_VAR 0 7
18571: PUSH
18572: LD_VAR 0 2
18576: PUSH
18577: LD_VAR 0 4
18581: MINUS
18582: ST_TO_ADDR
// if y - r < 0 then
18583: LD_VAR 0 3
18587: PUSH
18588: LD_VAR 0 4
18592: MINUS
18593: PUSH
18594: LD_INT 0
18596: LESS
18597: IFFALSE 18609
// min_y := 0 else
18599: LD_ADDR_VAR 0 8
18603: PUSH
18604: LD_INT 0
18606: ST_TO_ADDR
18607: GO 18625
// min_y := y - r ;
18609: LD_ADDR_VAR 0 8
18613: PUSH
18614: LD_VAR 0 3
18618: PUSH
18619: LD_VAR 0 4
18623: MINUS
18624: ST_TO_ADDR
// max_x := x + r ;
18625: LD_ADDR_VAR 0 9
18629: PUSH
18630: LD_VAR 0 2
18634: PUSH
18635: LD_VAR 0 4
18639: PLUS
18640: ST_TO_ADDR
// max_y := y + r ;
18641: LD_ADDR_VAR 0 10
18645: PUSH
18646: LD_VAR 0 3
18650: PUSH
18651: LD_VAR 0 4
18655: PLUS
18656: ST_TO_ADDR
// for _x = min_x to max_x do
18657: LD_ADDR_VAR 0 11
18661: PUSH
18662: DOUBLE
18663: LD_VAR 0 7
18667: DEC
18668: ST_TO_ADDR
18669: LD_VAR 0 9
18673: PUSH
18674: FOR_TO
18675: IFFALSE 18792
// for _y = min_y to max_y do
18677: LD_ADDR_VAR 0 12
18681: PUSH
18682: DOUBLE
18683: LD_VAR 0 8
18687: DEC
18688: ST_TO_ADDR
18689: LD_VAR 0 10
18693: PUSH
18694: FOR_TO
18695: IFFALSE 18788
// begin if not ValidHex ( _x , _y ) then
18697: LD_VAR 0 11
18701: PPUSH
18702: LD_VAR 0 12
18706: PPUSH
18707: CALL_OW 488
18711: NOT
18712: IFFALSE 18716
// continue ;
18714: GO 18694
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
18716: LD_VAR 0 11
18720: PPUSH
18721: LD_VAR 0 12
18725: PPUSH
18726: CALL_OW 351
18730: PUSH
18731: LD_VAR 0 11
18735: PPUSH
18736: LD_VAR 0 12
18740: PPUSH
18741: CALL_OW 554
18745: AND
18746: IFFALSE 18786
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
18748: LD_ADDR_VAR 0 13
18752: PUSH
18753: LD_VAR 0 13
18757: PPUSH
18758: LD_VAR 0 13
18762: PUSH
18763: LD_INT 1
18765: PLUS
18766: PPUSH
18767: LD_VAR 0 11
18771: PUSH
18772: LD_VAR 0 12
18776: PUSH
18777: EMPTY
18778: LIST
18779: LIST
18780: PPUSH
18781: CALL_OW 2
18785: ST_TO_ADDR
// end ;
18786: GO 18694
18788: POP
18789: POP
18790: GO 18674
18792: POP
18793: POP
// if not list then
18794: LD_VAR 0 13
18798: NOT
18799: IFFALSE 18803
// exit ;
18801: GO 18874
// for i in list do
18803: LD_ADDR_VAR 0 6
18807: PUSH
18808: LD_VAR 0 13
18812: PUSH
18813: FOR_IN
18814: IFFALSE 18872
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
18816: LD_VAR 0 1
18820: PPUSH
18821: LD_STRING M
18823: PUSH
18824: LD_VAR 0 6
18828: PUSH
18829: LD_INT 1
18831: ARRAY
18832: PUSH
18833: LD_VAR 0 6
18837: PUSH
18838: LD_INT 2
18840: ARRAY
18841: PUSH
18842: LD_INT 0
18844: PUSH
18845: LD_INT 0
18847: PUSH
18848: LD_INT 0
18850: PUSH
18851: LD_INT 0
18853: PUSH
18854: EMPTY
18855: LIST
18856: LIST
18857: LIST
18858: LIST
18859: LIST
18860: LIST
18861: LIST
18862: PUSH
18863: EMPTY
18864: LIST
18865: PPUSH
18866: CALL_OW 447
18870: GO 18813
18872: POP
18873: POP
// end ;
18874: LD_VAR 0 5
18878: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
18879: LD_EXP 118
18883: NOT
18884: IFFALSE 18934
18886: GO 18888
18888: DISABLE
// begin initHack := true ;
18889: LD_ADDR_EXP 118
18893: PUSH
18894: LD_INT 1
18896: ST_TO_ADDR
// hackTanks := [ ] ;
18897: LD_ADDR_EXP 119
18901: PUSH
18902: EMPTY
18903: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
18904: LD_ADDR_EXP 120
18908: PUSH
18909: EMPTY
18910: ST_TO_ADDR
// hackLimit := 3 ;
18911: LD_ADDR_EXP 121
18915: PUSH
18916: LD_INT 3
18918: ST_TO_ADDR
// hackDist := 12 ;
18919: LD_ADDR_EXP 122
18923: PUSH
18924: LD_INT 12
18926: ST_TO_ADDR
// hackCounter := [ ] ;
18927: LD_ADDR_EXP 123
18931: PUSH
18932: EMPTY
18933: ST_TO_ADDR
// end ;
18934: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
18935: LD_EXP 118
18939: PUSH
18940: LD_INT 34
18942: PUSH
18943: LD_EXP 41
18947: PUSH
18948: EMPTY
18949: LIST
18950: LIST
18951: PPUSH
18952: CALL_OW 69
18956: AND
18957: IFFALSE 19212
18959: GO 18961
18961: DISABLE
18962: LD_INT 0
18964: PPUSH
18965: PPUSH
// begin enable ;
18966: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
18967: LD_ADDR_VAR 0 1
18971: PUSH
18972: LD_INT 34
18974: PUSH
18975: LD_EXP 41
18979: PUSH
18980: EMPTY
18981: LIST
18982: LIST
18983: PPUSH
18984: CALL_OW 69
18988: PUSH
18989: FOR_IN
18990: IFFALSE 19210
// begin if not i in hackTanks then
18992: LD_VAR 0 1
18996: PUSH
18997: LD_EXP 119
19001: IN
19002: NOT
19003: IFFALSE 19086
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
19005: LD_ADDR_EXP 119
19009: PUSH
19010: LD_EXP 119
19014: PPUSH
19015: LD_EXP 119
19019: PUSH
19020: LD_INT 1
19022: PLUS
19023: PPUSH
19024: LD_VAR 0 1
19028: PPUSH
19029: CALL_OW 1
19033: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
19034: LD_ADDR_EXP 120
19038: PUSH
19039: LD_EXP 120
19043: PPUSH
19044: LD_EXP 120
19048: PUSH
19049: LD_INT 1
19051: PLUS
19052: PPUSH
19053: EMPTY
19054: PPUSH
19055: CALL_OW 1
19059: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
19060: LD_ADDR_EXP 123
19064: PUSH
19065: LD_EXP 123
19069: PPUSH
19070: LD_EXP 123
19074: PUSH
19075: LD_INT 1
19077: PLUS
19078: PPUSH
19079: EMPTY
19080: PPUSH
19081: CALL_OW 1
19085: ST_TO_ADDR
// end ; if not IsOk ( i ) then
19086: LD_VAR 0 1
19090: PPUSH
19091: CALL_OW 302
19095: NOT
19096: IFFALSE 19109
// begin HackUnlinkAll ( i ) ;
19098: LD_VAR 0 1
19102: PPUSH
19103: CALL 19215 0 1
// continue ;
19107: GO 18989
// end ; HackCheckCapturedStatus ( i ) ;
19109: LD_VAR 0 1
19113: PPUSH
19114: CALL 19658 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
19118: LD_ADDR_VAR 0 2
19122: PUSH
19123: LD_INT 81
19125: PUSH
19126: LD_VAR 0 1
19130: PPUSH
19131: CALL_OW 255
19135: PUSH
19136: EMPTY
19137: LIST
19138: LIST
19139: PUSH
19140: LD_INT 33
19142: PUSH
19143: LD_INT 3
19145: PUSH
19146: EMPTY
19147: LIST
19148: LIST
19149: PUSH
19150: LD_INT 91
19152: PUSH
19153: LD_VAR 0 1
19157: PUSH
19158: LD_EXP 122
19162: PUSH
19163: EMPTY
19164: LIST
19165: LIST
19166: LIST
19167: PUSH
19168: LD_INT 50
19170: PUSH
19171: EMPTY
19172: LIST
19173: PUSH
19174: EMPTY
19175: LIST
19176: LIST
19177: LIST
19178: LIST
19179: PPUSH
19180: CALL_OW 69
19184: ST_TO_ADDR
// if not tmp then
19185: LD_VAR 0 2
19189: NOT
19190: IFFALSE 19194
// continue ;
19192: GO 18989
// HackLink ( i , tmp ) ;
19194: LD_VAR 0 1
19198: PPUSH
19199: LD_VAR 0 2
19203: PPUSH
19204: CALL 19351 0 2
// end ;
19208: GO 18989
19210: POP
19211: POP
// end ;
19212: PPOPN 2
19214: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
19215: LD_INT 0
19217: PPUSH
19218: PPUSH
19219: PPUSH
// if not hack in hackTanks then
19220: LD_VAR 0 1
19224: PUSH
19225: LD_EXP 119
19229: IN
19230: NOT
19231: IFFALSE 19235
// exit ;
19233: GO 19346
// index := GetElementIndex ( hackTanks , hack ) ;
19235: LD_ADDR_VAR 0 4
19239: PUSH
19240: LD_EXP 119
19244: PPUSH
19245: LD_VAR 0 1
19249: PPUSH
19250: CALL 26820 0 2
19254: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
19255: LD_EXP 120
19259: PUSH
19260: LD_VAR 0 4
19264: ARRAY
19265: IFFALSE 19346
// begin for i in hackTanksCaptured [ index ] do
19267: LD_ADDR_VAR 0 3
19271: PUSH
19272: LD_EXP 120
19276: PUSH
19277: LD_VAR 0 4
19281: ARRAY
19282: PUSH
19283: FOR_IN
19284: IFFALSE 19310
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
19286: LD_VAR 0 3
19290: PUSH
19291: LD_INT 1
19293: ARRAY
19294: PPUSH
19295: LD_VAR 0 3
19299: PUSH
19300: LD_INT 2
19302: ARRAY
19303: PPUSH
19304: CALL_OW 235
19308: GO 19283
19310: POP
19311: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
19312: LD_ADDR_EXP 120
19316: PUSH
19317: LD_EXP 120
19321: PPUSH
19322: LD_VAR 0 4
19326: PPUSH
19327: EMPTY
19328: PPUSH
19329: CALL_OW 1
19333: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
19334: LD_VAR 0 1
19338: PPUSH
19339: LD_INT 0
19341: PPUSH
19342: CALL_OW 505
// end ; end ;
19346: LD_VAR 0 2
19350: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
19351: LD_INT 0
19353: PPUSH
19354: PPUSH
19355: PPUSH
// if not hack in hackTanks or not vehicles then
19356: LD_VAR 0 1
19360: PUSH
19361: LD_EXP 119
19365: IN
19366: NOT
19367: PUSH
19368: LD_VAR 0 2
19372: NOT
19373: OR
19374: IFFALSE 19378
// exit ;
19376: GO 19653
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
19378: LD_ADDR_VAR 0 2
19382: PUSH
19383: LD_VAR 0 1
19387: PPUSH
19388: LD_VAR 0 2
19392: PPUSH
19393: LD_INT 1
19395: PPUSH
19396: LD_INT 1
19398: PPUSH
19399: CALL 27470 0 4
19403: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
19404: LD_ADDR_VAR 0 5
19408: PUSH
19409: LD_EXP 119
19413: PPUSH
19414: LD_VAR 0 1
19418: PPUSH
19419: CALL 26820 0 2
19423: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
19424: LD_EXP 120
19428: PUSH
19429: LD_VAR 0 5
19433: ARRAY
19434: PUSH
19435: LD_EXP 121
19439: LESS
19440: IFFALSE 19629
// begin for i := 1 to vehicles do
19442: LD_ADDR_VAR 0 4
19446: PUSH
19447: DOUBLE
19448: LD_INT 1
19450: DEC
19451: ST_TO_ADDR
19452: LD_VAR 0 2
19456: PUSH
19457: FOR_TO
19458: IFFALSE 19627
// begin if hackTanksCaptured [ index ] = hackLimit then
19460: LD_EXP 120
19464: PUSH
19465: LD_VAR 0 5
19469: ARRAY
19470: PUSH
19471: LD_EXP 121
19475: EQUAL
19476: IFFALSE 19480
// break ;
19478: GO 19627
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
19480: LD_ADDR_EXP 123
19484: PUSH
19485: LD_EXP 123
19489: PPUSH
19490: LD_VAR 0 5
19494: PPUSH
19495: LD_EXP 123
19499: PUSH
19500: LD_VAR 0 5
19504: ARRAY
19505: PUSH
19506: LD_INT 1
19508: PLUS
19509: PPUSH
19510: CALL_OW 1
19514: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
19515: LD_ADDR_EXP 120
19519: PUSH
19520: LD_EXP 120
19524: PPUSH
19525: LD_VAR 0 5
19529: PUSH
19530: LD_EXP 120
19534: PUSH
19535: LD_VAR 0 5
19539: ARRAY
19540: PUSH
19541: LD_INT 1
19543: PLUS
19544: PUSH
19545: EMPTY
19546: LIST
19547: LIST
19548: PPUSH
19549: LD_VAR 0 2
19553: PUSH
19554: LD_VAR 0 4
19558: ARRAY
19559: PUSH
19560: LD_VAR 0 2
19564: PUSH
19565: LD_VAR 0 4
19569: ARRAY
19570: PPUSH
19571: CALL_OW 255
19575: PUSH
19576: EMPTY
19577: LIST
19578: LIST
19579: PPUSH
19580: CALL 27035 0 3
19584: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
19585: LD_VAR 0 2
19589: PUSH
19590: LD_VAR 0 4
19594: ARRAY
19595: PPUSH
19596: LD_VAR 0 1
19600: PPUSH
19601: CALL_OW 255
19605: PPUSH
19606: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
19610: LD_VAR 0 2
19614: PUSH
19615: LD_VAR 0 4
19619: ARRAY
19620: PPUSH
19621: CALL_OW 141
// end ;
19625: GO 19457
19627: POP
19628: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19629: LD_VAR 0 1
19633: PPUSH
19634: LD_EXP 120
19638: PUSH
19639: LD_VAR 0 5
19643: ARRAY
19644: PUSH
19645: LD_INT 0
19647: PLUS
19648: PPUSH
19649: CALL_OW 505
// end ;
19653: LD_VAR 0 3
19657: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
19658: LD_INT 0
19660: PPUSH
19661: PPUSH
19662: PPUSH
19663: PPUSH
// if not hack in hackTanks then
19664: LD_VAR 0 1
19668: PUSH
19669: LD_EXP 119
19673: IN
19674: NOT
19675: IFFALSE 19679
// exit ;
19677: GO 19919
// index := GetElementIndex ( hackTanks , hack ) ;
19679: LD_ADDR_VAR 0 4
19683: PUSH
19684: LD_EXP 119
19688: PPUSH
19689: LD_VAR 0 1
19693: PPUSH
19694: CALL 26820 0 2
19698: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
19699: LD_ADDR_VAR 0 3
19703: PUSH
19704: DOUBLE
19705: LD_EXP 120
19709: PUSH
19710: LD_VAR 0 4
19714: ARRAY
19715: INC
19716: ST_TO_ADDR
19717: LD_INT 1
19719: PUSH
19720: FOR_DOWNTO
19721: IFFALSE 19893
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
19723: LD_ADDR_VAR 0 5
19727: PUSH
19728: LD_EXP 120
19732: PUSH
19733: LD_VAR 0 4
19737: ARRAY
19738: PUSH
19739: LD_VAR 0 3
19743: ARRAY
19744: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
19745: LD_VAR 0 5
19749: PUSH
19750: LD_INT 1
19752: ARRAY
19753: PPUSH
19754: CALL_OW 302
19758: NOT
19759: PUSH
19760: LD_VAR 0 5
19764: PUSH
19765: LD_INT 1
19767: ARRAY
19768: PPUSH
19769: CALL_OW 255
19773: PUSH
19774: LD_VAR 0 1
19778: PPUSH
19779: CALL_OW 255
19783: NONEQUAL
19784: OR
19785: IFFALSE 19891
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
19787: LD_VAR 0 5
19791: PUSH
19792: LD_INT 1
19794: ARRAY
19795: PPUSH
19796: CALL_OW 305
19800: PUSH
19801: LD_VAR 0 5
19805: PUSH
19806: LD_INT 1
19808: ARRAY
19809: PPUSH
19810: CALL_OW 255
19814: PUSH
19815: LD_VAR 0 1
19819: PPUSH
19820: CALL_OW 255
19824: EQUAL
19825: AND
19826: IFFALSE 19850
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
19828: LD_VAR 0 5
19832: PUSH
19833: LD_INT 1
19835: ARRAY
19836: PPUSH
19837: LD_VAR 0 5
19841: PUSH
19842: LD_INT 2
19844: ARRAY
19845: PPUSH
19846: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
19850: LD_ADDR_EXP 120
19854: PUSH
19855: LD_EXP 120
19859: PPUSH
19860: LD_VAR 0 4
19864: PPUSH
19865: LD_EXP 120
19869: PUSH
19870: LD_VAR 0 4
19874: ARRAY
19875: PPUSH
19876: LD_VAR 0 3
19880: PPUSH
19881: CALL_OW 3
19885: PPUSH
19886: CALL_OW 1
19890: ST_TO_ADDR
// end ; end ;
19891: GO 19720
19893: POP
19894: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
19895: LD_VAR 0 1
19899: PPUSH
19900: LD_EXP 120
19904: PUSH
19905: LD_VAR 0 4
19909: ARRAY
19910: PUSH
19911: LD_INT 0
19913: PLUS
19914: PPUSH
19915: CALL_OW 505
// end ;
19919: LD_VAR 0 2
19923: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
19924: LD_INT 0
19926: PPUSH
19927: PPUSH
19928: PPUSH
19929: PPUSH
// if not hack in hackTanks then
19930: LD_VAR 0 1
19934: PUSH
19935: LD_EXP 119
19939: IN
19940: NOT
19941: IFFALSE 19945
// exit ;
19943: GO 20030
// index := GetElementIndex ( hackTanks , hack ) ;
19945: LD_ADDR_VAR 0 5
19949: PUSH
19950: LD_EXP 119
19954: PPUSH
19955: LD_VAR 0 1
19959: PPUSH
19960: CALL 26820 0 2
19964: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
19965: LD_ADDR_VAR 0 4
19969: PUSH
19970: DOUBLE
19971: LD_INT 1
19973: DEC
19974: ST_TO_ADDR
19975: LD_EXP 120
19979: PUSH
19980: LD_VAR 0 5
19984: ARRAY
19985: PUSH
19986: FOR_TO
19987: IFFALSE 20028
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
19989: LD_EXP 120
19993: PUSH
19994: LD_VAR 0 5
19998: ARRAY
19999: PUSH
20000: LD_VAR 0 4
20004: ARRAY
20005: PUSH
20006: LD_INT 1
20008: ARRAY
20009: PUSH
20010: LD_VAR 0 2
20014: EQUAL
20015: IFFALSE 20026
// KillUnit ( vehicle ) ;
20017: LD_VAR 0 2
20021: PPUSH
20022: CALL_OW 66
20026: GO 19986
20028: POP
20029: POP
// end ;
20030: LD_VAR 0 3
20034: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
20035: LD_EXP 124
20039: NOT
20040: IFFALSE 20075
20042: GO 20044
20044: DISABLE
// begin initMiner := true ;
20045: LD_ADDR_EXP 124
20049: PUSH
20050: LD_INT 1
20052: ST_TO_ADDR
// minersList := [ ] ;
20053: LD_ADDR_EXP 125
20057: PUSH
20058: EMPTY
20059: ST_TO_ADDR
// minerMinesList := [ ] ;
20060: LD_ADDR_EXP 126
20064: PUSH
20065: EMPTY
20066: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
20067: LD_ADDR_EXP 127
20071: PUSH
20072: LD_INT 5
20074: ST_TO_ADDR
// end ;
20075: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
20076: LD_EXP 124
20080: PUSH
20081: LD_INT 34
20083: PUSH
20084: LD_EXP 46
20088: PUSH
20089: EMPTY
20090: LIST
20091: LIST
20092: PPUSH
20093: CALL_OW 69
20097: AND
20098: IFFALSE 20561
20100: GO 20102
20102: DISABLE
20103: LD_INT 0
20105: PPUSH
20106: PPUSH
20107: PPUSH
20108: PPUSH
// begin enable ;
20109: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
20110: LD_ADDR_VAR 0 1
20114: PUSH
20115: LD_INT 34
20117: PUSH
20118: LD_EXP 46
20122: PUSH
20123: EMPTY
20124: LIST
20125: LIST
20126: PPUSH
20127: CALL_OW 69
20131: PUSH
20132: FOR_IN
20133: IFFALSE 20205
// begin if not i in minersList then
20135: LD_VAR 0 1
20139: PUSH
20140: LD_EXP 125
20144: IN
20145: NOT
20146: IFFALSE 20203
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
20148: LD_ADDR_EXP 125
20152: PUSH
20153: LD_EXP 125
20157: PPUSH
20158: LD_EXP 125
20162: PUSH
20163: LD_INT 1
20165: PLUS
20166: PPUSH
20167: LD_VAR 0 1
20171: PPUSH
20172: CALL_OW 1
20176: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20177: LD_ADDR_EXP 126
20181: PUSH
20182: LD_EXP 126
20186: PPUSH
20187: LD_EXP 126
20191: PUSH
20192: LD_INT 1
20194: PLUS
20195: PPUSH
20196: EMPTY
20197: PPUSH
20198: CALL_OW 1
20202: ST_TO_ADDR
// end end ;
20203: GO 20132
20205: POP
20206: POP
// for i := minerMinesList downto 1 do
20207: LD_ADDR_VAR 0 1
20211: PUSH
20212: DOUBLE
20213: LD_EXP 126
20217: INC
20218: ST_TO_ADDR
20219: LD_INT 1
20221: PUSH
20222: FOR_DOWNTO
20223: IFFALSE 20559
// begin if IsLive ( minersList [ i ] ) then
20225: LD_EXP 125
20229: PUSH
20230: LD_VAR 0 1
20234: ARRAY
20235: PPUSH
20236: CALL_OW 300
20240: IFFALSE 20268
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
20242: LD_EXP 125
20246: PUSH
20247: LD_VAR 0 1
20251: ARRAY
20252: PPUSH
20253: LD_EXP 126
20257: PUSH
20258: LD_VAR 0 1
20262: ARRAY
20263: PPUSH
20264: CALL_OW 505
// if not minerMinesList [ i ] then
20268: LD_EXP 126
20272: PUSH
20273: LD_VAR 0 1
20277: ARRAY
20278: NOT
20279: IFFALSE 20283
// continue ;
20281: GO 20222
// for j := minerMinesList [ i ] downto 1 do
20283: LD_ADDR_VAR 0 2
20287: PUSH
20288: DOUBLE
20289: LD_EXP 126
20293: PUSH
20294: LD_VAR 0 1
20298: ARRAY
20299: INC
20300: ST_TO_ADDR
20301: LD_INT 1
20303: PUSH
20304: FOR_DOWNTO
20305: IFFALSE 20555
// begin side := GetSide ( minersList [ i ] ) ;
20307: LD_ADDR_VAR 0 3
20311: PUSH
20312: LD_EXP 125
20316: PUSH
20317: LD_VAR 0 1
20321: ARRAY
20322: PPUSH
20323: CALL_OW 255
20327: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
20328: LD_ADDR_VAR 0 4
20332: PUSH
20333: LD_EXP 126
20337: PUSH
20338: LD_VAR 0 1
20342: ARRAY
20343: PUSH
20344: LD_VAR 0 2
20348: ARRAY
20349: PUSH
20350: LD_INT 1
20352: ARRAY
20353: PPUSH
20354: LD_EXP 126
20358: PUSH
20359: LD_VAR 0 1
20363: ARRAY
20364: PUSH
20365: LD_VAR 0 2
20369: ARRAY
20370: PUSH
20371: LD_INT 2
20373: ARRAY
20374: PPUSH
20375: CALL_OW 428
20379: ST_TO_ADDR
// if not tmp then
20380: LD_VAR 0 4
20384: NOT
20385: IFFALSE 20389
// continue ;
20387: GO 20304
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
20389: LD_VAR 0 4
20393: PUSH
20394: LD_INT 81
20396: PUSH
20397: LD_VAR 0 3
20401: PUSH
20402: EMPTY
20403: LIST
20404: LIST
20405: PPUSH
20406: CALL_OW 69
20410: IN
20411: PUSH
20412: LD_EXP 126
20416: PUSH
20417: LD_VAR 0 1
20421: ARRAY
20422: PUSH
20423: LD_VAR 0 2
20427: ARRAY
20428: PUSH
20429: LD_INT 1
20431: ARRAY
20432: PPUSH
20433: LD_EXP 126
20437: PUSH
20438: LD_VAR 0 1
20442: ARRAY
20443: PUSH
20444: LD_VAR 0 2
20448: ARRAY
20449: PUSH
20450: LD_INT 2
20452: ARRAY
20453: PPUSH
20454: CALL_OW 458
20458: AND
20459: IFFALSE 20553
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
20461: LD_EXP 126
20465: PUSH
20466: LD_VAR 0 1
20470: ARRAY
20471: PUSH
20472: LD_VAR 0 2
20476: ARRAY
20477: PUSH
20478: LD_INT 1
20480: ARRAY
20481: PPUSH
20482: LD_EXP 126
20486: PUSH
20487: LD_VAR 0 1
20491: ARRAY
20492: PUSH
20493: LD_VAR 0 2
20497: ARRAY
20498: PUSH
20499: LD_INT 2
20501: ARRAY
20502: PPUSH
20503: LD_VAR 0 3
20507: PPUSH
20508: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
20512: LD_ADDR_EXP 126
20516: PUSH
20517: LD_EXP 126
20521: PPUSH
20522: LD_VAR 0 1
20526: PPUSH
20527: LD_EXP 126
20531: PUSH
20532: LD_VAR 0 1
20536: ARRAY
20537: PPUSH
20538: LD_VAR 0 2
20542: PPUSH
20543: CALL_OW 3
20547: PPUSH
20548: CALL_OW 1
20552: ST_TO_ADDR
// end ; end ;
20553: GO 20304
20555: POP
20556: POP
// end ;
20557: GO 20222
20559: POP
20560: POP
// end ;
20561: PPOPN 4
20563: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
20564: LD_INT 0
20566: PPUSH
20567: PPUSH
// result := false ;
20568: LD_ADDR_VAR 0 4
20572: PUSH
20573: LD_INT 0
20575: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
20576: LD_VAR 0 1
20580: PPUSH
20581: CALL_OW 264
20585: PUSH
20586: LD_EXP 46
20590: EQUAL
20591: NOT
20592: IFFALSE 20596
// exit ;
20594: GO 20836
// index := GetElementIndex ( minersList , unit ) ;
20596: LD_ADDR_VAR 0 5
20600: PUSH
20601: LD_EXP 125
20605: PPUSH
20606: LD_VAR 0 1
20610: PPUSH
20611: CALL 26820 0 2
20615: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
20616: LD_EXP 126
20620: PUSH
20621: LD_VAR 0 5
20625: ARRAY
20626: PUSH
20627: LD_EXP 127
20631: GREATEREQUAL
20632: IFFALSE 20636
// exit ;
20634: GO 20836
// ComMoveXY ( unit , x , y ) ;
20636: LD_VAR 0 1
20640: PPUSH
20641: LD_VAR 0 2
20645: PPUSH
20646: LD_VAR 0 3
20650: PPUSH
20651: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
20655: LD_INT 35
20657: PPUSH
20658: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
20662: LD_VAR 0 1
20666: PPUSH
20667: LD_VAR 0 2
20671: PPUSH
20672: LD_VAR 0 3
20676: PPUSH
20677: CALL 57592 0 3
20681: NOT
20682: PUSH
20683: LD_VAR 0 1
20687: PPUSH
20688: CALL_OW 314
20692: AND
20693: IFFALSE 20697
// exit ;
20695: GO 20836
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
20697: LD_VAR 0 2
20701: PPUSH
20702: LD_VAR 0 3
20706: PPUSH
20707: CALL_OW 428
20711: PUSH
20712: LD_VAR 0 1
20716: EQUAL
20717: PUSH
20718: LD_VAR 0 1
20722: PPUSH
20723: CALL_OW 314
20727: NOT
20728: AND
20729: IFFALSE 20655
// PlaySoundXY ( x , y , PlantMine ) ;
20731: LD_VAR 0 2
20735: PPUSH
20736: LD_VAR 0 3
20740: PPUSH
20741: LD_STRING PlantMine
20743: PPUSH
20744: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
20748: LD_VAR 0 2
20752: PPUSH
20753: LD_VAR 0 3
20757: PPUSH
20758: LD_VAR 0 1
20762: PPUSH
20763: CALL_OW 255
20767: PPUSH
20768: LD_INT 0
20770: PPUSH
20771: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
20775: LD_ADDR_EXP 126
20779: PUSH
20780: LD_EXP 126
20784: PPUSH
20785: LD_VAR 0 5
20789: PUSH
20790: LD_EXP 126
20794: PUSH
20795: LD_VAR 0 5
20799: ARRAY
20800: PUSH
20801: LD_INT 1
20803: PLUS
20804: PUSH
20805: EMPTY
20806: LIST
20807: LIST
20808: PPUSH
20809: LD_VAR 0 2
20813: PUSH
20814: LD_VAR 0 3
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PPUSH
20823: CALL 27035 0 3
20827: ST_TO_ADDR
// result := true ;
20828: LD_ADDR_VAR 0 4
20832: PUSH
20833: LD_INT 1
20835: ST_TO_ADDR
// end ;
20836: LD_VAR 0 4
20840: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
20841: LD_INT 0
20843: PPUSH
20844: PPUSH
20845: PPUSH
// if not unit in minersList then
20846: LD_VAR 0 1
20850: PUSH
20851: LD_EXP 125
20855: IN
20856: NOT
20857: IFFALSE 20861
// exit ;
20859: GO 21253
// index := GetElementIndex ( minersList , unit ) ;
20861: LD_ADDR_VAR 0 6
20865: PUSH
20866: LD_EXP 125
20870: PPUSH
20871: LD_VAR 0 1
20875: PPUSH
20876: CALL 26820 0 2
20880: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
20881: LD_ADDR_VAR 0 5
20885: PUSH
20886: DOUBLE
20887: LD_EXP 126
20891: PUSH
20892: LD_VAR 0 6
20896: ARRAY
20897: INC
20898: ST_TO_ADDR
20899: LD_INT 1
20901: PUSH
20902: FOR_DOWNTO
20903: IFFALSE 21064
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
20905: LD_EXP 126
20909: PUSH
20910: LD_VAR 0 6
20914: ARRAY
20915: PUSH
20916: LD_VAR 0 5
20920: ARRAY
20921: PUSH
20922: LD_INT 1
20924: ARRAY
20925: PUSH
20926: LD_VAR 0 2
20930: EQUAL
20931: PUSH
20932: LD_EXP 126
20936: PUSH
20937: LD_VAR 0 6
20941: ARRAY
20942: PUSH
20943: LD_VAR 0 5
20947: ARRAY
20948: PUSH
20949: LD_INT 2
20951: ARRAY
20952: PUSH
20953: LD_VAR 0 3
20957: EQUAL
20958: AND
20959: IFFALSE 21062
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
20961: LD_EXP 126
20965: PUSH
20966: LD_VAR 0 6
20970: ARRAY
20971: PUSH
20972: LD_VAR 0 5
20976: ARRAY
20977: PUSH
20978: LD_INT 1
20980: ARRAY
20981: PPUSH
20982: LD_EXP 126
20986: PUSH
20987: LD_VAR 0 6
20991: ARRAY
20992: PUSH
20993: LD_VAR 0 5
20997: ARRAY
20998: PUSH
20999: LD_INT 2
21001: ARRAY
21002: PPUSH
21003: LD_VAR 0 1
21007: PPUSH
21008: CALL_OW 255
21012: PPUSH
21013: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21017: LD_ADDR_EXP 126
21021: PUSH
21022: LD_EXP 126
21026: PPUSH
21027: LD_VAR 0 6
21031: PPUSH
21032: LD_EXP 126
21036: PUSH
21037: LD_VAR 0 6
21041: ARRAY
21042: PPUSH
21043: LD_VAR 0 5
21047: PPUSH
21048: CALL_OW 3
21052: PPUSH
21053: CALL_OW 1
21057: ST_TO_ADDR
// exit ;
21058: POP
21059: POP
21060: GO 21253
// end ; end ;
21062: GO 20902
21064: POP
21065: POP
// for i := minerMinesList [ index ] downto 1 do
21066: LD_ADDR_VAR 0 5
21070: PUSH
21071: DOUBLE
21072: LD_EXP 126
21076: PUSH
21077: LD_VAR 0 6
21081: ARRAY
21082: INC
21083: ST_TO_ADDR
21084: LD_INT 1
21086: PUSH
21087: FOR_DOWNTO
21088: IFFALSE 21251
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
21090: LD_EXP 126
21094: PUSH
21095: LD_VAR 0 6
21099: ARRAY
21100: PUSH
21101: LD_VAR 0 5
21105: ARRAY
21106: PUSH
21107: LD_INT 1
21109: ARRAY
21110: PPUSH
21111: LD_EXP 126
21115: PUSH
21116: LD_VAR 0 6
21120: ARRAY
21121: PUSH
21122: LD_VAR 0 5
21126: ARRAY
21127: PUSH
21128: LD_INT 2
21130: ARRAY
21131: PPUSH
21132: LD_VAR 0 2
21136: PPUSH
21137: LD_VAR 0 3
21141: PPUSH
21142: CALL_OW 298
21146: PUSH
21147: LD_INT 6
21149: LESS
21150: IFFALSE 21249
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
21152: LD_EXP 126
21156: PUSH
21157: LD_VAR 0 6
21161: ARRAY
21162: PUSH
21163: LD_VAR 0 5
21167: ARRAY
21168: PUSH
21169: LD_INT 1
21171: ARRAY
21172: PPUSH
21173: LD_EXP 126
21177: PUSH
21178: LD_VAR 0 6
21182: ARRAY
21183: PUSH
21184: LD_VAR 0 5
21188: ARRAY
21189: PUSH
21190: LD_INT 2
21192: ARRAY
21193: PPUSH
21194: LD_VAR 0 1
21198: PPUSH
21199: CALL_OW 255
21203: PPUSH
21204: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
21208: LD_ADDR_EXP 126
21212: PUSH
21213: LD_EXP 126
21217: PPUSH
21218: LD_VAR 0 6
21222: PPUSH
21223: LD_EXP 126
21227: PUSH
21228: LD_VAR 0 6
21232: ARRAY
21233: PPUSH
21234: LD_VAR 0 5
21238: PPUSH
21239: CALL_OW 3
21243: PPUSH
21244: CALL_OW 1
21248: ST_TO_ADDR
// end ; end ;
21249: GO 21087
21251: POP
21252: POP
// end ;
21253: LD_VAR 0 4
21257: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
21258: LD_INT 0
21260: PPUSH
21261: PPUSH
21262: PPUSH
21263: PPUSH
21264: PPUSH
21265: PPUSH
21266: PPUSH
21267: PPUSH
21268: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
21269: LD_VAR 0 1
21273: PPUSH
21274: CALL_OW 264
21278: PUSH
21279: LD_EXP 46
21283: EQUAL
21284: NOT
21285: PUSH
21286: LD_VAR 0 1
21290: PUSH
21291: LD_EXP 125
21295: IN
21296: NOT
21297: OR
21298: IFFALSE 21302
// exit ;
21300: GO 21624
// index := GetElementIndex ( minersList , unit ) ;
21302: LD_ADDR_VAR 0 6
21306: PUSH
21307: LD_EXP 125
21311: PPUSH
21312: LD_VAR 0 1
21316: PPUSH
21317: CALL 26820 0 2
21321: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
21322: LD_ADDR_VAR 0 8
21326: PUSH
21327: LD_EXP 127
21331: PUSH
21332: LD_EXP 126
21336: PUSH
21337: LD_VAR 0 6
21341: ARRAY
21342: MINUS
21343: ST_TO_ADDR
// if not minesFreeAmount then
21344: LD_VAR 0 8
21348: NOT
21349: IFFALSE 21353
// exit ;
21351: GO 21624
// tmp := [ ] ;
21353: LD_ADDR_VAR 0 7
21357: PUSH
21358: EMPTY
21359: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
21360: LD_ADDR_VAR 0 5
21364: PUSH
21365: DOUBLE
21366: LD_INT 1
21368: DEC
21369: ST_TO_ADDR
21370: LD_VAR 0 8
21374: PUSH
21375: FOR_TO
21376: IFFALSE 21571
// begin _d := rand ( 0 , 5 ) ;
21378: LD_ADDR_VAR 0 11
21382: PUSH
21383: LD_INT 0
21385: PPUSH
21386: LD_INT 5
21388: PPUSH
21389: CALL_OW 12
21393: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
21394: LD_ADDR_VAR 0 12
21398: PUSH
21399: LD_INT 2
21401: PPUSH
21402: LD_INT 6
21404: PPUSH
21405: CALL_OW 12
21409: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
21410: LD_ADDR_VAR 0 9
21414: PUSH
21415: LD_VAR 0 2
21419: PPUSH
21420: LD_VAR 0 11
21424: PPUSH
21425: LD_VAR 0 12
21429: PPUSH
21430: CALL_OW 272
21434: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
21435: LD_ADDR_VAR 0 10
21439: PUSH
21440: LD_VAR 0 3
21444: PPUSH
21445: LD_VAR 0 11
21449: PPUSH
21450: LD_VAR 0 12
21454: PPUSH
21455: CALL_OW 273
21459: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
21460: LD_VAR 0 9
21464: PPUSH
21465: LD_VAR 0 10
21469: PPUSH
21470: CALL_OW 488
21474: PUSH
21475: LD_VAR 0 9
21479: PUSH
21480: LD_VAR 0 10
21484: PUSH
21485: EMPTY
21486: LIST
21487: LIST
21488: PUSH
21489: LD_VAR 0 7
21493: IN
21494: NOT
21495: AND
21496: PUSH
21497: LD_VAR 0 9
21501: PPUSH
21502: LD_VAR 0 10
21506: PPUSH
21507: CALL_OW 458
21511: NOT
21512: AND
21513: IFFALSE 21555
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
21515: LD_ADDR_VAR 0 7
21519: PUSH
21520: LD_VAR 0 7
21524: PPUSH
21525: LD_VAR 0 7
21529: PUSH
21530: LD_INT 1
21532: PLUS
21533: PPUSH
21534: LD_VAR 0 9
21538: PUSH
21539: LD_VAR 0 10
21543: PUSH
21544: EMPTY
21545: LIST
21546: LIST
21547: PPUSH
21548: CALL_OW 1
21552: ST_TO_ADDR
21553: GO 21569
// i := i - 1 ;
21555: LD_ADDR_VAR 0 5
21559: PUSH
21560: LD_VAR 0 5
21564: PUSH
21565: LD_INT 1
21567: MINUS
21568: ST_TO_ADDR
// end ;
21569: GO 21375
21571: POP
21572: POP
// for i in tmp do
21573: LD_ADDR_VAR 0 5
21577: PUSH
21578: LD_VAR 0 7
21582: PUSH
21583: FOR_IN
21584: IFFALSE 21622
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
21586: LD_VAR 0 1
21590: PPUSH
21591: LD_VAR 0 5
21595: PUSH
21596: LD_INT 1
21598: ARRAY
21599: PPUSH
21600: LD_VAR 0 5
21604: PUSH
21605: LD_INT 2
21607: ARRAY
21608: PPUSH
21609: CALL 20564 0 3
21613: NOT
21614: IFFALSE 21620
// exit ;
21616: POP
21617: POP
21618: GO 21624
21620: GO 21583
21622: POP
21623: POP
// end ;
21624: LD_VAR 0 4
21628: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
21629: LD_INT 0
21631: PPUSH
21632: PPUSH
21633: PPUSH
21634: PPUSH
21635: PPUSH
21636: PPUSH
21637: PPUSH
// if not GetClass ( unit ) = class_sniper then
21638: LD_VAR 0 1
21642: PPUSH
21643: CALL_OW 257
21647: PUSH
21648: LD_INT 5
21650: EQUAL
21651: NOT
21652: IFFALSE 21656
// exit ;
21654: GO 22044
// dist := 8 ;
21656: LD_ADDR_VAR 0 5
21660: PUSH
21661: LD_INT 8
21663: ST_TO_ADDR
// viewRange := 12 ;
21664: LD_ADDR_VAR 0 7
21668: PUSH
21669: LD_INT 12
21671: ST_TO_ADDR
// side := GetSide ( unit ) ;
21672: LD_ADDR_VAR 0 6
21676: PUSH
21677: LD_VAR 0 1
21681: PPUSH
21682: CALL_OW 255
21686: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
21687: LD_INT 61
21689: PPUSH
21690: LD_VAR 0 6
21694: PPUSH
21695: CALL_OW 321
21699: PUSH
21700: LD_INT 2
21702: EQUAL
21703: IFFALSE 21713
// viewRange := 16 ;
21705: LD_ADDR_VAR 0 7
21709: PUSH
21710: LD_INT 16
21712: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
21713: LD_VAR 0 1
21717: PPUSH
21718: LD_VAR 0 2
21722: PPUSH
21723: LD_VAR 0 3
21727: PPUSH
21728: CALL_OW 297
21732: PUSH
21733: LD_VAR 0 5
21737: GREATER
21738: IFFALSE 21817
// begin ComMoveXY ( unit , x , y ) ;
21740: LD_VAR 0 1
21744: PPUSH
21745: LD_VAR 0 2
21749: PPUSH
21750: LD_VAR 0 3
21754: PPUSH
21755: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21759: LD_INT 35
21761: PPUSH
21762: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
21766: LD_VAR 0 1
21770: PPUSH
21771: LD_VAR 0 2
21775: PPUSH
21776: LD_VAR 0 3
21780: PPUSH
21781: CALL 57592 0 3
21785: NOT
21786: IFFALSE 21790
// exit ;
21788: GO 22044
// until GetDistUnitXY ( unit , x , y ) < dist ;
21790: LD_VAR 0 1
21794: PPUSH
21795: LD_VAR 0 2
21799: PPUSH
21800: LD_VAR 0 3
21804: PPUSH
21805: CALL_OW 297
21809: PUSH
21810: LD_VAR 0 5
21814: LESS
21815: IFFALSE 21759
// end ; ComTurnXY ( unit , x , y ) ;
21817: LD_VAR 0 1
21821: PPUSH
21822: LD_VAR 0 2
21826: PPUSH
21827: LD_VAR 0 3
21831: PPUSH
21832: CALL_OW 118
// wait ( 5 ) ;
21836: LD_INT 5
21838: PPUSH
21839: CALL_OW 67
// _d := GetDir ( unit ) ;
21843: LD_ADDR_VAR 0 10
21847: PUSH
21848: LD_VAR 0 1
21852: PPUSH
21853: CALL_OW 254
21857: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
21858: LD_ADDR_VAR 0 8
21862: PUSH
21863: LD_VAR 0 1
21867: PPUSH
21868: CALL_OW 250
21872: PPUSH
21873: LD_VAR 0 10
21877: PPUSH
21878: LD_VAR 0 5
21882: PPUSH
21883: CALL_OW 272
21887: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
21888: LD_ADDR_VAR 0 9
21892: PUSH
21893: LD_VAR 0 1
21897: PPUSH
21898: CALL_OW 251
21902: PPUSH
21903: LD_VAR 0 10
21907: PPUSH
21908: LD_VAR 0 5
21912: PPUSH
21913: CALL_OW 273
21917: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21918: LD_VAR 0 8
21922: PPUSH
21923: LD_VAR 0 9
21927: PPUSH
21928: CALL_OW 488
21932: NOT
21933: IFFALSE 21937
// exit ;
21935: GO 22044
// ComAnimCustom ( unit , 1 ) ;
21937: LD_VAR 0 1
21941: PPUSH
21942: LD_INT 1
21944: PPUSH
21945: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
21949: LD_VAR 0 8
21953: PPUSH
21954: LD_VAR 0 9
21958: PPUSH
21959: LD_VAR 0 6
21963: PPUSH
21964: LD_VAR 0 7
21968: PPUSH
21969: CALL_OW 330
// repeat wait ( 1 ) ;
21973: LD_INT 1
21975: PPUSH
21976: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
21980: LD_VAR 0 1
21984: PPUSH
21985: CALL_OW 316
21989: PUSH
21990: LD_VAR 0 1
21994: PPUSH
21995: CALL_OW 314
21999: OR
22000: PUSH
22001: LD_VAR 0 1
22005: PPUSH
22006: CALL_OW 302
22010: NOT
22011: OR
22012: PUSH
22013: LD_VAR 0 1
22017: PPUSH
22018: CALL_OW 301
22022: OR
22023: IFFALSE 21973
// RemoveSeeing ( _x , _y , side ) ;
22025: LD_VAR 0 8
22029: PPUSH
22030: LD_VAR 0 9
22034: PPUSH
22035: LD_VAR 0 6
22039: PPUSH
22040: CALL_OW 331
// end ; end_of_file
22044: LD_VAR 0 4
22048: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22049: LD_INT 0
22051: PPUSH
22052: PPUSH
// if exist_mode then
22053: LD_VAR 0 2
22057: IFFALSE 22082
// unit := CreateCharacter ( prefix & ident ) else
22059: LD_ADDR_VAR 0 5
22063: PUSH
22064: LD_VAR 0 3
22068: PUSH
22069: LD_VAR 0 1
22073: STR
22074: PPUSH
22075: CALL_OW 34
22079: ST_TO_ADDR
22080: GO 22097
// unit := NewCharacter ( ident ) ;
22082: LD_ADDR_VAR 0 5
22086: PUSH
22087: LD_VAR 0 1
22091: PPUSH
22092: CALL_OW 25
22096: ST_TO_ADDR
// result := unit ;
22097: LD_ADDR_VAR 0 4
22101: PUSH
22102: LD_VAR 0 5
22106: ST_TO_ADDR
// end ;
22107: LD_VAR 0 4
22111: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22112: LD_INT 0
22114: PPUSH
22115: PPUSH
// if not side or not nation then
22116: LD_VAR 0 1
22120: NOT
22121: PUSH
22122: LD_VAR 0 2
22126: NOT
22127: OR
22128: IFFALSE 22132
// exit ;
22130: GO 22900
// case nation of nation_american :
22132: LD_VAR 0 2
22136: PUSH
22137: LD_INT 1
22139: DOUBLE
22140: EQUAL
22141: IFTRUE 22145
22143: GO 22359
22145: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22146: LD_ADDR_VAR 0 4
22150: PUSH
22151: LD_INT 35
22153: PUSH
22154: LD_INT 45
22156: PUSH
22157: LD_INT 46
22159: PUSH
22160: LD_INT 47
22162: PUSH
22163: LD_INT 82
22165: PUSH
22166: LD_INT 83
22168: PUSH
22169: LD_INT 84
22171: PUSH
22172: LD_INT 85
22174: PUSH
22175: LD_INT 86
22177: PUSH
22178: LD_INT 1
22180: PUSH
22181: LD_INT 2
22183: PUSH
22184: LD_INT 6
22186: PUSH
22187: LD_INT 15
22189: PUSH
22190: LD_INT 16
22192: PUSH
22193: LD_INT 7
22195: PUSH
22196: LD_INT 12
22198: PUSH
22199: LD_INT 13
22201: PUSH
22202: LD_INT 10
22204: PUSH
22205: LD_INT 14
22207: PUSH
22208: LD_INT 20
22210: PUSH
22211: LD_INT 21
22213: PUSH
22214: LD_INT 22
22216: PUSH
22217: LD_INT 25
22219: PUSH
22220: LD_INT 32
22222: PUSH
22223: LD_INT 27
22225: PUSH
22226: LD_INT 36
22228: PUSH
22229: LD_INT 69
22231: PUSH
22232: LD_INT 39
22234: PUSH
22235: LD_INT 34
22237: PUSH
22238: LD_INT 40
22240: PUSH
22241: LD_INT 48
22243: PUSH
22244: LD_INT 49
22246: PUSH
22247: LD_INT 50
22249: PUSH
22250: LD_INT 51
22252: PUSH
22253: LD_INT 52
22255: PUSH
22256: LD_INT 53
22258: PUSH
22259: LD_INT 54
22261: PUSH
22262: LD_INT 55
22264: PUSH
22265: LD_INT 56
22267: PUSH
22268: LD_INT 57
22270: PUSH
22271: LD_INT 58
22273: PUSH
22274: LD_INT 59
22276: PUSH
22277: LD_INT 60
22279: PUSH
22280: LD_INT 61
22282: PUSH
22283: LD_INT 62
22285: PUSH
22286: LD_INT 80
22288: PUSH
22289: LD_INT 82
22291: PUSH
22292: LD_INT 83
22294: PUSH
22295: LD_INT 84
22297: PUSH
22298: LD_INT 85
22300: PUSH
22301: LD_INT 86
22303: PUSH
22304: EMPTY
22305: LIST
22306: LIST
22307: LIST
22308: LIST
22309: LIST
22310: LIST
22311: LIST
22312: LIST
22313: LIST
22314: LIST
22315: LIST
22316: LIST
22317: LIST
22318: LIST
22319: LIST
22320: LIST
22321: LIST
22322: LIST
22323: LIST
22324: LIST
22325: LIST
22326: LIST
22327: LIST
22328: LIST
22329: LIST
22330: LIST
22331: LIST
22332: LIST
22333: LIST
22334: LIST
22335: LIST
22336: LIST
22337: LIST
22338: LIST
22339: LIST
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: LIST
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: LIST
22355: LIST
22356: ST_TO_ADDR
22357: GO 22824
22359: LD_INT 2
22361: DOUBLE
22362: EQUAL
22363: IFTRUE 22367
22365: GO 22593
22367: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22368: LD_ADDR_VAR 0 4
22372: PUSH
22373: LD_INT 35
22375: PUSH
22376: LD_INT 45
22378: PUSH
22379: LD_INT 46
22381: PUSH
22382: LD_INT 47
22384: PUSH
22385: LD_INT 82
22387: PUSH
22388: LD_INT 83
22390: PUSH
22391: LD_INT 84
22393: PUSH
22394: LD_INT 85
22396: PUSH
22397: LD_INT 87
22399: PUSH
22400: LD_INT 70
22402: PUSH
22403: LD_INT 1
22405: PUSH
22406: LD_INT 11
22408: PUSH
22409: LD_INT 3
22411: PUSH
22412: LD_INT 4
22414: PUSH
22415: LD_INT 5
22417: PUSH
22418: LD_INT 6
22420: PUSH
22421: LD_INT 15
22423: PUSH
22424: LD_INT 18
22426: PUSH
22427: LD_INT 7
22429: PUSH
22430: LD_INT 17
22432: PUSH
22433: LD_INT 8
22435: PUSH
22436: LD_INT 20
22438: PUSH
22439: LD_INT 21
22441: PUSH
22442: LD_INT 22
22444: PUSH
22445: LD_INT 72
22447: PUSH
22448: LD_INT 26
22450: PUSH
22451: LD_INT 69
22453: PUSH
22454: LD_INT 39
22456: PUSH
22457: LD_INT 40
22459: PUSH
22460: LD_INT 41
22462: PUSH
22463: LD_INT 42
22465: PUSH
22466: LD_INT 43
22468: PUSH
22469: LD_INT 48
22471: PUSH
22472: LD_INT 49
22474: PUSH
22475: LD_INT 50
22477: PUSH
22478: LD_INT 51
22480: PUSH
22481: LD_INT 52
22483: PUSH
22484: LD_INT 53
22486: PUSH
22487: LD_INT 54
22489: PUSH
22490: LD_INT 55
22492: PUSH
22493: LD_INT 56
22495: PUSH
22496: LD_INT 60
22498: PUSH
22499: LD_INT 61
22501: PUSH
22502: LD_INT 62
22504: PUSH
22505: LD_INT 66
22507: PUSH
22508: LD_INT 67
22510: PUSH
22511: LD_INT 68
22513: PUSH
22514: LD_INT 81
22516: PUSH
22517: LD_INT 82
22519: PUSH
22520: LD_INT 83
22522: PUSH
22523: LD_INT 84
22525: PUSH
22526: LD_INT 85
22528: PUSH
22529: LD_INT 87
22531: PUSH
22532: LD_INT 88
22534: PUSH
22535: EMPTY
22536: LIST
22537: LIST
22538: LIST
22539: LIST
22540: LIST
22541: LIST
22542: LIST
22543: LIST
22544: LIST
22545: LIST
22546: LIST
22547: LIST
22548: LIST
22549: LIST
22550: LIST
22551: LIST
22552: LIST
22553: LIST
22554: LIST
22555: LIST
22556: LIST
22557: LIST
22558: LIST
22559: LIST
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: LIST
22565: LIST
22566: LIST
22567: LIST
22568: LIST
22569: LIST
22570: LIST
22571: LIST
22572: LIST
22573: LIST
22574: LIST
22575: LIST
22576: LIST
22577: LIST
22578: LIST
22579: LIST
22580: LIST
22581: LIST
22582: LIST
22583: LIST
22584: LIST
22585: LIST
22586: LIST
22587: LIST
22588: LIST
22589: LIST
22590: ST_TO_ADDR
22591: GO 22824
22593: LD_INT 3
22595: DOUBLE
22596: EQUAL
22597: IFTRUE 22601
22599: GO 22823
22601: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
22602: LD_ADDR_VAR 0 4
22606: PUSH
22607: LD_INT 46
22609: PUSH
22610: LD_INT 47
22612: PUSH
22613: LD_INT 1
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: LD_INT 82
22621: PUSH
22622: LD_INT 83
22624: PUSH
22625: LD_INT 84
22627: PUSH
22628: LD_INT 85
22630: PUSH
22631: LD_INT 86
22633: PUSH
22634: LD_INT 11
22636: PUSH
22637: LD_INT 9
22639: PUSH
22640: LD_INT 20
22642: PUSH
22643: LD_INT 19
22645: PUSH
22646: LD_INT 21
22648: PUSH
22649: LD_INT 24
22651: PUSH
22652: LD_INT 22
22654: PUSH
22655: LD_INT 25
22657: PUSH
22658: LD_INT 28
22660: PUSH
22661: LD_INT 29
22663: PUSH
22664: LD_INT 30
22666: PUSH
22667: LD_INT 31
22669: PUSH
22670: LD_INT 37
22672: PUSH
22673: LD_INT 38
22675: PUSH
22676: LD_INT 32
22678: PUSH
22679: LD_INT 27
22681: PUSH
22682: LD_INT 33
22684: PUSH
22685: LD_INT 69
22687: PUSH
22688: LD_INT 39
22690: PUSH
22691: LD_INT 34
22693: PUSH
22694: LD_INT 40
22696: PUSH
22697: LD_INT 71
22699: PUSH
22700: LD_INT 23
22702: PUSH
22703: LD_INT 44
22705: PUSH
22706: LD_INT 48
22708: PUSH
22709: LD_INT 49
22711: PUSH
22712: LD_INT 50
22714: PUSH
22715: LD_INT 51
22717: PUSH
22718: LD_INT 52
22720: PUSH
22721: LD_INT 53
22723: PUSH
22724: LD_INT 54
22726: PUSH
22727: LD_INT 55
22729: PUSH
22730: LD_INT 56
22732: PUSH
22733: LD_INT 57
22735: PUSH
22736: LD_INT 58
22738: PUSH
22739: LD_INT 59
22741: PUSH
22742: LD_INT 63
22744: PUSH
22745: LD_INT 64
22747: PUSH
22748: LD_INT 65
22750: PUSH
22751: LD_INT 82
22753: PUSH
22754: LD_INT 83
22756: PUSH
22757: LD_INT 84
22759: PUSH
22760: LD_INT 85
22762: PUSH
22763: LD_INT 86
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: LIST
22819: LIST
22820: ST_TO_ADDR
22821: GO 22824
22823: POP
// if state > - 1 and state < 3 then
22824: LD_VAR 0 3
22828: PUSH
22829: LD_INT 1
22831: NEG
22832: GREATER
22833: PUSH
22834: LD_VAR 0 3
22838: PUSH
22839: LD_INT 3
22841: LESS
22842: AND
22843: IFFALSE 22900
// for i in result do
22845: LD_ADDR_VAR 0 5
22849: PUSH
22850: LD_VAR 0 4
22854: PUSH
22855: FOR_IN
22856: IFFALSE 22898
// if GetTech ( i , side ) <> state then
22858: LD_VAR 0 5
22862: PPUSH
22863: LD_VAR 0 1
22867: PPUSH
22868: CALL_OW 321
22872: PUSH
22873: LD_VAR 0 3
22877: NONEQUAL
22878: IFFALSE 22896
// result := result diff i ;
22880: LD_ADDR_VAR 0 4
22884: PUSH
22885: LD_VAR 0 4
22889: PUSH
22890: LD_VAR 0 5
22894: DIFF
22895: ST_TO_ADDR
22896: GO 22855
22898: POP
22899: POP
// end ;
22900: LD_VAR 0 4
22904: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22905: LD_INT 0
22907: PPUSH
22908: PPUSH
22909: PPUSH
// result := true ;
22910: LD_ADDR_VAR 0 3
22914: PUSH
22915: LD_INT 1
22917: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22918: LD_ADDR_VAR 0 5
22922: PUSH
22923: LD_VAR 0 2
22927: PPUSH
22928: CALL_OW 480
22932: ST_TO_ADDR
// if not tmp then
22933: LD_VAR 0 5
22937: NOT
22938: IFFALSE 22942
// exit ;
22940: GO 22991
// for i in tmp do
22942: LD_ADDR_VAR 0 4
22946: PUSH
22947: LD_VAR 0 5
22951: PUSH
22952: FOR_IN
22953: IFFALSE 22989
// if GetTech ( i , side ) <> state_researched then
22955: LD_VAR 0 4
22959: PPUSH
22960: LD_VAR 0 1
22964: PPUSH
22965: CALL_OW 321
22969: PUSH
22970: LD_INT 2
22972: NONEQUAL
22973: IFFALSE 22987
// begin result := false ;
22975: LD_ADDR_VAR 0 3
22979: PUSH
22980: LD_INT 0
22982: ST_TO_ADDR
// exit ;
22983: POP
22984: POP
22985: GO 22991
// end ;
22987: GO 22952
22989: POP
22990: POP
// end ;
22991: LD_VAR 0 3
22995: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22996: LD_INT 0
22998: PPUSH
22999: PPUSH
23000: PPUSH
23001: PPUSH
23002: PPUSH
23003: PPUSH
23004: PPUSH
23005: PPUSH
23006: PPUSH
23007: PPUSH
23008: PPUSH
23009: PPUSH
23010: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23011: LD_VAR 0 1
23015: NOT
23016: PUSH
23017: LD_VAR 0 1
23021: PPUSH
23022: CALL_OW 257
23026: PUSH
23027: LD_INT 9
23029: NONEQUAL
23030: OR
23031: IFFALSE 23035
// exit ;
23033: GO 23608
// side := GetSide ( unit ) ;
23035: LD_ADDR_VAR 0 9
23039: PUSH
23040: LD_VAR 0 1
23044: PPUSH
23045: CALL_OW 255
23049: ST_TO_ADDR
// tech_space := tech_spacanom ;
23050: LD_ADDR_VAR 0 12
23054: PUSH
23055: LD_INT 29
23057: ST_TO_ADDR
// tech_time := tech_taurad ;
23058: LD_ADDR_VAR 0 13
23062: PUSH
23063: LD_INT 28
23065: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23066: LD_ADDR_VAR 0 11
23070: PUSH
23071: LD_VAR 0 1
23075: PPUSH
23076: CALL_OW 310
23080: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23081: LD_VAR 0 11
23085: PPUSH
23086: CALL_OW 247
23090: PUSH
23091: LD_INT 2
23093: EQUAL
23094: IFFALSE 23098
// exit ;
23096: GO 23608
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23098: LD_ADDR_VAR 0 8
23102: PUSH
23103: LD_INT 81
23105: PUSH
23106: LD_VAR 0 9
23110: PUSH
23111: EMPTY
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 3
23117: PUSH
23118: LD_INT 21
23120: PUSH
23121: LD_INT 3
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PPUSH
23136: CALL_OW 69
23140: ST_TO_ADDR
// if not tmp then
23141: LD_VAR 0 8
23145: NOT
23146: IFFALSE 23150
// exit ;
23148: GO 23608
// if in_unit then
23150: LD_VAR 0 11
23154: IFFALSE 23178
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23156: LD_ADDR_VAR 0 10
23160: PUSH
23161: LD_VAR 0 8
23165: PPUSH
23166: LD_VAR 0 11
23170: PPUSH
23171: CALL_OW 74
23175: ST_TO_ADDR
23176: GO 23198
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23178: LD_ADDR_VAR 0 10
23182: PUSH
23183: LD_VAR 0 8
23187: PPUSH
23188: LD_VAR 0 1
23192: PPUSH
23193: CALL_OW 74
23197: ST_TO_ADDR
// if not enemy then
23198: LD_VAR 0 10
23202: NOT
23203: IFFALSE 23207
// exit ;
23205: GO 23608
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23207: LD_VAR 0 11
23211: PUSH
23212: LD_VAR 0 11
23216: PPUSH
23217: LD_VAR 0 10
23221: PPUSH
23222: CALL_OW 296
23226: PUSH
23227: LD_INT 13
23229: GREATER
23230: AND
23231: PUSH
23232: LD_VAR 0 1
23236: PPUSH
23237: LD_VAR 0 10
23241: PPUSH
23242: CALL_OW 296
23246: PUSH
23247: LD_INT 12
23249: GREATER
23250: OR
23251: IFFALSE 23255
// exit ;
23253: GO 23608
// missile := [ 1 ] ;
23255: LD_ADDR_VAR 0 14
23259: PUSH
23260: LD_INT 1
23262: PUSH
23263: EMPTY
23264: LIST
23265: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23266: LD_VAR 0 9
23270: PPUSH
23271: LD_VAR 0 12
23275: PPUSH
23276: CALL_OW 325
23280: IFFALSE 23309
// missile := Insert ( missile , missile + 1 , 2 ) ;
23282: LD_ADDR_VAR 0 14
23286: PUSH
23287: LD_VAR 0 14
23291: PPUSH
23292: LD_VAR 0 14
23296: PUSH
23297: LD_INT 1
23299: PLUS
23300: PPUSH
23301: LD_INT 2
23303: PPUSH
23304: CALL_OW 2
23308: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23309: LD_VAR 0 9
23313: PPUSH
23314: LD_VAR 0 13
23318: PPUSH
23319: CALL_OW 325
23323: PUSH
23324: LD_VAR 0 10
23328: PPUSH
23329: CALL_OW 255
23333: PPUSH
23334: LD_VAR 0 13
23338: PPUSH
23339: CALL_OW 325
23343: NOT
23344: AND
23345: IFFALSE 23374
// missile := Insert ( missile , missile + 1 , 3 ) ;
23347: LD_ADDR_VAR 0 14
23351: PUSH
23352: LD_VAR 0 14
23356: PPUSH
23357: LD_VAR 0 14
23361: PUSH
23362: LD_INT 1
23364: PLUS
23365: PPUSH
23366: LD_INT 3
23368: PPUSH
23369: CALL_OW 2
23373: ST_TO_ADDR
// if missile < 2 then
23374: LD_VAR 0 14
23378: PUSH
23379: LD_INT 2
23381: LESS
23382: IFFALSE 23386
// exit ;
23384: GO 23608
// x := GetX ( enemy ) ;
23386: LD_ADDR_VAR 0 4
23390: PUSH
23391: LD_VAR 0 10
23395: PPUSH
23396: CALL_OW 250
23400: ST_TO_ADDR
// y := GetY ( enemy ) ;
23401: LD_ADDR_VAR 0 5
23405: PUSH
23406: LD_VAR 0 10
23410: PPUSH
23411: CALL_OW 251
23415: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23416: LD_ADDR_VAR 0 6
23420: PUSH
23421: LD_VAR 0 4
23425: PUSH
23426: LD_INT 1
23428: NEG
23429: PPUSH
23430: LD_INT 1
23432: PPUSH
23433: CALL_OW 12
23437: PLUS
23438: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23439: LD_ADDR_VAR 0 7
23443: PUSH
23444: LD_VAR 0 5
23448: PUSH
23449: LD_INT 1
23451: NEG
23452: PPUSH
23453: LD_INT 1
23455: PPUSH
23456: CALL_OW 12
23460: PLUS
23461: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23462: LD_VAR 0 6
23466: PPUSH
23467: LD_VAR 0 7
23471: PPUSH
23472: CALL_OW 488
23476: NOT
23477: IFFALSE 23499
// begin _x := x ;
23479: LD_ADDR_VAR 0 6
23483: PUSH
23484: LD_VAR 0 4
23488: ST_TO_ADDR
// _y := y ;
23489: LD_ADDR_VAR 0 7
23493: PUSH
23494: LD_VAR 0 5
23498: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23499: LD_ADDR_VAR 0 3
23503: PUSH
23504: LD_INT 1
23506: PPUSH
23507: LD_VAR 0 14
23511: PPUSH
23512: CALL_OW 12
23516: ST_TO_ADDR
// case i of 1 :
23517: LD_VAR 0 3
23521: PUSH
23522: LD_INT 1
23524: DOUBLE
23525: EQUAL
23526: IFTRUE 23530
23528: GO 23547
23530: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23531: LD_VAR 0 1
23535: PPUSH
23536: LD_VAR 0 10
23540: PPUSH
23541: CALL_OW 115
23545: GO 23608
23547: LD_INT 2
23549: DOUBLE
23550: EQUAL
23551: IFTRUE 23555
23553: GO 23577
23555: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
23556: LD_VAR 0 1
23560: PPUSH
23561: LD_VAR 0 6
23565: PPUSH
23566: LD_VAR 0 7
23570: PPUSH
23571: CALL_OW 153
23575: GO 23608
23577: LD_INT 3
23579: DOUBLE
23580: EQUAL
23581: IFTRUE 23585
23583: GO 23607
23585: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
23586: LD_VAR 0 1
23590: PPUSH
23591: LD_VAR 0 6
23595: PPUSH
23596: LD_VAR 0 7
23600: PPUSH
23601: CALL_OW 154
23605: GO 23608
23607: POP
// end ;
23608: LD_VAR 0 2
23612: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
23613: LD_INT 0
23615: PPUSH
23616: PPUSH
23617: PPUSH
23618: PPUSH
23619: PPUSH
23620: PPUSH
// if not unit or not building then
23621: LD_VAR 0 1
23625: NOT
23626: PUSH
23627: LD_VAR 0 2
23631: NOT
23632: OR
23633: IFFALSE 23637
// exit ;
23635: GO 23795
// x := GetX ( building ) ;
23637: LD_ADDR_VAR 0 5
23641: PUSH
23642: LD_VAR 0 2
23646: PPUSH
23647: CALL_OW 250
23651: ST_TO_ADDR
// y := GetY ( building ) ;
23652: LD_ADDR_VAR 0 6
23656: PUSH
23657: LD_VAR 0 2
23661: PPUSH
23662: CALL_OW 251
23666: ST_TO_ADDR
// for i = 0 to 5 do
23667: LD_ADDR_VAR 0 4
23671: PUSH
23672: DOUBLE
23673: LD_INT 0
23675: DEC
23676: ST_TO_ADDR
23677: LD_INT 5
23679: PUSH
23680: FOR_TO
23681: IFFALSE 23793
// begin _x := ShiftX ( x , i , 3 ) ;
23683: LD_ADDR_VAR 0 7
23687: PUSH
23688: LD_VAR 0 5
23692: PPUSH
23693: LD_VAR 0 4
23697: PPUSH
23698: LD_INT 3
23700: PPUSH
23701: CALL_OW 272
23705: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23706: LD_ADDR_VAR 0 8
23710: PUSH
23711: LD_VAR 0 6
23715: PPUSH
23716: LD_VAR 0 4
23720: PPUSH
23721: LD_INT 3
23723: PPUSH
23724: CALL_OW 273
23728: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23729: LD_VAR 0 7
23733: PPUSH
23734: LD_VAR 0 8
23738: PPUSH
23739: CALL_OW 488
23743: NOT
23744: IFFALSE 23748
// continue ;
23746: GO 23680
// if HexInfo ( _x , _y ) = 0 then
23748: LD_VAR 0 7
23752: PPUSH
23753: LD_VAR 0 8
23757: PPUSH
23758: CALL_OW 428
23762: PUSH
23763: LD_INT 0
23765: EQUAL
23766: IFFALSE 23791
// begin ComMoveXY ( unit , _x , _y ) ;
23768: LD_VAR 0 1
23772: PPUSH
23773: LD_VAR 0 7
23777: PPUSH
23778: LD_VAR 0 8
23782: PPUSH
23783: CALL_OW 111
// exit ;
23787: POP
23788: POP
23789: GO 23795
// end ; end ;
23791: GO 23680
23793: POP
23794: POP
// end ;
23795: LD_VAR 0 3
23799: RET
// export function ScanBase ( side , base_area ) ; begin
23800: LD_INT 0
23802: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23803: LD_ADDR_VAR 0 3
23807: PUSH
23808: LD_VAR 0 2
23812: PPUSH
23813: LD_INT 81
23815: PUSH
23816: LD_VAR 0 1
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PPUSH
23825: CALL_OW 70
23829: ST_TO_ADDR
// end ;
23830: LD_VAR 0 3
23834: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23835: LD_INT 0
23837: PPUSH
23838: PPUSH
23839: PPUSH
23840: PPUSH
// result := false ;
23841: LD_ADDR_VAR 0 2
23845: PUSH
23846: LD_INT 0
23848: ST_TO_ADDR
// side := GetSide ( unit ) ;
23849: LD_ADDR_VAR 0 3
23853: PUSH
23854: LD_VAR 0 1
23858: PPUSH
23859: CALL_OW 255
23863: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23864: LD_ADDR_VAR 0 4
23868: PUSH
23869: LD_VAR 0 1
23873: PPUSH
23874: CALL_OW 248
23878: ST_TO_ADDR
// case nat of 1 :
23879: LD_VAR 0 4
23883: PUSH
23884: LD_INT 1
23886: DOUBLE
23887: EQUAL
23888: IFTRUE 23892
23890: GO 23903
23892: POP
// tech := tech_lassight ; 2 :
23893: LD_ADDR_VAR 0 5
23897: PUSH
23898: LD_INT 12
23900: ST_TO_ADDR
23901: GO 23942
23903: LD_INT 2
23905: DOUBLE
23906: EQUAL
23907: IFTRUE 23911
23909: GO 23922
23911: POP
// tech := tech_mortar ; 3 :
23912: LD_ADDR_VAR 0 5
23916: PUSH
23917: LD_INT 41
23919: ST_TO_ADDR
23920: GO 23942
23922: LD_INT 3
23924: DOUBLE
23925: EQUAL
23926: IFTRUE 23930
23928: GO 23941
23930: POP
// tech := tech_bazooka ; end ;
23931: LD_ADDR_VAR 0 5
23935: PUSH
23936: LD_INT 44
23938: ST_TO_ADDR
23939: GO 23942
23941: POP
// if Researched ( side , tech ) then
23942: LD_VAR 0 3
23946: PPUSH
23947: LD_VAR 0 5
23951: PPUSH
23952: CALL_OW 325
23956: IFFALSE 23983
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23958: LD_ADDR_VAR 0 2
23962: PUSH
23963: LD_INT 5
23965: PUSH
23966: LD_INT 8
23968: PUSH
23969: LD_INT 9
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: LIST
23976: PUSH
23977: LD_VAR 0 4
23981: ARRAY
23982: ST_TO_ADDR
// end ;
23983: LD_VAR 0 2
23987: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23988: LD_INT 0
23990: PPUSH
23991: PPUSH
23992: PPUSH
// if not mines then
23993: LD_VAR 0 2
23997: NOT
23998: IFFALSE 24002
// exit ;
24000: GO 24146
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24002: LD_ADDR_VAR 0 5
24006: PUSH
24007: LD_INT 81
24009: PUSH
24010: LD_VAR 0 1
24014: PUSH
24015: EMPTY
24016: LIST
24017: LIST
24018: PUSH
24019: LD_INT 3
24021: PUSH
24022: LD_INT 21
24024: PUSH
24025: LD_INT 3
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: EMPTY
24033: LIST
24034: LIST
24035: PUSH
24036: EMPTY
24037: LIST
24038: LIST
24039: PPUSH
24040: CALL_OW 69
24044: ST_TO_ADDR
// for i in mines do
24045: LD_ADDR_VAR 0 4
24049: PUSH
24050: LD_VAR 0 2
24054: PUSH
24055: FOR_IN
24056: IFFALSE 24144
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24058: LD_VAR 0 4
24062: PUSH
24063: LD_INT 1
24065: ARRAY
24066: PPUSH
24067: LD_VAR 0 4
24071: PUSH
24072: LD_INT 2
24074: ARRAY
24075: PPUSH
24076: CALL_OW 458
24080: NOT
24081: IFFALSE 24085
// continue ;
24083: GO 24055
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24085: LD_VAR 0 4
24089: PUSH
24090: LD_INT 1
24092: ARRAY
24093: PPUSH
24094: LD_VAR 0 4
24098: PUSH
24099: LD_INT 2
24101: ARRAY
24102: PPUSH
24103: CALL_OW 428
24107: PUSH
24108: LD_VAR 0 5
24112: IN
24113: IFFALSE 24142
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24115: LD_VAR 0 4
24119: PUSH
24120: LD_INT 1
24122: ARRAY
24123: PPUSH
24124: LD_VAR 0 4
24128: PUSH
24129: LD_INT 2
24131: ARRAY
24132: PPUSH
24133: LD_VAR 0 1
24137: PPUSH
24138: CALL_OW 456
// end ;
24142: GO 24055
24144: POP
24145: POP
// end ;
24146: LD_VAR 0 3
24150: RET
// export function Count ( array ) ; var i ; begin
24151: LD_INT 0
24153: PPUSH
24154: PPUSH
// result := 0 ;
24155: LD_ADDR_VAR 0 2
24159: PUSH
24160: LD_INT 0
24162: ST_TO_ADDR
// for i in array do
24163: LD_ADDR_VAR 0 3
24167: PUSH
24168: LD_VAR 0 1
24172: PUSH
24173: FOR_IN
24174: IFFALSE 24198
// if i then
24176: LD_VAR 0 3
24180: IFFALSE 24196
// result := result + 1 ;
24182: LD_ADDR_VAR 0 2
24186: PUSH
24187: LD_VAR 0 2
24191: PUSH
24192: LD_INT 1
24194: PLUS
24195: ST_TO_ADDR
24196: GO 24173
24198: POP
24199: POP
// end ;
24200: LD_VAR 0 2
24204: RET
// export function IsEmpty ( building ) ; begin
24205: LD_INT 0
24207: PPUSH
// if not building then
24208: LD_VAR 0 1
24212: NOT
24213: IFFALSE 24217
// exit ;
24215: GO 24260
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24217: LD_ADDR_VAR 0 2
24221: PUSH
24222: LD_VAR 0 1
24226: PUSH
24227: LD_INT 22
24229: PUSH
24230: LD_VAR 0 1
24234: PPUSH
24235: CALL_OW 255
24239: PUSH
24240: EMPTY
24241: LIST
24242: LIST
24243: PUSH
24244: LD_INT 58
24246: PUSH
24247: EMPTY
24248: LIST
24249: PUSH
24250: EMPTY
24251: LIST
24252: LIST
24253: PPUSH
24254: CALL_OW 69
24258: IN
24259: ST_TO_ADDR
// end ;
24260: LD_VAR 0 2
24264: RET
// export function IsNotFull ( building ) ; begin
24265: LD_INT 0
24267: PPUSH
// if not building then
24268: LD_VAR 0 1
24272: NOT
24273: IFFALSE 24277
// exit ;
24275: GO 24296
// result := UnitsInside ( building ) < 6 ;
24277: LD_ADDR_VAR 0 2
24281: PUSH
24282: LD_VAR 0 1
24286: PPUSH
24287: CALL_OW 313
24291: PUSH
24292: LD_INT 6
24294: LESS
24295: ST_TO_ADDR
// end ;
24296: LD_VAR 0 2
24300: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24301: LD_INT 0
24303: PPUSH
24304: PPUSH
24305: PPUSH
24306: PPUSH
// tmp := [ ] ;
24307: LD_ADDR_VAR 0 3
24311: PUSH
24312: EMPTY
24313: ST_TO_ADDR
// list := [ ] ;
24314: LD_ADDR_VAR 0 5
24318: PUSH
24319: EMPTY
24320: ST_TO_ADDR
// for i = 16 to 25 do
24321: LD_ADDR_VAR 0 4
24325: PUSH
24326: DOUBLE
24327: LD_INT 16
24329: DEC
24330: ST_TO_ADDR
24331: LD_INT 25
24333: PUSH
24334: FOR_TO
24335: IFFALSE 24408
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24337: LD_ADDR_VAR 0 3
24341: PUSH
24342: LD_VAR 0 3
24346: PUSH
24347: LD_INT 22
24349: PUSH
24350: LD_VAR 0 1
24354: PPUSH
24355: CALL_OW 255
24359: PUSH
24360: EMPTY
24361: LIST
24362: LIST
24363: PUSH
24364: LD_INT 91
24366: PUSH
24367: LD_VAR 0 1
24371: PUSH
24372: LD_INT 6
24374: PUSH
24375: EMPTY
24376: LIST
24377: LIST
24378: LIST
24379: PUSH
24380: LD_INT 30
24382: PUSH
24383: LD_VAR 0 4
24387: PUSH
24388: EMPTY
24389: LIST
24390: LIST
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: LIST
24396: PUSH
24397: EMPTY
24398: LIST
24399: PPUSH
24400: CALL_OW 69
24404: ADD
24405: ST_TO_ADDR
24406: GO 24334
24408: POP
24409: POP
// for i = 1 to tmp do
24410: LD_ADDR_VAR 0 4
24414: PUSH
24415: DOUBLE
24416: LD_INT 1
24418: DEC
24419: ST_TO_ADDR
24420: LD_VAR 0 3
24424: PUSH
24425: FOR_TO
24426: IFFALSE 24514
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24428: LD_ADDR_VAR 0 5
24432: PUSH
24433: LD_VAR 0 5
24437: PUSH
24438: LD_VAR 0 3
24442: PUSH
24443: LD_VAR 0 4
24447: ARRAY
24448: PPUSH
24449: CALL_OW 266
24453: PUSH
24454: LD_VAR 0 3
24458: PUSH
24459: LD_VAR 0 4
24463: ARRAY
24464: PPUSH
24465: CALL_OW 250
24469: PUSH
24470: LD_VAR 0 3
24474: PUSH
24475: LD_VAR 0 4
24479: ARRAY
24480: PPUSH
24481: CALL_OW 251
24485: PUSH
24486: LD_VAR 0 3
24490: PUSH
24491: LD_VAR 0 4
24495: ARRAY
24496: PPUSH
24497: CALL_OW 254
24501: PUSH
24502: EMPTY
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: PUSH
24508: EMPTY
24509: LIST
24510: ADD
24511: ST_TO_ADDR
24512: GO 24425
24514: POP
24515: POP
// result := list ;
24516: LD_ADDR_VAR 0 2
24520: PUSH
24521: LD_VAR 0 5
24525: ST_TO_ADDR
// end ;
24526: LD_VAR 0 2
24530: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24531: LD_INT 0
24533: PPUSH
24534: PPUSH
24535: PPUSH
24536: PPUSH
24537: PPUSH
24538: PPUSH
24539: PPUSH
// if not factory then
24540: LD_VAR 0 1
24544: NOT
24545: IFFALSE 24549
// exit ;
24547: GO 25142
// if control = control_apeman then
24549: LD_VAR 0 4
24553: PUSH
24554: LD_INT 5
24556: EQUAL
24557: IFFALSE 24666
// begin tmp := UnitsInside ( factory ) ;
24559: LD_ADDR_VAR 0 8
24563: PUSH
24564: LD_VAR 0 1
24568: PPUSH
24569: CALL_OW 313
24573: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24574: LD_VAR 0 8
24578: PPUSH
24579: LD_INT 25
24581: PUSH
24582: LD_INT 12
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PPUSH
24589: CALL_OW 72
24593: NOT
24594: IFFALSE 24604
// control := control_manual ;
24596: LD_ADDR_VAR 0 4
24600: PUSH
24601: LD_INT 1
24603: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24604: LD_ADDR_VAR 0 8
24608: PUSH
24609: LD_VAR 0 1
24613: PPUSH
24614: CALL 24301 0 1
24618: ST_TO_ADDR
// if tmp then
24619: LD_VAR 0 8
24623: IFFALSE 24666
// begin for i in tmp do
24625: LD_ADDR_VAR 0 7
24629: PUSH
24630: LD_VAR 0 8
24634: PUSH
24635: FOR_IN
24636: IFFALSE 24664
// if i [ 1 ] = b_ext_radio then
24638: LD_VAR 0 7
24642: PUSH
24643: LD_INT 1
24645: ARRAY
24646: PUSH
24647: LD_INT 22
24649: EQUAL
24650: IFFALSE 24662
// begin control := control_remote ;
24652: LD_ADDR_VAR 0 4
24656: PUSH
24657: LD_INT 2
24659: ST_TO_ADDR
// break ;
24660: GO 24664
// end ;
24662: GO 24635
24664: POP
24665: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24666: LD_VAR 0 1
24670: PPUSH
24671: LD_VAR 0 2
24675: PPUSH
24676: LD_VAR 0 3
24680: PPUSH
24681: LD_VAR 0 4
24685: PPUSH
24686: LD_VAR 0 5
24690: PPUSH
24691: CALL_OW 448
24695: IFFALSE 24730
// begin result := [ chassis , engine , control , weapon ] ;
24697: LD_ADDR_VAR 0 6
24701: PUSH
24702: LD_VAR 0 2
24706: PUSH
24707: LD_VAR 0 3
24711: PUSH
24712: LD_VAR 0 4
24716: PUSH
24717: LD_VAR 0 5
24721: PUSH
24722: EMPTY
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: ST_TO_ADDR
// exit ;
24728: GO 25142
// end ; _chassis := AvailableChassisList ( factory ) ;
24730: LD_ADDR_VAR 0 9
24734: PUSH
24735: LD_VAR 0 1
24739: PPUSH
24740: CALL_OW 475
24744: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24745: LD_ADDR_VAR 0 11
24749: PUSH
24750: LD_VAR 0 1
24754: PPUSH
24755: CALL_OW 476
24759: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24760: LD_ADDR_VAR 0 12
24764: PUSH
24765: LD_VAR 0 1
24769: PPUSH
24770: CALL_OW 477
24774: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24775: LD_ADDR_VAR 0 10
24779: PUSH
24780: LD_VAR 0 1
24784: PPUSH
24785: CALL_OW 478
24789: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24790: LD_VAR 0 9
24794: NOT
24795: PUSH
24796: LD_VAR 0 11
24800: NOT
24801: OR
24802: PUSH
24803: LD_VAR 0 12
24807: NOT
24808: OR
24809: PUSH
24810: LD_VAR 0 10
24814: NOT
24815: OR
24816: IFFALSE 24851
// begin result := [ chassis , engine , control , weapon ] ;
24818: LD_ADDR_VAR 0 6
24822: PUSH
24823: LD_VAR 0 2
24827: PUSH
24828: LD_VAR 0 3
24832: PUSH
24833: LD_VAR 0 4
24837: PUSH
24838: LD_VAR 0 5
24842: PUSH
24843: EMPTY
24844: LIST
24845: LIST
24846: LIST
24847: LIST
24848: ST_TO_ADDR
// exit ;
24849: GO 25142
// end ; if not chassis in _chassis then
24851: LD_VAR 0 2
24855: PUSH
24856: LD_VAR 0 9
24860: IN
24861: NOT
24862: IFFALSE 24888
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24864: LD_ADDR_VAR 0 2
24868: PUSH
24869: LD_VAR 0 9
24873: PUSH
24874: LD_INT 1
24876: PPUSH
24877: LD_VAR 0 9
24881: PPUSH
24882: CALL_OW 12
24886: ARRAY
24887: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24888: LD_VAR 0 2
24892: PPUSH
24893: LD_VAR 0 3
24897: PPUSH
24898: CALL 25147 0 2
24902: NOT
24903: IFFALSE 24962
// repeat engine := _engine [ 1 ] ;
24905: LD_ADDR_VAR 0 3
24909: PUSH
24910: LD_VAR 0 11
24914: PUSH
24915: LD_INT 1
24917: ARRAY
24918: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24919: LD_ADDR_VAR 0 11
24923: PUSH
24924: LD_VAR 0 11
24928: PPUSH
24929: LD_INT 1
24931: PPUSH
24932: CALL_OW 3
24936: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24937: LD_VAR 0 2
24941: PPUSH
24942: LD_VAR 0 3
24946: PPUSH
24947: CALL 25147 0 2
24951: PUSH
24952: LD_VAR 0 11
24956: PUSH
24957: EMPTY
24958: EQUAL
24959: OR
24960: IFFALSE 24905
// if not control in _control then
24962: LD_VAR 0 4
24966: PUSH
24967: LD_VAR 0 12
24971: IN
24972: NOT
24973: IFFALSE 24999
// control := _control [ rand ( 1 , _control ) ] ;
24975: LD_ADDR_VAR 0 4
24979: PUSH
24980: LD_VAR 0 12
24984: PUSH
24985: LD_INT 1
24987: PPUSH
24988: LD_VAR 0 12
24992: PPUSH
24993: CALL_OW 12
24997: ARRAY
24998: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24999: LD_VAR 0 2
25003: PPUSH
25004: LD_VAR 0 5
25008: PPUSH
25009: CALL 25367 0 2
25013: NOT
25014: IFFALSE 25073
// repeat weapon := _weapon [ 1 ] ;
25016: LD_ADDR_VAR 0 5
25020: PUSH
25021: LD_VAR 0 10
25025: PUSH
25026: LD_INT 1
25028: ARRAY
25029: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25030: LD_ADDR_VAR 0 10
25034: PUSH
25035: LD_VAR 0 10
25039: PPUSH
25040: LD_INT 1
25042: PPUSH
25043: CALL_OW 3
25047: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25048: LD_VAR 0 2
25052: PPUSH
25053: LD_VAR 0 5
25057: PPUSH
25058: CALL 25367 0 2
25062: PUSH
25063: LD_VAR 0 10
25067: PUSH
25068: EMPTY
25069: EQUAL
25070: OR
25071: IFFALSE 25016
// result := [ ] ;
25073: LD_ADDR_VAR 0 6
25077: PUSH
25078: EMPTY
25079: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25080: LD_VAR 0 1
25084: PPUSH
25085: LD_VAR 0 2
25089: PPUSH
25090: LD_VAR 0 3
25094: PPUSH
25095: LD_VAR 0 4
25099: PPUSH
25100: LD_VAR 0 5
25104: PPUSH
25105: CALL_OW 448
25109: IFFALSE 25142
// result := [ chassis , engine , control , weapon ] ;
25111: LD_ADDR_VAR 0 6
25115: PUSH
25116: LD_VAR 0 2
25120: PUSH
25121: LD_VAR 0 3
25125: PUSH
25126: LD_VAR 0 4
25130: PUSH
25131: LD_VAR 0 5
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: ST_TO_ADDR
// end ;
25142: LD_VAR 0 6
25146: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25147: LD_INT 0
25149: PPUSH
// if not chassis or not engine then
25150: LD_VAR 0 1
25154: NOT
25155: PUSH
25156: LD_VAR 0 2
25160: NOT
25161: OR
25162: IFFALSE 25166
// exit ;
25164: GO 25362
// case engine of engine_solar :
25166: LD_VAR 0 2
25170: PUSH
25171: LD_INT 2
25173: DOUBLE
25174: EQUAL
25175: IFTRUE 25179
25177: GO 25217
25179: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25180: LD_ADDR_VAR 0 3
25184: PUSH
25185: LD_INT 11
25187: PUSH
25188: LD_INT 12
25190: PUSH
25191: LD_INT 13
25193: PUSH
25194: LD_INT 14
25196: PUSH
25197: LD_INT 1
25199: PUSH
25200: LD_INT 2
25202: PUSH
25203: LD_INT 3
25205: PUSH
25206: EMPTY
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: ST_TO_ADDR
25215: GO 25346
25217: LD_INT 1
25219: DOUBLE
25220: EQUAL
25221: IFTRUE 25225
25223: GO 25287
25225: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25226: LD_ADDR_VAR 0 3
25230: PUSH
25231: LD_INT 11
25233: PUSH
25234: LD_INT 12
25236: PUSH
25237: LD_INT 13
25239: PUSH
25240: LD_INT 14
25242: PUSH
25243: LD_INT 1
25245: PUSH
25246: LD_INT 2
25248: PUSH
25249: LD_INT 3
25251: PUSH
25252: LD_INT 4
25254: PUSH
25255: LD_INT 5
25257: PUSH
25258: LD_INT 21
25260: PUSH
25261: LD_INT 23
25263: PUSH
25264: LD_INT 22
25266: PUSH
25267: LD_INT 24
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: LIST
25277: LIST
25278: LIST
25279: LIST
25280: LIST
25281: LIST
25282: LIST
25283: LIST
25284: ST_TO_ADDR
25285: GO 25346
25287: LD_INT 3
25289: DOUBLE
25290: EQUAL
25291: IFTRUE 25295
25293: GO 25345
25295: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25296: LD_ADDR_VAR 0 3
25300: PUSH
25301: LD_INT 13
25303: PUSH
25304: LD_INT 14
25306: PUSH
25307: LD_INT 2
25309: PUSH
25310: LD_INT 3
25312: PUSH
25313: LD_INT 4
25315: PUSH
25316: LD_INT 5
25318: PUSH
25319: LD_INT 21
25321: PUSH
25322: LD_INT 22
25324: PUSH
25325: LD_INT 23
25327: PUSH
25328: LD_INT 24
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: LIST
25335: LIST
25336: LIST
25337: LIST
25338: LIST
25339: LIST
25340: LIST
25341: LIST
25342: ST_TO_ADDR
25343: GO 25346
25345: POP
// result := ( chassis in result ) ;
25346: LD_ADDR_VAR 0 3
25350: PUSH
25351: LD_VAR 0 1
25355: PUSH
25356: LD_VAR 0 3
25360: IN
25361: ST_TO_ADDR
// end ;
25362: LD_VAR 0 3
25366: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25367: LD_INT 0
25369: PPUSH
// if not chassis or not weapon then
25370: LD_VAR 0 1
25374: NOT
25375: PUSH
25376: LD_VAR 0 2
25380: NOT
25381: OR
25382: IFFALSE 25386
// exit ;
25384: GO 26448
// case weapon of us_machine_gun :
25386: LD_VAR 0 2
25390: PUSH
25391: LD_INT 2
25393: DOUBLE
25394: EQUAL
25395: IFTRUE 25399
25397: GO 25429
25399: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25400: LD_ADDR_VAR 0 3
25404: PUSH
25405: LD_INT 1
25407: PUSH
25408: LD_INT 2
25410: PUSH
25411: LD_INT 3
25413: PUSH
25414: LD_INT 4
25416: PUSH
25417: LD_INT 5
25419: PUSH
25420: EMPTY
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: ST_TO_ADDR
25427: GO 26432
25429: LD_INT 3
25431: DOUBLE
25432: EQUAL
25433: IFTRUE 25437
25435: GO 25467
25437: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25438: LD_ADDR_VAR 0 3
25442: PUSH
25443: LD_INT 1
25445: PUSH
25446: LD_INT 2
25448: PUSH
25449: LD_INT 3
25451: PUSH
25452: LD_INT 4
25454: PUSH
25455: LD_INT 5
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: LIST
25464: ST_TO_ADDR
25465: GO 26432
25467: LD_INT 11
25469: DOUBLE
25470: EQUAL
25471: IFTRUE 25475
25473: GO 25505
25475: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25476: LD_ADDR_VAR 0 3
25480: PUSH
25481: LD_INT 1
25483: PUSH
25484: LD_INT 2
25486: PUSH
25487: LD_INT 3
25489: PUSH
25490: LD_INT 4
25492: PUSH
25493: LD_INT 5
25495: PUSH
25496: EMPTY
25497: LIST
25498: LIST
25499: LIST
25500: LIST
25501: LIST
25502: ST_TO_ADDR
25503: GO 26432
25505: LD_INT 4
25507: DOUBLE
25508: EQUAL
25509: IFTRUE 25513
25511: GO 25539
25513: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25514: LD_ADDR_VAR 0 3
25518: PUSH
25519: LD_INT 2
25521: PUSH
25522: LD_INT 3
25524: PUSH
25525: LD_INT 4
25527: PUSH
25528: LD_INT 5
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: LIST
25535: LIST
25536: ST_TO_ADDR
25537: GO 26432
25539: LD_INT 5
25541: DOUBLE
25542: EQUAL
25543: IFTRUE 25547
25545: GO 25573
25547: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25548: LD_ADDR_VAR 0 3
25552: PUSH
25553: LD_INT 2
25555: PUSH
25556: LD_INT 3
25558: PUSH
25559: LD_INT 4
25561: PUSH
25562: LD_INT 5
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: LIST
25569: LIST
25570: ST_TO_ADDR
25571: GO 26432
25573: LD_INT 9
25575: DOUBLE
25576: EQUAL
25577: IFTRUE 25581
25579: GO 25607
25581: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25582: LD_ADDR_VAR 0 3
25586: PUSH
25587: LD_INT 2
25589: PUSH
25590: LD_INT 3
25592: PUSH
25593: LD_INT 4
25595: PUSH
25596: LD_INT 5
25598: PUSH
25599: EMPTY
25600: LIST
25601: LIST
25602: LIST
25603: LIST
25604: ST_TO_ADDR
25605: GO 26432
25607: LD_INT 7
25609: DOUBLE
25610: EQUAL
25611: IFTRUE 25615
25613: GO 25641
25615: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25616: LD_ADDR_VAR 0 3
25620: PUSH
25621: LD_INT 2
25623: PUSH
25624: LD_INT 3
25626: PUSH
25627: LD_INT 4
25629: PUSH
25630: LD_INT 5
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: LIST
25637: LIST
25638: ST_TO_ADDR
25639: GO 26432
25641: LD_INT 12
25643: DOUBLE
25644: EQUAL
25645: IFTRUE 25649
25647: GO 25675
25649: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25650: LD_ADDR_VAR 0 3
25654: PUSH
25655: LD_INT 2
25657: PUSH
25658: LD_INT 3
25660: PUSH
25661: LD_INT 4
25663: PUSH
25664: LD_INT 5
25666: PUSH
25667: EMPTY
25668: LIST
25669: LIST
25670: LIST
25671: LIST
25672: ST_TO_ADDR
25673: GO 26432
25675: LD_INT 13
25677: DOUBLE
25678: EQUAL
25679: IFTRUE 25683
25681: GO 25709
25683: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25684: LD_ADDR_VAR 0 3
25688: PUSH
25689: LD_INT 2
25691: PUSH
25692: LD_INT 3
25694: PUSH
25695: LD_INT 4
25697: PUSH
25698: LD_INT 5
25700: PUSH
25701: EMPTY
25702: LIST
25703: LIST
25704: LIST
25705: LIST
25706: ST_TO_ADDR
25707: GO 26432
25709: LD_INT 14
25711: DOUBLE
25712: EQUAL
25713: IFTRUE 25717
25715: GO 25735
25717: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25718: LD_ADDR_VAR 0 3
25722: PUSH
25723: LD_INT 4
25725: PUSH
25726: LD_INT 5
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: ST_TO_ADDR
25733: GO 26432
25735: LD_INT 6
25737: DOUBLE
25738: EQUAL
25739: IFTRUE 25743
25741: GO 25761
25743: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25744: LD_ADDR_VAR 0 3
25748: PUSH
25749: LD_INT 4
25751: PUSH
25752: LD_INT 5
25754: PUSH
25755: EMPTY
25756: LIST
25757: LIST
25758: ST_TO_ADDR
25759: GO 26432
25761: LD_INT 10
25763: DOUBLE
25764: EQUAL
25765: IFTRUE 25769
25767: GO 25787
25769: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25770: LD_ADDR_VAR 0 3
25774: PUSH
25775: LD_INT 4
25777: PUSH
25778: LD_INT 5
25780: PUSH
25781: EMPTY
25782: LIST
25783: LIST
25784: ST_TO_ADDR
25785: GO 26432
25787: LD_INT 22
25789: DOUBLE
25790: EQUAL
25791: IFTRUE 25795
25793: GO 25821
25795: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25796: LD_ADDR_VAR 0 3
25800: PUSH
25801: LD_INT 11
25803: PUSH
25804: LD_INT 12
25806: PUSH
25807: LD_INT 13
25809: PUSH
25810: LD_INT 14
25812: PUSH
25813: EMPTY
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: ST_TO_ADDR
25819: GO 26432
25821: LD_INT 23
25823: DOUBLE
25824: EQUAL
25825: IFTRUE 25829
25827: GO 25855
25829: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25830: LD_ADDR_VAR 0 3
25834: PUSH
25835: LD_INT 11
25837: PUSH
25838: LD_INT 12
25840: PUSH
25841: LD_INT 13
25843: PUSH
25844: LD_INT 14
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: LIST
25851: LIST
25852: ST_TO_ADDR
25853: GO 26432
25855: LD_INT 24
25857: DOUBLE
25858: EQUAL
25859: IFTRUE 25863
25861: GO 25889
25863: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25864: LD_ADDR_VAR 0 3
25868: PUSH
25869: LD_INT 11
25871: PUSH
25872: LD_INT 12
25874: PUSH
25875: LD_INT 13
25877: PUSH
25878: LD_INT 14
25880: PUSH
25881: EMPTY
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: ST_TO_ADDR
25887: GO 26432
25889: LD_INT 30
25891: DOUBLE
25892: EQUAL
25893: IFTRUE 25897
25895: GO 25923
25897: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25898: LD_ADDR_VAR 0 3
25902: PUSH
25903: LD_INT 11
25905: PUSH
25906: LD_INT 12
25908: PUSH
25909: LD_INT 13
25911: PUSH
25912: LD_INT 14
25914: PUSH
25915: EMPTY
25916: LIST
25917: LIST
25918: LIST
25919: LIST
25920: ST_TO_ADDR
25921: GO 26432
25923: LD_INT 25
25925: DOUBLE
25926: EQUAL
25927: IFTRUE 25931
25929: GO 25949
25931: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25932: LD_ADDR_VAR 0 3
25936: PUSH
25937: LD_INT 13
25939: PUSH
25940: LD_INT 14
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: ST_TO_ADDR
25947: GO 26432
25949: LD_INT 27
25951: DOUBLE
25952: EQUAL
25953: IFTRUE 25957
25955: GO 25975
25957: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25958: LD_ADDR_VAR 0 3
25962: PUSH
25963: LD_INT 13
25965: PUSH
25966: LD_INT 14
25968: PUSH
25969: EMPTY
25970: LIST
25971: LIST
25972: ST_TO_ADDR
25973: GO 26432
25975: LD_EXP 44
25979: DOUBLE
25980: EQUAL
25981: IFTRUE 25985
25983: GO 26011
25985: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25986: LD_ADDR_VAR 0 3
25990: PUSH
25991: LD_INT 11
25993: PUSH
25994: LD_INT 12
25996: PUSH
25997: LD_INT 13
25999: PUSH
26000: LD_INT 14
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: LIST
26007: LIST
26008: ST_TO_ADDR
26009: GO 26432
26011: LD_INT 28
26013: DOUBLE
26014: EQUAL
26015: IFTRUE 26019
26017: GO 26037
26019: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26020: LD_ADDR_VAR 0 3
26024: PUSH
26025: LD_INT 13
26027: PUSH
26028: LD_INT 14
26030: PUSH
26031: EMPTY
26032: LIST
26033: LIST
26034: ST_TO_ADDR
26035: GO 26432
26037: LD_INT 29
26039: DOUBLE
26040: EQUAL
26041: IFTRUE 26045
26043: GO 26063
26045: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26046: LD_ADDR_VAR 0 3
26050: PUSH
26051: LD_INT 13
26053: PUSH
26054: LD_INT 14
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: ST_TO_ADDR
26061: GO 26432
26063: LD_INT 31
26065: DOUBLE
26066: EQUAL
26067: IFTRUE 26071
26069: GO 26089
26071: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26072: LD_ADDR_VAR 0 3
26076: PUSH
26077: LD_INT 13
26079: PUSH
26080: LD_INT 14
26082: PUSH
26083: EMPTY
26084: LIST
26085: LIST
26086: ST_TO_ADDR
26087: GO 26432
26089: LD_INT 26
26091: DOUBLE
26092: EQUAL
26093: IFTRUE 26097
26095: GO 26115
26097: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26098: LD_ADDR_VAR 0 3
26102: PUSH
26103: LD_INT 13
26105: PUSH
26106: LD_INT 14
26108: PUSH
26109: EMPTY
26110: LIST
26111: LIST
26112: ST_TO_ADDR
26113: GO 26432
26115: LD_INT 42
26117: DOUBLE
26118: EQUAL
26119: IFTRUE 26123
26121: GO 26149
26123: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26124: LD_ADDR_VAR 0 3
26128: PUSH
26129: LD_INT 21
26131: PUSH
26132: LD_INT 22
26134: PUSH
26135: LD_INT 23
26137: PUSH
26138: LD_INT 24
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: LIST
26145: LIST
26146: ST_TO_ADDR
26147: GO 26432
26149: LD_INT 43
26151: DOUBLE
26152: EQUAL
26153: IFTRUE 26157
26155: GO 26183
26157: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26158: LD_ADDR_VAR 0 3
26162: PUSH
26163: LD_INT 21
26165: PUSH
26166: LD_INT 22
26168: PUSH
26169: LD_INT 23
26171: PUSH
26172: LD_INT 24
26174: PUSH
26175: EMPTY
26176: LIST
26177: LIST
26178: LIST
26179: LIST
26180: ST_TO_ADDR
26181: GO 26432
26183: LD_INT 44
26185: DOUBLE
26186: EQUAL
26187: IFTRUE 26191
26189: GO 26217
26191: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26192: LD_ADDR_VAR 0 3
26196: PUSH
26197: LD_INT 21
26199: PUSH
26200: LD_INT 22
26202: PUSH
26203: LD_INT 23
26205: PUSH
26206: LD_INT 24
26208: PUSH
26209: EMPTY
26210: LIST
26211: LIST
26212: LIST
26213: LIST
26214: ST_TO_ADDR
26215: GO 26432
26217: LD_INT 45
26219: DOUBLE
26220: EQUAL
26221: IFTRUE 26225
26223: GO 26251
26225: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26226: LD_ADDR_VAR 0 3
26230: PUSH
26231: LD_INT 21
26233: PUSH
26234: LD_INT 22
26236: PUSH
26237: LD_INT 23
26239: PUSH
26240: LD_INT 24
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: LIST
26247: LIST
26248: ST_TO_ADDR
26249: GO 26432
26251: LD_INT 49
26253: DOUBLE
26254: EQUAL
26255: IFTRUE 26259
26257: GO 26285
26259: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26260: LD_ADDR_VAR 0 3
26264: PUSH
26265: LD_INT 21
26267: PUSH
26268: LD_INT 22
26270: PUSH
26271: LD_INT 23
26273: PUSH
26274: LD_INT 24
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: ST_TO_ADDR
26283: GO 26432
26285: LD_INT 51
26287: DOUBLE
26288: EQUAL
26289: IFTRUE 26293
26291: GO 26319
26293: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26294: LD_ADDR_VAR 0 3
26298: PUSH
26299: LD_INT 21
26301: PUSH
26302: LD_INT 22
26304: PUSH
26305: LD_INT 23
26307: PUSH
26308: LD_INT 24
26310: PUSH
26311: EMPTY
26312: LIST
26313: LIST
26314: LIST
26315: LIST
26316: ST_TO_ADDR
26317: GO 26432
26319: LD_INT 52
26321: DOUBLE
26322: EQUAL
26323: IFTRUE 26327
26325: GO 26353
26327: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26328: LD_ADDR_VAR 0 3
26332: PUSH
26333: LD_INT 21
26335: PUSH
26336: LD_INT 22
26338: PUSH
26339: LD_INT 23
26341: PUSH
26342: LD_INT 24
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: LIST
26349: LIST
26350: ST_TO_ADDR
26351: GO 26432
26353: LD_INT 53
26355: DOUBLE
26356: EQUAL
26357: IFTRUE 26361
26359: GO 26379
26361: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26362: LD_ADDR_VAR 0 3
26366: PUSH
26367: LD_INT 23
26369: PUSH
26370: LD_INT 24
26372: PUSH
26373: EMPTY
26374: LIST
26375: LIST
26376: ST_TO_ADDR
26377: GO 26432
26379: LD_INT 46
26381: DOUBLE
26382: EQUAL
26383: IFTRUE 26387
26385: GO 26405
26387: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26388: LD_ADDR_VAR 0 3
26392: PUSH
26393: LD_INT 23
26395: PUSH
26396: LD_INT 24
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: ST_TO_ADDR
26403: GO 26432
26405: LD_INT 47
26407: DOUBLE
26408: EQUAL
26409: IFTRUE 26413
26411: GO 26431
26413: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26414: LD_ADDR_VAR 0 3
26418: PUSH
26419: LD_INT 23
26421: PUSH
26422: LD_INT 24
26424: PUSH
26425: EMPTY
26426: LIST
26427: LIST
26428: ST_TO_ADDR
26429: GO 26432
26431: POP
// result := ( chassis in result ) ;
26432: LD_ADDR_VAR 0 3
26436: PUSH
26437: LD_VAR 0 1
26441: PUSH
26442: LD_VAR 0 3
26446: IN
26447: ST_TO_ADDR
// end ;
26448: LD_VAR 0 3
26452: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26453: LD_INT 0
26455: PPUSH
26456: PPUSH
26457: PPUSH
26458: PPUSH
26459: PPUSH
26460: PPUSH
26461: PPUSH
// result := array ;
26462: LD_ADDR_VAR 0 5
26466: PUSH
26467: LD_VAR 0 1
26471: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26472: LD_VAR 0 1
26476: NOT
26477: PUSH
26478: LD_VAR 0 2
26482: NOT
26483: OR
26484: PUSH
26485: LD_VAR 0 3
26489: NOT
26490: OR
26491: PUSH
26492: LD_VAR 0 2
26496: PUSH
26497: LD_VAR 0 1
26501: GREATER
26502: OR
26503: PUSH
26504: LD_VAR 0 3
26508: PUSH
26509: LD_VAR 0 1
26513: GREATER
26514: OR
26515: IFFALSE 26519
// exit ;
26517: GO 26815
// if direction then
26519: LD_VAR 0 4
26523: IFFALSE 26587
// begin d := 1 ;
26525: LD_ADDR_VAR 0 9
26529: PUSH
26530: LD_INT 1
26532: ST_TO_ADDR
// if i_from > i_to then
26533: LD_VAR 0 2
26537: PUSH
26538: LD_VAR 0 3
26542: GREATER
26543: IFFALSE 26569
// length := ( array - i_from ) + i_to else
26545: LD_ADDR_VAR 0 11
26549: PUSH
26550: LD_VAR 0 1
26554: PUSH
26555: LD_VAR 0 2
26559: MINUS
26560: PUSH
26561: LD_VAR 0 3
26565: PLUS
26566: ST_TO_ADDR
26567: GO 26585
// length := i_to - i_from ;
26569: LD_ADDR_VAR 0 11
26573: PUSH
26574: LD_VAR 0 3
26578: PUSH
26579: LD_VAR 0 2
26583: MINUS
26584: ST_TO_ADDR
// end else
26585: GO 26648
// begin d := - 1 ;
26587: LD_ADDR_VAR 0 9
26591: PUSH
26592: LD_INT 1
26594: NEG
26595: ST_TO_ADDR
// if i_from > i_to then
26596: LD_VAR 0 2
26600: PUSH
26601: LD_VAR 0 3
26605: GREATER
26606: IFFALSE 26626
// length := i_from - i_to else
26608: LD_ADDR_VAR 0 11
26612: PUSH
26613: LD_VAR 0 2
26617: PUSH
26618: LD_VAR 0 3
26622: MINUS
26623: ST_TO_ADDR
26624: GO 26648
// length := ( array - i_to ) + i_from ;
26626: LD_ADDR_VAR 0 11
26630: PUSH
26631: LD_VAR 0 1
26635: PUSH
26636: LD_VAR 0 3
26640: MINUS
26641: PUSH
26642: LD_VAR 0 2
26646: PLUS
26647: ST_TO_ADDR
// end ; if not length then
26648: LD_VAR 0 11
26652: NOT
26653: IFFALSE 26657
// exit ;
26655: GO 26815
// tmp := array ;
26657: LD_ADDR_VAR 0 10
26661: PUSH
26662: LD_VAR 0 1
26666: ST_TO_ADDR
// for i = 1 to length do
26667: LD_ADDR_VAR 0 6
26671: PUSH
26672: DOUBLE
26673: LD_INT 1
26675: DEC
26676: ST_TO_ADDR
26677: LD_VAR 0 11
26681: PUSH
26682: FOR_TO
26683: IFFALSE 26803
// begin for j = 1 to array do
26685: LD_ADDR_VAR 0 7
26689: PUSH
26690: DOUBLE
26691: LD_INT 1
26693: DEC
26694: ST_TO_ADDR
26695: LD_VAR 0 1
26699: PUSH
26700: FOR_TO
26701: IFFALSE 26789
// begin k := j + d ;
26703: LD_ADDR_VAR 0 8
26707: PUSH
26708: LD_VAR 0 7
26712: PUSH
26713: LD_VAR 0 9
26717: PLUS
26718: ST_TO_ADDR
// if k > array then
26719: LD_VAR 0 8
26723: PUSH
26724: LD_VAR 0 1
26728: GREATER
26729: IFFALSE 26739
// k := 1 ;
26731: LD_ADDR_VAR 0 8
26735: PUSH
26736: LD_INT 1
26738: ST_TO_ADDR
// if not k then
26739: LD_VAR 0 8
26743: NOT
26744: IFFALSE 26756
// k := array ;
26746: LD_ADDR_VAR 0 8
26750: PUSH
26751: LD_VAR 0 1
26755: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26756: LD_ADDR_VAR 0 10
26760: PUSH
26761: LD_VAR 0 10
26765: PPUSH
26766: LD_VAR 0 8
26770: PPUSH
26771: LD_VAR 0 1
26775: PUSH
26776: LD_VAR 0 7
26780: ARRAY
26781: PPUSH
26782: CALL_OW 1
26786: ST_TO_ADDR
// end ;
26787: GO 26700
26789: POP
26790: POP
// array := tmp ;
26791: LD_ADDR_VAR 0 1
26795: PUSH
26796: LD_VAR 0 10
26800: ST_TO_ADDR
// end ;
26801: GO 26682
26803: POP
26804: POP
// result := array ;
26805: LD_ADDR_VAR 0 5
26809: PUSH
26810: LD_VAR 0 1
26814: ST_TO_ADDR
// end ;
26815: LD_VAR 0 5
26819: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26820: LD_INT 0
26822: PPUSH
26823: PPUSH
// result := 0 ;
26824: LD_ADDR_VAR 0 3
26828: PUSH
26829: LD_INT 0
26831: ST_TO_ADDR
// if not array or not value in array then
26832: LD_VAR 0 1
26836: NOT
26837: PUSH
26838: LD_VAR 0 2
26842: PUSH
26843: LD_VAR 0 1
26847: IN
26848: NOT
26849: OR
26850: IFFALSE 26854
// exit ;
26852: GO 26908
// for i = 1 to array do
26854: LD_ADDR_VAR 0 4
26858: PUSH
26859: DOUBLE
26860: LD_INT 1
26862: DEC
26863: ST_TO_ADDR
26864: LD_VAR 0 1
26868: PUSH
26869: FOR_TO
26870: IFFALSE 26906
// if value = array [ i ] then
26872: LD_VAR 0 2
26876: PUSH
26877: LD_VAR 0 1
26881: PUSH
26882: LD_VAR 0 4
26886: ARRAY
26887: EQUAL
26888: IFFALSE 26904
// begin result := i ;
26890: LD_ADDR_VAR 0 3
26894: PUSH
26895: LD_VAR 0 4
26899: ST_TO_ADDR
// exit ;
26900: POP
26901: POP
26902: GO 26908
// end ;
26904: GO 26869
26906: POP
26907: POP
// end ;
26908: LD_VAR 0 3
26912: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26913: LD_INT 0
26915: PPUSH
// vc_chassis := chassis ;
26916: LD_ADDR_OWVAR 37
26920: PUSH
26921: LD_VAR 0 1
26925: ST_TO_ADDR
// vc_engine := engine ;
26926: LD_ADDR_OWVAR 39
26930: PUSH
26931: LD_VAR 0 2
26935: ST_TO_ADDR
// vc_control := control ;
26936: LD_ADDR_OWVAR 38
26940: PUSH
26941: LD_VAR 0 3
26945: ST_TO_ADDR
// vc_weapon := weapon ;
26946: LD_ADDR_OWVAR 40
26950: PUSH
26951: LD_VAR 0 4
26955: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26956: LD_ADDR_OWVAR 41
26960: PUSH
26961: LD_VAR 0 5
26965: ST_TO_ADDR
// end ;
26966: LD_VAR 0 6
26970: RET
// export function WantPlant ( unit ) ; var task ; begin
26971: LD_INT 0
26973: PPUSH
26974: PPUSH
// result := false ;
26975: LD_ADDR_VAR 0 2
26979: PUSH
26980: LD_INT 0
26982: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26983: LD_ADDR_VAR 0 3
26987: PUSH
26988: LD_VAR 0 1
26992: PPUSH
26993: CALL_OW 437
26997: ST_TO_ADDR
// if task then
26998: LD_VAR 0 3
27002: IFFALSE 27030
// if task [ 1 ] [ 1 ] = p then
27004: LD_VAR 0 3
27008: PUSH
27009: LD_INT 1
27011: ARRAY
27012: PUSH
27013: LD_INT 1
27015: ARRAY
27016: PUSH
27017: LD_STRING p
27019: EQUAL
27020: IFFALSE 27030
// result := true ;
27022: LD_ADDR_VAR 0 2
27026: PUSH
27027: LD_INT 1
27029: ST_TO_ADDR
// end ;
27030: LD_VAR 0 2
27034: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27035: LD_INT 0
27037: PPUSH
27038: PPUSH
27039: PPUSH
27040: PPUSH
// if pos < 1 then
27041: LD_VAR 0 2
27045: PUSH
27046: LD_INT 1
27048: LESS
27049: IFFALSE 27053
// exit ;
27051: GO 27356
// if pos = 1 then
27053: LD_VAR 0 2
27057: PUSH
27058: LD_INT 1
27060: EQUAL
27061: IFFALSE 27094
// result := Replace ( arr , pos [ 1 ] , value ) else
27063: LD_ADDR_VAR 0 4
27067: PUSH
27068: LD_VAR 0 1
27072: PPUSH
27073: LD_VAR 0 2
27077: PUSH
27078: LD_INT 1
27080: ARRAY
27081: PPUSH
27082: LD_VAR 0 3
27086: PPUSH
27087: CALL_OW 1
27091: ST_TO_ADDR
27092: GO 27356
// begin tmp := arr ;
27094: LD_ADDR_VAR 0 6
27098: PUSH
27099: LD_VAR 0 1
27103: ST_TO_ADDR
// s_arr := [ tmp ] ;
27104: LD_ADDR_VAR 0 7
27108: PUSH
27109: LD_VAR 0 6
27113: PUSH
27114: EMPTY
27115: LIST
27116: ST_TO_ADDR
// for i = 1 to pos - 1 do
27117: LD_ADDR_VAR 0 5
27121: PUSH
27122: DOUBLE
27123: LD_INT 1
27125: DEC
27126: ST_TO_ADDR
27127: LD_VAR 0 2
27131: PUSH
27132: LD_INT 1
27134: MINUS
27135: PUSH
27136: FOR_TO
27137: IFFALSE 27182
// begin tmp := tmp [ pos [ i ] ] ;
27139: LD_ADDR_VAR 0 6
27143: PUSH
27144: LD_VAR 0 6
27148: PUSH
27149: LD_VAR 0 2
27153: PUSH
27154: LD_VAR 0 5
27158: ARRAY
27159: ARRAY
27160: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27161: LD_ADDR_VAR 0 7
27165: PUSH
27166: LD_VAR 0 7
27170: PUSH
27171: LD_VAR 0 6
27175: PUSH
27176: EMPTY
27177: LIST
27178: ADD
27179: ST_TO_ADDR
// end ;
27180: GO 27136
27182: POP
27183: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27184: LD_ADDR_VAR 0 6
27188: PUSH
27189: LD_VAR 0 6
27193: PPUSH
27194: LD_VAR 0 2
27198: PUSH
27199: LD_VAR 0 2
27203: ARRAY
27204: PPUSH
27205: LD_VAR 0 3
27209: PPUSH
27210: CALL_OW 1
27214: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27215: LD_ADDR_VAR 0 7
27219: PUSH
27220: LD_VAR 0 7
27224: PPUSH
27225: LD_VAR 0 7
27229: PPUSH
27230: LD_VAR 0 6
27234: PPUSH
27235: CALL_OW 1
27239: ST_TO_ADDR
// for i = s_arr downto 2 do
27240: LD_ADDR_VAR 0 5
27244: PUSH
27245: DOUBLE
27246: LD_VAR 0 7
27250: INC
27251: ST_TO_ADDR
27252: LD_INT 2
27254: PUSH
27255: FOR_DOWNTO
27256: IFFALSE 27340
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27258: LD_ADDR_VAR 0 6
27262: PUSH
27263: LD_VAR 0 7
27267: PUSH
27268: LD_VAR 0 5
27272: PUSH
27273: LD_INT 1
27275: MINUS
27276: ARRAY
27277: PPUSH
27278: LD_VAR 0 2
27282: PUSH
27283: LD_VAR 0 5
27287: PUSH
27288: LD_INT 1
27290: MINUS
27291: ARRAY
27292: PPUSH
27293: LD_VAR 0 7
27297: PUSH
27298: LD_VAR 0 5
27302: ARRAY
27303: PPUSH
27304: CALL_OW 1
27308: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27309: LD_ADDR_VAR 0 7
27313: PUSH
27314: LD_VAR 0 7
27318: PPUSH
27319: LD_VAR 0 5
27323: PUSH
27324: LD_INT 1
27326: MINUS
27327: PPUSH
27328: LD_VAR 0 6
27332: PPUSH
27333: CALL_OW 1
27337: ST_TO_ADDR
// end ;
27338: GO 27255
27340: POP
27341: POP
// result := s_arr [ 1 ] ;
27342: LD_ADDR_VAR 0 4
27346: PUSH
27347: LD_VAR 0 7
27351: PUSH
27352: LD_INT 1
27354: ARRAY
27355: ST_TO_ADDR
// end ; end ;
27356: LD_VAR 0 4
27360: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27361: LD_INT 0
27363: PPUSH
27364: PPUSH
// if not list then
27365: LD_VAR 0 1
27369: NOT
27370: IFFALSE 27374
// exit ;
27372: GO 27465
// i := list [ pos1 ] ;
27374: LD_ADDR_VAR 0 5
27378: PUSH
27379: LD_VAR 0 1
27383: PUSH
27384: LD_VAR 0 2
27388: ARRAY
27389: ST_TO_ADDR
// if not i then
27390: LD_VAR 0 5
27394: NOT
27395: IFFALSE 27399
// exit ;
27397: GO 27465
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27399: LD_ADDR_VAR 0 1
27403: PUSH
27404: LD_VAR 0 1
27408: PPUSH
27409: LD_VAR 0 2
27413: PPUSH
27414: LD_VAR 0 1
27418: PUSH
27419: LD_VAR 0 3
27423: ARRAY
27424: PPUSH
27425: CALL_OW 1
27429: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27430: LD_ADDR_VAR 0 1
27434: PUSH
27435: LD_VAR 0 1
27439: PPUSH
27440: LD_VAR 0 3
27444: PPUSH
27445: LD_VAR 0 5
27449: PPUSH
27450: CALL_OW 1
27454: ST_TO_ADDR
// result := list ;
27455: LD_ADDR_VAR 0 4
27459: PUSH
27460: LD_VAR 0 1
27464: ST_TO_ADDR
// end ;
27465: LD_VAR 0 4
27469: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27470: LD_INT 0
27472: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27473: LD_ADDR_VAR 0 5
27477: PUSH
27478: LD_VAR 0 1
27482: PPUSH
27483: CALL_OW 250
27487: PPUSH
27488: LD_VAR 0 1
27492: PPUSH
27493: CALL_OW 251
27497: PPUSH
27498: LD_VAR 0 2
27502: PPUSH
27503: LD_VAR 0 3
27507: PPUSH
27508: LD_VAR 0 4
27512: PPUSH
27513: CALL 27523 0 5
27517: ST_TO_ADDR
// end ;
27518: LD_VAR 0 5
27522: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27523: LD_INT 0
27525: PPUSH
27526: PPUSH
27527: PPUSH
27528: PPUSH
// if not list then
27529: LD_VAR 0 3
27533: NOT
27534: IFFALSE 27538
// exit ;
27536: GO 27926
// result := [ ] ;
27538: LD_ADDR_VAR 0 6
27542: PUSH
27543: EMPTY
27544: ST_TO_ADDR
// for i in list do
27545: LD_ADDR_VAR 0 7
27549: PUSH
27550: LD_VAR 0 3
27554: PUSH
27555: FOR_IN
27556: IFFALSE 27758
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27558: LD_ADDR_VAR 0 9
27562: PUSH
27563: LD_VAR 0 7
27567: PPUSH
27568: LD_VAR 0 1
27572: PPUSH
27573: LD_VAR 0 2
27577: PPUSH
27578: CALL_OW 297
27582: ST_TO_ADDR
// if not result then
27583: LD_VAR 0 6
27587: NOT
27588: IFFALSE 27614
// result := [ [ i , tmp ] ] else
27590: LD_ADDR_VAR 0 6
27594: PUSH
27595: LD_VAR 0 7
27599: PUSH
27600: LD_VAR 0 9
27604: PUSH
27605: EMPTY
27606: LIST
27607: LIST
27608: PUSH
27609: EMPTY
27610: LIST
27611: ST_TO_ADDR
27612: GO 27756
// begin if result [ result ] [ 2 ] < tmp then
27614: LD_VAR 0 6
27618: PUSH
27619: LD_VAR 0 6
27623: ARRAY
27624: PUSH
27625: LD_INT 2
27627: ARRAY
27628: PUSH
27629: LD_VAR 0 9
27633: LESS
27634: IFFALSE 27676
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27636: LD_ADDR_VAR 0 6
27640: PUSH
27641: LD_VAR 0 6
27645: PPUSH
27646: LD_VAR 0 6
27650: PUSH
27651: LD_INT 1
27653: PLUS
27654: PPUSH
27655: LD_VAR 0 7
27659: PUSH
27660: LD_VAR 0 9
27664: PUSH
27665: EMPTY
27666: LIST
27667: LIST
27668: PPUSH
27669: CALL_OW 2
27673: ST_TO_ADDR
27674: GO 27756
// for j = 1 to result do
27676: LD_ADDR_VAR 0 8
27680: PUSH
27681: DOUBLE
27682: LD_INT 1
27684: DEC
27685: ST_TO_ADDR
27686: LD_VAR 0 6
27690: PUSH
27691: FOR_TO
27692: IFFALSE 27754
// begin if tmp < result [ j ] [ 2 ] then
27694: LD_VAR 0 9
27698: PUSH
27699: LD_VAR 0 6
27703: PUSH
27704: LD_VAR 0 8
27708: ARRAY
27709: PUSH
27710: LD_INT 2
27712: ARRAY
27713: LESS
27714: IFFALSE 27752
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27716: LD_ADDR_VAR 0 6
27720: PUSH
27721: LD_VAR 0 6
27725: PPUSH
27726: LD_VAR 0 8
27730: PPUSH
27731: LD_VAR 0 7
27735: PUSH
27736: LD_VAR 0 9
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PPUSH
27745: CALL_OW 2
27749: ST_TO_ADDR
// break ;
27750: GO 27754
// end ; end ;
27752: GO 27691
27754: POP
27755: POP
// end ; end ;
27756: GO 27555
27758: POP
27759: POP
// if result and not asc then
27760: LD_VAR 0 6
27764: PUSH
27765: LD_VAR 0 4
27769: NOT
27770: AND
27771: IFFALSE 27846
// begin tmp := result ;
27773: LD_ADDR_VAR 0 9
27777: PUSH
27778: LD_VAR 0 6
27782: ST_TO_ADDR
// for i = tmp downto 1 do
27783: LD_ADDR_VAR 0 7
27787: PUSH
27788: DOUBLE
27789: LD_VAR 0 9
27793: INC
27794: ST_TO_ADDR
27795: LD_INT 1
27797: PUSH
27798: FOR_DOWNTO
27799: IFFALSE 27844
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27801: LD_ADDR_VAR 0 6
27805: PUSH
27806: LD_VAR 0 6
27810: PPUSH
27811: LD_VAR 0 9
27815: PUSH
27816: LD_VAR 0 7
27820: MINUS
27821: PUSH
27822: LD_INT 1
27824: PLUS
27825: PPUSH
27826: LD_VAR 0 9
27830: PUSH
27831: LD_VAR 0 7
27835: ARRAY
27836: PPUSH
27837: CALL_OW 1
27841: ST_TO_ADDR
27842: GO 27798
27844: POP
27845: POP
// end ; tmp := [ ] ;
27846: LD_ADDR_VAR 0 9
27850: PUSH
27851: EMPTY
27852: ST_TO_ADDR
// if mode then
27853: LD_VAR 0 5
27857: IFFALSE 27926
// begin for i = 1 to result do
27859: LD_ADDR_VAR 0 7
27863: PUSH
27864: DOUBLE
27865: LD_INT 1
27867: DEC
27868: ST_TO_ADDR
27869: LD_VAR 0 6
27873: PUSH
27874: FOR_TO
27875: IFFALSE 27914
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27877: LD_ADDR_VAR 0 9
27881: PUSH
27882: LD_VAR 0 9
27886: PPUSH
27887: LD_VAR 0 7
27891: PPUSH
27892: LD_VAR 0 6
27896: PUSH
27897: LD_VAR 0 7
27901: ARRAY
27902: PUSH
27903: LD_INT 1
27905: ARRAY
27906: PPUSH
27907: CALL_OW 1
27911: ST_TO_ADDR
27912: GO 27874
27914: POP
27915: POP
// result := tmp ;
27916: LD_ADDR_VAR 0 6
27920: PUSH
27921: LD_VAR 0 9
27925: ST_TO_ADDR
// end ; end ;
27926: LD_VAR 0 6
27930: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27931: LD_INT 0
27933: PPUSH
27934: PPUSH
27935: PPUSH
27936: PPUSH
27937: PPUSH
27938: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27939: LD_ADDR_VAR 0 5
27943: PUSH
27944: LD_INT 0
27946: PUSH
27947: LD_INT 0
27949: PUSH
27950: LD_INT 0
27952: PUSH
27953: EMPTY
27954: PUSH
27955: EMPTY
27956: LIST
27957: LIST
27958: LIST
27959: LIST
27960: ST_TO_ADDR
// if not x or not y then
27961: LD_VAR 0 2
27965: NOT
27966: PUSH
27967: LD_VAR 0 3
27971: NOT
27972: OR
27973: IFFALSE 27977
// exit ;
27975: GO 29629
// if not range then
27977: LD_VAR 0 4
27981: NOT
27982: IFFALSE 27992
// range := 10 ;
27984: LD_ADDR_VAR 0 4
27988: PUSH
27989: LD_INT 10
27991: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27992: LD_ADDR_VAR 0 8
27996: PUSH
27997: LD_INT 81
27999: PUSH
28000: LD_VAR 0 1
28004: PUSH
28005: EMPTY
28006: LIST
28007: LIST
28008: PUSH
28009: LD_INT 92
28011: PUSH
28012: LD_VAR 0 2
28016: PUSH
28017: LD_VAR 0 3
28021: PUSH
28022: LD_VAR 0 4
28026: PUSH
28027: EMPTY
28028: LIST
28029: LIST
28030: LIST
28031: LIST
28032: PUSH
28033: LD_INT 3
28035: PUSH
28036: LD_INT 21
28038: PUSH
28039: LD_INT 3
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: PUSH
28050: EMPTY
28051: LIST
28052: LIST
28053: LIST
28054: PPUSH
28055: CALL_OW 69
28059: ST_TO_ADDR
// if not tmp then
28060: LD_VAR 0 8
28064: NOT
28065: IFFALSE 28069
// exit ;
28067: GO 29629
// for i in tmp do
28069: LD_ADDR_VAR 0 6
28073: PUSH
28074: LD_VAR 0 8
28078: PUSH
28079: FOR_IN
28080: IFFALSE 29604
// begin points := [ 0 , 0 , 0 ] ;
28082: LD_ADDR_VAR 0 9
28086: PUSH
28087: LD_INT 0
28089: PUSH
28090: LD_INT 0
28092: PUSH
28093: LD_INT 0
28095: PUSH
28096: EMPTY
28097: LIST
28098: LIST
28099: LIST
28100: ST_TO_ADDR
// bpoints := 1 ;
28101: LD_ADDR_VAR 0 10
28105: PUSH
28106: LD_INT 1
28108: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28109: LD_VAR 0 6
28113: PPUSH
28114: CALL_OW 247
28118: PUSH
28119: LD_INT 1
28121: DOUBLE
28122: EQUAL
28123: IFTRUE 28127
28125: GO 28705
28127: POP
// begin if GetClass ( i ) = 1 then
28128: LD_VAR 0 6
28132: PPUSH
28133: CALL_OW 257
28137: PUSH
28138: LD_INT 1
28140: EQUAL
28141: IFFALSE 28162
// points := [ 10 , 5 , 3 ] ;
28143: LD_ADDR_VAR 0 9
28147: PUSH
28148: LD_INT 10
28150: PUSH
28151: LD_INT 5
28153: PUSH
28154: LD_INT 3
28156: PUSH
28157: EMPTY
28158: LIST
28159: LIST
28160: LIST
28161: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28162: LD_VAR 0 6
28166: PPUSH
28167: CALL_OW 257
28171: PUSH
28172: LD_INT 2
28174: PUSH
28175: LD_INT 3
28177: PUSH
28178: LD_INT 4
28180: PUSH
28181: EMPTY
28182: LIST
28183: LIST
28184: LIST
28185: IN
28186: IFFALSE 28207
// points := [ 3 , 2 , 1 ] ;
28188: LD_ADDR_VAR 0 9
28192: PUSH
28193: LD_INT 3
28195: PUSH
28196: LD_INT 2
28198: PUSH
28199: LD_INT 1
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: LIST
28206: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28207: LD_VAR 0 6
28211: PPUSH
28212: CALL_OW 257
28216: PUSH
28217: LD_INT 5
28219: EQUAL
28220: IFFALSE 28241
// points := [ 130 , 5 , 2 ] ;
28222: LD_ADDR_VAR 0 9
28226: PUSH
28227: LD_INT 130
28229: PUSH
28230: LD_INT 5
28232: PUSH
28233: LD_INT 2
28235: PUSH
28236: EMPTY
28237: LIST
28238: LIST
28239: LIST
28240: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28241: LD_VAR 0 6
28245: PPUSH
28246: CALL_OW 257
28250: PUSH
28251: LD_INT 8
28253: EQUAL
28254: IFFALSE 28275
// points := [ 35 , 35 , 30 ] ;
28256: LD_ADDR_VAR 0 9
28260: PUSH
28261: LD_INT 35
28263: PUSH
28264: LD_INT 35
28266: PUSH
28267: LD_INT 30
28269: PUSH
28270: EMPTY
28271: LIST
28272: LIST
28273: LIST
28274: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28275: LD_VAR 0 6
28279: PPUSH
28280: CALL_OW 257
28284: PUSH
28285: LD_INT 9
28287: EQUAL
28288: IFFALSE 28309
// points := [ 20 , 55 , 40 ] ;
28290: LD_ADDR_VAR 0 9
28294: PUSH
28295: LD_INT 20
28297: PUSH
28298: LD_INT 55
28300: PUSH
28301: LD_INT 40
28303: PUSH
28304: EMPTY
28305: LIST
28306: LIST
28307: LIST
28308: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28309: LD_VAR 0 6
28313: PPUSH
28314: CALL_OW 257
28318: PUSH
28319: LD_INT 12
28321: PUSH
28322: LD_INT 16
28324: PUSH
28325: EMPTY
28326: LIST
28327: LIST
28328: IN
28329: IFFALSE 28350
// points := [ 5 , 3 , 2 ] ;
28331: LD_ADDR_VAR 0 9
28335: PUSH
28336: LD_INT 5
28338: PUSH
28339: LD_INT 3
28341: PUSH
28342: LD_INT 2
28344: PUSH
28345: EMPTY
28346: LIST
28347: LIST
28348: LIST
28349: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28350: LD_VAR 0 6
28354: PPUSH
28355: CALL_OW 257
28359: PUSH
28360: LD_INT 17
28362: EQUAL
28363: IFFALSE 28384
// points := [ 100 , 50 , 75 ] ;
28365: LD_ADDR_VAR 0 9
28369: PUSH
28370: LD_INT 100
28372: PUSH
28373: LD_INT 50
28375: PUSH
28376: LD_INT 75
28378: PUSH
28379: EMPTY
28380: LIST
28381: LIST
28382: LIST
28383: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28384: LD_VAR 0 6
28388: PPUSH
28389: CALL_OW 257
28393: PUSH
28394: LD_INT 15
28396: EQUAL
28397: IFFALSE 28418
// points := [ 10 , 5 , 3 ] ;
28399: LD_ADDR_VAR 0 9
28403: PUSH
28404: LD_INT 10
28406: PUSH
28407: LD_INT 5
28409: PUSH
28410: LD_INT 3
28412: PUSH
28413: EMPTY
28414: LIST
28415: LIST
28416: LIST
28417: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28418: LD_VAR 0 6
28422: PPUSH
28423: CALL_OW 257
28427: PUSH
28428: LD_INT 14
28430: EQUAL
28431: IFFALSE 28452
// points := [ 10 , 0 , 0 ] ;
28433: LD_ADDR_VAR 0 9
28437: PUSH
28438: LD_INT 10
28440: PUSH
28441: LD_INT 0
28443: PUSH
28444: LD_INT 0
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: LIST
28451: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28452: LD_VAR 0 6
28456: PPUSH
28457: CALL_OW 257
28461: PUSH
28462: LD_INT 11
28464: EQUAL
28465: IFFALSE 28486
// points := [ 30 , 10 , 5 ] ;
28467: LD_ADDR_VAR 0 9
28471: PUSH
28472: LD_INT 30
28474: PUSH
28475: LD_INT 10
28477: PUSH
28478: LD_INT 5
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: LIST
28485: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28486: LD_VAR 0 1
28490: PPUSH
28491: LD_INT 5
28493: PPUSH
28494: CALL_OW 321
28498: PUSH
28499: LD_INT 2
28501: EQUAL
28502: IFFALSE 28519
// bpoints := bpoints * 1.8 ;
28504: LD_ADDR_VAR 0 10
28508: PUSH
28509: LD_VAR 0 10
28513: PUSH
28514: LD_REAL  1.80000000000000E+0000
28517: MUL
28518: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28519: LD_VAR 0 6
28523: PPUSH
28524: CALL_OW 257
28528: PUSH
28529: LD_INT 1
28531: PUSH
28532: LD_INT 2
28534: PUSH
28535: LD_INT 3
28537: PUSH
28538: LD_INT 4
28540: PUSH
28541: EMPTY
28542: LIST
28543: LIST
28544: LIST
28545: LIST
28546: IN
28547: PUSH
28548: LD_VAR 0 1
28552: PPUSH
28553: LD_INT 51
28555: PPUSH
28556: CALL_OW 321
28560: PUSH
28561: LD_INT 2
28563: EQUAL
28564: AND
28565: IFFALSE 28582
// bpoints := bpoints * 1.2 ;
28567: LD_ADDR_VAR 0 10
28571: PUSH
28572: LD_VAR 0 10
28576: PUSH
28577: LD_REAL  1.20000000000000E+0000
28580: MUL
28581: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28582: LD_VAR 0 6
28586: PPUSH
28587: CALL_OW 257
28591: PUSH
28592: LD_INT 5
28594: PUSH
28595: LD_INT 7
28597: PUSH
28598: LD_INT 9
28600: PUSH
28601: EMPTY
28602: LIST
28603: LIST
28604: LIST
28605: IN
28606: PUSH
28607: LD_VAR 0 1
28611: PPUSH
28612: LD_INT 52
28614: PPUSH
28615: CALL_OW 321
28619: PUSH
28620: LD_INT 2
28622: EQUAL
28623: AND
28624: IFFALSE 28641
// bpoints := bpoints * 1.5 ;
28626: LD_ADDR_VAR 0 10
28630: PUSH
28631: LD_VAR 0 10
28635: PUSH
28636: LD_REAL  1.50000000000000E+0000
28639: MUL
28640: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28641: LD_VAR 0 1
28645: PPUSH
28646: LD_INT 66
28648: PPUSH
28649: CALL_OW 321
28653: PUSH
28654: LD_INT 2
28656: EQUAL
28657: IFFALSE 28674
// bpoints := bpoints * 1.1 ;
28659: LD_ADDR_VAR 0 10
28663: PUSH
28664: LD_VAR 0 10
28668: PUSH
28669: LD_REAL  1.10000000000000E+0000
28672: MUL
28673: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28674: LD_ADDR_VAR 0 10
28678: PUSH
28679: LD_VAR 0 10
28683: PUSH
28684: LD_VAR 0 6
28688: PPUSH
28689: LD_INT 1
28691: PPUSH
28692: CALL_OW 259
28696: PUSH
28697: LD_REAL  1.15000000000000E+0000
28700: MUL
28701: MUL
28702: ST_TO_ADDR
// end ; unit_vehicle :
28703: GO 29533
28705: LD_INT 2
28707: DOUBLE
28708: EQUAL
28709: IFTRUE 28713
28711: GO 29521
28713: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28714: LD_VAR 0 6
28718: PPUSH
28719: CALL_OW 264
28723: PUSH
28724: LD_INT 2
28726: PUSH
28727: LD_INT 42
28729: PUSH
28730: LD_INT 24
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: LIST
28737: IN
28738: IFFALSE 28759
// points := [ 25 , 5 , 3 ] ;
28740: LD_ADDR_VAR 0 9
28744: PUSH
28745: LD_INT 25
28747: PUSH
28748: LD_INT 5
28750: PUSH
28751: LD_INT 3
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: LIST
28758: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28759: LD_VAR 0 6
28763: PPUSH
28764: CALL_OW 264
28768: PUSH
28769: LD_INT 4
28771: PUSH
28772: LD_INT 43
28774: PUSH
28775: LD_INT 25
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: LIST
28782: IN
28783: IFFALSE 28804
// points := [ 40 , 15 , 5 ] ;
28785: LD_ADDR_VAR 0 9
28789: PUSH
28790: LD_INT 40
28792: PUSH
28793: LD_INT 15
28795: PUSH
28796: LD_INT 5
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: LIST
28803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28804: LD_VAR 0 6
28808: PPUSH
28809: CALL_OW 264
28813: PUSH
28814: LD_INT 3
28816: PUSH
28817: LD_INT 23
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: IN
28824: IFFALSE 28845
// points := [ 7 , 25 , 8 ] ;
28826: LD_ADDR_VAR 0 9
28830: PUSH
28831: LD_INT 7
28833: PUSH
28834: LD_INT 25
28836: PUSH
28837: LD_INT 8
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: LIST
28844: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28845: LD_VAR 0 6
28849: PPUSH
28850: CALL_OW 264
28854: PUSH
28855: LD_INT 5
28857: PUSH
28858: LD_INT 27
28860: PUSH
28861: LD_INT 44
28863: PUSH
28864: EMPTY
28865: LIST
28866: LIST
28867: LIST
28868: IN
28869: IFFALSE 28890
// points := [ 14 , 50 , 16 ] ;
28871: LD_ADDR_VAR 0 9
28875: PUSH
28876: LD_INT 14
28878: PUSH
28879: LD_INT 50
28881: PUSH
28882: LD_INT 16
28884: PUSH
28885: EMPTY
28886: LIST
28887: LIST
28888: LIST
28889: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28890: LD_VAR 0 6
28894: PPUSH
28895: CALL_OW 264
28899: PUSH
28900: LD_INT 6
28902: PUSH
28903: LD_INT 46
28905: PUSH
28906: EMPTY
28907: LIST
28908: LIST
28909: IN
28910: IFFALSE 28931
// points := [ 32 , 120 , 70 ] ;
28912: LD_ADDR_VAR 0 9
28916: PUSH
28917: LD_INT 32
28919: PUSH
28920: LD_INT 120
28922: PUSH
28923: LD_INT 70
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: LIST
28930: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28931: LD_VAR 0 6
28935: PPUSH
28936: CALL_OW 264
28940: PUSH
28941: LD_INT 7
28943: PUSH
28944: LD_INT 28
28946: PUSH
28947: LD_INT 45
28949: PUSH
28950: LD_EXP 44
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: LIST
28959: LIST
28960: IN
28961: IFFALSE 28982
// points := [ 35 , 20 , 45 ] ;
28963: LD_ADDR_VAR 0 9
28967: PUSH
28968: LD_INT 35
28970: PUSH
28971: LD_INT 20
28973: PUSH
28974: LD_INT 45
28976: PUSH
28977: EMPTY
28978: LIST
28979: LIST
28980: LIST
28981: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28982: LD_VAR 0 6
28986: PPUSH
28987: CALL_OW 264
28991: PUSH
28992: LD_INT 47
28994: PUSH
28995: EMPTY
28996: LIST
28997: IN
28998: IFFALSE 29019
// points := [ 67 , 45 , 75 ] ;
29000: LD_ADDR_VAR 0 9
29004: PUSH
29005: LD_INT 67
29007: PUSH
29008: LD_INT 45
29010: PUSH
29011: LD_INT 75
29013: PUSH
29014: EMPTY
29015: LIST
29016: LIST
29017: LIST
29018: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29019: LD_VAR 0 6
29023: PPUSH
29024: CALL_OW 264
29028: PUSH
29029: LD_INT 26
29031: PUSH
29032: EMPTY
29033: LIST
29034: IN
29035: IFFALSE 29056
// points := [ 120 , 30 , 80 ] ;
29037: LD_ADDR_VAR 0 9
29041: PUSH
29042: LD_INT 120
29044: PUSH
29045: LD_INT 30
29047: PUSH
29048: LD_INT 80
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: LIST
29055: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29056: LD_VAR 0 6
29060: PPUSH
29061: CALL_OW 264
29065: PUSH
29066: LD_INT 22
29068: PUSH
29069: EMPTY
29070: LIST
29071: IN
29072: IFFALSE 29093
// points := [ 40 , 1 , 1 ] ;
29074: LD_ADDR_VAR 0 9
29078: PUSH
29079: LD_INT 40
29081: PUSH
29082: LD_INT 1
29084: PUSH
29085: LD_INT 1
29087: PUSH
29088: EMPTY
29089: LIST
29090: LIST
29091: LIST
29092: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29093: LD_VAR 0 6
29097: PPUSH
29098: CALL_OW 264
29102: PUSH
29103: LD_INT 29
29105: PUSH
29106: EMPTY
29107: LIST
29108: IN
29109: IFFALSE 29130
// points := [ 70 , 200 , 400 ] ;
29111: LD_ADDR_VAR 0 9
29115: PUSH
29116: LD_INT 70
29118: PUSH
29119: LD_INT 200
29121: PUSH
29122: LD_INT 400
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: LIST
29129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29130: LD_VAR 0 6
29134: PPUSH
29135: CALL_OW 264
29139: PUSH
29140: LD_INT 14
29142: PUSH
29143: LD_INT 53
29145: PUSH
29146: EMPTY
29147: LIST
29148: LIST
29149: IN
29150: IFFALSE 29171
// points := [ 40 , 10 , 20 ] ;
29152: LD_ADDR_VAR 0 9
29156: PUSH
29157: LD_INT 40
29159: PUSH
29160: LD_INT 10
29162: PUSH
29163: LD_INT 20
29165: PUSH
29166: EMPTY
29167: LIST
29168: LIST
29169: LIST
29170: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29171: LD_VAR 0 6
29175: PPUSH
29176: CALL_OW 264
29180: PUSH
29181: LD_INT 9
29183: PUSH
29184: EMPTY
29185: LIST
29186: IN
29187: IFFALSE 29208
// points := [ 5 , 70 , 20 ] ;
29189: LD_ADDR_VAR 0 9
29193: PUSH
29194: LD_INT 5
29196: PUSH
29197: LD_INT 70
29199: PUSH
29200: LD_INT 20
29202: PUSH
29203: EMPTY
29204: LIST
29205: LIST
29206: LIST
29207: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29208: LD_VAR 0 6
29212: PPUSH
29213: CALL_OW 264
29217: PUSH
29218: LD_INT 10
29220: PUSH
29221: EMPTY
29222: LIST
29223: IN
29224: IFFALSE 29245
// points := [ 35 , 110 , 70 ] ;
29226: LD_ADDR_VAR 0 9
29230: PUSH
29231: LD_INT 35
29233: PUSH
29234: LD_INT 110
29236: PUSH
29237: LD_INT 70
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: LIST
29244: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29245: LD_VAR 0 6
29249: PPUSH
29250: CALL_OW 265
29254: PUSH
29255: LD_INT 25
29257: EQUAL
29258: IFFALSE 29279
// points := [ 80 , 65 , 100 ] ;
29260: LD_ADDR_VAR 0 9
29264: PUSH
29265: LD_INT 80
29267: PUSH
29268: LD_INT 65
29270: PUSH
29271: LD_INT 100
29273: PUSH
29274: EMPTY
29275: LIST
29276: LIST
29277: LIST
29278: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29279: LD_VAR 0 6
29283: PPUSH
29284: CALL_OW 263
29288: PUSH
29289: LD_INT 1
29291: EQUAL
29292: IFFALSE 29327
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29294: LD_ADDR_VAR 0 10
29298: PUSH
29299: LD_VAR 0 10
29303: PUSH
29304: LD_VAR 0 6
29308: PPUSH
29309: CALL_OW 311
29313: PPUSH
29314: LD_INT 3
29316: PPUSH
29317: CALL_OW 259
29321: PUSH
29322: LD_INT 4
29324: MUL
29325: MUL
29326: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29327: LD_VAR 0 6
29331: PPUSH
29332: CALL_OW 263
29336: PUSH
29337: LD_INT 2
29339: EQUAL
29340: IFFALSE 29391
// begin j := IsControledBy ( i ) ;
29342: LD_ADDR_VAR 0 7
29346: PUSH
29347: LD_VAR 0 6
29351: PPUSH
29352: CALL_OW 312
29356: ST_TO_ADDR
// if j then
29357: LD_VAR 0 7
29361: IFFALSE 29391
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29363: LD_ADDR_VAR 0 10
29367: PUSH
29368: LD_VAR 0 10
29372: PUSH
29373: LD_VAR 0 7
29377: PPUSH
29378: LD_INT 3
29380: PPUSH
29381: CALL_OW 259
29385: PUSH
29386: LD_INT 3
29388: MUL
29389: MUL
29390: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29391: LD_VAR 0 6
29395: PPUSH
29396: CALL_OW 264
29400: PUSH
29401: LD_INT 5
29403: PUSH
29404: LD_INT 6
29406: PUSH
29407: LD_INT 46
29409: PUSH
29410: LD_INT 44
29412: PUSH
29413: LD_INT 47
29415: PUSH
29416: LD_INT 45
29418: PUSH
29419: LD_INT 28
29421: PUSH
29422: LD_INT 7
29424: PUSH
29425: LD_INT 27
29427: PUSH
29428: LD_INT 29
29430: PUSH
29431: EMPTY
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: LIST
29438: LIST
29439: LIST
29440: LIST
29441: LIST
29442: IN
29443: PUSH
29444: LD_VAR 0 1
29448: PPUSH
29449: LD_INT 52
29451: PPUSH
29452: CALL_OW 321
29456: PUSH
29457: LD_INT 2
29459: EQUAL
29460: AND
29461: IFFALSE 29478
// bpoints := bpoints * 1.2 ;
29463: LD_ADDR_VAR 0 10
29467: PUSH
29468: LD_VAR 0 10
29472: PUSH
29473: LD_REAL  1.20000000000000E+0000
29476: MUL
29477: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29478: LD_VAR 0 6
29482: PPUSH
29483: CALL_OW 264
29487: PUSH
29488: LD_INT 6
29490: PUSH
29491: LD_INT 46
29493: PUSH
29494: LD_INT 47
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: LIST
29501: IN
29502: IFFALSE 29519
// bpoints := bpoints * 1.2 ;
29504: LD_ADDR_VAR 0 10
29508: PUSH
29509: LD_VAR 0 10
29513: PUSH
29514: LD_REAL  1.20000000000000E+0000
29517: MUL
29518: ST_TO_ADDR
// end ; unit_building :
29519: GO 29533
29521: LD_INT 3
29523: DOUBLE
29524: EQUAL
29525: IFTRUE 29529
29527: GO 29532
29529: POP
// ; end ;
29530: GO 29533
29532: POP
// for j = 1 to 3 do
29533: LD_ADDR_VAR 0 7
29537: PUSH
29538: DOUBLE
29539: LD_INT 1
29541: DEC
29542: ST_TO_ADDR
29543: LD_INT 3
29545: PUSH
29546: FOR_TO
29547: IFFALSE 29600
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29549: LD_ADDR_VAR 0 5
29553: PUSH
29554: LD_VAR 0 5
29558: PPUSH
29559: LD_VAR 0 7
29563: PPUSH
29564: LD_VAR 0 5
29568: PUSH
29569: LD_VAR 0 7
29573: ARRAY
29574: PUSH
29575: LD_VAR 0 9
29579: PUSH
29580: LD_VAR 0 7
29584: ARRAY
29585: PUSH
29586: LD_VAR 0 10
29590: MUL
29591: PLUS
29592: PPUSH
29593: CALL_OW 1
29597: ST_TO_ADDR
29598: GO 29546
29600: POP
29601: POP
// end ;
29602: GO 28079
29604: POP
29605: POP
// result := Replace ( result , 4 , tmp ) ;
29606: LD_ADDR_VAR 0 5
29610: PUSH
29611: LD_VAR 0 5
29615: PPUSH
29616: LD_INT 4
29618: PPUSH
29619: LD_VAR 0 8
29623: PPUSH
29624: CALL_OW 1
29628: ST_TO_ADDR
// end ;
29629: LD_VAR 0 5
29633: RET
// export function DangerAtRange ( unit , range ) ; begin
29634: LD_INT 0
29636: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29637: LD_ADDR_VAR 0 3
29641: PUSH
29642: LD_VAR 0 1
29646: PPUSH
29647: CALL_OW 255
29651: PPUSH
29652: LD_VAR 0 1
29656: PPUSH
29657: CALL_OW 250
29661: PPUSH
29662: LD_VAR 0 1
29666: PPUSH
29667: CALL_OW 251
29671: PPUSH
29672: LD_VAR 0 2
29676: PPUSH
29677: CALL 27931 0 4
29681: ST_TO_ADDR
// end ;
29682: LD_VAR 0 3
29686: RET
// export function DangerInArea ( side , area ) ; begin
29687: LD_INT 0
29689: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29690: LD_ADDR_VAR 0 3
29694: PUSH
29695: LD_VAR 0 2
29699: PPUSH
29700: LD_INT 81
29702: PUSH
29703: LD_VAR 0 1
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PPUSH
29712: CALL_OW 70
29716: ST_TO_ADDR
// end ;
29717: LD_VAR 0 3
29721: RET
// export function IsExtension ( b ) ; begin
29722: LD_INT 0
29724: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29725: LD_ADDR_VAR 0 2
29729: PUSH
29730: LD_VAR 0 1
29734: PUSH
29735: LD_INT 23
29737: PUSH
29738: LD_INT 20
29740: PUSH
29741: LD_INT 22
29743: PUSH
29744: LD_INT 17
29746: PUSH
29747: LD_INT 24
29749: PUSH
29750: LD_INT 21
29752: PUSH
29753: LD_INT 19
29755: PUSH
29756: LD_INT 16
29758: PUSH
29759: LD_INT 25
29761: PUSH
29762: LD_INT 18
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: LIST
29769: LIST
29770: LIST
29771: LIST
29772: LIST
29773: LIST
29774: LIST
29775: LIST
29776: IN
29777: ST_TO_ADDR
// end ;
29778: LD_VAR 0 2
29782: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29783: LD_INT 0
29785: PPUSH
29786: PPUSH
29787: PPUSH
// result := [ ] ;
29788: LD_ADDR_VAR 0 4
29792: PUSH
29793: EMPTY
29794: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29795: LD_ADDR_VAR 0 5
29799: PUSH
29800: LD_VAR 0 2
29804: PPUSH
29805: LD_INT 21
29807: PUSH
29808: LD_INT 3
29810: PUSH
29811: EMPTY
29812: LIST
29813: LIST
29814: PPUSH
29815: CALL_OW 70
29819: ST_TO_ADDR
// if not tmp then
29820: LD_VAR 0 5
29824: NOT
29825: IFFALSE 29829
// exit ;
29827: GO 29893
// if checkLink then
29829: LD_VAR 0 3
29833: IFFALSE 29883
// begin for i in tmp do
29835: LD_ADDR_VAR 0 6
29839: PUSH
29840: LD_VAR 0 5
29844: PUSH
29845: FOR_IN
29846: IFFALSE 29881
// if GetBase ( i ) <> base then
29848: LD_VAR 0 6
29852: PPUSH
29853: CALL_OW 274
29857: PUSH
29858: LD_VAR 0 1
29862: NONEQUAL
29863: IFFALSE 29879
// ComLinkToBase ( base , i ) ;
29865: LD_VAR 0 1
29869: PPUSH
29870: LD_VAR 0 6
29874: PPUSH
29875: CALL_OW 169
29879: GO 29845
29881: POP
29882: POP
// end ; result := tmp ;
29883: LD_ADDR_VAR 0 4
29887: PUSH
29888: LD_VAR 0 5
29892: ST_TO_ADDR
// end ;
29893: LD_VAR 0 4
29897: RET
// export function ComComplete ( units , b ) ; var i ; begin
29898: LD_INT 0
29900: PPUSH
29901: PPUSH
// if not units then
29902: LD_VAR 0 1
29906: NOT
29907: IFFALSE 29911
// exit ;
29909: GO 30001
// for i in units do
29911: LD_ADDR_VAR 0 4
29915: PUSH
29916: LD_VAR 0 1
29920: PUSH
29921: FOR_IN
29922: IFFALSE 29999
// if BuildingStatus ( b ) = bs_build then
29924: LD_VAR 0 2
29928: PPUSH
29929: CALL_OW 461
29933: PUSH
29934: LD_INT 1
29936: EQUAL
29937: IFFALSE 29997
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29939: LD_VAR 0 4
29943: PPUSH
29944: LD_STRING h
29946: PUSH
29947: LD_VAR 0 2
29951: PPUSH
29952: CALL_OW 250
29956: PUSH
29957: LD_VAR 0 2
29961: PPUSH
29962: CALL_OW 251
29966: PUSH
29967: LD_VAR 0 2
29971: PUSH
29972: LD_INT 0
29974: PUSH
29975: LD_INT 0
29977: PUSH
29978: LD_INT 0
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: LIST
29987: LIST
29988: LIST
29989: PUSH
29990: EMPTY
29991: LIST
29992: PPUSH
29993: CALL_OW 446
29997: GO 29921
29999: POP
30000: POP
// end ;
30001: LD_VAR 0 3
30005: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30006: LD_INT 0
30008: PPUSH
30009: PPUSH
30010: PPUSH
30011: PPUSH
30012: PPUSH
30013: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30014: LD_VAR 0 1
30018: NOT
30019: PUSH
30020: LD_VAR 0 1
30024: PPUSH
30025: CALL_OW 263
30029: PUSH
30030: LD_INT 2
30032: NONEQUAL
30033: OR
30034: IFFALSE 30038
// exit ;
30036: GO 30354
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30038: LD_ADDR_VAR 0 6
30042: PUSH
30043: LD_INT 22
30045: PUSH
30046: LD_VAR 0 1
30050: PPUSH
30051: CALL_OW 255
30055: PUSH
30056: EMPTY
30057: LIST
30058: LIST
30059: PUSH
30060: LD_INT 2
30062: PUSH
30063: LD_INT 30
30065: PUSH
30066: LD_INT 36
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: PUSH
30073: LD_INT 34
30075: PUSH
30076: LD_INT 31
30078: PUSH
30079: EMPTY
30080: LIST
30081: LIST
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: LIST
30087: PUSH
30088: EMPTY
30089: LIST
30090: LIST
30091: PPUSH
30092: CALL_OW 69
30096: ST_TO_ADDR
// if not tmp then
30097: LD_VAR 0 6
30101: NOT
30102: IFFALSE 30106
// exit ;
30104: GO 30354
// result := [ ] ;
30106: LD_ADDR_VAR 0 2
30110: PUSH
30111: EMPTY
30112: ST_TO_ADDR
// for i in tmp do
30113: LD_ADDR_VAR 0 3
30117: PUSH
30118: LD_VAR 0 6
30122: PUSH
30123: FOR_IN
30124: IFFALSE 30195
// begin t := UnitsInside ( i ) ;
30126: LD_ADDR_VAR 0 4
30130: PUSH
30131: LD_VAR 0 3
30135: PPUSH
30136: CALL_OW 313
30140: ST_TO_ADDR
// if t then
30141: LD_VAR 0 4
30145: IFFALSE 30193
// for j in t do
30147: LD_ADDR_VAR 0 7
30151: PUSH
30152: LD_VAR 0 4
30156: PUSH
30157: FOR_IN
30158: IFFALSE 30191
// result := Replace ( result , result + 1 , j ) ;
30160: LD_ADDR_VAR 0 2
30164: PUSH
30165: LD_VAR 0 2
30169: PPUSH
30170: LD_VAR 0 2
30174: PUSH
30175: LD_INT 1
30177: PLUS
30178: PPUSH
30179: LD_VAR 0 7
30183: PPUSH
30184: CALL_OW 1
30188: ST_TO_ADDR
30189: GO 30157
30191: POP
30192: POP
// end ;
30193: GO 30123
30195: POP
30196: POP
// if not result then
30197: LD_VAR 0 2
30201: NOT
30202: IFFALSE 30206
// exit ;
30204: GO 30354
// mech := result [ 1 ] ;
30206: LD_ADDR_VAR 0 5
30210: PUSH
30211: LD_VAR 0 2
30215: PUSH
30216: LD_INT 1
30218: ARRAY
30219: ST_TO_ADDR
// if result > 1 then
30220: LD_VAR 0 2
30224: PUSH
30225: LD_INT 1
30227: GREATER
30228: IFFALSE 30340
// begin for i = 2 to result do
30230: LD_ADDR_VAR 0 3
30234: PUSH
30235: DOUBLE
30236: LD_INT 2
30238: DEC
30239: ST_TO_ADDR
30240: LD_VAR 0 2
30244: PUSH
30245: FOR_TO
30246: IFFALSE 30338
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30248: LD_ADDR_VAR 0 4
30252: PUSH
30253: LD_VAR 0 2
30257: PUSH
30258: LD_VAR 0 3
30262: ARRAY
30263: PPUSH
30264: LD_INT 3
30266: PPUSH
30267: CALL_OW 259
30271: PUSH
30272: LD_VAR 0 2
30276: PUSH
30277: LD_VAR 0 3
30281: ARRAY
30282: PPUSH
30283: CALL_OW 432
30287: MINUS
30288: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30289: LD_VAR 0 4
30293: PUSH
30294: LD_VAR 0 5
30298: PPUSH
30299: LD_INT 3
30301: PPUSH
30302: CALL_OW 259
30306: PUSH
30307: LD_VAR 0 5
30311: PPUSH
30312: CALL_OW 432
30316: MINUS
30317: GREATEREQUAL
30318: IFFALSE 30336
// mech := result [ i ] ;
30320: LD_ADDR_VAR 0 5
30324: PUSH
30325: LD_VAR 0 2
30329: PUSH
30330: LD_VAR 0 3
30334: ARRAY
30335: ST_TO_ADDR
// end ;
30336: GO 30245
30338: POP
30339: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30340: LD_VAR 0 1
30344: PPUSH
30345: LD_VAR 0 5
30349: PPUSH
30350: CALL_OW 135
// end ;
30354: LD_VAR 0 2
30358: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30359: LD_INT 0
30361: PPUSH
30362: PPUSH
30363: PPUSH
30364: PPUSH
30365: PPUSH
30366: PPUSH
30367: PPUSH
30368: PPUSH
30369: PPUSH
30370: PPUSH
30371: PPUSH
30372: PPUSH
30373: PPUSH
// result := [ ] ;
30374: LD_ADDR_VAR 0 7
30378: PUSH
30379: EMPTY
30380: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30381: LD_VAR 0 1
30385: PPUSH
30386: CALL_OW 266
30390: PUSH
30391: LD_INT 0
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: IN
30401: NOT
30402: IFFALSE 30406
// exit ;
30404: GO 32040
// if name then
30406: LD_VAR 0 3
30410: IFFALSE 30426
// SetBName ( base_dep , name ) ;
30412: LD_VAR 0 1
30416: PPUSH
30417: LD_VAR 0 3
30421: PPUSH
30422: CALL_OW 500
// base := GetBase ( base_dep ) ;
30426: LD_ADDR_VAR 0 15
30430: PUSH
30431: LD_VAR 0 1
30435: PPUSH
30436: CALL_OW 274
30440: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30441: LD_ADDR_VAR 0 16
30445: PUSH
30446: LD_VAR 0 1
30450: PPUSH
30451: CALL_OW 255
30455: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30456: LD_ADDR_VAR 0 17
30460: PUSH
30461: LD_VAR 0 1
30465: PPUSH
30466: CALL_OW 248
30470: ST_TO_ADDR
// if sources then
30471: LD_VAR 0 5
30475: IFFALSE 30522
// for i = 1 to 3 do
30477: LD_ADDR_VAR 0 8
30481: PUSH
30482: DOUBLE
30483: LD_INT 1
30485: DEC
30486: ST_TO_ADDR
30487: LD_INT 3
30489: PUSH
30490: FOR_TO
30491: IFFALSE 30520
// AddResourceType ( base , i , sources [ i ] ) ;
30493: LD_VAR 0 15
30497: PPUSH
30498: LD_VAR 0 8
30502: PPUSH
30503: LD_VAR 0 5
30507: PUSH
30508: LD_VAR 0 8
30512: ARRAY
30513: PPUSH
30514: CALL_OW 276
30518: GO 30490
30520: POP
30521: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30522: LD_ADDR_VAR 0 18
30526: PUSH
30527: LD_VAR 0 15
30531: PPUSH
30532: LD_VAR 0 2
30536: PPUSH
30537: LD_INT 1
30539: PPUSH
30540: CALL 29783 0 3
30544: ST_TO_ADDR
// InitHc ;
30545: CALL_OW 19
// InitUc ;
30549: CALL_OW 18
// uc_side := side ;
30553: LD_ADDR_OWVAR 20
30557: PUSH
30558: LD_VAR 0 16
30562: ST_TO_ADDR
// uc_nation := nation ;
30563: LD_ADDR_OWVAR 21
30567: PUSH
30568: LD_VAR 0 17
30572: ST_TO_ADDR
// if buildings then
30573: LD_VAR 0 18
30577: IFFALSE 31899
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30579: LD_ADDR_VAR 0 19
30583: PUSH
30584: LD_VAR 0 18
30588: PPUSH
30589: LD_INT 2
30591: PUSH
30592: LD_INT 30
30594: PUSH
30595: LD_INT 29
30597: PUSH
30598: EMPTY
30599: LIST
30600: LIST
30601: PUSH
30602: LD_INT 30
30604: PUSH
30605: LD_INT 30
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: LIST
30616: PPUSH
30617: CALL_OW 72
30621: ST_TO_ADDR
// if tmp then
30622: LD_VAR 0 19
30626: IFFALSE 30674
// for i in tmp do
30628: LD_ADDR_VAR 0 8
30632: PUSH
30633: LD_VAR 0 19
30637: PUSH
30638: FOR_IN
30639: IFFALSE 30672
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30641: LD_VAR 0 8
30645: PPUSH
30646: CALL_OW 250
30650: PPUSH
30651: LD_VAR 0 8
30655: PPUSH
30656: CALL_OW 251
30660: PPUSH
30661: LD_VAR 0 16
30665: PPUSH
30666: CALL_OW 441
30670: GO 30638
30672: POP
30673: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30674: LD_VAR 0 18
30678: PPUSH
30679: LD_INT 2
30681: PUSH
30682: LD_INT 30
30684: PUSH
30685: LD_INT 32
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: PUSH
30692: LD_INT 30
30694: PUSH
30695: LD_INT 33
30697: PUSH
30698: EMPTY
30699: LIST
30700: LIST
30701: PUSH
30702: EMPTY
30703: LIST
30704: LIST
30705: LIST
30706: PPUSH
30707: CALL_OW 72
30711: IFFALSE 30799
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30713: LD_ADDR_VAR 0 8
30717: PUSH
30718: LD_VAR 0 18
30722: PPUSH
30723: LD_INT 2
30725: PUSH
30726: LD_INT 30
30728: PUSH
30729: LD_INT 32
30731: PUSH
30732: EMPTY
30733: LIST
30734: LIST
30735: PUSH
30736: LD_INT 30
30738: PUSH
30739: LD_INT 33
30741: PUSH
30742: EMPTY
30743: LIST
30744: LIST
30745: PUSH
30746: EMPTY
30747: LIST
30748: LIST
30749: LIST
30750: PPUSH
30751: CALL_OW 72
30755: PUSH
30756: FOR_IN
30757: IFFALSE 30797
// begin if not GetBWeapon ( i ) then
30759: LD_VAR 0 8
30763: PPUSH
30764: CALL_OW 269
30768: NOT
30769: IFFALSE 30795
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30771: LD_VAR 0 8
30775: PPUSH
30776: LD_VAR 0 8
30780: PPUSH
30781: LD_VAR 0 2
30785: PPUSH
30786: CALL 32045 0 2
30790: PPUSH
30791: CALL_OW 431
// end ;
30795: GO 30756
30797: POP
30798: POP
// end ; for i = 1 to personel do
30799: LD_ADDR_VAR 0 8
30803: PUSH
30804: DOUBLE
30805: LD_INT 1
30807: DEC
30808: ST_TO_ADDR
30809: LD_VAR 0 6
30813: PUSH
30814: FOR_TO
30815: IFFALSE 31879
// begin if i > 4 then
30817: LD_VAR 0 8
30821: PUSH
30822: LD_INT 4
30824: GREATER
30825: IFFALSE 30829
// break ;
30827: GO 31879
// case i of 1 :
30829: LD_VAR 0 8
30833: PUSH
30834: LD_INT 1
30836: DOUBLE
30837: EQUAL
30838: IFTRUE 30842
30840: GO 30922
30842: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30843: LD_ADDR_VAR 0 12
30847: PUSH
30848: LD_VAR 0 18
30852: PPUSH
30853: LD_INT 22
30855: PUSH
30856: LD_VAR 0 16
30860: PUSH
30861: EMPTY
30862: LIST
30863: LIST
30864: PUSH
30865: LD_INT 58
30867: PUSH
30868: EMPTY
30869: LIST
30870: PUSH
30871: LD_INT 2
30873: PUSH
30874: LD_INT 30
30876: PUSH
30877: LD_INT 32
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 30
30886: PUSH
30887: LD_INT 4
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 30
30896: PUSH
30897: LD_INT 5
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: LIST
30908: LIST
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: LIST
30914: PPUSH
30915: CALL_OW 72
30919: ST_TO_ADDR
30920: GO 31144
30922: LD_INT 2
30924: DOUBLE
30925: EQUAL
30926: IFTRUE 30930
30928: GO 30992
30930: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30931: LD_ADDR_VAR 0 12
30935: PUSH
30936: LD_VAR 0 18
30940: PPUSH
30941: LD_INT 22
30943: PUSH
30944: LD_VAR 0 16
30948: PUSH
30949: EMPTY
30950: LIST
30951: LIST
30952: PUSH
30953: LD_INT 2
30955: PUSH
30956: LD_INT 30
30958: PUSH
30959: LD_INT 0
30961: PUSH
30962: EMPTY
30963: LIST
30964: LIST
30965: PUSH
30966: LD_INT 30
30968: PUSH
30969: LD_INT 1
30971: PUSH
30972: EMPTY
30973: LIST
30974: LIST
30975: PUSH
30976: EMPTY
30977: LIST
30978: LIST
30979: LIST
30980: PUSH
30981: EMPTY
30982: LIST
30983: LIST
30984: PPUSH
30985: CALL_OW 72
30989: ST_TO_ADDR
30990: GO 31144
30992: LD_INT 3
30994: DOUBLE
30995: EQUAL
30996: IFTRUE 31000
30998: GO 31062
31000: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31001: LD_ADDR_VAR 0 12
31005: PUSH
31006: LD_VAR 0 18
31010: PPUSH
31011: LD_INT 22
31013: PUSH
31014: LD_VAR 0 16
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: PUSH
31023: LD_INT 2
31025: PUSH
31026: LD_INT 30
31028: PUSH
31029: LD_INT 2
31031: PUSH
31032: EMPTY
31033: LIST
31034: LIST
31035: PUSH
31036: LD_INT 30
31038: PUSH
31039: LD_INT 3
31041: PUSH
31042: EMPTY
31043: LIST
31044: LIST
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: LIST
31050: PUSH
31051: EMPTY
31052: LIST
31053: LIST
31054: PPUSH
31055: CALL_OW 72
31059: ST_TO_ADDR
31060: GO 31144
31062: LD_INT 4
31064: DOUBLE
31065: EQUAL
31066: IFTRUE 31070
31068: GO 31143
31070: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31071: LD_ADDR_VAR 0 12
31075: PUSH
31076: LD_VAR 0 18
31080: PPUSH
31081: LD_INT 22
31083: PUSH
31084: LD_VAR 0 16
31088: PUSH
31089: EMPTY
31090: LIST
31091: LIST
31092: PUSH
31093: LD_INT 2
31095: PUSH
31096: LD_INT 30
31098: PUSH
31099: LD_INT 6
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 30
31108: PUSH
31109: LD_INT 7
31111: PUSH
31112: EMPTY
31113: LIST
31114: LIST
31115: PUSH
31116: LD_INT 30
31118: PUSH
31119: LD_INT 8
31121: PUSH
31122: EMPTY
31123: LIST
31124: LIST
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: LIST
31130: LIST
31131: PUSH
31132: EMPTY
31133: LIST
31134: LIST
31135: PPUSH
31136: CALL_OW 72
31140: ST_TO_ADDR
31141: GO 31144
31143: POP
// if i = 1 then
31144: LD_VAR 0 8
31148: PUSH
31149: LD_INT 1
31151: EQUAL
31152: IFFALSE 31263
// begin tmp := [ ] ;
31154: LD_ADDR_VAR 0 19
31158: PUSH
31159: EMPTY
31160: ST_TO_ADDR
// for j in f do
31161: LD_ADDR_VAR 0 9
31165: PUSH
31166: LD_VAR 0 12
31170: PUSH
31171: FOR_IN
31172: IFFALSE 31245
// if GetBType ( j ) = b_bunker then
31174: LD_VAR 0 9
31178: PPUSH
31179: CALL_OW 266
31183: PUSH
31184: LD_INT 32
31186: EQUAL
31187: IFFALSE 31214
// tmp := Insert ( tmp , 1 , j ) else
31189: LD_ADDR_VAR 0 19
31193: PUSH
31194: LD_VAR 0 19
31198: PPUSH
31199: LD_INT 1
31201: PPUSH
31202: LD_VAR 0 9
31206: PPUSH
31207: CALL_OW 2
31211: ST_TO_ADDR
31212: GO 31243
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31214: LD_ADDR_VAR 0 19
31218: PUSH
31219: LD_VAR 0 19
31223: PPUSH
31224: LD_VAR 0 19
31228: PUSH
31229: LD_INT 1
31231: PLUS
31232: PPUSH
31233: LD_VAR 0 9
31237: PPUSH
31238: CALL_OW 2
31242: ST_TO_ADDR
31243: GO 31171
31245: POP
31246: POP
// if tmp then
31247: LD_VAR 0 19
31251: IFFALSE 31263
// f := tmp ;
31253: LD_ADDR_VAR 0 12
31257: PUSH
31258: LD_VAR 0 19
31262: ST_TO_ADDR
// end ; x := personel [ i ] ;
31263: LD_ADDR_VAR 0 13
31267: PUSH
31268: LD_VAR 0 6
31272: PUSH
31273: LD_VAR 0 8
31277: ARRAY
31278: ST_TO_ADDR
// if x = - 1 then
31279: LD_VAR 0 13
31283: PUSH
31284: LD_INT 1
31286: NEG
31287: EQUAL
31288: IFFALSE 31497
// begin for j in f do
31290: LD_ADDR_VAR 0 9
31294: PUSH
31295: LD_VAR 0 12
31299: PUSH
31300: FOR_IN
31301: IFFALSE 31493
// repeat InitHc ;
31303: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31307: LD_VAR 0 9
31311: PPUSH
31312: CALL_OW 266
31316: PUSH
31317: LD_INT 5
31319: EQUAL
31320: IFFALSE 31390
// begin if UnitsInside ( j ) < 3 then
31322: LD_VAR 0 9
31326: PPUSH
31327: CALL_OW 313
31331: PUSH
31332: LD_INT 3
31334: LESS
31335: IFFALSE 31371
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31337: LD_INT 0
31339: PPUSH
31340: LD_INT 5
31342: PUSH
31343: LD_INT 8
31345: PUSH
31346: LD_INT 9
31348: PUSH
31349: EMPTY
31350: LIST
31351: LIST
31352: LIST
31353: PUSH
31354: LD_VAR 0 17
31358: ARRAY
31359: PPUSH
31360: LD_VAR 0 4
31364: PPUSH
31365: CALL_OW 380
31369: GO 31388
// PrepareHuman ( false , i , skill ) ;
31371: LD_INT 0
31373: PPUSH
31374: LD_VAR 0 8
31378: PPUSH
31379: LD_VAR 0 4
31383: PPUSH
31384: CALL_OW 380
// end else
31388: GO 31407
// PrepareHuman ( false , i , skill ) ;
31390: LD_INT 0
31392: PPUSH
31393: LD_VAR 0 8
31397: PPUSH
31398: LD_VAR 0 4
31402: PPUSH
31403: CALL_OW 380
// un := CreateHuman ;
31407: LD_ADDR_VAR 0 14
31411: PUSH
31412: CALL_OW 44
31416: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31417: LD_ADDR_VAR 0 7
31421: PUSH
31422: LD_VAR 0 7
31426: PPUSH
31427: LD_INT 1
31429: PPUSH
31430: LD_VAR 0 14
31434: PPUSH
31435: CALL_OW 2
31439: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31440: LD_VAR 0 14
31444: PPUSH
31445: LD_VAR 0 9
31449: PPUSH
31450: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31454: LD_VAR 0 9
31458: PPUSH
31459: CALL_OW 313
31463: PUSH
31464: LD_INT 6
31466: EQUAL
31467: PUSH
31468: LD_VAR 0 9
31472: PPUSH
31473: CALL_OW 266
31477: PUSH
31478: LD_INT 32
31480: PUSH
31481: LD_INT 31
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: IN
31488: OR
31489: IFFALSE 31303
31491: GO 31300
31493: POP
31494: POP
// end else
31495: GO 31877
// for j = 1 to x do
31497: LD_ADDR_VAR 0 9
31501: PUSH
31502: DOUBLE
31503: LD_INT 1
31505: DEC
31506: ST_TO_ADDR
31507: LD_VAR 0 13
31511: PUSH
31512: FOR_TO
31513: IFFALSE 31875
// begin InitHc ;
31515: CALL_OW 19
// if not f then
31519: LD_VAR 0 12
31523: NOT
31524: IFFALSE 31613
// begin PrepareHuman ( false , i , skill ) ;
31526: LD_INT 0
31528: PPUSH
31529: LD_VAR 0 8
31533: PPUSH
31534: LD_VAR 0 4
31538: PPUSH
31539: CALL_OW 380
// un := CreateHuman ;
31543: LD_ADDR_VAR 0 14
31547: PUSH
31548: CALL_OW 44
31552: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31553: LD_ADDR_VAR 0 7
31557: PUSH
31558: LD_VAR 0 7
31562: PPUSH
31563: LD_INT 1
31565: PPUSH
31566: LD_VAR 0 14
31570: PPUSH
31571: CALL_OW 2
31575: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31576: LD_VAR 0 14
31580: PPUSH
31581: LD_VAR 0 1
31585: PPUSH
31586: CALL_OW 250
31590: PPUSH
31591: LD_VAR 0 1
31595: PPUSH
31596: CALL_OW 251
31600: PPUSH
31601: LD_INT 10
31603: PPUSH
31604: LD_INT 0
31606: PPUSH
31607: CALL_OW 50
// continue ;
31611: GO 31512
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31613: LD_VAR 0 12
31617: PUSH
31618: LD_INT 1
31620: ARRAY
31621: PPUSH
31622: CALL_OW 313
31626: PUSH
31627: LD_VAR 0 12
31631: PUSH
31632: LD_INT 1
31634: ARRAY
31635: PPUSH
31636: CALL_OW 266
31640: PUSH
31641: LD_INT 32
31643: PUSH
31644: LD_INT 31
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: IN
31651: AND
31652: PUSH
31653: LD_VAR 0 12
31657: PUSH
31658: LD_INT 1
31660: ARRAY
31661: PPUSH
31662: CALL_OW 313
31666: PUSH
31667: LD_INT 6
31669: EQUAL
31670: OR
31671: IFFALSE 31691
// f := Delete ( f , 1 ) ;
31673: LD_ADDR_VAR 0 12
31677: PUSH
31678: LD_VAR 0 12
31682: PPUSH
31683: LD_INT 1
31685: PPUSH
31686: CALL_OW 3
31690: ST_TO_ADDR
// if not f then
31691: LD_VAR 0 12
31695: NOT
31696: IFFALSE 31714
// begin x := x + 2 ;
31698: LD_ADDR_VAR 0 13
31702: PUSH
31703: LD_VAR 0 13
31707: PUSH
31708: LD_INT 2
31710: PLUS
31711: ST_TO_ADDR
// continue ;
31712: GO 31512
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31714: LD_VAR 0 12
31718: PUSH
31719: LD_INT 1
31721: ARRAY
31722: PPUSH
31723: CALL_OW 266
31727: PUSH
31728: LD_INT 5
31730: EQUAL
31731: IFFALSE 31805
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31733: LD_VAR 0 12
31737: PUSH
31738: LD_INT 1
31740: ARRAY
31741: PPUSH
31742: CALL_OW 313
31746: PUSH
31747: LD_INT 3
31749: LESS
31750: IFFALSE 31786
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31752: LD_INT 0
31754: PPUSH
31755: LD_INT 5
31757: PUSH
31758: LD_INT 8
31760: PUSH
31761: LD_INT 9
31763: PUSH
31764: EMPTY
31765: LIST
31766: LIST
31767: LIST
31768: PUSH
31769: LD_VAR 0 17
31773: ARRAY
31774: PPUSH
31775: LD_VAR 0 4
31779: PPUSH
31780: CALL_OW 380
31784: GO 31803
// PrepareHuman ( false , i , skill ) ;
31786: LD_INT 0
31788: PPUSH
31789: LD_VAR 0 8
31793: PPUSH
31794: LD_VAR 0 4
31798: PPUSH
31799: CALL_OW 380
// end else
31803: GO 31822
// PrepareHuman ( false , i , skill ) ;
31805: LD_INT 0
31807: PPUSH
31808: LD_VAR 0 8
31812: PPUSH
31813: LD_VAR 0 4
31817: PPUSH
31818: CALL_OW 380
// un := CreateHuman ;
31822: LD_ADDR_VAR 0 14
31826: PUSH
31827: CALL_OW 44
31831: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31832: LD_ADDR_VAR 0 7
31836: PUSH
31837: LD_VAR 0 7
31841: PPUSH
31842: LD_INT 1
31844: PPUSH
31845: LD_VAR 0 14
31849: PPUSH
31850: CALL_OW 2
31854: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31855: LD_VAR 0 14
31859: PPUSH
31860: LD_VAR 0 12
31864: PUSH
31865: LD_INT 1
31867: ARRAY
31868: PPUSH
31869: CALL_OW 52
// end ;
31873: GO 31512
31875: POP
31876: POP
// end ;
31877: GO 30814
31879: POP
31880: POP
// result := result ^ buildings ;
31881: LD_ADDR_VAR 0 7
31885: PUSH
31886: LD_VAR 0 7
31890: PUSH
31891: LD_VAR 0 18
31895: ADD
31896: ST_TO_ADDR
// end else
31897: GO 32040
// begin for i = 1 to personel do
31899: LD_ADDR_VAR 0 8
31903: PUSH
31904: DOUBLE
31905: LD_INT 1
31907: DEC
31908: ST_TO_ADDR
31909: LD_VAR 0 6
31913: PUSH
31914: FOR_TO
31915: IFFALSE 32038
// begin if i > 4 then
31917: LD_VAR 0 8
31921: PUSH
31922: LD_INT 4
31924: GREATER
31925: IFFALSE 31929
// break ;
31927: GO 32038
// x := personel [ i ] ;
31929: LD_ADDR_VAR 0 13
31933: PUSH
31934: LD_VAR 0 6
31938: PUSH
31939: LD_VAR 0 8
31943: ARRAY
31944: ST_TO_ADDR
// if x = - 1 then
31945: LD_VAR 0 13
31949: PUSH
31950: LD_INT 1
31952: NEG
31953: EQUAL
31954: IFFALSE 31958
// continue ;
31956: GO 31914
// PrepareHuman ( false , i , skill ) ;
31958: LD_INT 0
31960: PPUSH
31961: LD_VAR 0 8
31965: PPUSH
31966: LD_VAR 0 4
31970: PPUSH
31971: CALL_OW 380
// un := CreateHuman ;
31975: LD_ADDR_VAR 0 14
31979: PUSH
31980: CALL_OW 44
31984: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31985: LD_VAR 0 14
31989: PPUSH
31990: LD_VAR 0 1
31994: PPUSH
31995: CALL_OW 250
31999: PPUSH
32000: LD_VAR 0 1
32004: PPUSH
32005: CALL_OW 251
32009: PPUSH
32010: LD_INT 10
32012: PPUSH
32013: LD_INT 0
32015: PPUSH
32016: CALL_OW 50
// result := result ^ un ;
32020: LD_ADDR_VAR 0 7
32024: PUSH
32025: LD_VAR 0 7
32029: PUSH
32030: LD_VAR 0 14
32034: ADD
32035: ST_TO_ADDR
// end ;
32036: GO 31914
32038: POP
32039: POP
// end ; end ;
32040: LD_VAR 0 7
32044: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32045: LD_INT 0
32047: PPUSH
32048: PPUSH
32049: PPUSH
32050: PPUSH
32051: PPUSH
32052: PPUSH
32053: PPUSH
32054: PPUSH
32055: PPUSH
32056: PPUSH
32057: PPUSH
32058: PPUSH
32059: PPUSH
32060: PPUSH
32061: PPUSH
32062: PPUSH
// result := false ;
32063: LD_ADDR_VAR 0 3
32067: PUSH
32068: LD_INT 0
32070: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32071: LD_VAR 0 1
32075: NOT
32076: PUSH
32077: LD_VAR 0 1
32081: PPUSH
32082: CALL_OW 266
32086: PUSH
32087: LD_INT 32
32089: PUSH
32090: LD_INT 33
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: IN
32097: NOT
32098: OR
32099: IFFALSE 32103
// exit ;
32101: GO 33212
// nat := GetNation ( tower ) ;
32103: LD_ADDR_VAR 0 12
32107: PUSH
32108: LD_VAR 0 1
32112: PPUSH
32113: CALL_OW 248
32117: ST_TO_ADDR
// side := GetSide ( tower ) ;
32118: LD_ADDR_VAR 0 16
32122: PUSH
32123: LD_VAR 0 1
32127: PPUSH
32128: CALL_OW 255
32132: ST_TO_ADDR
// x := GetX ( tower ) ;
32133: LD_ADDR_VAR 0 10
32137: PUSH
32138: LD_VAR 0 1
32142: PPUSH
32143: CALL_OW 250
32147: ST_TO_ADDR
// y := GetY ( tower ) ;
32148: LD_ADDR_VAR 0 11
32152: PUSH
32153: LD_VAR 0 1
32157: PPUSH
32158: CALL_OW 251
32162: ST_TO_ADDR
// if not x or not y then
32163: LD_VAR 0 10
32167: NOT
32168: PUSH
32169: LD_VAR 0 11
32173: NOT
32174: OR
32175: IFFALSE 32179
// exit ;
32177: GO 33212
// weapon := 0 ;
32179: LD_ADDR_VAR 0 18
32183: PUSH
32184: LD_INT 0
32186: ST_TO_ADDR
// fac_list := [ ] ;
32187: LD_ADDR_VAR 0 17
32191: PUSH
32192: EMPTY
32193: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32194: LD_ADDR_VAR 0 6
32198: PUSH
32199: LD_VAR 0 1
32203: PPUSH
32204: CALL_OW 274
32208: PPUSH
32209: LD_VAR 0 2
32213: PPUSH
32214: LD_INT 0
32216: PPUSH
32217: CALL 29783 0 3
32221: PPUSH
32222: LD_INT 30
32224: PUSH
32225: LD_INT 3
32227: PUSH
32228: EMPTY
32229: LIST
32230: LIST
32231: PPUSH
32232: CALL_OW 72
32236: ST_TO_ADDR
// if not factories then
32237: LD_VAR 0 6
32241: NOT
32242: IFFALSE 32246
// exit ;
32244: GO 33212
// for i in factories do
32246: LD_ADDR_VAR 0 8
32250: PUSH
32251: LD_VAR 0 6
32255: PUSH
32256: FOR_IN
32257: IFFALSE 32282
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32259: LD_ADDR_VAR 0 17
32263: PUSH
32264: LD_VAR 0 17
32268: PUSH
32269: LD_VAR 0 8
32273: PPUSH
32274: CALL_OW 478
32278: UNION
32279: ST_TO_ADDR
32280: GO 32256
32282: POP
32283: POP
// if not fac_list then
32284: LD_VAR 0 17
32288: NOT
32289: IFFALSE 32293
// exit ;
32291: GO 33212
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32293: LD_ADDR_VAR 0 5
32297: PUSH
32298: LD_INT 4
32300: PUSH
32301: LD_INT 5
32303: PUSH
32304: LD_INT 9
32306: PUSH
32307: LD_INT 10
32309: PUSH
32310: LD_INT 6
32312: PUSH
32313: LD_INT 7
32315: PUSH
32316: LD_INT 11
32318: PUSH
32319: EMPTY
32320: LIST
32321: LIST
32322: LIST
32323: LIST
32324: LIST
32325: LIST
32326: LIST
32327: PUSH
32328: LD_INT 27
32330: PUSH
32331: LD_INT 28
32333: PUSH
32334: LD_INT 26
32336: PUSH
32337: LD_INT 30
32339: PUSH
32340: EMPTY
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 43
32348: PUSH
32349: LD_INT 44
32351: PUSH
32352: LD_INT 46
32354: PUSH
32355: LD_INT 45
32357: PUSH
32358: LD_INT 47
32360: PUSH
32361: LD_INT 49
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: LIST
32368: LIST
32369: LIST
32370: LIST
32371: PUSH
32372: EMPTY
32373: LIST
32374: LIST
32375: LIST
32376: PUSH
32377: LD_VAR 0 12
32381: ARRAY
32382: ST_TO_ADDR
// list := list isect fac_list ;
32383: LD_ADDR_VAR 0 5
32387: PUSH
32388: LD_VAR 0 5
32392: PUSH
32393: LD_VAR 0 17
32397: ISECT
32398: ST_TO_ADDR
// if not list then
32399: LD_VAR 0 5
32403: NOT
32404: IFFALSE 32408
// exit ;
32406: GO 33212
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32408: LD_VAR 0 12
32412: PUSH
32413: LD_INT 3
32415: EQUAL
32416: PUSH
32417: LD_INT 49
32419: PUSH
32420: LD_VAR 0 5
32424: IN
32425: AND
32426: PUSH
32427: LD_INT 31
32429: PPUSH
32430: LD_VAR 0 16
32434: PPUSH
32435: CALL_OW 321
32439: PUSH
32440: LD_INT 2
32442: EQUAL
32443: AND
32444: IFFALSE 32504
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32446: LD_INT 22
32448: PUSH
32449: LD_VAR 0 16
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: LD_INT 35
32460: PUSH
32461: LD_INT 49
32463: PUSH
32464: EMPTY
32465: LIST
32466: LIST
32467: PUSH
32468: LD_INT 91
32470: PUSH
32471: LD_VAR 0 1
32475: PUSH
32476: LD_INT 10
32478: PUSH
32479: EMPTY
32480: LIST
32481: LIST
32482: LIST
32483: PUSH
32484: EMPTY
32485: LIST
32486: LIST
32487: LIST
32488: PPUSH
32489: CALL_OW 69
32493: NOT
32494: IFFALSE 32504
// weapon := ru_time_lapser ;
32496: LD_ADDR_VAR 0 18
32500: PUSH
32501: LD_INT 49
32503: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32504: LD_VAR 0 12
32508: PUSH
32509: LD_INT 1
32511: PUSH
32512: LD_INT 2
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: IN
32519: PUSH
32520: LD_INT 11
32522: PUSH
32523: LD_VAR 0 5
32527: IN
32528: PUSH
32529: LD_INT 30
32531: PUSH
32532: LD_VAR 0 5
32536: IN
32537: OR
32538: AND
32539: PUSH
32540: LD_INT 6
32542: PPUSH
32543: LD_VAR 0 16
32547: PPUSH
32548: CALL_OW 321
32552: PUSH
32553: LD_INT 2
32555: EQUAL
32556: AND
32557: IFFALSE 32722
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32559: LD_INT 22
32561: PUSH
32562: LD_VAR 0 16
32566: PUSH
32567: EMPTY
32568: LIST
32569: LIST
32570: PUSH
32571: LD_INT 2
32573: PUSH
32574: LD_INT 35
32576: PUSH
32577: LD_INT 11
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 35
32586: PUSH
32587: LD_INT 30
32589: PUSH
32590: EMPTY
32591: LIST
32592: LIST
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 91
32601: PUSH
32602: LD_VAR 0 1
32606: PUSH
32607: LD_INT 18
32609: PUSH
32610: EMPTY
32611: LIST
32612: LIST
32613: LIST
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: LIST
32619: PPUSH
32620: CALL_OW 69
32624: NOT
32625: PUSH
32626: LD_INT 22
32628: PUSH
32629: LD_VAR 0 16
32633: PUSH
32634: EMPTY
32635: LIST
32636: LIST
32637: PUSH
32638: LD_INT 2
32640: PUSH
32641: LD_INT 30
32643: PUSH
32644: LD_INT 32
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 30
32653: PUSH
32654: LD_INT 33
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: EMPTY
32662: LIST
32663: LIST
32664: LIST
32665: PUSH
32666: LD_INT 91
32668: PUSH
32669: LD_VAR 0 1
32673: PUSH
32674: LD_INT 12
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: LIST
32681: PUSH
32682: EMPTY
32683: LIST
32684: LIST
32685: LIST
32686: PUSH
32687: EMPTY
32688: LIST
32689: PPUSH
32690: CALL_OW 69
32694: PUSH
32695: LD_INT 2
32697: GREATER
32698: AND
32699: IFFALSE 32722
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32701: LD_ADDR_VAR 0 18
32705: PUSH
32706: LD_INT 11
32708: PUSH
32709: LD_INT 30
32711: PUSH
32712: EMPTY
32713: LIST
32714: LIST
32715: PUSH
32716: LD_VAR 0 12
32720: ARRAY
32721: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32722: LD_VAR 0 18
32726: NOT
32727: PUSH
32728: LD_INT 40
32730: PPUSH
32731: LD_VAR 0 16
32735: PPUSH
32736: CALL_OW 321
32740: PUSH
32741: LD_INT 2
32743: EQUAL
32744: AND
32745: PUSH
32746: LD_INT 7
32748: PUSH
32749: LD_VAR 0 5
32753: IN
32754: PUSH
32755: LD_INT 28
32757: PUSH
32758: LD_VAR 0 5
32762: IN
32763: OR
32764: PUSH
32765: LD_INT 45
32767: PUSH
32768: LD_VAR 0 5
32772: IN
32773: OR
32774: AND
32775: IFFALSE 33029
// begin hex := GetHexInfo ( x , y ) ;
32777: LD_ADDR_VAR 0 4
32781: PUSH
32782: LD_VAR 0 10
32786: PPUSH
32787: LD_VAR 0 11
32791: PPUSH
32792: CALL_OW 546
32796: ST_TO_ADDR
// if hex [ 1 ] then
32797: LD_VAR 0 4
32801: PUSH
32802: LD_INT 1
32804: ARRAY
32805: IFFALSE 32809
// exit ;
32807: GO 33212
// height := hex [ 2 ] ;
32809: LD_ADDR_VAR 0 15
32813: PUSH
32814: LD_VAR 0 4
32818: PUSH
32819: LD_INT 2
32821: ARRAY
32822: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32823: LD_ADDR_VAR 0 14
32827: PUSH
32828: LD_INT 0
32830: PUSH
32831: LD_INT 2
32833: PUSH
32834: LD_INT 3
32836: PUSH
32837: LD_INT 5
32839: PUSH
32840: EMPTY
32841: LIST
32842: LIST
32843: LIST
32844: LIST
32845: ST_TO_ADDR
// for i in tmp do
32846: LD_ADDR_VAR 0 8
32850: PUSH
32851: LD_VAR 0 14
32855: PUSH
32856: FOR_IN
32857: IFFALSE 33027
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32859: LD_ADDR_VAR 0 9
32863: PUSH
32864: LD_VAR 0 10
32868: PPUSH
32869: LD_VAR 0 8
32873: PPUSH
32874: LD_INT 5
32876: PPUSH
32877: CALL_OW 272
32881: PUSH
32882: LD_VAR 0 11
32886: PPUSH
32887: LD_VAR 0 8
32891: PPUSH
32892: LD_INT 5
32894: PPUSH
32895: CALL_OW 273
32899: PUSH
32900: EMPTY
32901: LIST
32902: LIST
32903: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32904: LD_VAR 0 9
32908: PUSH
32909: LD_INT 1
32911: ARRAY
32912: PPUSH
32913: LD_VAR 0 9
32917: PUSH
32918: LD_INT 2
32920: ARRAY
32921: PPUSH
32922: CALL_OW 488
32926: IFFALSE 33025
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32928: LD_ADDR_VAR 0 4
32932: PUSH
32933: LD_VAR 0 9
32937: PUSH
32938: LD_INT 1
32940: ARRAY
32941: PPUSH
32942: LD_VAR 0 9
32946: PUSH
32947: LD_INT 2
32949: ARRAY
32950: PPUSH
32951: CALL_OW 546
32955: ST_TO_ADDR
// if hex [ 1 ] then
32956: LD_VAR 0 4
32960: PUSH
32961: LD_INT 1
32963: ARRAY
32964: IFFALSE 32968
// continue ;
32966: GO 32856
// h := hex [ 2 ] ;
32968: LD_ADDR_VAR 0 13
32972: PUSH
32973: LD_VAR 0 4
32977: PUSH
32978: LD_INT 2
32980: ARRAY
32981: ST_TO_ADDR
// if h + 7 < height then
32982: LD_VAR 0 13
32986: PUSH
32987: LD_INT 7
32989: PLUS
32990: PUSH
32991: LD_VAR 0 15
32995: LESS
32996: IFFALSE 33025
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32998: LD_ADDR_VAR 0 18
33002: PUSH
33003: LD_INT 7
33005: PUSH
33006: LD_INT 28
33008: PUSH
33009: LD_INT 45
33011: PUSH
33012: EMPTY
33013: LIST
33014: LIST
33015: LIST
33016: PUSH
33017: LD_VAR 0 12
33021: ARRAY
33022: ST_TO_ADDR
// break ;
33023: GO 33027
// end ; end ; end ;
33025: GO 32856
33027: POP
33028: POP
// end ; if not weapon then
33029: LD_VAR 0 18
33033: NOT
33034: IFFALSE 33094
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33036: LD_ADDR_VAR 0 5
33040: PUSH
33041: LD_VAR 0 5
33045: PUSH
33046: LD_INT 11
33048: PUSH
33049: LD_INT 30
33051: PUSH
33052: LD_INT 49
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: LIST
33059: DIFF
33060: ST_TO_ADDR
// if not list then
33061: LD_VAR 0 5
33065: NOT
33066: IFFALSE 33070
// exit ;
33068: GO 33212
// weapon := list [ rand ( 1 , list ) ] ;
33070: LD_ADDR_VAR 0 18
33074: PUSH
33075: LD_VAR 0 5
33079: PUSH
33080: LD_INT 1
33082: PPUSH
33083: LD_VAR 0 5
33087: PPUSH
33088: CALL_OW 12
33092: ARRAY
33093: ST_TO_ADDR
// end ; if weapon then
33094: LD_VAR 0 18
33098: IFFALSE 33212
// begin tmp := CostOfWeapon ( weapon ) ;
33100: LD_ADDR_VAR 0 14
33104: PUSH
33105: LD_VAR 0 18
33109: PPUSH
33110: CALL_OW 451
33114: ST_TO_ADDR
// j := GetBase ( tower ) ;
33115: LD_ADDR_VAR 0 9
33119: PUSH
33120: LD_VAR 0 1
33124: PPUSH
33125: CALL_OW 274
33129: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33130: LD_VAR 0 9
33134: PPUSH
33135: LD_INT 1
33137: PPUSH
33138: CALL_OW 275
33142: PUSH
33143: LD_VAR 0 14
33147: PUSH
33148: LD_INT 1
33150: ARRAY
33151: GREATEREQUAL
33152: PUSH
33153: LD_VAR 0 9
33157: PPUSH
33158: LD_INT 2
33160: PPUSH
33161: CALL_OW 275
33165: PUSH
33166: LD_VAR 0 14
33170: PUSH
33171: LD_INT 2
33173: ARRAY
33174: GREATEREQUAL
33175: AND
33176: PUSH
33177: LD_VAR 0 9
33181: PPUSH
33182: LD_INT 3
33184: PPUSH
33185: CALL_OW 275
33189: PUSH
33190: LD_VAR 0 14
33194: PUSH
33195: LD_INT 3
33197: ARRAY
33198: GREATEREQUAL
33199: AND
33200: IFFALSE 33212
// result := weapon ;
33202: LD_ADDR_VAR 0 3
33206: PUSH
33207: LD_VAR 0 18
33211: ST_TO_ADDR
// end ; end ;
33212: LD_VAR 0 3
33216: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33217: LD_INT 0
33219: PPUSH
33220: PPUSH
// result := true ;
33221: LD_ADDR_VAR 0 3
33225: PUSH
33226: LD_INT 1
33228: ST_TO_ADDR
// if array1 = array2 then
33229: LD_VAR 0 1
33233: PUSH
33234: LD_VAR 0 2
33238: EQUAL
33239: IFFALSE 33299
// begin for i = 1 to array1 do
33241: LD_ADDR_VAR 0 4
33245: PUSH
33246: DOUBLE
33247: LD_INT 1
33249: DEC
33250: ST_TO_ADDR
33251: LD_VAR 0 1
33255: PUSH
33256: FOR_TO
33257: IFFALSE 33295
// if array1 [ i ] <> array2 [ i ] then
33259: LD_VAR 0 1
33263: PUSH
33264: LD_VAR 0 4
33268: ARRAY
33269: PUSH
33270: LD_VAR 0 2
33274: PUSH
33275: LD_VAR 0 4
33279: ARRAY
33280: NONEQUAL
33281: IFFALSE 33293
// begin result := false ;
33283: LD_ADDR_VAR 0 3
33287: PUSH
33288: LD_INT 0
33290: ST_TO_ADDR
// break ;
33291: GO 33295
// end ;
33293: GO 33256
33295: POP
33296: POP
// end else
33297: GO 33307
// result := false ;
33299: LD_ADDR_VAR 0 3
33303: PUSH
33304: LD_INT 0
33306: ST_TO_ADDR
// end ;
33307: LD_VAR 0 3
33311: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33312: LD_INT 0
33314: PPUSH
33315: PPUSH
// if not array1 or not array2 then
33316: LD_VAR 0 1
33320: NOT
33321: PUSH
33322: LD_VAR 0 2
33326: NOT
33327: OR
33328: IFFALSE 33332
// exit ;
33330: GO 33396
// result := true ;
33332: LD_ADDR_VAR 0 3
33336: PUSH
33337: LD_INT 1
33339: ST_TO_ADDR
// for i = 1 to array1 do
33340: LD_ADDR_VAR 0 4
33344: PUSH
33345: DOUBLE
33346: LD_INT 1
33348: DEC
33349: ST_TO_ADDR
33350: LD_VAR 0 1
33354: PUSH
33355: FOR_TO
33356: IFFALSE 33394
// if array1 [ i ] <> array2 [ i ] then
33358: LD_VAR 0 1
33362: PUSH
33363: LD_VAR 0 4
33367: ARRAY
33368: PUSH
33369: LD_VAR 0 2
33373: PUSH
33374: LD_VAR 0 4
33378: ARRAY
33379: NONEQUAL
33380: IFFALSE 33392
// begin result := false ;
33382: LD_ADDR_VAR 0 3
33386: PUSH
33387: LD_INT 0
33389: ST_TO_ADDR
// break ;
33390: GO 33394
// end ;
33392: GO 33355
33394: POP
33395: POP
// end ;
33396: LD_VAR 0 3
33400: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33401: LD_INT 0
33403: PPUSH
33404: PPUSH
33405: PPUSH
// pom := GetBase ( fac ) ;
33406: LD_ADDR_VAR 0 5
33410: PUSH
33411: LD_VAR 0 1
33415: PPUSH
33416: CALL_OW 274
33420: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33421: LD_ADDR_VAR 0 4
33425: PUSH
33426: LD_VAR 0 2
33430: PUSH
33431: LD_INT 1
33433: ARRAY
33434: PPUSH
33435: LD_VAR 0 2
33439: PUSH
33440: LD_INT 2
33442: ARRAY
33443: PPUSH
33444: LD_VAR 0 2
33448: PUSH
33449: LD_INT 3
33451: ARRAY
33452: PPUSH
33453: LD_VAR 0 2
33457: PUSH
33458: LD_INT 4
33460: ARRAY
33461: PPUSH
33462: CALL_OW 449
33466: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33467: LD_ADDR_VAR 0 3
33471: PUSH
33472: LD_VAR 0 5
33476: PPUSH
33477: LD_INT 1
33479: PPUSH
33480: CALL_OW 275
33484: PUSH
33485: LD_VAR 0 4
33489: PUSH
33490: LD_INT 1
33492: ARRAY
33493: GREATEREQUAL
33494: PUSH
33495: LD_VAR 0 5
33499: PPUSH
33500: LD_INT 2
33502: PPUSH
33503: CALL_OW 275
33507: PUSH
33508: LD_VAR 0 4
33512: PUSH
33513: LD_INT 2
33515: ARRAY
33516: GREATEREQUAL
33517: AND
33518: PUSH
33519: LD_VAR 0 5
33523: PPUSH
33524: LD_INT 3
33526: PPUSH
33527: CALL_OW 275
33531: PUSH
33532: LD_VAR 0 4
33536: PUSH
33537: LD_INT 3
33539: ARRAY
33540: GREATEREQUAL
33541: AND
33542: ST_TO_ADDR
// end ;
33543: LD_VAR 0 3
33547: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33548: LD_INT 0
33550: PPUSH
33551: PPUSH
33552: PPUSH
33553: PPUSH
// pom := GetBase ( building ) ;
33554: LD_ADDR_VAR 0 3
33558: PUSH
33559: LD_VAR 0 1
33563: PPUSH
33564: CALL_OW 274
33568: ST_TO_ADDR
// if not pom then
33569: LD_VAR 0 3
33573: NOT
33574: IFFALSE 33578
// exit ;
33576: GO 33748
// btype := GetBType ( building ) ;
33578: LD_ADDR_VAR 0 5
33582: PUSH
33583: LD_VAR 0 1
33587: PPUSH
33588: CALL_OW 266
33592: ST_TO_ADDR
// if btype = b_armoury then
33593: LD_VAR 0 5
33597: PUSH
33598: LD_INT 4
33600: EQUAL
33601: IFFALSE 33611
// btype := b_barracks ;
33603: LD_ADDR_VAR 0 5
33607: PUSH
33608: LD_INT 5
33610: ST_TO_ADDR
// if btype = b_depot then
33611: LD_VAR 0 5
33615: PUSH
33616: LD_INT 0
33618: EQUAL
33619: IFFALSE 33629
// btype := b_warehouse ;
33621: LD_ADDR_VAR 0 5
33625: PUSH
33626: LD_INT 1
33628: ST_TO_ADDR
// if btype = b_workshop then
33629: LD_VAR 0 5
33633: PUSH
33634: LD_INT 2
33636: EQUAL
33637: IFFALSE 33647
// btype := b_factory ;
33639: LD_ADDR_VAR 0 5
33643: PUSH
33644: LD_INT 3
33646: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33647: LD_ADDR_VAR 0 4
33651: PUSH
33652: LD_VAR 0 5
33656: PPUSH
33657: LD_VAR 0 1
33661: PPUSH
33662: CALL_OW 248
33666: PPUSH
33667: CALL_OW 450
33671: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33672: LD_ADDR_VAR 0 2
33676: PUSH
33677: LD_VAR 0 3
33681: PPUSH
33682: LD_INT 1
33684: PPUSH
33685: CALL_OW 275
33689: PUSH
33690: LD_VAR 0 4
33694: PUSH
33695: LD_INT 1
33697: ARRAY
33698: GREATEREQUAL
33699: PUSH
33700: LD_VAR 0 3
33704: PPUSH
33705: LD_INT 2
33707: PPUSH
33708: CALL_OW 275
33712: PUSH
33713: LD_VAR 0 4
33717: PUSH
33718: LD_INT 2
33720: ARRAY
33721: GREATEREQUAL
33722: AND
33723: PUSH
33724: LD_VAR 0 3
33728: PPUSH
33729: LD_INT 3
33731: PPUSH
33732: CALL_OW 275
33736: PUSH
33737: LD_VAR 0 4
33741: PUSH
33742: LD_INT 3
33744: ARRAY
33745: GREATEREQUAL
33746: AND
33747: ST_TO_ADDR
// end ;
33748: LD_VAR 0 2
33752: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33753: LD_INT 0
33755: PPUSH
33756: PPUSH
33757: PPUSH
// pom := GetBase ( building ) ;
33758: LD_ADDR_VAR 0 4
33762: PUSH
33763: LD_VAR 0 1
33767: PPUSH
33768: CALL_OW 274
33772: ST_TO_ADDR
// if not pom then
33773: LD_VAR 0 4
33777: NOT
33778: IFFALSE 33782
// exit ;
33780: GO 33883
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33782: LD_ADDR_VAR 0 5
33786: PUSH
33787: LD_VAR 0 2
33791: PPUSH
33792: LD_VAR 0 1
33796: PPUSH
33797: CALL_OW 248
33801: PPUSH
33802: CALL_OW 450
33806: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33807: LD_ADDR_VAR 0 3
33811: PUSH
33812: LD_VAR 0 4
33816: PPUSH
33817: LD_INT 1
33819: PPUSH
33820: CALL_OW 275
33824: PUSH
33825: LD_VAR 0 5
33829: PUSH
33830: LD_INT 1
33832: ARRAY
33833: GREATEREQUAL
33834: PUSH
33835: LD_VAR 0 4
33839: PPUSH
33840: LD_INT 2
33842: PPUSH
33843: CALL_OW 275
33847: PUSH
33848: LD_VAR 0 5
33852: PUSH
33853: LD_INT 2
33855: ARRAY
33856: GREATEREQUAL
33857: AND
33858: PUSH
33859: LD_VAR 0 4
33863: PPUSH
33864: LD_INT 3
33866: PPUSH
33867: CALL_OW 275
33871: PUSH
33872: LD_VAR 0 5
33876: PUSH
33877: LD_INT 3
33879: ARRAY
33880: GREATEREQUAL
33881: AND
33882: ST_TO_ADDR
// end ;
33883: LD_VAR 0 3
33887: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33888: LD_INT 0
33890: PPUSH
33891: PPUSH
33892: PPUSH
33893: PPUSH
33894: PPUSH
33895: PPUSH
33896: PPUSH
33897: PPUSH
33898: PPUSH
33899: PPUSH
33900: PPUSH
// result := false ;
33901: LD_ADDR_VAR 0 8
33905: PUSH
33906: LD_INT 0
33908: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33909: LD_VAR 0 5
33913: NOT
33914: PUSH
33915: LD_VAR 0 1
33919: NOT
33920: OR
33921: PUSH
33922: LD_VAR 0 2
33926: NOT
33927: OR
33928: PUSH
33929: LD_VAR 0 3
33933: NOT
33934: OR
33935: IFFALSE 33939
// exit ;
33937: GO 34753
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33939: LD_ADDR_VAR 0 14
33943: PUSH
33944: LD_VAR 0 1
33948: PPUSH
33949: LD_VAR 0 2
33953: PPUSH
33954: LD_VAR 0 3
33958: PPUSH
33959: LD_VAR 0 4
33963: PPUSH
33964: LD_VAR 0 5
33968: PUSH
33969: LD_INT 1
33971: ARRAY
33972: PPUSH
33973: CALL_OW 248
33977: PPUSH
33978: LD_INT 0
33980: PPUSH
33981: CALL 35990 0 6
33985: ST_TO_ADDR
// if not hexes then
33986: LD_VAR 0 14
33990: NOT
33991: IFFALSE 33995
// exit ;
33993: GO 34753
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33995: LD_ADDR_VAR 0 17
33999: PUSH
34000: LD_VAR 0 5
34004: PPUSH
34005: LD_INT 22
34007: PUSH
34008: LD_VAR 0 13
34012: PPUSH
34013: CALL_OW 255
34017: PUSH
34018: EMPTY
34019: LIST
34020: LIST
34021: PUSH
34022: LD_INT 2
34024: PUSH
34025: LD_INT 30
34027: PUSH
34028: LD_INT 0
34030: PUSH
34031: EMPTY
34032: LIST
34033: LIST
34034: PUSH
34035: LD_INT 30
34037: PUSH
34038: LD_INT 1
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: LIST
34049: PUSH
34050: EMPTY
34051: LIST
34052: LIST
34053: PPUSH
34054: CALL_OW 72
34058: ST_TO_ADDR
// for i = 1 to hexes do
34059: LD_ADDR_VAR 0 9
34063: PUSH
34064: DOUBLE
34065: LD_INT 1
34067: DEC
34068: ST_TO_ADDR
34069: LD_VAR 0 14
34073: PUSH
34074: FOR_TO
34075: IFFALSE 34751
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34077: LD_ADDR_VAR 0 13
34081: PUSH
34082: LD_VAR 0 14
34086: PUSH
34087: LD_VAR 0 9
34091: ARRAY
34092: PUSH
34093: LD_INT 1
34095: ARRAY
34096: PPUSH
34097: LD_VAR 0 14
34101: PUSH
34102: LD_VAR 0 9
34106: ARRAY
34107: PUSH
34108: LD_INT 2
34110: ARRAY
34111: PPUSH
34112: CALL_OW 428
34116: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34117: LD_VAR 0 14
34121: PUSH
34122: LD_VAR 0 9
34126: ARRAY
34127: PUSH
34128: LD_INT 1
34130: ARRAY
34131: PPUSH
34132: LD_VAR 0 14
34136: PUSH
34137: LD_VAR 0 9
34141: ARRAY
34142: PUSH
34143: LD_INT 2
34145: ARRAY
34146: PPUSH
34147: CALL_OW 351
34151: PUSH
34152: LD_VAR 0 14
34156: PUSH
34157: LD_VAR 0 9
34161: ARRAY
34162: PUSH
34163: LD_INT 1
34165: ARRAY
34166: PPUSH
34167: LD_VAR 0 14
34171: PUSH
34172: LD_VAR 0 9
34176: ARRAY
34177: PUSH
34178: LD_INT 2
34180: ARRAY
34181: PPUSH
34182: CALL_OW 488
34186: NOT
34187: OR
34188: PUSH
34189: LD_VAR 0 13
34193: PPUSH
34194: CALL_OW 247
34198: PUSH
34199: LD_INT 3
34201: EQUAL
34202: OR
34203: IFFALSE 34209
// exit ;
34205: POP
34206: POP
34207: GO 34753
// if not tmp then
34209: LD_VAR 0 13
34213: NOT
34214: IFFALSE 34218
// continue ;
34216: GO 34074
// result := true ;
34218: LD_ADDR_VAR 0 8
34222: PUSH
34223: LD_INT 1
34225: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34226: LD_VAR 0 6
34230: PUSH
34231: LD_VAR 0 13
34235: PPUSH
34236: CALL_OW 247
34240: PUSH
34241: LD_INT 2
34243: EQUAL
34244: AND
34245: PUSH
34246: LD_VAR 0 13
34250: PPUSH
34251: CALL_OW 263
34255: PUSH
34256: LD_INT 1
34258: EQUAL
34259: AND
34260: IFFALSE 34424
// begin if IsDrivenBy ( tmp ) then
34262: LD_VAR 0 13
34266: PPUSH
34267: CALL_OW 311
34271: IFFALSE 34275
// continue ;
34273: GO 34074
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34275: LD_VAR 0 6
34279: PPUSH
34280: LD_INT 3
34282: PUSH
34283: LD_INT 60
34285: PUSH
34286: EMPTY
34287: LIST
34288: PUSH
34289: EMPTY
34290: LIST
34291: LIST
34292: PUSH
34293: LD_INT 3
34295: PUSH
34296: LD_INT 55
34298: PUSH
34299: EMPTY
34300: LIST
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: PPUSH
34310: CALL_OW 72
34314: IFFALSE 34422
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34316: LD_ADDR_VAR 0 18
34320: PUSH
34321: LD_VAR 0 6
34325: PPUSH
34326: LD_INT 3
34328: PUSH
34329: LD_INT 60
34331: PUSH
34332: EMPTY
34333: LIST
34334: PUSH
34335: EMPTY
34336: LIST
34337: LIST
34338: PUSH
34339: LD_INT 3
34341: PUSH
34342: LD_INT 55
34344: PUSH
34345: EMPTY
34346: LIST
34347: PUSH
34348: EMPTY
34349: LIST
34350: LIST
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: PPUSH
34356: CALL_OW 72
34360: PUSH
34361: LD_INT 1
34363: ARRAY
34364: ST_TO_ADDR
// if IsInUnit ( driver ) then
34365: LD_VAR 0 18
34369: PPUSH
34370: CALL_OW 310
34374: IFFALSE 34385
// ComExit ( driver ) ;
34376: LD_VAR 0 18
34380: PPUSH
34381: CALL 59174 0 1
// AddComEnterUnit ( driver , tmp ) ;
34385: LD_VAR 0 18
34389: PPUSH
34390: LD_VAR 0 13
34394: PPUSH
34395: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34399: LD_VAR 0 18
34403: PPUSH
34404: LD_VAR 0 7
34408: PPUSH
34409: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34413: LD_VAR 0 18
34417: PPUSH
34418: CALL_OW 181
// end ; continue ;
34422: GO 34074
// end ; if not cleaners or not tmp in cleaners then
34424: LD_VAR 0 6
34428: NOT
34429: PUSH
34430: LD_VAR 0 13
34434: PUSH
34435: LD_VAR 0 6
34439: IN
34440: NOT
34441: OR
34442: IFFALSE 34749
// begin if dep then
34444: LD_VAR 0 17
34448: IFFALSE 34584
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34450: LD_ADDR_VAR 0 16
34454: PUSH
34455: LD_VAR 0 17
34459: PUSH
34460: LD_INT 1
34462: ARRAY
34463: PPUSH
34464: CALL_OW 250
34468: PPUSH
34469: LD_VAR 0 17
34473: PUSH
34474: LD_INT 1
34476: ARRAY
34477: PPUSH
34478: CALL_OW 254
34482: PPUSH
34483: LD_INT 5
34485: PPUSH
34486: CALL_OW 272
34490: PUSH
34491: LD_VAR 0 17
34495: PUSH
34496: LD_INT 1
34498: ARRAY
34499: PPUSH
34500: CALL_OW 251
34504: PPUSH
34505: LD_VAR 0 17
34509: PUSH
34510: LD_INT 1
34512: ARRAY
34513: PPUSH
34514: CALL_OW 254
34518: PPUSH
34519: LD_INT 5
34521: PPUSH
34522: CALL_OW 273
34526: PUSH
34527: EMPTY
34528: LIST
34529: LIST
34530: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34531: LD_VAR 0 16
34535: PUSH
34536: LD_INT 1
34538: ARRAY
34539: PPUSH
34540: LD_VAR 0 16
34544: PUSH
34545: LD_INT 2
34547: ARRAY
34548: PPUSH
34549: CALL_OW 488
34553: IFFALSE 34584
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
34555: LD_VAR 0 13
34559: PPUSH
34560: LD_VAR 0 16
34564: PUSH
34565: LD_INT 1
34567: ARRAY
34568: PPUSH
34569: LD_VAR 0 16
34573: PUSH
34574: LD_INT 2
34576: ARRAY
34577: PPUSH
34578: CALL_OW 111
// continue ;
34582: GO 34074
// end ; end ; r := GetDir ( tmp ) ;
34584: LD_ADDR_VAR 0 15
34588: PUSH
34589: LD_VAR 0 13
34593: PPUSH
34594: CALL_OW 254
34598: ST_TO_ADDR
// if r = 5 then
34599: LD_VAR 0 15
34603: PUSH
34604: LD_INT 5
34606: EQUAL
34607: IFFALSE 34617
// r := 0 ;
34609: LD_ADDR_VAR 0 15
34613: PUSH
34614: LD_INT 0
34616: ST_TO_ADDR
// for j = r to 5 do
34617: LD_ADDR_VAR 0 10
34621: PUSH
34622: DOUBLE
34623: LD_VAR 0 15
34627: DEC
34628: ST_TO_ADDR
34629: LD_INT 5
34631: PUSH
34632: FOR_TO
34633: IFFALSE 34747
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
34635: LD_ADDR_VAR 0 11
34639: PUSH
34640: LD_VAR 0 13
34644: PPUSH
34645: CALL_OW 250
34649: PPUSH
34650: LD_VAR 0 10
34654: PPUSH
34655: LD_INT 2
34657: PPUSH
34658: CALL_OW 272
34662: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
34663: LD_ADDR_VAR 0 12
34667: PUSH
34668: LD_VAR 0 13
34672: PPUSH
34673: CALL_OW 251
34677: PPUSH
34678: LD_VAR 0 10
34682: PPUSH
34683: LD_INT 2
34685: PPUSH
34686: CALL_OW 273
34690: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
34691: LD_VAR 0 11
34695: PPUSH
34696: LD_VAR 0 12
34700: PPUSH
34701: CALL_OW 488
34705: PUSH
34706: LD_VAR 0 11
34710: PPUSH
34711: LD_VAR 0 12
34715: PPUSH
34716: CALL_OW 428
34720: NOT
34721: AND
34722: IFFALSE 34745
// begin ComMoveXY ( tmp , _x , _y ) ;
34724: LD_VAR 0 13
34728: PPUSH
34729: LD_VAR 0 11
34733: PPUSH
34734: LD_VAR 0 12
34738: PPUSH
34739: CALL_OW 111
// break ;
34743: GO 34747
// end ; end ;
34745: GO 34632
34747: POP
34748: POP
// end ; end ;
34749: GO 34074
34751: POP
34752: POP
// end ;
34753: LD_VAR 0 8
34757: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34758: LD_INT 0
34760: PPUSH
// result := true ;
34761: LD_ADDR_VAR 0 3
34765: PUSH
34766: LD_INT 1
34768: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34769: LD_VAR 0 2
34773: PUSH
34774: LD_INT 24
34776: DOUBLE
34777: EQUAL
34778: IFTRUE 34788
34780: LD_INT 33
34782: DOUBLE
34783: EQUAL
34784: IFTRUE 34788
34786: GO 34813
34788: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34789: LD_ADDR_VAR 0 3
34793: PUSH
34794: LD_INT 32
34796: PPUSH
34797: LD_VAR 0 1
34801: PPUSH
34802: CALL_OW 321
34806: PUSH
34807: LD_INT 2
34809: EQUAL
34810: ST_TO_ADDR
34811: GO 35133
34813: LD_INT 20
34815: DOUBLE
34816: EQUAL
34817: IFTRUE 34821
34819: GO 34846
34821: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34822: LD_ADDR_VAR 0 3
34826: PUSH
34827: LD_INT 6
34829: PPUSH
34830: LD_VAR 0 1
34834: PPUSH
34835: CALL_OW 321
34839: PUSH
34840: LD_INT 2
34842: EQUAL
34843: ST_TO_ADDR
34844: GO 35133
34846: LD_INT 22
34848: DOUBLE
34849: EQUAL
34850: IFTRUE 34860
34852: LD_INT 36
34854: DOUBLE
34855: EQUAL
34856: IFTRUE 34860
34858: GO 34885
34860: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34861: LD_ADDR_VAR 0 3
34865: PUSH
34866: LD_INT 15
34868: PPUSH
34869: LD_VAR 0 1
34873: PPUSH
34874: CALL_OW 321
34878: PUSH
34879: LD_INT 2
34881: EQUAL
34882: ST_TO_ADDR
34883: GO 35133
34885: LD_INT 30
34887: DOUBLE
34888: EQUAL
34889: IFTRUE 34893
34891: GO 34918
34893: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34894: LD_ADDR_VAR 0 3
34898: PUSH
34899: LD_INT 20
34901: PPUSH
34902: LD_VAR 0 1
34906: PPUSH
34907: CALL_OW 321
34911: PUSH
34912: LD_INT 2
34914: EQUAL
34915: ST_TO_ADDR
34916: GO 35133
34918: LD_INT 28
34920: DOUBLE
34921: EQUAL
34922: IFTRUE 34932
34924: LD_INT 21
34926: DOUBLE
34927: EQUAL
34928: IFTRUE 34932
34930: GO 34957
34932: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34933: LD_ADDR_VAR 0 3
34937: PUSH
34938: LD_INT 21
34940: PPUSH
34941: LD_VAR 0 1
34945: PPUSH
34946: CALL_OW 321
34950: PUSH
34951: LD_INT 2
34953: EQUAL
34954: ST_TO_ADDR
34955: GO 35133
34957: LD_INT 16
34959: DOUBLE
34960: EQUAL
34961: IFTRUE 34965
34963: GO 34992
34965: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34966: LD_ADDR_VAR 0 3
34970: PUSH
34971: LD_EXP 51
34975: PPUSH
34976: LD_VAR 0 1
34980: PPUSH
34981: CALL_OW 321
34985: PUSH
34986: LD_INT 2
34988: EQUAL
34989: ST_TO_ADDR
34990: GO 35133
34992: LD_INT 19
34994: DOUBLE
34995: EQUAL
34996: IFTRUE 35006
34998: LD_INT 23
35000: DOUBLE
35001: EQUAL
35002: IFTRUE 35006
35004: GO 35033
35006: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35007: LD_ADDR_VAR 0 3
35011: PUSH
35012: LD_EXP 50
35016: PPUSH
35017: LD_VAR 0 1
35021: PPUSH
35022: CALL_OW 321
35026: PUSH
35027: LD_INT 2
35029: EQUAL
35030: ST_TO_ADDR
35031: GO 35133
35033: LD_INT 17
35035: DOUBLE
35036: EQUAL
35037: IFTRUE 35041
35039: GO 35066
35041: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35042: LD_ADDR_VAR 0 3
35046: PUSH
35047: LD_INT 39
35049: PPUSH
35050: LD_VAR 0 1
35054: PPUSH
35055: CALL_OW 321
35059: PUSH
35060: LD_INT 2
35062: EQUAL
35063: ST_TO_ADDR
35064: GO 35133
35066: LD_INT 18
35068: DOUBLE
35069: EQUAL
35070: IFTRUE 35074
35072: GO 35099
35074: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35075: LD_ADDR_VAR 0 3
35079: PUSH
35080: LD_INT 40
35082: PPUSH
35083: LD_VAR 0 1
35087: PPUSH
35088: CALL_OW 321
35092: PUSH
35093: LD_INT 2
35095: EQUAL
35096: ST_TO_ADDR
35097: GO 35133
35099: LD_INT 27
35101: DOUBLE
35102: EQUAL
35103: IFTRUE 35107
35105: GO 35132
35107: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35108: LD_ADDR_VAR 0 3
35112: PUSH
35113: LD_INT 35
35115: PPUSH
35116: LD_VAR 0 1
35120: PPUSH
35121: CALL_OW 321
35125: PUSH
35126: LD_INT 2
35128: EQUAL
35129: ST_TO_ADDR
35130: GO 35133
35132: POP
// end ;
35133: LD_VAR 0 3
35137: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35138: LD_INT 0
35140: PPUSH
35141: PPUSH
35142: PPUSH
35143: PPUSH
35144: PPUSH
35145: PPUSH
35146: PPUSH
35147: PPUSH
35148: PPUSH
35149: PPUSH
35150: PPUSH
// result := false ;
35151: LD_ADDR_VAR 0 6
35155: PUSH
35156: LD_INT 0
35158: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35159: LD_VAR 0 1
35163: NOT
35164: PUSH
35165: LD_VAR 0 1
35169: PPUSH
35170: CALL_OW 266
35174: PUSH
35175: LD_INT 0
35177: PUSH
35178: LD_INT 1
35180: PUSH
35181: EMPTY
35182: LIST
35183: LIST
35184: IN
35185: NOT
35186: OR
35187: PUSH
35188: LD_VAR 0 2
35192: NOT
35193: OR
35194: PUSH
35195: LD_VAR 0 5
35199: PUSH
35200: LD_INT 0
35202: PUSH
35203: LD_INT 1
35205: PUSH
35206: LD_INT 2
35208: PUSH
35209: LD_INT 3
35211: PUSH
35212: LD_INT 4
35214: PUSH
35215: LD_INT 5
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: IN
35226: NOT
35227: OR
35228: PUSH
35229: LD_VAR 0 3
35233: PPUSH
35234: LD_VAR 0 4
35238: PPUSH
35239: CALL_OW 488
35243: NOT
35244: OR
35245: IFFALSE 35249
// exit ;
35247: GO 35985
// side := GetSide ( depot ) ;
35249: LD_ADDR_VAR 0 9
35253: PUSH
35254: LD_VAR 0 1
35258: PPUSH
35259: CALL_OW 255
35263: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35264: LD_VAR 0 9
35268: PPUSH
35269: LD_VAR 0 2
35273: PPUSH
35274: CALL 34758 0 2
35278: NOT
35279: IFFALSE 35283
// exit ;
35281: GO 35985
// pom := GetBase ( depot ) ;
35283: LD_ADDR_VAR 0 10
35287: PUSH
35288: LD_VAR 0 1
35292: PPUSH
35293: CALL_OW 274
35297: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35298: LD_ADDR_VAR 0 11
35302: PUSH
35303: LD_VAR 0 2
35307: PPUSH
35308: LD_VAR 0 1
35312: PPUSH
35313: CALL_OW 248
35317: PPUSH
35318: CALL_OW 450
35322: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35323: LD_VAR 0 10
35327: PPUSH
35328: LD_INT 1
35330: PPUSH
35331: CALL_OW 275
35335: PUSH
35336: LD_VAR 0 11
35340: PUSH
35341: LD_INT 1
35343: ARRAY
35344: GREATEREQUAL
35345: PUSH
35346: LD_VAR 0 10
35350: PPUSH
35351: LD_INT 2
35353: PPUSH
35354: CALL_OW 275
35358: PUSH
35359: LD_VAR 0 11
35363: PUSH
35364: LD_INT 2
35366: ARRAY
35367: GREATEREQUAL
35368: AND
35369: PUSH
35370: LD_VAR 0 10
35374: PPUSH
35375: LD_INT 3
35377: PPUSH
35378: CALL_OW 275
35382: PUSH
35383: LD_VAR 0 11
35387: PUSH
35388: LD_INT 3
35390: ARRAY
35391: GREATEREQUAL
35392: AND
35393: NOT
35394: IFFALSE 35398
// exit ;
35396: GO 35985
// if GetBType ( depot ) = b_depot then
35398: LD_VAR 0 1
35402: PPUSH
35403: CALL_OW 266
35407: PUSH
35408: LD_INT 0
35410: EQUAL
35411: IFFALSE 35423
// dist := 28 else
35413: LD_ADDR_VAR 0 14
35417: PUSH
35418: LD_INT 28
35420: ST_TO_ADDR
35421: GO 35431
// dist := 36 ;
35423: LD_ADDR_VAR 0 14
35427: PUSH
35428: LD_INT 36
35430: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35431: LD_VAR 0 1
35435: PPUSH
35436: LD_VAR 0 3
35440: PPUSH
35441: LD_VAR 0 4
35445: PPUSH
35446: CALL_OW 297
35450: PUSH
35451: LD_VAR 0 14
35455: GREATER
35456: IFFALSE 35460
// exit ;
35458: GO 35985
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35460: LD_ADDR_VAR 0 12
35464: PUSH
35465: LD_VAR 0 2
35469: PPUSH
35470: LD_VAR 0 3
35474: PPUSH
35475: LD_VAR 0 4
35479: PPUSH
35480: LD_VAR 0 5
35484: PPUSH
35485: LD_VAR 0 1
35489: PPUSH
35490: CALL_OW 248
35494: PPUSH
35495: LD_INT 0
35497: PPUSH
35498: CALL 35990 0 6
35502: ST_TO_ADDR
// if not hexes then
35503: LD_VAR 0 12
35507: NOT
35508: IFFALSE 35512
// exit ;
35510: GO 35985
// hex := GetHexInfo ( x , y ) ;
35512: LD_ADDR_VAR 0 15
35516: PUSH
35517: LD_VAR 0 3
35521: PPUSH
35522: LD_VAR 0 4
35526: PPUSH
35527: CALL_OW 546
35531: ST_TO_ADDR
// if hex [ 1 ] then
35532: LD_VAR 0 15
35536: PUSH
35537: LD_INT 1
35539: ARRAY
35540: IFFALSE 35544
// exit ;
35542: GO 35985
// height := hex [ 2 ] ;
35544: LD_ADDR_VAR 0 13
35548: PUSH
35549: LD_VAR 0 15
35553: PUSH
35554: LD_INT 2
35556: ARRAY
35557: ST_TO_ADDR
// for i = 1 to hexes do
35558: LD_ADDR_VAR 0 7
35562: PUSH
35563: DOUBLE
35564: LD_INT 1
35566: DEC
35567: ST_TO_ADDR
35568: LD_VAR 0 12
35572: PUSH
35573: FOR_TO
35574: IFFALSE 35904
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
35576: LD_VAR 0 12
35580: PUSH
35581: LD_VAR 0 7
35585: ARRAY
35586: PUSH
35587: LD_INT 1
35589: ARRAY
35590: PPUSH
35591: LD_VAR 0 12
35595: PUSH
35596: LD_VAR 0 7
35600: ARRAY
35601: PUSH
35602: LD_INT 2
35604: ARRAY
35605: PPUSH
35606: CALL_OW 488
35610: NOT
35611: PUSH
35612: LD_VAR 0 12
35616: PUSH
35617: LD_VAR 0 7
35621: ARRAY
35622: PUSH
35623: LD_INT 1
35625: ARRAY
35626: PPUSH
35627: LD_VAR 0 12
35631: PUSH
35632: LD_VAR 0 7
35636: ARRAY
35637: PUSH
35638: LD_INT 2
35640: ARRAY
35641: PPUSH
35642: CALL_OW 428
35646: PUSH
35647: LD_INT 0
35649: GREATER
35650: OR
35651: PUSH
35652: LD_VAR 0 12
35656: PUSH
35657: LD_VAR 0 7
35661: ARRAY
35662: PUSH
35663: LD_INT 1
35665: ARRAY
35666: PPUSH
35667: LD_VAR 0 12
35671: PUSH
35672: LD_VAR 0 7
35676: ARRAY
35677: PUSH
35678: LD_INT 2
35680: ARRAY
35681: PPUSH
35682: CALL_OW 351
35686: OR
35687: IFFALSE 35693
// exit ;
35689: POP
35690: POP
35691: GO 35985
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35693: LD_ADDR_VAR 0 8
35697: PUSH
35698: LD_VAR 0 12
35702: PUSH
35703: LD_VAR 0 7
35707: ARRAY
35708: PUSH
35709: LD_INT 1
35711: ARRAY
35712: PPUSH
35713: LD_VAR 0 12
35717: PUSH
35718: LD_VAR 0 7
35722: ARRAY
35723: PUSH
35724: LD_INT 2
35726: ARRAY
35727: PPUSH
35728: CALL_OW 546
35732: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35733: LD_VAR 0 8
35737: PUSH
35738: LD_INT 1
35740: ARRAY
35741: PUSH
35742: LD_VAR 0 8
35746: PUSH
35747: LD_INT 2
35749: ARRAY
35750: PUSH
35751: LD_VAR 0 13
35755: PUSH
35756: LD_INT 2
35758: PLUS
35759: GREATER
35760: OR
35761: PUSH
35762: LD_VAR 0 8
35766: PUSH
35767: LD_INT 2
35769: ARRAY
35770: PUSH
35771: LD_VAR 0 13
35775: PUSH
35776: LD_INT 2
35778: MINUS
35779: LESS
35780: OR
35781: PUSH
35782: LD_VAR 0 8
35786: PUSH
35787: LD_INT 3
35789: ARRAY
35790: PUSH
35791: LD_INT 0
35793: PUSH
35794: LD_INT 8
35796: PUSH
35797: LD_INT 9
35799: PUSH
35800: LD_INT 10
35802: PUSH
35803: LD_INT 11
35805: PUSH
35806: LD_INT 12
35808: PUSH
35809: LD_INT 13
35811: PUSH
35812: LD_INT 16
35814: PUSH
35815: LD_INT 17
35817: PUSH
35818: LD_INT 18
35820: PUSH
35821: LD_INT 19
35823: PUSH
35824: LD_INT 20
35826: PUSH
35827: LD_INT 21
35829: PUSH
35830: EMPTY
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: LIST
35839: LIST
35840: LIST
35841: LIST
35842: LIST
35843: LIST
35844: IN
35845: NOT
35846: OR
35847: PUSH
35848: LD_VAR 0 8
35852: PUSH
35853: LD_INT 5
35855: ARRAY
35856: NOT
35857: OR
35858: PUSH
35859: LD_VAR 0 8
35863: PUSH
35864: LD_INT 6
35866: ARRAY
35867: PUSH
35868: LD_INT 1
35870: PUSH
35871: LD_INT 2
35873: PUSH
35874: LD_INT 7
35876: PUSH
35877: LD_INT 9
35879: PUSH
35880: LD_INT 10
35882: PUSH
35883: LD_INT 11
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: IN
35894: NOT
35895: OR
35896: IFFALSE 35902
// exit ;
35898: POP
35899: POP
35900: GO 35985
// end ;
35902: GO 35573
35904: POP
35905: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35906: LD_VAR 0 9
35910: PPUSH
35911: LD_VAR 0 3
35915: PPUSH
35916: LD_VAR 0 4
35920: PPUSH
35921: LD_INT 20
35923: PPUSH
35924: CALL 27931 0 4
35928: PUSH
35929: LD_INT 4
35931: ARRAY
35932: IFFALSE 35936
// exit ;
35934: GO 35985
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35936: LD_VAR 0 2
35940: PUSH
35941: LD_INT 29
35943: PUSH
35944: LD_INT 30
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: IN
35951: PUSH
35952: LD_VAR 0 3
35956: PPUSH
35957: LD_VAR 0 4
35961: PPUSH
35962: LD_VAR 0 9
35966: PPUSH
35967: CALL_OW 440
35971: NOT
35972: AND
35973: IFFALSE 35977
// exit ;
35975: GO 35985
// result := true ;
35977: LD_ADDR_VAR 0 6
35981: PUSH
35982: LD_INT 1
35984: ST_TO_ADDR
// end ;
35985: LD_VAR 0 6
35989: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35990: LD_INT 0
35992: PPUSH
35993: PPUSH
35994: PPUSH
35995: PPUSH
35996: PPUSH
35997: PPUSH
35998: PPUSH
35999: PPUSH
36000: PPUSH
36001: PPUSH
36002: PPUSH
36003: PPUSH
36004: PPUSH
36005: PPUSH
36006: PPUSH
36007: PPUSH
36008: PPUSH
36009: PPUSH
36010: PPUSH
36011: PPUSH
36012: PPUSH
36013: PPUSH
36014: PPUSH
36015: PPUSH
36016: PPUSH
36017: PPUSH
36018: PPUSH
36019: PPUSH
36020: PPUSH
36021: PPUSH
36022: PPUSH
36023: PPUSH
36024: PPUSH
36025: PPUSH
36026: PPUSH
36027: PPUSH
36028: PPUSH
36029: PPUSH
36030: PPUSH
36031: PPUSH
36032: PPUSH
36033: PPUSH
36034: PPUSH
36035: PPUSH
36036: PPUSH
36037: PPUSH
36038: PPUSH
36039: PPUSH
36040: PPUSH
36041: PPUSH
36042: PPUSH
36043: PPUSH
36044: PPUSH
36045: PPUSH
36046: PPUSH
36047: PPUSH
36048: PPUSH
36049: PPUSH
// result = [ ] ;
36050: LD_ADDR_VAR 0 7
36054: PUSH
36055: EMPTY
36056: ST_TO_ADDR
// temp_list = [ ] ;
36057: LD_ADDR_VAR 0 9
36061: PUSH
36062: EMPTY
36063: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36064: LD_VAR 0 4
36068: PUSH
36069: LD_INT 0
36071: PUSH
36072: LD_INT 1
36074: PUSH
36075: LD_INT 2
36077: PUSH
36078: LD_INT 3
36080: PUSH
36081: LD_INT 4
36083: PUSH
36084: LD_INT 5
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: IN
36095: NOT
36096: PUSH
36097: LD_VAR 0 1
36101: PUSH
36102: LD_INT 0
36104: PUSH
36105: LD_INT 1
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: IN
36112: PUSH
36113: LD_VAR 0 5
36117: PUSH
36118: LD_INT 1
36120: PUSH
36121: LD_INT 2
36123: PUSH
36124: LD_INT 3
36126: PUSH
36127: EMPTY
36128: LIST
36129: LIST
36130: LIST
36131: IN
36132: NOT
36133: AND
36134: OR
36135: IFFALSE 36139
// exit ;
36137: GO 54530
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36139: LD_VAR 0 1
36143: PUSH
36144: LD_INT 6
36146: PUSH
36147: LD_INT 7
36149: PUSH
36150: LD_INT 8
36152: PUSH
36153: LD_INT 13
36155: PUSH
36156: LD_INT 12
36158: PUSH
36159: LD_INT 15
36161: PUSH
36162: LD_INT 11
36164: PUSH
36165: LD_INT 14
36167: PUSH
36168: LD_INT 10
36170: PUSH
36171: EMPTY
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: IN
36182: IFFALSE 36192
// btype = b_lab ;
36184: LD_ADDR_VAR 0 1
36188: PUSH
36189: LD_INT 6
36191: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36192: LD_VAR 0 6
36196: PUSH
36197: LD_INT 0
36199: PUSH
36200: LD_INT 1
36202: PUSH
36203: LD_INT 2
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: LIST
36210: IN
36211: NOT
36212: PUSH
36213: LD_VAR 0 1
36217: PUSH
36218: LD_INT 0
36220: PUSH
36221: LD_INT 1
36223: PUSH
36224: LD_INT 2
36226: PUSH
36227: LD_INT 3
36229: PUSH
36230: LD_INT 6
36232: PUSH
36233: LD_INT 36
36235: PUSH
36236: LD_INT 4
36238: PUSH
36239: LD_INT 5
36241: PUSH
36242: LD_INT 31
36244: PUSH
36245: LD_INT 32
36247: PUSH
36248: LD_INT 33
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: IN
36264: NOT
36265: PUSH
36266: LD_VAR 0 6
36270: PUSH
36271: LD_INT 1
36273: EQUAL
36274: AND
36275: OR
36276: PUSH
36277: LD_VAR 0 1
36281: PUSH
36282: LD_INT 2
36284: PUSH
36285: LD_INT 3
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: IN
36292: NOT
36293: PUSH
36294: LD_VAR 0 6
36298: PUSH
36299: LD_INT 2
36301: EQUAL
36302: AND
36303: OR
36304: IFFALSE 36314
// mode = 0 ;
36306: LD_ADDR_VAR 0 6
36310: PUSH
36311: LD_INT 0
36313: ST_TO_ADDR
// case mode of 0 :
36314: LD_VAR 0 6
36318: PUSH
36319: LD_INT 0
36321: DOUBLE
36322: EQUAL
36323: IFTRUE 36327
36325: GO 47780
36327: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36328: LD_ADDR_VAR 0 11
36332: PUSH
36333: LD_INT 0
36335: PUSH
36336: LD_INT 0
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 0
36345: PUSH
36346: LD_INT 1
36348: NEG
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 1
36356: PUSH
36357: LD_INT 0
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 1
36366: PUSH
36367: LD_INT 1
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 0
36376: PUSH
36377: LD_INT 1
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 1
36386: NEG
36387: PUSH
36388: LD_INT 0
36390: PUSH
36391: EMPTY
36392: LIST
36393: LIST
36394: PUSH
36395: LD_INT 1
36397: NEG
36398: PUSH
36399: LD_INT 1
36401: NEG
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: PUSH
36407: LD_INT 1
36409: NEG
36410: PUSH
36411: LD_INT 2
36413: NEG
36414: PUSH
36415: EMPTY
36416: LIST
36417: LIST
36418: PUSH
36419: LD_INT 0
36421: PUSH
36422: LD_INT 2
36424: NEG
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 1
36432: PUSH
36433: LD_INT 1
36435: NEG
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 1
36443: PUSH
36444: LD_INT 2
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 0
36453: PUSH
36454: LD_INT 2
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PUSH
36461: LD_INT 1
36463: NEG
36464: PUSH
36465: LD_INT 1
36467: PUSH
36468: EMPTY
36469: LIST
36470: LIST
36471: PUSH
36472: LD_INT 1
36474: PUSH
36475: LD_INT 3
36477: PUSH
36478: EMPTY
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 0
36484: PUSH
36485: LD_INT 3
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 1
36494: NEG
36495: PUSH
36496: LD_INT 2
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: LIST
36507: LIST
36508: LIST
36509: LIST
36510: LIST
36511: LIST
36512: LIST
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36521: LD_ADDR_VAR 0 12
36525: PUSH
36526: LD_INT 0
36528: PUSH
36529: LD_INT 0
36531: PUSH
36532: EMPTY
36533: LIST
36534: LIST
36535: PUSH
36536: LD_INT 0
36538: PUSH
36539: LD_INT 1
36541: NEG
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 1
36549: PUSH
36550: LD_INT 0
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 1
36559: PUSH
36560: LD_INT 1
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 0
36569: PUSH
36570: LD_INT 1
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 1
36579: NEG
36580: PUSH
36581: LD_INT 0
36583: PUSH
36584: EMPTY
36585: LIST
36586: LIST
36587: PUSH
36588: LD_INT 1
36590: NEG
36591: PUSH
36592: LD_INT 1
36594: NEG
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: PUSH
36600: LD_INT 1
36602: PUSH
36603: LD_INT 1
36605: NEG
36606: PUSH
36607: EMPTY
36608: LIST
36609: LIST
36610: PUSH
36611: LD_INT 2
36613: PUSH
36614: LD_INT 0
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 2
36623: PUSH
36624: LD_INT 1
36626: PUSH
36627: EMPTY
36628: LIST
36629: LIST
36630: PUSH
36631: LD_INT 1
36633: NEG
36634: PUSH
36635: LD_INT 1
36637: PUSH
36638: EMPTY
36639: LIST
36640: LIST
36641: PUSH
36642: LD_INT 2
36644: NEG
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 2
36655: NEG
36656: PUSH
36657: LD_INT 1
36659: NEG
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 2
36667: NEG
36668: PUSH
36669: LD_INT 1
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: PUSH
36676: LD_INT 3
36678: NEG
36679: PUSH
36680: LD_INT 0
36682: PUSH
36683: EMPTY
36684: LIST
36685: LIST
36686: PUSH
36687: LD_INT 3
36689: NEG
36690: PUSH
36691: LD_INT 1
36693: NEG
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: EMPTY
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: LIST
36715: LIST
36716: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36717: LD_ADDR_VAR 0 13
36721: PUSH
36722: LD_INT 0
36724: PUSH
36725: LD_INT 0
36727: PUSH
36728: EMPTY
36729: LIST
36730: LIST
36731: PUSH
36732: LD_INT 0
36734: PUSH
36735: LD_INT 1
36737: NEG
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: LD_INT 0
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 1
36755: PUSH
36756: LD_INT 1
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 0
36765: PUSH
36766: LD_INT 1
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 1
36775: NEG
36776: PUSH
36777: LD_INT 0
36779: PUSH
36780: EMPTY
36781: LIST
36782: LIST
36783: PUSH
36784: LD_INT 1
36786: NEG
36787: PUSH
36788: LD_INT 1
36790: NEG
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 1
36798: NEG
36799: PUSH
36800: LD_INT 2
36802: NEG
36803: PUSH
36804: EMPTY
36805: LIST
36806: LIST
36807: PUSH
36808: LD_INT 2
36810: PUSH
36811: LD_INT 1
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 2
36820: PUSH
36821: LD_INT 2
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 1
36830: PUSH
36831: LD_INT 2
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 2
36840: NEG
36841: PUSH
36842: LD_INT 1
36844: NEG
36845: PUSH
36846: EMPTY
36847: LIST
36848: LIST
36849: PUSH
36850: LD_INT 2
36852: NEG
36853: PUSH
36854: LD_INT 2
36856: NEG
36857: PUSH
36858: EMPTY
36859: LIST
36860: LIST
36861: PUSH
36862: LD_INT 2
36864: NEG
36865: PUSH
36866: LD_INT 3
36868: NEG
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 3
36876: NEG
36877: PUSH
36878: LD_INT 2
36880: NEG
36881: PUSH
36882: EMPTY
36883: LIST
36884: LIST
36885: PUSH
36886: LD_INT 3
36888: NEG
36889: PUSH
36890: LD_INT 3
36892: NEG
36893: PUSH
36894: EMPTY
36895: LIST
36896: LIST
36897: PUSH
36898: EMPTY
36899: LIST
36900: LIST
36901: LIST
36902: LIST
36903: LIST
36904: LIST
36905: LIST
36906: LIST
36907: LIST
36908: LIST
36909: LIST
36910: LIST
36911: LIST
36912: LIST
36913: LIST
36914: LIST
36915: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36916: LD_ADDR_VAR 0 14
36920: PUSH
36921: LD_INT 0
36923: PUSH
36924: LD_INT 0
36926: PUSH
36927: EMPTY
36928: LIST
36929: LIST
36930: PUSH
36931: LD_INT 0
36933: PUSH
36934: LD_INT 1
36936: NEG
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 1
36944: PUSH
36945: LD_INT 0
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: PUSH
36952: LD_INT 1
36954: PUSH
36955: LD_INT 1
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 0
36964: PUSH
36965: LD_INT 1
36967: PUSH
36968: EMPTY
36969: LIST
36970: LIST
36971: PUSH
36972: LD_INT 1
36974: NEG
36975: PUSH
36976: LD_INT 0
36978: PUSH
36979: EMPTY
36980: LIST
36981: LIST
36982: PUSH
36983: LD_INT 1
36985: NEG
36986: PUSH
36987: LD_INT 1
36989: NEG
36990: PUSH
36991: EMPTY
36992: LIST
36993: LIST
36994: PUSH
36995: LD_INT 1
36997: NEG
36998: PUSH
36999: LD_INT 2
37001: NEG
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 0
37009: PUSH
37010: LD_INT 2
37012: NEG
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: PUSH
37018: LD_INT 1
37020: PUSH
37021: LD_INT 1
37023: NEG
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 1
37031: PUSH
37032: LD_INT 2
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 0
37041: PUSH
37042: LD_INT 2
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: PUSH
37049: LD_INT 1
37051: NEG
37052: PUSH
37053: LD_INT 1
37055: PUSH
37056: EMPTY
37057: LIST
37058: LIST
37059: PUSH
37060: LD_INT 1
37062: NEG
37063: PUSH
37064: LD_INT 3
37066: NEG
37067: PUSH
37068: EMPTY
37069: LIST
37070: LIST
37071: PUSH
37072: LD_INT 0
37074: PUSH
37075: LD_INT 3
37077: NEG
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 1
37085: PUSH
37086: LD_INT 2
37088: NEG
37089: PUSH
37090: EMPTY
37091: LIST
37092: LIST
37093: PUSH
37094: EMPTY
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37112: LD_ADDR_VAR 0 15
37116: PUSH
37117: LD_INT 0
37119: PUSH
37120: LD_INT 0
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: LD_INT 1
37132: NEG
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 1
37140: PUSH
37141: LD_INT 0
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 1
37150: PUSH
37151: LD_INT 1
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 0
37160: PUSH
37161: LD_INT 1
37163: PUSH
37164: EMPTY
37165: LIST
37166: LIST
37167: PUSH
37168: LD_INT 1
37170: NEG
37171: PUSH
37172: LD_INT 0
37174: PUSH
37175: EMPTY
37176: LIST
37177: LIST
37178: PUSH
37179: LD_INT 1
37181: NEG
37182: PUSH
37183: LD_INT 1
37185: NEG
37186: PUSH
37187: EMPTY
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 1
37193: PUSH
37194: LD_INT 1
37196: NEG
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 2
37204: PUSH
37205: LD_INT 0
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 2
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 1
37224: NEG
37225: PUSH
37226: LD_INT 1
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 2
37235: NEG
37236: PUSH
37237: LD_INT 0
37239: PUSH
37240: EMPTY
37241: LIST
37242: LIST
37243: PUSH
37244: LD_INT 2
37246: NEG
37247: PUSH
37248: LD_INT 1
37250: NEG
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 2
37258: PUSH
37259: LD_INT 1
37261: NEG
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 3
37269: PUSH
37270: LD_INT 0
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 3
37279: PUSH
37280: LD_INT 1
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: EMPTY
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37305: LD_ADDR_VAR 0 16
37309: PUSH
37310: LD_INT 0
37312: PUSH
37313: LD_INT 0
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 0
37322: PUSH
37323: LD_INT 1
37325: NEG
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: PUSH
37331: LD_INT 1
37333: PUSH
37334: LD_INT 0
37336: PUSH
37337: EMPTY
37338: LIST
37339: LIST
37340: PUSH
37341: LD_INT 1
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: EMPTY
37348: LIST
37349: LIST
37350: PUSH
37351: LD_INT 0
37353: PUSH
37354: LD_INT 1
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 1
37363: NEG
37364: PUSH
37365: LD_INT 0
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 1
37374: NEG
37375: PUSH
37376: LD_INT 1
37378: NEG
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 1
37386: NEG
37387: PUSH
37388: LD_INT 2
37390: NEG
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 2
37398: PUSH
37399: LD_INT 1
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 2
37408: PUSH
37409: LD_INT 2
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 1
37418: PUSH
37419: LD_INT 2
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 2
37428: NEG
37429: PUSH
37430: LD_INT 1
37432: NEG
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 2
37440: NEG
37441: PUSH
37442: LD_INT 2
37444: NEG
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 3
37452: PUSH
37453: LD_INT 2
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 3
37462: PUSH
37463: LD_INT 3
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: PUSH
37470: LD_INT 2
37472: PUSH
37473: LD_INT 3
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: LIST
37493: LIST
37494: LIST
37495: LIST
37496: LIST
37497: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37498: LD_ADDR_VAR 0 17
37502: PUSH
37503: LD_INT 0
37505: PUSH
37506: LD_INT 0
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 0
37515: PUSH
37516: LD_INT 1
37518: NEG
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 1
37526: PUSH
37527: LD_INT 0
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 1
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: EMPTY
37541: LIST
37542: LIST
37543: PUSH
37544: LD_INT 0
37546: PUSH
37547: LD_INT 1
37549: PUSH
37550: EMPTY
37551: LIST
37552: LIST
37553: PUSH
37554: LD_INT 1
37556: NEG
37557: PUSH
37558: LD_INT 0
37560: PUSH
37561: EMPTY
37562: LIST
37563: LIST
37564: PUSH
37565: LD_INT 1
37567: NEG
37568: PUSH
37569: LD_INT 1
37571: NEG
37572: PUSH
37573: EMPTY
37574: LIST
37575: LIST
37576: PUSH
37577: LD_INT 1
37579: NEG
37580: PUSH
37581: LD_INT 2
37583: NEG
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 0
37591: PUSH
37592: LD_INT 2
37594: NEG
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 1
37602: PUSH
37603: LD_INT 1
37605: NEG
37606: PUSH
37607: EMPTY
37608: LIST
37609: LIST
37610: PUSH
37611: LD_INT 2
37613: PUSH
37614: LD_INT 0
37616: PUSH
37617: EMPTY
37618: LIST
37619: LIST
37620: PUSH
37621: LD_INT 2
37623: PUSH
37624: LD_INT 1
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 2
37633: PUSH
37634: LD_INT 2
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 1
37643: PUSH
37644: LD_INT 2
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: PUSH
37651: LD_INT 0
37653: PUSH
37654: LD_INT 2
37656: PUSH
37657: EMPTY
37658: LIST
37659: LIST
37660: PUSH
37661: LD_INT 1
37663: NEG
37664: PUSH
37665: LD_INT 1
37667: PUSH
37668: EMPTY
37669: LIST
37670: LIST
37671: PUSH
37672: LD_INT 2
37674: NEG
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 2
37685: NEG
37686: PUSH
37687: LD_INT 1
37689: NEG
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 2
37697: NEG
37698: PUSH
37699: LD_INT 2
37701: NEG
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: LIST
37723: LIST
37724: LIST
37725: LIST
37726: LIST
37727: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37728: LD_ADDR_VAR 0 18
37732: PUSH
37733: LD_INT 0
37735: PUSH
37736: LD_INT 0
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 0
37745: PUSH
37746: LD_INT 1
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 1
37756: PUSH
37757: LD_INT 0
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 1
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 0
37776: PUSH
37777: LD_INT 1
37779: PUSH
37780: EMPTY
37781: LIST
37782: LIST
37783: PUSH
37784: LD_INT 1
37786: NEG
37787: PUSH
37788: LD_INT 0
37790: PUSH
37791: EMPTY
37792: LIST
37793: LIST
37794: PUSH
37795: LD_INT 1
37797: NEG
37798: PUSH
37799: LD_INT 1
37801: NEG
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: LD_INT 1
37809: NEG
37810: PUSH
37811: LD_INT 2
37813: NEG
37814: PUSH
37815: EMPTY
37816: LIST
37817: LIST
37818: PUSH
37819: LD_INT 0
37821: PUSH
37822: LD_INT 2
37824: NEG
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: PUSH
37830: LD_INT 1
37832: PUSH
37833: LD_INT 1
37835: NEG
37836: PUSH
37837: EMPTY
37838: LIST
37839: LIST
37840: PUSH
37841: LD_INT 2
37843: PUSH
37844: LD_INT 0
37846: PUSH
37847: EMPTY
37848: LIST
37849: LIST
37850: PUSH
37851: LD_INT 2
37853: PUSH
37854: LD_INT 1
37856: PUSH
37857: EMPTY
37858: LIST
37859: LIST
37860: PUSH
37861: LD_INT 2
37863: PUSH
37864: LD_INT 2
37866: PUSH
37867: EMPTY
37868: LIST
37869: LIST
37870: PUSH
37871: LD_INT 1
37873: PUSH
37874: LD_INT 2
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 0
37883: PUSH
37884: LD_INT 2
37886: PUSH
37887: EMPTY
37888: LIST
37889: LIST
37890: PUSH
37891: LD_INT 1
37893: NEG
37894: PUSH
37895: LD_INT 1
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 2
37904: NEG
37905: PUSH
37906: LD_INT 0
37908: PUSH
37909: EMPTY
37910: LIST
37911: LIST
37912: PUSH
37913: LD_INT 2
37915: NEG
37916: PUSH
37917: LD_INT 1
37919: NEG
37920: PUSH
37921: EMPTY
37922: LIST
37923: LIST
37924: PUSH
37925: LD_INT 2
37927: NEG
37928: PUSH
37929: LD_INT 2
37931: NEG
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: EMPTY
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37958: LD_ADDR_VAR 0 19
37962: PUSH
37963: LD_INT 0
37965: PUSH
37966: LD_INT 0
37968: PUSH
37969: EMPTY
37970: LIST
37971: LIST
37972: PUSH
37973: LD_INT 0
37975: PUSH
37976: LD_INT 1
37978: NEG
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 1
37986: PUSH
37987: LD_INT 0
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 1
37996: PUSH
37997: LD_INT 1
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 0
38006: PUSH
38007: LD_INT 1
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 1
38016: NEG
38017: PUSH
38018: LD_INT 0
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 1
38027: NEG
38028: PUSH
38029: LD_INT 1
38031: NEG
38032: PUSH
38033: EMPTY
38034: LIST
38035: LIST
38036: PUSH
38037: LD_INT 1
38039: NEG
38040: PUSH
38041: LD_INT 2
38043: NEG
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 0
38051: PUSH
38052: LD_INT 2
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 1
38062: PUSH
38063: LD_INT 1
38065: NEG
38066: PUSH
38067: EMPTY
38068: LIST
38069: LIST
38070: PUSH
38071: LD_INT 2
38073: PUSH
38074: LD_INT 0
38076: PUSH
38077: EMPTY
38078: LIST
38079: LIST
38080: PUSH
38081: LD_INT 2
38083: PUSH
38084: LD_INT 1
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 2
38093: PUSH
38094: LD_INT 2
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 1
38103: PUSH
38104: LD_INT 2
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 0
38113: PUSH
38114: LD_INT 2
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 1
38123: NEG
38124: PUSH
38125: LD_INT 1
38127: PUSH
38128: EMPTY
38129: LIST
38130: LIST
38131: PUSH
38132: LD_INT 2
38134: NEG
38135: PUSH
38136: LD_INT 0
38138: PUSH
38139: EMPTY
38140: LIST
38141: LIST
38142: PUSH
38143: LD_INT 2
38145: NEG
38146: PUSH
38147: LD_INT 1
38149: NEG
38150: PUSH
38151: EMPTY
38152: LIST
38153: LIST
38154: PUSH
38155: LD_INT 2
38157: NEG
38158: PUSH
38159: LD_INT 2
38161: NEG
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38188: LD_ADDR_VAR 0 20
38192: PUSH
38193: LD_INT 0
38195: PUSH
38196: LD_INT 0
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 0
38205: PUSH
38206: LD_INT 1
38208: NEG
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 1
38216: PUSH
38217: LD_INT 0
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 1
38226: PUSH
38227: LD_INT 1
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 0
38236: PUSH
38237: LD_INT 1
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: NEG
38247: PUSH
38248: LD_INT 0
38250: PUSH
38251: EMPTY
38252: LIST
38253: LIST
38254: PUSH
38255: LD_INT 1
38257: NEG
38258: PUSH
38259: LD_INT 1
38261: NEG
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 1
38269: NEG
38270: PUSH
38271: LD_INT 2
38273: NEG
38274: PUSH
38275: EMPTY
38276: LIST
38277: LIST
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: LD_INT 2
38284: NEG
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 1
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 2
38303: PUSH
38304: LD_INT 0
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 2
38313: PUSH
38314: LD_INT 1
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 2
38323: PUSH
38324: LD_INT 2
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 1
38333: PUSH
38334: LD_INT 2
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 0
38343: PUSH
38344: LD_INT 2
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 1
38353: NEG
38354: PUSH
38355: LD_INT 1
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 2
38364: NEG
38365: PUSH
38366: LD_INT 0
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 2
38375: NEG
38376: PUSH
38377: LD_INT 1
38379: NEG
38380: PUSH
38381: EMPTY
38382: LIST
38383: LIST
38384: PUSH
38385: LD_INT 2
38387: NEG
38388: PUSH
38389: LD_INT 2
38391: NEG
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38418: LD_ADDR_VAR 0 21
38422: PUSH
38423: LD_INT 0
38425: PUSH
38426: LD_INT 0
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 0
38435: PUSH
38436: LD_INT 1
38438: NEG
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 1
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 1
38456: PUSH
38457: LD_INT 1
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 0
38466: PUSH
38467: LD_INT 1
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 1
38476: NEG
38477: PUSH
38478: LD_INT 0
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 1
38487: NEG
38488: PUSH
38489: LD_INT 1
38491: NEG
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 1
38499: NEG
38500: PUSH
38501: LD_INT 2
38503: NEG
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 0
38511: PUSH
38512: LD_INT 2
38514: NEG
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 1
38522: PUSH
38523: LD_INT 1
38525: NEG
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 2
38533: PUSH
38534: LD_INT 0
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 2
38543: PUSH
38544: LD_INT 1
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 2
38553: PUSH
38554: LD_INT 2
38556: PUSH
38557: EMPTY
38558: LIST
38559: LIST
38560: PUSH
38561: LD_INT 1
38563: PUSH
38564: LD_INT 2
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 0
38573: PUSH
38574: LD_INT 2
38576: PUSH
38577: EMPTY
38578: LIST
38579: LIST
38580: PUSH
38581: LD_INT 1
38583: NEG
38584: PUSH
38585: LD_INT 1
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 2
38594: NEG
38595: PUSH
38596: LD_INT 0
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: PUSH
38603: LD_INT 2
38605: NEG
38606: PUSH
38607: LD_INT 1
38609: NEG
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 2
38617: NEG
38618: PUSH
38619: LD_INT 2
38621: NEG
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38648: LD_ADDR_VAR 0 22
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: LD_INT 0
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 0
38665: PUSH
38666: LD_INT 1
38668: NEG
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 1
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 1
38686: PUSH
38687: LD_INT 1
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: LD_INT 1
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 1
38706: NEG
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: EMPTY
38712: LIST
38713: LIST
38714: PUSH
38715: LD_INT 1
38717: NEG
38718: PUSH
38719: LD_INT 1
38721: NEG
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 1
38729: NEG
38730: PUSH
38731: LD_INT 2
38733: NEG
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 0
38741: PUSH
38742: LD_INT 2
38744: NEG
38745: PUSH
38746: EMPTY
38747: LIST
38748: LIST
38749: PUSH
38750: LD_INT 1
38752: PUSH
38753: LD_INT 1
38755: NEG
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 2
38763: PUSH
38764: LD_INT 0
38766: PUSH
38767: EMPTY
38768: LIST
38769: LIST
38770: PUSH
38771: LD_INT 2
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 2
38783: PUSH
38784: LD_INT 2
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 1
38793: PUSH
38794: LD_INT 2
38796: PUSH
38797: EMPTY
38798: LIST
38799: LIST
38800: PUSH
38801: LD_INT 0
38803: PUSH
38804: LD_INT 2
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 1
38813: NEG
38814: PUSH
38815: LD_INT 1
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 2
38824: NEG
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 2
38835: NEG
38836: PUSH
38837: LD_INT 1
38839: NEG
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: LD_INT 2
38847: NEG
38848: PUSH
38849: LD_INT 2
38851: NEG
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38878: LD_ADDR_VAR 0 23
38882: PUSH
38883: LD_INT 0
38885: PUSH
38886: LD_INT 0
38888: PUSH
38889: EMPTY
38890: LIST
38891: LIST
38892: PUSH
38893: LD_INT 0
38895: PUSH
38896: LD_INT 1
38898: NEG
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 1
38906: PUSH
38907: LD_INT 0
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 1
38916: PUSH
38917: LD_INT 1
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 0
38926: PUSH
38927: LD_INT 1
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 1
38936: NEG
38937: PUSH
38938: LD_INT 0
38940: PUSH
38941: EMPTY
38942: LIST
38943: LIST
38944: PUSH
38945: LD_INT 1
38947: NEG
38948: PUSH
38949: LD_INT 1
38951: NEG
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 1
38959: NEG
38960: PUSH
38961: LD_INT 2
38963: NEG
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: LD_INT 2
38974: NEG
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 1
38982: PUSH
38983: LD_INT 1
38985: NEG
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 2
38993: PUSH
38994: LD_INT 0
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 2
39003: PUSH
39004: LD_INT 1
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 2
39013: PUSH
39014: LD_INT 2
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 1
39023: PUSH
39024: LD_INT 2
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: LD_INT 2
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 1
39043: NEG
39044: PUSH
39045: LD_INT 1
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 2
39054: NEG
39055: PUSH
39056: LD_INT 0
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 2
39065: NEG
39066: PUSH
39067: LD_INT 1
39069: NEG
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: LD_INT 2
39077: NEG
39078: PUSH
39079: LD_INT 2
39081: NEG
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 2
39089: NEG
39090: PUSH
39091: LD_INT 3
39093: NEG
39094: PUSH
39095: EMPTY
39096: LIST
39097: LIST
39098: PUSH
39099: LD_INT 1
39101: NEG
39102: PUSH
39103: LD_INT 3
39105: NEG
39106: PUSH
39107: EMPTY
39108: LIST
39109: LIST
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: LD_INT 2
39116: NEG
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: LD_INT 2
39124: PUSH
39125: LD_INT 1
39127: NEG
39128: PUSH
39129: EMPTY
39130: LIST
39131: LIST
39132: PUSH
39133: EMPTY
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39158: LD_ADDR_VAR 0 24
39162: PUSH
39163: LD_INT 0
39165: PUSH
39166: LD_INT 0
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 0
39175: PUSH
39176: LD_INT 1
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 1
39186: PUSH
39187: LD_INT 0
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: LD_INT 1
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: LD_INT 1
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 1
39216: NEG
39217: PUSH
39218: LD_INT 0
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 1
39227: NEG
39228: PUSH
39229: LD_INT 1
39231: NEG
39232: PUSH
39233: EMPTY
39234: LIST
39235: LIST
39236: PUSH
39237: LD_INT 1
39239: NEG
39240: PUSH
39241: LD_INT 2
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 0
39251: PUSH
39252: LD_INT 2
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: PUSH
39263: LD_INT 1
39265: NEG
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 2
39273: PUSH
39274: LD_INT 0
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 2
39283: PUSH
39284: LD_INT 1
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 2
39293: PUSH
39294: LD_INT 2
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 1
39303: PUSH
39304: LD_INT 2
39306: PUSH
39307: EMPTY
39308: LIST
39309: LIST
39310: PUSH
39311: LD_INT 0
39313: PUSH
39314: LD_INT 2
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 1
39323: NEG
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 2
39334: NEG
39335: PUSH
39336: LD_INT 0
39338: PUSH
39339: EMPTY
39340: LIST
39341: LIST
39342: PUSH
39343: LD_INT 2
39345: NEG
39346: PUSH
39347: LD_INT 1
39349: NEG
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 2
39357: NEG
39358: PUSH
39359: LD_INT 2
39361: NEG
39362: PUSH
39363: EMPTY
39364: LIST
39365: LIST
39366: PUSH
39367: LD_INT 1
39369: PUSH
39370: LD_INT 2
39372: NEG
39373: PUSH
39374: EMPTY
39375: LIST
39376: LIST
39377: PUSH
39378: LD_INT 2
39380: PUSH
39381: LD_INT 1
39383: NEG
39384: PUSH
39385: EMPTY
39386: LIST
39387: LIST
39388: PUSH
39389: LD_INT 3
39391: PUSH
39392: LD_INT 1
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 3
39401: PUSH
39402: LD_INT 2
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: LIST
39422: LIST
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39434: LD_ADDR_VAR 0 25
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 0
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 1
39462: PUSH
39463: LD_INT 0
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 1
39472: PUSH
39473: LD_INT 1
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 0
39482: PUSH
39483: LD_INT 1
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: LD_INT 1
39492: NEG
39493: PUSH
39494: LD_INT 0
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 1
39503: NEG
39504: PUSH
39505: LD_INT 1
39507: NEG
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 1
39515: NEG
39516: PUSH
39517: LD_INT 2
39519: NEG
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: LD_INT 2
39530: NEG
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 1
39538: PUSH
39539: LD_INT 1
39541: NEG
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 2
39549: PUSH
39550: LD_INT 0
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 2
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 2
39569: PUSH
39570: LD_INT 2
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 1
39579: PUSH
39580: LD_INT 2
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: LD_INT 2
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 1
39599: NEG
39600: PUSH
39601: LD_INT 1
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 2
39610: NEG
39611: PUSH
39612: LD_INT 0
39614: PUSH
39615: EMPTY
39616: LIST
39617: LIST
39618: PUSH
39619: LD_INT 2
39621: NEG
39622: PUSH
39623: LD_INT 1
39625: NEG
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 2
39633: NEG
39634: PUSH
39635: LD_INT 2
39637: NEG
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 3
39645: PUSH
39646: LD_INT 1
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 3
39655: PUSH
39656: LD_INT 2
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 2
39665: PUSH
39666: LD_INT 3
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 1
39675: PUSH
39676: LD_INT 3
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: LIST
39701: LIST
39702: LIST
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39708: LD_ADDR_VAR 0 26
39712: PUSH
39713: LD_INT 0
39715: PUSH
39716: LD_INT 0
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 0
39725: PUSH
39726: LD_INT 1
39728: NEG
39729: PUSH
39730: EMPTY
39731: LIST
39732: LIST
39733: PUSH
39734: LD_INT 1
39736: PUSH
39737: LD_INT 0
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 1
39746: PUSH
39747: LD_INT 1
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: LD_INT 1
39759: PUSH
39760: EMPTY
39761: LIST
39762: LIST
39763: PUSH
39764: LD_INT 1
39766: NEG
39767: PUSH
39768: LD_INT 0
39770: PUSH
39771: EMPTY
39772: LIST
39773: LIST
39774: PUSH
39775: LD_INT 1
39777: NEG
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 1
39789: NEG
39790: PUSH
39791: LD_INT 2
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 0
39801: PUSH
39802: LD_INT 2
39804: NEG
39805: PUSH
39806: EMPTY
39807: LIST
39808: LIST
39809: PUSH
39810: LD_INT 1
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 2
39823: PUSH
39824: LD_INT 0
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 2
39833: PUSH
39834: LD_INT 1
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 2
39843: PUSH
39844: LD_INT 2
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 1
39853: PUSH
39854: LD_INT 2
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 0
39863: PUSH
39864: LD_INT 2
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: LD_INT 1
39873: NEG
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 2
39884: NEG
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 2
39895: NEG
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 2
39907: NEG
39908: PUSH
39909: LD_INT 2
39911: NEG
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 2
39919: PUSH
39920: LD_INT 3
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 1
39929: PUSH
39930: LD_INT 3
39932: PUSH
39933: EMPTY
39934: LIST
39935: LIST
39936: PUSH
39937: LD_INT 1
39939: NEG
39940: PUSH
39941: LD_INT 2
39943: PUSH
39944: EMPTY
39945: LIST
39946: LIST
39947: PUSH
39948: LD_INT 2
39950: NEG
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39984: LD_ADDR_VAR 0 27
39988: PUSH
39989: LD_INT 0
39991: PUSH
39992: LD_INT 0
39994: PUSH
39995: EMPTY
39996: LIST
39997: LIST
39998: PUSH
39999: LD_INT 0
40001: PUSH
40002: LD_INT 1
40004: NEG
40005: PUSH
40006: EMPTY
40007: LIST
40008: LIST
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: LD_INT 0
40015: PUSH
40016: EMPTY
40017: LIST
40018: LIST
40019: PUSH
40020: LD_INT 1
40022: PUSH
40023: LD_INT 1
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 0
40032: PUSH
40033: LD_INT 1
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 1
40042: NEG
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 1
40053: NEG
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 1
40065: NEG
40066: PUSH
40067: LD_INT 2
40069: NEG
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 0
40077: PUSH
40078: LD_INT 2
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 1
40088: PUSH
40089: LD_INT 1
40091: NEG
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 2
40099: PUSH
40100: LD_INT 0
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 2
40109: PUSH
40110: LD_INT 1
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 2
40119: PUSH
40120: LD_INT 2
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 1
40129: PUSH
40130: LD_INT 2
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 0
40139: PUSH
40140: LD_INT 2
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 1
40149: NEG
40150: PUSH
40151: LD_INT 1
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 2
40160: NEG
40161: PUSH
40162: LD_INT 0
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 2
40171: NEG
40172: PUSH
40173: LD_INT 1
40175: NEG
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 2
40183: NEG
40184: PUSH
40185: LD_INT 2
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 1
40195: NEG
40196: PUSH
40197: LD_INT 2
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 2
40206: NEG
40207: PUSH
40208: LD_INT 1
40210: PUSH
40211: EMPTY
40212: LIST
40213: LIST
40214: PUSH
40215: LD_INT 3
40217: NEG
40218: PUSH
40219: LD_INT 1
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 3
40229: NEG
40230: PUSH
40231: LD_INT 2
40233: NEG
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: LIST
40258: LIST
40259: LIST
40260: LIST
40261: LIST
40262: LIST
40263: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40264: LD_ADDR_VAR 0 28
40268: PUSH
40269: LD_INT 0
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: EMPTY
40276: LIST
40277: LIST
40278: PUSH
40279: LD_INT 0
40281: PUSH
40282: LD_INT 1
40284: NEG
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PUSH
40290: LD_INT 1
40292: PUSH
40293: LD_INT 0
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 1
40302: PUSH
40303: LD_INT 1
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: LD_INT 0
40312: PUSH
40313: LD_INT 1
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 1
40322: NEG
40323: PUSH
40324: LD_INT 0
40326: PUSH
40327: EMPTY
40328: LIST
40329: LIST
40330: PUSH
40331: LD_INT 1
40333: NEG
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 1
40345: NEG
40346: PUSH
40347: LD_INT 2
40349: NEG
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 0
40357: PUSH
40358: LD_INT 2
40360: NEG
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: PUSH
40366: LD_INT 1
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 2
40379: PUSH
40380: LD_INT 0
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: PUSH
40387: LD_INT 2
40389: PUSH
40390: LD_INT 1
40392: PUSH
40393: EMPTY
40394: LIST
40395: LIST
40396: PUSH
40397: LD_INT 2
40399: PUSH
40400: LD_INT 2
40402: PUSH
40403: EMPTY
40404: LIST
40405: LIST
40406: PUSH
40407: LD_INT 1
40409: PUSH
40410: LD_INT 2
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 0
40419: PUSH
40420: LD_INT 2
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 1
40429: NEG
40430: PUSH
40431: LD_INT 1
40433: PUSH
40434: EMPTY
40435: LIST
40436: LIST
40437: PUSH
40438: LD_INT 2
40440: NEG
40441: PUSH
40442: LD_INT 0
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 2
40451: NEG
40452: PUSH
40453: LD_INT 1
40455: NEG
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 2
40463: NEG
40464: PUSH
40465: LD_INT 2
40467: NEG
40468: PUSH
40469: EMPTY
40470: LIST
40471: LIST
40472: PUSH
40473: LD_INT 2
40475: NEG
40476: PUSH
40477: LD_INT 3
40479: NEG
40480: PUSH
40481: EMPTY
40482: LIST
40483: LIST
40484: PUSH
40485: LD_INT 1
40487: NEG
40488: PUSH
40489: LD_INT 3
40491: NEG
40492: PUSH
40493: EMPTY
40494: LIST
40495: LIST
40496: PUSH
40497: LD_INT 3
40499: NEG
40500: PUSH
40501: LD_INT 1
40503: NEG
40504: PUSH
40505: EMPTY
40506: LIST
40507: LIST
40508: PUSH
40509: LD_INT 3
40511: NEG
40512: PUSH
40513: LD_INT 2
40515: NEG
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40546: LD_ADDR_VAR 0 29
40550: PUSH
40551: LD_INT 0
40553: PUSH
40554: LD_INT 0
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 0
40563: PUSH
40564: LD_INT 1
40566: NEG
40567: PUSH
40568: EMPTY
40569: LIST
40570: LIST
40571: PUSH
40572: LD_INT 1
40574: PUSH
40575: LD_INT 0
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 1
40584: PUSH
40585: LD_INT 1
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 0
40594: PUSH
40595: LD_INT 1
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 1
40604: NEG
40605: PUSH
40606: LD_INT 0
40608: PUSH
40609: EMPTY
40610: LIST
40611: LIST
40612: PUSH
40613: LD_INT 1
40615: NEG
40616: PUSH
40617: LD_INT 1
40619: NEG
40620: PUSH
40621: EMPTY
40622: LIST
40623: LIST
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: LD_INT 2
40631: NEG
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 0
40639: PUSH
40640: LD_INT 2
40642: NEG
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 1
40650: PUSH
40651: LD_INT 1
40653: NEG
40654: PUSH
40655: EMPTY
40656: LIST
40657: LIST
40658: PUSH
40659: LD_INT 2
40661: PUSH
40662: LD_INT 0
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 2
40671: PUSH
40672: LD_INT 1
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 1
40681: PUSH
40682: LD_INT 2
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 0
40691: PUSH
40692: LD_INT 2
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 1
40701: NEG
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 2
40712: NEG
40713: PUSH
40714: LD_INT 1
40716: NEG
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 2
40724: NEG
40725: PUSH
40726: LD_INT 2
40728: NEG
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 2
40736: NEG
40737: PUSH
40738: LD_INT 3
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 2
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 3
40759: PUSH
40760: LD_INT 1
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: LD_INT 3
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 1
40779: NEG
40780: PUSH
40781: LD_INT 2
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 3
40790: NEG
40791: PUSH
40792: LD_INT 2
40794: NEG
40795: PUSH
40796: EMPTY
40797: LIST
40798: LIST
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: LIST
40814: LIST
40815: LIST
40816: LIST
40817: LIST
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40825: LD_ADDR_VAR 0 30
40829: PUSH
40830: LD_INT 0
40832: PUSH
40833: LD_INT 0
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 0
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 1
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 1
40894: NEG
40895: PUSH
40896: LD_INT 1
40898: NEG
40899: PUSH
40900: EMPTY
40901: LIST
40902: LIST
40903: PUSH
40904: LD_INT 1
40906: NEG
40907: PUSH
40908: LD_INT 2
40910: NEG
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: LD_INT 2
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 1
40929: PUSH
40930: LD_INT 1
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 2
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 2
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 2
40960: PUSH
40961: LD_INT 2
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 1
40970: PUSH
40971: LD_INT 2
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 1
40980: NEG
40981: PUSH
40982: LD_INT 1
40984: PUSH
40985: EMPTY
40986: LIST
40987: LIST
40988: PUSH
40989: LD_INT 2
40991: NEG
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 2
41002: NEG
41003: PUSH
41004: LD_INT 1
41006: NEG
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 1
41014: NEG
41015: PUSH
41016: LD_INT 3
41018: NEG
41019: PUSH
41020: EMPTY
41021: LIST
41022: LIST
41023: PUSH
41024: LD_INT 1
41026: PUSH
41027: LD_INT 2
41029: NEG
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: PUSH
41035: LD_INT 3
41037: PUSH
41038: LD_INT 2
41040: PUSH
41041: EMPTY
41042: LIST
41043: LIST
41044: PUSH
41045: LD_INT 2
41047: PUSH
41048: LD_INT 3
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 2
41057: NEG
41058: PUSH
41059: LD_INT 1
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 3
41068: NEG
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41103: LD_ADDR_VAR 0 31
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: LD_INT 0
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 0
41120: PUSH
41121: LD_INT 1
41123: NEG
41124: PUSH
41125: EMPTY
41126: LIST
41127: LIST
41128: PUSH
41129: LD_INT 1
41131: PUSH
41132: LD_INT 0
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: LD_INT 1
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 0
41151: PUSH
41152: LD_INT 1
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: NEG
41162: PUSH
41163: LD_INT 0
41165: PUSH
41166: EMPTY
41167: LIST
41168: LIST
41169: PUSH
41170: LD_INT 1
41172: NEG
41173: PUSH
41174: LD_INT 1
41176: NEG
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PUSH
41186: LD_INT 2
41188: NEG
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 1
41196: PUSH
41197: LD_INT 1
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 2
41207: PUSH
41208: LD_INT 0
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 2
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 2
41227: PUSH
41228: LD_INT 2
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 1
41237: PUSH
41238: LD_INT 2
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 0
41247: PUSH
41248: LD_INT 2
41250: PUSH
41251: EMPTY
41252: LIST
41253: LIST
41254: PUSH
41255: LD_INT 1
41257: NEG
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 2
41268: NEG
41269: PUSH
41270: LD_INT 1
41272: NEG
41273: PUSH
41274: EMPTY
41275: LIST
41276: LIST
41277: PUSH
41278: LD_INT 2
41280: NEG
41281: PUSH
41282: LD_INT 2
41284: NEG
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 2
41292: NEG
41293: PUSH
41294: LD_INT 3
41296: NEG
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 2
41304: PUSH
41305: LD_INT 1
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 3
41315: PUSH
41316: LD_INT 1
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: LD_INT 3
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: LD_INT 2
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 3
41346: NEG
41347: PUSH
41348: LD_INT 2
41350: NEG
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: EMPTY
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41381: LD_ADDR_VAR 0 32
41385: PUSH
41386: LD_INT 0
41388: PUSH
41389: LD_INT 0
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: LD_INT 0
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 1
41409: PUSH
41410: LD_INT 0
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 1
41419: PUSH
41420: LD_INT 1
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 0
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 1
41439: NEG
41440: PUSH
41441: LD_INT 0
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: LD_INT 1
41454: NEG
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: PUSH
41460: LD_INT 1
41462: NEG
41463: PUSH
41464: LD_INT 2
41466: NEG
41467: PUSH
41468: EMPTY
41469: LIST
41470: LIST
41471: PUSH
41472: LD_INT 0
41474: PUSH
41475: LD_INT 2
41477: NEG
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: PUSH
41486: LD_INT 1
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 2
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 2
41506: PUSH
41507: LD_INT 2
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 1
41516: PUSH
41517: LD_INT 2
41519: PUSH
41520: EMPTY
41521: LIST
41522: LIST
41523: PUSH
41524: LD_INT 0
41526: PUSH
41527: LD_INT 2
41529: PUSH
41530: EMPTY
41531: LIST
41532: LIST
41533: PUSH
41534: LD_INT 1
41536: NEG
41537: PUSH
41538: LD_INT 1
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 2
41547: NEG
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: EMPTY
41553: LIST
41554: LIST
41555: PUSH
41556: LD_INT 2
41558: NEG
41559: PUSH
41560: LD_INT 1
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 1
41570: NEG
41571: PUSH
41572: LD_INT 3
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: PUSH
41583: LD_INT 2
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 3
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 2
41603: PUSH
41604: LD_INT 3
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 2
41613: NEG
41614: PUSH
41615: LD_INT 1
41617: PUSH
41618: EMPTY
41619: LIST
41620: LIST
41621: PUSH
41622: LD_INT 3
41624: NEG
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: EMPTY
41631: LIST
41632: LIST
41633: PUSH
41634: EMPTY
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41659: LD_ADDR_VAR 0 33
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: LD_INT 0
41669: PUSH
41670: EMPTY
41671: LIST
41672: LIST
41673: PUSH
41674: LD_INT 0
41676: PUSH
41677: LD_INT 1
41679: NEG
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 1
41687: PUSH
41688: LD_INT 0
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 1
41697: PUSH
41698: LD_INT 1
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 0
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: NEG
41718: PUSH
41719: LD_INT 0
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: LD_INT 1
41732: NEG
41733: PUSH
41734: EMPTY
41735: LIST
41736: LIST
41737: PUSH
41738: LD_INT 1
41740: NEG
41741: PUSH
41742: LD_INT 2
41744: NEG
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 1
41752: PUSH
41753: LD_INT 1
41755: NEG
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 2
41763: PUSH
41764: LD_INT 0
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 2
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: LD_INT 2
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 0
41793: PUSH
41794: LD_INT 2
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 1
41803: NEG
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 2
41814: NEG
41815: PUSH
41816: LD_INT 0
41818: PUSH
41819: EMPTY
41820: LIST
41821: LIST
41822: PUSH
41823: LD_INT 2
41825: NEG
41826: PUSH
41827: LD_INT 1
41829: NEG
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 2
41837: NEG
41838: PUSH
41839: LD_INT 2
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 2
41849: NEG
41850: PUSH
41851: LD_INT 3
41853: NEG
41854: PUSH
41855: EMPTY
41856: LIST
41857: LIST
41858: PUSH
41859: LD_INT 2
41861: PUSH
41862: LD_INT 1
41864: NEG
41865: PUSH
41866: EMPTY
41867: LIST
41868: LIST
41869: PUSH
41870: LD_INT 3
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: PUSH
41880: LD_INT 1
41882: PUSH
41883: LD_INT 3
41885: PUSH
41886: EMPTY
41887: LIST
41888: LIST
41889: PUSH
41890: LD_INT 1
41892: NEG
41893: PUSH
41894: LD_INT 2
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 3
41903: NEG
41904: PUSH
41905: LD_INT 2
41907: NEG
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: LIST
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41938: LD_ADDR_VAR 0 34
41942: PUSH
41943: LD_INT 0
41945: PUSH
41946: LD_INT 0
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 0
41955: PUSH
41956: LD_INT 1
41958: NEG
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 1
41966: PUSH
41967: LD_INT 0
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: PUSH
41977: LD_INT 1
41979: PUSH
41980: EMPTY
41981: LIST
41982: LIST
41983: PUSH
41984: LD_INT 0
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: EMPTY
41991: LIST
41992: LIST
41993: PUSH
41994: LD_INT 1
41996: NEG
41997: PUSH
41998: LD_INT 0
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 1
42007: NEG
42008: PUSH
42009: LD_INT 1
42011: NEG
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: LD_INT 2
42023: NEG
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 0
42031: PUSH
42032: LD_INT 2
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 2
42053: PUSH
42054: LD_INT 1
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 2
42063: PUSH
42064: LD_INT 2
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: LD_INT 1
42073: PUSH
42074: LD_INT 2
42076: PUSH
42077: EMPTY
42078: LIST
42079: LIST
42080: PUSH
42081: LD_INT 1
42083: NEG
42084: PUSH
42085: LD_INT 1
42087: PUSH
42088: EMPTY
42089: LIST
42090: LIST
42091: PUSH
42092: LD_INT 2
42094: NEG
42095: PUSH
42096: LD_INT 0
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: PUSH
42103: LD_INT 2
42105: NEG
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 2
42117: NEG
42118: PUSH
42119: LD_INT 2
42121: NEG
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 1
42129: NEG
42130: PUSH
42131: LD_INT 3
42133: NEG
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: PUSH
42142: LD_INT 2
42144: NEG
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 3
42152: PUSH
42153: LD_INT 2
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 2
42162: PUSH
42163: LD_INT 3
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 2
42172: NEG
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 3
42183: NEG
42184: PUSH
42185: LD_INT 1
42187: NEG
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: EMPTY
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: LIST
42206: LIST
42207: LIST
42208: LIST
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42218: LD_ADDR_VAR 0 35
42222: PUSH
42223: LD_INT 0
42225: PUSH
42226: LD_INT 0
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 0
42235: PUSH
42236: LD_INT 1
42238: NEG
42239: PUSH
42240: EMPTY
42241: LIST
42242: LIST
42243: PUSH
42244: LD_INT 1
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: EMPTY
42251: LIST
42252: LIST
42253: PUSH
42254: LD_INT 1
42256: PUSH
42257: LD_INT 1
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 0
42266: PUSH
42267: LD_INT 1
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 1
42276: NEG
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 1
42287: NEG
42288: PUSH
42289: LD_INT 1
42291: NEG
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 2
42299: PUSH
42300: LD_INT 1
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 2
42309: NEG
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: EMPTY
42320: LIST
42321: LIST
42322: LIST
42323: LIST
42324: LIST
42325: LIST
42326: LIST
42327: LIST
42328: LIST
42329: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42330: LD_ADDR_VAR 0 36
42334: PUSH
42335: LD_INT 0
42337: PUSH
42338: LD_INT 0
42340: PUSH
42341: EMPTY
42342: LIST
42343: LIST
42344: PUSH
42345: LD_INT 0
42347: PUSH
42348: LD_INT 1
42350: NEG
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 1
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 0
42378: PUSH
42379: LD_INT 1
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 1
42388: NEG
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 1
42399: NEG
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: NEG
42412: PUSH
42413: LD_INT 2
42415: NEG
42416: PUSH
42417: EMPTY
42418: LIST
42419: LIST
42420: PUSH
42421: LD_INT 1
42423: PUSH
42424: LD_INT 2
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: LIST
42435: LIST
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42442: LD_ADDR_VAR 0 37
42446: PUSH
42447: LD_INT 0
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 0
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 1
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 1
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: LD_INT 0
42490: PUSH
42491: LD_INT 1
42493: PUSH
42494: EMPTY
42495: LIST
42496: LIST
42497: PUSH
42498: LD_INT 1
42500: NEG
42501: PUSH
42502: LD_INT 0
42504: PUSH
42505: EMPTY
42506: LIST
42507: LIST
42508: PUSH
42509: LD_INT 1
42511: NEG
42512: PUSH
42513: LD_INT 1
42515: NEG
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: NEG
42535: PUSH
42536: LD_INT 1
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42554: LD_ADDR_VAR 0 38
42558: PUSH
42559: LD_INT 0
42561: PUSH
42562: LD_INT 0
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 1
42592: PUSH
42593: LD_INT 1
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 0
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 1
42612: NEG
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: EMPTY
42618: LIST
42619: LIST
42620: PUSH
42621: LD_INT 1
42623: NEG
42624: PUSH
42625: LD_INT 1
42627: NEG
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 2
42635: PUSH
42636: LD_INT 1
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 2
42645: NEG
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42666: LD_ADDR_VAR 0 39
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 0
42683: PUSH
42684: LD_INT 1
42686: NEG
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 1
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 0
42714: PUSH
42715: LD_INT 1
42717: PUSH
42718: EMPTY
42719: LIST
42720: LIST
42721: PUSH
42722: LD_INT 1
42724: NEG
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 1
42735: NEG
42736: PUSH
42737: LD_INT 1
42739: NEG
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: LD_INT 2
42751: NEG
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 1
42759: PUSH
42760: LD_INT 2
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42778: LD_ADDR_VAR 0 40
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: LD_INT 0
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 0
42795: PUSH
42796: LD_INT 1
42798: NEG
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 1
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 0
42826: PUSH
42827: LD_INT 1
42829: PUSH
42830: EMPTY
42831: LIST
42832: LIST
42833: PUSH
42834: LD_INT 1
42836: NEG
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: LD_INT 1
42851: NEG
42852: PUSH
42853: EMPTY
42854: LIST
42855: LIST
42856: PUSH
42857: LD_INT 1
42859: PUSH
42860: LD_INT 1
42862: NEG
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: LD_INT 1
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42890: LD_ADDR_VAR 0 41
42894: PUSH
42895: LD_INT 0
42897: PUSH
42898: LD_INT 0
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 0
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 1
42918: PUSH
42919: LD_INT 0
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 1
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 0
42938: PUSH
42939: LD_INT 1
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 1
42948: NEG
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: EMPTY
42954: LIST
42955: LIST
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: LD_INT 1
42963: NEG
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 1
42971: NEG
42972: PUSH
42973: LD_INT 2
42975: NEG
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: LD_INT 1
42983: PUSH
42984: LD_INT 1
42986: NEG
42987: PUSH
42988: EMPTY
42989: LIST
42990: LIST
42991: PUSH
42992: LD_INT 2
42994: PUSH
42995: LD_INT 0
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 2
43004: PUSH
43005: LD_INT 1
43007: PUSH
43008: EMPTY
43009: LIST
43010: LIST
43011: PUSH
43012: LD_INT 2
43014: PUSH
43015: LD_INT 2
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 1
43024: PUSH
43025: LD_INT 2
43027: PUSH
43028: EMPTY
43029: LIST
43030: LIST
43031: PUSH
43032: LD_INT 1
43034: NEG
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: EMPTY
43040: LIST
43041: LIST
43042: PUSH
43043: LD_INT 2
43045: NEG
43046: PUSH
43047: LD_INT 0
43049: PUSH
43050: EMPTY
43051: LIST
43052: LIST
43053: PUSH
43054: LD_INT 2
43056: NEG
43057: PUSH
43058: LD_INT 1
43060: NEG
43061: PUSH
43062: EMPTY
43063: LIST
43064: LIST
43065: PUSH
43066: LD_INT 2
43068: NEG
43069: PUSH
43070: LD_INT 2
43072: NEG
43073: PUSH
43074: EMPTY
43075: LIST
43076: LIST
43077: PUSH
43078: LD_INT 2
43080: NEG
43081: PUSH
43082: LD_INT 3
43084: NEG
43085: PUSH
43086: EMPTY
43087: LIST
43088: LIST
43089: PUSH
43090: LD_INT 2
43092: PUSH
43093: LD_INT 1
43095: NEG
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 3
43103: PUSH
43104: LD_INT 0
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 3
43113: PUSH
43114: LD_INT 1
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 3
43123: PUSH
43124: LD_INT 2
43126: PUSH
43127: EMPTY
43128: LIST
43129: LIST
43130: PUSH
43131: LD_INT 3
43133: PUSH
43134: LD_INT 3
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 2
43143: PUSH
43144: LD_INT 3
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 2
43153: NEG
43154: PUSH
43155: LD_INT 1
43157: PUSH
43158: EMPTY
43159: LIST
43160: LIST
43161: PUSH
43162: LD_INT 3
43164: NEG
43165: PUSH
43166: LD_INT 0
43168: PUSH
43169: EMPTY
43170: LIST
43171: LIST
43172: PUSH
43173: LD_INT 3
43175: NEG
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 3
43187: NEG
43188: PUSH
43189: LD_INT 2
43191: NEG
43192: PUSH
43193: EMPTY
43194: LIST
43195: LIST
43196: PUSH
43197: LD_INT 3
43199: NEG
43200: PUSH
43201: LD_INT 3
43203: NEG
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: EMPTY
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43240: LD_ADDR_VAR 0 42
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: PUSH
43311: LD_INT 1
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 1
43321: NEG
43322: PUSH
43323: LD_INT 2
43325: NEG
43326: PUSH
43327: EMPTY
43328: LIST
43329: LIST
43330: PUSH
43331: LD_INT 0
43333: PUSH
43334: LD_INT 2
43336: NEG
43337: PUSH
43338: EMPTY
43339: LIST
43340: LIST
43341: PUSH
43342: LD_INT 1
43344: PUSH
43345: LD_INT 1
43347: NEG
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 2
43355: PUSH
43356: LD_INT 1
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 2
43365: PUSH
43366: LD_INT 2
43368: PUSH
43369: EMPTY
43370: LIST
43371: LIST
43372: PUSH
43373: LD_INT 1
43375: PUSH
43376: LD_INT 2
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PUSH
43383: LD_INT 0
43385: PUSH
43386: LD_INT 2
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 1
43395: NEG
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 2
43406: NEG
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 2
43418: NEG
43419: PUSH
43420: LD_INT 2
43422: NEG
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 2
43430: NEG
43431: PUSH
43432: LD_INT 3
43434: NEG
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 1
43442: NEG
43443: PUSH
43444: LD_INT 3
43446: NEG
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 0
43454: PUSH
43455: LD_INT 3
43457: NEG
43458: PUSH
43459: EMPTY
43460: LIST
43461: LIST
43462: PUSH
43463: LD_INT 1
43465: PUSH
43466: LD_INT 2
43468: NEG
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 3
43476: PUSH
43477: LD_INT 2
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 3
43486: PUSH
43487: LD_INT 3
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: LD_INT 3
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 1
43506: PUSH
43507: LD_INT 3
43509: PUSH
43510: EMPTY
43511: LIST
43512: LIST
43513: PUSH
43514: LD_INT 0
43516: PUSH
43517: LD_INT 3
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 1
43526: NEG
43527: PUSH
43528: LD_INT 2
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 3
43537: NEG
43538: PUSH
43539: LD_INT 2
43541: NEG
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 3
43549: NEG
43550: PUSH
43551: LD_INT 3
43553: NEG
43554: PUSH
43555: EMPTY
43556: LIST
43557: LIST
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43590: LD_ADDR_VAR 0 43
43594: PUSH
43595: LD_INT 0
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: LD_INT 1
43610: NEG
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: LD_INT 0
43621: PUSH
43622: EMPTY
43623: LIST
43624: LIST
43625: PUSH
43626: LD_INT 1
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: EMPTY
43633: LIST
43634: LIST
43635: PUSH
43636: LD_INT 0
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: EMPTY
43643: LIST
43644: LIST
43645: PUSH
43646: LD_INT 1
43648: NEG
43649: PUSH
43650: LD_INT 0
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 1
43659: NEG
43660: PUSH
43661: LD_INT 1
43663: NEG
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 1
43671: NEG
43672: PUSH
43673: LD_INT 2
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 2
43686: NEG
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: LD_INT 1
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 2
43705: PUSH
43706: LD_INT 0
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: LD_INT 1
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 1
43725: PUSH
43726: LD_INT 2
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 0
43735: PUSH
43736: LD_INT 2
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: LD_INT 1
43749: PUSH
43750: EMPTY
43751: LIST
43752: LIST
43753: PUSH
43754: LD_INT 2
43756: NEG
43757: PUSH
43758: LD_INT 0
43760: PUSH
43761: EMPTY
43762: LIST
43763: LIST
43764: PUSH
43765: LD_INT 2
43767: NEG
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: PUSH
43777: LD_INT 1
43779: NEG
43780: PUSH
43781: LD_INT 3
43783: NEG
43784: PUSH
43785: EMPTY
43786: LIST
43787: LIST
43788: PUSH
43789: LD_INT 0
43791: PUSH
43792: LD_INT 3
43794: NEG
43795: PUSH
43796: EMPTY
43797: LIST
43798: LIST
43799: PUSH
43800: LD_INT 1
43802: PUSH
43803: LD_INT 2
43805: NEG
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: LD_INT 2
43813: PUSH
43814: LD_INT 1
43816: NEG
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 3
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 3
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: EMPTY
43839: LIST
43840: LIST
43841: PUSH
43842: LD_INT 1
43844: PUSH
43845: LD_INT 3
43847: PUSH
43848: EMPTY
43849: LIST
43850: LIST
43851: PUSH
43852: LD_INT 0
43854: PUSH
43855: LD_INT 3
43857: PUSH
43858: EMPTY
43859: LIST
43860: LIST
43861: PUSH
43862: LD_INT 1
43864: NEG
43865: PUSH
43866: LD_INT 2
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 2
43875: NEG
43876: PUSH
43877: LD_INT 1
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 3
43886: NEG
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 3
43897: NEG
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43938: LD_ADDR_VAR 0 44
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: LD_INT 0
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: LD_INT 1
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: LD_INT 1
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 0
43986: PUSH
43987: LD_INT 1
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: PUSH
43994: LD_INT 1
43996: NEG
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 1
44007: NEG
44008: PUSH
44009: LD_INT 1
44011: NEG
44012: PUSH
44013: EMPTY
44014: LIST
44015: LIST
44016: PUSH
44017: LD_INT 1
44019: NEG
44020: PUSH
44021: LD_INT 2
44023: NEG
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 1
44031: PUSH
44032: LD_INT 1
44034: NEG
44035: PUSH
44036: EMPTY
44037: LIST
44038: LIST
44039: PUSH
44040: LD_INT 2
44042: PUSH
44043: LD_INT 0
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 2
44052: PUSH
44053: LD_INT 1
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 2
44062: PUSH
44063: LD_INT 2
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 1
44072: PUSH
44073: LD_INT 2
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 2
44093: NEG
44094: PUSH
44095: LD_INT 0
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 2
44104: NEG
44105: PUSH
44106: LD_INT 1
44108: NEG
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 2
44116: NEG
44117: PUSH
44118: LD_INT 2
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 2
44128: NEG
44129: PUSH
44130: LD_INT 3
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 2
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: EMPTY
44146: LIST
44147: LIST
44148: PUSH
44149: LD_INT 3
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 3
44161: PUSH
44162: LD_INT 1
44164: PUSH
44165: EMPTY
44166: LIST
44167: LIST
44168: PUSH
44169: LD_INT 3
44171: PUSH
44172: LD_INT 2
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 3
44181: PUSH
44182: LD_INT 3
44184: PUSH
44185: EMPTY
44186: LIST
44187: LIST
44188: PUSH
44189: LD_INT 2
44191: PUSH
44192: LD_INT 3
44194: PUSH
44195: EMPTY
44196: LIST
44197: LIST
44198: PUSH
44199: LD_INT 2
44201: NEG
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: EMPTY
44207: LIST
44208: LIST
44209: PUSH
44210: LD_INT 3
44212: NEG
44213: PUSH
44214: LD_INT 0
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 3
44223: NEG
44224: PUSH
44225: LD_INT 1
44227: NEG
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 3
44235: NEG
44236: PUSH
44237: LD_INT 2
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 3
44247: NEG
44248: PUSH
44249: LD_INT 3
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: EMPTY
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44288: LD_ADDR_VAR 0 45
44292: PUSH
44293: LD_INT 0
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: LD_INT 1
44308: NEG
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 1
44316: PUSH
44317: LD_INT 0
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 1
44346: NEG
44347: PUSH
44348: LD_INT 0
44350: PUSH
44351: EMPTY
44352: LIST
44353: LIST
44354: PUSH
44355: LD_INT 1
44357: NEG
44358: PUSH
44359: LD_INT 1
44361: NEG
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: NEG
44370: PUSH
44371: LD_INT 2
44373: NEG
44374: PUSH
44375: EMPTY
44376: LIST
44377: LIST
44378: PUSH
44379: LD_INT 0
44381: PUSH
44382: LD_INT 2
44384: NEG
44385: PUSH
44386: EMPTY
44387: LIST
44388: LIST
44389: PUSH
44390: LD_INT 1
44392: PUSH
44393: LD_INT 1
44395: NEG
44396: PUSH
44397: EMPTY
44398: LIST
44399: LIST
44400: PUSH
44401: LD_INT 2
44403: PUSH
44404: LD_INT 1
44406: PUSH
44407: EMPTY
44408: LIST
44409: LIST
44410: PUSH
44411: LD_INT 2
44413: PUSH
44414: LD_INT 2
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: PUSH
44424: LD_INT 2
44426: PUSH
44427: EMPTY
44428: LIST
44429: LIST
44430: PUSH
44431: LD_INT 0
44433: PUSH
44434: LD_INT 2
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: LD_INT 1
44447: PUSH
44448: EMPTY
44449: LIST
44450: LIST
44451: PUSH
44452: LD_INT 2
44454: NEG
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 2
44466: NEG
44467: PUSH
44468: LD_INT 2
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 2
44478: NEG
44479: PUSH
44480: LD_INT 3
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 1
44490: NEG
44491: PUSH
44492: LD_INT 3
44494: NEG
44495: PUSH
44496: EMPTY
44497: LIST
44498: LIST
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: LD_INT 3
44505: NEG
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 1
44513: PUSH
44514: LD_INT 2
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 3
44524: PUSH
44525: LD_INT 2
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 3
44534: PUSH
44535: LD_INT 3
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 2
44544: PUSH
44545: LD_INT 3
44547: PUSH
44548: EMPTY
44549: LIST
44550: LIST
44551: PUSH
44552: LD_INT 1
44554: PUSH
44555: LD_INT 3
44557: PUSH
44558: EMPTY
44559: LIST
44560: LIST
44561: PUSH
44562: LD_INT 0
44564: PUSH
44565: LD_INT 3
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 1
44574: NEG
44575: PUSH
44576: LD_INT 2
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 3
44585: NEG
44586: PUSH
44587: LD_INT 2
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 3
44597: NEG
44598: PUSH
44599: LD_INT 3
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44638: LD_ADDR_VAR 0 46
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: LD_INT 0
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 1
44666: PUSH
44667: LD_INT 0
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: LD_INT 1
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: LD_INT 0
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: PUSH
44705: LD_INT 1
44707: NEG
44708: PUSH
44709: LD_INT 1
44711: NEG
44712: PUSH
44713: EMPTY
44714: LIST
44715: LIST
44716: PUSH
44717: LD_INT 1
44719: NEG
44720: PUSH
44721: LD_INT 2
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 0
44731: PUSH
44732: LD_INT 2
44734: NEG
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 1
44742: PUSH
44743: LD_INT 1
44745: NEG
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 2
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 1
44793: NEG
44794: PUSH
44795: LD_INT 1
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 2
44804: NEG
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 2
44815: NEG
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 1
44827: NEG
44828: PUSH
44829: LD_INT 3
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: LD_INT 3
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: LD_INT 2
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 2
44861: PUSH
44862: LD_INT 1
44864: NEG
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 3
44872: PUSH
44873: LD_INT 0
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 3
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: LD_INT 3
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: LD_INT 3
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: LD_INT 2
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 2
44923: NEG
44924: PUSH
44925: LD_INT 1
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 3
44934: NEG
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 3
44945: NEG
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44986: LD_ADDR_VAR 0 47
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: LD_INT 0
44996: PUSH
44997: EMPTY
44998: LIST
44999: LIST
45000: PUSH
45001: LD_INT 0
45003: PUSH
45004: LD_INT 1
45006: NEG
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: LD_INT 1
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 1
45044: NEG
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: EMPTY
45050: LIST
45051: LIST
45052: PUSH
45053: LD_INT 1
45055: NEG
45056: PUSH
45057: LD_INT 1
45059: NEG
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: LD_INT 2
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 0
45079: PUSH
45080: LD_INT 2
45082: NEG
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 1
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 2
45101: NEG
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 2
45113: NEG
45114: PUSH
45115: LD_INT 2
45117: NEG
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45137: LD_ADDR_VAR 0 48
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: LD_INT 0
45147: PUSH
45148: EMPTY
45149: LIST
45150: LIST
45151: PUSH
45152: LD_INT 0
45154: PUSH
45155: LD_INT 1
45157: NEG
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 1
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: PUSH
45176: LD_INT 1
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: LD_INT 1
45188: PUSH
45189: EMPTY
45190: LIST
45191: LIST
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: NEG
45219: PUSH
45220: LD_INT 2
45222: NEG
45223: PUSH
45224: EMPTY
45225: LIST
45226: LIST
45227: PUSH
45228: LD_INT 0
45230: PUSH
45231: LD_INT 2
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 2
45252: PUSH
45253: LD_INT 0
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 2
45262: PUSH
45263: LD_INT 1
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: EMPTY
45271: LIST
45272: LIST
45273: LIST
45274: LIST
45275: LIST
45276: LIST
45277: LIST
45278: LIST
45279: LIST
45280: LIST
45281: LIST
45282: LIST
45283: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45284: LD_ADDR_VAR 0 49
45288: PUSH
45289: LD_INT 0
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: LD_INT 1
45304: NEG
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: PUSH
45313: LD_INT 0
45315: PUSH
45316: EMPTY
45317: LIST
45318: LIST
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: LD_INT 1
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 0
45332: PUSH
45333: LD_INT 1
45335: PUSH
45336: EMPTY
45337: LIST
45338: LIST
45339: PUSH
45340: LD_INT 1
45342: NEG
45343: PUSH
45344: LD_INT 0
45346: PUSH
45347: EMPTY
45348: LIST
45349: LIST
45350: PUSH
45351: LD_INT 1
45353: NEG
45354: PUSH
45355: LD_INT 1
45357: NEG
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 1
45365: PUSH
45366: LD_INT 1
45368: NEG
45369: PUSH
45370: EMPTY
45371: LIST
45372: LIST
45373: PUSH
45374: LD_INT 2
45376: PUSH
45377: LD_INT 0
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 2
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 2
45396: PUSH
45397: LD_INT 2
45399: PUSH
45400: EMPTY
45401: LIST
45402: LIST
45403: PUSH
45404: LD_INT 1
45406: PUSH
45407: LD_INT 2
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45428: LD_ADDR_VAR 0 50
45432: PUSH
45433: LD_INT 0
45435: PUSH
45436: LD_INT 0
45438: PUSH
45439: EMPTY
45440: LIST
45441: LIST
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: LD_INT 1
45448: NEG
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 1
45466: PUSH
45467: LD_INT 1
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: LD_INT 1
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 1
45486: NEG
45487: PUSH
45488: LD_INT 0
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: LD_INT 1
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 2
45509: PUSH
45510: LD_INT 1
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: PUSH
45520: LD_INT 2
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: LD_INT 2
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: LD_INT 2
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: LD_INT 1
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: EMPTY
45559: LIST
45560: LIST
45561: LIST
45562: LIST
45563: LIST
45564: LIST
45565: LIST
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
45572: LD_ADDR_VAR 0 51
45576: PUSH
45577: LD_INT 0
45579: PUSH
45580: LD_INT 0
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: LD_INT 1
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: LD_INT 0
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: NEG
45642: PUSH
45643: LD_INT 1
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 1
45653: PUSH
45654: LD_INT 2
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 0
45663: PUSH
45664: LD_INT 2
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: NEG
45674: PUSH
45675: LD_INT 1
45677: PUSH
45678: EMPTY
45679: LIST
45680: LIST
45681: PUSH
45682: LD_INT 2
45684: NEG
45685: PUSH
45686: LD_INT 0
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 2
45695: NEG
45696: PUSH
45697: LD_INT 1
45699: NEG
45700: PUSH
45701: EMPTY
45702: LIST
45703: LIST
45704: PUSH
45705: EMPTY
45706: LIST
45707: LIST
45708: LIST
45709: LIST
45710: LIST
45711: LIST
45712: LIST
45713: LIST
45714: LIST
45715: LIST
45716: LIST
45717: LIST
45718: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45719: LD_ADDR_VAR 0 52
45723: PUSH
45724: LD_INT 0
45726: PUSH
45727: LD_INT 0
45729: PUSH
45730: EMPTY
45731: LIST
45732: LIST
45733: PUSH
45734: LD_INT 0
45736: PUSH
45737: LD_INT 1
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: LD_INT 0
45750: PUSH
45751: EMPTY
45752: LIST
45753: LIST
45754: PUSH
45755: LD_INT 1
45757: PUSH
45758: LD_INT 1
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: NEG
45789: PUSH
45790: LD_INT 1
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: LD_INT 2
45804: NEG
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 1
45812: NEG
45813: PUSH
45814: LD_INT 1
45816: PUSH
45817: EMPTY
45818: LIST
45819: LIST
45820: PUSH
45821: LD_INT 2
45823: NEG
45824: PUSH
45825: LD_INT 0
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 2
45834: NEG
45835: PUSH
45836: LD_INT 1
45838: NEG
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: LD_INT 2
45846: NEG
45847: PUSH
45848: LD_INT 2
45850: NEG
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45870: LD_ADDR_VAR 0 53
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 0
45887: PUSH
45888: LD_INT 1
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: EMPTY
45903: LIST
45904: LIST
45905: PUSH
45906: LD_INT 1
45908: PUSH
45909: LD_INT 1
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 0
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: NEG
45929: PUSH
45930: LD_INT 0
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 1
45939: NEG
45940: PUSH
45941: LD_INT 1
45943: NEG
45944: PUSH
45945: EMPTY
45946: LIST
45947: LIST
45948: PUSH
45949: LD_INT 1
45951: NEG
45952: PUSH
45953: LD_INT 2
45955: NEG
45956: PUSH
45957: EMPTY
45958: LIST
45959: LIST
45960: PUSH
45961: LD_INT 0
45963: PUSH
45964: LD_INT 2
45966: NEG
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: EMPTY
45980: LIST
45981: LIST
45982: PUSH
45983: LD_INT 2
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 2
45995: PUSH
45996: LD_INT 1
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 2
46005: PUSH
46006: LD_INT 2
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: LD_INT 2
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: LD_INT 2
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 1
46035: NEG
46036: PUSH
46037: LD_INT 1
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 2
46046: NEG
46047: PUSH
46048: LD_INT 0
46050: PUSH
46051: EMPTY
46052: LIST
46053: LIST
46054: PUSH
46055: LD_INT 2
46057: NEG
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: EMPTY
46064: LIST
46065: LIST
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: LD_INT 2
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: EMPTY
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: LIST
46095: LIST
46096: LIST
46097: LIST
46098: LIST
46099: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46100: LD_ADDR_VAR 0 54
46104: PUSH
46105: LD_INT 0
46107: PUSH
46108: LD_INT 0
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: LD_INT 1
46120: NEG
46121: PUSH
46122: EMPTY
46123: LIST
46124: LIST
46125: PUSH
46126: LD_INT 1
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 1
46138: PUSH
46139: LD_INT 1
46141: PUSH
46142: EMPTY
46143: LIST
46144: LIST
46145: PUSH
46146: LD_INT 0
46148: PUSH
46149: LD_INT 1
46151: PUSH
46152: EMPTY
46153: LIST
46154: LIST
46155: PUSH
46156: LD_INT 1
46158: NEG
46159: PUSH
46160: LD_INT 0
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: LD_INT 1
46169: NEG
46170: PUSH
46171: LD_INT 1
46173: NEG
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: LD_INT 2
46185: NEG
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: PUSH
46191: LD_INT 0
46193: PUSH
46194: LD_INT 2
46196: NEG
46197: PUSH
46198: EMPTY
46199: LIST
46200: LIST
46201: PUSH
46202: LD_INT 1
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 2
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: EMPTY
46220: LIST
46221: LIST
46222: PUSH
46223: LD_INT 2
46225: PUSH
46226: LD_INT 1
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 2
46235: PUSH
46236: LD_INT 2
46238: PUSH
46239: EMPTY
46240: LIST
46241: LIST
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: LD_INT 2
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: LD_INT 2
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: LD_INT 1
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: NEG
46277: PUSH
46278: LD_INT 0
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 2
46287: NEG
46288: PUSH
46289: LD_INT 1
46291: NEG
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 2
46299: NEG
46300: PUSH
46301: LD_INT 2
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46330: LD_ADDR_VAR 0 55
46334: PUSH
46335: LD_INT 0
46337: PUSH
46338: LD_INT 0
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: LD_INT 0
46347: PUSH
46348: LD_INT 1
46350: NEG
46351: PUSH
46352: EMPTY
46353: LIST
46354: LIST
46355: PUSH
46356: LD_INT 1
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 1
46368: PUSH
46369: LD_INT 1
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PUSH
46376: LD_INT 0
46378: PUSH
46379: LD_INT 1
46381: PUSH
46382: EMPTY
46383: LIST
46384: LIST
46385: PUSH
46386: LD_INT 1
46388: NEG
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: EMPTY
46394: LIST
46395: LIST
46396: PUSH
46397: LD_INT 1
46399: NEG
46400: PUSH
46401: LD_INT 1
46403: NEG
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 1
46411: NEG
46412: PUSH
46413: LD_INT 2
46415: NEG
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: LD_INT 2
46426: NEG
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 1
46434: PUSH
46435: LD_INT 1
46437: NEG
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 2
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 2
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 2
46465: PUSH
46466: LD_INT 2
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: PUSH
46476: LD_INT 2
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: LD_INT 2
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 1
46495: NEG
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 2
46506: NEG
46507: PUSH
46508: LD_INT 0
46510: PUSH
46511: EMPTY
46512: LIST
46513: LIST
46514: PUSH
46515: LD_INT 2
46517: NEG
46518: PUSH
46519: LD_INT 1
46521: NEG
46522: PUSH
46523: EMPTY
46524: LIST
46525: LIST
46526: PUSH
46527: LD_INT 2
46529: NEG
46530: PUSH
46531: LD_INT 2
46533: NEG
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: EMPTY
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46560: LD_ADDR_VAR 0 56
46564: PUSH
46565: LD_INT 0
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 0
46577: PUSH
46578: LD_INT 1
46580: NEG
46581: PUSH
46582: EMPTY
46583: LIST
46584: LIST
46585: PUSH
46586: LD_INT 1
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 1
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 0
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 1
46629: NEG
46630: PUSH
46631: LD_INT 1
46633: NEG
46634: PUSH
46635: EMPTY
46636: LIST
46637: LIST
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: LD_INT 2
46645: NEG
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: LD_INT 2
46656: NEG
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 1
46664: PUSH
46665: LD_INT 1
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 2
46675: PUSH
46676: LD_INT 0
46678: PUSH
46679: EMPTY
46680: LIST
46681: LIST
46682: PUSH
46683: LD_INT 2
46685: PUSH
46686: LD_INT 1
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 2
46695: PUSH
46696: LD_INT 2
46698: PUSH
46699: EMPTY
46700: LIST
46701: LIST
46702: PUSH
46703: LD_INT 1
46705: PUSH
46706: LD_INT 2
46708: PUSH
46709: EMPTY
46710: LIST
46711: LIST
46712: PUSH
46713: LD_INT 0
46715: PUSH
46716: LD_INT 2
46718: PUSH
46719: EMPTY
46720: LIST
46721: LIST
46722: PUSH
46723: LD_INT 1
46725: NEG
46726: PUSH
46727: LD_INT 1
46729: PUSH
46730: EMPTY
46731: LIST
46732: LIST
46733: PUSH
46734: LD_INT 2
46736: NEG
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 2
46747: NEG
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 2
46759: NEG
46760: PUSH
46761: LD_INT 2
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: EMPTY
46770: LIST
46771: LIST
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46790: LD_ADDR_VAR 0 57
46794: PUSH
46795: LD_INT 0
46797: PUSH
46798: LD_INT 0
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: LD_INT 1
46810: NEG
46811: PUSH
46812: EMPTY
46813: LIST
46814: LIST
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: LD_INT 0
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: LD_INT 1
46828: PUSH
46829: LD_INT 1
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: PUSH
46836: LD_INT 0
46838: PUSH
46839: LD_INT 1
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 1
46848: NEG
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 1
46859: NEG
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: NEG
46872: PUSH
46873: LD_INT 2
46875: NEG
46876: PUSH
46877: EMPTY
46878: LIST
46879: LIST
46880: PUSH
46881: LD_INT 0
46883: PUSH
46884: LD_INT 2
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: LD_INT 1
46897: NEG
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 2
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: EMPTY
46910: LIST
46911: LIST
46912: PUSH
46913: LD_INT 2
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 2
46925: PUSH
46926: LD_INT 2
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: LD_INT 2
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: LD_INT 2
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 1
46955: NEG
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 2
46966: NEG
46967: PUSH
46968: LD_INT 0
46970: PUSH
46971: EMPTY
46972: LIST
46973: LIST
46974: PUSH
46975: LD_INT 2
46977: NEG
46978: PUSH
46979: LD_INT 1
46981: NEG
46982: PUSH
46983: EMPTY
46984: LIST
46985: LIST
46986: PUSH
46987: LD_INT 2
46989: NEG
46990: PUSH
46991: LD_INT 2
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47020: LD_ADDR_VAR 0 58
47024: PUSH
47025: LD_INT 0
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 0
47037: PUSH
47038: LD_INT 1
47040: NEG
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 1
47048: PUSH
47049: LD_INT 0
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: PUSH
47056: LD_INT 1
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 0
47068: PUSH
47069: LD_INT 1
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 1
47078: NEG
47079: PUSH
47080: LD_INT 0
47082: PUSH
47083: EMPTY
47084: LIST
47085: LIST
47086: PUSH
47087: LD_INT 1
47089: NEG
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: EMPTY
47096: LIST
47097: LIST
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: LD_INT 2
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: LD_INT 2
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: LD_INT 1
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: LD_INT 2
47135: PUSH
47136: LD_INT 0
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 2
47145: PUSH
47146: LD_INT 1
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 2
47155: PUSH
47156: LD_INT 2
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: LD_INT 2
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: LD_INT 2
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: LD_INT 1
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 2
47196: NEG
47197: PUSH
47198: LD_INT 0
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 2
47207: NEG
47208: PUSH
47209: LD_INT 1
47211: NEG
47212: PUSH
47213: EMPTY
47214: LIST
47215: LIST
47216: PUSH
47217: LD_INT 2
47219: NEG
47220: PUSH
47221: LD_INT 2
47223: NEG
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47250: LD_ADDR_VAR 0 59
47254: PUSH
47255: LD_INT 0
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 0
47267: PUSH
47268: LD_INT 1
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: PUSH
47279: LD_INT 0
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: LD_INT 1
47291: PUSH
47292: EMPTY
47293: LIST
47294: LIST
47295: PUSH
47296: LD_INT 0
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: EMPTY
47303: LIST
47304: LIST
47305: PUSH
47306: LD_INT 1
47308: NEG
47309: PUSH
47310: LD_INT 0
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: NEG
47320: PUSH
47321: LD_INT 1
47323: NEG
47324: PUSH
47325: EMPTY
47326: LIST
47327: LIST
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: LIST
47333: LIST
47334: LIST
47335: LIST
47336: LIST
47337: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47338: LD_ADDR_VAR 0 60
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 0
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 1
47376: PUSH
47377: LD_INT 1
47379: PUSH
47380: EMPTY
47381: LIST
47382: LIST
47383: PUSH
47384: LD_INT 0
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: LD_INT 0
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 1
47407: NEG
47408: PUSH
47409: LD_INT 1
47411: NEG
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47426: LD_ADDR_VAR 0 61
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 0
47443: PUSH
47444: LD_INT 1
47446: NEG
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: LD_INT 0
47457: PUSH
47458: EMPTY
47459: LIST
47460: LIST
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: LD_INT 1
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 0
47474: PUSH
47475: LD_INT 1
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 1
47484: NEG
47485: PUSH
47486: LD_INT 0
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: LD_INT 1
47499: NEG
47500: PUSH
47501: EMPTY
47502: LIST
47503: LIST
47504: PUSH
47505: EMPTY
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47514: LD_ADDR_VAR 0 62
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: LD_INT 0
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 0
47531: PUSH
47532: LD_INT 1
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: PUSH
47543: LD_INT 0
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 1
47552: PUSH
47553: LD_INT 1
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 1
47572: NEG
47573: PUSH
47574: LD_INT 0
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 1
47583: NEG
47584: PUSH
47585: LD_INT 1
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: LIST
47597: LIST
47598: LIST
47599: LIST
47600: LIST
47601: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47602: LD_ADDR_VAR 0 63
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: LD_INT 0
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 0
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 1
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 1
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: LD_INT 1
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: LD_INT 0
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: NEG
47672: PUSH
47673: LD_INT 1
47675: NEG
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: PUSH
47681: EMPTY
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47690: LD_ADDR_VAR 0 64
47694: PUSH
47695: LD_INT 0
47697: PUSH
47698: LD_INT 0
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 0
47707: PUSH
47708: LD_INT 1
47710: NEG
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 1
47718: PUSH
47719: LD_INT 0
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: LD_INT 1
47728: PUSH
47729: LD_INT 1
47731: PUSH
47732: EMPTY
47733: LIST
47734: LIST
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: LD_INT 1
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: EMPTY
47754: LIST
47755: LIST
47756: PUSH
47757: LD_INT 1
47759: NEG
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: ST_TO_ADDR
// end ; 1 :
47778: GO 53675
47780: LD_INT 1
47782: DOUBLE
47783: EQUAL
47784: IFTRUE 47788
47786: GO 50411
47788: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47789: LD_ADDR_VAR 0 11
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: LD_INT 3
47800: NEG
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: LD_INT 3
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: PUSH
47820: LD_INT 2
47822: NEG
47823: PUSH
47824: EMPTY
47825: LIST
47826: LIST
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: LIST
47832: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47833: LD_ADDR_VAR 0 12
47837: PUSH
47838: LD_INT 2
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: EMPTY
47846: LIST
47847: LIST
47848: PUSH
47849: LD_INT 3
47851: PUSH
47852: LD_INT 0
47854: PUSH
47855: EMPTY
47856: LIST
47857: LIST
47858: PUSH
47859: LD_INT 3
47861: PUSH
47862: LD_INT 1
47864: PUSH
47865: EMPTY
47866: LIST
47867: LIST
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: LIST
47873: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47874: LD_ADDR_VAR 0 13
47878: PUSH
47879: LD_INT 3
47881: PUSH
47882: LD_INT 2
47884: PUSH
47885: EMPTY
47886: LIST
47887: LIST
47888: PUSH
47889: LD_INT 3
47891: PUSH
47892: LD_INT 3
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: PUSH
47899: LD_INT 2
47901: PUSH
47902: LD_INT 3
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: LIST
47913: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47914: LD_ADDR_VAR 0 14
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: LD_INT 3
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: LD_INT 3
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 2
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: LIST
47954: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47955: LD_ADDR_VAR 0 15
47959: PUSH
47960: LD_INT 2
47962: NEG
47963: PUSH
47964: LD_INT 1
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 3
47973: NEG
47974: PUSH
47975: LD_INT 0
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 3
47984: NEG
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: EMPTY
47995: LIST
47996: LIST
47997: LIST
47998: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47999: LD_ADDR_VAR 0 16
48003: PUSH
48004: LD_INT 2
48006: NEG
48007: PUSH
48008: LD_INT 3
48010: NEG
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 3
48018: NEG
48019: PUSH
48020: LD_INT 2
48022: NEG
48023: PUSH
48024: EMPTY
48025: LIST
48026: LIST
48027: PUSH
48028: LD_INT 3
48030: NEG
48031: PUSH
48032: LD_INT 3
48034: NEG
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: EMPTY
48041: LIST
48042: LIST
48043: LIST
48044: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48045: LD_ADDR_VAR 0 17
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: LD_INT 3
48056: NEG
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 0
48064: PUSH
48065: LD_INT 3
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: LD_INT 2
48078: NEG
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: LIST
48088: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48089: LD_ADDR_VAR 0 18
48093: PUSH
48094: LD_INT 2
48096: PUSH
48097: LD_INT 1
48099: NEG
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 3
48107: PUSH
48108: LD_INT 0
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 3
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: LIST
48129: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48130: LD_ADDR_VAR 0 19
48134: PUSH
48135: LD_INT 3
48137: PUSH
48138: LD_INT 2
48140: PUSH
48141: EMPTY
48142: LIST
48143: LIST
48144: PUSH
48145: LD_INT 3
48147: PUSH
48148: LD_INT 3
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PUSH
48155: LD_INT 2
48157: PUSH
48158: LD_INT 3
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: LIST
48169: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48170: LD_ADDR_VAR 0 20
48174: PUSH
48175: LD_INT 1
48177: PUSH
48178: LD_INT 3
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: LD_INT 3
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 1
48197: NEG
48198: PUSH
48199: LD_INT 2
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: EMPTY
48207: LIST
48208: LIST
48209: LIST
48210: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48211: LD_ADDR_VAR 0 21
48215: PUSH
48216: LD_INT 2
48218: NEG
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: EMPTY
48224: LIST
48225: LIST
48226: PUSH
48227: LD_INT 3
48229: NEG
48230: PUSH
48231: LD_INT 0
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PUSH
48238: LD_INT 3
48240: NEG
48241: PUSH
48242: LD_INT 1
48244: NEG
48245: PUSH
48246: EMPTY
48247: LIST
48248: LIST
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: LIST
48254: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48255: LD_ADDR_VAR 0 22
48259: PUSH
48260: LD_INT 2
48262: NEG
48263: PUSH
48264: LD_INT 3
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 3
48274: NEG
48275: PUSH
48276: LD_INT 2
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 3
48286: NEG
48287: PUSH
48288: LD_INT 3
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: LIST
48300: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48301: LD_ADDR_VAR 0 23
48305: PUSH
48306: LD_INT 0
48308: PUSH
48309: LD_INT 3
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 1
48319: NEG
48320: PUSH
48321: LD_INT 4
48323: NEG
48324: PUSH
48325: EMPTY
48326: LIST
48327: LIST
48328: PUSH
48329: LD_INT 1
48331: PUSH
48332: LD_INT 3
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: LIST
48344: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48345: LD_ADDR_VAR 0 24
48349: PUSH
48350: LD_INT 3
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 3
48362: PUSH
48363: LD_INT 1
48365: NEG
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: LD_INT 4
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: EMPTY
48378: LIST
48379: LIST
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: LIST
48385: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48386: LD_ADDR_VAR 0 25
48390: PUSH
48391: LD_INT 3
48393: PUSH
48394: LD_INT 3
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 4
48403: PUSH
48404: LD_INT 3
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: LD_INT 3
48413: PUSH
48414: LD_INT 4
48416: PUSH
48417: EMPTY
48418: LIST
48419: LIST
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: LIST
48425: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48426: LD_ADDR_VAR 0 26
48430: PUSH
48431: LD_INT 0
48433: PUSH
48434: LD_INT 3
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 1
48443: PUSH
48444: LD_INT 4
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: LD_INT 3
48457: PUSH
48458: EMPTY
48459: LIST
48460: LIST
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: LIST
48466: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48467: LD_ADDR_VAR 0 27
48471: PUSH
48472: LD_INT 3
48474: NEG
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: PUSH
48483: LD_INT 3
48485: NEG
48486: PUSH
48487: LD_INT 1
48489: PUSH
48490: EMPTY
48491: LIST
48492: LIST
48493: PUSH
48494: LD_INT 4
48496: NEG
48497: PUSH
48498: LD_INT 1
48500: NEG
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: EMPTY
48507: LIST
48508: LIST
48509: LIST
48510: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48511: LD_ADDR_VAR 0 28
48515: PUSH
48516: LD_INT 3
48518: NEG
48519: PUSH
48520: LD_INT 3
48522: NEG
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 3
48530: NEG
48531: PUSH
48532: LD_INT 4
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 4
48542: NEG
48543: PUSH
48544: LD_INT 3
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: LIST
48556: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
48557: LD_ADDR_VAR 0 29
48561: PUSH
48562: LD_INT 1
48564: NEG
48565: PUSH
48566: LD_INT 3
48568: NEG
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 0
48576: PUSH
48577: LD_INT 3
48579: NEG
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 1
48587: PUSH
48588: LD_INT 2
48590: NEG
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: PUSH
48596: LD_INT 1
48598: NEG
48599: PUSH
48600: LD_INT 4
48602: NEG
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 0
48610: PUSH
48611: LD_INT 4
48613: NEG
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: PUSH
48622: LD_INT 3
48624: NEG
48625: PUSH
48626: EMPTY
48627: LIST
48628: LIST
48629: PUSH
48630: LD_INT 1
48632: NEG
48633: PUSH
48634: LD_INT 5
48636: NEG
48637: PUSH
48638: EMPTY
48639: LIST
48640: LIST
48641: PUSH
48642: LD_INT 0
48644: PUSH
48645: LD_INT 5
48647: NEG
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 1
48655: PUSH
48656: LD_INT 4
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: NEG
48667: PUSH
48668: LD_INT 6
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: LD_INT 6
48681: NEG
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 1
48689: PUSH
48690: LD_INT 5
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: LIST
48702: LIST
48703: LIST
48704: LIST
48705: LIST
48706: LIST
48707: LIST
48708: LIST
48709: LIST
48710: LIST
48711: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48712: LD_ADDR_VAR 0 30
48716: PUSH
48717: LD_INT 2
48719: PUSH
48720: LD_INT 1
48722: NEG
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: PUSH
48728: LD_INT 3
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: LD_INT 3
48740: PUSH
48741: LD_INT 1
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 3
48750: PUSH
48751: LD_INT 1
48753: NEG
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 4
48761: PUSH
48762: LD_INT 0
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: LD_INT 4
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 4
48781: PUSH
48782: LD_INT 1
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 5
48792: PUSH
48793: LD_INT 0
48795: PUSH
48796: EMPTY
48797: LIST
48798: LIST
48799: PUSH
48800: LD_INT 5
48802: PUSH
48803: LD_INT 1
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 5
48812: PUSH
48813: LD_INT 1
48815: NEG
48816: PUSH
48817: EMPTY
48818: LIST
48819: LIST
48820: PUSH
48821: LD_INT 6
48823: PUSH
48824: LD_INT 0
48826: PUSH
48827: EMPTY
48828: LIST
48829: LIST
48830: PUSH
48831: LD_INT 6
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: EMPTY
48838: LIST
48839: LIST
48840: PUSH
48841: EMPTY
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48855: LD_ADDR_VAR 0 31
48859: PUSH
48860: LD_INT 3
48862: PUSH
48863: LD_INT 2
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 3
48872: PUSH
48873: LD_INT 3
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 2
48882: PUSH
48883: LD_INT 3
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 4
48892: PUSH
48893: LD_INT 3
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 4
48902: PUSH
48903: LD_INT 4
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 3
48912: PUSH
48913: LD_INT 4
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 5
48922: PUSH
48923: LD_INT 4
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 5
48932: PUSH
48933: LD_INT 5
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 4
48942: PUSH
48943: LD_INT 5
48945: PUSH
48946: EMPTY
48947: LIST
48948: LIST
48949: PUSH
48950: LD_INT 6
48952: PUSH
48953: LD_INT 5
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 6
48962: PUSH
48963: LD_INT 6
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: LD_INT 5
48972: PUSH
48973: LD_INT 6
48975: PUSH
48976: EMPTY
48977: LIST
48978: LIST
48979: PUSH
48980: EMPTY
48981: LIST
48982: LIST
48983: LIST
48984: LIST
48985: LIST
48986: LIST
48987: LIST
48988: LIST
48989: LIST
48990: LIST
48991: LIST
48992: LIST
48993: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48994: LD_ADDR_VAR 0 32
48998: PUSH
48999: LD_INT 1
49001: PUSH
49002: LD_INT 3
49004: PUSH
49005: EMPTY
49006: LIST
49007: LIST
49008: PUSH
49009: LD_INT 0
49011: PUSH
49012: LD_INT 3
49014: PUSH
49015: EMPTY
49016: LIST
49017: LIST
49018: PUSH
49019: LD_INT 1
49021: NEG
49022: PUSH
49023: LD_INT 2
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 1
49032: PUSH
49033: LD_INT 4
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 0
49042: PUSH
49043: LD_INT 4
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: LD_INT 3
49056: PUSH
49057: EMPTY
49058: LIST
49059: LIST
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: LD_INT 5
49066: PUSH
49067: EMPTY
49068: LIST
49069: LIST
49070: PUSH
49071: LD_INT 0
49073: PUSH
49074: LD_INT 5
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: NEG
49084: PUSH
49085: LD_INT 4
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: PUSH
49095: LD_INT 6
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 0
49104: PUSH
49105: LD_INT 6
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: LD_INT 1
49114: NEG
49115: PUSH
49116: LD_INT 5
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: EMPTY
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49137: LD_ADDR_VAR 0 33
49141: PUSH
49142: LD_INT 2
49144: NEG
49145: PUSH
49146: LD_INT 1
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: PUSH
49153: LD_INT 3
49155: NEG
49156: PUSH
49157: LD_INT 0
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 3
49166: NEG
49167: PUSH
49168: LD_INT 1
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: LD_INT 3
49178: NEG
49179: PUSH
49180: LD_INT 1
49182: PUSH
49183: EMPTY
49184: LIST
49185: LIST
49186: PUSH
49187: LD_INT 4
49189: NEG
49190: PUSH
49191: LD_INT 0
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 4
49200: NEG
49201: PUSH
49202: LD_INT 1
49204: NEG
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 4
49212: NEG
49213: PUSH
49214: LD_INT 1
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 5
49223: NEG
49224: PUSH
49225: LD_INT 0
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 5
49234: NEG
49235: PUSH
49236: LD_INT 1
49238: NEG
49239: PUSH
49240: EMPTY
49241: LIST
49242: LIST
49243: PUSH
49244: LD_INT 5
49246: NEG
49247: PUSH
49248: LD_INT 1
49250: PUSH
49251: EMPTY
49252: LIST
49253: LIST
49254: PUSH
49255: LD_INT 6
49257: NEG
49258: PUSH
49259: LD_INT 0
49261: PUSH
49262: EMPTY
49263: LIST
49264: LIST
49265: PUSH
49266: LD_INT 6
49268: NEG
49269: PUSH
49270: LD_INT 1
49272: NEG
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: LIST
49282: LIST
49283: LIST
49284: LIST
49285: LIST
49286: LIST
49287: LIST
49288: LIST
49289: LIST
49290: LIST
49291: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49292: LD_ADDR_VAR 0 34
49296: PUSH
49297: LD_INT 2
49299: NEG
49300: PUSH
49301: LD_INT 3
49303: NEG
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 3
49311: NEG
49312: PUSH
49313: LD_INT 2
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 3
49323: NEG
49324: PUSH
49325: LD_INT 3
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 3
49335: NEG
49336: PUSH
49337: LD_INT 4
49339: NEG
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: PUSH
49345: LD_INT 4
49347: NEG
49348: PUSH
49349: LD_INT 3
49351: NEG
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 4
49359: NEG
49360: PUSH
49361: LD_INT 4
49363: NEG
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 4
49371: NEG
49372: PUSH
49373: LD_INT 5
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 5
49383: NEG
49384: PUSH
49385: LD_INT 4
49387: NEG
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 5
49395: NEG
49396: PUSH
49397: LD_INT 5
49399: NEG
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 5
49407: NEG
49408: PUSH
49409: LD_INT 6
49411: NEG
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 6
49419: NEG
49420: PUSH
49421: LD_INT 5
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 6
49431: NEG
49432: PUSH
49433: LD_INT 6
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: EMPTY
49442: LIST
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49455: LD_ADDR_VAR 0 41
49459: PUSH
49460: LD_INT 0
49462: PUSH
49463: LD_INT 2
49465: NEG
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 1
49473: NEG
49474: PUSH
49475: LD_INT 3
49477: NEG
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 1
49485: PUSH
49486: LD_INT 2
49488: NEG
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: LIST
49498: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49499: LD_ADDR_VAR 0 42
49503: PUSH
49504: LD_INT 2
49506: PUSH
49507: LD_INT 0
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 2
49516: PUSH
49517: LD_INT 1
49519: NEG
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 3
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: LIST
49539: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
49540: LD_ADDR_VAR 0 43
49544: PUSH
49545: LD_INT 2
49547: PUSH
49548: LD_INT 2
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 3
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 2
49567: PUSH
49568: LD_INT 3
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: LIST
49579: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
49580: LD_ADDR_VAR 0 44
49584: PUSH
49585: LD_INT 0
49587: PUSH
49588: LD_INT 2
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 1
49597: PUSH
49598: LD_INT 3
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 1
49607: NEG
49608: PUSH
49609: LD_INT 2
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: LIST
49620: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
49621: LD_ADDR_VAR 0 45
49625: PUSH
49626: LD_INT 2
49628: NEG
49629: PUSH
49630: LD_INT 0
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: LD_INT 2
49639: NEG
49640: PUSH
49641: LD_INT 1
49643: PUSH
49644: EMPTY
49645: LIST
49646: LIST
49647: PUSH
49648: LD_INT 3
49650: NEG
49651: PUSH
49652: LD_INT 1
49654: NEG
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: LIST
49664: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
49665: LD_ADDR_VAR 0 46
49669: PUSH
49670: LD_INT 2
49672: NEG
49673: PUSH
49674: LD_INT 2
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 2
49684: NEG
49685: PUSH
49686: LD_INT 3
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 3
49696: NEG
49697: PUSH
49698: LD_INT 2
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: EMPTY
49707: LIST
49708: LIST
49709: LIST
49710: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49711: LD_ADDR_VAR 0 47
49715: PUSH
49716: LD_INT 2
49718: NEG
49719: PUSH
49720: LD_INT 3
49722: NEG
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 1
49730: NEG
49731: PUSH
49732: LD_INT 3
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49744: LD_ADDR_VAR 0 48
49748: PUSH
49749: LD_INT 1
49751: PUSH
49752: LD_INT 2
49754: NEG
49755: PUSH
49756: EMPTY
49757: LIST
49758: LIST
49759: PUSH
49760: LD_INT 2
49762: PUSH
49763: LD_INT 1
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49775: LD_ADDR_VAR 0 49
49779: PUSH
49780: LD_INT 3
49782: PUSH
49783: LD_INT 1
49785: PUSH
49786: EMPTY
49787: LIST
49788: LIST
49789: PUSH
49790: LD_INT 3
49792: PUSH
49793: LD_INT 2
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49804: LD_ADDR_VAR 0 50
49808: PUSH
49809: LD_INT 2
49811: PUSH
49812: LD_INT 3
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 1
49821: PUSH
49822: LD_INT 3
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49833: LD_ADDR_VAR 0 51
49837: PUSH
49838: LD_INT 1
49840: NEG
49841: PUSH
49842: LD_INT 2
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 2
49851: NEG
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: EMPTY
49861: LIST
49862: LIST
49863: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49864: LD_ADDR_VAR 0 52
49868: PUSH
49869: LD_INT 3
49871: NEG
49872: PUSH
49873: LD_INT 1
49875: NEG
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 3
49883: NEG
49884: PUSH
49885: LD_INT 2
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49897: LD_ADDR_VAR 0 53
49901: PUSH
49902: LD_INT 1
49904: NEG
49905: PUSH
49906: LD_INT 3
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: LD_INT 0
49916: PUSH
49917: LD_INT 3
49919: NEG
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: PUSH
49925: LD_INT 1
49927: PUSH
49928: LD_INT 2
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: LIST
49940: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49941: LD_ADDR_VAR 0 54
49945: PUSH
49946: LD_INT 2
49948: PUSH
49949: LD_INT 1
49951: NEG
49952: PUSH
49953: EMPTY
49954: LIST
49955: LIST
49956: PUSH
49957: LD_INT 3
49959: PUSH
49960: LD_INT 0
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: LD_INT 3
49969: PUSH
49970: LD_INT 1
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: LIST
49981: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49982: LD_ADDR_VAR 0 55
49986: PUSH
49987: LD_INT 3
49989: PUSH
49990: LD_INT 2
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: LD_INT 3
49999: PUSH
50000: LD_INT 3
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 2
50009: PUSH
50010: LD_INT 3
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: EMPTY
50018: LIST
50019: LIST
50020: LIST
50021: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50022: LD_ADDR_VAR 0 56
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: LD_INT 3
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 0
50039: PUSH
50040: LD_INT 3
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 1
50049: NEG
50050: PUSH
50051: LD_INT 2
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: LIST
50062: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50063: LD_ADDR_VAR 0 57
50067: PUSH
50068: LD_INT 2
50070: NEG
50071: PUSH
50072: LD_INT 1
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 3
50081: NEG
50082: PUSH
50083: LD_INT 0
50085: PUSH
50086: EMPTY
50087: LIST
50088: LIST
50089: PUSH
50090: LD_INT 3
50092: NEG
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: LIST
50106: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50107: LD_ADDR_VAR 0 58
50111: PUSH
50112: LD_INT 2
50114: NEG
50115: PUSH
50116: LD_INT 3
50118: NEG
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 3
50126: NEG
50127: PUSH
50128: LD_INT 2
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 3
50138: NEG
50139: PUSH
50140: LD_INT 3
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: EMPTY
50149: LIST
50150: LIST
50151: LIST
50152: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50153: LD_ADDR_VAR 0 59
50157: PUSH
50158: LD_INT 1
50160: NEG
50161: PUSH
50162: LD_INT 2
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: LD_INT 2
50175: NEG
50176: PUSH
50177: EMPTY
50178: LIST
50179: LIST
50180: PUSH
50181: LD_INT 1
50183: PUSH
50184: LD_INT 1
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: LIST
50196: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50197: LD_ADDR_VAR 0 60
50201: PUSH
50202: LD_INT 1
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 2
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 2
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: LIST
50237: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50238: LD_ADDR_VAR 0 61
50242: PUSH
50243: LD_INT 2
50245: PUSH
50246: LD_INT 1
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: PUSH
50253: LD_INT 2
50255: PUSH
50256: LD_INT 2
50258: PUSH
50259: EMPTY
50260: LIST
50261: LIST
50262: PUSH
50263: LD_INT 1
50265: PUSH
50266: LD_INT 2
50268: PUSH
50269: EMPTY
50270: LIST
50271: LIST
50272: PUSH
50273: EMPTY
50274: LIST
50275: LIST
50276: LIST
50277: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50278: LD_ADDR_VAR 0 62
50282: PUSH
50283: LD_INT 1
50285: PUSH
50286: LD_INT 2
50288: PUSH
50289: EMPTY
50290: LIST
50291: LIST
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 2
50298: PUSH
50299: EMPTY
50300: LIST
50301: LIST
50302: PUSH
50303: LD_INT 1
50305: NEG
50306: PUSH
50307: LD_INT 1
50309: PUSH
50310: EMPTY
50311: LIST
50312: LIST
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: LIST
50318: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50319: LD_ADDR_VAR 0 63
50323: PUSH
50324: LD_INT 1
50326: NEG
50327: PUSH
50328: LD_INT 1
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 2
50337: NEG
50338: PUSH
50339: LD_INT 0
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 2
50348: NEG
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: LIST
50362: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50363: LD_ADDR_VAR 0 64
50367: PUSH
50368: LD_INT 1
50370: NEG
50371: PUSH
50372: LD_INT 2
50374: NEG
50375: PUSH
50376: EMPTY
50377: LIST
50378: LIST
50379: PUSH
50380: LD_INT 2
50382: NEG
50383: PUSH
50384: LD_INT 1
50386: NEG
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: LD_INT 2
50394: NEG
50395: PUSH
50396: LD_INT 2
50398: NEG
50399: PUSH
50400: EMPTY
50401: LIST
50402: LIST
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: LIST
50408: ST_TO_ADDR
// end ; 2 :
50409: GO 53675
50411: LD_INT 2
50413: DOUBLE
50414: EQUAL
50415: IFTRUE 50419
50417: GO 53674
50419: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50420: LD_ADDR_VAR 0 29
50424: PUSH
50425: LD_INT 4
50427: PUSH
50428: LD_INT 0
50430: PUSH
50431: EMPTY
50432: LIST
50433: LIST
50434: PUSH
50435: LD_INT 4
50437: PUSH
50438: LD_INT 1
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 5
50448: PUSH
50449: LD_INT 0
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 5
50458: PUSH
50459: LD_INT 1
50461: PUSH
50462: EMPTY
50463: LIST
50464: LIST
50465: PUSH
50466: LD_INT 4
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 3
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 3
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: EMPTY
50494: LIST
50495: LIST
50496: PUSH
50497: LD_INT 3
50499: PUSH
50500: LD_INT 2
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 5
50510: PUSH
50511: LD_INT 2
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 3
50520: PUSH
50521: LD_INT 3
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 3
50530: PUSH
50531: LD_INT 2
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 4
50540: PUSH
50541: LD_INT 3
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 4
50550: PUSH
50551: LD_INT 4
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 3
50560: PUSH
50561: LD_INT 4
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 2
50570: PUSH
50571: LD_INT 3
50573: PUSH
50574: EMPTY
50575: LIST
50576: LIST
50577: PUSH
50578: LD_INT 2
50580: PUSH
50581: LD_INT 2
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 4
50590: PUSH
50591: LD_INT 2
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 2
50600: PUSH
50601: LD_INT 4
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 0
50610: PUSH
50611: LD_INT 4
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 0
50620: PUSH
50621: LD_INT 3
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: PUSH
50628: LD_INT 1
50630: PUSH
50631: LD_INT 4
50633: PUSH
50634: EMPTY
50635: LIST
50636: LIST
50637: PUSH
50638: LD_INT 1
50640: PUSH
50641: LD_INT 5
50643: PUSH
50644: EMPTY
50645: LIST
50646: LIST
50647: PUSH
50648: LD_INT 0
50650: PUSH
50651: LD_INT 5
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: PUSH
50658: LD_INT 1
50660: NEG
50661: PUSH
50662: LD_INT 4
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 1
50671: NEG
50672: PUSH
50673: LD_INT 3
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 2
50682: PUSH
50683: LD_INT 5
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: PUSH
50690: LD_INT 2
50692: NEG
50693: PUSH
50694: LD_INT 3
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 3
50703: NEG
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: EMPTY
50709: LIST
50710: LIST
50711: PUSH
50712: LD_INT 3
50714: NEG
50715: PUSH
50716: LD_INT 1
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 2
50726: NEG
50727: PUSH
50728: LD_INT 0
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: LD_INT 2
50737: NEG
50738: PUSH
50739: LD_INT 1
50741: PUSH
50742: EMPTY
50743: LIST
50744: LIST
50745: PUSH
50746: LD_INT 3
50748: NEG
50749: PUSH
50750: LD_INT 1
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 4
50759: NEG
50760: PUSH
50761: LD_INT 0
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 4
50770: NEG
50771: PUSH
50772: LD_INT 1
50774: NEG
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: PUSH
50780: LD_INT 4
50782: NEG
50783: PUSH
50784: LD_INT 2
50786: NEG
50787: PUSH
50788: EMPTY
50789: LIST
50790: LIST
50791: PUSH
50792: LD_INT 2
50794: NEG
50795: PUSH
50796: LD_INT 2
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 4
50805: NEG
50806: PUSH
50807: LD_INT 4
50809: NEG
50810: PUSH
50811: EMPTY
50812: LIST
50813: LIST
50814: PUSH
50815: LD_INT 4
50817: NEG
50818: PUSH
50819: LD_INT 5
50821: NEG
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 3
50829: NEG
50830: PUSH
50831: LD_INT 4
50833: NEG
50834: PUSH
50835: EMPTY
50836: LIST
50837: LIST
50838: PUSH
50839: LD_INT 3
50841: NEG
50842: PUSH
50843: LD_INT 3
50845: NEG
50846: PUSH
50847: EMPTY
50848: LIST
50849: LIST
50850: PUSH
50851: LD_INT 4
50853: NEG
50854: PUSH
50855: LD_INT 3
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 5
50865: NEG
50866: PUSH
50867: LD_INT 4
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 5
50877: NEG
50878: PUSH
50879: LD_INT 5
50881: NEG
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 3
50889: NEG
50890: PUSH
50891: LD_INT 5
50893: NEG
50894: PUSH
50895: EMPTY
50896: LIST
50897: LIST
50898: PUSH
50899: LD_INT 5
50901: NEG
50902: PUSH
50903: LD_INT 3
50905: NEG
50906: PUSH
50907: EMPTY
50908: LIST
50909: LIST
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50958: LD_ADDR_VAR 0 30
50962: PUSH
50963: LD_INT 4
50965: PUSH
50966: LD_INT 4
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 4
50975: PUSH
50976: LD_INT 3
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 5
50985: PUSH
50986: LD_INT 4
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 5
50995: PUSH
50996: LD_INT 5
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 4
51005: PUSH
51006: LD_INT 5
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 3
51015: PUSH
51016: LD_INT 4
51018: PUSH
51019: EMPTY
51020: LIST
51021: LIST
51022: PUSH
51023: LD_INT 3
51025: PUSH
51026: LD_INT 3
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 5
51035: PUSH
51036: LD_INT 3
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 3
51045: PUSH
51046: LD_INT 5
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 0
51055: PUSH
51056: LD_INT 3
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 0
51065: PUSH
51066: LD_INT 2
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 1
51075: PUSH
51076: LD_INT 3
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 1
51085: PUSH
51086: LD_INT 4
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: LD_INT 4
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 1
51105: NEG
51106: PUSH
51107: LD_INT 3
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 1
51116: NEG
51117: PUSH
51118: LD_INT 2
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 2
51127: PUSH
51128: LD_INT 4
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 2
51137: NEG
51138: PUSH
51139: LD_INT 2
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 4
51148: NEG
51149: PUSH
51150: LD_INT 0
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 4
51159: NEG
51160: PUSH
51161: LD_INT 1
51163: NEG
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: LD_INT 3
51171: NEG
51172: PUSH
51173: LD_INT 0
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 3
51182: NEG
51183: PUSH
51184: LD_INT 1
51186: PUSH
51187: EMPTY
51188: LIST
51189: LIST
51190: PUSH
51191: LD_INT 4
51193: NEG
51194: PUSH
51195: LD_INT 1
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: LD_INT 5
51204: NEG
51205: PUSH
51206: LD_INT 0
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 5
51215: NEG
51216: PUSH
51217: LD_INT 1
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 5
51227: NEG
51228: PUSH
51229: LD_INT 2
51231: NEG
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 3
51239: NEG
51240: PUSH
51241: LD_INT 2
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 3
51250: NEG
51251: PUSH
51252: LD_INT 3
51254: NEG
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 3
51262: NEG
51263: PUSH
51264: LD_INT 4
51266: NEG
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 2
51274: NEG
51275: PUSH
51276: LD_INT 3
51278: NEG
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: PUSH
51284: LD_INT 2
51286: NEG
51287: PUSH
51288: LD_INT 2
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 3
51298: NEG
51299: PUSH
51300: LD_INT 2
51302: NEG
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 4
51310: NEG
51311: PUSH
51312: LD_INT 3
51314: NEG
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 4
51322: NEG
51323: PUSH
51324: LD_INT 4
51326: NEG
51327: PUSH
51328: EMPTY
51329: LIST
51330: LIST
51331: PUSH
51332: LD_INT 2
51334: NEG
51335: PUSH
51336: LD_INT 4
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: LD_INT 4
51346: NEG
51347: PUSH
51348: LD_INT 2
51350: NEG
51351: PUSH
51352: EMPTY
51353: LIST
51354: LIST
51355: PUSH
51356: LD_INT 0
51358: PUSH
51359: LD_INT 4
51361: NEG
51362: PUSH
51363: EMPTY
51364: LIST
51365: LIST
51366: PUSH
51367: LD_INT 0
51369: PUSH
51370: LD_INT 5
51372: NEG
51373: PUSH
51374: EMPTY
51375: LIST
51376: LIST
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: LD_INT 4
51383: NEG
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: PUSH
51389: LD_INT 1
51391: PUSH
51392: LD_INT 3
51394: NEG
51395: PUSH
51396: EMPTY
51397: LIST
51398: LIST
51399: PUSH
51400: LD_INT 0
51402: PUSH
51403: LD_INT 3
51405: NEG
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 1
51413: NEG
51414: PUSH
51415: LD_INT 4
51417: NEG
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: LD_INT 1
51425: NEG
51426: PUSH
51427: LD_INT 5
51429: NEG
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 2
51437: PUSH
51438: LD_INT 3
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: LD_INT 2
51448: NEG
51449: PUSH
51450: LD_INT 5
51452: NEG
51453: PUSH
51454: EMPTY
51455: LIST
51456: LIST
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51505: LD_ADDR_VAR 0 31
51509: PUSH
51510: LD_INT 0
51512: PUSH
51513: LD_INT 4
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 0
51522: PUSH
51523: LD_INT 3
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: LD_INT 1
51532: PUSH
51533: LD_INT 4
51535: PUSH
51536: EMPTY
51537: LIST
51538: LIST
51539: PUSH
51540: LD_INT 1
51542: PUSH
51543: LD_INT 5
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 0
51552: PUSH
51553: LD_INT 5
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 1
51562: NEG
51563: PUSH
51564: LD_INT 4
51566: PUSH
51567: EMPTY
51568: LIST
51569: LIST
51570: PUSH
51571: LD_INT 1
51573: NEG
51574: PUSH
51575: LD_INT 3
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: PUSH
51582: LD_INT 2
51584: PUSH
51585: LD_INT 5
51587: PUSH
51588: EMPTY
51589: LIST
51590: LIST
51591: PUSH
51592: LD_INT 2
51594: NEG
51595: PUSH
51596: LD_INT 3
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 3
51605: NEG
51606: PUSH
51607: LD_INT 0
51609: PUSH
51610: EMPTY
51611: LIST
51612: LIST
51613: PUSH
51614: LD_INT 3
51616: NEG
51617: PUSH
51618: LD_INT 1
51620: NEG
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 2
51628: NEG
51629: PUSH
51630: LD_INT 0
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 2
51639: NEG
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 3
51650: NEG
51651: PUSH
51652: LD_INT 1
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: PUSH
51659: LD_INT 4
51661: NEG
51662: PUSH
51663: LD_INT 0
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 4
51672: NEG
51673: PUSH
51674: LD_INT 1
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 4
51684: NEG
51685: PUSH
51686: LD_INT 2
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 2
51696: NEG
51697: PUSH
51698: LD_INT 2
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 4
51707: NEG
51708: PUSH
51709: LD_INT 4
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 4
51719: NEG
51720: PUSH
51721: LD_INT 5
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 3
51731: NEG
51732: PUSH
51733: LD_INT 4
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 3
51743: NEG
51744: PUSH
51745: LD_INT 3
51747: NEG
51748: PUSH
51749: EMPTY
51750: LIST
51751: LIST
51752: PUSH
51753: LD_INT 4
51755: NEG
51756: PUSH
51757: LD_INT 3
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 5
51767: NEG
51768: PUSH
51769: LD_INT 4
51771: NEG
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 5
51779: NEG
51780: PUSH
51781: LD_INT 5
51783: NEG
51784: PUSH
51785: EMPTY
51786: LIST
51787: LIST
51788: PUSH
51789: LD_INT 3
51791: NEG
51792: PUSH
51793: LD_INT 5
51795: NEG
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: PUSH
51801: LD_INT 5
51803: NEG
51804: PUSH
51805: LD_INT 3
51807: NEG
51808: PUSH
51809: EMPTY
51810: LIST
51811: LIST
51812: PUSH
51813: LD_INT 0
51815: PUSH
51816: LD_INT 3
51818: NEG
51819: PUSH
51820: EMPTY
51821: LIST
51822: LIST
51823: PUSH
51824: LD_INT 0
51826: PUSH
51827: LD_INT 4
51829: NEG
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: LD_INT 1
51837: PUSH
51838: LD_INT 3
51840: NEG
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 1
51848: PUSH
51849: LD_INT 2
51851: NEG
51852: PUSH
51853: EMPTY
51854: LIST
51855: LIST
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: LD_INT 2
51862: NEG
51863: PUSH
51864: EMPTY
51865: LIST
51866: LIST
51867: PUSH
51868: LD_INT 1
51870: NEG
51871: PUSH
51872: LD_INT 3
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: LD_INT 4
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 2
51894: PUSH
51895: LD_INT 2
51897: NEG
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 2
51905: NEG
51906: PUSH
51907: LD_INT 4
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 4
51917: PUSH
51918: LD_INT 0
51920: PUSH
51921: EMPTY
51922: LIST
51923: LIST
51924: PUSH
51925: LD_INT 4
51927: PUSH
51928: LD_INT 1
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 5
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 5
51948: PUSH
51949: LD_INT 1
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 4
51958: PUSH
51959: LD_INT 1
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 3
51968: PUSH
51969: LD_INT 0
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 3
51978: PUSH
51979: LD_INT 1
51981: NEG
51982: PUSH
51983: EMPTY
51984: LIST
51985: LIST
51986: PUSH
51987: LD_INT 3
51989: PUSH
51990: LD_INT 2
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 5
52000: PUSH
52001: LD_INT 2
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: LIST
52020: LIST
52021: LIST
52022: LIST
52023: LIST
52024: LIST
52025: LIST
52026: LIST
52027: LIST
52028: LIST
52029: LIST
52030: LIST
52031: LIST
52032: LIST
52033: LIST
52034: LIST
52035: LIST
52036: LIST
52037: LIST
52038: LIST
52039: LIST
52040: LIST
52041: LIST
52042: LIST
52043: LIST
52044: LIST
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: LIST
52052: LIST
52053: LIST
52054: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52055: LD_ADDR_VAR 0 32
52059: PUSH
52060: LD_INT 4
52062: NEG
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 4
52073: NEG
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: EMPTY
52080: LIST
52081: LIST
52082: PUSH
52083: LD_INT 3
52085: NEG
52086: PUSH
52087: LD_INT 0
52089: PUSH
52090: EMPTY
52091: LIST
52092: LIST
52093: PUSH
52094: LD_INT 3
52096: NEG
52097: PUSH
52098: LD_INT 1
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 4
52107: NEG
52108: PUSH
52109: LD_INT 1
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 5
52118: NEG
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 5
52129: NEG
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 5
52141: NEG
52142: PUSH
52143: LD_INT 2
52145: NEG
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 3
52153: NEG
52154: PUSH
52155: LD_INT 2
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: PUSH
52162: LD_INT 3
52164: NEG
52165: PUSH
52166: LD_INT 3
52168: NEG
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 3
52176: NEG
52177: PUSH
52178: LD_INT 4
52180: NEG
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 2
52188: NEG
52189: PUSH
52190: LD_INT 3
52192: NEG
52193: PUSH
52194: EMPTY
52195: LIST
52196: LIST
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: LD_INT 2
52204: NEG
52205: PUSH
52206: EMPTY
52207: LIST
52208: LIST
52209: PUSH
52210: LD_INT 3
52212: NEG
52213: PUSH
52214: LD_INT 2
52216: NEG
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 4
52224: NEG
52225: PUSH
52226: LD_INT 3
52228: NEG
52229: PUSH
52230: EMPTY
52231: LIST
52232: LIST
52233: PUSH
52234: LD_INT 4
52236: NEG
52237: PUSH
52238: LD_INT 4
52240: NEG
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 2
52248: NEG
52249: PUSH
52250: LD_INT 4
52252: NEG
52253: PUSH
52254: EMPTY
52255: LIST
52256: LIST
52257: PUSH
52258: LD_INT 4
52260: NEG
52261: PUSH
52262: LD_INT 2
52264: NEG
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 0
52272: PUSH
52273: LD_INT 4
52275: NEG
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: LD_INT 5
52286: NEG
52287: PUSH
52288: EMPTY
52289: LIST
52290: LIST
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: LD_INT 4
52297: NEG
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: LD_INT 3
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: LD_INT 3
52319: NEG
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: LD_INT 4
52331: NEG
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 1
52339: NEG
52340: PUSH
52341: LD_INT 5
52343: NEG
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: LD_INT 2
52351: PUSH
52352: LD_INT 3
52354: NEG
52355: PUSH
52356: EMPTY
52357: LIST
52358: LIST
52359: PUSH
52360: LD_INT 2
52362: NEG
52363: PUSH
52364: LD_INT 5
52366: NEG
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: PUSH
52372: LD_INT 3
52374: PUSH
52375: LD_INT 0
52377: PUSH
52378: EMPTY
52379: LIST
52380: LIST
52381: PUSH
52382: LD_INT 3
52384: PUSH
52385: LD_INT 1
52387: NEG
52388: PUSH
52389: EMPTY
52390: LIST
52391: LIST
52392: PUSH
52393: LD_INT 4
52395: PUSH
52396: LD_INT 0
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 4
52405: PUSH
52406: LD_INT 1
52408: PUSH
52409: EMPTY
52410: LIST
52411: LIST
52412: PUSH
52413: LD_INT 3
52415: PUSH
52416: LD_INT 1
52418: PUSH
52419: EMPTY
52420: LIST
52421: LIST
52422: PUSH
52423: LD_INT 2
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 2
52435: PUSH
52436: LD_INT 1
52438: NEG
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 2
52446: PUSH
52447: LD_INT 2
52449: NEG
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 4
52457: PUSH
52458: LD_INT 2
52460: PUSH
52461: EMPTY
52462: LIST
52463: LIST
52464: PUSH
52465: LD_INT 4
52467: PUSH
52468: LD_INT 4
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 4
52477: PUSH
52478: LD_INT 3
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 5
52487: PUSH
52488: LD_INT 4
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 5
52497: PUSH
52498: LD_INT 5
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 4
52507: PUSH
52508: LD_INT 5
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 3
52517: PUSH
52518: LD_INT 4
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 3
52527: PUSH
52528: LD_INT 3
52530: PUSH
52531: EMPTY
52532: LIST
52533: LIST
52534: PUSH
52535: LD_INT 5
52537: PUSH
52538: LD_INT 3
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 3
52547: PUSH
52548: LD_INT 5
52550: PUSH
52551: EMPTY
52552: LIST
52553: LIST
52554: PUSH
52555: EMPTY
52556: LIST
52557: LIST
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: LIST
52568: LIST
52569: LIST
52570: LIST
52571: LIST
52572: LIST
52573: LIST
52574: LIST
52575: LIST
52576: LIST
52577: LIST
52578: LIST
52579: LIST
52580: LIST
52581: LIST
52582: LIST
52583: LIST
52584: LIST
52585: LIST
52586: LIST
52587: LIST
52588: LIST
52589: LIST
52590: LIST
52591: LIST
52592: LIST
52593: LIST
52594: LIST
52595: LIST
52596: LIST
52597: LIST
52598: LIST
52599: LIST
52600: LIST
52601: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
52602: LD_ADDR_VAR 0 33
52606: PUSH
52607: LD_INT 4
52609: NEG
52610: PUSH
52611: LD_INT 4
52613: NEG
52614: PUSH
52615: EMPTY
52616: LIST
52617: LIST
52618: PUSH
52619: LD_INT 4
52621: NEG
52622: PUSH
52623: LD_INT 5
52625: NEG
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 3
52633: NEG
52634: PUSH
52635: LD_INT 4
52637: NEG
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 3
52645: NEG
52646: PUSH
52647: LD_INT 3
52649: NEG
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 4
52657: NEG
52658: PUSH
52659: LD_INT 3
52661: NEG
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 5
52669: NEG
52670: PUSH
52671: LD_INT 4
52673: NEG
52674: PUSH
52675: EMPTY
52676: LIST
52677: LIST
52678: PUSH
52679: LD_INT 5
52681: NEG
52682: PUSH
52683: LD_INT 5
52685: NEG
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 3
52693: NEG
52694: PUSH
52695: LD_INT 5
52697: NEG
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 5
52705: NEG
52706: PUSH
52707: LD_INT 3
52709: NEG
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 0
52717: PUSH
52718: LD_INT 3
52720: NEG
52721: PUSH
52722: EMPTY
52723: LIST
52724: LIST
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: LD_INT 4
52731: NEG
52732: PUSH
52733: EMPTY
52734: LIST
52735: LIST
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: LD_INT 3
52742: NEG
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: LD_INT 2
52753: NEG
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: LD_INT 2
52764: NEG
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: LD_INT 3
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: LD_INT 4
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: LD_INT 2
52796: PUSH
52797: LD_INT 2
52799: NEG
52800: PUSH
52801: EMPTY
52802: LIST
52803: LIST
52804: PUSH
52805: LD_INT 2
52807: NEG
52808: PUSH
52809: LD_INT 4
52811: NEG
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 4
52819: PUSH
52820: LD_INT 0
52822: PUSH
52823: EMPTY
52824: LIST
52825: LIST
52826: PUSH
52827: LD_INT 4
52829: PUSH
52830: LD_INT 1
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 5
52840: PUSH
52841: LD_INT 0
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 5
52850: PUSH
52851: LD_INT 1
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 4
52860: PUSH
52861: LD_INT 1
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 3
52870: PUSH
52871: LD_INT 0
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 3
52880: PUSH
52881: LD_INT 1
52883: NEG
52884: PUSH
52885: EMPTY
52886: LIST
52887: LIST
52888: PUSH
52889: LD_INT 3
52891: PUSH
52892: LD_INT 2
52894: NEG
52895: PUSH
52896: EMPTY
52897: LIST
52898: LIST
52899: PUSH
52900: LD_INT 5
52902: PUSH
52903: LD_INT 2
52905: PUSH
52906: EMPTY
52907: LIST
52908: LIST
52909: PUSH
52910: LD_INT 3
52912: PUSH
52913: LD_INT 3
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 3
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: LD_INT 4
52932: PUSH
52933: LD_INT 3
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: PUSH
52940: LD_INT 4
52942: PUSH
52943: LD_INT 4
52945: PUSH
52946: EMPTY
52947: LIST
52948: LIST
52949: PUSH
52950: LD_INT 3
52952: PUSH
52953: LD_INT 4
52955: PUSH
52956: EMPTY
52957: LIST
52958: LIST
52959: PUSH
52960: LD_INT 2
52962: PUSH
52963: LD_INT 3
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: LD_INT 2
52972: PUSH
52973: LD_INT 2
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 4
52982: PUSH
52983: LD_INT 2
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 2
52992: PUSH
52993: LD_INT 4
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 0
53002: PUSH
53003: LD_INT 4
53005: PUSH
53006: EMPTY
53007: LIST
53008: LIST
53009: PUSH
53010: LD_INT 0
53012: PUSH
53013: LD_INT 3
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: PUSH
53020: LD_INT 1
53022: PUSH
53023: LD_INT 4
53025: PUSH
53026: EMPTY
53027: LIST
53028: LIST
53029: PUSH
53030: LD_INT 1
53032: PUSH
53033: LD_INT 5
53035: PUSH
53036: EMPTY
53037: LIST
53038: LIST
53039: PUSH
53040: LD_INT 0
53042: PUSH
53043: LD_INT 5
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 1
53052: NEG
53053: PUSH
53054: LD_INT 4
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 1
53063: NEG
53064: PUSH
53065: LD_INT 3
53067: PUSH
53068: EMPTY
53069: LIST
53070: LIST
53071: PUSH
53072: LD_INT 2
53074: PUSH
53075: LD_INT 5
53077: PUSH
53078: EMPTY
53079: LIST
53080: LIST
53081: PUSH
53082: LD_INT 2
53084: NEG
53085: PUSH
53086: LD_INT 3
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: LIST
53099: LIST
53100: LIST
53101: LIST
53102: LIST
53103: LIST
53104: LIST
53105: LIST
53106: LIST
53107: LIST
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: LIST
53121: LIST
53122: LIST
53123: LIST
53124: LIST
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: LIST
53130: LIST
53131: LIST
53132: LIST
53133: LIST
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53140: LD_ADDR_VAR 0 34
53144: PUSH
53145: LD_INT 0
53147: PUSH
53148: LD_INT 4
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 0
53158: PUSH
53159: LD_INT 5
53161: NEG
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 1
53169: PUSH
53170: LD_INT 4
53172: NEG
53173: PUSH
53174: EMPTY
53175: LIST
53176: LIST
53177: PUSH
53178: LD_INT 1
53180: PUSH
53181: LD_INT 3
53183: NEG
53184: PUSH
53185: EMPTY
53186: LIST
53187: LIST
53188: PUSH
53189: LD_INT 0
53191: PUSH
53192: LD_INT 3
53194: NEG
53195: PUSH
53196: EMPTY
53197: LIST
53198: LIST
53199: PUSH
53200: LD_INT 1
53202: NEG
53203: PUSH
53204: LD_INT 4
53206: NEG
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 1
53214: NEG
53215: PUSH
53216: LD_INT 5
53218: NEG
53219: PUSH
53220: EMPTY
53221: LIST
53222: LIST
53223: PUSH
53224: LD_INT 2
53226: PUSH
53227: LD_INT 3
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 2
53237: NEG
53238: PUSH
53239: LD_INT 5
53241: NEG
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 3
53249: PUSH
53250: LD_INT 0
53252: PUSH
53253: EMPTY
53254: LIST
53255: LIST
53256: PUSH
53257: LD_INT 3
53259: PUSH
53260: LD_INT 1
53262: NEG
53263: PUSH
53264: EMPTY
53265: LIST
53266: LIST
53267: PUSH
53268: LD_INT 4
53270: PUSH
53271: LD_INT 0
53273: PUSH
53274: EMPTY
53275: LIST
53276: LIST
53277: PUSH
53278: LD_INT 4
53280: PUSH
53281: LD_INT 1
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 3
53290: PUSH
53291: LD_INT 1
53293: PUSH
53294: EMPTY
53295: LIST
53296: LIST
53297: PUSH
53298: LD_INT 2
53300: PUSH
53301: LD_INT 0
53303: PUSH
53304: EMPTY
53305: LIST
53306: LIST
53307: PUSH
53308: LD_INT 2
53310: PUSH
53311: LD_INT 1
53313: NEG
53314: PUSH
53315: EMPTY
53316: LIST
53317: LIST
53318: PUSH
53319: LD_INT 2
53321: PUSH
53322: LD_INT 2
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 4
53332: PUSH
53333: LD_INT 2
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 4
53342: PUSH
53343: LD_INT 4
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: PUSH
53350: LD_INT 4
53352: PUSH
53353: LD_INT 3
53355: PUSH
53356: EMPTY
53357: LIST
53358: LIST
53359: PUSH
53360: LD_INT 5
53362: PUSH
53363: LD_INT 4
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: PUSH
53370: LD_INT 5
53372: PUSH
53373: LD_INT 5
53375: PUSH
53376: EMPTY
53377: LIST
53378: LIST
53379: PUSH
53380: LD_INT 4
53382: PUSH
53383: LD_INT 5
53385: PUSH
53386: EMPTY
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 3
53392: PUSH
53393: LD_INT 4
53395: PUSH
53396: EMPTY
53397: LIST
53398: LIST
53399: PUSH
53400: LD_INT 3
53402: PUSH
53403: LD_INT 3
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 5
53412: PUSH
53413: LD_INT 3
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: PUSH
53420: LD_INT 3
53422: PUSH
53423: LD_INT 5
53425: PUSH
53426: EMPTY
53427: LIST
53428: LIST
53429: PUSH
53430: LD_INT 0
53432: PUSH
53433: LD_INT 3
53435: PUSH
53436: EMPTY
53437: LIST
53438: LIST
53439: PUSH
53440: LD_INT 0
53442: PUSH
53443: LD_INT 2
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 1
53452: PUSH
53453: LD_INT 3
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: PUSH
53460: LD_INT 1
53462: PUSH
53463: LD_INT 4
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 0
53472: PUSH
53473: LD_INT 4
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 1
53482: NEG
53483: PUSH
53484: LD_INT 3
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 1
53493: NEG
53494: PUSH
53495: LD_INT 2
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 2
53504: PUSH
53505: LD_INT 4
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 2
53514: NEG
53515: PUSH
53516: LD_INT 2
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 4
53525: NEG
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 4
53536: NEG
53537: PUSH
53538: LD_INT 1
53540: NEG
53541: PUSH
53542: EMPTY
53543: LIST
53544: LIST
53545: PUSH
53546: LD_INT 3
53548: NEG
53549: PUSH
53550: LD_INT 0
53552: PUSH
53553: EMPTY
53554: LIST
53555: LIST
53556: PUSH
53557: LD_INT 3
53559: NEG
53560: PUSH
53561: LD_INT 1
53563: PUSH
53564: EMPTY
53565: LIST
53566: LIST
53567: PUSH
53568: LD_INT 4
53570: NEG
53571: PUSH
53572: LD_INT 1
53574: PUSH
53575: EMPTY
53576: LIST
53577: LIST
53578: PUSH
53579: LD_INT 5
53581: NEG
53582: PUSH
53583: LD_INT 0
53585: PUSH
53586: EMPTY
53587: LIST
53588: LIST
53589: PUSH
53590: LD_INT 5
53592: NEG
53593: PUSH
53594: LD_INT 1
53596: NEG
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 5
53604: NEG
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: EMPTY
53611: LIST
53612: LIST
53613: PUSH
53614: LD_INT 3
53616: NEG
53617: PUSH
53618: LD_INT 2
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: LIST
53634: LIST
53635: LIST
53636: LIST
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: LIST
53642: LIST
53643: LIST
53644: LIST
53645: LIST
53646: LIST
53647: LIST
53648: LIST
53649: LIST
53650: LIST
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: LIST
53668: LIST
53669: LIST
53670: LIST
53671: ST_TO_ADDR
// end ; end ;
53672: GO 53675
53674: POP
// case btype of b_depot , b_warehouse :
53675: LD_VAR 0 1
53679: PUSH
53680: LD_INT 0
53682: DOUBLE
53683: EQUAL
53684: IFTRUE 53694
53686: LD_INT 1
53688: DOUBLE
53689: EQUAL
53690: IFTRUE 53694
53692: GO 53895
53694: POP
// case nation of nation_american :
53695: LD_VAR 0 5
53699: PUSH
53700: LD_INT 1
53702: DOUBLE
53703: EQUAL
53704: IFTRUE 53708
53706: GO 53764
53708: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53709: LD_ADDR_VAR 0 9
53713: PUSH
53714: LD_VAR 0 11
53718: PUSH
53719: LD_VAR 0 12
53723: PUSH
53724: LD_VAR 0 13
53728: PUSH
53729: LD_VAR 0 14
53733: PUSH
53734: LD_VAR 0 15
53738: PUSH
53739: LD_VAR 0 16
53743: PUSH
53744: EMPTY
53745: LIST
53746: LIST
53747: LIST
53748: LIST
53749: LIST
53750: LIST
53751: PUSH
53752: LD_VAR 0 4
53756: PUSH
53757: LD_INT 1
53759: PLUS
53760: ARRAY
53761: ST_TO_ADDR
53762: GO 53893
53764: LD_INT 2
53766: DOUBLE
53767: EQUAL
53768: IFTRUE 53772
53770: GO 53828
53772: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53773: LD_ADDR_VAR 0 9
53777: PUSH
53778: LD_VAR 0 17
53782: PUSH
53783: LD_VAR 0 18
53787: PUSH
53788: LD_VAR 0 19
53792: PUSH
53793: LD_VAR 0 20
53797: PUSH
53798: LD_VAR 0 21
53802: PUSH
53803: LD_VAR 0 22
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: PUSH
53816: LD_VAR 0 4
53820: PUSH
53821: LD_INT 1
53823: PLUS
53824: ARRAY
53825: ST_TO_ADDR
53826: GO 53893
53828: LD_INT 3
53830: DOUBLE
53831: EQUAL
53832: IFTRUE 53836
53834: GO 53892
53836: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53837: LD_ADDR_VAR 0 9
53841: PUSH
53842: LD_VAR 0 23
53846: PUSH
53847: LD_VAR 0 24
53851: PUSH
53852: LD_VAR 0 25
53856: PUSH
53857: LD_VAR 0 26
53861: PUSH
53862: LD_VAR 0 27
53866: PUSH
53867: LD_VAR 0 28
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: LIST
53876: LIST
53877: LIST
53878: LIST
53879: PUSH
53880: LD_VAR 0 4
53884: PUSH
53885: LD_INT 1
53887: PLUS
53888: ARRAY
53889: ST_TO_ADDR
53890: GO 53893
53892: POP
53893: GO 54448
53895: LD_INT 2
53897: DOUBLE
53898: EQUAL
53899: IFTRUE 53909
53901: LD_INT 3
53903: DOUBLE
53904: EQUAL
53905: IFTRUE 53909
53907: GO 53965
53909: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53910: LD_ADDR_VAR 0 9
53914: PUSH
53915: LD_VAR 0 29
53919: PUSH
53920: LD_VAR 0 30
53924: PUSH
53925: LD_VAR 0 31
53929: PUSH
53930: LD_VAR 0 32
53934: PUSH
53935: LD_VAR 0 33
53939: PUSH
53940: LD_VAR 0 34
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: LIST
53949: LIST
53950: LIST
53951: LIST
53952: PUSH
53953: LD_VAR 0 4
53957: PUSH
53958: LD_INT 1
53960: PLUS
53961: ARRAY
53962: ST_TO_ADDR
53963: GO 54448
53965: LD_INT 16
53967: DOUBLE
53968: EQUAL
53969: IFTRUE 54027
53971: LD_INT 17
53973: DOUBLE
53974: EQUAL
53975: IFTRUE 54027
53977: LD_INT 18
53979: DOUBLE
53980: EQUAL
53981: IFTRUE 54027
53983: LD_INT 19
53985: DOUBLE
53986: EQUAL
53987: IFTRUE 54027
53989: LD_INT 22
53991: DOUBLE
53992: EQUAL
53993: IFTRUE 54027
53995: LD_INT 20
53997: DOUBLE
53998: EQUAL
53999: IFTRUE 54027
54001: LD_INT 21
54003: DOUBLE
54004: EQUAL
54005: IFTRUE 54027
54007: LD_INT 23
54009: DOUBLE
54010: EQUAL
54011: IFTRUE 54027
54013: LD_INT 24
54015: DOUBLE
54016: EQUAL
54017: IFTRUE 54027
54019: LD_INT 25
54021: DOUBLE
54022: EQUAL
54023: IFTRUE 54027
54025: GO 54083
54027: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54028: LD_ADDR_VAR 0 9
54032: PUSH
54033: LD_VAR 0 35
54037: PUSH
54038: LD_VAR 0 36
54042: PUSH
54043: LD_VAR 0 37
54047: PUSH
54048: LD_VAR 0 38
54052: PUSH
54053: LD_VAR 0 39
54057: PUSH
54058: LD_VAR 0 40
54062: PUSH
54063: EMPTY
54064: LIST
54065: LIST
54066: LIST
54067: LIST
54068: LIST
54069: LIST
54070: PUSH
54071: LD_VAR 0 4
54075: PUSH
54076: LD_INT 1
54078: PLUS
54079: ARRAY
54080: ST_TO_ADDR
54081: GO 54448
54083: LD_INT 6
54085: DOUBLE
54086: EQUAL
54087: IFTRUE 54139
54089: LD_INT 7
54091: DOUBLE
54092: EQUAL
54093: IFTRUE 54139
54095: LD_INT 8
54097: DOUBLE
54098: EQUAL
54099: IFTRUE 54139
54101: LD_INT 13
54103: DOUBLE
54104: EQUAL
54105: IFTRUE 54139
54107: LD_INT 12
54109: DOUBLE
54110: EQUAL
54111: IFTRUE 54139
54113: LD_INT 15
54115: DOUBLE
54116: EQUAL
54117: IFTRUE 54139
54119: LD_INT 11
54121: DOUBLE
54122: EQUAL
54123: IFTRUE 54139
54125: LD_INT 14
54127: DOUBLE
54128: EQUAL
54129: IFTRUE 54139
54131: LD_INT 10
54133: DOUBLE
54134: EQUAL
54135: IFTRUE 54139
54137: GO 54195
54139: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54140: LD_ADDR_VAR 0 9
54144: PUSH
54145: LD_VAR 0 41
54149: PUSH
54150: LD_VAR 0 42
54154: PUSH
54155: LD_VAR 0 43
54159: PUSH
54160: LD_VAR 0 44
54164: PUSH
54165: LD_VAR 0 45
54169: PUSH
54170: LD_VAR 0 46
54174: PUSH
54175: EMPTY
54176: LIST
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: LIST
54182: PUSH
54183: LD_VAR 0 4
54187: PUSH
54188: LD_INT 1
54190: PLUS
54191: ARRAY
54192: ST_TO_ADDR
54193: GO 54448
54195: LD_INT 36
54197: DOUBLE
54198: EQUAL
54199: IFTRUE 54203
54201: GO 54259
54203: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54204: LD_ADDR_VAR 0 9
54208: PUSH
54209: LD_VAR 0 47
54213: PUSH
54214: LD_VAR 0 48
54218: PUSH
54219: LD_VAR 0 49
54223: PUSH
54224: LD_VAR 0 50
54228: PUSH
54229: LD_VAR 0 51
54233: PUSH
54234: LD_VAR 0 52
54238: PUSH
54239: EMPTY
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: PUSH
54247: LD_VAR 0 4
54251: PUSH
54252: LD_INT 1
54254: PLUS
54255: ARRAY
54256: ST_TO_ADDR
54257: GO 54448
54259: LD_INT 4
54261: DOUBLE
54262: EQUAL
54263: IFTRUE 54285
54265: LD_INT 5
54267: DOUBLE
54268: EQUAL
54269: IFTRUE 54285
54271: LD_INT 34
54273: DOUBLE
54274: EQUAL
54275: IFTRUE 54285
54277: LD_INT 37
54279: DOUBLE
54280: EQUAL
54281: IFTRUE 54285
54283: GO 54341
54285: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54286: LD_ADDR_VAR 0 9
54290: PUSH
54291: LD_VAR 0 53
54295: PUSH
54296: LD_VAR 0 54
54300: PUSH
54301: LD_VAR 0 55
54305: PUSH
54306: LD_VAR 0 56
54310: PUSH
54311: LD_VAR 0 57
54315: PUSH
54316: LD_VAR 0 58
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: PUSH
54329: LD_VAR 0 4
54333: PUSH
54334: LD_INT 1
54336: PLUS
54337: ARRAY
54338: ST_TO_ADDR
54339: GO 54448
54341: LD_INT 31
54343: DOUBLE
54344: EQUAL
54345: IFTRUE 54391
54347: LD_INT 32
54349: DOUBLE
54350: EQUAL
54351: IFTRUE 54391
54353: LD_INT 33
54355: DOUBLE
54356: EQUAL
54357: IFTRUE 54391
54359: LD_INT 27
54361: DOUBLE
54362: EQUAL
54363: IFTRUE 54391
54365: LD_INT 26
54367: DOUBLE
54368: EQUAL
54369: IFTRUE 54391
54371: LD_INT 28
54373: DOUBLE
54374: EQUAL
54375: IFTRUE 54391
54377: LD_INT 29
54379: DOUBLE
54380: EQUAL
54381: IFTRUE 54391
54383: LD_INT 30
54385: DOUBLE
54386: EQUAL
54387: IFTRUE 54391
54389: GO 54447
54391: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54392: LD_ADDR_VAR 0 9
54396: PUSH
54397: LD_VAR 0 59
54401: PUSH
54402: LD_VAR 0 60
54406: PUSH
54407: LD_VAR 0 61
54411: PUSH
54412: LD_VAR 0 62
54416: PUSH
54417: LD_VAR 0 63
54421: PUSH
54422: LD_VAR 0 64
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: LIST
54431: LIST
54432: LIST
54433: LIST
54434: PUSH
54435: LD_VAR 0 4
54439: PUSH
54440: LD_INT 1
54442: PLUS
54443: ARRAY
54444: ST_TO_ADDR
54445: GO 54448
54447: POP
// temp_list2 = [ ] ;
54448: LD_ADDR_VAR 0 10
54452: PUSH
54453: EMPTY
54454: ST_TO_ADDR
// for i in temp_list do
54455: LD_ADDR_VAR 0 8
54459: PUSH
54460: LD_VAR 0 9
54464: PUSH
54465: FOR_IN
54466: IFFALSE 54518
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54468: LD_ADDR_VAR 0 10
54472: PUSH
54473: LD_VAR 0 10
54477: PUSH
54478: LD_VAR 0 8
54482: PUSH
54483: LD_INT 1
54485: ARRAY
54486: PUSH
54487: LD_VAR 0 2
54491: PLUS
54492: PUSH
54493: LD_VAR 0 8
54497: PUSH
54498: LD_INT 2
54500: ARRAY
54501: PUSH
54502: LD_VAR 0 3
54506: PLUS
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: PUSH
54512: EMPTY
54513: LIST
54514: ADD
54515: ST_TO_ADDR
54516: GO 54465
54518: POP
54519: POP
// result = temp_list2 ;
54520: LD_ADDR_VAR 0 7
54524: PUSH
54525: LD_VAR 0 10
54529: ST_TO_ADDR
// end ;
54530: LD_VAR 0 7
54534: RET
// export function EnemyInRange ( unit , dist ) ; begin
54535: LD_INT 0
54537: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
54538: LD_ADDR_VAR 0 3
54542: PUSH
54543: LD_VAR 0 1
54547: PPUSH
54548: CALL_OW 255
54552: PPUSH
54553: LD_VAR 0 1
54557: PPUSH
54558: CALL_OW 250
54562: PPUSH
54563: LD_VAR 0 1
54567: PPUSH
54568: CALL_OW 251
54572: PPUSH
54573: LD_VAR 0 2
54577: PPUSH
54578: CALL 27931 0 4
54582: PUSH
54583: LD_INT 4
54585: ARRAY
54586: ST_TO_ADDR
// end ;
54587: LD_VAR 0 3
54591: RET
// export function PlayerSeeMe ( unit ) ; begin
54592: LD_INT 0
54594: PPUSH
// result := See ( your_side , unit ) ;
54595: LD_ADDR_VAR 0 2
54599: PUSH
54600: LD_OWVAR 2
54604: PPUSH
54605: LD_VAR 0 1
54609: PPUSH
54610: CALL_OW 292
54614: ST_TO_ADDR
// end ;
54615: LD_VAR 0 2
54619: RET
// export function ReverseDir ( unit ) ; begin
54620: LD_INT 0
54622: PPUSH
// if not unit then
54623: LD_VAR 0 1
54627: NOT
54628: IFFALSE 54632
// exit ;
54630: GO 54655
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
54632: LD_ADDR_VAR 0 2
54636: PUSH
54637: LD_VAR 0 1
54641: PPUSH
54642: CALL_OW 254
54646: PUSH
54647: LD_INT 3
54649: PLUS
54650: PUSH
54651: LD_INT 6
54653: MOD
54654: ST_TO_ADDR
// end ;
54655: LD_VAR 0 2
54659: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
54660: LD_INT 0
54662: PPUSH
54663: PPUSH
54664: PPUSH
54665: PPUSH
54666: PPUSH
// if not hexes then
54667: LD_VAR 0 2
54671: NOT
54672: IFFALSE 54676
// exit ;
54674: GO 54824
// dist := 9999 ;
54676: LD_ADDR_VAR 0 5
54680: PUSH
54681: LD_INT 9999
54683: ST_TO_ADDR
// for i = 1 to hexes do
54684: LD_ADDR_VAR 0 4
54688: PUSH
54689: DOUBLE
54690: LD_INT 1
54692: DEC
54693: ST_TO_ADDR
54694: LD_VAR 0 2
54698: PUSH
54699: FOR_TO
54700: IFFALSE 54812
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54702: LD_VAR 0 1
54706: PPUSH
54707: LD_VAR 0 2
54711: PUSH
54712: LD_VAR 0 4
54716: ARRAY
54717: PUSH
54718: LD_INT 1
54720: ARRAY
54721: PPUSH
54722: LD_VAR 0 2
54726: PUSH
54727: LD_VAR 0 4
54731: ARRAY
54732: PUSH
54733: LD_INT 2
54735: ARRAY
54736: PPUSH
54737: CALL_OW 297
54741: PUSH
54742: LD_VAR 0 5
54746: LESS
54747: IFFALSE 54810
// begin hex := hexes [ i ] ;
54749: LD_ADDR_VAR 0 7
54753: PUSH
54754: LD_VAR 0 2
54758: PUSH
54759: LD_VAR 0 4
54763: ARRAY
54764: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54765: LD_ADDR_VAR 0 5
54769: PUSH
54770: LD_VAR 0 1
54774: PPUSH
54775: LD_VAR 0 2
54779: PUSH
54780: LD_VAR 0 4
54784: ARRAY
54785: PUSH
54786: LD_INT 1
54788: ARRAY
54789: PPUSH
54790: LD_VAR 0 2
54794: PUSH
54795: LD_VAR 0 4
54799: ARRAY
54800: PUSH
54801: LD_INT 2
54803: ARRAY
54804: PPUSH
54805: CALL_OW 297
54809: ST_TO_ADDR
// end ; end ;
54810: GO 54699
54812: POP
54813: POP
// result := hex ;
54814: LD_ADDR_VAR 0 3
54818: PUSH
54819: LD_VAR 0 7
54823: ST_TO_ADDR
// end ;
54824: LD_VAR 0 3
54828: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54829: LD_INT 0
54831: PPUSH
54832: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54833: LD_VAR 0 1
54837: NOT
54838: PUSH
54839: LD_VAR 0 1
54843: PUSH
54844: LD_INT 21
54846: PUSH
54847: LD_INT 2
54849: PUSH
54850: EMPTY
54851: LIST
54852: LIST
54853: PUSH
54854: LD_INT 23
54856: PUSH
54857: LD_INT 2
54859: PUSH
54860: EMPTY
54861: LIST
54862: LIST
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PPUSH
54868: CALL_OW 69
54872: IN
54873: NOT
54874: OR
54875: IFFALSE 54879
// exit ;
54877: GO 54926
// for i = 1 to 3 do
54879: LD_ADDR_VAR 0 3
54883: PUSH
54884: DOUBLE
54885: LD_INT 1
54887: DEC
54888: ST_TO_ADDR
54889: LD_INT 3
54891: PUSH
54892: FOR_TO
54893: IFFALSE 54924
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54895: LD_VAR 0 1
54899: PPUSH
54900: CALL_OW 250
54904: PPUSH
54905: LD_VAR 0 1
54909: PPUSH
54910: CALL_OW 251
54914: PPUSH
54915: LD_INT 1
54917: PPUSH
54918: CALL_OW 453
54922: GO 54892
54924: POP
54925: POP
// end ;
54926: LD_VAR 0 2
54930: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54931: LD_INT 0
54933: PPUSH
54934: PPUSH
54935: PPUSH
54936: PPUSH
54937: PPUSH
54938: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54939: LD_VAR 0 1
54943: NOT
54944: PUSH
54945: LD_VAR 0 2
54949: NOT
54950: OR
54951: PUSH
54952: LD_VAR 0 1
54956: PPUSH
54957: CALL_OW 314
54961: OR
54962: IFFALSE 54966
// exit ;
54964: GO 55407
// x := GetX ( enemy_unit ) ;
54966: LD_ADDR_VAR 0 7
54970: PUSH
54971: LD_VAR 0 2
54975: PPUSH
54976: CALL_OW 250
54980: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54981: LD_ADDR_VAR 0 8
54985: PUSH
54986: LD_VAR 0 2
54990: PPUSH
54991: CALL_OW 251
54995: ST_TO_ADDR
// if not x or not y then
54996: LD_VAR 0 7
55000: NOT
55001: PUSH
55002: LD_VAR 0 8
55006: NOT
55007: OR
55008: IFFALSE 55012
// exit ;
55010: GO 55407
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55012: LD_ADDR_VAR 0 6
55016: PUSH
55017: LD_VAR 0 7
55021: PPUSH
55022: LD_INT 0
55024: PPUSH
55025: LD_INT 4
55027: PPUSH
55028: CALL_OW 272
55032: PUSH
55033: LD_VAR 0 8
55037: PPUSH
55038: LD_INT 0
55040: PPUSH
55041: LD_INT 4
55043: PPUSH
55044: CALL_OW 273
55048: PUSH
55049: EMPTY
55050: LIST
55051: LIST
55052: PUSH
55053: LD_VAR 0 7
55057: PPUSH
55058: LD_INT 1
55060: PPUSH
55061: LD_INT 4
55063: PPUSH
55064: CALL_OW 272
55068: PUSH
55069: LD_VAR 0 8
55073: PPUSH
55074: LD_INT 1
55076: PPUSH
55077: LD_INT 4
55079: PPUSH
55080: CALL_OW 273
55084: PUSH
55085: EMPTY
55086: LIST
55087: LIST
55088: PUSH
55089: LD_VAR 0 7
55093: PPUSH
55094: LD_INT 2
55096: PPUSH
55097: LD_INT 4
55099: PPUSH
55100: CALL_OW 272
55104: PUSH
55105: LD_VAR 0 8
55109: PPUSH
55110: LD_INT 2
55112: PPUSH
55113: LD_INT 4
55115: PPUSH
55116: CALL_OW 273
55120: PUSH
55121: EMPTY
55122: LIST
55123: LIST
55124: PUSH
55125: LD_VAR 0 7
55129: PPUSH
55130: LD_INT 3
55132: PPUSH
55133: LD_INT 4
55135: PPUSH
55136: CALL_OW 272
55140: PUSH
55141: LD_VAR 0 8
55145: PPUSH
55146: LD_INT 3
55148: PPUSH
55149: LD_INT 4
55151: PPUSH
55152: CALL_OW 273
55156: PUSH
55157: EMPTY
55158: LIST
55159: LIST
55160: PUSH
55161: LD_VAR 0 7
55165: PPUSH
55166: LD_INT 4
55168: PPUSH
55169: LD_INT 4
55171: PPUSH
55172: CALL_OW 272
55176: PUSH
55177: LD_VAR 0 8
55181: PPUSH
55182: LD_INT 4
55184: PPUSH
55185: LD_INT 4
55187: PPUSH
55188: CALL_OW 273
55192: PUSH
55193: EMPTY
55194: LIST
55195: LIST
55196: PUSH
55197: LD_VAR 0 7
55201: PPUSH
55202: LD_INT 5
55204: PPUSH
55205: LD_INT 4
55207: PPUSH
55208: CALL_OW 272
55212: PUSH
55213: LD_VAR 0 8
55217: PPUSH
55218: LD_INT 5
55220: PPUSH
55221: LD_INT 4
55223: PPUSH
55224: CALL_OW 273
55228: PUSH
55229: EMPTY
55230: LIST
55231: LIST
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: ST_TO_ADDR
// for i = tmp downto 1 do
55241: LD_ADDR_VAR 0 4
55245: PUSH
55246: DOUBLE
55247: LD_VAR 0 6
55251: INC
55252: ST_TO_ADDR
55253: LD_INT 1
55255: PUSH
55256: FOR_DOWNTO
55257: IFFALSE 55358
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55259: LD_VAR 0 6
55263: PUSH
55264: LD_VAR 0 4
55268: ARRAY
55269: PUSH
55270: LD_INT 1
55272: ARRAY
55273: PPUSH
55274: LD_VAR 0 6
55278: PUSH
55279: LD_VAR 0 4
55283: ARRAY
55284: PUSH
55285: LD_INT 2
55287: ARRAY
55288: PPUSH
55289: CALL_OW 488
55293: NOT
55294: PUSH
55295: LD_VAR 0 6
55299: PUSH
55300: LD_VAR 0 4
55304: ARRAY
55305: PUSH
55306: LD_INT 1
55308: ARRAY
55309: PPUSH
55310: LD_VAR 0 6
55314: PUSH
55315: LD_VAR 0 4
55319: ARRAY
55320: PUSH
55321: LD_INT 2
55323: ARRAY
55324: PPUSH
55325: CALL_OW 428
55329: PUSH
55330: LD_INT 0
55332: NONEQUAL
55333: OR
55334: IFFALSE 55356
// tmp := Delete ( tmp , i ) ;
55336: LD_ADDR_VAR 0 6
55340: PUSH
55341: LD_VAR 0 6
55345: PPUSH
55346: LD_VAR 0 4
55350: PPUSH
55351: CALL_OW 3
55355: ST_TO_ADDR
55356: GO 55256
55358: POP
55359: POP
// j := GetClosestHex ( unit , tmp ) ;
55360: LD_ADDR_VAR 0 5
55364: PUSH
55365: LD_VAR 0 1
55369: PPUSH
55370: LD_VAR 0 6
55374: PPUSH
55375: CALL 54660 0 2
55379: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55380: LD_VAR 0 1
55384: PPUSH
55385: LD_VAR 0 5
55389: PUSH
55390: LD_INT 1
55392: ARRAY
55393: PPUSH
55394: LD_VAR 0 5
55398: PUSH
55399: LD_INT 2
55401: ARRAY
55402: PPUSH
55403: CALL_OW 111
// end ;
55407: LD_VAR 0 3
55411: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55412: LD_INT 0
55414: PPUSH
55415: PPUSH
55416: PPUSH
// uc_side = 0 ;
55417: LD_ADDR_OWVAR 20
55421: PUSH
55422: LD_INT 0
55424: ST_TO_ADDR
// uc_nation = 0 ;
55425: LD_ADDR_OWVAR 21
55429: PUSH
55430: LD_INT 0
55432: ST_TO_ADDR
// InitHc_All ( ) ;
55433: CALL_OW 584
// InitVc ;
55437: CALL_OW 20
// if mastodonts then
55441: LD_VAR 0 6
55445: IFFALSE 55512
// for i = 1 to mastodonts do
55447: LD_ADDR_VAR 0 11
55451: PUSH
55452: DOUBLE
55453: LD_INT 1
55455: DEC
55456: ST_TO_ADDR
55457: LD_VAR 0 6
55461: PUSH
55462: FOR_TO
55463: IFFALSE 55510
// begin vc_chassis := 31 ;
55465: LD_ADDR_OWVAR 37
55469: PUSH
55470: LD_INT 31
55472: ST_TO_ADDR
// vc_control := control_rider ;
55473: LD_ADDR_OWVAR 38
55477: PUSH
55478: LD_INT 4
55480: ST_TO_ADDR
// animal := CreateVehicle ;
55481: LD_ADDR_VAR 0 12
55485: PUSH
55486: CALL_OW 45
55490: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55491: LD_VAR 0 12
55495: PPUSH
55496: LD_VAR 0 8
55500: PPUSH
55501: LD_INT 0
55503: PPUSH
55504: CALL 57700 0 3
// end ;
55508: GO 55462
55510: POP
55511: POP
// if horses then
55512: LD_VAR 0 5
55516: IFFALSE 55583
// for i = 1 to horses do
55518: LD_ADDR_VAR 0 11
55522: PUSH
55523: DOUBLE
55524: LD_INT 1
55526: DEC
55527: ST_TO_ADDR
55528: LD_VAR 0 5
55532: PUSH
55533: FOR_TO
55534: IFFALSE 55581
// begin hc_class := 21 ;
55536: LD_ADDR_OWVAR 28
55540: PUSH
55541: LD_INT 21
55543: ST_TO_ADDR
// hc_gallery :=  ;
55544: LD_ADDR_OWVAR 33
55548: PUSH
55549: LD_STRING 
55551: ST_TO_ADDR
// animal := CreateHuman ;
55552: LD_ADDR_VAR 0 12
55556: PUSH
55557: CALL_OW 44
55561: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55562: LD_VAR 0 12
55566: PPUSH
55567: LD_VAR 0 8
55571: PPUSH
55572: LD_INT 0
55574: PPUSH
55575: CALL 57700 0 3
// end ;
55579: GO 55533
55581: POP
55582: POP
// if birds then
55583: LD_VAR 0 1
55587: IFFALSE 55654
// for i = 1 to birds do
55589: LD_ADDR_VAR 0 11
55593: PUSH
55594: DOUBLE
55595: LD_INT 1
55597: DEC
55598: ST_TO_ADDR
55599: LD_VAR 0 1
55603: PUSH
55604: FOR_TO
55605: IFFALSE 55652
// begin hc_class = 18 ;
55607: LD_ADDR_OWVAR 28
55611: PUSH
55612: LD_INT 18
55614: ST_TO_ADDR
// hc_gallery =  ;
55615: LD_ADDR_OWVAR 33
55619: PUSH
55620: LD_STRING 
55622: ST_TO_ADDR
// animal := CreateHuman ;
55623: LD_ADDR_VAR 0 12
55627: PUSH
55628: CALL_OW 44
55632: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55633: LD_VAR 0 12
55637: PPUSH
55638: LD_VAR 0 8
55642: PPUSH
55643: LD_INT 0
55645: PPUSH
55646: CALL 57700 0 3
// end ;
55650: GO 55604
55652: POP
55653: POP
// if tigers then
55654: LD_VAR 0 2
55658: IFFALSE 55742
// for i = 1 to tigers do
55660: LD_ADDR_VAR 0 11
55664: PUSH
55665: DOUBLE
55666: LD_INT 1
55668: DEC
55669: ST_TO_ADDR
55670: LD_VAR 0 2
55674: PUSH
55675: FOR_TO
55676: IFFALSE 55740
// begin hc_class = class_tiger ;
55678: LD_ADDR_OWVAR 28
55682: PUSH
55683: LD_INT 14
55685: ST_TO_ADDR
// hc_gallery =  ;
55686: LD_ADDR_OWVAR 33
55690: PUSH
55691: LD_STRING 
55693: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
55694: LD_ADDR_OWVAR 35
55698: PUSH
55699: LD_INT 7
55701: NEG
55702: PPUSH
55703: LD_INT 7
55705: PPUSH
55706: CALL_OW 12
55710: ST_TO_ADDR
// animal := CreateHuman ;
55711: LD_ADDR_VAR 0 12
55715: PUSH
55716: CALL_OW 44
55720: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55721: LD_VAR 0 12
55725: PPUSH
55726: LD_VAR 0 8
55730: PPUSH
55731: LD_INT 0
55733: PPUSH
55734: CALL 57700 0 3
// end ;
55738: GO 55675
55740: POP
55741: POP
// if apemans then
55742: LD_VAR 0 3
55746: IFFALSE 55869
// for i = 1 to apemans do
55748: LD_ADDR_VAR 0 11
55752: PUSH
55753: DOUBLE
55754: LD_INT 1
55756: DEC
55757: ST_TO_ADDR
55758: LD_VAR 0 3
55762: PUSH
55763: FOR_TO
55764: IFFALSE 55867
// begin hc_class = class_apeman ;
55766: LD_ADDR_OWVAR 28
55770: PUSH
55771: LD_INT 12
55773: ST_TO_ADDR
// hc_gallery =  ;
55774: LD_ADDR_OWVAR 33
55778: PUSH
55779: LD_STRING 
55781: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55782: LD_ADDR_OWVAR 35
55786: PUSH
55787: LD_INT 2
55789: NEG
55790: PPUSH
55791: LD_INT 2
55793: PPUSH
55794: CALL_OW 12
55798: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55799: LD_ADDR_OWVAR 31
55803: PUSH
55804: LD_INT 1
55806: PPUSH
55807: LD_INT 3
55809: PPUSH
55810: CALL_OW 12
55814: PUSH
55815: LD_INT 1
55817: PPUSH
55818: LD_INT 3
55820: PPUSH
55821: CALL_OW 12
55825: PUSH
55826: LD_INT 0
55828: PUSH
55829: LD_INT 0
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: LIST
55836: LIST
55837: ST_TO_ADDR
// animal := CreateHuman ;
55838: LD_ADDR_VAR 0 12
55842: PUSH
55843: CALL_OW 44
55847: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55848: LD_VAR 0 12
55852: PPUSH
55853: LD_VAR 0 8
55857: PPUSH
55858: LD_INT 0
55860: PPUSH
55861: CALL 57700 0 3
// end ;
55865: GO 55763
55867: POP
55868: POP
// if enchidnas then
55869: LD_VAR 0 4
55873: IFFALSE 55940
// for i = 1 to enchidnas do
55875: LD_ADDR_VAR 0 11
55879: PUSH
55880: DOUBLE
55881: LD_INT 1
55883: DEC
55884: ST_TO_ADDR
55885: LD_VAR 0 4
55889: PUSH
55890: FOR_TO
55891: IFFALSE 55938
// begin hc_class = 13 ;
55893: LD_ADDR_OWVAR 28
55897: PUSH
55898: LD_INT 13
55900: ST_TO_ADDR
// hc_gallery =  ;
55901: LD_ADDR_OWVAR 33
55905: PUSH
55906: LD_STRING 
55908: ST_TO_ADDR
// animal := CreateHuman ;
55909: LD_ADDR_VAR 0 12
55913: PUSH
55914: CALL_OW 44
55918: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55919: LD_VAR 0 12
55923: PPUSH
55924: LD_VAR 0 8
55928: PPUSH
55929: LD_INT 0
55931: PPUSH
55932: CALL 57700 0 3
// end ;
55936: GO 55890
55938: POP
55939: POP
// if fishes then
55940: LD_VAR 0 7
55944: IFFALSE 56011
// for i = 1 to fishes do
55946: LD_ADDR_VAR 0 11
55950: PUSH
55951: DOUBLE
55952: LD_INT 1
55954: DEC
55955: ST_TO_ADDR
55956: LD_VAR 0 7
55960: PUSH
55961: FOR_TO
55962: IFFALSE 56009
// begin hc_class = 20 ;
55964: LD_ADDR_OWVAR 28
55968: PUSH
55969: LD_INT 20
55971: ST_TO_ADDR
// hc_gallery =  ;
55972: LD_ADDR_OWVAR 33
55976: PUSH
55977: LD_STRING 
55979: ST_TO_ADDR
// animal := CreateHuman ;
55980: LD_ADDR_VAR 0 12
55984: PUSH
55985: CALL_OW 44
55989: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55990: LD_VAR 0 12
55994: PPUSH
55995: LD_VAR 0 9
55999: PPUSH
56000: LD_INT 0
56002: PPUSH
56003: CALL 57700 0 3
// end ;
56007: GO 55961
56009: POP
56010: POP
// end ;
56011: LD_VAR 0 10
56015: RET
// export function WantHeal ( sci , unit ) ; begin
56016: LD_INT 0
56018: PPUSH
// if GetTaskList ( sci ) > 0 then
56019: LD_VAR 0 1
56023: PPUSH
56024: CALL_OW 437
56028: PUSH
56029: LD_INT 0
56031: GREATER
56032: IFFALSE 56102
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56034: LD_VAR 0 1
56038: PPUSH
56039: CALL_OW 437
56043: PUSH
56044: LD_INT 1
56046: ARRAY
56047: PUSH
56048: LD_INT 1
56050: ARRAY
56051: PUSH
56052: LD_STRING l
56054: EQUAL
56055: PUSH
56056: LD_VAR 0 1
56060: PPUSH
56061: CALL_OW 437
56065: PUSH
56066: LD_INT 1
56068: ARRAY
56069: PUSH
56070: LD_INT 4
56072: ARRAY
56073: PUSH
56074: LD_VAR 0 2
56078: EQUAL
56079: AND
56080: IFFALSE 56092
// result := true else
56082: LD_ADDR_VAR 0 3
56086: PUSH
56087: LD_INT 1
56089: ST_TO_ADDR
56090: GO 56100
// result := false ;
56092: LD_ADDR_VAR 0 3
56096: PUSH
56097: LD_INT 0
56099: ST_TO_ADDR
// end else
56100: GO 56110
// result := false ;
56102: LD_ADDR_VAR 0 3
56106: PUSH
56107: LD_INT 0
56109: ST_TO_ADDR
// end ;
56110: LD_VAR 0 3
56114: RET
// export function HealTarget ( sci ) ; begin
56115: LD_INT 0
56117: PPUSH
// if not sci then
56118: LD_VAR 0 1
56122: NOT
56123: IFFALSE 56127
// exit ;
56125: GO 56192
// result := 0 ;
56127: LD_ADDR_VAR 0 2
56131: PUSH
56132: LD_INT 0
56134: ST_TO_ADDR
// if GetTaskList ( sci ) then
56135: LD_VAR 0 1
56139: PPUSH
56140: CALL_OW 437
56144: IFFALSE 56192
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56146: LD_VAR 0 1
56150: PPUSH
56151: CALL_OW 437
56155: PUSH
56156: LD_INT 1
56158: ARRAY
56159: PUSH
56160: LD_INT 1
56162: ARRAY
56163: PUSH
56164: LD_STRING l
56166: EQUAL
56167: IFFALSE 56192
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56169: LD_ADDR_VAR 0 2
56173: PUSH
56174: LD_VAR 0 1
56178: PPUSH
56179: CALL_OW 437
56183: PUSH
56184: LD_INT 1
56186: ARRAY
56187: PUSH
56188: LD_INT 4
56190: ARRAY
56191: ST_TO_ADDR
// end ;
56192: LD_VAR 0 2
56196: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56197: LD_INT 0
56199: PPUSH
56200: PPUSH
56201: PPUSH
56202: PPUSH
// if not base_units then
56203: LD_VAR 0 1
56207: NOT
56208: IFFALSE 56212
// exit ;
56210: GO 56299
// result := false ;
56212: LD_ADDR_VAR 0 2
56216: PUSH
56217: LD_INT 0
56219: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56220: LD_ADDR_VAR 0 5
56224: PUSH
56225: LD_VAR 0 1
56229: PPUSH
56230: LD_INT 21
56232: PUSH
56233: LD_INT 3
56235: PUSH
56236: EMPTY
56237: LIST
56238: LIST
56239: PPUSH
56240: CALL_OW 72
56244: ST_TO_ADDR
// if not tmp then
56245: LD_VAR 0 5
56249: NOT
56250: IFFALSE 56254
// exit ;
56252: GO 56299
// for i in tmp do
56254: LD_ADDR_VAR 0 3
56258: PUSH
56259: LD_VAR 0 5
56263: PUSH
56264: FOR_IN
56265: IFFALSE 56297
// begin result := EnemyInRange ( i , 22 ) ;
56267: LD_ADDR_VAR 0 2
56271: PUSH
56272: LD_VAR 0 3
56276: PPUSH
56277: LD_INT 22
56279: PPUSH
56280: CALL 54535 0 2
56284: ST_TO_ADDR
// if result then
56285: LD_VAR 0 2
56289: IFFALSE 56295
// exit ;
56291: POP
56292: POP
56293: GO 56299
// end ;
56295: GO 56264
56297: POP
56298: POP
// end ;
56299: LD_VAR 0 2
56303: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
56304: LD_INT 0
56306: PPUSH
56307: PPUSH
// if not units then
56308: LD_VAR 0 1
56312: NOT
56313: IFFALSE 56317
// exit ;
56315: GO 56387
// result := [ ] ;
56317: LD_ADDR_VAR 0 3
56321: PUSH
56322: EMPTY
56323: ST_TO_ADDR
// for i in units do
56324: LD_ADDR_VAR 0 4
56328: PUSH
56329: LD_VAR 0 1
56333: PUSH
56334: FOR_IN
56335: IFFALSE 56385
// if GetTag ( i ) = tag then
56337: LD_VAR 0 4
56341: PPUSH
56342: CALL_OW 110
56346: PUSH
56347: LD_VAR 0 2
56351: EQUAL
56352: IFFALSE 56383
// result := Replace ( result , result + 1 , i ) ;
56354: LD_ADDR_VAR 0 3
56358: PUSH
56359: LD_VAR 0 3
56363: PPUSH
56364: LD_VAR 0 3
56368: PUSH
56369: LD_INT 1
56371: PLUS
56372: PPUSH
56373: LD_VAR 0 4
56377: PPUSH
56378: CALL_OW 1
56382: ST_TO_ADDR
56383: GO 56334
56385: POP
56386: POP
// end ;
56387: LD_VAR 0 3
56391: RET
// export function IsDriver ( un ) ; begin
56392: LD_INT 0
56394: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56395: LD_ADDR_VAR 0 2
56399: PUSH
56400: LD_VAR 0 1
56404: PUSH
56405: LD_INT 55
56407: PUSH
56408: EMPTY
56409: LIST
56410: PPUSH
56411: CALL_OW 69
56415: IN
56416: ST_TO_ADDR
// end ;
56417: LD_VAR 0 2
56421: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56422: LD_INT 0
56424: PPUSH
56425: PPUSH
// list := [ ] ;
56426: LD_ADDR_VAR 0 5
56430: PUSH
56431: EMPTY
56432: ST_TO_ADDR
// case d of 0 :
56433: LD_VAR 0 3
56437: PUSH
56438: LD_INT 0
56440: DOUBLE
56441: EQUAL
56442: IFTRUE 56446
56444: GO 56579
56446: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56447: LD_ADDR_VAR 0 5
56451: PUSH
56452: LD_VAR 0 1
56456: PUSH
56457: LD_INT 4
56459: MINUS
56460: PUSH
56461: LD_VAR 0 2
56465: PUSH
56466: LD_INT 4
56468: MINUS
56469: PUSH
56470: LD_INT 2
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: LIST
56477: PUSH
56478: LD_VAR 0 1
56482: PUSH
56483: LD_INT 3
56485: MINUS
56486: PUSH
56487: LD_VAR 0 2
56491: PUSH
56492: LD_INT 1
56494: PUSH
56495: EMPTY
56496: LIST
56497: LIST
56498: LIST
56499: PUSH
56500: LD_VAR 0 1
56504: PUSH
56505: LD_INT 4
56507: PLUS
56508: PUSH
56509: LD_VAR 0 2
56513: PUSH
56514: LD_INT 4
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: LIST
56521: PUSH
56522: LD_VAR 0 1
56526: PUSH
56527: LD_INT 3
56529: PLUS
56530: PUSH
56531: LD_VAR 0 2
56535: PUSH
56536: LD_INT 3
56538: PLUS
56539: PUSH
56540: LD_INT 5
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: LIST
56547: PUSH
56548: LD_VAR 0 1
56552: PUSH
56553: LD_VAR 0 2
56557: PUSH
56558: LD_INT 4
56560: PLUS
56561: PUSH
56562: LD_INT 0
56564: PUSH
56565: EMPTY
56566: LIST
56567: LIST
56568: LIST
56569: PUSH
56570: EMPTY
56571: LIST
56572: LIST
56573: LIST
56574: LIST
56575: LIST
56576: ST_TO_ADDR
// end ; 1 :
56577: GO 57277
56579: LD_INT 1
56581: DOUBLE
56582: EQUAL
56583: IFTRUE 56587
56585: GO 56720
56587: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
56588: LD_ADDR_VAR 0 5
56592: PUSH
56593: LD_VAR 0 1
56597: PUSH
56598: LD_VAR 0 2
56602: PUSH
56603: LD_INT 4
56605: MINUS
56606: PUSH
56607: LD_INT 3
56609: PUSH
56610: EMPTY
56611: LIST
56612: LIST
56613: LIST
56614: PUSH
56615: LD_VAR 0 1
56619: PUSH
56620: LD_INT 3
56622: MINUS
56623: PUSH
56624: LD_VAR 0 2
56628: PUSH
56629: LD_INT 3
56631: MINUS
56632: PUSH
56633: LD_INT 2
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: LIST
56640: PUSH
56641: LD_VAR 0 1
56645: PUSH
56646: LD_INT 4
56648: MINUS
56649: PUSH
56650: LD_VAR 0 2
56654: PUSH
56655: LD_INT 1
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: LIST
56662: PUSH
56663: LD_VAR 0 1
56667: PUSH
56668: LD_VAR 0 2
56672: PUSH
56673: LD_INT 3
56675: PLUS
56676: PUSH
56677: LD_INT 0
56679: PUSH
56680: EMPTY
56681: LIST
56682: LIST
56683: LIST
56684: PUSH
56685: LD_VAR 0 1
56689: PUSH
56690: LD_INT 4
56692: PLUS
56693: PUSH
56694: LD_VAR 0 2
56698: PUSH
56699: LD_INT 4
56701: PLUS
56702: PUSH
56703: LD_INT 5
56705: PUSH
56706: EMPTY
56707: LIST
56708: LIST
56709: LIST
56710: PUSH
56711: EMPTY
56712: LIST
56713: LIST
56714: LIST
56715: LIST
56716: LIST
56717: ST_TO_ADDR
// end ; 2 :
56718: GO 57277
56720: LD_INT 2
56722: DOUBLE
56723: EQUAL
56724: IFTRUE 56728
56726: GO 56857
56728: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56729: LD_ADDR_VAR 0 5
56733: PUSH
56734: LD_VAR 0 1
56738: PUSH
56739: LD_VAR 0 2
56743: PUSH
56744: LD_INT 3
56746: MINUS
56747: PUSH
56748: LD_INT 3
56750: PUSH
56751: EMPTY
56752: LIST
56753: LIST
56754: LIST
56755: PUSH
56756: LD_VAR 0 1
56760: PUSH
56761: LD_INT 4
56763: PLUS
56764: PUSH
56765: LD_VAR 0 2
56769: PUSH
56770: LD_INT 4
56772: PUSH
56773: EMPTY
56774: LIST
56775: LIST
56776: LIST
56777: PUSH
56778: LD_VAR 0 1
56782: PUSH
56783: LD_VAR 0 2
56787: PUSH
56788: LD_INT 4
56790: PLUS
56791: PUSH
56792: LD_INT 0
56794: PUSH
56795: EMPTY
56796: LIST
56797: LIST
56798: LIST
56799: PUSH
56800: LD_VAR 0 1
56804: PUSH
56805: LD_INT 3
56807: MINUS
56808: PUSH
56809: LD_VAR 0 2
56813: PUSH
56814: LD_INT 1
56816: PUSH
56817: EMPTY
56818: LIST
56819: LIST
56820: LIST
56821: PUSH
56822: LD_VAR 0 1
56826: PUSH
56827: LD_INT 4
56829: MINUS
56830: PUSH
56831: LD_VAR 0 2
56835: PUSH
56836: LD_INT 4
56838: MINUS
56839: PUSH
56840: LD_INT 2
56842: PUSH
56843: EMPTY
56844: LIST
56845: LIST
56846: LIST
56847: PUSH
56848: EMPTY
56849: LIST
56850: LIST
56851: LIST
56852: LIST
56853: LIST
56854: ST_TO_ADDR
// end ; 3 :
56855: GO 57277
56857: LD_INT 3
56859: DOUBLE
56860: EQUAL
56861: IFTRUE 56865
56863: GO 56998
56865: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56866: LD_ADDR_VAR 0 5
56870: PUSH
56871: LD_VAR 0 1
56875: PUSH
56876: LD_INT 3
56878: PLUS
56879: PUSH
56880: LD_VAR 0 2
56884: PUSH
56885: LD_INT 4
56887: PUSH
56888: EMPTY
56889: LIST
56890: LIST
56891: LIST
56892: PUSH
56893: LD_VAR 0 1
56897: PUSH
56898: LD_INT 4
56900: PLUS
56901: PUSH
56902: LD_VAR 0 2
56906: PUSH
56907: LD_INT 4
56909: PLUS
56910: PUSH
56911: LD_INT 5
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: LIST
56918: PUSH
56919: LD_VAR 0 1
56923: PUSH
56924: LD_INT 4
56926: MINUS
56927: PUSH
56928: LD_VAR 0 2
56932: PUSH
56933: LD_INT 1
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: LIST
56940: PUSH
56941: LD_VAR 0 1
56945: PUSH
56946: LD_VAR 0 2
56950: PUSH
56951: LD_INT 4
56953: MINUS
56954: PUSH
56955: LD_INT 3
56957: PUSH
56958: EMPTY
56959: LIST
56960: LIST
56961: LIST
56962: PUSH
56963: LD_VAR 0 1
56967: PUSH
56968: LD_INT 3
56970: MINUS
56971: PUSH
56972: LD_VAR 0 2
56976: PUSH
56977: LD_INT 3
56979: MINUS
56980: PUSH
56981: LD_INT 2
56983: PUSH
56984: EMPTY
56985: LIST
56986: LIST
56987: LIST
56988: PUSH
56989: EMPTY
56990: LIST
56991: LIST
56992: LIST
56993: LIST
56994: LIST
56995: ST_TO_ADDR
// end ; 4 :
56996: GO 57277
56998: LD_INT 4
57000: DOUBLE
57001: EQUAL
57002: IFTRUE 57006
57004: GO 57139
57006: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57007: LD_ADDR_VAR 0 5
57011: PUSH
57012: LD_VAR 0 1
57016: PUSH
57017: LD_VAR 0 2
57021: PUSH
57022: LD_INT 4
57024: PLUS
57025: PUSH
57026: LD_INT 0
57028: PUSH
57029: EMPTY
57030: LIST
57031: LIST
57032: LIST
57033: PUSH
57034: LD_VAR 0 1
57038: PUSH
57039: LD_INT 3
57041: PLUS
57042: PUSH
57043: LD_VAR 0 2
57047: PUSH
57048: LD_INT 3
57050: PLUS
57051: PUSH
57052: LD_INT 5
57054: PUSH
57055: EMPTY
57056: LIST
57057: LIST
57058: LIST
57059: PUSH
57060: LD_VAR 0 1
57064: PUSH
57065: LD_INT 4
57067: PLUS
57068: PUSH
57069: LD_VAR 0 2
57073: PUSH
57074: LD_INT 4
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: LIST
57081: PUSH
57082: LD_VAR 0 1
57086: PUSH
57087: LD_VAR 0 2
57091: PUSH
57092: LD_INT 3
57094: MINUS
57095: PUSH
57096: LD_INT 3
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: LIST
57103: PUSH
57104: LD_VAR 0 1
57108: PUSH
57109: LD_INT 4
57111: MINUS
57112: PUSH
57113: LD_VAR 0 2
57117: PUSH
57118: LD_INT 4
57120: MINUS
57121: PUSH
57122: LD_INT 2
57124: PUSH
57125: EMPTY
57126: LIST
57127: LIST
57128: LIST
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: LIST
57134: LIST
57135: LIST
57136: ST_TO_ADDR
// end ; 5 :
57137: GO 57277
57139: LD_INT 5
57141: DOUBLE
57142: EQUAL
57143: IFTRUE 57147
57145: GO 57276
57147: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57148: LD_ADDR_VAR 0 5
57152: PUSH
57153: LD_VAR 0 1
57157: PUSH
57158: LD_INT 4
57160: MINUS
57161: PUSH
57162: LD_VAR 0 2
57166: PUSH
57167: LD_INT 1
57169: PUSH
57170: EMPTY
57171: LIST
57172: LIST
57173: LIST
57174: PUSH
57175: LD_VAR 0 1
57179: PUSH
57180: LD_VAR 0 2
57184: PUSH
57185: LD_INT 4
57187: MINUS
57188: PUSH
57189: LD_INT 3
57191: PUSH
57192: EMPTY
57193: LIST
57194: LIST
57195: LIST
57196: PUSH
57197: LD_VAR 0 1
57201: PUSH
57202: LD_INT 4
57204: PLUS
57205: PUSH
57206: LD_VAR 0 2
57210: PUSH
57211: LD_INT 4
57213: PLUS
57214: PUSH
57215: LD_INT 5
57217: PUSH
57218: EMPTY
57219: LIST
57220: LIST
57221: LIST
57222: PUSH
57223: LD_VAR 0 1
57227: PUSH
57228: LD_INT 3
57230: PLUS
57231: PUSH
57232: LD_VAR 0 2
57236: PUSH
57237: LD_INT 4
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: LIST
57244: PUSH
57245: LD_VAR 0 1
57249: PUSH
57250: LD_VAR 0 2
57254: PUSH
57255: LD_INT 3
57257: PLUS
57258: PUSH
57259: LD_INT 0
57261: PUSH
57262: EMPTY
57263: LIST
57264: LIST
57265: LIST
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: LIST
57271: LIST
57272: LIST
57273: ST_TO_ADDR
// end ; end ;
57274: GO 57277
57276: POP
// result := list ;
57277: LD_ADDR_VAR 0 4
57281: PUSH
57282: LD_VAR 0 5
57286: ST_TO_ADDR
// end ;
57287: LD_VAR 0 4
57291: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57292: LD_INT 0
57294: PPUSH
57295: PPUSH
57296: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57297: LD_VAR 0 1
57301: NOT
57302: PUSH
57303: LD_VAR 0 2
57307: PUSH
57308: LD_INT 1
57310: PUSH
57311: LD_INT 2
57313: PUSH
57314: LD_INT 3
57316: PUSH
57317: LD_INT 4
57319: PUSH
57320: EMPTY
57321: LIST
57322: LIST
57323: LIST
57324: LIST
57325: IN
57326: NOT
57327: OR
57328: IFFALSE 57332
// exit ;
57330: GO 57424
// tmp := [ ] ;
57332: LD_ADDR_VAR 0 5
57336: PUSH
57337: EMPTY
57338: ST_TO_ADDR
// for i in units do
57339: LD_ADDR_VAR 0 4
57343: PUSH
57344: LD_VAR 0 1
57348: PUSH
57349: FOR_IN
57350: IFFALSE 57393
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57352: LD_ADDR_VAR 0 5
57356: PUSH
57357: LD_VAR 0 5
57361: PPUSH
57362: LD_VAR 0 5
57366: PUSH
57367: LD_INT 1
57369: PLUS
57370: PPUSH
57371: LD_VAR 0 4
57375: PPUSH
57376: LD_VAR 0 2
57380: PPUSH
57381: CALL_OW 259
57385: PPUSH
57386: CALL_OW 2
57390: ST_TO_ADDR
57391: GO 57349
57393: POP
57394: POP
// if not tmp then
57395: LD_VAR 0 5
57399: NOT
57400: IFFALSE 57404
// exit ;
57402: GO 57424
// result := SortListByListDesc ( units , tmp ) ;
57404: LD_ADDR_VAR 0 3
57408: PUSH
57409: LD_VAR 0 1
57413: PPUSH
57414: LD_VAR 0 5
57418: PPUSH
57419: CALL_OW 77
57423: ST_TO_ADDR
// end ;
57424: LD_VAR 0 3
57428: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57429: LD_INT 0
57431: PPUSH
57432: PPUSH
57433: PPUSH
// result := false ;
57434: LD_ADDR_VAR 0 3
57438: PUSH
57439: LD_INT 0
57441: ST_TO_ADDR
// x := GetX ( building ) ;
57442: LD_ADDR_VAR 0 4
57446: PUSH
57447: LD_VAR 0 2
57451: PPUSH
57452: CALL_OW 250
57456: ST_TO_ADDR
// y := GetY ( building ) ;
57457: LD_ADDR_VAR 0 5
57461: PUSH
57462: LD_VAR 0 2
57466: PPUSH
57467: CALL_OW 251
57471: ST_TO_ADDR
// if not building or not x or not y then
57472: LD_VAR 0 2
57476: NOT
57477: PUSH
57478: LD_VAR 0 4
57482: NOT
57483: OR
57484: PUSH
57485: LD_VAR 0 5
57489: NOT
57490: OR
57491: IFFALSE 57495
// exit ;
57493: GO 57587
// if GetTaskList ( unit ) then
57495: LD_VAR 0 1
57499: PPUSH
57500: CALL_OW 437
57504: IFFALSE 57587
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57506: LD_STRING e
57508: PUSH
57509: LD_VAR 0 1
57513: PPUSH
57514: CALL_OW 437
57518: PUSH
57519: LD_INT 1
57521: ARRAY
57522: PUSH
57523: LD_INT 1
57525: ARRAY
57526: EQUAL
57527: PUSH
57528: LD_VAR 0 4
57532: PUSH
57533: LD_VAR 0 1
57537: PPUSH
57538: CALL_OW 437
57542: PUSH
57543: LD_INT 1
57545: ARRAY
57546: PUSH
57547: LD_INT 2
57549: ARRAY
57550: EQUAL
57551: AND
57552: PUSH
57553: LD_VAR 0 5
57557: PUSH
57558: LD_VAR 0 1
57562: PPUSH
57563: CALL_OW 437
57567: PUSH
57568: LD_INT 1
57570: ARRAY
57571: PUSH
57572: LD_INT 3
57574: ARRAY
57575: EQUAL
57576: AND
57577: IFFALSE 57587
// result := true end ;
57579: LD_ADDR_VAR 0 3
57583: PUSH
57584: LD_INT 1
57586: ST_TO_ADDR
// end ;
57587: LD_VAR 0 3
57591: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
57592: LD_INT 0
57594: PPUSH
// result := false ;
57595: LD_ADDR_VAR 0 4
57599: PUSH
57600: LD_INT 0
57602: ST_TO_ADDR
// if GetTaskList ( unit ) then
57603: LD_VAR 0 1
57607: PPUSH
57608: CALL_OW 437
57612: IFFALSE 57695
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57614: LD_STRING M
57616: PUSH
57617: LD_VAR 0 1
57621: PPUSH
57622: CALL_OW 437
57626: PUSH
57627: LD_INT 1
57629: ARRAY
57630: PUSH
57631: LD_INT 1
57633: ARRAY
57634: EQUAL
57635: PUSH
57636: LD_VAR 0 2
57640: PUSH
57641: LD_VAR 0 1
57645: PPUSH
57646: CALL_OW 437
57650: PUSH
57651: LD_INT 1
57653: ARRAY
57654: PUSH
57655: LD_INT 2
57657: ARRAY
57658: EQUAL
57659: AND
57660: PUSH
57661: LD_VAR 0 3
57665: PUSH
57666: LD_VAR 0 1
57670: PPUSH
57671: CALL_OW 437
57675: PUSH
57676: LD_INT 1
57678: ARRAY
57679: PUSH
57680: LD_INT 3
57682: ARRAY
57683: EQUAL
57684: AND
57685: IFFALSE 57695
// result := true ;
57687: LD_ADDR_VAR 0 4
57691: PUSH
57692: LD_INT 1
57694: ST_TO_ADDR
// end ; end ;
57695: LD_VAR 0 4
57699: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57700: LD_INT 0
57702: PPUSH
57703: PPUSH
57704: PPUSH
57705: PPUSH
// if not unit or not area then
57706: LD_VAR 0 1
57710: NOT
57711: PUSH
57712: LD_VAR 0 2
57716: NOT
57717: OR
57718: IFFALSE 57722
// exit ;
57720: GO 57886
// tmp := AreaToList ( area , i ) ;
57722: LD_ADDR_VAR 0 6
57726: PUSH
57727: LD_VAR 0 2
57731: PPUSH
57732: LD_VAR 0 5
57736: PPUSH
57737: CALL_OW 517
57741: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57742: LD_ADDR_VAR 0 5
57746: PUSH
57747: DOUBLE
57748: LD_INT 1
57750: DEC
57751: ST_TO_ADDR
57752: LD_VAR 0 6
57756: PUSH
57757: LD_INT 1
57759: ARRAY
57760: PUSH
57761: FOR_TO
57762: IFFALSE 57884
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57764: LD_ADDR_VAR 0 7
57768: PUSH
57769: LD_VAR 0 6
57773: PUSH
57774: LD_INT 1
57776: ARRAY
57777: PUSH
57778: LD_VAR 0 5
57782: ARRAY
57783: PUSH
57784: LD_VAR 0 6
57788: PUSH
57789: LD_INT 2
57791: ARRAY
57792: PUSH
57793: LD_VAR 0 5
57797: ARRAY
57798: PUSH
57799: EMPTY
57800: LIST
57801: LIST
57802: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57803: LD_VAR 0 7
57807: PUSH
57808: LD_INT 1
57810: ARRAY
57811: PPUSH
57812: LD_VAR 0 7
57816: PUSH
57817: LD_INT 2
57819: ARRAY
57820: PPUSH
57821: CALL_OW 428
57825: PUSH
57826: LD_INT 0
57828: EQUAL
57829: IFFALSE 57882
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57831: LD_VAR 0 1
57835: PPUSH
57836: LD_VAR 0 7
57840: PUSH
57841: LD_INT 1
57843: ARRAY
57844: PPUSH
57845: LD_VAR 0 7
57849: PUSH
57850: LD_INT 2
57852: ARRAY
57853: PPUSH
57854: LD_VAR 0 3
57858: PPUSH
57859: CALL_OW 48
// result := IsPlaced ( unit ) ;
57863: LD_ADDR_VAR 0 4
57867: PUSH
57868: LD_VAR 0 1
57872: PPUSH
57873: CALL_OW 305
57877: ST_TO_ADDR
// exit ;
57878: POP
57879: POP
57880: GO 57886
// end ; end ;
57882: GO 57761
57884: POP
57885: POP
// end ;
57886: LD_VAR 0 4
57890: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57891: LD_INT 0
57893: PPUSH
57894: PPUSH
57895: PPUSH
// if not side or side > 8 then
57896: LD_VAR 0 1
57900: NOT
57901: PUSH
57902: LD_VAR 0 1
57906: PUSH
57907: LD_INT 8
57909: GREATER
57910: OR
57911: IFFALSE 57915
// exit ;
57913: GO 58102
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57915: LD_ADDR_VAR 0 4
57919: PUSH
57920: LD_INT 22
57922: PUSH
57923: LD_VAR 0 1
57927: PUSH
57928: EMPTY
57929: LIST
57930: LIST
57931: PUSH
57932: LD_INT 21
57934: PUSH
57935: LD_INT 3
57937: PUSH
57938: EMPTY
57939: LIST
57940: LIST
57941: PUSH
57942: EMPTY
57943: LIST
57944: LIST
57945: PPUSH
57946: CALL_OW 69
57950: ST_TO_ADDR
// if not tmp then
57951: LD_VAR 0 4
57955: NOT
57956: IFFALSE 57960
// exit ;
57958: GO 58102
// enable_addtolog := true ;
57960: LD_ADDR_OWVAR 81
57964: PUSH
57965: LD_INT 1
57967: ST_TO_ADDR
// AddToLog ( [ ) ;
57968: LD_STRING [
57970: PPUSH
57971: CALL_OW 561
// for i in tmp do
57975: LD_ADDR_VAR 0 3
57979: PUSH
57980: LD_VAR 0 4
57984: PUSH
57985: FOR_IN
57986: IFFALSE 58093
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57988: LD_STRING [
57990: PUSH
57991: LD_VAR 0 3
57995: PPUSH
57996: CALL_OW 266
58000: STR
58001: PUSH
58002: LD_STRING , 
58004: STR
58005: PUSH
58006: LD_VAR 0 3
58010: PPUSH
58011: CALL_OW 250
58015: STR
58016: PUSH
58017: LD_STRING , 
58019: STR
58020: PUSH
58021: LD_VAR 0 3
58025: PPUSH
58026: CALL_OW 251
58030: STR
58031: PUSH
58032: LD_STRING , 
58034: STR
58035: PUSH
58036: LD_VAR 0 3
58040: PPUSH
58041: CALL_OW 254
58045: STR
58046: PUSH
58047: LD_STRING , 
58049: STR
58050: PUSH
58051: LD_VAR 0 3
58055: PPUSH
58056: LD_INT 1
58058: PPUSH
58059: CALL_OW 268
58063: STR
58064: PUSH
58065: LD_STRING , 
58067: STR
58068: PUSH
58069: LD_VAR 0 3
58073: PPUSH
58074: LD_INT 2
58076: PPUSH
58077: CALL_OW 268
58081: STR
58082: PUSH
58083: LD_STRING ],
58085: STR
58086: PPUSH
58087: CALL_OW 561
// end ;
58091: GO 57985
58093: POP
58094: POP
// AddToLog ( ]; ) ;
58095: LD_STRING ];
58097: PPUSH
58098: CALL_OW 561
// end ;
58102: LD_VAR 0 2
58106: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58107: LD_INT 0
58109: PPUSH
58110: PPUSH
58111: PPUSH
58112: PPUSH
58113: PPUSH
// if not area or not rate or not max then
58114: LD_VAR 0 1
58118: NOT
58119: PUSH
58120: LD_VAR 0 2
58124: NOT
58125: OR
58126: PUSH
58127: LD_VAR 0 4
58131: NOT
58132: OR
58133: IFFALSE 58137
// exit ;
58135: GO 58329
// while 1 do
58137: LD_INT 1
58139: IFFALSE 58329
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58141: LD_ADDR_VAR 0 9
58145: PUSH
58146: LD_VAR 0 1
58150: PPUSH
58151: LD_INT 1
58153: PPUSH
58154: CALL_OW 287
58158: PUSH
58159: LD_INT 10
58161: MUL
58162: ST_TO_ADDR
// r := rate / 10 ;
58163: LD_ADDR_VAR 0 7
58167: PUSH
58168: LD_VAR 0 2
58172: PUSH
58173: LD_INT 10
58175: DIVREAL
58176: ST_TO_ADDR
// time := 1 1$00 ;
58177: LD_ADDR_VAR 0 8
58181: PUSH
58182: LD_INT 2100
58184: ST_TO_ADDR
// if amount < min then
58185: LD_VAR 0 9
58189: PUSH
58190: LD_VAR 0 3
58194: LESS
58195: IFFALSE 58213
// r := r * 2 else
58197: LD_ADDR_VAR 0 7
58201: PUSH
58202: LD_VAR 0 7
58206: PUSH
58207: LD_INT 2
58209: MUL
58210: ST_TO_ADDR
58211: GO 58239
// if amount > max then
58213: LD_VAR 0 9
58217: PUSH
58218: LD_VAR 0 4
58222: GREATER
58223: IFFALSE 58239
// r := r / 2 ;
58225: LD_ADDR_VAR 0 7
58229: PUSH
58230: LD_VAR 0 7
58234: PUSH
58235: LD_INT 2
58237: DIVREAL
58238: ST_TO_ADDR
// time := time / r ;
58239: LD_ADDR_VAR 0 8
58243: PUSH
58244: LD_VAR 0 8
58248: PUSH
58249: LD_VAR 0 7
58253: DIVREAL
58254: ST_TO_ADDR
// if time < 0 then
58255: LD_VAR 0 8
58259: PUSH
58260: LD_INT 0
58262: LESS
58263: IFFALSE 58280
// time := time * - 1 ;
58265: LD_ADDR_VAR 0 8
58269: PUSH
58270: LD_VAR 0 8
58274: PUSH
58275: LD_INT 1
58277: NEG
58278: MUL
58279: ST_TO_ADDR
// wait ( time ) ;
58280: LD_VAR 0 8
58284: PPUSH
58285: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
58289: LD_INT 35
58291: PPUSH
58292: LD_INT 875
58294: PPUSH
58295: CALL_OW 12
58299: PPUSH
58300: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58304: LD_INT 1
58306: PPUSH
58307: LD_INT 5
58309: PPUSH
58310: CALL_OW 12
58314: PPUSH
58315: LD_VAR 0 1
58319: PPUSH
58320: LD_INT 1
58322: PPUSH
58323: CALL_OW 55
// end ;
58327: GO 58137
// end ;
58329: LD_VAR 0 5
58333: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58334: LD_INT 0
58336: PPUSH
58337: PPUSH
58338: PPUSH
58339: PPUSH
58340: PPUSH
58341: PPUSH
58342: PPUSH
58343: PPUSH
// if not turrets or not factories then
58344: LD_VAR 0 1
58348: NOT
58349: PUSH
58350: LD_VAR 0 2
58354: NOT
58355: OR
58356: IFFALSE 58360
// exit ;
58358: GO 58667
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58360: LD_ADDR_VAR 0 10
58364: PUSH
58365: LD_INT 5
58367: PUSH
58368: LD_INT 6
58370: PUSH
58371: EMPTY
58372: LIST
58373: LIST
58374: PUSH
58375: LD_INT 2
58377: PUSH
58378: LD_INT 4
58380: PUSH
58381: EMPTY
58382: LIST
58383: LIST
58384: PUSH
58385: LD_INT 3
58387: PUSH
58388: LD_INT 5
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: PUSH
58395: EMPTY
58396: LIST
58397: LIST
58398: LIST
58399: PUSH
58400: LD_INT 24
58402: PUSH
58403: LD_INT 25
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: PUSH
58410: LD_INT 23
58412: PUSH
58413: LD_INT 27
58415: PUSH
58416: EMPTY
58417: LIST
58418: LIST
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: PUSH
58424: LD_INT 42
58426: PUSH
58427: LD_INT 43
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: PUSH
58434: LD_INT 44
58436: PUSH
58437: LD_INT 46
58439: PUSH
58440: EMPTY
58441: LIST
58442: LIST
58443: PUSH
58444: LD_INT 45
58446: PUSH
58447: LD_INT 47
58449: PUSH
58450: EMPTY
58451: LIST
58452: LIST
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: LIST
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: LIST
58463: ST_TO_ADDR
// result := [ ] ;
58464: LD_ADDR_VAR 0 3
58468: PUSH
58469: EMPTY
58470: ST_TO_ADDR
// for i in turrets do
58471: LD_ADDR_VAR 0 4
58475: PUSH
58476: LD_VAR 0 1
58480: PUSH
58481: FOR_IN
58482: IFFALSE 58665
// begin nat := GetNation ( i ) ;
58484: LD_ADDR_VAR 0 7
58488: PUSH
58489: LD_VAR 0 4
58493: PPUSH
58494: CALL_OW 248
58498: ST_TO_ADDR
// weapon := 0 ;
58499: LD_ADDR_VAR 0 8
58503: PUSH
58504: LD_INT 0
58506: ST_TO_ADDR
// if not nat then
58507: LD_VAR 0 7
58511: NOT
58512: IFFALSE 58516
// continue ;
58514: GO 58481
// for j in list [ nat ] do
58516: LD_ADDR_VAR 0 5
58520: PUSH
58521: LD_VAR 0 10
58525: PUSH
58526: LD_VAR 0 7
58530: ARRAY
58531: PUSH
58532: FOR_IN
58533: IFFALSE 58574
// if GetBWeapon ( i ) = j [ 1 ] then
58535: LD_VAR 0 4
58539: PPUSH
58540: CALL_OW 269
58544: PUSH
58545: LD_VAR 0 5
58549: PUSH
58550: LD_INT 1
58552: ARRAY
58553: EQUAL
58554: IFFALSE 58572
// begin weapon := j [ 2 ] ;
58556: LD_ADDR_VAR 0 8
58560: PUSH
58561: LD_VAR 0 5
58565: PUSH
58566: LD_INT 2
58568: ARRAY
58569: ST_TO_ADDR
// break ;
58570: GO 58574
// end ;
58572: GO 58532
58574: POP
58575: POP
// if not weapon then
58576: LD_VAR 0 8
58580: NOT
58581: IFFALSE 58585
// continue ;
58583: GO 58481
// for k in factories do
58585: LD_ADDR_VAR 0 6
58589: PUSH
58590: LD_VAR 0 2
58594: PUSH
58595: FOR_IN
58596: IFFALSE 58661
// begin weapons := AvailableWeaponList ( k ) ;
58598: LD_ADDR_VAR 0 9
58602: PUSH
58603: LD_VAR 0 6
58607: PPUSH
58608: CALL_OW 478
58612: ST_TO_ADDR
// if not weapons then
58613: LD_VAR 0 9
58617: NOT
58618: IFFALSE 58622
// continue ;
58620: GO 58595
// if weapon in weapons then
58622: LD_VAR 0 8
58626: PUSH
58627: LD_VAR 0 9
58631: IN
58632: IFFALSE 58659
// begin result := [ i , weapon ] ;
58634: LD_ADDR_VAR 0 3
58638: PUSH
58639: LD_VAR 0 4
58643: PUSH
58644: LD_VAR 0 8
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: ST_TO_ADDR
// exit ;
58653: POP
58654: POP
58655: POP
58656: POP
58657: GO 58667
// end ; end ;
58659: GO 58595
58661: POP
58662: POP
// end ;
58663: GO 58481
58665: POP
58666: POP
// end ;
58667: LD_VAR 0 3
58671: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
58672: LD_INT 0
58674: PPUSH
// if not side or side > 8 then
58675: LD_VAR 0 3
58679: NOT
58680: PUSH
58681: LD_VAR 0 3
58685: PUSH
58686: LD_INT 8
58688: GREATER
58689: OR
58690: IFFALSE 58694
// exit ;
58692: GO 58753
// if not range then
58694: LD_VAR 0 4
58698: NOT
58699: IFFALSE 58710
// range := - 12 ;
58701: LD_ADDR_VAR 0 4
58705: PUSH
58706: LD_INT 12
58708: NEG
58709: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58710: LD_VAR 0 1
58714: PPUSH
58715: LD_VAR 0 2
58719: PPUSH
58720: LD_VAR 0 3
58724: PPUSH
58725: LD_VAR 0 4
58729: PPUSH
58730: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58734: LD_VAR 0 1
58738: PPUSH
58739: LD_VAR 0 2
58743: PPUSH
58744: LD_VAR 0 3
58748: PPUSH
58749: CALL_OW 331
// end ;
58753: LD_VAR 0 5
58757: RET
// export function Video ( mode ) ; begin
58758: LD_INT 0
58760: PPUSH
// ingame_video = mode ;
58761: LD_ADDR_OWVAR 52
58765: PUSH
58766: LD_VAR 0 1
58770: ST_TO_ADDR
// interface_hidden = mode ;
58771: LD_ADDR_OWVAR 54
58775: PUSH
58776: LD_VAR 0 1
58780: ST_TO_ADDR
// end ;
58781: LD_VAR 0 2
58785: RET
// export function Join ( array , element ) ; begin
58786: LD_INT 0
58788: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58789: LD_ADDR_VAR 0 3
58793: PUSH
58794: LD_VAR 0 1
58798: PPUSH
58799: LD_VAR 0 1
58803: PUSH
58804: LD_INT 1
58806: PLUS
58807: PPUSH
58808: LD_VAR 0 2
58812: PPUSH
58813: CALL_OW 1
58817: ST_TO_ADDR
// end ;
58818: LD_VAR 0 3
58822: RET
// export function JoinUnion ( array , element ) ; begin
58823: LD_INT 0
58825: PPUSH
// result := array union element ;
58826: LD_ADDR_VAR 0 3
58830: PUSH
58831: LD_VAR 0 1
58835: PUSH
58836: LD_VAR 0 2
58840: UNION
58841: ST_TO_ADDR
// end ;
58842: LD_VAR 0 3
58846: RET
// export function GetBehemoths ( side ) ; begin
58847: LD_INT 0
58849: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58850: LD_ADDR_VAR 0 2
58854: PUSH
58855: LD_INT 22
58857: PUSH
58858: LD_VAR 0 1
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: PUSH
58867: LD_INT 31
58869: PUSH
58870: LD_INT 25
58872: PUSH
58873: EMPTY
58874: LIST
58875: LIST
58876: PUSH
58877: EMPTY
58878: LIST
58879: LIST
58880: PPUSH
58881: CALL_OW 69
58885: ST_TO_ADDR
// end ;
58886: LD_VAR 0 2
58890: RET
// export function Shuffle ( array ) ; var i , index ; begin
58891: LD_INT 0
58893: PPUSH
58894: PPUSH
58895: PPUSH
// result := [ ] ;
58896: LD_ADDR_VAR 0 2
58900: PUSH
58901: EMPTY
58902: ST_TO_ADDR
// if not array then
58903: LD_VAR 0 1
58907: NOT
58908: IFFALSE 58912
// exit ;
58910: GO 59011
// Randomize ;
58912: CALL_OW 10
// for i = array downto 1 do
58916: LD_ADDR_VAR 0 3
58920: PUSH
58921: DOUBLE
58922: LD_VAR 0 1
58926: INC
58927: ST_TO_ADDR
58928: LD_INT 1
58930: PUSH
58931: FOR_DOWNTO
58932: IFFALSE 59009
// begin index := rand ( 1 , array ) ;
58934: LD_ADDR_VAR 0 4
58938: PUSH
58939: LD_INT 1
58941: PPUSH
58942: LD_VAR 0 1
58946: PPUSH
58947: CALL_OW 12
58951: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58952: LD_ADDR_VAR 0 2
58956: PUSH
58957: LD_VAR 0 2
58961: PPUSH
58962: LD_VAR 0 2
58966: PUSH
58967: LD_INT 1
58969: PLUS
58970: PPUSH
58971: LD_VAR 0 1
58975: PUSH
58976: LD_VAR 0 4
58980: ARRAY
58981: PPUSH
58982: CALL_OW 2
58986: ST_TO_ADDR
// array := Delete ( array , index ) ;
58987: LD_ADDR_VAR 0 1
58991: PUSH
58992: LD_VAR 0 1
58996: PPUSH
58997: LD_VAR 0 4
59001: PPUSH
59002: CALL_OW 3
59006: ST_TO_ADDR
// end ;
59007: GO 58931
59009: POP
59010: POP
// end ;
59011: LD_VAR 0 2
59015: RET
// export function GetBaseMaterials ( base ) ; begin
59016: LD_INT 0
59018: PPUSH
// result := [ 0 , 0 , 0 ] ;
59019: LD_ADDR_VAR 0 2
59023: PUSH
59024: LD_INT 0
59026: PUSH
59027: LD_INT 0
59029: PUSH
59030: LD_INT 0
59032: PUSH
59033: EMPTY
59034: LIST
59035: LIST
59036: LIST
59037: ST_TO_ADDR
// if not base then
59038: LD_VAR 0 1
59042: NOT
59043: IFFALSE 59047
// exit ;
59045: GO 59096
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59047: LD_ADDR_VAR 0 2
59051: PUSH
59052: LD_VAR 0 1
59056: PPUSH
59057: LD_INT 1
59059: PPUSH
59060: CALL_OW 275
59064: PUSH
59065: LD_VAR 0 1
59069: PPUSH
59070: LD_INT 2
59072: PPUSH
59073: CALL_OW 275
59077: PUSH
59078: LD_VAR 0 1
59082: PPUSH
59083: LD_INT 3
59085: PPUSH
59086: CALL_OW 275
59090: PUSH
59091: EMPTY
59092: LIST
59093: LIST
59094: LIST
59095: ST_TO_ADDR
// end ;
59096: LD_VAR 0 2
59100: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59101: LD_INT 0
59103: PPUSH
59104: PPUSH
// result := array ;
59105: LD_ADDR_VAR 0 3
59109: PUSH
59110: LD_VAR 0 1
59114: ST_TO_ADDR
// if size > 0 then
59115: LD_VAR 0 2
59119: PUSH
59120: LD_INT 0
59122: GREATER
59123: IFFALSE 59169
// for i := array downto size do
59125: LD_ADDR_VAR 0 4
59129: PUSH
59130: DOUBLE
59131: LD_VAR 0 1
59135: INC
59136: ST_TO_ADDR
59137: LD_VAR 0 2
59141: PUSH
59142: FOR_DOWNTO
59143: IFFALSE 59167
// result := Delete ( result , result ) ;
59145: LD_ADDR_VAR 0 3
59149: PUSH
59150: LD_VAR 0 3
59154: PPUSH
59155: LD_VAR 0 3
59159: PPUSH
59160: CALL_OW 3
59164: ST_TO_ADDR
59165: GO 59142
59167: POP
59168: POP
// end ;
59169: LD_VAR 0 3
59173: RET
// export function ComExit ( unit ) ; var tmp ; begin
59174: LD_INT 0
59176: PPUSH
59177: PPUSH
// if not IsInUnit ( unit ) then
59178: LD_VAR 0 1
59182: PPUSH
59183: CALL_OW 310
59187: NOT
59188: IFFALSE 59192
// exit ;
59190: GO 59252
// tmp := IsInUnit ( unit ) ;
59192: LD_ADDR_VAR 0 3
59196: PUSH
59197: LD_VAR 0 1
59201: PPUSH
59202: CALL_OW 310
59206: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59207: LD_VAR 0 3
59211: PPUSH
59212: CALL_OW 247
59216: PUSH
59217: LD_INT 2
59219: EQUAL
59220: IFFALSE 59233
// ComExitVehicle ( unit ) else
59222: LD_VAR 0 1
59226: PPUSH
59227: CALL_OW 121
59231: GO 59242
// ComExitBuilding ( unit ) ;
59233: LD_VAR 0 1
59237: PPUSH
59238: CALL_OW 122
// result := tmp ;
59242: LD_ADDR_VAR 0 2
59246: PUSH
59247: LD_VAR 0 3
59251: ST_TO_ADDR
// end ;
59252: LD_VAR 0 2
59256: RET
// export function ComExitAll ( units ) ; var i ; begin
59257: LD_INT 0
59259: PPUSH
59260: PPUSH
// if not units then
59261: LD_VAR 0 1
59265: NOT
59266: IFFALSE 59270
// exit ;
59268: GO 59296
// for i in units do
59270: LD_ADDR_VAR 0 3
59274: PUSH
59275: LD_VAR 0 1
59279: PUSH
59280: FOR_IN
59281: IFFALSE 59294
// ComExit ( i ) ;
59283: LD_VAR 0 3
59287: PPUSH
59288: CALL 59174 0 1
59292: GO 59280
59294: POP
59295: POP
// end ;
59296: LD_VAR 0 2
59300: RET
// export function ResetHc ; begin
59301: LD_INT 0
59303: PPUSH
// InitHc ;
59304: CALL_OW 19
// hc_importance := 0 ;
59308: LD_ADDR_OWVAR 32
59312: PUSH
59313: LD_INT 0
59315: ST_TO_ADDR
// end ;
59316: LD_VAR 0 1
59320: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59321: LD_INT 0
59323: PPUSH
59324: PPUSH
59325: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59326: LD_ADDR_VAR 0 6
59330: PUSH
59331: LD_VAR 0 1
59335: PUSH
59336: LD_VAR 0 3
59340: PLUS
59341: PUSH
59342: LD_INT 2
59344: DIV
59345: ST_TO_ADDR
// if _x < 0 then
59346: LD_VAR 0 6
59350: PUSH
59351: LD_INT 0
59353: LESS
59354: IFFALSE 59371
// _x := _x * - 1 ;
59356: LD_ADDR_VAR 0 6
59360: PUSH
59361: LD_VAR 0 6
59365: PUSH
59366: LD_INT 1
59368: NEG
59369: MUL
59370: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59371: LD_ADDR_VAR 0 7
59375: PUSH
59376: LD_VAR 0 2
59380: PUSH
59381: LD_VAR 0 4
59385: PLUS
59386: PUSH
59387: LD_INT 2
59389: DIV
59390: ST_TO_ADDR
// if _y < 0 then
59391: LD_VAR 0 7
59395: PUSH
59396: LD_INT 0
59398: LESS
59399: IFFALSE 59416
// _y := _y * - 1 ;
59401: LD_ADDR_VAR 0 7
59405: PUSH
59406: LD_VAR 0 7
59410: PUSH
59411: LD_INT 1
59413: NEG
59414: MUL
59415: ST_TO_ADDR
// result := [ _x , _y ] ;
59416: LD_ADDR_VAR 0 5
59420: PUSH
59421: LD_VAR 0 6
59425: PUSH
59426: LD_VAR 0 7
59430: PUSH
59431: EMPTY
59432: LIST
59433: LIST
59434: ST_TO_ADDR
// end ;
59435: LD_VAR 0 5
59439: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59440: LD_INT 0
59442: PPUSH
59443: PPUSH
59444: PPUSH
59445: PPUSH
// task := GetTaskList ( unit ) ;
59446: LD_ADDR_VAR 0 7
59450: PUSH
59451: LD_VAR 0 1
59455: PPUSH
59456: CALL_OW 437
59460: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59461: LD_VAR 0 7
59465: NOT
59466: PUSH
59467: LD_VAR 0 1
59471: PPUSH
59472: LD_VAR 0 2
59476: PPUSH
59477: CALL_OW 308
59481: NOT
59482: AND
59483: IFFALSE 59487
// exit ;
59485: GO 59605
// if IsInArea ( unit , area ) then
59487: LD_VAR 0 1
59491: PPUSH
59492: LD_VAR 0 2
59496: PPUSH
59497: CALL_OW 308
59501: IFFALSE 59519
// begin ComMoveToArea ( unit , goAway ) ;
59503: LD_VAR 0 1
59507: PPUSH
59508: LD_VAR 0 3
59512: PPUSH
59513: CALL_OW 113
// exit ;
59517: GO 59605
// end ; if task [ 1 ] [ 1 ] <> M then
59519: LD_VAR 0 7
59523: PUSH
59524: LD_INT 1
59526: ARRAY
59527: PUSH
59528: LD_INT 1
59530: ARRAY
59531: PUSH
59532: LD_STRING M
59534: NONEQUAL
59535: IFFALSE 59539
// exit ;
59537: GO 59605
// x := task [ 1 ] [ 2 ] ;
59539: LD_ADDR_VAR 0 5
59543: PUSH
59544: LD_VAR 0 7
59548: PUSH
59549: LD_INT 1
59551: ARRAY
59552: PUSH
59553: LD_INT 2
59555: ARRAY
59556: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
59557: LD_ADDR_VAR 0 6
59561: PUSH
59562: LD_VAR 0 7
59566: PUSH
59567: LD_INT 1
59569: ARRAY
59570: PUSH
59571: LD_INT 3
59573: ARRAY
59574: ST_TO_ADDR
// if InArea ( x , y , area ) then
59575: LD_VAR 0 5
59579: PPUSH
59580: LD_VAR 0 6
59584: PPUSH
59585: LD_VAR 0 2
59589: PPUSH
59590: CALL_OW 309
59594: IFFALSE 59605
// ComStop ( unit ) ;
59596: LD_VAR 0 1
59600: PPUSH
59601: CALL_OW 141
// end ;
59605: LD_VAR 0 4
59609: RET
// export function Abs ( value ) ; begin
59610: LD_INT 0
59612: PPUSH
// result := value ;
59613: LD_ADDR_VAR 0 2
59617: PUSH
59618: LD_VAR 0 1
59622: ST_TO_ADDR
// if value < 0 then
59623: LD_VAR 0 1
59627: PUSH
59628: LD_INT 0
59630: LESS
59631: IFFALSE 59648
// result := value * - 1 ;
59633: LD_ADDR_VAR 0 2
59637: PUSH
59638: LD_VAR 0 1
59642: PUSH
59643: LD_INT 1
59645: NEG
59646: MUL
59647: ST_TO_ADDR
// end ;
59648: LD_VAR 0 2
59652: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
59653: LD_INT 0
59655: PPUSH
59656: PPUSH
59657: PPUSH
59658: PPUSH
59659: PPUSH
59660: PPUSH
59661: PPUSH
59662: PPUSH
// if not unit or not building then
59663: LD_VAR 0 1
59667: NOT
59668: PUSH
59669: LD_VAR 0 2
59673: NOT
59674: OR
59675: IFFALSE 59679
// exit ;
59677: GO 59905
// x := GetX ( building ) ;
59679: LD_ADDR_VAR 0 4
59683: PUSH
59684: LD_VAR 0 2
59688: PPUSH
59689: CALL_OW 250
59693: ST_TO_ADDR
// y := GetY ( building ) ;
59694: LD_ADDR_VAR 0 6
59698: PUSH
59699: LD_VAR 0 2
59703: PPUSH
59704: CALL_OW 251
59708: ST_TO_ADDR
// d := GetDir ( building ) ;
59709: LD_ADDR_VAR 0 8
59713: PUSH
59714: LD_VAR 0 2
59718: PPUSH
59719: CALL_OW 254
59723: ST_TO_ADDR
// r := 4 ;
59724: LD_ADDR_VAR 0 9
59728: PUSH
59729: LD_INT 4
59731: ST_TO_ADDR
// for i := 1 to 5 do
59732: LD_ADDR_VAR 0 10
59736: PUSH
59737: DOUBLE
59738: LD_INT 1
59740: DEC
59741: ST_TO_ADDR
59742: LD_INT 5
59744: PUSH
59745: FOR_TO
59746: IFFALSE 59903
// begin _x := ShiftX ( x , d , r + i ) ;
59748: LD_ADDR_VAR 0 5
59752: PUSH
59753: LD_VAR 0 4
59757: PPUSH
59758: LD_VAR 0 8
59762: PPUSH
59763: LD_VAR 0 9
59767: PUSH
59768: LD_VAR 0 10
59772: PLUS
59773: PPUSH
59774: CALL_OW 272
59778: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59779: LD_ADDR_VAR 0 7
59783: PUSH
59784: LD_VAR 0 6
59788: PPUSH
59789: LD_VAR 0 8
59793: PPUSH
59794: LD_VAR 0 9
59798: PUSH
59799: LD_VAR 0 10
59803: PLUS
59804: PPUSH
59805: CALL_OW 273
59809: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59810: LD_VAR 0 5
59814: PPUSH
59815: LD_VAR 0 7
59819: PPUSH
59820: CALL_OW 488
59824: PUSH
59825: LD_VAR 0 5
59829: PPUSH
59830: LD_VAR 0 7
59834: PPUSH
59835: CALL_OW 428
59839: PPUSH
59840: CALL_OW 247
59844: PUSH
59845: LD_INT 3
59847: PUSH
59848: LD_INT 2
59850: PUSH
59851: EMPTY
59852: LIST
59853: LIST
59854: IN
59855: NOT
59856: AND
59857: IFFALSE 59901
// begin ComMoveXY ( unit , _x , _y ) ;
59859: LD_VAR 0 1
59863: PPUSH
59864: LD_VAR 0 5
59868: PPUSH
59869: LD_VAR 0 7
59873: PPUSH
59874: CALL_OW 111
// result := [ _x , _y ] ;
59878: LD_ADDR_VAR 0 3
59882: PUSH
59883: LD_VAR 0 5
59887: PUSH
59888: LD_VAR 0 7
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: ST_TO_ADDR
// exit ;
59897: POP
59898: POP
59899: GO 59905
// end ; end ;
59901: GO 59745
59903: POP
59904: POP
// end ;
59905: LD_VAR 0 3
59909: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59910: LD_INT 0
59912: PPUSH
59913: PPUSH
59914: PPUSH
// result := 0 ;
59915: LD_ADDR_VAR 0 3
59919: PUSH
59920: LD_INT 0
59922: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59923: LD_VAR 0 1
59927: PUSH
59928: LD_INT 0
59930: LESS
59931: PUSH
59932: LD_VAR 0 1
59936: PUSH
59937: LD_INT 8
59939: GREATER
59940: OR
59941: PUSH
59942: LD_VAR 0 2
59946: PUSH
59947: LD_INT 0
59949: LESS
59950: OR
59951: PUSH
59952: LD_VAR 0 2
59956: PUSH
59957: LD_INT 8
59959: GREATER
59960: OR
59961: IFFALSE 59965
// exit ;
59963: GO 60040
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59965: LD_ADDR_VAR 0 4
59969: PUSH
59970: LD_INT 22
59972: PUSH
59973: LD_VAR 0 2
59977: PUSH
59978: EMPTY
59979: LIST
59980: LIST
59981: PPUSH
59982: CALL_OW 69
59986: PUSH
59987: FOR_IN
59988: IFFALSE 60038
// begin un := UnitShoot ( i ) ;
59990: LD_ADDR_VAR 0 5
59994: PUSH
59995: LD_VAR 0 4
59999: PPUSH
60000: CALL_OW 504
60004: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60005: LD_VAR 0 5
60009: PPUSH
60010: CALL_OW 255
60014: PUSH
60015: LD_VAR 0 1
60019: EQUAL
60020: IFFALSE 60036
// begin result := un ;
60022: LD_ADDR_VAR 0 3
60026: PUSH
60027: LD_VAR 0 5
60031: ST_TO_ADDR
// exit ;
60032: POP
60033: POP
60034: GO 60040
// end ; end ;
60036: GO 59987
60038: POP
60039: POP
// end ;
60040: LD_VAR 0 3
60044: RET
// export function GetCargoBay ( units ) ; begin
60045: LD_INT 0
60047: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60048: LD_ADDR_VAR 0 2
60052: PUSH
60053: LD_VAR 0 1
60057: PPUSH
60058: LD_INT 2
60060: PUSH
60061: LD_INT 34
60063: PUSH
60064: LD_INT 12
60066: PUSH
60067: EMPTY
60068: LIST
60069: LIST
60070: PUSH
60071: LD_INT 34
60073: PUSH
60074: LD_INT 51
60076: PUSH
60077: EMPTY
60078: LIST
60079: LIST
60080: PUSH
60081: LD_INT 34
60083: PUSH
60084: LD_INT 32
60086: PUSH
60087: EMPTY
60088: LIST
60089: LIST
60090: PUSH
60091: LD_INT 34
60093: PUSH
60094: LD_EXP 40
60098: PUSH
60099: EMPTY
60100: LIST
60101: LIST
60102: PUSH
60103: EMPTY
60104: LIST
60105: LIST
60106: LIST
60107: LIST
60108: LIST
60109: PPUSH
60110: CALL_OW 72
60114: ST_TO_ADDR
// end ;
60115: LD_VAR 0 2
60119: RET
// export function Negate ( value ) ; begin
60120: LD_INT 0
60122: PPUSH
// result := not value ;
60123: LD_ADDR_VAR 0 2
60127: PUSH
60128: LD_VAR 0 1
60132: NOT
60133: ST_TO_ADDR
// end ;
60134: LD_VAR 0 2
60138: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
60139: LD_INT 0
60141: PPUSH
// if x1 = x2 then
60142: LD_VAR 0 1
60146: PUSH
60147: LD_VAR 0 3
60151: EQUAL
60152: IFFALSE 60186
// begin if y1 > y2 then
60154: LD_VAR 0 2
60158: PUSH
60159: LD_VAR 0 4
60163: GREATER
60164: IFFALSE 60176
// result := 0 else
60166: LD_ADDR_VAR 0 5
60170: PUSH
60171: LD_INT 0
60173: ST_TO_ADDR
60174: GO 60184
// result := 3 ;
60176: LD_ADDR_VAR 0 5
60180: PUSH
60181: LD_INT 3
60183: ST_TO_ADDR
// exit ;
60184: GO 60272
// end ; if y1 = y2 then
60186: LD_VAR 0 2
60190: PUSH
60191: LD_VAR 0 4
60195: EQUAL
60196: IFFALSE 60230
// begin if x1 > x2 then
60198: LD_VAR 0 1
60202: PUSH
60203: LD_VAR 0 3
60207: GREATER
60208: IFFALSE 60220
// result := 1 else
60210: LD_ADDR_VAR 0 5
60214: PUSH
60215: LD_INT 1
60217: ST_TO_ADDR
60218: GO 60228
// result := 4 ;
60220: LD_ADDR_VAR 0 5
60224: PUSH
60225: LD_INT 4
60227: ST_TO_ADDR
// exit ;
60228: GO 60272
// end ; if x1 > x2 and y1 > y2 then
60230: LD_VAR 0 1
60234: PUSH
60235: LD_VAR 0 3
60239: GREATER
60240: PUSH
60241: LD_VAR 0 2
60245: PUSH
60246: LD_VAR 0 4
60250: GREATER
60251: AND
60252: IFFALSE 60264
// result := 2 else
60254: LD_ADDR_VAR 0 5
60258: PUSH
60259: LD_INT 2
60261: ST_TO_ADDR
60262: GO 60272
// result := 5 ;
60264: LD_ADDR_VAR 0 5
60268: PUSH
60269: LD_INT 5
60271: ST_TO_ADDR
// end ;
60272: LD_VAR 0 5
60276: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60277: LD_INT 0
60279: PPUSH
60280: PPUSH
// if not driver or not IsInUnit ( driver ) then
60281: LD_VAR 0 1
60285: NOT
60286: PUSH
60287: LD_VAR 0 1
60291: PPUSH
60292: CALL_OW 310
60296: NOT
60297: OR
60298: IFFALSE 60302
// exit ;
60300: GO 60392
// vehicle := IsInUnit ( driver ) ;
60302: LD_ADDR_VAR 0 3
60306: PUSH
60307: LD_VAR 0 1
60311: PPUSH
60312: CALL_OW 310
60316: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60317: LD_VAR 0 1
60321: PPUSH
60322: LD_STRING \
60324: PUSH
60325: LD_INT 0
60327: PUSH
60328: LD_INT 0
60330: PUSH
60331: LD_INT 0
60333: PUSH
60334: LD_INT 0
60336: PUSH
60337: LD_INT 0
60339: PUSH
60340: LD_INT 0
60342: PUSH
60343: EMPTY
60344: LIST
60345: LIST
60346: LIST
60347: LIST
60348: LIST
60349: LIST
60350: LIST
60351: PUSH
60352: LD_STRING E
60354: PUSH
60355: LD_INT 0
60357: PUSH
60358: LD_INT 0
60360: PUSH
60361: LD_VAR 0 3
60365: PUSH
60366: LD_INT 0
60368: PUSH
60369: LD_INT 0
60371: PUSH
60372: LD_INT 0
60374: PUSH
60375: EMPTY
60376: LIST
60377: LIST
60378: LIST
60379: LIST
60380: LIST
60381: LIST
60382: LIST
60383: PUSH
60384: EMPTY
60385: LIST
60386: LIST
60387: PPUSH
60388: CALL_OW 446
// end ;
60392: LD_VAR 0 2
60396: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60397: LD_INT 0
60399: PPUSH
60400: PPUSH
// if not driver or not IsInUnit ( driver ) then
60401: LD_VAR 0 1
60405: NOT
60406: PUSH
60407: LD_VAR 0 1
60411: PPUSH
60412: CALL_OW 310
60416: NOT
60417: OR
60418: IFFALSE 60422
// exit ;
60420: GO 60512
// vehicle := IsInUnit ( driver ) ;
60422: LD_ADDR_VAR 0 3
60426: PUSH
60427: LD_VAR 0 1
60431: PPUSH
60432: CALL_OW 310
60436: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60437: LD_VAR 0 1
60441: PPUSH
60442: LD_STRING \
60444: PUSH
60445: LD_INT 0
60447: PUSH
60448: LD_INT 0
60450: PUSH
60451: LD_INT 0
60453: PUSH
60454: LD_INT 0
60456: PUSH
60457: LD_INT 0
60459: PUSH
60460: LD_INT 0
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: LIST
60467: LIST
60468: LIST
60469: LIST
60470: LIST
60471: PUSH
60472: LD_STRING E
60474: PUSH
60475: LD_INT 0
60477: PUSH
60478: LD_INT 0
60480: PUSH
60481: LD_VAR 0 3
60485: PUSH
60486: LD_INT 0
60488: PUSH
60489: LD_INT 0
60491: PUSH
60492: LD_INT 0
60494: PUSH
60495: EMPTY
60496: LIST
60497: LIST
60498: LIST
60499: LIST
60500: LIST
60501: LIST
60502: LIST
60503: PUSH
60504: EMPTY
60505: LIST
60506: LIST
60507: PPUSH
60508: CALL_OW 447
// end ;
60512: LD_VAR 0 2
60516: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60517: LD_INT 0
60519: PPUSH
60520: PPUSH
60521: PPUSH
// tmp := [ ] ;
60522: LD_ADDR_VAR 0 5
60526: PUSH
60527: EMPTY
60528: ST_TO_ADDR
// for i in units do
60529: LD_ADDR_VAR 0 4
60533: PUSH
60534: LD_VAR 0 1
60538: PUSH
60539: FOR_IN
60540: IFFALSE 60578
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60542: LD_ADDR_VAR 0 5
60546: PUSH
60547: LD_VAR 0 5
60551: PPUSH
60552: LD_VAR 0 5
60556: PUSH
60557: LD_INT 1
60559: PLUS
60560: PPUSH
60561: LD_VAR 0 4
60565: PPUSH
60566: CALL_OW 256
60570: PPUSH
60571: CALL_OW 2
60575: ST_TO_ADDR
60576: GO 60539
60578: POP
60579: POP
// if not tmp then
60580: LD_VAR 0 5
60584: NOT
60585: IFFALSE 60589
// exit ;
60587: GO 60637
// if asc then
60589: LD_VAR 0 2
60593: IFFALSE 60617
// result := SortListByListAsc ( units , tmp ) else
60595: LD_ADDR_VAR 0 3
60599: PUSH
60600: LD_VAR 0 1
60604: PPUSH
60605: LD_VAR 0 5
60609: PPUSH
60610: CALL_OW 76
60614: ST_TO_ADDR
60615: GO 60637
// result := SortListByListDesc ( units , tmp ) ;
60617: LD_ADDR_VAR 0 3
60621: PUSH
60622: LD_VAR 0 1
60626: PPUSH
60627: LD_VAR 0 5
60631: PPUSH
60632: CALL_OW 77
60636: ST_TO_ADDR
// end ;
60637: LD_VAR 0 3
60641: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60642: LD_INT 0
60644: PPUSH
60645: PPUSH
// task := GetTaskList ( mech ) ;
60646: LD_ADDR_VAR 0 4
60650: PUSH
60651: LD_VAR 0 1
60655: PPUSH
60656: CALL_OW 437
60660: ST_TO_ADDR
// if not task then
60661: LD_VAR 0 4
60665: NOT
60666: IFFALSE 60670
// exit ;
60668: GO 60712
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60670: LD_ADDR_VAR 0 3
60674: PUSH
60675: LD_VAR 0 4
60679: PUSH
60680: LD_INT 1
60682: ARRAY
60683: PUSH
60684: LD_INT 1
60686: ARRAY
60687: PUSH
60688: LD_STRING r
60690: EQUAL
60691: PUSH
60692: LD_VAR 0 4
60696: PUSH
60697: LD_INT 1
60699: ARRAY
60700: PUSH
60701: LD_INT 4
60703: ARRAY
60704: PUSH
60705: LD_VAR 0 2
60709: EQUAL
60710: AND
60711: ST_TO_ADDR
// end ;
60712: LD_VAR 0 3
60716: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60717: LD_INT 0
60719: PPUSH
// SetDir ( unit , d ) ;
60720: LD_VAR 0 1
60724: PPUSH
60725: LD_VAR 0 4
60729: PPUSH
60730: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60734: LD_VAR 0 1
60738: PPUSH
60739: LD_VAR 0 2
60743: PPUSH
60744: LD_VAR 0 3
60748: PPUSH
60749: LD_VAR 0 5
60753: PPUSH
60754: CALL_OW 48
// end ;
60758: LD_VAR 0 6
60762: RET
// export function ToNaturalNumber ( number ) ; begin
60763: LD_INT 0
60765: PPUSH
// result := number div 1 ;
60766: LD_ADDR_VAR 0 2
60770: PUSH
60771: LD_VAR 0 1
60775: PUSH
60776: LD_INT 1
60778: DIV
60779: ST_TO_ADDR
// if number < 0 then
60780: LD_VAR 0 1
60784: PUSH
60785: LD_INT 0
60787: LESS
60788: IFFALSE 60798
// result := 0 ;
60790: LD_ADDR_VAR 0 2
60794: PUSH
60795: LD_INT 0
60797: ST_TO_ADDR
// end ;
60798: LD_VAR 0 2
60802: RET
// export function SortByClass ( units , class ) ; var un ; begin
60803: LD_INT 0
60805: PPUSH
60806: PPUSH
// if not units or not class then
60807: LD_VAR 0 1
60811: NOT
60812: PUSH
60813: LD_VAR 0 2
60817: NOT
60818: OR
60819: IFFALSE 60823
// exit ;
60821: GO 60918
// result := [ ] ;
60823: LD_ADDR_VAR 0 3
60827: PUSH
60828: EMPTY
60829: ST_TO_ADDR
// for un in units do
60830: LD_ADDR_VAR 0 4
60834: PUSH
60835: LD_VAR 0 1
60839: PUSH
60840: FOR_IN
60841: IFFALSE 60916
// if GetClass ( un ) = class then
60843: LD_VAR 0 4
60847: PPUSH
60848: CALL_OW 257
60852: PUSH
60853: LD_VAR 0 2
60857: EQUAL
60858: IFFALSE 60885
// result := Insert ( result , 1 , un ) else
60860: LD_ADDR_VAR 0 3
60864: PUSH
60865: LD_VAR 0 3
60869: PPUSH
60870: LD_INT 1
60872: PPUSH
60873: LD_VAR 0 4
60877: PPUSH
60878: CALL_OW 2
60882: ST_TO_ADDR
60883: GO 60914
// result := Replace ( result , result + 1 , un ) ;
60885: LD_ADDR_VAR 0 3
60889: PUSH
60890: LD_VAR 0 3
60894: PPUSH
60895: LD_VAR 0 3
60899: PUSH
60900: LD_INT 1
60902: PLUS
60903: PPUSH
60904: LD_VAR 0 4
60908: PPUSH
60909: CALL_OW 1
60913: ST_TO_ADDR
60914: GO 60840
60916: POP
60917: POP
// end ;
60918: LD_VAR 0 3
60922: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
60923: LD_INT 0
60925: PPUSH
60926: PPUSH
60927: PPUSH
60928: PPUSH
60929: PPUSH
60930: PPUSH
60931: PPUSH
// result := [ ] ;
60932: LD_ADDR_VAR 0 4
60936: PUSH
60937: EMPTY
60938: ST_TO_ADDR
// if x - r < 0 then
60939: LD_VAR 0 1
60943: PUSH
60944: LD_VAR 0 3
60948: MINUS
60949: PUSH
60950: LD_INT 0
60952: LESS
60953: IFFALSE 60965
// min_x := 0 else
60955: LD_ADDR_VAR 0 8
60959: PUSH
60960: LD_INT 0
60962: ST_TO_ADDR
60963: GO 60981
// min_x := x - r ;
60965: LD_ADDR_VAR 0 8
60969: PUSH
60970: LD_VAR 0 1
60974: PUSH
60975: LD_VAR 0 3
60979: MINUS
60980: ST_TO_ADDR
// if y - r < 0 then
60981: LD_VAR 0 2
60985: PUSH
60986: LD_VAR 0 3
60990: MINUS
60991: PUSH
60992: LD_INT 0
60994: LESS
60995: IFFALSE 61007
// min_y := 0 else
60997: LD_ADDR_VAR 0 7
61001: PUSH
61002: LD_INT 0
61004: ST_TO_ADDR
61005: GO 61023
// min_y := y - r ;
61007: LD_ADDR_VAR 0 7
61011: PUSH
61012: LD_VAR 0 2
61016: PUSH
61017: LD_VAR 0 3
61021: MINUS
61022: ST_TO_ADDR
// max_x := x + r ;
61023: LD_ADDR_VAR 0 9
61027: PUSH
61028: LD_VAR 0 1
61032: PUSH
61033: LD_VAR 0 3
61037: PLUS
61038: ST_TO_ADDR
// max_y := y + r ;
61039: LD_ADDR_VAR 0 10
61043: PUSH
61044: LD_VAR 0 2
61048: PUSH
61049: LD_VAR 0 3
61053: PLUS
61054: ST_TO_ADDR
// for _x = min_x to max_x do
61055: LD_ADDR_VAR 0 5
61059: PUSH
61060: DOUBLE
61061: LD_VAR 0 8
61065: DEC
61066: ST_TO_ADDR
61067: LD_VAR 0 9
61071: PUSH
61072: FOR_TO
61073: IFFALSE 61174
// for _y = min_y to max_y do
61075: LD_ADDR_VAR 0 6
61079: PUSH
61080: DOUBLE
61081: LD_VAR 0 7
61085: DEC
61086: ST_TO_ADDR
61087: LD_VAR 0 10
61091: PUSH
61092: FOR_TO
61093: IFFALSE 61170
// begin if not ValidHex ( _x , _y ) then
61095: LD_VAR 0 5
61099: PPUSH
61100: LD_VAR 0 6
61104: PPUSH
61105: CALL_OW 488
61109: NOT
61110: IFFALSE 61114
// continue ;
61112: GO 61092
// if GetResourceTypeXY ( _x , _y ) then
61114: LD_VAR 0 5
61118: PPUSH
61119: LD_VAR 0 6
61123: PPUSH
61124: CALL_OW 283
61128: IFFALSE 61168
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61130: LD_ADDR_VAR 0 4
61134: PUSH
61135: LD_VAR 0 4
61139: PPUSH
61140: LD_VAR 0 4
61144: PUSH
61145: LD_INT 1
61147: PLUS
61148: PPUSH
61149: LD_VAR 0 5
61153: PUSH
61154: LD_VAR 0 6
61158: PUSH
61159: EMPTY
61160: LIST
61161: LIST
61162: PPUSH
61163: CALL_OW 1
61167: ST_TO_ADDR
// end ;
61168: GO 61092
61170: POP
61171: POP
61172: GO 61072
61174: POP
61175: POP
// end ;
61176: LD_VAR 0 4
61180: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
61181: LD_INT 0
61183: PPUSH
61184: PPUSH
61185: PPUSH
61186: PPUSH
61187: PPUSH
61188: PPUSH
// if not units then
61189: LD_VAR 0 1
61193: NOT
61194: IFFALSE 61198
// exit ;
61196: GO 61599
// result := UnitFilter ( units , [ f_ok ] ) ;
61198: LD_ADDR_VAR 0 3
61202: PUSH
61203: LD_VAR 0 1
61207: PPUSH
61208: LD_INT 50
61210: PUSH
61211: EMPTY
61212: LIST
61213: PPUSH
61214: CALL_OW 72
61218: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61219: LD_ADDR_VAR 0 7
61223: PUSH
61224: LD_VAR 0 1
61228: PUSH
61229: LD_INT 1
61231: ARRAY
61232: PPUSH
61233: CALL_OW 255
61237: ST_TO_ADDR
// if not result then
61238: LD_VAR 0 3
61242: NOT
61243: IFFALSE 61247
// exit ;
61245: GO 61599
// for i in result do
61247: LD_ADDR_VAR 0 4
61251: PUSH
61252: LD_VAR 0 3
61256: PUSH
61257: FOR_IN
61258: IFFALSE 61597
// begin tag := GetTag ( i ) + 1 ;
61260: LD_ADDR_VAR 0 8
61264: PUSH
61265: LD_VAR 0 4
61269: PPUSH
61270: CALL_OW 110
61274: PUSH
61275: LD_INT 1
61277: PLUS
61278: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
61279: LD_ADDR_VAR 0 6
61283: PUSH
61284: LD_VAR 0 4
61288: PPUSH
61289: CALL_OW 250
61293: PPUSH
61294: LD_VAR 0 4
61298: PPUSH
61299: CALL_OW 251
61303: PPUSH
61304: LD_INT 6
61306: PPUSH
61307: CALL 60923 0 3
61311: ST_TO_ADDR
// if cr then
61312: LD_VAR 0 6
61316: IFFALSE 61355
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
61318: LD_VAR 0 4
61322: PPUSH
61323: LD_VAR 0 6
61327: PUSH
61328: LD_INT 1
61330: ARRAY
61331: PUSH
61332: LD_INT 1
61334: ARRAY
61335: PPUSH
61336: LD_VAR 0 6
61340: PUSH
61341: LD_INT 1
61343: ARRAY
61344: PUSH
61345: LD_INT 2
61347: ARRAY
61348: PPUSH
61349: CALL_OW 116
61353: GO 61595
// if path > tag then
61355: LD_VAR 0 2
61359: PUSH
61360: LD_VAR 0 8
61364: GREATER
61365: IFFALSE 61543
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
61367: LD_ADDR_VAR 0 5
61371: PUSH
61372: LD_INT 81
61374: PUSH
61375: LD_VAR 0 7
61379: PUSH
61380: EMPTY
61381: LIST
61382: LIST
61383: PUSH
61384: LD_INT 91
61386: PUSH
61387: LD_VAR 0 4
61391: PUSH
61392: LD_INT 12
61394: PUSH
61395: EMPTY
61396: LIST
61397: LIST
61398: LIST
61399: PUSH
61400: EMPTY
61401: LIST
61402: LIST
61403: PPUSH
61404: CALL_OW 69
61408: ST_TO_ADDR
// if enemy then
61409: LD_VAR 0 5
61413: IFFALSE 61441
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
61415: LD_VAR 0 4
61419: PPUSH
61420: LD_VAR 0 5
61424: PPUSH
61425: LD_VAR 0 4
61429: PPUSH
61430: CALL_OW 74
61434: PPUSH
61435: CALL_OW 115
61439: GO 61541
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
61441: LD_VAR 0 4
61445: PPUSH
61446: LD_VAR 0 2
61450: PUSH
61451: LD_VAR 0 8
61455: ARRAY
61456: PUSH
61457: LD_INT 1
61459: ARRAY
61460: PPUSH
61461: LD_VAR 0 2
61465: PUSH
61466: LD_VAR 0 8
61470: ARRAY
61471: PUSH
61472: LD_INT 2
61474: ARRAY
61475: PPUSH
61476: CALL_OW 297
61480: PUSH
61481: LD_INT 6
61483: GREATER
61484: IFFALSE 61527
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61486: LD_VAR 0 4
61490: PPUSH
61491: LD_VAR 0 2
61495: PUSH
61496: LD_VAR 0 8
61500: ARRAY
61501: PUSH
61502: LD_INT 1
61504: ARRAY
61505: PPUSH
61506: LD_VAR 0 2
61510: PUSH
61511: LD_VAR 0 8
61515: ARRAY
61516: PUSH
61517: LD_INT 2
61519: ARRAY
61520: PPUSH
61521: CALL_OW 114
61525: GO 61541
// SetTag ( i , tag ) ;
61527: LD_VAR 0 4
61531: PPUSH
61532: LD_VAR 0 8
61536: PPUSH
61537: CALL_OW 109
// end else
61541: GO 61595
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61543: LD_ADDR_VAR 0 5
61547: PUSH
61548: LD_INT 81
61550: PUSH
61551: LD_VAR 0 7
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: PPUSH
61560: CALL_OW 69
61564: ST_TO_ADDR
// if enemy then
61565: LD_VAR 0 5
61569: IFFALSE 61595
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61571: LD_VAR 0 4
61575: PPUSH
61576: LD_VAR 0 5
61580: PPUSH
61581: LD_VAR 0 4
61585: PPUSH
61586: CALL_OW 74
61590: PPUSH
61591: CALL_OW 115
// end ; end ;
61595: GO 61257
61597: POP
61598: POP
// end ;
61599: LD_VAR 0 3
61603: RET
