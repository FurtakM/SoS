// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// FogOff ( 7 ) ;
  11: LD_INT 7
  13: PPUSH
  14: CALL_OW 344
// RandomizeAll ;
  18: CALL_OW 11
// InitVariables ;
  22: CALL 66 0 0
// LoadBuildings ;
  26: CALL 123 0 0
// PrepareAlliance ;
  30: CALL 666 0 0
// music_nat := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
  34: LD_ADDR_OWVAR 71
  38: PUSH
  39: LD_INT 1
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 2
  54: PPUSH
  55: CALL_OW 12
  59: ARRAY
  60: ST_TO_ADDR
// Action ;
  61: CALL 3458 0 0
// end ;
  65: END
// export debug ; export function InitVariables ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: CALL 20019 0 1
// end ;
  91: PPOPN 1
  93: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
  94: LD_VAR 0 1
  98: PPUSH
  99: CALL 19915 0 1
// end ;
 103: PPOPN 1
 105: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
 106: LD_VAR 0 1
 110: PPUSH
 111: LD_VAR 0 2
 115: PPUSH
 116: CALL 20035 0 2
// end ; end_of_file
 120: PPOPN 2
 122: END
// export function LoadBuildings ; var i , tmp , b , j ; begin
 123: LD_INT 0
 125: PPUSH
 126: PPUSH
 127: PPUSH
 128: PPUSH
 129: PPUSH
// tmp := LoadVariable ( 13a_buildings , [ [ 7 , 1 , b_warehouse , 70 , 46 , 3 , 10 , 0 , 0 , 0 ] ] ) ;
 130: LD_ADDR_VAR 0 3
 134: PUSH
 135: LD_STRING 13a_buildings
 137: PPUSH
 138: LD_INT 7
 140: PUSH
 141: LD_INT 1
 143: PUSH
 144: LD_INT 1
 146: PUSH
 147: LD_INT 70
 149: PUSH
 150: LD_INT 46
 152: PUSH
 153: LD_INT 3
 155: PUSH
 156: LD_INT 10
 158: PUSH
 159: LD_INT 0
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: PPUSH
 183: CALL_OW 30
 187: ST_TO_ADDR
// bc_kind1 := - 1 ;
 188: LD_ADDR_OWVAR 44
 192: PUSH
 193: LD_INT 1
 195: NEG
 196: ST_TO_ADDR
// bc_kind2 := - 1 ;
 197: LD_ADDR_OWVAR 45
 201: PUSH
 202: LD_INT 1
 204: NEG
 205: ST_TO_ADDR
// for i in tmp do
 206: LD_ADDR_VAR 0 2
 210: PUSH
 211: LD_VAR 0 3
 215: PUSH
 216: FOR_IN
 217: IFFALSE 462
// begin uc_side := 7 ;
 219: LD_ADDR_OWVAR 20
 223: PUSH
 224: LD_INT 7
 226: ST_TO_ADDR
// uc_nation := i [ 2 ] ;
 227: LD_ADDR_OWVAR 21
 231: PUSH
 232: LD_VAR 0 2
 236: PUSH
 237: LD_INT 2
 239: ARRAY
 240: ST_TO_ADDR
// if i [ 2 ] = 2 then
 241: LD_VAR 0 2
 245: PUSH
 246: LD_INT 2
 248: ARRAY
 249: PUSH
 250: LD_INT 2
 252: EQUAL
 253: IFFALSE 263
// uc_side := 4 ;
 255: LD_ADDR_OWVAR 20
 259: PUSH
 260: LD_INT 4
 262: ST_TO_ADDR
// bc_type := i [ 3 ] ;
 263: LD_ADDR_OWVAR 42
 267: PUSH
 268: LD_VAR 0 2
 272: PUSH
 273: LD_INT 3
 275: ARRAY
 276: ST_TO_ADDR
// if i [ 3 ] in [ b_oil_mine , b_siberite_mine ] then
 277: LD_VAR 0 2
 281: PUSH
 282: LD_INT 3
 284: ARRAY
 285: PUSH
 286: LD_INT 29
 288: PUSH
 289: LD_INT 30
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: IN
 296: IFFALSE 329
// SetResourceVisibility ( i [ 4 ] , i [ 5 ] , i [ 1 ] ) ;
 298: LD_VAR 0 2
 302: PUSH
 303: LD_INT 4
 305: ARRAY
 306: PPUSH
 307: LD_VAR 0 2
 311: PUSH
 312: LD_INT 5
 314: ARRAY
 315: PPUSH
 316: LD_VAR 0 2
 320: PUSH
 321: LD_INT 1
 323: ARRAY
 324: PPUSH
 325: CALL_OW 441
// if i [ 8 ] then
 329: LD_VAR 0 2
 333: PUSH
 334: LD_INT 8
 336: ARRAY
 337: IFFALSE 353
// bc_kind1 := i [ 8 ] ;
 339: LD_ADDR_OWVAR 44
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: LD_INT 8
 351: ARRAY
 352: ST_TO_ADDR
// if i [ 9 ] then
 353: LD_VAR 0 2
 357: PUSH
 358: LD_INT 9
 360: ARRAY
 361: IFFALSE 377
// bc_kind2 := i [ 9 ] ;
 363: LD_ADDR_OWVAR 45
 367: PUSH
 368: LD_VAR 0 2
 372: PUSH
 373: LD_INT 9
 375: ARRAY
 376: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 4 ] , i [ 5 ] , i [ 6 ] ) ;
 377: LD_ADDR_VAR 0 4
 381: PUSH
 382: LD_VAR 0 2
 386: PUSH
 387: LD_INT 4
 389: ARRAY
 390: PPUSH
 391: LD_VAR 0 2
 395: PUSH
 396: LD_INT 5
 398: ARRAY
 399: PPUSH
 400: LD_VAR 0 2
 404: PUSH
 405: LD_INT 6
 407: ARRAY
 408: PPUSH
 409: CALL_OW 47
 413: ST_TO_ADDR
// SetBLevel ( b , i [ 7 ] ) ;
 414: LD_VAR 0 4
 418: PPUSH
 419: LD_VAR 0 2
 423: PUSH
 424: LD_INT 7
 426: ARRAY
 427: PPUSH
 428: CALL_OW 241
// if i [ 10 ] then
 432: LD_VAR 0 2
 436: PUSH
 437: LD_INT 10
 439: ARRAY
 440: IFFALSE 460
// PlaceWeaponTurret ( b , i [ 10 ] ) ;
 442: LD_VAR 0 4
 446: PPUSH
 447: LD_VAR 0 2
 451: PUSH
 452: LD_INT 10
 454: ARRAY
 455: PPUSH
 456: CALL_OW 431
// end ;
 460: GO 216
 462: POP
 463: POP
// if HexInfo ( 144 , 65 ) = 0 then
 464: LD_INT 144
 466: PPUSH
 467: LD_INT 65
 469: PPUSH
 470: CALL_OW 428
 474: PUSH
 475: LD_INT 0
 477: EQUAL
 478: IFFALSE 515
// begin uc_side := 4 ;
 480: LD_ADDR_OWVAR 20
 484: PUSH
 485: LD_INT 4
 487: ST_TO_ADDR
// bc_type := b_warehouse ;
 488: LD_ADDR_OWVAR 42
 492: PUSH
 493: LD_INT 1
 495: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 144 , 65 , 1 ) ;
 496: LD_ADDR_VAR 0 4
 500: PUSH
 501: LD_INT 144
 503: PPUSH
 504: LD_INT 65
 506: PPUSH
 507: LD_INT 1
 509: PPUSH
 510: CALL_OW 47
 514: ST_TO_ADDR
// end ; for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 515: LD_ADDR_VAR 0 2
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 2
 532: PUSH
 533: LD_INT 30
 535: PUSH
 536: LD_INT 0
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 30
 545: PUSH
 546: LD_INT 1
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PPUSH
 562: CALL_OW 69
 566: PUSH
 567: FOR_IN
 568: IFFALSE 620
// for j = 1 to 3 do
 570: LD_ADDR_VAR 0 5
 574: PUSH
 575: DOUBLE
 576: LD_INT 1
 578: DEC
 579: ST_TO_ADDR
 580: LD_INT 3
 582: PUSH
 583: FOR_TO
 584: IFFALSE 616
// SetResourceType ( GetBase ( i ) , j , 3000 / j ) ;
 586: LD_VAR 0 2
 590: PPUSH
 591: CALL_OW 274
 595: PPUSH
 596: LD_VAR 0 5
 600: PPUSH
 601: LD_INT 3000
 603: PUSH
 604: LD_VAR 0 5
 608: DIVREAL
 609: PPUSH
 610: CALL_OW 277
 614: GO 583
 616: POP
 617: POP
 618: GO 567
 620: POP
 621: POP
// for i in FilterUnitsInArea ( spot_area , [ f_side , 7 ] ) do
 622: LD_ADDR_VAR 0 2
 626: PUSH
 627: LD_INT 3
 629: PPUSH
 630: LD_INT 22
 632: PUSH
 633: LD_INT 7
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PPUSH
 640: CALL_OW 70
 644: PUSH
 645: FOR_IN
 646: IFFALSE 659
// RemoveUnit ( i ) ;
 648: LD_VAR 0 2
 652: PPUSH
 653: CALL_OW 64
 657: GO 645
 659: POP
 660: POP
// end ; end_of_file
 661: LD_VAR 0 1
 665: RET
// export JMM , Burlak , freedom ; export Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Belkov , Gnyevko , Masha ; export squad1 , squad2 ; export function PrepareAlliance ; var tmp , i , veh ; begin
 666: LD_INT 0
 668: PPUSH
 669: PPUSH
 670: PPUSH
 671: PPUSH
// uc_side := 7 ;
 672: LD_ADDR_OWVAR 20
 676: PUSH
 677: LD_INT 7
 679: ST_TO_ADDR
// uc_nation := 1 ;
 680: LD_ADDR_OWVAR 21
 684: PUSH
 685: LD_INT 1
 687: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 13a_ ) ;
 688: LD_ADDR_EXP 2
 692: PUSH
 693: LD_STRING JMM
 695: PPUSH
 696: LD_EXP 1
 700: NOT
 701: PPUSH
 702: LD_STRING 13a_
 704: PPUSH
 705: CALL 24204 0 3
 709: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 13a_ ) ;
 710: LD_ADDR_EXP 3
 714: PUSH
 715: LD_STRING Burlak
 717: PPUSH
 718: LD_EXP 1
 722: NOT
 723: PPUSH
 724: LD_STRING 13a_
 726: PPUSH
 727: CALL 24204 0 3
 731: ST_TO_ADDR
// if debug then
 732: LD_EXP 1
 736: IFFALSE 771
// begin PrepareHuman ( sex_male , 4 , 10 ) ;
 738: LD_INT 1
 740: PPUSH
 741: LD_INT 4
 743: PPUSH
 744: LD_INT 10
 746: PPUSH
 747: CALL_OW 380
// JMM := CreateHuman ;
 751: LD_ADDR_EXP 2
 755: PUSH
 756: CALL_OW 44
 760: ST_TO_ADDR
// Burlak := CreateHuman ;
 761: LD_ADDR_EXP 3
 765: PUSH
 766: CALL_OW 44
 770: ST_TO_ADDR
// end ; freedom := FilterUnitsInArea ( freedom_base , [ [ f_side , 7 ] , [ f_or , [ f_nation , 1 ] , [ f_nation , 3 ] ] , [ f_btype , b_warehouse ] ] ) ;
 771: LD_ADDR_EXP 4
 775: PUSH
 776: LD_INT 1
 778: PPUSH
 779: LD_INT 22
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 2
 791: PUSH
 792: LD_INT 23
 794: PUSH
 795: LD_INT 1
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 23
 804: PUSH
 805: LD_INT 3
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: LIST
 831: PPUSH
 832: CALL_OW 70
 836: ST_TO_ADDR
// if freedom then
 837: LD_EXP 4
 841: IFFALSE 968
// begin freedom := freedom [ 1 ] ;
 843: LD_ADDR_EXP 4
 847: PUSH
 848: LD_EXP 4
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: ST_TO_ADDR
// SetBName ( freedom , freedom ) ;
 857: LD_EXP 4
 861: PPUSH
 862: LD_STRING freedom
 864: PPUSH
 865: CALL_OW 500
// CenterNowOnUnits ( freedom ) ;
 869: LD_EXP 4
 873: PPUSH
 874: CALL_OW 87
// PlaceHumanInUnit ( JMM , freedom ) ;
 878: LD_EXP 2
 882: PPUSH
 883: LD_EXP 4
 887: PPUSH
 888: CALL_OW 52
// PlaceHumanInUnit ( Burlak , freedom ) ;
 892: LD_EXP 3
 896: PPUSH
 897: LD_EXP 4
 901: PPUSH
 902: CALL_OW 52
// SetResourceType ( GetBase ( freedom ) , mat_cans , 1000 ) ;
 906: LD_EXP 4
 910: PPUSH
 911: CALL_OW 274
 915: PPUSH
 916: LD_INT 1
 918: PPUSH
 919: LD_INT 1000
 921: PPUSH
 922: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_oil , 400 ) ;
 926: LD_EXP 4
 930: PPUSH
 931: CALL_OW 274
 935: PPUSH
 936: LD_INT 2
 938: PPUSH
 939: LD_INT 400
 941: PPUSH
 942: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_siberit , 30 ) ;
 946: LD_EXP 4
 950: PPUSH
 951: CALL_OW 274
 955: PPUSH
 956: LD_INT 3
 958: PPUSH
 959: LD_INT 30
 961: PPUSH
 962: CALL_OW 277
// end else
 966: GO 1055
// begin PlaceUnitArea ( JMM , freedom_base , false ) ;
 968: LD_EXP 2
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: LD_INT 0
 978: PPUSH
 979: CALL_OW 49
// PlaceUnitXYR ( Burlak , GetX ( JMM ) , GetY ( JMM ) , 8 , false ) ;
 983: LD_EXP 3
 987: PPUSH
 988: LD_EXP 2
 992: PPUSH
 993: CALL_OW 250
 997: PPUSH
 998: LD_EXP 2
1002: PPUSH
1003: CALL_OW 251
1007: PPUSH
1008: LD_INT 8
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 50
// ComTurnUnit ( JMM , Burlak ) ;
1018: LD_EXP 2
1022: PPUSH
1023: LD_EXP 3
1027: PPUSH
1028: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
1032: LD_EXP 3
1036: PPUSH
1037: LD_EXP 2
1041: PPUSH
1042: CALL_OW 119
// CenterNowOnUnits ( JMM ) ;
1046: LD_EXP 2
1050: PPUSH
1051: CALL_OW 87
// end ; SetClass ( JMM , 2 ) ;
1055: LD_EXP 2
1059: PPUSH
1060: LD_INT 2
1062: PPUSH
1063: CALL_OW 336
// tmp := [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] , [ us_double_gun , us_laser , us_rocket_launcher , us_gatling_gun , us_cargo_bay ] ] ;
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: PUSH
1075: LD_INT 3
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 5
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: PUSH
1090: LD_INT 5
1092: PUSH
1093: LD_INT 9
1095: PUSH
1096: LD_INT 7
1098: PUSH
1099: LD_INT 4
1101: PUSH
1102: LD_INT 12
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: ST_TO_ADDR
// for i = 1 to 5 do
1116: LD_ADDR_VAR 0 3
1120: PUSH
1121: DOUBLE
1122: LD_INT 1
1124: DEC
1125: ST_TO_ADDR
1126: LD_INT 5
1128: PUSH
1129: FOR_TO
1130: IFFALSE 1314
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 5 + 1 ] , 100 ) ;
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 1
1139: ARRAY
1140: PUSH
1141: LD_VAR 0 3
1145: PUSH
1146: LD_INT 4
1148: MOD
1149: PUSH
1150: LD_INT 1
1152: PLUS
1153: ARRAY
1154: PPUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 3
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 1
1167: PPUSH
1168: LD_INT 2
1170: PPUSH
1171: CALL_OW 12
1175: ARRAY
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: LD_VAR 0 2
1184: PUSH
1185: LD_INT 2
1187: ARRAY
1188: PUSH
1189: LD_VAR 0 3
1193: PUSH
1194: LD_INT 5
1196: MOD
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: PPUSH
1203: LD_INT 100
1205: PPUSH
1206: CALL 29219 0 5
// veh := CreateVehicle ;
1210: LD_ADDR_VAR 0 4
1214: PUSH
1215: CALL_OW 45
1219: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1220: LD_VAR 0 4
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: LD_INT 5
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: CALL_OW 233
// if freedom then
1240: LD_EXP 4
1244: IFFALSE 1277
// begin if IsInArea ( freedom , freedom_base ) then
1246: LD_EXP 4
1250: PPUSH
1251: LD_INT 1
1253: PPUSH
1254: CALL_OW 308
1258: IFFALSE 1275
// PlaceUnitArea ( veh , freedom_base , false ) end else
1260: LD_VAR 0 4
1264: PPUSH
1265: LD_INT 1
1267: PPUSH
1268: LD_INT 0
1270: PPUSH
1271: CALL_OW 49
1275: GO 1312
// PlaceUnitXYR ( veh , GetX ( JMM ) , GetY ( JMM ) , 14 , false ) ;
1277: LD_VAR 0 4
1281: PPUSH
1282: LD_EXP 2
1286: PPUSH
1287: CALL_OW 250
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL_OW 251
1301: PPUSH
1302: LD_INT 14
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: CALL_OW 50
// end ;
1312: GO 1129
1314: POP
1315: POP
// uc_nation := 3 ;
1316: LD_ADDR_OWVAR 21
1320: PUSH
1321: LD_INT 3
1323: ST_TO_ADDR
// tmp := [ [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] ] ;
1324: LD_ADDR_VAR 0 2
1328: PUSH
1329: LD_INT 21
1331: PUSH
1332: LD_INT 22
1334: PUSH
1335: LD_INT 23
1337: PUSH
1338: LD_INT 24
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 43
1349: PUSH
1350: LD_INT 44
1352: PUSH
1353: LD_INT 45
1355: PUSH
1356: EMPTY
1357: LIST
1358: LIST
1359: LIST
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: ST_TO_ADDR
// for i = 1 to 5 do
1365: LD_ADDR_VAR 0 3
1369: PUSH
1370: DOUBLE
1371: LD_INT 1
1373: DEC
1374: ST_TO_ADDR
1375: LD_INT 5
1377: PUSH
1378: FOR_TO
1379: IFFALSE 1506
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 3 + 1 ] , 100 ) ;
1381: LD_VAR 0 2
1385: PUSH
1386: LD_INT 1
1388: ARRAY
1389: PUSH
1390: LD_VAR 0 3
1394: PUSH
1395: LD_INT 4
1397: MOD
1398: PUSH
1399: LD_INT 1
1401: PLUS
1402: ARRAY
1403: PPUSH
1404: LD_INT 1
1406: PUSH
1407: LD_INT 3
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: LD_INT 1
1416: PPUSH
1417: LD_INT 2
1419: PPUSH
1420: CALL_OW 12
1424: ARRAY
1425: PPUSH
1426: LD_INT 1
1428: PPUSH
1429: LD_VAR 0 2
1433: PUSH
1434: LD_INT 2
1436: ARRAY
1437: PUSH
1438: LD_VAR 0 3
1442: PUSH
1443: LD_INT 3
1445: MOD
1446: PUSH
1447: LD_INT 1
1449: PLUS
1450: ARRAY
1451: PPUSH
1452: LD_INT 100
1454: PPUSH
1455: CALL 29219 0 5
// veh := CreateVehicle ;
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: CALL_OW 45
1468: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1469: LD_VAR 0 4
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: LD_INT 5
1479: PPUSH
1480: CALL_OW 12
1484: PPUSH
1485: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 1
1496: PPUSH
1497: LD_INT 0
1499: PPUSH
1500: CALL_OW 49
// end ;
1504: GO 1378
1506: POP
1507: POP
// if not FilterAllUnits ( [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
1508: LD_INT 2
1510: PUSH
1511: LD_INT 34
1513: PUSH
1514: LD_INT 12
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 34
1523: PUSH
1524: LD_INT 51
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: PPUSH
1536: CALL_OW 69
1540: NOT
1541: IFFALSE 1607
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 ) ;
1543: LD_INT 22
1545: PPUSH
1546: LD_INT 3
1548: PPUSH
1549: LD_INT 1
1551: PPUSH
1552: LD_INT 51
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL 29219 0 5
// veh := CreateVehicle ;
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: CALL_OW 45
1571: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1572: LD_VAR 0 4
1576: PPUSH
1577: LD_INT 0
1579: PPUSH
1580: LD_INT 5
1582: PPUSH
1583: CALL_OW 12
1587: PPUSH
1588: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1592: LD_VAR 0 4
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: LD_INT 0
1602: PPUSH
1603: CALL_OW 49
// end ; tmp := LoadVariable ( 13a_Masha , [ ] ) ;
1607: LD_ADDR_VAR 0 2
1611: PUSH
1612: LD_STRING 13a_Masha
1614: PPUSH
1615: EMPTY
1616: PPUSH
1617: CALL_OW 30
1621: ST_TO_ADDR
// if tmp then
1622: LD_VAR 0 2
1626: IFFALSE 1709
// begin PrepareVehicle ( tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] , 100 ) ;
1628: LD_VAR 0 2
1632: PUSH
1633: LD_INT 1
1635: ARRAY
1636: PPUSH
1637: LD_VAR 0 2
1641: PUSH
1642: LD_INT 2
1644: ARRAY
1645: PPUSH
1646: LD_VAR 0 2
1650: PUSH
1651: LD_INT 3
1653: ARRAY
1654: PPUSH
1655: LD_VAR 0 2
1659: PUSH
1660: LD_INT 4
1662: ARRAY
1663: PPUSH
1664: LD_INT 100
1666: PPUSH
1667: CALL 29219 0 5
// Masha := CreateVehicle ;
1671: LD_ADDR_EXP 36
1675: PUSH
1676: CALL_OW 45
1680: ST_TO_ADDR
// PlaceUnitArea ( Masha , freedom_base , false ) ;
1681: LD_EXP 36
1685: PPUSH
1686: LD_INT 1
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 49
// SetMark ( Masha , - 7 ) ;
1696: LD_EXP 36
1700: PPUSH
1701: LD_INT 7
1703: NEG
1704: PPUSH
1705: CALL_OW 242
// end ; uc_side := 4 ;
1709: LD_ADDR_OWVAR 20
1713: PUSH
1714: LD_INT 4
1716: ST_TO_ADDR
// tmp := [ ] ;
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: EMPTY
1723: ST_TO_ADDR
// squad1 := [ ] ;
1724: LD_ADDR_EXP 37
1728: PUSH
1729: EMPTY
1730: ST_TO_ADDR
// squad2 := [ ] ;
1731: LD_ADDR_EXP 38
1735: PUSH
1736: EMPTY
1737: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 13a_ ) ;
1738: LD_ADDR_EXP 19
1742: PUSH
1743: LD_STRING Joan
1745: PPUSH
1746: LD_EXP 1
1750: NOT
1751: PPUSH
1752: LD_STRING 13a_
1754: PPUSH
1755: CALL 24204 0 3
1759: ST_TO_ADDR
// if Joan then
1760: LD_EXP 19
1764: IFFALSE 1782
// tmp := tmp ^ Joan ;
1766: LD_ADDR_VAR 0 2
1770: PUSH
1771: LD_VAR 0 2
1775: PUSH
1776: LD_EXP 19
1780: ADD
1781: ST_TO_ADDR
// Roth := PrepareUnit ( Roth , ( not debug ) , 13a_ ) ;
1782: LD_ADDR_EXP 5
1786: PUSH
1787: LD_STRING Roth
1789: PPUSH
1790: LD_EXP 1
1794: NOT
1795: PPUSH
1796: LD_STRING 13a_
1798: PPUSH
1799: CALL 24204 0 3
1803: ST_TO_ADDR
// if Roth then
1804: LD_EXP 5
1808: IFFALSE 1826
// tmp := tmp ^ Roth ;
1810: LD_ADDR_VAR 0 2
1814: PUSH
1815: LD_VAR 0 2
1819: PUSH
1820: LD_EXP 5
1824: ADD
1825: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 13a_ ) ;
1826: LD_ADDR_EXP 10
1830: PUSH
1831: LD_STRING Denis
1833: PPUSH
1834: LD_EXP 1
1838: NOT
1839: PPUSH
1840: LD_STRING 13a_
1842: PPUSH
1843: CALL 24204 0 3
1847: ST_TO_ADDR
// if Denis then
1848: LD_EXP 10
1852: IFFALSE 1870
// tmp := tmp ^ Denis ;
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: LD_VAR 0 2
1863: PUSH
1864: LD_EXP 10
1868: ADD
1869: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) , 13a_ ) ;
1870: LD_ADDR_EXP 20
1874: PUSH
1875: LD_STRING DeltaDoctor
1877: PPUSH
1878: LD_EXP 1
1882: NOT
1883: PPUSH
1884: LD_STRING 13a_
1886: PPUSH
1887: CALL 24204 0 3
1891: ST_TO_ADDR
// if DeltaDoctor then
1892: LD_EXP 20
1896: IFFALSE 1914
// tmp := tmp ^ DeltaDoctor ;
1898: LD_ADDR_VAR 0 2
1902: PUSH
1903: LD_VAR 0 2
1907: PUSH
1908: LD_EXP 20
1912: ADD
1913: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , ( not debug ) , 13a_ ) ;
1914: LD_ADDR_EXP 18
1918: PUSH
1919: LD_STRING Simms
1921: PPUSH
1922: LD_EXP 1
1926: NOT
1927: PPUSH
1928: LD_STRING 13a_
1930: PPUSH
1931: CALL 24204 0 3
1935: ST_TO_ADDR
// if Simms then
1936: LD_EXP 18
1940: IFFALSE 1958
// tmp := tmp ^ Simms ;
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: LD_VAR 0 2
1951: PUSH
1952: LD_EXP 18
1956: ADD
1957: ST_TO_ADDR
// Gossudarov := PrepareUnit ( Gossudarov , ( not debug ) , 13a_ ) ;
1958: LD_ADDR_EXP 21
1962: PUSH
1963: LD_STRING Gossudarov
1965: PPUSH
1966: LD_EXP 1
1970: NOT
1971: PPUSH
1972: LD_STRING 13a_
1974: PPUSH
1975: CALL 24204 0 3
1979: ST_TO_ADDR
// if Gossudarov then
1980: LD_EXP 21
1984: IFFALSE 2002
// tmp := tmp ^ Gossudarov ;
1986: LD_ADDR_VAR 0 2
1990: PUSH
1991: LD_VAR 0 2
1995: PUSH
1996: LD_EXP 21
2000: ADD
2001: ST_TO_ADDR
// Kirilenkova := PrepareUnit ( Kirilenkova , ( not debug ) , 13a_ ) ;
2002: LD_ADDR_EXP 22
2006: PUSH
2007: LD_STRING Kirilenkova
2009: PPUSH
2010: LD_EXP 1
2014: NOT
2015: PPUSH
2016: LD_STRING 13a_
2018: PPUSH
2019: CALL 24204 0 3
2023: ST_TO_ADDR
// if Kirilenkova then
2024: LD_EXP 22
2028: IFFALSE 2046
// tmp := tmp ^ Kirilenkova ;
2030: LD_ADDR_VAR 0 2
2034: PUSH
2035: LD_VAR 0 2
2039: PUSH
2040: LD_EXP 22
2044: ADD
2045: ST_TO_ADDR
// Petrosyan := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2046: LD_ADDR_EXP 25
2050: PUSH
2051: LD_STRING Petrosyan
2053: PPUSH
2054: LD_EXP 1
2058: NOT
2059: PPUSH
2060: LD_STRING 13a_
2062: PPUSH
2063: CALL 24204 0 3
2067: ST_TO_ADDR
// if Petrosyan then
2068: LD_EXP 25
2072: IFFALSE 2090
// tmp := tmp ^ Petrosyan ;
2074: LD_ADDR_VAR 0 2
2078: PUSH
2079: LD_VAR 0 2
2083: PUSH
2084: LD_EXP 25
2088: ADD
2089: ST_TO_ADDR
// Scholtze := PrepareUnit ( Petrosyan , ( not debug ) , 13a_ ) ;
2090: LD_ADDR_EXP 26
2094: PUSH
2095: LD_STRING Petrosyan
2097: PPUSH
2098: LD_EXP 1
2102: NOT
2103: PPUSH
2104: LD_STRING 13a_
2106: PPUSH
2107: CALL 24204 0 3
2111: ST_TO_ADDR
// if Scholtze then
2112: LD_EXP 26
2116: IFFALSE 2134
// tmp := tmp ^ Scholtze ;
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: LD_VAR 0 2
2127: PUSH
2128: LD_EXP 26
2132: ADD
2133: ST_TO_ADDR
// Dolgov := PrepareUnit ( Dolgov , ( not debug ) , 13a_ ) ;
2134: LD_ADDR_EXP 24
2138: PUSH
2139: LD_STRING Dolgov
2141: PPUSH
2142: LD_EXP 1
2146: NOT
2147: PPUSH
2148: LD_STRING 13a_
2150: PPUSH
2151: CALL 24204 0 3
2155: ST_TO_ADDR
// if Dolgov then
2156: LD_EXP 24
2160: IFFALSE 2178
// tmp := tmp ^ Dolgov ;
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_VAR 0 2
2171: PUSH
2172: LD_EXP 24
2176: ADD
2177: ST_TO_ADDR
// for i in tmp do
2178: LD_ADDR_VAR 0 3
2182: PUSH
2183: LD_VAR 0 2
2187: PUSH
2188: FOR_IN
2189: IFFALSE 2214
// PlaceUnitXYR ( i , 160 , 78 , 22 , false ) ;
2191: LD_VAR 0 3
2195: PPUSH
2196: LD_INT 160
2198: PPUSH
2199: LD_INT 78
2201: PPUSH
2202: LD_INT 22
2204: PPUSH
2205: LD_INT 0
2207: PPUSH
2208: CALL_OW 50
2212: GO 2188
2214: POP
2215: POP
// squad1 := tmp ;
2216: LD_ADDR_EXP 37
2220: PUSH
2221: LD_VAR 0 2
2225: ST_TO_ADDR
// tmp := [ ] ;
2226: LD_ADDR_VAR 0 2
2230: PUSH
2231: EMPTY
2232: ST_TO_ADDR
// Petrovova := PrepareUnit ( Petrova , ( not debug ) , 13a_ ) ;
2233: LD_ADDR_EXP 30
2237: PUSH
2238: LD_STRING Petrova
2240: PPUSH
2241: LD_EXP 1
2245: NOT
2246: PPUSH
2247: LD_STRING 13a_
2249: PPUSH
2250: CALL 24204 0 3
2254: ST_TO_ADDR
// if Petrovova then
2255: LD_EXP 30
2259: IFFALSE 2277
// tmp := tmp ^ Petrovova ;
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_VAR 0 2
2270: PUSH
2271: LD_EXP 30
2275: ADD
2276: ST_TO_ADDR
// Titov := PrepareUnit ( Titov , ( not debug ) , 13a_ ) ;
2277: LD_ADDR_EXP 23
2281: PUSH
2282: LD_STRING Titov
2284: PPUSH
2285: LD_EXP 1
2289: NOT
2290: PPUSH
2291: LD_STRING 13a_
2293: PPUSH
2294: CALL 24204 0 3
2298: ST_TO_ADDR
// if Titov then
2299: LD_EXP 23
2303: IFFALSE 2321
// tmp := tmp ^ Titov ;
2305: LD_ADDR_VAR 0 2
2309: PUSH
2310: LD_VAR 0 2
2314: PUSH
2315: LD_EXP 23
2319: ADD
2320: ST_TO_ADDR
// Karamazov := PrepareUnit ( Karamazov , ( not debug ) , 13a_ ) ;
2321: LD_ADDR_EXP 33
2325: PUSH
2326: LD_STRING Karamazov
2328: PPUSH
2329: LD_EXP 1
2333: NOT
2334: PPUSH
2335: LD_STRING 13a_
2337: PPUSH
2338: CALL 24204 0 3
2342: ST_TO_ADDR
// if Karamazov then
2343: LD_EXP 33
2347: IFFALSE 2365
// tmp := tmp ^ Karamazov ;
2349: LD_ADDR_VAR 0 2
2353: PUSH
2354: LD_VAR 0 2
2358: PUSH
2359: LD_EXP 33
2363: ADD
2364: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 13a_ ) ;
2365: LD_ADDR_EXP 16
2369: PUSH
2370: LD_STRING Frank
2372: PPUSH
2373: LD_EXP 1
2377: NOT
2378: PPUSH
2379: LD_STRING 13a_
2381: PPUSH
2382: CALL 24204 0 3
2386: ST_TO_ADDR
// if Frank then
2387: LD_EXP 16
2391: IFFALSE 2409
// tmp := tmp ^ Frank ;
2393: LD_ADDR_VAR 0 2
2397: PUSH
2398: LD_VAR 0 2
2402: PUSH
2403: LD_EXP 16
2407: ADD
2408: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 13a_ ) ;
2409: LD_ADDR_EXP 7
2413: PUSH
2414: LD_STRING Donaldson
2416: PPUSH
2417: LD_EXP 1
2421: NOT
2422: PPUSH
2423: LD_STRING 13a_
2425: PPUSH
2426: CALL 24204 0 3
2430: ST_TO_ADDR
// if Donaldson then
2431: LD_EXP 7
2435: IFFALSE 2453
// tmp := tmp ^ Donaldson ;
2437: LD_ADDR_VAR 0 2
2441: PUSH
2442: LD_VAR 0 2
2446: PUSH
2447: LD_EXP 7
2451: ADD
2452: ST_TO_ADDR
// for i in tmp do
2453: LD_ADDR_VAR 0 3
2457: PUSH
2458: LD_VAR 0 2
2462: PUSH
2463: FOR_IN
2464: IFFALSE 2504
// begin PlaceUnitXYR ( i , 117 , 8 , 6 , false ) ;
2466: LD_VAR 0 3
2470: PPUSH
2471: LD_INT 117
2473: PPUSH
2474: LD_INT 8
2476: PPUSH
2477: LD_INT 6
2479: PPUSH
2480: LD_INT 0
2482: PPUSH
2483: CALL_OW 50
// ComTurnXY ( i , 117 , 8 ) ;
2487: LD_VAR 0 3
2491: PPUSH
2492: LD_INT 117
2494: PPUSH
2495: LD_INT 8
2497: PPUSH
2498: CALL_OW 118
// end ;
2502: GO 2463
2504: POP
2505: POP
// squad2 := tmp ;
2506: LD_ADDR_EXP 38
2510: PUSH
2511: LD_VAR 0 2
2515: ST_TO_ADDR
// uc_side := 0 ;
2516: LD_ADDR_OWVAR 20
2520: PUSH
2521: LD_INT 0
2523: ST_TO_ADDR
// uc_nation := 0 ;
2524: LD_ADDR_OWVAR 21
2528: PUSH
2529: LD_INT 0
2531: ST_TO_ADDR
// InitHc ;
2532: CALL_OW 19
// hc_importance := 0 ;
2536: LD_ADDR_OWVAR 32
2540: PUSH
2541: LD_INT 0
2543: ST_TO_ADDR
// hc_name := Find some goods! ;
2544: LD_ADDR_OWVAR 26
2548: PUSH
2549: LD_STRING Find some goods!
2551: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2552: LD_INT 0
2554: PPUSH
2555: LD_INT 12
2557: PPUSH
2558: LD_INT 1
2560: PPUSH
2561: CALL_OW 380
// PlaceUnitXY ( CreateHuman , 96 , 108 , false ) ;
2565: CALL_OW 44
2569: PPUSH
2570: LD_INT 96
2572: PPUSH
2573: LD_INT 108
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 48
// InitHc ;
2583: CALL_OW 19
// end ;
2587: LD_VAR 0 1
2591: RET
// every 3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) do var Louis , veh ;
2592: LD_INT 22
2594: PUSH
2595: LD_INT 7
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: LD_INT 23
2604: PUSH
2605: LD_INT 0
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: PPUSH
2616: CALL_OW 69
2620: IFFALSE 3085
2622: GO 2624
2624: DISABLE
2625: LD_INT 0
2627: PPUSH
2628: PPUSH
// begin InGameOn ;
2629: CALL_OW 8
// RemoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) [ 1 ] ) ;
2633: LD_INT 22
2635: PUSH
2636: LD_INT 7
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PUSH
2643: LD_INT 23
2645: PUSH
2646: LD_INT 0
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: PPUSH
2657: CALL_OW 69
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PPUSH
2666: CALL_OW 64
// game_speed := 4 ;
2670: LD_ADDR_OWVAR 65
2674: PUSH
2675: LD_INT 4
2677: ST_TO_ADDR
// ComMoveXY ( JMM , 93 , 100 ) ;
2678: LD_EXP 2
2682: PPUSH
2683: LD_INT 93
2685: PPUSH
2686: LD_INT 100
2688: PPUSH
2689: CALL_OW 111
// ComMoveXY ( Burlak , 93 , 99 ) ;
2693: LD_EXP 3
2697: PPUSH
2698: LD_INT 93
2700: PPUSH
2701: LD_INT 99
2703: PPUSH
2704: CALL_OW 111
// AddComTurnXY ( [ JMM , Burlak ] , 81 , 112 ) ;
2708: LD_EXP 2
2712: PUSH
2713: LD_EXP 3
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PPUSH
2722: LD_INT 81
2724: PPUSH
2725: LD_INT 112
2727: PPUSH
2728: CALL_OW 178
// wait ( 0 0$5 ) ;
2732: LD_INT 175
2734: PPUSH
2735: CALL_OW 67
// music_nat := 2 ;
2739: LD_ADDR_OWVAR 71
2743: PUSH
2744: LD_INT 2
2746: ST_TO_ADDR
// music_class := 4 ;
2747: LD_ADDR_OWVAR 72
2751: PUSH
2752: LD_INT 4
2754: ST_TO_ADDR
// CenterNowOnXY ( 80 , 130 ) ;
2755: LD_INT 80
2757: PPUSH
2758: LD_INT 130
2760: PPUSH
2761: CALL_OW 86
// uc_nation := 2 ;
2765: LD_ADDR_OWVAR 21
2769: PUSH
2770: LD_INT 2
2772: ST_TO_ADDR
// uc_side := 2 ;
2773: LD_ADDR_OWVAR 20
2777: PUSH
2778: LD_INT 2
2780: ST_TO_ADDR
// hc_gallery = sandar ;
2781: LD_ADDR_OWVAR 33
2785: PUSH
2786: LD_STRING sandar
2788: ST_TO_ADDR
// hc_face_number = 1 ;
2789: LD_ADDR_OWVAR 34
2793: PUSH
2794: LD_INT 1
2796: ST_TO_ADDR
// hc_name = Louis Schulz ;
2797: LD_ADDR_OWVAR 26
2801: PUSH
2802: LD_STRING Louis Schulz
2804: ST_TO_ADDR
// hc_attr = [ 13 , 11 ] ;
2805: LD_ADDR_OWVAR 29
2809: PUSH
2810: LD_INT 13
2812: PUSH
2813: LD_INT 11
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: ST_TO_ADDR
// hc_basic_skills = [ 0 , 0 , 0 , 0 ] ;
2820: LD_ADDR_OWVAR 30
2824: PUSH
2825: LD_INT 0
2827: PUSH
2828: LD_INT 0
2830: PUSH
2831: LD_INT 0
2833: PUSH
2834: LD_INT 0
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 7 , 7 ] ;
2843: LD_ADDR_OWVAR 31
2847: PUSH
2848: LD_INT 10
2850: PUSH
2851: LD_INT 6
2853: PUSH
2854: LD_INT 7
2856: PUSH
2857: LD_INT 7
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: ST_TO_ADDR
// hc_sex = sex_male ;
2866: LD_ADDR_OWVAR 27
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// hc_class = 1 ;
2874: LD_ADDR_OWVAR 28
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// hc_importance = 100 ;
2882: LD_ADDR_OWVAR 32
2886: PUSH
2887: LD_INT 100
2889: ST_TO_ADDR
// Louis = CreateHuman ;
2890: LD_ADDR_VAR 0 1
2894: PUSH
2895: CALL_OW 44
2899: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_flame_thrower , 100 ) ;
2900: LD_INT 14
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: LD_INT 26
2911: PPUSH
2912: LD_INT 100
2914: PPUSH
2915: CALL 29219 0 5
// veh := CreateVehicle ;
2919: LD_ADDR_VAR 0 2
2923: PUSH
2924: CALL_OW 45
2928: ST_TO_ADDR
// SetMark ( veh , - 2 ) ;
2929: LD_VAR 0 2
2933: PPUSH
2934: LD_INT 2
2936: NEG
2937: PPUSH
2938: CALL_OW 242
// PlaceUnitXY ( veh , 80 , 130 , false ) ;
2942: LD_VAR 0 2
2946: PPUSH
2947: LD_INT 80
2949: PPUSH
2950: LD_INT 130
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL_OW 48
// PlaceHumanInUnit ( Louis , veh ) ;
2960: LD_VAR 0 1
2964: PPUSH
2965: LD_VAR 0 2
2969: PPUSH
2970: CALL_OW 52
// ComMoveXY ( Louis , 80 , 109 ) ;
2974: LD_VAR 0 1
2978: PPUSH
2979: LD_INT 80
2981: PPUSH
2982: LD_INT 109
2984: PPUSH
2985: CALL_OW 111
// AddComExitVehicle ( Louis ) ;
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 181
// AddComMoveXY ( Louis , 80 , 131 ) ;
2998: LD_VAR 0 1
3002: PPUSH
3003: LD_INT 80
3005: PPUSH
3006: LD_INT 131
3008: PPUSH
3009: CALL_OW 171
// wait ( 0 0$06 ) ;
3013: LD_INT 210
3015: PPUSH
3016: CALL_OW 67
// InGameOff ;
3020: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
3024: LD_INT 35
3026: PPUSH
3027: CALL_OW 67
// until IsAt ( Louis , 80 , 131 ) ;
3031: LD_VAR 0 1
3035: PPUSH
3036: LD_INT 80
3038: PPUSH
3039: LD_INT 131
3041: PPUSH
3042: CALL_OW 307
3046: IFFALSE 3024
// SetSide ( veh , 7 ) ;
3048: LD_VAR 0 2
3052: PPUSH
3053: LD_INT 7
3055: PPUSH
3056: CALL_OW 235
// RemoveUnit ( Louis ) ;
3060: LD_VAR 0 1
3064: PPUSH
3065: CALL_OW 64
// music_nat := 3 ;
3069: LD_ADDR_OWVAR 71
3073: PUSH
3074: LD_INT 3
3076: ST_TO_ADDR
// music_class := 0 ;
3077: LD_ADDR_OWVAR 72
3081: PUSH
3082: LD_INT 0
3084: ST_TO_ADDR
// end ;
3085: PPOPN 2
3087: END
// every 0 0$10 trigger squad1 do var i , xy ;
3088: LD_EXP 37
3092: IFFALSE 3455
3094: GO 3096
3096: DISABLE
3097: LD_INT 0
3099: PPUSH
3100: PPUSH
// begin enable ;
3101: ENABLE
// i := squad1 [ rand ( 1 , squad1 ) ] ;
3102: LD_ADDR_VAR 0 1
3106: PUSH
3107: LD_EXP 37
3111: PUSH
3112: LD_INT 1
3114: PPUSH
3115: LD_EXP 37
3119: PPUSH
3120: CALL_OW 12
3124: ARRAY
3125: ST_TO_ADDR
// if IsInUnit ( i ) then
3126: LD_VAR 0 1
3130: PPUSH
3131: CALL_OW 310
3135: IFFALSE 3139
// exit ;
3137: GO 3455
// ComRemember ( i ) ;
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL_OW 143
// xy := [ ShiftX ( GetX ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) , ShiftY ( GetY ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) ] ;
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: LD_VAR 0 1
3157: PPUSH
3158: CALL_OW 250
3162: PPUSH
3163: LD_INT 0
3165: PPUSH
3166: LD_INT 5
3168: PPUSH
3169: CALL_OW 12
3173: PPUSH
3174: LD_INT 2
3176: PPUSH
3177: LD_INT 7
3179: PPUSH
3180: CALL_OW 12
3184: PPUSH
3185: CALL_OW 272
3189: PUSH
3190: LD_VAR 0 1
3194: PPUSH
3195: CALL_OW 251
3199: PPUSH
3200: LD_INT 0
3202: PPUSH
3203: LD_INT 5
3205: PPUSH
3206: CALL_OW 12
3210: PPUSH
3211: LD_INT 2
3213: PPUSH
3214: LD_INT 7
3216: PPUSH
3217: CALL_OW 12
3221: PPUSH
3222: CALL_OW 273
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) <> 0 or not ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
3231: LD_VAR 0 2
3235: PUSH
3236: LD_INT 1
3238: ARRAY
3239: PPUSH
3240: LD_VAR 0 2
3244: PUSH
3245: LD_INT 2
3247: ARRAY
3248: PPUSH
3249: CALL_OW 428
3253: PUSH
3254: LD_INT 0
3256: NONEQUAL
3257: PUSH
3258: LD_VAR 0 2
3262: PUSH
3263: LD_INT 1
3265: ARRAY
3266: PPUSH
3267: LD_VAR 0 2
3271: PUSH
3272: LD_INT 2
3274: ARRAY
3275: PPUSH
3276: CALL_OW 488
3280: NOT
3281: OR
3282: IFFALSE 3286
// exit ;
3284: GO 3455
// AddComMoveXY ( i , xy [ 1 ] , xy [ 2 ] ) ;
3286: LD_VAR 0 1
3290: PPUSH
3291: LD_VAR 0 2
3295: PUSH
3296: LD_INT 1
3298: ARRAY
3299: PPUSH
3300: LD_VAR 0 2
3304: PUSH
3305: LD_INT 2
3307: ARRAY
3308: PPUSH
3309: CALL_OW 171
// AddComWait ( i , 0 0$10 ) ;
3313: LD_VAR 0 1
3317: PPUSH
3318: LD_INT 350
3320: PPUSH
3321: CALL_OW 202
// if Prob ( 60 ) and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) then
3325: LD_INT 60
3327: PPUSH
3328: CALL_OW 13
3332: PUSH
3333: LD_INT 22
3335: PUSH
3336: LD_INT 4
3338: PUSH
3339: EMPTY
3340: LIST
3341: LIST
3342: PUSH
3343: LD_INT 21
3345: PUSH
3346: LD_INT 3
3348: PUSH
3349: EMPTY
3350: LIST
3351: LIST
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PPUSH
3357: CALL_OW 69
3361: AND
3362: IFFALSE 3446
// begin AddComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , i ) ) ;
3364: LD_VAR 0 1
3368: PPUSH
3369: LD_INT 22
3371: PUSH
3372: LD_INT 4
3374: PUSH
3375: EMPTY
3376: LIST
3377: LIST
3378: PUSH
3379: LD_INT 21
3381: PUSH
3382: LD_INT 3
3384: PUSH
3385: EMPTY
3386: LIST
3387: LIST
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PPUSH
3393: CALL_OW 69
3397: PPUSH
3398: LD_VAR 0 1
3402: PPUSH
3403: CALL_OW 74
3407: PPUSH
3408: CALL_OW 180
// repeat wait ( 0 0$30 ) ;
3412: LD_INT 1050
3414: PPUSH
3415: CALL_OW 67
// until IsInUnit ( i ) ;
3419: LD_VAR 0 1
3423: PPUSH
3424: CALL_OW 310
3428: IFFALSE 3412
// wait ( 0 0$30 ) ;
3430: LD_INT 1050
3432: PPUSH
3433: CALL_OW 67
// AddComExitBuilding ( i ) ;
3437: LD_VAR 0 1
3441: PPUSH
3442: CALL_OW 182
// end ; AddComReturn ( i ) ;
3446: LD_VAR 0 1
3450: PPUSH
3451: CALL_OW 204
// end ; end_of_file
3455: PPOPN 2
3457: END
// export function Action ; begin
3458: LD_INT 0
3460: PPUSH
// InGameOn ;
3461: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
3465: LD_EXP 2
3469: PPUSH
3470: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
3474: LD_EXP 2
3478: PPUSH
3479: LD_STRING D1-JMM-1
3481: PPUSH
3482: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
3486: LD_EXP 3
3490: PPUSH
3491: LD_STRING D1-Bur-1
3493: PPUSH
3494: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3498: LD_EXP 2
3502: PPUSH
3503: LD_STRING D1-JMM-2
3505: PPUSH
3506: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
3510: LD_EXP 3
3514: PPUSH
3515: LD_STRING D1-Bur-2
3517: PPUSH
3518: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3522: LD_EXP 2
3526: PPUSH
3527: LD_STRING D1-JMM-3
3529: PPUSH
3530: CALL_OW 88
// Say ( Burlak , D1-Bur-3 ) ;
3534: LD_EXP 3
3538: PPUSH
3539: LD_STRING D1-Bur-3
3541: PPUSH
3542: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3546: LD_EXP 2
3550: PPUSH
3551: LD_STRING D1-JMM-4
3553: PPUSH
3554: CALL_OW 88
// Say ( Burlak , D1-Bur-4 ) ;
3558: LD_EXP 3
3562: PPUSH
3563: LD_STRING D1-Bur-4
3565: PPUSH
3566: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3570: LD_EXP 2
3574: PPUSH
3575: LD_STRING D1-JMM-5
3577: PPUSH
3578: CALL_OW 88
// Say ( Burlak , D1-Bur-5 ) ;
3582: LD_EXP 3
3586: PPUSH
3587: LD_STRING D1-Bur-5
3589: PPUSH
3590: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3594: LD_EXP 2
3598: PPUSH
3599: LD_STRING D1-JMM-6
3601: PPUSH
3602: CALL_OW 88
// Say ( Burlak , D1-Bur-6 ) ;
3606: LD_EXP 3
3610: PPUSH
3611: LD_STRING D1-Bur-6
3613: PPUSH
3614: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
3618: LD_EXP 2
3622: PPUSH
3623: LD_STRING D1-JMM-7
3625: PPUSH
3626: CALL_OW 88
// wait ( 20 ) ;
3630: LD_INT 20
3632: PPUSH
3633: CALL_OW 67
// Query ( QTruck ) ;
3637: LD_STRING QTruck
3639: PPUSH
3640: CALL_OW 97
// InGameOff ;
3644: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
3648: LD_STRING MArtPickup
3650: PPUSH
3651: CALL_OW 337
// SetAreaMapShow ( escape_area , 1 ) ;
3655: LD_INT 2
3657: PPUSH
3658: LD_INT 1
3660: PPUSH
3661: CALL_OW 424
// end ;
3665: LD_VAR 0 1
3669: RET
// every 0 0$3 trigger FilterUnitsInArea ( escape_area , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) = 2 and IsInUnit ( JMM ) and IsInUnit ( Burlak ) and ( GetWeapon ( IsInUnit ( JMM ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] or GetWeapon ( IsInUnit ( Burlak ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] ) do var i , macmilanVeh , burlakVeh ;
3670: LD_INT 2
3672: PPUSH
3673: LD_INT 21
3675: PUSH
3676: LD_INT 2
3678: PUSH
3679: EMPTY
3680: LIST
3681: LIST
3682: PUSH
3683: LD_INT 33
3685: PUSH
3686: LD_INT 1
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: PUSH
3693: LD_INT 3
3695: PUSH
3696: LD_INT 58
3698: PUSH
3699: EMPTY
3700: LIST
3701: PUSH
3702: EMPTY
3703: LIST
3704: LIST
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: LIST
3710: PPUSH
3711: CALL_OW 70
3715: PUSH
3716: LD_INT 2
3718: EQUAL
3719: PUSH
3720: LD_EXP 2
3724: PPUSH
3725: CALL_OW 310
3729: AND
3730: PUSH
3731: LD_EXP 3
3735: PPUSH
3736: CALL_OW 310
3740: AND
3741: PUSH
3742: LD_EXP 2
3746: PPUSH
3747: CALL_OW 310
3751: PPUSH
3752: CALL_OW 264
3756: PUSH
3757: LD_INT 51
3759: PUSH
3760: LD_INT 12
3762: PUSH
3763: LD_INT 89
3765: PUSH
3766: LD_INT 32
3768: PUSH
3769: EMPTY
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: IN
3775: PUSH
3776: LD_EXP 3
3780: PPUSH
3781: CALL_OW 310
3785: PPUSH
3786: CALL_OW 264
3790: PUSH
3791: LD_INT 51
3793: PUSH
3794: LD_INT 12
3796: PUSH
3797: LD_INT 89
3799: PUSH
3800: LD_INT 32
3802: PUSH
3803: EMPTY
3804: LIST
3805: LIST
3806: LIST
3807: LIST
3808: IN
3809: OR
3810: AND
3811: IFFALSE 4021
3813: GO 3815
3815: DISABLE
3816: LD_INT 0
3818: PPUSH
3819: PPUSH
3820: PPUSH
// begin macmilanVeh := IsInUnit ( JMM ) ;
3821: LD_ADDR_VAR 0 2
3825: PUSH
3826: LD_EXP 2
3830: PPUSH
3831: CALL_OW 310
3835: ST_TO_ADDR
// burlakVeh := IsInUnit ( Burlak ) ;
3836: LD_ADDR_VAR 0 3
3840: PUSH
3841: LD_EXP 3
3845: PPUSH
3846: CALL_OW 310
3850: ST_TO_ADDR
// SaveVariable ( [ GetChassis ( macmilanVeh ) , GetEngine ( macmilanVeh ) , control_manual , GetWeapon ( macmilanVeh ) , GetMark ( macmilanVeh ) , GetNation ( macmilanVeh ) ] , 14a_JMMVeh ) ;
3851: LD_VAR 0 2
3855: PPUSH
3856: CALL_OW 265
3860: PUSH
3861: LD_VAR 0 2
3865: PPUSH
3866: CALL_OW 262
3870: PUSH
3871: LD_INT 1
3873: PUSH
3874: LD_VAR 0 2
3878: PPUSH
3879: CALL_OW 264
3883: PUSH
3884: LD_VAR 0 2
3888: PPUSH
3889: CALL_OW 271
3893: PUSH
3894: LD_VAR 0 2
3898: PPUSH
3899: CALL_OW 248
3903: PUSH
3904: EMPTY
3905: LIST
3906: LIST
3907: LIST
3908: LIST
3909: LIST
3910: LIST
3911: PPUSH
3912: LD_STRING 14a_JMMVeh
3914: PPUSH
3915: CALL_OW 39
// SaveVariable ( [ GetChassis ( burlakVeh ) , GetEngine ( burlakVeh ) , control_manual , GetWeapon ( burlakVeh ) , GetMark ( burlakVeh ) , GetNation ( burlakVeh ) ] , 14a_BurlakVeh ) ;
3919: LD_VAR 0 3
3923: PPUSH
3924: CALL_OW 265
3928: PUSH
3929: LD_VAR 0 3
3933: PPUSH
3934: CALL_OW 262
3938: PUSH
3939: LD_INT 1
3941: PUSH
3942: LD_VAR 0 3
3946: PPUSH
3947: CALL_OW 264
3951: PUSH
3952: LD_VAR 0 3
3956: PPUSH
3957: CALL_OW 271
3961: PUSH
3962: LD_VAR 0 3
3966: PPUSH
3967: CALL_OW 248
3971: PUSH
3972: EMPTY
3973: LIST
3974: LIST
3975: LIST
3976: LIST
3977: LIST
3978: LIST
3979: PPUSH
3980: LD_STRING 14a_BurlakVeh
3982: PPUSH
3983: CALL_OW 39
// SaveCharacters ( JMM , 14a_JMM ) ;
3987: LD_EXP 2
3991: PPUSH
3992: LD_STRING 14a_JMM
3994: PPUSH
3995: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
3999: LD_EXP 3
4003: PPUSH
4004: LD_STRING 14a_Burlak
4006: PPUSH
4007: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
4011: LD_INT 1
4013: PPUSH
4014: LD_STRING %_cont
4016: PPUSH
4017: CALL_OW 340
// end ;
4021: PPOPN 3
4023: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 950 ] ] ] ) do
4024: LD_INT 22
4026: PUSH
4027: LD_INT 4
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: PUSH
4034: LD_INT 3
4036: PUSH
4037: LD_INT 24
4039: PUSH
4040: LD_INT 950
4042: PUSH
4043: EMPTY
4044: LIST
4045: LIST
4046: PUSH
4047: EMPTY
4048: LIST
4049: LIST
4050: PUSH
4051: EMPTY
4052: LIST
4053: LIST
4054: PPUSH
4055: CALL_OW 69
4059: IFFALSE 4071
4061: GO 4063
4063: DISABLE
// YouLost ( FriendlyFire ) ;
4064: LD_STRING FriendlyFire
4066: PPUSH
4067: CALL_OW 104
4071: END
// every 0 0$1 trigger IsDead ( Burlak ) do
4072: LD_EXP 3
4076: PPUSH
4077: CALL_OW 301
4081: IFFALSE 4093
4083: GO 4085
4085: DISABLE
// YouLost ( Burlak ) ;
4086: LD_STRING Burlak
4088: PPUSH
4089: CALL_OW 104
4093: END
// every 0 0$1 trigger IsDead ( JMM ) do
4094: LD_EXP 2
4098: PPUSH
4099: CALL_OW 301
4103: IFFALSE 4115
4105: GO 4107
4107: DISABLE
// YouLost ( JMM ) ; end_of_file end_of_file
4108: LD_STRING JMM
4110: PPUSH
4111: CALL_OW 104
4115: END
// every 0 0$1 do
4116: GO 4118
4118: DISABLE
// begin enable ;
4119: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4120: LD_STRING updateTimer(
4122: PUSH
4123: LD_OWVAR 1
4127: STR
4128: PUSH
4129: LD_STRING );
4131: STR
4132: PPUSH
4133: CALL_OW 559
// end ;
4137: END
// export function SOS_MapStart ( ) ; begin
4138: LD_INT 0
4140: PPUSH
// if streamModeActive then
4141: LD_EXP 40
4145: IFFALSE 4154
// DefineStreamItems ( true ) ;
4147: LD_INT 1
4149: PPUSH
4150: CALL 5958 0 1
// UpdateLuaVariables ( ) ;
4154: CALL 4171 0 0
// UpdateFactoryWaypoints ( ) ;
4158: CALL 18819 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4162: CALL 19076 0 0
// end ;
4166: LD_VAR 0 1
4170: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
4171: LD_INT 0
4173: PPUSH
// if not globalGameSaveCounter then
4174: LD_EXP 39
4178: NOT
4179: IFFALSE 4190
// ToLua ( setGameSaveCounter(0) ) else
4181: LD_STRING setGameSaveCounter(0)
4183: PPUSH
4184: CALL_OW 559
4188: GO 4222
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4190: LD_ADDR_EXP 39
4194: PUSH
4195: LD_EXP 39
4199: PPUSH
4200: CALL 63033 0 1
4204: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4205: LD_STRING setGameSaveCounter(
4207: PUSH
4208: LD_EXP 39
4212: STR
4213: PUSH
4214: LD_STRING )
4216: STR
4217: PPUSH
4218: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4222: LD_STRING setGameDifficulty(
4224: PUSH
4225: LD_OWVAR 67
4229: STR
4230: PUSH
4231: LD_STRING )
4233: STR
4234: PPUSH
4235: CALL_OW 559
// end ;
4239: LD_VAR 0 1
4243: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4244: LD_INT 0
4246: PPUSH
// if p2 = stream_mode then
4247: LD_VAR 0 2
4251: PUSH
4252: LD_INT 100
4254: EQUAL
4255: IFFALSE 5258
// begin if not StreamModeActive then
4257: LD_EXP 40
4261: NOT
4262: IFFALSE 4272
// StreamModeActive := true ;
4264: LD_ADDR_EXP 40
4268: PUSH
4269: LD_INT 1
4271: ST_TO_ADDR
// if p3 = 0 then
4272: LD_VAR 0 3
4276: PUSH
4277: LD_INT 0
4279: EQUAL
4280: IFFALSE 4286
// InitStreamMode ;
4282: CALL 5494 0 0
// if p3 = 1 then
4286: LD_VAR 0 3
4290: PUSH
4291: LD_INT 1
4293: EQUAL
4294: IFFALSE 4304
// sRocket := true ;
4296: LD_ADDR_EXP 45
4300: PUSH
4301: LD_INT 1
4303: ST_TO_ADDR
// if p3 = 2 then
4304: LD_VAR 0 3
4308: PUSH
4309: LD_INT 2
4311: EQUAL
4312: IFFALSE 4322
// sSpeed := true ;
4314: LD_ADDR_EXP 44
4318: PUSH
4319: LD_INT 1
4321: ST_TO_ADDR
// if p3 = 3 then
4322: LD_VAR 0 3
4326: PUSH
4327: LD_INT 3
4329: EQUAL
4330: IFFALSE 4340
// sEngine := true ;
4332: LD_ADDR_EXP 46
4336: PUSH
4337: LD_INT 1
4339: ST_TO_ADDR
// if p3 = 4 then
4340: LD_VAR 0 3
4344: PUSH
4345: LD_INT 4
4347: EQUAL
4348: IFFALSE 4358
// sSpec := true ;
4350: LD_ADDR_EXP 43
4354: PUSH
4355: LD_INT 1
4357: ST_TO_ADDR
// if p3 = 5 then
4358: LD_VAR 0 3
4362: PUSH
4363: LD_INT 5
4365: EQUAL
4366: IFFALSE 4376
// sLevel := true ;
4368: LD_ADDR_EXP 47
4372: PUSH
4373: LD_INT 1
4375: ST_TO_ADDR
// if p3 = 6 then
4376: LD_VAR 0 3
4380: PUSH
4381: LD_INT 6
4383: EQUAL
4384: IFFALSE 4394
// sArmoury := true ;
4386: LD_ADDR_EXP 48
4390: PUSH
4391: LD_INT 1
4393: ST_TO_ADDR
// if p3 = 7 then
4394: LD_VAR 0 3
4398: PUSH
4399: LD_INT 7
4401: EQUAL
4402: IFFALSE 4412
// sRadar := true ;
4404: LD_ADDR_EXP 49
4408: PUSH
4409: LD_INT 1
4411: ST_TO_ADDR
// if p3 = 8 then
4412: LD_VAR 0 3
4416: PUSH
4417: LD_INT 8
4419: EQUAL
4420: IFFALSE 4430
// sBunker := true ;
4422: LD_ADDR_EXP 50
4426: PUSH
4427: LD_INT 1
4429: ST_TO_ADDR
// if p3 = 9 then
4430: LD_VAR 0 3
4434: PUSH
4435: LD_INT 9
4437: EQUAL
4438: IFFALSE 4448
// sHack := true ;
4440: LD_ADDR_EXP 51
4444: PUSH
4445: LD_INT 1
4447: ST_TO_ADDR
// if p3 = 10 then
4448: LD_VAR 0 3
4452: PUSH
4453: LD_INT 10
4455: EQUAL
4456: IFFALSE 4466
// sFire := true ;
4458: LD_ADDR_EXP 52
4462: PUSH
4463: LD_INT 1
4465: ST_TO_ADDR
// if p3 = 11 then
4466: LD_VAR 0 3
4470: PUSH
4471: LD_INT 11
4473: EQUAL
4474: IFFALSE 4484
// sRefresh := true ;
4476: LD_ADDR_EXP 53
4480: PUSH
4481: LD_INT 1
4483: ST_TO_ADDR
// if p3 = 12 then
4484: LD_VAR 0 3
4488: PUSH
4489: LD_INT 12
4491: EQUAL
4492: IFFALSE 4502
// sExp := true ;
4494: LD_ADDR_EXP 54
4498: PUSH
4499: LD_INT 1
4501: ST_TO_ADDR
// if p3 = 13 then
4502: LD_VAR 0 3
4506: PUSH
4507: LD_INT 13
4509: EQUAL
4510: IFFALSE 4520
// sDepot := true ;
4512: LD_ADDR_EXP 55
4516: PUSH
4517: LD_INT 1
4519: ST_TO_ADDR
// if p3 = 14 then
4520: LD_VAR 0 3
4524: PUSH
4525: LD_INT 14
4527: EQUAL
4528: IFFALSE 4538
// sFlag := true ;
4530: LD_ADDR_EXP 56
4534: PUSH
4535: LD_INT 1
4537: ST_TO_ADDR
// if p3 = 15 then
4538: LD_VAR 0 3
4542: PUSH
4543: LD_INT 15
4545: EQUAL
4546: IFFALSE 4556
// sKamikadze := true ;
4548: LD_ADDR_EXP 64
4552: PUSH
4553: LD_INT 1
4555: ST_TO_ADDR
// if p3 = 16 then
4556: LD_VAR 0 3
4560: PUSH
4561: LD_INT 16
4563: EQUAL
4564: IFFALSE 4574
// sTroll := true ;
4566: LD_ADDR_EXP 65
4570: PUSH
4571: LD_INT 1
4573: ST_TO_ADDR
// if p3 = 17 then
4574: LD_VAR 0 3
4578: PUSH
4579: LD_INT 17
4581: EQUAL
4582: IFFALSE 4592
// sSlow := true ;
4584: LD_ADDR_EXP 66
4588: PUSH
4589: LD_INT 1
4591: ST_TO_ADDR
// if p3 = 18 then
4592: LD_VAR 0 3
4596: PUSH
4597: LD_INT 18
4599: EQUAL
4600: IFFALSE 4610
// sLack := true ;
4602: LD_ADDR_EXP 67
4606: PUSH
4607: LD_INT 1
4609: ST_TO_ADDR
// if p3 = 19 then
4610: LD_VAR 0 3
4614: PUSH
4615: LD_INT 19
4617: EQUAL
4618: IFFALSE 4628
// sTank := true ;
4620: LD_ADDR_EXP 69
4624: PUSH
4625: LD_INT 1
4627: ST_TO_ADDR
// if p3 = 20 then
4628: LD_VAR 0 3
4632: PUSH
4633: LD_INT 20
4635: EQUAL
4636: IFFALSE 4646
// sRemote := true ;
4638: LD_ADDR_EXP 70
4642: PUSH
4643: LD_INT 1
4645: ST_TO_ADDR
// if p3 = 21 then
4646: LD_VAR 0 3
4650: PUSH
4651: LD_INT 21
4653: EQUAL
4654: IFFALSE 4664
// sPowell := true ;
4656: LD_ADDR_EXP 71
4660: PUSH
4661: LD_INT 1
4663: ST_TO_ADDR
// if p3 = 22 then
4664: LD_VAR 0 3
4668: PUSH
4669: LD_INT 22
4671: EQUAL
4672: IFFALSE 4682
// sTeleport := true ;
4674: LD_ADDR_EXP 74
4678: PUSH
4679: LD_INT 1
4681: ST_TO_ADDR
// if p3 = 23 then
4682: LD_VAR 0 3
4686: PUSH
4687: LD_INT 23
4689: EQUAL
4690: IFFALSE 4700
// sOilTower := true ;
4692: LD_ADDR_EXP 76
4696: PUSH
4697: LD_INT 1
4699: ST_TO_ADDR
// if p3 = 24 then
4700: LD_VAR 0 3
4704: PUSH
4705: LD_INT 24
4707: EQUAL
4708: IFFALSE 4718
// sShovel := true ;
4710: LD_ADDR_EXP 77
4714: PUSH
4715: LD_INT 1
4717: ST_TO_ADDR
// if p3 = 25 then
4718: LD_VAR 0 3
4722: PUSH
4723: LD_INT 25
4725: EQUAL
4726: IFFALSE 4736
// sSheik := true ;
4728: LD_ADDR_EXP 78
4732: PUSH
4733: LD_INT 1
4735: ST_TO_ADDR
// if p3 = 26 then
4736: LD_VAR 0 3
4740: PUSH
4741: LD_INT 26
4743: EQUAL
4744: IFFALSE 4754
// sEarthquake := true ;
4746: LD_ADDR_EXP 80
4750: PUSH
4751: LD_INT 1
4753: ST_TO_ADDR
// if p3 = 27 then
4754: LD_VAR 0 3
4758: PUSH
4759: LD_INT 27
4761: EQUAL
4762: IFFALSE 4772
// sAI := true ;
4764: LD_ADDR_EXP 81
4768: PUSH
4769: LD_INT 1
4771: ST_TO_ADDR
// if p3 = 28 then
4772: LD_VAR 0 3
4776: PUSH
4777: LD_INT 28
4779: EQUAL
4780: IFFALSE 4790
// sCargo := true ;
4782: LD_ADDR_EXP 84
4786: PUSH
4787: LD_INT 1
4789: ST_TO_ADDR
// if p3 = 29 then
4790: LD_VAR 0 3
4794: PUSH
4795: LD_INT 29
4797: EQUAL
4798: IFFALSE 4808
// sDLaser := true ;
4800: LD_ADDR_EXP 85
4804: PUSH
4805: LD_INT 1
4807: ST_TO_ADDR
// if p3 = 30 then
4808: LD_VAR 0 3
4812: PUSH
4813: LD_INT 30
4815: EQUAL
4816: IFFALSE 4826
// sExchange := true ;
4818: LD_ADDR_EXP 86
4822: PUSH
4823: LD_INT 1
4825: ST_TO_ADDR
// if p3 = 31 then
4826: LD_VAR 0 3
4830: PUSH
4831: LD_INT 31
4833: EQUAL
4834: IFFALSE 4844
// sFac := true ;
4836: LD_ADDR_EXP 87
4840: PUSH
4841: LD_INT 1
4843: ST_TO_ADDR
// if p3 = 32 then
4844: LD_VAR 0 3
4848: PUSH
4849: LD_INT 32
4851: EQUAL
4852: IFFALSE 4862
// sPower := true ;
4854: LD_ADDR_EXP 88
4858: PUSH
4859: LD_INT 1
4861: ST_TO_ADDR
// if p3 = 33 then
4862: LD_VAR 0 3
4866: PUSH
4867: LD_INT 33
4869: EQUAL
4870: IFFALSE 4880
// sRandom := true ;
4872: LD_ADDR_EXP 89
4876: PUSH
4877: LD_INT 1
4879: ST_TO_ADDR
// if p3 = 34 then
4880: LD_VAR 0 3
4884: PUSH
4885: LD_INT 34
4887: EQUAL
4888: IFFALSE 4898
// sShield := true ;
4890: LD_ADDR_EXP 90
4894: PUSH
4895: LD_INT 1
4897: ST_TO_ADDR
// if p3 = 35 then
4898: LD_VAR 0 3
4902: PUSH
4903: LD_INT 35
4905: EQUAL
4906: IFFALSE 4916
// sTime := true ;
4908: LD_ADDR_EXP 91
4912: PUSH
4913: LD_INT 1
4915: ST_TO_ADDR
// if p3 = 36 then
4916: LD_VAR 0 3
4920: PUSH
4921: LD_INT 36
4923: EQUAL
4924: IFFALSE 4934
// sTools := true ;
4926: LD_ADDR_EXP 92
4930: PUSH
4931: LD_INT 1
4933: ST_TO_ADDR
// if p3 = 101 then
4934: LD_VAR 0 3
4938: PUSH
4939: LD_INT 101
4941: EQUAL
4942: IFFALSE 4952
// sSold := true ;
4944: LD_ADDR_EXP 57
4948: PUSH
4949: LD_INT 1
4951: ST_TO_ADDR
// if p3 = 102 then
4952: LD_VAR 0 3
4956: PUSH
4957: LD_INT 102
4959: EQUAL
4960: IFFALSE 4970
// sDiff := true ;
4962: LD_ADDR_EXP 58
4966: PUSH
4967: LD_INT 1
4969: ST_TO_ADDR
// if p3 = 103 then
4970: LD_VAR 0 3
4974: PUSH
4975: LD_INT 103
4977: EQUAL
4978: IFFALSE 4988
// sFog := true ;
4980: LD_ADDR_EXP 61
4984: PUSH
4985: LD_INT 1
4987: ST_TO_ADDR
// if p3 = 104 then
4988: LD_VAR 0 3
4992: PUSH
4993: LD_INT 104
4995: EQUAL
4996: IFFALSE 5006
// sReset := true ;
4998: LD_ADDR_EXP 62
5002: PUSH
5003: LD_INT 1
5005: ST_TO_ADDR
// if p3 = 105 then
5006: LD_VAR 0 3
5010: PUSH
5011: LD_INT 105
5013: EQUAL
5014: IFFALSE 5024
// sSun := true ;
5016: LD_ADDR_EXP 63
5020: PUSH
5021: LD_INT 1
5023: ST_TO_ADDR
// if p3 = 106 then
5024: LD_VAR 0 3
5028: PUSH
5029: LD_INT 106
5031: EQUAL
5032: IFFALSE 5042
// sTiger := true ;
5034: LD_ADDR_EXP 59
5038: PUSH
5039: LD_INT 1
5041: ST_TO_ADDR
// if p3 = 107 then
5042: LD_VAR 0 3
5046: PUSH
5047: LD_INT 107
5049: EQUAL
5050: IFFALSE 5060
// sBomb := true ;
5052: LD_ADDR_EXP 60
5056: PUSH
5057: LD_INT 1
5059: ST_TO_ADDR
// if p3 = 108 then
5060: LD_VAR 0 3
5064: PUSH
5065: LD_INT 108
5067: EQUAL
5068: IFFALSE 5078
// sWound := true ;
5070: LD_ADDR_EXP 68
5074: PUSH
5075: LD_INT 1
5077: ST_TO_ADDR
// if p3 = 109 then
5078: LD_VAR 0 3
5082: PUSH
5083: LD_INT 109
5085: EQUAL
5086: IFFALSE 5096
// sBetray := true ;
5088: LD_ADDR_EXP 72
5092: PUSH
5093: LD_INT 1
5095: ST_TO_ADDR
// if p3 = 110 then
5096: LD_VAR 0 3
5100: PUSH
5101: LD_INT 110
5103: EQUAL
5104: IFFALSE 5114
// sContamin := true ;
5106: LD_ADDR_EXP 73
5110: PUSH
5111: LD_INT 1
5113: ST_TO_ADDR
// if p3 = 111 then
5114: LD_VAR 0 3
5118: PUSH
5119: LD_INT 111
5121: EQUAL
5122: IFFALSE 5132
// sOil := true ;
5124: LD_ADDR_EXP 75
5128: PUSH
5129: LD_INT 1
5131: ST_TO_ADDR
// if p3 = 112 then
5132: LD_VAR 0 3
5136: PUSH
5137: LD_INT 112
5139: EQUAL
5140: IFFALSE 5150
// sStu := true ;
5142: LD_ADDR_EXP 79
5146: PUSH
5147: LD_INT 1
5149: ST_TO_ADDR
// if p3 = 113 then
5150: LD_VAR 0 3
5154: PUSH
5155: LD_INT 113
5157: EQUAL
5158: IFFALSE 5168
// sBazooka := true ;
5160: LD_ADDR_EXP 82
5164: PUSH
5165: LD_INT 1
5167: ST_TO_ADDR
// if p3 = 114 then
5168: LD_VAR 0 3
5172: PUSH
5173: LD_INT 114
5175: EQUAL
5176: IFFALSE 5186
// sMortar := true ;
5178: LD_ADDR_EXP 83
5182: PUSH
5183: LD_INT 1
5185: ST_TO_ADDR
// if p3 = 115 then
5186: LD_VAR 0 3
5190: PUSH
5191: LD_INT 115
5193: EQUAL
5194: IFFALSE 5204
// sRanger := true ;
5196: LD_ADDR_EXP 93
5200: PUSH
5201: LD_INT 1
5203: ST_TO_ADDR
// if p3 = 116 then
5204: LD_VAR 0 3
5208: PUSH
5209: LD_INT 116
5211: EQUAL
5212: IFFALSE 5222
// sComputer := true ;
5214: LD_ADDR_EXP 94
5218: PUSH
5219: LD_INT 1
5221: ST_TO_ADDR
// if p3 = 117 then
5222: LD_VAR 0 3
5226: PUSH
5227: LD_INT 117
5229: EQUAL
5230: IFFALSE 5240
// s30 := true ;
5232: LD_ADDR_EXP 95
5236: PUSH
5237: LD_INT 1
5239: ST_TO_ADDR
// if p3 = 118 then
5240: LD_VAR 0 3
5244: PUSH
5245: LD_INT 118
5247: EQUAL
5248: IFFALSE 5258
// s60 := true ;
5250: LD_ADDR_EXP 96
5254: PUSH
5255: LD_INT 1
5257: ST_TO_ADDR
// end ; if p2 = hack_mode then
5258: LD_VAR 0 2
5262: PUSH
5263: LD_INT 101
5265: EQUAL
5266: IFFALSE 5394
// begin case p3 of 1 :
5268: LD_VAR 0 3
5272: PUSH
5273: LD_INT 1
5275: DOUBLE
5276: EQUAL
5277: IFTRUE 5281
5279: GO 5288
5281: POP
// hHackUnlimitedResources ; 2 :
5282: CALL 17565 0 0
5286: GO 5394
5288: LD_INT 2
5290: DOUBLE
5291: EQUAL
5292: IFTRUE 5296
5294: GO 5303
5296: POP
// hHackSetLevel10 ; 3 :
5297: CALL 17698 0 0
5301: GO 5394
5303: LD_INT 3
5305: DOUBLE
5306: EQUAL
5307: IFTRUE 5311
5309: GO 5318
5311: POP
// hHackSetLevel10YourUnits ; 4 :
5312: CALL 17783 0 0
5316: GO 5394
5318: LD_INT 4
5320: DOUBLE
5321: EQUAL
5322: IFTRUE 5326
5324: GO 5333
5326: POP
// hHackInvincible ; 5 :
5327: CALL 18231 0 0
5331: GO 5394
5333: LD_INT 5
5335: DOUBLE
5336: EQUAL
5337: IFTRUE 5341
5339: GO 5348
5341: POP
// hHackInvisible ; 6 :
5342: CALL 18342 0 0
5346: GO 5394
5348: LD_INT 6
5350: DOUBLE
5351: EQUAL
5352: IFTRUE 5356
5354: GO 5363
5356: POP
// hHackChangeYourSide ; 7 :
5357: CALL 18399 0 0
5361: GO 5394
5363: LD_INT 7
5365: DOUBLE
5366: EQUAL
5367: IFTRUE 5371
5369: GO 5378
5371: POP
// hHackChangeUnitSide ; 8 :
5372: CALL 18441 0 0
5376: GO 5394
5378: LD_INT 8
5380: DOUBLE
5381: EQUAL
5382: IFTRUE 5386
5384: GO 5393
5386: POP
// hHackFog ; end ;
5387: CALL 18542 0 0
5391: GO 5394
5393: POP
// end ; if p2 = game_save_mode then
5394: LD_VAR 0 2
5398: PUSH
5399: LD_INT 102
5401: EQUAL
5402: IFFALSE 5467
// begin if p3 = 1 then
5404: LD_VAR 0 3
5408: PUSH
5409: LD_INT 1
5411: EQUAL
5412: IFFALSE 5424
// globalGameSaveCounter := p4 ;
5414: LD_ADDR_EXP 39
5418: PUSH
5419: LD_VAR 0 4
5423: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5424: LD_VAR 0 3
5428: PUSH
5429: LD_INT 2
5431: EQUAL
5432: PUSH
5433: LD_EXP 39
5437: AND
5438: IFFALSE 5457
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5440: LD_STRING setGameSaveCounter(
5442: PUSH
5443: LD_EXP 39
5447: STR
5448: PUSH
5449: LD_STRING )
5451: STR
5452: PPUSH
5453: CALL_OW 559
// display_strings := globalGameSaveCounter ;
5457: LD_ADDR_OWVAR 47
5461: PUSH
5462: LD_EXP 39
5466: ST_TO_ADDR
// end ; end ;
5467: LD_VAR 0 7
5471: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
5472: GO 5474
5474: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
5475: LD_STRING initStreamRollete();
5477: PPUSH
5478: CALL_OW 559
// InitStreamMode ;
5482: CALL 5494 0 0
// DefineStreamItems ( false ) ;
5486: LD_INT 0
5488: PPUSH
5489: CALL 5958 0 1
// end ;
5493: END
// function InitStreamMode ; begin
5494: LD_INT 0
5496: PPUSH
// streamModeActive := false ;
5497: LD_ADDR_EXP 40
5501: PUSH
5502: LD_INT 0
5504: ST_TO_ADDR
// normalCounter := 36 ;
5505: LD_ADDR_EXP 41
5509: PUSH
5510: LD_INT 36
5512: ST_TO_ADDR
// hardcoreCounter := 18 ;
5513: LD_ADDR_EXP 42
5517: PUSH
5518: LD_INT 18
5520: ST_TO_ADDR
// sRocket := false ;
5521: LD_ADDR_EXP 45
5525: PUSH
5526: LD_INT 0
5528: ST_TO_ADDR
// sSpeed := false ;
5529: LD_ADDR_EXP 44
5533: PUSH
5534: LD_INT 0
5536: ST_TO_ADDR
// sEngine := false ;
5537: LD_ADDR_EXP 46
5541: PUSH
5542: LD_INT 0
5544: ST_TO_ADDR
// sSpec := false ;
5545: LD_ADDR_EXP 43
5549: PUSH
5550: LD_INT 0
5552: ST_TO_ADDR
// sLevel := false ;
5553: LD_ADDR_EXP 47
5557: PUSH
5558: LD_INT 0
5560: ST_TO_ADDR
// sArmoury := false ;
5561: LD_ADDR_EXP 48
5565: PUSH
5566: LD_INT 0
5568: ST_TO_ADDR
// sRadar := false ;
5569: LD_ADDR_EXP 49
5573: PUSH
5574: LD_INT 0
5576: ST_TO_ADDR
// sBunker := false ;
5577: LD_ADDR_EXP 50
5581: PUSH
5582: LD_INT 0
5584: ST_TO_ADDR
// sHack := false ;
5585: LD_ADDR_EXP 51
5589: PUSH
5590: LD_INT 0
5592: ST_TO_ADDR
// sFire := false ;
5593: LD_ADDR_EXP 52
5597: PUSH
5598: LD_INT 0
5600: ST_TO_ADDR
// sRefresh := false ;
5601: LD_ADDR_EXP 53
5605: PUSH
5606: LD_INT 0
5608: ST_TO_ADDR
// sExp := false ;
5609: LD_ADDR_EXP 54
5613: PUSH
5614: LD_INT 0
5616: ST_TO_ADDR
// sDepot := false ;
5617: LD_ADDR_EXP 55
5621: PUSH
5622: LD_INT 0
5624: ST_TO_ADDR
// sFlag := false ;
5625: LD_ADDR_EXP 56
5629: PUSH
5630: LD_INT 0
5632: ST_TO_ADDR
// sKamikadze := false ;
5633: LD_ADDR_EXP 64
5637: PUSH
5638: LD_INT 0
5640: ST_TO_ADDR
// sTroll := false ;
5641: LD_ADDR_EXP 65
5645: PUSH
5646: LD_INT 0
5648: ST_TO_ADDR
// sSlow := false ;
5649: LD_ADDR_EXP 66
5653: PUSH
5654: LD_INT 0
5656: ST_TO_ADDR
// sLack := false ;
5657: LD_ADDR_EXP 67
5661: PUSH
5662: LD_INT 0
5664: ST_TO_ADDR
// sTank := false ;
5665: LD_ADDR_EXP 69
5669: PUSH
5670: LD_INT 0
5672: ST_TO_ADDR
// sRemote := false ;
5673: LD_ADDR_EXP 70
5677: PUSH
5678: LD_INT 0
5680: ST_TO_ADDR
// sPowell := false ;
5681: LD_ADDR_EXP 71
5685: PUSH
5686: LD_INT 0
5688: ST_TO_ADDR
// sTeleport := false ;
5689: LD_ADDR_EXP 74
5693: PUSH
5694: LD_INT 0
5696: ST_TO_ADDR
// sOilTower := false ;
5697: LD_ADDR_EXP 76
5701: PUSH
5702: LD_INT 0
5704: ST_TO_ADDR
// sShovel := false ;
5705: LD_ADDR_EXP 77
5709: PUSH
5710: LD_INT 0
5712: ST_TO_ADDR
// sSheik := false ;
5713: LD_ADDR_EXP 78
5717: PUSH
5718: LD_INT 0
5720: ST_TO_ADDR
// sEarthquake := false ;
5721: LD_ADDR_EXP 80
5725: PUSH
5726: LD_INT 0
5728: ST_TO_ADDR
// sAI := false ;
5729: LD_ADDR_EXP 81
5733: PUSH
5734: LD_INT 0
5736: ST_TO_ADDR
// sCargo := false ;
5737: LD_ADDR_EXP 84
5741: PUSH
5742: LD_INT 0
5744: ST_TO_ADDR
// sDLaser := false ;
5745: LD_ADDR_EXP 85
5749: PUSH
5750: LD_INT 0
5752: ST_TO_ADDR
// sExchange := false ;
5753: LD_ADDR_EXP 86
5757: PUSH
5758: LD_INT 0
5760: ST_TO_ADDR
// sFac := false ;
5761: LD_ADDR_EXP 87
5765: PUSH
5766: LD_INT 0
5768: ST_TO_ADDR
// sPower := false ;
5769: LD_ADDR_EXP 88
5773: PUSH
5774: LD_INT 0
5776: ST_TO_ADDR
// sRandom := false ;
5777: LD_ADDR_EXP 89
5781: PUSH
5782: LD_INT 0
5784: ST_TO_ADDR
// sShield := false ;
5785: LD_ADDR_EXP 90
5789: PUSH
5790: LD_INT 0
5792: ST_TO_ADDR
// sTime := false ;
5793: LD_ADDR_EXP 91
5797: PUSH
5798: LD_INT 0
5800: ST_TO_ADDR
// sTools := false ;
5801: LD_ADDR_EXP 92
5805: PUSH
5806: LD_INT 0
5808: ST_TO_ADDR
// sSold := false ;
5809: LD_ADDR_EXP 57
5813: PUSH
5814: LD_INT 0
5816: ST_TO_ADDR
// sDiff := false ;
5817: LD_ADDR_EXP 58
5821: PUSH
5822: LD_INT 0
5824: ST_TO_ADDR
// sFog := false ;
5825: LD_ADDR_EXP 61
5829: PUSH
5830: LD_INT 0
5832: ST_TO_ADDR
// sReset := false ;
5833: LD_ADDR_EXP 62
5837: PUSH
5838: LD_INT 0
5840: ST_TO_ADDR
// sSun := false ;
5841: LD_ADDR_EXP 63
5845: PUSH
5846: LD_INT 0
5848: ST_TO_ADDR
// sTiger := false ;
5849: LD_ADDR_EXP 59
5853: PUSH
5854: LD_INT 0
5856: ST_TO_ADDR
// sBomb := false ;
5857: LD_ADDR_EXP 60
5861: PUSH
5862: LD_INT 0
5864: ST_TO_ADDR
// sWound := false ;
5865: LD_ADDR_EXP 68
5869: PUSH
5870: LD_INT 0
5872: ST_TO_ADDR
// sBetray := false ;
5873: LD_ADDR_EXP 72
5877: PUSH
5878: LD_INT 0
5880: ST_TO_ADDR
// sContamin := false ;
5881: LD_ADDR_EXP 73
5885: PUSH
5886: LD_INT 0
5888: ST_TO_ADDR
// sOil := false ;
5889: LD_ADDR_EXP 75
5893: PUSH
5894: LD_INT 0
5896: ST_TO_ADDR
// sStu := false ;
5897: LD_ADDR_EXP 79
5901: PUSH
5902: LD_INT 0
5904: ST_TO_ADDR
// sBazooka := false ;
5905: LD_ADDR_EXP 82
5909: PUSH
5910: LD_INT 0
5912: ST_TO_ADDR
// sMortar := false ;
5913: LD_ADDR_EXP 83
5917: PUSH
5918: LD_INT 0
5920: ST_TO_ADDR
// sRanger := false ;
5921: LD_ADDR_EXP 93
5925: PUSH
5926: LD_INT 0
5928: ST_TO_ADDR
// sComputer := false ;
5929: LD_ADDR_EXP 94
5933: PUSH
5934: LD_INT 0
5936: ST_TO_ADDR
// s30 := false ;
5937: LD_ADDR_EXP 95
5941: PUSH
5942: LD_INT 0
5944: ST_TO_ADDR
// s60 := false ;
5945: LD_ADDR_EXP 96
5949: PUSH
5950: LD_INT 0
5952: ST_TO_ADDR
// end ;
5953: LD_VAR 0 1
5957: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
5958: LD_INT 0
5960: PPUSH
5961: PPUSH
5962: PPUSH
5963: PPUSH
5964: PPUSH
5965: PPUSH
5966: PPUSH
// result := [ ] ;
5967: LD_ADDR_VAR 0 2
5971: PUSH
5972: EMPTY
5973: ST_TO_ADDR
// if campaign_id = 1 then
5974: LD_OWVAR 69
5978: PUSH
5979: LD_INT 1
5981: EQUAL
5982: IFFALSE 9148
// begin case mission_number of 1 :
5984: LD_OWVAR 70
5988: PUSH
5989: LD_INT 1
5991: DOUBLE
5992: EQUAL
5993: IFTRUE 5997
5995: GO 6073
5997: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
5998: LD_ADDR_VAR 0 2
6002: PUSH
6003: LD_INT 2
6005: PUSH
6006: LD_INT 4
6008: PUSH
6009: LD_INT 11
6011: PUSH
6012: LD_INT 12
6014: PUSH
6015: LD_INT 15
6017: PUSH
6018: LD_INT 16
6020: PUSH
6021: LD_INT 22
6023: PUSH
6024: LD_INT 23
6026: PUSH
6027: LD_INT 26
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: LIST
6034: LIST
6035: LIST
6036: LIST
6037: LIST
6038: LIST
6039: LIST
6040: PUSH
6041: LD_INT 101
6043: PUSH
6044: LD_INT 102
6046: PUSH
6047: LD_INT 106
6049: PUSH
6050: LD_INT 116
6052: PUSH
6053: LD_INT 117
6055: PUSH
6056: LD_INT 118
6058: PUSH
6059: EMPTY
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: PUSH
6067: EMPTY
6068: LIST
6069: LIST
6070: ST_TO_ADDR
6071: GO 9146
6073: LD_INT 2
6075: DOUBLE
6076: EQUAL
6077: IFTRUE 6081
6079: GO 6165
6081: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6082: LD_ADDR_VAR 0 2
6086: PUSH
6087: LD_INT 2
6089: PUSH
6090: LD_INT 4
6092: PUSH
6093: LD_INT 11
6095: PUSH
6096: LD_INT 12
6098: PUSH
6099: LD_INT 15
6101: PUSH
6102: LD_INT 16
6104: PUSH
6105: LD_INT 22
6107: PUSH
6108: LD_INT 23
6110: PUSH
6111: LD_INT 26
6113: PUSH
6114: EMPTY
6115: LIST
6116: LIST
6117: LIST
6118: LIST
6119: LIST
6120: LIST
6121: LIST
6122: LIST
6123: LIST
6124: PUSH
6125: LD_INT 101
6127: PUSH
6128: LD_INT 102
6130: PUSH
6131: LD_INT 105
6133: PUSH
6134: LD_INT 106
6136: PUSH
6137: LD_INT 108
6139: PUSH
6140: LD_INT 116
6142: PUSH
6143: LD_INT 117
6145: PUSH
6146: LD_INT 118
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: LIST
6153: LIST
6154: LIST
6155: LIST
6156: LIST
6157: LIST
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: ST_TO_ADDR
6163: GO 9146
6165: LD_INT 3
6167: DOUBLE
6168: EQUAL
6169: IFTRUE 6173
6171: GO 6261
6173: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6174: LD_ADDR_VAR 0 2
6178: PUSH
6179: LD_INT 2
6181: PUSH
6182: LD_INT 4
6184: PUSH
6185: LD_INT 5
6187: PUSH
6188: LD_INT 11
6190: PUSH
6191: LD_INT 12
6193: PUSH
6194: LD_INT 15
6196: PUSH
6197: LD_INT 16
6199: PUSH
6200: LD_INT 22
6202: PUSH
6203: LD_INT 26
6205: PUSH
6206: LD_INT 36
6208: PUSH
6209: EMPTY
6210: LIST
6211: LIST
6212: LIST
6213: LIST
6214: LIST
6215: LIST
6216: LIST
6217: LIST
6218: LIST
6219: LIST
6220: PUSH
6221: LD_INT 101
6223: PUSH
6224: LD_INT 102
6226: PUSH
6227: LD_INT 105
6229: PUSH
6230: LD_INT 106
6232: PUSH
6233: LD_INT 108
6235: PUSH
6236: LD_INT 116
6238: PUSH
6239: LD_INT 117
6241: PUSH
6242: LD_INT 118
6244: PUSH
6245: EMPTY
6246: LIST
6247: LIST
6248: LIST
6249: LIST
6250: LIST
6251: LIST
6252: LIST
6253: LIST
6254: PUSH
6255: EMPTY
6256: LIST
6257: LIST
6258: ST_TO_ADDR
6259: GO 9146
6261: LD_INT 4
6263: DOUBLE
6264: EQUAL
6265: IFTRUE 6269
6267: GO 6365
6269: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6270: LD_ADDR_VAR 0 2
6274: PUSH
6275: LD_INT 2
6277: PUSH
6278: LD_INT 4
6280: PUSH
6281: LD_INT 5
6283: PUSH
6284: LD_INT 8
6286: PUSH
6287: LD_INT 11
6289: PUSH
6290: LD_INT 12
6292: PUSH
6293: LD_INT 15
6295: PUSH
6296: LD_INT 16
6298: PUSH
6299: LD_INT 22
6301: PUSH
6302: LD_INT 23
6304: PUSH
6305: LD_INT 26
6307: PUSH
6308: LD_INT 36
6310: PUSH
6311: EMPTY
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: LIST
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: PUSH
6325: LD_INT 101
6327: PUSH
6328: LD_INT 102
6330: PUSH
6331: LD_INT 105
6333: PUSH
6334: LD_INT 106
6336: PUSH
6337: LD_INT 108
6339: PUSH
6340: LD_INT 116
6342: PUSH
6343: LD_INT 117
6345: PUSH
6346: LD_INT 118
6348: PUSH
6349: EMPTY
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: PUSH
6359: EMPTY
6360: LIST
6361: LIST
6362: ST_TO_ADDR
6363: GO 9146
6365: LD_INT 5
6367: DOUBLE
6368: EQUAL
6369: IFTRUE 6373
6371: GO 6485
6373: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6374: LD_ADDR_VAR 0 2
6378: PUSH
6379: LD_INT 2
6381: PUSH
6382: LD_INT 4
6384: PUSH
6385: LD_INT 5
6387: PUSH
6388: LD_INT 6
6390: PUSH
6391: LD_INT 8
6393: PUSH
6394: LD_INT 11
6396: PUSH
6397: LD_INT 12
6399: PUSH
6400: LD_INT 15
6402: PUSH
6403: LD_INT 16
6405: PUSH
6406: LD_INT 22
6408: PUSH
6409: LD_INT 23
6411: PUSH
6412: LD_INT 25
6414: PUSH
6415: LD_INT 26
6417: PUSH
6418: LD_INT 36
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: PUSH
6437: LD_INT 101
6439: PUSH
6440: LD_INT 102
6442: PUSH
6443: LD_INT 105
6445: PUSH
6446: LD_INT 106
6448: PUSH
6449: LD_INT 108
6451: PUSH
6452: LD_INT 109
6454: PUSH
6455: LD_INT 112
6457: PUSH
6458: LD_INT 116
6460: PUSH
6461: LD_INT 117
6463: PUSH
6464: LD_INT 118
6466: PUSH
6467: EMPTY
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: LIST
6474: LIST
6475: LIST
6476: LIST
6477: LIST
6478: PUSH
6479: EMPTY
6480: LIST
6481: LIST
6482: ST_TO_ADDR
6483: GO 9146
6485: LD_INT 6
6487: DOUBLE
6488: EQUAL
6489: IFTRUE 6493
6491: GO 6625
6493: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6494: LD_ADDR_VAR 0 2
6498: PUSH
6499: LD_INT 2
6501: PUSH
6502: LD_INT 4
6504: PUSH
6505: LD_INT 5
6507: PUSH
6508: LD_INT 6
6510: PUSH
6511: LD_INT 8
6513: PUSH
6514: LD_INT 11
6516: PUSH
6517: LD_INT 12
6519: PUSH
6520: LD_INT 15
6522: PUSH
6523: LD_INT 16
6525: PUSH
6526: LD_INT 20
6528: PUSH
6529: LD_INT 21
6531: PUSH
6532: LD_INT 22
6534: PUSH
6535: LD_INT 23
6537: PUSH
6538: LD_INT 25
6540: PUSH
6541: LD_INT 26
6543: PUSH
6544: LD_INT 30
6546: PUSH
6547: LD_INT 31
6549: PUSH
6550: LD_INT 32
6552: PUSH
6553: LD_INT 36
6555: PUSH
6556: EMPTY
6557: LIST
6558: LIST
6559: LIST
6560: LIST
6561: LIST
6562: LIST
6563: LIST
6564: LIST
6565: LIST
6566: LIST
6567: LIST
6568: LIST
6569: LIST
6570: LIST
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: PUSH
6577: LD_INT 101
6579: PUSH
6580: LD_INT 102
6582: PUSH
6583: LD_INT 105
6585: PUSH
6586: LD_INT 106
6588: PUSH
6589: LD_INT 108
6591: PUSH
6592: LD_INT 109
6594: PUSH
6595: LD_INT 112
6597: PUSH
6598: LD_INT 116
6600: PUSH
6601: LD_INT 117
6603: PUSH
6604: LD_INT 118
6606: PUSH
6607: EMPTY
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: PUSH
6619: EMPTY
6620: LIST
6621: LIST
6622: ST_TO_ADDR
6623: GO 9146
6625: LD_INT 7
6627: DOUBLE
6628: EQUAL
6629: IFTRUE 6633
6631: GO 6745
6633: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6634: LD_ADDR_VAR 0 2
6638: PUSH
6639: LD_INT 2
6641: PUSH
6642: LD_INT 4
6644: PUSH
6645: LD_INT 5
6647: PUSH
6648: LD_INT 7
6650: PUSH
6651: LD_INT 11
6653: PUSH
6654: LD_INT 12
6656: PUSH
6657: LD_INT 15
6659: PUSH
6660: LD_INT 16
6662: PUSH
6663: LD_INT 20
6665: PUSH
6666: LD_INT 21
6668: PUSH
6669: LD_INT 22
6671: PUSH
6672: LD_INT 23
6674: PUSH
6675: LD_INT 25
6677: PUSH
6678: LD_INT 26
6680: PUSH
6681: EMPTY
6682: LIST
6683: LIST
6684: LIST
6685: LIST
6686: LIST
6687: LIST
6688: LIST
6689: LIST
6690: LIST
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: LIST
6696: PUSH
6697: LD_INT 101
6699: PUSH
6700: LD_INT 102
6702: PUSH
6703: LD_INT 103
6705: PUSH
6706: LD_INT 105
6708: PUSH
6709: LD_INT 106
6711: PUSH
6712: LD_INT 108
6714: PUSH
6715: LD_INT 112
6717: PUSH
6718: LD_INT 116
6720: PUSH
6721: LD_INT 117
6723: PUSH
6724: LD_INT 118
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: PUSH
6739: EMPTY
6740: LIST
6741: LIST
6742: ST_TO_ADDR
6743: GO 9146
6745: LD_INT 8
6747: DOUBLE
6748: EQUAL
6749: IFTRUE 6753
6751: GO 6893
6753: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6754: LD_ADDR_VAR 0 2
6758: PUSH
6759: LD_INT 2
6761: PUSH
6762: LD_INT 4
6764: PUSH
6765: LD_INT 5
6767: PUSH
6768: LD_INT 6
6770: PUSH
6771: LD_INT 7
6773: PUSH
6774: LD_INT 8
6776: PUSH
6777: LD_INT 11
6779: PUSH
6780: LD_INT 12
6782: PUSH
6783: LD_INT 15
6785: PUSH
6786: LD_INT 16
6788: PUSH
6789: LD_INT 20
6791: PUSH
6792: LD_INT 21
6794: PUSH
6795: LD_INT 22
6797: PUSH
6798: LD_INT 23
6800: PUSH
6801: LD_INT 25
6803: PUSH
6804: LD_INT 26
6806: PUSH
6807: LD_INT 30
6809: PUSH
6810: LD_INT 31
6812: PUSH
6813: LD_INT 32
6815: PUSH
6816: LD_INT 36
6818: PUSH
6819: EMPTY
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: LIST
6840: PUSH
6841: LD_INT 101
6843: PUSH
6844: LD_INT 102
6846: PUSH
6847: LD_INT 103
6849: PUSH
6850: LD_INT 105
6852: PUSH
6853: LD_INT 106
6855: PUSH
6856: LD_INT 108
6858: PUSH
6859: LD_INT 109
6861: PUSH
6862: LD_INT 112
6864: PUSH
6865: LD_INT 116
6867: PUSH
6868: LD_INT 117
6870: PUSH
6871: LD_INT 118
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: LIST
6878: LIST
6879: LIST
6880: LIST
6881: LIST
6882: LIST
6883: LIST
6884: LIST
6885: LIST
6886: PUSH
6887: EMPTY
6888: LIST
6889: LIST
6890: ST_TO_ADDR
6891: GO 9146
6893: LD_INT 9
6895: DOUBLE
6896: EQUAL
6897: IFTRUE 6901
6899: GO 7049
6901: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
6902: LD_ADDR_VAR 0 2
6906: PUSH
6907: LD_INT 2
6909: PUSH
6910: LD_INT 4
6912: PUSH
6913: LD_INT 5
6915: PUSH
6916: LD_INT 6
6918: PUSH
6919: LD_INT 7
6921: PUSH
6922: LD_INT 8
6924: PUSH
6925: LD_INT 11
6927: PUSH
6928: LD_INT 12
6930: PUSH
6931: LD_INT 15
6933: PUSH
6934: LD_INT 16
6936: PUSH
6937: LD_INT 20
6939: PUSH
6940: LD_INT 21
6942: PUSH
6943: LD_INT 22
6945: PUSH
6946: LD_INT 23
6948: PUSH
6949: LD_INT 25
6951: PUSH
6952: LD_INT 26
6954: PUSH
6955: LD_INT 28
6957: PUSH
6958: LD_INT 30
6960: PUSH
6961: LD_INT 31
6963: PUSH
6964: LD_INT 32
6966: PUSH
6967: LD_INT 36
6969: PUSH
6970: EMPTY
6971: LIST
6972: LIST
6973: LIST
6974: LIST
6975: LIST
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: LIST
6981: LIST
6982: LIST
6983: LIST
6984: LIST
6985: LIST
6986: LIST
6987: LIST
6988: LIST
6989: LIST
6990: LIST
6991: LIST
6992: PUSH
6993: LD_INT 101
6995: PUSH
6996: LD_INT 102
6998: PUSH
6999: LD_INT 103
7001: PUSH
7002: LD_INT 105
7004: PUSH
7005: LD_INT 106
7007: PUSH
7008: LD_INT 108
7010: PUSH
7011: LD_INT 109
7013: PUSH
7014: LD_INT 112
7016: PUSH
7017: LD_INT 114
7019: PUSH
7020: LD_INT 116
7022: PUSH
7023: LD_INT 117
7025: PUSH
7026: LD_INT 118
7028: PUSH
7029: EMPTY
7030: LIST
7031: LIST
7032: LIST
7033: LIST
7034: LIST
7035: LIST
7036: LIST
7037: LIST
7038: LIST
7039: LIST
7040: LIST
7041: LIST
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: ST_TO_ADDR
7047: GO 9146
7049: LD_INT 10
7051: DOUBLE
7052: EQUAL
7053: IFTRUE 7057
7055: GO 7253
7057: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7058: LD_ADDR_VAR 0 2
7062: PUSH
7063: LD_INT 2
7065: PUSH
7066: LD_INT 4
7068: PUSH
7069: LD_INT 5
7071: PUSH
7072: LD_INT 6
7074: PUSH
7075: LD_INT 7
7077: PUSH
7078: LD_INT 8
7080: PUSH
7081: LD_INT 9
7083: PUSH
7084: LD_INT 10
7086: PUSH
7087: LD_INT 11
7089: PUSH
7090: LD_INT 12
7092: PUSH
7093: LD_INT 13
7095: PUSH
7096: LD_INT 14
7098: PUSH
7099: LD_INT 15
7101: PUSH
7102: LD_INT 16
7104: PUSH
7105: LD_INT 17
7107: PUSH
7108: LD_INT 18
7110: PUSH
7111: LD_INT 19
7113: PUSH
7114: LD_INT 20
7116: PUSH
7117: LD_INT 21
7119: PUSH
7120: LD_INT 22
7122: PUSH
7123: LD_INT 23
7125: PUSH
7126: LD_INT 24
7128: PUSH
7129: LD_INT 25
7131: PUSH
7132: LD_INT 26
7134: PUSH
7135: LD_INT 28
7137: PUSH
7138: LD_INT 30
7140: PUSH
7141: LD_INT 31
7143: PUSH
7144: LD_INT 32
7146: PUSH
7147: LD_INT 36
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: LIST
7177: LIST
7178: LIST
7179: LIST
7180: PUSH
7181: LD_INT 101
7183: PUSH
7184: LD_INT 102
7186: PUSH
7187: LD_INT 103
7189: PUSH
7190: LD_INT 104
7192: PUSH
7193: LD_INT 105
7195: PUSH
7196: LD_INT 106
7198: PUSH
7199: LD_INT 107
7201: PUSH
7202: LD_INT 108
7204: PUSH
7205: LD_INT 109
7207: PUSH
7208: LD_INT 110
7210: PUSH
7211: LD_INT 111
7213: PUSH
7214: LD_INT 112
7216: PUSH
7217: LD_INT 114
7219: PUSH
7220: LD_INT 116
7222: PUSH
7223: LD_INT 117
7225: PUSH
7226: LD_INT 118
7228: PUSH
7229: EMPTY
7230: LIST
7231: LIST
7232: LIST
7233: LIST
7234: LIST
7235: LIST
7236: LIST
7237: LIST
7238: LIST
7239: LIST
7240: LIST
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: LIST
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: ST_TO_ADDR
7251: GO 9146
7253: LD_INT 11
7255: DOUBLE
7256: EQUAL
7257: IFTRUE 7261
7259: GO 7465
7261: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7262: LD_ADDR_VAR 0 2
7266: PUSH
7267: LD_INT 2
7269: PUSH
7270: LD_INT 3
7272: PUSH
7273: LD_INT 4
7275: PUSH
7276: LD_INT 5
7278: PUSH
7279: LD_INT 6
7281: PUSH
7282: LD_INT 7
7284: PUSH
7285: LD_INT 8
7287: PUSH
7288: LD_INT 9
7290: PUSH
7291: LD_INT 10
7293: PUSH
7294: LD_INT 11
7296: PUSH
7297: LD_INT 12
7299: PUSH
7300: LD_INT 13
7302: PUSH
7303: LD_INT 14
7305: PUSH
7306: LD_INT 15
7308: PUSH
7309: LD_INT 16
7311: PUSH
7312: LD_INT 17
7314: PUSH
7315: LD_INT 18
7317: PUSH
7318: LD_INT 19
7320: PUSH
7321: LD_INT 20
7323: PUSH
7324: LD_INT 21
7326: PUSH
7327: LD_INT 22
7329: PUSH
7330: LD_INT 23
7332: PUSH
7333: LD_INT 24
7335: PUSH
7336: LD_INT 25
7338: PUSH
7339: LD_INT 26
7341: PUSH
7342: LD_INT 28
7344: PUSH
7345: LD_INT 30
7347: PUSH
7348: LD_INT 31
7350: PUSH
7351: LD_INT 32
7353: PUSH
7354: LD_INT 34
7356: PUSH
7357: LD_INT 36
7359: PUSH
7360: EMPTY
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: PUSH
7393: LD_INT 101
7395: PUSH
7396: LD_INT 102
7398: PUSH
7399: LD_INT 103
7401: PUSH
7402: LD_INT 104
7404: PUSH
7405: LD_INT 105
7407: PUSH
7408: LD_INT 106
7410: PUSH
7411: LD_INT 107
7413: PUSH
7414: LD_INT 108
7416: PUSH
7417: LD_INT 109
7419: PUSH
7420: LD_INT 110
7422: PUSH
7423: LD_INT 111
7425: PUSH
7426: LD_INT 112
7428: PUSH
7429: LD_INT 114
7431: PUSH
7432: LD_INT 116
7434: PUSH
7435: LD_INT 117
7437: PUSH
7438: LD_INT 118
7440: PUSH
7441: EMPTY
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: LIST
7454: LIST
7455: LIST
7456: LIST
7457: LIST
7458: PUSH
7459: EMPTY
7460: LIST
7461: LIST
7462: ST_TO_ADDR
7463: GO 9146
7465: LD_INT 12
7467: DOUBLE
7468: EQUAL
7469: IFTRUE 7473
7471: GO 7693
7473: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7474: LD_ADDR_VAR 0 2
7478: PUSH
7479: LD_INT 1
7481: PUSH
7482: LD_INT 2
7484: PUSH
7485: LD_INT 3
7487: PUSH
7488: LD_INT 4
7490: PUSH
7491: LD_INT 5
7493: PUSH
7494: LD_INT 6
7496: PUSH
7497: LD_INT 7
7499: PUSH
7500: LD_INT 8
7502: PUSH
7503: LD_INT 9
7505: PUSH
7506: LD_INT 10
7508: PUSH
7509: LD_INT 11
7511: PUSH
7512: LD_INT 12
7514: PUSH
7515: LD_INT 13
7517: PUSH
7518: LD_INT 14
7520: PUSH
7521: LD_INT 15
7523: PUSH
7524: LD_INT 16
7526: PUSH
7527: LD_INT 17
7529: PUSH
7530: LD_INT 18
7532: PUSH
7533: LD_INT 19
7535: PUSH
7536: LD_INT 20
7538: PUSH
7539: LD_INT 21
7541: PUSH
7542: LD_INT 22
7544: PUSH
7545: LD_INT 23
7547: PUSH
7548: LD_INT 24
7550: PUSH
7551: LD_INT 25
7553: PUSH
7554: LD_INT 26
7556: PUSH
7557: LD_INT 27
7559: PUSH
7560: LD_INT 28
7562: PUSH
7563: LD_INT 30
7565: PUSH
7566: LD_INT 31
7568: PUSH
7569: LD_INT 32
7571: PUSH
7572: LD_INT 33
7574: PUSH
7575: LD_INT 34
7577: PUSH
7578: LD_INT 36
7580: PUSH
7581: EMPTY
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: PUSH
7617: LD_INT 101
7619: PUSH
7620: LD_INT 102
7622: PUSH
7623: LD_INT 103
7625: PUSH
7626: LD_INT 104
7628: PUSH
7629: LD_INT 105
7631: PUSH
7632: LD_INT 106
7634: PUSH
7635: LD_INT 107
7637: PUSH
7638: LD_INT 108
7640: PUSH
7641: LD_INT 109
7643: PUSH
7644: LD_INT 110
7646: PUSH
7647: LD_INT 111
7649: PUSH
7650: LD_INT 112
7652: PUSH
7653: LD_INT 113
7655: PUSH
7656: LD_INT 114
7658: PUSH
7659: LD_INT 116
7661: PUSH
7662: LD_INT 117
7664: PUSH
7665: LD_INT 118
7667: PUSH
7668: EMPTY
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: PUSH
7687: EMPTY
7688: LIST
7689: LIST
7690: ST_TO_ADDR
7691: GO 9146
7693: LD_INT 13
7695: DOUBLE
7696: EQUAL
7697: IFTRUE 7701
7699: GO 7909
7701: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7702: LD_ADDR_VAR 0 2
7706: PUSH
7707: LD_INT 1
7709: PUSH
7710: LD_INT 2
7712: PUSH
7713: LD_INT 3
7715: PUSH
7716: LD_INT 4
7718: PUSH
7719: LD_INT 5
7721: PUSH
7722: LD_INT 8
7724: PUSH
7725: LD_INT 9
7727: PUSH
7728: LD_INT 10
7730: PUSH
7731: LD_INT 11
7733: PUSH
7734: LD_INT 12
7736: PUSH
7737: LD_INT 14
7739: PUSH
7740: LD_INT 15
7742: PUSH
7743: LD_INT 16
7745: PUSH
7746: LD_INT 17
7748: PUSH
7749: LD_INT 18
7751: PUSH
7752: LD_INT 19
7754: PUSH
7755: LD_INT 20
7757: PUSH
7758: LD_INT 21
7760: PUSH
7761: LD_INT 22
7763: PUSH
7764: LD_INT 23
7766: PUSH
7767: LD_INT 24
7769: PUSH
7770: LD_INT 25
7772: PUSH
7773: LD_INT 26
7775: PUSH
7776: LD_INT 27
7778: PUSH
7779: LD_INT 28
7781: PUSH
7782: LD_INT 30
7784: PUSH
7785: LD_INT 31
7787: PUSH
7788: LD_INT 32
7790: PUSH
7791: LD_INT 33
7793: PUSH
7794: LD_INT 34
7796: PUSH
7797: LD_INT 36
7799: PUSH
7800: EMPTY
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: LIST
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: LIST
7822: LIST
7823: LIST
7824: LIST
7825: LIST
7826: LIST
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: PUSH
7833: LD_INT 101
7835: PUSH
7836: LD_INT 102
7838: PUSH
7839: LD_INT 103
7841: PUSH
7842: LD_INT 104
7844: PUSH
7845: LD_INT 105
7847: PUSH
7848: LD_INT 106
7850: PUSH
7851: LD_INT 107
7853: PUSH
7854: LD_INT 108
7856: PUSH
7857: LD_INT 109
7859: PUSH
7860: LD_INT 110
7862: PUSH
7863: LD_INT 111
7865: PUSH
7866: LD_INT 112
7868: PUSH
7869: LD_INT 113
7871: PUSH
7872: LD_INT 114
7874: PUSH
7875: LD_INT 116
7877: PUSH
7878: LD_INT 117
7880: PUSH
7881: LD_INT 118
7883: PUSH
7884: EMPTY
7885: LIST
7886: LIST
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: LIST
7894: LIST
7895: LIST
7896: LIST
7897: LIST
7898: LIST
7899: LIST
7900: LIST
7901: LIST
7902: PUSH
7903: EMPTY
7904: LIST
7905: LIST
7906: ST_TO_ADDR
7907: GO 9146
7909: LD_INT 14
7911: DOUBLE
7912: EQUAL
7913: IFTRUE 7917
7915: GO 8141
7917: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
7918: LD_ADDR_VAR 0 2
7922: PUSH
7923: LD_INT 1
7925: PUSH
7926: LD_INT 2
7928: PUSH
7929: LD_INT 3
7931: PUSH
7932: LD_INT 4
7934: PUSH
7935: LD_INT 5
7937: PUSH
7938: LD_INT 6
7940: PUSH
7941: LD_INT 7
7943: PUSH
7944: LD_INT 8
7946: PUSH
7947: LD_INT 9
7949: PUSH
7950: LD_INT 10
7952: PUSH
7953: LD_INT 11
7955: PUSH
7956: LD_INT 12
7958: PUSH
7959: LD_INT 13
7961: PUSH
7962: LD_INT 14
7964: PUSH
7965: LD_INT 15
7967: PUSH
7968: LD_INT 16
7970: PUSH
7971: LD_INT 17
7973: PUSH
7974: LD_INT 18
7976: PUSH
7977: LD_INT 19
7979: PUSH
7980: LD_INT 20
7982: PUSH
7983: LD_INT 21
7985: PUSH
7986: LD_INT 22
7988: PUSH
7989: LD_INT 23
7991: PUSH
7992: LD_INT 24
7994: PUSH
7995: LD_INT 25
7997: PUSH
7998: LD_INT 26
8000: PUSH
8001: LD_INT 27
8003: PUSH
8004: LD_INT 28
8006: PUSH
8007: LD_INT 29
8009: PUSH
8010: LD_INT 30
8012: PUSH
8013: LD_INT 31
8015: PUSH
8016: LD_INT 32
8018: PUSH
8019: LD_INT 33
8021: PUSH
8022: LD_INT 34
8024: PUSH
8025: LD_INT 36
8027: PUSH
8028: EMPTY
8029: LIST
8030: LIST
8031: LIST
8032: LIST
8033: LIST
8034: LIST
8035: LIST
8036: LIST
8037: LIST
8038: LIST
8039: LIST
8040: LIST
8041: LIST
8042: LIST
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: LIST
8050: LIST
8051: LIST
8052: LIST
8053: LIST
8054: LIST
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: PUSH
8065: LD_INT 101
8067: PUSH
8068: LD_INT 102
8070: PUSH
8071: LD_INT 103
8073: PUSH
8074: LD_INT 104
8076: PUSH
8077: LD_INT 105
8079: PUSH
8080: LD_INT 106
8082: PUSH
8083: LD_INT 107
8085: PUSH
8086: LD_INT 108
8088: PUSH
8089: LD_INT 109
8091: PUSH
8092: LD_INT 110
8094: PUSH
8095: LD_INT 111
8097: PUSH
8098: LD_INT 112
8100: PUSH
8101: LD_INT 113
8103: PUSH
8104: LD_INT 114
8106: PUSH
8107: LD_INT 116
8109: PUSH
8110: LD_INT 117
8112: PUSH
8113: LD_INT 118
8115: PUSH
8116: EMPTY
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: LIST
8132: LIST
8133: LIST
8134: PUSH
8135: EMPTY
8136: LIST
8137: LIST
8138: ST_TO_ADDR
8139: GO 9146
8141: LD_INT 15
8143: DOUBLE
8144: EQUAL
8145: IFTRUE 8149
8147: GO 8373
8149: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8150: LD_ADDR_VAR 0 2
8154: PUSH
8155: LD_INT 1
8157: PUSH
8158: LD_INT 2
8160: PUSH
8161: LD_INT 3
8163: PUSH
8164: LD_INT 4
8166: PUSH
8167: LD_INT 5
8169: PUSH
8170: LD_INT 6
8172: PUSH
8173: LD_INT 7
8175: PUSH
8176: LD_INT 8
8178: PUSH
8179: LD_INT 9
8181: PUSH
8182: LD_INT 10
8184: PUSH
8185: LD_INT 11
8187: PUSH
8188: LD_INT 12
8190: PUSH
8191: LD_INT 13
8193: PUSH
8194: LD_INT 14
8196: PUSH
8197: LD_INT 15
8199: PUSH
8200: LD_INT 16
8202: PUSH
8203: LD_INT 17
8205: PUSH
8206: LD_INT 18
8208: PUSH
8209: LD_INT 19
8211: PUSH
8212: LD_INT 20
8214: PUSH
8215: LD_INT 21
8217: PUSH
8218: LD_INT 22
8220: PUSH
8221: LD_INT 23
8223: PUSH
8224: LD_INT 24
8226: PUSH
8227: LD_INT 25
8229: PUSH
8230: LD_INT 26
8232: PUSH
8233: LD_INT 27
8235: PUSH
8236: LD_INT 28
8238: PUSH
8239: LD_INT 29
8241: PUSH
8242: LD_INT 30
8244: PUSH
8245: LD_INT 31
8247: PUSH
8248: LD_INT 32
8250: PUSH
8251: LD_INT 33
8253: PUSH
8254: LD_INT 34
8256: PUSH
8257: LD_INT 36
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: LIST
8283: LIST
8284: LIST
8285: LIST
8286: LIST
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: PUSH
8297: LD_INT 101
8299: PUSH
8300: LD_INT 102
8302: PUSH
8303: LD_INT 103
8305: PUSH
8306: LD_INT 104
8308: PUSH
8309: LD_INT 105
8311: PUSH
8312: LD_INT 106
8314: PUSH
8315: LD_INT 107
8317: PUSH
8318: LD_INT 108
8320: PUSH
8321: LD_INT 109
8323: PUSH
8324: LD_INT 110
8326: PUSH
8327: LD_INT 111
8329: PUSH
8330: LD_INT 112
8332: PUSH
8333: LD_INT 113
8335: PUSH
8336: LD_INT 114
8338: PUSH
8339: LD_INT 116
8341: PUSH
8342: LD_INT 117
8344: PUSH
8345: LD_INT 118
8347: PUSH
8348: EMPTY
8349: LIST
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: LIST
8355: LIST
8356: LIST
8357: LIST
8358: LIST
8359: LIST
8360: LIST
8361: LIST
8362: LIST
8363: LIST
8364: LIST
8365: LIST
8366: PUSH
8367: EMPTY
8368: LIST
8369: LIST
8370: ST_TO_ADDR
8371: GO 9146
8373: LD_INT 16
8375: DOUBLE
8376: EQUAL
8377: IFTRUE 8381
8379: GO 8517
8381: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8382: LD_ADDR_VAR 0 2
8386: PUSH
8387: LD_INT 2
8389: PUSH
8390: LD_INT 4
8392: PUSH
8393: LD_INT 5
8395: PUSH
8396: LD_INT 7
8398: PUSH
8399: LD_INT 11
8401: PUSH
8402: LD_INT 12
8404: PUSH
8405: LD_INT 15
8407: PUSH
8408: LD_INT 16
8410: PUSH
8411: LD_INT 20
8413: PUSH
8414: LD_INT 21
8416: PUSH
8417: LD_INT 22
8419: PUSH
8420: LD_INT 23
8422: PUSH
8423: LD_INT 25
8425: PUSH
8426: LD_INT 26
8428: PUSH
8429: LD_INT 30
8431: PUSH
8432: LD_INT 31
8434: PUSH
8435: LD_INT 32
8437: PUSH
8438: LD_INT 33
8440: PUSH
8441: LD_INT 34
8443: PUSH
8444: EMPTY
8445: LIST
8446: LIST
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: LIST
8452: LIST
8453: LIST
8454: LIST
8455: LIST
8456: LIST
8457: LIST
8458: LIST
8459: LIST
8460: LIST
8461: LIST
8462: LIST
8463: LIST
8464: PUSH
8465: LD_INT 101
8467: PUSH
8468: LD_INT 102
8470: PUSH
8471: LD_INT 103
8473: PUSH
8474: LD_INT 106
8476: PUSH
8477: LD_INT 108
8479: PUSH
8480: LD_INT 112
8482: PUSH
8483: LD_INT 113
8485: PUSH
8486: LD_INT 114
8488: PUSH
8489: LD_INT 116
8491: PUSH
8492: LD_INT 117
8494: PUSH
8495: LD_INT 118
8497: PUSH
8498: EMPTY
8499: LIST
8500: LIST
8501: LIST
8502: LIST
8503: LIST
8504: LIST
8505: LIST
8506: LIST
8507: LIST
8508: LIST
8509: LIST
8510: PUSH
8511: EMPTY
8512: LIST
8513: LIST
8514: ST_TO_ADDR
8515: GO 9146
8517: LD_INT 17
8519: DOUBLE
8520: EQUAL
8521: IFTRUE 8525
8523: GO 8749
8525: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8526: LD_ADDR_VAR 0 2
8530: PUSH
8531: LD_INT 1
8533: PUSH
8534: LD_INT 2
8536: PUSH
8537: LD_INT 3
8539: PUSH
8540: LD_INT 4
8542: PUSH
8543: LD_INT 5
8545: PUSH
8546: LD_INT 6
8548: PUSH
8549: LD_INT 7
8551: PUSH
8552: LD_INT 8
8554: PUSH
8555: LD_INT 9
8557: PUSH
8558: LD_INT 10
8560: PUSH
8561: LD_INT 11
8563: PUSH
8564: LD_INT 12
8566: PUSH
8567: LD_INT 13
8569: PUSH
8570: LD_INT 14
8572: PUSH
8573: LD_INT 15
8575: PUSH
8576: LD_INT 16
8578: PUSH
8579: LD_INT 17
8581: PUSH
8582: LD_INT 18
8584: PUSH
8585: LD_INT 19
8587: PUSH
8588: LD_INT 20
8590: PUSH
8591: LD_INT 21
8593: PUSH
8594: LD_INT 22
8596: PUSH
8597: LD_INT 23
8599: PUSH
8600: LD_INT 24
8602: PUSH
8603: LD_INT 25
8605: PUSH
8606: LD_INT 26
8608: PUSH
8609: LD_INT 27
8611: PUSH
8612: LD_INT 28
8614: PUSH
8615: LD_INT 29
8617: PUSH
8618: LD_INT 30
8620: PUSH
8621: LD_INT 31
8623: PUSH
8624: LD_INT 32
8626: PUSH
8627: LD_INT 33
8629: PUSH
8630: LD_INT 34
8632: PUSH
8633: LD_INT 36
8635: PUSH
8636: EMPTY
8637: LIST
8638: LIST
8639: LIST
8640: LIST
8641: LIST
8642: LIST
8643: LIST
8644: LIST
8645: LIST
8646: LIST
8647: LIST
8648: LIST
8649: LIST
8650: LIST
8651: LIST
8652: LIST
8653: LIST
8654: LIST
8655: LIST
8656: LIST
8657: LIST
8658: LIST
8659: LIST
8660: LIST
8661: LIST
8662: LIST
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: PUSH
8673: LD_INT 101
8675: PUSH
8676: LD_INT 102
8678: PUSH
8679: LD_INT 103
8681: PUSH
8682: LD_INT 104
8684: PUSH
8685: LD_INT 105
8687: PUSH
8688: LD_INT 106
8690: PUSH
8691: LD_INT 107
8693: PUSH
8694: LD_INT 108
8696: PUSH
8697: LD_INT 109
8699: PUSH
8700: LD_INT 110
8702: PUSH
8703: LD_INT 111
8705: PUSH
8706: LD_INT 112
8708: PUSH
8709: LD_INT 113
8711: PUSH
8712: LD_INT 114
8714: PUSH
8715: LD_INT 116
8717: PUSH
8718: LD_INT 117
8720: PUSH
8721: LD_INT 118
8723: PUSH
8724: EMPTY
8725: LIST
8726: LIST
8727: LIST
8728: LIST
8729: LIST
8730: LIST
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: LIST
8736: LIST
8737: LIST
8738: LIST
8739: LIST
8740: LIST
8741: LIST
8742: PUSH
8743: EMPTY
8744: LIST
8745: LIST
8746: ST_TO_ADDR
8747: GO 9146
8749: LD_INT 18
8751: DOUBLE
8752: EQUAL
8753: IFTRUE 8757
8755: GO 8905
8757: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8758: LD_ADDR_VAR 0 2
8762: PUSH
8763: LD_INT 2
8765: PUSH
8766: LD_INT 4
8768: PUSH
8769: LD_INT 5
8771: PUSH
8772: LD_INT 7
8774: PUSH
8775: LD_INT 11
8777: PUSH
8778: LD_INT 12
8780: PUSH
8781: LD_INT 15
8783: PUSH
8784: LD_INT 16
8786: PUSH
8787: LD_INT 20
8789: PUSH
8790: LD_INT 21
8792: PUSH
8793: LD_INT 22
8795: PUSH
8796: LD_INT 23
8798: PUSH
8799: LD_INT 25
8801: PUSH
8802: LD_INT 26
8804: PUSH
8805: LD_INT 30
8807: PUSH
8808: LD_INT 31
8810: PUSH
8811: LD_INT 32
8813: PUSH
8814: LD_INT 33
8816: PUSH
8817: LD_INT 34
8819: PUSH
8820: LD_INT 35
8822: PUSH
8823: LD_INT 36
8825: PUSH
8826: EMPTY
8827: LIST
8828: LIST
8829: LIST
8830: LIST
8831: LIST
8832: LIST
8833: LIST
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: LIST
8841: LIST
8842: LIST
8843: LIST
8844: LIST
8845: LIST
8846: LIST
8847: LIST
8848: PUSH
8849: LD_INT 101
8851: PUSH
8852: LD_INT 102
8854: PUSH
8855: LD_INT 103
8857: PUSH
8858: LD_INT 106
8860: PUSH
8861: LD_INT 108
8863: PUSH
8864: LD_INT 112
8866: PUSH
8867: LD_INT 113
8869: PUSH
8870: LD_INT 114
8872: PUSH
8873: LD_INT 115
8875: PUSH
8876: LD_INT 116
8878: PUSH
8879: LD_INT 117
8881: PUSH
8882: LD_INT 118
8884: PUSH
8885: EMPTY
8886: LIST
8887: LIST
8888: LIST
8889: LIST
8890: LIST
8891: LIST
8892: LIST
8893: LIST
8894: LIST
8895: LIST
8896: LIST
8897: LIST
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: ST_TO_ADDR
8903: GO 9146
8905: LD_INT 19
8907: DOUBLE
8908: EQUAL
8909: IFTRUE 8913
8911: GO 9145
8913: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
8914: LD_ADDR_VAR 0 2
8918: PUSH
8919: LD_INT 1
8921: PUSH
8922: LD_INT 2
8924: PUSH
8925: LD_INT 3
8927: PUSH
8928: LD_INT 4
8930: PUSH
8931: LD_INT 5
8933: PUSH
8934: LD_INT 6
8936: PUSH
8937: LD_INT 7
8939: PUSH
8940: LD_INT 8
8942: PUSH
8943: LD_INT 9
8945: PUSH
8946: LD_INT 10
8948: PUSH
8949: LD_INT 11
8951: PUSH
8952: LD_INT 12
8954: PUSH
8955: LD_INT 13
8957: PUSH
8958: LD_INT 14
8960: PUSH
8961: LD_INT 15
8963: PUSH
8964: LD_INT 16
8966: PUSH
8967: LD_INT 17
8969: PUSH
8970: LD_INT 18
8972: PUSH
8973: LD_INT 19
8975: PUSH
8976: LD_INT 20
8978: PUSH
8979: LD_INT 21
8981: PUSH
8982: LD_INT 22
8984: PUSH
8985: LD_INT 23
8987: PUSH
8988: LD_INT 24
8990: PUSH
8991: LD_INT 25
8993: PUSH
8994: LD_INT 26
8996: PUSH
8997: LD_INT 27
8999: PUSH
9000: LD_INT 28
9002: PUSH
9003: LD_INT 29
9005: PUSH
9006: LD_INT 30
9008: PUSH
9009: LD_INT 31
9011: PUSH
9012: LD_INT 32
9014: PUSH
9015: LD_INT 33
9017: PUSH
9018: LD_INT 34
9020: PUSH
9021: LD_INT 35
9023: PUSH
9024: LD_INT 36
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: LIST
9036: LIST
9037: LIST
9038: LIST
9039: LIST
9040: LIST
9041: LIST
9042: LIST
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: LIST
9048: LIST
9049: LIST
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: PUSH
9065: LD_INT 101
9067: PUSH
9068: LD_INT 102
9070: PUSH
9071: LD_INT 103
9073: PUSH
9074: LD_INT 104
9076: PUSH
9077: LD_INT 105
9079: PUSH
9080: LD_INT 106
9082: PUSH
9083: LD_INT 107
9085: PUSH
9086: LD_INT 108
9088: PUSH
9089: LD_INT 109
9091: PUSH
9092: LD_INT 110
9094: PUSH
9095: LD_INT 111
9097: PUSH
9098: LD_INT 112
9100: PUSH
9101: LD_INT 113
9103: PUSH
9104: LD_INT 114
9106: PUSH
9107: LD_INT 115
9109: PUSH
9110: LD_INT 116
9112: PUSH
9113: LD_INT 117
9115: PUSH
9116: LD_INT 118
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: LIST
9126: LIST
9127: LIST
9128: LIST
9129: LIST
9130: LIST
9131: LIST
9132: LIST
9133: LIST
9134: LIST
9135: LIST
9136: LIST
9137: LIST
9138: PUSH
9139: EMPTY
9140: LIST
9141: LIST
9142: ST_TO_ADDR
9143: GO 9146
9145: POP
// end else
9146: GO 9377
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9148: LD_ADDR_VAR 0 2
9152: PUSH
9153: LD_INT 1
9155: PUSH
9156: LD_INT 2
9158: PUSH
9159: LD_INT 3
9161: PUSH
9162: LD_INT 4
9164: PUSH
9165: LD_INT 5
9167: PUSH
9168: LD_INT 6
9170: PUSH
9171: LD_INT 7
9173: PUSH
9174: LD_INT 8
9176: PUSH
9177: LD_INT 9
9179: PUSH
9180: LD_INT 10
9182: PUSH
9183: LD_INT 11
9185: PUSH
9186: LD_INT 12
9188: PUSH
9189: LD_INT 13
9191: PUSH
9192: LD_INT 14
9194: PUSH
9195: LD_INT 15
9197: PUSH
9198: LD_INT 16
9200: PUSH
9201: LD_INT 17
9203: PUSH
9204: LD_INT 18
9206: PUSH
9207: LD_INT 19
9209: PUSH
9210: LD_INT 20
9212: PUSH
9213: LD_INT 21
9215: PUSH
9216: LD_INT 22
9218: PUSH
9219: LD_INT 23
9221: PUSH
9222: LD_INT 24
9224: PUSH
9225: LD_INT 25
9227: PUSH
9228: LD_INT 26
9230: PUSH
9231: LD_INT 27
9233: PUSH
9234: LD_INT 28
9236: PUSH
9237: LD_INT 29
9239: PUSH
9240: LD_INT 30
9242: PUSH
9243: LD_INT 31
9245: PUSH
9246: LD_INT 32
9248: PUSH
9249: LD_INT 33
9251: PUSH
9252: LD_INT 34
9254: PUSH
9255: LD_INT 35
9257: PUSH
9258: LD_INT 36
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: LIST
9280: LIST
9281: LIST
9282: LIST
9283: LIST
9284: LIST
9285: LIST
9286: LIST
9287: LIST
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: PUSH
9299: LD_INT 101
9301: PUSH
9302: LD_INT 102
9304: PUSH
9305: LD_INT 103
9307: PUSH
9308: LD_INT 104
9310: PUSH
9311: LD_INT 105
9313: PUSH
9314: LD_INT 106
9316: PUSH
9317: LD_INT 107
9319: PUSH
9320: LD_INT 108
9322: PUSH
9323: LD_INT 109
9325: PUSH
9326: LD_INT 110
9328: PUSH
9329: LD_INT 111
9331: PUSH
9332: LD_INT 112
9334: PUSH
9335: LD_INT 113
9337: PUSH
9338: LD_INT 114
9340: PUSH
9341: LD_INT 115
9343: PUSH
9344: LD_INT 116
9346: PUSH
9347: LD_INT 117
9349: PUSH
9350: LD_INT 118
9352: PUSH
9353: EMPTY
9354: LIST
9355: LIST
9356: LIST
9357: LIST
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: PUSH
9373: EMPTY
9374: LIST
9375: LIST
9376: ST_TO_ADDR
// if result then
9377: LD_VAR 0 2
9381: IFFALSE 10167
// begin normal :=  ;
9383: LD_ADDR_VAR 0 5
9387: PUSH
9388: LD_STRING 
9390: ST_TO_ADDR
// hardcore :=  ;
9391: LD_ADDR_VAR 0 6
9395: PUSH
9396: LD_STRING 
9398: ST_TO_ADDR
// active :=  ;
9399: LD_ADDR_VAR 0 7
9403: PUSH
9404: LD_STRING 
9406: ST_TO_ADDR
// for i = 1 to normalCounter do
9407: LD_ADDR_VAR 0 8
9411: PUSH
9412: DOUBLE
9413: LD_INT 1
9415: DEC
9416: ST_TO_ADDR
9417: LD_EXP 41
9421: PUSH
9422: FOR_TO
9423: IFFALSE 9524
// begin tmp := 0 ;
9425: LD_ADDR_VAR 0 3
9429: PUSH
9430: LD_STRING 0
9432: ST_TO_ADDR
// if result [ 1 ] then
9433: LD_VAR 0 2
9437: PUSH
9438: LD_INT 1
9440: ARRAY
9441: IFFALSE 9506
// if result [ 1 ] [ 1 ] = i then
9443: LD_VAR 0 2
9447: PUSH
9448: LD_INT 1
9450: ARRAY
9451: PUSH
9452: LD_INT 1
9454: ARRAY
9455: PUSH
9456: LD_VAR 0 8
9460: EQUAL
9461: IFFALSE 9506
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9463: LD_ADDR_VAR 0 2
9467: PUSH
9468: LD_VAR 0 2
9472: PPUSH
9473: LD_INT 1
9475: PPUSH
9476: LD_VAR 0 2
9480: PUSH
9481: LD_INT 1
9483: ARRAY
9484: PPUSH
9485: LD_INT 1
9487: PPUSH
9488: CALL_OW 3
9492: PPUSH
9493: CALL_OW 1
9497: ST_TO_ADDR
// tmp := 1 ;
9498: LD_ADDR_VAR 0 3
9502: PUSH
9503: LD_STRING 1
9505: ST_TO_ADDR
// end ; normal := normal & tmp ;
9506: LD_ADDR_VAR 0 5
9510: PUSH
9511: LD_VAR 0 5
9515: PUSH
9516: LD_VAR 0 3
9520: STR
9521: ST_TO_ADDR
// end ;
9522: GO 9422
9524: POP
9525: POP
// for i = 1 to hardcoreCounter do
9526: LD_ADDR_VAR 0 8
9530: PUSH
9531: DOUBLE
9532: LD_INT 1
9534: DEC
9535: ST_TO_ADDR
9536: LD_EXP 42
9540: PUSH
9541: FOR_TO
9542: IFFALSE 9647
// begin tmp := 0 ;
9544: LD_ADDR_VAR 0 3
9548: PUSH
9549: LD_STRING 0
9551: ST_TO_ADDR
// if result [ 2 ] then
9552: LD_VAR 0 2
9556: PUSH
9557: LD_INT 2
9559: ARRAY
9560: IFFALSE 9629
// if result [ 2 ] [ 1 ] = 100 + i then
9562: LD_VAR 0 2
9566: PUSH
9567: LD_INT 2
9569: ARRAY
9570: PUSH
9571: LD_INT 1
9573: ARRAY
9574: PUSH
9575: LD_INT 100
9577: PUSH
9578: LD_VAR 0 8
9582: PLUS
9583: EQUAL
9584: IFFALSE 9629
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9586: LD_ADDR_VAR 0 2
9590: PUSH
9591: LD_VAR 0 2
9595: PPUSH
9596: LD_INT 2
9598: PPUSH
9599: LD_VAR 0 2
9603: PUSH
9604: LD_INT 2
9606: ARRAY
9607: PPUSH
9608: LD_INT 1
9610: PPUSH
9611: CALL_OW 3
9615: PPUSH
9616: CALL_OW 1
9620: ST_TO_ADDR
// tmp := 1 ;
9621: LD_ADDR_VAR 0 3
9625: PUSH
9626: LD_STRING 1
9628: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9629: LD_ADDR_VAR 0 6
9633: PUSH
9634: LD_VAR 0 6
9638: PUSH
9639: LD_VAR 0 3
9643: STR
9644: ST_TO_ADDR
// end ;
9645: GO 9541
9647: POP
9648: POP
// if isGameLoad then
9649: LD_VAR 0 1
9653: IFFALSE 10128
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9655: LD_ADDR_VAR 0 4
9659: PUSH
9660: LD_EXP 45
9664: PUSH
9665: LD_EXP 44
9669: PUSH
9670: LD_EXP 46
9674: PUSH
9675: LD_EXP 43
9679: PUSH
9680: LD_EXP 47
9684: PUSH
9685: LD_EXP 48
9689: PUSH
9690: LD_EXP 49
9694: PUSH
9695: LD_EXP 50
9699: PUSH
9700: LD_EXP 51
9704: PUSH
9705: LD_EXP 52
9709: PUSH
9710: LD_EXP 53
9714: PUSH
9715: LD_EXP 54
9719: PUSH
9720: LD_EXP 55
9724: PUSH
9725: LD_EXP 56
9729: PUSH
9730: LD_EXP 64
9734: PUSH
9735: LD_EXP 65
9739: PUSH
9740: LD_EXP 66
9744: PUSH
9745: LD_EXP 67
9749: PUSH
9750: LD_EXP 69
9754: PUSH
9755: LD_EXP 70
9759: PUSH
9760: LD_EXP 71
9764: PUSH
9765: LD_EXP 74
9769: PUSH
9770: LD_EXP 76
9774: PUSH
9775: LD_EXP 77
9779: PUSH
9780: LD_EXP 78
9784: PUSH
9785: LD_EXP 80
9789: PUSH
9790: LD_EXP 81
9794: PUSH
9795: LD_EXP 84
9799: PUSH
9800: LD_EXP 85
9804: PUSH
9805: LD_EXP 86
9809: PUSH
9810: LD_EXP 87
9814: PUSH
9815: LD_EXP 88
9819: PUSH
9820: LD_EXP 89
9824: PUSH
9825: LD_EXP 90
9829: PUSH
9830: LD_EXP 91
9834: PUSH
9835: LD_EXP 92
9839: PUSH
9840: LD_EXP 57
9844: PUSH
9845: LD_EXP 58
9849: PUSH
9850: LD_EXP 61
9854: PUSH
9855: LD_EXP 62
9859: PUSH
9860: LD_EXP 63
9864: PUSH
9865: LD_EXP 59
9869: PUSH
9870: LD_EXP 60
9874: PUSH
9875: LD_EXP 68
9879: PUSH
9880: LD_EXP 72
9884: PUSH
9885: LD_EXP 73
9889: PUSH
9890: LD_EXP 75
9894: PUSH
9895: LD_EXP 79
9899: PUSH
9900: LD_EXP 82
9904: PUSH
9905: LD_EXP 83
9909: PUSH
9910: LD_EXP 93
9914: PUSH
9915: LD_EXP 94
9919: PUSH
9920: LD_EXP 95
9924: PUSH
9925: LD_EXP 96
9929: PUSH
9930: EMPTY
9931: LIST
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: LIST
9944: LIST
9945: LIST
9946: LIST
9947: LIST
9948: LIST
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: ST_TO_ADDR
// tmp :=  ;
9986: LD_ADDR_VAR 0 3
9990: PUSH
9991: LD_STRING 
9993: ST_TO_ADDR
// for i = 1 to normalCounter do
9994: LD_ADDR_VAR 0 8
9998: PUSH
9999: DOUBLE
10000: LD_INT 1
10002: DEC
10003: ST_TO_ADDR
10004: LD_EXP 41
10008: PUSH
10009: FOR_TO
10010: IFFALSE 10046
// begin if flags [ i ] then
10012: LD_VAR 0 4
10016: PUSH
10017: LD_VAR 0 8
10021: ARRAY
10022: IFFALSE 10044
// tmp := tmp & i & ; ;
10024: LD_ADDR_VAR 0 3
10028: PUSH
10029: LD_VAR 0 3
10033: PUSH
10034: LD_VAR 0 8
10038: STR
10039: PUSH
10040: LD_STRING ;
10042: STR
10043: ST_TO_ADDR
// end ;
10044: GO 10009
10046: POP
10047: POP
// for i = 1 to hardcoreCounter do
10048: LD_ADDR_VAR 0 8
10052: PUSH
10053: DOUBLE
10054: LD_INT 1
10056: DEC
10057: ST_TO_ADDR
10058: LD_EXP 42
10062: PUSH
10063: FOR_TO
10064: IFFALSE 10110
// begin if flags [ normalCounter + i ] then
10066: LD_VAR 0 4
10070: PUSH
10071: LD_EXP 41
10075: PUSH
10076: LD_VAR 0 8
10080: PLUS
10081: ARRAY
10082: IFFALSE 10108
// tmp := tmp & ( 100 + i ) & ; ;
10084: LD_ADDR_VAR 0 3
10088: PUSH
10089: LD_VAR 0 3
10093: PUSH
10094: LD_INT 100
10096: PUSH
10097: LD_VAR 0 8
10101: PLUS
10102: STR
10103: PUSH
10104: LD_STRING ;
10106: STR
10107: ST_TO_ADDR
// end ;
10108: GO 10063
10110: POP
10111: POP
// if tmp then
10112: LD_VAR 0 3
10116: IFFALSE 10128
// active := tmp ;
10118: LD_ADDR_VAR 0 7
10122: PUSH
10123: LD_VAR 0 3
10127: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10128: LD_STRING getStreamItemsFromMission("
10130: PUSH
10131: LD_VAR 0 5
10135: STR
10136: PUSH
10137: LD_STRING ","
10139: STR
10140: PUSH
10141: LD_VAR 0 6
10145: STR
10146: PUSH
10147: LD_STRING ","
10149: STR
10150: PUSH
10151: LD_VAR 0 7
10155: STR
10156: PUSH
10157: LD_STRING ")
10159: STR
10160: PPUSH
10161: CALL_OW 559
// end else
10165: GO 10174
// ToLua ( getStreamItemsFromMission("","","") ) ;
10167: LD_STRING getStreamItemsFromMission("","","")
10169: PPUSH
10170: CALL_OW 559
// end ;
10174: LD_VAR 0 2
10178: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10179: LD_EXP 40
10183: PUSH
10184: LD_EXP 45
10188: AND
10189: IFFALSE 10313
10191: GO 10193
10193: DISABLE
10194: LD_INT 0
10196: PPUSH
10197: PPUSH
// begin enable ;
10198: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10199: LD_ADDR_VAR 0 2
10203: PUSH
10204: LD_INT 22
10206: PUSH
10207: LD_OWVAR 2
10211: PUSH
10212: EMPTY
10213: LIST
10214: LIST
10215: PUSH
10216: LD_INT 2
10218: PUSH
10219: LD_INT 34
10221: PUSH
10222: LD_INT 7
10224: PUSH
10225: EMPTY
10226: LIST
10227: LIST
10228: PUSH
10229: LD_INT 34
10231: PUSH
10232: LD_INT 45
10234: PUSH
10235: EMPTY
10236: LIST
10237: LIST
10238: PUSH
10239: LD_INT 34
10241: PUSH
10242: LD_INT 28
10244: PUSH
10245: EMPTY
10246: LIST
10247: LIST
10248: PUSH
10249: LD_INT 34
10251: PUSH
10252: LD_INT 47
10254: PUSH
10255: EMPTY
10256: LIST
10257: LIST
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: LIST
10263: LIST
10264: LIST
10265: PUSH
10266: EMPTY
10267: LIST
10268: LIST
10269: PPUSH
10270: CALL_OW 69
10274: ST_TO_ADDR
// if not tmp then
10275: LD_VAR 0 2
10279: NOT
10280: IFFALSE 10284
// exit ;
10282: GO 10313
// for i in tmp do
10284: LD_ADDR_VAR 0 1
10288: PUSH
10289: LD_VAR 0 2
10293: PUSH
10294: FOR_IN
10295: IFFALSE 10311
// begin SetLives ( i , 0 ) ;
10297: LD_VAR 0 1
10301: PPUSH
10302: LD_INT 0
10304: PPUSH
10305: CALL_OW 234
// end ;
10309: GO 10294
10311: POP
10312: POP
// end ;
10313: PPOPN 2
10315: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10316: LD_EXP 40
10320: PUSH
10321: LD_EXP 46
10325: AND
10326: IFFALSE 10410
10328: GO 10330
10330: DISABLE
10331: LD_INT 0
10333: PPUSH
10334: PPUSH
// begin enable ;
10335: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10336: LD_ADDR_VAR 0 2
10340: PUSH
10341: LD_INT 22
10343: PUSH
10344: LD_OWVAR 2
10348: PUSH
10349: EMPTY
10350: LIST
10351: LIST
10352: PUSH
10353: LD_INT 32
10355: PUSH
10356: LD_INT 3
10358: PUSH
10359: EMPTY
10360: LIST
10361: LIST
10362: PUSH
10363: EMPTY
10364: LIST
10365: LIST
10366: PPUSH
10367: CALL_OW 69
10371: ST_TO_ADDR
// if not tmp then
10372: LD_VAR 0 2
10376: NOT
10377: IFFALSE 10381
// exit ;
10379: GO 10410
// for i in tmp do
10381: LD_ADDR_VAR 0 1
10385: PUSH
10386: LD_VAR 0 2
10390: PUSH
10391: FOR_IN
10392: IFFALSE 10408
// begin SetLives ( i , 0 ) ;
10394: LD_VAR 0 1
10398: PPUSH
10399: LD_INT 0
10401: PPUSH
10402: CALL_OW 234
// end ;
10406: GO 10391
10408: POP
10409: POP
// end ;
10410: PPOPN 2
10412: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10413: LD_EXP 40
10417: PUSH
10418: LD_EXP 43
10422: AND
10423: IFFALSE 10516
10425: GO 10427
10427: DISABLE
10428: LD_INT 0
10430: PPUSH
// begin enable ;
10431: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10432: LD_ADDR_VAR 0 1
10436: PUSH
10437: LD_INT 22
10439: PUSH
10440: LD_OWVAR 2
10444: PUSH
10445: EMPTY
10446: LIST
10447: LIST
10448: PUSH
10449: LD_INT 2
10451: PUSH
10452: LD_INT 25
10454: PUSH
10455: LD_INT 5
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 25
10464: PUSH
10465: LD_INT 9
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 25
10474: PUSH
10475: LD_INT 8
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: LIST
10486: LIST
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PPUSH
10492: CALL_OW 69
10496: PUSH
10497: FOR_IN
10498: IFFALSE 10514
// begin SetClass ( i , 1 ) ;
10500: LD_VAR 0 1
10504: PPUSH
10505: LD_INT 1
10507: PPUSH
10508: CALL_OW 336
// end ;
10512: GO 10497
10514: POP
10515: POP
// end ;
10516: PPOPN 1
10518: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10519: LD_EXP 40
10523: PUSH
10524: LD_EXP 44
10528: AND
10529: PUSH
10530: LD_OWVAR 65
10534: PUSH
10535: LD_INT 7
10537: LESS
10538: AND
10539: IFFALSE 10553
10541: GO 10543
10543: DISABLE
// begin enable ;
10544: ENABLE
// game_speed := 7 ;
10545: LD_ADDR_OWVAR 65
10549: PUSH
10550: LD_INT 7
10552: ST_TO_ADDR
// end ;
10553: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10554: LD_EXP 40
10558: PUSH
10559: LD_EXP 47
10563: AND
10564: IFFALSE 10766
10566: GO 10568
10568: DISABLE
10569: LD_INT 0
10571: PPUSH
10572: PPUSH
10573: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10574: LD_ADDR_VAR 0 3
10578: PUSH
10579: LD_INT 81
10581: PUSH
10582: LD_OWVAR 2
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: PUSH
10591: LD_INT 21
10593: PUSH
10594: LD_INT 1
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: PPUSH
10605: CALL_OW 69
10609: ST_TO_ADDR
// if not tmp then
10610: LD_VAR 0 3
10614: NOT
10615: IFFALSE 10619
// exit ;
10617: GO 10766
// if tmp > 5 then
10619: LD_VAR 0 3
10623: PUSH
10624: LD_INT 5
10626: GREATER
10627: IFFALSE 10639
// k := 5 else
10629: LD_ADDR_VAR 0 2
10633: PUSH
10634: LD_INT 5
10636: ST_TO_ADDR
10637: GO 10649
// k := tmp ;
10639: LD_ADDR_VAR 0 2
10643: PUSH
10644: LD_VAR 0 3
10648: ST_TO_ADDR
// for i := 1 to k do
10649: LD_ADDR_VAR 0 1
10653: PUSH
10654: DOUBLE
10655: LD_INT 1
10657: DEC
10658: ST_TO_ADDR
10659: LD_VAR 0 2
10663: PUSH
10664: FOR_TO
10665: IFFALSE 10764
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10667: LD_VAR 0 3
10671: PUSH
10672: LD_VAR 0 1
10676: ARRAY
10677: PPUSH
10678: LD_VAR 0 1
10682: PUSH
10683: LD_INT 4
10685: MOD
10686: PUSH
10687: LD_INT 1
10689: PLUS
10690: PPUSH
10691: CALL_OW 259
10695: PUSH
10696: LD_INT 10
10698: LESS
10699: IFFALSE 10762
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10701: LD_VAR 0 3
10705: PUSH
10706: LD_VAR 0 1
10710: ARRAY
10711: PPUSH
10712: LD_VAR 0 1
10716: PUSH
10717: LD_INT 4
10719: MOD
10720: PUSH
10721: LD_INT 1
10723: PLUS
10724: PPUSH
10725: LD_VAR 0 3
10729: PUSH
10730: LD_VAR 0 1
10734: ARRAY
10735: PPUSH
10736: LD_VAR 0 1
10740: PUSH
10741: LD_INT 4
10743: MOD
10744: PUSH
10745: LD_INT 1
10747: PLUS
10748: PPUSH
10749: CALL_OW 259
10753: PUSH
10754: LD_INT 1
10756: PLUS
10757: PPUSH
10758: CALL_OW 237
10762: GO 10664
10764: POP
10765: POP
// end ;
10766: PPOPN 3
10768: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10769: LD_EXP 40
10773: PUSH
10774: LD_EXP 48
10778: AND
10779: IFFALSE 10799
10781: GO 10783
10783: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10784: LD_INT 4
10786: PPUSH
10787: LD_OWVAR 2
10791: PPUSH
10792: LD_INT 0
10794: PPUSH
10795: CALL_OW 324
10799: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10800: LD_EXP 40
10804: PUSH
10805: LD_EXP 77
10809: AND
10810: IFFALSE 10830
10812: GO 10814
10814: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10815: LD_INT 19
10817: PPUSH
10818: LD_OWVAR 2
10822: PPUSH
10823: LD_INT 0
10825: PPUSH
10826: CALL_OW 324
10830: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10831: LD_EXP 40
10835: PUSH
10836: LD_EXP 49
10840: AND
10841: IFFALSE 10943
10843: GO 10845
10845: DISABLE
10846: LD_INT 0
10848: PPUSH
10849: PPUSH
// begin enable ;
10850: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10851: LD_ADDR_VAR 0 2
10855: PUSH
10856: LD_INT 22
10858: PUSH
10859: LD_OWVAR 2
10863: PUSH
10864: EMPTY
10865: LIST
10866: LIST
10867: PUSH
10868: LD_INT 2
10870: PUSH
10871: LD_INT 34
10873: PUSH
10874: LD_INT 11
10876: PUSH
10877: EMPTY
10878: LIST
10879: LIST
10880: PUSH
10881: LD_INT 34
10883: PUSH
10884: LD_INT 30
10886: PUSH
10887: EMPTY
10888: LIST
10889: LIST
10890: PUSH
10891: EMPTY
10892: LIST
10893: LIST
10894: LIST
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: PPUSH
10900: CALL_OW 69
10904: ST_TO_ADDR
// if not tmp then
10905: LD_VAR 0 2
10909: NOT
10910: IFFALSE 10914
// exit ;
10912: GO 10943
// for i in tmp do
10914: LD_ADDR_VAR 0 1
10918: PUSH
10919: LD_VAR 0 2
10923: PUSH
10924: FOR_IN
10925: IFFALSE 10941
// begin SetLives ( i , 0 ) ;
10927: LD_VAR 0 1
10931: PPUSH
10932: LD_INT 0
10934: PPUSH
10935: CALL_OW 234
// end ;
10939: GO 10924
10941: POP
10942: POP
// end ;
10943: PPOPN 2
10945: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10946: LD_EXP 40
10950: PUSH
10951: LD_EXP 50
10955: AND
10956: IFFALSE 10976
10958: GO 10960
10960: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10961: LD_INT 32
10963: PPUSH
10964: LD_OWVAR 2
10968: PPUSH
10969: LD_INT 0
10971: PPUSH
10972: CALL_OW 324
10976: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10977: LD_EXP 40
10981: PUSH
10982: LD_EXP 51
10986: AND
10987: IFFALSE 11168
10989: GO 10991
10991: DISABLE
10992: LD_INT 0
10994: PPUSH
10995: PPUSH
10996: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10997: LD_ADDR_VAR 0 2
11001: PUSH
11002: LD_INT 22
11004: PUSH
11005: LD_OWVAR 2
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: PUSH
11014: LD_INT 33
11016: PUSH
11017: LD_INT 3
11019: PUSH
11020: EMPTY
11021: LIST
11022: LIST
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: PPUSH
11028: CALL_OW 69
11032: ST_TO_ADDR
// if not tmp then
11033: LD_VAR 0 2
11037: NOT
11038: IFFALSE 11042
// exit ;
11040: GO 11168
// side := 0 ;
11042: LD_ADDR_VAR 0 3
11046: PUSH
11047: LD_INT 0
11049: ST_TO_ADDR
// for i := 1 to 8 do
11050: LD_ADDR_VAR 0 1
11054: PUSH
11055: DOUBLE
11056: LD_INT 1
11058: DEC
11059: ST_TO_ADDR
11060: LD_INT 8
11062: PUSH
11063: FOR_TO
11064: IFFALSE 11112
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11066: LD_OWVAR 2
11070: PUSH
11071: LD_VAR 0 1
11075: NONEQUAL
11076: PUSH
11077: LD_OWVAR 2
11081: PPUSH
11082: LD_VAR 0 1
11086: PPUSH
11087: CALL_OW 81
11091: PUSH
11092: LD_INT 2
11094: EQUAL
11095: AND
11096: IFFALSE 11110
// begin side := i ;
11098: LD_ADDR_VAR 0 3
11102: PUSH
11103: LD_VAR 0 1
11107: ST_TO_ADDR
// break ;
11108: GO 11112
// end ;
11110: GO 11063
11112: POP
11113: POP
// if not side then
11114: LD_VAR 0 3
11118: NOT
11119: IFFALSE 11123
// exit ;
11121: GO 11168
// for i := 1 to tmp do
11123: LD_ADDR_VAR 0 1
11127: PUSH
11128: DOUBLE
11129: LD_INT 1
11131: DEC
11132: ST_TO_ADDR
11133: LD_VAR 0 2
11137: PUSH
11138: FOR_TO
11139: IFFALSE 11166
// if Prob ( 60 ) then
11141: LD_INT 60
11143: PPUSH
11144: CALL_OW 13
11148: IFFALSE 11164
// SetSide ( i , side ) ;
11150: LD_VAR 0 1
11154: PPUSH
11155: LD_VAR 0 3
11159: PPUSH
11160: CALL_OW 235
11164: GO 11138
11166: POP
11167: POP
// end ;
11168: PPOPN 3
11170: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11171: LD_EXP 40
11175: PUSH
11176: LD_EXP 53
11180: AND
11181: IFFALSE 11300
11183: GO 11185
11185: DISABLE
11186: LD_INT 0
11188: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11189: LD_ADDR_VAR 0 1
11193: PUSH
11194: LD_INT 22
11196: PUSH
11197: LD_OWVAR 2
11201: PUSH
11202: EMPTY
11203: LIST
11204: LIST
11205: PUSH
11206: LD_INT 21
11208: PUSH
11209: LD_INT 1
11211: PUSH
11212: EMPTY
11213: LIST
11214: LIST
11215: PUSH
11216: LD_INT 3
11218: PUSH
11219: LD_INT 23
11221: PUSH
11222: LD_INT 0
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: LIST
11237: PPUSH
11238: CALL_OW 69
11242: PUSH
11243: FOR_IN
11244: IFFALSE 11298
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11246: LD_VAR 0 1
11250: PPUSH
11251: CALL_OW 257
11255: PUSH
11256: LD_INT 1
11258: PUSH
11259: LD_INT 2
11261: PUSH
11262: LD_INT 3
11264: PUSH
11265: LD_INT 4
11267: PUSH
11268: EMPTY
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: IN
11274: IFFALSE 11296
// SetClass ( un , rand ( 1 , 4 ) ) ;
11276: LD_VAR 0 1
11280: PPUSH
11281: LD_INT 1
11283: PPUSH
11284: LD_INT 4
11286: PPUSH
11287: CALL_OW 12
11291: PPUSH
11292: CALL_OW 336
11296: GO 11243
11298: POP
11299: POP
// end ;
11300: PPOPN 1
11302: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11303: LD_EXP 40
11307: PUSH
11308: LD_EXP 52
11312: AND
11313: IFFALSE 11392
11315: GO 11317
11317: DISABLE
11318: LD_INT 0
11320: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11321: LD_ADDR_VAR 0 1
11325: PUSH
11326: LD_INT 22
11328: PUSH
11329: LD_OWVAR 2
11333: PUSH
11334: EMPTY
11335: LIST
11336: LIST
11337: PUSH
11338: LD_INT 21
11340: PUSH
11341: LD_INT 3
11343: PUSH
11344: EMPTY
11345: LIST
11346: LIST
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: PPUSH
11352: CALL_OW 69
11356: ST_TO_ADDR
// if not tmp then
11357: LD_VAR 0 1
11361: NOT
11362: IFFALSE 11366
// exit ;
11364: GO 11392
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11366: LD_VAR 0 1
11370: PUSH
11371: LD_INT 1
11373: PPUSH
11374: LD_VAR 0 1
11378: PPUSH
11379: CALL_OW 12
11383: ARRAY
11384: PPUSH
11385: LD_INT 100
11387: PPUSH
11388: CALL_OW 234
// end ;
11392: PPOPN 1
11394: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11395: LD_EXP 40
11399: PUSH
11400: LD_EXP 54
11404: AND
11405: IFFALSE 11503
11407: GO 11409
11409: DISABLE
11410: LD_INT 0
11412: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11413: LD_ADDR_VAR 0 1
11417: PUSH
11418: LD_INT 22
11420: PUSH
11421: LD_OWVAR 2
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: PUSH
11430: LD_INT 21
11432: PUSH
11433: LD_INT 1
11435: PUSH
11436: EMPTY
11437: LIST
11438: LIST
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: PPUSH
11444: CALL_OW 69
11448: ST_TO_ADDR
// if not tmp then
11449: LD_VAR 0 1
11453: NOT
11454: IFFALSE 11458
// exit ;
11456: GO 11503
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11458: LD_VAR 0 1
11462: PUSH
11463: LD_INT 1
11465: PPUSH
11466: LD_VAR 0 1
11470: PPUSH
11471: CALL_OW 12
11475: ARRAY
11476: PPUSH
11477: LD_INT 1
11479: PPUSH
11480: LD_INT 4
11482: PPUSH
11483: CALL_OW 12
11487: PPUSH
11488: LD_INT 3000
11490: PPUSH
11491: LD_INT 9000
11493: PPUSH
11494: CALL_OW 12
11498: PPUSH
11499: CALL_OW 492
// end ;
11503: PPOPN 1
11505: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11506: LD_EXP 40
11510: PUSH
11511: LD_EXP 55
11515: AND
11516: IFFALSE 11536
11518: GO 11520
11520: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11521: LD_INT 1
11523: PPUSH
11524: LD_OWVAR 2
11528: PPUSH
11529: LD_INT 0
11531: PPUSH
11532: CALL_OW 324
11536: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11537: LD_EXP 40
11541: PUSH
11542: LD_EXP 56
11546: AND
11547: IFFALSE 11630
11549: GO 11551
11551: DISABLE
11552: LD_INT 0
11554: PPUSH
11555: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11556: LD_ADDR_VAR 0 2
11560: PUSH
11561: LD_INT 22
11563: PUSH
11564: LD_OWVAR 2
11568: PUSH
11569: EMPTY
11570: LIST
11571: LIST
11572: PUSH
11573: LD_INT 21
11575: PUSH
11576: LD_INT 3
11578: PUSH
11579: EMPTY
11580: LIST
11581: LIST
11582: PUSH
11583: EMPTY
11584: LIST
11585: LIST
11586: PPUSH
11587: CALL_OW 69
11591: ST_TO_ADDR
// if not tmp then
11592: LD_VAR 0 2
11596: NOT
11597: IFFALSE 11601
// exit ;
11599: GO 11630
// for i in tmp do
11601: LD_ADDR_VAR 0 1
11605: PUSH
11606: LD_VAR 0 2
11610: PUSH
11611: FOR_IN
11612: IFFALSE 11628
// SetBLevel ( i , 10 ) ;
11614: LD_VAR 0 1
11618: PPUSH
11619: LD_INT 10
11621: PPUSH
11622: CALL_OW 241
11626: GO 11611
11628: POP
11629: POP
// end ;
11630: PPOPN 2
11632: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11633: LD_EXP 40
11637: PUSH
11638: LD_EXP 57
11642: AND
11643: IFFALSE 11754
11645: GO 11647
11647: DISABLE
11648: LD_INT 0
11650: PPUSH
11651: PPUSH
11652: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11653: LD_ADDR_VAR 0 3
11657: PUSH
11658: LD_INT 22
11660: PUSH
11661: LD_OWVAR 2
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: PUSH
11670: LD_INT 25
11672: PUSH
11673: LD_INT 1
11675: PUSH
11676: EMPTY
11677: LIST
11678: LIST
11679: PUSH
11680: EMPTY
11681: LIST
11682: LIST
11683: PPUSH
11684: CALL_OW 69
11688: ST_TO_ADDR
// if not tmp then
11689: LD_VAR 0 3
11693: NOT
11694: IFFALSE 11698
// exit ;
11696: GO 11754
// un := tmp [ rand ( 1 , tmp ) ] ;
11698: LD_ADDR_VAR 0 2
11702: PUSH
11703: LD_VAR 0 3
11707: PUSH
11708: LD_INT 1
11710: PPUSH
11711: LD_VAR 0 3
11715: PPUSH
11716: CALL_OW 12
11720: ARRAY
11721: ST_TO_ADDR
// if Crawls ( un ) then
11722: LD_VAR 0 2
11726: PPUSH
11727: CALL_OW 318
11731: IFFALSE 11742
// ComWalk ( un ) ;
11733: LD_VAR 0 2
11737: PPUSH
11738: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11742: LD_VAR 0 2
11746: PPUSH
11747: LD_INT 5
11749: PPUSH
11750: CALL_OW 336
// end ;
11754: PPOPN 3
11756: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11757: LD_EXP 40
11761: PUSH
11762: LD_EXP 58
11766: AND
11767: PUSH
11768: LD_OWVAR 67
11772: PUSH
11773: LD_INT 4
11775: LESS
11776: AND
11777: IFFALSE 11796
11779: GO 11781
11781: DISABLE
// begin Difficulty := Difficulty + 1 ;
11782: LD_ADDR_OWVAR 67
11786: PUSH
11787: LD_OWVAR 67
11791: PUSH
11792: LD_INT 1
11794: PLUS
11795: ST_TO_ADDR
// end ;
11796: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11797: LD_EXP 40
11801: PUSH
11802: LD_EXP 59
11806: AND
11807: IFFALSE 11910
11809: GO 11811
11811: DISABLE
11812: LD_INT 0
11814: PPUSH
// begin for i := 1 to 5 do
11815: LD_ADDR_VAR 0 1
11819: PUSH
11820: DOUBLE
11821: LD_INT 1
11823: DEC
11824: ST_TO_ADDR
11825: LD_INT 5
11827: PUSH
11828: FOR_TO
11829: IFFALSE 11908
// begin uc_nation := nation_nature ;
11831: LD_ADDR_OWVAR 21
11835: PUSH
11836: LD_INT 0
11838: ST_TO_ADDR
// uc_side := 0 ;
11839: LD_ADDR_OWVAR 20
11843: PUSH
11844: LD_INT 0
11846: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11847: LD_ADDR_OWVAR 29
11851: PUSH
11852: LD_INT 12
11854: PUSH
11855: LD_INT 12
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: ST_TO_ADDR
// hc_agressivity := 20 ;
11862: LD_ADDR_OWVAR 35
11866: PUSH
11867: LD_INT 20
11869: ST_TO_ADDR
// hc_class := class_tiger ;
11870: LD_ADDR_OWVAR 28
11874: PUSH
11875: LD_INT 14
11877: ST_TO_ADDR
// hc_gallery :=  ;
11878: LD_ADDR_OWVAR 33
11882: PUSH
11883: LD_STRING 
11885: ST_TO_ADDR
// hc_name :=  ;
11886: LD_ADDR_OWVAR 26
11890: PUSH
11891: LD_STRING 
11893: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11894: CALL_OW 44
11898: PPUSH
11899: LD_INT 0
11901: PPUSH
11902: CALL_OW 51
// end ;
11906: GO 11828
11908: POP
11909: POP
// end ;
11910: PPOPN 1
11912: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11913: LD_EXP 40
11917: PUSH
11918: LD_EXP 60
11922: AND
11923: IFFALSE 11932
11925: GO 11927
11927: DISABLE
// StreamSibBomb ;
11928: CALL 11933 0 0
11932: END
// export function StreamSibBomb ; var i , x , y ; begin
11933: LD_INT 0
11935: PPUSH
11936: PPUSH
11937: PPUSH
11938: PPUSH
// result := false ;
11939: LD_ADDR_VAR 0 1
11943: PUSH
11944: LD_INT 0
11946: ST_TO_ADDR
// for i := 1 to 16 do
11947: LD_ADDR_VAR 0 2
11951: PUSH
11952: DOUBLE
11953: LD_INT 1
11955: DEC
11956: ST_TO_ADDR
11957: LD_INT 16
11959: PUSH
11960: FOR_TO
11961: IFFALSE 12160
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11963: LD_ADDR_VAR 0 3
11967: PUSH
11968: LD_INT 10
11970: PUSH
11971: LD_INT 20
11973: PUSH
11974: LD_INT 30
11976: PUSH
11977: LD_INT 40
11979: PUSH
11980: LD_INT 50
11982: PUSH
11983: LD_INT 60
11985: PUSH
11986: LD_INT 70
11988: PUSH
11989: LD_INT 80
11991: PUSH
11992: LD_INT 90
11994: PUSH
11995: LD_INT 100
11997: PUSH
11998: LD_INT 110
12000: PUSH
12001: LD_INT 120
12003: PUSH
12004: LD_INT 130
12006: PUSH
12007: LD_INT 140
12009: PUSH
12010: LD_INT 150
12012: PUSH
12013: EMPTY
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: PUSH
12030: LD_INT 1
12032: PPUSH
12033: LD_INT 15
12035: PPUSH
12036: CALL_OW 12
12040: ARRAY
12041: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12042: LD_ADDR_VAR 0 4
12046: PUSH
12047: LD_INT 10
12049: PUSH
12050: LD_INT 20
12052: PUSH
12053: LD_INT 30
12055: PUSH
12056: LD_INT 40
12058: PUSH
12059: LD_INT 50
12061: PUSH
12062: LD_INT 60
12064: PUSH
12065: LD_INT 70
12067: PUSH
12068: LD_INT 80
12070: PUSH
12071: LD_INT 90
12073: PUSH
12074: LD_INT 100
12076: PUSH
12077: LD_INT 110
12079: PUSH
12080: LD_INT 120
12082: PUSH
12083: LD_INT 130
12085: PUSH
12086: LD_INT 140
12088: PUSH
12089: LD_INT 150
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: PUSH
12109: LD_INT 1
12111: PPUSH
12112: LD_INT 15
12114: PPUSH
12115: CALL_OW 12
12119: ARRAY
12120: ST_TO_ADDR
// if ValidHex ( x , y ) then
12121: LD_VAR 0 3
12125: PPUSH
12126: LD_VAR 0 4
12130: PPUSH
12131: CALL_OW 488
12135: IFFALSE 12158
// begin result := [ x , y ] ;
12137: LD_ADDR_VAR 0 1
12141: PUSH
12142: LD_VAR 0 3
12146: PUSH
12147: LD_VAR 0 4
12151: PUSH
12152: EMPTY
12153: LIST
12154: LIST
12155: ST_TO_ADDR
// break ;
12156: GO 12160
// end ; end ;
12158: GO 11960
12160: POP
12161: POP
// if result then
12162: LD_VAR 0 1
12166: IFFALSE 12226
// begin ToLua ( playSibBomb() ) ;
12168: LD_STRING playSibBomb()
12170: PPUSH
12171: CALL_OW 559
// wait ( 0 0$14 ) ;
12175: LD_INT 490
12177: PPUSH
12178: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12182: LD_VAR 0 1
12186: PUSH
12187: LD_INT 1
12189: ARRAY
12190: PPUSH
12191: LD_VAR 0 1
12195: PUSH
12196: LD_INT 2
12198: ARRAY
12199: PPUSH
12200: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12204: LD_VAR 0 1
12208: PUSH
12209: LD_INT 1
12211: ARRAY
12212: PPUSH
12213: LD_VAR 0 1
12217: PUSH
12218: LD_INT 2
12220: ARRAY
12221: PPUSH
12222: CALL_OW 429
// end ; end ;
12226: LD_VAR 0 1
12230: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12231: LD_EXP 40
12235: PUSH
12236: LD_EXP 62
12240: AND
12241: IFFALSE 12253
12243: GO 12245
12245: DISABLE
// YouLost (  ) ;
12246: LD_STRING 
12248: PPUSH
12249: CALL_OW 104
12253: END
// every 0 0$1 trigger StreamModeActive and sFog do
12254: LD_EXP 40
12258: PUSH
12259: LD_EXP 61
12263: AND
12264: IFFALSE 12278
12266: GO 12268
12268: DISABLE
// FogOff ( your_side ) ;
12269: LD_OWVAR 2
12273: PPUSH
12274: CALL_OW 344
12278: END
// every 0 0$1 trigger StreamModeActive and sSun do
12279: LD_EXP 40
12283: PUSH
12284: LD_EXP 63
12288: AND
12289: IFFALSE 12317
12291: GO 12293
12293: DISABLE
// begin solar_recharge_percent := 0 ;
12294: LD_ADDR_OWVAR 79
12298: PUSH
12299: LD_INT 0
12301: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12302: LD_INT 10500
12304: PPUSH
12305: CALL_OW 67
// solar_recharge_percent := 100 ;
12309: LD_ADDR_OWVAR 79
12313: PUSH
12314: LD_INT 100
12316: ST_TO_ADDR
// end ;
12317: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12318: LD_EXP 40
12322: PUSH
12323: LD_EXP 64
12327: AND
12328: IFFALSE 12567
12330: GO 12332
12332: DISABLE
12333: LD_INT 0
12335: PPUSH
12336: PPUSH
12337: PPUSH
// begin tmp := [ ] ;
12338: LD_ADDR_VAR 0 3
12342: PUSH
12343: EMPTY
12344: ST_TO_ADDR
// for i := 1 to 6 do
12345: LD_ADDR_VAR 0 1
12349: PUSH
12350: DOUBLE
12351: LD_INT 1
12353: DEC
12354: ST_TO_ADDR
12355: LD_INT 6
12357: PUSH
12358: FOR_TO
12359: IFFALSE 12464
// begin uc_nation := nation_nature ;
12361: LD_ADDR_OWVAR 21
12365: PUSH
12366: LD_INT 0
12368: ST_TO_ADDR
// uc_side := 0 ;
12369: LD_ADDR_OWVAR 20
12373: PUSH
12374: LD_INT 0
12376: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12377: LD_ADDR_OWVAR 29
12381: PUSH
12382: LD_INT 12
12384: PUSH
12385: LD_INT 12
12387: PUSH
12388: EMPTY
12389: LIST
12390: LIST
12391: ST_TO_ADDR
// hc_agressivity := 20 ;
12392: LD_ADDR_OWVAR 35
12396: PUSH
12397: LD_INT 20
12399: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12400: LD_ADDR_OWVAR 28
12404: PUSH
12405: LD_INT 17
12407: ST_TO_ADDR
// hc_gallery :=  ;
12408: LD_ADDR_OWVAR 33
12412: PUSH
12413: LD_STRING 
12415: ST_TO_ADDR
// hc_name :=  ;
12416: LD_ADDR_OWVAR 26
12420: PUSH
12421: LD_STRING 
12423: ST_TO_ADDR
// un := CreateHuman ;
12424: LD_ADDR_VAR 0 2
12428: PUSH
12429: CALL_OW 44
12433: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12434: LD_VAR 0 2
12438: PPUSH
12439: LD_INT 1
12441: PPUSH
12442: CALL_OW 51
// tmp := tmp ^ un ;
12446: LD_ADDR_VAR 0 3
12450: PUSH
12451: LD_VAR 0 3
12455: PUSH
12456: LD_VAR 0 2
12460: ADD
12461: ST_TO_ADDR
// end ;
12462: GO 12358
12464: POP
12465: POP
// repeat wait ( 0 0$1 ) ;
12466: LD_INT 35
12468: PPUSH
12469: CALL_OW 67
// for un in tmp do
12473: LD_ADDR_VAR 0 2
12477: PUSH
12478: LD_VAR 0 3
12482: PUSH
12483: FOR_IN
12484: IFFALSE 12558
// begin if IsDead ( un ) then
12486: LD_VAR 0 2
12490: PPUSH
12491: CALL_OW 301
12495: IFFALSE 12515
// begin tmp := tmp diff un ;
12497: LD_ADDR_VAR 0 3
12501: PUSH
12502: LD_VAR 0 3
12506: PUSH
12507: LD_VAR 0 2
12511: DIFF
12512: ST_TO_ADDR
// continue ;
12513: GO 12483
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12515: LD_VAR 0 2
12519: PPUSH
12520: LD_INT 3
12522: PUSH
12523: LD_INT 22
12525: PUSH
12526: LD_INT 0
12528: PUSH
12529: EMPTY
12530: LIST
12531: LIST
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PPUSH
12537: CALL_OW 69
12541: PPUSH
12542: LD_VAR 0 2
12546: PPUSH
12547: CALL_OW 74
12551: PPUSH
12552: CALL_OW 115
// end ;
12556: GO 12483
12558: POP
12559: POP
// until not tmp ;
12560: LD_VAR 0 3
12564: NOT
12565: IFFALSE 12466
// end ;
12567: PPOPN 3
12569: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12570: LD_EXP 40
12574: PUSH
12575: LD_EXP 65
12579: AND
12580: IFFALSE 12634
12582: GO 12584
12584: DISABLE
// begin ToLua ( displayTroll(); ) ;
12585: LD_STRING displayTroll();
12587: PPUSH
12588: CALL_OW 559
// wait ( 3 3$00 ) ;
12592: LD_INT 6300
12594: PPUSH
12595: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12599: LD_STRING hideTroll();
12601: PPUSH
12602: CALL_OW 559
// wait ( 1 1$00 ) ;
12606: LD_INT 2100
12608: PPUSH
12609: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12613: LD_STRING displayTroll();
12615: PPUSH
12616: CALL_OW 559
// wait ( 1 1$00 ) ;
12620: LD_INT 2100
12622: PPUSH
12623: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12627: LD_STRING hideTroll();
12629: PPUSH
12630: CALL_OW 559
// end ;
12634: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12635: LD_EXP 40
12639: PUSH
12640: LD_EXP 66
12644: AND
12645: IFFALSE 12708
12647: GO 12649
12649: DISABLE
12650: LD_INT 0
12652: PPUSH
// begin p := 0 ;
12653: LD_ADDR_VAR 0 1
12657: PUSH
12658: LD_INT 0
12660: ST_TO_ADDR
// repeat game_speed := 1 ;
12661: LD_ADDR_OWVAR 65
12665: PUSH
12666: LD_INT 1
12668: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12669: LD_INT 35
12671: PPUSH
12672: CALL_OW 67
// p := p + 1 ;
12676: LD_ADDR_VAR 0 1
12680: PUSH
12681: LD_VAR 0 1
12685: PUSH
12686: LD_INT 1
12688: PLUS
12689: ST_TO_ADDR
// until p >= 60 ;
12690: LD_VAR 0 1
12694: PUSH
12695: LD_INT 60
12697: GREATEREQUAL
12698: IFFALSE 12661
// game_speed := 4 ;
12700: LD_ADDR_OWVAR 65
12704: PUSH
12705: LD_INT 4
12707: ST_TO_ADDR
// end ;
12708: PPOPN 1
12710: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12711: LD_EXP 40
12715: PUSH
12716: LD_EXP 67
12720: AND
12721: IFFALSE 12867
12723: GO 12725
12725: DISABLE
12726: LD_INT 0
12728: PPUSH
12729: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12730: LD_ADDR_VAR 0 1
12734: PUSH
12735: LD_INT 22
12737: PUSH
12738: LD_OWVAR 2
12742: PUSH
12743: EMPTY
12744: LIST
12745: LIST
12746: PUSH
12747: LD_INT 2
12749: PUSH
12750: LD_INT 30
12752: PUSH
12753: LD_INT 0
12755: PUSH
12756: EMPTY
12757: LIST
12758: LIST
12759: PUSH
12760: LD_INT 30
12762: PUSH
12763: LD_INT 1
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: LIST
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PPUSH
12779: CALL_OW 69
12783: ST_TO_ADDR
// if not depot then
12784: LD_VAR 0 1
12788: NOT
12789: IFFALSE 12793
// exit ;
12791: GO 12867
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12793: LD_ADDR_VAR 0 2
12797: PUSH
12798: LD_VAR 0 1
12802: PUSH
12803: LD_INT 1
12805: PPUSH
12806: LD_VAR 0 1
12810: PPUSH
12811: CALL_OW 12
12815: ARRAY
12816: PPUSH
12817: CALL_OW 274
12821: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12822: LD_VAR 0 2
12826: PPUSH
12827: LD_INT 1
12829: PPUSH
12830: LD_INT 0
12832: PPUSH
12833: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12837: LD_VAR 0 2
12841: PPUSH
12842: LD_INT 2
12844: PPUSH
12845: LD_INT 0
12847: PPUSH
12848: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12852: LD_VAR 0 2
12856: PPUSH
12857: LD_INT 3
12859: PPUSH
12860: LD_INT 0
12862: PPUSH
12863: CALL_OW 277
// end ;
12867: PPOPN 2
12869: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12870: LD_EXP 40
12874: PUSH
12875: LD_EXP 68
12879: AND
12880: IFFALSE 12977
12882: GO 12884
12884: DISABLE
12885: LD_INT 0
12887: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12888: LD_ADDR_VAR 0 1
12892: PUSH
12893: LD_INT 22
12895: PUSH
12896: LD_OWVAR 2
12900: PUSH
12901: EMPTY
12902: LIST
12903: LIST
12904: PUSH
12905: LD_INT 21
12907: PUSH
12908: LD_INT 1
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: PUSH
12915: LD_INT 3
12917: PUSH
12918: LD_INT 23
12920: PUSH
12921: LD_INT 0
12923: PUSH
12924: EMPTY
12925: LIST
12926: LIST
12927: PUSH
12928: EMPTY
12929: LIST
12930: LIST
12931: PUSH
12932: EMPTY
12933: LIST
12934: LIST
12935: LIST
12936: PPUSH
12937: CALL_OW 69
12941: ST_TO_ADDR
// if not tmp then
12942: LD_VAR 0 1
12946: NOT
12947: IFFALSE 12951
// exit ;
12949: GO 12977
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12951: LD_VAR 0 1
12955: PUSH
12956: LD_INT 1
12958: PPUSH
12959: LD_VAR 0 1
12963: PPUSH
12964: CALL_OW 12
12968: ARRAY
12969: PPUSH
12970: LD_INT 200
12972: PPUSH
12973: CALL_OW 234
// end ;
12977: PPOPN 1
12979: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12980: LD_EXP 40
12984: PUSH
12985: LD_EXP 69
12989: AND
12990: IFFALSE 13069
12992: GO 12994
12994: DISABLE
12995: LD_INT 0
12997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12998: LD_ADDR_VAR 0 1
13002: PUSH
13003: LD_INT 22
13005: PUSH
13006: LD_OWVAR 2
13010: PUSH
13011: EMPTY
13012: LIST
13013: LIST
13014: PUSH
13015: LD_INT 21
13017: PUSH
13018: LD_INT 2
13020: PUSH
13021: EMPTY
13022: LIST
13023: LIST
13024: PUSH
13025: EMPTY
13026: LIST
13027: LIST
13028: PPUSH
13029: CALL_OW 69
13033: ST_TO_ADDR
// if not tmp then
13034: LD_VAR 0 1
13038: NOT
13039: IFFALSE 13043
// exit ;
13041: GO 13069
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13043: LD_VAR 0 1
13047: PUSH
13048: LD_INT 1
13050: PPUSH
13051: LD_VAR 0 1
13055: PPUSH
13056: CALL_OW 12
13060: ARRAY
13061: PPUSH
13062: LD_INT 60
13064: PPUSH
13065: CALL_OW 234
// end ;
13069: PPOPN 1
13071: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13072: LD_EXP 40
13076: PUSH
13077: LD_EXP 70
13081: AND
13082: IFFALSE 13181
13084: GO 13086
13086: DISABLE
13087: LD_INT 0
13089: PPUSH
13090: PPUSH
// begin enable ;
13091: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13092: LD_ADDR_VAR 0 1
13096: PUSH
13097: LD_INT 22
13099: PUSH
13100: LD_OWVAR 2
13104: PUSH
13105: EMPTY
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 61
13111: PUSH
13112: EMPTY
13113: LIST
13114: PUSH
13115: LD_INT 33
13117: PUSH
13118: LD_INT 2
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: PUSH
13125: EMPTY
13126: LIST
13127: LIST
13128: LIST
13129: PPUSH
13130: CALL_OW 69
13134: ST_TO_ADDR
// if not tmp then
13135: LD_VAR 0 1
13139: NOT
13140: IFFALSE 13144
// exit ;
13142: GO 13181
// for i in tmp do
13144: LD_ADDR_VAR 0 2
13148: PUSH
13149: LD_VAR 0 1
13153: PUSH
13154: FOR_IN
13155: IFFALSE 13179
// if IsControledBy ( i ) then
13157: LD_VAR 0 2
13161: PPUSH
13162: CALL_OW 312
13166: IFFALSE 13177
// ComUnlink ( i ) ;
13168: LD_VAR 0 2
13172: PPUSH
13173: CALL_OW 136
13177: GO 13154
13179: POP
13180: POP
// end ;
13181: PPOPN 2
13183: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13184: LD_EXP 40
13188: PUSH
13189: LD_EXP 71
13193: AND
13194: IFFALSE 13334
13196: GO 13198
13198: DISABLE
13199: LD_INT 0
13201: PPUSH
13202: PPUSH
// begin ToLua ( displayPowell(); ) ;
13203: LD_STRING displayPowell();
13205: PPUSH
13206: CALL_OW 559
// uc_side := 0 ;
13210: LD_ADDR_OWVAR 20
13214: PUSH
13215: LD_INT 0
13217: ST_TO_ADDR
// uc_nation := 2 ;
13218: LD_ADDR_OWVAR 21
13222: PUSH
13223: LD_INT 2
13225: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13226: LD_ADDR_OWVAR 37
13230: PUSH
13231: LD_INT 14
13233: ST_TO_ADDR
// vc_engine := engine_siberite ;
13234: LD_ADDR_OWVAR 39
13238: PUSH
13239: LD_INT 3
13241: ST_TO_ADDR
// vc_control := control_apeman ;
13242: LD_ADDR_OWVAR 38
13246: PUSH
13247: LD_INT 5
13249: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13250: LD_ADDR_OWVAR 40
13254: PUSH
13255: LD_INT 29
13257: ST_TO_ADDR
// un := CreateVehicle ;
13258: LD_ADDR_VAR 0 2
13262: PUSH
13263: CALL_OW 45
13267: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13268: LD_VAR 0 2
13272: PPUSH
13273: LD_INT 1
13275: PPUSH
13276: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13280: LD_INT 35
13282: PPUSH
13283: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13287: LD_VAR 0 2
13291: PPUSH
13292: LD_INT 22
13294: PUSH
13295: LD_OWVAR 2
13299: PUSH
13300: EMPTY
13301: LIST
13302: LIST
13303: PPUSH
13304: CALL_OW 69
13308: PPUSH
13309: LD_VAR 0 2
13313: PPUSH
13314: CALL_OW 74
13318: PPUSH
13319: CALL_OW 115
// until IsDead ( un ) ;
13323: LD_VAR 0 2
13327: PPUSH
13328: CALL_OW 301
13332: IFFALSE 13280
// end ;
13334: PPOPN 2
13336: END
// every 0 0$1 trigger StreamModeActive and sStu do
13337: LD_EXP 40
13341: PUSH
13342: LD_EXP 79
13346: AND
13347: IFFALSE 13363
13349: GO 13351
13351: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13352: LD_STRING displayStucuk();
13354: PPUSH
13355: CALL_OW 559
// ResetFog ;
13359: CALL_OW 335
// end ;
13363: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13364: LD_EXP 40
13368: PUSH
13369: LD_EXP 72
13373: AND
13374: IFFALSE 13515
13376: GO 13378
13378: DISABLE
13379: LD_INT 0
13381: PPUSH
13382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13383: LD_ADDR_VAR 0 2
13387: PUSH
13388: LD_INT 22
13390: PUSH
13391: LD_OWVAR 2
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PUSH
13400: LD_INT 21
13402: PUSH
13403: LD_INT 1
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: PUSH
13410: EMPTY
13411: LIST
13412: LIST
13413: PPUSH
13414: CALL_OW 69
13418: ST_TO_ADDR
// if not tmp then
13419: LD_VAR 0 2
13423: NOT
13424: IFFALSE 13428
// exit ;
13426: GO 13515
// un := tmp [ rand ( 1 , tmp ) ] ;
13428: LD_ADDR_VAR 0 1
13432: PUSH
13433: LD_VAR 0 2
13437: PUSH
13438: LD_INT 1
13440: PPUSH
13441: LD_VAR 0 2
13445: PPUSH
13446: CALL_OW 12
13450: ARRAY
13451: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13452: LD_VAR 0 1
13456: PPUSH
13457: LD_INT 0
13459: PPUSH
13460: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13464: LD_VAR 0 1
13468: PPUSH
13469: LD_OWVAR 3
13473: PUSH
13474: LD_VAR 0 1
13478: DIFF
13479: PPUSH
13480: LD_VAR 0 1
13484: PPUSH
13485: CALL_OW 74
13489: PPUSH
13490: CALL_OW 115
// wait ( 0 0$20 ) ;
13494: LD_INT 700
13496: PPUSH
13497: CALL_OW 67
// SetSide ( un , your_side ) ;
13501: LD_VAR 0 1
13505: PPUSH
13506: LD_OWVAR 2
13510: PPUSH
13511: CALL_OW 235
// end ;
13515: PPOPN 2
13517: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13518: LD_EXP 40
13522: PUSH
13523: LD_EXP 73
13527: AND
13528: IFFALSE 13634
13530: GO 13532
13532: DISABLE
13533: LD_INT 0
13535: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13536: LD_ADDR_VAR 0 1
13540: PUSH
13541: LD_INT 22
13543: PUSH
13544: LD_OWVAR 2
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PUSH
13553: LD_INT 2
13555: PUSH
13556: LD_INT 30
13558: PUSH
13559: LD_INT 0
13561: PUSH
13562: EMPTY
13563: LIST
13564: LIST
13565: PUSH
13566: LD_INT 30
13568: PUSH
13569: LD_INT 1
13571: PUSH
13572: EMPTY
13573: LIST
13574: LIST
13575: PUSH
13576: EMPTY
13577: LIST
13578: LIST
13579: LIST
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PPUSH
13585: CALL_OW 69
13589: ST_TO_ADDR
// if not depot then
13590: LD_VAR 0 1
13594: NOT
13595: IFFALSE 13599
// exit ;
13597: GO 13634
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13599: LD_VAR 0 1
13603: PUSH
13604: LD_INT 1
13606: ARRAY
13607: PPUSH
13608: CALL_OW 250
13612: PPUSH
13613: LD_VAR 0 1
13617: PUSH
13618: LD_INT 1
13620: ARRAY
13621: PPUSH
13622: CALL_OW 251
13626: PPUSH
13627: LD_INT 70
13629: PPUSH
13630: CALL_OW 495
// end ;
13634: PPOPN 1
13636: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13637: LD_EXP 40
13641: PUSH
13642: LD_EXP 74
13646: AND
13647: IFFALSE 13858
13649: GO 13651
13651: DISABLE
13652: LD_INT 0
13654: PPUSH
13655: PPUSH
13656: PPUSH
13657: PPUSH
13658: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13659: LD_ADDR_VAR 0 5
13663: PUSH
13664: LD_INT 22
13666: PUSH
13667: LD_OWVAR 2
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: LD_INT 21
13678: PUSH
13679: LD_INT 1
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PPUSH
13690: CALL_OW 69
13694: ST_TO_ADDR
// if not tmp then
13695: LD_VAR 0 5
13699: NOT
13700: IFFALSE 13704
// exit ;
13702: GO 13858
// for i in tmp do
13704: LD_ADDR_VAR 0 1
13708: PUSH
13709: LD_VAR 0 5
13713: PUSH
13714: FOR_IN
13715: IFFALSE 13856
// begin d := rand ( 0 , 5 ) ;
13717: LD_ADDR_VAR 0 4
13721: PUSH
13722: LD_INT 0
13724: PPUSH
13725: LD_INT 5
13727: PPUSH
13728: CALL_OW 12
13732: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13733: LD_ADDR_VAR 0 2
13737: PUSH
13738: LD_VAR 0 1
13742: PPUSH
13743: CALL_OW 250
13747: PPUSH
13748: LD_VAR 0 4
13752: PPUSH
13753: LD_INT 3
13755: PPUSH
13756: LD_INT 12
13758: PPUSH
13759: CALL_OW 12
13763: PPUSH
13764: CALL_OW 272
13768: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13769: LD_ADDR_VAR 0 3
13773: PUSH
13774: LD_VAR 0 1
13778: PPUSH
13779: CALL_OW 251
13783: PPUSH
13784: LD_VAR 0 4
13788: PPUSH
13789: LD_INT 3
13791: PPUSH
13792: LD_INT 12
13794: PPUSH
13795: CALL_OW 12
13799: PPUSH
13800: CALL_OW 273
13804: ST_TO_ADDR
// if ValidHex ( x , y ) then
13805: LD_VAR 0 2
13809: PPUSH
13810: LD_VAR 0 3
13814: PPUSH
13815: CALL_OW 488
13819: IFFALSE 13854
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13821: LD_VAR 0 1
13825: PPUSH
13826: LD_VAR 0 2
13830: PPUSH
13831: LD_VAR 0 3
13835: PPUSH
13836: LD_INT 3
13838: PPUSH
13839: LD_INT 6
13841: PPUSH
13842: CALL_OW 12
13846: PPUSH
13847: LD_INT 1
13849: PPUSH
13850: CALL_OW 483
// end ;
13854: GO 13714
13856: POP
13857: POP
// end ;
13858: PPOPN 5
13860: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13861: LD_EXP 40
13865: PUSH
13866: LD_EXP 75
13870: AND
13871: IFFALSE 13965
13873: GO 13875
13875: DISABLE
13876: LD_INT 0
13878: PPUSH
13879: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13880: LD_ADDR_VAR 0 2
13884: PUSH
13885: LD_INT 22
13887: PUSH
13888: LD_OWVAR 2
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: LD_INT 32
13899: PUSH
13900: LD_INT 1
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 21
13909: PUSH
13910: LD_INT 2
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: LIST
13921: PPUSH
13922: CALL_OW 69
13926: ST_TO_ADDR
// if not tmp then
13927: LD_VAR 0 2
13931: NOT
13932: IFFALSE 13936
// exit ;
13934: GO 13965
// for i in tmp do
13936: LD_ADDR_VAR 0 1
13940: PUSH
13941: LD_VAR 0 2
13945: PUSH
13946: FOR_IN
13947: IFFALSE 13963
// SetFuel ( i , 0 ) ;
13949: LD_VAR 0 1
13953: PPUSH
13954: LD_INT 0
13956: PPUSH
13957: CALL_OW 240
13961: GO 13946
13963: POP
13964: POP
// end ;
13965: PPOPN 2
13967: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13968: LD_EXP 40
13972: PUSH
13973: LD_EXP 76
13977: AND
13978: IFFALSE 14044
13980: GO 13982
13982: DISABLE
13983: LD_INT 0
13985: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13986: LD_ADDR_VAR 0 1
13990: PUSH
13991: LD_INT 22
13993: PUSH
13994: LD_OWVAR 2
13998: PUSH
13999: EMPTY
14000: LIST
14001: LIST
14002: PUSH
14003: LD_INT 30
14005: PUSH
14006: LD_INT 29
14008: PUSH
14009: EMPTY
14010: LIST
14011: LIST
14012: PUSH
14013: EMPTY
14014: LIST
14015: LIST
14016: PPUSH
14017: CALL_OW 69
14021: ST_TO_ADDR
// if not tmp then
14022: LD_VAR 0 1
14026: NOT
14027: IFFALSE 14031
// exit ;
14029: GO 14044
// DestroyUnit ( tmp [ 1 ] ) ;
14031: LD_VAR 0 1
14035: PUSH
14036: LD_INT 1
14038: ARRAY
14039: PPUSH
14040: CALL_OW 65
// end ;
14044: PPOPN 1
14046: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14047: LD_EXP 40
14051: PUSH
14052: LD_EXP 78
14056: AND
14057: IFFALSE 14186
14059: GO 14061
14061: DISABLE
14062: LD_INT 0
14064: PPUSH
// begin uc_side := 0 ;
14065: LD_ADDR_OWVAR 20
14069: PUSH
14070: LD_INT 0
14072: ST_TO_ADDR
// uc_nation := nation_arabian ;
14073: LD_ADDR_OWVAR 21
14077: PUSH
14078: LD_INT 2
14080: ST_TO_ADDR
// hc_gallery :=  ;
14081: LD_ADDR_OWVAR 33
14085: PUSH
14086: LD_STRING 
14088: ST_TO_ADDR
// hc_name :=  ;
14089: LD_ADDR_OWVAR 26
14093: PUSH
14094: LD_STRING 
14096: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14097: LD_INT 1
14099: PPUSH
14100: LD_INT 11
14102: PPUSH
14103: LD_INT 10
14105: PPUSH
14106: CALL_OW 380
// un := CreateHuman ;
14110: LD_ADDR_VAR 0 1
14114: PUSH
14115: CALL_OW 44
14119: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14120: LD_VAR 0 1
14124: PPUSH
14125: LD_INT 1
14127: PPUSH
14128: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14132: LD_INT 35
14134: PPUSH
14135: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14139: LD_VAR 0 1
14143: PPUSH
14144: LD_INT 22
14146: PUSH
14147: LD_OWVAR 2
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PPUSH
14156: CALL_OW 69
14160: PPUSH
14161: LD_VAR 0 1
14165: PPUSH
14166: CALL_OW 74
14170: PPUSH
14171: CALL_OW 115
// until IsDead ( un ) ;
14175: LD_VAR 0 1
14179: PPUSH
14180: CALL_OW 301
14184: IFFALSE 14132
// end ;
14186: PPOPN 1
14188: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14189: LD_EXP 40
14193: PUSH
14194: LD_EXP 80
14198: AND
14199: IFFALSE 14211
14201: GO 14203
14203: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14204: LD_STRING earthquake(getX(game), 0, 32)
14206: PPUSH
14207: CALL_OW 559
14211: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14212: LD_EXP 40
14216: PUSH
14217: LD_EXP 81
14221: AND
14222: IFFALSE 14313
14224: GO 14226
14226: DISABLE
14227: LD_INT 0
14229: PPUSH
// begin enable ;
14230: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14231: LD_ADDR_VAR 0 1
14235: PUSH
14236: LD_INT 22
14238: PUSH
14239: LD_OWVAR 2
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: LD_INT 21
14250: PUSH
14251: LD_INT 2
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: PUSH
14258: LD_INT 33
14260: PUSH
14261: LD_INT 3
14263: PUSH
14264: EMPTY
14265: LIST
14266: LIST
14267: PUSH
14268: EMPTY
14269: LIST
14270: LIST
14271: LIST
14272: PPUSH
14273: CALL_OW 69
14277: ST_TO_ADDR
// if not tmp then
14278: LD_VAR 0 1
14282: NOT
14283: IFFALSE 14287
// exit ;
14285: GO 14313
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14287: LD_VAR 0 1
14291: PUSH
14292: LD_INT 1
14294: PPUSH
14295: LD_VAR 0 1
14299: PPUSH
14300: CALL_OW 12
14304: ARRAY
14305: PPUSH
14306: LD_INT 1
14308: PPUSH
14309: CALL_OW 234
// end ;
14313: PPOPN 1
14315: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14316: LD_EXP 40
14320: PUSH
14321: LD_EXP 82
14325: AND
14326: IFFALSE 14467
14328: GO 14330
14330: DISABLE
14331: LD_INT 0
14333: PPUSH
14334: PPUSH
14335: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14336: LD_ADDR_VAR 0 3
14340: PUSH
14341: LD_INT 22
14343: PUSH
14344: LD_OWVAR 2
14348: PUSH
14349: EMPTY
14350: LIST
14351: LIST
14352: PUSH
14353: LD_INT 25
14355: PUSH
14356: LD_INT 1
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PPUSH
14367: CALL_OW 69
14371: ST_TO_ADDR
// if not tmp then
14372: LD_VAR 0 3
14376: NOT
14377: IFFALSE 14381
// exit ;
14379: GO 14467
// un := tmp [ rand ( 1 , tmp ) ] ;
14381: LD_ADDR_VAR 0 2
14385: PUSH
14386: LD_VAR 0 3
14390: PUSH
14391: LD_INT 1
14393: PPUSH
14394: LD_VAR 0 3
14398: PPUSH
14399: CALL_OW 12
14403: ARRAY
14404: ST_TO_ADDR
// if Crawls ( un ) then
14405: LD_VAR 0 2
14409: PPUSH
14410: CALL_OW 318
14414: IFFALSE 14425
// ComWalk ( un ) ;
14416: LD_VAR 0 2
14420: PPUSH
14421: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14425: LD_VAR 0 2
14429: PPUSH
14430: LD_INT 9
14432: PPUSH
14433: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14437: LD_INT 28
14439: PPUSH
14440: LD_OWVAR 2
14444: PPUSH
14445: LD_INT 2
14447: PPUSH
14448: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14452: LD_INT 29
14454: PPUSH
14455: LD_OWVAR 2
14459: PPUSH
14460: LD_INT 2
14462: PPUSH
14463: CALL_OW 322
// end ;
14467: PPOPN 3
14469: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14470: LD_EXP 40
14474: PUSH
14475: LD_EXP 83
14479: AND
14480: IFFALSE 14591
14482: GO 14484
14484: DISABLE
14485: LD_INT 0
14487: PPUSH
14488: PPUSH
14489: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14490: LD_ADDR_VAR 0 3
14494: PUSH
14495: LD_INT 22
14497: PUSH
14498: LD_OWVAR 2
14502: PUSH
14503: EMPTY
14504: LIST
14505: LIST
14506: PUSH
14507: LD_INT 25
14509: PUSH
14510: LD_INT 1
14512: PUSH
14513: EMPTY
14514: LIST
14515: LIST
14516: PUSH
14517: EMPTY
14518: LIST
14519: LIST
14520: PPUSH
14521: CALL_OW 69
14525: ST_TO_ADDR
// if not tmp then
14526: LD_VAR 0 3
14530: NOT
14531: IFFALSE 14535
// exit ;
14533: GO 14591
// un := tmp [ rand ( 1 , tmp ) ] ;
14535: LD_ADDR_VAR 0 2
14539: PUSH
14540: LD_VAR 0 3
14544: PUSH
14545: LD_INT 1
14547: PPUSH
14548: LD_VAR 0 3
14552: PPUSH
14553: CALL_OW 12
14557: ARRAY
14558: ST_TO_ADDR
// if Crawls ( un ) then
14559: LD_VAR 0 2
14563: PPUSH
14564: CALL_OW 318
14568: IFFALSE 14579
// ComWalk ( un ) ;
14570: LD_VAR 0 2
14574: PPUSH
14575: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14579: LD_VAR 0 2
14583: PPUSH
14584: LD_INT 8
14586: PPUSH
14587: CALL_OW 336
// end ;
14591: PPOPN 3
14593: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14594: LD_EXP 40
14598: PUSH
14599: LD_EXP 84
14603: AND
14604: IFFALSE 14748
14606: GO 14608
14608: DISABLE
14609: LD_INT 0
14611: PPUSH
14612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14613: LD_ADDR_VAR 0 2
14617: PUSH
14618: LD_INT 22
14620: PUSH
14621: LD_OWVAR 2
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: LD_INT 21
14632: PUSH
14633: LD_INT 2
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PUSH
14640: LD_INT 2
14642: PUSH
14643: LD_INT 34
14645: PUSH
14646: LD_INT 12
14648: PUSH
14649: EMPTY
14650: LIST
14651: LIST
14652: PUSH
14653: LD_INT 34
14655: PUSH
14656: LD_INT 51
14658: PUSH
14659: EMPTY
14660: LIST
14661: LIST
14662: PUSH
14663: LD_INT 34
14665: PUSH
14666: LD_INT 32
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: PUSH
14673: EMPTY
14674: LIST
14675: LIST
14676: LIST
14677: LIST
14678: PUSH
14679: EMPTY
14680: LIST
14681: LIST
14682: LIST
14683: PPUSH
14684: CALL_OW 69
14688: ST_TO_ADDR
// if not tmp then
14689: LD_VAR 0 2
14693: NOT
14694: IFFALSE 14698
// exit ;
14696: GO 14748
// for i in tmp do
14698: LD_ADDR_VAR 0 1
14702: PUSH
14703: LD_VAR 0 2
14707: PUSH
14708: FOR_IN
14709: IFFALSE 14746
// if GetCargo ( i , mat_artifact ) = 0 then
14711: LD_VAR 0 1
14715: PPUSH
14716: LD_INT 4
14718: PPUSH
14719: CALL_OW 289
14723: PUSH
14724: LD_INT 0
14726: EQUAL
14727: IFFALSE 14744
// SetCargo ( i , mat_siberit , 100 ) ;
14729: LD_VAR 0 1
14733: PPUSH
14734: LD_INT 3
14736: PPUSH
14737: LD_INT 100
14739: PPUSH
14740: CALL_OW 290
14744: GO 14708
14746: POP
14747: POP
// end ;
14748: PPOPN 2
14750: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14751: LD_EXP 40
14755: PUSH
14756: LD_EXP 85
14760: AND
14761: IFFALSE 14944
14763: GO 14765
14765: DISABLE
14766: LD_INT 0
14768: PPUSH
14769: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14770: LD_ADDR_VAR 0 2
14774: PUSH
14775: LD_INT 22
14777: PUSH
14778: LD_OWVAR 2
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: PPUSH
14787: CALL_OW 69
14791: ST_TO_ADDR
// if not tmp then
14792: LD_VAR 0 2
14796: NOT
14797: IFFALSE 14801
// exit ;
14799: GO 14944
// for i := 1 to 2 do
14801: LD_ADDR_VAR 0 1
14805: PUSH
14806: DOUBLE
14807: LD_INT 1
14809: DEC
14810: ST_TO_ADDR
14811: LD_INT 2
14813: PUSH
14814: FOR_TO
14815: IFFALSE 14942
// begin uc_side := your_side ;
14817: LD_ADDR_OWVAR 20
14821: PUSH
14822: LD_OWVAR 2
14826: ST_TO_ADDR
// uc_nation := nation_american ;
14827: LD_ADDR_OWVAR 21
14831: PUSH
14832: LD_INT 1
14834: ST_TO_ADDR
// vc_chassis := us_morphling ;
14835: LD_ADDR_OWVAR 37
14839: PUSH
14840: LD_INT 5
14842: ST_TO_ADDR
// vc_engine := engine_siberite ;
14843: LD_ADDR_OWVAR 39
14847: PUSH
14848: LD_INT 3
14850: ST_TO_ADDR
// vc_control := control_computer ;
14851: LD_ADDR_OWVAR 38
14855: PUSH
14856: LD_INT 3
14858: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14859: LD_ADDR_OWVAR 40
14863: PUSH
14864: LD_INT 10
14866: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14867: LD_VAR 0 2
14871: PUSH
14872: LD_INT 1
14874: ARRAY
14875: PPUSH
14876: CALL_OW 310
14880: NOT
14881: IFFALSE 14928
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14883: CALL_OW 45
14887: PPUSH
14888: LD_VAR 0 2
14892: PUSH
14893: LD_INT 1
14895: ARRAY
14896: PPUSH
14897: CALL_OW 250
14901: PPUSH
14902: LD_VAR 0 2
14906: PUSH
14907: LD_INT 1
14909: ARRAY
14910: PPUSH
14911: CALL_OW 251
14915: PPUSH
14916: LD_INT 12
14918: PPUSH
14919: LD_INT 1
14921: PPUSH
14922: CALL_OW 50
14926: GO 14940
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14928: CALL_OW 45
14932: PPUSH
14933: LD_INT 1
14935: PPUSH
14936: CALL_OW 51
// end ;
14940: GO 14814
14942: POP
14943: POP
// end ;
14944: PPOPN 2
14946: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14947: LD_EXP 40
14951: PUSH
14952: LD_EXP 86
14956: AND
14957: IFFALSE 15179
14959: GO 14961
14961: DISABLE
14962: LD_INT 0
14964: PPUSH
14965: PPUSH
14966: PPUSH
14967: PPUSH
14968: PPUSH
14969: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14970: LD_ADDR_VAR 0 6
14974: PUSH
14975: LD_INT 22
14977: PUSH
14978: LD_OWVAR 2
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PUSH
14987: LD_INT 21
14989: PUSH
14990: LD_INT 1
14992: PUSH
14993: EMPTY
14994: LIST
14995: LIST
14996: PUSH
14997: LD_INT 3
14999: PUSH
15000: LD_INT 23
15002: PUSH
15003: LD_INT 0
15005: PUSH
15006: EMPTY
15007: LIST
15008: LIST
15009: PUSH
15010: EMPTY
15011: LIST
15012: LIST
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: LIST
15018: PPUSH
15019: CALL_OW 69
15023: ST_TO_ADDR
// if not tmp then
15024: LD_VAR 0 6
15028: NOT
15029: IFFALSE 15033
// exit ;
15031: GO 15179
// s1 := rand ( 1 , 4 ) ;
15033: LD_ADDR_VAR 0 2
15037: PUSH
15038: LD_INT 1
15040: PPUSH
15041: LD_INT 4
15043: PPUSH
15044: CALL_OW 12
15048: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15049: LD_ADDR_VAR 0 4
15053: PUSH
15054: LD_VAR 0 6
15058: PUSH
15059: LD_INT 1
15061: ARRAY
15062: PPUSH
15063: LD_VAR 0 2
15067: PPUSH
15068: CALL_OW 259
15072: ST_TO_ADDR
// if s1 = 1 then
15073: LD_VAR 0 2
15077: PUSH
15078: LD_INT 1
15080: EQUAL
15081: IFFALSE 15101
// s2 := rand ( 2 , 4 ) else
15083: LD_ADDR_VAR 0 3
15087: PUSH
15088: LD_INT 2
15090: PPUSH
15091: LD_INT 4
15093: PPUSH
15094: CALL_OW 12
15098: ST_TO_ADDR
15099: GO 15109
// s2 := 1 ;
15101: LD_ADDR_VAR 0 3
15105: PUSH
15106: LD_INT 1
15108: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15109: LD_ADDR_VAR 0 5
15113: PUSH
15114: LD_VAR 0 6
15118: PUSH
15119: LD_INT 1
15121: ARRAY
15122: PPUSH
15123: LD_VAR 0 3
15127: PPUSH
15128: CALL_OW 259
15132: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15133: LD_VAR 0 6
15137: PUSH
15138: LD_INT 1
15140: ARRAY
15141: PPUSH
15142: LD_VAR 0 2
15146: PPUSH
15147: LD_VAR 0 5
15151: PPUSH
15152: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15156: LD_VAR 0 6
15160: PUSH
15161: LD_INT 1
15163: ARRAY
15164: PPUSH
15165: LD_VAR 0 3
15169: PPUSH
15170: LD_VAR 0 4
15174: PPUSH
15175: CALL_OW 237
// end ;
15179: PPOPN 6
15181: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15182: LD_EXP 40
15186: PUSH
15187: LD_EXP 87
15191: AND
15192: IFFALSE 15271
15194: GO 15196
15196: DISABLE
15197: LD_INT 0
15199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15200: LD_ADDR_VAR 0 1
15204: PUSH
15205: LD_INT 22
15207: PUSH
15208: LD_OWVAR 2
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PUSH
15217: LD_INT 30
15219: PUSH
15220: LD_INT 3
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PPUSH
15231: CALL_OW 69
15235: ST_TO_ADDR
// if not tmp then
15236: LD_VAR 0 1
15240: NOT
15241: IFFALSE 15245
// exit ;
15243: GO 15271
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15245: LD_VAR 0 1
15249: PUSH
15250: LD_INT 1
15252: PPUSH
15253: LD_VAR 0 1
15257: PPUSH
15258: CALL_OW 12
15262: ARRAY
15263: PPUSH
15264: LD_INT 1
15266: PPUSH
15267: CALL_OW 234
// end ;
15271: PPOPN 1
15273: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15274: LD_EXP 40
15278: PUSH
15279: LD_EXP 88
15283: AND
15284: IFFALSE 15396
15286: GO 15288
15288: DISABLE
15289: LD_INT 0
15291: PPUSH
15292: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15293: LD_ADDR_VAR 0 2
15297: PUSH
15298: LD_INT 22
15300: PUSH
15301: LD_OWVAR 2
15305: PUSH
15306: EMPTY
15307: LIST
15308: LIST
15309: PUSH
15310: LD_INT 2
15312: PUSH
15313: LD_INT 30
15315: PUSH
15316: LD_INT 27
15318: PUSH
15319: EMPTY
15320: LIST
15321: LIST
15322: PUSH
15323: LD_INT 30
15325: PUSH
15326: LD_INT 26
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PUSH
15333: LD_INT 30
15335: PUSH
15336: LD_INT 28
15338: PUSH
15339: EMPTY
15340: LIST
15341: LIST
15342: PUSH
15343: EMPTY
15344: LIST
15345: LIST
15346: LIST
15347: LIST
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PPUSH
15353: CALL_OW 69
15357: ST_TO_ADDR
// if not tmp then
15358: LD_VAR 0 2
15362: NOT
15363: IFFALSE 15367
// exit ;
15365: GO 15396
// for i in tmp do
15367: LD_ADDR_VAR 0 1
15371: PUSH
15372: LD_VAR 0 2
15376: PUSH
15377: FOR_IN
15378: IFFALSE 15394
// SetLives ( i , 1 ) ;
15380: LD_VAR 0 1
15384: PPUSH
15385: LD_INT 1
15387: PPUSH
15388: CALL_OW 234
15392: GO 15377
15394: POP
15395: POP
// end ;
15396: PPOPN 2
15398: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15399: LD_EXP 40
15403: PUSH
15404: LD_EXP 89
15408: AND
15409: IFFALSE 15696
15411: GO 15413
15413: DISABLE
15414: LD_INT 0
15416: PPUSH
15417: PPUSH
15418: PPUSH
// begin i := rand ( 1 , 7 ) ;
15419: LD_ADDR_VAR 0 1
15423: PUSH
15424: LD_INT 1
15426: PPUSH
15427: LD_INT 7
15429: PPUSH
15430: CALL_OW 12
15434: ST_TO_ADDR
// case i of 1 :
15435: LD_VAR 0 1
15439: PUSH
15440: LD_INT 1
15442: DOUBLE
15443: EQUAL
15444: IFTRUE 15448
15446: GO 15458
15448: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15449: LD_STRING earthquake(getX(game), 0, 32)
15451: PPUSH
15452: CALL_OW 559
15456: GO 15696
15458: LD_INT 2
15460: DOUBLE
15461: EQUAL
15462: IFTRUE 15466
15464: GO 15480
15466: POP
// begin ToLua ( displayStucuk(); ) ;
15467: LD_STRING displayStucuk();
15469: PPUSH
15470: CALL_OW 559
// ResetFog ;
15474: CALL_OW 335
// end ; 3 :
15478: GO 15696
15480: LD_INT 3
15482: DOUBLE
15483: EQUAL
15484: IFTRUE 15488
15486: GO 15592
15488: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15489: LD_ADDR_VAR 0 2
15493: PUSH
15494: LD_INT 22
15496: PUSH
15497: LD_OWVAR 2
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 25
15508: PUSH
15509: LD_INT 1
15511: PUSH
15512: EMPTY
15513: LIST
15514: LIST
15515: PUSH
15516: EMPTY
15517: LIST
15518: LIST
15519: PPUSH
15520: CALL_OW 69
15524: ST_TO_ADDR
// if not tmp then
15525: LD_VAR 0 2
15529: NOT
15530: IFFALSE 15534
// exit ;
15532: GO 15696
// un := tmp [ rand ( 1 , tmp ) ] ;
15534: LD_ADDR_VAR 0 3
15538: PUSH
15539: LD_VAR 0 2
15543: PUSH
15544: LD_INT 1
15546: PPUSH
15547: LD_VAR 0 2
15551: PPUSH
15552: CALL_OW 12
15556: ARRAY
15557: ST_TO_ADDR
// if Crawls ( un ) then
15558: LD_VAR 0 3
15562: PPUSH
15563: CALL_OW 318
15567: IFFALSE 15578
// ComWalk ( un ) ;
15569: LD_VAR 0 3
15573: PPUSH
15574: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15578: LD_VAR 0 3
15582: PPUSH
15583: LD_INT 8
15585: PPUSH
15586: CALL_OW 336
// end ; 4 :
15590: GO 15696
15592: LD_INT 4
15594: DOUBLE
15595: EQUAL
15596: IFTRUE 15600
15598: GO 15674
15600: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15601: LD_ADDR_VAR 0 2
15605: PUSH
15606: LD_INT 22
15608: PUSH
15609: LD_OWVAR 2
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PUSH
15618: LD_INT 30
15620: PUSH
15621: LD_INT 29
15623: PUSH
15624: EMPTY
15625: LIST
15626: LIST
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PPUSH
15632: CALL_OW 69
15636: ST_TO_ADDR
// if not tmp then
15637: LD_VAR 0 2
15641: NOT
15642: IFFALSE 15646
// exit ;
15644: GO 15696
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15646: LD_VAR 0 2
15650: PUSH
15651: LD_INT 1
15653: ARRAY
15654: PPUSH
15655: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15659: LD_VAR 0 2
15663: PUSH
15664: LD_INT 1
15666: ARRAY
15667: PPUSH
15668: CALL_OW 65
// end ; 5 .. 7 :
15672: GO 15696
15674: LD_INT 5
15676: DOUBLE
15677: GREATEREQUAL
15678: IFFALSE 15686
15680: LD_INT 7
15682: DOUBLE
15683: LESSEQUAL
15684: IFTRUE 15688
15686: GO 15695
15688: POP
// StreamSibBomb ; end ;
15689: CALL 11933 0 0
15693: GO 15696
15695: POP
// end ;
15696: PPOPN 3
15698: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15699: LD_EXP 40
15703: PUSH
15704: LD_EXP 90
15708: AND
15709: IFFALSE 15865
15711: GO 15713
15713: DISABLE
15714: LD_INT 0
15716: PPUSH
15717: PPUSH
15718: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15719: LD_ADDR_VAR 0 2
15723: PUSH
15724: LD_INT 81
15726: PUSH
15727: LD_OWVAR 2
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: PUSH
15736: LD_INT 2
15738: PUSH
15739: LD_INT 21
15741: PUSH
15742: LD_INT 1
15744: PUSH
15745: EMPTY
15746: LIST
15747: LIST
15748: PUSH
15749: LD_INT 21
15751: PUSH
15752: LD_INT 2
15754: PUSH
15755: EMPTY
15756: LIST
15757: LIST
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: LIST
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PPUSH
15768: CALL_OW 69
15772: ST_TO_ADDR
// if not tmp then
15773: LD_VAR 0 2
15777: NOT
15778: IFFALSE 15782
// exit ;
15780: GO 15865
// p := 0 ;
15782: LD_ADDR_VAR 0 3
15786: PUSH
15787: LD_INT 0
15789: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15790: LD_INT 35
15792: PPUSH
15793: CALL_OW 67
// p := p + 1 ;
15797: LD_ADDR_VAR 0 3
15801: PUSH
15802: LD_VAR 0 3
15806: PUSH
15807: LD_INT 1
15809: PLUS
15810: ST_TO_ADDR
// for i in tmp do
15811: LD_ADDR_VAR 0 1
15815: PUSH
15816: LD_VAR 0 2
15820: PUSH
15821: FOR_IN
15822: IFFALSE 15853
// if GetLives ( i ) < 1000 then
15824: LD_VAR 0 1
15828: PPUSH
15829: CALL_OW 256
15833: PUSH
15834: LD_INT 1000
15836: LESS
15837: IFFALSE 15851
// SetLives ( i , 1000 ) ;
15839: LD_VAR 0 1
15843: PPUSH
15844: LD_INT 1000
15846: PPUSH
15847: CALL_OW 234
15851: GO 15821
15853: POP
15854: POP
// until p > 20 ;
15855: LD_VAR 0 3
15859: PUSH
15860: LD_INT 20
15862: GREATER
15863: IFFALSE 15790
// end ;
15865: PPOPN 3
15867: END
// every 0 0$1 trigger StreamModeActive and sTime do
15868: LD_EXP 40
15872: PUSH
15873: LD_EXP 91
15877: AND
15878: IFFALSE 15913
15880: GO 15882
15882: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15883: LD_INT 28
15885: PPUSH
15886: LD_OWVAR 2
15890: PPUSH
15891: LD_INT 2
15893: PPUSH
15894: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15898: LD_INT 30
15900: PPUSH
15901: LD_OWVAR 2
15905: PPUSH
15906: LD_INT 2
15908: PPUSH
15909: CALL_OW 322
// end ;
15913: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15914: LD_EXP 40
15918: PUSH
15919: LD_EXP 92
15923: AND
15924: IFFALSE 16045
15926: GO 15928
15928: DISABLE
15929: LD_INT 0
15931: PPUSH
15932: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15933: LD_ADDR_VAR 0 2
15937: PUSH
15938: LD_INT 22
15940: PUSH
15941: LD_OWVAR 2
15945: PUSH
15946: EMPTY
15947: LIST
15948: LIST
15949: PUSH
15950: LD_INT 21
15952: PUSH
15953: LD_INT 1
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: LD_INT 3
15962: PUSH
15963: LD_INT 23
15965: PUSH
15966: LD_INT 0
15968: PUSH
15969: EMPTY
15970: LIST
15971: LIST
15972: PUSH
15973: EMPTY
15974: LIST
15975: LIST
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: LIST
15981: PPUSH
15982: CALL_OW 69
15986: ST_TO_ADDR
// if not tmp then
15987: LD_VAR 0 2
15991: NOT
15992: IFFALSE 15996
// exit ;
15994: GO 16045
// for i in tmp do
15996: LD_ADDR_VAR 0 1
16000: PUSH
16001: LD_VAR 0 2
16005: PUSH
16006: FOR_IN
16007: IFFALSE 16043
// begin if Crawls ( i ) then
16009: LD_VAR 0 1
16013: PPUSH
16014: CALL_OW 318
16018: IFFALSE 16029
// ComWalk ( i ) ;
16020: LD_VAR 0 1
16024: PPUSH
16025: CALL_OW 138
// SetClass ( i , 2 ) ;
16029: LD_VAR 0 1
16033: PPUSH
16034: LD_INT 2
16036: PPUSH
16037: CALL_OW 336
// end ;
16041: GO 16006
16043: POP
16044: POP
// end ;
16045: PPOPN 2
16047: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16048: LD_EXP 40
16052: PUSH
16053: LD_EXP 93
16057: AND
16058: IFFALSE 16346
16060: GO 16062
16062: DISABLE
16063: LD_INT 0
16065: PPUSH
16066: PPUSH
16067: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16068: LD_OWVAR 2
16072: PPUSH
16073: LD_INT 9
16075: PPUSH
16076: LD_INT 1
16078: PPUSH
16079: LD_INT 1
16081: PPUSH
16082: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16086: LD_INT 9
16088: PPUSH
16089: LD_OWVAR 2
16093: PPUSH
16094: CALL_OW 343
// uc_side := 9 ;
16098: LD_ADDR_OWVAR 20
16102: PUSH
16103: LD_INT 9
16105: ST_TO_ADDR
// uc_nation := 2 ;
16106: LD_ADDR_OWVAR 21
16110: PUSH
16111: LD_INT 2
16113: ST_TO_ADDR
// hc_name := Dark Warrior ;
16114: LD_ADDR_OWVAR 26
16118: PUSH
16119: LD_STRING Dark Warrior
16121: ST_TO_ADDR
// hc_gallery :=  ;
16122: LD_ADDR_OWVAR 33
16126: PUSH
16127: LD_STRING 
16129: ST_TO_ADDR
// hc_noskilllimit := true ;
16130: LD_ADDR_OWVAR 76
16134: PUSH
16135: LD_INT 1
16137: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16138: LD_ADDR_OWVAR 31
16142: PUSH
16143: LD_INT 30
16145: PUSH
16146: LD_INT 30
16148: PUSH
16149: LD_INT 30
16151: PUSH
16152: LD_INT 30
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: LIST
16159: LIST
16160: ST_TO_ADDR
// un := CreateHuman ;
16161: LD_ADDR_VAR 0 3
16165: PUSH
16166: CALL_OW 44
16170: ST_TO_ADDR
// hc_noskilllimit := false ;
16171: LD_ADDR_OWVAR 76
16175: PUSH
16176: LD_INT 0
16178: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16179: LD_VAR 0 3
16183: PPUSH
16184: LD_INT 1
16186: PPUSH
16187: CALL_OW 51
// ToLua ( playRanger() ) ;
16191: LD_STRING playRanger()
16193: PPUSH
16194: CALL_OW 559
// p := 0 ;
16198: LD_ADDR_VAR 0 2
16202: PUSH
16203: LD_INT 0
16205: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16206: LD_INT 35
16208: PPUSH
16209: CALL_OW 67
// p := p + 1 ;
16213: LD_ADDR_VAR 0 2
16217: PUSH
16218: LD_VAR 0 2
16222: PUSH
16223: LD_INT 1
16225: PLUS
16226: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16227: LD_VAR 0 3
16231: PPUSH
16232: CALL_OW 256
16236: PUSH
16237: LD_INT 1000
16239: LESS
16240: IFFALSE 16254
// SetLives ( un , 1000 ) ;
16242: LD_VAR 0 3
16246: PPUSH
16247: LD_INT 1000
16249: PPUSH
16250: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16254: LD_VAR 0 3
16258: PPUSH
16259: LD_INT 81
16261: PUSH
16262: LD_OWVAR 2
16266: PUSH
16267: EMPTY
16268: LIST
16269: LIST
16270: PUSH
16271: LD_INT 91
16273: PUSH
16274: LD_VAR 0 3
16278: PUSH
16279: LD_INT 30
16281: PUSH
16282: EMPTY
16283: LIST
16284: LIST
16285: LIST
16286: PUSH
16287: EMPTY
16288: LIST
16289: LIST
16290: PPUSH
16291: CALL_OW 69
16295: PPUSH
16296: LD_VAR 0 3
16300: PPUSH
16301: CALL_OW 74
16305: PPUSH
16306: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16310: LD_VAR 0 2
16314: PUSH
16315: LD_INT 80
16317: GREATER
16318: PUSH
16319: LD_VAR 0 3
16323: PPUSH
16324: CALL_OW 301
16328: OR
16329: IFFALSE 16206
// if un then
16331: LD_VAR 0 3
16335: IFFALSE 16346
// RemoveUnit ( un ) ;
16337: LD_VAR 0 3
16341: PPUSH
16342: CALL_OW 64
// end ;
16346: PPOPN 3
16348: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16349: LD_EXP 94
16353: IFFALSE 16469
16355: GO 16357
16357: DISABLE
16358: LD_INT 0
16360: PPUSH
16361: PPUSH
16362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16363: LD_ADDR_VAR 0 2
16367: PUSH
16368: LD_INT 81
16370: PUSH
16371: LD_OWVAR 2
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: PUSH
16380: LD_INT 21
16382: PUSH
16383: LD_INT 1
16385: PUSH
16386: EMPTY
16387: LIST
16388: LIST
16389: PUSH
16390: EMPTY
16391: LIST
16392: LIST
16393: PPUSH
16394: CALL_OW 69
16398: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16399: LD_STRING playComputer()
16401: PPUSH
16402: CALL_OW 559
// if not tmp then
16406: LD_VAR 0 2
16410: NOT
16411: IFFALSE 16415
// exit ;
16413: GO 16469
// for i in tmp do
16415: LD_ADDR_VAR 0 1
16419: PUSH
16420: LD_VAR 0 2
16424: PUSH
16425: FOR_IN
16426: IFFALSE 16467
// for j := 1 to 4 do
16428: LD_ADDR_VAR 0 3
16432: PUSH
16433: DOUBLE
16434: LD_INT 1
16436: DEC
16437: ST_TO_ADDR
16438: LD_INT 4
16440: PUSH
16441: FOR_TO
16442: IFFALSE 16463
// SetSkill ( i , j , 10 ) ;
16444: LD_VAR 0 1
16448: PPUSH
16449: LD_VAR 0 3
16453: PPUSH
16454: LD_INT 10
16456: PPUSH
16457: CALL_OW 237
16461: GO 16441
16463: POP
16464: POP
16465: GO 16425
16467: POP
16468: POP
// end ;
16469: PPOPN 3
16471: END
// every 0 0$1 trigger s30 do var i , tmp ;
16472: LD_EXP 95
16476: IFFALSE 16545
16478: GO 16480
16480: DISABLE
16481: LD_INT 0
16483: PPUSH
16484: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16485: LD_ADDR_VAR 0 2
16489: PUSH
16490: LD_INT 22
16492: PUSH
16493: LD_OWVAR 2
16497: PUSH
16498: EMPTY
16499: LIST
16500: LIST
16501: PPUSH
16502: CALL_OW 69
16506: ST_TO_ADDR
// if not tmp then
16507: LD_VAR 0 2
16511: NOT
16512: IFFALSE 16516
// exit ;
16514: GO 16545
// for i in tmp do
16516: LD_ADDR_VAR 0 1
16520: PUSH
16521: LD_VAR 0 2
16525: PUSH
16526: FOR_IN
16527: IFFALSE 16543
// SetLives ( i , 300 ) ;
16529: LD_VAR 0 1
16533: PPUSH
16534: LD_INT 300
16536: PPUSH
16537: CALL_OW 234
16541: GO 16526
16543: POP
16544: POP
// end ;
16545: PPOPN 2
16547: END
// every 0 0$1 trigger s60 do var i , tmp ;
16548: LD_EXP 96
16552: IFFALSE 16621
16554: GO 16556
16556: DISABLE
16557: LD_INT 0
16559: PPUSH
16560: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16561: LD_ADDR_VAR 0 2
16565: PUSH
16566: LD_INT 22
16568: PUSH
16569: LD_OWVAR 2
16573: PUSH
16574: EMPTY
16575: LIST
16576: LIST
16577: PPUSH
16578: CALL_OW 69
16582: ST_TO_ADDR
// if not tmp then
16583: LD_VAR 0 2
16587: NOT
16588: IFFALSE 16592
// exit ;
16590: GO 16621
// for i in tmp do
16592: LD_ADDR_VAR 0 1
16596: PUSH
16597: LD_VAR 0 2
16601: PUSH
16602: FOR_IN
16603: IFFALSE 16619
// SetLives ( i , 600 ) ;
16605: LD_VAR 0 1
16609: PPUSH
16610: LD_INT 600
16612: PPUSH
16613: CALL_OW 234
16617: GO 16602
16619: POP
16620: POP
// end ;
16621: PPOPN 2
16623: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16624: LD_INT 0
16626: PPUSH
// case cmd of 301 :
16627: LD_VAR 0 1
16631: PUSH
16632: LD_INT 301
16634: DOUBLE
16635: EQUAL
16636: IFTRUE 16640
16638: GO 16672
16640: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16641: LD_VAR 0 6
16645: PPUSH
16646: LD_VAR 0 7
16650: PPUSH
16651: LD_VAR 0 8
16655: PPUSH
16656: LD_VAR 0 4
16660: PPUSH
16661: LD_VAR 0 5
16665: PPUSH
16666: CALL 17873 0 5
16670: GO 16793
16672: LD_INT 302
16674: DOUBLE
16675: EQUAL
16676: IFTRUE 16680
16678: GO 16717
16680: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16681: LD_VAR 0 6
16685: PPUSH
16686: LD_VAR 0 7
16690: PPUSH
16691: LD_VAR 0 8
16695: PPUSH
16696: LD_VAR 0 9
16700: PPUSH
16701: LD_VAR 0 4
16705: PPUSH
16706: LD_VAR 0 5
16710: PPUSH
16711: CALL 17964 0 6
16715: GO 16793
16717: LD_INT 303
16719: DOUBLE
16720: EQUAL
16721: IFTRUE 16725
16723: GO 16762
16725: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16726: LD_VAR 0 6
16730: PPUSH
16731: LD_VAR 0 7
16735: PPUSH
16736: LD_VAR 0 8
16740: PPUSH
16741: LD_VAR 0 9
16745: PPUSH
16746: LD_VAR 0 4
16750: PPUSH
16751: LD_VAR 0 5
16755: PPUSH
16756: CALL 16798 0 6
16760: GO 16793
16762: LD_INT 304
16764: DOUBLE
16765: EQUAL
16766: IFTRUE 16770
16768: GO 16792
16770: POP
// hHackTeleport ( unit , x , y ) ; end ;
16771: LD_VAR 0 2
16775: PPUSH
16776: LD_VAR 0 4
16780: PPUSH
16781: LD_VAR 0 5
16785: PPUSH
16786: CALL 18557 0 3
16790: GO 16793
16792: POP
// end ;
16793: LD_VAR 0 12
16797: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16798: LD_INT 0
16800: PPUSH
16801: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16802: LD_VAR 0 1
16806: PUSH
16807: LD_INT 1
16809: LESS
16810: PUSH
16811: LD_VAR 0 1
16815: PUSH
16816: LD_INT 3
16818: GREATER
16819: OR
16820: PUSH
16821: LD_VAR 0 5
16825: PPUSH
16826: LD_VAR 0 6
16830: PPUSH
16831: CALL_OW 428
16835: OR
16836: IFFALSE 16840
// exit ;
16838: GO 17560
// uc_side := your_side ;
16840: LD_ADDR_OWVAR 20
16844: PUSH
16845: LD_OWVAR 2
16849: ST_TO_ADDR
// uc_nation := nation ;
16850: LD_ADDR_OWVAR 21
16854: PUSH
16855: LD_VAR 0 1
16859: ST_TO_ADDR
// bc_level = 1 ;
16860: LD_ADDR_OWVAR 43
16864: PUSH
16865: LD_INT 1
16867: ST_TO_ADDR
// case btype of 1 :
16868: LD_VAR 0 2
16872: PUSH
16873: LD_INT 1
16875: DOUBLE
16876: EQUAL
16877: IFTRUE 16881
16879: GO 16892
16881: POP
// bc_type := b_depot ; 2 :
16882: LD_ADDR_OWVAR 42
16886: PUSH
16887: LD_INT 0
16889: ST_TO_ADDR
16890: GO 17504
16892: LD_INT 2
16894: DOUBLE
16895: EQUAL
16896: IFTRUE 16900
16898: GO 16911
16900: POP
// bc_type := b_warehouse ; 3 :
16901: LD_ADDR_OWVAR 42
16905: PUSH
16906: LD_INT 1
16908: ST_TO_ADDR
16909: GO 17504
16911: LD_INT 3
16913: DOUBLE
16914: EQUAL
16915: IFTRUE 16919
16917: GO 16930
16919: POP
// bc_type := b_lab ; 4 .. 9 :
16920: LD_ADDR_OWVAR 42
16924: PUSH
16925: LD_INT 6
16927: ST_TO_ADDR
16928: GO 17504
16930: LD_INT 4
16932: DOUBLE
16933: GREATEREQUAL
16934: IFFALSE 16942
16936: LD_INT 9
16938: DOUBLE
16939: LESSEQUAL
16940: IFTRUE 16944
16942: GO 16996
16944: POP
// begin bc_type := b_lab_half ;
16945: LD_ADDR_OWVAR 42
16949: PUSH
16950: LD_INT 7
16952: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
16953: LD_ADDR_OWVAR 44
16957: PUSH
16958: LD_INT 10
16960: PUSH
16961: LD_INT 11
16963: PUSH
16964: LD_INT 12
16966: PUSH
16967: LD_INT 15
16969: PUSH
16970: LD_INT 14
16972: PUSH
16973: LD_INT 13
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: LIST
16980: LIST
16981: LIST
16982: LIST
16983: PUSH
16984: LD_VAR 0 2
16988: PUSH
16989: LD_INT 3
16991: MINUS
16992: ARRAY
16993: ST_TO_ADDR
// end ; 10 .. 13 :
16994: GO 17504
16996: LD_INT 10
16998: DOUBLE
16999: GREATEREQUAL
17000: IFFALSE 17008
17002: LD_INT 13
17004: DOUBLE
17005: LESSEQUAL
17006: IFTRUE 17010
17008: GO 17087
17010: POP
// begin bc_type := b_lab_full ;
17011: LD_ADDR_OWVAR 42
17015: PUSH
17016: LD_INT 8
17018: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17019: LD_ADDR_OWVAR 44
17023: PUSH
17024: LD_INT 10
17026: PUSH
17027: LD_INT 12
17029: PUSH
17030: LD_INT 14
17032: PUSH
17033: LD_INT 13
17035: PUSH
17036: EMPTY
17037: LIST
17038: LIST
17039: LIST
17040: LIST
17041: PUSH
17042: LD_VAR 0 2
17046: PUSH
17047: LD_INT 9
17049: MINUS
17050: ARRAY
17051: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17052: LD_ADDR_OWVAR 45
17056: PUSH
17057: LD_INT 11
17059: PUSH
17060: LD_INT 15
17062: PUSH
17063: LD_INT 12
17065: PUSH
17066: LD_INT 15
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: LIST
17073: LIST
17074: PUSH
17075: LD_VAR 0 2
17079: PUSH
17080: LD_INT 9
17082: MINUS
17083: ARRAY
17084: ST_TO_ADDR
// end ; 14 :
17085: GO 17504
17087: LD_INT 14
17089: DOUBLE
17090: EQUAL
17091: IFTRUE 17095
17093: GO 17106
17095: POP
// bc_type := b_workshop ; 15 :
17096: LD_ADDR_OWVAR 42
17100: PUSH
17101: LD_INT 2
17103: ST_TO_ADDR
17104: GO 17504
17106: LD_INT 15
17108: DOUBLE
17109: EQUAL
17110: IFTRUE 17114
17112: GO 17125
17114: POP
// bc_type := b_factory ; 16 :
17115: LD_ADDR_OWVAR 42
17119: PUSH
17120: LD_INT 3
17122: ST_TO_ADDR
17123: GO 17504
17125: LD_INT 16
17127: DOUBLE
17128: EQUAL
17129: IFTRUE 17133
17131: GO 17144
17133: POP
// bc_type := b_ext_gun ; 17 :
17134: LD_ADDR_OWVAR 42
17138: PUSH
17139: LD_INT 17
17141: ST_TO_ADDR
17142: GO 17504
17144: LD_INT 17
17146: DOUBLE
17147: EQUAL
17148: IFTRUE 17152
17150: GO 17180
17152: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17153: LD_ADDR_OWVAR 42
17157: PUSH
17158: LD_INT 19
17160: PUSH
17161: LD_INT 23
17163: PUSH
17164: LD_INT 19
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: LIST
17171: PUSH
17172: LD_VAR 0 1
17176: ARRAY
17177: ST_TO_ADDR
17178: GO 17504
17180: LD_INT 18
17182: DOUBLE
17183: EQUAL
17184: IFTRUE 17188
17186: GO 17199
17188: POP
// bc_type := b_ext_radar ; 19 :
17189: LD_ADDR_OWVAR 42
17193: PUSH
17194: LD_INT 20
17196: ST_TO_ADDR
17197: GO 17504
17199: LD_INT 19
17201: DOUBLE
17202: EQUAL
17203: IFTRUE 17207
17205: GO 17218
17207: POP
// bc_type := b_ext_radio ; 20 :
17208: LD_ADDR_OWVAR 42
17212: PUSH
17213: LD_INT 22
17215: ST_TO_ADDR
17216: GO 17504
17218: LD_INT 20
17220: DOUBLE
17221: EQUAL
17222: IFTRUE 17226
17224: GO 17237
17226: POP
// bc_type := b_ext_siberium ; 21 :
17227: LD_ADDR_OWVAR 42
17231: PUSH
17232: LD_INT 21
17234: ST_TO_ADDR
17235: GO 17504
17237: LD_INT 21
17239: DOUBLE
17240: EQUAL
17241: IFTRUE 17245
17243: GO 17256
17245: POP
// bc_type := b_ext_computer ; 22 :
17246: LD_ADDR_OWVAR 42
17250: PUSH
17251: LD_INT 24
17253: ST_TO_ADDR
17254: GO 17504
17256: LD_INT 22
17258: DOUBLE
17259: EQUAL
17260: IFTRUE 17264
17262: GO 17275
17264: POP
// bc_type := b_ext_track ; 23 :
17265: LD_ADDR_OWVAR 42
17269: PUSH
17270: LD_INT 16
17272: ST_TO_ADDR
17273: GO 17504
17275: LD_INT 23
17277: DOUBLE
17278: EQUAL
17279: IFTRUE 17283
17281: GO 17294
17283: POP
// bc_type := b_ext_laser ; 24 :
17284: LD_ADDR_OWVAR 42
17288: PUSH
17289: LD_INT 25
17291: ST_TO_ADDR
17292: GO 17504
17294: LD_INT 24
17296: DOUBLE
17297: EQUAL
17298: IFTRUE 17302
17300: GO 17313
17302: POP
// bc_type := b_control_tower ; 25 :
17303: LD_ADDR_OWVAR 42
17307: PUSH
17308: LD_INT 36
17310: ST_TO_ADDR
17311: GO 17504
17313: LD_INT 25
17315: DOUBLE
17316: EQUAL
17317: IFTRUE 17321
17319: GO 17332
17321: POP
// bc_type := b_breastwork ; 26 :
17322: LD_ADDR_OWVAR 42
17326: PUSH
17327: LD_INT 31
17329: ST_TO_ADDR
17330: GO 17504
17332: LD_INT 26
17334: DOUBLE
17335: EQUAL
17336: IFTRUE 17340
17338: GO 17351
17340: POP
// bc_type := b_bunker ; 27 :
17341: LD_ADDR_OWVAR 42
17345: PUSH
17346: LD_INT 32
17348: ST_TO_ADDR
17349: GO 17504
17351: LD_INT 27
17353: DOUBLE
17354: EQUAL
17355: IFTRUE 17359
17357: GO 17370
17359: POP
// bc_type := b_turret ; 28 :
17360: LD_ADDR_OWVAR 42
17364: PUSH
17365: LD_INT 33
17367: ST_TO_ADDR
17368: GO 17504
17370: LD_INT 28
17372: DOUBLE
17373: EQUAL
17374: IFTRUE 17378
17376: GO 17389
17378: POP
// bc_type := b_armoury ; 29 :
17379: LD_ADDR_OWVAR 42
17383: PUSH
17384: LD_INT 4
17386: ST_TO_ADDR
17387: GO 17504
17389: LD_INT 29
17391: DOUBLE
17392: EQUAL
17393: IFTRUE 17397
17395: GO 17408
17397: POP
// bc_type := b_barracks ; 30 :
17398: LD_ADDR_OWVAR 42
17402: PUSH
17403: LD_INT 5
17405: ST_TO_ADDR
17406: GO 17504
17408: LD_INT 30
17410: DOUBLE
17411: EQUAL
17412: IFTRUE 17416
17414: GO 17427
17416: POP
// bc_type := b_solar_power ; 31 :
17417: LD_ADDR_OWVAR 42
17421: PUSH
17422: LD_INT 27
17424: ST_TO_ADDR
17425: GO 17504
17427: LD_INT 31
17429: DOUBLE
17430: EQUAL
17431: IFTRUE 17435
17433: GO 17446
17435: POP
// bc_type := b_oil_power ; 32 :
17436: LD_ADDR_OWVAR 42
17440: PUSH
17441: LD_INT 26
17443: ST_TO_ADDR
17444: GO 17504
17446: LD_INT 32
17448: DOUBLE
17449: EQUAL
17450: IFTRUE 17454
17452: GO 17465
17454: POP
// bc_type := b_siberite_power ; 33 :
17455: LD_ADDR_OWVAR 42
17459: PUSH
17460: LD_INT 28
17462: ST_TO_ADDR
17463: GO 17504
17465: LD_INT 33
17467: DOUBLE
17468: EQUAL
17469: IFTRUE 17473
17471: GO 17484
17473: POP
// bc_type := b_oil_mine ; 34 :
17474: LD_ADDR_OWVAR 42
17478: PUSH
17479: LD_INT 29
17481: ST_TO_ADDR
17482: GO 17504
17484: LD_INT 34
17486: DOUBLE
17487: EQUAL
17488: IFTRUE 17492
17490: GO 17503
17492: POP
// bc_type := b_siberite_mine ; end ;
17493: LD_ADDR_OWVAR 42
17497: PUSH
17498: LD_INT 30
17500: ST_TO_ADDR
17501: GO 17504
17503: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17504: LD_ADDR_VAR 0 8
17508: PUSH
17509: LD_VAR 0 5
17513: PPUSH
17514: LD_VAR 0 6
17518: PPUSH
17519: LD_VAR 0 3
17523: PPUSH
17524: CALL_OW 47
17528: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17529: LD_OWVAR 42
17533: PUSH
17534: LD_INT 32
17536: PUSH
17537: LD_INT 33
17539: PUSH
17540: EMPTY
17541: LIST
17542: LIST
17543: IN
17544: IFFALSE 17560
// PlaceWeaponTurret ( b , weapon ) ;
17546: LD_VAR 0 8
17550: PPUSH
17551: LD_VAR 0 4
17555: PPUSH
17556: CALL_OW 431
// end ;
17560: LD_VAR 0 7
17564: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17565: LD_INT 0
17567: PPUSH
17568: PPUSH
17569: PPUSH
17570: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17571: LD_ADDR_VAR 0 4
17575: PUSH
17576: LD_INT 22
17578: PUSH
17579: LD_OWVAR 2
17583: PUSH
17584: EMPTY
17585: LIST
17586: LIST
17587: PUSH
17588: LD_INT 2
17590: PUSH
17591: LD_INT 30
17593: PUSH
17594: LD_INT 0
17596: PUSH
17597: EMPTY
17598: LIST
17599: LIST
17600: PUSH
17601: LD_INT 30
17603: PUSH
17604: LD_INT 1
17606: PUSH
17607: EMPTY
17608: LIST
17609: LIST
17610: PUSH
17611: EMPTY
17612: LIST
17613: LIST
17614: LIST
17615: PUSH
17616: EMPTY
17617: LIST
17618: LIST
17619: PPUSH
17620: CALL_OW 69
17624: ST_TO_ADDR
// if not tmp then
17625: LD_VAR 0 4
17629: NOT
17630: IFFALSE 17634
// exit ;
17632: GO 17693
// for i in tmp do
17634: LD_ADDR_VAR 0 2
17638: PUSH
17639: LD_VAR 0 4
17643: PUSH
17644: FOR_IN
17645: IFFALSE 17691
// for j = 1 to 3 do
17647: LD_ADDR_VAR 0 3
17651: PUSH
17652: DOUBLE
17653: LD_INT 1
17655: DEC
17656: ST_TO_ADDR
17657: LD_INT 3
17659: PUSH
17660: FOR_TO
17661: IFFALSE 17687
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17663: LD_VAR 0 2
17667: PPUSH
17668: CALL_OW 274
17672: PPUSH
17673: LD_VAR 0 3
17677: PPUSH
17678: LD_INT 99999
17680: PPUSH
17681: CALL_OW 277
17685: GO 17660
17687: POP
17688: POP
17689: GO 17644
17691: POP
17692: POP
// end ;
17693: LD_VAR 0 1
17697: RET
// export function hHackSetLevel10 ; var i , j ; begin
17698: LD_INT 0
17700: PPUSH
17701: PPUSH
17702: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17703: LD_ADDR_VAR 0 2
17707: PUSH
17708: LD_INT 21
17710: PUSH
17711: LD_INT 1
17713: PUSH
17714: EMPTY
17715: LIST
17716: LIST
17717: PPUSH
17718: CALL_OW 69
17722: PUSH
17723: FOR_IN
17724: IFFALSE 17776
// if IsSelected ( i ) then
17726: LD_VAR 0 2
17730: PPUSH
17731: CALL_OW 306
17735: IFFALSE 17774
// begin for j := 1 to 4 do
17737: LD_ADDR_VAR 0 3
17741: PUSH
17742: DOUBLE
17743: LD_INT 1
17745: DEC
17746: ST_TO_ADDR
17747: LD_INT 4
17749: PUSH
17750: FOR_TO
17751: IFFALSE 17772
// SetSkill ( i , j , 10 ) ;
17753: LD_VAR 0 2
17757: PPUSH
17758: LD_VAR 0 3
17762: PPUSH
17763: LD_INT 10
17765: PPUSH
17766: CALL_OW 237
17770: GO 17750
17772: POP
17773: POP
// end ;
17774: GO 17723
17776: POP
17777: POP
// end ;
17778: LD_VAR 0 1
17782: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17783: LD_INT 0
17785: PPUSH
17786: PPUSH
17787: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17788: LD_ADDR_VAR 0 2
17792: PUSH
17793: LD_INT 22
17795: PUSH
17796: LD_OWVAR 2
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 21
17807: PUSH
17808: LD_INT 1
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: PPUSH
17819: CALL_OW 69
17823: PUSH
17824: FOR_IN
17825: IFFALSE 17866
// begin for j := 1 to 4 do
17827: LD_ADDR_VAR 0 3
17831: PUSH
17832: DOUBLE
17833: LD_INT 1
17835: DEC
17836: ST_TO_ADDR
17837: LD_INT 4
17839: PUSH
17840: FOR_TO
17841: IFFALSE 17862
// SetSkill ( i , j , 10 ) ;
17843: LD_VAR 0 2
17847: PPUSH
17848: LD_VAR 0 3
17852: PPUSH
17853: LD_INT 10
17855: PPUSH
17856: CALL_OW 237
17860: GO 17840
17862: POP
17863: POP
// end ;
17864: GO 17824
17866: POP
17867: POP
// end ;
17868: LD_VAR 0 1
17872: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
17873: LD_INT 0
17875: PPUSH
// uc_side := your_side ;
17876: LD_ADDR_OWVAR 20
17880: PUSH
17881: LD_OWVAR 2
17885: ST_TO_ADDR
// uc_nation := nation ;
17886: LD_ADDR_OWVAR 21
17890: PUSH
17891: LD_VAR 0 1
17895: ST_TO_ADDR
// InitHc ;
17896: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
17900: LD_INT 0
17902: PPUSH
17903: LD_VAR 0 2
17907: PPUSH
17908: LD_VAR 0 3
17912: PPUSH
17913: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
17917: LD_VAR 0 4
17921: PPUSH
17922: LD_VAR 0 5
17926: PPUSH
17927: CALL_OW 428
17931: PUSH
17932: LD_INT 0
17934: EQUAL
17935: IFFALSE 17959
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
17937: CALL_OW 44
17941: PPUSH
17942: LD_VAR 0 4
17946: PPUSH
17947: LD_VAR 0 5
17951: PPUSH
17952: LD_INT 1
17954: PPUSH
17955: CALL_OW 48
// end ;
17959: LD_VAR 0 6
17963: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
17964: LD_INT 0
17966: PPUSH
17967: PPUSH
// uc_side := your_side ;
17968: LD_ADDR_OWVAR 20
17972: PUSH
17973: LD_OWVAR 2
17977: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
17978: LD_VAR 0 1
17982: PUSH
17983: LD_INT 1
17985: PUSH
17986: LD_INT 2
17988: PUSH
17989: LD_INT 3
17991: PUSH
17992: LD_INT 4
17994: PUSH
17995: LD_INT 5
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: LIST
18002: LIST
18003: LIST
18004: IN
18005: IFFALSE 18017
// uc_nation := nation_american else
18007: LD_ADDR_OWVAR 21
18011: PUSH
18012: LD_INT 1
18014: ST_TO_ADDR
18015: GO 18060
// if chassis in [ 11 , 12 , 13 , 14 ] then
18017: LD_VAR 0 1
18021: PUSH
18022: LD_INT 11
18024: PUSH
18025: LD_INT 12
18027: PUSH
18028: LD_INT 13
18030: PUSH
18031: LD_INT 14
18033: PUSH
18034: EMPTY
18035: LIST
18036: LIST
18037: LIST
18038: LIST
18039: IN
18040: IFFALSE 18052
// uc_nation := nation_arabian else
18042: LD_ADDR_OWVAR 21
18046: PUSH
18047: LD_INT 2
18049: ST_TO_ADDR
18050: GO 18060
// uc_nation := nation_russian ;
18052: LD_ADDR_OWVAR 21
18056: PUSH
18057: LD_INT 3
18059: ST_TO_ADDR
// vc_chassis := chassis ;
18060: LD_ADDR_OWVAR 37
18064: PUSH
18065: LD_VAR 0 1
18069: ST_TO_ADDR
// vc_engine := engine ;
18070: LD_ADDR_OWVAR 39
18074: PUSH
18075: LD_VAR 0 2
18079: ST_TO_ADDR
// vc_control := control ;
18080: LD_ADDR_OWVAR 38
18084: PUSH
18085: LD_VAR 0 3
18089: ST_TO_ADDR
// vc_weapon := weapon ;
18090: LD_ADDR_OWVAR 40
18094: PUSH
18095: LD_VAR 0 4
18099: ST_TO_ADDR
// un := CreateVehicle ;
18100: LD_ADDR_VAR 0 8
18104: PUSH
18105: CALL_OW 45
18109: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18110: LD_VAR 0 8
18114: PPUSH
18115: LD_INT 0
18117: PPUSH
18118: LD_INT 5
18120: PPUSH
18121: CALL_OW 12
18125: PPUSH
18126: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18130: LD_VAR 0 8
18134: PPUSH
18135: LD_VAR 0 5
18139: PPUSH
18140: LD_VAR 0 6
18144: PPUSH
18145: LD_INT 1
18147: PPUSH
18148: CALL_OW 48
// end ;
18152: LD_VAR 0 7
18156: RET
// export hInvincible ; every 1 do
18157: GO 18159
18159: DISABLE
// hInvincible := [ ] ;
18160: LD_ADDR_EXP 97
18164: PUSH
18165: EMPTY
18166: ST_TO_ADDR
18167: END
// every 10 do var i ;
18168: GO 18170
18170: DISABLE
18171: LD_INT 0
18173: PPUSH
// begin enable ;
18174: ENABLE
// if not hInvincible then
18175: LD_EXP 97
18179: NOT
18180: IFFALSE 18184
// exit ;
18182: GO 18228
// for i in hInvincible do
18184: LD_ADDR_VAR 0 1
18188: PUSH
18189: LD_EXP 97
18193: PUSH
18194: FOR_IN
18195: IFFALSE 18226
// if GetLives ( i ) < 1000 then
18197: LD_VAR 0 1
18201: PPUSH
18202: CALL_OW 256
18206: PUSH
18207: LD_INT 1000
18209: LESS
18210: IFFALSE 18224
// SetLives ( i , 1000 ) ;
18212: LD_VAR 0 1
18216: PPUSH
18217: LD_INT 1000
18219: PPUSH
18220: CALL_OW 234
18224: GO 18194
18226: POP
18227: POP
// end ;
18228: PPOPN 1
18230: END
// export function hHackInvincible ; var i ; begin
18231: LD_INT 0
18233: PPUSH
18234: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18235: LD_ADDR_VAR 0 2
18239: PUSH
18240: LD_INT 2
18242: PUSH
18243: LD_INT 21
18245: PUSH
18246: LD_INT 1
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: PUSH
18253: LD_INT 21
18255: PUSH
18256: LD_INT 2
18258: PUSH
18259: EMPTY
18260: LIST
18261: LIST
18262: PUSH
18263: EMPTY
18264: LIST
18265: LIST
18266: LIST
18267: PPUSH
18268: CALL_OW 69
18272: PUSH
18273: FOR_IN
18274: IFFALSE 18335
// if IsSelected ( i ) then
18276: LD_VAR 0 2
18280: PPUSH
18281: CALL_OW 306
18285: IFFALSE 18333
// begin if i in hInvincible then
18287: LD_VAR 0 2
18291: PUSH
18292: LD_EXP 97
18296: IN
18297: IFFALSE 18317
// hInvincible := hInvincible diff i else
18299: LD_ADDR_EXP 97
18303: PUSH
18304: LD_EXP 97
18308: PUSH
18309: LD_VAR 0 2
18313: DIFF
18314: ST_TO_ADDR
18315: GO 18333
// hInvincible := hInvincible union i ;
18317: LD_ADDR_EXP 97
18321: PUSH
18322: LD_EXP 97
18326: PUSH
18327: LD_VAR 0 2
18331: UNION
18332: ST_TO_ADDR
// end ;
18333: GO 18273
18335: POP
18336: POP
// end ;
18337: LD_VAR 0 1
18341: RET
// export function hHackInvisible ; var i , j ; begin
18342: LD_INT 0
18344: PPUSH
18345: PPUSH
18346: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18347: LD_ADDR_VAR 0 2
18351: PUSH
18352: LD_INT 21
18354: PUSH
18355: LD_INT 1
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: PPUSH
18362: CALL_OW 69
18366: PUSH
18367: FOR_IN
18368: IFFALSE 18392
// if IsSelected ( i ) then
18370: LD_VAR 0 2
18374: PPUSH
18375: CALL_OW 306
18379: IFFALSE 18390
// ComForceInvisible ( i ) ;
18381: LD_VAR 0 2
18385: PPUSH
18386: CALL_OW 496
18390: GO 18367
18392: POP
18393: POP
// end ;
18394: LD_VAR 0 1
18398: RET
// export function hHackChangeYourSide ; begin
18399: LD_INT 0
18401: PPUSH
// if your_side = 8 then
18402: LD_OWVAR 2
18406: PUSH
18407: LD_INT 8
18409: EQUAL
18410: IFFALSE 18422
// your_side := 0 else
18412: LD_ADDR_OWVAR 2
18416: PUSH
18417: LD_INT 0
18419: ST_TO_ADDR
18420: GO 18436
// your_side := your_side + 1 ;
18422: LD_ADDR_OWVAR 2
18426: PUSH
18427: LD_OWVAR 2
18431: PUSH
18432: LD_INT 1
18434: PLUS
18435: ST_TO_ADDR
// end ;
18436: LD_VAR 0 1
18440: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18441: LD_INT 0
18443: PPUSH
18444: PPUSH
18445: PPUSH
// for i in all_units do
18446: LD_ADDR_VAR 0 2
18450: PUSH
18451: LD_OWVAR 3
18455: PUSH
18456: FOR_IN
18457: IFFALSE 18535
// if IsSelected ( i ) then
18459: LD_VAR 0 2
18463: PPUSH
18464: CALL_OW 306
18468: IFFALSE 18533
// begin j := GetSide ( i ) ;
18470: LD_ADDR_VAR 0 3
18474: PUSH
18475: LD_VAR 0 2
18479: PPUSH
18480: CALL_OW 255
18484: ST_TO_ADDR
// if j = 8 then
18485: LD_VAR 0 3
18489: PUSH
18490: LD_INT 8
18492: EQUAL
18493: IFFALSE 18505
// j := 0 else
18495: LD_ADDR_VAR 0 3
18499: PUSH
18500: LD_INT 0
18502: ST_TO_ADDR
18503: GO 18519
// j := j + 1 ;
18505: LD_ADDR_VAR 0 3
18509: PUSH
18510: LD_VAR 0 3
18514: PUSH
18515: LD_INT 1
18517: PLUS
18518: ST_TO_ADDR
// SetSide ( i , j ) ;
18519: LD_VAR 0 2
18523: PPUSH
18524: LD_VAR 0 3
18528: PPUSH
18529: CALL_OW 235
// end ;
18533: GO 18456
18535: POP
18536: POP
// end ;
18537: LD_VAR 0 1
18541: RET
// export function hHackFog ; begin
18542: LD_INT 0
18544: PPUSH
// FogOff ( true ) ;
18545: LD_INT 1
18547: PPUSH
18548: CALL_OW 344
// end ;
18552: LD_VAR 0 1
18556: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18557: LD_INT 0
18559: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18560: LD_VAR 0 1
18564: PPUSH
18565: LD_VAR 0 2
18569: PPUSH
18570: LD_VAR 0 3
18574: PPUSH
18575: LD_INT 1
18577: PPUSH
18578: LD_INT 1
18580: PPUSH
18581: CALL_OW 483
// CenterOnXY ( x , y ) ;
18585: LD_VAR 0 2
18589: PPUSH
18590: LD_VAR 0 3
18594: PPUSH
18595: CALL_OW 84
// end ;
18599: LD_VAR 0 4
18603: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18604: LD_INT 0
18606: PPUSH
18607: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18608: LD_VAR 0 1
18612: NOT
18613: PUSH
18614: LD_VAR 0 2
18618: PPUSH
18619: LD_VAR 0 3
18623: PPUSH
18624: CALL_OW 488
18628: NOT
18629: OR
18630: PUSH
18631: LD_VAR 0 1
18635: PPUSH
18636: CALL_OW 266
18640: PUSH
18641: LD_INT 3
18643: NONEQUAL
18644: PUSH
18645: LD_VAR 0 1
18649: PPUSH
18650: CALL_OW 247
18654: PUSH
18655: LD_INT 1
18657: EQUAL
18658: NOT
18659: AND
18660: OR
18661: IFFALSE 18665
// exit ;
18663: GO 18814
// if GetType ( factory ) = unit_human then
18665: LD_VAR 0 1
18669: PPUSH
18670: CALL_OW 247
18674: PUSH
18675: LD_INT 1
18677: EQUAL
18678: IFFALSE 18695
// factory := IsInUnit ( factory ) ;
18680: LD_ADDR_VAR 0 1
18684: PUSH
18685: LD_VAR 0 1
18689: PPUSH
18690: CALL_OW 310
18694: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
18695: LD_VAR 0 1
18699: PPUSH
18700: CALL_OW 266
18704: PUSH
18705: LD_INT 3
18707: NONEQUAL
18708: IFFALSE 18712
// exit ;
18710: GO 18814
// if HexInfo ( x , y ) = factory then
18712: LD_VAR 0 2
18716: PPUSH
18717: LD_VAR 0 3
18721: PPUSH
18722: CALL_OW 428
18726: PUSH
18727: LD_VAR 0 1
18731: EQUAL
18732: IFFALSE 18759
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
18734: LD_ADDR_EXP 98
18738: PUSH
18739: LD_EXP 98
18743: PPUSH
18744: LD_VAR 0 1
18748: PPUSH
18749: LD_INT 0
18751: PPUSH
18752: CALL_OW 1
18756: ST_TO_ADDR
18757: GO 18810
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
18759: LD_ADDR_EXP 98
18763: PUSH
18764: LD_EXP 98
18768: PPUSH
18769: LD_VAR 0 1
18773: PPUSH
18774: LD_VAR 0 1
18778: PPUSH
18779: CALL_OW 255
18783: PUSH
18784: LD_VAR 0 1
18788: PUSH
18789: LD_VAR 0 2
18793: PUSH
18794: LD_VAR 0 3
18798: PUSH
18799: EMPTY
18800: LIST
18801: LIST
18802: LIST
18803: LIST
18804: PPUSH
18805: CALL_OW 1
18809: ST_TO_ADDR
// UpdateFactoryWaypoints ;
18810: CALL 18819 0 0
// end ;
18814: LD_VAR 0 4
18818: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
18819: LD_INT 0
18821: PPUSH
18822: PPUSH
18823: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
18824: LD_STRING resetFactoryWaypoint();
18826: PPUSH
18827: CALL_OW 559
// if factoryWaypoints then
18831: LD_EXP 98
18835: IFFALSE 18961
// begin list := PrepareArray ( factoryWaypoints ) ;
18837: LD_ADDR_VAR 0 3
18841: PUSH
18842: LD_EXP 98
18846: PPUSH
18847: CALL 65430 0 1
18851: ST_TO_ADDR
// for i := 1 to list do
18852: LD_ADDR_VAR 0 2
18856: PUSH
18857: DOUBLE
18858: LD_INT 1
18860: DEC
18861: ST_TO_ADDR
18862: LD_VAR 0 3
18866: PUSH
18867: FOR_TO
18868: IFFALSE 18959
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
18870: LD_STRING setFactoryWaypointXY(
18872: PUSH
18873: LD_VAR 0 3
18877: PUSH
18878: LD_VAR 0 2
18882: ARRAY
18883: PUSH
18884: LD_INT 1
18886: ARRAY
18887: STR
18888: PUSH
18889: LD_STRING ,
18891: STR
18892: PUSH
18893: LD_VAR 0 3
18897: PUSH
18898: LD_VAR 0 2
18902: ARRAY
18903: PUSH
18904: LD_INT 2
18906: ARRAY
18907: STR
18908: PUSH
18909: LD_STRING ,
18911: STR
18912: PUSH
18913: LD_VAR 0 3
18917: PUSH
18918: LD_VAR 0 2
18922: ARRAY
18923: PUSH
18924: LD_INT 3
18926: ARRAY
18927: STR
18928: PUSH
18929: LD_STRING ,
18931: STR
18932: PUSH
18933: LD_VAR 0 3
18937: PUSH
18938: LD_VAR 0 2
18942: ARRAY
18943: PUSH
18944: LD_INT 4
18946: ARRAY
18947: STR
18948: PUSH
18949: LD_STRING )
18951: STR
18952: PPUSH
18953: CALL_OW 559
18957: GO 18867
18959: POP
18960: POP
// end ; end ;
18961: LD_VAR 0 1
18965: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
18966: LD_INT 0
18968: PPUSH
// if HexInfo ( x , y ) = warehouse then
18969: LD_VAR 0 2
18973: PPUSH
18974: LD_VAR 0 3
18978: PPUSH
18979: CALL_OW 428
18983: PUSH
18984: LD_VAR 0 1
18988: EQUAL
18989: IFFALSE 19016
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
18991: LD_ADDR_EXP 99
18995: PUSH
18996: LD_EXP 99
19000: PPUSH
19001: LD_VAR 0 1
19005: PPUSH
19006: LD_INT 0
19008: PPUSH
19009: CALL_OW 1
19013: ST_TO_ADDR
19014: GO 19067
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19016: LD_ADDR_EXP 99
19020: PUSH
19021: LD_EXP 99
19025: PPUSH
19026: LD_VAR 0 1
19030: PPUSH
19031: LD_VAR 0 1
19035: PPUSH
19036: CALL_OW 255
19040: PUSH
19041: LD_VAR 0 1
19045: PUSH
19046: LD_VAR 0 2
19050: PUSH
19051: LD_VAR 0 3
19055: PUSH
19056: EMPTY
19057: LIST
19058: LIST
19059: LIST
19060: LIST
19061: PPUSH
19062: CALL_OW 1
19066: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19067: CALL 19076 0 0
// end ;
19071: LD_VAR 0 4
19075: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19076: LD_INT 0
19078: PPUSH
19079: PPUSH
19080: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19081: LD_STRING resetWarehouseGatheringPoints();
19083: PPUSH
19084: CALL_OW 559
// if warehouseGatheringPoints then
19088: LD_EXP 99
19092: IFFALSE 19218
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19094: LD_ADDR_VAR 0 3
19098: PUSH
19099: LD_EXP 99
19103: PPUSH
19104: CALL 65430 0 1
19108: ST_TO_ADDR
// for i := 1 to list do
19109: LD_ADDR_VAR 0 2
19113: PUSH
19114: DOUBLE
19115: LD_INT 1
19117: DEC
19118: ST_TO_ADDR
19119: LD_VAR 0 3
19123: PUSH
19124: FOR_TO
19125: IFFALSE 19216
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19127: LD_STRING setWarehouseGatheringPointXY(
19129: PUSH
19130: LD_VAR 0 3
19134: PUSH
19135: LD_VAR 0 2
19139: ARRAY
19140: PUSH
19141: LD_INT 1
19143: ARRAY
19144: STR
19145: PUSH
19146: LD_STRING ,
19148: STR
19149: PUSH
19150: LD_VAR 0 3
19154: PUSH
19155: LD_VAR 0 2
19159: ARRAY
19160: PUSH
19161: LD_INT 2
19163: ARRAY
19164: STR
19165: PUSH
19166: LD_STRING ,
19168: STR
19169: PUSH
19170: LD_VAR 0 3
19174: PUSH
19175: LD_VAR 0 2
19179: ARRAY
19180: PUSH
19181: LD_INT 3
19183: ARRAY
19184: STR
19185: PUSH
19186: LD_STRING ,
19188: STR
19189: PUSH
19190: LD_VAR 0 3
19194: PUSH
19195: LD_VAR 0 2
19199: ARRAY
19200: PUSH
19201: LD_INT 4
19203: ARRAY
19204: STR
19205: PUSH
19206: LD_STRING )
19208: STR
19209: PPUSH
19210: CALL_OW 559
19214: GO 19124
19216: POP
19217: POP
// end ; end ;
19218: LD_VAR 0 1
19222: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19223: LD_EXP 99
19227: IFFALSE 19912
19229: GO 19231
19231: DISABLE
19232: LD_INT 0
19234: PPUSH
19235: PPUSH
19236: PPUSH
19237: PPUSH
19238: PPUSH
19239: PPUSH
19240: PPUSH
19241: PPUSH
19242: PPUSH
// begin enable ;
19243: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19244: LD_ADDR_VAR 0 3
19248: PUSH
19249: LD_EXP 99
19253: PPUSH
19254: CALL 65430 0 1
19258: ST_TO_ADDR
// if not list then
19259: LD_VAR 0 3
19263: NOT
19264: IFFALSE 19268
// exit ;
19266: GO 19912
// for i := 1 to list do
19268: LD_ADDR_VAR 0 1
19272: PUSH
19273: DOUBLE
19274: LD_INT 1
19276: DEC
19277: ST_TO_ADDR
19278: LD_VAR 0 3
19282: PUSH
19283: FOR_TO
19284: IFFALSE 19910
// begin depot := list [ i ] [ 2 ] ;
19286: LD_ADDR_VAR 0 8
19290: PUSH
19291: LD_VAR 0 3
19295: PUSH
19296: LD_VAR 0 1
19300: ARRAY
19301: PUSH
19302: LD_INT 2
19304: ARRAY
19305: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19306: LD_ADDR_VAR 0 5
19310: PUSH
19311: LD_VAR 0 3
19315: PUSH
19316: LD_VAR 0 1
19320: ARRAY
19321: PUSH
19322: LD_INT 1
19324: ARRAY
19325: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19326: LD_VAR 0 8
19330: PPUSH
19331: CALL_OW 301
19335: PUSH
19336: LD_VAR 0 5
19340: PUSH
19341: LD_VAR 0 8
19345: PPUSH
19346: CALL_OW 255
19350: NONEQUAL
19351: OR
19352: IFFALSE 19381
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19354: LD_ADDR_EXP 99
19358: PUSH
19359: LD_EXP 99
19363: PPUSH
19364: LD_VAR 0 8
19368: PPUSH
19369: LD_INT 0
19371: PPUSH
19372: CALL_OW 1
19376: ST_TO_ADDR
// exit ;
19377: POP
19378: POP
19379: GO 19912
// end ; x := list [ i ] [ 3 ] ;
19381: LD_ADDR_VAR 0 6
19385: PUSH
19386: LD_VAR 0 3
19390: PUSH
19391: LD_VAR 0 1
19395: ARRAY
19396: PUSH
19397: LD_INT 3
19399: ARRAY
19400: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19401: LD_ADDR_VAR 0 7
19405: PUSH
19406: LD_VAR 0 3
19410: PUSH
19411: LD_VAR 0 1
19415: ARRAY
19416: PUSH
19417: LD_INT 4
19419: ARRAY
19420: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19421: LD_ADDR_VAR 0 9
19425: PUSH
19426: LD_VAR 0 6
19430: PPUSH
19431: LD_VAR 0 7
19435: PPUSH
19436: LD_INT 16
19438: PPUSH
19439: CALL 64018 0 3
19443: ST_TO_ADDR
// if not cratesNearbyPoint then
19444: LD_VAR 0 9
19448: NOT
19449: IFFALSE 19455
// exit ;
19451: POP
19452: POP
19453: GO 19912
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19455: LD_ADDR_VAR 0 4
19459: PUSH
19460: LD_INT 22
19462: PUSH
19463: LD_VAR 0 5
19467: PUSH
19468: EMPTY
19469: LIST
19470: LIST
19471: PUSH
19472: LD_INT 3
19474: PUSH
19475: LD_INT 60
19477: PUSH
19478: EMPTY
19479: LIST
19480: PUSH
19481: EMPTY
19482: LIST
19483: LIST
19484: PUSH
19485: LD_INT 91
19487: PUSH
19488: LD_VAR 0 8
19492: PUSH
19493: LD_INT 6
19495: PUSH
19496: EMPTY
19497: LIST
19498: LIST
19499: LIST
19500: PUSH
19501: LD_INT 2
19503: PUSH
19504: LD_INT 25
19506: PUSH
19507: LD_INT 2
19509: PUSH
19510: EMPTY
19511: LIST
19512: LIST
19513: PUSH
19514: LD_INT 25
19516: PUSH
19517: LD_INT 16
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: LIST
19528: PUSH
19529: EMPTY
19530: LIST
19531: LIST
19532: LIST
19533: LIST
19534: PPUSH
19535: CALL_OW 69
19539: PUSH
19540: LD_VAR 0 8
19544: PPUSH
19545: CALL_OW 313
19549: PPUSH
19550: LD_INT 3
19552: PUSH
19553: LD_INT 60
19555: PUSH
19556: EMPTY
19557: LIST
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: LD_INT 2
19565: PUSH
19566: LD_INT 25
19568: PUSH
19569: LD_INT 2
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 25
19578: PUSH
19579: LD_INT 16
19581: PUSH
19582: EMPTY
19583: LIST
19584: LIST
19585: PUSH
19586: EMPTY
19587: LIST
19588: LIST
19589: LIST
19590: PUSH
19591: EMPTY
19592: LIST
19593: LIST
19594: PPUSH
19595: CALL_OW 72
19599: UNION
19600: ST_TO_ADDR
// if tmp then
19601: LD_VAR 0 4
19605: IFFALSE 19685
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19607: LD_ADDR_VAR 0 4
19611: PUSH
19612: LD_VAR 0 4
19616: PPUSH
19617: LD_INT 3
19619: PPUSH
19620: CALL 61987 0 2
19624: ST_TO_ADDR
// for j in tmp do
19625: LD_ADDR_VAR 0 2
19629: PUSH
19630: LD_VAR 0 4
19634: PUSH
19635: FOR_IN
19636: IFFALSE 19679
// begin if IsInUnit ( j ) then
19638: LD_VAR 0 2
19642: PPUSH
19643: CALL_OW 310
19647: IFFALSE 19658
// ComExit ( j ) ;
19649: LD_VAR 0 2
19653: PPUSH
19654: CALL 62070 0 1
// AddComCollect ( j , x , y ) ;
19658: LD_VAR 0 2
19662: PPUSH
19663: LD_VAR 0 6
19667: PPUSH
19668: LD_VAR 0 7
19672: PPUSH
19673: CALL_OW 177
// end ;
19677: GO 19635
19679: POP
19680: POP
// exit ;
19681: POP
19682: POP
19683: GO 19912
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
19685: LD_ADDR_VAR 0 4
19689: PUSH
19690: LD_INT 22
19692: PUSH
19693: LD_VAR 0 5
19697: PUSH
19698: EMPTY
19699: LIST
19700: LIST
19701: PUSH
19702: LD_INT 91
19704: PUSH
19705: LD_VAR 0 8
19709: PUSH
19710: LD_INT 8
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 2
19720: PUSH
19721: LD_INT 34
19723: PUSH
19724: LD_INT 12
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 34
19733: PUSH
19734: LD_INT 51
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 34
19743: PUSH
19744: LD_INT 32
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 34
19753: PUSH
19754: LD_INT 89
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: LIST
19772: PPUSH
19773: CALL_OW 69
19777: ST_TO_ADDR
// if tmp then
19778: LD_VAR 0 4
19782: IFFALSE 19908
// begin for j in tmp do
19784: LD_ADDR_VAR 0 2
19788: PUSH
19789: LD_VAR 0 4
19793: PUSH
19794: FOR_IN
19795: IFFALSE 19906
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
19797: LD_VAR 0 2
19801: PPUSH
19802: CALL_OW 262
19806: PUSH
19807: LD_INT 3
19809: EQUAL
19810: PUSH
19811: LD_VAR 0 2
19815: PPUSH
19816: CALL_OW 261
19820: PUSH
19821: LD_INT 20
19823: GREATER
19824: OR
19825: PUSH
19826: LD_VAR 0 2
19830: PPUSH
19831: CALL_OW 314
19835: NOT
19836: AND
19837: PUSH
19838: LD_VAR 0 2
19842: PPUSH
19843: CALL_OW 263
19847: PUSH
19848: LD_INT 1
19850: NONEQUAL
19851: PUSH
19852: LD_VAR 0 2
19856: PPUSH
19857: CALL_OW 311
19861: OR
19862: AND
19863: IFFALSE 19904
// begin ComCollect ( j , x , y ) ;
19865: LD_VAR 0 2
19869: PPUSH
19870: LD_VAR 0 6
19874: PPUSH
19875: LD_VAR 0 7
19879: PPUSH
19880: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
19884: LD_VAR 0 2
19888: PPUSH
19889: LD_VAR 0 8
19893: PPUSH
19894: CALL_OW 172
// exit ;
19898: POP
19899: POP
19900: POP
19901: POP
19902: GO 19912
// end ;
19904: GO 19794
19906: POP
19907: POP
// end ; end ;
19908: GO 19283
19910: POP
19911: POP
// end ; end_of_file
19912: PPOPN 9
19914: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
19915: LD_INT 0
19917: PPUSH
19918: PPUSH
19919: PPUSH
19920: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
19921: LD_VAR 0 1
19925: PPUSH
19926: CALL_OW 264
19930: PUSH
19931: LD_INT 91
19933: EQUAL
19934: IFFALSE 20006
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
19936: LD_INT 68
19938: PPUSH
19939: LD_VAR 0 1
19943: PPUSH
19944: CALL_OW 255
19948: PPUSH
19949: CALL_OW 321
19953: PUSH
19954: LD_INT 2
19956: EQUAL
19957: IFFALSE 19969
// eff := 70 else
19959: LD_ADDR_VAR 0 4
19963: PUSH
19964: LD_INT 70
19966: ST_TO_ADDR
19967: GO 19977
// eff := 30 ;
19969: LD_ADDR_VAR 0 4
19973: PUSH
19974: LD_INT 30
19976: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
19977: LD_VAR 0 1
19981: PPUSH
19982: CALL_OW 250
19986: PPUSH
19987: LD_VAR 0 1
19991: PPUSH
19992: CALL_OW 251
19996: PPUSH
19997: LD_VAR 0 4
20001: PPUSH
20002: CALL_OW 495
// end ; end ;
20006: LD_VAR 0 2
20010: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20011: LD_INT 0
20013: PPUSH
// end ;
20014: LD_VAR 0 4
20018: RET
// export function SOS_Command ( cmd ) ; begin
20019: LD_INT 0
20021: PPUSH
// end ;
20022: LD_VAR 0 2
20026: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20027: LD_INT 0
20029: PPUSH
// end ;
20030: LD_VAR 0 6
20034: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
20035: LD_INT 0
20037: PPUSH
20038: PPUSH
// if not vehicle or not factory then
20039: LD_VAR 0 1
20043: NOT
20044: PUSH
20045: LD_VAR 0 2
20049: NOT
20050: OR
20051: IFFALSE 20055
// exit ;
20053: GO 20286
// if factoryWaypoints >= factory then
20055: LD_EXP 98
20059: PUSH
20060: LD_VAR 0 2
20064: GREATEREQUAL
20065: IFFALSE 20286
// if factoryWaypoints [ factory ] then
20067: LD_EXP 98
20071: PUSH
20072: LD_VAR 0 2
20076: ARRAY
20077: IFFALSE 20286
// begin if GetControl ( vehicle ) = control_manual then
20079: LD_VAR 0 1
20083: PPUSH
20084: CALL_OW 263
20088: PUSH
20089: LD_INT 1
20091: EQUAL
20092: IFFALSE 20173
// begin driver := IsDrivenBy ( vehicle ) ;
20094: LD_ADDR_VAR 0 4
20098: PUSH
20099: LD_VAR 0 1
20103: PPUSH
20104: CALL_OW 311
20108: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20109: LD_VAR 0 4
20113: PPUSH
20114: LD_EXP 98
20118: PUSH
20119: LD_VAR 0 2
20123: ARRAY
20124: PUSH
20125: LD_INT 3
20127: ARRAY
20128: PPUSH
20129: LD_EXP 98
20133: PUSH
20134: LD_VAR 0 2
20138: ARRAY
20139: PUSH
20140: LD_INT 4
20142: ARRAY
20143: PPUSH
20144: CALL_OW 171
// AddComExitVehicle ( driver ) ;
20148: LD_VAR 0 4
20152: PPUSH
20153: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
20157: LD_VAR 0 4
20161: PPUSH
20162: LD_VAR 0 2
20166: PPUSH
20167: CALL_OW 180
// end else
20171: GO 20286
// if GetControl ( vehicle ) = control_remote then
20173: LD_VAR 0 1
20177: PPUSH
20178: CALL_OW 263
20182: PUSH
20183: LD_INT 2
20185: EQUAL
20186: IFFALSE 20247
// begin wait ( 0 0$2 ) ;
20188: LD_INT 70
20190: PPUSH
20191: CALL_OW 67
// if Connect ( vehicle ) then
20195: LD_VAR 0 1
20199: PPUSH
20200: CALL 32310 0 1
20204: IFFALSE 20245
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20206: LD_VAR 0 1
20210: PPUSH
20211: LD_EXP 98
20215: PUSH
20216: LD_VAR 0 2
20220: ARRAY
20221: PUSH
20222: LD_INT 3
20224: ARRAY
20225: PPUSH
20226: LD_EXP 98
20230: PUSH
20231: LD_VAR 0 2
20235: ARRAY
20236: PUSH
20237: LD_INT 4
20239: ARRAY
20240: PPUSH
20241: CALL_OW 171
// end else
20245: GO 20286
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
20247: LD_VAR 0 1
20251: PPUSH
20252: LD_EXP 98
20256: PUSH
20257: LD_VAR 0 2
20261: ARRAY
20262: PUSH
20263: LD_INT 3
20265: ARRAY
20266: PPUSH
20267: LD_EXP 98
20271: PUSH
20272: LD_VAR 0 2
20276: ARRAY
20277: PUSH
20278: LD_INT 4
20280: ARRAY
20281: PPUSH
20282: CALL_OW 171
// end ; end ;
20286: LD_VAR 0 3
20290: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20291: LD_INT 0
20293: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20294: LD_VAR 0 1
20298: PUSH
20299: LD_INT 250
20301: EQUAL
20302: PUSH
20303: LD_VAR 0 2
20307: PPUSH
20308: CALL_OW 264
20312: PUSH
20313: LD_INT 81
20315: EQUAL
20316: AND
20317: IFFALSE 20338
// MinerPlaceMine ( unit , x , y ) ;
20319: LD_VAR 0 2
20323: PPUSH
20324: LD_VAR 0 4
20328: PPUSH
20329: LD_VAR 0 5
20333: PPUSH
20334: CALL 22723 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
20338: LD_VAR 0 1
20342: PUSH
20343: LD_INT 251
20345: EQUAL
20346: PUSH
20347: LD_VAR 0 2
20351: PPUSH
20352: CALL_OW 264
20356: PUSH
20357: LD_INT 81
20359: EQUAL
20360: AND
20361: IFFALSE 20382
// MinerDetonateMine ( unit , x , y ) ;
20363: LD_VAR 0 2
20367: PPUSH
20368: LD_VAR 0 4
20372: PPUSH
20373: LD_VAR 0 5
20377: PPUSH
20378: CALL 22998 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
20382: LD_VAR 0 1
20386: PUSH
20387: LD_INT 252
20389: EQUAL
20390: PUSH
20391: LD_VAR 0 2
20395: PPUSH
20396: CALL_OW 264
20400: PUSH
20401: LD_INT 81
20403: EQUAL
20404: AND
20405: IFFALSE 20426
// MinerCreateMinefield ( unit , x , y ) ;
20407: LD_VAR 0 2
20411: PPUSH
20412: LD_VAR 0 4
20416: PPUSH
20417: LD_VAR 0 5
20421: PPUSH
20422: CALL 23415 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
20426: LD_VAR 0 1
20430: PUSH
20431: LD_INT 253
20433: EQUAL
20434: PUSH
20435: LD_VAR 0 2
20439: PPUSH
20440: CALL_OW 257
20444: PUSH
20445: LD_INT 5
20447: EQUAL
20448: AND
20449: IFFALSE 20470
// ComBinocular ( unit , x , y ) ;
20451: LD_VAR 0 2
20455: PPUSH
20456: LD_VAR 0 4
20460: PPUSH
20461: LD_VAR 0 5
20465: PPUSH
20466: CALL 23784 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
20470: LD_VAR 0 1
20474: PUSH
20475: LD_INT 254
20477: EQUAL
20478: PUSH
20479: LD_VAR 0 2
20483: PPUSH
20484: CALL_OW 264
20488: PUSH
20489: LD_INT 99
20491: EQUAL
20492: AND
20493: PUSH
20494: LD_VAR 0 3
20498: PPUSH
20499: CALL_OW 263
20503: PUSH
20504: LD_INT 3
20506: EQUAL
20507: AND
20508: IFFALSE 20524
// HackDestroyVehicle ( unit , selectedUnit ) ;
20510: LD_VAR 0 2
20514: PPUSH
20515: LD_VAR 0 3
20519: PPUSH
20520: CALL 22087 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
20524: LD_VAR 0 1
20528: PUSH
20529: LD_INT 255
20531: EQUAL
20532: PUSH
20533: LD_VAR 0 2
20537: PPUSH
20538: CALL_OW 264
20542: PUSH
20543: LD_INT 14
20545: PUSH
20546: LD_INT 53
20548: PUSH
20549: EMPTY
20550: LIST
20551: LIST
20552: IN
20553: AND
20554: PUSH
20555: LD_VAR 0 4
20559: PPUSH
20560: LD_VAR 0 5
20564: PPUSH
20565: CALL_OW 488
20569: AND
20570: IFFALSE 20594
// CutTreeXYR ( unit , x , y , 12 ) ;
20572: LD_VAR 0 2
20576: PPUSH
20577: LD_VAR 0 4
20581: PPUSH
20582: LD_VAR 0 5
20586: PPUSH
20587: LD_INT 12
20589: PPUSH
20590: CALL 20657 0 4
// if cmd = 256 then
20594: LD_VAR 0 1
20598: PUSH
20599: LD_INT 256
20601: EQUAL
20602: IFFALSE 20623
// SetFactoryWaypoint ( unit , x , y ) ;
20604: LD_VAR 0 2
20608: PPUSH
20609: LD_VAR 0 4
20613: PPUSH
20614: LD_VAR 0 5
20618: PPUSH
20619: CALL 18604 0 3
// if cmd = 257 then
20623: LD_VAR 0 1
20627: PUSH
20628: LD_INT 257
20630: EQUAL
20631: IFFALSE 20652
// SetWarehouseGatheringPoint ( unit , x , y ) ;
20633: LD_VAR 0 2
20637: PPUSH
20638: LD_VAR 0 4
20642: PPUSH
20643: LD_VAR 0 5
20647: PPUSH
20648: CALL 18966 0 3
// end ;
20652: LD_VAR 0 6
20656: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
20657: LD_INT 0
20659: PPUSH
20660: PPUSH
20661: PPUSH
20662: PPUSH
20663: PPUSH
20664: PPUSH
20665: PPUSH
20666: PPUSH
20667: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
20668: LD_VAR 0 1
20672: NOT
20673: PUSH
20674: LD_VAR 0 2
20678: PPUSH
20679: LD_VAR 0 3
20683: PPUSH
20684: CALL_OW 488
20688: NOT
20689: OR
20690: PUSH
20691: LD_VAR 0 4
20695: NOT
20696: OR
20697: IFFALSE 20701
// exit ;
20699: GO 21041
// list := [ ] ;
20701: LD_ADDR_VAR 0 13
20705: PUSH
20706: EMPTY
20707: ST_TO_ADDR
// if x - r < 0 then
20708: LD_VAR 0 2
20712: PUSH
20713: LD_VAR 0 4
20717: MINUS
20718: PUSH
20719: LD_INT 0
20721: LESS
20722: IFFALSE 20734
// min_x := 0 else
20724: LD_ADDR_VAR 0 7
20728: PUSH
20729: LD_INT 0
20731: ST_TO_ADDR
20732: GO 20750
// min_x := x - r ;
20734: LD_ADDR_VAR 0 7
20738: PUSH
20739: LD_VAR 0 2
20743: PUSH
20744: LD_VAR 0 4
20748: MINUS
20749: ST_TO_ADDR
// if y - r < 0 then
20750: LD_VAR 0 3
20754: PUSH
20755: LD_VAR 0 4
20759: MINUS
20760: PUSH
20761: LD_INT 0
20763: LESS
20764: IFFALSE 20776
// min_y := 0 else
20766: LD_ADDR_VAR 0 8
20770: PUSH
20771: LD_INT 0
20773: ST_TO_ADDR
20774: GO 20792
// min_y := y - r ;
20776: LD_ADDR_VAR 0 8
20780: PUSH
20781: LD_VAR 0 3
20785: PUSH
20786: LD_VAR 0 4
20790: MINUS
20791: ST_TO_ADDR
// max_x := x + r ;
20792: LD_ADDR_VAR 0 9
20796: PUSH
20797: LD_VAR 0 2
20801: PUSH
20802: LD_VAR 0 4
20806: PLUS
20807: ST_TO_ADDR
// max_y := y + r ;
20808: LD_ADDR_VAR 0 10
20812: PUSH
20813: LD_VAR 0 3
20817: PUSH
20818: LD_VAR 0 4
20822: PLUS
20823: ST_TO_ADDR
// for _x = min_x to max_x do
20824: LD_ADDR_VAR 0 11
20828: PUSH
20829: DOUBLE
20830: LD_VAR 0 7
20834: DEC
20835: ST_TO_ADDR
20836: LD_VAR 0 9
20840: PUSH
20841: FOR_TO
20842: IFFALSE 20959
// for _y = min_y to max_y do
20844: LD_ADDR_VAR 0 12
20848: PUSH
20849: DOUBLE
20850: LD_VAR 0 8
20854: DEC
20855: ST_TO_ADDR
20856: LD_VAR 0 10
20860: PUSH
20861: FOR_TO
20862: IFFALSE 20955
// begin if not ValidHex ( _x , _y ) then
20864: LD_VAR 0 11
20868: PPUSH
20869: LD_VAR 0 12
20873: PPUSH
20874: CALL_OW 488
20878: NOT
20879: IFFALSE 20883
// continue ;
20881: GO 20861
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
20883: LD_VAR 0 11
20887: PPUSH
20888: LD_VAR 0 12
20892: PPUSH
20893: CALL_OW 351
20897: PUSH
20898: LD_VAR 0 11
20902: PPUSH
20903: LD_VAR 0 12
20907: PPUSH
20908: CALL_OW 554
20912: AND
20913: IFFALSE 20953
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
20915: LD_ADDR_VAR 0 13
20919: PUSH
20920: LD_VAR 0 13
20924: PPUSH
20925: LD_VAR 0 13
20929: PUSH
20930: LD_INT 1
20932: PLUS
20933: PPUSH
20934: LD_VAR 0 11
20938: PUSH
20939: LD_VAR 0 12
20943: PUSH
20944: EMPTY
20945: LIST
20946: LIST
20947: PPUSH
20948: CALL_OW 2
20952: ST_TO_ADDR
// end ;
20953: GO 20861
20955: POP
20956: POP
20957: GO 20841
20959: POP
20960: POP
// if not list then
20961: LD_VAR 0 13
20965: NOT
20966: IFFALSE 20970
// exit ;
20968: GO 21041
// for i in list do
20970: LD_ADDR_VAR 0 6
20974: PUSH
20975: LD_VAR 0 13
20979: PUSH
20980: FOR_IN
20981: IFFALSE 21039
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
20983: LD_VAR 0 1
20987: PPUSH
20988: LD_STRING M
20990: PUSH
20991: LD_VAR 0 6
20995: PUSH
20996: LD_INT 1
20998: ARRAY
20999: PUSH
21000: LD_VAR 0 6
21004: PUSH
21005: LD_INT 2
21007: ARRAY
21008: PUSH
21009: LD_INT 0
21011: PUSH
21012: LD_INT 0
21014: PUSH
21015: LD_INT 0
21017: PUSH
21018: LD_INT 0
21020: PUSH
21021: EMPTY
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: PUSH
21030: EMPTY
21031: LIST
21032: PPUSH
21033: CALL_OW 447
21037: GO 20980
21039: POP
21040: POP
// end ;
21041: LD_VAR 0 5
21045: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
21046: LD_EXP 101
21050: NOT
21051: IFFALSE 21101
21053: GO 21055
21055: DISABLE
// begin initHack := true ;
21056: LD_ADDR_EXP 101
21060: PUSH
21061: LD_INT 1
21063: ST_TO_ADDR
// hackTanks := [ ] ;
21064: LD_ADDR_EXP 102
21068: PUSH
21069: EMPTY
21070: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
21071: LD_ADDR_EXP 103
21075: PUSH
21076: EMPTY
21077: ST_TO_ADDR
// hackLimit := 3 ;
21078: LD_ADDR_EXP 104
21082: PUSH
21083: LD_INT 3
21085: ST_TO_ADDR
// hackDist := 12 ;
21086: LD_ADDR_EXP 105
21090: PUSH
21091: LD_INT 12
21093: ST_TO_ADDR
// hackCounter := [ ] ;
21094: LD_ADDR_EXP 106
21098: PUSH
21099: EMPTY
21100: ST_TO_ADDR
// end ;
21101: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
21102: LD_EXP 101
21106: PUSH
21107: LD_INT 34
21109: PUSH
21110: LD_INT 99
21112: PUSH
21113: EMPTY
21114: LIST
21115: LIST
21116: PPUSH
21117: CALL_OW 69
21121: AND
21122: IFFALSE 21375
21124: GO 21126
21126: DISABLE
21127: LD_INT 0
21129: PPUSH
21130: PPUSH
// begin enable ;
21131: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
21132: LD_ADDR_VAR 0 1
21136: PUSH
21137: LD_INT 34
21139: PUSH
21140: LD_INT 99
21142: PUSH
21143: EMPTY
21144: LIST
21145: LIST
21146: PPUSH
21147: CALL_OW 69
21151: PUSH
21152: FOR_IN
21153: IFFALSE 21373
// begin if not i in hackTanks then
21155: LD_VAR 0 1
21159: PUSH
21160: LD_EXP 102
21164: IN
21165: NOT
21166: IFFALSE 21249
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
21168: LD_ADDR_EXP 102
21172: PUSH
21173: LD_EXP 102
21177: PPUSH
21178: LD_EXP 102
21182: PUSH
21183: LD_INT 1
21185: PLUS
21186: PPUSH
21187: LD_VAR 0 1
21191: PPUSH
21192: CALL_OW 1
21196: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
21197: LD_ADDR_EXP 103
21201: PUSH
21202: LD_EXP 103
21206: PPUSH
21207: LD_EXP 103
21211: PUSH
21212: LD_INT 1
21214: PLUS
21215: PPUSH
21216: EMPTY
21217: PPUSH
21218: CALL_OW 1
21222: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
21223: LD_ADDR_EXP 106
21227: PUSH
21228: LD_EXP 106
21232: PPUSH
21233: LD_EXP 106
21237: PUSH
21238: LD_INT 1
21240: PLUS
21241: PPUSH
21242: EMPTY
21243: PPUSH
21244: CALL_OW 1
21248: ST_TO_ADDR
// end ; if not IsOk ( i ) then
21249: LD_VAR 0 1
21253: PPUSH
21254: CALL_OW 302
21258: NOT
21259: IFFALSE 21272
// begin HackUnlinkAll ( i ) ;
21261: LD_VAR 0 1
21265: PPUSH
21266: CALL 21378 0 1
// continue ;
21270: GO 21152
// end ; HackCheckCapturedStatus ( i ) ;
21272: LD_VAR 0 1
21276: PPUSH
21277: CALL 21821 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
21281: LD_ADDR_VAR 0 2
21285: PUSH
21286: LD_INT 81
21288: PUSH
21289: LD_VAR 0 1
21293: PPUSH
21294: CALL_OW 255
21298: PUSH
21299: EMPTY
21300: LIST
21301: LIST
21302: PUSH
21303: LD_INT 33
21305: PUSH
21306: LD_INT 3
21308: PUSH
21309: EMPTY
21310: LIST
21311: LIST
21312: PUSH
21313: LD_INT 91
21315: PUSH
21316: LD_VAR 0 1
21320: PUSH
21321: LD_EXP 105
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: LIST
21330: PUSH
21331: LD_INT 50
21333: PUSH
21334: EMPTY
21335: LIST
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: LIST
21341: LIST
21342: PPUSH
21343: CALL_OW 69
21347: ST_TO_ADDR
// if not tmp then
21348: LD_VAR 0 2
21352: NOT
21353: IFFALSE 21357
// continue ;
21355: GO 21152
// HackLink ( i , tmp ) ;
21357: LD_VAR 0 1
21361: PPUSH
21362: LD_VAR 0 2
21366: PPUSH
21367: CALL 21514 0 2
// end ;
21371: GO 21152
21373: POP
21374: POP
// end ;
21375: PPOPN 2
21377: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
21378: LD_INT 0
21380: PPUSH
21381: PPUSH
21382: PPUSH
// if not hack in hackTanks then
21383: LD_VAR 0 1
21387: PUSH
21388: LD_EXP 102
21392: IN
21393: NOT
21394: IFFALSE 21398
// exit ;
21396: GO 21509
// index := GetElementIndex ( hackTanks , hack ) ;
21398: LD_ADDR_VAR 0 4
21402: PUSH
21403: LD_EXP 102
21407: PPUSH
21408: LD_VAR 0 1
21412: PPUSH
21413: CALL 29126 0 2
21417: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
21418: LD_EXP 103
21422: PUSH
21423: LD_VAR 0 4
21427: ARRAY
21428: IFFALSE 21509
// begin for i in hackTanksCaptured [ index ] do
21430: LD_ADDR_VAR 0 3
21434: PUSH
21435: LD_EXP 103
21439: PUSH
21440: LD_VAR 0 4
21444: ARRAY
21445: PUSH
21446: FOR_IN
21447: IFFALSE 21473
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
21449: LD_VAR 0 3
21453: PUSH
21454: LD_INT 1
21456: ARRAY
21457: PPUSH
21458: LD_VAR 0 3
21462: PUSH
21463: LD_INT 2
21465: ARRAY
21466: PPUSH
21467: CALL_OW 235
21471: GO 21446
21473: POP
21474: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
21475: LD_ADDR_EXP 103
21479: PUSH
21480: LD_EXP 103
21484: PPUSH
21485: LD_VAR 0 4
21489: PPUSH
21490: EMPTY
21491: PPUSH
21492: CALL_OW 1
21496: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
21497: LD_VAR 0 1
21501: PPUSH
21502: LD_INT 0
21504: PPUSH
21505: CALL_OW 505
// end ; end ;
21509: LD_VAR 0 2
21513: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
21514: LD_INT 0
21516: PPUSH
21517: PPUSH
21518: PPUSH
// if not hack in hackTanks or not vehicles then
21519: LD_VAR 0 1
21523: PUSH
21524: LD_EXP 102
21528: IN
21529: NOT
21530: PUSH
21531: LD_VAR 0 2
21535: NOT
21536: OR
21537: IFFALSE 21541
// exit ;
21539: GO 21816
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
21541: LD_ADDR_VAR 0 2
21545: PUSH
21546: LD_VAR 0 1
21550: PPUSH
21551: LD_VAR 0 2
21555: PPUSH
21556: LD_INT 1
21558: PPUSH
21559: LD_INT 1
21561: PPUSH
21562: CALL 29776 0 4
21566: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
21567: LD_ADDR_VAR 0 5
21571: PUSH
21572: LD_EXP 102
21576: PPUSH
21577: LD_VAR 0 1
21581: PPUSH
21582: CALL 29126 0 2
21586: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
21587: LD_EXP 103
21591: PUSH
21592: LD_VAR 0 5
21596: ARRAY
21597: PUSH
21598: LD_EXP 104
21602: LESS
21603: IFFALSE 21792
// begin for i := 1 to vehicles do
21605: LD_ADDR_VAR 0 4
21609: PUSH
21610: DOUBLE
21611: LD_INT 1
21613: DEC
21614: ST_TO_ADDR
21615: LD_VAR 0 2
21619: PUSH
21620: FOR_TO
21621: IFFALSE 21790
// begin if hackTanksCaptured [ index ] = hackLimit then
21623: LD_EXP 103
21627: PUSH
21628: LD_VAR 0 5
21632: ARRAY
21633: PUSH
21634: LD_EXP 104
21638: EQUAL
21639: IFFALSE 21643
// break ;
21641: GO 21790
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
21643: LD_ADDR_EXP 106
21647: PUSH
21648: LD_EXP 106
21652: PPUSH
21653: LD_VAR 0 5
21657: PPUSH
21658: LD_EXP 106
21662: PUSH
21663: LD_VAR 0 5
21667: ARRAY
21668: PUSH
21669: LD_INT 1
21671: PLUS
21672: PPUSH
21673: CALL_OW 1
21677: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
21678: LD_ADDR_EXP 103
21682: PUSH
21683: LD_EXP 103
21687: PPUSH
21688: LD_VAR 0 5
21692: PUSH
21693: LD_EXP 103
21697: PUSH
21698: LD_VAR 0 5
21702: ARRAY
21703: PUSH
21704: LD_INT 1
21706: PLUS
21707: PUSH
21708: EMPTY
21709: LIST
21710: LIST
21711: PPUSH
21712: LD_VAR 0 2
21716: PUSH
21717: LD_VAR 0 4
21721: ARRAY
21722: PUSH
21723: LD_VAR 0 2
21727: PUSH
21728: LD_VAR 0 4
21732: ARRAY
21733: PPUSH
21734: CALL_OW 255
21738: PUSH
21739: EMPTY
21740: LIST
21741: LIST
21742: PPUSH
21743: CALL 29341 0 3
21747: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
21748: LD_VAR 0 2
21752: PUSH
21753: LD_VAR 0 4
21757: ARRAY
21758: PPUSH
21759: LD_VAR 0 1
21763: PPUSH
21764: CALL_OW 255
21768: PPUSH
21769: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
21773: LD_VAR 0 2
21777: PUSH
21778: LD_VAR 0 4
21782: ARRAY
21783: PPUSH
21784: CALL_OW 141
// end ;
21788: GO 21620
21790: POP
21791: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
21792: LD_VAR 0 1
21796: PPUSH
21797: LD_EXP 103
21801: PUSH
21802: LD_VAR 0 5
21806: ARRAY
21807: PUSH
21808: LD_INT 0
21810: PLUS
21811: PPUSH
21812: CALL_OW 505
// end ;
21816: LD_VAR 0 3
21820: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
21821: LD_INT 0
21823: PPUSH
21824: PPUSH
21825: PPUSH
21826: PPUSH
// if not hack in hackTanks then
21827: LD_VAR 0 1
21831: PUSH
21832: LD_EXP 102
21836: IN
21837: NOT
21838: IFFALSE 21842
// exit ;
21840: GO 22082
// index := GetElementIndex ( hackTanks , hack ) ;
21842: LD_ADDR_VAR 0 4
21846: PUSH
21847: LD_EXP 102
21851: PPUSH
21852: LD_VAR 0 1
21856: PPUSH
21857: CALL 29126 0 2
21861: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
21862: LD_ADDR_VAR 0 3
21866: PUSH
21867: DOUBLE
21868: LD_EXP 103
21872: PUSH
21873: LD_VAR 0 4
21877: ARRAY
21878: INC
21879: ST_TO_ADDR
21880: LD_INT 1
21882: PUSH
21883: FOR_DOWNTO
21884: IFFALSE 22056
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
21886: LD_ADDR_VAR 0 5
21890: PUSH
21891: LD_EXP 103
21895: PUSH
21896: LD_VAR 0 4
21900: ARRAY
21901: PUSH
21902: LD_VAR 0 3
21906: ARRAY
21907: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
21908: LD_VAR 0 5
21912: PUSH
21913: LD_INT 1
21915: ARRAY
21916: PPUSH
21917: CALL_OW 302
21921: NOT
21922: PUSH
21923: LD_VAR 0 5
21927: PUSH
21928: LD_INT 1
21930: ARRAY
21931: PPUSH
21932: CALL_OW 255
21936: PUSH
21937: LD_VAR 0 1
21941: PPUSH
21942: CALL_OW 255
21946: NONEQUAL
21947: OR
21948: IFFALSE 22054
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
21950: LD_VAR 0 5
21954: PUSH
21955: LD_INT 1
21957: ARRAY
21958: PPUSH
21959: CALL_OW 305
21963: PUSH
21964: LD_VAR 0 5
21968: PUSH
21969: LD_INT 1
21971: ARRAY
21972: PPUSH
21973: CALL_OW 255
21977: PUSH
21978: LD_VAR 0 1
21982: PPUSH
21983: CALL_OW 255
21987: EQUAL
21988: AND
21989: IFFALSE 22013
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
21991: LD_VAR 0 5
21995: PUSH
21996: LD_INT 1
21998: ARRAY
21999: PPUSH
22000: LD_VAR 0 5
22004: PUSH
22005: LD_INT 2
22007: ARRAY
22008: PPUSH
22009: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
22013: LD_ADDR_EXP 103
22017: PUSH
22018: LD_EXP 103
22022: PPUSH
22023: LD_VAR 0 4
22027: PPUSH
22028: LD_EXP 103
22032: PUSH
22033: LD_VAR 0 4
22037: ARRAY
22038: PPUSH
22039: LD_VAR 0 3
22043: PPUSH
22044: CALL_OW 3
22048: PPUSH
22049: CALL_OW 1
22053: ST_TO_ADDR
// end ; end ;
22054: GO 21883
22056: POP
22057: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
22058: LD_VAR 0 1
22062: PPUSH
22063: LD_EXP 103
22067: PUSH
22068: LD_VAR 0 4
22072: ARRAY
22073: PUSH
22074: LD_INT 0
22076: PLUS
22077: PPUSH
22078: CALL_OW 505
// end ;
22082: LD_VAR 0 2
22086: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
22087: LD_INT 0
22089: PPUSH
22090: PPUSH
22091: PPUSH
22092: PPUSH
// if not hack in hackTanks then
22093: LD_VAR 0 1
22097: PUSH
22098: LD_EXP 102
22102: IN
22103: NOT
22104: IFFALSE 22108
// exit ;
22106: GO 22193
// index := GetElementIndex ( hackTanks , hack ) ;
22108: LD_ADDR_VAR 0 5
22112: PUSH
22113: LD_EXP 102
22117: PPUSH
22118: LD_VAR 0 1
22122: PPUSH
22123: CALL 29126 0 2
22127: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
22128: LD_ADDR_VAR 0 4
22132: PUSH
22133: DOUBLE
22134: LD_INT 1
22136: DEC
22137: ST_TO_ADDR
22138: LD_EXP 103
22142: PUSH
22143: LD_VAR 0 5
22147: ARRAY
22148: PUSH
22149: FOR_TO
22150: IFFALSE 22191
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
22152: LD_EXP 103
22156: PUSH
22157: LD_VAR 0 5
22161: ARRAY
22162: PUSH
22163: LD_VAR 0 4
22167: ARRAY
22168: PUSH
22169: LD_INT 1
22171: ARRAY
22172: PUSH
22173: LD_VAR 0 2
22177: EQUAL
22178: IFFALSE 22189
// KillUnit ( vehicle ) ;
22180: LD_VAR 0 2
22184: PPUSH
22185: CALL_OW 66
22189: GO 22149
22191: POP
22192: POP
// end ;
22193: LD_VAR 0 3
22197: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
22198: LD_EXP 107
22202: NOT
22203: IFFALSE 22238
22205: GO 22207
22207: DISABLE
// begin initMiner := true ;
22208: LD_ADDR_EXP 107
22212: PUSH
22213: LD_INT 1
22215: ST_TO_ADDR
// minersList := [ ] ;
22216: LD_ADDR_EXP 108
22220: PUSH
22221: EMPTY
22222: ST_TO_ADDR
// minerMinesList := [ ] ;
22223: LD_ADDR_EXP 109
22227: PUSH
22228: EMPTY
22229: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
22230: LD_ADDR_EXP 110
22234: PUSH
22235: LD_INT 5
22237: ST_TO_ADDR
// end ;
22238: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
22239: LD_EXP 107
22243: PUSH
22244: LD_INT 34
22246: PUSH
22247: LD_INT 81
22249: PUSH
22250: EMPTY
22251: LIST
22252: LIST
22253: PPUSH
22254: CALL_OW 69
22258: AND
22259: IFFALSE 22720
22261: GO 22263
22263: DISABLE
22264: LD_INT 0
22266: PPUSH
22267: PPUSH
22268: PPUSH
22269: PPUSH
// begin enable ;
22270: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
22271: LD_ADDR_VAR 0 1
22275: PUSH
22276: LD_INT 34
22278: PUSH
22279: LD_INT 81
22281: PUSH
22282: EMPTY
22283: LIST
22284: LIST
22285: PPUSH
22286: CALL_OW 69
22290: PUSH
22291: FOR_IN
22292: IFFALSE 22364
// begin if not i in minersList then
22294: LD_VAR 0 1
22298: PUSH
22299: LD_EXP 108
22303: IN
22304: NOT
22305: IFFALSE 22362
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
22307: LD_ADDR_EXP 108
22311: PUSH
22312: LD_EXP 108
22316: PPUSH
22317: LD_EXP 108
22321: PUSH
22322: LD_INT 1
22324: PLUS
22325: PPUSH
22326: LD_VAR 0 1
22330: PPUSH
22331: CALL_OW 1
22335: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
22336: LD_ADDR_EXP 109
22340: PUSH
22341: LD_EXP 109
22345: PPUSH
22346: LD_EXP 109
22350: PUSH
22351: LD_INT 1
22353: PLUS
22354: PPUSH
22355: EMPTY
22356: PPUSH
22357: CALL_OW 1
22361: ST_TO_ADDR
// end end ;
22362: GO 22291
22364: POP
22365: POP
// for i := minerMinesList downto 1 do
22366: LD_ADDR_VAR 0 1
22370: PUSH
22371: DOUBLE
22372: LD_EXP 109
22376: INC
22377: ST_TO_ADDR
22378: LD_INT 1
22380: PUSH
22381: FOR_DOWNTO
22382: IFFALSE 22718
// begin if IsLive ( minersList [ i ] ) then
22384: LD_EXP 108
22388: PUSH
22389: LD_VAR 0 1
22393: ARRAY
22394: PPUSH
22395: CALL_OW 300
22399: IFFALSE 22427
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
22401: LD_EXP 108
22405: PUSH
22406: LD_VAR 0 1
22410: ARRAY
22411: PPUSH
22412: LD_EXP 109
22416: PUSH
22417: LD_VAR 0 1
22421: ARRAY
22422: PPUSH
22423: CALL_OW 505
// if not minerMinesList [ i ] then
22427: LD_EXP 109
22431: PUSH
22432: LD_VAR 0 1
22436: ARRAY
22437: NOT
22438: IFFALSE 22442
// continue ;
22440: GO 22381
// for j := minerMinesList [ i ] downto 1 do
22442: LD_ADDR_VAR 0 2
22446: PUSH
22447: DOUBLE
22448: LD_EXP 109
22452: PUSH
22453: LD_VAR 0 1
22457: ARRAY
22458: INC
22459: ST_TO_ADDR
22460: LD_INT 1
22462: PUSH
22463: FOR_DOWNTO
22464: IFFALSE 22714
// begin side := GetSide ( minersList [ i ] ) ;
22466: LD_ADDR_VAR 0 3
22470: PUSH
22471: LD_EXP 108
22475: PUSH
22476: LD_VAR 0 1
22480: ARRAY
22481: PPUSH
22482: CALL_OW 255
22486: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
22487: LD_ADDR_VAR 0 4
22491: PUSH
22492: LD_EXP 109
22496: PUSH
22497: LD_VAR 0 1
22501: ARRAY
22502: PUSH
22503: LD_VAR 0 2
22507: ARRAY
22508: PUSH
22509: LD_INT 1
22511: ARRAY
22512: PPUSH
22513: LD_EXP 109
22517: PUSH
22518: LD_VAR 0 1
22522: ARRAY
22523: PUSH
22524: LD_VAR 0 2
22528: ARRAY
22529: PUSH
22530: LD_INT 2
22532: ARRAY
22533: PPUSH
22534: CALL_OW 428
22538: ST_TO_ADDR
// if not tmp then
22539: LD_VAR 0 4
22543: NOT
22544: IFFALSE 22548
// continue ;
22546: GO 22463
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
22548: LD_VAR 0 4
22552: PUSH
22553: LD_INT 81
22555: PUSH
22556: LD_VAR 0 3
22560: PUSH
22561: EMPTY
22562: LIST
22563: LIST
22564: PPUSH
22565: CALL_OW 69
22569: IN
22570: PUSH
22571: LD_EXP 109
22575: PUSH
22576: LD_VAR 0 1
22580: ARRAY
22581: PUSH
22582: LD_VAR 0 2
22586: ARRAY
22587: PUSH
22588: LD_INT 1
22590: ARRAY
22591: PPUSH
22592: LD_EXP 109
22596: PUSH
22597: LD_VAR 0 1
22601: ARRAY
22602: PUSH
22603: LD_VAR 0 2
22607: ARRAY
22608: PUSH
22609: LD_INT 2
22611: ARRAY
22612: PPUSH
22613: CALL_OW 458
22617: AND
22618: IFFALSE 22712
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
22620: LD_EXP 109
22624: PUSH
22625: LD_VAR 0 1
22629: ARRAY
22630: PUSH
22631: LD_VAR 0 2
22635: ARRAY
22636: PUSH
22637: LD_INT 1
22639: ARRAY
22640: PPUSH
22641: LD_EXP 109
22645: PUSH
22646: LD_VAR 0 1
22650: ARRAY
22651: PUSH
22652: LD_VAR 0 2
22656: ARRAY
22657: PUSH
22658: LD_INT 2
22660: ARRAY
22661: PPUSH
22662: LD_VAR 0 3
22666: PPUSH
22667: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
22671: LD_ADDR_EXP 109
22675: PUSH
22676: LD_EXP 109
22680: PPUSH
22681: LD_VAR 0 1
22685: PPUSH
22686: LD_EXP 109
22690: PUSH
22691: LD_VAR 0 1
22695: ARRAY
22696: PPUSH
22697: LD_VAR 0 2
22701: PPUSH
22702: CALL_OW 3
22706: PPUSH
22707: CALL_OW 1
22711: ST_TO_ADDR
// end ; end ;
22712: GO 22463
22714: POP
22715: POP
// end ;
22716: GO 22381
22718: POP
22719: POP
// end ;
22720: PPOPN 4
22722: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
22723: LD_INT 0
22725: PPUSH
22726: PPUSH
// result := false ;
22727: LD_ADDR_VAR 0 4
22731: PUSH
22732: LD_INT 0
22734: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
22735: LD_VAR 0 1
22739: PPUSH
22740: CALL_OW 264
22744: PUSH
22745: LD_INT 81
22747: EQUAL
22748: NOT
22749: IFFALSE 22753
// exit ;
22751: GO 22993
// index := GetElementIndex ( minersList , unit ) ;
22753: LD_ADDR_VAR 0 5
22757: PUSH
22758: LD_EXP 108
22762: PPUSH
22763: LD_VAR 0 1
22767: PPUSH
22768: CALL 29126 0 2
22772: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
22773: LD_EXP 109
22777: PUSH
22778: LD_VAR 0 5
22782: ARRAY
22783: PUSH
22784: LD_EXP 110
22788: GREATEREQUAL
22789: IFFALSE 22793
// exit ;
22791: GO 22993
// ComMoveXY ( unit , x , y ) ;
22793: LD_VAR 0 1
22797: PPUSH
22798: LD_VAR 0 2
22802: PPUSH
22803: LD_VAR 0 3
22807: PPUSH
22808: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
22812: LD_INT 35
22814: PPUSH
22815: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
22819: LD_VAR 0 1
22823: PPUSH
22824: LD_VAR 0 2
22828: PPUSH
22829: LD_VAR 0 3
22833: PPUSH
22834: CALL 60481 0 3
22838: NOT
22839: PUSH
22840: LD_VAR 0 1
22844: PPUSH
22845: CALL_OW 314
22849: AND
22850: IFFALSE 22854
// exit ;
22852: GO 22993
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
22854: LD_VAR 0 2
22858: PPUSH
22859: LD_VAR 0 3
22863: PPUSH
22864: CALL_OW 428
22868: PUSH
22869: LD_VAR 0 1
22873: EQUAL
22874: PUSH
22875: LD_VAR 0 1
22879: PPUSH
22880: CALL_OW 314
22884: NOT
22885: AND
22886: IFFALSE 22812
// PlaySoundXY ( x , y , PlantMine ) ;
22888: LD_VAR 0 2
22892: PPUSH
22893: LD_VAR 0 3
22897: PPUSH
22898: LD_STRING PlantMine
22900: PPUSH
22901: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
22905: LD_VAR 0 2
22909: PPUSH
22910: LD_VAR 0 3
22914: PPUSH
22915: LD_VAR 0 1
22919: PPUSH
22920: CALL_OW 255
22924: PPUSH
22925: LD_INT 0
22927: PPUSH
22928: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
22932: LD_ADDR_EXP 109
22936: PUSH
22937: LD_EXP 109
22941: PPUSH
22942: LD_VAR 0 5
22946: PUSH
22947: LD_EXP 109
22951: PUSH
22952: LD_VAR 0 5
22956: ARRAY
22957: PUSH
22958: LD_INT 1
22960: PLUS
22961: PUSH
22962: EMPTY
22963: LIST
22964: LIST
22965: PPUSH
22966: LD_VAR 0 2
22970: PUSH
22971: LD_VAR 0 3
22975: PUSH
22976: EMPTY
22977: LIST
22978: LIST
22979: PPUSH
22980: CALL 29341 0 3
22984: ST_TO_ADDR
// result := true ;
22985: LD_ADDR_VAR 0 4
22989: PUSH
22990: LD_INT 1
22992: ST_TO_ADDR
// end ;
22993: LD_VAR 0 4
22997: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
22998: LD_INT 0
23000: PPUSH
23001: PPUSH
23002: PPUSH
// if not unit in minersList then
23003: LD_VAR 0 1
23007: PUSH
23008: LD_EXP 108
23012: IN
23013: NOT
23014: IFFALSE 23018
// exit ;
23016: GO 23410
// index := GetElementIndex ( minersList , unit ) ;
23018: LD_ADDR_VAR 0 6
23022: PUSH
23023: LD_EXP 108
23027: PPUSH
23028: LD_VAR 0 1
23032: PPUSH
23033: CALL 29126 0 2
23037: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
23038: LD_ADDR_VAR 0 5
23042: PUSH
23043: DOUBLE
23044: LD_EXP 109
23048: PUSH
23049: LD_VAR 0 6
23053: ARRAY
23054: INC
23055: ST_TO_ADDR
23056: LD_INT 1
23058: PUSH
23059: FOR_DOWNTO
23060: IFFALSE 23221
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
23062: LD_EXP 109
23066: PUSH
23067: LD_VAR 0 6
23071: ARRAY
23072: PUSH
23073: LD_VAR 0 5
23077: ARRAY
23078: PUSH
23079: LD_INT 1
23081: ARRAY
23082: PUSH
23083: LD_VAR 0 2
23087: EQUAL
23088: PUSH
23089: LD_EXP 109
23093: PUSH
23094: LD_VAR 0 6
23098: ARRAY
23099: PUSH
23100: LD_VAR 0 5
23104: ARRAY
23105: PUSH
23106: LD_INT 2
23108: ARRAY
23109: PUSH
23110: LD_VAR 0 3
23114: EQUAL
23115: AND
23116: IFFALSE 23219
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23118: LD_EXP 109
23122: PUSH
23123: LD_VAR 0 6
23127: ARRAY
23128: PUSH
23129: LD_VAR 0 5
23133: ARRAY
23134: PUSH
23135: LD_INT 1
23137: ARRAY
23138: PPUSH
23139: LD_EXP 109
23143: PUSH
23144: LD_VAR 0 6
23148: ARRAY
23149: PUSH
23150: LD_VAR 0 5
23154: ARRAY
23155: PUSH
23156: LD_INT 2
23158: ARRAY
23159: PPUSH
23160: LD_VAR 0 1
23164: PPUSH
23165: CALL_OW 255
23169: PPUSH
23170: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23174: LD_ADDR_EXP 109
23178: PUSH
23179: LD_EXP 109
23183: PPUSH
23184: LD_VAR 0 6
23188: PPUSH
23189: LD_EXP 109
23193: PUSH
23194: LD_VAR 0 6
23198: ARRAY
23199: PPUSH
23200: LD_VAR 0 5
23204: PPUSH
23205: CALL_OW 3
23209: PPUSH
23210: CALL_OW 1
23214: ST_TO_ADDR
// exit ;
23215: POP
23216: POP
23217: GO 23410
// end ; end ;
23219: GO 23059
23221: POP
23222: POP
// for i := minerMinesList [ index ] downto 1 do
23223: LD_ADDR_VAR 0 5
23227: PUSH
23228: DOUBLE
23229: LD_EXP 109
23233: PUSH
23234: LD_VAR 0 6
23238: ARRAY
23239: INC
23240: ST_TO_ADDR
23241: LD_INT 1
23243: PUSH
23244: FOR_DOWNTO
23245: IFFALSE 23408
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
23247: LD_EXP 109
23251: PUSH
23252: LD_VAR 0 6
23256: ARRAY
23257: PUSH
23258: LD_VAR 0 5
23262: ARRAY
23263: PUSH
23264: LD_INT 1
23266: ARRAY
23267: PPUSH
23268: LD_EXP 109
23272: PUSH
23273: LD_VAR 0 6
23277: ARRAY
23278: PUSH
23279: LD_VAR 0 5
23283: ARRAY
23284: PUSH
23285: LD_INT 2
23287: ARRAY
23288: PPUSH
23289: LD_VAR 0 2
23293: PPUSH
23294: LD_VAR 0 3
23298: PPUSH
23299: CALL_OW 298
23303: PUSH
23304: LD_INT 6
23306: LESS
23307: IFFALSE 23406
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
23309: LD_EXP 109
23313: PUSH
23314: LD_VAR 0 6
23318: ARRAY
23319: PUSH
23320: LD_VAR 0 5
23324: ARRAY
23325: PUSH
23326: LD_INT 1
23328: ARRAY
23329: PPUSH
23330: LD_EXP 109
23334: PUSH
23335: LD_VAR 0 6
23339: ARRAY
23340: PUSH
23341: LD_VAR 0 5
23345: ARRAY
23346: PUSH
23347: LD_INT 2
23349: ARRAY
23350: PPUSH
23351: LD_VAR 0 1
23355: PPUSH
23356: CALL_OW 255
23360: PPUSH
23361: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
23365: LD_ADDR_EXP 109
23369: PUSH
23370: LD_EXP 109
23374: PPUSH
23375: LD_VAR 0 6
23379: PPUSH
23380: LD_EXP 109
23384: PUSH
23385: LD_VAR 0 6
23389: ARRAY
23390: PPUSH
23391: LD_VAR 0 5
23395: PPUSH
23396: CALL_OW 3
23400: PPUSH
23401: CALL_OW 1
23405: ST_TO_ADDR
// end ; end ;
23406: GO 23244
23408: POP
23409: POP
// end ;
23410: LD_VAR 0 4
23414: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
23415: LD_INT 0
23417: PPUSH
23418: PPUSH
23419: PPUSH
23420: PPUSH
23421: PPUSH
23422: PPUSH
23423: PPUSH
23424: PPUSH
23425: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
23426: LD_VAR 0 1
23430: PPUSH
23431: CALL_OW 264
23435: PUSH
23436: LD_INT 81
23438: EQUAL
23439: NOT
23440: PUSH
23441: LD_VAR 0 1
23445: PUSH
23446: LD_EXP 108
23450: IN
23451: NOT
23452: OR
23453: IFFALSE 23457
// exit ;
23455: GO 23779
// index := GetElementIndex ( minersList , unit ) ;
23457: LD_ADDR_VAR 0 6
23461: PUSH
23462: LD_EXP 108
23466: PPUSH
23467: LD_VAR 0 1
23471: PPUSH
23472: CALL 29126 0 2
23476: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
23477: LD_ADDR_VAR 0 8
23481: PUSH
23482: LD_EXP 110
23486: PUSH
23487: LD_EXP 109
23491: PUSH
23492: LD_VAR 0 6
23496: ARRAY
23497: MINUS
23498: ST_TO_ADDR
// if not minesFreeAmount then
23499: LD_VAR 0 8
23503: NOT
23504: IFFALSE 23508
// exit ;
23506: GO 23779
// tmp := [ ] ;
23508: LD_ADDR_VAR 0 7
23512: PUSH
23513: EMPTY
23514: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
23515: LD_ADDR_VAR 0 5
23519: PUSH
23520: DOUBLE
23521: LD_INT 1
23523: DEC
23524: ST_TO_ADDR
23525: LD_VAR 0 8
23529: PUSH
23530: FOR_TO
23531: IFFALSE 23726
// begin _d := rand ( 0 , 5 ) ;
23533: LD_ADDR_VAR 0 11
23537: PUSH
23538: LD_INT 0
23540: PPUSH
23541: LD_INT 5
23543: PPUSH
23544: CALL_OW 12
23548: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
23549: LD_ADDR_VAR 0 12
23553: PUSH
23554: LD_INT 2
23556: PPUSH
23557: LD_INT 6
23559: PPUSH
23560: CALL_OW 12
23564: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
23565: LD_ADDR_VAR 0 9
23569: PUSH
23570: LD_VAR 0 2
23574: PPUSH
23575: LD_VAR 0 11
23579: PPUSH
23580: LD_VAR 0 12
23584: PPUSH
23585: CALL_OW 272
23589: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
23590: LD_ADDR_VAR 0 10
23594: PUSH
23595: LD_VAR 0 3
23599: PPUSH
23600: LD_VAR 0 11
23604: PPUSH
23605: LD_VAR 0 12
23609: PPUSH
23610: CALL_OW 273
23614: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
23615: LD_VAR 0 9
23619: PPUSH
23620: LD_VAR 0 10
23624: PPUSH
23625: CALL_OW 488
23629: PUSH
23630: LD_VAR 0 9
23634: PUSH
23635: LD_VAR 0 10
23639: PUSH
23640: EMPTY
23641: LIST
23642: LIST
23643: PUSH
23644: LD_VAR 0 7
23648: IN
23649: NOT
23650: AND
23651: PUSH
23652: LD_VAR 0 9
23656: PPUSH
23657: LD_VAR 0 10
23661: PPUSH
23662: CALL_OW 458
23666: NOT
23667: AND
23668: IFFALSE 23710
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
23670: LD_ADDR_VAR 0 7
23674: PUSH
23675: LD_VAR 0 7
23679: PPUSH
23680: LD_VAR 0 7
23684: PUSH
23685: LD_INT 1
23687: PLUS
23688: PPUSH
23689: LD_VAR 0 9
23693: PUSH
23694: LD_VAR 0 10
23698: PUSH
23699: EMPTY
23700: LIST
23701: LIST
23702: PPUSH
23703: CALL_OW 1
23707: ST_TO_ADDR
23708: GO 23724
// i := i - 1 ;
23710: LD_ADDR_VAR 0 5
23714: PUSH
23715: LD_VAR 0 5
23719: PUSH
23720: LD_INT 1
23722: MINUS
23723: ST_TO_ADDR
// end ;
23724: GO 23530
23726: POP
23727: POP
// for i in tmp do
23728: LD_ADDR_VAR 0 5
23732: PUSH
23733: LD_VAR 0 7
23737: PUSH
23738: FOR_IN
23739: IFFALSE 23777
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
23741: LD_VAR 0 1
23745: PPUSH
23746: LD_VAR 0 5
23750: PUSH
23751: LD_INT 1
23753: ARRAY
23754: PPUSH
23755: LD_VAR 0 5
23759: PUSH
23760: LD_INT 2
23762: ARRAY
23763: PPUSH
23764: CALL 22723 0 3
23768: NOT
23769: IFFALSE 23775
// exit ;
23771: POP
23772: POP
23773: GO 23779
23775: GO 23738
23777: POP
23778: POP
// end ;
23779: LD_VAR 0 4
23783: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
23784: LD_INT 0
23786: PPUSH
23787: PPUSH
23788: PPUSH
23789: PPUSH
23790: PPUSH
23791: PPUSH
23792: PPUSH
// if not GetClass ( unit ) = class_sniper then
23793: LD_VAR 0 1
23797: PPUSH
23798: CALL_OW 257
23802: PUSH
23803: LD_INT 5
23805: EQUAL
23806: NOT
23807: IFFALSE 23811
// exit ;
23809: GO 24199
// dist := 8 ;
23811: LD_ADDR_VAR 0 5
23815: PUSH
23816: LD_INT 8
23818: ST_TO_ADDR
// viewRange := 12 ;
23819: LD_ADDR_VAR 0 7
23823: PUSH
23824: LD_INT 12
23826: ST_TO_ADDR
// side := GetSide ( unit ) ;
23827: LD_ADDR_VAR 0 6
23831: PUSH
23832: LD_VAR 0 1
23836: PPUSH
23837: CALL_OW 255
23841: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
23842: LD_INT 61
23844: PPUSH
23845: LD_VAR 0 6
23849: PPUSH
23850: CALL_OW 321
23854: PUSH
23855: LD_INT 2
23857: EQUAL
23858: IFFALSE 23868
// viewRange := 16 ;
23860: LD_ADDR_VAR 0 7
23864: PUSH
23865: LD_INT 16
23867: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
23868: LD_VAR 0 1
23872: PPUSH
23873: LD_VAR 0 2
23877: PPUSH
23878: LD_VAR 0 3
23882: PPUSH
23883: CALL_OW 297
23887: PUSH
23888: LD_VAR 0 5
23892: GREATER
23893: IFFALSE 23972
// begin ComMoveXY ( unit , x , y ) ;
23895: LD_VAR 0 1
23899: PPUSH
23900: LD_VAR 0 2
23904: PPUSH
23905: LD_VAR 0 3
23909: PPUSH
23910: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23914: LD_INT 35
23916: PPUSH
23917: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
23921: LD_VAR 0 1
23925: PPUSH
23926: LD_VAR 0 2
23930: PPUSH
23931: LD_VAR 0 3
23935: PPUSH
23936: CALL 60481 0 3
23940: NOT
23941: IFFALSE 23945
// exit ;
23943: GO 24199
// until GetDistUnitXY ( unit , x , y ) < dist ;
23945: LD_VAR 0 1
23949: PPUSH
23950: LD_VAR 0 2
23954: PPUSH
23955: LD_VAR 0 3
23959: PPUSH
23960: CALL_OW 297
23964: PUSH
23965: LD_VAR 0 5
23969: LESS
23970: IFFALSE 23914
// end ; ComTurnXY ( unit , x , y ) ;
23972: LD_VAR 0 1
23976: PPUSH
23977: LD_VAR 0 2
23981: PPUSH
23982: LD_VAR 0 3
23986: PPUSH
23987: CALL_OW 118
// wait ( 5 ) ;
23991: LD_INT 5
23993: PPUSH
23994: CALL_OW 67
// _d := GetDir ( unit ) ;
23998: LD_ADDR_VAR 0 10
24002: PUSH
24003: LD_VAR 0 1
24007: PPUSH
24008: CALL_OW 254
24012: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
24013: LD_ADDR_VAR 0 8
24017: PUSH
24018: LD_VAR 0 1
24022: PPUSH
24023: CALL_OW 250
24027: PPUSH
24028: LD_VAR 0 10
24032: PPUSH
24033: LD_VAR 0 5
24037: PPUSH
24038: CALL_OW 272
24042: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
24043: LD_ADDR_VAR 0 9
24047: PUSH
24048: LD_VAR 0 1
24052: PPUSH
24053: CALL_OW 251
24057: PPUSH
24058: LD_VAR 0 10
24062: PPUSH
24063: LD_VAR 0 5
24067: PPUSH
24068: CALL_OW 273
24072: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24073: LD_VAR 0 8
24077: PPUSH
24078: LD_VAR 0 9
24082: PPUSH
24083: CALL_OW 488
24087: NOT
24088: IFFALSE 24092
// exit ;
24090: GO 24199
// ComAnimCustom ( unit , 1 ) ;
24092: LD_VAR 0 1
24096: PPUSH
24097: LD_INT 1
24099: PPUSH
24100: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
24104: LD_VAR 0 8
24108: PPUSH
24109: LD_VAR 0 9
24113: PPUSH
24114: LD_VAR 0 6
24118: PPUSH
24119: LD_VAR 0 7
24123: PPUSH
24124: CALL_OW 330
// repeat wait ( 1 ) ;
24128: LD_INT 1
24130: PPUSH
24131: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
24135: LD_VAR 0 1
24139: PPUSH
24140: CALL_OW 316
24144: PUSH
24145: LD_VAR 0 1
24149: PPUSH
24150: CALL_OW 314
24154: OR
24155: PUSH
24156: LD_VAR 0 1
24160: PPUSH
24161: CALL_OW 302
24165: NOT
24166: OR
24167: PUSH
24168: LD_VAR 0 1
24172: PPUSH
24173: CALL_OW 301
24177: OR
24178: IFFALSE 24128
// RemoveSeeing ( _x , _y , side ) ;
24180: LD_VAR 0 8
24184: PPUSH
24185: LD_VAR 0 9
24189: PPUSH
24190: LD_VAR 0 6
24194: PPUSH
24195: CALL_OW 331
// end ; end_of_file
24199: LD_VAR 0 4
24203: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
24204: LD_INT 0
24206: PPUSH
24207: PPUSH
// if exist_mode then
24208: LD_VAR 0 2
24212: IFFALSE 24237
// unit := CreateCharacter ( prefix & ident ) else
24214: LD_ADDR_VAR 0 5
24218: PUSH
24219: LD_VAR 0 3
24223: PUSH
24224: LD_VAR 0 1
24228: STR
24229: PPUSH
24230: CALL_OW 34
24234: ST_TO_ADDR
24235: GO 24252
// unit := NewCharacter ( ident ) ;
24237: LD_ADDR_VAR 0 5
24241: PUSH
24242: LD_VAR 0 1
24246: PPUSH
24247: CALL_OW 25
24251: ST_TO_ADDR
// result := unit ;
24252: LD_ADDR_VAR 0 4
24256: PUSH
24257: LD_VAR 0 5
24261: ST_TO_ADDR
// end ;
24262: LD_VAR 0 4
24266: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
24267: LD_INT 0
24269: PPUSH
24270: PPUSH
// if not side or not nation then
24271: LD_VAR 0 1
24275: NOT
24276: PUSH
24277: LD_VAR 0 2
24281: NOT
24282: OR
24283: IFFALSE 24287
// exit ;
24285: GO 25055
// case nation of nation_american :
24287: LD_VAR 0 2
24291: PUSH
24292: LD_INT 1
24294: DOUBLE
24295: EQUAL
24296: IFTRUE 24300
24298: GO 24514
24300: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24301: LD_ADDR_VAR 0 4
24305: PUSH
24306: LD_INT 35
24308: PUSH
24309: LD_INT 45
24311: PUSH
24312: LD_INT 46
24314: PUSH
24315: LD_INT 47
24317: PUSH
24318: LD_INT 82
24320: PUSH
24321: LD_INT 83
24323: PUSH
24324: LD_INT 84
24326: PUSH
24327: LD_INT 85
24329: PUSH
24330: LD_INT 86
24332: PUSH
24333: LD_INT 1
24335: PUSH
24336: LD_INT 2
24338: PUSH
24339: LD_INT 6
24341: PUSH
24342: LD_INT 15
24344: PUSH
24345: LD_INT 16
24347: PUSH
24348: LD_INT 7
24350: PUSH
24351: LD_INT 12
24353: PUSH
24354: LD_INT 13
24356: PUSH
24357: LD_INT 10
24359: PUSH
24360: LD_INT 14
24362: PUSH
24363: LD_INT 20
24365: PUSH
24366: LD_INT 21
24368: PUSH
24369: LD_INT 22
24371: PUSH
24372: LD_INT 25
24374: PUSH
24375: LD_INT 32
24377: PUSH
24378: LD_INT 27
24380: PUSH
24381: LD_INT 36
24383: PUSH
24384: LD_INT 69
24386: PUSH
24387: LD_INT 39
24389: PUSH
24390: LD_INT 34
24392: PUSH
24393: LD_INT 40
24395: PUSH
24396: LD_INT 48
24398: PUSH
24399: LD_INT 49
24401: PUSH
24402: LD_INT 50
24404: PUSH
24405: LD_INT 51
24407: PUSH
24408: LD_INT 52
24410: PUSH
24411: LD_INT 53
24413: PUSH
24414: LD_INT 54
24416: PUSH
24417: LD_INT 55
24419: PUSH
24420: LD_INT 56
24422: PUSH
24423: LD_INT 57
24425: PUSH
24426: LD_INT 58
24428: PUSH
24429: LD_INT 59
24431: PUSH
24432: LD_INT 60
24434: PUSH
24435: LD_INT 61
24437: PUSH
24438: LD_INT 62
24440: PUSH
24441: LD_INT 80
24443: PUSH
24444: LD_INT 82
24446: PUSH
24447: LD_INT 83
24449: PUSH
24450: LD_INT 84
24452: PUSH
24453: LD_INT 85
24455: PUSH
24456: LD_INT 86
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: LIST
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: LIST
24471: LIST
24472: LIST
24473: LIST
24474: LIST
24475: LIST
24476: LIST
24477: LIST
24478: LIST
24479: LIST
24480: LIST
24481: LIST
24482: LIST
24483: LIST
24484: LIST
24485: LIST
24486: LIST
24487: LIST
24488: LIST
24489: LIST
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: LIST
24500: LIST
24501: LIST
24502: LIST
24503: LIST
24504: LIST
24505: LIST
24506: LIST
24507: LIST
24508: LIST
24509: LIST
24510: LIST
24511: ST_TO_ADDR
24512: GO 24979
24514: LD_INT 2
24516: DOUBLE
24517: EQUAL
24518: IFTRUE 24522
24520: GO 24748
24522: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24523: LD_ADDR_VAR 0 4
24527: PUSH
24528: LD_INT 35
24530: PUSH
24531: LD_INT 45
24533: PUSH
24534: LD_INT 46
24536: PUSH
24537: LD_INT 47
24539: PUSH
24540: LD_INT 82
24542: PUSH
24543: LD_INT 83
24545: PUSH
24546: LD_INT 84
24548: PUSH
24549: LD_INT 85
24551: PUSH
24552: LD_INT 87
24554: PUSH
24555: LD_INT 70
24557: PUSH
24558: LD_INT 1
24560: PUSH
24561: LD_INT 11
24563: PUSH
24564: LD_INT 3
24566: PUSH
24567: LD_INT 4
24569: PUSH
24570: LD_INT 5
24572: PUSH
24573: LD_INT 6
24575: PUSH
24576: LD_INT 15
24578: PUSH
24579: LD_INT 18
24581: PUSH
24582: LD_INT 7
24584: PUSH
24585: LD_INT 17
24587: PUSH
24588: LD_INT 8
24590: PUSH
24591: LD_INT 20
24593: PUSH
24594: LD_INT 21
24596: PUSH
24597: LD_INT 22
24599: PUSH
24600: LD_INT 72
24602: PUSH
24603: LD_INT 26
24605: PUSH
24606: LD_INT 69
24608: PUSH
24609: LD_INT 39
24611: PUSH
24612: LD_INT 40
24614: PUSH
24615: LD_INT 41
24617: PUSH
24618: LD_INT 42
24620: PUSH
24621: LD_INT 43
24623: PUSH
24624: LD_INT 48
24626: PUSH
24627: LD_INT 49
24629: PUSH
24630: LD_INT 50
24632: PUSH
24633: LD_INT 51
24635: PUSH
24636: LD_INT 52
24638: PUSH
24639: LD_INT 53
24641: PUSH
24642: LD_INT 54
24644: PUSH
24645: LD_INT 55
24647: PUSH
24648: LD_INT 56
24650: PUSH
24651: LD_INT 60
24653: PUSH
24654: LD_INT 61
24656: PUSH
24657: LD_INT 62
24659: PUSH
24660: LD_INT 66
24662: PUSH
24663: LD_INT 67
24665: PUSH
24666: LD_INT 68
24668: PUSH
24669: LD_INT 81
24671: PUSH
24672: LD_INT 82
24674: PUSH
24675: LD_INT 83
24677: PUSH
24678: LD_INT 84
24680: PUSH
24681: LD_INT 85
24683: PUSH
24684: LD_INT 87
24686: PUSH
24687: LD_INT 88
24689: PUSH
24690: EMPTY
24691: LIST
24692: LIST
24693: LIST
24694: LIST
24695: LIST
24696: LIST
24697: LIST
24698: LIST
24699: LIST
24700: LIST
24701: LIST
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: LIST
24719: LIST
24720: LIST
24721: LIST
24722: LIST
24723: LIST
24724: LIST
24725: LIST
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: ST_TO_ADDR
24746: GO 24979
24748: LD_INT 3
24750: DOUBLE
24751: EQUAL
24752: IFTRUE 24756
24754: GO 24978
24756: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24757: LD_ADDR_VAR 0 4
24761: PUSH
24762: LD_INT 46
24764: PUSH
24765: LD_INT 47
24767: PUSH
24768: LD_INT 1
24770: PUSH
24771: LD_INT 2
24773: PUSH
24774: LD_INT 82
24776: PUSH
24777: LD_INT 83
24779: PUSH
24780: LD_INT 84
24782: PUSH
24783: LD_INT 85
24785: PUSH
24786: LD_INT 86
24788: PUSH
24789: LD_INT 11
24791: PUSH
24792: LD_INT 9
24794: PUSH
24795: LD_INT 20
24797: PUSH
24798: LD_INT 19
24800: PUSH
24801: LD_INT 21
24803: PUSH
24804: LD_INT 24
24806: PUSH
24807: LD_INT 22
24809: PUSH
24810: LD_INT 25
24812: PUSH
24813: LD_INT 28
24815: PUSH
24816: LD_INT 29
24818: PUSH
24819: LD_INT 30
24821: PUSH
24822: LD_INT 31
24824: PUSH
24825: LD_INT 37
24827: PUSH
24828: LD_INT 38
24830: PUSH
24831: LD_INT 32
24833: PUSH
24834: LD_INT 27
24836: PUSH
24837: LD_INT 33
24839: PUSH
24840: LD_INT 69
24842: PUSH
24843: LD_INT 39
24845: PUSH
24846: LD_INT 34
24848: PUSH
24849: LD_INT 40
24851: PUSH
24852: LD_INT 71
24854: PUSH
24855: LD_INT 23
24857: PUSH
24858: LD_INT 44
24860: PUSH
24861: LD_INT 48
24863: PUSH
24864: LD_INT 49
24866: PUSH
24867: LD_INT 50
24869: PUSH
24870: LD_INT 51
24872: PUSH
24873: LD_INT 52
24875: PUSH
24876: LD_INT 53
24878: PUSH
24879: LD_INT 54
24881: PUSH
24882: LD_INT 55
24884: PUSH
24885: LD_INT 56
24887: PUSH
24888: LD_INT 57
24890: PUSH
24891: LD_INT 58
24893: PUSH
24894: LD_INT 59
24896: PUSH
24897: LD_INT 63
24899: PUSH
24900: LD_INT 64
24902: PUSH
24903: LD_INT 65
24905: PUSH
24906: LD_INT 82
24908: PUSH
24909: LD_INT 83
24911: PUSH
24912: LD_INT 84
24914: PUSH
24915: LD_INT 85
24917: PUSH
24918: LD_INT 86
24920: PUSH
24921: EMPTY
24922: LIST
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: LIST
24929: LIST
24930: LIST
24931: LIST
24932: LIST
24933: LIST
24934: LIST
24935: LIST
24936: LIST
24937: LIST
24938: LIST
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: LIST
24948: LIST
24949: LIST
24950: LIST
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: LIST
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: ST_TO_ADDR
24976: GO 24979
24978: POP
// if state > - 1 and state < 3 then
24979: LD_VAR 0 3
24983: PUSH
24984: LD_INT 1
24986: NEG
24987: GREATER
24988: PUSH
24989: LD_VAR 0 3
24993: PUSH
24994: LD_INT 3
24996: LESS
24997: AND
24998: IFFALSE 25055
// for i in result do
25000: LD_ADDR_VAR 0 5
25004: PUSH
25005: LD_VAR 0 4
25009: PUSH
25010: FOR_IN
25011: IFFALSE 25053
// if GetTech ( i , side ) <> state then
25013: LD_VAR 0 5
25017: PPUSH
25018: LD_VAR 0 1
25022: PPUSH
25023: CALL_OW 321
25027: PUSH
25028: LD_VAR 0 3
25032: NONEQUAL
25033: IFFALSE 25051
// result := result diff i ;
25035: LD_ADDR_VAR 0 4
25039: PUSH
25040: LD_VAR 0 4
25044: PUSH
25045: LD_VAR 0 5
25049: DIFF
25050: ST_TO_ADDR
25051: GO 25010
25053: POP
25054: POP
// end ;
25055: LD_VAR 0 4
25059: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
25060: LD_INT 0
25062: PPUSH
25063: PPUSH
25064: PPUSH
// result := true ;
25065: LD_ADDR_VAR 0 3
25069: PUSH
25070: LD_INT 1
25072: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
25073: LD_ADDR_VAR 0 5
25077: PUSH
25078: LD_VAR 0 2
25082: PPUSH
25083: CALL_OW 480
25087: ST_TO_ADDR
// if not tmp then
25088: LD_VAR 0 5
25092: NOT
25093: IFFALSE 25097
// exit ;
25095: GO 25146
// for i in tmp do
25097: LD_ADDR_VAR 0 4
25101: PUSH
25102: LD_VAR 0 5
25106: PUSH
25107: FOR_IN
25108: IFFALSE 25144
// if GetTech ( i , side ) <> state_researched then
25110: LD_VAR 0 4
25114: PPUSH
25115: LD_VAR 0 1
25119: PPUSH
25120: CALL_OW 321
25124: PUSH
25125: LD_INT 2
25127: NONEQUAL
25128: IFFALSE 25142
// begin result := false ;
25130: LD_ADDR_VAR 0 3
25134: PUSH
25135: LD_INT 0
25137: ST_TO_ADDR
// exit ;
25138: POP
25139: POP
25140: GO 25146
// end ;
25142: GO 25107
25144: POP
25145: POP
// end ;
25146: LD_VAR 0 3
25150: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
25151: LD_INT 0
25153: PPUSH
25154: PPUSH
25155: PPUSH
25156: PPUSH
25157: PPUSH
25158: PPUSH
25159: PPUSH
25160: PPUSH
25161: PPUSH
25162: PPUSH
25163: PPUSH
25164: PPUSH
25165: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
25166: LD_VAR 0 1
25170: NOT
25171: PUSH
25172: LD_VAR 0 1
25176: PPUSH
25177: CALL_OW 257
25181: PUSH
25182: LD_INT 9
25184: NONEQUAL
25185: OR
25186: IFFALSE 25190
// exit ;
25188: GO 25763
// side := GetSide ( unit ) ;
25190: LD_ADDR_VAR 0 9
25194: PUSH
25195: LD_VAR 0 1
25199: PPUSH
25200: CALL_OW 255
25204: ST_TO_ADDR
// tech_space := tech_spacanom ;
25205: LD_ADDR_VAR 0 12
25209: PUSH
25210: LD_INT 29
25212: ST_TO_ADDR
// tech_time := tech_taurad ;
25213: LD_ADDR_VAR 0 13
25217: PUSH
25218: LD_INT 28
25220: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
25221: LD_ADDR_VAR 0 11
25225: PUSH
25226: LD_VAR 0 1
25230: PPUSH
25231: CALL_OW 310
25235: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
25236: LD_VAR 0 11
25240: PPUSH
25241: CALL_OW 247
25245: PUSH
25246: LD_INT 2
25248: EQUAL
25249: IFFALSE 25253
// exit ;
25251: GO 25763
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25253: LD_ADDR_VAR 0 8
25257: PUSH
25258: LD_INT 81
25260: PUSH
25261: LD_VAR 0 9
25265: PUSH
25266: EMPTY
25267: LIST
25268: LIST
25269: PUSH
25270: LD_INT 3
25272: PUSH
25273: LD_INT 21
25275: PUSH
25276: LD_INT 3
25278: PUSH
25279: EMPTY
25280: LIST
25281: LIST
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: PPUSH
25291: CALL_OW 69
25295: ST_TO_ADDR
// if not tmp then
25296: LD_VAR 0 8
25300: NOT
25301: IFFALSE 25305
// exit ;
25303: GO 25763
// if in_unit then
25305: LD_VAR 0 11
25309: IFFALSE 25333
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25311: LD_ADDR_VAR 0 10
25315: PUSH
25316: LD_VAR 0 8
25320: PPUSH
25321: LD_VAR 0 11
25325: PPUSH
25326: CALL_OW 74
25330: ST_TO_ADDR
25331: GO 25353
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25333: LD_ADDR_VAR 0 10
25337: PUSH
25338: LD_VAR 0 8
25342: PPUSH
25343: LD_VAR 0 1
25347: PPUSH
25348: CALL_OW 74
25352: ST_TO_ADDR
// if not enemy then
25353: LD_VAR 0 10
25357: NOT
25358: IFFALSE 25362
// exit ;
25360: GO 25763
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25362: LD_VAR 0 11
25366: PUSH
25367: LD_VAR 0 11
25371: PPUSH
25372: LD_VAR 0 10
25376: PPUSH
25377: CALL_OW 296
25381: PUSH
25382: LD_INT 13
25384: GREATER
25385: AND
25386: PUSH
25387: LD_VAR 0 1
25391: PPUSH
25392: LD_VAR 0 10
25396: PPUSH
25397: CALL_OW 296
25401: PUSH
25402: LD_INT 12
25404: GREATER
25405: OR
25406: IFFALSE 25410
// exit ;
25408: GO 25763
// missile := [ 1 ] ;
25410: LD_ADDR_VAR 0 14
25414: PUSH
25415: LD_INT 1
25417: PUSH
25418: EMPTY
25419: LIST
25420: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25421: LD_VAR 0 9
25425: PPUSH
25426: LD_VAR 0 12
25430: PPUSH
25431: CALL_OW 325
25435: IFFALSE 25464
// missile := Replace ( missile , missile + 1 , 2 ) ;
25437: LD_ADDR_VAR 0 14
25441: PUSH
25442: LD_VAR 0 14
25446: PPUSH
25447: LD_VAR 0 14
25451: PUSH
25452: LD_INT 1
25454: PLUS
25455: PPUSH
25456: LD_INT 2
25458: PPUSH
25459: CALL_OW 1
25463: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25464: LD_VAR 0 9
25468: PPUSH
25469: LD_VAR 0 13
25473: PPUSH
25474: CALL_OW 325
25478: PUSH
25479: LD_VAR 0 10
25483: PPUSH
25484: CALL_OW 255
25488: PPUSH
25489: LD_VAR 0 13
25493: PPUSH
25494: CALL_OW 325
25498: NOT
25499: AND
25500: IFFALSE 25529
// missile := Replace ( missile , missile + 1 , 3 ) ;
25502: LD_ADDR_VAR 0 14
25506: PUSH
25507: LD_VAR 0 14
25511: PPUSH
25512: LD_VAR 0 14
25516: PUSH
25517: LD_INT 1
25519: PLUS
25520: PPUSH
25521: LD_INT 3
25523: PPUSH
25524: CALL_OW 1
25528: ST_TO_ADDR
// if missile < 2 then
25529: LD_VAR 0 14
25533: PUSH
25534: LD_INT 2
25536: LESS
25537: IFFALSE 25541
// exit ;
25539: GO 25763
// x := GetX ( enemy ) ;
25541: LD_ADDR_VAR 0 4
25545: PUSH
25546: LD_VAR 0 10
25550: PPUSH
25551: CALL_OW 250
25555: ST_TO_ADDR
// y := GetY ( enemy ) ;
25556: LD_ADDR_VAR 0 5
25560: PUSH
25561: LD_VAR 0 10
25565: PPUSH
25566: CALL_OW 251
25570: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25571: LD_ADDR_VAR 0 6
25575: PUSH
25576: LD_VAR 0 4
25580: PUSH
25581: LD_INT 1
25583: NEG
25584: PPUSH
25585: LD_INT 1
25587: PPUSH
25588: CALL_OW 12
25592: PLUS
25593: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25594: LD_ADDR_VAR 0 7
25598: PUSH
25599: LD_VAR 0 5
25603: PUSH
25604: LD_INT 1
25606: NEG
25607: PPUSH
25608: LD_INT 1
25610: PPUSH
25611: CALL_OW 12
25615: PLUS
25616: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25617: LD_VAR 0 6
25621: PPUSH
25622: LD_VAR 0 7
25626: PPUSH
25627: CALL_OW 488
25631: NOT
25632: IFFALSE 25654
// begin _x := x ;
25634: LD_ADDR_VAR 0 6
25638: PUSH
25639: LD_VAR 0 4
25643: ST_TO_ADDR
// _y := y ;
25644: LD_ADDR_VAR 0 7
25648: PUSH
25649: LD_VAR 0 5
25653: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25654: LD_ADDR_VAR 0 3
25658: PUSH
25659: LD_INT 1
25661: PPUSH
25662: LD_VAR 0 14
25666: PPUSH
25667: CALL_OW 12
25671: ST_TO_ADDR
// case i of 1 :
25672: LD_VAR 0 3
25676: PUSH
25677: LD_INT 1
25679: DOUBLE
25680: EQUAL
25681: IFTRUE 25685
25683: GO 25702
25685: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25686: LD_VAR 0 1
25690: PPUSH
25691: LD_VAR 0 10
25695: PPUSH
25696: CALL_OW 115
25700: GO 25763
25702: LD_INT 2
25704: DOUBLE
25705: EQUAL
25706: IFTRUE 25710
25708: GO 25732
25710: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25711: LD_VAR 0 1
25715: PPUSH
25716: LD_VAR 0 6
25720: PPUSH
25721: LD_VAR 0 7
25725: PPUSH
25726: CALL_OW 153
25730: GO 25763
25732: LD_INT 3
25734: DOUBLE
25735: EQUAL
25736: IFTRUE 25740
25738: GO 25762
25740: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25741: LD_VAR 0 1
25745: PPUSH
25746: LD_VAR 0 6
25750: PPUSH
25751: LD_VAR 0 7
25755: PPUSH
25756: CALL_OW 154
25760: GO 25763
25762: POP
// end ;
25763: LD_VAR 0 2
25767: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25768: LD_INT 0
25770: PPUSH
25771: PPUSH
25772: PPUSH
25773: PPUSH
25774: PPUSH
25775: PPUSH
// if not unit or not building then
25776: LD_VAR 0 1
25780: NOT
25781: PUSH
25782: LD_VAR 0 2
25786: NOT
25787: OR
25788: IFFALSE 25792
// exit ;
25790: GO 25950
// x := GetX ( building ) ;
25792: LD_ADDR_VAR 0 5
25796: PUSH
25797: LD_VAR 0 2
25801: PPUSH
25802: CALL_OW 250
25806: ST_TO_ADDR
// y := GetY ( building ) ;
25807: LD_ADDR_VAR 0 6
25811: PUSH
25812: LD_VAR 0 2
25816: PPUSH
25817: CALL_OW 251
25821: ST_TO_ADDR
// for i = 0 to 5 do
25822: LD_ADDR_VAR 0 4
25826: PUSH
25827: DOUBLE
25828: LD_INT 0
25830: DEC
25831: ST_TO_ADDR
25832: LD_INT 5
25834: PUSH
25835: FOR_TO
25836: IFFALSE 25948
// begin _x := ShiftX ( x , i , 3 ) ;
25838: LD_ADDR_VAR 0 7
25842: PUSH
25843: LD_VAR 0 5
25847: PPUSH
25848: LD_VAR 0 4
25852: PPUSH
25853: LD_INT 3
25855: PPUSH
25856: CALL_OW 272
25860: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25861: LD_ADDR_VAR 0 8
25865: PUSH
25866: LD_VAR 0 6
25870: PPUSH
25871: LD_VAR 0 4
25875: PPUSH
25876: LD_INT 3
25878: PPUSH
25879: CALL_OW 273
25883: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25884: LD_VAR 0 7
25888: PPUSH
25889: LD_VAR 0 8
25893: PPUSH
25894: CALL_OW 488
25898: NOT
25899: IFFALSE 25903
// continue ;
25901: GO 25835
// if HexInfo ( _x , _y ) = 0 then
25903: LD_VAR 0 7
25907: PPUSH
25908: LD_VAR 0 8
25912: PPUSH
25913: CALL_OW 428
25917: PUSH
25918: LD_INT 0
25920: EQUAL
25921: IFFALSE 25946
// begin ComMoveXY ( unit , _x , _y ) ;
25923: LD_VAR 0 1
25927: PPUSH
25928: LD_VAR 0 7
25932: PPUSH
25933: LD_VAR 0 8
25937: PPUSH
25938: CALL_OW 111
// exit ;
25942: POP
25943: POP
25944: GO 25950
// end ; end ;
25946: GO 25835
25948: POP
25949: POP
// end ;
25950: LD_VAR 0 3
25954: RET
// export function ScanBase ( side , base_area ) ; begin
25955: LD_INT 0
25957: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25958: LD_ADDR_VAR 0 3
25962: PUSH
25963: LD_VAR 0 2
25967: PPUSH
25968: LD_INT 81
25970: PUSH
25971: LD_VAR 0 1
25975: PUSH
25976: EMPTY
25977: LIST
25978: LIST
25979: PPUSH
25980: CALL_OW 70
25984: ST_TO_ADDR
// end ;
25985: LD_VAR 0 3
25989: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25990: LD_INT 0
25992: PPUSH
25993: PPUSH
25994: PPUSH
25995: PPUSH
// result := false ;
25996: LD_ADDR_VAR 0 2
26000: PUSH
26001: LD_INT 0
26003: ST_TO_ADDR
// side := GetSide ( unit ) ;
26004: LD_ADDR_VAR 0 3
26008: PUSH
26009: LD_VAR 0 1
26013: PPUSH
26014: CALL_OW 255
26018: ST_TO_ADDR
// nat := GetNation ( unit ) ;
26019: LD_ADDR_VAR 0 4
26023: PUSH
26024: LD_VAR 0 1
26028: PPUSH
26029: CALL_OW 248
26033: ST_TO_ADDR
// case nat of 1 :
26034: LD_VAR 0 4
26038: PUSH
26039: LD_INT 1
26041: DOUBLE
26042: EQUAL
26043: IFTRUE 26047
26045: GO 26058
26047: POP
// tech := tech_lassight ; 2 :
26048: LD_ADDR_VAR 0 5
26052: PUSH
26053: LD_INT 12
26055: ST_TO_ADDR
26056: GO 26097
26058: LD_INT 2
26060: DOUBLE
26061: EQUAL
26062: IFTRUE 26066
26064: GO 26077
26066: POP
// tech := tech_mortar ; 3 :
26067: LD_ADDR_VAR 0 5
26071: PUSH
26072: LD_INT 41
26074: ST_TO_ADDR
26075: GO 26097
26077: LD_INT 3
26079: DOUBLE
26080: EQUAL
26081: IFTRUE 26085
26083: GO 26096
26085: POP
// tech := tech_bazooka ; end ;
26086: LD_ADDR_VAR 0 5
26090: PUSH
26091: LD_INT 44
26093: ST_TO_ADDR
26094: GO 26097
26096: POP
// if Researched ( side , tech ) then
26097: LD_VAR 0 3
26101: PPUSH
26102: LD_VAR 0 5
26106: PPUSH
26107: CALL_OW 325
26111: IFFALSE 26138
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
26113: LD_ADDR_VAR 0 2
26117: PUSH
26118: LD_INT 5
26120: PUSH
26121: LD_INT 8
26123: PUSH
26124: LD_INT 9
26126: PUSH
26127: EMPTY
26128: LIST
26129: LIST
26130: LIST
26131: PUSH
26132: LD_VAR 0 4
26136: ARRAY
26137: ST_TO_ADDR
// end ;
26138: LD_VAR 0 2
26142: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
26143: LD_INT 0
26145: PPUSH
26146: PPUSH
26147: PPUSH
// if not mines then
26148: LD_VAR 0 2
26152: NOT
26153: IFFALSE 26157
// exit ;
26155: GO 26301
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26157: LD_ADDR_VAR 0 5
26161: PUSH
26162: LD_INT 81
26164: PUSH
26165: LD_VAR 0 1
26169: PUSH
26170: EMPTY
26171: LIST
26172: LIST
26173: PUSH
26174: LD_INT 3
26176: PUSH
26177: LD_INT 21
26179: PUSH
26180: LD_INT 3
26182: PUSH
26183: EMPTY
26184: LIST
26185: LIST
26186: PUSH
26187: EMPTY
26188: LIST
26189: LIST
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PPUSH
26195: CALL_OW 69
26199: ST_TO_ADDR
// for i in mines do
26200: LD_ADDR_VAR 0 4
26204: PUSH
26205: LD_VAR 0 2
26209: PUSH
26210: FOR_IN
26211: IFFALSE 26299
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
26213: LD_VAR 0 4
26217: PUSH
26218: LD_INT 1
26220: ARRAY
26221: PPUSH
26222: LD_VAR 0 4
26226: PUSH
26227: LD_INT 2
26229: ARRAY
26230: PPUSH
26231: CALL_OW 458
26235: NOT
26236: IFFALSE 26240
// continue ;
26238: GO 26210
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
26240: LD_VAR 0 4
26244: PUSH
26245: LD_INT 1
26247: ARRAY
26248: PPUSH
26249: LD_VAR 0 4
26253: PUSH
26254: LD_INT 2
26256: ARRAY
26257: PPUSH
26258: CALL_OW 428
26262: PUSH
26263: LD_VAR 0 5
26267: IN
26268: IFFALSE 26297
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
26270: LD_VAR 0 4
26274: PUSH
26275: LD_INT 1
26277: ARRAY
26278: PPUSH
26279: LD_VAR 0 4
26283: PUSH
26284: LD_INT 2
26286: ARRAY
26287: PPUSH
26288: LD_VAR 0 1
26292: PPUSH
26293: CALL_OW 456
// end ;
26297: GO 26210
26299: POP
26300: POP
// end ;
26301: LD_VAR 0 3
26305: RET
// export function Count ( array ) ; var i ; begin
26306: LD_INT 0
26308: PPUSH
26309: PPUSH
// result := 0 ;
26310: LD_ADDR_VAR 0 2
26314: PUSH
26315: LD_INT 0
26317: ST_TO_ADDR
// for i in array do
26318: LD_ADDR_VAR 0 3
26322: PUSH
26323: LD_VAR 0 1
26327: PUSH
26328: FOR_IN
26329: IFFALSE 26353
// if i then
26331: LD_VAR 0 3
26335: IFFALSE 26351
// result := result + 1 ;
26337: LD_ADDR_VAR 0 2
26341: PUSH
26342: LD_VAR 0 2
26346: PUSH
26347: LD_INT 1
26349: PLUS
26350: ST_TO_ADDR
26351: GO 26328
26353: POP
26354: POP
// end ;
26355: LD_VAR 0 2
26359: RET
// export function IsEmpty ( building ) ; begin
26360: LD_INT 0
26362: PPUSH
// if not building then
26363: LD_VAR 0 1
26367: NOT
26368: IFFALSE 26372
// exit ;
26370: GO 26415
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26372: LD_ADDR_VAR 0 2
26376: PUSH
26377: LD_VAR 0 1
26381: PUSH
26382: LD_INT 22
26384: PUSH
26385: LD_VAR 0 1
26389: PPUSH
26390: CALL_OW 255
26394: PUSH
26395: EMPTY
26396: LIST
26397: LIST
26398: PUSH
26399: LD_INT 58
26401: PUSH
26402: EMPTY
26403: LIST
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: PPUSH
26409: CALL_OW 69
26413: IN
26414: ST_TO_ADDR
// end ;
26415: LD_VAR 0 2
26419: RET
// export function IsNotFull ( building ) ; var places ; begin
26420: LD_INT 0
26422: PPUSH
26423: PPUSH
// if not building then
26424: LD_VAR 0 1
26428: NOT
26429: IFFALSE 26433
// exit ;
26431: GO 26604
// result := false ;
26433: LD_ADDR_VAR 0 2
26437: PUSH
26438: LD_INT 0
26440: ST_TO_ADDR
// places := 0 ;
26441: LD_ADDR_VAR 0 3
26445: PUSH
26446: LD_INT 0
26448: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
26449: LD_VAR 0 1
26453: PPUSH
26454: CALL_OW 266
26458: PUSH
26459: LD_INT 0
26461: DOUBLE
26462: EQUAL
26463: IFTRUE 26521
26465: LD_INT 1
26467: DOUBLE
26468: EQUAL
26469: IFTRUE 26521
26471: LD_INT 6
26473: DOUBLE
26474: EQUAL
26475: IFTRUE 26521
26477: LD_INT 7
26479: DOUBLE
26480: EQUAL
26481: IFTRUE 26521
26483: LD_INT 8
26485: DOUBLE
26486: EQUAL
26487: IFTRUE 26521
26489: LD_INT 4
26491: DOUBLE
26492: EQUAL
26493: IFTRUE 26521
26495: LD_INT 5
26497: DOUBLE
26498: EQUAL
26499: IFTRUE 26521
26501: LD_INT 2
26503: DOUBLE
26504: EQUAL
26505: IFTRUE 26521
26507: LD_INT 3
26509: DOUBLE
26510: EQUAL
26511: IFTRUE 26521
26513: LD_INT 35
26515: DOUBLE
26516: EQUAL
26517: IFTRUE 26521
26519: GO 26532
26521: POP
// places := 6 ; b_bunker , b_breastwork :
26522: LD_ADDR_VAR 0 3
26526: PUSH
26527: LD_INT 6
26529: ST_TO_ADDR
26530: GO 26577
26532: LD_INT 32
26534: DOUBLE
26535: EQUAL
26536: IFTRUE 26546
26538: LD_INT 31
26540: DOUBLE
26541: EQUAL
26542: IFTRUE 26546
26544: GO 26557
26546: POP
// places := 1 ; b_control_tower :
26547: LD_ADDR_VAR 0 3
26551: PUSH
26552: LD_INT 1
26554: ST_TO_ADDR
26555: GO 26577
26557: LD_INT 36
26559: DOUBLE
26560: EQUAL
26561: IFTRUE 26565
26563: GO 26576
26565: POP
// places := 3 ; end ;
26566: LD_ADDR_VAR 0 3
26570: PUSH
26571: LD_INT 3
26573: ST_TO_ADDR
26574: GO 26577
26576: POP
// if places then
26577: LD_VAR 0 3
26581: IFFALSE 26604
// result := UnitsInside ( building ) < places ;
26583: LD_ADDR_VAR 0 2
26587: PUSH
26588: LD_VAR 0 1
26592: PPUSH
26593: CALL_OW 313
26597: PUSH
26598: LD_VAR 0 3
26602: LESS
26603: ST_TO_ADDR
// end ;
26604: LD_VAR 0 2
26608: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26609: LD_INT 0
26611: PPUSH
26612: PPUSH
26613: PPUSH
26614: PPUSH
// tmp := [ ] ;
26615: LD_ADDR_VAR 0 3
26619: PUSH
26620: EMPTY
26621: ST_TO_ADDR
// list := [ ] ;
26622: LD_ADDR_VAR 0 5
26626: PUSH
26627: EMPTY
26628: ST_TO_ADDR
// for i = 16 to 25 do
26629: LD_ADDR_VAR 0 4
26633: PUSH
26634: DOUBLE
26635: LD_INT 16
26637: DEC
26638: ST_TO_ADDR
26639: LD_INT 25
26641: PUSH
26642: FOR_TO
26643: IFFALSE 26716
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26645: LD_ADDR_VAR 0 3
26649: PUSH
26650: LD_VAR 0 3
26654: PUSH
26655: LD_INT 22
26657: PUSH
26658: LD_VAR 0 1
26662: PPUSH
26663: CALL_OW 255
26667: PUSH
26668: EMPTY
26669: LIST
26670: LIST
26671: PUSH
26672: LD_INT 91
26674: PUSH
26675: LD_VAR 0 1
26679: PUSH
26680: LD_INT 6
26682: PUSH
26683: EMPTY
26684: LIST
26685: LIST
26686: LIST
26687: PUSH
26688: LD_INT 30
26690: PUSH
26691: LD_VAR 0 4
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: EMPTY
26701: LIST
26702: LIST
26703: LIST
26704: PUSH
26705: EMPTY
26706: LIST
26707: PPUSH
26708: CALL_OW 69
26712: ADD
26713: ST_TO_ADDR
26714: GO 26642
26716: POP
26717: POP
// for i = 1 to tmp do
26718: LD_ADDR_VAR 0 4
26722: PUSH
26723: DOUBLE
26724: LD_INT 1
26726: DEC
26727: ST_TO_ADDR
26728: LD_VAR 0 3
26732: PUSH
26733: FOR_TO
26734: IFFALSE 26822
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26736: LD_ADDR_VAR 0 5
26740: PUSH
26741: LD_VAR 0 5
26745: PUSH
26746: LD_VAR 0 3
26750: PUSH
26751: LD_VAR 0 4
26755: ARRAY
26756: PPUSH
26757: CALL_OW 266
26761: PUSH
26762: LD_VAR 0 3
26766: PUSH
26767: LD_VAR 0 4
26771: ARRAY
26772: PPUSH
26773: CALL_OW 250
26777: PUSH
26778: LD_VAR 0 3
26782: PUSH
26783: LD_VAR 0 4
26787: ARRAY
26788: PPUSH
26789: CALL_OW 251
26793: PUSH
26794: LD_VAR 0 3
26798: PUSH
26799: LD_VAR 0 4
26803: ARRAY
26804: PPUSH
26805: CALL_OW 254
26809: PUSH
26810: EMPTY
26811: LIST
26812: LIST
26813: LIST
26814: LIST
26815: PUSH
26816: EMPTY
26817: LIST
26818: ADD
26819: ST_TO_ADDR
26820: GO 26733
26822: POP
26823: POP
// result := list ;
26824: LD_ADDR_VAR 0 2
26828: PUSH
26829: LD_VAR 0 5
26833: ST_TO_ADDR
// end ;
26834: LD_VAR 0 2
26838: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26839: LD_INT 0
26841: PPUSH
26842: PPUSH
26843: PPUSH
26844: PPUSH
26845: PPUSH
26846: PPUSH
26847: PPUSH
// if not factory then
26848: LD_VAR 0 1
26852: NOT
26853: IFFALSE 26857
// exit ;
26855: GO 27450
// if control = control_apeman then
26857: LD_VAR 0 4
26861: PUSH
26862: LD_INT 5
26864: EQUAL
26865: IFFALSE 26974
// begin tmp := UnitsInside ( factory ) ;
26867: LD_ADDR_VAR 0 8
26871: PUSH
26872: LD_VAR 0 1
26876: PPUSH
26877: CALL_OW 313
26881: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26882: LD_VAR 0 8
26886: PPUSH
26887: LD_INT 25
26889: PUSH
26890: LD_INT 12
26892: PUSH
26893: EMPTY
26894: LIST
26895: LIST
26896: PPUSH
26897: CALL_OW 72
26901: NOT
26902: IFFALSE 26912
// control := control_manual ;
26904: LD_ADDR_VAR 0 4
26908: PUSH
26909: LD_INT 1
26911: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26912: LD_ADDR_VAR 0 8
26916: PUSH
26917: LD_VAR 0 1
26921: PPUSH
26922: CALL 26609 0 1
26926: ST_TO_ADDR
// if tmp then
26927: LD_VAR 0 8
26931: IFFALSE 26974
// begin for i in tmp do
26933: LD_ADDR_VAR 0 7
26937: PUSH
26938: LD_VAR 0 8
26942: PUSH
26943: FOR_IN
26944: IFFALSE 26972
// if i [ 1 ] = b_ext_radio then
26946: LD_VAR 0 7
26950: PUSH
26951: LD_INT 1
26953: ARRAY
26954: PUSH
26955: LD_INT 22
26957: EQUAL
26958: IFFALSE 26970
// begin control := control_remote ;
26960: LD_ADDR_VAR 0 4
26964: PUSH
26965: LD_INT 2
26967: ST_TO_ADDR
// break ;
26968: GO 26972
// end ;
26970: GO 26943
26972: POP
26973: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26974: LD_VAR 0 1
26978: PPUSH
26979: LD_VAR 0 2
26983: PPUSH
26984: LD_VAR 0 3
26988: PPUSH
26989: LD_VAR 0 4
26993: PPUSH
26994: LD_VAR 0 5
26998: PPUSH
26999: CALL_OW 448
27003: IFFALSE 27038
// begin result := [ chassis , engine , control , weapon ] ;
27005: LD_ADDR_VAR 0 6
27009: PUSH
27010: LD_VAR 0 2
27014: PUSH
27015: LD_VAR 0 3
27019: PUSH
27020: LD_VAR 0 4
27024: PUSH
27025: LD_VAR 0 5
27029: PUSH
27030: EMPTY
27031: LIST
27032: LIST
27033: LIST
27034: LIST
27035: ST_TO_ADDR
// exit ;
27036: GO 27450
// end ; _chassis := AvailableChassisList ( factory ) ;
27038: LD_ADDR_VAR 0 9
27042: PUSH
27043: LD_VAR 0 1
27047: PPUSH
27048: CALL_OW 475
27052: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
27053: LD_ADDR_VAR 0 11
27057: PUSH
27058: LD_VAR 0 1
27062: PPUSH
27063: CALL_OW 476
27067: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
27068: LD_ADDR_VAR 0 12
27072: PUSH
27073: LD_VAR 0 1
27077: PPUSH
27078: CALL_OW 477
27082: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
27083: LD_ADDR_VAR 0 10
27087: PUSH
27088: LD_VAR 0 1
27092: PPUSH
27093: CALL_OW 478
27097: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
27098: LD_VAR 0 9
27102: NOT
27103: PUSH
27104: LD_VAR 0 11
27108: NOT
27109: OR
27110: PUSH
27111: LD_VAR 0 12
27115: NOT
27116: OR
27117: PUSH
27118: LD_VAR 0 10
27122: NOT
27123: OR
27124: IFFALSE 27159
// begin result := [ chassis , engine , control , weapon ] ;
27126: LD_ADDR_VAR 0 6
27130: PUSH
27131: LD_VAR 0 2
27135: PUSH
27136: LD_VAR 0 3
27140: PUSH
27141: LD_VAR 0 4
27145: PUSH
27146: LD_VAR 0 5
27150: PUSH
27151: EMPTY
27152: LIST
27153: LIST
27154: LIST
27155: LIST
27156: ST_TO_ADDR
// exit ;
27157: GO 27450
// end ; if not chassis in _chassis then
27159: LD_VAR 0 2
27163: PUSH
27164: LD_VAR 0 9
27168: IN
27169: NOT
27170: IFFALSE 27196
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
27172: LD_ADDR_VAR 0 2
27176: PUSH
27177: LD_VAR 0 9
27181: PUSH
27182: LD_INT 1
27184: PPUSH
27185: LD_VAR 0 9
27189: PPUSH
27190: CALL_OW 12
27194: ARRAY
27195: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
27196: LD_VAR 0 2
27200: PPUSH
27201: LD_VAR 0 3
27205: PPUSH
27206: CALL 27455 0 2
27210: NOT
27211: IFFALSE 27270
// repeat engine := _engine [ 1 ] ;
27213: LD_ADDR_VAR 0 3
27217: PUSH
27218: LD_VAR 0 11
27222: PUSH
27223: LD_INT 1
27225: ARRAY
27226: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
27227: LD_ADDR_VAR 0 11
27231: PUSH
27232: LD_VAR 0 11
27236: PPUSH
27237: LD_INT 1
27239: PPUSH
27240: CALL_OW 3
27244: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
27245: LD_VAR 0 2
27249: PPUSH
27250: LD_VAR 0 3
27254: PPUSH
27255: CALL 27455 0 2
27259: PUSH
27260: LD_VAR 0 11
27264: PUSH
27265: EMPTY
27266: EQUAL
27267: OR
27268: IFFALSE 27213
// if not control in _control then
27270: LD_VAR 0 4
27274: PUSH
27275: LD_VAR 0 12
27279: IN
27280: NOT
27281: IFFALSE 27307
// control := _control [ rand ( 1 , _control ) ] ;
27283: LD_ADDR_VAR 0 4
27287: PUSH
27288: LD_VAR 0 12
27292: PUSH
27293: LD_INT 1
27295: PPUSH
27296: LD_VAR 0 12
27300: PPUSH
27301: CALL_OW 12
27305: ARRAY
27306: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
27307: LD_VAR 0 2
27311: PPUSH
27312: LD_VAR 0 5
27316: PPUSH
27317: CALL 27675 0 2
27321: NOT
27322: IFFALSE 27381
// repeat weapon := _weapon [ 1 ] ;
27324: LD_ADDR_VAR 0 5
27328: PUSH
27329: LD_VAR 0 10
27333: PUSH
27334: LD_INT 1
27336: ARRAY
27337: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
27338: LD_ADDR_VAR 0 10
27342: PUSH
27343: LD_VAR 0 10
27347: PPUSH
27348: LD_INT 1
27350: PPUSH
27351: CALL_OW 3
27355: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
27356: LD_VAR 0 2
27360: PPUSH
27361: LD_VAR 0 5
27365: PPUSH
27366: CALL 27675 0 2
27370: PUSH
27371: LD_VAR 0 10
27375: PUSH
27376: EMPTY
27377: EQUAL
27378: OR
27379: IFFALSE 27324
// result := [ ] ;
27381: LD_ADDR_VAR 0 6
27385: PUSH
27386: EMPTY
27387: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
27388: LD_VAR 0 1
27392: PPUSH
27393: LD_VAR 0 2
27397: PPUSH
27398: LD_VAR 0 3
27402: PPUSH
27403: LD_VAR 0 4
27407: PPUSH
27408: LD_VAR 0 5
27412: PPUSH
27413: CALL_OW 448
27417: IFFALSE 27450
// result := [ chassis , engine , control , weapon ] ;
27419: LD_ADDR_VAR 0 6
27423: PUSH
27424: LD_VAR 0 2
27428: PUSH
27429: LD_VAR 0 3
27433: PUSH
27434: LD_VAR 0 4
27438: PUSH
27439: LD_VAR 0 5
27443: PUSH
27444: EMPTY
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: ST_TO_ADDR
// end ;
27450: LD_VAR 0 6
27454: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
27455: LD_INT 0
27457: PPUSH
// if not chassis or not engine then
27458: LD_VAR 0 1
27462: NOT
27463: PUSH
27464: LD_VAR 0 2
27468: NOT
27469: OR
27470: IFFALSE 27474
// exit ;
27472: GO 27670
// case engine of engine_solar :
27474: LD_VAR 0 2
27478: PUSH
27479: LD_INT 2
27481: DOUBLE
27482: EQUAL
27483: IFTRUE 27487
27485: GO 27525
27487: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27488: LD_ADDR_VAR 0 3
27492: PUSH
27493: LD_INT 11
27495: PUSH
27496: LD_INT 12
27498: PUSH
27499: LD_INT 13
27501: PUSH
27502: LD_INT 14
27504: PUSH
27505: LD_INT 1
27507: PUSH
27508: LD_INT 2
27510: PUSH
27511: LD_INT 3
27513: PUSH
27514: EMPTY
27515: LIST
27516: LIST
27517: LIST
27518: LIST
27519: LIST
27520: LIST
27521: LIST
27522: ST_TO_ADDR
27523: GO 27654
27525: LD_INT 1
27527: DOUBLE
27528: EQUAL
27529: IFTRUE 27533
27531: GO 27595
27533: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27534: LD_ADDR_VAR 0 3
27538: PUSH
27539: LD_INT 11
27541: PUSH
27542: LD_INT 12
27544: PUSH
27545: LD_INT 13
27547: PUSH
27548: LD_INT 14
27550: PUSH
27551: LD_INT 1
27553: PUSH
27554: LD_INT 2
27556: PUSH
27557: LD_INT 3
27559: PUSH
27560: LD_INT 4
27562: PUSH
27563: LD_INT 5
27565: PUSH
27566: LD_INT 21
27568: PUSH
27569: LD_INT 23
27571: PUSH
27572: LD_INT 22
27574: PUSH
27575: LD_INT 24
27577: PUSH
27578: EMPTY
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: LIST
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: ST_TO_ADDR
27593: GO 27654
27595: LD_INT 3
27597: DOUBLE
27598: EQUAL
27599: IFTRUE 27603
27601: GO 27653
27603: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27604: LD_ADDR_VAR 0 3
27608: PUSH
27609: LD_INT 13
27611: PUSH
27612: LD_INT 14
27614: PUSH
27615: LD_INT 2
27617: PUSH
27618: LD_INT 3
27620: PUSH
27621: LD_INT 4
27623: PUSH
27624: LD_INT 5
27626: PUSH
27627: LD_INT 21
27629: PUSH
27630: LD_INT 22
27632: PUSH
27633: LD_INT 23
27635: PUSH
27636: LD_INT 24
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: LIST
27643: LIST
27644: LIST
27645: LIST
27646: LIST
27647: LIST
27648: LIST
27649: LIST
27650: ST_TO_ADDR
27651: GO 27654
27653: POP
// result := ( chassis in result ) ;
27654: LD_ADDR_VAR 0 3
27658: PUSH
27659: LD_VAR 0 1
27663: PUSH
27664: LD_VAR 0 3
27668: IN
27669: ST_TO_ADDR
// end ;
27670: LD_VAR 0 3
27674: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27675: LD_INT 0
27677: PPUSH
// if not chassis or not weapon then
27678: LD_VAR 0 1
27682: NOT
27683: PUSH
27684: LD_VAR 0 2
27688: NOT
27689: OR
27690: IFFALSE 27694
// exit ;
27692: GO 28754
// case weapon of us_machine_gun :
27694: LD_VAR 0 2
27698: PUSH
27699: LD_INT 2
27701: DOUBLE
27702: EQUAL
27703: IFTRUE 27707
27705: GO 27737
27707: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27708: LD_ADDR_VAR 0 3
27712: PUSH
27713: LD_INT 1
27715: PUSH
27716: LD_INT 2
27718: PUSH
27719: LD_INT 3
27721: PUSH
27722: LD_INT 4
27724: PUSH
27725: LD_INT 5
27727: PUSH
27728: EMPTY
27729: LIST
27730: LIST
27731: LIST
27732: LIST
27733: LIST
27734: ST_TO_ADDR
27735: GO 28738
27737: LD_INT 3
27739: DOUBLE
27740: EQUAL
27741: IFTRUE 27745
27743: GO 27775
27745: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27746: LD_ADDR_VAR 0 3
27750: PUSH
27751: LD_INT 1
27753: PUSH
27754: LD_INT 2
27756: PUSH
27757: LD_INT 3
27759: PUSH
27760: LD_INT 4
27762: PUSH
27763: LD_INT 5
27765: PUSH
27766: EMPTY
27767: LIST
27768: LIST
27769: LIST
27770: LIST
27771: LIST
27772: ST_TO_ADDR
27773: GO 28738
27775: LD_INT 11
27777: DOUBLE
27778: EQUAL
27779: IFTRUE 27783
27781: GO 27813
27783: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27784: LD_ADDR_VAR 0 3
27788: PUSH
27789: LD_INT 1
27791: PUSH
27792: LD_INT 2
27794: PUSH
27795: LD_INT 3
27797: PUSH
27798: LD_INT 4
27800: PUSH
27801: LD_INT 5
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: LIST
27808: LIST
27809: LIST
27810: ST_TO_ADDR
27811: GO 28738
27813: LD_INT 4
27815: DOUBLE
27816: EQUAL
27817: IFTRUE 27821
27819: GO 27847
27821: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27822: LD_ADDR_VAR 0 3
27826: PUSH
27827: LD_INT 2
27829: PUSH
27830: LD_INT 3
27832: PUSH
27833: LD_INT 4
27835: PUSH
27836: LD_INT 5
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: LIST
27843: LIST
27844: ST_TO_ADDR
27845: GO 28738
27847: LD_INT 5
27849: DOUBLE
27850: EQUAL
27851: IFTRUE 27855
27853: GO 27881
27855: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27856: LD_ADDR_VAR 0 3
27860: PUSH
27861: LD_INT 2
27863: PUSH
27864: LD_INT 3
27866: PUSH
27867: LD_INT 4
27869: PUSH
27870: LD_INT 5
27872: PUSH
27873: EMPTY
27874: LIST
27875: LIST
27876: LIST
27877: LIST
27878: ST_TO_ADDR
27879: GO 28738
27881: LD_INT 9
27883: DOUBLE
27884: EQUAL
27885: IFTRUE 27889
27887: GO 27915
27889: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27890: LD_ADDR_VAR 0 3
27894: PUSH
27895: LD_INT 2
27897: PUSH
27898: LD_INT 3
27900: PUSH
27901: LD_INT 4
27903: PUSH
27904: LD_INT 5
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: LIST
27911: LIST
27912: ST_TO_ADDR
27913: GO 28738
27915: LD_INT 7
27917: DOUBLE
27918: EQUAL
27919: IFTRUE 27923
27921: GO 27949
27923: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27924: LD_ADDR_VAR 0 3
27928: PUSH
27929: LD_INT 2
27931: PUSH
27932: LD_INT 3
27934: PUSH
27935: LD_INT 4
27937: PUSH
27938: LD_INT 5
27940: PUSH
27941: EMPTY
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: ST_TO_ADDR
27947: GO 28738
27949: LD_INT 12
27951: DOUBLE
27952: EQUAL
27953: IFTRUE 27957
27955: GO 27983
27957: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27958: LD_ADDR_VAR 0 3
27962: PUSH
27963: LD_INT 2
27965: PUSH
27966: LD_INT 3
27968: PUSH
27969: LD_INT 4
27971: PUSH
27972: LD_INT 5
27974: PUSH
27975: EMPTY
27976: LIST
27977: LIST
27978: LIST
27979: LIST
27980: ST_TO_ADDR
27981: GO 28738
27983: LD_INT 13
27985: DOUBLE
27986: EQUAL
27987: IFTRUE 27991
27989: GO 28017
27991: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27992: LD_ADDR_VAR 0 3
27996: PUSH
27997: LD_INT 2
27999: PUSH
28000: LD_INT 3
28002: PUSH
28003: LD_INT 4
28005: PUSH
28006: LD_INT 5
28008: PUSH
28009: EMPTY
28010: LIST
28011: LIST
28012: LIST
28013: LIST
28014: ST_TO_ADDR
28015: GO 28738
28017: LD_INT 14
28019: DOUBLE
28020: EQUAL
28021: IFTRUE 28025
28023: GO 28043
28025: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
28026: LD_ADDR_VAR 0 3
28030: PUSH
28031: LD_INT 4
28033: PUSH
28034: LD_INT 5
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: ST_TO_ADDR
28041: GO 28738
28043: LD_INT 6
28045: DOUBLE
28046: EQUAL
28047: IFTRUE 28051
28049: GO 28069
28051: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
28052: LD_ADDR_VAR 0 3
28056: PUSH
28057: LD_INT 4
28059: PUSH
28060: LD_INT 5
28062: PUSH
28063: EMPTY
28064: LIST
28065: LIST
28066: ST_TO_ADDR
28067: GO 28738
28069: LD_INT 10
28071: DOUBLE
28072: EQUAL
28073: IFTRUE 28077
28075: GO 28095
28077: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
28078: LD_ADDR_VAR 0 3
28082: PUSH
28083: LD_INT 4
28085: PUSH
28086: LD_INT 5
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: ST_TO_ADDR
28093: GO 28738
28095: LD_INT 22
28097: DOUBLE
28098: EQUAL
28099: IFTRUE 28103
28101: GO 28129
28103: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
28104: LD_ADDR_VAR 0 3
28108: PUSH
28109: LD_INT 11
28111: PUSH
28112: LD_INT 12
28114: PUSH
28115: LD_INT 13
28117: PUSH
28118: LD_INT 14
28120: PUSH
28121: EMPTY
28122: LIST
28123: LIST
28124: LIST
28125: LIST
28126: ST_TO_ADDR
28127: GO 28738
28129: LD_INT 23
28131: DOUBLE
28132: EQUAL
28133: IFTRUE 28137
28135: GO 28163
28137: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
28138: LD_ADDR_VAR 0 3
28142: PUSH
28143: LD_INT 11
28145: PUSH
28146: LD_INT 12
28148: PUSH
28149: LD_INT 13
28151: PUSH
28152: LD_INT 14
28154: PUSH
28155: EMPTY
28156: LIST
28157: LIST
28158: LIST
28159: LIST
28160: ST_TO_ADDR
28161: GO 28738
28163: LD_INT 24
28165: DOUBLE
28166: EQUAL
28167: IFTRUE 28171
28169: GO 28197
28171: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
28172: LD_ADDR_VAR 0 3
28176: PUSH
28177: LD_INT 11
28179: PUSH
28180: LD_INT 12
28182: PUSH
28183: LD_INT 13
28185: PUSH
28186: LD_INT 14
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: LIST
28193: LIST
28194: ST_TO_ADDR
28195: GO 28738
28197: LD_INT 30
28199: DOUBLE
28200: EQUAL
28201: IFTRUE 28205
28203: GO 28231
28205: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
28206: LD_ADDR_VAR 0 3
28210: PUSH
28211: LD_INT 11
28213: PUSH
28214: LD_INT 12
28216: PUSH
28217: LD_INT 13
28219: PUSH
28220: LD_INT 14
28222: PUSH
28223: EMPTY
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: ST_TO_ADDR
28229: GO 28738
28231: LD_INT 25
28233: DOUBLE
28234: EQUAL
28235: IFTRUE 28239
28237: GO 28257
28239: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
28240: LD_ADDR_VAR 0 3
28244: PUSH
28245: LD_INT 13
28247: PUSH
28248: LD_INT 14
28250: PUSH
28251: EMPTY
28252: LIST
28253: LIST
28254: ST_TO_ADDR
28255: GO 28738
28257: LD_INT 27
28259: DOUBLE
28260: EQUAL
28261: IFTRUE 28265
28263: GO 28283
28265: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
28266: LD_ADDR_VAR 0 3
28270: PUSH
28271: LD_INT 13
28273: PUSH
28274: LD_INT 14
28276: PUSH
28277: EMPTY
28278: LIST
28279: LIST
28280: ST_TO_ADDR
28281: GO 28738
28283: LD_INT 92
28285: DOUBLE
28286: EQUAL
28287: IFTRUE 28291
28289: GO 28317
28291: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
28292: LD_ADDR_VAR 0 3
28296: PUSH
28297: LD_INT 11
28299: PUSH
28300: LD_INT 12
28302: PUSH
28303: LD_INT 13
28305: PUSH
28306: LD_INT 14
28308: PUSH
28309: EMPTY
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: ST_TO_ADDR
28315: GO 28738
28317: LD_INT 28
28319: DOUBLE
28320: EQUAL
28321: IFTRUE 28325
28323: GO 28343
28325: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
28326: LD_ADDR_VAR 0 3
28330: PUSH
28331: LD_INT 13
28333: PUSH
28334: LD_INT 14
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: ST_TO_ADDR
28341: GO 28738
28343: LD_INT 29
28345: DOUBLE
28346: EQUAL
28347: IFTRUE 28351
28349: GO 28369
28351: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
28352: LD_ADDR_VAR 0 3
28356: PUSH
28357: LD_INT 13
28359: PUSH
28360: LD_INT 14
28362: PUSH
28363: EMPTY
28364: LIST
28365: LIST
28366: ST_TO_ADDR
28367: GO 28738
28369: LD_INT 31
28371: DOUBLE
28372: EQUAL
28373: IFTRUE 28377
28375: GO 28395
28377: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
28378: LD_ADDR_VAR 0 3
28382: PUSH
28383: LD_INT 13
28385: PUSH
28386: LD_INT 14
28388: PUSH
28389: EMPTY
28390: LIST
28391: LIST
28392: ST_TO_ADDR
28393: GO 28738
28395: LD_INT 26
28397: DOUBLE
28398: EQUAL
28399: IFTRUE 28403
28401: GO 28421
28403: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
28404: LD_ADDR_VAR 0 3
28408: PUSH
28409: LD_INT 13
28411: PUSH
28412: LD_INT 14
28414: PUSH
28415: EMPTY
28416: LIST
28417: LIST
28418: ST_TO_ADDR
28419: GO 28738
28421: LD_INT 42
28423: DOUBLE
28424: EQUAL
28425: IFTRUE 28429
28427: GO 28455
28429: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
28430: LD_ADDR_VAR 0 3
28434: PUSH
28435: LD_INT 21
28437: PUSH
28438: LD_INT 22
28440: PUSH
28441: LD_INT 23
28443: PUSH
28444: LD_INT 24
28446: PUSH
28447: EMPTY
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: ST_TO_ADDR
28453: GO 28738
28455: LD_INT 43
28457: DOUBLE
28458: EQUAL
28459: IFTRUE 28463
28461: GO 28489
28463: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
28464: LD_ADDR_VAR 0 3
28468: PUSH
28469: LD_INT 21
28471: PUSH
28472: LD_INT 22
28474: PUSH
28475: LD_INT 23
28477: PUSH
28478: LD_INT 24
28480: PUSH
28481: EMPTY
28482: LIST
28483: LIST
28484: LIST
28485: LIST
28486: ST_TO_ADDR
28487: GO 28738
28489: LD_INT 44
28491: DOUBLE
28492: EQUAL
28493: IFTRUE 28497
28495: GO 28523
28497: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28498: LD_ADDR_VAR 0 3
28502: PUSH
28503: LD_INT 21
28505: PUSH
28506: LD_INT 22
28508: PUSH
28509: LD_INT 23
28511: PUSH
28512: LD_INT 24
28514: PUSH
28515: EMPTY
28516: LIST
28517: LIST
28518: LIST
28519: LIST
28520: ST_TO_ADDR
28521: GO 28738
28523: LD_INT 45
28525: DOUBLE
28526: EQUAL
28527: IFTRUE 28531
28529: GO 28557
28531: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28532: LD_ADDR_VAR 0 3
28536: PUSH
28537: LD_INT 21
28539: PUSH
28540: LD_INT 22
28542: PUSH
28543: LD_INT 23
28545: PUSH
28546: LD_INT 24
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: LIST
28553: LIST
28554: ST_TO_ADDR
28555: GO 28738
28557: LD_INT 49
28559: DOUBLE
28560: EQUAL
28561: IFTRUE 28565
28563: GO 28591
28565: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28566: LD_ADDR_VAR 0 3
28570: PUSH
28571: LD_INT 21
28573: PUSH
28574: LD_INT 22
28576: PUSH
28577: LD_INT 23
28579: PUSH
28580: LD_INT 24
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: LIST
28587: LIST
28588: ST_TO_ADDR
28589: GO 28738
28591: LD_INT 51
28593: DOUBLE
28594: EQUAL
28595: IFTRUE 28599
28597: GO 28625
28599: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28600: LD_ADDR_VAR 0 3
28604: PUSH
28605: LD_INT 21
28607: PUSH
28608: LD_INT 22
28610: PUSH
28611: LD_INT 23
28613: PUSH
28614: LD_INT 24
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: ST_TO_ADDR
28623: GO 28738
28625: LD_INT 52
28627: DOUBLE
28628: EQUAL
28629: IFTRUE 28633
28631: GO 28659
28633: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28634: LD_ADDR_VAR 0 3
28638: PUSH
28639: LD_INT 21
28641: PUSH
28642: LD_INT 22
28644: PUSH
28645: LD_INT 23
28647: PUSH
28648: LD_INT 24
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: ST_TO_ADDR
28657: GO 28738
28659: LD_INT 53
28661: DOUBLE
28662: EQUAL
28663: IFTRUE 28667
28665: GO 28685
28667: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28668: LD_ADDR_VAR 0 3
28672: PUSH
28673: LD_INT 23
28675: PUSH
28676: LD_INT 24
28678: PUSH
28679: EMPTY
28680: LIST
28681: LIST
28682: ST_TO_ADDR
28683: GO 28738
28685: LD_INT 46
28687: DOUBLE
28688: EQUAL
28689: IFTRUE 28693
28691: GO 28711
28693: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28694: LD_ADDR_VAR 0 3
28698: PUSH
28699: LD_INT 23
28701: PUSH
28702: LD_INT 24
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: ST_TO_ADDR
28709: GO 28738
28711: LD_INT 47
28713: DOUBLE
28714: EQUAL
28715: IFTRUE 28719
28717: GO 28737
28719: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28720: LD_ADDR_VAR 0 3
28724: PUSH
28725: LD_INT 23
28727: PUSH
28728: LD_INT 24
28730: PUSH
28731: EMPTY
28732: LIST
28733: LIST
28734: ST_TO_ADDR
28735: GO 28738
28737: POP
// result := ( chassis in result ) ;
28738: LD_ADDR_VAR 0 3
28742: PUSH
28743: LD_VAR 0 1
28747: PUSH
28748: LD_VAR 0 3
28752: IN
28753: ST_TO_ADDR
// end ;
28754: LD_VAR 0 3
28758: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28759: LD_INT 0
28761: PPUSH
28762: PPUSH
28763: PPUSH
28764: PPUSH
28765: PPUSH
28766: PPUSH
28767: PPUSH
// result := array ;
28768: LD_ADDR_VAR 0 5
28772: PUSH
28773: LD_VAR 0 1
28777: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28778: LD_VAR 0 1
28782: NOT
28783: PUSH
28784: LD_VAR 0 2
28788: NOT
28789: OR
28790: PUSH
28791: LD_VAR 0 3
28795: NOT
28796: OR
28797: PUSH
28798: LD_VAR 0 2
28802: PUSH
28803: LD_VAR 0 1
28807: GREATER
28808: OR
28809: PUSH
28810: LD_VAR 0 3
28814: PUSH
28815: LD_VAR 0 1
28819: GREATER
28820: OR
28821: IFFALSE 28825
// exit ;
28823: GO 29121
// if direction then
28825: LD_VAR 0 4
28829: IFFALSE 28893
// begin d := 1 ;
28831: LD_ADDR_VAR 0 9
28835: PUSH
28836: LD_INT 1
28838: ST_TO_ADDR
// if i_from > i_to then
28839: LD_VAR 0 2
28843: PUSH
28844: LD_VAR 0 3
28848: GREATER
28849: IFFALSE 28875
// length := ( array - i_from ) + i_to else
28851: LD_ADDR_VAR 0 11
28855: PUSH
28856: LD_VAR 0 1
28860: PUSH
28861: LD_VAR 0 2
28865: MINUS
28866: PUSH
28867: LD_VAR 0 3
28871: PLUS
28872: ST_TO_ADDR
28873: GO 28891
// length := i_to - i_from ;
28875: LD_ADDR_VAR 0 11
28879: PUSH
28880: LD_VAR 0 3
28884: PUSH
28885: LD_VAR 0 2
28889: MINUS
28890: ST_TO_ADDR
// end else
28891: GO 28954
// begin d := - 1 ;
28893: LD_ADDR_VAR 0 9
28897: PUSH
28898: LD_INT 1
28900: NEG
28901: ST_TO_ADDR
// if i_from > i_to then
28902: LD_VAR 0 2
28906: PUSH
28907: LD_VAR 0 3
28911: GREATER
28912: IFFALSE 28932
// length := i_from - i_to else
28914: LD_ADDR_VAR 0 11
28918: PUSH
28919: LD_VAR 0 2
28923: PUSH
28924: LD_VAR 0 3
28928: MINUS
28929: ST_TO_ADDR
28930: GO 28954
// length := ( array - i_to ) + i_from ;
28932: LD_ADDR_VAR 0 11
28936: PUSH
28937: LD_VAR 0 1
28941: PUSH
28942: LD_VAR 0 3
28946: MINUS
28947: PUSH
28948: LD_VAR 0 2
28952: PLUS
28953: ST_TO_ADDR
// end ; if not length then
28954: LD_VAR 0 11
28958: NOT
28959: IFFALSE 28963
// exit ;
28961: GO 29121
// tmp := array ;
28963: LD_ADDR_VAR 0 10
28967: PUSH
28968: LD_VAR 0 1
28972: ST_TO_ADDR
// for i = 1 to length do
28973: LD_ADDR_VAR 0 6
28977: PUSH
28978: DOUBLE
28979: LD_INT 1
28981: DEC
28982: ST_TO_ADDR
28983: LD_VAR 0 11
28987: PUSH
28988: FOR_TO
28989: IFFALSE 29109
// begin for j = 1 to array do
28991: LD_ADDR_VAR 0 7
28995: PUSH
28996: DOUBLE
28997: LD_INT 1
28999: DEC
29000: ST_TO_ADDR
29001: LD_VAR 0 1
29005: PUSH
29006: FOR_TO
29007: IFFALSE 29095
// begin k := j + d ;
29009: LD_ADDR_VAR 0 8
29013: PUSH
29014: LD_VAR 0 7
29018: PUSH
29019: LD_VAR 0 9
29023: PLUS
29024: ST_TO_ADDR
// if k > array then
29025: LD_VAR 0 8
29029: PUSH
29030: LD_VAR 0 1
29034: GREATER
29035: IFFALSE 29045
// k := 1 ;
29037: LD_ADDR_VAR 0 8
29041: PUSH
29042: LD_INT 1
29044: ST_TO_ADDR
// if not k then
29045: LD_VAR 0 8
29049: NOT
29050: IFFALSE 29062
// k := array ;
29052: LD_ADDR_VAR 0 8
29056: PUSH
29057: LD_VAR 0 1
29061: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
29062: LD_ADDR_VAR 0 10
29066: PUSH
29067: LD_VAR 0 10
29071: PPUSH
29072: LD_VAR 0 8
29076: PPUSH
29077: LD_VAR 0 1
29081: PUSH
29082: LD_VAR 0 7
29086: ARRAY
29087: PPUSH
29088: CALL_OW 1
29092: ST_TO_ADDR
// end ;
29093: GO 29006
29095: POP
29096: POP
// array := tmp ;
29097: LD_ADDR_VAR 0 1
29101: PUSH
29102: LD_VAR 0 10
29106: ST_TO_ADDR
// end ;
29107: GO 28988
29109: POP
29110: POP
// result := array ;
29111: LD_ADDR_VAR 0 5
29115: PUSH
29116: LD_VAR 0 1
29120: ST_TO_ADDR
// end ;
29121: LD_VAR 0 5
29125: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
29126: LD_INT 0
29128: PPUSH
29129: PPUSH
// result := 0 ;
29130: LD_ADDR_VAR 0 3
29134: PUSH
29135: LD_INT 0
29137: ST_TO_ADDR
// if not array or not value in array then
29138: LD_VAR 0 1
29142: NOT
29143: PUSH
29144: LD_VAR 0 2
29148: PUSH
29149: LD_VAR 0 1
29153: IN
29154: NOT
29155: OR
29156: IFFALSE 29160
// exit ;
29158: GO 29214
// for i = 1 to array do
29160: LD_ADDR_VAR 0 4
29164: PUSH
29165: DOUBLE
29166: LD_INT 1
29168: DEC
29169: ST_TO_ADDR
29170: LD_VAR 0 1
29174: PUSH
29175: FOR_TO
29176: IFFALSE 29212
// if value = array [ i ] then
29178: LD_VAR 0 2
29182: PUSH
29183: LD_VAR 0 1
29187: PUSH
29188: LD_VAR 0 4
29192: ARRAY
29193: EQUAL
29194: IFFALSE 29210
// begin result := i ;
29196: LD_ADDR_VAR 0 3
29200: PUSH
29201: LD_VAR 0 4
29205: ST_TO_ADDR
// exit ;
29206: POP
29207: POP
29208: GO 29214
// end ;
29210: GO 29175
29212: POP
29213: POP
// end ;
29214: LD_VAR 0 3
29218: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
29219: LD_INT 0
29221: PPUSH
// vc_chassis := chassis ;
29222: LD_ADDR_OWVAR 37
29226: PUSH
29227: LD_VAR 0 1
29231: ST_TO_ADDR
// vc_engine := engine ;
29232: LD_ADDR_OWVAR 39
29236: PUSH
29237: LD_VAR 0 2
29241: ST_TO_ADDR
// vc_control := control ;
29242: LD_ADDR_OWVAR 38
29246: PUSH
29247: LD_VAR 0 3
29251: ST_TO_ADDR
// vc_weapon := weapon ;
29252: LD_ADDR_OWVAR 40
29256: PUSH
29257: LD_VAR 0 4
29261: ST_TO_ADDR
// vc_fuel_battery := fuel ;
29262: LD_ADDR_OWVAR 41
29266: PUSH
29267: LD_VAR 0 5
29271: ST_TO_ADDR
// end ;
29272: LD_VAR 0 6
29276: RET
// export function WantPlant ( unit ) ; var task ; begin
29277: LD_INT 0
29279: PPUSH
29280: PPUSH
// result := false ;
29281: LD_ADDR_VAR 0 2
29285: PUSH
29286: LD_INT 0
29288: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
29289: LD_ADDR_VAR 0 3
29293: PUSH
29294: LD_VAR 0 1
29298: PPUSH
29299: CALL_OW 437
29303: ST_TO_ADDR
// if task then
29304: LD_VAR 0 3
29308: IFFALSE 29336
// if task [ 1 ] [ 1 ] = p then
29310: LD_VAR 0 3
29314: PUSH
29315: LD_INT 1
29317: ARRAY
29318: PUSH
29319: LD_INT 1
29321: ARRAY
29322: PUSH
29323: LD_STRING p
29325: EQUAL
29326: IFFALSE 29336
// result := true ;
29328: LD_ADDR_VAR 0 2
29332: PUSH
29333: LD_INT 1
29335: ST_TO_ADDR
// end ;
29336: LD_VAR 0 2
29340: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
29341: LD_INT 0
29343: PPUSH
29344: PPUSH
29345: PPUSH
29346: PPUSH
// if pos < 1 then
29347: LD_VAR 0 2
29351: PUSH
29352: LD_INT 1
29354: LESS
29355: IFFALSE 29359
// exit ;
29357: GO 29662
// if pos = 1 then
29359: LD_VAR 0 2
29363: PUSH
29364: LD_INT 1
29366: EQUAL
29367: IFFALSE 29400
// result := Replace ( arr , pos [ 1 ] , value ) else
29369: LD_ADDR_VAR 0 4
29373: PUSH
29374: LD_VAR 0 1
29378: PPUSH
29379: LD_VAR 0 2
29383: PUSH
29384: LD_INT 1
29386: ARRAY
29387: PPUSH
29388: LD_VAR 0 3
29392: PPUSH
29393: CALL_OW 1
29397: ST_TO_ADDR
29398: GO 29662
// begin tmp := arr ;
29400: LD_ADDR_VAR 0 6
29404: PUSH
29405: LD_VAR 0 1
29409: ST_TO_ADDR
// s_arr := [ tmp ] ;
29410: LD_ADDR_VAR 0 7
29414: PUSH
29415: LD_VAR 0 6
29419: PUSH
29420: EMPTY
29421: LIST
29422: ST_TO_ADDR
// for i = 1 to pos - 1 do
29423: LD_ADDR_VAR 0 5
29427: PUSH
29428: DOUBLE
29429: LD_INT 1
29431: DEC
29432: ST_TO_ADDR
29433: LD_VAR 0 2
29437: PUSH
29438: LD_INT 1
29440: MINUS
29441: PUSH
29442: FOR_TO
29443: IFFALSE 29488
// begin tmp := tmp [ pos [ i ] ] ;
29445: LD_ADDR_VAR 0 6
29449: PUSH
29450: LD_VAR 0 6
29454: PUSH
29455: LD_VAR 0 2
29459: PUSH
29460: LD_VAR 0 5
29464: ARRAY
29465: ARRAY
29466: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
29467: LD_ADDR_VAR 0 7
29471: PUSH
29472: LD_VAR 0 7
29476: PUSH
29477: LD_VAR 0 6
29481: PUSH
29482: EMPTY
29483: LIST
29484: ADD
29485: ST_TO_ADDR
// end ;
29486: GO 29442
29488: POP
29489: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29490: LD_ADDR_VAR 0 6
29494: PUSH
29495: LD_VAR 0 6
29499: PPUSH
29500: LD_VAR 0 2
29504: PUSH
29505: LD_VAR 0 2
29509: ARRAY
29510: PPUSH
29511: LD_VAR 0 3
29515: PPUSH
29516: CALL_OW 1
29520: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29521: LD_ADDR_VAR 0 7
29525: PUSH
29526: LD_VAR 0 7
29530: PPUSH
29531: LD_VAR 0 7
29535: PPUSH
29536: LD_VAR 0 6
29540: PPUSH
29541: CALL_OW 1
29545: ST_TO_ADDR
// for i = s_arr downto 2 do
29546: LD_ADDR_VAR 0 5
29550: PUSH
29551: DOUBLE
29552: LD_VAR 0 7
29556: INC
29557: ST_TO_ADDR
29558: LD_INT 2
29560: PUSH
29561: FOR_DOWNTO
29562: IFFALSE 29646
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29564: LD_ADDR_VAR 0 6
29568: PUSH
29569: LD_VAR 0 7
29573: PUSH
29574: LD_VAR 0 5
29578: PUSH
29579: LD_INT 1
29581: MINUS
29582: ARRAY
29583: PPUSH
29584: LD_VAR 0 2
29588: PUSH
29589: LD_VAR 0 5
29593: PUSH
29594: LD_INT 1
29596: MINUS
29597: ARRAY
29598: PPUSH
29599: LD_VAR 0 7
29603: PUSH
29604: LD_VAR 0 5
29608: ARRAY
29609: PPUSH
29610: CALL_OW 1
29614: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29615: LD_ADDR_VAR 0 7
29619: PUSH
29620: LD_VAR 0 7
29624: PPUSH
29625: LD_VAR 0 5
29629: PUSH
29630: LD_INT 1
29632: MINUS
29633: PPUSH
29634: LD_VAR 0 6
29638: PPUSH
29639: CALL_OW 1
29643: ST_TO_ADDR
// end ;
29644: GO 29561
29646: POP
29647: POP
// result := s_arr [ 1 ] ;
29648: LD_ADDR_VAR 0 4
29652: PUSH
29653: LD_VAR 0 7
29657: PUSH
29658: LD_INT 1
29660: ARRAY
29661: ST_TO_ADDR
// end ; end ;
29662: LD_VAR 0 4
29666: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29667: LD_INT 0
29669: PPUSH
29670: PPUSH
// if not list then
29671: LD_VAR 0 1
29675: NOT
29676: IFFALSE 29680
// exit ;
29678: GO 29771
// i := list [ pos1 ] ;
29680: LD_ADDR_VAR 0 5
29684: PUSH
29685: LD_VAR 0 1
29689: PUSH
29690: LD_VAR 0 2
29694: ARRAY
29695: ST_TO_ADDR
// if not i then
29696: LD_VAR 0 5
29700: NOT
29701: IFFALSE 29705
// exit ;
29703: GO 29771
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29705: LD_ADDR_VAR 0 1
29709: PUSH
29710: LD_VAR 0 1
29714: PPUSH
29715: LD_VAR 0 2
29719: PPUSH
29720: LD_VAR 0 1
29724: PUSH
29725: LD_VAR 0 3
29729: ARRAY
29730: PPUSH
29731: CALL_OW 1
29735: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29736: LD_ADDR_VAR 0 1
29740: PUSH
29741: LD_VAR 0 1
29745: PPUSH
29746: LD_VAR 0 3
29750: PPUSH
29751: LD_VAR 0 5
29755: PPUSH
29756: CALL_OW 1
29760: ST_TO_ADDR
// result := list ;
29761: LD_ADDR_VAR 0 4
29765: PUSH
29766: LD_VAR 0 1
29770: ST_TO_ADDR
// end ;
29771: LD_VAR 0 4
29775: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29776: LD_INT 0
29778: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29779: LD_ADDR_VAR 0 5
29783: PUSH
29784: LD_VAR 0 1
29788: PPUSH
29789: CALL_OW 250
29793: PPUSH
29794: LD_VAR 0 1
29798: PPUSH
29799: CALL_OW 251
29803: PPUSH
29804: LD_VAR 0 2
29808: PPUSH
29809: LD_VAR 0 3
29813: PPUSH
29814: LD_VAR 0 4
29818: PPUSH
29819: CALL 29829 0 5
29823: ST_TO_ADDR
// end ;
29824: LD_VAR 0 5
29828: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29829: LD_INT 0
29831: PPUSH
29832: PPUSH
29833: PPUSH
29834: PPUSH
// if not list then
29835: LD_VAR 0 3
29839: NOT
29840: IFFALSE 29844
// exit ;
29842: GO 30232
// result := [ ] ;
29844: LD_ADDR_VAR 0 6
29848: PUSH
29849: EMPTY
29850: ST_TO_ADDR
// for i in list do
29851: LD_ADDR_VAR 0 7
29855: PUSH
29856: LD_VAR 0 3
29860: PUSH
29861: FOR_IN
29862: IFFALSE 30064
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29864: LD_ADDR_VAR 0 9
29868: PUSH
29869: LD_VAR 0 7
29873: PPUSH
29874: LD_VAR 0 1
29878: PPUSH
29879: LD_VAR 0 2
29883: PPUSH
29884: CALL_OW 297
29888: ST_TO_ADDR
// if not result then
29889: LD_VAR 0 6
29893: NOT
29894: IFFALSE 29920
// result := [ [ i , tmp ] ] else
29896: LD_ADDR_VAR 0 6
29900: PUSH
29901: LD_VAR 0 7
29905: PUSH
29906: LD_VAR 0 9
29910: PUSH
29911: EMPTY
29912: LIST
29913: LIST
29914: PUSH
29915: EMPTY
29916: LIST
29917: ST_TO_ADDR
29918: GO 30062
// begin if result [ result ] [ 2 ] < tmp then
29920: LD_VAR 0 6
29924: PUSH
29925: LD_VAR 0 6
29929: ARRAY
29930: PUSH
29931: LD_INT 2
29933: ARRAY
29934: PUSH
29935: LD_VAR 0 9
29939: LESS
29940: IFFALSE 29982
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29942: LD_ADDR_VAR 0 6
29946: PUSH
29947: LD_VAR 0 6
29951: PPUSH
29952: LD_VAR 0 6
29956: PUSH
29957: LD_INT 1
29959: PLUS
29960: PPUSH
29961: LD_VAR 0 7
29965: PUSH
29966: LD_VAR 0 9
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PPUSH
29975: CALL_OW 2
29979: ST_TO_ADDR
29980: GO 30062
// for j = 1 to result do
29982: LD_ADDR_VAR 0 8
29986: PUSH
29987: DOUBLE
29988: LD_INT 1
29990: DEC
29991: ST_TO_ADDR
29992: LD_VAR 0 6
29996: PUSH
29997: FOR_TO
29998: IFFALSE 30060
// begin if tmp < result [ j ] [ 2 ] then
30000: LD_VAR 0 9
30004: PUSH
30005: LD_VAR 0 6
30009: PUSH
30010: LD_VAR 0 8
30014: ARRAY
30015: PUSH
30016: LD_INT 2
30018: ARRAY
30019: LESS
30020: IFFALSE 30058
// begin result := Insert ( result , j , [ i , tmp ] ) ;
30022: LD_ADDR_VAR 0 6
30026: PUSH
30027: LD_VAR 0 6
30031: PPUSH
30032: LD_VAR 0 8
30036: PPUSH
30037: LD_VAR 0 7
30041: PUSH
30042: LD_VAR 0 9
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PPUSH
30051: CALL_OW 2
30055: ST_TO_ADDR
// break ;
30056: GO 30060
// end ; end ;
30058: GO 29997
30060: POP
30061: POP
// end ; end ;
30062: GO 29861
30064: POP
30065: POP
// if result and not asc then
30066: LD_VAR 0 6
30070: PUSH
30071: LD_VAR 0 4
30075: NOT
30076: AND
30077: IFFALSE 30152
// begin tmp := result ;
30079: LD_ADDR_VAR 0 9
30083: PUSH
30084: LD_VAR 0 6
30088: ST_TO_ADDR
// for i = tmp downto 1 do
30089: LD_ADDR_VAR 0 7
30093: PUSH
30094: DOUBLE
30095: LD_VAR 0 9
30099: INC
30100: ST_TO_ADDR
30101: LD_INT 1
30103: PUSH
30104: FOR_DOWNTO
30105: IFFALSE 30150
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30107: LD_ADDR_VAR 0 6
30111: PUSH
30112: LD_VAR 0 6
30116: PPUSH
30117: LD_VAR 0 9
30121: PUSH
30122: LD_VAR 0 7
30126: MINUS
30127: PUSH
30128: LD_INT 1
30130: PLUS
30131: PPUSH
30132: LD_VAR 0 9
30136: PUSH
30137: LD_VAR 0 7
30141: ARRAY
30142: PPUSH
30143: CALL_OW 1
30147: ST_TO_ADDR
30148: GO 30104
30150: POP
30151: POP
// end ; tmp := [ ] ;
30152: LD_ADDR_VAR 0 9
30156: PUSH
30157: EMPTY
30158: ST_TO_ADDR
// if mode then
30159: LD_VAR 0 5
30163: IFFALSE 30232
// begin for i = 1 to result do
30165: LD_ADDR_VAR 0 7
30169: PUSH
30170: DOUBLE
30171: LD_INT 1
30173: DEC
30174: ST_TO_ADDR
30175: LD_VAR 0 6
30179: PUSH
30180: FOR_TO
30181: IFFALSE 30220
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30183: LD_ADDR_VAR 0 9
30187: PUSH
30188: LD_VAR 0 9
30192: PPUSH
30193: LD_VAR 0 7
30197: PPUSH
30198: LD_VAR 0 6
30202: PUSH
30203: LD_VAR 0 7
30207: ARRAY
30208: PUSH
30209: LD_INT 1
30211: ARRAY
30212: PPUSH
30213: CALL_OW 1
30217: ST_TO_ADDR
30218: GO 30180
30220: POP
30221: POP
// result := tmp ;
30222: LD_ADDR_VAR 0 6
30226: PUSH
30227: LD_VAR 0 9
30231: ST_TO_ADDR
// end ; end ;
30232: LD_VAR 0 6
30236: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30237: LD_INT 0
30239: PPUSH
30240: PPUSH
30241: PPUSH
30242: PPUSH
30243: PPUSH
30244: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30245: LD_ADDR_VAR 0 5
30249: PUSH
30250: LD_INT 0
30252: PUSH
30253: LD_INT 0
30255: PUSH
30256: LD_INT 0
30258: PUSH
30259: EMPTY
30260: PUSH
30261: EMPTY
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: ST_TO_ADDR
// if not x or not y then
30267: LD_VAR 0 2
30271: NOT
30272: PUSH
30273: LD_VAR 0 3
30277: NOT
30278: OR
30279: IFFALSE 30283
// exit ;
30281: GO 31933
// if not range then
30283: LD_VAR 0 4
30287: NOT
30288: IFFALSE 30298
// range := 10 ;
30290: LD_ADDR_VAR 0 4
30294: PUSH
30295: LD_INT 10
30297: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30298: LD_ADDR_VAR 0 8
30302: PUSH
30303: LD_INT 81
30305: PUSH
30306: LD_VAR 0 1
30310: PUSH
30311: EMPTY
30312: LIST
30313: LIST
30314: PUSH
30315: LD_INT 92
30317: PUSH
30318: LD_VAR 0 2
30322: PUSH
30323: LD_VAR 0 3
30327: PUSH
30328: LD_VAR 0 4
30332: PUSH
30333: EMPTY
30334: LIST
30335: LIST
30336: LIST
30337: LIST
30338: PUSH
30339: LD_INT 3
30341: PUSH
30342: LD_INT 21
30344: PUSH
30345: LD_INT 3
30347: PUSH
30348: EMPTY
30349: LIST
30350: LIST
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: LIST
30360: PPUSH
30361: CALL_OW 69
30365: ST_TO_ADDR
// if not tmp then
30366: LD_VAR 0 8
30370: NOT
30371: IFFALSE 30375
// exit ;
30373: GO 31933
// for i in tmp do
30375: LD_ADDR_VAR 0 6
30379: PUSH
30380: LD_VAR 0 8
30384: PUSH
30385: FOR_IN
30386: IFFALSE 31908
// begin points := [ 0 , 0 , 0 ] ;
30388: LD_ADDR_VAR 0 9
30392: PUSH
30393: LD_INT 0
30395: PUSH
30396: LD_INT 0
30398: PUSH
30399: LD_INT 0
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: LIST
30406: ST_TO_ADDR
// bpoints := 1 ;
30407: LD_ADDR_VAR 0 10
30411: PUSH
30412: LD_INT 1
30414: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30415: LD_VAR 0 6
30419: PPUSH
30420: CALL_OW 247
30424: PUSH
30425: LD_INT 1
30427: DOUBLE
30428: EQUAL
30429: IFTRUE 30433
30431: GO 31011
30433: POP
// begin if GetClass ( i ) = 1 then
30434: LD_VAR 0 6
30438: PPUSH
30439: CALL_OW 257
30443: PUSH
30444: LD_INT 1
30446: EQUAL
30447: IFFALSE 30468
// points := [ 10 , 5 , 3 ] ;
30449: LD_ADDR_VAR 0 9
30453: PUSH
30454: LD_INT 10
30456: PUSH
30457: LD_INT 5
30459: PUSH
30460: LD_INT 3
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: LIST
30467: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30468: LD_VAR 0 6
30472: PPUSH
30473: CALL_OW 257
30477: PUSH
30478: LD_INT 2
30480: PUSH
30481: LD_INT 3
30483: PUSH
30484: LD_INT 4
30486: PUSH
30487: EMPTY
30488: LIST
30489: LIST
30490: LIST
30491: IN
30492: IFFALSE 30513
// points := [ 3 , 2 , 1 ] ;
30494: LD_ADDR_VAR 0 9
30498: PUSH
30499: LD_INT 3
30501: PUSH
30502: LD_INT 2
30504: PUSH
30505: LD_INT 1
30507: PUSH
30508: EMPTY
30509: LIST
30510: LIST
30511: LIST
30512: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30513: LD_VAR 0 6
30517: PPUSH
30518: CALL_OW 257
30522: PUSH
30523: LD_INT 5
30525: EQUAL
30526: IFFALSE 30547
// points := [ 130 , 5 , 2 ] ;
30528: LD_ADDR_VAR 0 9
30532: PUSH
30533: LD_INT 130
30535: PUSH
30536: LD_INT 5
30538: PUSH
30539: LD_INT 2
30541: PUSH
30542: EMPTY
30543: LIST
30544: LIST
30545: LIST
30546: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30547: LD_VAR 0 6
30551: PPUSH
30552: CALL_OW 257
30556: PUSH
30557: LD_INT 8
30559: EQUAL
30560: IFFALSE 30581
// points := [ 35 , 35 , 30 ] ;
30562: LD_ADDR_VAR 0 9
30566: PUSH
30567: LD_INT 35
30569: PUSH
30570: LD_INT 35
30572: PUSH
30573: LD_INT 30
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: LIST
30580: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30581: LD_VAR 0 6
30585: PPUSH
30586: CALL_OW 257
30590: PUSH
30591: LD_INT 9
30593: EQUAL
30594: IFFALSE 30615
// points := [ 20 , 55 , 40 ] ;
30596: LD_ADDR_VAR 0 9
30600: PUSH
30601: LD_INT 20
30603: PUSH
30604: LD_INT 55
30606: PUSH
30607: LD_INT 40
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: LIST
30614: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30615: LD_VAR 0 6
30619: PPUSH
30620: CALL_OW 257
30624: PUSH
30625: LD_INT 12
30627: PUSH
30628: LD_INT 16
30630: PUSH
30631: EMPTY
30632: LIST
30633: LIST
30634: IN
30635: IFFALSE 30656
// points := [ 5 , 3 , 2 ] ;
30637: LD_ADDR_VAR 0 9
30641: PUSH
30642: LD_INT 5
30644: PUSH
30645: LD_INT 3
30647: PUSH
30648: LD_INT 2
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: LIST
30655: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30656: LD_VAR 0 6
30660: PPUSH
30661: CALL_OW 257
30665: PUSH
30666: LD_INT 17
30668: EQUAL
30669: IFFALSE 30690
// points := [ 100 , 50 , 75 ] ;
30671: LD_ADDR_VAR 0 9
30675: PUSH
30676: LD_INT 100
30678: PUSH
30679: LD_INT 50
30681: PUSH
30682: LD_INT 75
30684: PUSH
30685: EMPTY
30686: LIST
30687: LIST
30688: LIST
30689: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30690: LD_VAR 0 6
30694: PPUSH
30695: CALL_OW 257
30699: PUSH
30700: LD_INT 15
30702: EQUAL
30703: IFFALSE 30724
// points := [ 10 , 5 , 3 ] ;
30705: LD_ADDR_VAR 0 9
30709: PUSH
30710: LD_INT 10
30712: PUSH
30713: LD_INT 5
30715: PUSH
30716: LD_INT 3
30718: PUSH
30719: EMPTY
30720: LIST
30721: LIST
30722: LIST
30723: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30724: LD_VAR 0 6
30728: PPUSH
30729: CALL_OW 257
30733: PUSH
30734: LD_INT 14
30736: EQUAL
30737: IFFALSE 30758
// points := [ 10 , 0 , 0 ] ;
30739: LD_ADDR_VAR 0 9
30743: PUSH
30744: LD_INT 10
30746: PUSH
30747: LD_INT 0
30749: PUSH
30750: LD_INT 0
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: LIST
30757: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30758: LD_VAR 0 6
30762: PPUSH
30763: CALL_OW 257
30767: PUSH
30768: LD_INT 11
30770: EQUAL
30771: IFFALSE 30792
// points := [ 30 , 10 , 5 ] ;
30773: LD_ADDR_VAR 0 9
30777: PUSH
30778: LD_INT 30
30780: PUSH
30781: LD_INT 10
30783: PUSH
30784: LD_INT 5
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: LIST
30791: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30792: LD_VAR 0 1
30796: PPUSH
30797: LD_INT 5
30799: PPUSH
30800: CALL_OW 321
30804: PUSH
30805: LD_INT 2
30807: EQUAL
30808: IFFALSE 30825
// bpoints := bpoints * 1.8 ;
30810: LD_ADDR_VAR 0 10
30814: PUSH
30815: LD_VAR 0 10
30819: PUSH
30820: LD_REAL  1.80000000000000E+0000
30823: MUL
30824: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30825: LD_VAR 0 6
30829: PPUSH
30830: CALL_OW 257
30834: PUSH
30835: LD_INT 1
30837: PUSH
30838: LD_INT 2
30840: PUSH
30841: LD_INT 3
30843: PUSH
30844: LD_INT 4
30846: PUSH
30847: EMPTY
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: IN
30853: PUSH
30854: LD_VAR 0 1
30858: PPUSH
30859: LD_INT 51
30861: PPUSH
30862: CALL_OW 321
30866: PUSH
30867: LD_INT 2
30869: EQUAL
30870: AND
30871: IFFALSE 30888
// bpoints := bpoints * 1.2 ;
30873: LD_ADDR_VAR 0 10
30877: PUSH
30878: LD_VAR 0 10
30882: PUSH
30883: LD_REAL  1.20000000000000E+0000
30886: MUL
30887: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30888: LD_VAR 0 6
30892: PPUSH
30893: CALL_OW 257
30897: PUSH
30898: LD_INT 5
30900: PUSH
30901: LD_INT 7
30903: PUSH
30904: LD_INT 9
30906: PUSH
30907: EMPTY
30908: LIST
30909: LIST
30910: LIST
30911: IN
30912: PUSH
30913: LD_VAR 0 1
30917: PPUSH
30918: LD_INT 52
30920: PPUSH
30921: CALL_OW 321
30925: PUSH
30926: LD_INT 2
30928: EQUAL
30929: AND
30930: IFFALSE 30947
// bpoints := bpoints * 1.5 ;
30932: LD_ADDR_VAR 0 10
30936: PUSH
30937: LD_VAR 0 10
30941: PUSH
30942: LD_REAL  1.50000000000000E+0000
30945: MUL
30946: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30947: LD_VAR 0 1
30951: PPUSH
30952: LD_INT 66
30954: PPUSH
30955: CALL_OW 321
30959: PUSH
30960: LD_INT 2
30962: EQUAL
30963: IFFALSE 30980
// bpoints := bpoints * 1.1 ;
30965: LD_ADDR_VAR 0 10
30969: PUSH
30970: LD_VAR 0 10
30974: PUSH
30975: LD_REAL  1.10000000000000E+0000
30978: MUL
30979: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30980: LD_ADDR_VAR 0 10
30984: PUSH
30985: LD_VAR 0 10
30989: PUSH
30990: LD_VAR 0 6
30994: PPUSH
30995: LD_INT 1
30997: PPUSH
30998: CALL_OW 259
31002: PUSH
31003: LD_REAL  1.15000000000000E+0000
31006: MUL
31007: MUL
31008: ST_TO_ADDR
// end ; unit_vehicle :
31009: GO 31837
31011: LD_INT 2
31013: DOUBLE
31014: EQUAL
31015: IFTRUE 31019
31017: GO 31825
31019: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
31020: LD_VAR 0 6
31024: PPUSH
31025: CALL_OW 264
31029: PUSH
31030: LD_INT 2
31032: PUSH
31033: LD_INT 42
31035: PUSH
31036: LD_INT 24
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: LIST
31043: IN
31044: IFFALSE 31065
// points := [ 25 , 5 , 3 ] ;
31046: LD_ADDR_VAR 0 9
31050: PUSH
31051: LD_INT 25
31053: PUSH
31054: LD_INT 5
31056: PUSH
31057: LD_INT 3
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: LIST
31064: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
31065: LD_VAR 0 6
31069: PPUSH
31070: CALL_OW 264
31074: PUSH
31075: LD_INT 4
31077: PUSH
31078: LD_INT 43
31080: PUSH
31081: LD_INT 25
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: LIST
31088: IN
31089: IFFALSE 31110
// points := [ 40 , 15 , 5 ] ;
31091: LD_ADDR_VAR 0 9
31095: PUSH
31096: LD_INT 40
31098: PUSH
31099: LD_INT 15
31101: PUSH
31102: LD_INT 5
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: LIST
31109: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31110: LD_VAR 0 6
31114: PPUSH
31115: CALL_OW 264
31119: PUSH
31120: LD_INT 3
31122: PUSH
31123: LD_INT 23
31125: PUSH
31126: EMPTY
31127: LIST
31128: LIST
31129: IN
31130: IFFALSE 31151
// points := [ 7 , 25 , 8 ] ;
31132: LD_ADDR_VAR 0 9
31136: PUSH
31137: LD_INT 7
31139: PUSH
31140: LD_INT 25
31142: PUSH
31143: LD_INT 8
31145: PUSH
31146: EMPTY
31147: LIST
31148: LIST
31149: LIST
31150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31151: LD_VAR 0 6
31155: PPUSH
31156: CALL_OW 264
31160: PUSH
31161: LD_INT 5
31163: PUSH
31164: LD_INT 27
31166: PUSH
31167: LD_INT 44
31169: PUSH
31170: EMPTY
31171: LIST
31172: LIST
31173: LIST
31174: IN
31175: IFFALSE 31196
// points := [ 14 , 50 , 16 ] ;
31177: LD_ADDR_VAR 0 9
31181: PUSH
31182: LD_INT 14
31184: PUSH
31185: LD_INT 50
31187: PUSH
31188: LD_INT 16
31190: PUSH
31191: EMPTY
31192: LIST
31193: LIST
31194: LIST
31195: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31196: LD_VAR 0 6
31200: PPUSH
31201: CALL_OW 264
31205: PUSH
31206: LD_INT 6
31208: PUSH
31209: LD_INT 46
31211: PUSH
31212: EMPTY
31213: LIST
31214: LIST
31215: IN
31216: IFFALSE 31237
// points := [ 32 , 120 , 70 ] ;
31218: LD_ADDR_VAR 0 9
31222: PUSH
31223: LD_INT 32
31225: PUSH
31226: LD_INT 120
31228: PUSH
31229: LD_INT 70
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: LIST
31236: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31237: LD_VAR 0 6
31241: PPUSH
31242: CALL_OW 264
31246: PUSH
31247: LD_INT 7
31249: PUSH
31250: LD_INT 28
31252: PUSH
31253: LD_INT 45
31255: PUSH
31256: LD_INT 92
31258: PUSH
31259: EMPTY
31260: LIST
31261: LIST
31262: LIST
31263: LIST
31264: IN
31265: IFFALSE 31286
// points := [ 35 , 20 , 45 ] ;
31267: LD_ADDR_VAR 0 9
31271: PUSH
31272: LD_INT 35
31274: PUSH
31275: LD_INT 20
31277: PUSH
31278: LD_INT 45
31280: PUSH
31281: EMPTY
31282: LIST
31283: LIST
31284: LIST
31285: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31286: LD_VAR 0 6
31290: PPUSH
31291: CALL_OW 264
31295: PUSH
31296: LD_INT 47
31298: PUSH
31299: EMPTY
31300: LIST
31301: IN
31302: IFFALSE 31323
// points := [ 67 , 45 , 75 ] ;
31304: LD_ADDR_VAR 0 9
31308: PUSH
31309: LD_INT 67
31311: PUSH
31312: LD_INT 45
31314: PUSH
31315: LD_INT 75
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: LIST
31322: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31323: LD_VAR 0 6
31327: PPUSH
31328: CALL_OW 264
31332: PUSH
31333: LD_INT 26
31335: PUSH
31336: EMPTY
31337: LIST
31338: IN
31339: IFFALSE 31360
// points := [ 120 , 30 , 80 ] ;
31341: LD_ADDR_VAR 0 9
31345: PUSH
31346: LD_INT 120
31348: PUSH
31349: LD_INT 30
31351: PUSH
31352: LD_INT 80
31354: PUSH
31355: EMPTY
31356: LIST
31357: LIST
31358: LIST
31359: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31360: LD_VAR 0 6
31364: PPUSH
31365: CALL_OW 264
31369: PUSH
31370: LD_INT 22
31372: PUSH
31373: EMPTY
31374: LIST
31375: IN
31376: IFFALSE 31397
// points := [ 40 , 1 , 1 ] ;
31378: LD_ADDR_VAR 0 9
31382: PUSH
31383: LD_INT 40
31385: PUSH
31386: LD_INT 1
31388: PUSH
31389: LD_INT 1
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: LIST
31396: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31397: LD_VAR 0 6
31401: PPUSH
31402: CALL_OW 264
31406: PUSH
31407: LD_INT 29
31409: PUSH
31410: EMPTY
31411: LIST
31412: IN
31413: IFFALSE 31434
// points := [ 70 , 200 , 400 ] ;
31415: LD_ADDR_VAR 0 9
31419: PUSH
31420: LD_INT 70
31422: PUSH
31423: LD_INT 200
31425: PUSH
31426: LD_INT 400
31428: PUSH
31429: EMPTY
31430: LIST
31431: LIST
31432: LIST
31433: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31434: LD_VAR 0 6
31438: PPUSH
31439: CALL_OW 264
31443: PUSH
31444: LD_INT 14
31446: PUSH
31447: LD_INT 53
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: IN
31454: IFFALSE 31475
// points := [ 40 , 10 , 20 ] ;
31456: LD_ADDR_VAR 0 9
31460: PUSH
31461: LD_INT 40
31463: PUSH
31464: LD_INT 10
31466: PUSH
31467: LD_INT 20
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: LIST
31474: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31475: LD_VAR 0 6
31479: PPUSH
31480: CALL_OW 264
31484: PUSH
31485: LD_INT 9
31487: PUSH
31488: EMPTY
31489: LIST
31490: IN
31491: IFFALSE 31512
// points := [ 5 , 70 , 20 ] ;
31493: LD_ADDR_VAR 0 9
31497: PUSH
31498: LD_INT 5
31500: PUSH
31501: LD_INT 70
31503: PUSH
31504: LD_INT 20
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: LIST
31511: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31512: LD_VAR 0 6
31516: PPUSH
31517: CALL_OW 264
31521: PUSH
31522: LD_INT 10
31524: PUSH
31525: EMPTY
31526: LIST
31527: IN
31528: IFFALSE 31549
// points := [ 35 , 110 , 70 ] ;
31530: LD_ADDR_VAR 0 9
31534: PUSH
31535: LD_INT 35
31537: PUSH
31538: LD_INT 110
31540: PUSH
31541: LD_INT 70
31543: PUSH
31544: EMPTY
31545: LIST
31546: LIST
31547: LIST
31548: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31549: LD_VAR 0 6
31553: PPUSH
31554: CALL_OW 265
31558: PUSH
31559: LD_INT 25
31561: EQUAL
31562: IFFALSE 31583
// points := [ 80 , 65 , 100 ] ;
31564: LD_ADDR_VAR 0 9
31568: PUSH
31569: LD_INT 80
31571: PUSH
31572: LD_INT 65
31574: PUSH
31575: LD_INT 100
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: LIST
31582: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31583: LD_VAR 0 6
31587: PPUSH
31588: CALL_OW 263
31592: PUSH
31593: LD_INT 1
31595: EQUAL
31596: IFFALSE 31631
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31598: LD_ADDR_VAR 0 10
31602: PUSH
31603: LD_VAR 0 10
31607: PUSH
31608: LD_VAR 0 6
31612: PPUSH
31613: CALL_OW 311
31617: PPUSH
31618: LD_INT 3
31620: PPUSH
31621: CALL_OW 259
31625: PUSH
31626: LD_INT 4
31628: MUL
31629: MUL
31630: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31631: LD_VAR 0 6
31635: PPUSH
31636: CALL_OW 263
31640: PUSH
31641: LD_INT 2
31643: EQUAL
31644: IFFALSE 31695
// begin j := IsControledBy ( i ) ;
31646: LD_ADDR_VAR 0 7
31650: PUSH
31651: LD_VAR 0 6
31655: PPUSH
31656: CALL_OW 312
31660: ST_TO_ADDR
// if j then
31661: LD_VAR 0 7
31665: IFFALSE 31695
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31667: LD_ADDR_VAR 0 10
31671: PUSH
31672: LD_VAR 0 10
31676: PUSH
31677: LD_VAR 0 7
31681: PPUSH
31682: LD_INT 3
31684: PPUSH
31685: CALL_OW 259
31689: PUSH
31690: LD_INT 3
31692: MUL
31693: MUL
31694: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31695: LD_VAR 0 6
31699: PPUSH
31700: CALL_OW 264
31704: PUSH
31705: LD_INT 5
31707: PUSH
31708: LD_INT 6
31710: PUSH
31711: LD_INT 46
31713: PUSH
31714: LD_INT 44
31716: PUSH
31717: LD_INT 47
31719: PUSH
31720: LD_INT 45
31722: PUSH
31723: LD_INT 28
31725: PUSH
31726: LD_INT 7
31728: PUSH
31729: LD_INT 27
31731: PUSH
31732: LD_INT 29
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: LIST
31739: LIST
31740: LIST
31741: LIST
31742: LIST
31743: LIST
31744: LIST
31745: LIST
31746: IN
31747: PUSH
31748: LD_VAR 0 1
31752: PPUSH
31753: LD_INT 52
31755: PPUSH
31756: CALL_OW 321
31760: PUSH
31761: LD_INT 2
31763: EQUAL
31764: AND
31765: IFFALSE 31782
// bpoints := bpoints * 1.2 ;
31767: LD_ADDR_VAR 0 10
31771: PUSH
31772: LD_VAR 0 10
31776: PUSH
31777: LD_REAL  1.20000000000000E+0000
31780: MUL
31781: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31782: LD_VAR 0 6
31786: PPUSH
31787: CALL_OW 264
31791: PUSH
31792: LD_INT 6
31794: PUSH
31795: LD_INT 46
31797: PUSH
31798: LD_INT 47
31800: PUSH
31801: EMPTY
31802: LIST
31803: LIST
31804: LIST
31805: IN
31806: IFFALSE 31823
// bpoints := bpoints * 1.2 ;
31808: LD_ADDR_VAR 0 10
31812: PUSH
31813: LD_VAR 0 10
31817: PUSH
31818: LD_REAL  1.20000000000000E+0000
31821: MUL
31822: ST_TO_ADDR
// end ; unit_building :
31823: GO 31837
31825: LD_INT 3
31827: DOUBLE
31828: EQUAL
31829: IFTRUE 31833
31831: GO 31836
31833: POP
// ; end ;
31834: GO 31837
31836: POP
// for j = 1 to 3 do
31837: LD_ADDR_VAR 0 7
31841: PUSH
31842: DOUBLE
31843: LD_INT 1
31845: DEC
31846: ST_TO_ADDR
31847: LD_INT 3
31849: PUSH
31850: FOR_TO
31851: IFFALSE 31904
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31853: LD_ADDR_VAR 0 5
31857: PUSH
31858: LD_VAR 0 5
31862: PPUSH
31863: LD_VAR 0 7
31867: PPUSH
31868: LD_VAR 0 5
31872: PUSH
31873: LD_VAR 0 7
31877: ARRAY
31878: PUSH
31879: LD_VAR 0 9
31883: PUSH
31884: LD_VAR 0 7
31888: ARRAY
31889: PUSH
31890: LD_VAR 0 10
31894: MUL
31895: PLUS
31896: PPUSH
31897: CALL_OW 1
31901: ST_TO_ADDR
31902: GO 31850
31904: POP
31905: POP
// end ;
31906: GO 30385
31908: POP
31909: POP
// result := Replace ( result , 4 , tmp ) ;
31910: LD_ADDR_VAR 0 5
31914: PUSH
31915: LD_VAR 0 5
31919: PPUSH
31920: LD_INT 4
31922: PPUSH
31923: LD_VAR 0 8
31927: PPUSH
31928: CALL_OW 1
31932: ST_TO_ADDR
// end ;
31933: LD_VAR 0 5
31937: RET
// export function DangerAtRange ( unit , range ) ; begin
31938: LD_INT 0
31940: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31941: LD_ADDR_VAR 0 3
31945: PUSH
31946: LD_VAR 0 1
31950: PPUSH
31951: CALL_OW 255
31955: PPUSH
31956: LD_VAR 0 1
31960: PPUSH
31961: CALL_OW 250
31965: PPUSH
31966: LD_VAR 0 1
31970: PPUSH
31971: CALL_OW 251
31975: PPUSH
31976: LD_VAR 0 2
31980: PPUSH
31981: CALL 30237 0 4
31985: ST_TO_ADDR
// end ;
31986: LD_VAR 0 3
31990: RET
// export function DangerInArea ( side , area ) ; begin
31991: LD_INT 0
31993: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31994: LD_ADDR_VAR 0 3
31998: PUSH
31999: LD_VAR 0 2
32003: PPUSH
32004: LD_INT 81
32006: PUSH
32007: LD_VAR 0 1
32011: PUSH
32012: EMPTY
32013: LIST
32014: LIST
32015: PPUSH
32016: CALL_OW 70
32020: ST_TO_ADDR
// end ;
32021: LD_VAR 0 3
32025: RET
// export function IsExtension ( b ) ; begin
32026: LD_INT 0
32028: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
32029: LD_ADDR_VAR 0 2
32033: PUSH
32034: LD_VAR 0 1
32038: PUSH
32039: LD_INT 23
32041: PUSH
32042: LD_INT 20
32044: PUSH
32045: LD_INT 22
32047: PUSH
32048: LD_INT 17
32050: PUSH
32051: LD_INT 24
32053: PUSH
32054: LD_INT 21
32056: PUSH
32057: LD_INT 19
32059: PUSH
32060: LD_INT 16
32062: PUSH
32063: LD_INT 25
32065: PUSH
32066: LD_INT 18
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: LIST
32073: LIST
32074: LIST
32075: LIST
32076: LIST
32077: LIST
32078: LIST
32079: LIST
32080: IN
32081: ST_TO_ADDR
// end ;
32082: LD_VAR 0 2
32086: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
32087: LD_INT 0
32089: PPUSH
32090: PPUSH
32091: PPUSH
// result := [ ] ;
32092: LD_ADDR_VAR 0 4
32096: PUSH
32097: EMPTY
32098: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32099: LD_ADDR_VAR 0 5
32103: PUSH
32104: LD_VAR 0 2
32108: PPUSH
32109: LD_INT 21
32111: PUSH
32112: LD_INT 3
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PPUSH
32119: CALL_OW 70
32123: ST_TO_ADDR
// if not tmp then
32124: LD_VAR 0 5
32128: NOT
32129: IFFALSE 32133
// exit ;
32131: GO 32197
// if checkLink then
32133: LD_VAR 0 3
32137: IFFALSE 32187
// begin for i in tmp do
32139: LD_ADDR_VAR 0 6
32143: PUSH
32144: LD_VAR 0 5
32148: PUSH
32149: FOR_IN
32150: IFFALSE 32185
// if GetBase ( i ) <> base then
32152: LD_VAR 0 6
32156: PPUSH
32157: CALL_OW 274
32161: PUSH
32162: LD_VAR 0 1
32166: NONEQUAL
32167: IFFALSE 32183
// ComLinkToBase ( base , i ) ;
32169: LD_VAR 0 1
32173: PPUSH
32174: LD_VAR 0 6
32178: PPUSH
32179: CALL_OW 169
32183: GO 32149
32185: POP
32186: POP
// end ; result := tmp ;
32187: LD_ADDR_VAR 0 4
32191: PUSH
32192: LD_VAR 0 5
32196: ST_TO_ADDR
// end ;
32197: LD_VAR 0 4
32201: RET
// export function ComComplete ( units , b ) ; var i ; begin
32202: LD_INT 0
32204: PPUSH
32205: PPUSH
// if not units then
32206: LD_VAR 0 1
32210: NOT
32211: IFFALSE 32215
// exit ;
32213: GO 32305
// for i in units do
32215: LD_ADDR_VAR 0 4
32219: PUSH
32220: LD_VAR 0 1
32224: PUSH
32225: FOR_IN
32226: IFFALSE 32303
// if BuildingStatus ( b ) = bs_build then
32228: LD_VAR 0 2
32232: PPUSH
32233: CALL_OW 461
32237: PUSH
32238: LD_INT 1
32240: EQUAL
32241: IFFALSE 32301
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32243: LD_VAR 0 4
32247: PPUSH
32248: LD_STRING h
32250: PUSH
32251: LD_VAR 0 2
32255: PPUSH
32256: CALL_OW 250
32260: PUSH
32261: LD_VAR 0 2
32265: PPUSH
32266: CALL_OW 251
32270: PUSH
32271: LD_VAR 0 2
32275: PUSH
32276: LD_INT 0
32278: PUSH
32279: LD_INT 0
32281: PUSH
32282: LD_INT 0
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: PUSH
32294: EMPTY
32295: LIST
32296: PPUSH
32297: CALL_OW 446
32301: GO 32225
32303: POP
32304: POP
// end ;
32305: LD_VAR 0 3
32309: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32310: LD_INT 0
32312: PPUSH
32313: PPUSH
32314: PPUSH
32315: PPUSH
32316: PPUSH
32317: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32318: LD_VAR 0 1
32322: NOT
32323: PUSH
32324: LD_VAR 0 1
32328: PPUSH
32329: CALL_OW 263
32333: PUSH
32334: LD_INT 2
32336: NONEQUAL
32337: OR
32338: IFFALSE 32342
// exit ;
32340: GO 32658
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32342: LD_ADDR_VAR 0 6
32346: PUSH
32347: LD_INT 22
32349: PUSH
32350: LD_VAR 0 1
32354: PPUSH
32355: CALL_OW 255
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: PUSH
32364: LD_INT 2
32366: PUSH
32367: LD_INT 30
32369: PUSH
32370: LD_INT 36
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PUSH
32377: LD_INT 34
32379: PUSH
32380: LD_INT 31
32382: PUSH
32383: EMPTY
32384: LIST
32385: LIST
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: LIST
32391: PUSH
32392: EMPTY
32393: LIST
32394: LIST
32395: PPUSH
32396: CALL_OW 69
32400: ST_TO_ADDR
// if not tmp then
32401: LD_VAR 0 6
32405: NOT
32406: IFFALSE 32410
// exit ;
32408: GO 32658
// result := [ ] ;
32410: LD_ADDR_VAR 0 2
32414: PUSH
32415: EMPTY
32416: ST_TO_ADDR
// for i in tmp do
32417: LD_ADDR_VAR 0 3
32421: PUSH
32422: LD_VAR 0 6
32426: PUSH
32427: FOR_IN
32428: IFFALSE 32499
// begin t := UnitsInside ( i ) ;
32430: LD_ADDR_VAR 0 4
32434: PUSH
32435: LD_VAR 0 3
32439: PPUSH
32440: CALL_OW 313
32444: ST_TO_ADDR
// if t then
32445: LD_VAR 0 4
32449: IFFALSE 32497
// for j in t do
32451: LD_ADDR_VAR 0 7
32455: PUSH
32456: LD_VAR 0 4
32460: PUSH
32461: FOR_IN
32462: IFFALSE 32495
// result := Replace ( result , result + 1 , j ) ;
32464: LD_ADDR_VAR 0 2
32468: PUSH
32469: LD_VAR 0 2
32473: PPUSH
32474: LD_VAR 0 2
32478: PUSH
32479: LD_INT 1
32481: PLUS
32482: PPUSH
32483: LD_VAR 0 7
32487: PPUSH
32488: CALL_OW 1
32492: ST_TO_ADDR
32493: GO 32461
32495: POP
32496: POP
// end ;
32497: GO 32427
32499: POP
32500: POP
// if not result then
32501: LD_VAR 0 2
32505: NOT
32506: IFFALSE 32510
// exit ;
32508: GO 32658
// mech := result [ 1 ] ;
32510: LD_ADDR_VAR 0 5
32514: PUSH
32515: LD_VAR 0 2
32519: PUSH
32520: LD_INT 1
32522: ARRAY
32523: ST_TO_ADDR
// if result > 1 then
32524: LD_VAR 0 2
32528: PUSH
32529: LD_INT 1
32531: GREATER
32532: IFFALSE 32644
// begin for i = 2 to result do
32534: LD_ADDR_VAR 0 3
32538: PUSH
32539: DOUBLE
32540: LD_INT 2
32542: DEC
32543: ST_TO_ADDR
32544: LD_VAR 0 2
32548: PUSH
32549: FOR_TO
32550: IFFALSE 32642
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32552: LD_ADDR_VAR 0 4
32556: PUSH
32557: LD_VAR 0 2
32561: PUSH
32562: LD_VAR 0 3
32566: ARRAY
32567: PPUSH
32568: LD_INT 3
32570: PPUSH
32571: CALL_OW 259
32575: PUSH
32576: LD_VAR 0 2
32580: PUSH
32581: LD_VAR 0 3
32585: ARRAY
32586: PPUSH
32587: CALL_OW 432
32591: MINUS
32592: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32593: LD_VAR 0 4
32597: PUSH
32598: LD_VAR 0 5
32602: PPUSH
32603: LD_INT 3
32605: PPUSH
32606: CALL_OW 259
32610: PUSH
32611: LD_VAR 0 5
32615: PPUSH
32616: CALL_OW 432
32620: MINUS
32621: GREATEREQUAL
32622: IFFALSE 32640
// mech := result [ i ] ;
32624: LD_ADDR_VAR 0 5
32628: PUSH
32629: LD_VAR 0 2
32633: PUSH
32634: LD_VAR 0 3
32638: ARRAY
32639: ST_TO_ADDR
// end ;
32640: GO 32549
32642: POP
32643: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32644: LD_VAR 0 1
32648: PPUSH
32649: LD_VAR 0 5
32653: PPUSH
32654: CALL_OW 135
// end ;
32658: LD_VAR 0 2
32662: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32663: LD_INT 0
32665: PPUSH
32666: PPUSH
32667: PPUSH
32668: PPUSH
32669: PPUSH
32670: PPUSH
32671: PPUSH
32672: PPUSH
32673: PPUSH
32674: PPUSH
32675: PPUSH
32676: PPUSH
32677: PPUSH
// result := [ ] ;
32678: LD_ADDR_VAR 0 7
32682: PUSH
32683: EMPTY
32684: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32685: LD_VAR 0 1
32689: PPUSH
32690: CALL_OW 266
32694: PUSH
32695: LD_INT 0
32697: PUSH
32698: LD_INT 1
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: IN
32705: NOT
32706: IFFALSE 32710
// exit ;
32708: GO 34344
// if name then
32710: LD_VAR 0 3
32714: IFFALSE 32730
// SetBName ( base_dep , name ) ;
32716: LD_VAR 0 1
32720: PPUSH
32721: LD_VAR 0 3
32725: PPUSH
32726: CALL_OW 500
// base := GetBase ( base_dep ) ;
32730: LD_ADDR_VAR 0 15
32734: PUSH
32735: LD_VAR 0 1
32739: PPUSH
32740: CALL_OW 274
32744: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32745: LD_ADDR_VAR 0 16
32749: PUSH
32750: LD_VAR 0 1
32754: PPUSH
32755: CALL_OW 255
32759: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32760: LD_ADDR_VAR 0 17
32764: PUSH
32765: LD_VAR 0 1
32769: PPUSH
32770: CALL_OW 248
32774: ST_TO_ADDR
// if sources then
32775: LD_VAR 0 5
32779: IFFALSE 32826
// for i = 1 to 3 do
32781: LD_ADDR_VAR 0 8
32785: PUSH
32786: DOUBLE
32787: LD_INT 1
32789: DEC
32790: ST_TO_ADDR
32791: LD_INT 3
32793: PUSH
32794: FOR_TO
32795: IFFALSE 32824
// AddResourceType ( base , i , sources [ i ] ) ;
32797: LD_VAR 0 15
32801: PPUSH
32802: LD_VAR 0 8
32806: PPUSH
32807: LD_VAR 0 5
32811: PUSH
32812: LD_VAR 0 8
32816: ARRAY
32817: PPUSH
32818: CALL_OW 276
32822: GO 32794
32824: POP
32825: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32826: LD_ADDR_VAR 0 18
32830: PUSH
32831: LD_VAR 0 15
32835: PPUSH
32836: LD_VAR 0 2
32840: PPUSH
32841: LD_INT 1
32843: PPUSH
32844: CALL 32087 0 3
32848: ST_TO_ADDR
// InitHc ;
32849: CALL_OW 19
// InitUc ;
32853: CALL_OW 18
// uc_side := side ;
32857: LD_ADDR_OWVAR 20
32861: PUSH
32862: LD_VAR 0 16
32866: ST_TO_ADDR
// uc_nation := nation ;
32867: LD_ADDR_OWVAR 21
32871: PUSH
32872: LD_VAR 0 17
32876: ST_TO_ADDR
// if buildings then
32877: LD_VAR 0 18
32881: IFFALSE 34203
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32883: LD_ADDR_VAR 0 19
32887: PUSH
32888: LD_VAR 0 18
32892: PPUSH
32893: LD_INT 2
32895: PUSH
32896: LD_INT 30
32898: PUSH
32899: LD_INT 29
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 30
32908: PUSH
32909: LD_INT 30
32911: PUSH
32912: EMPTY
32913: LIST
32914: LIST
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: LIST
32920: PPUSH
32921: CALL_OW 72
32925: ST_TO_ADDR
// if tmp then
32926: LD_VAR 0 19
32930: IFFALSE 32978
// for i in tmp do
32932: LD_ADDR_VAR 0 8
32936: PUSH
32937: LD_VAR 0 19
32941: PUSH
32942: FOR_IN
32943: IFFALSE 32976
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32945: LD_VAR 0 8
32949: PPUSH
32950: CALL_OW 250
32954: PPUSH
32955: LD_VAR 0 8
32959: PPUSH
32960: CALL_OW 251
32964: PPUSH
32965: LD_VAR 0 16
32969: PPUSH
32970: CALL_OW 441
32974: GO 32942
32976: POP
32977: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32978: LD_VAR 0 18
32982: PPUSH
32983: LD_INT 2
32985: PUSH
32986: LD_INT 30
32988: PUSH
32989: LD_INT 32
32991: PUSH
32992: EMPTY
32993: LIST
32994: LIST
32995: PUSH
32996: LD_INT 30
32998: PUSH
32999: LD_INT 33
33001: PUSH
33002: EMPTY
33003: LIST
33004: LIST
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: LIST
33010: PPUSH
33011: CALL_OW 72
33015: IFFALSE 33103
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
33017: LD_ADDR_VAR 0 8
33021: PUSH
33022: LD_VAR 0 18
33026: PPUSH
33027: LD_INT 2
33029: PUSH
33030: LD_INT 30
33032: PUSH
33033: LD_INT 32
33035: PUSH
33036: EMPTY
33037: LIST
33038: LIST
33039: PUSH
33040: LD_INT 30
33042: PUSH
33043: LD_INT 33
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: PUSH
33050: EMPTY
33051: LIST
33052: LIST
33053: LIST
33054: PPUSH
33055: CALL_OW 72
33059: PUSH
33060: FOR_IN
33061: IFFALSE 33101
// begin if not GetBWeapon ( i ) then
33063: LD_VAR 0 8
33067: PPUSH
33068: CALL_OW 269
33072: NOT
33073: IFFALSE 33099
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
33075: LD_VAR 0 8
33079: PPUSH
33080: LD_VAR 0 8
33084: PPUSH
33085: LD_VAR 0 2
33089: PPUSH
33090: CALL 34349 0 2
33094: PPUSH
33095: CALL_OW 431
// end ;
33099: GO 33060
33101: POP
33102: POP
// end ; for i = 1 to personel do
33103: LD_ADDR_VAR 0 8
33107: PUSH
33108: DOUBLE
33109: LD_INT 1
33111: DEC
33112: ST_TO_ADDR
33113: LD_VAR 0 6
33117: PUSH
33118: FOR_TO
33119: IFFALSE 34183
// begin if i > 4 then
33121: LD_VAR 0 8
33125: PUSH
33126: LD_INT 4
33128: GREATER
33129: IFFALSE 33133
// break ;
33131: GO 34183
// case i of 1 :
33133: LD_VAR 0 8
33137: PUSH
33138: LD_INT 1
33140: DOUBLE
33141: EQUAL
33142: IFTRUE 33146
33144: GO 33226
33146: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33147: LD_ADDR_VAR 0 12
33151: PUSH
33152: LD_VAR 0 18
33156: PPUSH
33157: LD_INT 22
33159: PUSH
33160: LD_VAR 0 16
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 58
33171: PUSH
33172: EMPTY
33173: LIST
33174: PUSH
33175: LD_INT 2
33177: PUSH
33178: LD_INT 30
33180: PUSH
33181: LD_INT 32
33183: PUSH
33184: EMPTY
33185: LIST
33186: LIST
33187: PUSH
33188: LD_INT 30
33190: PUSH
33191: LD_INT 4
33193: PUSH
33194: EMPTY
33195: LIST
33196: LIST
33197: PUSH
33198: LD_INT 30
33200: PUSH
33201: LD_INT 5
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: LIST
33212: LIST
33213: PUSH
33214: EMPTY
33215: LIST
33216: LIST
33217: LIST
33218: PPUSH
33219: CALL_OW 72
33223: ST_TO_ADDR
33224: GO 33448
33226: LD_INT 2
33228: DOUBLE
33229: EQUAL
33230: IFTRUE 33234
33232: GO 33296
33234: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33235: LD_ADDR_VAR 0 12
33239: PUSH
33240: LD_VAR 0 18
33244: PPUSH
33245: LD_INT 22
33247: PUSH
33248: LD_VAR 0 16
33252: PUSH
33253: EMPTY
33254: LIST
33255: LIST
33256: PUSH
33257: LD_INT 2
33259: PUSH
33260: LD_INT 30
33262: PUSH
33263: LD_INT 0
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: LD_INT 30
33272: PUSH
33273: LD_INT 1
33275: PUSH
33276: EMPTY
33277: LIST
33278: LIST
33279: PUSH
33280: EMPTY
33281: LIST
33282: LIST
33283: LIST
33284: PUSH
33285: EMPTY
33286: LIST
33287: LIST
33288: PPUSH
33289: CALL_OW 72
33293: ST_TO_ADDR
33294: GO 33448
33296: LD_INT 3
33298: DOUBLE
33299: EQUAL
33300: IFTRUE 33304
33302: GO 33366
33304: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33305: LD_ADDR_VAR 0 12
33309: PUSH
33310: LD_VAR 0 18
33314: PPUSH
33315: LD_INT 22
33317: PUSH
33318: LD_VAR 0 16
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 2
33329: PUSH
33330: LD_INT 30
33332: PUSH
33333: LD_INT 2
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 30
33342: PUSH
33343: LD_INT 3
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: LIST
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PPUSH
33359: CALL_OW 72
33363: ST_TO_ADDR
33364: GO 33448
33366: LD_INT 4
33368: DOUBLE
33369: EQUAL
33370: IFTRUE 33374
33372: GO 33447
33374: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33375: LD_ADDR_VAR 0 12
33379: PUSH
33380: LD_VAR 0 18
33384: PPUSH
33385: LD_INT 22
33387: PUSH
33388: LD_VAR 0 16
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 2
33399: PUSH
33400: LD_INT 30
33402: PUSH
33403: LD_INT 6
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 30
33412: PUSH
33413: LD_INT 7
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: PUSH
33420: LD_INT 30
33422: PUSH
33423: LD_INT 8
33425: PUSH
33426: EMPTY
33427: LIST
33428: LIST
33429: PUSH
33430: EMPTY
33431: LIST
33432: LIST
33433: LIST
33434: LIST
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: PPUSH
33440: CALL_OW 72
33444: ST_TO_ADDR
33445: GO 33448
33447: POP
// if i = 1 then
33448: LD_VAR 0 8
33452: PUSH
33453: LD_INT 1
33455: EQUAL
33456: IFFALSE 33567
// begin tmp := [ ] ;
33458: LD_ADDR_VAR 0 19
33462: PUSH
33463: EMPTY
33464: ST_TO_ADDR
// for j in f do
33465: LD_ADDR_VAR 0 9
33469: PUSH
33470: LD_VAR 0 12
33474: PUSH
33475: FOR_IN
33476: IFFALSE 33549
// if GetBType ( j ) = b_bunker then
33478: LD_VAR 0 9
33482: PPUSH
33483: CALL_OW 266
33487: PUSH
33488: LD_INT 32
33490: EQUAL
33491: IFFALSE 33518
// tmp := Insert ( tmp , 1 , j ) else
33493: LD_ADDR_VAR 0 19
33497: PUSH
33498: LD_VAR 0 19
33502: PPUSH
33503: LD_INT 1
33505: PPUSH
33506: LD_VAR 0 9
33510: PPUSH
33511: CALL_OW 2
33515: ST_TO_ADDR
33516: GO 33547
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33518: LD_ADDR_VAR 0 19
33522: PUSH
33523: LD_VAR 0 19
33527: PPUSH
33528: LD_VAR 0 19
33532: PUSH
33533: LD_INT 1
33535: PLUS
33536: PPUSH
33537: LD_VAR 0 9
33541: PPUSH
33542: CALL_OW 2
33546: ST_TO_ADDR
33547: GO 33475
33549: POP
33550: POP
// if tmp then
33551: LD_VAR 0 19
33555: IFFALSE 33567
// f := tmp ;
33557: LD_ADDR_VAR 0 12
33561: PUSH
33562: LD_VAR 0 19
33566: ST_TO_ADDR
// end ; x := personel [ i ] ;
33567: LD_ADDR_VAR 0 13
33571: PUSH
33572: LD_VAR 0 6
33576: PUSH
33577: LD_VAR 0 8
33581: ARRAY
33582: ST_TO_ADDR
// if x = - 1 then
33583: LD_VAR 0 13
33587: PUSH
33588: LD_INT 1
33590: NEG
33591: EQUAL
33592: IFFALSE 33801
// begin for j in f do
33594: LD_ADDR_VAR 0 9
33598: PUSH
33599: LD_VAR 0 12
33603: PUSH
33604: FOR_IN
33605: IFFALSE 33797
// repeat InitHc ;
33607: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33611: LD_VAR 0 9
33615: PPUSH
33616: CALL_OW 266
33620: PUSH
33621: LD_INT 5
33623: EQUAL
33624: IFFALSE 33694
// begin if UnitsInside ( j ) < 3 then
33626: LD_VAR 0 9
33630: PPUSH
33631: CALL_OW 313
33635: PUSH
33636: LD_INT 3
33638: LESS
33639: IFFALSE 33675
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33641: LD_INT 0
33643: PPUSH
33644: LD_INT 5
33646: PUSH
33647: LD_INT 8
33649: PUSH
33650: LD_INT 9
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: LIST
33657: PUSH
33658: LD_VAR 0 17
33662: ARRAY
33663: PPUSH
33664: LD_VAR 0 4
33668: PPUSH
33669: CALL_OW 380
33673: GO 33692
// PrepareHuman ( false , i , skill ) ;
33675: LD_INT 0
33677: PPUSH
33678: LD_VAR 0 8
33682: PPUSH
33683: LD_VAR 0 4
33687: PPUSH
33688: CALL_OW 380
// end else
33692: GO 33711
// PrepareHuman ( false , i , skill ) ;
33694: LD_INT 0
33696: PPUSH
33697: LD_VAR 0 8
33701: PPUSH
33702: LD_VAR 0 4
33706: PPUSH
33707: CALL_OW 380
// un := CreateHuman ;
33711: LD_ADDR_VAR 0 14
33715: PUSH
33716: CALL_OW 44
33720: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33721: LD_ADDR_VAR 0 7
33725: PUSH
33726: LD_VAR 0 7
33730: PPUSH
33731: LD_INT 1
33733: PPUSH
33734: LD_VAR 0 14
33738: PPUSH
33739: CALL_OW 2
33743: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33744: LD_VAR 0 14
33748: PPUSH
33749: LD_VAR 0 9
33753: PPUSH
33754: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33758: LD_VAR 0 9
33762: PPUSH
33763: CALL_OW 313
33767: PUSH
33768: LD_INT 6
33770: EQUAL
33771: PUSH
33772: LD_VAR 0 9
33776: PPUSH
33777: CALL_OW 266
33781: PUSH
33782: LD_INT 32
33784: PUSH
33785: LD_INT 31
33787: PUSH
33788: EMPTY
33789: LIST
33790: LIST
33791: IN
33792: OR
33793: IFFALSE 33607
33795: GO 33604
33797: POP
33798: POP
// end else
33799: GO 34181
// for j = 1 to x do
33801: LD_ADDR_VAR 0 9
33805: PUSH
33806: DOUBLE
33807: LD_INT 1
33809: DEC
33810: ST_TO_ADDR
33811: LD_VAR 0 13
33815: PUSH
33816: FOR_TO
33817: IFFALSE 34179
// begin InitHc ;
33819: CALL_OW 19
// if not f then
33823: LD_VAR 0 12
33827: NOT
33828: IFFALSE 33917
// begin PrepareHuman ( false , i , skill ) ;
33830: LD_INT 0
33832: PPUSH
33833: LD_VAR 0 8
33837: PPUSH
33838: LD_VAR 0 4
33842: PPUSH
33843: CALL_OW 380
// un := CreateHuman ;
33847: LD_ADDR_VAR 0 14
33851: PUSH
33852: CALL_OW 44
33856: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33857: LD_ADDR_VAR 0 7
33861: PUSH
33862: LD_VAR 0 7
33866: PPUSH
33867: LD_INT 1
33869: PPUSH
33870: LD_VAR 0 14
33874: PPUSH
33875: CALL_OW 2
33879: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33880: LD_VAR 0 14
33884: PPUSH
33885: LD_VAR 0 1
33889: PPUSH
33890: CALL_OW 250
33894: PPUSH
33895: LD_VAR 0 1
33899: PPUSH
33900: CALL_OW 251
33904: PPUSH
33905: LD_INT 10
33907: PPUSH
33908: LD_INT 0
33910: PPUSH
33911: CALL_OW 50
// continue ;
33915: GO 33816
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33917: LD_VAR 0 12
33921: PUSH
33922: LD_INT 1
33924: ARRAY
33925: PPUSH
33926: CALL_OW 313
33930: PUSH
33931: LD_VAR 0 12
33935: PUSH
33936: LD_INT 1
33938: ARRAY
33939: PPUSH
33940: CALL_OW 266
33944: PUSH
33945: LD_INT 32
33947: PUSH
33948: LD_INT 31
33950: PUSH
33951: EMPTY
33952: LIST
33953: LIST
33954: IN
33955: AND
33956: PUSH
33957: LD_VAR 0 12
33961: PUSH
33962: LD_INT 1
33964: ARRAY
33965: PPUSH
33966: CALL_OW 313
33970: PUSH
33971: LD_INT 6
33973: EQUAL
33974: OR
33975: IFFALSE 33995
// f := Delete ( f , 1 ) ;
33977: LD_ADDR_VAR 0 12
33981: PUSH
33982: LD_VAR 0 12
33986: PPUSH
33987: LD_INT 1
33989: PPUSH
33990: CALL_OW 3
33994: ST_TO_ADDR
// if not f then
33995: LD_VAR 0 12
33999: NOT
34000: IFFALSE 34018
// begin x := x + 2 ;
34002: LD_ADDR_VAR 0 13
34006: PUSH
34007: LD_VAR 0 13
34011: PUSH
34012: LD_INT 2
34014: PLUS
34015: ST_TO_ADDR
// continue ;
34016: GO 33816
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
34018: LD_VAR 0 12
34022: PUSH
34023: LD_INT 1
34025: ARRAY
34026: PPUSH
34027: CALL_OW 266
34031: PUSH
34032: LD_INT 5
34034: EQUAL
34035: IFFALSE 34109
// begin if UnitsInside ( f [ 1 ] ) < 3 then
34037: LD_VAR 0 12
34041: PUSH
34042: LD_INT 1
34044: ARRAY
34045: PPUSH
34046: CALL_OW 313
34050: PUSH
34051: LD_INT 3
34053: LESS
34054: IFFALSE 34090
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
34056: LD_INT 0
34058: PPUSH
34059: LD_INT 5
34061: PUSH
34062: LD_INT 8
34064: PUSH
34065: LD_INT 9
34067: PUSH
34068: EMPTY
34069: LIST
34070: LIST
34071: LIST
34072: PUSH
34073: LD_VAR 0 17
34077: ARRAY
34078: PPUSH
34079: LD_VAR 0 4
34083: PPUSH
34084: CALL_OW 380
34088: GO 34107
// PrepareHuman ( false , i , skill ) ;
34090: LD_INT 0
34092: PPUSH
34093: LD_VAR 0 8
34097: PPUSH
34098: LD_VAR 0 4
34102: PPUSH
34103: CALL_OW 380
// end else
34107: GO 34126
// PrepareHuman ( false , i , skill ) ;
34109: LD_INT 0
34111: PPUSH
34112: LD_VAR 0 8
34116: PPUSH
34117: LD_VAR 0 4
34121: PPUSH
34122: CALL_OW 380
// un := CreateHuman ;
34126: LD_ADDR_VAR 0 14
34130: PUSH
34131: CALL_OW 44
34135: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34136: LD_ADDR_VAR 0 7
34140: PUSH
34141: LD_VAR 0 7
34145: PPUSH
34146: LD_INT 1
34148: PPUSH
34149: LD_VAR 0 14
34153: PPUSH
34154: CALL_OW 2
34158: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34159: LD_VAR 0 14
34163: PPUSH
34164: LD_VAR 0 12
34168: PUSH
34169: LD_INT 1
34171: ARRAY
34172: PPUSH
34173: CALL_OW 52
// end ;
34177: GO 33816
34179: POP
34180: POP
// end ;
34181: GO 33118
34183: POP
34184: POP
// result := result ^ buildings ;
34185: LD_ADDR_VAR 0 7
34189: PUSH
34190: LD_VAR 0 7
34194: PUSH
34195: LD_VAR 0 18
34199: ADD
34200: ST_TO_ADDR
// end else
34201: GO 34344
// begin for i = 1 to personel do
34203: LD_ADDR_VAR 0 8
34207: PUSH
34208: DOUBLE
34209: LD_INT 1
34211: DEC
34212: ST_TO_ADDR
34213: LD_VAR 0 6
34217: PUSH
34218: FOR_TO
34219: IFFALSE 34342
// begin if i > 4 then
34221: LD_VAR 0 8
34225: PUSH
34226: LD_INT 4
34228: GREATER
34229: IFFALSE 34233
// break ;
34231: GO 34342
// x := personel [ i ] ;
34233: LD_ADDR_VAR 0 13
34237: PUSH
34238: LD_VAR 0 6
34242: PUSH
34243: LD_VAR 0 8
34247: ARRAY
34248: ST_TO_ADDR
// if x = - 1 then
34249: LD_VAR 0 13
34253: PUSH
34254: LD_INT 1
34256: NEG
34257: EQUAL
34258: IFFALSE 34262
// continue ;
34260: GO 34218
// PrepareHuman ( false , i , skill ) ;
34262: LD_INT 0
34264: PPUSH
34265: LD_VAR 0 8
34269: PPUSH
34270: LD_VAR 0 4
34274: PPUSH
34275: CALL_OW 380
// un := CreateHuman ;
34279: LD_ADDR_VAR 0 14
34283: PUSH
34284: CALL_OW 44
34288: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34289: LD_VAR 0 14
34293: PPUSH
34294: LD_VAR 0 1
34298: PPUSH
34299: CALL_OW 250
34303: PPUSH
34304: LD_VAR 0 1
34308: PPUSH
34309: CALL_OW 251
34313: PPUSH
34314: LD_INT 10
34316: PPUSH
34317: LD_INT 0
34319: PPUSH
34320: CALL_OW 50
// result := result ^ un ;
34324: LD_ADDR_VAR 0 7
34328: PUSH
34329: LD_VAR 0 7
34333: PUSH
34334: LD_VAR 0 14
34338: ADD
34339: ST_TO_ADDR
// end ;
34340: GO 34218
34342: POP
34343: POP
// end ; end ;
34344: LD_VAR 0 7
34348: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34349: LD_INT 0
34351: PPUSH
34352: PPUSH
34353: PPUSH
34354: PPUSH
34355: PPUSH
34356: PPUSH
34357: PPUSH
34358: PPUSH
34359: PPUSH
34360: PPUSH
34361: PPUSH
34362: PPUSH
34363: PPUSH
34364: PPUSH
34365: PPUSH
34366: PPUSH
// result := false ;
34367: LD_ADDR_VAR 0 3
34371: PUSH
34372: LD_INT 0
34374: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34375: LD_VAR 0 1
34379: NOT
34380: PUSH
34381: LD_VAR 0 1
34385: PPUSH
34386: CALL_OW 266
34390: PUSH
34391: LD_INT 32
34393: PUSH
34394: LD_INT 33
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: IN
34401: NOT
34402: OR
34403: IFFALSE 34407
// exit ;
34405: GO 35516
// nat := GetNation ( tower ) ;
34407: LD_ADDR_VAR 0 12
34411: PUSH
34412: LD_VAR 0 1
34416: PPUSH
34417: CALL_OW 248
34421: ST_TO_ADDR
// side := GetSide ( tower ) ;
34422: LD_ADDR_VAR 0 16
34426: PUSH
34427: LD_VAR 0 1
34431: PPUSH
34432: CALL_OW 255
34436: ST_TO_ADDR
// x := GetX ( tower ) ;
34437: LD_ADDR_VAR 0 10
34441: PUSH
34442: LD_VAR 0 1
34446: PPUSH
34447: CALL_OW 250
34451: ST_TO_ADDR
// y := GetY ( tower ) ;
34452: LD_ADDR_VAR 0 11
34456: PUSH
34457: LD_VAR 0 1
34461: PPUSH
34462: CALL_OW 251
34466: ST_TO_ADDR
// if not x or not y then
34467: LD_VAR 0 10
34471: NOT
34472: PUSH
34473: LD_VAR 0 11
34477: NOT
34478: OR
34479: IFFALSE 34483
// exit ;
34481: GO 35516
// weapon := 0 ;
34483: LD_ADDR_VAR 0 18
34487: PUSH
34488: LD_INT 0
34490: ST_TO_ADDR
// fac_list := [ ] ;
34491: LD_ADDR_VAR 0 17
34495: PUSH
34496: EMPTY
34497: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34498: LD_ADDR_VAR 0 6
34502: PUSH
34503: LD_VAR 0 1
34507: PPUSH
34508: CALL_OW 274
34512: PPUSH
34513: LD_VAR 0 2
34517: PPUSH
34518: LD_INT 0
34520: PPUSH
34521: CALL 32087 0 3
34525: PPUSH
34526: LD_INT 30
34528: PUSH
34529: LD_INT 3
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PPUSH
34536: CALL_OW 72
34540: ST_TO_ADDR
// if not factories then
34541: LD_VAR 0 6
34545: NOT
34546: IFFALSE 34550
// exit ;
34548: GO 35516
// for i in factories do
34550: LD_ADDR_VAR 0 8
34554: PUSH
34555: LD_VAR 0 6
34559: PUSH
34560: FOR_IN
34561: IFFALSE 34586
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34563: LD_ADDR_VAR 0 17
34567: PUSH
34568: LD_VAR 0 17
34572: PUSH
34573: LD_VAR 0 8
34577: PPUSH
34578: CALL_OW 478
34582: UNION
34583: ST_TO_ADDR
34584: GO 34560
34586: POP
34587: POP
// if not fac_list then
34588: LD_VAR 0 17
34592: NOT
34593: IFFALSE 34597
// exit ;
34595: GO 35516
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34597: LD_ADDR_VAR 0 5
34601: PUSH
34602: LD_INT 4
34604: PUSH
34605: LD_INT 5
34607: PUSH
34608: LD_INT 9
34610: PUSH
34611: LD_INT 10
34613: PUSH
34614: LD_INT 6
34616: PUSH
34617: LD_INT 7
34619: PUSH
34620: LD_INT 11
34622: PUSH
34623: EMPTY
34624: LIST
34625: LIST
34626: LIST
34627: LIST
34628: LIST
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 27
34634: PUSH
34635: LD_INT 28
34637: PUSH
34638: LD_INT 26
34640: PUSH
34641: LD_INT 30
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: PUSH
34650: LD_INT 43
34652: PUSH
34653: LD_INT 44
34655: PUSH
34656: LD_INT 46
34658: PUSH
34659: LD_INT 45
34661: PUSH
34662: LD_INT 47
34664: PUSH
34665: LD_INT 49
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: LIST
34674: LIST
34675: PUSH
34676: EMPTY
34677: LIST
34678: LIST
34679: LIST
34680: PUSH
34681: LD_VAR 0 12
34685: ARRAY
34686: ST_TO_ADDR
// list := list isect fac_list ;
34687: LD_ADDR_VAR 0 5
34691: PUSH
34692: LD_VAR 0 5
34696: PUSH
34697: LD_VAR 0 17
34701: ISECT
34702: ST_TO_ADDR
// if not list then
34703: LD_VAR 0 5
34707: NOT
34708: IFFALSE 34712
// exit ;
34710: GO 35516
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34712: LD_VAR 0 12
34716: PUSH
34717: LD_INT 3
34719: EQUAL
34720: PUSH
34721: LD_INT 49
34723: PUSH
34724: LD_VAR 0 5
34728: IN
34729: AND
34730: PUSH
34731: LD_INT 31
34733: PPUSH
34734: LD_VAR 0 16
34738: PPUSH
34739: CALL_OW 321
34743: PUSH
34744: LD_INT 2
34746: EQUAL
34747: AND
34748: IFFALSE 34808
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34750: LD_INT 22
34752: PUSH
34753: LD_VAR 0 16
34757: PUSH
34758: EMPTY
34759: LIST
34760: LIST
34761: PUSH
34762: LD_INT 35
34764: PUSH
34765: LD_INT 49
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 91
34774: PUSH
34775: LD_VAR 0 1
34779: PUSH
34780: LD_INT 10
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: LIST
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: LIST
34792: PPUSH
34793: CALL_OW 69
34797: NOT
34798: IFFALSE 34808
// weapon := ru_time_lapser ;
34800: LD_ADDR_VAR 0 18
34804: PUSH
34805: LD_INT 49
34807: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34808: LD_VAR 0 12
34812: PUSH
34813: LD_INT 1
34815: PUSH
34816: LD_INT 2
34818: PUSH
34819: EMPTY
34820: LIST
34821: LIST
34822: IN
34823: PUSH
34824: LD_INT 11
34826: PUSH
34827: LD_VAR 0 5
34831: IN
34832: PUSH
34833: LD_INT 30
34835: PUSH
34836: LD_VAR 0 5
34840: IN
34841: OR
34842: AND
34843: PUSH
34844: LD_INT 6
34846: PPUSH
34847: LD_VAR 0 16
34851: PPUSH
34852: CALL_OW 321
34856: PUSH
34857: LD_INT 2
34859: EQUAL
34860: AND
34861: IFFALSE 35026
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34863: LD_INT 22
34865: PUSH
34866: LD_VAR 0 16
34870: PUSH
34871: EMPTY
34872: LIST
34873: LIST
34874: PUSH
34875: LD_INT 2
34877: PUSH
34878: LD_INT 35
34880: PUSH
34881: LD_INT 11
34883: PUSH
34884: EMPTY
34885: LIST
34886: LIST
34887: PUSH
34888: LD_INT 35
34890: PUSH
34891: LD_INT 30
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: EMPTY
34899: LIST
34900: LIST
34901: LIST
34902: PUSH
34903: LD_INT 91
34905: PUSH
34906: LD_VAR 0 1
34910: PUSH
34911: LD_INT 18
34913: PUSH
34914: EMPTY
34915: LIST
34916: LIST
34917: LIST
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: LIST
34923: PPUSH
34924: CALL_OW 69
34928: NOT
34929: PUSH
34930: LD_INT 22
34932: PUSH
34933: LD_VAR 0 16
34937: PUSH
34938: EMPTY
34939: LIST
34940: LIST
34941: PUSH
34942: LD_INT 2
34944: PUSH
34945: LD_INT 30
34947: PUSH
34948: LD_INT 32
34950: PUSH
34951: EMPTY
34952: LIST
34953: LIST
34954: PUSH
34955: LD_INT 30
34957: PUSH
34958: LD_INT 33
34960: PUSH
34961: EMPTY
34962: LIST
34963: LIST
34964: PUSH
34965: EMPTY
34966: LIST
34967: LIST
34968: LIST
34969: PUSH
34970: LD_INT 91
34972: PUSH
34973: LD_VAR 0 1
34977: PUSH
34978: LD_INT 12
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: LIST
34985: PUSH
34986: EMPTY
34987: LIST
34988: LIST
34989: LIST
34990: PUSH
34991: EMPTY
34992: LIST
34993: PPUSH
34994: CALL_OW 69
34998: PUSH
34999: LD_INT 2
35001: GREATER
35002: AND
35003: IFFALSE 35026
// weapon := [ us_radar , ar_radar ] [ nat ] ;
35005: LD_ADDR_VAR 0 18
35009: PUSH
35010: LD_INT 11
35012: PUSH
35013: LD_INT 30
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_VAR 0 12
35024: ARRAY
35025: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
35026: LD_VAR 0 18
35030: NOT
35031: PUSH
35032: LD_INT 40
35034: PPUSH
35035: LD_VAR 0 16
35039: PPUSH
35040: CALL_OW 321
35044: PUSH
35045: LD_INT 2
35047: EQUAL
35048: AND
35049: PUSH
35050: LD_INT 7
35052: PUSH
35053: LD_VAR 0 5
35057: IN
35058: PUSH
35059: LD_INT 28
35061: PUSH
35062: LD_VAR 0 5
35066: IN
35067: OR
35068: PUSH
35069: LD_INT 45
35071: PUSH
35072: LD_VAR 0 5
35076: IN
35077: OR
35078: AND
35079: IFFALSE 35333
// begin hex := GetHexInfo ( x , y ) ;
35081: LD_ADDR_VAR 0 4
35085: PUSH
35086: LD_VAR 0 10
35090: PPUSH
35091: LD_VAR 0 11
35095: PPUSH
35096: CALL_OW 546
35100: ST_TO_ADDR
// if hex [ 1 ] then
35101: LD_VAR 0 4
35105: PUSH
35106: LD_INT 1
35108: ARRAY
35109: IFFALSE 35113
// exit ;
35111: GO 35516
// height := hex [ 2 ] ;
35113: LD_ADDR_VAR 0 15
35117: PUSH
35118: LD_VAR 0 4
35122: PUSH
35123: LD_INT 2
35125: ARRAY
35126: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35127: LD_ADDR_VAR 0 14
35131: PUSH
35132: LD_INT 0
35134: PUSH
35135: LD_INT 2
35137: PUSH
35138: LD_INT 3
35140: PUSH
35141: LD_INT 5
35143: PUSH
35144: EMPTY
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: ST_TO_ADDR
// for i in tmp do
35150: LD_ADDR_VAR 0 8
35154: PUSH
35155: LD_VAR 0 14
35159: PUSH
35160: FOR_IN
35161: IFFALSE 35331
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35163: LD_ADDR_VAR 0 9
35167: PUSH
35168: LD_VAR 0 10
35172: PPUSH
35173: LD_VAR 0 8
35177: PPUSH
35178: LD_INT 5
35180: PPUSH
35181: CALL_OW 272
35185: PUSH
35186: LD_VAR 0 11
35190: PPUSH
35191: LD_VAR 0 8
35195: PPUSH
35196: LD_INT 5
35198: PPUSH
35199: CALL_OW 273
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35208: LD_VAR 0 9
35212: PUSH
35213: LD_INT 1
35215: ARRAY
35216: PPUSH
35217: LD_VAR 0 9
35221: PUSH
35222: LD_INT 2
35224: ARRAY
35225: PPUSH
35226: CALL_OW 488
35230: IFFALSE 35329
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35232: LD_ADDR_VAR 0 4
35236: PUSH
35237: LD_VAR 0 9
35241: PUSH
35242: LD_INT 1
35244: ARRAY
35245: PPUSH
35246: LD_VAR 0 9
35250: PUSH
35251: LD_INT 2
35253: ARRAY
35254: PPUSH
35255: CALL_OW 546
35259: ST_TO_ADDR
// if hex [ 1 ] then
35260: LD_VAR 0 4
35264: PUSH
35265: LD_INT 1
35267: ARRAY
35268: IFFALSE 35272
// continue ;
35270: GO 35160
// h := hex [ 2 ] ;
35272: LD_ADDR_VAR 0 13
35276: PUSH
35277: LD_VAR 0 4
35281: PUSH
35282: LD_INT 2
35284: ARRAY
35285: ST_TO_ADDR
// if h + 7 < height then
35286: LD_VAR 0 13
35290: PUSH
35291: LD_INT 7
35293: PLUS
35294: PUSH
35295: LD_VAR 0 15
35299: LESS
35300: IFFALSE 35329
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35302: LD_ADDR_VAR 0 18
35306: PUSH
35307: LD_INT 7
35309: PUSH
35310: LD_INT 28
35312: PUSH
35313: LD_INT 45
35315: PUSH
35316: EMPTY
35317: LIST
35318: LIST
35319: LIST
35320: PUSH
35321: LD_VAR 0 12
35325: ARRAY
35326: ST_TO_ADDR
// break ;
35327: GO 35331
// end ; end ; end ;
35329: GO 35160
35331: POP
35332: POP
// end ; if not weapon then
35333: LD_VAR 0 18
35337: NOT
35338: IFFALSE 35398
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35340: LD_ADDR_VAR 0 5
35344: PUSH
35345: LD_VAR 0 5
35349: PUSH
35350: LD_INT 11
35352: PUSH
35353: LD_INT 30
35355: PUSH
35356: LD_INT 49
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: LIST
35363: DIFF
35364: ST_TO_ADDR
// if not list then
35365: LD_VAR 0 5
35369: NOT
35370: IFFALSE 35374
// exit ;
35372: GO 35516
// weapon := list [ rand ( 1 , list ) ] ;
35374: LD_ADDR_VAR 0 18
35378: PUSH
35379: LD_VAR 0 5
35383: PUSH
35384: LD_INT 1
35386: PPUSH
35387: LD_VAR 0 5
35391: PPUSH
35392: CALL_OW 12
35396: ARRAY
35397: ST_TO_ADDR
// end ; if weapon then
35398: LD_VAR 0 18
35402: IFFALSE 35516
// begin tmp := CostOfWeapon ( weapon ) ;
35404: LD_ADDR_VAR 0 14
35408: PUSH
35409: LD_VAR 0 18
35413: PPUSH
35414: CALL_OW 451
35418: ST_TO_ADDR
// j := GetBase ( tower ) ;
35419: LD_ADDR_VAR 0 9
35423: PUSH
35424: LD_VAR 0 1
35428: PPUSH
35429: CALL_OW 274
35433: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35434: LD_VAR 0 9
35438: PPUSH
35439: LD_INT 1
35441: PPUSH
35442: CALL_OW 275
35446: PUSH
35447: LD_VAR 0 14
35451: PUSH
35452: LD_INT 1
35454: ARRAY
35455: GREATEREQUAL
35456: PUSH
35457: LD_VAR 0 9
35461: PPUSH
35462: LD_INT 2
35464: PPUSH
35465: CALL_OW 275
35469: PUSH
35470: LD_VAR 0 14
35474: PUSH
35475: LD_INT 2
35477: ARRAY
35478: GREATEREQUAL
35479: AND
35480: PUSH
35481: LD_VAR 0 9
35485: PPUSH
35486: LD_INT 3
35488: PPUSH
35489: CALL_OW 275
35493: PUSH
35494: LD_VAR 0 14
35498: PUSH
35499: LD_INT 3
35501: ARRAY
35502: GREATEREQUAL
35503: AND
35504: IFFALSE 35516
// result := weapon ;
35506: LD_ADDR_VAR 0 3
35510: PUSH
35511: LD_VAR 0 18
35515: ST_TO_ADDR
// end ; end ;
35516: LD_VAR 0 3
35520: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35521: LD_INT 0
35523: PPUSH
35524: PPUSH
// result := true ;
35525: LD_ADDR_VAR 0 3
35529: PUSH
35530: LD_INT 1
35532: ST_TO_ADDR
// if array1 = array2 then
35533: LD_VAR 0 1
35537: PUSH
35538: LD_VAR 0 2
35542: EQUAL
35543: IFFALSE 35603
// begin for i = 1 to array1 do
35545: LD_ADDR_VAR 0 4
35549: PUSH
35550: DOUBLE
35551: LD_INT 1
35553: DEC
35554: ST_TO_ADDR
35555: LD_VAR 0 1
35559: PUSH
35560: FOR_TO
35561: IFFALSE 35599
// if array1 [ i ] <> array2 [ i ] then
35563: LD_VAR 0 1
35567: PUSH
35568: LD_VAR 0 4
35572: ARRAY
35573: PUSH
35574: LD_VAR 0 2
35578: PUSH
35579: LD_VAR 0 4
35583: ARRAY
35584: NONEQUAL
35585: IFFALSE 35597
// begin result := false ;
35587: LD_ADDR_VAR 0 3
35591: PUSH
35592: LD_INT 0
35594: ST_TO_ADDR
// break ;
35595: GO 35599
// end ;
35597: GO 35560
35599: POP
35600: POP
// end else
35601: GO 35611
// result := false ;
35603: LD_ADDR_VAR 0 3
35607: PUSH
35608: LD_INT 0
35610: ST_TO_ADDR
// end ;
35611: LD_VAR 0 3
35615: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35616: LD_INT 0
35618: PPUSH
35619: PPUSH
// if not array1 or not array2 then
35620: LD_VAR 0 1
35624: NOT
35625: PUSH
35626: LD_VAR 0 2
35630: NOT
35631: OR
35632: IFFALSE 35636
// exit ;
35634: GO 35700
// result := true ;
35636: LD_ADDR_VAR 0 3
35640: PUSH
35641: LD_INT 1
35643: ST_TO_ADDR
// for i = 1 to array1 do
35644: LD_ADDR_VAR 0 4
35648: PUSH
35649: DOUBLE
35650: LD_INT 1
35652: DEC
35653: ST_TO_ADDR
35654: LD_VAR 0 1
35658: PUSH
35659: FOR_TO
35660: IFFALSE 35698
// if array1 [ i ] <> array2 [ i ] then
35662: LD_VAR 0 1
35666: PUSH
35667: LD_VAR 0 4
35671: ARRAY
35672: PUSH
35673: LD_VAR 0 2
35677: PUSH
35678: LD_VAR 0 4
35682: ARRAY
35683: NONEQUAL
35684: IFFALSE 35696
// begin result := false ;
35686: LD_ADDR_VAR 0 3
35690: PUSH
35691: LD_INT 0
35693: ST_TO_ADDR
// break ;
35694: GO 35698
// end ;
35696: GO 35659
35698: POP
35699: POP
// end ;
35700: LD_VAR 0 3
35704: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35705: LD_INT 0
35707: PPUSH
35708: PPUSH
35709: PPUSH
// pom := GetBase ( fac ) ;
35710: LD_ADDR_VAR 0 5
35714: PUSH
35715: LD_VAR 0 1
35719: PPUSH
35720: CALL_OW 274
35724: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35725: LD_ADDR_VAR 0 4
35729: PUSH
35730: LD_VAR 0 2
35734: PUSH
35735: LD_INT 1
35737: ARRAY
35738: PPUSH
35739: LD_VAR 0 2
35743: PUSH
35744: LD_INT 2
35746: ARRAY
35747: PPUSH
35748: LD_VAR 0 2
35752: PUSH
35753: LD_INT 3
35755: ARRAY
35756: PPUSH
35757: LD_VAR 0 2
35761: PUSH
35762: LD_INT 4
35764: ARRAY
35765: PPUSH
35766: CALL_OW 449
35770: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35771: LD_ADDR_VAR 0 3
35775: PUSH
35776: LD_VAR 0 5
35780: PPUSH
35781: LD_INT 1
35783: PPUSH
35784: CALL_OW 275
35788: PUSH
35789: LD_VAR 0 4
35793: PUSH
35794: LD_INT 1
35796: ARRAY
35797: GREATEREQUAL
35798: PUSH
35799: LD_VAR 0 5
35803: PPUSH
35804: LD_INT 2
35806: PPUSH
35807: CALL_OW 275
35811: PUSH
35812: LD_VAR 0 4
35816: PUSH
35817: LD_INT 2
35819: ARRAY
35820: GREATEREQUAL
35821: AND
35822: PUSH
35823: LD_VAR 0 5
35827: PPUSH
35828: LD_INT 3
35830: PPUSH
35831: CALL_OW 275
35835: PUSH
35836: LD_VAR 0 4
35840: PUSH
35841: LD_INT 3
35843: ARRAY
35844: GREATEREQUAL
35845: AND
35846: ST_TO_ADDR
// end ;
35847: LD_VAR 0 3
35851: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35852: LD_INT 0
35854: PPUSH
35855: PPUSH
35856: PPUSH
35857: PPUSH
// pom := GetBase ( building ) ;
35858: LD_ADDR_VAR 0 3
35862: PUSH
35863: LD_VAR 0 1
35867: PPUSH
35868: CALL_OW 274
35872: ST_TO_ADDR
// if not pom then
35873: LD_VAR 0 3
35877: NOT
35878: IFFALSE 35882
// exit ;
35880: GO 36052
// btype := GetBType ( building ) ;
35882: LD_ADDR_VAR 0 5
35886: PUSH
35887: LD_VAR 0 1
35891: PPUSH
35892: CALL_OW 266
35896: ST_TO_ADDR
// if btype = b_armoury then
35897: LD_VAR 0 5
35901: PUSH
35902: LD_INT 4
35904: EQUAL
35905: IFFALSE 35915
// btype := b_barracks ;
35907: LD_ADDR_VAR 0 5
35911: PUSH
35912: LD_INT 5
35914: ST_TO_ADDR
// if btype = b_depot then
35915: LD_VAR 0 5
35919: PUSH
35920: LD_INT 0
35922: EQUAL
35923: IFFALSE 35933
// btype := b_warehouse ;
35925: LD_ADDR_VAR 0 5
35929: PUSH
35930: LD_INT 1
35932: ST_TO_ADDR
// if btype = b_workshop then
35933: LD_VAR 0 5
35937: PUSH
35938: LD_INT 2
35940: EQUAL
35941: IFFALSE 35951
// btype := b_factory ;
35943: LD_ADDR_VAR 0 5
35947: PUSH
35948: LD_INT 3
35950: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35951: LD_ADDR_VAR 0 4
35955: PUSH
35956: LD_VAR 0 5
35960: PPUSH
35961: LD_VAR 0 1
35965: PPUSH
35966: CALL_OW 248
35970: PPUSH
35971: CALL_OW 450
35975: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35976: LD_ADDR_VAR 0 2
35980: PUSH
35981: LD_VAR 0 3
35985: PPUSH
35986: LD_INT 1
35988: PPUSH
35989: CALL_OW 275
35993: PUSH
35994: LD_VAR 0 4
35998: PUSH
35999: LD_INT 1
36001: ARRAY
36002: GREATEREQUAL
36003: PUSH
36004: LD_VAR 0 3
36008: PPUSH
36009: LD_INT 2
36011: PPUSH
36012: CALL_OW 275
36016: PUSH
36017: LD_VAR 0 4
36021: PUSH
36022: LD_INT 2
36024: ARRAY
36025: GREATEREQUAL
36026: AND
36027: PUSH
36028: LD_VAR 0 3
36032: PPUSH
36033: LD_INT 3
36035: PPUSH
36036: CALL_OW 275
36040: PUSH
36041: LD_VAR 0 4
36045: PUSH
36046: LD_INT 3
36048: ARRAY
36049: GREATEREQUAL
36050: AND
36051: ST_TO_ADDR
// end ;
36052: LD_VAR 0 2
36056: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
36057: LD_INT 0
36059: PPUSH
36060: PPUSH
36061: PPUSH
// pom := GetBase ( building ) ;
36062: LD_ADDR_VAR 0 4
36066: PUSH
36067: LD_VAR 0 1
36071: PPUSH
36072: CALL_OW 274
36076: ST_TO_ADDR
// if not pom then
36077: LD_VAR 0 4
36081: NOT
36082: IFFALSE 36086
// exit ;
36084: GO 36187
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
36086: LD_ADDR_VAR 0 5
36090: PUSH
36091: LD_VAR 0 2
36095: PPUSH
36096: LD_VAR 0 1
36100: PPUSH
36101: CALL_OW 248
36105: PPUSH
36106: CALL_OW 450
36110: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36111: LD_ADDR_VAR 0 3
36115: PUSH
36116: LD_VAR 0 4
36120: PPUSH
36121: LD_INT 1
36123: PPUSH
36124: CALL_OW 275
36128: PUSH
36129: LD_VAR 0 5
36133: PUSH
36134: LD_INT 1
36136: ARRAY
36137: GREATEREQUAL
36138: PUSH
36139: LD_VAR 0 4
36143: PPUSH
36144: LD_INT 2
36146: PPUSH
36147: CALL_OW 275
36151: PUSH
36152: LD_VAR 0 5
36156: PUSH
36157: LD_INT 2
36159: ARRAY
36160: GREATEREQUAL
36161: AND
36162: PUSH
36163: LD_VAR 0 4
36167: PPUSH
36168: LD_INT 3
36170: PPUSH
36171: CALL_OW 275
36175: PUSH
36176: LD_VAR 0 5
36180: PUSH
36181: LD_INT 3
36183: ARRAY
36184: GREATEREQUAL
36185: AND
36186: ST_TO_ADDR
// end ;
36187: LD_VAR 0 3
36191: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36192: LD_INT 0
36194: PPUSH
36195: PPUSH
36196: PPUSH
36197: PPUSH
36198: PPUSH
36199: PPUSH
36200: PPUSH
36201: PPUSH
36202: PPUSH
36203: PPUSH
36204: PPUSH
// result := false ;
36205: LD_ADDR_VAR 0 8
36209: PUSH
36210: LD_INT 0
36212: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36213: LD_VAR 0 5
36217: NOT
36218: PUSH
36219: LD_VAR 0 1
36223: NOT
36224: OR
36225: PUSH
36226: LD_VAR 0 2
36230: NOT
36231: OR
36232: PUSH
36233: LD_VAR 0 3
36237: NOT
36238: OR
36239: IFFALSE 36243
// exit ;
36241: GO 37057
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36243: LD_ADDR_VAR 0 14
36247: PUSH
36248: LD_VAR 0 1
36252: PPUSH
36253: LD_VAR 0 2
36257: PPUSH
36258: LD_VAR 0 3
36262: PPUSH
36263: LD_VAR 0 4
36267: PPUSH
36268: LD_VAR 0 5
36272: PUSH
36273: LD_INT 1
36275: ARRAY
36276: PPUSH
36277: CALL_OW 248
36281: PPUSH
36282: LD_INT 0
36284: PPUSH
36285: CALL 38290 0 6
36289: ST_TO_ADDR
// if not hexes then
36290: LD_VAR 0 14
36294: NOT
36295: IFFALSE 36299
// exit ;
36297: GO 37057
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36299: LD_ADDR_VAR 0 17
36303: PUSH
36304: LD_VAR 0 5
36308: PPUSH
36309: LD_INT 22
36311: PUSH
36312: LD_VAR 0 13
36316: PPUSH
36317: CALL_OW 255
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 2
36328: PUSH
36329: LD_INT 30
36331: PUSH
36332: LD_INT 0
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 30
36341: PUSH
36342: LD_INT 1
36344: PUSH
36345: EMPTY
36346: LIST
36347: LIST
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: LIST
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: PPUSH
36358: CALL_OW 72
36362: ST_TO_ADDR
// for i = 1 to hexes do
36363: LD_ADDR_VAR 0 9
36367: PUSH
36368: DOUBLE
36369: LD_INT 1
36371: DEC
36372: ST_TO_ADDR
36373: LD_VAR 0 14
36377: PUSH
36378: FOR_TO
36379: IFFALSE 37055
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36381: LD_ADDR_VAR 0 13
36385: PUSH
36386: LD_VAR 0 14
36390: PUSH
36391: LD_VAR 0 9
36395: ARRAY
36396: PUSH
36397: LD_INT 1
36399: ARRAY
36400: PPUSH
36401: LD_VAR 0 14
36405: PUSH
36406: LD_VAR 0 9
36410: ARRAY
36411: PUSH
36412: LD_INT 2
36414: ARRAY
36415: PPUSH
36416: CALL_OW 428
36420: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36421: LD_VAR 0 14
36425: PUSH
36426: LD_VAR 0 9
36430: ARRAY
36431: PUSH
36432: LD_INT 1
36434: ARRAY
36435: PPUSH
36436: LD_VAR 0 14
36440: PUSH
36441: LD_VAR 0 9
36445: ARRAY
36446: PUSH
36447: LD_INT 2
36449: ARRAY
36450: PPUSH
36451: CALL_OW 351
36455: PUSH
36456: LD_VAR 0 14
36460: PUSH
36461: LD_VAR 0 9
36465: ARRAY
36466: PUSH
36467: LD_INT 1
36469: ARRAY
36470: PPUSH
36471: LD_VAR 0 14
36475: PUSH
36476: LD_VAR 0 9
36480: ARRAY
36481: PUSH
36482: LD_INT 2
36484: ARRAY
36485: PPUSH
36486: CALL_OW 488
36490: NOT
36491: OR
36492: PUSH
36493: LD_VAR 0 13
36497: PPUSH
36498: CALL_OW 247
36502: PUSH
36503: LD_INT 3
36505: EQUAL
36506: OR
36507: IFFALSE 36513
// exit ;
36509: POP
36510: POP
36511: GO 37057
// if not tmp then
36513: LD_VAR 0 13
36517: NOT
36518: IFFALSE 36522
// continue ;
36520: GO 36378
// result := true ;
36522: LD_ADDR_VAR 0 8
36526: PUSH
36527: LD_INT 1
36529: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36530: LD_VAR 0 6
36534: PUSH
36535: LD_VAR 0 13
36539: PPUSH
36540: CALL_OW 247
36544: PUSH
36545: LD_INT 2
36547: EQUAL
36548: AND
36549: PUSH
36550: LD_VAR 0 13
36554: PPUSH
36555: CALL_OW 263
36559: PUSH
36560: LD_INT 1
36562: EQUAL
36563: AND
36564: IFFALSE 36728
// begin if IsDrivenBy ( tmp ) then
36566: LD_VAR 0 13
36570: PPUSH
36571: CALL_OW 311
36575: IFFALSE 36579
// continue ;
36577: GO 36378
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36579: LD_VAR 0 6
36583: PPUSH
36584: LD_INT 3
36586: PUSH
36587: LD_INT 60
36589: PUSH
36590: EMPTY
36591: LIST
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 3
36599: PUSH
36600: LD_INT 55
36602: PUSH
36603: EMPTY
36604: LIST
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PPUSH
36614: CALL_OW 72
36618: IFFALSE 36726
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36620: LD_ADDR_VAR 0 18
36624: PUSH
36625: LD_VAR 0 6
36629: PPUSH
36630: LD_INT 3
36632: PUSH
36633: LD_INT 60
36635: PUSH
36636: EMPTY
36637: LIST
36638: PUSH
36639: EMPTY
36640: LIST
36641: LIST
36642: PUSH
36643: LD_INT 3
36645: PUSH
36646: LD_INT 55
36648: PUSH
36649: EMPTY
36650: LIST
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PPUSH
36660: CALL_OW 72
36664: PUSH
36665: LD_INT 1
36667: ARRAY
36668: ST_TO_ADDR
// if IsInUnit ( driver ) then
36669: LD_VAR 0 18
36673: PPUSH
36674: CALL_OW 310
36678: IFFALSE 36689
// ComExit ( driver ) ;
36680: LD_VAR 0 18
36684: PPUSH
36685: CALL 62070 0 1
// AddComEnterUnit ( driver , tmp ) ;
36689: LD_VAR 0 18
36693: PPUSH
36694: LD_VAR 0 13
36698: PPUSH
36699: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36703: LD_VAR 0 18
36707: PPUSH
36708: LD_VAR 0 7
36712: PPUSH
36713: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36717: LD_VAR 0 18
36721: PPUSH
36722: CALL_OW 181
// end ; continue ;
36726: GO 36378
// end ; if not cleaners or not tmp in cleaners then
36728: LD_VAR 0 6
36732: NOT
36733: PUSH
36734: LD_VAR 0 13
36738: PUSH
36739: LD_VAR 0 6
36743: IN
36744: NOT
36745: OR
36746: IFFALSE 37053
// begin if dep then
36748: LD_VAR 0 17
36752: IFFALSE 36888
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36754: LD_ADDR_VAR 0 16
36758: PUSH
36759: LD_VAR 0 17
36763: PUSH
36764: LD_INT 1
36766: ARRAY
36767: PPUSH
36768: CALL_OW 250
36772: PPUSH
36773: LD_VAR 0 17
36777: PUSH
36778: LD_INT 1
36780: ARRAY
36781: PPUSH
36782: CALL_OW 254
36786: PPUSH
36787: LD_INT 5
36789: PPUSH
36790: CALL_OW 272
36794: PUSH
36795: LD_VAR 0 17
36799: PUSH
36800: LD_INT 1
36802: ARRAY
36803: PPUSH
36804: CALL_OW 251
36808: PPUSH
36809: LD_VAR 0 17
36813: PUSH
36814: LD_INT 1
36816: ARRAY
36817: PPUSH
36818: CALL_OW 254
36822: PPUSH
36823: LD_INT 5
36825: PPUSH
36826: CALL_OW 273
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36835: LD_VAR 0 16
36839: PUSH
36840: LD_INT 1
36842: ARRAY
36843: PPUSH
36844: LD_VAR 0 16
36848: PUSH
36849: LD_INT 2
36851: ARRAY
36852: PPUSH
36853: CALL_OW 488
36857: IFFALSE 36888
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36859: LD_VAR 0 13
36863: PPUSH
36864: LD_VAR 0 16
36868: PUSH
36869: LD_INT 1
36871: ARRAY
36872: PPUSH
36873: LD_VAR 0 16
36877: PUSH
36878: LD_INT 2
36880: ARRAY
36881: PPUSH
36882: CALL_OW 111
// continue ;
36886: GO 36378
// end ; end ; r := GetDir ( tmp ) ;
36888: LD_ADDR_VAR 0 15
36892: PUSH
36893: LD_VAR 0 13
36897: PPUSH
36898: CALL_OW 254
36902: ST_TO_ADDR
// if r = 5 then
36903: LD_VAR 0 15
36907: PUSH
36908: LD_INT 5
36910: EQUAL
36911: IFFALSE 36921
// r := 0 ;
36913: LD_ADDR_VAR 0 15
36917: PUSH
36918: LD_INT 0
36920: ST_TO_ADDR
// for j = r to 5 do
36921: LD_ADDR_VAR 0 10
36925: PUSH
36926: DOUBLE
36927: LD_VAR 0 15
36931: DEC
36932: ST_TO_ADDR
36933: LD_INT 5
36935: PUSH
36936: FOR_TO
36937: IFFALSE 37051
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36939: LD_ADDR_VAR 0 11
36943: PUSH
36944: LD_VAR 0 13
36948: PPUSH
36949: CALL_OW 250
36953: PPUSH
36954: LD_VAR 0 10
36958: PPUSH
36959: LD_INT 2
36961: PPUSH
36962: CALL_OW 272
36966: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36967: LD_ADDR_VAR 0 12
36971: PUSH
36972: LD_VAR 0 13
36976: PPUSH
36977: CALL_OW 251
36981: PPUSH
36982: LD_VAR 0 10
36986: PPUSH
36987: LD_INT 2
36989: PPUSH
36990: CALL_OW 273
36994: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36995: LD_VAR 0 11
36999: PPUSH
37000: LD_VAR 0 12
37004: PPUSH
37005: CALL_OW 488
37009: PUSH
37010: LD_VAR 0 11
37014: PPUSH
37015: LD_VAR 0 12
37019: PPUSH
37020: CALL_OW 428
37024: NOT
37025: AND
37026: IFFALSE 37049
// begin ComMoveXY ( tmp , _x , _y ) ;
37028: LD_VAR 0 13
37032: PPUSH
37033: LD_VAR 0 11
37037: PPUSH
37038: LD_VAR 0 12
37042: PPUSH
37043: CALL_OW 111
// break ;
37047: GO 37051
// end ; end ;
37049: GO 36936
37051: POP
37052: POP
// end ; end ;
37053: GO 36378
37055: POP
37056: POP
// end ;
37057: LD_VAR 0 8
37061: RET
// export function BuildingTechInvented ( side , btype ) ; begin
37062: LD_INT 0
37064: PPUSH
// result := true ;
37065: LD_ADDR_VAR 0 3
37069: PUSH
37070: LD_INT 1
37072: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
37073: LD_VAR 0 2
37077: PUSH
37078: LD_INT 24
37080: DOUBLE
37081: EQUAL
37082: IFTRUE 37092
37084: LD_INT 33
37086: DOUBLE
37087: EQUAL
37088: IFTRUE 37092
37090: GO 37117
37092: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
37093: LD_ADDR_VAR 0 3
37097: PUSH
37098: LD_INT 32
37100: PPUSH
37101: LD_VAR 0 1
37105: PPUSH
37106: CALL_OW 321
37110: PUSH
37111: LD_INT 2
37113: EQUAL
37114: ST_TO_ADDR
37115: GO 37433
37117: LD_INT 20
37119: DOUBLE
37120: EQUAL
37121: IFTRUE 37125
37123: GO 37150
37125: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37126: LD_ADDR_VAR 0 3
37130: PUSH
37131: LD_INT 6
37133: PPUSH
37134: LD_VAR 0 1
37138: PPUSH
37139: CALL_OW 321
37143: PUSH
37144: LD_INT 2
37146: EQUAL
37147: ST_TO_ADDR
37148: GO 37433
37150: LD_INT 22
37152: DOUBLE
37153: EQUAL
37154: IFTRUE 37164
37156: LD_INT 36
37158: DOUBLE
37159: EQUAL
37160: IFTRUE 37164
37162: GO 37189
37164: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37165: LD_ADDR_VAR 0 3
37169: PUSH
37170: LD_INT 15
37172: PPUSH
37173: LD_VAR 0 1
37177: PPUSH
37178: CALL_OW 321
37182: PUSH
37183: LD_INT 2
37185: EQUAL
37186: ST_TO_ADDR
37187: GO 37433
37189: LD_INT 30
37191: DOUBLE
37192: EQUAL
37193: IFTRUE 37197
37195: GO 37222
37197: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37198: LD_ADDR_VAR 0 3
37202: PUSH
37203: LD_INT 20
37205: PPUSH
37206: LD_VAR 0 1
37210: PPUSH
37211: CALL_OW 321
37215: PUSH
37216: LD_INT 2
37218: EQUAL
37219: ST_TO_ADDR
37220: GO 37433
37222: LD_INT 28
37224: DOUBLE
37225: EQUAL
37226: IFTRUE 37236
37228: LD_INT 21
37230: DOUBLE
37231: EQUAL
37232: IFTRUE 37236
37234: GO 37261
37236: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37237: LD_ADDR_VAR 0 3
37241: PUSH
37242: LD_INT 21
37244: PPUSH
37245: LD_VAR 0 1
37249: PPUSH
37250: CALL_OW 321
37254: PUSH
37255: LD_INT 2
37257: EQUAL
37258: ST_TO_ADDR
37259: GO 37433
37261: LD_INT 16
37263: DOUBLE
37264: EQUAL
37265: IFTRUE 37269
37267: GO 37294
37269: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37270: LD_ADDR_VAR 0 3
37274: PUSH
37275: LD_INT 84
37277: PPUSH
37278: LD_VAR 0 1
37282: PPUSH
37283: CALL_OW 321
37287: PUSH
37288: LD_INT 2
37290: EQUAL
37291: ST_TO_ADDR
37292: GO 37433
37294: LD_INT 19
37296: DOUBLE
37297: EQUAL
37298: IFTRUE 37308
37300: LD_INT 23
37302: DOUBLE
37303: EQUAL
37304: IFTRUE 37308
37306: GO 37333
37308: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37309: LD_ADDR_VAR 0 3
37313: PUSH
37314: LD_INT 83
37316: PPUSH
37317: LD_VAR 0 1
37321: PPUSH
37322: CALL_OW 321
37326: PUSH
37327: LD_INT 2
37329: EQUAL
37330: ST_TO_ADDR
37331: GO 37433
37333: LD_INT 17
37335: DOUBLE
37336: EQUAL
37337: IFTRUE 37341
37339: GO 37366
37341: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37342: LD_ADDR_VAR 0 3
37346: PUSH
37347: LD_INT 39
37349: PPUSH
37350: LD_VAR 0 1
37354: PPUSH
37355: CALL_OW 321
37359: PUSH
37360: LD_INT 2
37362: EQUAL
37363: ST_TO_ADDR
37364: GO 37433
37366: LD_INT 18
37368: DOUBLE
37369: EQUAL
37370: IFTRUE 37374
37372: GO 37399
37374: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37375: LD_ADDR_VAR 0 3
37379: PUSH
37380: LD_INT 40
37382: PPUSH
37383: LD_VAR 0 1
37387: PPUSH
37388: CALL_OW 321
37392: PUSH
37393: LD_INT 2
37395: EQUAL
37396: ST_TO_ADDR
37397: GO 37433
37399: LD_INT 27
37401: DOUBLE
37402: EQUAL
37403: IFTRUE 37407
37405: GO 37432
37407: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37408: LD_ADDR_VAR 0 3
37412: PUSH
37413: LD_INT 35
37415: PPUSH
37416: LD_VAR 0 1
37420: PPUSH
37421: CALL_OW 321
37425: PUSH
37426: LD_INT 2
37428: EQUAL
37429: ST_TO_ADDR
37430: GO 37433
37432: POP
// end ;
37433: LD_VAR 0 3
37437: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37438: LD_INT 0
37440: PPUSH
37441: PPUSH
37442: PPUSH
37443: PPUSH
37444: PPUSH
37445: PPUSH
37446: PPUSH
37447: PPUSH
37448: PPUSH
37449: PPUSH
37450: PPUSH
// result := false ;
37451: LD_ADDR_VAR 0 6
37455: PUSH
37456: LD_INT 0
37458: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37459: LD_VAR 0 1
37463: NOT
37464: PUSH
37465: LD_VAR 0 1
37469: PPUSH
37470: CALL_OW 266
37474: PUSH
37475: LD_INT 0
37477: PUSH
37478: LD_INT 1
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: IN
37485: NOT
37486: OR
37487: PUSH
37488: LD_VAR 0 2
37492: NOT
37493: OR
37494: PUSH
37495: LD_VAR 0 5
37499: PUSH
37500: LD_INT 0
37502: PUSH
37503: LD_INT 1
37505: PUSH
37506: LD_INT 2
37508: PUSH
37509: LD_INT 3
37511: PUSH
37512: LD_INT 4
37514: PUSH
37515: LD_INT 5
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: IN
37526: NOT
37527: OR
37528: PUSH
37529: LD_VAR 0 3
37533: PPUSH
37534: LD_VAR 0 4
37538: PPUSH
37539: CALL_OW 488
37543: NOT
37544: OR
37545: IFFALSE 37549
// exit ;
37547: GO 38285
// side := GetSide ( depot ) ;
37549: LD_ADDR_VAR 0 9
37553: PUSH
37554: LD_VAR 0 1
37558: PPUSH
37559: CALL_OW 255
37563: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37564: LD_VAR 0 9
37568: PPUSH
37569: LD_VAR 0 2
37573: PPUSH
37574: CALL 37062 0 2
37578: NOT
37579: IFFALSE 37583
// exit ;
37581: GO 38285
// pom := GetBase ( depot ) ;
37583: LD_ADDR_VAR 0 10
37587: PUSH
37588: LD_VAR 0 1
37592: PPUSH
37593: CALL_OW 274
37597: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37598: LD_ADDR_VAR 0 11
37602: PUSH
37603: LD_VAR 0 2
37607: PPUSH
37608: LD_VAR 0 1
37612: PPUSH
37613: CALL_OW 248
37617: PPUSH
37618: CALL_OW 450
37622: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37623: LD_VAR 0 10
37627: PPUSH
37628: LD_INT 1
37630: PPUSH
37631: CALL_OW 275
37635: PUSH
37636: LD_VAR 0 11
37640: PUSH
37641: LD_INT 1
37643: ARRAY
37644: GREATEREQUAL
37645: PUSH
37646: LD_VAR 0 10
37650: PPUSH
37651: LD_INT 2
37653: PPUSH
37654: CALL_OW 275
37658: PUSH
37659: LD_VAR 0 11
37663: PUSH
37664: LD_INT 2
37666: ARRAY
37667: GREATEREQUAL
37668: AND
37669: PUSH
37670: LD_VAR 0 10
37674: PPUSH
37675: LD_INT 3
37677: PPUSH
37678: CALL_OW 275
37682: PUSH
37683: LD_VAR 0 11
37687: PUSH
37688: LD_INT 3
37690: ARRAY
37691: GREATEREQUAL
37692: AND
37693: NOT
37694: IFFALSE 37698
// exit ;
37696: GO 38285
// if GetBType ( depot ) = b_depot then
37698: LD_VAR 0 1
37702: PPUSH
37703: CALL_OW 266
37707: PUSH
37708: LD_INT 0
37710: EQUAL
37711: IFFALSE 37723
// dist := 28 else
37713: LD_ADDR_VAR 0 14
37717: PUSH
37718: LD_INT 28
37720: ST_TO_ADDR
37721: GO 37731
// dist := 36 ;
37723: LD_ADDR_VAR 0 14
37727: PUSH
37728: LD_INT 36
37730: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37731: LD_VAR 0 1
37735: PPUSH
37736: LD_VAR 0 3
37740: PPUSH
37741: LD_VAR 0 4
37745: PPUSH
37746: CALL_OW 297
37750: PUSH
37751: LD_VAR 0 14
37755: GREATER
37756: IFFALSE 37760
// exit ;
37758: GO 38285
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37760: LD_ADDR_VAR 0 12
37764: PUSH
37765: LD_VAR 0 2
37769: PPUSH
37770: LD_VAR 0 3
37774: PPUSH
37775: LD_VAR 0 4
37779: PPUSH
37780: LD_VAR 0 5
37784: PPUSH
37785: LD_VAR 0 1
37789: PPUSH
37790: CALL_OW 248
37794: PPUSH
37795: LD_INT 0
37797: PPUSH
37798: CALL 38290 0 6
37802: ST_TO_ADDR
// if not hexes then
37803: LD_VAR 0 12
37807: NOT
37808: IFFALSE 37812
// exit ;
37810: GO 38285
// hex := GetHexInfo ( x , y ) ;
37812: LD_ADDR_VAR 0 15
37816: PUSH
37817: LD_VAR 0 3
37821: PPUSH
37822: LD_VAR 0 4
37826: PPUSH
37827: CALL_OW 546
37831: ST_TO_ADDR
// if hex [ 1 ] then
37832: LD_VAR 0 15
37836: PUSH
37837: LD_INT 1
37839: ARRAY
37840: IFFALSE 37844
// exit ;
37842: GO 38285
// height := hex [ 2 ] ;
37844: LD_ADDR_VAR 0 13
37848: PUSH
37849: LD_VAR 0 15
37853: PUSH
37854: LD_INT 2
37856: ARRAY
37857: ST_TO_ADDR
// for i = 1 to hexes do
37858: LD_ADDR_VAR 0 7
37862: PUSH
37863: DOUBLE
37864: LD_INT 1
37866: DEC
37867: ST_TO_ADDR
37868: LD_VAR 0 12
37872: PUSH
37873: FOR_TO
37874: IFFALSE 38204
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37876: LD_VAR 0 12
37880: PUSH
37881: LD_VAR 0 7
37885: ARRAY
37886: PUSH
37887: LD_INT 1
37889: ARRAY
37890: PPUSH
37891: LD_VAR 0 12
37895: PUSH
37896: LD_VAR 0 7
37900: ARRAY
37901: PUSH
37902: LD_INT 2
37904: ARRAY
37905: PPUSH
37906: CALL_OW 488
37910: NOT
37911: PUSH
37912: LD_VAR 0 12
37916: PUSH
37917: LD_VAR 0 7
37921: ARRAY
37922: PUSH
37923: LD_INT 1
37925: ARRAY
37926: PPUSH
37927: LD_VAR 0 12
37931: PUSH
37932: LD_VAR 0 7
37936: ARRAY
37937: PUSH
37938: LD_INT 2
37940: ARRAY
37941: PPUSH
37942: CALL_OW 428
37946: PUSH
37947: LD_INT 0
37949: GREATER
37950: OR
37951: PUSH
37952: LD_VAR 0 12
37956: PUSH
37957: LD_VAR 0 7
37961: ARRAY
37962: PUSH
37963: LD_INT 1
37965: ARRAY
37966: PPUSH
37967: LD_VAR 0 12
37971: PUSH
37972: LD_VAR 0 7
37976: ARRAY
37977: PUSH
37978: LD_INT 2
37980: ARRAY
37981: PPUSH
37982: CALL_OW 351
37986: OR
37987: IFFALSE 37993
// exit ;
37989: POP
37990: POP
37991: GO 38285
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37993: LD_ADDR_VAR 0 8
37997: PUSH
37998: LD_VAR 0 12
38002: PUSH
38003: LD_VAR 0 7
38007: ARRAY
38008: PUSH
38009: LD_INT 1
38011: ARRAY
38012: PPUSH
38013: LD_VAR 0 12
38017: PUSH
38018: LD_VAR 0 7
38022: ARRAY
38023: PUSH
38024: LD_INT 2
38026: ARRAY
38027: PPUSH
38028: CALL_OW 546
38032: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
38033: LD_VAR 0 8
38037: PUSH
38038: LD_INT 1
38040: ARRAY
38041: PUSH
38042: LD_VAR 0 8
38046: PUSH
38047: LD_INT 2
38049: ARRAY
38050: PUSH
38051: LD_VAR 0 13
38055: PUSH
38056: LD_INT 2
38058: PLUS
38059: GREATER
38060: OR
38061: PUSH
38062: LD_VAR 0 8
38066: PUSH
38067: LD_INT 2
38069: ARRAY
38070: PUSH
38071: LD_VAR 0 13
38075: PUSH
38076: LD_INT 2
38078: MINUS
38079: LESS
38080: OR
38081: PUSH
38082: LD_VAR 0 8
38086: PUSH
38087: LD_INT 3
38089: ARRAY
38090: PUSH
38091: LD_INT 0
38093: PUSH
38094: LD_INT 8
38096: PUSH
38097: LD_INT 9
38099: PUSH
38100: LD_INT 10
38102: PUSH
38103: LD_INT 11
38105: PUSH
38106: LD_INT 12
38108: PUSH
38109: LD_INT 13
38111: PUSH
38112: LD_INT 16
38114: PUSH
38115: LD_INT 17
38117: PUSH
38118: LD_INT 18
38120: PUSH
38121: LD_INT 19
38123: PUSH
38124: LD_INT 20
38126: PUSH
38127: LD_INT 21
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: IN
38145: NOT
38146: OR
38147: PUSH
38148: LD_VAR 0 8
38152: PUSH
38153: LD_INT 5
38155: ARRAY
38156: NOT
38157: OR
38158: PUSH
38159: LD_VAR 0 8
38163: PUSH
38164: LD_INT 6
38166: ARRAY
38167: PUSH
38168: LD_INT 1
38170: PUSH
38171: LD_INT 2
38173: PUSH
38174: LD_INT 7
38176: PUSH
38177: LD_INT 9
38179: PUSH
38180: LD_INT 10
38182: PUSH
38183: LD_INT 11
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: IN
38194: NOT
38195: OR
38196: IFFALSE 38202
// exit ;
38198: POP
38199: POP
38200: GO 38285
// end ;
38202: GO 37873
38204: POP
38205: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38206: LD_VAR 0 9
38210: PPUSH
38211: LD_VAR 0 3
38215: PPUSH
38216: LD_VAR 0 4
38220: PPUSH
38221: LD_INT 20
38223: PPUSH
38224: CALL 30237 0 4
38228: PUSH
38229: LD_INT 4
38231: ARRAY
38232: IFFALSE 38236
// exit ;
38234: GO 38285
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38236: LD_VAR 0 2
38240: PUSH
38241: LD_INT 29
38243: PUSH
38244: LD_INT 30
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: IN
38251: PUSH
38252: LD_VAR 0 3
38256: PPUSH
38257: LD_VAR 0 4
38261: PPUSH
38262: LD_VAR 0 9
38266: PPUSH
38267: CALL_OW 440
38271: NOT
38272: AND
38273: IFFALSE 38277
// exit ;
38275: GO 38285
// result := true ;
38277: LD_ADDR_VAR 0 6
38281: PUSH
38282: LD_INT 1
38284: ST_TO_ADDR
// end ;
38285: LD_VAR 0 6
38289: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38290: LD_INT 0
38292: PPUSH
38293: PPUSH
38294: PPUSH
38295: PPUSH
38296: PPUSH
38297: PPUSH
38298: PPUSH
38299: PPUSH
38300: PPUSH
38301: PPUSH
38302: PPUSH
38303: PPUSH
38304: PPUSH
38305: PPUSH
38306: PPUSH
38307: PPUSH
38308: PPUSH
38309: PPUSH
38310: PPUSH
38311: PPUSH
38312: PPUSH
38313: PPUSH
38314: PPUSH
38315: PPUSH
38316: PPUSH
38317: PPUSH
38318: PPUSH
38319: PPUSH
38320: PPUSH
38321: PPUSH
38322: PPUSH
38323: PPUSH
38324: PPUSH
38325: PPUSH
38326: PPUSH
38327: PPUSH
38328: PPUSH
38329: PPUSH
38330: PPUSH
38331: PPUSH
38332: PPUSH
38333: PPUSH
38334: PPUSH
38335: PPUSH
38336: PPUSH
38337: PPUSH
38338: PPUSH
38339: PPUSH
38340: PPUSH
38341: PPUSH
38342: PPUSH
38343: PPUSH
38344: PPUSH
38345: PPUSH
38346: PPUSH
38347: PPUSH
38348: PPUSH
38349: PPUSH
// result = [ ] ;
38350: LD_ADDR_VAR 0 7
38354: PUSH
38355: EMPTY
38356: ST_TO_ADDR
// temp_list = [ ] ;
38357: LD_ADDR_VAR 0 9
38361: PUSH
38362: EMPTY
38363: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38364: LD_VAR 0 4
38368: PUSH
38369: LD_INT 0
38371: PUSH
38372: LD_INT 1
38374: PUSH
38375: LD_INT 2
38377: PUSH
38378: LD_INT 3
38380: PUSH
38381: LD_INT 4
38383: PUSH
38384: LD_INT 5
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: LIST
38391: LIST
38392: LIST
38393: LIST
38394: IN
38395: NOT
38396: PUSH
38397: LD_VAR 0 1
38401: PUSH
38402: LD_INT 0
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: IN
38412: PUSH
38413: LD_VAR 0 5
38417: PUSH
38418: LD_INT 1
38420: PUSH
38421: LD_INT 2
38423: PUSH
38424: LD_INT 3
38426: PUSH
38427: EMPTY
38428: LIST
38429: LIST
38430: LIST
38431: IN
38432: NOT
38433: AND
38434: OR
38435: IFFALSE 38439
// exit ;
38437: GO 56830
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38439: LD_VAR 0 1
38443: PUSH
38444: LD_INT 6
38446: PUSH
38447: LD_INT 7
38449: PUSH
38450: LD_INT 8
38452: PUSH
38453: LD_INT 13
38455: PUSH
38456: LD_INT 12
38458: PUSH
38459: LD_INT 15
38461: PUSH
38462: LD_INT 11
38464: PUSH
38465: LD_INT 14
38467: PUSH
38468: LD_INT 10
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: IN
38482: IFFALSE 38492
// btype = b_lab ;
38484: LD_ADDR_VAR 0 1
38488: PUSH
38489: LD_INT 6
38491: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38492: LD_VAR 0 6
38496: PUSH
38497: LD_INT 0
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: LD_INT 2
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: LIST
38510: IN
38511: NOT
38512: PUSH
38513: LD_VAR 0 1
38517: PUSH
38518: LD_INT 0
38520: PUSH
38521: LD_INT 1
38523: PUSH
38524: LD_INT 2
38526: PUSH
38527: LD_INT 3
38529: PUSH
38530: LD_INT 6
38532: PUSH
38533: LD_INT 36
38535: PUSH
38536: LD_INT 4
38538: PUSH
38539: LD_INT 5
38541: PUSH
38542: LD_INT 31
38544: PUSH
38545: LD_INT 32
38547: PUSH
38548: LD_INT 33
38550: PUSH
38551: EMPTY
38552: LIST
38553: LIST
38554: LIST
38555: LIST
38556: LIST
38557: LIST
38558: LIST
38559: LIST
38560: LIST
38561: LIST
38562: LIST
38563: IN
38564: NOT
38565: PUSH
38566: LD_VAR 0 6
38570: PUSH
38571: LD_INT 1
38573: EQUAL
38574: AND
38575: OR
38576: PUSH
38577: LD_VAR 0 1
38581: PUSH
38582: LD_INT 2
38584: PUSH
38585: LD_INT 3
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: IN
38592: NOT
38593: PUSH
38594: LD_VAR 0 6
38598: PUSH
38599: LD_INT 2
38601: EQUAL
38602: AND
38603: OR
38604: IFFALSE 38614
// mode = 0 ;
38606: LD_ADDR_VAR 0 6
38610: PUSH
38611: LD_INT 0
38613: ST_TO_ADDR
// case mode of 0 :
38614: LD_VAR 0 6
38618: PUSH
38619: LD_INT 0
38621: DOUBLE
38622: EQUAL
38623: IFTRUE 38627
38625: GO 50080
38627: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38628: LD_ADDR_VAR 0 11
38632: PUSH
38633: LD_INT 0
38635: PUSH
38636: LD_INT 0
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 0
38645: PUSH
38646: LD_INT 1
38648: NEG
38649: PUSH
38650: EMPTY
38651: LIST
38652: LIST
38653: PUSH
38654: LD_INT 1
38656: PUSH
38657: LD_INT 0
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 1
38666: PUSH
38667: LD_INT 1
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 0
38676: PUSH
38677: LD_INT 1
38679: PUSH
38680: EMPTY
38681: LIST
38682: LIST
38683: PUSH
38684: LD_INT 1
38686: NEG
38687: PUSH
38688: LD_INT 0
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: LD_INT 1
38697: NEG
38698: PUSH
38699: LD_INT 1
38701: NEG
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 1
38709: NEG
38710: PUSH
38711: LD_INT 2
38713: NEG
38714: PUSH
38715: EMPTY
38716: LIST
38717: LIST
38718: PUSH
38719: LD_INT 0
38721: PUSH
38722: LD_INT 2
38724: NEG
38725: PUSH
38726: EMPTY
38727: LIST
38728: LIST
38729: PUSH
38730: LD_INT 1
38732: PUSH
38733: LD_INT 1
38735: NEG
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 1
38743: PUSH
38744: LD_INT 2
38746: PUSH
38747: EMPTY
38748: LIST
38749: LIST
38750: PUSH
38751: LD_INT 0
38753: PUSH
38754: LD_INT 2
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: PUSH
38761: LD_INT 1
38763: NEG
38764: PUSH
38765: LD_INT 1
38767: PUSH
38768: EMPTY
38769: LIST
38770: LIST
38771: PUSH
38772: LD_INT 1
38774: PUSH
38775: LD_INT 3
38777: PUSH
38778: EMPTY
38779: LIST
38780: LIST
38781: PUSH
38782: LD_INT 0
38784: PUSH
38785: LD_INT 3
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 1
38794: NEG
38795: PUSH
38796: LD_INT 2
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: LIST
38807: LIST
38808: LIST
38809: LIST
38810: LIST
38811: LIST
38812: LIST
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38821: LD_ADDR_VAR 0 12
38825: PUSH
38826: LD_INT 0
38828: PUSH
38829: LD_INT 0
38831: PUSH
38832: EMPTY
38833: LIST
38834: LIST
38835: PUSH
38836: LD_INT 0
38838: PUSH
38839: LD_INT 1
38841: NEG
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: LD_INT 0
38852: PUSH
38853: EMPTY
38854: LIST
38855: LIST
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: LD_INT 1
38862: PUSH
38863: EMPTY
38864: LIST
38865: LIST
38866: PUSH
38867: LD_INT 0
38869: PUSH
38870: LD_INT 1
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 1
38879: NEG
38880: PUSH
38881: LD_INT 0
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: LD_INT 1
38890: NEG
38891: PUSH
38892: LD_INT 1
38894: NEG
38895: PUSH
38896: EMPTY
38897: LIST
38898: LIST
38899: PUSH
38900: LD_INT 1
38902: PUSH
38903: LD_INT 1
38905: NEG
38906: PUSH
38907: EMPTY
38908: LIST
38909: LIST
38910: PUSH
38911: LD_INT 2
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 2
38923: PUSH
38924: LD_INT 1
38926: PUSH
38927: EMPTY
38928: LIST
38929: LIST
38930: PUSH
38931: LD_INT 1
38933: NEG
38934: PUSH
38935: LD_INT 1
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 2
38944: NEG
38945: PUSH
38946: LD_INT 0
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 2
38955: NEG
38956: PUSH
38957: LD_INT 1
38959: NEG
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 2
38967: NEG
38968: PUSH
38969: LD_INT 1
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 3
38978: NEG
38979: PUSH
38980: LD_INT 0
38982: PUSH
38983: EMPTY
38984: LIST
38985: LIST
38986: PUSH
38987: LD_INT 3
38989: NEG
38990: PUSH
38991: LD_INT 1
38993: NEG
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: LIST
39013: LIST
39014: LIST
39015: LIST
39016: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
39017: LD_ADDR_VAR 0 13
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: LD_INT 0
39027: PUSH
39028: EMPTY
39029: LIST
39030: LIST
39031: PUSH
39032: LD_INT 0
39034: PUSH
39035: LD_INT 1
39037: NEG
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: PUSH
39046: LD_INT 0
39048: PUSH
39049: EMPTY
39050: LIST
39051: LIST
39052: PUSH
39053: LD_INT 1
39055: PUSH
39056: LD_INT 1
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 0
39065: PUSH
39066: LD_INT 1
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 1
39075: NEG
39076: PUSH
39077: LD_INT 0
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 1
39086: NEG
39087: PUSH
39088: LD_INT 1
39090: NEG
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 1
39098: NEG
39099: PUSH
39100: LD_INT 2
39102: NEG
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 2
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 2
39120: PUSH
39121: LD_INT 2
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 1
39130: PUSH
39131: LD_INT 2
39133: PUSH
39134: EMPTY
39135: LIST
39136: LIST
39137: PUSH
39138: LD_INT 2
39140: NEG
39141: PUSH
39142: LD_INT 1
39144: NEG
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 2
39152: NEG
39153: PUSH
39154: LD_INT 2
39156: NEG
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 2
39164: NEG
39165: PUSH
39166: LD_INT 3
39168: NEG
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 3
39176: NEG
39177: PUSH
39178: LD_INT 2
39180: NEG
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 3
39188: NEG
39189: PUSH
39190: LD_INT 3
39192: NEG
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39216: LD_ADDR_VAR 0 14
39220: PUSH
39221: LD_INT 0
39223: PUSH
39224: LD_INT 0
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: LD_INT 1
39236: NEG
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: LD_INT 0
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: LD_INT 1
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 0
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 1
39274: NEG
39275: PUSH
39276: LD_INT 0
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 1
39285: NEG
39286: PUSH
39287: LD_INT 1
39289: NEG
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 1
39297: NEG
39298: PUSH
39299: LD_INT 2
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 0
39309: PUSH
39310: LD_INT 2
39312: NEG
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: PUSH
39318: LD_INT 1
39320: PUSH
39321: LD_INT 1
39323: NEG
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 1
39331: PUSH
39332: LD_INT 2
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: LD_INT 2
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 1
39351: NEG
39352: PUSH
39353: LD_INT 1
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 1
39362: NEG
39363: PUSH
39364: LD_INT 3
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: LD_INT 3
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: LD_INT 2
39388: NEG
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: LIST
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39412: LD_ADDR_VAR 0 15
39416: PUSH
39417: LD_INT 0
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: EMPTY
39424: LIST
39425: LIST
39426: PUSH
39427: LD_INT 0
39429: PUSH
39430: LD_INT 1
39432: NEG
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 1
39440: PUSH
39441: LD_INT 0
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: LD_INT 1
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 0
39460: PUSH
39461: LD_INT 1
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 1
39470: NEG
39471: PUSH
39472: LD_INT 0
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 1
39481: NEG
39482: PUSH
39483: LD_INT 1
39485: NEG
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 1
39493: PUSH
39494: LD_INT 1
39496: NEG
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 2
39504: PUSH
39505: LD_INT 0
39507: PUSH
39508: EMPTY
39509: LIST
39510: LIST
39511: PUSH
39512: LD_INT 2
39514: PUSH
39515: LD_INT 1
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 1
39524: NEG
39525: PUSH
39526: LD_INT 1
39528: PUSH
39529: EMPTY
39530: LIST
39531: LIST
39532: PUSH
39533: LD_INT 2
39535: NEG
39536: PUSH
39537: LD_INT 0
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: LD_INT 2
39546: NEG
39547: PUSH
39548: LD_INT 1
39550: NEG
39551: PUSH
39552: EMPTY
39553: LIST
39554: LIST
39555: PUSH
39556: LD_INT 2
39558: PUSH
39559: LD_INT 1
39561: NEG
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 3
39569: PUSH
39570: LD_INT 0
39572: PUSH
39573: EMPTY
39574: LIST
39575: LIST
39576: PUSH
39577: LD_INT 3
39579: PUSH
39580: LD_INT 1
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: EMPTY
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39605: LD_ADDR_VAR 0 16
39609: PUSH
39610: LD_INT 0
39612: PUSH
39613: LD_INT 0
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 0
39622: PUSH
39623: LD_INT 1
39625: NEG
39626: PUSH
39627: EMPTY
39628: LIST
39629: LIST
39630: PUSH
39631: LD_INT 1
39633: PUSH
39634: LD_INT 0
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 1
39643: PUSH
39644: LD_INT 1
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 0
39653: PUSH
39654: LD_INT 1
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 1
39663: NEG
39664: PUSH
39665: LD_INT 0
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 1
39674: NEG
39675: PUSH
39676: LD_INT 1
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 1
39686: NEG
39687: PUSH
39688: LD_INT 2
39690: NEG
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 2
39698: PUSH
39699: LD_INT 1
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 2
39708: PUSH
39709: LD_INT 2
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 1
39718: PUSH
39719: LD_INT 2
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 2
39728: NEG
39729: PUSH
39730: LD_INT 1
39732: NEG
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 2
39740: NEG
39741: PUSH
39742: LD_INT 2
39744: NEG
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 3
39752: PUSH
39753: LD_INT 2
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 3
39762: PUSH
39763: LD_INT 3
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 2
39772: PUSH
39773: LD_INT 3
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: LIST
39784: LIST
39785: LIST
39786: LIST
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39798: LD_ADDR_VAR 0 17
39802: PUSH
39803: LD_INT 0
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 0
39815: PUSH
39816: LD_INT 1
39818: NEG
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: LD_INT 0
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 1
39836: PUSH
39837: LD_INT 1
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 0
39846: PUSH
39847: LD_INT 1
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 1
39856: NEG
39857: PUSH
39858: LD_INT 0
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 1
39867: NEG
39868: PUSH
39869: LD_INT 1
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: PUSH
39881: LD_INT 2
39883: NEG
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: LD_INT 2
39894: NEG
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: LD_INT 1
39905: NEG
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: LD_INT 0
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 2
39923: PUSH
39924: LD_INT 1
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 2
39933: PUSH
39934: LD_INT 2
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 1
39943: PUSH
39944: LD_INT 2
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 0
39953: PUSH
39954: LD_INT 2
39956: PUSH
39957: EMPTY
39958: LIST
39959: LIST
39960: PUSH
39961: LD_INT 1
39963: NEG
39964: PUSH
39965: LD_INT 1
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 2
39974: NEG
39975: PUSH
39976: LD_INT 0
39978: PUSH
39979: EMPTY
39980: LIST
39981: LIST
39982: PUSH
39983: LD_INT 2
39985: NEG
39986: PUSH
39987: LD_INT 1
39989: NEG
39990: PUSH
39991: EMPTY
39992: LIST
39993: LIST
39994: PUSH
39995: LD_INT 2
39997: NEG
39998: PUSH
39999: LD_INT 2
40001: NEG
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: LIST
40016: LIST
40017: LIST
40018: LIST
40019: LIST
40020: LIST
40021: LIST
40022: LIST
40023: LIST
40024: LIST
40025: LIST
40026: LIST
40027: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40028: LD_ADDR_VAR 0 18
40032: PUSH
40033: LD_INT 0
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 0
40045: PUSH
40046: LD_INT 1
40048: NEG
40049: PUSH
40050: EMPTY
40051: LIST
40052: LIST
40053: PUSH
40054: LD_INT 1
40056: PUSH
40057: LD_INT 0
40059: PUSH
40060: EMPTY
40061: LIST
40062: LIST
40063: PUSH
40064: LD_INT 1
40066: PUSH
40067: LD_INT 1
40069: PUSH
40070: EMPTY
40071: LIST
40072: LIST
40073: PUSH
40074: LD_INT 0
40076: PUSH
40077: LD_INT 1
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 1
40086: NEG
40087: PUSH
40088: LD_INT 0
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 1
40097: NEG
40098: PUSH
40099: LD_INT 1
40101: NEG
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 1
40109: NEG
40110: PUSH
40111: LD_INT 2
40113: NEG
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: LD_INT 2
40124: NEG
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 1
40132: PUSH
40133: LD_INT 1
40135: NEG
40136: PUSH
40137: EMPTY
40138: LIST
40139: LIST
40140: PUSH
40141: LD_INT 2
40143: PUSH
40144: LD_INT 0
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 2
40153: PUSH
40154: LD_INT 1
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 2
40163: PUSH
40164: LD_INT 2
40166: PUSH
40167: EMPTY
40168: LIST
40169: LIST
40170: PUSH
40171: LD_INT 1
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: EMPTY
40178: LIST
40179: LIST
40180: PUSH
40181: LD_INT 0
40183: PUSH
40184: LD_INT 2
40186: PUSH
40187: EMPTY
40188: LIST
40189: LIST
40190: PUSH
40191: LD_INT 1
40193: NEG
40194: PUSH
40195: LD_INT 1
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PUSH
40202: LD_INT 2
40204: NEG
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 2
40215: NEG
40216: PUSH
40217: LD_INT 1
40219: NEG
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 2
40227: NEG
40228: PUSH
40229: LD_INT 2
40231: NEG
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: LIST
40257: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40258: LD_ADDR_VAR 0 19
40262: PUSH
40263: LD_INT 0
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 0
40275: PUSH
40276: LD_INT 1
40278: NEG
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: PUSH
40284: LD_INT 1
40286: PUSH
40287: LD_INT 0
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 1
40296: PUSH
40297: LD_INT 1
40299: PUSH
40300: EMPTY
40301: LIST
40302: LIST
40303: PUSH
40304: LD_INT 0
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 1
40316: NEG
40317: PUSH
40318: LD_INT 0
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 1
40327: NEG
40328: PUSH
40329: LD_INT 1
40331: NEG
40332: PUSH
40333: EMPTY
40334: LIST
40335: LIST
40336: PUSH
40337: LD_INT 1
40339: NEG
40340: PUSH
40341: LD_INT 2
40343: NEG
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 0
40351: PUSH
40352: LD_INT 2
40354: NEG
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 1
40362: PUSH
40363: LD_INT 1
40365: NEG
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 2
40373: PUSH
40374: LD_INT 0
40376: PUSH
40377: EMPTY
40378: LIST
40379: LIST
40380: PUSH
40381: LD_INT 2
40383: PUSH
40384: LD_INT 1
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 2
40393: PUSH
40394: LD_INT 2
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 1
40403: PUSH
40404: LD_INT 2
40406: PUSH
40407: EMPTY
40408: LIST
40409: LIST
40410: PUSH
40411: LD_INT 0
40413: PUSH
40414: LD_INT 2
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 1
40423: NEG
40424: PUSH
40425: LD_INT 1
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 2
40434: NEG
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: EMPTY
40440: LIST
40441: LIST
40442: PUSH
40443: LD_INT 2
40445: NEG
40446: PUSH
40447: LD_INT 1
40449: NEG
40450: PUSH
40451: EMPTY
40452: LIST
40453: LIST
40454: PUSH
40455: LD_INT 2
40457: NEG
40458: PUSH
40459: LD_INT 2
40461: NEG
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: LIST
40471: LIST
40472: LIST
40473: LIST
40474: LIST
40475: LIST
40476: LIST
40477: LIST
40478: LIST
40479: LIST
40480: LIST
40481: LIST
40482: LIST
40483: LIST
40484: LIST
40485: LIST
40486: LIST
40487: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40488: LD_ADDR_VAR 0 20
40492: PUSH
40493: LD_INT 0
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 0
40505: PUSH
40506: LD_INT 1
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 1
40516: PUSH
40517: LD_INT 0
40519: PUSH
40520: EMPTY
40521: LIST
40522: LIST
40523: PUSH
40524: LD_INT 1
40526: PUSH
40527: LD_INT 1
40529: PUSH
40530: EMPTY
40531: LIST
40532: LIST
40533: PUSH
40534: LD_INT 0
40536: PUSH
40537: LD_INT 1
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 1
40546: NEG
40547: PUSH
40548: LD_INT 0
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: LD_INT 1
40557: NEG
40558: PUSH
40559: LD_INT 1
40561: NEG
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 1
40569: NEG
40570: PUSH
40571: LD_INT 2
40573: NEG
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 0
40581: PUSH
40582: LD_INT 2
40584: NEG
40585: PUSH
40586: EMPTY
40587: LIST
40588: LIST
40589: PUSH
40590: LD_INT 1
40592: PUSH
40593: LD_INT 1
40595: NEG
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 2
40603: PUSH
40604: LD_INT 0
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: LD_INT 2
40613: PUSH
40614: LD_INT 1
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 2
40623: PUSH
40624: LD_INT 2
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 1
40633: PUSH
40634: LD_INT 2
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 0
40643: PUSH
40644: LD_INT 2
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 1
40653: NEG
40654: PUSH
40655: LD_INT 1
40657: PUSH
40658: EMPTY
40659: LIST
40660: LIST
40661: PUSH
40662: LD_INT 2
40664: NEG
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: EMPTY
40670: LIST
40671: LIST
40672: PUSH
40673: LD_INT 2
40675: NEG
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 2
40687: NEG
40688: PUSH
40689: LD_INT 2
40691: NEG
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40718: LD_ADDR_VAR 0 21
40722: PUSH
40723: LD_INT 0
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 0
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 1
40746: PUSH
40747: LD_INT 0
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 1
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 0
40766: PUSH
40767: LD_INT 1
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 1
40776: NEG
40777: PUSH
40778: LD_INT 0
40780: PUSH
40781: EMPTY
40782: LIST
40783: LIST
40784: PUSH
40785: LD_INT 1
40787: NEG
40788: PUSH
40789: LD_INT 1
40791: NEG
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: LD_INT 2
40803: NEG
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 0
40811: PUSH
40812: LD_INT 2
40814: NEG
40815: PUSH
40816: EMPTY
40817: LIST
40818: LIST
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: LD_INT 1
40825: NEG
40826: PUSH
40827: EMPTY
40828: LIST
40829: LIST
40830: PUSH
40831: LD_INT 2
40833: PUSH
40834: LD_INT 0
40836: PUSH
40837: EMPTY
40838: LIST
40839: LIST
40840: PUSH
40841: LD_INT 2
40843: PUSH
40844: LD_INT 1
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 2
40853: PUSH
40854: LD_INT 2
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 1
40863: PUSH
40864: LD_INT 2
40866: PUSH
40867: EMPTY
40868: LIST
40869: LIST
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: LD_INT 2
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: LD_INT 1
40887: PUSH
40888: EMPTY
40889: LIST
40890: LIST
40891: PUSH
40892: LD_INT 2
40894: NEG
40895: PUSH
40896: LD_INT 0
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 2
40905: NEG
40906: PUSH
40907: LD_INT 1
40909: NEG
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 2
40917: NEG
40918: PUSH
40919: LD_INT 2
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40948: LD_ADDR_VAR 0 22
40952: PUSH
40953: LD_INT 0
40955: PUSH
40956: LD_INT 0
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: LD_INT 0
40965: PUSH
40966: LD_INT 1
40968: NEG
40969: PUSH
40970: EMPTY
40971: LIST
40972: LIST
40973: PUSH
40974: LD_INT 1
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: EMPTY
40981: LIST
40982: LIST
40983: PUSH
40984: LD_INT 1
40986: PUSH
40987: LD_INT 1
40989: PUSH
40990: EMPTY
40991: LIST
40992: LIST
40993: PUSH
40994: LD_INT 0
40996: PUSH
40997: LD_INT 1
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 1
41006: NEG
41007: PUSH
41008: LD_INT 0
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 1
41017: NEG
41018: PUSH
41019: LD_INT 1
41021: NEG
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 1
41029: NEG
41030: PUSH
41031: LD_INT 2
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: LD_INT 2
41044: NEG
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: PUSH
41053: LD_INT 1
41055: NEG
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 2
41063: PUSH
41064: LD_INT 0
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 2
41073: PUSH
41074: LD_INT 1
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 2
41083: PUSH
41084: LD_INT 2
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 1
41093: PUSH
41094: LD_INT 2
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 0
41103: PUSH
41104: LD_INT 2
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: LD_INT 1
41113: NEG
41114: PUSH
41115: LD_INT 1
41117: PUSH
41118: EMPTY
41119: LIST
41120: LIST
41121: PUSH
41122: LD_INT 2
41124: NEG
41125: PUSH
41126: LD_INT 0
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 2
41135: NEG
41136: PUSH
41137: LD_INT 1
41139: NEG
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 2
41147: NEG
41148: PUSH
41149: LD_INT 2
41151: NEG
41152: PUSH
41153: EMPTY
41154: LIST
41155: LIST
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: LIST
41166: LIST
41167: LIST
41168: LIST
41169: LIST
41170: LIST
41171: LIST
41172: LIST
41173: LIST
41174: LIST
41175: LIST
41176: LIST
41177: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41178: LD_ADDR_VAR 0 23
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 0
41195: PUSH
41196: LD_INT 1
41198: NEG
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 1
41216: PUSH
41217: LD_INT 1
41219: PUSH
41220: EMPTY
41221: LIST
41222: LIST
41223: PUSH
41224: LD_INT 0
41226: PUSH
41227: LD_INT 1
41229: PUSH
41230: EMPTY
41231: LIST
41232: LIST
41233: PUSH
41234: LD_INT 1
41236: NEG
41237: PUSH
41238: LD_INT 0
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: LD_INT 1
41251: NEG
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 1
41259: NEG
41260: PUSH
41261: LD_INT 2
41263: NEG
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 0
41271: PUSH
41272: LD_INT 2
41274: NEG
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 1
41282: PUSH
41283: LD_INT 1
41285: NEG
41286: PUSH
41287: EMPTY
41288: LIST
41289: LIST
41290: PUSH
41291: LD_INT 2
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 2
41303: PUSH
41304: LD_INT 1
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 2
41313: PUSH
41314: LD_INT 2
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 1
41323: PUSH
41324: LD_INT 2
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 0
41333: PUSH
41334: LD_INT 2
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: NEG
41344: PUSH
41345: LD_INT 1
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 2
41354: NEG
41355: PUSH
41356: LD_INT 0
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 2
41365: NEG
41366: PUSH
41367: LD_INT 1
41369: NEG
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 2
41377: NEG
41378: PUSH
41379: LD_INT 2
41381: NEG
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 2
41389: NEG
41390: PUSH
41391: LD_INT 3
41393: NEG
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 1
41401: NEG
41402: PUSH
41403: LD_INT 3
41405: NEG
41406: PUSH
41407: EMPTY
41408: LIST
41409: LIST
41410: PUSH
41411: LD_INT 1
41413: PUSH
41414: LD_INT 2
41416: NEG
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 2
41424: PUSH
41425: LD_INT 1
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: LIST
41437: LIST
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: LIST
41443: LIST
41444: LIST
41445: LIST
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41458: LD_ADDR_VAR 0 24
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 0
41506: PUSH
41507: LD_INT 1
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 1
41516: NEG
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: LD_INT 1
41531: NEG
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 1
41539: NEG
41540: PUSH
41541: LD_INT 2
41543: NEG
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 0
41551: PUSH
41552: LD_INT 2
41554: NEG
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: LD_INT 1
41565: NEG
41566: PUSH
41567: EMPTY
41568: LIST
41569: LIST
41570: PUSH
41571: LD_INT 2
41573: PUSH
41574: LD_INT 0
41576: PUSH
41577: EMPTY
41578: LIST
41579: LIST
41580: PUSH
41581: LD_INT 2
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 2
41593: PUSH
41594: LD_INT 2
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: PUSH
41604: LD_INT 2
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 0
41613: PUSH
41614: LD_INT 2
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: LD_INT 1
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 2
41634: NEG
41635: PUSH
41636: LD_INT 0
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: LD_INT 2
41645: NEG
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 2
41657: NEG
41658: PUSH
41659: LD_INT 2
41661: NEG
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 1
41669: PUSH
41670: LD_INT 2
41672: NEG
41673: PUSH
41674: EMPTY
41675: LIST
41676: LIST
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: LD_INT 1
41683: NEG
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 3
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 3
41701: PUSH
41702: LD_INT 2
41704: PUSH
41705: EMPTY
41706: LIST
41707: LIST
41708: PUSH
41709: EMPTY
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: LIST
41725: LIST
41726: LIST
41727: LIST
41728: LIST
41729: LIST
41730: LIST
41731: LIST
41732: LIST
41733: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41734: LD_ADDR_VAR 0 25
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: LD_INT 0
41744: PUSH
41745: EMPTY
41746: LIST
41747: LIST
41748: PUSH
41749: LD_INT 0
41751: PUSH
41752: LD_INT 1
41754: NEG
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 1
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 1
41772: PUSH
41773: LD_INT 1
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 0
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 1
41792: NEG
41793: PUSH
41794: LD_INT 0
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 1
41803: NEG
41804: PUSH
41805: LD_INT 1
41807: NEG
41808: PUSH
41809: EMPTY
41810: LIST
41811: LIST
41812: PUSH
41813: LD_INT 1
41815: NEG
41816: PUSH
41817: LD_INT 2
41819: NEG
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: LD_INT 2
41830: NEG
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: PUSH
41836: LD_INT 1
41838: PUSH
41839: LD_INT 1
41841: NEG
41842: PUSH
41843: EMPTY
41844: LIST
41845: LIST
41846: PUSH
41847: LD_INT 2
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 2
41859: PUSH
41860: LD_INT 1
41862: PUSH
41863: EMPTY
41864: LIST
41865: LIST
41866: PUSH
41867: LD_INT 2
41869: PUSH
41870: LD_INT 2
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 1
41879: PUSH
41880: LD_INT 2
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 0
41889: PUSH
41890: LD_INT 2
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: LD_INT 1
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 2
41910: NEG
41911: PUSH
41912: LD_INT 0
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 2
41921: NEG
41922: PUSH
41923: LD_INT 1
41925: NEG
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: PUSH
41931: LD_INT 2
41933: NEG
41934: PUSH
41935: LD_INT 2
41937: NEG
41938: PUSH
41939: EMPTY
41940: LIST
41941: LIST
41942: PUSH
41943: LD_INT 3
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: EMPTY
41950: LIST
41951: LIST
41952: PUSH
41953: LD_INT 3
41955: PUSH
41956: LD_INT 2
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 2
41965: PUSH
41966: LD_INT 3
41968: PUSH
41969: EMPTY
41970: LIST
41971: LIST
41972: PUSH
41973: LD_INT 1
41975: PUSH
41976: LD_INT 3
41978: PUSH
41979: EMPTY
41980: LIST
41981: LIST
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: LIST
41987: LIST
41988: LIST
41989: LIST
41990: LIST
41991: LIST
41992: LIST
41993: LIST
41994: LIST
41995: LIST
41996: LIST
41997: LIST
41998: LIST
41999: LIST
42000: LIST
42001: LIST
42002: LIST
42003: LIST
42004: LIST
42005: LIST
42006: LIST
42007: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
42008: LD_ADDR_VAR 0 26
42012: PUSH
42013: LD_INT 0
42015: PUSH
42016: LD_INT 0
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 0
42025: PUSH
42026: LD_INT 1
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: PUSH
42037: LD_INT 0
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 1
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 0
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: EMPTY
42061: LIST
42062: LIST
42063: PUSH
42064: LD_INT 1
42066: NEG
42067: PUSH
42068: LD_INT 0
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 1
42077: NEG
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 1
42089: NEG
42090: PUSH
42091: LD_INT 2
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: LD_INT 0
42101: PUSH
42102: LD_INT 2
42104: NEG
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: LD_INT 1
42115: NEG
42116: PUSH
42117: EMPTY
42118: LIST
42119: LIST
42120: PUSH
42121: LD_INT 2
42123: PUSH
42124: LD_INT 0
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 2
42133: PUSH
42134: LD_INT 1
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: PUSH
42141: LD_INT 2
42143: PUSH
42144: LD_INT 2
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: LD_INT 2
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 0
42163: PUSH
42164: LD_INT 2
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: LD_INT 1
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 2
42184: NEG
42185: PUSH
42186: LD_INT 0
42188: PUSH
42189: EMPTY
42190: LIST
42191: LIST
42192: PUSH
42193: LD_INT 2
42195: NEG
42196: PUSH
42197: LD_INT 1
42199: NEG
42200: PUSH
42201: EMPTY
42202: LIST
42203: LIST
42204: PUSH
42205: LD_INT 2
42207: NEG
42208: PUSH
42209: LD_INT 2
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 2
42219: PUSH
42220: LD_INT 3
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: LD_INT 3
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 1
42239: NEG
42240: PUSH
42241: LD_INT 2
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 2
42250: NEG
42251: PUSH
42252: LD_INT 1
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: LIST
42270: LIST
42271: LIST
42272: LIST
42273: LIST
42274: LIST
42275: LIST
42276: LIST
42277: LIST
42278: LIST
42279: LIST
42280: LIST
42281: LIST
42282: LIST
42283: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42284: LD_ADDR_VAR 0 27
42288: PUSH
42289: LD_INT 0
42291: PUSH
42292: LD_INT 0
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 1
42312: PUSH
42313: LD_INT 0
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 1
42322: PUSH
42323: LD_INT 1
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: LD_INT 1
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 1
42342: NEG
42343: PUSH
42344: LD_INT 0
42346: PUSH
42347: EMPTY
42348: LIST
42349: LIST
42350: PUSH
42351: LD_INT 1
42353: NEG
42354: PUSH
42355: LD_INT 1
42357: NEG
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: LD_INT 2
42369: NEG
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: LD_INT 0
42377: PUSH
42378: LD_INT 2
42380: NEG
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 1
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 2
42399: PUSH
42400: LD_INT 0
42402: PUSH
42403: EMPTY
42404: LIST
42405: LIST
42406: PUSH
42407: LD_INT 2
42409: PUSH
42410: LD_INT 1
42412: PUSH
42413: EMPTY
42414: LIST
42415: LIST
42416: PUSH
42417: LD_INT 2
42419: PUSH
42420: LD_INT 2
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: LD_INT 2
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 0
42439: PUSH
42440: LD_INT 2
42442: PUSH
42443: EMPTY
42444: LIST
42445: LIST
42446: PUSH
42447: LD_INT 1
42449: NEG
42450: PUSH
42451: LD_INT 1
42453: PUSH
42454: EMPTY
42455: LIST
42456: LIST
42457: PUSH
42458: LD_INT 2
42460: NEG
42461: PUSH
42462: LD_INT 0
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 2
42471: NEG
42472: PUSH
42473: LD_INT 1
42475: NEG
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 2
42483: NEG
42484: PUSH
42485: LD_INT 2
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: LD_INT 2
42499: PUSH
42500: EMPTY
42501: LIST
42502: LIST
42503: PUSH
42504: LD_INT 2
42506: NEG
42507: PUSH
42508: LD_INT 1
42510: PUSH
42511: EMPTY
42512: LIST
42513: LIST
42514: PUSH
42515: LD_INT 3
42517: NEG
42518: PUSH
42519: LD_INT 1
42521: NEG
42522: PUSH
42523: EMPTY
42524: LIST
42525: LIST
42526: PUSH
42527: LD_INT 3
42529: NEG
42530: PUSH
42531: LD_INT 2
42533: NEG
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: LIST
42545: LIST
42546: LIST
42547: LIST
42548: LIST
42549: LIST
42550: LIST
42551: LIST
42552: LIST
42553: LIST
42554: LIST
42555: LIST
42556: LIST
42557: LIST
42558: LIST
42559: LIST
42560: LIST
42561: LIST
42562: LIST
42563: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42564: LD_ADDR_VAR 0 28
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: LD_INT 0
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 0
42581: PUSH
42582: LD_INT 1
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 1
42592: PUSH
42593: LD_INT 0
42595: PUSH
42596: EMPTY
42597: LIST
42598: LIST
42599: PUSH
42600: LD_INT 1
42602: PUSH
42603: LD_INT 1
42605: PUSH
42606: EMPTY
42607: LIST
42608: LIST
42609: PUSH
42610: LD_INT 0
42612: PUSH
42613: LD_INT 1
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 1
42622: NEG
42623: PUSH
42624: LD_INT 0
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: LD_INT 1
42633: NEG
42634: PUSH
42635: LD_INT 1
42637: NEG
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 1
42645: NEG
42646: PUSH
42647: LD_INT 2
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: LD_INT 0
42657: PUSH
42658: LD_INT 2
42660: NEG
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 1
42668: PUSH
42669: LD_INT 1
42671: NEG
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 2
42679: PUSH
42680: LD_INT 0
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 2
42689: PUSH
42690: LD_INT 1
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 2
42699: PUSH
42700: LD_INT 2
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 1
42709: PUSH
42710: LD_INT 2
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 0
42719: PUSH
42720: LD_INT 2
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: NEG
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 2
42740: NEG
42741: PUSH
42742: LD_INT 0
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 2
42751: NEG
42752: PUSH
42753: LD_INT 1
42755: NEG
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 2
42763: NEG
42764: PUSH
42765: LD_INT 2
42767: NEG
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 2
42775: NEG
42776: PUSH
42777: LD_INT 3
42779: NEG
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: PUSH
42785: LD_INT 1
42787: NEG
42788: PUSH
42789: LD_INT 3
42791: NEG
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 3
42799: NEG
42800: PUSH
42801: LD_INT 1
42803: NEG
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 3
42811: NEG
42812: PUSH
42813: LD_INT 2
42815: NEG
42816: PUSH
42817: EMPTY
42818: LIST
42819: LIST
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: LIST
42825: LIST
42826: LIST
42827: LIST
42828: LIST
42829: LIST
42830: LIST
42831: LIST
42832: LIST
42833: LIST
42834: LIST
42835: LIST
42836: LIST
42837: LIST
42838: LIST
42839: LIST
42840: LIST
42841: LIST
42842: LIST
42843: LIST
42844: LIST
42845: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42846: LD_ADDR_VAR 0 29
42850: PUSH
42851: LD_INT 0
42853: PUSH
42854: LD_INT 0
42856: PUSH
42857: EMPTY
42858: LIST
42859: LIST
42860: PUSH
42861: LD_INT 0
42863: PUSH
42864: LD_INT 1
42866: NEG
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 1
42874: PUSH
42875: LD_INT 0
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: LD_INT 1
42884: PUSH
42885: LD_INT 1
42887: PUSH
42888: EMPTY
42889: LIST
42890: LIST
42891: PUSH
42892: LD_INT 0
42894: PUSH
42895: LD_INT 1
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: LD_INT 0
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 1
42915: NEG
42916: PUSH
42917: LD_INT 1
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 1
42927: NEG
42928: PUSH
42929: LD_INT 2
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: LD_INT 2
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 1
42950: PUSH
42951: LD_INT 1
42953: NEG
42954: PUSH
42955: EMPTY
42956: LIST
42957: LIST
42958: PUSH
42959: LD_INT 2
42961: PUSH
42962: LD_INT 0
42964: PUSH
42965: EMPTY
42966: LIST
42967: LIST
42968: PUSH
42969: LD_INT 2
42971: PUSH
42972: LD_INT 1
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 1
42981: PUSH
42982: LD_INT 2
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: LD_INT 2
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 1
43001: NEG
43002: PUSH
43003: LD_INT 1
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 2
43012: NEG
43013: PUSH
43014: LD_INT 1
43016: NEG
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: LD_INT 2
43024: NEG
43025: PUSH
43026: LD_INT 2
43028: NEG
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: PUSH
43034: LD_INT 2
43036: NEG
43037: PUSH
43038: LD_INT 3
43040: NEG
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: PUSH
43046: LD_INT 2
43048: PUSH
43049: LD_INT 1
43051: NEG
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 3
43059: PUSH
43060: LD_INT 1
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: PUSH
43070: LD_INT 3
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 1
43079: NEG
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: EMPTY
43085: LIST
43086: LIST
43087: PUSH
43088: LD_INT 3
43090: NEG
43091: PUSH
43092: LD_INT 2
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: LIST
43104: LIST
43105: LIST
43106: LIST
43107: LIST
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43125: LD_ADDR_VAR 0 30
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: EMPTY
43137: LIST
43138: LIST
43139: PUSH
43140: LD_INT 0
43142: PUSH
43143: LD_INT 1
43145: NEG
43146: PUSH
43147: EMPTY
43148: LIST
43149: LIST
43150: PUSH
43151: LD_INT 1
43153: PUSH
43154: LD_INT 0
43156: PUSH
43157: EMPTY
43158: LIST
43159: LIST
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: EMPTY
43168: LIST
43169: LIST
43170: PUSH
43171: LD_INT 0
43173: PUSH
43174: LD_INT 1
43176: PUSH
43177: EMPTY
43178: LIST
43179: LIST
43180: PUSH
43181: LD_INT 1
43183: NEG
43184: PUSH
43185: LD_INT 0
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: LD_INT 1
43198: NEG
43199: PUSH
43200: EMPTY
43201: LIST
43202: LIST
43203: PUSH
43204: LD_INT 1
43206: NEG
43207: PUSH
43208: LD_INT 2
43210: NEG
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 0
43218: PUSH
43219: LD_INT 2
43221: NEG
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 1
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 2
43240: PUSH
43241: LD_INT 0
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 2
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 2
43260: PUSH
43261: LD_INT 2
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: PUSH
43271: LD_INT 2
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 2
43291: NEG
43292: PUSH
43293: LD_INT 0
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 2
43302: NEG
43303: PUSH
43304: LD_INT 1
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 1
43314: NEG
43315: PUSH
43316: LD_INT 3
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: LD_INT 2
43329: NEG
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 3
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 2
43347: PUSH
43348: LD_INT 3
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 2
43357: NEG
43358: PUSH
43359: LD_INT 1
43361: PUSH
43362: EMPTY
43363: LIST
43364: LIST
43365: PUSH
43366: LD_INT 3
43368: NEG
43369: PUSH
43370: LD_INT 1
43372: NEG
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: LIST
43389: LIST
43390: LIST
43391: LIST
43392: LIST
43393: LIST
43394: LIST
43395: LIST
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43403: LD_ADDR_VAR 0 31
43407: PUSH
43408: LD_INT 0
43410: PUSH
43411: LD_INT 0
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: LD_INT 1
43423: NEG
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 1
43431: PUSH
43432: LD_INT 0
43434: PUSH
43435: EMPTY
43436: LIST
43437: LIST
43438: PUSH
43439: LD_INT 1
43441: PUSH
43442: LD_INT 1
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 0
43451: PUSH
43452: LD_INT 1
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 1
43461: NEG
43462: PUSH
43463: LD_INT 0
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: PUSH
43470: LD_INT 1
43472: NEG
43473: PUSH
43474: LD_INT 1
43476: NEG
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 1
43484: NEG
43485: PUSH
43486: LD_INT 2
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 1
43496: PUSH
43497: LD_INT 1
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 2
43507: PUSH
43508: LD_INT 0
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 2
43517: PUSH
43518: LD_INT 1
43520: PUSH
43521: EMPTY
43522: LIST
43523: LIST
43524: PUSH
43525: LD_INT 2
43527: PUSH
43528: LD_INT 2
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: LD_INT 2
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 0
43547: PUSH
43548: LD_INT 2
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 2
43568: NEG
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 2
43580: NEG
43581: PUSH
43582: LD_INT 2
43584: NEG
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: LD_INT 3
43596: NEG
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 2
43604: PUSH
43605: LD_INT 1
43607: NEG
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 3
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: LD_INT 3
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: NEG
43636: PUSH
43637: LD_INT 2
43639: PUSH
43640: EMPTY
43641: LIST
43642: LIST
43643: PUSH
43644: LD_INT 3
43646: NEG
43647: PUSH
43648: LD_INT 2
43650: NEG
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: LIST
43666: LIST
43667: LIST
43668: LIST
43669: LIST
43670: LIST
43671: LIST
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43681: LD_ADDR_VAR 0 32
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: LD_INT 0
43691: PUSH
43692: EMPTY
43693: LIST
43694: LIST
43695: PUSH
43696: LD_INT 0
43698: PUSH
43699: LD_INT 1
43701: NEG
43702: PUSH
43703: EMPTY
43704: LIST
43705: LIST
43706: PUSH
43707: LD_INT 1
43709: PUSH
43710: LD_INT 0
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 1
43719: PUSH
43720: LD_INT 1
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: LD_INT 0
43729: PUSH
43730: LD_INT 1
43732: PUSH
43733: EMPTY
43734: LIST
43735: LIST
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: LD_INT 0
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 1
43750: NEG
43751: PUSH
43752: LD_INT 1
43754: NEG
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 1
43762: NEG
43763: PUSH
43764: LD_INT 2
43766: NEG
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 0
43774: PUSH
43775: LD_INT 2
43777: NEG
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 2
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 2
43806: PUSH
43807: LD_INT 2
43809: PUSH
43810: EMPTY
43811: LIST
43812: LIST
43813: PUSH
43814: LD_INT 1
43816: PUSH
43817: LD_INT 2
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 0
43826: PUSH
43827: LD_INT 2
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: NEG
43837: PUSH
43838: LD_INT 1
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 2
43847: NEG
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 2
43858: NEG
43859: PUSH
43860: LD_INT 1
43862: NEG
43863: PUSH
43864: EMPTY
43865: LIST
43866: LIST
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: LD_INT 3
43874: NEG
43875: PUSH
43876: EMPTY
43877: LIST
43878: LIST
43879: PUSH
43880: LD_INT 1
43882: PUSH
43883: LD_INT 2
43885: NEG
43886: PUSH
43887: EMPTY
43888: LIST
43889: LIST
43890: PUSH
43891: LD_INT 3
43893: PUSH
43894: LD_INT 2
43896: PUSH
43897: EMPTY
43898: LIST
43899: LIST
43900: PUSH
43901: LD_INT 2
43903: PUSH
43904: LD_INT 3
43906: PUSH
43907: EMPTY
43908: LIST
43909: LIST
43910: PUSH
43911: LD_INT 2
43913: NEG
43914: PUSH
43915: LD_INT 1
43917: PUSH
43918: EMPTY
43919: LIST
43920: LIST
43921: PUSH
43922: LD_INT 3
43924: NEG
43925: PUSH
43926: LD_INT 1
43928: NEG
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43959: LD_ADDR_VAR 0 33
43963: PUSH
43964: LD_INT 0
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 0
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: EMPTY
43982: LIST
43983: LIST
43984: PUSH
43985: LD_INT 1
43987: PUSH
43988: LD_INT 0
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 1
43997: PUSH
43998: LD_INT 1
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: LD_INT 1
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 1
44017: NEG
44018: PUSH
44019: LD_INT 0
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: LD_INT 1
44032: NEG
44033: PUSH
44034: EMPTY
44035: LIST
44036: LIST
44037: PUSH
44038: LD_INT 1
44040: NEG
44041: PUSH
44042: LD_INT 2
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 1
44052: PUSH
44053: LD_INT 1
44055: NEG
44056: PUSH
44057: EMPTY
44058: LIST
44059: LIST
44060: PUSH
44061: LD_INT 2
44063: PUSH
44064: LD_INT 0
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 2
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 1
44083: PUSH
44084: LD_INT 2
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PUSH
44091: LD_INT 0
44093: PUSH
44094: LD_INT 2
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: LD_INT 1
44103: NEG
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 2
44114: NEG
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 2
44125: NEG
44126: PUSH
44127: LD_INT 1
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PUSH
44139: LD_INT 2
44141: NEG
44142: PUSH
44143: EMPTY
44144: LIST
44145: LIST
44146: PUSH
44147: LD_INT 2
44149: NEG
44150: PUSH
44151: LD_INT 3
44153: NEG
44154: PUSH
44155: EMPTY
44156: LIST
44157: LIST
44158: PUSH
44159: LD_INT 2
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 3
44172: PUSH
44173: LD_INT 1
44175: PUSH
44176: EMPTY
44177: LIST
44178: LIST
44179: PUSH
44180: LD_INT 1
44182: PUSH
44183: LD_INT 3
44185: PUSH
44186: EMPTY
44187: LIST
44188: LIST
44189: PUSH
44190: LD_INT 1
44192: NEG
44193: PUSH
44194: LD_INT 2
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 3
44203: NEG
44204: PUSH
44205: LD_INT 2
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: LIST
44224: LIST
44225: LIST
44226: LIST
44227: LIST
44228: LIST
44229: LIST
44230: LIST
44231: LIST
44232: LIST
44233: LIST
44234: LIST
44235: LIST
44236: LIST
44237: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44238: LD_ADDR_VAR 0 34
44242: PUSH
44243: LD_INT 0
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: LD_INT 1
44258: NEG
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 1
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: EMPTY
44271: LIST
44272: LIST
44273: PUSH
44274: LD_INT 1
44276: PUSH
44277: LD_INT 1
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 1
44296: NEG
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: NEG
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 1
44319: NEG
44320: PUSH
44321: LD_INT 2
44323: NEG
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: LD_INT 2
44334: NEG
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: LD_INT 1
44345: NEG
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 2
44353: PUSH
44354: LD_INT 1
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 2
44363: PUSH
44364: LD_INT 2
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: LD_INT 2
44376: PUSH
44377: EMPTY
44378: LIST
44379: LIST
44380: PUSH
44381: LD_INT 1
44383: NEG
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 2
44394: NEG
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 2
44405: NEG
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 2
44417: NEG
44418: PUSH
44419: LD_INT 2
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 1
44429: NEG
44430: PUSH
44431: LD_INT 3
44433: NEG
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: LD_INT 2
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 3
44452: PUSH
44453: LD_INT 2
44455: PUSH
44456: EMPTY
44457: LIST
44458: LIST
44459: PUSH
44460: LD_INT 2
44462: PUSH
44463: LD_INT 3
44465: PUSH
44466: EMPTY
44467: LIST
44468: LIST
44469: PUSH
44470: LD_INT 2
44472: NEG
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 3
44483: NEG
44484: PUSH
44485: LD_INT 1
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: LIST
44497: LIST
44498: LIST
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: LIST
44505: LIST
44506: LIST
44507: LIST
44508: LIST
44509: LIST
44510: LIST
44511: LIST
44512: LIST
44513: LIST
44514: LIST
44515: LIST
44516: LIST
44517: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44518: LD_ADDR_VAR 0 35
44522: PUSH
44523: LD_INT 0
44525: PUSH
44526: LD_INT 0
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: LD_INT 1
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: LD_INT 0
44549: PUSH
44550: EMPTY
44551: LIST
44552: LIST
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: LD_INT 1
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 0
44566: PUSH
44567: LD_INT 1
44569: PUSH
44570: EMPTY
44571: LIST
44572: LIST
44573: PUSH
44574: LD_INT 1
44576: NEG
44577: PUSH
44578: LD_INT 0
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: LD_INT 1
44591: NEG
44592: PUSH
44593: EMPTY
44594: LIST
44595: LIST
44596: PUSH
44597: LD_INT 2
44599: PUSH
44600: LD_INT 1
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 2
44609: NEG
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44630: LD_ADDR_VAR 0 36
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: LD_INT 0
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 0
44647: PUSH
44648: LD_INT 1
44650: NEG
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: PUSH
44659: LD_INT 0
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: LD_INT 1
44671: PUSH
44672: EMPTY
44673: LIST
44674: LIST
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: LD_INT 1
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 1
44688: NEG
44689: PUSH
44690: LD_INT 0
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 1
44699: NEG
44700: PUSH
44701: LD_INT 1
44703: NEG
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 1
44711: NEG
44712: PUSH
44713: LD_INT 2
44715: NEG
44716: PUSH
44717: EMPTY
44718: LIST
44719: LIST
44720: PUSH
44721: LD_INT 1
44723: PUSH
44724: LD_INT 2
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44742: LD_ADDR_VAR 0 37
44746: PUSH
44747: LD_INT 0
44749: PUSH
44750: LD_INT 0
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 1
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: LD_INT 1
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 1
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: NEG
44801: PUSH
44802: LD_INT 0
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 1
44811: NEG
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: EMPTY
44818: LIST
44819: LIST
44820: PUSH
44821: LD_INT 1
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: NEG
44835: PUSH
44836: LD_INT 1
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44854: LD_ADDR_VAR 0 38
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 0
44871: PUSH
44872: LD_INT 1
44874: NEG
44875: PUSH
44876: EMPTY
44877: LIST
44878: LIST
44879: PUSH
44880: LD_INT 1
44882: PUSH
44883: LD_INT 0
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 1
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 0
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: NEG
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 1
44923: NEG
44924: PUSH
44925: LD_INT 1
44927: NEG
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 2
44935: PUSH
44936: LD_INT 1
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 2
44945: NEG
44946: PUSH
44947: LD_INT 1
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44966: LD_ADDR_VAR 0 39
44970: PUSH
44971: LD_INT 0
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: LD_INT 1
44986: NEG
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: PUSH
44992: LD_INT 1
44994: PUSH
44995: LD_INT 0
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: LD_INT 1
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 0
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 1
45024: NEG
45025: PUSH
45026: LD_INT 0
45028: PUSH
45029: EMPTY
45030: LIST
45031: LIST
45032: PUSH
45033: LD_INT 1
45035: NEG
45036: PUSH
45037: LD_INT 1
45039: NEG
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 1
45047: NEG
45048: PUSH
45049: LD_INT 2
45051: NEG
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: LD_INT 2
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: EMPTY
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45078: LD_ADDR_VAR 0 40
45082: PUSH
45083: LD_INT 0
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 0
45095: PUSH
45096: LD_INT 1
45098: NEG
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 1
45106: PUSH
45107: LD_INT 0
45109: PUSH
45110: EMPTY
45111: LIST
45112: LIST
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: LD_INT 1
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: PUSH
45124: LD_INT 0
45126: PUSH
45127: LD_INT 1
45129: PUSH
45130: EMPTY
45131: LIST
45132: LIST
45133: PUSH
45134: LD_INT 1
45136: NEG
45137: PUSH
45138: LD_INT 0
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: PUSH
45145: LD_INT 1
45147: NEG
45148: PUSH
45149: LD_INT 1
45151: NEG
45152: PUSH
45153: EMPTY
45154: LIST
45155: LIST
45156: PUSH
45157: LD_INT 1
45159: PUSH
45160: LD_INT 1
45162: NEG
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: LD_INT 1
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: LIST
45185: LIST
45186: LIST
45187: LIST
45188: LIST
45189: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45190: LD_ADDR_VAR 0 41
45194: PUSH
45195: LD_INT 0
45197: PUSH
45198: LD_INT 0
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 0
45207: PUSH
45208: LD_INT 1
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: LD_INT 0
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: LD_INT 1
45231: PUSH
45232: EMPTY
45233: LIST
45234: LIST
45235: PUSH
45236: LD_INT 0
45238: PUSH
45239: LD_INT 1
45241: PUSH
45242: EMPTY
45243: LIST
45244: LIST
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: LD_INT 0
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: NEG
45260: PUSH
45261: LD_INT 1
45263: NEG
45264: PUSH
45265: EMPTY
45266: LIST
45267: LIST
45268: PUSH
45269: LD_INT 1
45271: NEG
45272: PUSH
45273: LD_INT 2
45275: NEG
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: LD_INT 1
45286: NEG
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: LD_INT 0
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 2
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: PUSH
45315: LD_INT 2
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: LD_INT 1
45324: PUSH
45325: LD_INT 2
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 1
45334: NEG
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 2
45345: NEG
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: EMPTY
45351: LIST
45352: LIST
45353: PUSH
45354: LD_INT 2
45356: NEG
45357: PUSH
45358: LD_INT 1
45360: NEG
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 2
45368: NEG
45369: PUSH
45370: LD_INT 2
45372: NEG
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: LD_INT 2
45380: NEG
45381: PUSH
45382: LD_INT 3
45384: NEG
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 2
45392: PUSH
45393: LD_INT 1
45395: NEG
45396: PUSH
45397: EMPTY
45398: LIST
45399: LIST
45400: PUSH
45401: LD_INT 3
45403: PUSH
45404: LD_INT 0
45406: PUSH
45407: EMPTY
45408: LIST
45409: LIST
45410: PUSH
45411: LD_INT 3
45413: PUSH
45414: LD_INT 1
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: PUSH
45421: LD_INT 3
45423: PUSH
45424: LD_INT 2
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 3
45433: PUSH
45434: LD_INT 3
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 2
45443: PUSH
45444: LD_INT 3
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 2
45453: NEG
45454: PUSH
45455: LD_INT 1
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 3
45464: NEG
45465: PUSH
45466: LD_INT 0
45468: PUSH
45469: EMPTY
45470: LIST
45471: LIST
45472: PUSH
45473: LD_INT 3
45475: NEG
45476: PUSH
45477: LD_INT 1
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 3
45487: NEG
45488: PUSH
45489: LD_INT 2
45491: NEG
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 3
45499: NEG
45500: PUSH
45501: LD_INT 3
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: EMPTY
45510: LIST
45511: LIST
45512: LIST
45513: LIST
45514: LIST
45515: LIST
45516: LIST
45517: LIST
45518: LIST
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: LIST
45527: LIST
45528: LIST
45529: LIST
45530: LIST
45531: LIST
45532: LIST
45533: LIST
45534: LIST
45535: LIST
45536: LIST
45537: LIST
45538: LIST
45539: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45540: LD_ADDR_VAR 0 42
45544: PUSH
45545: LD_INT 0
45547: PUSH
45548: LD_INT 0
45550: PUSH
45551: EMPTY
45552: LIST
45553: LIST
45554: PUSH
45555: LD_INT 0
45557: PUSH
45558: LD_INT 1
45560: NEG
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: LD_INT 0
45571: PUSH
45572: EMPTY
45573: LIST
45574: LIST
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: EMPTY
45583: LIST
45584: LIST
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: LD_INT 1
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: PUSH
45596: LD_INT 1
45598: NEG
45599: PUSH
45600: LD_INT 0
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 1
45609: NEG
45610: PUSH
45611: LD_INT 1
45613: NEG
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: PUSH
45619: LD_INT 1
45621: NEG
45622: PUSH
45623: LD_INT 2
45625: NEG
45626: PUSH
45627: EMPTY
45628: LIST
45629: LIST
45630: PUSH
45631: LD_INT 0
45633: PUSH
45634: LD_INT 2
45636: NEG
45637: PUSH
45638: EMPTY
45639: LIST
45640: LIST
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 2
45655: PUSH
45656: LD_INT 1
45658: PUSH
45659: EMPTY
45660: LIST
45661: LIST
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: LD_INT 2
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: LD_INT 2
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: PUSH
45683: LD_INT 0
45685: PUSH
45686: LD_INT 2
45688: PUSH
45689: EMPTY
45690: LIST
45691: LIST
45692: PUSH
45693: LD_INT 1
45695: NEG
45696: PUSH
45697: LD_INT 1
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 2
45706: NEG
45707: PUSH
45708: LD_INT 1
45710: NEG
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 2
45718: NEG
45719: PUSH
45720: LD_INT 2
45722: NEG
45723: PUSH
45724: EMPTY
45725: LIST
45726: LIST
45727: PUSH
45728: LD_INT 2
45730: NEG
45731: PUSH
45732: LD_INT 3
45734: NEG
45735: PUSH
45736: EMPTY
45737: LIST
45738: LIST
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: LD_INT 3
45746: NEG
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 3
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: PUSH
45766: LD_INT 2
45768: NEG
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 3
45776: PUSH
45777: LD_INT 2
45779: PUSH
45780: EMPTY
45781: LIST
45782: LIST
45783: PUSH
45784: LD_INT 3
45786: PUSH
45787: LD_INT 3
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 2
45796: PUSH
45797: LD_INT 3
45799: PUSH
45800: EMPTY
45801: LIST
45802: LIST
45803: PUSH
45804: LD_INT 1
45806: PUSH
45807: LD_INT 3
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 0
45816: PUSH
45817: LD_INT 3
45819: PUSH
45820: EMPTY
45821: LIST
45822: LIST
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 3
45837: NEG
45838: PUSH
45839: LD_INT 2
45841: NEG
45842: PUSH
45843: EMPTY
45844: LIST
45845: LIST
45846: PUSH
45847: LD_INT 3
45849: NEG
45850: PUSH
45851: LD_INT 3
45853: NEG
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: LIST
45865: LIST
45866: LIST
45867: LIST
45868: LIST
45869: LIST
45870: LIST
45871: LIST
45872: LIST
45873: LIST
45874: LIST
45875: LIST
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45890: LD_ADDR_VAR 0 43
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 1
45971: NEG
45972: PUSH
45973: LD_INT 2
45975: NEG
45976: PUSH
45977: EMPTY
45978: LIST
45979: LIST
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: LD_INT 2
45986: NEG
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 1
45994: PUSH
45995: LD_INT 1
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 2
46005: PUSH
46006: LD_INT 0
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 2
46015: PUSH
46016: LD_INT 1
46018: PUSH
46019: EMPTY
46020: LIST
46021: LIST
46022: PUSH
46023: LD_INT 1
46025: PUSH
46026: LD_INT 2
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: LD_INT 2
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: LD_INT 1
46045: NEG
46046: PUSH
46047: LD_INT 1
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 2
46056: NEG
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: EMPTY
46062: LIST
46063: LIST
46064: PUSH
46065: LD_INT 2
46067: NEG
46068: PUSH
46069: LD_INT 1
46071: NEG
46072: PUSH
46073: EMPTY
46074: LIST
46075: LIST
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: LD_INT 3
46083: NEG
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 0
46091: PUSH
46092: LD_INT 3
46094: NEG
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 1
46102: PUSH
46103: LD_INT 2
46105: NEG
46106: PUSH
46107: EMPTY
46108: LIST
46109: LIST
46110: PUSH
46111: LD_INT 2
46113: PUSH
46114: LD_INT 1
46116: NEG
46117: PUSH
46118: EMPTY
46119: LIST
46120: LIST
46121: PUSH
46122: LD_INT 3
46124: PUSH
46125: LD_INT 0
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 3
46134: PUSH
46135: LD_INT 1
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: LD_INT 3
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: LD_INT 3
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: LD_INT 2
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 2
46175: NEG
46176: PUSH
46177: LD_INT 1
46179: PUSH
46180: EMPTY
46181: LIST
46182: LIST
46183: PUSH
46184: LD_INT 3
46186: NEG
46187: PUSH
46188: LD_INT 0
46190: PUSH
46191: EMPTY
46192: LIST
46193: LIST
46194: PUSH
46195: LD_INT 3
46197: NEG
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: LIST
46214: LIST
46215: LIST
46216: LIST
46217: LIST
46218: LIST
46219: LIST
46220: LIST
46221: LIST
46222: LIST
46223: LIST
46224: LIST
46225: LIST
46226: LIST
46227: LIST
46228: LIST
46229: LIST
46230: LIST
46231: LIST
46232: LIST
46233: LIST
46234: LIST
46235: LIST
46236: LIST
46237: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46238: LD_ADDR_VAR 0 44
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: LD_INT 0
46248: PUSH
46249: EMPTY
46250: LIST
46251: LIST
46252: PUSH
46253: LD_INT 0
46255: PUSH
46256: LD_INT 1
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 1
46266: PUSH
46267: LD_INT 0
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 1
46276: PUSH
46277: LD_INT 1
46279: PUSH
46280: EMPTY
46281: LIST
46282: LIST
46283: PUSH
46284: LD_INT 0
46286: PUSH
46287: LD_INT 1
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 1
46296: NEG
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 1
46307: NEG
46308: PUSH
46309: LD_INT 1
46311: NEG
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 1
46319: NEG
46320: PUSH
46321: LD_INT 2
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: LD_INT 1
46334: NEG
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: LD_INT 0
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 2
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: LD_INT 2
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: PUSH
46373: LD_INT 2
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 1
46382: NEG
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 2
46393: NEG
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: EMPTY
46399: LIST
46400: LIST
46401: PUSH
46402: LD_INT 2
46404: NEG
46405: PUSH
46406: LD_INT 1
46408: NEG
46409: PUSH
46410: EMPTY
46411: LIST
46412: LIST
46413: PUSH
46414: LD_INT 2
46416: NEG
46417: PUSH
46418: LD_INT 2
46420: NEG
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 2
46428: NEG
46429: PUSH
46430: LD_INT 3
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 2
46440: PUSH
46441: LD_INT 1
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: LD_INT 3
46451: PUSH
46452: LD_INT 0
46454: PUSH
46455: EMPTY
46456: LIST
46457: LIST
46458: PUSH
46459: LD_INT 3
46461: PUSH
46462: LD_INT 1
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: LD_INT 3
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 3
46481: PUSH
46482: LD_INT 3
46484: PUSH
46485: EMPTY
46486: LIST
46487: LIST
46488: PUSH
46489: LD_INT 2
46491: PUSH
46492: LD_INT 3
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 2
46501: NEG
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 3
46512: NEG
46513: PUSH
46514: LD_INT 0
46516: PUSH
46517: EMPTY
46518: LIST
46519: LIST
46520: PUSH
46521: LD_INT 3
46523: NEG
46524: PUSH
46525: LD_INT 1
46527: NEG
46528: PUSH
46529: EMPTY
46530: LIST
46531: LIST
46532: PUSH
46533: LD_INT 3
46535: NEG
46536: PUSH
46537: LD_INT 2
46539: NEG
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 3
46547: NEG
46548: PUSH
46549: LD_INT 3
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: LIST
46582: LIST
46583: LIST
46584: LIST
46585: LIST
46586: LIST
46587: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46588: LD_ADDR_VAR 0 45
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: LD_INT 0
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 0
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: EMPTY
46611: LIST
46612: LIST
46613: PUSH
46614: LD_INT 1
46616: PUSH
46617: LD_INT 0
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 1
46626: PUSH
46627: LD_INT 1
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: LD_INT 0
46636: PUSH
46637: LD_INT 1
46639: PUSH
46640: EMPTY
46641: LIST
46642: LIST
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: LD_INT 1
46657: NEG
46658: PUSH
46659: LD_INT 1
46661: NEG
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 1
46669: NEG
46670: PUSH
46671: LD_INT 2
46673: NEG
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 0
46681: PUSH
46682: LD_INT 2
46684: NEG
46685: PUSH
46686: EMPTY
46687: LIST
46688: LIST
46689: PUSH
46690: LD_INT 1
46692: PUSH
46693: LD_INT 1
46695: NEG
46696: PUSH
46697: EMPTY
46698: LIST
46699: LIST
46700: PUSH
46701: LD_INT 2
46703: PUSH
46704: LD_INT 1
46706: PUSH
46707: EMPTY
46708: LIST
46709: LIST
46710: PUSH
46711: LD_INT 2
46713: PUSH
46714: LD_INT 2
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: LD_INT 2
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 0
46733: PUSH
46734: LD_INT 2
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 1
46743: NEG
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: EMPTY
46749: LIST
46750: LIST
46751: PUSH
46752: LD_INT 2
46754: NEG
46755: PUSH
46756: LD_INT 1
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 2
46766: NEG
46767: PUSH
46768: LD_INT 2
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 2
46778: NEG
46779: PUSH
46780: LD_INT 3
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: LD_INT 1
46790: NEG
46791: PUSH
46792: LD_INT 3
46794: NEG
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: LD_INT 3
46805: NEG
46806: PUSH
46807: EMPTY
46808: LIST
46809: LIST
46810: PUSH
46811: LD_INT 1
46813: PUSH
46814: LD_INT 2
46816: NEG
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: LD_INT 3
46824: PUSH
46825: LD_INT 2
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 3
46834: PUSH
46835: LD_INT 3
46837: PUSH
46838: EMPTY
46839: LIST
46840: LIST
46841: PUSH
46842: LD_INT 2
46844: PUSH
46845: LD_INT 3
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 1
46854: PUSH
46855: LD_INT 3
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 0
46864: PUSH
46865: LD_INT 3
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: NEG
46875: PUSH
46876: LD_INT 2
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 3
46885: NEG
46886: PUSH
46887: LD_INT 2
46889: NEG
46890: PUSH
46891: EMPTY
46892: LIST
46893: LIST
46894: PUSH
46895: LD_INT 3
46897: NEG
46898: PUSH
46899: LD_INT 3
46901: NEG
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: LIST
46911: LIST
46912: LIST
46913: LIST
46914: LIST
46915: LIST
46916: LIST
46917: LIST
46918: LIST
46919: LIST
46920: LIST
46921: LIST
46922: LIST
46923: LIST
46924: LIST
46925: LIST
46926: LIST
46927: LIST
46928: LIST
46929: LIST
46930: LIST
46931: LIST
46932: LIST
46933: LIST
46934: LIST
46935: LIST
46936: LIST
46937: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46938: LD_ADDR_VAR 0 46
46942: PUSH
46943: LD_INT 0
46945: PUSH
46946: LD_INT 0
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 1
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: LD_INT 1
46989: PUSH
46990: EMPTY
46991: LIST
46992: LIST
46993: PUSH
46994: LD_INT 1
46996: NEG
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: LD_INT 1
47011: NEG
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: NEG
47020: PUSH
47021: LD_INT 2
47023: NEG
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: LD_INT 2
47034: NEG
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 1
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 2
47053: PUSH
47054: LD_INT 0
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 2
47063: PUSH
47064: LD_INT 1
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: LD_INT 2
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 0
47083: PUSH
47084: LD_INT 2
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: LD_INT 1
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 2
47104: NEG
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 2
47115: NEG
47116: PUSH
47117: LD_INT 1
47119: NEG
47120: PUSH
47121: EMPTY
47122: LIST
47123: LIST
47124: PUSH
47125: LD_INT 1
47127: NEG
47128: PUSH
47129: LD_INT 3
47131: NEG
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: PUSH
47137: LD_INT 0
47139: PUSH
47140: LD_INT 3
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: LD_INT 2
47153: NEG
47154: PUSH
47155: EMPTY
47156: LIST
47157: LIST
47158: PUSH
47159: LD_INT 2
47161: PUSH
47162: LD_INT 1
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 3
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 3
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: PUSH
47193: LD_INT 3
47195: PUSH
47196: EMPTY
47197: LIST
47198: LIST
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: LD_INT 3
47205: PUSH
47206: EMPTY
47207: LIST
47208: LIST
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: LD_INT 2
47216: PUSH
47217: EMPTY
47218: LIST
47219: LIST
47220: PUSH
47221: LD_INT 2
47223: NEG
47224: PUSH
47225: LD_INT 1
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: LD_INT 3
47234: NEG
47235: PUSH
47236: LD_INT 0
47238: PUSH
47239: EMPTY
47240: LIST
47241: LIST
47242: PUSH
47243: LD_INT 3
47245: NEG
47246: PUSH
47247: LD_INT 1
47249: NEG
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: LIST
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47286: LD_ADDR_VAR 0 47
47290: PUSH
47291: LD_INT 0
47293: PUSH
47294: LD_INT 0
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: LD_INT 1
47306: NEG
47307: PUSH
47308: EMPTY
47309: LIST
47310: LIST
47311: PUSH
47312: LD_INT 1
47314: PUSH
47315: LD_INT 0
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 1
47324: PUSH
47325: LD_INT 1
47327: PUSH
47328: EMPTY
47329: LIST
47330: LIST
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: LD_INT 1
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: PUSH
47342: LD_INT 1
47344: NEG
47345: PUSH
47346: LD_INT 0
47348: PUSH
47349: EMPTY
47350: LIST
47351: LIST
47352: PUSH
47353: LD_INT 1
47355: NEG
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 1
47367: NEG
47368: PUSH
47369: LD_INT 2
47371: NEG
47372: PUSH
47373: EMPTY
47374: LIST
47375: LIST
47376: PUSH
47377: LD_INT 0
47379: PUSH
47380: LD_INT 2
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 1
47390: PUSH
47391: LD_INT 1
47393: NEG
47394: PUSH
47395: EMPTY
47396: LIST
47397: LIST
47398: PUSH
47399: LD_INT 2
47401: NEG
47402: PUSH
47403: LD_INT 1
47405: NEG
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 2
47413: NEG
47414: PUSH
47415: LD_INT 2
47417: NEG
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: EMPTY
47424: LIST
47425: LIST
47426: LIST
47427: LIST
47428: LIST
47429: LIST
47430: LIST
47431: LIST
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47437: LD_ADDR_VAR 0 48
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: LD_INT 0
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: LD_INT 1
47457: NEG
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 1
47465: PUSH
47466: LD_INT 0
47468: PUSH
47469: EMPTY
47470: LIST
47471: LIST
47472: PUSH
47473: LD_INT 1
47475: PUSH
47476: LD_INT 1
47478: PUSH
47479: EMPTY
47480: LIST
47481: LIST
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: LD_INT 1
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: EMPTY
47501: LIST
47502: LIST
47503: PUSH
47504: LD_INT 1
47506: NEG
47507: PUSH
47508: LD_INT 1
47510: NEG
47511: PUSH
47512: EMPTY
47513: LIST
47514: LIST
47515: PUSH
47516: LD_INT 1
47518: NEG
47519: PUSH
47520: LD_INT 2
47522: NEG
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: LD_INT 2
47533: NEG
47534: PUSH
47535: EMPTY
47536: LIST
47537: LIST
47538: PUSH
47539: LD_INT 1
47541: PUSH
47542: LD_INT 1
47544: NEG
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 2
47552: PUSH
47553: LD_INT 0
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: LIST
47574: LIST
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47584: LD_ADDR_VAR 0 49
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: LD_INT 0
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: LD_INT 0
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: LD_INT 1
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 0
47632: PUSH
47633: LD_INT 1
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 1
47642: NEG
47643: PUSH
47644: LD_INT 0
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: NEG
47654: PUSH
47655: LD_INT 1
47657: NEG
47658: PUSH
47659: EMPTY
47660: LIST
47661: LIST
47662: PUSH
47663: LD_INT 1
47665: PUSH
47666: LD_INT 1
47668: NEG
47669: PUSH
47670: EMPTY
47671: LIST
47672: LIST
47673: PUSH
47674: LD_INT 2
47676: PUSH
47677: LD_INT 0
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 2
47686: PUSH
47687: LD_INT 1
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 2
47696: PUSH
47697: LD_INT 2
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 1
47706: PUSH
47707: LD_INT 2
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: LIST
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47728: LD_ADDR_VAR 0 50
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: EMPTY
47740: LIST
47741: LIST
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: LD_INT 1
47748: NEG
47749: PUSH
47750: EMPTY
47751: LIST
47752: LIST
47753: PUSH
47754: LD_INT 1
47756: PUSH
47757: LD_INT 0
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: LD_INT 1
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 1
47786: NEG
47787: PUSH
47788: LD_INT 0
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: PUSH
47795: LD_INT 1
47797: NEG
47798: PUSH
47799: LD_INT 1
47801: NEG
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: PUSH
47807: LD_INT 2
47809: PUSH
47810: LD_INT 1
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 2
47819: PUSH
47820: LD_INT 2
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 1
47829: PUSH
47830: LD_INT 2
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PUSH
47837: LD_INT 0
47839: PUSH
47840: LD_INT 2
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: LD_INT 1
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47872: LD_ADDR_VAR 0 51
47876: PUSH
47877: LD_INT 0
47879: PUSH
47880: LD_INT 0
47882: PUSH
47883: EMPTY
47884: LIST
47885: LIST
47886: PUSH
47887: LD_INT 0
47889: PUSH
47890: LD_INT 1
47892: NEG
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 1
47900: PUSH
47901: LD_INT 0
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: PUSH
47911: LD_INT 1
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 0
47920: PUSH
47921: LD_INT 1
47923: PUSH
47924: EMPTY
47925: LIST
47926: LIST
47927: PUSH
47928: LD_INT 1
47930: NEG
47931: PUSH
47932: LD_INT 0
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 1
47945: NEG
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: PUSH
47951: LD_INT 1
47953: PUSH
47954: LD_INT 2
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 0
47963: PUSH
47964: LD_INT 2
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: PUSH
47971: LD_INT 1
47973: NEG
47974: PUSH
47975: LD_INT 1
47977: PUSH
47978: EMPTY
47979: LIST
47980: LIST
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: LD_INT 0
47988: PUSH
47989: EMPTY
47990: LIST
47991: LIST
47992: PUSH
47993: LD_INT 2
47995: NEG
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: EMPTY
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: LIST
48017: LIST
48018: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48019: LD_ADDR_VAR 0 52
48023: PUSH
48024: LD_INT 0
48026: PUSH
48027: LD_INT 0
48029: PUSH
48030: EMPTY
48031: LIST
48032: LIST
48033: PUSH
48034: LD_INT 0
48036: PUSH
48037: LD_INT 1
48039: NEG
48040: PUSH
48041: EMPTY
48042: LIST
48043: LIST
48044: PUSH
48045: LD_INT 1
48047: PUSH
48048: LD_INT 0
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: LD_INT 0
48067: PUSH
48068: LD_INT 1
48070: PUSH
48071: EMPTY
48072: LIST
48073: LIST
48074: PUSH
48075: LD_INT 1
48077: NEG
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 1
48088: NEG
48089: PUSH
48090: LD_INT 1
48092: NEG
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 1
48100: NEG
48101: PUSH
48102: LD_INT 2
48104: NEG
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: LD_INT 1
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 2
48123: NEG
48124: PUSH
48125: LD_INT 0
48127: PUSH
48128: EMPTY
48129: LIST
48130: LIST
48131: PUSH
48132: LD_INT 2
48134: NEG
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 2
48146: NEG
48147: PUSH
48148: LD_INT 2
48150: NEG
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: LIST
48168: LIST
48169: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48170: LD_ADDR_VAR 0 53
48174: PUSH
48175: LD_INT 0
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 0
48187: PUSH
48188: LD_INT 1
48190: NEG
48191: PUSH
48192: EMPTY
48193: LIST
48194: LIST
48195: PUSH
48196: LD_INT 1
48198: PUSH
48199: LD_INT 0
48201: PUSH
48202: EMPTY
48203: LIST
48204: LIST
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: LD_INT 1
48211: PUSH
48212: EMPTY
48213: LIST
48214: LIST
48215: PUSH
48216: LD_INT 0
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 1
48228: NEG
48229: PUSH
48230: LD_INT 0
48232: PUSH
48233: EMPTY
48234: LIST
48235: LIST
48236: PUSH
48237: LD_INT 1
48239: NEG
48240: PUSH
48241: LD_INT 1
48243: NEG
48244: PUSH
48245: EMPTY
48246: LIST
48247: LIST
48248: PUSH
48249: LD_INT 1
48251: NEG
48252: PUSH
48253: LD_INT 2
48255: NEG
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 0
48263: PUSH
48264: LD_INT 2
48266: NEG
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 2
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 2
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 2
48305: PUSH
48306: LD_INT 2
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: LD_INT 2
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: LD_INT 2
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: LD_INT 1
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 2
48346: NEG
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 2
48357: NEG
48358: PUSH
48359: LD_INT 1
48361: NEG
48362: PUSH
48363: EMPTY
48364: LIST
48365: LIST
48366: PUSH
48367: LD_INT 2
48369: NEG
48370: PUSH
48371: LD_INT 2
48373: NEG
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: LIST
48383: LIST
48384: LIST
48385: LIST
48386: LIST
48387: LIST
48388: LIST
48389: LIST
48390: LIST
48391: LIST
48392: LIST
48393: LIST
48394: LIST
48395: LIST
48396: LIST
48397: LIST
48398: LIST
48399: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48400: LD_ADDR_VAR 0 54
48404: PUSH
48405: LD_INT 0
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 0
48417: PUSH
48418: LD_INT 1
48420: NEG
48421: PUSH
48422: EMPTY
48423: LIST
48424: LIST
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: LD_INT 0
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 1
48438: PUSH
48439: LD_INT 1
48441: PUSH
48442: EMPTY
48443: LIST
48444: LIST
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: LD_INT 1
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 1
48458: NEG
48459: PUSH
48460: LD_INT 0
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 1
48469: NEG
48470: PUSH
48471: LD_INT 1
48473: NEG
48474: PUSH
48475: EMPTY
48476: LIST
48477: LIST
48478: PUSH
48479: LD_INT 1
48481: NEG
48482: PUSH
48483: LD_INT 2
48485: NEG
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: LD_INT 2
48496: NEG
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 1
48504: PUSH
48505: LD_INT 1
48507: NEG
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 2
48515: PUSH
48516: LD_INT 0
48518: PUSH
48519: EMPTY
48520: LIST
48521: LIST
48522: PUSH
48523: LD_INT 2
48525: PUSH
48526: LD_INT 1
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 2
48535: PUSH
48536: LD_INT 2
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: PUSH
48546: LD_INT 2
48548: PUSH
48549: EMPTY
48550: LIST
48551: LIST
48552: PUSH
48553: LD_INT 0
48555: PUSH
48556: LD_INT 2
48558: PUSH
48559: EMPTY
48560: LIST
48561: LIST
48562: PUSH
48563: LD_INT 1
48565: NEG
48566: PUSH
48567: LD_INT 1
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 2
48576: NEG
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: EMPTY
48582: LIST
48583: LIST
48584: PUSH
48585: LD_INT 2
48587: NEG
48588: PUSH
48589: LD_INT 1
48591: NEG
48592: PUSH
48593: EMPTY
48594: LIST
48595: LIST
48596: PUSH
48597: LD_INT 2
48599: NEG
48600: PUSH
48601: LD_INT 2
48603: NEG
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: LIST
48613: LIST
48614: LIST
48615: LIST
48616: LIST
48617: LIST
48618: LIST
48619: LIST
48620: LIST
48621: LIST
48622: LIST
48623: LIST
48624: LIST
48625: LIST
48626: LIST
48627: LIST
48628: LIST
48629: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48630: LD_ADDR_VAR 0 55
48634: PUSH
48635: LD_INT 0
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 0
48647: PUSH
48648: LD_INT 1
48650: NEG
48651: PUSH
48652: EMPTY
48653: LIST
48654: LIST
48655: PUSH
48656: LD_INT 1
48658: PUSH
48659: LD_INT 0
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 1
48668: PUSH
48669: LD_INT 1
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 0
48678: PUSH
48679: LD_INT 1
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 1
48688: NEG
48689: PUSH
48690: LD_INT 0
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: LD_INT 1
48699: NEG
48700: PUSH
48701: LD_INT 1
48703: NEG
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PUSH
48709: LD_INT 1
48711: NEG
48712: PUSH
48713: LD_INT 2
48715: NEG
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 0
48723: PUSH
48724: LD_INT 2
48726: NEG
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: PUSH
48735: LD_INT 1
48737: NEG
48738: PUSH
48739: EMPTY
48740: LIST
48741: LIST
48742: PUSH
48743: LD_INT 2
48745: PUSH
48746: LD_INT 0
48748: PUSH
48749: EMPTY
48750: LIST
48751: LIST
48752: PUSH
48753: LD_INT 2
48755: PUSH
48756: LD_INT 1
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: PUSH
48766: LD_INT 2
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: PUSH
48773: LD_INT 1
48775: PUSH
48776: LD_INT 2
48778: PUSH
48779: EMPTY
48780: LIST
48781: LIST
48782: PUSH
48783: LD_INT 0
48785: PUSH
48786: LD_INT 2
48788: PUSH
48789: EMPTY
48790: LIST
48791: LIST
48792: PUSH
48793: LD_INT 1
48795: NEG
48796: PUSH
48797: LD_INT 1
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: NEG
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: EMPTY
48812: LIST
48813: LIST
48814: PUSH
48815: LD_INT 2
48817: NEG
48818: PUSH
48819: LD_INT 1
48821: NEG
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 2
48829: NEG
48830: PUSH
48831: LD_INT 2
48833: NEG
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: LIST
48843: LIST
48844: LIST
48845: LIST
48846: LIST
48847: LIST
48848: LIST
48849: LIST
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: LIST
48855: LIST
48856: LIST
48857: LIST
48858: LIST
48859: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48860: LD_ADDR_VAR 0 56
48864: PUSH
48865: LD_INT 0
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 0
48877: PUSH
48878: LD_INT 1
48880: NEG
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: PUSH
48886: LD_INT 1
48888: PUSH
48889: LD_INT 0
48891: PUSH
48892: EMPTY
48893: LIST
48894: LIST
48895: PUSH
48896: LD_INT 1
48898: PUSH
48899: LD_INT 1
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: LD_INT 1
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 1
48918: NEG
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: NEG
48930: PUSH
48931: LD_INT 1
48933: NEG
48934: PUSH
48935: EMPTY
48936: LIST
48937: LIST
48938: PUSH
48939: LD_INT 1
48941: NEG
48942: PUSH
48943: LD_INT 2
48945: NEG
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: LD_INT 2
48956: NEG
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 1
48964: PUSH
48965: LD_INT 1
48967: NEG
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 2
48975: PUSH
48976: LD_INT 0
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 2
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 2
48995: PUSH
48996: LD_INT 2
48998: PUSH
48999: EMPTY
49000: LIST
49001: LIST
49002: PUSH
49003: LD_INT 1
49005: PUSH
49006: LD_INT 2
49008: PUSH
49009: EMPTY
49010: LIST
49011: LIST
49012: PUSH
49013: LD_INT 0
49015: PUSH
49016: LD_INT 2
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 1
49025: NEG
49026: PUSH
49027: LD_INT 1
49029: PUSH
49030: EMPTY
49031: LIST
49032: LIST
49033: PUSH
49034: LD_INT 2
49036: NEG
49037: PUSH
49038: LD_INT 0
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: LD_INT 2
49047: NEG
49048: PUSH
49049: LD_INT 1
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 2
49059: NEG
49060: PUSH
49061: LD_INT 2
49063: NEG
49064: PUSH
49065: EMPTY
49066: LIST
49067: LIST
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: LIST
49073: LIST
49074: LIST
49075: LIST
49076: LIST
49077: LIST
49078: LIST
49079: LIST
49080: LIST
49081: LIST
49082: LIST
49083: LIST
49084: LIST
49085: LIST
49086: LIST
49087: LIST
49088: LIST
49089: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49090: LD_ADDR_VAR 0 57
49094: PUSH
49095: LD_INT 0
49097: PUSH
49098: LD_INT 0
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: LD_INT 0
49107: PUSH
49108: LD_INT 1
49110: NEG
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: LD_INT 0
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: PUSH
49129: LD_INT 1
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 0
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 1
49148: NEG
49149: PUSH
49150: LD_INT 0
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 1
49171: NEG
49172: PUSH
49173: LD_INT 2
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 0
49183: PUSH
49184: LD_INT 2
49186: NEG
49187: PUSH
49188: EMPTY
49189: LIST
49190: LIST
49191: PUSH
49192: LD_INT 1
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: EMPTY
49200: LIST
49201: LIST
49202: PUSH
49203: LD_INT 2
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: EMPTY
49210: LIST
49211: LIST
49212: PUSH
49213: LD_INT 2
49215: PUSH
49216: LD_INT 1
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: PUSH
49223: LD_INT 2
49225: PUSH
49226: LD_INT 2
49228: PUSH
49229: EMPTY
49230: LIST
49231: LIST
49232: PUSH
49233: LD_INT 1
49235: PUSH
49236: LD_INT 2
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: LD_INT 2
49248: PUSH
49249: EMPTY
49250: LIST
49251: LIST
49252: PUSH
49253: LD_INT 1
49255: NEG
49256: PUSH
49257: LD_INT 1
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 2
49266: NEG
49267: PUSH
49268: LD_INT 0
49270: PUSH
49271: EMPTY
49272: LIST
49273: LIST
49274: PUSH
49275: LD_INT 2
49277: NEG
49278: PUSH
49279: LD_INT 1
49281: NEG
49282: PUSH
49283: EMPTY
49284: LIST
49285: LIST
49286: PUSH
49287: LD_INT 2
49289: NEG
49290: PUSH
49291: LD_INT 2
49293: NEG
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49320: LD_ADDR_VAR 0 58
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: EMPTY
49332: LIST
49333: LIST
49334: PUSH
49335: LD_INT 0
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: EMPTY
49343: LIST
49344: LIST
49345: PUSH
49346: LD_INT 1
49348: PUSH
49349: LD_INT 0
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 1
49358: PUSH
49359: LD_INT 1
49361: PUSH
49362: EMPTY
49363: LIST
49364: LIST
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: LD_INT 1
49371: PUSH
49372: EMPTY
49373: LIST
49374: LIST
49375: PUSH
49376: LD_INT 1
49378: NEG
49379: PUSH
49380: LD_INT 0
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 1
49389: NEG
49390: PUSH
49391: LD_INT 1
49393: NEG
49394: PUSH
49395: EMPTY
49396: LIST
49397: LIST
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: LD_INT 2
49405: NEG
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 0
49413: PUSH
49414: LD_INT 2
49416: NEG
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 1
49424: PUSH
49425: LD_INT 1
49427: NEG
49428: PUSH
49429: EMPTY
49430: LIST
49431: LIST
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: LD_INT 0
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 2
49445: PUSH
49446: LD_INT 1
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 2
49455: PUSH
49456: LD_INT 2
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 1
49465: PUSH
49466: LD_INT 2
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 0
49475: PUSH
49476: LD_INT 2
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 1
49485: NEG
49486: PUSH
49487: LD_INT 1
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 2
49496: NEG
49497: PUSH
49498: LD_INT 0
49500: PUSH
49501: EMPTY
49502: LIST
49503: LIST
49504: PUSH
49505: LD_INT 2
49507: NEG
49508: PUSH
49509: LD_INT 1
49511: NEG
49512: PUSH
49513: EMPTY
49514: LIST
49515: LIST
49516: PUSH
49517: LD_INT 2
49519: NEG
49520: PUSH
49521: LD_INT 2
49523: NEG
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: LIST
49533: LIST
49534: LIST
49535: LIST
49536: LIST
49537: LIST
49538: LIST
49539: LIST
49540: LIST
49541: LIST
49542: LIST
49543: LIST
49544: LIST
49545: LIST
49546: LIST
49547: LIST
49548: LIST
49549: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49550: LD_ADDR_VAR 0 59
49554: PUSH
49555: LD_INT 0
49557: PUSH
49558: LD_INT 0
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 1
49578: PUSH
49579: LD_INT 0
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: LD_INT 1
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 0
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 1
49608: NEG
49609: PUSH
49610: LD_INT 0
49612: PUSH
49613: EMPTY
49614: LIST
49615: LIST
49616: PUSH
49617: LD_INT 1
49619: NEG
49620: PUSH
49621: LD_INT 1
49623: NEG
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49638: LD_ADDR_VAR 0 60
49642: PUSH
49643: LD_INT 0
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: LD_INT 1
49658: NEG
49659: PUSH
49660: EMPTY
49661: LIST
49662: LIST
49663: PUSH
49664: LD_INT 1
49666: PUSH
49667: LD_INT 0
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: LD_INT 1
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 0
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 1
49696: NEG
49697: PUSH
49698: LD_INT 0
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: LD_INT 1
49711: NEG
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: EMPTY
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49726: LD_ADDR_VAR 0 61
49730: PUSH
49731: LD_INT 0
49733: PUSH
49734: LD_INT 0
49736: PUSH
49737: EMPTY
49738: LIST
49739: LIST
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: LD_INT 1
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: LD_INT 1
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 0
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 1
49784: NEG
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 1
49795: NEG
49796: PUSH
49797: LD_INT 1
49799: NEG
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49814: LD_ADDR_VAR 0 62
49818: PUSH
49819: LD_INT 0
49821: PUSH
49822: LD_INT 0
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: LD_INT 1
49834: NEG
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: PUSH
49840: LD_INT 1
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: LD_INT 1
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 0
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: NEG
49873: PUSH
49874: LD_INT 0
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 1
49883: NEG
49884: PUSH
49885: LD_INT 1
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: LIST
49897: LIST
49898: LIST
49899: LIST
49900: LIST
49901: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49902: LD_ADDR_VAR 0 63
49906: PUSH
49907: LD_INT 0
49909: PUSH
49910: LD_INT 0
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: LD_INT 1
49922: NEG
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 1
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 0
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 1
49960: NEG
49961: PUSH
49962: LD_INT 0
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 1
49971: NEG
49972: PUSH
49973: LD_INT 1
49975: NEG
49976: PUSH
49977: EMPTY
49978: LIST
49979: LIST
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: LIST
49985: LIST
49986: LIST
49987: LIST
49988: LIST
49989: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49990: LD_ADDR_VAR 0 64
49994: PUSH
49995: LD_INT 0
49997: PUSH
49998: LD_INT 0
50000: PUSH
50001: EMPTY
50002: LIST
50003: LIST
50004: PUSH
50005: LD_INT 0
50007: PUSH
50008: LD_INT 1
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 1
50018: PUSH
50019: LD_INT 0
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: PUSH
50029: LD_INT 1
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: EMPTY
50043: LIST
50044: LIST
50045: PUSH
50046: LD_INT 1
50048: NEG
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: NEG
50060: PUSH
50061: LD_INT 1
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: LIST
50073: LIST
50074: LIST
50075: LIST
50076: LIST
50077: ST_TO_ADDR
// end ; 1 :
50078: GO 55975
50080: LD_INT 1
50082: DOUBLE
50083: EQUAL
50084: IFTRUE 50088
50086: GO 52711
50088: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50089: LD_ADDR_VAR 0 11
50093: PUSH
50094: LD_INT 1
50096: NEG
50097: PUSH
50098: LD_INT 3
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: LD_INT 0
50108: PUSH
50109: LD_INT 3
50111: NEG
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: PUSH
50117: LD_INT 1
50119: PUSH
50120: LD_INT 2
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: LIST
50132: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50133: LD_ADDR_VAR 0 12
50137: PUSH
50138: LD_INT 2
50140: PUSH
50141: LD_INT 1
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 3
50151: PUSH
50152: LD_INT 0
50154: PUSH
50155: EMPTY
50156: LIST
50157: LIST
50158: PUSH
50159: LD_INT 3
50161: PUSH
50162: LD_INT 1
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: PUSH
50169: EMPTY
50170: LIST
50171: LIST
50172: LIST
50173: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50174: LD_ADDR_VAR 0 13
50178: PUSH
50179: LD_INT 3
50181: PUSH
50182: LD_INT 2
50184: PUSH
50185: EMPTY
50186: LIST
50187: LIST
50188: PUSH
50189: LD_INT 3
50191: PUSH
50192: LD_INT 3
50194: PUSH
50195: EMPTY
50196: LIST
50197: LIST
50198: PUSH
50199: LD_INT 2
50201: PUSH
50202: LD_INT 3
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: LIST
50213: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50214: LD_ADDR_VAR 0 14
50218: PUSH
50219: LD_INT 1
50221: PUSH
50222: LD_INT 3
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: LD_INT 3
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 1
50241: NEG
50242: PUSH
50243: LD_INT 2
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: LIST
50254: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50255: LD_ADDR_VAR 0 15
50259: PUSH
50260: LD_INT 2
50262: NEG
50263: PUSH
50264: LD_INT 1
50266: PUSH
50267: EMPTY
50268: LIST
50269: LIST
50270: PUSH
50271: LD_INT 3
50273: NEG
50274: PUSH
50275: LD_INT 0
50277: PUSH
50278: EMPTY
50279: LIST
50280: LIST
50281: PUSH
50282: LD_INT 3
50284: NEG
50285: PUSH
50286: LD_INT 1
50288: NEG
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: LIST
50298: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50299: LD_ADDR_VAR 0 16
50303: PUSH
50304: LD_INT 2
50306: NEG
50307: PUSH
50308: LD_INT 3
50310: NEG
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 3
50318: NEG
50319: PUSH
50320: LD_INT 2
50322: NEG
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 3
50330: NEG
50331: PUSH
50332: LD_INT 3
50334: NEG
50335: PUSH
50336: EMPTY
50337: LIST
50338: LIST
50339: PUSH
50340: EMPTY
50341: LIST
50342: LIST
50343: LIST
50344: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50345: LD_ADDR_VAR 0 17
50349: PUSH
50350: LD_INT 1
50352: NEG
50353: PUSH
50354: LD_INT 3
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 0
50364: PUSH
50365: LD_INT 3
50367: NEG
50368: PUSH
50369: EMPTY
50370: LIST
50371: LIST
50372: PUSH
50373: LD_INT 1
50375: PUSH
50376: LD_INT 2
50378: NEG
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: LIST
50388: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50389: LD_ADDR_VAR 0 18
50393: PUSH
50394: LD_INT 2
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 3
50407: PUSH
50408: LD_INT 0
50410: PUSH
50411: EMPTY
50412: LIST
50413: LIST
50414: PUSH
50415: LD_INT 3
50417: PUSH
50418: LD_INT 1
50420: PUSH
50421: EMPTY
50422: LIST
50423: LIST
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: LIST
50429: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50430: LD_ADDR_VAR 0 19
50434: PUSH
50435: LD_INT 3
50437: PUSH
50438: LD_INT 2
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 3
50447: PUSH
50448: LD_INT 3
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 2
50457: PUSH
50458: LD_INT 3
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: LIST
50469: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50470: LD_ADDR_VAR 0 20
50474: PUSH
50475: LD_INT 1
50477: PUSH
50478: LD_INT 3
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 0
50487: PUSH
50488: LD_INT 3
50490: PUSH
50491: EMPTY
50492: LIST
50493: LIST
50494: PUSH
50495: LD_INT 1
50497: NEG
50498: PUSH
50499: LD_INT 2
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: LIST
50510: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50511: LD_ADDR_VAR 0 21
50515: PUSH
50516: LD_INT 2
50518: NEG
50519: PUSH
50520: LD_INT 1
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 3
50529: NEG
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: LD_INT 3
50540: NEG
50541: PUSH
50542: LD_INT 1
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: EMPTY
50551: LIST
50552: LIST
50553: LIST
50554: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50555: LD_ADDR_VAR 0 22
50559: PUSH
50560: LD_INT 2
50562: NEG
50563: PUSH
50564: LD_INT 3
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 3
50574: NEG
50575: PUSH
50576: LD_INT 2
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 3
50586: NEG
50587: PUSH
50588: LD_INT 3
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: EMPTY
50597: LIST
50598: LIST
50599: LIST
50600: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50601: LD_ADDR_VAR 0 23
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: LD_INT 3
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: LD_INT 4
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: LD_INT 3
50634: NEG
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: LIST
50644: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50645: LD_ADDR_VAR 0 24
50649: PUSH
50650: LD_INT 3
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 3
50662: PUSH
50663: LD_INT 1
50665: NEG
50666: PUSH
50667: EMPTY
50668: LIST
50669: LIST
50670: PUSH
50671: LD_INT 4
50673: PUSH
50674: LD_INT 1
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: LIST
50685: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50686: LD_ADDR_VAR 0 25
50690: PUSH
50691: LD_INT 3
50693: PUSH
50694: LD_INT 3
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 4
50703: PUSH
50704: LD_INT 3
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 3
50713: PUSH
50714: LD_INT 4
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: LIST
50725: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50726: LD_ADDR_VAR 0 26
50730: PUSH
50731: LD_INT 0
50733: PUSH
50734: LD_INT 3
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 1
50743: PUSH
50744: LD_INT 4
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 1
50753: NEG
50754: PUSH
50755: LD_INT 3
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: EMPTY
50763: LIST
50764: LIST
50765: LIST
50766: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50767: LD_ADDR_VAR 0 27
50771: PUSH
50772: LD_INT 3
50774: NEG
50775: PUSH
50776: LD_INT 0
50778: PUSH
50779: EMPTY
50780: LIST
50781: LIST
50782: PUSH
50783: LD_INT 3
50785: NEG
50786: PUSH
50787: LD_INT 1
50789: PUSH
50790: EMPTY
50791: LIST
50792: LIST
50793: PUSH
50794: LD_INT 4
50796: NEG
50797: PUSH
50798: LD_INT 1
50800: NEG
50801: PUSH
50802: EMPTY
50803: LIST
50804: LIST
50805: PUSH
50806: EMPTY
50807: LIST
50808: LIST
50809: LIST
50810: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50811: LD_ADDR_VAR 0 28
50815: PUSH
50816: LD_INT 3
50818: NEG
50819: PUSH
50820: LD_INT 3
50822: NEG
50823: PUSH
50824: EMPTY
50825: LIST
50826: LIST
50827: PUSH
50828: LD_INT 3
50830: NEG
50831: PUSH
50832: LD_INT 4
50834: NEG
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 4
50842: NEG
50843: PUSH
50844: LD_INT 3
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: LIST
50856: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50857: LD_ADDR_VAR 0 29
50861: PUSH
50862: LD_INT 1
50864: NEG
50865: PUSH
50866: LD_INT 3
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 0
50876: PUSH
50877: LD_INT 3
50879: NEG
50880: PUSH
50881: EMPTY
50882: LIST
50883: LIST
50884: PUSH
50885: LD_INT 1
50887: PUSH
50888: LD_INT 2
50890: NEG
50891: PUSH
50892: EMPTY
50893: LIST
50894: LIST
50895: PUSH
50896: LD_INT 1
50898: NEG
50899: PUSH
50900: LD_INT 4
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 0
50910: PUSH
50911: LD_INT 4
50913: NEG
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 1
50921: PUSH
50922: LD_INT 3
50924: NEG
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: LD_INT 1
50932: NEG
50933: PUSH
50934: LD_INT 5
50936: NEG
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 0
50944: PUSH
50945: LD_INT 5
50947: NEG
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 1
50955: PUSH
50956: LD_INT 4
50958: NEG
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 1
50966: NEG
50967: PUSH
50968: LD_INT 6
50970: NEG
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 0
50978: PUSH
50979: LD_INT 6
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: PUSH
50990: LD_INT 5
50992: NEG
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: PUSH
50998: EMPTY
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
51012: LD_ADDR_VAR 0 30
51016: PUSH
51017: LD_INT 2
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: PUSH
51028: LD_INT 3
51030: PUSH
51031: LD_INT 0
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 3
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 3
51050: PUSH
51051: LD_INT 1
51053: NEG
51054: PUSH
51055: EMPTY
51056: LIST
51057: LIST
51058: PUSH
51059: LD_INT 4
51061: PUSH
51062: LD_INT 0
51064: PUSH
51065: EMPTY
51066: LIST
51067: LIST
51068: PUSH
51069: LD_INT 4
51071: PUSH
51072: LD_INT 1
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: PUSH
51079: LD_INT 4
51081: PUSH
51082: LD_INT 1
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 5
51092: PUSH
51093: LD_INT 0
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 5
51102: PUSH
51103: LD_INT 1
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 5
51112: PUSH
51113: LD_INT 1
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: LD_INT 6
51123: PUSH
51124: LD_INT 0
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 6
51133: PUSH
51134: LD_INT 1
51136: PUSH
51137: EMPTY
51138: LIST
51139: LIST
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: LIST
51145: LIST
51146: LIST
51147: LIST
51148: LIST
51149: LIST
51150: LIST
51151: LIST
51152: LIST
51153: LIST
51154: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51155: LD_ADDR_VAR 0 31
51159: PUSH
51160: LD_INT 3
51162: PUSH
51163: LD_INT 2
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: PUSH
51170: LD_INT 3
51172: PUSH
51173: LD_INT 3
51175: PUSH
51176: EMPTY
51177: LIST
51178: LIST
51179: PUSH
51180: LD_INT 2
51182: PUSH
51183: LD_INT 3
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 4
51192: PUSH
51193: LD_INT 3
51195: PUSH
51196: EMPTY
51197: LIST
51198: LIST
51199: PUSH
51200: LD_INT 4
51202: PUSH
51203: LD_INT 4
51205: PUSH
51206: EMPTY
51207: LIST
51208: LIST
51209: PUSH
51210: LD_INT 3
51212: PUSH
51213: LD_INT 4
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 5
51222: PUSH
51223: LD_INT 4
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 5
51232: PUSH
51233: LD_INT 5
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 4
51242: PUSH
51243: LD_INT 5
51245: PUSH
51246: EMPTY
51247: LIST
51248: LIST
51249: PUSH
51250: LD_INT 6
51252: PUSH
51253: LD_INT 5
51255: PUSH
51256: EMPTY
51257: LIST
51258: LIST
51259: PUSH
51260: LD_INT 6
51262: PUSH
51263: LD_INT 6
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 5
51272: PUSH
51273: LD_INT 6
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51294: LD_ADDR_VAR 0 32
51298: PUSH
51299: LD_INT 1
51301: PUSH
51302: LD_INT 3
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: LD_INT 3
51314: PUSH
51315: EMPTY
51316: LIST
51317: LIST
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: LD_INT 2
51325: PUSH
51326: EMPTY
51327: LIST
51328: LIST
51329: PUSH
51330: LD_INT 1
51332: PUSH
51333: LD_INT 4
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 0
51342: PUSH
51343: LD_INT 4
51345: PUSH
51346: EMPTY
51347: LIST
51348: LIST
51349: PUSH
51350: LD_INT 1
51352: NEG
51353: PUSH
51354: LD_INT 3
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 1
51363: PUSH
51364: LD_INT 5
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 0
51373: PUSH
51374: LD_INT 5
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 1
51383: NEG
51384: PUSH
51385: LD_INT 4
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: LD_INT 6
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 0
51404: PUSH
51405: LD_INT 6
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 1
51414: NEG
51415: PUSH
51416: LD_INT 5
51418: PUSH
51419: EMPTY
51420: LIST
51421: LIST
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: LIST
51427: LIST
51428: LIST
51429: LIST
51430: LIST
51431: LIST
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51437: LD_ADDR_VAR 0 33
51441: PUSH
51442: LD_INT 2
51444: NEG
51445: PUSH
51446: LD_INT 1
51448: PUSH
51449: EMPTY
51450: LIST
51451: LIST
51452: PUSH
51453: LD_INT 3
51455: NEG
51456: PUSH
51457: LD_INT 0
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 3
51466: NEG
51467: PUSH
51468: LD_INT 1
51470: NEG
51471: PUSH
51472: EMPTY
51473: LIST
51474: LIST
51475: PUSH
51476: LD_INT 3
51478: NEG
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 4
51489: NEG
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 4
51500: NEG
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 4
51512: NEG
51513: PUSH
51514: LD_INT 1
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: PUSH
51521: LD_INT 5
51523: NEG
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 5
51534: NEG
51535: PUSH
51536: LD_INT 1
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 5
51546: NEG
51547: PUSH
51548: LD_INT 1
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 6
51557: NEG
51558: PUSH
51559: LD_INT 0
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 6
51568: NEG
51569: PUSH
51570: LD_INT 1
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: EMPTY
51579: LIST
51580: LIST
51581: LIST
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: LIST
51589: LIST
51590: LIST
51591: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51592: LD_ADDR_VAR 0 34
51596: PUSH
51597: LD_INT 2
51599: NEG
51600: PUSH
51601: LD_INT 3
51603: NEG
51604: PUSH
51605: EMPTY
51606: LIST
51607: LIST
51608: PUSH
51609: LD_INT 3
51611: NEG
51612: PUSH
51613: LD_INT 2
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 3
51623: NEG
51624: PUSH
51625: LD_INT 3
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 3
51635: NEG
51636: PUSH
51637: LD_INT 4
51639: NEG
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: PUSH
51645: LD_INT 4
51647: NEG
51648: PUSH
51649: LD_INT 3
51651: NEG
51652: PUSH
51653: EMPTY
51654: LIST
51655: LIST
51656: PUSH
51657: LD_INT 4
51659: NEG
51660: PUSH
51661: LD_INT 4
51663: NEG
51664: PUSH
51665: EMPTY
51666: LIST
51667: LIST
51668: PUSH
51669: LD_INT 4
51671: NEG
51672: PUSH
51673: LD_INT 5
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 5
51683: NEG
51684: PUSH
51685: LD_INT 4
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 5
51695: NEG
51696: PUSH
51697: LD_INT 5
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 5
51707: NEG
51708: PUSH
51709: LD_INT 6
51711: NEG
51712: PUSH
51713: EMPTY
51714: LIST
51715: LIST
51716: PUSH
51717: LD_INT 6
51719: NEG
51720: PUSH
51721: LD_INT 5
51723: NEG
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: LD_INT 6
51731: NEG
51732: PUSH
51733: LD_INT 6
51735: NEG
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51755: LD_ADDR_VAR 0 41
51759: PUSH
51760: LD_INT 0
51762: PUSH
51763: LD_INT 2
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 1
51773: NEG
51774: PUSH
51775: LD_INT 3
51777: NEG
51778: PUSH
51779: EMPTY
51780: LIST
51781: LIST
51782: PUSH
51783: LD_INT 1
51785: PUSH
51786: LD_INT 2
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: LIST
51798: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51799: LD_ADDR_VAR 0 42
51803: PUSH
51804: LD_INT 2
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: EMPTY
51811: LIST
51812: LIST
51813: PUSH
51814: LD_INT 2
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: PUSH
51825: LD_INT 3
51827: PUSH
51828: LD_INT 1
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: PUSH
51835: EMPTY
51836: LIST
51837: LIST
51838: LIST
51839: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51840: LD_ADDR_VAR 0 43
51844: PUSH
51845: LD_INT 2
51847: PUSH
51848: LD_INT 2
51850: PUSH
51851: EMPTY
51852: LIST
51853: LIST
51854: PUSH
51855: LD_INT 3
51857: PUSH
51858: LD_INT 2
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: PUSH
51865: LD_INT 2
51867: PUSH
51868: LD_INT 3
51870: PUSH
51871: EMPTY
51872: LIST
51873: LIST
51874: PUSH
51875: EMPTY
51876: LIST
51877: LIST
51878: LIST
51879: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51880: LD_ADDR_VAR 0 44
51884: PUSH
51885: LD_INT 0
51887: PUSH
51888: LD_INT 2
51890: PUSH
51891: EMPTY
51892: LIST
51893: LIST
51894: PUSH
51895: LD_INT 1
51897: PUSH
51898: LD_INT 3
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 1
51907: NEG
51908: PUSH
51909: LD_INT 2
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: LIST
51920: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51921: LD_ADDR_VAR 0 45
51925: PUSH
51926: LD_INT 2
51928: NEG
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 2
51939: NEG
51940: PUSH
51941: LD_INT 1
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 3
51950: NEG
51951: PUSH
51952: LD_INT 1
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: EMPTY
51961: LIST
51962: LIST
51963: LIST
51964: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51965: LD_ADDR_VAR 0 46
51969: PUSH
51970: LD_INT 2
51972: NEG
51973: PUSH
51974: LD_INT 2
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 2
51984: NEG
51985: PUSH
51986: LD_INT 3
51988: NEG
51989: PUSH
51990: EMPTY
51991: LIST
51992: LIST
51993: PUSH
51994: LD_INT 3
51996: NEG
51997: PUSH
51998: LD_INT 2
52000: NEG
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: LIST
52010: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
52011: LD_ADDR_VAR 0 47
52015: PUSH
52016: LD_INT 2
52018: NEG
52019: PUSH
52020: LD_INT 3
52022: NEG
52023: PUSH
52024: EMPTY
52025: LIST
52026: LIST
52027: PUSH
52028: LD_INT 1
52030: NEG
52031: PUSH
52032: LD_INT 3
52034: NEG
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
52044: LD_ADDR_VAR 0 48
52048: PUSH
52049: LD_INT 1
52051: PUSH
52052: LD_INT 2
52054: NEG
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 2
52062: PUSH
52063: LD_INT 1
52065: NEG
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
52075: LD_ADDR_VAR 0 49
52079: PUSH
52080: LD_INT 3
52082: PUSH
52083: LD_INT 1
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 3
52092: PUSH
52093: LD_INT 2
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52104: LD_ADDR_VAR 0 50
52108: PUSH
52109: LD_INT 2
52111: PUSH
52112: LD_INT 3
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PUSH
52119: LD_INT 1
52121: PUSH
52122: LD_INT 3
52124: PUSH
52125: EMPTY
52126: LIST
52127: LIST
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52133: LD_ADDR_VAR 0 51
52137: PUSH
52138: LD_INT 1
52140: NEG
52141: PUSH
52142: LD_INT 2
52144: PUSH
52145: EMPTY
52146: LIST
52147: LIST
52148: PUSH
52149: LD_INT 2
52151: NEG
52152: PUSH
52153: LD_INT 1
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52164: LD_ADDR_VAR 0 52
52168: PUSH
52169: LD_INT 3
52171: NEG
52172: PUSH
52173: LD_INT 1
52175: NEG
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 3
52183: NEG
52184: PUSH
52185: LD_INT 2
52187: NEG
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: EMPTY
52194: LIST
52195: LIST
52196: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52197: LD_ADDR_VAR 0 53
52201: PUSH
52202: LD_INT 1
52204: NEG
52205: PUSH
52206: LD_INT 3
52208: NEG
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 0
52216: PUSH
52217: LD_INT 3
52219: NEG
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 1
52227: PUSH
52228: LD_INT 2
52230: NEG
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: EMPTY
52237: LIST
52238: LIST
52239: LIST
52240: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52241: LD_ADDR_VAR 0 54
52245: PUSH
52246: LD_INT 2
52248: PUSH
52249: LD_INT 1
52251: NEG
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 3
52259: PUSH
52260: LD_INT 0
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 3
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: LIST
52281: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52282: LD_ADDR_VAR 0 55
52286: PUSH
52287: LD_INT 3
52289: PUSH
52290: LD_INT 2
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 3
52299: PUSH
52300: LD_INT 3
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 2
52309: PUSH
52310: LD_INT 3
52312: PUSH
52313: EMPTY
52314: LIST
52315: LIST
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: LIST
52321: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52322: LD_ADDR_VAR 0 56
52326: PUSH
52327: LD_INT 1
52329: PUSH
52330: LD_INT 3
52332: PUSH
52333: EMPTY
52334: LIST
52335: LIST
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: LD_INT 3
52342: PUSH
52343: EMPTY
52344: LIST
52345: LIST
52346: PUSH
52347: LD_INT 1
52349: NEG
52350: PUSH
52351: LD_INT 2
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: LIST
52362: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52363: LD_ADDR_VAR 0 57
52367: PUSH
52368: LD_INT 2
52370: NEG
52371: PUSH
52372: LD_INT 1
52374: PUSH
52375: EMPTY
52376: LIST
52377: LIST
52378: PUSH
52379: LD_INT 3
52381: NEG
52382: PUSH
52383: LD_INT 0
52385: PUSH
52386: EMPTY
52387: LIST
52388: LIST
52389: PUSH
52390: LD_INT 3
52392: NEG
52393: PUSH
52394: LD_INT 1
52396: NEG
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: LIST
52406: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52407: LD_ADDR_VAR 0 58
52411: PUSH
52412: LD_INT 2
52414: NEG
52415: PUSH
52416: LD_INT 3
52418: NEG
52419: PUSH
52420: EMPTY
52421: LIST
52422: LIST
52423: PUSH
52424: LD_INT 3
52426: NEG
52427: PUSH
52428: LD_INT 2
52430: NEG
52431: PUSH
52432: EMPTY
52433: LIST
52434: LIST
52435: PUSH
52436: LD_INT 3
52438: NEG
52439: PUSH
52440: LD_INT 3
52442: NEG
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: LIST
52452: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52453: LD_ADDR_VAR 0 59
52457: PUSH
52458: LD_INT 1
52460: NEG
52461: PUSH
52462: LD_INT 2
52464: NEG
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: LD_INT 0
52472: PUSH
52473: LD_INT 2
52475: NEG
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: LD_INT 1
52486: NEG
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: PUSH
52492: EMPTY
52493: LIST
52494: LIST
52495: LIST
52496: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52497: LD_ADDR_VAR 0 60
52501: PUSH
52502: LD_INT 1
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: EMPTY
52510: LIST
52511: LIST
52512: PUSH
52513: LD_INT 2
52515: PUSH
52516: LD_INT 0
52518: PUSH
52519: EMPTY
52520: LIST
52521: LIST
52522: PUSH
52523: LD_INT 2
52525: PUSH
52526: LD_INT 1
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: EMPTY
52534: LIST
52535: LIST
52536: LIST
52537: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52538: LD_ADDR_VAR 0 61
52542: PUSH
52543: LD_INT 2
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: EMPTY
52550: LIST
52551: LIST
52552: PUSH
52553: LD_INT 2
52555: PUSH
52556: LD_INT 2
52558: PUSH
52559: EMPTY
52560: LIST
52561: LIST
52562: PUSH
52563: LD_INT 1
52565: PUSH
52566: LD_INT 2
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: LIST
52577: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52578: LD_ADDR_VAR 0 62
52582: PUSH
52583: LD_INT 1
52585: PUSH
52586: LD_INT 2
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 0
52595: PUSH
52596: LD_INT 2
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 1
52605: NEG
52606: PUSH
52607: LD_INT 1
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: LIST
52618: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52619: LD_ADDR_VAR 0 63
52623: PUSH
52624: LD_INT 1
52626: NEG
52627: PUSH
52628: LD_INT 1
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 2
52637: NEG
52638: PUSH
52639: LD_INT 0
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 2
52648: NEG
52649: PUSH
52650: LD_INT 1
52652: NEG
52653: PUSH
52654: EMPTY
52655: LIST
52656: LIST
52657: PUSH
52658: EMPTY
52659: LIST
52660: LIST
52661: LIST
52662: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52663: LD_ADDR_VAR 0 64
52667: PUSH
52668: LD_INT 1
52670: NEG
52671: PUSH
52672: LD_INT 2
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 2
52682: NEG
52683: PUSH
52684: LD_INT 1
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 2
52694: NEG
52695: PUSH
52696: LD_INT 2
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: LIST
52708: ST_TO_ADDR
// end ; 2 :
52709: GO 55975
52711: LD_INT 2
52713: DOUBLE
52714: EQUAL
52715: IFTRUE 52719
52717: GO 55974
52719: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52720: LD_ADDR_VAR 0 29
52724: PUSH
52725: LD_INT 4
52727: PUSH
52728: LD_INT 0
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 4
52737: PUSH
52738: LD_INT 1
52740: NEG
52741: PUSH
52742: EMPTY
52743: LIST
52744: LIST
52745: PUSH
52746: LD_INT 5
52748: PUSH
52749: LD_INT 0
52751: PUSH
52752: EMPTY
52753: LIST
52754: LIST
52755: PUSH
52756: LD_INT 5
52758: PUSH
52759: LD_INT 1
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 4
52768: PUSH
52769: LD_INT 1
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 3
52778: PUSH
52779: LD_INT 0
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 3
52788: PUSH
52789: LD_INT 1
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 3
52799: PUSH
52800: LD_INT 2
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 5
52810: PUSH
52811: LD_INT 2
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 3
52820: PUSH
52821: LD_INT 3
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 3
52830: PUSH
52831: LD_INT 2
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 4
52840: PUSH
52841: LD_INT 3
52843: PUSH
52844: EMPTY
52845: LIST
52846: LIST
52847: PUSH
52848: LD_INT 4
52850: PUSH
52851: LD_INT 4
52853: PUSH
52854: EMPTY
52855: LIST
52856: LIST
52857: PUSH
52858: LD_INT 3
52860: PUSH
52861: LD_INT 4
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PUSH
52868: LD_INT 2
52870: PUSH
52871: LD_INT 3
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 2
52880: PUSH
52881: LD_INT 2
52883: PUSH
52884: EMPTY
52885: LIST
52886: LIST
52887: PUSH
52888: LD_INT 4
52890: PUSH
52891: LD_INT 2
52893: PUSH
52894: EMPTY
52895: LIST
52896: LIST
52897: PUSH
52898: LD_INT 2
52900: PUSH
52901: LD_INT 4
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: LD_INT 0
52910: PUSH
52911: LD_INT 4
52913: PUSH
52914: EMPTY
52915: LIST
52916: LIST
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: LD_INT 3
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 1
52930: PUSH
52931: LD_INT 4
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: LD_INT 5
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 0
52950: PUSH
52951: LD_INT 5
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: LD_INT 4
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: LD_INT 3
52975: PUSH
52976: EMPTY
52977: LIST
52978: LIST
52979: PUSH
52980: LD_INT 2
52982: PUSH
52983: LD_INT 5
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 2
52992: NEG
52993: PUSH
52994: LD_INT 3
52996: PUSH
52997: EMPTY
52998: LIST
52999: LIST
53000: PUSH
53001: LD_INT 3
53003: NEG
53004: PUSH
53005: LD_INT 0
53007: PUSH
53008: EMPTY
53009: LIST
53010: LIST
53011: PUSH
53012: LD_INT 3
53014: NEG
53015: PUSH
53016: LD_INT 1
53018: NEG
53019: PUSH
53020: EMPTY
53021: LIST
53022: LIST
53023: PUSH
53024: LD_INT 2
53026: NEG
53027: PUSH
53028: LD_INT 0
53030: PUSH
53031: EMPTY
53032: LIST
53033: LIST
53034: PUSH
53035: LD_INT 2
53037: NEG
53038: PUSH
53039: LD_INT 1
53041: PUSH
53042: EMPTY
53043: LIST
53044: LIST
53045: PUSH
53046: LD_INT 3
53048: NEG
53049: PUSH
53050: LD_INT 1
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: PUSH
53057: LD_INT 4
53059: NEG
53060: PUSH
53061: LD_INT 0
53063: PUSH
53064: EMPTY
53065: LIST
53066: LIST
53067: PUSH
53068: LD_INT 4
53070: NEG
53071: PUSH
53072: LD_INT 1
53074: NEG
53075: PUSH
53076: EMPTY
53077: LIST
53078: LIST
53079: PUSH
53080: LD_INT 4
53082: NEG
53083: PUSH
53084: LD_INT 2
53086: NEG
53087: PUSH
53088: EMPTY
53089: LIST
53090: LIST
53091: PUSH
53092: LD_INT 2
53094: NEG
53095: PUSH
53096: LD_INT 2
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 4
53105: NEG
53106: PUSH
53107: LD_INT 4
53109: NEG
53110: PUSH
53111: EMPTY
53112: LIST
53113: LIST
53114: PUSH
53115: LD_INT 4
53117: NEG
53118: PUSH
53119: LD_INT 5
53121: NEG
53122: PUSH
53123: EMPTY
53124: LIST
53125: LIST
53126: PUSH
53127: LD_INT 3
53129: NEG
53130: PUSH
53131: LD_INT 4
53133: NEG
53134: PUSH
53135: EMPTY
53136: LIST
53137: LIST
53138: PUSH
53139: LD_INT 3
53141: NEG
53142: PUSH
53143: LD_INT 3
53145: NEG
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: LD_INT 4
53153: NEG
53154: PUSH
53155: LD_INT 3
53157: NEG
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: PUSH
53163: LD_INT 5
53165: NEG
53166: PUSH
53167: LD_INT 4
53169: NEG
53170: PUSH
53171: EMPTY
53172: LIST
53173: LIST
53174: PUSH
53175: LD_INT 5
53177: NEG
53178: PUSH
53179: LD_INT 5
53181: NEG
53182: PUSH
53183: EMPTY
53184: LIST
53185: LIST
53186: PUSH
53187: LD_INT 3
53189: NEG
53190: PUSH
53191: LD_INT 5
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 5
53201: NEG
53202: PUSH
53203: LD_INT 3
53205: NEG
53206: PUSH
53207: EMPTY
53208: LIST
53209: LIST
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: LIST
53215: LIST
53216: LIST
53217: LIST
53218: LIST
53219: LIST
53220: LIST
53221: LIST
53222: LIST
53223: LIST
53224: LIST
53225: LIST
53226: LIST
53227: LIST
53228: LIST
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: LIST
53236: LIST
53237: LIST
53238: LIST
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53258: LD_ADDR_VAR 0 30
53262: PUSH
53263: LD_INT 4
53265: PUSH
53266: LD_INT 4
53268: PUSH
53269: EMPTY
53270: LIST
53271: LIST
53272: PUSH
53273: LD_INT 4
53275: PUSH
53276: LD_INT 3
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 5
53285: PUSH
53286: LD_INT 4
53288: PUSH
53289: EMPTY
53290: LIST
53291: LIST
53292: PUSH
53293: LD_INT 5
53295: PUSH
53296: LD_INT 5
53298: PUSH
53299: EMPTY
53300: LIST
53301: LIST
53302: PUSH
53303: LD_INT 4
53305: PUSH
53306: LD_INT 5
53308: PUSH
53309: EMPTY
53310: LIST
53311: LIST
53312: PUSH
53313: LD_INT 3
53315: PUSH
53316: LD_INT 4
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 3
53325: PUSH
53326: LD_INT 3
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 5
53335: PUSH
53336: LD_INT 3
53338: PUSH
53339: EMPTY
53340: LIST
53341: LIST
53342: PUSH
53343: LD_INT 3
53345: PUSH
53346: LD_INT 5
53348: PUSH
53349: EMPTY
53350: LIST
53351: LIST
53352: PUSH
53353: LD_INT 0
53355: PUSH
53356: LD_INT 3
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: PUSH
53363: LD_INT 0
53365: PUSH
53366: LD_INT 2
53368: PUSH
53369: EMPTY
53370: LIST
53371: LIST
53372: PUSH
53373: LD_INT 1
53375: PUSH
53376: LD_INT 3
53378: PUSH
53379: EMPTY
53380: LIST
53381: LIST
53382: PUSH
53383: LD_INT 1
53385: PUSH
53386: LD_INT 4
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 0
53395: PUSH
53396: LD_INT 4
53398: PUSH
53399: EMPTY
53400: LIST
53401: LIST
53402: PUSH
53403: LD_INT 1
53405: NEG
53406: PUSH
53407: LD_INT 3
53409: PUSH
53410: EMPTY
53411: LIST
53412: LIST
53413: PUSH
53414: LD_INT 1
53416: NEG
53417: PUSH
53418: LD_INT 2
53420: PUSH
53421: EMPTY
53422: LIST
53423: LIST
53424: PUSH
53425: LD_INT 2
53427: PUSH
53428: LD_INT 4
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 2
53437: NEG
53438: PUSH
53439: LD_INT 2
53441: PUSH
53442: EMPTY
53443: LIST
53444: LIST
53445: PUSH
53446: LD_INT 4
53448: NEG
53449: PUSH
53450: LD_INT 0
53452: PUSH
53453: EMPTY
53454: LIST
53455: LIST
53456: PUSH
53457: LD_INT 4
53459: NEG
53460: PUSH
53461: LD_INT 1
53463: NEG
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: LD_INT 3
53471: NEG
53472: PUSH
53473: LD_INT 0
53475: PUSH
53476: EMPTY
53477: LIST
53478: LIST
53479: PUSH
53480: LD_INT 3
53482: NEG
53483: PUSH
53484: LD_INT 1
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 4
53493: NEG
53494: PUSH
53495: LD_INT 1
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 5
53504: NEG
53505: PUSH
53506: LD_INT 0
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 5
53515: NEG
53516: PUSH
53517: LD_INT 1
53519: NEG
53520: PUSH
53521: EMPTY
53522: LIST
53523: LIST
53524: PUSH
53525: LD_INT 5
53527: NEG
53528: PUSH
53529: LD_INT 2
53531: NEG
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: PUSH
53537: LD_INT 3
53539: NEG
53540: PUSH
53541: LD_INT 2
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PUSH
53548: LD_INT 3
53550: NEG
53551: PUSH
53552: LD_INT 3
53554: NEG
53555: PUSH
53556: EMPTY
53557: LIST
53558: LIST
53559: PUSH
53560: LD_INT 3
53562: NEG
53563: PUSH
53564: LD_INT 4
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 2
53574: NEG
53575: PUSH
53576: LD_INT 3
53578: NEG
53579: PUSH
53580: EMPTY
53581: LIST
53582: LIST
53583: PUSH
53584: LD_INT 2
53586: NEG
53587: PUSH
53588: LD_INT 2
53590: NEG
53591: PUSH
53592: EMPTY
53593: LIST
53594: LIST
53595: PUSH
53596: LD_INT 3
53598: NEG
53599: PUSH
53600: LD_INT 2
53602: NEG
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: PUSH
53608: LD_INT 4
53610: NEG
53611: PUSH
53612: LD_INT 3
53614: NEG
53615: PUSH
53616: EMPTY
53617: LIST
53618: LIST
53619: PUSH
53620: LD_INT 4
53622: NEG
53623: PUSH
53624: LD_INT 4
53626: NEG
53627: PUSH
53628: EMPTY
53629: LIST
53630: LIST
53631: PUSH
53632: LD_INT 2
53634: NEG
53635: PUSH
53636: LD_INT 4
53638: NEG
53639: PUSH
53640: EMPTY
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 4
53646: NEG
53647: PUSH
53648: LD_INT 2
53650: NEG
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: LD_INT 0
53658: PUSH
53659: LD_INT 4
53661: NEG
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: PUSH
53667: LD_INT 0
53669: PUSH
53670: LD_INT 5
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 1
53680: PUSH
53681: LD_INT 4
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 1
53691: PUSH
53692: LD_INT 3
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 0
53702: PUSH
53703: LD_INT 3
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: NEG
53714: PUSH
53715: LD_INT 4
53717: NEG
53718: PUSH
53719: EMPTY
53720: LIST
53721: LIST
53722: PUSH
53723: LD_INT 1
53725: NEG
53726: PUSH
53727: LD_INT 5
53729: NEG
53730: PUSH
53731: EMPTY
53732: LIST
53733: LIST
53734: PUSH
53735: LD_INT 2
53737: PUSH
53738: LD_INT 3
53740: NEG
53741: PUSH
53742: EMPTY
53743: LIST
53744: LIST
53745: PUSH
53746: LD_INT 2
53748: NEG
53749: PUSH
53750: LD_INT 5
53752: NEG
53753: PUSH
53754: EMPTY
53755: LIST
53756: LIST
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: LIST
53762: LIST
53763: LIST
53764: LIST
53765: LIST
53766: LIST
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: LIST
53772: LIST
53773: LIST
53774: LIST
53775: LIST
53776: LIST
53777: LIST
53778: LIST
53779: LIST
53780: LIST
53781: LIST
53782: LIST
53783: LIST
53784: LIST
53785: LIST
53786: LIST
53787: LIST
53788: LIST
53789: LIST
53790: LIST
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53805: LD_ADDR_VAR 0 31
53809: PUSH
53810: LD_INT 0
53812: PUSH
53813: LD_INT 4
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 0
53822: PUSH
53823: LD_INT 3
53825: PUSH
53826: EMPTY
53827: LIST
53828: LIST
53829: PUSH
53830: LD_INT 1
53832: PUSH
53833: LD_INT 4
53835: PUSH
53836: EMPTY
53837: LIST
53838: LIST
53839: PUSH
53840: LD_INT 1
53842: PUSH
53843: LD_INT 5
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 0
53852: PUSH
53853: LD_INT 5
53855: PUSH
53856: EMPTY
53857: LIST
53858: LIST
53859: PUSH
53860: LD_INT 1
53862: NEG
53863: PUSH
53864: LD_INT 4
53866: PUSH
53867: EMPTY
53868: LIST
53869: LIST
53870: PUSH
53871: LD_INT 1
53873: NEG
53874: PUSH
53875: LD_INT 3
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 2
53884: PUSH
53885: LD_INT 5
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 2
53894: NEG
53895: PUSH
53896: LD_INT 3
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 3
53905: NEG
53906: PUSH
53907: LD_INT 0
53909: PUSH
53910: EMPTY
53911: LIST
53912: LIST
53913: PUSH
53914: LD_INT 3
53916: NEG
53917: PUSH
53918: LD_INT 1
53920: NEG
53921: PUSH
53922: EMPTY
53923: LIST
53924: LIST
53925: PUSH
53926: LD_INT 2
53928: NEG
53929: PUSH
53930: LD_INT 0
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: PUSH
53937: LD_INT 2
53939: NEG
53940: PUSH
53941: LD_INT 1
53943: PUSH
53944: EMPTY
53945: LIST
53946: LIST
53947: PUSH
53948: LD_INT 3
53950: NEG
53951: PUSH
53952: LD_INT 1
53954: PUSH
53955: EMPTY
53956: LIST
53957: LIST
53958: PUSH
53959: LD_INT 4
53961: NEG
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 4
53972: NEG
53973: PUSH
53974: LD_INT 1
53976: NEG
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_INT 4
53984: NEG
53985: PUSH
53986: LD_INT 2
53988: NEG
53989: PUSH
53990: EMPTY
53991: LIST
53992: LIST
53993: PUSH
53994: LD_INT 2
53996: NEG
53997: PUSH
53998: LD_INT 2
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: PUSH
54005: LD_INT 4
54007: NEG
54008: PUSH
54009: LD_INT 4
54011: NEG
54012: PUSH
54013: EMPTY
54014: LIST
54015: LIST
54016: PUSH
54017: LD_INT 4
54019: NEG
54020: PUSH
54021: LD_INT 5
54023: NEG
54024: PUSH
54025: EMPTY
54026: LIST
54027: LIST
54028: PUSH
54029: LD_INT 3
54031: NEG
54032: PUSH
54033: LD_INT 4
54035: NEG
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 3
54043: NEG
54044: PUSH
54045: LD_INT 3
54047: NEG
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 4
54055: NEG
54056: PUSH
54057: LD_INT 3
54059: NEG
54060: PUSH
54061: EMPTY
54062: LIST
54063: LIST
54064: PUSH
54065: LD_INT 5
54067: NEG
54068: PUSH
54069: LD_INT 4
54071: NEG
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PUSH
54077: LD_INT 5
54079: NEG
54080: PUSH
54081: LD_INT 5
54083: NEG
54084: PUSH
54085: EMPTY
54086: LIST
54087: LIST
54088: PUSH
54089: LD_INT 3
54091: NEG
54092: PUSH
54093: LD_INT 5
54095: NEG
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 5
54103: NEG
54104: PUSH
54105: LD_INT 3
54107: NEG
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: LD_INT 0
54115: PUSH
54116: LD_INT 3
54118: NEG
54119: PUSH
54120: EMPTY
54121: LIST
54122: LIST
54123: PUSH
54124: LD_INT 0
54126: PUSH
54127: LD_INT 4
54129: NEG
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: PUSH
54135: LD_INT 1
54137: PUSH
54138: LD_INT 3
54140: NEG
54141: PUSH
54142: EMPTY
54143: LIST
54144: LIST
54145: PUSH
54146: LD_INT 1
54148: PUSH
54149: LD_INT 2
54151: NEG
54152: PUSH
54153: EMPTY
54154: LIST
54155: LIST
54156: PUSH
54157: LD_INT 0
54159: PUSH
54160: LD_INT 2
54162: NEG
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 1
54170: NEG
54171: PUSH
54172: LD_INT 3
54174: NEG
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: PUSH
54180: LD_INT 1
54182: NEG
54183: PUSH
54184: LD_INT 4
54186: NEG
54187: PUSH
54188: EMPTY
54189: LIST
54190: LIST
54191: PUSH
54192: LD_INT 2
54194: PUSH
54195: LD_INT 2
54197: NEG
54198: PUSH
54199: EMPTY
54200: LIST
54201: LIST
54202: PUSH
54203: LD_INT 2
54205: NEG
54206: PUSH
54207: LD_INT 4
54209: NEG
54210: PUSH
54211: EMPTY
54212: LIST
54213: LIST
54214: PUSH
54215: LD_INT 4
54217: PUSH
54218: LD_INT 0
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 4
54227: PUSH
54228: LD_INT 1
54230: NEG
54231: PUSH
54232: EMPTY
54233: LIST
54234: LIST
54235: PUSH
54236: LD_INT 5
54238: PUSH
54239: LD_INT 0
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 5
54248: PUSH
54249: LD_INT 1
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 4
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 3
54268: PUSH
54269: LD_INT 0
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 3
54278: PUSH
54279: LD_INT 1
54281: NEG
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: PUSH
54287: LD_INT 3
54289: PUSH
54290: LD_INT 2
54292: NEG
54293: PUSH
54294: EMPTY
54295: LIST
54296: LIST
54297: PUSH
54298: LD_INT 5
54300: PUSH
54301: LD_INT 2
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: LIST
54312: LIST
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: LIST
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: LIST
54323: LIST
54324: LIST
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: LIST
54344: LIST
54345: LIST
54346: LIST
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: LIST
54352: LIST
54353: LIST
54354: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54355: LD_ADDR_VAR 0 32
54359: PUSH
54360: LD_INT 4
54362: NEG
54363: PUSH
54364: LD_INT 0
54366: PUSH
54367: EMPTY
54368: LIST
54369: LIST
54370: PUSH
54371: LD_INT 4
54373: NEG
54374: PUSH
54375: LD_INT 1
54377: NEG
54378: PUSH
54379: EMPTY
54380: LIST
54381: LIST
54382: PUSH
54383: LD_INT 3
54385: NEG
54386: PUSH
54387: LD_INT 0
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_INT 3
54396: NEG
54397: PUSH
54398: LD_INT 1
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 4
54407: NEG
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 5
54418: NEG
54419: PUSH
54420: LD_INT 0
54422: PUSH
54423: EMPTY
54424: LIST
54425: LIST
54426: PUSH
54427: LD_INT 5
54429: NEG
54430: PUSH
54431: LD_INT 1
54433: NEG
54434: PUSH
54435: EMPTY
54436: LIST
54437: LIST
54438: PUSH
54439: LD_INT 5
54441: NEG
54442: PUSH
54443: LD_INT 2
54445: NEG
54446: PUSH
54447: EMPTY
54448: LIST
54449: LIST
54450: PUSH
54451: LD_INT 3
54453: NEG
54454: PUSH
54455: LD_INT 2
54457: PUSH
54458: EMPTY
54459: LIST
54460: LIST
54461: PUSH
54462: LD_INT 3
54464: NEG
54465: PUSH
54466: LD_INT 3
54468: NEG
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: PUSH
54474: LD_INT 3
54476: NEG
54477: PUSH
54478: LD_INT 4
54480: NEG
54481: PUSH
54482: EMPTY
54483: LIST
54484: LIST
54485: PUSH
54486: LD_INT 2
54488: NEG
54489: PUSH
54490: LD_INT 3
54492: NEG
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 2
54500: NEG
54501: PUSH
54502: LD_INT 2
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 3
54512: NEG
54513: PUSH
54514: LD_INT 2
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 4
54524: NEG
54525: PUSH
54526: LD_INT 3
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 4
54536: NEG
54537: PUSH
54538: LD_INT 4
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 2
54548: NEG
54549: PUSH
54550: LD_INT 4
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 4
54560: NEG
54561: PUSH
54562: LD_INT 2
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 0
54572: PUSH
54573: LD_INT 4
54575: NEG
54576: PUSH
54577: EMPTY
54578: LIST
54579: LIST
54580: PUSH
54581: LD_INT 0
54583: PUSH
54584: LD_INT 5
54586: NEG
54587: PUSH
54588: EMPTY
54589: LIST
54590: LIST
54591: PUSH
54592: LD_INT 1
54594: PUSH
54595: LD_INT 4
54597: NEG
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: PUSH
54606: LD_INT 3
54608: NEG
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 0
54616: PUSH
54617: LD_INT 3
54619: NEG
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 1
54627: NEG
54628: PUSH
54629: LD_INT 4
54631: NEG
54632: PUSH
54633: EMPTY
54634: LIST
54635: LIST
54636: PUSH
54637: LD_INT 1
54639: NEG
54640: PUSH
54641: LD_INT 5
54643: NEG
54644: PUSH
54645: EMPTY
54646: LIST
54647: LIST
54648: PUSH
54649: LD_INT 2
54651: PUSH
54652: LD_INT 3
54654: NEG
54655: PUSH
54656: EMPTY
54657: LIST
54658: LIST
54659: PUSH
54660: LD_INT 2
54662: NEG
54663: PUSH
54664: LD_INT 5
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 3
54674: PUSH
54675: LD_INT 0
54677: PUSH
54678: EMPTY
54679: LIST
54680: LIST
54681: PUSH
54682: LD_INT 3
54684: PUSH
54685: LD_INT 1
54687: NEG
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 4
54695: PUSH
54696: LD_INT 0
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 4
54705: PUSH
54706: LD_INT 1
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 3
54715: PUSH
54716: LD_INT 1
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: LD_INT 0
54728: PUSH
54729: EMPTY
54730: LIST
54731: LIST
54732: PUSH
54733: LD_INT 2
54735: PUSH
54736: LD_INT 1
54738: NEG
54739: PUSH
54740: EMPTY
54741: LIST
54742: LIST
54743: PUSH
54744: LD_INT 2
54746: PUSH
54747: LD_INT 2
54749: NEG
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 4
54757: PUSH
54758: LD_INT 2
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 4
54767: PUSH
54768: LD_INT 4
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 4
54777: PUSH
54778: LD_INT 3
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 5
54787: PUSH
54788: LD_INT 4
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 5
54797: PUSH
54798: LD_INT 5
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 4
54807: PUSH
54808: LD_INT 5
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 3
54817: PUSH
54818: LD_INT 4
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 3
54827: PUSH
54828: LD_INT 3
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 5
54837: PUSH
54838: LD_INT 3
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 3
54847: PUSH
54848: LD_INT 5
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: EMPTY
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54902: LD_ADDR_VAR 0 33
54906: PUSH
54907: LD_INT 4
54909: NEG
54910: PUSH
54911: LD_INT 4
54913: NEG
54914: PUSH
54915: EMPTY
54916: LIST
54917: LIST
54918: PUSH
54919: LD_INT 4
54921: NEG
54922: PUSH
54923: LD_INT 5
54925: NEG
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 3
54933: NEG
54934: PUSH
54935: LD_INT 4
54937: NEG
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 3
54945: NEG
54946: PUSH
54947: LD_INT 3
54949: NEG
54950: PUSH
54951: EMPTY
54952: LIST
54953: LIST
54954: PUSH
54955: LD_INT 4
54957: NEG
54958: PUSH
54959: LD_INT 3
54961: NEG
54962: PUSH
54963: EMPTY
54964: LIST
54965: LIST
54966: PUSH
54967: LD_INT 5
54969: NEG
54970: PUSH
54971: LD_INT 4
54973: NEG
54974: PUSH
54975: EMPTY
54976: LIST
54977: LIST
54978: PUSH
54979: LD_INT 5
54981: NEG
54982: PUSH
54983: LD_INT 5
54985: NEG
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 3
54993: NEG
54994: PUSH
54995: LD_INT 5
54997: NEG
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 5
55005: NEG
55006: PUSH
55007: LD_INT 3
55009: NEG
55010: PUSH
55011: EMPTY
55012: LIST
55013: LIST
55014: PUSH
55015: LD_INT 0
55017: PUSH
55018: LD_INT 3
55020: NEG
55021: PUSH
55022: EMPTY
55023: LIST
55024: LIST
55025: PUSH
55026: LD_INT 0
55028: PUSH
55029: LD_INT 4
55031: NEG
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: PUSH
55037: LD_INT 1
55039: PUSH
55040: LD_INT 3
55042: NEG
55043: PUSH
55044: EMPTY
55045: LIST
55046: LIST
55047: PUSH
55048: LD_INT 1
55050: PUSH
55051: LD_INT 2
55053: NEG
55054: PUSH
55055: EMPTY
55056: LIST
55057: LIST
55058: PUSH
55059: LD_INT 0
55061: PUSH
55062: LD_INT 2
55064: NEG
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 1
55072: NEG
55073: PUSH
55074: LD_INT 3
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 1
55084: NEG
55085: PUSH
55086: LD_INT 4
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: LD_INT 2
55096: PUSH
55097: LD_INT 2
55099: NEG
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: PUSH
55105: LD_INT 2
55107: NEG
55108: PUSH
55109: LD_INT 4
55111: NEG
55112: PUSH
55113: EMPTY
55114: LIST
55115: LIST
55116: PUSH
55117: LD_INT 4
55119: PUSH
55120: LD_INT 0
55122: PUSH
55123: EMPTY
55124: LIST
55125: LIST
55126: PUSH
55127: LD_INT 4
55129: PUSH
55130: LD_INT 1
55132: NEG
55133: PUSH
55134: EMPTY
55135: LIST
55136: LIST
55137: PUSH
55138: LD_INT 5
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 5
55150: PUSH
55151: LD_INT 1
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 4
55160: PUSH
55161: LD_INT 1
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 3
55170: PUSH
55171: LD_INT 0
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: LD_INT 3
55180: PUSH
55181: LD_INT 1
55183: NEG
55184: PUSH
55185: EMPTY
55186: LIST
55187: LIST
55188: PUSH
55189: LD_INT 3
55191: PUSH
55192: LD_INT 2
55194: NEG
55195: PUSH
55196: EMPTY
55197: LIST
55198: LIST
55199: PUSH
55200: LD_INT 5
55202: PUSH
55203: LD_INT 2
55205: PUSH
55206: EMPTY
55207: LIST
55208: LIST
55209: PUSH
55210: LD_INT 3
55212: PUSH
55213: LD_INT 3
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: PUSH
55220: LD_INT 3
55222: PUSH
55223: LD_INT 2
55225: PUSH
55226: EMPTY
55227: LIST
55228: LIST
55229: PUSH
55230: LD_INT 4
55232: PUSH
55233: LD_INT 3
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: PUSH
55240: LD_INT 4
55242: PUSH
55243: LD_INT 4
55245: PUSH
55246: EMPTY
55247: LIST
55248: LIST
55249: PUSH
55250: LD_INT 3
55252: PUSH
55253: LD_INT 4
55255: PUSH
55256: EMPTY
55257: LIST
55258: LIST
55259: PUSH
55260: LD_INT 2
55262: PUSH
55263: LD_INT 3
55265: PUSH
55266: EMPTY
55267: LIST
55268: LIST
55269: PUSH
55270: LD_INT 2
55272: PUSH
55273: LD_INT 2
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 4
55282: PUSH
55283: LD_INT 2
55285: PUSH
55286: EMPTY
55287: LIST
55288: LIST
55289: PUSH
55290: LD_INT 2
55292: PUSH
55293: LD_INT 4
55295: PUSH
55296: EMPTY
55297: LIST
55298: LIST
55299: PUSH
55300: LD_INT 0
55302: PUSH
55303: LD_INT 4
55305: PUSH
55306: EMPTY
55307: LIST
55308: LIST
55309: PUSH
55310: LD_INT 0
55312: PUSH
55313: LD_INT 3
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: PUSH
55320: LD_INT 1
55322: PUSH
55323: LD_INT 4
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PUSH
55330: LD_INT 1
55332: PUSH
55333: LD_INT 5
55335: PUSH
55336: EMPTY
55337: LIST
55338: LIST
55339: PUSH
55340: LD_INT 0
55342: PUSH
55343: LD_INT 5
55345: PUSH
55346: EMPTY
55347: LIST
55348: LIST
55349: PUSH
55350: LD_INT 1
55352: NEG
55353: PUSH
55354: LD_INT 4
55356: PUSH
55357: EMPTY
55358: LIST
55359: LIST
55360: PUSH
55361: LD_INT 1
55363: NEG
55364: PUSH
55365: LD_INT 3
55367: PUSH
55368: EMPTY
55369: LIST
55370: LIST
55371: PUSH
55372: LD_INT 2
55374: PUSH
55375: LD_INT 5
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 2
55384: NEG
55385: PUSH
55386: LD_INT 3
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: LIST
55397: LIST
55398: LIST
55399: LIST
55400: LIST
55401: LIST
55402: LIST
55403: LIST
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: LIST
55409: LIST
55410: LIST
55411: LIST
55412: LIST
55413: LIST
55414: LIST
55415: LIST
55416: LIST
55417: LIST
55418: LIST
55419: LIST
55420: LIST
55421: LIST
55422: LIST
55423: LIST
55424: LIST
55425: LIST
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: LIST
55438: LIST
55439: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55440: LD_ADDR_VAR 0 34
55444: PUSH
55445: LD_INT 0
55447: PUSH
55448: LD_INT 4
55450: NEG
55451: PUSH
55452: EMPTY
55453: LIST
55454: LIST
55455: PUSH
55456: LD_INT 0
55458: PUSH
55459: LD_INT 5
55461: NEG
55462: PUSH
55463: EMPTY
55464: LIST
55465: LIST
55466: PUSH
55467: LD_INT 1
55469: PUSH
55470: LD_INT 4
55472: NEG
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: PUSH
55478: LD_INT 1
55480: PUSH
55481: LD_INT 3
55483: NEG
55484: PUSH
55485: EMPTY
55486: LIST
55487: LIST
55488: PUSH
55489: LD_INT 0
55491: PUSH
55492: LD_INT 3
55494: NEG
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 1
55502: NEG
55503: PUSH
55504: LD_INT 4
55506: NEG
55507: PUSH
55508: EMPTY
55509: LIST
55510: LIST
55511: PUSH
55512: LD_INT 1
55514: NEG
55515: PUSH
55516: LD_INT 5
55518: NEG
55519: PUSH
55520: EMPTY
55521: LIST
55522: LIST
55523: PUSH
55524: LD_INT 2
55526: PUSH
55527: LD_INT 3
55529: NEG
55530: PUSH
55531: EMPTY
55532: LIST
55533: LIST
55534: PUSH
55535: LD_INT 2
55537: NEG
55538: PUSH
55539: LD_INT 5
55541: NEG
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 3
55549: PUSH
55550: LD_INT 0
55552: PUSH
55553: EMPTY
55554: LIST
55555: LIST
55556: PUSH
55557: LD_INT 3
55559: PUSH
55560: LD_INT 1
55562: NEG
55563: PUSH
55564: EMPTY
55565: LIST
55566: LIST
55567: PUSH
55568: LD_INT 4
55570: PUSH
55571: LD_INT 0
55573: PUSH
55574: EMPTY
55575: LIST
55576: LIST
55577: PUSH
55578: LD_INT 4
55580: PUSH
55581: LD_INT 1
55583: PUSH
55584: EMPTY
55585: LIST
55586: LIST
55587: PUSH
55588: LD_INT 3
55590: PUSH
55591: LD_INT 1
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: PUSH
55598: LD_INT 2
55600: PUSH
55601: LD_INT 0
55603: PUSH
55604: EMPTY
55605: LIST
55606: LIST
55607: PUSH
55608: LD_INT 2
55610: PUSH
55611: LD_INT 1
55613: NEG
55614: PUSH
55615: EMPTY
55616: LIST
55617: LIST
55618: PUSH
55619: LD_INT 2
55621: PUSH
55622: LD_INT 2
55624: NEG
55625: PUSH
55626: EMPTY
55627: LIST
55628: LIST
55629: PUSH
55630: LD_INT 4
55632: PUSH
55633: LD_INT 2
55635: PUSH
55636: EMPTY
55637: LIST
55638: LIST
55639: PUSH
55640: LD_INT 4
55642: PUSH
55643: LD_INT 4
55645: PUSH
55646: EMPTY
55647: LIST
55648: LIST
55649: PUSH
55650: LD_INT 4
55652: PUSH
55653: LD_INT 3
55655: PUSH
55656: EMPTY
55657: LIST
55658: LIST
55659: PUSH
55660: LD_INT 5
55662: PUSH
55663: LD_INT 4
55665: PUSH
55666: EMPTY
55667: LIST
55668: LIST
55669: PUSH
55670: LD_INT 5
55672: PUSH
55673: LD_INT 5
55675: PUSH
55676: EMPTY
55677: LIST
55678: LIST
55679: PUSH
55680: LD_INT 4
55682: PUSH
55683: LD_INT 5
55685: PUSH
55686: EMPTY
55687: LIST
55688: LIST
55689: PUSH
55690: LD_INT 3
55692: PUSH
55693: LD_INT 4
55695: PUSH
55696: EMPTY
55697: LIST
55698: LIST
55699: PUSH
55700: LD_INT 3
55702: PUSH
55703: LD_INT 3
55705: PUSH
55706: EMPTY
55707: LIST
55708: LIST
55709: PUSH
55710: LD_INT 5
55712: PUSH
55713: LD_INT 3
55715: PUSH
55716: EMPTY
55717: LIST
55718: LIST
55719: PUSH
55720: LD_INT 3
55722: PUSH
55723: LD_INT 5
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PUSH
55730: LD_INT 0
55732: PUSH
55733: LD_INT 3
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: PUSH
55740: LD_INT 0
55742: PUSH
55743: LD_INT 2
55745: PUSH
55746: EMPTY
55747: LIST
55748: LIST
55749: PUSH
55750: LD_INT 1
55752: PUSH
55753: LD_INT 3
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: PUSH
55760: LD_INT 1
55762: PUSH
55763: LD_INT 4
55765: PUSH
55766: EMPTY
55767: LIST
55768: LIST
55769: PUSH
55770: LD_INT 0
55772: PUSH
55773: LD_INT 4
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PUSH
55780: LD_INT 1
55782: NEG
55783: PUSH
55784: LD_INT 3
55786: PUSH
55787: EMPTY
55788: LIST
55789: LIST
55790: PUSH
55791: LD_INT 1
55793: NEG
55794: PUSH
55795: LD_INT 2
55797: PUSH
55798: EMPTY
55799: LIST
55800: LIST
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: LD_INT 4
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 2
55814: NEG
55815: PUSH
55816: LD_INT 2
55818: PUSH
55819: EMPTY
55820: LIST
55821: LIST
55822: PUSH
55823: LD_INT 4
55825: NEG
55826: PUSH
55827: LD_INT 0
55829: PUSH
55830: EMPTY
55831: LIST
55832: LIST
55833: PUSH
55834: LD_INT 4
55836: NEG
55837: PUSH
55838: LD_INT 1
55840: NEG
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: PUSH
55846: LD_INT 3
55848: NEG
55849: PUSH
55850: LD_INT 0
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: PUSH
55857: LD_INT 3
55859: NEG
55860: PUSH
55861: LD_INT 1
55863: PUSH
55864: EMPTY
55865: LIST
55866: LIST
55867: PUSH
55868: LD_INT 4
55870: NEG
55871: PUSH
55872: LD_INT 1
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: PUSH
55879: LD_INT 5
55881: NEG
55882: PUSH
55883: LD_INT 0
55885: PUSH
55886: EMPTY
55887: LIST
55888: LIST
55889: PUSH
55890: LD_INT 5
55892: NEG
55893: PUSH
55894: LD_INT 1
55896: NEG
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 5
55904: NEG
55905: PUSH
55906: LD_INT 2
55908: NEG
55909: PUSH
55910: EMPTY
55911: LIST
55912: LIST
55913: PUSH
55914: LD_INT 3
55916: NEG
55917: PUSH
55918: LD_INT 2
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: EMPTY
55926: LIST
55927: LIST
55928: LIST
55929: LIST
55930: LIST
55931: LIST
55932: LIST
55933: LIST
55934: LIST
55935: LIST
55936: LIST
55937: LIST
55938: LIST
55939: LIST
55940: LIST
55941: LIST
55942: LIST
55943: LIST
55944: LIST
55945: LIST
55946: LIST
55947: LIST
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: LIST
55954: LIST
55955: LIST
55956: LIST
55957: LIST
55958: LIST
55959: LIST
55960: LIST
55961: LIST
55962: LIST
55963: LIST
55964: LIST
55965: LIST
55966: LIST
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: ST_TO_ADDR
// end ; end ;
55972: GO 55975
55974: POP
// case btype of b_depot , b_warehouse :
55975: LD_VAR 0 1
55979: PUSH
55980: LD_INT 0
55982: DOUBLE
55983: EQUAL
55984: IFTRUE 55994
55986: LD_INT 1
55988: DOUBLE
55989: EQUAL
55990: IFTRUE 55994
55992: GO 56195
55994: POP
// case nation of nation_american :
55995: LD_VAR 0 5
55999: PUSH
56000: LD_INT 1
56002: DOUBLE
56003: EQUAL
56004: IFTRUE 56008
56006: GO 56064
56008: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
56009: LD_ADDR_VAR 0 9
56013: PUSH
56014: LD_VAR 0 11
56018: PUSH
56019: LD_VAR 0 12
56023: PUSH
56024: LD_VAR 0 13
56028: PUSH
56029: LD_VAR 0 14
56033: PUSH
56034: LD_VAR 0 15
56038: PUSH
56039: LD_VAR 0 16
56043: PUSH
56044: EMPTY
56045: LIST
56046: LIST
56047: LIST
56048: LIST
56049: LIST
56050: LIST
56051: PUSH
56052: LD_VAR 0 4
56056: PUSH
56057: LD_INT 1
56059: PLUS
56060: ARRAY
56061: ST_TO_ADDR
56062: GO 56193
56064: LD_INT 2
56066: DOUBLE
56067: EQUAL
56068: IFTRUE 56072
56070: GO 56128
56072: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
56073: LD_ADDR_VAR 0 9
56077: PUSH
56078: LD_VAR 0 17
56082: PUSH
56083: LD_VAR 0 18
56087: PUSH
56088: LD_VAR 0 19
56092: PUSH
56093: LD_VAR 0 20
56097: PUSH
56098: LD_VAR 0 21
56102: PUSH
56103: LD_VAR 0 22
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: LIST
56112: LIST
56113: LIST
56114: LIST
56115: PUSH
56116: LD_VAR 0 4
56120: PUSH
56121: LD_INT 1
56123: PLUS
56124: ARRAY
56125: ST_TO_ADDR
56126: GO 56193
56128: LD_INT 3
56130: DOUBLE
56131: EQUAL
56132: IFTRUE 56136
56134: GO 56192
56136: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56137: LD_ADDR_VAR 0 9
56141: PUSH
56142: LD_VAR 0 23
56146: PUSH
56147: LD_VAR 0 24
56151: PUSH
56152: LD_VAR 0 25
56156: PUSH
56157: LD_VAR 0 26
56161: PUSH
56162: LD_VAR 0 27
56166: PUSH
56167: LD_VAR 0 28
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: PUSH
56180: LD_VAR 0 4
56184: PUSH
56185: LD_INT 1
56187: PLUS
56188: ARRAY
56189: ST_TO_ADDR
56190: GO 56193
56192: POP
56193: GO 56748
56195: LD_INT 2
56197: DOUBLE
56198: EQUAL
56199: IFTRUE 56209
56201: LD_INT 3
56203: DOUBLE
56204: EQUAL
56205: IFTRUE 56209
56207: GO 56265
56209: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56210: LD_ADDR_VAR 0 9
56214: PUSH
56215: LD_VAR 0 29
56219: PUSH
56220: LD_VAR 0 30
56224: PUSH
56225: LD_VAR 0 31
56229: PUSH
56230: LD_VAR 0 32
56234: PUSH
56235: LD_VAR 0 33
56239: PUSH
56240: LD_VAR 0 34
56244: PUSH
56245: EMPTY
56246: LIST
56247: LIST
56248: LIST
56249: LIST
56250: LIST
56251: LIST
56252: PUSH
56253: LD_VAR 0 4
56257: PUSH
56258: LD_INT 1
56260: PLUS
56261: ARRAY
56262: ST_TO_ADDR
56263: GO 56748
56265: LD_INT 16
56267: DOUBLE
56268: EQUAL
56269: IFTRUE 56327
56271: LD_INT 17
56273: DOUBLE
56274: EQUAL
56275: IFTRUE 56327
56277: LD_INT 18
56279: DOUBLE
56280: EQUAL
56281: IFTRUE 56327
56283: LD_INT 19
56285: DOUBLE
56286: EQUAL
56287: IFTRUE 56327
56289: LD_INT 22
56291: DOUBLE
56292: EQUAL
56293: IFTRUE 56327
56295: LD_INT 20
56297: DOUBLE
56298: EQUAL
56299: IFTRUE 56327
56301: LD_INT 21
56303: DOUBLE
56304: EQUAL
56305: IFTRUE 56327
56307: LD_INT 23
56309: DOUBLE
56310: EQUAL
56311: IFTRUE 56327
56313: LD_INT 24
56315: DOUBLE
56316: EQUAL
56317: IFTRUE 56327
56319: LD_INT 25
56321: DOUBLE
56322: EQUAL
56323: IFTRUE 56327
56325: GO 56383
56327: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56328: LD_ADDR_VAR 0 9
56332: PUSH
56333: LD_VAR 0 35
56337: PUSH
56338: LD_VAR 0 36
56342: PUSH
56343: LD_VAR 0 37
56347: PUSH
56348: LD_VAR 0 38
56352: PUSH
56353: LD_VAR 0 39
56357: PUSH
56358: LD_VAR 0 40
56362: PUSH
56363: EMPTY
56364: LIST
56365: LIST
56366: LIST
56367: LIST
56368: LIST
56369: LIST
56370: PUSH
56371: LD_VAR 0 4
56375: PUSH
56376: LD_INT 1
56378: PLUS
56379: ARRAY
56380: ST_TO_ADDR
56381: GO 56748
56383: LD_INT 6
56385: DOUBLE
56386: EQUAL
56387: IFTRUE 56439
56389: LD_INT 7
56391: DOUBLE
56392: EQUAL
56393: IFTRUE 56439
56395: LD_INT 8
56397: DOUBLE
56398: EQUAL
56399: IFTRUE 56439
56401: LD_INT 13
56403: DOUBLE
56404: EQUAL
56405: IFTRUE 56439
56407: LD_INT 12
56409: DOUBLE
56410: EQUAL
56411: IFTRUE 56439
56413: LD_INT 15
56415: DOUBLE
56416: EQUAL
56417: IFTRUE 56439
56419: LD_INT 11
56421: DOUBLE
56422: EQUAL
56423: IFTRUE 56439
56425: LD_INT 14
56427: DOUBLE
56428: EQUAL
56429: IFTRUE 56439
56431: LD_INT 10
56433: DOUBLE
56434: EQUAL
56435: IFTRUE 56439
56437: GO 56495
56439: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56440: LD_ADDR_VAR 0 9
56444: PUSH
56445: LD_VAR 0 41
56449: PUSH
56450: LD_VAR 0 42
56454: PUSH
56455: LD_VAR 0 43
56459: PUSH
56460: LD_VAR 0 44
56464: PUSH
56465: LD_VAR 0 45
56469: PUSH
56470: LD_VAR 0 46
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: LIST
56479: LIST
56480: LIST
56481: LIST
56482: PUSH
56483: LD_VAR 0 4
56487: PUSH
56488: LD_INT 1
56490: PLUS
56491: ARRAY
56492: ST_TO_ADDR
56493: GO 56748
56495: LD_INT 36
56497: DOUBLE
56498: EQUAL
56499: IFTRUE 56503
56501: GO 56559
56503: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56504: LD_ADDR_VAR 0 9
56508: PUSH
56509: LD_VAR 0 47
56513: PUSH
56514: LD_VAR 0 48
56518: PUSH
56519: LD_VAR 0 49
56523: PUSH
56524: LD_VAR 0 50
56528: PUSH
56529: LD_VAR 0 51
56533: PUSH
56534: LD_VAR 0 52
56538: PUSH
56539: EMPTY
56540: LIST
56541: LIST
56542: LIST
56543: LIST
56544: LIST
56545: LIST
56546: PUSH
56547: LD_VAR 0 4
56551: PUSH
56552: LD_INT 1
56554: PLUS
56555: ARRAY
56556: ST_TO_ADDR
56557: GO 56748
56559: LD_INT 4
56561: DOUBLE
56562: EQUAL
56563: IFTRUE 56585
56565: LD_INT 5
56567: DOUBLE
56568: EQUAL
56569: IFTRUE 56585
56571: LD_INT 34
56573: DOUBLE
56574: EQUAL
56575: IFTRUE 56585
56577: LD_INT 37
56579: DOUBLE
56580: EQUAL
56581: IFTRUE 56585
56583: GO 56641
56585: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56586: LD_ADDR_VAR 0 9
56590: PUSH
56591: LD_VAR 0 53
56595: PUSH
56596: LD_VAR 0 54
56600: PUSH
56601: LD_VAR 0 55
56605: PUSH
56606: LD_VAR 0 56
56610: PUSH
56611: LD_VAR 0 57
56615: PUSH
56616: LD_VAR 0 58
56620: PUSH
56621: EMPTY
56622: LIST
56623: LIST
56624: LIST
56625: LIST
56626: LIST
56627: LIST
56628: PUSH
56629: LD_VAR 0 4
56633: PUSH
56634: LD_INT 1
56636: PLUS
56637: ARRAY
56638: ST_TO_ADDR
56639: GO 56748
56641: LD_INT 31
56643: DOUBLE
56644: EQUAL
56645: IFTRUE 56691
56647: LD_INT 32
56649: DOUBLE
56650: EQUAL
56651: IFTRUE 56691
56653: LD_INT 33
56655: DOUBLE
56656: EQUAL
56657: IFTRUE 56691
56659: LD_INT 27
56661: DOUBLE
56662: EQUAL
56663: IFTRUE 56691
56665: LD_INT 26
56667: DOUBLE
56668: EQUAL
56669: IFTRUE 56691
56671: LD_INT 28
56673: DOUBLE
56674: EQUAL
56675: IFTRUE 56691
56677: LD_INT 29
56679: DOUBLE
56680: EQUAL
56681: IFTRUE 56691
56683: LD_INT 30
56685: DOUBLE
56686: EQUAL
56687: IFTRUE 56691
56689: GO 56747
56691: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56692: LD_ADDR_VAR 0 9
56696: PUSH
56697: LD_VAR 0 59
56701: PUSH
56702: LD_VAR 0 60
56706: PUSH
56707: LD_VAR 0 61
56711: PUSH
56712: LD_VAR 0 62
56716: PUSH
56717: LD_VAR 0 63
56721: PUSH
56722: LD_VAR 0 64
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: LIST
56731: LIST
56732: LIST
56733: LIST
56734: PUSH
56735: LD_VAR 0 4
56739: PUSH
56740: LD_INT 1
56742: PLUS
56743: ARRAY
56744: ST_TO_ADDR
56745: GO 56748
56747: POP
// temp_list2 = [ ] ;
56748: LD_ADDR_VAR 0 10
56752: PUSH
56753: EMPTY
56754: ST_TO_ADDR
// for i in temp_list do
56755: LD_ADDR_VAR 0 8
56759: PUSH
56760: LD_VAR 0 9
56764: PUSH
56765: FOR_IN
56766: IFFALSE 56818
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56768: LD_ADDR_VAR 0 10
56772: PUSH
56773: LD_VAR 0 10
56777: PUSH
56778: LD_VAR 0 8
56782: PUSH
56783: LD_INT 1
56785: ARRAY
56786: PUSH
56787: LD_VAR 0 2
56791: PLUS
56792: PUSH
56793: LD_VAR 0 8
56797: PUSH
56798: LD_INT 2
56800: ARRAY
56801: PUSH
56802: LD_VAR 0 3
56806: PLUS
56807: PUSH
56808: EMPTY
56809: LIST
56810: LIST
56811: PUSH
56812: EMPTY
56813: LIST
56814: ADD
56815: ST_TO_ADDR
56816: GO 56765
56818: POP
56819: POP
// result = temp_list2 ;
56820: LD_ADDR_VAR 0 7
56824: PUSH
56825: LD_VAR 0 10
56829: ST_TO_ADDR
// end ;
56830: LD_VAR 0 7
56834: RET
// export function EnemyInRange ( unit , dist ) ; begin
56835: LD_INT 0
56837: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56838: LD_ADDR_VAR 0 3
56842: PUSH
56843: LD_VAR 0 1
56847: PPUSH
56848: CALL_OW 255
56852: PPUSH
56853: LD_VAR 0 1
56857: PPUSH
56858: CALL_OW 250
56862: PPUSH
56863: LD_VAR 0 1
56867: PPUSH
56868: CALL_OW 251
56872: PPUSH
56873: LD_VAR 0 2
56877: PPUSH
56878: CALL 30237 0 4
56882: PUSH
56883: LD_INT 4
56885: ARRAY
56886: ST_TO_ADDR
// end ;
56887: LD_VAR 0 3
56891: RET
// export function PlayerSeeMe ( unit ) ; begin
56892: LD_INT 0
56894: PPUSH
// result := See ( your_side , unit ) ;
56895: LD_ADDR_VAR 0 2
56899: PUSH
56900: LD_OWVAR 2
56904: PPUSH
56905: LD_VAR 0 1
56909: PPUSH
56910: CALL_OW 292
56914: ST_TO_ADDR
// end ;
56915: LD_VAR 0 2
56919: RET
// export function ReverseDir ( unit ) ; begin
56920: LD_INT 0
56922: PPUSH
// if not unit then
56923: LD_VAR 0 1
56927: NOT
56928: IFFALSE 56932
// exit ;
56930: GO 56955
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56932: LD_ADDR_VAR 0 2
56936: PUSH
56937: LD_VAR 0 1
56941: PPUSH
56942: CALL_OW 254
56946: PUSH
56947: LD_INT 3
56949: PLUS
56950: PUSH
56951: LD_INT 6
56953: MOD
56954: ST_TO_ADDR
// end ;
56955: LD_VAR 0 2
56959: RET
// export function ReverseArray ( array ) ; var i ; begin
56960: LD_INT 0
56962: PPUSH
56963: PPUSH
// if not array then
56964: LD_VAR 0 1
56968: NOT
56969: IFFALSE 56973
// exit ;
56971: GO 57028
// result := [ ] ;
56973: LD_ADDR_VAR 0 2
56977: PUSH
56978: EMPTY
56979: ST_TO_ADDR
// for i := array downto 1 do
56980: LD_ADDR_VAR 0 3
56984: PUSH
56985: DOUBLE
56986: LD_VAR 0 1
56990: INC
56991: ST_TO_ADDR
56992: LD_INT 1
56994: PUSH
56995: FOR_DOWNTO
56996: IFFALSE 57026
// result := Join ( result , array [ i ] ) ;
56998: LD_ADDR_VAR 0 2
57002: PUSH
57003: LD_VAR 0 2
57007: PPUSH
57008: LD_VAR 0 1
57012: PUSH
57013: LD_VAR 0 3
57017: ARRAY
57018: PPUSH
57019: CALL 61672 0 2
57023: ST_TO_ADDR
57024: GO 56995
57026: POP
57027: POP
// end ;
57028: LD_VAR 0 2
57032: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
57033: LD_INT 0
57035: PPUSH
57036: PPUSH
57037: PPUSH
57038: PPUSH
57039: PPUSH
57040: PPUSH
// if not unit or not hexes then
57041: LD_VAR 0 1
57045: NOT
57046: PUSH
57047: LD_VAR 0 2
57051: NOT
57052: OR
57053: IFFALSE 57057
// exit ;
57055: GO 57180
// dist := 9999 ;
57057: LD_ADDR_VAR 0 5
57061: PUSH
57062: LD_INT 9999
57064: ST_TO_ADDR
// for i = 1 to hexes do
57065: LD_ADDR_VAR 0 4
57069: PUSH
57070: DOUBLE
57071: LD_INT 1
57073: DEC
57074: ST_TO_ADDR
57075: LD_VAR 0 2
57079: PUSH
57080: FOR_TO
57081: IFFALSE 57168
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57083: LD_ADDR_VAR 0 6
57087: PUSH
57088: LD_VAR 0 1
57092: PPUSH
57093: LD_VAR 0 2
57097: PUSH
57098: LD_VAR 0 4
57102: ARRAY
57103: PUSH
57104: LD_INT 1
57106: ARRAY
57107: PPUSH
57108: LD_VAR 0 2
57112: PUSH
57113: LD_VAR 0 4
57117: ARRAY
57118: PUSH
57119: LD_INT 2
57121: ARRAY
57122: PPUSH
57123: CALL_OW 297
57127: ST_TO_ADDR
// if tdist < dist then
57128: LD_VAR 0 6
57132: PUSH
57133: LD_VAR 0 5
57137: LESS
57138: IFFALSE 57166
// begin hex := hexes [ i ] ;
57140: LD_ADDR_VAR 0 8
57144: PUSH
57145: LD_VAR 0 2
57149: PUSH
57150: LD_VAR 0 4
57154: ARRAY
57155: ST_TO_ADDR
// dist := tdist ;
57156: LD_ADDR_VAR 0 5
57160: PUSH
57161: LD_VAR 0 6
57165: ST_TO_ADDR
// end ; end ;
57166: GO 57080
57168: POP
57169: POP
// result := hex ;
57170: LD_ADDR_VAR 0 3
57174: PUSH
57175: LD_VAR 0 8
57179: ST_TO_ADDR
// end ;
57180: LD_VAR 0 3
57184: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57185: LD_INT 0
57187: PPUSH
57188: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57189: LD_VAR 0 1
57193: NOT
57194: PUSH
57195: LD_VAR 0 1
57199: PUSH
57200: LD_INT 21
57202: PUSH
57203: LD_INT 2
57205: PUSH
57206: EMPTY
57207: LIST
57208: LIST
57209: PUSH
57210: LD_INT 23
57212: PUSH
57213: LD_INT 2
57215: PUSH
57216: EMPTY
57217: LIST
57218: LIST
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: PPUSH
57224: CALL_OW 69
57228: IN
57229: NOT
57230: OR
57231: IFFALSE 57235
// exit ;
57233: GO 57282
// for i = 1 to 3 do
57235: LD_ADDR_VAR 0 3
57239: PUSH
57240: DOUBLE
57241: LD_INT 1
57243: DEC
57244: ST_TO_ADDR
57245: LD_INT 3
57247: PUSH
57248: FOR_TO
57249: IFFALSE 57280
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57251: LD_VAR 0 1
57255: PPUSH
57256: CALL_OW 250
57260: PPUSH
57261: LD_VAR 0 1
57265: PPUSH
57266: CALL_OW 251
57270: PPUSH
57271: LD_INT 1
57273: PPUSH
57274: CALL_OW 453
57278: GO 57248
57280: POP
57281: POP
// end ;
57282: LD_VAR 0 2
57286: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57287: LD_INT 0
57289: PPUSH
57290: PPUSH
57291: PPUSH
57292: PPUSH
57293: PPUSH
57294: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57295: LD_VAR 0 1
57299: NOT
57300: PUSH
57301: LD_VAR 0 2
57305: NOT
57306: OR
57307: PUSH
57308: LD_VAR 0 1
57312: PPUSH
57313: CALL_OW 314
57317: OR
57318: IFFALSE 57322
// exit ;
57320: GO 57789
// if GetLives ( i ) < 250 then
57322: LD_VAR 0 4
57326: PPUSH
57327: CALL_OW 256
57331: PUSH
57332: LD_INT 250
57334: LESS
57335: IFFALSE 57348
// begin ComAutodestruct ( i ) ;
57337: LD_VAR 0 4
57341: PPUSH
57342: CALL 57185 0 1
// exit ;
57346: GO 57789
// end ; x := GetX ( enemy_unit ) ;
57348: LD_ADDR_VAR 0 7
57352: PUSH
57353: LD_VAR 0 2
57357: PPUSH
57358: CALL_OW 250
57362: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57363: LD_ADDR_VAR 0 8
57367: PUSH
57368: LD_VAR 0 2
57372: PPUSH
57373: CALL_OW 251
57377: ST_TO_ADDR
// if not x or not y then
57378: LD_VAR 0 7
57382: NOT
57383: PUSH
57384: LD_VAR 0 8
57388: NOT
57389: OR
57390: IFFALSE 57394
// exit ;
57392: GO 57789
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57394: LD_ADDR_VAR 0 6
57398: PUSH
57399: LD_VAR 0 7
57403: PPUSH
57404: LD_INT 0
57406: PPUSH
57407: LD_INT 4
57409: PPUSH
57410: CALL_OW 272
57414: PUSH
57415: LD_VAR 0 8
57419: PPUSH
57420: LD_INT 0
57422: PPUSH
57423: LD_INT 4
57425: PPUSH
57426: CALL_OW 273
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_VAR 0 7
57439: PPUSH
57440: LD_INT 1
57442: PPUSH
57443: LD_INT 4
57445: PPUSH
57446: CALL_OW 272
57450: PUSH
57451: LD_VAR 0 8
57455: PPUSH
57456: LD_INT 1
57458: PPUSH
57459: LD_INT 4
57461: PPUSH
57462: CALL_OW 273
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_VAR 0 7
57475: PPUSH
57476: LD_INT 2
57478: PPUSH
57479: LD_INT 4
57481: PPUSH
57482: CALL_OW 272
57486: PUSH
57487: LD_VAR 0 8
57491: PPUSH
57492: LD_INT 2
57494: PPUSH
57495: LD_INT 4
57497: PPUSH
57498: CALL_OW 273
57502: PUSH
57503: EMPTY
57504: LIST
57505: LIST
57506: PUSH
57507: LD_VAR 0 7
57511: PPUSH
57512: LD_INT 3
57514: PPUSH
57515: LD_INT 4
57517: PPUSH
57518: CALL_OW 272
57522: PUSH
57523: LD_VAR 0 8
57527: PPUSH
57528: LD_INT 3
57530: PPUSH
57531: LD_INT 4
57533: PPUSH
57534: CALL_OW 273
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: PUSH
57543: LD_VAR 0 7
57547: PPUSH
57548: LD_INT 4
57550: PPUSH
57551: LD_INT 4
57553: PPUSH
57554: CALL_OW 272
57558: PUSH
57559: LD_VAR 0 8
57563: PPUSH
57564: LD_INT 4
57566: PPUSH
57567: LD_INT 4
57569: PPUSH
57570: CALL_OW 273
57574: PUSH
57575: EMPTY
57576: LIST
57577: LIST
57578: PUSH
57579: LD_VAR 0 7
57583: PPUSH
57584: LD_INT 5
57586: PPUSH
57587: LD_INT 4
57589: PPUSH
57590: CALL_OW 272
57594: PUSH
57595: LD_VAR 0 8
57599: PPUSH
57600: LD_INT 5
57602: PPUSH
57603: LD_INT 4
57605: PPUSH
57606: CALL_OW 273
57610: PUSH
57611: EMPTY
57612: LIST
57613: LIST
57614: PUSH
57615: EMPTY
57616: LIST
57617: LIST
57618: LIST
57619: LIST
57620: LIST
57621: LIST
57622: ST_TO_ADDR
// for i = tmp downto 1 do
57623: LD_ADDR_VAR 0 4
57627: PUSH
57628: DOUBLE
57629: LD_VAR 0 6
57633: INC
57634: ST_TO_ADDR
57635: LD_INT 1
57637: PUSH
57638: FOR_DOWNTO
57639: IFFALSE 57740
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57641: LD_VAR 0 6
57645: PUSH
57646: LD_VAR 0 4
57650: ARRAY
57651: PUSH
57652: LD_INT 1
57654: ARRAY
57655: PPUSH
57656: LD_VAR 0 6
57660: PUSH
57661: LD_VAR 0 4
57665: ARRAY
57666: PUSH
57667: LD_INT 2
57669: ARRAY
57670: PPUSH
57671: CALL_OW 488
57675: NOT
57676: PUSH
57677: LD_VAR 0 6
57681: PUSH
57682: LD_VAR 0 4
57686: ARRAY
57687: PUSH
57688: LD_INT 1
57690: ARRAY
57691: PPUSH
57692: LD_VAR 0 6
57696: PUSH
57697: LD_VAR 0 4
57701: ARRAY
57702: PUSH
57703: LD_INT 2
57705: ARRAY
57706: PPUSH
57707: CALL_OW 428
57711: PUSH
57712: LD_INT 0
57714: NONEQUAL
57715: OR
57716: IFFALSE 57738
// tmp := Delete ( tmp , i ) ;
57718: LD_ADDR_VAR 0 6
57722: PUSH
57723: LD_VAR 0 6
57727: PPUSH
57728: LD_VAR 0 4
57732: PPUSH
57733: CALL_OW 3
57737: ST_TO_ADDR
57738: GO 57638
57740: POP
57741: POP
// j := GetClosestHex ( unit , tmp ) ;
57742: LD_ADDR_VAR 0 5
57746: PUSH
57747: LD_VAR 0 1
57751: PPUSH
57752: LD_VAR 0 6
57756: PPUSH
57757: CALL 57033 0 2
57761: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57762: LD_VAR 0 1
57766: PPUSH
57767: LD_VAR 0 5
57771: PUSH
57772: LD_INT 1
57774: ARRAY
57775: PPUSH
57776: LD_VAR 0 5
57780: PUSH
57781: LD_INT 2
57783: ARRAY
57784: PPUSH
57785: CALL_OW 111
// end ;
57789: LD_VAR 0 3
57793: RET
// export function PrepareApemanSoldier ( ) ; begin
57794: LD_INT 0
57796: PPUSH
// uc_nation := 0 ;
57797: LD_ADDR_OWVAR 21
57801: PUSH
57802: LD_INT 0
57804: ST_TO_ADDR
// hc_sex := sex_male ;
57805: LD_ADDR_OWVAR 27
57809: PUSH
57810: LD_INT 1
57812: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
57813: LD_ADDR_OWVAR 28
57817: PUSH
57818: LD_INT 15
57820: ST_TO_ADDR
// hc_gallery :=  ;
57821: LD_ADDR_OWVAR 33
57825: PUSH
57826: LD_STRING 
57828: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57829: LD_ADDR_OWVAR 31
57833: PUSH
57834: LD_INT 0
57836: PPUSH
57837: LD_INT 3
57839: PPUSH
57840: CALL_OW 12
57844: PUSH
57845: LD_INT 0
57847: PPUSH
57848: LD_INT 3
57850: PPUSH
57851: CALL_OW 12
57855: PUSH
57856: LD_INT 0
57858: PUSH
57859: LD_INT 0
57861: PUSH
57862: EMPTY
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: ST_TO_ADDR
// end ;
57868: LD_VAR 0 1
57872: RET
// export function PrepareApemanEngineer ( ) ; begin
57873: LD_INT 0
57875: PPUSH
// uc_nation := 0 ;
57876: LD_ADDR_OWVAR 21
57880: PUSH
57881: LD_INT 0
57883: ST_TO_ADDR
// hc_sex := sex_male ;
57884: LD_ADDR_OWVAR 27
57888: PUSH
57889: LD_INT 1
57891: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
57892: LD_ADDR_OWVAR 28
57896: PUSH
57897: LD_INT 16
57899: ST_TO_ADDR
// hc_gallery :=  ;
57900: LD_ADDR_OWVAR 33
57904: PUSH
57905: LD_STRING 
57907: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57908: LD_ADDR_OWVAR 31
57912: PUSH
57913: LD_INT 0
57915: PPUSH
57916: LD_INT 3
57918: PPUSH
57919: CALL_OW 12
57923: PUSH
57924: LD_INT 0
57926: PPUSH
57927: LD_INT 3
57929: PPUSH
57930: CALL_OW 12
57934: PUSH
57935: LD_INT 0
57937: PUSH
57938: LD_INT 0
57940: PUSH
57941: EMPTY
57942: LIST
57943: LIST
57944: LIST
57945: LIST
57946: ST_TO_ADDR
// end ;
57947: LD_VAR 0 1
57951: RET
// export function PrepareApeman ( agressivity ) ; begin
57952: LD_INT 0
57954: PPUSH
// uc_side := 0 ;
57955: LD_ADDR_OWVAR 20
57959: PUSH
57960: LD_INT 0
57962: ST_TO_ADDR
// uc_nation := 0 ;
57963: LD_ADDR_OWVAR 21
57967: PUSH
57968: LD_INT 0
57970: ST_TO_ADDR
// hc_sex := sex_male ;
57971: LD_ADDR_OWVAR 27
57975: PUSH
57976: LD_INT 1
57978: ST_TO_ADDR
// hc_class := class_apeman ;
57979: LD_ADDR_OWVAR 28
57983: PUSH
57984: LD_INT 12
57986: ST_TO_ADDR
// hc_gallery :=  ;
57987: LD_ADDR_OWVAR 33
57991: PUSH
57992: LD_STRING 
57994: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57995: LD_ADDR_OWVAR 35
57999: PUSH
58000: LD_VAR 0 1
58004: NEG
58005: PPUSH
58006: LD_VAR 0 1
58010: PPUSH
58011: CALL_OW 12
58015: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
58016: LD_ADDR_OWVAR 31
58020: PUSH
58021: LD_INT 0
58023: PPUSH
58024: LD_INT 3
58026: PPUSH
58027: CALL_OW 12
58031: PUSH
58032: LD_INT 0
58034: PPUSH
58035: LD_INT 3
58037: PPUSH
58038: CALL_OW 12
58042: PUSH
58043: LD_INT 0
58045: PUSH
58046: LD_INT 0
58048: PUSH
58049: EMPTY
58050: LIST
58051: LIST
58052: LIST
58053: LIST
58054: ST_TO_ADDR
// end ;
58055: LD_VAR 0 2
58059: RET
// export function PrepareTiger ( agressivity ) ; begin
58060: LD_INT 0
58062: PPUSH
// uc_side := 0 ;
58063: LD_ADDR_OWVAR 20
58067: PUSH
58068: LD_INT 0
58070: ST_TO_ADDR
// uc_nation := 0 ;
58071: LD_ADDR_OWVAR 21
58075: PUSH
58076: LD_INT 0
58078: ST_TO_ADDR
// hc_class := class_tiger ;
58079: LD_ADDR_OWVAR 28
58083: PUSH
58084: LD_INT 14
58086: ST_TO_ADDR
// hc_gallery :=  ;
58087: LD_ADDR_OWVAR 33
58091: PUSH
58092: LD_STRING 
58094: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58095: LD_ADDR_OWVAR 35
58099: PUSH
58100: LD_VAR 0 1
58104: NEG
58105: PPUSH
58106: LD_VAR 0 1
58110: PPUSH
58111: CALL_OW 12
58115: ST_TO_ADDR
// end ;
58116: LD_VAR 0 2
58120: RET
// export function PrepareEnchidna ( ) ; begin
58121: LD_INT 0
58123: PPUSH
// uc_side := 0 ;
58124: LD_ADDR_OWVAR 20
58128: PUSH
58129: LD_INT 0
58131: ST_TO_ADDR
// uc_nation := 0 ;
58132: LD_ADDR_OWVAR 21
58136: PUSH
58137: LD_INT 0
58139: ST_TO_ADDR
// hc_class := class_baggie ;
58140: LD_ADDR_OWVAR 28
58144: PUSH
58145: LD_INT 13
58147: ST_TO_ADDR
// hc_gallery :=  ;
58148: LD_ADDR_OWVAR 33
58152: PUSH
58153: LD_STRING 
58155: ST_TO_ADDR
// end ;
58156: LD_VAR 0 1
58160: RET
// export function PrepareFrog ( ) ; begin
58161: LD_INT 0
58163: PPUSH
// uc_side := 0 ;
58164: LD_ADDR_OWVAR 20
58168: PUSH
58169: LD_INT 0
58171: ST_TO_ADDR
// uc_nation := 0 ;
58172: LD_ADDR_OWVAR 21
58176: PUSH
58177: LD_INT 0
58179: ST_TO_ADDR
// hc_class := class_frog ;
58180: LD_ADDR_OWVAR 28
58184: PUSH
58185: LD_INT 19
58187: ST_TO_ADDR
// hc_gallery :=  ;
58188: LD_ADDR_OWVAR 33
58192: PUSH
58193: LD_STRING 
58195: ST_TO_ADDR
// end ;
58196: LD_VAR 0 1
58200: RET
// export function PrepareFish ( ) ; begin
58201: LD_INT 0
58203: PPUSH
// uc_side := 0 ;
58204: LD_ADDR_OWVAR 20
58208: PUSH
58209: LD_INT 0
58211: ST_TO_ADDR
// uc_nation := 0 ;
58212: LD_ADDR_OWVAR 21
58216: PUSH
58217: LD_INT 0
58219: ST_TO_ADDR
// hc_class := class_fish ;
58220: LD_ADDR_OWVAR 28
58224: PUSH
58225: LD_INT 20
58227: ST_TO_ADDR
// hc_gallery :=  ;
58228: LD_ADDR_OWVAR 33
58232: PUSH
58233: LD_STRING 
58235: ST_TO_ADDR
// end ;
58236: LD_VAR 0 1
58240: RET
// export function PrepareBird ( ) ; begin
58241: LD_INT 0
58243: PPUSH
// uc_side := 0 ;
58244: LD_ADDR_OWVAR 20
58248: PUSH
58249: LD_INT 0
58251: ST_TO_ADDR
// uc_nation := 0 ;
58252: LD_ADDR_OWVAR 21
58256: PUSH
58257: LD_INT 0
58259: ST_TO_ADDR
// hc_class := class_phororhacos ;
58260: LD_ADDR_OWVAR 28
58264: PUSH
58265: LD_INT 18
58267: ST_TO_ADDR
// hc_gallery :=  ;
58268: LD_ADDR_OWVAR 33
58272: PUSH
58273: LD_STRING 
58275: ST_TO_ADDR
// end ;
58276: LD_VAR 0 1
58280: RET
// export function PrepareHorse ( ) ; begin
58281: LD_INT 0
58283: PPUSH
// uc_side := 0 ;
58284: LD_ADDR_OWVAR 20
58288: PUSH
58289: LD_INT 0
58291: ST_TO_ADDR
// uc_nation := 0 ;
58292: LD_ADDR_OWVAR 21
58296: PUSH
58297: LD_INT 0
58299: ST_TO_ADDR
// hc_class := class_horse ;
58300: LD_ADDR_OWVAR 28
58304: PUSH
58305: LD_INT 21
58307: ST_TO_ADDR
// hc_gallery :=  ;
58308: LD_ADDR_OWVAR 33
58312: PUSH
58313: LD_STRING 
58315: ST_TO_ADDR
// end ;
58316: LD_VAR 0 1
58320: RET
// export function PrepareMastodont ( ) ; begin
58321: LD_INT 0
58323: PPUSH
// uc_side := 0 ;
58324: LD_ADDR_OWVAR 20
58328: PUSH
58329: LD_INT 0
58331: ST_TO_ADDR
// uc_nation := 0 ;
58332: LD_ADDR_OWVAR 21
58336: PUSH
58337: LD_INT 0
58339: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58340: LD_ADDR_OWVAR 37
58344: PUSH
58345: LD_INT 31
58347: ST_TO_ADDR
// vc_control := control_rider ;
58348: LD_ADDR_OWVAR 38
58352: PUSH
58353: LD_INT 4
58355: ST_TO_ADDR
// end ;
58356: LD_VAR 0 1
58360: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58361: LD_INT 0
58363: PPUSH
58364: PPUSH
58365: PPUSH
// uc_side = 0 ;
58366: LD_ADDR_OWVAR 20
58370: PUSH
58371: LD_INT 0
58373: ST_TO_ADDR
// uc_nation = 0 ;
58374: LD_ADDR_OWVAR 21
58378: PUSH
58379: LD_INT 0
58381: ST_TO_ADDR
// InitHc_All ( ) ;
58382: CALL_OW 584
// InitVc ;
58386: CALL_OW 20
// if mastodonts then
58390: LD_VAR 0 6
58394: IFFALSE 58461
// for i = 1 to mastodonts do
58396: LD_ADDR_VAR 0 11
58400: PUSH
58401: DOUBLE
58402: LD_INT 1
58404: DEC
58405: ST_TO_ADDR
58406: LD_VAR 0 6
58410: PUSH
58411: FOR_TO
58412: IFFALSE 58459
// begin vc_chassis := 31 ;
58414: LD_ADDR_OWVAR 37
58418: PUSH
58419: LD_INT 31
58421: ST_TO_ADDR
// vc_control := control_rider ;
58422: LD_ADDR_OWVAR 38
58426: PUSH
58427: LD_INT 4
58429: ST_TO_ADDR
// animal := CreateVehicle ;
58430: LD_ADDR_VAR 0 12
58434: PUSH
58435: CALL_OW 45
58439: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58440: LD_VAR 0 12
58444: PPUSH
58445: LD_VAR 0 8
58449: PPUSH
58450: LD_INT 0
58452: PPUSH
58453: CALL 60589 0 3
// end ;
58457: GO 58411
58459: POP
58460: POP
// if horses then
58461: LD_VAR 0 5
58465: IFFALSE 58532
// for i = 1 to horses do
58467: LD_ADDR_VAR 0 11
58471: PUSH
58472: DOUBLE
58473: LD_INT 1
58475: DEC
58476: ST_TO_ADDR
58477: LD_VAR 0 5
58481: PUSH
58482: FOR_TO
58483: IFFALSE 58530
// begin hc_class := 21 ;
58485: LD_ADDR_OWVAR 28
58489: PUSH
58490: LD_INT 21
58492: ST_TO_ADDR
// hc_gallery :=  ;
58493: LD_ADDR_OWVAR 33
58497: PUSH
58498: LD_STRING 
58500: ST_TO_ADDR
// animal := CreateHuman ;
58501: LD_ADDR_VAR 0 12
58505: PUSH
58506: CALL_OW 44
58510: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58511: LD_VAR 0 12
58515: PPUSH
58516: LD_VAR 0 8
58520: PPUSH
58521: LD_INT 0
58523: PPUSH
58524: CALL 60589 0 3
// end ;
58528: GO 58482
58530: POP
58531: POP
// if birds then
58532: LD_VAR 0 1
58536: IFFALSE 58603
// for i = 1 to birds do
58538: LD_ADDR_VAR 0 11
58542: PUSH
58543: DOUBLE
58544: LD_INT 1
58546: DEC
58547: ST_TO_ADDR
58548: LD_VAR 0 1
58552: PUSH
58553: FOR_TO
58554: IFFALSE 58601
// begin hc_class = 18 ;
58556: LD_ADDR_OWVAR 28
58560: PUSH
58561: LD_INT 18
58563: ST_TO_ADDR
// hc_gallery =  ;
58564: LD_ADDR_OWVAR 33
58568: PUSH
58569: LD_STRING 
58571: ST_TO_ADDR
// animal := CreateHuman ;
58572: LD_ADDR_VAR 0 12
58576: PUSH
58577: CALL_OW 44
58581: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58582: LD_VAR 0 12
58586: PPUSH
58587: LD_VAR 0 8
58591: PPUSH
58592: LD_INT 0
58594: PPUSH
58595: CALL 60589 0 3
// end ;
58599: GO 58553
58601: POP
58602: POP
// if tigers then
58603: LD_VAR 0 2
58607: IFFALSE 58691
// for i = 1 to tigers do
58609: LD_ADDR_VAR 0 11
58613: PUSH
58614: DOUBLE
58615: LD_INT 1
58617: DEC
58618: ST_TO_ADDR
58619: LD_VAR 0 2
58623: PUSH
58624: FOR_TO
58625: IFFALSE 58689
// begin hc_class = class_tiger ;
58627: LD_ADDR_OWVAR 28
58631: PUSH
58632: LD_INT 14
58634: ST_TO_ADDR
// hc_gallery =  ;
58635: LD_ADDR_OWVAR 33
58639: PUSH
58640: LD_STRING 
58642: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58643: LD_ADDR_OWVAR 35
58647: PUSH
58648: LD_INT 7
58650: NEG
58651: PPUSH
58652: LD_INT 7
58654: PPUSH
58655: CALL_OW 12
58659: ST_TO_ADDR
// animal := CreateHuman ;
58660: LD_ADDR_VAR 0 12
58664: PUSH
58665: CALL_OW 44
58669: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58670: LD_VAR 0 12
58674: PPUSH
58675: LD_VAR 0 8
58679: PPUSH
58680: LD_INT 0
58682: PPUSH
58683: CALL 60589 0 3
// end ;
58687: GO 58624
58689: POP
58690: POP
// if apemans then
58691: LD_VAR 0 3
58695: IFFALSE 58818
// for i = 1 to apemans do
58697: LD_ADDR_VAR 0 11
58701: PUSH
58702: DOUBLE
58703: LD_INT 1
58705: DEC
58706: ST_TO_ADDR
58707: LD_VAR 0 3
58711: PUSH
58712: FOR_TO
58713: IFFALSE 58816
// begin hc_class = class_apeman ;
58715: LD_ADDR_OWVAR 28
58719: PUSH
58720: LD_INT 12
58722: ST_TO_ADDR
// hc_gallery =  ;
58723: LD_ADDR_OWVAR 33
58727: PUSH
58728: LD_STRING 
58730: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58731: LD_ADDR_OWVAR 35
58735: PUSH
58736: LD_INT 2
58738: NEG
58739: PPUSH
58740: LD_INT 2
58742: PPUSH
58743: CALL_OW 12
58747: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58748: LD_ADDR_OWVAR 31
58752: PUSH
58753: LD_INT 1
58755: PPUSH
58756: LD_INT 3
58758: PPUSH
58759: CALL_OW 12
58763: PUSH
58764: LD_INT 1
58766: PPUSH
58767: LD_INT 3
58769: PPUSH
58770: CALL_OW 12
58774: PUSH
58775: LD_INT 0
58777: PUSH
58778: LD_INT 0
58780: PUSH
58781: EMPTY
58782: LIST
58783: LIST
58784: LIST
58785: LIST
58786: ST_TO_ADDR
// animal := CreateHuman ;
58787: LD_ADDR_VAR 0 12
58791: PUSH
58792: CALL_OW 44
58796: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58797: LD_VAR 0 12
58801: PPUSH
58802: LD_VAR 0 8
58806: PPUSH
58807: LD_INT 0
58809: PPUSH
58810: CALL 60589 0 3
// end ;
58814: GO 58712
58816: POP
58817: POP
// if enchidnas then
58818: LD_VAR 0 4
58822: IFFALSE 58889
// for i = 1 to enchidnas do
58824: LD_ADDR_VAR 0 11
58828: PUSH
58829: DOUBLE
58830: LD_INT 1
58832: DEC
58833: ST_TO_ADDR
58834: LD_VAR 0 4
58838: PUSH
58839: FOR_TO
58840: IFFALSE 58887
// begin hc_class = 13 ;
58842: LD_ADDR_OWVAR 28
58846: PUSH
58847: LD_INT 13
58849: ST_TO_ADDR
// hc_gallery =  ;
58850: LD_ADDR_OWVAR 33
58854: PUSH
58855: LD_STRING 
58857: ST_TO_ADDR
// animal := CreateHuman ;
58858: LD_ADDR_VAR 0 12
58862: PUSH
58863: CALL_OW 44
58867: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58868: LD_VAR 0 12
58872: PPUSH
58873: LD_VAR 0 8
58877: PPUSH
58878: LD_INT 0
58880: PPUSH
58881: CALL 60589 0 3
// end ;
58885: GO 58839
58887: POP
58888: POP
// if fishes then
58889: LD_VAR 0 7
58893: IFFALSE 58960
// for i = 1 to fishes do
58895: LD_ADDR_VAR 0 11
58899: PUSH
58900: DOUBLE
58901: LD_INT 1
58903: DEC
58904: ST_TO_ADDR
58905: LD_VAR 0 7
58909: PUSH
58910: FOR_TO
58911: IFFALSE 58958
// begin hc_class = 20 ;
58913: LD_ADDR_OWVAR 28
58917: PUSH
58918: LD_INT 20
58920: ST_TO_ADDR
// hc_gallery =  ;
58921: LD_ADDR_OWVAR 33
58925: PUSH
58926: LD_STRING 
58928: ST_TO_ADDR
// animal := CreateHuman ;
58929: LD_ADDR_VAR 0 12
58933: PUSH
58934: CALL_OW 44
58938: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58939: LD_VAR 0 12
58943: PPUSH
58944: LD_VAR 0 9
58948: PPUSH
58949: LD_INT 0
58951: PPUSH
58952: CALL 60589 0 3
// end ;
58956: GO 58910
58958: POP
58959: POP
// end ;
58960: LD_VAR 0 10
58964: RET
// export function WantHeal ( sci , unit ) ; begin
58965: LD_INT 0
58967: PPUSH
// if GetTaskList ( sci ) > 0 then
58968: LD_VAR 0 1
58972: PPUSH
58973: CALL_OW 437
58977: PUSH
58978: LD_INT 0
58980: GREATER
58981: IFFALSE 59051
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58983: LD_VAR 0 1
58987: PPUSH
58988: CALL_OW 437
58992: PUSH
58993: LD_INT 1
58995: ARRAY
58996: PUSH
58997: LD_INT 1
58999: ARRAY
59000: PUSH
59001: LD_STRING l
59003: EQUAL
59004: PUSH
59005: LD_VAR 0 1
59009: PPUSH
59010: CALL_OW 437
59014: PUSH
59015: LD_INT 1
59017: ARRAY
59018: PUSH
59019: LD_INT 4
59021: ARRAY
59022: PUSH
59023: LD_VAR 0 2
59027: EQUAL
59028: AND
59029: IFFALSE 59041
// result := true else
59031: LD_ADDR_VAR 0 3
59035: PUSH
59036: LD_INT 1
59038: ST_TO_ADDR
59039: GO 59049
// result := false ;
59041: LD_ADDR_VAR 0 3
59045: PUSH
59046: LD_INT 0
59048: ST_TO_ADDR
// end else
59049: GO 59059
// result := false ;
59051: LD_ADDR_VAR 0 3
59055: PUSH
59056: LD_INT 0
59058: ST_TO_ADDR
// end ;
59059: LD_VAR 0 3
59063: RET
// export function HealTarget ( sci ) ; begin
59064: LD_INT 0
59066: PPUSH
// if not sci then
59067: LD_VAR 0 1
59071: NOT
59072: IFFALSE 59076
// exit ;
59074: GO 59141
// result := 0 ;
59076: LD_ADDR_VAR 0 2
59080: PUSH
59081: LD_INT 0
59083: ST_TO_ADDR
// if GetTaskList ( sci ) then
59084: LD_VAR 0 1
59088: PPUSH
59089: CALL_OW 437
59093: IFFALSE 59141
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59095: LD_VAR 0 1
59099: PPUSH
59100: CALL_OW 437
59104: PUSH
59105: LD_INT 1
59107: ARRAY
59108: PUSH
59109: LD_INT 1
59111: ARRAY
59112: PUSH
59113: LD_STRING l
59115: EQUAL
59116: IFFALSE 59141
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59118: LD_ADDR_VAR 0 2
59122: PUSH
59123: LD_VAR 0 1
59127: PPUSH
59128: CALL_OW 437
59132: PUSH
59133: LD_INT 1
59135: ARRAY
59136: PUSH
59137: LD_INT 4
59139: ARRAY
59140: ST_TO_ADDR
// end ;
59141: LD_VAR 0 2
59145: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59146: LD_INT 0
59148: PPUSH
59149: PPUSH
59150: PPUSH
59151: PPUSH
// if not base_units then
59152: LD_VAR 0 1
59156: NOT
59157: IFFALSE 59161
// exit ;
59159: GO 59248
// result := false ;
59161: LD_ADDR_VAR 0 2
59165: PUSH
59166: LD_INT 0
59168: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59169: LD_ADDR_VAR 0 5
59173: PUSH
59174: LD_VAR 0 1
59178: PPUSH
59179: LD_INT 21
59181: PUSH
59182: LD_INT 3
59184: PUSH
59185: EMPTY
59186: LIST
59187: LIST
59188: PPUSH
59189: CALL_OW 72
59193: ST_TO_ADDR
// if not tmp then
59194: LD_VAR 0 5
59198: NOT
59199: IFFALSE 59203
// exit ;
59201: GO 59248
// for i in tmp do
59203: LD_ADDR_VAR 0 3
59207: PUSH
59208: LD_VAR 0 5
59212: PUSH
59213: FOR_IN
59214: IFFALSE 59246
// begin result := EnemyInRange ( i , 22 ) ;
59216: LD_ADDR_VAR 0 2
59220: PUSH
59221: LD_VAR 0 3
59225: PPUSH
59226: LD_INT 22
59228: PPUSH
59229: CALL 56835 0 2
59233: ST_TO_ADDR
// if result then
59234: LD_VAR 0 2
59238: IFFALSE 59244
// exit ;
59240: POP
59241: POP
59242: GO 59248
// end ;
59244: GO 59213
59246: POP
59247: POP
// end ;
59248: LD_VAR 0 2
59252: RET
// export function FilterByTag ( units , tag ) ; begin
59253: LD_INT 0
59255: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59256: LD_ADDR_VAR 0 3
59260: PUSH
59261: LD_VAR 0 1
59265: PPUSH
59266: LD_INT 120
59268: PUSH
59269: LD_VAR 0 2
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: PPUSH
59278: CALL_OW 72
59282: ST_TO_ADDR
// end ;
59283: LD_VAR 0 3
59287: RET
// export function IsDriver ( un ) ; begin
59288: LD_INT 0
59290: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59291: LD_ADDR_VAR 0 2
59295: PUSH
59296: LD_VAR 0 1
59300: PUSH
59301: LD_INT 55
59303: PUSH
59304: EMPTY
59305: LIST
59306: PPUSH
59307: CALL_OW 69
59311: IN
59312: ST_TO_ADDR
// end ;
59313: LD_VAR 0 2
59317: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59318: LD_INT 0
59320: PPUSH
59321: PPUSH
// list := [ ] ;
59322: LD_ADDR_VAR 0 5
59326: PUSH
59327: EMPTY
59328: ST_TO_ADDR
// case d of 0 :
59329: LD_VAR 0 3
59333: PUSH
59334: LD_INT 0
59336: DOUBLE
59337: EQUAL
59338: IFTRUE 59342
59340: GO 59475
59342: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59343: LD_ADDR_VAR 0 5
59347: PUSH
59348: LD_VAR 0 1
59352: PUSH
59353: LD_INT 4
59355: MINUS
59356: PUSH
59357: LD_VAR 0 2
59361: PUSH
59362: LD_INT 4
59364: MINUS
59365: PUSH
59366: LD_INT 2
59368: PUSH
59369: EMPTY
59370: LIST
59371: LIST
59372: LIST
59373: PUSH
59374: LD_VAR 0 1
59378: PUSH
59379: LD_INT 3
59381: MINUS
59382: PUSH
59383: LD_VAR 0 2
59387: PUSH
59388: LD_INT 1
59390: PUSH
59391: EMPTY
59392: LIST
59393: LIST
59394: LIST
59395: PUSH
59396: LD_VAR 0 1
59400: PUSH
59401: LD_INT 4
59403: PLUS
59404: PUSH
59405: LD_VAR 0 2
59409: PUSH
59410: LD_INT 4
59412: PUSH
59413: EMPTY
59414: LIST
59415: LIST
59416: LIST
59417: PUSH
59418: LD_VAR 0 1
59422: PUSH
59423: LD_INT 3
59425: PLUS
59426: PUSH
59427: LD_VAR 0 2
59431: PUSH
59432: LD_INT 3
59434: PLUS
59435: PUSH
59436: LD_INT 5
59438: PUSH
59439: EMPTY
59440: LIST
59441: LIST
59442: LIST
59443: PUSH
59444: LD_VAR 0 1
59448: PUSH
59449: LD_VAR 0 2
59453: PUSH
59454: LD_INT 4
59456: PLUS
59457: PUSH
59458: LD_INT 0
59460: PUSH
59461: EMPTY
59462: LIST
59463: LIST
59464: LIST
59465: PUSH
59466: EMPTY
59467: LIST
59468: LIST
59469: LIST
59470: LIST
59471: LIST
59472: ST_TO_ADDR
// end ; 1 :
59473: GO 60173
59475: LD_INT 1
59477: DOUBLE
59478: EQUAL
59479: IFTRUE 59483
59481: GO 59616
59483: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59484: LD_ADDR_VAR 0 5
59488: PUSH
59489: LD_VAR 0 1
59493: PUSH
59494: LD_VAR 0 2
59498: PUSH
59499: LD_INT 4
59501: MINUS
59502: PUSH
59503: LD_INT 3
59505: PUSH
59506: EMPTY
59507: LIST
59508: LIST
59509: LIST
59510: PUSH
59511: LD_VAR 0 1
59515: PUSH
59516: LD_INT 3
59518: MINUS
59519: PUSH
59520: LD_VAR 0 2
59524: PUSH
59525: LD_INT 3
59527: MINUS
59528: PUSH
59529: LD_INT 2
59531: PUSH
59532: EMPTY
59533: LIST
59534: LIST
59535: LIST
59536: PUSH
59537: LD_VAR 0 1
59541: PUSH
59542: LD_INT 4
59544: MINUS
59545: PUSH
59546: LD_VAR 0 2
59550: PUSH
59551: LD_INT 1
59553: PUSH
59554: EMPTY
59555: LIST
59556: LIST
59557: LIST
59558: PUSH
59559: LD_VAR 0 1
59563: PUSH
59564: LD_VAR 0 2
59568: PUSH
59569: LD_INT 3
59571: PLUS
59572: PUSH
59573: LD_INT 0
59575: PUSH
59576: EMPTY
59577: LIST
59578: LIST
59579: LIST
59580: PUSH
59581: LD_VAR 0 1
59585: PUSH
59586: LD_INT 4
59588: PLUS
59589: PUSH
59590: LD_VAR 0 2
59594: PUSH
59595: LD_INT 4
59597: PLUS
59598: PUSH
59599: LD_INT 5
59601: PUSH
59602: EMPTY
59603: LIST
59604: LIST
59605: LIST
59606: PUSH
59607: EMPTY
59608: LIST
59609: LIST
59610: LIST
59611: LIST
59612: LIST
59613: ST_TO_ADDR
// end ; 2 :
59614: GO 60173
59616: LD_INT 2
59618: DOUBLE
59619: EQUAL
59620: IFTRUE 59624
59622: GO 59753
59624: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59625: LD_ADDR_VAR 0 5
59629: PUSH
59630: LD_VAR 0 1
59634: PUSH
59635: LD_VAR 0 2
59639: PUSH
59640: LD_INT 3
59642: MINUS
59643: PUSH
59644: LD_INT 3
59646: PUSH
59647: EMPTY
59648: LIST
59649: LIST
59650: LIST
59651: PUSH
59652: LD_VAR 0 1
59656: PUSH
59657: LD_INT 4
59659: PLUS
59660: PUSH
59661: LD_VAR 0 2
59665: PUSH
59666: LD_INT 4
59668: PUSH
59669: EMPTY
59670: LIST
59671: LIST
59672: LIST
59673: PUSH
59674: LD_VAR 0 1
59678: PUSH
59679: LD_VAR 0 2
59683: PUSH
59684: LD_INT 4
59686: PLUS
59687: PUSH
59688: LD_INT 0
59690: PUSH
59691: EMPTY
59692: LIST
59693: LIST
59694: LIST
59695: PUSH
59696: LD_VAR 0 1
59700: PUSH
59701: LD_INT 3
59703: MINUS
59704: PUSH
59705: LD_VAR 0 2
59709: PUSH
59710: LD_INT 1
59712: PUSH
59713: EMPTY
59714: LIST
59715: LIST
59716: LIST
59717: PUSH
59718: LD_VAR 0 1
59722: PUSH
59723: LD_INT 4
59725: MINUS
59726: PUSH
59727: LD_VAR 0 2
59731: PUSH
59732: LD_INT 4
59734: MINUS
59735: PUSH
59736: LD_INT 2
59738: PUSH
59739: EMPTY
59740: LIST
59741: LIST
59742: LIST
59743: PUSH
59744: EMPTY
59745: LIST
59746: LIST
59747: LIST
59748: LIST
59749: LIST
59750: ST_TO_ADDR
// end ; 3 :
59751: GO 60173
59753: LD_INT 3
59755: DOUBLE
59756: EQUAL
59757: IFTRUE 59761
59759: GO 59894
59761: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59762: LD_ADDR_VAR 0 5
59766: PUSH
59767: LD_VAR 0 1
59771: PUSH
59772: LD_INT 3
59774: PLUS
59775: PUSH
59776: LD_VAR 0 2
59780: PUSH
59781: LD_INT 4
59783: PUSH
59784: EMPTY
59785: LIST
59786: LIST
59787: LIST
59788: PUSH
59789: LD_VAR 0 1
59793: PUSH
59794: LD_INT 4
59796: PLUS
59797: PUSH
59798: LD_VAR 0 2
59802: PUSH
59803: LD_INT 4
59805: PLUS
59806: PUSH
59807: LD_INT 5
59809: PUSH
59810: EMPTY
59811: LIST
59812: LIST
59813: LIST
59814: PUSH
59815: LD_VAR 0 1
59819: PUSH
59820: LD_INT 4
59822: MINUS
59823: PUSH
59824: LD_VAR 0 2
59828: PUSH
59829: LD_INT 1
59831: PUSH
59832: EMPTY
59833: LIST
59834: LIST
59835: LIST
59836: PUSH
59837: LD_VAR 0 1
59841: PUSH
59842: LD_VAR 0 2
59846: PUSH
59847: LD_INT 4
59849: MINUS
59850: PUSH
59851: LD_INT 3
59853: PUSH
59854: EMPTY
59855: LIST
59856: LIST
59857: LIST
59858: PUSH
59859: LD_VAR 0 1
59863: PUSH
59864: LD_INT 3
59866: MINUS
59867: PUSH
59868: LD_VAR 0 2
59872: PUSH
59873: LD_INT 3
59875: MINUS
59876: PUSH
59877: LD_INT 2
59879: PUSH
59880: EMPTY
59881: LIST
59882: LIST
59883: LIST
59884: PUSH
59885: EMPTY
59886: LIST
59887: LIST
59888: LIST
59889: LIST
59890: LIST
59891: ST_TO_ADDR
// end ; 4 :
59892: GO 60173
59894: LD_INT 4
59896: DOUBLE
59897: EQUAL
59898: IFTRUE 59902
59900: GO 60035
59902: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59903: LD_ADDR_VAR 0 5
59907: PUSH
59908: LD_VAR 0 1
59912: PUSH
59913: LD_VAR 0 2
59917: PUSH
59918: LD_INT 4
59920: PLUS
59921: PUSH
59922: LD_INT 0
59924: PUSH
59925: EMPTY
59926: LIST
59927: LIST
59928: LIST
59929: PUSH
59930: LD_VAR 0 1
59934: PUSH
59935: LD_INT 3
59937: PLUS
59938: PUSH
59939: LD_VAR 0 2
59943: PUSH
59944: LD_INT 3
59946: PLUS
59947: PUSH
59948: LD_INT 5
59950: PUSH
59951: EMPTY
59952: LIST
59953: LIST
59954: LIST
59955: PUSH
59956: LD_VAR 0 1
59960: PUSH
59961: LD_INT 4
59963: PLUS
59964: PUSH
59965: LD_VAR 0 2
59969: PUSH
59970: LD_INT 4
59972: PUSH
59973: EMPTY
59974: LIST
59975: LIST
59976: LIST
59977: PUSH
59978: LD_VAR 0 1
59982: PUSH
59983: LD_VAR 0 2
59987: PUSH
59988: LD_INT 3
59990: MINUS
59991: PUSH
59992: LD_INT 3
59994: PUSH
59995: EMPTY
59996: LIST
59997: LIST
59998: LIST
59999: PUSH
60000: LD_VAR 0 1
60004: PUSH
60005: LD_INT 4
60007: MINUS
60008: PUSH
60009: LD_VAR 0 2
60013: PUSH
60014: LD_INT 4
60016: MINUS
60017: PUSH
60018: LD_INT 2
60020: PUSH
60021: EMPTY
60022: LIST
60023: LIST
60024: LIST
60025: PUSH
60026: EMPTY
60027: LIST
60028: LIST
60029: LIST
60030: LIST
60031: LIST
60032: ST_TO_ADDR
// end ; 5 :
60033: GO 60173
60035: LD_INT 5
60037: DOUBLE
60038: EQUAL
60039: IFTRUE 60043
60041: GO 60172
60043: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60044: LD_ADDR_VAR 0 5
60048: PUSH
60049: LD_VAR 0 1
60053: PUSH
60054: LD_INT 4
60056: MINUS
60057: PUSH
60058: LD_VAR 0 2
60062: PUSH
60063: LD_INT 1
60065: PUSH
60066: EMPTY
60067: LIST
60068: LIST
60069: LIST
60070: PUSH
60071: LD_VAR 0 1
60075: PUSH
60076: LD_VAR 0 2
60080: PUSH
60081: LD_INT 4
60083: MINUS
60084: PUSH
60085: LD_INT 3
60087: PUSH
60088: EMPTY
60089: LIST
60090: LIST
60091: LIST
60092: PUSH
60093: LD_VAR 0 1
60097: PUSH
60098: LD_INT 4
60100: PLUS
60101: PUSH
60102: LD_VAR 0 2
60106: PUSH
60107: LD_INT 4
60109: PLUS
60110: PUSH
60111: LD_INT 5
60113: PUSH
60114: EMPTY
60115: LIST
60116: LIST
60117: LIST
60118: PUSH
60119: LD_VAR 0 1
60123: PUSH
60124: LD_INT 3
60126: PLUS
60127: PUSH
60128: LD_VAR 0 2
60132: PUSH
60133: LD_INT 4
60135: PUSH
60136: EMPTY
60137: LIST
60138: LIST
60139: LIST
60140: PUSH
60141: LD_VAR 0 1
60145: PUSH
60146: LD_VAR 0 2
60150: PUSH
60151: LD_INT 3
60153: PLUS
60154: PUSH
60155: LD_INT 0
60157: PUSH
60158: EMPTY
60159: LIST
60160: LIST
60161: LIST
60162: PUSH
60163: EMPTY
60164: LIST
60165: LIST
60166: LIST
60167: LIST
60168: LIST
60169: ST_TO_ADDR
// end ; end ;
60170: GO 60173
60172: POP
// result := list ;
60173: LD_ADDR_VAR 0 4
60177: PUSH
60178: LD_VAR 0 5
60182: ST_TO_ADDR
// end ;
60183: LD_VAR 0 4
60187: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60188: LD_INT 0
60190: PPUSH
60191: PPUSH
60192: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60193: LD_VAR 0 1
60197: NOT
60198: PUSH
60199: LD_VAR 0 2
60203: PUSH
60204: LD_INT 1
60206: PUSH
60207: LD_INT 2
60209: PUSH
60210: LD_INT 3
60212: PUSH
60213: LD_INT 4
60215: PUSH
60216: EMPTY
60217: LIST
60218: LIST
60219: LIST
60220: LIST
60221: IN
60222: NOT
60223: OR
60224: IFFALSE 60228
// exit ;
60226: GO 60311
// tmp := [ ] ;
60228: LD_ADDR_VAR 0 5
60232: PUSH
60233: EMPTY
60234: ST_TO_ADDR
// for i in units do
60235: LD_ADDR_VAR 0 4
60239: PUSH
60240: LD_VAR 0 1
60244: PUSH
60245: FOR_IN
60246: IFFALSE 60280
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
60248: LD_ADDR_VAR 0 5
60252: PUSH
60253: LD_VAR 0 5
60257: PPUSH
60258: LD_VAR 0 4
60262: PPUSH
60263: LD_VAR 0 2
60267: PPUSH
60268: CALL_OW 259
60272: PPUSH
60273: CALL 61672 0 2
60277: ST_TO_ADDR
60278: GO 60245
60280: POP
60281: POP
// if not tmp then
60282: LD_VAR 0 5
60286: NOT
60287: IFFALSE 60291
// exit ;
60289: GO 60311
// result := SortListByListDesc ( units , tmp ) ;
60291: LD_ADDR_VAR 0 3
60295: PUSH
60296: LD_VAR 0 1
60300: PPUSH
60301: LD_VAR 0 5
60305: PPUSH
60306: CALL_OW 77
60310: ST_TO_ADDR
// end ;
60311: LD_VAR 0 3
60315: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60316: LD_INT 0
60318: PPUSH
60319: PPUSH
60320: PPUSH
// result := false ;
60321: LD_ADDR_VAR 0 3
60325: PUSH
60326: LD_INT 0
60328: ST_TO_ADDR
// if not building then
60329: LD_VAR 0 2
60333: NOT
60334: IFFALSE 60338
// exit ;
60336: GO 60476
// x := GetX ( building ) ;
60338: LD_ADDR_VAR 0 4
60342: PUSH
60343: LD_VAR 0 2
60347: PPUSH
60348: CALL_OW 250
60352: ST_TO_ADDR
// y := GetY ( building ) ;
60353: LD_ADDR_VAR 0 5
60357: PUSH
60358: LD_VAR 0 2
60362: PPUSH
60363: CALL_OW 251
60367: ST_TO_ADDR
// if not x or not y then
60368: LD_VAR 0 4
60372: NOT
60373: PUSH
60374: LD_VAR 0 5
60378: NOT
60379: OR
60380: IFFALSE 60384
// exit ;
60382: GO 60476
// if GetTaskList ( unit ) then
60384: LD_VAR 0 1
60388: PPUSH
60389: CALL_OW 437
60393: IFFALSE 60476
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60395: LD_STRING e
60397: PUSH
60398: LD_VAR 0 1
60402: PPUSH
60403: CALL_OW 437
60407: PUSH
60408: LD_INT 1
60410: ARRAY
60411: PUSH
60412: LD_INT 1
60414: ARRAY
60415: EQUAL
60416: PUSH
60417: LD_VAR 0 4
60421: PUSH
60422: LD_VAR 0 1
60426: PPUSH
60427: CALL_OW 437
60431: PUSH
60432: LD_INT 1
60434: ARRAY
60435: PUSH
60436: LD_INT 2
60438: ARRAY
60439: EQUAL
60440: AND
60441: PUSH
60442: LD_VAR 0 5
60446: PUSH
60447: LD_VAR 0 1
60451: PPUSH
60452: CALL_OW 437
60456: PUSH
60457: LD_INT 1
60459: ARRAY
60460: PUSH
60461: LD_INT 3
60463: ARRAY
60464: EQUAL
60465: AND
60466: IFFALSE 60476
// result := true end ;
60468: LD_ADDR_VAR 0 3
60472: PUSH
60473: LD_INT 1
60475: ST_TO_ADDR
// end ;
60476: LD_VAR 0 3
60480: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60481: LD_INT 0
60483: PPUSH
// result := false ;
60484: LD_ADDR_VAR 0 4
60488: PUSH
60489: LD_INT 0
60491: ST_TO_ADDR
// if GetTaskList ( unit ) then
60492: LD_VAR 0 1
60496: PPUSH
60497: CALL_OW 437
60501: IFFALSE 60584
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60503: LD_STRING M
60505: PUSH
60506: LD_VAR 0 1
60510: PPUSH
60511: CALL_OW 437
60515: PUSH
60516: LD_INT 1
60518: ARRAY
60519: PUSH
60520: LD_INT 1
60522: ARRAY
60523: EQUAL
60524: PUSH
60525: LD_VAR 0 2
60529: PUSH
60530: LD_VAR 0 1
60534: PPUSH
60535: CALL_OW 437
60539: PUSH
60540: LD_INT 1
60542: ARRAY
60543: PUSH
60544: LD_INT 2
60546: ARRAY
60547: EQUAL
60548: AND
60549: PUSH
60550: LD_VAR 0 3
60554: PUSH
60555: LD_VAR 0 1
60559: PPUSH
60560: CALL_OW 437
60564: PUSH
60565: LD_INT 1
60567: ARRAY
60568: PUSH
60569: LD_INT 3
60571: ARRAY
60572: EQUAL
60573: AND
60574: IFFALSE 60584
// result := true ;
60576: LD_ADDR_VAR 0 4
60580: PUSH
60581: LD_INT 1
60583: ST_TO_ADDR
// end ; end ;
60584: LD_VAR 0 4
60588: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60589: LD_INT 0
60591: PPUSH
60592: PPUSH
60593: PPUSH
60594: PPUSH
// if not unit or not area then
60595: LD_VAR 0 1
60599: NOT
60600: PUSH
60601: LD_VAR 0 2
60605: NOT
60606: OR
60607: IFFALSE 60611
// exit ;
60609: GO 60775
// tmp := AreaToList ( area , i ) ;
60611: LD_ADDR_VAR 0 6
60615: PUSH
60616: LD_VAR 0 2
60620: PPUSH
60621: LD_VAR 0 5
60625: PPUSH
60626: CALL_OW 517
60630: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60631: LD_ADDR_VAR 0 5
60635: PUSH
60636: DOUBLE
60637: LD_INT 1
60639: DEC
60640: ST_TO_ADDR
60641: LD_VAR 0 6
60645: PUSH
60646: LD_INT 1
60648: ARRAY
60649: PUSH
60650: FOR_TO
60651: IFFALSE 60773
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60653: LD_ADDR_VAR 0 7
60657: PUSH
60658: LD_VAR 0 6
60662: PUSH
60663: LD_INT 1
60665: ARRAY
60666: PUSH
60667: LD_VAR 0 5
60671: ARRAY
60672: PUSH
60673: LD_VAR 0 6
60677: PUSH
60678: LD_INT 2
60680: ARRAY
60681: PUSH
60682: LD_VAR 0 5
60686: ARRAY
60687: PUSH
60688: EMPTY
60689: LIST
60690: LIST
60691: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
60692: LD_VAR 0 7
60696: PUSH
60697: LD_INT 1
60699: ARRAY
60700: PPUSH
60701: LD_VAR 0 7
60705: PUSH
60706: LD_INT 2
60708: ARRAY
60709: PPUSH
60710: CALL_OW 428
60714: PUSH
60715: LD_INT 0
60717: EQUAL
60718: IFFALSE 60771
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60720: LD_VAR 0 1
60724: PPUSH
60725: LD_VAR 0 7
60729: PUSH
60730: LD_INT 1
60732: ARRAY
60733: PPUSH
60734: LD_VAR 0 7
60738: PUSH
60739: LD_INT 2
60741: ARRAY
60742: PPUSH
60743: LD_VAR 0 3
60747: PPUSH
60748: CALL_OW 48
// result := IsPlaced ( unit ) ;
60752: LD_ADDR_VAR 0 4
60756: PUSH
60757: LD_VAR 0 1
60761: PPUSH
60762: CALL_OW 305
60766: ST_TO_ADDR
// exit ;
60767: POP
60768: POP
60769: GO 60775
// end ; end ;
60771: GO 60650
60773: POP
60774: POP
// end ;
60775: LD_VAR 0 4
60779: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60780: LD_INT 0
60782: PPUSH
60783: PPUSH
60784: PPUSH
// if not side or side > 8 then
60785: LD_VAR 0 1
60789: NOT
60790: PUSH
60791: LD_VAR 0 1
60795: PUSH
60796: LD_INT 8
60798: GREATER
60799: OR
60800: IFFALSE 60804
// exit ;
60802: GO 60991
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60804: LD_ADDR_VAR 0 4
60808: PUSH
60809: LD_INT 22
60811: PUSH
60812: LD_VAR 0 1
60816: PUSH
60817: EMPTY
60818: LIST
60819: LIST
60820: PUSH
60821: LD_INT 21
60823: PUSH
60824: LD_INT 3
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: PPUSH
60835: CALL_OW 69
60839: ST_TO_ADDR
// if not tmp then
60840: LD_VAR 0 4
60844: NOT
60845: IFFALSE 60849
// exit ;
60847: GO 60991
// enable_addtolog := true ;
60849: LD_ADDR_OWVAR 81
60853: PUSH
60854: LD_INT 1
60856: ST_TO_ADDR
// AddToLog ( [ ) ;
60857: LD_STRING [
60859: PPUSH
60860: CALL_OW 561
// for i in tmp do
60864: LD_ADDR_VAR 0 3
60868: PUSH
60869: LD_VAR 0 4
60873: PUSH
60874: FOR_IN
60875: IFFALSE 60982
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60877: LD_STRING [
60879: PUSH
60880: LD_VAR 0 3
60884: PPUSH
60885: CALL_OW 266
60889: STR
60890: PUSH
60891: LD_STRING , 
60893: STR
60894: PUSH
60895: LD_VAR 0 3
60899: PPUSH
60900: CALL_OW 250
60904: STR
60905: PUSH
60906: LD_STRING , 
60908: STR
60909: PUSH
60910: LD_VAR 0 3
60914: PPUSH
60915: CALL_OW 251
60919: STR
60920: PUSH
60921: LD_STRING , 
60923: STR
60924: PUSH
60925: LD_VAR 0 3
60929: PPUSH
60930: CALL_OW 254
60934: STR
60935: PUSH
60936: LD_STRING , 
60938: STR
60939: PUSH
60940: LD_VAR 0 3
60944: PPUSH
60945: LD_INT 1
60947: PPUSH
60948: CALL_OW 268
60952: STR
60953: PUSH
60954: LD_STRING , 
60956: STR
60957: PUSH
60958: LD_VAR 0 3
60962: PPUSH
60963: LD_INT 2
60965: PPUSH
60966: CALL_OW 268
60970: STR
60971: PUSH
60972: LD_STRING ],
60974: STR
60975: PPUSH
60976: CALL_OW 561
// end ;
60980: GO 60874
60982: POP
60983: POP
// AddToLog ( ]; ) ;
60984: LD_STRING ];
60986: PPUSH
60987: CALL_OW 561
// end ;
60991: LD_VAR 0 2
60995: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60996: LD_INT 0
60998: PPUSH
60999: PPUSH
61000: PPUSH
61001: PPUSH
61002: PPUSH
// if not area or not rate or not max then
61003: LD_VAR 0 1
61007: NOT
61008: PUSH
61009: LD_VAR 0 2
61013: NOT
61014: OR
61015: PUSH
61016: LD_VAR 0 4
61020: NOT
61021: OR
61022: IFFALSE 61026
// exit ;
61024: GO 61215
// while 1 do
61026: LD_INT 1
61028: IFFALSE 61215
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61030: LD_ADDR_VAR 0 9
61034: PUSH
61035: LD_VAR 0 1
61039: PPUSH
61040: LD_INT 1
61042: PPUSH
61043: CALL_OW 287
61047: PUSH
61048: LD_INT 10
61050: MUL
61051: ST_TO_ADDR
// r := rate / 10 ;
61052: LD_ADDR_VAR 0 7
61056: PUSH
61057: LD_VAR 0 2
61061: PUSH
61062: LD_INT 10
61064: DIVREAL
61065: ST_TO_ADDR
// time := 1 1$00 ;
61066: LD_ADDR_VAR 0 8
61070: PUSH
61071: LD_INT 2100
61073: ST_TO_ADDR
// if amount < min then
61074: LD_VAR 0 9
61078: PUSH
61079: LD_VAR 0 3
61083: LESS
61084: IFFALSE 61102
// r := r * 2 else
61086: LD_ADDR_VAR 0 7
61090: PUSH
61091: LD_VAR 0 7
61095: PUSH
61096: LD_INT 2
61098: MUL
61099: ST_TO_ADDR
61100: GO 61128
// if amount > max then
61102: LD_VAR 0 9
61106: PUSH
61107: LD_VAR 0 4
61111: GREATER
61112: IFFALSE 61128
// r := r / 2 ;
61114: LD_ADDR_VAR 0 7
61118: PUSH
61119: LD_VAR 0 7
61123: PUSH
61124: LD_INT 2
61126: DIVREAL
61127: ST_TO_ADDR
// time := time / r ;
61128: LD_ADDR_VAR 0 8
61132: PUSH
61133: LD_VAR 0 8
61137: PUSH
61138: LD_VAR 0 7
61142: DIVREAL
61143: ST_TO_ADDR
// if time < 0 then
61144: LD_VAR 0 8
61148: PUSH
61149: LD_INT 0
61151: LESS
61152: IFFALSE 61169
// time := time * - 1 ;
61154: LD_ADDR_VAR 0 8
61158: PUSH
61159: LD_VAR 0 8
61163: PUSH
61164: LD_INT 1
61166: NEG
61167: MUL
61168: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61169: LD_VAR 0 8
61173: PUSH
61174: LD_INT 35
61176: PPUSH
61177: LD_INT 875
61179: PPUSH
61180: CALL_OW 12
61184: PLUS
61185: PPUSH
61186: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61190: LD_INT 1
61192: PPUSH
61193: LD_INT 5
61195: PPUSH
61196: CALL_OW 12
61200: PPUSH
61201: LD_VAR 0 1
61205: PPUSH
61206: LD_INT 1
61208: PPUSH
61209: CALL_OW 55
// end ;
61213: GO 61026
// end ;
61215: LD_VAR 0 5
61219: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61220: LD_INT 0
61222: PPUSH
61223: PPUSH
61224: PPUSH
61225: PPUSH
61226: PPUSH
61227: PPUSH
61228: PPUSH
61229: PPUSH
// if not turrets or not factories then
61230: LD_VAR 0 1
61234: NOT
61235: PUSH
61236: LD_VAR 0 2
61240: NOT
61241: OR
61242: IFFALSE 61246
// exit ;
61244: GO 61553
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61246: LD_ADDR_VAR 0 10
61250: PUSH
61251: LD_INT 5
61253: PUSH
61254: LD_INT 6
61256: PUSH
61257: EMPTY
61258: LIST
61259: LIST
61260: PUSH
61261: LD_INT 2
61263: PUSH
61264: LD_INT 4
61266: PUSH
61267: EMPTY
61268: LIST
61269: LIST
61270: PUSH
61271: LD_INT 3
61273: PUSH
61274: LD_INT 5
61276: PUSH
61277: EMPTY
61278: LIST
61279: LIST
61280: PUSH
61281: EMPTY
61282: LIST
61283: LIST
61284: LIST
61285: PUSH
61286: LD_INT 24
61288: PUSH
61289: LD_INT 25
61291: PUSH
61292: EMPTY
61293: LIST
61294: LIST
61295: PUSH
61296: LD_INT 23
61298: PUSH
61299: LD_INT 27
61301: PUSH
61302: EMPTY
61303: LIST
61304: LIST
61305: PUSH
61306: EMPTY
61307: LIST
61308: LIST
61309: PUSH
61310: LD_INT 42
61312: PUSH
61313: LD_INT 43
61315: PUSH
61316: EMPTY
61317: LIST
61318: LIST
61319: PUSH
61320: LD_INT 44
61322: PUSH
61323: LD_INT 46
61325: PUSH
61326: EMPTY
61327: LIST
61328: LIST
61329: PUSH
61330: LD_INT 45
61332: PUSH
61333: LD_INT 47
61335: PUSH
61336: EMPTY
61337: LIST
61338: LIST
61339: PUSH
61340: EMPTY
61341: LIST
61342: LIST
61343: LIST
61344: PUSH
61345: EMPTY
61346: LIST
61347: LIST
61348: LIST
61349: ST_TO_ADDR
// result := [ ] ;
61350: LD_ADDR_VAR 0 3
61354: PUSH
61355: EMPTY
61356: ST_TO_ADDR
// for i in turrets do
61357: LD_ADDR_VAR 0 4
61361: PUSH
61362: LD_VAR 0 1
61366: PUSH
61367: FOR_IN
61368: IFFALSE 61551
// begin nat := GetNation ( i ) ;
61370: LD_ADDR_VAR 0 7
61374: PUSH
61375: LD_VAR 0 4
61379: PPUSH
61380: CALL_OW 248
61384: ST_TO_ADDR
// weapon := 0 ;
61385: LD_ADDR_VAR 0 8
61389: PUSH
61390: LD_INT 0
61392: ST_TO_ADDR
// if not nat then
61393: LD_VAR 0 7
61397: NOT
61398: IFFALSE 61402
// continue ;
61400: GO 61367
// for j in list [ nat ] do
61402: LD_ADDR_VAR 0 5
61406: PUSH
61407: LD_VAR 0 10
61411: PUSH
61412: LD_VAR 0 7
61416: ARRAY
61417: PUSH
61418: FOR_IN
61419: IFFALSE 61460
// if GetBWeapon ( i ) = j [ 1 ] then
61421: LD_VAR 0 4
61425: PPUSH
61426: CALL_OW 269
61430: PUSH
61431: LD_VAR 0 5
61435: PUSH
61436: LD_INT 1
61438: ARRAY
61439: EQUAL
61440: IFFALSE 61458
// begin weapon := j [ 2 ] ;
61442: LD_ADDR_VAR 0 8
61446: PUSH
61447: LD_VAR 0 5
61451: PUSH
61452: LD_INT 2
61454: ARRAY
61455: ST_TO_ADDR
// break ;
61456: GO 61460
// end ;
61458: GO 61418
61460: POP
61461: POP
// if not weapon then
61462: LD_VAR 0 8
61466: NOT
61467: IFFALSE 61471
// continue ;
61469: GO 61367
// for k in factories do
61471: LD_ADDR_VAR 0 6
61475: PUSH
61476: LD_VAR 0 2
61480: PUSH
61481: FOR_IN
61482: IFFALSE 61547
// begin weapons := AvailableWeaponList ( k ) ;
61484: LD_ADDR_VAR 0 9
61488: PUSH
61489: LD_VAR 0 6
61493: PPUSH
61494: CALL_OW 478
61498: ST_TO_ADDR
// if not weapons then
61499: LD_VAR 0 9
61503: NOT
61504: IFFALSE 61508
// continue ;
61506: GO 61481
// if weapon in weapons then
61508: LD_VAR 0 8
61512: PUSH
61513: LD_VAR 0 9
61517: IN
61518: IFFALSE 61545
// begin result := [ i , weapon ] ;
61520: LD_ADDR_VAR 0 3
61524: PUSH
61525: LD_VAR 0 4
61529: PUSH
61530: LD_VAR 0 8
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: ST_TO_ADDR
// exit ;
61539: POP
61540: POP
61541: POP
61542: POP
61543: GO 61553
// end ; end ;
61545: GO 61481
61547: POP
61548: POP
// end ;
61549: GO 61367
61551: POP
61552: POP
// end ;
61553: LD_VAR 0 3
61557: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61558: LD_INT 0
61560: PPUSH
// if not side or side > 8 then
61561: LD_VAR 0 3
61565: NOT
61566: PUSH
61567: LD_VAR 0 3
61571: PUSH
61572: LD_INT 8
61574: GREATER
61575: OR
61576: IFFALSE 61580
// exit ;
61578: GO 61639
// if not range then
61580: LD_VAR 0 4
61584: NOT
61585: IFFALSE 61596
// range := - 12 ;
61587: LD_ADDR_VAR 0 4
61591: PUSH
61592: LD_INT 12
61594: NEG
61595: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61596: LD_VAR 0 1
61600: PPUSH
61601: LD_VAR 0 2
61605: PPUSH
61606: LD_VAR 0 3
61610: PPUSH
61611: LD_VAR 0 4
61615: PPUSH
61616: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61620: LD_VAR 0 1
61624: PPUSH
61625: LD_VAR 0 2
61629: PPUSH
61630: LD_VAR 0 3
61634: PPUSH
61635: CALL_OW 331
// end ;
61639: LD_VAR 0 5
61643: RET
// export function Video ( mode ) ; begin
61644: LD_INT 0
61646: PPUSH
// ingame_video = mode ;
61647: LD_ADDR_OWVAR 52
61651: PUSH
61652: LD_VAR 0 1
61656: ST_TO_ADDR
// interface_hidden = mode ;
61657: LD_ADDR_OWVAR 54
61661: PUSH
61662: LD_VAR 0 1
61666: ST_TO_ADDR
// end ;
61667: LD_VAR 0 2
61671: RET
// export function Join ( array , element ) ; begin
61672: LD_INT 0
61674: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61675: LD_ADDR_VAR 0 3
61679: PUSH
61680: LD_VAR 0 1
61684: PPUSH
61685: LD_VAR 0 1
61689: PUSH
61690: LD_INT 1
61692: PLUS
61693: PPUSH
61694: LD_VAR 0 2
61698: PPUSH
61699: CALL_OW 1
61703: ST_TO_ADDR
// end ;
61704: LD_VAR 0 3
61708: RET
// export function JoinUnion ( array , element ) ; begin
61709: LD_INT 0
61711: PPUSH
// result := array union element ;
61712: LD_ADDR_VAR 0 3
61716: PUSH
61717: LD_VAR 0 1
61721: PUSH
61722: LD_VAR 0 2
61726: UNION
61727: ST_TO_ADDR
// end ;
61728: LD_VAR 0 3
61732: RET
// export function GetBehemoths ( side ) ; begin
61733: LD_INT 0
61735: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
61736: LD_ADDR_VAR 0 2
61740: PUSH
61741: LD_INT 22
61743: PUSH
61744: LD_VAR 0 1
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 31
61755: PUSH
61756: LD_INT 25
61758: PUSH
61759: EMPTY
61760: LIST
61761: LIST
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: PPUSH
61767: CALL_OW 69
61771: ST_TO_ADDR
// end ;
61772: LD_VAR 0 2
61776: RET
// export function Shuffle ( array ) ; var i , index ; begin
61777: LD_INT 0
61779: PPUSH
61780: PPUSH
61781: PPUSH
// result := [ ] ;
61782: LD_ADDR_VAR 0 2
61786: PUSH
61787: EMPTY
61788: ST_TO_ADDR
// if not array then
61789: LD_VAR 0 1
61793: NOT
61794: IFFALSE 61798
// exit ;
61796: GO 61897
// Randomize ;
61798: CALL_OW 10
// for i = array downto 1 do
61802: LD_ADDR_VAR 0 3
61806: PUSH
61807: DOUBLE
61808: LD_VAR 0 1
61812: INC
61813: ST_TO_ADDR
61814: LD_INT 1
61816: PUSH
61817: FOR_DOWNTO
61818: IFFALSE 61895
// begin index := rand ( 1 , array ) ;
61820: LD_ADDR_VAR 0 4
61824: PUSH
61825: LD_INT 1
61827: PPUSH
61828: LD_VAR 0 1
61832: PPUSH
61833: CALL_OW 12
61837: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61838: LD_ADDR_VAR 0 2
61842: PUSH
61843: LD_VAR 0 2
61847: PPUSH
61848: LD_VAR 0 2
61852: PUSH
61853: LD_INT 1
61855: PLUS
61856: PPUSH
61857: LD_VAR 0 1
61861: PUSH
61862: LD_VAR 0 4
61866: ARRAY
61867: PPUSH
61868: CALL_OW 2
61872: ST_TO_ADDR
// array := Delete ( array , index ) ;
61873: LD_ADDR_VAR 0 1
61877: PUSH
61878: LD_VAR 0 1
61882: PPUSH
61883: LD_VAR 0 4
61887: PPUSH
61888: CALL_OW 3
61892: ST_TO_ADDR
// end ;
61893: GO 61817
61895: POP
61896: POP
// end ;
61897: LD_VAR 0 2
61901: RET
// export function GetBaseMaterials ( base ) ; begin
61902: LD_INT 0
61904: PPUSH
// result := [ 0 , 0 , 0 ] ;
61905: LD_ADDR_VAR 0 2
61909: PUSH
61910: LD_INT 0
61912: PUSH
61913: LD_INT 0
61915: PUSH
61916: LD_INT 0
61918: PUSH
61919: EMPTY
61920: LIST
61921: LIST
61922: LIST
61923: ST_TO_ADDR
// if not base then
61924: LD_VAR 0 1
61928: NOT
61929: IFFALSE 61933
// exit ;
61931: GO 61982
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61933: LD_ADDR_VAR 0 2
61937: PUSH
61938: LD_VAR 0 1
61942: PPUSH
61943: LD_INT 1
61945: PPUSH
61946: CALL_OW 275
61950: PUSH
61951: LD_VAR 0 1
61955: PPUSH
61956: LD_INT 2
61958: PPUSH
61959: CALL_OW 275
61963: PUSH
61964: LD_VAR 0 1
61968: PPUSH
61969: LD_INT 3
61971: PPUSH
61972: CALL_OW 275
61976: PUSH
61977: EMPTY
61978: LIST
61979: LIST
61980: LIST
61981: ST_TO_ADDR
// end ;
61982: LD_VAR 0 2
61986: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61987: LD_INT 0
61989: PPUSH
61990: PPUSH
// result := array ;
61991: LD_ADDR_VAR 0 3
61995: PUSH
61996: LD_VAR 0 1
62000: ST_TO_ADDR
// if size >= result then
62001: LD_VAR 0 2
62005: PUSH
62006: LD_VAR 0 3
62010: GREATEREQUAL
62011: IFFALSE 62015
// exit ;
62013: GO 62065
// if size then
62015: LD_VAR 0 2
62019: IFFALSE 62065
// for i := array downto size do
62021: LD_ADDR_VAR 0 4
62025: PUSH
62026: DOUBLE
62027: LD_VAR 0 1
62031: INC
62032: ST_TO_ADDR
62033: LD_VAR 0 2
62037: PUSH
62038: FOR_DOWNTO
62039: IFFALSE 62063
// result := Delete ( result , result ) ;
62041: LD_ADDR_VAR 0 3
62045: PUSH
62046: LD_VAR 0 3
62050: PPUSH
62051: LD_VAR 0 3
62055: PPUSH
62056: CALL_OW 3
62060: ST_TO_ADDR
62061: GO 62038
62063: POP
62064: POP
// end ;
62065: LD_VAR 0 3
62069: RET
// export function ComExit ( unit ) ; var tmp ; begin
62070: LD_INT 0
62072: PPUSH
62073: PPUSH
// if not IsInUnit ( unit ) then
62074: LD_VAR 0 1
62078: PPUSH
62079: CALL_OW 310
62083: NOT
62084: IFFALSE 62088
// exit ;
62086: GO 62148
// tmp := IsInUnit ( unit ) ;
62088: LD_ADDR_VAR 0 3
62092: PUSH
62093: LD_VAR 0 1
62097: PPUSH
62098: CALL_OW 310
62102: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62103: LD_VAR 0 3
62107: PPUSH
62108: CALL_OW 247
62112: PUSH
62113: LD_INT 2
62115: EQUAL
62116: IFFALSE 62129
// ComExitVehicle ( unit ) else
62118: LD_VAR 0 1
62122: PPUSH
62123: CALL_OW 121
62127: GO 62138
// ComExitBuilding ( unit ) ;
62129: LD_VAR 0 1
62133: PPUSH
62134: CALL_OW 122
// result := tmp ;
62138: LD_ADDR_VAR 0 2
62142: PUSH
62143: LD_VAR 0 3
62147: ST_TO_ADDR
// end ;
62148: LD_VAR 0 2
62152: RET
// export function ComExitAll ( units ) ; var i ; begin
62153: LD_INT 0
62155: PPUSH
62156: PPUSH
// if not units then
62157: LD_VAR 0 1
62161: NOT
62162: IFFALSE 62166
// exit ;
62164: GO 62192
// for i in units do
62166: LD_ADDR_VAR 0 3
62170: PUSH
62171: LD_VAR 0 1
62175: PUSH
62176: FOR_IN
62177: IFFALSE 62190
// ComExit ( i ) ;
62179: LD_VAR 0 3
62183: PPUSH
62184: CALL 62070 0 1
62188: GO 62176
62190: POP
62191: POP
// end ;
62192: LD_VAR 0 2
62196: RET
// export function ResetHc ; begin
62197: LD_INT 0
62199: PPUSH
// InitHc ;
62200: CALL_OW 19
// hc_importance := 0 ;
62204: LD_ADDR_OWVAR 32
62208: PUSH
62209: LD_INT 0
62211: ST_TO_ADDR
// end ;
62212: LD_VAR 0 1
62216: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62217: LD_INT 0
62219: PPUSH
62220: PPUSH
62221: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62222: LD_ADDR_VAR 0 6
62226: PUSH
62227: LD_VAR 0 1
62231: PUSH
62232: LD_VAR 0 3
62236: PLUS
62237: PUSH
62238: LD_INT 2
62240: DIV
62241: ST_TO_ADDR
// if _x < 0 then
62242: LD_VAR 0 6
62246: PUSH
62247: LD_INT 0
62249: LESS
62250: IFFALSE 62267
// _x := _x * - 1 ;
62252: LD_ADDR_VAR 0 6
62256: PUSH
62257: LD_VAR 0 6
62261: PUSH
62262: LD_INT 1
62264: NEG
62265: MUL
62266: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62267: LD_ADDR_VAR 0 7
62271: PUSH
62272: LD_VAR 0 2
62276: PUSH
62277: LD_VAR 0 4
62281: PLUS
62282: PUSH
62283: LD_INT 2
62285: DIV
62286: ST_TO_ADDR
// if _y < 0 then
62287: LD_VAR 0 7
62291: PUSH
62292: LD_INT 0
62294: LESS
62295: IFFALSE 62312
// _y := _y * - 1 ;
62297: LD_ADDR_VAR 0 7
62301: PUSH
62302: LD_VAR 0 7
62306: PUSH
62307: LD_INT 1
62309: NEG
62310: MUL
62311: ST_TO_ADDR
// result := [ _x , _y ] ;
62312: LD_ADDR_VAR 0 5
62316: PUSH
62317: LD_VAR 0 6
62321: PUSH
62322: LD_VAR 0 7
62326: PUSH
62327: EMPTY
62328: LIST
62329: LIST
62330: ST_TO_ADDR
// end ;
62331: LD_VAR 0 5
62335: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62336: LD_INT 0
62338: PPUSH
62339: PPUSH
62340: PPUSH
62341: PPUSH
// task := GetTaskList ( unit ) ;
62342: LD_ADDR_VAR 0 7
62346: PUSH
62347: LD_VAR 0 1
62351: PPUSH
62352: CALL_OW 437
62356: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62357: LD_VAR 0 7
62361: NOT
62362: PUSH
62363: LD_VAR 0 1
62367: PPUSH
62368: LD_VAR 0 2
62372: PPUSH
62373: CALL_OW 308
62377: NOT
62378: AND
62379: IFFALSE 62383
// exit ;
62381: GO 62501
// if IsInArea ( unit , area ) then
62383: LD_VAR 0 1
62387: PPUSH
62388: LD_VAR 0 2
62392: PPUSH
62393: CALL_OW 308
62397: IFFALSE 62415
// begin ComMoveToArea ( unit , goAway ) ;
62399: LD_VAR 0 1
62403: PPUSH
62404: LD_VAR 0 3
62408: PPUSH
62409: CALL_OW 113
// exit ;
62413: GO 62501
// end ; if task [ 1 ] [ 1 ] <> M then
62415: LD_VAR 0 7
62419: PUSH
62420: LD_INT 1
62422: ARRAY
62423: PUSH
62424: LD_INT 1
62426: ARRAY
62427: PUSH
62428: LD_STRING M
62430: NONEQUAL
62431: IFFALSE 62435
// exit ;
62433: GO 62501
// x := task [ 1 ] [ 2 ] ;
62435: LD_ADDR_VAR 0 5
62439: PUSH
62440: LD_VAR 0 7
62444: PUSH
62445: LD_INT 1
62447: ARRAY
62448: PUSH
62449: LD_INT 2
62451: ARRAY
62452: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62453: LD_ADDR_VAR 0 6
62457: PUSH
62458: LD_VAR 0 7
62462: PUSH
62463: LD_INT 1
62465: ARRAY
62466: PUSH
62467: LD_INT 3
62469: ARRAY
62470: ST_TO_ADDR
// if InArea ( x , y , area ) then
62471: LD_VAR 0 5
62475: PPUSH
62476: LD_VAR 0 6
62480: PPUSH
62481: LD_VAR 0 2
62485: PPUSH
62486: CALL_OW 309
62490: IFFALSE 62501
// ComStop ( unit ) ;
62492: LD_VAR 0 1
62496: PPUSH
62497: CALL_OW 141
// end ;
62501: LD_VAR 0 4
62505: RET
// export function Abs ( value ) ; begin
62506: LD_INT 0
62508: PPUSH
// result := value ;
62509: LD_ADDR_VAR 0 2
62513: PUSH
62514: LD_VAR 0 1
62518: ST_TO_ADDR
// if value < 0 then
62519: LD_VAR 0 1
62523: PUSH
62524: LD_INT 0
62526: LESS
62527: IFFALSE 62544
// result := value * - 1 ;
62529: LD_ADDR_VAR 0 2
62533: PUSH
62534: LD_VAR 0 1
62538: PUSH
62539: LD_INT 1
62541: NEG
62542: MUL
62543: ST_TO_ADDR
// end ;
62544: LD_VAR 0 2
62548: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62549: LD_INT 0
62551: PPUSH
62552: PPUSH
62553: PPUSH
62554: PPUSH
62555: PPUSH
62556: PPUSH
62557: PPUSH
62558: PPUSH
// if not unit or not building then
62559: LD_VAR 0 1
62563: NOT
62564: PUSH
62565: LD_VAR 0 2
62569: NOT
62570: OR
62571: IFFALSE 62575
// exit ;
62573: GO 62801
// x := GetX ( building ) ;
62575: LD_ADDR_VAR 0 4
62579: PUSH
62580: LD_VAR 0 2
62584: PPUSH
62585: CALL_OW 250
62589: ST_TO_ADDR
// y := GetY ( building ) ;
62590: LD_ADDR_VAR 0 6
62594: PUSH
62595: LD_VAR 0 2
62599: PPUSH
62600: CALL_OW 251
62604: ST_TO_ADDR
// d := GetDir ( building ) ;
62605: LD_ADDR_VAR 0 8
62609: PUSH
62610: LD_VAR 0 2
62614: PPUSH
62615: CALL_OW 254
62619: ST_TO_ADDR
// r := 4 ;
62620: LD_ADDR_VAR 0 9
62624: PUSH
62625: LD_INT 4
62627: ST_TO_ADDR
// for i := 1 to 5 do
62628: LD_ADDR_VAR 0 10
62632: PUSH
62633: DOUBLE
62634: LD_INT 1
62636: DEC
62637: ST_TO_ADDR
62638: LD_INT 5
62640: PUSH
62641: FOR_TO
62642: IFFALSE 62799
// begin _x := ShiftX ( x , d , r + i ) ;
62644: LD_ADDR_VAR 0 5
62648: PUSH
62649: LD_VAR 0 4
62653: PPUSH
62654: LD_VAR 0 8
62658: PPUSH
62659: LD_VAR 0 9
62663: PUSH
62664: LD_VAR 0 10
62668: PLUS
62669: PPUSH
62670: CALL_OW 272
62674: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62675: LD_ADDR_VAR 0 7
62679: PUSH
62680: LD_VAR 0 6
62684: PPUSH
62685: LD_VAR 0 8
62689: PPUSH
62690: LD_VAR 0 9
62694: PUSH
62695: LD_VAR 0 10
62699: PLUS
62700: PPUSH
62701: CALL_OW 273
62705: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62706: LD_VAR 0 5
62710: PPUSH
62711: LD_VAR 0 7
62715: PPUSH
62716: CALL_OW 488
62720: PUSH
62721: LD_VAR 0 5
62725: PPUSH
62726: LD_VAR 0 7
62730: PPUSH
62731: CALL_OW 428
62735: PPUSH
62736: CALL_OW 247
62740: PUSH
62741: LD_INT 3
62743: PUSH
62744: LD_INT 2
62746: PUSH
62747: EMPTY
62748: LIST
62749: LIST
62750: IN
62751: NOT
62752: AND
62753: IFFALSE 62797
// begin ComMoveXY ( unit , _x , _y ) ;
62755: LD_VAR 0 1
62759: PPUSH
62760: LD_VAR 0 5
62764: PPUSH
62765: LD_VAR 0 7
62769: PPUSH
62770: CALL_OW 111
// result := [ _x , _y ] ;
62774: LD_ADDR_VAR 0 3
62778: PUSH
62779: LD_VAR 0 5
62783: PUSH
62784: LD_VAR 0 7
62788: PUSH
62789: EMPTY
62790: LIST
62791: LIST
62792: ST_TO_ADDR
// exit ;
62793: POP
62794: POP
62795: GO 62801
// end ; end ;
62797: GO 62641
62799: POP
62800: POP
// end ;
62801: LD_VAR 0 3
62805: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62806: LD_INT 0
62808: PPUSH
62809: PPUSH
62810: PPUSH
// result := 0 ;
62811: LD_ADDR_VAR 0 3
62815: PUSH
62816: LD_INT 0
62818: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62819: LD_VAR 0 1
62823: PUSH
62824: LD_INT 0
62826: LESS
62827: PUSH
62828: LD_VAR 0 1
62832: PUSH
62833: LD_INT 8
62835: GREATER
62836: OR
62837: PUSH
62838: LD_VAR 0 2
62842: PUSH
62843: LD_INT 0
62845: LESS
62846: OR
62847: PUSH
62848: LD_VAR 0 2
62852: PUSH
62853: LD_INT 8
62855: GREATER
62856: OR
62857: IFFALSE 62861
// exit ;
62859: GO 62936
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62861: LD_ADDR_VAR 0 4
62865: PUSH
62866: LD_INT 22
62868: PUSH
62869: LD_VAR 0 2
62873: PUSH
62874: EMPTY
62875: LIST
62876: LIST
62877: PPUSH
62878: CALL_OW 69
62882: PUSH
62883: FOR_IN
62884: IFFALSE 62934
// begin un := UnitShoot ( i ) ;
62886: LD_ADDR_VAR 0 5
62890: PUSH
62891: LD_VAR 0 4
62895: PPUSH
62896: CALL_OW 504
62900: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62901: LD_VAR 0 5
62905: PPUSH
62906: CALL_OW 255
62910: PUSH
62911: LD_VAR 0 1
62915: EQUAL
62916: IFFALSE 62932
// begin result := un ;
62918: LD_ADDR_VAR 0 3
62922: PUSH
62923: LD_VAR 0 5
62927: ST_TO_ADDR
// exit ;
62928: POP
62929: POP
62930: GO 62936
// end ; end ;
62932: GO 62883
62934: POP
62935: POP
// end ;
62936: LD_VAR 0 3
62940: RET
// export function GetCargoBay ( units ) ; begin
62941: LD_INT 0
62943: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62944: LD_ADDR_VAR 0 2
62948: PUSH
62949: LD_VAR 0 1
62953: PPUSH
62954: LD_INT 2
62956: PUSH
62957: LD_INT 34
62959: PUSH
62960: LD_INT 12
62962: PUSH
62963: EMPTY
62964: LIST
62965: LIST
62966: PUSH
62967: LD_INT 34
62969: PUSH
62970: LD_INT 51
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 34
62979: PUSH
62980: LD_INT 32
62982: PUSH
62983: EMPTY
62984: LIST
62985: LIST
62986: PUSH
62987: LD_INT 34
62989: PUSH
62990: LD_INT 89
62992: PUSH
62993: EMPTY
62994: LIST
62995: LIST
62996: PUSH
62997: EMPTY
62998: LIST
62999: LIST
63000: LIST
63001: LIST
63002: LIST
63003: PPUSH
63004: CALL_OW 72
63008: ST_TO_ADDR
// end ;
63009: LD_VAR 0 2
63013: RET
// export function Negate ( value ) ; begin
63014: LD_INT 0
63016: PPUSH
// result := not value ;
63017: LD_ADDR_VAR 0 2
63021: PUSH
63022: LD_VAR 0 1
63026: NOT
63027: ST_TO_ADDR
// end ;
63028: LD_VAR 0 2
63032: RET
// export function Inc ( value ) ; begin
63033: LD_INT 0
63035: PPUSH
// result := value + 1 ;
63036: LD_ADDR_VAR 0 2
63040: PUSH
63041: LD_VAR 0 1
63045: PUSH
63046: LD_INT 1
63048: PLUS
63049: ST_TO_ADDR
// end ;
63050: LD_VAR 0 2
63054: RET
// export function Dec ( value ) ; begin
63055: LD_INT 0
63057: PPUSH
// result := value - 1 ;
63058: LD_ADDR_VAR 0 2
63062: PUSH
63063: LD_VAR 0 1
63067: PUSH
63068: LD_INT 1
63070: MINUS
63071: ST_TO_ADDR
// end ;
63072: LD_VAR 0 2
63076: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63077: LD_INT 0
63079: PPUSH
63080: PPUSH
63081: PPUSH
63082: PPUSH
63083: PPUSH
63084: PPUSH
63085: PPUSH
63086: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63087: LD_VAR 0 1
63091: PPUSH
63092: LD_VAR 0 2
63096: PPUSH
63097: CALL_OW 488
63101: NOT
63102: PUSH
63103: LD_VAR 0 3
63107: PPUSH
63108: LD_VAR 0 4
63112: PPUSH
63113: CALL_OW 488
63117: NOT
63118: OR
63119: IFFALSE 63132
// begin result := - 1 ;
63121: LD_ADDR_VAR 0 5
63125: PUSH
63126: LD_INT 1
63128: NEG
63129: ST_TO_ADDR
// exit ;
63130: GO 63367
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63132: LD_ADDR_VAR 0 12
63136: PUSH
63137: LD_VAR 0 1
63141: PPUSH
63142: LD_VAR 0 2
63146: PPUSH
63147: LD_VAR 0 3
63151: PPUSH
63152: LD_VAR 0 4
63156: PPUSH
63157: CALL 62217 0 4
63161: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63162: LD_ADDR_VAR 0 11
63166: PUSH
63167: LD_VAR 0 1
63171: PPUSH
63172: LD_VAR 0 2
63176: PPUSH
63177: LD_VAR 0 12
63181: PUSH
63182: LD_INT 1
63184: ARRAY
63185: PPUSH
63186: LD_VAR 0 12
63190: PUSH
63191: LD_INT 2
63193: ARRAY
63194: PPUSH
63195: CALL_OW 298
63199: ST_TO_ADDR
// distance := 9999 ;
63200: LD_ADDR_VAR 0 10
63204: PUSH
63205: LD_INT 9999
63207: ST_TO_ADDR
// for i := 0 to 5 do
63208: LD_ADDR_VAR 0 6
63212: PUSH
63213: DOUBLE
63214: LD_INT 0
63216: DEC
63217: ST_TO_ADDR
63218: LD_INT 5
63220: PUSH
63221: FOR_TO
63222: IFFALSE 63365
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63224: LD_ADDR_VAR 0 7
63228: PUSH
63229: LD_VAR 0 1
63233: PPUSH
63234: LD_VAR 0 6
63238: PPUSH
63239: LD_VAR 0 11
63243: PPUSH
63244: CALL_OW 272
63248: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63249: LD_ADDR_VAR 0 8
63253: PUSH
63254: LD_VAR 0 2
63258: PPUSH
63259: LD_VAR 0 6
63263: PPUSH
63264: LD_VAR 0 11
63268: PPUSH
63269: CALL_OW 273
63273: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63274: LD_VAR 0 7
63278: PPUSH
63279: LD_VAR 0 8
63283: PPUSH
63284: CALL_OW 488
63288: NOT
63289: IFFALSE 63293
// continue ;
63291: GO 63221
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63293: LD_ADDR_VAR 0 9
63297: PUSH
63298: LD_VAR 0 12
63302: PUSH
63303: LD_INT 1
63305: ARRAY
63306: PPUSH
63307: LD_VAR 0 12
63311: PUSH
63312: LD_INT 2
63314: ARRAY
63315: PPUSH
63316: LD_VAR 0 7
63320: PPUSH
63321: LD_VAR 0 8
63325: PPUSH
63326: CALL_OW 298
63330: ST_TO_ADDR
// if tmp < distance then
63331: LD_VAR 0 9
63335: PUSH
63336: LD_VAR 0 10
63340: LESS
63341: IFFALSE 63363
// begin result := i ;
63343: LD_ADDR_VAR 0 5
63347: PUSH
63348: LD_VAR 0 6
63352: ST_TO_ADDR
// distance := tmp ;
63353: LD_ADDR_VAR 0 10
63357: PUSH
63358: LD_VAR 0 9
63362: ST_TO_ADDR
// end ; end ;
63363: GO 63221
63365: POP
63366: POP
// end ;
63367: LD_VAR 0 5
63371: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63372: LD_INT 0
63374: PPUSH
63375: PPUSH
// if not driver or not IsInUnit ( driver ) then
63376: LD_VAR 0 1
63380: NOT
63381: PUSH
63382: LD_VAR 0 1
63386: PPUSH
63387: CALL_OW 310
63391: NOT
63392: OR
63393: IFFALSE 63397
// exit ;
63395: GO 63487
// vehicle := IsInUnit ( driver ) ;
63397: LD_ADDR_VAR 0 3
63401: PUSH
63402: LD_VAR 0 1
63406: PPUSH
63407: CALL_OW 310
63411: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63412: LD_VAR 0 1
63416: PPUSH
63417: LD_STRING \
63419: PUSH
63420: LD_INT 0
63422: PUSH
63423: LD_INT 0
63425: PUSH
63426: LD_INT 0
63428: PUSH
63429: LD_INT 0
63431: PUSH
63432: LD_INT 0
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: LIST
63442: LIST
63443: LIST
63444: LIST
63445: LIST
63446: PUSH
63447: LD_STRING E
63449: PUSH
63450: LD_INT 0
63452: PUSH
63453: LD_INT 0
63455: PUSH
63456: LD_VAR 0 3
63460: PUSH
63461: LD_INT 0
63463: PUSH
63464: LD_INT 0
63466: PUSH
63467: LD_INT 0
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: LIST
63474: LIST
63475: LIST
63476: LIST
63477: LIST
63478: PUSH
63479: EMPTY
63480: LIST
63481: LIST
63482: PPUSH
63483: CALL_OW 446
// end ;
63487: LD_VAR 0 2
63491: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63492: LD_INT 0
63494: PPUSH
63495: PPUSH
// if not driver or not IsInUnit ( driver ) then
63496: LD_VAR 0 1
63500: NOT
63501: PUSH
63502: LD_VAR 0 1
63506: PPUSH
63507: CALL_OW 310
63511: NOT
63512: OR
63513: IFFALSE 63517
// exit ;
63515: GO 63607
// vehicle := IsInUnit ( driver ) ;
63517: LD_ADDR_VAR 0 3
63521: PUSH
63522: LD_VAR 0 1
63526: PPUSH
63527: CALL_OW 310
63531: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63532: LD_VAR 0 1
63536: PPUSH
63537: LD_STRING \
63539: PUSH
63540: LD_INT 0
63542: PUSH
63543: LD_INT 0
63545: PUSH
63546: LD_INT 0
63548: PUSH
63549: LD_INT 0
63551: PUSH
63552: LD_INT 0
63554: PUSH
63555: LD_INT 0
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: LIST
63562: LIST
63563: LIST
63564: LIST
63565: LIST
63566: PUSH
63567: LD_STRING E
63569: PUSH
63570: LD_INT 0
63572: PUSH
63573: LD_INT 0
63575: PUSH
63576: LD_VAR 0 3
63580: PUSH
63581: LD_INT 0
63583: PUSH
63584: LD_INT 0
63586: PUSH
63587: LD_INT 0
63589: PUSH
63590: EMPTY
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PPUSH
63603: CALL_OW 447
// end ;
63607: LD_VAR 0 2
63611: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63612: LD_INT 0
63614: PPUSH
63615: PPUSH
63616: PPUSH
// tmp := [ ] ;
63617: LD_ADDR_VAR 0 5
63621: PUSH
63622: EMPTY
63623: ST_TO_ADDR
// for i in units do
63624: LD_ADDR_VAR 0 4
63628: PUSH
63629: LD_VAR 0 1
63633: PUSH
63634: FOR_IN
63635: IFFALSE 63673
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63637: LD_ADDR_VAR 0 5
63641: PUSH
63642: LD_VAR 0 5
63646: PPUSH
63647: LD_VAR 0 5
63651: PUSH
63652: LD_INT 1
63654: PLUS
63655: PPUSH
63656: LD_VAR 0 4
63660: PPUSH
63661: CALL_OW 256
63665: PPUSH
63666: CALL_OW 2
63670: ST_TO_ADDR
63671: GO 63634
63673: POP
63674: POP
// if not tmp then
63675: LD_VAR 0 5
63679: NOT
63680: IFFALSE 63684
// exit ;
63682: GO 63732
// if asc then
63684: LD_VAR 0 2
63688: IFFALSE 63712
// result := SortListByListAsc ( units , tmp ) else
63690: LD_ADDR_VAR 0 3
63694: PUSH
63695: LD_VAR 0 1
63699: PPUSH
63700: LD_VAR 0 5
63704: PPUSH
63705: CALL_OW 76
63709: ST_TO_ADDR
63710: GO 63732
// result := SortListByListDesc ( units , tmp ) ;
63712: LD_ADDR_VAR 0 3
63716: PUSH
63717: LD_VAR 0 1
63721: PPUSH
63722: LD_VAR 0 5
63726: PPUSH
63727: CALL_OW 77
63731: ST_TO_ADDR
// end ;
63732: LD_VAR 0 3
63736: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63737: LD_INT 0
63739: PPUSH
63740: PPUSH
// task := GetTaskList ( mech ) ;
63741: LD_ADDR_VAR 0 4
63745: PUSH
63746: LD_VAR 0 1
63750: PPUSH
63751: CALL_OW 437
63755: ST_TO_ADDR
// if not task then
63756: LD_VAR 0 4
63760: NOT
63761: IFFALSE 63765
// exit ;
63763: GO 63807
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63765: LD_ADDR_VAR 0 3
63769: PUSH
63770: LD_VAR 0 4
63774: PUSH
63775: LD_INT 1
63777: ARRAY
63778: PUSH
63779: LD_INT 1
63781: ARRAY
63782: PUSH
63783: LD_STRING r
63785: EQUAL
63786: PUSH
63787: LD_VAR 0 4
63791: PUSH
63792: LD_INT 1
63794: ARRAY
63795: PUSH
63796: LD_INT 4
63798: ARRAY
63799: PUSH
63800: LD_VAR 0 2
63804: EQUAL
63805: AND
63806: ST_TO_ADDR
// end ;
63807: LD_VAR 0 3
63811: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63812: LD_INT 0
63814: PPUSH
// SetDir ( unit , d ) ;
63815: LD_VAR 0 1
63819: PPUSH
63820: LD_VAR 0 4
63824: PPUSH
63825: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63829: LD_VAR 0 1
63833: PPUSH
63834: LD_VAR 0 2
63838: PPUSH
63839: LD_VAR 0 3
63843: PPUSH
63844: LD_VAR 0 5
63848: PPUSH
63849: CALL_OW 48
// end ;
63853: LD_VAR 0 6
63857: RET
// export function ToNaturalNumber ( number ) ; begin
63858: LD_INT 0
63860: PPUSH
// result := number div 1 ;
63861: LD_ADDR_VAR 0 2
63865: PUSH
63866: LD_VAR 0 1
63870: PUSH
63871: LD_INT 1
63873: DIV
63874: ST_TO_ADDR
// if number < 0 then
63875: LD_VAR 0 1
63879: PUSH
63880: LD_INT 0
63882: LESS
63883: IFFALSE 63893
// result := 0 ;
63885: LD_ADDR_VAR 0 2
63889: PUSH
63890: LD_INT 0
63892: ST_TO_ADDR
// end ;
63893: LD_VAR 0 2
63897: RET
// export function SortByClass ( units , class ) ; var un ; begin
63898: LD_INT 0
63900: PPUSH
63901: PPUSH
// if not units or not class then
63902: LD_VAR 0 1
63906: NOT
63907: PUSH
63908: LD_VAR 0 2
63912: NOT
63913: OR
63914: IFFALSE 63918
// exit ;
63916: GO 64013
// result := [ ] ;
63918: LD_ADDR_VAR 0 3
63922: PUSH
63923: EMPTY
63924: ST_TO_ADDR
// for un in units do
63925: LD_ADDR_VAR 0 4
63929: PUSH
63930: LD_VAR 0 1
63934: PUSH
63935: FOR_IN
63936: IFFALSE 64011
// if GetClass ( un ) = class then
63938: LD_VAR 0 4
63942: PPUSH
63943: CALL_OW 257
63947: PUSH
63948: LD_VAR 0 2
63952: EQUAL
63953: IFFALSE 63980
// result := Insert ( result , 1 , un ) else
63955: LD_ADDR_VAR 0 3
63959: PUSH
63960: LD_VAR 0 3
63964: PPUSH
63965: LD_INT 1
63967: PPUSH
63968: LD_VAR 0 4
63972: PPUSH
63973: CALL_OW 2
63977: ST_TO_ADDR
63978: GO 64009
// result := Replace ( result , result + 1 , un ) ;
63980: LD_ADDR_VAR 0 3
63984: PUSH
63985: LD_VAR 0 3
63989: PPUSH
63990: LD_VAR 0 3
63994: PUSH
63995: LD_INT 1
63997: PLUS
63998: PPUSH
63999: LD_VAR 0 4
64003: PPUSH
64004: CALL_OW 1
64008: ST_TO_ADDR
64009: GO 63935
64011: POP
64012: POP
// end ;
64013: LD_VAR 0 3
64017: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
64018: LD_INT 0
64020: PPUSH
64021: PPUSH
64022: PPUSH
64023: PPUSH
64024: PPUSH
64025: PPUSH
64026: PPUSH
// result := [ ] ;
64027: LD_ADDR_VAR 0 4
64031: PUSH
64032: EMPTY
64033: ST_TO_ADDR
// if x - r < 0 then
64034: LD_VAR 0 1
64038: PUSH
64039: LD_VAR 0 3
64043: MINUS
64044: PUSH
64045: LD_INT 0
64047: LESS
64048: IFFALSE 64060
// min_x := 0 else
64050: LD_ADDR_VAR 0 8
64054: PUSH
64055: LD_INT 0
64057: ST_TO_ADDR
64058: GO 64076
// min_x := x - r ;
64060: LD_ADDR_VAR 0 8
64064: PUSH
64065: LD_VAR 0 1
64069: PUSH
64070: LD_VAR 0 3
64074: MINUS
64075: ST_TO_ADDR
// if y - r < 0 then
64076: LD_VAR 0 2
64080: PUSH
64081: LD_VAR 0 3
64085: MINUS
64086: PUSH
64087: LD_INT 0
64089: LESS
64090: IFFALSE 64102
// min_y := 0 else
64092: LD_ADDR_VAR 0 7
64096: PUSH
64097: LD_INT 0
64099: ST_TO_ADDR
64100: GO 64118
// min_y := y - r ;
64102: LD_ADDR_VAR 0 7
64106: PUSH
64107: LD_VAR 0 2
64111: PUSH
64112: LD_VAR 0 3
64116: MINUS
64117: ST_TO_ADDR
// max_x := x + r ;
64118: LD_ADDR_VAR 0 9
64122: PUSH
64123: LD_VAR 0 1
64127: PUSH
64128: LD_VAR 0 3
64132: PLUS
64133: ST_TO_ADDR
// max_y := y + r ;
64134: LD_ADDR_VAR 0 10
64138: PUSH
64139: LD_VAR 0 2
64143: PUSH
64144: LD_VAR 0 3
64148: PLUS
64149: ST_TO_ADDR
// for _x = min_x to max_x do
64150: LD_ADDR_VAR 0 5
64154: PUSH
64155: DOUBLE
64156: LD_VAR 0 8
64160: DEC
64161: ST_TO_ADDR
64162: LD_VAR 0 9
64166: PUSH
64167: FOR_TO
64168: IFFALSE 64269
// for _y = min_y to max_y do
64170: LD_ADDR_VAR 0 6
64174: PUSH
64175: DOUBLE
64176: LD_VAR 0 7
64180: DEC
64181: ST_TO_ADDR
64182: LD_VAR 0 10
64186: PUSH
64187: FOR_TO
64188: IFFALSE 64265
// begin if not ValidHex ( _x , _y ) then
64190: LD_VAR 0 5
64194: PPUSH
64195: LD_VAR 0 6
64199: PPUSH
64200: CALL_OW 488
64204: NOT
64205: IFFALSE 64209
// continue ;
64207: GO 64187
// if GetResourceTypeXY ( _x , _y ) then
64209: LD_VAR 0 5
64213: PPUSH
64214: LD_VAR 0 6
64218: PPUSH
64219: CALL_OW 283
64223: IFFALSE 64263
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64225: LD_ADDR_VAR 0 4
64229: PUSH
64230: LD_VAR 0 4
64234: PPUSH
64235: LD_VAR 0 4
64239: PUSH
64240: LD_INT 1
64242: PLUS
64243: PPUSH
64244: LD_VAR 0 5
64248: PUSH
64249: LD_VAR 0 6
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PPUSH
64258: CALL_OW 1
64262: ST_TO_ADDR
// end ;
64263: GO 64187
64265: POP
64266: POP
64267: GO 64167
64269: POP
64270: POP
// end ;
64271: LD_VAR 0 4
64275: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64276: LD_INT 0
64278: PPUSH
64279: PPUSH
64280: PPUSH
64281: PPUSH
64282: PPUSH
64283: PPUSH
64284: PPUSH
64285: PPUSH
// if not units then
64286: LD_VAR 0 1
64290: NOT
64291: IFFALSE 64295
// exit ;
64293: GO 64819
// result := UnitFilter ( units , [ f_ok ] ) ;
64295: LD_ADDR_VAR 0 3
64299: PUSH
64300: LD_VAR 0 1
64304: PPUSH
64305: LD_INT 50
64307: PUSH
64308: EMPTY
64309: LIST
64310: PPUSH
64311: CALL_OW 72
64315: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64316: LD_ADDR_VAR 0 8
64320: PUSH
64321: LD_VAR 0 1
64325: PUSH
64326: LD_INT 1
64328: ARRAY
64329: PPUSH
64330: CALL_OW 255
64334: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64335: LD_ADDR_VAR 0 10
64339: PUSH
64340: LD_INT 29
64342: PUSH
64343: LD_INT 91
64345: PUSH
64346: LD_INT 49
64348: PUSH
64349: EMPTY
64350: LIST
64351: LIST
64352: LIST
64353: ST_TO_ADDR
// if not result then
64354: LD_VAR 0 3
64358: NOT
64359: IFFALSE 64363
// exit ;
64361: GO 64819
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64363: LD_ADDR_VAR 0 5
64367: PUSH
64368: LD_INT 81
64370: PUSH
64371: LD_VAR 0 8
64375: PUSH
64376: EMPTY
64377: LIST
64378: LIST
64379: PPUSH
64380: CALL_OW 69
64384: ST_TO_ADDR
// for i in result do
64385: LD_ADDR_VAR 0 4
64389: PUSH
64390: LD_VAR 0 3
64394: PUSH
64395: FOR_IN
64396: IFFALSE 64817
// begin tag := GetTag ( i ) + 1 ;
64398: LD_ADDR_VAR 0 9
64402: PUSH
64403: LD_VAR 0 4
64407: PPUSH
64408: CALL_OW 110
64412: PUSH
64413: LD_INT 1
64415: PLUS
64416: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64417: LD_ADDR_VAR 0 7
64421: PUSH
64422: LD_VAR 0 4
64426: PPUSH
64427: CALL_OW 250
64431: PPUSH
64432: LD_VAR 0 4
64436: PPUSH
64437: CALL_OW 251
64441: PPUSH
64442: LD_INT 6
64444: PPUSH
64445: CALL 64018 0 3
64449: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64450: LD_VAR 0 4
64454: PPUSH
64455: CALL_OW 247
64459: PUSH
64460: LD_INT 2
64462: EQUAL
64463: PUSH
64464: LD_VAR 0 7
64468: AND
64469: PUSH
64470: LD_VAR 0 4
64474: PPUSH
64475: CALL_OW 264
64479: PUSH
64480: LD_VAR 0 10
64484: IN
64485: NOT
64486: AND
64487: IFFALSE 64526
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64489: LD_VAR 0 4
64493: PPUSH
64494: LD_VAR 0 7
64498: PUSH
64499: LD_INT 1
64501: ARRAY
64502: PUSH
64503: LD_INT 1
64505: ARRAY
64506: PPUSH
64507: LD_VAR 0 7
64511: PUSH
64512: LD_INT 1
64514: ARRAY
64515: PUSH
64516: LD_INT 2
64518: ARRAY
64519: PPUSH
64520: CALL_OW 116
64524: GO 64815
// if path > tag then
64526: LD_VAR 0 2
64530: PUSH
64531: LD_VAR 0 9
64535: GREATER
64536: IFFALSE 64744
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64538: LD_ADDR_VAR 0 6
64542: PUSH
64543: LD_VAR 0 5
64547: PPUSH
64548: LD_INT 91
64550: PUSH
64551: LD_VAR 0 4
64555: PUSH
64556: LD_INT 8
64558: PUSH
64559: EMPTY
64560: LIST
64561: LIST
64562: LIST
64563: PPUSH
64564: CALL_OW 72
64568: ST_TO_ADDR
// if nearEnemy then
64569: LD_VAR 0 6
64573: IFFALSE 64642
// begin if GetWeapon ( i ) = ru_time_lapser then
64575: LD_VAR 0 4
64579: PPUSH
64580: CALL_OW 264
64584: PUSH
64585: LD_INT 49
64587: EQUAL
64588: IFFALSE 64616
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64590: LD_VAR 0 4
64594: PPUSH
64595: LD_VAR 0 6
64599: PPUSH
64600: LD_VAR 0 4
64604: PPUSH
64605: CALL_OW 74
64609: PPUSH
64610: CALL_OW 112
64614: GO 64640
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64616: LD_VAR 0 4
64620: PPUSH
64621: LD_VAR 0 6
64625: PPUSH
64626: LD_VAR 0 4
64630: PPUSH
64631: CALL_OW 74
64635: PPUSH
64636: CALL_OW 115
// end else
64640: GO 64742
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64642: LD_VAR 0 4
64646: PPUSH
64647: LD_VAR 0 2
64651: PUSH
64652: LD_VAR 0 9
64656: ARRAY
64657: PUSH
64658: LD_INT 1
64660: ARRAY
64661: PPUSH
64662: LD_VAR 0 2
64666: PUSH
64667: LD_VAR 0 9
64671: ARRAY
64672: PUSH
64673: LD_INT 2
64675: ARRAY
64676: PPUSH
64677: CALL_OW 297
64681: PUSH
64682: LD_INT 6
64684: GREATER
64685: IFFALSE 64728
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64687: LD_VAR 0 4
64691: PPUSH
64692: LD_VAR 0 2
64696: PUSH
64697: LD_VAR 0 9
64701: ARRAY
64702: PUSH
64703: LD_INT 1
64705: ARRAY
64706: PPUSH
64707: LD_VAR 0 2
64711: PUSH
64712: LD_VAR 0 9
64716: ARRAY
64717: PUSH
64718: LD_INT 2
64720: ARRAY
64721: PPUSH
64722: CALL_OW 114
64726: GO 64742
// SetTag ( i , tag ) ;
64728: LD_VAR 0 4
64732: PPUSH
64733: LD_VAR 0 9
64737: PPUSH
64738: CALL_OW 109
// end else
64742: GO 64815
// if enemy then
64744: LD_VAR 0 5
64748: IFFALSE 64815
// begin if GetWeapon ( i ) = ru_time_lapser then
64750: LD_VAR 0 4
64754: PPUSH
64755: CALL_OW 264
64759: PUSH
64760: LD_INT 49
64762: EQUAL
64763: IFFALSE 64791
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64765: LD_VAR 0 4
64769: PPUSH
64770: LD_VAR 0 5
64774: PPUSH
64775: LD_VAR 0 4
64779: PPUSH
64780: CALL_OW 74
64784: PPUSH
64785: CALL_OW 112
64789: GO 64815
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64791: LD_VAR 0 4
64795: PPUSH
64796: LD_VAR 0 5
64800: PPUSH
64801: LD_VAR 0 4
64805: PPUSH
64806: CALL_OW 74
64810: PPUSH
64811: CALL_OW 115
// end ; end ;
64815: GO 64395
64817: POP
64818: POP
// end ;
64819: LD_VAR 0 3
64823: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64824: LD_INT 0
64826: PPUSH
64827: PPUSH
64828: PPUSH
// if not unit or IsInUnit ( unit ) then
64829: LD_VAR 0 1
64833: NOT
64834: PUSH
64835: LD_VAR 0 1
64839: PPUSH
64840: CALL_OW 310
64844: OR
64845: IFFALSE 64849
// exit ;
64847: GO 64940
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64849: LD_ADDR_VAR 0 4
64853: PUSH
64854: LD_VAR 0 1
64858: PPUSH
64859: CALL_OW 250
64863: PPUSH
64864: LD_VAR 0 2
64868: PPUSH
64869: LD_INT 1
64871: PPUSH
64872: CALL_OW 272
64876: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64877: LD_ADDR_VAR 0 5
64881: PUSH
64882: LD_VAR 0 1
64886: PPUSH
64887: CALL_OW 251
64891: PPUSH
64892: LD_VAR 0 2
64896: PPUSH
64897: LD_INT 1
64899: PPUSH
64900: CALL_OW 273
64904: ST_TO_ADDR
// if ValidHex ( x , y ) then
64905: LD_VAR 0 4
64909: PPUSH
64910: LD_VAR 0 5
64914: PPUSH
64915: CALL_OW 488
64919: IFFALSE 64940
// ComTurnXY ( unit , x , y ) ;
64921: LD_VAR 0 1
64925: PPUSH
64926: LD_VAR 0 4
64930: PPUSH
64931: LD_VAR 0 5
64935: PPUSH
64936: CALL_OW 118
// end ;
64940: LD_VAR 0 3
64944: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64945: LD_INT 0
64947: PPUSH
64948: PPUSH
// result := false ;
64949: LD_ADDR_VAR 0 3
64953: PUSH
64954: LD_INT 0
64956: ST_TO_ADDR
// if not units then
64957: LD_VAR 0 2
64961: NOT
64962: IFFALSE 64966
// exit ;
64964: GO 65011
// for i in units do
64966: LD_ADDR_VAR 0 4
64970: PUSH
64971: LD_VAR 0 2
64975: PUSH
64976: FOR_IN
64977: IFFALSE 65009
// if See ( side , i ) then
64979: LD_VAR 0 1
64983: PPUSH
64984: LD_VAR 0 4
64988: PPUSH
64989: CALL_OW 292
64993: IFFALSE 65007
// begin result := true ;
64995: LD_ADDR_VAR 0 3
64999: PUSH
65000: LD_INT 1
65002: ST_TO_ADDR
// exit ;
65003: POP
65004: POP
65005: GO 65011
// end ;
65007: GO 64976
65009: POP
65010: POP
// end ;
65011: LD_VAR 0 3
65015: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
65016: LD_INT 0
65018: PPUSH
65019: PPUSH
65020: PPUSH
65021: PPUSH
// if not unit or not points then
65022: LD_VAR 0 1
65026: NOT
65027: PUSH
65028: LD_VAR 0 2
65032: NOT
65033: OR
65034: IFFALSE 65038
// exit ;
65036: GO 65128
// dist := 99999 ;
65038: LD_ADDR_VAR 0 5
65042: PUSH
65043: LD_INT 99999
65045: ST_TO_ADDR
// for i in points do
65046: LD_ADDR_VAR 0 4
65050: PUSH
65051: LD_VAR 0 2
65055: PUSH
65056: FOR_IN
65057: IFFALSE 65126
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
65059: LD_ADDR_VAR 0 6
65063: PUSH
65064: LD_VAR 0 1
65068: PPUSH
65069: LD_VAR 0 4
65073: PUSH
65074: LD_INT 1
65076: ARRAY
65077: PPUSH
65078: LD_VAR 0 4
65082: PUSH
65083: LD_INT 2
65085: ARRAY
65086: PPUSH
65087: CALL_OW 297
65091: ST_TO_ADDR
// if tmpDist < dist then
65092: LD_VAR 0 6
65096: PUSH
65097: LD_VAR 0 5
65101: LESS
65102: IFFALSE 65124
// begin result := i ;
65104: LD_ADDR_VAR 0 3
65108: PUSH
65109: LD_VAR 0 4
65113: ST_TO_ADDR
// dist := tmpDist ;
65114: LD_ADDR_VAR 0 5
65118: PUSH
65119: LD_VAR 0 6
65123: ST_TO_ADDR
// end ; end ;
65124: GO 65056
65126: POP
65127: POP
// end ;
65128: LD_VAR 0 3
65132: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65133: LD_INT 0
65135: PPUSH
// uc_side := side ;
65136: LD_ADDR_OWVAR 20
65140: PUSH
65141: LD_VAR 0 1
65145: ST_TO_ADDR
// uc_nation := 3 ;
65146: LD_ADDR_OWVAR 21
65150: PUSH
65151: LD_INT 3
65153: ST_TO_ADDR
// vc_chassis := 25 ;
65154: LD_ADDR_OWVAR 37
65158: PUSH
65159: LD_INT 25
65161: ST_TO_ADDR
// vc_engine := engine_siberite ;
65162: LD_ADDR_OWVAR 39
65166: PUSH
65167: LD_INT 3
65169: ST_TO_ADDR
// vc_control := control_computer ;
65170: LD_ADDR_OWVAR 38
65174: PUSH
65175: LD_INT 3
65177: ST_TO_ADDR
// vc_weapon := 59 ;
65178: LD_ADDR_OWVAR 40
65182: PUSH
65183: LD_INT 59
65185: ST_TO_ADDR
// result := CreateVehicle ;
65186: LD_ADDR_VAR 0 5
65190: PUSH
65191: CALL_OW 45
65195: ST_TO_ADDR
// SetDir ( result , d ) ;
65196: LD_VAR 0 5
65200: PPUSH
65201: LD_VAR 0 4
65205: PPUSH
65206: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65210: LD_VAR 0 5
65214: PPUSH
65215: LD_VAR 0 2
65219: PPUSH
65220: LD_VAR 0 3
65224: PPUSH
65225: LD_INT 0
65227: PPUSH
65228: CALL_OW 48
// end ;
65232: LD_VAR 0 5
65236: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65237: LD_INT 0
65239: PPUSH
65240: PPUSH
65241: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65242: LD_ADDR_VAR 0 2
65246: PUSH
65247: LD_INT 0
65249: PUSH
65250: LD_INT 0
65252: PUSH
65253: LD_INT 0
65255: PUSH
65256: LD_INT 0
65258: PUSH
65259: EMPTY
65260: LIST
65261: LIST
65262: LIST
65263: LIST
65264: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65265: LD_VAR 0 1
65269: NOT
65270: PUSH
65271: LD_VAR 0 1
65275: PPUSH
65276: CALL_OW 264
65280: PUSH
65281: LD_INT 12
65283: PUSH
65284: LD_INT 51
65286: PUSH
65287: LD_INT 32
65289: PUSH
65290: LD_INT 89
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: IN
65299: NOT
65300: OR
65301: IFFALSE 65305
// exit ;
65303: GO 65403
// for i := 1 to 3 do
65305: LD_ADDR_VAR 0 3
65309: PUSH
65310: DOUBLE
65311: LD_INT 1
65313: DEC
65314: ST_TO_ADDR
65315: LD_INT 3
65317: PUSH
65318: FOR_TO
65319: IFFALSE 65401
// begin tmp := GetCargo ( cargo , i ) ;
65321: LD_ADDR_VAR 0 4
65325: PUSH
65326: LD_VAR 0 1
65330: PPUSH
65331: LD_VAR 0 3
65335: PPUSH
65336: CALL_OW 289
65340: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65341: LD_ADDR_VAR 0 2
65345: PUSH
65346: LD_VAR 0 2
65350: PPUSH
65351: LD_VAR 0 3
65355: PPUSH
65356: LD_VAR 0 4
65360: PPUSH
65361: CALL_OW 1
65365: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65366: LD_ADDR_VAR 0 2
65370: PUSH
65371: LD_VAR 0 2
65375: PPUSH
65376: LD_INT 4
65378: PPUSH
65379: LD_VAR 0 2
65383: PUSH
65384: LD_INT 4
65386: ARRAY
65387: PUSH
65388: LD_VAR 0 4
65392: PLUS
65393: PPUSH
65394: CALL_OW 1
65398: ST_TO_ADDR
// end ;
65399: GO 65318
65401: POP
65402: POP
// end ;
65403: LD_VAR 0 2
65407: RET
// export function Length ( array ) ; begin
65408: LD_INT 0
65410: PPUSH
// result := array + 0 ;
65411: LD_ADDR_VAR 0 2
65415: PUSH
65416: LD_VAR 0 1
65420: PUSH
65421: LD_INT 0
65423: PLUS
65424: ST_TO_ADDR
// end ;
65425: LD_VAR 0 2
65429: RET
// export function PrepareArray ( array ) ; begin
65430: LD_INT 0
65432: PPUSH
// result := array diff 0 ;
65433: LD_ADDR_VAR 0 2
65437: PUSH
65438: LD_VAR 0 1
65442: PUSH
65443: LD_INT 0
65445: DIFF
65446: ST_TO_ADDR
// if not result [ 1 ] then
65447: LD_VAR 0 2
65451: PUSH
65452: LD_INT 1
65454: ARRAY
65455: NOT
65456: IFFALSE 65476
// result := Delete ( result , 1 ) ;
65458: LD_ADDR_VAR 0 2
65462: PUSH
65463: LD_VAR 0 2
65467: PPUSH
65468: LD_INT 1
65470: PPUSH
65471: CALL_OW 3
65475: ST_TO_ADDR
// end ;
65476: LD_VAR 0 2
65480: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
65481: LD_INT 0
65483: PPUSH
65484: PPUSH
65485: PPUSH
65486: PPUSH
// sibRocketRange := 25 ;
65487: LD_ADDR_VAR 0 6
65491: PUSH
65492: LD_INT 25
65494: ST_TO_ADDR
// result := false ;
65495: LD_ADDR_VAR 0 4
65499: PUSH
65500: LD_INT 0
65502: ST_TO_ADDR
// for i := 0 to 5 do
65503: LD_ADDR_VAR 0 5
65507: PUSH
65508: DOUBLE
65509: LD_INT 0
65511: DEC
65512: ST_TO_ADDR
65513: LD_INT 5
65515: PUSH
65516: FOR_TO
65517: IFFALSE 65584
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
65519: LD_VAR 0 1
65523: PPUSH
65524: LD_VAR 0 5
65528: PPUSH
65529: LD_VAR 0 6
65533: PPUSH
65534: CALL_OW 272
65538: PPUSH
65539: LD_VAR 0 2
65543: PPUSH
65544: LD_VAR 0 5
65548: PPUSH
65549: LD_VAR 0 6
65553: PPUSH
65554: CALL_OW 273
65558: PPUSH
65559: LD_VAR 0 3
65563: PPUSH
65564: CALL_OW 309
65568: IFFALSE 65582
// begin result := true ;
65570: LD_ADDR_VAR 0 4
65574: PUSH
65575: LD_INT 1
65577: ST_TO_ADDR
// exit ;
65578: POP
65579: POP
65580: GO 65586
// end ;
65582: GO 65516
65584: POP
65585: POP
// end ;
65586: LD_VAR 0 4
65590: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
65591: LD_INT 0
65593: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
65594: LD_VAR 0 1
65598: PPUSH
65599: LD_VAR 0 2
65603: PPUSH
65604: LD_INT 0
65606: PPUSH
65607: LD_INT 0
65609: PPUSH
65610: LD_INT 1
65612: PPUSH
65613: LD_INT 0
65615: PPUSH
65616: CALL_OW 587
// end ; end_of_file
65620: LD_VAR 0 3
65624: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65625: LD_VAR 0 1
65629: PPUSH
65630: LD_VAR 0 2
65634: PPUSH
65635: LD_VAR 0 3
65639: PPUSH
65640: LD_VAR 0 4
65644: PPUSH
65645: LD_VAR 0 5
65649: PPUSH
65650: LD_VAR 0 6
65654: PPUSH
65655: CALL 4244 0 6
// end ;
65659: PPOPN 6
65661: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65662: LD_INT 0
65664: PPUSH
// begin if not units then
65665: LD_VAR 0 1
65669: NOT
65670: IFFALSE 65674
// exit ;
65672: GO 65674
// end ;
65674: PPOPN 7
65676: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65677: CALL 4138 0 0
// end ;
65681: PPOPN 1
65683: END
