// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// FogOff ( 7 ) ;
  11: LD_INT 7
  13: PPUSH
  14: CALL_OW 344
// RandomizeAll ;
  18: CALL_OW 11
// InitVariables ;
  22: CALL 66 0 0
// LoadBuildings ;
  26: CALL 123 0 0
// PrepareAlliance ;
  30: CALL 666 0 0
// music_nat := [ 1 , 3 ] [ rand ( 1 , 2 ) ] ;
  34: LD_ADDR_OWVAR 71
  38: PUSH
  39: LD_INT 1
  41: PUSH
  42: LD_INT 3
  44: PUSH
  45: EMPTY
  46: LIST
  47: LIST
  48: PUSH
  49: LD_INT 1
  51: PPUSH
  52: LD_INT 2
  54: PPUSH
  55: CALL_OW 12
  59: ARRAY
  60: ST_TO_ADDR
// Action ;
  61: CALL 3462 0 0
// end ;
  65: END
// export debug ; export function InitVariables ; begin
  66: LD_INT 0
  68: PPUSH
// debug := false ;
  69: LD_ADDR_EXP 1
  73: PUSH
  74: LD_INT 0
  76: ST_TO_ADDR
// end ;
  77: LD_VAR 0 1
  81: RET
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
  82: LD_VAR 0 1
  86: PPUSH
  87: CALL 20249 0 1
// end ;
  91: PPOPN 1
  93: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
  94: LD_VAR 0 1
  98: PPUSH
  99: CALL 20207 0 1
// end ;
 103: PPOPN 1
 105: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
 106: LD_VAR 0 1
 110: PPUSH
 111: LD_VAR 0 2
 115: PPUSH
 116: CALL 20265 0 2
// end ; end_of_file
 120: PPOPN 2
 122: END
// export function LoadBuildings ; var i , tmp , b , j ; begin
 123: LD_INT 0
 125: PPUSH
 126: PPUSH
 127: PPUSH
 128: PPUSH
 129: PPUSH
// tmp := LoadVariable ( 13a_buildings , [ [ 7 , 1 , b_warehouse , 70 , 46 , 3 , 10 , 0 , 0 , 0 ] ] ) ;
 130: LD_ADDR_VAR 0 3
 134: PUSH
 135: LD_STRING 13a_buildings
 137: PPUSH
 138: LD_INT 7
 140: PUSH
 141: LD_INT 1
 143: PUSH
 144: LD_INT 1
 146: PUSH
 147: LD_INT 70
 149: PUSH
 150: LD_INT 46
 152: PUSH
 153: LD_INT 3
 155: PUSH
 156: LD_INT 10
 158: PUSH
 159: LD_INT 0
 161: PUSH
 162: LD_INT 0
 164: PUSH
 165: LD_INT 0
 167: PUSH
 168: EMPTY
 169: LIST
 170: LIST
 171: LIST
 172: LIST
 173: LIST
 174: LIST
 175: LIST
 176: LIST
 177: LIST
 178: LIST
 179: PUSH
 180: EMPTY
 181: LIST
 182: PPUSH
 183: CALL_OW 30
 187: ST_TO_ADDR
// bc_kind1 := - 1 ;
 188: LD_ADDR_OWVAR 44
 192: PUSH
 193: LD_INT 1
 195: NEG
 196: ST_TO_ADDR
// bc_kind2 := - 1 ;
 197: LD_ADDR_OWVAR 45
 201: PUSH
 202: LD_INT 1
 204: NEG
 205: ST_TO_ADDR
// for i in tmp do
 206: LD_ADDR_VAR 0 2
 210: PUSH
 211: LD_VAR 0 3
 215: PUSH
 216: FOR_IN
 217: IFFALSE 462
// begin uc_side := 7 ;
 219: LD_ADDR_OWVAR 20
 223: PUSH
 224: LD_INT 7
 226: ST_TO_ADDR
// uc_nation := i [ 2 ] ;
 227: LD_ADDR_OWVAR 21
 231: PUSH
 232: LD_VAR 0 2
 236: PUSH
 237: LD_INT 2
 239: ARRAY
 240: ST_TO_ADDR
// if i [ 2 ] = 2 then
 241: LD_VAR 0 2
 245: PUSH
 246: LD_INT 2
 248: ARRAY
 249: PUSH
 250: LD_INT 2
 252: EQUAL
 253: IFFALSE 263
// uc_side := 4 ;
 255: LD_ADDR_OWVAR 20
 259: PUSH
 260: LD_INT 4
 262: ST_TO_ADDR
// bc_type := i [ 3 ] ;
 263: LD_ADDR_OWVAR 42
 267: PUSH
 268: LD_VAR 0 2
 272: PUSH
 273: LD_INT 3
 275: ARRAY
 276: ST_TO_ADDR
// if i [ 3 ] in [ b_oil_mine , b_siberite_mine ] then
 277: LD_VAR 0 2
 281: PUSH
 282: LD_INT 3
 284: ARRAY
 285: PUSH
 286: LD_INT 29
 288: PUSH
 289: LD_INT 30
 291: PUSH
 292: EMPTY
 293: LIST
 294: LIST
 295: IN
 296: IFFALSE 329
// SetResourceVisibility ( i [ 4 ] , i [ 5 ] , i [ 1 ] ) ;
 298: LD_VAR 0 2
 302: PUSH
 303: LD_INT 4
 305: ARRAY
 306: PPUSH
 307: LD_VAR 0 2
 311: PUSH
 312: LD_INT 5
 314: ARRAY
 315: PPUSH
 316: LD_VAR 0 2
 320: PUSH
 321: LD_INT 1
 323: ARRAY
 324: PPUSH
 325: CALL_OW 441
// if i [ 8 ] then
 329: LD_VAR 0 2
 333: PUSH
 334: LD_INT 8
 336: ARRAY
 337: IFFALSE 353
// bc_kind1 := i [ 8 ] ;
 339: LD_ADDR_OWVAR 44
 343: PUSH
 344: LD_VAR 0 2
 348: PUSH
 349: LD_INT 8
 351: ARRAY
 352: ST_TO_ADDR
// if i [ 9 ] then
 353: LD_VAR 0 2
 357: PUSH
 358: LD_INT 9
 360: ARRAY
 361: IFFALSE 377
// bc_kind2 := i [ 9 ] ;
 363: LD_ADDR_OWVAR 45
 367: PUSH
 368: LD_VAR 0 2
 372: PUSH
 373: LD_INT 9
 375: ARRAY
 376: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( i [ 4 ] , i [ 5 ] , i [ 6 ] ) ;
 377: LD_ADDR_VAR 0 4
 381: PUSH
 382: LD_VAR 0 2
 386: PUSH
 387: LD_INT 4
 389: ARRAY
 390: PPUSH
 391: LD_VAR 0 2
 395: PUSH
 396: LD_INT 5
 398: ARRAY
 399: PPUSH
 400: LD_VAR 0 2
 404: PUSH
 405: LD_INT 6
 407: ARRAY
 408: PPUSH
 409: CALL_OW 47
 413: ST_TO_ADDR
// SetBLevel ( b , i [ 7 ] ) ;
 414: LD_VAR 0 4
 418: PPUSH
 419: LD_VAR 0 2
 423: PUSH
 424: LD_INT 7
 426: ARRAY
 427: PPUSH
 428: CALL_OW 241
// if i [ 10 ] then
 432: LD_VAR 0 2
 436: PUSH
 437: LD_INT 10
 439: ARRAY
 440: IFFALSE 460
// PlaceWeaponTurret ( b , i [ 10 ] ) ;
 442: LD_VAR 0 4
 446: PPUSH
 447: LD_VAR 0 2
 451: PUSH
 452: LD_INT 10
 454: ARRAY
 455: PPUSH
 456: CALL_OW 431
// end ;
 460: GO 216
 462: POP
 463: POP
// if HexInfo ( 144 , 65 ) = 0 then
 464: LD_INT 144
 466: PPUSH
 467: LD_INT 65
 469: PPUSH
 470: CALL_OW 428
 474: PUSH
 475: LD_INT 0
 477: EQUAL
 478: IFFALSE 515
// begin uc_side := 4 ;
 480: LD_ADDR_OWVAR 20
 484: PUSH
 485: LD_INT 4
 487: ST_TO_ADDR
// bc_type := b_warehouse ;
 488: LD_ADDR_OWVAR 42
 492: PUSH
 493: LD_INT 1
 495: ST_TO_ADDR
// b := CreateAndPlaceBuildingXYD ( 144 , 65 , 1 ) ;
 496: LD_ADDR_VAR 0 4
 500: PUSH
 501: LD_INT 144
 503: PPUSH
 504: LD_INT 65
 506: PPUSH
 507: LD_INT 1
 509: PPUSH
 510: CALL_OW 47
 514: ST_TO_ADDR
// end ; for i in FilterAllUnits ( [ [ f_side , 7 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) do
 515: LD_ADDR_VAR 0 2
 519: PUSH
 520: LD_INT 22
 522: PUSH
 523: LD_INT 7
 525: PUSH
 526: EMPTY
 527: LIST
 528: LIST
 529: PUSH
 530: LD_INT 2
 532: PUSH
 533: LD_INT 30
 535: PUSH
 536: LD_INT 0
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PUSH
 543: LD_INT 30
 545: PUSH
 546: LD_INT 1
 548: PUSH
 549: EMPTY
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: LIST
 557: PUSH
 558: EMPTY
 559: LIST
 560: LIST
 561: PPUSH
 562: CALL_OW 69
 566: PUSH
 567: FOR_IN
 568: IFFALSE 620
// for j = 1 to 3 do
 570: LD_ADDR_VAR 0 5
 574: PUSH
 575: DOUBLE
 576: LD_INT 1
 578: DEC
 579: ST_TO_ADDR
 580: LD_INT 3
 582: PUSH
 583: FOR_TO
 584: IFFALSE 616
// SetResourceType ( GetBase ( i ) , j , 3000 / j ) ;
 586: LD_VAR 0 2
 590: PPUSH
 591: CALL_OW 274
 595: PPUSH
 596: LD_VAR 0 5
 600: PPUSH
 601: LD_INT 3000
 603: PUSH
 604: LD_VAR 0 5
 608: DIVREAL
 609: PPUSH
 610: CALL_OW 277
 614: GO 583
 616: POP
 617: POP
 618: GO 567
 620: POP
 621: POP
// for i in FilterUnitsInArea ( spot_area , [ f_side , 7 ] ) do
 622: LD_ADDR_VAR 0 2
 626: PUSH
 627: LD_INT 3
 629: PPUSH
 630: LD_INT 22
 632: PUSH
 633: LD_INT 7
 635: PUSH
 636: EMPTY
 637: LIST
 638: LIST
 639: PPUSH
 640: CALL_OW 70
 644: PUSH
 645: FOR_IN
 646: IFFALSE 659
// RemoveUnit ( i ) ;
 648: LD_VAR 0 2
 652: PPUSH
 653: CALL_OW 64
 657: GO 645
 659: POP
 660: POP
// end ; end_of_file
 661: LD_VAR 0 1
 665: RET
// export JMM , Burlak , freedom ; export Roth , Lisa , Donaldson , Bobby , Cyrus , Denis , Brown , Gladstone , Houten , Cornel , Gary , Frank , Kikuchi , Simms , Joan , DeltaDoctor , Gossudarov , Kirilenkova , Titov , Dolgov , Petrosyan , Scholtze , Oblukov , Kapitsova , Lipshchin , Petrovova , Kovalyuk , Kuzmov , Karamazov , Belkov , Gnyevko , Masha ; export squad1 , squad2 ; export function PrepareAlliance ; var tmp , i , veh ; begin
 666: LD_INT 0
 668: PPUSH
 669: PPUSH
 670: PPUSH
 671: PPUSH
// uc_side := 7 ;
 672: LD_ADDR_OWVAR 20
 676: PUSH
 677: LD_INT 7
 679: ST_TO_ADDR
// uc_nation := 1 ;
 680: LD_ADDR_OWVAR 21
 684: PUSH
 685: LD_INT 1
 687: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 13a_ ) ;
 688: LD_ADDR_EXP 2
 692: PUSH
 693: LD_STRING JMM
 695: PPUSH
 696: LD_EXP 1
 700: NOT
 701: PPUSH
 702: LD_STRING 13a_
 704: PPUSH
 705: CALL 26581 0 3
 709: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , ( not debug ) , 13a_ ) ;
 710: LD_ADDR_EXP 3
 714: PUSH
 715: LD_STRING Burlak
 717: PPUSH
 718: LD_EXP 1
 722: NOT
 723: PPUSH
 724: LD_STRING 13a_
 726: PPUSH
 727: CALL 26581 0 3
 731: ST_TO_ADDR
// if debug then
 732: LD_EXP 1
 736: IFFALSE 771
// begin PrepareHuman ( sex_male , 4 , 10 ) ;
 738: LD_INT 1
 740: PPUSH
 741: LD_INT 4
 743: PPUSH
 744: LD_INT 10
 746: PPUSH
 747: CALL_OW 380
// JMM := CreateHuman ;
 751: LD_ADDR_EXP 2
 755: PUSH
 756: CALL_OW 44
 760: ST_TO_ADDR
// Burlak := CreateHuman ;
 761: LD_ADDR_EXP 3
 765: PUSH
 766: CALL_OW 44
 770: ST_TO_ADDR
// end ; freedom := FilterUnitsInArea ( freedom_base , [ [ f_side , 7 ] , [ f_or , [ f_nation , 1 ] , [ f_nation , 3 ] ] , [ f_btype , b_warehouse ] ] ) ;
 771: LD_ADDR_EXP 4
 775: PUSH
 776: LD_INT 1
 778: PPUSH
 779: LD_INT 22
 781: PUSH
 782: LD_INT 7
 784: PUSH
 785: EMPTY
 786: LIST
 787: LIST
 788: PUSH
 789: LD_INT 2
 791: PUSH
 792: LD_INT 23
 794: PUSH
 795: LD_INT 1
 797: PUSH
 798: EMPTY
 799: LIST
 800: LIST
 801: PUSH
 802: LD_INT 23
 804: PUSH
 805: LD_INT 3
 807: PUSH
 808: EMPTY
 809: LIST
 810: LIST
 811: PUSH
 812: EMPTY
 813: LIST
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 1
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: LIST
 831: PPUSH
 832: CALL_OW 70
 836: ST_TO_ADDR
// if freedom then
 837: LD_EXP 4
 841: IFFALSE 968
// begin freedom := freedom [ 1 ] ;
 843: LD_ADDR_EXP 4
 847: PUSH
 848: LD_EXP 4
 852: PUSH
 853: LD_INT 1
 855: ARRAY
 856: ST_TO_ADDR
// SetBName ( freedom , freedom ) ;
 857: LD_EXP 4
 861: PPUSH
 862: LD_STRING freedom
 864: PPUSH
 865: CALL_OW 500
// CenterNowOnUnits ( freedom ) ;
 869: LD_EXP 4
 873: PPUSH
 874: CALL_OW 87
// PlaceHumanInUnit ( JMM , freedom ) ;
 878: LD_EXP 2
 882: PPUSH
 883: LD_EXP 4
 887: PPUSH
 888: CALL_OW 52
// PlaceHumanInUnit ( Burlak , freedom ) ;
 892: LD_EXP 3
 896: PPUSH
 897: LD_EXP 4
 901: PPUSH
 902: CALL_OW 52
// SetResourceType ( GetBase ( freedom ) , mat_cans , 1000 ) ;
 906: LD_EXP 4
 910: PPUSH
 911: CALL_OW 274
 915: PPUSH
 916: LD_INT 1
 918: PPUSH
 919: LD_INT 1000
 921: PPUSH
 922: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_oil , 400 ) ;
 926: LD_EXP 4
 930: PPUSH
 931: CALL_OW 274
 935: PPUSH
 936: LD_INT 2
 938: PPUSH
 939: LD_INT 400
 941: PPUSH
 942: CALL_OW 277
// SetResourceType ( GetBase ( freedom ) , mat_siberit , 30 ) ;
 946: LD_EXP 4
 950: PPUSH
 951: CALL_OW 274
 955: PPUSH
 956: LD_INT 3
 958: PPUSH
 959: LD_INT 30
 961: PPUSH
 962: CALL_OW 277
// end else
 966: GO 1055
// begin PlaceUnitArea ( JMM , freedom_base , false ) ;
 968: LD_EXP 2
 972: PPUSH
 973: LD_INT 1
 975: PPUSH
 976: LD_INT 0
 978: PPUSH
 979: CALL_OW 49
// PlaceUnitXYR ( Burlak , GetX ( JMM ) , GetY ( JMM ) , 8 , false ) ;
 983: LD_EXP 3
 987: PPUSH
 988: LD_EXP 2
 992: PPUSH
 993: CALL_OW 250
 997: PPUSH
 998: LD_EXP 2
1002: PPUSH
1003: CALL_OW 251
1007: PPUSH
1008: LD_INT 8
1010: PPUSH
1011: LD_INT 0
1013: PPUSH
1014: CALL_OW 50
// ComTurnUnit ( JMM , Burlak ) ;
1018: LD_EXP 2
1022: PPUSH
1023: LD_EXP 3
1027: PPUSH
1028: CALL_OW 119
// ComTurnUnit ( Burlak , JMM ) ;
1032: LD_EXP 3
1036: PPUSH
1037: LD_EXP 2
1041: PPUSH
1042: CALL_OW 119
// CenterNowOnUnits ( JMM ) ;
1046: LD_EXP 2
1050: PPUSH
1051: CALL_OW 87
// end ; SetClass ( JMM , 2 ) ;
1055: LD_EXP 2
1059: PPUSH
1060: LD_INT 2
1062: PPUSH
1063: CALL_OW 336
// tmp := [ [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] , [ us_double_gun , us_laser , us_rocket_launcher , us_gatling_gun , us_cargo_bay ] ] ;
1067: LD_ADDR_VAR 0 2
1071: PUSH
1072: LD_INT 2
1074: PUSH
1075: LD_INT 3
1077: PUSH
1078: LD_INT 4
1080: PUSH
1081: LD_INT 5
1083: PUSH
1084: EMPTY
1085: LIST
1086: LIST
1087: LIST
1088: LIST
1089: PUSH
1090: LD_INT 5
1092: PUSH
1093: LD_INT 9
1095: PUSH
1096: LD_INT 7
1098: PUSH
1099: LD_INT 4
1101: PUSH
1102: LD_INT 12
1104: PUSH
1105: EMPTY
1106: LIST
1107: LIST
1108: LIST
1109: LIST
1110: LIST
1111: PUSH
1112: EMPTY
1113: LIST
1114: LIST
1115: ST_TO_ADDR
// for i = 1 to 5 do
1116: LD_ADDR_VAR 0 3
1120: PUSH
1121: DOUBLE
1122: LD_INT 1
1124: DEC
1125: ST_TO_ADDR
1126: LD_INT 5
1128: PUSH
1129: FOR_TO
1130: IFFALSE 1314
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 5 + 1 ] , 100 ) ;
1132: LD_VAR 0 2
1136: PUSH
1137: LD_INT 1
1139: ARRAY
1140: PUSH
1141: LD_VAR 0 3
1145: PUSH
1146: LD_INT 4
1148: MOD
1149: PUSH
1150: LD_INT 1
1152: PLUS
1153: ARRAY
1154: PPUSH
1155: LD_INT 1
1157: PUSH
1158: LD_INT 3
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PUSH
1165: LD_INT 1
1167: PPUSH
1168: LD_INT 2
1170: PPUSH
1171: CALL_OW 12
1175: ARRAY
1176: PPUSH
1177: LD_INT 1
1179: PPUSH
1180: LD_VAR 0 2
1184: PUSH
1185: LD_INT 2
1187: ARRAY
1188: PUSH
1189: LD_VAR 0 3
1193: PUSH
1194: LD_INT 5
1196: MOD
1197: PUSH
1198: LD_INT 1
1200: PLUS
1201: ARRAY
1202: PPUSH
1203: LD_INT 100
1205: PPUSH
1206: CALL 31601 0 5
// veh := CreateVehicle ;
1210: LD_ADDR_VAR 0 4
1214: PUSH
1215: CALL_OW 45
1219: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1220: LD_VAR 0 4
1224: PPUSH
1225: LD_INT 0
1227: PPUSH
1228: LD_INT 5
1230: PPUSH
1231: CALL_OW 12
1235: PPUSH
1236: CALL_OW 233
// if freedom then
1240: LD_EXP 4
1244: IFFALSE 1277
// begin if IsInArea ( freedom , freedom_base ) then
1246: LD_EXP 4
1250: PPUSH
1251: LD_INT 1
1253: PPUSH
1254: CALL_OW 308
1258: IFFALSE 1275
// PlaceUnitArea ( veh , freedom_base , false ) end else
1260: LD_VAR 0 4
1264: PPUSH
1265: LD_INT 1
1267: PPUSH
1268: LD_INT 0
1270: PPUSH
1271: CALL_OW 49
1275: GO 1312
// PlaceUnitXYR ( veh , GetX ( JMM ) , GetY ( JMM ) , 14 , false ) ;
1277: LD_VAR 0 4
1281: PPUSH
1282: LD_EXP 2
1286: PPUSH
1287: CALL_OW 250
1291: PPUSH
1292: LD_EXP 2
1296: PPUSH
1297: CALL_OW 251
1301: PPUSH
1302: LD_INT 14
1304: PPUSH
1305: LD_INT 0
1307: PPUSH
1308: CALL_OW 50
// end ;
1312: GO 1129
1314: POP
1315: POP
// uc_nation := 3 ;
1316: LD_ADDR_OWVAR 21
1320: PUSH
1321: LD_INT 3
1323: ST_TO_ADDR
// tmp := [ [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] ] ;
1324: LD_ADDR_VAR 0 2
1328: PUSH
1329: LD_INT 21
1331: PUSH
1332: LD_INT 22
1334: PUSH
1335: LD_INT 23
1337: PUSH
1338: LD_INT 24
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: LIST
1345: LIST
1346: PUSH
1347: LD_INT 43
1349: PUSH
1350: LD_INT 44
1352: PUSH
1353: LD_INT 45
1355: PUSH
1356: EMPTY
1357: LIST
1358: LIST
1359: LIST
1360: PUSH
1361: EMPTY
1362: LIST
1363: LIST
1364: ST_TO_ADDR
// for i = 1 to 5 do
1365: LD_ADDR_VAR 0 3
1369: PUSH
1370: DOUBLE
1371: LD_INT 1
1373: DEC
1374: ST_TO_ADDR
1375: LD_INT 5
1377: PUSH
1378: FOR_TO
1379: IFFALSE 1506
// begin PrepareVehicle ( tmp [ 1 ] [ i mod 4 + 1 ] , [ engine_combustion , engine_siberite ] [ rand ( 1 , 2 ) ] , control_manual , tmp [ 2 ] [ i mod 3 + 1 ] , 100 ) ;
1381: LD_VAR 0 2
1385: PUSH
1386: LD_INT 1
1388: ARRAY
1389: PUSH
1390: LD_VAR 0 3
1394: PUSH
1395: LD_INT 4
1397: MOD
1398: PUSH
1399: LD_INT 1
1401: PLUS
1402: ARRAY
1403: PPUSH
1404: LD_INT 1
1406: PUSH
1407: LD_INT 3
1409: PUSH
1410: EMPTY
1411: LIST
1412: LIST
1413: PUSH
1414: LD_INT 1
1416: PPUSH
1417: LD_INT 2
1419: PPUSH
1420: CALL_OW 12
1424: ARRAY
1425: PPUSH
1426: LD_INT 1
1428: PPUSH
1429: LD_VAR 0 2
1433: PUSH
1434: LD_INT 2
1436: ARRAY
1437: PUSH
1438: LD_VAR 0 3
1442: PUSH
1443: LD_INT 3
1445: MOD
1446: PUSH
1447: LD_INT 1
1449: PLUS
1450: ARRAY
1451: PPUSH
1452: LD_INT 100
1454: PPUSH
1455: CALL 31601 0 5
// veh := CreateVehicle ;
1459: LD_ADDR_VAR 0 4
1463: PUSH
1464: CALL_OW 45
1468: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1469: LD_VAR 0 4
1473: PPUSH
1474: LD_INT 0
1476: PPUSH
1477: LD_INT 5
1479: PPUSH
1480: CALL_OW 12
1484: PPUSH
1485: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1489: LD_VAR 0 4
1493: PPUSH
1494: LD_INT 1
1496: PPUSH
1497: LD_INT 0
1499: PPUSH
1500: CALL_OW 49
// end ;
1504: GO 1378
1506: POP
1507: POP
// if not FilterAllUnits ( [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] ] ) then
1508: LD_INT 2
1510: PUSH
1511: LD_INT 34
1513: PUSH
1514: LD_INT 12
1516: PUSH
1517: EMPTY
1518: LIST
1519: LIST
1520: PUSH
1521: LD_INT 34
1523: PUSH
1524: LD_INT 51
1526: PUSH
1527: EMPTY
1528: LIST
1529: LIST
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: PPUSH
1536: CALL_OW 69
1540: NOT
1541: IFFALSE 1607
// begin PrepareVehicle ( ru_medium_tracked , engine_siberite , control_manual , ru_cargo_bay , 0 ) ;
1543: LD_INT 22
1545: PPUSH
1546: LD_INT 3
1548: PPUSH
1549: LD_INT 1
1551: PPUSH
1552: LD_INT 51
1554: PPUSH
1555: LD_INT 0
1557: PPUSH
1558: CALL 31601 0 5
// veh := CreateVehicle ;
1562: LD_ADDR_VAR 0 4
1566: PUSH
1567: CALL_OW 45
1571: ST_TO_ADDR
// SetDir ( veh , rand ( 0 , 5 ) ) ;
1572: LD_VAR 0 4
1576: PPUSH
1577: LD_INT 0
1579: PPUSH
1580: LD_INT 5
1582: PPUSH
1583: CALL_OW 12
1587: PPUSH
1588: CALL_OW 233
// PlaceUnitArea ( veh , freedom_base , false ) ;
1592: LD_VAR 0 4
1596: PPUSH
1597: LD_INT 1
1599: PPUSH
1600: LD_INT 0
1602: PPUSH
1603: CALL_OW 49
// end ; tmp := LoadVariable ( 13a_Masha , [ ] ) ;
1607: LD_ADDR_VAR 0 2
1611: PUSH
1612: LD_STRING 13a_Masha
1614: PPUSH
1615: EMPTY
1616: PPUSH
1617: CALL_OW 30
1621: ST_TO_ADDR
// if tmp then
1622: LD_VAR 0 2
1626: IFFALSE 1709
// begin PrepareVehicle ( tmp [ 1 ] , tmp [ 2 ] , tmp [ 3 ] , tmp [ 4 ] , 100 ) ;
1628: LD_VAR 0 2
1632: PUSH
1633: LD_INT 1
1635: ARRAY
1636: PPUSH
1637: LD_VAR 0 2
1641: PUSH
1642: LD_INT 2
1644: ARRAY
1645: PPUSH
1646: LD_VAR 0 2
1650: PUSH
1651: LD_INT 3
1653: ARRAY
1654: PPUSH
1655: LD_VAR 0 2
1659: PUSH
1660: LD_INT 4
1662: ARRAY
1663: PPUSH
1664: LD_INT 100
1666: PPUSH
1667: CALL 31601 0 5
// Masha := CreateVehicle ;
1671: LD_ADDR_EXP 36
1675: PUSH
1676: CALL_OW 45
1680: ST_TO_ADDR
// PlaceUnitArea ( Masha , freedom_base , false ) ;
1681: LD_EXP 36
1685: PPUSH
1686: LD_INT 1
1688: PPUSH
1689: LD_INT 0
1691: PPUSH
1692: CALL_OW 49
// SetMark ( Masha , - 7 ) ;
1696: LD_EXP 36
1700: PPUSH
1701: LD_INT 7
1703: NEG
1704: PPUSH
1705: CALL_OW 242
// end ; uc_side := 4 ;
1709: LD_ADDR_OWVAR 20
1713: PUSH
1714: LD_INT 4
1716: ST_TO_ADDR
// tmp := [ ] ;
1717: LD_ADDR_VAR 0 2
1721: PUSH
1722: EMPTY
1723: ST_TO_ADDR
// squad1 := [ ] ;
1724: LD_ADDR_EXP 37
1728: PUSH
1729: EMPTY
1730: ST_TO_ADDR
// squad2 := [ ] ;
1731: LD_ADDR_EXP 38
1735: PUSH
1736: EMPTY
1737: ST_TO_ADDR
// Joan := PrepareUnitForce ( Joan , ( not debug ) , 13a_ ) ;
1738: LD_ADDR_EXP 19
1742: PUSH
1743: LD_STRING Joan
1745: PPUSH
1746: LD_EXP 1
1750: NOT
1751: PPUSH
1752: LD_STRING 13a_
1754: PPUSH
1755: CALL 26665 0 3
1759: ST_TO_ADDR
// if Joan then
1760: LD_EXP 19
1764: IFFALSE 1782
// tmp := tmp ^ Joan ;
1766: LD_ADDR_VAR 0 2
1770: PUSH
1771: LD_VAR 0 2
1775: PUSH
1776: LD_EXP 19
1780: ADD
1781: ST_TO_ADDR
// Roth := PrepareUnitForce ( Roth , ( not debug ) , 13a_ ) ;
1782: LD_ADDR_EXP 5
1786: PUSH
1787: LD_STRING Roth
1789: PPUSH
1790: LD_EXP 1
1794: NOT
1795: PPUSH
1796: LD_STRING 13a_
1798: PPUSH
1799: CALL 26665 0 3
1803: ST_TO_ADDR
// if Roth then
1804: LD_EXP 5
1808: IFFALSE 1826
// tmp := tmp ^ Roth ;
1810: LD_ADDR_VAR 0 2
1814: PUSH
1815: LD_VAR 0 2
1819: PUSH
1820: LD_EXP 5
1824: ADD
1825: ST_TO_ADDR
// Denis := PrepareUnitForce ( Denis , ( not debug ) , 13a_ ) ;
1826: LD_ADDR_EXP 10
1830: PUSH
1831: LD_STRING Denis
1833: PPUSH
1834: LD_EXP 1
1838: NOT
1839: PPUSH
1840: LD_STRING 13a_
1842: PPUSH
1843: CALL 26665 0 3
1847: ST_TO_ADDR
// if Denis then
1848: LD_EXP 10
1852: IFFALSE 1870
// tmp := tmp ^ Denis ;
1854: LD_ADDR_VAR 0 2
1858: PUSH
1859: LD_VAR 0 2
1863: PUSH
1864: LD_EXP 10
1868: ADD
1869: ST_TO_ADDR
// DeltaDoctor := PrepareUnitForce ( DeltaDoctor , ( not debug ) , 13a_ ) ;
1870: LD_ADDR_EXP 20
1874: PUSH
1875: LD_STRING DeltaDoctor
1877: PPUSH
1878: LD_EXP 1
1882: NOT
1883: PPUSH
1884: LD_STRING 13a_
1886: PPUSH
1887: CALL 26665 0 3
1891: ST_TO_ADDR
// if DeltaDoctor then
1892: LD_EXP 20
1896: IFFALSE 1914
// tmp := tmp ^ DeltaDoctor ;
1898: LD_ADDR_VAR 0 2
1902: PUSH
1903: LD_VAR 0 2
1907: PUSH
1908: LD_EXP 20
1912: ADD
1913: ST_TO_ADDR
// Simms := PrepareUnitForce ( Simms , ( not debug ) , 13a_ ) ;
1914: LD_ADDR_EXP 18
1918: PUSH
1919: LD_STRING Simms
1921: PPUSH
1922: LD_EXP 1
1926: NOT
1927: PPUSH
1928: LD_STRING 13a_
1930: PPUSH
1931: CALL 26665 0 3
1935: ST_TO_ADDR
// if Simms then
1936: LD_EXP 18
1940: IFFALSE 1958
// tmp := tmp ^ Simms ;
1942: LD_ADDR_VAR 0 2
1946: PUSH
1947: LD_VAR 0 2
1951: PUSH
1952: LD_EXP 18
1956: ADD
1957: ST_TO_ADDR
// Gossudarov := PrepareUnitForce ( Gossudarov , ( not debug ) , 13a_ ) ;
1958: LD_ADDR_EXP 21
1962: PUSH
1963: LD_STRING Gossudarov
1965: PPUSH
1966: LD_EXP 1
1970: NOT
1971: PPUSH
1972: LD_STRING 13a_
1974: PPUSH
1975: CALL 26665 0 3
1979: ST_TO_ADDR
// if Gossudarov then
1980: LD_EXP 21
1984: IFFALSE 2002
// tmp := tmp ^ Gossudarov ;
1986: LD_ADDR_VAR 0 2
1990: PUSH
1991: LD_VAR 0 2
1995: PUSH
1996: LD_EXP 21
2000: ADD
2001: ST_TO_ADDR
// Kirilenkova := PrepareUnitForce ( Kirilenkova , ( not debug ) , 13a_ ) ;
2002: LD_ADDR_EXP 22
2006: PUSH
2007: LD_STRING Kirilenkova
2009: PPUSH
2010: LD_EXP 1
2014: NOT
2015: PPUSH
2016: LD_STRING 13a_
2018: PPUSH
2019: CALL 26665 0 3
2023: ST_TO_ADDR
// if Kirilenkova then
2024: LD_EXP 22
2028: IFFALSE 2046
// tmp := tmp ^ Kirilenkova ;
2030: LD_ADDR_VAR 0 2
2034: PUSH
2035: LD_VAR 0 2
2039: PUSH
2040: LD_EXP 22
2044: ADD
2045: ST_TO_ADDR
// Petrosyan := PrepareUnitForce ( Petrosyan , ( not debug ) , 13a_ ) ;
2046: LD_ADDR_EXP 25
2050: PUSH
2051: LD_STRING Petrosyan
2053: PPUSH
2054: LD_EXP 1
2058: NOT
2059: PPUSH
2060: LD_STRING 13a_
2062: PPUSH
2063: CALL 26665 0 3
2067: ST_TO_ADDR
// if Petrosyan then
2068: LD_EXP 25
2072: IFFALSE 2090
// tmp := tmp ^ Petrosyan ;
2074: LD_ADDR_VAR 0 2
2078: PUSH
2079: LD_VAR 0 2
2083: PUSH
2084: LD_EXP 25
2088: ADD
2089: ST_TO_ADDR
// Scholtze := PrepareUnitForce ( Petrosyan , ( not debug ) , 13a_ ) ;
2090: LD_ADDR_EXP 26
2094: PUSH
2095: LD_STRING Petrosyan
2097: PPUSH
2098: LD_EXP 1
2102: NOT
2103: PPUSH
2104: LD_STRING 13a_
2106: PPUSH
2107: CALL 26665 0 3
2111: ST_TO_ADDR
// if Scholtze then
2112: LD_EXP 26
2116: IFFALSE 2134
// tmp := tmp ^ Scholtze ;
2118: LD_ADDR_VAR 0 2
2122: PUSH
2123: LD_VAR 0 2
2127: PUSH
2128: LD_EXP 26
2132: ADD
2133: ST_TO_ADDR
// Dolgov := PrepareUnitForce ( Dolgov , ( not debug ) , 13a_ ) ;
2134: LD_ADDR_EXP 24
2138: PUSH
2139: LD_STRING Dolgov
2141: PPUSH
2142: LD_EXP 1
2146: NOT
2147: PPUSH
2148: LD_STRING 13a_
2150: PPUSH
2151: CALL 26665 0 3
2155: ST_TO_ADDR
// if Dolgov then
2156: LD_EXP 24
2160: IFFALSE 2178
// tmp := tmp ^ Dolgov ;
2162: LD_ADDR_VAR 0 2
2166: PUSH
2167: LD_VAR 0 2
2171: PUSH
2172: LD_EXP 24
2176: ADD
2177: ST_TO_ADDR
// for i in tmp do
2178: LD_ADDR_VAR 0 3
2182: PUSH
2183: LD_VAR 0 2
2187: PUSH
2188: FOR_IN
2189: IFFALSE 2214
// PlaceUnitXYR ( i , 160 , 78 , 22 , false ) ;
2191: LD_VAR 0 3
2195: PPUSH
2196: LD_INT 160
2198: PPUSH
2199: LD_INT 78
2201: PPUSH
2202: LD_INT 22
2204: PPUSH
2205: LD_INT 0
2207: PPUSH
2208: CALL_OW 50
2212: GO 2188
2214: POP
2215: POP
// squad1 := tmp ;
2216: LD_ADDR_EXP 37
2220: PUSH
2221: LD_VAR 0 2
2225: ST_TO_ADDR
// tmp := [ ] ;
2226: LD_ADDR_VAR 0 2
2230: PUSH
2231: EMPTY
2232: ST_TO_ADDR
// Petrovova := PrepareUnitForce ( Petrova , ( not debug ) , 13a_ ) ;
2233: LD_ADDR_EXP 30
2237: PUSH
2238: LD_STRING Petrova
2240: PPUSH
2241: LD_EXP 1
2245: NOT
2246: PPUSH
2247: LD_STRING 13a_
2249: PPUSH
2250: CALL 26665 0 3
2254: ST_TO_ADDR
// if Petrovova then
2255: LD_EXP 30
2259: IFFALSE 2277
// tmp := tmp ^ Petrovova ;
2261: LD_ADDR_VAR 0 2
2265: PUSH
2266: LD_VAR 0 2
2270: PUSH
2271: LD_EXP 30
2275: ADD
2276: ST_TO_ADDR
// Titov := PrepareUnitForce ( Titov , ( not debug ) , 13a_ ) ;
2277: LD_ADDR_EXP 23
2281: PUSH
2282: LD_STRING Titov
2284: PPUSH
2285: LD_EXP 1
2289: NOT
2290: PPUSH
2291: LD_STRING 13a_
2293: PPUSH
2294: CALL 26665 0 3
2298: ST_TO_ADDR
// if Titov then
2299: LD_EXP 23
2303: IFFALSE 2321
// tmp := tmp ^ Titov ;
2305: LD_ADDR_VAR 0 2
2309: PUSH
2310: LD_VAR 0 2
2314: PUSH
2315: LD_EXP 23
2319: ADD
2320: ST_TO_ADDR
// Karamazov := PrepareUnitForce ( Karamazov , ( not debug ) , 13a_ ) ;
2321: LD_ADDR_EXP 33
2325: PUSH
2326: LD_STRING Karamazov
2328: PPUSH
2329: LD_EXP 1
2333: NOT
2334: PPUSH
2335: LD_STRING 13a_
2337: PPUSH
2338: CALL 26665 0 3
2342: ST_TO_ADDR
// if Karamazov then
2343: LD_EXP 33
2347: IFFALSE 2365
// tmp := tmp ^ Karamazov ;
2349: LD_ADDR_VAR 0 2
2353: PUSH
2354: LD_VAR 0 2
2358: PUSH
2359: LD_EXP 33
2363: ADD
2364: ST_TO_ADDR
// Frank := PrepareUnitForce ( Frank , ( not debug ) , 13a_ ) ;
2365: LD_ADDR_EXP 16
2369: PUSH
2370: LD_STRING Frank
2372: PPUSH
2373: LD_EXP 1
2377: NOT
2378: PPUSH
2379: LD_STRING 13a_
2381: PPUSH
2382: CALL 26665 0 3
2386: ST_TO_ADDR
// if Frank then
2387: LD_EXP 16
2391: IFFALSE 2409
// tmp := tmp ^ Frank ;
2393: LD_ADDR_VAR 0 2
2397: PUSH
2398: LD_VAR 0 2
2402: PUSH
2403: LD_EXP 16
2407: ADD
2408: ST_TO_ADDR
// Donaldson := PrepareUnitForce ( Donaldson , ( not debug ) , 13a_ ) ;
2409: LD_ADDR_EXP 7
2413: PUSH
2414: LD_STRING Donaldson
2416: PPUSH
2417: LD_EXP 1
2421: NOT
2422: PPUSH
2423: LD_STRING 13a_
2425: PPUSH
2426: CALL 26665 0 3
2430: ST_TO_ADDR
// if Donaldson then
2431: LD_EXP 7
2435: IFFALSE 2453
// tmp := tmp ^ Donaldson ;
2437: LD_ADDR_VAR 0 2
2441: PUSH
2442: LD_VAR 0 2
2446: PUSH
2447: LD_EXP 7
2451: ADD
2452: ST_TO_ADDR
// for i in tmp do
2453: LD_ADDR_VAR 0 3
2457: PUSH
2458: LD_VAR 0 2
2462: PUSH
2463: FOR_IN
2464: IFFALSE 2504
// begin PlaceUnitXYR ( i , 117 , 8 , 6 , false ) ;
2466: LD_VAR 0 3
2470: PPUSH
2471: LD_INT 117
2473: PPUSH
2474: LD_INT 8
2476: PPUSH
2477: LD_INT 6
2479: PPUSH
2480: LD_INT 0
2482: PPUSH
2483: CALL_OW 50
// ComTurnXY ( i , 117 , 8 ) ;
2487: LD_VAR 0 3
2491: PPUSH
2492: LD_INT 117
2494: PPUSH
2495: LD_INT 8
2497: PPUSH
2498: CALL_OW 118
// end ;
2502: GO 2463
2504: POP
2505: POP
// squad2 := tmp ;
2506: LD_ADDR_EXP 38
2510: PUSH
2511: LD_VAR 0 2
2515: ST_TO_ADDR
// uc_side := 0 ;
2516: LD_ADDR_OWVAR 20
2520: PUSH
2521: LD_INT 0
2523: ST_TO_ADDR
// uc_nation := 0 ;
2524: LD_ADDR_OWVAR 21
2528: PUSH
2529: LD_INT 0
2531: ST_TO_ADDR
// InitHc ;
2532: CALL_OW 19
// hc_importance := 0 ;
2536: LD_ADDR_OWVAR 32
2540: PUSH
2541: LD_INT 0
2543: ST_TO_ADDR
// hc_name := Find some goods! ;
2544: LD_ADDR_OWVAR 26
2548: PUSH
2549: LD_STRING Find some goods!
2551: ST_TO_ADDR
// PrepareHuman ( false , class_apeman , 1 ) ;
2552: LD_INT 0
2554: PPUSH
2555: LD_INT 12
2557: PPUSH
2558: LD_INT 1
2560: PPUSH
2561: CALL_OW 380
// PlaceUnitXY ( CreateHuman , 96 , 108 , false ) ;
2565: CALL_OW 44
2569: PPUSH
2570: LD_INT 96
2572: PPUSH
2573: LD_INT 108
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 48
// InitHc ;
2583: CALL_OW 19
// end ;
2587: LD_VAR 0 1
2591: RET
// every 3 trigger FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) do var Louis , veh ;
2592: LD_INT 22
2594: PUSH
2595: LD_INT 7
2597: PUSH
2598: EMPTY
2599: LIST
2600: LIST
2601: PUSH
2602: LD_INT 23
2604: PUSH
2605: LD_INT 0
2607: PUSH
2608: EMPTY
2609: LIST
2610: LIST
2611: PUSH
2612: EMPTY
2613: LIST
2614: LIST
2615: PPUSH
2616: CALL_OW 69
2620: IFFALSE 3085
2622: GO 2624
2624: DISABLE
2625: LD_INT 0
2627: PPUSH
2628: PPUSH
// begin InGameOn ;
2629: CALL_OW 8
// RemoveUnit ( FilterAllUnits ( [ [ f_side , 7 ] , [ f_nation , 0 ] ] ) [ 1 ] ) ;
2633: LD_INT 22
2635: PUSH
2636: LD_INT 7
2638: PUSH
2639: EMPTY
2640: LIST
2641: LIST
2642: PUSH
2643: LD_INT 23
2645: PUSH
2646: LD_INT 0
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: PUSH
2653: EMPTY
2654: LIST
2655: LIST
2656: PPUSH
2657: CALL_OW 69
2661: PUSH
2662: LD_INT 1
2664: ARRAY
2665: PPUSH
2666: CALL_OW 64
// game_speed := 4 ;
2670: LD_ADDR_OWVAR 65
2674: PUSH
2675: LD_INT 4
2677: ST_TO_ADDR
// ComMoveXY ( JMM , 93 , 100 ) ;
2678: LD_EXP 2
2682: PPUSH
2683: LD_INT 93
2685: PPUSH
2686: LD_INT 100
2688: PPUSH
2689: CALL_OW 111
// ComMoveXY ( Burlak , 93 , 99 ) ;
2693: LD_EXP 3
2697: PPUSH
2698: LD_INT 93
2700: PPUSH
2701: LD_INT 99
2703: PPUSH
2704: CALL_OW 111
// AddComTurnXY ( [ JMM , Burlak ] , 81 , 112 ) ;
2708: LD_EXP 2
2712: PUSH
2713: LD_EXP 3
2717: PUSH
2718: EMPTY
2719: LIST
2720: LIST
2721: PPUSH
2722: LD_INT 81
2724: PPUSH
2725: LD_INT 112
2727: PPUSH
2728: CALL_OW 178
// wait ( 0 0$5 ) ;
2732: LD_INT 175
2734: PPUSH
2735: CALL_OW 67
// music_nat := 2 ;
2739: LD_ADDR_OWVAR 71
2743: PUSH
2744: LD_INT 2
2746: ST_TO_ADDR
// music_class := 4 ;
2747: LD_ADDR_OWVAR 72
2751: PUSH
2752: LD_INT 4
2754: ST_TO_ADDR
// CenterNowOnXY ( 80 , 130 ) ;
2755: LD_INT 80
2757: PPUSH
2758: LD_INT 130
2760: PPUSH
2761: CALL_OW 86
// uc_nation := 2 ;
2765: LD_ADDR_OWVAR 21
2769: PUSH
2770: LD_INT 2
2772: ST_TO_ADDR
// uc_side := 2 ;
2773: LD_ADDR_OWVAR 20
2777: PUSH
2778: LD_INT 2
2780: ST_TO_ADDR
// hc_gallery = sandar ;
2781: LD_ADDR_OWVAR 33
2785: PUSH
2786: LD_STRING sandar
2788: ST_TO_ADDR
// hc_face_number = 1 ;
2789: LD_ADDR_OWVAR 34
2793: PUSH
2794: LD_INT 1
2796: ST_TO_ADDR
// hc_name = Louis Schulz ;
2797: LD_ADDR_OWVAR 26
2801: PUSH
2802: LD_STRING Louis Schulz
2804: ST_TO_ADDR
// hc_attr = [ 13 , 11 ] ;
2805: LD_ADDR_OWVAR 29
2809: PUSH
2810: LD_INT 13
2812: PUSH
2813: LD_INT 11
2815: PUSH
2816: EMPTY
2817: LIST
2818: LIST
2819: ST_TO_ADDR
// hc_basic_skills = [ 0 , 0 , 0 , 0 ] ;
2820: LD_ADDR_OWVAR 30
2824: PUSH
2825: LD_INT 0
2827: PUSH
2828: LD_INT 0
2830: PUSH
2831: LD_INT 0
2833: PUSH
2834: LD_INT 0
2836: PUSH
2837: EMPTY
2838: LIST
2839: LIST
2840: LIST
2841: LIST
2842: ST_TO_ADDR
// hc_skills = [ 10 , 6 , 7 , 7 ] ;
2843: LD_ADDR_OWVAR 31
2847: PUSH
2848: LD_INT 10
2850: PUSH
2851: LD_INT 6
2853: PUSH
2854: LD_INT 7
2856: PUSH
2857: LD_INT 7
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: ST_TO_ADDR
// hc_sex = sex_male ;
2866: LD_ADDR_OWVAR 27
2870: PUSH
2871: LD_INT 1
2873: ST_TO_ADDR
// hc_class = 1 ;
2874: LD_ADDR_OWVAR 28
2878: PUSH
2879: LD_INT 1
2881: ST_TO_ADDR
// hc_importance = 100 ;
2882: LD_ADDR_OWVAR 32
2886: PUSH
2887: LD_INT 100
2889: ST_TO_ADDR
// Louis = CreateHuman ;
2890: LD_ADDR_VAR 0 1
2894: PUSH
2895: CALL_OW 44
2899: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_siberite , control_manual , ar_flame_thrower , 100 ) ;
2900: LD_INT 14
2902: PPUSH
2903: LD_INT 3
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: LD_INT 26
2911: PPUSH
2912: LD_INT 100
2914: PPUSH
2915: CALL 31601 0 5
// veh := CreateVehicle ;
2919: LD_ADDR_VAR 0 2
2923: PUSH
2924: CALL_OW 45
2928: ST_TO_ADDR
// SetMark ( veh , - 2 ) ;
2929: LD_VAR 0 2
2933: PPUSH
2934: LD_INT 2
2936: NEG
2937: PPUSH
2938: CALL_OW 242
// PlaceUnitXY ( veh , 80 , 130 , false ) ;
2942: LD_VAR 0 2
2946: PPUSH
2947: LD_INT 80
2949: PPUSH
2950: LD_INT 130
2952: PPUSH
2953: LD_INT 0
2955: PPUSH
2956: CALL_OW 48
// PlaceHumanInUnit ( Louis , veh ) ;
2960: LD_VAR 0 1
2964: PPUSH
2965: LD_VAR 0 2
2969: PPUSH
2970: CALL_OW 52
// ComMoveXY ( Louis , 80 , 109 ) ;
2974: LD_VAR 0 1
2978: PPUSH
2979: LD_INT 80
2981: PPUSH
2982: LD_INT 109
2984: PPUSH
2985: CALL_OW 111
// AddComExitVehicle ( Louis ) ;
2989: LD_VAR 0 1
2993: PPUSH
2994: CALL_OW 181
// AddComMoveXY ( Louis , 80 , 131 ) ;
2998: LD_VAR 0 1
3002: PPUSH
3003: LD_INT 80
3005: PPUSH
3006: LD_INT 131
3008: PPUSH
3009: CALL_OW 171
// wait ( 0 0$06 ) ;
3013: LD_INT 210
3015: PPUSH
3016: CALL_OW 67
// InGameOff ;
3020: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
3024: LD_INT 35
3026: PPUSH
3027: CALL_OW 67
// until IsAt ( Louis , 80 , 131 ) ;
3031: LD_VAR 0 1
3035: PPUSH
3036: LD_INT 80
3038: PPUSH
3039: LD_INT 131
3041: PPUSH
3042: CALL_OW 307
3046: IFFALSE 3024
// SetSide ( veh , 7 ) ;
3048: LD_VAR 0 2
3052: PPUSH
3053: LD_INT 7
3055: PPUSH
3056: CALL_OW 235
// RemoveUnit ( Louis ) ;
3060: LD_VAR 0 1
3064: PPUSH
3065: CALL_OW 64
// music_nat := 3 ;
3069: LD_ADDR_OWVAR 71
3073: PUSH
3074: LD_INT 3
3076: ST_TO_ADDR
// music_class := 0 ;
3077: LD_ADDR_OWVAR 72
3081: PUSH
3082: LD_INT 0
3084: ST_TO_ADDR
// end ;
3085: PPOPN 2
3087: END
// every 0 0$10 trigger squad1 do var i , xy ;
3088: LD_EXP 37
3092: IFFALSE 3459
3094: GO 3096
3096: DISABLE
3097: LD_INT 0
3099: PPUSH
3100: PPUSH
// begin enable ;
3101: ENABLE
// i := squad1 [ rand ( 1 , squad1 ) ] ;
3102: LD_ADDR_VAR 0 1
3106: PUSH
3107: LD_EXP 37
3111: PUSH
3112: LD_INT 1
3114: PPUSH
3115: LD_EXP 37
3119: PPUSH
3120: CALL_OW 12
3124: ARRAY
3125: ST_TO_ADDR
// if IsInUnit ( i ) then
3126: LD_VAR 0 1
3130: PPUSH
3131: CALL_OW 310
3135: IFFALSE 3139
// exit ;
3137: GO 3459
// ComRemember ( i ) ;
3139: LD_VAR 0 1
3143: PPUSH
3144: CALL_OW 143
// xy := [ ShiftX ( GetX ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) , ShiftY ( GetY ( i ) , rand ( 0 , 5 ) , rand ( 2 , 7 ) ) ] ;
3148: LD_ADDR_VAR 0 2
3152: PUSH
3153: LD_VAR 0 1
3157: PPUSH
3158: CALL_OW 250
3162: PPUSH
3163: LD_INT 0
3165: PPUSH
3166: LD_INT 5
3168: PPUSH
3169: CALL_OW 12
3173: PPUSH
3174: LD_INT 2
3176: PPUSH
3177: LD_INT 7
3179: PPUSH
3180: CALL_OW 12
3184: PPUSH
3185: CALL_OW 272
3189: PUSH
3190: LD_VAR 0 1
3194: PPUSH
3195: CALL_OW 251
3199: PPUSH
3200: LD_INT 0
3202: PPUSH
3203: LD_INT 5
3205: PPUSH
3206: CALL_OW 12
3210: PPUSH
3211: LD_INT 2
3213: PPUSH
3214: LD_INT 7
3216: PPUSH
3217: CALL_OW 12
3221: PPUSH
3222: CALL_OW 273
3226: PUSH
3227: EMPTY
3228: LIST
3229: LIST
3230: ST_TO_ADDR
// if HexInfo ( xy [ 1 ] , xy [ 2 ] ) <> 0 or not ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
3231: LD_VAR 0 2
3235: PUSH
3236: LD_INT 1
3238: ARRAY
3239: PPUSH
3240: LD_VAR 0 2
3244: PUSH
3245: LD_INT 2
3247: ARRAY
3248: PPUSH
3249: CALL_OW 428
3253: PUSH
3254: LD_INT 0
3256: NONEQUAL
3257: IFTRUE 3284
3259: PUSH
3260: LD_VAR 0 2
3264: PUSH
3265: LD_INT 1
3267: ARRAY
3268: PPUSH
3269: LD_VAR 0 2
3273: PUSH
3274: LD_INT 2
3276: ARRAY
3277: PPUSH
3278: CALL_OW 488
3282: NOT
3283: OR
3284: IFFALSE 3288
// exit ;
3286: GO 3459
// AddComMoveXY ( i , xy [ 1 ] , xy [ 2 ] ) ;
3288: LD_VAR 0 1
3292: PPUSH
3293: LD_VAR 0 2
3297: PUSH
3298: LD_INT 1
3300: ARRAY
3301: PPUSH
3302: LD_VAR 0 2
3306: PUSH
3307: LD_INT 2
3309: ARRAY
3310: PPUSH
3311: CALL_OW 171
// AddComWait ( i , 0 0$10 ) ;
3315: LD_VAR 0 1
3319: PPUSH
3320: LD_INT 350
3322: PPUSH
3323: CALL_OW 202
// if Prob ( 60 ) and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) then
3327: LD_INT 60
3329: PPUSH
3330: CALL_OW 13
3334: IFFALSE 3366
3336: PUSH
3337: LD_INT 22
3339: PUSH
3340: LD_INT 4
3342: PUSH
3343: EMPTY
3344: LIST
3345: LIST
3346: PUSH
3347: LD_INT 21
3349: PUSH
3350: LD_INT 3
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: PUSH
3357: EMPTY
3358: LIST
3359: LIST
3360: PPUSH
3361: CALL_OW 69
3365: AND
3366: IFFALSE 3450
// begin AddComEnterUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_building ] ] ) , i ) ) ;
3368: LD_VAR 0 1
3372: PPUSH
3373: LD_INT 22
3375: PUSH
3376: LD_INT 4
3378: PUSH
3379: EMPTY
3380: LIST
3381: LIST
3382: PUSH
3383: LD_INT 21
3385: PUSH
3386: LD_INT 3
3388: PUSH
3389: EMPTY
3390: LIST
3391: LIST
3392: PUSH
3393: EMPTY
3394: LIST
3395: LIST
3396: PPUSH
3397: CALL_OW 69
3401: PPUSH
3402: LD_VAR 0 1
3406: PPUSH
3407: CALL_OW 74
3411: PPUSH
3412: CALL_OW 180
// repeat wait ( 0 0$30 ) ;
3416: LD_INT 1050
3418: PPUSH
3419: CALL_OW 67
// until IsInUnit ( i ) ;
3423: LD_VAR 0 1
3427: PPUSH
3428: CALL_OW 310
3432: IFFALSE 3416
// wait ( 0 0$30 ) ;
3434: LD_INT 1050
3436: PPUSH
3437: CALL_OW 67
// AddComExitBuilding ( i ) ;
3441: LD_VAR 0 1
3445: PPUSH
3446: CALL_OW 182
// end ; AddComReturn ( i ) ;
3450: LD_VAR 0 1
3454: PPUSH
3455: CALL_OW 204
// end ; end_of_file
3459: PPOPN 2
3461: END
// export function Action ; begin
3462: LD_INT 0
3464: PPUSH
// InGameOn ;
3465: CALL_OW 8
// CenterNowOnUnits ( JMM ) ;
3469: LD_EXP 2
3473: PPUSH
3474: CALL_OW 87
// Say ( JMM , D1-JMM-1 ) ;
3478: LD_EXP 2
3482: PPUSH
3483: LD_STRING D1-JMM-1
3485: PPUSH
3486: CALL_OW 88
// Say ( Burlak , D1-Bur-1 ) ;
3490: LD_EXP 3
3494: PPUSH
3495: LD_STRING D1-Bur-1
3497: PPUSH
3498: CALL_OW 88
// Say ( JMM , D1-JMM-2 ) ;
3502: LD_EXP 2
3506: PPUSH
3507: LD_STRING D1-JMM-2
3509: PPUSH
3510: CALL_OW 88
// Say ( Burlak , D1-Bur-2 ) ;
3514: LD_EXP 3
3518: PPUSH
3519: LD_STRING D1-Bur-2
3521: PPUSH
3522: CALL_OW 88
// Say ( JMM , D1-JMM-3 ) ;
3526: LD_EXP 2
3530: PPUSH
3531: LD_STRING D1-JMM-3
3533: PPUSH
3534: CALL_OW 88
// Say ( Burlak , D1-Bur-3 ) ;
3538: LD_EXP 3
3542: PPUSH
3543: LD_STRING D1-Bur-3
3545: PPUSH
3546: CALL_OW 88
// Say ( JMM , D1-JMM-4 ) ;
3550: LD_EXP 2
3554: PPUSH
3555: LD_STRING D1-JMM-4
3557: PPUSH
3558: CALL_OW 88
// Say ( Burlak , D1-Bur-4 ) ;
3562: LD_EXP 3
3566: PPUSH
3567: LD_STRING D1-Bur-4
3569: PPUSH
3570: CALL_OW 88
// Say ( JMM , D1-JMM-5 ) ;
3574: LD_EXP 2
3578: PPUSH
3579: LD_STRING D1-JMM-5
3581: PPUSH
3582: CALL_OW 88
// Say ( Burlak , D1-Bur-5 ) ;
3586: LD_EXP 3
3590: PPUSH
3591: LD_STRING D1-Bur-5
3593: PPUSH
3594: CALL_OW 88
// Say ( JMM , D1-JMM-6 ) ;
3598: LD_EXP 2
3602: PPUSH
3603: LD_STRING D1-JMM-6
3605: PPUSH
3606: CALL_OW 88
// Say ( Burlak , D1-Bur-6 ) ;
3610: LD_EXP 3
3614: PPUSH
3615: LD_STRING D1-Bur-6
3617: PPUSH
3618: CALL_OW 88
// Say ( JMM , D1-JMM-7 ) ;
3622: LD_EXP 2
3626: PPUSH
3627: LD_STRING D1-JMM-7
3629: PPUSH
3630: CALL_OW 88
// wait ( 20 ) ;
3634: LD_INT 20
3636: PPUSH
3637: CALL_OW 67
// Query ( QTruck ) ;
3641: LD_STRING QTruck
3643: PPUSH
3644: CALL_OW 97
// InGameOff ;
3648: CALL_OW 9
// ChangeMissionObjectives ( MArtPickup ) ;
3652: LD_STRING MArtPickup
3654: PPUSH
3655: CALL_OW 337
// SetAreaMapShow ( escape_area , 1 ) ;
3659: LD_INT 2
3661: PPUSH
3662: LD_INT 1
3664: PPUSH
3665: CALL_OW 424
// end ;
3669: LD_VAR 0 1
3673: RET
// every 0 0$3 trigger FilterUnitsInArea ( escape_area , [ [ f_type , unit_vehicle ] , [ f_control , control_manual ] , [ f_not , [ f_empty ] ] ] ) = 2 and IsInUnit ( JMM ) and IsInUnit ( Burlak ) and ( GetWeapon ( IsInUnit ( JMM ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] or GetWeapon ( IsInUnit ( Burlak ) ) in [ ru_cargo_bay , us_cargo_bay , ru_big_cargo_bay , ar_cargo_bay ] ) do var i , macmilanVeh , burlakVeh ;
3674: LD_INT 2
3676: PPUSH
3677: LD_INT 21
3679: PUSH
3680: LD_INT 2
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: LD_INT 33
3689: PUSH
3690: LD_INT 1
3692: PUSH
3693: EMPTY
3694: LIST
3695: LIST
3696: PUSH
3697: LD_INT 3
3699: PUSH
3700: LD_INT 58
3702: PUSH
3703: EMPTY
3704: LIST
3705: PUSH
3706: EMPTY
3707: LIST
3708: LIST
3709: PUSH
3710: EMPTY
3711: LIST
3712: LIST
3713: LIST
3714: PPUSH
3715: CALL_OW 70
3719: PUSH
3720: LD_INT 2
3722: EQUAL
3723: IFFALSE 3736
3725: PUSH
3726: LD_EXP 2
3730: PPUSH
3731: CALL_OW 310
3735: AND
3736: IFFALSE 3749
3738: PUSH
3739: LD_EXP 3
3743: PPUSH
3744: CALL_OW 310
3748: AND
3749: IFFALSE 3823
3751: PUSH
3752: LD_EXP 2
3756: PPUSH
3757: CALL_OW 310
3761: PPUSH
3762: CALL_OW 264
3766: PUSH
3767: LD_INT 51
3769: PUSH
3770: LD_INT 12
3772: PUSH
3773: LD_INT 89
3775: PUSH
3776: LD_INT 32
3778: PUSH
3779: EMPTY
3780: LIST
3781: LIST
3782: LIST
3783: LIST
3784: IN
3785: IFTRUE 3822
3787: PUSH
3788: LD_EXP 3
3792: PPUSH
3793: CALL_OW 310
3797: PPUSH
3798: CALL_OW 264
3802: PUSH
3803: LD_INT 51
3805: PUSH
3806: LD_INT 12
3808: PUSH
3809: LD_INT 89
3811: PUSH
3812: LD_INT 32
3814: PUSH
3815: EMPTY
3816: LIST
3817: LIST
3818: LIST
3819: LIST
3820: IN
3821: OR
3822: AND
3823: IFFALSE 4033
3825: GO 3827
3827: DISABLE
3828: LD_INT 0
3830: PPUSH
3831: PPUSH
3832: PPUSH
// begin macmilanVeh := IsInUnit ( JMM ) ;
3833: LD_ADDR_VAR 0 2
3837: PUSH
3838: LD_EXP 2
3842: PPUSH
3843: CALL_OW 310
3847: ST_TO_ADDR
// burlakVeh := IsInUnit ( Burlak ) ;
3848: LD_ADDR_VAR 0 3
3852: PUSH
3853: LD_EXP 3
3857: PPUSH
3858: CALL_OW 310
3862: ST_TO_ADDR
// SaveVariable ( [ GetChassis ( macmilanVeh ) , GetEngine ( macmilanVeh ) , control_manual , GetWeapon ( macmilanVeh ) , GetMark ( macmilanVeh ) , GetNation ( macmilanVeh ) ] , 14a_JMMVeh ) ;
3863: LD_VAR 0 2
3867: PPUSH
3868: CALL_OW 265
3872: PUSH
3873: LD_VAR 0 2
3877: PPUSH
3878: CALL_OW 262
3882: PUSH
3883: LD_INT 1
3885: PUSH
3886: LD_VAR 0 2
3890: PPUSH
3891: CALL_OW 264
3895: PUSH
3896: LD_VAR 0 2
3900: PPUSH
3901: CALL_OW 271
3905: PUSH
3906: LD_VAR 0 2
3910: PPUSH
3911: CALL_OW 248
3915: PUSH
3916: EMPTY
3917: LIST
3918: LIST
3919: LIST
3920: LIST
3921: LIST
3922: LIST
3923: PPUSH
3924: LD_STRING 14a_JMMVeh
3926: PPUSH
3927: CALL_OW 39
// SaveVariable ( [ GetChassis ( burlakVeh ) , GetEngine ( burlakVeh ) , control_manual , GetWeapon ( burlakVeh ) , GetMark ( burlakVeh ) , GetNation ( burlakVeh ) ] , 14a_BurlakVeh ) ;
3931: LD_VAR 0 3
3935: PPUSH
3936: CALL_OW 265
3940: PUSH
3941: LD_VAR 0 3
3945: PPUSH
3946: CALL_OW 262
3950: PUSH
3951: LD_INT 1
3953: PUSH
3954: LD_VAR 0 3
3958: PPUSH
3959: CALL_OW 264
3963: PUSH
3964: LD_VAR 0 3
3968: PPUSH
3969: CALL_OW 271
3973: PUSH
3974: LD_VAR 0 3
3978: PPUSH
3979: CALL_OW 248
3983: PUSH
3984: EMPTY
3985: LIST
3986: LIST
3987: LIST
3988: LIST
3989: LIST
3990: LIST
3991: PPUSH
3992: LD_STRING 14a_BurlakVeh
3994: PPUSH
3995: CALL_OW 39
// SaveCharacters ( JMM , 14a_JMM ) ;
3999: LD_EXP 2
4003: PPUSH
4004: LD_STRING 14a_JMM
4006: PPUSH
4007: CALL_OW 38
// SaveCharacters ( Burlak , 14a_Burlak ) ;
4011: LD_EXP 3
4015: PPUSH
4016: LD_STRING 14a_Burlak
4018: PPUSH
4019: CALL_OW 38
// ChangeMap ( 1 , %_cont ) ;
4023: LD_INT 1
4025: PPUSH
4026: LD_STRING %_cont
4028: PPUSH
4029: CALL_OW 340
// end ;
4033: PPOPN 3
4035: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 4 ] , [ f_not , [ f_lives , 950 ] ] ] ) do
4036: LD_INT 22
4038: PUSH
4039: LD_INT 4
4041: PUSH
4042: EMPTY
4043: LIST
4044: LIST
4045: PUSH
4046: LD_INT 3
4048: PUSH
4049: LD_INT 24
4051: PUSH
4052: LD_INT 950
4054: PUSH
4055: EMPTY
4056: LIST
4057: LIST
4058: PUSH
4059: EMPTY
4060: LIST
4061: LIST
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PPUSH
4067: CALL_OW 69
4071: IFFALSE 4083
4073: GO 4075
4075: DISABLE
// YouLost ( FriendlyFire ) ;
4076: LD_STRING FriendlyFire
4078: PPUSH
4079: CALL_OW 104
4083: END
// every 0 0$1 trigger IsDead ( Burlak ) do
4084: LD_EXP 3
4088: PPUSH
4089: CALL_OW 301
4093: IFFALSE 4105
4095: GO 4097
4097: DISABLE
// YouLost ( Burlak ) ;
4098: LD_STRING Burlak
4100: PPUSH
4101: CALL_OW 104
4105: END
// every 0 0$1 trigger IsDead ( JMM ) do
4106: LD_EXP 2
4110: PPUSH
4111: CALL_OW 301
4115: IFFALSE 4127
4117: GO 4119
4119: DISABLE
// YouLost ( JMM ) ; end_of_file end_of_file
4120: LD_STRING JMM
4122: PPUSH
4123: CALL_OW 104
4127: END
// export globalGameSaveCounter ; every 0 0$1 do
4128: GO 4130
4130: DISABLE
// begin enable ;
4131: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
4132: LD_STRING updateTimer(
4134: PUSH
4135: LD_OWVAR 1
4139: STR
4140: PUSH
4141: LD_STRING );
4143: STR
4144: PPUSH
4145: CALL_OW 559
// end ;
4149: END
// every 0 0$1 do
4150: GO 4152
4152: DISABLE
// begin globalGameSaveCounter := 0 ;
4153: LD_ADDR_EXP 39
4157: PUSH
4158: LD_INT 0
4160: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
4161: LD_STRING setGameSaveCounter(0)
4163: PPUSH
4164: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
4168: LD_STRING initStreamRollete();
4170: PPUSH
4171: CALL_OW 559
// InitStreamMode ;
4175: CALL 5520 0 0
// DefineStreamItems ( false ) ;
4179: LD_INT 0
4181: PPUSH
4182: CALL 5984 0 1
// end ;
4186: END
// export function SOS_MapStart ( ) ; begin
4187: LD_INT 0
4189: PPUSH
// if streamModeActive then
4190: LD_EXP 40
4194: IFFALSE 4203
// DefineStreamItems ( true ) ;
4196: LD_INT 1
4198: PPUSH
4199: CALL 5984 0 1
// UpdateLuaVariables ( ) ;
4203: CALL 4220 0 0
// UpdateFactoryWaypoints ( ) ;
4207: CALL 19106 0 0
// UpdateWarehouseGatheringPoints ( ) ;
4211: CALL 19358 0 0
// end ;
4215: LD_VAR 0 1
4219: RET
// function UpdateLuaVariables ( ) ; begin
4220: LD_INT 0
4222: PPUSH
// if globalGameSaveCounter then
4223: LD_EXP 39
4227: IFFALSE 4261
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
4229: LD_ADDR_EXP 39
4233: PUSH
4234: LD_EXP 39
4238: PPUSH
4239: CALL 66144 0 1
4243: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
4244: LD_STRING setGameSaveCounter(
4246: PUSH
4247: LD_EXP 39
4251: STR
4252: PUSH
4253: LD_STRING )
4255: STR
4256: PPUSH
4257: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
4261: LD_STRING setGameDifficulty(
4263: PUSH
4264: LD_OWVAR 67
4268: STR
4269: PUSH
4270: LD_STRING )
4272: STR
4273: PPUSH
4274: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
4278: LD_STRING displayDifficulty(
4280: PUSH
4281: LD_OWVAR 67
4285: STR
4286: PUSH
4287: LD_STRING )
4289: STR
4290: PPUSH
4291: CALL_OW 559
// end ;
4295: LD_VAR 0 1
4299: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
4300: LD_INT 0
4302: PPUSH
// if p2 = stream_mode then
4303: LD_VAR 0 2
4307: PUSH
4308: LD_INT 100
4310: EQUAL
4311: IFFALSE 5314
// begin if not StreamModeActive then
4313: LD_EXP 40
4317: NOT
4318: IFFALSE 4328
// StreamModeActive := true ;
4320: LD_ADDR_EXP 40
4324: PUSH
4325: LD_INT 1
4327: ST_TO_ADDR
// if p3 = 0 then
4328: LD_VAR 0 3
4332: PUSH
4333: LD_INT 0
4335: EQUAL
4336: IFFALSE 4342
// InitStreamMode ;
4338: CALL 5520 0 0
// if p3 = 1 then
4342: LD_VAR 0 3
4346: PUSH
4347: LD_INT 1
4349: EQUAL
4350: IFFALSE 4360
// sRocket := true ;
4352: LD_ADDR_EXP 45
4356: PUSH
4357: LD_INT 1
4359: ST_TO_ADDR
// if p3 = 2 then
4360: LD_VAR 0 3
4364: PUSH
4365: LD_INT 2
4367: EQUAL
4368: IFFALSE 4378
// sSpeed := true ;
4370: LD_ADDR_EXP 44
4374: PUSH
4375: LD_INT 1
4377: ST_TO_ADDR
// if p3 = 3 then
4378: LD_VAR 0 3
4382: PUSH
4383: LD_INT 3
4385: EQUAL
4386: IFFALSE 4396
// sEngine := true ;
4388: LD_ADDR_EXP 46
4392: PUSH
4393: LD_INT 1
4395: ST_TO_ADDR
// if p3 = 4 then
4396: LD_VAR 0 3
4400: PUSH
4401: LD_INT 4
4403: EQUAL
4404: IFFALSE 4414
// sSpec := true ;
4406: LD_ADDR_EXP 43
4410: PUSH
4411: LD_INT 1
4413: ST_TO_ADDR
// if p3 = 5 then
4414: LD_VAR 0 3
4418: PUSH
4419: LD_INT 5
4421: EQUAL
4422: IFFALSE 4432
// sLevel := true ;
4424: LD_ADDR_EXP 47
4428: PUSH
4429: LD_INT 1
4431: ST_TO_ADDR
// if p3 = 6 then
4432: LD_VAR 0 3
4436: PUSH
4437: LD_INT 6
4439: EQUAL
4440: IFFALSE 4450
// sArmoury := true ;
4442: LD_ADDR_EXP 48
4446: PUSH
4447: LD_INT 1
4449: ST_TO_ADDR
// if p3 = 7 then
4450: LD_VAR 0 3
4454: PUSH
4455: LD_INT 7
4457: EQUAL
4458: IFFALSE 4468
// sRadar := true ;
4460: LD_ADDR_EXP 49
4464: PUSH
4465: LD_INT 1
4467: ST_TO_ADDR
// if p3 = 8 then
4468: LD_VAR 0 3
4472: PUSH
4473: LD_INT 8
4475: EQUAL
4476: IFFALSE 4486
// sBunker := true ;
4478: LD_ADDR_EXP 50
4482: PUSH
4483: LD_INT 1
4485: ST_TO_ADDR
// if p3 = 9 then
4486: LD_VAR 0 3
4490: PUSH
4491: LD_INT 9
4493: EQUAL
4494: IFFALSE 4504
// sHack := true ;
4496: LD_ADDR_EXP 51
4500: PUSH
4501: LD_INT 1
4503: ST_TO_ADDR
// if p3 = 10 then
4504: LD_VAR 0 3
4508: PUSH
4509: LD_INT 10
4511: EQUAL
4512: IFFALSE 4522
// sFire := true ;
4514: LD_ADDR_EXP 52
4518: PUSH
4519: LD_INT 1
4521: ST_TO_ADDR
// if p3 = 11 then
4522: LD_VAR 0 3
4526: PUSH
4527: LD_INT 11
4529: EQUAL
4530: IFFALSE 4540
// sRefresh := true ;
4532: LD_ADDR_EXP 53
4536: PUSH
4537: LD_INT 1
4539: ST_TO_ADDR
// if p3 = 12 then
4540: LD_VAR 0 3
4544: PUSH
4545: LD_INT 12
4547: EQUAL
4548: IFFALSE 4558
// sExp := true ;
4550: LD_ADDR_EXP 54
4554: PUSH
4555: LD_INT 1
4557: ST_TO_ADDR
// if p3 = 13 then
4558: LD_VAR 0 3
4562: PUSH
4563: LD_INT 13
4565: EQUAL
4566: IFFALSE 4576
// sDepot := true ;
4568: LD_ADDR_EXP 55
4572: PUSH
4573: LD_INT 1
4575: ST_TO_ADDR
// if p3 = 14 then
4576: LD_VAR 0 3
4580: PUSH
4581: LD_INT 14
4583: EQUAL
4584: IFFALSE 4594
// sFlag := true ;
4586: LD_ADDR_EXP 56
4590: PUSH
4591: LD_INT 1
4593: ST_TO_ADDR
// if p3 = 15 then
4594: LD_VAR 0 3
4598: PUSH
4599: LD_INT 15
4601: EQUAL
4602: IFFALSE 4612
// sKamikadze := true ;
4604: LD_ADDR_EXP 64
4608: PUSH
4609: LD_INT 1
4611: ST_TO_ADDR
// if p3 = 16 then
4612: LD_VAR 0 3
4616: PUSH
4617: LD_INT 16
4619: EQUAL
4620: IFFALSE 4630
// sTroll := true ;
4622: LD_ADDR_EXP 65
4626: PUSH
4627: LD_INT 1
4629: ST_TO_ADDR
// if p3 = 17 then
4630: LD_VAR 0 3
4634: PUSH
4635: LD_INT 17
4637: EQUAL
4638: IFFALSE 4648
// sSlow := true ;
4640: LD_ADDR_EXP 66
4644: PUSH
4645: LD_INT 1
4647: ST_TO_ADDR
// if p3 = 18 then
4648: LD_VAR 0 3
4652: PUSH
4653: LD_INT 18
4655: EQUAL
4656: IFFALSE 4666
// sLack := true ;
4658: LD_ADDR_EXP 67
4662: PUSH
4663: LD_INT 1
4665: ST_TO_ADDR
// if p3 = 19 then
4666: LD_VAR 0 3
4670: PUSH
4671: LD_INT 19
4673: EQUAL
4674: IFFALSE 4684
// sTank := true ;
4676: LD_ADDR_EXP 69
4680: PUSH
4681: LD_INT 1
4683: ST_TO_ADDR
// if p3 = 20 then
4684: LD_VAR 0 3
4688: PUSH
4689: LD_INT 20
4691: EQUAL
4692: IFFALSE 4702
// sRemote := true ;
4694: LD_ADDR_EXP 70
4698: PUSH
4699: LD_INT 1
4701: ST_TO_ADDR
// if p3 = 21 then
4702: LD_VAR 0 3
4706: PUSH
4707: LD_INT 21
4709: EQUAL
4710: IFFALSE 4720
// sPowell := true ;
4712: LD_ADDR_EXP 71
4716: PUSH
4717: LD_INT 1
4719: ST_TO_ADDR
// if p3 = 22 then
4720: LD_VAR 0 3
4724: PUSH
4725: LD_INT 22
4727: EQUAL
4728: IFFALSE 4738
// sTeleport := true ;
4730: LD_ADDR_EXP 74
4734: PUSH
4735: LD_INT 1
4737: ST_TO_ADDR
// if p3 = 23 then
4738: LD_VAR 0 3
4742: PUSH
4743: LD_INT 23
4745: EQUAL
4746: IFFALSE 4756
// sOilTower := true ;
4748: LD_ADDR_EXP 76
4752: PUSH
4753: LD_INT 1
4755: ST_TO_ADDR
// if p3 = 24 then
4756: LD_VAR 0 3
4760: PUSH
4761: LD_INT 24
4763: EQUAL
4764: IFFALSE 4774
// sShovel := true ;
4766: LD_ADDR_EXP 77
4770: PUSH
4771: LD_INT 1
4773: ST_TO_ADDR
// if p3 = 25 then
4774: LD_VAR 0 3
4778: PUSH
4779: LD_INT 25
4781: EQUAL
4782: IFFALSE 4792
// sSheik := true ;
4784: LD_ADDR_EXP 78
4788: PUSH
4789: LD_INT 1
4791: ST_TO_ADDR
// if p3 = 26 then
4792: LD_VAR 0 3
4796: PUSH
4797: LD_INT 26
4799: EQUAL
4800: IFFALSE 4810
// sEarthquake := true ;
4802: LD_ADDR_EXP 80
4806: PUSH
4807: LD_INT 1
4809: ST_TO_ADDR
// if p3 = 27 then
4810: LD_VAR 0 3
4814: PUSH
4815: LD_INT 27
4817: EQUAL
4818: IFFALSE 4828
// sAI := true ;
4820: LD_ADDR_EXP 81
4824: PUSH
4825: LD_INT 1
4827: ST_TO_ADDR
// if p3 = 28 then
4828: LD_VAR 0 3
4832: PUSH
4833: LD_INT 28
4835: EQUAL
4836: IFFALSE 4846
// sCargo := true ;
4838: LD_ADDR_EXP 84
4842: PUSH
4843: LD_INT 1
4845: ST_TO_ADDR
// if p3 = 29 then
4846: LD_VAR 0 3
4850: PUSH
4851: LD_INT 29
4853: EQUAL
4854: IFFALSE 4864
// sDLaser := true ;
4856: LD_ADDR_EXP 85
4860: PUSH
4861: LD_INT 1
4863: ST_TO_ADDR
// if p3 = 30 then
4864: LD_VAR 0 3
4868: PUSH
4869: LD_INT 30
4871: EQUAL
4872: IFFALSE 4882
// sExchange := true ;
4874: LD_ADDR_EXP 86
4878: PUSH
4879: LD_INT 1
4881: ST_TO_ADDR
// if p3 = 31 then
4882: LD_VAR 0 3
4886: PUSH
4887: LD_INT 31
4889: EQUAL
4890: IFFALSE 4900
// sFac := true ;
4892: LD_ADDR_EXP 87
4896: PUSH
4897: LD_INT 1
4899: ST_TO_ADDR
// if p3 = 32 then
4900: LD_VAR 0 3
4904: PUSH
4905: LD_INT 32
4907: EQUAL
4908: IFFALSE 4918
// sPower := true ;
4910: LD_ADDR_EXP 88
4914: PUSH
4915: LD_INT 1
4917: ST_TO_ADDR
// if p3 = 33 then
4918: LD_VAR 0 3
4922: PUSH
4923: LD_INT 33
4925: EQUAL
4926: IFFALSE 4936
// sRandom := true ;
4928: LD_ADDR_EXP 89
4932: PUSH
4933: LD_INT 1
4935: ST_TO_ADDR
// if p3 = 34 then
4936: LD_VAR 0 3
4940: PUSH
4941: LD_INT 34
4943: EQUAL
4944: IFFALSE 4954
// sShield := true ;
4946: LD_ADDR_EXP 90
4950: PUSH
4951: LD_INT 1
4953: ST_TO_ADDR
// if p3 = 35 then
4954: LD_VAR 0 3
4958: PUSH
4959: LD_INT 35
4961: EQUAL
4962: IFFALSE 4972
// sTime := true ;
4964: LD_ADDR_EXP 91
4968: PUSH
4969: LD_INT 1
4971: ST_TO_ADDR
// if p3 = 36 then
4972: LD_VAR 0 3
4976: PUSH
4977: LD_INT 36
4979: EQUAL
4980: IFFALSE 4990
// sTools := true ;
4982: LD_ADDR_EXP 92
4986: PUSH
4987: LD_INT 1
4989: ST_TO_ADDR
// if p3 = 101 then
4990: LD_VAR 0 3
4994: PUSH
4995: LD_INT 101
4997: EQUAL
4998: IFFALSE 5008
// sSold := true ;
5000: LD_ADDR_EXP 57
5004: PUSH
5005: LD_INT 1
5007: ST_TO_ADDR
// if p3 = 102 then
5008: LD_VAR 0 3
5012: PUSH
5013: LD_INT 102
5015: EQUAL
5016: IFFALSE 5026
// sDiff := true ;
5018: LD_ADDR_EXP 58
5022: PUSH
5023: LD_INT 1
5025: ST_TO_ADDR
// if p3 = 103 then
5026: LD_VAR 0 3
5030: PUSH
5031: LD_INT 103
5033: EQUAL
5034: IFFALSE 5044
// sFog := true ;
5036: LD_ADDR_EXP 61
5040: PUSH
5041: LD_INT 1
5043: ST_TO_ADDR
// if p3 = 104 then
5044: LD_VAR 0 3
5048: PUSH
5049: LD_INT 104
5051: EQUAL
5052: IFFALSE 5062
// sReset := true ;
5054: LD_ADDR_EXP 62
5058: PUSH
5059: LD_INT 1
5061: ST_TO_ADDR
// if p3 = 105 then
5062: LD_VAR 0 3
5066: PUSH
5067: LD_INT 105
5069: EQUAL
5070: IFFALSE 5080
// sSun := true ;
5072: LD_ADDR_EXP 63
5076: PUSH
5077: LD_INT 1
5079: ST_TO_ADDR
// if p3 = 106 then
5080: LD_VAR 0 3
5084: PUSH
5085: LD_INT 106
5087: EQUAL
5088: IFFALSE 5098
// sTiger := true ;
5090: LD_ADDR_EXP 59
5094: PUSH
5095: LD_INT 1
5097: ST_TO_ADDR
// if p3 = 107 then
5098: LD_VAR 0 3
5102: PUSH
5103: LD_INT 107
5105: EQUAL
5106: IFFALSE 5116
// sBomb := true ;
5108: LD_ADDR_EXP 60
5112: PUSH
5113: LD_INT 1
5115: ST_TO_ADDR
// if p3 = 108 then
5116: LD_VAR 0 3
5120: PUSH
5121: LD_INT 108
5123: EQUAL
5124: IFFALSE 5134
// sWound := true ;
5126: LD_ADDR_EXP 68
5130: PUSH
5131: LD_INT 1
5133: ST_TO_ADDR
// if p3 = 109 then
5134: LD_VAR 0 3
5138: PUSH
5139: LD_INT 109
5141: EQUAL
5142: IFFALSE 5152
// sBetray := true ;
5144: LD_ADDR_EXP 72
5148: PUSH
5149: LD_INT 1
5151: ST_TO_ADDR
// if p3 = 110 then
5152: LD_VAR 0 3
5156: PUSH
5157: LD_INT 110
5159: EQUAL
5160: IFFALSE 5170
// sContamin := true ;
5162: LD_ADDR_EXP 73
5166: PUSH
5167: LD_INT 1
5169: ST_TO_ADDR
// if p3 = 111 then
5170: LD_VAR 0 3
5174: PUSH
5175: LD_INT 111
5177: EQUAL
5178: IFFALSE 5188
// sOil := true ;
5180: LD_ADDR_EXP 75
5184: PUSH
5185: LD_INT 1
5187: ST_TO_ADDR
// if p3 = 112 then
5188: LD_VAR 0 3
5192: PUSH
5193: LD_INT 112
5195: EQUAL
5196: IFFALSE 5206
// sStu := true ;
5198: LD_ADDR_EXP 79
5202: PUSH
5203: LD_INT 1
5205: ST_TO_ADDR
// if p3 = 113 then
5206: LD_VAR 0 3
5210: PUSH
5211: LD_INT 113
5213: EQUAL
5214: IFFALSE 5224
// sBazooka := true ;
5216: LD_ADDR_EXP 82
5220: PUSH
5221: LD_INT 1
5223: ST_TO_ADDR
// if p3 = 114 then
5224: LD_VAR 0 3
5228: PUSH
5229: LD_INT 114
5231: EQUAL
5232: IFFALSE 5242
// sMortar := true ;
5234: LD_ADDR_EXP 83
5238: PUSH
5239: LD_INT 1
5241: ST_TO_ADDR
// if p3 = 115 then
5242: LD_VAR 0 3
5246: PUSH
5247: LD_INT 115
5249: EQUAL
5250: IFFALSE 5260
// sRanger := true ;
5252: LD_ADDR_EXP 93
5256: PUSH
5257: LD_INT 1
5259: ST_TO_ADDR
// if p3 = 116 then
5260: LD_VAR 0 3
5264: PUSH
5265: LD_INT 116
5267: EQUAL
5268: IFFALSE 5278
// sComputer := true ;
5270: LD_ADDR_EXP 94
5274: PUSH
5275: LD_INT 1
5277: ST_TO_ADDR
// if p3 = 117 then
5278: LD_VAR 0 3
5282: PUSH
5283: LD_INT 117
5285: EQUAL
5286: IFFALSE 5296
// s30 := true ;
5288: LD_ADDR_EXP 95
5292: PUSH
5293: LD_INT 1
5295: ST_TO_ADDR
// if p3 = 118 then
5296: LD_VAR 0 3
5300: PUSH
5301: LD_INT 118
5303: EQUAL
5304: IFFALSE 5314
// s60 := true ;
5306: LD_ADDR_EXP 96
5310: PUSH
5311: LD_INT 1
5313: ST_TO_ADDR
// end ; if p2 = hack_mode then
5314: LD_VAR 0 2
5318: PUSH
5319: LD_INT 101
5321: EQUAL
5322: IFFALSE 5450
// begin case p3 of 1 :
5324: LD_VAR 0 3
5328: PUSH
5329: LD_INT 1
5331: DOUBLE
5332: EQUAL
5333: IFTRUE 5337
5335: GO 5344
5337: POP
// hHackUnlimitedResources ; 2 :
5338: CALL 17713 0 0
5342: GO 5450
5344: LD_INT 2
5346: DOUBLE
5347: EQUAL
5348: IFTRUE 5352
5350: GO 5359
5352: POP
// hHackSetLevel10 ; 3 :
5353: CALL 17846 0 0
5357: GO 5450
5359: LD_INT 3
5361: DOUBLE
5362: EQUAL
5363: IFTRUE 5367
5365: GO 5374
5367: POP
// hHackSetLevel10YourUnits ; 4 :
5368: CALL 17931 0 0
5372: GO 5450
5374: LD_INT 4
5376: DOUBLE
5377: EQUAL
5378: IFTRUE 5382
5380: GO 5389
5382: POP
// hHackInvincible ; 5 :
5383: CALL 18379 0 0
5387: GO 5450
5389: LD_INT 5
5391: DOUBLE
5392: EQUAL
5393: IFTRUE 5397
5395: GO 5404
5397: POP
// hHackInvisible ; 6 :
5398: CALL 18490 0 0
5402: GO 5450
5404: LD_INT 6
5406: DOUBLE
5407: EQUAL
5408: IFTRUE 5412
5410: GO 5419
5412: POP
// hHackChangeYourSide ; 7 :
5413: CALL 18547 0 0
5417: GO 5450
5419: LD_INT 7
5421: DOUBLE
5422: EQUAL
5423: IFTRUE 5427
5425: GO 5434
5427: POP
// hHackChangeUnitSide ; 8 :
5428: CALL 18589 0 0
5432: GO 5450
5434: LD_INT 8
5436: DOUBLE
5437: EQUAL
5438: IFTRUE 5442
5440: GO 5449
5442: POP
// hHackFog ; end ;
5443: CALL 18690 0 0
5447: GO 5450
5449: POP
// end ; if p2 = game_save_mode then
5450: LD_VAR 0 2
5454: PUSH
5455: LD_INT 102
5457: EQUAL
5458: IFFALSE 5515
// begin if p3 = 1 then
5460: LD_VAR 0 3
5464: PUSH
5465: LD_INT 1
5467: EQUAL
5468: IFFALSE 5480
// globalGameSaveCounter := p4 ;
5470: LD_ADDR_EXP 39
5474: PUSH
5475: LD_VAR 0 4
5479: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
5480: LD_VAR 0 3
5484: PUSH
5485: LD_INT 2
5487: EQUAL
5488: IFFALSE 5496
5490: PUSH
5491: LD_EXP 39
5495: AND
5496: IFFALSE 5515
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
5498: LD_STRING setGameSaveCounter(
5500: PUSH
5501: LD_EXP 39
5505: STR
5506: PUSH
5507: LD_STRING )
5509: STR
5510: PPUSH
5511: CALL_OW 559
// end ; end ;
5515: LD_VAR 0 7
5519: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
5520: LD_INT 0
5522: PPUSH
// streamModeActive := false ;
5523: LD_ADDR_EXP 40
5527: PUSH
5528: LD_INT 0
5530: ST_TO_ADDR
// normalCounter := 36 ;
5531: LD_ADDR_EXP 41
5535: PUSH
5536: LD_INT 36
5538: ST_TO_ADDR
// hardcoreCounter := 18 ;
5539: LD_ADDR_EXP 42
5543: PUSH
5544: LD_INT 18
5546: ST_TO_ADDR
// sRocket := false ;
5547: LD_ADDR_EXP 45
5551: PUSH
5552: LD_INT 0
5554: ST_TO_ADDR
// sSpeed := false ;
5555: LD_ADDR_EXP 44
5559: PUSH
5560: LD_INT 0
5562: ST_TO_ADDR
// sEngine := false ;
5563: LD_ADDR_EXP 46
5567: PUSH
5568: LD_INT 0
5570: ST_TO_ADDR
// sSpec := false ;
5571: LD_ADDR_EXP 43
5575: PUSH
5576: LD_INT 0
5578: ST_TO_ADDR
// sLevel := false ;
5579: LD_ADDR_EXP 47
5583: PUSH
5584: LD_INT 0
5586: ST_TO_ADDR
// sArmoury := false ;
5587: LD_ADDR_EXP 48
5591: PUSH
5592: LD_INT 0
5594: ST_TO_ADDR
// sRadar := false ;
5595: LD_ADDR_EXP 49
5599: PUSH
5600: LD_INT 0
5602: ST_TO_ADDR
// sBunker := false ;
5603: LD_ADDR_EXP 50
5607: PUSH
5608: LD_INT 0
5610: ST_TO_ADDR
// sHack := false ;
5611: LD_ADDR_EXP 51
5615: PUSH
5616: LD_INT 0
5618: ST_TO_ADDR
// sFire := false ;
5619: LD_ADDR_EXP 52
5623: PUSH
5624: LD_INT 0
5626: ST_TO_ADDR
// sRefresh := false ;
5627: LD_ADDR_EXP 53
5631: PUSH
5632: LD_INT 0
5634: ST_TO_ADDR
// sExp := false ;
5635: LD_ADDR_EXP 54
5639: PUSH
5640: LD_INT 0
5642: ST_TO_ADDR
// sDepot := false ;
5643: LD_ADDR_EXP 55
5647: PUSH
5648: LD_INT 0
5650: ST_TO_ADDR
// sFlag := false ;
5651: LD_ADDR_EXP 56
5655: PUSH
5656: LD_INT 0
5658: ST_TO_ADDR
// sKamikadze := false ;
5659: LD_ADDR_EXP 64
5663: PUSH
5664: LD_INT 0
5666: ST_TO_ADDR
// sTroll := false ;
5667: LD_ADDR_EXP 65
5671: PUSH
5672: LD_INT 0
5674: ST_TO_ADDR
// sSlow := false ;
5675: LD_ADDR_EXP 66
5679: PUSH
5680: LD_INT 0
5682: ST_TO_ADDR
// sLack := false ;
5683: LD_ADDR_EXP 67
5687: PUSH
5688: LD_INT 0
5690: ST_TO_ADDR
// sTank := false ;
5691: LD_ADDR_EXP 69
5695: PUSH
5696: LD_INT 0
5698: ST_TO_ADDR
// sRemote := false ;
5699: LD_ADDR_EXP 70
5703: PUSH
5704: LD_INT 0
5706: ST_TO_ADDR
// sPowell := false ;
5707: LD_ADDR_EXP 71
5711: PUSH
5712: LD_INT 0
5714: ST_TO_ADDR
// sTeleport := false ;
5715: LD_ADDR_EXP 74
5719: PUSH
5720: LD_INT 0
5722: ST_TO_ADDR
// sOilTower := false ;
5723: LD_ADDR_EXP 76
5727: PUSH
5728: LD_INT 0
5730: ST_TO_ADDR
// sShovel := false ;
5731: LD_ADDR_EXP 77
5735: PUSH
5736: LD_INT 0
5738: ST_TO_ADDR
// sSheik := false ;
5739: LD_ADDR_EXP 78
5743: PUSH
5744: LD_INT 0
5746: ST_TO_ADDR
// sEarthquake := false ;
5747: LD_ADDR_EXP 80
5751: PUSH
5752: LD_INT 0
5754: ST_TO_ADDR
// sAI := false ;
5755: LD_ADDR_EXP 81
5759: PUSH
5760: LD_INT 0
5762: ST_TO_ADDR
// sCargo := false ;
5763: LD_ADDR_EXP 84
5767: PUSH
5768: LD_INT 0
5770: ST_TO_ADDR
// sDLaser := false ;
5771: LD_ADDR_EXP 85
5775: PUSH
5776: LD_INT 0
5778: ST_TO_ADDR
// sExchange := false ;
5779: LD_ADDR_EXP 86
5783: PUSH
5784: LD_INT 0
5786: ST_TO_ADDR
// sFac := false ;
5787: LD_ADDR_EXP 87
5791: PUSH
5792: LD_INT 0
5794: ST_TO_ADDR
// sPower := false ;
5795: LD_ADDR_EXP 88
5799: PUSH
5800: LD_INT 0
5802: ST_TO_ADDR
// sRandom := false ;
5803: LD_ADDR_EXP 89
5807: PUSH
5808: LD_INT 0
5810: ST_TO_ADDR
// sShield := false ;
5811: LD_ADDR_EXP 90
5815: PUSH
5816: LD_INT 0
5818: ST_TO_ADDR
// sTime := false ;
5819: LD_ADDR_EXP 91
5823: PUSH
5824: LD_INT 0
5826: ST_TO_ADDR
// sTools := false ;
5827: LD_ADDR_EXP 92
5831: PUSH
5832: LD_INT 0
5834: ST_TO_ADDR
// sSold := false ;
5835: LD_ADDR_EXP 57
5839: PUSH
5840: LD_INT 0
5842: ST_TO_ADDR
// sDiff := false ;
5843: LD_ADDR_EXP 58
5847: PUSH
5848: LD_INT 0
5850: ST_TO_ADDR
// sFog := false ;
5851: LD_ADDR_EXP 61
5855: PUSH
5856: LD_INT 0
5858: ST_TO_ADDR
// sReset := false ;
5859: LD_ADDR_EXP 62
5863: PUSH
5864: LD_INT 0
5866: ST_TO_ADDR
// sSun := false ;
5867: LD_ADDR_EXP 63
5871: PUSH
5872: LD_INT 0
5874: ST_TO_ADDR
// sTiger := false ;
5875: LD_ADDR_EXP 59
5879: PUSH
5880: LD_INT 0
5882: ST_TO_ADDR
// sBomb := false ;
5883: LD_ADDR_EXP 60
5887: PUSH
5888: LD_INT 0
5890: ST_TO_ADDR
// sWound := false ;
5891: LD_ADDR_EXP 68
5895: PUSH
5896: LD_INT 0
5898: ST_TO_ADDR
// sBetray := false ;
5899: LD_ADDR_EXP 72
5903: PUSH
5904: LD_INT 0
5906: ST_TO_ADDR
// sContamin := false ;
5907: LD_ADDR_EXP 73
5911: PUSH
5912: LD_INT 0
5914: ST_TO_ADDR
// sOil := false ;
5915: LD_ADDR_EXP 75
5919: PUSH
5920: LD_INT 0
5922: ST_TO_ADDR
// sStu := false ;
5923: LD_ADDR_EXP 79
5927: PUSH
5928: LD_INT 0
5930: ST_TO_ADDR
// sBazooka := false ;
5931: LD_ADDR_EXP 82
5935: PUSH
5936: LD_INT 0
5938: ST_TO_ADDR
// sMortar := false ;
5939: LD_ADDR_EXP 83
5943: PUSH
5944: LD_INT 0
5946: ST_TO_ADDR
// sRanger := false ;
5947: LD_ADDR_EXP 93
5951: PUSH
5952: LD_INT 0
5954: ST_TO_ADDR
// sComputer := false ;
5955: LD_ADDR_EXP 94
5959: PUSH
5960: LD_INT 0
5962: ST_TO_ADDR
// s30 := false ;
5963: LD_ADDR_EXP 95
5967: PUSH
5968: LD_INT 0
5970: ST_TO_ADDR
// s60 := false ;
5971: LD_ADDR_EXP 96
5975: PUSH
5976: LD_INT 0
5978: ST_TO_ADDR
// end ;
5979: LD_VAR 0 1
5983: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
5984: LD_INT 0
5986: PPUSH
5987: PPUSH
5988: PPUSH
5989: PPUSH
5990: PPUSH
5991: PPUSH
5992: PPUSH
// result := [ ] ;
5993: LD_ADDR_VAR 0 2
5997: PUSH
5998: EMPTY
5999: ST_TO_ADDR
// if campaign_id = 1 then
6000: LD_OWVAR 69
6004: PUSH
6005: LD_INT 1
6007: EQUAL
6008: IFFALSE 9174
// begin case mission_number of 1 :
6010: LD_OWVAR 70
6014: PUSH
6015: LD_INT 1
6017: DOUBLE
6018: EQUAL
6019: IFTRUE 6023
6021: GO 6099
6023: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
6024: LD_ADDR_VAR 0 2
6028: PUSH
6029: LD_INT 2
6031: PUSH
6032: LD_INT 4
6034: PUSH
6035: LD_INT 11
6037: PUSH
6038: LD_INT 12
6040: PUSH
6041: LD_INT 15
6043: PUSH
6044: LD_INT 16
6046: PUSH
6047: LD_INT 22
6049: PUSH
6050: LD_INT 23
6052: PUSH
6053: LD_INT 26
6055: PUSH
6056: EMPTY
6057: LIST
6058: LIST
6059: LIST
6060: LIST
6061: LIST
6062: LIST
6063: LIST
6064: LIST
6065: LIST
6066: PUSH
6067: LD_INT 101
6069: PUSH
6070: LD_INT 102
6072: PUSH
6073: LD_INT 106
6075: PUSH
6076: LD_INT 116
6078: PUSH
6079: LD_INT 117
6081: PUSH
6082: LD_INT 118
6084: PUSH
6085: EMPTY
6086: LIST
6087: LIST
6088: LIST
6089: LIST
6090: LIST
6091: LIST
6092: PUSH
6093: EMPTY
6094: LIST
6095: LIST
6096: ST_TO_ADDR
6097: GO 9172
6099: LD_INT 2
6101: DOUBLE
6102: EQUAL
6103: IFTRUE 6107
6105: GO 6191
6107: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
6108: LD_ADDR_VAR 0 2
6112: PUSH
6113: LD_INT 2
6115: PUSH
6116: LD_INT 4
6118: PUSH
6119: LD_INT 11
6121: PUSH
6122: LD_INT 12
6124: PUSH
6125: LD_INT 15
6127: PUSH
6128: LD_INT 16
6130: PUSH
6131: LD_INT 22
6133: PUSH
6134: LD_INT 23
6136: PUSH
6137: LD_INT 26
6139: PUSH
6140: EMPTY
6141: LIST
6142: LIST
6143: LIST
6144: LIST
6145: LIST
6146: LIST
6147: LIST
6148: LIST
6149: LIST
6150: PUSH
6151: LD_INT 101
6153: PUSH
6154: LD_INT 102
6156: PUSH
6157: LD_INT 105
6159: PUSH
6160: LD_INT 106
6162: PUSH
6163: LD_INT 108
6165: PUSH
6166: LD_INT 116
6168: PUSH
6169: LD_INT 117
6171: PUSH
6172: LD_INT 118
6174: PUSH
6175: EMPTY
6176: LIST
6177: LIST
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: LIST
6183: LIST
6184: PUSH
6185: EMPTY
6186: LIST
6187: LIST
6188: ST_TO_ADDR
6189: GO 9172
6191: LD_INT 3
6193: DOUBLE
6194: EQUAL
6195: IFTRUE 6199
6197: GO 6287
6199: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
6200: LD_ADDR_VAR 0 2
6204: PUSH
6205: LD_INT 2
6207: PUSH
6208: LD_INT 4
6210: PUSH
6211: LD_INT 5
6213: PUSH
6214: LD_INT 11
6216: PUSH
6217: LD_INT 12
6219: PUSH
6220: LD_INT 15
6222: PUSH
6223: LD_INT 16
6225: PUSH
6226: LD_INT 22
6228: PUSH
6229: LD_INT 26
6231: PUSH
6232: LD_INT 36
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: LIST
6244: LIST
6245: LIST
6246: PUSH
6247: LD_INT 101
6249: PUSH
6250: LD_INT 102
6252: PUSH
6253: LD_INT 105
6255: PUSH
6256: LD_INT 106
6258: PUSH
6259: LD_INT 108
6261: PUSH
6262: LD_INT 116
6264: PUSH
6265: LD_INT 117
6267: PUSH
6268: LD_INT 118
6270: PUSH
6271: EMPTY
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: LIST
6278: LIST
6279: LIST
6280: PUSH
6281: EMPTY
6282: LIST
6283: LIST
6284: ST_TO_ADDR
6285: GO 9172
6287: LD_INT 4
6289: DOUBLE
6290: EQUAL
6291: IFTRUE 6295
6293: GO 6391
6295: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
6296: LD_ADDR_VAR 0 2
6300: PUSH
6301: LD_INT 2
6303: PUSH
6304: LD_INT 4
6306: PUSH
6307: LD_INT 5
6309: PUSH
6310: LD_INT 8
6312: PUSH
6313: LD_INT 11
6315: PUSH
6316: LD_INT 12
6318: PUSH
6319: LD_INT 15
6321: PUSH
6322: LD_INT 16
6324: PUSH
6325: LD_INT 22
6327: PUSH
6328: LD_INT 23
6330: PUSH
6331: LD_INT 26
6333: PUSH
6334: LD_INT 36
6336: PUSH
6337: EMPTY
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: PUSH
6351: LD_INT 101
6353: PUSH
6354: LD_INT 102
6356: PUSH
6357: LD_INT 105
6359: PUSH
6360: LD_INT 106
6362: PUSH
6363: LD_INT 108
6365: PUSH
6366: LD_INT 116
6368: PUSH
6369: LD_INT 117
6371: PUSH
6372: LD_INT 118
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: LIST
6384: PUSH
6385: EMPTY
6386: LIST
6387: LIST
6388: ST_TO_ADDR
6389: GO 9172
6391: LD_INT 5
6393: DOUBLE
6394: EQUAL
6395: IFTRUE 6399
6397: GO 6511
6399: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
6400: LD_ADDR_VAR 0 2
6404: PUSH
6405: LD_INT 2
6407: PUSH
6408: LD_INT 4
6410: PUSH
6411: LD_INT 5
6413: PUSH
6414: LD_INT 6
6416: PUSH
6417: LD_INT 8
6419: PUSH
6420: LD_INT 11
6422: PUSH
6423: LD_INT 12
6425: PUSH
6426: LD_INT 15
6428: PUSH
6429: LD_INT 16
6431: PUSH
6432: LD_INT 22
6434: PUSH
6435: LD_INT 23
6437: PUSH
6438: LD_INT 25
6440: PUSH
6441: LD_INT 26
6443: PUSH
6444: LD_INT 36
6446: PUSH
6447: EMPTY
6448: LIST
6449: LIST
6450: LIST
6451: LIST
6452: LIST
6453: LIST
6454: LIST
6455: LIST
6456: LIST
6457: LIST
6458: LIST
6459: LIST
6460: LIST
6461: LIST
6462: PUSH
6463: LD_INT 101
6465: PUSH
6466: LD_INT 102
6468: PUSH
6469: LD_INT 105
6471: PUSH
6472: LD_INT 106
6474: PUSH
6475: LD_INT 108
6477: PUSH
6478: LD_INT 109
6480: PUSH
6481: LD_INT 112
6483: PUSH
6484: LD_INT 116
6486: PUSH
6487: LD_INT 117
6489: PUSH
6490: LD_INT 118
6492: PUSH
6493: EMPTY
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: LIST
6500: LIST
6501: LIST
6502: LIST
6503: LIST
6504: PUSH
6505: EMPTY
6506: LIST
6507: LIST
6508: ST_TO_ADDR
6509: GO 9172
6511: LD_INT 6
6513: DOUBLE
6514: EQUAL
6515: IFTRUE 6519
6517: GO 6651
6519: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
6520: LD_ADDR_VAR 0 2
6524: PUSH
6525: LD_INT 2
6527: PUSH
6528: LD_INT 4
6530: PUSH
6531: LD_INT 5
6533: PUSH
6534: LD_INT 6
6536: PUSH
6537: LD_INT 8
6539: PUSH
6540: LD_INT 11
6542: PUSH
6543: LD_INT 12
6545: PUSH
6546: LD_INT 15
6548: PUSH
6549: LD_INT 16
6551: PUSH
6552: LD_INT 20
6554: PUSH
6555: LD_INT 21
6557: PUSH
6558: LD_INT 22
6560: PUSH
6561: LD_INT 23
6563: PUSH
6564: LD_INT 25
6566: PUSH
6567: LD_INT 26
6569: PUSH
6570: LD_INT 30
6572: PUSH
6573: LD_INT 31
6575: PUSH
6576: LD_INT 32
6578: PUSH
6579: LD_INT 36
6581: PUSH
6582: EMPTY
6583: LIST
6584: LIST
6585: LIST
6586: LIST
6587: LIST
6588: LIST
6589: LIST
6590: LIST
6591: LIST
6592: LIST
6593: LIST
6594: LIST
6595: LIST
6596: LIST
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: PUSH
6603: LD_INT 101
6605: PUSH
6606: LD_INT 102
6608: PUSH
6609: LD_INT 105
6611: PUSH
6612: LD_INT 106
6614: PUSH
6615: LD_INT 108
6617: PUSH
6618: LD_INT 109
6620: PUSH
6621: LD_INT 112
6623: PUSH
6624: LD_INT 116
6626: PUSH
6627: LD_INT 117
6629: PUSH
6630: LD_INT 118
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: LIST
6643: LIST
6644: PUSH
6645: EMPTY
6646: LIST
6647: LIST
6648: ST_TO_ADDR
6649: GO 9172
6651: LD_INT 7
6653: DOUBLE
6654: EQUAL
6655: IFTRUE 6659
6657: GO 6771
6659: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
6660: LD_ADDR_VAR 0 2
6664: PUSH
6665: LD_INT 2
6667: PUSH
6668: LD_INT 4
6670: PUSH
6671: LD_INT 5
6673: PUSH
6674: LD_INT 7
6676: PUSH
6677: LD_INT 11
6679: PUSH
6680: LD_INT 12
6682: PUSH
6683: LD_INT 15
6685: PUSH
6686: LD_INT 16
6688: PUSH
6689: LD_INT 20
6691: PUSH
6692: LD_INT 21
6694: PUSH
6695: LD_INT 22
6697: PUSH
6698: LD_INT 23
6700: PUSH
6701: LD_INT 25
6703: PUSH
6704: LD_INT 26
6706: PUSH
6707: EMPTY
6708: LIST
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: PUSH
6723: LD_INT 101
6725: PUSH
6726: LD_INT 102
6728: PUSH
6729: LD_INT 103
6731: PUSH
6732: LD_INT 105
6734: PUSH
6735: LD_INT 106
6737: PUSH
6738: LD_INT 108
6740: PUSH
6741: LD_INT 112
6743: PUSH
6744: LD_INT 116
6746: PUSH
6747: LD_INT 117
6749: PUSH
6750: LD_INT 118
6752: PUSH
6753: EMPTY
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: LIST
6762: LIST
6763: LIST
6764: PUSH
6765: EMPTY
6766: LIST
6767: LIST
6768: ST_TO_ADDR
6769: GO 9172
6771: LD_INT 8
6773: DOUBLE
6774: EQUAL
6775: IFTRUE 6779
6777: GO 6919
6779: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
6780: LD_ADDR_VAR 0 2
6784: PUSH
6785: LD_INT 2
6787: PUSH
6788: LD_INT 4
6790: PUSH
6791: LD_INT 5
6793: PUSH
6794: LD_INT 6
6796: PUSH
6797: LD_INT 7
6799: PUSH
6800: LD_INT 8
6802: PUSH
6803: LD_INT 11
6805: PUSH
6806: LD_INT 12
6808: PUSH
6809: LD_INT 15
6811: PUSH
6812: LD_INT 16
6814: PUSH
6815: LD_INT 20
6817: PUSH
6818: LD_INT 21
6820: PUSH
6821: LD_INT 22
6823: PUSH
6824: LD_INT 23
6826: PUSH
6827: LD_INT 25
6829: PUSH
6830: LD_INT 26
6832: PUSH
6833: LD_INT 30
6835: PUSH
6836: LD_INT 31
6838: PUSH
6839: LD_INT 32
6841: PUSH
6842: LD_INT 36
6844: PUSH
6845: EMPTY
6846: LIST
6847: LIST
6848: LIST
6849: LIST
6850: LIST
6851: LIST
6852: LIST
6853: LIST
6854: LIST
6855: LIST
6856: LIST
6857: LIST
6858: LIST
6859: LIST
6860: LIST
6861: LIST
6862: LIST
6863: LIST
6864: LIST
6865: LIST
6866: PUSH
6867: LD_INT 101
6869: PUSH
6870: LD_INT 102
6872: PUSH
6873: LD_INT 103
6875: PUSH
6876: LD_INT 105
6878: PUSH
6879: LD_INT 106
6881: PUSH
6882: LD_INT 108
6884: PUSH
6885: LD_INT 109
6887: PUSH
6888: LD_INT 112
6890: PUSH
6891: LD_INT 116
6893: PUSH
6894: LD_INT 117
6896: PUSH
6897: LD_INT 118
6899: PUSH
6900: EMPTY
6901: LIST
6902: LIST
6903: LIST
6904: LIST
6905: LIST
6906: LIST
6907: LIST
6908: LIST
6909: LIST
6910: LIST
6911: LIST
6912: PUSH
6913: EMPTY
6914: LIST
6915: LIST
6916: ST_TO_ADDR
6917: GO 9172
6919: LD_INT 9
6921: DOUBLE
6922: EQUAL
6923: IFTRUE 6927
6925: GO 7075
6927: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
6928: LD_ADDR_VAR 0 2
6932: PUSH
6933: LD_INT 2
6935: PUSH
6936: LD_INT 4
6938: PUSH
6939: LD_INT 5
6941: PUSH
6942: LD_INT 6
6944: PUSH
6945: LD_INT 7
6947: PUSH
6948: LD_INT 8
6950: PUSH
6951: LD_INT 11
6953: PUSH
6954: LD_INT 12
6956: PUSH
6957: LD_INT 15
6959: PUSH
6960: LD_INT 16
6962: PUSH
6963: LD_INT 20
6965: PUSH
6966: LD_INT 21
6968: PUSH
6969: LD_INT 22
6971: PUSH
6972: LD_INT 23
6974: PUSH
6975: LD_INT 25
6977: PUSH
6978: LD_INT 26
6980: PUSH
6981: LD_INT 28
6983: PUSH
6984: LD_INT 30
6986: PUSH
6987: LD_INT 31
6989: PUSH
6990: LD_INT 32
6992: PUSH
6993: LD_INT 36
6995: PUSH
6996: EMPTY
6997: LIST
6998: LIST
6999: LIST
7000: LIST
7001: LIST
7002: LIST
7003: LIST
7004: LIST
7005: LIST
7006: LIST
7007: LIST
7008: LIST
7009: LIST
7010: LIST
7011: LIST
7012: LIST
7013: LIST
7014: LIST
7015: LIST
7016: LIST
7017: LIST
7018: PUSH
7019: LD_INT 101
7021: PUSH
7022: LD_INT 102
7024: PUSH
7025: LD_INT 103
7027: PUSH
7028: LD_INT 105
7030: PUSH
7031: LD_INT 106
7033: PUSH
7034: LD_INT 108
7036: PUSH
7037: LD_INT 109
7039: PUSH
7040: LD_INT 112
7042: PUSH
7043: LD_INT 114
7045: PUSH
7046: LD_INT 116
7048: PUSH
7049: LD_INT 117
7051: PUSH
7052: LD_INT 118
7054: PUSH
7055: EMPTY
7056: LIST
7057: LIST
7058: LIST
7059: LIST
7060: LIST
7061: LIST
7062: LIST
7063: LIST
7064: LIST
7065: LIST
7066: LIST
7067: LIST
7068: PUSH
7069: EMPTY
7070: LIST
7071: LIST
7072: ST_TO_ADDR
7073: GO 9172
7075: LD_INT 10
7077: DOUBLE
7078: EQUAL
7079: IFTRUE 7083
7081: GO 7279
7083: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
7084: LD_ADDR_VAR 0 2
7088: PUSH
7089: LD_INT 2
7091: PUSH
7092: LD_INT 4
7094: PUSH
7095: LD_INT 5
7097: PUSH
7098: LD_INT 6
7100: PUSH
7101: LD_INT 7
7103: PUSH
7104: LD_INT 8
7106: PUSH
7107: LD_INT 9
7109: PUSH
7110: LD_INT 10
7112: PUSH
7113: LD_INT 11
7115: PUSH
7116: LD_INT 12
7118: PUSH
7119: LD_INT 13
7121: PUSH
7122: LD_INT 14
7124: PUSH
7125: LD_INT 15
7127: PUSH
7128: LD_INT 16
7130: PUSH
7131: LD_INT 17
7133: PUSH
7134: LD_INT 18
7136: PUSH
7137: LD_INT 19
7139: PUSH
7140: LD_INT 20
7142: PUSH
7143: LD_INT 21
7145: PUSH
7146: LD_INT 22
7148: PUSH
7149: LD_INT 23
7151: PUSH
7152: LD_INT 24
7154: PUSH
7155: LD_INT 25
7157: PUSH
7158: LD_INT 26
7160: PUSH
7161: LD_INT 28
7163: PUSH
7164: LD_INT 30
7166: PUSH
7167: LD_INT 31
7169: PUSH
7170: LD_INT 32
7172: PUSH
7173: LD_INT 36
7175: PUSH
7176: EMPTY
7177: LIST
7178: LIST
7179: LIST
7180: LIST
7181: LIST
7182: LIST
7183: LIST
7184: LIST
7185: LIST
7186: LIST
7187: LIST
7188: LIST
7189: LIST
7190: LIST
7191: LIST
7192: LIST
7193: LIST
7194: LIST
7195: LIST
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: LIST
7203: LIST
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 101
7209: PUSH
7210: LD_INT 102
7212: PUSH
7213: LD_INT 103
7215: PUSH
7216: LD_INT 104
7218: PUSH
7219: LD_INT 105
7221: PUSH
7222: LD_INT 106
7224: PUSH
7225: LD_INT 107
7227: PUSH
7228: LD_INT 108
7230: PUSH
7231: LD_INT 109
7233: PUSH
7234: LD_INT 110
7236: PUSH
7237: LD_INT 111
7239: PUSH
7240: LD_INT 112
7242: PUSH
7243: LD_INT 114
7245: PUSH
7246: LD_INT 116
7248: PUSH
7249: LD_INT 117
7251: PUSH
7252: LD_INT 118
7254: PUSH
7255: EMPTY
7256: LIST
7257: LIST
7258: LIST
7259: LIST
7260: LIST
7261: LIST
7262: LIST
7263: LIST
7264: LIST
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: LIST
7270: LIST
7271: LIST
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: ST_TO_ADDR
7277: GO 9172
7279: LD_INT 11
7281: DOUBLE
7282: EQUAL
7283: IFTRUE 7287
7285: GO 7491
7287: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
7288: LD_ADDR_VAR 0 2
7292: PUSH
7293: LD_INT 2
7295: PUSH
7296: LD_INT 3
7298: PUSH
7299: LD_INT 4
7301: PUSH
7302: LD_INT 5
7304: PUSH
7305: LD_INT 6
7307: PUSH
7308: LD_INT 7
7310: PUSH
7311: LD_INT 8
7313: PUSH
7314: LD_INT 9
7316: PUSH
7317: LD_INT 10
7319: PUSH
7320: LD_INT 11
7322: PUSH
7323: LD_INT 12
7325: PUSH
7326: LD_INT 13
7328: PUSH
7329: LD_INT 14
7331: PUSH
7332: LD_INT 15
7334: PUSH
7335: LD_INT 16
7337: PUSH
7338: LD_INT 17
7340: PUSH
7341: LD_INT 18
7343: PUSH
7344: LD_INT 19
7346: PUSH
7347: LD_INT 20
7349: PUSH
7350: LD_INT 21
7352: PUSH
7353: LD_INT 22
7355: PUSH
7356: LD_INT 23
7358: PUSH
7359: LD_INT 24
7361: PUSH
7362: LD_INT 25
7364: PUSH
7365: LD_INT 26
7367: PUSH
7368: LD_INT 28
7370: PUSH
7371: LD_INT 30
7373: PUSH
7374: LD_INT 31
7376: PUSH
7377: LD_INT 32
7379: PUSH
7380: LD_INT 34
7382: PUSH
7383: LD_INT 36
7385: PUSH
7386: EMPTY
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: LIST
7396: LIST
7397: LIST
7398: LIST
7399: LIST
7400: LIST
7401: LIST
7402: LIST
7403: LIST
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: LIST
7411: LIST
7412: LIST
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: PUSH
7419: LD_INT 101
7421: PUSH
7422: LD_INT 102
7424: PUSH
7425: LD_INT 103
7427: PUSH
7428: LD_INT 104
7430: PUSH
7431: LD_INT 105
7433: PUSH
7434: LD_INT 106
7436: PUSH
7437: LD_INT 107
7439: PUSH
7440: LD_INT 108
7442: PUSH
7443: LD_INT 109
7445: PUSH
7446: LD_INT 110
7448: PUSH
7449: LD_INT 111
7451: PUSH
7452: LD_INT 112
7454: PUSH
7455: LD_INT 114
7457: PUSH
7458: LD_INT 116
7460: PUSH
7461: LD_INT 117
7463: PUSH
7464: LD_INT 118
7466: PUSH
7467: EMPTY
7468: LIST
7469: LIST
7470: LIST
7471: LIST
7472: LIST
7473: LIST
7474: LIST
7475: LIST
7476: LIST
7477: LIST
7478: LIST
7479: LIST
7480: LIST
7481: LIST
7482: LIST
7483: LIST
7484: PUSH
7485: EMPTY
7486: LIST
7487: LIST
7488: ST_TO_ADDR
7489: GO 9172
7491: LD_INT 12
7493: DOUBLE
7494: EQUAL
7495: IFTRUE 7499
7497: GO 7719
7499: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
7500: LD_ADDR_VAR 0 2
7504: PUSH
7505: LD_INT 1
7507: PUSH
7508: LD_INT 2
7510: PUSH
7511: LD_INT 3
7513: PUSH
7514: LD_INT 4
7516: PUSH
7517: LD_INT 5
7519: PUSH
7520: LD_INT 6
7522: PUSH
7523: LD_INT 7
7525: PUSH
7526: LD_INT 8
7528: PUSH
7529: LD_INT 9
7531: PUSH
7532: LD_INT 10
7534: PUSH
7535: LD_INT 11
7537: PUSH
7538: LD_INT 12
7540: PUSH
7541: LD_INT 13
7543: PUSH
7544: LD_INT 14
7546: PUSH
7547: LD_INT 15
7549: PUSH
7550: LD_INT 16
7552: PUSH
7553: LD_INT 17
7555: PUSH
7556: LD_INT 18
7558: PUSH
7559: LD_INT 19
7561: PUSH
7562: LD_INT 20
7564: PUSH
7565: LD_INT 21
7567: PUSH
7568: LD_INT 22
7570: PUSH
7571: LD_INT 23
7573: PUSH
7574: LD_INT 24
7576: PUSH
7577: LD_INT 25
7579: PUSH
7580: LD_INT 26
7582: PUSH
7583: LD_INT 27
7585: PUSH
7586: LD_INT 28
7588: PUSH
7589: LD_INT 30
7591: PUSH
7592: LD_INT 31
7594: PUSH
7595: LD_INT 32
7597: PUSH
7598: LD_INT 33
7600: PUSH
7601: LD_INT 34
7603: PUSH
7604: LD_INT 36
7606: PUSH
7607: EMPTY
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: LIST
7619: LIST
7620: LIST
7621: LIST
7622: LIST
7623: LIST
7624: LIST
7625: LIST
7626: LIST
7627: LIST
7628: LIST
7629: LIST
7630: LIST
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: LIST
7636: LIST
7637: LIST
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: PUSH
7643: LD_INT 101
7645: PUSH
7646: LD_INT 102
7648: PUSH
7649: LD_INT 103
7651: PUSH
7652: LD_INT 104
7654: PUSH
7655: LD_INT 105
7657: PUSH
7658: LD_INT 106
7660: PUSH
7661: LD_INT 107
7663: PUSH
7664: LD_INT 108
7666: PUSH
7667: LD_INT 109
7669: PUSH
7670: LD_INT 110
7672: PUSH
7673: LD_INT 111
7675: PUSH
7676: LD_INT 112
7678: PUSH
7679: LD_INT 113
7681: PUSH
7682: LD_INT 114
7684: PUSH
7685: LD_INT 116
7687: PUSH
7688: LD_INT 117
7690: PUSH
7691: LD_INT 118
7693: PUSH
7694: EMPTY
7695: LIST
7696: LIST
7697: LIST
7698: LIST
7699: LIST
7700: LIST
7701: LIST
7702: LIST
7703: LIST
7704: LIST
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: LIST
7712: PUSH
7713: EMPTY
7714: LIST
7715: LIST
7716: ST_TO_ADDR
7717: GO 9172
7719: LD_INT 13
7721: DOUBLE
7722: EQUAL
7723: IFTRUE 7727
7725: GO 7935
7727: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
7728: LD_ADDR_VAR 0 2
7732: PUSH
7733: LD_INT 1
7735: PUSH
7736: LD_INT 2
7738: PUSH
7739: LD_INT 3
7741: PUSH
7742: LD_INT 4
7744: PUSH
7745: LD_INT 5
7747: PUSH
7748: LD_INT 8
7750: PUSH
7751: LD_INT 9
7753: PUSH
7754: LD_INT 10
7756: PUSH
7757: LD_INT 11
7759: PUSH
7760: LD_INT 12
7762: PUSH
7763: LD_INT 14
7765: PUSH
7766: LD_INT 15
7768: PUSH
7769: LD_INT 16
7771: PUSH
7772: LD_INT 17
7774: PUSH
7775: LD_INT 18
7777: PUSH
7778: LD_INT 19
7780: PUSH
7781: LD_INT 20
7783: PUSH
7784: LD_INT 21
7786: PUSH
7787: LD_INT 22
7789: PUSH
7790: LD_INT 23
7792: PUSH
7793: LD_INT 24
7795: PUSH
7796: LD_INT 25
7798: PUSH
7799: LD_INT 26
7801: PUSH
7802: LD_INT 27
7804: PUSH
7805: LD_INT 28
7807: PUSH
7808: LD_INT 30
7810: PUSH
7811: LD_INT 31
7813: PUSH
7814: LD_INT 32
7816: PUSH
7817: LD_INT 33
7819: PUSH
7820: LD_INT 34
7822: PUSH
7823: LD_INT 36
7825: PUSH
7826: EMPTY
7827: LIST
7828: LIST
7829: LIST
7830: LIST
7831: LIST
7832: LIST
7833: LIST
7834: LIST
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: LIST
7842: LIST
7843: LIST
7844: LIST
7845: LIST
7846: LIST
7847: LIST
7848: LIST
7849: LIST
7850: LIST
7851: LIST
7852: LIST
7853: LIST
7854: LIST
7855: LIST
7856: LIST
7857: LIST
7858: PUSH
7859: LD_INT 101
7861: PUSH
7862: LD_INT 102
7864: PUSH
7865: LD_INT 103
7867: PUSH
7868: LD_INT 104
7870: PUSH
7871: LD_INT 105
7873: PUSH
7874: LD_INT 106
7876: PUSH
7877: LD_INT 107
7879: PUSH
7880: LD_INT 108
7882: PUSH
7883: LD_INT 109
7885: PUSH
7886: LD_INT 110
7888: PUSH
7889: LD_INT 111
7891: PUSH
7892: LD_INT 112
7894: PUSH
7895: LD_INT 113
7897: PUSH
7898: LD_INT 114
7900: PUSH
7901: LD_INT 116
7903: PUSH
7904: LD_INT 117
7906: PUSH
7907: LD_INT 118
7909: PUSH
7910: EMPTY
7911: LIST
7912: LIST
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: LIST
7920: LIST
7921: LIST
7922: LIST
7923: LIST
7924: LIST
7925: LIST
7926: LIST
7927: LIST
7928: PUSH
7929: EMPTY
7930: LIST
7931: LIST
7932: ST_TO_ADDR
7933: GO 9172
7935: LD_INT 14
7937: DOUBLE
7938: EQUAL
7939: IFTRUE 7943
7941: GO 8167
7943: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
7944: LD_ADDR_VAR 0 2
7948: PUSH
7949: LD_INT 1
7951: PUSH
7952: LD_INT 2
7954: PUSH
7955: LD_INT 3
7957: PUSH
7958: LD_INT 4
7960: PUSH
7961: LD_INT 5
7963: PUSH
7964: LD_INT 6
7966: PUSH
7967: LD_INT 7
7969: PUSH
7970: LD_INT 8
7972: PUSH
7973: LD_INT 9
7975: PUSH
7976: LD_INT 10
7978: PUSH
7979: LD_INT 11
7981: PUSH
7982: LD_INT 12
7984: PUSH
7985: LD_INT 13
7987: PUSH
7988: LD_INT 14
7990: PUSH
7991: LD_INT 15
7993: PUSH
7994: LD_INT 16
7996: PUSH
7997: LD_INT 17
7999: PUSH
8000: LD_INT 18
8002: PUSH
8003: LD_INT 19
8005: PUSH
8006: LD_INT 20
8008: PUSH
8009: LD_INT 21
8011: PUSH
8012: LD_INT 22
8014: PUSH
8015: LD_INT 23
8017: PUSH
8018: LD_INT 24
8020: PUSH
8021: LD_INT 25
8023: PUSH
8024: LD_INT 26
8026: PUSH
8027: LD_INT 27
8029: PUSH
8030: LD_INT 28
8032: PUSH
8033: LD_INT 29
8035: PUSH
8036: LD_INT 30
8038: PUSH
8039: LD_INT 31
8041: PUSH
8042: LD_INT 32
8044: PUSH
8045: LD_INT 33
8047: PUSH
8048: LD_INT 34
8050: PUSH
8051: LD_INT 36
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: LIST
8059: LIST
8060: LIST
8061: LIST
8062: LIST
8063: LIST
8064: LIST
8065: LIST
8066: LIST
8067: LIST
8068: LIST
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: LIST
8081: LIST
8082: LIST
8083: LIST
8084: LIST
8085: LIST
8086: LIST
8087: LIST
8088: LIST
8089: LIST
8090: PUSH
8091: LD_INT 101
8093: PUSH
8094: LD_INT 102
8096: PUSH
8097: LD_INT 103
8099: PUSH
8100: LD_INT 104
8102: PUSH
8103: LD_INT 105
8105: PUSH
8106: LD_INT 106
8108: PUSH
8109: LD_INT 107
8111: PUSH
8112: LD_INT 108
8114: PUSH
8115: LD_INT 109
8117: PUSH
8118: LD_INT 110
8120: PUSH
8121: LD_INT 111
8123: PUSH
8124: LD_INT 112
8126: PUSH
8127: LD_INT 113
8129: PUSH
8130: LD_INT 114
8132: PUSH
8133: LD_INT 116
8135: PUSH
8136: LD_INT 117
8138: PUSH
8139: LD_INT 118
8141: PUSH
8142: EMPTY
8143: LIST
8144: LIST
8145: LIST
8146: LIST
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: LIST
8154: LIST
8155: LIST
8156: LIST
8157: LIST
8158: LIST
8159: LIST
8160: PUSH
8161: EMPTY
8162: LIST
8163: LIST
8164: ST_TO_ADDR
8165: GO 9172
8167: LD_INT 15
8169: DOUBLE
8170: EQUAL
8171: IFTRUE 8175
8173: GO 8399
8175: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
8176: LD_ADDR_VAR 0 2
8180: PUSH
8181: LD_INT 1
8183: PUSH
8184: LD_INT 2
8186: PUSH
8187: LD_INT 3
8189: PUSH
8190: LD_INT 4
8192: PUSH
8193: LD_INT 5
8195: PUSH
8196: LD_INT 6
8198: PUSH
8199: LD_INT 7
8201: PUSH
8202: LD_INT 8
8204: PUSH
8205: LD_INT 9
8207: PUSH
8208: LD_INT 10
8210: PUSH
8211: LD_INT 11
8213: PUSH
8214: LD_INT 12
8216: PUSH
8217: LD_INT 13
8219: PUSH
8220: LD_INT 14
8222: PUSH
8223: LD_INT 15
8225: PUSH
8226: LD_INT 16
8228: PUSH
8229: LD_INT 17
8231: PUSH
8232: LD_INT 18
8234: PUSH
8235: LD_INT 19
8237: PUSH
8238: LD_INT 20
8240: PUSH
8241: LD_INT 21
8243: PUSH
8244: LD_INT 22
8246: PUSH
8247: LD_INT 23
8249: PUSH
8250: LD_INT 24
8252: PUSH
8253: LD_INT 25
8255: PUSH
8256: LD_INT 26
8258: PUSH
8259: LD_INT 27
8261: PUSH
8262: LD_INT 28
8264: PUSH
8265: LD_INT 29
8267: PUSH
8268: LD_INT 30
8270: PUSH
8271: LD_INT 31
8273: PUSH
8274: LD_INT 32
8276: PUSH
8277: LD_INT 33
8279: PUSH
8280: LD_INT 34
8282: PUSH
8283: LD_INT 36
8285: PUSH
8286: EMPTY
8287: LIST
8288: LIST
8289: LIST
8290: LIST
8291: LIST
8292: LIST
8293: LIST
8294: LIST
8295: LIST
8296: LIST
8297: LIST
8298: LIST
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: PUSH
8323: LD_INT 101
8325: PUSH
8326: LD_INT 102
8328: PUSH
8329: LD_INT 103
8331: PUSH
8332: LD_INT 104
8334: PUSH
8335: LD_INT 105
8337: PUSH
8338: LD_INT 106
8340: PUSH
8341: LD_INT 107
8343: PUSH
8344: LD_INT 108
8346: PUSH
8347: LD_INT 109
8349: PUSH
8350: LD_INT 110
8352: PUSH
8353: LD_INT 111
8355: PUSH
8356: LD_INT 112
8358: PUSH
8359: LD_INT 113
8361: PUSH
8362: LD_INT 114
8364: PUSH
8365: LD_INT 116
8367: PUSH
8368: LD_INT 117
8370: PUSH
8371: LD_INT 118
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: LIST
8378: LIST
8379: LIST
8380: LIST
8381: LIST
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: PUSH
8393: EMPTY
8394: LIST
8395: LIST
8396: ST_TO_ADDR
8397: GO 9172
8399: LD_INT 16
8401: DOUBLE
8402: EQUAL
8403: IFTRUE 8407
8405: GO 8543
8407: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
8408: LD_ADDR_VAR 0 2
8412: PUSH
8413: LD_INT 2
8415: PUSH
8416: LD_INT 4
8418: PUSH
8419: LD_INT 5
8421: PUSH
8422: LD_INT 7
8424: PUSH
8425: LD_INT 11
8427: PUSH
8428: LD_INT 12
8430: PUSH
8431: LD_INT 15
8433: PUSH
8434: LD_INT 16
8436: PUSH
8437: LD_INT 20
8439: PUSH
8440: LD_INT 21
8442: PUSH
8443: LD_INT 22
8445: PUSH
8446: LD_INT 23
8448: PUSH
8449: LD_INT 25
8451: PUSH
8452: LD_INT 26
8454: PUSH
8455: LD_INT 30
8457: PUSH
8458: LD_INT 31
8460: PUSH
8461: LD_INT 32
8463: PUSH
8464: LD_INT 33
8466: PUSH
8467: LD_INT 34
8469: PUSH
8470: EMPTY
8471: LIST
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: LIST
8477: LIST
8478: LIST
8479: LIST
8480: LIST
8481: LIST
8482: LIST
8483: LIST
8484: LIST
8485: LIST
8486: LIST
8487: LIST
8488: LIST
8489: LIST
8490: PUSH
8491: LD_INT 101
8493: PUSH
8494: LD_INT 102
8496: PUSH
8497: LD_INT 103
8499: PUSH
8500: LD_INT 106
8502: PUSH
8503: LD_INT 108
8505: PUSH
8506: LD_INT 112
8508: PUSH
8509: LD_INT 113
8511: PUSH
8512: LD_INT 114
8514: PUSH
8515: LD_INT 116
8517: PUSH
8518: LD_INT 117
8520: PUSH
8521: LD_INT 118
8523: PUSH
8524: EMPTY
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: PUSH
8537: EMPTY
8538: LIST
8539: LIST
8540: ST_TO_ADDR
8541: GO 9172
8543: LD_INT 17
8545: DOUBLE
8546: EQUAL
8547: IFTRUE 8551
8549: GO 8775
8551: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
8552: LD_ADDR_VAR 0 2
8556: PUSH
8557: LD_INT 1
8559: PUSH
8560: LD_INT 2
8562: PUSH
8563: LD_INT 3
8565: PUSH
8566: LD_INT 4
8568: PUSH
8569: LD_INT 5
8571: PUSH
8572: LD_INT 6
8574: PUSH
8575: LD_INT 7
8577: PUSH
8578: LD_INT 8
8580: PUSH
8581: LD_INT 9
8583: PUSH
8584: LD_INT 10
8586: PUSH
8587: LD_INT 11
8589: PUSH
8590: LD_INT 12
8592: PUSH
8593: LD_INT 13
8595: PUSH
8596: LD_INT 14
8598: PUSH
8599: LD_INT 15
8601: PUSH
8602: LD_INT 16
8604: PUSH
8605: LD_INT 17
8607: PUSH
8608: LD_INT 18
8610: PUSH
8611: LD_INT 19
8613: PUSH
8614: LD_INT 20
8616: PUSH
8617: LD_INT 21
8619: PUSH
8620: LD_INT 22
8622: PUSH
8623: LD_INT 23
8625: PUSH
8626: LD_INT 24
8628: PUSH
8629: LD_INT 25
8631: PUSH
8632: LD_INT 26
8634: PUSH
8635: LD_INT 27
8637: PUSH
8638: LD_INT 28
8640: PUSH
8641: LD_INT 29
8643: PUSH
8644: LD_INT 30
8646: PUSH
8647: LD_INT 31
8649: PUSH
8650: LD_INT 32
8652: PUSH
8653: LD_INT 33
8655: PUSH
8656: LD_INT 34
8658: PUSH
8659: LD_INT 36
8661: PUSH
8662: EMPTY
8663: LIST
8664: LIST
8665: LIST
8666: LIST
8667: LIST
8668: LIST
8669: LIST
8670: LIST
8671: LIST
8672: LIST
8673: LIST
8674: LIST
8675: LIST
8676: LIST
8677: LIST
8678: LIST
8679: LIST
8680: LIST
8681: LIST
8682: LIST
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: LIST
8695: LIST
8696: LIST
8697: LIST
8698: PUSH
8699: LD_INT 101
8701: PUSH
8702: LD_INT 102
8704: PUSH
8705: LD_INT 103
8707: PUSH
8708: LD_INT 104
8710: PUSH
8711: LD_INT 105
8713: PUSH
8714: LD_INT 106
8716: PUSH
8717: LD_INT 107
8719: PUSH
8720: LD_INT 108
8722: PUSH
8723: LD_INT 109
8725: PUSH
8726: LD_INT 110
8728: PUSH
8729: LD_INT 111
8731: PUSH
8732: LD_INT 112
8734: PUSH
8735: LD_INT 113
8737: PUSH
8738: LD_INT 114
8740: PUSH
8741: LD_INT 116
8743: PUSH
8744: LD_INT 117
8746: PUSH
8747: LD_INT 118
8749: PUSH
8750: EMPTY
8751: LIST
8752: LIST
8753: LIST
8754: LIST
8755: LIST
8756: LIST
8757: LIST
8758: LIST
8759: LIST
8760: LIST
8761: LIST
8762: LIST
8763: LIST
8764: LIST
8765: LIST
8766: LIST
8767: LIST
8768: PUSH
8769: EMPTY
8770: LIST
8771: LIST
8772: ST_TO_ADDR
8773: GO 9172
8775: LD_INT 18
8777: DOUBLE
8778: EQUAL
8779: IFTRUE 8783
8781: GO 8931
8783: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
8784: LD_ADDR_VAR 0 2
8788: PUSH
8789: LD_INT 2
8791: PUSH
8792: LD_INT 4
8794: PUSH
8795: LD_INT 5
8797: PUSH
8798: LD_INT 7
8800: PUSH
8801: LD_INT 11
8803: PUSH
8804: LD_INT 12
8806: PUSH
8807: LD_INT 15
8809: PUSH
8810: LD_INT 16
8812: PUSH
8813: LD_INT 20
8815: PUSH
8816: LD_INT 21
8818: PUSH
8819: LD_INT 22
8821: PUSH
8822: LD_INT 23
8824: PUSH
8825: LD_INT 25
8827: PUSH
8828: LD_INT 26
8830: PUSH
8831: LD_INT 30
8833: PUSH
8834: LD_INT 31
8836: PUSH
8837: LD_INT 32
8839: PUSH
8840: LD_INT 33
8842: PUSH
8843: LD_INT 34
8845: PUSH
8846: LD_INT 35
8848: PUSH
8849: LD_INT 36
8851: PUSH
8852: EMPTY
8853: LIST
8854: LIST
8855: LIST
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: LIST
8866: LIST
8867: LIST
8868: LIST
8869: LIST
8870: LIST
8871: LIST
8872: LIST
8873: LIST
8874: PUSH
8875: LD_INT 101
8877: PUSH
8878: LD_INT 102
8880: PUSH
8881: LD_INT 103
8883: PUSH
8884: LD_INT 106
8886: PUSH
8887: LD_INT 108
8889: PUSH
8890: LD_INT 112
8892: PUSH
8893: LD_INT 113
8895: PUSH
8896: LD_INT 114
8898: PUSH
8899: LD_INT 115
8901: PUSH
8902: LD_INT 116
8904: PUSH
8905: LD_INT 117
8907: PUSH
8908: LD_INT 118
8910: PUSH
8911: EMPTY
8912: LIST
8913: LIST
8914: LIST
8915: LIST
8916: LIST
8917: LIST
8918: LIST
8919: LIST
8920: LIST
8921: LIST
8922: LIST
8923: LIST
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: ST_TO_ADDR
8929: GO 9172
8931: LD_INT 19
8933: DOUBLE
8934: EQUAL
8935: IFTRUE 8939
8937: GO 9171
8939: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
8940: LD_ADDR_VAR 0 2
8944: PUSH
8945: LD_INT 1
8947: PUSH
8948: LD_INT 2
8950: PUSH
8951: LD_INT 3
8953: PUSH
8954: LD_INT 4
8956: PUSH
8957: LD_INT 5
8959: PUSH
8960: LD_INT 6
8962: PUSH
8963: LD_INT 7
8965: PUSH
8966: LD_INT 8
8968: PUSH
8969: LD_INT 9
8971: PUSH
8972: LD_INT 10
8974: PUSH
8975: LD_INT 11
8977: PUSH
8978: LD_INT 12
8980: PUSH
8981: LD_INT 13
8983: PUSH
8984: LD_INT 14
8986: PUSH
8987: LD_INT 15
8989: PUSH
8990: LD_INT 16
8992: PUSH
8993: LD_INT 17
8995: PUSH
8996: LD_INT 18
8998: PUSH
8999: LD_INT 19
9001: PUSH
9002: LD_INT 20
9004: PUSH
9005: LD_INT 21
9007: PUSH
9008: LD_INT 22
9010: PUSH
9011: LD_INT 23
9013: PUSH
9014: LD_INT 24
9016: PUSH
9017: LD_INT 25
9019: PUSH
9020: LD_INT 26
9022: PUSH
9023: LD_INT 27
9025: PUSH
9026: LD_INT 28
9028: PUSH
9029: LD_INT 29
9031: PUSH
9032: LD_INT 30
9034: PUSH
9035: LD_INT 31
9037: PUSH
9038: LD_INT 32
9040: PUSH
9041: LD_INT 33
9043: PUSH
9044: LD_INT 34
9046: PUSH
9047: LD_INT 35
9049: PUSH
9050: LD_INT 36
9052: PUSH
9053: EMPTY
9054: LIST
9055: LIST
9056: LIST
9057: LIST
9058: LIST
9059: LIST
9060: LIST
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: LIST
9070: LIST
9071: LIST
9072: LIST
9073: LIST
9074: LIST
9075: LIST
9076: LIST
9077: LIST
9078: LIST
9079: LIST
9080: LIST
9081: LIST
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: PUSH
9091: LD_INT 101
9093: PUSH
9094: LD_INT 102
9096: PUSH
9097: LD_INT 103
9099: PUSH
9100: LD_INT 104
9102: PUSH
9103: LD_INT 105
9105: PUSH
9106: LD_INT 106
9108: PUSH
9109: LD_INT 107
9111: PUSH
9112: LD_INT 108
9114: PUSH
9115: LD_INT 109
9117: PUSH
9118: LD_INT 110
9120: PUSH
9121: LD_INT 111
9123: PUSH
9124: LD_INT 112
9126: PUSH
9127: LD_INT 113
9129: PUSH
9130: LD_INT 114
9132: PUSH
9133: LD_INT 115
9135: PUSH
9136: LD_INT 116
9138: PUSH
9139: LD_INT 117
9141: PUSH
9142: LD_INT 118
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: LIST
9152: LIST
9153: LIST
9154: LIST
9155: LIST
9156: LIST
9157: LIST
9158: LIST
9159: LIST
9160: LIST
9161: LIST
9162: LIST
9163: LIST
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: ST_TO_ADDR
9169: GO 9172
9171: POP
// end else
9172: GO 9403
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
9174: LD_ADDR_VAR 0 2
9178: PUSH
9179: LD_INT 1
9181: PUSH
9182: LD_INT 2
9184: PUSH
9185: LD_INT 3
9187: PUSH
9188: LD_INT 4
9190: PUSH
9191: LD_INT 5
9193: PUSH
9194: LD_INT 6
9196: PUSH
9197: LD_INT 7
9199: PUSH
9200: LD_INT 8
9202: PUSH
9203: LD_INT 9
9205: PUSH
9206: LD_INT 10
9208: PUSH
9209: LD_INT 11
9211: PUSH
9212: LD_INT 12
9214: PUSH
9215: LD_INT 13
9217: PUSH
9218: LD_INT 14
9220: PUSH
9221: LD_INT 15
9223: PUSH
9224: LD_INT 16
9226: PUSH
9227: LD_INT 17
9229: PUSH
9230: LD_INT 18
9232: PUSH
9233: LD_INT 19
9235: PUSH
9236: LD_INT 20
9238: PUSH
9239: LD_INT 21
9241: PUSH
9242: LD_INT 22
9244: PUSH
9245: LD_INT 23
9247: PUSH
9248: LD_INT 24
9250: PUSH
9251: LD_INT 25
9253: PUSH
9254: LD_INT 26
9256: PUSH
9257: LD_INT 27
9259: PUSH
9260: LD_INT 28
9262: PUSH
9263: LD_INT 29
9265: PUSH
9266: LD_INT 30
9268: PUSH
9269: LD_INT 31
9271: PUSH
9272: LD_INT 32
9274: PUSH
9275: LD_INT 33
9277: PUSH
9278: LD_INT 34
9280: PUSH
9281: LD_INT 35
9283: PUSH
9284: LD_INT 36
9286: PUSH
9287: EMPTY
9288: LIST
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: LIST
9313: LIST
9314: LIST
9315: LIST
9316: LIST
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: LIST
9322: LIST
9323: LIST
9324: PUSH
9325: LD_INT 101
9327: PUSH
9328: LD_INT 102
9330: PUSH
9331: LD_INT 103
9333: PUSH
9334: LD_INT 104
9336: PUSH
9337: LD_INT 105
9339: PUSH
9340: LD_INT 106
9342: PUSH
9343: LD_INT 107
9345: PUSH
9346: LD_INT 108
9348: PUSH
9349: LD_INT 109
9351: PUSH
9352: LD_INT 110
9354: PUSH
9355: LD_INT 111
9357: PUSH
9358: LD_INT 112
9360: PUSH
9361: LD_INT 113
9363: PUSH
9364: LD_INT 114
9366: PUSH
9367: LD_INT 115
9369: PUSH
9370: LD_INT 116
9372: PUSH
9373: LD_INT 117
9375: PUSH
9376: LD_INT 118
9378: PUSH
9379: EMPTY
9380: LIST
9381: LIST
9382: LIST
9383: LIST
9384: LIST
9385: LIST
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: ST_TO_ADDR
// if result then
9403: LD_VAR 0 2
9407: IFFALSE 10193
// begin normal :=  ;
9409: LD_ADDR_VAR 0 5
9413: PUSH
9414: LD_STRING 
9416: ST_TO_ADDR
// hardcore :=  ;
9417: LD_ADDR_VAR 0 6
9421: PUSH
9422: LD_STRING 
9424: ST_TO_ADDR
// active :=  ;
9425: LD_ADDR_VAR 0 7
9429: PUSH
9430: LD_STRING 
9432: ST_TO_ADDR
// for i = 1 to normalCounter do
9433: LD_ADDR_VAR 0 8
9437: PUSH
9438: DOUBLE
9439: LD_INT 1
9441: DEC
9442: ST_TO_ADDR
9443: LD_EXP 41
9447: PUSH
9448: FOR_TO
9449: IFFALSE 9550
// begin tmp := 0 ;
9451: LD_ADDR_VAR 0 3
9455: PUSH
9456: LD_STRING 0
9458: ST_TO_ADDR
// if result [ 1 ] then
9459: LD_VAR 0 2
9463: PUSH
9464: LD_INT 1
9466: ARRAY
9467: IFFALSE 9532
// if result [ 1 ] [ 1 ] = i then
9469: LD_VAR 0 2
9473: PUSH
9474: LD_INT 1
9476: ARRAY
9477: PUSH
9478: LD_INT 1
9480: ARRAY
9481: PUSH
9482: LD_VAR 0 8
9486: EQUAL
9487: IFFALSE 9532
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
9489: LD_ADDR_VAR 0 2
9493: PUSH
9494: LD_VAR 0 2
9498: PPUSH
9499: LD_INT 1
9501: PPUSH
9502: LD_VAR 0 2
9506: PUSH
9507: LD_INT 1
9509: ARRAY
9510: PPUSH
9511: LD_INT 1
9513: PPUSH
9514: CALL_OW 3
9518: PPUSH
9519: CALL_OW 1
9523: ST_TO_ADDR
// tmp := 1 ;
9524: LD_ADDR_VAR 0 3
9528: PUSH
9529: LD_STRING 1
9531: ST_TO_ADDR
// end ; normal := normal & tmp ;
9532: LD_ADDR_VAR 0 5
9536: PUSH
9537: LD_VAR 0 5
9541: PUSH
9542: LD_VAR 0 3
9546: STR
9547: ST_TO_ADDR
// end ;
9548: GO 9448
9550: POP
9551: POP
// for i = 1 to hardcoreCounter do
9552: LD_ADDR_VAR 0 8
9556: PUSH
9557: DOUBLE
9558: LD_INT 1
9560: DEC
9561: ST_TO_ADDR
9562: LD_EXP 42
9566: PUSH
9567: FOR_TO
9568: IFFALSE 9673
// begin tmp := 0 ;
9570: LD_ADDR_VAR 0 3
9574: PUSH
9575: LD_STRING 0
9577: ST_TO_ADDR
// if result [ 2 ] then
9578: LD_VAR 0 2
9582: PUSH
9583: LD_INT 2
9585: ARRAY
9586: IFFALSE 9655
// if result [ 2 ] [ 1 ] = 100 + i then
9588: LD_VAR 0 2
9592: PUSH
9593: LD_INT 2
9595: ARRAY
9596: PUSH
9597: LD_INT 1
9599: ARRAY
9600: PUSH
9601: LD_INT 100
9603: PUSH
9604: LD_VAR 0 8
9608: PLUS
9609: EQUAL
9610: IFFALSE 9655
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
9612: LD_ADDR_VAR 0 2
9616: PUSH
9617: LD_VAR 0 2
9621: PPUSH
9622: LD_INT 2
9624: PPUSH
9625: LD_VAR 0 2
9629: PUSH
9630: LD_INT 2
9632: ARRAY
9633: PPUSH
9634: LD_INT 1
9636: PPUSH
9637: CALL_OW 3
9641: PPUSH
9642: CALL_OW 1
9646: ST_TO_ADDR
// tmp := 1 ;
9647: LD_ADDR_VAR 0 3
9651: PUSH
9652: LD_STRING 1
9654: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
9655: LD_ADDR_VAR 0 6
9659: PUSH
9660: LD_VAR 0 6
9664: PUSH
9665: LD_VAR 0 3
9669: STR
9670: ST_TO_ADDR
// end ;
9671: GO 9567
9673: POP
9674: POP
// if isGameLoad then
9675: LD_VAR 0 1
9679: IFFALSE 10154
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
9681: LD_ADDR_VAR 0 4
9685: PUSH
9686: LD_EXP 45
9690: PUSH
9691: LD_EXP 44
9695: PUSH
9696: LD_EXP 46
9700: PUSH
9701: LD_EXP 43
9705: PUSH
9706: LD_EXP 47
9710: PUSH
9711: LD_EXP 48
9715: PUSH
9716: LD_EXP 49
9720: PUSH
9721: LD_EXP 50
9725: PUSH
9726: LD_EXP 51
9730: PUSH
9731: LD_EXP 52
9735: PUSH
9736: LD_EXP 53
9740: PUSH
9741: LD_EXP 54
9745: PUSH
9746: LD_EXP 55
9750: PUSH
9751: LD_EXP 56
9755: PUSH
9756: LD_EXP 64
9760: PUSH
9761: LD_EXP 65
9765: PUSH
9766: LD_EXP 66
9770: PUSH
9771: LD_EXP 67
9775: PUSH
9776: LD_EXP 69
9780: PUSH
9781: LD_EXP 70
9785: PUSH
9786: LD_EXP 71
9790: PUSH
9791: LD_EXP 74
9795: PUSH
9796: LD_EXP 76
9800: PUSH
9801: LD_EXP 77
9805: PUSH
9806: LD_EXP 78
9810: PUSH
9811: LD_EXP 80
9815: PUSH
9816: LD_EXP 81
9820: PUSH
9821: LD_EXP 84
9825: PUSH
9826: LD_EXP 85
9830: PUSH
9831: LD_EXP 86
9835: PUSH
9836: LD_EXP 87
9840: PUSH
9841: LD_EXP 88
9845: PUSH
9846: LD_EXP 89
9850: PUSH
9851: LD_EXP 90
9855: PUSH
9856: LD_EXP 91
9860: PUSH
9861: LD_EXP 92
9865: PUSH
9866: LD_EXP 57
9870: PUSH
9871: LD_EXP 58
9875: PUSH
9876: LD_EXP 61
9880: PUSH
9881: LD_EXP 62
9885: PUSH
9886: LD_EXP 63
9890: PUSH
9891: LD_EXP 59
9895: PUSH
9896: LD_EXP 60
9900: PUSH
9901: LD_EXP 68
9905: PUSH
9906: LD_EXP 72
9910: PUSH
9911: LD_EXP 73
9915: PUSH
9916: LD_EXP 75
9920: PUSH
9921: LD_EXP 79
9925: PUSH
9926: LD_EXP 82
9930: PUSH
9931: LD_EXP 83
9935: PUSH
9936: LD_EXP 93
9940: PUSH
9941: LD_EXP 94
9945: PUSH
9946: LD_EXP 95
9950: PUSH
9951: LD_EXP 96
9955: PUSH
9956: EMPTY
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: LIST
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: LIST
9994: LIST
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: LIST
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: ST_TO_ADDR
// tmp :=  ;
10012: LD_ADDR_VAR 0 3
10016: PUSH
10017: LD_STRING 
10019: ST_TO_ADDR
// for i = 1 to normalCounter do
10020: LD_ADDR_VAR 0 8
10024: PUSH
10025: DOUBLE
10026: LD_INT 1
10028: DEC
10029: ST_TO_ADDR
10030: LD_EXP 41
10034: PUSH
10035: FOR_TO
10036: IFFALSE 10072
// begin if flags [ i ] then
10038: LD_VAR 0 4
10042: PUSH
10043: LD_VAR 0 8
10047: ARRAY
10048: IFFALSE 10070
// tmp := tmp & i & ; ;
10050: LD_ADDR_VAR 0 3
10054: PUSH
10055: LD_VAR 0 3
10059: PUSH
10060: LD_VAR 0 8
10064: STR
10065: PUSH
10066: LD_STRING ;
10068: STR
10069: ST_TO_ADDR
// end ;
10070: GO 10035
10072: POP
10073: POP
// for i = 1 to hardcoreCounter do
10074: LD_ADDR_VAR 0 8
10078: PUSH
10079: DOUBLE
10080: LD_INT 1
10082: DEC
10083: ST_TO_ADDR
10084: LD_EXP 42
10088: PUSH
10089: FOR_TO
10090: IFFALSE 10136
// begin if flags [ normalCounter + i ] then
10092: LD_VAR 0 4
10096: PUSH
10097: LD_EXP 41
10101: PUSH
10102: LD_VAR 0 8
10106: PLUS
10107: ARRAY
10108: IFFALSE 10134
// tmp := tmp & ( 100 + i ) & ; ;
10110: LD_ADDR_VAR 0 3
10114: PUSH
10115: LD_VAR 0 3
10119: PUSH
10120: LD_INT 100
10122: PUSH
10123: LD_VAR 0 8
10127: PLUS
10128: STR
10129: PUSH
10130: LD_STRING ;
10132: STR
10133: ST_TO_ADDR
// end ;
10134: GO 10089
10136: POP
10137: POP
// if tmp then
10138: LD_VAR 0 3
10142: IFFALSE 10154
// active := tmp ;
10144: LD_ADDR_VAR 0 7
10148: PUSH
10149: LD_VAR 0 3
10153: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
10154: LD_STRING getStreamItemsFromMission("
10156: PUSH
10157: LD_VAR 0 5
10161: STR
10162: PUSH
10163: LD_STRING ","
10165: STR
10166: PUSH
10167: LD_VAR 0 6
10171: STR
10172: PUSH
10173: LD_STRING ","
10175: STR
10176: PUSH
10177: LD_VAR 0 7
10181: STR
10182: PUSH
10183: LD_STRING ")
10185: STR
10186: PPUSH
10187: CALL_OW 559
// end else
10191: GO 10200
// ToLua ( getStreamItemsFromMission("","","") ) ;
10193: LD_STRING getStreamItemsFromMission("","","")
10195: PPUSH
10196: CALL_OW 559
// end ;
10200: LD_VAR 0 2
10204: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
10205: LD_EXP 40
10209: IFFALSE 10217
10211: PUSH
10212: LD_EXP 45
10216: AND
10217: IFFALSE 10341
10219: GO 10221
10221: DISABLE
10222: LD_INT 0
10224: PPUSH
10225: PPUSH
// begin enable ;
10226: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
10227: LD_ADDR_VAR 0 2
10231: PUSH
10232: LD_INT 22
10234: PUSH
10235: LD_OWVAR 2
10239: PUSH
10240: EMPTY
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 2
10246: PUSH
10247: LD_INT 34
10249: PUSH
10250: LD_INT 7
10252: PUSH
10253: EMPTY
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 34
10259: PUSH
10260: LD_INT 45
10262: PUSH
10263: EMPTY
10264: LIST
10265: LIST
10266: PUSH
10267: LD_INT 34
10269: PUSH
10270: LD_INT 28
10272: PUSH
10273: EMPTY
10274: LIST
10275: LIST
10276: PUSH
10277: LD_INT 34
10279: PUSH
10280: LD_INT 47
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: PUSH
10287: EMPTY
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 69
10302: ST_TO_ADDR
// if not tmp then
10303: LD_VAR 0 2
10307: NOT
10308: IFFALSE 10312
// exit ;
10310: GO 10341
// for i in tmp do
10312: LD_ADDR_VAR 0 1
10316: PUSH
10317: LD_VAR 0 2
10321: PUSH
10322: FOR_IN
10323: IFFALSE 10339
// begin SetLives ( i , 0 ) ;
10325: LD_VAR 0 1
10329: PPUSH
10330: LD_INT 0
10332: PPUSH
10333: CALL_OW 234
// end ;
10337: GO 10322
10339: POP
10340: POP
// end ;
10341: PPOPN 2
10343: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10344: LD_EXP 40
10348: IFFALSE 10356
10350: PUSH
10351: LD_EXP 46
10355: AND
10356: IFFALSE 10440
10358: GO 10360
10360: DISABLE
10361: LD_INT 0
10363: PPUSH
10364: PPUSH
// begin enable ;
10365: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10366: LD_ADDR_VAR 0 2
10370: PUSH
10371: LD_INT 22
10373: PUSH
10374: LD_OWVAR 2
10378: PUSH
10379: EMPTY
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 32
10385: PUSH
10386: LD_INT 3
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PPUSH
10397: CALL_OW 69
10401: ST_TO_ADDR
// if not tmp then
10402: LD_VAR 0 2
10406: NOT
10407: IFFALSE 10411
// exit ;
10409: GO 10440
// for i in tmp do
10411: LD_ADDR_VAR 0 1
10415: PUSH
10416: LD_VAR 0 2
10420: PUSH
10421: FOR_IN
10422: IFFALSE 10438
// begin SetLives ( i , 0 ) ;
10424: LD_VAR 0 1
10428: PPUSH
10429: LD_INT 0
10431: PPUSH
10432: CALL_OW 234
// end ;
10436: GO 10421
10438: POP
10439: POP
// end ;
10440: PPOPN 2
10442: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10443: LD_EXP 40
10447: IFFALSE 10455
10449: PUSH
10450: LD_EXP 43
10454: AND
10455: IFFALSE 10548
10457: GO 10459
10459: DISABLE
10460: LD_INT 0
10462: PPUSH
// begin enable ;
10463: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10464: LD_ADDR_VAR 0 1
10468: PUSH
10469: LD_INT 22
10471: PUSH
10472: LD_OWVAR 2
10476: PUSH
10477: EMPTY
10478: LIST
10479: LIST
10480: PUSH
10481: LD_INT 2
10483: PUSH
10484: LD_INT 25
10486: PUSH
10487: LD_INT 5
10489: PUSH
10490: EMPTY
10491: LIST
10492: LIST
10493: PUSH
10494: LD_INT 25
10496: PUSH
10497: LD_INT 9
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PUSH
10504: LD_INT 25
10506: PUSH
10507: LD_INT 8
10509: PUSH
10510: EMPTY
10511: LIST
10512: LIST
10513: PUSH
10514: EMPTY
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: PPUSH
10524: CALL_OW 69
10528: PUSH
10529: FOR_IN
10530: IFFALSE 10546
// begin SetClass ( i , 1 ) ;
10532: LD_VAR 0 1
10536: PPUSH
10537: LD_INT 1
10539: PPUSH
10540: CALL_OW 336
// end ;
10544: GO 10529
10546: POP
10547: POP
// end ;
10548: PPOPN 1
10550: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10551: LD_EXP 40
10555: IFFALSE 10563
10557: PUSH
10558: LD_EXP 44
10562: AND
10563: IFFALSE 10575
10565: PUSH
10566: LD_OWVAR 65
10570: PUSH
10571: LD_INT 7
10573: LESS
10574: AND
10575: IFFALSE 10589
10577: GO 10579
10579: DISABLE
// begin enable ;
10580: ENABLE
// game_speed := 7 ;
10581: LD_ADDR_OWVAR 65
10585: PUSH
10586: LD_INT 7
10588: ST_TO_ADDR
// end ;
10589: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10590: LD_EXP 40
10594: IFFALSE 10602
10596: PUSH
10597: LD_EXP 47
10601: AND
10602: IFFALSE 10804
10604: GO 10606
10606: DISABLE
10607: LD_INT 0
10609: PPUSH
10610: PPUSH
10611: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10612: LD_ADDR_VAR 0 3
10616: PUSH
10617: LD_INT 81
10619: PUSH
10620: LD_OWVAR 2
10624: PUSH
10625: EMPTY
10626: LIST
10627: LIST
10628: PUSH
10629: LD_INT 21
10631: PUSH
10632: LD_INT 1
10634: PUSH
10635: EMPTY
10636: LIST
10637: LIST
10638: PUSH
10639: EMPTY
10640: LIST
10641: LIST
10642: PPUSH
10643: CALL_OW 69
10647: ST_TO_ADDR
// if not tmp then
10648: LD_VAR 0 3
10652: NOT
10653: IFFALSE 10657
// exit ;
10655: GO 10804
// if tmp > 5 then
10657: LD_VAR 0 3
10661: PUSH
10662: LD_INT 5
10664: GREATER
10665: IFFALSE 10677
// k := 5 else
10667: LD_ADDR_VAR 0 2
10671: PUSH
10672: LD_INT 5
10674: ST_TO_ADDR
10675: GO 10687
// k := tmp ;
10677: LD_ADDR_VAR 0 2
10681: PUSH
10682: LD_VAR 0 3
10686: ST_TO_ADDR
// for i := 1 to k do
10687: LD_ADDR_VAR 0 1
10691: PUSH
10692: DOUBLE
10693: LD_INT 1
10695: DEC
10696: ST_TO_ADDR
10697: LD_VAR 0 2
10701: PUSH
10702: FOR_TO
10703: IFFALSE 10802
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10705: LD_VAR 0 3
10709: PUSH
10710: LD_VAR 0 1
10714: ARRAY
10715: PPUSH
10716: LD_VAR 0 1
10720: PUSH
10721: LD_INT 4
10723: MOD
10724: PUSH
10725: LD_INT 1
10727: PLUS
10728: PPUSH
10729: CALL_OW 259
10733: PUSH
10734: LD_INT 10
10736: LESS
10737: IFFALSE 10800
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10739: LD_VAR 0 3
10743: PUSH
10744: LD_VAR 0 1
10748: ARRAY
10749: PPUSH
10750: LD_VAR 0 1
10754: PUSH
10755: LD_INT 4
10757: MOD
10758: PUSH
10759: LD_INT 1
10761: PLUS
10762: PPUSH
10763: LD_VAR 0 3
10767: PUSH
10768: LD_VAR 0 1
10772: ARRAY
10773: PPUSH
10774: LD_VAR 0 1
10778: PUSH
10779: LD_INT 4
10781: MOD
10782: PUSH
10783: LD_INT 1
10785: PLUS
10786: PPUSH
10787: CALL_OW 259
10791: PUSH
10792: LD_INT 1
10794: PLUS
10795: PPUSH
10796: CALL_OW 237
10800: GO 10702
10802: POP
10803: POP
// end ;
10804: PPOPN 3
10806: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10807: LD_EXP 40
10811: IFFALSE 10819
10813: PUSH
10814: LD_EXP 48
10818: AND
10819: IFFALSE 10839
10821: GO 10823
10823: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10824: LD_INT 4
10826: PPUSH
10827: LD_OWVAR 2
10831: PPUSH
10832: LD_INT 0
10834: PPUSH
10835: CALL_OW 324
10839: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10840: LD_EXP 40
10844: IFFALSE 10852
10846: PUSH
10847: LD_EXP 77
10851: AND
10852: IFFALSE 10872
10854: GO 10856
10856: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10857: LD_INT 19
10859: PPUSH
10860: LD_OWVAR 2
10864: PPUSH
10865: LD_INT 0
10867: PPUSH
10868: CALL_OW 324
10872: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10873: LD_EXP 40
10877: IFFALSE 10885
10879: PUSH
10880: LD_EXP 49
10884: AND
10885: IFFALSE 10987
10887: GO 10889
10889: DISABLE
10890: LD_INT 0
10892: PPUSH
10893: PPUSH
// begin enable ;
10894: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10895: LD_ADDR_VAR 0 2
10899: PUSH
10900: LD_INT 22
10902: PUSH
10903: LD_OWVAR 2
10907: PUSH
10908: EMPTY
10909: LIST
10910: LIST
10911: PUSH
10912: LD_INT 2
10914: PUSH
10915: LD_INT 34
10917: PUSH
10918: LD_INT 11
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PUSH
10925: LD_INT 34
10927: PUSH
10928: LD_INT 30
10930: PUSH
10931: EMPTY
10932: LIST
10933: LIST
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: LIST
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: PPUSH
10944: CALL_OW 69
10948: ST_TO_ADDR
// if not tmp then
10949: LD_VAR 0 2
10953: NOT
10954: IFFALSE 10958
// exit ;
10956: GO 10987
// for i in tmp do
10958: LD_ADDR_VAR 0 1
10962: PUSH
10963: LD_VAR 0 2
10967: PUSH
10968: FOR_IN
10969: IFFALSE 10985
// begin SetLives ( i , 0 ) ;
10971: LD_VAR 0 1
10975: PPUSH
10976: LD_INT 0
10978: PPUSH
10979: CALL_OW 234
// end ;
10983: GO 10968
10985: POP
10986: POP
// end ;
10987: PPOPN 2
10989: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10990: LD_EXP 40
10994: IFFALSE 11002
10996: PUSH
10997: LD_EXP 50
11001: AND
11002: IFFALSE 11022
11004: GO 11006
11006: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
11007: LD_INT 32
11009: PPUSH
11010: LD_OWVAR 2
11014: PPUSH
11015: LD_INT 0
11017: PPUSH
11018: CALL_OW 324
11022: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
11023: LD_EXP 40
11027: IFFALSE 11035
11029: PUSH
11030: LD_EXP 51
11034: AND
11035: IFFALSE 11218
11037: GO 11039
11039: DISABLE
11040: LD_INT 0
11042: PPUSH
11043: PPUSH
11044: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
11045: LD_ADDR_VAR 0 2
11049: PUSH
11050: LD_INT 22
11052: PUSH
11053: LD_OWVAR 2
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PUSH
11062: LD_INT 33
11064: PUSH
11065: LD_INT 3
11067: PUSH
11068: EMPTY
11069: LIST
11070: LIST
11071: PUSH
11072: EMPTY
11073: LIST
11074: LIST
11075: PPUSH
11076: CALL_OW 69
11080: ST_TO_ADDR
// if not tmp then
11081: LD_VAR 0 2
11085: NOT
11086: IFFALSE 11090
// exit ;
11088: GO 11218
// side := 0 ;
11090: LD_ADDR_VAR 0 3
11094: PUSH
11095: LD_INT 0
11097: ST_TO_ADDR
// for i := 1 to 8 do
11098: LD_ADDR_VAR 0 1
11102: PUSH
11103: DOUBLE
11104: LD_INT 1
11106: DEC
11107: ST_TO_ADDR
11108: LD_INT 8
11110: PUSH
11111: FOR_TO
11112: IFFALSE 11162
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
11114: LD_OWVAR 2
11118: PUSH
11119: LD_VAR 0 1
11123: NONEQUAL
11124: IFFALSE 11146
11126: PUSH
11127: LD_OWVAR 2
11131: PPUSH
11132: LD_VAR 0 1
11136: PPUSH
11137: CALL_OW 81
11141: PUSH
11142: LD_INT 2
11144: EQUAL
11145: AND
11146: IFFALSE 11160
// begin side := i ;
11148: LD_ADDR_VAR 0 3
11152: PUSH
11153: LD_VAR 0 1
11157: ST_TO_ADDR
// break ;
11158: GO 11162
// end ;
11160: GO 11111
11162: POP
11163: POP
// if not side then
11164: LD_VAR 0 3
11168: NOT
11169: IFFALSE 11173
// exit ;
11171: GO 11218
// for i := 1 to tmp do
11173: LD_ADDR_VAR 0 1
11177: PUSH
11178: DOUBLE
11179: LD_INT 1
11181: DEC
11182: ST_TO_ADDR
11183: LD_VAR 0 2
11187: PUSH
11188: FOR_TO
11189: IFFALSE 11216
// if Prob ( 60 ) then
11191: LD_INT 60
11193: PPUSH
11194: CALL_OW 13
11198: IFFALSE 11214
// SetSide ( i , side ) ;
11200: LD_VAR 0 1
11204: PPUSH
11205: LD_VAR 0 3
11209: PPUSH
11210: CALL_OW 235
11214: GO 11188
11216: POP
11217: POP
// end ;
11218: PPOPN 3
11220: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
11221: LD_EXP 40
11225: IFFALSE 11233
11227: PUSH
11228: LD_EXP 53
11232: AND
11233: IFFALSE 11352
11235: GO 11237
11237: DISABLE
11238: LD_INT 0
11240: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
11241: LD_ADDR_VAR 0 1
11245: PUSH
11246: LD_INT 22
11248: PUSH
11249: LD_OWVAR 2
11253: PUSH
11254: EMPTY
11255: LIST
11256: LIST
11257: PUSH
11258: LD_INT 21
11260: PUSH
11261: LD_INT 1
11263: PUSH
11264: EMPTY
11265: LIST
11266: LIST
11267: PUSH
11268: LD_INT 3
11270: PUSH
11271: LD_INT 23
11273: PUSH
11274: LD_INT 0
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: PUSH
11285: EMPTY
11286: LIST
11287: LIST
11288: LIST
11289: PPUSH
11290: CALL_OW 69
11294: PUSH
11295: FOR_IN
11296: IFFALSE 11350
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
11298: LD_VAR 0 1
11302: PPUSH
11303: CALL_OW 257
11307: PUSH
11308: LD_INT 1
11310: PUSH
11311: LD_INT 2
11313: PUSH
11314: LD_INT 3
11316: PUSH
11317: LD_INT 4
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: IN
11326: IFFALSE 11348
// SetClass ( un , rand ( 1 , 4 ) ) ;
11328: LD_VAR 0 1
11332: PPUSH
11333: LD_INT 1
11335: PPUSH
11336: LD_INT 4
11338: PPUSH
11339: CALL_OW 12
11343: PPUSH
11344: CALL_OW 336
11348: GO 11295
11350: POP
11351: POP
// end ;
11352: PPOPN 1
11354: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11355: LD_EXP 40
11359: IFFALSE 11367
11361: PUSH
11362: LD_EXP 52
11366: AND
11367: IFFALSE 11446
11369: GO 11371
11371: DISABLE
11372: LD_INT 0
11374: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11375: LD_ADDR_VAR 0 1
11379: PUSH
11380: LD_INT 22
11382: PUSH
11383: LD_OWVAR 2
11387: PUSH
11388: EMPTY
11389: LIST
11390: LIST
11391: PUSH
11392: LD_INT 21
11394: PUSH
11395: LD_INT 3
11397: PUSH
11398: EMPTY
11399: LIST
11400: LIST
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: PPUSH
11406: CALL_OW 69
11410: ST_TO_ADDR
// if not tmp then
11411: LD_VAR 0 1
11415: NOT
11416: IFFALSE 11420
// exit ;
11418: GO 11446
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11420: LD_VAR 0 1
11424: PUSH
11425: LD_INT 1
11427: PPUSH
11428: LD_VAR 0 1
11432: PPUSH
11433: CALL_OW 12
11437: ARRAY
11438: PPUSH
11439: LD_INT 100
11441: PPUSH
11442: CALL_OW 234
// end ;
11446: PPOPN 1
11448: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11449: LD_EXP 40
11453: IFFALSE 11461
11455: PUSH
11456: LD_EXP 54
11460: AND
11461: IFFALSE 11559
11463: GO 11465
11465: DISABLE
11466: LD_INT 0
11468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11469: LD_ADDR_VAR 0 1
11473: PUSH
11474: LD_INT 22
11476: PUSH
11477: LD_OWVAR 2
11481: PUSH
11482: EMPTY
11483: LIST
11484: LIST
11485: PUSH
11486: LD_INT 21
11488: PUSH
11489: LD_INT 1
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: PUSH
11496: EMPTY
11497: LIST
11498: LIST
11499: PPUSH
11500: CALL_OW 69
11504: ST_TO_ADDR
// if not tmp then
11505: LD_VAR 0 1
11509: NOT
11510: IFFALSE 11514
// exit ;
11512: GO 11559
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11514: LD_VAR 0 1
11518: PUSH
11519: LD_INT 1
11521: PPUSH
11522: LD_VAR 0 1
11526: PPUSH
11527: CALL_OW 12
11531: ARRAY
11532: PPUSH
11533: LD_INT 1
11535: PPUSH
11536: LD_INT 4
11538: PPUSH
11539: CALL_OW 12
11543: PPUSH
11544: LD_INT 3000
11546: PPUSH
11547: LD_INT 9000
11549: PPUSH
11550: CALL_OW 12
11554: PPUSH
11555: CALL_OW 492
// end ;
11559: PPOPN 1
11561: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11562: LD_EXP 40
11566: IFFALSE 11574
11568: PUSH
11569: LD_EXP 55
11573: AND
11574: IFFALSE 11594
11576: GO 11578
11578: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11579: LD_INT 1
11581: PPUSH
11582: LD_OWVAR 2
11586: PPUSH
11587: LD_INT 0
11589: PPUSH
11590: CALL_OW 324
11594: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11595: LD_EXP 40
11599: IFFALSE 11607
11601: PUSH
11602: LD_EXP 56
11606: AND
11607: IFFALSE 11690
11609: GO 11611
11611: DISABLE
11612: LD_INT 0
11614: PPUSH
11615: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11616: LD_ADDR_VAR 0 2
11620: PUSH
11621: LD_INT 22
11623: PUSH
11624: LD_OWVAR 2
11628: PUSH
11629: EMPTY
11630: LIST
11631: LIST
11632: PUSH
11633: LD_INT 21
11635: PUSH
11636: LD_INT 3
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: PUSH
11643: EMPTY
11644: LIST
11645: LIST
11646: PPUSH
11647: CALL_OW 69
11651: ST_TO_ADDR
// if not tmp then
11652: LD_VAR 0 2
11656: NOT
11657: IFFALSE 11661
// exit ;
11659: GO 11690
// for i in tmp do
11661: LD_ADDR_VAR 0 1
11665: PUSH
11666: LD_VAR 0 2
11670: PUSH
11671: FOR_IN
11672: IFFALSE 11688
// SetBLevel ( i , 10 ) ;
11674: LD_VAR 0 1
11678: PPUSH
11679: LD_INT 10
11681: PPUSH
11682: CALL_OW 241
11686: GO 11671
11688: POP
11689: POP
// end ;
11690: PPOPN 2
11692: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11693: LD_EXP 40
11697: IFFALSE 11705
11699: PUSH
11700: LD_EXP 57
11704: AND
11705: IFFALSE 11816
11707: GO 11709
11709: DISABLE
11710: LD_INT 0
11712: PPUSH
11713: PPUSH
11714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11715: LD_ADDR_VAR 0 3
11719: PUSH
11720: LD_INT 22
11722: PUSH
11723: LD_OWVAR 2
11727: PUSH
11728: EMPTY
11729: LIST
11730: LIST
11731: PUSH
11732: LD_INT 25
11734: PUSH
11735: LD_INT 1
11737: PUSH
11738: EMPTY
11739: LIST
11740: LIST
11741: PUSH
11742: EMPTY
11743: LIST
11744: LIST
11745: PPUSH
11746: CALL_OW 69
11750: ST_TO_ADDR
// if not tmp then
11751: LD_VAR 0 3
11755: NOT
11756: IFFALSE 11760
// exit ;
11758: GO 11816
// un := tmp [ rand ( 1 , tmp ) ] ;
11760: LD_ADDR_VAR 0 2
11764: PUSH
11765: LD_VAR 0 3
11769: PUSH
11770: LD_INT 1
11772: PPUSH
11773: LD_VAR 0 3
11777: PPUSH
11778: CALL_OW 12
11782: ARRAY
11783: ST_TO_ADDR
// if Crawls ( un ) then
11784: LD_VAR 0 2
11788: PPUSH
11789: CALL_OW 318
11793: IFFALSE 11804
// ComWalk ( un ) ;
11795: LD_VAR 0 2
11799: PPUSH
11800: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11804: LD_VAR 0 2
11808: PPUSH
11809: LD_INT 5
11811: PPUSH
11812: CALL_OW 336
// end ;
11816: PPOPN 3
11818: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
11819: LD_EXP 40
11823: IFFALSE 11831
11825: PUSH
11826: LD_EXP 58
11830: AND
11831: IFFALSE 11843
11833: PUSH
11834: LD_OWVAR 67
11838: PUSH
11839: LD_INT 4
11841: LESS
11842: AND
11843: IFFALSE 11862
11845: GO 11847
11847: DISABLE
// begin Difficulty := Difficulty + 1 ;
11848: LD_ADDR_OWVAR 67
11852: PUSH
11853: LD_OWVAR 67
11857: PUSH
11858: LD_INT 1
11860: PLUS
11861: ST_TO_ADDR
// end ;
11862: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11863: LD_EXP 40
11867: IFFALSE 11875
11869: PUSH
11870: LD_EXP 59
11874: AND
11875: IFFALSE 11978
11877: GO 11879
11879: DISABLE
11880: LD_INT 0
11882: PPUSH
// begin for i := 1 to 5 do
11883: LD_ADDR_VAR 0 1
11887: PUSH
11888: DOUBLE
11889: LD_INT 1
11891: DEC
11892: ST_TO_ADDR
11893: LD_INT 5
11895: PUSH
11896: FOR_TO
11897: IFFALSE 11976
// begin uc_nation := nation_nature ;
11899: LD_ADDR_OWVAR 21
11903: PUSH
11904: LD_INT 0
11906: ST_TO_ADDR
// uc_side := 0 ;
11907: LD_ADDR_OWVAR 20
11911: PUSH
11912: LD_INT 0
11914: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11915: LD_ADDR_OWVAR 29
11919: PUSH
11920: LD_INT 12
11922: PUSH
11923: LD_INT 12
11925: PUSH
11926: EMPTY
11927: LIST
11928: LIST
11929: ST_TO_ADDR
// hc_agressivity := 20 ;
11930: LD_ADDR_OWVAR 35
11934: PUSH
11935: LD_INT 20
11937: ST_TO_ADDR
// hc_class := class_tiger ;
11938: LD_ADDR_OWVAR 28
11942: PUSH
11943: LD_INT 14
11945: ST_TO_ADDR
// hc_gallery :=  ;
11946: LD_ADDR_OWVAR 33
11950: PUSH
11951: LD_STRING 
11953: ST_TO_ADDR
// hc_name :=  ;
11954: LD_ADDR_OWVAR 26
11958: PUSH
11959: LD_STRING 
11961: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11962: CALL_OW 44
11966: PPUSH
11967: LD_INT 0
11969: PPUSH
11970: CALL_OW 51
// end ;
11974: GO 11896
11976: POP
11977: POP
// end ;
11978: PPOPN 1
11980: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11981: LD_EXP 40
11985: IFFALSE 11993
11987: PUSH
11988: LD_EXP 60
11992: AND
11993: IFFALSE 12002
11995: GO 11997
11997: DISABLE
// StreamSibBomb ;
11998: CALL 12003 0 0
12002: END
// export function StreamSibBomb ; var i , x , y ; begin
12003: LD_INT 0
12005: PPUSH
12006: PPUSH
12007: PPUSH
12008: PPUSH
// result := false ;
12009: LD_ADDR_VAR 0 1
12013: PUSH
12014: LD_INT 0
12016: ST_TO_ADDR
// for i := 1 to 16 do
12017: LD_ADDR_VAR 0 2
12021: PUSH
12022: DOUBLE
12023: LD_INT 1
12025: DEC
12026: ST_TO_ADDR
12027: LD_INT 16
12029: PUSH
12030: FOR_TO
12031: IFFALSE 12230
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12033: LD_ADDR_VAR 0 3
12037: PUSH
12038: LD_INT 10
12040: PUSH
12041: LD_INT 20
12043: PUSH
12044: LD_INT 30
12046: PUSH
12047: LD_INT 40
12049: PUSH
12050: LD_INT 50
12052: PUSH
12053: LD_INT 60
12055: PUSH
12056: LD_INT 70
12058: PUSH
12059: LD_INT 80
12061: PUSH
12062: LD_INT 90
12064: PUSH
12065: LD_INT 100
12067: PUSH
12068: LD_INT 110
12070: PUSH
12071: LD_INT 120
12073: PUSH
12074: LD_INT 130
12076: PUSH
12077: LD_INT 140
12079: PUSH
12080: LD_INT 150
12082: PUSH
12083: EMPTY
12084: LIST
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 1
12102: PPUSH
12103: LD_INT 15
12105: PPUSH
12106: CALL_OW 12
12110: ARRAY
12111: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
12112: LD_ADDR_VAR 0 4
12116: PUSH
12117: LD_INT 10
12119: PUSH
12120: LD_INT 20
12122: PUSH
12123: LD_INT 30
12125: PUSH
12126: LD_INT 40
12128: PUSH
12129: LD_INT 50
12131: PUSH
12132: LD_INT 60
12134: PUSH
12135: LD_INT 70
12137: PUSH
12138: LD_INT 80
12140: PUSH
12141: LD_INT 90
12143: PUSH
12144: LD_INT 100
12146: PUSH
12147: LD_INT 110
12149: PUSH
12150: LD_INT 120
12152: PUSH
12153: LD_INT 130
12155: PUSH
12156: LD_INT 140
12158: PUSH
12159: LD_INT 150
12161: PUSH
12162: EMPTY
12163: LIST
12164: LIST
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: LIST
12174: LIST
12175: LIST
12176: LIST
12177: LIST
12178: PUSH
12179: LD_INT 1
12181: PPUSH
12182: LD_INT 15
12184: PPUSH
12185: CALL_OW 12
12189: ARRAY
12190: ST_TO_ADDR
// if ValidHex ( x , y ) then
12191: LD_VAR 0 3
12195: PPUSH
12196: LD_VAR 0 4
12200: PPUSH
12201: CALL_OW 488
12205: IFFALSE 12228
// begin result := [ x , y ] ;
12207: LD_ADDR_VAR 0 1
12211: PUSH
12212: LD_VAR 0 3
12216: PUSH
12217: LD_VAR 0 4
12221: PUSH
12222: EMPTY
12223: LIST
12224: LIST
12225: ST_TO_ADDR
// break ;
12226: GO 12230
// end ; end ;
12228: GO 12030
12230: POP
12231: POP
// if result then
12232: LD_VAR 0 1
12236: IFFALSE 12296
// begin ToLua ( playSibBomb() ) ;
12238: LD_STRING playSibBomb()
12240: PPUSH
12241: CALL_OW 559
// wait ( 0 0$14 ) ;
12245: LD_INT 490
12247: PPUSH
12248: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
12252: LD_VAR 0 1
12256: PUSH
12257: LD_INT 1
12259: ARRAY
12260: PPUSH
12261: LD_VAR 0 1
12265: PUSH
12266: LD_INT 2
12268: ARRAY
12269: PPUSH
12270: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
12274: LD_VAR 0 1
12278: PUSH
12279: LD_INT 1
12281: ARRAY
12282: PPUSH
12283: LD_VAR 0 1
12287: PUSH
12288: LD_INT 2
12290: ARRAY
12291: PPUSH
12292: CALL_OW 429
// end ; end ;
12296: LD_VAR 0 1
12300: RET
// every 0 0$1 trigger StreamModeActive and sReset do
12301: LD_EXP 40
12305: IFFALSE 12313
12307: PUSH
12308: LD_EXP 62
12312: AND
12313: IFFALSE 12325
12315: GO 12317
12317: DISABLE
// YouLost (  ) ;
12318: LD_STRING 
12320: PPUSH
12321: CALL_OW 104
12325: END
// every 0 0$1 trigger StreamModeActive and sFog do
12326: LD_EXP 40
12330: IFFALSE 12338
12332: PUSH
12333: LD_EXP 61
12337: AND
12338: IFFALSE 12352
12340: GO 12342
12342: DISABLE
// FogOff ( your_side ) ;
12343: LD_OWVAR 2
12347: PPUSH
12348: CALL_OW 344
12352: END
// every 0 0$1 trigger StreamModeActive and sSun do
12353: LD_EXP 40
12357: IFFALSE 12365
12359: PUSH
12360: LD_EXP 63
12364: AND
12365: IFFALSE 12393
12367: GO 12369
12369: DISABLE
// begin solar_recharge_percent := 0 ;
12370: LD_ADDR_OWVAR 79
12374: PUSH
12375: LD_INT 0
12377: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12378: LD_INT 10500
12380: PPUSH
12381: CALL_OW 67
// solar_recharge_percent := 100 ;
12385: LD_ADDR_OWVAR 79
12389: PUSH
12390: LD_INT 100
12392: ST_TO_ADDR
// end ;
12393: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12394: LD_EXP 40
12398: IFFALSE 12406
12400: PUSH
12401: LD_EXP 64
12405: AND
12406: IFFALSE 12645
12408: GO 12410
12410: DISABLE
12411: LD_INT 0
12413: PPUSH
12414: PPUSH
12415: PPUSH
// begin tmp := [ ] ;
12416: LD_ADDR_VAR 0 3
12420: PUSH
12421: EMPTY
12422: ST_TO_ADDR
// for i := 1 to 6 do
12423: LD_ADDR_VAR 0 1
12427: PUSH
12428: DOUBLE
12429: LD_INT 1
12431: DEC
12432: ST_TO_ADDR
12433: LD_INT 6
12435: PUSH
12436: FOR_TO
12437: IFFALSE 12542
// begin uc_nation := nation_nature ;
12439: LD_ADDR_OWVAR 21
12443: PUSH
12444: LD_INT 0
12446: ST_TO_ADDR
// uc_side := 0 ;
12447: LD_ADDR_OWVAR 20
12451: PUSH
12452: LD_INT 0
12454: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12455: LD_ADDR_OWVAR 29
12459: PUSH
12460: LD_INT 12
12462: PUSH
12463: LD_INT 12
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: ST_TO_ADDR
// hc_agressivity := 20 ;
12470: LD_ADDR_OWVAR 35
12474: PUSH
12475: LD_INT 20
12477: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12478: LD_ADDR_OWVAR 28
12482: PUSH
12483: LD_INT 17
12485: ST_TO_ADDR
// hc_gallery :=  ;
12486: LD_ADDR_OWVAR 33
12490: PUSH
12491: LD_STRING 
12493: ST_TO_ADDR
// hc_name :=  ;
12494: LD_ADDR_OWVAR 26
12498: PUSH
12499: LD_STRING 
12501: ST_TO_ADDR
// un := CreateHuman ;
12502: LD_ADDR_VAR 0 2
12506: PUSH
12507: CALL_OW 44
12511: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12512: LD_VAR 0 2
12516: PPUSH
12517: LD_INT 1
12519: PPUSH
12520: CALL_OW 51
// tmp := tmp ^ un ;
12524: LD_ADDR_VAR 0 3
12528: PUSH
12529: LD_VAR 0 3
12533: PUSH
12534: LD_VAR 0 2
12538: ADD
12539: ST_TO_ADDR
// end ;
12540: GO 12436
12542: POP
12543: POP
// repeat wait ( 0 0$1 ) ;
12544: LD_INT 35
12546: PPUSH
12547: CALL_OW 67
// for un in tmp do
12551: LD_ADDR_VAR 0 2
12555: PUSH
12556: LD_VAR 0 3
12560: PUSH
12561: FOR_IN
12562: IFFALSE 12636
// begin if IsDead ( un ) then
12564: LD_VAR 0 2
12568: PPUSH
12569: CALL_OW 301
12573: IFFALSE 12593
// begin tmp := tmp diff un ;
12575: LD_ADDR_VAR 0 3
12579: PUSH
12580: LD_VAR 0 3
12584: PUSH
12585: LD_VAR 0 2
12589: DIFF
12590: ST_TO_ADDR
// continue ;
12591: GO 12561
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12593: LD_VAR 0 2
12597: PPUSH
12598: LD_INT 3
12600: PUSH
12601: LD_INT 22
12603: PUSH
12604: LD_INT 0
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PPUSH
12615: CALL_OW 69
12619: PPUSH
12620: LD_VAR 0 2
12624: PPUSH
12625: CALL_OW 74
12629: PPUSH
12630: CALL_OW 115
// end ;
12634: GO 12561
12636: POP
12637: POP
// until not tmp ;
12638: LD_VAR 0 3
12642: NOT
12643: IFFALSE 12544
// end ;
12645: PPOPN 3
12647: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12648: LD_EXP 40
12652: IFFALSE 12660
12654: PUSH
12655: LD_EXP 65
12659: AND
12660: IFFALSE 12714
12662: GO 12664
12664: DISABLE
// begin ToLua ( displayTroll(); ) ;
12665: LD_STRING displayTroll();
12667: PPUSH
12668: CALL_OW 559
// wait ( 3 3$00 ) ;
12672: LD_INT 6300
12674: PPUSH
12675: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12679: LD_STRING hideTroll();
12681: PPUSH
12682: CALL_OW 559
// wait ( 1 1$00 ) ;
12686: LD_INT 2100
12688: PPUSH
12689: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12693: LD_STRING displayTroll();
12695: PPUSH
12696: CALL_OW 559
// wait ( 1 1$00 ) ;
12700: LD_INT 2100
12702: PPUSH
12703: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12707: LD_STRING hideTroll();
12709: PPUSH
12710: CALL_OW 559
// end ;
12714: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12715: LD_EXP 40
12719: IFFALSE 12727
12721: PUSH
12722: LD_EXP 66
12726: AND
12727: IFFALSE 12790
12729: GO 12731
12731: DISABLE
12732: LD_INT 0
12734: PPUSH
// begin p := 0 ;
12735: LD_ADDR_VAR 0 1
12739: PUSH
12740: LD_INT 0
12742: ST_TO_ADDR
// repeat game_speed := 1 ;
12743: LD_ADDR_OWVAR 65
12747: PUSH
12748: LD_INT 1
12750: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12751: LD_INT 35
12753: PPUSH
12754: CALL_OW 67
// p := p + 1 ;
12758: LD_ADDR_VAR 0 1
12762: PUSH
12763: LD_VAR 0 1
12767: PUSH
12768: LD_INT 1
12770: PLUS
12771: ST_TO_ADDR
// until p >= 60 ;
12772: LD_VAR 0 1
12776: PUSH
12777: LD_INT 60
12779: GREATEREQUAL
12780: IFFALSE 12743
// game_speed := 4 ;
12782: LD_ADDR_OWVAR 65
12786: PUSH
12787: LD_INT 4
12789: ST_TO_ADDR
// end ;
12790: PPOPN 1
12792: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12793: LD_EXP 40
12797: IFFALSE 12805
12799: PUSH
12800: LD_EXP 67
12804: AND
12805: IFFALSE 12951
12807: GO 12809
12809: DISABLE
12810: LD_INT 0
12812: PPUSH
12813: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12814: LD_ADDR_VAR 0 1
12818: PUSH
12819: LD_INT 22
12821: PUSH
12822: LD_OWVAR 2
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PUSH
12831: LD_INT 2
12833: PUSH
12834: LD_INT 30
12836: PUSH
12837: LD_INT 0
12839: PUSH
12840: EMPTY
12841: LIST
12842: LIST
12843: PUSH
12844: LD_INT 30
12846: PUSH
12847: LD_INT 1
12849: PUSH
12850: EMPTY
12851: LIST
12852: LIST
12853: PUSH
12854: EMPTY
12855: LIST
12856: LIST
12857: LIST
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: PPUSH
12863: CALL_OW 69
12867: ST_TO_ADDR
// if not depot then
12868: LD_VAR 0 1
12872: NOT
12873: IFFALSE 12877
// exit ;
12875: GO 12951
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12877: LD_ADDR_VAR 0 2
12881: PUSH
12882: LD_VAR 0 1
12886: PUSH
12887: LD_INT 1
12889: PPUSH
12890: LD_VAR 0 1
12894: PPUSH
12895: CALL_OW 12
12899: ARRAY
12900: PPUSH
12901: CALL_OW 274
12905: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12906: LD_VAR 0 2
12910: PPUSH
12911: LD_INT 1
12913: PPUSH
12914: LD_INT 0
12916: PPUSH
12917: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12921: LD_VAR 0 2
12925: PPUSH
12926: LD_INT 2
12928: PPUSH
12929: LD_INT 0
12931: PPUSH
12932: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12936: LD_VAR 0 2
12940: PPUSH
12941: LD_INT 3
12943: PPUSH
12944: LD_INT 0
12946: PPUSH
12947: CALL_OW 277
// end ;
12951: PPOPN 2
12953: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12954: LD_EXP 40
12958: IFFALSE 12966
12960: PUSH
12961: LD_EXP 68
12965: AND
12966: IFFALSE 13063
12968: GO 12970
12970: DISABLE
12971: LD_INT 0
12973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12974: LD_ADDR_VAR 0 1
12978: PUSH
12979: LD_INT 22
12981: PUSH
12982: LD_OWVAR 2
12986: PUSH
12987: EMPTY
12988: LIST
12989: LIST
12990: PUSH
12991: LD_INT 21
12993: PUSH
12994: LD_INT 1
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PUSH
13001: LD_INT 3
13003: PUSH
13004: LD_INT 23
13006: PUSH
13007: LD_INT 0
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: LIST
13022: PPUSH
13023: CALL_OW 69
13027: ST_TO_ADDR
// if not tmp then
13028: LD_VAR 0 1
13032: NOT
13033: IFFALSE 13037
// exit ;
13035: GO 13063
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
13037: LD_VAR 0 1
13041: PUSH
13042: LD_INT 1
13044: PPUSH
13045: LD_VAR 0 1
13049: PPUSH
13050: CALL_OW 12
13054: ARRAY
13055: PPUSH
13056: LD_INT 200
13058: PPUSH
13059: CALL_OW 234
// end ;
13063: PPOPN 1
13065: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
13066: LD_EXP 40
13070: IFFALSE 13078
13072: PUSH
13073: LD_EXP 69
13077: AND
13078: IFFALSE 13157
13080: GO 13082
13082: DISABLE
13083: LD_INT 0
13085: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
13086: LD_ADDR_VAR 0 1
13090: PUSH
13091: LD_INT 22
13093: PUSH
13094: LD_OWVAR 2
13098: PUSH
13099: EMPTY
13100: LIST
13101: LIST
13102: PUSH
13103: LD_INT 21
13105: PUSH
13106: LD_INT 2
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PPUSH
13117: CALL_OW 69
13121: ST_TO_ADDR
// if not tmp then
13122: LD_VAR 0 1
13126: NOT
13127: IFFALSE 13131
// exit ;
13129: GO 13157
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
13131: LD_VAR 0 1
13135: PUSH
13136: LD_INT 1
13138: PPUSH
13139: LD_VAR 0 1
13143: PPUSH
13144: CALL_OW 12
13148: ARRAY
13149: PPUSH
13150: LD_INT 60
13152: PPUSH
13153: CALL_OW 234
// end ;
13157: PPOPN 1
13159: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
13160: LD_EXP 40
13164: IFFALSE 13172
13166: PUSH
13167: LD_EXP 70
13171: AND
13172: IFFALSE 13271
13174: GO 13176
13176: DISABLE
13177: LD_INT 0
13179: PPUSH
13180: PPUSH
// begin enable ;
13181: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
13182: LD_ADDR_VAR 0 1
13186: PUSH
13187: LD_INT 22
13189: PUSH
13190: LD_OWVAR 2
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: PUSH
13199: LD_INT 61
13201: PUSH
13202: EMPTY
13203: LIST
13204: PUSH
13205: LD_INT 33
13207: PUSH
13208: LD_INT 2
13210: PUSH
13211: EMPTY
13212: LIST
13213: LIST
13214: PUSH
13215: EMPTY
13216: LIST
13217: LIST
13218: LIST
13219: PPUSH
13220: CALL_OW 69
13224: ST_TO_ADDR
// if not tmp then
13225: LD_VAR 0 1
13229: NOT
13230: IFFALSE 13234
// exit ;
13232: GO 13271
// for i in tmp do
13234: LD_ADDR_VAR 0 2
13238: PUSH
13239: LD_VAR 0 1
13243: PUSH
13244: FOR_IN
13245: IFFALSE 13269
// if IsControledBy ( i ) then
13247: LD_VAR 0 2
13251: PPUSH
13252: CALL_OW 312
13256: IFFALSE 13267
// ComUnlink ( i ) ;
13258: LD_VAR 0 2
13262: PPUSH
13263: CALL_OW 136
13267: GO 13244
13269: POP
13270: POP
// end ;
13271: PPOPN 2
13273: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
13274: LD_EXP 40
13278: IFFALSE 13286
13280: PUSH
13281: LD_EXP 71
13285: AND
13286: IFFALSE 13426
13288: GO 13290
13290: DISABLE
13291: LD_INT 0
13293: PPUSH
13294: PPUSH
// begin ToLua ( displayPowell(); ) ;
13295: LD_STRING displayPowell();
13297: PPUSH
13298: CALL_OW 559
// uc_side := 0 ;
13302: LD_ADDR_OWVAR 20
13306: PUSH
13307: LD_INT 0
13309: ST_TO_ADDR
// uc_nation := 2 ;
13310: LD_ADDR_OWVAR 21
13314: PUSH
13315: LD_INT 2
13317: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
13318: LD_ADDR_OWVAR 37
13322: PUSH
13323: LD_INT 14
13325: ST_TO_ADDR
// vc_engine := engine_siberite ;
13326: LD_ADDR_OWVAR 39
13330: PUSH
13331: LD_INT 3
13333: ST_TO_ADDR
// vc_control := control_apeman ;
13334: LD_ADDR_OWVAR 38
13338: PUSH
13339: LD_INT 5
13341: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
13342: LD_ADDR_OWVAR 40
13346: PUSH
13347: LD_INT 29
13349: ST_TO_ADDR
// un := CreateVehicle ;
13350: LD_ADDR_VAR 0 2
13354: PUSH
13355: CALL_OW 45
13359: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13360: LD_VAR 0 2
13364: PPUSH
13365: LD_INT 1
13367: PPUSH
13368: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13372: LD_INT 35
13374: PPUSH
13375: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13379: LD_VAR 0 2
13383: PPUSH
13384: LD_INT 22
13386: PUSH
13387: LD_OWVAR 2
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PPUSH
13396: CALL_OW 69
13400: PPUSH
13401: LD_VAR 0 2
13405: PPUSH
13406: CALL_OW 74
13410: PPUSH
13411: CALL_OW 115
// until IsDead ( un ) ;
13415: LD_VAR 0 2
13419: PPUSH
13420: CALL_OW 301
13424: IFFALSE 13372
// end ;
13426: PPOPN 2
13428: END
// every 0 0$1 trigger StreamModeActive and sStu do
13429: LD_EXP 40
13433: IFFALSE 13441
13435: PUSH
13436: LD_EXP 79
13440: AND
13441: IFFALSE 13457
13443: GO 13445
13445: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13446: LD_STRING displayStucuk();
13448: PPUSH
13449: CALL_OW 559
// ResetFog ;
13453: CALL_OW 335
// end ;
13457: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13458: LD_EXP 40
13462: IFFALSE 13470
13464: PUSH
13465: LD_EXP 72
13469: AND
13470: IFFALSE 13611
13472: GO 13474
13474: DISABLE
13475: LD_INT 0
13477: PPUSH
13478: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13479: LD_ADDR_VAR 0 2
13483: PUSH
13484: LD_INT 22
13486: PUSH
13487: LD_OWVAR 2
13491: PUSH
13492: EMPTY
13493: LIST
13494: LIST
13495: PUSH
13496: LD_INT 21
13498: PUSH
13499: LD_INT 1
13501: PUSH
13502: EMPTY
13503: LIST
13504: LIST
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PPUSH
13510: CALL_OW 69
13514: ST_TO_ADDR
// if not tmp then
13515: LD_VAR 0 2
13519: NOT
13520: IFFALSE 13524
// exit ;
13522: GO 13611
// un := tmp [ rand ( 1 , tmp ) ] ;
13524: LD_ADDR_VAR 0 1
13528: PUSH
13529: LD_VAR 0 2
13533: PUSH
13534: LD_INT 1
13536: PPUSH
13537: LD_VAR 0 2
13541: PPUSH
13542: CALL_OW 12
13546: ARRAY
13547: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13548: LD_VAR 0 1
13552: PPUSH
13553: LD_INT 0
13555: PPUSH
13556: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13560: LD_VAR 0 1
13564: PPUSH
13565: LD_OWVAR 3
13569: PUSH
13570: LD_VAR 0 1
13574: DIFF
13575: PPUSH
13576: LD_VAR 0 1
13580: PPUSH
13581: CALL_OW 74
13585: PPUSH
13586: CALL_OW 115
// wait ( 0 0$20 ) ;
13590: LD_INT 700
13592: PPUSH
13593: CALL_OW 67
// SetSide ( un , your_side ) ;
13597: LD_VAR 0 1
13601: PPUSH
13602: LD_OWVAR 2
13606: PPUSH
13607: CALL_OW 235
// end ;
13611: PPOPN 2
13613: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13614: LD_EXP 40
13618: IFFALSE 13626
13620: PUSH
13621: LD_EXP 73
13625: AND
13626: IFFALSE 13732
13628: GO 13630
13630: DISABLE
13631: LD_INT 0
13633: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13634: LD_ADDR_VAR 0 1
13638: PUSH
13639: LD_INT 22
13641: PUSH
13642: LD_OWVAR 2
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: PUSH
13651: LD_INT 2
13653: PUSH
13654: LD_INT 30
13656: PUSH
13657: LD_INT 0
13659: PUSH
13660: EMPTY
13661: LIST
13662: LIST
13663: PUSH
13664: LD_INT 30
13666: PUSH
13667: LD_INT 1
13669: PUSH
13670: EMPTY
13671: LIST
13672: LIST
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: LIST
13678: PUSH
13679: EMPTY
13680: LIST
13681: LIST
13682: PPUSH
13683: CALL_OW 69
13687: ST_TO_ADDR
// if not depot then
13688: LD_VAR 0 1
13692: NOT
13693: IFFALSE 13697
// exit ;
13695: GO 13732
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13697: LD_VAR 0 1
13701: PUSH
13702: LD_INT 1
13704: ARRAY
13705: PPUSH
13706: CALL_OW 250
13710: PPUSH
13711: LD_VAR 0 1
13715: PUSH
13716: LD_INT 1
13718: ARRAY
13719: PPUSH
13720: CALL_OW 251
13724: PPUSH
13725: LD_INT 70
13727: PPUSH
13728: CALL_OW 495
// end ;
13732: PPOPN 1
13734: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13735: LD_EXP 40
13739: IFFALSE 13747
13741: PUSH
13742: LD_EXP 74
13746: AND
13747: IFFALSE 13958
13749: GO 13751
13751: DISABLE
13752: LD_INT 0
13754: PPUSH
13755: PPUSH
13756: PPUSH
13757: PPUSH
13758: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13759: LD_ADDR_VAR 0 5
13763: PUSH
13764: LD_INT 22
13766: PUSH
13767: LD_OWVAR 2
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PUSH
13776: LD_INT 21
13778: PUSH
13779: LD_INT 1
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: PPUSH
13790: CALL_OW 69
13794: ST_TO_ADDR
// if not tmp then
13795: LD_VAR 0 5
13799: NOT
13800: IFFALSE 13804
// exit ;
13802: GO 13958
// for i in tmp do
13804: LD_ADDR_VAR 0 1
13808: PUSH
13809: LD_VAR 0 5
13813: PUSH
13814: FOR_IN
13815: IFFALSE 13956
// begin d := rand ( 0 , 5 ) ;
13817: LD_ADDR_VAR 0 4
13821: PUSH
13822: LD_INT 0
13824: PPUSH
13825: LD_INT 5
13827: PPUSH
13828: CALL_OW 12
13832: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13833: LD_ADDR_VAR 0 2
13837: PUSH
13838: LD_VAR 0 1
13842: PPUSH
13843: CALL_OW 250
13847: PPUSH
13848: LD_VAR 0 4
13852: PPUSH
13853: LD_INT 3
13855: PPUSH
13856: LD_INT 12
13858: PPUSH
13859: CALL_OW 12
13863: PPUSH
13864: CALL_OW 272
13868: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13869: LD_ADDR_VAR 0 3
13873: PUSH
13874: LD_VAR 0 1
13878: PPUSH
13879: CALL_OW 251
13883: PPUSH
13884: LD_VAR 0 4
13888: PPUSH
13889: LD_INT 3
13891: PPUSH
13892: LD_INT 12
13894: PPUSH
13895: CALL_OW 12
13899: PPUSH
13900: CALL_OW 273
13904: ST_TO_ADDR
// if ValidHex ( x , y ) then
13905: LD_VAR 0 2
13909: PPUSH
13910: LD_VAR 0 3
13914: PPUSH
13915: CALL_OW 488
13919: IFFALSE 13954
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13921: LD_VAR 0 1
13925: PPUSH
13926: LD_VAR 0 2
13930: PPUSH
13931: LD_VAR 0 3
13935: PPUSH
13936: LD_INT 3
13938: PPUSH
13939: LD_INT 6
13941: PPUSH
13942: CALL_OW 12
13946: PPUSH
13947: LD_INT 1
13949: PPUSH
13950: CALL_OW 483
// end ;
13954: GO 13814
13956: POP
13957: POP
// end ;
13958: PPOPN 5
13960: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13961: LD_EXP 40
13965: IFFALSE 13973
13967: PUSH
13968: LD_EXP 75
13972: AND
13973: IFFALSE 14067
13975: GO 13977
13977: DISABLE
13978: LD_INT 0
13980: PPUSH
13981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13982: LD_ADDR_VAR 0 2
13986: PUSH
13987: LD_INT 22
13989: PUSH
13990: LD_OWVAR 2
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 32
14001: PUSH
14002: LD_INT 1
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: LD_INT 21
14011: PUSH
14012: LD_INT 2
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: LIST
14023: PPUSH
14024: CALL_OW 69
14028: ST_TO_ADDR
// if not tmp then
14029: LD_VAR 0 2
14033: NOT
14034: IFFALSE 14038
// exit ;
14036: GO 14067
// for i in tmp do
14038: LD_ADDR_VAR 0 1
14042: PUSH
14043: LD_VAR 0 2
14047: PUSH
14048: FOR_IN
14049: IFFALSE 14065
// SetFuel ( i , 0 ) ;
14051: LD_VAR 0 1
14055: PPUSH
14056: LD_INT 0
14058: PPUSH
14059: CALL_OW 240
14063: GO 14048
14065: POP
14066: POP
// end ;
14067: PPOPN 2
14069: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
14070: LD_EXP 40
14074: IFFALSE 14082
14076: PUSH
14077: LD_EXP 76
14081: AND
14082: IFFALSE 14148
14084: GO 14086
14086: DISABLE
14087: LD_INT 0
14089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
14090: LD_ADDR_VAR 0 1
14094: PUSH
14095: LD_INT 22
14097: PUSH
14098: LD_OWVAR 2
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: LD_INT 30
14109: PUSH
14110: LD_INT 29
14112: PUSH
14113: EMPTY
14114: LIST
14115: LIST
14116: PUSH
14117: EMPTY
14118: LIST
14119: LIST
14120: PPUSH
14121: CALL_OW 69
14125: ST_TO_ADDR
// if not tmp then
14126: LD_VAR 0 1
14130: NOT
14131: IFFALSE 14135
// exit ;
14133: GO 14148
// DestroyUnit ( tmp [ 1 ] ) ;
14135: LD_VAR 0 1
14139: PUSH
14140: LD_INT 1
14142: ARRAY
14143: PPUSH
14144: CALL_OW 65
// end ;
14148: PPOPN 1
14150: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
14151: LD_EXP 40
14155: IFFALSE 14163
14157: PUSH
14158: LD_EXP 78
14162: AND
14163: IFFALSE 14292
14165: GO 14167
14167: DISABLE
14168: LD_INT 0
14170: PPUSH
// begin uc_side := 0 ;
14171: LD_ADDR_OWVAR 20
14175: PUSH
14176: LD_INT 0
14178: ST_TO_ADDR
// uc_nation := nation_arabian ;
14179: LD_ADDR_OWVAR 21
14183: PUSH
14184: LD_INT 2
14186: ST_TO_ADDR
// hc_gallery :=  ;
14187: LD_ADDR_OWVAR 33
14191: PUSH
14192: LD_STRING 
14194: ST_TO_ADDR
// hc_name :=  ;
14195: LD_ADDR_OWVAR 26
14199: PUSH
14200: LD_STRING 
14202: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
14203: LD_INT 1
14205: PPUSH
14206: LD_INT 11
14208: PPUSH
14209: LD_INT 10
14211: PPUSH
14212: CALL_OW 380
// un := CreateHuman ;
14216: LD_ADDR_VAR 0 1
14220: PUSH
14221: CALL_OW 44
14225: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
14226: LD_VAR 0 1
14230: PPUSH
14231: LD_INT 1
14233: PPUSH
14234: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
14238: LD_INT 35
14240: PPUSH
14241: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
14245: LD_VAR 0 1
14249: PPUSH
14250: LD_INT 22
14252: PUSH
14253: LD_OWVAR 2
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PPUSH
14262: CALL_OW 69
14266: PPUSH
14267: LD_VAR 0 1
14271: PPUSH
14272: CALL_OW 74
14276: PPUSH
14277: CALL_OW 115
// until IsDead ( un ) ;
14281: LD_VAR 0 1
14285: PPUSH
14286: CALL_OW 301
14290: IFFALSE 14238
// end ;
14292: PPOPN 1
14294: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
14295: LD_EXP 40
14299: IFFALSE 14307
14301: PUSH
14302: LD_EXP 80
14306: AND
14307: IFFALSE 14319
14309: GO 14311
14311: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
14312: LD_STRING earthquake(getX(game), 0, 32)
14314: PPUSH
14315: CALL_OW 559
14319: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
14320: LD_EXP 40
14324: IFFALSE 14332
14326: PUSH
14327: LD_EXP 81
14331: AND
14332: IFFALSE 14423
14334: GO 14336
14336: DISABLE
14337: LD_INT 0
14339: PPUSH
// begin enable ;
14340: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
14341: LD_ADDR_VAR 0 1
14345: PUSH
14346: LD_INT 22
14348: PUSH
14349: LD_OWVAR 2
14353: PUSH
14354: EMPTY
14355: LIST
14356: LIST
14357: PUSH
14358: LD_INT 21
14360: PUSH
14361: LD_INT 2
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: PUSH
14368: LD_INT 33
14370: PUSH
14371: LD_INT 3
14373: PUSH
14374: EMPTY
14375: LIST
14376: LIST
14377: PUSH
14378: EMPTY
14379: LIST
14380: LIST
14381: LIST
14382: PPUSH
14383: CALL_OW 69
14387: ST_TO_ADDR
// if not tmp then
14388: LD_VAR 0 1
14392: NOT
14393: IFFALSE 14397
// exit ;
14395: GO 14423
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14397: LD_VAR 0 1
14401: PUSH
14402: LD_INT 1
14404: PPUSH
14405: LD_VAR 0 1
14409: PPUSH
14410: CALL_OW 12
14414: ARRAY
14415: PPUSH
14416: LD_INT 1
14418: PPUSH
14419: CALL_OW 234
// end ;
14423: PPOPN 1
14425: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14426: LD_EXP 40
14430: IFFALSE 14438
14432: PUSH
14433: LD_EXP 82
14437: AND
14438: IFFALSE 14579
14440: GO 14442
14442: DISABLE
14443: LD_INT 0
14445: PPUSH
14446: PPUSH
14447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14448: LD_ADDR_VAR 0 3
14452: PUSH
14453: LD_INT 22
14455: PUSH
14456: LD_OWVAR 2
14460: PUSH
14461: EMPTY
14462: LIST
14463: LIST
14464: PUSH
14465: LD_INT 25
14467: PUSH
14468: LD_INT 1
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: PPUSH
14479: CALL_OW 69
14483: ST_TO_ADDR
// if not tmp then
14484: LD_VAR 0 3
14488: NOT
14489: IFFALSE 14493
// exit ;
14491: GO 14579
// un := tmp [ rand ( 1 , tmp ) ] ;
14493: LD_ADDR_VAR 0 2
14497: PUSH
14498: LD_VAR 0 3
14502: PUSH
14503: LD_INT 1
14505: PPUSH
14506: LD_VAR 0 3
14510: PPUSH
14511: CALL_OW 12
14515: ARRAY
14516: ST_TO_ADDR
// if Crawls ( un ) then
14517: LD_VAR 0 2
14521: PPUSH
14522: CALL_OW 318
14526: IFFALSE 14537
// ComWalk ( un ) ;
14528: LD_VAR 0 2
14532: PPUSH
14533: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14537: LD_VAR 0 2
14541: PPUSH
14542: LD_INT 9
14544: PPUSH
14545: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14549: LD_INT 28
14551: PPUSH
14552: LD_OWVAR 2
14556: PPUSH
14557: LD_INT 2
14559: PPUSH
14560: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14564: LD_INT 29
14566: PPUSH
14567: LD_OWVAR 2
14571: PPUSH
14572: LD_INT 2
14574: PPUSH
14575: CALL_OW 322
// end ;
14579: PPOPN 3
14581: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14582: LD_EXP 40
14586: IFFALSE 14594
14588: PUSH
14589: LD_EXP 83
14593: AND
14594: IFFALSE 14705
14596: GO 14598
14598: DISABLE
14599: LD_INT 0
14601: PPUSH
14602: PPUSH
14603: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14604: LD_ADDR_VAR 0 3
14608: PUSH
14609: LD_INT 22
14611: PUSH
14612: LD_OWVAR 2
14616: PUSH
14617: EMPTY
14618: LIST
14619: LIST
14620: PUSH
14621: LD_INT 25
14623: PUSH
14624: LD_INT 1
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: PUSH
14631: EMPTY
14632: LIST
14633: LIST
14634: PPUSH
14635: CALL_OW 69
14639: ST_TO_ADDR
// if not tmp then
14640: LD_VAR 0 3
14644: NOT
14645: IFFALSE 14649
// exit ;
14647: GO 14705
// un := tmp [ rand ( 1 , tmp ) ] ;
14649: LD_ADDR_VAR 0 2
14653: PUSH
14654: LD_VAR 0 3
14658: PUSH
14659: LD_INT 1
14661: PPUSH
14662: LD_VAR 0 3
14666: PPUSH
14667: CALL_OW 12
14671: ARRAY
14672: ST_TO_ADDR
// if Crawls ( un ) then
14673: LD_VAR 0 2
14677: PPUSH
14678: CALL_OW 318
14682: IFFALSE 14693
// ComWalk ( un ) ;
14684: LD_VAR 0 2
14688: PPUSH
14689: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14693: LD_VAR 0 2
14697: PPUSH
14698: LD_INT 8
14700: PPUSH
14701: CALL_OW 336
// end ;
14705: PPOPN 3
14707: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14708: LD_EXP 40
14712: IFFALSE 14720
14714: PUSH
14715: LD_EXP 84
14719: AND
14720: IFFALSE 14864
14722: GO 14724
14724: DISABLE
14725: LD_INT 0
14727: PPUSH
14728: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14729: LD_ADDR_VAR 0 2
14733: PUSH
14734: LD_INT 22
14736: PUSH
14737: LD_OWVAR 2
14741: PUSH
14742: EMPTY
14743: LIST
14744: LIST
14745: PUSH
14746: LD_INT 21
14748: PUSH
14749: LD_INT 2
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 2
14758: PUSH
14759: LD_INT 34
14761: PUSH
14762: LD_INT 12
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: LD_INT 34
14771: PUSH
14772: LD_INT 51
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: LD_INT 34
14781: PUSH
14782: LD_INT 32
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: LIST
14799: PPUSH
14800: CALL_OW 69
14804: ST_TO_ADDR
// if not tmp then
14805: LD_VAR 0 2
14809: NOT
14810: IFFALSE 14814
// exit ;
14812: GO 14864
// for i in tmp do
14814: LD_ADDR_VAR 0 1
14818: PUSH
14819: LD_VAR 0 2
14823: PUSH
14824: FOR_IN
14825: IFFALSE 14862
// if GetCargo ( i , mat_artifact ) = 0 then
14827: LD_VAR 0 1
14831: PPUSH
14832: LD_INT 4
14834: PPUSH
14835: CALL_OW 289
14839: PUSH
14840: LD_INT 0
14842: EQUAL
14843: IFFALSE 14860
// SetCargo ( i , mat_siberit , 100 ) ;
14845: LD_VAR 0 1
14849: PPUSH
14850: LD_INT 3
14852: PPUSH
14853: LD_INT 100
14855: PPUSH
14856: CALL_OW 290
14860: GO 14824
14862: POP
14863: POP
// end ;
14864: PPOPN 2
14866: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14867: LD_EXP 40
14871: IFFALSE 14879
14873: PUSH
14874: LD_EXP 85
14878: AND
14879: IFFALSE 15062
14881: GO 14883
14883: DISABLE
14884: LD_INT 0
14886: PPUSH
14887: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14888: LD_ADDR_VAR 0 2
14892: PUSH
14893: LD_INT 22
14895: PUSH
14896: LD_OWVAR 2
14900: PUSH
14901: EMPTY
14902: LIST
14903: LIST
14904: PPUSH
14905: CALL_OW 69
14909: ST_TO_ADDR
// if not tmp then
14910: LD_VAR 0 2
14914: NOT
14915: IFFALSE 14919
// exit ;
14917: GO 15062
// for i := 1 to 2 do
14919: LD_ADDR_VAR 0 1
14923: PUSH
14924: DOUBLE
14925: LD_INT 1
14927: DEC
14928: ST_TO_ADDR
14929: LD_INT 2
14931: PUSH
14932: FOR_TO
14933: IFFALSE 15060
// begin uc_side := your_side ;
14935: LD_ADDR_OWVAR 20
14939: PUSH
14940: LD_OWVAR 2
14944: ST_TO_ADDR
// uc_nation := nation_american ;
14945: LD_ADDR_OWVAR 21
14949: PUSH
14950: LD_INT 1
14952: ST_TO_ADDR
// vc_chassis := us_morphling ;
14953: LD_ADDR_OWVAR 37
14957: PUSH
14958: LD_INT 5
14960: ST_TO_ADDR
// vc_engine := engine_siberite ;
14961: LD_ADDR_OWVAR 39
14965: PUSH
14966: LD_INT 3
14968: ST_TO_ADDR
// vc_control := control_computer ;
14969: LD_ADDR_OWVAR 38
14973: PUSH
14974: LD_INT 3
14976: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14977: LD_ADDR_OWVAR 40
14981: PUSH
14982: LD_INT 10
14984: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14985: LD_VAR 0 2
14989: PUSH
14990: LD_INT 1
14992: ARRAY
14993: PPUSH
14994: CALL_OW 310
14998: NOT
14999: IFFALSE 15046
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
15001: CALL_OW 45
15005: PPUSH
15006: LD_VAR 0 2
15010: PUSH
15011: LD_INT 1
15013: ARRAY
15014: PPUSH
15015: CALL_OW 250
15019: PPUSH
15020: LD_VAR 0 2
15024: PUSH
15025: LD_INT 1
15027: ARRAY
15028: PPUSH
15029: CALL_OW 251
15033: PPUSH
15034: LD_INT 12
15036: PPUSH
15037: LD_INT 1
15039: PPUSH
15040: CALL_OW 50
15044: GO 15058
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
15046: CALL_OW 45
15050: PPUSH
15051: LD_INT 1
15053: PPUSH
15054: CALL_OW 51
// end ;
15058: GO 14932
15060: POP
15061: POP
// end ;
15062: PPOPN 2
15064: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
15065: LD_EXP 40
15069: IFFALSE 15077
15071: PUSH
15072: LD_EXP 86
15076: AND
15077: IFFALSE 15299
15079: GO 15081
15081: DISABLE
15082: LD_INT 0
15084: PPUSH
15085: PPUSH
15086: PPUSH
15087: PPUSH
15088: PPUSH
15089: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15090: LD_ADDR_VAR 0 6
15094: PUSH
15095: LD_INT 22
15097: PUSH
15098: LD_OWVAR 2
15102: PUSH
15103: EMPTY
15104: LIST
15105: LIST
15106: PUSH
15107: LD_INT 21
15109: PUSH
15110: LD_INT 1
15112: PUSH
15113: EMPTY
15114: LIST
15115: LIST
15116: PUSH
15117: LD_INT 3
15119: PUSH
15120: LD_INT 23
15122: PUSH
15123: LD_INT 0
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: PUSH
15134: EMPTY
15135: LIST
15136: LIST
15137: LIST
15138: PPUSH
15139: CALL_OW 69
15143: ST_TO_ADDR
// if not tmp then
15144: LD_VAR 0 6
15148: NOT
15149: IFFALSE 15153
// exit ;
15151: GO 15299
// s1 := rand ( 1 , 4 ) ;
15153: LD_ADDR_VAR 0 2
15157: PUSH
15158: LD_INT 1
15160: PPUSH
15161: LD_INT 4
15163: PPUSH
15164: CALL_OW 12
15168: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
15169: LD_ADDR_VAR 0 4
15173: PUSH
15174: LD_VAR 0 6
15178: PUSH
15179: LD_INT 1
15181: ARRAY
15182: PPUSH
15183: LD_VAR 0 2
15187: PPUSH
15188: CALL_OW 259
15192: ST_TO_ADDR
// if s1 = 1 then
15193: LD_VAR 0 2
15197: PUSH
15198: LD_INT 1
15200: EQUAL
15201: IFFALSE 15221
// s2 := rand ( 2 , 4 ) else
15203: LD_ADDR_VAR 0 3
15207: PUSH
15208: LD_INT 2
15210: PPUSH
15211: LD_INT 4
15213: PPUSH
15214: CALL_OW 12
15218: ST_TO_ADDR
15219: GO 15229
// s2 := 1 ;
15221: LD_ADDR_VAR 0 3
15225: PUSH
15226: LD_INT 1
15228: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
15229: LD_ADDR_VAR 0 5
15233: PUSH
15234: LD_VAR 0 6
15238: PUSH
15239: LD_INT 1
15241: ARRAY
15242: PPUSH
15243: LD_VAR 0 3
15247: PPUSH
15248: CALL_OW 259
15252: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
15253: LD_VAR 0 6
15257: PUSH
15258: LD_INT 1
15260: ARRAY
15261: PPUSH
15262: LD_VAR 0 2
15266: PPUSH
15267: LD_VAR 0 5
15271: PPUSH
15272: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
15276: LD_VAR 0 6
15280: PUSH
15281: LD_INT 1
15283: ARRAY
15284: PPUSH
15285: LD_VAR 0 3
15289: PPUSH
15290: LD_VAR 0 4
15294: PPUSH
15295: CALL_OW 237
// end ;
15299: PPOPN 6
15301: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
15302: LD_EXP 40
15306: IFFALSE 15314
15308: PUSH
15309: LD_EXP 87
15313: AND
15314: IFFALSE 15393
15316: GO 15318
15318: DISABLE
15319: LD_INT 0
15321: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
15322: LD_ADDR_VAR 0 1
15326: PUSH
15327: LD_INT 22
15329: PUSH
15330: LD_OWVAR 2
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: LD_INT 30
15341: PUSH
15342: LD_INT 3
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PPUSH
15353: CALL_OW 69
15357: ST_TO_ADDR
// if not tmp then
15358: LD_VAR 0 1
15362: NOT
15363: IFFALSE 15367
// exit ;
15365: GO 15393
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
15367: LD_VAR 0 1
15371: PUSH
15372: LD_INT 1
15374: PPUSH
15375: LD_VAR 0 1
15379: PPUSH
15380: CALL_OW 12
15384: ARRAY
15385: PPUSH
15386: LD_INT 1
15388: PPUSH
15389: CALL_OW 234
// end ;
15393: PPOPN 1
15395: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
15396: LD_EXP 40
15400: IFFALSE 15408
15402: PUSH
15403: LD_EXP 88
15407: AND
15408: IFFALSE 15520
15410: GO 15412
15412: DISABLE
15413: LD_INT 0
15415: PPUSH
15416: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15417: LD_ADDR_VAR 0 2
15421: PUSH
15422: LD_INT 22
15424: PUSH
15425: LD_OWVAR 2
15429: PUSH
15430: EMPTY
15431: LIST
15432: LIST
15433: PUSH
15434: LD_INT 2
15436: PUSH
15437: LD_INT 30
15439: PUSH
15440: LD_INT 27
15442: PUSH
15443: EMPTY
15444: LIST
15445: LIST
15446: PUSH
15447: LD_INT 30
15449: PUSH
15450: LD_INT 26
15452: PUSH
15453: EMPTY
15454: LIST
15455: LIST
15456: PUSH
15457: LD_INT 30
15459: PUSH
15460: LD_INT 28
15462: PUSH
15463: EMPTY
15464: LIST
15465: LIST
15466: PUSH
15467: EMPTY
15468: LIST
15469: LIST
15470: LIST
15471: LIST
15472: PUSH
15473: EMPTY
15474: LIST
15475: LIST
15476: PPUSH
15477: CALL_OW 69
15481: ST_TO_ADDR
// if not tmp then
15482: LD_VAR 0 2
15486: NOT
15487: IFFALSE 15491
// exit ;
15489: GO 15520
// for i in tmp do
15491: LD_ADDR_VAR 0 1
15495: PUSH
15496: LD_VAR 0 2
15500: PUSH
15501: FOR_IN
15502: IFFALSE 15518
// SetLives ( i , 1 ) ;
15504: LD_VAR 0 1
15508: PPUSH
15509: LD_INT 1
15511: PPUSH
15512: CALL_OW 234
15516: GO 15501
15518: POP
15519: POP
// end ;
15520: PPOPN 2
15522: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15523: LD_EXP 40
15527: IFFALSE 15535
15529: PUSH
15530: LD_EXP 89
15534: AND
15535: IFFALSE 15822
15537: GO 15539
15539: DISABLE
15540: LD_INT 0
15542: PPUSH
15543: PPUSH
15544: PPUSH
// begin i := rand ( 1 , 7 ) ;
15545: LD_ADDR_VAR 0 1
15549: PUSH
15550: LD_INT 1
15552: PPUSH
15553: LD_INT 7
15555: PPUSH
15556: CALL_OW 12
15560: ST_TO_ADDR
// case i of 1 :
15561: LD_VAR 0 1
15565: PUSH
15566: LD_INT 1
15568: DOUBLE
15569: EQUAL
15570: IFTRUE 15574
15572: GO 15584
15574: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15575: LD_STRING earthquake(getX(game), 0, 32)
15577: PPUSH
15578: CALL_OW 559
15582: GO 15822
15584: LD_INT 2
15586: DOUBLE
15587: EQUAL
15588: IFTRUE 15592
15590: GO 15606
15592: POP
// begin ToLua ( displayStucuk(); ) ;
15593: LD_STRING displayStucuk();
15595: PPUSH
15596: CALL_OW 559
// ResetFog ;
15600: CALL_OW 335
// end ; 3 :
15604: GO 15822
15606: LD_INT 3
15608: DOUBLE
15609: EQUAL
15610: IFTRUE 15614
15612: GO 15718
15614: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15615: LD_ADDR_VAR 0 2
15619: PUSH
15620: LD_INT 22
15622: PUSH
15623: LD_OWVAR 2
15627: PUSH
15628: EMPTY
15629: LIST
15630: LIST
15631: PUSH
15632: LD_INT 25
15634: PUSH
15635: LD_INT 1
15637: PUSH
15638: EMPTY
15639: LIST
15640: LIST
15641: PUSH
15642: EMPTY
15643: LIST
15644: LIST
15645: PPUSH
15646: CALL_OW 69
15650: ST_TO_ADDR
// if not tmp then
15651: LD_VAR 0 2
15655: NOT
15656: IFFALSE 15660
// exit ;
15658: GO 15822
// un := tmp [ rand ( 1 , tmp ) ] ;
15660: LD_ADDR_VAR 0 3
15664: PUSH
15665: LD_VAR 0 2
15669: PUSH
15670: LD_INT 1
15672: PPUSH
15673: LD_VAR 0 2
15677: PPUSH
15678: CALL_OW 12
15682: ARRAY
15683: ST_TO_ADDR
// if Crawls ( un ) then
15684: LD_VAR 0 3
15688: PPUSH
15689: CALL_OW 318
15693: IFFALSE 15704
// ComWalk ( un ) ;
15695: LD_VAR 0 3
15699: PPUSH
15700: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15704: LD_VAR 0 3
15708: PPUSH
15709: LD_INT 8
15711: PPUSH
15712: CALL_OW 336
// end ; 4 :
15716: GO 15822
15718: LD_INT 4
15720: DOUBLE
15721: EQUAL
15722: IFTRUE 15726
15724: GO 15800
15726: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15727: LD_ADDR_VAR 0 2
15731: PUSH
15732: LD_INT 22
15734: PUSH
15735: LD_OWVAR 2
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: PUSH
15744: LD_INT 30
15746: PUSH
15747: LD_INT 29
15749: PUSH
15750: EMPTY
15751: LIST
15752: LIST
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: PPUSH
15758: CALL_OW 69
15762: ST_TO_ADDR
// if not tmp then
15763: LD_VAR 0 2
15767: NOT
15768: IFFALSE 15772
// exit ;
15770: GO 15822
// CenterNowOnUnits ( tmp [ 1 ] ) ;
15772: LD_VAR 0 2
15776: PUSH
15777: LD_INT 1
15779: ARRAY
15780: PPUSH
15781: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
15785: LD_VAR 0 2
15789: PUSH
15790: LD_INT 1
15792: ARRAY
15793: PPUSH
15794: CALL_OW 65
// end ; 5 .. 7 :
15798: GO 15822
15800: LD_INT 5
15802: DOUBLE
15803: GREATEREQUAL
15804: IFFALSE 15812
15806: LD_INT 7
15808: DOUBLE
15809: LESSEQUAL
15810: IFTRUE 15814
15812: GO 15821
15814: POP
// StreamSibBomb ; end ;
15815: CALL 12003 0 0
15819: GO 15822
15821: POP
// end ;
15822: PPOPN 3
15824: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15825: LD_EXP 40
15829: IFFALSE 15837
15831: PUSH
15832: LD_EXP 90
15836: AND
15837: IFFALSE 15993
15839: GO 15841
15841: DISABLE
15842: LD_INT 0
15844: PPUSH
15845: PPUSH
15846: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15847: LD_ADDR_VAR 0 2
15851: PUSH
15852: LD_INT 81
15854: PUSH
15855: LD_OWVAR 2
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PUSH
15864: LD_INT 2
15866: PUSH
15867: LD_INT 21
15869: PUSH
15870: LD_INT 1
15872: PUSH
15873: EMPTY
15874: LIST
15875: LIST
15876: PUSH
15877: LD_INT 21
15879: PUSH
15880: LD_INT 2
15882: PUSH
15883: EMPTY
15884: LIST
15885: LIST
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: LIST
15891: PUSH
15892: EMPTY
15893: LIST
15894: LIST
15895: PPUSH
15896: CALL_OW 69
15900: ST_TO_ADDR
// if not tmp then
15901: LD_VAR 0 2
15905: NOT
15906: IFFALSE 15910
// exit ;
15908: GO 15993
// p := 0 ;
15910: LD_ADDR_VAR 0 3
15914: PUSH
15915: LD_INT 0
15917: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15918: LD_INT 35
15920: PPUSH
15921: CALL_OW 67
// p := p + 1 ;
15925: LD_ADDR_VAR 0 3
15929: PUSH
15930: LD_VAR 0 3
15934: PUSH
15935: LD_INT 1
15937: PLUS
15938: ST_TO_ADDR
// for i in tmp do
15939: LD_ADDR_VAR 0 1
15943: PUSH
15944: LD_VAR 0 2
15948: PUSH
15949: FOR_IN
15950: IFFALSE 15981
// if GetLives ( i ) < 1000 then
15952: LD_VAR 0 1
15956: PPUSH
15957: CALL_OW 256
15961: PUSH
15962: LD_INT 1000
15964: LESS
15965: IFFALSE 15979
// SetLives ( i , 1000 ) ;
15967: LD_VAR 0 1
15971: PPUSH
15972: LD_INT 1000
15974: PPUSH
15975: CALL_OW 234
15979: GO 15949
15981: POP
15982: POP
// until p > 20 ;
15983: LD_VAR 0 3
15987: PUSH
15988: LD_INT 20
15990: GREATER
15991: IFFALSE 15918
// end ;
15993: PPOPN 3
15995: END
// every 0 0$1 trigger StreamModeActive and sTime do
15996: LD_EXP 40
16000: IFFALSE 16008
16002: PUSH
16003: LD_EXP 91
16007: AND
16008: IFFALSE 16043
16010: GO 16012
16012: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
16013: LD_INT 28
16015: PPUSH
16016: LD_OWVAR 2
16020: PPUSH
16021: LD_INT 2
16023: PPUSH
16024: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
16028: LD_INT 30
16030: PPUSH
16031: LD_OWVAR 2
16035: PPUSH
16036: LD_INT 2
16038: PPUSH
16039: CALL_OW 322
// end ;
16043: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
16044: LD_EXP 40
16048: IFFALSE 16056
16050: PUSH
16051: LD_EXP 92
16055: AND
16056: IFFALSE 16177
16058: GO 16060
16060: DISABLE
16061: LD_INT 0
16063: PPUSH
16064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16065: LD_ADDR_VAR 0 2
16069: PUSH
16070: LD_INT 22
16072: PUSH
16073: LD_OWVAR 2
16077: PUSH
16078: EMPTY
16079: LIST
16080: LIST
16081: PUSH
16082: LD_INT 21
16084: PUSH
16085: LD_INT 1
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: PUSH
16092: LD_INT 3
16094: PUSH
16095: LD_INT 23
16097: PUSH
16098: LD_INT 0
16100: PUSH
16101: EMPTY
16102: LIST
16103: LIST
16104: PUSH
16105: EMPTY
16106: LIST
16107: LIST
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: LIST
16113: PPUSH
16114: CALL_OW 69
16118: ST_TO_ADDR
// if not tmp then
16119: LD_VAR 0 2
16123: NOT
16124: IFFALSE 16128
// exit ;
16126: GO 16177
// for i in tmp do
16128: LD_ADDR_VAR 0 1
16132: PUSH
16133: LD_VAR 0 2
16137: PUSH
16138: FOR_IN
16139: IFFALSE 16175
// begin if Crawls ( i ) then
16141: LD_VAR 0 1
16145: PPUSH
16146: CALL_OW 318
16150: IFFALSE 16161
// ComWalk ( i ) ;
16152: LD_VAR 0 1
16156: PPUSH
16157: CALL_OW 138
// SetClass ( i , 2 ) ;
16161: LD_VAR 0 1
16165: PPUSH
16166: LD_INT 2
16168: PPUSH
16169: CALL_OW 336
// end ;
16173: GO 16138
16175: POP
16176: POP
// end ;
16177: PPOPN 2
16179: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
16180: LD_EXP 40
16184: IFFALSE 16192
16186: PUSH
16187: LD_EXP 93
16191: AND
16192: IFFALSE 16482
16194: GO 16196
16196: DISABLE
16197: LD_INT 0
16199: PPUSH
16200: PPUSH
16201: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
16202: LD_OWVAR 2
16206: PPUSH
16207: LD_INT 9
16209: PPUSH
16210: LD_INT 1
16212: PPUSH
16213: LD_INT 1
16215: PPUSH
16216: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
16220: LD_INT 9
16222: PPUSH
16223: LD_OWVAR 2
16227: PPUSH
16228: CALL_OW 343
// uc_side := 9 ;
16232: LD_ADDR_OWVAR 20
16236: PUSH
16237: LD_INT 9
16239: ST_TO_ADDR
// uc_nation := 2 ;
16240: LD_ADDR_OWVAR 21
16244: PUSH
16245: LD_INT 2
16247: ST_TO_ADDR
// hc_name := Dark Warrior ;
16248: LD_ADDR_OWVAR 26
16252: PUSH
16253: LD_STRING Dark Warrior
16255: ST_TO_ADDR
// hc_gallery :=  ;
16256: LD_ADDR_OWVAR 33
16260: PUSH
16261: LD_STRING 
16263: ST_TO_ADDR
// hc_noskilllimit := true ;
16264: LD_ADDR_OWVAR 76
16268: PUSH
16269: LD_INT 1
16271: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
16272: LD_ADDR_OWVAR 31
16276: PUSH
16277: LD_INT 30
16279: PUSH
16280: LD_INT 30
16282: PUSH
16283: LD_INT 30
16285: PUSH
16286: LD_INT 30
16288: PUSH
16289: EMPTY
16290: LIST
16291: LIST
16292: LIST
16293: LIST
16294: ST_TO_ADDR
// un := CreateHuman ;
16295: LD_ADDR_VAR 0 3
16299: PUSH
16300: CALL_OW 44
16304: ST_TO_ADDR
// hc_noskilllimit := false ;
16305: LD_ADDR_OWVAR 76
16309: PUSH
16310: LD_INT 0
16312: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16313: LD_VAR 0 3
16317: PPUSH
16318: LD_INT 1
16320: PPUSH
16321: CALL_OW 51
// ToLua ( playRanger() ) ;
16325: LD_STRING playRanger()
16327: PPUSH
16328: CALL_OW 559
// p := 0 ;
16332: LD_ADDR_VAR 0 2
16336: PUSH
16337: LD_INT 0
16339: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
16340: LD_INT 35
16342: PPUSH
16343: CALL_OW 67
// p := p + 1 ;
16347: LD_ADDR_VAR 0 2
16351: PUSH
16352: LD_VAR 0 2
16356: PUSH
16357: LD_INT 1
16359: PLUS
16360: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
16361: LD_VAR 0 3
16365: PPUSH
16366: CALL_OW 256
16370: PUSH
16371: LD_INT 1000
16373: LESS
16374: IFFALSE 16388
// SetLives ( un , 1000 ) ;
16376: LD_VAR 0 3
16380: PPUSH
16381: LD_INT 1000
16383: PPUSH
16384: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
16388: LD_VAR 0 3
16392: PPUSH
16393: LD_INT 81
16395: PUSH
16396: LD_OWVAR 2
16400: PUSH
16401: EMPTY
16402: LIST
16403: LIST
16404: PUSH
16405: LD_INT 91
16407: PUSH
16408: LD_VAR 0 3
16412: PUSH
16413: LD_INT 30
16415: PUSH
16416: EMPTY
16417: LIST
16418: LIST
16419: LIST
16420: PUSH
16421: EMPTY
16422: LIST
16423: LIST
16424: PPUSH
16425: CALL_OW 69
16429: PPUSH
16430: LD_VAR 0 3
16434: PPUSH
16435: CALL_OW 74
16439: PPUSH
16440: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
16444: LD_VAR 0 2
16448: PUSH
16449: LD_INT 80
16451: GREATER
16452: IFTRUE 16465
16454: PUSH
16455: LD_VAR 0 3
16459: PPUSH
16460: CALL_OW 301
16464: OR
16465: IFFALSE 16340
// if un then
16467: LD_VAR 0 3
16471: IFFALSE 16482
// RemoveUnit ( un ) ;
16473: LD_VAR 0 3
16477: PPUSH
16478: CALL_OW 64
// end ;
16482: PPOPN 3
16484: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
16485: LD_EXP 94
16489: IFFALSE 16605
16491: GO 16493
16493: DISABLE
16494: LD_INT 0
16496: PPUSH
16497: PPUSH
16498: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
16499: LD_ADDR_VAR 0 2
16503: PUSH
16504: LD_INT 81
16506: PUSH
16507: LD_OWVAR 2
16511: PUSH
16512: EMPTY
16513: LIST
16514: LIST
16515: PUSH
16516: LD_INT 21
16518: PUSH
16519: LD_INT 1
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PPUSH
16530: CALL_OW 69
16534: ST_TO_ADDR
// ToLua ( playComputer() ) ;
16535: LD_STRING playComputer()
16537: PPUSH
16538: CALL_OW 559
// if not tmp then
16542: LD_VAR 0 2
16546: NOT
16547: IFFALSE 16551
// exit ;
16549: GO 16605
// for i in tmp do
16551: LD_ADDR_VAR 0 1
16555: PUSH
16556: LD_VAR 0 2
16560: PUSH
16561: FOR_IN
16562: IFFALSE 16603
// for j := 1 to 4 do
16564: LD_ADDR_VAR 0 3
16568: PUSH
16569: DOUBLE
16570: LD_INT 1
16572: DEC
16573: ST_TO_ADDR
16574: LD_INT 4
16576: PUSH
16577: FOR_TO
16578: IFFALSE 16599
// SetSkill ( i , j , 10 ) ;
16580: LD_VAR 0 1
16584: PPUSH
16585: LD_VAR 0 3
16589: PPUSH
16590: LD_INT 10
16592: PPUSH
16593: CALL_OW 237
16597: GO 16577
16599: POP
16600: POP
16601: GO 16561
16603: POP
16604: POP
// end ;
16605: PPOPN 3
16607: END
// every 0 0$1 trigger s30 do var i , tmp ;
16608: LD_EXP 95
16612: IFFALSE 16681
16614: GO 16616
16616: DISABLE
16617: LD_INT 0
16619: PPUSH
16620: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16621: LD_ADDR_VAR 0 2
16625: PUSH
16626: LD_INT 22
16628: PUSH
16629: LD_OWVAR 2
16633: PUSH
16634: EMPTY
16635: LIST
16636: LIST
16637: PPUSH
16638: CALL_OW 69
16642: ST_TO_ADDR
// if not tmp then
16643: LD_VAR 0 2
16647: NOT
16648: IFFALSE 16652
// exit ;
16650: GO 16681
// for i in tmp do
16652: LD_ADDR_VAR 0 1
16656: PUSH
16657: LD_VAR 0 2
16661: PUSH
16662: FOR_IN
16663: IFFALSE 16679
// SetLives ( i , 300 ) ;
16665: LD_VAR 0 1
16669: PPUSH
16670: LD_INT 300
16672: PPUSH
16673: CALL_OW 234
16677: GO 16662
16679: POP
16680: POP
// end ;
16681: PPOPN 2
16683: END
// every 0 0$1 trigger s60 do var i , tmp ;
16684: LD_EXP 96
16688: IFFALSE 16757
16690: GO 16692
16692: DISABLE
16693: LD_INT 0
16695: PPUSH
16696: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
16697: LD_ADDR_VAR 0 2
16701: PUSH
16702: LD_INT 22
16704: PUSH
16705: LD_OWVAR 2
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PPUSH
16714: CALL_OW 69
16718: ST_TO_ADDR
// if not tmp then
16719: LD_VAR 0 2
16723: NOT
16724: IFFALSE 16728
// exit ;
16726: GO 16757
// for i in tmp do
16728: LD_ADDR_VAR 0 1
16732: PUSH
16733: LD_VAR 0 2
16737: PUSH
16738: FOR_IN
16739: IFFALSE 16755
// SetLives ( i , 600 ) ;
16741: LD_VAR 0 1
16745: PPUSH
16746: LD_INT 600
16748: PPUSH
16749: CALL_OW 234
16753: GO 16738
16755: POP
16756: POP
// end ;
16757: PPOPN 2
16759: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
16760: LD_INT 0
16762: PPUSH
// case cmd of 301 :
16763: LD_VAR 0 1
16767: PUSH
16768: LD_INT 301
16770: DOUBLE
16771: EQUAL
16772: IFTRUE 16776
16774: GO 16808
16776: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
16777: LD_VAR 0 6
16781: PPUSH
16782: LD_VAR 0 7
16786: PPUSH
16787: LD_VAR 0 8
16791: PPUSH
16792: LD_VAR 0 4
16796: PPUSH
16797: LD_VAR 0 5
16801: PPUSH
16802: CALL 18021 0 5
16806: GO 16929
16808: LD_INT 302
16810: DOUBLE
16811: EQUAL
16812: IFTRUE 16816
16814: GO 16853
16816: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
16817: LD_VAR 0 6
16821: PPUSH
16822: LD_VAR 0 7
16826: PPUSH
16827: LD_VAR 0 8
16831: PPUSH
16832: LD_VAR 0 9
16836: PPUSH
16837: LD_VAR 0 4
16841: PPUSH
16842: LD_VAR 0 5
16846: PPUSH
16847: CALL 18112 0 6
16851: GO 16929
16853: LD_INT 303
16855: DOUBLE
16856: EQUAL
16857: IFTRUE 16861
16859: GO 16898
16861: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
16862: LD_VAR 0 6
16866: PPUSH
16867: LD_VAR 0 7
16871: PPUSH
16872: LD_VAR 0 8
16876: PPUSH
16877: LD_VAR 0 9
16881: PPUSH
16882: LD_VAR 0 4
16886: PPUSH
16887: LD_VAR 0 5
16891: PPUSH
16892: CALL 16934 0 6
16896: GO 16929
16898: LD_INT 304
16900: DOUBLE
16901: EQUAL
16902: IFTRUE 16906
16904: GO 16928
16906: POP
// hHackTeleport ( unit , x , y ) ; end ;
16907: LD_VAR 0 2
16911: PPUSH
16912: LD_VAR 0 4
16916: PPUSH
16917: LD_VAR 0 5
16921: PPUSH
16922: CALL 18705 0 3
16926: GO 16929
16928: POP
// end ;
16929: LD_VAR 0 12
16933: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
16934: LD_INT 0
16936: PPUSH
16937: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
16938: LD_VAR 0 1
16942: PUSH
16943: LD_INT 1
16945: LESS
16946: IFTRUE 16958
16948: PUSH
16949: LD_VAR 0 1
16953: PUSH
16954: LD_INT 3
16956: GREATER
16957: OR
16958: IFTRUE 16976
16960: PUSH
16961: LD_VAR 0 5
16965: PPUSH
16966: LD_VAR 0 6
16970: PPUSH
16971: CALL_OW 428
16975: OR
16976: IFFALSE 16980
// exit ;
16978: GO 17708
// uc_side := your_side ;
16980: LD_ADDR_OWVAR 20
16984: PUSH
16985: LD_OWVAR 2
16989: ST_TO_ADDR
// uc_nation := nation ;
16990: LD_ADDR_OWVAR 21
16994: PUSH
16995: LD_VAR 0 1
16999: ST_TO_ADDR
// bc_level = 1 ;
17000: LD_ADDR_OWVAR 43
17004: PUSH
17005: LD_INT 1
17007: ST_TO_ADDR
// case btype of 1 :
17008: LD_VAR 0 2
17012: PUSH
17013: LD_INT 1
17015: DOUBLE
17016: EQUAL
17017: IFTRUE 17021
17019: GO 17032
17021: POP
// bc_type := b_depot ; 2 :
17022: LD_ADDR_OWVAR 42
17026: PUSH
17027: LD_INT 0
17029: ST_TO_ADDR
17030: GO 17652
17032: LD_INT 2
17034: DOUBLE
17035: EQUAL
17036: IFTRUE 17040
17038: GO 17051
17040: POP
// bc_type := b_warehouse ; 3 :
17041: LD_ADDR_OWVAR 42
17045: PUSH
17046: LD_INT 1
17048: ST_TO_ADDR
17049: GO 17652
17051: LD_INT 3
17053: DOUBLE
17054: EQUAL
17055: IFTRUE 17059
17057: GO 17070
17059: POP
// bc_type := b_lab ; 4 .. 9 :
17060: LD_ADDR_OWVAR 42
17064: PUSH
17065: LD_INT 6
17067: ST_TO_ADDR
17068: GO 17652
17070: LD_INT 4
17072: DOUBLE
17073: GREATEREQUAL
17074: IFFALSE 17082
17076: LD_INT 9
17078: DOUBLE
17079: LESSEQUAL
17080: IFTRUE 17084
17082: GO 17144
17084: POP
// begin bc_type := b_lab_half ;
17085: LD_ADDR_OWVAR 42
17089: PUSH
17090: LD_INT 7
17092: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
17093: LD_ADDR_OWVAR 44
17097: PUSH
17098: LD_INT 10
17100: PUSH
17101: LD_INT 11
17103: PUSH
17104: LD_INT 12
17106: PUSH
17107: LD_INT 15
17109: PUSH
17110: LD_INT 14
17112: PUSH
17113: LD_INT 13
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: LIST
17120: LIST
17121: LIST
17122: LIST
17123: PUSH
17124: LD_VAR 0 2
17128: PUSH
17129: LD_INT 3
17131: MINUS
17132: ARRAY
17133: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
17134: LD_ADDR_OWVAR 45
17138: PUSH
17139: LD_INT 9
17141: ST_TO_ADDR
// end ; 10 .. 13 :
17142: GO 17652
17144: LD_INT 10
17146: DOUBLE
17147: GREATEREQUAL
17148: IFFALSE 17156
17150: LD_INT 13
17152: DOUBLE
17153: LESSEQUAL
17154: IFTRUE 17158
17156: GO 17235
17158: POP
// begin bc_type := b_lab_full ;
17159: LD_ADDR_OWVAR 42
17163: PUSH
17164: LD_INT 8
17166: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
17167: LD_ADDR_OWVAR 44
17171: PUSH
17172: LD_INT 10
17174: PUSH
17175: LD_INT 12
17177: PUSH
17178: LD_INT 14
17180: PUSH
17181: LD_INT 13
17183: PUSH
17184: EMPTY
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: PUSH
17190: LD_VAR 0 2
17194: PUSH
17195: LD_INT 9
17197: MINUS
17198: ARRAY
17199: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
17200: LD_ADDR_OWVAR 45
17204: PUSH
17205: LD_INT 11
17207: PUSH
17208: LD_INT 15
17210: PUSH
17211: LD_INT 12
17213: PUSH
17214: LD_INT 15
17216: PUSH
17217: EMPTY
17218: LIST
17219: LIST
17220: LIST
17221: LIST
17222: PUSH
17223: LD_VAR 0 2
17227: PUSH
17228: LD_INT 9
17230: MINUS
17231: ARRAY
17232: ST_TO_ADDR
// end ; 14 :
17233: GO 17652
17235: LD_INT 14
17237: DOUBLE
17238: EQUAL
17239: IFTRUE 17243
17241: GO 17254
17243: POP
// bc_type := b_workshop ; 15 :
17244: LD_ADDR_OWVAR 42
17248: PUSH
17249: LD_INT 2
17251: ST_TO_ADDR
17252: GO 17652
17254: LD_INT 15
17256: DOUBLE
17257: EQUAL
17258: IFTRUE 17262
17260: GO 17273
17262: POP
// bc_type := b_factory ; 16 :
17263: LD_ADDR_OWVAR 42
17267: PUSH
17268: LD_INT 3
17270: ST_TO_ADDR
17271: GO 17652
17273: LD_INT 16
17275: DOUBLE
17276: EQUAL
17277: IFTRUE 17281
17279: GO 17292
17281: POP
// bc_type := b_ext_gun ; 17 :
17282: LD_ADDR_OWVAR 42
17286: PUSH
17287: LD_INT 17
17289: ST_TO_ADDR
17290: GO 17652
17292: LD_INT 17
17294: DOUBLE
17295: EQUAL
17296: IFTRUE 17300
17298: GO 17328
17300: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
17301: LD_ADDR_OWVAR 42
17305: PUSH
17306: LD_INT 19
17308: PUSH
17309: LD_INT 23
17311: PUSH
17312: LD_INT 19
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: LIST
17319: PUSH
17320: LD_VAR 0 1
17324: ARRAY
17325: ST_TO_ADDR
17326: GO 17652
17328: LD_INT 18
17330: DOUBLE
17331: EQUAL
17332: IFTRUE 17336
17334: GO 17347
17336: POP
// bc_type := b_ext_radar ; 19 :
17337: LD_ADDR_OWVAR 42
17341: PUSH
17342: LD_INT 20
17344: ST_TO_ADDR
17345: GO 17652
17347: LD_INT 19
17349: DOUBLE
17350: EQUAL
17351: IFTRUE 17355
17353: GO 17366
17355: POP
// bc_type := b_ext_radio ; 20 :
17356: LD_ADDR_OWVAR 42
17360: PUSH
17361: LD_INT 22
17363: ST_TO_ADDR
17364: GO 17652
17366: LD_INT 20
17368: DOUBLE
17369: EQUAL
17370: IFTRUE 17374
17372: GO 17385
17374: POP
// bc_type := b_ext_siberium ; 21 :
17375: LD_ADDR_OWVAR 42
17379: PUSH
17380: LD_INT 21
17382: ST_TO_ADDR
17383: GO 17652
17385: LD_INT 21
17387: DOUBLE
17388: EQUAL
17389: IFTRUE 17393
17391: GO 17404
17393: POP
// bc_type := b_ext_computer ; 22 :
17394: LD_ADDR_OWVAR 42
17398: PUSH
17399: LD_INT 24
17401: ST_TO_ADDR
17402: GO 17652
17404: LD_INT 22
17406: DOUBLE
17407: EQUAL
17408: IFTRUE 17412
17410: GO 17423
17412: POP
// bc_type := b_ext_track ; 23 :
17413: LD_ADDR_OWVAR 42
17417: PUSH
17418: LD_INT 16
17420: ST_TO_ADDR
17421: GO 17652
17423: LD_INT 23
17425: DOUBLE
17426: EQUAL
17427: IFTRUE 17431
17429: GO 17442
17431: POP
// bc_type := b_ext_laser ; 24 :
17432: LD_ADDR_OWVAR 42
17436: PUSH
17437: LD_INT 25
17439: ST_TO_ADDR
17440: GO 17652
17442: LD_INT 24
17444: DOUBLE
17445: EQUAL
17446: IFTRUE 17450
17448: GO 17461
17450: POP
// bc_type := b_control_tower ; 25 :
17451: LD_ADDR_OWVAR 42
17455: PUSH
17456: LD_INT 36
17458: ST_TO_ADDR
17459: GO 17652
17461: LD_INT 25
17463: DOUBLE
17464: EQUAL
17465: IFTRUE 17469
17467: GO 17480
17469: POP
// bc_type := b_breastwork ; 26 :
17470: LD_ADDR_OWVAR 42
17474: PUSH
17475: LD_INT 31
17477: ST_TO_ADDR
17478: GO 17652
17480: LD_INT 26
17482: DOUBLE
17483: EQUAL
17484: IFTRUE 17488
17486: GO 17499
17488: POP
// bc_type := b_bunker ; 27 :
17489: LD_ADDR_OWVAR 42
17493: PUSH
17494: LD_INT 32
17496: ST_TO_ADDR
17497: GO 17652
17499: LD_INT 27
17501: DOUBLE
17502: EQUAL
17503: IFTRUE 17507
17505: GO 17518
17507: POP
// bc_type := b_turret ; 28 :
17508: LD_ADDR_OWVAR 42
17512: PUSH
17513: LD_INT 33
17515: ST_TO_ADDR
17516: GO 17652
17518: LD_INT 28
17520: DOUBLE
17521: EQUAL
17522: IFTRUE 17526
17524: GO 17537
17526: POP
// bc_type := b_armoury ; 29 :
17527: LD_ADDR_OWVAR 42
17531: PUSH
17532: LD_INT 4
17534: ST_TO_ADDR
17535: GO 17652
17537: LD_INT 29
17539: DOUBLE
17540: EQUAL
17541: IFTRUE 17545
17543: GO 17556
17545: POP
// bc_type := b_barracks ; 30 :
17546: LD_ADDR_OWVAR 42
17550: PUSH
17551: LD_INT 5
17553: ST_TO_ADDR
17554: GO 17652
17556: LD_INT 30
17558: DOUBLE
17559: EQUAL
17560: IFTRUE 17564
17562: GO 17575
17564: POP
// bc_type := b_solar_power ; 31 :
17565: LD_ADDR_OWVAR 42
17569: PUSH
17570: LD_INT 27
17572: ST_TO_ADDR
17573: GO 17652
17575: LD_INT 31
17577: DOUBLE
17578: EQUAL
17579: IFTRUE 17583
17581: GO 17594
17583: POP
// bc_type := b_oil_power ; 32 :
17584: LD_ADDR_OWVAR 42
17588: PUSH
17589: LD_INT 26
17591: ST_TO_ADDR
17592: GO 17652
17594: LD_INT 32
17596: DOUBLE
17597: EQUAL
17598: IFTRUE 17602
17600: GO 17613
17602: POP
// bc_type := b_siberite_power ; 33 :
17603: LD_ADDR_OWVAR 42
17607: PUSH
17608: LD_INT 28
17610: ST_TO_ADDR
17611: GO 17652
17613: LD_INT 33
17615: DOUBLE
17616: EQUAL
17617: IFTRUE 17621
17619: GO 17632
17621: POP
// bc_type := b_oil_mine ; 34 :
17622: LD_ADDR_OWVAR 42
17626: PUSH
17627: LD_INT 29
17629: ST_TO_ADDR
17630: GO 17652
17632: LD_INT 34
17634: DOUBLE
17635: EQUAL
17636: IFTRUE 17640
17638: GO 17651
17640: POP
// bc_type := b_siberite_mine ; end ;
17641: LD_ADDR_OWVAR 42
17645: PUSH
17646: LD_INT 30
17648: ST_TO_ADDR
17649: GO 17652
17651: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
17652: LD_ADDR_VAR 0 8
17656: PUSH
17657: LD_VAR 0 5
17661: PPUSH
17662: LD_VAR 0 6
17666: PPUSH
17667: LD_VAR 0 3
17671: PPUSH
17672: CALL_OW 47
17676: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
17677: LD_OWVAR 42
17681: PUSH
17682: LD_INT 32
17684: PUSH
17685: LD_INT 33
17687: PUSH
17688: EMPTY
17689: LIST
17690: LIST
17691: IN
17692: IFFALSE 17708
// PlaceWeaponTurret ( b , weapon ) ;
17694: LD_VAR 0 8
17698: PPUSH
17699: LD_VAR 0 4
17703: PPUSH
17704: CALL_OW 431
// end ;
17708: LD_VAR 0 7
17712: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
17713: LD_INT 0
17715: PPUSH
17716: PPUSH
17717: PPUSH
17718: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17719: LD_ADDR_VAR 0 4
17723: PUSH
17724: LD_INT 22
17726: PUSH
17727: LD_OWVAR 2
17731: PUSH
17732: EMPTY
17733: LIST
17734: LIST
17735: PUSH
17736: LD_INT 2
17738: PUSH
17739: LD_INT 30
17741: PUSH
17742: LD_INT 0
17744: PUSH
17745: EMPTY
17746: LIST
17747: LIST
17748: PUSH
17749: LD_INT 30
17751: PUSH
17752: LD_INT 1
17754: PUSH
17755: EMPTY
17756: LIST
17757: LIST
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: LIST
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PPUSH
17768: CALL_OW 69
17772: ST_TO_ADDR
// if not tmp then
17773: LD_VAR 0 4
17777: NOT
17778: IFFALSE 17782
// exit ;
17780: GO 17841
// for i in tmp do
17782: LD_ADDR_VAR 0 2
17786: PUSH
17787: LD_VAR 0 4
17791: PUSH
17792: FOR_IN
17793: IFFALSE 17839
// for j = 1 to 3 do
17795: LD_ADDR_VAR 0 3
17799: PUSH
17800: DOUBLE
17801: LD_INT 1
17803: DEC
17804: ST_TO_ADDR
17805: LD_INT 3
17807: PUSH
17808: FOR_TO
17809: IFFALSE 17835
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
17811: LD_VAR 0 2
17815: PPUSH
17816: CALL_OW 274
17820: PPUSH
17821: LD_VAR 0 3
17825: PPUSH
17826: LD_INT 99999
17828: PPUSH
17829: CALL_OW 277
17833: GO 17808
17835: POP
17836: POP
17837: GO 17792
17839: POP
17840: POP
// end ;
17841: LD_VAR 0 1
17845: RET
// export function hHackSetLevel10 ; var i , j ; begin
17846: LD_INT 0
17848: PPUSH
17849: PPUSH
17850: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
17851: LD_ADDR_VAR 0 2
17855: PUSH
17856: LD_INT 21
17858: PUSH
17859: LD_INT 1
17861: PUSH
17862: EMPTY
17863: LIST
17864: LIST
17865: PPUSH
17866: CALL_OW 69
17870: PUSH
17871: FOR_IN
17872: IFFALSE 17924
// if IsSelected ( i ) then
17874: LD_VAR 0 2
17878: PPUSH
17879: CALL_OW 306
17883: IFFALSE 17922
// begin for j := 1 to 4 do
17885: LD_ADDR_VAR 0 3
17889: PUSH
17890: DOUBLE
17891: LD_INT 1
17893: DEC
17894: ST_TO_ADDR
17895: LD_INT 4
17897: PUSH
17898: FOR_TO
17899: IFFALSE 17920
// SetSkill ( i , j , 10 ) ;
17901: LD_VAR 0 2
17905: PPUSH
17906: LD_VAR 0 3
17910: PPUSH
17911: LD_INT 10
17913: PPUSH
17914: CALL_OW 237
17918: GO 17898
17920: POP
17921: POP
// end ;
17922: GO 17871
17924: POP
17925: POP
// end ;
17926: LD_VAR 0 1
17930: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
17931: LD_INT 0
17933: PPUSH
17934: PPUSH
17935: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
17936: LD_ADDR_VAR 0 2
17940: PUSH
17941: LD_INT 22
17943: PUSH
17944: LD_OWVAR 2
17948: PUSH
17949: EMPTY
17950: LIST
17951: LIST
17952: PUSH
17953: LD_INT 21
17955: PUSH
17956: LD_INT 1
17958: PUSH
17959: EMPTY
17960: LIST
17961: LIST
17962: PUSH
17963: EMPTY
17964: LIST
17965: LIST
17966: PPUSH
17967: CALL_OW 69
17971: PUSH
17972: FOR_IN
17973: IFFALSE 18014
// begin for j := 1 to 4 do
17975: LD_ADDR_VAR 0 3
17979: PUSH
17980: DOUBLE
17981: LD_INT 1
17983: DEC
17984: ST_TO_ADDR
17985: LD_INT 4
17987: PUSH
17988: FOR_TO
17989: IFFALSE 18010
// SetSkill ( i , j , 10 ) ;
17991: LD_VAR 0 2
17995: PPUSH
17996: LD_VAR 0 3
18000: PPUSH
18001: LD_INT 10
18003: PPUSH
18004: CALL_OW 237
18008: GO 17988
18010: POP
18011: POP
// end ;
18012: GO 17972
18014: POP
18015: POP
// end ;
18016: LD_VAR 0 1
18020: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
18021: LD_INT 0
18023: PPUSH
// uc_side := your_side ;
18024: LD_ADDR_OWVAR 20
18028: PUSH
18029: LD_OWVAR 2
18033: ST_TO_ADDR
// uc_nation := nation ;
18034: LD_ADDR_OWVAR 21
18038: PUSH
18039: LD_VAR 0 1
18043: ST_TO_ADDR
// InitHc ;
18044: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
18048: LD_INT 0
18050: PPUSH
18051: LD_VAR 0 2
18055: PPUSH
18056: LD_VAR 0 3
18060: PPUSH
18061: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
18065: LD_VAR 0 4
18069: PPUSH
18070: LD_VAR 0 5
18074: PPUSH
18075: CALL_OW 428
18079: PUSH
18080: LD_INT 0
18082: EQUAL
18083: IFFALSE 18107
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
18085: CALL_OW 44
18089: PPUSH
18090: LD_VAR 0 4
18094: PPUSH
18095: LD_VAR 0 5
18099: PPUSH
18100: LD_INT 1
18102: PPUSH
18103: CALL_OW 48
// end ;
18107: LD_VAR 0 6
18111: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
18112: LD_INT 0
18114: PPUSH
18115: PPUSH
// uc_side := your_side ;
18116: LD_ADDR_OWVAR 20
18120: PUSH
18121: LD_OWVAR 2
18125: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
18126: LD_VAR 0 1
18130: PUSH
18131: LD_INT 1
18133: PUSH
18134: LD_INT 2
18136: PUSH
18137: LD_INT 3
18139: PUSH
18140: LD_INT 4
18142: PUSH
18143: LD_INT 5
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: LIST
18150: LIST
18151: LIST
18152: IN
18153: IFFALSE 18165
// uc_nation := nation_american else
18155: LD_ADDR_OWVAR 21
18159: PUSH
18160: LD_INT 1
18162: ST_TO_ADDR
18163: GO 18208
// if chassis in [ 11 , 12 , 13 , 14 ] then
18165: LD_VAR 0 1
18169: PUSH
18170: LD_INT 11
18172: PUSH
18173: LD_INT 12
18175: PUSH
18176: LD_INT 13
18178: PUSH
18179: LD_INT 14
18181: PUSH
18182: EMPTY
18183: LIST
18184: LIST
18185: LIST
18186: LIST
18187: IN
18188: IFFALSE 18200
// uc_nation := nation_arabian else
18190: LD_ADDR_OWVAR 21
18194: PUSH
18195: LD_INT 2
18197: ST_TO_ADDR
18198: GO 18208
// uc_nation := nation_russian ;
18200: LD_ADDR_OWVAR 21
18204: PUSH
18205: LD_INT 3
18207: ST_TO_ADDR
// vc_chassis := chassis ;
18208: LD_ADDR_OWVAR 37
18212: PUSH
18213: LD_VAR 0 1
18217: ST_TO_ADDR
// vc_engine := engine ;
18218: LD_ADDR_OWVAR 39
18222: PUSH
18223: LD_VAR 0 2
18227: ST_TO_ADDR
// vc_control := control ;
18228: LD_ADDR_OWVAR 38
18232: PUSH
18233: LD_VAR 0 3
18237: ST_TO_ADDR
// vc_weapon := weapon ;
18238: LD_ADDR_OWVAR 40
18242: PUSH
18243: LD_VAR 0 4
18247: ST_TO_ADDR
// un := CreateVehicle ;
18248: LD_ADDR_VAR 0 8
18252: PUSH
18253: CALL_OW 45
18257: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
18258: LD_VAR 0 8
18262: PPUSH
18263: LD_INT 0
18265: PPUSH
18266: LD_INT 5
18268: PPUSH
18269: CALL_OW 12
18273: PPUSH
18274: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
18278: LD_VAR 0 8
18282: PPUSH
18283: LD_VAR 0 5
18287: PPUSH
18288: LD_VAR 0 6
18292: PPUSH
18293: LD_INT 1
18295: PPUSH
18296: CALL_OW 48
// end ;
18300: LD_VAR 0 7
18304: RET
// export hInvincible ; every 1 do
18305: GO 18307
18307: DISABLE
// hInvincible := [ ] ;
18308: LD_ADDR_EXP 97
18312: PUSH
18313: EMPTY
18314: ST_TO_ADDR
18315: END
// every 10 do var i ;
18316: GO 18318
18318: DISABLE
18319: LD_INT 0
18321: PPUSH
// begin enable ;
18322: ENABLE
// if not hInvincible then
18323: LD_EXP 97
18327: NOT
18328: IFFALSE 18332
// exit ;
18330: GO 18376
// for i in hInvincible do
18332: LD_ADDR_VAR 0 1
18336: PUSH
18337: LD_EXP 97
18341: PUSH
18342: FOR_IN
18343: IFFALSE 18374
// if GetLives ( i ) < 1000 then
18345: LD_VAR 0 1
18349: PPUSH
18350: CALL_OW 256
18354: PUSH
18355: LD_INT 1000
18357: LESS
18358: IFFALSE 18372
// SetLives ( i , 1000 ) ;
18360: LD_VAR 0 1
18364: PPUSH
18365: LD_INT 1000
18367: PPUSH
18368: CALL_OW 234
18372: GO 18342
18374: POP
18375: POP
// end ;
18376: PPOPN 1
18378: END
// export function hHackInvincible ; var i ; begin
18379: LD_INT 0
18381: PPUSH
18382: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
18383: LD_ADDR_VAR 0 2
18387: PUSH
18388: LD_INT 2
18390: PUSH
18391: LD_INT 21
18393: PUSH
18394: LD_INT 1
18396: PUSH
18397: EMPTY
18398: LIST
18399: LIST
18400: PUSH
18401: LD_INT 21
18403: PUSH
18404: LD_INT 2
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: LIST
18415: PPUSH
18416: CALL_OW 69
18420: PUSH
18421: FOR_IN
18422: IFFALSE 18483
// if IsSelected ( i ) then
18424: LD_VAR 0 2
18428: PPUSH
18429: CALL_OW 306
18433: IFFALSE 18481
// begin if i in hInvincible then
18435: LD_VAR 0 2
18439: PUSH
18440: LD_EXP 97
18444: IN
18445: IFFALSE 18465
// hInvincible := hInvincible diff i else
18447: LD_ADDR_EXP 97
18451: PUSH
18452: LD_EXP 97
18456: PUSH
18457: LD_VAR 0 2
18461: DIFF
18462: ST_TO_ADDR
18463: GO 18481
// hInvincible := hInvincible union i ;
18465: LD_ADDR_EXP 97
18469: PUSH
18470: LD_EXP 97
18474: PUSH
18475: LD_VAR 0 2
18479: UNION
18480: ST_TO_ADDR
// end ;
18481: GO 18421
18483: POP
18484: POP
// end ;
18485: LD_VAR 0 1
18489: RET
// export function hHackInvisible ; var i , j ; begin
18490: LD_INT 0
18492: PPUSH
18493: PPUSH
18494: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
18495: LD_ADDR_VAR 0 2
18499: PUSH
18500: LD_INT 21
18502: PUSH
18503: LD_INT 1
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PPUSH
18510: CALL_OW 69
18514: PUSH
18515: FOR_IN
18516: IFFALSE 18540
// if IsSelected ( i ) then
18518: LD_VAR 0 2
18522: PPUSH
18523: CALL_OW 306
18527: IFFALSE 18538
// ComForceInvisible ( i ) ;
18529: LD_VAR 0 2
18533: PPUSH
18534: CALL_OW 496
18538: GO 18515
18540: POP
18541: POP
// end ;
18542: LD_VAR 0 1
18546: RET
// export function hHackChangeYourSide ; begin
18547: LD_INT 0
18549: PPUSH
// if your_side = 8 then
18550: LD_OWVAR 2
18554: PUSH
18555: LD_INT 8
18557: EQUAL
18558: IFFALSE 18570
// your_side := 0 else
18560: LD_ADDR_OWVAR 2
18564: PUSH
18565: LD_INT 0
18567: ST_TO_ADDR
18568: GO 18584
// your_side := your_side + 1 ;
18570: LD_ADDR_OWVAR 2
18574: PUSH
18575: LD_OWVAR 2
18579: PUSH
18580: LD_INT 1
18582: PLUS
18583: ST_TO_ADDR
// end ;
18584: LD_VAR 0 1
18588: RET
// export function hHackChangeUnitSide ; var i , j ; begin
18589: LD_INT 0
18591: PPUSH
18592: PPUSH
18593: PPUSH
// for i in all_units do
18594: LD_ADDR_VAR 0 2
18598: PUSH
18599: LD_OWVAR 3
18603: PUSH
18604: FOR_IN
18605: IFFALSE 18683
// if IsSelected ( i ) then
18607: LD_VAR 0 2
18611: PPUSH
18612: CALL_OW 306
18616: IFFALSE 18681
// begin j := GetSide ( i ) ;
18618: LD_ADDR_VAR 0 3
18622: PUSH
18623: LD_VAR 0 2
18627: PPUSH
18628: CALL_OW 255
18632: ST_TO_ADDR
// if j = 8 then
18633: LD_VAR 0 3
18637: PUSH
18638: LD_INT 8
18640: EQUAL
18641: IFFALSE 18653
// j := 0 else
18643: LD_ADDR_VAR 0 3
18647: PUSH
18648: LD_INT 0
18650: ST_TO_ADDR
18651: GO 18667
// j := j + 1 ;
18653: LD_ADDR_VAR 0 3
18657: PUSH
18658: LD_VAR 0 3
18662: PUSH
18663: LD_INT 1
18665: PLUS
18666: ST_TO_ADDR
// SetSide ( i , j ) ;
18667: LD_VAR 0 2
18671: PPUSH
18672: LD_VAR 0 3
18676: PPUSH
18677: CALL_OW 235
// end ;
18681: GO 18604
18683: POP
18684: POP
// end ;
18685: LD_VAR 0 1
18689: RET
// export function hHackFog ; begin
18690: LD_INT 0
18692: PPUSH
// FogOff ( true ) ;
18693: LD_INT 1
18695: PPUSH
18696: CALL_OW 344
// end ;
18700: LD_VAR 0 1
18704: RET
// export function hHackTeleport ( unit , x , y ) ; begin
18705: LD_INT 0
18707: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
18708: LD_VAR 0 1
18712: PPUSH
18713: LD_VAR 0 2
18717: PPUSH
18718: LD_VAR 0 3
18722: PPUSH
18723: LD_INT 1
18725: PPUSH
18726: LD_INT 1
18728: PPUSH
18729: CALL_OW 483
// CenterOnXY ( x , y ) ;
18733: LD_VAR 0 2
18737: PPUSH
18738: LD_VAR 0 3
18742: PPUSH
18743: CALL_OW 84
// end ;
18747: LD_VAR 0 4
18751: RET
// export factoryWaypoints , factoryWaypointsDrivers ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
18752: LD_INT 0
18754: PPUSH
18755: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
18756: LD_VAR 0 1
18760: NOT
18761: IFTRUE 18780
18763: PUSH
18764: LD_VAR 0 2
18768: PPUSH
18769: LD_VAR 0 3
18773: PPUSH
18774: CALL_OW 488
18778: NOT
18779: OR
18780: IFTRUE 18815
18782: PUSH
18783: LD_VAR 0 1
18787: PPUSH
18788: CALL_OW 266
18792: PUSH
18793: LD_INT 3
18795: NONEQUAL
18796: IFFALSE 18814
18798: PUSH
18799: LD_VAR 0 1
18803: PPUSH
18804: CALL_OW 247
18808: PUSH
18809: LD_INT 1
18811: EQUAL
18812: NOT
18813: AND
18814: OR
18815: IFFALSE 18819
// exit ;
18817: GO 19101
// if GetType ( factory ) = unit_human then
18819: LD_VAR 0 1
18823: PPUSH
18824: CALL_OW 247
18828: PUSH
18829: LD_INT 1
18831: EQUAL
18832: IFFALSE 18849
// factory := IsInUnit ( factory ) ;
18834: LD_ADDR_VAR 0 1
18838: PUSH
18839: LD_VAR 0 1
18843: PPUSH
18844: CALL_OW 310
18848: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
18849: LD_VAR 0 1
18853: PPUSH
18854: CALL_OW 266
18858: PUSH
18859: LD_INT 3
18861: NONEQUAL
18862: IFFALSE 18866
// exit ;
18864: GO 19101
// for i := 1 to Count ( factoryWaypoints ) do
18866: LD_ADDR_VAR 0 5
18870: PUSH
18871: DOUBLE
18872: LD_INT 1
18874: DEC
18875: ST_TO_ADDR
18876: LD_EXP 98
18880: PPUSH
18881: CALL 28805 0 1
18885: PUSH
18886: FOR_TO
18887: IFFALSE 19049
// begin if HexInfo ( x , y ) = factoryWaypoints [ i ] [ 2 ] then
18889: LD_VAR 0 2
18893: PPUSH
18894: LD_VAR 0 3
18898: PPUSH
18899: CALL_OW 428
18903: PUSH
18904: LD_EXP 98
18908: PUSH
18909: LD_VAR 0 5
18913: ARRAY
18914: PUSH
18915: LD_INT 2
18917: ARRAY
18918: EQUAL
18919: IFFALSE 18951
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
18921: LD_ADDR_EXP 98
18925: PUSH
18926: LD_EXP 98
18930: PPUSH
18931: LD_VAR 0 5
18935: PPUSH
18936: CALL_OW 3
18940: ST_TO_ADDR
// UpdateFactoryWaypoints ;
18941: CALL 19106 0 0
// exit ;
18945: POP
18946: POP
18947: GO 19101
// end else
18949: GO 19047
// if factory = factoryWaypoints [ i ] [ 2 ] then
18951: LD_VAR 0 1
18955: PUSH
18956: LD_EXP 98
18960: PUSH
18961: LD_VAR 0 5
18965: ARRAY
18966: PUSH
18967: LD_INT 2
18969: ARRAY
18970: EQUAL
18971: IFFALSE 19047
// begin factoryWaypoints := Delete ( factoryWaypoints , i ) ;
18973: LD_ADDR_EXP 98
18977: PUSH
18978: LD_EXP 98
18982: PPUSH
18983: LD_VAR 0 5
18987: PPUSH
18988: CALL_OW 3
18992: ST_TO_ADDR
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
18993: LD_ADDR_EXP 98
18997: PUSH
18998: LD_EXP 98
19002: PPUSH
19003: LD_VAR 0 1
19007: PPUSH
19008: CALL_OW 255
19012: PUSH
19013: LD_VAR 0 1
19017: PUSH
19018: LD_VAR 0 2
19022: PUSH
19023: LD_VAR 0 3
19027: PUSH
19028: EMPTY
19029: LIST
19030: LIST
19031: LIST
19032: LIST
19033: PPUSH
19034: CALL 64771 0 2
19038: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19039: CALL 19106 0 0
// exit ;
19043: POP
19044: POP
19045: GO 19101
// end ; end ;
19047: GO 18886
19049: POP
19050: POP
// factoryWaypoints := Join ( factoryWaypoints , [ GetSide ( factory ) , factory , x , y ] ) ;
19051: LD_ADDR_EXP 98
19055: PUSH
19056: LD_EXP 98
19060: PPUSH
19061: LD_VAR 0 1
19065: PPUSH
19066: CALL_OW 255
19070: PUSH
19071: LD_VAR 0 1
19075: PUSH
19076: LD_VAR 0 2
19080: PUSH
19081: LD_VAR 0 3
19085: PUSH
19086: EMPTY
19087: LIST
19088: LIST
19089: LIST
19090: LIST
19091: PPUSH
19092: CALL 64771 0 2
19096: ST_TO_ADDR
// UpdateFactoryWaypoints ;
19097: CALL 19106 0 0
// end ;
19101: LD_VAR 0 4
19105: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
19106: LD_INT 0
19108: PPUSH
19109: PPUSH
19110: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
19111: LD_STRING resetFactoryWaypoint();
19113: PPUSH
19114: CALL_OW 559
// if factoryWaypoints then
19118: LD_EXP 98
19122: IFFALSE 19243
// begin list := factoryWaypoints ;
19124: LD_ADDR_VAR 0 3
19128: PUSH
19129: LD_EXP 98
19133: ST_TO_ADDR
// for i := 1 to list do
19134: LD_ADDR_VAR 0 2
19138: PUSH
19139: DOUBLE
19140: LD_INT 1
19142: DEC
19143: ST_TO_ADDR
19144: LD_VAR 0 3
19148: PUSH
19149: FOR_TO
19150: IFFALSE 19241
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19152: LD_STRING setFactoryWaypointXY(
19154: PUSH
19155: LD_VAR 0 3
19159: PUSH
19160: LD_VAR 0 2
19164: ARRAY
19165: PUSH
19166: LD_INT 1
19168: ARRAY
19169: STR
19170: PUSH
19171: LD_STRING ,
19173: STR
19174: PUSH
19175: LD_VAR 0 3
19179: PUSH
19180: LD_VAR 0 2
19184: ARRAY
19185: PUSH
19186: LD_INT 2
19188: ARRAY
19189: STR
19190: PUSH
19191: LD_STRING ,
19193: STR
19194: PUSH
19195: LD_VAR 0 3
19199: PUSH
19200: LD_VAR 0 2
19204: ARRAY
19205: PUSH
19206: LD_INT 3
19208: ARRAY
19209: STR
19210: PUSH
19211: LD_STRING ,
19213: STR
19214: PUSH
19215: LD_VAR 0 3
19219: PUSH
19220: LD_VAR 0 2
19224: ARRAY
19225: PUSH
19226: LD_INT 4
19228: ARRAY
19229: STR
19230: PUSH
19231: LD_STRING )
19233: STR
19234: PPUSH
19235: CALL_OW 559
19239: GO 19149
19241: POP
19242: POP
// end ; end ;
19243: LD_VAR 0 1
19247: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
19248: LD_INT 0
19250: PPUSH
// if HexInfo ( x , y ) = warehouse then
19251: LD_VAR 0 2
19255: PPUSH
19256: LD_VAR 0 3
19260: PPUSH
19261: CALL_OW 428
19265: PUSH
19266: LD_VAR 0 1
19270: EQUAL
19271: IFFALSE 19298
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
19273: LD_ADDR_EXP 100
19277: PUSH
19278: LD_EXP 100
19282: PPUSH
19283: LD_VAR 0 1
19287: PPUSH
19288: LD_INT 0
19290: PPUSH
19291: CALL_OW 1
19295: ST_TO_ADDR
19296: GO 19349
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
19298: LD_ADDR_EXP 100
19302: PUSH
19303: LD_EXP 100
19307: PPUSH
19308: LD_VAR 0 1
19312: PPUSH
19313: LD_VAR 0 1
19317: PPUSH
19318: CALL_OW 255
19322: PUSH
19323: LD_VAR 0 1
19327: PUSH
19328: LD_VAR 0 2
19332: PUSH
19333: LD_VAR 0 3
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: LIST
19342: LIST
19343: PPUSH
19344: CALL_OW 1
19348: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
19349: CALL 19358 0 0
// end ;
19353: LD_VAR 0 4
19357: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
19358: LD_INT 0
19360: PPUSH
19361: PPUSH
19362: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
19363: LD_STRING resetWarehouseGatheringPoints();
19365: PPUSH
19366: CALL_OW 559
// if warehouseGatheringPoints then
19370: LD_EXP 100
19374: IFFALSE 19500
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
19376: LD_ADDR_VAR 0 3
19380: PUSH
19381: LD_EXP 100
19385: PPUSH
19386: CALL 68705 0 1
19390: ST_TO_ADDR
// for i := 1 to list do
19391: LD_ADDR_VAR 0 2
19395: PUSH
19396: DOUBLE
19397: LD_INT 1
19399: DEC
19400: ST_TO_ADDR
19401: LD_VAR 0 3
19405: PUSH
19406: FOR_TO
19407: IFFALSE 19498
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
19409: LD_STRING setWarehouseGatheringPointXY(
19411: PUSH
19412: LD_VAR 0 3
19416: PUSH
19417: LD_VAR 0 2
19421: ARRAY
19422: PUSH
19423: LD_INT 1
19425: ARRAY
19426: STR
19427: PUSH
19428: LD_STRING ,
19430: STR
19431: PUSH
19432: LD_VAR 0 3
19436: PUSH
19437: LD_VAR 0 2
19441: ARRAY
19442: PUSH
19443: LD_INT 2
19445: ARRAY
19446: STR
19447: PUSH
19448: LD_STRING ,
19450: STR
19451: PUSH
19452: LD_VAR 0 3
19456: PUSH
19457: LD_VAR 0 2
19461: ARRAY
19462: PUSH
19463: LD_INT 3
19465: ARRAY
19466: STR
19467: PUSH
19468: LD_STRING ,
19470: STR
19471: PUSH
19472: LD_VAR 0 3
19476: PUSH
19477: LD_VAR 0 2
19481: ARRAY
19482: PUSH
19483: LD_INT 4
19485: ARRAY
19486: STR
19487: PUSH
19488: LD_STRING )
19490: STR
19491: PPUSH
19492: CALL_OW 559
19496: GO 19406
19498: POP
19499: POP
// end ; end ;
19500: LD_VAR 0 1
19504: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
19505: LD_EXP 100
19509: IFFALSE 20204
19511: GO 19513
19513: DISABLE
19514: LD_INT 0
19516: PPUSH
19517: PPUSH
19518: PPUSH
19519: PPUSH
19520: PPUSH
19521: PPUSH
19522: PPUSH
19523: PPUSH
19524: PPUSH
// begin enable ;
19525: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
19526: LD_ADDR_VAR 0 3
19530: PUSH
19531: LD_EXP 100
19535: PPUSH
19536: CALL 68705 0 1
19540: ST_TO_ADDR
// if not list then
19541: LD_VAR 0 3
19545: NOT
19546: IFFALSE 19550
// exit ;
19548: GO 20204
// for i := 1 to list do
19550: LD_ADDR_VAR 0 1
19554: PUSH
19555: DOUBLE
19556: LD_INT 1
19558: DEC
19559: ST_TO_ADDR
19560: LD_VAR 0 3
19564: PUSH
19565: FOR_TO
19566: IFFALSE 20202
// begin depot := list [ i ] [ 2 ] ;
19568: LD_ADDR_VAR 0 8
19572: PUSH
19573: LD_VAR 0 3
19577: PUSH
19578: LD_VAR 0 1
19582: ARRAY
19583: PUSH
19584: LD_INT 2
19586: ARRAY
19587: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
19588: LD_ADDR_VAR 0 5
19592: PUSH
19593: LD_VAR 0 3
19597: PUSH
19598: LD_VAR 0 1
19602: ARRAY
19603: PUSH
19604: LD_INT 1
19606: ARRAY
19607: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
19608: LD_VAR 0 8
19612: PPUSH
19613: CALL_OW 301
19617: IFTRUE 19636
19619: PUSH
19620: LD_VAR 0 5
19624: PUSH
19625: LD_VAR 0 8
19629: PPUSH
19630: CALL_OW 255
19634: NONEQUAL
19635: OR
19636: IFFALSE 19665
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
19638: LD_ADDR_EXP 100
19642: PUSH
19643: LD_EXP 100
19647: PPUSH
19648: LD_VAR 0 8
19652: PPUSH
19653: LD_INT 0
19655: PPUSH
19656: CALL_OW 1
19660: ST_TO_ADDR
// exit ;
19661: POP
19662: POP
19663: GO 20204
// end ; x := list [ i ] [ 3 ] ;
19665: LD_ADDR_VAR 0 6
19669: PUSH
19670: LD_VAR 0 3
19674: PUSH
19675: LD_VAR 0 1
19679: ARRAY
19680: PUSH
19681: LD_INT 3
19683: ARRAY
19684: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
19685: LD_ADDR_VAR 0 7
19689: PUSH
19690: LD_VAR 0 3
19694: PUSH
19695: LD_VAR 0 1
19699: ARRAY
19700: PUSH
19701: LD_INT 4
19703: ARRAY
19704: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
19705: LD_ADDR_VAR 0 9
19709: PUSH
19710: LD_VAR 0 6
19714: PPUSH
19715: LD_VAR 0 7
19719: PPUSH
19720: LD_INT 16
19722: PPUSH
19723: CALL 67279 0 3
19727: ST_TO_ADDR
// if not cratesNearbyPoint then
19728: LD_VAR 0 9
19732: NOT
19733: IFFALSE 19739
// exit ;
19735: POP
19736: POP
19737: GO 20204
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
19739: LD_ADDR_VAR 0 4
19743: PUSH
19744: LD_INT 22
19746: PUSH
19747: LD_VAR 0 5
19751: PUSH
19752: EMPTY
19753: LIST
19754: LIST
19755: PUSH
19756: LD_INT 3
19758: PUSH
19759: LD_INT 60
19761: PUSH
19762: EMPTY
19763: LIST
19764: PUSH
19765: EMPTY
19766: LIST
19767: LIST
19768: PUSH
19769: LD_INT 91
19771: PUSH
19772: LD_VAR 0 8
19776: PUSH
19777: LD_INT 6
19779: PUSH
19780: EMPTY
19781: LIST
19782: LIST
19783: LIST
19784: PUSH
19785: LD_INT 2
19787: PUSH
19788: LD_INT 25
19790: PUSH
19791: LD_INT 2
19793: PUSH
19794: EMPTY
19795: LIST
19796: LIST
19797: PUSH
19798: LD_INT 25
19800: PUSH
19801: LD_INT 16
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: LIST
19812: PUSH
19813: EMPTY
19814: LIST
19815: LIST
19816: LIST
19817: LIST
19818: PPUSH
19819: CALL_OW 69
19823: PUSH
19824: LD_VAR 0 8
19828: PPUSH
19829: CALL_OW 313
19833: PPUSH
19834: LD_INT 3
19836: PUSH
19837: LD_INT 60
19839: PUSH
19840: EMPTY
19841: LIST
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 2
19849: PUSH
19850: LD_INT 25
19852: PUSH
19853: LD_INT 2
19855: PUSH
19856: EMPTY
19857: LIST
19858: LIST
19859: PUSH
19860: LD_INT 25
19862: PUSH
19863: LD_INT 16
19865: PUSH
19866: EMPTY
19867: LIST
19868: LIST
19869: PUSH
19870: EMPTY
19871: LIST
19872: LIST
19873: LIST
19874: PUSH
19875: EMPTY
19876: LIST
19877: LIST
19878: PPUSH
19879: CALL_OW 72
19883: UNION
19884: ST_TO_ADDR
// if tmp then
19885: LD_VAR 0 4
19889: IFFALSE 19969
// begin tmp := ShrinkArray ( tmp , 3 ) ;
19891: LD_ADDR_VAR 0 4
19895: PUSH
19896: LD_VAR 0 4
19900: PPUSH
19901: LD_INT 3
19903: PPUSH
19904: CALL 65086 0 2
19908: ST_TO_ADDR
// for j in tmp do
19909: LD_ADDR_VAR 0 2
19913: PUSH
19914: LD_VAR 0 4
19918: PUSH
19919: FOR_IN
19920: IFFALSE 19963
// begin if IsInUnit ( j ) then
19922: LD_VAR 0 2
19926: PPUSH
19927: CALL_OW 310
19931: IFFALSE 19942
// ComExit ( j ) ;
19933: LD_VAR 0 2
19937: PPUSH
19938: CALL 65169 0 1
// AddComCollect ( j , x , y ) ;
19942: LD_VAR 0 2
19946: PPUSH
19947: LD_VAR 0 6
19951: PPUSH
19952: LD_VAR 0 7
19956: PPUSH
19957: CALL_OW 177
// end ;
19961: GO 19919
19963: POP
19964: POP
// exit ;
19965: POP
19966: POP
19967: GO 20204
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
19969: LD_ADDR_VAR 0 4
19973: PUSH
19974: LD_INT 22
19976: PUSH
19977: LD_VAR 0 5
19981: PUSH
19982: EMPTY
19983: LIST
19984: LIST
19985: PUSH
19986: LD_INT 91
19988: PUSH
19989: LD_VAR 0 8
19993: PUSH
19994: LD_INT 8
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: LIST
20001: PUSH
20002: LD_INT 2
20004: PUSH
20005: LD_INT 34
20007: PUSH
20008: LD_INT 12
20010: PUSH
20011: EMPTY
20012: LIST
20013: LIST
20014: PUSH
20015: LD_INT 34
20017: PUSH
20018: LD_INT 51
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: PUSH
20025: LD_INT 34
20027: PUSH
20028: LD_INT 32
20030: PUSH
20031: EMPTY
20032: LIST
20033: LIST
20034: PUSH
20035: LD_INT 34
20037: PUSH
20038: LD_INT 89
20040: PUSH
20041: EMPTY
20042: LIST
20043: LIST
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: LIST
20049: LIST
20050: LIST
20051: PUSH
20052: EMPTY
20053: LIST
20054: LIST
20055: LIST
20056: PPUSH
20057: CALL_OW 69
20061: ST_TO_ADDR
// if tmp then
20062: LD_VAR 0 4
20066: IFFALSE 20200
// begin for j in tmp do
20068: LD_ADDR_VAR 0 2
20072: PUSH
20073: LD_VAR 0 4
20077: PUSH
20078: FOR_IN
20079: IFFALSE 20198
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
20081: LD_VAR 0 2
20085: PPUSH
20086: CALL_OW 262
20090: PUSH
20091: LD_INT 3
20093: EQUAL
20094: IFTRUE 20111
20096: PUSH
20097: LD_VAR 0 2
20101: PPUSH
20102: CALL_OW 261
20106: PUSH
20107: LD_INT 20
20109: GREATER
20110: OR
20111: IFFALSE 20125
20113: PUSH
20114: LD_VAR 0 2
20118: PPUSH
20119: CALL_OW 314
20123: NOT
20124: AND
20125: IFFALSE 20155
20127: PUSH
20128: LD_VAR 0 2
20132: PPUSH
20133: CALL_OW 263
20137: PUSH
20138: LD_INT 1
20140: NONEQUAL
20141: IFTRUE 20154
20143: PUSH
20144: LD_VAR 0 2
20148: PPUSH
20149: CALL_OW 311
20153: OR
20154: AND
20155: IFFALSE 20196
// begin ComCollect ( j , x , y ) ;
20157: LD_VAR 0 2
20161: PPUSH
20162: LD_VAR 0 6
20166: PPUSH
20167: LD_VAR 0 7
20171: PPUSH
20172: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
20176: LD_VAR 0 2
20180: PPUSH
20181: LD_VAR 0 8
20185: PPUSH
20186: CALL_OW 172
// exit ;
20190: POP
20191: POP
20192: POP
20193: POP
20194: GO 20204
// end ;
20196: GO 20078
20198: POP
20199: POP
// end ; end ;
20200: GO 19565
20202: POP
20203: POP
// end ; end_of_file
20204: PPOPN 9
20206: END
// export function SOS_UnitDestroyed ( un ) ; begin
20207: LD_INT 0
20209: PPUSH
// ComRadiation ( un ) ;
20210: LD_VAR 0 1
20214: PPUSH
20215: CALL 21377 0 1
// end ;
20219: LD_VAR 0 2
20223: RET
// export function SOS_UnitKamikazed ( un ) ; begin
20224: LD_INT 0
20226: PPUSH
// ComRadiation ( un ) ;
20227: LD_VAR 0 1
20231: PPUSH
20232: CALL 21377 0 1
// end ;
20236: LD_VAR 0 2
20240: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
20241: LD_INT 0
20243: PPUSH
// end ;
20244: LD_VAR 0 4
20248: RET
// export function SOS_Command ( cmd ) ; begin
20249: LD_INT 0
20251: PPUSH
// end ;
20252: LD_VAR 0 2
20256: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
20257: LD_INT 0
20259: PPUSH
// end ;
20260: LD_VAR 0 6
20264: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var i , driver , hex , weapon ; begin
20265: LD_INT 0
20267: PPUSH
20268: PPUSH
20269: PPUSH
20270: PPUSH
20271: PPUSH
// if not vehicle or not factory then
20272: LD_VAR 0 1
20276: NOT
20277: IFTRUE 20286
20279: PUSH
20280: LD_VAR 0 2
20284: NOT
20285: OR
20286: IFFALSE 20290
// exit ;
20288: GO 20952
// weapon := GetWeapon ( vehicle ) ;
20290: LD_ADDR_VAR 0 7
20294: PUSH
20295: LD_VAR 0 1
20299: PPUSH
20300: CALL_OW 264
20304: ST_TO_ADDR
// if weapon = ar_miner then
20305: LD_VAR 0 7
20309: PUSH
20310: LD_INT 81
20312: EQUAL
20313: IFFALSE 20370
// begin minersList := Replace ( minersList , minersList + 1 , vehicle ) ;
20315: LD_ADDR_EXP 109
20319: PUSH
20320: LD_EXP 109
20324: PPUSH
20325: LD_EXP 109
20329: PUSH
20330: LD_INT 1
20332: PLUS
20333: PPUSH
20334: LD_VAR 0 1
20338: PPUSH
20339: CALL_OW 1
20343: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
20344: LD_ADDR_EXP 110
20348: PUSH
20349: LD_EXP 110
20353: PPUSH
20354: LD_EXP 110
20358: PUSH
20359: LD_INT 1
20361: PLUS
20362: PPUSH
20363: EMPTY
20364: PPUSH
20365: CALL_OW 1
20369: ST_TO_ADDR
// end ; if not factoryWaypoints then
20370: LD_EXP 98
20374: NOT
20375: IFFALSE 20379
// exit ;
20377: GO 20952
// for i := 1 to Count ( factoryWaypoints ) do
20379: LD_ADDR_VAR 0 4
20383: PUSH
20384: DOUBLE
20385: LD_INT 1
20387: DEC
20388: ST_TO_ADDR
20389: LD_EXP 98
20393: PPUSH
20394: CALL 28805 0 1
20398: PUSH
20399: FOR_TO
20400: IFFALSE 20950
// if factoryWaypoints [ i ] [ 2 ] = factory then
20402: LD_EXP 98
20406: PUSH
20407: LD_VAR 0 4
20411: ARRAY
20412: PUSH
20413: LD_INT 2
20415: ARRAY
20416: PUSH
20417: LD_VAR 0 2
20421: EQUAL
20422: IFFALSE 20948
// begin if GetControl ( vehicle ) = control_manual then
20424: LD_VAR 0 1
20428: PPUSH
20429: CALL_OW 263
20433: PUSH
20434: LD_INT 1
20436: EQUAL
20437: IFFALSE 20801
// begin driver := IsDrivenBy ( vehicle ) ;
20439: LD_ADDR_VAR 0 5
20443: PUSH
20444: LD_VAR 0 1
20448: PPUSH
20449: CALL_OW 311
20453: ST_TO_ADDR
// if driver in factoryWaypointsDrivers or vehicle in factoryWaypointsDrivers then
20454: LD_VAR 0 5
20458: PUSH
20459: LD_EXP 99
20463: IN
20464: IFTRUE 20478
20466: PUSH
20467: LD_VAR 0 1
20471: PUSH
20472: LD_EXP 99
20476: IN
20477: OR
20478: IFFALSE 20484
// exit ;
20480: POP
20481: POP
20482: GO 20952
// if not HasTask ( driver ) then
20484: LD_VAR 0 5
20488: PPUSH
20489: CALL_OW 314
20493: NOT
20494: IFFALSE 20799
// begin factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , driver ) ;
20496: LD_ADDR_EXP 99
20500: PUSH
20501: LD_EXP 99
20505: PPUSH
20506: LD_VAR 0 5
20510: PPUSH
20511: CALL 64771 0 2
20515: ST_TO_ADDR
// factoryWaypointsDrivers := Join ( factoryWaypointsDrivers , vehicle ) ;
20516: LD_ADDR_EXP 99
20520: PUSH
20521: LD_EXP 99
20525: PPUSH
20526: LD_VAR 0 1
20530: PPUSH
20531: CALL 64771 0 2
20535: ST_TO_ADDR
// hex := HexInfo ( factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
20536: LD_ADDR_VAR 0 6
20540: PUSH
20541: LD_EXP 98
20545: PUSH
20546: LD_VAR 0 4
20550: ARRAY
20551: PUSH
20552: LD_INT 3
20554: ARRAY
20555: PPUSH
20556: LD_EXP 98
20560: PUSH
20561: LD_VAR 0 4
20565: ARRAY
20566: PUSH
20567: LD_INT 4
20569: ARRAY
20570: PPUSH
20571: CALL_OW 428
20575: ST_TO_ADDR
// if hex then
20576: LD_VAR 0 6
20580: IFFALSE 20598
// ComMoveUnit ( driver , hex ) else
20582: LD_VAR 0 5
20586: PPUSH
20587: LD_VAR 0 6
20591: PPUSH
20592: CALL_OW 112
20596: GO 20682
// if GetDistUnitXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) > 0 then
20598: LD_VAR 0 1
20602: PPUSH
20603: LD_EXP 98
20607: PUSH
20608: LD_VAR 0 4
20612: ARRAY
20613: PUSH
20614: LD_INT 3
20616: ARRAY
20617: PPUSH
20618: LD_EXP 98
20622: PUSH
20623: LD_VAR 0 4
20627: ARRAY
20628: PUSH
20629: LD_INT 4
20631: ARRAY
20632: PPUSH
20633: CALL_OW 297
20637: PUSH
20638: LD_INT 0
20640: GREATER
20641: IFFALSE 20682
// ComMoveXY ( driver , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
20643: LD_VAR 0 5
20647: PPUSH
20648: LD_EXP 98
20652: PUSH
20653: LD_VAR 0 4
20657: ARRAY
20658: PUSH
20659: LD_INT 3
20661: ARRAY
20662: PPUSH
20663: LD_EXP 98
20667: PUSH
20668: LD_VAR 0 4
20672: ARRAY
20673: PUSH
20674: LD_INT 4
20676: ARRAY
20677: PPUSH
20678: CALL_OW 111
// AddComExitVehicle ( driver ) ;
20682: LD_VAR 0 5
20686: PPUSH
20687: CALL_OW 181
// if Multiplayer then
20691: LD_OWVAR 4
20695: IFFALSE 20744
// begin repeat wait ( 10 ) ;
20697: LD_INT 10
20699: PPUSH
20700: CALL_OW 67
// until not IsInUnit ( driver ) ;
20704: LD_VAR 0 5
20708: PPUSH
20709: CALL_OW 310
20713: NOT
20714: IFFALSE 20697
// if not HasTask ( driver ) then
20716: LD_VAR 0 5
20720: PPUSH
20721: CALL_OW 314
20725: NOT
20726: IFFALSE 20742
// ComEnterUnit ( driver , factory ) ;
20728: LD_VAR 0 5
20732: PPUSH
20733: LD_VAR 0 2
20737: PPUSH
20738: CALL_OW 120
// end else
20742: GO 20758
// AddComEnterUnit ( driver , factory ) ;
20744: LD_VAR 0 5
20748: PPUSH
20749: LD_VAR 0 2
20753: PPUSH
20754: CALL_OW 180
// wait ( 0 0$1 ) ;
20758: LD_INT 35
20760: PPUSH
20761: CALL_OW 67
// factoryWaypointsDrivers := factoryWaypointsDrivers diff driver ;
20765: LD_ADDR_EXP 99
20769: PUSH
20770: LD_EXP 99
20774: PUSH
20775: LD_VAR 0 5
20779: DIFF
20780: ST_TO_ADDR
// factoryWaypointsDrivers := factoryWaypointsDrivers diff vehicle ;
20781: LD_ADDR_EXP 99
20785: PUSH
20786: LD_EXP 99
20790: PUSH
20791: LD_VAR 0 1
20795: DIFF
20796: ST_TO_ADDR
// break ;
20797: GO 20950
// end ; end else
20799: GO 20948
// if GetControl ( vehicle ) = control_remote then
20801: LD_VAR 0 1
20805: PPUSH
20806: CALL_OW 263
20810: PUSH
20811: LD_INT 2
20813: EQUAL
20814: IFFALSE 20900
// begin wait ( 0 0$2 ) ;
20816: LD_INT 70
20818: PPUSH
20819: CALL_OW 67
// repeat wait ( 10 ) ;
20823: LD_INT 10
20825: PPUSH
20826: CALL_OW 67
// Connect ( vehicle ) ;
20830: LD_VAR 0 1
20834: PPUSH
20835: CALL 35083 0 1
// until IsControledBy ( vehicle ) ;
20839: LD_VAR 0 1
20843: PPUSH
20844: CALL_OW 312
20848: IFFALSE 20823
// wait ( 10 ) ;
20850: LD_INT 10
20852: PPUSH
20853: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
20857: LD_VAR 0 1
20861: PPUSH
20862: LD_EXP 98
20866: PUSH
20867: LD_VAR 0 4
20871: ARRAY
20872: PUSH
20873: LD_INT 3
20875: ARRAY
20876: PPUSH
20877: LD_EXP 98
20881: PUSH
20882: LD_VAR 0 4
20886: ARRAY
20887: PUSH
20888: LD_INT 4
20890: ARRAY
20891: PPUSH
20892: CALL_OW 111
// break ;
20896: GO 20950
// end else
20898: GO 20948
// begin wait ( 0 0$3 ) ;
20900: LD_INT 105
20902: PPUSH
20903: CALL_OW 67
// ComMoveXY ( vehicle , factoryWaypoints [ i ] [ 3 ] , factoryWaypoints [ i ] [ 4 ] ) ;
20907: LD_VAR 0 1
20911: PPUSH
20912: LD_EXP 98
20916: PUSH
20917: LD_VAR 0 4
20921: ARRAY
20922: PUSH
20923: LD_INT 3
20925: ARRAY
20926: PPUSH
20927: LD_EXP 98
20931: PUSH
20932: LD_VAR 0 4
20936: ARRAY
20937: PUSH
20938: LD_INT 4
20940: ARRAY
20941: PPUSH
20942: CALL_OW 111
// break ;
20946: GO 20950
// end ; end ;
20948: GO 20399
20950: POP
20951: POP
// end ;
20952: LD_VAR 0 3
20956: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
20957: LD_INT 0
20959: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
20960: LD_VAR 0 1
20964: PUSH
20965: LD_INT 250
20967: EQUAL
20968: IFFALSE 20985
20970: PUSH
20971: LD_VAR 0 2
20975: PPUSH
20976: CALL_OW 264
20980: PUSH
20981: LD_INT 81
20983: EQUAL
20984: AND
20985: IFFALSE 21006
// MinerPlaceMine ( unit , x , y ) ;
20987: LD_VAR 0 2
20991: PPUSH
20992: LD_VAR 0 4
20996: PPUSH
20997: LD_VAR 0 5
21001: PPUSH
21002: CALL 24287 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
21006: LD_VAR 0 1
21010: PUSH
21011: LD_INT 251
21013: EQUAL
21014: IFFALSE 21031
21016: PUSH
21017: LD_VAR 0 2
21021: PPUSH
21022: CALL_OW 264
21026: PUSH
21027: LD_INT 81
21029: EQUAL
21030: AND
21031: IFFALSE 21052
// MinerDetonateMine ( unit , x , y ) ;
21033: LD_VAR 0 2
21037: PPUSH
21038: LD_VAR 0 4
21042: PPUSH
21043: LD_VAR 0 5
21047: PPUSH
21048: CALL 24694 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
21052: LD_VAR 0 1
21056: PUSH
21057: LD_INT 252
21059: EQUAL
21060: IFFALSE 21077
21062: PUSH
21063: LD_VAR 0 2
21067: PPUSH
21068: CALL_OW 264
21072: PUSH
21073: LD_INT 81
21075: EQUAL
21076: AND
21077: IFFALSE 21098
// MinerCreateMinefield ( unit , x , y ) ;
21079: LD_VAR 0 2
21083: PPUSH
21084: LD_VAR 0 4
21088: PPUSH
21089: LD_VAR 0 5
21093: PPUSH
21094: CALL 24926 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
21098: LD_VAR 0 1
21102: PUSH
21103: LD_INT 253
21105: EQUAL
21106: IFFALSE 21123
21108: PUSH
21109: LD_VAR 0 2
21113: PPUSH
21114: CALL_OW 257
21118: PUSH
21119: LD_INT 5
21121: EQUAL
21122: AND
21123: IFFALSE 21144
// ComBinocular ( unit , x , y ) ;
21125: LD_VAR 0 2
21129: PPUSH
21130: LD_VAR 0 4
21134: PPUSH
21135: LD_VAR 0 5
21139: PPUSH
21140: CALL 25301 0 3
// if selectedUnit then
21144: LD_VAR 0 3
21148: IFFALSE 21208
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
21150: LD_VAR 0 1
21154: PUSH
21155: LD_INT 254
21157: EQUAL
21158: IFFALSE 21175
21160: PUSH
21161: LD_VAR 0 2
21165: PPUSH
21166: CALL_OW 264
21170: PUSH
21171: LD_INT 99
21173: EQUAL
21174: AND
21175: IFFALSE 21192
21177: PUSH
21178: LD_VAR 0 3
21182: PPUSH
21183: CALL_OW 263
21187: PUSH
21188: LD_INT 3
21190: EQUAL
21191: AND
21192: IFFALSE 21208
// HackDestroyVehicle ( unit , selectedUnit ) ;
21194: LD_VAR 0 2
21198: PPUSH
21199: LD_VAR 0 3
21203: PPUSH
21204: CALL 23498 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
21208: LD_VAR 0 1
21212: PUSH
21213: LD_INT 255
21215: EQUAL
21216: IFFALSE 21240
21218: PUSH
21219: LD_VAR 0 2
21223: PPUSH
21224: CALL_OW 264
21228: PUSH
21229: LD_INT 14
21231: PUSH
21232: LD_INT 53
21234: PUSH
21235: EMPTY
21236: LIST
21237: LIST
21238: IN
21239: AND
21240: IFFALSE 21258
21242: PUSH
21243: LD_VAR 0 4
21247: PPUSH
21248: LD_VAR 0 5
21252: PPUSH
21253: CALL_OW 488
21257: AND
21258: IFFALSE 21282
// CutTreeXYR ( unit , x , y , 12 ) ;
21260: LD_VAR 0 2
21264: PPUSH
21265: LD_VAR 0 4
21269: PPUSH
21270: LD_VAR 0 5
21274: PPUSH
21275: LD_INT 12
21277: PPUSH
21278: CALL 21473 0 4
// if cmd = 256 then
21282: LD_VAR 0 1
21286: PUSH
21287: LD_INT 256
21289: EQUAL
21290: IFFALSE 21311
// SetFactoryWaypoint ( unit , x , y ) ;
21292: LD_VAR 0 2
21296: PPUSH
21297: LD_VAR 0 4
21301: PPUSH
21302: LD_VAR 0 5
21306: PPUSH
21307: CALL 18752 0 3
// if cmd = 257 then
21311: LD_VAR 0 1
21315: PUSH
21316: LD_INT 257
21318: EQUAL
21319: IFFALSE 21340
// SetWarehouseGatheringPoint ( unit , x , y ) ;
21321: LD_VAR 0 2
21325: PPUSH
21326: LD_VAR 0 4
21330: PPUSH
21331: LD_VAR 0 5
21335: PPUSH
21336: CALL 19248 0 3
// if cmd = 258 then
21340: LD_VAR 0 1
21344: PUSH
21345: LD_INT 258
21347: EQUAL
21348: IFFALSE 21372
// BurnTreeXYR ( unit , x , y , 8 ) ;
21350: LD_VAR 0 2
21354: PPUSH
21355: LD_VAR 0 4
21359: PPUSH
21360: LD_VAR 0 5
21364: PPUSH
21365: LD_INT 8
21367: PPUSH
21368: CALL 21873 0 4
// end ;
21372: LD_VAR 0 6
21376: RET
// export function ComRadiation ( un ) ; var eff ; begin
21377: LD_INT 0
21379: PPUSH
21380: PPUSH
// if GetWeapon ( un ) <> ar_bio_bomb then
21381: LD_VAR 0 1
21385: PPUSH
21386: CALL_OW 264
21390: PUSH
21391: LD_INT 91
21393: NONEQUAL
21394: IFFALSE 21398
// exit ;
21396: GO 21468
// if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
21398: LD_INT 68
21400: PPUSH
21401: LD_VAR 0 1
21405: PPUSH
21406: CALL_OW 255
21410: PPUSH
21411: CALL_OW 321
21415: PUSH
21416: LD_INT 2
21418: EQUAL
21419: IFFALSE 21431
// eff := 50 else
21421: LD_ADDR_VAR 0 3
21425: PUSH
21426: LD_INT 50
21428: ST_TO_ADDR
21429: GO 21439
// eff := 25 ;
21431: LD_ADDR_VAR 0 3
21435: PUSH
21436: LD_INT 25
21438: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
21439: LD_VAR 0 1
21443: PPUSH
21444: CALL_OW 250
21448: PPUSH
21449: LD_VAR 0 1
21453: PPUSH
21454: CALL_OW 251
21458: PPUSH
21459: LD_VAR 0 3
21463: PPUSH
21464: CALL_OW 495
// end ;
21468: LD_VAR 0 2
21472: RET
// export function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
21473: LD_INT 0
21475: PPUSH
21476: PPUSH
21477: PPUSH
21478: PPUSH
21479: PPUSH
21480: PPUSH
21481: PPUSH
21482: PPUSH
21483: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
21484: LD_VAR 0 1
21488: PPUSH
21489: CALL_OW 302
21493: NOT
21494: IFTRUE 21513
21496: PUSH
21497: LD_VAR 0 2
21501: PPUSH
21502: LD_VAR 0 3
21506: PPUSH
21507: CALL_OW 488
21511: NOT
21512: OR
21513: IFTRUE 21522
21515: PUSH
21516: LD_VAR 0 4
21520: NOT
21521: OR
21522: IFFALSE 21526
// exit ;
21524: GO 21868
// list := [ ] ;
21526: LD_ADDR_VAR 0 13
21530: PUSH
21531: EMPTY
21532: ST_TO_ADDR
// if x - r < 0 then
21533: LD_VAR 0 2
21537: PUSH
21538: LD_VAR 0 4
21542: MINUS
21543: PUSH
21544: LD_INT 0
21546: LESS
21547: IFFALSE 21559
// min_x := 0 else
21549: LD_ADDR_VAR 0 7
21553: PUSH
21554: LD_INT 0
21556: ST_TO_ADDR
21557: GO 21575
// min_x := x - r ;
21559: LD_ADDR_VAR 0 7
21563: PUSH
21564: LD_VAR 0 2
21568: PUSH
21569: LD_VAR 0 4
21573: MINUS
21574: ST_TO_ADDR
// if y - r < 0 then
21575: LD_VAR 0 3
21579: PUSH
21580: LD_VAR 0 4
21584: MINUS
21585: PUSH
21586: LD_INT 0
21588: LESS
21589: IFFALSE 21601
// min_y := 0 else
21591: LD_ADDR_VAR 0 8
21595: PUSH
21596: LD_INT 0
21598: ST_TO_ADDR
21599: GO 21617
// min_y := y - r ;
21601: LD_ADDR_VAR 0 8
21605: PUSH
21606: LD_VAR 0 3
21610: PUSH
21611: LD_VAR 0 4
21615: MINUS
21616: ST_TO_ADDR
// max_x := x + r ;
21617: LD_ADDR_VAR 0 9
21621: PUSH
21622: LD_VAR 0 2
21626: PUSH
21627: LD_VAR 0 4
21631: PLUS
21632: ST_TO_ADDR
// max_y := y + r ;
21633: LD_ADDR_VAR 0 10
21637: PUSH
21638: LD_VAR 0 3
21642: PUSH
21643: LD_VAR 0 4
21647: PLUS
21648: ST_TO_ADDR
// for _x = min_x to max_x do
21649: LD_ADDR_VAR 0 11
21653: PUSH
21654: DOUBLE
21655: LD_VAR 0 7
21659: DEC
21660: ST_TO_ADDR
21661: LD_VAR 0 9
21665: PUSH
21666: FOR_TO
21667: IFFALSE 21786
// for _y = min_y to max_y do
21669: LD_ADDR_VAR 0 12
21673: PUSH
21674: DOUBLE
21675: LD_VAR 0 8
21679: DEC
21680: ST_TO_ADDR
21681: LD_VAR 0 10
21685: PUSH
21686: FOR_TO
21687: IFFALSE 21782
// begin if not ValidHex ( _x , _y ) then
21689: LD_VAR 0 11
21693: PPUSH
21694: LD_VAR 0 12
21698: PPUSH
21699: CALL_OW 488
21703: NOT
21704: IFFALSE 21708
// continue ;
21706: GO 21686
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
21708: LD_VAR 0 11
21712: PPUSH
21713: LD_VAR 0 12
21717: PPUSH
21718: CALL_OW 351
21722: IFFALSE 21740
21724: PUSH
21725: LD_VAR 0 11
21729: PPUSH
21730: LD_VAR 0 12
21734: PPUSH
21735: CALL_OW 554
21739: AND
21740: IFFALSE 21780
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
21742: LD_ADDR_VAR 0 13
21746: PUSH
21747: LD_VAR 0 13
21751: PPUSH
21752: LD_VAR 0 13
21756: PUSH
21757: LD_INT 1
21759: PLUS
21760: PPUSH
21761: LD_VAR 0 11
21765: PUSH
21766: LD_VAR 0 12
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PPUSH
21775: CALL_OW 2
21779: ST_TO_ADDR
// end ;
21780: GO 21686
21782: POP
21783: POP
21784: GO 21666
21786: POP
21787: POP
// if not list then
21788: LD_VAR 0 13
21792: NOT
21793: IFFALSE 21797
// exit ;
21795: GO 21868
// for i in list do
21797: LD_ADDR_VAR 0 6
21801: PUSH
21802: LD_VAR 0 13
21806: PUSH
21807: FOR_IN
21808: IFFALSE 21866
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
21810: LD_VAR 0 1
21814: PPUSH
21815: LD_STRING M
21817: PUSH
21818: LD_VAR 0 6
21822: PUSH
21823: LD_INT 1
21825: ARRAY
21826: PUSH
21827: LD_VAR 0 6
21831: PUSH
21832: LD_INT 2
21834: ARRAY
21835: PUSH
21836: LD_INT 0
21838: PUSH
21839: LD_INT 0
21841: PUSH
21842: LD_INT 0
21844: PUSH
21845: LD_INT 0
21847: PUSH
21848: EMPTY
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: PUSH
21857: EMPTY
21858: LIST
21859: PPUSH
21860: CALL_OW 447
21864: GO 21807
21866: POP
21867: POP
// end ;
21868: LD_VAR 0 5
21872: RET
// export function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
21873: LD_INT 0
21875: PPUSH
21876: PPUSH
21877: PPUSH
21878: PPUSH
21879: PPUSH
21880: PPUSH
21881: PPUSH
21882: PPUSH
21883: PPUSH
21884: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
21885: LD_VAR 0 1
21889: PPUSH
21890: CALL_OW 302
21894: NOT
21895: IFTRUE 21914
21897: PUSH
21898: LD_VAR 0 2
21902: PPUSH
21903: LD_VAR 0 3
21907: PPUSH
21908: CALL_OW 488
21912: NOT
21913: OR
21914: IFTRUE 21923
21916: PUSH
21917: LD_VAR 0 4
21921: NOT
21922: OR
21923: IFFALSE 21927
// exit ;
21925: GO 22444
// list := [ ] ;
21927: LD_ADDR_VAR 0 13
21931: PUSH
21932: EMPTY
21933: ST_TO_ADDR
// if x - r < 0 then
21934: LD_VAR 0 2
21938: PUSH
21939: LD_VAR 0 4
21943: MINUS
21944: PUSH
21945: LD_INT 0
21947: LESS
21948: IFFALSE 21960
// min_x := 0 else
21950: LD_ADDR_VAR 0 7
21954: PUSH
21955: LD_INT 0
21957: ST_TO_ADDR
21958: GO 21976
// min_x := x - r ;
21960: LD_ADDR_VAR 0 7
21964: PUSH
21965: LD_VAR 0 2
21969: PUSH
21970: LD_VAR 0 4
21974: MINUS
21975: ST_TO_ADDR
// if y - r < 0 then
21976: LD_VAR 0 3
21980: PUSH
21981: LD_VAR 0 4
21985: MINUS
21986: PUSH
21987: LD_INT 0
21989: LESS
21990: IFFALSE 22002
// min_y := 0 else
21992: LD_ADDR_VAR 0 8
21996: PUSH
21997: LD_INT 0
21999: ST_TO_ADDR
22000: GO 22018
// min_y := y - r ;
22002: LD_ADDR_VAR 0 8
22006: PUSH
22007: LD_VAR 0 3
22011: PUSH
22012: LD_VAR 0 4
22016: MINUS
22017: ST_TO_ADDR
// max_x := x + r ;
22018: LD_ADDR_VAR 0 9
22022: PUSH
22023: LD_VAR 0 2
22027: PUSH
22028: LD_VAR 0 4
22032: PLUS
22033: ST_TO_ADDR
// max_y := y + r ;
22034: LD_ADDR_VAR 0 10
22038: PUSH
22039: LD_VAR 0 3
22043: PUSH
22044: LD_VAR 0 4
22048: PLUS
22049: ST_TO_ADDR
// for _x = min_x to max_x do
22050: LD_ADDR_VAR 0 11
22054: PUSH
22055: DOUBLE
22056: LD_VAR 0 7
22060: DEC
22061: ST_TO_ADDR
22062: LD_VAR 0 9
22066: PUSH
22067: FOR_TO
22068: IFFALSE 22187
// for _y = min_y to max_y do
22070: LD_ADDR_VAR 0 12
22074: PUSH
22075: DOUBLE
22076: LD_VAR 0 8
22080: DEC
22081: ST_TO_ADDR
22082: LD_VAR 0 10
22086: PUSH
22087: FOR_TO
22088: IFFALSE 22183
// begin if not ValidHex ( _x , _y ) then
22090: LD_VAR 0 11
22094: PPUSH
22095: LD_VAR 0 12
22099: PPUSH
22100: CALL_OW 488
22104: NOT
22105: IFFALSE 22109
// continue ;
22107: GO 22087
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
22109: LD_VAR 0 11
22113: PPUSH
22114: LD_VAR 0 12
22118: PPUSH
22119: CALL_OW 351
22123: IFFALSE 22141
22125: PUSH
22126: LD_VAR 0 11
22130: PPUSH
22131: LD_VAR 0 12
22135: PPUSH
22136: CALL_OW 554
22140: AND
22141: IFFALSE 22181
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
22143: LD_ADDR_VAR 0 13
22147: PUSH
22148: LD_VAR 0 13
22152: PPUSH
22153: LD_VAR 0 13
22157: PUSH
22158: LD_INT 1
22160: PLUS
22161: PPUSH
22162: LD_VAR 0 11
22166: PUSH
22167: LD_VAR 0 12
22171: PUSH
22172: EMPTY
22173: LIST
22174: LIST
22175: PPUSH
22176: CALL_OW 2
22180: ST_TO_ADDR
// end ;
22181: GO 22087
22183: POP
22184: POP
22185: GO 22067
22187: POP
22188: POP
// if not list then
22189: LD_VAR 0 13
22193: NOT
22194: IFFALSE 22198
// exit ;
22196: GO 22444
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
22198: LD_ADDR_VAR 0 13
22202: PUSH
22203: LD_VAR 0 1
22207: PPUSH
22208: LD_VAR 0 13
22212: PPUSH
22213: LD_INT 1
22215: PPUSH
22216: LD_INT 1
22218: PPUSH
22219: CALL 32211 0 4
22223: ST_TO_ADDR
// ComStop ( flame ) ;
22224: LD_VAR 0 1
22228: PPUSH
22229: CALL_OW 141
// for i in list do
22233: LD_ADDR_VAR 0 6
22237: PUSH
22238: LD_VAR 0 13
22242: PUSH
22243: FOR_IN
22244: IFFALSE 22275
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
22246: LD_VAR 0 1
22250: PPUSH
22251: LD_VAR 0 6
22255: PUSH
22256: LD_INT 1
22258: ARRAY
22259: PPUSH
22260: LD_VAR 0 6
22264: PUSH
22265: LD_INT 2
22267: ARRAY
22268: PPUSH
22269: CALL_OW 176
22273: GO 22243
22275: POP
22276: POP
// repeat wait ( 0 0$1 ) ;
22277: LD_INT 35
22279: PPUSH
22280: CALL_OW 67
// task := GetTaskList ( flame ) ;
22284: LD_ADDR_VAR 0 14
22288: PUSH
22289: LD_VAR 0 1
22293: PPUSH
22294: CALL_OW 437
22298: ST_TO_ADDR
// if not task then
22299: LD_VAR 0 14
22303: NOT
22304: IFFALSE 22308
// exit ;
22306: GO 22444
// if task [ 1 ] [ 1 ] <> | then
22308: LD_VAR 0 14
22312: PUSH
22313: LD_INT 1
22315: ARRAY
22316: PUSH
22317: LD_INT 1
22319: ARRAY
22320: PUSH
22321: LD_STRING |
22323: NONEQUAL
22324: IFFALSE 22328
// exit ;
22326: GO 22444
// _x := task [ 1 ] [ 2 ] ;
22328: LD_ADDR_VAR 0 11
22332: PUSH
22333: LD_VAR 0 14
22337: PUSH
22338: LD_INT 1
22340: ARRAY
22341: PUSH
22342: LD_INT 2
22344: ARRAY
22345: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
22346: LD_ADDR_VAR 0 12
22350: PUSH
22351: LD_VAR 0 14
22355: PUSH
22356: LD_INT 1
22358: ARRAY
22359: PUSH
22360: LD_INT 3
22362: ARRAY
22363: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
22364: LD_VAR 0 11
22368: PPUSH
22369: LD_VAR 0 12
22373: PPUSH
22374: CALL_OW 351
22378: NOT
22379: IFTRUE 22398
22381: PUSH
22382: LD_VAR 0 11
22386: PPUSH
22387: LD_VAR 0 12
22391: PPUSH
22392: CALL_OW 554
22396: NOT
22397: OR
22398: IFFALSE 22432
// begin task := Delete ( task , 1 ) ;
22400: LD_ADDR_VAR 0 14
22404: PUSH
22405: LD_VAR 0 14
22409: PPUSH
22410: LD_INT 1
22412: PPUSH
22413: CALL_OW 3
22417: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
22418: LD_VAR 0 1
22422: PPUSH
22423: LD_VAR 0 14
22427: PPUSH
22428: CALL_OW 446
// end ; until not HasTask ( flame ) ;
22432: LD_VAR 0 1
22436: PPUSH
22437: CALL_OW 314
22441: NOT
22442: IFFALSE 22277
// end ;
22444: LD_VAR 0 5
22448: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
22449: LD_EXP 102
22453: NOT
22454: IFFALSE 22504
22456: GO 22458
22458: DISABLE
// begin initHack := true ;
22459: LD_ADDR_EXP 102
22463: PUSH
22464: LD_INT 1
22466: ST_TO_ADDR
// hackTanks := [ ] ;
22467: LD_ADDR_EXP 103
22471: PUSH
22472: EMPTY
22473: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
22474: LD_ADDR_EXP 104
22478: PUSH
22479: EMPTY
22480: ST_TO_ADDR
// hackLimit := 3 ;
22481: LD_ADDR_EXP 105
22485: PUSH
22486: LD_INT 3
22488: ST_TO_ADDR
// hackDist := 12 ;
22489: LD_ADDR_EXP 106
22493: PUSH
22494: LD_INT 12
22496: ST_TO_ADDR
// hackCounter := [ ] ;
22497: LD_ADDR_EXP 107
22501: PUSH
22502: EMPTY
22503: ST_TO_ADDR
// end ;
22504: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
22505: LD_EXP 102
22509: IFFALSE 22527
22511: PUSH
22512: LD_INT 34
22514: PUSH
22515: LD_INT 99
22517: PUSH
22518: EMPTY
22519: LIST
22520: LIST
22521: PPUSH
22522: CALL_OW 69
22526: AND
22527: IFFALSE 22780
22529: GO 22531
22531: DISABLE
22532: LD_INT 0
22534: PPUSH
22535: PPUSH
// begin enable ;
22536: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
22537: LD_ADDR_VAR 0 1
22541: PUSH
22542: LD_INT 34
22544: PUSH
22545: LD_INT 99
22547: PUSH
22548: EMPTY
22549: LIST
22550: LIST
22551: PPUSH
22552: CALL_OW 69
22556: PUSH
22557: FOR_IN
22558: IFFALSE 22778
// begin if not i in hackTanks then
22560: LD_VAR 0 1
22564: PUSH
22565: LD_EXP 103
22569: IN
22570: NOT
22571: IFFALSE 22654
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
22573: LD_ADDR_EXP 103
22577: PUSH
22578: LD_EXP 103
22582: PPUSH
22583: LD_EXP 103
22587: PUSH
22588: LD_INT 1
22590: PLUS
22591: PPUSH
22592: LD_VAR 0 1
22596: PPUSH
22597: CALL_OW 1
22601: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
22602: LD_ADDR_EXP 104
22606: PUSH
22607: LD_EXP 104
22611: PPUSH
22612: LD_EXP 104
22616: PUSH
22617: LD_INT 1
22619: PLUS
22620: PPUSH
22621: EMPTY
22622: PPUSH
22623: CALL_OW 1
22627: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
22628: LD_ADDR_EXP 107
22632: PUSH
22633: LD_EXP 107
22637: PPUSH
22638: LD_EXP 107
22642: PUSH
22643: LD_INT 1
22645: PLUS
22646: PPUSH
22647: EMPTY
22648: PPUSH
22649: CALL_OW 1
22653: ST_TO_ADDR
// end ; if not IsOk ( i ) then
22654: LD_VAR 0 1
22658: PPUSH
22659: CALL_OW 302
22663: NOT
22664: IFFALSE 22677
// begin HackUnlinkAll ( i ) ;
22666: LD_VAR 0 1
22670: PPUSH
22671: CALL 22783 0 1
// continue ;
22675: GO 22557
// end ; HackCheckCapturedStatus ( i ) ;
22677: LD_VAR 0 1
22681: PPUSH
22682: CALL 23228 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
22686: LD_ADDR_VAR 0 2
22690: PUSH
22691: LD_INT 81
22693: PUSH
22694: LD_VAR 0 1
22698: PPUSH
22699: CALL_OW 255
22703: PUSH
22704: EMPTY
22705: LIST
22706: LIST
22707: PUSH
22708: LD_INT 33
22710: PUSH
22711: LD_INT 3
22713: PUSH
22714: EMPTY
22715: LIST
22716: LIST
22717: PUSH
22718: LD_INT 91
22720: PUSH
22721: LD_VAR 0 1
22725: PUSH
22726: LD_EXP 106
22730: PUSH
22731: EMPTY
22732: LIST
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 50
22738: PUSH
22739: EMPTY
22740: LIST
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: LIST
22746: LIST
22747: PPUSH
22748: CALL_OW 69
22752: ST_TO_ADDR
// if not tmp then
22753: LD_VAR 0 2
22757: NOT
22758: IFFALSE 22762
// continue ;
22760: GO 22557
// HackLink ( i , tmp ) ;
22762: LD_VAR 0 1
22766: PPUSH
22767: LD_VAR 0 2
22771: PPUSH
22772: CALL 22919 0 2
// end ;
22776: GO 22557
22778: POP
22779: POP
// end ;
22780: PPOPN 2
22782: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
22783: LD_INT 0
22785: PPUSH
22786: PPUSH
22787: PPUSH
// if not hack in hackTanks then
22788: LD_VAR 0 1
22792: PUSH
22793: LD_EXP 103
22797: IN
22798: NOT
22799: IFFALSE 22803
// exit ;
22801: GO 22914
// index := GetElementIndex ( hackTanks , hack ) ;
22803: LD_ADDR_VAR 0 4
22807: PUSH
22808: LD_EXP 103
22812: PPUSH
22813: LD_VAR 0 1
22817: PPUSH
22818: CALL 31506 0 2
22822: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
22823: LD_EXP 104
22827: PUSH
22828: LD_VAR 0 4
22832: ARRAY
22833: IFFALSE 22914
// begin for i in hackTanksCaptured [ index ] do
22835: LD_ADDR_VAR 0 3
22839: PUSH
22840: LD_EXP 104
22844: PUSH
22845: LD_VAR 0 4
22849: ARRAY
22850: PUSH
22851: FOR_IN
22852: IFFALSE 22878
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
22854: LD_VAR 0 3
22858: PUSH
22859: LD_INT 1
22861: ARRAY
22862: PPUSH
22863: LD_VAR 0 3
22867: PUSH
22868: LD_INT 2
22870: ARRAY
22871: PPUSH
22872: CALL_OW 235
22876: GO 22851
22878: POP
22879: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
22880: LD_ADDR_EXP 104
22884: PUSH
22885: LD_EXP 104
22889: PPUSH
22890: LD_VAR 0 4
22894: PPUSH
22895: EMPTY
22896: PPUSH
22897: CALL_OW 1
22901: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
22902: LD_VAR 0 1
22906: PPUSH
22907: LD_INT 0
22909: PPUSH
22910: CALL_OW 505
// end ; end ;
22914: LD_VAR 0 2
22918: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
22919: LD_INT 0
22921: PPUSH
22922: PPUSH
22923: PPUSH
// if not hack in hackTanks or not vehicles then
22924: LD_VAR 0 1
22928: PUSH
22929: LD_EXP 103
22933: IN
22934: NOT
22935: IFTRUE 22944
22937: PUSH
22938: LD_VAR 0 2
22942: NOT
22943: OR
22944: IFFALSE 22948
// exit ;
22946: GO 23223
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
22948: LD_ADDR_VAR 0 2
22952: PUSH
22953: LD_VAR 0 1
22957: PPUSH
22958: LD_VAR 0 2
22962: PPUSH
22963: LD_INT 1
22965: PPUSH
22966: LD_INT 1
22968: PPUSH
22969: CALL 32158 0 4
22973: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
22974: LD_ADDR_VAR 0 5
22978: PUSH
22979: LD_EXP 103
22983: PPUSH
22984: LD_VAR 0 1
22988: PPUSH
22989: CALL 31506 0 2
22993: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
22994: LD_EXP 104
22998: PUSH
22999: LD_VAR 0 5
23003: ARRAY
23004: PUSH
23005: LD_EXP 105
23009: LESS
23010: IFFALSE 23199
// begin for i := 1 to vehicles do
23012: LD_ADDR_VAR 0 4
23016: PUSH
23017: DOUBLE
23018: LD_INT 1
23020: DEC
23021: ST_TO_ADDR
23022: LD_VAR 0 2
23026: PUSH
23027: FOR_TO
23028: IFFALSE 23197
// begin if hackTanksCaptured [ index ] = hackLimit then
23030: LD_EXP 104
23034: PUSH
23035: LD_VAR 0 5
23039: ARRAY
23040: PUSH
23041: LD_EXP 105
23045: EQUAL
23046: IFFALSE 23050
// break ;
23048: GO 23197
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
23050: LD_ADDR_EXP 107
23054: PUSH
23055: LD_EXP 107
23059: PPUSH
23060: LD_VAR 0 5
23064: PPUSH
23065: LD_EXP 107
23069: PUSH
23070: LD_VAR 0 5
23074: ARRAY
23075: PUSH
23076: LD_INT 1
23078: PLUS
23079: PPUSH
23080: CALL_OW 1
23084: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
23085: LD_ADDR_EXP 104
23089: PUSH
23090: LD_EXP 104
23094: PPUSH
23095: LD_VAR 0 5
23099: PUSH
23100: LD_EXP 104
23104: PUSH
23105: LD_VAR 0 5
23109: ARRAY
23110: PUSH
23111: LD_INT 1
23113: PLUS
23114: PUSH
23115: EMPTY
23116: LIST
23117: LIST
23118: PPUSH
23119: LD_VAR 0 2
23123: PUSH
23124: LD_VAR 0 4
23128: ARRAY
23129: PUSH
23130: LD_VAR 0 2
23134: PUSH
23135: LD_VAR 0 4
23139: ARRAY
23140: PPUSH
23141: CALL_OW 255
23145: PUSH
23146: EMPTY
23147: LIST
23148: LIST
23149: PPUSH
23150: CALL 31723 0 3
23154: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
23155: LD_VAR 0 2
23159: PUSH
23160: LD_VAR 0 4
23164: ARRAY
23165: PPUSH
23166: LD_VAR 0 1
23170: PPUSH
23171: CALL_OW 255
23175: PPUSH
23176: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
23180: LD_VAR 0 2
23184: PUSH
23185: LD_VAR 0 4
23189: ARRAY
23190: PPUSH
23191: CALL_OW 141
// end ;
23195: GO 23027
23197: POP
23198: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23199: LD_VAR 0 1
23203: PPUSH
23204: LD_EXP 104
23208: PUSH
23209: LD_VAR 0 5
23213: ARRAY
23214: PUSH
23215: LD_INT 0
23217: PLUS
23218: PPUSH
23219: CALL_OW 505
// end ;
23223: LD_VAR 0 3
23227: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
23228: LD_INT 0
23230: PPUSH
23231: PPUSH
23232: PPUSH
23233: PPUSH
// if not hack in hackTanks then
23234: LD_VAR 0 1
23238: PUSH
23239: LD_EXP 103
23243: IN
23244: NOT
23245: IFFALSE 23249
// exit ;
23247: GO 23493
// index := GetElementIndex ( hackTanks , hack ) ;
23249: LD_ADDR_VAR 0 4
23253: PUSH
23254: LD_EXP 103
23258: PPUSH
23259: LD_VAR 0 1
23263: PPUSH
23264: CALL 31506 0 2
23268: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
23269: LD_ADDR_VAR 0 3
23273: PUSH
23274: DOUBLE
23275: LD_EXP 104
23279: PUSH
23280: LD_VAR 0 4
23284: ARRAY
23285: INC
23286: ST_TO_ADDR
23287: LD_INT 1
23289: PUSH
23290: FOR_DOWNTO
23291: IFFALSE 23467
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
23293: LD_ADDR_VAR 0 5
23297: PUSH
23298: LD_EXP 104
23302: PUSH
23303: LD_VAR 0 4
23307: ARRAY
23308: PUSH
23309: LD_VAR 0 3
23313: ARRAY
23314: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
23315: LD_VAR 0 5
23319: PUSH
23320: LD_INT 1
23322: ARRAY
23323: PPUSH
23324: CALL_OW 302
23328: NOT
23329: IFTRUE 23357
23331: PUSH
23332: LD_VAR 0 5
23336: PUSH
23337: LD_INT 1
23339: ARRAY
23340: PPUSH
23341: CALL_OW 255
23345: PUSH
23346: LD_VAR 0 1
23350: PPUSH
23351: CALL_OW 255
23355: NONEQUAL
23356: OR
23357: IFFALSE 23465
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
23359: LD_VAR 0 5
23363: PUSH
23364: LD_INT 1
23366: ARRAY
23367: PPUSH
23368: CALL_OW 305
23372: IFFALSE 23400
23374: PUSH
23375: LD_VAR 0 5
23379: PUSH
23380: LD_INT 1
23382: ARRAY
23383: PPUSH
23384: CALL_OW 255
23388: PUSH
23389: LD_VAR 0 1
23393: PPUSH
23394: CALL_OW 255
23398: EQUAL
23399: AND
23400: IFFALSE 23424
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
23402: LD_VAR 0 5
23406: PUSH
23407: LD_INT 1
23409: ARRAY
23410: PPUSH
23411: LD_VAR 0 5
23415: PUSH
23416: LD_INT 2
23418: ARRAY
23419: PPUSH
23420: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
23424: LD_ADDR_EXP 104
23428: PUSH
23429: LD_EXP 104
23433: PPUSH
23434: LD_VAR 0 4
23438: PPUSH
23439: LD_EXP 104
23443: PUSH
23444: LD_VAR 0 4
23448: ARRAY
23449: PPUSH
23450: LD_VAR 0 3
23454: PPUSH
23455: CALL_OW 3
23459: PPUSH
23460: CALL_OW 1
23464: ST_TO_ADDR
// end ; end ;
23465: GO 23290
23467: POP
23468: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
23469: LD_VAR 0 1
23473: PPUSH
23474: LD_EXP 104
23478: PUSH
23479: LD_VAR 0 4
23483: ARRAY
23484: PUSH
23485: LD_INT 0
23487: PLUS
23488: PPUSH
23489: CALL_OW 505
// end ;
23493: LD_VAR 0 2
23497: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
23498: LD_INT 0
23500: PPUSH
23501: PPUSH
23502: PPUSH
23503: PPUSH
// if not hack in hackTanks then
23504: LD_VAR 0 1
23508: PUSH
23509: LD_EXP 103
23513: IN
23514: NOT
23515: IFFALSE 23519
// exit ;
23517: GO 23604
// index := GetElementIndex ( hackTanks , hack ) ;
23519: LD_ADDR_VAR 0 5
23523: PUSH
23524: LD_EXP 103
23528: PPUSH
23529: LD_VAR 0 1
23533: PPUSH
23534: CALL 31506 0 2
23538: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
23539: LD_ADDR_VAR 0 4
23543: PUSH
23544: DOUBLE
23545: LD_INT 1
23547: DEC
23548: ST_TO_ADDR
23549: LD_EXP 104
23553: PUSH
23554: LD_VAR 0 5
23558: ARRAY
23559: PUSH
23560: FOR_TO
23561: IFFALSE 23602
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
23563: LD_EXP 104
23567: PUSH
23568: LD_VAR 0 5
23572: ARRAY
23573: PUSH
23574: LD_VAR 0 4
23578: ARRAY
23579: PUSH
23580: LD_INT 1
23582: ARRAY
23583: PUSH
23584: LD_VAR 0 2
23588: EQUAL
23589: IFFALSE 23600
// KillUnit ( vehicle ) ;
23591: LD_VAR 0 2
23595: PPUSH
23596: CALL_OW 66
23600: GO 23560
23602: POP
23603: POP
// end ;
23604: LD_VAR 0 3
23608: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do var i ;
23609: LD_EXP 108
23613: NOT
23614: IFFALSE 23747
23616: GO 23618
23618: DISABLE
23619: LD_INT 0
23621: PPUSH
// begin initMiner := true ;
23622: LD_ADDR_EXP 108
23626: PUSH
23627: LD_INT 1
23629: ST_TO_ADDR
// minersList := [ ] ;
23630: LD_ADDR_EXP 109
23634: PUSH
23635: EMPTY
23636: ST_TO_ADDR
// minerMinesList := [ ] ;
23637: LD_ADDR_EXP 110
23641: PUSH
23642: EMPTY
23643: ST_TO_ADDR
// minesLimitPerVehicle := 6 ;
23644: LD_ADDR_EXP 111
23648: PUSH
23649: LD_INT 6
23651: ST_TO_ADDR
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
23652: LD_ADDR_VAR 0 1
23656: PUSH
23657: LD_INT 34
23659: PUSH
23660: LD_INT 81
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PPUSH
23667: CALL_OW 69
23671: PUSH
23672: FOR_IN
23673: IFFALSE 23745
// begin if not i in minersList then
23675: LD_VAR 0 1
23679: PUSH
23680: LD_EXP 109
23684: IN
23685: NOT
23686: IFFALSE 23743
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
23688: LD_ADDR_EXP 109
23692: PUSH
23693: LD_EXP 109
23697: PPUSH
23698: LD_EXP 109
23702: PUSH
23703: LD_INT 1
23705: PLUS
23706: PPUSH
23707: LD_VAR 0 1
23711: PPUSH
23712: CALL_OW 1
23716: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
23717: LD_ADDR_EXP 110
23721: PUSH
23722: LD_EXP 110
23726: PPUSH
23727: LD_EXP 110
23731: PUSH
23732: LD_INT 1
23734: PLUS
23735: PPUSH
23736: EMPTY
23737: PPUSH
23738: CALL_OW 1
23742: ST_TO_ADDR
// end end ;
23743: GO 23672
23745: POP
23746: POP
// end ;
23747: PPOPN 1
23749: END
// every 0 0$1 trigger initMiner and ( Count ( minerMinesList ) or FilterAllUnits ( [ f_weapon , ar_miner ] ) ) do var i , j , side , tmp ;
23750: LD_EXP 108
23754: IFFALSE 23785
23756: PUSH
23757: LD_EXP 110
23761: PPUSH
23762: CALL 28805 0 1
23766: IFTRUE 23784
23768: PUSH
23769: LD_INT 34
23771: PUSH
23772: LD_INT 81
23774: PUSH
23775: EMPTY
23776: LIST
23777: LIST
23778: PPUSH
23779: CALL_OW 69
23783: OR
23784: AND
23785: IFFALSE 24284
23787: GO 23789
23789: DISABLE
23790: LD_INT 0
23792: PPUSH
23793: PPUSH
23794: PPUSH
23795: PPUSH
// begin enable ;
23796: ENABLE
// for i := minerMinesList downto 1 do
23797: LD_ADDR_VAR 0 1
23801: PUSH
23802: DOUBLE
23803: LD_EXP 110
23807: INC
23808: ST_TO_ADDR
23809: LD_INT 1
23811: PUSH
23812: FOR_DOWNTO
23813: IFFALSE 24282
// begin if IsLive ( minersList [ i ] ) then
23815: LD_EXP 109
23819: PUSH
23820: LD_VAR 0 1
23824: ARRAY
23825: PPUSH
23826: CALL_OW 300
23830: IFFALSE 23863
// SetUnitDisplayNumber ( minersList [ i ] , Count ( minerMinesList [ i ] ) ) ;
23832: LD_EXP 109
23836: PUSH
23837: LD_VAR 0 1
23841: ARRAY
23842: PPUSH
23843: LD_EXP 110
23847: PUSH
23848: LD_VAR 0 1
23852: ARRAY
23853: PPUSH
23854: CALL 28805 0 1
23858: PPUSH
23859: CALL_OW 505
// if not minerMinesList [ i ] then
23863: LD_EXP 110
23867: PUSH
23868: LD_VAR 0 1
23872: ARRAY
23873: NOT
23874: IFFALSE 23878
// continue ;
23876: GO 23812
// for j := minerMinesList [ i ] downto 1 do
23878: LD_ADDR_VAR 0 2
23882: PUSH
23883: DOUBLE
23884: LD_EXP 110
23888: PUSH
23889: LD_VAR 0 1
23893: ARRAY
23894: INC
23895: ST_TO_ADDR
23896: LD_INT 1
23898: PUSH
23899: FOR_DOWNTO
23900: IFFALSE 24278
// begin side := GetSide ( minersList [ i ] ) ;
23902: LD_ADDR_VAR 0 3
23906: PUSH
23907: LD_EXP 109
23911: PUSH
23912: LD_VAR 0 1
23916: ARRAY
23917: PPUSH
23918: CALL_OW 255
23922: ST_TO_ADDR
// if IsDead ( minersList [ i ] ) or not IsPlaced ( minersList [ i ] ) then
23923: LD_EXP 109
23927: PUSH
23928: LD_VAR 0 1
23932: ARRAY
23933: PPUSH
23934: CALL_OW 301
23938: IFTRUE 23958
23940: PUSH
23941: LD_EXP 109
23945: PUSH
23946: LD_VAR 0 1
23950: ARRAY
23951: PPUSH
23952: CALL_OW 305
23956: NOT
23957: OR
23958: IFFALSE 24049
// begin RemoveMineXY ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
23960: LD_EXP 110
23964: PUSH
23965: LD_VAR 0 1
23969: ARRAY
23970: PUSH
23971: LD_VAR 0 2
23975: ARRAY
23976: PUSH
23977: LD_INT 1
23979: ARRAY
23980: PPUSH
23981: LD_EXP 110
23985: PUSH
23986: LD_VAR 0 1
23990: ARRAY
23991: PUSH
23992: LD_VAR 0 2
23996: ARRAY
23997: PUSH
23998: LD_INT 2
24000: ARRAY
24001: PPUSH
24002: CALL_OW 612
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24006: LD_ADDR_EXP 110
24010: PUSH
24011: LD_EXP 110
24015: PPUSH
24016: LD_VAR 0 1
24020: PPUSH
24021: LD_EXP 110
24025: PUSH
24026: LD_VAR 0 1
24030: ARRAY
24031: PPUSH
24032: LD_VAR 0 2
24036: PPUSH
24037: CALL_OW 3
24041: PPUSH
24042: CALL_OW 1
24046: ST_TO_ADDR
// continue ;
24047: GO 23899
// end ; tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
24049: LD_ADDR_VAR 0 4
24053: PUSH
24054: LD_EXP 110
24058: PUSH
24059: LD_VAR 0 1
24063: ARRAY
24064: PUSH
24065: LD_VAR 0 2
24069: ARRAY
24070: PUSH
24071: LD_INT 1
24073: ARRAY
24074: PPUSH
24075: LD_EXP 110
24079: PUSH
24080: LD_VAR 0 1
24084: ARRAY
24085: PUSH
24086: LD_VAR 0 2
24090: ARRAY
24091: PUSH
24092: LD_INT 2
24094: ARRAY
24095: PPUSH
24096: CALL_OW 428
24100: ST_TO_ADDR
// if not tmp then
24101: LD_VAR 0 4
24105: NOT
24106: IFFALSE 24110
// continue ;
24108: GO 23899
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
24110: LD_VAR 0 4
24114: PUSH
24115: LD_INT 81
24117: PUSH
24118: LD_VAR 0 3
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PPUSH
24127: CALL_OW 69
24131: IN
24132: IFFALSE 24182
24134: PUSH
24135: LD_EXP 110
24139: PUSH
24140: LD_VAR 0 1
24144: ARRAY
24145: PUSH
24146: LD_VAR 0 2
24150: ARRAY
24151: PUSH
24152: LD_INT 1
24154: ARRAY
24155: PPUSH
24156: LD_EXP 110
24160: PUSH
24161: LD_VAR 0 1
24165: ARRAY
24166: PUSH
24167: LD_VAR 0 2
24171: ARRAY
24172: PUSH
24173: LD_INT 2
24175: ARRAY
24176: PPUSH
24177: CALL_OW 458
24181: AND
24182: IFFALSE 24276
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
24184: LD_EXP 110
24188: PUSH
24189: LD_VAR 0 1
24193: ARRAY
24194: PUSH
24195: LD_VAR 0 2
24199: ARRAY
24200: PUSH
24201: LD_INT 1
24203: ARRAY
24204: PPUSH
24205: LD_EXP 110
24209: PUSH
24210: LD_VAR 0 1
24214: ARRAY
24215: PUSH
24216: LD_VAR 0 2
24220: ARRAY
24221: PUSH
24222: LD_INT 2
24224: ARRAY
24225: PPUSH
24226: LD_VAR 0 3
24230: PPUSH
24231: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
24235: LD_ADDR_EXP 110
24239: PUSH
24240: LD_EXP 110
24244: PPUSH
24245: LD_VAR 0 1
24249: PPUSH
24250: LD_EXP 110
24254: PUSH
24255: LD_VAR 0 1
24259: ARRAY
24260: PPUSH
24261: LD_VAR 0 2
24265: PPUSH
24266: CALL_OW 3
24270: PPUSH
24271: CALL_OW 1
24275: ST_TO_ADDR
// end ; end ;
24276: GO 23899
24278: POP
24279: POP
// end ;
24280: GO 23812
24282: POP
24283: POP
// end ;
24284: PPOPN 4
24286: END
// export function MinerPlaceMine ( unit , x , y ) ; var index , side , i ; begin
24287: LD_INT 0
24289: PPUSH
24290: PPUSH
24291: PPUSH
24292: PPUSH
// result := false ;
24293: LD_ADDR_VAR 0 4
24297: PUSH
24298: LD_INT 0
24300: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
24301: LD_VAR 0 1
24305: PPUSH
24306: CALL_OW 264
24310: PUSH
24311: LD_INT 81
24313: EQUAL
24314: NOT
24315: IFFALSE 24319
// exit ;
24317: GO 24689
// side := GetSide ( unit ) ;
24319: LD_ADDR_VAR 0 6
24323: PUSH
24324: LD_VAR 0 1
24328: PPUSH
24329: CALL_OW 255
24333: ST_TO_ADDR
// index := GetElementIndex ( minersList , unit ) ;
24334: LD_ADDR_VAR 0 5
24338: PUSH
24339: LD_EXP 109
24343: PPUSH
24344: LD_VAR 0 1
24348: PPUSH
24349: CALL 31506 0 2
24353: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
24354: LD_EXP 110
24358: PUSH
24359: LD_VAR 0 5
24363: ARRAY
24364: PUSH
24365: LD_EXP 111
24369: GREATEREQUAL
24370: IFFALSE 24374
// exit ;
24372: GO 24689
// ComMoveXY ( unit , x , y ) ;
24374: LD_VAR 0 1
24378: PPUSH
24379: LD_VAR 0 2
24383: PPUSH
24384: LD_VAR 0 3
24388: PPUSH
24389: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
24393: LD_INT 35
24395: PPUSH
24396: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
24400: LD_VAR 0 1
24404: PPUSH
24405: LD_VAR 0 2
24409: PPUSH
24410: LD_VAR 0 3
24414: PPUSH
24415: CALL 63552 0 3
24419: NOT
24420: IFFALSE 24433
24422: PUSH
24423: LD_VAR 0 1
24427: PPUSH
24428: CALL_OW 314
24432: AND
24433: IFFALSE 24437
// exit ;
24435: GO 24689
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
24437: LD_VAR 0 2
24441: PPUSH
24442: LD_VAR 0 3
24446: PPUSH
24447: CALL_OW 428
24451: PUSH
24452: LD_VAR 0 1
24456: EQUAL
24457: IFFALSE 24471
24459: PUSH
24460: LD_VAR 0 1
24464: PPUSH
24465: CALL_OW 314
24469: NOT
24470: AND
24471: IFFALSE 24393
// if MineAtPos ( x , y ) then
24473: LD_VAR 0 2
24477: PPUSH
24478: LD_VAR 0 3
24482: PPUSH
24483: CALL_OW 458
24487: IFFALSE 24491
// exit ;
24489: GO 24689
// if your_side = side then
24491: LD_OWVAR 2
24495: PUSH
24496: LD_VAR 0 6
24500: EQUAL
24501: IFFALSE 24520
// PlaySoundXY ( x , y , PlantMine ) ;
24503: LD_VAR 0 2
24507: PPUSH
24508: LD_VAR 0 3
24512: PPUSH
24513: LD_STRING PlantMine
24515: PPUSH
24516: CALL_OW 366
// repeat wait ( 1 ) ;
24520: LD_INT 1
24522: PPUSH
24523: CALL_OW 67
// until PlaceMine ( x , y , side , 0 ) ;
24527: LD_VAR 0 2
24531: PPUSH
24532: LD_VAR 0 3
24536: PPUSH
24537: LD_VAR 0 6
24541: PPUSH
24542: LD_INT 0
24544: PPUSH
24545: CALL_OW 454
24549: IFFALSE 24520
// if MineAtPos ( x , y ) then
24551: LD_VAR 0 2
24555: PPUSH
24556: LD_VAR 0 3
24560: PPUSH
24561: CALL_OW 458
24565: IFFALSE 24681
// begin for i in minerMinesList [ index ] do
24567: LD_ADDR_VAR 0 7
24571: PUSH
24572: LD_EXP 110
24576: PUSH
24577: LD_VAR 0 5
24581: ARRAY
24582: PUSH
24583: FOR_IN
24584: IFFALSE 24626
// if i [ 1 ] = x and i [ 2 ] = y then
24586: LD_VAR 0 7
24590: PUSH
24591: LD_INT 1
24593: ARRAY
24594: PUSH
24595: LD_VAR 0 2
24599: EQUAL
24600: IFFALSE 24618
24602: PUSH
24603: LD_VAR 0 7
24607: PUSH
24608: LD_INT 2
24610: ARRAY
24611: PUSH
24612: LD_VAR 0 3
24616: EQUAL
24617: AND
24618: IFFALSE 24624
// exit ;
24620: POP
24621: POP
24622: GO 24689
24624: GO 24583
24626: POP
24627: POP
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
24628: LD_ADDR_EXP 110
24632: PUSH
24633: LD_EXP 110
24637: PPUSH
24638: LD_VAR 0 5
24642: PUSH
24643: LD_EXP 110
24647: PUSH
24648: LD_VAR 0 5
24652: ARRAY
24653: PUSH
24654: LD_INT 1
24656: PLUS
24657: PUSH
24658: EMPTY
24659: LIST
24660: LIST
24661: PPUSH
24662: LD_VAR 0 2
24666: PUSH
24667: LD_VAR 0 3
24671: PUSH
24672: EMPTY
24673: LIST
24674: LIST
24675: PPUSH
24676: CALL 31723 0 3
24680: ST_TO_ADDR
// end ; result := true ;
24681: LD_ADDR_VAR 0 4
24685: PUSH
24686: LD_INT 1
24688: ST_TO_ADDR
// end ;
24689: LD_VAR 0 4
24693: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
24694: LD_INT 0
24696: PPUSH
24697: PPUSH
24698: PPUSH
// if not unit in minersList then
24699: LD_VAR 0 1
24703: PUSH
24704: LD_EXP 109
24708: IN
24709: NOT
24710: IFFALSE 24714
// exit ;
24712: GO 24921
// index := GetElementIndex ( minersList , unit ) ;
24714: LD_ADDR_VAR 0 6
24718: PUSH
24719: LD_EXP 109
24723: PPUSH
24724: LD_VAR 0 1
24728: PPUSH
24729: CALL 31506 0 2
24733: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
24734: LD_ADDR_VAR 0 5
24738: PUSH
24739: DOUBLE
24740: LD_EXP 110
24744: PUSH
24745: LD_VAR 0 6
24749: ARRAY
24750: INC
24751: ST_TO_ADDR
24752: LD_INT 1
24754: PUSH
24755: FOR_DOWNTO
24756: IFFALSE 24919
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
24758: LD_EXP 110
24762: PUSH
24763: LD_VAR 0 6
24767: ARRAY
24768: PUSH
24769: LD_VAR 0 5
24773: ARRAY
24774: PUSH
24775: LD_INT 1
24777: ARRAY
24778: PPUSH
24779: LD_EXP 110
24783: PUSH
24784: LD_VAR 0 6
24788: ARRAY
24789: PUSH
24790: LD_VAR 0 5
24794: ARRAY
24795: PUSH
24796: LD_INT 2
24798: ARRAY
24799: PPUSH
24800: LD_VAR 0 2
24804: PPUSH
24805: LD_VAR 0 3
24809: PPUSH
24810: CALL_OW 298
24814: PUSH
24815: LD_INT 6
24817: LESS
24818: IFFALSE 24917
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
24820: LD_EXP 110
24824: PUSH
24825: LD_VAR 0 6
24829: ARRAY
24830: PUSH
24831: LD_VAR 0 5
24835: ARRAY
24836: PUSH
24837: LD_INT 1
24839: ARRAY
24840: PPUSH
24841: LD_EXP 110
24845: PUSH
24846: LD_VAR 0 6
24850: ARRAY
24851: PUSH
24852: LD_VAR 0 5
24856: ARRAY
24857: PUSH
24858: LD_INT 2
24860: ARRAY
24861: PPUSH
24862: LD_VAR 0 1
24866: PPUSH
24867: CALL_OW 255
24871: PPUSH
24872: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
24876: LD_ADDR_EXP 110
24880: PUSH
24881: LD_EXP 110
24885: PPUSH
24886: LD_VAR 0 6
24890: PPUSH
24891: LD_EXP 110
24895: PUSH
24896: LD_VAR 0 6
24900: ARRAY
24901: PPUSH
24902: LD_VAR 0 5
24906: PPUSH
24907: CALL_OW 3
24911: PPUSH
24912: CALL_OW 1
24916: ST_TO_ADDR
// end ; end ;
24917: GO 24755
24919: POP
24920: POP
// end ;
24921: LD_VAR 0 4
24925: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
24926: LD_INT 0
24928: PPUSH
24929: PPUSH
24930: PPUSH
24931: PPUSH
24932: PPUSH
24933: PPUSH
24934: PPUSH
24935: PPUSH
24936: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
24937: LD_VAR 0 1
24941: PPUSH
24942: CALL_OW 264
24946: PUSH
24947: LD_INT 81
24949: EQUAL
24950: NOT
24951: IFTRUE 24966
24953: PUSH
24954: LD_VAR 0 1
24958: PUSH
24959: LD_EXP 109
24963: IN
24964: NOT
24965: OR
24966: IFFALSE 24970
// exit ;
24968: GO 25296
// index := GetElementIndex ( minersList , unit ) ;
24970: LD_ADDR_VAR 0 6
24974: PUSH
24975: LD_EXP 109
24979: PPUSH
24980: LD_VAR 0 1
24984: PPUSH
24985: CALL 31506 0 2
24989: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
24990: LD_ADDR_VAR 0 8
24994: PUSH
24995: LD_EXP 111
24999: PUSH
25000: LD_EXP 110
25004: PUSH
25005: LD_VAR 0 6
25009: ARRAY
25010: MINUS
25011: ST_TO_ADDR
// if not minesFreeAmount then
25012: LD_VAR 0 8
25016: NOT
25017: IFFALSE 25021
// exit ;
25019: GO 25296
// tmp := [ ] ;
25021: LD_ADDR_VAR 0 7
25025: PUSH
25026: EMPTY
25027: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
25028: LD_ADDR_VAR 0 5
25032: PUSH
25033: DOUBLE
25034: LD_INT 1
25036: DEC
25037: ST_TO_ADDR
25038: LD_VAR 0 8
25042: PUSH
25043: FOR_TO
25044: IFFALSE 25243
// begin _d := rand ( 0 , 5 ) ;
25046: LD_ADDR_VAR 0 11
25050: PUSH
25051: LD_INT 0
25053: PPUSH
25054: LD_INT 5
25056: PPUSH
25057: CALL_OW 12
25061: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
25062: LD_ADDR_VAR 0 12
25066: PUSH
25067: LD_INT 2
25069: PPUSH
25070: LD_INT 6
25072: PPUSH
25073: CALL_OW 12
25077: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
25078: LD_ADDR_VAR 0 9
25082: PUSH
25083: LD_VAR 0 2
25087: PPUSH
25088: LD_VAR 0 11
25092: PPUSH
25093: LD_VAR 0 12
25097: PPUSH
25098: CALL_OW 272
25102: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
25103: LD_ADDR_VAR 0 10
25107: PUSH
25108: LD_VAR 0 3
25112: PPUSH
25113: LD_VAR 0 11
25117: PPUSH
25118: LD_VAR 0 12
25122: PPUSH
25123: CALL_OW 273
25127: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
25128: LD_VAR 0 9
25132: PPUSH
25133: LD_VAR 0 10
25137: PPUSH
25138: CALL_OW 488
25142: IFFALSE 25166
25144: PUSH
25145: LD_VAR 0 9
25149: PUSH
25150: LD_VAR 0 10
25154: PUSH
25155: EMPTY
25156: LIST
25157: LIST
25158: PUSH
25159: LD_VAR 0 7
25163: IN
25164: NOT
25165: AND
25166: IFFALSE 25185
25168: PUSH
25169: LD_VAR 0 9
25173: PPUSH
25174: LD_VAR 0 10
25178: PPUSH
25179: CALL_OW 458
25183: NOT
25184: AND
25185: IFFALSE 25227
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
25187: LD_ADDR_VAR 0 7
25191: PUSH
25192: LD_VAR 0 7
25196: PPUSH
25197: LD_VAR 0 7
25201: PUSH
25202: LD_INT 1
25204: PLUS
25205: PPUSH
25206: LD_VAR 0 9
25210: PUSH
25211: LD_VAR 0 10
25215: PUSH
25216: EMPTY
25217: LIST
25218: LIST
25219: PPUSH
25220: CALL_OW 1
25224: ST_TO_ADDR
25225: GO 25241
// i := i - 1 ;
25227: LD_ADDR_VAR 0 5
25231: PUSH
25232: LD_VAR 0 5
25236: PUSH
25237: LD_INT 1
25239: MINUS
25240: ST_TO_ADDR
// end ;
25241: GO 25043
25243: POP
25244: POP
// for i in tmp do
25245: LD_ADDR_VAR 0 5
25249: PUSH
25250: LD_VAR 0 7
25254: PUSH
25255: FOR_IN
25256: IFFALSE 25294
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
25258: LD_VAR 0 1
25262: PPUSH
25263: LD_VAR 0 5
25267: PUSH
25268: LD_INT 1
25270: ARRAY
25271: PPUSH
25272: LD_VAR 0 5
25276: PUSH
25277: LD_INT 2
25279: ARRAY
25280: PPUSH
25281: CALL 24287 0 3
25285: NOT
25286: IFFALSE 25292
// exit ;
25288: POP
25289: POP
25290: GO 25296
25292: GO 25255
25294: POP
25295: POP
// end ;
25296: LD_VAR 0 4
25300: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , dir , viewRange , _x , _y , _d , p ; begin
25301: LD_INT 0
25303: PPUSH
25304: PPUSH
25305: PPUSH
25306: PPUSH
25307: PPUSH
25308: PPUSH
25309: PPUSH
25310: PPUSH
25311: PPUSH
// if GetClass ( unit ) <> class_sniper then
25312: LD_VAR 0 1
25316: PPUSH
25317: CALL_OW 257
25321: PUSH
25322: LD_INT 5
25324: NONEQUAL
25325: IFFALSE 25329
// exit ;
25327: GO 25799
// dist := 8 ;
25329: LD_ADDR_VAR 0 5
25333: PUSH
25334: LD_INT 8
25336: ST_TO_ADDR
// viewRange := 12 ;
25337: LD_ADDR_VAR 0 8
25341: PUSH
25342: LD_INT 12
25344: ST_TO_ADDR
// side := GetSide ( unit ) ;
25345: LD_ADDR_VAR 0 6
25349: PUSH
25350: LD_VAR 0 1
25354: PPUSH
25355: CALL_OW 255
25359: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
25360: LD_INT 61
25362: PPUSH
25363: LD_VAR 0 6
25367: PPUSH
25368: CALL_OW 321
25372: PUSH
25373: LD_INT 2
25375: EQUAL
25376: IFFALSE 25386
// viewRange := 16 ;
25378: LD_ADDR_VAR 0 8
25382: PUSH
25383: LD_INT 16
25385: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
25386: LD_VAR 0 1
25390: PPUSH
25391: LD_VAR 0 2
25395: PPUSH
25396: LD_VAR 0 3
25400: PPUSH
25401: CALL_OW 297
25405: PUSH
25406: LD_VAR 0 5
25410: GREATER
25411: IFFALSE 25490
// begin ComMoveXY ( unit , x , y ) ;
25413: LD_VAR 0 1
25417: PPUSH
25418: LD_VAR 0 2
25422: PPUSH
25423: LD_VAR 0 3
25427: PPUSH
25428: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
25432: LD_INT 35
25434: PPUSH
25435: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
25439: LD_VAR 0 1
25443: PPUSH
25444: LD_VAR 0 2
25448: PPUSH
25449: LD_VAR 0 3
25453: PPUSH
25454: CALL 63552 0 3
25458: NOT
25459: IFFALSE 25463
// exit ;
25461: GO 25799
// until GetDistUnitXY ( unit , x , y ) < dist ;
25463: LD_VAR 0 1
25467: PPUSH
25468: LD_VAR 0 2
25472: PPUSH
25473: LD_VAR 0 3
25477: PPUSH
25478: CALL_OW 297
25482: PUSH
25483: LD_VAR 0 5
25487: LESS
25488: IFFALSE 25432
// end ; ComTurnXY ( unit , x , y ) ;
25490: LD_VAR 0 1
25494: PPUSH
25495: LD_VAR 0 2
25499: PPUSH
25500: LD_VAR 0 3
25504: PPUSH
25505: CALL_OW 118
// repeat if Multiplayer then
25509: LD_OWVAR 4
25513: IFFALSE 25524
// wait ( 35 ) else
25515: LD_INT 35
25517: PPUSH
25518: CALL_OW 67
25522: GO 25531
// wait ( 5 ) ;
25524: LD_INT 5
25526: PPUSH
25527: CALL_OW 67
// _d := GetDir ( unit ) ;
25531: LD_ADDR_VAR 0 11
25535: PUSH
25536: LD_VAR 0 1
25540: PPUSH
25541: CALL_OW 254
25545: ST_TO_ADDR
// dir := GetDirFromHex ( GetX ( unit ) , GetY ( unit ) , x , y ) ;
25546: LD_ADDR_VAR 0 7
25550: PUSH
25551: LD_VAR 0 1
25555: PPUSH
25556: CALL_OW 250
25560: PPUSH
25561: LD_VAR 0 1
25565: PPUSH
25566: CALL_OW 251
25570: PPUSH
25571: LD_VAR 0 2
25575: PPUSH
25576: LD_VAR 0 3
25580: PPUSH
25581: CALL 66188 0 4
25585: ST_TO_ADDR
// until dir = _d ;
25586: LD_VAR 0 7
25590: PUSH
25591: LD_VAR 0 11
25595: EQUAL
25596: IFFALSE 25509
// _x := ShiftX ( GetX ( unit ) , dir , dist ) ;
25598: LD_ADDR_VAR 0 9
25602: PUSH
25603: LD_VAR 0 1
25607: PPUSH
25608: CALL_OW 250
25612: PPUSH
25613: LD_VAR 0 7
25617: PPUSH
25618: LD_VAR 0 5
25622: PPUSH
25623: CALL_OW 272
25627: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , dir , dist ) ;
25628: LD_ADDR_VAR 0 10
25632: PUSH
25633: LD_VAR 0 1
25637: PPUSH
25638: CALL_OW 251
25642: PPUSH
25643: LD_VAR 0 7
25647: PPUSH
25648: LD_VAR 0 5
25652: PPUSH
25653: CALL_OW 273
25657: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25658: LD_VAR 0 9
25662: PPUSH
25663: LD_VAR 0 10
25667: PPUSH
25668: CALL_OW 488
25672: NOT
25673: IFFALSE 25677
// exit ;
25675: GO 25799
// ComAnimCustom ( unit , 1 ) ;
25677: LD_VAR 0 1
25681: PPUSH
25682: LD_INT 1
25684: PPUSH
25685: CALL_OW 592
// p := 0 ;
25689: LD_ADDR_VAR 0 12
25693: PUSH
25694: LD_INT 0
25696: ST_TO_ADDR
// PlaceSeeing ( _x , _y , side , viewRange ) ;
25697: LD_VAR 0 9
25701: PPUSH
25702: LD_VAR 0 10
25706: PPUSH
25707: LD_VAR 0 6
25711: PPUSH
25712: LD_VAR 0 8
25716: PPUSH
25717: CALL_OW 330
// repeat wait ( 0 0$1 ) ;
25721: LD_INT 35
25723: PPUSH
25724: CALL_OW 67
// p := Inc ( p ) ;
25728: LD_ADDR_VAR 0 12
25732: PUSH
25733: LD_VAR 0 12
25737: PPUSH
25738: CALL 66144 0 1
25742: ST_TO_ADDR
// until p = 3 or not IsOk ( unit ) or IsDead ( unit ) ;
25743: LD_VAR 0 12
25747: PUSH
25748: LD_INT 3
25750: EQUAL
25751: IFTRUE 25765
25753: PUSH
25754: LD_VAR 0 1
25758: PPUSH
25759: CALL_OW 302
25763: NOT
25764: OR
25765: IFTRUE 25778
25767: PUSH
25768: LD_VAR 0 1
25772: PPUSH
25773: CALL_OW 301
25777: OR
25778: IFFALSE 25721
// RemoveSeeing ( _x , _y , side ) ;
25780: LD_VAR 0 9
25784: PPUSH
25785: LD_VAR 0 10
25789: PPUSH
25790: LD_VAR 0 6
25794: PPUSH
25795: CALL_OW 331
// end ;
25799: LD_VAR 0 4
25803: RET
// function RevealDetectorMine ( unit ) ; var side , r , x , y , min_x , min_y , max_x , max_y , _x , _y ; begin
25804: LD_INT 0
25806: PPUSH
25807: PPUSH
25808: PPUSH
25809: PPUSH
25810: PPUSH
25811: PPUSH
25812: PPUSH
25813: PPUSH
25814: PPUSH
25815: PPUSH
25816: PPUSH
// if not unit then
25817: LD_VAR 0 1
25821: NOT
25822: IFFALSE 25826
// exit ;
25824: GO 26097
// side := GetSide ( unit ) ;
25826: LD_ADDR_VAR 0 3
25830: PUSH
25831: LD_VAR 0 1
25835: PPUSH
25836: CALL_OW 255
25840: ST_TO_ADDR
// x := GetX ( unit ) ;
25841: LD_ADDR_VAR 0 5
25845: PUSH
25846: LD_VAR 0 1
25850: PPUSH
25851: CALL_OW 250
25855: ST_TO_ADDR
// y := GetY ( unit ) ;
25856: LD_ADDR_VAR 0 6
25860: PUSH
25861: LD_VAR 0 1
25865: PPUSH
25866: CALL_OW 251
25870: ST_TO_ADDR
// r := 8 ;
25871: LD_ADDR_VAR 0 4
25875: PUSH
25876: LD_INT 8
25878: ST_TO_ADDR
// if x - r < 0 then
25879: LD_VAR 0 5
25883: PUSH
25884: LD_VAR 0 4
25888: MINUS
25889: PUSH
25890: LD_INT 0
25892: LESS
25893: IFFALSE 25905
// min_x := 0 else
25895: LD_ADDR_VAR 0 7
25899: PUSH
25900: LD_INT 0
25902: ST_TO_ADDR
25903: GO 25921
// min_x := x - r ;
25905: LD_ADDR_VAR 0 7
25909: PUSH
25910: LD_VAR 0 5
25914: PUSH
25915: LD_VAR 0 4
25919: MINUS
25920: ST_TO_ADDR
// if y - r < 0 then
25921: LD_VAR 0 6
25925: PUSH
25926: LD_VAR 0 4
25930: MINUS
25931: PUSH
25932: LD_INT 0
25934: LESS
25935: IFFALSE 25947
// min_y := 0 else
25937: LD_ADDR_VAR 0 8
25941: PUSH
25942: LD_INT 0
25944: ST_TO_ADDR
25945: GO 25963
// min_y := y - r ;
25947: LD_ADDR_VAR 0 8
25951: PUSH
25952: LD_VAR 0 6
25956: PUSH
25957: LD_VAR 0 4
25961: MINUS
25962: ST_TO_ADDR
// max_x := x + r ;
25963: LD_ADDR_VAR 0 9
25967: PUSH
25968: LD_VAR 0 5
25972: PUSH
25973: LD_VAR 0 4
25977: PLUS
25978: ST_TO_ADDR
// max_y := y + r ;
25979: LD_ADDR_VAR 0 10
25983: PUSH
25984: LD_VAR 0 6
25988: PUSH
25989: LD_VAR 0 4
25993: PLUS
25994: ST_TO_ADDR
// for _x = min_x to max_x do
25995: LD_ADDR_VAR 0 11
25999: PUSH
26000: DOUBLE
26001: LD_VAR 0 7
26005: DEC
26006: ST_TO_ADDR
26007: LD_VAR 0 9
26011: PUSH
26012: FOR_TO
26013: IFFALSE 26095
// for _y = min_y to max_y do
26015: LD_ADDR_VAR 0 12
26019: PUSH
26020: DOUBLE
26021: LD_VAR 0 8
26025: DEC
26026: ST_TO_ADDR
26027: LD_VAR 0 10
26031: PUSH
26032: FOR_TO
26033: IFFALSE 26091
// begin if not ValidHex ( _x , _y ) then
26035: LD_VAR 0 11
26039: PPUSH
26040: LD_VAR 0 12
26044: PPUSH
26045: CALL_OW 488
26049: NOT
26050: IFFALSE 26054
// continue ;
26052: GO 26032
// if MineAtPos ( _x , _y ) then
26054: LD_VAR 0 11
26058: PPUSH
26059: LD_VAR 0 12
26063: PPUSH
26064: CALL_OW 458
26068: IFFALSE 26089
// ViewMineAtPos ( _x , _y , side ) ;
26070: LD_VAR 0 11
26074: PPUSH
26075: LD_VAR 0 12
26079: PPUSH
26080: LD_VAR 0 3
26084: PPUSH
26085: CALL_OW 457
// end ;
26089: GO 26032
26091: POP
26092: POP
26093: GO 26012
26095: POP
26096: POP
// end ;
26097: LD_VAR 0 2
26101: RET
// function DetectMine ( units ) ; var i , x , y , scaners , timer ; begin
26102: LD_INT 0
26104: PPUSH
26105: PPUSH
26106: PPUSH
26107: PPUSH
26108: PPUSH
26109: PPUSH
// if not units then
26110: LD_VAR 0 1
26114: NOT
26115: IFFALSE 26119
// exit ;
26117: GO 26549
// scaners := [ ] ;
26119: LD_ADDR_VAR 0 6
26123: PUSH
26124: EMPTY
26125: ST_TO_ADDR
// for i in units do
26126: LD_ADDR_VAR 0 3
26130: PUSH
26131: LD_VAR 0 1
26135: PUSH
26136: FOR_IN
26137: IFFALSE 26294
// begin if GetWeapon ( i ) <> us_radar or not IsOk ( i ) or GetTag ( i ) = tMineDetector then
26139: LD_VAR 0 3
26143: PPUSH
26144: CALL_OW 264
26148: PUSH
26149: LD_INT 11
26151: NONEQUAL
26152: IFTRUE 26166
26154: PUSH
26155: LD_VAR 0 3
26159: PPUSH
26160: CALL_OW 302
26164: NOT
26165: OR
26166: IFTRUE 26183
26168: PUSH
26169: LD_VAR 0 3
26173: PPUSH
26174: CALL_OW 110
26178: PUSH
26179: LD_INT 502
26181: EQUAL
26182: OR
26183: IFFALSE 26187
// continue ;
26185: GO 26136
// ComStop ( i ) ;
26187: LD_VAR 0 3
26191: PPUSH
26192: CALL_OW 141
// x := GetX ( i ) ;
26196: LD_ADDR_VAR 0 4
26200: PUSH
26201: LD_VAR 0 3
26205: PPUSH
26206: CALL_OW 250
26210: ST_TO_ADDR
// y := GetY ( i ) ;
26211: LD_ADDR_VAR 0 5
26215: PUSH
26216: LD_VAR 0 3
26220: PPUSH
26221: CALL_OW 251
26225: ST_TO_ADDR
// if GetSide ( i ) = your_side then
26226: LD_VAR 0 3
26230: PPUSH
26231: CALL_OW 255
26235: PUSH
26236: LD_OWVAR 2
26240: EQUAL
26241: IFFALSE 26260
// PlaySoundXY ( x , y , mineDetector ) ;
26243: LD_VAR 0 4
26247: PPUSH
26248: LD_VAR 0 5
26252: PPUSH
26253: LD_STRING mineDetector
26255: PPUSH
26256: CALL_OW 366
// scaners := Join ( scaners , i ) ;
26260: LD_ADDR_VAR 0 6
26264: PUSH
26265: LD_VAR 0 6
26269: PPUSH
26270: LD_VAR 0 3
26274: PPUSH
26275: CALL 64771 0 2
26279: ST_TO_ADDR
// SetTag ( i , tMineDetector ) ;
26280: LD_VAR 0 3
26284: PPUSH
26285: LD_INT 502
26287: PPUSH
26288: CALL_OW 109
// end ;
26292: GO 26136
26294: POP
26295: POP
// if not scaners then
26296: LD_VAR 0 6
26300: NOT
26301: IFFALSE 26305
// exit ;
26303: GO 26549
// wait ( 3 ) ;
26305: LD_INT 3
26307: PPUSH
26308: CALL_OW 67
// timer := 6 ;
26312: LD_ADDR_VAR 0 7
26316: PUSH
26317: LD_INT 6
26319: ST_TO_ADDR
// repeat for i in scaners do
26320: LD_ADDR_VAR 0 3
26324: PUSH
26325: LD_VAR 0 6
26329: PUSH
26330: FOR_IN
26331: IFFALSE 26447
// begin if not IsOk ( i ) or HasTask ( i ) or ( GetControl ( i ) = control_manual and not IsDrivenBy ( i ) ) then
26333: LD_VAR 0 3
26337: PPUSH
26338: CALL_OW 302
26342: NOT
26343: IFTRUE 26356
26345: PUSH
26346: LD_VAR 0 3
26350: PPUSH
26351: CALL_OW 314
26355: OR
26356: IFTRUE 26387
26358: PUSH
26359: LD_VAR 0 3
26363: PPUSH
26364: CALL_OW 263
26368: PUSH
26369: LD_INT 1
26371: EQUAL
26372: IFFALSE 26386
26374: PUSH
26375: LD_VAR 0 3
26379: PPUSH
26380: CALL_OW 311
26384: NOT
26385: AND
26386: OR
26387: IFFALSE 26431
// begin SetUnitDisplayNumber ( i , 0 ) ;
26389: LD_VAR 0 3
26393: PPUSH
26394: LD_INT 0
26396: PPUSH
26397: CALL_OW 505
// SetTag ( i , 0 ) ;
26401: LD_VAR 0 3
26405: PPUSH
26406: LD_INT 0
26408: PPUSH
26409: CALL_OW 109
// scaners := scaners diff i ;
26413: LD_ADDR_VAR 0 6
26417: PUSH
26418: LD_VAR 0 6
26422: PUSH
26423: LD_VAR 0 3
26427: DIFF
26428: ST_TO_ADDR
// continue ;
26429: GO 26330
// end ; SetUnitDisplayNumber ( i , timer ) ;
26431: LD_VAR 0 3
26435: PPUSH
26436: LD_VAR 0 7
26440: PPUSH
26441: CALL_OW 505
// end ;
26445: GO 26330
26447: POP
26448: POP
// if not scaners then
26449: LD_VAR 0 6
26453: NOT
26454: IFFALSE 26458
// exit ;
26456: GO 26549
// timer := Dec ( timer ) ;
26458: LD_ADDR_VAR 0 7
26462: PUSH
26463: LD_VAR 0 7
26467: PPUSH
26468: CALL 66166 0 1
26472: ST_TO_ADDR
// wait ( 0 0$1 ) ;
26473: LD_INT 35
26475: PPUSH
26476: CALL_OW 67
// until timer = 0 ;
26480: LD_VAR 0 7
26484: PUSH
26485: LD_INT 0
26487: EQUAL
26488: IFFALSE 26320
// if not scaners then
26490: LD_VAR 0 6
26494: NOT
26495: IFFALSE 26499
// exit ;
26497: GO 26549
// for i in scaners do
26499: LD_ADDR_VAR 0 3
26503: PUSH
26504: LD_VAR 0 6
26508: PUSH
26509: FOR_IN
26510: IFFALSE 26547
// begin SetUnitDisplayNumber ( i , 0 ) ;
26512: LD_VAR 0 3
26516: PPUSH
26517: LD_INT 0
26519: PPUSH
26520: CALL_OW 505
// SetTag ( i , 0 ) ;
26524: LD_VAR 0 3
26528: PPUSH
26529: LD_INT 0
26531: PPUSH
26532: CALL_OW 109
// RevealDetectorMine ( i ) ;
26536: LD_VAR 0 3
26540: PPUSH
26541: CALL 25804 0 1
// end ;
26545: GO 26509
26547: POP
26548: POP
// end ;
26549: LD_VAR 0 2
26553: RET
// export function SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ; begin
26554: LD_INT 0
26556: PPUSH
// if p1 = mine_detector_mode then
26557: LD_VAR 0 2
26561: PUSH
26562: LD_INT 103
26564: EQUAL
26565: IFFALSE 26576
// DetectMine ( units ) ;
26567: LD_VAR 0 1
26571: PPUSH
26572: CALL 26102 0 1
// end ; end_of_file
26576: LD_VAR 0 7
26580: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
26581: LD_INT 0
26583: PPUSH
26584: PPUSH
// if exist_mode then
26585: LD_VAR 0 2
26589: IFFALSE 26635
// begin unit := CreateCharacter ( prefix & ident ) ;
26591: LD_ADDR_VAR 0 5
26595: PUSH
26596: LD_VAR 0 3
26600: PUSH
26601: LD_VAR 0 1
26605: STR
26606: PPUSH
26607: CALL_OW 34
26611: ST_TO_ADDR
// if unit then
26612: LD_VAR 0 5
26616: IFFALSE 26633
// DeleteCharacters ( prefix & ident ) ;
26618: LD_VAR 0 3
26622: PUSH
26623: LD_VAR 0 1
26627: STR
26628: PPUSH
26629: CALL_OW 40
// end else
26633: GO 26650
// unit := NewCharacter ( ident ) ;
26635: LD_ADDR_VAR 0 5
26639: PUSH
26640: LD_VAR 0 1
26644: PPUSH
26645: CALL_OW 25
26649: ST_TO_ADDR
// result := unit ;
26650: LD_ADDR_VAR 0 4
26654: PUSH
26655: LD_VAR 0 5
26659: ST_TO_ADDR
// end ;
26660: LD_VAR 0 4
26664: RET
// export function PrepareUnitForce ( ident , exist_mode , prefix ) ; var unit ; begin
26665: LD_INT 0
26667: PPUSH
26668: PPUSH
// if exist_mode then
26669: LD_VAR 0 2
26673: IFFALSE 26698
// unit := CreateCharacter ( prefix & ident ) else
26675: LD_ADDR_VAR 0 5
26679: PUSH
26680: LD_VAR 0 3
26684: PUSH
26685: LD_VAR 0 1
26689: STR
26690: PPUSH
26691: CALL_OW 34
26695: ST_TO_ADDR
26696: GO 26713
// unit := NewCharacter ( ident ) ;
26698: LD_ADDR_VAR 0 5
26702: PUSH
26703: LD_VAR 0 1
26707: PPUSH
26708: CALL_OW 25
26712: ST_TO_ADDR
// result := unit ;
26713: LD_ADDR_VAR 0 4
26717: PUSH
26718: LD_VAR 0 5
26722: ST_TO_ADDR
// end ;
26723: LD_VAR 0 4
26727: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
26728: LD_INT 0
26730: PPUSH
26731: PPUSH
// if not side or not nation then
26732: LD_VAR 0 1
26736: NOT
26737: IFTRUE 26746
26739: PUSH
26740: LD_VAR 0 2
26744: NOT
26745: OR
26746: IFFALSE 26750
// exit ;
26748: GO 27544
// case nation of nation_american :
26750: LD_VAR 0 2
26754: PUSH
26755: LD_INT 1
26757: DOUBLE
26758: EQUAL
26759: IFTRUE 26763
26761: GO 26985
26763: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 , 90 , 93 ] ; nation_arabian :
26764: LD_ADDR_VAR 0 4
26768: PUSH
26769: LD_INT 35
26771: PUSH
26772: LD_INT 45
26774: PUSH
26775: LD_INT 46
26777: PUSH
26778: LD_INT 47
26780: PUSH
26781: LD_INT 82
26783: PUSH
26784: LD_INT 83
26786: PUSH
26787: LD_INT 84
26789: PUSH
26790: LD_INT 85
26792: PUSH
26793: LD_INT 86
26795: PUSH
26796: LD_INT 1
26798: PUSH
26799: LD_INT 2
26801: PUSH
26802: LD_INT 6
26804: PUSH
26805: LD_INT 15
26807: PUSH
26808: LD_INT 16
26810: PUSH
26811: LD_INT 7
26813: PUSH
26814: LD_INT 12
26816: PUSH
26817: LD_INT 13
26819: PUSH
26820: LD_INT 10
26822: PUSH
26823: LD_INT 14
26825: PUSH
26826: LD_INT 20
26828: PUSH
26829: LD_INT 21
26831: PUSH
26832: LD_INT 22
26834: PUSH
26835: LD_INT 25
26837: PUSH
26838: LD_INT 32
26840: PUSH
26841: LD_INT 27
26843: PUSH
26844: LD_INT 36
26846: PUSH
26847: LD_INT 69
26849: PUSH
26850: LD_INT 39
26852: PUSH
26853: LD_INT 34
26855: PUSH
26856: LD_INT 40
26858: PUSH
26859: LD_INT 48
26861: PUSH
26862: LD_INT 49
26864: PUSH
26865: LD_INT 50
26867: PUSH
26868: LD_INT 51
26870: PUSH
26871: LD_INT 52
26873: PUSH
26874: LD_INT 53
26876: PUSH
26877: LD_INT 54
26879: PUSH
26880: LD_INT 55
26882: PUSH
26883: LD_INT 56
26885: PUSH
26886: LD_INT 57
26888: PUSH
26889: LD_INT 58
26891: PUSH
26892: LD_INT 59
26894: PUSH
26895: LD_INT 60
26897: PUSH
26898: LD_INT 61
26900: PUSH
26901: LD_INT 62
26903: PUSH
26904: LD_INT 80
26906: PUSH
26907: LD_INT 82
26909: PUSH
26910: LD_INT 83
26912: PUSH
26913: LD_INT 84
26915: PUSH
26916: LD_INT 85
26918: PUSH
26919: LD_INT 86
26921: PUSH
26922: LD_INT 90
26924: PUSH
26925: LD_INT 93
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: LIST
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: LIST
26956: LIST
26957: LIST
26958: LIST
26959: LIST
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: LIST
26968: LIST
26969: LIST
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: LIST
26975: LIST
26976: LIST
26977: LIST
26978: LIST
26979: LIST
26980: LIST
26981: LIST
26982: ST_TO_ADDR
26983: GO 27466
26985: LD_INT 2
26987: DOUBLE
26988: EQUAL
26989: IFTRUE 26993
26991: GO 27227
26993: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 , 92 , 94 ] ; nation_russian :
26994: LD_ADDR_VAR 0 4
26998: PUSH
26999: LD_INT 35
27001: PUSH
27002: LD_INT 45
27004: PUSH
27005: LD_INT 46
27007: PUSH
27008: LD_INT 47
27010: PUSH
27011: LD_INT 82
27013: PUSH
27014: LD_INT 83
27016: PUSH
27017: LD_INT 84
27019: PUSH
27020: LD_INT 85
27022: PUSH
27023: LD_INT 87
27025: PUSH
27026: LD_INT 70
27028: PUSH
27029: LD_INT 1
27031: PUSH
27032: LD_INT 11
27034: PUSH
27035: LD_INT 3
27037: PUSH
27038: LD_INT 4
27040: PUSH
27041: LD_INT 5
27043: PUSH
27044: LD_INT 6
27046: PUSH
27047: LD_INT 15
27049: PUSH
27050: LD_INT 18
27052: PUSH
27053: LD_INT 7
27055: PUSH
27056: LD_INT 17
27058: PUSH
27059: LD_INT 8
27061: PUSH
27062: LD_INT 20
27064: PUSH
27065: LD_INT 21
27067: PUSH
27068: LD_INT 22
27070: PUSH
27071: LD_INT 72
27073: PUSH
27074: LD_INT 26
27076: PUSH
27077: LD_INT 69
27079: PUSH
27080: LD_INT 39
27082: PUSH
27083: LD_INT 40
27085: PUSH
27086: LD_INT 41
27088: PUSH
27089: LD_INT 42
27091: PUSH
27092: LD_INT 43
27094: PUSH
27095: LD_INT 48
27097: PUSH
27098: LD_INT 49
27100: PUSH
27101: LD_INT 50
27103: PUSH
27104: LD_INT 51
27106: PUSH
27107: LD_INT 52
27109: PUSH
27110: LD_INT 53
27112: PUSH
27113: LD_INT 54
27115: PUSH
27116: LD_INT 55
27118: PUSH
27119: LD_INT 56
27121: PUSH
27122: LD_INT 60
27124: PUSH
27125: LD_INT 61
27127: PUSH
27128: LD_INT 62
27130: PUSH
27131: LD_INT 66
27133: PUSH
27134: LD_INT 67
27136: PUSH
27137: LD_INT 68
27139: PUSH
27140: LD_INT 81
27142: PUSH
27143: LD_INT 82
27145: PUSH
27146: LD_INT 83
27148: PUSH
27149: LD_INT 84
27151: PUSH
27152: LD_INT 85
27154: PUSH
27155: LD_INT 87
27157: PUSH
27158: LD_INT 88
27160: PUSH
27161: LD_INT 92
27163: PUSH
27164: LD_INT 94
27166: PUSH
27167: EMPTY
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: LIST
27176: LIST
27177: LIST
27178: LIST
27179: LIST
27180: LIST
27181: LIST
27182: LIST
27183: LIST
27184: LIST
27185: LIST
27186: LIST
27187: LIST
27188: LIST
27189: LIST
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: LIST
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: LIST
27205: LIST
27206: LIST
27207: LIST
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: ST_TO_ADDR
27225: GO 27466
27227: LD_INT 3
27229: DOUBLE
27230: EQUAL
27231: IFTRUE 27235
27233: GO 27465
27235: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 , 89 , 91 ] ; end ;
27236: LD_ADDR_VAR 0 4
27240: PUSH
27241: LD_INT 46
27243: PUSH
27244: LD_INT 47
27246: PUSH
27247: LD_INT 1
27249: PUSH
27250: LD_INT 2
27252: PUSH
27253: LD_INT 82
27255: PUSH
27256: LD_INT 83
27258: PUSH
27259: LD_INT 84
27261: PUSH
27262: LD_INT 85
27264: PUSH
27265: LD_INT 86
27267: PUSH
27268: LD_INT 11
27270: PUSH
27271: LD_INT 9
27273: PUSH
27274: LD_INT 20
27276: PUSH
27277: LD_INT 19
27279: PUSH
27280: LD_INT 21
27282: PUSH
27283: LD_INT 24
27285: PUSH
27286: LD_INT 22
27288: PUSH
27289: LD_INT 25
27291: PUSH
27292: LD_INT 28
27294: PUSH
27295: LD_INT 29
27297: PUSH
27298: LD_INT 30
27300: PUSH
27301: LD_INT 31
27303: PUSH
27304: LD_INT 37
27306: PUSH
27307: LD_INT 38
27309: PUSH
27310: LD_INT 32
27312: PUSH
27313: LD_INT 27
27315: PUSH
27316: LD_INT 33
27318: PUSH
27319: LD_INT 69
27321: PUSH
27322: LD_INT 39
27324: PUSH
27325: LD_INT 34
27327: PUSH
27328: LD_INT 40
27330: PUSH
27331: LD_INT 71
27333: PUSH
27334: LD_INT 23
27336: PUSH
27337: LD_INT 44
27339: PUSH
27340: LD_INT 48
27342: PUSH
27343: LD_INT 49
27345: PUSH
27346: LD_INT 50
27348: PUSH
27349: LD_INT 51
27351: PUSH
27352: LD_INT 52
27354: PUSH
27355: LD_INT 53
27357: PUSH
27358: LD_INT 54
27360: PUSH
27361: LD_INT 55
27363: PUSH
27364: LD_INT 56
27366: PUSH
27367: LD_INT 57
27369: PUSH
27370: LD_INT 58
27372: PUSH
27373: LD_INT 59
27375: PUSH
27376: LD_INT 63
27378: PUSH
27379: LD_INT 64
27381: PUSH
27382: LD_INT 65
27384: PUSH
27385: LD_INT 82
27387: PUSH
27388: LD_INT 83
27390: PUSH
27391: LD_INT 84
27393: PUSH
27394: LD_INT 85
27396: PUSH
27397: LD_INT 86
27399: PUSH
27400: LD_INT 89
27402: PUSH
27403: LD_INT 91
27405: PUSH
27406: EMPTY
27407: LIST
27408: LIST
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: LIST
27426: LIST
27427: LIST
27428: LIST
27429: LIST
27430: LIST
27431: LIST
27432: LIST
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: LIST
27438: LIST
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: ST_TO_ADDR
27463: GO 27466
27465: POP
// if state > - 1 and state < 3 then
27466: LD_VAR 0 3
27470: PUSH
27471: LD_INT 1
27473: NEG
27474: GREATER
27475: IFFALSE 27487
27477: PUSH
27478: LD_VAR 0 3
27482: PUSH
27483: LD_INT 3
27485: LESS
27486: AND
27487: IFFALSE 27544
// for i in result do
27489: LD_ADDR_VAR 0 5
27493: PUSH
27494: LD_VAR 0 4
27498: PUSH
27499: FOR_IN
27500: IFFALSE 27542
// if GetTech ( i , side ) <> state then
27502: LD_VAR 0 5
27506: PPUSH
27507: LD_VAR 0 1
27511: PPUSH
27512: CALL_OW 321
27516: PUSH
27517: LD_VAR 0 3
27521: NONEQUAL
27522: IFFALSE 27540
// result := result diff i ;
27524: LD_ADDR_VAR 0 4
27528: PUSH
27529: LD_VAR 0 4
27533: PUSH
27534: LD_VAR 0 5
27538: DIFF
27539: ST_TO_ADDR
27540: GO 27499
27542: POP
27543: POP
// end ;
27544: LD_VAR 0 4
27548: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
27549: LD_INT 0
27551: PPUSH
27552: PPUSH
27553: PPUSH
// result := true ;
27554: LD_ADDR_VAR 0 3
27558: PUSH
27559: LD_INT 1
27561: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
27562: LD_ADDR_VAR 0 5
27566: PUSH
27567: LD_VAR 0 2
27571: PPUSH
27572: CALL_OW 480
27576: ST_TO_ADDR
// if not tmp then
27577: LD_VAR 0 5
27581: NOT
27582: IFFALSE 27586
// exit ;
27584: GO 27635
// for i in tmp do
27586: LD_ADDR_VAR 0 4
27590: PUSH
27591: LD_VAR 0 5
27595: PUSH
27596: FOR_IN
27597: IFFALSE 27633
// if GetTech ( i , side ) <> state_researched then
27599: LD_VAR 0 4
27603: PPUSH
27604: LD_VAR 0 1
27608: PPUSH
27609: CALL_OW 321
27613: PUSH
27614: LD_INT 2
27616: NONEQUAL
27617: IFFALSE 27631
// begin result := false ;
27619: LD_ADDR_VAR 0 3
27623: PUSH
27624: LD_INT 0
27626: ST_TO_ADDR
// exit ;
27627: POP
27628: POP
27629: GO 27635
// end ;
27631: GO 27596
27633: POP
27634: POP
// end ;
27635: LD_VAR 0 3
27639: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
27640: LD_INT 0
27642: PPUSH
27643: PPUSH
27644: PPUSH
27645: PPUSH
27646: PPUSH
27647: PPUSH
27648: PPUSH
27649: PPUSH
27650: PPUSH
27651: PPUSH
27652: PPUSH
27653: PPUSH
27654: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
27655: LD_VAR 0 1
27659: NOT
27660: IFTRUE 27677
27662: PUSH
27663: LD_VAR 0 1
27667: PPUSH
27668: CALL_OW 257
27672: PUSH
27673: LD_INT 9
27675: NONEQUAL
27676: OR
27677: IFFALSE 27681
// exit ;
27679: GO 28260
// side := GetSide ( unit ) ;
27681: LD_ADDR_VAR 0 9
27685: PUSH
27686: LD_VAR 0 1
27690: PPUSH
27691: CALL_OW 255
27695: ST_TO_ADDR
// tech_space := tech_spacanom ;
27696: LD_ADDR_VAR 0 12
27700: PUSH
27701: LD_INT 29
27703: ST_TO_ADDR
// tech_time := tech_taurad ;
27704: LD_ADDR_VAR 0 13
27708: PUSH
27709: LD_INT 28
27711: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
27712: LD_ADDR_VAR 0 11
27716: PUSH
27717: LD_VAR 0 1
27721: PPUSH
27722: CALL_OW 310
27726: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
27727: LD_VAR 0 11
27731: PPUSH
27732: CALL_OW 247
27736: PUSH
27737: LD_INT 2
27739: EQUAL
27740: IFFALSE 27744
// exit ;
27742: GO 28260
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27744: LD_ADDR_VAR 0 8
27748: PUSH
27749: LD_INT 81
27751: PUSH
27752: LD_VAR 0 9
27756: PUSH
27757: EMPTY
27758: LIST
27759: LIST
27760: PUSH
27761: LD_INT 3
27763: PUSH
27764: LD_INT 21
27766: PUSH
27767: LD_INT 3
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: PUSH
27774: EMPTY
27775: LIST
27776: LIST
27777: PUSH
27778: EMPTY
27779: LIST
27780: LIST
27781: PPUSH
27782: CALL_OW 69
27786: ST_TO_ADDR
// if not tmp then
27787: LD_VAR 0 8
27791: NOT
27792: IFFALSE 27796
// exit ;
27794: GO 28260
// if in_unit then
27796: LD_VAR 0 11
27800: IFFALSE 27824
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
27802: LD_ADDR_VAR 0 10
27806: PUSH
27807: LD_VAR 0 8
27811: PPUSH
27812: LD_VAR 0 11
27816: PPUSH
27817: CALL_OW 74
27821: ST_TO_ADDR
27822: GO 27844
// enemy := NearestUnitToUnit ( tmp , unit ) ;
27824: LD_ADDR_VAR 0 10
27828: PUSH
27829: LD_VAR 0 8
27833: PPUSH
27834: LD_VAR 0 1
27838: PPUSH
27839: CALL_OW 74
27843: ST_TO_ADDR
// if not enemy then
27844: LD_VAR 0 10
27848: NOT
27849: IFFALSE 27853
// exit ;
27851: GO 28260
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
27853: LD_VAR 0 11
27857: IFFALSE 27879
27859: PUSH
27860: LD_VAR 0 11
27864: PPUSH
27865: LD_VAR 0 10
27869: PPUSH
27870: CALL_OW 296
27874: PUSH
27875: LD_INT 13
27877: GREATER
27878: AND
27879: IFTRUE 27901
27881: PUSH
27882: LD_VAR 0 1
27886: PPUSH
27887: LD_VAR 0 10
27891: PPUSH
27892: CALL_OW 296
27896: PUSH
27897: LD_INT 12
27899: GREATER
27900: OR
27901: IFFALSE 27905
// exit ;
27903: GO 28260
// missile := [ 1 ] ;
27905: LD_ADDR_VAR 0 14
27909: PUSH
27910: LD_INT 1
27912: PUSH
27913: EMPTY
27914: LIST
27915: ST_TO_ADDR
// if Researched ( side , tech_space ) then
27916: LD_VAR 0 9
27920: PPUSH
27921: LD_VAR 0 12
27925: PPUSH
27926: CALL_OW 325
27930: IFFALSE 27959
// missile := Replace ( missile , missile + 1 , 2 ) ;
27932: LD_ADDR_VAR 0 14
27936: PUSH
27937: LD_VAR 0 14
27941: PPUSH
27942: LD_VAR 0 14
27946: PUSH
27947: LD_INT 1
27949: PLUS
27950: PPUSH
27951: LD_INT 2
27953: PPUSH
27954: CALL_OW 1
27958: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
27959: LD_VAR 0 9
27963: PPUSH
27964: LD_VAR 0 13
27968: PPUSH
27969: CALL_OW 325
27973: IFFALSE 27997
27975: PUSH
27976: LD_VAR 0 10
27980: PPUSH
27981: CALL_OW 255
27985: PPUSH
27986: LD_VAR 0 13
27990: PPUSH
27991: CALL_OW 325
27995: NOT
27996: AND
27997: IFFALSE 28026
// missile := Replace ( missile , missile + 1 , 3 ) ;
27999: LD_ADDR_VAR 0 14
28003: PUSH
28004: LD_VAR 0 14
28008: PPUSH
28009: LD_VAR 0 14
28013: PUSH
28014: LD_INT 1
28016: PLUS
28017: PPUSH
28018: LD_INT 3
28020: PPUSH
28021: CALL_OW 1
28025: ST_TO_ADDR
// if missile < 2 then
28026: LD_VAR 0 14
28030: PUSH
28031: LD_INT 2
28033: LESS
28034: IFFALSE 28038
// exit ;
28036: GO 28260
// x := GetX ( enemy ) ;
28038: LD_ADDR_VAR 0 4
28042: PUSH
28043: LD_VAR 0 10
28047: PPUSH
28048: CALL_OW 250
28052: ST_TO_ADDR
// y := GetY ( enemy ) ;
28053: LD_ADDR_VAR 0 5
28057: PUSH
28058: LD_VAR 0 10
28062: PPUSH
28063: CALL_OW 251
28067: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
28068: LD_ADDR_VAR 0 6
28072: PUSH
28073: LD_VAR 0 4
28077: PUSH
28078: LD_INT 1
28080: NEG
28081: PPUSH
28082: LD_INT 1
28084: PPUSH
28085: CALL_OW 12
28089: PLUS
28090: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
28091: LD_ADDR_VAR 0 7
28095: PUSH
28096: LD_VAR 0 5
28100: PUSH
28101: LD_INT 1
28103: NEG
28104: PPUSH
28105: LD_INT 1
28107: PPUSH
28108: CALL_OW 12
28112: PLUS
28113: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28114: LD_VAR 0 6
28118: PPUSH
28119: LD_VAR 0 7
28123: PPUSH
28124: CALL_OW 488
28128: NOT
28129: IFFALSE 28151
// begin _x := x ;
28131: LD_ADDR_VAR 0 6
28135: PUSH
28136: LD_VAR 0 4
28140: ST_TO_ADDR
// _y := y ;
28141: LD_ADDR_VAR 0 7
28145: PUSH
28146: LD_VAR 0 5
28150: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
28151: LD_ADDR_VAR 0 3
28155: PUSH
28156: LD_INT 1
28158: PPUSH
28159: LD_VAR 0 14
28163: PPUSH
28164: CALL_OW 12
28168: ST_TO_ADDR
// case i of 1 :
28169: LD_VAR 0 3
28173: PUSH
28174: LD_INT 1
28176: DOUBLE
28177: EQUAL
28178: IFTRUE 28182
28180: GO 28199
28182: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
28183: LD_VAR 0 1
28187: PPUSH
28188: LD_VAR 0 10
28192: PPUSH
28193: CALL_OW 115
28197: GO 28260
28199: LD_INT 2
28201: DOUBLE
28202: EQUAL
28203: IFTRUE 28207
28205: GO 28229
28207: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
28208: LD_VAR 0 1
28212: PPUSH
28213: LD_VAR 0 6
28217: PPUSH
28218: LD_VAR 0 7
28222: PPUSH
28223: CALL_OW 153
28227: GO 28260
28229: LD_INT 3
28231: DOUBLE
28232: EQUAL
28233: IFTRUE 28237
28235: GO 28259
28237: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
28238: LD_VAR 0 1
28242: PPUSH
28243: LD_VAR 0 6
28247: PPUSH
28248: LD_VAR 0 7
28252: PPUSH
28253: CALL_OW 154
28257: GO 28260
28259: POP
// end ;
28260: LD_VAR 0 2
28264: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
28265: LD_INT 0
28267: PPUSH
28268: PPUSH
28269: PPUSH
28270: PPUSH
28271: PPUSH
28272: PPUSH
// if not unit or not building then
28273: LD_VAR 0 1
28277: NOT
28278: IFTRUE 28287
28280: PUSH
28281: LD_VAR 0 2
28285: NOT
28286: OR
28287: IFFALSE 28291
// exit ;
28289: GO 28449
// x := GetX ( building ) ;
28291: LD_ADDR_VAR 0 5
28295: PUSH
28296: LD_VAR 0 2
28300: PPUSH
28301: CALL_OW 250
28305: ST_TO_ADDR
// y := GetY ( building ) ;
28306: LD_ADDR_VAR 0 6
28310: PUSH
28311: LD_VAR 0 2
28315: PPUSH
28316: CALL_OW 251
28320: ST_TO_ADDR
// for i := 0 to 5 do
28321: LD_ADDR_VAR 0 4
28325: PUSH
28326: DOUBLE
28327: LD_INT 0
28329: DEC
28330: ST_TO_ADDR
28331: LD_INT 5
28333: PUSH
28334: FOR_TO
28335: IFFALSE 28447
// begin _x := ShiftX ( x , i , 3 ) ;
28337: LD_ADDR_VAR 0 7
28341: PUSH
28342: LD_VAR 0 5
28346: PPUSH
28347: LD_VAR 0 4
28351: PPUSH
28352: LD_INT 3
28354: PPUSH
28355: CALL_OW 272
28359: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
28360: LD_ADDR_VAR 0 8
28364: PUSH
28365: LD_VAR 0 6
28369: PPUSH
28370: LD_VAR 0 4
28374: PPUSH
28375: LD_INT 3
28377: PPUSH
28378: CALL_OW 273
28382: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
28383: LD_VAR 0 7
28387: PPUSH
28388: LD_VAR 0 8
28392: PPUSH
28393: CALL_OW 488
28397: NOT
28398: IFFALSE 28402
// continue ;
28400: GO 28334
// if HexInfo ( _x , _y ) = 0 then
28402: LD_VAR 0 7
28406: PPUSH
28407: LD_VAR 0 8
28411: PPUSH
28412: CALL_OW 428
28416: PUSH
28417: LD_INT 0
28419: EQUAL
28420: IFFALSE 28445
// begin ComMoveXY ( unit , _x , _y ) ;
28422: LD_VAR 0 1
28426: PPUSH
28427: LD_VAR 0 7
28431: PPUSH
28432: LD_VAR 0 8
28436: PPUSH
28437: CALL_OW 111
// exit ;
28441: POP
28442: POP
28443: GO 28449
// end ; end ;
28445: GO 28334
28447: POP
28448: POP
// end ;
28449: LD_VAR 0 3
28453: RET
// export function ScanBase ( side , base_area ) ; begin
28454: LD_INT 0
28456: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
28457: LD_ADDR_VAR 0 3
28461: PUSH
28462: LD_VAR 0 2
28466: PPUSH
28467: LD_INT 81
28469: PUSH
28470: LD_VAR 0 1
28474: PUSH
28475: EMPTY
28476: LIST
28477: LIST
28478: PPUSH
28479: CALL_OW 70
28483: ST_TO_ADDR
// end ;
28484: LD_VAR 0 3
28488: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
28489: LD_INT 0
28491: PPUSH
28492: PPUSH
28493: PPUSH
28494: PPUSH
// result := false ;
28495: LD_ADDR_VAR 0 2
28499: PUSH
28500: LD_INT 0
28502: ST_TO_ADDR
// side := GetSide ( unit ) ;
28503: LD_ADDR_VAR 0 3
28507: PUSH
28508: LD_VAR 0 1
28512: PPUSH
28513: CALL_OW 255
28517: ST_TO_ADDR
// nat := GetNation ( unit ) ;
28518: LD_ADDR_VAR 0 4
28522: PUSH
28523: LD_VAR 0 1
28527: PPUSH
28528: CALL_OW 248
28532: ST_TO_ADDR
// case nat of 1 :
28533: LD_VAR 0 4
28537: PUSH
28538: LD_INT 1
28540: DOUBLE
28541: EQUAL
28542: IFTRUE 28546
28544: GO 28557
28546: POP
// tech := tech_lassight ; 2 :
28547: LD_ADDR_VAR 0 5
28551: PUSH
28552: LD_INT 12
28554: ST_TO_ADDR
28555: GO 28596
28557: LD_INT 2
28559: DOUBLE
28560: EQUAL
28561: IFTRUE 28565
28563: GO 28576
28565: POP
// tech := tech_mortar ; 3 :
28566: LD_ADDR_VAR 0 5
28570: PUSH
28571: LD_INT 41
28573: ST_TO_ADDR
28574: GO 28596
28576: LD_INT 3
28578: DOUBLE
28579: EQUAL
28580: IFTRUE 28584
28582: GO 28595
28584: POP
// tech := tech_bazooka ; end ;
28585: LD_ADDR_VAR 0 5
28589: PUSH
28590: LD_INT 44
28592: ST_TO_ADDR
28593: GO 28596
28595: POP
// if Researched ( side , tech ) then
28596: LD_VAR 0 3
28600: PPUSH
28601: LD_VAR 0 5
28605: PPUSH
28606: CALL_OW 325
28610: IFFALSE 28637
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
28612: LD_ADDR_VAR 0 2
28616: PUSH
28617: LD_INT 5
28619: PUSH
28620: LD_INT 8
28622: PUSH
28623: LD_INT 9
28625: PUSH
28626: EMPTY
28627: LIST
28628: LIST
28629: LIST
28630: PUSH
28631: LD_VAR 0 4
28635: ARRAY
28636: ST_TO_ADDR
// end ;
28637: LD_VAR 0 2
28641: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
28642: LD_INT 0
28644: PPUSH
28645: PPUSH
28646: PPUSH
// if not mines then
28647: LD_VAR 0 2
28651: NOT
28652: IFFALSE 28656
// exit ;
28654: GO 28800
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28656: LD_ADDR_VAR 0 5
28660: PUSH
28661: LD_INT 81
28663: PUSH
28664: LD_VAR 0 1
28668: PUSH
28669: EMPTY
28670: LIST
28671: LIST
28672: PUSH
28673: LD_INT 3
28675: PUSH
28676: LD_INT 21
28678: PUSH
28679: LD_INT 3
28681: PUSH
28682: EMPTY
28683: LIST
28684: LIST
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: EMPTY
28691: LIST
28692: LIST
28693: PPUSH
28694: CALL_OW 69
28698: ST_TO_ADDR
// for i in mines do
28699: LD_ADDR_VAR 0 4
28703: PUSH
28704: LD_VAR 0 2
28708: PUSH
28709: FOR_IN
28710: IFFALSE 28798
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
28712: LD_VAR 0 4
28716: PUSH
28717: LD_INT 1
28719: ARRAY
28720: PPUSH
28721: LD_VAR 0 4
28725: PUSH
28726: LD_INT 2
28728: ARRAY
28729: PPUSH
28730: CALL_OW 458
28734: NOT
28735: IFFALSE 28739
// continue ;
28737: GO 28709
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
28739: LD_VAR 0 4
28743: PUSH
28744: LD_INT 1
28746: ARRAY
28747: PPUSH
28748: LD_VAR 0 4
28752: PUSH
28753: LD_INT 2
28755: ARRAY
28756: PPUSH
28757: CALL_OW 428
28761: PUSH
28762: LD_VAR 0 5
28766: IN
28767: IFFALSE 28796
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
28769: LD_VAR 0 4
28773: PUSH
28774: LD_INT 1
28776: ARRAY
28777: PPUSH
28778: LD_VAR 0 4
28782: PUSH
28783: LD_INT 2
28785: ARRAY
28786: PPUSH
28787: LD_VAR 0 1
28791: PPUSH
28792: CALL_OW 456
// end ;
28796: GO 28709
28798: POP
28799: POP
// end ;
28800: LD_VAR 0 3
28804: RET
// export function Count ( array ) ; begin
28805: LD_INT 0
28807: PPUSH
// result := array + 0 ;
28808: LD_ADDR_VAR 0 2
28812: PUSH
28813: LD_VAR 0 1
28817: PUSH
28818: LD_INT 0
28820: PLUS
28821: ST_TO_ADDR
// end ;
28822: LD_VAR 0 2
28826: RET
// export function IsEmpty ( building ) ; begin
28827: LD_INT 0
28829: PPUSH
// if not building then
28830: LD_VAR 0 1
28834: NOT
28835: IFFALSE 28839
// exit ;
28837: GO 28882
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
28839: LD_ADDR_VAR 0 2
28843: PUSH
28844: LD_VAR 0 1
28848: PUSH
28849: LD_INT 22
28851: PUSH
28852: LD_VAR 0 1
28856: PPUSH
28857: CALL_OW 255
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: LD_INT 58
28868: PUSH
28869: EMPTY
28870: LIST
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PPUSH
28876: CALL_OW 69
28880: IN
28881: ST_TO_ADDR
// end ;
28882: LD_VAR 0 2
28886: RET
// export function IsNotFull ( building ) ; var places ; begin
28887: LD_INT 0
28889: PPUSH
28890: PPUSH
// if not building then
28891: LD_VAR 0 1
28895: NOT
28896: IFFALSE 28900
// exit ;
28898: GO 28928
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
28900: LD_ADDR_VAR 0 2
28904: PUSH
28905: LD_VAR 0 1
28909: PPUSH
28910: LD_INT 3
28912: PUSH
28913: LD_INT 62
28915: PUSH
28916: EMPTY
28917: LIST
28918: PUSH
28919: EMPTY
28920: LIST
28921: LIST
28922: PPUSH
28923: CALL_OW 72
28927: ST_TO_ADDR
// end ;
28928: LD_VAR 0 2
28932: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
28933: LD_INT 0
28935: PPUSH
28936: PPUSH
28937: PPUSH
28938: PPUSH
// tmp := [ ] ;
28939: LD_ADDR_VAR 0 3
28943: PUSH
28944: EMPTY
28945: ST_TO_ADDR
// list := [ ] ;
28946: LD_ADDR_VAR 0 5
28950: PUSH
28951: EMPTY
28952: ST_TO_ADDR
// for i = 16 to 25 do
28953: LD_ADDR_VAR 0 4
28957: PUSH
28958: DOUBLE
28959: LD_INT 16
28961: DEC
28962: ST_TO_ADDR
28963: LD_INT 25
28965: PUSH
28966: FOR_TO
28967: IFFALSE 29040
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
28969: LD_ADDR_VAR 0 3
28973: PUSH
28974: LD_VAR 0 3
28978: PUSH
28979: LD_INT 22
28981: PUSH
28982: LD_VAR 0 1
28986: PPUSH
28987: CALL_OW 255
28991: PUSH
28992: EMPTY
28993: LIST
28994: LIST
28995: PUSH
28996: LD_INT 91
28998: PUSH
28999: LD_VAR 0 1
29003: PUSH
29004: LD_INT 6
29006: PUSH
29007: EMPTY
29008: LIST
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 30
29014: PUSH
29015: LD_VAR 0 4
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: EMPTY
29025: LIST
29026: LIST
29027: LIST
29028: PUSH
29029: EMPTY
29030: LIST
29031: PPUSH
29032: CALL_OW 69
29036: ADD
29037: ST_TO_ADDR
29038: GO 28966
29040: POP
29041: POP
// for i = 1 to tmp do
29042: LD_ADDR_VAR 0 4
29046: PUSH
29047: DOUBLE
29048: LD_INT 1
29050: DEC
29051: ST_TO_ADDR
29052: LD_VAR 0 3
29056: PUSH
29057: FOR_TO
29058: IFFALSE 29146
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
29060: LD_ADDR_VAR 0 5
29064: PUSH
29065: LD_VAR 0 5
29069: PUSH
29070: LD_VAR 0 3
29074: PUSH
29075: LD_VAR 0 4
29079: ARRAY
29080: PPUSH
29081: CALL_OW 266
29085: PUSH
29086: LD_VAR 0 3
29090: PUSH
29091: LD_VAR 0 4
29095: ARRAY
29096: PPUSH
29097: CALL_OW 250
29101: PUSH
29102: LD_VAR 0 3
29106: PUSH
29107: LD_VAR 0 4
29111: ARRAY
29112: PPUSH
29113: CALL_OW 251
29117: PUSH
29118: LD_VAR 0 3
29122: PUSH
29123: LD_VAR 0 4
29127: ARRAY
29128: PPUSH
29129: CALL_OW 254
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: LIST
29138: LIST
29139: PUSH
29140: EMPTY
29141: LIST
29142: ADD
29143: ST_TO_ADDR
29144: GO 29057
29146: POP
29147: POP
// result := list ;
29148: LD_ADDR_VAR 0 2
29152: PUSH
29153: LD_VAR 0 5
29157: ST_TO_ADDR
// end ;
29158: LD_VAR 0 2
29162: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
29163: LD_INT 0
29165: PPUSH
29166: PPUSH
29167: PPUSH
29168: PPUSH
29169: PPUSH
29170: PPUSH
29171: PPUSH
// if not factory then
29172: LD_VAR 0 1
29176: NOT
29177: IFFALSE 29181
// exit ;
29179: GO 29784
// if control = control_apeman then
29181: LD_VAR 0 4
29185: PUSH
29186: LD_INT 5
29188: EQUAL
29189: IFFALSE 29298
// begin tmp := UnitsInside ( factory ) ;
29191: LD_ADDR_VAR 0 8
29195: PUSH
29196: LD_VAR 0 1
29200: PPUSH
29201: CALL_OW 313
29205: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
29206: LD_VAR 0 8
29210: PPUSH
29211: LD_INT 25
29213: PUSH
29214: LD_INT 12
29216: PUSH
29217: EMPTY
29218: LIST
29219: LIST
29220: PPUSH
29221: CALL_OW 72
29225: NOT
29226: IFFALSE 29236
// control := control_manual ;
29228: LD_ADDR_VAR 0 4
29232: PUSH
29233: LD_INT 1
29235: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
29236: LD_ADDR_VAR 0 8
29240: PUSH
29241: LD_VAR 0 1
29245: PPUSH
29246: CALL 28933 0 1
29250: ST_TO_ADDR
// if tmp then
29251: LD_VAR 0 8
29255: IFFALSE 29298
// begin for i in tmp do
29257: LD_ADDR_VAR 0 7
29261: PUSH
29262: LD_VAR 0 8
29266: PUSH
29267: FOR_IN
29268: IFFALSE 29296
// if i [ 1 ] = b_ext_radio then
29270: LD_VAR 0 7
29274: PUSH
29275: LD_INT 1
29277: ARRAY
29278: PUSH
29279: LD_INT 22
29281: EQUAL
29282: IFFALSE 29294
// begin control := control_remote ;
29284: LD_ADDR_VAR 0 4
29288: PUSH
29289: LD_INT 2
29291: ST_TO_ADDR
// break ;
29292: GO 29296
// end ;
29294: GO 29267
29296: POP
29297: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29298: LD_VAR 0 1
29302: PPUSH
29303: LD_VAR 0 2
29307: PPUSH
29308: LD_VAR 0 3
29312: PPUSH
29313: LD_VAR 0 4
29317: PPUSH
29318: LD_VAR 0 5
29322: PPUSH
29323: CALL_OW 448
29327: IFFALSE 29362
// begin result := [ chassis , engine , control , weapon ] ;
29329: LD_ADDR_VAR 0 6
29333: PUSH
29334: LD_VAR 0 2
29338: PUSH
29339: LD_VAR 0 3
29343: PUSH
29344: LD_VAR 0 4
29348: PUSH
29349: LD_VAR 0 5
29353: PUSH
29354: EMPTY
29355: LIST
29356: LIST
29357: LIST
29358: LIST
29359: ST_TO_ADDR
// exit ;
29360: GO 29784
// end ; _chassis := AvailableChassisList ( factory ) ;
29362: LD_ADDR_VAR 0 9
29366: PUSH
29367: LD_VAR 0 1
29371: PPUSH
29372: CALL_OW 475
29376: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
29377: LD_ADDR_VAR 0 11
29381: PUSH
29382: LD_VAR 0 1
29386: PPUSH
29387: CALL_OW 476
29391: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
29392: LD_ADDR_VAR 0 12
29396: PUSH
29397: LD_VAR 0 1
29401: PPUSH
29402: CALL_OW 477
29406: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
29407: LD_ADDR_VAR 0 10
29411: PUSH
29412: LD_VAR 0 1
29416: PPUSH
29417: CALL_OW 478
29421: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
29422: LD_VAR 0 9
29426: NOT
29427: IFTRUE 29436
29429: PUSH
29430: LD_VAR 0 11
29434: NOT
29435: OR
29436: IFTRUE 29445
29438: PUSH
29439: LD_VAR 0 12
29443: NOT
29444: OR
29445: IFTRUE 29454
29447: PUSH
29448: LD_VAR 0 10
29452: NOT
29453: OR
29454: IFFALSE 29489
// begin result := [ chassis , engine , control , weapon ] ;
29456: LD_ADDR_VAR 0 6
29460: PUSH
29461: LD_VAR 0 2
29465: PUSH
29466: LD_VAR 0 3
29470: PUSH
29471: LD_VAR 0 4
29475: PUSH
29476: LD_VAR 0 5
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: LIST
29485: LIST
29486: ST_TO_ADDR
// exit ;
29487: GO 29784
// end ; if not chassis in _chassis then
29489: LD_VAR 0 2
29493: PUSH
29494: LD_VAR 0 9
29498: IN
29499: NOT
29500: IFFALSE 29526
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
29502: LD_ADDR_VAR 0 2
29506: PUSH
29507: LD_VAR 0 9
29511: PUSH
29512: LD_INT 1
29514: PPUSH
29515: LD_VAR 0 9
29519: PPUSH
29520: CALL_OW 12
29524: ARRAY
29525: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
29526: LD_VAR 0 2
29530: PPUSH
29531: LD_VAR 0 3
29535: PPUSH
29536: CALL 29789 0 2
29540: NOT
29541: IFFALSE 29602
// repeat engine := _engine [ 1 ] ;
29543: LD_ADDR_VAR 0 3
29547: PUSH
29548: LD_VAR 0 11
29552: PUSH
29553: LD_INT 1
29555: ARRAY
29556: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
29557: LD_ADDR_VAR 0 11
29561: PUSH
29562: LD_VAR 0 11
29566: PPUSH
29567: LD_INT 1
29569: PPUSH
29570: CALL_OW 3
29574: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
29575: LD_VAR 0 2
29579: PPUSH
29580: LD_VAR 0 3
29584: PPUSH
29585: CALL 29789 0 2
29589: IFTRUE 29600
29591: PUSH
29592: LD_VAR 0 11
29596: PUSH
29597: EMPTY
29598: EQUAL
29599: OR
29600: IFFALSE 29543
// if not control in _control then
29602: LD_VAR 0 4
29606: PUSH
29607: LD_VAR 0 12
29611: IN
29612: NOT
29613: IFFALSE 29639
// control := _control [ rand ( 1 , _control ) ] ;
29615: LD_ADDR_VAR 0 4
29619: PUSH
29620: LD_VAR 0 12
29624: PUSH
29625: LD_INT 1
29627: PPUSH
29628: LD_VAR 0 12
29632: PPUSH
29633: CALL_OW 12
29637: ARRAY
29638: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
29639: LD_VAR 0 2
29643: PPUSH
29644: LD_VAR 0 5
29648: PPUSH
29649: CALL 30011 0 2
29653: NOT
29654: IFFALSE 29715
// repeat weapon := _weapon [ 1 ] ;
29656: LD_ADDR_VAR 0 5
29660: PUSH
29661: LD_VAR 0 10
29665: PUSH
29666: LD_INT 1
29668: ARRAY
29669: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
29670: LD_ADDR_VAR 0 10
29674: PUSH
29675: LD_VAR 0 10
29679: PPUSH
29680: LD_INT 1
29682: PPUSH
29683: CALL_OW 3
29687: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
29688: LD_VAR 0 2
29692: PPUSH
29693: LD_VAR 0 5
29697: PPUSH
29698: CALL 30011 0 2
29702: IFTRUE 29713
29704: PUSH
29705: LD_VAR 0 10
29709: PUSH
29710: EMPTY
29711: EQUAL
29712: OR
29713: IFFALSE 29656
// result := [ ] ;
29715: LD_ADDR_VAR 0 6
29719: PUSH
29720: EMPTY
29721: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
29722: LD_VAR 0 1
29726: PPUSH
29727: LD_VAR 0 2
29731: PPUSH
29732: LD_VAR 0 3
29736: PPUSH
29737: LD_VAR 0 4
29741: PPUSH
29742: LD_VAR 0 5
29746: PPUSH
29747: CALL_OW 448
29751: IFFALSE 29784
// result := [ chassis , engine , control , weapon ] ;
29753: LD_ADDR_VAR 0 6
29757: PUSH
29758: LD_VAR 0 2
29762: PUSH
29763: LD_VAR 0 3
29767: PUSH
29768: LD_VAR 0 4
29772: PUSH
29773: LD_VAR 0 5
29777: PUSH
29778: EMPTY
29779: LIST
29780: LIST
29781: LIST
29782: LIST
29783: ST_TO_ADDR
// end ;
29784: LD_VAR 0 6
29788: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
29789: LD_INT 0
29791: PPUSH
// if not chassis or not engine then
29792: LD_VAR 0 1
29796: NOT
29797: IFTRUE 29806
29799: PUSH
29800: LD_VAR 0 2
29804: NOT
29805: OR
29806: IFFALSE 29810
// exit ;
29808: GO 30006
// case engine of engine_solar :
29810: LD_VAR 0 2
29814: PUSH
29815: LD_INT 2
29817: DOUBLE
29818: EQUAL
29819: IFTRUE 29823
29821: GO 29861
29823: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
29824: LD_ADDR_VAR 0 3
29828: PUSH
29829: LD_INT 11
29831: PUSH
29832: LD_INT 12
29834: PUSH
29835: LD_INT 13
29837: PUSH
29838: LD_INT 14
29840: PUSH
29841: LD_INT 1
29843: PUSH
29844: LD_INT 2
29846: PUSH
29847: LD_INT 3
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: LIST
29856: LIST
29857: LIST
29858: ST_TO_ADDR
29859: GO 29990
29861: LD_INT 1
29863: DOUBLE
29864: EQUAL
29865: IFTRUE 29869
29867: GO 29931
29869: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
29870: LD_ADDR_VAR 0 3
29874: PUSH
29875: LD_INT 11
29877: PUSH
29878: LD_INT 12
29880: PUSH
29881: LD_INT 13
29883: PUSH
29884: LD_INT 14
29886: PUSH
29887: LD_INT 1
29889: PUSH
29890: LD_INT 2
29892: PUSH
29893: LD_INT 3
29895: PUSH
29896: LD_INT 4
29898: PUSH
29899: LD_INT 5
29901: PUSH
29902: LD_INT 21
29904: PUSH
29905: LD_INT 23
29907: PUSH
29908: LD_INT 22
29910: PUSH
29911: LD_INT 24
29913: PUSH
29914: EMPTY
29915: LIST
29916: LIST
29917: LIST
29918: LIST
29919: LIST
29920: LIST
29921: LIST
29922: LIST
29923: LIST
29924: LIST
29925: LIST
29926: LIST
29927: LIST
29928: ST_TO_ADDR
29929: GO 29990
29931: LD_INT 3
29933: DOUBLE
29934: EQUAL
29935: IFTRUE 29939
29937: GO 29989
29939: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
29940: LD_ADDR_VAR 0 3
29944: PUSH
29945: LD_INT 13
29947: PUSH
29948: LD_INT 14
29950: PUSH
29951: LD_INT 2
29953: PUSH
29954: LD_INT 3
29956: PUSH
29957: LD_INT 4
29959: PUSH
29960: LD_INT 5
29962: PUSH
29963: LD_INT 21
29965: PUSH
29966: LD_INT 22
29968: PUSH
29969: LD_INT 23
29971: PUSH
29972: LD_INT 24
29974: PUSH
29975: EMPTY
29976: LIST
29977: LIST
29978: LIST
29979: LIST
29980: LIST
29981: LIST
29982: LIST
29983: LIST
29984: LIST
29985: LIST
29986: ST_TO_ADDR
29987: GO 29990
29989: POP
// result := ( chassis in result ) ;
29990: LD_ADDR_VAR 0 3
29994: PUSH
29995: LD_VAR 0 1
29999: PUSH
30000: LD_VAR 0 3
30004: IN
30005: ST_TO_ADDR
// end ;
30006: LD_VAR 0 3
30010: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
30011: LD_INT 0
30013: PPUSH
// if not chassis or not weapon then
30014: LD_VAR 0 1
30018: NOT
30019: IFTRUE 30028
30021: PUSH
30022: LD_VAR 0 2
30026: NOT
30027: OR
30028: IFFALSE 30032
// exit ;
30030: GO 31126
// case weapon of us_machine_gun :
30032: LD_VAR 0 2
30036: PUSH
30037: LD_INT 2
30039: DOUBLE
30040: EQUAL
30041: IFTRUE 30045
30043: GO 30075
30045: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
30046: LD_ADDR_VAR 0 3
30050: PUSH
30051: LD_INT 1
30053: PUSH
30054: LD_INT 2
30056: PUSH
30057: LD_INT 3
30059: PUSH
30060: LD_INT 4
30062: PUSH
30063: LD_INT 5
30065: PUSH
30066: EMPTY
30067: LIST
30068: LIST
30069: LIST
30070: LIST
30071: LIST
30072: ST_TO_ADDR
30073: GO 31110
30075: LD_INT 3
30077: DOUBLE
30078: EQUAL
30079: IFTRUE 30083
30081: GO 30113
30083: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
30084: LD_ADDR_VAR 0 3
30088: PUSH
30089: LD_INT 1
30091: PUSH
30092: LD_INT 2
30094: PUSH
30095: LD_INT 3
30097: PUSH
30098: LD_INT 4
30100: PUSH
30101: LD_INT 5
30103: PUSH
30104: EMPTY
30105: LIST
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: ST_TO_ADDR
30111: GO 31110
30113: LD_INT 11
30115: DOUBLE
30116: EQUAL
30117: IFTRUE 30121
30119: GO 30151
30121: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
30122: LD_ADDR_VAR 0 3
30126: PUSH
30127: LD_INT 1
30129: PUSH
30130: LD_INT 2
30132: PUSH
30133: LD_INT 3
30135: PUSH
30136: LD_INT 4
30138: PUSH
30139: LD_INT 5
30141: PUSH
30142: EMPTY
30143: LIST
30144: LIST
30145: LIST
30146: LIST
30147: LIST
30148: ST_TO_ADDR
30149: GO 31110
30151: LD_INT 4
30153: DOUBLE
30154: EQUAL
30155: IFTRUE 30159
30157: GO 30185
30159: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
30160: LD_ADDR_VAR 0 3
30164: PUSH
30165: LD_INT 2
30167: PUSH
30168: LD_INT 3
30170: PUSH
30171: LD_INT 4
30173: PUSH
30174: LD_INT 5
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: ST_TO_ADDR
30183: GO 31110
30185: LD_INT 5
30187: DOUBLE
30188: EQUAL
30189: IFTRUE 30193
30191: GO 30219
30193: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
30194: LD_ADDR_VAR 0 3
30198: PUSH
30199: LD_INT 2
30201: PUSH
30202: LD_INT 3
30204: PUSH
30205: LD_INT 4
30207: PUSH
30208: LD_INT 5
30210: PUSH
30211: EMPTY
30212: LIST
30213: LIST
30214: LIST
30215: LIST
30216: ST_TO_ADDR
30217: GO 31110
30219: LD_INT 9
30221: DOUBLE
30222: EQUAL
30223: IFTRUE 30227
30225: GO 30253
30227: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
30228: LD_ADDR_VAR 0 3
30232: PUSH
30233: LD_INT 2
30235: PUSH
30236: LD_INT 3
30238: PUSH
30239: LD_INT 4
30241: PUSH
30242: LD_INT 5
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: LIST
30249: LIST
30250: ST_TO_ADDR
30251: GO 31110
30253: LD_INT 7
30255: DOUBLE
30256: EQUAL
30257: IFTRUE 30261
30259: GO 30287
30261: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
30262: LD_ADDR_VAR 0 3
30266: PUSH
30267: LD_INT 2
30269: PUSH
30270: LD_INT 3
30272: PUSH
30273: LD_INT 4
30275: PUSH
30276: LD_INT 5
30278: PUSH
30279: EMPTY
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: ST_TO_ADDR
30285: GO 31110
30287: LD_INT 12
30289: DOUBLE
30290: EQUAL
30291: IFTRUE 30295
30293: GO 30321
30295: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
30296: LD_ADDR_VAR 0 3
30300: PUSH
30301: LD_INT 2
30303: PUSH
30304: LD_INT 3
30306: PUSH
30307: LD_INT 4
30309: PUSH
30310: LD_INT 5
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: LIST
30317: LIST
30318: ST_TO_ADDR
30319: GO 31110
30321: LD_INT 13
30323: DOUBLE
30324: EQUAL
30325: IFTRUE 30329
30327: GO 30355
30329: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
30330: LD_ADDR_VAR 0 3
30334: PUSH
30335: LD_INT 2
30337: PUSH
30338: LD_INT 3
30340: PUSH
30341: LD_INT 4
30343: PUSH
30344: LD_INT 5
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: LIST
30351: LIST
30352: ST_TO_ADDR
30353: GO 31110
30355: LD_INT 14
30357: DOUBLE
30358: EQUAL
30359: IFTRUE 30363
30361: GO 30381
30363: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
30364: LD_ADDR_VAR 0 3
30368: PUSH
30369: LD_INT 4
30371: PUSH
30372: LD_INT 5
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: ST_TO_ADDR
30379: GO 31110
30381: LD_INT 6
30383: DOUBLE
30384: EQUAL
30385: IFTRUE 30389
30387: GO 30407
30389: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
30390: LD_ADDR_VAR 0 3
30394: PUSH
30395: LD_INT 4
30397: PUSH
30398: LD_INT 5
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: ST_TO_ADDR
30405: GO 31110
30407: LD_INT 10
30409: DOUBLE
30410: EQUAL
30411: IFTRUE 30415
30413: GO 30433
30415: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
30416: LD_ADDR_VAR 0 3
30420: PUSH
30421: LD_INT 4
30423: PUSH
30424: LD_INT 5
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: ST_TO_ADDR
30431: GO 31110
30433: LD_INT 22
30435: DOUBLE
30436: EQUAL
30437: IFTRUE 30441
30439: GO 30467
30441: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
30442: LD_ADDR_VAR 0 3
30446: PUSH
30447: LD_INT 11
30449: PUSH
30450: LD_INT 12
30452: PUSH
30453: LD_INT 13
30455: PUSH
30456: LD_INT 14
30458: PUSH
30459: EMPTY
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: ST_TO_ADDR
30465: GO 31110
30467: LD_INT 23
30469: DOUBLE
30470: EQUAL
30471: IFTRUE 30475
30473: GO 30501
30475: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
30476: LD_ADDR_VAR 0 3
30480: PUSH
30481: LD_INT 11
30483: PUSH
30484: LD_INT 12
30486: PUSH
30487: LD_INT 13
30489: PUSH
30490: LD_INT 14
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: LIST
30497: LIST
30498: ST_TO_ADDR
30499: GO 31110
30501: LD_INT 24
30503: DOUBLE
30504: EQUAL
30505: IFTRUE 30509
30507: GO 30535
30509: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
30510: LD_ADDR_VAR 0 3
30514: PUSH
30515: LD_INT 11
30517: PUSH
30518: LD_INT 12
30520: PUSH
30521: LD_INT 13
30523: PUSH
30524: LD_INT 14
30526: PUSH
30527: EMPTY
30528: LIST
30529: LIST
30530: LIST
30531: LIST
30532: ST_TO_ADDR
30533: GO 31110
30535: LD_INT 30
30537: DOUBLE
30538: EQUAL
30539: IFTRUE 30543
30541: GO 30569
30543: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
30544: LD_ADDR_VAR 0 3
30548: PUSH
30549: LD_INT 11
30551: PUSH
30552: LD_INT 12
30554: PUSH
30555: LD_INT 13
30557: PUSH
30558: LD_INT 14
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: LIST
30565: LIST
30566: ST_TO_ADDR
30567: GO 31110
30569: LD_INT 25
30571: DOUBLE
30572: EQUAL
30573: IFTRUE 30577
30575: GO 30595
30577: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
30578: LD_ADDR_VAR 0 3
30582: PUSH
30583: LD_INT 13
30585: PUSH
30586: LD_INT 14
30588: PUSH
30589: EMPTY
30590: LIST
30591: LIST
30592: ST_TO_ADDR
30593: GO 31110
30595: LD_INT 27
30597: DOUBLE
30598: EQUAL
30599: IFTRUE 30603
30601: GO 30621
30603: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
30604: LD_ADDR_VAR 0 3
30608: PUSH
30609: LD_INT 13
30611: PUSH
30612: LD_INT 14
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: ST_TO_ADDR
30619: GO 31110
30621: LD_INT 92
30623: DOUBLE
30624: EQUAL
30625: IFTRUE 30629
30627: GO 30655
30629: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
30630: LD_ADDR_VAR 0 3
30634: PUSH
30635: LD_INT 11
30637: PUSH
30638: LD_INT 12
30640: PUSH
30641: LD_INT 13
30643: PUSH
30644: LD_INT 14
30646: PUSH
30647: EMPTY
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: ST_TO_ADDR
30653: GO 31110
30655: LD_INT 28
30657: DOUBLE
30658: EQUAL
30659: IFTRUE 30663
30661: GO 30681
30663: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
30664: LD_ADDR_VAR 0 3
30668: PUSH
30669: LD_INT 13
30671: PUSH
30672: LD_INT 14
30674: PUSH
30675: EMPTY
30676: LIST
30677: LIST
30678: ST_TO_ADDR
30679: GO 31110
30681: LD_INT 29
30683: DOUBLE
30684: EQUAL
30685: IFTRUE 30689
30687: GO 30707
30689: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
30690: LD_ADDR_VAR 0 3
30694: PUSH
30695: LD_INT 13
30697: PUSH
30698: LD_INT 14
30700: PUSH
30701: EMPTY
30702: LIST
30703: LIST
30704: ST_TO_ADDR
30705: GO 31110
30707: LD_INT 31
30709: DOUBLE
30710: EQUAL
30711: IFTRUE 30715
30713: GO 30733
30715: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
30716: LD_ADDR_VAR 0 3
30720: PUSH
30721: LD_INT 13
30723: PUSH
30724: LD_INT 14
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: ST_TO_ADDR
30731: GO 31110
30733: LD_INT 26
30735: DOUBLE
30736: EQUAL
30737: IFTRUE 30741
30739: GO 30759
30741: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
30742: LD_ADDR_VAR 0 3
30746: PUSH
30747: LD_INT 13
30749: PUSH
30750: LD_INT 14
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: ST_TO_ADDR
30757: GO 31110
30759: LD_INT 42
30761: DOUBLE
30762: EQUAL
30763: IFTRUE 30767
30765: GO 30793
30767: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
30768: LD_ADDR_VAR 0 3
30772: PUSH
30773: LD_INT 21
30775: PUSH
30776: LD_INT 22
30778: PUSH
30779: LD_INT 23
30781: PUSH
30782: LD_INT 24
30784: PUSH
30785: EMPTY
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: ST_TO_ADDR
30791: GO 31110
30793: LD_INT 43
30795: DOUBLE
30796: EQUAL
30797: IFTRUE 30801
30799: GO 30827
30801: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
30802: LD_ADDR_VAR 0 3
30806: PUSH
30807: LD_INT 21
30809: PUSH
30810: LD_INT 22
30812: PUSH
30813: LD_INT 23
30815: PUSH
30816: LD_INT 24
30818: PUSH
30819: EMPTY
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: ST_TO_ADDR
30825: GO 31110
30827: LD_INT 44
30829: DOUBLE
30830: EQUAL
30831: IFTRUE 30835
30833: GO 30861
30835: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
30836: LD_ADDR_VAR 0 3
30840: PUSH
30841: LD_INT 21
30843: PUSH
30844: LD_INT 22
30846: PUSH
30847: LD_INT 23
30849: PUSH
30850: LD_INT 24
30852: PUSH
30853: EMPTY
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: ST_TO_ADDR
30859: GO 31110
30861: LD_INT 45
30863: DOUBLE
30864: EQUAL
30865: IFTRUE 30869
30867: GO 30895
30869: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
30870: LD_ADDR_VAR 0 3
30874: PUSH
30875: LD_INT 21
30877: PUSH
30878: LD_INT 22
30880: PUSH
30881: LD_INT 23
30883: PUSH
30884: LD_INT 24
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: LIST
30891: LIST
30892: ST_TO_ADDR
30893: GO 31110
30895: LD_INT 49
30897: DOUBLE
30898: EQUAL
30899: IFTRUE 30903
30901: GO 30929
30903: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
30904: LD_ADDR_VAR 0 3
30908: PUSH
30909: LD_INT 21
30911: PUSH
30912: LD_INT 22
30914: PUSH
30915: LD_INT 23
30917: PUSH
30918: LD_INT 24
30920: PUSH
30921: EMPTY
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: ST_TO_ADDR
30927: GO 31110
30929: LD_INT 51
30931: DOUBLE
30932: EQUAL
30933: IFTRUE 30937
30935: GO 30963
30937: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
30938: LD_ADDR_VAR 0 3
30942: PUSH
30943: LD_INT 21
30945: PUSH
30946: LD_INT 22
30948: PUSH
30949: LD_INT 23
30951: PUSH
30952: LD_INT 24
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: LIST
30959: LIST
30960: ST_TO_ADDR
30961: GO 31110
30963: LD_INT 52
30965: DOUBLE
30966: EQUAL
30967: IFTRUE 30971
30969: GO 30997
30971: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
30972: LD_ADDR_VAR 0 3
30976: PUSH
30977: LD_INT 21
30979: PUSH
30980: LD_INT 22
30982: PUSH
30983: LD_INT 23
30985: PUSH
30986: LD_INT 24
30988: PUSH
30989: EMPTY
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: ST_TO_ADDR
30995: GO 31110
30997: LD_INT 53
30999: DOUBLE
31000: EQUAL
31001: IFTRUE 31005
31003: GO 31023
31005: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
31006: LD_ADDR_VAR 0 3
31010: PUSH
31011: LD_INT 23
31013: PUSH
31014: LD_INT 24
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: ST_TO_ADDR
31021: GO 31110
31023: LD_INT 46
31025: DOUBLE
31026: EQUAL
31027: IFTRUE 31031
31029: GO 31049
31031: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
31032: LD_ADDR_VAR 0 3
31036: PUSH
31037: LD_INT 23
31039: PUSH
31040: LD_INT 24
31042: PUSH
31043: EMPTY
31044: LIST
31045: LIST
31046: ST_TO_ADDR
31047: GO 31110
31049: LD_INT 47
31051: DOUBLE
31052: EQUAL
31053: IFTRUE 31057
31055: GO 31075
31057: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_radar :
31058: LD_ADDR_VAR 0 3
31062: PUSH
31063: LD_INT 23
31065: PUSH
31066: LD_INT 24
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: ST_TO_ADDR
31073: GO 31110
31075: LD_INT 98
31077: DOUBLE
31078: EQUAL
31079: IFTRUE 31083
31081: GO 31109
31083: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
31084: LD_ADDR_VAR 0 3
31088: PUSH
31089: LD_INT 21
31091: PUSH
31092: LD_INT 22
31094: PUSH
31095: LD_INT 23
31097: PUSH
31098: LD_INT 24
31100: PUSH
31101: EMPTY
31102: LIST
31103: LIST
31104: LIST
31105: LIST
31106: ST_TO_ADDR
31107: GO 31110
31109: POP
// result := ( chassis in result ) ;
31110: LD_ADDR_VAR 0 3
31114: PUSH
31115: LD_VAR 0 1
31119: PUSH
31120: LD_VAR 0 3
31124: IN
31125: ST_TO_ADDR
// end ;
31126: LD_VAR 0 3
31130: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
31131: LD_INT 0
31133: PPUSH
31134: PPUSH
31135: PPUSH
31136: PPUSH
31137: PPUSH
31138: PPUSH
31139: PPUSH
// result := array ;
31140: LD_ADDR_VAR 0 5
31144: PUSH
31145: LD_VAR 0 1
31149: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
31150: LD_VAR 0 1
31154: NOT
31155: IFTRUE 31164
31157: PUSH
31158: LD_VAR 0 2
31162: NOT
31163: OR
31164: IFTRUE 31173
31166: PUSH
31167: LD_VAR 0 3
31171: NOT
31172: OR
31173: IFTRUE 31187
31175: PUSH
31176: LD_VAR 0 2
31180: PUSH
31181: LD_VAR 0 1
31185: GREATER
31186: OR
31187: IFTRUE 31201
31189: PUSH
31190: LD_VAR 0 3
31194: PUSH
31195: LD_VAR 0 1
31199: GREATER
31200: OR
31201: IFFALSE 31205
// exit ;
31203: GO 31501
// if direction then
31205: LD_VAR 0 4
31209: IFFALSE 31273
// begin d := 1 ;
31211: LD_ADDR_VAR 0 9
31215: PUSH
31216: LD_INT 1
31218: ST_TO_ADDR
// if i_from > i_to then
31219: LD_VAR 0 2
31223: PUSH
31224: LD_VAR 0 3
31228: GREATER
31229: IFFALSE 31255
// length := ( array - i_from ) + i_to else
31231: LD_ADDR_VAR 0 11
31235: PUSH
31236: LD_VAR 0 1
31240: PUSH
31241: LD_VAR 0 2
31245: MINUS
31246: PUSH
31247: LD_VAR 0 3
31251: PLUS
31252: ST_TO_ADDR
31253: GO 31271
// length := i_to - i_from ;
31255: LD_ADDR_VAR 0 11
31259: PUSH
31260: LD_VAR 0 3
31264: PUSH
31265: LD_VAR 0 2
31269: MINUS
31270: ST_TO_ADDR
// end else
31271: GO 31334
// begin d := - 1 ;
31273: LD_ADDR_VAR 0 9
31277: PUSH
31278: LD_INT 1
31280: NEG
31281: ST_TO_ADDR
// if i_from > i_to then
31282: LD_VAR 0 2
31286: PUSH
31287: LD_VAR 0 3
31291: GREATER
31292: IFFALSE 31312
// length := i_from - i_to else
31294: LD_ADDR_VAR 0 11
31298: PUSH
31299: LD_VAR 0 2
31303: PUSH
31304: LD_VAR 0 3
31308: MINUS
31309: ST_TO_ADDR
31310: GO 31334
// length := ( array - i_to ) + i_from ;
31312: LD_ADDR_VAR 0 11
31316: PUSH
31317: LD_VAR 0 1
31321: PUSH
31322: LD_VAR 0 3
31326: MINUS
31327: PUSH
31328: LD_VAR 0 2
31332: PLUS
31333: ST_TO_ADDR
// end ; if not length then
31334: LD_VAR 0 11
31338: NOT
31339: IFFALSE 31343
// exit ;
31341: GO 31501
// tmp := array ;
31343: LD_ADDR_VAR 0 10
31347: PUSH
31348: LD_VAR 0 1
31352: ST_TO_ADDR
// for i = 1 to length do
31353: LD_ADDR_VAR 0 6
31357: PUSH
31358: DOUBLE
31359: LD_INT 1
31361: DEC
31362: ST_TO_ADDR
31363: LD_VAR 0 11
31367: PUSH
31368: FOR_TO
31369: IFFALSE 31489
// begin for j = 1 to array do
31371: LD_ADDR_VAR 0 7
31375: PUSH
31376: DOUBLE
31377: LD_INT 1
31379: DEC
31380: ST_TO_ADDR
31381: LD_VAR 0 1
31385: PUSH
31386: FOR_TO
31387: IFFALSE 31475
// begin k := j + d ;
31389: LD_ADDR_VAR 0 8
31393: PUSH
31394: LD_VAR 0 7
31398: PUSH
31399: LD_VAR 0 9
31403: PLUS
31404: ST_TO_ADDR
// if k > array then
31405: LD_VAR 0 8
31409: PUSH
31410: LD_VAR 0 1
31414: GREATER
31415: IFFALSE 31425
// k := 1 ;
31417: LD_ADDR_VAR 0 8
31421: PUSH
31422: LD_INT 1
31424: ST_TO_ADDR
// if not k then
31425: LD_VAR 0 8
31429: NOT
31430: IFFALSE 31442
// k := array ;
31432: LD_ADDR_VAR 0 8
31436: PUSH
31437: LD_VAR 0 1
31441: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
31442: LD_ADDR_VAR 0 10
31446: PUSH
31447: LD_VAR 0 10
31451: PPUSH
31452: LD_VAR 0 8
31456: PPUSH
31457: LD_VAR 0 1
31461: PUSH
31462: LD_VAR 0 7
31466: ARRAY
31467: PPUSH
31468: CALL_OW 1
31472: ST_TO_ADDR
// end ;
31473: GO 31386
31475: POP
31476: POP
// array := tmp ;
31477: LD_ADDR_VAR 0 1
31481: PUSH
31482: LD_VAR 0 10
31486: ST_TO_ADDR
// end ;
31487: GO 31368
31489: POP
31490: POP
// result := array ;
31491: LD_ADDR_VAR 0 5
31495: PUSH
31496: LD_VAR 0 1
31500: ST_TO_ADDR
// end ;
31501: LD_VAR 0 5
31505: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
31506: LD_INT 0
31508: PPUSH
31509: PPUSH
// result := 0 ;
31510: LD_ADDR_VAR 0 3
31514: PUSH
31515: LD_INT 0
31517: ST_TO_ADDR
// if not array or not value in array then
31518: LD_VAR 0 1
31522: NOT
31523: IFTRUE 31538
31525: PUSH
31526: LD_VAR 0 2
31530: PUSH
31531: LD_VAR 0 1
31535: IN
31536: NOT
31537: OR
31538: IFFALSE 31542
// exit ;
31540: GO 31596
// for i = 1 to array do
31542: LD_ADDR_VAR 0 4
31546: PUSH
31547: DOUBLE
31548: LD_INT 1
31550: DEC
31551: ST_TO_ADDR
31552: LD_VAR 0 1
31556: PUSH
31557: FOR_TO
31558: IFFALSE 31594
// if value = array [ i ] then
31560: LD_VAR 0 2
31564: PUSH
31565: LD_VAR 0 1
31569: PUSH
31570: LD_VAR 0 4
31574: ARRAY
31575: EQUAL
31576: IFFALSE 31592
// begin result := i ;
31578: LD_ADDR_VAR 0 3
31582: PUSH
31583: LD_VAR 0 4
31587: ST_TO_ADDR
// exit ;
31588: POP
31589: POP
31590: GO 31596
// end ;
31592: GO 31557
31594: POP
31595: POP
// end ;
31596: LD_VAR 0 3
31600: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
31601: LD_INT 0
31603: PPUSH
// vc_chassis := chassis ;
31604: LD_ADDR_OWVAR 37
31608: PUSH
31609: LD_VAR 0 1
31613: ST_TO_ADDR
// vc_engine := engine ;
31614: LD_ADDR_OWVAR 39
31618: PUSH
31619: LD_VAR 0 2
31623: ST_TO_ADDR
// vc_control := control ;
31624: LD_ADDR_OWVAR 38
31628: PUSH
31629: LD_VAR 0 3
31633: ST_TO_ADDR
// vc_weapon := weapon ;
31634: LD_ADDR_OWVAR 40
31638: PUSH
31639: LD_VAR 0 4
31643: ST_TO_ADDR
// vc_fuel_battery := fuel ;
31644: LD_ADDR_OWVAR 41
31648: PUSH
31649: LD_VAR 0 5
31653: ST_TO_ADDR
// end ;
31654: LD_VAR 0 6
31658: RET
// export function WantPlant ( unit ) ; var task ; begin
31659: LD_INT 0
31661: PPUSH
31662: PPUSH
// result := false ;
31663: LD_ADDR_VAR 0 2
31667: PUSH
31668: LD_INT 0
31670: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
31671: LD_ADDR_VAR 0 3
31675: PUSH
31676: LD_VAR 0 1
31680: PPUSH
31681: CALL_OW 437
31685: ST_TO_ADDR
// if task then
31686: LD_VAR 0 3
31690: IFFALSE 31718
// if task [ 1 ] [ 1 ] = p then
31692: LD_VAR 0 3
31696: PUSH
31697: LD_INT 1
31699: ARRAY
31700: PUSH
31701: LD_INT 1
31703: ARRAY
31704: PUSH
31705: LD_STRING p
31707: EQUAL
31708: IFFALSE 31718
// result := true ;
31710: LD_ADDR_VAR 0 2
31714: PUSH
31715: LD_INT 1
31717: ST_TO_ADDR
// end ;
31718: LD_VAR 0 2
31722: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
31723: LD_INT 0
31725: PPUSH
31726: PPUSH
31727: PPUSH
31728: PPUSH
// if pos < 1 then
31729: LD_VAR 0 2
31733: PUSH
31734: LD_INT 1
31736: LESS
31737: IFFALSE 31741
// exit ;
31739: GO 32044
// if pos = 1 then
31741: LD_VAR 0 2
31745: PUSH
31746: LD_INT 1
31748: EQUAL
31749: IFFALSE 31782
// result := Replace ( arr , pos [ 1 ] , value ) else
31751: LD_ADDR_VAR 0 4
31755: PUSH
31756: LD_VAR 0 1
31760: PPUSH
31761: LD_VAR 0 2
31765: PUSH
31766: LD_INT 1
31768: ARRAY
31769: PPUSH
31770: LD_VAR 0 3
31774: PPUSH
31775: CALL_OW 1
31779: ST_TO_ADDR
31780: GO 32044
// begin tmp := arr ;
31782: LD_ADDR_VAR 0 6
31786: PUSH
31787: LD_VAR 0 1
31791: ST_TO_ADDR
// s_arr := [ tmp ] ;
31792: LD_ADDR_VAR 0 7
31796: PUSH
31797: LD_VAR 0 6
31801: PUSH
31802: EMPTY
31803: LIST
31804: ST_TO_ADDR
// for i = 1 to pos - 1 do
31805: LD_ADDR_VAR 0 5
31809: PUSH
31810: DOUBLE
31811: LD_INT 1
31813: DEC
31814: ST_TO_ADDR
31815: LD_VAR 0 2
31819: PUSH
31820: LD_INT 1
31822: MINUS
31823: PUSH
31824: FOR_TO
31825: IFFALSE 31870
// begin tmp := tmp [ pos [ i ] ] ;
31827: LD_ADDR_VAR 0 6
31831: PUSH
31832: LD_VAR 0 6
31836: PUSH
31837: LD_VAR 0 2
31841: PUSH
31842: LD_VAR 0 5
31846: ARRAY
31847: ARRAY
31848: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
31849: LD_ADDR_VAR 0 7
31853: PUSH
31854: LD_VAR 0 7
31858: PUSH
31859: LD_VAR 0 6
31863: PUSH
31864: EMPTY
31865: LIST
31866: ADD
31867: ST_TO_ADDR
// end ;
31868: GO 31824
31870: POP
31871: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
31872: LD_ADDR_VAR 0 6
31876: PUSH
31877: LD_VAR 0 6
31881: PPUSH
31882: LD_VAR 0 2
31886: PUSH
31887: LD_VAR 0 2
31891: ARRAY
31892: PPUSH
31893: LD_VAR 0 3
31897: PPUSH
31898: CALL_OW 1
31902: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
31903: LD_ADDR_VAR 0 7
31907: PUSH
31908: LD_VAR 0 7
31912: PPUSH
31913: LD_VAR 0 7
31917: PPUSH
31918: LD_VAR 0 6
31922: PPUSH
31923: CALL_OW 1
31927: ST_TO_ADDR
// for i = s_arr downto 2 do
31928: LD_ADDR_VAR 0 5
31932: PUSH
31933: DOUBLE
31934: LD_VAR 0 7
31938: INC
31939: ST_TO_ADDR
31940: LD_INT 2
31942: PUSH
31943: FOR_DOWNTO
31944: IFFALSE 32028
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
31946: LD_ADDR_VAR 0 6
31950: PUSH
31951: LD_VAR 0 7
31955: PUSH
31956: LD_VAR 0 5
31960: PUSH
31961: LD_INT 1
31963: MINUS
31964: ARRAY
31965: PPUSH
31966: LD_VAR 0 2
31970: PUSH
31971: LD_VAR 0 5
31975: PUSH
31976: LD_INT 1
31978: MINUS
31979: ARRAY
31980: PPUSH
31981: LD_VAR 0 7
31985: PUSH
31986: LD_VAR 0 5
31990: ARRAY
31991: PPUSH
31992: CALL_OW 1
31996: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
31997: LD_ADDR_VAR 0 7
32001: PUSH
32002: LD_VAR 0 7
32006: PPUSH
32007: LD_VAR 0 5
32011: PUSH
32012: LD_INT 1
32014: MINUS
32015: PPUSH
32016: LD_VAR 0 6
32020: PPUSH
32021: CALL_OW 1
32025: ST_TO_ADDR
// end ;
32026: GO 31943
32028: POP
32029: POP
// result := s_arr [ 1 ] ;
32030: LD_ADDR_VAR 0 4
32034: PUSH
32035: LD_VAR 0 7
32039: PUSH
32040: LD_INT 1
32042: ARRAY
32043: ST_TO_ADDR
// end ; end ;
32044: LD_VAR 0 4
32048: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
32049: LD_INT 0
32051: PPUSH
32052: PPUSH
// if not list then
32053: LD_VAR 0 1
32057: NOT
32058: IFFALSE 32062
// exit ;
32060: GO 32153
// i := list [ pos1 ] ;
32062: LD_ADDR_VAR 0 5
32066: PUSH
32067: LD_VAR 0 1
32071: PUSH
32072: LD_VAR 0 2
32076: ARRAY
32077: ST_TO_ADDR
// if not i then
32078: LD_VAR 0 5
32082: NOT
32083: IFFALSE 32087
// exit ;
32085: GO 32153
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
32087: LD_ADDR_VAR 0 1
32091: PUSH
32092: LD_VAR 0 1
32096: PPUSH
32097: LD_VAR 0 2
32101: PPUSH
32102: LD_VAR 0 1
32106: PUSH
32107: LD_VAR 0 3
32111: ARRAY
32112: PPUSH
32113: CALL_OW 1
32117: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
32118: LD_ADDR_VAR 0 1
32122: PUSH
32123: LD_VAR 0 1
32127: PPUSH
32128: LD_VAR 0 3
32132: PPUSH
32133: LD_VAR 0 5
32137: PPUSH
32138: CALL_OW 1
32142: ST_TO_ADDR
// result := list ;
32143: LD_ADDR_VAR 0 4
32147: PUSH
32148: LD_VAR 0 1
32152: ST_TO_ADDR
// end ;
32153: LD_VAR 0 4
32157: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
32158: LD_INT 0
32160: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
32161: LD_ADDR_VAR 0 5
32165: PUSH
32166: LD_VAR 0 1
32170: PPUSH
32171: CALL_OW 250
32175: PPUSH
32176: LD_VAR 0 1
32180: PPUSH
32181: CALL_OW 251
32185: PPUSH
32186: LD_VAR 0 2
32190: PPUSH
32191: LD_VAR 0 3
32195: PPUSH
32196: LD_VAR 0 4
32200: PPUSH
32201: CALL 32583 0 5
32205: ST_TO_ADDR
// end ;
32206: LD_VAR 0 5
32210: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
32211: LD_INT 0
32213: PPUSH
32214: PPUSH
32215: PPUSH
32216: PPUSH
// if not list or not unit then
32217: LD_VAR 0 2
32221: NOT
32222: IFTRUE 32231
32224: PUSH
32225: LD_VAR 0 1
32229: NOT
32230: OR
32231: IFFALSE 32235
// exit ;
32233: GO 32578
// result := [ ] ;
32235: LD_ADDR_VAR 0 5
32239: PUSH
32240: EMPTY
32241: ST_TO_ADDR
// for i in list do
32242: LD_ADDR_VAR 0 6
32246: PUSH
32247: LD_VAR 0 2
32251: PUSH
32252: FOR_IN
32253: IFFALSE 32471
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
32255: LD_ADDR_VAR 0 8
32259: PUSH
32260: LD_VAR 0 1
32264: PPUSH
32265: LD_VAR 0 6
32269: PUSH
32270: LD_INT 1
32272: ARRAY
32273: PPUSH
32274: LD_VAR 0 6
32278: PUSH
32279: LD_INT 2
32281: ARRAY
32282: PPUSH
32283: CALL_OW 297
32287: ST_TO_ADDR
// if not Count ( result ) then
32288: LD_VAR 0 5
32292: PPUSH
32293: CALL 28805 0 1
32297: NOT
32298: IFFALSE 32331
// begin result := Join ( result , [ i , tmp ] ) ;
32300: LD_ADDR_VAR 0 5
32304: PUSH
32305: LD_VAR 0 5
32309: PPUSH
32310: LD_VAR 0 6
32314: PUSH
32315: LD_VAR 0 8
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PPUSH
32324: CALL 64771 0 2
32328: ST_TO_ADDR
// continue ;
32329: GO 32252
// end ; if result [ result ] [ 2 ] <= tmp then
32331: LD_VAR 0 5
32335: PUSH
32336: LD_VAR 0 5
32340: ARRAY
32341: PUSH
32342: LD_INT 2
32344: ARRAY
32345: PUSH
32346: LD_VAR 0 8
32350: LESSEQUAL
32351: IFFALSE 32384
// result := Join ( result , [ i , tmp ] ) else
32353: LD_ADDR_VAR 0 5
32357: PUSH
32358: LD_VAR 0 5
32362: PPUSH
32363: LD_VAR 0 6
32367: PUSH
32368: LD_VAR 0 8
32372: PUSH
32373: EMPTY
32374: LIST
32375: LIST
32376: PPUSH
32377: CALL 64771 0 2
32381: ST_TO_ADDR
32382: GO 32469
// begin for j := 1 to Count ( result ) do
32384: LD_ADDR_VAR 0 7
32388: PUSH
32389: DOUBLE
32390: LD_INT 1
32392: DEC
32393: ST_TO_ADDR
32394: LD_VAR 0 5
32398: PPUSH
32399: CALL 28805 0 1
32403: PUSH
32404: FOR_TO
32405: IFFALSE 32467
// begin if tmp < result [ j ] [ 2 ] then
32407: LD_VAR 0 8
32411: PUSH
32412: LD_VAR 0 5
32416: PUSH
32417: LD_VAR 0 7
32421: ARRAY
32422: PUSH
32423: LD_INT 2
32425: ARRAY
32426: LESS
32427: IFFALSE 32465
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32429: LD_ADDR_VAR 0 5
32433: PUSH
32434: LD_VAR 0 5
32438: PPUSH
32439: LD_VAR 0 7
32443: PPUSH
32444: LD_VAR 0 6
32448: PUSH
32449: LD_VAR 0 8
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PPUSH
32458: CALL_OW 2
32462: ST_TO_ADDR
// break ;
32463: GO 32467
// end ; end ;
32465: GO 32404
32467: POP
32468: POP
// end ; end ;
32469: GO 32252
32471: POP
32472: POP
// if result and not asc then
32473: LD_VAR 0 5
32477: IFFALSE 32486
32479: PUSH
32480: LD_VAR 0 3
32484: NOT
32485: AND
32486: IFFALSE 32503
// result := ReverseArray ( result ) ;
32488: LD_ADDR_VAR 0 5
32492: PUSH
32493: LD_VAR 0 5
32497: PPUSH
32498: CALL 59861 0 1
32502: ST_TO_ADDR
// tmp := [ ] ;
32503: LD_ADDR_VAR 0 8
32507: PUSH
32508: EMPTY
32509: ST_TO_ADDR
// if mode then
32510: LD_VAR 0 4
32514: IFFALSE 32578
// begin for i := 1 to result do
32516: LD_ADDR_VAR 0 6
32520: PUSH
32521: DOUBLE
32522: LD_INT 1
32524: DEC
32525: ST_TO_ADDR
32526: LD_VAR 0 5
32530: PUSH
32531: FOR_TO
32532: IFFALSE 32566
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
32534: LD_ADDR_VAR 0 8
32538: PUSH
32539: LD_VAR 0 8
32543: PPUSH
32544: LD_VAR 0 5
32548: PUSH
32549: LD_VAR 0 6
32553: ARRAY
32554: PUSH
32555: LD_INT 1
32557: ARRAY
32558: PPUSH
32559: CALL 64771 0 2
32563: ST_TO_ADDR
32564: GO 32531
32566: POP
32567: POP
// result := tmp ;
32568: LD_ADDR_VAR 0 5
32572: PUSH
32573: LD_VAR 0 8
32577: ST_TO_ADDR
// end ; end ;
32578: LD_VAR 0 5
32582: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
32583: LD_INT 0
32585: PPUSH
32586: PPUSH
32587: PPUSH
32588: PPUSH
// if not list then
32589: LD_VAR 0 3
32593: NOT
32594: IFFALSE 32598
// exit ;
32596: GO 32988
// result := [ ] ;
32598: LD_ADDR_VAR 0 6
32602: PUSH
32603: EMPTY
32604: ST_TO_ADDR
// for i in list do
32605: LD_ADDR_VAR 0 7
32609: PUSH
32610: LD_VAR 0 3
32614: PUSH
32615: FOR_IN
32616: IFFALSE 32818
// begin tmp := GetDistUnitXY ( i , x , y ) ;
32618: LD_ADDR_VAR 0 9
32622: PUSH
32623: LD_VAR 0 7
32627: PPUSH
32628: LD_VAR 0 1
32632: PPUSH
32633: LD_VAR 0 2
32637: PPUSH
32638: CALL_OW 297
32642: ST_TO_ADDR
// if not result then
32643: LD_VAR 0 6
32647: NOT
32648: IFFALSE 32674
// result := [ [ i , tmp ] ] else
32650: LD_ADDR_VAR 0 6
32654: PUSH
32655: LD_VAR 0 7
32659: PUSH
32660: LD_VAR 0 9
32664: PUSH
32665: EMPTY
32666: LIST
32667: LIST
32668: PUSH
32669: EMPTY
32670: LIST
32671: ST_TO_ADDR
32672: GO 32816
// begin if result [ result ] [ 2 ] <= tmp then
32674: LD_VAR 0 6
32678: PUSH
32679: LD_VAR 0 6
32683: ARRAY
32684: PUSH
32685: LD_INT 2
32687: ARRAY
32688: PUSH
32689: LD_VAR 0 9
32693: LESSEQUAL
32694: IFFALSE 32736
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
32696: LD_ADDR_VAR 0 6
32700: PUSH
32701: LD_VAR 0 6
32705: PPUSH
32706: LD_VAR 0 6
32710: PUSH
32711: LD_INT 1
32713: PLUS
32714: PPUSH
32715: LD_VAR 0 7
32719: PUSH
32720: LD_VAR 0 9
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: PPUSH
32729: CALL_OW 2
32733: ST_TO_ADDR
32734: GO 32816
// for j := 1 to result do
32736: LD_ADDR_VAR 0 8
32740: PUSH
32741: DOUBLE
32742: LD_INT 1
32744: DEC
32745: ST_TO_ADDR
32746: LD_VAR 0 6
32750: PUSH
32751: FOR_TO
32752: IFFALSE 32814
// begin if tmp < result [ j ] [ 2 ] then
32754: LD_VAR 0 9
32758: PUSH
32759: LD_VAR 0 6
32763: PUSH
32764: LD_VAR 0 8
32768: ARRAY
32769: PUSH
32770: LD_INT 2
32772: ARRAY
32773: LESS
32774: IFFALSE 32812
// begin result := Insert ( result , j , [ i , tmp ] ) ;
32776: LD_ADDR_VAR 0 6
32780: PUSH
32781: LD_VAR 0 6
32785: PPUSH
32786: LD_VAR 0 8
32790: PPUSH
32791: LD_VAR 0 7
32795: PUSH
32796: LD_VAR 0 9
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PPUSH
32805: CALL_OW 2
32809: ST_TO_ADDR
// break ;
32810: GO 32814
// end ; end ;
32812: GO 32751
32814: POP
32815: POP
// end ; end ;
32816: GO 32615
32818: POP
32819: POP
// if result and not asc then
32820: LD_VAR 0 6
32824: IFFALSE 32833
32826: PUSH
32827: LD_VAR 0 4
32831: NOT
32832: AND
32833: IFFALSE 32908
// begin tmp := result ;
32835: LD_ADDR_VAR 0 9
32839: PUSH
32840: LD_VAR 0 6
32844: ST_TO_ADDR
// for i = tmp downto 1 do
32845: LD_ADDR_VAR 0 7
32849: PUSH
32850: DOUBLE
32851: LD_VAR 0 9
32855: INC
32856: ST_TO_ADDR
32857: LD_INT 1
32859: PUSH
32860: FOR_DOWNTO
32861: IFFALSE 32906
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
32863: LD_ADDR_VAR 0 6
32867: PUSH
32868: LD_VAR 0 6
32872: PPUSH
32873: LD_VAR 0 9
32877: PUSH
32878: LD_VAR 0 7
32882: MINUS
32883: PUSH
32884: LD_INT 1
32886: PLUS
32887: PPUSH
32888: LD_VAR 0 9
32892: PUSH
32893: LD_VAR 0 7
32897: ARRAY
32898: PPUSH
32899: CALL_OW 1
32903: ST_TO_ADDR
32904: GO 32860
32906: POP
32907: POP
// end ; tmp := [ ] ;
32908: LD_ADDR_VAR 0 9
32912: PUSH
32913: EMPTY
32914: ST_TO_ADDR
// if mode then
32915: LD_VAR 0 5
32919: IFFALSE 32988
// begin for i = 1 to result do
32921: LD_ADDR_VAR 0 7
32925: PUSH
32926: DOUBLE
32927: LD_INT 1
32929: DEC
32930: ST_TO_ADDR
32931: LD_VAR 0 6
32935: PUSH
32936: FOR_TO
32937: IFFALSE 32976
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
32939: LD_ADDR_VAR 0 9
32943: PUSH
32944: LD_VAR 0 9
32948: PPUSH
32949: LD_VAR 0 7
32953: PPUSH
32954: LD_VAR 0 6
32958: PUSH
32959: LD_VAR 0 7
32963: ARRAY
32964: PUSH
32965: LD_INT 1
32967: ARRAY
32968: PPUSH
32969: CALL_OW 1
32973: ST_TO_ADDR
32974: GO 32936
32976: POP
32977: POP
// result := tmp ;
32978: LD_ADDR_VAR 0 6
32982: PUSH
32983: LD_VAR 0 9
32987: ST_TO_ADDR
// end ; end ;
32988: LD_VAR 0 6
32992: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
32993: LD_INT 0
32995: PPUSH
32996: PPUSH
32997: PPUSH
32998: PPUSH
32999: PPUSH
33000: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
33001: LD_ADDR_VAR 0 5
33005: PUSH
33006: LD_INT 0
33008: PUSH
33009: LD_INT 0
33011: PUSH
33012: LD_INT 0
33014: PUSH
33015: EMPTY
33016: PUSH
33017: EMPTY
33018: LIST
33019: LIST
33020: LIST
33021: LIST
33022: ST_TO_ADDR
// if not x or not y then
33023: LD_VAR 0 2
33027: NOT
33028: IFTRUE 33037
33030: PUSH
33031: LD_VAR 0 3
33035: NOT
33036: OR
33037: IFFALSE 33041
// exit ;
33039: GO 34697
// if not range then
33041: LD_VAR 0 4
33045: NOT
33046: IFFALSE 33056
// range := 10 ;
33048: LD_ADDR_VAR 0 4
33052: PUSH
33053: LD_INT 10
33055: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
33056: LD_ADDR_VAR 0 8
33060: PUSH
33061: LD_INT 81
33063: PUSH
33064: LD_VAR 0 1
33068: PUSH
33069: EMPTY
33070: LIST
33071: LIST
33072: PUSH
33073: LD_INT 92
33075: PUSH
33076: LD_VAR 0 2
33080: PUSH
33081: LD_VAR 0 3
33085: PUSH
33086: LD_VAR 0 4
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: PUSH
33097: LD_INT 3
33099: PUSH
33100: LD_INT 21
33102: PUSH
33103: LD_INT 3
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: LIST
33118: PPUSH
33119: CALL_OW 69
33123: ST_TO_ADDR
// if not tmp then
33124: LD_VAR 0 8
33128: NOT
33129: IFFALSE 33133
// exit ;
33131: GO 34697
// for i in tmp do
33133: LD_ADDR_VAR 0 6
33137: PUSH
33138: LD_VAR 0 8
33142: PUSH
33143: FOR_IN
33144: IFFALSE 34672
// begin points := [ 0 , 0 , 0 ] ;
33146: LD_ADDR_VAR 0 9
33150: PUSH
33151: LD_INT 0
33153: PUSH
33154: LD_INT 0
33156: PUSH
33157: LD_INT 0
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: LIST
33164: ST_TO_ADDR
// bpoints := 1 ;
33165: LD_ADDR_VAR 0 10
33169: PUSH
33170: LD_INT 1
33172: ST_TO_ADDR
// case GetType ( i ) of unit_human :
33173: LD_VAR 0 6
33177: PPUSH
33178: CALL_OW 247
33182: PUSH
33183: LD_INT 1
33185: DOUBLE
33186: EQUAL
33187: IFTRUE 33191
33189: GO 33773
33191: POP
// begin if GetClass ( i ) = 1 then
33192: LD_VAR 0 6
33196: PPUSH
33197: CALL_OW 257
33201: PUSH
33202: LD_INT 1
33204: EQUAL
33205: IFFALSE 33226
// points := [ 10 , 5 , 3 ] ;
33207: LD_ADDR_VAR 0 9
33211: PUSH
33212: LD_INT 10
33214: PUSH
33215: LD_INT 5
33217: PUSH
33218: LD_INT 3
33220: PUSH
33221: EMPTY
33222: LIST
33223: LIST
33224: LIST
33225: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
33226: LD_VAR 0 6
33230: PPUSH
33231: CALL_OW 257
33235: PUSH
33236: LD_INT 2
33238: PUSH
33239: LD_INT 3
33241: PUSH
33242: LD_INT 4
33244: PUSH
33245: EMPTY
33246: LIST
33247: LIST
33248: LIST
33249: IN
33250: IFFALSE 33271
// points := [ 3 , 2 , 1 ] ;
33252: LD_ADDR_VAR 0 9
33256: PUSH
33257: LD_INT 3
33259: PUSH
33260: LD_INT 2
33262: PUSH
33263: LD_INT 1
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: LIST
33270: ST_TO_ADDR
// if GetClass ( i ) = 5 then
33271: LD_VAR 0 6
33275: PPUSH
33276: CALL_OW 257
33280: PUSH
33281: LD_INT 5
33283: EQUAL
33284: IFFALSE 33305
// points := [ 130 , 5 , 2 ] ;
33286: LD_ADDR_VAR 0 9
33290: PUSH
33291: LD_INT 130
33293: PUSH
33294: LD_INT 5
33296: PUSH
33297: LD_INT 2
33299: PUSH
33300: EMPTY
33301: LIST
33302: LIST
33303: LIST
33304: ST_TO_ADDR
// if GetClass ( i ) = 8 then
33305: LD_VAR 0 6
33309: PPUSH
33310: CALL_OW 257
33314: PUSH
33315: LD_INT 8
33317: EQUAL
33318: IFFALSE 33339
// points := [ 35 , 35 , 30 ] ;
33320: LD_ADDR_VAR 0 9
33324: PUSH
33325: LD_INT 35
33327: PUSH
33328: LD_INT 35
33330: PUSH
33331: LD_INT 30
33333: PUSH
33334: EMPTY
33335: LIST
33336: LIST
33337: LIST
33338: ST_TO_ADDR
// if GetClass ( i ) = 9 then
33339: LD_VAR 0 6
33343: PPUSH
33344: CALL_OW 257
33348: PUSH
33349: LD_INT 9
33351: EQUAL
33352: IFFALSE 33373
// points := [ 20 , 55 , 40 ] ;
33354: LD_ADDR_VAR 0 9
33358: PUSH
33359: LD_INT 20
33361: PUSH
33362: LD_INT 55
33364: PUSH
33365: LD_INT 40
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: LIST
33372: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
33373: LD_VAR 0 6
33377: PPUSH
33378: CALL_OW 257
33382: PUSH
33383: LD_INT 12
33385: PUSH
33386: LD_INT 16
33388: PUSH
33389: EMPTY
33390: LIST
33391: LIST
33392: IN
33393: IFFALSE 33414
// points := [ 5 , 3 , 2 ] ;
33395: LD_ADDR_VAR 0 9
33399: PUSH
33400: LD_INT 5
33402: PUSH
33403: LD_INT 3
33405: PUSH
33406: LD_INT 2
33408: PUSH
33409: EMPTY
33410: LIST
33411: LIST
33412: LIST
33413: ST_TO_ADDR
// if GetClass ( i ) = 17 then
33414: LD_VAR 0 6
33418: PPUSH
33419: CALL_OW 257
33423: PUSH
33424: LD_INT 17
33426: EQUAL
33427: IFFALSE 33448
// points := [ 100 , 50 , 75 ] ;
33429: LD_ADDR_VAR 0 9
33433: PUSH
33434: LD_INT 100
33436: PUSH
33437: LD_INT 50
33439: PUSH
33440: LD_INT 75
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: LIST
33447: ST_TO_ADDR
// if GetClass ( i ) = 15 then
33448: LD_VAR 0 6
33452: PPUSH
33453: CALL_OW 257
33457: PUSH
33458: LD_INT 15
33460: EQUAL
33461: IFFALSE 33482
// points := [ 10 , 5 , 3 ] ;
33463: LD_ADDR_VAR 0 9
33467: PUSH
33468: LD_INT 10
33470: PUSH
33471: LD_INT 5
33473: PUSH
33474: LD_INT 3
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: LIST
33481: ST_TO_ADDR
// if GetClass ( i ) = 14 then
33482: LD_VAR 0 6
33486: PPUSH
33487: CALL_OW 257
33491: PUSH
33492: LD_INT 14
33494: EQUAL
33495: IFFALSE 33516
// points := [ 10 , 0 , 0 ] ;
33497: LD_ADDR_VAR 0 9
33501: PUSH
33502: LD_INT 10
33504: PUSH
33505: LD_INT 0
33507: PUSH
33508: LD_INT 0
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: LIST
33515: ST_TO_ADDR
// if GetClass ( i ) = 11 then
33516: LD_VAR 0 6
33520: PPUSH
33521: CALL_OW 257
33525: PUSH
33526: LD_INT 11
33528: EQUAL
33529: IFFALSE 33550
// points := [ 30 , 10 , 5 ] ;
33531: LD_ADDR_VAR 0 9
33535: PUSH
33536: LD_INT 30
33538: PUSH
33539: LD_INT 10
33541: PUSH
33542: LD_INT 5
33544: PUSH
33545: EMPTY
33546: LIST
33547: LIST
33548: LIST
33549: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
33550: LD_VAR 0 1
33554: PPUSH
33555: LD_INT 5
33557: PPUSH
33558: CALL_OW 321
33562: PUSH
33563: LD_INT 2
33565: EQUAL
33566: IFFALSE 33583
// bpoints := bpoints * 1.8 ;
33568: LD_ADDR_VAR 0 10
33572: PUSH
33573: LD_VAR 0 10
33577: PUSH
33578: LD_REAL  1.80000000000000E+0000
33581: MUL
33582: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
33583: LD_VAR 0 6
33587: PPUSH
33588: CALL_OW 257
33592: PUSH
33593: LD_INT 1
33595: PUSH
33596: LD_INT 2
33598: PUSH
33599: LD_INT 3
33601: PUSH
33602: LD_INT 4
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: LIST
33609: LIST
33610: IN
33611: IFFALSE 33631
33613: PUSH
33614: LD_VAR 0 1
33618: PPUSH
33619: LD_INT 51
33621: PPUSH
33622: CALL_OW 321
33626: PUSH
33627: LD_INT 2
33629: EQUAL
33630: AND
33631: IFFALSE 33648
// bpoints := bpoints * 1.2 ;
33633: LD_ADDR_VAR 0 10
33637: PUSH
33638: LD_VAR 0 10
33642: PUSH
33643: LD_REAL  1.20000000000000E+0000
33646: MUL
33647: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
33648: LD_VAR 0 6
33652: PPUSH
33653: CALL_OW 257
33657: PUSH
33658: LD_INT 5
33660: PUSH
33661: LD_INT 7
33663: PUSH
33664: LD_INT 9
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: LIST
33671: IN
33672: IFFALSE 33692
33674: PUSH
33675: LD_VAR 0 1
33679: PPUSH
33680: LD_INT 52
33682: PPUSH
33683: CALL_OW 321
33687: PUSH
33688: LD_INT 2
33690: EQUAL
33691: AND
33692: IFFALSE 33709
// bpoints := bpoints * 1.5 ;
33694: LD_ADDR_VAR 0 10
33698: PUSH
33699: LD_VAR 0 10
33703: PUSH
33704: LD_REAL  1.50000000000000E+0000
33707: MUL
33708: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
33709: LD_VAR 0 1
33713: PPUSH
33714: LD_INT 66
33716: PPUSH
33717: CALL_OW 321
33721: PUSH
33722: LD_INT 2
33724: EQUAL
33725: IFFALSE 33742
// bpoints := bpoints * 1.1 ;
33727: LD_ADDR_VAR 0 10
33731: PUSH
33732: LD_VAR 0 10
33736: PUSH
33737: LD_REAL  1.10000000000000E+0000
33740: MUL
33741: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
33742: LD_ADDR_VAR 0 10
33746: PUSH
33747: LD_VAR 0 10
33751: PUSH
33752: LD_VAR 0 6
33756: PPUSH
33757: LD_INT 1
33759: PPUSH
33760: CALL_OW 259
33764: PUSH
33765: LD_REAL  1.15000000000000E+0000
33768: MUL
33769: MUL
33770: ST_TO_ADDR
// end ; unit_vehicle :
33771: GO 34601
33773: LD_INT 2
33775: DOUBLE
33776: EQUAL
33777: IFTRUE 33781
33779: GO 34589
33781: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
33782: LD_VAR 0 6
33786: PPUSH
33787: CALL_OW 264
33791: PUSH
33792: LD_INT 2
33794: PUSH
33795: LD_INT 42
33797: PUSH
33798: LD_INT 24
33800: PUSH
33801: EMPTY
33802: LIST
33803: LIST
33804: LIST
33805: IN
33806: IFFALSE 33827
// points := [ 25 , 5 , 3 ] ;
33808: LD_ADDR_VAR 0 9
33812: PUSH
33813: LD_INT 25
33815: PUSH
33816: LD_INT 5
33818: PUSH
33819: LD_INT 3
33821: PUSH
33822: EMPTY
33823: LIST
33824: LIST
33825: LIST
33826: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
33827: LD_VAR 0 6
33831: PPUSH
33832: CALL_OW 264
33836: PUSH
33837: LD_INT 4
33839: PUSH
33840: LD_INT 43
33842: PUSH
33843: LD_INT 25
33845: PUSH
33846: EMPTY
33847: LIST
33848: LIST
33849: LIST
33850: IN
33851: IFFALSE 33872
// points := [ 40 , 15 , 5 ] ;
33853: LD_ADDR_VAR 0 9
33857: PUSH
33858: LD_INT 40
33860: PUSH
33861: LD_INT 15
33863: PUSH
33864: LD_INT 5
33866: PUSH
33867: EMPTY
33868: LIST
33869: LIST
33870: LIST
33871: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
33872: LD_VAR 0 6
33876: PPUSH
33877: CALL_OW 264
33881: PUSH
33882: LD_INT 3
33884: PUSH
33885: LD_INT 23
33887: PUSH
33888: EMPTY
33889: LIST
33890: LIST
33891: IN
33892: IFFALSE 33913
// points := [ 7 , 25 , 8 ] ;
33894: LD_ADDR_VAR 0 9
33898: PUSH
33899: LD_INT 7
33901: PUSH
33902: LD_INT 25
33904: PUSH
33905: LD_INT 8
33907: PUSH
33908: EMPTY
33909: LIST
33910: LIST
33911: LIST
33912: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
33913: LD_VAR 0 6
33917: PPUSH
33918: CALL_OW 264
33922: PUSH
33923: LD_INT 5
33925: PUSH
33926: LD_INT 27
33928: PUSH
33929: LD_INT 44
33931: PUSH
33932: EMPTY
33933: LIST
33934: LIST
33935: LIST
33936: IN
33937: IFFALSE 33958
// points := [ 14 , 50 , 16 ] ;
33939: LD_ADDR_VAR 0 9
33943: PUSH
33944: LD_INT 14
33946: PUSH
33947: LD_INT 50
33949: PUSH
33950: LD_INT 16
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: LIST
33957: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
33958: LD_VAR 0 6
33962: PPUSH
33963: CALL_OW 264
33967: PUSH
33968: LD_INT 6
33970: PUSH
33971: LD_INT 46
33973: PUSH
33974: EMPTY
33975: LIST
33976: LIST
33977: IN
33978: IFFALSE 33999
// points := [ 32 , 120 , 70 ] ;
33980: LD_ADDR_VAR 0 9
33984: PUSH
33985: LD_INT 32
33987: PUSH
33988: LD_INT 120
33990: PUSH
33991: LD_INT 70
33993: PUSH
33994: EMPTY
33995: LIST
33996: LIST
33997: LIST
33998: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
33999: LD_VAR 0 6
34003: PPUSH
34004: CALL_OW 264
34008: PUSH
34009: LD_INT 7
34011: PUSH
34012: LD_INT 28
34014: PUSH
34015: LD_INT 45
34017: PUSH
34018: LD_INT 92
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: IN
34027: IFFALSE 34048
// points := [ 35 , 20 , 45 ] ;
34029: LD_ADDR_VAR 0 9
34033: PUSH
34034: LD_INT 35
34036: PUSH
34037: LD_INT 20
34039: PUSH
34040: LD_INT 45
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: LIST
34047: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
34048: LD_VAR 0 6
34052: PPUSH
34053: CALL_OW 264
34057: PUSH
34058: LD_INT 47
34060: PUSH
34061: EMPTY
34062: LIST
34063: IN
34064: IFFALSE 34085
// points := [ 67 , 45 , 75 ] ;
34066: LD_ADDR_VAR 0 9
34070: PUSH
34071: LD_INT 67
34073: PUSH
34074: LD_INT 45
34076: PUSH
34077: LD_INT 75
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: LIST
34084: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
34085: LD_VAR 0 6
34089: PPUSH
34090: CALL_OW 264
34094: PUSH
34095: LD_INT 26
34097: PUSH
34098: EMPTY
34099: LIST
34100: IN
34101: IFFALSE 34122
// points := [ 120 , 30 , 80 ] ;
34103: LD_ADDR_VAR 0 9
34107: PUSH
34108: LD_INT 120
34110: PUSH
34111: LD_INT 30
34113: PUSH
34114: LD_INT 80
34116: PUSH
34117: EMPTY
34118: LIST
34119: LIST
34120: LIST
34121: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
34122: LD_VAR 0 6
34126: PPUSH
34127: CALL_OW 264
34131: PUSH
34132: LD_INT 22
34134: PUSH
34135: EMPTY
34136: LIST
34137: IN
34138: IFFALSE 34159
// points := [ 40 , 1 , 1 ] ;
34140: LD_ADDR_VAR 0 9
34144: PUSH
34145: LD_INT 40
34147: PUSH
34148: LD_INT 1
34150: PUSH
34151: LD_INT 1
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: LIST
34158: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
34159: LD_VAR 0 6
34163: PPUSH
34164: CALL_OW 264
34168: PUSH
34169: LD_INT 29
34171: PUSH
34172: EMPTY
34173: LIST
34174: IN
34175: IFFALSE 34196
// points := [ 70 , 200 , 400 ] ;
34177: LD_ADDR_VAR 0 9
34181: PUSH
34182: LD_INT 70
34184: PUSH
34185: LD_INT 200
34187: PUSH
34188: LD_INT 400
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: LIST
34195: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
34196: LD_VAR 0 6
34200: PPUSH
34201: CALL_OW 264
34205: PUSH
34206: LD_INT 14
34208: PUSH
34209: LD_INT 53
34211: PUSH
34212: EMPTY
34213: LIST
34214: LIST
34215: IN
34216: IFFALSE 34237
// points := [ 40 , 10 , 20 ] ;
34218: LD_ADDR_VAR 0 9
34222: PUSH
34223: LD_INT 40
34225: PUSH
34226: LD_INT 10
34228: PUSH
34229: LD_INT 20
34231: PUSH
34232: EMPTY
34233: LIST
34234: LIST
34235: LIST
34236: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
34237: LD_VAR 0 6
34241: PPUSH
34242: CALL_OW 264
34246: PUSH
34247: LD_INT 9
34249: PUSH
34250: EMPTY
34251: LIST
34252: IN
34253: IFFALSE 34274
// points := [ 5 , 70 , 20 ] ;
34255: LD_ADDR_VAR 0 9
34259: PUSH
34260: LD_INT 5
34262: PUSH
34263: LD_INT 70
34265: PUSH
34266: LD_INT 20
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: LIST
34273: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
34274: LD_VAR 0 6
34278: PPUSH
34279: CALL_OW 264
34283: PUSH
34284: LD_INT 10
34286: PUSH
34287: EMPTY
34288: LIST
34289: IN
34290: IFFALSE 34311
// points := [ 35 , 110 , 70 ] ;
34292: LD_ADDR_VAR 0 9
34296: PUSH
34297: LD_INT 35
34299: PUSH
34300: LD_INT 110
34302: PUSH
34303: LD_INT 70
34305: PUSH
34306: EMPTY
34307: LIST
34308: LIST
34309: LIST
34310: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
34311: LD_VAR 0 6
34315: PPUSH
34316: CALL_OW 265
34320: PUSH
34321: LD_INT 25
34323: EQUAL
34324: IFFALSE 34345
// points := [ 80 , 65 , 100 ] ;
34326: LD_ADDR_VAR 0 9
34330: PUSH
34331: LD_INT 80
34333: PUSH
34334: LD_INT 65
34336: PUSH
34337: LD_INT 100
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: LIST
34344: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
34345: LD_VAR 0 6
34349: PPUSH
34350: CALL_OW 263
34354: PUSH
34355: LD_INT 1
34357: EQUAL
34358: IFFALSE 34393
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
34360: LD_ADDR_VAR 0 10
34364: PUSH
34365: LD_VAR 0 10
34369: PUSH
34370: LD_VAR 0 6
34374: PPUSH
34375: CALL_OW 311
34379: PPUSH
34380: LD_INT 3
34382: PPUSH
34383: CALL_OW 259
34387: PUSH
34388: LD_INT 4
34390: MUL
34391: MUL
34392: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
34393: LD_VAR 0 6
34397: PPUSH
34398: CALL_OW 263
34402: PUSH
34403: LD_INT 2
34405: EQUAL
34406: IFFALSE 34457
// begin j := IsControledBy ( i ) ;
34408: LD_ADDR_VAR 0 7
34412: PUSH
34413: LD_VAR 0 6
34417: PPUSH
34418: CALL_OW 312
34422: ST_TO_ADDR
// if j then
34423: LD_VAR 0 7
34427: IFFALSE 34457
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
34429: LD_ADDR_VAR 0 10
34433: PUSH
34434: LD_VAR 0 10
34438: PUSH
34439: LD_VAR 0 7
34443: PPUSH
34444: LD_INT 3
34446: PPUSH
34447: CALL_OW 259
34451: PUSH
34452: LD_INT 3
34454: MUL
34455: MUL
34456: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
34457: LD_VAR 0 6
34461: PPUSH
34462: CALL_OW 264
34466: PUSH
34467: LD_INT 5
34469: PUSH
34470: LD_INT 6
34472: PUSH
34473: LD_INT 46
34475: PUSH
34476: LD_INT 44
34478: PUSH
34479: LD_INT 47
34481: PUSH
34482: LD_INT 45
34484: PUSH
34485: LD_INT 28
34487: PUSH
34488: LD_INT 7
34490: PUSH
34491: LD_INT 27
34493: PUSH
34494: LD_INT 29
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: IN
34509: IFFALSE 34529
34511: PUSH
34512: LD_VAR 0 1
34516: PPUSH
34517: LD_INT 52
34519: PPUSH
34520: CALL_OW 321
34524: PUSH
34525: LD_INT 2
34527: EQUAL
34528: AND
34529: IFFALSE 34546
// bpoints := bpoints * 1.2 ;
34531: LD_ADDR_VAR 0 10
34535: PUSH
34536: LD_VAR 0 10
34540: PUSH
34541: LD_REAL  1.20000000000000E+0000
34544: MUL
34545: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
34546: LD_VAR 0 6
34550: PPUSH
34551: CALL_OW 264
34555: PUSH
34556: LD_INT 6
34558: PUSH
34559: LD_INT 46
34561: PUSH
34562: LD_INT 47
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: LIST
34569: IN
34570: IFFALSE 34587
// bpoints := bpoints * 1.2 ;
34572: LD_ADDR_VAR 0 10
34576: PUSH
34577: LD_VAR 0 10
34581: PUSH
34582: LD_REAL  1.20000000000000E+0000
34585: MUL
34586: ST_TO_ADDR
// end ; unit_building :
34587: GO 34601
34589: LD_INT 3
34591: DOUBLE
34592: EQUAL
34593: IFTRUE 34597
34595: GO 34600
34597: POP
// ; end ;
34598: GO 34601
34600: POP
// for j = 1 to 3 do
34601: LD_ADDR_VAR 0 7
34605: PUSH
34606: DOUBLE
34607: LD_INT 1
34609: DEC
34610: ST_TO_ADDR
34611: LD_INT 3
34613: PUSH
34614: FOR_TO
34615: IFFALSE 34668
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
34617: LD_ADDR_VAR 0 5
34621: PUSH
34622: LD_VAR 0 5
34626: PPUSH
34627: LD_VAR 0 7
34631: PPUSH
34632: LD_VAR 0 5
34636: PUSH
34637: LD_VAR 0 7
34641: ARRAY
34642: PUSH
34643: LD_VAR 0 9
34647: PUSH
34648: LD_VAR 0 7
34652: ARRAY
34653: PUSH
34654: LD_VAR 0 10
34658: MUL
34659: PLUS
34660: PPUSH
34661: CALL_OW 1
34665: ST_TO_ADDR
34666: GO 34614
34668: POP
34669: POP
// end ;
34670: GO 33143
34672: POP
34673: POP
// result := Replace ( result , 4 , tmp ) ;
34674: LD_ADDR_VAR 0 5
34678: PUSH
34679: LD_VAR 0 5
34683: PPUSH
34684: LD_INT 4
34686: PPUSH
34687: LD_VAR 0 8
34691: PPUSH
34692: CALL_OW 1
34696: ST_TO_ADDR
// end ;
34697: LD_VAR 0 5
34701: RET
// export function DangerAtRange ( unit , range ) ; begin
34702: LD_INT 0
34704: PPUSH
// if not unit then
34705: LD_VAR 0 1
34709: NOT
34710: IFFALSE 34714
// exit ;
34712: GO 34759
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
34714: LD_ADDR_VAR 0 3
34718: PUSH
34719: LD_VAR 0 1
34723: PPUSH
34724: CALL_OW 255
34728: PPUSH
34729: LD_VAR 0 1
34733: PPUSH
34734: CALL_OW 250
34738: PPUSH
34739: LD_VAR 0 1
34743: PPUSH
34744: CALL_OW 251
34748: PPUSH
34749: LD_VAR 0 2
34753: PPUSH
34754: CALL 32993 0 4
34758: ST_TO_ADDR
// end ;
34759: LD_VAR 0 3
34763: RET
// export function DangerInArea ( side , area ) ; begin
34764: LD_INT 0
34766: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
34767: LD_ADDR_VAR 0 3
34771: PUSH
34772: LD_VAR 0 2
34776: PPUSH
34777: LD_INT 81
34779: PUSH
34780: LD_VAR 0 1
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PPUSH
34789: CALL_OW 70
34793: ST_TO_ADDR
// end ;
34794: LD_VAR 0 3
34798: RET
// export function IsExtension ( b ) ; begin
34799: LD_INT 0
34801: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
34802: LD_ADDR_VAR 0 2
34806: PUSH
34807: LD_VAR 0 1
34811: PUSH
34812: LD_INT 23
34814: PUSH
34815: LD_INT 20
34817: PUSH
34818: LD_INT 22
34820: PUSH
34821: LD_INT 17
34823: PUSH
34824: LD_INT 24
34826: PUSH
34827: LD_INT 21
34829: PUSH
34830: LD_INT 19
34832: PUSH
34833: LD_INT 16
34835: PUSH
34836: LD_INT 25
34838: PUSH
34839: LD_INT 18
34841: PUSH
34842: EMPTY
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: IN
34854: ST_TO_ADDR
// end ;
34855: LD_VAR 0 2
34859: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
34860: LD_INT 0
34862: PPUSH
34863: PPUSH
34864: PPUSH
// result := [ ] ;
34865: LD_ADDR_VAR 0 4
34869: PUSH
34870: EMPTY
34871: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
34872: LD_ADDR_VAR 0 5
34876: PUSH
34877: LD_VAR 0 2
34881: PPUSH
34882: LD_INT 21
34884: PUSH
34885: LD_INT 3
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: PPUSH
34892: CALL_OW 70
34896: ST_TO_ADDR
// if not tmp then
34897: LD_VAR 0 5
34901: NOT
34902: IFFALSE 34906
// exit ;
34904: GO 34970
// if checkLink then
34906: LD_VAR 0 3
34910: IFFALSE 34960
// begin for i in tmp do
34912: LD_ADDR_VAR 0 6
34916: PUSH
34917: LD_VAR 0 5
34921: PUSH
34922: FOR_IN
34923: IFFALSE 34958
// if GetBase ( i ) <> base then
34925: LD_VAR 0 6
34929: PPUSH
34930: CALL_OW 274
34934: PUSH
34935: LD_VAR 0 1
34939: NONEQUAL
34940: IFFALSE 34956
// ComLinkToBase ( base , i ) ;
34942: LD_VAR 0 1
34946: PPUSH
34947: LD_VAR 0 6
34951: PPUSH
34952: CALL_OW 169
34956: GO 34922
34958: POP
34959: POP
// end ; result := tmp ;
34960: LD_ADDR_VAR 0 4
34964: PUSH
34965: LD_VAR 0 5
34969: ST_TO_ADDR
// end ;
34970: LD_VAR 0 4
34974: RET
// export function ComComplete ( units , b ) ; var i ; begin
34975: LD_INT 0
34977: PPUSH
34978: PPUSH
// if not units then
34979: LD_VAR 0 1
34983: NOT
34984: IFFALSE 34988
// exit ;
34986: GO 35078
// for i in units do
34988: LD_ADDR_VAR 0 4
34992: PUSH
34993: LD_VAR 0 1
34997: PUSH
34998: FOR_IN
34999: IFFALSE 35076
// if BuildingStatus ( b ) = bs_build then
35001: LD_VAR 0 2
35005: PPUSH
35006: CALL_OW 461
35010: PUSH
35011: LD_INT 1
35013: EQUAL
35014: IFFALSE 35074
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
35016: LD_VAR 0 4
35020: PPUSH
35021: LD_STRING h
35023: PUSH
35024: LD_VAR 0 2
35028: PPUSH
35029: CALL_OW 250
35033: PUSH
35034: LD_VAR 0 2
35038: PPUSH
35039: CALL_OW 251
35043: PUSH
35044: LD_VAR 0 2
35048: PUSH
35049: LD_INT 0
35051: PUSH
35052: LD_INT 0
35054: PUSH
35055: LD_INT 0
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: LIST
35062: LIST
35063: LIST
35064: LIST
35065: LIST
35066: PUSH
35067: EMPTY
35068: LIST
35069: PPUSH
35070: CALL_OW 446
35074: GO 34998
35076: POP
35077: POP
// end ;
35078: LD_VAR 0 3
35082: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
35083: LD_INT 0
35085: PPUSH
35086: PPUSH
35087: PPUSH
35088: PPUSH
35089: PPUSH
35090: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
35091: LD_VAR 0 1
35095: NOT
35096: IFTRUE 35113
35098: PUSH
35099: LD_VAR 0 1
35103: PPUSH
35104: CALL_OW 263
35108: PUSH
35109: LD_INT 2
35111: NONEQUAL
35112: OR
35113: IFFALSE 35117
// exit ;
35115: GO 35433
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
35117: LD_ADDR_VAR 0 6
35121: PUSH
35122: LD_INT 22
35124: PUSH
35125: LD_VAR 0 1
35129: PPUSH
35130: CALL_OW 255
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: PUSH
35139: LD_INT 2
35141: PUSH
35142: LD_INT 30
35144: PUSH
35145: LD_INT 36
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 34
35154: PUSH
35155: LD_INT 31
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: EMPTY
35163: LIST
35164: LIST
35165: LIST
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PPUSH
35171: CALL_OW 69
35175: ST_TO_ADDR
// if not tmp then
35176: LD_VAR 0 6
35180: NOT
35181: IFFALSE 35185
// exit ;
35183: GO 35433
// result := [ ] ;
35185: LD_ADDR_VAR 0 2
35189: PUSH
35190: EMPTY
35191: ST_TO_ADDR
// for i in tmp do
35192: LD_ADDR_VAR 0 3
35196: PUSH
35197: LD_VAR 0 6
35201: PUSH
35202: FOR_IN
35203: IFFALSE 35274
// begin t := UnitsInside ( i ) ;
35205: LD_ADDR_VAR 0 4
35209: PUSH
35210: LD_VAR 0 3
35214: PPUSH
35215: CALL_OW 313
35219: ST_TO_ADDR
// if t then
35220: LD_VAR 0 4
35224: IFFALSE 35272
// for j in t do
35226: LD_ADDR_VAR 0 7
35230: PUSH
35231: LD_VAR 0 4
35235: PUSH
35236: FOR_IN
35237: IFFALSE 35270
// result := Replace ( result , result + 1 , j ) ;
35239: LD_ADDR_VAR 0 2
35243: PUSH
35244: LD_VAR 0 2
35248: PPUSH
35249: LD_VAR 0 2
35253: PUSH
35254: LD_INT 1
35256: PLUS
35257: PPUSH
35258: LD_VAR 0 7
35262: PPUSH
35263: CALL_OW 1
35267: ST_TO_ADDR
35268: GO 35236
35270: POP
35271: POP
// end ;
35272: GO 35202
35274: POP
35275: POP
// if not result then
35276: LD_VAR 0 2
35280: NOT
35281: IFFALSE 35285
// exit ;
35283: GO 35433
// mech := result [ 1 ] ;
35285: LD_ADDR_VAR 0 5
35289: PUSH
35290: LD_VAR 0 2
35294: PUSH
35295: LD_INT 1
35297: ARRAY
35298: ST_TO_ADDR
// if result > 1 then
35299: LD_VAR 0 2
35303: PUSH
35304: LD_INT 1
35306: GREATER
35307: IFFALSE 35419
// begin for i = 2 to result do
35309: LD_ADDR_VAR 0 3
35313: PUSH
35314: DOUBLE
35315: LD_INT 2
35317: DEC
35318: ST_TO_ADDR
35319: LD_VAR 0 2
35323: PUSH
35324: FOR_TO
35325: IFFALSE 35417
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
35327: LD_ADDR_VAR 0 4
35331: PUSH
35332: LD_VAR 0 2
35336: PUSH
35337: LD_VAR 0 3
35341: ARRAY
35342: PPUSH
35343: LD_INT 3
35345: PPUSH
35346: CALL_OW 259
35350: PUSH
35351: LD_VAR 0 2
35355: PUSH
35356: LD_VAR 0 3
35360: ARRAY
35361: PPUSH
35362: CALL_OW 432
35366: MINUS
35367: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
35368: LD_VAR 0 4
35372: PUSH
35373: LD_VAR 0 5
35377: PPUSH
35378: LD_INT 3
35380: PPUSH
35381: CALL_OW 259
35385: PUSH
35386: LD_VAR 0 5
35390: PPUSH
35391: CALL_OW 432
35395: MINUS
35396: GREATEREQUAL
35397: IFFALSE 35415
// mech := result [ i ] ;
35399: LD_ADDR_VAR 0 5
35403: PUSH
35404: LD_VAR 0 2
35408: PUSH
35409: LD_VAR 0 3
35413: ARRAY
35414: ST_TO_ADDR
// end ;
35415: GO 35324
35417: POP
35418: POP
// end ; ComLinkTo ( vehicle , mech ) ;
35419: LD_VAR 0 1
35423: PPUSH
35424: LD_VAR 0 5
35428: PPUSH
35429: CALL_OW 135
// end ;
35433: LD_VAR 0 2
35437: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
35438: LD_INT 0
35440: PPUSH
35441: PPUSH
35442: PPUSH
35443: PPUSH
35444: PPUSH
35445: PPUSH
35446: PPUSH
35447: PPUSH
35448: PPUSH
35449: PPUSH
35450: PPUSH
35451: PPUSH
35452: PPUSH
// result := [ ] ;
35453: LD_ADDR_VAR 0 7
35457: PUSH
35458: EMPTY
35459: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
35460: LD_VAR 0 1
35464: PPUSH
35465: CALL_OW 266
35469: PUSH
35470: LD_INT 0
35472: PUSH
35473: LD_INT 1
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: IN
35480: NOT
35481: IFFALSE 35485
// exit ;
35483: GO 37125
// if name then
35485: LD_VAR 0 3
35489: IFFALSE 35505
// SetBName ( base_dep , name ) ;
35491: LD_VAR 0 1
35495: PPUSH
35496: LD_VAR 0 3
35500: PPUSH
35501: CALL_OW 500
// base := GetBase ( base_dep ) ;
35505: LD_ADDR_VAR 0 15
35509: PUSH
35510: LD_VAR 0 1
35514: PPUSH
35515: CALL_OW 274
35519: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
35520: LD_ADDR_VAR 0 16
35524: PUSH
35525: LD_VAR 0 1
35529: PPUSH
35530: CALL_OW 255
35534: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
35535: LD_ADDR_VAR 0 17
35539: PUSH
35540: LD_VAR 0 1
35544: PPUSH
35545: CALL_OW 248
35549: ST_TO_ADDR
// if sources then
35550: LD_VAR 0 5
35554: IFFALSE 35601
// for i = 1 to 3 do
35556: LD_ADDR_VAR 0 8
35560: PUSH
35561: DOUBLE
35562: LD_INT 1
35564: DEC
35565: ST_TO_ADDR
35566: LD_INT 3
35568: PUSH
35569: FOR_TO
35570: IFFALSE 35599
// AddResourceType ( base , i , sources [ i ] ) ;
35572: LD_VAR 0 15
35576: PPUSH
35577: LD_VAR 0 8
35581: PPUSH
35582: LD_VAR 0 5
35586: PUSH
35587: LD_VAR 0 8
35591: ARRAY
35592: PPUSH
35593: CALL_OW 276
35597: GO 35569
35599: POP
35600: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
35601: LD_ADDR_VAR 0 18
35605: PUSH
35606: LD_VAR 0 15
35610: PPUSH
35611: LD_VAR 0 2
35615: PPUSH
35616: LD_INT 1
35618: PPUSH
35619: CALL 34860 0 3
35623: ST_TO_ADDR
// InitHc ;
35624: CALL_OW 19
// InitUc ;
35628: CALL_OW 18
// uc_side := side ;
35632: LD_ADDR_OWVAR 20
35636: PUSH
35637: LD_VAR 0 16
35641: ST_TO_ADDR
// uc_nation := nation ;
35642: LD_ADDR_OWVAR 21
35646: PUSH
35647: LD_VAR 0 17
35651: ST_TO_ADDR
// if buildings then
35652: LD_VAR 0 18
35656: IFFALSE 36984
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
35658: LD_ADDR_VAR 0 19
35662: PUSH
35663: LD_VAR 0 18
35667: PPUSH
35668: LD_INT 2
35670: PUSH
35671: LD_INT 30
35673: PUSH
35674: LD_INT 29
35676: PUSH
35677: EMPTY
35678: LIST
35679: LIST
35680: PUSH
35681: LD_INT 30
35683: PUSH
35684: LD_INT 30
35686: PUSH
35687: EMPTY
35688: LIST
35689: LIST
35690: PUSH
35691: EMPTY
35692: LIST
35693: LIST
35694: LIST
35695: PPUSH
35696: CALL_OW 72
35700: ST_TO_ADDR
// if tmp then
35701: LD_VAR 0 19
35705: IFFALSE 35753
// for i in tmp do
35707: LD_ADDR_VAR 0 8
35711: PUSH
35712: LD_VAR 0 19
35716: PUSH
35717: FOR_IN
35718: IFFALSE 35751
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
35720: LD_VAR 0 8
35724: PPUSH
35725: CALL_OW 250
35729: PPUSH
35730: LD_VAR 0 8
35734: PPUSH
35735: CALL_OW 251
35739: PPUSH
35740: LD_VAR 0 16
35744: PPUSH
35745: CALL_OW 441
35749: GO 35717
35751: POP
35752: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
35753: LD_VAR 0 18
35757: PPUSH
35758: LD_INT 2
35760: PUSH
35761: LD_INT 30
35763: PUSH
35764: LD_INT 32
35766: PUSH
35767: EMPTY
35768: LIST
35769: LIST
35770: PUSH
35771: LD_INT 30
35773: PUSH
35774: LD_INT 33
35776: PUSH
35777: EMPTY
35778: LIST
35779: LIST
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: LIST
35785: PPUSH
35786: CALL_OW 72
35790: IFFALSE 35878
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
35792: LD_ADDR_VAR 0 8
35796: PUSH
35797: LD_VAR 0 18
35801: PPUSH
35802: LD_INT 2
35804: PUSH
35805: LD_INT 30
35807: PUSH
35808: LD_INT 32
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 30
35817: PUSH
35818: LD_INT 33
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: EMPTY
35826: LIST
35827: LIST
35828: LIST
35829: PPUSH
35830: CALL_OW 72
35834: PUSH
35835: FOR_IN
35836: IFFALSE 35876
// begin if not GetBWeapon ( i ) then
35838: LD_VAR 0 8
35842: PPUSH
35843: CALL_OW 269
35847: NOT
35848: IFFALSE 35874
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
35850: LD_VAR 0 8
35854: PPUSH
35855: LD_VAR 0 8
35859: PPUSH
35860: LD_VAR 0 2
35864: PPUSH
35865: CALL 37130 0 2
35869: PPUSH
35870: CALL_OW 431
// end ;
35874: GO 35835
35876: POP
35877: POP
// end ; for i = 1 to personel do
35878: LD_ADDR_VAR 0 8
35882: PUSH
35883: DOUBLE
35884: LD_INT 1
35886: DEC
35887: ST_TO_ADDR
35888: LD_VAR 0 6
35892: PUSH
35893: FOR_TO
35894: IFFALSE 36964
// begin if i > 4 then
35896: LD_VAR 0 8
35900: PUSH
35901: LD_INT 4
35903: GREATER
35904: IFFALSE 35908
// break ;
35906: GO 36964
// case i of 1 :
35908: LD_VAR 0 8
35912: PUSH
35913: LD_INT 1
35915: DOUBLE
35916: EQUAL
35917: IFTRUE 35921
35919: GO 36001
35921: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
35922: LD_ADDR_VAR 0 12
35926: PUSH
35927: LD_VAR 0 18
35931: PPUSH
35932: LD_INT 22
35934: PUSH
35935: LD_VAR 0 16
35939: PUSH
35940: EMPTY
35941: LIST
35942: LIST
35943: PUSH
35944: LD_INT 58
35946: PUSH
35947: EMPTY
35948: LIST
35949: PUSH
35950: LD_INT 2
35952: PUSH
35953: LD_INT 30
35955: PUSH
35956: LD_INT 32
35958: PUSH
35959: EMPTY
35960: LIST
35961: LIST
35962: PUSH
35963: LD_INT 30
35965: PUSH
35966: LD_INT 4
35968: PUSH
35969: EMPTY
35970: LIST
35971: LIST
35972: PUSH
35973: LD_INT 30
35975: PUSH
35976: LD_INT 5
35978: PUSH
35979: EMPTY
35980: LIST
35981: LIST
35982: PUSH
35983: EMPTY
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: PUSH
35989: EMPTY
35990: LIST
35991: LIST
35992: LIST
35993: PPUSH
35994: CALL_OW 72
35998: ST_TO_ADDR
35999: GO 36223
36001: LD_INT 2
36003: DOUBLE
36004: EQUAL
36005: IFTRUE 36009
36007: GO 36071
36009: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
36010: LD_ADDR_VAR 0 12
36014: PUSH
36015: LD_VAR 0 18
36019: PPUSH
36020: LD_INT 22
36022: PUSH
36023: LD_VAR 0 16
36027: PUSH
36028: EMPTY
36029: LIST
36030: LIST
36031: PUSH
36032: LD_INT 2
36034: PUSH
36035: LD_INT 30
36037: PUSH
36038: LD_INT 0
36040: PUSH
36041: EMPTY
36042: LIST
36043: LIST
36044: PUSH
36045: LD_INT 30
36047: PUSH
36048: LD_INT 1
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: EMPTY
36056: LIST
36057: LIST
36058: LIST
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PPUSH
36064: CALL_OW 72
36068: ST_TO_ADDR
36069: GO 36223
36071: LD_INT 3
36073: DOUBLE
36074: EQUAL
36075: IFTRUE 36079
36077: GO 36141
36079: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
36080: LD_ADDR_VAR 0 12
36084: PUSH
36085: LD_VAR 0 18
36089: PPUSH
36090: LD_INT 22
36092: PUSH
36093: LD_VAR 0 16
36097: PUSH
36098: EMPTY
36099: LIST
36100: LIST
36101: PUSH
36102: LD_INT 2
36104: PUSH
36105: LD_INT 30
36107: PUSH
36108: LD_INT 2
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 30
36117: PUSH
36118: LD_INT 3
36120: PUSH
36121: EMPTY
36122: LIST
36123: LIST
36124: PUSH
36125: EMPTY
36126: LIST
36127: LIST
36128: LIST
36129: PUSH
36130: EMPTY
36131: LIST
36132: LIST
36133: PPUSH
36134: CALL_OW 72
36138: ST_TO_ADDR
36139: GO 36223
36141: LD_INT 4
36143: DOUBLE
36144: EQUAL
36145: IFTRUE 36149
36147: GO 36222
36149: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
36150: LD_ADDR_VAR 0 12
36154: PUSH
36155: LD_VAR 0 18
36159: PPUSH
36160: LD_INT 22
36162: PUSH
36163: LD_VAR 0 16
36167: PUSH
36168: EMPTY
36169: LIST
36170: LIST
36171: PUSH
36172: LD_INT 2
36174: PUSH
36175: LD_INT 30
36177: PUSH
36178: LD_INT 6
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: PUSH
36185: LD_INT 30
36187: PUSH
36188: LD_INT 7
36190: PUSH
36191: EMPTY
36192: LIST
36193: LIST
36194: PUSH
36195: LD_INT 30
36197: PUSH
36198: LD_INT 8
36200: PUSH
36201: EMPTY
36202: LIST
36203: LIST
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PPUSH
36215: CALL_OW 72
36219: ST_TO_ADDR
36220: GO 36223
36222: POP
// if i = 1 then
36223: LD_VAR 0 8
36227: PUSH
36228: LD_INT 1
36230: EQUAL
36231: IFFALSE 36342
// begin tmp := [ ] ;
36233: LD_ADDR_VAR 0 19
36237: PUSH
36238: EMPTY
36239: ST_TO_ADDR
// for j in f do
36240: LD_ADDR_VAR 0 9
36244: PUSH
36245: LD_VAR 0 12
36249: PUSH
36250: FOR_IN
36251: IFFALSE 36324
// if GetBType ( j ) = b_bunker then
36253: LD_VAR 0 9
36257: PPUSH
36258: CALL_OW 266
36262: PUSH
36263: LD_INT 32
36265: EQUAL
36266: IFFALSE 36293
// tmp := Insert ( tmp , 1 , j ) else
36268: LD_ADDR_VAR 0 19
36272: PUSH
36273: LD_VAR 0 19
36277: PPUSH
36278: LD_INT 1
36280: PPUSH
36281: LD_VAR 0 9
36285: PPUSH
36286: CALL_OW 2
36290: ST_TO_ADDR
36291: GO 36322
// tmp := Insert ( tmp , tmp + 1 , j ) ;
36293: LD_ADDR_VAR 0 19
36297: PUSH
36298: LD_VAR 0 19
36302: PPUSH
36303: LD_VAR 0 19
36307: PUSH
36308: LD_INT 1
36310: PLUS
36311: PPUSH
36312: LD_VAR 0 9
36316: PPUSH
36317: CALL_OW 2
36321: ST_TO_ADDR
36322: GO 36250
36324: POP
36325: POP
// if tmp then
36326: LD_VAR 0 19
36330: IFFALSE 36342
// f := tmp ;
36332: LD_ADDR_VAR 0 12
36336: PUSH
36337: LD_VAR 0 19
36341: ST_TO_ADDR
// end ; x := personel [ i ] ;
36342: LD_ADDR_VAR 0 13
36346: PUSH
36347: LD_VAR 0 6
36351: PUSH
36352: LD_VAR 0 8
36356: ARRAY
36357: ST_TO_ADDR
// if x = - 1 then
36358: LD_VAR 0 13
36362: PUSH
36363: LD_INT 1
36365: NEG
36366: EQUAL
36367: IFFALSE 36578
// begin for j in f do
36369: LD_ADDR_VAR 0 9
36373: PUSH
36374: LD_VAR 0 12
36378: PUSH
36379: FOR_IN
36380: IFFALSE 36574
// repeat InitHc ;
36382: CALL_OW 19
// if GetBType ( j ) = b_barracks then
36386: LD_VAR 0 9
36390: PPUSH
36391: CALL_OW 266
36395: PUSH
36396: LD_INT 5
36398: EQUAL
36399: IFFALSE 36469
// begin if UnitsInside ( j ) < 3 then
36401: LD_VAR 0 9
36405: PPUSH
36406: CALL_OW 313
36410: PUSH
36411: LD_INT 3
36413: LESS
36414: IFFALSE 36450
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36416: LD_INT 0
36418: PPUSH
36419: LD_INT 5
36421: PUSH
36422: LD_INT 8
36424: PUSH
36425: LD_INT 9
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: LIST
36432: PUSH
36433: LD_VAR 0 17
36437: ARRAY
36438: PPUSH
36439: LD_VAR 0 4
36443: PPUSH
36444: CALL_OW 380
36448: GO 36467
// PrepareHuman ( false , i , skill ) ;
36450: LD_INT 0
36452: PPUSH
36453: LD_VAR 0 8
36457: PPUSH
36458: LD_VAR 0 4
36462: PPUSH
36463: CALL_OW 380
// end else
36467: GO 36486
// PrepareHuman ( false , i , skill ) ;
36469: LD_INT 0
36471: PPUSH
36472: LD_VAR 0 8
36476: PPUSH
36477: LD_VAR 0 4
36481: PPUSH
36482: CALL_OW 380
// un := CreateHuman ;
36486: LD_ADDR_VAR 0 14
36490: PUSH
36491: CALL_OW 44
36495: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36496: LD_ADDR_VAR 0 7
36500: PUSH
36501: LD_VAR 0 7
36505: PPUSH
36506: LD_INT 1
36508: PPUSH
36509: LD_VAR 0 14
36513: PPUSH
36514: CALL_OW 2
36518: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
36519: LD_VAR 0 14
36523: PPUSH
36524: LD_VAR 0 9
36528: PPUSH
36529: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
36533: LD_VAR 0 9
36537: PPUSH
36538: CALL_OW 313
36542: PUSH
36543: LD_INT 6
36545: EQUAL
36546: IFTRUE 36570
36548: PUSH
36549: LD_VAR 0 9
36553: PPUSH
36554: CALL_OW 266
36558: PUSH
36559: LD_INT 32
36561: PUSH
36562: LD_INT 31
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: IN
36569: OR
36570: IFFALSE 36382
36572: GO 36379
36574: POP
36575: POP
// end else
36576: GO 36962
// for j = 1 to x do
36578: LD_ADDR_VAR 0 9
36582: PUSH
36583: DOUBLE
36584: LD_INT 1
36586: DEC
36587: ST_TO_ADDR
36588: LD_VAR 0 13
36592: PUSH
36593: FOR_TO
36594: IFFALSE 36960
// begin InitHc ;
36596: CALL_OW 19
// if not f then
36600: LD_VAR 0 12
36604: NOT
36605: IFFALSE 36694
// begin PrepareHuman ( false , i , skill ) ;
36607: LD_INT 0
36609: PPUSH
36610: LD_VAR 0 8
36614: PPUSH
36615: LD_VAR 0 4
36619: PPUSH
36620: CALL_OW 380
// un := CreateHuman ;
36624: LD_ADDR_VAR 0 14
36628: PUSH
36629: CALL_OW 44
36633: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36634: LD_ADDR_VAR 0 7
36638: PUSH
36639: LD_VAR 0 7
36643: PPUSH
36644: LD_INT 1
36646: PPUSH
36647: LD_VAR 0 14
36651: PPUSH
36652: CALL_OW 2
36656: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
36657: LD_VAR 0 14
36661: PPUSH
36662: LD_VAR 0 1
36666: PPUSH
36667: CALL_OW 250
36671: PPUSH
36672: LD_VAR 0 1
36676: PPUSH
36677: CALL_OW 251
36681: PPUSH
36682: LD_INT 10
36684: PPUSH
36685: LD_INT 0
36687: PPUSH
36688: CALL_OW 50
// continue ;
36692: GO 36593
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
36694: LD_VAR 0 12
36698: PUSH
36699: LD_INT 1
36701: ARRAY
36702: PPUSH
36703: CALL_OW 313
36707: IFFALSE 36735
36709: PUSH
36710: LD_VAR 0 12
36714: PUSH
36715: LD_INT 1
36717: ARRAY
36718: PPUSH
36719: CALL_OW 266
36723: PUSH
36724: LD_INT 32
36726: PUSH
36727: LD_INT 31
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: IN
36734: AND
36735: IFTRUE 36756
36737: PUSH
36738: LD_VAR 0 12
36742: PUSH
36743: LD_INT 1
36745: ARRAY
36746: PPUSH
36747: CALL_OW 313
36751: PUSH
36752: LD_INT 6
36754: EQUAL
36755: OR
36756: IFFALSE 36776
// f := Delete ( f , 1 ) ;
36758: LD_ADDR_VAR 0 12
36762: PUSH
36763: LD_VAR 0 12
36767: PPUSH
36768: LD_INT 1
36770: PPUSH
36771: CALL_OW 3
36775: ST_TO_ADDR
// if not f then
36776: LD_VAR 0 12
36780: NOT
36781: IFFALSE 36799
// begin x := x + 2 ;
36783: LD_ADDR_VAR 0 13
36787: PUSH
36788: LD_VAR 0 13
36792: PUSH
36793: LD_INT 2
36795: PLUS
36796: ST_TO_ADDR
// continue ;
36797: GO 36593
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
36799: LD_VAR 0 12
36803: PUSH
36804: LD_INT 1
36806: ARRAY
36807: PPUSH
36808: CALL_OW 266
36812: PUSH
36813: LD_INT 5
36815: EQUAL
36816: IFFALSE 36890
// begin if UnitsInside ( f [ 1 ] ) < 3 then
36818: LD_VAR 0 12
36822: PUSH
36823: LD_INT 1
36825: ARRAY
36826: PPUSH
36827: CALL_OW 313
36831: PUSH
36832: LD_INT 3
36834: LESS
36835: IFFALSE 36871
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
36837: LD_INT 0
36839: PPUSH
36840: LD_INT 5
36842: PUSH
36843: LD_INT 8
36845: PUSH
36846: LD_INT 9
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: LIST
36853: PUSH
36854: LD_VAR 0 17
36858: ARRAY
36859: PPUSH
36860: LD_VAR 0 4
36864: PPUSH
36865: CALL_OW 380
36869: GO 36888
// PrepareHuman ( false , i , skill ) ;
36871: LD_INT 0
36873: PPUSH
36874: LD_VAR 0 8
36878: PPUSH
36879: LD_VAR 0 4
36883: PPUSH
36884: CALL_OW 380
// end else
36888: GO 36907
// PrepareHuman ( false , i , skill ) ;
36890: LD_INT 0
36892: PPUSH
36893: LD_VAR 0 8
36897: PPUSH
36898: LD_VAR 0 4
36902: PPUSH
36903: CALL_OW 380
// un := CreateHuman ;
36907: LD_ADDR_VAR 0 14
36911: PUSH
36912: CALL_OW 44
36916: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
36917: LD_ADDR_VAR 0 7
36921: PUSH
36922: LD_VAR 0 7
36926: PPUSH
36927: LD_INT 1
36929: PPUSH
36930: LD_VAR 0 14
36934: PPUSH
36935: CALL_OW 2
36939: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
36940: LD_VAR 0 14
36944: PPUSH
36945: LD_VAR 0 12
36949: PUSH
36950: LD_INT 1
36952: ARRAY
36953: PPUSH
36954: CALL_OW 52
// end ;
36958: GO 36593
36960: POP
36961: POP
// end ;
36962: GO 35893
36964: POP
36965: POP
// result := result ^ buildings ;
36966: LD_ADDR_VAR 0 7
36970: PUSH
36971: LD_VAR 0 7
36975: PUSH
36976: LD_VAR 0 18
36980: ADD
36981: ST_TO_ADDR
// end else
36982: GO 37125
// begin for i = 1 to personel do
36984: LD_ADDR_VAR 0 8
36988: PUSH
36989: DOUBLE
36990: LD_INT 1
36992: DEC
36993: ST_TO_ADDR
36994: LD_VAR 0 6
36998: PUSH
36999: FOR_TO
37000: IFFALSE 37123
// begin if i > 4 then
37002: LD_VAR 0 8
37006: PUSH
37007: LD_INT 4
37009: GREATER
37010: IFFALSE 37014
// break ;
37012: GO 37123
// x := personel [ i ] ;
37014: LD_ADDR_VAR 0 13
37018: PUSH
37019: LD_VAR 0 6
37023: PUSH
37024: LD_VAR 0 8
37028: ARRAY
37029: ST_TO_ADDR
// if x = - 1 then
37030: LD_VAR 0 13
37034: PUSH
37035: LD_INT 1
37037: NEG
37038: EQUAL
37039: IFFALSE 37043
// continue ;
37041: GO 36999
// PrepareHuman ( false , i , skill ) ;
37043: LD_INT 0
37045: PPUSH
37046: LD_VAR 0 8
37050: PPUSH
37051: LD_VAR 0 4
37055: PPUSH
37056: CALL_OW 380
// un := CreateHuman ;
37060: LD_ADDR_VAR 0 14
37064: PUSH
37065: CALL_OW 44
37069: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
37070: LD_VAR 0 14
37074: PPUSH
37075: LD_VAR 0 1
37079: PPUSH
37080: CALL_OW 250
37084: PPUSH
37085: LD_VAR 0 1
37089: PPUSH
37090: CALL_OW 251
37094: PPUSH
37095: LD_INT 10
37097: PPUSH
37098: LD_INT 0
37100: PPUSH
37101: CALL_OW 50
// result := result ^ un ;
37105: LD_ADDR_VAR 0 7
37109: PUSH
37110: LD_VAR 0 7
37114: PUSH
37115: LD_VAR 0 14
37119: ADD
37120: ST_TO_ADDR
// end ;
37121: GO 36999
37123: POP
37124: POP
// end ; end ;
37125: LD_VAR 0 7
37129: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
37130: LD_INT 0
37132: PPUSH
37133: PPUSH
37134: PPUSH
37135: PPUSH
37136: PPUSH
37137: PPUSH
37138: PPUSH
37139: PPUSH
37140: PPUSH
37141: PPUSH
37142: PPUSH
37143: PPUSH
37144: PPUSH
37145: PPUSH
37146: PPUSH
37147: PPUSH
// result := false ;
37148: LD_ADDR_VAR 0 3
37152: PUSH
37153: LD_INT 0
37155: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
37156: LD_VAR 0 1
37160: NOT
37161: IFTRUE 37186
37163: PUSH
37164: LD_VAR 0 1
37168: PPUSH
37169: CALL_OW 266
37173: PUSH
37174: LD_INT 32
37176: PUSH
37177: LD_INT 33
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: IN
37184: NOT
37185: OR
37186: IFFALSE 37190
// exit ;
37188: GO 38325
// nat := GetNation ( tower ) ;
37190: LD_ADDR_VAR 0 12
37194: PUSH
37195: LD_VAR 0 1
37199: PPUSH
37200: CALL_OW 248
37204: ST_TO_ADDR
// side := GetSide ( tower ) ;
37205: LD_ADDR_VAR 0 16
37209: PUSH
37210: LD_VAR 0 1
37214: PPUSH
37215: CALL_OW 255
37219: ST_TO_ADDR
// x := GetX ( tower ) ;
37220: LD_ADDR_VAR 0 10
37224: PUSH
37225: LD_VAR 0 1
37229: PPUSH
37230: CALL_OW 250
37234: ST_TO_ADDR
// y := GetY ( tower ) ;
37235: LD_ADDR_VAR 0 11
37239: PUSH
37240: LD_VAR 0 1
37244: PPUSH
37245: CALL_OW 251
37249: ST_TO_ADDR
// if not x or not y then
37250: LD_VAR 0 10
37254: NOT
37255: IFTRUE 37264
37257: PUSH
37258: LD_VAR 0 11
37262: NOT
37263: OR
37264: IFFALSE 37268
// exit ;
37266: GO 38325
// weapon := 0 ;
37268: LD_ADDR_VAR 0 18
37272: PUSH
37273: LD_INT 0
37275: ST_TO_ADDR
// fac_list := [ ] ;
37276: LD_ADDR_VAR 0 17
37280: PUSH
37281: EMPTY
37282: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
37283: LD_ADDR_VAR 0 6
37287: PUSH
37288: LD_VAR 0 1
37292: PPUSH
37293: CALL_OW 274
37297: PPUSH
37298: LD_VAR 0 2
37302: PPUSH
37303: LD_INT 0
37305: PPUSH
37306: CALL 34860 0 3
37310: PPUSH
37311: LD_INT 30
37313: PUSH
37314: LD_INT 3
37316: PUSH
37317: EMPTY
37318: LIST
37319: LIST
37320: PPUSH
37321: CALL_OW 72
37325: ST_TO_ADDR
// if not factories then
37326: LD_VAR 0 6
37330: NOT
37331: IFFALSE 37335
// exit ;
37333: GO 38325
// for i in factories do
37335: LD_ADDR_VAR 0 8
37339: PUSH
37340: LD_VAR 0 6
37344: PUSH
37345: FOR_IN
37346: IFFALSE 37371
// fac_list := fac_list union AvailableWeaponList ( i ) ;
37348: LD_ADDR_VAR 0 17
37352: PUSH
37353: LD_VAR 0 17
37357: PUSH
37358: LD_VAR 0 8
37362: PPUSH
37363: CALL_OW 478
37367: UNION
37368: ST_TO_ADDR
37369: GO 37345
37371: POP
37372: POP
// if not fac_list then
37373: LD_VAR 0 17
37377: NOT
37378: IFFALSE 37382
// exit ;
37380: GO 38325
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
37382: LD_ADDR_VAR 0 5
37386: PUSH
37387: LD_INT 4
37389: PUSH
37390: LD_INT 5
37392: PUSH
37393: LD_INT 9
37395: PUSH
37396: LD_INT 10
37398: PUSH
37399: LD_INT 6
37401: PUSH
37402: LD_INT 7
37404: PUSH
37405: LD_INT 11
37407: PUSH
37408: EMPTY
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 27
37419: PUSH
37420: LD_INT 28
37422: PUSH
37423: LD_INT 26
37425: PUSH
37426: LD_INT 30
37428: PUSH
37429: EMPTY
37430: LIST
37431: LIST
37432: LIST
37433: LIST
37434: PUSH
37435: LD_INT 43
37437: PUSH
37438: LD_INT 44
37440: PUSH
37441: LD_INT 46
37443: PUSH
37444: LD_INT 45
37446: PUSH
37447: LD_INT 47
37449: PUSH
37450: LD_INT 49
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: PUSH
37461: EMPTY
37462: LIST
37463: LIST
37464: LIST
37465: PUSH
37466: LD_VAR 0 12
37470: ARRAY
37471: ST_TO_ADDR
// list := list isect fac_list ;
37472: LD_ADDR_VAR 0 5
37476: PUSH
37477: LD_VAR 0 5
37481: PUSH
37482: LD_VAR 0 17
37486: ISECT
37487: ST_TO_ADDR
// if not list then
37488: LD_VAR 0 5
37492: NOT
37493: IFFALSE 37497
// exit ;
37495: GO 38325
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
37497: LD_VAR 0 12
37501: PUSH
37502: LD_INT 3
37504: EQUAL
37505: IFFALSE 37517
37507: PUSH
37508: LD_INT 49
37510: PUSH
37511: LD_VAR 0 5
37515: IN
37516: AND
37517: IFFALSE 37537
37519: PUSH
37520: LD_INT 31
37522: PPUSH
37523: LD_VAR 0 16
37527: PPUSH
37528: CALL_OW 321
37532: PUSH
37533: LD_INT 2
37535: EQUAL
37536: AND
37537: IFFALSE 37597
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
37539: LD_INT 22
37541: PUSH
37542: LD_VAR 0 16
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 35
37553: PUSH
37554: LD_INT 49
37556: PUSH
37557: EMPTY
37558: LIST
37559: LIST
37560: PUSH
37561: LD_INT 91
37563: PUSH
37564: LD_VAR 0 1
37568: PUSH
37569: LD_INT 10
37571: PUSH
37572: EMPTY
37573: LIST
37574: LIST
37575: LIST
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: LIST
37581: PPUSH
37582: CALL_OW 69
37586: NOT
37587: IFFALSE 37597
// weapon := ru_time_lapser ;
37589: LD_ADDR_VAR 0 18
37593: PUSH
37594: LD_INT 49
37596: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
37597: LD_VAR 0 12
37601: PUSH
37602: LD_INT 1
37604: PUSH
37605: LD_INT 2
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: IN
37612: IFFALSE 37636
37614: PUSH
37615: LD_INT 11
37617: PUSH
37618: LD_VAR 0 5
37622: IN
37623: IFTRUE 37635
37625: PUSH
37626: LD_INT 30
37628: PUSH
37629: LD_VAR 0 5
37633: IN
37634: OR
37635: AND
37636: IFFALSE 37656
37638: PUSH
37639: LD_INT 6
37641: PPUSH
37642: LD_VAR 0 16
37646: PPUSH
37647: CALL_OW 321
37651: PUSH
37652: LD_INT 2
37654: EQUAL
37655: AND
37656: IFFALSE 37823
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
37658: LD_INT 22
37660: PUSH
37661: LD_VAR 0 16
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: LD_INT 35
37675: PUSH
37676: LD_INT 11
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 35
37685: PUSH
37686: LD_INT 30
37688: PUSH
37689: EMPTY
37690: LIST
37691: LIST
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 91
37700: PUSH
37701: LD_VAR 0 1
37705: PUSH
37706: LD_INT 18
37708: PUSH
37709: EMPTY
37710: LIST
37711: LIST
37712: LIST
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: LIST
37718: PPUSH
37719: CALL_OW 69
37723: NOT
37724: IFFALSE 37800
37726: PUSH
37727: LD_INT 22
37729: PUSH
37730: LD_VAR 0 16
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 2
37741: PUSH
37742: LD_INT 30
37744: PUSH
37745: LD_INT 32
37747: PUSH
37748: EMPTY
37749: LIST
37750: LIST
37751: PUSH
37752: LD_INT 30
37754: PUSH
37755: LD_INT 33
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 91
37769: PUSH
37770: LD_VAR 0 1
37774: PUSH
37775: LD_INT 12
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: LIST
37782: PUSH
37783: EMPTY
37784: LIST
37785: LIST
37786: LIST
37787: PUSH
37788: EMPTY
37789: LIST
37790: PPUSH
37791: CALL_OW 69
37795: PUSH
37796: LD_INT 2
37798: GREATER
37799: AND
37800: IFFALSE 37823
// weapon := [ us_radar , ar_radar ] [ nat ] ;
37802: LD_ADDR_VAR 0 18
37806: PUSH
37807: LD_INT 11
37809: PUSH
37810: LD_INT 30
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: PUSH
37817: LD_VAR 0 12
37821: ARRAY
37822: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
37823: LD_VAR 0 18
37827: NOT
37828: IFFALSE 37848
37830: PUSH
37831: LD_INT 40
37833: PPUSH
37834: LD_VAR 0 16
37838: PPUSH
37839: CALL_OW 321
37843: PUSH
37844: LD_INT 2
37846: EQUAL
37847: AND
37848: IFFALSE 37884
37850: PUSH
37851: LD_INT 7
37853: PUSH
37854: LD_VAR 0 5
37858: IN
37859: IFTRUE 37871
37861: PUSH
37862: LD_INT 28
37864: PUSH
37865: LD_VAR 0 5
37869: IN
37870: OR
37871: IFTRUE 37883
37873: PUSH
37874: LD_INT 45
37876: PUSH
37877: LD_VAR 0 5
37881: IN
37882: OR
37883: AND
37884: IFFALSE 38138
// begin hex := GetHexInfo ( x , y ) ;
37886: LD_ADDR_VAR 0 4
37890: PUSH
37891: LD_VAR 0 10
37895: PPUSH
37896: LD_VAR 0 11
37900: PPUSH
37901: CALL_OW 546
37905: ST_TO_ADDR
// if hex [ 1 ] then
37906: LD_VAR 0 4
37910: PUSH
37911: LD_INT 1
37913: ARRAY
37914: IFFALSE 37918
// exit ;
37916: GO 38325
// height := hex [ 2 ] ;
37918: LD_ADDR_VAR 0 15
37922: PUSH
37923: LD_VAR 0 4
37927: PUSH
37928: LD_INT 2
37930: ARRAY
37931: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
37932: LD_ADDR_VAR 0 14
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: LD_INT 2
37942: PUSH
37943: LD_INT 3
37945: PUSH
37946: LD_INT 5
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: ST_TO_ADDR
// for i in tmp do
37955: LD_ADDR_VAR 0 8
37959: PUSH
37960: LD_VAR 0 14
37964: PUSH
37965: FOR_IN
37966: IFFALSE 38136
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
37968: LD_ADDR_VAR 0 9
37972: PUSH
37973: LD_VAR 0 10
37977: PPUSH
37978: LD_VAR 0 8
37982: PPUSH
37983: LD_INT 5
37985: PPUSH
37986: CALL_OW 272
37990: PUSH
37991: LD_VAR 0 11
37995: PPUSH
37996: LD_VAR 0 8
38000: PPUSH
38001: LD_INT 5
38003: PPUSH
38004: CALL_OW 273
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
38013: LD_VAR 0 9
38017: PUSH
38018: LD_INT 1
38020: ARRAY
38021: PPUSH
38022: LD_VAR 0 9
38026: PUSH
38027: LD_INT 2
38029: ARRAY
38030: PPUSH
38031: CALL_OW 488
38035: IFFALSE 38134
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
38037: LD_ADDR_VAR 0 4
38041: PUSH
38042: LD_VAR 0 9
38046: PUSH
38047: LD_INT 1
38049: ARRAY
38050: PPUSH
38051: LD_VAR 0 9
38055: PUSH
38056: LD_INT 2
38058: ARRAY
38059: PPUSH
38060: CALL_OW 546
38064: ST_TO_ADDR
// if hex [ 1 ] then
38065: LD_VAR 0 4
38069: PUSH
38070: LD_INT 1
38072: ARRAY
38073: IFFALSE 38077
// continue ;
38075: GO 37965
// h := hex [ 2 ] ;
38077: LD_ADDR_VAR 0 13
38081: PUSH
38082: LD_VAR 0 4
38086: PUSH
38087: LD_INT 2
38089: ARRAY
38090: ST_TO_ADDR
// if h + 7 < height then
38091: LD_VAR 0 13
38095: PUSH
38096: LD_INT 7
38098: PLUS
38099: PUSH
38100: LD_VAR 0 15
38104: LESS
38105: IFFALSE 38134
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
38107: LD_ADDR_VAR 0 18
38111: PUSH
38112: LD_INT 7
38114: PUSH
38115: LD_INT 28
38117: PUSH
38118: LD_INT 45
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: LIST
38125: PUSH
38126: LD_VAR 0 12
38130: ARRAY
38131: ST_TO_ADDR
// break ;
38132: GO 38136
// end ; end ; end ;
38134: GO 37965
38136: POP
38137: POP
// end ; if not weapon then
38138: LD_VAR 0 18
38142: NOT
38143: IFFALSE 38203
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
38145: LD_ADDR_VAR 0 5
38149: PUSH
38150: LD_VAR 0 5
38154: PUSH
38155: LD_INT 11
38157: PUSH
38158: LD_INT 30
38160: PUSH
38161: LD_INT 49
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: LIST
38168: DIFF
38169: ST_TO_ADDR
// if not list then
38170: LD_VAR 0 5
38174: NOT
38175: IFFALSE 38179
// exit ;
38177: GO 38325
// weapon := list [ rand ( 1 , list ) ] ;
38179: LD_ADDR_VAR 0 18
38183: PUSH
38184: LD_VAR 0 5
38188: PUSH
38189: LD_INT 1
38191: PPUSH
38192: LD_VAR 0 5
38196: PPUSH
38197: CALL_OW 12
38201: ARRAY
38202: ST_TO_ADDR
// end ; if weapon then
38203: LD_VAR 0 18
38207: IFFALSE 38325
// begin tmp := CostOfWeapon ( weapon ) ;
38209: LD_ADDR_VAR 0 14
38213: PUSH
38214: LD_VAR 0 18
38218: PPUSH
38219: CALL_OW 451
38223: ST_TO_ADDR
// j := GetBase ( tower ) ;
38224: LD_ADDR_VAR 0 9
38228: PUSH
38229: LD_VAR 0 1
38233: PPUSH
38234: CALL_OW 274
38238: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
38239: LD_VAR 0 9
38243: PPUSH
38244: LD_INT 1
38246: PPUSH
38247: CALL_OW 275
38251: PUSH
38252: LD_VAR 0 14
38256: PUSH
38257: LD_INT 1
38259: ARRAY
38260: GREATEREQUAL
38261: IFFALSE 38287
38263: PUSH
38264: LD_VAR 0 9
38268: PPUSH
38269: LD_INT 2
38271: PPUSH
38272: CALL_OW 275
38276: PUSH
38277: LD_VAR 0 14
38281: PUSH
38282: LD_INT 2
38284: ARRAY
38285: GREATEREQUAL
38286: AND
38287: IFFALSE 38313
38289: PUSH
38290: LD_VAR 0 9
38294: PPUSH
38295: LD_INT 3
38297: PPUSH
38298: CALL_OW 275
38302: PUSH
38303: LD_VAR 0 14
38307: PUSH
38308: LD_INT 3
38310: ARRAY
38311: GREATEREQUAL
38312: AND
38313: IFFALSE 38325
// result := weapon ;
38315: LD_ADDR_VAR 0 3
38319: PUSH
38320: LD_VAR 0 18
38324: ST_TO_ADDR
// end ; end ;
38325: LD_VAR 0 3
38329: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
38330: LD_INT 0
38332: PPUSH
38333: PPUSH
// result := true ;
38334: LD_ADDR_VAR 0 3
38338: PUSH
38339: LD_INT 1
38341: ST_TO_ADDR
// if array1 = array2 then
38342: LD_VAR 0 1
38346: PUSH
38347: LD_VAR 0 2
38351: EQUAL
38352: IFFALSE 38412
// begin for i = 1 to array1 do
38354: LD_ADDR_VAR 0 4
38358: PUSH
38359: DOUBLE
38360: LD_INT 1
38362: DEC
38363: ST_TO_ADDR
38364: LD_VAR 0 1
38368: PUSH
38369: FOR_TO
38370: IFFALSE 38408
// if array1 [ i ] <> array2 [ i ] then
38372: LD_VAR 0 1
38376: PUSH
38377: LD_VAR 0 4
38381: ARRAY
38382: PUSH
38383: LD_VAR 0 2
38387: PUSH
38388: LD_VAR 0 4
38392: ARRAY
38393: NONEQUAL
38394: IFFALSE 38406
// begin result := false ;
38396: LD_ADDR_VAR 0 3
38400: PUSH
38401: LD_INT 0
38403: ST_TO_ADDR
// break ;
38404: GO 38408
// end ;
38406: GO 38369
38408: POP
38409: POP
// end else
38410: GO 38420
// result := false ;
38412: LD_ADDR_VAR 0 3
38416: PUSH
38417: LD_INT 0
38419: ST_TO_ADDR
// end ;
38420: LD_VAR 0 3
38424: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
38425: LD_INT 0
38427: PPUSH
38428: PPUSH
// if not array1 or not array2 then
38429: LD_VAR 0 1
38433: NOT
38434: IFTRUE 38443
38436: PUSH
38437: LD_VAR 0 2
38441: NOT
38442: OR
38443: IFFALSE 38447
// exit ;
38445: GO 38511
// result := true ;
38447: LD_ADDR_VAR 0 3
38451: PUSH
38452: LD_INT 1
38454: ST_TO_ADDR
// for i = 1 to array1 do
38455: LD_ADDR_VAR 0 4
38459: PUSH
38460: DOUBLE
38461: LD_INT 1
38463: DEC
38464: ST_TO_ADDR
38465: LD_VAR 0 1
38469: PUSH
38470: FOR_TO
38471: IFFALSE 38509
// if array1 [ i ] <> array2 [ i ] then
38473: LD_VAR 0 1
38477: PUSH
38478: LD_VAR 0 4
38482: ARRAY
38483: PUSH
38484: LD_VAR 0 2
38488: PUSH
38489: LD_VAR 0 4
38493: ARRAY
38494: NONEQUAL
38495: IFFALSE 38507
// begin result := false ;
38497: LD_ADDR_VAR 0 3
38501: PUSH
38502: LD_INT 0
38504: ST_TO_ADDR
// break ;
38505: GO 38509
// end ;
38507: GO 38470
38509: POP
38510: POP
// end ;
38511: LD_VAR 0 3
38515: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
38516: LD_INT 0
38518: PPUSH
38519: PPUSH
38520: PPUSH
// pom := GetBase ( fac ) ;
38521: LD_ADDR_VAR 0 5
38525: PUSH
38526: LD_VAR 0 1
38530: PPUSH
38531: CALL_OW 274
38535: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
38536: LD_ADDR_VAR 0 4
38540: PUSH
38541: LD_VAR 0 2
38545: PUSH
38546: LD_INT 1
38548: ARRAY
38549: PPUSH
38550: LD_VAR 0 2
38554: PUSH
38555: LD_INT 2
38557: ARRAY
38558: PPUSH
38559: LD_VAR 0 2
38563: PUSH
38564: LD_INT 3
38566: ARRAY
38567: PPUSH
38568: LD_VAR 0 2
38572: PUSH
38573: LD_INT 4
38575: ARRAY
38576: PPUSH
38577: CALL_OW 449
38581: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38582: LD_ADDR_VAR 0 3
38586: PUSH
38587: LD_VAR 0 5
38591: PPUSH
38592: LD_INT 1
38594: PPUSH
38595: CALL_OW 275
38599: PUSH
38600: LD_VAR 0 4
38604: PUSH
38605: LD_INT 1
38607: ARRAY
38608: GREATEREQUAL
38609: IFFALSE 38635
38611: PUSH
38612: LD_VAR 0 5
38616: PPUSH
38617: LD_INT 2
38619: PPUSH
38620: CALL_OW 275
38624: PUSH
38625: LD_VAR 0 4
38629: PUSH
38630: LD_INT 2
38632: ARRAY
38633: GREATEREQUAL
38634: AND
38635: IFFALSE 38661
38637: PUSH
38638: LD_VAR 0 5
38642: PPUSH
38643: LD_INT 3
38645: PPUSH
38646: CALL_OW 275
38650: PUSH
38651: LD_VAR 0 4
38655: PUSH
38656: LD_INT 3
38658: ARRAY
38659: GREATEREQUAL
38660: AND
38661: ST_TO_ADDR
// end ;
38662: LD_VAR 0 3
38666: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
38667: LD_INT 0
38669: PPUSH
38670: PPUSH
38671: PPUSH
38672: PPUSH
// pom := GetBase ( building ) ;
38673: LD_ADDR_VAR 0 3
38677: PUSH
38678: LD_VAR 0 1
38682: PPUSH
38683: CALL_OW 274
38687: ST_TO_ADDR
// if not pom then
38688: LD_VAR 0 3
38692: NOT
38693: IFFALSE 38697
// exit ;
38695: GO 38871
// btype := GetBType ( building ) ;
38697: LD_ADDR_VAR 0 5
38701: PUSH
38702: LD_VAR 0 1
38706: PPUSH
38707: CALL_OW 266
38711: ST_TO_ADDR
// if btype = b_armoury then
38712: LD_VAR 0 5
38716: PUSH
38717: LD_INT 4
38719: EQUAL
38720: IFFALSE 38730
// btype := b_barracks ;
38722: LD_ADDR_VAR 0 5
38726: PUSH
38727: LD_INT 5
38729: ST_TO_ADDR
// if btype = b_depot then
38730: LD_VAR 0 5
38734: PUSH
38735: LD_INT 0
38737: EQUAL
38738: IFFALSE 38748
// btype := b_warehouse ;
38740: LD_ADDR_VAR 0 5
38744: PUSH
38745: LD_INT 1
38747: ST_TO_ADDR
// if btype = b_workshop then
38748: LD_VAR 0 5
38752: PUSH
38753: LD_INT 2
38755: EQUAL
38756: IFFALSE 38766
// btype := b_factory ;
38758: LD_ADDR_VAR 0 5
38762: PUSH
38763: LD_INT 3
38765: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38766: LD_ADDR_VAR 0 4
38770: PUSH
38771: LD_VAR 0 5
38775: PPUSH
38776: LD_VAR 0 1
38780: PPUSH
38781: CALL_OW 248
38785: PPUSH
38786: CALL_OW 450
38790: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38791: LD_ADDR_VAR 0 2
38795: PUSH
38796: LD_VAR 0 3
38800: PPUSH
38801: LD_INT 1
38803: PPUSH
38804: CALL_OW 275
38808: PUSH
38809: LD_VAR 0 4
38813: PUSH
38814: LD_INT 1
38816: ARRAY
38817: GREATEREQUAL
38818: IFFALSE 38844
38820: PUSH
38821: LD_VAR 0 3
38825: PPUSH
38826: LD_INT 2
38828: PPUSH
38829: CALL_OW 275
38833: PUSH
38834: LD_VAR 0 4
38838: PUSH
38839: LD_INT 2
38841: ARRAY
38842: GREATEREQUAL
38843: AND
38844: IFFALSE 38870
38846: PUSH
38847: LD_VAR 0 3
38851: PPUSH
38852: LD_INT 3
38854: PPUSH
38855: CALL_OW 275
38859: PUSH
38860: LD_VAR 0 4
38864: PUSH
38865: LD_INT 3
38867: ARRAY
38868: GREATEREQUAL
38869: AND
38870: ST_TO_ADDR
// end ;
38871: LD_VAR 0 2
38875: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
38876: LD_INT 0
38878: PPUSH
38879: PPUSH
38880: PPUSH
// pom := GetBase ( building ) ;
38881: LD_ADDR_VAR 0 4
38885: PUSH
38886: LD_VAR 0 1
38890: PPUSH
38891: CALL_OW 274
38895: ST_TO_ADDR
// if not pom then
38896: LD_VAR 0 4
38900: NOT
38901: IFFALSE 38905
// exit ;
38903: GO 39010
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
38905: LD_ADDR_VAR 0 5
38909: PUSH
38910: LD_VAR 0 2
38914: PPUSH
38915: LD_VAR 0 1
38919: PPUSH
38920: CALL_OW 248
38924: PPUSH
38925: CALL_OW 450
38929: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
38930: LD_ADDR_VAR 0 3
38934: PUSH
38935: LD_VAR 0 4
38939: PPUSH
38940: LD_INT 1
38942: PPUSH
38943: CALL_OW 275
38947: PUSH
38948: LD_VAR 0 5
38952: PUSH
38953: LD_INT 1
38955: ARRAY
38956: GREATEREQUAL
38957: IFFALSE 38983
38959: PUSH
38960: LD_VAR 0 4
38964: PPUSH
38965: LD_INT 2
38967: PPUSH
38968: CALL_OW 275
38972: PUSH
38973: LD_VAR 0 5
38977: PUSH
38978: LD_INT 2
38980: ARRAY
38981: GREATEREQUAL
38982: AND
38983: IFFALSE 39009
38985: PUSH
38986: LD_VAR 0 4
38990: PPUSH
38991: LD_INT 3
38993: PPUSH
38994: CALL_OW 275
38998: PUSH
38999: LD_VAR 0 5
39003: PUSH
39004: LD_INT 3
39006: ARRAY
39007: GREATEREQUAL
39008: AND
39009: ST_TO_ADDR
// end ;
39010: LD_VAR 0 3
39014: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
39015: LD_INT 0
39017: PPUSH
39018: PPUSH
39019: PPUSH
39020: PPUSH
39021: PPUSH
39022: PPUSH
39023: PPUSH
39024: PPUSH
39025: PPUSH
39026: PPUSH
39027: PPUSH
// result := false ;
39028: LD_ADDR_VAR 0 8
39032: PUSH
39033: LD_INT 0
39035: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
39036: LD_VAR 0 5
39040: NOT
39041: IFTRUE 39050
39043: PUSH
39044: LD_VAR 0 1
39048: NOT
39049: OR
39050: IFTRUE 39059
39052: PUSH
39053: LD_VAR 0 2
39057: NOT
39058: OR
39059: IFTRUE 39068
39061: PUSH
39062: LD_VAR 0 3
39066: NOT
39067: OR
39068: IFFALSE 39072
// exit ;
39070: GO 39898
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
39072: LD_ADDR_VAR 0 14
39076: PUSH
39077: LD_VAR 0 1
39081: PPUSH
39082: LD_VAR 0 2
39086: PPUSH
39087: LD_VAR 0 3
39091: PPUSH
39092: LD_VAR 0 4
39096: PPUSH
39097: LD_VAR 0 5
39101: PUSH
39102: LD_INT 1
39104: ARRAY
39105: PPUSH
39106: CALL_OW 248
39110: PPUSH
39111: LD_INT 0
39113: PPUSH
39114: CALL 41179 0 6
39118: ST_TO_ADDR
// if not hexes then
39119: LD_VAR 0 14
39123: NOT
39124: IFFALSE 39128
// exit ;
39126: GO 39898
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39128: LD_ADDR_VAR 0 17
39132: PUSH
39133: LD_VAR 0 5
39137: PPUSH
39138: LD_INT 22
39140: PUSH
39141: LD_VAR 0 13
39145: PPUSH
39146: CALL_OW 255
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 2
39157: PUSH
39158: LD_INT 30
39160: PUSH
39161: LD_INT 0
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 30
39170: PUSH
39171: LD_INT 1
39173: PUSH
39174: EMPTY
39175: LIST
39176: LIST
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: LIST
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PPUSH
39187: CALL_OW 72
39191: ST_TO_ADDR
// for i = 1 to hexes do
39192: LD_ADDR_VAR 0 9
39196: PUSH
39197: DOUBLE
39198: LD_INT 1
39200: DEC
39201: ST_TO_ADDR
39202: LD_VAR 0 14
39206: PUSH
39207: FOR_TO
39208: IFFALSE 39896
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
39210: LD_ADDR_VAR 0 13
39214: PUSH
39215: LD_VAR 0 14
39219: PUSH
39220: LD_VAR 0 9
39224: ARRAY
39225: PUSH
39226: LD_INT 1
39228: ARRAY
39229: PPUSH
39230: LD_VAR 0 14
39234: PUSH
39235: LD_VAR 0 9
39239: ARRAY
39240: PUSH
39241: LD_INT 2
39243: ARRAY
39244: PPUSH
39245: CALL_OW 428
39249: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
39250: LD_VAR 0 14
39254: PUSH
39255: LD_VAR 0 9
39259: ARRAY
39260: PUSH
39261: LD_INT 1
39263: ARRAY
39264: PPUSH
39265: LD_VAR 0 14
39269: PUSH
39270: LD_VAR 0 9
39274: ARRAY
39275: PUSH
39276: LD_INT 2
39278: ARRAY
39279: PPUSH
39280: CALL_OW 351
39284: IFTRUE 39323
39286: PUSH
39287: LD_VAR 0 14
39291: PUSH
39292: LD_VAR 0 9
39296: ARRAY
39297: PUSH
39298: LD_INT 1
39300: ARRAY
39301: PPUSH
39302: LD_VAR 0 14
39306: PUSH
39307: LD_VAR 0 9
39311: ARRAY
39312: PUSH
39313: LD_INT 2
39315: ARRAY
39316: PPUSH
39317: CALL_OW 488
39321: NOT
39322: OR
39323: IFTRUE 39340
39325: PUSH
39326: LD_VAR 0 13
39330: PPUSH
39331: CALL_OW 247
39335: PUSH
39336: LD_INT 3
39338: EQUAL
39339: OR
39340: IFFALSE 39346
// exit ;
39342: POP
39343: POP
39344: GO 39898
// if not tmp then
39346: LD_VAR 0 13
39350: NOT
39351: IFFALSE 39355
// continue ;
39353: GO 39207
// result := true ;
39355: LD_ADDR_VAR 0 8
39359: PUSH
39360: LD_INT 1
39362: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
39363: LD_VAR 0 6
39367: IFFALSE 39384
39369: PUSH
39370: LD_VAR 0 13
39374: PPUSH
39375: CALL_OW 247
39379: PUSH
39380: LD_INT 2
39382: EQUAL
39383: AND
39384: IFFALSE 39401
39386: PUSH
39387: LD_VAR 0 13
39391: PPUSH
39392: CALL_OW 263
39396: PUSH
39397: LD_INT 1
39399: EQUAL
39400: AND
39401: IFFALSE 39565
// begin if IsDrivenBy ( tmp ) then
39403: LD_VAR 0 13
39407: PPUSH
39408: CALL_OW 311
39412: IFFALSE 39416
// continue ;
39414: GO 39207
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
39416: LD_VAR 0 6
39420: PPUSH
39421: LD_INT 3
39423: PUSH
39424: LD_INT 60
39426: PUSH
39427: EMPTY
39428: LIST
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 3
39436: PUSH
39437: LD_INT 55
39439: PUSH
39440: EMPTY
39441: LIST
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PPUSH
39451: CALL_OW 72
39455: IFFALSE 39563
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
39457: LD_ADDR_VAR 0 18
39461: PUSH
39462: LD_VAR 0 6
39466: PPUSH
39467: LD_INT 3
39469: PUSH
39470: LD_INT 60
39472: PUSH
39473: EMPTY
39474: LIST
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: LD_INT 3
39482: PUSH
39483: LD_INT 55
39485: PUSH
39486: EMPTY
39487: LIST
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PPUSH
39497: CALL_OW 72
39501: PUSH
39502: LD_INT 1
39504: ARRAY
39505: ST_TO_ADDR
// if IsInUnit ( driver ) then
39506: LD_VAR 0 18
39510: PPUSH
39511: CALL_OW 310
39515: IFFALSE 39526
// ComExit ( driver ) ;
39517: LD_VAR 0 18
39521: PPUSH
39522: CALL 65169 0 1
// AddComEnterUnit ( driver , tmp ) ;
39526: LD_VAR 0 18
39530: PPUSH
39531: LD_VAR 0 13
39535: PPUSH
39536: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
39540: LD_VAR 0 18
39544: PPUSH
39545: LD_VAR 0 7
39549: PPUSH
39550: CALL_OW 173
// AddComExitVehicle ( driver ) ;
39554: LD_VAR 0 18
39558: PPUSH
39559: CALL_OW 181
// end ; continue ;
39563: GO 39207
// end ; if not cleaners or not tmp in cleaners then
39565: LD_VAR 0 6
39569: NOT
39570: IFTRUE 39585
39572: PUSH
39573: LD_VAR 0 13
39577: PUSH
39578: LD_VAR 0 6
39582: IN
39583: NOT
39584: OR
39585: IFFALSE 39894
// begin if dep then
39587: LD_VAR 0 17
39591: IFFALSE 39727
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
39593: LD_ADDR_VAR 0 16
39597: PUSH
39598: LD_VAR 0 17
39602: PUSH
39603: LD_INT 1
39605: ARRAY
39606: PPUSH
39607: CALL_OW 250
39611: PPUSH
39612: LD_VAR 0 17
39616: PUSH
39617: LD_INT 1
39619: ARRAY
39620: PPUSH
39621: CALL_OW 254
39625: PPUSH
39626: LD_INT 5
39628: PPUSH
39629: CALL_OW 272
39633: PUSH
39634: LD_VAR 0 17
39638: PUSH
39639: LD_INT 1
39641: ARRAY
39642: PPUSH
39643: CALL_OW 251
39647: PPUSH
39648: LD_VAR 0 17
39652: PUSH
39653: LD_INT 1
39655: ARRAY
39656: PPUSH
39657: CALL_OW 254
39661: PPUSH
39662: LD_INT 5
39664: PPUSH
39665: CALL_OW 273
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
39674: LD_VAR 0 16
39678: PUSH
39679: LD_INT 1
39681: ARRAY
39682: PPUSH
39683: LD_VAR 0 16
39687: PUSH
39688: LD_INT 2
39690: ARRAY
39691: PPUSH
39692: CALL_OW 488
39696: IFFALSE 39727
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
39698: LD_VAR 0 13
39702: PPUSH
39703: LD_VAR 0 16
39707: PUSH
39708: LD_INT 1
39710: ARRAY
39711: PPUSH
39712: LD_VAR 0 16
39716: PUSH
39717: LD_INT 2
39719: ARRAY
39720: PPUSH
39721: CALL_OW 111
// continue ;
39725: GO 39207
// end ; end ; r := GetDir ( tmp ) ;
39727: LD_ADDR_VAR 0 15
39731: PUSH
39732: LD_VAR 0 13
39736: PPUSH
39737: CALL_OW 254
39741: ST_TO_ADDR
// if r = 5 then
39742: LD_VAR 0 15
39746: PUSH
39747: LD_INT 5
39749: EQUAL
39750: IFFALSE 39760
// r := 0 ;
39752: LD_ADDR_VAR 0 15
39756: PUSH
39757: LD_INT 0
39759: ST_TO_ADDR
// for j = r to 5 do
39760: LD_ADDR_VAR 0 10
39764: PUSH
39765: DOUBLE
39766: LD_VAR 0 15
39770: DEC
39771: ST_TO_ADDR
39772: LD_INT 5
39774: PUSH
39775: FOR_TO
39776: IFFALSE 39892
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
39778: LD_ADDR_VAR 0 11
39782: PUSH
39783: LD_VAR 0 13
39787: PPUSH
39788: CALL_OW 250
39792: PPUSH
39793: LD_VAR 0 10
39797: PPUSH
39798: LD_INT 2
39800: PPUSH
39801: CALL_OW 272
39805: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
39806: LD_ADDR_VAR 0 12
39810: PUSH
39811: LD_VAR 0 13
39815: PPUSH
39816: CALL_OW 251
39820: PPUSH
39821: LD_VAR 0 10
39825: PPUSH
39826: LD_INT 2
39828: PPUSH
39829: CALL_OW 273
39833: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
39834: LD_VAR 0 11
39838: PPUSH
39839: LD_VAR 0 12
39843: PPUSH
39844: CALL_OW 488
39848: IFFALSE 39867
39850: PUSH
39851: LD_VAR 0 11
39855: PPUSH
39856: LD_VAR 0 12
39860: PPUSH
39861: CALL_OW 428
39865: NOT
39866: AND
39867: IFFALSE 39890
// begin ComMoveXY ( tmp , _x , _y ) ;
39869: LD_VAR 0 13
39873: PPUSH
39874: LD_VAR 0 11
39878: PPUSH
39879: LD_VAR 0 12
39883: PPUSH
39884: CALL_OW 111
// break ;
39888: GO 39892
// end ; end ;
39890: GO 39775
39892: POP
39893: POP
// end ; end ;
39894: GO 39207
39896: POP
39897: POP
// end ;
39898: LD_VAR 0 8
39902: RET
// export function BuildingTechInvented ( side , btype ) ; begin
39903: LD_INT 0
39905: PPUSH
// result := true ;
39906: LD_ADDR_VAR 0 3
39910: PUSH
39911: LD_INT 1
39913: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
39914: LD_VAR 0 2
39918: PUSH
39919: LD_INT 24
39921: DOUBLE
39922: EQUAL
39923: IFTRUE 39933
39925: LD_INT 33
39927: DOUBLE
39928: EQUAL
39929: IFTRUE 39933
39931: GO 39958
39933: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
39934: LD_ADDR_VAR 0 3
39938: PUSH
39939: LD_INT 32
39941: PPUSH
39942: LD_VAR 0 1
39946: PPUSH
39947: CALL_OW 321
39951: PUSH
39952: LD_INT 2
39954: EQUAL
39955: ST_TO_ADDR
39956: GO 40274
39958: LD_INT 20
39960: DOUBLE
39961: EQUAL
39962: IFTRUE 39966
39964: GO 39991
39966: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
39967: LD_ADDR_VAR 0 3
39971: PUSH
39972: LD_INT 6
39974: PPUSH
39975: LD_VAR 0 1
39979: PPUSH
39980: CALL_OW 321
39984: PUSH
39985: LD_INT 2
39987: EQUAL
39988: ST_TO_ADDR
39989: GO 40274
39991: LD_INT 22
39993: DOUBLE
39994: EQUAL
39995: IFTRUE 40005
39997: LD_INT 36
39999: DOUBLE
40000: EQUAL
40001: IFTRUE 40005
40003: GO 40030
40005: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
40006: LD_ADDR_VAR 0 3
40010: PUSH
40011: LD_INT 15
40013: PPUSH
40014: LD_VAR 0 1
40018: PPUSH
40019: CALL_OW 321
40023: PUSH
40024: LD_INT 2
40026: EQUAL
40027: ST_TO_ADDR
40028: GO 40274
40030: LD_INT 30
40032: DOUBLE
40033: EQUAL
40034: IFTRUE 40038
40036: GO 40063
40038: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
40039: LD_ADDR_VAR 0 3
40043: PUSH
40044: LD_INT 20
40046: PPUSH
40047: LD_VAR 0 1
40051: PPUSH
40052: CALL_OW 321
40056: PUSH
40057: LD_INT 2
40059: EQUAL
40060: ST_TO_ADDR
40061: GO 40274
40063: LD_INT 28
40065: DOUBLE
40066: EQUAL
40067: IFTRUE 40077
40069: LD_INT 21
40071: DOUBLE
40072: EQUAL
40073: IFTRUE 40077
40075: GO 40102
40077: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
40078: LD_ADDR_VAR 0 3
40082: PUSH
40083: LD_INT 21
40085: PPUSH
40086: LD_VAR 0 1
40090: PPUSH
40091: CALL_OW 321
40095: PUSH
40096: LD_INT 2
40098: EQUAL
40099: ST_TO_ADDR
40100: GO 40274
40102: LD_INT 16
40104: DOUBLE
40105: EQUAL
40106: IFTRUE 40110
40108: GO 40135
40110: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
40111: LD_ADDR_VAR 0 3
40115: PUSH
40116: LD_INT 84
40118: PPUSH
40119: LD_VAR 0 1
40123: PPUSH
40124: CALL_OW 321
40128: PUSH
40129: LD_INT 2
40131: EQUAL
40132: ST_TO_ADDR
40133: GO 40274
40135: LD_INT 19
40137: DOUBLE
40138: EQUAL
40139: IFTRUE 40149
40141: LD_INT 23
40143: DOUBLE
40144: EQUAL
40145: IFTRUE 40149
40147: GO 40174
40149: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
40150: LD_ADDR_VAR 0 3
40154: PUSH
40155: LD_INT 83
40157: PPUSH
40158: LD_VAR 0 1
40162: PPUSH
40163: CALL_OW 321
40167: PUSH
40168: LD_INT 2
40170: EQUAL
40171: ST_TO_ADDR
40172: GO 40274
40174: LD_INT 17
40176: DOUBLE
40177: EQUAL
40178: IFTRUE 40182
40180: GO 40207
40182: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
40183: LD_ADDR_VAR 0 3
40187: PUSH
40188: LD_INT 39
40190: PPUSH
40191: LD_VAR 0 1
40195: PPUSH
40196: CALL_OW 321
40200: PUSH
40201: LD_INT 2
40203: EQUAL
40204: ST_TO_ADDR
40205: GO 40274
40207: LD_INT 18
40209: DOUBLE
40210: EQUAL
40211: IFTRUE 40215
40213: GO 40240
40215: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
40216: LD_ADDR_VAR 0 3
40220: PUSH
40221: LD_INT 40
40223: PPUSH
40224: LD_VAR 0 1
40228: PPUSH
40229: CALL_OW 321
40233: PUSH
40234: LD_INT 2
40236: EQUAL
40237: ST_TO_ADDR
40238: GO 40274
40240: LD_INT 27
40242: DOUBLE
40243: EQUAL
40244: IFTRUE 40248
40246: GO 40273
40248: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
40249: LD_ADDR_VAR 0 3
40253: PUSH
40254: LD_INT 35
40256: PPUSH
40257: LD_VAR 0 1
40261: PPUSH
40262: CALL_OW 321
40266: PUSH
40267: LD_INT 2
40269: EQUAL
40270: ST_TO_ADDR
40271: GO 40274
40273: POP
// end ;
40274: LD_VAR 0 3
40278: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
40279: LD_INT 0
40281: PPUSH
40282: PPUSH
40283: PPUSH
40284: PPUSH
40285: PPUSH
40286: PPUSH
40287: PPUSH
40288: PPUSH
40289: PPUSH
40290: PPUSH
40291: PPUSH
// result := false ;
40292: LD_ADDR_VAR 0 6
40296: PUSH
40297: LD_INT 0
40299: ST_TO_ADDR
// if btype = b_depot then
40300: LD_VAR 0 2
40304: PUSH
40305: LD_INT 0
40307: EQUAL
40308: IFFALSE 40320
// begin result := true ;
40310: LD_ADDR_VAR 0 6
40314: PUSH
40315: LD_INT 1
40317: ST_TO_ADDR
// exit ;
40318: GO 41174
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
40320: LD_VAR 0 1
40324: NOT
40325: IFTRUE 40350
40327: PUSH
40328: LD_VAR 0 1
40332: PPUSH
40333: CALL_OW 266
40337: PUSH
40338: LD_INT 0
40340: PUSH
40341: LD_INT 1
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: IN
40348: NOT
40349: OR
40350: IFTRUE 40359
40352: PUSH
40353: LD_VAR 0 2
40357: NOT
40358: OR
40359: IFTRUE 40395
40361: PUSH
40362: LD_VAR 0 5
40366: PUSH
40367: LD_INT 0
40369: PUSH
40370: LD_INT 1
40372: PUSH
40373: LD_INT 2
40375: PUSH
40376: LD_INT 3
40378: PUSH
40379: LD_INT 4
40381: PUSH
40382: LD_INT 5
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: IN
40393: NOT
40394: OR
40395: IFTRUE 40414
40397: PUSH
40398: LD_VAR 0 3
40402: PPUSH
40403: LD_VAR 0 4
40407: PPUSH
40408: CALL_OW 488
40412: NOT
40413: OR
40414: IFFALSE 40418
// exit ;
40416: GO 41174
// side := GetSide ( depot ) ;
40418: LD_ADDR_VAR 0 9
40422: PUSH
40423: LD_VAR 0 1
40427: PPUSH
40428: CALL_OW 255
40432: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
40433: LD_VAR 0 9
40437: PPUSH
40438: LD_VAR 0 2
40442: PPUSH
40443: CALL 39903 0 2
40447: NOT
40448: IFFALSE 40452
// exit ;
40450: GO 41174
// pom := GetBase ( depot ) ;
40452: LD_ADDR_VAR 0 10
40456: PUSH
40457: LD_VAR 0 1
40461: PPUSH
40462: CALL_OW 274
40466: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
40467: LD_ADDR_VAR 0 11
40471: PUSH
40472: LD_VAR 0 2
40476: PPUSH
40477: LD_VAR 0 1
40481: PPUSH
40482: CALL_OW 248
40486: PPUSH
40487: CALL_OW 450
40491: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
40492: LD_VAR 0 10
40496: PPUSH
40497: LD_INT 1
40499: PPUSH
40500: CALL_OW 275
40504: PUSH
40505: LD_VAR 0 11
40509: PUSH
40510: LD_INT 1
40512: ARRAY
40513: GREATEREQUAL
40514: IFFALSE 40540
40516: PUSH
40517: LD_VAR 0 10
40521: PPUSH
40522: LD_INT 2
40524: PPUSH
40525: CALL_OW 275
40529: PUSH
40530: LD_VAR 0 11
40534: PUSH
40535: LD_INT 2
40537: ARRAY
40538: GREATEREQUAL
40539: AND
40540: IFFALSE 40566
40542: PUSH
40543: LD_VAR 0 10
40547: PPUSH
40548: LD_INT 3
40550: PPUSH
40551: CALL_OW 275
40555: PUSH
40556: LD_VAR 0 11
40560: PUSH
40561: LD_INT 3
40563: ARRAY
40564: GREATEREQUAL
40565: AND
40566: NOT
40567: IFFALSE 40571
// exit ;
40569: GO 41174
// if GetBType ( depot ) = b_depot then
40571: LD_VAR 0 1
40575: PPUSH
40576: CALL_OW 266
40580: PUSH
40581: LD_INT 0
40583: EQUAL
40584: IFFALSE 40596
// dist := 28 else
40586: LD_ADDR_VAR 0 14
40590: PUSH
40591: LD_INT 28
40593: ST_TO_ADDR
40594: GO 40604
// dist := 36 ;
40596: LD_ADDR_VAR 0 14
40600: PUSH
40601: LD_INT 36
40603: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
40604: LD_VAR 0 1
40608: PPUSH
40609: LD_VAR 0 3
40613: PPUSH
40614: LD_VAR 0 4
40618: PPUSH
40619: CALL_OW 297
40623: PUSH
40624: LD_VAR 0 14
40628: GREATER
40629: IFFALSE 40633
// exit ;
40631: GO 41174
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
40633: LD_ADDR_VAR 0 12
40637: PUSH
40638: LD_VAR 0 2
40642: PPUSH
40643: LD_VAR 0 3
40647: PPUSH
40648: LD_VAR 0 4
40652: PPUSH
40653: LD_VAR 0 5
40657: PPUSH
40658: LD_VAR 0 1
40662: PPUSH
40663: CALL_OW 248
40667: PPUSH
40668: LD_INT 0
40670: PPUSH
40671: CALL 41179 0 6
40675: ST_TO_ADDR
// if not hexes then
40676: LD_VAR 0 12
40680: NOT
40681: IFFALSE 40685
// exit ;
40683: GO 41174
// hex := GetHexInfo ( x , y ) ;
40685: LD_ADDR_VAR 0 15
40689: PUSH
40690: LD_VAR 0 3
40694: PPUSH
40695: LD_VAR 0 4
40699: PPUSH
40700: CALL_OW 546
40704: ST_TO_ADDR
// if hex [ 1 ] then
40705: LD_VAR 0 15
40709: PUSH
40710: LD_INT 1
40712: ARRAY
40713: IFFALSE 40717
// exit ;
40715: GO 41174
// height := hex [ 2 ] ;
40717: LD_ADDR_VAR 0 13
40721: PUSH
40722: LD_VAR 0 15
40726: PUSH
40727: LD_INT 2
40729: ARRAY
40730: ST_TO_ADDR
// for i = 1 to hexes do
40731: LD_ADDR_VAR 0 7
40735: PUSH
40736: DOUBLE
40737: LD_INT 1
40739: DEC
40740: ST_TO_ADDR
40741: LD_VAR 0 12
40745: PUSH
40746: FOR_TO
40747: IFFALSE 41091
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
40749: LD_VAR 0 12
40753: PUSH
40754: LD_VAR 0 7
40758: ARRAY
40759: PUSH
40760: LD_INT 1
40762: ARRAY
40763: PPUSH
40764: LD_VAR 0 12
40768: PUSH
40769: LD_VAR 0 7
40773: ARRAY
40774: PUSH
40775: LD_INT 2
40777: ARRAY
40778: PPUSH
40779: CALL_OW 488
40783: NOT
40784: IFTRUE 40826
40786: PUSH
40787: LD_VAR 0 12
40791: PUSH
40792: LD_VAR 0 7
40796: ARRAY
40797: PUSH
40798: LD_INT 1
40800: ARRAY
40801: PPUSH
40802: LD_VAR 0 12
40806: PUSH
40807: LD_VAR 0 7
40811: ARRAY
40812: PUSH
40813: LD_INT 2
40815: ARRAY
40816: PPUSH
40817: CALL_OW 428
40821: PUSH
40822: LD_INT 0
40824: GREATER
40825: OR
40826: IFTRUE 40864
40828: PUSH
40829: LD_VAR 0 12
40833: PUSH
40834: LD_VAR 0 7
40838: ARRAY
40839: PUSH
40840: LD_INT 1
40842: ARRAY
40843: PPUSH
40844: LD_VAR 0 12
40848: PUSH
40849: LD_VAR 0 7
40853: ARRAY
40854: PUSH
40855: LD_INT 2
40857: ARRAY
40858: PPUSH
40859: CALL_OW 351
40863: OR
40864: IFFALSE 40870
// exit ;
40866: POP
40867: POP
40868: GO 41174
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
40870: LD_ADDR_VAR 0 8
40874: PUSH
40875: LD_VAR 0 12
40879: PUSH
40880: LD_VAR 0 7
40884: ARRAY
40885: PUSH
40886: LD_INT 1
40888: ARRAY
40889: PPUSH
40890: LD_VAR 0 12
40894: PUSH
40895: LD_VAR 0 7
40899: ARRAY
40900: PUSH
40901: LD_INT 2
40903: ARRAY
40904: PPUSH
40905: CALL_OW 546
40909: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
40910: LD_VAR 0 8
40914: PUSH
40915: LD_INT 1
40917: ARRAY
40918: IFTRUE 40940
40920: PUSH
40921: LD_VAR 0 8
40925: PUSH
40926: LD_INT 2
40928: ARRAY
40929: PUSH
40930: LD_VAR 0 13
40934: PUSH
40935: LD_INT 2
40937: PLUS
40938: GREATER
40939: OR
40940: IFTRUE 40962
40942: PUSH
40943: LD_VAR 0 8
40947: PUSH
40948: LD_INT 2
40950: ARRAY
40951: PUSH
40952: LD_VAR 0 13
40956: PUSH
40957: LD_INT 2
40959: MINUS
40960: LESS
40961: OR
40962: IFTRUE 41030
40964: PUSH
40965: LD_VAR 0 8
40969: PUSH
40970: LD_INT 3
40972: ARRAY
40973: PUSH
40974: LD_INT 0
40976: PUSH
40977: LD_INT 8
40979: PUSH
40980: LD_INT 9
40982: PUSH
40983: LD_INT 10
40985: PUSH
40986: LD_INT 11
40988: PUSH
40989: LD_INT 12
40991: PUSH
40992: LD_INT 13
40994: PUSH
40995: LD_INT 16
40997: PUSH
40998: LD_INT 17
41000: PUSH
41001: LD_INT 18
41003: PUSH
41004: LD_INT 19
41006: PUSH
41007: LD_INT 20
41009: PUSH
41010: LD_INT 21
41012: PUSH
41013: EMPTY
41014: LIST
41015: LIST
41016: LIST
41017: LIST
41018: LIST
41019: LIST
41020: LIST
41021: LIST
41022: LIST
41023: LIST
41024: LIST
41025: LIST
41026: LIST
41027: IN
41028: NOT
41029: OR
41030: IFTRUE 41043
41032: PUSH
41033: LD_VAR 0 8
41037: PUSH
41038: LD_INT 5
41040: ARRAY
41041: NOT
41042: OR
41043: IFTRUE 41083
41045: PUSH
41046: LD_VAR 0 8
41050: PUSH
41051: LD_INT 6
41053: ARRAY
41054: PUSH
41055: LD_INT 1
41057: PUSH
41058: LD_INT 2
41060: PUSH
41061: LD_INT 7
41063: PUSH
41064: LD_INT 9
41066: PUSH
41067: LD_INT 10
41069: PUSH
41070: LD_INT 11
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: IN
41081: NOT
41082: OR
41083: IFFALSE 41089
// exit ;
41085: POP
41086: POP
41087: GO 41174
// end ;
41089: GO 40746
41091: POP
41092: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
41093: LD_VAR 0 9
41097: PPUSH
41098: LD_VAR 0 3
41102: PPUSH
41103: LD_VAR 0 4
41107: PPUSH
41108: LD_INT 20
41110: PPUSH
41111: CALL 32993 0 4
41115: PUSH
41116: LD_INT 4
41118: ARRAY
41119: IFFALSE 41123
// exit ;
41121: GO 41174
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
41123: LD_VAR 0 2
41127: PUSH
41128: LD_INT 29
41130: PUSH
41131: LD_INT 30
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: IN
41138: IFFALSE 41162
41140: PUSH
41141: LD_VAR 0 3
41145: PPUSH
41146: LD_VAR 0 4
41150: PPUSH
41151: LD_VAR 0 9
41155: PPUSH
41156: CALL_OW 440
41160: NOT
41161: AND
41162: IFFALSE 41166
// exit ;
41164: GO 41174
// result := true ;
41166: LD_ADDR_VAR 0 6
41170: PUSH
41171: LD_INT 1
41173: ST_TO_ADDR
// end ;
41174: LD_VAR 0 6
41178: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
41179: LD_INT 0
41181: PPUSH
41182: PPUSH
41183: PPUSH
41184: PPUSH
41185: PPUSH
41186: PPUSH
41187: PPUSH
41188: PPUSH
41189: PPUSH
41190: PPUSH
41191: PPUSH
41192: PPUSH
41193: PPUSH
41194: PPUSH
41195: PPUSH
41196: PPUSH
41197: PPUSH
41198: PPUSH
41199: PPUSH
41200: PPUSH
41201: PPUSH
41202: PPUSH
41203: PPUSH
41204: PPUSH
41205: PPUSH
41206: PPUSH
41207: PPUSH
41208: PPUSH
41209: PPUSH
41210: PPUSH
41211: PPUSH
41212: PPUSH
41213: PPUSH
41214: PPUSH
41215: PPUSH
41216: PPUSH
41217: PPUSH
41218: PPUSH
41219: PPUSH
41220: PPUSH
41221: PPUSH
41222: PPUSH
41223: PPUSH
41224: PPUSH
41225: PPUSH
41226: PPUSH
41227: PPUSH
41228: PPUSH
41229: PPUSH
41230: PPUSH
41231: PPUSH
41232: PPUSH
41233: PPUSH
41234: PPUSH
41235: PPUSH
41236: PPUSH
41237: PPUSH
41238: PPUSH
// result = [ ] ;
41239: LD_ADDR_VAR 0 7
41243: PUSH
41244: EMPTY
41245: ST_TO_ADDR
// temp_list = [ ] ;
41246: LD_ADDR_VAR 0 9
41250: PUSH
41251: EMPTY
41252: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
41253: LD_VAR 0 4
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: LD_INT 1
41263: PUSH
41264: LD_INT 2
41266: PUSH
41267: LD_INT 3
41269: PUSH
41270: LD_INT 4
41272: PUSH
41273: LD_INT 5
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: IN
41284: NOT
41285: IFTRUE 41328
41287: PUSH
41288: LD_VAR 0 1
41292: PUSH
41293: LD_INT 0
41295: PUSH
41296: LD_INT 1
41298: PUSH
41299: EMPTY
41300: LIST
41301: LIST
41302: IN
41303: IFFALSE 41327
41305: PUSH
41306: LD_VAR 0 5
41310: PUSH
41311: LD_INT 1
41313: PUSH
41314: LD_INT 2
41316: PUSH
41317: LD_INT 3
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: LIST
41324: IN
41325: NOT
41326: AND
41327: OR
41328: IFFALSE 41332
// exit ;
41330: GO 59731
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
41332: LD_VAR 0 1
41336: PUSH
41337: LD_INT 6
41339: PUSH
41340: LD_INT 7
41342: PUSH
41343: LD_INT 8
41345: PUSH
41346: LD_INT 13
41348: PUSH
41349: LD_INT 12
41351: PUSH
41352: LD_INT 15
41354: PUSH
41355: LD_INT 11
41357: PUSH
41358: LD_INT 14
41360: PUSH
41361: LD_INT 10
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: IN
41375: IFFALSE 41385
// btype = b_lab ;
41377: LD_ADDR_VAR 0 1
41381: PUSH
41382: LD_INT 6
41384: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
41385: LD_VAR 0 6
41389: PUSH
41390: LD_INT 0
41392: PUSH
41393: LD_INT 1
41395: PUSH
41396: LD_INT 2
41398: PUSH
41399: EMPTY
41400: LIST
41401: LIST
41402: LIST
41403: IN
41404: NOT
41405: IFTRUE 41473
41407: PUSH
41408: LD_VAR 0 1
41412: PUSH
41413: LD_INT 0
41415: PUSH
41416: LD_INT 1
41418: PUSH
41419: LD_INT 2
41421: PUSH
41422: LD_INT 3
41424: PUSH
41425: LD_INT 6
41427: PUSH
41428: LD_INT 36
41430: PUSH
41431: LD_INT 4
41433: PUSH
41434: LD_INT 5
41436: PUSH
41437: LD_INT 31
41439: PUSH
41440: LD_INT 32
41442: PUSH
41443: LD_INT 33
41445: PUSH
41446: EMPTY
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: IN
41459: NOT
41460: IFFALSE 41472
41462: PUSH
41463: LD_VAR 0 6
41467: PUSH
41468: LD_INT 1
41470: EQUAL
41471: AND
41472: OR
41473: IFTRUE 41505
41475: PUSH
41476: LD_VAR 0 1
41480: PUSH
41481: LD_INT 2
41483: PUSH
41484: LD_INT 3
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: IN
41491: NOT
41492: IFFALSE 41504
41494: PUSH
41495: LD_VAR 0 6
41499: PUSH
41500: LD_INT 2
41502: EQUAL
41503: AND
41504: OR
41505: IFFALSE 41515
// mode = 0 ;
41507: LD_ADDR_VAR 0 6
41511: PUSH
41512: LD_INT 0
41514: ST_TO_ADDR
// case mode of 0 :
41515: LD_VAR 0 6
41519: PUSH
41520: LD_INT 0
41522: DOUBLE
41523: EQUAL
41524: IFTRUE 41528
41526: GO 52981
41528: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41529: LD_ADDR_VAR 0 11
41533: PUSH
41534: LD_INT 0
41536: PUSH
41537: LD_INT 0
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: PUSH
41544: LD_INT 0
41546: PUSH
41547: LD_INT 1
41549: NEG
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 1
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: PUSH
41568: LD_INT 1
41570: PUSH
41571: EMPTY
41572: LIST
41573: LIST
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 1
41587: NEG
41588: PUSH
41589: LD_INT 0
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 1
41598: NEG
41599: PUSH
41600: LD_INT 1
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 1
41610: NEG
41611: PUSH
41612: LD_INT 2
41614: NEG
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: LD_INT 0
41622: PUSH
41623: LD_INT 2
41625: NEG
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: LD_INT 1
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 1
41644: PUSH
41645: LD_INT 2
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 0
41654: PUSH
41655: LD_INT 2
41657: PUSH
41658: EMPTY
41659: LIST
41660: LIST
41661: PUSH
41662: LD_INT 1
41664: NEG
41665: PUSH
41666: LD_INT 1
41668: PUSH
41669: EMPTY
41670: LIST
41671: LIST
41672: PUSH
41673: LD_INT 1
41675: PUSH
41676: LD_INT 3
41678: PUSH
41679: EMPTY
41680: LIST
41681: LIST
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: LD_INT 3
41688: PUSH
41689: EMPTY
41690: LIST
41691: LIST
41692: PUSH
41693: LD_INT 1
41695: NEG
41696: PUSH
41697: LD_INT 2
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: LIST
41708: LIST
41709: LIST
41710: LIST
41711: LIST
41712: LIST
41713: LIST
41714: LIST
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41722: LD_ADDR_VAR 0 12
41726: PUSH
41727: LD_INT 0
41729: PUSH
41730: LD_INT 0
41732: PUSH
41733: EMPTY
41734: LIST
41735: LIST
41736: PUSH
41737: LD_INT 0
41739: PUSH
41740: LD_INT 1
41742: NEG
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: LD_INT 0
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: LD_INT 1
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 0
41770: PUSH
41771: LD_INT 1
41773: PUSH
41774: EMPTY
41775: LIST
41776: LIST
41777: PUSH
41778: LD_INT 1
41780: NEG
41781: PUSH
41782: LD_INT 0
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 1
41791: NEG
41792: PUSH
41793: LD_INT 1
41795: NEG
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 1
41803: PUSH
41804: LD_INT 1
41806: NEG
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 2
41814: PUSH
41815: LD_INT 0
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 2
41824: PUSH
41825: LD_INT 1
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 1
41834: NEG
41835: PUSH
41836: LD_INT 1
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 2
41845: NEG
41846: PUSH
41847: LD_INT 0
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 2
41856: NEG
41857: PUSH
41858: LD_INT 1
41860: NEG
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 2
41868: NEG
41869: PUSH
41870: LD_INT 1
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 3
41879: NEG
41880: PUSH
41881: LD_INT 0
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 3
41890: NEG
41891: PUSH
41892: LD_INT 1
41894: NEG
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41918: LD_ADDR_VAR 0 13
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: LD_INT 0
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: PUSH
41933: LD_INT 0
41935: PUSH
41936: LD_INT 1
41938: NEG
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 1
41946: PUSH
41947: LD_INT 0
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 1
41956: PUSH
41957: LD_INT 1
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: LD_INT 1
41969: PUSH
41970: EMPTY
41971: LIST
41972: LIST
41973: PUSH
41974: LD_INT 1
41976: NEG
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: LD_INT 1
41991: NEG
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 1
41999: NEG
42000: PUSH
42001: LD_INT 2
42003: NEG
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: LD_INT 1
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 2
42021: PUSH
42022: LD_INT 2
42024: PUSH
42025: EMPTY
42026: LIST
42027: LIST
42028: PUSH
42029: LD_INT 1
42031: PUSH
42032: LD_INT 2
42034: PUSH
42035: EMPTY
42036: LIST
42037: LIST
42038: PUSH
42039: LD_INT 2
42041: NEG
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: EMPTY
42048: LIST
42049: LIST
42050: PUSH
42051: LD_INT 2
42053: NEG
42054: PUSH
42055: LD_INT 2
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 2
42065: NEG
42066: PUSH
42067: LD_INT 3
42069: NEG
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: PUSH
42075: LD_INT 3
42077: NEG
42078: PUSH
42079: LD_INT 2
42081: NEG
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 3
42089: NEG
42090: PUSH
42091: LD_INT 3
42093: NEG
42094: PUSH
42095: EMPTY
42096: LIST
42097: LIST
42098: PUSH
42099: EMPTY
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
42117: LD_ADDR_VAR 0 14
42121: PUSH
42122: LD_INT 0
42124: PUSH
42125: LD_INT 0
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: LD_INT 1
42137: NEG
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: LD_INT 0
42148: PUSH
42149: EMPTY
42150: LIST
42151: LIST
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: LD_INT 1
42158: PUSH
42159: EMPTY
42160: LIST
42161: LIST
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: LD_INT 1
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 1
42175: NEG
42176: PUSH
42177: LD_INT 0
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 1
42186: NEG
42187: PUSH
42188: LD_INT 1
42190: NEG
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 1
42198: NEG
42199: PUSH
42200: LD_INT 2
42202: NEG
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: LD_INT 0
42210: PUSH
42211: LD_INT 2
42213: NEG
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 1
42221: PUSH
42222: LD_INT 1
42224: NEG
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: LD_INT 2
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 0
42242: PUSH
42243: LD_INT 2
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 1
42252: NEG
42253: PUSH
42254: LD_INT 1
42256: PUSH
42257: EMPTY
42258: LIST
42259: LIST
42260: PUSH
42261: LD_INT 1
42263: NEG
42264: PUSH
42265: LD_INT 3
42267: NEG
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 0
42275: PUSH
42276: LD_INT 3
42278: NEG
42279: PUSH
42280: EMPTY
42281: LIST
42282: LIST
42283: PUSH
42284: LD_INT 1
42286: PUSH
42287: LD_INT 2
42289: NEG
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: LIST
42299: LIST
42300: LIST
42301: LIST
42302: LIST
42303: LIST
42304: LIST
42305: LIST
42306: LIST
42307: LIST
42308: LIST
42309: LIST
42310: LIST
42311: LIST
42312: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
42313: LD_ADDR_VAR 0 15
42317: PUSH
42318: LD_INT 0
42320: PUSH
42321: LD_INT 0
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 0
42330: PUSH
42331: LD_INT 1
42333: NEG
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: LD_INT 0
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: LD_INT 1
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: LD_INT 1
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: LD_INT 0
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: NEG
42383: PUSH
42384: LD_INT 1
42386: NEG
42387: PUSH
42388: EMPTY
42389: LIST
42390: LIST
42391: PUSH
42392: LD_INT 1
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 2
42405: PUSH
42406: LD_INT 0
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 2
42415: PUSH
42416: LD_INT 1
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 2
42436: NEG
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 2
42447: NEG
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 2
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 3
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 3
42480: PUSH
42481: LD_INT 1
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
42506: LD_ADDR_VAR 0 16
42510: PUSH
42511: LD_INT 0
42513: PUSH
42514: LD_INT 0
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: LD_INT 1
42526: NEG
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 1
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 1
42544: PUSH
42545: LD_INT 1
42547: PUSH
42548: EMPTY
42549: LIST
42550: LIST
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: LD_INT 1
42557: PUSH
42558: EMPTY
42559: LIST
42560: LIST
42561: PUSH
42562: LD_INT 1
42564: NEG
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: EMPTY
42570: LIST
42571: LIST
42572: PUSH
42573: LD_INT 1
42575: NEG
42576: PUSH
42577: LD_INT 1
42579: NEG
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: LD_INT 2
42591: NEG
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 2
42599: PUSH
42600: LD_INT 1
42602: PUSH
42603: EMPTY
42604: LIST
42605: LIST
42606: PUSH
42607: LD_INT 2
42609: PUSH
42610: LD_INT 2
42612: PUSH
42613: EMPTY
42614: LIST
42615: LIST
42616: PUSH
42617: LD_INT 1
42619: PUSH
42620: LD_INT 2
42622: PUSH
42623: EMPTY
42624: LIST
42625: LIST
42626: PUSH
42627: LD_INT 2
42629: NEG
42630: PUSH
42631: LD_INT 1
42633: NEG
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 2
42641: NEG
42642: PUSH
42643: LD_INT 2
42645: NEG
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: PUSH
42651: LD_INT 3
42653: PUSH
42654: LD_INT 2
42656: PUSH
42657: EMPTY
42658: LIST
42659: LIST
42660: PUSH
42661: LD_INT 3
42663: PUSH
42664: LD_INT 3
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 2
42673: PUSH
42674: LD_INT 3
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: LIST
42685: LIST
42686: LIST
42687: LIST
42688: LIST
42689: LIST
42690: LIST
42691: LIST
42692: LIST
42693: LIST
42694: LIST
42695: LIST
42696: LIST
42697: LIST
42698: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42699: LD_ADDR_VAR 0 17
42703: PUSH
42704: LD_INT 0
42706: PUSH
42707: LD_INT 0
42709: PUSH
42710: EMPTY
42711: LIST
42712: LIST
42713: PUSH
42714: LD_INT 0
42716: PUSH
42717: LD_INT 1
42719: NEG
42720: PUSH
42721: EMPTY
42722: LIST
42723: LIST
42724: PUSH
42725: LD_INT 1
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 1
42737: PUSH
42738: LD_INT 1
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 0
42747: PUSH
42748: LD_INT 1
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: PUSH
42759: LD_INT 0
42761: PUSH
42762: EMPTY
42763: LIST
42764: LIST
42765: PUSH
42766: LD_INT 1
42768: NEG
42769: PUSH
42770: LD_INT 1
42772: NEG
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 1
42780: NEG
42781: PUSH
42782: LD_INT 2
42784: NEG
42785: PUSH
42786: EMPTY
42787: LIST
42788: LIST
42789: PUSH
42790: LD_INT 0
42792: PUSH
42793: LD_INT 2
42795: NEG
42796: PUSH
42797: EMPTY
42798: LIST
42799: LIST
42800: PUSH
42801: LD_INT 1
42803: PUSH
42804: LD_INT 1
42806: NEG
42807: PUSH
42808: EMPTY
42809: LIST
42810: LIST
42811: PUSH
42812: LD_INT 2
42814: PUSH
42815: LD_INT 0
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 2
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 2
42834: PUSH
42835: LD_INT 2
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 1
42844: PUSH
42845: LD_INT 2
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: LD_INT 2
42857: PUSH
42858: EMPTY
42859: LIST
42860: LIST
42861: PUSH
42862: LD_INT 1
42864: NEG
42865: PUSH
42866: LD_INT 1
42868: PUSH
42869: EMPTY
42870: LIST
42871: LIST
42872: PUSH
42873: LD_INT 2
42875: NEG
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 2
42886: NEG
42887: PUSH
42888: LD_INT 1
42890: NEG
42891: PUSH
42892: EMPTY
42893: LIST
42894: LIST
42895: PUSH
42896: LD_INT 2
42898: NEG
42899: PUSH
42900: LD_INT 2
42902: NEG
42903: PUSH
42904: EMPTY
42905: LIST
42906: LIST
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42929: LD_ADDR_VAR 0 18
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: LD_INT 0
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: LD_INT 1
42949: NEG
42950: PUSH
42951: EMPTY
42952: LIST
42953: LIST
42954: PUSH
42955: LD_INT 1
42957: PUSH
42958: LD_INT 0
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: LD_INT 1
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 0
42977: PUSH
42978: LD_INT 1
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 1
42987: NEG
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 1
42998: NEG
42999: PUSH
43000: LD_INT 1
43002: NEG
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 1
43010: NEG
43011: PUSH
43012: LD_INT 2
43014: NEG
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: LD_INT 2
43025: NEG
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 2
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 2
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 2
43064: PUSH
43065: LD_INT 2
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 1
43074: PUSH
43075: LD_INT 2
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 0
43084: PUSH
43085: LD_INT 2
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 1
43094: NEG
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 2
43105: NEG
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 2
43116: NEG
43117: PUSH
43118: LD_INT 1
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 2
43128: NEG
43129: PUSH
43130: LD_INT 2
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: EMPTY
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43159: LD_ADDR_VAR 0 19
43163: PUSH
43164: LD_INT 0
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 1
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: PUSH
43198: LD_INT 1
43200: PUSH
43201: EMPTY
43202: LIST
43203: LIST
43204: PUSH
43205: LD_INT 0
43207: PUSH
43208: LD_INT 1
43210: PUSH
43211: EMPTY
43212: LIST
43213: LIST
43214: PUSH
43215: LD_INT 1
43217: NEG
43218: PUSH
43219: LD_INT 0
43221: PUSH
43222: EMPTY
43223: LIST
43224: LIST
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 1
43240: NEG
43241: PUSH
43242: LD_INT 2
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 0
43252: PUSH
43253: LD_INT 2
43255: NEG
43256: PUSH
43257: EMPTY
43258: LIST
43259: LIST
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: LD_INT 1
43266: NEG
43267: PUSH
43268: EMPTY
43269: LIST
43270: LIST
43271: PUSH
43272: LD_INT 2
43274: PUSH
43275: LD_INT 0
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: PUSH
43282: LD_INT 2
43284: PUSH
43285: LD_INT 1
43287: PUSH
43288: EMPTY
43289: LIST
43290: LIST
43291: PUSH
43292: LD_INT 2
43294: PUSH
43295: LD_INT 2
43297: PUSH
43298: EMPTY
43299: LIST
43300: LIST
43301: PUSH
43302: LD_INT 1
43304: PUSH
43305: LD_INT 2
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 0
43314: PUSH
43315: LD_INT 2
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: LD_INT 1
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 2
43335: NEG
43336: PUSH
43337: LD_INT 0
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 2
43346: NEG
43347: PUSH
43348: LD_INT 1
43350: NEG
43351: PUSH
43352: EMPTY
43353: LIST
43354: LIST
43355: PUSH
43356: LD_INT 2
43358: NEG
43359: PUSH
43360: LD_INT 2
43362: NEG
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: LIST
43372: LIST
43373: LIST
43374: LIST
43375: LIST
43376: LIST
43377: LIST
43378: LIST
43379: LIST
43380: LIST
43381: LIST
43382: LIST
43383: LIST
43384: LIST
43385: LIST
43386: LIST
43387: LIST
43388: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43389: LD_ADDR_VAR 0 20
43393: PUSH
43394: LD_INT 0
43396: PUSH
43397: LD_INT 0
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 0
43406: PUSH
43407: LD_INT 1
43409: NEG
43410: PUSH
43411: EMPTY
43412: LIST
43413: LIST
43414: PUSH
43415: LD_INT 1
43417: PUSH
43418: LD_INT 0
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 1
43447: NEG
43448: PUSH
43449: LD_INT 0
43451: PUSH
43452: EMPTY
43453: LIST
43454: LIST
43455: PUSH
43456: LD_INT 1
43458: NEG
43459: PUSH
43460: LD_INT 1
43462: NEG
43463: PUSH
43464: EMPTY
43465: LIST
43466: LIST
43467: PUSH
43468: LD_INT 1
43470: NEG
43471: PUSH
43472: LD_INT 2
43474: NEG
43475: PUSH
43476: EMPTY
43477: LIST
43478: LIST
43479: PUSH
43480: LD_INT 0
43482: PUSH
43483: LD_INT 2
43485: NEG
43486: PUSH
43487: EMPTY
43488: LIST
43489: LIST
43490: PUSH
43491: LD_INT 1
43493: PUSH
43494: LD_INT 1
43496: NEG
43497: PUSH
43498: EMPTY
43499: LIST
43500: LIST
43501: PUSH
43502: LD_INT 2
43504: PUSH
43505: LD_INT 0
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 2
43514: PUSH
43515: LD_INT 1
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 2
43524: PUSH
43525: LD_INT 2
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: LD_INT 2
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: LD_INT 2
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 2
43565: NEG
43566: PUSH
43567: LD_INT 0
43569: PUSH
43570: EMPTY
43571: LIST
43572: LIST
43573: PUSH
43574: LD_INT 2
43576: NEG
43577: PUSH
43578: LD_INT 1
43580: NEG
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 2
43588: NEG
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: LIST
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43619: LD_ADDR_VAR 0 21
43623: PUSH
43624: LD_INT 0
43626: PUSH
43627: LD_INT 0
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: LD_INT 1
43639: NEG
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 1
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: EMPTY
43652: LIST
43653: LIST
43654: PUSH
43655: LD_INT 1
43657: PUSH
43658: LD_INT 1
43660: PUSH
43661: EMPTY
43662: LIST
43663: LIST
43664: PUSH
43665: LD_INT 0
43667: PUSH
43668: LD_INT 1
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: PUSH
43675: LD_INT 1
43677: NEG
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: EMPTY
43683: LIST
43684: LIST
43685: PUSH
43686: LD_INT 1
43688: NEG
43689: PUSH
43690: LD_INT 1
43692: NEG
43693: PUSH
43694: EMPTY
43695: LIST
43696: LIST
43697: PUSH
43698: LD_INT 1
43700: NEG
43701: PUSH
43702: LD_INT 2
43704: NEG
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 0
43712: PUSH
43713: LD_INT 2
43715: NEG
43716: PUSH
43717: EMPTY
43718: LIST
43719: LIST
43720: PUSH
43721: LD_INT 1
43723: PUSH
43724: LD_INT 1
43726: NEG
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: PUSH
43732: LD_INT 2
43734: PUSH
43735: LD_INT 0
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: PUSH
43742: LD_INT 2
43744: PUSH
43745: LD_INT 1
43747: PUSH
43748: EMPTY
43749: LIST
43750: LIST
43751: PUSH
43752: LD_INT 2
43754: PUSH
43755: LD_INT 2
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 1
43764: PUSH
43765: LD_INT 2
43767: PUSH
43768: EMPTY
43769: LIST
43770: LIST
43771: PUSH
43772: LD_INT 0
43774: PUSH
43775: LD_INT 2
43777: PUSH
43778: EMPTY
43779: LIST
43780: LIST
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: LD_INT 1
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 2
43795: NEG
43796: PUSH
43797: LD_INT 0
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 2
43806: NEG
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 2
43818: NEG
43819: PUSH
43820: LD_INT 2
43822: NEG
43823: PUSH
43824: EMPTY
43825: LIST
43826: LIST
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: LIST
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43849: LD_ADDR_VAR 0 22
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: LD_INT 0
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 0
43866: PUSH
43867: LD_INT 1
43869: NEG
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: PUSH
43878: LD_INT 0
43880: PUSH
43881: EMPTY
43882: LIST
43883: LIST
43884: PUSH
43885: LD_INT 1
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: EMPTY
43892: LIST
43893: LIST
43894: PUSH
43895: LD_INT 0
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: PUSH
43905: LD_INT 1
43907: NEG
43908: PUSH
43909: LD_INT 0
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: LD_INT 1
43918: NEG
43919: PUSH
43920: LD_INT 1
43922: NEG
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: LD_INT 2
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 0
43942: PUSH
43943: LD_INT 2
43945: NEG
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 2
43964: PUSH
43965: LD_INT 0
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 2
43974: PUSH
43975: LD_INT 1
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 2
43984: PUSH
43985: LD_INT 2
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: LD_INT 2
43997: PUSH
43998: EMPTY
43999: LIST
44000: LIST
44001: PUSH
44002: LD_INT 0
44004: PUSH
44005: LD_INT 2
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 1
44014: NEG
44015: PUSH
44016: LD_INT 1
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 2
44025: NEG
44026: PUSH
44027: LD_INT 0
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 2
44036: NEG
44037: PUSH
44038: LD_INT 1
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 2
44048: NEG
44049: PUSH
44050: LD_INT 2
44052: NEG
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: LIST
44062: LIST
44063: LIST
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
44079: LD_ADDR_VAR 0 23
44083: PUSH
44084: LD_INT 0
44086: PUSH
44087: LD_INT 0
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 0
44096: PUSH
44097: LD_INT 1
44099: NEG
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 1
44107: PUSH
44108: LD_INT 0
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: LD_INT 1
44120: PUSH
44121: EMPTY
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 0
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: LD_INT 1
44137: NEG
44138: PUSH
44139: LD_INT 0
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: LD_INT 1
44148: NEG
44149: PUSH
44150: LD_INT 1
44152: NEG
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 1
44160: NEG
44161: PUSH
44162: LD_INT 2
44164: NEG
44165: PUSH
44166: EMPTY
44167: LIST
44168: LIST
44169: PUSH
44170: LD_INT 0
44172: PUSH
44173: LD_INT 2
44175: NEG
44176: PUSH
44177: EMPTY
44178: LIST
44179: LIST
44180: PUSH
44181: LD_INT 1
44183: PUSH
44184: LD_INT 1
44186: NEG
44187: PUSH
44188: EMPTY
44189: LIST
44190: LIST
44191: PUSH
44192: LD_INT 2
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: EMPTY
44199: LIST
44200: LIST
44201: PUSH
44202: LD_INT 2
44204: PUSH
44205: LD_INT 1
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 2
44214: PUSH
44215: LD_INT 2
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: LD_INT 2
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: LD_INT 2
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 1
44244: NEG
44245: PUSH
44246: LD_INT 1
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 2
44255: NEG
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: PUSH
44264: LD_INT 2
44266: NEG
44267: PUSH
44268: LD_INT 1
44270: NEG
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 2
44278: NEG
44279: PUSH
44280: LD_INT 2
44282: NEG
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 2
44290: NEG
44291: PUSH
44292: LD_INT 3
44294: NEG
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 1
44302: NEG
44303: PUSH
44304: LD_INT 3
44306: NEG
44307: PUSH
44308: EMPTY
44309: LIST
44310: LIST
44311: PUSH
44312: LD_INT 1
44314: PUSH
44315: LD_INT 2
44317: NEG
44318: PUSH
44319: EMPTY
44320: LIST
44321: LIST
44322: PUSH
44323: LD_INT 2
44325: PUSH
44326: LD_INT 1
44328: NEG
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: EMPTY
44335: LIST
44336: LIST
44337: LIST
44338: LIST
44339: LIST
44340: LIST
44341: LIST
44342: LIST
44343: LIST
44344: LIST
44345: LIST
44346: LIST
44347: LIST
44348: LIST
44349: LIST
44350: LIST
44351: LIST
44352: LIST
44353: LIST
44354: LIST
44355: LIST
44356: LIST
44357: LIST
44358: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
44359: LD_ADDR_VAR 0 24
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: LD_INT 0
44369: PUSH
44370: EMPTY
44371: LIST
44372: LIST
44373: PUSH
44374: LD_INT 0
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: LD_INT 0
44390: PUSH
44391: EMPTY
44392: LIST
44393: LIST
44394: PUSH
44395: LD_INT 1
44397: PUSH
44398: LD_INT 1
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: LD_INT 1
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: LD_INT 0
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: LD_INT 1
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: NEG
44441: PUSH
44442: LD_INT 2
44444: NEG
44445: PUSH
44446: EMPTY
44447: LIST
44448: LIST
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: LD_INT 2
44455: NEG
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 1
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: EMPTY
44469: LIST
44470: LIST
44471: PUSH
44472: LD_INT 2
44474: PUSH
44475: LD_INT 0
44477: PUSH
44478: EMPTY
44479: LIST
44480: LIST
44481: PUSH
44482: LD_INT 2
44484: PUSH
44485: LD_INT 1
44487: PUSH
44488: EMPTY
44489: LIST
44490: LIST
44491: PUSH
44492: LD_INT 2
44494: PUSH
44495: LD_INT 2
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 1
44504: PUSH
44505: LD_INT 2
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: LD_INT 2
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: LD_INT 1
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 2
44535: NEG
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 2
44546: NEG
44547: PUSH
44548: LD_INT 1
44550: NEG
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 2
44558: NEG
44559: PUSH
44560: LD_INT 2
44562: NEG
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: LD_INT 2
44573: NEG
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: PUSH
44579: LD_INT 2
44581: PUSH
44582: LD_INT 1
44584: NEG
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 3
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 3
44602: PUSH
44603: LD_INT 2
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: EMPTY
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
44635: LD_ADDR_VAR 0 25
44639: PUSH
44640: LD_INT 0
44642: PUSH
44643: LD_INT 0
44645: PUSH
44646: EMPTY
44647: LIST
44648: LIST
44649: PUSH
44650: LD_INT 0
44652: PUSH
44653: LD_INT 1
44655: NEG
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 1
44663: PUSH
44664: LD_INT 0
44666: PUSH
44667: EMPTY
44668: LIST
44669: LIST
44670: PUSH
44671: LD_INT 1
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 0
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: NEG
44694: PUSH
44695: LD_INT 0
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 1
44704: NEG
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 1
44716: NEG
44717: PUSH
44718: LD_INT 2
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: LD_INT 2
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: LD_INT 1
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 2
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: EMPTY
44755: LIST
44756: LIST
44757: PUSH
44758: LD_INT 2
44760: PUSH
44761: LD_INT 1
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: LD_INT 2
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: PUSH
44781: LD_INT 2
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 1
44800: NEG
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: EMPTY
44806: LIST
44807: LIST
44808: PUSH
44809: LD_INT 2
44811: NEG
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 2
44822: NEG
44823: PUSH
44824: LD_INT 1
44826: NEG
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 2
44834: NEG
44835: PUSH
44836: LD_INT 2
44838: NEG
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 3
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 3
44856: PUSH
44857: LD_INT 2
44859: PUSH
44860: EMPTY
44861: LIST
44862: LIST
44863: PUSH
44864: LD_INT 2
44866: PUSH
44867: LD_INT 3
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: PUSH
44874: LD_INT 1
44876: PUSH
44877: LD_INT 3
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: EMPTY
44885: LIST
44886: LIST
44887: LIST
44888: LIST
44889: LIST
44890: LIST
44891: LIST
44892: LIST
44893: LIST
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: LIST
44899: LIST
44900: LIST
44901: LIST
44902: LIST
44903: LIST
44904: LIST
44905: LIST
44906: LIST
44907: LIST
44908: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
44909: LD_ADDR_VAR 0 26
44913: PUSH
44914: LD_INT 0
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: LD_INT 1
44929: NEG
44930: PUSH
44931: EMPTY
44932: LIST
44933: LIST
44934: PUSH
44935: LD_INT 1
44937: PUSH
44938: LD_INT 0
44940: PUSH
44941: EMPTY
44942: LIST
44943: LIST
44944: PUSH
44945: LD_INT 1
44947: PUSH
44948: LD_INT 1
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 0
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 1
44967: NEG
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: LD_INT 2
44994: NEG
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: LD_INT 2
45005: NEG
45006: PUSH
45007: EMPTY
45008: LIST
45009: LIST
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: LD_INT 1
45016: NEG
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 2
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 2
45034: PUSH
45035: LD_INT 1
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 2
45044: PUSH
45045: LD_INT 2
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: LD_INT 2
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: LD_INT 2
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 1
45074: NEG
45075: PUSH
45076: LD_INT 1
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: LD_INT 2
45085: NEG
45086: PUSH
45087: LD_INT 0
45089: PUSH
45090: EMPTY
45091: LIST
45092: LIST
45093: PUSH
45094: LD_INT 2
45096: NEG
45097: PUSH
45098: LD_INT 1
45100: NEG
45101: PUSH
45102: EMPTY
45103: LIST
45104: LIST
45105: PUSH
45106: LD_INT 2
45108: NEG
45109: PUSH
45110: LD_INT 2
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 2
45120: PUSH
45121: LD_INT 3
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: LD_INT 3
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: NEG
45141: PUSH
45142: LD_INT 2
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: NEG
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: EMPTY
45157: LIST
45158: LIST
45159: PUSH
45160: EMPTY
45161: LIST
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: LIST
45175: LIST
45176: LIST
45177: LIST
45178: LIST
45179: LIST
45180: LIST
45181: LIST
45182: LIST
45183: LIST
45184: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45185: LD_ADDR_VAR 0 27
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: LD_INT 0
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 0
45202: PUSH
45203: LD_INT 1
45205: NEG
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 1
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 0
45233: PUSH
45234: LD_INT 1
45236: PUSH
45237: EMPTY
45238: LIST
45239: LIST
45240: PUSH
45241: LD_INT 1
45243: NEG
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 1
45254: NEG
45255: PUSH
45256: LD_INT 1
45258: NEG
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 1
45266: NEG
45267: PUSH
45268: LD_INT 2
45270: NEG
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 0
45278: PUSH
45279: LD_INT 2
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: PUSH
45290: LD_INT 1
45292: NEG
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 2
45300: PUSH
45301: LD_INT 0
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 2
45310: PUSH
45311: LD_INT 1
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 2
45320: PUSH
45321: LD_INT 2
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 1
45330: PUSH
45331: LD_INT 2
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 0
45340: PUSH
45341: LD_INT 2
45343: PUSH
45344: EMPTY
45345: LIST
45346: LIST
45347: PUSH
45348: LD_INT 1
45350: NEG
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 2
45361: NEG
45362: PUSH
45363: LD_INT 0
45365: PUSH
45366: EMPTY
45367: LIST
45368: LIST
45369: PUSH
45370: LD_INT 2
45372: NEG
45373: PUSH
45374: LD_INT 1
45376: NEG
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 2
45384: NEG
45385: PUSH
45386: LD_INT 2
45388: NEG
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 1
45396: NEG
45397: PUSH
45398: LD_INT 2
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 2
45407: NEG
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 3
45418: NEG
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: EMPTY
45425: LIST
45426: LIST
45427: PUSH
45428: LD_INT 3
45430: NEG
45431: PUSH
45432: LD_INT 2
45434: NEG
45435: PUSH
45436: EMPTY
45437: LIST
45438: LIST
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
45465: LD_ADDR_VAR 0 28
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: LD_INT 0
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 0
45482: PUSH
45483: LD_INT 1
45485: NEG
45486: PUSH
45487: EMPTY
45488: LIST
45489: LIST
45490: PUSH
45491: LD_INT 1
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: LD_INT 1
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: LD_INT 1
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: NEG
45535: PUSH
45536: LD_INT 1
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 1
45546: NEG
45547: PUSH
45548: LD_INT 2
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: LD_INT 2
45561: NEG
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 1
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: EMPTY
45575: LIST
45576: LIST
45577: PUSH
45578: LD_INT 2
45580: PUSH
45581: LD_INT 0
45583: PUSH
45584: EMPTY
45585: LIST
45586: LIST
45587: PUSH
45588: LD_INT 2
45590: PUSH
45591: LD_INT 1
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 2
45600: PUSH
45601: LD_INT 2
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 1
45610: PUSH
45611: LD_INT 2
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: LD_INT 2
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: NEG
45631: PUSH
45632: LD_INT 1
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 2
45641: NEG
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: NEG
45653: PUSH
45654: LD_INT 1
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 2
45664: NEG
45665: PUSH
45666: LD_INT 2
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 2
45676: NEG
45677: PUSH
45678: LD_INT 3
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 1
45688: NEG
45689: PUSH
45690: LD_INT 3
45692: NEG
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 3
45700: NEG
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: PUSH
45710: LD_INT 3
45712: NEG
45713: PUSH
45714: LD_INT 2
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: LIST
45726: LIST
45727: LIST
45728: LIST
45729: LIST
45730: LIST
45731: LIST
45732: LIST
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
45747: LD_ADDR_VAR 0 29
45751: PUSH
45752: LD_INT 0
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: LD_INT 0
45764: PUSH
45765: LD_INT 1
45767: NEG
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 1
45775: PUSH
45776: LD_INT 0
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 1
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 0
45795: PUSH
45796: LD_INT 1
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 1
45805: NEG
45806: PUSH
45807: LD_INT 0
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 1
45816: NEG
45817: PUSH
45818: LD_INT 1
45820: NEG
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 1
45828: NEG
45829: PUSH
45830: LD_INT 2
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 0
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: LD_INT 1
45854: NEG
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: PUSH
45863: LD_INT 0
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: LD_INT 2
45872: PUSH
45873: LD_INT 1
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: LD_INT 2
45885: PUSH
45886: EMPTY
45887: LIST
45888: LIST
45889: PUSH
45890: LD_INT 0
45892: PUSH
45893: LD_INT 2
45895: PUSH
45896: EMPTY
45897: LIST
45898: LIST
45899: PUSH
45900: LD_INT 1
45902: NEG
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 2
45913: NEG
45914: PUSH
45915: LD_INT 1
45917: NEG
45918: PUSH
45919: EMPTY
45920: LIST
45921: LIST
45922: PUSH
45923: LD_INT 2
45925: NEG
45926: PUSH
45927: LD_INT 2
45929: NEG
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 2
45937: NEG
45938: PUSH
45939: LD_INT 3
45941: NEG
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 2
45949: PUSH
45950: LD_INT 1
45952: NEG
45953: PUSH
45954: EMPTY
45955: LIST
45956: LIST
45957: PUSH
45958: LD_INT 3
45960: PUSH
45961: LD_INT 1
45963: PUSH
45964: EMPTY
45965: LIST
45966: LIST
45967: PUSH
45968: LD_INT 1
45970: PUSH
45971: LD_INT 3
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 1
45980: NEG
45981: PUSH
45982: LD_INT 2
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 3
45991: NEG
45992: PUSH
45993: LD_INT 2
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: LIST
46005: LIST
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46026: LD_ADDR_VAR 0 30
46030: PUSH
46031: LD_INT 0
46033: PUSH
46034: LD_INT 0
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 0
46043: PUSH
46044: LD_INT 1
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: LD_INT 1
46054: PUSH
46055: LD_INT 0
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 1
46064: PUSH
46065: LD_INT 1
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 0
46074: PUSH
46075: LD_INT 1
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: NEG
46085: PUSH
46086: LD_INT 0
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 1
46095: NEG
46096: PUSH
46097: LD_INT 1
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: NEG
46108: PUSH
46109: LD_INT 2
46111: NEG
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 0
46119: PUSH
46120: LD_INT 2
46122: NEG
46123: PUSH
46124: EMPTY
46125: LIST
46126: LIST
46127: PUSH
46128: LD_INT 1
46130: PUSH
46131: LD_INT 1
46133: NEG
46134: PUSH
46135: EMPTY
46136: LIST
46137: LIST
46138: PUSH
46139: LD_INT 2
46141: PUSH
46142: LD_INT 0
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: PUSH
46149: LD_INT 2
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 2
46161: PUSH
46162: LD_INT 2
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 1
46171: PUSH
46172: LD_INT 2
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: NEG
46182: PUSH
46183: LD_INT 1
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: PUSH
46190: LD_INT 2
46192: NEG
46193: PUSH
46194: LD_INT 0
46196: PUSH
46197: EMPTY
46198: LIST
46199: LIST
46200: PUSH
46201: LD_INT 2
46203: NEG
46204: PUSH
46205: LD_INT 1
46207: NEG
46208: PUSH
46209: EMPTY
46210: LIST
46211: LIST
46212: PUSH
46213: LD_INT 1
46215: NEG
46216: PUSH
46217: LD_INT 3
46219: NEG
46220: PUSH
46221: EMPTY
46222: LIST
46223: LIST
46224: PUSH
46225: LD_INT 1
46227: PUSH
46228: LD_INT 2
46230: NEG
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 3
46238: PUSH
46239: LD_INT 2
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: LD_INT 2
46248: PUSH
46249: LD_INT 3
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 2
46258: NEG
46259: PUSH
46260: LD_INT 1
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 3
46269: NEG
46270: PUSH
46271: LD_INT 1
46273: NEG
46274: PUSH
46275: EMPTY
46276: LIST
46277: LIST
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: LIST
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: LIST
46303: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46304: LD_ADDR_VAR 0 31
46308: PUSH
46309: LD_INT 0
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 0
46321: PUSH
46322: LD_INT 1
46324: NEG
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 1
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: LD_INT 1
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 0
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 1
46362: NEG
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 1
46373: NEG
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: LD_INT 2
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 1
46397: PUSH
46398: LD_INT 1
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 2
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 2
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: LD_INT 2
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: LD_INT 2
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 0
46448: PUSH
46449: LD_INT 2
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: NEG
46459: PUSH
46460: LD_INT 1
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 2
46469: NEG
46470: PUSH
46471: LD_INT 1
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 2
46481: NEG
46482: PUSH
46483: LD_INT 2
46485: NEG
46486: PUSH
46487: EMPTY
46488: LIST
46489: LIST
46490: PUSH
46491: LD_INT 2
46493: NEG
46494: PUSH
46495: LD_INT 3
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 2
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 3
46516: PUSH
46517: LD_INT 1
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: LD_INT 3
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: LD_INT 2
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 3
46547: NEG
46548: PUSH
46549: LD_INT 2
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: LIST
46566: LIST
46567: LIST
46568: LIST
46569: LIST
46570: LIST
46571: LIST
46572: LIST
46573: LIST
46574: LIST
46575: LIST
46576: LIST
46577: LIST
46578: LIST
46579: LIST
46580: LIST
46581: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
46582: LD_ADDR_VAR 0 32
46586: PUSH
46587: LD_INT 0
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: EMPTY
46594: LIST
46595: LIST
46596: PUSH
46597: LD_INT 0
46599: PUSH
46600: LD_INT 1
46602: NEG
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: PUSH
46611: LD_INT 0
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: PUSH
46621: LD_INT 1
46623: PUSH
46624: EMPTY
46625: LIST
46626: LIST
46627: PUSH
46628: LD_INT 0
46630: PUSH
46631: LD_INT 1
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 1
46640: NEG
46641: PUSH
46642: LD_INT 0
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: LD_INT 1
46655: NEG
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: LD_INT 2
46667: NEG
46668: PUSH
46669: EMPTY
46670: LIST
46671: LIST
46672: PUSH
46673: LD_INT 0
46675: PUSH
46676: LD_INT 2
46678: NEG
46679: PUSH
46680: EMPTY
46681: LIST
46682: LIST
46683: PUSH
46684: LD_INT 1
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 2
46697: PUSH
46698: LD_INT 1
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 2
46707: PUSH
46708: LD_INT 2
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 1
46717: PUSH
46718: LD_INT 2
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 0
46727: PUSH
46728: LD_INT 2
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: NEG
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 2
46748: NEG
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 2
46759: NEG
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: LD_INT 3
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 1
46783: PUSH
46784: LD_INT 2
46786: NEG
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 3
46794: PUSH
46795: LD_INT 2
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 2
46804: PUSH
46805: LD_INT 3
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 2
46814: NEG
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 3
46825: NEG
46826: PUSH
46827: LD_INT 1
46829: NEG
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: EMPTY
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
46860: LD_ADDR_VAR 0 33
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: NEG
46930: PUSH
46931: LD_INT 1
46933: NEG
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 1
46953: PUSH
46954: LD_INT 1
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 2
46964: PUSH
46965: LD_INT 0
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 2
46974: PUSH
46975: LD_INT 1
46977: PUSH
46978: EMPTY
46979: LIST
46980: LIST
46981: PUSH
46982: LD_INT 1
46984: PUSH
46985: LD_INT 2
46987: PUSH
46988: EMPTY
46989: LIST
46990: LIST
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: LD_INT 2
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 1
47004: NEG
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 2
47015: NEG
47016: PUSH
47017: LD_INT 0
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 2
47026: NEG
47027: PUSH
47028: LD_INT 1
47030: NEG
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 2
47038: NEG
47039: PUSH
47040: LD_INT 2
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 2
47050: NEG
47051: PUSH
47052: LD_INT 3
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: LD_INT 1
47065: NEG
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 3
47073: PUSH
47074: LD_INT 1
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 1
47083: PUSH
47084: LD_INT 3
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 1
47093: NEG
47094: PUSH
47095: LD_INT 2
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 3
47104: NEG
47105: PUSH
47106: LD_INT 2
47108: NEG
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: LIST
47134: LIST
47135: LIST
47136: LIST
47137: LIST
47138: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47139: LD_ADDR_VAR 0 34
47143: PUSH
47144: LD_INT 0
47146: PUSH
47147: LD_INT 0
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: LD_INT 1
47159: NEG
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: LD_INT 0
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 1
47177: PUSH
47178: LD_INT 1
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: LD_INT 1
47190: PUSH
47191: EMPTY
47192: LIST
47193: LIST
47194: PUSH
47195: LD_INT 1
47197: NEG
47198: PUSH
47199: LD_INT 0
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: LD_INT 1
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: LD_INT 2
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 0
47232: PUSH
47233: LD_INT 2
47235: NEG
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PUSH
47241: LD_INT 1
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: PUSH
47255: LD_INT 1
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: PUSH
47262: LD_INT 2
47264: PUSH
47265: LD_INT 2
47267: PUSH
47268: EMPTY
47269: LIST
47270: LIST
47271: PUSH
47272: LD_INT 1
47274: PUSH
47275: LD_INT 2
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: PUSH
47282: LD_INT 1
47284: NEG
47285: PUSH
47286: LD_INT 1
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 2
47295: NEG
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 2
47306: NEG
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: EMPTY
47313: LIST
47314: LIST
47315: PUSH
47316: LD_INT 2
47318: NEG
47319: PUSH
47320: LD_INT 2
47322: NEG
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: LD_INT 3
47334: NEG
47335: PUSH
47336: EMPTY
47337: LIST
47338: LIST
47339: PUSH
47340: LD_INT 1
47342: PUSH
47343: LD_INT 2
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 3
47353: PUSH
47354: LD_INT 2
47356: PUSH
47357: EMPTY
47358: LIST
47359: LIST
47360: PUSH
47361: LD_INT 2
47363: PUSH
47364: LD_INT 3
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: PUSH
47371: LD_INT 2
47373: NEG
47374: PUSH
47375: LD_INT 1
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: LD_INT 3
47384: NEG
47385: PUSH
47386: LD_INT 1
47388: NEG
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: LIST
47398: LIST
47399: LIST
47400: LIST
47401: LIST
47402: LIST
47403: LIST
47404: LIST
47405: LIST
47406: LIST
47407: LIST
47408: LIST
47409: LIST
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47419: LD_ADDR_VAR 0 35
47423: PUSH
47424: LD_INT 0
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 0
47436: PUSH
47437: LD_INT 1
47439: NEG
47440: PUSH
47441: EMPTY
47442: LIST
47443: LIST
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: LD_INT 0
47450: PUSH
47451: EMPTY
47452: LIST
47453: LIST
47454: PUSH
47455: LD_INT 1
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 0
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 1
47477: NEG
47478: PUSH
47479: LD_INT 0
47481: PUSH
47482: EMPTY
47483: LIST
47484: LIST
47485: PUSH
47486: LD_INT 1
47488: NEG
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: PUSH
47498: LD_INT 2
47500: PUSH
47501: LD_INT 1
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 2
47510: NEG
47511: PUSH
47512: LD_INT 1
47514: NEG
47515: PUSH
47516: EMPTY
47517: LIST
47518: LIST
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47531: LD_ADDR_VAR 0 36
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 0
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: LD_INT 0
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 1
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 0
47579: PUSH
47580: LD_INT 1
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: LD_INT 0
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 1
47600: NEG
47601: PUSH
47602: LD_INT 1
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: NEG
47613: PUSH
47614: LD_INT 2
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: PUSH
47625: LD_INT 2
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47643: LD_ADDR_VAR 0 37
47647: PUSH
47648: LD_INT 0
47650: PUSH
47651: LD_INT 0
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: LD_INT 1
47663: NEG
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 1
47671: PUSH
47672: LD_INT 0
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: LD_INT 0
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: EMPTY
47719: LIST
47720: LIST
47721: PUSH
47722: LD_INT 1
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: EMPTY
47730: LIST
47731: LIST
47732: PUSH
47733: LD_INT 1
47735: NEG
47736: PUSH
47737: LD_INT 1
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
47755: LD_ADDR_VAR 0 38
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 0
47765: PUSH
47766: EMPTY
47767: LIST
47768: LIST
47769: PUSH
47770: LD_INT 0
47772: PUSH
47773: LD_INT 1
47775: NEG
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 1
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 0
47803: PUSH
47804: LD_INT 1
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 1
47813: NEG
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: EMPTY
47819: LIST
47820: LIST
47821: PUSH
47822: LD_INT 1
47824: NEG
47825: PUSH
47826: LD_INT 1
47828: NEG
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 2
47836: PUSH
47837: LD_INT 1
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 2
47846: NEG
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
47867: LD_ADDR_VAR 0 39
47871: PUSH
47872: LD_INT 0
47874: PUSH
47875: LD_INT 0
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: LD_INT 1
47887: NEG
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 1
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: LD_INT 1
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 1
47925: NEG
47926: PUSH
47927: LD_INT 0
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: LD_INT 1
47940: NEG
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 1
47948: NEG
47949: PUSH
47950: LD_INT 2
47952: NEG
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: LD_INT 2
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: EMPTY
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: LIST
47976: LIST
47977: LIST
47978: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
47979: LD_ADDR_VAR 0 40
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 0
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: EMPTY
48002: LIST
48003: LIST
48004: PUSH
48005: LD_INT 1
48007: PUSH
48008: LD_INT 0
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 0
48027: PUSH
48028: LD_INT 1
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: LD_INT 0
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: LD_INT 1
48052: NEG
48053: PUSH
48054: EMPTY
48055: LIST
48056: LIST
48057: PUSH
48058: LD_INT 1
48060: PUSH
48061: LD_INT 1
48063: NEG
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: LD_INT 1
48071: NEG
48072: PUSH
48073: LD_INT 1
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48091: LD_ADDR_VAR 0 41
48095: PUSH
48096: LD_INT 0
48098: PUSH
48099: LD_INT 0
48101: PUSH
48102: EMPTY
48103: LIST
48104: LIST
48105: PUSH
48106: LD_INT 0
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: LD_INT 0
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: LD_INT 1
48129: PUSH
48130: LD_INT 1
48132: PUSH
48133: EMPTY
48134: LIST
48135: LIST
48136: PUSH
48137: LD_INT 0
48139: PUSH
48140: LD_INT 1
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: PUSH
48147: LD_INT 1
48149: NEG
48150: PUSH
48151: LD_INT 0
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: PUSH
48158: LD_INT 1
48160: NEG
48161: PUSH
48162: LD_INT 1
48164: NEG
48165: PUSH
48166: EMPTY
48167: LIST
48168: LIST
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: LD_INT 2
48176: NEG
48177: PUSH
48178: EMPTY
48179: LIST
48180: LIST
48181: PUSH
48182: LD_INT 1
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 2
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 2
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 2
48215: PUSH
48216: LD_INT 2
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 1
48225: PUSH
48226: LD_INT 2
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 1
48235: NEG
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 2
48246: NEG
48247: PUSH
48248: LD_INT 0
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 2
48257: NEG
48258: PUSH
48259: LD_INT 1
48261: NEG
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: PUSH
48267: LD_INT 2
48269: NEG
48270: PUSH
48271: LD_INT 2
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 2
48281: NEG
48282: PUSH
48283: LD_INT 3
48285: NEG
48286: PUSH
48287: EMPTY
48288: LIST
48289: LIST
48290: PUSH
48291: LD_INT 2
48293: PUSH
48294: LD_INT 1
48296: NEG
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 3
48304: PUSH
48305: LD_INT 0
48307: PUSH
48308: EMPTY
48309: LIST
48310: LIST
48311: PUSH
48312: LD_INT 3
48314: PUSH
48315: LD_INT 1
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: LD_INT 3
48324: PUSH
48325: LD_INT 2
48327: PUSH
48328: EMPTY
48329: LIST
48330: LIST
48331: PUSH
48332: LD_INT 3
48334: PUSH
48335: LD_INT 3
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: PUSH
48342: LD_INT 2
48344: PUSH
48345: LD_INT 3
48347: PUSH
48348: EMPTY
48349: LIST
48350: LIST
48351: PUSH
48352: LD_INT 2
48354: NEG
48355: PUSH
48356: LD_INT 1
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 3
48365: NEG
48366: PUSH
48367: LD_INT 0
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 3
48376: NEG
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 3
48388: NEG
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: EMPTY
48395: LIST
48396: LIST
48397: PUSH
48398: LD_INT 3
48400: NEG
48401: PUSH
48402: LD_INT 3
48404: NEG
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48441: LD_ADDR_VAR 0 42
48445: PUSH
48446: LD_INT 0
48448: PUSH
48449: LD_INT 0
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 0
48458: PUSH
48459: LD_INT 1
48461: NEG
48462: PUSH
48463: EMPTY
48464: LIST
48465: LIST
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: EMPTY
48474: LIST
48475: LIST
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: LD_INT 1
48482: PUSH
48483: EMPTY
48484: LIST
48485: LIST
48486: PUSH
48487: LD_INT 0
48489: PUSH
48490: LD_INT 1
48492: PUSH
48493: EMPTY
48494: LIST
48495: LIST
48496: PUSH
48497: LD_INT 1
48499: NEG
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: EMPTY
48505: LIST
48506: LIST
48507: PUSH
48508: LD_INT 1
48510: NEG
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: EMPTY
48517: LIST
48518: LIST
48519: PUSH
48520: LD_INT 1
48522: NEG
48523: PUSH
48524: LD_INT 2
48526: NEG
48527: PUSH
48528: EMPTY
48529: LIST
48530: LIST
48531: PUSH
48532: LD_INT 0
48534: PUSH
48535: LD_INT 2
48537: NEG
48538: PUSH
48539: EMPTY
48540: LIST
48541: LIST
48542: PUSH
48543: LD_INT 1
48545: PUSH
48546: LD_INT 1
48548: NEG
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: PUSH
48554: LD_INT 2
48556: PUSH
48557: LD_INT 1
48559: PUSH
48560: EMPTY
48561: LIST
48562: LIST
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: LD_INT 2
48569: PUSH
48570: EMPTY
48571: LIST
48572: LIST
48573: PUSH
48574: LD_INT 1
48576: PUSH
48577: LD_INT 2
48579: PUSH
48580: EMPTY
48581: LIST
48582: LIST
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: LD_INT 2
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 1
48596: NEG
48597: PUSH
48598: LD_INT 1
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 2
48607: NEG
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 2
48619: NEG
48620: PUSH
48621: LD_INT 2
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 2
48631: NEG
48632: PUSH
48633: LD_INT 3
48635: NEG
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: PUSH
48641: LD_INT 1
48643: NEG
48644: PUSH
48645: LD_INT 3
48647: NEG
48648: PUSH
48649: EMPTY
48650: LIST
48651: LIST
48652: PUSH
48653: LD_INT 0
48655: PUSH
48656: LD_INT 3
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 1
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 3
48677: PUSH
48678: LD_INT 2
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 3
48687: PUSH
48688: LD_INT 3
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 2
48697: PUSH
48698: LD_INT 3
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: LD_INT 3
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: LD_INT 3
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: LD_INT 2
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 3
48738: NEG
48739: PUSH
48740: LD_INT 2
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: LD_INT 3
48750: NEG
48751: PUSH
48752: LD_INT 3
48754: NEG
48755: PUSH
48756: EMPTY
48757: LIST
48758: LIST
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48791: LD_ADDR_VAR 0 43
48795: PUSH
48796: LD_INT 0
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: EMPTY
48814: LIST
48815: LIST
48816: PUSH
48817: LD_INT 1
48819: PUSH
48820: LD_INT 0
48822: PUSH
48823: EMPTY
48824: LIST
48825: LIST
48826: PUSH
48827: LD_INT 1
48829: PUSH
48830: LD_INT 1
48832: PUSH
48833: EMPTY
48834: LIST
48835: LIST
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: LD_INT 1
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: PUSH
48847: LD_INT 1
48849: NEG
48850: PUSH
48851: LD_INT 0
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: LD_INT 1
48860: NEG
48861: PUSH
48862: LD_INT 1
48864: NEG
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 1
48872: NEG
48873: PUSH
48874: LD_INT 2
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: LD_INT 0
48884: PUSH
48885: LD_INT 2
48887: NEG
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 1
48895: PUSH
48896: LD_INT 1
48898: NEG
48899: PUSH
48900: EMPTY
48901: LIST
48902: LIST
48903: PUSH
48904: LD_INT 2
48906: PUSH
48907: LD_INT 0
48909: PUSH
48910: EMPTY
48911: LIST
48912: LIST
48913: PUSH
48914: LD_INT 2
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: LD_INT 2
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: LD_INT 2
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 1
48946: NEG
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 2
48957: NEG
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 2
48968: NEG
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: LD_INT 3
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 0
48992: PUSH
48993: LD_INT 3
48995: NEG
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: LD_INT 1
49003: PUSH
49004: LD_INT 2
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 2
49014: PUSH
49015: LD_INT 1
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: LD_INT 3
49025: PUSH
49026: LD_INT 0
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 3
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: LD_INT 3
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 0
49055: PUSH
49056: LD_INT 3
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 1
49065: NEG
49066: PUSH
49067: LD_INT 2
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 2
49076: NEG
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 3
49087: NEG
49088: PUSH
49089: LD_INT 0
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: LD_INT 3
49098: NEG
49099: PUSH
49100: LD_INT 1
49102: NEG
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: LIST
49112: LIST
49113: LIST
49114: LIST
49115: LIST
49116: LIST
49117: LIST
49118: LIST
49119: LIST
49120: LIST
49121: LIST
49122: LIST
49123: LIST
49124: LIST
49125: LIST
49126: LIST
49127: LIST
49128: LIST
49129: LIST
49130: LIST
49131: LIST
49132: LIST
49133: LIST
49134: LIST
49135: LIST
49136: LIST
49137: LIST
49138: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49139: LD_ADDR_VAR 0 44
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: LD_INT 0
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 0
49156: PUSH
49157: LD_INT 1
49159: NEG
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: PUSH
49178: LD_INT 1
49180: PUSH
49181: EMPTY
49182: LIST
49183: LIST
49184: PUSH
49185: LD_INT 0
49187: PUSH
49188: LD_INT 1
49190: PUSH
49191: EMPTY
49192: LIST
49193: LIST
49194: PUSH
49195: LD_INT 1
49197: NEG
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 1
49208: NEG
49209: PUSH
49210: LD_INT 1
49212: NEG
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 1
49220: NEG
49221: PUSH
49222: LD_INT 2
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: PUSH
49233: LD_INT 1
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 2
49243: PUSH
49244: LD_INT 0
49246: PUSH
49247: EMPTY
49248: LIST
49249: LIST
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: LD_INT 1
49256: PUSH
49257: EMPTY
49258: LIST
49259: LIST
49260: PUSH
49261: LD_INT 2
49263: PUSH
49264: LD_INT 2
49266: PUSH
49267: EMPTY
49268: LIST
49269: LIST
49270: PUSH
49271: LD_INT 1
49273: PUSH
49274: LD_INT 2
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: PUSH
49281: LD_INT 1
49283: NEG
49284: PUSH
49285: LD_INT 1
49287: PUSH
49288: EMPTY
49289: LIST
49290: LIST
49291: PUSH
49292: LD_INT 2
49294: NEG
49295: PUSH
49296: LD_INT 0
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: LD_INT 2
49305: NEG
49306: PUSH
49307: LD_INT 1
49309: NEG
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 2
49317: NEG
49318: PUSH
49319: LD_INT 2
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: LD_INT 2
49329: NEG
49330: PUSH
49331: LD_INT 3
49333: NEG
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 2
49341: PUSH
49342: LD_INT 1
49344: NEG
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 3
49352: PUSH
49353: LD_INT 0
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 3
49362: PUSH
49363: LD_INT 1
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 3
49372: PUSH
49373: LD_INT 2
49375: PUSH
49376: EMPTY
49377: LIST
49378: LIST
49379: PUSH
49380: LD_INT 3
49382: PUSH
49383: LD_INT 3
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 2
49392: PUSH
49393: LD_INT 3
49395: PUSH
49396: EMPTY
49397: LIST
49398: LIST
49399: PUSH
49400: LD_INT 2
49402: NEG
49403: PUSH
49404: LD_INT 1
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: PUSH
49411: LD_INT 3
49413: NEG
49414: PUSH
49415: LD_INT 0
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 3
49424: NEG
49425: PUSH
49426: LD_INT 1
49428: NEG
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 3
49436: NEG
49437: PUSH
49438: LD_INT 2
49440: NEG
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: PUSH
49446: LD_INT 3
49448: NEG
49449: PUSH
49450: LD_INT 3
49452: NEG
49453: PUSH
49454: EMPTY
49455: LIST
49456: LIST
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: LIST
49472: LIST
49473: LIST
49474: LIST
49475: LIST
49476: LIST
49477: LIST
49478: LIST
49479: LIST
49480: LIST
49481: LIST
49482: LIST
49483: LIST
49484: LIST
49485: LIST
49486: LIST
49487: LIST
49488: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49489: LD_ADDR_VAR 0 45
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: LD_INT 0
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 0
49506: PUSH
49507: LD_INT 1
49509: NEG
49510: PUSH
49511: EMPTY
49512: LIST
49513: LIST
49514: PUSH
49515: LD_INT 1
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: EMPTY
49522: LIST
49523: LIST
49524: PUSH
49525: LD_INT 1
49527: PUSH
49528: LD_INT 1
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 0
49537: PUSH
49538: LD_INT 1
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: LD_INT 0
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 1
49558: NEG
49559: PUSH
49560: LD_INT 1
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: NEG
49571: PUSH
49572: LD_INT 2
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 0
49582: PUSH
49583: LD_INT 2
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: LD_INT 1
49593: PUSH
49594: LD_INT 1
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 2
49604: PUSH
49605: LD_INT 1
49607: PUSH
49608: EMPTY
49609: LIST
49610: LIST
49611: PUSH
49612: LD_INT 2
49614: PUSH
49615: LD_INT 2
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 1
49624: PUSH
49625: LD_INT 2
49627: PUSH
49628: EMPTY
49629: LIST
49630: LIST
49631: PUSH
49632: LD_INT 0
49634: PUSH
49635: LD_INT 2
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 1
49644: NEG
49645: PUSH
49646: LD_INT 1
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 2
49655: NEG
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: LD_INT 2
49667: NEG
49668: PUSH
49669: LD_INT 2
49671: NEG
49672: PUSH
49673: EMPTY
49674: LIST
49675: LIST
49676: PUSH
49677: LD_INT 2
49679: NEG
49680: PUSH
49681: LD_INT 3
49683: NEG
49684: PUSH
49685: EMPTY
49686: LIST
49687: LIST
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: LD_INT 3
49695: NEG
49696: PUSH
49697: EMPTY
49698: LIST
49699: LIST
49700: PUSH
49701: LD_INT 0
49703: PUSH
49704: LD_INT 3
49706: NEG
49707: PUSH
49708: EMPTY
49709: LIST
49710: LIST
49711: PUSH
49712: LD_INT 1
49714: PUSH
49715: LD_INT 2
49717: NEG
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 3
49725: PUSH
49726: LD_INT 2
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 3
49735: PUSH
49736: LD_INT 3
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 2
49745: PUSH
49746: LD_INT 3
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: LD_INT 3
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 0
49765: PUSH
49766: LD_INT 3
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 1
49775: NEG
49776: PUSH
49777: LD_INT 2
49779: PUSH
49780: EMPTY
49781: LIST
49782: LIST
49783: PUSH
49784: LD_INT 3
49786: NEG
49787: PUSH
49788: LD_INT 2
49790: NEG
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 3
49798: NEG
49799: PUSH
49800: LD_INT 3
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: LIST
49834: LIST
49835: LIST
49836: LIST
49837: LIST
49838: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49839: LD_ADDR_VAR 0 46
49843: PUSH
49844: LD_INT 0
49846: PUSH
49847: LD_INT 0
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: LD_INT 0
49856: PUSH
49857: LD_INT 1
49859: NEG
49860: PUSH
49861: EMPTY
49862: LIST
49863: LIST
49864: PUSH
49865: LD_INT 1
49867: PUSH
49868: LD_INT 0
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: LD_INT 1
49880: PUSH
49881: EMPTY
49882: LIST
49883: LIST
49884: PUSH
49885: LD_INT 0
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 1
49920: NEG
49921: PUSH
49922: LD_INT 2
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 0
49932: PUSH
49933: LD_INT 2
49935: NEG
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 1
49943: PUSH
49944: LD_INT 1
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 2
49954: PUSH
49955: LD_INT 0
49957: PUSH
49958: EMPTY
49959: LIST
49960: LIST
49961: PUSH
49962: LD_INT 2
49964: PUSH
49965: LD_INT 1
49967: PUSH
49968: EMPTY
49969: LIST
49970: LIST
49971: PUSH
49972: LD_INT 1
49974: PUSH
49975: LD_INT 2
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: EMPTY
49989: LIST
49990: LIST
49991: PUSH
49992: LD_INT 1
49994: NEG
49995: PUSH
49996: LD_INT 1
49998: PUSH
49999: EMPTY
50000: LIST
50001: LIST
50002: PUSH
50003: LD_INT 2
50005: NEG
50006: PUSH
50007: LD_INT 0
50009: PUSH
50010: EMPTY
50011: LIST
50012: LIST
50013: PUSH
50014: LD_INT 2
50016: NEG
50017: PUSH
50018: LD_INT 1
50020: NEG
50021: PUSH
50022: EMPTY
50023: LIST
50024: LIST
50025: PUSH
50026: LD_INT 1
50028: NEG
50029: PUSH
50030: LD_INT 3
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 0
50040: PUSH
50041: LD_INT 3
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 1
50051: PUSH
50052: LD_INT 2
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 3
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 3
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: PUSH
50094: LD_INT 3
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 0
50103: PUSH
50104: LD_INT 3
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 1
50113: NEG
50114: PUSH
50115: LD_INT 2
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 2
50124: NEG
50125: PUSH
50126: LD_INT 1
50128: PUSH
50129: EMPTY
50130: LIST
50131: LIST
50132: PUSH
50133: LD_INT 3
50135: NEG
50136: PUSH
50137: LD_INT 0
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 3
50146: NEG
50147: PUSH
50148: LD_INT 1
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: LIST
50185: LIST
50186: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50187: LD_ADDR_VAR 0 47
50191: PUSH
50192: LD_INT 0
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 0
50204: PUSH
50205: LD_INT 1
50207: NEG
50208: PUSH
50209: EMPTY
50210: LIST
50211: LIST
50212: PUSH
50213: LD_INT 1
50215: PUSH
50216: LD_INT 0
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 1
50225: PUSH
50226: LD_INT 1
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: LD_INT 1
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 1
50245: NEG
50246: PUSH
50247: LD_INT 0
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: NEG
50257: PUSH
50258: LD_INT 1
50260: NEG
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 1
50268: NEG
50269: PUSH
50270: LD_INT 2
50272: NEG
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 0
50280: PUSH
50281: LD_INT 2
50283: NEG
50284: PUSH
50285: EMPTY
50286: LIST
50287: LIST
50288: PUSH
50289: LD_INT 1
50291: PUSH
50292: LD_INT 1
50294: NEG
50295: PUSH
50296: EMPTY
50297: LIST
50298: LIST
50299: PUSH
50300: LD_INT 2
50302: NEG
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 2
50314: NEG
50315: PUSH
50316: LD_INT 2
50318: NEG
50319: PUSH
50320: EMPTY
50321: LIST
50322: LIST
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: LIST
50328: LIST
50329: LIST
50330: LIST
50331: LIST
50332: LIST
50333: LIST
50334: LIST
50335: LIST
50336: LIST
50337: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50338: LD_ADDR_VAR 0 48
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 0
50355: PUSH
50356: LD_INT 1
50358: NEG
50359: PUSH
50360: EMPTY
50361: LIST
50362: LIST
50363: PUSH
50364: LD_INT 1
50366: PUSH
50367: LD_INT 0
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 1
50376: PUSH
50377: LD_INT 1
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 0
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: LD_INT 1
50396: NEG
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: EMPTY
50402: LIST
50403: LIST
50404: PUSH
50405: LD_INT 1
50407: NEG
50408: PUSH
50409: LD_INT 1
50411: NEG
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: LD_INT 2
50423: NEG
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 0
50431: PUSH
50432: LD_INT 2
50434: NEG
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 1
50442: PUSH
50443: LD_INT 1
50445: NEG
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 2
50453: PUSH
50454: LD_INT 0
50456: PUSH
50457: EMPTY
50458: LIST
50459: LIST
50460: PUSH
50461: LD_INT 2
50463: PUSH
50464: LD_INT 1
50466: PUSH
50467: EMPTY
50468: LIST
50469: LIST
50470: PUSH
50471: EMPTY
50472: LIST
50473: LIST
50474: LIST
50475: LIST
50476: LIST
50477: LIST
50478: LIST
50479: LIST
50480: LIST
50481: LIST
50482: LIST
50483: LIST
50484: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50485: LD_ADDR_VAR 0 49
50489: PUSH
50490: LD_INT 0
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 0
50502: PUSH
50503: LD_INT 1
50505: NEG
50506: PUSH
50507: EMPTY
50508: LIST
50509: LIST
50510: PUSH
50511: LD_INT 1
50513: PUSH
50514: LD_INT 0
50516: PUSH
50517: EMPTY
50518: LIST
50519: LIST
50520: PUSH
50521: LD_INT 1
50523: PUSH
50524: LD_INT 1
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 0
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 1
50543: NEG
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 1
50554: NEG
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: LD_INT 1
50566: PUSH
50567: LD_INT 1
50569: NEG
50570: PUSH
50571: EMPTY
50572: LIST
50573: LIST
50574: PUSH
50575: LD_INT 2
50577: PUSH
50578: LD_INT 0
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 2
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 2
50597: PUSH
50598: LD_INT 2
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 1
50607: PUSH
50608: LD_INT 2
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: LIST
50619: LIST
50620: LIST
50621: LIST
50622: LIST
50623: LIST
50624: LIST
50625: LIST
50626: LIST
50627: LIST
50628: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50629: LD_ADDR_VAR 0 50
50633: PUSH
50634: LD_INT 0
50636: PUSH
50637: LD_INT 0
50639: PUSH
50640: EMPTY
50641: LIST
50642: LIST
50643: PUSH
50644: LD_INT 0
50646: PUSH
50647: LD_INT 1
50649: NEG
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 1
50657: PUSH
50658: LD_INT 0
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: PUSH
50668: LD_INT 1
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 0
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: EMPTY
50693: LIST
50694: LIST
50695: PUSH
50696: LD_INT 1
50698: NEG
50699: PUSH
50700: LD_INT 1
50702: NEG
50703: PUSH
50704: EMPTY
50705: LIST
50706: LIST
50707: PUSH
50708: LD_INT 2
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 2
50720: PUSH
50721: LD_INT 2
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: PUSH
50731: LD_INT 2
50733: PUSH
50734: EMPTY
50735: LIST
50736: LIST
50737: PUSH
50738: LD_INT 0
50740: PUSH
50741: LD_INT 2
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 1
50750: NEG
50751: PUSH
50752: LD_INT 1
50754: PUSH
50755: EMPTY
50756: LIST
50757: LIST
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50773: LD_ADDR_VAR 0 51
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: LD_INT 0
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: PUSH
50788: LD_INT 0
50790: PUSH
50791: LD_INT 1
50793: NEG
50794: PUSH
50795: EMPTY
50796: LIST
50797: LIST
50798: PUSH
50799: LD_INT 1
50801: PUSH
50802: LD_INT 0
50804: PUSH
50805: EMPTY
50806: LIST
50807: LIST
50808: PUSH
50809: LD_INT 1
50811: PUSH
50812: LD_INT 1
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 0
50821: PUSH
50822: LD_INT 1
50824: PUSH
50825: EMPTY
50826: LIST
50827: LIST
50828: PUSH
50829: LD_INT 1
50831: NEG
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: PUSH
50840: LD_INT 1
50842: NEG
50843: PUSH
50844: LD_INT 1
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: PUSH
50855: LD_INT 2
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 0
50864: PUSH
50865: LD_INT 2
50867: PUSH
50868: EMPTY
50869: LIST
50870: LIST
50871: PUSH
50872: LD_INT 1
50874: NEG
50875: PUSH
50876: LD_INT 1
50878: PUSH
50879: EMPTY
50880: LIST
50881: LIST
50882: PUSH
50883: LD_INT 2
50885: NEG
50886: PUSH
50887: LD_INT 0
50889: PUSH
50890: EMPTY
50891: LIST
50892: LIST
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50920: LD_ADDR_VAR 0 52
50924: PUSH
50925: LD_INT 0
50927: PUSH
50928: LD_INT 0
50930: PUSH
50931: EMPTY
50932: LIST
50933: LIST
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: LD_INT 1
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: LD_INT 0
50951: PUSH
50952: EMPTY
50953: LIST
50954: LIST
50955: PUSH
50956: LD_INT 1
50958: PUSH
50959: LD_INT 1
50961: PUSH
50962: EMPTY
50963: LIST
50964: LIST
50965: PUSH
50966: LD_INT 0
50968: PUSH
50969: LD_INT 1
50971: PUSH
50972: EMPTY
50973: LIST
50974: LIST
50975: PUSH
50976: LD_INT 1
50978: NEG
50979: PUSH
50980: LD_INT 0
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 1
50989: NEG
50990: PUSH
50991: LD_INT 1
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 1
51001: NEG
51002: PUSH
51003: LD_INT 2
51005: NEG
51006: PUSH
51007: EMPTY
51008: LIST
51009: LIST
51010: PUSH
51011: LD_INT 1
51013: NEG
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 2
51024: NEG
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: EMPTY
51030: LIST
51031: LIST
51032: PUSH
51033: LD_INT 2
51035: NEG
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 2
51047: NEG
51048: PUSH
51049: LD_INT 2
51051: NEG
51052: PUSH
51053: EMPTY
51054: LIST
51055: LIST
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51071: LD_ADDR_VAR 0 53
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: LD_INT 0
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 0
51088: PUSH
51089: LD_INT 1
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: LD_INT 0
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 1
51109: PUSH
51110: LD_INT 1
51112: PUSH
51113: EMPTY
51114: LIST
51115: LIST
51116: PUSH
51117: LD_INT 0
51119: PUSH
51120: LD_INT 1
51122: PUSH
51123: EMPTY
51124: LIST
51125: LIST
51126: PUSH
51127: LD_INT 1
51129: NEG
51130: PUSH
51131: LD_INT 0
51133: PUSH
51134: EMPTY
51135: LIST
51136: LIST
51137: PUSH
51138: LD_INT 1
51140: NEG
51141: PUSH
51142: LD_INT 1
51144: NEG
51145: PUSH
51146: EMPTY
51147: LIST
51148: LIST
51149: PUSH
51150: LD_INT 1
51152: NEG
51153: PUSH
51154: LD_INT 2
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: LD_INT 2
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: PUSH
51176: LD_INT 1
51178: NEG
51179: PUSH
51180: EMPTY
51181: LIST
51182: LIST
51183: PUSH
51184: LD_INT 2
51186: PUSH
51187: LD_INT 0
51189: PUSH
51190: EMPTY
51191: LIST
51192: LIST
51193: PUSH
51194: LD_INT 2
51196: PUSH
51197: LD_INT 1
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: PUSH
51204: LD_INT 2
51206: PUSH
51207: LD_INT 2
51209: PUSH
51210: EMPTY
51211: LIST
51212: LIST
51213: PUSH
51214: LD_INT 1
51216: PUSH
51217: LD_INT 2
51219: PUSH
51220: EMPTY
51221: LIST
51222: LIST
51223: PUSH
51224: LD_INT 0
51226: PUSH
51227: LD_INT 2
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: LD_INT 1
51240: PUSH
51241: EMPTY
51242: LIST
51243: LIST
51244: PUSH
51245: LD_INT 2
51247: NEG
51248: PUSH
51249: LD_INT 0
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 2
51258: NEG
51259: PUSH
51260: LD_INT 1
51262: NEG
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: LD_INT 2
51270: NEG
51271: PUSH
51272: LD_INT 2
51274: NEG
51275: PUSH
51276: EMPTY
51277: LIST
51278: LIST
51279: PUSH
51280: EMPTY
51281: LIST
51282: LIST
51283: LIST
51284: LIST
51285: LIST
51286: LIST
51287: LIST
51288: LIST
51289: LIST
51290: LIST
51291: LIST
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51301: LD_ADDR_VAR 0 54
51305: PUSH
51306: LD_INT 0
51308: PUSH
51309: LD_INT 0
51311: PUSH
51312: EMPTY
51313: LIST
51314: LIST
51315: PUSH
51316: LD_INT 0
51318: PUSH
51319: LD_INT 1
51321: NEG
51322: PUSH
51323: EMPTY
51324: LIST
51325: LIST
51326: PUSH
51327: LD_INT 1
51329: PUSH
51330: LD_INT 0
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 1
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: LD_INT 1
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: PUSH
51357: LD_INT 1
51359: NEG
51360: PUSH
51361: LD_INT 0
51363: PUSH
51364: EMPTY
51365: LIST
51366: LIST
51367: PUSH
51368: LD_INT 1
51370: NEG
51371: PUSH
51372: LD_INT 1
51374: NEG
51375: PUSH
51376: EMPTY
51377: LIST
51378: LIST
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: LD_INT 2
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: LD_INT 2
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: LD_INT 1
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 2
51416: PUSH
51417: LD_INT 0
51419: PUSH
51420: EMPTY
51421: LIST
51422: LIST
51423: PUSH
51424: LD_INT 2
51426: PUSH
51427: LD_INT 1
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 2
51436: PUSH
51437: LD_INT 2
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 1
51446: PUSH
51447: LD_INT 2
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 0
51456: PUSH
51457: LD_INT 2
51459: PUSH
51460: EMPTY
51461: LIST
51462: LIST
51463: PUSH
51464: LD_INT 1
51466: NEG
51467: PUSH
51468: LD_INT 1
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 2
51477: NEG
51478: PUSH
51479: LD_INT 0
51481: PUSH
51482: EMPTY
51483: LIST
51484: LIST
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: LD_INT 1
51492: NEG
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 2
51500: NEG
51501: PUSH
51502: LD_INT 2
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: LIST
51514: LIST
51515: LIST
51516: LIST
51517: LIST
51518: LIST
51519: LIST
51520: LIST
51521: LIST
51522: LIST
51523: LIST
51524: LIST
51525: LIST
51526: LIST
51527: LIST
51528: LIST
51529: LIST
51530: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51531: LD_ADDR_VAR 0 55
51535: PUSH
51536: LD_INT 0
51538: PUSH
51539: LD_INT 0
51541: PUSH
51542: EMPTY
51543: LIST
51544: LIST
51545: PUSH
51546: LD_INT 0
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: PUSH
51553: EMPTY
51554: LIST
51555: LIST
51556: PUSH
51557: LD_INT 1
51559: PUSH
51560: LD_INT 0
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 1
51569: PUSH
51570: LD_INT 1
51572: PUSH
51573: EMPTY
51574: LIST
51575: LIST
51576: PUSH
51577: LD_INT 0
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 1
51589: NEG
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: EMPTY
51595: LIST
51596: LIST
51597: PUSH
51598: LD_INT 1
51600: NEG
51601: PUSH
51602: LD_INT 1
51604: NEG
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 1
51612: NEG
51613: PUSH
51614: LD_INT 2
51616: NEG
51617: PUSH
51618: EMPTY
51619: LIST
51620: LIST
51621: PUSH
51622: LD_INT 0
51624: PUSH
51625: LD_INT 2
51627: NEG
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: PUSH
51633: LD_INT 1
51635: PUSH
51636: LD_INT 1
51638: NEG
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: PUSH
51644: LD_INT 2
51646: PUSH
51647: LD_INT 0
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 2
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 2
51666: PUSH
51667: LD_INT 2
51669: PUSH
51670: EMPTY
51671: LIST
51672: LIST
51673: PUSH
51674: LD_INT 1
51676: PUSH
51677: LD_INT 2
51679: PUSH
51680: EMPTY
51681: LIST
51682: LIST
51683: PUSH
51684: LD_INT 0
51686: PUSH
51687: LD_INT 2
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 1
51696: NEG
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 2
51707: NEG
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 2
51718: NEG
51719: PUSH
51720: LD_INT 1
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 2
51730: NEG
51731: PUSH
51732: LD_INT 2
51734: NEG
51735: PUSH
51736: EMPTY
51737: LIST
51738: LIST
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: LIST
51744: LIST
51745: LIST
51746: LIST
51747: LIST
51748: LIST
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: LIST
51754: LIST
51755: LIST
51756: LIST
51757: LIST
51758: LIST
51759: LIST
51760: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51761: LD_ADDR_VAR 0 56
51765: PUSH
51766: LD_INT 0
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 0
51778: PUSH
51779: LD_INT 1
51781: NEG
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 1
51789: PUSH
51790: LD_INT 0
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: LD_INT 1
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: LD_INT 1
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: NEG
51820: PUSH
51821: LD_INT 0
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 1
51830: NEG
51831: PUSH
51832: LD_INT 1
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: NEG
51843: PUSH
51844: LD_INT 2
51846: NEG
51847: PUSH
51848: EMPTY
51849: LIST
51850: LIST
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: LD_INT 2
51857: NEG
51858: PUSH
51859: EMPTY
51860: LIST
51861: LIST
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: LD_INT 1
51868: NEG
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 2
51876: PUSH
51877: LD_INT 0
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 2
51886: PUSH
51887: LD_INT 1
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 2
51896: PUSH
51897: LD_INT 2
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 1
51906: PUSH
51907: LD_INT 2
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 0
51916: PUSH
51917: LD_INT 2
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 1
51926: NEG
51927: PUSH
51928: LD_INT 1
51930: PUSH
51931: EMPTY
51932: LIST
51933: LIST
51934: PUSH
51935: LD_INT 2
51937: NEG
51938: PUSH
51939: LD_INT 0
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 2
51948: NEG
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 2
51960: NEG
51961: PUSH
51962: LD_INT 2
51964: NEG
51965: PUSH
51966: EMPTY
51967: LIST
51968: LIST
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51991: LD_ADDR_VAR 0 57
51995: PUSH
51996: LD_INT 0
51998: PUSH
51999: LD_INT 0
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 0
52008: PUSH
52009: LD_INT 1
52011: NEG
52012: PUSH
52013: EMPTY
52014: LIST
52015: LIST
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: EMPTY
52024: LIST
52025: LIST
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: LD_INT 1
52032: PUSH
52033: EMPTY
52034: LIST
52035: LIST
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: LD_INT 1
52042: PUSH
52043: EMPTY
52044: LIST
52045: LIST
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: LD_INT 0
52053: PUSH
52054: EMPTY
52055: LIST
52056: LIST
52057: PUSH
52058: LD_INT 1
52060: NEG
52061: PUSH
52062: LD_INT 1
52064: NEG
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 1
52072: NEG
52073: PUSH
52074: LD_INT 2
52076: NEG
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: LD_INT 0
52084: PUSH
52085: LD_INT 2
52087: NEG
52088: PUSH
52089: EMPTY
52090: LIST
52091: LIST
52092: PUSH
52093: LD_INT 1
52095: PUSH
52096: LD_INT 1
52098: NEG
52099: PUSH
52100: EMPTY
52101: LIST
52102: LIST
52103: PUSH
52104: LD_INT 2
52106: PUSH
52107: LD_INT 0
52109: PUSH
52110: EMPTY
52111: LIST
52112: LIST
52113: PUSH
52114: LD_INT 2
52116: PUSH
52117: LD_INT 1
52119: PUSH
52120: EMPTY
52121: LIST
52122: LIST
52123: PUSH
52124: LD_INT 2
52126: PUSH
52127: LD_INT 2
52129: PUSH
52130: EMPTY
52131: LIST
52132: LIST
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: LD_INT 2
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 0
52146: PUSH
52147: LD_INT 2
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 1
52156: NEG
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 2
52167: NEG
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 2
52178: NEG
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 2
52190: NEG
52191: PUSH
52192: LD_INT 2
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: EMPTY
52201: LIST
52202: LIST
52203: LIST
52204: LIST
52205: LIST
52206: LIST
52207: LIST
52208: LIST
52209: LIST
52210: LIST
52211: LIST
52212: LIST
52213: LIST
52214: LIST
52215: LIST
52216: LIST
52217: LIST
52218: LIST
52219: LIST
52220: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52221: LD_ADDR_VAR 0 58
52225: PUSH
52226: LD_INT 0
52228: PUSH
52229: LD_INT 0
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 0
52238: PUSH
52239: LD_INT 1
52241: NEG
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 1
52249: PUSH
52250: LD_INT 0
52252: PUSH
52253: EMPTY
52254: LIST
52255: LIST
52256: PUSH
52257: LD_INT 1
52259: PUSH
52260: LD_INT 1
52262: PUSH
52263: EMPTY
52264: LIST
52265: LIST
52266: PUSH
52267: LD_INT 0
52269: PUSH
52270: LD_INT 1
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 1
52279: NEG
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 1
52290: NEG
52291: PUSH
52292: LD_INT 1
52294: NEG
52295: PUSH
52296: EMPTY
52297: LIST
52298: LIST
52299: PUSH
52300: LD_INT 1
52302: NEG
52303: PUSH
52304: LD_INT 2
52306: NEG
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 0
52314: PUSH
52315: LD_INT 2
52317: NEG
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 1
52325: PUSH
52326: LD_INT 1
52328: NEG
52329: PUSH
52330: EMPTY
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 2
52336: PUSH
52337: LD_INT 0
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 2
52346: PUSH
52347: LD_INT 1
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: LD_INT 2
52359: PUSH
52360: EMPTY
52361: LIST
52362: LIST
52363: PUSH
52364: LD_INT 1
52366: PUSH
52367: LD_INT 2
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: PUSH
52374: LD_INT 0
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: EMPTY
52381: LIST
52382: LIST
52383: PUSH
52384: LD_INT 1
52386: NEG
52387: PUSH
52388: LD_INT 1
52390: PUSH
52391: EMPTY
52392: LIST
52393: LIST
52394: PUSH
52395: LD_INT 2
52397: NEG
52398: PUSH
52399: LD_INT 0
52401: PUSH
52402: EMPTY
52403: LIST
52404: LIST
52405: PUSH
52406: LD_INT 2
52408: NEG
52409: PUSH
52410: LD_INT 1
52412: NEG
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 2
52420: NEG
52421: PUSH
52422: LD_INT 2
52424: NEG
52425: PUSH
52426: EMPTY
52427: LIST
52428: LIST
52429: PUSH
52430: EMPTY
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: LIST
52445: LIST
52446: LIST
52447: LIST
52448: LIST
52449: LIST
52450: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52451: LD_ADDR_VAR 0 59
52455: PUSH
52456: LD_INT 0
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 0
52468: PUSH
52469: LD_INT 1
52471: NEG
52472: PUSH
52473: EMPTY
52474: LIST
52475: LIST
52476: PUSH
52477: LD_INT 1
52479: PUSH
52480: LD_INT 0
52482: PUSH
52483: EMPTY
52484: LIST
52485: LIST
52486: PUSH
52487: LD_INT 1
52489: PUSH
52490: LD_INT 1
52492: PUSH
52493: EMPTY
52494: LIST
52495: LIST
52496: PUSH
52497: LD_INT 0
52499: PUSH
52500: LD_INT 1
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 1
52509: NEG
52510: PUSH
52511: LD_INT 0
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: EMPTY
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52539: LD_ADDR_VAR 0 60
52543: PUSH
52544: LD_INT 0
52546: PUSH
52547: LD_INT 0
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: LD_INT 1
52559: NEG
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 1
52567: PUSH
52568: LD_INT 0
52570: PUSH
52571: EMPTY
52572: LIST
52573: LIST
52574: PUSH
52575: LD_INT 1
52577: PUSH
52578: LD_INT 1
52580: PUSH
52581: EMPTY
52582: LIST
52583: LIST
52584: PUSH
52585: LD_INT 0
52587: PUSH
52588: LD_INT 1
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 1
52597: NEG
52598: PUSH
52599: LD_INT 0
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: LD_INT 1
52612: NEG
52613: PUSH
52614: EMPTY
52615: LIST
52616: LIST
52617: PUSH
52618: EMPTY
52619: LIST
52620: LIST
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52627: LD_ADDR_VAR 0 61
52631: PUSH
52632: LD_INT 0
52634: PUSH
52635: LD_INT 0
52637: PUSH
52638: EMPTY
52639: LIST
52640: LIST
52641: PUSH
52642: LD_INT 0
52644: PUSH
52645: LD_INT 1
52647: NEG
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 1
52655: PUSH
52656: LD_INT 0
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 1
52665: PUSH
52666: LD_INT 1
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 0
52675: PUSH
52676: LD_INT 1
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 1
52685: NEG
52686: PUSH
52687: LD_INT 0
52689: PUSH
52690: EMPTY
52691: LIST
52692: LIST
52693: PUSH
52694: LD_INT 1
52696: NEG
52697: PUSH
52698: LD_INT 1
52700: NEG
52701: PUSH
52702: EMPTY
52703: LIST
52704: LIST
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: LIST
52710: LIST
52711: LIST
52712: LIST
52713: LIST
52714: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52715: LD_ADDR_VAR 0 62
52719: PUSH
52720: LD_INT 0
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 0
52732: PUSH
52733: LD_INT 1
52735: NEG
52736: PUSH
52737: EMPTY
52738: LIST
52739: LIST
52740: PUSH
52741: LD_INT 1
52743: PUSH
52744: LD_INT 0
52746: PUSH
52747: EMPTY
52748: LIST
52749: LIST
52750: PUSH
52751: LD_INT 1
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: EMPTY
52758: LIST
52759: LIST
52760: PUSH
52761: LD_INT 0
52763: PUSH
52764: LD_INT 1
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 1
52773: NEG
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 1
52784: NEG
52785: PUSH
52786: LD_INT 1
52788: NEG
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: LIST
52798: LIST
52799: LIST
52800: LIST
52801: LIST
52802: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52803: LD_ADDR_VAR 0 63
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: LD_INT 0
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 0
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 1
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 1
52841: PUSH
52842: LD_INT 1
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 0
52851: PUSH
52852: LD_INT 1
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: PUSH
52859: LD_INT 1
52861: NEG
52862: PUSH
52863: LD_INT 0
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 1
52872: NEG
52873: PUSH
52874: LD_INT 1
52876: NEG
52877: PUSH
52878: EMPTY
52879: LIST
52880: LIST
52881: PUSH
52882: EMPTY
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
52891: LD_ADDR_VAR 0 64
52895: PUSH
52896: LD_INT 0
52898: PUSH
52899: LD_INT 0
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 0
52908: PUSH
52909: LD_INT 1
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 1
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 1
52929: PUSH
52930: LD_INT 1
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 0
52939: PUSH
52940: LD_INT 1
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: NEG
52950: PUSH
52951: LD_INT 0
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 1
52960: NEG
52961: PUSH
52962: LD_INT 1
52964: NEG
52965: PUSH
52966: EMPTY
52967: LIST
52968: LIST
52969: PUSH
52970: EMPTY
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: LIST
52977: LIST
52978: ST_TO_ADDR
// end ; 1 :
52979: GO 58876
52981: LD_INT 1
52983: DOUBLE
52984: EQUAL
52985: IFTRUE 52989
52987: GO 55612
52989: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52990: LD_ADDR_VAR 0 11
52994: PUSH
52995: LD_INT 1
52997: NEG
52998: PUSH
52999: LD_INT 3
53001: NEG
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 0
53009: PUSH
53010: LD_INT 3
53012: NEG
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 1
53020: PUSH
53021: LD_INT 2
53023: NEG
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: EMPTY
53030: LIST
53031: LIST
53032: LIST
53033: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53034: LD_ADDR_VAR 0 12
53038: PUSH
53039: LD_INT 2
53041: PUSH
53042: LD_INT 1
53044: NEG
53045: PUSH
53046: EMPTY
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 3
53052: PUSH
53053: LD_INT 0
53055: PUSH
53056: EMPTY
53057: LIST
53058: LIST
53059: PUSH
53060: LD_INT 3
53062: PUSH
53063: LD_INT 1
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: LIST
53074: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53075: LD_ADDR_VAR 0 13
53079: PUSH
53080: LD_INT 3
53082: PUSH
53083: LD_INT 2
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 3
53092: PUSH
53093: LD_INT 3
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: LD_INT 2
53102: PUSH
53103: LD_INT 3
53105: PUSH
53106: EMPTY
53107: LIST
53108: LIST
53109: PUSH
53110: EMPTY
53111: LIST
53112: LIST
53113: LIST
53114: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53115: LD_ADDR_VAR 0 14
53119: PUSH
53120: LD_INT 1
53122: PUSH
53123: LD_INT 3
53125: PUSH
53126: EMPTY
53127: LIST
53128: LIST
53129: PUSH
53130: LD_INT 0
53132: PUSH
53133: LD_INT 3
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 1
53142: NEG
53143: PUSH
53144: LD_INT 2
53146: PUSH
53147: EMPTY
53148: LIST
53149: LIST
53150: PUSH
53151: EMPTY
53152: LIST
53153: LIST
53154: LIST
53155: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53156: LD_ADDR_VAR 0 15
53160: PUSH
53161: LD_INT 2
53163: NEG
53164: PUSH
53165: LD_INT 1
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 3
53174: NEG
53175: PUSH
53176: LD_INT 0
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: PUSH
53183: LD_INT 3
53185: NEG
53186: PUSH
53187: LD_INT 1
53189: NEG
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: LIST
53199: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53200: LD_ADDR_VAR 0 16
53204: PUSH
53205: LD_INT 2
53207: NEG
53208: PUSH
53209: LD_INT 3
53211: NEG
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 3
53219: NEG
53220: PUSH
53221: LD_INT 2
53223: NEG
53224: PUSH
53225: EMPTY
53226: LIST
53227: LIST
53228: PUSH
53229: LD_INT 3
53231: NEG
53232: PUSH
53233: LD_INT 3
53235: NEG
53236: PUSH
53237: EMPTY
53238: LIST
53239: LIST
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: LIST
53245: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
53246: LD_ADDR_VAR 0 17
53250: PUSH
53251: LD_INT 1
53253: NEG
53254: PUSH
53255: LD_INT 3
53257: NEG
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 0
53265: PUSH
53266: LD_INT 3
53268: NEG
53269: PUSH
53270: EMPTY
53271: LIST
53272: LIST
53273: PUSH
53274: LD_INT 1
53276: PUSH
53277: LD_INT 2
53279: NEG
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: LIST
53289: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
53290: LD_ADDR_VAR 0 18
53294: PUSH
53295: LD_INT 2
53297: PUSH
53298: LD_INT 1
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 3
53308: PUSH
53309: LD_INT 0
53311: PUSH
53312: EMPTY
53313: LIST
53314: LIST
53315: PUSH
53316: LD_INT 3
53318: PUSH
53319: LD_INT 1
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: LIST
53330: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
53331: LD_ADDR_VAR 0 19
53335: PUSH
53336: LD_INT 3
53338: PUSH
53339: LD_INT 2
53341: PUSH
53342: EMPTY
53343: LIST
53344: LIST
53345: PUSH
53346: LD_INT 3
53348: PUSH
53349: LD_INT 3
53351: PUSH
53352: EMPTY
53353: LIST
53354: LIST
53355: PUSH
53356: LD_INT 2
53358: PUSH
53359: LD_INT 3
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: EMPTY
53367: LIST
53368: LIST
53369: LIST
53370: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
53371: LD_ADDR_VAR 0 20
53375: PUSH
53376: LD_INT 1
53378: PUSH
53379: LD_INT 3
53381: PUSH
53382: EMPTY
53383: LIST
53384: LIST
53385: PUSH
53386: LD_INT 0
53388: PUSH
53389: LD_INT 3
53391: PUSH
53392: EMPTY
53393: LIST
53394: LIST
53395: PUSH
53396: LD_INT 1
53398: NEG
53399: PUSH
53400: LD_INT 2
53402: PUSH
53403: EMPTY
53404: LIST
53405: LIST
53406: PUSH
53407: EMPTY
53408: LIST
53409: LIST
53410: LIST
53411: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
53412: LD_ADDR_VAR 0 21
53416: PUSH
53417: LD_INT 2
53419: NEG
53420: PUSH
53421: LD_INT 1
53423: PUSH
53424: EMPTY
53425: LIST
53426: LIST
53427: PUSH
53428: LD_INT 3
53430: NEG
53431: PUSH
53432: LD_INT 0
53434: PUSH
53435: EMPTY
53436: LIST
53437: LIST
53438: PUSH
53439: LD_INT 3
53441: NEG
53442: PUSH
53443: LD_INT 1
53445: NEG
53446: PUSH
53447: EMPTY
53448: LIST
53449: LIST
53450: PUSH
53451: EMPTY
53452: LIST
53453: LIST
53454: LIST
53455: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
53456: LD_ADDR_VAR 0 22
53460: PUSH
53461: LD_INT 2
53463: NEG
53464: PUSH
53465: LD_INT 3
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 3
53475: NEG
53476: PUSH
53477: LD_INT 2
53479: NEG
53480: PUSH
53481: EMPTY
53482: LIST
53483: LIST
53484: PUSH
53485: LD_INT 3
53487: NEG
53488: PUSH
53489: LD_INT 3
53491: NEG
53492: PUSH
53493: EMPTY
53494: LIST
53495: LIST
53496: PUSH
53497: EMPTY
53498: LIST
53499: LIST
53500: LIST
53501: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
53502: LD_ADDR_VAR 0 23
53506: PUSH
53507: LD_INT 0
53509: PUSH
53510: LD_INT 3
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 1
53520: NEG
53521: PUSH
53522: LD_INT 4
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 1
53532: PUSH
53533: LD_INT 3
53535: NEG
53536: PUSH
53537: EMPTY
53538: LIST
53539: LIST
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: LIST
53545: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
53546: LD_ADDR_VAR 0 24
53550: PUSH
53551: LD_INT 3
53553: PUSH
53554: LD_INT 0
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: LD_INT 3
53563: PUSH
53564: LD_INT 1
53566: NEG
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: PUSH
53572: LD_INT 4
53574: PUSH
53575: LD_INT 1
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: EMPTY
53583: LIST
53584: LIST
53585: LIST
53586: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
53587: LD_ADDR_VAR 0 25
53591: PUSH
53592: LD_INT 3
53594: PUSH
53595: LD_INT 3
53597: PUSH
53598: EMPTY
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 4
53604: PUSH
53605: LD_INT 3
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: PUSH
53612: LD_INT 3
53614: PUSH
53615: LD_INT 4
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: EMPTY
53623: LIST
53624: LIST
53625: LIST
53626: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
53627: LD_ADDR_VAR 0 26
53631: PUSH
53632: LD_INT 0
53634: PUSH
53635: LD_INT 3
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 1
53644: PUSH
53645: LD_INT 4
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 1
53654: NEG
53655: PUSH
53656: LD_INT 3
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: EMPTY
53664: LIST
53665: LIST
53666: LIST
53667: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
53668: LD_ADDR_VAR 0 27
53672: PUSH
53673: LD_INT 3
53675: NEG
53676: PUSH
53677: LD_INT 0
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: PUSH
53684: LD_INT 3
53686: NEG
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: EMPTY
53692: LIST
53693: LIST
53694: PUSH
53695: LD_INT 4
53697: NEG
53698: PUSH
53699: LD_INT 1
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: LIST
53711: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
53712: LD_ADDR_VAR 0 28
53716: PUSH
53717: LD_INT 3
53719: NEG
53720: PUSH
53721: LD_INT 3
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 3
53731: NEG
53732: PUSH
53733: LD_INT 4
53735: NEG
53736: PUSH
53737: EMPTY
53738: LIST
53739: LIST
53740: PUSH
53741: LD_INT 4
53743: NEG
53744: PUSH
53745: LD_INT 3
53747: NEG
53748: PUSH
53749: EMPTY
53750: LIST
53751: LIST
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: LIST
53757: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
53758: LD_ADDR_VAR 0 29
53762: PUSH
53763: LD_INT 1
53765: NEG
53766: PUSH
53767: LD_INT 3
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 0
53777: PUSH
53778: LD_INT 3
53780: NEG
53781: PUSH
53782: EMPTY
53783: LIST
53784: LIST
53785: PUSH
53786: LD_INT 1
53788: PUSH
53789: LD_INT 2
53791: NEG
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 1
53799: NEG
53800: PUSH
53801: LD_INT 4
53803: NEG
53804: PUSH
53805: EMPTY
53806: LIST
53807: LIST
53808: PUSH
53809: LD_INT 0
53811: PUSH
53812: LD_INT 4
53814: NEG
53815: PUSH
53816: EMPTY
53817: LIST
53818: LIST
53819: PUSH
53820: LD_INT 1
53822: PUSH
53823: LD_INT 3
53825: NEG
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 1
53833: NEG
53834: PUSH
53835: LD_INT 5
53837: NEG
53838: PUSH
53839: EMPTY
53840: LIST
53841: LIST
53842: PUSH
53843: LD_INT 0
53845: PUSH
53846: LD_INT 5
53848: NEG
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: PUSH
53854: LD_INT 1
53856: PUSH
53857: LD_INT 4
53859: NEG
53860: PUSH
53861: EMPTY
53862: LIST
53863: LIST
53864: PUSH
53865: LD_INT 1
53867: NEG
53868: PUSH
53869: LD_INT 6
53871: NEG
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_INT 0
53879: PUSH
53880: LD_INT 6
53882: NEG
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: PUSH
53888: LD_INT 1
53890: PUSH
53891: LD_INT 5
53893: NEG
53894: PUSH
53895: EMPTY
53896: LIST
53897: LIST
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: LIST
53905: LIST
53906: LIST
53907: LIST
53908: LIST
53909: LIST
53910: LIST
53911: LIST
53912: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
53913: LD_ADDR_VAR 0 30
53917: PUSH
53918: LD_INT 2
53920: PUSH
53921: LD_INT 1
53923: NEG
53924: PUSH
53925: EMPTY
53926: LIST
53927: LIST
53928: PUSH
53929: LD_INT 3
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 3
53941: PUSH
53942: LD_INT 1
53944: PUSH
53945: EMPTY
53946: LIST
53947: LIST
53948: PUSH
53949: LD_INT 3
53951: PUSH
53952: LD_INT 1
53954: NEG
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 4
53962: PUSH
53963: LD_INT 0
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: LD_INT 4
53972: PUSH
53973: LD_INT 1
53975: PUSH
53976: EMPTY
53977: LIST
53978: LIST
53979: PUSH
53980: LD_INT 4
53982: PUSH
53983: LD_INT 1
53985: NEG
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 5
53993: PUSH
53994: LD_INT 0
53996: PUSH
53997: EMPTY
53998: LIST
53999: LIST
54000: PUSH
54001: LD_INT 5
54003: PUSH
54004: LD_INT 1
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 5
54013: PUSH
54014: LD_INT 1
54016: NEG
54017: PUSH
54018: EMPTY
54019: LIST
54020: LIST
54021: PUSH
54022: LD_INT 6
54024: PUSH
54025: LD_INT 0
54027: PUSH
54028: EMPTY
54029: LIST
54030: LIST
54031: PUSH
54032: LD_INT 6
54034: PUSH
54035: LD_INT 1
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: LIST
54046: LIST
54047: LIST
54048: LIST
54049: LIST
54050: LIST
54051: LIST
54052: LIST
54053: LIST
54054: LIST
54055: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
54056: LD_ADDR_VAR 0 31
54060: PUSH
54061: LD_INT 3
54063: PUSH
54064: LD_INT 2
54066: PUSH
54067: EMPTY
54068: LIST
54069: LIST
54070: PUSH
54071: LD_INT 3
54073: PUSH
54074: LD_INT 3
54076: PUSH
54077: EMPTY
54078: LIST
54079: LIST
54080: PUSH
54081: LD_INT 2
54083: PUSH
54084: LD_INT 3
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: PUSH
54091: LD_INT 4
54093: PUSH
54094: LD_INT 3
54096: PUSH
54097: EMPTY
54098: LIST
54099: LIST
54100: PUSH
54101: LD_INT 4
54103: PUSH
54104: LD_INT 4
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 3
54113: PUSH
54114: LD_INT 4
54116: PUSH
54117: EMPTY
54118: LIST
54119: LIST
54120: PUSH
54121: LD_INT 5
54123: PUSH
54124: LD_INT 4
54126: PUSH
54127: EMPTY
54128: LIST
54129: LIST
54130: PUSH
54131: LD_INT 5
54133: PUSH
54134: LD_INT 5
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 4
54143: PUSH
54144: LD_INT 5
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PUSH
54151: LD_INT 6
54153: PUSH
54154: LD_INT 5
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: PUSH
54161: LD_INT 6
54163: PUSH
54164: LD_INT 6
54166: PUSH
54167: EMPTY
54168: LIST
54169: LIST
54170: PUSH
54171: LD_INT 5
54173: PUSH
54174: LD_INT 6
54176: PUSH
54177: EMPTY
54178: LIST
54179: LIST
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: LIST
54185: LIST
54186: LIST
54187: LIST
54188: LIST
54189: LIST
54190: LIST
54191: LIST
54192: LIST
54193: LIST
54194: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
54195: LD_ADDR_VAR 0 32
54199: PUSH
54200: LD_INT 1
54202: PUSH
54203: LD_INT 3
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: PUSH
54210: LD_INT 0
54212: PUSH
54213: LD_INT 3
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 1
54222: NEG
54223: PUSH
54224: LD_INT 2
54226: PUSH
54227: EMPTY
54228: LIST
54229: LIST
54230: PUSH
54231: LD_INT 1
54233: PUSH
54234: LD_INT 4
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: PUSH
54241: LD_INT 0
54243: PUSH
54244: LD_INT 4
54246: PUSH
54247: EMPTY
54248: LIST
54249: LIST
54250: PUSH
54251: LD_INT 1
54253: NEG
54254: PUSH
54255: LD_INT 3
54257: PUSH
54258: EMPTY
54259: LIST
54260: LIST
54261: PUSH
54262: LD_INT 1
54264: PUSH
54265: LD_INT 5
54267: PUSH
54268: EMPTY
54269: LIST
54270: LIST
54271: PUSH
54272: LD_INT 0
54274: PUSH
54275: LD_INT 5
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: PUSH
54282: LD_INT 1
54284: NEG
54285: PUSH
54286: LD_INT 4
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 1
54295: PUSH
54296: LD_INT 6
54298: PUSH
54299: EMPTY
54300: LIST
54301: LIST
54302: PUSH
54303: LD_INT 0
54305: PUSH
54306: LD_INT 6
54308: PUSH
54309: EMPTY
54310: LIST
54311: LIST
54312: PUSH
54313: LD_INT 1
54315: NEG
54316: PUSH
54317: LD_INT 5
54319: PUSH
54320: EMPTY
54321: LIST
54322: LIST
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
54338: LD_ADDR_VAR 0 33
54342: PUSH
54343: LD_INT 2
54345: NEG
54346: PUSH
54347: LD_INT 1
54349: PUSH
54350: EMPTY
54351: LIST
54352: LIST
54353: PUSH
54354: LD_INT 3
54356: NEG
54357: PUSH
54358: LD_INT 0
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 3
54367: NEG
54368: PUSH
54369: LD_INT 1
54371: NEG
54372: PUSH
54373: EMPTY
54374: LIST
54375: LIST
54376: PUSH
54377: LD_INT 3
54379: NEG
54380: PUSH
54381: LD_INT 1
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 4
54390: NEG
54391: PUSH
54392: LD_INT 0
54394: PUSH
54395: EMPTY
54396: LIST
54397: LIST
54398: PUSH
54399: LD_INT 4
54401: NEG
54402: PUSH
54403: LD_INT 1
54405: NEG
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 4
54413: NEG
54414: PUSH
54415: LD_INT 1
54417: PUSH
54418: EMPTY
54419: LIST
54420: LIST
54421: PUSH
54422: LD_INT 5
54424: NEG
54425: PUSH
54426: LD_INT 0
54428: PUSH
54429: EMPTY
54430: LIST
54431: LIST
54432: PUSH
54433: LD_INT 5
54435: NEG
54436: PUSH
54437: LD_INT 1
54439: NEG
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 5
54447: NEG
54448: PUSH
54449: LD_INT 1
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 6
54458: NEG
54459: PUSH
54460: LD_INT 0
54462: PUSH
54463: EMPTY
54464: LIST
54465: LIST
54466: PUSH
54467: LD_INT 6
54469: NEG
54470: PUSH
54471: LD_INT 1
54473: NEG
54474: PUSH
54475: EMPTY
54476: LIST
54477: LIST
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
54493: LD_ADDR_VAR 0 34
54497: PUSH
54498: LD_INT 2
54500: NEG
54501: PUSH
54502: LD_INT 3
54504: NEG
54505: PUSH
54506: EMPTY
54507: LIST
54508: LIST
54509: PUSH
54510: LD_INT 3
54512: NEG
54513: PUSH
54514: LD_INT 2
54516: NEG
54517: PUSH
54518: EMPTY
54519: LIST
54520: LIST
54521: PUSH
54522: LD_INT 3
54524: NEG
54525: PUSH
54526: LD_INT 3
54528: NEG
54529: PUSH
54530: EMPTY
54531: LIST
54532: LIST
54533: PUSH
54534: LD_INT 3
54536: NEG
54537: PUSH
54538: LD_INT 4
54540: NEG
54541: PUSH
54542: EMPTY
54543: LIST
54544: LIST
54545: PUSH
54546: LD_INT 4
54548: NEG
54549: PUSH
54550: LD_INT 3
54552: NEG
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 4
54560: NEG
54561: PUSH
54562: LD_INT 4
54564: NEG
54565: PUSH
54566: EMPTY
54567: LIST
54568: LIST
54569: PUSH
54570: LD_INT 4
54572: NEG
54573: PUSH
54574: LD_INT 5
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 5
54584: NEG
54585: PUSH
54586: LD_INT 4
54588: NEG
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 5
54596: NEG
54597: PUSH
54598: LD_INT 5
54600: NEG
54601: PUSH
54602: EMPTY
54603: LIST
54604: LIST
54605: PUSH
54606: LD_INT 5
54608: NEG
54609: PUSH
54610: LD_INT 6
54612: NEG
54613: PUSH
54614: EMPTY
54615: LIST
54616: LIST
54617: PUSH
54618: LD_INT 6
54620: NEG
54621: PUSH
54622: LD_INT 5
54624: NEG
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 6
54632: NEG
54633: PUSH
54634: LD_INT 6
54636: NEG
54637: PUSH
54638: EMPTY
54639: LIST
54640: LIST
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
54656: LD_ADDR_VAR 0 41
54660: PUSH
54661: LD_INT 0
54663: PUSH
54664: LD_INT 2
54666: NEG
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 1
54674: NEG
54675: PUSH
54676: LD_INT 3
54678: NEG
54679: PUSH
54680: EMPTY
54681: LIST
54682: LIST
54683: PUSH
54684: LD_INT 1
54686: PUSH
54687: LD_INT 2
54689: NEG
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: PUSH
54695: EMPTY
54696: LIST
54697: LIST
54698: LIST
54699: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
54700: LD_ADDR_VAR 0 42
54704: PUSH
54705: LD_INT 2
54707: PUSH
54708: LD_INT 0
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: PUSH
54715: LD_INT 2
54717: PUSH
54718: LD_INT 1
54720: NEG
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: PUSH
54726: LD_INT 3
54728: PUSH
54729: LD_INT 1
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: EMPTY
54737: LIST
54738: LIST
54739: LIST
54740: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
54741: LD_ADDR_VAR 0 43
54745: PUSH
54746: LD_INT 2
54748: PUSH
54749: LD_INT 2
54751: PUSH
54752: EMPTY
54753: LIST
54754: LIST
54755: PUSH
54756: LD_INT 3
54758: PUSH
54759: LD_INT 2
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: PUSH
54766: LD_INT 2
54768: PUSH
54769: LD_INT 3
54771: PUSH
54772: EMPTY
54773: LIST
54774: LIST
54775: PUSH
54776: EMPTY
54777: LIST
54778: LIST
54779: LIST
54780: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
54781: LD_ADDR_VAR 0 44
54785: PUSH
54786: LD_INT 0
54788: PUSH
54789: LD_INT 2
54791: PUSH
54792: EMPTY
54793: LIST
54794: LIST
54795: PUSH
54796: LD_INT 1
54798: PUSH
54799: LD_INT 3
54801: PUSH
54802: EMPTY
54803: LIST
54804: LIST
54805: PUSH
54806: LD_INT 1
54808: NEG
54809: PUSH
54810: LD_INT 2
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: LIST
54821: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
54822: LD_ADDR_VAR 0 45
54826: PUSH
54827: LD_INT 2
54829: NEG
54830: PUSH
54831: LD_INT 0
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 2
54840: NEG
54841: PUSH
54842: LD_INT 1
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: PUSH
54849: LD_INT 3
54851: NEG
54852: PUSH
54853: LD_INT 1
54855: NEG
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: LIST
54865: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
54866: LD_ADDR_VAR 0 46
54870: PUSH
54871: LD_INT 2
54873: NEG
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 2
54885: NEG
54886: PUSH
54887: LD_INT 3
54889: NEG
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 3
54897: NEG
54898: PUSH
54899: LD_INT 2
54901: NEG
54902: PUSH
54903: EMPTY
54904: LIST
54905: LIST
54906: PUSH
54907: EMPTY
54908: LIST
54909: LIST
54910: LIST
54911: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
54912: LD_ADDR_VAR 0 47
54916: PUSH
54917: LD_INT 2
54919: NEG
54920: PUSH
54921: LD_INT 3
54923: NEG
54924: PUSH
54925: EMPTY
54926: LIST
54927: LIST
54928: PUSH
54929: LD_INT 1
54931: NEG
54932: PUSH
54933: LD_INT 3
54935: NEG
54936: PUSH
54937: EMPTY
54938: LIST
54939: LIST
54940: PUSH
54941: EMPTY
54942: LIST
54943: LIST
54944: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
54945: LD_ADDR_VAR 0 48
54949: PUSH
54950: LD_INT 1
54952: PUSH
54953: LD_INT 2
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 2
54963: PUSH
54964: LD_INT 1
54966: NEG
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
54976: LD_ADDR_VAR 0 49
54980: PUSH
54981: LD_INT 3
54983: PUSH
54984: LD_INT 1
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: PUSH
54991: LD_INT 3
54993: PUSH
54994: LD_INT 2
54996: PUSH
54997: EMPTY
54998: LIST
54999: LIST
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
55005: LD_ADDR_VAR 0 50
55009: PUSH
55010: LD_INT 2
55012: PUSH
55013: LD_INT 3
55015: PUSH
55016: EMPTY
55017: LIST
55018: LIST
55019: PUSH
55020: LD_INT 1
55022: PUSH
55023: LD_INT 3
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: EMPTY
55031: LIST
55032: LIST
55033: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
55034: LD_ADDR_VAR 0 51
55038: PUSH
55039: LD_INT 1
55041: NEG
55042: PUSH
55043: LD_INT 2
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: PUSH
55050: LD_INT 2
55052: NEG
55053: PUSH
55054: LD_INT 1
55056: PUSH
55057: EMPTY
55058: LIST
55059: LIST
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
55065: LD_ADDR_VAR 0 52
55069: PUSH
55070: LD_INT 3
55072: NEG
55073: PUSH
55074: LD_INT 1
55076: NEG
55077: PUSH
55078: EMPTY
55079: LIST
55080: LIST
55081: PUSH
55082: LD_INT 3
55084: NEG
55085: PUSH
55086: LD_INT 2
55088: NEG
55089: PUSH
55090: EMPTY
55091: LIST
55092: LIST
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
55098: LD_ADDR_VAR 0 53
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: LD_INT 3
55109: NEG
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 0
55117: PUSH
55118: LD_INT 3
55120: NEG
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 1
55128: PUSH
55129: LD_INT 2
55131: NEG
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: LIST
55141: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
55142: LD_ADDR_VAR 0 54
55146: PUSH
55147: LD_INT 2
55149: PUSH
55150: LD_INT 1
55152: NEG
55153: PUSH
55154: EMPTY
55155: LIST
55156: LIST
55157: PUSH
55158: LD_INT 3
55160: PUSH
55161: LD_INT 0
55163: PUSH
55164: EMPTY
55165: LIST
55166: LIST
55167: PUSH
55168: LD_INT 3
55170: PUSH
55171: LD_INT 1
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: LIST
55182: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
55183: LD_ADDR_VAR 0 55
55187: PUSH
55188: LD_INT 3
55190: PUSH
55191: LD_INT 2
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: PUSH
55198: LD_INT 3
55200: PUSH
55201: LD_INT 3
55203: PUSH
55204: EMPTY
55205: LIST
55206: LIST
55207: PUSH
55208: LD_INT 2
55210: PUSH
55211: LD_INT 3
55213: PUSH
55214: EMPTY
55215: LIST
55216: LIST
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: LIST
55222: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
55223: LD_ADDR_VAR 0 56
55227: PUSH
55228: LD_INT 1
55230: PUSH
55231: LD_INT 3
55233: PUSH
55234: EMPTY
55235: LIST
55236: LIST
55237: PUSH
55238: LD_INT 0
55240: PUSH
55241: LD_INT 3
55243: PUSH
55244: EMPTY
55245: LIST
55246: LIST
55247: PUSH
55248: LD_INT 1
55250: NEG
55251: PUSH
55252: LD_INT 2
55254: PUSH
55255: EMPTY
55256: LIST
55257: LIST
55258: PUSH
55259: EMPTY
55260: LIST
55261: LIST
55262: LIST
55263: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
55264: LD_ADDR_VAR 0 57
55268: PUSH
55269: LD_INT 2
55271: NEG
55272: PUSH
55273: LD_INT 1
55275: PUSH
55276: EMPTY
55277: LIST
55278: LIST
55279: PUSH
55280: LD_INT 3
55282: NEG
55283: PUSH
55284: LD_INT 0
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: PUSH
55291: LD_INT 3
55293: NEG
55294: PUSH
55295: LD_INT 1
55297: NEG
55298: PUSH
55299: EMPTY
55300: LIST
55301: LIST
55302: PUSH
55303: EMPTY
55304: LIST
55305: LIST
55306: LIST
55307: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
55308: LD_ADDR_VAR 0 58
55312: PUSH
55313: LD_INT 2
55315: NEG
55316: PUSH
55317: LD_INT 3
55319: NEG
55320: PUSH
55321: EMPTY
55322: LIST
55323: LIST
55324: PUSH
55325: LD_INT 3
55327: NEG
55328: PUSH
55329: LD_INT 2
55331: NEG
55332: PUSH
55333: EMPTY
55334: LIST
55335: LIST
55336: PUSH
55337: LD_INT 3
55339: NEG
55340: PUSH
55341: LD_INT 3
55343: NEG
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: PUSH
55349: EMPTY
55350: LIST
55351: LIST
55352: LIST
55353: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
55354: LD_ADDR_VAR 0 59
55358: PUSH
55359: LD_INT 1
55361: NEG
55362: PUSH
55363: LD_INT 2
55365: NEG
55366: PUSH
55367: EMPTY
55368: LIST
55369: LIST
55370: PUSH
55371: LD_INT 0
55373: PUSH
55374: LD_INT 2
55376: NEG
55377: PUSH
55378: EMPTY
55379: LIST
55380: LIST
55381: PUSH
55382: LD_INT 1
55384: PUSH
55385: LD_INT 1
55387: NEG
55388: PUSH
55389: EMPTY
55390: LIST
55391: LIST
55392: PUSH
55393: EMPTY
55394: LIST
55395: LIST
55396: LIST
55397: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
55398: LD_ADDR_VAR 0 60
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: LD_INT 1
55408: NEG
55409: PUSH
55410: EMPTY
55411: LIST
55412: LIST
55413: PUSH
55414: LD_INT 2
55416: PUSH
55417: LD_INT 0
55419: PUSH
55420: EMPTY
55421: LIST
55422: LIST
55423: PUSH
55424: LD_INT 2
55426: PUSH
55427: LD_INT 1
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: EMPTY
55435: LIST
55436: LIST
55437: LIST
55438: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
55439: LD_ADDR_VAR 0 61
55443: PUSH
55444: LD_INT 2
55446: PUSH
55447: LD_INT 1
55449: PUSH
55450: EMPTY
55451: LIST
55452: LIST
55453: PUSH
55454: LD_INT 2
55456: PUSH
55457: LD_INT 2
55459: PUSH
55460: EMPTY
55461: LIST
55462: LIST
55463: PUSH
55464: LD_INT 1
55466: PUSH
55467: LD_INT 2
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: PUSH
55474: EMPTY
55475: LIST
55476: LIST
55477: LIST
55478: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
55479: LD_ADDR_VAR 0 62
55483: PUSH
55484: LD_INT 1
55486: PUSH
55487: LD_INT 2
55489: PUSH
55490: EMPTY
55491: LIST
55492: LIST
55493: PUSH
55494: LD_INT 0
55496: PUSH
55497: LD_INT 2
55499: PUSH
55500: EMPTY
55501: LIST
55502: LIST
55503: PUSH
55504: LD_INT 1
55506: NEG
55507: PUSH
55508: LD_INT 1
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: LIST
55519: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
55520: LD_ADDR_VAR 0 63
55524: PUSH
55525: LD_INT 1
55527: NEG
55528: PUSH
55529: LD_INT 1
55531: PUSH
55532: EMPTY
55533: LIST
55534: LIST
55535: PUSH
55536: LD_INT 2
55538: NEG
55539: PUSH
55540: LD_INT 0
55542: PUSH
55543: EMPTY
55544: LIST
55545: LIST
55546: PUSH
55547: LD_INT 2
55549: NEG
55550: PUSH
55551: LD_INT 1
55553: NEG
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: EMPTY
55560: LIST
55561: LIST
55562: LIST
55563: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
55564: LD_ADDR_VAR 0 64
55568: PUSH
55569: LD_INT 1
55571: NEG
55572: PUSH
55573: LD_INT 2
55575: NEG
55576: PUSH
55577: EMPTY
55578: LIST
55579: LIST
55580: PUSH
55581: LD_INT 2
55583: NEG
55584: PUSH
55585: LD_INT 1
55587: NEG
55588: PUSH
55589: EMPTY
55590: LIST
55591: LIST
55592: PUSH
55593: LD_INT 2
55595: NEG
55596: PUSH
55597: LD_INT 2
55599: NEG
55600: PUSH
55601: EMPTY
55602: LIST
55603: LIST
55604: PUSH
55605: EMPTY
55606: LIST
55607: LIST
55608: LIST
55609: ST_TO_ADDR
// end ; 2 :
55610: GO 58876
55612: LD_INT 2
55614: DOUBLE
55615: EQUAL
55616: IFTRUE 55620
55618: GO 58875
55620: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
55621: LD_ADDR_VAR 0 29
55625: PUSH
55626: LD_INT 4
55628: PUSH
55629: LD_INT 0
55631: PUSH
55632: EMPTY
55633: LIST
55634: LIST
55635: PUSH
55636: LD_INT 4
55638: PUSH
55639: LD_INT 1
55641: NEG
55642: PUSH
55643: EMPTY
55644: LIST
55645: LIST
55646: PUSH
55647: LD_INT 5
55649: PUSH
55650: LD_INT 0
55652: PUSH
55653: EMPTY
55654: LIST
55655: LIST
55656: PUSH
55657: LD_INT 5
55659: PUSH
55660: LD_INT 1
55662: PUSH
55663: EMPTY
55664: LIST
55665: LIST
55666: PUSH
55667: LD_INT 4
55669: PUSH
55670: LD_INT 1
55672: PUSH
55673: EMPTY
55674: LIST
55675: LIST
55676: PUSH
55677: LD_INT 3
55679: PUSH
55680: LD_INT 0
55682: PUSH
55683: EMPTY
55684: LIST
55685: LIST
55686: PUSH
55687: LD_INT 3
55689: PUSH
55690: LD_INT 1
55692: NEG
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: LD_INT 3
55700: PUSH
55701: LD_INT 2
55703: NEG
55704: PUSH
55705: EMPTY
55706: LIST
55707: LIST
55708: PUSH
55709: LD_INT 5
55711: PUSH
55712: LD_INT 2
55714: PUSH
55715: EMPTY
55716: LIST
55717: LIST
55718: PUSH
55719: LD_INT 3
55721: PUSH
55722: LD_INT 3
55724: PUSH
55725: EMPTY
55726: LIST
55727: LIST
55728: PUSH
55729: LD_INT 3
55731: PUSH
55732: LD_INT 2
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: PUSH
55739: LD_INT 4
55741: PUSH
55742: LD_INT 3
55744: PUSH
55745: EMPTY
55746: LIST
55747: LIST
55748: PUSH
55749: LD_INT 4
55751: PUSH
55752: LD_INT 4
55754: PUSH
55755: EMPTY
55756: LIST
55757: LIST
55758: PUSH
55759: LD_INT 3
55761: PUSH
55762: LD_INT 4
55764: PUSH
55765: EMPTY
55766: LIST
55767: LIST
55768: PUSH
55769: LD_INT 2
55771: PUSH
55772: LD_INT 3
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 2
55781: PUSH
55782: LD_INT 2
55784: PUSH
55785: EMPTY
55786: LIST
55787: LIST
55788: PUSH
55789: LD_INT 4
55791: PUSH
55792: LD_INT 2
55794: PUSH
55795: EMPTY
55796: LIST
55797: LIST
55798: PUSH
55799: LD_INT 2
55801: PUSH
55802: LD_INT 4
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: PUSH
55809: LD_INT 0
55811: PUSH
55812: LD_INT 4
55814: PUSH
55815: EMPTY
55816: LIST
55817: LIST
55818: PUSH
55819: LD_INT 0
55821: PUSH
55822: LD_INT 3
55824: PUSH
55825: EMPTY
55826: LIST
55827: LIST
55828: PUSH
55829: LD_INT 1
55831: PUSH
55832: LD_INT 4
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: PUSH
55839: LD_INT 1
55841: PUSH
55842: LD_INT 5
55844: PUSH
55845: EMPTY
55846: LIST
55847: LIST
55848: PUSH
55849: LD_INT 0
55851: PUSH
55852: LD_INT 5
55854: PUSH
55855: EMPTY
55856: LIST
55857: LIST
55858: PUSH
55859: LD_INT 1
55861: NEG
55862: PUSH
55863: LD_INT 4
55865: PUSH
55866: EMPTY
55867: LIST
55868: LIST
55869: PUSH
55870: LD_INT 1
55872: NEG
55873: PUSH
55874: LD_INT 3
55876: PUSH
55877: EMPTY
55878: LIST
55879: LIST
55880: PUSH
55881: LD_INT 2
55883: PUSH
55884: LD_INT 5
55886: PUSH
55887: EMPTY
55888: LIST
55889: LIST
55890: PUSH
55891: LD_INT 2
55893: NEG
55894: PUSH
55895: LD_INT 3
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: PUSH
55902: LD_INT 3
55904: NEG
55905: PUSH
55906: LD_INT 0
55908: PUSH
55909: EMPTY
55910: LIST
55911: LIST
55912: PUSH
55913: LD_INT 3
55915: NEG
55916: PUSH
55917: LD_INT 1
55919: NEG
55920: PUSH
55921: EMPTY
55922: LIST
55923: LIST
55924: PUSH
55925: LD_INT 2
55927: NEG
55928: PUSH
55929: LD_INT 0
55931: PUSH
55932: EMPTY
55933: LIST
55934: LIST
55935: PUSH
55936: LD_INT 2
55938: NEG
55939: PUSH
55940: LD_INT 1
55942: PUSH
55943: EMPTY
55944: LIST
55945: LIST
55946: PUSH
55947: LD_INT 3
55949: NEG
55950: PUSH
55951: LD_INT 1
55953: PUSH
55954: EMPTY
55955: LIST
55956: LIST
55957: PUSH
55958: LD_INT 4
55960: NEG
55961: PUSH
55962: LD_INT 0
55964: PUSH
55965: EMPTY
55966: LIST
55967: LIST
55968: PUSH
55969: LD_INT 4
55971: NEG
55972: PUSH
55973: LD_INT 1
55975: NEG
55976: PUSH
55977: EMPTY
55978: LIST
55979: LIST
55980: PUSH
55981: LD_INT 4
55983: NEG
55984: PUSH
55985: LD_INT 2
55987: NEG
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 2
55995: NEG
55996: PUSH
55997: LD_INT 2
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: PUSH
56004: LD_INT 4
56006: NEG
56007: PUSH
56008: LD_INT 4
56010: NEG
56011: PUSH
56012: EMPTY
56013: LIST
56014: LIST
56015: PUSH
56016: LD_INT 4
56018: NEG
56019: PUSH
56020: LD_INT 5
56022: NEG
56023: PUSH
56024: EMPTY
56025: LIST
56026: LIST
56027: PUSH
56028: LD_INT 3
56030: NEG
56031: PUSH
56032: LD_INT 4
56034: NEG
56035: PUSH
56036: EMPTY
56037: LIST
56038: LIST
56039: PUSH
56040: LD_INT 3
56042: NEG
56043: PUSH
56044: LD_INT 3
56046: NEG
56047: PUSH
56048: EMPTY
56049: LIST
56050: LIST
56051: PUSH
56052: LD_INT 4
56054: NEG
56055: PUSH
56056: LD_INT 3
56058: NEG
56059: PUSH
56060: EMPTY
56061: LIST
56062: LIST
56063: PUSH
56064: LD_INT 5
56066: NEG
56067: PUSH
56068: LD_INT 4
56070: NEG
56071: PUSH
56072: EMPTY
56073: LIST
56074: LIST
56075: PUSH
56076: LD_INT 5
56078: NEG
56079: PUSH
56080: LD_INT 5
56082: NEG
56083: PUSH
56084: EMPTY
56085: LIST
56086: LIST
56087: PUSH
56088: LD_INT 3
56090: NEG
56091: PUSH
56092: LD_INT 5
56094: NEG
56095: PUSH
56096: EMPTY
56097: LIST
56098: LIST
56099: PUSH
56100: LD_INT 5
56102: NEG
56103: PUSH
56104: LD_INT 3
56106: NEG
56107: PUSH
56108: EMPTY
56109: LIST
56110: LIST
56111: PUSH
56112: EMPTY
56113: LIST
56114: LIST
56115: LIST
56116: LIST
56117: LIST
56118: LIST
56119: LIST
56120: LIST
56121: LIST
56122: LIST
56123: LIST
56124: LIST
56125: LIST
56126: LIST
56127: LIST
56128: LIST
56129: LIST
56130: LIST
56131: LIST
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: LIST
56138: LIST
56139: LIST
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
56159: LD_ADDR_VAR 0 30
56163: PUSH
56164: LD_INT 4
56166: PUSH
56167: LD_INT 4
56169: PUSH
56170: EMPTY
56171: LIST
56172: LIST
56173: PUSH
56174: LD_INT 4
56176: PUSH
56177: LD_INT 3
56179: PUSH
56180: EMPTY
56181: LIST
56182: LIST
56183: PUSH
56184: LD_INT 5
56186: PUSH
56187: LD_INT 4
56189: PUSH
56190: EMPTY
56191: LIST
56192: LIST
56193: PUSH
56194: LD_INT 5
56196: PUSH
56197: LD_INT 5
56199: PUSH
56200: EMPTY
56201: LIST
56202: LIST
56203: PUSH
56204: LD_INT 4
56206: PUSH
56207: LD_INT 5
56209: PUSH
56210: EMPTY
56211: LIST
56212: LIST
56213: PUSH
56214: LD_INT 3
56216: PUSH
56217: LD_INT 4
56219: PUSH
56220: EMPTY
56221: LIST
56222: LIST
56223: PUSH
56224: LD_INT 3
56226: PUSH
56227: LD_INT 3
56229: PUSH
56230: EMPTY
56231: LIST
56232: LIST
56233: PUSH
56234: LD_INT 5
56236: PUSH
56237: LD_INT 3
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: PUSH
56244: LD_INT 3
56246: PUSH
56247: LD_INT 5
56249: PUSH
56250: EMPTY
56251: LIST
56252: LIST
56253: PUSH
56254: LD_INT 0
56256: PUSH
56257: LD_INT 3
56259: PUSH
56260: EMPTY
56261: LIST
56262: LIST
56263: PUSH
56264: LD_INT 0
56266: PUSH
56267: LD_INT 2
56269: PUSH
56270: EMPTY
56271: LIST
56272: LIST
56273: PUSH
56274: LD_INT 1
56276: PUSH
56277: LD_INT 3
56279: PUSH
56280: EMPTY
56281: LIST
56282: LIST
56283: PUSH
56284: LD_INT 1
56286: PUSH
56287: LD_INT 4
56289: PUSH
56290: EMPTY
56291: LIST
56292: LIST
56293: PUSH
56294: LD_INT 0
56296: PUSH
56297: LD_INT 4
56299: PUSH
56300: EMPTY
56301: LIST
56302: LIST
56303: PUSH
56304: LD_INT 1
56306: NEG
56307: PUSH
56308: LD_INT 3
56310: PUSH
56311: EMPTY
56312: LIST
56313: LIST
56314: PUSH
56315: LD_INT 1
56317: NEG
56318: PUSH
56319: LD_INT 2
56321: PUSH
56322: EMPTY
56323: LIST
56324: LIST
56325: PUSH
56326: LD_INT 2
56328: PUSH
56329: LD_INT 4
56331: PUSH
56332: EMPTY
56333: LIST
56334: LIST
56335: PUSH
56336: LD_INT 2
56338: NEG
56339: PUSH
56340: LD_INT 2
56342: PUSH
56343: EMPTY
56344: LIST
56345: LIST
56346: PUSH
56347: LD_INT 4
56349: NEG
56350: PUSH
56351: LD_INT 0
56353: PUSH
56354: EMPTY
56355: LIST
56356: LIST
56357: PUSH
56358: LD_INT 4
56360: NEG
56361: PUSH
56362: LD_INT 1
56364: NEG
56365: PUSH
56366: EMPTY
56367: LIST
56368: LIST
56369: PUSH
56370: LD_INT 3
56372: NEG
56373: PUSH
56374: LD_INT 0
56376: PUSH
56377: EMPTY
56378: LIST
56379: LIST
56380: PUSH
56381: LD_INT 3
56383: NEG
56384: PUSH
56385: LD_INT 1
56387: PUSH
56388: EMPTY
56389: LIST
56390: LIST
56391: PUSH
56392: LD_INT 4
56394: NEG
56395: PUSH
56396: LD_INT 1
56398: PUSH
56399: EMPTY
56400: LIST
56401: LIST
56402: PUSH
56403: LD_INT 5
56405: NEG
56406: PUSH
56407: LD_INT 0
56409: PUSH
56410: EMPTY
56411: LIST
56412: LIST
56413: PUSH
56414: LD_INT 5
56416: NEG
56417: PUSH
56418: LD_INT 1
56420: NEG
56421: PUSH
56422: EMPTY
56423: LIST
56424: LIST
56425: PUSH
56426: LD_INT 5
56428: NEG
56429: PUSH
56430: LD_INT 2
56432: NEG
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 3
56440: NEG
56441: PUSH
56442: LD_INT 2
56444: PUSH
56445: EMPTY
56446: LIST
56447: LIST
56448: PUSH
56449: LD_INT 3
56451: NEG
56452: PUSH
56453: LD_INT 3
56455: NEG
56456: PUSH
56457: EMPTY
56458: LIST
56459: LIST
56460: PUSH
56461: LD_INT 3
56463: NEG
56464: PUSH
56465: LD_INT 4
56467: NEG
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: LD_INT 2
56475: NEG
56476: PUSH
56477: LD_INT 3
56479: NEG
56480: PUSH
56481: EMPTY
56482: LIST
56483: LIST
56484: PUSH
56485: LD_INT 2
56487: NEG
56488: PUSH
56489: LD_INT 2
56491: NEG
56492: PUSH
56493: EMPTY
56494: LIST
56495: LIST
56496: PUSH
56497: LD_INT 3
56499: NEG
56500: PUSH
56501: LD_INT 2
56503: NEG
56504: PUSH
56505: EMPTY
56506: LIST
56507: LIST
56508: PUSH
56509: LD_INT 4
56511: NEG
56512: PUSH
56513: LD_INT 3
56515: NEG
56516: PUSH
56517: EMPTY
56518: LIST
56519: LIST
56520: PUSH
56521: LD_INT 4
56523: NEG
56524: PUSH
56525: LD_INT 4
56527: NEG
56528: PUSH
56529: EMPTY
56530: LIST
56531: LIST
56532: PUSH
56533: LD_INT 2
56535: NEG
56536: PUSH
56537: LD_INT 4
56539: NEG
56540: PUSH
56541: EMPTY
56542: LIST
56543: LIST
56544: PUSH
56545: LD_INT 4
56547: NEG
56548: PUSH
56549: LD_INT 2
56551: NEG
56552: PUSH
56553: EMPTY
56554: LIST
56555: LIST
56556: PUSH
56557: LD_INT 0
56559: PUSH
56560: LD_INT 4
56562: NEG
56563: PUSH
56564: EMPTY
56565: LIST
56566: LIST
56567: PUSH
56568: LD_INT 0
56570: PUSH
56571: LD_INT 5
56573: NEG
56574: PUSH
56575: EMPTY
56576: LIST
56577: LIST
56578: PUSH
56579: LD_INT 1
56581: PUSH
56582: LD_INT 4
56584: NEG
56585: PUSH
56586: EMPTY
56587: LIST
56588: LIST
56589: PUSH
56590: LD_INT 1
56592: PUSH
56593: LD_INT 3
56595: NEG
56596: PUSH
56597: EMPTY
56598: LIST
56599: LIST
56600: PUSH
56601: LD_INT 0
56603: PUSH
56604: LD_INT 3
56606: NEG
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 1
56614: NEG
56615: PUSH
56616: LD_INT 4
56618: NEG
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: LD_INT 1
56626: NEG
56627: PUSH
56628: LD_INT 5
56630: NEG
56631: PUSH
56632: EMPTY
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 2
56638: PUSH
56639: LD_INT 3
56641: NEG
56642: PUSH
56643: EMPTY
56644: LIST
56645: LIST
56646: PUSH
56647: LD_INT 2
56649: NEG
56650: PUSH
56651: LD_INT 5
56653: NEG
56654: PUSH
56655: EMPTY
56656: LIST
56657: LIST
56658: PUSH
56659: EMPTY
56660: LIST
56661: LIST
56662: LIST
56663: LIST
56664: LIST
56665: LIST
56666: LIST
56667: LIST
56668: LIST
56669: LIST
56670: LIST
56671: LIST
56672: LIST
56673: LIST
56674: LIST
56675: LIST
56676: LIST
56677: LIST
56678: LIST
56679: LIST
56680: LIST
56681: LIST
56682: LIST
56683: LIST
56684: LIST
56685: LIST
56686: LIST
56687: LIST
56688: LIST
56689: LIST
56690: LIST
56691: LIST
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: LIST
56697: LIST
56698: LIST
56699: LIST
56700: LIST
56701: LIST
56702: LIST
56703: LIST
56704: LIST
56705: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
56706: LD_ADDR_VAR 0 31
56710: PUSH
56711: LD_INT 0
56713: PUSH
56714: LD_INT 4
56716: PUSH
56717: EMPTY
56718: LIST
56719: LIST
56720: PUSH
56721: LD_INT 0
56723: PUSH
56724: LD_INT 3
56726: PUSH
56727: EMPTY
56728: LIST
56729: LIST
56730: PUSH
56731: LD_INT 1
56733: PUSH
56734: LD_INT 4
56736: PUSH
56737: EMPTY
56738: LIST
56739: LIST
56740: PUSH
56741: LD_INT 1
56743: PUSH
56744: LD_INT 5
56746: PUSH
56747: EMPTY
56748: LIST
56749: LIST
56750: PUSH
56751: LD_INT 0
56753: PUSH
56754: LD_INT 5
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: PUSH
56761: LD_INT 1
56763: NEG
56764: PUSH
56765: LD_INT 4
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: PUSH
56772: LD_INT 1
56774: NEG
56775: PUSH
56776: LD_INT 3
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: PUSH
56783: LD_INT 2
56785: PUSH
56786: LD_INT 5
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: PUSH
56793: LD_INT 2
56795: NEG
56796: PUSH
56797: LD_INT 3
56799: PUSH
56800: EMPTY
56801: LIST
56802: LIST
56803: PUSH
56804: LD_INT 3
56806: NEG
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: PUSH
56815: LD_INT 3
56817: NEG
56818: PUSH
56819: LD_INT 1
56821: NEG
56822: PUSH
56823: EMPTY
56824: LIST
56825: LIST
56826: PUSH
56827: LD_INT 2
56829: NEG
56830: PUSH
56831: LD_INT 0
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: PUSH
56838: LD_INT 2
56840: NEG
56841: PUSH
56842: LD_INT 1
56844: PUSH
56845: EMPTY
56846: LIST
56847: LIST
56848: PUSH
56849: LD_INT 3
56851: NEG
56852: PUSH
56853: LD_INT 1
56855: PUSH
56856: EMPTY
56857: LIST
56858: LIST
56859: PUSH
56860: LD_INT 4
56862: NEG
56863: PUSH
56864: LD_INT 0
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: LD_INT 4
56873: NEG
56874: PUSH
56875: LD_INT 1
56877: NEG
56878: PUSH
56879: EMPTY
56880: LIST
56881: LIST
56882: PUSH
56883: LD_INT 4
56885: NEG
56886: PUSH
56887: LD_INT 2
56889: NEG
56890: PUSH
56891: EMPTY
56892: LIST
56893: LIST
56894: PUSH
56895: LD_INT 2
56897: NEG
56898: PUSH
56899: LD_INT 2
56901: PUSH
56902: EMPTY
56903: LIST
56904: LIST
56905: PUSH
56906: LD_INT 4
56908: NEG
56909: PUSH
56910: LD_INT 4
56912: NEG
56913: PUSH
56914: EMPTY
56915: LIST
56916: LIST
56917: PUSH
56918: LD_INT 4
56920: NEG
56921: PUSH
56922: LD_INT 5
56924: NEG
56925: PUSH
56926: EMPTY
56927: LIST
56928: LIST
56929: PUSH
56930: LD_INT 3
56932: NEG
56933: PUSH
56934: LD_INT 4
56936: NEG
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: PUSH
56942: LD_INT 3
56944: NEG
56945: PUSH
56946: LD_INT 3
56948: NEG
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PUSH
56954: LD_INT 4
56956: NEG
56957: PUSH
56958: LD_INT 3
56960: NEG
56961: PUSH
56962: EMPTY
56963: LIST
56964: LIST
56965: PUSH
56966: LD_INT 5
56968: NEG
56969: PUSH
56970: LD_INT 4
56972: NEG
56973: PUSH
56974: EMPTY
56975: LIST
56976: LIST
56977: PUSH
56978: LD_INT 5
56980: NEG
56981: PUSH
56982: LD_INT 5
56984: NEG
56985: PUSH
56986: EMPTY
56987: LIST
56988: LIST
56989: PUSH
56990: LD_INT 3
56992: NEG
56993: PUSH
56994: LD_INT 5
56996: NEG
56997: PUSH
56998: EMPTY
56999: LIST
57000: LIST
57001: PUSH
57002: LD_INT 5
57004: NEG
57005: PUSH
57006: LD_INT 3
57008: NEG
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: PUSH
57014: LD_INT 0
57016: PUSH
57017: LD_INT 3
57019: NEG
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PUSH
57025: LD_INT 0
57027: PUSH
57028: LD_INT 4
57030: NEG
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: PUSH
57036: LD_INT 1
57038: PUSH
57039: LD_INT 3
57041: NEG
57042: PUSH
57043: EMPTY
57044: LIST
57045: LIST
57046: PUSH
57047: LD_INT 1
57049: PUSH
57050: LD_INT 2
57052: NEG
57053: PUSH
57054: EMPTY
57055: LIST
57056: LIST
57057: PUSH
57058: LD_INT 0
57060: PUSH
57061: LD_INT 2
57063: NEG
57064: PUSH
57065: EMPTY
57066: LIST
57067: LIST
57068: PUSH
57069: LD_INT 1
57071: NEG
57072: PUSH
57073: LD_INT 3
57075: NEG
57076: PUSH
57077: EMPTY
57078: LIST
57079: LIST
57080: PUSH
57081: LD_INT 1
57083: NEG
57084: PUSH
57085: LD_INT 4
57087: NEG
57088: PUSH
57089: EMPTY
57090: LIST
57091: LIST
57092: PUSH
57093: LD_INT 2
57095: PUSH
57096: LD_INT 2
57098: NEG
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 2
57106: NEG
57107: PUSH
57108: LD_INT 4
57110: NEG
57111: PUSH
57112: EMPTY
57113: LIST
57114: LIST
57115: PUSH
57116: LD_INT 4
57118: PUSH
57119: LD_INT 0
57121: PUSH
57122: EMPTY
57123: LIST
57124: LIST
57125: PUSH
57126: LD_INT 4
57128: PUSH
57129: LD_INT 1
57131: NEG
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: PUSH
57137: LD_INT 5
57139: PUSH
57140: LD_INT 0
57142: PUSH
57143: EMPTY
57144: LIST
57145: LIST
57146: PUSH
57147: LD_INT 5
57149: PUSH
57150: LD_INT 1
57152: PUSH
57153: EMPTY
57154: LIST
57155: LIST
57156: PUSH
57157: LD_INT 4
57159: PUSH
57160: LD_INT 1
57162: PUSH
57163: EMPTY
57164: LIST
57165: LIST
57166: PUSH
57167: LD_INT 3
57169: PUSH
57170: LD_INT 0
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: PUSH
57177: LD_INT 3
57179: PUSH
57180: LD_INT 1
57182: NEG
57183: PUSH
57184: EMPTY
57185: LIST
57186: LIST
57187: PUSH
57188: LD_INT 3
57190: PUSH
57191: LD_INT 2
57193: NEG
57194: PUSH
57195: EMPTY
57196: LIST
57197: LIST
57198: PUSH
57199: LD_INT 5
57201: PUSH
57202: LD_INT 2
57204: PUSH
57205: EMPTY
57206: LIST
57207: LIST
57208: PUSH
57209: EMPTY
57210: LIST
57211: LIST
57212: LIST
57213: LIST
57214: LIST
57215: LIST
57216: LIST
57217: LIST
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: LIST
57223: LIST
57224: LIST
57225: LIST
57226: LIST
57227: LIST
57228: LIST
57229: LIST
57230: LIST
57231: LIST
57232: LIST
57233: LIST
57234: LIST
57235: LIST
57236: LIST
57237: LIST
57238: LIST
57239: LIST
57240: LIST
57241: LIST
57242: LIST
57243: LIST
57244: LIST
57245: LIST
57246: LIST
57247: LIST
57248: LIST
57249: LIST
57250: LIST
57251: LIST
57252: LIST
57253: LIST
57254: LIST
57255: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
57256: LD_ADDR_VAR 0 32
57260: PUSH
57261: LD_INT 4
57263: NEG
57264: PUSH
57265: LD_INT 0
57267: PUSH
57268: EMPTY
57269: LIST
57270: LIST
57271: PUSH
57272: LD_INT 4
57274: NEG
57275: PUSH
57276: LD_INT 1
57278: NEG
57279: PUSH
57280: EMPTY
57281: LIST
57282: LIST
57283: PUSH
57284: LD_INT 3
57286: NEG
57287: PUSH
57288: LD_INT 0
57290: PUSH
57291: EMPTY
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 3
57297: NEG
57298: PUSH
57299: LD_INT 1
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: PUSH
57306: LD_INT 4
57308: NEG
57309: PUSH
57310: LD_INT 1
57312: PUSH
57313: EMPTY
57314: LIST
57315: LIST
57316: PUSH
57317: LD_INT 5
57319: NEG
57320: PUSH
57321: LD_INT 0
57323: PUSH
57324: EMPTY
57325: LIST
57326: LIST
57327: PUSH
57328: LD_INT 5
57330: NEG
57331: PUSH
57332: LD_INT 1
57334: NEG
57335: PUSH
57336: EMPTY
57337: LIST
57338: LIST
57339: PUSH
57340: LD_INT 5
57342: NEG
57343: PUSH
57344: LD_INT 2
57346: NEG
57347: PUSH
57348: EMPTY
57349: LIST
57350: LIST
57351: PUSH
57352: LD_INT 3
57354: NEG
57355: PUSH
57356: LD_INT 2
57358: PUSH
57359: EMPTY
57360: LIST
57361: LIST
57362: PUSH
57363: LD_INT 3
57365: NEG
57366: PUSH
57367: LD_INT 3
57369: NEG
57370: PUSH
57371: EMPTY
57372: LIST
57373: LIST
57374: PUSH
57375: LD_INT 3
57377: NEG
57378: PUSH
57379: LD_INT 4
57381: NEG
57382: PUSH
57383: EMPTY
57384: LIST
57385: LIST
57386: PUSH
57387: LD_INT 2
57389: NEG
57390: PUSH
57391: LD_INT 3
57393: NEG
57394: PUSH
57395: EMPTY
57396: LIST
57397: LIST
57398: PUSH
57399: LD_INT 2
57401: NEG
57402: PUSH
57403: LD_INT 2
57405: NEG
57406: PUSH
57407: EMPTY
57408: LIST
57409: LIST
57410: PUSH
57411: LD_INT 3
57413: NEG
57414: PUSH
57415: LD_INT 2
57417: NEG
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: PUSH
57423: LD_INT 4
57425: NEG
57426: PUSH
57427: LD_INT 3
57429: NEG
57430: PUSH
57431: EMPTY
57432: LIST
57433: LIST
57434: PUSH
57435: LD_INT 4
57437: NEG
57438: PUSH
57439: LD_INT 4
57441: NEG
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: PUSH
57447: LD_INT 2
57449: NEG
57450: PUSH
57451: LD_INT 4
57453: NEG
57454: PUSH
57455: EMPTY
57456: LIST
57457: LIST
57458: PUSH
57459: LD_INT 4
57461: NEG
57462: PUSH
57463: LD_INT 2
57465: NEG
57466: PUSH
57467: EMPTY
57468: LIST
57469: LIST
57470: PUSH
57471: LD_INT 0
57473: PUSH
57474: LD_INT 4
57476: NEG
57477: PUSH
57478: EMPTY
57479: LIST
57480: LIST
57481: PUSH
57482: LD_INT 0
57484: PUSH
57485: LD_INT 5
57487: NEG
57488: PUSH
57489: EMPTY
57490: LIST
57491: LIST
57492: PUSH
57493: LD_INT 1
57495: PUSH
57496: LD_INT 4
57498: NEG
57499: PUSH
57500: EMPTY
57501: LIST
57502: LIST
57503: PUSH
57504: LD_INT 1
57506: PUSH
57507: LD_INT 3
57509: NEG
57510: PUSH
57511: EMPTY
57512: LIST
57513: LIST
57514: PUSH
57515: LD_INT 0
57517: PUSH
57518: LD_INT 3
57520: NEG
57521: PUSH
57522: EMPTY
57523: LIST
57524: LIST
57525: PUSH
57526: LD_INT 1
57528: NEG
57529: PUSH
57530: LD_INT 4
57532: NEG
57533: PUSH
57534: EMPTY
57535: LIST
57536: LIST
57537: PUSH
57538: LD_INT 1
57540: NEG
57541: PUSH
57542: LD_INT 5
57544: NEG
57545: PUSH
57546: EMPTY
57547: LIST
57548: LIST
57549: PUSH
57550: LD_INT 2
57552: PUSH
57553: LD_INT 3
57555: NEG
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PUSH
57561: LD_INT 2
57563: NEG
57564: PUSH
57565: LD_INT 5
57567: NEG
57568: PUSH
57569: EMPTY
57570: LIST
57571: LIST
57572: PUSH
57573: LD_INT 3
57575: PUSH
57576: LD_INT 0
57578: PUSH
57579: EMPTY
57580: LIST
57581: LIST
57582: PUSH
57583: LD_INT 3
57585: PUSH
57586: LD_INT 1
57588: NEG
57589: PUSH
57590: EMPTY
57591: LIST
57592: LIST
57593: PUSH
57594: LD_INT 4
57596: PUSH
57597: LD_INT 0
57599: PUSH
57600: EMPTY
57601: LIST
57602: LIST
57603: PUSH
57604: LD_INT 4
57606: PUSH
57607: LD_INT 1
57609: PUSH
57610: EMPTY
57611: LIST
57612: LIST
57613: PUSH
57614: LD_INT 3
57616: PUSH
57617: LD_INT 1
57619: PUSH
57620: EMPTY
57621: LIST
57622: LIST
57623: PUSH
57624: LD_INT 2
57626: PUSH
57627: LD_INT 0
57629: PUSH
57630: EMPTY
57631: LIST
57632: LIST
57633: PUSH
57634: LD_INT 2
57636: PUSH
57637: LD_INT 1
57639: NEG
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: PUSH
57645: LD_INT 2
57647: PUSH
57648: LD_INT 2
57650: NEG
57651: PUSH
57652: EMPTY
57653: LIST
57654: LIST
57655: PUSH
57656: LD_INT 4
57658: PUSH
57659: LD_INT 2
57661: PUSH
57662: EMPTY
57663: LIST
57664: LIST
57665: PUSH
57666: LD_INT 4
57668: PUSH
57669: LD_INT 4
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: PUSH
57676: LD_INT 4
57678: PUSH
57679: LD_INT 3
57681: PUSH
57682: EMPTY
57683: LIST
57684: LIST
57685: PUSH
57686: LD_INT 5
57688: PUSH
57689: LD_INT 4
57691: PUSH
57692: EMPTY
57693: LIST
57694: LIST
57695: PUSH
57696: LD_INT 5
57698: PUSH
57699: LD_INT 5
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: PUSH
57706: LD_INT 4
57708: PUSH
57709: LD_INT 5
57711: PUSH
57712: EMPTY
57713: LIST
57714: LIST
57715: PUSH
57716: LD_INT 3
57718: PUSH
57719: LD_INT 4
57721: PUSH
57722: EMPTY
57723: LIST
57724: LIST
57725: PUSH
57726: LD_INT 3
57728: PUSH
57729: LD_INT 3
57731: PUSH
57732: EMPTY
57733: LIST
57734: LIST
57735: PUSH
57736: LD_INT 5
57738: PUSH
57739: LD_INT 3
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: PUSH
57746: LD_INT 3
57748: PUSH
57749: LD_INT 5
57751: PUSH
57752: EMPTY
57753: LIST
57754: LIST
57755: PUSH
57756: EMPTY
57757: LIST
57758: LIST
57759: LIST
57760: LIST
57761: LIST
57762: LIST
57763: LIST
57764: LIST
57765: LIST
57766: LIST
57767: LIST
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: LIST
57779: LIST
57780: LIST
57781: LIST
57782: LIST
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: LIST
57796: LIST
57797: LIST
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
57803: LD_ADDR_VAR 0 33
57807: PUSH
57808: LD_INT 4
57810: NEG
57811: PUSH
57812: LD_INT 4
57814: NEG
57815: PUSH
57816: EMPTY
57817: LIST
57818: LIST
57819: PUSH
57820: LD_INT 4
57822: NEG
57823: PUSH
57824: LD_INT 5
57826: NEG
57827: PUSH
57828: EMPTY
57829: LIST
57830: LIST
57831: PUSH
57832: LD_INT 3
57834: NEG
57835: PUSH
57836: LD_INT 4
57838: NEG
57839: PUSH
57840: EMPTY
57841: LIST
57842: LIST
57843: PUSH
57844: LD_INT 3
57846: NEG
57847: PUSH
57848: LD_INT 3
57850: NEG
57851: PUSH
57852: EMPTY
57853: LIST
57854: LIST
57855: PUSH
57856: LD_INT 4
57858: NEG
57859: PUSH
57860: LD_INT 3
57862: NEG
57863: PUSH
57864: EMPTY
57865: LIST
57866: LIST
57867: PUSH
57868: LD_INT 5
57870: NEG
57871: PUSH
57872: LD_INT 4
57874: NEG
57875: PUSH
57876: EMPTY
57877: LIST
57878: LIST
57879: PUSH
57880: LD_INT 5
57882: NEG
57883: PUSH
57884: LD_INT 5
57886: NEG
57887: PUSH
57888: EMPTY
57889: LIST
57890: LIST
57891: PUSH
57892: LD_INT 3
57894: NEG
57895: PUSH
57896: LD_INT 5
57898: NEG
57899: PUSH
57900: EMPTY
57901: LIST
57902: LIST
57903: PUSH
57904: LD_INT 5
57906: NEG
57907: PUSH
57908: LD_INT 3
57910: NEG
57911: PUSH
57912: EMPTY
57913: LIST
57914: LIST
57915: PUSH
57916: LD_INT 0
57918: PUSH
57919: LD_INT 3
57921: NEG
57922: PUSH
57923: EMPTY
57924: LIST
57925: LIST
57926: PUSH
57927: LD_INT 0
57929: PUSH
57930: LD_INT 4
57932: NEG
57933: PUSH
57934: EMPTY
57935: LIST
57936: LIST
57937: PUSH
57938: LD_INT 1
57940: PUSH
57941: LD_INT 3
57943: NEG
57944: PUSH
57945: EMPTY
57946: LIST
57947: LIST
57948: PUSH
57949: LD_INT 1
57951: PUSH
57952: LD_INT 2
57954: NEG
57955: PUSH
57956: EMPTY
57957: LIST
57958: LIST
57959: PUSH
57960: LD_INT 0
57962: PUSH
57963: LD_INT 2
57965: NEG
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: PUSH
57971: LD_INT 1
57973: NEG
57974: PUSH
57975: LD_INT 3
57977: NEG
57978: PUSH
57979: EMPTY
57980: LIST
57981: LIST
57982: PUSH
57983: LD_INT 1
57985: NEG
57986: PUSH
57987: LD_INT 4
57989: NEG
57990: PUSH
57991: EMPTY
57992: LIST
57993: LIST
57994: PUSH
57995: LD_INT 2
57997: PUSH
57998: LD_INT 2
58000: NEG
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: PUSH
58006: LD_INT 2
58008: NEG
58009: PUSH
58010: LD_INT 4
58012: NEG
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: PUSH
58018: LD_INT 4
58020: PUSH
58021: LD_INT 0
58023: PUSH
58024: EMPTY
58025: LIST
58026: LIST
58027: PUSH
58028: LD_INT 4
58030: PUSH
58031: LD_INT 1
58033: NEG
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: PUSH
58039: LD_INT 5
58041: PUSH
58042: LD_INT 0
58044: PUSH
58045: EMPTY
58046: LIST
58047: LIST
58048: PUSH
58049: LD_INT 5
58051: PUSH
58052: LD_INT 1
58054: PUSH
58055: EMPTY
58056: LIST
58057: LIST
58058: PUSH
58059: LD_INT 4
58061: PUSH
58062: LD_INT 1
58064: PUSH
58065: EMPTY
58066: LIST
58067: LIST
58068: PUSH
58069: LD_INT 3
58071: PUSH
58072: LD_INT 0
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: PUSH
58079: LD_INT 3
58081: PUSH
58082: LD_INT 1
58084: NEG
58085: PUSH
58086: EMPTY
58087: LIST
58088: LIST
58089: PUSH
58090: LD_INT 3
58092: PUSH
58093: LD_INT 2
58095: NEG
58096: PUSH
58097: EMPTY
58098: LIST
58099: LIST
58100: PUSH
58101: LD_INT 5
58103: PUSH
58104: LD_INT 2
58106: PUSH
58107: EMPTY
58108: LIST
58109: LIST
58110: PUSH
58111: LD_INT 3
58113: PUSH
58114: LD_INT 3
58116: PUSH
58117: EMPTY
58118: LIST
58119: LIST
58120: PUSH
58121: LD_INT 3
58123: PUSH
58124: LD_INT 2
58126: PUSH
58127: EMPTY
58128: LIST
58129: LIST
58130: PUSH
58131: LD_INT 4
58133: PUSH
58134: LD_INT 3
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: PUSH
58141: LD_INT 4
58143: PUSH
58144: LD_INT 4
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: PUSH
58151: LD_INT 3
58153: PUSH
58154: LD_INT 4
58156: PUSH
58157: EMPTY
58158: LIST
58159: LIST
58160: PUSH
58161: LD_INT 2
58163: PUSH
58164: LD_INT 3
58166: PUSH
58167: EMPTY
58168: LIST
58169: LIST
58170: PUSH
58171: LD_INT 2
58173: PUSH
58174: LD_INT 2
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: PUSH
58181: LD_INT 4
58183: PUSH
58184: LD_INT 2
58186: PUSH
58187: EMPTY
58188: LIST
58189: LIST
58190: PUSH
58191: LD_INT 2
58193: PUSH
58194: LD_INT 4
58196: PUSH
58197: EMPTY
58198: LIST
58199: LIST
58200: PUSH
58201: LD_INT 0
58203: PUSH
58204: LD_INT 4
58206: PUSH
58207: EMPTY
58208: LIST
58209: LIST
58210: PUSH
58211: LD_INT 0
58213: PUSH
58214: LD_INT 3
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: PUSH
58221: LD_INT 1
58223: PUSH
58224: LD_INT 4
58226: PUSH
58227: EMPTY
58228: LIST
58229: LIST
58230: PUSH
58231: LD_INT 1
58233: PUSH
58234: LD_INT 5
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: PUSH
58241: LD_INT 0
58243: PUSH
58244: LD_INT 5
58246: PUSH
58247: EMPTY
58248: LIST
58249: LIST
58250: PUSH
58251: LD_INT 1
58253: NEG
58254: PUSH
58255: LD_INT 4
58257: PUSH
58258: EMPTY
58259: LIST
58260: LIST
58261: PUSH
58262: LD_INT 1
58264: NEG
58265: PUSH
58266: LD_INT 3
58268: PUSH
58269: EMPTY
58270: LIST
58271: LIST
58272: PUSH
58273: LD_INT 2
58275: PUSH
58276: LD_INT 5
58278: PUSH
58279: EMPTY
58280: LIST
58281: LIST
58282: PUSH
58283: LD_INT 2
58285: NEG
58286: PUSH
58287: LD_INT 3
58289: PUSH
58290: EMPTY
58291: LIST
58292: LIST
58293: PUSH
58294: EMPTY
58295: LIST
58296: LIST
58297: LIST
58298: LIST
58299: LIST
58300: LIST
58301: LIST
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: LIST
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: LIST
58323: LIST
58324: LIST
58325: LIST
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: LIST
58334: LIST
58335: LIST
58336: LIST
58337: LIST
58338: LIST
58339: LIST
58340: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
58341: LD_ADDR_VAR 0 34
58345: PUSH
58346: LD_INT 0
58348: PUSH
58349: LD_INT 4
58351: NEG
58352: PUSH
58353: EMPTY
58354: LIST
58355: LIST
58356: PUSH
58357: LD_INT 0
58359: PUSH
58360: LD_INT 5
58362: NEG
58363: PUSH
58364: EMPTY
58365: LIST
58366: LIST
58367: PUSH
58368: LD_INT 1
58370: PUSH
58371: LD_INT 4
58373: NEG
58374: PUSH
58375: EMPTY
58376: LIST
58377: LIST
58378: PUSH
58379: LD_INT 1
58381: PUSH
58382: LD_INT 3
58384: NEG
58385: PUSH
58386: EMPTY
58387: LIST
58388: LIST
58389: PUSH
58390: LD_INT 0
58392: PUSH
58393: LD_INT 3
58395: NEG
58396: PUSH
58397: EMPTY
58398: LIST
58399: LIST
58400: PUSH
58401: LD_INT 1
58403: NEG
58404: PUSH
58405: LD_INT 4
58407: NEG
58408: PUSH
58409: EMPTY
58410: LIST
58411: LIST
58412: PUSH
58413: LD_INT 1
58415: NEG
58416: PUSH
58417: LD_INT 5
58419: NEG
58420: PUSH
58421: EMPTY
58422: LIST
58423: LIST
58424: PUSH
58425: LD_INT 2
58427: PUSH
58428: LD_INT 3
58430: NEG
58431: PUSH
58432: EMPTY
58433: LIST
58434: LIST
58435: PUSH
58436: LD_INT 2
58438: NEG
58439: PUSH
58440: LD_INT 5
58442: NEG
58443: PUSH
58444: EMPTY
58445: LIST
58446: LIST
58447: PUSH
58448: LD_INT 3
58450: PUSH
58451: LD_INT 0
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 3
58460: PUSH
58461: LD_INT 1
58463: NEG
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: PUSH
58469: LD_INT 4
58471: PUSH
58472: LD_INT 0
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: PUSH
58479: LD_INT 4
58481: PUSH
58482: LD_INT 1
58484: PUSH
58485: EMPTY
58486: LIST
58487: LIST
58488: PUSH
58489: LD_INT 3
58491: PUSH
58492: LD_INT 1
58494: PUSH
58495: EMPTY
58496: LIST
58497: LIST
58498: PUSH
58499: LD_INT 2
58501: PUSH
58502: LD_INT 0
58504: PUSH
58505: EMPTY
58506: LIST
58507: LIST
58508: PUSH
58509: LD_INT 2
58511: PUSH
58512: LD_INT 1
58514: NEG
58515: PUSH
58516: EMPTY
58517: LIST
58518: LIST
58519: PUSH
58520: LD_INT 2
58522: PUSH
58523: LD_INT 2
58525: NEG
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PUSH
58531: LD_INT 4
58533: PUSH
58534: LD_INT 2
58536: PUSH
58537: EMPTY
58538: LIST
58539: LIST
58540: PUSH
58541: LD_INT 4
58543: PUSH
58544: LD_INT 4
58546: PUSH
58547: EMPTY
58548: LIST
58549: LIST
58550: PUSH
58551: LD_INT 4
58553: PUSH
58554: LD_INT 3
58556: PUSH
58557: EMPTY
58558: LIST
58559: LIST
58560: PUSH
58561: LD_INT 5
58563: PUSH
58564: LD_INT 4
58566: PUSH
58567: EMPTY
58568: LIST
58569: LIST
58570: PUSH
58571: LD_INT 5
58573: PUSH
58574: LD_INT 5
58576: PUSH
58577: EMPTY
58578: LIST
58579: LIST
58580: PUSH
58581: LD_INT 4
58583: PUSH
58584: LD_INT 5
58586: PUSH
58587: EMPTY
58588: LIST
58589: LIST
58590: PUSH
58591: LD_INT 3
58593: PUSH
58594: LD_INT 4
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: PUSH
58601: LD_INT 3
58603: PUSH
58604: LD_INT 3
58606: PUSH
58607: EMPTY
58608: LIST
58609: LIST
58610: PUSH
58611: LD_INT 5
58613: PUSH
58614: LD_INT 3
58616: PUSH
58617: EMPTY
58618: LIST
58619: LIST
58620: PUSH
58621: LD_INT 3
58623: PUSH
58624: LD_INT 5
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: PUSH
58631: LD_INT 0
58633: PUSH
58634: LD_INT 3
58636: PUSH
58637: EMPTY
58638: LIST
58639: LIST
58640: PUSH
58641: LD_INT 0
58643: PUSH
58644: LD_INT 2
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: PUSH
58651: LD_INT 1
58653: PUSH
58654: LD_INT 3
58656: PUSH
58657: EMPTY
58658: LIST
58659: LIST
58660: PUSH
58661: LD_INT 1
58663: PUSH
58664: LD_INT 4
58666: PUSH
58667: EMPTY
58668: LIST
58669: LIST
58670: PUSH
58671: LD_INT 0
58673: PUSH
58674: LD_INT 4
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: PUSH
58681: LD_INT 1
58683: NEG
58684: PUSH
58685: LD_INT 3
58687: PUSH
58688: EMPTY
58689: LIST
58690: LIST
58691: PUSH
58692: LD_INT 1
58694: NEG
58695: PUSH
58696: LD_INT 2
58698: PUSH
58699: EMPTY
58700: LIST
58701: LIST
58702: PUSH
58703: LD_INT 2
58705: PUSH
58706: LD_INT 4
58708: PUSH
58709: EMPTY
58710: LIST
58711: LIST
58712: PUSH
58713: LD_INT 2
58715: NEG
58716: PUSH
58717: LD_INT 2
58719: PUSH
58720: EMPTY
58721: LIST
58722: LIST
58723: PUSH
58724: LD_INT 4
58726: NEG
58727: PUSH
58728: LD_INT 0
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: LD_INT 4
58737: NEG
58738: PUSH
58739: LD_INT 1
58741: NEG
58742: PUSH
58743: EMPTY
58744: LIST
58745: LIST
58746: PUSH
58747: LD_INT 3
58749: NEG
58750: PUSH
58751: LD_INT 0
58753: PUSH
58754: EMPTY
58755: LIST
58756: LIST
58757: PUSH
58758: LD_INT 3
58760: NEG
58761: PUSH
58762: LD_INT 1
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 4
58771: NEG
58772: PUSH
58773: LD_INT 1
58775: PUSH
58776: EMPTY
58777: LIST
58778: LIST
58779: PUSH
58780: LD_INT 5
58782: NEG
58783: PUSH
58784: LD_INT 0
58786: PUSH
58787: EMPTY
58788: LIST
58789: LIST
58790: PUSH
58791: LD_INT 5
58793: NEG
58794: PUSH
58795: LD_INT 1
58797: NEG
58798: PUSH
58799: EMPTY
58800: LIST
58801: LIST
58802: PUSH
58803: LD_INT 5
58805: NEG
58806: PUSH
58807: LD_INT 2
58809: NEG
58810: PUSH
58811: EMPTY
58812: LIST
58813: LIST
58814: PUSH
58815: LD_INT 3
58817: NEG
58818: PUSH
58819: LD_INT 2
58821: PUSH
58822: EMPTY
58823: LIST
58824: LIST
58825: PUSH
58826: EMPTY
58827: LIST
58828: LIST
58829: LIST
58830: LIST
58831: LIST
58832: LIST
58833: LIST
58834: LIST
58835: LIST
58836: LIST
58837: LIST
58838: LIST
58839: LIST
58840: LIST
58841: LIST
58842: LIST
58843: LIST
58844: LIST
58845: LIST
58846: LIST
58847: LIST
58848: LIST
58849: LIST
58850: LIST
58851: LIST
58852: LIST
58853: LIST
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: LIST
58859: LIST
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: LIST
58872: ST_TO_ADDR
// end ; end ;
58873: GO 58876
58875: POP
// case btype of b_depot , b_warehouse :
58876: LD_VAR 0 1
58880: PUSH
58881: LD_INT 0
58883: DOUBLE
58884: EQUAL
58885: IFTRUE 58895
58887: LD_INT 1
58889: DOUBLE
58890: EQUAL
58891: IFTRUE 58895
58893: GO 59096
58895: POP
// case nation of nation_american :
58896: LD_VAR 0 5
58900: PUSH
58901: LD_INT 1
58903: DOUBLE
58904: EQUAL
58905: IFTRUE 58909
58907: GO 58965
58909: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
58910: LD_ADDR_VAR 0 9
58914: PUSH
58915: LD_VAR 0 11
58919: PUSH
58920: LD_VAR 0 12
58924: PUSH
58925: LD_VAR 0 13
58929: PUSH
58930: LD_VAR 0 14
58934: PUSH
58935: LD_VAR 0 15
58939: PUSH
58940: LD_VAR 0 16
58944: PUSH
58945: EMPTY
58946: LIST
58947: LIST
58948: LIST
58949: LIST
58950: LIST
58951: LIST
58952: PUSH
58953: LD_VAR 0 4
58957: PUSH
58958: LD_INT 1
58960: PLUS
58961: ARRAY
58962: ST_TO_ADDR
58963: GO 59094
58965: LD_INT 2
58967: DOUBLE
58968: EQUAL
58969: IFTRUE 58973
58971: GO 59029
58973: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
58974: LD_ADDR_VAR 0 9
58978: PUSH
58979: LD_VAR 0 17
58983: PUSH
58984: LD_VAR 0 18
58988: PUSH
58989: LD_VAR 0 19
58993: PUSH
58994: LD_VAR 0 20
58998: PUSH
58999: LD_VAR 0 21
59003: PUSH
59004: LD_VAR 0 22
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: LIST
59013: LIST
59014: LIST
59015: LIST
59016: PUSH
59017: LD_VAR 0 4
59021: PUSH
59022: LD_INT 1
59024: PLUS
59025: ARRAY
59026: ST_TO_ADDR
59027: GO 59094
59029: LD_INT 3
59031: DOUBLE
59032: EQUAL
59033: IFTRUE 59037
59035: GO 59093
59037: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
59038: LD_ADDR_VAR 0 9
59042: PUSH
59043: LD_VAR 0 23
59047: PUSH
59048: LD_VAR 0 24
59052: PUSH
59053: LD_VAR 0 25
59057: PUSH
59058: LD_VAR 0 26
59062: PUSH
59063: LD_VAR 0 27
59067: PUSH
59068: LD_VAR 0 28
59072: PUSH
59073: EMPTY
59074: LIST
59075: LIST
59076: LIST
59077: LIST
59078: LIST
59079: LIST
59080: PUSH
59081: LD_VAR 0 4
59085: PUSH
59086: LD_INT 1
59088: PLUS
59089: ARRAY
59090: ST_TO_ADDR
59091: GO 59094
59093: POP
59094: GO 59649
59096: LD_INT 2
59098: DOUBLE
59099: EQUAL
59100: IFTRUE 59110
59102: LD_INT 3
59104: DOUBLE
59105: EQUAL
59106: IFTRUE 59110
59108: GO 59166
59110: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
59111: LD_ADDR_VAR 0 9
59115: PUSH
59116: LD_VAR 0 29
59120: PUSH
59121: LD_VAR 0 30
59125: PUSH
59126: LD_VAR 0 31
59130: PUSH
59131: LD_VAR 0 32
59135: PUSH
59136: LD_VAR 0 33
59140: PUSH
59141: LD_VAR 0 34
59145: PUSH
59146: EMPTY
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: LIST
59152: LIST
59153: PUSH
59154: LD_VAR 0 4
59158: PUSH
59159: LD_INT 1
59161: PLUS
59162: ARRAY
59163: ST_TO_ADDR
59164: GO 59649
59166: LD_INT 16
59168: DOUBLE
59169: EQUAL
59170: IFTRUE 59228
59172: LD_INT 17
59174: DOUBLE
59175: EQUAL
59176: IFTRUE 59228
59178: LD_INT 18
59180: DOUBLE
59181: EQUAL
59182: IFTRUE 59228
59184: LD_INT 19
59186: DOUBLE
59187: EQUAL
59188: IFTRUE 59228
59190: LD_INT 22
59192: DOUBLE
59193: EQUAL
59194: IFTRUE 59228
59196: LD_INT 20
59198: DOUBLE
59199: EQUAL
59200: IFTRUE 59228
59202: LD_INT 21
59204: DOUBLE
59205: EQUAL
59206: IFTRUE 59228
59208: LD_INT 23
59210: DOUBLE
59211: EQUAL
59212: IFTRUE 59228
59214: LD_INT 24
59216: DOUBLE
59217: EQUAL
59218: IFTRUE 59228
59220: LD_INT 25
59222: DOUBLE
59223: EQUAL
59224: IFTRUE 59228
59226: GO 59284
59228: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
59229: LD_ADDR_VAR 0 9
59233: PUSH
59234: LD_VAR 0 35
59238: PUSH
59239: LD_VAR 0 36
59243: PUSH
59244: LD_VAR 0 37
59248: PUSH
59249: LD_VAR 0 38
59253: PUSH
59254: LD_VAR 0 39
59258: PUSH
59259: LD_VAR 0 40
59263: PUSH
59264: EMPTY
59265: LIST
59266: LIST
59267: LIST
59268: LIST
59269: LIST
59270: LIST
59271: PUSH
59272: LD_VAR 0 4
59276: PUSH
59277: LD_INT 1
59279: PLUS
59280: ARRAY
59281: ST_TO_ADDR
59282: GO 59649
59284: LD_INT 6
59286: DOUBLE
59287: EQUAL
59288: IFTRUE 59340
59290: LD_INT 7
59292: DOUBLE
59293: EQUAL
59294: IFTRUE 59340
59296: LD_INT 8
59298: DOUBLE
59299: EQUAL
59300: IFTRUE 59340
59302: LD_INT 13
59304: DOUBLE
59305: EQUAL
59306: IFTRUE 59340
59308: LD_INT 12
59310: DOUBLE
59311: EQUAL
59312: IFTRUE 59340
59314: LD_INT 15
59316: DOUBLE
59317: EQUAL
59318: IFTRUE 59340
59320: LD_INT 11
59322: DOUBLE
59323: EQUAL
59324: IFTRUE 59340
59326: LD_INT 14
59328: DOUBLE
59329: EQUAL
59330: IFTRUE 59340
59332: LD_INT 10
59334: DOUBLE
59335: EQUAL
59336: IFTRUE 59340
59338: GO 59396
59340: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
59341: LD_ADDR_VAR 0 9
59345: PUSH
59346: LD_VAR 0 41
59350: PUSH
59351: LD_VAR 0 42
59355: PUSH
59356: LD_VAR 0 43
59360: PUSH
59361: LD_VAR 0 44
59365: PUSH
59366: LD_VAR 0 45
59370: PUSH
59371: LD_VAR 0 46
59375: PUSH
59376: EMPTY
59377: LIST
59378: LIST
59379: LIST
59380: LIST
59381: LIST
59382: LIST
59383: PUSH
59384: LD_VAR 0 4
59388: PUSH
59389: LD_INT 1
59391: PLUS
59392: ARRAY
59393: ST_TO_ADDR
59394: GO 59649
59396: LD_INT 36
59398: DOUBLE
59399: EQUAL
59400: IFTRUE 59404
59402: GO 59460
59404: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
59405: LD_ADDR_VAR 0 9
59409: PUSH
59410: LD_VAR 0 47
59414: PUSH
59415: LD_VAR 0 48
59419: PUSH
59420: LD_VAR 0 49
59424: PUSH
59425: LD_VAR 0 50
59429: PUSH
59430: LD_VAR 0 51
59434: PUSH
59435: LD_VAR 0 52
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: LIST
59444: LIST
59445: LIST
59446: LIST
59447: PUSH
59448: LD_VAR 0 4
59452: PUSH
59453: LD_INT 1
59455: PLUS
59456: ARRAY
59457: ST_TO_ADDR
59458: GO 59649
59460: LD_INT 4
59462: DOUBLE
59463: EQUAL
59464: IFTRUE 59486
59466: LD_INT 5
59468: DOUBLE
59469: EQUAL
59470: IFTRUE 59486
59472: LD_INT 34
59474: DOUBLE
59475: EQUAL
59476: IFTRUE 59486
59478: LD_INT 37
59480: DOUBLE
59481: EQUAL
59482: IFTRUE 59486
59484: GO 59542
59486: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
59487: LD_ADDR_VAR 0 9
59491: PUSH
59492: LD_VAR 0 53
59496: PUSH
59497: LD_VAR 0 54
59501: PUSH
59502: LD_VAR 0 55
59506: PUSH
59507: LD_VAR 0 56
59511: PUSH
59512: LD_VAR 0 57
59516: PUSH
59517: LD_VAR 0 58
59521: PUSH
59522: EMPTY
59523: LIST
59524: LIST
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: PUSH
59530: LD_VAR 0 4
59534: PUSH
59535: LD_INT 1
59537: PLUS
59538: ARRAY
59539: ST_TO_ADDR
59540: GO 59649
59542: LD_INT 31
59544: DOUBLE
59545: EQUAL
59546: IFTRUE 59592
59548: LD_INT 32
59550: DOUBLE
59551: EQUAL
59552: IFTRUE 59592
59554: LD_INT 33
59556: DOUBLE
59557: EQUAL
59558: IFTRUE 59592
59560: LD_INT 27
59562: DOUBLE
59563: EQUAL
59564: IFTRUE 59592
59566: LD_INT 26
59568: DOUBLE
59569: EQUAL
59570: IFTRUE 59592
59572: LD_INT 28
59574: DOUBLE
59575: EQUAL
59576: IFTRUE 59592
59578: LD_INT 29
59580: DOUBLE
59581: EQUAL
59582: IFTRUE 59592
59584: LD_INT 30
59586: DOUBLE
59587: EQUAL
59588: IFTRUE 59592
59590: GO 59648
59592: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
59593: LD_ADDR_VAR 0 9
59597: PUSH
59598: LD_VAR 0 59
59602: PUSH
59603: LD_VAR 0 60
59607: PUSH
59608: LD_VAR 0 61
59612: PUSH
59613: LD_VAR 0 62
59617: PUSH
59618: LD_VAR 0 63
59622: PUSH
59623: LD_VAR 0 64
59627: PUSH
59628: EMPTY
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: LIST
59635: PUSH
59636: LD_VAR 0 4
59640: PUSH
59641: LD_INT 1
59643: PLUS
59644: ARRAY
59645: ST_TO_ADDR
59646: GO 59649
59648: POP
// temp_list2 = [ ] ;
59649: LD_ADDR_VAR 0 10
59653: PUSH
59654: EMPTY
59655: ST_TO_ADDR
// for i in temp_list do
59656: LD_ADDR_VAR 0 8
59660: PUSH
59661: LD_VAR 0 9
59665: PUSH
59666: FOR_IN
59667: IFFALSE 59719
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
59669: LD_ADDR_VAR 0 10
59673: PUSH
59674: LD_VAR 0 10
59678: PUSH
59679: LD_VAR 0 8
59683: PUSH
59684: LD_INT 1
59686: ARRAY
59687: PUSH
59688: LD_VAR 0 2
59692: PLUS
59693: PUSH
59694: LD_VAR 0 8
59698: PUSH
59699: LD_INT 2
59701: ARRAY
59702: PUSH
59703: LD_VAR 0 3
59707: PLUS
59708: PUSH
59709: EMPTY
59710: LIST
59711: LIST
59712: PUSH
59713: EMPTY
59714: LIST
59715: ADD
59716: ST_TO_ADDR
59717: GO 59666
59719: POP
59720: POP
// result = temp_list2 ;
59721: LD_ADDR_VAR 0 7
59725: PUSH
59726: LD_VAR 0 10
59730: ST_TO_ADDR
// end ;
59731: LD_VAR 0 7
59735: RET
// export function EnemyInRange ( unit , dist ) ; begin
59736: LD_INT 0
59738: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
59739: LD_ADDR_VAR 0 3
59743: PUSH
59744: LD_VAR 0 1
59748: PPUSH
59749: CALL_OW 255
59753: PPUSH
59754: LD_VAR 0 1
59758: PPUSH
59759: CALL_OW 250
59763: PPUSH
59764: LD_VAR 0 1
59768: PPUSH
59769: CALL_OW 251
59773: PPUSH
59774: LD_VAR 0 2
59778: PPUSH
59779: CALL 32993 0 4
59783: PUSH
59784: LD_INT 4
59786: ARRAY
59787: ST_TO_ADDR
// end ;
59788: LD_VAR 0 3
59792: RET
// export function PlayerSeeMe ( unit ) ; begin
59793: LD_INT 0
59795: PPUSH
// result := See ( your_side , unit ) ;
59796: LD_ADDR_VAR 0 2
59800: PUSH
59801: LD_OWVAR 2
59805: PPUSH
59806: LD_VAR 0 1
59810: PPUSH
59811: CALL_OW 292
59815: ST_TO_ADDR
// end ;
59816: LD_VAR 0 2
59820: RET
// export function ReverseDir ( unit ) ; begin
59821: LD_INT 0
59823: PPUSH
// if not unit then
59824: LD_VAR 0 1
59828: NOT
59829: IFFALSE 59833
// exit ;
59831: GO 59856
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
59833: LD_ADDR_VAR 0 2
59837: PUSH
59838: LD_VAR 0 1
59842: PPUSH
59843: CALL_OW 254
59847: PUSH
59848: LD_INT 3
59850: PLUS
59851: PUSH
59852: LD_INT 6
59854: MOD
59855: ST_TO_ADDR
// end ;
59856: LD_VAR 0 2
59860: RET
// export function ReverseArray ( array ) ; var i ; begin
59861: LD_INT 0
59863: PPUSH
59864: PPUSH
// if not array then
59865: LD_VAR 0 1
59869: NOT
59870: IFFALSE 59874
// exit ;
59872: GO 59929
// result := [ ] ;
59874: LD_ADDR_VAR 0 2
59878: PUSH
59879: EMPTY
59880: ST_TO_ADDR
// for i := array downto 1 do
59881: LD_ADDR_VAR 0 3
59885: PUSH
59886: DOUBLE
59887: LD_VAR 0 1
59891: INC
59892: ST_TO_ADDR
59893: LD_INT 1
59895: PUSH
59896: FOR_DOWNTO
59897: IFFALSE 59927
// result := Join ( result , array [ i ] ) ;
59899: LD_ADDR_VAR 0 2
59903: PUSH
59904: LD_VAR 0 2
59908: PPUSH
59909: LD_VAR 0 1
59913: PUSH
59914: LD_VAR 0 3
59918: ARRAY
59919: PPUSH
59920: CALL 64771 0 2
59924: ST_TO_ADDR
59925: GO 59896
59927: POP
59928: POP
// end ;
59929: LD_VAR 0 2
59933: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
59934: LD_INT 0
59936: PPUSH
59937: PPUSH
59938: PPUSH
59939: PPUSH
59940: PPUSH
59941: PPUSH
// if not unit or not hexes then
59942: LD_VAR 0 1
59946: NOT
59947: IFTRUE 59956
59949: PUSH
59950: LD_VAR 0 2
59954: NOT
59955: OR
59956: IFFALSE 59960
// exit ;
59958: GO 60083
// dist := 9999 ;
59960: LD_ADDR_VAR 0 5
59964: PUSH
59965: LD_INT 9999
59967: ST_TO_ADDR
// for i = 1 to hexes do
59968: LD_ADDR_VAR 0 4
59972: PUSH
59973: DOUBLE
59974: LD_INT 1
59976: DEC
59977: ST_TO_ADDR
59978: LD_VAR 0 2
59982: PUSH
59983: FOR_TO
59984: IFFALSE 60071
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59986: LD_ADDR_VAR 0 6
59990: PUSH
59991: LD_VAR 0 1
59995: PPUSH
59996: LD_VAR 0 2
60000: PUSH
60001: LD_VAR 0 4
60005: ARRAY
60006: PUSH
60007: LD_INT 1
60009: ARRAY
60010: PPUSH
60011: LD_VAR 0 2
60015: PUSH
60016: LD_VAR 0 4
60020: ARRAY
60021: PUSH
60022: LD_INT 2
60024: ARRAY
60025: PPUSH
60026: CALL_OW 297
60030: ST_TO_ADDR
// if tdist < dist then
60031: LD_VAR 0 6
60035: PUSH
60036: LD_VAR 0 5
60040: LESS
60041: IFFALSE 60069
// begin hex := hexes [ i ] ;
60043: LD_ADDR_VAR 0 8
60047: PUSH
60048: LD_VAR 0 2
60052: PUSH
60053: LD_VAR 0 4
60057: ARRAY
60058: ST_TO_ADDR
// dist := tdist ;
60059: LD_ADDR_VAR 0 5
60063: PUSH
60064: LD_VAR 0 6
60068: ST_TO_ADDR
// end ; end ;
60069: GO 59983
60071: POP
60072: POP
// result := hex ;
60073: LD_ADDR_VAR 0 3
60077: PUSH
60078: LD_VAR 0 8
60082: ST_TO_ADDR
// end ;
60083: LD_VAR 0 3
60087: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
60088: LD_INT 0
60090: PPUSH
60091: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
60092: LD_VAR 0 1
60096: NOT
60097: IFTRUE 60136
60099: PUSH
60100: LD_VAR 0 1
60104: PUSH
60105: LD_INT 21
60107: PUSH
60108: LD_INT 2
60110: PUSH
60111: EMPTY
60112: LIST
60113: LIST
60114: PUSH
60115: LD_INT 23
60117: PUSH
60118: LD_INT 2
60120: PUSH
60121: EMPTY
60122: LIST
60123: LIST
60124: PUSH
60125: EMPTY
60126: LIST
60127: LIST
60128: PPUSH
60129: CALL_OW 69
60133: IN
60134: NOT
60135: OR
60136: IFFALSE 60140
// exit ;
60138: GO 60187
// for i = 1 to 3 do
60140: LD_ADDR_VAR 0 3
60144: PUSH
60145: DOUBLE
60146: LD_INT 1
60148: DEC
60149: ST_TO_ADDR
60150: LD_INT 3
60152: PUSH
60153: FOR_TO
60154: IFFALSE 60185
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
60156: LD_VAR 0 1
60160: PPUSH
60161: CALL_OW 250
60165: PPUSH
60166: LD_VAR 0 1
60170: PPUSH
60171: CALL_OW 251
60175: PPUSH
60176: LD_INT 1
60178: PPUSH
60179: CALL_OW 453
60183: GO 60153
60185: POP
60186: POP
// end ;
60187: LD_VAR 0 2
60191: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
60192: LD_INT 0
60194: PPUSH
60195: PPUSH
60196: PPUSH
60197: PPUSH
60198: PPUSH
60199: PPUSH
// if not unit or not enemy_unit then
60200: LD_VAR 0 1
60204: NOT
60205: IFTRUE 60214
60207: PUSH
60208: LD_VAR 0 2
60212: NOT
60213: OR
60214: IFFALSE 60218
// exit ;
60216: GO 60689
// if GetLives ( i ) < 250 then
60218: LD_VAR 0 4
60222: PPUSH
60223: CALL_OW 256
60227: PUSH
60228: LD_INT 250
60230: LESS
60231: IFFALSE 60244
// begin ComAutodestruct ( i ) ;
60233: LD_VAR 0 4
60237: PPUSH
60238: CALL 60088 0 1
// exit ;
60242: GO 60689
// end ; x := GetX ( enemy_unit ) ;
60244: LD_ADDR_VAR 0 7
60248: PUSH
60249: LD_VAR 0 2
60253: PPUSH
60254: CALL_OW 250
60258: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
60259: LD_ADDR_VAR 0 8
60263: PUSH
60264: LD_VAR 0 2
60268: PPUSH
60269: CALL_OW 251
60273: ST_TO_ADDR
// if not x or not y then
60274: LD_VAR 0 7
60278: NOT
60279: IFTRUE 60288
60281: PUSH
60282: LD_VAR 0 8
60286: NOT
60287: OR
60288: IFFALSE 60292
// exit ;
60290: GO 60689
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
60292: LD_ADDR_VAR 0 6
60296: PUSH
60297: LD_VAR 0 7
60301: PPUSH
60302: LD_INT 0
60304: PPUSH
60305: LD_INT 4
60307: PPUSH
60308: CALL_OW 272
60312: PUSH
60313: LD_VAR 0 8
60317: PPUSH
60318: LD_INT 0
60320: PPUSH
60321: LD_INT 4
60323: PPUSH
60324: CALL_OW 273
60328: PUSH
60329: EMPTY
60330: LIST
60331: LIST
60332: PUSH
60333: LD_VAR 0 7
60337: PPUSH
60338: LD_INT 1
60340: PPUSH
60341: LD_INT 4
60343: PPUSH
60344: CALL_OW 272
60348: PUSH
60349: LD_VAR 0 8
60353: PPUSH
60354: LD_INT 1
60356: PPUSH
60357: LD_INT 4
60359: PPUSH
60360: CALL_OW 273
60364: PUSH
60365: EMPTY
60366: LIST
60367: LIST
60368: PUSH
60369: LD_VAR 0 7
60373: PPUSH
60374: LD_INT 2
60376: PPUSH
60377: LD_INT 4
60379: PPUSH
60380: CALL_OW 272
60384: PUSH
60385: LD_VAR 0 8
60389: PPUSH
60390: LD_INT 2
60392: PPUSH
60393: LD_INT 4
60395: PPUSH
60396: CALL_OW 273
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PUSH
60405: LD_VAR 0 7
60409: PPUSH
60410: LD_INT 3
60412: PPUSH
60413: LD_INT 4
60415: PPUSH
60416: CALL_OW 272
60420: PUSH
60421: LD_VAR 0 8
60425: PPUSH
60426: LD_INT 3
60428: PPUSH
60429: LD_INT 4
60431: PPUSH
60432: CALL_OW 273
60436: PUSH
60437: EMPTY
60438: LIST
60439: LIST
60440: PUSH
60441: LD_VAR 0 7
60445: PPUSH
60446: LD_INT 4
60448: PPUSH
60449: LD_INT 4
60451: PPUSH
60452: CALL_OW 272
60456: PUSH
60457: LD_VAR 0 8
60461: PPUSH
60462: LD_INT 4
60464: PPUSH
60465: LD_INT 4
60467: PPUSH
60468: CALL_OW 273
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: LD_VAR 0 7
60481: PPUSH
60482: LD_INT 5
60484: PPUSH
60485: LD_INT 4
60487: PPUSH
60488: CALL_OW 272
60492: PUSH
60493: LD_VAR 0 8
60497: PPUSH
60498: LD_INT 5
60500: PPUSH
60501: LD_INT 4
60503: PPUSH
60504: CALL_OW 273
60508: PUSH
60509: EMPTY
60510: LIST
60511: LIST
60512: PUSH
60513: EMPTY
60514: LIST
60515: LIST
60516: LIST
60517: LIST
60518: LIST
60519: LIST
60520: ST_TO_ADDR
// for i = tmp downto 1 do
60521: LD_ADDR_VAR 0 4
60525: PUSH
60526: DOUBLE
60527: LD_VAR 0 6
60531: INC
60532: ST_TO_ADDR
60533: LD_INT 1
60535: PUSH
60536: FOR_DOWNTO
60537: IFFALSE 60640
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
60539: LD_VAR 0 6
60543: PUSH
60544: LD_VAR 0 4
60548: ARRAY
60549: PUSH
60550: LD_INT 1
60552: ARRAY
60553: PPUSH
60554: LD_VAR 0 6
60558: PUSH
60559: LD_VAR 0 4
60563: ARRAY
60564: PUSH
60565: LD_INT 2
60567: ARRAY
60568: PPUSH
60569: CALL_OW 488
60573: NOT
60574: IFTRUE 60616
60576: PUSH
60577: LD_VAR 0 6
60581: PUSH
60582: LD_VAR 0 4
60586: ARRAY
60587: PUSH
60588: LD_INT 1
60590: ARRAY
60591: PPUSH
60592: LD_VAR 0 6
60596: PUSH
60597: LD_VAR 0 4
60601: ARRAY
60602: PUSH
60603: LD_INT 2
60605: ARRAY
60606: PPUSH
60607: CALL_OW 428
60611: PUSH
60612: LD_INT 0
60614: NONEQUAL
60615: OR
60616: IFFALSE 60638
// tmp := Delete ( tmp , i ) ;
60618: LD_ADDR_VAR 0 6
60622: PUSH
60623: LD_VAR 0 6
60627: PPUSH
60628: LD_VAR 0 4
60632: PPUSH
60633: CALL_OW 3
60637: ST_TO_ADDR
60638: GO 60536
60640: POP
60641: POP
// j := GetClosestHex ( unit , tmp ) ;
60642: LD_ADDR_VAR 0 5
60646: PUSH
60647: LD_VAR 0 1
60651: PPUSH
60652: LD_VAR 0 6
60656: PPUSH
60657: CALL 59934 0 2
60661: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
60662: LD_VAR 0 1
60666: PPUSH
60667: LD_VAR 0 5
60671: PUSH
60672: LD_INT 1
60674: ARRAY
60675: PPUSH
60676: LD_VAR 0 5
60680: PUSH
60681: LD_INT 2
60683: ARRAY
60684: PPUSH
60685: CALL_OW 111
// end ;
60689: LD_VAR 0 3
60693: RET
// export function PrepareApemanSoldier ( ) ; begin
60694: LD_INT 0
60696: PPUSH
// uc_nation := 0 ;
60697: LD_ADDR_OWVAR 21
60701: PUSH
60702: LD_INT 0
60704: ST_TO_ADDR
// hc_sex := sex_male ;
60705: LD_ADDR_OWVAR 27
60709: PUSH
60710: LD_INT 1
60712: ST_TO_ADDR
// hc_name :=  ;
60713: LD_ADDR_OWVAR 26
60717: PUSH
60718: LD_STRING 
60720: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
60721: LD_ADDR_OWVAR 28
60725: PUSH
60726: LD_INT 15
60728: ST_TO_ADDR
// hc_gallery :=  ;
60729: LD_ADDR_OWVAR 33
60733: PUSH
60734: LD_STRING 
60736: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60737: LD_ADDR_OWVAR 31
60741: PUSH
60742: LD_INT 0
60744: PPUSH
60745: LD_INT 3
60747: PPUSH
60748: CALL_OW 12
60752: PUSH
60753: LD_INT 0
60755: PPUSH
60756: LD_INT 3
60758: PPUSH
60759: CALL_OW 12
60763: PUSH
60764: LD_INT 0
60766: PUSH
60767: LD_INT 0
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: LIST
60774: LIST
60775: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
60776: LD_ADDR_OWVAR 29
60780: PUSH
60781: LD_INT 12
60783: PUSH
60784: LD_INT 12
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: ST_TO_ADDR
// end ;
60791: LD_VAR 0 1
60795: RET
// export function PrepareApemanEngineer ( ) ; begin
60796: LD_INT 0
60798: PPUSH
// uc_nation := 0 ;
60799: LD_ADDR_OWVAR 21
60803: PUSH
60804: LD_INT 0
60806: ST_TO_ADDR
// hc_sex := sex_male ;
60807: LD_ADDR_OWVAR 27
60811: PUSH
60812: LD_INT 1
60814: ST_TO_ADDR
// hc_name :=  ;
60815: LD_ADDR_OWVAR 26
60819: PUSH
60820: LD_STRING 
60822: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
60823: LD_ADDR_OWVAR 28
60827: PUSH
60828: LD_INT 16
60830: ST_TO_ADDR
// hc_gallery :=  ;
60831: LD_ADDR_OWVAR 33
60835: PUSH
60836: LD_STRING 
60838: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
60839: LD_ADDR_OWVAR 31
60843: PUSH
60844: LD_INT 0
60846: PPUSH
60847: LD_INT 3
60849: PPUSH
60850: CALL_OW 12
60854: PUSH
60855: LD_INT 0
60857: PPUSH
60858: LD_INT 3
60860: PPUSH
60861: CALL_OW 12
60865: PUSH
60866: LD_INT 0
60868: PUSH
60869: LD_INT 0
60871: PUSH
60872: EMPTY
60873: LIST
60874: LIST
60875: LIST
60876: LIST
60877: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
60878: LD_ADDR_OWVAR 29
60882: PUSH
60883: LD_INT 12
60885: PUSH
60886: LD_INT 12
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: ST_TO_ADDR
// end ;
60893: LD_VAR 0 1
60897: RET
// export function PrepareApeman ( agressivity ) ; begin
60898: LD_INT 0
60900: PPUSH
// uc_side := 0 ;
60901: LD_ADDR_OWVAR 20
60905: PUSH
60906: LD_INT 0
60908: ST_TO_ADDR
// uc_nation := 0 ;
60909: LD_ADDR_OWVAR 21
60913: PUSH
60914: LD_INT 0
60916: ST_TO_ADDR
// hc_sex := sex_male ;
60917: LD_ADDR_OWVAR 27
60921: PUSH
60922: LD_INT 1
60924: ST_TO_ADDR
// hc_class := class_apeman ;
60925: LD_ADDR_OWVAR 28
60929: PUSH
60930: LD_INT 12
60932: ST_TO_ADDR
// hc_gallery :=  ;
60933: LD_ADDR_OWVAR 33
60937: PUSH
60938: LD_STRING 
60940: ST_TO_ADDR
// hc_name :=  ;
60941: LD_ADDR_OWVAR 26
60945: PUSH
60946: LD_STRING 
60948: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
60949: LD_ADDR_OWVAR 29
60953: PUSH
60954: LD_INT 12
60956: PUSH
60957: LD_INT 12
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: ST_TO_ADDR
// if agressivity = 0 then
60964: LD_VAR 0 1
60968: PUSH
60969: LD_INT 0
60971: EQUAL
60972: IFFALSE 60984
// hc_agressivity := 0 else
60974: LD_ADDR_OWVAR 35
60978: PUSH
60979: LD_INT 0
60981: ST_TO_ADDR
60982: GO 61005
// hc_agressivity := rand ( - agressivity , agressivity ) ;
60984: LD_ADDR_OWVAR 35
60988: PUSH
60989: LD_VAR 0 1
60993: NEG
60994: PPUSH
60995: LD_VAR 0 1
60999: PPUSH
61000: CALL_OW 12
61004: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
61005: LD_ADDR_OWVAR 31
61009: PUSH
61010: LD_INT 0
61012: PPUSH
61013: LD_INT 3
61015: PPUSH
61016: CALL_OW 12
61020: PUSH
61021: LD_INT 0
61023: PPUSH
61024: LD_INT 3
61026: PPUSH
61027: CALL_OW 12
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: ST_TO_ADDR
// end ;
61044: LD_VAR 0 2
61048: RET
// export function PrepareTiger ( agressivity ) ; begin
61049: LD_INT 0
61051: PPUSH
// uc_side := 0 ;
61052: LD_ADDR_OWVAR 20
61056: PUSH
61057: LD_INT 0
61059: ST_TO_ADDR
// uc_nation := 0 ;
61060: LD_ADDR_OWVAR 21
61064: PUSH
61065: LD_INT 0
61067: ST_TO_ADDR
// InitHc ;
61068: CALL_OW 19
// hc_class := class_tiger ;
61072: LD_ADDR_OWVAR 28
61076: PUSH
61077: LD_INT 14
61079: ST_TO_ADDR
// hc_gallery :=  ;
61080: LD_ADDR_OWVAR 33
61084: PUSH
61085: LD_STRING 
61087: ST_TO_ADDR
// hc_name :=  ;
61088: LD_ADDR_OWVAR 26
61092: PUSH
61093: LD_STRING 
61095: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
61096: LD_ADDR_OWVAR 35
61100: PUSH
61101: LD_VAR 0 1
61105: NEG
61106: PPUSH
61107: LD_VAR 0 1
61111: PPUSH
61112: CALL_OW 12
61116: ST_TO_ADDR
// end ;
61117: LD_VAR 0 2
61121: RET
// export function PrepareEnchidna ( ) ; begin
61122: LD_INT 0
61124: PPUSH
// uc_side := 0 ;
61125: LD_ADDR_OWVAR 20
61129: PUSH
61130: LD_INT 0
61132: ST_TO_ADDR
// uc_nation := 0 ;
61133: LD_ADDR_OWVAR 21
61137: PUSH
61138: LD_INT 0
61140: ST_TO_ADDR
// InitHc ;
61141: CALL_OW 19
// hc_class := class_baggie ;
61145: LD_ADDR_OWVAR 28
61149: PUSH
61150: LD_INT 13
61152: ST_TO_ADDR
// hc_gallery :=  ;
61153: LD_ADDR_OWVAR 33
61157: PUSH
61158: LD_STRING 
61160: ST_TO_ADDR
// hc_name :=  ;
61161: LD_ADDR_OWVAR 26
61165: PUSH
61166: LD_STRING 
61168: ST_TO_ADDR
// end ;
61169: LD_VAR 0 1
61173: RET
// export function PrepareFrog ( ) ; begin
61174: LD_INT 0
61176: PPUSH
// uc_side := 0 ;
61177: LD_ADDR_OWVAR 20
61181: PUSH
61182: LD_INT 0
61184: ST_TO_ADDR
// uc_nation := 0 ;
61185: LD_ADDR_OWVAR 21
61189: PUSH
61190: LD_INT 0
61192: ST_TO_ADDR
// InitHc ;
61193: CALL_OW 19
// hc_class := class_frog ;
61197: LD_ADDR_OWVAR 28
61201: PUSH
61202: LD_INT 19
61204: ST_TO_ADDR
// hc_gallery :=  ;
61205: LD_ADDR_OWVAR 33
61209: PUSH
61210: LD_STRING 
61212: ST_TO_ADDR
// hc_name :=  ;
61213: LD_ADDR_OWVAR 26
61217: PUSH
61218: LD_STRING 
61220: ST_TO_ADDR
// end ;
61221: LD_VAR 0 1
61225: RET
// export function PrepareFish ( ) ; begin
61226: LD_INT 0
61228: PPUSH
// uc_side := 0 ;
61229: LD_ADDR_OWVAR 20
61233: PUSH
61234: LD_INT 0
61236: ST_TO_ADDR
// uc_nation := 0 ;
61237: LD_ADDR_OWVAR 21
61241: PUSH
61242: LD_INT 0
61244: ST_TO_ADDR
// InitHc ;
61245: CALL_OW 19
// hc_class := class_fish ;
61249: LD_ADDR_OWVAR 28
61253: PUSH
61254: LD_INT 20
61256: ST_TO_ADDR
// hc_gallery :=  ;
61257: LD_ADDR_OWVAR 33
61261: PUSH
61262: LD_STRING 
61264: ST_TO_ADDR
// hc_name :=  ;
61265: LD_ADDR_OWVAR 26
61269: PUSH
61270: LD_STRING 
61272: ST_TO_ADDR
// end ;
61273: LD_VAR 0 1
61277: RET
// export function PrepareBird ( ) ; begin
61278: LD_INT 0
61280: PPUSH
// uc_side := 0 ;
61281: LD_ADDR_OWVAR 20
61285: PUSH
61286: LD_INT 0
61288: ST_TO_ADDR
// uc_nation := 0 ;
61289: LD_ADDR_OWVAR 21
61293: PUSH
61294: LD_INT 0
61296: ST_TO_ADDR
// InitHc ;
61297: CALL_OW 19
// hc_class := class_phororhacos ;
61301: LD_ADDR_OWVAR 28
61305: PUSH
61306: LD_INT 18
61308: ST_TO_ADDR
// hc_gallery :=  ;
61309: LD_ADDR_OWVAR 33
61313: PUSH
61314: LD_STRING 
61316: ST_TO_ADDR
// hc_name :=  ;
61317: LD_ADDR_OWVAR 26
61321: PUSH
61322: LD_STRING 
61324: ST_TO_ADDR
// end ;
61325: LD_VAR 0 1
61329: RET
// export function PrepareHorse ( ) ; begin
61330: LD_INT 0
61332: PPUSH
// uc_side := 0 ;
61333: LD_ADDR_OWVAR 20
61337: PUSH
61338: LD_INT 0
61340: ST_TO_ADDR
// uc_nation := 0 ;
61341: LD_ADDR_OWVAR 21
61345: PUSH
61346: LD_INT 0
61348: ST_TO_ADDR
// InitHc ;
61349: CALL_OW 19
// hc_class := class_horse ;
61353: LD_ADDR_OWVAR 28
61357: PUSH
61358: LD_INT 21
61360: ST_TO_ADDR
// hc_gallery :=  ;
61361: LD_ADDR_OWVAR 33
61365: PUSH
61366: LD_STRING 
61368: ST_TO_ADDR
// hc_name :=  ;
61369: LD_ADDR_OWVAR 26
61373: PUSH
61374: LD_STRING 
61376: ST_TO_ADDR
// end ;
61377: LD_VAR 0 1
61381: RET
// export function PrepareMastodont ( ) ; begin
61382: LD_INT 0
61384: PPUSH
// uc_side := 0 ;
61385: LD_ADDR_OWVAR 20
61389: PUSH
61390: LD_INT 0
61392: ST_TO_ADDR
// uc_nation := 0 ;
61393: LD_ADDR_OWVAR 21
61397: PUSH
61398: LD_INT 0
61400: ST_TO_ADDR
// vc_chassis := class_mastodont ;
61401: LD_ADDR_OWVAR 37
61405: PUSH
61406: LD_INT 31
61408: ST_TO_ADDR
// vc_control := control_rider ;
61409: LD_ADDR_OWVAR 38
61413: PUSH
61414: LD_INT 4
61416: ST_TO_ADDR
// end ;
61417: LD_VAR 0 1
61421: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
61422: LD_INT 0
61424: PPUSH
61425: PPUSH
61426: PPUSH
// uc_side = 0 ;
61427: LD_ADDR_OWVAR 20
61431: PUSH
61432: LD_INT 0
61434: ST_TO_ADDR
// uc_nation = 0 ;
61435: LD_ADDR_OWVAR 21
61439: PUSH
61440: LD_INT 0
61442: ST_TO_ADDR
// InitHc_All ( ) ;
61443: CALL_OW 584
// InitVc ;
61447: CALL_OW 20
// if mastodonts then
61451: LD_VAR 0 6
61455: IFFALSE 61522
// for i = 1 to mastodonts do
61457: LD_ADDR_VAR 0 11
61461: PUSH
61462: DOUBLE
61463: LD_INT 1
61465: DEC
61466: ST_TO_ADDR
61467: LD_VAR 0 6
61471: PUSH
61472: FOR_TO
61473: IFFALSE 61520
// begin vc_chassis := 31 ;
61475: LD_ADDR_OWVAR 37
61479: PUSH
61480: LD_INT 31
61482: ST_TO_ADDR
// vc_control := control_rider ;
61483: LD_ADDR_OWVAR 38
61487: PUSH
61488: LD_INT 4
61490: ST_TO_ADDR
// animal := CreateVehicle ;
61491: LD_ADDR_VAR 0 12
61495: PUSH
61496: CALL_OW 45
61500: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61501: LD_VAR 0 12
61505: PPUSH
61506: LD_VAR 0 8
61510: PPUSH
61511: LD_INT 0
61513: PPUSH
61514: CALL 63664 0 3
// end ;
61518: GO 61472
61520: POP
61521: POP
// if horses then
61522: LD_VAR 0 5
61526: IFFALSE 61593
// for i = 1 to horses do
61528: LD_ADDR_VAR 0 11
61532: PUSH
61533: DOUBLE
61534: LD_INT 1
61536: DEC
61537: ST_TO_ADDR
61538: LD_VAR 0 5
61542: PUSH
61543: FOR_TO
61544: IFFALSE 61591
// begin hc_class := 21 ;
61546: LD_ADDR_OWVAR 28
61550: PUSH
61551: LD_INT 21
61553: ST_TO_ADDR
// hc_gallery :=  ;
61554: LD_ADDR_OWVAR 33
61558: PUSH
61559: LD_STRING 
61561: ST_TO_ADDR
// animal := CreateHuman ;
61562: LD_ADDR_VAR 0 12
61566: PUSH
61567: CALL_OW 44
61571: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61572: LD_VAR 0 12
61576: PPUSH
61577: LD_VAR 0 8
61581: PPUSH
61582: LD_INT 0
61584: PPUSH
61585: CALL 63664 0 3
// end ;
61589: GO 61543
61591: POP
61592: POP
// if birds then
61593: LD_VAR 0 1
61597: IFFALSE 61664
// for i = 1 to birds do
61599: LD_ADDR_VAR 0 11
61603: PUSH
61604: DOUBLE
61605: LD_INT 1
61607: DEC
61608: ST_TO_ADDR
61609: LD_VAR 0 1
61613: PUSH
61614: FOR_TO
61615: IFFALSE 61662
// begin hc_class := 18 ;
61617: LD_ADDR_OWVAR 28
61621: PUSH
61622: LD_INT 18
61624: ST_TO_ADDR
// hc_gallery =  ;
61625: LD_ADDR_OWVAR 33
61629: PUSH
61630: LD_STRING 
61632: ST_TO_ADDR
// animal := CreateHuman ;
61633: LD_ADDR_VAR 0 12
61637: PUSH
61638: CALL_OW 44
61642: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61643: LD_VAR 0 12
61647: PPUSH
61648: LD_VAR 0 8
61652: PPUSH
61653: LD_INT 0
61655: PPUSH
61656: CALL 63664 0 3
// end ;
61660: GO 61614
61662: POP
61663: POP
// if tigers then
61664: LD_VAR 0 2
61668: IFFALSE 61752
// for i = 1 to tigers do
61670: LD_ADDR_VAR 0 11
61674: PUSH
61675: DOUBLE
61676: LD_INT 1
61678: DEC
61679: ST_TO_ADDR
61680: LD_VAR 0 2
61684: PUSH
61685: FOR_TO
61686: IFFALSE 61750
// begin hc_class = class_tiger ;
61688: LD_ADDR_OWVAR 28
61692: PUSH
61693: LD_INT 14
61695: ST_TO_ADDR
// hc_gallery =  ;
61696: LD_ADDR_OWVAR 33
61700: PUSH
61701: LD_STRING 
61703: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
61704: LD_ADDR_OWVAR 35
61708: PUSH
61709: LD_INT 7
61711: NEG
61712: PPUSH
61713: LD_INT 7
61715: PPUSH
61716: CALL_OW 12
61720: ST_TO_ADDR
// animal := CreateHuman ;
61721: LD_ADDR_VAR 0 12
61725: PUSH
61726: CALL_OW 44
61730: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61731: LD_VAR 0 12
61735: PPUSH
61736: LD_VAR 0 8
61740: PPUSH
61741: LD_INT 0
61743: PPUSH
61744: CALL 63664 0 3
// end ;
61748: GO 61685
61750: POP
61751: POP
// if apemans then
61752: LD_VAR 0 3
61756: IFFALSE 61879
// for i = 1 to apemans do
61758: LD_ADDR_VAR 0 11
61762: PUSH
61763: DOUBLE
61764: LD_INT 1
61766: DEC
61767: ST_TO_ADDR
61768: LD_VAR 0 3
61772: PUSH
61773: FOR_TO
61774: IFFALSE 61877
// begin hc_class = class_apeman ;
61776: LD_ADDR_OWVAR 28
61780: PUSH
61781: LD_INT 12
61783: ST_TO_ADDR
// hc_gallery =  ;
61784: LD_ADDR_OWVAR 33
61788: PUSH
61789: LD_STRING 
61791: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
61792: LD_ADDR_OWVAR 35
61796: PUSH
61797: LD_INT 2
61799: NEG
61800: PPUSH
61801: LD_INT 2
61803: PPUSH
61804: CALL_OW 12
61808: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
61809: LD_ADDR_OWVAR 31
61813: PUSH
61814: LD_INT 1
61816: PPUSH
61817: LD_INT 3
61819: PPUSH
61820: CALL_OW 12
61824: PUSH
61825: LD_INT 1
61827: PPUSH
61828: LD_INT 3
61830: PPUSH
61831: CALL_OW 12
61835: PUSH
61836: LD_INT 0
61838: PUSH
61839: LD_INT 0
61841: PUSH
61842: EMPTY
61843: LIST
61844: LIST
61845: LIST
61846: LIST
61847: ST_TO_ADDR
// animal := CreateHuman ;
61848: LD_ADDR_VAR 0 12
61852: PUSH
61853: CALL_OW 44
61857: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61858: LD_VAR 0 12
61862: PPUSH
61863: LD_VAR 0 8
61867: PPUSH
61868: LD_INT 0
61870: PPUSH
61871: CALL 63664 0 3
// end ;
61875: GO 61773
61877: POP
61878: POP
// if enchidnas then
61879: LD_VAR 0 4
61883: IFFALSE 61950
// for i = 1 to enchidnas do
61885: LD_ADDR_VAR 0 11
61889: PUSH
61890: DOUBLE
61891: LD_INT 1
61893: DEC
61894: ST_TO_ADDR
61895: LD_VAR 0 4
61899: PUSH
61900: FOR_TO
61901: IFFALSE 61948
// begin hc_class = 13 ;
61903: LD_ADDR_OWVAR 28
61907: PUSH
61908: LD_INT 13
61910: ST_TO_ADDR
// hc_gallery =  ;
61911: LD_ADDR_OWVAR 33
61915: PUSH
61916: LD_STRING 
61918: ST_TO_ADDR
// animal := CreateHuman ;
61919: LD_ADDR_VAR 0 12
61923: PUSH
61924: CALL_OW 44
61928: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
61929: LD_VAR 0 12
61933: PPUSH
61934: LD_VAR 0 8
61938: PPUSH
61939: LD_INT 0
61941: PPUSH
61942: CALL 63664 0 3
// end ;
61946: GO 61900
61948: POP
61949: POP
// if fishes then
61950: LD_VAR 0 7
61954: IFFALSE 62021
// for i = 1 to fishes do
61956: LD_ADDR_VAR 0 11
61960: PUSH
61961: DOUBLE
61962: LD_INT 1
61964: DEC
61965: ST_TO_ADDR
61966: LD_VAR 0 7
61970: PUSH
61971: FOR_TO
61972: IFFALSE 62019
// begin hc_class = 20 ;
61974: LD_ADDR_OWVAR 28
61978: PUSH
61979: LD_INT 20
61981: ST_TO_ADDR
// hc_gallery =  ;
61982: LD_ADDR_OWVAR 33
61986: PUSH
61987: LD_STRING 
61989: ST_TO_ADDR
// animal := CreateHuman ;
61990: LD_ADDR_VAR 0 12
61994: PUSH
61995: CALL_OW 44
61999: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
62000: LD_VAR 0 12
62004: PPUSH
62005: LD_VAR 0 9
62009: PPUSH
62010: LD_INT 0
62012: PPUSH
62013: CALL 63664 0 3
// end ;
62017: GO 61971
62019: POP
62020: POP
// end ;
62021: LD_VAR 0 10
62025: RET
// export function WantHeal ( sci , unit ) ; begin
62026: LD_INT 0
62028: PPUSH
// if GetTaskList ( sci ) > 0 then
62029: LD_VAR 0 1
62033: PPUSH
62034: CALL_OW 437
62038: PUSH
62039: LD_INT 0
62041: GREATER
62042: IFFALSE 62114
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
62044: LD_VAR 0 1
62048: PPUSH
62049: CALL_OW 437
62053: PUSH
62054: LD_INT 1
62056: ARRAY
62057: PUSH
62058: LD_INT 1
62060: ARRAY
62061: PUSH
62062: LD_STRING l
62064: EQUAL
62065: IFFALSE 62092
62067: PUSH
62068: LD_VAR 0 1
62072: PPUSH
62073: CALL_OW 437
62077: PUSH
62078: LD_INT 1
62080: ARRAY
62081: PUSH
62082: LD_INT 4
62084: ARRAY
62085: PUSH
62086: LD_VAR 0 2
62090: EQUAL
62091: AND
62092: IFFALSE 62104
// result := true else
62094: LD_ADDR_VAR 0 3
62098: PUSH
62099: LD_INT 1
62101: ST_TO_ADDR
62102: GO 62112
// result := false ;
62104: LD_ADDR_VAR 0 3
62108: PUSH
62109: LD_INT 0
62111: ST_TO_ADDR
// end else
62112: GO 62122
// result := false ;
62114: LD_ADDR_VAR 0 3
62118: PUSH
62119: LD_INT 0
62121: ST_TO_ADDR
// end ;
62122: LD_VAR 0 3
62126: RET
// export function HealTarget ( sci ) ; begin
62127: LD_INT 0
62129: PPUSH
// if not sci then
62130: LD_VAR 0 1
62134: NOT
62135: IFFALSE 62139
// exit ;
62137: GO 62204
// result := 0 ;
62139: LD_ADDR_VAR 0 2
62143: PUSH
62144: LD_INT 0
62146: ST_TO_ADDR
// if GetTaskList ( sci ) then
62147: LD_VAR 0 1
62151: PPUSH
62152: CALL_OW 437
62156: IFFALSE 62204
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
62158: LD_VAR 0 1
62162: PPUSH
62163: CALL_OW 437
62167: PUSH
62168: LD_INT 1
62170: ARRAY
62171: PUSH
62172: LD_INT 1
62174: ARRAY
62175: PUSH
62176: LD_STRING l
62178: EQUAL
62179: IFFALSE 62204
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
62181: LD_ADDR_VAR 0 2
62185: PUSH
62186: LD_VAR 0 1
62190: PPUSH
62191: CALL_OW 437
62195: PUSH
62196: LD_INT 1
62198: ARRAY
62199: PUSH
62200: LD_INT 4
62202: ARRAY
62203: ST_TO_ADDR
// end ;
62204: LD_VAR 0 2
62208: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
62209: LD_INT 0
62211: PPUSH
62212: PPUSH
62213: PPUSH
62214: PPUSH
// if not base_units then
62215: LD_VAR 0 1
62219: NOT
62220: IFFALSE 62224
// exit ;
62222: GO 62311
// result := false ;
62224: LD_ADDR_VAR 0 2
62228: PUSH
62229: LD_INT 0
62231: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
62232: LD_ADDR_VAR 0 5
62236: PUSH
62237: LD_VAR 0 1
62241: PPUSH
62242: LD_INT 21
62244: PUSH
62245: LD_INT 3
62247: PUSH
62248: EMPTY
62249: LIST
62250: LIST
62251: PPUSH
62252: CALL_OW 72
62256: ST_TO_ADDR
// if not tmp then
62257: LD_VAR 0 5
62261: NOT
62262: IFFALSE 62266
// exit ;
62264: GO 62311
// for i in tmp do
62266: LD_ADDR_VAR 0 3
62270: PUSH
62271: LD_VAR 0 5
62275: PUSH
62276: FOR_IN
62277: IFFALSE 62309
// begin result := EnemyInRange ( i , 22 ) ;
62279: LD_ADDR_VAR 0 2
62283: PUSH
62284: LD_VAR 0 3
62288: PPUSH
62289: LD_INT 22
62291: PPUSH
62292: CALL 59736 0 2
62296: ST_TO_ADDR
// if result then
62297: LD_VAR 0 2
62301: IFFALSE 62307
// exit ;
62303: POP
62304: POP
62305: GO 62311
// end ;
62307: GO 62276
62309: POP
62310: POP
// end ;
62311: LD_VAR 0 2
62315: RET
// export function FilterByTag ( units , tag ) ; begin
62316: LD_INT 0
62318: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
62319: LD_ADDR_VAR 0 3
62323: PUSH
62324: LD_VAR 0 1
62328: PPUSH
62329: LD_INT 120
62331: PUSH
62332: LD_VAR 0 2
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PPUSH
62341: CALL_OW 72
62345: ST_TO_ADDR
// end ;
62346: LD_VAR 0 3
62350: RET
// export function IsDriver ( un ) ; begin
62351: LD_INT 0
62353: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
62354: LD_ADDR_VAR 0 2
62358: PUSH
62359: LD_VAR 0 1
62363: PUSH
62364: LD_INT 55
62366: PUSH
62367: EMPTY
62368: LIST
62369: PPUSH
62370: CALL_OW 69
62374: IN
62375: ST_TO_ADDR
// end ;
62376: LD_VAR 0 2
62380: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
62381: LD_INT 0
62383: PPUSH
62384: PPUSH
// list := [ ] ;
62385: LD_ADDR_VAR 0 5
62389: PUSH
62390: EMPTY
62391: ST_TO_ADDR
// case d of 0 :
62392: LD_VAR 0 3
62396: PUSH
62397: LD_INT 0
62399: DOUBLE
62400: EQUAL
62401: IFTRUE 62405
62403: GO 62538
62405: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
62406: LD_ADDR_VAR 0 5
62410: PUSH
62411: LD_VAR 0 1
62415: PUSH
62416: LD_INT 4
62418: MINUS
62419: PUSH
62420: LD_VAR 0 2
62424: PUSH
62425: LD_INT 4
62427: MINUS
62428: PUSH
62429: LD_INT 2
62431: PUSH
62432: EMPTY
62433: LIST
62434: LIST
62435: LIST
62436: PUSH
62437: LD_VAR 0 1
62441: PUSH
62442: LD_INT 3
62444: MINUS
62445: PUSH
62446: LD_VAR 0 2
62450: PUSH
62451: LD_INT 1
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: LIST
62458: PUSH
62459: LD_VAR 0 1
62463: PUSH
62464: LD_INT 4
62466: PLUS
62467: PUSH
62468: LD_VAR 0 2
62472: PUSH
62473: LD_INT 4
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: LIST
62480: PUSH
62481: LD_VAR 0 1
62485: PUSH
62486: LD_INT 3
62488: PLUS
62489: PUSH
62490: LD_VAR 0 2
62494: PUSH
62495: LD_INT 3
62497: PLUS
62498: PUSH
62499: LD_INT 5
62501: PUSH
62502: EMPTY
62503: LIST
62504: LIST
62505: LIST
62506: PUSH
62507: LD_VAR 0 1
62511: PUSH
62512: LD_VAR 0 2
62516: PUSH
62517: LD_INT 4
62519: PLUS
62520: PUSH
62521: LD_INT 0
62523: PUSH
62524: EMPTY
62525: LIST
62526: LIST
62527: LIST
62528: PUSH
62529: EMPTY
62530: LIST
62531: LIST
62532: LIST
62533: LIST
62534: LIST
62535: ST_TO_ADDR
// end ; 1 :
62536: GO 63236
62538: LD_INT 1
62540: DOUBLE
62541: EQUAL
62542: IFTRUE 62546
62544: GO 62679
62546: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
62547: LD_ADDR_VAR 0 5
62551: PUSH
62552: LD_VAR 0 1
62556: PUSH
62557: LD_VAR 0 2
62561: PUSH
62562: LD_INT 4
62564: MINUS
62565: PUSH
62566: LD_INT 3
62568: PUSH
62569: EMPTY
62570: LIST
62571: LIST
62572: LIST
62573: PUSH
62574: LD_VAR 0 1
62578: PUSH
62579: LD_INT 3
62581: MINUS
62582: PUSH
62583: LD_VAR 0 2
62587: PUSH
62588: LD_INT 3
62590: MINUS
62591: PUSH
62592: LD_INT 2
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: LIST
62599: PUSH
62600: LD_VAR 0 1
62604: PUSH
62605: LD_INT 4
62607: MINUS
62608: PUSH
62609: LD_VAR 0 2
62613: PUSH
62614: LD_INT 1
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: LIST
62621: PUSH
62622: LD_VAR 0 1
62626: PUSH
62627: LD_VAR 0 2
62631: PUSH
62632: LD_INT 3
62634: PLUS
62635: PUSH
62636: LD_INT 0
62638: PUSH
62639: EMPTY
62640: LIST
62641: LIST
62642: LIST
62643: PUSH
62644: LD_VAR 0 1
62648: PUSH
62649: LD_INT 4
62651: PLUS
62652: PUSH
62653: LD_VAR 0 2
62657: PUSH
62658: LD_INT 4
62660: PLUS
62661: PUSH
62662: LD_INT 5
62664: PUSH
62665: EMPTY
62666: LIST
62667: LIST
62668: LIST
62669: PUSH
62670: EMPTY
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: ST_TO_ADDR
// end ; 2 :
62677: GO 63236
62679: LD_INT 2
62681: DOUBLE
62682: EQUAL
62683: IFTRUE 62687
62685: GO 62816
62687: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
62688: LD_ADDR_VAR 0 5
62692: PUSH
62693: LD_VAR 0 1
62697: PUSH
62698: LD_VAR 0 2
62702: PUSH
62703: LD_INT 3
62705: MINUS
62706: PUSH
62707: LD_INT 3
62709: PUSH
62710: EMPTY
62711: LIST
62712: LIST
62713: LIST
62714: PUSH
62715: LD_VAR 0 1
62719: PUSH
62720: LD_INT 4
62722: PLUS
62723: PUSH
62724: LD_VAR 0 2
62728: PUSH
62729: LD_INT 4
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: LIST
62736: PUSH
62737: LD_VAR 0 1
62741: PUSH
62742: LD_VAR 0 2
62746: PUSH
62747: LD_INT 4
62749: PLUS
62750: PUSH
62751: LD_INT 0
62753: PUSH
62754: EMPTY
62755: LIST
62756: LIST
62757: LIST
62758: PUSH
62759: LD_VAR 0 1
62763: PUSH
62764: LD_INT 3
62766: MINUS
62767: PUSH
62768: LD_VAR 0 2
62772: PUSH
62773: LD_INT 1
62775: PUSH
62776: EMPTY
62777: LIST
62778: LIST
62779: LIST
62780: PUSH
62781: LD_VAR 0 1
62785: PUSH
62786: LD_INT 4
62788: MINUS
62789: PUSH
62790: LD_VAR 0 2
62794: PUSH
62795: LD_INT 4
62797: MINUS
62798: PUSH
62799: LD_INT 2
62801: PUSH
62802: EMPTY
62803: LIST
62804: LIST
62805: LIST
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: LIST
62811: LIST
62812: LIST
62813: ST_TO_ADDR
// end ; 3 :
62814: GO 63236
62816: LD_INT 3
62818: DOUBLE
62819: EQUAL
62820: IFTRUE 62824
62822: GO 62957
62824: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
62825: LD_ADDR_VAR 0 5
62829: PUSH
62830: LD_VAR 0 1
62834: PUSH
62835: LD_INT 3
62837: PLUS
62838: PUSH
62839: LD_VAR 0 2
62843: PUSH
62844: LD_INT 4
62846: PUSH
62847: EMPTY
62848: LIST
62849: LIST
62850: LIST
62851: PUSH
62852: LD_VAR 0 1
62856: PUSH
62857: LD_INT 4
62859: PLUS
62860: PUSH
62861: LD_VAR 0 2
62865: PUSH
62866: LD_INT 4
62868: PLUS
62869: PUSH
62870: LD_INT 5
62872: PUSH
62873: EMPTY
62874: LIST
62875: LIST
62876: LIST
62877: PUSH
62878: LD_VAR 0 1
62882: PUSH
62883: LD_INT 4
62885: MINUS
62886: PUSH
62887: LD_VAR 0 2
62891: PUSH
62892: LD_INT 1
62894: PUSH
62895: EMPTY
62896: LIST
62897: LIST
62898: LIST
62899: PUSH
62900: LD_VAR 0 1
62904: PUSH
62905: LD_VAR 0 2
62909: PUSH
62910: LD_INT 4
62912: MINUS
62913: PUSH
62914: LD_INT 3
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: LIST
62921: PUSH
62922: LD_VAR 0 1
62926: PUSH
62927: LD_INT 3
62929: MINUS
62930: PUSH
62931: LD_VAR 0 2
62935: PUSH
62936: LD_INT 3
62938: MINUS
62939: PUSH
62940: LD_INT 2
62942: PUSH
62943: EMPTY
62944: LIST
62945: LIST
62946: LIST
62947: PUSH
62948: EMPTY
62949: LIST
62950: LIST
62951: LIST
62952: LIST
62953: LIST
62954: ST_TO_ADDR
// end ; 4 :
62955: GO 63236
62957: LD_INT 4
62959: DOUBLE
62960: EQUAL
62961: IFTRUE 62965
62963: GO 63098
62965: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
62966: LD_ADDR_VAR 0 5
62970: PUSH
62971: LD_VAR 0 1
62975: PUSH
62976: LD_VAR 0 2
62980: PUSH
62981: LD_INT 4
62983: PLUS
62984: PUSH
62985: LD_INT 0
62987: PUSH
62988: EMPTY
62989: LIST
62990: LIST
62991: LIST
62992: PUSH
62993: LD_VAR 0 1
62997: PUSH
62998: LD_INT 3
63000: PLUS
63001: PUSH
63002: LD_VAR 0 2
63006: PUSH
63007: LD_INT 3
63009: PLUS
63010: PUSH
63011: LD_INT 5
63013: PUSH
63014: EMPTY
63015: LIST
63016: LIST
63017: LIST
63018: PUSH
63019: LD_VAR 0 1
63023: PUSH
63024: LD_INT 4
63026: PLUS
63027: PUSH
63028: LD_VAR 0 2
63032: PUSH
63033: LD_INT 4
63035: PUSH
63036: EMPTY
63037: LIST
63038: LIST
63039: LIST
63040: PUSH
63041: LD_VAR 0 1
63045: PUSH
63046: LD_VAR 0 2
63050: PUSH
63051: LD_INT 3
63053: MINUS
63054: PUSH
63055: LD_INT 3
63057: PUSH
63058: EMPTY
63059: LIST
63060: LIST
63061: LIST
63062: PUSH
63063: LD_VAR 0 1
63067: PUSH
63068: LD_INT 4
63070: MINUS
63071: PUSH
63072: LD_VAR 0 2
63076: PUSH
63077: LD_INT 4
63079: MINUS
63080: PUSH
63081: LD_INT 2
63083: PUSH
63084: EMPTY
63085: LIST
63086: LIST
63087: LIST
63088: PUSH
63089: EMPTY
63090: LIST
63091: LIST
63092: LIST
63093: LIST
63094: LIST
63095: ST_TO_ADDR
// end ; 5 :
63096: GO 63236
63098: LD_INT 5
63100: DOUBLE
63101: EQUAL
63102: IFTRUE 63106
63104: GO 63235
63106: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
63107: LD_ADDR_VAR 0 5
63111: PUSH
63112: LD_VAR 0 1
63116: PUSH
63117: LD_INT 4
63119: MINUS
63120: PUSH
63121: LD_VAR 0 2
63125: PUSH
63126: LD_INT 1
63128: PUSH
63129: EMPTY
63130: LIST
63131: LIST
63132: LIST
63133: PUSH
63134: LD_VAR 0 1
63138: PUSH
63139: LD_VAR 0 2
63143: PUSH
63144: LD_INT 4
63146: MINUS
63147: PUSH
63148: LD_INT 3
63150: PUSH
63151: EMPTY
63152: LIST
63153: LIST
63154: LIST
63155: PUSH
63156: LD_VAR 0 1
63160: PUSH
63161: LD_INT 4
63163: PLUS
63164: PUSH
63165: LD_VAR 0 2
63169: PUSH
63170: LD_INT 4
63172: PLUS
63173: PUSH
63174: LD_INT 5
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: LIST
63181: PUSH
63182: LD_VAR 0 1
63186: PUSH
63187: LD_INT 3
63189: PLUS
63190: PUSH
63191: LD_VAR 0 2
63195: PUSH
63196: LD_INT 4
63198: PUSH
63199: EMPTY
63200: LIST
63201: LIST
63202: LIST
63203: PUSH
63204: LD_VAR 0 1
63208: PUSH
63209: LD_VAR 0 2
63213: PUSH
63214: LD_INT 3
63216: PLUS
63217: PUSH
63218: LD_INT 0
63220: PUSH
63221: EMPTY
63222: LIST
63223: LIST
63224: LIST
63225: PUSH
63226: EMPTY
63227: LIST
63228: LIST
63229: LIST
63230: LIST
63231: LIST
63232: ST_TO_ADDR
// end ; end ;
63233: GO 63236
63235: POP
// result := list ;
63236: LD_ADDR_VAR 0 4
63240: PUSH
63241: LD_VAR 0 5
63245: ST_TO_ADDR
// end ;
63246: LD_VAR 0 4
63250: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
63251: LD_INT 0
63253: PPUSH
63254: PPUSH
63255: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
63256: LD_VAR 0 1
63260: NOT
63261: IFTRUE 63289
63263: PUSH
63264: LD_VAR 0 2
63268: PUSH
63269: LD_INT 1
63271: PUSH
63272: LD_INT 2
63274: PUSH
63275: LD_INT 3
63277: PUSH
63278: LD_INT 4
63280: PUSH
63281: EMPTY
63282: LIST
63283: LIST
63284: LIST
63285: LIST
63286: IN
63287: NOT
63288: OR
63289: IFFALSE 63293
// exit ;
63291: GO 63376
// tmp := [ ] ;
63293: LD_ADDR_VAR 0 5
63297: PUSH
63298: EMPTY
63299: ST_TO_ADDR
// for i in units do
63300: LD_ADDR_VAR 0 4
63304: PUSH
63305: LD_VAR 0 1
63309: PUSH
63310: FOR_IN
63311: IFFALSE 63345
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
63313: LD_ADDR_VAR 0 5
63317: PUSH
63318: LD_VAR 0 5
63322: PPUSH
63323: LD_VAR 0 4
63327: PPUSH
63328: LD_VAR 0 2
63332: PPUSH
63333: CALL_OW 259
63337: PPUSH
63338: CALL 64771 0 2
63342: ST_TO_ADDR
63343: GO 63310
63345: POP
63346: POP
// if not tmp then
63347: LD_VAR 0 5
63351: NOT
63352: IFFALSE 63356
// exit ;
63354: GO 63376
// result := SortListByListDesc ( units , tmp ) ;
63356: LD_ADDR_VAR 0 3
63360: PUSH
63361: LD_VAR 0 1
63365: PPUSH
63366: LD_VAR 0 5
63370: PPUSH
63371: CALL_OW 77
63375: ST_TO_ADDR
// end ;
63376: LD_VAR 0 3
63380: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
63381: LD_INT 0
63383: PPUSH
63384: PPUSH
63385: PPUSH
// result := false ;
63386: LD_ADDR_VAR 0 3
63390: PUSH
63391: LD_INT 0
63393: ST_TO_ADDR
// if not building then
63394: LD_VAR 0 2
63398: NOT
63399: IFFALSE 63403
// exit ;
63401: GO 63547
// x := GetX ( building ) ;
63403: LD_ADDR_VAR 0 4
63407: PUSH
63408: LD_VAR 0 2
63412: PPUSH
63413: CALL_OW 250
63417: ST_TO_ADDR
// y := GetY ( building ) ;
63418: LD_ADDR_VAR 0 5
63422: PUSH
63423: LD_VAR 0 2
63427: PPUSH
63428: CALL_OW 251
63432: ST_TO_ADDR
// if not x or not y then
63433: LD_VAR 0 4
63437: NOT
63438: IFTRUE 63447
63440: PUSH
63441: LD_VAR 0 5
63445: NOT
63446: OR
63447: IFFALSE 63451
// exit ;
63449: GO 63547
// if GetTaskList ( unit ) then
63451: LD_VAR 0 1
63455: PPUSH
63456: CALL_OW 437
63460: IFFALSE 63547
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63462: LD_STRING e
63464: PUSH
63465: LD_VAR 0 1
63469: PPUSH
63470: CALL_OW 437
63474: PUSH
63475: LD_INT 1
63477: ARRAY
63478: PUSH
63479: LD_INT 1
63481: ARRAY
63482: EQUAL
63483: IFFALSE 63510
63485: PUSH
63486: LD_VAR 0 4
63490: PUSH
63491: LD_VAR 0 1
63495: PPUSH
63496: CALL_OW 437
63500: PUSH
63501: LD_INT 1
63503: ARRAY
63504: PUSH
63505: LD_INT 2
63507: ARRAY
63508: EQUAL
63509: AND
63510: IFFALSE 63537
63512: PUSH
63513: LD_VAR 0 5
63517: PUSH
63518: LD_VAR 0 1
63522: PPUSH
63523: CALL_OW 437
63527: PUSH
63528: LD_INT 1
63530: ARRAY
63531: PUSH
63532: LD_INT 3
63534: ARRAY
63535: EQUAL
63536: AND
63537: IFFALSE 63547
// result := true end ;
63539: LD_ADDR_VAR 0 3
63543: PUSH
63544: LD_INT 1
63546: ST_TO_ADDR
// end ;
63547: LD_VAR 0 3
63551: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
63552: LD_INT 0
63554: PPUSH
// result := false ;
63555: LD_ADDR_VAR 0 4
63559: PUSH
63560: LD_INT 0
63562: ST_TO_ADDR
// if GetTaskList ( unit ) then
63563: LD_VAR 0 1
63567: PPUSH
63568: CALL_OW 437
63572: IFFALSE 63659
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
63574: LD_STRING M
63576: PUSH
63577: LD_VAR 0 1
63581: PPUSH
63582: CALL_OW 437
63586: PUSH
63587: LD_INT 1
63589: ARRAY
63590: PUSH
63591: LD_INT 1
63593: ARRAY
63594: EQUAL
63595: IFFALSE 63622
63597: PUSH
63598: LD_VAR 0 2
63602: PUSH
63603: LD_VAR 0 1
63607: PPUSH
63608: CALL_OW 437
63612: PUSH
63613: LD_INT 1
63615: ARRAY
63616: PUSH
63617: LD_INT 2
63619: ARRAY
63620: EQUAL
63621: AND
63622: IFFALSE 63649
63624: PUSH
63625: LD_VAR 0 3
63629: PUSH
63630: LD_VAR 0 1
63634: PPUSH
63635: CALL_OW 437
63639: PUSH
63640: LD_INT 1
63642: ARRAY
63643: PUSH
63644: LD_INT 3
63646: ARRAY
63647: EQUAL
63648: AND
63649: IFFALSE 63659
// result := true ;
63651: LD_ADDR_VAR 0 4
63655: PUSH
63656: LD_INT 1
63658: ST_TO_ADDR
// end ; end ;
63659: LD_VAR 0 4
63663: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
63664: LD_INT 0
63666: PPUSH
63667: PPUSH
63668: PPUSH
63669: PPUSH
// if not unit or not area then
63670: LD_VAR 0 1
63674: NOT
63675: IFTRUE 63684
63677: PUSH
63678: LD_VAR 0 2
63682: NOT
63683: OR
63684: IFFALSE 63688
// exit ;
63686: GO 63864
// tmp := AreaToList ( area , i ) ;
63688: LD_ADDR_VAR 0 6
63692: PUSH
63693: LD_VAR 0 2
63697: PPUSH
63698: LD_VAR 0 5
63702: PPUSH
63703: CALL_OW 517
63707: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
63708: LD_ADDR_VAR 0 5
63712: PUSH
63713: DOUBLE
63714: LD_INT 1
63716: DEC
63717: ST_TO_ADDR
63718: LD_VAR 0 6
63722: PUSH
63723: LD_INT 1
63725: ARRAY
63726: PUSH
63727: FOR_TO
63728: IFFALSE 63862
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
63730: LD_ADDR_VAR 0 7
63734: PUSH
63735: LD_VAR 0 6
63739: PUSH
63740: LD_INT 1
63742: ARRAY
63743: PUSH
63744: LD_VAR 0 5
63748: ARRAY
63749: PUSH
63750: LD_VAR 0 6
63754: PUSH
63755: LD_INT 2
63757: ARRAY
63758: PUSH
63759: LD_VAR 0 5
63763: ARRAY
63764: PUSH
63765: EMPTY
63766: LIST
63767: LIST
63768: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
63769: LD_INT 92
63771: PUSH
63772: LD_VAR 0 7
63776: PUSH
63777: LD_INT 1
63779: ARRAY
63780: PUSH
63781: LD_VAR 0 7
63785: PUSH
63786: LD_INT 2
63788: ARRAY
63789: PUSH
63790: LD_INT 2
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: LIST
63797: LIST
63798: PPUSH
63799: CALL_OW 69
63803: PUSH
63804: LD_INT 0
63806: EQUAL
63807: IFFALSE 63860
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
63809: LD_VAR 0 1
63813: PPUSH
63814: LD_VAR 0 7
63818: PUSH
63819: LD_INT 1
63821: ARRAY
63822: PPUSH
63823: LD_VAR 0 7
63827: PUSH
63828: LD_INT 2
63830: ARRAY
63831: PPUSH
63832: LD_VAR 0 3
63836: PPUSH
63837: CALL_OW 48
// result := IsPlaced ( unit ) ;
63841: LD_ADDR_VAR 0 4
63845: PUSH
63846: LD_VAR 0 1
63850: PPUSH
63851: CALL_OW 305
63855: ST_TO_ADDR
// exit ;
63856: POP
63857: POP
63858: GO 63864
// end ; end ;
63860: GO 63727
63862: POP
63863: POP
// end ;
63864: LD_VAR 0 4
63868: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
63869: LD_INT 0
63871: PPUSH
63872: PPUSH
63873: PPUSH
// if not side or side > 8 then
63874: LD_VAR 0 1
63878: NOT
63879: IFTRUE 63891
63881: PUSH
63882: LD_VAR 0 1
63886: PUSH
63887: LD_INT 8
63889: GREATER
63890: OR
63891: IFFALSE 63895
// exit ;
63893: GO 64082
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
63895: LD_ADDR_VAR 0 4
63899: PUSH
63900: LD_INT 22
63902: PUSH
63903: LD_VAR 0 1
63907: PUSH
63908: EMPTY
63909: LIST
63910: LIST
63911: PUSH
63912: LD_INT 21
63914: PUSH
63915: LD_INT 3
63917: PUSH
63918: EMPTY
63919: LIST
63920: LIST
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PPUSH
63926: CALL_OW 69
63930: ST_TO_ADDR
// if not tmp then
63931: LD_VAR 0 4
63935: NOT
63936: IFFALSE 63940
// exit ;
63938: GO 64082
// enable_addtolog := true ;
63940: LD_ADDR_OWVAR 81
63944: PUSH
63945: LD_INT 1
63947: ST_TO_ADDR
// AddToLog ( [ ) ;
63948: LD_STRING [
63950: PPUSH
63951: CALL_OW 561
// for i in tmp do
63955: LD_ADDR_VAR 0 3
63959: PUSH
63960: LD_VAR 0 4
63964: PUSH
63965: FOR_IN
63966: IFFALSE 64073
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
63968: LD_STRING [
63970: PUSH
63971: LD_VAR 0 3
63975: PPUSH
63976: CALL_OW 266
63980: STR
63981: PUSH
63982: LD_STRING , 
63984: STR
63985: PUSH
63986: LD_VAR 0 3
63990: PPUSH
63991: CALL_OW 250
63995: STR
63996: PUSH
63997: LD_STRING , 
63999: STR
64000: PUSH
64001: LD_VAR 0 3
64005: PPUSH
64006: CALL_OW 251
64010: STR
64011: PUSH
64012: LD_STRING , 
64014: STR
64015: PUSH
64016: LD_VAR 0 3
64020: PPUSH
64021: CALL_OW 254
64025: STR
64026: PUSH
64027: LD_STRING , 
64029: STR
64030: PUSH
64031: LD_VAR 0 3
64035: PPUSH
64036: LD_INT 1
64038: PPUSH
64039: CALL_OW 268
64043: STR
64044: PUSH
64045: LD_STRING , 
64047: STR
64048: PUSH
64049: LD_VAR 0 3
64053: PPUSH
64054: LD_INT 2
64056: PPUSH
64057: CALL_OW 268
64061: STR
64062: PUSH
64063: LD_STRING ],
64065: STR
64066: PPUSH
64067: CALL_OW 561
// end ;
64071: GO 63965
64073: POP
64074: POP
// AddToLog ( ]; ) ;
64075: LD_STRING ];
64077: PPUSH
64078: CALL_OW 561
// end ;
64082: LD_VAR 0 2
64086: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
64087: LD_INT 0
64089: PPUSH
64090: PPUSH
64091: PPUSH
64092: PPUSH
64093: PPUSH
// if not area or not rate or not max then
64094: LD_VAR 0 1
64098: NOT
64099: IFTRUE 64108
64101: PUSH
64102: LD_VAR 0 2
64106: NOT
64107: OR
64108: IFTRUE 64117
64110: PUSH
64111: LD_VAR 0 4
64115: NOT
64116: OR
64117: IFFALSE 64121
// exit ;
64119: GO 64310
// while 1 do
64121: LD_INT 1
64123: IFFALSE 64310
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
64125: LD_ADDR_VAR 0 9
64129: PUSH
64130: LD_VAR 0 1
64134: PPUSH
64135: LD_INT 1
64137: PPUSH
64138: CALL_OW 287
64142: PUSH
64143: LD_INT 10
64145: MUL
64146: ST_TO_ADDR
// r := rate / 10 ;
64147: LD_ADDR_VAR 0 7
64151: PUSH
64152: LD_VAR 0 2
64156: PUSH
64157: LD_INT 10
64159: DIVREAL
64160: ST_TO_ADDR
// time := 1 1$00 ;
64161: LD_ADDR_VAR 0 8
64165: PUSH
64166: LD_INT 2100
64168: ST_TO_ADDR
// if amount < min then
64169: LD_VAR 0 9
64173: PUSH
64174: LD_VAR 0 3
64178: LESS
64179: IFFALSE 64197
// r := r * 2 else
64181: LD_ADDR_VAR 0 7
64185: PUSH
64186: LD_VAR 0 7
64190: PUSH
64191: LD_INT 2
64193: MUL
64194: ST_TO_ADDR
64195: GO 64223
// if amount > max then
64197: LD_VAR 0 9
64201: PUSH
64202: LD_VAR 0 4
64206: GREATER
64207: IFFALSE 64223
// r := r / 2 ;
64209: LD_ADDR_VAR 0 7
64213: PUSH
64214: LD_VAR 0 7
64218: PUSH
64219: LD_INT 2
64221: DIVREAL
64222: ST_TO_ADDR
// time := time / r ;
64223: LD_ADDR_VAR 0 8
64227: PUSH
64228: LD_VAR 0 8
64232: PUSH
64233: LD_VAR 0 7
64237: DIVREAL
64238: ST_TO_ADDR
// if time < 0 then
64239: LD_VAR 0 8
64243: PUSH
64244: LD_INT 0
64246: LESS
64247: IFFALSE 64264
// time := time * - 1 ;
64249: LD_ADDR_VAR 0 8
64253: PUSH
64254: LD_VAR 0 8
64258: PUSH
64259: LD_INT 1
64261: NEG
64262: MUL
64263: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
64264: LD_VAR 0 8
64268: PUSH
64269: LD_INT 35
64271: PPUSH
64272: LD_INT 875
64274: PPUSH
64275: CALL_OW 12
64279: PLUS
64280: PPUSH
64281: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
64285: LD_INT 1
64287: PPUSH
64288: LD_INT 5
64290: PPUSH
64291: CALL_OW 12
64295: PPUSH
64296: LD_VAR 0 1
64300: PPUSH
64301: LD_INT 1
64303: PPUSH
64304: CALL_OW 55
// end ;
64308: GO 64121
// end ;
64310: LD_VAR 0 5
64314: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
64315: LD_INT 0
64317: PPUSH
64318: PPUSH
64319: PPUSH
64320: PPUSH
64321: PPUSH
64322: PPUSH
64323: PPUSH
64324: PPUSH
// if not turrets or not factories then
64325: LD_VAR 0 1
64329: NOT
64330: IFTRUE 64339
64332: PUSH
64333: LD_VAR 0 2
64337: NOT
64338: OR
64339: IFFALSE 64343
// exit ;
64341: GO 64650
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
64343: LD_ADDR_VAR 0 10
64347: PUSH
64348: LD_INT 5
64350: PUSH
64351: LD_INT 6
64353: PUSH
64354: EMPTY
64355: LIST
64356: LIST
64357: PUSH
64358: LD_INT 2
64360: PUSH
64361: LD_INT 4
64363: PUSH
64364: EMPTY
64365: LIST
64366: LIST
64367: PUSH
64368: LD_INT 3
64370: PUSH
64371: LD_INT 5
64373: PUSH
64374: EMPTY
64375: LIST
64376: LIST
64377: PUSH
64378: EMPTY
64379: LIST
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 24
64385: PUSH
64386: LD_INT 25
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 23
64395: PUSH
64396: LD_INT 27
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: EMPTY
64404: LIST
64405: LIST
64406: PUSH
64407: LD_INT 42
64409: PUSH
64410: LD_INT 43
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 44
64419: PUSH
64420: LD_INT 46
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 45
64429: PUSH
64430: LD_INT 47
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: EMPTY
64438: LIST
64439: LIST
64440: LIST
64441: PUSH
64442: EMPTY
64443: LIST
64444: LIST
64445: LIST
64446: ST_TO_ADDR
// result := [ ] ;
64447: LD_ADDR_VAR 0 3
64451: PUSH
64452: EMPTY
64453: ST_TO_ADDR
// for i in turrets do
64454: LD_ADDR_VAR 0 4
64458: PUSH
64459: LD_VAR 0 1
64463: PUSH
64464: FOR_IN
64465: IFFALSE 64648
// begin nat := GetNation ( i ) ;
64467: LD_ADDR_VAR 0 7
64471: PUSH
64472: LD_VAR 0 4
64476: PPUSH
64477: CALL_OW 248
64481: ST_TO_ADDR
// weapon := 0 ;
64482: LD_ADDR_VAR 0 8
64486: PUSH
64487: LD_INT 0
64489: ST_TO_ADDR
// if not nat then
64490: LD_VAR 0 7
64494: NOT
64495: IFFALSE 64499
// continue ;
64497: GO 64464
// for j in list [ nat ] do
64499: LD_ADDR_VAR 0 5
64503: PUSH
64504: LD_VAR 0 10
64508: PUSH
64509: LD_VAR 0 7
64513: ARRAY
64514: PUSH
64515: FOR_IN
64516: IFFALSE 64557
// if GetBWeapon ( i ) = j [ 1 ] then
64518: LD_VAR 0 4
64522: PPUSH
64523: CALL_OW 269
64527: PUSH
64528: LD_VAR 0 5
64532: PUSH
64533: LD_INT 1
64535: ARRAY
64536: EQUAL
64537: IFFALSE 64555
// begin weapon := j [ 2 ] ;
64539: LD_ADDR_VAR 0 8
64543: PUSH
64544: LD_VAR 0 5
64548: PUSH
64549: LD_INT 2
64551: ARRAY
64552: ST_TO_ADDR
// break ;
64553: GO 64557
// end ;
64555: GO 64515
64557: POP
64558: POP
// if not weapon then
64559: LD_VAR 0 8
64563: NOT
64564: IFFALSE 64568
// continue ;
64566: GO 64464
// for k in factories do
64568: LD_ADDR_VAR 0 6
64572: PUSH
64573: LD_VAR 0 2
64577: PUSH
64578: FOR_IN
64579: IFFALSE 64644
// begin weapons := AvailableWeaponList ( k ) ;
64581: LD_ADDR_VAR 0 9
64585: PUSH
64586: LD_VAR 0 6
64590: PPUSH
64591: CALL_OW 478
64595: ST_TO_ADDR
// if not weapons then
64596: LD_VAR 0 9
64600: NOT
64601: IFFALSE 64605
// continue ;
64603: GO 64578
// if weapon in weapons then
64605: LD_VAR 0 8
64609: PUSH
64610: LD_VAR 0 9
64614: IN
64615: IFFALSE 64642
// begin result := [ i , weapon ] ;
64617: LD_ADDR_VAR 0 3
64621: PUSH
64622: LD_VAR 0 4
64626: PUSH
64627: LD_VAR 0 8
64631: PUSH
64632: EMPTY
64633: LIST
64634: LIST
64635: ST_TO_ADDR
// exit ;
64636: POP
64637: POP
64638: POP
64639: POP
64640: GO 64650
// end ; end ;
64642: GO 64578
64644: POP
64645: POP
// end ;
64646: GO 64464
64648: POP
64649: POP
// end ;
64650: LD_VAR 0 3
64654: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
64655: LD_INT 0
64657: PPUSH
// if not side or side > 8 then
64658: LD_VAR 0 3
64662: NOT
64663: IFTRUE 64675
64665: PUSH
64666: LD_VAR 0 3
64670: PUSH
64671: LD_INT 8
64673: GREATER
64674: OR
64675: IFFALSE 64679
// exit ;
64677: GO 64738
// if not range then
64679: LD_VAR 0 4
64683: NOT
64684: IFFALSE 64695
// range := - 12 ;
64686: LD_ADDR_VAR 0 4
64690: PUSH
64691: LD_INT 12
64693: NEG
64694: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
64695: LD_VAR 0 1
64699: PPUSH
64700: LD_VAR 0 2
64704: PPUSH
64705: LD_VAR 0 3
64709: PPUSH
64710: LD_VAR 0 4
64714: PPUSH
64715: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
64719: LD_VAR 0 1
64723: PPUSH
64724: LD_VAR 0 2
64728: PPUSH
64729: LD_VAR 0 3
64733: PPUSH
64734: CALL_OW 331
// end ;
64738: LD_VAR 0 5
64742: RET
// export function Video ( mode ) ; begin
64743: LD_INT 0
64745: PPUSH
// ingame_video = mode ;
64746: LD_ADDR_OWVAR 52
64750: PUSH
64751: LD_VAR 0 1
64755: ST_TO_ADDR
// interface_hidden = mode ;
64756: LD_ADDR_OWVAR 54
64760: PUSH
64761: LD_VAR 0 1
64765: ST_TO_ADDR
// end ;
64766: LD_VAR 0 2
64770: RET
// export function Join ( array , element ) ; begin
64771: LD_INT 0
64773: PPUSH
// result := Replace ( array , array + 1 , element ) ;
64774: LD_ADDR_VAR 0 3
64778: PUSH
64779: LD_VAR 0 1
64783: PPUSH
64784: LD_VAR 0 1
64788: PUSH
64789: LD_INT 1
64791: PLUS
64792: PPUSH
64793: LD_VAR 0 2
64797: PPUSH
64798: CALL_OW 1
64802: ST_TO_ADDR
// end ;
64803: LD_VAR 0 3
64807: RET
// export function JoinUnion ( array , element ) ; begin
64808: LD_INT 0
64810: PPUSH
// result := array union element ;
64811: LD_ADDR_VAR 0 3
64815: PUSH
64816: LD_VAR 0 1
64820: PUSH
64821: LD_VAR 0 2
64825: UNION
64826: ST_TO_ADDR
// end ;
64827: LD_VAR 0 3
64831: RET
// export function GetBehemoths ( side ) ; begin
64832: LD_INT 0
64834: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
64835: LD_ADDR_VAR 0 2
64839: PUSH
64840: LD_INT 22
64842: PUSH
64843: LD_VAR 0 1
64847: PUSH
64848: EMPTY
64849: LIST
64850: LIST
64851: PUSH
64852: LD_INT 31
64854: PUSH
64855: LD_INT 25
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PPUSH
64866: CALL_OW 69
64870: ST_TO_ADDR
// end ;
64871: LD_VAR 0 2
64875: RET
// export function Shuffle ( array ) ; var i , index ; begin
64876: LD_INT 0
64878: PPUSH
64879: PPUSH
64880: PPUSH
// result := [ ] ;
64881: LD_ADDR_VAR 0 2
64885: PUSH
64886: EMPTY
64887: ST_TO_ADDR
// if not array then
64888: LD_VAR 0 1
64892: NOT
64893: IFFALSE 64897
// exit ;
64895: GO 64996
// Randomize ;
64897: CALL_OW 10
// for i = array downto 1 do
64901: LD_ADDR_VAR 0 3
64905: PUSH
64906: DOUBLE
64907: LD_VAR 0 1
64911: INC
64912: ST_TO_ADDR
64913: LD_INT 1
64915: PUSH
64916: FOR_DOWNTO
64917: IFFALSE 64994
// begin index := rand ( 1 , array ) ;
64919: LD_ADDR_VAR 0 4
64923: PUSH
64924: LD_INT 1
64926: PPUSH
64927: LD_VAR 0 1
64931: PPUSH
64932: CALL_OW 12
64936: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
64937: LD_ADDR_VAR 0 2
64941: PUSH
64942: LD_VAR 0 2
64946: PPUSH
64947: LD_VAR 0 2
64951: PUSH
64952: LD_INT 1
64954: PLUS
64955: PPUSH
64956: LD_VAR 0 1
64960: PUSH
64961: LD_VAR 0 4
64965: ARRAY
64966: PPUSH
64967: CALL_OW 2
64971: ST_TO_ADDR
// array := Delete ( array , index ) ;
64972: LD_ADDR_VAR 0 1
64976: PUSH
64977: LD_VAR 0 1
64981: PPUSH
64982: LD_VAR 0 4
64986: PPUSH
64987: CALL_OW 3
64991: ST_TO_ADDR
// end ;
64992: GO 64916
64994: POP
64995: POP
// end ;
64996: LD_VAR 0 2
65000: RET
// export function GetBaseMaterials ( base ) ; begin
65001: LD_INT 0
65003: PPUSH
// result := [ 0 , 0 , 0 ] ;
65004: LD_ADDR_VAR 0 2
65008: PUSH
65009: LD_INT 0
65011: PUSH
65012: LD_INT 0
65014: PUSH
65015: LD_INT 0
65017: PUSH
65018: EMPTY
65019: LIST
65020: LIST
65021: LIST
65022: ST_TO_ADDR
// if not base then
65023: LD_VAR 0 1
65027: NOT
65028: IFFALSE 65032
// exit ;
65030: GO 65081
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
65032: LD_ADDR_VAR 0 2
65036: PUSH
65037: LD_VAR 0 1
65041: PPUSH
65042: LD_INT 1
65044: PPUSH
65045: CALL_OW 275
65049: PUSH
65050: LD_VAR 0 1
65054: PPUSH
65055: LD_INT 2
65057: PPUSH
65058: CALL_OW 275
65062: PUSH
65063: LD_VAR 0 1
65067: PPUSH
65068: LD_INT 3
65070: PPUSH
65071: CALL_OW 275
65075: PUSH
65076: EMPTY
65077: LIST
65078: LIST
65079: LIST
65080: ST_TO_ADDR
// end ;
65081: LD_VAR 0 2
65085: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
65086: LD_INT 0
65088: PPUSH
65089: PPUSH
// result := array ;
65090: LD_ADDR_VAR 0 3
65094: PUSH
65095: LD_VAR 0 1
65099: ST_TO_ADDR
// if size >= result then
65100: LD_VAR 0 2
65104: PUSH
65105: LD_VAR 0 3
65109: GREATEREQUAL
65110: IFFALSE 65114
// exit ;
65112: GO 65164
// if size then
65114: LD_VAR 0 2
65118: IFFALSE 65164
// for i := array downto size do
65120: LD_ADDR_VAR 0 4
65124: PUSH
65125: DOUBLE
65126: LD_VAR 0 1
65130: INC
65131: ST_TO_ADDR
65132: LD_VAR 0 2
65136: PUSH
65137: FOR_DOWNTO
65138: IFFALSE 65162
// result := Delete ( result , result ) ;
65140: LD_ADDR_VAR 0 3
65144: PUSH
65145: LD_VAR 0 3
65149: PPUSH
65150: LD_VAR 0 3
65154: PPUSH
65155: CALL_OW 3
65159: ST_TO_ADDR
65160: GO 65137
65162: POP
65163: POP
// end ;
65164: LD_VAR 0 3
65168: RET
// export function ComExit ( unit ) ; var tmp ; begin
65169: LD_INT 0
65171: PPUSH
65172: PPUSH
// if not IsInUnit ( unit ) then
65173: LD_VAR 0 1
65177: PPUSH
65178: CALL_OW 310
65182: NOT
65183: IFFALSE 65187
// exit ;
65185: GO 65247
// tmp := IsInUnit ( unit ) ;
65187: LD_ADDR_VAR 0 3
65191: PUSH
65192: LD_VAR 0 1
65196: PPUSH
65197: CALL_OW 310
65201: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
65202: LD_VAR 0 3
65206: PPUSH
65207: CALL_OW 247
65211: PUSH
65212: LD_INT 2
65214: EQUAL
65215: IFFALSE 65228
// ComExitVehicle ( unit ) else
65217: LD_VAR 0 1
65221: PPUSH
65222: CALL_OW 121
65226: GO 65237
// ComExitBuilding ( unit ) ;
65228: LD_VAR 0 1
65232: PPUSH
65233: CALL_OW 122
// result := tmp ;
65237: LD_ADDR_VAR 0 2
65241: PUSH
65242: LD_VAR 0 3
65246: ST_TO_ADDR
// end ;
65247: LD_VAR 0 2
65251: RET
// export function ComExitAll ( units ) ; var i ; begin
65252: LD_INT 0
65254: PPUSH
65255: PPUSH
// if not units then
65256: LD_VAR 0 1
65260: NOT
65261: IFFALSE 65265
// exit ;
65263: GO 65291
// for i in units do
65265: LD_ADDR_VAR 0 3
65269: PUSH
65270: LD_VAR 0 1
65274: PUSH
65275: FOR_IN
65276: IFFALSE 65289
// ComExit ( i ) ;
65278: LD_VAR 0 3
65282: PPUSH
65283: CALL 65169 0 1
65287: GO 65275
65289: POP
65290: POP
// end ;
65291: LD_VAR 0 2
65295: RET
// export function ResetHc ; begin
65296: LD_INT 0
65298: PPUSH
// InitHc ;
65299: CALL_OW 19
// hc_importance := 0 ;
65303: LD_ADDR_OWVAR 32
65307: PUSH
65308: LD_INT 0
65310: ST_TO_ADDR
// end ;
65311: LD_VAR 0 1
65315: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
65316: LD_INT 0
65318: PPUSH
65319: PPUSH
65320: PPUSH
// _x := ( x1 + x2 ) div 2 ;
65321: LD_ADDR_VAR 0 6
65325: PUSH
65326: LD_VAR 0 1
65330: PUSH
65331: LD_VAR 0 3
65335: PLUS
65336: PUSH
65337: LD_INT 2
65339: DIV
65340: ST_TO_ADDR
// if _x < 0 then
65341: LD_VAR 0 6
65345: PUSH
65346: LD_INT 0
65348: LESS
65349: IFFALSE 65366
// _x := _x * - 1 ;
65351: LD_ADDR_VAR 0 6
65355: PUSH
65356: LD_VAR 0 6
65360: PUSH
65361: LD_INT 1
65363: NEG
65364: MUL
65365: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
65366: LD_ADDR_VAR 0 7
65370: PUSH
65371: LD_VAR 0 2
65375: PUSH
65376: LD_VAR 0 4
65380: PLUS
65381: PUSH
65382: LD_INT 2
65384: DIV
65385: ST_TO_ADDR
// if _y < 0 then
65386: LD_VAR 0 7
65390: PUSH
65391: LD_INT 0
65393: LESS
65394: IFFALSE 65411
// _y := _y * - 1 ;
65396: LD_ADDR_VAR 0 7
65400: PUSH
65401: LD_VAR 0 7
65405: PUSH
65406: LD_INT 1
65408: NEG
65409: MUL
65410: ST_TO_ADDR
// result := [ _x , _y ] ;
65411: LD_ADDR_VAR 0 5
65415: PUSH
65416: LD_VAR 0 6
65420: PUSH
65421: LD_VAR 0 7
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: ST_TO_ADDR
// end ;
65430: LD_VAR 0 5
65434: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
65435: LD_INT 0
65437: PPUSH
65438: PPUSH
65439: PPUSH
65440: PPUSH
// task := GetTaskList ( unit ) ;
65441: LD_ADDR_VAR 0 7
65445: PUSH
65446: LD_VAR 0 1
65450: PPUSH
65451: CALL_OW 437
65455: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
65456: LD_VAR 0 7
65460: NOT
65461: IFFALSE 65480
65463: PUSH
65464: LD_VAR 0 1
65468: PPUSH
65469: LD_VAR 0 2
65473: PPUSH
65474: CALL_OW 308
65478: NOT
65479: AND
65480: IFFALSE 65484
// exit ;
65482: GO 65602
// if IsInArea ( unit , area ) then
65484: LD_VAR 0 1
65488: PPUSH
65489: LD_VAR 0 2
65493: PPUSH
65494: CALL_OW 308
65498: IFFALSE 65516
// begin ComMoveToArea ( unit , goAway ) ;
65500: LD_VAR 0 1
65504: PPUSH
65505: LD_VAR 0 3
65509: PPUSH
65510: CALL_OW 113
// exit ;
65514: GO 65602
// end ; if task [ 1 ] [ 1 ] <> M then
65516: LD_VAR 0 7
65520: PUSH
65521: LD_INT 1
65523: ARRAY
65524: PUSH
65525: LD_INT 1
65527: ARRAY
65528: PUSH
65529: LD_STRING M
65531: NONEQUAL
65532: IFFALSE 65536
// exit ;
65534: GO 65602
// x := task [ 1 ] [ 2 ] ;
65536: LD_ADDR_VAR 0 5
65540: PUSH
65541: LD_VAR 0 7
65545: PUSH
65546: LD_INT 1
65548: ARRAY
65549: PUSH
65550: LD_INT 2
65552: ARRAY
65553: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
65554: LD_ADDR_VAR 0 6
65558: PUSH
65559: LD_VAR 0 7
65563: PUSH
65564: LD_INT 1
65566: ARRAY
65567: PUSH
65568: LD_INT 3
65570: ARRAY
65571: ST_TO_ADDR
// if InArea ( x , y , area ) then
65572: LD_VAR 0 5
65576: PPUSH
65577: LD_VAR 0 6
65581: PPUSH
65582: LD_VAR 0 2
65586: PPUSH
65587: CALL_OW 309
65591: IFFALSE 65602
// ComStop ( unit ) ;
65593: LD_VAR 0 1
65597: PPUSH
65598: CALL_OW 141
// end ;
65602: LD_VAR 0 4
65606: RET
// export function Abs ( value ) ; begin
65607: LD_INT 0
65609: PPUSH
// result := value ;
65610: LD_ADDR_VAR 0 2
65614: PUSH
65615: LD_VAR 0 1
65619: ST_TO_ADDR
// if value < 0 then
65620: LD_VAR 0 1
65624: PUSH
65625: LD_INT 0
65627: LESS
65628: IFFALSE 65645
// result := value * - 1 ;
65630: LD_ADDR_VAR 0 2
65634: PUSH
65635: LD_VAR 0 1
65639: PUSH
65640: LD_INT 1
65642: NEG
65643: MUL
65644: ST_TO_ADDR
// end ;
65645: LD_VAR 0 2
65649: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
65650: LD_INT 0
65652: PPUSH
65653: PPUSH
65654: PPUSH
65655: PPUSH
65656: PPUSH
65657: PPUSH
65658: PPUSH
65659: PPUSH
// if not unit or not building then
65660: LD_VAR 0 1
65664: NOT
65665: IFTRUE 65674
65667: PUSH
65668: LD_VAR 0 2
65672: NOT
65673: OR
65674: IFFALSE 65678
// exit ;
65676: GO 65906
// x := GetX ( building ) ;
65678: LD_ADDR_VAR 0 4
65682: PUSH
65683: LD_VAR 0 2
65687: PPUSH
65688: CALL_OW 250
65692: ST_TO_ADDR
// y := GetY ( building ) ;
65693: LD_ADDR_VAR 0 6
65697: PUSH
65698: LD_VAR 0 2
65702: PPUSH
65703: CALL_OW 251
65707: ST_TO_ADDR
// d := GetDir ( building ) ;
65708: LD_ADDR_VAR 0 8
65712: PUSH
65713: LD_VAR 0 2
65717: PPUSH
65718: CALL_OW 254
65722: ST_TO_ADDR
// r := 4 ;
65723: LD_ADDR_VAR 0 9
65727: PUSH
65728: LD_INT 4
65730: ST_TO_ADDR
// for i := 1 to 5 do
65731: LD_ADDR_VAR 0 10
65735: PUSH
65736: DOUBLE
65737: LD_INT 1
65739: DEC
65740: ST_TO_ADDR
65741: LD_INT 5
65743: PUSH
65744: FOR_TO
65745: IFFALSE 65904
// begin _x := ShiftX ( x , d , r + i ) ;
65747: LD_ADDR_VAR 0 5
65751: PUSH
65752: LD_VAR 0 4
65756: PPUSH
65757: LD_VAR 0 8
65761: PPUSH
65762: LD_VAR 0 9
65766: PUSH
65767: LD_VAR 0 10
65771: PLUS
65772: PPUSH
65773: CALL_OW 272
65777: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
65778: LD_ADDR_VAR 0 7
65782: PUSH
65783: LD_VAR 0 6
65787: PPUSH
65788: LD_VAR 0 8
65792: PPUSH
65793: LD_VAR 0 9
65797: PUSH
65798: LD_VAR 0 10
65802: PLUS
65803: PPUSH
65804: CALL_OW 273
65808: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
65809: LD_VAR 0 5
65813: PPUSH
65814: LD_VAR 0 7
65818: PPUSH
65819: CALL_OW 488
65823: IFFALSE 65858
65825: PUSH
65826: LD_VAR 0 5
65830: PPUSH
65831: LD_VAR 0 7
65835: PPUSH
65836: CALL_OW 428
65840: PPUSH
65841: CALL_OW 247
65845: PUSH
65846: LD_INT 3
65848: PUSH
65849: LD_INT 2
65851: PUSH
65852: EMPTY
65853: LIST
65854: LIST
65855: IN
65856: NOT
65857: AND
65858: IFFALSE 65902
// begin ComMoveXY ( unit , _x , _y ) ;
65860: LD_VAR 0 1
65864: PPUSH
65865: LD_VAR 0 5
65869: PPUSH
65870: LD_VAR 0 7
65874: PPUSH
65875: CALL_OW 111
// result := [ _x , _y ] ;
65879: LD_ADDR_VAR 0 3
65883: PUSH
65884: LD_VAR 0 5
65888: PUSH
65889: LD_VAR 0 7
65893: PUSH
65894: EMPTY
65895: LIST
65896: LIST
65897: ST_TO_ADDR
// exit ;
65898: POP
65899: POP
65900: GO 65906
// end ; end ;
65902: GO 65744
65904: POP
65905: POP
// end ;
65906: LD_VAR 0 3
65910: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
65911: LD_INT 0
65913: PPUSH
65914: PPUSH
65915: PPUSH
// result := 0 ;
65916: LD_ADDR_VAR 0 3
65920: PUSH
65921: LD_INT 0
65923: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
65924: LD_VAR 0 1
65928: PUSH
65929: LD_INT 0
65931: LESS
65932: IFTRUE 65944
65934: PUSH
65935: LD_VAR 0 1
65939: PUSH
65940: LD_INT 8
65942: GREATER
65943: OR
65944: IFTRUE 65956
65946: PUSH
65947: LD_VAR 0 2
65951: PUSH
65952: LD_INT 0
65954: LESS
65955: OR
65956: IFTRUE 65968
65958: PUSH
65959: LD_VAR 0 2
65963: PUSH
65964: LD_INT 8
65966: GREATER
65967: OR
65968: IFFALSE 65972
// exit ;
65970: GO 66047
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
65972: LD_ADDR_VAR 0 4
65976: PUSH
65977: LD_INT 22
65979: PUSH
65980: LD_VAR 0 2
65984: PUSH
65985: EMPTY
65986: LIST
65987: LIST
65988: PPUSH
65989: CALL_OW 69
65993: PUSH
65994: FOR_IN
65995: IFFALSE 66045
// begin un := UnitShoot ( i ) ;
65997: LD_ADDR_VAR 0 5
66001: PUSH
66002: LD_VAR 0 4
66006: PPUSH
66007: CALL_OW 504
66011: ST_TO_ADDR
// if GetSide ( un ) = side1 then
66012: LD_VAR 0 5
66016: PPUSH
66017: CALL_OW 255
66021: PUSH
66022: LD_VAR 0 1
66026: EQUAL
66027: IFFALSE 66043
// begin result := un ;
66029: LD_ADDR_VAR 0 3
66033: PUSH
66034: LD_VAR 0 5
66038: ST_TO_ADDR
// exit ;
66039: POP
66040: POP
66041: GO 66047
// end ; end ;
66043: GO 65994
66045: POP
66046: POP
// end ;
66047: LD_VAR 0 3
66051: RET
// export function GetCargoBay ( units ) ; begin
66052: LD_INT 0
66054: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
66055: LD_ADDR_VAR 0 2
66059: PUSH
66060: LD_VAR 0 1
66064: PPUSH
66065: LD_INT 2
66067: PUSH
66068: LD_INT 34
66070: PUSH
66071: LD_INT 12
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 34
66080: PUSH
66081: LD_INT 51
66083: PUSH
66084: EMPTY
66085: LIST
66086: LIST
66087: PUSH
66088: LD_INT 34
66090: PUSH
66091: LD_INT 32
66093: PUSH
66094: EMPTY
66095: LIST
66096: LIST
66097: PUSH
66098: LD_INT 34
66100: PUSH
66101: LD_INT 89
66103: PUSH
66104: EMPTY
66105: LIST
66106: LIST
66107: PUSH
66108: EMPTY
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: PPUSH
66115: CALL_OW 72
66119: ST_TO_ADDR
// end ;
66120: LD_VAR 0 2
66124: RET
// export function Negate ( value ) ; begin
66125: LD_INT 0
66127: PPUSH
// result := not value ;
66128: LD_ADDR_VAR 0 2
66132: PUSH
66133: LD_VAR 0 1
66137: NOT
66138: ST_TO_ADDR
// end ;
66139: LD_VAR 0 2
66143: RET
// export function Inc ( value ) ; begin
66144: LD_INT 0
66146: PPUSH
// result := value + 1 ;
66147: LD_ADDR_VAR 0 2
66151: PUSH
66152: LD_VAR 0 1
66156: PUSH
66157: LD_INT 1
66159: PLUS
66160: ST_TO_ADDR
// end ;
66161: LD_VAR 0 2
66165: RET
// export function Dec ( value ) ; begin
66166: LD_INT 0
66168: PPUSH
// result := value - 1 ;
66169: LD_ADDR_VAR 0 2
66173: PUSH
66174: LD_VAR 0 1
66178: PUSH
66179: LD_INT 1
66181: MINUS
66182: ST_TO_ADDR
// end ;
66183: LD_VAR 0 2
66187: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
66188: LD_INT 0
66190: PPUSH
66191: PPUSH
66192: PPUSH
66193: PPUSH
66194: PPUSH
66195: PPUSH
66196: PPUSH
66197: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
66198: LD_VAR 0 1
66202: PPUSH
66203: LD_VAR 0 2
66207: PPUSH
66208: CALL_OW 488
66212: NOT
66213: IFTRUE 66232
66215: PUSH
66216: LD_VAR 0 3
66220: PPUSH
66221: LD_VAR 0 4
66225: PPUSH
66226: CALL_OW 488
66230: NOT
66231: OR
66232: IFFALSE 66245
// begin result := - 1 ;
66234: LD_ADDR_VAR 0 5
66238: PUSH
66239: LD_INT 1
66241: NEG
66242: ST_TO_ADDR
// exit ;
66243: GO 66480
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
66245: LD_ADDR_VAR 0 12
66249: PUSH
66250: LD_VAR 0 1
66254: PPUSH
66255: LD_VAR 0 2
66259: PPUSH
66260: LD_VAR 0 3
66264: PPUSH
66265: LD_VAR 0 4
66269: PPUSH
66270: CALL 65316 0 4
66274: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
66275: LD_ADDR_VAR 0 11
66279: PUSH
66280: LD_VAR 0 1
66284: PPUSH
66285: LD_VAR 0 2
66289: PPUSH
66290: LD_VAR 0 12
66294: PUSH
66295: LD_INT 1
66297: ARRAY
66298: PPUSH
66299: LD_VAR 0 12
66303: PUSH
66304: LD_INT 2
66306: ARRAY
66307: PPUSH
66308: CALL_OW 298
66312: ST_TO_ADDR
// distance := 9999 ;
66313: LD_ADDR_VAR 0 10
66317: PUSH
66318: LD_INT 9999
66320: ST_TO_ADDR
// for i := 0 to 5 do
66321: LD_ADDR_VAR 0 6
66325: PUSH
66326: DOUBLE
66327: LD_INT 0
66329: DEC
66330: ST_TO_ADDR
66331: LD_INT 5
66333: PUSH
66334: FOR_TO
66335: IFFALSE 66478
// begin _x := ShiftX ( x1 , i , centerDist ) ;
66337: LD_ADDR_VAR 0 7
66341: PUSH
66342: LD_VAR 0 1
66346: PPUSH
66347: LD_VAR 0 6
66351: PPUSH
66352: LD_VAR 0 11
66356: PPUSH
66357: CALL_OW 272
66361: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
66362: LD_ADDR_VAR 0 8
66366: PUSH
66367: LD_VAR 0 2
66371: PPUSH
66372: LD_VAR 0 6
66376: PPUSH
66377: LD_VAR 0 11
66381: PPUSH
66382: CALL_OW 273
66386: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
66387: LD_VAR 0 7
66391: PPUSH
66392: LD_VAR 0 8
66396: PPUSH
66397: CALL_OW 488
66401: NOT
66402: IFFALSE 66406
// continue ;
66404: GO 66334
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
66406: LD_ADDR_VAR 0 9
66410: PUSH
66411: LD_VAR 0 12
66415: PUSH
66416: LD_INT 1
66418: ARRAY
66419: PPUSH
66420: LD_VAR 0 12
66424: PUSH
66425: LD_INT 2
66427: ARRAY
66428: PPUSH
66429: LD_VAR 0 7
66433: PPUSH
66434: LD_VAR 0 8
66438: PPUSH
66439: CALL_OW 298
66443: ST_TO_ADDR
// if tmp < distance then
66444: LD_VAR 0 9
66448: PUSH
66449: LD_VAR 0 10
66453: LESS
66454: IFFALSE 66476
// begin result := i ;
66456: LD_ADDR_VAR 0 5
66460: PUSH
66461: LD_VAR 0 6
66465: ST_TO_ADDR
// distance := tmp ;
66466: LD_ADDR_VAR 0 10
66470: PUSH
66471: LD_VAR 0 9
66475: ST_TO_ADDR
// end ; end ;
66476: GO 66334
66478: POP
66479: POP
// end ;
66480: LD_VAR 0 5
66484: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66485: LD_INT 0
66487: PPUSH
66488: PPUSH
// if not driver or not IsInUnit ( driver ) then
66489: LD_VAR 0 1
66493: NOT
66494: IFTRUE 66508
66496: PUSH
66497: LD_VAR 0 1
66501: PPUSH
66502: CALL_OW 310
66506: NOT
66507: OR
66508: IFFALSE 66512
// exit ;
66510: GO 66602
// vehicle := IsInUnit ( driver ) ;
66512: LD_ADDR_VAR 0 3
66516: PUSH
66517: LD_VAR 0 1
66521: PPUSH
66522: CALL_OW 310
66526: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66527: LD_VAR 0 1
66531: PPUSH
66532: LD_STRING \
66534: PUSH
66535: LD_INT 0
66537: PUSH
66538: LD_INT 0
66540: PUSH
66541: LD_INT 0
66543: PUSH
66544: LD_INT 0
66546: PUSH
66547: LD_INT 0
66549: PUSH
66550: LD_INT 0
66552: PUSH
66553: EMPTY
66554: LIST
66555: LIST
66556: LIST
66557: LIST
66558: LIST
66559: LIST
66560: LIST
66561: PUSH
66562: LD_STRING E
66564: PUSH
66565: LD_INT 0
66567: PUSH
66568: LD_INT 0
66570: PUSH
66571: LD_VAR 0 3
66575: PUSH
66576: LD_INT 0
66578: PUSH
66579: LD_INT 0
66581: PUSH
66582: LD_INT 0
66584: PUSH
66585: EMPTY
66586: LIST
66587: LIST
66588: LIST
66589: LIST
66590: LIST
66591: LIST
66592: LIST
66593: PUSH
66594: EMPTY
66595: LIST
66596: LIST
66597: PPUSH
66598: CALL_OW 446
// end ;
66602: LD_VAR 0 2
66606: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
66607: LD_INT 0
66609: PPUSH
66610: PPUSH
// if not driver or not IsInUnit ( driver ) then
66611: LD_VAR 0 1
66615: NOT
66616: IFTRUE 66630
66618: PUSH
66619: LD_VAR 0 1
66623: PPUSH
66624: CALL_OW 310
66628: NOT
66629: OR
66630: IFFALSE 66634
// exit ;
66632: GO 66724
// vehicle := IsInUnit ( driver ) ;
66634: LD_ADDR_VAR 0 3
66638: PUSH
66639: LD_VAR 0 1
66643: PPUSH
66644: CALL_OW 310
66648: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
66649: LD_VAR 0 1
66653: PPUSH
66654: LD_STRING \
66656: PUSH
66657: LD_INT 0
66659: PUSH
66660: LD_INT 0
66662: PUSH
66663: LD_INT 0
66665: PUSH
66666: LD_INT 0
66668: PUSH
66669: LD_INT 0
66671: PUSH
66672: LD_INT 0
66674: PUSH
66675: EMPTY
66676: LIST
66677: LIST
66678: LIST
66679: LIST
66680: LIST
66681: LIST
66682: LIST
66683: PUSH
66684: LD_STRING E
66686: PUSH
66687: LD_INT 0
66689: PUSH
66690: LD_INT 0
66692: PUSH
66693: LD_VAR 0 3
66697: PUSH
66698: LD_INT 0
66700: PUSH
66701: LD_INT 0
66703: PUSH
66704: LD_INT 0
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: LIST
66711: LIST
66712: LIST
66713: LIST
66714: LIST
66715: PUSH
66716: EMPTY
66717: LIST
66718: LIST
66719: PPUSH
66720: CALL_OW 447
// end ;
66724: LD_VAR 0 2
66728: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
66729: LD_INT 0
66731: PPUSH
66732: PPUSH
66733: PPUSH
// tmp := [ ] ;
66734: LD_ADDR_VAR 0 5
66738: PUSH
66739: EMPTY
66740: ST_TO_ADDR
// for i in units do
66741: LD_ADDR_VAR 0 4
66745: PUSH
66746: LD_VAR 0 1
66750: PUSH
66751: FOR_IN
66752: IFFALSE 66790
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
66754: LD_ADDR_VAR 0 5
66758: PUSH
66759: LD_VAR 0 5
66763: PPUSH
66764: LD_VAR 0 5
66768: PUSH
66769: LD_INT 1
66771: PLUS
66772: PPUSH
66773: LD_VAR 0 4
66777: PPUSH
66778: CALL_OW 256
66782: PPUSH
66783: CALL_OW 2
66787: ST_TO_ADDR
66788: GO 66751
66790: POP
66791: POP
// if not tmp then
66792: LD_VAR 0 5
66796: NOT
66797: IFFALSE 66801
// exit ;
66799: GO 66849
// if asc then
66801: LD_VAR 0 2
66805: IFFALSE 66829
// result := SortListByListAsc ( units , tmp ) else
66807: LD_ADDR_VAR 0 3
66811: PUSH
66812: LD_VAR 0 1
66816: PPUSH
66817: LD_VAR 0 5
66821: PPUSH
66822: CALL_OW 76
66826: ST_TO_ADDR
66827: GO 66849
// result := SortListByListDesc ( units , tmp ) ;
66829: LD_ADDR_VAR 0 3
66833: PUSH
66834: LD_VAR 0 1
66838: PPUSH
66839: LD_VAR 0 5
66843: PPUSH
66844: CALL_OW 77
66848: ST_TO_ADDR
// end ;
66849: LD_VAR 0 3
66853: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
66854: LD_INT 0
66856: PPUSH
66857: PPUSH
// task := GetTaskList ( mech ) ;
66858: LD_ADDR_VAR 0 4
66862: PUSH
66863: LD_VAR 0 1
66867: PPUSH
66868: CALL_OW 437
66872: ST_TO_ADDR
// if not task then
66873: LD_VAR 0 4
66877: NOT
66878: IFFALSE 66882
// exit ;
66880: GO 66926
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
66882: LD_ADDR_VAR 0 3
66886: PUSH
66887: LD_VAR 0 4
66891: PUSH
66892: LD_INT 1
66894: ARRAY
66895: PUSH
66896: LD_INT 1
66898: ARRAY
66899: PUSH
66900: LD_STRING r
66902: EQUAL
66903: IFFALSE 66925
66905: PUSH
66906: LD_VAR 0 4
66910: PUSH
66911: LD_INT 1
66913: ARRAY
66914: PUSH
66915: LD_INT 4
66917: ARRAY
66918: PUSH
66919: LD_VAR 0 2
66923: EQUAL
66924: AND
66925: ST_TO_ADDR
// end ;
66926: LD_VAR 0 3
66930: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
66931: LD_INT 0
66933: PPUSH
// SetDir ( unit , d ) ;
66934: LD_VAR 0 1
66938: PPUSH
66939: LD_VAR 0 4
66943: PPUSH
66944: CALL_OW 233
// result := PlaceUnitXY ( unit , x , y , mode ) ;
66948: LD_ADDR_VAR 0 6
66952: PUSH
66953: LD_VAR 0 1
66957: PPUSH
66958: LD_VAR 0 2
66962: PPUSH
66963: LD_VAR 0 3
66967: PPUSH
66968: LD_VAR 0 5
66972: PPUSH
66973: CALL_OW 48
66977: ST_TO_ADDR
// end ;
66978: LD_VAR 0 6
66982: RET
// export function ToNaturalNumber ( number ) ; begin
66983: LD_INT 0
66985: PPUSH
// result := number div 1 ;
66986: LD_ADDR_VAR 0 2
66990: PUSH
66991: LD_VAR 0 1
66995: PUSH
66996: LD_INT 1
66998: DIV
66999: ST_TO_ADDR
// if number < 0 then
67000: LD_VAR 0 1
67004: PUSH
67005: LD_INT 0
67007: LESS
67008: IFFALSE 67018
// result := 0 ;
67010: LD_ADDR_VAR 0 2
67014: PUSH
67015: LD_INT 0
67017: ST_TO_ADDR
// end ;
67018: LD_VAR 0 2
67022: RET
// export function SortByBType ( buildings , asc ) ; var b , tmp ; begin
67023: LD_INT 0
67025: PPUSH
67026: PPUSH
67027: PPUSH
// if not buildings then
67028: LD_VAR 0 1
67032: NOT
67033: IFFALSE 67037
// exit ;
67035: GO 67152
// tmp := [ ] ;
67037: LD_ADDR_VAR 0 5
67041: PUSH
67042: EMPTY
67043: ST_TO_ADDR
// for b in buildings do
67044: LD_ADDR_VAR 0 4
67048: PUSH
67049: LD_VAR 0 1
67053: PUSH
67054: FOR_IN
67055: IFFALSE 67093
// tmp := Replace ( tmp , tmp + 1 , GetBType ( b ) ) ;
67057: LD_ADDR_VAR 0 5
67061: PUSH
67062: LD_VAR 0 5
67066: PPUSH
67067: LD_VAR 0 5
67071: PUSH
67072: LD_INT 1
67074: PLUS
67075: PPUSH
67076: LD_VAR 0 4
67080: PPUSH
67081: CALL_OW 266
67085: PPUSH
67086: CALL_OW 1
67090: ST_TO_ADDR
67091: GO 67054
67093: POP
67094: POP
// if not tmp then
67095: LD_VAR 0 5
67099: NOT
67100: IFFALSE 67104
// exit ;
67102: GO 67152
// if asc then
67104: LD_VAR 0 2
67108: IFFALSE 67132
// result := SortListByListAsc ( buildings , tmp ) else
67110: LD_ADDR_VAR 0 3
67114: PUSH
67115: LD_VAR 0 1
67119: PPUSH
67120: LD_VAR 0 5
67124: PPUSH
67125: CALL_OW 76
67129: ST_TO_ADDR
67130: GO 67152
// result := SortListByListDesc ( buildings , tmp ) ;
67132: LD_ADDR_VAR 0 3
67136: PUSH
67137: LD_VAR 0 1
67141: PPUSH
67142: LD_VAR 0 5
67146: PPUSH
67147: CALL_OW 77
67151: ST_TO_ADDR
// end ;
67152: LD_VAR 0 3
67156: RET
// export function SortByClass ( units , class ) ; var un ; begin
67157: LD_INT 0
67159: PPUSH
67160: PPUSH
// if not units or not class then
67161: LD_VAR 0 1
67165: NOT
67166: IFTRUE 67175
67168: PUSH
67169: LD_VAR 0 2
67173: NOT
67174: OR
67175: IFFALSE 67179
// exit ;
67177: GO 67274
// result := [ ] ;
67179: LD_ADDR_VAR 0 3
67183: PUSH
67184: EMPTY
67185: ST_TO_ADDR
// for un in units do
67186: LD_ADDR_VAR 0 4
67190: PUSH
67191: LD_VAR 0 1
67195: PUSH
67196: FOR_IN
67197: IFFALSE 67272
// if GetClass ( un ) = class then
67199: LD_VAR 0 4
67203: PPUSH
67204: CALL_OW 257
67208: PUSH
67209: LD_VAR 0 2
67213: EQUAL
67214: IFFALSE 67241
// result := Insert ( result , 1 , un ) else
67216: LD_ADDR_VAR 0 3
67220: PUSH
67221: LD_VAR 0 3
67225: PPUSH
67226: LD_INT 1
67228: PPUSH
67229: LD_VAR 0 4
67233: PPUSH
67234: CALL_OW 2
67238: ST_TO_ADDR
67239: GO 67270
// result := Replace ( result , result + 1 , un ) ;
67241: LD_ADDR_VAR 0 3
67245: PUSH
67246: LD_VAR 0 3
67250: PPUSH
67251: LD_VAR 0 3
67255: PUSH
67256: LD_INT 1
67258: PLUS
67259: PPUSH
67260: LD_VAR 0 4
67264: PPUSH
67265: CALL_OW 1
67269: ST_TO_ADDR
67270: GO 67196
67272: POP
67273: POP
// end ;
67274: LD_VAR 0 3
67278: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
67279: LD_INT 0
67281: PPUSH
67282: PPUSH
67283: PPUSH
67284: PPUSH
67285: PPUSH
67286: PPUSH
67287: PPUSH
// result := [ ] ;
67288: LD_ADDR_VAR 0 4
67292: PUSH
67293: EMPTY
67294: ST_TO_ADDR
// if x - r < 0 then
67295: LD_VAR 0 1
67299: PUSH
67300: LD_VAR 0 3
67304: MINUS
67305: PUSH
67306: LD_INT 0
67308: LESS
67309: IFFALSE 67321
// min_x := 0 else
67311: LD_ADDR_VAR 0 8
67315: PUSH
67316: LD_INT 0
67318: ST_TO_ADDR
67319: GO 67337
// min_x := x - r ;
67321: LD_ADDR_VAR 0 8
67325: PUSH
67326: LD_VAR 0 1
67330: PUSH
67331: LD_VAR 0 3
67335: MINUS
67336: ST_TO_ADDR
// if y - r < 0 then
67337: LD_VAR 0 2
67341: PUSH
67342: LD_VAR 0 3
67346: MINUS
67347: PUSH
67348: LD_INT 0
67350: LESS
67351: IFFALSE 67363
// min_y := 0 else
67353: LD_ADDR_VAR 0 7
67357: PUSH
67358: LD_INT 0
67360: ST_TO_ADDR
67361: GO 67379
// min_y := y - r ;
67363: LD_ADDR_VAR 0 7
67367: PUSH
67368: LD_VAR 0 2
67372: PUSH
67373: LD_VAR 0 3
67377: MINUS
67378: ST_TO_ADDR
// max_x := x + r ;
67379: LD_ADDR_VAR 0 9
67383: PUSH
67384: LD_VAR 0 1
67388: PUSH
67389: LD_VAR 0 3
67393: PLUS
67394: ST_TO_ADDR
// max_y := y + r ;
67395: LD_ADDR_VAR 0 10
67399: PUSH
67400: LD_VAR 0 2
67404: PUSH
67405: LD_VAR 0 3
67409: PLUS
67410: ST_TO_ADDR
// for _x = min_x to max_x do
67411: LD_ADDR_VAR 0 5
67415: PUSH
67416: DOUBLE
67417: LD_VAR 0 8
67421: DEC
67422: ST_TO_ADDR
67423: LD_VAR 0 9
67427: PUSH
67428: FOR_TO
67429: IFFALSE 67530
// for _y = min_y to max_y do
67431: LD_ADDR_VAR 0 6
67435: PUSH
67436: DOUBLE
67437: LD_VAR 0 7
67441: DEC
67442: ST_TO_ADDR
67443: LD_VAR 0 10
67447: PUSH
67448: FOR_TO
67449: IFFALSE 67526
// begin if not ValidHex ( _x , _y ) then
67451: LD_VAR 0 5
67455: PPUSH
67456: LD_VAR 0 6
67460: PPUSH
67461: CALL_OW 488
67465: NOT
67466: IFFALSE 67470
// continue ;
67468: GO 67448
// if GetResourceTypeXY ( _x , _y ) then
67470: LD_VAR 0 5
67474: PPUSH
67475: LD_VAR 0 6
67479: PPUSH
67480: CALL_OW 283
67484: IFFALSE 67524
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
67486: LD_ADDR_VAR 0 4
67490: PUSH
67491: LD_VAR 0 4
67495: PPUSH
67496: LD_VAR 0 4
67500: PUSH
67501: LD_INT 1
67503: PLUS
67504: PPUSH
67505: LD_VAR 0 5
67509: PUSH
67510: LD_VAR 0 6
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PPUSH
67519: CALL_OW 1
67523: ST_TO_ADDR
// end ;
67524: GO 67448
67526: POP
67527: POP
67528: GO 67428
67530: POP
67531: POP
// end ;
67532: LD_VAR 0 4
67536: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
67537: LD_INT 0
67539: PPUSH
67540: PPUSH
67541: PPUSH
67542: PPUSH
67543: PPUSH
67544: PPUSH
67545: PPUSH
67546: PPUSH
// if not units then
67547: LD_VAR 0 1
67551: NOT
67552: IFFALSE 67556
// exit ;
67554: GO 68088
// result := UnitFilter ( units , [ f_ok ] ) ;
67556: LD_ADDR_VAR 0 3
67560: PUSH
67561: LD_VAR 0 1
67565: PPUSH
67566: LD_INT 50
67568: PUSH
67569: EMPTY
67570: LIST
67571: PPUSH
67572: CALL_OW 72
67576: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
67577: LD_ADDR_VAR 0 8
67581: PUSH
67582: LD_VAR 0 1
67586: PUSH
67587: LD_INT 1
67589: ARRAY
67590: PPUSH
67591: CALL_OW 255
67595: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
67596: LD_ADDR_VAR 0 10
67600: PUSH
67601: LD_INT 29
67603: PUSH
67604: LD_INT 91
67606: PUSH
67607: LD_INT 49
67609: PUSH
67610: EMPTY
67611: LIST
67612: LIST
67613: LIST
67614: ST_TO_ADDR
// if not result then
67615: LD_VAR 0 3
67619: NOT
67620: IFFALSE 67624
// exit ;
67622: GO 68088
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
67624: LD_ADDR_VAR 0 5
67628: PUSH
67629: LD_INT 81
67631: PUSH
67632: LD_VAR 0 8
67636: PUSH
67637: EMPTY
67638: LIST
67639: LIST
67640: PPUSH
67641: CALL_OW 69
67645: ST_TO_ADDR
// for i in result do
67646: LD_ADDR_VAR 0 4
67650: PUSH
67651: LD_VAR 0 3
67655: PUSH
67656: FOR_IN
67657: IFFALSE 68086
// begin tag := GetTag ( i ) + 1 ;
67659: LD_ADDR_VAR 0 9
67663: PUSH
67664: LD_VAR 0 4
67668: PPUSH
67669: CALL_OW 110
67673: PUSH
67674: LD_INT 1
67676: PLUS
67677: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 4 ) ;
67678: LD_ADDR_VAR 0 7
67682: PUSH
67683: LD_VAR 0 4
67687: PPUSH
67688: CALL_OW 250
67692: PPUSH
67693: LD_VAR 0 4
67697: PPUSH
67698: CALL_OW 251
67702: PPUSH
67703: LD_INT 4
67705: PPUSH
67706: CALL 67279 0 3
67710: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr > 2 and not GetWeapon ( i ) in ignoreCratesWeapon then
67711: LD_VAR 0 4
67715: PPUSH
67716: CALL_OW 247
67720: PUSH
67721: LD_INT 2
67723: EQUAL
67724: IFFALSE 67736
67726: PUSH
67727: LD_VAR 0 7
67731: PUSH
67732: LD_INT 2
67734: GREATER
67735: AND
67736: IFFALSE 67756
67738: PUSH
67739: LD_VAR 0 4
67743: PPUSH
67744: CALL_OW 264
67748: PUSH
67749: LD_VAR 0 10
67753: IN
67754: NOT
67755: AND
67756: IFFALSE 67795
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
67758: LD_VAR 0 4
67762: PPUSH
67763: LD_VAR 0 7
67767: PUSH
67768: LD_INT 1
67770: ARRAY
67771: PUSH
67772: LD_INT 1
67774: ARRAY
67775: PPUSH
67776: LD_VAR 0 7
67780: PUSH
67781: LD_INT 1
67783: ARRAY
67784: PUSH
67785: LD_INT 2
67787: ARRAY
67788: PPUSH
67789: CALL_OW 116
67793: GO 68084
// if path > tag then
67795: LD_VAR 0 2
67799: PUSH
67800: LD_VAR 0 9
67804: GREATER
67805: IFFALSE 68013
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
67807: LD_ADDR_VAR 0 6
67811: PUSH
67812: LD_VAR 0 5
67816: PPUSH
67817: LD_INT 91
67819: PUSH
67820: LD_VAR 0 4
67824: PUSH
67825: LD_INT 8
67827: PUSH
67828: EMPTY
67829: LIST
67830: LIST
67831: LIST
67832: PPUSH
67833: CALL_OW 72
67837: ST_TO_ADDR
// if nearEnemy then
67838: LD_VAR 0 6
67842: IFFALSE 67911
// begin if GetWeapon ( i ) = ru_time_lapser then
67844: LD_VAR 0 4
67848: PPUSH
67849: CALL_OW 264
67853: PUSH
67854: LD_INT 49
67856: EQUAL
67857: IFFALSE 67885
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
67859: LD_VAR 0 4
67863: PPUSH
67864: LD_VAR 0 6
67868: PPUSH
67869: LD_VAR 0 4
67873: PPUSH
67874: CALL_OW 74
67878: PPUSH
67879: CALL_OW 112
67883: GO 67909
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
67885: LD_VAR 0 4
67889: PPUSH
67890: LD_VAR 0 6
67894: PPUSH
67895: LD_VAR 0 4
67899: PPUSH
67900: CALL_OW 74
67904: PPUSH
67905: CALL 69169 0 2
// end else
67909: GO 68011
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
67911: LD_VAR 0 4
67915: PPUSH
67916: LD_VAR 0 2
67920: PUSH
67921: LD_VAR 0 9
67925: ARRAY
67926: PUSH
67927: LD_INT 1
67929: ARRAY
67930: PPUSH
67931: LD_VAR 0 2
67935: PUSH
67936: LD_VAR 0 9
67940: ARRAY
67941: PUSH
67942: LD_INT 2
67944: ARRAY
67945: PPUSH
67946: CALL_OW 297
67950: PUSH
67951: LD_INT 6
67953: GREATER
67954: IFFALSE 67997
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
67956: LD_VAR 0 4
67960: PPUSH
67961: LD_VAR 0 2
67965: PUSH
67966: LD_VAR 0 9
67970: ARRAY
67971: PUSH
67972: LD_INT 1
67974: ARRAY
67975: PPUSH
67976: LD_VAR 0 2
67980: PUSH
67981: LD_VAR 0 9
67985: ARRAY
67986: PUSH
67987: LD_INT 2
67989: ARRAY
67990: PPUSH
67991: CALL_OW 114
67995: GO 68011
// SetTag ( i , tag ) ;
67997: LD_VAR 0 4
68001: PPUSH
68002: LD_VAR 0 9
68006: PPUSH
68007: CALL_OW 109
// end else
68011: GO 68084
// if enemy then
68013: LD_VAR 0 5
68017: IFFALSE 68084
// begin if GetWeapon ( i ) = ru_time_lapser then
68019: LD_VAR 0 4
68023: PPUSH
68024: CALL_OW 264
68028: PUSH
68029: LD_INT 49
68031: EQUAL
68032: IFFALSE 68060
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
68034: LD_VAR 0 4
68038: PPUSH
68039: LD_VAR 0 5
68043: PPUSH
68044: LD_VAR 0 4
68048: PPUSH
68049: CALL_OW 74
68053: PPUSH
68054: CALL_OW 112
68058: GO 68084
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
68060: LD_VAR 0 4
68064: PPUSH
68065: LD_VAR 0 5
68069: PPUSH
68070: LD_VAR 0 4
68074: PPUSH
68075: CALL_OW 74
68079: PPUSH
68080: CALL 69169 0 2
// end ; end ;
68084: GO 67656
68086: POP
68087: POP
// end ;
68088: LD_VAR 0 3
68092: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
68093: LD_INT 0
68095: PPUSH
68096: PPUSH
68097: PPUSH
// if not unit or IsInUnit ( unit ) then
68098: LD_VAR 0 1
68102: NOT
68103: IFTRUE 68116
68105: PUSH
68106: LD_VAR 0 1
68110: PPUSH
68111: CALL_OW 310
68115: OR
68116: IFFALSE 68120
// exit ;
68118: GO 68211
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
68120: LD_ADDR_VAR 0 4
68124: PUSH
68125: LD_VAR 0 1
68129: PPUSH
68130: CALL_OW 250
68134: PPUSH
68135: LD_VAR 0 2
68139: PPUSH
68140: LD_INT 1
68142: PPUSH
68143: CALL_OW 272
68147: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
68148: LD_ADDR_VAR 0 5
68152: PUSH
68153: LD_VAR 0 1
68157: PPUSH
68158: CALL_OW 251
68162: PPUSH
68163: LD_VAR 0 2
68167: PPUSH
68168: LD_INT 1
68170: PPUSH
68171: CALL_OW 273
68175: ST_TO_ADDR
// if ValidHex ( x , y ) then
68176: LD_VAR 0 4
68180: PPUSH
68181: LD_VAR 0 5
68185: PPUSH
68186: CALL_OW 488
68190: IFFALSE 68211
// ComTurnXY ( unit , x , y ) ;
68192: LD_VAR 0 1
68196: PPUSH
68197: LD_VAR 0 4
68201: PPUSH
68202: LD_VAR 0 5
68206: PPUSH
68207: CALL_OW 118
// end ;
68211: LD_VAR 0 3
68215: RET
// export function SeeUnits ( side , units ) ; var i ; begin
68216: LD_INT 0
68218: PPUSH
68219: PPUSH
// result := false ;
68220: LD_ADDR_VAR 0 3
68224: PUSH
68225: LD_INT 0
68227: ST_TO_ADDR
// if not units then
68228: LD_VAR 0 2
68232: NOT
68233: IFFALSE 68237
// exit ;
68235: GO 68282
// for i in units do
68237: LD_ADDR_VAR 0 4
68241: PUSH
68242: LD_VAR 0 2
68246: PUSH
68247: FOR_IN
68248: IFFALSE 68280
// if See ( side , i ) then
68250: LD_VAR 0 1
68254: PPUSH
68255: LD_VAR 0 4
68259: PPUSH
68260: CALL_OW 292
68264: IFFALSE 68278
// begin result := true ;
68266: LD_ADDR_VAR 0 3
68270: PUSH
68271: LD_INT 1
68273: ST_TO_ADDR
// exit ;
68274: POP
68275: POP
68276: GO 68282
// end ;
68278: GO 68247
68280: POP
68281: POP
// end ;
68282: LD_VAR 0 3
68286: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
68287: LD_INT 0
68289: PPUSH
68290: PPUSH
68291: PPUSH
68292: PPUSH
// if not unit or not points then
68293: LD_VAR 0 1
68297: NOT
68298: IFTRUE 68307
68300: PUSH
68301: LD_VAR 0 2
68305: NOT
68306: OR
68307: IFFALSE 68311
// exit ;
68309: GO 68401
// dist := 99999 ;
68311: LD_ADDR_VAR 0 5
68315: PUSH
68316: LD_INT 99999
68318: ST_TO_ADDR
// for i in points do
68319: LD_ADDR_VAR 0 4
68323: PUSH
68324: LD_VAR 0 2
68328: PUSH
68329: FOR_IN
68330: IFFALSE 68399
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
68332: LD_ADDR_VAR 0 6
68336: PUSH
68337: LD_VAR 0 1
68341: PPUSH
68342: LD_VAR 0 4
68346: PUSH
68347: LD_INT 1
68349: ARRAY
68350: PPUSH
68351: LD_VAR 0 4
68355: PUSH
68356: LD_INT 2
68358: ARRAY
68359: PPUSH
68360: CALL_OW 297
68364: ST_TO_ADDR
// if tmpDist < dist then
68365: LD_VAR 0 6
68369: PUSH
68370: LD_VAR 0 5
68374: LESS
68375: IFFALSE 68397
// begin result := i ;
68377: LD_ADDR_VAR 0 3
68381: PUSH
68382: LD_VAR 0 4
68386: ST_TO_ADDR
// dist := tmpDist ;
68387: LD_ADDR_VAR 0 5
68391: PUSH
68392: LD_VAR 0 6
68396: ST_TO_ADDR
// end ; end ;
68397: GO 68329
68399: POP
68400: POP
// end ;
68401: LD_VAR 0 3
68405: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
68406: LD_INT 0
68408: PPUSH
// uc_side := side ;
68409: LD_ADDR_OWVAR 20
68413: PUSH
68414: LD_VAR 0 1
68418: ST_TO_ADDR
// uc_nation := 3 ;
68419: LD_ADDR_OWVAR 21
68423: PUSH
68424: LD_INT 3
68426: ST_TO_ADDR
// vc_chassis := 25 ;
68427: LD_ADDR_OWVAR 37
68431: PUSH
68432: LD_INT 25
68434: ST_TO_ADDR
// vc_engine := engine_siberite ;
68435: LD_ADDR_OWVAR 39
68439: PUSH
68440: LD_INT 3
68442: ST_TO_ADDR
// vc_control := control_computer ;
68443: LD_ADDR_OWVAR 38
68447: PUSH
68448: LD_INT 3
68450: ST_TO_ADDR
// vc_weapon := 59 ;
68451: LD_ADDR_OWVAR 40
68455: PUSH
68456: LD_INT 59
68458: ST_TO_ADDR
// result := CreateVehicle ;
68459: LD_ADDR_VAR 0 5
68463: PUSH
68464: CALL_OW 45
68468: ST_TO_ADDR
// SetDir ( result , d ) ;
68469: LD_VAR 0 5
68473: PPUSH
68474: LD_VAR 0 4
68478: PPUSH
68479: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
68483: LD_VAR 0 5
68487: PPUSH
68488: LD_VAR 0 2
68492: PPUSH
68493: LD_VAR 0 3
68497: PPUSH
68498: LD_INT 0
68500: PPUSH
68501: CALL_OW 48
// end ;
68505: LD_VAR 0 5
68509: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
68510: LD_INT 0
68512: PPUSH
68513: PPUSH
68514: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
68515: LD_ADDR_VAR 0 2
68519: PUSH
68520: LD_INT 0
68522: PUSH
68523: LD_INT 0
68525: PUSH
68526: LD_INT 0
68528: PUSH
68529: LD_INT 0
68531: PUSH
68532: EMPTY
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
68538: LD_VAR 0 1
68542: NOT
68543: IFTRUE 68576
68545: PUSH
68546: LD_VAR 0 1
68550: PPUSH
68551: CALL_OW 264
68555: PUSH
68556: LD_INT 12
68558: PUSH
68559: LD_INT 51
68561: PUSH
68562: LD_INT 32
68564: PUSH
68565: LD_INT 89
68567: PUSH
68568: EMPTY
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: IN
68574: NOT
68575: OR
68576: IFFALSE 68580
// exit ;
68578: GO 68678
// for i := 1 to 3 do
68580: LD_ADDR_VAR 0 3
68584: PUSH
68585: DOUBLE
68586: LD_INT 1
68588: DEC
68589: ST_TO_ADDR
68590: LD_INT 3
68592: PUSH
68593: FOR_TO
68594: IFFALSE 68676
// begin tmp := GetCargo ( cargo , i ) ;
68596: LD_ADDR_VAR 0 4
68600: PUSH
68601: LD_VAR 0 1
68605: PPUSH
68606: LD_VAR 0 3
68610: PPUSH
68611: CALL_OW 289
68615: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
68616: LD_ADDR_VAR 0 2
68620: PUSH
68621: LD_VAR 0 2
68625: PPUSH
68626: LD_VAR 0 3
68630: PPUSH
68631: LD_VAR 0 4
68635: PPUSH
68636: CALL_OW 1
68640: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
68641: LD_ADDR_VAR 0 2
68645: PUSH
68646: LD_VAR 0 2
68650: PPUSH
68651: LD_INT 4
68653: PPUSH
68654: LD_VAR 0 2
68658: PUSH
68659: LD_INT 4
68661: ARRAY
68662: PUSH
68663: LD_VAR 0 4
68667: PLUS
68668: PPUSH
68669: CALL_OW 1
68673: ST_TO_ADDR
// end ;
68674: GO 68593
68676: POP
68677: POP
// end ;
68678: LD_VAR 0 2
68682: RET
// export function Length ( array ) ; begin
68683: LD_INT 0
68685: PPUSH
// result := array + 0 ;
68686: LD_ADDR_VAR 0 2
68690: PUSH
68691: LD_VAR 0 1
68695: PUSH
68696: LD_INT 0
68698: PLUS
68699: ST_TO_ADDR
// end ;
68700: LD_VAR 0 2
68704: RET
// export function PrepareArray ( array ) ; begin
68705: LD_INT 0
68707: PPUSH
// result := array diff 0 ;
68708: LD_ADDR_VAR 0 2
68712: PUSH
68713: LD_VAR 0 1
68717: PUSH
68718: LD_INT 0
68720: DIFF
68721: ST_TO_ADDR
// if not result [ 1 ] then
68722: LD_VAR 0 2
68726: PUSH
68727: LD_INT 1
68729: ARRAY
68730: NOT
68731: IFFALSE 68751
// result := Delete ( result , 1 ) ;
68733: LD_ADDR_VAR 0 2
68737: PUSH
68738: LD_VAR 0 2
68742: PPUSH
68743: LD_INT 1
68745: PPUSH
68746: CALL_OW 3
68750: ST_TO_ADDR
// end ;
68751: LD_VAR 0 2
68755: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
68756: LD_INT 0
68758: PPUSH
68759: PPUSH
68760: PPUSH
68761: PPUSH
// sibRocketRange := 25 ;
68762: LD_ADDR_VAR 0 6
68766: PUSH
68767: LD_INT 25
68769: ST_TO_ADDR
// result := false ;
68770: LD_ADDR_VAR 0 4
68774: PUSH
68775: LD_INT 0
68777: ST_TO_ADDR
// for i := 0 to 5 do
68778: LD_ADDR_VAR 0 5
68782: PUSH
68783: DOUBLE
68784: LD_INT 0
68786: DEC
68787: ST_TO_ADDR
68788: LD_INT 5
68790: PUSH
68791: FOR_TO
68792: IFFALSE 68859
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
68794: LD_VAR 0 1
68798: PPUSH
68799: LD_VAR 0 5
68803: PPUSH
68804: LD_VAR 0 6
68808: PPUSH
68809: CALL_OW 272
68813: PPUSH
68814: LD_VAR 0 2
68818: PPUSH
68819: LD_VAR 0 5
68823: PPUSH
68824: LD_VAR 0 6
68828: PPUSH
68829: CALL_OW 273
68833: PPUSH
68834: LD_VAR 0 3
68838: PPUSH
68839: CALL_OW 309
68843: IFFALSE 68857
// begin result := true ;
68845: LD_ADDR_VAR 0 4
68849: PUSH
68850: LD_INT 1
68852: ST_TO_ADDR
// exit ;
68853: POP
68854: POP
68855: GO 68861
// end ;
68857: GO 68791
68859: POP
68860: POP
// end ;
68861: LD_VAR 0 4
68865: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
68866: LD_INT 0
68868: PPUSH
68869: PPUSH
68870: PPUSH
// if btype = b_depot then
68871: LD_VAR 0 2
68875: PUSH
68876: LD_INT 0
68878: EQUAL
68879: IFFALSE 68891
// begin result := true ;
68881: LD_ADDR_VAR 0 3
68885: PUSH
68886: LD_INT 1
68888: ST_TO_ADDR
// exit ;
68889: GO 69011
// end ; pom := GetBase ( depot ) ;
68891: LD_ADDR_VAR 0 4
68895: PUSH
68896: LD_VAR 0 1
68900: PPUSH
68901: CALL_OW 274
68905: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68906: LD_ADDR_VAR 0 5
68910: PUSH
68911: LD_VAR 0 2
68915: PPUSH
68916: LD_VAR 0 1
68920: PPUSH
68921: CALL_OW 248
68925: PPUSH
68926: CALL_OW 450
68930: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
68931: LD_ADDR_VAR 0 3
68935: PUSH
68936: LD_VAR 0 4
68940: PPUSH
68941: LD_INT 1
68943: PPUSH
68944: CALL_OW 275
68948: PUSH
68949: LD_VAR 0 5
68953: PUSH
68954: LD_INT 1
68956: ARRAY
68957: GREATEREQUAL
68958: IFFALSE 68984
68960: PUSH
68961: LD_VAR 0 4
68965: PPUSH
68966: LD_INT 2
68968: PPUSH
68969: CALL_OW 275
68973: PUSH
68974: LD_VAR 0 5
68978: PUSH
68979: LD_INT 2
68981: ARRAY
68982: GREATEREQUAL
68983: AND
68984: IFFALSE 69010
68986: PUSH
68987: LD_VAR 0 4
68991: PPUSH
68992: LD_INT 3
68994: PPUSH
68995: CALL_OW 275
68999: PUSH
69000: LD_VAR 0 5
69004: PUSH
69005: LD_INT 3
69007: ARRAY
69008: GREATEREQUAL
69009: AND
69010: ST_TO_ADDR
// end ;
69011: LD_VAR 0 3
69015: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
69016: LD_INT 0
69018: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
69019: LD_VAR 0 1
69023: PPUSH
69024: LD_VAR 0 2
69028: PPUSH
69029: LD_INT 0
69031: PPUSH
69032: LD_INT 0
69034: PPUSH
69035: LD_INT 1
69037: PPUSH
69038: LD_INT 0
69040: PPUSH
69041: CALL_OW 587
// end ;
69045: LD_VAR 0 3
69049: RET
// export function CenterOnNow ( unit ) ; begin
69050: LD_INT 0
69052: PPUSH
// result := IsInUnit ( unit ) ;
69053: LD_ADDR_VAR 0 2
69057: PUSH
69058: LD_VAR 0 1
69062: PPUSH
69063: CALL_OW 310
69067: ST_TO_ADDR
// if not result then
69068: LD_VAR 0 2
69072: NOT
69073: IFFALSE 69085
// result := unit ;
69075: LD_ADDR_VAR 0 2
69079: PUSH
69080: LD_VAR 0 1
69084: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
69085: LD_VAR 0 1
69089: PPUSH
69090: CALL_OW 87
// end ;
69094: LD_VAR 0 2
69098: RET
// export function ComMoveHex ( unit , hex ) ; begin
69099: LD_INT 0
69101: PPUSH
// if not hex then
69102: LD_VAR 0 2
69106: NOT
69107: IFFALSE 69111
// exit ;
69109: GO 69164
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
69111: LD_VAR 0 2
69115: PUSH
69116: LD_INT 1
69118: ARRAY
69119: PPUSH
69120: LD_VAR 0 2
69124: PUSH
69125: LD_INT 2
69127: ARRAY
69128: PPUSH
69129: CALL_OW 428
69133: IFFALSE 69137
// exit ;
69135: GO 69164
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
69137: LD_VAR 0 1
69141: PPUSH
69142: LD_VAR 0 2
69146: PUSH
69147: LD_INT 1
69149: ARRAY
69150: PPUSH
69151: LD_VAR 0 2
69155: PUSH
69156: LD_INT 2
69158: ARRAY
69159: PPUSH
69160: CALL_OW 111
// end ;
69164: LD_VAR 0 3
69168: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
69169: LD_INT 0
69171: PPUSH
69172: PPUSH
69173: PPUSH
// if not unit or not enemy then
69174: LD_VAR 0 1
69178: NOT
69179: IFTRUE 69188
69181: PUSH
69182: LD_VAR 0 2
69186: NOT
69187: OR
69188: IFFALSE 69192
// exit ;
69190: GO 69318
// x := GetX ( enemy ) ;
69192: LD_ADDR_VAR 0 4
69196: PUSH
69197: LD_VAR 0 2
69201: PPUSH
69202: CALL_OW 250
69206: ST_TO_ADDR
// y := GetY ( enemy ) ;
69207: LD_ADDR_VAR 0 5
69211: PUSH
69212: LD_VAR 0 2
69216: PPUSH
69217: CALL_OW 251
69221: ST_TO_ADDR
// if ValidHex ( x , y ) then
69222: LD_VAR 0 4
69226: PPUSH
69227: LD_VAR 0 5
69231: PPUSH
69232: CALL_OW 488
69236: IFFALSE 69318
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
69238: LD_VAR 0 2
69242: PPUSH
69243: CALL_OW 247
69247: PUSH
69248: LD_INT 3
69250: PUSH
69251: LD_INT 2
69253: PUSH
69254: EMPTY
69255: LIST
69256: LIST
69257: IN
69258: IFTRUE 69281
69260: PUSH
69261: LD_VAR 0 1
69265: PPUSH
69266: CALL_OW 255
69270: PPUSH
69271: LD_VAR 0 2
69275: PPUSH
69276: CALL_OW 292
69280: OR
69281: IFFALSE 69299
// ComAttackUnit ( unit , enemy ) else
69283: LD_VAR 0 1
69287: PPUSH
69288: LD_VAR 0 2
69292: PPUSH
69293: CALL_OW 115
69297: GO 69318
// ComAgressiveMove ( unit , x , y ) ;
69299: LD_VAR 0 1
69303: PPUSH
69304: LD_VAR 0 4
69308: PPUSH
69309: LD_VAR 0 5
69313: PPUSH
69314: CALL_OW 114
// end ;
69318: LD_VAR 0 3
69322: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
69323: LD_INT 0
69325: PPUSH
69326: PPUSH
69327: PPUSH
// list := AreaToList ( area , 0 ) ;
69328: LD_ADDR_VAR 0 5
69332: PUSH
69333: LD_VAR 0 1
69337: PPUSH
69338: LD_INT 0
69340: PPUSH
69341: CALL_OW 517
69345: ST_TO_ADDR
// if not list then
69346: LD_VAR 0 5
69350: NOT
69351: IFFALSE 69355
// exit ;
69353: GO 69485
// if all then
69355: LD_VAR 0 2
69359: IFFALSE 69447
// begin for i := 1 to list [ 1 ] do
69361: LD_ADDR_VAR 0 4
69365: PUSH
69366: DOUBLE
69367: LD_INT 1
69369: DEC
69370: ST_TO_ADDR
69371: LD_VAR 0 5
69375: PUSH
69376: LD_INT 1
69378: ARRAY
69379: PUSH
69380: FOR_TO
69381: IFFALSE 69443
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
69383: LD_ADDR_VAR 0 3
69387: PUSH
69388: LD_VAR 0 3
69392: PPUSH
69393: LD_VAR 0 3
69397: PUSH
69398: LD_INT 1
69400: PLUS
69401: PPUSH
69402: LD_VAR 0 5
69406: PUSH
69407: LD_INT 1
69409: ARRAY
69410: PUSH
69411: LD_VAR 0 4
69415: ARRAY
69416: PUSH
69417: LD_VAR 0 5
69421: PUSH
69422: LD_INT 2
69424: ARRAY
69425: PUSH
69426: LD_VAR 0 4
69430: ARRAY
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PPUSH
69436: CALL_OW 1
69440: ST_TO_ADDR
69441: GO 69380
69443: POP
69444: POP
// exit ;
69445: GO 69485
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
69447: LD_ADDR_VAR 0 3
69451: PUSH
69452: LD_VAR 0 5
69456: PUSH
69457: LD_INT 1
69459: ARRAY
69460: PUSH
69461: LD_INT 1
69463: ARRAY
69464: PUSH
69465: LD_VAR 0 5
69469: PUSH
69470: LD_INT 2
69472: ARRAY
69473: PUSH
69474: LD_INT 1
69476: ARRAY
69477: PUSH
69478: EMPTY
69479: LIST
69480: LIST
69481: PUSH
69482: EMPTY
69483: LIST
69484: ST_TO_ADDR
// end ;
69485: LD_VAR 0 3
69489: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
69490: LD_INT 0
69492: PPUSH
69493: PPUSH
// list := AreaToList ( area , 0 ) ;
69494: LD_ADDR_VAR 0 4
69498: PUSH
69499: LD_VAR 0 1
69503: PPUSH
69504: LD_INT 0
69506: PPUSH
69507: CALL_OW 517
69511: ST_TO_ADDR
// if not list then
69512: LD_VAR 0 4
69516: NOT
69517: IFFALSE 69521
// exit ;
69519: GO 69562
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
69521: LD_ADDR_VAR 0 3
69525: PUSH
69526: LD_VAR 0 4
69530: PUSH
69531: LD_INT 1
69533: ARRAY
69534: PUSH
69535: LD_INT 1
69537: ARRAY
69538: PUSH
69539: LD_VAR 0 4
69543: PUSH
69544: LD_INT 2
69546: ARRAY
69547: PUSH
69548: LD_INT 1
69550: ARRAY
69551: PUSH
69552: LD_VAR 0 2
69556: PUSH
69557: EMPTY
69558: LIST
69559: LIST
69560: LIST
69561: ST_TO_ADDR
// end ;
69562: LD_VAR 0 3
69566: RET
// export function First ( array ) ; begin
69567: LD_INT 0
69569: PPUSH
// if not array then
69570: LD_VAR 0 1
69574: NOT
69575: IFFALSE 69579
// exit ;
69577: GO 69593
// result := array [ 1 ] ;
69579: LD_ADDR_VAR 0 2
69583: PUSH
69584: LD_VAR 0 1
69588: PUSH
69589: LD_INT 1
69591: ARRAY
69592: ST_TO_ADDR
// end ;
69593: LD_VAR 0 2
69597: RET
// export function Last ( array ) ; begin
69598: LD_INT 0
69600: PPUSH
// if not array then
69601: LD_VAR 0 1
69605: NOT
69606: IFFALSE 69610
// exit ;
69608: GO 69626
// result := array [ array ] ;
69610: LD_ADDR_VAR 0 2
69614: PUSH
69615: LD_VAR 0 1
69619: PUSH
69620: LD_VAR 0 1
69624: ARRAY
69625: ST_TO_ADDR
// end ;
69626: LD_VAR 0 2
69630: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
69631: LD_INT 0
69633: PPUSH
69634: PPUSH
// result := [ ] ;
69635: LD_ADDR_VAR 0 5
69639: PUSH
69640: EMPTY
69641: ST_TO_ADDR
// if not array then
69642: LD_VAR 0 1
69646: NOT
69647: IFFALSE 69651
// exit ;
69649: GO 69763
// for i := 1 to array do
69651: LD_ADDR_VAR 0 6
69655: PUSH
69656: DOUBLE
69657: LD_INT 1
69659: DEC
69660: ST_TO_ADDR
69661: LD_VAR 0 1
69665: PUSH
69666: FOR_TO
69667: IFFALSE 69761
// if array [ i ] [ index ] = value then
69669: LD_VAR 0 1
69673: PUSH
69674: LD_VAR 0 6
69678: ARRAY
69679: PUSH
69680: LD_VAR 0 2
69684: ARRAY
69685: PUSH
69686: LD_VAR 0 3
69690: EQUAL
69691: IFFALSE 69759
// begin if indexColumn then
69693: LD_VAR 0 4
69697: IFFALSE 69733
// result := Join ( result , array [ i ] [ indexColumn ] ) else
69699: LD_ADDR_VAR 0 5
69703: PUSH
69704: LD_VAR 0 5
69708: PPUSH
69709: LD_VAR 0 1
69713: PUSH
69714: LD_VAR 0 6
69718: ARRAY
69719: PUSH
69720: LD_VAR 0 4
69724: ARRAY
69725: PPUSH
69726: CALL 64771 0 2
69730: ST_TO_ADDR
69731: GO 69759
// result := Join ( result , array [ i ] ) ;
69733: LD_ADDR_VAR 0 5
69737: PUSH
69738: LD_VAR 0 5
69742: PPUSH
69743: LD_VAR 0 1
69747: PUSH
69748: LD_VAR 0 6
69752: ARRAY
69753: PPUSH
69754: CALL 64771 0 2
69758: ST_TO_ADDR
// end ;
69759: GO 69666
69761: POP
69762: POP
// end ;
69763: LD_VAR 0 5
69767: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
69768: LD_INT 0
69770: PPUSH
// if not vehicles or not parkingPoint then
69771: LD_VAR 0 1
69775: NOT
69776: IFTRUE 69785
69778: PUSH
69779: LD_VAR 0 2
69783: NOT
69784: OR
69785: IFFALSE 69789
// exit ;
69787: GO 69887
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
69789: LD_ADDR_VAR 0 1
69793: PUSH
69794: LD_VAR 0 1
69798: PPUSH
69799: LD_INT 50
69801: PUSH
69802: EMPTY
69803: LIST
69804: PUSH
69805: LD_INT 3
69807: PUSH
69808: LD_INT 92
69810: PUSH
69811: LD_VAR 0 2
69815: PUSH
69816: LD_INT 1
69818: ARRAY
69819: PUSH
69820: LD_VAR 0 2
69824: PUSH
69825: LD_INT 2
69827: ARRAY
69828: PUSH
69829: LD_INT 8
69831: PUSH
69832: EMPTY
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PPUSH
69846: CALL_OW 72
69850: ST_TO_ADDR
// if not vehicles then
69851: LD_VAR 0 1
69855: NOT
69856: IFFALSE 69860
// exit ;
69858: GO 69887
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
69860: LD_VAR 0 1
69864: PPUSH
69865: LD_VAR 0 2
69869: PUSH
69870: LD_INT 1
69872: ARRAY
69873: PPUSH
69874: LD_VAR 0 2
69878: PUSH
69879: LD_INT 2
69881: ARRAY
69882: PPUSH
69883: CALL_OW 111
// end ;
69887: LD_VAR 0 3
69891: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
69892: LD_INT 0
69894: PPUSH
69895: PPUSH
69896: PPUSH
// if not side or not area then
69897: LD_VAR 0 1
69901: NOT
69902: IFTRUE 69911
69904: PUSH
69905: LD_VAR 0 2
69909: NOT
69910: OR
69911: IFFALSE 69915
// exit ;
69913: GO 70034
// tmp := AreaToList ( area , 0 ) ;
69915: LD_ADDR_VAR 0 5
69919: PUSH
69920: LD_VAR 0 2
69924: PPUSH
69925: LD_INT 0
69927: PPUSH
69928: CALL_OW 517
69932: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
69933: LD_ADDR_VAR 0 4
69937: PUSH
69938: DOUBLE
69939: LD_INT 1
69941: DEC
69942: ST_TO_ADDR
69943: LD_VAR 0 5
69947: PUSH
69948: LD_INT 1
69950: ARRAY
69951: PUSH
69952: FOR_TO
69953: IFFALSE 70032
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
69955: LD_VAR 0 5
69959: PUSH
69960: LD_INT 1
69962: ARRAY
69963: PUSH
69964: LD_VAR 0 4
69968: ARRAY
69969: PPUSH
69970: LD_VAR 0 5
69974: PUSH
69975: LD_INT 2
69977: ARRAY
69978: PUSH
69979: LD_VAR 0 4
69983: ARRAY
69984: PPUSH
69985: CALL_OW 351
69989: IFFALSE 70030
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
69991: LD_VAR 0 5
69995: PUSH
69996: LD_INT 1
69998: ARRAY
69999: PUSH
70000: LD_VAR 0 4
70004: ARRAY
70005: PPUSH
70006: LD_VAR 0 5
70010: PUSH
70011: LD_INT 2
70013: ARRAY
70014: PUSH
70015: LD_VAR 0 4
70019: ARRAY
70020: PPUSH
70021: LD_VAR 0 1
70025: PPUSH
70026: CALL_OW 244
// end ;
70030: GO 69952
70032: POP
70033: POP
// end ;
70034: LD_VAR 0 3
70038: RET
// export function UniqueArray ( array ) ; var i ; begin
70039: LD_INT 0
70041: PPUSH
70042: PPUSH
// result := [ ] ;
70043: LD_ADDR_VAR 0 2
70047: PUSH
70048: EMPTY
70049: ST_TO_ADDR
// if not array then
70050: LD_VAR 0 1
70054: NOT
70055: IFFALSE 70059
// exit ;
70057: GO 70120
// for i := 1 to array do
70059: LD_ADDR_VAR 0 3
70063: PUSH
70064: DOUBLE
70065: LD_INT 1
70067: DEC
70068: ST_TO_ADDR
70069: LD_VAR 0 1
70073: PUSH
70074: FOR_TO
70075: IFFALSE 70118
// if not array [ i ] in result then
70077: LD_VAR 0 1
70081: PUSH
70082: LD_VAR 0 3
70086: ARRAY
70087: PUSH
70088: LD_VAR 0 2
70092: IN
70093: NOT
70094: IFFALSE 70116
// result := Join ( result , i ) ;
70096: LD_ADDR_VAR 0 2
70100: PUSH
70101: LD_VAR 0 2
70105: PPUSH
70106: LD_VAR 0 3
70110: PPUSH
70111: CALL 64771 0 2
70115: ST_TO_ADDR
70116: GO 70074
70118: POP
70119: POP
// end ; end_of_file
70120: LD_VAR 0 2
70124: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
70125: LD_VAR 0 1
70129: PPUSH
70130: LD_VAR 0 2
70134: PPUSH
70135: LD_VAR 0 3
70139: PPUSH
70140: LD_VAR 0 4
70144: PPUSH
70145: LD_VAR 0 5
70149: PPUSH
70150: LD_VAR 0 6
70154: PPUSH
70155: CALL 4300 0 6
// end ;
70159: PPOPN 6
70161: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
70162: LD_INT 0
70164: PPUSH
// begin if not units then
70165: LD_VAR 0 1
70169: NOT
70170: IFFALSE 70174
// exit ;
70172: GO 70208
// SOS_CommPanelCommandWeapon ( units , p1 , p2 , p3 , p4 , p5 ) ;
70174: LD_VAR 0 1
70178: PPUSH
70179: LD_VAR 0 2
70183: PPUSH
70184: LD_VAR 0 3
70188: PPUSH
70189: LD_VAR 0 4
70193: PPUSH
70194: LD_VAR 0 5
70198: PPUSH
70199: LD_VAR 0 6
70203: PPUSH
70204: CALL 26554 0 6
// end ;
70208: PPOPN 7
70210: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
70211: CALL 4187 0 0
// end ;
70215: PPOPN 1
70217: END
