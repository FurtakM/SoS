// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 115 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// PrepareArabian ;
  33: CALL 3359 0 0
// PrepareAmerican ;
  37: CALL 969 0 0
// PrepareRussian ;
  41: CALL 8619 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  45: LD_INT 4
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 4
  53: PUSH
  54: LD_INT 5
  56: PUSH
  57: LD_INT 5
  59: PUSH
  60: LD_INT 5
  62: PUSH
  63: EMPTY
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: PUSH
  69: LD_OWVAR 67
  73: ARRAY
  74: PPUSH
  75: LD_INT 2
  77: PPUSH
  78: LD_INT 1
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 2
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: LD_INT 2
  92: PPUSH
  93: CALL 88815 0 9
// Action ;
  97: CALL 25442 0 0
// if debug then
 101: LD_EXP 1
 105: IFFALSE 114
// FogOff ( 1 ) ;
 107: LD_INT 1
 109: PPUSH
 110: CALL_OW 344
// end ;
 114: END
// export debug , mission_prefix , arBaseActive , arabianAttack , khatamStatus , seenRussianTeleport , joinedToEpsilon , arabianDefeated , hasBase , epsilon , escapeKhatam , arabianAttackSpawned , gensherEscaped , ruScriptActive , ruScriptActive2 , firstAttack , dialogRussianSpaceAmmo , russianWaveAttack , spawnedRussians , hasSniper , arabianEscapedCounter , ruActiveAttacks ; function Init ; begin
 115: LD_INT 0
 117: PPUSH
// debug := false ;
 118: LD_ADDR_EXP 1
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// mission_prefix := 08c_ ;
 126: LD_ADDR_EXP 2
 130: PUSH
 131: LD_STRING 08c_
 133: ST_TO_ADDR
// arBaseActive := true ;
 134: LD_ADDR_EXP 3
 138: PUSH
 139: LD_INT 1
 141: ST_TO_ADDR
// arabianAttack := false ;
 142: LD_ADDR_EXP 4
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// khatamStatus := false ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// seenRussianTeleport := false ;
 158: LD_ADDR_EXP 6
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// joinedToEpsilon := false ;
 166: LD_ADDR_EXP 7
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// arabianDefeated := false ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// arabianAttackSpawned := false ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// gensherEscaped := false ;
 190: LD_ADDR_EXP 13
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// hasBase := false ;
 198: LD_ADDR_EXP 9
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// epsilon := 0 ;
 206: LD_ADDR_EXP 10
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// escapeKhatam := false ;
 214: LD_ADDR_EXP 11
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// ruScriptActive := false ;
 222: LD_ADDR_EXP 14
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// ruScriptActive2 := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// firstAttack := false ;
 238: LD_ADDR_EXP 16
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// dialogRussianSpaceAmmo := false ;
 246: LD_ADDR_EXP 17
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// russianWaveAttack := 0 ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// spawnedRussians := false ;
 262: LD_ADDR_EXP 19
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// hasSniper := false ;
 270: LD_ADDR_EXP 20
 274: PUSH
 275: LD_INT 0
 277: ST_TO_ADDR
// arabianEscapedCounter := 0 ;
 278: LD_ADDR_EXP 21
 282: PUSH
 283: LD_INT 0
 285: ST_TO_ADDR
// ruActiveAttacks := false ;
 286: LD_ADDR_EXP 22
 290: PUSH
 291: LD_INT 0
 293: ST_TO_ADDR
// ruTransportDestroyed := false ;
 294: LD_ADDR_EXP 78
 298: PUSH
 299: LD_INT 0
 301: ST_TO_ADDR
// end ;
 302: LD_VAR 0 1
 306: RET
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and not arabianAttack and spawnedRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 307: LD_INT 1
 309: PPUSH
 310: LD_INT 2
 312: PPUSH
 313: CALL_OW 81
 317: PUSH
 318: LD_INT 1
 320: EQUAL
 321: PUSH
 322: LD_EXP 4
 326: NOT
 327: AND
 328: PUSH
 329: LD_EXP 19
 333: AND
 334: PUSH
 335: LD_INT 22
 337: PUSH
 338: LD_INT 3
 340: PUSH
 341: EMPTY
 342: LIST
 343: LIST
 344: PPUSH
 345: CALL_OW 69
 349: PUSH
 350: LD_INT 0
 352: EQUAL
 353: AND
 354: IFFALSE 366
 356: GO 358
 358: DISABLE
// SetAchievement ( ACH_POWER ) ;
 359: LD_STRING ACH_POWER
 361: PPUSH
 362: CALL_OW 543
 366: END
// every 0 0$1 trigger spawnedRussians and not ruBase and not ruBase2 and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 367: LD_EXP 19
 371: PUSH
 372: LD_EXP 68
 376: NOT
 377: AND
 378: PUSH
 379: LD_EXP 69
 383: NOT
 384: AND
 385: PUSH
 386: LD_INT 22
 388: PUSH
 389: LD_INT 3
 391: PUSH
 392: EMPTY
 393: LIST
 394: LIST
 395: PPUSH
 396: CALL_OW 69
 400: PUSH
 401: LD_INT 0
 403: EQUAL
 404: AND
 405: IFFALSE 417
 407: GO 409
 409: DISABLE
// SetAchievement ( ACH_TACT ) ;
 410: LD_STRING ACH_TACT
 412: PPUSH
 413: CALL_OW 543
 417: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 418: LD_INT 22
 420: PUSH
 421: LD_INT 1
 423: PUSH
 424: EMPTY
 425: LIST
 426: LIST
 427: PUSH
 428: LD_INT 30
 430: PUSH
 431: LD_INT 1
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PUSH
 438: EMPTY
 439: LIST
 440: LIST
 441: PPUSH
 442: CALL_OW 69
 446: PUSH
 447: LD_INT 22
 449: PUSH
 450: LD_INT 1
 452: PUSH
 453: EMPTY
 454: LIST
 455: LIST
 456: PUSH
 457: LD_INT 30
 459: PUSH
 460: LD_INT 32
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PPUSH
 471: CALL_OW 69
 475: AND
 476: PUSH
 477: LD_INT 22
 479: PUSH
 480: LD_INT 1
 482: PUSH
 483: EMPTY
 484: LIST
 485: LIST
 486: PUSH
 487: LD_INT 30
 489: PUSH
 490: LD_INT 33
 492: PUSH
 493: EMPTY
 494: LIST
 495: LIST
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: PPUSH
 501: CALL_OW 69
 505: AND
 506: PUSH
 507: LD_INT 22
 509: PUSH
 510: LD_INT 1
 512: PUSH
 513: EMPTY
 514: LIST
 515: LIST
 516: PUSH
 517: LD_INT 30
 519: PUSH
 520: LD_INT 5
 522: PUSH
 523: EMPTY
 524: LIST
 525: LIST
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PPUSH
 531: CALL_OW 69
 535: AND
 536: PUSH
 537: LD_INT 22
 539: PUSH
 540: LD_INT 1
 542: PUSH
 543: EMPTY
 544: LIST
 545: LIST
 546: PUSH
 547: LD_INT 30
 549: PUSH
 550: LD_INT 3
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: PPUSH
 561: CALL_OW 69
 565: AND
 566: PUSH
 567: LD_INT 22
 569: PUSH
 570: LD_INT 1
 572: PUSH
 573: EMPTY
 574: LIST
 575: LIST
 576: PUSH
 577: LD_INT 30
 579: PUSH
 580: LD_INT 36
 582: PUSH
 583: EMPTY
 584: LIST
 585: LIST
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PPUSH
 591: CALL_OW 69
 595: AND
 596: PUSH
 597: LD_INT 22
 599: PUSH
 600: LD_INT 1
 602: PUSH
 603: EMPTY
 604: LIST
 605: LIST
 606: PUSH
 607: LD_INT 30
 609: PUSH
 610: LD_INT 31
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PPUSH
 621: CALL_OW 69
 625: AND
 626: PUSH
 627: LD_INT 22
 629: PUSH
 630: LD_INT 1
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: LD_INT 30
 639: PUSH
 640: LD_INT 22
 642: PUSH
 643: EMPTY
 644: LIST
 645: LIST
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PPUSH
 651: CALL_OW 69
 655: AND
 656: PUSH
 657: LD_INT 22
 659: PUSH
 660: LD_INT 1
 662: PUSH
 663: EMPTY
 664: LIST
 665: LIST
 666: PUSH
 667: LD_INT 30
 669: PUSH
 670: LD_INT 20
 672: PUSH
 673: EMPTY
 674: LIST
 675: LIST
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PPUSH
 681: CALL_OW 69
 685: AND
 686: PUSH
 687: LD_INT 22
 689: PUSH
 690: LD_INT 1
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: PUSH
 697: LD_INT 30
 699: PUSH
 700: LD_INT 19
 702: PUSH
 703: EMPTY
 704: LIST
 705: LIST
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: PPUSH
 711: CALL_OW 69
 715: AND
 716: PUSH
 717: LD_INT 22
 719: PUSH
 720: LD_INT 1
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: PUSH
 727: LD_INT 30
 729: PUSH
 730: LD_INT 16
 732: PUSH
 733: EMPTY
 734: LIST
 735: LIST
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PPUSH
 741: CALL_OW 69
 745: AND
 746: PUSH
 747: LD_INT 22
 749: PUSH
 750: LD_INT 1
 752: PUSH
 753: EMPTY
 754: LIST
 755: LIST
 756: PUSH
 757: LD_INT 30
 759: PUSH
 760: LD_INT 17
 762: PUSH
 763: EMPTY
 764: LIST
 765: LIST
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PPUSH
 771: CALL_OW 69
 775: AND
 776: PUSH
 777: LD_INT 22
 779: PUSH
 780: LD_INT 1
 782: PUSH
 783: EMPTY
 784: LIST
 785: LIST
 786: PUSH
 787: LD_INT 30
 789: PUSH
 790: LD_INT 21
 792: PUSH
 793: EMPTY
 794: LIST
 795: LIST
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: PPUSH
 801: CALL_OW 69
 805: AND
 806: PUSH
 807: LD_INT 22
 809: PUSH
 810: LD_INT 1
 812: PUSH
 813: EMPTY
 814: LIST
 815: LIST
 816: PUSH
 817: LD_INT 30
 819: PUSH
 820: LD_INT 29
 822: PUSH
 823: EMPTY
 824: LIST
 825: LIST
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PPUSH
 831: CALL_OW 69
 835: AND
 836: PUSH
 837: LD_INT 22
 839: PUSH
 840: LD_INT 1
 842: PUSH
 843: EMPTY
 844: LIST
 845: LIST
 846: PUSH
 847: LD_INT 30
 849: PUSH
 850: LD_INT 30
 852: PUSH
 853: EMPTY
 854: LIST
 855: LIST
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PPUSH
 861: CALL_OW 69
 865: AND
 866: PUSH
 867: LD_INT 22
 869: PUSH
 870: LD_INT 1
 872: PUSH
 873: EMPTY
 874: LIST
 875: LIST
 876: PUSH
 877: LD_INT 30
 879: PUSH
 880: LD_INT 27
 882: PUSH
 883: EMPTY
 884: LIST
 885: LIST
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: PPUSH
 891: CALL_OW 69
 895: AND
 896: PUSH
 897: LD_INT 22
 899: PUSH
 900: LD_INT 1
 902: PUSH
 903: EMPTY
 904: LIST
 905: LIST
 906: PUSH
 907: LD_INT 30
 909: PUSH
 910: LD_INT 26
 912: PUSH
 913: EMPTY
 914: LIST
 915: LIST
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PPUSH
 921: CALL_OW 69
 925: AND
 926: PUSH
 927: LD_INT 22
 929: PUSH
 930: LD_INT 1
 932: PUSH
 933: EMPTY
 934: LIST
 935: LIST
 936: PUSH
 937: LD_INT 30
 939: PUSH
 940: LD_INT 28
 942: PUSH
 943: EMPTY
 944: LIST
 945: LIST
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PPUSH
 951: CALL_OW 69
 955: AND
 956: IFFALSE 968
 958: GO 960
 960: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
 961: LD_STRING ACH_ARCH
 963: PPUSH
 964: CALL_OW 543
 968: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Mike ; export Cornell , Truman , Powell ; export JMMSquad , others , others09 , ape09 ; export function PrepareAmerican ; var i , j , veh , vehs , sibRes , tmp , amount ; begin
 969: LD_INT 0
 971: PPUSH
 972: PPUSH
 973: PPUSH
 974: PPUSH
 975: PPUSH
 976: PPUSH
 977: PPUSH
 978: PPUSH
// uc_nation := nation_american ;
 979: LD_ADDR_OWVAR 21
 983: PUSH
 984: LD_INT 1
 986: ST_TO_ADDR
// uc_side := 4 ;
 987: LD_ADDR_OWVAR 20
 991: PUSH
 992: LD_INT 4
 994: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 995: LD_ADDR_EXP 44
 999: PUSH
1000: LD_STRING Powell
1002: PPUSH
1003: LD_INT 0
1005: PPUSH
1006: LD_STRING 
1008: PPUSH
1009: CALL 54436 0 3
1013: ST_TO_ADDR
// uc_side := 1 ;
1014: LD_ADDR_OWVAR 20
1018: PUSH
1019: LD_INT 1
1021: ST_TO_ADDR
// JMMSquad := [ ] ;
1022: LD_ADDR_EXP 45
1026: PUSH
1027: EMPTY
1028: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 10_ ) ;
1029: LD_ADDR_EXP 23
1033: PUSH
1034: LD_STRING JMM
1036: PPUSH
1037: LD_EXP 1
1041: NOT
1042: PPUSH
1043: LD_STRING 10_
1045: PPUSH
1046: CALL 54436 0 3
1050: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 10_ ) ;
1051: LD_ADDR_EXP 32
1055: PUSH
1056: LD_STRING Gary
1058: PPUSH
1059: LD_EXP 1
1063: NOT
1064: PPUSH
1065: LD_STRING 10_
1067: PPUSH
1068: CALL 54436 0 3
1072: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 10_ ) ;
1073: LD_ADDR_EXP 27
1077: PUSH
1078: LD_STRING Cyrus
1080: PPUSH
1081: LD_EXP 1
1085: NOT
1086: PPUSH
1087: LD_STRING 10_
1089: PPUSH
1090: CALL 54436 0 3
1094: ST_TO_ADDR
// if Cyrus then
1095: LD_EXP 27
1099: IFFALSE 1117
// JMMSquad := JMMSquad ^ Cyrus ;
1101: LD_ADDR_EXP 45
1105: PUSH
1106: LD_EXP 45
1110: PUSH
1111: LD_EXP 27
1115: ADD
1116: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 10_ ) ;
1117: LD_ADDR_EXP 26
1121: PUSH
1122: LD_STRING Bobby
1124: PPUSH
1125: LD_EXP 1
1129: NOT
1130: PPUSH
1131: LD_STRING 10_
1133: PPUSH
1134: CALL 54436 0 3
1138: ST_TO_ADDR
// if Bobby then
1139: LD_EXP 26
1143: IFFALSE 1161
// JMMSquad := JMMSquad ^ Bobby ;
1145: LD_ADDR_EXP 45
1149: PUSH
1150: LD_EXP 45
1154: PUSH
1155: LD_EXP 26
1159: ADD
1160: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 10_ ) ;
1161: LD_ADDR_EXP 28
1165: PUSH
1166: LD_STRING Lisa
1168: PPUSH
1169: LD_EXP 1
1173: NOT
1174: PPUSH
1175: LD_STRING 10_
1177: PPUSH
1178: CALL 54436 0 3
1182: ST_TO_ADDR
// if Lisa then
1183: LD_EXP 28
1187: IFFALSE 1205
// JMMSquad := JMMSquad ^ Lisa ;
1189: LD_ADDR_EXP 45
1193: PUSH
1194: LD_EXP 45
1198: PUSH
1199: LD_EXP 28
1203: ADD
1204: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 10_ ) ;
1205: LD_ADDR_EXP 24
1209: PUSH
1210: LD_STRING Brown
1212: PPUSH
1213: LD_EXP 1
1217: NOT
1218: PPUSH
1219: LD_STRING 10_
1221: PPUSH
1222: CALL 54436 0 3
1226: ST_TO_ADDR
// if Brown then
1227: LD_EXP 24
1231: IFFALSE 1249
// JMMSquad := JMMSquad ^ Brown ;
1233: LD_ADDR_EXP 45
1237: PUSH
1238: LD_EXP 45
1242: PUSH
1243: LD_EXP 24
1247: ADD
1248: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 10_ ) ;
1249: LD_ADDR_EXP 25
1253: PUSH
1254: LD_STRING Donaldson
1256: PPUSH
1257: LD_EXP 1
1261: NOT
1262: PPUSH
1263: LD_STRING 10_
1265: PPUSH
1266: CALL 54436 0 3
1270: ST_TO_ADDR
// if Donaldson then
1271: LD_EXP 25
1275: IFFALSE 1293
// JMMSquad := JMMSquad ^ Donaldson ;
1277: LD_ADDR_EXP 45
1281: PUSH
1282: LD_EXP 45
1286: PUSH
1287: LD_EXP 25
1291: ADD
1292: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 10_ ) ;
1293: LD_ADDR_EXP 29
1297: PUSH
1298: LD_STRING Frank
1300: PPUSH
1301: LD_EXP 1
1305: NOT
1306: PPUSH
1307: LD_STRING 10_
1309: PPUSH
1310: CALL 54436 0 3
1314: ST_TO_ADDR
// if Frank then
1315: LD_EXP 29
1319: IFFALSE 1337
// JMMSquad := JMMSquad ^ Frank ;
1321: LD_ADDR_EXP 45
1325: PUSH
1326: LD_EXP 45
1330: PUSH
1331: LD_EXP 29
1335: ADD
1336: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 10_ ) ;
1337: LD_ADDR_EXP 31
1341: PUSH
1342: LD_STRING Houten
1344: PPUSH
1345: LD_EXP 1
1349: NOT
1350: PPUSH
1351: LD_STRING 10_
1353: PPUSH
1354: CALL 54436 0 3
1358: ST_TO_ADDR
// if Houten then
1359: LD_EXP 31
1363: IFFALSE 1381
// JMMSquad := JMMSquad ^ Houten ;
1365: LD_ADDR_EXP 45
1369: PUSH
1370: LD_EXP 45
1374: PUSH
1375: LD_EXP 31
1379: ADD
1380: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn10 ) ;
1381: LD_ADDR_EXP 46
1385: PUSH
1386: LD_STRING OthersIn10
1388: PPUSH
1389: CALL_OW 31
1393: ST_TO_ADDR
// if Count ( JMMSquad ) + Count ( others ) < 9 then
1394: LD_EXP 45
1398: PPUSH
1399: CALL 56538 0 1
1403: PUSH
1404: LD_EXP 46
1408: PPUSH
1409: CALL 56538 0 1
1413: PLUS
1414: PUSH
1415: LD_INT 9
1417: LESS
1418: IFFALSE 1505
// begin InitHC_All ( ) ;
1420: CALL_OW 584
// for i := 9 downto Count ( JMMSquad ) + Count ( others ) do
1424: LD_ADDR_VAR 0 2
1428: PUSH
1429: DOUBLE
1430: LD_INT 9
1432: INC
1433: ST_TO_ADDR
1434: LD_EXP 45
1438: PPUSH
1439: CALL 56538 0 1
1443: PUSH
1444: LD_EXP 46
1448: PPUSH
1449: CALL 56538 0 1
1453: PLUS
1454: PUSH
1455: FOR_DOWNTO
1456: IFFALSE 1503
// begin PrepareHuman ( false , i mod 4 + 1 , 5 ) ;
1458: LD_INT 0
1460: PPUSH
1461: LD_VAR 0 2
1465: PUSH
1466: LD_INT 4
1468: MOD
1469: PUSH
1470: LD_INT 1
1472: PLUS
1473: PPUSH
1474: LD_INT 5
1476: PPUSH
1477: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1481: LD_ADDR_EXP 46
1485: PUSH
1486: LD_EXP 46
1490: PPUSH
1491: CALL_OW 44
1495: PPUSH
1496: CALL 92138 0 2
1500: ST_TO_ADDR
// end ;
1501: GO 1455
1503: POP
1504: POP
// end ; if debug then
1505: LD_EXP 1
1509: IFFALSE 1550
// result := [ Cyrus , Bobby , Lisa , Donaldson , Brown ] else
1511: LD_ADDR_VAR 0 1
1515: PUSH
1516: LD_EXP 27
1520: PUSH
1521: LD_EXP 26
1525: PUSH
1526: LD_EXP 28
1530: PUSH
1531: LD_EXP 25
1535: PUSH
1536: LD_EXP 24
1540: PUSH
1541: EMPTY
1542: LIST
1543: LIST
1544: LIST
1545: LIST
1546: LIST
1547: ST_TO_ADDR
1548: GO 1713
// result := CharacterSelection ( 1 , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ sel_not_changeable , sel_hired , sel_change_class ] ^ JMM ^ Gary ^ [ sel_not_hired , sel_changeable , sel_change_class ] ^ JMMSquad ^ others ^ [ sel_not_changeable , sel_not_hired ] ^ Powell , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , class_scientistic ] ) ;
1550: LD_ADDR_VAR 0 1
1554: PUSH
1555: LD_STRING 1
1557: PPUSH
1558: LD_INT 6
1560: PUSH
1561: LD_INT 5
1563: PUSH
1564: LD_INT 4
1566: PUSH
1567: LD_INT 4
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: LD_OWVAR 67
1580: ARRAY
1581: PPUSH
1582: LD_INT 6
1584: PUSH
1585: LD_INT 5
1587: PUSH
1588: LD_INT 4
1590: PUSH
1591: LD_INT 4
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: PUSH
1600: LD_OWVAR 67
1604: ARRAY
1605: PPUSH
1606: LD_INT -4
1608: PUSH
1609: LD_INT -1
1611: PUSH
1612: LD_INT -5
1614: PUSH
1615: EMPTY
1616: LIST
1617: LIST
1618: LIST
1619: PUSH
1620: LD_EXP 23
1624: ADD
1625: PUSH
1626: LD_EXP 32
1630: ADD
1631: PUSH
1632: LD_INT -2
1634: PUSH
1635: LD_INT -3
1637: PUSH
1638: LD_INT -5
1640: PUSH
1641: EMPTY
1642: LIST
1643: LIST
1644: LIST
1645: ADD
1646: PUSH
1647: LD_EXP 45
1651: ADD
1652: PUSH
1653: LD_EXP 46
1657: ADD
1658: PUSH
1659: LD_INT -4
1661: PUSH
1662: LD_INT -2
1664: PUSH
1665: EMPTY
1666: LIST
1667: LIST
1668: ADD
1669: PUSH
1670: LD_EXP 44
1674: ADD
1675: PPUSH
1676: LD_INT 1
1678: PUSH
1679: LD_INT 3
1681: PUSH
1682: LD_INT 1
1684: PUSH
1685: EMPTY
1686: LIST
1687: LIST
1688: PUSH
1689: LD_INT 2
1691: PUSH
1692: LD_INT 1
1694: PUSH
1695: EMPTY
1696: LIST
1697: LIST
1698: PUSH
1699: LD_INT 4
1701: PUSH
1702: EMPTY
1703: LIST
1704: LIST
1705: LIST
1706: LIST
1707: PPUSH
1708: CALL_OW 42
1712: ST_TO_ADDR
// result := JoinUnion ( result , JMM ) ;
1713: LD_ADDR_VAR 0 1
1717: PUSH
1718: LD_VAR 0 1
1722: PPUSH
1723: LD_EXP 23
1727: PPUSH
1728: CALL 92175 0 2
1732: ST_TO_ADDR
// if Gary then
1733: LD_EXP 32
1737: IFFALSE 1759
// result := JoinUnion ( result , Gary ) ;
1739: LD_ADDR_VAR 0 1
1743: PUSH
1744: LD_VAR 0 1
1748: PPUSH
1749: LD_EXP 32
1753: PPUSH
1754: CALL 92175 0 2
1758: ST_TO_ADDR
// if Count ( others ) then
1759: LD_EXP 46
1763: PPUSH
1764: CALL 56538 0 1
1768: IFFALSE 1786
// others := others diff result ;
1770: LD_ADDR_EXP 46
1774: PUSH
1775: LD_EXP 46
1779: PUSH
1780: LD_VAR 0 1
1784: DIFF
1785: ST_TO_ADDR
// vehs := [ ] ;
1786: LD_ADDR_VAR 0 5
1790: PUSH
1791: EMPTY
1792: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1793: LD_INT 2
1795: PPUSH
1796: LD_INT 1
1798: PPUSH
1799: LD_INT 1
1801: PPUSH
1802: LD_INT 12
1804: PPUSH
1805: LD_INT 50
1807: PPUSH
1808: CALL 59276 0 5
// veh := CreateVehicle ;
1812: LD_ADDR_VAR 0 4
1816: PUSH
1817: CALL_OW 45
1821: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1822: LD_ADDR_VAR 0 5
1826: PUSH
1827: LD_VAR 0 5
1831: PPUSH
1832: LD_VAR 0 4
1836: PPUSH
1837: CALL 92138 0 2
1841: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1842: LD_VAR 0 4
1846: PPUSH
1847: LD_INT 1
1849: PPUSH
1850: CALL_OW 233
// sibRes := LoadVariable ( 09_sibRes , 100 ) - 20 ;
1854: LD_ADDR_VAR 0 6
1858: PUSH
1859: LD_STRING 09_sibRes
1861: PPUSH
1862: LD_INT 100
1864: PPUSH
1865: CALL_OW 30
1869: PUSH
1870: LD_INT 20
1872: MINUS
1873: ST_TO_ADDR
// if sibRes >= 100 then
1874: LD_VAR 0 6
1878: PUSH
1879: LD_INT 100
1881: GREATEREQUAL
1882: IFFALSE 1901
// SetCargo ( veh , mat_siberit , 100 ) else
1884: LD_VAR 0 4
1888: PPUSH
1889: LD_INT 3
1891: PPUSH
1892: LD_INT 100
1894: PPUSH
1895: CALL_OW 290
1899: GO 1918
// SetCargo ( veh , mat_siberit , sibRes ) ;
1901: LD_VAR 0 4
1905: PPUSH
1906: LD_INT 3
1908: PPUSH
1909: LD_VAR 0 6
1913: PPUSH
1914: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1918: LD_INT 2
1920: PPUSH
1921: LD_INT 1
1923: PPUSH
1924: LD_INT 1
1926: PPUSH
1927: LD_INT 12
1929: PPUSH
1930: LD_INT 50
1932: PPUSH
1933: CALL 59276 0 5
// veh := CreateVehicle ;
1937: LD_ADDR_VAR 0 4
1941: PUSH
1942: CALL_OW 45
1946: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1947: LD_ADDR_VAR 0 5
1951: PUSH
1952: LD_VAR 0 5
1956: PPUSH
1957: LD_VAR 0 4
1961: PPUSH
1962: CALL 92138 0 2
1966: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1967: LD_VAR 0 4
1971: PPUSH
1972: LD_INT 1
1974: PPUSH
1975: CALL_OW 233
// SetCargo ( veh , mat_cans , 100 ) ;
1979: LD_VAR 0 4
1983: PPUSH
1984: LD_INT 1
1986: PPUSH
1987: LD_INT 100
1989: PPUSH
1990: CALL_OW 290
// for i := 1 to Count ( result ) - 2 do
1994: LD_ADDR_VAR 0 2
1998: PUSH
1999: DOUBLE
2000: LD_INT 1
2002: DEC
2003: ST_TO_ADDR
2004: LD_VAR 0 1
2008: PPUSH
2009: CALL 56538 0 1
2013: PUSH
2014: LD_INT 2
2016: MINUS
2017: PUSH
2018: FOR_TO
2019: IFFALSE 2125
// begin PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , [ us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun ] [ i mod 5 + 1 ] , rand ( 45 , 55 ) ) ;
2021: LD_INT 2
2023: PPUSH
2024: LD_INT 1
2026: PPUSH
2027: LD_INT 1
2029: PPUSH
2030: LD_INT 3
2032: PUSH
2033: LD_INT 4
2035: PUSH
2036: LD_INT 5
2038: PUSH
2039: LD_INT 11
2041: PUSH
2042: LD_INT 3
2044: PUSH
2045: EMPTY
2046: LIST
2047: LIST
2048: LIST
2049: LIST
2050: LIST
2051: PUSH
2052: LD_VAR 0 2
2056: PUSH
2057: LD_INT 5
2059: MOD
2060: PUSH
2061: LD_INT 1
2063: PLUS
2064: ARRAY
2065: PPUSH
2066: LD_INT 45
2068: PPUSH
2069: LD_INT 55
2071: PPUSH
2072: CALL_OW 12
2076: PPUSH
2077: CALL 59276 0 5
// veh := CreateVehicle ;
2081: LD_ADDR_VAR 0 4
2085: PUSH
2086: CALL_OW 45
2090: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
2091: LD_ADDR_VAR 0 5
2095: PUSH
2096: LD_VAR 0 5
2100: PPUSH
2101: LD_VAR 0 4
2105: PPUSH
2106: CALL 92138 0 2
2110: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2111: LD_VAR 0 4
2115: PPUSH
2116: LD_INT 1
2118: PPUSH
2119: CALL_OW 233
// end ;
2123: GO 2018
2125: POP
2126: POP
// for i in vehs do
2127: LD_ADDR_VAR 0 2
2131: PUSH
2132: LD_VAR 0 5
2136: PUSH
2137: FOR_IN
2138: IFFALSE 2193
// begin PlaceUnitArea ( i , startArea , false ) ;
2140: LD_VAR 0 2
2144: PPUSH
2145: LD_INT 3
2147: PPUSH
2148: LD_INT 0
2150: PPUSH
2151: CALL_OW 49
// PlaceHumanInUnit ( result [ 1 ] , i ) ;
2155: LD_VAR 0 1
2159: PUSH
2160: LD_INT 1
2162: ARRAY
2163: PPUSH
2164: LD_VAR 0 2
2168: PPUSH
2169: CALL_OW 52
// result := Delete ( result , 1 ) ;
2173: LD_ADDR_VAR 0 1
2177: PUSH
2178: LD_VAR 0 1
2182: PPUSH
2183: LD_INT 1
2185: PPUSH
2186: CALL_OW 3
2190: ST_TO_ADDR
// end ;
2191: GO 2137
2193: POP
2194: POP
// uc_side := 4 ;
2195: LD_ADDR_OWVAR 20
2199: PUSH
2200: LD_INT 4
2202: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , debug ) then
2203: LD_STRING 08_SikorskiStatus
2205: PPUSH
2206: LD_EXP 1
2210: PPUSH
2211: CALL_OW 30
2215: IFFALSE 2236
// Truman := PrepareUnit ( Truman , false ,  ) ;
2217: LD_ADDR_EXP 43
2221: PUSH
2222: LD_STRING Truman
2224: PPUSH
2225: LD_INT 0
2227: PPUSH
2228: LD_STRING 
2230: PPUSH
2231: CALL 54436 0 3
2235: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , false ,  ) ;
2236: LD_ADDR_EXP 33
2240: PUSH
2241: LD_STRING Simms
2243: PPUSH
2244: LD_INT 0
2246: PPUSH
2247: LD_STRING 
2249: PPUSH
2250: CALL 54436 0 3
2254: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 08_ ) ;
2255: LD_ADDR_EXP 34
2259: PUSH
2260: LD_STRING Denis
2262: PPUSH
2263: LD_EXP 1
2267: NOT
2268: PPUSH
2269: LD_STRING 08_
2271: PPUSH
2272: CALL 54436 0 3
2276: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 08_ ) ;
2277: LD_ADDR_EXP 35
2281: PUSH
2282: LD_STRING Joan
2284: PPUSH
2285: LD_EXP 1
2289: NOT
2290: PPUSH
2291: LD_STRING 08_
2293: PPUSH
2294: CALL 54436 0 3
2298: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 08_ ) ;
2299: LD_ADDR_EXP 41
2303: PUSH
2304: LD_STRING Mike
2306: PPUSH
2307: LD_EXP 1
2311: NOT
2312: PPUSH
2313: LD_STRING 08_
2315: PPUSH
2316: CALL 54436 0 3
2320: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2321: LD_STRING 08_Khatam
2323: PPUSH
2324: CALL_OW 28
2328: IFFALSE 2351
// Khatam := PrepareUnit ( Khatam , true , 08_ ) else
2330: LD_ADDR_EXP 36
2334: PUSH
2335: LD_STRING Khatam
2337: PPUSH
2338: LD_INT 1
2340: PPUSH
2341: LD_STRING 08_
2343: PPUSH
2344: CALL 54436 0 3
2348: ST_TO_ADDR
2349: GO 2379
// if TestCharacters ( 03_Khatam ) then
2351: LD_STRING 03_Khatam
2353: PPUSH
2354: CALL_OW 28
2358: IFFALSE 2379
// Khatam := PrepareUnit ( Khatam , true , 03_ ) ;
2360: LD_ADDR_EXP 36
2364: PUSH
2365: LD_STRING Khatam
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: LD_STRING 03_
2373: PPUSH
2374: CALL 54436 0 3
2378: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 08_ ) ;
2379: LD_ADDR_EXP 37
2383: PUSH
2384: LD_STRING Gladstone
2386: PPUSH
2387: LD_EXP 1
2391: NOT
2392: PPUSH
2393: LD_STRING 08_
2395: PPUSH
2396: CALL 54436 0 3
2400: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) ,  ) ;
2401: LD_ADDR_EXP 39
2405: PUSH
2406: LD_STRING DeltaDoctor
2408: PPUSH
2409: LD_EXP 1
2413: NOT
2414: PPUSH
2415: LD_STRING 
2417: PPUSH
2418: CALL 54436 0 3
2422: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 08_ ) ;
2423: LD_ADDR_EXP 29
2427: PUSH
2428: LD_STRING Frank
2430: PPUSH
2431: LD_EXP 1
2435: NOT
2436: PPUSH
2437: LD_STRING 08_
2439: PPUSH
2440: CALL 54436 0 3
2444: ST_TO_ADDR
// if Frank then
2445: LD_EXP 29
2449: IFFALSE 2472
// Kikuchi := PrepareUnit ( Yamoko , false ,  ) else
2451: LD_ADDR_EXP 30
2455: PUSH
2456: LD_STRING Yamoko
2458: PPUSH
2459: LD_INT 0
2461: PPUSH
2462: LD_STRING 
2464: PPUSH
2465: CALL 54436 0 3
2469: ST_TO_ADDR
2470: GO 2494
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 08_ ) ;
2472: LD_ADDR_EXP 30
2476: PUSH
2477: LD_STRING Kikuchi
2479: PPUSH
2480: LD_EXP 1
2484: NOT
2485: PPUSH
2486: LD_STRING 08_
2488: PPUSH
2489: CALL 54436 0 3
2493: ST_TO_ADDR
// others09 := CreateCharacterSet ( 09_others ) ;
2494: LD_ADDR_EXP 47
2498: PUSH
2499: LD_STRING 09_others
2501: PPUSH
2502: CALL_OW 31
2506: ST_TO_ADDR
// ape09 := CreateCharacterSet ( 09_apes ) ;
2507: LD_ADDR_EXP 48
2511: PUSH
2512: LD_STRING 09_apes
2514: PPUSH
2515: CALL_OW 31
2519: ST_TO_ADDR
// if Truman then
2520: LD_EXP 43
2524: IFFALSE 2541
// PlaceUnitArea ( Truman , epsilonSpawnArea , false ) ;
2526: LD_EXP 43
2530: PPUSH
2531: LD_INT 4
2533: PPUSH
2534: LD_INT 0
2536: PPUSH
2537: CALL_OW 49
// if Mike then
2541: LD_EXP 41
2545: IFFALSE 2562
// PlaceUnitArea ( Mike , epsilonSpawnArea , false ) ;
2547: LD_EXP 41
2551: PPUSH
2552: LD_INT 4
2554: PPUSH
2555: LD_INT 0
2557: PPUSH
2558: CALL_OW 49
// if Simms then
2562: LD_EXP 33
2566: IFFALSE 2583
// PlaceUnitArea ( Simms , epsilonSpawnArea , false ) ;
2568: LD_EXP 33
2572: PPUSH
2573: LD_INT 4
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 49
// if Denis then
2583: LD_EXP 34
2587: IFFALSE 2604
// PlaceUnitArea ( Denis , epsilonSpawnArea , false ) ;
2589: LD_EXP 34
2593: PPUSH
2594: LD_INT 4
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 49
// if Joan then
2604: LD_EXP 35
2608: IFFALSE 2625
// PlaceUnitArea ( Joan , epsilonSpawnArea , false ) ;
2610: LD_EXP 35
2614: PPUSH
2615: LD_INT 4
2617: PPUSH
2618: LD_INT 0
2620: PPUSH
2621: CALL_OW 49
// if Khatam then
2625: LD_EXP 36
2629: IFFALSE 2646
// PlaceUnitArea ( Khatam , epsilonSpawnArea , false ) ;
2631: LD_EXP 36
2635: PPUSH
2636: LD_INT 4
2638: PPUSH
2639: LD_INT 0
2641: PPUSH
2642: CALL_OW 49
// if Gladstone then
2646: LD_EXP 37
2650: IFFALSE 2667
// PlaceUnitArea ( Gladstone , epsilonSpawnArea , false ) ;
2652: LD_EXP 37
2656: PPUSH
2657: LD_INT 4
2659: PPUSH
2660: LD_INT 0
2662: PPUSH
2663: CALL_OW 49
// if DeltaDoctor then
2667: LD_EXP 39
2671: IFFALSE 2688
// PlaceUnitArea ( DeltaDoctor , epsilonSpawnArea , false ) ;
2673: LD_EXP 39
2677: PPUSH
2678: LD_INT 4
2680: PPUSH
2681: LD_INT 0
2683: PPUSH
2684: CALL_OW 49
// if Kikuchi then
2688: LD_EXP 30
2692: IFFALSE 2709
// PlaceUnitArea ( Kikuchi , epsilonSpawnArea , false ) ;
2694: LD_EXP 30
2698: PPUSH
2699: LD_INT 4
2701: PPUSH
2702: LD_INT 0
2704: PPUSH
2705: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , class_scientistic ) ;
2709: LD_EXP 33
2713: PUSH
2714: LD_EXP 36
2718: PUSH
2719: LD_EXP 34
2723: PUSH
2724: LD_EXP 37
2728: PUSH
2729: LD_EXP 39
2733: PUSH
2734: LD_EXP 35
2738: PUSH
2739: EMPTY
2740: LIST
2741: LIST
2742: LIST
2743: LIST
2744: LIST
2745: LIST
2746: PPUSH
2747: LD_INT 4
2749: PPUSH
2750: CALL_OW 336
// amount := Count ( others09 ) ;
2754: LD_ADDR_VAR 0 8
2758: PUSH
2759: LD_EXP 47
2763: PPUSH
2764: CALL 56538 0 1
2768: ST_TO_ADDR
// if amount then
2769: LD_VAR 0 8
2773: IFFALSE 2921
// begin if amount > [ 6 , 5 , 4 , 4 ] [ Difficulty ] then
2775: LD_VAR 0 8
2779: PUSH
2780: LD_INT 6
2782: PUSH
2783: LD_INT 5
2785: PUSH
2786: LD_INT 4
2788: PUSH
2789: LD_INT 4
2791: PUSH
2792: EMPTY
2793: LIST
2794: LIST
2795: LIST
2796: LIST
2797: PUSH
2798: LD_OWVAR 67
2802: ARRAY
2803: GREATER
2804: IFFALSE 2835
// amount := [ 6 , 5 , 4 , 4 ] [ Difficulty ] ;
2806: LD_ADDR_VAR 0 8
2810: PUSH
2811: LD_INT 6
2813: PUSH
2814: LD_INT 5
2816: PUSH
2817: LD_INT 4
2819: PUSH
2820: LD_INT 4
2822: PUSH
2823: EMPTY
2824: LIST
2825: LIST
2826: LIST
2827: LIST
2828: PUSH
2829: LD_OWVAR 67
2833: ARRAY
2834: ST_TO_ADDR
// for i := 1 to amount do
2835: LD_ADDR_VAR 0 2
2839: PUSH
2840: DOUBLE
2841: LD_INT 1
2843: DEC
2844: ST_TO_ADDR
2845: LD_VAR 0 8
2849: PUSH
2850: FOR_TO
2851: IFFALSE 2892
// begin PlaceUnitArea ( others09 [ 1 ] , epsilonSpawnArea , false ) ;
2853: LD_EXP 47
2857: PUSH
2858: LD_INT 1
2860: ARRAY
2861: PPUSH
2862: LD_INT 4
2864: PPUSH
2865: LD_INT 0
2867: PPUSH
2868: CALL_OW 49
// others09 := Delete ( others09 , 1 ) ;
2872: LD_ADDR_EXP 47
2876: PUSH
2877: LD_EXP 47
2881: PPUSH
2882: LD_INT 1
2884: PPUSH
2885: CALL_OW 3
2889: ST_TO_ADDR
// end ;
2890: GO 2850
2892: POP
2893: POP
// if Count ( others09 ) then
2894: LD_EXP 47
2898: PPUSH
2899: CALL 56538 0 1
2903: IFFALSE 2921
// others := others union others09 ;
2905: LD_ADDR_EXP 46
2909: PUSH
2910: LD_EXP 46
2914: PUSH
2915: LD_EXP 47
2919: UNION
2920: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) = 0 then
2921: LD_INT 22
2923: PUSH
2924: LD_INT 4
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PUSH
2931: LD_INT 50
2933: PUSH
2934: EMPTY
2935: LIST
2936: PUSH
2937: LD_INT 25
2939: PUSH
2940: LD_INT 2
2942: PUSH
2943: EMPTY
2944: LIST
2945: LIST
2946: PUSH
2947: EMPTY
2948: LIST
2949: LIST
2950: LIST
2951: PPUSH
2952: CALL_OW 69
2956: PUSH
2957: LD_INT 0
2959: EQUAL
2960: IFFALSE 3099
// begin tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2962: LD_ADDR_VAR 0 7
2966: PUSH
2967: LD_INT 22
2969: PUSH
2970: LD_INT 4
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: PUSH
2977: LD_INT 50
2979: PUSH
2980: EMPTY
2981: LIST
2982: PUSH
2983: LD_INT 25
2985: PUSH
2986: LD_INT 2
2988: PUSH
2989: EMPTY
2990: LIST
2991: LIST
2992: PUSH
2993: EMPTY
2994: LIST
2995: LIST
2996: LIST
2997: PPUSH
2998: CALL_OW 69
3002: PUSH
3003: LD_EXP 33
3007: PUSH
3008: LD_EXP 36
3012: PUSH
3013: LD_EXP 34
3017: PUSH
3018: LD_EXP 37
3022: PUSH
3023: LD_EXP 39
3027: PUSH
3028: LD_EXP 35
3032: PUSH
3033: EMPTY
3034: LIST
3035: LIST
3036: LIST
3037: LIST
3038: LIST
3039: LIST
3040: DIFF
3041: ST_TO_ADDR
// if not tmp then
3042: LD_VAR 0 7
3046: NOT
3047: IFFALSE 3083
// begin if Denis then
3049: LD_EXP 34
3053: IFFALSE 3069
// SetClass ( Denis , class_engineer ) else
3055: LD_EXP 34
3059: PPUSH
3060: LD_INT 2
3062: PPUSH
3063: CALL_OW 336
3067: GO 3081
// SetClass ( DeltaDoctor , class_engineer ) ;
3069: LD_EXP 39
3073: PPUSH
3074: LD_INT 2
3076: PPUSH
3077: CALL_OW 336
// end else
3081: GO 3099
// SetClass ( tmp [ 1 ] , class_engineer ) ;
3083: LD_VAR 0 7
3087: PUSH
3088: LD_INT 1
3090: ARRAY
3091: PPUSH
3092: LD_INT 2
3094: PPUSH
3095: CALL_OW 336
// end ; for i in ape09 do
3099: LD_ADDR_VAR 0 2
3103: PUSH
3104: LD_EXP 48
3108: PUSH
3109: FOR_IN
3110: IFFALSE 3129
// PlaceUnitArea ( i , epsilonSpawnArea , false ) ;
3112: LD_VAR 0 2
3116: PPUSH
3117: LD_INT 4
3119: PPUSH
3120: LD_INT 0
3122: PPUSH
3123: CALL_OW 49
3127: GO 3109
3129: POP
3130: POP
// PrepareSoldier ( sex_female , 6 ) ;
3131: LD_INT 2
3133: PPUSH
3134: LD_INT 6
3136: PPUSH
3137: CALL_OW 381
// AmScout := CreateHuman ;
3141: LD_ADDR_EXP 40
3145: PUSH
3146: CALL_OW 44
3150: ST_TO_ADDR
// end ;
3151: LD_VAR 0 1
3155: RET
// export function PrepareCornell ; begin
3156: LD_INT 0
3158: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3159: LD_INT 4
3161: PPUSH
3162: LD_INT 4
3164: PPUSH
3165: CALL_OW 343
// uc_side := 4 ;
3169: LD_ADDR_OWVAR 20
3173: PUSH
3174: LD_INT 4
3176: ST_TO_ADDR
// uc_nation := nation_american ;
3177: LD_ADDR_OWVAR 21
3181: PUSH
3182: LD_INT 1
3184: ST_TO_ADDR
// Cornell := PrepareUnit ( Cornel , ( not debug ) , 03_ ) ;
3185: LD_ADDR_EXP 42
3189: PUSH
3190: LD_STRING Cornel
3192: PPUSH
3193: LD_EXP 1
3197: NOT
3198: PPUSH
3199: LD_STRING 03_
3201: PPUSH
3202: CALL 54436 0 3
3206: ST_TO_ADDR
// if not Cornell then
3207: LD_EXP 42
3211: NOT
3212: IFFALSE 3216
// exit ;
3214: GO 3354
// PlaceUnitArea ( Cornell , cornelSpawnArea , false ) ;
3216: LD_EXP 42
3220: PPUSH
3221: LD_INT 12
3223: PPUSH
3224: LD_INT 0
3226: PPUSH
3227: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3231: LD_EXP 42
3235: PPUSH
3236: LD_INT 350
3238: PPUSH
3239: CALL_OW 234
// ComMoveXY ( Cornell , 125 , 17 ) ;
3243: LD_EXP 42
3247: PPUSH
3248: LD_INT 125
3250: PPUSH
3251: LD_INT 17
3253: PPUSH
3254: CALL_OW 111
// AddComMoveXY ( Cornell , 112 , 19 ) ;
3258: LD_EXP 42
3262: PPUSH
3263: LD_INT 112
3265: PPUSH
3266: LD_INT 19
3268: PPUSH
3269: CALL_OW 171
// if IsInUnit ( JMM ) then
3273: LD_EXP 23
3277: PPUSH
3278: CALL_OW 310
3282: IFFALSE 3325
// AddComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3284: LD_EXP 42
3288: PPUSH
3289: LD_EXP 23
3293: PPUSH
3294: CALL_OW 310
3298: PPUSH
3299: CALL_OW 250
3303: PPUSH
3304: LD_EXP 23
3308: PPUSH
3309: CALL_OW 310
3313: PPUSH
3314: CALL_OW 251
3318: PPUSH
3319: CALL_OW 171
3323: GO 3354
// AddComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3325: LD_EXP 42
3329: PPUSH
3330: LD_EXP 23
3334: PPUSH
3335: CALL_OW 250
3339: PPUSH
3340: LD_EXP 23
3344: PPUSH
3345: CALL_OW 251
3349: PPUSH
3350: CALL_OW 171
// end ; end_of_file
3354: LD_VAR 0 1
3358: RET
// export arForces , Dietrich , Ahmed ; export arTech , arBuildings , arMines , arCameras , arEscapist ; export function PrepareArabian ; var i , j , un , tmp , skill ; begin
3359: LD_INT 0
3361: PPUSH
3362: PPUSH
3363: PPUSH
3364: PPUSH
3365: PPUSH
3366: PPUSH
// uc_side := 2 ;
3367: LD_ADDR_OWVAR 20
3371: PUSH
3372: LD_INT 2
3374: ST_TO_ADDR
// uc_nation := nation_arabian ;
3375: LD_ADDR_OWVAR 21
3379: PUSH
3380: LD_INT 2
3382: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
3383: LD_ADDR_VAR 0 6
3387: PUSH
3388: LD_INT 4
3390: PUSH
3391: LD_INT 5
3393: PUSH
3394: LD_INT 6
3396: PUSH
3397: LD_INT 7
3399: PUSH
3400: EMPTY
3401: LIST
3402: LIST
3403: LIST
3404: LIST
3405: PUSH
3406: LD_OWVAR 67
3410: ARRAY
3411: ST_TO_ADDR
// arForces := [ ] ;
3412: LD_ADDR_EXP 49
3416: PUSH
3417: EMPTY
3418: ST_TO_ADDR
// arTech := [ ] ;
3419: LD_ADDR_EXP 52
3423: PUSH
3424: EMPTY
3425: ST_TO_ADDR
// arBuildings := [ ] ;
3426: LD_ADDR_EXP 53
3430: PUSH
3431: EMPTY
3432: ST_TO_ADDR
// arCameras := [ [ 94 , 19 ] , [ 92 , 34 ] , [ 109 , 67 ] , [ 120 , 38 ] , [ 116 , 30 ] , [ 102 , 20 ] ] ;
3433: LD_ADDR_EXP 55
3437: PUSH
3438: LD_INT 94
3440: PUSH
3441: LD_INT 19
3443: PUSH
3444: EMPTY
3445: LIST
3446: LIST
3447: PUSH
3448: LD_INT 92
3450: PUSH
3451: LD_INT 34
3453: PUSH
3454: EMPTY
3455: LIST
3456: LIST
3457: PUSH
3458: LD_INT 109
3460: PUSH
3461: LD_INT 67
3463: PUSH
3464: EMPTY
3465: LIST
3466: LIST
3467: PUSH
3468: LD_INT 120
3470: PUSH
3471: LD_INT 38
3473: PUSH
3474: EMPTY
3475: LIST
3476: LIST
3477: PUSH
3478: LD_INT 116
3480: PUSH
3481: LD_INT 30
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: PUSH
3488: LD_INT 102
3490: PUSH
3491: LD_INT 20
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: LIST
3502: LIST
3503: LIST
3504: LIST
3505: ST_TO_ADDR
// arMines := [ [ 73 , 36 ] , [ 76 , 38 ] , [ 79 , 39 ] ] ;
3506: LD_ADDR_EXP 54
3510: PUSH
3511: LD_INT 73
3513: PUSH
3514: LD_INT 36
3516: PUSH
3517: EMPTY
3518: LIST
3519: LIST
3520: PUSH
3521: LD_INT 76
3523: PUSH
3524: LD_INT 38
3526: PUSH
3527: EMPTY
3528: LIST
3529: LIST
3530: PUSH
3531: LD_INT 79
3533: PUSH
3534: LD_INT 39
3536: PUSH
3537: EMPTY
3538: LIST
3539: LIST
3540: PUSH
3541: EMPTY
3542: LIST
3543: LIST
3544: LIST
3545: ST_TO_ADDR
// arEscapist := [ ] ;
3546: LD_ADDR_EXP 56
3550: PUSH
3551: EMPTY
3552: ST_TO_ADDR
// SetResourceType ( GetBase ( arDep ) , mat_cans , 150 ) ;
3553: LD_INT 35
3555: PPUSH
3556: CALL_OW 274
3560: PPUSH
3561: LD_INT 1
3563: PPUSH
3564: LD_INT 150
3566: PPUSH
3567: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_oil , 60 ) ;
3571: LD_INT 35
3573: PPUSH
3574: CALL_OW 274
3578: PPUSH
3579: LD_INT 2
3581: PPUSH
3582: LD_INT 60
3584: PPUSH
3585: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_siberit , 10 ) ;
3589: LD_INT 35
3591: PPUSH
3592: CALL_OW 274
3596: PPUSH
3597: LD_INT 3
3599: PPUSH
3600: LD_INT 10
3602: PPUSH
3603: CALL_OW 277
// HiddenCamera ( 36 , 22 , 2 ) ;
3607: LD_INT 36
3609: PPUSH
3610: LD_INT 22
3612: PPUSH
3613: LD_INT 2
3615: PPUSH
3616: CALL_OW 244
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
3620: LD_ADDR_VAR 0 2
3624: PUSH
3625: LD_INT 22
3627: PUSH
3628: LD_INT 2
3630: PUSH
3631: EMPTY
3632: LIST
3633: LIST
3634: PUSH
3635: LD_INT 21
3637: PUSH
3638: LD_INT 3
3640: PUSH
3641: EMPTY
3642: LIST
3643: LIST
3644: PUSH
3645: EMPTY
3646: LIST
3647: LIST
3648: PPUSH
3649: CALL_OW 69
3653: PUSH
3654: FOR_IN
3655: IFFALSE 3671
// SetBLevel ( i , 6 ) ;
3657: LD_VAR 0 2
3661: PPUSH
3662: LD_INT 6
3664: PPUSH
3665: CALL_OW 241
3669: GO 3654
3671: POP
3672: POP
// Dietrich := NewCharacter ( Dietrich ) ;
3673: LD_ADDR_EXP 50
3677: PUSH
3678: LD_STRING Dietrich
3680: PPUSH
3681: CALL_OW 25
3685: ST_TO_ADDR
// PlaceHumanInUnit ( Dietrich , arDep ) ;
3686: LD_EXP 50
3690: PPUSH
3691: LD_INT 35
3693: PPUSH
3694: CALL_OW 52
// InitHC_All ( ) ;
3698: CALL_OW 584
// for i := 1 to 3 do
3702: LD_ADDR_VAR 0 2
3706: PUSH
3707: DOUBLE
3708: LD_INT 1
3710: DEC
3711: ST_TO_ADDR
3712: LD_INT 3
3714: PUSH
3715: FOR_TO
3716: IFFALSE 3822
// begin PrepareEngineer ( sex_male , skill ) ;
3718: LD_INT 1
3720: PPUSH
3721: LD_VAR 0 6
3725: PPUSH
3726: CALL_OW 382
// if i = 1 then
3730: LD_VAR 0 2
3734: PUSH
3735: LD_INT 1
3737: EQUAL
3738: IFFALSE 3750
// hc_name := Ahmed Abbasid else
3740: LD_ADDR_OWVAR 26
3744: PUSH
3745: LD_STRING Ahmed Abbasid
3747: ST_TO_ADDR
3748: GO 3758
// hc_name :=  ;
3750: LD_ADDR_OWVAR 26
3754: PUSH
3755: LD_STRING 
3757: ST_TO_ADDR
// un := CreateHuman ;
3758: LD_ADDR_VAR 0 4
3762: PUSH
3763: CALL_OW 44
3767: ST_TO_ADDR
// if i = 1 then
3768: LD_VAR 0 2
3772: PUSH
3773: LD_INT 1
3775: EQUAL
3776: IFFALSE 3788
// Ahmed := un ;
3778: LD_ADDR_EXP 51
3782: PUSH
3783: LD_VAR 0 4
3787: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
3788: LD_ADDR_EXP 49
3792: PUSH
3793: LD_EXP 49
3797: PPUSH
3798: LD_VAR 0 4
3802: PPUSH
3803: CALL 92138 0 2
3807: ST_TO_ADDR
// PlaceHumanInUnit ( un , arDep ) ;
3808: LD_VAR 0 4
3812: PPUSH
3813: LD_INT 35
3815: PPUSH
3816: CALL_OW 52
// end ;
3820: GO 3715
3822: POP
3823: POP
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
3824: LD_ADDR_VAR 0 2
3828: PUSH
3829: DOUBLE
3830: LD_INT 1
3832: DEC
3833: ST_TO_ADDR
3834: LD_INT 2
3836: PUSH
3837: LD_INT 3
3839: PUSH
3840: LD_INT 4
3842: PUSH
3843: LD_INT 5
3845: PUSH
3846: EMPTY
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: PUSH
3852: LD_OWVAR 67
3856: ARRAY
3857: PUSH
3858: FOR_TO
3859: IFFALSE 3934
// begin PrepareScientist ( false , skill ) ;
3861: LD_INT 0
3863: PPUSH
3864: LD_VAR 0 6
3868: PPUSH
3869: CALL_OW 384
// un := CreateHuman ;
3873: LD_ADDR_VAR 0 4
3877: PUSH
3878: CALL_OW 44
3882: ST_TO_ADDR
// SetSkill ( un , skill_combat , skill ) ;
3883: LD_VAR 0 4
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_VAR 0 6
3895: PPUSH
3896: CALL_OW 237
// arForces := Join ( arForces , un ) ;
3900: LD_ADDR_EXP 49
3904: PUSH
3905: LD_EXP 49
3909: PPUSH
3910: LD_VAR 0 4
3914: PPUSH
3915: CALL 92138 0 2
3919: ST_TO_ADDR
// PlaceHumanInUnit ( un , arLab ) ;
3920: LD_VAR 0 4
3924: PPUSH
3925: LD_INT 36
3927: PPUSH
3928: CALL_OW 52
// end ;
3932: GO 3858
3934: POP
3935: POP
// for j in [ arBar1 , arBar2 ] do
3936: LD_ADDR_VAR 0 3
3940: PUSH
3941: LD_INT 37
3943: PUSH
3944: LD_INT 38
3946: PUSH
3947: EMPTY
3948: LIST
3949: LIST
3950: PUSH
3951: FOR_IN
3952: IFFALSE 4032
// for i := 1 to 4 do
3954: LD_ADDR_VAR 0 2
3958: PUSH
3959: DOUBLE
3960: LD_INT 1
3962: DEC
3963: ST_TO_ADDR
3964: LD_INT 4
3966: PUSH
3967: FOR_TO
3968: IFFALSE 4028
// begin PrepareSoldier ( false , skill ) ;
3970: LD_INT 0
3972: PPUSH
3973: LD_VAR 0 6
3977: PPUSH
3978: CALL_OW 381
// un := CreateHuman ;
3982: LD_ADDR_VAR 0 4
3986: PUSH
3987: CALL_OW 44
3991: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
3992: LD_ADDR_EXP 49
3996: PUSH
3997: LD_EXP 49
4001: PPUSH
4002: LD_VAR 0 4
4006: PPUSH
4007: CALL 92138 0 2
4011: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
4012: LD_VAR 0 4
4016: PPUSH
4017: LD_VAR 0 3
4021: PPUSH
4022: CALL_OW 52
// end ;
4026: GO 3967
4028: POP
4029: POP
4030: GO 3951
4032: POP
4033: POP
// for i := 1 to 3 do
4034: LD_ADDR_VAR 0 2
4038: PUSH
4039: DOUBLE
4040: LD_INT 1
4042: DEC
4043: ST_TO_ADDR
4044: LD_INT 3
4046: PUSH
4047: FOR_TO
4048: IFFALSE 4127
// begin un := arForces [ arForces - i ] ;
4050: LD_ADDR_VAR 0 4
4054: PUSH
4055: LD_EXP 49
4059: PUSH
4060: LD_EXP 49
4064: PUSH
4065: LD_VAR 0 2
4069: MINUS
4070: ARRAY
4071: ST_TO_ADDR
// ComExitBuilding ( un ) ;
4072: LD_VAR 0 4
4076: PPUSH
4077: CALL_OW 122
// AddComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4081: LD_VAR 0 4
4085: PPUSH
4086: LD_INT 22
4088: PUSH
4089: LD_INT 2
4091: PUSH
4092: EMPTY
4093: LIST
4094: LIST
4095: PUSH
4096: LD_INT 30
4098: PUSH
4099: LD_INT 31
4101: PUSH
4102: EMPTY
4103: LIST
4104: LIST
4105: PUSH
4106: EMPTY
4107: LIST
4108: LIST
4109: PPUSH
4110: CALL_OW 69
4114: PUSH
4115: LD_VAR 0 2
4119: ARRAY
4120: PPUSH
4121: CALL_OW 180
// end ;
4125: GO 4047
4127: POP
4128: POP
// for i := 1 to 3 do
4129: LD_ADDR_VAR 0 2
4133: PUSH
4134: DOUBLE
4135: LD_INT 1
4137: DEC
4138: ST_TO_ADDR
4139: LD_INT 3
4141: PUSH
4142: FOR_TO
4143: IFFALSE 4228
// begin tmp := UnitFilter ( arForces , [ [ f_class , class_soldier ] , [ f_not , [ f_tag , tMine ] ] ] ) ;
4145: LD_ADDR_VAR 0 5
4149: PUSH
4150: LD_EXP 49
4154: PPUSH
4155: LD_INT 25
4157: PUSH
4158: LD_INT 1
4160: PUSH
4161: EMPTY
4162: LIST
4163: LIST
4164: PUSH
4165: LD_INT 3
4167: PUSH
4168: LD_INT 120
4170: PUSH
4171: LD_INT 6
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PUSH
4178: EMPTY
4179: LIST
4180: LIST
4181: PUSH
4182: EMPTY
4183: LIST
4184: LIST
4185: PPUSH
4186: CALL_OW 72
4190: ST_TO_ADDR
// if not tmp then
4191: LD_VAR 0 5
4195: NOT
4196: IFFALSE 4200
// continue ;
4198: GO 4142
// un := tmp [ 1 ] ;
4200: LD_ADDR_VAR 0 4
4204: PUSH
4205: LD_VAR 0 5
4209: PUSH
4210: LD_INT 1
4212: ARRAY
4213: ST_TO_ADDR
// SetTag ( un , tMine ) ;
4214: LD_VAR 0 4
4218: PPUSH
4219: LD_INT 6
4221: PPUSH
4222: CALL_OW 109
// end ;
4226: GO 4142
4228: POP
4229: POP
// for i in UnitsInside ( arBar2 ) do
4230: LD_ADDR_VAR 0 2
4234: PUSH
4235: LD_INT 38
4237: PPUSH
4238: CALL_OW 313
4242: PUSH
4243: FOR_IN
4244: IFFALSE 4260
// SetClass ( i , class_mortar ) ;
4246: LD_VAR 0 2
4250: PPUSH
4251: LD_INT 8
4253: PPUSH
4254: CALL_OW 336
4258: GO 4243
4260: POP
4261: POP
// end ;
4262: LD_VAR 0 1
4266: RET
// every 0 0$2 trigger joinedToEpsilon do var i , eng ;
4267: LD_EXP 7
4271: IFFALSE 4684
4273: GO 4275
4275: DISABLE
4276: LD_INT 0
4278: PPUSH
4279: PPUSH
// begin ComUpgradeLab ( arLab , b_lab_siberium ) ;
4280: LD_INT 36
4282: PPUSH
4283: LD_INT 11
4285: PPUSH
4286: CALL_OW 147
// wait ( 0 0$10 ) ;
4290: LD_INT 350
4292: PPUSH
4293: CALL_OW 67
// arBuildings := [ [ b_solar_power , 69 , 4 , 2 ] , [ b_solar_power , 67 , 6 , 3 ] ] ;
4297: LD_ADDR_EXP 53
4301: PUSH
4302: LD_INT 27
4304: PUSH
4305: LD_INT 69
4307: PUSH
4308: LD_INT 4
4310: PUSH
4311: LD_INT 2
4313: PUSH
4314: EMPTY
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: PUSH
4320: LD_INT 27
4322: PUSH
4323: LD_INT 67
4325: PUSH
4326: LD_INT 6
4328: PUSH
4329: LD_INT 3
4331: PUSH
4332: EMPTY
4333: LIST
4334: LIST
4335: LIST
4336: LIST
4337: PUSH
4338: EMPTY
4339: LIST
4340: LIST
4341: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4342: LD_INT 35
4344: PPUSH
4345: CALL_OW 67
// until not arBuildings ;
4349: LD_EXP 53
4353: NOT
4354: IFFALSE 4342
// eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
4356: LD_ADDR_VAR 0 2
4360: PUSH
4361: LD_EXP 49
4365: PPUSH
4366: LD_INT 25
4368: PUSH
4369: LD_INT 2
4371: PUSH
4372: EMPTY
4373: LIST
4374: LIST
4375: PPUSH
4376: CALL_OW 72
4380: ST_TO_ADDR
// if eng then
4381: LD_VAR 0 2
4385: IFFALSE 4522
// begin eng := eng [ 1 ] ;
4387: LD_ADDR_VAR 0 2
4391: PUSH
4392: LD_VAR 0 2
4396: PUSH
4397: LD_INT 1
4399: ARRAY
4400: ST_TO_ADDR
// SetTag ( eng , tCamera ) ;
4401: LD_VAR 0 2
4405: PPUSH
4406: LD_INT 4
4408: PPUSH
4409: CALL_OW 109
// for i in arCameras do
4413: LD_ADDR_VAR 0 1
4417: PUSH
4418: LD_EXP 55
4422: PUSH
4423: FOR_IN
4424: IFFALSE 4455
// AddComHiddenCamera ( eng , i [ 1 ] , i [ 2 ] ) ;
4426: LD_VAR 0 2
4430: PPUSH
4431: LD_VAR 0 1
4435: PUSH
4436: LD_INT 1
4438: ARRAY
4439: PPUSH
4440: LD_VAR 0 1
4444: PUSH
4445: LD_INT 2
4447: ARRAY
4448: PPUSH
4449: CALL_OW 217
4453: GO 4423
4455: POP
4456: POP
// repeat wait ( 0 0$1 ) ;
4457: LD_INT 35
4459: PPUSH
4460: CALL_OW 67
// until not HasTask ( eng ) or IsDead ( eng ) ;
4464: LD_VAR 0 2
4468: PPUSH
4469: CALL_OW 314
4473: NOT
4474: PUSH
4475: LD_VAR 0 2
4479: PPUSH
4480: CALL_OW 301
4484: OR
4485: IFFALSE 4457
// if IsOk ( eng ) then
4487: LD_VAR 0 2
4491: PPUSH
4492: CALL_OW 302
4496: IFFALSE 4522
// begin SetTag ( eng , 0 ) ;
4498: LD_VAR 0 2
4502: PPUSH
4503: LD_INT 0
4505: PPUSH
4506: CALL_OW 109
// ComEnterUnit ( eng , arDep ) ;
4510: LD_VAR 0 2
4514: PPUSH
4515: LD_INT 35
4517: PPUSH
4518: CALL_OW 120
// end ; end ; repeat wait ( 0 0$1 ) ;
4522: LD_INT 35
4524: PPUSH
4525: CALL_OW 67
// if tick mod 4200 = 0 and GetListOfCratesInArea ( arCratesArea ) < 3 then
4529: LD_OWVAR 1
4533: PUSH
4534: LD_INT 4200
4536: MOD
4537: PUSH
4538: LD_INT 0
4540: EQUAL
4541: PUSH
4542: LD_INT 9
4544: PPUSH
4545: CALL_OW 435
4549: PUSH
4550: LD_INT 3
4552: LESS
4553: AND
4554: IFFALSE 4577
// CreateCratesArea ( rand ( 1 , 5 ) , arCratesArea , true ) ;
4556: LD_INT 1
4558: PPUSH
4559: LD_INT 5
4561: PPUSH
4562: CALL_OW 12
4566: PPUSH
4567: LD_INT 9
4569: PPUSH
4570: LD_INT 1
4572: PPUSH
4573: CALL_OW 55
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) ;
4577: LD_INT 22
4579: PUSH
4580: LD_INT 1
4582: PUSH
4583: EMPTY
4584: LIST
4585: LIST
4586: PUSH
4587: LD_INT 3
4589: PUSH
4590: LD_INT 57
4592: PUSH
4593: EMPTY
4594: LIST
4595: PUSH
4596: EMPTY
4597: LIST
4598: LIST
4599: PUSH
4600: LD_INT 63
4602: PUSH
4603: LD_INT 11
4605: PUSH
4606: EMPTY
4607: LIST
4608: LIST
4609: PUSH
4610: EMPTY
4611: LIST
4612: LIST
4613: LIST
4614: PPUSH
4615: CALL_OW 69
4619: IFFALSE 4522
// wait ( 0 0$10 ) ;
4621: LD_INT 350
4623: PPUSH
4624: CALL_OW 67
// arTech := [ tech_sibPow , tech_sibEng , tech_sib1 ] ;
4628: LD_ADDR_EXP 52
4632: PUSH
4633: LD_INT 21
4635: PUSH
4636: LD_INT 22
4638: PUSH
4639: LD_INT 54
4641: PUSH
4642: EMPTY
4643: LIST
4644: LIST
4645: LIST
4646: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4647: LD_INT 35
4649: PPUSH
4650: CALL_OW 67
// until not arTech ;
4654: LD_EXP 52
4658: NOT
4659: IFFALSE 4647
// wait ( 0 0$30 ) ;
4661: LD_INT 1050
4663: PPUSH
4664: CALL_OW 67
// arabianAttack := true ;
4668: LD_ADDR_EXP 4
4672: PUSH
4673: LD_INT 1
4675: ST_TO_ADDR
// arBaseActive := false ;
4676: LD_ADDR_EXP 3
4680: PUSH
4681: LD_INT 0
4683: ST_TO_ADDR
// end ;
4684: PPOPN 2
4686: END
// every 3 trigger arBaseActive and arMines and FilterUnitsInArea ( arMinesArea , [ f_enemy , 2 ] ) do var i , e ;
4687: LD_EXP 3
4691: PUSH
4692: LD_EXP 54
4696: AND
4697: PUSH
4698: LD_INT 8
4700: PPUSH
4701: LD_INT 81
4703: PUSH
4704: LD_INT 2
4706: PUSH
4707: EMPTY
4708: LIST
4709: LIST
4710: PPUSH
4711: CALL_OW 70
4715: AND
4716: IFFALSE 4827
4718: GO 4720
4720: DISABLE
4721: LD_INT 0
4723: PPUSH
4724: PPUSH
// begin enable ;
4725: ENABLE
// for i in arMines do
4726: LD_ADDR_VAR 0 1
4730: PUSH
4731: LD_EXP 54
4735: PUSH
4736: FOR_IN
4737: IFFALSE 4825
// begin e := HexInfo ( i [ 1 ] , i [ 2 ] ) ;
4739: LD_ADDR_VAR 0 2
4743: PUSH
4744: LD_VAR 0 1
4748: PUSH
4749: LD_INT 1
4751: ARRAY
4752: PPUSH
4753: LD_VAR 0 1
4757: PUSH
4758: LD_INT 2
4760: ARRAY
4761: PPUSH
4762: CALL_OW 428
4766: ST_TO_ADDR
// if not e then
4767: LD_VAR 0 2
4771: NOT
4772: IFFALSE 4776
// continue ;
4774: GO 4736
// if GetSide ( e ) in [ 3 , 6 ] then
4776: LD_VAR 0 2
4780: PPUSH
4781: CALL_OW 255
4785: PUSH
4786: LD_INT 3
4788: PUSH
4789: LD_INT 6
4791: PUSH
4792: EMPTY
4793: LIST
4794: LIST
4795: IN
4796: IFFALSE 4823
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 2 ) ;
4798: LD_VAR 0 1
4802: PUSH
4803: LD_INT 1
4805: ARRAY
4806: PPUSH
4807: LD_VAR 0 1
4811: PUSH
4812: LD_INT 2
4814: ARRAY
4815: PPUSH
4816: LD_INT 2
4818: PPUSH
4819: CALL_OW 456
// end ;
4823: GO 4736
4825: POP
4826: POP
// end ;
4827: PPOPN 2
4829: END
// every 0 0$2 trigger arBaseActive do var i , un , b , side , tmp , lab , eng , tag , cr , tw , sci , sol , hurtUnits , enemyInBase , empty , fac ;
4830: LD_EXP 3
4834: IFFALSE 7022
4836: GO 4838
4838: DISABLE
4839: LD_INT 0
4841: PPUSH
4842: PPUSH
4843: PPUSH
4844: PPUSH
4845: PPUSH
4846: PPUSH
4847: PPUSH
4848: PPUSH
4849: PPUSH
4850: PPUSH
4851: PPUSH
4852: PPUSH
4853: PPUSH
4854: PPUSH
4855: PPUSH
4856: PPUSH
// begin enable ;
4857: ENABLE
// side := 2 ;
4858: LD_ADDR_VAR 0 4
4862: PUSH
4863: LD_INT 2
4865: ST_TO_ADDR
// if arTech then
4866: LD_EXP 52
4870: IFFALSE 5026
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4872: LD_ADDR_VAR 0 6
4876: PUSH
4877: LD_INT 22
4879: PUSH
4880: LD_VAR 0 4
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PUSH
4889: LD_INT 50
4891: PUSH
4892: EMPTY
4893: LIST
4894: PUSH
4895: LD_INT 2
4897: PUSH
4898: LD_INT 30
4900: PUSH
4901: LD_INT 6
4903: PUSH
4904: EMPTY
4905: LIST
4906: LIST
4907: PUSH
4908: LD_INT 30
4910: PUSH
4911: LD_INT 7
4913: PUSH
4914: EMPTY
4915: LIST
4916: LIST
4917: PUSH
4918: LD_INT 30
4920: PUSH
4921: LD_INT 8
4923: PUSH
4924: EMPTY
4925: LIST
4926: LIST
4927: PUSH
4928: EMPTY
4929: LIST
4930: LIST
4931: LIST
4932: LIST
4933: PUSH
4934: EMPTY
4935: LIST
4936: LIST
4937: LIST
4938: PPUSH
4939: CALL_OW 69
4943: ST_TO_ADDR
// if lab then
4944: LD_VAR 0 6
4948: IFFALSE 5026
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
4950: LD_VAR 0 6
4954: PUSH
4955: LD_INT 1
4957: ARRAY
4958: PPUSH
4959: CALL_OW 461
4963: PUSH
4964: LD_INT 2
4966: EQUAL
4967: IFFALSE 5026
// begin for i in arTech do
4969: LD_ADDR_VAR 0 1
4973: PUSH
4974: LD_EXP 52
4978: PUSH
4979: FOR_IN
4980: IFFALSE 5024
// if CanBeResearched ( lab [ 1 ] , i ) then
4982: LD_VAR 0 6
4986: PUSH
4987: LD_INT 1
4989: ARRAY
4990: PPUSH
4991: LD_VAR 0 1
4995: PPUSH
4996: CALL_OW 430
5000: IFFALSE 5022
// begin ComResearch ( lab [ 1 ] , i ) ;
5002: LD_VAR 0 6
5006: PUSH
5007: LD_INT 1
5009: ARRAY
5010: PPUSH
5011: LD_VAR 0 1
5015: PPUSH
5016: CALL_OW 124
// break ;
5020: GO 5024
// end ;
5022: GO 4979
5024: POP
5025: POP
// end ; end ; end ; tmp := FilterUnitsInArea ( arBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5026: LD_ADDR_VAR 0 5
5030: PUSH
5031: LD_INT 5
5033: PPUSH
5034: LD_INT 21
5036: PUSH
5037: LD_INT 3
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PUSH
5044: LD_INT 3
5046: PUSH
5047: LD_INT 24
5049: PUSH
5050: LD_INT 1000
5052: PUSH
5053: EMPTY
5054: LIST
5055: LIST
5056: PUSH
5057: EMPTY
5058: LIST
5059: LIST
5060: PUSH
5061: EMPTY
5062: LIST
5063: LIST
5064: PPUSH
5065: CALL_OW 70
5069: ST_TO_ADDR
// cr := GetListOfCratesInArea ( arCratesArea ) ;
5070: LD_ADDR_VAR 0 9
5074: PUSH
5075: LD_INT 9
5077: PPUSH
5078: CALL_OW 435
5082: ST_TO_ADDR
// sci := UnitFilter ( arForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
5083: LD_ADDR_VAR 0 11
5087: PUSH
5088: LD_EXP 49
5092: PPUSH
5093: LD_INT 25
5095: PUSH
5096: LD_INT 4
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: LD_INT 50
5105: PUSH
5106: EMPTY
5107: LIST
5108: PUSH
5109: EMPTY
5110: LIST
5111: LIST
5112: PPUSH
5113: CALL_OW 72
5117: ST_TO_ADDR
// if sci then
5118: LD_VAR 0 11
5122: IFFALSE 5486
// begin hurtUnits := UnitFilter ( arForces , [ [ f_inarea , arBaseArea ] , [ f_not , [ f_inside ] ] , [ f_tag , tHeal ] ] ) ;
5124: LD_ADDR_VAR 0 13
5128: PUSH
5129: LD_EXP 49
5133: PPUSH
5134: LD_INT 95
5136: PUSH
5137: LD_INT 5
5139: PUSH
5140: EMPTY
5141: LIST
5142: LIST
5143: PUSH
5144: LD_INT 3
5146: PUSH
5147: LD_INT 54
5149: PUSH
5150: EMPTY
5151: LIST
5152: PUSH
5153: EMPTY
5154: LIST
5155: LIST
5156: PUSH
5157: LD_INT 120
5159: PUSH
5160: LD_INT 1
5162: PUSH
5163: EMPTY
5164: LIST
5165: LIST
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: LIST
5171: PPUSH
5172: CALL_OW 72
5176: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5177: LD_ADDR_VAR 0 6
5181: PUSH
5182: LD_INT 22
5184: PUSH
5185: LD_VAR 0 4
5189: PUSH
5190: EMPTY
5191: LIST
5192: LIST
5193: PUSH
5194: LD_INT 50
5196: PUSH
5197: EMPTY
5198: LIST
5199: PUSH
5200: LD_INT 2
5202: PUSH
5203: LD_INT 30
5205: PUSH
5206: LD_INT 6
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: PUSH
5213: LD_INT 30
5215: PUSH
5216: LD_INT 7
5218: PUSH
5219: EMPTY
5220: LIST
5221: LIST
5222: PUSH
5223: LD_INT 30
5225: PUSH
5226: LD_INT 8
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PUSH
5233: EMPTY
5234: LIST
5235: LIST
5236: LIST
5237: LIST
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: LIST
5243: PPUSH
5244: CALL_OW 69
5248: ST_TO_ADDR
// tag := GetTag ( i ) ;
5249: LD_ADDR_VAR 0 8
5253: PUSH
5254: LD_VAR 0 1
5258: PPUSH
5259: CALL_OW 110
5263: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
5264: LD_VAR 0 1
5268: PPUSH
5269: CALL_OW 256
5273: PUSH
5274: LD_INT 800
5276: LESS
5277: PUSH
5278: LD_VAR 0 8
5282: PUSH
5283: LD_INT 1
5285: NONEQUAL
5286: AND
5287: IFFALSE 5316
// begin ComMoveXY ( i , 72 , 15 ) ;
5289: LD_VAR 0 1
5293: PPUSH
5294: LD_INT 72
5296: PPUSH
5297: LD_INT 15
5299: PPUSH
5300: CALL_OW 111
// SetTag ( i , tHeal ) ;
5304: LD_VAR 0 1
5308: PPUSH
5309: LD_INT 1
5311: PPUSH
5312: CALL_OW 109
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5316: LD_VAR 0 1
5320: PPUSH
5321: CALL_OW 256
5325: PUSH
5326: LD_INT 1000
5328: EQUAL
5329: PUSH
5330: LD_VAR 0 8
5334: PUSH
5335: LD_INT 1
5337: EQUAL
5338: AND
5339: IFFALSE 5353
// begin SetTag ( i , 0 ) ;
5341: LD_VAR 0 1
5345: PPUSH
5346: LD_INT 0
5348: PPUSH
5349: CALL_OW 109
// end ; if hurtUnits then
5353: LD_VAR 0 13
5357: IFFALSE 5418
// begin for i in sci do
5359: LD_ADDR_VAR 0 1
5363: PUSH
5364: LD_VAR 0 11
5368: PUSH
5369: FOR_IN
5370: IFFALSE 5414
// if IsInUnit ( i ) then
5372: LD_VAR 0 1
5376: PPUSH
5377: CALL_OW 310
5381: IFFALSE 5394
// ComExitBuilding ( i ) else
5383: LD_VAR 0 1
5387: PPUSH
5388: CALL_OW 122
5392: GO 5412
// ComHeal ( i , hurtUnits [ 1 ] ) ;
5394: LD_VAR 0 1
5398: PPUSH
5399: LD_VAR 0 13
5403: PUSH
5404: LD_INT 1
5406: ARRAY
5407: PPUSH
5408: CALL_OW 128
5412: GO 5369
5414: POP
5415: POP
// end else
5416: GO 5486
// if lab then
5418: LD_VAR 0 6
5422: IFFALSE 5486
// begin for i in sci do
5424: LD_ADDR_VAR 0 1
5428: PUSH
5429: LD_VAR 0 11
5433: PUSH
5434: FOR_IN
5435: IFFALSE 5484
// if not IsInUnit ( i ) and GetTag ( i ) <> tHeal then
5437: LD_VAR 0 1
5441: PPUSH
5442: CALL_OW 310
5446: NOT
5447: PUSH
5448: LD_VAR 0 1
5452: PPUSH
5453: CALL_OW 110
5457: PUSH
5458: LD_INT 1
5460: NONEQUAL
5461: AND
5462: IFFALSE 5482
// ComEnterUnit ( i , lab [ 1 ] ) ;
5464: LD_VAR 0 1
5468: PPUSH
5469: LD_VAR 0 6
5473: PUSH
5474: LD_INT 1
5476: ARRAY
5477: PPUSH
5478: CALL_OW 120
5482: GO 5434
5484: POP
5485: POP
// end ; end ; eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
5486: LD_ADDR_VAR 0 7
5490: PUSH
5491: LD_EXP 49
5495: PPUSH
5496: LD_INT 25
5498: PUSH
5499: LD_INT 2
5501: PUSH
5502: EMPTY
5503: LIST
5504: LIST
5505: PPUSH
5506: CALL_OW 72
5510: ST_TO_ADDR
// if eng then
5511: LD_VAR 0 7
5515: IFFALSE 6184
// begin for i in eng do
5517: LD_ADDR_VAR 0 1
5521: PUSH
5522: LD_VAR 0 7
5526: PUSH
5527: FOR_IN
5528: IFFALSE 6182
// begin tag := GetTag ( i ) ;
5530: LD_ADDR_VAR 0 8
5534: PUSH
5535: LD_VAR 0 1
5539: PPUSH
5540: CALL_OW 110
5544: ST_TO_ADDR
// if tag = tCamera then
5545: LD_VAR 0 8
5549: PUSH
5550: LD_INT 4
5552: EQUAL
5553: IFFALSE 5557
// continue ;
5555: GO 5527
// if GetLives ( i ) < 600 and tag <> tHeal then
5557: LD_VAR 0 1
5561: PPUSH
5562: CALL_OW 256
5566: PUSH
5567: LD_INT 600
5569: LESS
5570: PUSH
5571: LD_VAR 0 8
5575: PUSH
5576: LD_INT 1
5578: NONEQUAL
5579: AND
5580: IFFALSE 5618
// begin SetTag ( i , tHeal ) ;
5582: LD_VAR 0 1
5586: PPUSH
5587: LD_INT 1
5589: PPUSH
5590: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
5594: LD_VAR 0 1
5598: PPUSH
5599: LD_INT 72
5601: PPUSH
5602: LD_INT 15
5604: PPUSH
5605: CALL_OW 111
// AddComHold ( i ) ;
5609: LD_VAR 0 1
5613: PPUSH
5614: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
5618: LD_VAR 0 8
5622: PUSH
5623: LD_INT 1
5625: EQUAL
5626: PUSH
5627: LD_VAR 0 1
5631: PPUSH
5632: CALL_OW 256
5636: PUSH
5637: LD_INT 1000
5639: EQUAL
5640: AND
5641: IFFALSE 5655
// SetTag ( i , 0 ) ;
5643: LD_VAR 0 1
5647: PPUSH
5648: LD_INT 0
5650: PPUSH
5651: CALL_OW 109
// if not tag then
5655: LD_VAR 0 8
5659: NOT
5660: IFFALSE 5806
// begin if cr or tmp or Count ( arBuildings ) then
5662: LD_VAR 0 9
5666: PUSH
5667: LD_VAR 0 5
5671: OR
5672: PUSH
5673: LD_EXP 53
5677: PPUSH
5678: CALL 56538 0 1
5682: OR
5683: IFFALSE 5770
// begin if IsInUnit ( i ) then
5685: LD_VAR 0 1
5689: PPUSH
5690: CALL_OW 310
5694: IFFALSE 5705
// ComExitBuilding ( i ) ;
5696: LD_VAR 0 1
5700: PPUSH
5701: CALL_OW 122
// if tmp then
5705: LD_VAR 0 5
5709: IFFALSE 5725
// SetTag ( i , tRepair ) else
5711: LD_VAR 0 1
5715: PPUSH
5716: LD_INT 3
5718: PPUSH
5719: CALL_OW 109
5723: GO 5768
// if cr then
5725: LD_VAR 0 9
5729: IFFALSE 5745
// SetTag ( i , tCrates ) else
5731: LD_VAR 0 1
5735: PPUSH
5736: LD_INT 2
5738: PPUSH
5739: CALL_OW 109
5743: GO 5768
// if Count ( arBuildings ) then
5745: LD_EXP 53
5749: PPUSH
5750: CALL 56538 0 1
5754: IFFALSE 5768
// SetTag ( i , tBuild ) ;
5756: LD_VAR 0 1
5760: PPUSH
5761: LD_INT 5
5763: PPUSH
5764: CALL_OW 109
// end else
5768: GO 5806
// if not IsInUnit ( i ) then
5770: LD_VAR 0 1
5774: PPUSH
5775: CALL_OW 310
5779: NOT
5780: IFFALSE 5806
// begin SetTag ( i , 0 ) ;
5782: LD_VAR 0 1
5786: PPUSH
5787: LD_INT 0
5789: PPUSH
5790: CALL_OW 109
// ComEnterUnit ( i , arDep ) ;
5794: LD_VAR 0 1
5798: PPUSH
5799: LD_INT 35
5801: PPUSH
5802: CALL_OW 120
// end ; end ; if tag = tRepair then
5806: LD_VAR 0 8
5810: PUSH
5811: LD_INT 3
5813: EQUAL
5814: IFFALSE 5916
// begin if IsInUnit ( i ) then
5816: LD_VAR 0 1
5820: PPUSH
5821: CALL_OW 310
5825: IFFALSE 5838
// begin ComExitBuilding ( i ) ;
5827: LD_VAR 0 1
5831: PPUSH
5832: CALL_OW 122
// continue ;
5836: GO 5527
// end ; if not tmp then
5838: LD_VAR 0 5
5842: NOT
5843: IFFALSE 5859
// begin SetTag ( i , 0 ) ;
5845: LD_VAR 0 1
5849: PPUSH
5850: LD_INT 0
5852: PPUSH
5853: CALL_OW 109
// continue ;
5857: GO 5527
// end ; if not HasTask ( i ) then
5859: LD_VAR 0 1
5863: PPUSH
5864: CALL_OW 314
5868: NOT
5869: IFFALSE 5889
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
5871: LD_VAR 0 1
5875: PPUSH
5876: LD_VAR 0 5
5880: PUSH
5881: LD_INT 1
5883: ARRAY
5884: PPUSH
5885: CALL_OW 130
// if not IsInArea ( i , arBaseArea ) then
5889: LD_VAR 0 1
5893: PPUSH
5894: LD_INT 5
5896: PPUSH
5897: CALL_OW 308
5901: NOT
5902: IFFALSE 5916
// ComMoveToArea ( i , arBaseArea ) ;
5904: LD_VAR 0 1
5908: PPUSH
5909: LD_INT 5
5911: PPUSH
5912: CALL_OW 113
// end ; if tag = tBuild then
5916: LD_VAR 0 8
5920: PUSH
5921: LD_INT 5
5923: EQUAL
5924: IFFALSE 6035
// begin if IsInUnit ( i ) then
5926: LD_VAR 0 1
5930: PPUSH
5931: CALL_OW 310
5935: IFFALSE 5948
// begin ComExitBuilding ( i ) ;
5937: LD_VAR 0 1
5941: PPUSH
5942: CALL_OW 122
// continue ;
5946: GO 5527
// end ; if not Count ( arBuildings ) then
5948: LD_EXP 53
5952: PPUSH
5953: CALL 56538 0 1
5957: NOT
5958: IFFALSE 5974
// begin SetTag ( i , 0 ) ;
5960: LD_VAR 0 1
5964: PPUSH
5965: LD_INT 0
5967: PPUSH
5968: CALL_OW 109
// continue ;
5972: GO 5527
// end ; ComBuild ( i , arBuildings [ 1 ] [ 1 ] , arBuildings [ 1 ] [ 2 ] , arBuildings [ 1 ] [ 3 ] , arBuildings [ 1 ] [ 4 ] ) ;
5974: LD_VAR 0 1
5978: PPUSH
5979: LD_EXP 53
5983: PUSH
5984: LD_INT 1
5986: ARRAY
5987: PUSH
5988: LD_INT 1
5990: ARRAY
5991: PPUSH
5992: LD_EXP 53
5996: PUSH
5997: LD_INT 1
5999: ARRAY
6000: PUSH
6001: LD_INT 2
6003: ARRAY
6004: PPUSH
6005: LD_EXP 53
6009: PUSH
6010: LD_INT 1
6012: ARRAY
6013: PUSH
6014: LD_INT 3
6016: ARRAY
6017: PPUSH
6018: LD_EXP 53
6022: PUSH
6023: LD_INT 1
6025: ARRAY
6026: PUSH
6027: LD_INT 4
6029: ARRAY
6030: PPUSH
6031: CALL_OW 145
// end ; if tag = tCrates then
6035: LD_VAR 0 8
6039: PUSH
6040: LD_INT 2
6042: EQUAL
6043: IFFALSE 6180
// begin if IsInUnit ( i ) then
6045: LD_VAR 0 1
6049: PPUSH
6050: CALL_OW 310
6054: IFFALSE 6067
// begin ComExitBuilding ( i ) ;
6056: LD_VAR 0 1
6060: PPUSH
6061: CALL_OW 122
// continue ;
6065: GO 5527
// end ; if not cr then
6067: LD_VAR 0 9
6071: NOT
6072: IFFALSE 6088
// begin SetTag ( i , 0 ) ;
6074: LD_VAR 0 1
6078: PPUSH
6079: LD_INT 0
6081: PPUSH
6082: CALL_OW 109
// continue ;
6086: GO 5527
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
6088: LD_VAR 0 1
6092: PPUSH
6093: CALL_OW 314
6097: NOT
6098: PUSH
6099: LD_INT 81
6101: PUSH
6102: LD_VAR 0 4
6106: PUSH
6107: EMPTY
6108: LIST
6109: LIST
6110: PUSH
6111: LD_INT 92
6113: PUSH
6114: LD_VAR 0 9
6118: PUSH
6119: LD_INT 1
6121: ARRAY
6122: PUSH
6123: LD_VAR 0 9
6127: PUSH
6128: LD_INT 2
6130: ARRAY
6131: PUSH
6132: LD_INT 12
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: PPUSH
6145: CALL_OW 69
6149: NOT
6150: AND
6151: IFFALSE 6180
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
6153: LD_VAR 0 1
6157: PPUSH
6158: LD_VAR 0 9
6162: PUSH
6163: LD_INT 1
6165: ARRAY
6166: PPUSH
6167: LD_VAR 0 9
6171: PUSH
6172: LD_INT 2
6174: ARRAY
6175: PPUSH
6176: CALL_OW 117
// end ; end ;
6180: GO 5527
6182: POP
6183: POP
// end ; sol := UnitFilter ( arForces , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6184: LD_ADDR_VAR 0 12
6188: PUSH
6189: LD_EXP 49
6193: PPUSH
6194: LD_INT 25
6196: PUSH
6197: LD_INT 1
6199: PUSH
6200: EMPTY
6201: LIST
6202: LIST
6203: PUSH
6204: LD_INT 50
6206: PUSH
6207: EMPTY
6208: LIST
6209: PUSH
6210: EMPTY
6211: LIST
6212: LIST
6213: PPUSH
6214: CALL_OW 72
6218: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( arBaseArea , [ f_enemy , side ] ) ;
6219: LD_ADDR_VAR 0 14
6223: PUSH
6224: LD_INT 5
6226: PPUSH
6227: LD_INT 81
6229: PUSH
6230: LD_VAR 0 4
6234: PUSH
6235: EMPTY
6236: LIST
6237: LIST
6238: PPUSH
6239: CALL_OW 70
6243: ST_TO_ADDR
// if sol then
6244: LD_VAR 0 12
6248: IFFALSE 7022
// begin tmp := UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ;
6250: LD_ADDR_VAR 0 5
6254: PUSH
6255: LD_VAR 0 12
6259: PPUSH
6260: LD_INT 50
6262: PUSH
6263: EMPTY
6264: LIST
6265: PUSH
6266: LD_INT 120
6268: PUSH
6269: LD_INT 6
6271: PUSH
6272: EMPTY
6273: LIST
6274: LIST
6275: PUSH
6276: EMPTY
6277: LIST
6278: LIST
6279: PPUSH
6280: CALL_OW 72
6284: ST_TO_ADDR
// if tmp and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , 76 , 38 , 12 ] ] ) then
6285: LD_VAR 0 5
6289: PUSH
6290: LD_INT 81
6292: PUSH
6293: LD_VAR 0 4
6297: PUSH
6298: EMPTY
6299: LIST
6300: LIST
6301: PUSH
6302: LD_INT 92
6304: PUSH
6305: LD_INT 76
6307: PUSH
6308: LD_INT 38
6310: PUSH
6311: LD_INT 12
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: LIST
6318: LIST
6319: PUSH
6320: EMPTY
6321: LIST
6322: LIST
6323: PPUSH
6324: CALL_OW 69
6328: NOT
6329: AND
6330: IFFALSE 6500
// for i := 1 to Count ( tmp ) do
6332: LD_ADDR_VAR 0 1
6336: PUSH
6337: DOUBLE
6338: LD_INT 1
6340: DEC
6341: ST_TO_ADDR
6342: LD_VAR 0 5
6346: PPUSH
6347: CALL 56538 0 1
6351: PUSH
6352: FOR_TO
6353: IFFALSE 6498
// begin un := tmp [ i ] ;
6355: LD_ADDR_VAR 0 2
6359: PUSH
6360: LD_VAR 0 5
6364: PUSH
6365: LD_VAR 0 1
6369: ARRAY
6370: ST_TO_ADDR
// b := IsInUnit ( un ) ;
6371: LD_ADDR_VAR 0 3
6375: PUSH
6376: LD_VAR 0 2
6380: PPUSH
6381: CALL_OW 310
6385: ST_TO_ADDR
// if not MineOfUnit ( un ) then
6386: LD_VAR 0 2
6390: PPUSH
6391: CALL_OW 459
6395: NOT
6396: IFFALSE 6465
// begin ComExitBuilding ( un ) ;
6398: LD_VAR 0 2
6402: PPUSH
6403: CALL_OW 122
// AddComPlaceRemoteCharge ( un , arMines [ i ] [ 1 ] , arMines [ i ] [ 2 ] , 0 ) ;
6407: LD_VAR 0 2
6411: PPUSH
6412: LD_EXP 54
6416: PUSH
6417: LD_VAR 0 1
6421: ARRAY
6422: PUSH
6423: LD_INT 1
6425: ARRAY
6426: PPUSH
6427: LD_EXP 54
6431: PUSH
6432: LD_VAR 0 1
6436: ARRAY
6437: PUSH
6438: LD_INT 2
6440: ARRAY
6441: PPUSH
6442: LD_INT 0
6444: PPUSH
6445: CALL_OW 193
// AddComEnterUnit ( un , b ) ;
6449: LD_VAR 0 2
6453: PPUSH
6454: LD_VAR 0 3
6458: PPUSH
6459: CALL_OW 180
// end else
6463: GO 6496
// if not b and not HasTask ( un ) then
6465: LD_VAR 0 3
6469: NOT
6470: PUSH
6471: LD_VAR 0 2
6475: PPUSH
6476: CALL_OW 314
6480: NOT
6481: AND
6482: IFFALSE 6496
// ComEnterUnit ( un , arBar1 ) ;
6484: LD_VAR 0 2
6488: PPUSH
6489: LD_INT 37
6491: PPUSH
6492: CALL_OW 120
// end ;
6496: GO 6352
6498: POP
6499: POP
// if enemyInBase then
6500: LD_VAR 0 14
6504: IFFALSE 6649
// begin for i in sol do
6506: LD_ADDR_VAR 0 1
6510: PUSH
6511: LD_VAR 0 12
6515: PUSH
6516: FOR_IN
6517: IFFALSE 6645
// begin tw := IsInUnit ( i ) ;
6519: LD_ADDR_VAR 0 10
6523: PUSH
6524: LD_VAR 0 1
6528: PPUSH
6529: CALL_OW 310
6533: ST_TO_ADDR
// if tw then
6534: LD_VAR 0 10
6538: IFFALSE 6619
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
6540: LD_VAR 0 10
6544: PUSH
6545: LD_INT 22
6547: PUSH
6548: LD_VAR 0 4
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: PUSH
6557: LD_INT 101
6559: PUSH
6560: LD_INT 2
6562: PUSH
6563: EMPTY
6564: LIST
6565: LIST
6566: PUSH
6567: LD_INT 2
6569: PUSH
6570: LD_INT 30
6572: PUSH
6573: LD_INT 32
6575: PUSH
6576: EMPTY
6577: LIST
6578: LIST
6579: PUSH
6580: LD_INT 30
6582: PUSH
6583: LD_INT 31
6585: PUSH
6586: EMPTY
6587: LIST
6588: LIST
6589: PUSH
6590: EMPTY
6591: LIST
6592: LIST
6593: LIST
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: LIST
6599: PPUSH
6600: CALL_OW 69
6604: IN
6605: NOT
6606: IFFALSE 6617
// ComExitBuilding ( i ) ;
6608: LD_VAR 0 1
6612: PPUSH
6613: CALL_OW 122
// end else
6617: GO 6643
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
6619: LD_VAR 0 1
6623: PPUSH
6624: LD_VAR 0 14
6628: PPUSH
6629: LD_VAR 0 1
6633: PPUSH
6634: CALL_OW 74
6638: PPUSH
6639: CALL_OW 115
// end ;
6643: GO 6516
6645: POP
6646: POP
// end else
6647: GO 7022
// begin empty := FilterUnitsInArea ( arBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
6649: LD_ADDR_VAR 0 15
6653: PUSH
6654: LD_INT 5
6656: PPUSH
6657: LD_INT 3
6659: PUSH
6660: LD_INT 62
6662: PUSH
6663: EMPTY
6664: LIST
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: PUSH
6670: LD_INT 2
6672: PUSH
6673: LD_INT 30
6675: PUSH
6676: LD_INT 32
6678: PUSH
6679: EMPTY
6680: LIST
6681: LIST
6682: PUSH
6683: LD_INT 30
6685: PUSH
6686: LD_INT 4
6688: PUSH
6689: EMPTY
6690: LIST
6691: LIST
6692: PUSH
6693: LD_INT 30
6695: PUSH
6696: LD_INT 5
6698: PUSH
6699: EMPTY
6700: LIST
6701: LIST
6702: PUSH
6703: LD_INT 30
6705: PUSH
6706: LD_INT 31
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: PUSH
6713: EMPTY
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PPUSH
6724: CALL_OW 70
6728: ST_TO_ADDR
// if empty then
6729: LD_VAR 0 15
6733: IFFALSE 6750
// empty := ReverseArray ( empty ) ;
6735: LD_ADDR_VAR 0 15
6739: PUSH
6740: LD_VAR 0 15
6744: PPUSH
6745: CALL 87414 0 1
6749: ST_TO_ADDR
// for i in sol do
6750: LD_ADDR_VAR 0 1
6754: PUSH
6755: LD_VAR 0 12
6759: PUSH
6760: FOR_IN
6761: IFFALSE 7020
// begin tag := GetTag ( i ) ;
6763: LD_ADDR_VAR 0 8
6767: PUSH
6768: LD_VAR 0 1
6772: PPUSH
6773: CALL_OW 110
6777: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
6778: LD_VAR 0 1
6782: PPUSH
6783: CALL_OW 256
6787: PUSH
6788: LD_INT 1000
6790: LESS
6791: PUSH
6792: LD_VAR 0 8
6796: PUSH
6797: LD_INT 1
6799: NONEQUAL
6800: AND
6801: IFFALSE 6841
// begin SetTag ( i , tHeal ) ;
6803: LD_VAR 0 1
6807: PPUSH
6808: LD_INT 1
6810: PPUSH
6811: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
6815: LD_VAR 0 1
6819: PPUSH
6820: LD_INT 72
6822: PPUSH
6823: LD_INT 15
6825: PPUSH
6826: CALL_OW 111
// AddComHold ( i ) ;
6830: LD_VAR 0 1
6834: PPUSH
6835: CALL_OW 200
// continue ;
6839: GO 6760
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
6841: LD_VAR 0 1
6845: PPUSH
6846: CALL_OW 256
6850: PUSH
6851: LD_INT 1000
6853: EQUAL
6854: PUSH
6855: LD_VAR 0 8
6859: PUSH
6860: LD_INT 1
6862: EQUAL
6863: AND
6864: IFFALSE 6945
// begin if MineOfUnit ( i ) or Count ( UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ) < 3 then
6866: LD_VAR 0 1
6870: PPUSH
6871: CALL_OW 459
6875: PUSH
6876: LD_VAR 0 12
6880: PPUSH
6881: LD_INT 50
6883: PUSH
6884: EMPTY
6885: LIST
6886: PUSH
6887: LD_INT 120
6889: PUSH
6890: LD_INT 6
6892: PUSH
6893: EMPTY
6894: LIST
6895: LIST
6896: PUSH
6897: EMPTY
6898: LIST
6899: LIST
6900: PPUSH
6901: CALL_OW 72
6905: PPUSH
6906: CALL 56538 0 1
6910: PUSH
6911: LD_INT 3
6913: LESS
6914: OR
6915: IFFALSE 6931
// SetTag ( i , tMine ) else
6917: LD_VAR 0 1
6921: PPUSH
6922: LD_INT 6
6924: PPUSH
6925: CALL_OW 109
6929: GO 6943
// SetTag ( i , 0 ) ;
6931: LD_VAR 0 1
6935: PPUSH
6936: LD_INT 0
6938: PPUSH
6939: CALL_OW 109
// continue ;
6943: GO 6760
// end ; if tag = tMine then
6945: LD_VAR 0 8
6949: PUSH
6950: LD_INT 6
6952: EQUAL
6953: IFFALSE 6957
// continue ;
6955: GO 6760
// if not IsInUnit ( i ) and not tag and empty then
6957: LD_VAR 0 1
6961: PPUSH
6962: CALL_OW 310
6966: NOT
6967: PUSH
6968: LD_VAR 0 8
6972: NOT
6973: AND
6974: PUSH
6975: LD_VAR 0 15
6979: AND
6980: IFFALSE 7018
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
6982: LD_VAR 0 1
6986: PPUSH
6987: LD_VAR 0 15
6991: PUSH
6992: LD_INT 1
6994: ARRAY
6995: PPUSH
6996: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
7000: LD_ADDR_VAR 0 15
7004: PUSH
7005: LD_VAR 0 15
7009: PPUSH
7010: LD_INT 1
7012: PPUSH
7013: CALL_OW 3
7017: ST_TO_ADDR
// end ; end ;
7018: GO 6760
7020: POP
7021: POP
// end ; end ; end ;
7022: PPOPN 16
7024: END
// every 0 0$1 trigger Count ( arEscapist ) do var i ;
7025: LD_EXP 56
7029: PPUSH
7030: CALL 56538 0 1
7034: IFFALSE 7179
7036: GO 7038
7038: DISABLE
7039: LD_INT 0
7041: PPUSH
// begin enable ;
7042: ENABLE
// for i in UnitFilter ( arEscapist , [ f_ok ] ) do
7043: LD_ADDR_VAR 0 1
7047: PUSH
7048: LD_EXP 56
7052: PPUSH
7053: LD_INT 50
7055: PUSH
7056: EMPTY
7057: LIST
7058: PPUSH
7059: CALL_OW 72
7063: PUSH
7064: FOR_IN
7065: IFFALSE 7177
// begin if not HasTask ( i ) then
7067: LD_VAR 0 1
7071: PPUSH
7072: CALL_OW 314
7076: NOT
7077: IFFALSE 7091
// ComMoveToArea ( i , khatamArea ) ;
7079: LD_VAR 0 1
7083: PPUSH
7084: LD_INT 11
7086: PPUSH
7087: CALL_OW 113
// if IsInArea ( i , khatamArea ) then
7091: LD_VAR 0 1
7095: PPUSH
7096: LD_INT 11
7098: PPUSH
7099: CALL_OW 308
7103: IFFALSE 7175
// begin RemoveUnit ( i ) ;
7105: LD_VAR 0 1
7109: PPUSH
7110: CALL_OW 64
// arEscapist := arEscapist diff i ;
7114: LD_ADDR_EXP 56
7118: PUSH
7119: LD_EXP 56
7123: PUSH
7124: LD_VAR 0 1
7128: DIFF
7129: ST_TO_ADDR
// arabianEscapedCounter := Inc ( arabianEscapedCounter ) ;
7130: LD_ADDR_EXP 21
7134: PUSH
7135: LD_EXP 21
7139: PPUSH
7140: CALL 93499 0 1
7144: ST_TO_ADDR
// if i = Dietrich then
7145: LD_VAR 0 1
7149: PUSH
7150: LD_EXP 50
7154: EQUAL
7155: IFFALSE 7175
// begin gensherEscaped := true ;
7157: LD_ADDR_EXP 13
7161: PUSH
7162: LD_INT 1
7164: ST_TO_ADDR
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
7165: LD_INT 1
7167: PPUSH
7168: LD_STRING 10_GensherEscape_1
7170: PPUSH
7171: CALL_OW 39
// end ; end ; end ;
7175: GO 7064
7177: POP
7178: POP
// end ;
7179: PPOPN 1
7181: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ; var i , skill , un , veh ; begin
7182: LD_INT 0
7184: PPUSH
7185: PPUSH
7186: PPUSH
7187: PPUSH
7188: PPUSH
// uc_side := 5 ;
7189: LD_ADDR_OWVAR 20
7193: PUSH
7194: LD_INT 5
7196: ST_TO_ADDR
// uc_nation := nation_arabian ;
7197: LD_ADDR_OWVAR 21
7201: PUSH
7202: LD_INT 2
7204: ST_TO_ADDR
// skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
7205: LD_ADDR_VAR 0 3
7209: PUSH
7210: LD_INT 5
7212: PUSH
7213: LD_INT 6
7215: PUSH
7216: LD_INT 7
7218: PUSH
7219: LD_INT 8
7221: PUSH
7222: EMPTY
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: PUSH
7228: LD_OWVAR 67
7232: ARRAY
7233: ST_TO_ADDR
// arAttackersInf := [ ] ;
7234: LD_ADDR_EXP 57
7238: PUSH
7239: EMPTY
7240: ST_TO_ADDR
// arAttackersVeh := [ ] ;
7241: LD_ADDR_EXP 58
7245: PUSH
7246: EMPTY
7247: ST_TO_ADDR
// InitHC_All ( ) ;
7248: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
7252: LD_ADDR_VAR 0 2
7256: PUSH
7257: DOUBLE
7258: LD_INT 1
7260: DEC
7261: ST_TO_ADDR
7262: LD_INT 3
7264: PUSH
7265: LD_INT 4
7267: PUSH
7268: LD_INT 5
7270: PUSH
7271: LD_INT 6
7273: PUSH
7274: EMPTY
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: PUSH
7280: LD_OWVAR 67
7284: ARRAY
7285: PUSH
7286: FOR_TO
7287: IFFALSE 7389
// begin PrepareSoldier ( false , skill ) ;
7289: LD_INT 0
7291: PPUSH
7292: LD_VAR 0 3
7296: PPUSH
7297: CALL_OW 381
// un := CreateHuman ;
7301: LD_ADDR_VAR 0 4
7305: PUSH
7306: CALL_OW 44
7310: ST_TO_ADDR
// if i mod 2 = 0 then
7311: LD_VAR 0 2
7315: PUSH
7316: LD_INT 2
7318: MOD
7319: PUSH
7320: LD_INT 0
7322: EQUAL
7323: IFFALSE 7337
// SetClass ( un , class_mortar ) ;
7325: LD_VAR 0 4
7329: PPUSH
7330: LD_INT 8
7332: PPUSH
7333: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
7337: LD_VAR 0 4
7341: PPUSH
7342: LD_INT 19
7344: PPUSH
7345: LD_INT 0
7347: PPUSH
7348: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
7352: LD_ADDR_EXP 57
7356: PUSH
7357: LD_EXP 57
7361: PPUSH
7362: LD_VAR 0 4
7366: PPUSH
7367: CALL 92138 0 2
7371: ST_TO_ADDR
// ComAgressiveMove ( un , 104 , 60 ) ;
7372: LD_VAR 0 4
7376: PPUSH
7377: LD_INT 104
7379: PPUSH
7380: LD_INT 60
7382: PPUSH
7383: CALL_OW 114
// end ;
7387: GO 7286
7389: POP
7390: POP
// for i := 1 to 3 do
7391: LD_ADDR_VAR 0 2
7395: PUSH
7396: DOUBLE
7397: LD_INT 1
7399: DEC
7400: ST_TO_ADDR
7401: LD_INT 3
7403: PUSH
7404: FOR_TO
7405: IFFALSE 7557
// begin PrepareMechanic ( false , skill ) ;
7407: LD_INT 0
7409: PPUSH
7410: LD_VAR 0 3
7414: PPUSH
7415: CALL_OW 383
// un := CreateHuman ;
7419: LD_ADDR_VAR 0 4
7423: PUSH
7424: CALL_OW 44
7428: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
7429: LD_INT 14
7431: PPUSH
7432: LD_INT 1
7434: PPUSH
7435: LD_INT 1
7437: PPUSH
7438: LD_INT 27
7440: PUSH
7441: LD_INT 25
7443: PUSH
7444: EMPTY
7445: LIST
7446: LIST
7447: PUSH
7448: LD_VAR 0 2
7452: PUSH
7453: LD_INT 2
7455: MOD
7456: PUSH
7457: LD_INT 1
7459: PLUS
7460: ARRAY
7461: PPUSH
7462: LD_INT 80
7464: PPUSH
7465: CALL 59276 0 5
// veh := CreateVehicle ;
7469: LD_ADDR_VAR 0 5
7473: PUSH
7474: CALL_OW 45
7478: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7479: LD_VAR 0 5
7483: PPUSH
7484: LD_INT 4
7486: PPUSH
7487: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7491: LD_VAR 0 5
7495: PPUSH
7496: LD_INT 18
7498: PPUSH
7499: LD_INT 0
7501: PPUSH
7502: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7506: LD_VAR 0 4
7510: PPUSH
7511: LD_VAR 0 5
7515: PPUSH
7516: CALL_OW 52
// ComMoveXY ( un , 129 , 20 ) ;
7520: LD_VAR 0 4
7524: PPUSH
7525: LD_INT 129
7527: PPUSH
7528: LD_INT 20
7530: PPUSH
7531: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , un ) ;
7535: LD_ADDR_EXP 58
7539: PUSH
7540: LD_EXP 58
7544: PPUSH
7545: LD_VAR 0 4
7549: PPUSH
7550: CALL 92138 0 2
7554: ST_TO_ADDR
// end ;
7555: GO 7404
7557: POP
7558: POP
// wait ( 0 0$2 ) ;
7559: LD_INT 70
7561: PPUSH
7562: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
7566: LD_ADDR_VAR 0 2
7570: PUSH
7571: DOUBLE
7572: LD_INT 1
7574: DEC
7575: ST_TO_ADDR
7576: LD_INT 1
7578: PUSH
7579: LD_INT 2
7581: PUSH
7582: LD_INT 2
7584: PUSH
7585: LD_INT 3
7587: PUSH
7588: EMPTY
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: PUSH
7594: LD_OWVAR 67
7598: ARRAY
7599: PUSH
7600: FOR_TO
7601: IFFALSE 7732
// begin PrepareMechanic ( false , skill ) ;
7603: LD_INT 0
7605: PPUSH
7606: LD_VAR 0 3
7610: PPUSH
7611: CALL_OW 383
// un := CreateHuman ;
7615: LD_ADDR_VAR 0 4
7619: PUSH
7620: CALL_OW 44
7624: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
7625: LD_INT 14
7627: PPUSH
7628: LD_INT 1
7630: PPUSH
7631: LD_INT 1
7633: PPUSH
7634: LD_INT 26
7636: PPUSH
7637: LD_INT 80
7639: PPUSH
7640: CALL 59276 0 5
// veh := CreateVehicle ;
7644: LD_ADDR_VAR 0 5
7648: PUSH
7649: CALL_OW 45
7653: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7654: LD_VAR 0 5
7658: PPUSH
7659: LD_INT 4
7661: PPUSH
7662: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7666: LD_VAR 0 5
7670: PPUSH
7671: LD_INT 18
7673: PPUSH
7674: LD_INT 0
7676: PPUSH
7677: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7681: LD_VAR 0 4
7685: PPUSH
7686: LD_VAR 0 5
7690: PPUSH
7691: CALL_OW 52
// ComMoveXY ( un , 133 , 40 ) ;
7695: LD_VAR 0 4
7699: PPUSH
7700: LD_INT 133
7702: PPUSH
7703: LD_INT 40
7705: PPUSH
7706: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , un ) ;
7710: LD_ADDR_EXP 58
7714: PUSH
7715: LD_EXP 58
7719: PPUSH
7720: LD_VAR 0 4
7724: PPUSH
7725: CALL 92138 0 2
7729: ST_TO_ADDR
// end ;
7730: GO 7600
7732: POP
7733: POP
// wait ( 0 0$2 ) ;
7734: LD_INT 70
7736: PPUSH
7737: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
7741: LD_ADDR_VAR 0 2
7745: PUSH
7746: DOUBLE
7747: LD_INT 1
7749: DEC
7750: ST_TO_ADDR
7751: LD_INT 1
7753: PUSH
7754: LD_INT 2
7756: PUSH
7757: LD_INT 3
7759: PUSH
7760: LD_INT 4
7762: PUSH
7763: EMPTY
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: PUSH
7769: LD_OWVAR 67
7773: ARRAY
7774: PUSH
7775: FOR_TO
7776: IFFALSE 7938
// begin PrepareMechanic ( false , skill ) ;
7778: LD_INT 0
7780: PPUSH
7781: LD_VAR 0 3
7785: PPUSH
7786: CALL_OW 383
// un := CreateHuman ;
7790: LD_ADDR_VAR 0 4
7794: PUSH
7795: CALL_OW 44
7799: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
7800: LD_INT 14
7802: PPUSH
7803: LD_INT 1
7805: PPUSH
7806: LD_INT 1
7808: PPUSH
7809: LD_INT 28
7811: PPUSH
7812: LD_INT 80
7814: PPUSH
7815: CALL 59276 0 5
// veh := CreateVehicle ;
7819: LD_ADDR_VAR 0 5
7823: PUSH
7824: CALL_OW 45
7828: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7829: LD_VAR 0 5
7833: PPUSH
7834: LD_INT 4
7836: PPUSH
7837: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7841: LD_VAR 0 5
7845: PPUSH
7846: LD_INT 18
7848: PPUSH
7849: LD_INT 0
7851: PPUSH
7852: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7856: LD_VAR 0 4
7860: PPUSH
7861: LD_VAR 0 5
7865: PPUSH
7866: CALL_OW 52
// if i mod 2 = 0 then
7870: LD_VAR 0 2
7874: PUSH
7875: LD_INT 2
7877: MOD
7878: PUSH
7879: LD_INT 0
7881: EQUAL
7882: IFFALSE 7901
// ComMoveXY ( un , 136 , 61 ) else
7884: LD_VAR 0 4
7888: PPUSH
7889: LD_INT 136
7891: PPUSH
7892: LD_INT 61
7894: PPUSH
7895: CALL_OW 111
7899: GO 7916
// ComMoveXY ( un , 137 , 41 ) ;
7901: LD_VAR 0 4
7905: PPUSH
7906: LD_INT 137
7908: PPUSH
7909: LD_INT 41
7911: PPUSH
7912: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , un ) ;
7916: LD_ADDR_EXP 58
7920: PUSH
7921: LD_EXP 58
7925: PPUSH
7926: LD_VAR 0 4
7930: PPUSH
7931: CALL 92138 0 2
7935: ST_TO_ADDR
// end ;
7936: GO 7775
7938: POP
7939: POP
// arabianAttackSpawned := true ;
7940: LD_ADDR_EXP 12
7944: PUSH
7945: LD_INT 1
7947: ST_TO_ADDR
// end ;
7948: LD_VAR 0 1
7952: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest ;
7953: LD_EXP 57
7957: IFFALSE 8370
7959: GO 7961
7961: DISABLE
7962: LD_INT 0
7964: PPUSH
7965: PPUSH
7966: PPUSH
// begin wait ( 0 0$10 ) ;
7967: LD_INT 350
7969: PPUSH
7970: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
7974: LD_ADDR_VAR 0 2
7978: PUSH
7979: LD_EXP 57
7983: PPUSH
7984: LD_INT 25
7986: PUSH
7987: LD_INT 1
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: PUSH
7994: LD_INT 50
7996: PUSH
7997: EMPTY
7998: LIST
7999: PUSH
8000: EMPTY
8001: LIST
8002: LIST
8003: PPUSH
8004: CALL_OW 72
8008: ST_TO_ADDR
// for i in tmp do
8009: LD_ADDR_VAR 0 1
8013: PUSH
8014: LD_VAR 0 2
8018: PUSH
8019: FOR_IN
8020: IFFALSE 8145
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
8022: LD_ADDR_VAR 0 3
8026: PUSH
8027: LD_INT 22
8029: PUSH
8030: LD_INT 1
8032: PUSH
8033: EMPTY
8034: LIST
8035: LIST
8036: PUSH
8037: LD_INT 3
8039: PUSH
8040: LD_INT 120
8042: PUSH
8043: LD_INT 11
8045: PUSH
8046: EMPTY
8047: LIST
8048: LIST
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: LD_INT 2
8056: PUSH
8057: LD_INT 21
8059: PUSH
8060: LD_INT 2
8062: PUSH
8063: EMPTY
8064: LIST
8065: LIST
8066: PUSH
8067: LD_INT 21
8069: PUSH
8070: LD_INT 3
8072: PUSH
8073: EMPTY
8074: LIST
8075: LIST
8076: PUSH
8077: EMPTY
8078: LIST
8079: LIST
8080: LIST
8081: PUSH
8082: EMPTY
8083: LIST
8084: LIST
8085: LIST
8086: PPUSH
8087: CALL_OW 69
8091: PPUSH
8092: LD_VAR 0 1
8096: PPUSH
8097: CALL_OW 74
8101: ST_TO_ADDR
// if not nearest then
8102: LD_VAR 0 3
8106: NOT
8107: IFFALSE 8111
// break ;
8109: GO 8145
// SetTag ( nearest , tMined ) ;
8111: LD_VAR 0 3
8115: PPUSH
8116: LD_INT 11
8118: PPUSH
8119: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
8123: LD_VAR 0 1
8127: PPUSH
8128: LD_INT 0
8130: PPUSH
8131: LD_INT 0
8133: PPUSH
8134: LD_VAR 0 3
8138: PPUSH
8139: CALL_OW 132
// end ;
8143: GO 8019
8145: POP
8146: POP
// if hasBase and epsilon then
8147: LD_EXP 9
8151: PUSH
8152: LD_EXP 10
8156: AND
8157: IFFALSE 8181
// AddComPlaceDelayedCharge ( tmp , 0 , 0 , epsilon ) else
8159: LD_VAR 0 2
8163: PPUSH
8164: LD_INT 0
8166: PPUSH
8167: LD_INT 0
8169: PPUSH
8170: LD_EXP 10
8174: PPUSH
8175: CALL_OW 192
8179: GO 8196
// AddComMoveXY ( tmp , 107 , 59 ) ;
8181: LD_VAR 0 2
8185: PPUSH
8186: LD_INT 107
8188: PPUSH
8189: LD_INT 59
8191: PPUSH
8192: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8196: LD_INT 35
8198: PPUSH
8199: CALL_OW 67
// until IsDead ( Dietrich ) or gensherEscaped ;
8203: LD_EXP 50
8207: PPUSH
8208: CALL_OW 301
8212: PUSH
8213: LD_EXP 13
8217: OR
8218: IFFALSE 8196
// if not gensherEscaped then
8220: LD_EXP 13
8224: NOT
8225: IFFALSE 8234
// wait ( 1 1$20 ) ;
8227: LD_INT 2800
8229: PPUSH
8230: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
8234: LD_ADDR_VAR 0 2
8238: PUSH
8239: LD_EXP 57
8243: PPUSH
8244: LD_INT 50
8246: PUSH
8247: EMPTY
8248: LIST
8249: PPUSH
8250: CALL_OW 72
8254: ST_TO_ADDR
// ComMoveXY ( tmp , 143 , 117 ) ;
8255: LD_VAR 0 2
8259: PPUSH
8260: LD_INT 143
8262: PPUSH
8263: LD_INT 117
8265: PPUSH
8266: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8270: LD_INT 35
8272: PPUSH
8273: CALL_OW 67
// for i in tmp do
8277: LD_ADDR_VAR 0 1
8281: PUSH
8282: LD_VAR 0 2
8286: PUSH
8287: FOR_IN
8288: IFFALSE 8361
// if IsInArea ( i , arAttackSpawn2Area ) then
8290: LD_VAR 0 1
8294: PPUSH
8295: LD_INT 19
8297: PPUSH
8298: CALL_OW 308
8302: IFFALSE 8347
// begin tmp := tmp diff i ;
8304: LD_ADDR_VAR 0 2
8308: PUSH
8309: LD_VAR 0 2
8313: PUSH
8314: LD_VAR 0 1
8318: DIFF
8319: ST_TO_ADDR
// arAttackersInf := arAttackersInf diff i ;
8320: LD_ADDR_EXP 57
8324: PUSH
8325: LD_EXP 57
8329: PUSH
8330: LD_VAR 0 1
8334: DIFF
8335: ST_TO_ADDR
// RemoveUnit ( i ) ;
8336: LD_VAR 0 1
8340: PPUSH
8341: CALL_OW 64
// end else
8345: GO 8359
// ComMoveToArea ( i , arAttackSpawn2Area ) ;
8347: LD_VAR 0 1
8351: PPUSH
8352: LD_INT 19
8354: PPUSH
8355: CALL_OW 113
8359: GO 8287
8361: POP
8362: POP
// until not tmp ;
8363: LD_VAR 0 2
8367: NOT
8368: IFFALSE 8270
// end ;
8370: PPOPN 3
8372: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp ;
8373: LD_EXP 58
8377: IFFALSE 8616
8379: GO 8381
8381: DISABLE
8382: LD_INT 0
8384: PPUSH
8385: PPUSH
// begin repeat wait ( 0 0$1 ) ;
8386: LD_INT 35
8388: PPUSH
8389: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8393: LD_ADDR_VAR 0 2
8397: PUSH
8398: LD_EXP 58
8402: PPUSH
8403: LD_INT 50
8405: PUSH
8406: EMPTY
8407: LIST
8408: PPUSH
8409: CALL_OW 72
8413: ST_TO_ADDR
// for i in tmp do
8414: LD_ADDR_VAR 0 1
8418: PUSH
8419: LD_VAR 0 2
8423: PUSH
8424: FOR_IN
8425: IFFALSE 8451
// AgressiveMove ( i , [ [ 110 , 40 ] ] ) ;
8427: LD_VAR 0 1
8431: PPUSH
8432: LD_INT 110
8434: PUSH
8435: LD_INT 40
8437: PUSH
8438: EMPTY
8439: LIST
8440: LIST
8441: PUSH
8442: EMPTY
8443: LIST
8444: PPUSH
8445: CALL 94742 0 2
8449: GO 8424
8451: POP
8452: POP
// until not arAttackersVeh or gensherEscaped or IsDead ( Dietrich ) ;
8453: LD_EXP 58
8457: NOT
8458: PUSH
8459: LD_EXP 13
8463: OR
8464: PUSH
8465: LD_EXP 50
8469: PPUSH
8470: CALL_OW 301
8474: OR
8475: IFFALSE 8386
// if not arAttackersVeh then
8477: LD_EXP 58
8481: NOT
8482: IFFALSE 8486
// exit ;
8484: GO 8616
// repeat wait ( 0 0$1 ) ;
8486: LD_INT 35
8488: PPUSH
8489: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8493: LD_ADDR_VAR 0 2
8497: PUSH
8498: LD_EXP 58
8502: PPUSH
8503: LD_INT 50
8505: PUSH
8506: EMPTY
8507: LIST
8508: PPUSH
8509: CALL_OW 72
8513: ST_TO_ADDR
// for i in tmp do
8514: LD_ADDR_VAR 0 1
8518: PUSH
8519: LD_VAR 0 2
8523: PUSH
8524: FOR_IN
8525: IFFALSE 8607
// if IsInArea ( i , arAttackSpawnArea ) then
8527: LD_VAR 0 1
8531: PPUSH
8532: LD_INT 18
8534: PPUSH
8535: CALL_OW 308
8539: IFFALSE 8593
// begin if IsInUnit ( i ) then
8541: LD_VAR 0 1
8545: PPUSH
8546: CALL_OW 310
8550: IFFALSE 8566
// RemoveUnit ( IsInUnit ( i ) ) ;
8552: LD_VAR 0 1
8556: PPUSH
8557: CALL_OW 310
8561: PPUSH
8562: CALL_OW 64
// RemoveUnit ( i ) ;
8566: LD_VAR 0 1
8570: PPUSH
8571: CALL_OW 64
// arAttackersVeh := arAttackersVeh diff i ;
8575: LD_ADDR_EXP 58
8579: PUSH
8580: LD_EXP 58
8584: PUSH
8585: LD_VAR 0 1
8589: DIFF
8590: ST_TO_ADDR
// end else
8591: GO 8605
// ComMoveToArea ( i , arAttackSpawnArea ) ;
8593: LD_VAR 0 1
8597: PPUSH
8598: LD_INT 18
8600: PPUSH
8601: CALL_OW 113
8605: GO 8524
8607: POP
8608: POP
// until not tmp ;
8609: LD_VAR 0 2
8613: NOT
8614: IFFALSE 8486
// end ; end_of_file
8616: PPOPN 2
8618: END
// export ruForces , ruForces2 , ruCommander , ruCommander2 , ruMech , ruMech2 ; export ruTech , ruBaseArea , ruBaseArea2 , ruBase , ruBase2 , ruConstructList , ruConstructList2 , ruCratesArea , ruCratesArea2 , ruHealPoint , ruHealPoint2 , ruBuildings , ruBuildings2 , ruTransportDestroyed , ruTanks , ruTanks2 , ruExtraTanks , ruParkingArea , ruParkingArea2 , ruCratesSpawnArea , ruCratesSpawnArea2 ; export function PrepareRussian ; var i , j , un , skill , sources ; begin
8619: LD_INT 0
8621: PPUSH
8622: PPUSH
8623: PPUSH
8624: PPUSH
8625: PPUSH
8626: PPUSH
// uc_side := 3 ;
8627: LD_ADDR_OWVAR 20
8631: PUSH
8632: LD_INT 3
8634: ST_TO_ADDR
// uc_nation := nation_russian ;
8635: LD_ADDR_OWVAR 21
8639: PUSH
8640: LD_INT 3
8642: ST_TO_ADDR
// ruForces := [ ] ;
8643: LD_ADDR_EXP 59
8647: PUSH
8648: EMPTY
8649: ST_TO_ADDR
// ruForces2 := [ ] ;
8650: LD_ADDR_EXP 60
8654: PUSH
8655: EMPTY
8656: ST_TO_ADDR
// ruMech := [ ] ;
8657: LD_ADDR_EXP 63
8661: PUSH
8662: EMPTY
8663: ST_TO_ADDR
// ruMech2 := [ ] ;
8664: LD_ADDR_EXP 64
8668: PUSH
8669: EMPTY
8670: ST_TO_ADDR
// ruTech := [ tech_LimTeleport , tech_ST1 , tech_Weap2 , tech_Sib1 ] ;
8671: LD_ADDR_EXP 65
8675: PUSH
8676: LD_INT 37
8678: PUSH
8679: LD_INT 63
8681: PUSH
8682: LD_INT 52
8684: PUSH
8685: LD_INT 54
8687: PUSH
8688: EMPTY
8689: LIST
8690: LIST
8691: LIST
8692: LIST
8693: ST_TO_ADDR
// ruBaseArea := 0 ;
8694: LD_ADDR_EXP 66
8698: PUSH
8699: LD_INT 0
8701: ST_TO_ADDR
// ruBaseArea2 := 0 ;
8702: LD_ADDR_EXP 67
8706: PUSH
8707: LD_INT 0
8709: ST_TO_ADDR
// ruBase := 0 ;
8710: LD_ADDR_EXP 68
8714: PUSH
8715: LD_INT 0
8717: ST_TO_ADDR
// ruBase2 := 0 ;
8718: LD_ADDR_EXP 69
8722: PUSH
8723: LD_INT 0
8725: ST_TO_ADDR
// ruConstructList := [ ] ;
8726: LD_ADDR_EXP 70
8730: PUSH
8731: EMPTY
8732: ST_TO_ADDR
// ruConstructList2 := [ [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ] ;
8733: LD_ADDR_EXP 71
8737: PUSH
8738: LD_INT 22
8740: PUSH
8741: LD_INT 3
8743: PUSH
8744: LD_INT 1
8746: PUSH
8747: LD_INT 43
8749: PUSH
8750: LD_INT 44
8752: PUSH
8753: LD_INT 45
8755: PUSH
8756: EMPTY
8757: LIST
8758: LIST
8759: LIST
8760: PUSH
8761: LD_INT 1
8763: PPUSH
8764: LD_INT 3
8766: PPUSH
8767: CALL_OW 12
8771: ARRAY
8772: PUSH
8773: EMPTY
8774: LIST
8775: LIST
8776: LIST
8777: LIST
8778: PUSH
8779: LD_INT 22
8781: PUSH
8782: LD_INT 3
8784: PUSH
8785: LD_INT 1
8787: PUSH
8788: LD_INT 43
8790: PUSH
8791: LD_INT 44
8793: PUSH
8794: LD_INT 45
8796: PUSH
8797: EMPTY
8798: LIST
8799: LIST
8800: LIST
8801: PUSH
8802: LD_INT 1
8804: PPUSH
8805: LD_INT 3
8807: PPUSH
8808: CALL_OW 12
8812: ARRAY
8813: PUSH
8814: EMPTY
8815: LIST
8816: LIST
8817: LIST
8818: LIST
8819: PUSH
8820: LD_INT 22
8822: PUSH
8823: LD_INT 3
8825: PUSH
8826: LD_INT 1
8828: PUSH
8829: LD_INT 43
8831: PUSH
8832: LD_INT 44
8834: PUSH
8835: LD_INT 45
8837: PUSH
8838: EMPTY
8839: LIST
8840: LIST
8841: LIST
8842: PUSH
8843: LD_INT 1
8845: PPUSH
8846: LD_INT 3
8848: PPUSH
8849: CALL_OW 12
8853: ARRAY
8854: PUSH
8855: EMPTY
8856: LIST
8857: LIST
8858: LIST
8859: LIST
8860: PUSH
8861: EMPTY
8862: LIST
8863: LIST
8864: LIST
8865: ST_TO_ADDR
// ruCratesArea := 0 ;
8866: LD_ADDR_EXP 72
8870: PUSH
8871: LD_INT 0
8873: ST_TO_ADDR
// ruCratesArea2 := 0 ;
8874: LD_ADDR_EXP 73
8878: PUSH
8879: LD_INT 0
8881: ST_TO_ADDR
// ruHealPoint := [ ] ;
8882: LD_ADDR_EXP 74
8886: PUSH
8887: EMPTY
8888: ST_TO_ADDR
// ruHealPoint2 := [ ] ;
8889: LD_ADDR_EXP 75
8893: PUSH
8894: EMPTY
8895: ST_TO_ADDR
// ruBuildings := [ ] ;
8896: LD_ADDR_EXP 76
8900: PUSH
8901: EMPTY
8902: ST_TO_ADDR
// ruBuildings2 := [ ] ;
8903: LD_ADDR_EXP 77
8907: PUSH
8908: EMPTY
8909: ST_TO_ADDR
// ruTanks := [ ] ;
8910: LD_ADDR_EXP 79
8914: PUSH
8915: EMPTY
8916: ST_TO_ADDR
// ruTanks2 := [ ] ;
8917: LD_ADDR_EXP 80
8921: PUSH
8922: EMPTY
8923: ST_TO_ADDR
// ruParkingArea := 0 ;
8924: LD_ADDR_EXP 82
8928: PUSH
8929: LD_INT 0
8931: ST_TO_ADDR
// ruParkingArea2 := 0 ;
8932: LD_ADDR_EXP 83
8936: PUSH
8937: LD_INT 0
8939: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
8940: LD_ADDR_VAR 0 2
8944: PUSH
8945: DOUBLE
8946: LD_INT 1
8948: DEC
8949: ST_TO_ADDR
8950: LD_INT 2
8952: PUSH
8953: LD_INT 3
8955: PUSH
8956: LD_INT 4
8958: PUSH
8959: LD_INT 4
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: LIST
8966: LIST
8967: PUSH
8968: LD_OWVAR 67
8972: ARRAY
8973: PUSH
8974: FOR_TO
8975: IFFALSE 9035
// ruConstructList := Join ( ruConstructList , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
8977: LD_ADDR_EXP 70
8981: PUSH
8982: LD_EXP 70
8986: PPUSH
8987: LD_INT 22
8989: PUSH
8990: LD_INT 3
8992: PUSH
8993: LD_INT 1
8995: PUSH
8996: LD_INT 43
8998: PUSH
8999: LD_INT 44
9001: PUSH
9002: LD_INT 45
9004: PUSH
9005: EMPTY
9006: LIST
9007: LIST
9008: LIST
9009: PUSH
9010: LD_INT 1
9012: PPUSH
9013: LD_INT 3
9015: PPUSH
9016: CALL_OW 12
9020: ARRAY
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: PPUSH
9028: CALL 92138 0 2
9032: ST_TO_ADDR
9033: GO 8974
9035: POP
9036: POP
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
9037: LD_ADDR_VAR 0 6
9041: PUSH
9042: LD_INT 43
9044: PUSH
9045: LD_INT 68
9047: PUSH
9048: EMPTY
9049: LIST
9050: LIST
9051: PUSH
9052: LD_INT 43
9054: PUSH
9055: LD_INT 79
9057: PUSH
9058: EMPTY
9059: LIST
9060: LIST
9061: PUSH
9062: LD_INT 99
9064: PUSH
9065: LD_INT 114
9067: PUSH
9068: EMPTY
9069: LIST
9070: LIST
9071: PUSH
9072: LD_INT 103
9074: PUSH
9075: LD_INT 114
9077: PUSH
9078: EMPTY
9079: LIST
9080: LIST
9081: PUSH
9082: LD_INT 156
9084: PUSH
9085: LD_INT 92
9087: PUSH
9088: EMPTY
9089: LIST
9090: LIST
9091: PUSH
9092: LD_INT 152
9094: PUSH
9095: LD_INT 85
9097: PUSH
9098: EMPTY
9099: LIST
9100: LIST
9101: PUSH
9102: EMPTY
9103: LIST
9104: LIST
9105: LIST
9106: LIST
9107: LIST
9108: LIST
9109: ST_TO_ADDR
// for i in sources do
9110: LD_ADDR_VAR 0 2
9114: PUSH
9115: LD_VAR 0 6
9119: PUSH
9120: FOR_IN
9121: IFFALSE 9150
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
9123: LD_VAR 0 2
9127: PUSH
9128: LD_INT 1
9130: ARRAY
9131: PPUSH
9132: LD_VAR 0 2
9136: PUSH
9137: LD_INT 2
9139: ARRAY
9140: PPUSH
9141: LD_INT 3
9143: PPUSH
9144: CALL_OW 441
9148: GO 9120
9150: POP
9151: POP
// if Difficulty > 2 then
9152: LD_OWVAR 67
9156: PUSH
9157: LD_INT 2
9159: GREATER
9160: IFFALSE 9188
// begin SetTech ( tech_weap2 , 6 , state_researched ) ;
9162: LD_INT 52
9164: PPUSH
9165: LD_INT 6
9167: PPUSH
9168: LD_INT 2
9170: PPUSH
9171: CALL_OW 322
// SetTech ( tech_comp2 , 6 , state_researched ) ;
9175: LD_INT 58
9177: PPUSH
9178: LD_INT 6
9180: PPUSH
9181: LD_INT 2
9183: PPUSH
9184: CALL_OW 322
// end ; skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
9188: LD_ADDR_VAR 0 5
9192: PUSH
9193: LD_INT 5
9195: PUSH
9196: LD_INT 6
9198: PUSH
9199: LD_INT 7
9201: PUSH
9202: LD_INT 8
9204: PUSH
9205: EMPTY
9206: LIST
9207: LIST
9208: LIST
9209: LIST
9210: PUSH
9211: LD_OWVAR 67
9215: ARRAY
9216: ST_TO_ADDR
// ruCommander := PrepareUnit ( Tsaritsyn , false ,  ) ;
9217: LD_ADDR_EXP 61
9221: PUSH
9222: LD_STRING Tsaritsyn
9224: PPUSH
9225: LD_INT 0
9227: PPUSH
9228: LD_STRING 
9230: PPUSH
9231: CALL 54436 0 3
9235: ST_TO_ADDR
// for i := 1 to 4 do
9236: LD_ADDR_VAR 0 2
9240: PUSH
9241: DOUBLE
9242: LD_INT 1
9244: DEC
9245: ST_TO_ADDR
9246: LD_INT 4
9248: PUSH
9249: FOR_TO
9250: IFFALSE 9468
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9252: LD_ADDR_VAR 0 3
9256: PUSH
9257: DOUBLE
9258: LD_INT 1
9260: DEC
9261: ST_TO_ADDR
9262: LD_INT 5
9264: PUSH
9265: LD_INT 6
9267: PUSH
9268: LD_INT 8
9270: PUSH
9271: LD_INT 9
9273: PUSH
9274: EMPTY
9275: LIST
9276: LIST
9277: LIST
9278: LIST
9279: PUSH
9280: LD_OWVAR 67
9284: ARRAY
9285: PUSH
9286: LD_INT 3
9288: PUSH
9289: LD_INT 4
9291: PUSH
9292: LD_INT 5
9294: PUSH
9295: LD_INT 6
9297: PUSH
9298: EMPTY
9299: LIST
9300: LIST
9301: LIST
9302: LIST
9303: PUSH
9304: LD_OWVAR 67
9308: ARRAY
9309: PUSH
9310: LD_INT 3
9312: PUSH
9313: LD_INT 4
9315: PUSH
9316: LD_INT 5
9318: PUSH
9319: LD_INT 6
9321: PUSH
9322: EMPTY
9323: LIST
9324: LIST
9325: LIST
9326: LIST
9327: PUSH
9328: LD_OWVAR 67
9332: ARRAY
9333: PUSH
9334: LD_INT 2
9336: PUSH
9337: LD_INT 3
9339: PUSH
9340: LD_INT 3
9342: PUSH
9343: LD_INT 3
9345: PUSH
9346: EMPTY
9347: LIST
9348: LIST
9349: LIST
9350: LIST
9351: PUSH
9352: LD_OWVAR 67
9356: ARRAY
9357: PUSH
9358: EMPTY
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: PUSH
9364: LD_VAR 0 2
9368: ARRAY
9369: PUSH
9370: FOR_TO
9371: IFFALSE 9464
// begin PrepareHuman ( false , i , skill ) ;
9373: LD_INT 0
9375: PPUSH
9376: LD_VAR 0 2
9380: PPUSH
9381: LD_VAR 0 5
9385: PPUSH
9386: CALL_OW 380
// un := CreateHuman ;
9390: LD_ADDR_VAR 0 4
9394: PUSH
9395: CALL_OW 44
9399: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
9400: LD_ADDR_EXP 59
9404: PUSH
9405: LD_EXP 59
9409: PPUSH
9410: LD_VAR 0 4
9414: PPUSH
9415: CALL 92138 0 2
9419: ST_TO_ADDR
// if i = 3 then
9420: LD_VAR 0 2
9424: PUSH
9425: LD_INT 3
9427: EQUAL
9428: IFFALSE 9462
// begin ruMech := Join ( ruMech , un ) ;
9430: LD_ADDR_EXP 63
9434: PUSH
9435: LD_EXP 63
9439: PPUSH
9440: LD_VAR 0 4
9444: PPUSH
9445: CALL 92138 0 2
9449: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9450: LD_VAR 0 4
9454: PPUSH
9455: LD_INT 1
9457: PPUSH
9458: CALL_OW 336
// end ; end ;
9462: GO 9370
9464: POP
9465: POP
9466: GO 9249
9468: POP
9469: POP
// if Difficulty < 4 then
9470: LD_OWVAR 67
9474: PUSH
9475: LD_INT 4
9477: LESS
9478: IFFALSE 9482
// exit ;
9480: GO 9754
// PrepareSoldier ( sex_male , skill + 1 ) ;
9482: LD_INT 1
9484: PPUSH
9485: LD_VAR 0 5
9489: PUSH
9490: LD_INT 1
9492: PLUS
9493: PPUSH
9494: CALL_OW 381
// hc_importance := 100 ;
9498: LD_ADDR_OWVAR 32
9502: PUSH
9503: LD_INT 100
9505: ST_TO_ADDR
// ruCommander2 := CreateHuman ;
9506: LD_ADDR_EXP 62
9510: PUSH
9511: CALL_OW 44
9515: ST_TO_ADDR
// InitHc_All ( ) ;
9516: CALL_OW 584
// for i := 1 to 4 do
9520: LD_ADDR_VAR 0 2
9524: PUSH
9525: DOUBLE
9526: LD_INT 1
9528: DEC
9529: ST_TO_ADDR
9530: LD_INT 4
9532: PUSH
9533: FOR_TO
9534: IFFALSE 9752
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9536: LD_ADDR_VAR 0 3
9540: PUSH
9541: DOUBLE
9542: LD_INT 1
9544: DEC
9545: ST_TO_ADDR
9546: LD_INT 5
9548: PUSH
9549: LD_INT 6
9551: PUSH
9552: LD_INT 8
9554: PUSH
9555: LD_INT 9
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: PUSH
9564: LD_OWVAR 67
9568: ARRAY
9569: PUSH
9570: LD_INT 3
9572: PUSH
9573: LD_INT 4
9575: PUSH
9576: LD_INT 5
9578: PUSH
9579: LD_INT 6
9581: PUSH
9582: EMPTY
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: PUSH
9588: LD_OWVAR 67
9592: ARRAY
9593: PUSH
9594: LD_INT 3
9596: PUSH
9597: LD_INT 4
9599: PUSH
9600: LD_INT 5
9602: PUSH
9603: LD_INT 6
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: PUSH
9612: LD_OWVAR 67
9616: ARRAY
9617: PUSH
9618: LD_INT 2
9620: PUSH
9621: LD_INT 3
9623: PUSH
9624: LD_INT 3
9626: PUSH
9627: LD_INT 3
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: PUSH
9636: LD_OWVAR 67
9640: ARRAY
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: PUSH
9648: LD_VAR 0 2
9652: ARRAY
9653: PUSH
9654: FOR_TO
9655: IFFALSE 9748
// begin PrepareHuman ( false , i , skill ) ;
9657: LD_INT 0
9659: PPUSH
9660: LD_VAR 0 2
9664: PPUSH
9665: LD_VAR 0 5
9669: PPUSH
9670: CALL_OW 380
// un := CreateHuman ;
9674: LD_ADDR_VAR 0 4
9678: PUSH
9679: CALL_OW 44
9683: ST_TO_ADDR
// ruForces2 := Join ( ruForces2 , un ) ;
9684: LD_ADDR_EXP 60
9688: PUSH
9689: LD_EXP 60
9693: PPUSH
9694: LD_VAR 0 4
9698: PPUSH
9699: CALL 92138 0 2
9703: ST_TO_ADDR
// if i = 3 then
9704: LD_VAR 0 2
9708: PUSH
9709: LD_INT 3
9711: EQUAL
9712: IFFALSE 9746
// begin ruMech2 := Join ( ruMech2 , un ) ;
9714: LD_ADDR_EXP 64
9718: PUSH
9719: LD_EXP 64
9723: PPUSH
9724: LD_VAR 0 4
9728: PPUSH
9729: CALL 92138 0 2
9733: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9734: LD_VAR 0 4
9738: PPUSH
9739: LD_INT 1
9741: PPUSH
9742: CALL_OW 336
// end ; end ;
9746: GO 9654
9748: POP
9749: POP
9750: GO 9533
9752: POP
9753: POP
// end ;
9754: LD_VAR 0 1
9758: RET
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings ) < 3 do var i ;
9759: LD_EXP 66
9763: PPUSH
9764: LD_INT 30
9766: PUSH
9767: LD_INT 3
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: PUSH
9774: LD_INT 50
9776: PUSH
9777: EMPTY
9778: LIST
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: PPUSH
9784: CALL_OW 70
9788: PUSH
9789: LD_EXP 76
9793: PPUSH
9794: CALL 56538 0 1
9798: PUSH
9799: LD_INT 3
9801: LESS
9802: AND
9803: IFFALSE 10067
9805: GO 9807
9807: DISABLE
9808: LD_INT 0
9810: PPUSH
// begin enable ;
9811: ENABLE
// ruConstructList := ruConstructList ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
9812: LD_ADDR_EXP 70
9816: PUSH
9817: LD_EXP 70
9821: PUSH
9822: LD_INT 22
9824: PUSH
9825: LD_INT 22
9827: PUSH
9828: LD_INT 24
9830: PUSH
9831: LD_INT 24
9833: PUSH
9834: EMPTY
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: PUSH
9840: LD_OWVAR 67
9844: ARRAY
9845: PUSH
9846: LD_INT 1
9848: PUSH
9849: LD_INT 3
9851: PUSH
9852: LD_INT 44
9854: PUSH
9855: LD_INT 45
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PUSH
9862: LD_INT 1
9864: PPUSH
9865: LD_INT 2
9867: PPUSH
9868: CALL_OW 12
9872: ARRAY
9873: PUSH
9874: EMPTY
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: PUSH
9880: LD_INT 22
9882: PUSH
9883: LD_INT 22
9885: PUSH
9886: LD_INT 24
9888: PUSH
9889: LD_INT 24
9891: PUSH
9892: EMPTY
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: PUSH
9898: LD_OWVAR 67
9902: ARRAY
9903: PUSH
9904: LD_INT 1
9906: PUSH
9907: LD_INT 3
9909: PUSH
9910: LD_INT 45
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: PUSH
9919: LD_INT 22
9921: PUSH
9922: LD_INT 22
9924: PUSH
9925: LD_INT 24
9927: PUSH
9928: LD_INT 24
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: PUSH
9937: LD_OWVAR 67
9941: ARRAY
9942: PUSH
9943: LD_INT 1
9945: PUSH
9946: LD_INT 3
9948: PUSH
9949: LD_INT 45
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: PUSH
9958: EMPTY
9959: LIST
9960: LIST
9961: LIST
9962: ADD
9963: ST_TO_ADDR
// for i := Difficulty downto 1 do
9964: LD_ADDR_VAR 0 1
9968: PUSH
9969: DOUBLE
9970: LD_OWVAR 67
9974: INC
9975: ST_TO_ADDR
9976: LD_INT 1
9978: PUSH
9979: FOR_DOWNTO
9980: IFFALSE 10065
// ruConstructList := Join ( ruConstructList , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 4 ) ] ] ) ;
9982: LD_ADDR_EXP 70
9986: PUSH
9987: LD_EXP 70
9991: PPUSH
9992: LD_INT 22
9994: PUSH
9995: LD_INT 22
9997: PUSH
9998: LD_INT 24
10000: PUSH
10001: LD_INT 24
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: PUSH
10010: LD_OWVAR 67
10014: ARRAY
10015: PUSH
10016: LD_INT 1
10018: PUSH
10019: LD_INT 3
10021: PUSH
10022: LD_INT 44
10024: PUSH
10025: LD_INT 45
10027: PUSH
10028: LD_INT 45
10030: PUSH
10031: LD_INT 43
10033: PUSH
10034: EMPTY
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: PUSH
10040: LD_INT 1
10042: PPUSH
10043: LD_INT 4
10045: PPUSH
10046: CALL_OW 12
10050: ARRAY
10051: PUSH
10052: EMPTY
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: PPUSH
10058: CALL 92138 0 2
10062: ST_TO_ADDR
10063: GO 9979
10065: POP
10066: POP
// end ;
10067: PPOPN 1
10069: END
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea2 , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings2 ) < 3 do
10070: LD_EXP 67
10074: PPUSH
10075: LD_INT 30
10077: PUSH
10078: LD_INT 3
10080: PUSH
10081: EMPTY
10082: LIST
10083: LIST
10084: PUSH
10085: LD_INT 50
10087: PUSH
10088: EMPTY
10089: LIST
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: PPUSH
10095: CALL_OW 70
10099: PUSH
10100: LD_EXP 77
10104: PPUSH
10105: CALL 56538 0 1
10109: PUSH
10110: LD_INT 3
10112: LESS
10113: AND
10114: IFFALSE 10309
10116: GO 10118
10118: DISABLE
// begin enable ;
10119: ENABLE
// ruConstructList2 := ruConstructList2 ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] ] ;
10120: LD_ADDR_EXP 71
10124: PUSH
10125: LD_EXP 71
10129: PUSH
10130: LD_INT 22
10132: PUSH
10133: LD_INT 22
10135: PUSH
10136: LD_INT 24
10138: PUSH
10139: LD_INT 24
10141: PUSH
10142: EMPTY
10143: LIST
10144: LIST
10145: LIST
10146: LIST
10147: PUSH
10148: LD_INT 1
10150: PPUSH
10151: LD_INT 4
10153: PPUSH
10154: CALL_OW 12
10158: ARRAY
10159: PUSH
10160: LD_INT 1
10162: PUSH
10163: LD_INT 3
10165: PUSH
10166: LD_INT 44
10168: PUSH
10169: LD_INT 45
10171: PUSH
10172: EMPTY
10173: LIST
10174: LIST
10175: PUSH
10176: LD_INT 1
10178: PPUSH
10179: LD_INT 2
10181: PPUSH
10182: CALL_OW 12
10186: ARRAY
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: LIST
10192: LIST
10193: PUSH
10194: LD_INT 22
10196: PUSH
10197: LD_INT 22
10199: PUSH
10200: LD_INT 24
10202: PUSH
10203: LD_INT 24
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: PUSH
10212: LD_INT 1
10214: PPUSH
10215: LD_INT 4
10217: PPUSH
10218: CALL_OW 12
10222: ARRAY
10223: PUSH
10224: LD_INT 1
10226: PUSH
10227: LD_INT 3
10229: PUSH
10230: LD_INT 45
10232: PUSH
10233: EMPTY
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: PUSH
10239: LD_INT 22
10241: PUSH
10242: LD_INT 22
10244: PUSH
10245: LD_INT 24
10247: PUSH
10248: LD_INT 24
10250: PUSH
10251: EMPTY
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 1
10259: PPUSH
10260: LD_INT 4
10262: PPUSH
10263: CALL_OW 12
10267: ARRAY
10268: PUSH
10269: LD_INT 1
10271: PUSH
10272: LD_INT 3
10274: PUSH
10275: LD_INT 45
10277: PUSH
10278: EMPTY
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: PUSH
10284: LD_INT 22
10286: PUSH
10287: LD_INT 1
10289: PUSH
10290: LD_INT 3
10292: PUSH
10293: LD_INT 43
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: PUSH
10302: EMPTY
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: ADD
10308: ST_TO_ADDR
// end ;
10309: END
// export function SpawnConvoy ; var i , tmp , spawn , area , path , place , point ; begin
10310: LD_INT 0
10312: PPUSH
10313: PPUSH
10314: PPUSH
10315: PPUSH
10316: PPUSH
10317: PPUSH
10318: PPUSH
10319: PPUSH
// case Difficulty of 1 :
10320: LD_OWVAR 67
10324: PUSH
10325: LD_INT 1
10327: DOUBLE
10328: EQUAL
10329: IFTRUE 10333
10331: GO 10352
10333: POP
// spawn := rand ( 1 , 2 ) ; 2 :
10334: LD_ADDR_VAR 0 4
10338: PUSH
10339: LD_INT 1
10341: PPUSH
10342: LD_INT 2
10344: PPUSH
10345: CALL_OW 12
10349: ST_TO_ADDR
10350: GO 10426
10352: LD_INT 2
10354: DOUBLE
10355: EQUAL
10356: IFTRUE 10360
10358: GO 10379
10360: POP
// spawn := rand ( 1 , 3 ) ; 3 :
10361: LD_ADDR_VAR 0 4
10365: PUSH
10366: LD_INT 1
10368: PPUSH
10369: LD_INT 3
10371: PPUSH
10372: CALL_OW 12
10376: ST_TO_ADDR
10377: GO 10426
10379: LD_INT 3
10381: DOUBLE
10382: EQUAL
10383: IFTRUE 10387
10385: GO 10406
10387: POP
// spawn := rand ( 2 , 3 ) ; 4 :
10388: LD_ADDR_VAR 0 4
10392: PUSH
10393: LD_INT 2
10395: PPUSH
10396: LD_INT 3
10398: PPUSH
10399: CALL_OW 12
10403: ST_TO_ADDR
10404: GO 10426
10406: LD_INT 4
10408: DOUBLE
10409: EQUAL
10410: IFTRUE 10414
10412: GO 10425
10414: POP
// spawn := 3 ; end ;
10415: LD_ADDR_VAR 0 4
10419: PUSH
10420: LD_INT 3
10422: ST_TO_ADDR
10423: GO 10426
10425: POP
// path := [ centerPathArea , westPathArea , eastPathArea ] [ spawn ] ;
10426: LD_ADDR_VAR 0 6
10430: PUSH
10431: LD_INT 24
10433: PUSH
10434: LD_INT 25
10436: PUSH
10437: LD_INT 23
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: LIST
10444: PUSH
10445: LD_VAR 0 4
10449: ARRAY
10450: ST_TO_ADDR
// area := [ ruSpawnCenterArea , ruSpawnWestArea , ruSpawnEastArea ] [ spawn ] ;
10451: LD_ADDR_VAR 0 5
10455: PUSH
10456: LD_INT 21
10458: PUSH
10459: LD_INT 22
10461: PUSH
10462: LD_INT 20
10464: PUSH
10465: EMPTY
10466: LIST
10467: LIST
10468: LIST
10469: PUSH
10470: LD_VAR 0 4
10474: ARRAY
10475: ST_TO_ADDR
// point := [ [ 96 , 102 ] , [ 54 , 85 ] , [ 146 , 67 ] ] [ spawn ] ;
10476: LD_ADDR_VAR 0 8
10480: PUSH
10481: LD_INT 96
10483: PUSH
10484: LD_INT 102
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: PUSH
10491: LD_INT 54
10493: PUSH
10494: LD_INT 85
10496: PUSH
10497: EMPTY
10498: LIST
10499: LIST
10500: PUSH
10501: LD_INT 146
10503: PUSH
10504: LD_INT 67
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: LIST
10515: PUSH
10516: LD_VAR 0 4
10520: ARRAY
10521: ST_TO_ADDR
// for i in ruForces union ruCommander do
10522: LD_ADDR_VAR 0 2
10526: PUSH
10527: LD_EXP 59
10531: PUSH
10532: LD_EXP 61
10536: UNION
10537: PUSH
10538: FOR_IN
10539: IFFALSE 10594
// begin PlaceUnitArea ( i , area , false ) ;
10541: LD_VAR 0 2
10545: PPUSH
10546: LD_VAR 0 5
10550: PPUSH
10551: LD_INT 0
10553: PPUSH
10554: CALL_OW 49
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
10558: LD_VAR 0 2
10562: PPUSH
10563: LD_VAR 0 8
10567: PUSH
10568: LD_INT 1
10570: ARRAY
10571: PPUSH
10572: LD_VAR 0 8
10576: PUSH
10577: LD_INT 2
10579: ARRAY
10580: PPUSH
10581: CALL_OW 111
// wait ( 0 0$0.4 ) ;
10585: LD_INT 14
10587: PPUSH
10588: CALL_OW 67
// end ;
10592: GO 10538
10594: POP
10595: POP
// DRussianConvoy ;
10596: CALL 28621 0 0
// spawnedRussians := true ;
10600: LD_ADDR_EXP 19
10604: PUSH
10605: LD_INT 1
10607: ST_TO_ADDR
// RevealFogArea ( 1 , path ) ;
10608: LD_INT 1
10610: PPUSH
10611: LD_VAR 0 6
10615: PPUSH
10616: CALL_OW 332
// case spawn of 1 :
10620: LD_VAR 0 4
10624: PUSH
10625: LD_INT 1
10627: DOUBLE
10628: EQUAL
10629: IFTRUE 10633
10631: GO 10643
10633: POP
// RaiseSailEvent ( ERussianBaseC ) ; 2 :
10634: LD_INT 102
10636: PPUSH
10637: CALL_OW 427
10641: GO 10680
10643: LD_INT 2
10645: DOUBLE
10646: EQUAL
10647: IFTRUE 10651
10649: GO 10661
10651: POP
// RaiseSailEvent ( ERussianBaseW ) ; 3 :
10652: LD_INT 103
10654: PPUSH
10655: CALL_OW 427
10659: GO 10680
10661: LD_INT 3
10663: DOUBLE
10664: EQUAL
10665: IFTRUE 10669
10667: GO 10679
10669: POP
// RaiseSailEvent ( ERussianBaseE ) ; end ;
10670: LD_INT 104
10672: PPUSH
10673: CALL_OW 427
10677: GO 10680
10679: POP
// if Difficulty < 4 then
10680: LD_OWVAR 67
10684: PUSH
10685: LD_INT 4
10687: LESS
10688: IFFALSE 10692
// exit ;
10690: GO 10769
// RevealFogArea ( 1 , ruSpawnWestArea ) ;
10692: LD_INT 1
10694: PPUSH
10695: LD_INT 22
10697: PPUSH
10698: CALL_OW 332
// for i in ruForces2 union ruCommander2 do
10702: LD_ADDR_VAR 0 2
10706: PUSH
10707: LD_EXP 60
10711: PUSH
10712: LD_EXP 62
10716: UNION
10717: PUSH
10718: FOR_IN
10719: IFFALSE 10760
// begin PlaceUnitArea ( i , ruSpawnWestArea , false ) ;
10721: LD_VAR 0 2
10725: PPUSH
10726: LD_INT 22
10728: PPUSH
10729: LD_INT 0
10731: PPUSH
10732: CALL_OW 49
// ComAgressiveMove ( i , 54 , 85 ) ;
10736: LD_VAR 0 2
10740: PPUSH
10741: LD_INT 54
10743: PPUSH
10744: LD_INT 85
10746: PPUSH
10747: CALL_OW 114
// wait ( 0 0$0.8 ) ;
10751: LD_INT 28
10753: PPUSH
10754: CALL_OW 67
// end ;
10758: GO 10718
10760: POP
10761: POP
// RaiseSailEvent ( ERussianBaseW2 ) ;
10762: LD_INT 105
10764: PPUSH
10765: CALL_OW 427
// end ;
10769: LD_VAR 0 1
10773: RET
// export function RussianBase ( group , option ) ; begin
10774: LD_INT 0
10776: PPUSH
// case option of 1 :
10777: LD_VAR 0 2
10781: PUSH
10782: LD_INT 1
10784: DOUBLE
10785: EQUAL
10786: IFTRUE 10790
10788: GO 11246
10790: POP
// begin ruBaseArea := ruBaseCenterArea ;
10791: LD_ADDR_EXP 66
10795: PUSH
10796: LD_INT 26
10798: ST_TO_ADDR
// ruCratesArea := ruBaseCenterArea ;
10799: LD_ADDR_EXP 72
10803: PUSH
10804: LD_INT 26
10806: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
10807: LD_ADDR_EXP 76
10811: PUSH
10812: LD_INT 0
10814: PUSH
10815: LD_INT 104
10817: PUSH
10818: LD_INT 110
10820: PUSH
10821: LD_INT 5
10823: PUSH
10824: EMPTY
10825: LIST
10826: LIST
10827: LIST
10828: LIST
10829: PUSH
10830: LD_INT 4
10832: PUSH
10833: LD_INT 98
10835: PUSH
10836: LD_INT 90
10838: PUSH
10839: LD_INT 3
10841: PUSH
10842: EMPTY
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: PUSH
10848: LD_INT 29
10850: PUSH
10851: LD_INT 103
10853: PUSH
10854: LD_INT 114
10856: PUSH
10857: LD_INT 2
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: PUSH
10866: LD_INT 30
10868: PUSH
10869: LD_INT 99
10871: PUSH
10872: LD_INT 114
10874: PUSH
10875: LD_INT 3
10877: PUSH
10878: EMPTY
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: PUSH
10884: LD_INT 28
10886: PUSH
10887: LD_INT 100
10889: PUSH
10890: LD_INT 112
10892: PUSH
10893: LD_INT 1
10895: PUSH
10896: EMPTY
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: PUSH
10902: LD_INT 2
10904: PUSH
10905: LD_INT 92
10907: PUSH
10908: LD_INT 101
10910: PUSH
10911: LD_INT 0
10913: PUSH
10914: EMPTY
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: PUSH
10920: LD_INT 26
10922: PUSH
10923: LD_INT 97
10925: PUSH
10926: LD_INT 116
10928: PUSH
10929: LD_INT 5
10931: PUSH
10932: EMPTY
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: PUSH
10938: LD_INT 17
10940: PUSH
10941: LD_INT 96
10943: PUSH
10944: LD_INT 101
10946: PUSH
10947: LD_INT 4
10949: PUSH
10950: EMPTY
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: PUSH
10956: LD_INT 18
10958: PUSH
10959: LD_INT 88
10961: PUSH
10962: LD_INT 97
10964: PUSH
10965: LD_INT 2
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 26
10976: PUSH
10977: LD_INT 106
10979: PUSH
10980: LD_INT 92
10982: PUSH
10983: LD_INT 2
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: PUSH
10992: LD_INT 6
10994: PUSH
10995: LD_INT 93
10997: PUSH
10998: LD_INT 110
11000: PUSH
11001: LD_INT 0
11003: PUSH
11004: EMPTY
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: PUSH
11010: LD_INT 21
11012: PUSH
11013: LD_INT 89
11015: PUSH
11016: LD_INT 101
11018: PUSH
11019: LD_INT 1
11021: PUSH
11022: EMPTY
11023: LIST
11024: LIST
11025: LIST
11026: LIST
11027: PUSH
11028: LD_INT 16
11030: PUSH
11031: LD_INT 95
11033: PUSH
11034: LD_INT 104
11036: PUSH
11037: LD_INT 4
11039: PUSH
11040: EMPTY
11041: LIST
11042: LIST
11043: LIST
11044: LIST
11045: PUSH
11046: LD_INT 24
11048: PUSH
11049: LD_INT 92
11051: PUSH
11052: LD_INT 105
11054: PUSH
11055: LD_INT 0
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 33
11066: PUSH
11067: LD_INT 88
11069: PUSH
11070: LD_INT 89
11072: PUSH
11073: LD_INT 2
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: PUSH
11082: LD_INT 33
11084: PUSH
11085: LD_INT 86
11087: PUSH
11088: LD_INT 90
11090: PUSH
11091: LD_INT 2
11093: PUSH
11094: EMPTY
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: PUSH
11100: LD_INT 33
11102: PUSH
11103: LD_INT 85
11105: PUSH
11106: LD_INT 99
11108: PUSH
11109: LD_INT 2
11111: PUSH
11112: EMPTY
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: PUSH
11118: LD_INT 33
11120: PUSH
11121: LD_INT 85
11123: PUSH
11124: LD_INT 107
11126: PUSH
11127: LD_INT 1
11129: PUSH
11130: EMPTY
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: PUSH
11136: LD_INT 33
11138: PUSH
11139: LD_INT 105
11141: PUSH
11142: LD_INT 99
11144: PUSH
11145: LD_INT 1
11147: PUSH
11148: EMPTY
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: PUSH
11154: LD_INT 33
11156: PUSH
11157: LD_INT 102
11159: PUSH
11160: LD_INT 92
11162: PUSH
11163: LD_INT 3
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: PUSH
11172: LD_INT 33
11174: PUSH
11175: LD_INT 105
11177: PUSH
11178: LD_INT 92
11180: PUSH
11181: LD_INT 2
11183: PUSH
11184: EMPTY
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: ST_TO_ADDR
// ruHealPoint := [ 98 , 107 ] ;
11213: LD_ADDR_EXP 74
11217: PUSH
11218: LD_INT 98
11220: PUSH
11221: LD_INT 107
11223: PUSH
11224: EMPTY
11225: LIST
11226: LIST
11227: ST_TO_ADDR
// ruParkingArea := ruParkingCenterArea ;
11228: LD_ADDR_EXP 82
11232: PUSH
11233: LD_INT 30
11235: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnCenterArea ;
11236: LD_ADDR_EXP 84
11240: PUSH
11241: LD_INT 36
11243: ST_TO_ADDR
// end ; 2 :
11244: GO 12270
11246: LD_INT 2
11248: DOUBLE
11249: EQUAL
11250: IFTRUE 11254
11252: GO 11748
11254: POP
// begin ruBaseArea := ruBaseWestArea ;
11255: LD_ADDR_EXP 66
11259: PUSH
11260: LD_INT 28
11262: ST_TO_ADDR
// ruCratesArea := ruBaseWestArea ;
11263: LD_ADDR_EXP 72
11267: PUSH
11268: LD_INT 28
11270: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
11271: LD_ADDR_EXP 76
11275: PUSH
11276: LD_INT 0
11278: PUSH
11279: LD_INT 49
11281: PUSH
11282: LD_INT 74
11284: PUSH
11285: LD_INT 3
11287: PUSH
11288: EMPTY
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: PUSH
11294: LD_INT 4
11296: PUSH
11297: LD_INT 73
11299: PUSH
11300: LD_INT 88
11302: PUSH
11303: LD_INT 5
11305: PUSH
11306: EMPTY
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: PUSH
11312: LD_INT 4
11314: PUSH
11315: LD_INT 56
11317: PUSH
11318: LD_INT 62
11320: PUSH
11321: LD_INT 3
11323: PUSH
11324: EMPTY
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: PUSH
11330: LD_INT 29
11332: PUSH
11333: LD_INT 43
11335: PUSH
11336: LD_INT 68
11338: PUSH
11339: LD_INT 2
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: PUSH
11348: LD_INT 30
11350: PUSH
11351: LD_INT 43
11353: PUSH
11354: LD_INT 79
11356: PUSH
11357: LD_INT 5
11359: PUSH
11360: EMPTY
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: PUSH
11366: LD_INT 28
11368: PUSH
11369: LD_INT 60
11371: PUSH
11372: LD_INT 75
11374: PUSH
11375: LD_INT 1
11377: PUSH
11378: EMPTY
11379: LIST
11380: LIST
11381: LIST
11382: LIST
11383: PUSH
11384: LD_INT 2
11386: PUSH
11387: LD_INT 50
11389: PUSH
11390: LD_INT 87
11392: PUSH
11393: LD_INT 1
11395: PUSH
11396: EMPTY
11397: LIST
11398: LIST
11399: LIST
11400: LIST
11401: PUSH
11402: LD_INT 26
11404: PUSH
11405: LD_INT 45
11407: PUSH
11408: LD_INT 67
11410: PUSH
11411: LD_INT 2
11413: PUSH
11414: EMPTY
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: PUSH
11420: LD_INT 17
11422: PUSH
11423: LD_INT 47
11425: PUSH
11426: LD_INT 84
11428: PUSH
11429: LD_INT 2
11431: PUSH
11432: EMPTY
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: PUSH
11438: LD_INT 18
11440: PUSH
11441: LD_INT 46
11443: PUSH
11444: LD_INT 87
11446: PUSH
11447: LD_INT 1
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: PUSH
11456: LD_INT 26
11458: PUSH
11459: LD_INT 41
11461: PUSH
11462: LD_INT 64
11464: PUSH
11465: LD_INT 5
11467: PUSH
11468: EMPTY
11469: LIST
11470: LIST
11471: LIST
11472: LIST
11473: PUSH
11474: LD_INT 6
11476: PUSH
11477: LD_INT 42
11479: PUSH
11480: LD_INT 74
11482: PUSH
11483: LD_INT 1
11485: PUSH
11486: EMPTY
11487: LIST
11488: LIST
11489: LIST
11490: LIST
11491: PUSH
11492: LD_INT 21
11494: PUSH
11495: LD_INT 54
11497: PUSH
11498: LD_INT 91
11500: PUSH
11501: LD_INT 5
11503: PUSH
11504: EMPTY
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: PUSH
11510: LD_INT 16
11512: PUSH
11513: LD_INT 50
11515: PUSH
11516: LD_INT 83
11518: PUSH
11519: LD_INT 3
11521: PUSH
11522: EMPTY
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: PUSH
11528: LD_INT 24
11530: PUSH
11531: LD_INT 50
11533: PUSH
11534: LD_INT 90
11536: PUSH
11537: LD_INT 0
11539: PUSH
11540: EMPTY
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: PUSH
11546: LD_INT 33
11548: PUSH
11549: LD_INT 51
11551: PUSH
11552: LD_INT 61
11554: PUSH
11555: LD_INT 3
11557: PUSH
11558: EMPTY
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: PUSH
11564: LD_INT 33
11566: PUSH
11567: LD_INT 42
11569: PUSH
11570: LD_INT 60
11572: PUSH
11573: LD_INT 3
11575: PUSH
11576: EMPTY
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: PUSH
11582: LD_INT 33
11584: PUSH
11585: LD_INT 36
11587: PUSH
11588: LD_INT 58
11590: PUSH
11591: LD_INT 3
11593: PUSH
11594: EMPTY
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: PUSH
11600: LD_INT 33
11602: PUSH
11603: LD_INT 39
11605: PUSH
11606: LD_INT 59
11608: PUSH
11609: LD_INT 3
11611: PUSH
11612: EMPTY
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: PUSH
11618: LD_INT 33
11620: PUSH
11621: LD_INT 61
11623: PUSH
11624: LD_INT 64
11626: PUSH
11627: LD_INT 3
11629: PUSH
11630: EMPTY
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: PUSH
11636: LD_INT 33
11638: PUSH
11639: LD_INT 63
11641: PUSH
11642: LD_INT 90
11644: PUSH
11645: LD_INT 5
11647: PUSH
11648: EMPTY
11649: LIST
11650: LIST
11651: LIST
11652: LIST
11653: PUSH
11654: LD_INT 33
11656: PUSH
11657: LD_INT 64
11659: PUSH
11660: LD_INT 88
11662: PUSH
11663: LD_INT 5
11665: PUSH
11666: EMPTY
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: PUSH
11672: LD_INT 33
11674: PUSH
11675: LD_INT 72
11677: PUSH
11678: LD_INT 82
11680: PUSH
11681: LD_INT 5
11683: PUSH
11684: EMPTY
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
11715: LD_ADDR_EXP 74
11719: PUSH
11720: LD_INT 45
11722: PUSH
11723: LD_INT 75
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: ST_TO_ADDR
// ruParkingArea := ruParkingWestArea ;
11730: LD_ADDR_EXP 82
11734: PUSH
11735: LD_INT 31
11737: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnWestArea ;
11738: LD_ADDR_EXP 84
11742: PUSH
11743: LD_INT 37
11745: ST_TO_ADDR
// end ; 3 :
11746: GO 12270
11748: LD_INT 3
11750: DOUBLE
11751: EQUAL
11752: IFTRUE 11756
11754: GO 12269
11756: POP
// begin ruBaseArea := ruBaseEastArea ;
11757: LD_ADDR_EXP 66
11761: PUSH
11762: LD_INT 27
11764: ST_TO_ADDR
// ruCratesArea := ruBaseEastArea ;
11765: LD_ADDR_EXP 72
11769: PUSH
11770: LD_INT 27
11772: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] , [ b_turret , 158 , 65 , 3 ] , [ b_turret , 144 , 53 , 2 ] , [ b_turret , 150 , 81 , 1 ] ] ;
11773: LD_ADDR_EXP 76
11777: PUSH
11778: LD_INT 0
11780: PUSH
11781: LD_INT 152
11783: PUSH
11784: LD_INT 72
11786: PUSH
11787: LD_INT 4
11789: PUSH
11790: EMPTY
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: PUSH
11796: LD_INT 4
11798: PUSH
11799: LD_INT 139
11801: PUSH
11802: LD_INT 69
11804: PUSH
11805: LD_INT 1
11807: PUSH
11808: EMPTY
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: PUSH
11814: LD_INT 4
11816: PUSH
11817: LD_INT 142
11819: PUSH
11820: LD_INT 56
11822: PUSH
11823: LD_INT 2
11825: PUSH
11826: EMPTY
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: PUSH
11832: LD_INT 29
11834: PUSH
11835: LD_INT 152
11837: PUSH
11838: LD_INT 85
11840: PUSH
11841: LD_INT 3
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: PUSH
11850: LD_INT 30
11852: PUSH
11853: LD_INT 156
11855: PUSH
11856: LD_INT 92
11858: PUSH
11859: LD_INT 3
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: PUSH
11868: LD_INT 28
11870: PUSH
11871: LD_INT 157
11873: PUSH
11874: LD_INT 96
11876: PUSH
11877: LD_INT 4
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: PUSH
11886: LD_INT 2
11888: PUSH
11889: LD_INT 161
11891: PUSH
11892: LD_INT 74
11894: PUSH
11895: LD_INT 5
11897: PUSH
11898: EMPTY
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: PUSH
11904: LD_INT 21
11906: PUSH
11907: LD_INT 157
11909: PUSH
11910: LD_INT 74
11912: PUSH
11913: LD_INT 1
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: PUSH
11922: LD_INT 16
11924: PUSH
11925: LD_INT 161
11927: PUSH
11928: LD_INT 77
11930: PUSH
11931: LD_INT 0
11933: PUSH
11934: EMPTY
11935: LIST
11936: LIST
11937: LIST
11938: LIST
11939: PUSH
11940: LD_INT 24
11942: PUSH
11943: LD_INT 165
11945: PUSH
11946: LD_INT 78
11948: PUSH
11949: LD_INT 5
11951: PUSH
11952: EMPTY
11953: LIST
11954: LIST
11955: LIST
11956: LIST
11957: PUSH
11958: LD_INT 17
11960: PUSH
11961: LD_INT 164
11963: PUSH
11964: LD_INT 74
11966: PUSH
11967: LD_INT 4
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: PUSH
11976: LD_INT 6
11978: PUSH
11979: LD_INT 164
11981: PUSH
11982: LD_INT 95
11984: PUSH
11985: LD_INT 5
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: PUSH
11994: LD_INT 18
11996: PUSH
11997: LD_INT 161
11999: PUSH
12000: LD_INT 70
12002: PUSH
12003: LD_INT 3
12005: PUSH
12006: EMPTY
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: PUSH
12012: LD_INT 26
12014: PUSH
12015: LD_INT 155
12017: PUSH
12018: LD_INT 87
12020: PUSH
12021: LD_INT 0
12023: PUSH
12024: EMPTY
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: PUSH
12030: LD_INT 26
12032: PUSH
12033: LD_INT 159
12035: PUSH
12036: LD_INT 95
12038: PUSH
12039: LD_INT 3
12041: PUSH
12042: EMPTY
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: PUSH
12048: LD_INT 26
12050: PUSH
12051: LD_INT 167
12053: PUSH
12054: LD_INT 98
12056: PUSH
12057: LD_INT 1
12059: PUSH
12060: EMPTY
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: PUSH
12066: LD_INT 33
12068: PUSH
12069: LD_INT 152
12071: PUSH
12072: LD_INT 89
12074: PUSH
12075: LD_INT 1
12077: PUSH
12078: EMPTY
12079: LIST
12080: LIST
12081: LIST
12082: LIST
12083: PUSH
12084: LD_INT 33
12086: PUSH
12087: LD_INT 134
12089: PUSH
12090: LD_INT 61
12092: PUSH
12093: LD_INT 2
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: PUSH
12102: LD_INT 33
12104: PUSH
12105: LD_INT 156
12107: PUSH
12108: LD_INT 62
12110: PUSH
12111: LD_INT 3
12113: PUSH
12114: EMPTY
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: PUSH
12120: LD_INT 33
12122: PUSH
12123: LD_INT 171
12125: PUSH
12126: LD_INT 97
12128: PUSH
12129: LD_INT 5
12131: PUSH
12132: EMPTY
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: PUSH
12138: LD_INT 33
12140: PUSH
12141: LD_INT 169
12143: PUSH
12144: LD_INT 103
12146: PUSH
12147: LD_INT 5
12149: PUSH
12150: EMPTY
12151: LIST
12152: LIST
12153: LIST
12154: LIST
12155: PUSH
12156: LD_INT 33
12158: PUSH
12159: LD_INT 158
12161: PUSH
12162: LD_INT 65
12164: PUSH
12165: LD_INT 3
12167: PUSH
12168: EMPTY
12169: LIST
12170: LIST
12171: LIST
12172: LIST
12173: PUSH
12174: LD_INT 33
12176: PUSH
12177: LD_INT 144
12179: PUSH
12180: LD_INT 53
12182: PUSH
12183: LD_INT 2
12185: PUSH
12186: EMPTY
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: PUSH
12192: LD_INT 33
12194: PUSH
12195: LD_INT 150
12197: PUSH
12198: LD_INT 81
12200: PUSH
12201: LD_INT 1
12203: PUSH
12204: EMPTY
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: ST_TO_ADDR
// ruHealPoint := [ 145 , 71 ] ;
12236: LD_ADDR_EXP 74
12240: PUSH
12241: LD_INT 145
12243: PUSH
12244: LD_INT 71
12246: PUSH
12247: EMPTY
12248: LIST
12249: LIST
12250: ST_TO_ADDR
// ruParkingArea := ruParkingEastArea ;
12251: LD_ADDR_EXP 82
12255: PUSH
12256: LD_INT 29
12258: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnEastArea ;
12259: LD_ADDR_EXP 84
12263: PUSH
12264: LD_INT 35
12266: ST_TO_ADDR
// end ; end ;
12267: GO 12270
12269: POP
// ruScriptActive := true ;
12270: LD_ADDR_EXP 14
12274: PUSH
12275: LD_INT 1
12277: ST_TO_ADDR
// end ;
12278: LD_VAR 0 3
12282: RET
// export function RussianBase2 ( group , option ) ; begin
12283: LD_INT 0
12285: PPUSH
// case option of 1 :
12286: LD_VAR 0 2
12290: PUSH
12291: LD_INT 1
12293: DOUBLE
12294: EQUAL
12295: IFTRUE 12299
12297: GO 12755
12299: POP
// begin ruBaseArea2 := ruBaseCenterArea ;
12300: LD_ADDR_EXP 67
12304: PUSH
12305: LD_INT 26
12307: ST_TO_ADDR
// ruCratesArea2 := ruBaseCenterArea ;
12308: LD_ADDR_EXP 73
12312: PUSH
12313: LD_INT 26
12315: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
12316: LD_ADDR_EXP 77
12320: PUSH
12321: LD_INT 0
12323: PUSH
12324: LD_INT 104
12326: PUSH
12327: LD_INT 110
12329: PUSH
12330: LD_INT 5
12332: PUSH
12333: EMPTY
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: PUSH
12339: LD_INT 4
12341: PUSH
12342: LD_INT 98
12344: PUSH
12345: LD_INT 90
12347: PUSH
12348: LD_INT 3
12350: PUSH
12351: EMPTY
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: PUSH
12357: LD_INT 29
12359: PUSH
12360: LD_INT 103
12362: PUSH
12363: LD_INT 114
12365: PUSH
12366: LD_INT 2
12368: PUSH
12369: EMPTY
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: PUSH
12375: LD_INT 30
12377: PUSH
12378: LD_INT 99
12380: PUSH
12381: LD_INT 114
12383: PUSH
12384: LD_INT 3
12386: PUSH
12387: EMPTY
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: PUSH
12393: LD_INT 28
12395: PUSH
12396: LD_INT 100
12398: PUSH
12399: LD_INT 112
12401: PUSH
12402: LD_INT 1
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: PUSH
12411: LD_INT 2
12413: PUSH
12414: LD_INT 92
12416: PUSH
12417: LD_INT 101
12419: PUSH
12420: LD_INT 0
12422: PUSH
12423: EMPTY
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: PUSH
12429: LD_INT 26
12431: PUSH
12432: LD_INT 97
12434: PUSH
12435: LD_INT 116
12437: PUSH
12438: LD_INT 5
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: PUSH
12447: LD_INT 17
12449: PUSH
12450: LD_INT 96
12452: PUSH
12453: LD_INT 101
12455: PUSH
12456: LD_INT 4
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: LIST
12463: LIST
12464: PUSH
12465: LD_INT 18
12467: PUSH
12468: LD_INT 88
12470: PUSH
12471: LD_INT 97
12473: PUSH
12474: LD_INT 2
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: LIST
12481: LIST
12482: PUSH
12483: LD_INT 26
12485: PUSH
12486: LD_INT 106
12488: PUSH
12489: LD_INT 92
12491: PUSH
12492: LD_INT 2
12494: PUSH
12495: EMPTY
12496: LIST
12497: LIST
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 6
12503: PUSH
12504: LD_INT 93
12506: PUSH
12507: LD_INT 110
12509: PUSH
12510: LD_INT 0
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: LIST
12517: LIST
12518: PUSH
12519: LD_INT 21
12521: PUSH
12522: LD_INT 89
12524: PUSH
12525: LD_INT 101
12527: PUSH
12528: LD_INT 1
12530: PUSH
12531: EMPTY
12532: LIST
12533: LIST
12534: LIST
12535: LIST
12536: PUSH
12537: LD_INT 16
12539: PUSH
12540: LD_INT 95
12542: PUSH
12543: LD_INT 104
12545: PUSH
12546: LD_INT 4
12548: PUSH
12549: EMPTY
12550: LIST
12551: LIST
12552: LIST
12553: LIST
12554: PUSH
12555: LD_INT 24
12557: PUSH
12558: LD_INT 92
12560: PUSH
12561: LD_INT 105
12563: PUSH
12564: LD_INT 0
12566: PUSH
12567: EMPTY
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: PUSH
12573: LD_INT 33
12575: PUSH
12576: LD_INT 88
12578: PUSH
12579: LD_INT 89
12581: PUSH
12582: LD_INT 2
12584: PUSH
12585: EMPTY
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: PUSH
12591: LD_INT 33
12593: PUSH
12594: LD_INT 86
12596: PUSH
12597: LD_INT 90
12599: PUSH
12600: LD_INT 2
12602: PUSH
12603: EMPTY
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: PUSH
12609: LD_INT 33
12611: PUSH
12612: LD_INT 85
12614: PUSH
12615: LD_INT 99
12617: PUSH
12618: LD_INT 2
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: PUSH
12627: LD_INT 33
12629: PUSH
12630: LD_INT 85
12632: PUSH
12633: LD_INT 107
12635: PUSH
12636: LD_INT 1
12638: PUSH
12639: EMPTY
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: PUSH
12645: LD_INT 33
12647: PUSH
12648: LD_INT 105
12650: PUSH
12651: LD_INT 99
12653: PUSH
12654: LD_INT 1
12656: PUSH
12657: EMPTY
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: PUSH
12663: LD_INT 33
12665: PUSH
12666: LD_INT 102
12668: PUSH
12669: LD_INT 92
12671: PUSH
12672: LD_INT 3
12674: PUSH
12675: EMPTY
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: PUSH
12681: LD_INT 33
12683: PUSH
12684: LD_INT 105
12686: PUSH
12687: LD_INT 92
12689: PUSH
12690: LD_INT 2
12692: PUSH
12693: EMPTY
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: LIST
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: ST_TO_ADDR
// ruHealPoint2 := [ 98 , 107 ] ;
12722: LD_ADDR_EXP 75
12726: PUSH
12727: LD_INT 98
12729: PUSH
12730: LD_INT 107
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: ST_TO_ADDR
// ruParkingArea2 := ruParkingCenterArea ;
12737: LD_ADDR_EXP 83
12741: PUSH
12742: LD_INT 30
12744: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnCenterArea ;
12745: LD_ADDR_EXP 85
12749: PUSH
12750: LD_INT 36
12752: ST_TO_ADDR
// end ; 2 :
12753: GO 13722
12755: LD_INT 2
12757: DOUBLE
12758: EQUAL
12759: IFTRUE 12763
12761: GO 13257
12763: POP
// begin ruBaseArea2 := ruBaseWestArea ;
12764: LD_ADDR_EXP 67
12768: PUSH
12769: LD_INT 28
12771: ST_TO_ADDR
// ruCratesArea2 := ruBaseWestArea ;
12772: LD_ADDR_EXP 73
12776: PUSH
12777: LD_INT 28
12779: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
12780: LD_ADDR_EXP 77
12784: PUSH
12785: LD_INT 0
12787: PUSH
12788: LD_INT 49
12790: PUSH
12791: LD_INT 74
12793: PUSH
12794: LD_INT 3
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: PUSH
12803: LD_INT 4
12805: PUSH
12806: LD_INT 73
12808: PUSH
12809: LD_INT 88
12811: PUSH
12812: LD_INT 5
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: PUSH
12821: LD_INT 4
12823: PUSH
12824: LD_INT 56
12826: PUSH
12827: LD_INT 62
12829: PUSH
12830: LD_INT 3
12832: PUSH
12833: EMPTY
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: PUSH
12839: LD_INT 29
12841: PUSH
12842: LD_INT 43
12844: PUSH
12845: LD_INT 68
12847: PUSH
12848: LD_INT 2
12850: PUSH
12851: EMPTY
12852: LIST
12853: LIST
12854: LIST
12855: LIST
12856: PUSH
12857: LD_INT 30
12859: PUSH
12860: LD_INT 43
12862: PUSH
12863: LD_INT 79
12865: PUSH
12866: LD_INT 5
12868: PUSH
12869: EMPTY
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: PUSH
12875: LD_INT 28
12877: PUSH
12878: LD_INT 60
12880: PUSH
12881: LD_INT 75
12883: PUSH
12884: LD_INT 1
12886: PUSH
12887: EMPTY
12888: LIST
12889: LIST
12890: LIST
12891: LIST
12892: PUSH
12893: LD_INT 2
12895: PUSH
12896: LD_INT 50
12898: PUSH
12899: LD_INT 87
12901: PUSH
12902: LD_INT 1
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: PUSH
12911: LD_INT 26
12913: PUSH
12914: LD_INT 45
12916: PUSH
12917: LD_INT 67
12919: PUSH
12920: LD_INT 2
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: LIST
12927: LIST
12928: PUSH
12929: LD_INT 17
12931: PUSH
12932: LD_INT 47
12934: PUSH
12935: LD_INT 84
12937: PUSH
12938: LD_INT 2
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: LIST
12945: LIST
12946: PUSH
12947: LD_INT 18
12949: PUSH
12950: LD_INT 46
12952: PUSH
12953: LD_INT 87
12955: PUSH
12956: LD_INT 1
12958: PUSH
12959: EMPTY
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: PUSH
12965: LD_INT 26
12967: PUSH
12968: LD_INT 41
12970: PUSH
12971: LD_INT 64
12973: PUSH
12974: LD_INT 5
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: PUSH
12983: LD_INT 6
12985: PUSH
12986: LD_INT 42
12988: PUSH
12989: LD_INT 74
12991: PUSH
12992: LD_INT 1
12994: PUSH
12995: EMPTY
12996: LIST
12997: LIST
12998: LIST
12999: LIST
13000: PUSH
13001: LD_INT 21
13003: PUSH
13004: LD_INT 54
13006: PUSH
13007: LD_INT 91
13009: PUSH
13010: LD_INT 5
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: PUSH
13019: LD_INT 16
13021: PUSH
13022: LD_INT 50
13024: PUSH
13025: LD_INT 83
13027: PUSH
13028: LD_INT 3
13030: PUSH
13031: EMPTY
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: PUSH
13037: LD_INT 24
13039: PUSH
13040: LD_INT 50
13042: PUSH
13043: LD_INT 90
13045: PUSH
13046: LD_INT 0
13048: PUSH
13049: EMPTY
13050: LIST
13051: LIST
13052: LIST
13053: LIST
13054: PUSH
13055: LD_INT 33
13057: PUSH
13058: LD_INT 51
13060: PUSH
13061: LD_INT 61
13063: PUSH
13064: LD_INT 3
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: LIST
13071: LIST
13072: PUSH
13073: LD_INT 33
13075: PUSH
13076: LD_INT 42
13078: PUSH
13079: LD_INT 60
13081: PUSH
13082: LD_INT 3
13084: PUSH
13085: EMPTY
13086: LIST
13087: LIST
13088: LIST
13089: LIST
13090: PUSH
13091: LD_INT 33
13093: PUSH
13094: LD_INT 36
13096: PUSH
13097: LD_INT 58
13099: PUSH
13100: LD_INT 3
13102: PUSH
13103: EMPTY
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: PUSH
13109: LD_INT 33
13111: PUSH
13112: LD_INT 39
13114: PUSH
13115: LD_INT 59
13117: PUSH
13118: LD_INT 3
13120: PUSH
13121: EMPTY
13122: LIST
13123: LIST
13124: LIST
13125: LIST
13126: PUSH
13127: LD_INT 33
13129: PUSH
13130: LD_INT 61
13132: PUSH
13133: LD_INT 64
13135: PUSH
13136: LD_INT 3
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: LIST
13143: LIST
13144: PUSH
13145: LD_INT 33
13147: PUSH
13148: LD_INT 63
13150: PUSH
13151: LD_INT 90
13153: PUSH
13154: LD_INT 5
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: LIST
13161: LIST
13162: PUSH
13163: LD_INT 33
13165: PUSH
13166: LD_INT 64
13168: PUSH
13169: LD_INT 88
13171: PUSH
13172: LD_INT 5
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: LIST
13179: LIST
13180: PUSH
13181: LD_INT 33
13183: PUSH
13184: LD_INT 72
13186: PUSH
13187: LD_INT 82
13189: PUSH
13190: LD_INT 5
13192: PUSH
13193: EMPTY
13194: LIST
13195: LIST
13196: LIST
13197: LIST
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: LIST
13207: LIST
13208: LIST
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: LIST
13214: LIST
13215: LIST
13216: LIST
13217: LIST
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: LIST
13223: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
13224: LD_ADDR_EXP 74
13228: PUSH
13229: LD_INT 45
13231: PUSH
13232: LD_INT 75
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: ST_TO_ADDR
// ruParkingArea2 := ruParkingWestArea ;
13239: LD_ADDR_EXP 83
13243: PUSH
13244: LD_INT 31
13246: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnWestArea ;
13247: LD_ADDR_EXP 85
13251: PUSH
13252: LD_INT 37
13254: ST_TO_ADDR
// end ; 3 :
13255: GO 13722
13257: LD_INT 3
13259: DOUBLE
13260: EQUAL
13261: IFTRUE 13265
13263: GO 13721
13265: POP
// begin ruBaseArea2 := ruBaseEastArea ;
13266: LD_ADDR_EXP 67
13270: PUSH
13271: LD_INT 27
13273: ST_TO_ADDR
// ruCratesArea2 := ruBaseEastArea ;
13274: LD_ADDR_EXP 73
13278: PUSH
13279: LD_INT 27
13281: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] ] ;
13282: LD_ADDR_EXP 77
13286: PUSH
13287: LD_INT 0
13289: PUSH
13290: LD_INT 152
13292: PUSH
13293: LD_INT 72
13295: PUSH
13296: LD_INT 4
13298: PUSH
13299: EMPTY
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: PUSH
13305: LD_INT 4
13307: PUSH
13308: LD_INT 139
13310: PUSH
13311: LD_INT 69
13313: PUSH
13314: LD_INT 1
13316: PUSH
13317: EMPTY
13318: LIST
13319: LIST
13320: LIST
13321: LIST
13322: PUSH
13323: LD_INT 4
13325: PUSH
13326: LD_INT 142
13328: PUSH
13329: LD_INT 56
13331: PUSH
13332: LD_INT 2
13334: PUSH
13335: EMPTY
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: PUSH
13341: LD_INT 29
13343: PUSH
13344: LD_INT 152
13346: PUSH
13347: LD_INT 85
13349: PUSH
13350: LD_INT 3
13352: PUSH
13353: EMPTY
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: PUSH
13359: LD_INT 30
13361: PUSH
13362: LD_INT 156
13364: PUSH
13365: LD_INT 92
13367: PUSH
13368: LD_INT 3
13370: PUSH
13371: EMPTY
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: PUSH
13377: LD_INT 28
13379: PUSH
13380: LD_INT 157
13382: PUSH
13383: LD_INT 96
13385: PUSH
13386: LD_INT 4
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: PUSH
13395: LD_INT 2
13397: PUSH
13398: LD_INT 161
13400: PUSH
13401: LD_INT 74
13403: PUSH
13404: LD_INT 5
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: LIST
13411: LIST
13412: PUSH
13413: LD_INT 21
13415: PUSH
13416: LD_INT 157
13418: PUSH
13419: LD_INT 74
13421: PUSH
13422: LD_INT 1
13424: PUSH
13425: EMPTY
13426: LIST
13427: LIST
13428: LIST
13429: LIST
13430: PUSH
13431: LD_INT 16
13433: PUSH
13434: LD_INT 161
13436: PUSH
13437: LD_INT 77
13439: PUSH
13440: LD_INT 0
13442: PUSH
13443: EMPTY
13444: LIST
13445: LIST
13446: LIST
13447: LIST
13448: PUSH
13449: LD_INT 24
13451: PUSH
13452: LD_INT 165
13454: PUSH
13455: LD_INT 78
13457: PUSH
13458: LD_INT 5
13460: PUSH
13461: EMPTY
13462: LIST
13463: LIST
13464: LIST
13465: LIST
13466: PUSH
13467: LD_INT 17
13469: PUSH
13470: LD_INT 164
13472: PUSH
13473: LD_INT 74
13475: PUSH
13476: LD_INT 4
13478: PUSH
13479: EMPTY
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: PUSH
13485: LD_INT 6
13487: PUSH
13488: LD_INT 164
13490: PUSH
13491: LD_INT 95
13493: PUSH
13494: LD_INT 5
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: PUSH
13503: LD_INT 18
13505: PUSH
13506: LD_INT 161
13508: PUSH
13509: LD_INT 70
13511: PUSH
13512: LD_INT 3
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: PUSH
13521: LD_INT 26
13523: PUSH
13524: LD_INT 155
13526: PUSH
13527: LD_INT 87
13529: PUSH
13530: LD_INT 0
13532: PUSH
13533: EMPTY
13534: LIST
13535: LIST
13536: LIST
13537: LIST
13538: PUSH
13539: LD_INT 26
13541: PUSH
13542: LD_INT 159
13544: PUSH
13545: LD_INT 95
13547: PUSH
13548: LD_INT 3
13550: PUSH
13551: EMPTY
13552: LIST
13553: LIST
13554: LIST
13555: LIST
13556: PUSH
13557: LD_INT 26
13559: PUSH
13560: LD_INT 167
13562: PUSH
13563: LD_INT 98
13565: PUSH
13566: LD_INT 1
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: LIST
13573: LIST
13574: PUSH
13575: LD_INT 33
13577: PUSH
13578: LD_INT 152
13580: PUSH
13581: LD_INT 89
13583: PUSH
13584: LD_INT 1
13586: PUSH
13587: EMPTY
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: PUSH
13593: LD_INT 33
13595: PUSH
13596: LD_INT 134
13598: PUSH
13599: LD_INT 61
13601: PUSH
13602: LD_INT 2
13604: PUSH
13605: EMPTY
13606: LIST
13607: LIST
13608: LIST
13609: LIST
13610: PUSH
13611: LD_INT 33
13613: PUSH
13614: LD_INT 156
13616: PUSH
13617: LD_INT 62
13619: PUSH
13620: LD_INT 3
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: PUSH
13629: LD_INT 33
13631: PUSH
13632: LD_INT 171
13634: PUSH
13635: LD_INT 97
13637: PUSH
13638: LD_INT 5
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: LIST
13645: LIST
13646: PUSH
13647: LD_INT 33
13649: PUSH
13650: LD_INT 169
13652: PUSH
13653: LD_INT 103
13655: PUSH
13656: LD_INT 5
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: ST_TO_ADDR
// ruHealPoint2 := [ 145 , 71 ] ;
13688: LD_ADDR_EXP 75
13692: PUSH
13693: LD_INT 145
13695: PUSH
13696: LD_INT 71
13698: PUSH
13699: EMPTY
13700: LIST
13701: LIST
13702: ST_TO_ADDR
// ruParkingArea2 := ruParkingEastArea ;
13703: LD_ADDR_EXP 83
13707: PUSH
13708: LD_INT 29
13710: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnEastArea ;
13711: LD_ADDR_EXP 85
13715: PUSH
13716: LD_INT 35
13718: ST_TO_ADDR
// end ; end ;
13719: GO 13722
13721: POP
// ruScriptActive2 := true ;
13722: LD_ADDR_EXP 15
13726: PUSH
13727: LD_INT 1
13729: ST_TO_ADDR
// end ;
13730: LD_VAR 0 3
13734: RET
// every 0 0$2 trigger ruScriptActive and Count ( ruForces ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
13735: LD_EXP 14
13739: PUSH
13740: LD_EXP 59
13744: PPUSH
13745: CALL 56538 0 1
13749: AND
13750: IFFALSE 16332
13752: GO 13754
13754: DISABLE
13755: LD_INT 0
13757: PPUSH
13758: PPUSH
13759: PPUSH
13760: PPUSH
13761: PPUSH
13762: PPUSH
13763: PPUSH
13764: PPUSH
13765: PPUSH
13766: PPUSH
13767: PPUSH
13768: PPUSH
13769: PPUSH
13770: PPUSH
13771: PPUSH
13772: PPUSH
// begin enable ;
13773: ENABLE
// if ruTech then
13774: LD_EXP 65
13778: IFFALSE 13932
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
13780: LD_ADDR_VAR 0 4
13784: PUSH
13785: LD_INT 22
13787: PUSH
13788: LD_INT 3
13790: PUSH
13791: EMPTY
13792: LIST
13793: LIST
13794: PUSH
13795: LD_INT 50
13797: PUSH
13798: EMPTY
13799: LIST
13800: PUSH
13801: LD_INT 2
13803: PUSH
13804: LD_INT 30
13806: PUSH
13807: LD_INT 6
13809: PUSH
13810: EMPTY
13811: LIST
13812: LIST
13813: PUSH
13814: LD_INT 30
13816: PUSH
13817: LD_INT 7
13819: PUSH
13820: EMPTY
13821: LIST
13822: LIST
13823: PUSH
13824: LD_INT 30
13826: PUSH
13827: LD_INT 8
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PUSH
13834: EMPTY
13835: LIST
13836: LIST
13837: LIST
13838: LIST
13839: PUSH
13840: EMPTY
13841: LIST
13842: LIST
13843: LIST
13844: PPUSH
13845: CALL_OW 69
13849: ST_TO_ADDR
// if lab then
13850: LD_VAR 0 4
13854: IFFALSE 13932
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
13856: LD_VAR 0 4
13860: PUSH
13861: LD_INT 1
13863: ARRAY
13864: PPUSH
13865: CALL_OW 461
13869: PUSH
13870: LD_INT 2
13872: EQUAL
13873: IFFALSE 13932
// begin for i in ruTech do
13875: LD_ADDR_VAR 0 1
13879: PUSH
13880: LD_EXP 65
13884: PUSH
13885: FOR_IN
13886: IFFALSE 13930
// if CanBeResearched ( lab [ 1 ] , i ) then
13888: LD_VAR 0 4
13892: PUSH
13893: LD_INT 1
13895: ARRAY
13896: PPUSH
13897: LD_VAR 0 1
13901: PPUSH
13902: CALL_OW 430
13906: IFFALSE 13928
// begin ComResearch ( lab [ 1 ] , i ) ;
13908: LD_VAR 0 4
13912: PUSH
13913: LD_INT 1
13915: ARRAY
13916: PPUSH
13917: LD_VAR 0 1
13921: PPUSH
13922: CALL_OW 124
// break ;
13926: GO 13930
// end ;
13928: GO 13885
13930: POP
13931: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
13932: LD_ADDR_VAR 0 14
13936: PUSH
13937: LD_EXP 66
13941: PPUSH
13942: LD_INT 22
13944: PUSH
13945: LD_INT 3
13947: PUSH
13948: EMPTY
13949: LIST
13950: LIST
13951: PUSH
13952: LD_INT 30
13954: PUSH
13955: LD_INT 3
13957: PUSH
13958: EMPTY
13959: LIST
13960: LIST
13961: PUSH
13962: LD_INT 50
13964: PUSH
13965: EMPTY
13966: LIST
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: LIST
13972: PPUSH
13973: CALL_OW 70
13977: ST_TO_ADDR
// if fac then
13978: LD_VAR 0 14
13982: IFFALSE 14577
// begin if UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
13984: LD_EXP 63
13988: PPUSH
13989: LD_INT 3
13991: PUSH
13992: LD_INT 60
13994: PUSH
13995: EMPTY
13996: LIST
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PUSH
14002: LD_INT 3
14004: PUSH
14005: LD_INT 25
14007: PUSH
14008: LD_INT 3
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: EMPTY
14020: LIST
14021: LIST
14022: PPUSH
14023: CALL_OW 72
14027: IFFALSE 14168
// begin for i in UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
14029: LD_ADDR_VAR 0 1
14033: PUSH
14034: LD_EXP 63
14038: PPUSH
14039: LD_INT 3
14041: PUSH
14042: LD_INT 60
14044: PUSH
14045: EMPTY
14046: LIST
14047: PUSH
14048: EMPTY
14049: LIST
14050: LIST
14051: PUSH
14052: LD_INT 3
14054: PUSH
14055: LD_INT 25
14057: PUSH
14058: LD_INT 3
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PPUSH
14073: CALL_OW 72
14077: PUSH
14078: FOR_IN
14079: IFFALSE 14166
// begin SetTag ( i , tMech ) ;
14081: LD_VAR 0 1
14085: PPUSH
14086: LD_INT 7
14088: PPUSH
14089: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
14093: LD_VAR 0 1
14097: PPUSH
14098: CALL_OW 310
14102: PUSH
14103: LD_VAR 0 1
14107: PPUSH
14108: CALL_OW 310
14112: PUSH
14113: LD_VAR 0 14
14117: PUSH
14118: LD_INT 1
14120: ARRAY
14121: NONEQUAL
14122: AND
14123: IFFALSE 14134
// ComExitBuilding ( i ) ;
14125: LD_VAR 0 1
14129: PPUSH
14130: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
14134: LD_VAR 0 1
14138: PPUSH
14139: LD_VAR 0 14
14143: PUSH
14144: LD_INT 1
14146: ARRAY
14147: PPUSH
14148: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
14152: LD_VAR 0 1
14156: PPUSH
14157: LD_INT 3
14159: PPUSH
14160: CALL_OW 183
// end ;
14164: GO 14078
14166: POP
14167: POP
// end ; if UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
14168: LD_EXP 63
14172: PPUSH
14173: LD_INT 25
14175: PUSH
14176: LD_INT 3
14178: PUSH
14179: EMPTY
14180: LIST
14181: LIST
14182: PUSH
14183: LD_INT 3
14185: PUSH
14186: LD_INT 54
14188: PUSH
14189: EMPTY
14190: LIST
14191: PUSH
14192: EMPTY
14193: LIST
14194: LIST
14195: PUSH
14196: LD_INT 120
14198: PUSH
14199: LD_INT 7
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: PUSH
14206: LD_INT 50
14208: PUSH
14209: EMPTY
14210: LIST
14211: PUSH
14212: EMPTY
14213: LIST
14214: LIST
14215: LIST
14216: LIST
14217: PPUSH
14218: CALL_OW 72
14222: IFFALSE 14309
// begin for i in UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
14224: LD_ADDR_VAR 0 1
14228: PUSH
14229: LD_EXP 63
14233: PPUSH
14234: LD_INT 25
14236: PUSH
14237: LD_INT 3
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 3
14246: PUSH
14247: LD_INT 54
14249: PUSH
14250: EMPTY
14251: LIST
14252: PUSH
14253: EMPTY
14254: LIST
14255: LIST
14256: PUSH
14257: LD_INT 120
14259: PUSH
14260: LD_INT 7
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: PUSH
14267: LD_INT 50
14269: PUSH
14270: EMPTY
14271: LIST
14272: PUSH
14273: EMPTY
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: PPUSH
14279: CALL_OW 72
14283: PUSH
14284: FOR_IN
14285: IFFALSE 14307
// ComEnterUnit ( i , fac [ 1 ] ) ;
14287: LD_VAR 0 1
14291: PPUSH
14292: LD_VAR 0 14
14296: PUSH
14297: LD_INT 1
14299: ARRAY
14300: PPUSH
14301: CALL_OW 120
14305: GO 14284
14307: POP
14308: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
14309: LD_VAR 0 14
14313: PUSH
14314: LD_INT 1
14316: ARRAY
14317: PPUSH
14318: CALL_OW 461
14322: PUSH
14323: LD_INT 2
14325: EQUAL
14326: IFFALSE 14577
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
14328: LD_ADDR_VAR 0 15
14332: PUSH
14333: LD_EXP 66
14337: PPUSH
14338: LD_INT 2
14340: PUSH
14341: LD_INT 30
14343: PUSH
14344: LD_INT 32
14346: PUSH
14347: EMPTY
14348: LIST
14349: LIST
14350: PUSH
14351: LD_INT 30
14353: PUSH
14354: LD_INT 33
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: EMPTY
14362: LIST
14363: LIST
14364: LIST
14365: PUSH
14366: LD_INT 35
14368: PUSH
14369: LD_INT 0
14371: PUSH
14372: EMPTY
14373: LIST
14374: LIST
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: PPUSH
14380: CALL_OW 70
14384: ST_TO_ADDR
// if emptyTowers then
14385: LD_VAR 0 15
14389: IFFALSE 14439
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea ) ;
14391: LD_ADDR_VAR 0 16
14395: PUSH
14396: LD_VAR 0 15
14400: PUSH
14401: LD_INT 1
14403: ARRAY
14404: PPUSH
14405: LD_EXP 66
14409: PPUSH
14410: CALL 64783 0 2
14414: ST_TO_ADDR
// if weapon then
14415: LD_VAR 0 16
14419: IFFALSE 14439
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
14421: LD_VAR 0 15
14425: PUSH
14426: LD_INT 1
14428: ARRAY
14429: PPUSH
14430: LD_VAR 0 16
14434: PPUSH
14435: CALL_OW 148
// end ; if ruConstructList then
14439: LD_EXP 70
14443: IFFALSE 14577
// if CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
14445: LD_VAR 0 14
14449: PUSH
14450: LD_INT 1
14452: ARRAY
14453: PPUSH
14454: LD_EXP 70
14458: PUSH
14459: LD_INT 1
14461: ARRAY
14462: PUSH
14463: LD_INT 1
14465: ARRAY
14466: PPUSH
14467: LD_EXP 70
14471: PUSH
14472: LD_INT 1
14474: ARRAY
14475: PUSH
14476: LD_INT 2
14478: ARRAY
14479: PPUSH
14480: LD_EXP 70
14484: PUSH
14485: LD_INT 1
14487: ARRAY
14488: PUSH
14489: LD_INT 3
14491: ARRAY
14492: PPUSH
14493: LD_EXP 70
14497: PUSH
14498: LD_INT 1
14500: ARRAY
14501: PUSH
14502: LD_INT 4
14504: ARRAY
14505: PPUSH
14506: CALL_OW 448
14510: IFFALSE 14577
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
14512: LD_VAR 0 14
14516: PUSH
14517: LD_INT 1
14519: ARRAY
14520: PPUSH
14521: LD_EXP 70
14525: PUSH
14526: LD_INT 1
14528: ARRAY
14529: PUSH
14530: LD_INT 1
14532: ARRAY
14533: PPUSH
14534: LD_EXP 70
14538: PUSH
14539: LD_INT 1
14541: ARRAY
14542: PUSH
14543: LD_INT 2
14545: ARRAY
14546: PPUSH
14547: LD_EXP 70
14551: PUSH
14552: LD_INT 1
14554: ARRAY
14555: PUSH
14556: LD_INT 3
14558: ARRAY
14559: PPUSH
14560: LD_EXP 70
14564: PUSH
14565: LD_INT 1
14567: ARRAY
14568: PUSH
14569: LD_INT 4
14571: ARRAY
14572: PPUSH
14573: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14577: LD_ADDR_VAR 0 2
14581: PUSH
14582: LD_EXP 66
14586: PPUSH
14587: LD_INT 21
14589: PUSH
14590: LD_INT 3
14592: PUSH
14593: EMPTY
14594: LIST
14595: LIST
14596: PUSH
14597: LD_INT 3
14599: PUSH
14600: LD_INT 57
14602: PUSH
14603: EMPTY
14604: LIST
14605: PUSH
14606: EMPTY
14607: LIST
14608: LIST
14609: PUSH
14610: LD_INT 3
14612: PUSH
14613: LD_INT 24
14615: PUSH
14616: LD_INT 1000
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: EMPTY
14624: LIST
14625: LIST
14626: PUSH
14627: EMPTY
14628: LIST
14629: LIST
14630: LIST
14631: PPUSH
14632: CALL_OW 70
14636: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea ) ;
14637: LD_ADDR_VAR 0 8
14641: PUSH
14642: LD_EXP 72
14646: PPUSH
14647: CALL_OW 435
14651: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
14652: LD_ADDR_VAR 0 9
14656: PUSH
14657: LD_EXP 59
14661: PPUSH
14662: LD_INT 25
14664: PUSH
14665: LD_INT 4
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: PUSH
14672: LD_INT 50
14674: PUSH
14675: EMPTY
14676: LIST
14677: PUSH
14678: EMPTY
14679: LIST
14680: LIST
14681: PPUSH
14682: CALL_OW 72
14686: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
14687: LD_ADDR_VAR 0 4
14691: PUSH
14692: LD_EXP 66
14696: PPUSH
14697: LD_INT 2
14699: PUSH
14700: LD_INT 30
14702: PUSH
14703: LD_INT 6
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: LD_INT 30
14712: PUSH
14713: LD_INT 7
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PUSH
14720: LD_INT 30
14722: PUSH
14723: LD_INT 8
14725: PUSH
14726: EMPTY
14727: LIST
14728: LIST
14729: PUSH
14730: EMPTY
14731: LIST
14732: LIST
14733: LIST
14734: LIST
14735: PPUSH
14736: CALL_OW 70
14740: ST_TO_ADDR
// if sci then
14741: LD_VAR 0 9
14745: IFFALSE 14906
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
14747: LD_ADDR_VAR 0 11
14751: PUSH
14752: LD_EXP 59
14756: PPUSH
14757: LD_INT 95
14759: PUSH
14760: LD_EXP 66
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PUSH
14769: LD_INT 120
14771: PUSH
14772: LD_INT 1
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PPUSH
14783: CALL_OW 72
14787: ST_TO_ADDR
// if hurtUnits then
14788: LD_VAR 0 11
14792: IFFALSE 14853
// begin for i in sci do
14794: LD_ADDR_VAR 0 1
14798: PUSH
14799: LD_VAR 0 9
14803: PUSH
14804: FOR_IN
14805: IFFALSE 14849
// if IsInUnit ( i ) then
14807: LD_VAR 0 1
14811: PPUSH
14812: CALL_OW 310
14816: IFFALSE 14829
// ComExitBuilding ( i ) else
14818: LD_VAR 0 1
14822: PPUSH
14823: CALL_OW 122
14827: GO 14847
// ComHeal ( i , hurtUnits [ 1 ] ) ;
14829: LD_VAR 0 1
14833: PPUSH
14834: LD_VAR 0 11
14838: PUSH
14839: LD_INT 1
14841: ARRAY
14842: PPUSH
14843: CALL_OW 128
14847: GO 14804
14849: POP
14850: POP
// end else
14851: GO 14906
// if lab then
14853: LD_VAR 0 4
14857: IFFALSE 14906
// begin for i in sci do
14859: LD_ADDR_VAR 0 1
14863: PUSH
14864: LD_VAR 0 9
14868: PUSH
14869: FOR_IN
14870: IFFALSE 14904
// if not IsInUnit ( i ) then
14872: LD_VAR 0 1
14876: PPUSH
14877: CALL_OW 310
14881: NOT
14882: IFFALSE 14902
// ComEnterUnit ( i , lab [ 1 ] ) ;
14884: LD_VAR 0 1
14888: PPUSH
14889: LD_VAR 0 4
14893: PUSH
14894: LD_INT 1
14896: ARRAY
14897: PPUSH
14898: CALL_OW 120
14902: GO 14869
14904: POP
14905: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
14906: LD_ADDR_VAR 0 5
14910: PUSH
14911: LD_EXP 59
14915: PPUSH
14916: LD_INT 25
14918: PUSH
14919: LD_INT 2
14921: PUSH
14922: EMPTY
14923: LIST
14924: LIST
14925: PPUSH
14926: CALL_OW 72
14930: ST_TO_ADDR
// if eng then
14931: LD_VAR 0 5
14935: IFFALSE 15720
// begin for i in eng do
14937: LD_ADDR_VAR 0 1
14941: PUSH
14942: LD_VAR 0 5
14946: PUSH
14947: FOR_IN
14948: IFFALSE 15718
// begin tag := GetTag ( i ) ;
14950: LD_ADDR_VAR 0 6
14954: PUSH
14955: LD_VAR 0 1
14959: PPUSH
14960: CALL_OW 110
14964: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
14965: LD_VAR 0 1
14969: PPUSH
14970: CALL_OW 256
14974: PUSH
14975: LD_INT 800
14977: LESS
14978: PUSH
14979: LD_VAR 0 6
14983: PUSH
14984: LD_INT 1
14986: NONEQUAL
14987: AND
14988: IFFALSE 15038
// begin SetTag ( i , tHeal ) ;
14990: LD_VAR 0 1
14994: PPUSH
14995: LD_INT 1
14997: PPUSH
14998: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
15002: LD_VAR 0 1
15006: PPUSH
15007: LD_EXP 74
15011: PUSH
15012: LD_INT 1
15014: ARRAY
15015: PPUSH
15016: LD_EXP 74
15020: PUSH
15021: LD_INT 2
15023: ARRAY
15024: PPUSH
15025: CALL_OW 111
// AddComHold ( i ) ;
15029: LD_VAR 0 1
15033: PPUSH
15034: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
15038: LD_VAR 0 6
15042: PUSH
15043: LD_INT 1
15045: EQUAL
15046: PUSH
15047: LD_VAR 0 1
15051: PPUSH
15052: CALL_OW 256
15056: PUSH
15057: LD_INT 1000
15059: EQUAL
15060: AND
15061: IFFALSE 15075
// SetTag ( i , 0 ) ;
15063: LD_VAR 0 1
15067: PPUSH
15068: LD_INT 0
15070: PPUSH
15071: CALL_OW 109
// if not tag then
15075: LD_VAR 0 6
15079: NOT
15080: IFFALSE 15252
// begin undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15082: LD_ADDR_VAR 0 3
15086: PUSH
15087: LD_EXP 66
15091: PPUSH
15092: LD_INT 57
15094: PUSH
15095: EMPTY
15096: LIST
15097: PPUSH
15098: CALL_OW 70
15102: ST_TO_ADDR
// if undone then
15103: LD_VAR 0 3
15107: IFFALSE 15129
// begin ComComplete ( i , undone [ 1 ] ) ;
15109: LD_VAR 0 1
15113: PPUSH
15114: LD_VAR 0 3
15118: PUSH
15119: LD_INT 1
15121: ARRAY
15122: PPUSH
15123: CALL 62636 0 2
// continue ;
15127: GO 14947
// end ; if cr or tmp or Count ( ruBuildings ) then
15129: LD_VAR 0 8
15133: PUSH
15134: LD_VAR 0 2
15138: OR
15139: PUSH
15140: LD_EXP 76
15144: PPUSH
15145: CALL 56538 0 1
15149: OR
15150: IFFALSE 15226
// begin if IsInUnit ( i ) then
15152: LD_VAR 0 1
15156: PPUSH
15157: CALL_OW 310
15161: IFFALSE 15172
// ComExitBuilding ( i ) ;
15163: LD_VAR 0 1
15167: PPUSH
15168: CALL_OW 122
// if tmp then
15172: LD_VAR 0 2
15176: IFFALSE 15192
// SetTag ( i , tRepair ) else
15178: LD_VAR 0 1
15182: PPUSH
15183: LD_INT 3
15185: PPUSH
15186: CALL_OW 109
15190: GO 15224
// if cr then
15192: LD_VAR 0 8
15196: IFFALSE 15212
// SetTag ( i , tCrates ) else
15198: LD_VAR 0 1
15202: PPUSH
15203: LD_INT 2
15205: PPUSH
15206: CALL_OW 109
15210: GO 15224
// SetTag ( i , tBuild ) ;
15212: LD_VAR 0 1
15216: PPUSH
15217: LD_INT 5
15219: PPUSH
15220: CALL_OW 109
// end else
15224: GO 15252
// if not IsInUnit ( i ) then
15226: LD_VAR 0 1
15230: PPUSH
15231: CALL_OW 310
15235: NOT
15236: IFFALSE 15252
// ComEnterUnit ( i , ruBase ) ;
15238: LD_VAR 0 1
15242: PPUSH
15243: LD_EXP 68
15247: PPUSH
15248: CALL_OW 120
// end ; if tag = tRepair then
15252: LD_VAR 0 6
15256: PUSH
15257: LD_INT 3
15259: EQUAL
15260: IFFALSE 15366
// begin if IsInUnit ( i ) then
15262: LD_VAR 0 1
15266: PPUSH
15267: CALL_OW 310
15271: IFFALSE 15284
// begin ComExitBuilding ( i ) ;
15273: LD_VAR 0 1
15277: PPUSH
15278: CALL_OW 122
// continue ;
15282: GO 14947
// end ; if not tmp then
15284: LD_VAR 0 2
15288: NOT
15289: IFFALSE 15305
// begin SetTag ( i , 0 ) ;
15291: LD_VAR 0 1
15295: PPUSH
15296: LD_INT 0
15298: PPUSH
15299: CALL_OW 109
// continue ;
15303: GO 14947
// end ; if not HasTask ( i ) then
15305: LD_VAR 0 1
15309: PPUSH
15310: CALL_OW 314
15314: NOT
15315: IFFALSE 15335
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
15317: LD_VAR 0 1
15321: PPUSH
15322: LD_VAR 0 2
15326: PUSH
15327: LD_INT 1
15329: ARRAY
15330: PPUSH
15331: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
15335: LD_VAR 0 1
15339: PPUSH
15340: LD_EXP 66
15344: PPUSH
15345: CALL_OW 308
15349: NOT
15350: IFFALSE 15366
// ComMoveToArea ( i , ruBaseArea ) ;
15352: LD_VAR 0 1
15356: PPUSH
15357: LD_EXP 66
15361: PPUSH
15362: CALL_OW 113
// end ; if tag = tBuild then
15366: LD_VAR 0 6
15370: PUSH
15371: LD_INT 5
15373: EQUAL
15374: IFFALSE 15573
// begin if IsInUnit ( i ) then
15376: LD_VAR 0 1
15380: PPUSH
15381: CALL_OW 310
15385: IFFALSE 15398
// begin ComExitBuilding ( i ) ;
15387: LD_VAR 0 1
15391: PPUSH
15392: CALL_OW 122
// continue ;
15396: GO 14947
// end ; if not Count ( ruBuildings ) then
15398: LD_EXP 76
15402: PPUSH
15403: CALL 56538 0 1
15407: NOT
15408: IFFALSE 15426
// begin SetTag ( i , 0 ) ;
15410: LD_VAR 0 1
15414: PPUSH
15415: LD_INT 0
15417: PPUSH
15418: CALL_OW 109
// continue ;
15422: GO 14947
// end else
15424: GO 15465
// if not CanBeBuiltOnlyResources ( ruBase , ruBuildings [ 1 ] [ 1 ] ) then
15426: LD_EXP 68
15430: PPUSH
15431: LD_EXP 76
15435: PUSH
15436: LD_INT 1
15438: ARRAY
15439: PUSH
15440: LD_INT 1
15442: ARRAY
15443: PPUSH
15444: CALL 25296 0 2
15448: NOT
15449: IFFALSE 15465
// begin SetTag ( i , 0 ) ;
15451: LD_VAR 0 1
15455: PPUSH
15456: LD_INT 0
15458: PPUSH
15459: CALL_OW 109
// continue ;
15463: GO 14947
// end ; undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15465: LD_ADDR_VAR 0 3
15469: PUSH
15470: LD_EXP 66
15474: PPUSH
15475: LD_INT 57
15477: PUSH
15478: EMPTY
15479: LIST
15480: PPUSH
15481: CALL_OW 70
15485: ST_TO_ADDR
// if undone then
15486: LD_VAR 0 3
15490: IFFALSE 15512
// begin ComComplete ( i , undone [ 1 ] ) ;
15492: LD_VAR 0 1
15496: PPUSH
15497: LD_VAR 0 3
15501: PUSH
15502: LD_INT 1
15504: ARRAY
15505: PPUSH
15506: CALL 62636 0 2
// continue ;
15510: GO 14947
// end ; ComBuild ( i , ruBuildings [ 1 ] [ 1 ] , ruBuildings [ 1 ] [ 2 ] , ruBuildings [ 1 ] [ 3 ] , ruBuildings [ 1 ] [ 4 ] ) ;
15512: LD_VAR 0 1
15516: PPUSH
15517: LD_EXP 76
15521: PUSH
15522: LD_INT 1
15524: ARRAY
15525: PUSH
15526: LD_INT 1
15528: ARRAY
15529: PPUSH
15530: LD_EXP 76
15534: PUSH
15535: LD_INT 1
15537: ARRAY
15538: PUSH
15539: LD_INT 2
15541: ARRAY
15542: PPUSH
15543: LD_EXP 76
15547: PUSH
15548: LD_INT 1
15550: ARRAY
15551: PUSH
15552: LD_INT 3
15554: ARRAY
15555: PPUSH
15556: LD_EXP 76
15560: PUSH
15561: LD_INT 1
15563: ARRAY
15564: PUSH
15565: LD_INT 4
15567: ARRAY
15568: PPUSH
15569: CALL_OW 145
// end ; if tag = tCrates then
15573: LD_VAR 0 6
15577: PUSH
15578: LD_INT 2
15580: EQUAL
15581: IFFALSE 15716
// begin if IsInUnit ( i ) then
15583: LD_VAR 0 1
15587: PPUSH
15588: CALL_OW 310
15592: IFFALSE 15605
// begin ComExitBuilding ( i ) ;
15594: LD_VAR 0 1
15598: PPUSH
15599: CALL_OW 122
// continue ;
15603: GO 14947
// end ; if not cr then
15605: LD_VAR 0 8
15609: NOT
15610: IFFALSE 15626
// begin SetTag ( i , 0 ) ;
15612: LD_VAR 0 1
15616: PPUSH
15617: LD_INT 0
15619: PPUSH
15620: CALL_OW 109
// continue ;
15624: GO 14947
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
15626: LD_VAR 0 1
15630: PPUSH
15631: CALL_OW 314
15635: NOT
15636: PUSH
15637: LD_INT 81
15639: PUSH
15640: LD_INT 3
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 92
15649: PUSH
15650: LD_VAR 0 8
15654: PUSH
15655: LD_INT 1
15657: ARRAY
15658: PUSH
15659: LD_VAR 0 8
15663: PUSH
15664: LD_INT 2
15666: ARRAY
15667: PUSH
15668: LD_INT 12
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: PUSH
15677: EMPTY
15678: LIST
15679: LIST
15680: PPUSH
15681: CALL_OW 69
15685: NOT
15686: AND
15687: IFFALSE 15716
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
15689: LD_VAR 0 1
15693: PPUSH
15694: LD_VAR 0 8
15698: PUSH
15699: LD_INT 1
15701: ARRAY
15702: PPUSH
15703: LD_VAR 0 8
15707: PUSH
15708: LD_INT 2
15710: ARRAY
15711: PPUSH
15712: CALL_OW 117
// end ; end ;
15716: GO 14947
15718: POP
15719: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander ;
15720: LD_ADDR_VAR 0 10
15724: PUSH
15725: LD_EXP 59
15729: PPUSH
15730: LD_INT 2
15732: PUSH
15733: LD_INT 25
15735: PUSH
15736: LD_INT 1
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: PUSH
15743: LD_INT 25
15745: PUSH
15746: LD_INT 9
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PUSH
15753: EMPTY
15754: LIST
15755: LIST
15756: LIST
15757: PUSH
15758: LD_INT 50
15760: PUSH
15761: EMPTY
15762: LIST
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PPUSH
15768: CALL_OW 72
15772: PUSH
15773: LD_EXP 61
15777: UNION
15778: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
15779: LD_ADDR_VAR 0 12
15783: PUSH
15784: LD_EXP 66
15788: PPUSH
15789: LD_INT 81
15791: PUSH
15792: LD_INT 3
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: PPUSH
15799: CALL_OW 70
15803: ST_TO_ADDR
// if sol then
15804: LD_VAR 0 10
15808: IFFALSE 16332
// begin if enemyInBase then
15810: LD_VAR 0 12
15814: IFFALSE 15957
// begin for i in sol do
15816: LD_ADDR_VAR 0 1
15820: PUSH
15821: LD_VAR 0 10
15825: PUSH
15826: FOR_IN
15827: IFFALSE 15953
// begin tw := IsInUnit ( i ) ;
15829: LD_ADDR_VAR 0 7
15833: PUSH
15834: LD_VAR 0 1
15838: PPUSH
15839: CALL_OW 310
15843: ST_TO_ADDR
// if tw then
15844: LD_VAR 0 7
15848: IFFALSE 15927
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
15850: LD_VAR 0 7
15854: PUSH
15855: LD_INT 22
15857: PUSH
15858: LD_INT 3
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: PUSH
15865: LD_INT 101
15867: PUSH
15868: LD_INT 1
15870: PUSH
15871: EMPTY
15872: LIST
15873: LIST
15874: PUSH
15875: LD_INT 2
15877: PUSH
15878: LD_INT 30
15880: PUSH
15881: LD_INT 32
15883: PUSH
15884: EMPTY
15885: LIST
15886: LIST
15887: PUSH
15888: LD_INT 30
15890: PUSH
15891: LD_INT 31
15893: PUSH
15894: EMPTY
15895: LIST
15896: LIST
15897: PUSH
15898: EMPTY
15899: LIST
15900: LIST
15901: LIST
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: LIST
15907: PPUSH
15908: CALL_OW 69
15912: IN
15913: NOT
15914: IFFALSE 15925
// ComExitBuilding ( i ) ;
15916: LD_VAR 0 1
15920: PPUSH
15921: CALL_OW 122
// end else
15925: GO 15951
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
15927: LD_VAR 0 1
15931: PPUSH
15932: LD_VAR 0 12
15936: PPUSH
15937: LD_VAR 0 1
15941: PPUSH
15942: CALL_OW 74
15946: PPUSH
15947: CALL_OW 115
// end ;
15951: GO 15826
15953: POP
15954: POP
// end else
15955: GO 16332
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
15957: LD_ADDR_VAR 0 13
15961: PUSH
15962: LD_EXP 66
15966: PPUSH
15967: LD_INT 3
15969: PUSH
15970: LD_INT 62
15972: PUSH
15973: EMPTY
15974: LIST
15975: PUSH
15976: EMPTY
15977: LIST
15978: LIST
15979: PUSH
15980: LD_INT 2
15982: PUSH
15983: LD_INT 30
15985: PUSH
15986: LD_INT 32
15988: PUSH
15989: EMPTY
15990: LIST
15991: LIST
15992: PUSH
15993: LD_INT 30
15995: PUSH
15996: LD_INT 4
15998: PUSH
15999: EMPTY
16000: LIST
16001: LIST
16002: PUSH
16003: LD_INT 30
16005: PUSH
16006: LD_INT 5
16008: PUSH
16009: EMPTY
16010: LIST
16011: LIST
16012: PUSH
16013: LD_INT 30
16015: PUSH
16016: LD_INT 31
16018: PUSH
16019: EMPTY
16020: LIST
16021: LIST
16022: PUSH
16023: EMPTY
16024: LIST
16025: LIST
16026: LIST
16027: LIST
16028: LIST
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: PPUSH
16034: CALL_OW 70
16038: ST_TO_ADDR
// if empty then
16039: LD_VAR 0 13
16043: IFFALSE 16060
// empty := ReverseArray ( empty ) ;
16045: LD_ADDR_VAR 0 13
16049: PUSH
16050: LD_VAR 0 13
16054: PPUSH
16055: CALL 87414 0 1
16059: ST_TO_ADDR
// for i in sol do
16060: LD_ADDR_VAR 0 1
16064: PUSH
16065: LD_VAR 0 10
16069: PUSH
16070: FOR_IN
16071: IFFALSE 16330
// begin tag := GetTag ( i ) ;
16073: LD_ADDR_VAR 0 6
16077: PUSH
16078: LD_VAR 0 1
16082: PPUSH
16083: CALL_OW 110
16087: ST_TO_ADDR
// if tag = tMech then
16088: LD_VAR 0 6
16092: PUSH
16093: LD_INT 7
16095: EQUAL
16096: IFFALSE 16100
// continue ;
16098: GO 16070
// if GetLives ( i ) < 1000 and tag <> tHeal then
16100: LD_VAR 0 1
16104: PPUSH
16105: CALL_OW 256
16109: PUSH
16110: LD_INT 1000
16112: LESS
16113: PUSH
16114: LD_VAR 0 6
16118: PUSH
16119: LD_INT 1
16121: NONEQUAL
16122: AND
16123: IFFALSE 16175
// begin SetTag ( i , tHeal ) ;
16125: LD_VAR 0 1
16129: PPUSH
16130: LD_INT 1
16132: PPUSH
16133: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
16137: LD_VAR 0 1
16141: PPUSH
16142: LD_EXP 74
16146: PUSH
16147: LD_INT 1
16149: ARRAY
16150: PPUSH
16151: LD_EXP 74
16155: PUSH
16156: LD_INT 2
16158: ARRAY
16159: PPUSH
16160: CALL_OW 111
// AddComHold ( i ) ;
16164: LD_VAR 0 1
16168: PPUSH
16169: CALL_OW 200
// continue ;
16173: GO 16070
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
16175: LD_VAR 0 1
16179: PPUSH
16180: CALL_OW 256
16184: PUSH
16185: LD_INT 1000
16187: EQUAL
16188: PUSH
16189: LD_VAR 0 6
16193: PUSH
16194: LD_INT 1
16196: EQUAL
16197: AND
16198: IFFALSE 16214
// begin SetTag ( i , 0 ) ;
16200: LD_VAR 0 1
16204: PPUSH
16205: LD_INT 0
16207: PPUSH
16208: CALL_OW 109
// continue ;
16212: GO 16070
// end ; if HasTask ( i ) then
16214: LD_VAR 0 1
16218: PPUSH
16219: CALL_OW 314
16223: IFFALSE 16227
// continue ;
16225: GO 16070
// if not IsInUnit ( i ) and not tag and empty then
16227: LD_VAR 0 1
16231: PPUSH
16232: CALL_OW 310
16236: NOT
16237: PUSH
16238: LD_VAR 0 6
16242: NOT
16243: AND
16244: PUSH
16245: LD_VAR 0 13
16249: AND
16250: IFFALSE 16328
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
16252: LD_VAR 0 1
16256: PPUSH
16257: LD_VAR 0 13
16261: PUSH
16262: LD_INT 1
16264: ARRAY
16265: PPUSH
16266: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
16270: LD_VAR 0 13
16274: PUSH
16275: LD_INT 1
16277: ARRAY
16278: PPUSH
16279: CALL_OW 266
16283: PUSH
16284: LD_INT 5
16286: EQUAL
16287: PUSH
16288: LD_INT 50
16290: PPUSH
16291: CALL_OW 13
16295: AND
16296: IFFALSE 16310
// AddComChangeProfession ( i , class_bazooker ) ;
16298: LD_VAR 0 1
16302: PPUSH
16303: LD_INT 9
16305: PPUSH
16306: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
16310: LD_ADDR_VAR 0 13
16314: PUSH
16315: LD_VAR 0 13
16319: PPUSH
16320: LD_INT 1
16322: PPUSH
16323: CALL_OW 3
16327: ST_TO_ADDR
// end ; end ;
16328: GO 16070
16330: POP
16331: POP
// end ; end ; end ;
16332: PPOPN 16
16334: END
// every 0 0$2 trigger ruScriptActive2 and Count ( ruForces2 ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
16335: LD_EXP 15
16339: PUSH
16340: LD_EXP 60
16344: PPUSH
16345: CALL 56538 0 1
16349: AND
16350: IFFALSE 19002
16352: GO 16354
16354: DISABLE
16355: LD_INT 0
16357: PPUSH
16358: PPUSH
16359: PPUSH
16360: PPUSH
16361: PPUSH
16362: PPUSH
16363: PPUSH
16364: PPUSH
16365: PPUSH
16366: PPUSH
16367: PPUSH
16368: PPUSH
16369: PPUSH
16370: PPUSH
16371: PPUSH
16372: PPUSH
// begin enable ;
16373: ENABLE
// if ruTech then
16374: LD_EXP 65
16378: IFFALSE 16532
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
16380: LD_ADDR_VAR 0 4
16384: PUSH
16385: LD_INT 22
16387: PUSH
16388: LD_INT 3
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: PUSH
16395: LD_INT 50
16397: PUSH
16398: EMPTY
16399: LIST
16400: PUSH
16401: LD_INT 2
16403: PUSH
16404: LD_INT 30
16406: PUSH
16407: LD_INT 6
16409: PUSH
16410: EMPTY
16411: LIST
16412: LIST
16413: PUSH
16414: LD_INT 30
16416: PUSH
16417: LD_INT 7
16419: PUSH
16420: EMPTY
16421: LIST
16422: LIST
16423: PUSH
16424: LD_INT 30
16426: PUSH
16427: LD_INT 8
16429: PUSH
16430: EMPTY
16431: LIST
16432: LIST
16433: PUSH
16434: EMPTY
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: PUSH
16440: EMPTY
16441: LIST
16442: LIST
16443: LIST
16444: PPUSH
16445: CALL_OW 69
16449: ST_TO_ADDR
// if lab then
16450: LD_VAR 0 4
16454: IFFALSE 16532
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
16456: LD_VAR 0 4
16460: PUSH
16461: LD_INT 1
16463: ARRAY
16464: PPUSH
16465: CALL_OW 461
16469: PUSH
16470: LD_INT 2
16472: EQUAL
16473: IFFALSE 16532
// begin for i in ruTech do
16475: LD_ADDR_VAR 0 1
16479: PUSH
16480: LD_EXP 65
16484: PUSH
16485: FOR_IN
16486: IFFALSE 16530
// if CanBeResearched ( lab [ 1 ] , i ) then
16488: LD_VAR 0 4
16492: PUSH
16493: LD_INT 1
16495: ARRAY
16496: PPUSH
16497: LD_VAR 0 1
16501: PPUSH
16502: CALL_OW 430
16506: IFFALSE 16528
// begin ComResearch ( lab [ 1 ] , i ) ;
16508: LD_VAR 0 4
16512: PUSH
16513: LD_INT 1
16515: ARRAY
16516: PPUSH
16517: LD_VAR 0 1
16521: PPUSH
16522: CALL_OW 124
// break ;
16526: GO 16530
// end ;
16528: GO 16485
16530: POP
16531: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
16532: LD_ADDR_VAR 0 14
16536: PUSH
16537: LD_EXP 67
16541: PPUSH
16542: LD_INT 22
16544: PUSH
16545: LD_INT 3
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: PUSH
16552: LD_INT 30
16554: PUSH
16555: LD_INT 3
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: PUSH
16562: LD_INT 50
16564: PUSH
16565: EMPTY
16566: LIST
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: LIST
16572: PPUSH
16573: CALL_OW 70
16577: ST_TO_ADDR
// if fac then
16578: LD_VAR 0 14
16582: IFFALSE 17177
// begin if UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
16584: LD_EXP 64
16588: PPUSH
16589: LD_INT 3
16591: PUSH
16592: LD_INT 60
16594: PUSH
16595: EMPTY
16596: LIST
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: PUSH
16602: LD_INT 3
16604: PUSH
16605: LD_INT 25
16607: PUSH
16608: LD_INT 3
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PUSH
16619: EMPTY
16620: LIST
16621: LIST
16622: PPUSH
16623: CALL_OW 72
16627: IFFALSE 16768
// begin for i in UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
16629: LD_ADDR_VAR 0 1
16633: PUSH
16634: LD_EXP 64
16638: PPUSH
16639: LD_INT 3
16641: PUSH
16642: LD_INT 60
16644: PUSH
16645: EMPTY
16646: LIST
16647: PUSH
16648: EMPTY
16649: LIST
16650: LIST
16651: PUSH
16652: LD_INT 3
16654: PUSH
16655: LD_INT 25
16657: PUSH
16658: LD_INT 3
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PUSH
16665: EMPTY
16666: LIST
16667: LIST
16668: PUSH
16669: EMPTY
16670: LIST
16671: LIST
16672: PPUSH
16673: CALL_OW 72
16677: PUSH
16678: FOR_IN
16679: IFFALSE 16766
// begin SetTag ( i , tMech ) ;
16681: LD_VAR 0 1
16685: PPUSH
16686: LD_INT 7
16688: PPUSH
16689: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
16693: LD_VAR 0 1
16697: PPUSH
16698: CALL_OW 310
16702: PUSH
16703: LD_VAR 0 1
16707: PPUSH
16708: CALL_OW 310
16712: PUSH
16713: LD_VAR 0 14
16717: PUSH
16718: LD_INT 1
16720: ARRAY
16721: NONEQUAL
16722: AND
16723: IFFALSE 16734
// ComExitBuilding ( i ) ;
16725: LD_VAR 0 1
16729: PPUSH
16730: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
16734: LD_VAR 0 1
16738: PPUSH
16739: LD_VAR 0 14
16743: PUSH
16744: LD_INT 1
16746: ARRAY
16747: PPUSH
16748: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
16752: LD_VAR 0 1
16756: PPUSH
16757: LD_INT 3
16759: PPUSH
16760: CALL_OW 183
// end ;
16764: GO 16678
16766: POP
16767: POP
// end ; if UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
16768: LD_EXP 64
16772: PPUSH
16773: LD_INT 25
16775: PUSH
16776: LD_INT 3
16778: PUSH
16779: EMPTY
16780: LIST
16781: LIST
16782: PUSH
16783: LD_INT 3
16785: PUSH
16786: LD_INT 54
16788: PUSH
16789: EMPTY
16790: LIST
16791: PUSH
16792: EMPTY
16793: LIST
16794: LIST
16795: PUSH
16796: LD_INT 120
16798: PUSH
16799: LD_INT 7
16801: PUSH
16802: EMPTY
16803: LIST
16804: LIST
16805: PUSH
16806: LD_INT 50
16808: PUSH
16809: EMPTY
16810: LIST
16811: PUSH
16812: EMPTY
16813: LIST
16814: LIST
16815: LIST
16816: LIST
16817: PPUSH
16818: CALL_OW 72
16822: IFFALSE 16909
// begin for i in UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
16824: LD_ADDR_VAR 0 1
16828: PUSH
16829: LD_EXP 64
16833: PPUSH
16834: LD_INT 25
16836: PUSH
16837: LD_INT 3
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: LD_INT 3
16846: PUSH
16847: LD_INT 54
16849: PUSH
16850: EMPTY
16851: LIST
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 120
16859: PUSH
16860: LD_INT 7
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: LD_INT 50
16869: PUSH
16870: EMPTY
16871: LIST
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: LIST
16877: LIST
16878: PPUSH
16879: CALL_OW 72
16883: PUSH
16884: FOR_IN
16885: IFFALSE 16907
// ComEnterUnit ( i , fac [ 1 ] ) ;
16887: LD_VAR 0 1
16891: PPUSH
16892: LD_VAR 0 14
16896: PUSH
16897: LD_INT 1
16899: ARRAY
16900: PPUSH
16901: CALL_OW 120
16905: GO 16884
16907: POP
16908: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
16909: LD_VAR 0 14
16913: PUSH
16914: LD_INT 1
16916: ARRAY
16917: PPUSH
16918: CALL_OW 461
16922: PUSH
16923: LD_INT 2
16925: EQUAL
16926: IFFALSE 17177
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea2 , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
16928: LD_ADDR_VAR 0 15
16932: PUSH
16933: LD_EXP 67
16937: PPUSH
16938: LD_INT 2
16940: PUSH
16941: LD_INT 30
16943: PUSH
16944: LD_INT 32
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: LD_INT 30
16953: PUSH
16954: LD_INT 33
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: LIST
16965: PUSH
16966: LD_INT 35
16968: PUSH
16969: LD_INT 0
16971: PUSH
16972: EMPTY
16973: LIST
16974: LIST
16975: PUSH
16976: EMPTY
16977: LIST
16978: LIST
16979: PPUSH
16980: CALL_OW 70
16984: ST_TO_ADDR
// if emptyTowers then
16985: LD_VAR 0 15
16989: IFFALSE 17039
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea2 ) ;
16991: LD_ADDR_VAR 0 16
16995: PUSH
16996: LD_VAR 0 15
17000: PUSH
17001: LD_INT 1
17003: ARRAY
17004: PPUSH
17005: LD_EXP 67
17009: PPUSH
17010: CALL 64783 0 2
17014: ST_TO_ADDR
// if weapon then
17015: LD_VAR 0 16
17019: IFFALSE 17039
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
17021: LD_VAR 0 15
17025: PUSH
17026: LD_INT 1
17028: ARRAY
17029: PPUSH
17030: LD_VAR 0 16
17034: PPUSH
17035: CALL_OW 148
// end ; if ruConstructList2 then
17039: LD_EXP 71
17043: IFFALSE 17177
// if CanBeConstructed ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) then
17045: LD_VAR 0 14
17049: PUSH
17050: LD_INT 1
17052: ARRAY
17053: PPUSH
17054: LD_EXP 71
17058: PUSH
17059: LD_INT 1
17061: ARRAY
17062: PUSH
17063: LD_INT 1
17065: ARRAY
17066: PPUSH
17067: LD_EXP 71
17071: PUSH
17072: LD_INT 1
17074: ARRAY
17075: PUSH
17076: LD_INT 2
17078: ARRAY
17079: PPUSH
17080: LD_EXP 71
17084: PUSH
17085: LD_INT 1
17087: ARRAY
17088: PUSH
17089: LD_INT 3
17091: ARRAY
17092: PPUSH
17093: LD_EXP 71
17097: PUSH
17098: LD_INT 1
17100: ARRAY
17101: PUSH
17102: LD_INT 4
17104: ARRAY
17105: PPUSH
17106: CALL_OW 448
17110: IFFALSE 17177
// ComConstruct ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) ;
17112: LD_VAR 0 14
17116: PUSH
17117: LD_INT 1
17119: ARRAY
17120: PPUSH
17121: LD_EXP 71
17125: PUSH
17126: LD_INT 1
17128: ARRAY
17129: PUSH
17130: LD_INT 1
17132: ARRAY
17133: PPUSH
17134: LD_EXP 71
17138: PUSH
17139: LD_INT 1
17141: ARRAY
17142: PUSH
17143: LD_INT 2
17145: ARRAY
17146: PPUSH
17147: LD_EXP 71
17151: PUSH
17152: LD_INT 1
17154: ARRAY
17155: PUSH
17156: LD_INT 3
17158: ARRAY
17159: PPUSH
17160: LD_EXP 71
17164: PUSH
17165: LD_INT 1
17167: ARRAY
17168: PUSH
17169: LD_INT 4
17171: ARRAY
17172: PPUSH
17173: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea2 , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17177: LD_ADDR_VAR 0 2
17181: PUSH
17182: LD_EXP 67
17186: PPUSH
17187: LD_INT 21
17189: PUSH
17190: LD_INT 3
17192: PUSH
17193: EMPTY
17194: LIST
17195: LIST
17196: PUSH
17197: LD_INT 3
17199: PUSH
17200: LD_INT 57
17202: PUSH
17203: EMPTY
17204: LIST
17205: PUSH
17206: EMPTY
17207: LIST
17208: LIST
17209: PUSH
17210: LD_INT 3
17212: PUSH
17213: LD_INT 24
17215: PUSH
17216: LD_INT 1000
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: EMPTY
17228: LIST
17229: LIST
17230: LIST
17231: PPUSH
17232: CALL_OW 70
17236: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea2 ) ;
17237: LD_ADDR_VAR 0 8
17241: PUSH
17242: LD_EXP 73
17246: PPUSH
17247: CALL_OW 435
17251: ST_TO_ADDR
// sci := UnitFilter ( ruForces2 , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
17252: LD_ADDR_VAR 0 9
17256: PUSH
17257: LD_EXP 60
17261: PPUSH
17262: LD_INT 25
17264: PUSH
17265: LD_INT 4
17267: PUSH
17268: EMPTY
17269: LIST
17270: LIST
17271: PUSH
17272: LD_INT 50
17274: PUSH
17275: EMPTY
17276: LIST
17277: PUSH
17278: EMPTY
17279: LIST
17280: LIST
17281: PPUSH
17282: CALL_OW 72
17286: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea2 , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
17287: LD_ADDR_VAR 0 4
17291: PUSH
17292: LD_EXP 67
17296: PPUSH
17297: LD_INT 2
17299: PUSH
17300: LD_INT 30
17302: PUSH
17303: LD_INT 6
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: LD_INT 30
17312: PUSH
17313: LD_INT 7
17315: PUSH
17316: EMPTY
17317: LIST
17318: LIST
17319: PUSH
17320: LD_INT 30
17322: PUSH
17323: LD_INT 8
17325: PUSH
17326: EMPTY
17327: LIST
17328: LIST
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: LIST
17334: LIST
17335: PPUSH
17336: CALL_OW 70
17340: ST_TO_ADDR
// if sci then
17341: LD_VAR 0 9
17345: IFFALSE 17576
// begin hurtUnits := UnitFilter ( ruForces2 , [ [ f_inarea , ruBaseArea2 ] , [ f_tag , tHeal ] ] ) ;
17347: LD_ADDR_VAR 0 11
17351: PUSH
17352: LD_EXP 60
17356: PPUSH
17357: LD_INT 95
17359: PUSH
17360: LD_EXP 67
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PUSH
17369: LD_INT 120
17371: PUSH
17372: LD_INT 1
17374: PUSH
17375: EMPTY
17376: LIST
17377: LIST
17378: PUSH
17379: EMPTY
17380: LIST
17381: LIST
17382: PPUSH
17383: CALL_OW 72
17387: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
17388: LD_ADDR_VAR 0 4
17392: PUSH
17393: LD_INT 22
17395: PUSH
17396: LD_INT 3
17398: PUSH
17399: EMPTY
17400: LIST
17401: LIST
17402: PUSH
17403: LD_INT 50
17405: PUSH
17406: EMPTY
17407: LIST
17408: PUSH
17409: LD_INT 2
17411: PUSH
17412: LD_INT 30
17414: PUSH
17415: LD_INT 6
17417: PUSH
17418: EMPTY
17419: LIST
17420: LIST
17421: PUSH
17422: LD_INT 30
17424: PUSH
17425: LD_INT 7
17427: PUSH
17428: EMPTY
17429: LIST
17430: LIST
17431: PUSH
17432: LD_INT 30
17434: PUSH
17435: LD_INT 8
17437: PUSH
17438: EMPTY
17439: LIST
17440: LIST
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: LIST
17446: LIST
17447: PUSH
17448: EMPTY
17449: LIST
17450: LIST
17451: LIST
17452: PPUSH
17453: CALL_OW 69
17457: ST_TO_ADDR
// if hurtUnits then
17458: LD_VAR 0 11
17462: IFFALSE 17523
// begin for i in sci do
17464: LD_ADDR_VAR 0 1
17468: PUSH
17469: LD_VAR 0 9
17473: PUSH
17474: FOR_IN
17475: IFFALSE 17519
// if IsInUnit ( i ) then
17477: LD_VAR 0 1
17481: PPUSH
17482: CALL_OW 310
17486: IFFALSE 17499
// ComExitBuilding ( i ) else
17488: LD_VAR 0 1
17492: PPUSH
17493: CALL_OW 122
17497: GO 17517
// ComHeal ( i , hurtUnits [ 1 ] ) ;
17499: LD_VAR 0 1
17503: PPUSH
17504: LD_VAR 0 11
17508: PUSH
17509: LD_INT 1
17511: ARRAY
17512: PPUSH
17513: CALL_OW 128
17517: GO 17474
17519: POP
17520: POP
// end else
17521: GO 17576
// if lab then
17523: LD_VAR 0 4
17527: IFFALSE 17576
// begin for i in sci do
17529: LD_ADDR_VAR 0 1
17533: PUSH
17534: LD_VAR 0 9
17538: PUSH
17539: FOR_IN
17540: IFFALSE 17574
// if not IsInUnit ( i ) then
17542: LD_VAR 0 1
17546: PPUSH
17547: CALL_OW 310
17551: NOT
17552: IFFALSE 17572
// ComEnterUnit ( i , lab [ 1 ] ) ;
17554: LD_VAR 0 1
17558: PPUSH
17559: LD_VAR 0 4
17563: PUSH
17564: LD_INT 1
17566: ARRAY
17567: PPUSH
17568: CALL_OW 120
17572: GO 17539
17574: POP
17575: POP
// end ; end ; eng := UnitFilter ( ruForces2 , [ f_class , 2 ] ) ;
17576: LD_ADDR_VAR 0 5
17580: PUSH
17581: LD_EXP 60
17585: PPUSH
17586: LD_INT 25
17588: PUSH
17589: LD_INT 2
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PPUSH
17596: CALL_OW 72
17600: ST_TO_ADDR
// if eng then
17601: LD_VAR 0 5
17605: IFFALSE 18390
// begin for i in eng do
17607: LD_ADDR_VAR 0 1
17611: PUSH
17612: LD_VAR 0 5
17616: PUSH
17617: FOR_IN
17618: IFFALSE 18388
// begin tag := GetTag ( i ) ;
17620: LD_ADDR_VAR 0 6
17624: PUSH
17625: LD_VAR 0 1
17629: PPUSH
17630: CALL_OW 110
17634: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
17635: LD_VAR 0 1
17639: PPUSH
17640: CALL_OW 256
17644: PUSH
17645: LD_INT 800
17647: LESS
17648: PUSH
17649: LD_VAR 0 6
17653: PUSH
17654: LD_INT 1
17656: NONEQUAL
17657: AND
17658: IFFALSE 17708
// begin SetTag ( i , tHeal ) ;
17660: LD_VAR 0 1
17664: PPUSH
17665: LD_INT 1
17667: PPUSH
17668: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
17672: LD_VAR 0 1
17676: PPUSH
17677: LD_EXP 75
17681: PUSH
17682: LD_INT 1
17684: ARRAY
17685: PPUSH
17686: LD_EXP 75
17690: PUSH
17691: LD_INT 2
17693: ARRAY
17694: PPUSH
17695: CALL_OW 111
// AddComHold ( i ) ;
17699: LD_VAR 0 1
17703: PPUSH
17704: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
17708: LD_VAR 0 6
17712: PUSH
17713: LD_INT 1
17715: EQUAL
17716: PUSH
17717: LD_VAR 0 1
17721: PPUSH
17722: CALL_OW 256
17726: PUSH
17727: LD_INT 1000
17729: EQUAL
17730: AND
17731: IFFALSE 17745
// SetTag ( i , 0 ) ;
17733: LD_VAR 0 1
17737: PPUSH
17738: LD_INT 0
17740: PPUSH
17741: CALL_OW 109
// if not tag then
17745: LD_VAR 0 6
17749: NOT
17750: IFFALSE 17922
// begin undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
17752: LD_ADDR_VAR 0 3
17756: PUSH
17757: LD_EXP 67
17761: PPUSH
17762: LD_INT 57
17764: PUSH
17765: EMPTY
17766: LIST
17767: PPUSH
17768: CALL_OW 70
17772: ST_TO_ADDR
// if undone then
17773: LD_VAR 0 3
17777: IFFALSE 17799
// begin ComComplete ( i , undone [ 1 ] ) ;
17779: LD_VAR 0 1
17783: PPUSH
17784: LD_VAR 0 3
17788: PUSH
17789: LD_INT 1
17791: ARRAY
17792: PPUSH
17793: CALL 62636 0 2
// continue ;
17797: GO 17617
// end ; if cr or tmp or Count ( ruBuildings2 ) then
17799: LD_VAR 0 8
17803: PUSH
17804: LD_VAR 0 2
17808: OR
17809: PUSH
17810: LD_EXP 77
17814: PPUSH
17815: CALL 56538 0 1
17819: OR
17820: IFFALSE 17896
// begin if IsInUnit ( i ) then
17822: LD_VAR 0 1
17826: PPUSH
17827: CALL_OW 310
17831: IFFALSE 17842
// ComExitBuilding ( i ) ;
17833: LD_VAR 0 1
17837: PPUSH
17838: CALL_OW 122
// if tmp then
17842: LD_VAR 0 2
17846: IFFALSE 17862
// SetTag ( i , tRepair ) else
17848: LD_VAR 0 1
17852: PPUSH
17853: LD_INT 3
17855: PPUSH
17856: CALL_OW 109
17860: GO 17894
// if cr then
17862: LD_VAR 0 8
17866: IFFALSE 17882
// SetTag ( i , tCrates ) else
17868: LD_VAR 0 1
17872: PPUSH
17873: LD_INT 2
17875: PPUSH
17876: CALL_OW 109
17880: GO 17894
// SetTag ( i , tBuild ) ;
17882: LD_VAR 0 1
17886: PPUSH
17887: LD_INT 5
17889: PPUSH
17890: CALL_OW 109
// end else
17894: GO 17922
// if not IsInUnit ( i ) then
17896: LD_VAR 0 1
17900: PPUSH
17901: CALL_OW 310
17905: NOT
17906: IFFALSE 17922
// ComEnterUnit ( i , ruBase2 ) ;
17908: LD_VAR 0 1
17912: PPUSH
17913: LD_EXP 69
17917: PPUSH
17918: CALL_OW 120
// end ; if tag = tRepair then
17922: LD_VAR 0 6
17926: PUSH
17927: LD_INT 3
17929: EQUAL
17930: IFFALSE 18036
// begin if IsInUnit ( i ) then
17932: LD_VAR 0 1
17936: PPUSH
17937: CALL_OW 310
17941: IFFALSE 17954
// begin ComExitBuilding ( i ) ;
17943: LD_VAR 0 1
17947: PPUSH
17948: CALL_OW 122
// continue ;
17952: GO 17617
// end ; if not tmp then
17954: LD_VAR 0 2
17958: NOT
17959: IFFALSE 17975
// begin SetTag ( i , 0 ) ;
17961: LD_VAR 0 1
17965: PPUSH
17966: LD_INT 0
17968: PPUSH
17969: CALL_OW 109
// continue ;
17973: GO 17617
// end ; if not HasTask ( i ) then
17975: LD_VAR 0 1
17979: PPUSH
17980: CALL_OW 314
17984: NOT
17985: IFFALSE 18005
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
17987: LD_VAR 0 1
17991: PPUSH
17992: LD_VAR 0 2
17996: PUSH
17997: LD_INT 1
17999: ARRAY
18000: PPUSH
18001: CALL_OW 130
// if not IsInArea ( i , ruBaseArea2 ) then
18005: LD_VAR 0 1
18009: PPUSH
18010: LD_EXP 67
18014: PPUSH
18015: CALL_OW 308
18019: NOT
18020: IFFALSE 18036
// ComMoveToArea ( i , ruBaseArea2 ) ;
18022: LD_VAR 0 1
18026: PPUSH
18027: LD_EXP 67
18031: PPUSH
18032: CALL_OW 113
// end ; if tag = tBuild then
18036: LD_VAR 0 6
18040: PUSH
18041: LD_INT 5
18043: EQUAL
18044: IFFALSE 18243
// begin if IsInUnit ( i ) then
18046: LD_VAR 0 1
18050: PPUSH
18051: CALL_OW 310
18055: IFFALSE 18068
// begin ComExitBuilding ( i ) ;
18057: LD_VAR 0 1
18061: PPUSH
18062: CALL_OW 122
// continue ;
18066: GO 17617
// end ; if not Count ( ruBuildings2 ) then
18068: LD_EXP 77
18072: PPUSH
18073: CALL 56538 0 1
18077: NOT
18078: IFFALSE 18096
// begin SetTag ( i , 0 ) ;
18080: LD_VAR 0 1
18084: PPUSH
18085: LD_INT 0
18087: PPUSH
18088: CALL_OW 109
// continue ;
18092: GO 17617
// end else
18094: GO 18135
// if not CanBeBuiltOnlyResources ( ruBase2 , ruBuildings2 [ 1 ] [ 1 ] ) then
18096: LD_EXP 69
18100: PPUSH
18101: LD_EXP 77
18105: PUSH
18106: LD_INT 1
18108: ARRAY
18109: PUSH
18110: LD_INT 1
18112: ARRAY
18113: PPUSH
18114: CALL 25296 0 2
18118: NOT
18119: IFFALSE 18135
// begin SetTag ( i , 0 ) ;
18121: LD_VAR 0 1
18125: PPUSH
18126: LD_INT 0
18128: PPUSH
18129: CALL_OW 109
// continue ;
18133: GO 17617
// end ; undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
18135: LD_ADDR_VAR 0 3
18139: PUSH
18140: LD_EXP 67
18144: PPUSH
18145: LD_INT 57
18147: PUSH
18148: EMPTY
18149: LIST
18150: PPUSH
18151: CALL_OW 70
18155: ST_TO_ADDR
// if undone then
18156: LD_VAR 0 3
18160: IFFALSE 18182
// begin ComComplete ( i , undone [ 1 ] ) ;
18162: LD_VAR 0 1
18166: PPUSH
18167: LD_VAR 0 3
18171: PUSH
18172: LD_INT 1
18174: ARRAY
18175: PPUSH
18176: CALL 62636 0 2
// continue ;
18180: GO 17617
// end ; ComBuild ( i , ruBuildings2 [ 1 ] [ 1 ] , ruBuildings2 [ 1 ] [ 2 ] , ruBuildings2 [ 1 ] [ 3 ] , ruBuildings2 [ 1 ] [ 4 ] ) ;
18182: LD_VAR 0 1
18186: PPUSH
18187: LD_EXP 77
18191: PUSH
18192: LD_INT 1
18194: ARRAY
18195: PUSH
18196: LD_INT 1
18198: ARRAY
18199: PPUSH
18200: LD_EXP 77
18204: PUSH
18205: LD_INT 1
18207: ARRAY
18208: PUSH
18209: LD_INT 2
18211: ARRAY
18212: PPUSH
18213: LD_EXP 77
18217: PUSH
18218: LD_INT 1
18220: ARRAY
18221: PUSH
18222: LD_INT 3
18224: ARRAY
18225: PPUSH
18226: LD_EXP 77
18230: PUSH
18231: LD_INT 1
18233: ARRAY
18234: PUSH
18235: LD_INT 4
18237: ARRAY
18238: PPUSH
18239: CALL_OW 145
// end ; if tag = tCrates then
18243: LD_VAR 0 6
18247: PUSH
18248: LD_INT 2
18250: EQUAL
18251: IFFALSE 18386
// begin if IsInUnit ( i ) then
18253: LD_VAR 0 1
18257: PPUSH
18258: CALL_OW 310
18262: IFFALSE 18275
// begin ComExitBuilding ( i ) ;
18264: LD_VAR 0 1
18268: PPUSH
18269: CALL_OW 122
// continue ;
18273: GO 17617
// end ; if not cr then
18275: LD_VAR 0 8
18279: NOT
18280: IFFALSE 18296
// begin SetTag ( i , 0 ) ;
18282: LD_VAR 0 1
18286: PPUSH
18287: LD_INT 0
18289: PPUSH
18290: CALL_OW 109
// continue ;
18294: GO 17617
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
18296: LD_VAR 0 1
18300: PPUSH
18301: CALL_OW 314
18305: NOT
18306: PUSH
18307: LD_INT 81
18309: PUSH
18310: LD_INT 3
18312: PUSH
18313: EMPTY
18314: LIST
18315: LIST
18316: PUSH
18317: LD_INT 92
18319: PUSH
18320: LD_VAR 0 8
18324: PUSH
18325: LD_INT 1
18327: ARRAY
18328: PUSH
18329: LD_VAR 0 8
18333: PUSH
18334: LD_INT 2
18336: ARRAY
18337: PUSH
18338: LD_INT 12
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: LIST
18345: LIST
18346: PUSH
18347: EMPTY
18348: LIST
18349: LIST
18350: PPUSH
18351: CALL_OW 69
18355: NOT
18356: AND
18357: IFFALSE 18386
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
18359: LD_VAR 0 1
18363: PPUSH
18364: LD_VAR 0 8
18368: PUSH
18369: LD_INT 1
18371: ARRAY
18372: PPUSH
18373: LD_VAR 0 8
18377: PUSH
18378: LD_INT 2
18380: ARRAY
18381: PPUSH
18382: CALL_OW 117
// end ; end ;
18386: GO 17617
18388: POP
18389: POP
// end ; sol := UnitFilter ( ruForces2 , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander2 ;
18390: LD_ADDR_VAR 0 10
18394: PUSH
18395: LD_EXP 60
18399: PPUSH
18400: LD_INT 2
18402: PUSH
18403: LD_INT 25
18405: PUSH
18406: LD_INT 1
18408: PUSH
18409: EMPTY
18410: LIST
18411: LIST
18412: PUSH
18413: LD_INT 25
18415: PUSH
18416: LD_INT 9
18418: PUSH
18419: EMPTY
18420: LIST
18421: LIST
18422: PUSH
18423: EMPTY
18424: LIST
18425: LIST
18426: LIST
18427: PUSH
18428: LD_INT 50
18430: PUSH
18431: EMPTY
18432: LIST
18433: PUSH
18434: EMPTY
18435: LIST
18436: LIST
18437: PPUSH
18438: CALL_OW 72
18442: PUSH
18443: LD_EXP 62
18447: UNION
18448: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
18449: LD_ADDR_VAR 0 12
18453: PUSH
18454: LD_EXP 67
18458: PPUSH
18459: LD_INT 81
18461: PUSH
18462: LD_INT 3
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PPUSH
18469: CALL_OW 70
18473: ST_TO_ADDR
// if sol then
18474: LD_VAR 0 10
18478: IFFALSE 19002
// begin if enemyInBase then
18480: LD_VAR 0 12
18484: IFFALSE 18627
// begin for i in sol do
18486: LD_ADDR_VAR 0 1
18490: PUSH
18491: LD_VAR 0 10
18495: PUSH
18496: FOR_IN
18497: IFFALSE 18623
// begin tw := IsInUnit ( i ) ;
18499: LD_ADDR_VAR 0 7
18503: PUSH
18504: LD_VAR 0 1
18508: PPUSH
18509: CALL_OW 310
18513: ST_TO_ADDR
// if tw then
18514: LD_VAR 0 7
18518: IFFALSE 18597
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
18520: LD_VAR 0 7
18524: PUSH
18525: LD_INT 22
18527: PUSH
18528: LD_INT 3
18530: PUSH
18531: EMPTY
18532: LIST
18533: LIST
18534: PUSH
18535: LD_INT 101
18537: PUSH
18538: LD_INT 1
18540: PUSH
18541: EMPTY
18542: LIST
18543: LIST
18544: PUSH
18545: LD_INT 2
18547: PUSH
18548: LD_INT 30
18550: PUSH
18551: LD_INT 32
18553: PUSH
18554: EMPTY
18555: LIST
18556: LIST
18557: PUSH
18558: LD_INT 30
18560: PUSH
18561: LD_INT 31
18563: PUSH
18564: EMPTY
18565: LIST
18566: LIST
18567: PUSH
18568: EMPTY
18569: LIST
18570: LIST
18571: LIST
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: LIST
18577: PPUSH
18578: CALL_OW 69
18582: IN
18583: NOT
18584: IFFALSE 18595
// ComExitBuilding ( i ) ;
18586: LD_VAR 0 1
18590: PPUSH
18591: CALL_OW 122
// end else
18595: GO 18621
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
18597: LD_VAR 0 1
18601: PPUSH
18602: LD_VAR 0 12
18606: PPUSH
18607: LD_VAR 0 1
18611: PPUSH
18612: CALL_OW 74
18616: PPUSH
18617: CALL_OW 115
// end ;
18621: GO 18496
18623: POP
18624: POP
// end else
18625: GO 19002
// begin empty := FilterUnitsInArea ( ruBaseArea2 , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
18627: LD_ADDR_VAR 0 13
18631: PUSH
18632: LD_EXP 67
18636: PPUSH
18637: LD_INT 3
18639: PUSH
18640: LD_INT 62
18642: PUSH
18643: EMPTY
18644: LIST
18645: PUSH
18646: EMPTY
18647: LIST
18648: LIST
18649: PUSH
18650: LD_INT 2
18652: PUSH
18653: LD_INT 30
18655: PUSH
18656: LD_INT 32
18658: PUSH
18659: EMPTY
18660: LIST
18661: LIST
18662: PUSH
18663: LD_INT 30
18665: PUSH
18666: LD_INT 4
18668: PUSH
18669: EMPTY
18670: LIST
18671: LIST
18672: PUSH
18673: LD_INT 30
18675: PUSH
18676: LD_INT 5
18678: PUSH
18679: EMPTY
18680: LIST
18681: LIST
18682: PUSH
18683: LD_INT 30
18685: PUSH
18686: LD_INT 31
18688: PUSH
18689: EMPTY
18690: LIST
18691: LIST
18692: PUSH
18693: EMPTY
18694: LIST
18695: LIST
18696: LIST
18697: LIST
18698: LIST
18699: PUSH
18700: EMPTY
18701: LIST
18702: LIST
18703: PPUSH
18704: CALL_OW 70
18708: ST_TO_ADDR
// if empty then
18709: LD_VAR 0 13
18713: IFFALSE 18730
// empty := ReverseArray ( empty ) ;
18715: LD_ADDR_VAR 0 13
18719: PUSH
18720: LD_VAR 0 13
18724: PPUSH
18725: CALL 87414 0 1
18729: ST_TO_ADDR
// for i in sol do
18730: LD_ADDR_VAR 0 1
18734: PUSH
18735: LD_VAR 0 10
18739: PUSH
18740: FOR_IN
18741: IFFALSE 19000
// begin tag := GetTag ( i ) ;
18743: LD_ADDR_VAR 0 6
18747: PUSH
18748: LD_VAR 0 1
18752: PPUSH
18753: CALL_OW 110
18757: ST_TO_ADDR
// if tag = tMech then
18758: LD_VAR 0 6
18762: PUSH
18763: LD_INT 7
18765: EQUAL
18766: IFFALSE 18770
// continue ;
18768: GO 18740
// if GetLives ( i ) < 1000 and tag <> tHeal then
18770: LD_VAR 0 1
18774: PPUSH
18775: CALL_OW 256
18779: PUSH
18780: LD_INT 1000
18782: LESS
18783: PUSH
18784: LD_VAR 0 6
18788: PUSH
18789: LD_INT 1
18791: NONEQUAL
18792: AND
18793: IFFALSE 18845
// begin SetTag ( i , tHeal ) ;
18795: LD_VAR 0 1
18799: PPUSH
18800: LD_INT 1
18802: PPUSH
18803: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
18807: LD_VAR 0 1
18811: PPUSH
18812: LD_EXP 75
18816: PUSH
18817: LD_INT 1
18819: ARRAY
18820: PPUSH
18821: LD_EXP 75
18825: PUSH
18826: LD_INT 2
18828: ARRAY
18829: PPUSH
18830: CALL_OW 111
// AddComHold ( i ) ;
18834: LD_VAR 0 1
18838: PPUSH
18839: CALL_OW 200
// continue ;
18843: GO 18740
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
18845: LD_VAR 0 1
18849: PPUSH
18850: CALL_OW 256
18854: PUSH
18855: LD_INT 1000
18857: EQUAL
18858: PUSH
18859: LD_VAR 0 6
18863: PUSH
18864: LD_INT 1
18866: EQUAL
18867: AND
18868: IFFALSE 18884
// begin SetTag ( i , 0 ) ;
18870: LD_VAR 0 1
18874: PPUSH
18875: LD_INT 0
18877: PPUSH
18878: CALL_OW 109
// continue ;
18882: GO 18740
// end ; if HasTask ( i ) then
18884: LD_VAR 0 1
18888: PPUSH
18889: CALL_OW 314
18893: IFFALSE 18897
// continue ;
18895: GO 18740
// if not IsInUnit ( i ) and not tag and empty then
18897: LD_VAR 0 1
18901: PPUSH
18902: CALL_OW 310
18906: NOT
18907: PUSH
18908: LD_VAR 0 6
18912: NOT
18913: AND
18914: PUSH
18915: LD_VAR 0 13
18919: AND
18920: IFFALSE 18998
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
18922: LD_VAR 0 1
18926: PPUSH
18927: LD_VAR 0 13
18931: PUSH
18932: LD_INT 1
18934: ARRAY
18935: PPUSH
18936: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
18940: LD_VAR 0 13
18944: PUSH
18945: LD_INT 1
18947: ARRAY
18948: PPUSH
18949: CALL_OW 266
18953: PUSH
18954: LD_INT 5
18956: EQUAL
18957: PUSH
18958: LD_INT 50
18960: PPUSH
18961: CALL_OW 13
18965: AND
18966: IFFALSE 18980
// AddComChangeProfession ( i , class_bazooker ) ;
18968: LD_VAR 0 1
18972: PPUSH
18973: LD_INT 9
18975: PPUSH
18976: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
18980: LD_ADDR_VAR 0 13
18984: PUSH
18985: LD_VAR 0 13
18989: PPUSH
18990: LD_INT 1
18992: PPUSH
18993: CALL_OW 3
18997: ST_TO_ADDR
// end ; end ;
18998: GO 18740
19000: POP
19001: POP
// end ; end ; end ;
19002: PPOPN 16
19004: END
// every 0 0$1 trigger ruTanks and ruActiveAttacks do var i , mech , enemy ;
19005: LD_EXP 79
19009: PUSH
19010: LD_EXP 22
19014: AND
19015: IFFALSE 19582
19017: GO 19019
19019: DISABLE
19020: LD_INT 0
19022: PPUSH
19023: PPUSH
19024: PPUSH
// begin enable ;
19025: ENABLE
// if not ruTanks then
19026: LD_EXP 79
19030: NOT
19031: IFFALSE 19035
// exit ;
19033: GO 19582
// for i in ruTanks do
19035: LD_ADDR_VAR 0 1
19039: PUSH
19040: LD_EXP 79
19044: PUSH
19045: FOR_IN
19046: IFFALSE 19580
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19048: LD_VAR 0 1
19052: PPUSH
19053: CALL_OW 302
19057: NOT
19058: PUSH
19059: LD_VAR 0 1
19063: PPUSH
19064: CALL_OW 255
19068: PUSH
19069: LD_INT 3
19071: NONEQUAL
19072: OR
19073: IFFALSE 19093
// begin ruTanks := ruTanks diff i ;
19075: LD_ADDR_EXP 79
19079: PUSH
19080: LD_EXP 79
19084: PUSH
19085: LD_VAR 0 1
19089: DIFF
19090: ST_TO_ADDR
// continue ;
19091: GO 19045
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19093: LD_VAR 0 1
19097: PPUSH
19098: CALL_OW 110
19102: NOT
19103: PUSH
19104: LD_VAR 0 1
19108: PPUSH
19109: CALL_OW 110
19113: PUSH
19114: LD_INT 0
19116: EQUAL
19117: OR
19118: IFFALSE 19291
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase ) then
19120: LD_VAR 0 1
19124: PPUSH
19125: CALL_OW 262
19129: PUSH
19130: LD_INT 1
19132: EQUAL
19133: PUSH
19134: LD_VAR 0 1
19138: PPUSH
19139: CALL_OW 261
19143: PUSH
19144: LD_INT 50
19146: LESS
19147: AND
19148: PUSH
19149: LD_EXP 68
19153: PPUSH
19154: CALL_OW 302
19158: AND
19159: IFFALSE 19246
// begin ComMoveXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) ;
19161: LD_VAR 0 1
19165: PPUSH
19166: LD_EXP 68
19170: PPUSH
19171: CALL_OW 250
19175: PPUSH
19176: LD_EXP 68
19180: PPUSH
19181: CALL_OW 251
19185: PPUSH
19186: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19190: LD_INT 35
19192: PPUSH
19193: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) < 6 ;
19197: LD_VAR 0 1
19201: PPUSH
19202: LD_EXP 68
19206: PPUSH
19207: CALL_OW 250
19211: PPUSH
19212: LD_EXP 68
19216: PPUSH
19217: CALL_OW 251
19221: PPUSH
19222: CALL_OW 297
19226: PUSH
19227: LD_INT 6
19229: LESS
19230: IFFALSE 19190
// SetFuel ( i , 100 ) ;
19232: LD_VAR 0 1
19236: PPUSH
19237: LD_INT 100
19239: PPUSH
19240: CALL_OW 240
// end else
19244: GO 19291
// if not IsInArea ( i , ruParkingArea ) then
19246: LD_VAR 0 1
19250: PPUSH
19251: LD_EXP 82
19255: PPUSH
19256: CALL_OW 308
19260: NOT
19261: IFFALSE 19279
// ComMoveToArea ( i , ruParkingArea ) else
19263: LD_VAR 0 1
19267: PPUSH
19268: LD_EXP 82
19272: PPUSH
19273: CALL_OW 113
19277: GO 19291
// SetTag ( i , tParking ) ;
19279: LD_VAR 0 1
19283: PPUSH
19284: LD_INT 12
19286: PPUSH
19287: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19291: LD_VAR 0 1
19295: PPUSH
19296: CALL_OW 110
19300: PUSH
19301: LD_INT 12
19303: EQUAL
19304: IFFALSE 19434
// begin if GetLives ( i ) < 650 then
19306: LD_VAR 0 1
19310: PPUSH
19311: CALL_OW 256
19315: PUSH
19316: LD_INT 650
19318: LESS
19319: IFFALSE 19411
// begin if not IsDrivenBy ( i ) then
19321: LD_VAR 0 1
19325: PPUSH
19326: CALL_OW 311
19330: NOT
19331: IFFALSE 19335
// continue ;
19333: GO 19045
// mech := IsDrivenBy ( i ) ;
19335: LD_ADDR_VAR 0 2
19339: PUSH
19340: LD_VAR 0 1
19344: PPUSH
19345: CALL_OW 311
19349: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19350: LD_VAR 0 2
19354: PPUSH
19355: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19359: LD_VAR 0 2
19363: PPUSH
19364: LD_VAR 0 1
19368: PPUSH
19369: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19373: LD_INT 35
19375: PPUSH
19376: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19380: LD_VAR 0 1
19384: PPUSH
19385: CALL_OW 256
19389: PUSH
19390: LD_INT 1000
19392: EQUAL
19393: IFFALSE 19373
// ComEnterUnit ( mech , i ) ;
19395: LD_VAR 0 2
19399: PPUSH
19400: LD_VAR 0 1
19404: PPUSH
19405: CALL_OW 120
// end else
19409: GO 19434
// if IsDrivenBy ( i ) then
19411: LD_VAR 0 1
19415: PPUSH
19416: CALL_OW 311
19420: IFFALSE 19434
// SetTag ( i , tAttack ) ;
19422: LD_VAR 0 1
19426: PPUSH
19427: LD_INT 13
19429: PPUSH
19430: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
19434: LD_VAR 0 1
19438: PPUSH
19439: CALL_OW 110
19443: PUSH
19444: LD_INT 13
19446: EQUAL
19447: IFFALSE 19578
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
19449: LD_ADDR_VAR 0 3
19453: PUSH
19454: LD_EXP 66
19458: PPUSH
19459: LD_INT 81
19461: PUSH
19462: LD_INT 3
19464: PUSH
19465: EMPTY
19466: LIST
19467: LIST
19468: PPUSH
19469: CALL_OW 70
19473: ST_TO_ADDR
// if GetLives ( i ) < 650 then
19474: LD_VAR 0 1
19478: PPUSH
19479: CALL_OW 256
19483: PUSH
19484: LD_INT 650
19486: LESS
19487: IFFALSE 19512
// begin ComStop ( i ) ;
19489: LD_VAR 0 1
19493: PPUSH
19494: CALL_OW 141
// SetTag ( i , 0 ) ;
19498: LD_VAR 0 1
19502: PPUSH
19503: LD_INT 0
19505: PPUSH
19506: CALL_OW 109
// continue ;
19510: GO 19045
// end ; if enemy then
19512: LD_VAR 0 3
19516: IFFALSE 19556
// begin if not HasTask ( i ) then
19518: LD_VAR 0 1
19522: PPUSH
19523: CALL_OW 314
19527: NOT
19528: IFFALSE 19554
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
19530: LD_VAR 0 1
19534: PPUSH
19535: LD_VAR 0 3
19539: PPUSH
19540: LD_VAR 0 1
19544: PPUSH
19545: CALL_OW 74
19549: PPUSH
19550: CALL_OW 115
// end else
19554: GO 19578
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
19556: LD_VAR 0 1
19560: PPUSH
19561: LD_INT 105
19563: PUSH
19564: LD_INT 35
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: PUSH
19571: EMPTY
19572: LIST
19573: PPUSH
19574: CALL 94742 0 2
// end ; end ;
19578: GO 19045
19580: POP
19581: POP
// end ;
19582: PPOPN 3
19584: END
// every 0 0$1 trigger ruTanks2 and ruActiveAttacks do var i , mech , enemy ;
19585: LD_EXP 80
19589: PUSH
19590: LD_EXP 22
19594: AND
19595: IFFALSE 20162
19597: GO 19599
19599: DISABLE
19600: LD_INT 0
19602: PPUSH
19603: PPUSH
19604: PPUSH
// begin enable ;
19605: ENABLE
// if not ruTanks2 then
19606: LD_EXP 80
19610: NOT
19611: IFFALSE 19615
// exit ;
19613: GO 20162
// for i in ruTanks2 do
19615: LD_ADDR_VAR 0 1
19619: PUSH
19620: LD_EXP 80
19624: PUSH
19625: FOR_IN
19626: IFFALSE 20160
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19628: LD_VAR 0 1
19632: PPUSH
19633: CALL_OW 302
19637: NOT
19638: PUSH
19639: LD_VAR 0 1
19643: PPUSH
19644: CALL_OW 255
19648: PUSH
19649: LD_INT 3
19651: NONEQUAL
19652: OR
19653: IFFALSE 19673
// begin ruTanks := ruTanks diff i ;
19655: LD_ADDR_EXP 79
19659: PUSH
19660: LD_EXP 79
19664: PUSH
19665: LD_VAR 0 1
19669: DIFF
19670: ST_TO_ADDR
// continue ;
19671: GO 19625
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19673: LD_VAR 0 1
19677: PPUSH
19678: CALL_OW 110
19682: NOT
19683: PUSH
19684: LD_VAR 0 1
19688: PPUSH
19689: CALL_OW 110
19693: PUSH
19694: LD_INT 0
19696: EQUAL
19697: OR
19698: IFFALSE 19871
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase2 ) then
19700: LD_VAR 0 1
19704: PPUSH
19705: CALL_OW 262
19709: PUSH
19710: LD_INT 1
19712: EQUAL
19713: PUSH
19714: LD_VAR 0 1
19718: PPUSH
19719: CALL_OW 261
19723: PUSH
19724: LD_INT 50
19726: LESS
19727: AND
19728: PUSH
19729: LD_EXP 69
19733: PPUSH
19734: CALL_OW 302
19738: AND
19739: IFFALSE 19826
// begin ComMoveXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) ;
19741: LD_VAR 0 1
19745: PPUSH
19746: LD_EXP 69
19750: PPUSH
19751: CALL_OW 250
19755: PPUSH
19756: LD_EXP 69
19760: PPUSH
19761: CALL_OW 251
19765: PPUSH
19766: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19770: LD_INT 35
19772: PPUSH
19773: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) < 6 ;
19777: LD_VAR 0 1
19781: PPUSH
19782: LD_EXP 69
19786: PPUSH
19787: CALL_OW 250
19791: PPUSH
19792: LD_EXP 69
19796: PPUSH
19797: CALL_OW 251
19801: PPUSH
19802: CALL_OW 297
19806: PUSH
19807: LD_INT 6
19809: LESS
19810: IFFALSE 19770
// SetFuel ( i , 100 ) ;
19812: LD_VAR 0 1
19816: PPUSH
19817: LD_INT 100
19819: PPUSH
19820: CALL_OW 240
// end else
19824: GO 19871
// if not IsInArea ( i , ruParkingArea2 ) then
19826: LD_VAR 0 1
19830: PPUSH
19831: LD_EXP 83
19835: PPUSH
19836: CALL_OW 308
19840: NOT
19841: IFFALSE 19859
// ComMoveToArea ( i , ruParkingArea2 ) else
19843: LD_VAR 0 1
19847: PPUSH
19848: LD_EXP 83
19852: PPUSH
19853: CALL_OW 113
19857: GO 19871
// SetTag ( i , tParking ) ;
19859: LD_VAR 0 1
19863: PPUSH
19864: LD_INT 12
19866: PPUSH
19867: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19871: LD_VAR 0 1
19875: PPUSH
19876: CALL_OW 110
19880: PUSH
19881: LD_INT 12
19883: EQUAL
19884: IFFALSE 20014
// begin if GetLives ( i ) < 650 then
19886: LD_VAR 0 1
19890: PPUSH
19891: CALL_OW 256
19895: PUSH
19896: LD_INT 650
19898: LESS
19899: IFFALSE 19991
// begin if not IsDrivenBy ( i ) then
19901: LD_VAR 0 1
19905: PPUSH
19906: CALL_OW 311
19910: NOT
19911: IFFALSE 19915
// continue ;
19913: GO 19625
// mech := IsDrivenBy ( i ) ;
19915: LD_ADDR_VAR 0 2
19919: PUSH
19920: LD_VAR 0 1
19924: PPUSH
19925: CALL_OW 311
19929: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19930: LD_VAR 0 2
19934: PPUSH
19935: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19939: LD_VAR 0 2
19943: PPUSH
19944: LD_VAR 0 1
19948: PPUSH
19949: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19953: LD_INT 35
19955: PPUSH
19956: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19960: LD_VAR 0 1
19964: PPUSH
19965: CALL_OW 256
19969: PUSH
19970: LD_INT 1000
19972: EQUAL
19973: IFFALSE 19953
// ComEnterUnit ( mech , i ) ;
19975: LD_VAR 0 2
19979: PPUSH
19980: LD_VAR 0 1
19984: PPUSH
19985: CALL_OW 120
// end else
19989: GO 20014
// if IsDrivenBy ( i ) then
19991: LD_VAR 0 1
19995: PPUSH
19996: CALL_OW 311
20000: IFFALSE 20014
// SetTag ( i , tAttack ) ;
20002: LD_VAR 0 1
20006: PPUSH
20007: LD_INT 13
20009: PPUSH
20010: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
20014: LD_VAR 0 1
20018: PPUSH
20019: CALL_OW 110
20023: PUSH
20024: LD_INT 13
20026: EQUAL
20027: IFFALSE 20158
// begin enemy := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
20029: LD_ADDR_VAR 0 3
20033: PUSH
20034: LD_EXP 67
20038: PPUSH
20039: LD_INT 81
20041: PUSH
20042: LD_INT 3
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PPUSH
20049: CALL_OW 70
20053: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20054: LD_VAR 0 1
20058: PPUSH
20059: CALL_OW 256
20063: PUSH
20064: LD_INT 650
20066: LESS
20067: IFFALSE 20092
// begin ComStop ( i ) ;
20069: LD_VAR 0 1
20073: PPUSH
20074: CALL_OW 141
// SetTag ( i , 0 ) ;
20078: LD_VAR 0 1
20082: PPUSH
20083: LD_INT 0
20085: PPUSH
20086: CALL_OW 109
// continue ;
20090: GO 19625
// end ; if enemy then
20092: LD_VAR 0 3
20096: IFFALSE 20136
// begin if not HasTask ( i ) then
20098: LD_VAR 0 1
20102: PPUSH
20103: CALL_OW 314
20107: NOT
20108: IFFALSE 20134
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20110: LD_VAR 0 1
20114: PPUSH
20115: LD_VAR 0 3
20119: PPUSH
20120: LD_VAR 0 1
20124: PPUSH
20125: CALL_OW 74
20129: PPUSH
20130: CALL_OW 115
// end else
20134: GO 20158
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20136: LD_VAR 0 1
20140: PPUSH
20141: LD_INT 105
20143: PUSH
20144: LD_INT 35
20146: PUSH
20147: EMPTY
20148: LIST
20149: LIST
20150: PUSH
20151: EMPTY
20152: LIST
20153: PPUSH
20154: CALL 94742 0 2
// end ; end ;
20158: GO 19625
20160: POP
20161: POP
// end ;
20162: PPOPN 3
20164: END
// every 5 5$00 trigger Count ( ruExtraTanks ) do
20165: LD_EXP 81
20169: PPUSH
20170: CALL 56538 0 1
20174: IFFALSE 20187
20176: GO 20178
20178: DISABLE
// begin enable ;
20179: ENABLE
// RaiseSailEvent ( EExtraAttack ) ;
20180: LD_INT 106
20182: PPUSH
20183: CALL_OW 427
// end ;
20187: END
// export function RussianExtraAttack ; var i , tmp ; begin
20188: LD_INT 0
20190: PPUSH
20191: PPUSH
20192: PPUSH
// tmp := UnitFilter ( ruExtraTanks , [ f_ok ] ) ;
20193: LD_ADDR_VAR 0 3
20197: PUSH
20198: LD_EXP 81
20202: PPUSH
20203: LD_INT 50
20205: PUSH
20206: EMPTY
20207: LIST
20208: PPUSH
20209: CALL_OW 72
20213: ST_TO_ADDR
// ruExtraTanks := ruExtraTanks diff tmp ;
20214: LD_ADDR_EXP 81
20218: PUSH
20219: LD_EXP 81
20223: PUSH
20224: LD_VAR 0 3
20228: DIFF
20229: ST_TO_ADDR
// ComAgressiveMove ( tmp , 105 , 35 ) ;
20230: LD_VAR 0 3
20234: PPUSH
20235: LD_INT 105
20237: PPUSH
20238: LD_INT 35
20240: PPUSH
20241: CALL_OW 114
// wait ( 0 0$5 ) ;
20245: LD_INT 175
20247: PPUSH
20248: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20252: LD_INT 35
20254: PPUSH
20255: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20259: LD_ADDR_VAR 0 3
20263: PUSH
20264: LD_VAR 0 3
20268: PPUSH
20269: LD_INT 50
20271: PUSH
20272: EMPTY
20273: LIST
20274: PPUSH
20275: CALL_OW 72
20279: ST_TO_ADDR
// for i in tmp do
20280: LD_ADDR_VAR 0 2
20284: PUSH
20285: LD_VAR 0 3
20289: PUSH
20290: FOR_IN
20291: IFFALSE 20317
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20293: LD_VAR 0 2
20297: PPUSH
20298: LD_INT 105
20300: PUSH
20301: LD_INT 35
20303: PUSH
20304: EMPTY
20305: LIST
20306: LIST
20307: PUSH
20308: EMPTY
20309: LIST
20310: PPUSH
20311: CALL 94742 0 2
20315: GO 20290
20317: POP
20318: POP
// until not tmp ;
20319: LD_VAR 0 3
20323: NOT
20324: IFFALSE 20252
// end ;
20326: LD_VAR 0 1
20330: RET
// export function PrepareRussianAttack ( strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
20331: LD_INT 0
20333: PPUSH
20334: PPUSH
20335: PPUSH
20336: PPUSH
20337: PPUSH
20338: PPUSH
20339: PPUSH
20340: PPUSH
20341: PPUSH
20342: PPUSH
// result := [ ] ;
20343: LD_ADDR_VAR 0 2
20347: PUSH
20348: EMPTY
20349: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
20350: LD_ADDR_VAR 0 7
20354: PUSH
20355: LD_INT 4
20357: PUSH
20358: LD_INT 5
20360: PUSH
20361: LD_INT 6
20363: PUSH
20364: LD_INT 7
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: LIST
20371: LIST
20372: PUSH
20373: LD_OWVAR 67
20377: ARRAY
20378: ST_TO_ADDR
// area := arAttackSpawn2Area ;
20379: LD_ADDR_VAR 0 8
20383: PUSH
20384: LD_INT 19
20386: ST_TO_ADDR
// parking := ruGatPointArea ;
20387: LD_ADDR_VAR 0 9
20391: PUSH
20392: LD_INT 32
20394: ST_TO_ADDR
// dir := 5 ;
20395: LD_ADDR_VAR 0 10
20399: PUSH
20400: LD_INT 5
20402: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) then
20403: LD_VAR 0 8
20407: PPUSH
20408: LD_INT 2
20410: PUSH
20411: LD_INT 22
20413: PUSH
20414: LD_INT 0
20416: PUSH
20417: EMPTY
20418: LIST
20419: LIST
20420: PUSH
20421: LD_INT 22
20423: PUSH
20424: LD_INT 6
20426: PUSH
20427: EMPTY
20428: LIST
20429: LIST
20430: PUSH
20431: EMPTY
20432: LIST
20433: LIST
20434: LIST
20435: PPUSH
20436: CALL_OW 70
20440: IFFALSE 20501
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) do
20442: LD_ADDR_VAR 0 3
20446: PUSH
20447: LD_VAR 0 8
20451: PPUSH
20452: LD_INT 2
20454: PUSH
20455: LD_INT 22
20457: PUSH
20458: LD_INT 0
20460: PUSH
20461: EMPTY
20462: LIST
20463: LIST
20464: PUSH
20465: LD_INT 22
20467: PUSH
20468: LD_INT 6
20470: PUSH
20471: EMPTY
20472: LIST
20473: LIST
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: LIST
20479: PPUSH
20480: CALL_OW 70
20484: PUSH
20485: FOR_IN
20486: IFFALSE 20499
// RemoveUnit ( i ) ;
20488: LD_VAR 0 3
20492: PPUSH
20493: CALL_OW 64
20497: GO 20485
20499: POP
20500: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) then
20501: LD_VAR 0 8
20505: PPUSH
20506: LD_INT 3
20508: PUSH
20509: LD_INT 21
20511: PUSH
20512: LD_INT 1
20514: PUSH
20515: EMPTY
20516: LIST
20517: LIST
20518: PUSH
20519: EMPTY
20520: LIST
20521: LIST
20522: PUSH
20523: LD_INT 22
20525: PUSH
20526: LD_INT 1
20528: PUSH
20529: EMPTY
20530: LIST
20531: LIST
20532: PUSH
20533: EMPTY
20534: LIST
20535: LIST
20536: PPUSH
20537: CALL_OW 70
20541: IFFALSE 20605
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) do
20543: LD_ADDR_VAR 0 3
20547: PUSH
20548: LD_VAR 0 8
20552: PPUSH
20553: LD_INT 3
20555: PUSH
20556: LD_INT 21
20558: PUSH
20559: LD_INT 1
20561: PUSH
20562: EMPTY
20563: LIST
20564: LIST
20565: PUSH
20566: EMPTY
20567: LIST
20568: LIST
20569: PUSH
20570: LD_INT 22
20572: PUSH
20573: LD_INT 1
20575: PUSH
20576: EMPTY
20577: LIST
20578: LIST
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: PPUSH
20584: CALL_OW 70
20588: PUSH
20589: FOR_IN
20590: IFFALSE 20603
// KillUnit ( i ) ;
20592: LD_VAR 0 3
20596: PPUSH
20597: CALL_OW 66
20601: GO 20589
20603: POP
20604: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) then
20605: LD_VAR 0 8
20609: PPUSH
20610: LD_INT 21
20612: PUSH
20613: LD_INT 1
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: PUSH
20620: LD_INT 22
20622: PUSH
20623: LD_INT 1
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: EMPTY
20631: LIST
20632: LIST
20633: PPUSH
20634: CALL_OW 70
20638: IFFALSE 20701
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) do
20640: LD_ADDR_VAR 0 3
20644: PUSH
20645: LD_VAR 0 8
20649: PPUSH
20650: LD_INT 21
20652: PUSH
20653: LD_INT 1
20655: PUSH
20656: EMPTY
20657: LIST
20658: LIST
20659: PUSH
20660: LD_INT 22
20662: PUSH
20663: LD_INT 1
20665: PUSH
20666: EMPTY
20667: LIST
20668: LIST
20669: PUSH
20670: EMPTY
20671: LIST
20672: LIST
20673: PPUSH
20674: CALL_OW 70
20678: PUSH
20679: FOR_IN
20680: IFFALSE 20699
// ComMoveXY ( i , 92 , 92 ) ;
20682: LD_VAR 0 3
20686: PPUSH
20687: LD_INT 92
20689: PPUSH
20690: LD_INT 92
20692: PPUSH
20693: CALL_OW 111
20697: GO 20679
20699: POP
20700: POP
// repeat wait ( 0 0$1 ) ;
20701: LD_INT 35
20703: PPUSH
20704: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
20708: LD_VAR 0 8
20712: PPUSH
20713: LD_INT 50
20715: PUSH
20716: EMPTY
20717: LIST
20718: PPUSH
20719: CALL_OW 70
20723: NOT
20724: IFFALSE 20701
// InitHC_All ( ) ;
20726: CALL_OW 584
// InitVc ;
20730: CALL_OW 20
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + strength do
20734: LD_ADDR_VAR 0 3
20738: PUSH
20739: DOUBLE
20740: LD_INT 1
20742: DEC
20743: ST_TO_ADDR
20744: LD_INT 3
20746: PUSH
20747: LD_INT 4
20749: PUSH
20750: LD_INT 4
20752: PUSH
20753: LD_INT 5
20755: PUSH
20756: EMPTY
20757: LIST
20758: LIST
20759: LIST
20760: LIST
20761: PUSH
20762: LD_OWVAR 67
20766: ARRAY
20767: PUSH
20768: LD_VAR 0 1
20772: PLUS
20773: PUSH
20774: FOR_TO
20775: IFFALSE 21082
// begin uc_side := 6 ;
20777: LD_ADDR_OWVAR 20
20781: PUSH
20782: LD_INT 6
20784: ST_TO_ADDR
// uc_nation := nation_russian ;
20785: LD_ADDR_OWVAR 21
20789: PUSH
20790: LD_INT 3
20792: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
20793: LD_ADDR_VAR 0 11
20797: PUSH
20798: LD_INT 1
20800: PUSH
20801: LD_INT 3
20803: PUSH
20804: LD_INT 3
20806: PUSH
20807: LD_INT 3
20809: PUSH
20810: EMPTY
20811: LIST
20812: LIST
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 1
20818: PPUSH
20819: LD_INT 4
20821: PPUSH
20822: CALL_OW 12
20826: ARRAY
20827: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
20828: LD_INT 22
20830: PUSH
20831: LD_INT 24
20833: PUSH
20834: LD_INT 23
20836: PUSH
20837: EMPTY
20838: LIST
20839: LIST
20840: LIST
20841: PUSH
20842: LD_VAR 0 3
20846: PUSH
20847: LD_INT 3
20849: MOD
20850: PUSH
20851: LD_INT 1
20853: PLUS
20854: ARRAY
20855: PPUSH
20856: LD_INT 3
20858: PUSH
20859: LD_INT 1
20861: PUSH
20862: EMPTY
20863: LIST
20864: LIST
20865: PUSH
20866: LD_INT 1
20868: PPUSH
20869: LD_INT 2
20871: PPUSH
20872: CALL_OW 12
20876: ARRAY
20877: PPUSH
20878: LD_VAR 0 11
20882: PPUSH
20883: LD_INT 45
20885: PUSH
20886: LD_INT 46
20888: PUSH
20889: LD_INT 43
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: LIST
20896: PUSH
20897: LD_VAR 0 3
20901: PUSH
20902: LD_INT 3
20904: MOD
20905: PUSH
20906: LD_INT 1
20908: PLUS
20909: ARRAY
20910: PPUSH
20911: LD_INT 100
20913: PPUSH
20914: CALL 59276 0 5
// veh := CreateVehicle ;
20918: LD_ADDR_VAR 0 6
20922: PUSH
20923: CALL_OW 45
20927: ST_TO_ADDR
// SetDir ( veh , dir ) ;
20928: LD_VAR 0 6
20932: PPUSH
20933: LD_VAR 0 10
20937: PPUSH
20938: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
20942: LD_VAR 0 6
20946: PPUSH
20947: LD_VAR 0 8
20951: PPUSH
20952: LD_INT 0
20954: PPUSH
20955: CALL_OW 49
// if control = control_manual then
20959: LD_VAR 0 11
20963: PUSH
20964: LD_INT 1
20966: EQUAL
20967: IFFALSE 21021
// begin uc_side := 6 ;
20969: LD_ADDR_OWVAR 20
20973: PUSH
20974: LD_INT 6
20976: ST_TO_ADDR
// uc_nation := nation_russian ;
20977: LD_ADDR_OWVAR 21
20981: PUSH
20982: LD_INT 3
20984: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
20985: LD_INT 0
20987: PPUSH
20988: LD_VAR 0 7
20992: PPUSH
20993: CALL_OW 383
// un := CreateHuman ;
20997: LD_ADDR_VAR 0 5
21001: PUSH
21002: CALL_OW 44
21006: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
21007: LD_VAR 0 5
21011: PPUSH
21012: LD_VAR 0 6
21016: PPUSH
21017: CALL_OW 52
// end ; repeat ComMoveToArea ( veh , parking ) ;
21021: LD_VAR 0 6
21025: PPUSH
21026: LD_VAR 0 9
21030: PPUSH
21031: CALL_OW 113
// wait ( 0 0$3 ) ;
21035: LD_INT 105
21037: PPUSH
21038: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
21042: LD_VAR 0 8
21046: PPUSH
21047: LD_INT 50
21049: PUSH
21050: EMPTY
21051: LIST
21052: PPUSH
21053: CALL_OW 70
21057: NOT
21058: IFFALSE 21021
// result := Join ( result , veh ) ;
21060: LD_ADDR_VAR 0 2
21064: PUSH
21065: LD_VAR 0 2
21069: PPUSH
21070: LD_VAR 0 6
21074: PPUSH
21075: CALL 92138 0 2
21079: ST_TO_ADDR
// end ;
21080: GO 20774
21082: POP
21083: POP
// for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
21084: LD_ADDR_VAR 0 3
21088: PUSH
21089: DOUBLE
21090: LD_INT 1
21092: DEC
21093: ST_TO_ADDR
21094: LD_INT 2
21096: PUSH
21097: LD_INT 2
21099: PUSH
21100: LD_INT 3
21102: PUSH
21103: LD_INT 4
21105: PUSH
21106: EMPTY
21107: LIST
21108: LIST
21109: LIST
21110: LIST
21111: PUSH
21112: LD_OWVAR 67
21116: ARRAY
21117: PUSH
21118: FOR_TO
21119: IFFALSE 21275
// begin uc_side := 6 ;
21121: LD_ADDR_OWVAR 20
21125: PUSH
21126: LD_INT 6
21128: ST_TO_ADDR
// uc_nation := nation_russian ;
21129: LD_ADDR_OWVAR 21
21133: PUSH
21134: LD_INT 3
21136: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
21137: LD_INT 0
21139: PPUSH
21140: LD_VAR 0 7
21144: PPUSH
21145: CALL_OW 381
// un := CreateHuman ;
21149: LD_ADDR_VAR 0 5
21153: PUSH
21154: CALL_OW 44
21158: ST_TO_ADDR
// if Prob ( [ 35 , 60 , 70 , 80 ] [ Difficulty ] ) then
21159: LD_INT 35
21161: PUSH
21162: LD_INT 60
21164: PUSH
21165: LD_INT 70
21167: PUSH
21168: LD_INT 80
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: LIST
21175: LIST
21176: PUSH
21177: LD_OWVAR 67
21181: ARRAY
21182: PPUSH
21183: CALL_OW 13
21187: IFFALSE 21201
// SetClass ( un , class_bazooker ) ;
21189: LD_VAR 0 5
21193: PPUSH
21194: LD_INT 9
21196: PPUSH
21197: CALL_OW 336
// SetDir ( un , dir ) ;
21201: LD_VAR 0 5
21205: PPUSH
21206: LD_VAR 0 10
21210: PPUSH
21211: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
21215: LD_VAR 0 5
21219: PPUSH
21220: LD_VAR 0 8
21224: PPUSH
21225: LD_INT 0
21227: PPUSH
21228: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
21232: LD_VAR 0 5
21236: PPUSH
21237: LD_VAR 0 9
21241: PPUSH
21242: CALL_OW 113
// wait ( 0 0$1 ) ;
21246: LD_INT 35
21248: PPUSH
21249: CALL_OW 67
// result := Join ( result , un ) ;
21253: LD_ADDR_VAR 0 2
21257: PUSH
21258: LD_VAR 0 2
21262: PPUSH
21263: LD_VAR 0 5
21267: PPUSH
21268: CALL 92138 0 2
21272: ST_TO_ADDR
// end ;
21273: GO 21118
21275: POP
21276: POP
// end ;
21277: LD_VAR 0 2
21281: RET
// export function SendRussianAttack ( wave ) ; var path , attackers , e , i , enemy ; begin
21282: LD_INT 0
21284: PPUSH
21285: PPUSH
21286: PPUSH
21287: PPUSH
21288: PPUSH
21289: PPUSH
// russianWaveAttack := Inc ( russianWaveAttack ) ;
21290: LD_ADDR_EXP 18
21294: PUSH
21295: LD_EXP 18
21299: PPUSH
21300: CALL 93499 0 1
21304: ST_TO_ADDR
// path := [ [ 99 , 91 ] , [ 78 , 50 ] , [ 91 , 45 ] ] ;
21305: LD_ADDR_VAR 0 3
21309: PUSH
21310: LD_INT 99
21312: PUSH
21313: LD_INT 91
21315: PUSH
21316: EMPTY
21317: LIST
21318: LIST
21319: PUSH
21320: LD_INT 78
21322: PUSH
21323: LD_INT 50
21325: PUSH
21326: EMPTY
21327: LIST
21328: LIST
21329: PUSH
21330: LD_INT 91
21332: PUSH
21333: LD_INT 45
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: EMPTY
21341: LIST
21342: LIST
21343: LIST
21344: ST_TO_ADDR
// attackers := PrepareRussianAttack ( wave ) ;
21345: LD_ADDR_VAR 0 4
21349: PUSH
21350: LD_VAR 0 1
21354: PPUSH
21355: CALL 20331 0 1
21359: ST_TO_ADDR
// ComAgressiveMove ( UnitFilter ( attackers , [ f_type , unit_human ] ) , 108 , 60 ) ;
21360: LD_VAR 0 4
21364: PPUSH
21365: LD_INT 21
21367: PUSH
21368: LD_INT 1
21370: PUSH
21371: EMPTY
21372: LIST
21373: LIST
21374: PPUSH
21375: CALL_OW 72
21379: PPUSH
21380: LD_INT 108
21382: PPUSH
21383: LD_INT 60
21385: PPUSH
21386: CALL_OW 114
// DRussianNextAttack ;
21390: CALL 28601 0 0
// repeat wait ( 0 0$2 ) ;
21394: LD_INT 70
21396: PPUSH
21397: CALL_OW 67
// enemy := FilterAllUnits ( [ f_enemy , 6 ] ) ;
21401: LD_ADDR_VAR 0 7
21405: PUSH
21406: LD_INT 81
21408: PUSH
21409: LD_INT 6
21411: PUSH
21412: EMPTY
21413: LIST
21414: LIST
21415: PPUSH
21416: CALL_OW 69
21420: ST_TO_ADDR
// attackers := UnitFilter ( attackers , [ f_ok ] ) ;
21421: LD_ADDR_VAR 0 4
21425: PUSH
21426: LD_VAR 0 4
21430: PPUSH
21431: LD_INT 50
21433: PUSH
21434: EMPTY
21435: LIST
21436: PPUSH
21437: CALL_OW 72
21441: ST_TO_ADDR
// for i in attackers do
21442: LD_ADDR_VAR 0 6
21446: PUSH
21447: LD_VAR 0 4
21451: PUSH
21452: FOR_IN
21453: IFFALSE 21829
// begin if not IsOk ( i ) then
21455: LD_VAR 0 6
21459: PPUSH
21460: CALL_OW 302
21464: NOT
21465: IFFALSE 21485
// begin attackers := attackers diff i ;
21467: LD_ADDR_VAR 0 4
21471: PUSH
21472: LD_VAR 0 4
21476: PUSH
21477: LD_VAR 0 6
21481: DIFF
21482: ST_TO_ADDR
// continue ;
21483: GO 21452
// end ; if GetType ( i ) = unit_vehicle then
21485: LD_VAR 0 6
21489: PPUSH
21490: CALL_OW 247
21494: PUSH
21495: LD_INT 2
21497: EQUAL
21498: IFFALSE 21516
// AgressiveMove ( i , path ) else
21500: LD_VAR 0 6
21504: PPUSH
21505: LD_VAR 0 3
21509: PPUSH
21510: CALL 94742 0 2
21514: GO 21827
// begin if GetClass ( i ) = class_bazooker then
21516: LD_VAR 0 6
21520: PPUSH
21521: CALL_OW 257
21525: PUSH
21526: LD_INT 9
21528: EQUAL
21529: IFFALSE 21803
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
21531: LD_VAR 0 6
21535: PPUSH
21536: LD_VAR 0 7
21540: PPUSH
21541: LD_VAR 0 6
21545: PPUSH
21546: CALL_OW 74
21550: PPUSH
21551: CALL_OW 296
21555: PUSH
21556: LD_INT 12
21558: GREATER
21559: IFFALSE 21587
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21561: LD_VAR 0 6
21565: PPUSH
21566: LD_VAR 0 7
21570: PPUSH
21571: LD_VAR 0 6
21575: PPUSH
21576: CALL_OW 74
21580: PPUSH
21581: CALL 96210 0 2
21585: GO 21801
// begin e := NearestUnitToUnit ( enemy , i ) ;
21587: LD_ADDR_VAR 0 5
21591: PUSH
21592: LD_VAR 0 7
21596: PPUSH
21597: LD_VAR 0 6
21601: PPUSH
21602: CALL_OW 74
21606: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
21607: LD_INT 1
21609: PPUSH
21610: LD_INT 3
21612: PPUSH
21613: CALL_OW 12
21617: PUSH
21618: LD_INT 1
21620: DOUBLE
21621: EQUAL
21622: IFTRUE 21626
21624: GO 21643
21626: POP
// ComAttackUnit ( i , e ) ; 2 :
21627: LD_VAR 0 6
21631: PPUSH
21632: LD_VAR 0 5
21636: PPUSH
21637: CALL_OW 115
21641: GO 21801
21643: LD_INT 2
21645: DOUBLE
21646: EQUAL
21647: IFTRUE 21651
21649: GO 21729
21651: POP
// begin ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ;
21652: LD_VAR 0 6
21656: PPUSH
21657: LD_VAR 0 5
21661: PPUSH
21662: CALL_OW 250
21666: PPUSH
21667: LD_VAR 0 5
21671: PPUSH
21672: CALL_OW 251
21676: PPUSH
21677: CALL_OW 153
// if GetType ( e ) <> unit_building and not dialogRussianSpaceAmmo then
21681: LD_VAR 0 5
21685: PPUSH
21686: CALL_OW 247
21690: PUSH
21691: LD_INT 3
21693: NONEQUAL
21694: PUSH
21695: LD_EXP 17
21699: NOT
21700: AND
21701: IFFALSE 21727
// begin dialogRussianSpaceAmmo := true ;
21703: LD_ADDR_EXP 17
21707: PUSH
21708: LD_INT 1
21710: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21711: LD_INT 210
21713: PPUSH
21714: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21718: LD_VAR 0 5
21722: PPUSH
21723: CALL 28648 0 1
// end ; end ; 3 :
21727: GO 21801
21729: LD_INT 3
21731: DOUBLE
21732: EQUAL
21733: IFTRUE 21737
21735: GO 21800
21737: POP
// begin ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ;
21738: LD_VAR 0 6
21742: PPUSH
21743: LD_VAR 0 5
21747: PPUSH
21748: CALL_OW 250
21752: PPUSH
21753: LD_VAR 0 5
21757: PPUSH
21758: CALL_OW 251
21762: PPUSH
21763: CALL_OW 154
// if not dialogRussianSpaceAmmo then
21767: LD_EXP 17
21771: NOT
21772: IFFALSE 21798
// begin dialogRussianSpaceAmmo := true ;
21774: LD_ADDR_EXP 17
21778: PUSH
21779: LD_INT 1
21781: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21782: LD_INT 210
21784: PPUSH
21785: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21789: LD_VAR 0 5
21793: PPUSH
21794: CALL 28648 0 1
// end ; end ; end ;
21798: GO 21801
21800: POP
// end ; end else
21801: GO 21827
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
21803: LD_VAR 0 6
21807: PPUSH
21808: LD_VAR 0 7
21812: PPUSH
21813: LD_VAR 0 6
21817: PPUSH
21818: CALL_OW 74
21822: PPUSH
21823: CALL 96210 0 2
// end ; end ;
21827: GO 21452
21829: POP
21830: POP
// until not attackers ;
21831: LD_VAR 0 4
21835: NOT
21836: IFFALSE 21394
// end ;
21838: LD_VAR 0 2
21842: RET
// every 6 6$30 trigger epsilon and firstAttack do var i , un , tmp ;
21843: LD_EXP 10
21847: PUSH
21848: LD_EXP 16
21852: AND
21853: IFFALSE 21965
21855: GO 21857
21857: DISABLE
21858: LD_INT 0
21860: PPUSH
21861: PPUSH
21862: PPUSH
// begin InitHC_All ( ) ;
21863: CALL_OW 584
// for i := 1 to 3 do
21867: LD_ADDR_VAR 0 1
21871: PUSH
21872: DOUBLE
21873: LD_INT 1
21875: DEC
21876: ST_TO_ADDR
21877: LD_INT 3
21879: PUSH
21880: FOR_TO
21881: IFFALSE 21963
// begin uc_side := 6 ;
21883: LD_ADDR_OWVAR 20
21887: PUSH
21888: LD_INT 6
21890: ST_TO_ADDR
// uc_nation := nation_russian ;
21891: LD_ADDR_OWVAR 21
21895: PUSH
21896: LD_INT 3
21898: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
21899: LD_INT 0
21901: PPUSH
21902: LD_INT 3
21904: PPUSH
21905: CALL_OW 381
// un := CreateHuman ;
21909: LD_ADDR_VAR 0 2
21913: PUSH
21914: CALL_OW 44
21918: ST_TO_ADDR
// SetDir ( un , 2 ) ;
21919: LD_VAR 0 2
21923: PPUSH
21924: LD_INT 2
21926: PPUSH
21927: CALL_OW 233
// PlaceUnitArea ( un , ruNorthSpawnArea , false ) ;
21931: LD_VAR 0 2
21935: PPUSH
21936: LD_INT 33
21938: PPUSH
21939: LD_INT 0
21941: PPUSH
21942: CALL_OW 49
// ComAgressiveMove ( un , 52 , 16 ) ;
21946: LD_VAR 0 2
21950: PPUSH
21951: LD_INT 52
21953: PPUSH
21954: LD_INT 16
21956: PPUSH
21957: CALL_OW 114
// end ;
21961: GO 21880
21963: POP
21964: POP
// end ;
21965: PPOPN 3
21967: END
// every 5 5$00 trigger IsOk ( ruBase ) and not ruTransportDestroyed do var cargo ;
21968: LD_EXP 68
21972: PPUSH
21973: CALL_OW 302
21977: PUSH
21978: LD_EXP 78
21982: NOT
21983: AND
21984: IFFALSE 22221
21986: GO 21988
21988: DISABLE
21989: LD_INT 0
21991: PPUSH
// begin enable ;
21992: ENABLE
// uc_side := 3 ;
21993: LD_ADDR_OWVAR 20
21997: PUSH
21998: LD_INT 3
22000: ST_TO_ADDR
// uc_nation := nation_russian ;
22001: LD_ADDR_OWVAR 21
22005: PUSH
22006: LD_INT 3
22008: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
22009: LD_INT 22
22011: PPUSH
22012: LD_INT 3
22014: PPUSH
22015: LD_INT 3
22017: PPUSH
22018: LD_INT 51
22020: PPUSH
22021: LD_INT 100
22023: PPUSH
22024: CALL 59276 0 5
// cargo := CreateVehicle ;
22028: LD_ADDR_VAR 0 1
22032: PUSH
22033: CALL_OW 45
22037: ST_TO_ADDR
// SetDir ( cargo , 5 ) ;
22038: LD_VAR 0 1
22042: PPUSH
22043: LD_INT 5
22045: PPUSH
22046: CALL_OW 233
// PlaceUnitXY ( cargo , 187 , 117 , false ) ;
22050: LD_VAR 0 1
22054: PPUSH
22055: LD_INT 187
22057: PPUSH
22058: LD_INT 117
22060: PPUSH
22061: LD_INT 0
22063: PPUSH
22064: CALL_OW 48
// SetCargo ( cargo , mat_cans , 100 ) ;
22068: LD_VAR 0 1
22072: PPUSH
22073: LD_INT 1
22075: PPUSH
22076: LD_INT 100
22078: PPUSH
22079: CALL_OW 290
// ComMoveUnit ( cargo , ruBase ) ;
22083: LD_VAR 0 1
22087: PPUSH
22088: LD_EXP 68
22092: PPUSH
22093: CALL_OW 112
// AddComGive ( cargo , ruBase ) ;
22097: LD_VAR 0 1
22101: PPUSH
22102: LD_EXP 68
22106: PPUSH
22107: CALL_OW 221
// AddComMoveXY ( cargo , 187 , 117 ) ;
22111: LD_VAR 0 1
22115: PPUSH
22116: LD_INT 187
22118: PPUSH
22119: LD_INT 117
22121: PPUSH
22122: CALL_OW 171
// wait ( 0 0$10 ) ;
22126: LD_INT 350
22128: PPUSH
22129: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22133: LD_INT 35
22135: PPUSH
22136: CALL_OW 67
// if not HasTask ( cargo ) then
22140: LD_VAR 0 1
22144: PPUSH
22145: CALL_OW 314
22149: NOT
22150: IFFALSE 22167
// ComMoveXY ( cargo , 187 , 117 ) ;
22152: LD_VAR 0 1
22156: PPUSH
22157: LD_INT 187
22159: PPUSH
22160: LD_INT 117
22162: PPUSH
22163: CALL_OW 111
// until IsDead ( cargo ) or IsAt ( cargo , 187 , 117 ) ;
22167: LD_VAR 0 1
22171: PPUSH
22172: CALL_OW 301
22176: PUSH
22177: LD_VAR 0 1
22181: PPUSH
22182: LD_INT 187
22184: PPUSH
22185: LD_INT 117
22187: PPUSH
22188: CALL_OW 307
22192: OR
22193: IFFALSE 22133
// if IsAt ( cargo , 187 , 117 ) then
22195: LD_VAR 0 1
22199: PPUSH
22200: LD_INT 187
22202: PPUSH
22203: LD_INT 117
22205: PPUSH
22206: CALL_OW 307
22210: IFFALSE 22221
// RemoveUnit ( cargo ) ;
22212: LD_VAR 0 1
22216: PPUSH
22217: CALL_OW 64
// end ; end_of_file
22221: PPOPN 1
22223: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
22224: LD_VAR 0 1
22228: PPUSH
22229: CALL 49708 0 1
// if unit = Dietrich and not arabianAttack then
22233: LD_VAR 0 1
22237: PUSH
22238: LD_EXP 50
22242: EQUAL
22243: PUSH
22244: LD_EXP 4
22248: NOT
22249: AND
22250: IFFALSE 22259
// YouLost ( ArabDefeated ) ;
22252: LD_STRING ArabDefeated
22254: PPUSH
22255: CALL_OW 104
// if unit in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) and not arabianAttack then
22259: LD_VAR 0 1
22263: PUSH
22264: LD_INT 22
22266: PUSH
22267: LD_INT 2
22269: PUSH
22270: EMPTY
22271: LIST
22272: LIST
22273: PUSH
22274: LD_INT 25
22276: PUSH
22277: LD_INT 4
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: PUSH
22284: EMPTY
22285: LIST
22286: LIST
22287: PPUSH
22288: CALL_OW 69
22292: IN
22293: PUSH
22294: LD_EXP 4
22298: NOT
22299: AND
22300: IFFALSE 22309
// YouLost ( ArabDefeated ) ;
22302: LD_STRING ArabDefeated
22304: PPUSH
22305: CALL_OW 104
// if unit in JMMSquad then
22309: LD_VAR 0 1
22313: PUSH
22314: LD_EXP 45
22318: IN
22319: IFFALSE 22337
// JMMSquad := JMMSquad diff unit ;
22321: LD_ADDR_EXP 45
22325: PUSH
22326: LD_EXP 45
22330: PUSH
22331: LD_VAR 0 1
22335: DIFF
22336: ST_TO_ADDR
// if unit = Truman then
22337: LD_VAR 0 1
22341: PUSH
22342: LD_EXP 43
22346: EQUAL
22347: IFFALSE 22356
// YouLost ( Powell ) ;
22349: LD_STRING Powell
22351: PPUSH
22352: CALL_OW 104
// if unit = JMM then
22356: LD_VAR 0 1
22360: PUSH
22361: LD_EXP 23
22365: EQUAL
22366: IFFALSE 22375
// YouLost ( JMM ) ;
22368: LD_STRING JMM
22370: PPUSH
22371: CALL_OW 104
// if unit in arEscapist then
22375: LD_VAR 0 1
22379: PUSH
22380: LD_EXP 56
22384: IN
22385: IFFALSE 22403
// arEscapist := arEscapist diff unit ;
22387: LD_ADDR_EXP 56
22391: PUSH
22392: LD_EXP 56
22396: PUSH
22397: LD_VAR 0 1
22401: DIFF
22402: ST_TO_ADDR
// if unit in arAttackersInf then
22403: LD_VAR 0 1
22407: PUSH
22408: LD_EXP 57
22412: IN
22413: IFFALSE 22431
// arAttackersInf := arAttackersInf diff unit ;
22415: LD_ADDR_EXP 57
22419: PUSH
22420: LD_EXP 57
22424: PUSH
22425: LD_VAR 0 1
22429: DIFF
22430: ST_TO_ADDR
// if unit in arAttackersVeh then
22431: LD_VAR 0 1
22435: PUSH
22436: LD_EXP 58
22440: IN
22441: IFFALSE 22459
// arAttackersVeh := arAttackersVeh diff unit ;
22443: LD_ADDR_EXP 58
22447: PUSH
22448: LD_EXP 58
22452: PUSH
22453: LD_VAR 0 1
22457: DIFF
22458: ST_TO_ADDR
// if unit = Khatam then
22459: LD_VAR 0 1
22463: PUSH
22464: LD_EXP 36
22468: EQUAL
22469: IFFALSE 22479
// khatamStatus := false ;
22471: LD_ADDR_EXP 5
22475: PUSH
22476: LD_INT 0
22478: ST_TO_ADDR
// if unit = epsilon then
22479: LD_VAR 0 1
22483: PUSH
22484: LD_EXP 10
22488: EQUAL
22489: IFFALSE 22520
// begin hasBase := false ;
22491: LD_ADDR_EXP 9
22495: PUSH
22496: LD_INT 0
22498: ST_TO_ADDR
// epsilon := 0 ;
22499: LD_ADDR_EXP 10
22503: PUSH
22504: LD_INT 0
22506: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
22507: LD_INT 0
22509: PPUSH
22510: LD_INT 1
22512: PPUSH
22513: LD_INT 1
22515: PPUSH
22516: CALL_OW 324
// end ; if unit = Khatam then
22520: LD_VAR 0 1
22524: PUSH
22525: LD_EXP 36
22529: EQUAL
22530: IFFALSE 22542
// SaveVariable ( 0 , 10_KhatamStatus_1 ) ;
22532: LD_INT 0
22534: PPUSH
22535: LD_STRING 10_KhatamStatus_1
22537: PPUSH
22538: CALL_OW 39
// if unit in ruForces then
22542: LD_VAR 0 1
22546: PUSH
22547: LD_EXP 59
22551: IN
22552: IFFALSE 22570
// ruForces := ruForces diff unit ;
22554: LD_ADDR_EXP 59
22558: PUSH
22559: LD_EXP 59
22563: PUSH
22564: LD_VAR 0 1
22568: DIFF
22569: ST_TO_ADDR
// if unit in ruForces2 then
22570: LD_VAR 0 1
22574: PUSH
22575: LD_EXP 60
22579: IN
22580: IFFALSE 22598
// ruForces2 := ruForces2 diff unit ;
22582: LD_ADDR_EXP 60
22586: PUSH
22587: LD_EXP 60
22591: PUSH
22592: LD_VAR 0 1
22596: DIFF
22597: ST_TO_ADDR
// if unit in ruTanks then
22598: LD_VAR 0 1
22602: PUSH
22603: LD_EXP 79
22607: IN
22608: IFFALSE 22626
// ruTanks := ruTanks diff unit ;
22610: LD_ADDR_EXP 79
22614: PUSH
22615: LD_EXP 79
22619: PUSH
22620: LD_VAR 0 1
22624: DIFF
22625: ST_TO_ADDR
// if unit in ruTanks2 then
22626: LD_VAR 0 1
22630: PUSH
22631: LD_EXP 80
22635: IN
22636: IFFALSE 22654
// ruTanks2 := ruTanks2 diff unit ;
22638: LD_ADDR_EXP 80
22642: PUSH
22643: LD_EXP 80
22647: PUSH
22648: LD_VAR 0 1
22652: DIFF
22653: ST_TO_ADDR
// if unit in ruExtraTanks then
22654: LD_VAR 0 1
22658: PUSH
22659: LD_EXP 81
22663: IN
22664: IFFALSE 22682
// ruExtraTanks := ruExtraTanks diff unit ;
22666: LD_ADDR_EXP 81
22670: PUSH
22671: LD_EXP 81
22675: PUSH
22676: LD_VAR 0 1
22680: DIFF
22681: ST_TO_ADDR
// if unit in ruMech then
22682: LD_VAR 0 1
22686: PUSH
22687: LD_EXP 63
22691: IN
22692: IFFALSE 22710
// ruMech := ruMech diff unit ;
22694: LD_ADDR_EXP 63
22698: PUSH
22699: LD_EXP 63
22703: PUSH
22704: LD_VAR 0 1
22708: DIFF
22709: ST_TO_ADDR
// if unit in ruMech2 then
22710: LD_VAR 0 1
22714: PUSH
22715: LD_EXP 64
22719: IN
22720: IFFALSE 22738
// ruMech2 := ruMech2 diff unit ;
22722: LD_ADDR_EXP 64
22726: PUSH
22727: LD_EXP 64
22731: PUSH
22732: LD_VAR 0 1
22736: DIFF
22737: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 3 then
22738: LD_VAR 0 1
22742: PPUSH
22743: CALL_OW 266
22747: PUSH
22748: LD_INT 32
22750: PUSH
22751: LD_INT 33
22753: PUSH
22754: EMPTY
22755: LIST
22756: LIST
22757: IN
22758: PUSH
22759: LD_VAR 0 1
22763: PPUSH
22764: CALL_OW 255
22768: PUSH
22769: LD_INT 3
22771: EQUAL
22772: AND
22773: IFFALSE 22929
// begin if IsInArea ( unit , ruBaseArea ) then
22775: LD_VAR 0 1
22779: PPUSH
22780: LD_EXP 66
22784: PPUSH
22785: CALL_OW 308
22789: IFFALSE 22852
// ruBuildings := Join ( ruBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
22791: LD_ADDR_EXP 76
22795: PUSH
22796: LD_EXP 76
22800: PPUSH
22801: LD_VAR 0 1
22805: PPUSH
22806: CALL_OW 266
22810: PUSH
22811: LD_VAR 0 1
22815: PPUSH
22816: CALL_OW 250
22820: PUSH
22821: LD_VAR 0 1
22825: PPUSH
22826: CALL_OW 251
22830: PUSH
22831: LD_VAR 0 1
22835: PPUSH
22836: CALL_OW 254
22840: PUSH
22841: EMPTY
22842: LIST
22843: LIST
22844: LIST
22845: LIST
22846: PPUSH
22847: CALL 92138 0 2
22851: ST_TO_ADDR
// if IsInArea ( unit , ruBaseArea2 ) then
22852: LD_VAR 0 1
22856: PPUSH
22857: LD_EXP 67
22861: PPUSH
22862: CALL_OW 308
22866: IFFALSE 22929
// ruBuildings2 := Join ( ruBuildings2 , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
22868: LD_ADDR_EXP 77
22872: PUSH
22873: LD_EXP 77
22877: PPUSH
22878: LD_VAR 0 1
22882: PPUSH
22883: CALL_OW 266
22887: PUSH
22888: LD_VAR 0 1
22892: PPUSH
22893: CALL_OW 250
22897: PUSH
22898: LD_VAR 0 1
22902: PPUSH
22903: CALL_OW 251
22907: PUSH
22908: LD_VAR 0 1
22912: PPUSH
22913: CALL_OW 254
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: LIST
22922: LIST
22923: PPUSH
22924: CALL 92138 0 2
22928: ST_TO_ADDR
// end ; if unit in FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) then
22929: LD_VAR 0 1
22933: PUSH
22934: LD_INT 22
22936: PUSH
22937: LD_INT 6
22939: PUSH
22940: EMPTY
22941: LIST
22942: LIST
22943: PUSH
22944: LD_INT 34
22946: PUSH
22947: LD_INT 51
22949: PUSH
22950: EMPTY
22951: LIST
22952: LIST
22953: PUSH
22954: EMPTY
22955: LIST
22956: LIST
22957: PPUSH
22958: CALL_OW 69
22962: IN
22963: IFFALSE 22973
// ruTransportDestroyed := true ;
22965: LD_ADDR_EXP 78
22969: PUSH
22970: LD_INT 1
22972: ST_TO_ADDR
// end ;
22973: PPOPN 1
22975: END
// on ClassChanged ( un , oldClass , newClass ) do begin if GetTag ( un ) = tMech then
22976: LD_VAR 0 1
22980: PPUSH
22981: CALL_OW 110
22985: PUSH
22986: LD_INT 7
22988: EQUAL
22989: IFFALSE 23003
// SetTag ( un , 0 ) ;
22991: LD_VAR 0 1
22995: PPUSH
22996: LD_INT 0
22998: PPUSH
22999: CALL_OW 109
// end ;
23003: PPOPN 3
23005: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
23006: LD_VAR 0 2
23010: PUSH
23011: LD_INT 22
23013: PUSH
23014: LD_INT 3
23016: PUSH
23017: EMPTY
23018: LIST
23019: LIST
23020: PUSH
23021: LD_INT 25
23023: PUSH
23024: LD_INT 3
23026: PUSH
23027: EMPTY
23028: LIST
23029: LIST
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PPUSH
23035: CALL_OW 69
23039: IN
23040: PUSH
23041: LD_VAR 0 1
23045: PPUSH
23046: CALL_OW 266
23050: PUSH
23051: LD_INT 3
23053: EQUAL
23054: AND
23055: PUSH
23056: LD_VAR 0 2
23060: PPUSH
23061: CALL_OW 256
23065: PUSH
23066: LD_INT 1000
23068: LESS
23069: AND
23070: IFFALSE 23096
// begin SetTag ( un , 0 ) ;
23072: LD_VAR 0 2
23076: PPUSH
23077: LD_INT 0
23079: PPUSH
23080: CALL_OW 109
// SetLives ( un , 1000 ) ;
23084: LD_VAR 0 2
23088: PPUSH
23089: LD_INT 1000
23091: PPUSH
23092: CALL_OW 234
// end ; end ;
23096: PPOPN 2
23098: END
// on UnitGoesToRed ( un ) do var i ;
23099: LD_INT 0
23101: PPUSH
// begin if un = Khatam and GetSide ( Khatam ) = 8 then
23102: LD_VAR 0 1
23106: PUSH
23107: LD_EXP 36
23111: EQUAL
23112: PUSH
23113: LD_EXP 36
23117: PPUSH
23118: CALL_OW 255
23122: PUSH
23123: LD_INT 8
23125: EQUAL
23126: AND
23127: IFFALSE 23138
// KillUnit ( Khatam ) ;
23129: LD_EXP 36
23133: PPUSH
23134: CALL_OW 66
// end ;
23138: PPOPN 2
23140: END
// on SpontaneousTeleported ( un ) do begin if not seenRussianTeleport then
23141: LD_EXP 6
23145: NOT
23146: IFFALSE 23180
// begin seenRussianTeleport := true ;
23148: LD_ADDR_EXP 6
23152: PUSH
23153: LD_INT 1
23155: ST_TO_ADDR
// DTankTeleport ( GetX ( un ) , GetY ( un ) ) ;
23156: LD_VAR 0 1
23160: PPUSH
23161: CALL_OW 250
23165: PPUSH
23166: LD_VAR 0 1
23170: PPUSH
23171: CALL_OW 251
23175: PPUSH
23176: CALL 26658 0 2
// end ; end ;
23180: PPOPN 1
23182: END
// on BuildingCaptured ( captured , oldSide , unit ) do var i , x , y ;
23183: LD_INT 0
23185: PPUSH
23186: PPUSH
23187: PPUSH
// begin if oldSide = 2 and GetBType ( captured ) in [ b_lab_half , b_lab , b_depot , b_barracks ] then
23188: LD_VAR 0 2
23192: PUSH
23193: LD_INT 2
23195: EQUAL
23196: PUSH
23197: LD_VAR 0 1
23201: PPUSH
23202: CALL_OW 266
23206: PUSH
23207: LD_INT 7
23209: PUSH
23210: LD_INT 6
23212: PUSH
23213: LD_INT 0
23215: PUSH
23216: LD_INT 5
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: LIST
23223: LIST
23224: IN
23225: AND
23226: IFFALSE 23345
// begin for i := 1 to rand ( 2 , 4 ) do
23228: LD_ADDR_VAR 0 4
23232: PUSH
23233: DOUBLE
23234: LD_INT 1
23236: DEC
23237: ST_TO_ADDR
23238: LD_INT 2
23240: PPUSH
23241: LD_INT 4
23243: PPUSH
23244: CALL_OW 12
23248: PUSH
23249: FOR_TO
23250: IFFALSE 23343
// begin x := GetX ( captured ) - rand ( - 2 , 2 ) ;
23252: LD_ADDR_VAR 0 5
23256: PUSH
23257: LD_VAR 0 1
23261: PPUSH
23262: CALL_OW 250
23266: PUSH
23267: LD_INT 2
23269: NEG
23270: PPUSH
23271: LD_INT 2
23273: PPUSH
23274: CALL_OW 12
23278: MINUS
23279: ST_TO_ADDR
// y := GetY ( captured ) + rand ( - 2 , 2 ) ;
23280: LD_ADDR_VAR 0 6
23284: PUSH
23285: LD_VAR 0 1
23289: PPUSH
23290: CALL_OW 251
23294: PUSH
23295: LD_INT 2
23297: NEG
23298: PPUSH
23299: LD_INT 2
23301: PPUSH
23302: CALL_OW 12
23306: PLUS
23307: ST_TO_ADDR
// if ValidHex ( x , y ) then
23308: LD_VAR 0 5
23312: PPUSH
23313: LD_VAR 0 6
23317: PPUSH
23318: CALL_OW 488
23322: IFFALSE 23341
// MineExplosion ( x , y , 10 ) ;
23324: LD_VAR 0 5
23328: PPUSH
23329: LD_VAR 0 6
23333: PPUSH
23334: LD_INT 10
23336: PPUSH
23337: CALL_OW 453
// end ;
23341: GO 23249
23343: POP
23344: POP
// end ; end ;
23345: PPOPN 6
23347: END
// on VehicleConstructed ( veh , fac ) do var side ;
23348: LD_INT 0
23350: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
23351: LD_VAR 0 1
23355: PPUSH
23356: LD_VAR 0 2
23360: PPUSH
23361: CALL 49828 0 2
// side := GetSide ( fac ) ;
23365: LD_ADDR_VAR 0 3
23369: PUSH
23370: LD_VAR 0 2
23374: PPUSH
23375: CALL_OW 255
23379: ST_TO_ADDR
// if side = 3 then
23380: LD_VAR 0 3
23384: PUSH
23385: LD_INT 3
23387: EQUAL
23388: IFFALSE 23572
// begin if IsInArea ( fac , ruBaseArea ) then
23390: LD_VAR 0 2
23394: PPUSH
23395: LD_EXP 66
23399: PPUSH
23400: CALL_OW 308
23404: IFFALSE 23481
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
23406: LD_ADDR_EXP 70
23410: PUSH
23411: LD_EXP 70
23415: PPUSH
23416: LD_INT 1
23418: PPUSH
23419: CALL_OW 3
23423: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23424: LD_VAR 0 1
23428: PPUSH
23429: CALL_OW 263
23433: PUSH
23434: LD_INT 1
23436: EQUAL
23437: IFFALSE 23461
// ruTanks := Join ( ruTanks , veh ) else
23439: LD_ADDR_EXP 79
23443: PUSH
23444: LD_EXP 79
23448: PPUSH
23449: LD_VAR 0 1
23453: PPUSH
23454: CALL 92138 0 2
23458: ST_TO_ADDR
23459: GO 23481
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23461: LD_ADDR_EXP 81
23465: PUSH
23466: LD_EXP 81
23470: PPUSH
23471: LD_VAR 0 1
23475: PPUSH
23476: CALL 92138 0 2
23480: ST_TO_ADDR
// end ; if IsInArea ( fac , ruBaseArea2 ) then
23481: LD_VAR 0 2
23485: PPUSH
23486: LD_EXP 67
23490: PPUSH
23491: CALL_OW 308
23495: IFFALSE 23572
// begin ruConstructList2 := Delete ( ruConstructList2 , 1 ) ;
23497: LD_ADDR_EXP 71
23501: PUSH
23502: LD_EXP 71
23506: PPUSH
23507: LD_INT 1
23509: PPUSH
23510: CALL_OW 3
23514: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23515: LD_VAR 0 1
23519: PPUSH
23520: CALL_OW 263
23524: PUSH
23525: LD_INT 1
23527: EQUAL
23528: IFFALSE 23552
// ruTanks2 := Join ( ruTanks2 , veh ) else
23530: LD_ADDR_EXP 80
23534: PUSH
23535: LD_EXP 80
23539: PPUSH
23540: LD_VAR 0 1
23544: PPUSH
23545: CALL 92138 0 2
23549: ST_TO_ADDR
23550: GO 23572
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23552: LD_ADDR_EXP 81
23556: PUSH
23557: LD_EXP 81
23561: PPUSH
23562: LD_VAR 0 1
23566: PPUSH
23567: CALL 92138 0 2
23571: ST_TO_ADDR
// end ; end ; end ;
23572: PPOPN 3
23574: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
23575: LD_INT 0
23577: PPUSH
23578: PPUSH
23579: PPUSH
// begin side := GetSide ( driver ) ;
23580: LD_ADDR_VAR 0 7
23584: PUSH
23585: LD_VAR 0 1
23589: PPUSH
23590: CALL_OW 255
23594: ST_TO_ADDR
// if side = 5 then
23595: LD_VAR 0 7
23599: PUSH
23600: LD_INT 5
23602: EQUAL
23603: IFFALSE 23683
// begin arAttackersVeh := arAttackersVeh diff driver ;
23605: LD_ADDR_EXP 58
23609: PUSH
23610: LD_EXP 58
23614: PUSH
23615: LD_VAR 0 1
23619: DIFF
23620: ST_TO_ADDR
// ComMoveXY ( driver , 189 , 80 ) ;
23621: LD_VAR 0 1
23625: PPUSH
23626: LD_INT 189
23628: PPUSH
23629: LD_INT 80
23631: PPUSH
23632: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23636: LD_INT 35
23638: PPUSH
23639: CALL_OW 67
// if not IsOk ( driver ) then
23643: LD_VAR 0 1
23647: PPUSH
23648: CALL_OW 302
23652: NOT
23653: IFFALSE 23657
// exit ;
23655: GO 24207
// until IsAt ( driver , 189 , 80 ) ;
23657: LD_VAR 0 1
23661: PPUSH
23662: LD_INT 189
23664: PPUSH
23665: LD_INT 80
23667: PPUSH
23668: CALL_OW 307
23672: IFFALSE 23636
// RemoveUnit ( driver ) ;
23674: LD_VAR 0 1
23678: PPUSH
23679: CALL_OW 64
// end ; if side = 6 then
23683: LD_VAR 0 7
23687: PUSH
23688: LD_INT 6
23690: EQUAL
23691: IFFALSE 23749
// begin repeat ComMoveToArea ( driver , arAttackSpawn2Area ) ;
23693: LD_VAR 0 1
23697: PPUSH
23698: LD_INT 19
23700: PPUSH
23701: CALL_OW 113
// wait ( 0 0$3 ) ;
23705: LD_INT 105
23707: PPUSH
23708: CALL_OW 67
// if not IsOk ( driver ) then
23712: LD_VAR 0 1
23716: PPUSH
23717: CALL_OW 302
23721: NOT
23722: IFFALSE 23726
// exit ;
23724: GO 24207
// until IsInArea ( driver , arAttackSpawn2Area ) ;
23726: LD_VAR 0 1
23730: PPUSH
23731: LD_INT 19
23733: PPUSH
23734: CALL_OW 308
23738: IFFALSE 23693
// RemoveUnit ( driver ) ;
23740: LD_VAR 0 1
23744: PPUSH
23745: CALL_OW 64
// end ; if side = 3 then
23749: LD_VAR 0 7
23753: PUSH
23754: LD_INT 3
23756: EQUAL
23757: IFFALSE 24207
// begin if driver in ruMech then
23759: LD_VAR 0 1
23763: PUSH
23764: LD_EXP 63
23768: IN
23769: IFFALSE 23983
// begin ComMoveToArea ( driver , ruBaseArea ) ;
23771: LD_VAR 0 1
23775: PPUSH
23776: LD_EXP 66
23780: PPUSH
23781: CALL_OW 113
// SetTag ( driver , tMech ) ;
23785: LD_VAR 0 1
23789: PPUSH
23790: LD_INT 7
23792: PPUSH
23793: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
23797: LD_ADDR_VAR 0 6
23801: PUSH
23802: LD_EXP 66
23806: PPUSH
23807: LD_INT 22
23809: PUSH
23810: LD_INT 3
23812: PUSH
23813: EMPTY
23814: LIST
23815: LIST
23816: PUSH
23817: LD_INT 30
23819: PUSH
23820: LD_INT 3
23822: PUSH
23823: EMPTY
23824: LIST
23825: LIST
23826: PUSH
23827: LD_INT 50
23829: PUSH
23830: EMPTY
23831: LIST
23832: PUSH
23833: EMPTY
23834: LIST
23835: LIST
23836: LIST
23837: PPUSH
23838: CALL_OW 70
23842: ST_TO_ADDR
// if fac then
23843: LD_VAR 0 6
23847: IFFALSE 23869
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
23849: LD_VAR 0 1
23853: PPUSH
23854: LD_VAR 0 6
23858: PUSH
23859: LD_INT 1
23861: ARRAY
23862: PPUSH
23863: CALL_OW 180
// exit ;
23867: GO 24207
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
23869: LD_ADDR_VAR 0 5
23873: PUSH
23874: LD_EXP 66
23878: PPUSH
23879: LD_INT 22
23881: PUSH
23882: LD_INT 3
23884: PUSH
23885: EMPTY
23886: LIST
23887: LIST
23888: PUSH
23889: LD_INT 2
23891: PUSH
23892: LD_INT 30
23894: PUSH
23895: LD_INT 4
23897: PUSH
23898: EMPTY
23899: LIST
23900: LIST
23901: PUSH
23902: LD_INT 30
23904: PUSH
23905: LD_INT 5
23907: PUSH
23908: EMPTY
23909: LIST
23910: LIST
23911: PUSH
23912: EMPTY
23913: LIST
23914: LIST
23915: LIST
23916: PUSH
23917: LD_INT 3
23919: PUSH
23920: LD_INT 62
23922: PUSH
23923: EMPTY
23924: LIST
23925: PUSH
23926: EMPTY
23927: LIST
23928: LIST
23929: PUSH
23930: LD_INT 50
23932: PUSH
23933: EMPTY
23934: LIST
23935: PUSH
23936: EMPTY
23937: LIST
23938: LIST
23939: LIST
23940: LIST
23941: PPUSH
23942: CALL_OW 70
23946: ST_TO_ADDR
// if arm then
23947: LD_VAR 0 5
23951: IFFALSE 23983
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
23953: LD_VAR 0 1
23957: PPUSH
23958: LD_VAR 0 5
23962: PUSH
23963: LD_INT 1
23965: ARRAY
23966: PPUSH
23967: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
23971: LD_VAR 0 1
23975: PPUSH
23976: LD_INT 1
23978: PPUSH
23979: CALL_OW 183
// end ; end ; if driver in ruMech2 then
23983: LD_VAR 0 1
23987: PUSH
23988: LD_EXP 64
23992: IN
23993: IFFALSE 24207
// begin ComMoveToArea ( driver , ruBaseArea2 ) ;
23995: LD_VAR 0 1
23999: PPUSH
24000: LD_EXP 67
24004: PPUSH
24005: CALL_OW 113
// SetTag ( driver , tMech ) ;
24009: LD_VAR 0 1
24013: PPUSH
24014: LD_INT 7
24016: PPUSH
24017: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
24021: LD_ADDR_VAR 0 6
24025: PUSH
24026: LD_EXP 67
24030: PPUSH
24031: LD_INT 22
24033: PUSH
24034: LD_INT 3
24036: PUSH
24037: EMPTY
24038: LIST
24039: LIST
24040: PUSH
24041: LD_INT 30
24043: PUSH
24044: LD_INT 3
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: PUSH
24051: LD_INT 50
24053: PUSH
24054: EMPTY
24055: LIST
24056: PUSH
24057: EMPTY
24058: LIST
24059: LIST
24060: LIST
24061: PPUSH
24062: CALL_OW 70
24066: ST_TO_ADDR
// if fac then
24067: LD_VAR 0 6
24071: IFFALSE 24093
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
24073: LD_VAR 0 1
24077: PPUSH
24078: LD_VAR 0 6
24082: PUSH
24083: LD_INT 1
24085: ARRAY
24086: PPUSH
24087: CALL_OW 180
// exit ;
24091: GO 24207
// end ; arm := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
24093: LD_ADDR_VAR 0 5
24097: PUSH
24098: LD_EXP 67
24102: PPUSH
24103: LD_INT 22
24105: PUSH
24106: LD_INT 3
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: LD_INT 2
24115: PUSH
24116: LD_INT 30
24118: PUSH
24119: LD_INT 4
24121: PUSH
24122: EMPTY
24123: LIST
24124: LIST
24125: PUSH
24126: LD_INT 30
24128: PUSH
24129: LD_INT 5
24131: PUSH
24132: EMPTY
24133: LIST
24134: LIST
24135: PUSH
24136: EMPTY
24137: LIST
24138: LIST
24139: LIST
24140: PUSH
24141: LD_INT 3
24143: PUSH
24144: LD_INT 62
24146: PUSH
24147: EMPTY
24148: LIST
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: LD_INT 50
24156: PUSH
24157: EMPTY
24158: LIST
24159: PUSH
24160: EMPTY
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: PPUSH
24166: CALL_OW 70
24170: ST_TO_ADDR
// if arm then
24171: LD_VAR 0 5
24175: IFFALSE 24207
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
24177: LD_VAR 0 1
24181: PPUSH
24182: LD_VAR 0 5
24186: PUSH
24187: LD_INT 1
24189: ARRAY
24190: PPUSH
24191: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
24195: LD_VAR 0 1
24199: PPUSH
24200: LD_INT 1
24202: PPUSH
24203: CALL_OW 183
// end ; end ; end ; end ;
24207: PPOPN 7
24209: END
// on EndTheMissionRaised ( ev ) do begin end_the_mission_allowed = false ;
24210: LD_ADDR_OWVAR 57
24214: PUSH
24215: LD_INT 0
24217: ST_TO_ADDR
// FinishMission ;
24218: CALL 32066 0 0
// end ;
24222: PPOPN 1
24224: END
// on BuildingComplete ( b ) do var side , type ;
24225: LD_INT 0
24227: PPUSH
24228: PPUSH
// begin side := GetSide ( b ) ;
24229: LD_ADDR_VAR 0 2
24233: PUSH
24234: LD_VAR 0 1
24238: PPUSH
24239: CALL_OW 255
24243: ST_TO_ADDR
// type := GetBType ( b ) ;
24244: LD_ADDR_VAR 0 3
24248: PUSH
24249: LD_VAR 0 1
24253: PPUSH
24254: CALL_OW 266
24258: ST_TO_ADDR
// if side = 2 then
24259: LD_VAR 0 2
24263: PUSH
24264: LD_INT 2
24266: EQUAL
24267: IFFALSE 24287
// arBuildings := Delete ( arBuildings , 1 ) ;
24269: LD_ADDR_EXP 53
24273: PUSH
24274: LD_EXP 53
24278: PPUSH
24279: LD_INT 1
24281: PPUSH
24282: CALL_OW 3
24286: ST_TO_ADDR
// if side = 1 then
24287: LD_VAR 0 2
24291: PUSH
24292: LD_INT 1
24294: EQUAL
24295: IFFALSE 24357
// if type = b_depot and not hasBase then
24297: LD_VAR 0 3
24301: PUSH
24302: LD_INT 0
24304: EQUAL
24305: PUSH
24306: LD_EXP 9
24310: NOT
24311: AND
24312: IFFALSE 24357
// begin hasBase := true ;
24314: LD_ADDR_EXP 9
24318: PUSH
24319: LD_INT 1
24321: ST_TO_ADDR
// epsilon := b ;
24322: LD_ADDR_EXP 10
24326: PUSH
24327: LD_VAR 0 1
24331: ST_TO_ADDR
// SetBName ( b , epsilon ) ;
24332: LD_VAR 0 1
24336: PPUSH
24337: LD_STRING epsilon
24339: PPUSH
24340: CALL_OW 500
// SetRestrict ( b_depot , 1 , false ) ;
24344: LD_INT 0
24346: PPUSH
24347: LD_INT 1
24349: PPUSH
24350: LD_INT 0
24352: PPUSH
24353: CALL_OW 324
// end ; if side = 3 then
24357: LD_VAR 0 2
24361: PUSH
24362: LD_INT 3
24364: EQUAL
24365: IFFALSE 24651
// begin if IsInArea ( b , ruBaseArea ) then
24367: LD_VAR 0 1
24371: PPUSH
24372: LD_EXP 66
24376: PPUSH
24377: CALL_OW 308
24381: IFFALSE 24401
// ruBuildings := Delete ( ruBuildings , 1 ) ;
24383: LD_ADDR_EXP 76
24387: PUSH
24388: LD_EXP 76
24392: PPUSH
24393: LD_INT 1
24395: PPUSH
24396: CALL_OW 3
24400: ST_TO_ADDR
// if IsInArea ( b , ruBaseArea2 ) then
24401: LD_VAR 0 1
24405: PPUSH
24406: LD_EXP 67
24410: PPUSH
24411: CALL_OW 308
24415: IFFALSE 24435
// ruBuildings2 := Delete ( ruBuildings2 , 1 ) ;
24417: LD_ADDR_EXP 77
24421: PUSH
24422: LD_EXP 77
24426: PPUSH
24427: LD_INT 1
24429: PPUSH
24430: CALL_OW 3
24434: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
24435: LD_VAR 0 3
24439: PUSH
24440: LD_INT 0
24442: PUSH
24443: LD_INT 4
24445: PUSH
24446: LD_INT 2
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: LIST
24453: IN
24454: IFFALSE 24465
// ComUpgrade ( b ) ;
24456: LD_VAR 0 1
24460: PPUSH
24461: CALL_OW 146
// if type = b_lab then
24465: LD_VAR 0 3
24469: PUSH
24470: LD_INT 6
24472: EQUAL
24473: IFFALSE 24517
// if IsInArea ( b , ruBaseArea ) then
24475: LD_VAR 0 1
24479: PPUSH
24480: LD_EXP 66
24484: PPUSH
24485: CALL_OW 308
24489: IFFALSE 24505
// ComUpgradeLab ( b , b_lab_weapon ) else
24491: LD_VAR 0 1
24495: PPUSH
24496: LD_INT 10
24498: PPUSH
24499: CALL_OW 147
24503: GO 24517
// ComUpgradeLab ( b , b_lab_computer ) ;
24505: LD_VAR 0 1
24509: PPUSH
24510: LD_INT 12
24512: PPUSH
24513: CALL_OW 147
// if type = b_depot then
24517: LD_VAR 0 3
24521: PUSH
24522: LD_INT 0
24524: EQUAL
24525: IFFALSE 24651
// begin SetResourceType ( GetBase ( b ) , mat_cans , 2550 ) ;
24527: LD_VAR 0 1
24531: PPUSH
24532: CALL_OW 274
24536: PPUSH
24537: LD_INT 1
24539: PPUSH
24540: LD_INT 2550
24542: PPUSH
24543: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
24547: LD_VAR 0 1
24551: PPUSH
24552: CALL_OW 274
24556: PPUSH
24557: LD_INT 2
24559: PPUSH
24560: LD_INT 250
24562: PPUSH
24563: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 200 ) ;
24567: LD_VAR 0 1
24571: PPUSH
24572: CALL_OW 274
24576: PPUSH
24577: LD_INT 3
24579: PPUSH
24580: LD_INT 200
24582: PPUSH
24583: CALL_OW 277
// if IsInArea ( b , ruBaseArea ) then
24587: LD_VAR 0 1
24591: PPUSH
24592: LD_EXP 66
24596: PPUSH
24597: CALL_OW 308
24601: IFFALSE 24625
// begin ruBase := b ;
24603: LD_ADDR_EXP 68
24607: PUSH
24608: LD_VAR 0 1
24612: ST_TO_ADDR
// SetBName ( b , chuikov ) ;
24613: LD_VAR 0 1
24617: PPUSH
24618: LD_STRING chuikov
24620: PPUSH
24621: CALL_OW 500
// end ; if IsInArea ( b , ruBaseArea2 ) then
24625: LD_VAR 0 1
24629: PPUSH
24630: LD_EXP 67
24634: PPUSH
24635: CALL_OW 308
24639: IFFALSE 24651
// begin ruBase2 := b ;
24641: LD_ADDR_EXP 69
24645: PUSH
24646: LD_VAR 0 1
24650: ST_TO_ADDR
// end ; end ; end ; end ;
24651: PPOPN 3
24653: END
// on UpgradeComplete ( b ) do var side , type ;
24654: LD_INT 0
24656: PPUSH
24657: PPUSH
// begin side := GetSide ( b ) ;
24658: LD_ADDR_VAR 0 2
24662: PUSH
24663: LD_VAR 0 1
24667: PPUSH
24668: CALL_OW 255
24672: ST_TO_ADDR
// type := GetBType ( b ) ;
24673: LD_ADDR_VAR 0 3
24677: PUSH
24678: LD_VAR 0 1
24682: PPUSH
24683: CALL_OW 266
24687: ST_TO_ADDR
// if side = 3 then
24688: LD_VAR 0 2
24692: PUSH
24693: LD_INT 3
24695: EQUAL
24696: IFFALSE 24750
// if type = b_lab_half then
24698: LD_VAR 0 3
24702: PUSH
24703: LD_INT 7
24705: EQUAL
24706: IFFALSE 24750
// if IsInArea ( b , ruBaseArea ) then
24708: LD_VAR 0 1
24712: PPUSH
24713: LD_EXP 66
24717: PPUSH
24718: CALL_OW 308
24722: IFFALSE 24738
// ComUpgradeLab ( b , b_lab_spacetime ) else
24724: LD_VAR 0 1
24728: PPUSH
24729: LD_INT 14
24731: PPUSH
24732: CALL_OW 147
24736: GO 24750
// ComUpgradeLab ( b , b_lab_siberium ) ;
24738: LD_VAR 0 1
24742: PPUSH
24743: LD_INT 11
24745: PPUSH
24746: CALL_OW 147
// end ;
24750: PPOPN 3
24752: END
// on ResearchComplete ( tech , lab ) do var side ;
24753: LD_INT 0
24755: PPUSH
// begin side := GetSide ( lab ) ;
24756: LD_ADDR_VAR 0 3
24760: PUSH
24761: LD_VAR 0 2
24765: PPUSH
24766: CALL_OW 255
24770: ST_TO_ADDR
// if side = 2 then
24771: LD_VAR 0 3
24775: PUSH
24776: LD_INT 2
24778: EQUAL
24779: IFFALSE 24827
// begin arTech := Delete ( arTech , 1 ) ;
24781: LD_ADDR_EXP 52
24785: PUSH
24786: LD_EXP 52
24790: PPUSH
24791: LD_INT 1
24793: PPUSH
24794: CALL_OW 3
24798: ST_TO_ADDR
// if tech = tech_sibPow then
24799: LD_VAR 0 1
24803: PUSH
24804: LD_INT 21
24806: EQUAL
24807: IFFALSE 24813
// DArabTrait1 ;
24809: CALL 29020 0 0
// if tech = tech_sibEng then
24813: LD_VAR 0 1
24817: PUSH
24818: LD_INT 22
24820: EQUAL
24821: IFFALSE 24827
// DArabTrait2 ;
24823: CALL 29351 0 0
// end ; end ;
24827: PPOPN 3
24829: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
24830: LD_VAR 0 1
24834: PPUSH
24835: CALL 49812 0 1
// end ;
24839: PPOPN 1
24841: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
24842: LD_VAR 0 1
24846: PUSH
24847: LD_INT 1
24849: EQUAL
24850: PUSH
24851: LD_VAR 0 2
24855: PUSH
24856: LD_INT 2
24858: EQUAL
24859: AND
24860: PUSH
24861: LD_INT 1
24863: PPUSH
24864: LD_INT 2
24866: PPUSH
24867: CALL_OW 81
24871: PUSH
24872: LD_INT 1
24874: EQUAL
24875: AND
24876: IFFALSE 24882
// DAttackOnAlly ;
24878: CALL 26736 0 0
// end ;
24882: PPOPN 2
24884: END
// on SailEvent ( event ) do begin case event of EArabAttack :
24885: LD_VAR 0 1
24889: PUSH
24890: LD_INT 101
24892: DOUBLE
24893: EQUAL
24894: IFTRUE 24898
24896: GO 24905
24898: POP
// ArabAttack ; ERussianBaseC :
24899: CALL 7182 0 0
24903: GO 25057
24905: LD_INT 102
24907: DOUBLE
24908: EQUAL
24909: IFTRUE 24913
24911: GO 24934
24913: POP
// RussianBase ( ruForces union ruCommander , 1 ) ; ERussianBaseW :
24914: LD_EXP 59
24918: PUSH
24919: LD_EXP 61
24923: UNION
24924: PPUSH
24925: LD_INT 1
24927: PPUSH
24928: CALL 10774 0 2
24932: GO 25057
24934: LD_INT 103
24936: DOUBLE
24937: EQUAL
24938: IFTRUE 24942
24940: GO 24963
24942: POP
// RussianBase ( ruForces union ruCommander , 2 ) ; ERussianBaseE :
24943: LD_EXP 59
24947: PUSH
24948: LD_EXP 61
24952: UNION
24953: PPUSH
24954: LD_INT 2
24956: PPUSH
24957: CALL 10774 0 2
24961: GO 25057
24963: LD_INT 104
24965: DOUBLE
24966: EQUAL
24967: IFTRUE 24971
24969: GO 24992
24971: POP
// RussianBase ( ruForces union ruCommander , 3 ) ; ERussianBaseW2 :
24972: LD_EXP 59
24976: PUSH
24977: LD_EXP 61
24981: UNION
24982: PPUSH
24983: LD_INT 3
24985: PPUSH
24986: CALL 10774 0 2
24990: GO 25057
24992: LD_INT 105
24994: DOUBLE
24995: EQUAL
24996: IFTRUE 25000
24998: GO 25021
25000: POP
// RussianBase2 ( ruForces2 union ruCommander2 , 2 ) ; EExtraAttack :
25001: LD_EXP 60
25005: PUSH
25006: LD_EXP 62
25010: UNION
25011: PPUSH
25012: LD_INT 2
25014: PPUSH
25015: CALL 12283 0 2
25019: GO 25057
25021: LD_INT 106
25023: DOUBLE
25024: EQUAL
25025: IFTRUE 25029
25027: GO 25036
25029: POP
// RussianExtraAttack ; ESendRussianAttack :
25030: CALL 20188 0 0
25034: GO 25057
25036: LD_INT 107
25038: DOUBLE
25039: EQUAL
25040: IFTRUE 25044
25042: GO 25056
25044: POP
// SendRussianAttack ( russianWaveAttack ) ; end ;
25045: LD_EXP 18
25049: PPUSH
25050: CALL 21282 0 1
25054: GO 25057
25056: POP
// end ; end_of_file
25057: PPOPN 1
25059: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
25060: LD_INT 0
25062: PPUSH
25063: PPUSH
25064: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
25065: LD_ADDR_VAR 0 1
25069: PUSH
25070: LD_VAR 0 1
25074: PUSH
25075: LD_EXP 23
25079: PUSH
25080: LD_EXP 24
25084: PUSH
25085: LD_EXP 25
25089: PUSH
25090: LD_EXP 26
25094: PUSH
25095: LD_EXP 27
25099: PUSH
25100: LD_EXP 28
25104: PUSH
25105: LD_EXP 29
25109: PUSH
25110: LD_EXP 30
25114: PUSH
25115: LD_EXP 31
25119: PUSH
25120: LD_EXP 32
25124: PUSH
25125: LD_EXP 33
25129: PUSH
25130: LD_EXP 34
25134: PUSH
25135: LD_EXP 35
25139: PUSH
25140: LD_EXP 36
25144: PUSH
25145: LD_EXP 37
25149: PUSH
25150: LD_EXP 38
25154: PUSH
25155: LD_EXP 39
25159: PUSH
25160: LD_EXP 40
25164: PUSH
25165: LD_EXP 42
25169: PUSH
25170: LD_EXP 44
25174: PUSH
25175: EMPTY
25176: LIST
25177: LIST
25178: LIST
25179: LIST
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: LIST
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: DIFF
25197: ST_TO_ADDR
// if not characters then
25198: LD_VAR 0 1
25202: NOT
25203: IFFALSE 25207
// exit ;
25205: GO 25291
// speaker := characters [ rand ( 1 , Count ( characters ) ) ] ;
25207: LD_ADDR_VAR 0 6
25211: PUSH
25212: LD_VAR 0 1
25216: PUSH
25217: LD_INT 1
25219: PPUSH
25220: LD_VAR 0 1
25224: PPUSH
25225: CALL 56538 0 1
25229: PPUSH
25230: CALL_OW 12
25234: ARRAY
25235: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
25236: LD_VAR 0 6
25240: PPUSH
25241: CALL_OW 258
25245: PUSH
25246: LD_INT 1
25248: EQUAL
25249: IFFALSE 25267
// Say ( speaker , dialogMID ) else
25251: LD_VAR 0 6
25255: PPUSH
25256: LD_VAR 0 2
25260: PPUSH
25261: CALL_OW 88
25265: GO 25281
// Say ( speaker , dialogFID ) ;
25267: LD_VAR 0 6
25271: PPUSH
25272: LD_VAR 0 3
25276: PPUSH
25277: CALL_OW 88
// result := speaker ;
25281: LD_ADDR_VAR 0 4
25285: PUSH
25286: LD_VAR 0 6
25290: ST_TO_ADDR
// end ;
25291: LD_VAR 0 4
25295: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
25296: LD_INT 0
25298: PPUSH
25299: PPUSH
25300: PPUSH
// if btype = b_depot then
25301: LD_VAR 0 2
25305: PUSH
25306: LD_INT 0
25308: EQUAL
25309: IFFALSE 25321
// begin result := true ;
25311: LD_ADDR_VAR 0 3
25315: PUSH
25316: LD_INT 1
25318: ST_TO_ADDR
// exit ;
25319: GO 25437
// end ; pom := GetBase ( depot ) ;
25321: LD_ADDR_VAR 0 4
25325: PUSH
25326: LD_VAR 0 1
25330: PPUSH
25331: CALL_OW 274
25335: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25336: LD_ADDR_VAR 0 5
25340: PUSH
25341: LD_VAR 0 2
25345: PPUSH
25346: LD_VAR 0 1
25350: PPUSH
25351: CALL_OW 248
25355: PPUSH
25356: CALL_OW 450
25360: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
25361: LD_ADDR_VAR 0 3
25365: PUSH
25366: LD_VAR 0 4
25370: PPUSH
25371: LD_INT 1
25373: PPUSH
25374: CALL_OW 275
25378: PUSH
25379: LD_VAR 0 5
25383: PUSH
25384: LD_INT 1
25386: ARRAY
25387: GREATEREQUAL
25388: PUSH
25389: LD_VAR 0 4
25393: PPUSH
25394: LD_INT 2
25396: PPUSH
25397: CALL_OW 275
25401: PUSH
25402: LD_VAR 0 5
25406: PUSH
25407: LD_INT 2
25409: ARRAY
25410: GREATEREQUAL
25411: AND
25412: PUSH
25413: LD_VAR 0 4
25417: PPUSH
25418: LD_INT 3
25420: PPUSH
25421: CALL_OW 275
25425: PUSH
25426: LD_VAR 0 5
25430: PUSH
25431: LD_INT 3
25433: ARRAY
25434: GREATEREQUAL
25435: AND
25436: ST_TO_ADDR
// end ; end_of_file
25437: LD_VAR 0 3
25441: RET
// export function Action ; begin
25442: LD_INT 0
25444: PPUSH
// InGameOn ;
25445: CALL_OW 8
// CenterNowOnXY ( 25 , 35 ) ;
25449: LD_INT 25
25451: PPUSH
25452: LD_INT 35
25454: PPUSH
25455: CALL_OW 86
// RevealFogArea ( 1 , arBaseArea ) ;
25459: LD_INT 1
25461: PPUSH
25462: LD_INT 5
25464: PPUSH
25465: CALL_OW 332
// RevealFogArea ( 1 , epsilonSpawnArea ) ;
25469: LD_INT 1
25471: PPUSH
25472: LD_INT 4
25474: PPUSH
25475: CALL_OW 332
// wait ( 0 0$1.5 ) ;
25479: LD_INT 52
25481: PPUSH
25482: CALL_OW 67
// CenterNowOnUnits ( Simms ) ;
25486: LD_EXP 33
25490: PPUSH
25491: CALL_OW 87
// wait ( 0 0$3 ) ;
25495: LD_INT 105
25497: PPUSH
25498: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
25502: LD_EXP 23
25506: PPUSH
25507: CALL_OW 310
25511: PPUSH
25512: CALL_OW 85
// wait ( 0 0$1 ) ;
25516: LD_INT 35
25518: PPUSH
25519: CALL_OW 67
// if IsOk ( Gary ) then
25523: LD_EXP 32
25527: PPUSH
25528: CALL_OW 302
25532: IFFALSE 25570
// begin Say ( Gary , D2-Gary-1 ) ;
25534: LD_EXP 32
25538: PPUSH
25539: LD_STRING D2-Gary-1
25541: PPUSH
25542: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
25546: LD_EXP 23
25550: PPUSH
25551: LD_STRING D2-JMM-1
25553: PPUSH
25554: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
25558: LD_EXP 32
25562: PPUSH
25563: LD_STRING D2-Gary-2
25565: PPUSH
25566: CALL_OW 88
// end ; InGameOff ;
25570: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
25574: LD_STRING M1
25576: PPUSH
25577: CALL_OW 337
// SaveForQuickRestart ;
25581: CALL_OW 22
// end ;
25585: LD_VAR 0 1
25589: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var i , p ;
25590: LD_EXP 23
25594: PPUSH
25595: LD_EXP 33
25599: PPUSH
25600: CALL_OW 296
25604: PUSH
25605: LD_INT 15
25607: LESS
25608: IFFALSE 26568
25610: GO 25612
25612: DISABLE
25613: LD_INT 0
25615: PPUSH
25616: PPUSH
// begin wait ( 0 0$3 ) ;
25617: LD_INT 105
25619: PPUSH
25620: CALL_OW 67
// Video ( true ) ;
25624: LD_INT 1
25626: PPUSH
25627: CALL 92110 0 1
// ComExitVehicle ( JMM ) ;
25631: LD_EXP 23
25635: PPUSH
25636: CALL_OW 121
// AddComMoveUnit ( JMM , Simms ) ;
25640: LD_EXP 23
25644: PPUSH
25645: LD_EXP 33
25649: PPUSH
25650: CALL_OW 172
// CenterNowOnUnits ( JMM ) ;
25654: LD_EXP 23
25658: PPUSH
25659: CALL_OW 87
// if Truman then
25663: LD_EXP 43
25667: IFFALSE 25804
// begin ComMoveUnit ( Truman , JMM ) ;
25669: LD_EXP 43
25673: PPUSH
25674: LD_EXP 23
25678: PPUSH
25679: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
25683: LD_INT 35
25685: PPUSH
25686: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
25690: LD_EXP 43
25694: PPUSH
25695: LD_EXP 23
25699: PPUSH
25700: CALL_OW 296
25704: PUSH
25705: LD_INT 6
25707: LESS
25708: IFFALSE 25683
// ComTurnUnit ( Truman , JMM ) ;
25710: LD_EXP 43
25714: PPUSH
25715: LD_EXP 23
25719: PPUSH
25720: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
25724: LD_EXP 23
25728: PPUSH
25729: LD_EXP 43
25733: PPUSH
25734: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
25738: LD_EXP 43
25742: PPUSH
25743: LD_STRING D2-Tru-1
25745: PPUSH
25746: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
25750: LD_EXP 23
25754: PPUSH
25755: LD_STRING D2-JMM-Tru-1
25757: PPUSH
25758: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
25762: LD_EXP 43
25766: PPUSH
25767: LD_STRING D2-Tru-2
25769: PPUSH
25770: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
25774: LD_EXP 43
25778: PPUSH
25779: LD_INT 79
25781: PPUSH
25782: LD_INT 41
25784: PPUSH
25785: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
25789: LD_EXP 43
25793: PPUSH
25794: LD_INT 17
25796: PPUSH
25797: LD_INT 31
25799: PPUSH
25800: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
25804: LD_EXP 23
25808: PPUSH
25809: LD_EXP 33
25813: PPUSH
25814: CALL_OW 179
// p := 15 ;
25818: LD_ADDR_VAR 0 2
25822: PUSH
25823: LD_INT 15
25825: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25826: LD_INT 35
25828: PPUSH
25829: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25833: LD_EXP 33
25837: PUSH
25838: LD_EXP 35
25842: PUSH
25843: LD_EXP 34
25847: PUSH
25848: LD_EXP 36
25852: PUSH
25853: LD_EXP 30
25857: PUSH
25858: EMPTY
25859: LIST
25860: LIST
25861: LIST
25862: LIST
25863: LIST
25864: PPUSH
25865: LD_EXP 23
25869: PPUSH
25870: CALL_OW 112
// p := p - 1 ;
25874: LD_ADDR_VAR 0 2
25878: PUSH
25879: LD_VAR 0 2
25883: PUSH
25884: LD_INT 1
25886: MINUS
25887: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
25888: LD_EXP 23
25892: PPUSH
25893: LD_EXP 33
25897: PPUSH
25898: CALL_OW 296
25902: PUSH
25903: LD_INT 5
25905: LESS
25906: PUSH
25907: LD_VAR 0 2
25911: PUSH
25912: LD_INT 0
25914: LESSEQUAL
25915: OR
25916: IFFALSE 25826
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25918: LD_EXP 33
25922: PUSH
25923: LD_EXP 35
25927: PUSH
25928: LD_EXP 34
25932: PUSH
25933: LD_EXP 36
25937: PUSH
25938: LD_EXP 30
25942: PUSH
25943: EMPTY
25944: LIST
25945: LIST
25946: LIST
25947: LIST
25948: LIST
25949: PPUSH
25950: LD_EXP 23
25954: PPUSH
25955: CALL_OW 119
// if not IsInUnit ( JMM ) then
25959: LD_EXP 23
25963: PPUSH
25964: CALL_OW 310
25968: NOT
25969: IFFALSE 25985
// ComTurnUnit ( JMM , Simms ) ;
25971: LD_EXP 23
25975: PPUSH
25976: LD_EXP 33
25980: PPUSH
25981: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
25985: LD_EXP 33
25989: PUSH
25990: LD_EXP 35
25994: PUSH
25995: LD_EXP 34
25999: PUSH
26000: LD_EXP 36
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: LIST
26009: LIST
26010: PPUSH
26011: LD_EXP 23
26015: PPUSH
26016: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
26020: LD_EXP 23
26024: PUSH
26025: LD_EXP 33
26029: PUSH
26030: EMPTY
26031: LIST
26032: LIST
26033: PPUSH
26034: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
26038: LD_EXP 33
26042: PPUSH
26043: LD_STRING D2a-Sim-1
26045: PPUSH
26046: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
26050: LD_EXP 23
26054: PPUSH
26055: LD_STRING D2a-JMM-1
26057: PPUSH
26058: CALL_OW 88
// if IsOk ( Joan ) then
26062: LD_EXP 35
26066: PPUSH
26067: CALL_OW 302
26071: IFFALSE 26149
// begin if not IsInUnit ( JMM ) then
26073: LD_EXP 23
26077: PPUSH
26078: CALL_OW 310
26082: NOT
26083: IFFALSE 26099
// ComTurnUnit ( JMM , Joan ) ;
26085: LD_EXP 23
26089: PPUSH
26090: LD_EXP 35
26094: PPUSH
26095: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
26099: LD_EXP 35
26103: PPUSH
26104: LD_EXP 23
26108: PPUSH
26109: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
26113: LD_EXP 35
26117: PPUSH
26118: LD_STRING D2b-Joan-1
26120: PPUSH
26121: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
26125: LD_EXP 23
26129: PPUSH
26130: LD_STRING D2b-JMM-1
26132: PPUSH
26133: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
26137: LD_EXP 35
26141: PPUSH
26142: LD_STRING D2b-Joan-2
26144: PPUSH
26145: CALL_OW 88
// end ; if IsOk ( Denis ) then
26149: LD_EXP 34
26153: PPUSH
26154: CALL_OW 302
26158: IFFALSE 26212
// begin if not IsInUnit ( JMM ) then
26160: LD_EXP 23
26164: PPUSH
26165: CALL_OW 310
26169: NOT
26170: IFFALSE 26186
// ComTurnUnit ( JMM , Denis ) ;
26172: LD_EXP 23
26176: PPUSH
26177: LD_EXP 34
26181: PPUSH
26182: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
26186: LD_EXP 34
26190: PPUSH
26191: LD_EXP 23
26195: PPUSH
26196: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
26200: LD_EXP 34
26204: PPUSH
26205: LD_STRING D2c-Den-1
26207: PPUSH
26208: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
26212: LD_EXP 30
26216: PPUSH
26217: CALL_OW 302
26221: PUSH
26222: LD_STRING 08_Kikuchi
26224: PPUSH
26225: CALL_OW 28
26229: NOT
26230: AND
26231: IFFALSE 26326
// begin repeat wait ( 0 0$1 ) ;
26233: LD_INT 35
26235: PPUSH
26236: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
26240: LD_EXP 30
26244: PPUSH
26245: LD_EXP 23
26249: PPUSH
26250: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
26254: LD_EXP 23
26258: PPUSH
26259: LD_EXP 30
26263: PPUSH
26264: CALL_OW 296
26268: PUSH
26269: LD_INT 5
26271: LESS
26272: IFFALSE 26233
// ComTurnUnit ( Kikuchi , JMM ) ;
26274: LD_EXP 30
26278: PPUSH
26279: LD_EXP 23
26283: PPUSH
26284: CALL_OW 119
// if not IsInUnit ( JMM ) then
26288: LD_EXP 23
26292: PPUSH
26293: CALL_OW 310
26297: NOT
26298: IFFALSE 26314
// ComTurnUnit ( JMM , Kikuchi ) ;
26300: LD_EXP 23
26304: PPUSH
26305: LD_EXP 30
26309: PPUSH
26310: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
26314: LD_EXP 30
26318: PPUSH
26319: LD_STRING D3b-Yam-1
26321: PPUSH
26322: CALL_OW 88
// end ; if IsOk ( Khatam ) then
26326: LD_EXP 36
26330: PPUSH
26331: CALL_OW 302
26335: IFFALSE 26401
// begin if not IsInUnit ( JMM ) then
26337: LD_EXP 23
26341: PPUSH
26342: CALL_OW 310
26346: NOT
26347: IFFALSE 26363
// ComTurnUnit ( JMM , Khatam ) ;
26349: LD_EXP 23
26353: PPUSH
26354: LD_EXP 36
26358: PPUSH
26359: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
26363: LD_EXP 36
26367: PPUSH
26368: LD_EXP 23
26372: PPUSH
26373: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
26377: LD_EXP 23
26381: PPUSH
26382: LD_STRING D2c-JMM-1
26384: PPUSH
26385: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
26389: LD_EXP 36
26393: PPUSH
26394: LD_STRING D2c-Khat-1
26396: PPUSH
26397: CALL_OW 88
// end ; Video ( false ) ;
26401: LD_INT 0
26403: PPUSH
26404: CALL 92110 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
26408: LD_INT 22
26410: PUSH
26411: LD_INT 4
26413: PUSH
26414: EMPTY
26415: LIST
26416: LIST
26417: PPUSH
26418: CALL_OW 69
26422: PUSH
26423: LD_EXP 43
26427: DIFF
26428: PPUSH
26429: LD_INT 1
26431: PPUSH
26432: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
26436: LD_STRING M1a
26438: PPUSH
26439: CALL_OW 337
// SetRestrict ( b_depot , 1 , true ) ;
26443: LD_INT 0
26445: PPUSH
26446: LD_INT 1
26448: PPUSH
26449: LD_INT 1
26451: PPUSH
26452: CALL_OW 324
// joinedToEpsilon := true ;
26456: LD_ADDR_EXP 7
26460: PUSH
26461: LD_INT 1
26463: ST_TO_ADDR
// wait ( 0 0$30 ) ;
26464: LD_INT 1050
26466: PPUSH
26467: CALL_OW 67
// SpawnConvoy ;
26471: CALL 10310 0 0
// wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26475: LD_INT 25200
26477: PUSH
26478: LD_INT 2100
26480: PUSH
26481: LD_OWVAR 67
26485: MUL
26486: MINUS
26487: PPUSH
26488: CALL_OW 67
// firstAttack := true ;
26492: LD_ADDR_EXP 16
26496: PUSH
26497: LD_INT 1
26499: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26500: LD_INT 107
26502: PPUSH
26503: CALL_OW 427
// for i := 1 to Difficulty do
26507: LD_ADDR_VAR 0 1
26511: PUSH
26512: DOUBLE
26513: LD_INT 1
26515: DEC
26516: ST_TO_ADDR
26517: LD_OWVAR 67
26521: PUSH
26522: FOR_TO
26523: IFFALSE 26566
// begin wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26525: LD_INT 25200
26527: PUSH
26528: LD_INT 2100
26530: PUSH
26531: LD_OWVAR 67
26535: MUL
26536: MINUS
26537: PPUSH
26538: CALL_OW 67
// if not ruActiveAttacks then
26542: LD_EXP 22
26546: NOT
26547: IFFALSE 26557
// ruActiveAttacks := true ;
26549: LD_ADDR_EXP 22
26553: PUSH
26554: LD_INT 1
26556: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26557: LD_INT 107
26559: PPUSH
26560: CALL_OW 427
// end ;
26564: GO 26522
26566: POP
26567: POP
// end ;
26568: PPOPN 2
26570: END
// every 0 0$1 trigger IsOk ( Truman ) and joinedToEpsilon do
26571: LD_EXP 43
26575: PPUSH
26576: CALL_OW 302
26580: PUSH
26581: LD_EXP 7
26585: AND
26586: IFFALSE 26657
26588: GO 26590
26590: DISABLE
// begin enable ;
26591: ENABLE
// if not HasTask ( Truman ) then
26592: LD_EXP 43
26596: PPUSH
26597: CALL_OW 314
26601: NOT
26602: IFFALSE 26616
// ComMoveToArea ( Truman , removeArea ) ;
26604: LD_EXP 43
26608: PPUSH
26609: LD_INT 10
26611: PPUSH
26612: CALL_OW 113
// if IsAt ( Truman , 17 , 32 ) or IsInArea ( Truman , removeArea ) then
26616: LD_EXP 43
26620: PPUSH
26621: LD_INT 17
26623: PPUSH
26624: LD_INT 32
26626: PPUSH
26627: CALL_OW 307
26631: PUSH
26632: LD_EXP 43
26636: PPUSH
26637: LD_INT 10
26639: PPUSH
26640: CALL_OW 308
26644: OR
26645: IFFALSE 26657
// begin RemoveUnit ( Truman ) ;
26647: LD_EXP 43
26651: PPUSH
26652: CALL_OW 64
// disable ;
26656: DISABLE
// end ; end ;
26657: END
// export function DTankTeleport ( x , y ) ; begin
26658: LD_INT 0
26660: PPUSH
// DialogueOn ;
26661: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
26665: LD_VAR 0 1
26669: PPUSH
26670: LD_VAR 0 2
26674: PPUSH
26675: CALL_OW 86
// if IsOk ( Cyrus ) then
26679: LD_EXP 27
26683: PPUSH
26684: CALL_OW 302
26688: IFFALSE 26704
// Say ( Cyrus , D10-Cyrus-1 ) else
26690: LD_EXP 27
26694: PPUSH
26695: LD_STRING D10-Cyrus-1
26697: PPUSH
26698: CALL_OW 88
26702: GO 26727
// if IsOk ( JMM ) then
26704: LD_EXP 23
26708: PPUSH
26709: CALL_OW 302
26713: IFFALSE 26727
// Say ( JMM , D10-JMM-1 ) ;
26715: LD_EXP 23
26719: PPUSH
26720: LD_STRING D10-JMM-1
26722: PPUSH
26723: CALL_OW 88
// DialogueOff ;
26727: CALL_OW 7
// end ;
26731: LD_VAR 0 3
26735: RET
// export function DAttackOnAlly ; begin
26736: LD_INT 0
26738: PPUSH
// DialogueOn ;
26739: CALL_OW 6
// dwait ( 0 0$0.3 ) ;
26743: LD_INT 10
26745: PPUSH
26746: CALL_OW 68
// SayRadio ( Powell , D6b-Pow-1 ) ;
26750: LD_EXP 44
26754: PPUSH
26755: LD_STRING D6b-Pow-1
26757: PPUSH
26758: CALL_OW 94
// YouLost ( Powell ) ;
26762: LD_STRING Powell
26764: PPUSH
26765: CALL_OW 104
// DialogueOff ;
26769: CALL_OW 7
// end ;
26773: LD_VAR 0 1
26777: RET
// every 0 0$5 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
26778: LD_INT 5
26780: PPUSH
26781: LD_INT 22
26783: PUSH
26784: LD_INT 1
26786: PUSH
26787: EMPTY
26788: LIST
26789: LIST
26790: PUSH
26791: LD_INT 21
26793: PUSH
26794: LD_INT 3
26796: PUSH
26797: EMPTY
26798: LIST
26799: LIST
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PPUSH
26805: CALL_OW 70
26809: PUSH
26810: LD_INT 5
26812: PPUSH
26813: LD_INT 22
26815: PUSH
26816: LD_INT 1
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: LD_INT 21
26825: PUSH
26826: LD_INT 2
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: EMPTY
26834: LIST
26835: LIST
26836: PPUSH
26837: CALL_OW 70
26841: OR
26842: PUSH
26843: LD_INT 1
26845: PPUSH
26846: LD_INT 2
26848: PPUSH
26849: CALL_OW 81
26853: PUSH
26854: LD_INT 1
26856: EQUAL
26857: AND
26858: IFFALSE 27093
26860: GO 26862
26862: DISABLE
// begin if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26863: LD_INT 5
26865: PPUSH
26866: LD_INT 22
26868: PUSH
26869: LD_INT 1
26871: PUSH
26872: EMPTY
26873: LIST
26874: LIST
26875: PUSH
26876: LD_INT 21
26878: PUSH
26879: LD_INT 3
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: PUSH
26886: EMPTY
26887: LIST
26888: LIST
26889: PPUSH
26890: CALL_OW 70
26894: PUSH
26895: LD_INT 5
26897: PPUSH
26898: LD_INT 22
26900: PUSH
26901: LD_INT 1
26903: PUSH
26904: EMPTY
26905: LIST
26906: LIST
26907: PUSH
26908: LD_INT 21
26910: PUSH
26911: LD_INT 2
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: EMPTY
26919: LIST
26920: LIST
26921: PPUSH
26922: CALL_OW 70
26926: OR
26927: PUSH
26928: LD_INT 1
26930: PPUSH
26931: LD_INT 2
26933: PPUSH
26934: CALL_OW 81
26938: PUSH
26939: LD_INT 1
26941: EQUAL
26942: AND
26943: IFFALSE 26952
// Query ( QAttack ) ;
26945: LD_STRING QAttack
26947: PPUSH
26948: CALL_OW 97
// wait ( 0 0$20 ) ;
26952: LD_INT 700
26954: PPUSH
26955: CALL_OW 67
// repeat wait ( 0 0$10 ) ;
26959: LD_INT 350
26961: PPUSH
26962: CALL_OW 67
// if arabianAttack then
26966: LD_EXP 4
26970: IFFALSE 26974
// exit ;
26972: GO 27093
// until ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend ;
26974: LD_INT 5
26976: PPUSH
26977: LD_INT 22
26979: PUSH
26980: LD_INT 1
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: PUSH
26987: LD_INT 21
26989: PUSH
26990: LD_INT 3
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PPUSH
27001: CALL_OW 70
27005: PUSH
27006: LD_INT 5
27008: PPUSH
27009: LD_INT 22
27011: PUSH
27012: LD_INT 1
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: PUSH
27019: LD_INT 21
27021: PUSH
27022: LD_INT 2
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PPUSH
27033: CALL_OW 70
27037: OR
27038: PUSH
27039: LD_INT 1
27041: PPUSH
27042: LD_INT 2
27044: PPUSH
27045: CALL_OW 81
27049: PUSH
27050: LD_INT 1
27052: EQUAL
27053: AND
27054: IFFALSE 26959
// InGameOn ;
27056: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
27060: LD_INT 73
27062: PPUSH
27063: LD_INT 18
27065: PPUSH
27066: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
27070: LD_EXP 44
27074: PPUSH
27075: LD_STRING D6b-Pow-1
27077: PPUSH
27078: CALL_OW 94
// YouLost ( Powell ) ;
27082: LD_STRING Powell
27084: PPUSH
27085: CALL_OW 104
// InGameOff ;
27089: CALL_OW 9
// end ;
27093: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
27094: LD_INT 12
27096: PPUSH
27097: LD_INT 1
27099: PPUSH
27100: CALL_OW 321
27104: PUSH
27105: LD_INT 2
27107: EQUAL
27108: IFFALSE 27120
27110: GO 27112
27112: DISABLE
// ChangeMissionObjectives ( M2b ) ;
27113: LD_STRING M2b
27115: PPUSH
27116: CALL_OW 337
27120: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
27121: LD_INT 32
27123: PPUSH
27124: LD_INT 1
27126: PPUSH
27127: CALL_OW 321
27131: PUSH
27132: LD_INT 2
27134: EQUAL
27135: IFFALSE 27147
27137: GO 27139
27139: DISABLE
// ChangeMissionObjectives ( M2c ) ;
27140: LD_STRING M2c
27142: PPUSH
27143: CALL_OW 337
27147: END
// every 0 0$1 trigger arabianAttack and arabianAttackSpawned and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and UnitFilter ( arAttackersVeh , [ f_ok ] ) = 0 and UnitFilter ( arAttackersInf , [ f_ok ] ) = 0 do
27148: LD_EXP 4
27152: PUSH
27153: LD_EXP 12
27157: AND
27158: PUSH
27159: LD_INT 22
27161: PUSH
27162: LD_INT 2
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: PUSH
27169: LD_INT 21
27171: PUSH
27172: LD_INT 1
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: PUSH
27179: EMPTY
27180: LIST
27181: LIST
27182: PPUSH
27183: CALL_OW 69
27187: PUSH
27188: LD_INT 0
27190: EQUAL
27191: AND
27192: PUSH
27193: LD_EXP 58
27197: PPUSH
27198: LD_INT 50
27200: PUSH
27201: EMPTY
27202: LIST
27203: PPUSH
27204: CALL_OW 72
27208: PUSH
27209: LD_INT 0
27211: EQUAL
27212: AND
27213: PUSH
27214: LD_EXP 57
27218: PPUSH
27219: LD_INT 50
27221: PUSH
27222: EMPTY
27223: LIST
27224: PPUSH
27225: CALL_OW 72
27229: PUSH
27230: LD_INT 0
27232: EQUAL
27233: AND
27234: IFFALSE 27254
27236: GO 27238
27238: DISABLE
// begin arabianDefeated := true ;
27239: LD_ADDR_EXP 8
27243: PUSH
27244: LD_INT 1
27246: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
27247: LD_STRING M4a
27249: PPUSH
27250: CALL_OW 337
// end ;
27254: END
// every 0 0$1 trigger GetTech ( tech_Sib1 , 1 ) = state_researched and GetTech ( tech_Sib2 , 1 ) = state_researched and GetTech ( tech_SibPow , 1 ) = state_researched and GetTech ( tech_SibEng , 1 ) = state_researched do
27255: LD_INT 54
27257: PPUSH
27258: LD_INT 1
27260: PPUSH
27261: CALL_OW 321
27265: PUSH
27266: LD_INT 2
27268: EQUAL
27269: PUSH
27270: LD_INT 55
27272: PPUSH
27273: LD_INT 1
27275: PPUSH
27276: CALL_OW 321
27280: PUSH
27281: LD_INT 2
27283: EQUAL
27284: AND
27285: PUSH
27286: LD_INT 21
27288: PPUSH
27289: LD_INT 1
27291: PPUSH
27292: CALL_OW 321
27296: PUSH
27297: LD_INT 2
27299: EQUAL
27300: AND
27301: PUSH
27302: LD_INT 22
27304: PPUSH
27305: LD_INT 1
27307: PPUSH
27308: CALL_OW 321
27312: PUSH
27313: LD_INT 2
27315: EQUAL
27316: AND
27317: IFFALSE 27329
27319: GO 27321
27321: DISABLE
// ChangeMissionObjectives ( M2a ) ;
27322: LD_STRING M2a
27324: PPUSH
27325: CALL_OW 337
27329: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) do var garySpeaker , deltaSpeaker , tmp1 , tmp2 , tmp3 ;
27330: LD_INT 22
27332: PUSH
27333: LD_INT 1
27335: PUSH
27336: EMPTY
27337: LIST
27338: LIST
27339: PUSH
27340: LD_INT 3
27342: PUSH
27343: LD_INT 57
27345: PUSH
27346: EMPTY
27347: LIST
27348: PUSH
27349: EMPTY
27350: LIST
27351: LIST
27352: PUSH
27353: LD_INT 63
27355: PUSH
27356: LD_INT 11
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: LIST
27367: PPUSH
27368: CALL_OW 69
27372: IFFALSE 28598
27374: GO 27376
27376: DISABLE
27377: LD_INT 0
27379: PPUSH
27380: PPUSH
27381: PPUSH
27382: PPUSH
27383: PPUSH
// begin garySpeaker := IsOk ( Gary ) ;
27384: LD_ADDR_VAR 0 1
27388: PUSH
27389: LD_EXP 32
27393: PPUSH
27394: CALL_OW 302
27398: ST_TO_ADDR
// deltaSpeaker := IsOk ( DeltaDoctor ) ;
27399: LD_ADDR_VAR 0 2
27403: PUSH
27404: LD_EXP 39
27408: PPUSH
27409: CALL_OW 302
27413: ST_TO_ADDR
// tmp1 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27414: LD_ADDR_VAR 0 3
27418: PUSH
27419: LD_INT 22
27421: PUSH
27422: LD_INT 1
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 50
27431: PUSH
27432: EMPTY
27433: LIST
27434: PUSH
27435: LD_INT 25
27437: PUSH
27438: LD_INT 4
27440: PUSH
27441: EMPTY
27442: LIST
27443: LIST
27444: PUSH
27445: LD_INT 26
27447: PUSH
27448: LD_INT 1
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: PUSH
27455: EMPTY
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: PPUSH
27461: CALL_OW 69
27465: PUSH
27466: LD_EXP 23
27470: PUSH
27471: LD_EXP 24
27475: PUSH
27476: LD_EXP 25
27480: PUSH
27481: LD_EXP 26
27485: PUSH
27486: LD_EXP 27
27490: PUSH
27491: LD_EXP 28
27495: PUSH
27496: LD_EXP 29
27500: PUSH
27501: LD_EXP 30
27505: PUSH
27506: LD_EXP 31
27510: PUSH
27511: LD_EXP 32
27515: PUSH
27516: LD_EXP 33
27520: PUSH
27521: LD_EXP 34
27525: PUSH
27526: LD_EXP 35
27530: PUSH
27531: LD_EXP 36
27535: PUSH
27536: LD_EXP 37
27540: PUSH
27541: LD_EXP 38
27545: PUSH
27546: LD_EXP 39
27550: PUSH
27551: LD_EXP 40
27555: PUSH
27556: LD_EXP 42
27560: PUSH
27561: LD_EXP 44
27565: PUSH
27566: EMPTY
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: LIST
27573: LIST
27574: LIST
27575: LIST
27576: LIST
27577: LIST
27578: LIST
27579: LIST
27580: LIST
27581: LIST
27582: LIST
27583: LIST
27584: LIST
27585: LIST
27586: LIST
27587: DIFF
27588: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27589: LD_ADDR_VAR 0 4
27593: PUSH
27594: LD_INT 22
27596: PUSH
27597: LD_INT 1
27599: PUSH
27600: EMPTY
27601: LIST
27602: LIST
27603: PUSH
27604: LD_INT 50
27606: PUSH
27607: EMPTY
27608: LIST
27609: PUSH
27610: LD_INT 26
27612: PUSH
27613: LD_INT 1
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: PUSH
27620: LD_INT 2
27622: PUSH
27623: LD_INT 25
27625: PUSH
27626: LD_INT 1
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: PUSH
27633: LD_INT 25
27635: PUSH
27636: LD_INT 2
27638: PUSH
27639: EMPTY
27640: LIST
27641: LIST
27642: PUSH
27643: LD_INT 25
27645: PUSH
27646: LD_INT 3
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: PUSH
27659: EMPTY
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: PPUSH
27665: CALL_OW 69
27669: PUSH
27670: LD_EXP 23
27674: PUSH
27675: LD_EXP 24
27679: PUSH
27680: LD_EXP 25
27684: PUSH
27685: LD_EXP 26
27689: PUSH
27690: LD_EXP 27
27694: PUSH
27695: LD_EXP 28
27699: PUSH
27700: LD_EXP 29
27704: PUSH
27705: LD_EXP 30
27709: PUSH
27710: LD_EXP 31
27714: PUSH
27715: LD_EXP 32
27719: PUSH
27720: LD_EXP 33
27724: PUSH
27725: LD_EXP 34
27729: PUSH
27730: LD_EXP 35
27734: PUSH
27735: LD_EXP 36
27739: PUSH
27740: LD_EXP 37
27744: PUSH
27745: LD_EXP 38
27749: PUSH
27750: LD_EXP 39
27754: PUSH
27755: LD_EXP 40
27759: PUSH
27760: LD_EXP 42
27764: PUSH
27765: LD_EXP 44
27769: PUSH
27770: EMPTY
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: DIFF
27792: ST_TO_ADDR
// if tmp1 then
27793: LD_VAR 0 3
27797: IFFALSE 27813
// tmp1 := tmp1 [ 1 ] ;
27799: LD_ADDR_VAR 0 3
27803: PUSH
27804: LD_VAR 0 3
27808: PUSH
27809: LD_INT 1
27811: ARRAY
27812: ST_TO_ADDR
// if tmp2 then
27813: LD_VAR 0 4
27817: IFFALSE 27833
// tmp2 := tmp2 [ 1 ] ;
27819: LD_ADDR_VAR 0 4
27823: PUSH
27824: LD_VAR 0 4
27828: PUSH
27829: LD_INT 1
27831: ARRAY
27832: ST_TO_ADDR
// if ( garySpeaker or tmp2 ) and ( deltaSpeaker or tmp1 ) then
27833: LD_VAR 0 1
27837: PUSH
27838: LD_VAR 0 4
27842: OR
27843: PUSH
27844: LD_VAR 0 2
27848: PUSH
27849: LD_VAR 0 3
27853: OR
27854: AND
27855: IFFALSE 28049
// begin DialogueOn ;
27857: CALL_OW 6
// if deltaSpeaker then
27861: LD_VAR 0 2
27865: IFFALSE 27881
// Say ( DeltaDoctor , D3-Sci1-1 ) else
27867: LD_EXP 39
27871: PPUSH
27872: LD_STRING D3-Sci1-1
27874: PPUSH
27875: CALL_OW 88
27879: GO 27893
// Say ( tmp1 , D3-Sci1-1 ) ;
27881: LD_VAR 0 3
27885: PPUSH
27886: LD_STRING D3-Sci1-1
27888: PPUSH
27889: CALL_OW 88
// if garySpeaker then
27893: LD_VAR 0 1
27897: IFFALSE 27913
// Say ( Gary , D3-Gary-1 ) else
27899: LD_EXP 32
27903: PPUSH
27904: LD_STRING D3-Gary-1
27906: PPUSH
27907: CALL_OW 88
27911: GO 27925
// Say ( tmp2 , D3-Gary-1 ) ;
27913: LD_VAR 0 4
27917: PPUSH
27918: LD_STRING D3-Gary-1
27920: PPUSH
27921: CALL_OW 88
// if deltaSpeaker then
27925: LD_VAR 0 2
27929: IFFALSE 27945
// Say ( DeltaDoctor , D3-Sci1-2 ) else
27931: LD_EXP 39
27935: PPUSH
27936: LD_STRING D3-Sci1-2
27938: PPUSH
27939: CALL_OW 88
27943: GO 27957
// Say ( tmp1 , D3-Sci1-2 ) ;
27945: LD_VAR 0 3
27949: PPUSH
27950: LD_STRING D3-Sci1-2
27952: PPUSH
27953: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
27957: LD_EXP 23
27961: PPUSH
27962: LD_STRING D3-JMM-2
27964: PPUSH
27965: CALL_OW 88
// if deltaSpeaker then
27969: LD_VAR 0 2
27973: IFFALSE 27989
// Say ( DeltaDoctor , D3-Sci1-3 ) else
27975: LD_EXP 39
27979: PPUSH
27980: LD_STRING D3-Sci1-3
27982: PPUSH
27983: CALL_OW 88
27987: GO 28001
// Say ( tmp1 , D3-Sci1-3 ) ;
27989: LD_VAR 0 3
27993: PPUSH
27994: LD_STRING D3-Sci1-3
27996: PPUSH
27997: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
28001: LD_EXP 23
28005: PPUSH
28006: LD_STRING D3-JMM-3
28008: PPUSH
28009: CALL_OW 88
// if deltaSpeaker then
28013: LD_VAR 0 2
28017: IFFALSE 28033
// Say ( DeltaDoctor , D3-Sci1-4 ) else
28019: LD_EXP 39
28023: PPUSH
28024: LD_STRING D3-Sci1-4
28026: PPUSH
28027: CALL_OW 88
28031: GO 28045
// Say ( tmp1 , D3-Sci1-4 ) ;
28033: LD_VAR 0 3
28037: PPUSH
28038: LD_STRING D3-Sci1-4
28040: PPUSH
28041: CALL_OW 88
// DialogueOff ;
28045: CALL_OW 7
// end ; SetTech ( tech_LasSight , 1 , state_enabled ) ;
28049: LD_INT 12
28051: PPUSH
28052: LD_INT 1
28054: PPUSH
28055: LD_INT 1
28057: PPUSH
28058: CALL_OW 322
// SetTech ( tech_Rocket , 1 , state_enabled ) ;
28062: LD_INT 40
28064: PPUSH
28065: LD_INT 1
28067: PPUSH
28068: LD_INT 1
28070: PPUSH
28071: CALL_OW 322
// SetTech ( tech_AI , 1 , state_enabled ) ;
28075: LD_INT 32
28077: PPUSH
28078: LD_INT 1
28080: PPUSH
28081: LD_INT 1
28083: PPUSH
28084: CALL_OW 322
// SetRestrict ( b_turret , 1 , true ) ;
28088: LD_INT 33
28090: PPUSH
28091: LD_INT 1
28093: PPUSH
28094: LD_INT 1
28096: PPUSH
28097: CALL_OW 324
// SetRestrict ( b_lab_computer , 1 , true ) ;
28101: LD_INT 12
28103: PPUSH
28104: LD_INT 1
28106: PPUSH
28107: LD_INT 1
28109: PPUSH
28110: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
28114: LD_STRING M2
28116: PPUSH
28117: CALL_OW 337
// wait ( 3 3$0 ) ;
28121: LD_INT 6300
28123: PPUSH
28124: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
28128: LD_INT 35
28130: PPUSH
28131: CALL_OW 67
// until not InBattle ( 1 ) ;
28135: LD_INT 1
28137: PPUSH
28138: CALL_OW 463
28142: NOT
28143: IFFALSE 28128
// if IsOk ( Simms ) and deltaSpeaker then
28145: LD_EXP 33
28149: PPUSH
28150: CALL_OW 302
28154: PUSH
28155: LD_VAR 0 2
28159: AND
28160: IFFALSE 28329
// begin DialogueOn ;
28162: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28166: LD_EXP 33
28170: PPUSH
28171: LD_STRING D3a-Sim-1
28173: PPUSH
28174: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
28178: LD_EXP 39
28182: PPUSH
28183: LD_STRING D3a-Sci1-1
28185: PPUSH
28186: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28190: LD_EXP 33
28194: PPUSH
28195: LD_STRING D3a-Sim-2
28197: PPUSH
28198: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
28202: LD_EXP 39
28206: PPUSH
28207: LD_STRING D3a-Sci1-2
28209: PPUSH
28210: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28214: LD_EXP 33
28218: PPUSH
28219: LD_STRING D3a-Sim-3
28221: PPUSH
28222: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
28226: LD_EXP 39
28230: PPUSH
28231: LD_STRING D3a-Sci1-3
28233: PPUSH
28234: CALL_OW 88
// if IsOK ( Joan ) then
28238: LD_EXP 35
28242: PPUSH
28243: CALL_OW 302
28247: IFFALSE 28263
// Say ( Simms , D3a-Sim-4 ) else
28249: LD_EXP 33
28253: PPUSH
28254: LD_STRING D3a-Sim-4
28256: PPUSH
28257: CALL_OW 88
28261: GO 28275
// Say ( Simms , D3a-Sim-4a ) ;
28263: LD_EXP 33
28267: PPUSH
28268: LD_STRING D3a-Sim-4a
28270: PPUSH
28271: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
28275: LD_EXP 39
28279: PPUSH
28280: LD_STRING D3a-Sci1-4
28282: PPUSH
28283: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28287: LD_EXP 33
28291: PPUSH
28292: LD_STRING D3a-Sim-5
28294: PPUSH
28295: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
28299: LD_EXP 39
28303: PPUSH
28304: LD_STRING D3a-Sci1-5
28306: PPUSH
28307: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28311: LD_EXP 33
28315: PPUSH
28316: LD_STRING D3a-Sim-6
28318: PPUSH
28319: CALL_OW 88
// DialogueOff ;
28323: CALL_OW 7
// end else
28327: GO 28598
// begin tmp3 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
28329: LD_ADDR_VAR 0 5
28333: PUSH
28334: LD_INT 22
28336: PUSH
28337: LD_INT 1
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: LD_INT 26
28346: PUSH
28347: LD_INT 1
28349: PUSH
28350: EMPTY
28351: LIST
28352: LIST
28353: PUSH
28354: LD_INT 25
28356: PUSH
28357: LD_INT 4
28359: PUSH
28360: EMPTY
28361: LIST
28362: LIST
28363: PUSH
28364: EMPTY
28365: LIST
28366: LIST
28367: LIST
28368: PPUSH
28369: CALL_OW 69
28373: PUSH
28374: LD_EXP 23
28378: PUSH
28379: LD_EXP 29
28383: PUSH
28384: LD_EXP 28
28388: PUSH
28389: LD_EXP 33
28393: PUSH
28394: LD_EXP 36
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: LIST
28403: LIST
28404: LIST
28405: DIFF
28406: ST_TO_ADDR
// if tmp3 then
28407: LD_VAR 0 5
28411: IFFALSE 28598
// begin DialogueOn ;
28413: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28417: LD_EXP 33
28421: PPUSH
28422: LD_STRING D3a-Sim-1
28424: PPUSH
28425: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
28429: LD_VAR 0 5
28433: PUSH
28434: LD_INT 1
28436: ARRAY
28437: PPUSH
28438: LD_STRING D3a-Sci1-1
28440: PPUSH
28441: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28445: LD_EXP 33
28449: PPUSH
28450: LD_STRING D3a-Sim-2
28452: PPUSH
28453: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
28457: LD_VAR 0 5
28461: PUSH
28462: LD_INT 1
28464: ARRAY
28465: PPUSH
28466: LD_STRING D3a-Sci1-2
28468: PPUSH
28469: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28473: LD_EXP 33
28477: PPUSH
28478: LD_STRING D3a-Sim-3
28480: PPUSH
28481: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
28485: LD_VAR 0 5
28489: PUSH
28490: LD_INT 1
28492: ARRAY
28493: PPUSH
28494: LD_STRING D3a-Sci1-3
28496: PPUSH
28497: CALL_OW 88
// if IsOK ( Joan ) then
28501: LD_EXP 35
28505: PPUSH
28506: CALL_OW 302
28510: IFFALSE 28526
// Say ( Simms , D3a-Sim-4 ) else
28512: LD_EXP 33
28516: PPUSH
28517: LD_STRING D3a-Sim-4
28519: PPUSH
28520: CALL_OW 88
28524: GO 28538
// Say ( Simms , D3a-Sim-4a ) ;
28526: LD_EXP 33
28530: PPUSH
28531: LD_STRING D3a-Sim-4a
28533: PPUSH
28534: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
28538: LD_VAR 0 5
28542: PUSH
28543: LD_INT 1
28545: ARRAY
28546: PPUSH
28547: LD_STRING D3a-Sci1-4
28549: PPUSH
28550: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28554: LD_EXP 33
28558: PPUSH
28559: LD_STRING D3a-Sim-5
28561: PPUSH
28562: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
28566: LD_VAR 0 5
28570: PUSH
28571: LD_INT 1
28573: ARRAY
28574: PPUSH
28575: LD_STRING D3a-Sci1-5
28577: PPUSH
28578: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28582: LD_EXP 33
28586: PPUSH
28587: LD_STRING D3a-Sim-6
28589: PPUSH
28590: CALL_OW 88
// DialogueOff ;
28594: CALL_OW 7
// end ; end ; end ;
28598: PPOPN 5
28600: END
// export function DRussianNextAttack ; begin
28601: LD_INT 0
28603: PPUSH
// SayRadio ( AmScout , D4-FSol1-2 ) ;
28604: LD_EXP 40
28608: PPUSH
28609: LD_STRING D4-FSol1-2
28611: PPUSH
28612: CALL_OW 94
// end ;
28616: LD_VAR 0 1
28620: RET
// export function DRussianConvoy ; begin
28621: LD_INT 0
28623: PPUSH
// SayRadio ( AmScout , D4-FSol1-1 ) ;
28624: LD_EXP 40
28628: PPUSH
28629: LD_STRING D4-FSol1-1
28631: PPUSH
28632: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
28636: LD_STRING M3
28638: PPUSH
28639: CALL_OW 337
// end ;
28643: LD_VAR 0 1
28647: RET
// export function DRussianSpaceAmmo ( unit ) ; begin
28648: LD_INT 0
28650: PPUSH
// CenterNowOnUnits ( unit ) ;
28651: LD_VAR 0 1
28655: PPUSH
28656: CALL_OW 87
// DialogueOn ;
28660: CALL_OW 6
// if IsOK ( Cyrus ) then
28664: LD_EXP 27
28668: PPUSH
28669: CALL_OW 302
28673: IFFALSE 28689
// Say ( Cyrus , D9a-Cyrus-1 ) else
28675: LD_EXP 27
28679: PPUSH
28680: LD_STRING D9a-Cyrus-1
28682: PPUSH
28683: CALL_OW 88
28687: GO 28811
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
28689: LD_INT 22
28691: PUSH
28692: LD_INT 1
28694: PUSH
28695: EMPTY
28696: LIST
28697: LIST
28698: PUSH
28699: LD_INT 26
28701: PUSH
28702: LD_INT 1
28704: PUSH
28705: EMPTY
28706: LIST
28707: LIST
28708: PUSH
28709: LD_INT 2
28711: PUSH
28712: LD_INT 25
28714: PUSH
28715: LD_INT 1
28717: PUSH
28718: EMPTY
28719: LIST
28720: LIST
28721: PUSH
28722: LD_INT 25
28724: PUSH
28725: LD_INT 2
28727: PUSH
28728: EMPTY
28729: LIST
28730: LIST
28731: PUSH
28732: LD_INT 25
28734: PUSH
28735: LD_INT 3
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 25
28744: PUSH
28745: LD_INT 4
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 25
28754: PUSH
28755: LD_INT 5
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: LIST
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: LIST
28774: PPUSH
28775: CALL_OW 69
28779: PUSH
28780: LD_EXP 23
28784: PUSH
28785: LD_EXP 36
28789: PUSH
28790: LD_EXP 27
28794: PUSH
28795: EMPTY
28796: LIST
28797: LIST
28798: LIST
28799: DIFF
28800: PPUSH
28801: LD_STRING D9a-Sol1-1
28803: PPUSH
28804: LD_STRING D9a-Sol1-1
28806: PPUSH
28807: CALL 25060 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
28811: LD_INT 22
28813: PUSH
28814: LD_INT 1
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 26
28823: PUSH
28824: LD_INT 1
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 2
28833: PUSH
28834: LD_INT 25
28836: PUSH
28837: LD_INT 1
28839: PUSH
28840: EMPTY
28841: LIST
28842: LIST
28843: PUSH
28844: LD_INT 25
28846: PUSH
28847: LD_INT 2
28849: PUSH
28850: EMPTY
28851: LIST
28852: LIST
28853: PUSH
28854: LD_INT 25
28856: PUSH
28857: LD_INT 3
28859: PUSH
28860: EMPTY
28861: LIST
28862: LIST
28863: PUSH
28864: LD_INT 25
28866: PUSH
28867: LD_INT 4
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 25
28876: PUSH
28877: LD_INT 5
28879: PUSH
28880: EMPTY
28881: LIST
28882: LIST
28883: PUSH
28884: EMPTY
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: LIST
28896: PPUSH
28897: CALL_OW 69
28901: PUSH
28902: LD_EXP 23
28906: PUSH
28907: LD_EXP 36
28911: PUSH
28912: LD_EXP 27
28916: PUSH
28917: EMPTY
28918: LIST
28919: LIST
28920: LIST
28921: DIFF
28922: PPUSH
28923: LD_STRING D9b-Sol1-1
28925: PPUSH
28926: LD_STRING D9b-Sol1-1
28928: PPUSH
28929: CALL 25060 0 3
// if LoadVariable ( 09_arInfo , 0 ) then
28933: LD_STRING 09_arInfo
28935: PPUSH
28936: LD_INT 0
28938: PPUSH
28939: CALL_OW 30
28943: IFFALSE 28957
// Say ( JMM , D9a-JMM-1 ) ;
28945: LD_EXP 23
28949: PPUSH
28950: LD_STRING D9a-JMM-1
28952: PPUSH
28953: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
28957: LD_EXP 23
28961: PPUSH
28962: LD_STRING D9c-JMM-1
28964: PPUSH
28965: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) then
28969: LD_INT 22
28971: PUSH
28972: LD_INT 1
28974: PUSH
28975: EMPTY
28976: LIST
28977: LIST
28978: PUSH
28979: LD_INT 25
28981: PUSH
28982: LD_INT 5
28984: PUSH
28985: EMPTY
28986: LIST
28987: LIST
28988: PUSH
28989: EMPTY
28990: LIST
28991: LIST
28992: PPUSH
28993: CALL_OW 69
28997: IFFALSE 29011
// Say ( JMM , D9c-JMM-1a ) ;
28999: LD_EXP 23
29003: PPUSH
29004: LD_STRING D9c-JMM-1a
29006: PPUSH
29007: CALL_OW 88
// DialogueOff ;
29011: CALL_OW 7
// end ;
29015: LD_VAR 0 2
29019: RET
// export function DArabTrait1 ; var tmp ; begin
29020: LD_INT 0
29022: PPUSH
29023: PPUSH
// if IsOk ( DeltaDoctor ) then
29024: LD_EXP 39
29028: PPUSH
29029: CALL_OW 302
29033: IFFALSE 29047
// tmp := DeltaDoctor else
29035: LD_ADDR_VAR 0 2
29039: PUSH
29040: LD_EXP 39
29044: ST_TO_ADDR
29045: GO 29245
// if IsOk ( Denis ) then
29047: LD_EXP 34
29051: PPUSH
29052: CALL_OW 302
29056: IFFALSE 29070
// tmp := Denis else
29058: LD_ADDR_VAR 0 2
29062: PUSH
29063: LD_EXP 34
29067: ST_TO_ADDR
29068: GO 29245
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
29070: LD_ADDR_VAR 0 2
29074: PUSH
29075: LD_INT 22
29077: PUSH
29078: LD_INT 1
29080: PUSH
29081: EMPTY
29082: LIST
29083: LIST
29084: PUSH
29085: LD_INT 50
29087: PUSH
29088: EMPTY
29089: LIST
29090: PUSH
29091: LD_INT 25
29093: PUSH
29094: LD_INT 4
29096: PUSH
29097: EMPTY
29098: LIST
29099: LIST
29100: PUSH
29101: LD_INT 26
29103: PUSH
29104: LD_INT 1
29106: PUSH
29107: EMPTY
29108: LIST
29109: LIST
29110: PUSH
29111: EMPTY
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: PPUSH
29117: CALL_OW 69
29121: PUSH
29122: LD_EXP 23
29126: PUSH
29127: LD_EXP 24
29131: PUSH
29132: LD_EXP 25
29136: PUSH
29137: LD_EXP 26
29141: PUSH
29142: LD_EXP 27
29146: PUSH
29147: LD_EXP 28
29151: PUSH
29152: LD_EXP 29
29156: PUSH
29157: LD_EXP 30
29161: PUSH
29162: LD_EXP 31
29166: PUSH
29167: LD_EXP 32
29171: PUSH
29172: LD_EXP 33
29176: PUSH
29177: LD_EXP 34
29181: PUSH
29182: LD_EXP 35
29186: PUSH
29187: LD_EXP 36
29191: PUSH
29192: LD_EXP 37
29196: PUSH
29197: LD_EXP 38
29201: PUSH
29202: LD_EXP 39
29206: PUSH
29207: LD_EXP 40
29211: PUSH
29212: LD_EXP 42
29216: PUSH
29217: LD_EXP 44
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: LIST
29226: LIST
29227: LIST
29228: LIST
29229: LIST
29230: LIST
29231: LIST
29232: LIST
29233: LIST
29234: LIST
29235: LIST
29236: LIST
29237: LIST
29238: LIST
29239: LIST
29240: LIST
29241: LIST
29242: LIST
29243: DIFF
29244: ST_TO_ADDR
// if not tmp then
29245: LD_VAR 0 2
29249: NOT
29250: IFFALSE 29254
// exit ;
29252: GO 29346
// DialogueOn ;
29254: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
29258: LD_EXP 23
29262: PPUSH
29263: LD_STRING D6-JMM-1
29265: PPUSH
29266: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
29270: LD_VAR 0 2
29274: PPUSH
29275: LD_STRING D6-Sci1-1
29277: PPUSH
29278: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
29282: LD_EXP 23
29286: PPUSH
29287: LD_STRING D6-JMM-2
29289: PPUSH
29290: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
29294: LD_VAR 0 2
29298: PPUSH
29299: LD_STRING D6-Sci1-2
29301: PPUSH
29302: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
29306: LD_EXP 23
29310: PPUSH
29311: LD_STRING D6-JMM-3
29313: PPUSH
29314: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
29318: LD_VAR 0 2
29322: PPUSH
29323: LD_STRING D6-Sci1-3
29325: PPUSH
29326: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
29330: LD_EXP 23
29334: PPUSH
29335: LD_STRING D6-JMM-4
29337: PPUSH
29338: CALL_OW 88
// DialogueOff ;
29342: CALL_OW 7
// end ;
29346: LD_VAR 0 1
29350: RET
// export function DArabTrait2 ; begin
29351: LD_INT 0
29353: PPUSH
// if not IsPlaced ( Khatam ) or not IsOk ( Ahmed ) or not IsOk ( Dietrich ) then
29354: LD_EXP 36
29358: PPUSH
29359: CALL_OW 305
29363: NOT
29364: PUSH
29365: LD_EXP 51
29369: PPUSH
29370: CALL_OW 302
29374: NOT
29375: OR
29376: PUSH
29377: LD_EXP 50
29381: PPUSH
29382: CALL_OW 302
29386: NOT
29387: OR
29388: IFFALSE 29392
// exit ;
29390: GO 29448
// DialogueOn ;
29392: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
29396: LD_EXP 51
29400: PPUSH
29401: LD_STRING D5-Ar1-1
29403: PPUSH
29404: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
29408: LD_EXP 50
29412: PPUSH
29413: LD_STRING D5-Diet-1
29415: PPUSH
29416: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
29420: LD_EXP 51
29424: PPUSH
29425: LD_STRING D5-Ar1-2
29427: PPUSH
29428: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
29432: LD_EXP 50
29436: PPUSH
29437: LD_STRING D5-Diet-2
29439: PPUSH
29440: CALL_OW 88
// DialogueOff ;
29444: CALL_OW 7
// end ;
29448: LD_VAR 0 1
29452: RET
// every 0 0$2 trigger arabianAttack do var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding , speaker ;
29453: LD_EXP 4
29457: IFFALSE 31131
29459: GO 29461
29461: DISABLE
29462: LD_INT 0
29464: PPUSH
29465: PPUSH
29466: PPUSH
29467: PPUSH
29468: PPUSH
29469: PPUSH
29470: PPUSH
29471: PPUSH
// begin SetAttitude ( 2 , 3 , att_friend , true ) ;
29472: LD_INT 2
29474: PPUSH
29475: LD_INT 3
29477: PPUSH
29478: LD_INT 1
29480: PPUSH
29481: LD_INT 1
29483: PPUSH
29484: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
29488: LD_INT 2
29490: PPUSH
29491: LD_INT 6
29493: PPUSH
29494: LD_INT 1
29496: PPUSH
29497: LD_INT 1
29499: PPUSH
29500: CALL_OW 80
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
29504: LD_ADDR_VAR 0 5
29508: PUSH
29509: LD_INT 22
29511: PUSH
29512: LD_INT 2
29514: PUSH
29515: EMPTY
29516: LIST
29517: LIST
29518: PUSH
29519: LD_INT 2
29521: PUSH
29522: LD_INT 25
29524: PUSH
29525: LD_INT 4
29527: PUSH
29528: EMPTY
29529: LIST
29530: LIST
29531: PUSH
29532: LD_INT 25
29534: PUSH
29535: LD_INT 2
29537: PUSH
29538: EMPTY
29539: LIST
29540: LIST
29541: PUSH
29542: LD_INT 25
29544: PUSH
29545: LD_INT 3
29547: PUSH
29548: EMPTY
29549: LIST
29550: LIST
29551: PUSH
29552: EMPTY
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: PUSH
29558: EMPTY
29559: LIST
29560: LIST
29561: PPUSH
29562: CALL_OW 69
29566: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
29567: LD_ADDR_VAR 0 4
29571: PUSH
29572: LD_INT 22
29574: PUSH
29575: LD_INT 2
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: LD_INT 21
29584: PUSH
29585: LD_INT 1
29587: PUSH
29588: EMPTY
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 2
29594: PUSH
29595: LD_INT 25
29597: PUSH
29598: LD_INT 1
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: LD_INT 25
29607: PUSH
29608: LD_INT 8
29610: PUSH
29611: EMPTY
29612: LIST
29613: LIST
29614: PUSH
29615: LD_INT 25
29617: PUSH
29618: LD_INT 15
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: PUSH
29631: EMPTY
29632: LIST
29633: LIST
29634: LIST
29635: PPUSH
29636: CALL_OW 69
29640: PUSH
29641: LD_EXP 50
29645: PUSH
29646: EMPTY
29647: LIST
29648: DIFF
29649: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
29650: LD_ADDR_VAR 0 6
29654: PUSH
29655: LD_INT 22
29657: PUSH
29658: LD_INT 2
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PUSH
29665: LD_INT 30
29667: PUSH
29668: LD_INT 5
29670: PUSH
29671: EMPTY
29672: LIST
29673: LIST
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PPUSH
29679: CALL_OW 69
29683: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
29684: LD_VAR 0 5
29688: PPUSH
29689: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
29693: LD_VAR 0 4
29697: PPUSH
29698: CALL_OW 122
// RaiseSailEvent ( EArabAttack ) ;
29702: LD_INT 101
29704: PPUSH
29705: CALL_OW 427
// SayRadio ( AmScout , D4-FSol1-3 ) ;
29709: LD_EXP 40
29713: PPUSH
29714: LD_STRING D4-FSol1-3
29716: PPUSH
29717: CALL_OW 94
// wait ( 0 0$3 ) ;
29721: LD_INT 105
29723: PPUSH
29724: CALL_OW 67
// for i in arCivilian do
29728: LD_ADDR_VAR 0 1
29732: PUSH
29733: LD_VAR 0 5
29737: PUSH
29738: FOR_IN
29739: IFFALSE 29771
// AddComEnterUnit ( arCivilian , barracks [ i mod 2 + 1 ] ) ;
29741: LD_VAR 0 5
29745: PPUSH
29746: LD_VAR 0 6
29750: PUSH
29751: LD_VAR 0 1
29755: PUSH
29756: LD_INT 2
29758: MOD
29759: PUSH
29760: LD_INT 1
29762: PLUS
29763: ARRAY
29764: PPUSH
29765: CALL_OW 180
29769: GO 29738
29771: POP
29772: POP
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
29773: LD_VAR 0 5
29777: PPUSH
29778: LD_INT 1
29780: PUSH
29781: LD_INT 8
29783: PUSH
29784: EMPTY
29785: LIST
29786: LIST
29787: PUSH
29788: LD_INT 1
29790: PPUSH
29791: LD_INT 2
29793: PPUSH
29794: CALL_OW 12
29798: ARRAY
29799: PPUSH
29800: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
29804: LD_VAR 0 5
29808: PPUSH
29809: CALL_OW 182
// wait ( 0 0$1 ) ;
29813: LD_INT 35
29815: PPUSH
29816: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
29820: LD_INT 76
29822: PPUSH
29823: LD_INT 19
29825: PPUSH
29826: CALL_OW 84
// DialogueOn ;
29830: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29834: LD_INT 22
29836: PUSH
29837: LD_INT 1
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 26
29846: PUSH
29847: LD_INT 1
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 2
29856: PUSH
29857: LD_INT 25
29859: PUSH
29860: LD_INT 1
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 25
29869: PUSH
29870: LD_INT 2
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 25
29879: PUSH
29880: LD_INT 3
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 25
29889: PUSH
29890: LD_INT 4
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 25
29899: PUSH
29900: LD_INT 5
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: LIST
29919: PPUSH
29920: CALL_OW 69
29924: PPUSH
29925: LD_STRING D8-Sol1-1
29927: PPUSH
29928: LD_STRING D8-Sol1-1
29930: PPUSH
29931: CALL 25060 0 3
// if IsOk ( DeltaDoctor ) then
29935: LD_EXP 39
29939: PPUSH
29940: CALL_OW 302
29944: IFFALSE 29960
// Say ( DeltaDoctor , D8-Sci1-1 ) else
29946: LD_EXP 39
29950: PPUSH
29951: LD_STRING D8-Sci1-1
29953: PPUSH
29954: CALL_OW 88
29958: GO 30061
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29960: LD_INT 22
29962: PUSH
29963: LD_INT 1
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 26
29972: PUSH
29973: LD_INT 1
29975: PUSH
29976: EMPTY
29977: LIST
29978: LIST
29979: PUSH
29980: LD_INT 2
29982: PUSH
29983: LD_INT 25
29985: PUSH
29986: LD_INT 1
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 25
29995: PUSH
29996: LD_INT 2
29998: PUSH
29999: EMPTY
30000: LIST
30001: LIST
30002: PUSH
30003: LD_INT 25
30005: PUSH
30006: LD_INT 3
30008: PUSH
30009: EMPTY
30010: LIST
30011: LIST
30012: PUSH
30013: LD_INT 25
30015: PUSH
30016: LD_INT 4
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 25
30025: PUSH
30026: LD_INT 5
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: PUSH
30033: EMPTY
30034: LIST
30035: LIST
30036: LIST
30037: LIST
30038: LIST
30039: LIST
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: LIST
30045: PPUSH
30046: CALL_OW 69
30050: PPUSH
30051: LD_STRING D8-Sol1-1
30053: PPUSH
30054: LD_STRING D8-Sol1-1
30056: PPUSH
30057: CALL 25060 0 3
// Say ( JMM , D8-JMM-1 ) ;
30061: LD_EXP 23
30065: PPUSH
30066: LD_STRING D8-JMM-1
30068: PPUSH
30069: CALL_OW 88
// DialogueOff ;
30073: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
30077: LD_INT 2
30079: PPUSH
30080: LD_INT 2
30082: PPUSH
30083: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
30087: LD_INT 1
30089: PPUSH
30090: LD_INT 2
30092: PPUSH
30093: LD_INT 2
30095: PPUSH
30096: LD_INT 1
30098: PPUSH
30099: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
30103: LD_INT 3
30105: PPUSH
30106: LD_INT 2
30108: PPUSH
30109: LD_INT 1
30111: PPUSH
30112: LD_INT 1
30114: PPUSH
30115: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
30119: LD_STRING M4
30121: PPUSH
30122: CALL_OW 337
// wait ( 0 0$1 ) ;
30126: LD_INT 35
30128: PPUSH
30129: CALL_OW 67
// if IsLive ( Khatam ) then
30133: LD_EXP 36
30137: PPUSH
30138: CALL_OW 300
30142: IFFALSE 30156
// DoNotAttack ( 2 , Khatam ) ;
30144: LD_INT 2
30146: PPUSH
30147: LD_EXP 36
30151: PPUSH
30152: CALL_OW 471
// wait ( 0 0$1 ) ;
30156: LD_INT 35
30158: PPUSH
30159: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
30163: LD_ADDR_VAR 0 7
30167: PUSH
30168: LD_INT 22
30170: PUSH
30171: LD_INT 1
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 21
30180: PUSH
30181: LD_INT 3
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: EMPTY
30189: LIST
30190: LIST
30191: PPUSH
30192: CALL_OW 69
30196: PPUSH
30197: LD_VAR 0 4
30201: PUSH
30202: LD_INT 1
30204: ARRAY
30205: PPUSH
30206: CALL_OW 74
30210: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
30211: LD_VAR 0 4
30215: PPUSH
30216: LD_INT 25
30218: PUSH
30219: LD_INT 1
30221: PUSH
30222: EMPTY
30223: LIST
30224: LIST
30225: PPUSH
30226: CALL_OW 72
30230: PUSH
30231: LD_INT 1
30233: ARRAY
30234: PPUSH
30235: LD_VAR 0 7
30239: PPUSH
30240: CALL_OW 250
30244: PPUSH
30245: LD_VAR 0 7
30249: PPUSH
30250: CALL_OW 251
30254: PPUSH
30255: LD_VAR 0 7
30259: PPUSH
30260: CALL_OW 192
// AddComMoveXY ( arSoldiers , 84 , 22 ) ;
30264: LD_VAR 0 4
30268: PPUSH
30269: LD_INT 84
30271: PPUSH
30272: LD_INT 22
30274: PPUSH
30275: CALL_OW 171
// AddComMoveXY ( arSoldiers , 82 , 5 ) ;
30279: LD_VAR 0 4
30283: PPUSH
30284: LD_INT 82
30286: PPUSH
30287: LD_INT 5
30289: PPUSH
30290: CALL_OW 171
// AddComMoveXY ( arSoldiers , 95 , 12 ) ;
30294: LD_VAR 0 4
30298: PPUSH
30299: LD_INT 95
30301: PPUSH
30302: LD_INT 12
30304: PPUSH
30305: CALL_OW 171
// AddComMoveXY ( arSoldiers , 102 , 11 ) ;
30309: LD_VAR 0 4
30313: PPUSH
30314: LD_INT 102
30316: PPUSH
30317: LD_INT 11
30319: PPUSH
30320: CALL_OW 171
// AddComMoveXY ( arSoldiers , 116 , 15 ) ;
30324: LD_VAR 0 4
30328: PPUSH
30329: LD_INT 116
30331: PPUSH
30332: LD_INT 15
30334: PPUSH
30335: CALL_OW 171
// AddComMoveXY ( arSoldiers , 140 , 25 ) ;
30339: LD_VAR 0 4
30343: PPUSH
30344: LD_INT 140
30346: PPUSH
30347: LD_INT 25
30349: PPUSH
30350: CALL_OW 171
// arSoldiers := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
30354: LD_ADDR_VAR 0 4
30358: PUSH
30359: LD_INT 22
30361: PUSH
30362: LD_INT 2
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 21
30371: PUSH
30372: LD_INT 1
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 2
30381: PUSH
30382: LD_INT 25
30384: PUSH
30385: LD_INT 1
30387: PUSH
30388: EMPTY
30389: LIST
30390: LIST
30391: PUSH
30392: LD_INT 25
30394: PUSH
30395: LD_INT 8
30397: PUSH
30398: EMPTY
30399: LIST
30400: LIST
30401: PUSH
30402: LD_INT 25
30404: PUSH
30405: LD_INT 15
30407: PUSH
30408: EMPTY
30409: LIST
30410: LIST
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: LIST
30416: LIST
30417: PUSH
30418: EMPTY
30419: LIST
30420: LIST
30421: LIST
30422: PPUSH
30423: CALL_OW 69
30427: PUSH
30428: LD_EXP 50
30432: PUSH
30433: EMPTY
30434: LIST
30435: DIFF
30436: ST_TO_ADDR
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
30437: LD_ADDR_VAR 0 5
30441: PUSH
30442: LD_INT 22
30444: PUSH
30445: LD_INT 2
30447: PUSH
30448: EMPTY
30449: LIST
30450: LIST
30451: PUSH
30452: LD_INT 21
30454: PUSH
30455: LD_INT 1
30457: PUSH
30458: EMPTY
30459: LIST
30460: LIST
30461: PUSH
30462: LD_INT 2
30464: PUSH
30465: LD_INT 25
30467: PUSH
30468: LD_INT 2
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 25
30477: PUSH
30478: LD_INT 3
30480: PUSH
30481: EMPTY
30482: LIST
30483: LIST
30484: PUSH
30485: LD_INT 25
30487: PUSH
30488: LD_INT 4
30490: PUSH
30491: EMPTY
30492: LIST
30493: LIST
30494: PUSH
30495: LD_INT 25
30497: PUSH
30498: LD_INT 12
30500: PUSH
30501: EMPTY
30502: LIST
30503: LIST
30504: PUSH
30505: LD_INT 25
30507: PUSH
30508: LD_INT 16
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: PUSH
30523: EMPTY
30524: LIST
30525: LIST
30526: LIST
30527: PPUSH
30528: CALL_OW 69
30532: ST_TO_ADDR
// arCivilian := arCivilian ^ Dietrich ;
30533: LD_ADDR_VAR 0 5
30537: PUSH
30538: LD_VAR 0 5
30542: PUSH
30543: LD_EXP 50
30547: ADD
30548: ST_TO_ADDR
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
30549: LD_VAR 0 5
30553: PPUSH
30554: LD_INT 88
30556: PPUSH
30557: LD_INT 8
30559: PPUSH
30560: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
30564: LD_VAR 0 5
30568: PPUSH
30569: LD_INT 102
30571: PPUSH
30572: LD_INT 10
30574: PPUSH
30575: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
30579: LD_VAR 0 5
30583: PPUSH
30584: LD_INT 116
30586: PPUSH
30587: LD_INT 15
30589: PPUSH
30590: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
30594: LD_VAR 0 5
30598: PPUSH
30599: LD_INT 140
30601: PPUSH
30602: LD_INT 25
30604: PPUSH
30605: CALL_OW 171
// arEscapist := arCivilian union arSoldiers ;
30609: LD_ADDR_EXP 56
30613: PUSH
30614: LD_VAR 0 5
30618: PUSH
30619: LD_VAR 0 4
30623: UNION
30624: ST_TO_ADDR
// if IsOk ( Gary ) then
30625: LD_EXP 32
30629: PPUSH
30630: CALL_OW 302
30634: IFFALSE 30648
// Say ( Gary , D8a-Gary-1 ) ;
30636: LD_EXP 32
30640: PPUSH
30641: LD_STRING D8a-Gary-1
30643: PPUSH
30644: CALL_OW 88
// wait ( 0 0$5 ) ;
30648: LD_INT 175
30650: PPUSH
30651: CALL_OW 67
// if IsOK ( Khatam ) then
30655: LD_EXP 36
30659: PPUSH
30660: CALL_OW 302
30664: IFFALSE 31131
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
30666: LD_ADDR_VAR 0 2
30670: PUSH
30671: LD_INT 22
30673: PUSH
30674: LD_INT 1
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: PUSH
30681: LD_INT 2
30683: PUSH
30684: LD_INT 25
30686: PUSH
30687: LD_INT 1
30689: PUSH
30690: EMPTY
30691: LIST
30692: LIST
30693: PUSH
30694: LD_INT 25
30696: PUSH
30697: LD_INT 2
30699: PUSH
30700: EMPTY
30701: LIST
30702: LIST
30703: PUSH
30704: LD_INT 25
30706: PUSH
30707: LD_INT 3
30709: PUSH
30710: EMPTY
30711: LIST
30712: LIST
30713: PUSH
30714: LD_INT 25
30716: PUSH
30717: LD_INT 4
30719: PUSH
30720: EMPTY
30721: LIST
30722: LIST
30723: PUSH
30724: LD_INT 25
30726: PUSH
30727: LD_INT 5
30729: PUSH
30730: EMPTY
30731: LIST
30732: LIST
30733: PUSH
30734: LD_INT 25
30736: PUSH
30737: LD_INT 8
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: PUSH
30744: EMPTY
30745: LIST
30746: LIST
30747: LIST
30748: LIST
30749: LIST
30750: LIST
30751: LIST
30752: PUSH
30753: EMPTY
30754: LIST
30755: LIST
30756: PPUSH
30757: CALL_OW 69
30761: PUSH
30762: LD_EXP 23
30766: PUSH
30767: LD_EXP 24
30771: PUSH
30772: LD_EXP 25
30776: PUSH
30777: LD_EXP 26
30781: PUSH
30782: LD_EXP 27
30786: PUSH
30787: LD_EXP 28
30791: PUSH
30792: LD_EXP 29
30796: PUSH
30797: LD_EXP 30
30801: PUSH
30802: LD_EXP 31
30806: PUSH
30807: LD_EXP 32
30811: PUSH
30812: LD_EXP 33
30816: PUSH
30817: LD_EXP 34
30821: PUSH
30822: LD_EXP 35
30826: PUSH
30827: LD_EXP 36
30831: PUSH
30832: LD_EXP 37
30836: PUSH
30837: LD_EXP 38
30841: PUSH
30842: LD_EXP 39
30846: PUSH
30847: LD_EXP 42
30851: PUSH
30852: LD_EXP 44
30856: PUSH
30857: EMPTY
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: LIST
30868: LIST
30869: LIST
30870: LIST
30871: LIST
30872: LIST
30873: LIST
30874: LIST
30875: LIST
30876: LIST
30877: DIFF
30878: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
30879: LD_EXP 36
30883: PPUSH
30884: LD_INT 8
30886: PPUSH
30887: CALL_OW 235
// ComExit ( Khatam ) ;
30891: LD_EXP 36
30895: PPUSH
30896: CALL 92536 0 1
// wait ( 0 0$1 ) ;
30900: LD_INT 35
30902: PPUSH
30903: CALL_OW 67
// ComMoveToArea ( Khatam , khatamArea ) ;
30907: LD_EXP 36
30911: PPUSH
30912: LD_INT 11
30914: PPUSH
30915: CALL_OW 113
// escapeKhatam := true ;
30919: LD_ADDR_EXP 11
30923: PUSH
30924: LD_INT 1
30926: ST_TO_ADDR
// if not tmp then
30927: LD_VAR 0 2
30931: NOT
30932: IFFALSE 30936
// exit ;
30934: GO 31131
// wait ( 0 0$2 ) ;
30936: LD_INT 70
30938: PPUSH
30939: CALL_OW 67
// DialogueOn ;
30943: CALL_OW 6
// speaker := DialogRandom ( tmp , D8b-Sol1-1 , D8b-FSol1-1 ) ;
30947: LD_ADDR_VAR 0 8
30951: PUSH
30952: LD_VAR 0 2
30956: PPUSH
30957: LD_STRING D8b-Sol1-1
30959: PPUSH
30960: LD_STRING D8b-FSol1-1
30962: PPUSH
30963: CALL 25060 0 3
30967: ST_TO_ADDR
// Say ( Khatam , D8b-Khat-1 ) ;
30968: LD_EXP 36
30972: PPUSH
30973: LD_STRING D8b-Khat-1
30975: PPUSH
30976: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
30980: LD_VAR 0 8
30984: PPUSH
30985: CALL_OW 258
30989: PUSH
30990: LD_INT 1
30992: EQUAL
30993: IFFALSE 31009
// Say ( speaker , D8b-Sol1-2 ) else
30995: LD_VAR 0 8
30999: PPUSH
31000: LD_STRING D8b-Sol1-2
31002: PPUSH
31003: CALL_OW 88
31007: GO 31021
// Say ( speaker , D8b-FSol1-2 ) ;
31009: LD_VAR 0 8
31013: PPUSH
31014: LD_STRING D8b-FSol1-2
31016: PPUSH
31017: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
31021: LD_EXP 36
31025: PPUSH
31026: LD_STRING D8b-Khat-2
31028: PPUSH
31029: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31033: LD_VAR 0 8
31037: PPUSH
31038: CALL_OW 258
31042: PUSH
31043: LD_INT 1
31045: EQUAL
31046: IFFALSE 31062
// Say ( speaker , D8b-Sol1-3 ) else
31048: LD_VAR 0 8
31052: PPUSH
31053: LD_STRING D8b-Sol1-3
31055: PPUSH
31056: CALL_OW 88
31060: GO 31074
// Say ( speaker , D8b-FSol1-3 ) ;
31062: LD_VAR 0 8
31066: PPUSH
31067: LD_STRING D8b-FSol1-3
31069: PPUSH
31070: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
31074: LD_EXP 36
31078: PPUSH
31079: LD_STRING D8b-Khat-3
31081: PPUSH
31082: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31086: LD_VAR 0 8
31090: PPUSH
31091: CALL_OW 258
31095: PUSH
31096: LD_INT 1
31098: EQUAL
31099: IFFALSE 31115
// Say ( speaker , D8b-Sol1-4 ) else
31101: LD_VAR 0 8
31105: PPUSH
31106: LD_STRING D8b-Sol1-4
31108: PPUSH
31109: CALL_OW 88
31113: GO 31127
// Say ( speaker , D8b-FSol1-4 ) ;
31115: LD_VAR 0 8
31119: PPUSH
31120: LD_STRING D8b-FSol1-4
31122: PPUSH
31123: CALL_OW 88
// DialogueOff ;
31127: CALL_OW 7
// end ; end ;
31131: PPOPN 8
31133: END
// every 0 0$1 trigger escapeKhatam and IsOk ( Khatam ) do
31134: LD_EXP 11
31138: PUSH
31139: LD_EXP 36
31143: PPUSH
31144: CALL_OW 302
31148: AND
31149: IFFALSE 31224
31151: GO 31153
31153: DISABLE
// begin enable ;
31154: ENABLE
// if IsOk ( Khatam ) and not HasTask ( Khatam ) then
31155: LD_EXP 36
31159: PPUSH
31160: CALL_OW 302
31164: PUSH
31165: LD_EXP 36
31169: PPUSH
31170: CALL_OW 314
31174: NOT
31175: AND
31176: IFFALSE 31190
// ComMoveToArea ( Khatam , khatamArea ) ;
31178: LD_EXP 36
31182: PPUSH
31183: LD_INT 11
31185: PPUSH
31186: CALL_OW 113
// if IsInArea ( Khatam , khatamArea ) then
31190: LD_EXP 36
31194: PPUSH
31195: LD_INT 11
31197: PPUSH
31198: CALL_OW 308
31202: IFFALSE 31224
// begin SaveVariable ( 1 , 10_KhatamStatus_1 ) ;
31204: LD_INT 1
31206: PPUSH
31207: LD_STRING 10_KhatamStatus_1
31209: PPUSH
31210: CALL_OW 39
// RemoveUnit ( Khatam ) ;
31214: LD_EXP 36
31218: PPUSH
31219: CALL_OW 64
// disable ;
31223: DISABLE
// end ; end ;
31224: END
// every 0 0$30 trigger joinedToEpsilon and not InBattle ( 1 ) and hasBase and LoadVariable ( 02_mikhailStatus_1 , 0 ) and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or not arabianAttack ) do
31225: LD_EXP 7
31229: PUSH
31230: LD_INT 1
31232: PPUSH
31233: CALL_OW 463
31237: NOT
31238: AND
31239: PUSH
31240: LD_EXP 9
31244: AND
31245: PUSH
31246: LD_STRING 02_mikhailStatus_1
31248: PPUSH
31249: LD_INT 0
31251: PPUSH
31252: CALL_OW 30
31256: AND
31257: PUSH
31258: LD_INT 22
31260: PUSH
31261: LD_INT 5
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PPUSH
31268: CALL_OW 69
31272: PUSH
31273: LD_INT 0
31275: EQUAL
31276: AND
31277: PUSH
31278: LD_INT 22
31280: PUSH
31281: LD_INT 2
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 21
31290: PUSH
31291: LD_INT 1
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: EMPTY
31299: LIST
31300: LIST
31301: PPUSH
31302: CALL_OW 69
31306: PUSH
31307: LD_INT 0
31309: EQUAL
31310: PUSH
31311: LD_EXP 4
31315: NOT
31316: OR
31317: AND
31318: IFFALSE 31340
31320: GO 31322
31322: DISABLE
// begin wait ( 5 5$00 * Difficulty ) ;
31323: LD_INT 10500
31325: PUSH
31326: LD_OWVAR 67
31330: MUL
31331: PPUSH
31332: CALL_OW 67
// PrepareCornell ;
31336: CALL 3156 0 0
// end ;
31340: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 and IsOk ( Cornell ) do
31341: LD_INT 22
31343: PUSH
31344: LD_INT 1
31346: PUSH
31347: EMPTY
31348: LIST
31349: LIST
31350: PPUSH
31351: CALL_OW 69
31355: PPUSH
31356: LD_EXP 42
31360: PPUSH
31361: CALL_OW 74
31365: PPUSH
31366: LD_EXP 42
31370: PPUSH
31371: CALL_OW 296
31375: PUSH
31376: LD_INT 9
31378: LESS
31379: PUSH
31380: LD_EXP 42
31384: PPUSH
31385: CALL_OW 302
31389: AND
31390: IFFALSE 31834
31392: GO 31394
31394: DISABLE
// begin InGameOn ;
31395: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
31399: LD_EXP 42
31403: PPUSH
31404: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
31408: LD_EXP 42
31412: PPUSH
31413: LD_STRING D7-Corn-1
31415: PPUSH
31416: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
31420: LD_INT 22
31422: PUSH
31423: LD_INT 1
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 2
31432: PUSH
31433: LD_INT 25
31435: PUSH
31436: LD_INT 1
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 25
31445: PUSH
31446: LD_INT 2
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: PUSH
31453: LD_INT 25
31455: PUSH
31456: LD_INT 3
31458: PUSH
31459: EMPTY
31460: LIST
31461: LIST
31462: PUSH
31463: LD_INT 25
31465: PUSH
31466: LD_INT 4
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: PUSH
31473: LD_INT 25
31475: PUSH
31476: LD_INT 5
31478: PUSH
31479: EMPTY
31480: LIST
31481: LIST
31482: PUSH
31483: EMPTY
31484: LIST
31485: LIST
31486: LIST
31487: LIST
31488: LIST
31489: LIST
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PPUSH
31495: CALL_OW 69
31499: PPUSH
31500: LD_STRING D7-Sol1-1
31502: PPUSH
31503: LD_STRING D7-FSol1-1
31505: PPUSH
31506: CALL 25060 0 3
// CenterNowOnUnits ( Cornell ) ;
31510: LD_EXP 42
31514: PPUSH
31515: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
31519: LD_EXP 42
31523: PPUSH
31524: LD_STRING D7-Corn-2
31526: PPUSH
31527: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
31531: LD_EXP 23
31535: PPUSH
31536: LD_STRING D7-JMM-2
31538: PPUSH
31539: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
31543: LD_EXP 42
31547: PPUSH
31548: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
31552: LD_EXP 42
31556: PPUSH
31557: LD_STRING D7-Corn-3
31559: PPUSH
31560: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
31564: LD_EXP 42
31568: PPUSH
31569: LD_INT 250
31571: PPUSH
31572: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
31576: LD_EXP 42
31580: PPUSH
31581: LD_INT 1
31583: PPUSH
31584: CALL_OW 235
// wait ( 0 0$1 ) ;
31588: LD_INT 35
31590: PPUSH
31591: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
31595: LD_EXP 23
31599: PPUSH
31600: LD_STRING D7-JMM-3
31602: PPUSH
31603: CALL_OW 88
// InGameOff ;
31607: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
31611: LD_INT 35
31613: PPUSH
31614: CALL_OW 67
// if IsDead ( Cornell ) then
31618: LD_EXP 42
31622: PPUSH
31623: CALL_OW 301
31627: IFFALSE 31631
// exit ;
31629: GO 31834
// until GetLives ( Cornell ) > 350 ;
31631: LD_EXP 42
31635: PPUSH
31636: CALL_OW 256
31640: PUSH
31641: LD_INT 350
31643: GREATER
31644: IFFALSE 31611
// DialogueOn ;
31646: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
31650: LD_EXP 23
31654: PPUSH
31655: LD_STRING D7a-JMM-1
31657: PPUSH
31658: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
31662: LD_EXP 42
31666: PPUSH
31667: LD_STRING D7a-Corn-1
31669: PPUSH
31670: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
31674: LD_EXP 23
31678: PPUSH
31679: LD_STRING D7a-JMM-2
31681: PPUSH
31682: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
31686: LD_EXP 42
31690: PPUSH
31691: LD_STRING D7a-Corn-2
31693: PPUSH
31694: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
31698: LD_EXP 23
31702: PPUSH
31703: LD_STRING D7a-JMM-3
31705: PPUSH
31706: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
31710: LD_EXP 42
31714: PPUSH
31715: LD_STRING D7a-Corn-3
31717: PPUSH
31718: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
31722: LD_EXP 23
31726: PPUSH
31727: LD_STRING D7a-JMM-4
31729: PPUSH
31730: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
31734: LD_EXP 42
31738: PPUSH
31739: LD_STRING D7a-Corn-4
31741: PPUSH
31742: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
31746: LD_EXP 23
31750: PPUSH
31751: LD_STRING D7a-JMM-5
31753: PPUSH
31754: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
31758: LD_EXP 42
31762: PPUSH
31763: LD_STRING D7a-Corn-5
31765: PPUSH
31766: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
31770: LD_EXP 23
31774: PPUSH
31775: LD_STRING D7a-JMM-6
31777: PPUSH
31778: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
31782: LD_EXP 42
31786: PPUSH
31787: LD_STRING D7a-Corn-6
31789: PPUSH
31790: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
31794: LD_EXP 23
31798: PPUSH
31799: LD_STRING D7a-JMM-7
31801: PPUSH
31802: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
31806: LD_EXP 42
31810: PPUSH
31811: LD_STRING D7a-Corn-7
31813: PPUSH
31814: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
31818: LD_EXP 23
31822: PPUSH
31823: LD_STRING D7a-JMM-8
31825: PPUSH
31826: CALL_OW 88
// DialogueOff ;
31830: CALL_OW 7
// end ;
31834: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
31835: LD_INT 54
31837: PPUSH
31838: LD_INT 1
31840: PPUSH
31841: CALL_OW 321
31845: PUSH
31846: LD_INT 2
31848: EQUAL
31849: PUSH
31850: LD_INT 55
31852: PPUSH
31853: LD_INT 1
31855: PPUSH
31856: CALL_OW 321
31860: PUSH
31861: LD_INT 2
31863: EQUAL
31864: AND
31865: PUSH
31866: LD_INT 21
31868: PPUSH
31869: LD_INT 1
31871: PPUSH
31872: CALL_OW 321
31876: PUSH
31877: LD_INT 2
31879: EQUAL
31880: AND
31881: PUSH
31882: LD_INT 22
31884: PPUSH
31885: LD_INT 1
31887: PPUSH
31888: CALL_OW 321
31892: PUSH
31893: LD_INT 2
31895: EQUAL
31896: AND
31897: PUSH
31898: LD_INT 12
31900: PPUSH
31901: LD_INT 1
31903: PPUSH
31904: CALL_OW 321
31908: PUSH
31909: LD_INT 1
31911: EQUAL
31912: PUSH
31913: LD_INT 32
31915: PPUSH
31916: LD_INT 1
31918: PPUSH
31919: CALL_OW 321
31923: PUSH
31924: LD_INT 1
31926: EQUAL
31927: OR
31928: PUSH
31929: EMPTY
31930: LIST
31931: AND
31932: PUSH
31933: LD_EXP 8
31937: AND
31938: PUSH
31939: LD_INT 22
31941: PUSH
31942: LD_INT 3
31944: PUSH
31945: EMPTY
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 21
31951: PUSH
31952: LD_INT 1
31954: PUSH
31955: EMPTY
31956: LIST
31957: LIST
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: PPUSH
31963: CALL_OW 69
31967: PUSH
31968: LD_INT 0
31970: EQUAL
31971: AND
31972: IFFALSE 32020
31974: GO 31976
31976: DISABLE
// begin case Query ( QEndMission ) of 1 :
31977: LD_STRING QEndMission
31979: PPUSH
31980: CALL_OW 97
31984: PUSH
31985: LD_INT 1
31987: DOUBLE
31988: EQUAL
31989: IFTRUE 31993
31991: GO 32004
31993: POP
// end_the_mission_allowed = true ; 2 :
31994: LD_ADDR_OWVAR 57
31998: PUSH
31999: LD_INT 1
32001: ST_TO_ADDR
32002: GO 32020
32004: LD_INT 2
32006: DOUBLE
32007: EQUAL
32008: IFTRUE 32012
32010: GO 32019
32012: POP
// FinishMission ; end ;
32013: CALL 32066 0 0
32017: GO 32020
32019: POP
// end ;
32020: END
// function EnchancedSaveCharacters ( unit , id ) ; begin
32021: LD_INT 0
32023: PPUSH
// if IsLive ( unit ) or unit in JMMSquad then
32024: LD_VAR 0 1
32028: PPUSH
32029: CALL_OW 300
32033: PUSH
32034: LD_VAR 0 1
32038: PUSH
32039: LD_EXP 45
32043: IN
32044: OR
32045: IFFALSE 32061
// SaveCharacters ( unit , id ) ;
32047: LD_VAR 0 1
32051: PPUSH
32052: LD_VAR 0 2
32056: PPUSH
32057: CALL_OW 38
// end ;
32061: LD_VAR 0 3
32065: RET
// export function FinishMission ; var m1 , m2 , m3 , prefix ; begin
32066: LD_INT 0
32068: PPUSH
32069: PPUSH
32070: PPUSH
32071: PPUSH
32072: PPUSH
// if not hasSniper then
32073: LD_EXP 20
32077: NOT
32078: IFFALSE 32087
// SetAchievement ( ACH_SNIPER ) ;
32080: LD_STRING ACH_SNIPER
32082: PPUSH
32083: CALL_OW 543
// m1 := false ;
32087: LD_ADDR_VAR 0 2
32091: PUSH
32092: LD_INT 0
32094: ST_TO_ADDR
// m2 := false ;
32095: LD_ADDR_VAR 0 3
32099: PUSH
32100: LD_INT 0
32102: ST_TO_ADDR
// m3 := false ;
32103: LD_ADDR_VAR 0 4
32107: PUSH
32108: LD_INT 0
32110: ST_TO_ADDR
// if GetTech ( tech_LasSight , 1 ) = state_researched then
32111: LD_INT 12
32113: PPUSH
32114: LD_INT 1
32116: PPUSH
32117: CALL_OW 321
32121: PUSH
32122: LD_INT 2
32124: EQUAL
32125: IFFALSE 32147
// begin AddMedal ( sights , 1 ) ;
32127: LD_STRING sights
32129: PPUSH
32130: LD_INT 1
32132: PPUSH
32133: CALL_OW 101
// m1 := true ;
32137: LD_ADDR_VAR 0 2
32141: PUSH
32142: LD_INT 1
32144: ST_TO_ADDR
// end else
32145: GO 32158
// AddMedal ( sights , - 1 ) ;
32147: LD_STRING sights
32149: PPUSH
32150: LD_INT 1
32152: NEG
32153: PPUSH
32154: CALL_OW 101
// if GetTech ( tech_AI , 1 ) = state_researched then
32158: LD_INT 32
32160: PPUSH
32161: LD_INT 1
32163: PPUSH
32164: CALL_OW 321
32168: PUSH
32169: LD_INT 2
32171: EQUAL
32172: IFFALSE 32194
// begin AddMedal ( computers , 1 ) ;
32174: LD_STRING computers
32176: PPUSH
32177: LD_INT 1
32179: PPUSH
32180: CALL_OW 101
// m2 := true ;
32184: LD_ADDR_VAR 0 3
32188: PUSH
32189: LD_INT 1
32191: ST_TO_ADDR
// end else
32192: GO 32205
// AddMedal ( computers , - 1 ) ;
32194: LD_STRING computers
32196: PPUSH
32197: LD_INT 1
32199: NEG
32200: PPUSH
32201: CALL_OW 101
// if arabianEscapedCounter = 0 then
32205: LD_EXP 21
32209: PUSH
32210: LD_INT 0
32212: EQUAL
32213: IFFALSE 32245
// begin AddMedal ( renegades , 2 ) ;
32215: LD_STRING renegades
32217: PPUSH
32218: LD_INT 2
32220: PPUSH
32221: CALL_OW 101
// m3 := true ;
32225: LD_ADDR_VAR 0 4
32229: PUSH
32230: LD_INT 1
32232: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
32233: LD_INT 0
32235: PPUSH
32236: LD_STRING 10_ScientistsEscape_1
32238: PPUSH
32239: CALL_OW 39
// end else
32243: GO 32256
// AddMedal ( renegades , - 1 ) ;
32245: LD_STRING renegades
32247: PPUSH
32248: LD_INT 1
32250: NEG
32251: PPUSH
32252: CALL_OW 101
// SaveEpsilonBase ;
32256: CALL 33085 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
32260: LD_VAR 0 2
32264: PUSH
32265: LD_VAR 0 3
32269: AND
32270: PUSH
32271: LD_VAR 0 4
32275: AND
32276: PUSH
32277: LD_OWVAR 67
32281: PUSH
32282: LD_INT 3
32284: GREATEREQUAL
32285: AND
32286: IFFALSE 32298
// SetAchievementEX ( ACH_AMER , 10 ) ;
32288: LD_STRING ACH_AMER
32290: PPUSH
32291: LD_INT 10
32293: PPUSH
32294: CALL_OW 564
// if tick <= 40 40$00 then
32298: LD_OWVAR 1
32302: PUSH
32303: LD_INT 84000
32305: LESSEQUAL
32306: IFFALSE 32322
// begin wait ( 3 ) ;
32308: LD_INT 3
32310: PPUSH
32311: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
32315: LD_STRING ACH_ASPEED_10
32317: PPUSH
32318: CALL_OW 543
// end ; GiveMedals ( Main ) ;
32322: LD_STRING Main
32324: PPUSH
32325: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
32329: LD_INT 22
32331: PUSH
32332: LD_INT 1
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 23
32341: PUSH
32342: LD_INT 1
32344: PUSH
32345: EMPTY
32346: LIST
32347: LIST
32348: PUSH
32349: LD_INT 21
32351: PUSH
32352: LD_INT 1
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 2
32361: PUSH
32362: LD_INT 25
32364: PUSH
32365: LD_INT 1
32367: PUSH
32368: EMPTY
32369: LIST
32370: LIST
32371: PUSH
32372: LD_INT 25
32374: PUSH
32375: LD_INT 2
32377: PUSH
32378: EMPTY
32379: LIST
32380: LIST
32381: PUSH
32382: LD_INT 25
32384: PUSH
32385: LD_INT 3
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: PUSH
32392: LD_INT 25
32394: PUSH
32395: LD_INT 4
32397: PUSH
32398: EMPTY
32399: LIST
32400: LIST
32401: PUSH
32402: LD_INT 25
32404: PUSH
32405: LD_INT 5
32407: PUSH
32408: EMPTY
32409: LIST
32410: LIST
32411: PUSH
32412: LD_INT 25
32414: PUSH
32415: LD_INT 8
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: LIST
32426: LIST
32427: LIST
32428: LIST
32429: LIST
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: LIST
32435: LIST
32436: PPUSH
32437: CALL_OW 69
32441: PPUSH
32442: CALL_OW 43
// prefix := 10c_ ;
32446: LD_ADDR_VAR 0 5
32450: PUSH
32451: LD_STRING 10c_
32453: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
32454: LD_EXP 23
32458: PPUSH
32459: LD_VAR 0 5
32463: PUSH
32464: LD_STRING JMM
32466: STR
32467: PPUSH
32468: CALL_OW 38
// EnchancedSaveCharacters ( Brown , prefix & Brown ) ;
32472: LD_EXP 24
32476: PPUSH
32477: LD_VAR 0 5
32481: PUSH
32482: LD_STRING Brown
32484: STR
32485: PPUSH
32486: CALL 32021 0 2
// EnchancedSaveCharacters ( Donaldson , prefix & Donaldson ) ;
32490: LD_EXP 25
32494: PPUSH
32495: LD_VAR 0 5
32499: PUSH
32500: LD_STRING Donaldson
32502: STR
32503: PPUSH
32504: CALL 32021 0 2
// EnchancedSaveCharacters ( Bobby , prefix & Bobby ) ;
32508: LD_EXP 26
32512: PPUSH
32513: LD_VAR 0 5
32517: PUSH
32518: LD_STRING Bobby
32520: STR
32521: PPUSH
32522: CALL 32021 0 2
// EnchancedSaveCharacters ( Cyrus , prefix & Cyrus ) ;
32526: LD_EXP 27
32530: PPUSH
32531: LD_VAR 0 5
32535: PUSH
32536: LD_STRING Cyrus
32538: STR
32539: PPUSH
32540: CALL 32021 0 2
// EnchancedSaveCharacters ( Lisa , prefix & Lisa ) ;
32544: LD_EXP 28
32548: PPUSH
32549: LD_VAR 0 5
32553: PUSH
32554: LD_STRING Lisa
32556: STR
32557: PPUSH
32558: CALL 32021 0 2
// EnchancedSaveCharacters ( Frank , prefix & Frank ) ;
32562: LD_EXP 29
32566: PPUSH
32567: LD_VAR 0 5
32571: PUSH
32572: LD_STRING Frank
32574: STR
32575: PPUSH
32576: CALL 32021 0 2
// EnchancedSaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
32580: LD_EXP 30
32584: PPUSH
32585: LD_VAR 0 5
32589: PUSH
32590: LD_STRING Kikuchi
32592: STR
32593: PPUSH
32594: CALL 32021 0 2
// EnchancedSaveCharacters ( Houten , prefix & Houten ) ;
32598: LD_EXP 31
32602: PPUSH
32603: LD_VAR 0 5
32607: PUSH
32608: LD_STRING Houten
32610: STR
32611: PPUSH
32612: CALL 32021 0 2
// EnchancedSaveCharacters ( Gary , prefix & Gary ) ;
32616: LD_EXP 32
32620: PPUSH
32621: LD_VAR 0 5
32625: PUSH
32626: LD_STRING Gary
32628: STR
32629: PPUSH
32630: CALL 32021 0 2
// EnchancedSaveCharacters ( Cornell , prefix & Cornell ) ;
32634: LD_EXP 42
32638: PPUSH
32639: LD_VAR 0 5
32643: PUSH
32644: LD_STRING Cornell
32646: STR
32647: PPUSH
32648: CALL 32021 0 2
// EnchancedSaveCharacters ( Simms , prefix & Simms ) ;
32652: LD_EXP 33
32656: PPUSH
32657: LD_VAR 0 5
32661: PUSH
32662: LD_STRING Simms
32664: STR
32665: PPUSH
32666: CALL 32021 0 2
// EnchancedSaveCharacters ( Denis , prefix & Denis ) ;
32670: LD_EXP 34
32674: PPUSH
32675: LD_VAR 0 5
32679: PUSH
32680: LD_STRING Denis
32682: STR
32683: PPUSH
32684: CALL 32021 0 2
// EnchancedSaveCharacters ( Joan , prefix & Joan ) ;
32688: LD_EXP 35
32692: PPUSH
32693: LD_VAR 0 5
32697: PUSH
32698: LD_STRING Joan
32700: STR
32701: PPUSH
32702: CALL 32021 0 2
// EnchancedSaveCharacters ( Gladstone , prefix & Gladstone ) ;
32706: LD_EXP 37
32710: PPUSH
32711: LD_VAR 0 5
32715: PUSH
32716: LD_STRING Gladstone
32718: STR
32719: PPUSH
32720: CALL 32021 0 2
// EnchancedSaveCharacters ( DeltaDoctor , prefix & DeltaDoctor ) ;
32724: LD_EXP 39
32728: PPUSH
32729: LD_VAR 0 5
32733: PUSH
32734: LD_STRING DeltaDoctor
32736: STR
32737: PPUSH
32738: CALL 32021 0 2
// if IsLive ( Mike ) then
32742: LD_EXP 41
32746: PPUSH
32747: CALL_OW 300
32751: IFFALSE 32771
// SaveCharacters ( Mike , prefix & Mike ) ;
32753: LD_EXP 41
32757: PPUSH
32758: LD_VAR 0 5
32762: PUSH
32763: LD_STRING Mike
32765: STR
32766: PPUSH
32767: CALL_OW 38
// SaveCharacters ( others , 10c_lock ) ;
32771: LD_EXP 46
32775: PPUSH
32776: LD_STRING 10c_lock
32778: PPUSH
32779: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
32783: LD_INT 50
32785: PUSH
32786: EMPTY
32787: LIST
32788: PUSH
32789: LD_INT 22
32791: PUSH
32792: LD_INT 1
32794: PUSH
32795: EMPTY
32796: LIST
32797: LIST
32798: PUSH
32799: LD_INT 21
32801: PUSH
32802: LD_INT 1
32804: PUSH
32805: EMPTY
32806: LIST
32807: LIST
32808: PUSH
32809: LD_INT 2
32811: PUSH
32812: LD_INT 25
32814: PUSH
32815: LD_INT 1
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: PUSH
32822: LD_INT 25
32824: PUSH
32825: LD_INT 2
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: PUSH
32832: LD_INT 25
32834: PUSH
32835: LD_INT 3
32837: PUSH
32838: EMPTY
32839: LIST
32840: LIST
32841: PUSH
32842: LD_INT 25
32844: PUSH
32845: LD_INT 4
32847: PUSH
32848: EMPTY
32849: LIST
32850: LIST
32851: PUSH
32852: LD_INT 25
32854: PUSH
32855: LD_INT 5
32857: PUSH
32858: EMPTY
32859: LIST
32860: LIST
32861: PUSH
32862: LD_INT 25
32864: PUSH
32865: LD_INT 8
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: PUSH
32881: EMPTY
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: PPUSH
32887: CALL_OW 69
32891: PUSH
32892: LD_EXP 23
32896: PUSH
32897: LD_EXP 24
32901: PUSH
32902: LD_EXP 25
32906: PUSH
32907: LD_EXP 26
32911: PUSH
32912: LD_EXP 27
32916: PUSH
32917: LD_EXP 28
32921: PUSH
32922: LD_EXP 29
32926: PUSH
32927: LD_EXP 37
32931: PUSH
32932: LD_EXP 30
32936: PUSH
32937: LD_EXP 34
32941: PUSH
32942: LD_EXP 35
32946: PUSH
32947: LD_EXP 31
32951: PUSH
32952: LD_EXP 33
32956: PUSH
32957: LD_EXP 32
32961: PUSH
32962: LD_EXP 39
32966: PUSH
32967: LD_EXP 42
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: LIST
32986: LIST
32987: LIST
32988: LIST
32989: DIFF
32990: PPUSH
32991: LD_STRING 10_other_survivors
32993: PPUSH
32994: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) diff Mike , 10_ape ) ;
32998: LD_INT 50
33000: PUSH
33001: EMPTY
33002: LIST
33003: PUSH
33004: LD_INT 22
33006: PUSH
33007: LD_INT 1
33009: PUSH
33010: EMPTY
33011: LIST
33012: LIST
33013: PUSH
33014: LD_INT 21
33016: PUSH
33017: LD_INT 1
33019: PUSH
33020: EMPTY
33021: LIST
33022: LIST
33023: PUSH
33024: LD_INT 2
33026: PUSH
33027: LD_INT 25
33029: PUSH
33030: LD_INT 16
33032: PUSH
33033: EMPTY
33034: LIST
33035: LIST
33036: PUSH
33037: LD_INT 25
33039: PUSH
33040: LD_INT 12
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: PUSH
33047: EMPTY
33048: LIST
33049: LIST
33050: LIST
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: PPUSH
33058: CALL_OW 69
33062: PUSH
33063: LD_EXP 41
33067: DIFF
33068: PPUSH
33069: LD_STRING 10_ape
33071: PPUSH
33072: CALL_OW 38
// YouWin ;
33076: CALL_OW 103
// end ;
33080: LD_VAR 0 1
33084: RET
// function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
33085: LD_INT 0
33087: PPUSH
33088: PPUSH
33089: PPUSH
33090: PPUSH
// epsilonBase := [ ] ;
33091: LD_ADDR_VAR 0 2
33095: PUSH
33096: EMPTY
33097: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
33098: LD_ADDR_VAR 0 3
33102: PUSH
33103: LD_INT 22
33105: PUSH
33106: LD_INT 1
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 21
33115: PUSH
33116: LD_INT 3
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: LD_INT 50
33125: PUSH
33126: EMPTY
33127: LIST
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: LIST
33133: PPUSH
33134: CALL_OW 69
33138: ST_TO_ADDR
// for i in buildings do
33139: LD_ADDR_VAR 0 4
33143: PUSH
33144: LD_VAR 0 3
33148: PUSH
33149: FOR_IN
33150: IFFALSE 33602
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
33152: LD_VAR 0 4
33156: PPUSH
33157: CALL_OW 266
33161: PUSH
33162: LD_INT 6
33164: PUSH
33165: LD_INT 7
33167: PUSH
33168: LD_INT 8
33170: PUSH
33171: EMPTY
33172: LIST
33173: LIST
33174: LIST
33175: IN
33176: IFFALSE 33290
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
33178: LD_ADDR_VAR 0 2
33182: PUSH
33183: LD_VAR 0 2
33187: PUSH
33188: LD_VAR 0 4
33192: PPUSH
33193: CALL_OW 266
33197: PUSH
33198: LD_VAR 0 4
33202: PPUSH
33203: CALL_OW 250
33207: PUSH
33208: LD_VAR 0 4
33212: PPUSH
33213: CALL_OW 251
33217: PUSH
33218: LD_VAR 0 4
33222: PPUSH
33223: CALL_OW 254
33227: PUSH
33228: LD_VAR 0 4
33232: PPUSH
33233: CALL_OW 267
33237: PUSH
33238: LD_VAR 0 4
33242: PPUSH
33243: CALL_OW 248
33247: PUSH
33248: LD_VAR 0 4
33252: PPUSH
33253: LD_INT 1
33255: PPUSH
33256: CALL_OW 268
33260: PUSH
33261: LD_VAR 0 4
33265: PPUSH
33266: LD_INT 2
33268: PPUSH
33269: CALL_OW 268
33273: PUSH
33274: EMPTY
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: PUSH
33284: EMPTY
33285: LIST
33286: ADD
33287: ST_TO_ADDR
33288: GO 33600
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
33290: LD_VAR 0 4
33294: PPUSH
33295: CALL_OW 266
33299: PUSH
33300: LD_INT 32
33302: EQUAL
33303: PUSH
33304: LD_VAR 0 4
33308: PPUSH
33309: CALL_OW 266
33313: PUSH
33314: LD_INT 33
33316: EQUAL
33317: OR
33318: IFFALSE 33415
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
33320: LD_ADDR_VAR 0 2
33324: PUSH
33325: LD_VAR 0 2
33329: PUSH
33330: LD_VAR 0 4
33334: PPUSH
33335: CALL_OW 266
33339: PUSH
33340: LD_VAR 0 4
33344: PPUSH
33345: CALL_OW 250
33349: PUSH
33350: LD_VAR 0 4
33354: PPUSH
33355: CALL_OW 251
33359: PUSH
33360: LD_VAR 0 4
33364: PPUSH
33365: CALL_OW 254
33369: PUSH
33370: LD_VAR 0 4
33374: PPUSH
33375: CALL_OW 267
33379: PUSH
33380: LD_VAR 0 4
33384: PPUSH
33385: CALL_OW 248
33389: PUSH
33390: LD_VAR 0 4
33394: PPUSH
33395: CALL_OW 269
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: PUSH
33409: EMPTY
33410: LIST
33411: ADD
33412: ST_TO_ADDR
33413: GO 33600
// if GetBType ( i ) = b_factory then
33415: LD_VAR 0 4
33419: PPUSH
33420: CALL_OW 266
33424: PUSH
33425: LD_INT 3
33427: EQUAL
33428: IFFALSE 33518
// epsilonBase := Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
33430: LD_ADDR_VAR 0 2
33434: PUSH
33435: LD_VAR 0 2
33439: PPUSH
33440: LD_INT 1
33442: PPUSH
33443: LD_VAR 0 4
33447: PPUSH
33448: CALL_OW 266
33452: PUSH
33453: LD_VAR 0 4
33457: PPUSH
33458: CALL_OW 250
33462: PUSH
33463: LD_VAR 0 4
33467: PPUSH
33468: CALL_OW 251
33472: PUSH
33473: LD_VAR 0 4
33477: PPUSH
33478: CALL_OW 254
33482: PUSH
33483: LD_VAR 0 4
33487: PPUSH
33488: CALL_OW 267
33492: PUSH
33493: LD_VAR 0 4
33497: PPUSH
33498: CALL_OW 248
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: PPUSH
33511: CALL_OW 2
33515: ST_TO_ADDR
33516: GO 33600
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
33518: LD_ADDR_VAR 0 2
33522: PUSH
33523: LD_VAR 0 2
33527: PUSH
33528: LD_VAR 0 4
33532: PPUSH
33533: CALL_OW 266
33537: PUSH
33538: LD_VAR 0 4
33542: PPUSH
33543: CALL_OW 250
33547: PUSH
33548: LD_VAR 0 4
33552: PPUSH
33553: CALL_OW 251
33557: PUSH
33558: LD_VAR 0 4
33562: PPUSH
33563: CALL_OW 254
33567: PUSH
33568: LD_VAR 0 4
33572: PPUSH
33573: CALL_OW 267
33577: PUSH
33578: LD_VAR 0 4
33582: PPUSH
33583: CALL_OW 248
33587: PUSH
33588: EMPTY
33589: LIST
33590: LIST
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: PUSH
33596: EMPTY
33597: LIST
33598: ADD
33599: ST_TO_ADDR
// end ;
33600: GO 33149
33602: POP
33603: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
33604: LD_VAR 0 2
33608: PPUSH
33609: LD_STRING 10_EpsilonBase
33611: PPUSH
33612: CALL_OW 39
// SaveVariable ( ListEnvironmentArea ( epsilonBaseArea ) , 10_EpsilonEnv ) ;
33616: LD_INT 34
33618: PPUSH
33619: CALL_OW 353
33623: PPUSH
33624: LD_STRING 10_EpsilonEnv
33626: PPUSH
33627: CALL_OW 39
// end ; end_of_file
33631: LD_VAR 0 1
33635: RET
// every 1 1$05 + 0 0$20 trigger joinedToEpsilon do var i , tmp ;
33636: LD_EXP 7
33640: IFFALSE 33763
33642: GO 33644
33644: DISABLE
33645: LD_INT 0
33647: PPUSH
33648: PPUSH
// begin enable ;
33649: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
33650: LD_INT 35
33652: PPUSH
33653: LD_INT 385
33655: PPUSH
33656: CALL_OW 12
33660: PPUSH
33661: CALL_OW 67
// tmp := [ cratesSpawn1Area , cratesSpawn2Area , cratesSpawn3Area , cratesSpawn4Area , cratesSpawn5Area , cratesSpawn6Area ] ;
33665: LD_ADDR_VAR 0 2
33669: PUSH
33670: LD_INT 13
33672: PUSH
33673: LD_INT 14
33675: PUSH
33676: LD_INT 15
33678: PUSH
33679: LD_INT 16
33681: PUSH
33682: LD_INT 17
33684: PUSH
33685: LD_INT 38
33687: PUSH
33688: EMPTY
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
33696: LD_ADDR_VAR 0 1
33700: PUSH
33701: LD_VAR 0 2
33705: PUSH
33706: LD_INT 1
33708: PPUSH
33709: LD_VAR 0 2
33713: PPUSH
33714: CALL 56538 0 1
33718: PPUSH
33719: CALL_OW 12
33723: ARRAY
33724: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 8 then
33725: LD_VAR 0 1
33729: PPUSH
33730: CALL_OW 435
33734: PUSH
33735: LD_INT 8
33737: LESS
33738: IFFALSE 33763
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
33740: LD_INT 1
33742: PPUSH
33743: LD_INT 5
33745: PPUSH
33746: CALL_OW 12
33750: PPUSH
33751: LD_VAR 0 1
33755: PPUSH
33756: LD_INT 1
33758: PPUSH
33759: CALL_OW 55
// end ;
33763: PPOPN 2
33765: END
// every 0 0$20 trigger tick < 5 5$00 and hasBase do
33766: LD_OWVAR 1
33770: PUSH
33771: LD_INT 10500
33773: LESS
33774: PUSH
33775: LD_EXP 9
33779: AND
33780: IFFALSE 33807
33782: GO 33784
33784: DISABLE
// begin enable ;
33785: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSpawn3Area , true ) ;
33786: LD_INT 1
33788: PPUSH
33789: LD_INT 5
33791: PPUSH
33792: CALL_OW 12
33796: PPUSH
33797: LD_INT 15
33799: PPUSH
33800: LD_INT 1
33802: PPUSH
33803: CALL_OW 55
// end ;
33807: END
// every 0 0$55 trigger ruBase do
33808: LD_EXP 68
33812: IFFALSE 33856
33814: GO 33816
33816: DISABLE
// begin enable ;
33817: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea ) < 3 then
33818: LD_EXP 84
33822: PPUSH
33823: CALL_OW 435
33827: PUSH
33828: LD_INT 3
33830: LESS
33831: IFFALSE 33856
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea , true ) ;
33833: LD_INT 1
33835: PPUSH
33836: LD_INT 5
33838: PPUSH
33839: CALL_OW 12
33843: PPUSH
33844: LD_EXP 84
33848: PPUSH
33849: LD_INT 1
33851: PPUSH
33852: CALL_OW 55
// end ;
33856: END
// every 1 1$05 trigger ruBase2 do
33857: LD_EXP 69
33861: IFFALSE 33905
33863: GO 33865
33865: DISABLE
// begin enable ;
33866: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea2 ) < 3 then
33867: LD_EXP 85
33871: PPUSH
33872: CALL_OW 435
33876: PUSH
33877: LD_INT 3
33879: LESS
33880: IFFALSE 33905
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea2 , true ) ;
33882: LD_INT 1
33884: PPUSH
33885: LD_INT 5
33887: PPUSH
33888: CALL_OW 12
33892: PPUSH
33893: LD_EXP 85
33897: PPUSH
33898: LD_INT 1
33900: PPUSH
33901: CALL_OW 55
// end ; end_of_file end_of_file
33905: END
// export globalGameSaveCounter ; every 0 0$1 do
33906: GO 33908
33908: DISABLE
// begin enable ;
33909: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
33910: LD_STRING updateTimer(
33912: PUSH
33913: LD_OWVAR 1
33917: STR
33918: PUSH
33919: LD_STRING );
33921: STR
33922: PPUSH
33923: CALL_OW 559
// end ;
33927: END
// every 0 0$1 do
33928: GO 33930
33930: DISABLE
// begin globalGameSaveCounter := 0 ;
33931: LD_ADDR_EXP 86
33935: PUSH
33936: LD_INT 0
33938: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
33939: LD_STRING setGameSaveCounter(0)
33941: PPUSH
33942: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
33946: LD_STRING initStreamRollete();
33948: PPUSH
33949: CALL_OW 559
// InitStreamMode ;
33953: CALL 35279 0 0
// DefineStreamItems ( false ) ;
33957: LD_INT 0
33959: PPUSH
33960: CALL 35743 0 1
// end ;
33964: END
// export function SOS_MapStart ( ) ; begin
33965: LD_INT 0
33967: PPUSH
// if streamModeActive then
33968: LD_EXP 87
33972: IFFALSE 33981
// DefineStreamItems ( true ) ;
33974: LD_INT 1
33976: PPUSH
33977: CALL 35743 0 1
// UpdateLuaVariables ( ) ;
33981: CALL 33998 0 0
// UpdateFactoryWaypoints ( ) ;
33985: CALL 48612 0 0
// UpdateWarehouseGatheringPoints ( ) ;
33989: CALL 48869 0 0
// end ;
33993: LD_VAR 0 1
33997: RET
// function UpdateLuaVariables ( ) ; begin
33998: LD_INT 0
34000: PPUSH
// if globalGameSaveCounter then
34001: LD_EXP 86
34005: IFFALSE 34039
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
34007: LD_ADDR_EXP 86
34011: PUSH
34012: LD_EXP 86
34016: PPUSH
34017: CALL 93499 0 1
34021: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
34022: LD_STRING setGameSaveCounter(
34024: PUSH
34025: LD_EXP 86
34029: STR
34030: PUSH
34031: LD_STRING )
34033: STR
34034: PPUSH
34035: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
34039: LD_STRING setGameDifficulty(
34041: PUSH
34042: LD_OWVAR 67
34046: STR
34047: PUSH
34048: LD_STRING )
34050: STR
34051: PPUSH
34052: CALL_OW 559
// end ;
34056: LD_VAR 0 1
34060: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34061: LD_INT 0
34063: PPUSH
// if p2 = stream_mode then
34064: LD_VAR 0 2
34068: PUSH
34069: LD_INT 100
34071: EQUAL
34072: IFFALSE 35075
// begin if not StreamModeActive then
34074: LD_EXP 87
34078: NOT
34079: IFFALSE 34089
// StreamModeActive := true ;
34081: LD_ADDR_EXP 87
34085: PUSH
34086: LD_INT 1
34088: ST_TO_ADDR
// if p3 = 0 then
34089: LD_VAR 0 3
34093: PUSH
34094: LD_INT 0
34096: EQUAL
34097: IFFALSE 34103
// InitStreamMode ;
34099: CALL 35279 0 0
// if p3 = 1 then
34103: LD_VAR 0 3
34107: PUSH
34108: LD_INT 1
34110: EQUAL
34111: IFFALSE 34121
// sRocket := true ;
34113: LD_ADDR_EXP 92
34117: PUSH
34118: LD_INT 1
34120: ST_TO_ADDR
// if p3 = 2 then
34121: LD_VAR 0 3
34125: PUSH
34126: LD_INT 2
34128: EQUAL
34129: IFFALSE 34139
// sSpeed := true ;
34131: LD_ADDR_EXP 91
34135: PUSH
34136: LD_INT 1
34138: ST_TO_ADDR
// if p3 = 3 then
34139: LD_VAR 0 3
34143: PUSH
34144: LD_INT 3
34146: EQUAL
34147: IFFALSE 34157
// sEngine := true ;
34149: LD_ADDR_EXP 93
34153: PUSH
34154: LD_INT 1
34156: ST_TO_ADDR
// if p3 = 4 then
34157: LD_VAR 0 3
34161: PUSH
34162: LD_INT 4
34164: EQUAL
34165: IFFALSE 34175
// sSpec := true ;
34167: LD_ADDR_EXP 90
34171: PUSH
34172: LD_INT 1
34174: ST_TO_ADDR
// if p3 = 5 then
34175: LD_VAR 0 3
34179: PUSH
34180: LD_INT 5
34182: EQUAL
34183: IFFALSE 34193
// sLevel := true ;
34185: LD_ADDR_EXP 94
34189: PUSH
34190: LD_INT 1
34192: ST_TO_ADDR
// if p3 = 6 then
34193: LD_VAR 0 3
34197: PUSH
34198: LD_INT 6
34200: EQUAL
34201: IFFALSE 34211
// sArmoury := true ;
34203: LD_ADDR_EXP 95
34207: PUSH
34208: LD_INT 1
34210: ST_TO_ADDR
// if p3 = 7 then
34211: LD_VAR 0 3
34215: PUSH
34216: LD_INT 7
34218: EQUAL
34219: IFFALSE 34229
// sRadar := true ;
34221: LD_ADDR_EXP 96
34225: PUSH
34226: LD_INT 1
34228: ST_TO_ADDR
// if p3 = 8 then
34229: LD_VAR 0 3
34233: PUSH
34234: LD_INT 8
34236: EQUAL
34237: IFFALSE 34247
// sBunker := true ;
34239: LD_ADDR_EXP 97
34243: PUSH
34244: LD_INT 1
34246: ST_TO_ADDR
// if p3 = 9 then
34247: LD_VAR 0 3
34251: PUSH
34252: LD_INT 9
34254: EQUAL
34255: IFFALSE 34265
// sHack := true ;
34257: LD_ADDR_EXP 98
34261: PUSH
34262: LD_INT 1
34264: ST_TO_ADDR
// if p3 = 10 then
34265: LD_VAR 0 3
34269: PUSH
34270: LD_INT 10
34272: EQUAL
34273: IFFALSE 34283
// sFire := true ;
34275: LD_ADDR_EXP 99
34279: PUSH
34280: LD_INT 1
34282: ST_TO_ADDR
// if p3 = 11 then
34283: LD_VAR 0 3
34287: PUSH
34288: LD_INT 11
34290: EQUAL
34291: IFFALSE 34301
// sRefresh := true ;
34293: LD_ADDR_EXP 100
34297: PUSH
34298: LD_INT 1
34300: ST_TO_ADDR
// if p3 = 12 then
34301: LD_VAR 0 3
34305: PUSH
34306: LD_INT 12
34308: EQUAL
34309: IFFALSE 34319
// sExp := true ;
34311: LD_ADDR_EXP 101
34315: PUSH
34316: LD_INT 1
34318: ST_TO_ADDR
// if p3 = 13 then
34319: LD_VAR 0 3
34323: PUSH
34324: LD_INT 13
34326: EQUAL
34327: IFFALSE 34337
// sDepot := true ;
34329: LD_ADDR_EXP 102
34333: PUSH
34334: LD_INT 1
34336: ST_TO_ADDR
// if p3 = 14 then
34337: LD_VAR 0 3
34341: PUSH
34342: LD_INT 14
34344: EQUAL
34345: IFFALSE 34355
// sFlag := true ;
34347: LD_ADDR_EXP 103
34351: PUSH
34352: LD_INT 1
34354: ST_TO_ADDR
// if p3 = 15 then
34355: LD_VAR 0 3
34359: PUSH
34360: LD_INT 15
34362: EQUAL
34363: IFFALSE 34373
// sKamikadze := true ;
34365: LD_ADDR_EXP 111
34369: PUSH
34370: LD_INT 1
34372: ST_TO_ADDR
// if p3 = 16 then
34373: LD_VAR 0 3
34377: PUSH
34378: LD_INT 16
34380: EQUAL
34381: IFFALSE 34391
// sTroll := true ;
34383: LD_ADDR_EXP 112
34387: PUSH
34388: LD_INT 1
34390: ST_TO_ADDR
// if p3 = 17 then
34391: LD_VAR 0 3
34395: PUSH
34396: LD_INT 17
34398: EQUAL
34399: IFFALSE 34409
// sSlow := true ;
34401: LD_ADDR_EXP 113
34405: PUSH
34406: LD_INT 1
34408: ST_TO_ADDR
// if p3 = 18 then
34409: LD_VAR 0 3
34413: PUSH
34414: LD_INT 18
34416: EQUAL
34417: IFFALSE 34427
// sLack := true ;
34419: LD_ADDR_EXP 114
34423: PUSH
34424: LD_INT 1
34426: ST_TO_ADDR
// if p3 = 19 then
34427: LD_VAR 0 3
34431: PUSH
34432: LD_INT 19
34434: EQUAL
34435: IFFALSE 34445
// sTank := true ;
34437: LD_ADDR_EXP 116
34441: PUSH
34442: LD_INT 1
34444: ST_TO_ADDR
// if p3 = 20 then
34445: LD_VAR 0 3
34449: PUSH
34450: LD_INT 20
34452: EQUAL
34453: IFFALSE 34463
// sRemote := true ;
34455: LD_ADDR_EXP 117
34459: PUSH
34460: LD_INT 1
34462: ST_TO_ADDR
// if p3 = 21 then
34463: LD_VAR 0 3
34467: PUSH
34468: LD_INT 21
34470: EQUAL
34471: IFFALSE 34481
// sPowell := true ;
34473: LD_ADDR_EXP 118
34477: PUSH
34478: LD_INT 1
34480: ST_TO_ADDR
// if p3 = 22 then
34481: LD_VAR 0 3
34485: PUSH
34486: LD_INT 22
34488: EQUAL
34489: IFFALSE 34499
// sTeleport := true ;
34491: LD_ADDR_EXP 121
34495: PUSH
34496: LD_INT 1
34498: ST_TO_ADDR
// if p3 = 23 then
34499: LD_VAR 0 3
34503: PUSH
34504: LD_INT 23
34506: EQUAL
34507: IFFALSE 34517
// sOilTower := true ;
34509: LD_ADDR_EXP 123
34513: PUSH
34514: LD_INT 1
34516: ST_TO_ADDR
// if p3 = 24 then
34517: LD_VAR 0 3
34521: PUSH
34522: LD_INT 24
34524: EQUAL
34525: IFFALSE 34535
// sShovel := true ;
34527: LD_ADDR_EXP 124
34531: PUSH
34532: LD_INT 1
34534: ST_TO_ADDR
// if p3 = 25 then
34535: LD_VAR 0 3
34539: PUSH
34540: LD_INT 25
34542: EQUAL
34543: IFFALSE 34553
// sSheik := true ;
34545: LD_ADDR_EXP 125
34549: PUSH
34550: LD_INT 1
34552: ST_TO_ADDR
// if p3 = 26 then
34553: LD_VAR 0 3
34557: PUSH
34558: LD_INT 26
34560: EQUAL
34561: IFFALSE 34571
// sEarthquake := true ;
34563: LD_ADDR_EXP 127
34567: PUSH
34568: LD_INT 1
34570: ST_TO_ADDR
// if p3 = 27 then
34571: LD_VAR 0 3
34575: PUSH
34576: LD_INT 27
34578: EQUAL
34579: IFFALSE 34589
// sAI := true ;
34581: LD_ADDR_EXP 128
34585: PUSH
34586: LD_INT 1
34588: ST_TO_ADDR
// if p3 = 28 then
34589: LD_VAR 0 3
34593: PUSH
34594: LD_INT 28
34596: EQUAL
34597: IFFALSE 34607
// sCargo := true ;
34599: LD_ADDR_EXP 131
34603: PUSH
34604: LD_INT 1
34606: ST_TO_ADDR
// if p3 = 29 then
34607: LD_VAR 0 3
34611: PUSH
34612: LD_INT 29
34614: EQUAL
34615: IFFALSE 34625
// sDLaser := true ;
34617: LD_ADDR_EXP 132
34621: PUSH
34622: LD_INT 1
34624: ST_TO_ADDR
// if p3 = 30 then
34625: LD_VAR 0 3
34629: PUSH
34630: LD_INT 30
34632: EQUAL
34633: IFFALSE 34643
// sExchange := true ;
34635: LD_ADDR_EXP 133
34639: PUSH
34640: LD_INT 1
34642: ST_TO_ADDR
// if p3 = 31 then
34643: LD_VAR 0 3
34647: PUSH
34648: LD_INT 31
34650: EQUAL
34651: IFFALSE 34661
// sFac := true ;
34653: LD_ADDR_EXP 134
34657: PUSH
34658: LD_INT 1
34660: ST_TO_ADDR
// if p3 = 32 then
34661: LD_VAR 0 3
34665: PUSH
34666: LD_INT 32
34668: EQUAL
34669: IFFALSE 34679
// sPower := true ;
34671: LD_ADDR_EXP 135
34675: PUSH
34676: LD_INT 1
34678: ST_TO_ADDR
// if p3 = 33 then
34679: LD_VAR 0 3
34683: PUSH
34684: LD_INT 33
34686: EQUAL
34687: IFFALSE 34697
// sRandom := true ;
34689: LD_ADDR_EXP 136
34693: PUSH
34694: LD_INT 1
34696: ST_TO_ADDR
// if p3 = 34 then
34697: LD_VAR 0 3
34701: PUSH
34702: LD_INT 34
34704: EQUAL
34705: IFFALSE 34715
// sShield := true ;
34707: LD_ADDR_EXP 137
34711: PUSH
34712: LD_INT 1
34714: ST_TO_ADDR
// if p3 = 35 then
34715: LD_VAR 0 3
34719: PUSH
34720: LD_INT 35
34722: EQUAL
34723: IFFALSE 34733
// sTime := true ;
34725: LD_ADDR_EXP 138
34729: PUSH
34730: LD_INT 1
34732: ST_TO_ADDR
// if p3 = 36 then
34733: LD_VAR 0 3
34737: PUSH
34738: LD_INT 36
34740: EQUAL
34741: IFFALSE 34751
// sTools := true ;
34743: LD_ADDR_EXP 139
34747: PUSH
34748: LD_INT 1
34750: ST_TO_ADDR
// if p3 = 101 then
34751: LD_VAR 0 3
34755: PUSH
34756: LD_INT 101
34758: EQUAL
34759: IFFALSE 34769
// sSold := true ;
34761: LD_ADDR_EXP 104
34765: PUSH
34766: LD_INT 1
34768: ST_TO_ADDR
// if p3 = 102 then
34769: LD_VAR 0 3
34773: PUSH
34774: LD_INT 102
34776: EQUAL
34777: IFFALSE 34787
// sDiff := true ;
34779: LD_ADDR_EXP 105
34783: PUSH
34784: LD_INT 1
34786: ST_TO_ADDR
// if p3 = 103 then
34787: LD_VAR 0 3
34791: PUSH
34792: LD_INT 103
34794: EQUAL
34795: IFFALSE 34805
// sFog := true ;
34797: LD_ADDR_EXP 108
34801: PUSH
34802: LD_INT 1
34804: ST_TO_ADDR
// if p3 = 104 then
34805: LD_VAR 0 3
34809: PUSH
34810: LD_INT 104
34812: EQUAL
34813: IFFALSE 34823
// sReset := true ;
34815: LD_ADDR_EXP 109
34819: PUSH
34820: LD_INT 1
34822: ST_TO_ADDR
// if p3 = 105 then
34823: LD_VAR 0 3
34827: PUSH
34828: LD_INT 105
34830: EQUAL
34831: IFFALSE 34841
// sSun := true ;
34833: LD_ADDR_EXP 110
34837: PUSH
34838: LD_INT 1
34840: ST_TO_ADDR
// if p3 = 106 then
34841: LD_VAR 0 3
34845: PUSH
34846: LD_INT 106
34848: EQUAL
34849: IFFALSE 34859
// sTiger := true ;
34851: LD_ADDR_EXP 106
34855: PUSH
34856: LD_INT 1
34858: ST_TO_ADDR
// if p3 = 107 then
34859: LD_VAR 0 3
34863: PUSH
34864: LD_INT 107
34866: EQUAL
34867: IFFALSE 34877
// sBomb := true ;
34869: LD_ADDR_EXP 107
34873: PUSH
34874: LD_INT 1
34876: ST_TO_ADDR
// if p3 = 108 then
34877: LD_VAR 0 3
34881: PUSH
34882: LD_INT 108
34884: EQUAL
34885: IFFALSE 34895
// sWound := true ;
34887: LD_ADDR_EXP 115
34891: PUSH
34892: LD_INT 1
34894: ST_TO_ADDR
// if p3 = 109 then
34895: LD_VAR 0 3
34899: PUSH
34900: LD_INT 109
34902: EQUAL
34903: IFFALSE 34913
// sBetray := true ;
34905: LD_ADDR_EXP 119
34909: PUSH
34910: LD_INT 1
34912: ST_TO_ADDR
// if p3 = 110 then
34913: LD_VAR 0 3
34917: PUSH
34918: LD_INT 110
34920: EQUAL
34921: IFFALSE 34931
// sContamin := true ;
34923: LD_ADDR_EXP 120
34927: PUSH
34928: LD_INT 1
34930: ST_TO_ADDR
// if p3 = 111 then
34931: LD_VAR 0 3
34935: PUSH
34936: LD_INT 111
34938: EQUAL
34939: IFFALSE 34949
// sOil := true ;
34941: LD_ADDR_EXP 122
34945: PUSH
34946: LD_INT 1
34948: ST_TO_ADDR
// if p3 = 112 then
34949: LD_VAR 0 3
34953: PUSH
34954: LD_INT 112
34956: EQUAL
34957: IFFALSE 34967
// sStu := true ;
34959: LD_ADDR_EXP 126
34963: PUSH
34964: LD_INT 1
34966: ST_TO_ADDR
// if p3 = 113 then
34967: LD_VAR 0 3
34971: PUSH
34972: LD_INT 113
34974: EQUAL
34975: IFFALSE 34985
// sBazooka := true ;
34977: LD_ADDR_EXP 129
34981: PUSH
34982: LD_INT 1
34984: ST_TO_ADDR
// if p3 = 114 then
34985: LD_VAR 0 3
34989: PUSH
34990: LD_INT 114
34992: EQUAL
34993: IFFALSE 35003
// sMortar := true ;
34995: LD_ADDR_EXP 130
34999: PUSH
35000: LD_INT 1
35002: ST_TO_ADDR
// if p3 = 115 then
35003: LD_VAR 0 3
35007: PUSH
35008: LD_INT 115
35010: EQUAL
35011: IFFALSE 35021
// sRanger := true ;
35013: LD_ADDR_EXP 140
35017: PUSH
35018: LD_INT 1
35020: ST_TO_ADDR
// if p3 = 116 then
35021: LD_VAR 0 3
35025: PUSH
35026: LD_INT 116
35028: EQUAL
35029: IFFALSE 35039
// sComputer := true ;
35031: LD_ADDR_EXP 141
35035: PUSH
35036: LD_INT 1
35038: ST_TO_ADDR
// if p3 = 117 then
35039: LD_VAR 0 3
35043: PUSH
35044: LD_INT 117
35046: EQUAL
35047: IFFALSE 35057
// s30 := true ;
35049: LD_ADDR_EXP 142
35053: PUSH
35054: LD_INT 1
35056: ST_TO_ADDR
// if p3 = 118 then
35057: LD_VAR 0 3
35061: PUSH
35062: LD_INT 118
35064: EQUAL
35065: IFFALSE 35075
// s60 := true ;
35067: LD_ADDR_EXP 143
35071: PUSH
35072: LD_INT 1
35074: ST_TO_ADDR
// end ; if p2 = hack_mode then
35075: LD_VAR 0 2
35079: PUSH
35080: LD_INT 101
35082: EQUAL
35083: IFFALSE 35211
// begin case p3 of 1 :
35085: LD_VAR 0 3
35089: PUSH
35090: LD_INT 1
35092: DOUBLE
35093: EQUAL
35094: IFTRUE 35098
35096: GO 35105
35098: POP
// hHackUnlimitedResources ; 2 :
35099: CALL 47358 0 0
35103: GO 35211
35105: LD_INT 2
35107: DOUBLE
35108: EQUAL
35109: IFTRUE 35113
35111: GO 35120
35113: POP
// hHackSetLevel10 ; 3 :
35114: CALL 47491 0 0
35118: GO 35211
35120: LD_INT 3
35122: DOUBLE
35123: EQUAL
35124: IFTRUE 35128
35126: GO 35135
35128: POP
// hHackSetLevel10YourUnits ; 4 :
35129: CALL 47576 0 0
35133: GO 35211
35135: LD_INT 4
35137: DOUBLE
35138: EQUAL
35139: IFTRUE 35143
35141: GO 35150
35143: POP
// hHackInvincible ; 5 :
35144: CALL 48024 0 0
35148: GO 35211
35150: LD_INT 5
35152: DOUBLE
35153: EQUAL
35154: IFTRUE 35158
35156: GO 35165
35158: POP
// hHackInvisible ; 6 :
35159: CALL 48135 0 0
35163: GO 35211
35165: LD_INT 6
35167: DOUBLE
35168: EQUAL
35169: IFTRUE 35173
35171: GO 35180
35173: POP
// hHackChangeYourSide ; 7 :
35174: CALL 48192 0 0
35178: GO 35211
35180: LD_INT 7
35182: DOUBLE
35183: EQUAL
35184: IFTRUE 35188
35186: GO 35195
35188: POP
// hHackChangeUnitSide ; 8 :
35189: CALL 48234 0 0
35193: GO 35211
35195: LD_INT 8
35197: DOUBLE
35198: EQUAL
35199: IFTRUE 35203
35201: GO 35210
35203: POP
// hHackFog ; end ;
35204: CALL 48335 0 0
35208: GO 35211
35210: POP
// end ; if p2 = game_save_mode then
35211: LD_VAR 0 2
35215: PUSH
35216: LD_INT 102
35218: EQUAL
35219: IFFALSE 35274
// begin if p3 = 1 then
35221: LD_VAR 0 3
35225: PUSH
35226: LD_INT 1
35228: EQUAL
35229: IFFALSE 35241
// globalGameSaveCounter := p4 ;
35231: LD_ADDR_EXP 86
35235: PUSH
35236: LD_VAR 0 4
35240: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
35241: LD_VAR 0 3
35245: PUSH
35246: LD_INT 2
35248: EQUAL
35249: PUSH
35250: LD_EXP 86
35254: AND
35255: IFFALSE 35274
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
35257: LD_STRING setGameSaveCounter(
35259: PUSH
35260: LD_EXP 86
35264: STR
35265: PUSH
35266: LD_STRING )
35268: STR
35269: PPUSH
35270: CALL_OW 559
// end ; end ;
35274: LD_VAR 0 7
35278: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
35279: LD_INT 0
35281: PPUSH
// streamModeActive := false ;
35282: LD_ADDR_EXP 87
35286: PUSH
35287: LD_INT 0
35289: ST_TO_ADDR
// normalCounter := 36 ;
35290: LD_ADDR_EXP 88
35294: PUSH
35295: LD_INT 36
35297: ST_TO_ADDR
// hardcoreCounter := 18 ;
35298: LD_ADDR_EXP 89
35302: PUSH
35303: LD_INT 18
35305: ST_TO_ADDR
// sRocket := false ;
35306: LD_ADDR_EXP 92
35310: PUSH
35311: LD_INT 0
35313: ST_TO_ADDR
// sSpeed := false ;
35314: LD_ADDR_EXP 91
35318: PUSH
35319: LD_INT 0
35321: ST_TO_ADDR
// sEngine := false ;
35322: LD_ADDR_EXP 93
35326: PUSH
35327: LD_INT 0
35329: ST_TO_ADDR
// sSpec := false ;
35330: LD_ADDR_EXP 90
35334: PUSH
35335: LD_INT 0
35337: ST_TO_ADDR
// sLevel := false ;
35338: LD_ADDR_EXP 94
35342: PUSH
35343: LD_INT 0
35345: ST_TO_ADDR
// sArmoury := false ;
35346: LD_ADDR_EXP 95
35350: PUSH
35351: LD_INT 0
35353: ST_TO_ADDR
// sRadar := false ;
35354: LD_ADDR_EXP 96
35358: PUSH
35359: LD_INT 0
35361: ST_TO_ADDR
// sBunker := false ;
35362: LD_ADDR_EXP 97
35366: PUSH
35367: LD_INT 0
35369: ST_TO_ADDR
// sHack := false ;
35370: LD_ADDR_EXP 98
35374: PUSH
35375: LD_INT 0
35377: ST_TO_ADDR
// sFire := false ;
35378: LD_ADDR_EXP 99
35382: PUSH
35383: LD_INT 0
35385: ST_TO_ADDR
// sRefresh := false ;
35386: LD_ADDR_EXP 100
35390: PUSH
35391: LD_INT 0
35393: ST_TO_ADDR
// sExp := false ;
35394: LD_ADDR_EXP 101
35398: PUSH
35399: LD_INT 0
35401: ST_TO_ADDR
// sDepot := false ;
35402: LD_ADDR_EXP 102
35406: PUSH
35407: LD_INT 0
35409: ST_TO_ADDR
// sFlag := false ;
35410: LD_ADDR_EXP 103
35414: PUSH
35415: LD_INT 0
35417: ST_TO_ADDR
// sKamikadze := false ;
35418: LD_ADDR_EXP 111
35422: PUSH
35423: LD_INT 0
35425: ST_TO_ADDR
// sTroll := false ;
35426: LD_ADDR_EXP 112
35430: PUSH
35431: LD_INT 0
35433: ST_TO_ADDR
// sSlow := false ;
35434: LD_ADDR_EXP 113
35438: PUSH
35439: LD_INT 0
35441: ST_TO_ADDR
// sLack := false ;
35442: LD_ADDR_EXP 114
35446: PUSH
35447: LD_INT 0
35449: ST_TO_ADDR
// sTank := false ;
35450: LD_ADDR_EXP 116
35454: PUSH
35455: LD_INT 0
35457: ST_TO_ADDR
// sRemote := false ;
35458: LD_ADDR_EXP 117
35462: PUSH
35463: LD_INT 0
35465: ST_TO_ADDR
// sPowell := false ;
35466: LD_ADDR_EXP 118
35470: PUSH
35471: LD_INT 0
35473: ST_TO_ADDR
// sTeleport := false ;
35474: LD_ADDR_EXP 121
35478: PUSH
35479: LD_INT 0
35481: ST_TO_ADDR
// sOilTower := false ;
35482: LD_ADDR_EXP 123
35486: PUSH
35487: LD_INT 0
35489: ST_TO_ADDR
// sShovel := false ;
35490: LD_ADDR_EXP 124
35494: PUSH
35495: LD_INT 0
35497: ST_TO_ADDR
// sSheik := false ;
35498: LD_ADDR_EXP 125
35502: PUSH
35503: LD_INT 0
35505: ST_TO_ADDR
// sEarthquake := false ;
35506: LD_ADDR_EXP 127
35510: PUSH
35511: LD_INT 0
35513: ST_TO_ADDR
// sAI := false ;
35514: LD_ADDR_EXP 128
35518: PUSH
35519: LD_INT 0
35521: ST_TO_ADDR
// sCargo := false ;
35522: LD_ADDR_EXP 131
35526: PUSH
35527: LD_INT 0
35529: ST_TO_ADDR
// sDLaser := false ;
35530: LD_ADDR_EXP 132
35534: PUSH
35535: LD_INT 0
35537: ST_TO_ADDR
// sExchange := false ;
35538: LD_ADDR_EXP 133
35542: PUSH
35543: LD_INT 0
35545: ST_TO_ADDR
// sFac := false ;
35546: LD_ADDR_EXP 134
35550: PUSH
35551: LD_INT 0
35553: ST_TO_ADDR
// sPower := false ;
35554: LD_ADDR_EXP 135
35558: PUSH
35559: LD_INT 0
35561: ST_TO_ADDR
// sRandom := false ;
35562: LD_ADDR_EXP 136
35566: PUSH
35567: LD_INT 0
35569: ST_TO_ADDR
// sShield := false ;
35570: LD_ADDR_EXP 137
35574: PUSH
35575: LD_INT 0
35577: ST_TO_ADDR
// sTime := false ;
35578: LD_ADDR_EXP 138
35582: PUSH
35583: LD_INT 0
35585: ST_TO_ADDR
// sTools := false ;
35586: LD_ADDR_EXP 139
35590: PUSH
35591: LD_INT 0
35593: ST_TO_ADDR
// sSold := false ;
35594: LD_ADDR_EXP 104
35598: PUSH
35599: LD_INT 0
35601: ST_TO_ADDR
// sDiff := false ;
35602: LD_ADDR_EXP 105
35606: PUSH
35607: LD_INT 0
35609: ST_TO_ADDR
// sFog := false ;
35610: LD_ADDR_EXP 108
35614: PUSH
35615: LD_INT 0
35617: ST_TO_ADDR
// sReset := false ;
35618: LD_ADDR_EXP 109
35622: PUSH
35623: LD_INT 0
35625: ST_TO_ADDR
// sSun := false ;
35626: LD_ADDR_EXP 110
35630: PUSH
35631: LD_INT 0
35633: ST_TO_ADDR
// sTiger := false ;
35634: LD_ADDR_EXP 106
35638: PUSH
35639: LD_INT 0
35641: ST_TO_ADDR
// sBomb := false ;
35642: LD_ADDR_EXP 107
35646: PUSH
35647: LD_INT 0
35649: ST_TO_ADDR
// sWound := false ;
35650: LD_ADDR_EXP 115
35654: PUSH
35655: LD_INT 0
35657: ST_TO_ADDR
// sBetray := false ;
35658: LD_ADDR_EXP 119
35662: PUSH
35663: LD_INT 0
35665: ST_TO_ADDR
// sContamin := false ;
35666: LD_ADDR_EXP 120
35670: PUSH
35671: LD_INT 0
35673: ST_TO_ADDR
// sOil := false ;
35674: LD_ADDR_EXP 122
35678: PUSH
35679: LD_INT 0
35681: ST_TO_ADDR
// sStu := false ;
35682: LD_ADDR_EXP 126
35686: PUSH
35687: LD_INT 0
35689: ST_TO_ADDR
// sBazooka := false ;
35690: LD_ADDR_EXP 129
35694: PUSH
35695: LD_INT 0
35697: ST_TO_ADDR
// sMortar := false ;
35698: LD_ADDR_EXP 130
35702: PUSH
35703: LD_INT 0
35705: ST_TO_ADDR
// sRanger := false ;
35706: LD_ADDR_EXP 140
35710: PUSH
35711: LD_INT 0
35713: ST_TO_ADDR
// sComputer := false ;
35714: LD_ADDR_EXP 141
35718: PUSH
35719: LD_INT 0
35721: ST_TO_ADDR
// s30 := false ;
35722: LD_ADDR_EXP 142
35726: PUSH
35727: LD_INT 0
35729: ST_TO_ADDR
// s60 := false ;
35730: LD_ADDR_EXP 143
35734: PUSH
35735: LD_INT 0
35737: ST_TO_ADDR
// end ;
35738: LD_VAR 0 1
35742: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
35743: LD_INT 0
35745: PPUSH
35746: PPUSH
35747: PPUSH
35748: PPUSH
35749: PPUSH
35750: PPUSH
35751: PPUSH
// result := [ ] ;
35752: LD_ADDR_VAR 0 2
35756: PUSH
35757: EMPTY
35758: ST_TO_ADDR
// if campaign_id = 1 then
35759: LD_OWVAR 69
35763: PUSH
35764: LD_INT 1
35766: EQUAL
35767: IFFALSE 38933
// begin case mission_number of 1 :
35769: LD_OWVAR 70
35773: PUSH
35774: LD_INT 1
35776: DOUBLE
35777: EQUAL
35778: IFTRUE 35782
35780: GO 35858
35782: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
35783: LD_ADDR_VAR 0 2
35787: PUSH
35788: LD_INT 2
35790: PUSH
35791: LD_INT 4
35793: PUSH
35794: LD_INT 11
35796: PUSH
35797: LD_INT 12
35799: PUSH
35800: LD_INT 15
35802: PUSH
35803: LD_INT 16
35805: PUSH
35806: LD_INT 22
35808: PUSH
35809: LD_INT 23
35811: PUSH
35812: LD_INT 26
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: PUSH
35826: LD_INT 101
35828: PUSH
35829: LD_INT 102
35831: PUSH
35832: LD_INT 106
35834: PUSH
35835: LD_INT 116
35837: PUSH
35838: LD_INT 117
35840: PUSH
35841: LD_INT 118
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: LIST
35848: LIST
35849: LIST
35850: LIST
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: ST_TO_ADDR
35856: GO 38931
35858: LD_INT 2
35860: DOUBLE
35861: EQUAL
35862: IFTRUE 35866
35864: GO 35950
35866: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
35867: LD_ADDR_VAR 0 2
35871: PUSH
35872: LD_INT 2
35874: PUSH
35875: LD_INT 4
35877: PUSH
35878: LD_INT 11
35880: PUSH
35881: LD_INT 12
35883: PUSH
35884: LD_INT 15
35886: PUSH
35887: LD_INT 16
35889: PUSH
35890: LD_INT 22
35892: PUSH
35893: LD_INT 23
35895: PUSH
35896: LD_INT 26
35898: PUSH
35899: EMPTY
35900: LIST
35901: LIST
35902: LIST
35903: LIST
35904: LIST
35905: LIST
35906: LIST
35907: LIST
35908: LIST
35909: PUSH
35910: LD_INT 101
35912: PUSH
35913: LD_INT 102
35915: PUSH
35916: LD_INT 105
35918: PUSH
35919: LD_INT 106
35921: PUSH
35922: LD_INT 108
35924: PUSH
35925: LD_INT 116
35927: PUSH
35928: LD_INT 117
35930: PUSH
35931: LD_INT 118
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: LIST
35938: LIST
35939: LIST
35940: LIST
35941: LIST
35942: LIST
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: ST_TO_ADDR
35948: GO 38931
35950: LD_INT 3
35952: DOUBLE
35953: EQUAL
35954: IFTRUE 35958
35956: GO 36046
35958: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
35959: LD_ADDR_VAR 0 2
35963: PUSH
35964: LD_INT 2
35966: PUSH
35967: LD_INT 4
35969: PUSH
35970: LD_INT 5
35972: PUSH
35973: LD_INT 11
35975: PUSH
35976: LD_INT 12
35978: PUSH
35979: LD_INT 15
35981: PUSH
35982: LD_INT 16
35984: PUSH
35985: LD_INT 22
35987: PUSH
35988: LD_INT 26
35990: PUSH
35991: LD_INT 36
35993: PUSH
35994: EMPTY
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: LIST
36000: LIST
36001: LIST
36002: LIST
36003: LIST
36004: LIST
36005: PUSH
36006: LD_INT 101
36008: PUSH
36009: LD_INT 102
36011: PUSH
36012: LD_INT 105
36014: PUSH
36015: LD_INT 106
36017: PUSH
36018: LD_INT 108
36020: PUSH
36021: LD_INT 116
36023: PUSH
36024: LD_INT 117
36026: PUSH
36027: LD_INT 118
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: ST_TO_ADDR
36044: GO 38931
36046: LD_INT 4
36048: DOUBLE
36049: EQUAL
36050: IFTRUE 36054
36052: GO 36150
36054: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
36055: LD_ADDR_VAR 0 2
36059: PUSH
36060: LD_INT 2
36062: PUSH
36063: LD_INT 4
36065: PUSH
36066: LD_INT 5
36068: PUSH
36069: LD_INT 8
36071: PUSH
36072: LD_INT 11
36074: PUSH
36075: LD_INT 12
36077: PUSH
36078: LD_INT 15
36080: PUSH
36081: LD_INT 16
36083: PUSH
36084: LD_INT 22
36086: PUSH
36087: LD_INT 23
36089: PUSH
36090: LD_INT 26
36092: PUSH
36093: LD_INT 36
36095: PUSH
36096: EMPTY
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: PUSH
36110: LD_INT 101
36112: PUSH
36113: LD_INT 102
36115: PUSH
36116: LD_INT 105
36118: PUSH
36119: LD_INT 106
36121: PUSH
36122: LD_INT 108
36124: PUSH
36125: LD_INT 116
36127: PUSH
36128: LD_INT 117
36130: PUSH
36131: LD_INT 118
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: LIST
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: ST_TO_ADDR
36148: GO 38931
36150: LD_INT 5
36152: DOUBLE
36153: EQUAL
36154: IFTRUE 36158
36156: GO 36270
36158: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
36159: LD_ADDR_VAR 0 2
36163: PUSH
36164: LD_INT 2
36166: PUSH
36167: LD_INT 4
36169: PUSH
36170: LD_INT 5
36172: PUSH
36173: LD_INT 6
36175: PUSH
36176: LD_INT 8
36178: PUSH
36179: LD_INT 11
36181: PUSH
36182: LD_INT 12
36184: PUSH
36185: LD_INT 15
36187: PUSH
36188: LD_INT 16
36190: PUSH
36191: LD_INT 22
36193: PUSH
36194: LD_INT 23
36196: PUSH
36197: LD_INT 25
36199: PUSH
36200: LD_INT 26
36202: PUSH
36203: LD_INT 36
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 101
36224: PUSH
36225: LD_INT 102
36227: PUSH
36228: LD_INT 105
36230: PUSH
36231: LD_INT 106
36233: PUSH
36234: LD_INT 108
36236: PUSH
36237: LD_INT 109
36239: PUSH
36240: LD_INT 112
36242: PUSH
36243: LD_INT 116
36245: PUSH
36246: LD_INT 117
36248: PUSH
36249: LD_INT 118
36251: PUSH
36252: EMPTY
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: PUSH
36264: EMPTY
36265: LIST
36266: LIST
36267: ST_TO_ADDR
36268: GO 38931
36270: LD_INT 6
36272: DOUBLE
36273: EQUAL
36274: IFTRUE 36278
36276: GO 36410
36278: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
36279: LD_ADDR_VAR 0 2
36283: PUSH
36284: LD_INT 2
36286: PUSH
36287: LD_INT 4
36289: PUSH
36290: LD_INT 5
36292: PUSH
36293: LD_INT 6
36295: PUSH
36296: LD_INT 8
36298: PUSH
36299: LD_INT 11
36301: PUSH
36302: LD_INT 12
36304: PUSH
36305: LD_INT 15
36307: PUSH
36308: LD_INT 16
36310: PUSH
36311: LD_INT 20
36313: PUSH
36314: LD_INT 21
36316: PUSH
36317: LD_INT 22
36319: PUSH
36320: LD_INT 23
36322: PUSH
36323: LD_INT 25
36325: PUSH
36326: LD_INT 26
36328: PUSH
36329: LD_INT 30
36331: PUSH
36332: LD_INT 31
36334: PUSH
36335: LD_INT 32
36337: PUSH
36338: LD_INT 36
36340: PUSH
36341: EMPTY
36342: LIST
36343: LIST
36344: LIST
36345: LIST
36346: LIST
36347: LIST
36348: LIST
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 101
36364: PUSH
36365: LD_INT 102
36367: PUSH
36368: LD_INT 105
36370: PUSH
36371: LD_INT 106
36373: PUSH
36374: LD_INT 108
36376: PUSH
36377: LD_INT 109
36379: PUSH
36380: LD_INT 112
36382: PUSH
36383: LD_INT 116
36385: PUSH
36386: LD_INT 117
36388: PUSH
36389: LD_INT 118
36391: PUSH
36392: EMPTY
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: ST_TO_ADDR
36408: GO 38931
36410: LD_INT 7
36412: DOUBLE
36413: EQUAL
36414: IFTRUE 36418
36416: GO 36530
36418: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
36419: LD_ADDR_VAR 0 2
36423: PUSH
36424: LD_INT 2
36426: PUSH
36427: LD_INT 4
36429: PUSH
36430: LD_INT 5
36432: PUSH
36433: LD_INT 7
36435: PUSH
36436: LD_INT 11
36438: PUSH
36439: LD_INT 12
36441: PUSH
36442: LD_INT 15
36444: PUSH
36445: LD_INT 16
36447: PUSH
36448: LD_INT 20
36450: PUSH
36451: LD_INT 21
36453: PUSH
36454: LD_INT 22
36456: PUSH
36457: LD_INT 23
36459: PUSH
36460: LD_INT 25
36462: PUSH
36463: LD_INT 26
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: PUSH
36482: LD_INT 101
36484: PUSH
36485: LD_INT 102
36487: PUSH
36488: LD_INT 103
36490: PUSH
36491: LD_INT 105
36493: PUSH
36494: LD_INT 106
36496: PUSH
36497: LD_INT 108
36499: PUSH
36500: LD_INT 112
36502: PUSH
36503: LD_INT 116
36505: PUSH
36506: LD_INT 117
36508: PUSH
36509: LD_INT 118
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: LIST
36516: LIST
36517: LIST
36518: LIST
36519: LIST
36520: LIST
36521: LIST
36522: LIST
36523: PUSH
36524: EMPTY
36525: LIST
36526: LIST
36527: ST_TO_ADDR
36528: GO 38931
36530: LD_INT 8
36532: DOUBLE
36533: EQUAL
36534: IFTRUE 36538
36536: GO 36678
36538: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
36539: LD_ADDR_VAR 0 2
36543: PUSH
36544: LD_INT 2
36546: PUSH
36547: LD_INT 4
36549: PUSH
36550: LD_INT 5
36552: PUSH
36553: LD_INT 6
36555: PUSH
36556: LD_INT 7
36558: PUSH
36559: LD_INT 8
36561: PUSH
36562: LD_INT 11
36564: PUSH
36565: LD_INT 12
36567: PUSH
36568: LD_INT 15
36570: PUSH
36571: LD_INT 16
36573: PUSH
36574: LD_INT 20
36576: PUSH
36577: LD_INT 21
36579: PUSH
36580: LD_INT 22
36582: PUSH
36583: LD_INT 23
36585: PUSH
36586: LD_INT 25
36588: PUSH
36589: LD_INT 26
36591: PUSH
36592: LD_INT 30
36594: PUSH
36595: LD_INT 31
36597: PUSH
36598: LD_INT 32
36600: PUSH
36601: LD_INT 36
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: LIST
36610: LIST
36611: LIST
36612: LIST
36613: LIST
36614: LIST
36615: LIST
36616: LIST
36617: LIST
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: PUSH
36626: LD_INT 101
36628: PUSH
36629: LD_INT 102
36631: PUSH
36632: LD_INT 103
36634: PUSH
36635: LD_INT 105
36637: PUSH
36638: LD_INT 106
36640: PUSH
36641: LD_INT 108
36643: PUSH
36644: LD_INT 109
36646: PUSH
36647: LD_INT 112
36649: PUSH
36650: LD_INT 116
36652: PUSH
36653: LD_INT 117
36655: PUSH
36656: LD_INT 118
36658: PUSH
36659: EMPTY
36660: LIST
36661: LIST
36662: LIST
36663: LIST
36664: LIST
36665: LIST
36666: LIST
36667: LIST
36668: LIST
36669: LIST
36670: LIST
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: ST_TO_ADDR
36676: GO 38931
36678: LD_INT 9
36680: DOUBLE
36681: EQUAL
36682: IFTRUE 36686
36684: GO 36834
36686: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
36687: LD_ADDR_VAR 0 2
36691: PUSH
36692: LD_INT 2
36694: PUSH
36695: LD_INT 4
36697: PUSH
36698: LD_INT 5
36700: PUSH
36701: LD_INT 6
36703: PUSH
36704: LD_INT 7
36706: PUSH
36707: LD_INT 8
36709: PUSH
36710: LD_INT 11
36712: PUSH
36713: LD_INT 12
36715: PUSH
36716: LD_INT 15
36718: PUSH
36719: LD_INT 16
36721: PUSH
36722: LD_INT 20
36724: PUSH
36725: LD_INT 21
36727: PUSH
36728: LD_INT 22
36730: PUSH
36731: LD_INT 23
36733: PUSH
36734: LD_INT 25
36736: PUSH
36737: LD_INT 26
36739: PUSH
36740: LD_INT 28
36742: PUSH
36743: LD_INT 30
36745: PUSH
36746: LD_INT 31
36748: PUSH
36749: LD_INT 32
36751: PUSH
36752: LD_INT 36
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: LIST
36759: LIST
36760: LIST
36761: LIST
36762: LIST
36763: LIST
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 101
36780: PUSH
36781: LD_INT 102
36783: PUSH
36784: LD_INT 103
36786: PUSH
36787: LD_INT 105
36789: PUSH
36790: LD_INT 106
36792: PUSH
36793: LD_INT 108
36795: PUSH
36796: LD_INT 109
36798: PUSH
36799: LD_INT 112
36801: PUSH
36802: LD_INT 114
36804: PUSH
36805: LD_INT 116
36807: PUSH
36808: LD_INT 117
36810: PUSH
36811: LD_INT 118
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: PUSH
36828: EMPTY
36829: LIST
36830: LIST
36831: ST_TO_ADDR
36832: GO 38931
36834: LD_INT 10
36836: DOUBLE
36837: EQUAL
36838: IFTRUE 36842
36840: GO 37038
36842: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
36843: LD_ADDR_VAR 0 2
36847: PUSH
36848: LD_INT 2
36850: PUSH
36851: LD_INT 4
36853: PUSH
36854: LD_INT 5
36856: PUSH
36857: LD_INT 6
36859: PUSH
36860: LD_INT 7
36862: PUSH
36863: LD_INT 8
36865: PUSH
36866: LD_INT 9
36868: PUSH
36869: LD_INT 10
36871: PUSH
36872: LD_INT 11
36874: PUSH
36875: LD_INT 12
36877: PUSH
36878: LD_INT 13
36880: PUSH
36881: LD_INT 14
36883: PUSH
36884: LD_INT 15
36886: PUSH
36887: LD_INT 16
36889: PUSH
36890: LD_INT 17
36892: PUSH
36893: LD_INT 18
36895: PUSH
36896: LD_INT 19
36898: PUSH
36899: LD_INT 20
36901: PUSH
36902: LD_INT 21
36904: PUSH
36905: LD_INT 22
36907: PUSH
36908: LD_INT 23
36910: PUSH
36911: LD_INT 24
36913: PUSH
36914: LD_INT 25
36916: PUSH
36917: LD_INT 26
36919: PUSH
36920: LD_INT 28
36922: PUSH
36923: LD_INT 30
36925: PUSH
36926: LD_INT 31
36928: PUSH
36929: LD_INT 32
36931: PUSH
36932: LD_INT 36
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 101
36968: PUSH
36969: LD_INT 102
36971: PUSH
36972: LD_INT 103
36974: PUSH
36975: LD_INT 104
36977: PUSH
36978: LD_INT 105
36980: PUSH
36981: LD_INT 106
36983: PUSH
36984: LD_INT 107
36986: PUSH
36987: LD_INT 108
36989: PUSH
36990: LD_INT 109
36992: PUSH
36993: LD_INT 110
36995: PUSH
36996: LD_INT 111
36998: PUSH
36999: LD_INT 112
37001: PUSH
37002: LD_INT 114
37004: PUSH
37005: LD_INT 116
37007: PUSH
37008: LD_INT 117
37010: PUSH
37011: LD_INT 118
37013: PUSH
37014: EMPTY
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: PUSH
37032: EMPTY
37033: LIST
37034: LIST
37035: ST_TO_ADDR
37036: GO 38931
37038: LD_INT 11
37040: DOUBLE
37041: EQUAL
37042: IFTRUE 37046
37044: GO 37250
37046: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
37047: LD_ADDR_VAR 0 2
37051: PUSH
37052: LD_INT 2
37054: PUSH
37055: LD_INT 3
37057: PUSH
37058: LD_INT 4
37060: PUSH
37061: LD_INT 5
37063: PUSH
37064: LD_INT 6
37066: PUSH
37067: LD_INT 7
37069: PUSH
37070: LD_INT 8
37072: PUSH
37073: LD_INT 9
37075: PUSH
37076: LD_INT 10
37078: PUSH
37079: LD_INT 11
37081: PUSH
37082: LD_INT 12
37084: PUSH
37085: LD_INT 13
37087: PUSH
37088: LD_INT 14
37090: PUSH
37091: LD_INT 15
37093: PUSH
37094: LD_INT 16
37096: PUSH
37097: LD_INT 17
37099: PUSH
37100: LD_INT 18
37102: PUSH
37103: LD_INT 19
37105: PUSH
37106: LD_INT 20
37108: PUSH
37109: LD_INT 21
37111: PUSH
37112: LD_INT 22
37114: PUSH
37115: LD_INT 23
37117: PUSH
37118: LD_INT 24
37120: PUSH
37121: LD_INT 25
37123: PUSH
37124: LD_INT 26
37126: PUSH
37127: LD_INT 28
37129: PUSH
37130: LD_INT 30
37132: PUSH
37133: LD_INT 31
37135: PUSH
37136: LD_INT 32
37138: PUSH
37139: LD_INT 34
37141: PUSH
37142: LD_INT 36
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: LIST
37149: LIST
37150: LIST
37151: LIST
37152: LIST
37153: LIST
37154: LIST
37155: LIST
37156: LIST
37157: LIST
37158: LIST
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: PUSH
37178: LD_INT 101
37180: PUSH
37181: LD_INT 102
37183: PUSH
37184: LD_INT 103
37186: PUSH
37187: LD_INT 104
37189: PUSH
37190: LD_INT 105
37192: PUSH
37193: LD_INT 106
37195: PUSH
37196: LD_INT 107
37198: PUSH
37199: LD_INT 108
37201: PUSH
37202: LD_INT 109
37204: PUSH
37205: LD_INT 110
37207: PUSH
37208: LD_INT 111
37210: PUSH
37211: LD_INT 112
37213: PUSH
37214: LD_INT 114
37216: PUSH
37217: LD_INT 116
37219: PUSH
37220: LD_INT 117
37222: PUSH
37223: LD_INT 118
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: PUSH
37244: EMPTY
37245: LIST
37246: LIST
37247: ST_TO_ADDR
37248: GO 38931
37250: LD_INT 12
37252: DOUBLE
37253: EQUAL
37254: IFTRUE 37258
37256: GO 37478
37258: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
37259: LD_ADDR_VAR 0 2
37263: PUSH
37264: LD_INT 1
37266: PUSH
37267: LD_INT 2
37269: PUSH
37270: LD_INT 3
37272: PUSH
37273: LD_INT 4
37275: PUSH
37276: LD_INT 5
37278: PUSH
37279: LD_INT 6
37281: PUSH
37282: LD_INT 7
37284: PUSH
37285: LD_INT 8
37287: PUSH
37288: LD_INT 9
37290: PUSH
37291: LD_INT 10
37293: PUSH
37294: LD_INT 11
37296: PUSH
37297: LD_INT 12
37299: PUSH
37300: LD_INT 13
37302: PUSH
37303: LD_INT 14
37305: PUSH
37306: LD_INT 15
37308: PUSH
37309: LD_INT 16
37311: PUSH
37312: LD_INT 17
37314: PUSH
37315: LD_INT 18
37317: PUSH
37318: LD_INT 19
37320: PUSH
37321: LD_INT 20
37323: PUSH
37324: LD_INT 21
37326: PUSH
37327: LD_INT 22
37329: PUSH
37330: LD_INT 23
37332: PUSH
37333: LD_INT 24
37335: PUSH
37336: LD_INT 25
37338: PUSH
37339: LD_INT 26
37341: PUSH
37342: LD_INT 27
37344: PUSH
37345: LD_INT 28
37347: PUSH
37348: LD_INT 30
37350: PUSH
37351: LD_INT 31
37353: PUSH
37354: LD_INT 32
37356: PUSH
37357: LD_INT 33
37359: PUSH
37360: LD_INT 34
37362: PUSH
37363: LD_INT 36
37365: PUSH
37366: EMPTY
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: PUSH
37402: LD_INT 101
37404: PUSH
37405: LD_INT 102
37407: PUSH
37408: LD_INT 103
37410: PUSH
37411: LD_INT 104
37413: PUSH
37414: LD_INT 105
37416: PUSH
37417: LD_INT 106
37419: PUSH
37420: LD_INT 107
37422: PUSH
37423: LD_INT 108
37425: PUSH
37426: LD_INT 109
37428: PUSH
37429: LD_INT 110
37431: PUSH
37432: LD_INT 111
37434: PUSH
37435: LD_INT 112
37437: PUSH
37438: LD_INT 113
37440: PUSH
37441: LD_INT 114
37443: PUSH
37444: LD_INT 116
37446: PUSH
37447: LD_INT 117
37449: PUSH
37450: LD_INT 118
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: ST_TO_ADDR
37476: GO 38931
37478: LD_INT 13
37480: DOUBLE
37481: EQUAL
37482: IFTRUE 37486
37484: GO 37694
37486: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
37487: LD_ADDR_VAR 0 2
37491: PUSH
37492: LD_INT 1
37494: PUSH
37495: LD_INT 2
37497: PUSH
37498: LD_INT 3
37500: PUSH
37501: LD_INT 4
37503: PUSH
37504: LD_INT 5
37506: PUSH
37507: LD_INT 8
37509: PUSH
37510: LD_INT 9
37512: PUSH
37513: LD_INT 10
37515: PUSH
37516: LD_INT 11
37518: PUSH
37519: LD_INT 12
37521: PUSH
37522: LD_INT 14
37524: PUSH
37525: LD_INT 15
37527: PUSH
37528: LD_INT 16
37530: PUSH
37531: LD_INT 17
37533: PUSH
37534: LD_INT 18
37536: PUSH
37537: LD_INT 19
37539: PUSH
37540: LD_INT 20
37542: PUSH
37543: LD_INT 21
37545: PUSH
37546: LD_INT 22
37548: PUSH
37549: LD_INT 23
37551: PUSH
37552: LD_INT 24
37554: PUSH
37555: LD_INT 25
37557: PUSH
37558: LD_INT 26
37560: PUSH
37561: LD_INT 27
37563: PUSH
37564: LD_INT 28
37566: PUSH
37567: LD_INT 30
37569: PUSH
37570: LD_INT 31
37572: PUSH
37573: LD_INT 32
37575: PUSH
37576: LD_INT 33
37578: PUSH
37579: LD_INT 34
37581: PUSH
37582: LD_INT 36
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: LIST
37597: LIST
37598: LIST
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: PUSH
37618: LD_INT 101
37620: PUSH
37621: LD_INT 102
37623: PUSH
37624: LD_INT 103
37626: PUSH
37627: LD_INT 104
37629: PUSH
37630: LD_INT 105
37632: PUSH
37633: LD_INT 106
37635: PUSH
37636: LD_INT 107
37638: PUSH
37639: LD_INT 108
37641: PUSH
37642: LD_INT 109
37644: PUSH
37645: LD_INT 110
37647: PUSH
37648: LD_INT 111
37650: PUSH
37651: LD_INT 112
37653: PUSH
37654: LD_INT 113
37656: PUSH
37657: LD_INT 114
37659: PUSH
37660: LD_INT 116
37662: PUSH
37663: LD_INT 117
37665: PUSH
37666: LD_INT 118
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: PUSH
37688: EMPTY
37689: LIST
37690: LIST
37691: ST_TO_ADDR
37692: GO 38931
37694: LD_INT 14
37696: DOUBLE
37697: EQUAL
37698: IFTRUE 37702
37700: GO 37926
37702: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
37703: LD_ADDR_VAR 0 2
37707: PUSH
37708: LD_INT 1
37710: PUSH
37711: LD_INT 2
37713: PUSH
37714: LD_INT 3
37716: PUSH
37717: LD_INT 4
37719: PUSH
37720: LD_INT 5
37722: PUSH
37723: LD_INT 6
37725: PUSH
37726: LD_INT 7
37728: PUSH
37729: LD_INT 8
37731: PUSH
37732: LD_INT 9
37734: PUSH
37735: LD_INT 10
37737: PUSH
37738: LD_INT 11
37740: PUSH
37741: LD_INT 12
37743: PUSH
37744: LD_INT 13
37746: PUSH
37747: LD_INT 14
37749: PUSH
37750: LD_INT 15
37752: PUSH
37753: LD_INT 16
37755: PUSH
37756: LD_INT 17
37758: PUSH
37759: LD_INT 18
37761: PUSH
37762: LD_INT 19
37764: PUSH
37765: LD_INT 20
37767: PUSH
37768: LD_INT 21
37770: PUSH
37771: LD_INT 22
37773: PUSH
37774: LD_INT 23
37776: PUSH
37777: LD_INT 24
37779: PUSH
37780: LD_INT 25
37782: PUSH
37783: LD_INT 26
37785: PUSH
37786: LD_INT 27
37788: PUSH
37789: LD_INT 28
37791: PUSH
37792: LD_INT 29
37794: PUSH
37795: LD_INT 30
37797: PUSH
37798: LD_INT 31
37800: PUSH
37801: LD_INT 32
37803: PUSH
37804: LD_INT 33
37806: PUSH
37807: LD_INT 34
37809: PUSH
37810: LD_INT 36
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: PUSH
37850: LD_INT 101
37852: PUSH
37853: LD_INT 102
37855: PUSH
37856: LD_INT 103
37858: PUSH
37859: LD_INT 104
37861: PUSH
37862: LD_INT 105
37864: PUSH
37865: LD_INT 106
37867: PUSH
37868: LD_INT 107
37870: PUSH
37871: LD_INT 108
37873: PUSH
37874: LD_INT 109
37876: PUSH
37877: LD_INT 110
37879: PUSH
37880: LD_INT 111
37882: PUSH
37883: LD_INT 112
37885: PUSH
37886: LD_INT 113
37888: PUSH
37889: LD_INT 114
37891: PUSH
37892: LD_INT 116
37894: PUSH
37895: LD_INT 117
37897: PUSH
37898: LD_INT 118
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: PUSH
37920: EMPTY
37921: LIST
37922: LIST
37923: ST_TO_ADDR
37924: GO 38931
37926: LD_INT 15
37928: DOUBLE
37929: EQUAL
37930: IFTRUE 37934
37932: GO 38158
37934: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
37935: LD_ADDR_VAR 0 2
37939: PUSH
37940: LD_INT 1
37942: PUSH
37943: LD_INT 2
37945: PUSH
37946: LD_INT 3
37948: PUSH
37949: LD_INT 4
37951: PUSH
37952: LD_INT 5
37954: PUSH
37955: LD_INT 6
37957: PUSH
37958: LD_INT 7
37960: PUSH
37961: LD_INT 8
37963: PUSH
37964: LD_INT 9
37966: PUSH
37967: LD_INT 10
37969: PUSH
37970: LD_INT 11
37972: PUSH
37973: LD_INT 12
37975: PUSH
37976: LD_INT 13
37978: PUSH
37979: LD_INT 14
37981: PUSH
37982: LD_INT 15
37984: PUSH
37985: LD_INT 16
37987: PUSH
37988: LD_INT 17
37990: PUSH
37991: LD_INT 18
37993: PUSH
37994: LD_INT 19
37996: PUSH
37997: LD_INT 20
37999: PUSH
38000: LD_INT 21
38002: PUSH
38003: LD_INT 22
38005: PUSH
38006: LD_INT 23
38008: PUSH
38009: LD_INT 24
38011: PUSH
38012: LD_INT 25
38014: PUSH
38015: LD_INT 26
38017: PUSH
38018: LD_INT 27
38020: PUSH
38021: LD_INT 28
38023: PUSH
38024: LD_INT 29
38026: PUSH
38027: LD_INT 30
38029: PUSH
38030: LD_INT 31
38032: PUSH
38033: LD_INT 32
38035: PUSH
38036: LD_INT 33
38038: PUSH
38039: LD_INT 34
38041: PUSH
38042: LD_INT 36
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: LIST
38049: LIST
38050: LIST
38051: LIST
38052: LIST
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 101
38084: PUSH
38085: LD_INT 102
38087: PUSH
38088: LD_INT 103
38090: PUSH
38091: LD_INT 104
38093: PUSH
38094: LD_INT 105
38096: PUSH
38097: LD_INT 106
38099: PUSH
38100: LD_INT 107
38102: PUSH
38103: LD_INT 108
38105: PUSH
38106: LD_INT 109
38108: PUSH
38109: LD_INT 110
38111: PUSH
38112: LD_INT 111
38114: PUSH
38115: LD_INT 112
38117: PUSH
38118: LD_INT 113
38120: PUSH
38121: LD_INT 114
38123: PUSH
38124: LD_INT 116
38126: PUSH
38127: LD_INT 117
38129: PUSH
38130: LD_INT 118
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: PUSH
38152: EMPTY
38153: LIST
38154: LIST
38155: ST_TO_ADDR
38156: GO 38931
38158: LD_INT 16
38160: DOUBLE
38161: EQUAL
38162: IFTRUE 38166
38164: GO 38302
38166: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
38167: LD_ADDR_VAR 0 2
38171: PUSH
38172: LD_INT 2
38174: PUSH
38175: LD_INT 4
38177: PUSH
38178: LD_INT 5
38180: PUSH
38181: LD_INT 7
38183: PUSH
38184: LD_INT 11
38186: PUSH
38187: LD_INT 12
38189: PUSH
38190: LD_INT 15
38192: PUSH
38193: LD_INT 16
38195: PUSH
38196: LD_INT 20
38198: PUSH
38199: LD_INT 21
38201: PUSH
38202: LD_INT 22
38204: PUSH
38205: LD_INT 23
38207: PUSH
38208: LD_INT 25
38210: PUSH
38211: LD_INT 26
38213: PUSH
38214: LD_INT 30
38216: PUSH
38217: LD_INT 31
38219: PUSH
38220: LD_INT 32
38222: PUSH
38223: LD_INT 33
38225: PUSH
38226: LD_INT 34
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: LIST
38233: LIST
38234: LIST
38235: LIST
38236: LIST
38237: LIST
38238: LIST
38239: LIST
38240: LIST
38241: LIST
38242: LIST
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 101
38252: PUSH
38253: LD_INT 102
38255: PUSH
38256: LD_INT 103
38258: PUSH
38259: LD_INT 106
38261: PUSH
38262: LD_INT 108
38264: PUSH
38265: LD_INT 112
38267: PUSH
38268: LD_INT 113
38270: PUSH
38271: LD_INT 114
38273: PUSH
38274: LD_INT 116
38276: PUSH
38277: LD_INT 117
38279: PUSH
38280: LD_INT 118
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: ST_TO_ADDR
38300: GO 38931
38302: LD_INT 17
38304: DOUBLE
38305: EQUAL
38306: IFTRUE 38310
38308: GO 38534
38310: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
38311: LD_ADDR_VAR 0 2
38315: PUSH
38316: LD_INT 1
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: LD_INT 3
38324: PUSH
38325: LD_INT 4
38327: PUSH
38328: LD_INT 5
38330: PUSH
38331: LD_INT 6
38333: PUSH
38334: LD_INT 7
38336: PUSH
38337: LD_INT 8
38339: PUSH
38340: LD_INT 9
38342: PUSH
38343: LD_INT 10
38345: PUSH
38346: LD_INT 11
38348: PUSH
38349: LD_INT 12
38351: PUSH
38352: LD_INT 13
38354: PUSH
38355: LD_INT 14
38357: PUSH
38358: LD_INT 15
38360: PUSH
38361: LD_INT 16
38363: PUSH
38364: LD_INT 17
38366: PUSH
38367: LD_INT 18
38369: PUSH
38370: LD_INT 19
38372: PUSH
38373: LD_INT 20
38375: PUSH
38376: LD_INT 21
38378: PUSH
38379: LD_INT 22
38381: PUSH
38382: LD_INT 23
38384: PUSH
38385: LD_INT 24
38387: PUSH
38388: LD_INT 25
38390: PUSH
38391: LD_INT 26
38393: PUSH
38394: LD_INT 27
38396: PUSH
38397: LD_INT 28
38399: PUSH
38400: LD_INT 29
38402: PUSH
38403: LD_INT 30
38405: PUSH
38406: LD_INT 31
38408: PUSH
38409: LD_INT 32
38411: PUSH
38412: LD_INT 33
38414: PUSH
38415: LD_INT 34
38417: PUSH
38418: LD_INT 36
38420: PUSH
38421: EMPTY
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 101
38460: PUSH
38461: LD_INT 102
38463: PUSH
38464: LD_INT 103
38466: PUSH
38467: LD_INT 104
38469: PUSH
38470: LD_INT 105
38472: PUSH
38473: LD_INT 106
38475: PUSH
38476: LD_INT 107
38478: PUSH
38479: LD_INT 108
38481: PUSH
38482: LD_INT 109
38484: PUSH
38485: LD_INT 110
38487: PUSH
38488: LD_INT 111
38490: PUSH
38491: LD_INT 112
38493: PUSH
38494: LD_INT 113
38496: PUSH
38497: LD_INT 114
38499: PUSH
38500: LD_INT 116
38502: PUSH
38503: LD_INT 117
38505: PUSH
38506: LD_INT 118
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: ST_TO_ADDR
38532: GO 38931
38534: LD_INT 18
38536: DOUBLE
38537: EQUAL
38538: IFTRUE 38542
38540: GO 38690
38542: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
38543: LD_ADDR_VAR 0 2
38547: PUSH
38548: LD_INT 2
38550: PUSH
38551: LD_INT 4
38553: PUSH
38554: LD_INT 5
38556: PUSH
38557: LD_INT 7
38559: PUSH
38560: LD_INT 11
38562: PUSH
38563: LD_INT 12
38565: PUSH
38566: LD_INT 15
38568: PUSH
38569: LD_INT 16
38571: PUSH
38572: LD_INT 20
38574: PUSH
38575: LD_INT 21
38577: PUSH
38578: LD_INT 22
38580: PUSH
38581: LD_INT 23
38583: PUSH
38584: LD_INT 25
38586: PUSH
38587: LD_INT 26
38589: PUSH
38590: LD_INT 30
38592: PUSH
38593: LD_INT 31
38595: PUSH
38596: LD_INT 32
38598: PUSH
38599: LD_INT 33
38601: PUSH
38602: LD_INT 34
38604: PUSH
38605: LD_INT 35
38607: PUSH
38608: LD_INT 36
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: LIST
38615: LIST
38616: LIST
38617: LIST
38618: LIST
38619: LIST
38620: LIST
38621: LIST
38622: LIST
38623: LIST
38624: LIST
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 101
38636: PUSH
38637: LD_INT 102
38639: PUSH
38640: LD_INT 103
38642: PUSH
38643: LD_INT 106
38645: PUSH
38646: LD_INT 108
38648: PUSH
38649: LD_INT 112
38651: PUSH
38652: LD_INT 113
38654: PUSH
38655: LD_INT 114
38657: PUSH
38658: LD_INT 115
38660: PUSH
38661: LD_INT 116
38663: PUSH
38664: LD_INT 117
38666: PUSH
38667: LD_INT 118
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: LIST
38674: LIST
38675: LIST
38676: LIST
38677: LIST
38678: LIST
38679: LIST
38680: LIST
38681: LIST
38682: LIST
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: ST_TO_ADDR
38688: GO 38931
38690: LD_INT 19
38692: DOUBLE
38693: EQUAL
38694: IFTRUE 38698
38696: GO 38930
38698: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
38699: LD_ADDR_VAR 0 2
38703: PUSH
38704: LD_INT 1
38706: PUSH
38707: LD_INT 2
38709: PUSH
38710: LD_INT 3
38712: PUSH
38713: LD_INT 4
38715: PUSH
38716: LD_INT 5
38718: PUSH
38719: LD_INT 6
38721: PUSH
38722: LD_INT 7
38724: PUSH
38725: LD_INT 8
38727: PUSH
38728: LD_INT 9
38730: PUSH
38731: LD_INT 10
38733: PUSH
38734: LD_INT 11
38736: PUSH
38737: LD_INT 12
38739: PUSH
38740: LD_INT 13
38742: PUSH
38743: LD_INT 14
38745: PUSH
38746: LD_INT 15
38748: PUSH
38749: LD_INT 16
38751: PUSH
38752: LD_INT 17
38754: PUSH
38755: LD_INT 18
38757: PUSH
38758: LD_INT 19
38760: PUSH
38761: LD_INT 20
38763: PUSH
38764: LD_INT 21
38766: PUSH
38767: LD_INT 22
38769: PUSH
38770: LD_INT 23
38772: PUSH
38773: LD_INT 24
38775: PUSH
38776: LD_INT 25
38778: PUSH
38779: LD_INT 26
38781: PUSH
38782: LD_INT 27
38784: PUSH
38785: LD_INT 28
38787: PUSH
38788: LD_INT 29
38790: PUSH
38791: LD_INT 30
38793: PUSH
38794: LD_INT 31
38796: PUSH
38797: LD_INT 32
38799: PUSH
38800: LD_INT 33
38802: PUSH
38803: LD_INT 34
38805: PUSH
38806: LD_INT 35
38808: PUSH
38809: LD_INT 36
38811: PUSH
38812: EMPTY
38813: LIST
38814: LIST
38815: LIST
38816: LIST
38817: LIST
38818: LIST
38819: LIST
38820: LIST
38821: LIST
38822: LIST
38823: LIST
38824: LIST
38825: LIST
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 101
38852: PUSH
38853: LD_INT 102
38855: PUSH
38856: LD_INT 103
38858: PUSH
38859: LD_INT 104
38861: PUSH
38862: LD_INT 105
38864: PUSH
38865: LD_INT 106
38867: PUSH
38868: LD_INT 107
38870: PUSH
38871: LD_INT 108
38873: PUSH
38874: LD_INT 109
38876: PUSH
38877: LD_INT 110
38879: PUSH
38880: LD_INT 111
38882: PUSH
38883: LD_INT 112
38885: PUSH
38886: LD_INT 113
38888: PUSH
38889: LD_INT 114
38891: PUSH
38892: LD_INT 115
38894: PUSH
38895: LD_INT 116
38897: PUSH
38898: LD_INT 117
38900: PUSH
38901: LD_INT 118
38903: PUSH
38904: EMPTY
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: ST_TO_ADDR
38928: GO 38931
38930: POP
// end else
38931: GO 39162
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
38933: LD_ADDR_VAR 0 2
38937: PUSH
38938: LD_INT 1
38940: PUSH
38941: LD_INT 2
38943: PUSH
38944: LD_INT 3
38946: PUSH
38947: LD_INT 4
38949: PUSH
38950: LD_INT 5
38952: PUSH
38953: LD_INT 6
38955: PUSH
38956: LD_INT 7
38958: PUSH
38959: LD_INT 8
38961: PUSH
38962: LD_INT 9
38964: PUSH
38965: LD_INT 10
38967: PUSH
38968: LD_INT 11
38970: PUSH
38971: LD_INT 12
38973: PUSH
38974: LD_INT 13
38976: PUSH
38977: LD_INT 14
38979: PUSH
38980: LD_INT 15
38982: PUSH
38983: LD_INT 16
38985: PUSH
38986: LD_INT 17
38988: PUSH
38989: LD_INT 18
38991: PUSH
38992: LD_INT 19
38994: PUSH
38995: LD_INT 20
38997: PUSH
38998: LD_INT 21
39000: PUSH
39001: LD_INT 22
39003: PUSH
39004: LD_INT 23
39006: PUSH
39007: LD_INT 24
39009: PUSH
39010: LD_INT 25
39012: PUSH
39013: LD_INT 26
39015: PUSH
39016: LD_INT 27
39018: PUSH
39019: LD_INT 28
39021: PUSH
39022: LD_INT 29
39024: PUSH
39025: LD_INT 30
39027: PUSH
39028: LD_INT 31
39030: PUSH
39031: LD_INT 32
39033: PUSH
39034: LD_INT 33
39036: PUSH
39037: LD_INT 34
39039: PUSH
39040: LD_INT 35
39042: PUSH
39043: LD_INT 36
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 101
39086: PUSH
39087: LD_INT 102
39089: PUSH
39090: LD_INT 103
39092: PUSH
39093: LD_INT 104
39095: PUSH
39096: LD_INT 105
39098: PUSH
39099: LD_INT 106
39101: PUSH
39102: LD_INT 107
39104: PUSH
39105: LD_INT 108
39107: PUSH
39108: LD_INT 109
39110: PUSH
39111: LD_INT 110
39113: PUSH
39114: LD_INT 111
39116: PUSH
39117: LD_INT 112
39119: PUSH
39120: LD_INT 113
39122: PUSH
39123: LD_INT 114
39125: PUSH
39126: LD_INT 115
39128: PUSH
39129: LD_INT 116
39131: PUSH
39132: LD_INT 117
39134: PUSH
39135: LD_INT 118
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: ST_TO_ADDR
// if result then
39162: LD_VAR 0 2
39166: IFFALSE 39952
// begin normal :=  ;
39168: LD_ADDR_VAR 0 5
39172: PUSH
39173: LD_STRING 
39175: ST_TO_ADDR
// hardcore :=  ;
39176: LD_ADDR_VAR 0 6
39180: PUSH
39181: LD_STRING 
39183: ST_TO_ADDR
// active :=  ;
39184: LD_ADDR_VAR 0 7
39188: PUSH
39189: LD_STRING 
39191: ST_TO_ADDR
// for i = 1 to normalCounter do
39192: LD_ADDR_VAR 0 8
39196: PUSH
39197: DOUBLE
39198: LD_INT 1
39200: DEC
39201: ST_TO_ADDR
39202: LD_EXP 88
39206: PUSH
39207: FOR_TO
39208: IFFALSE 39309
// begin tmp := 0 ;
39210: LD_ADDR_VAR 0 3
39214: PUSH
39215: LD_STRING 0
39217: ST_TO_ADDR
// if result [ 1 ] then
39218: LD_VAR 0 2
39222: PUSH
39223: LD_INT 1
39225: ARRAY
39226: IFFALSE 39291
// if result [ 1 ] [ 1 ] = i then
39228: LD_VAR 0 2
39232: PUSH
39233: LD_INT 1
39235: ARRAY
39236: PUSH
39237: LD_INT 1
39239: ARRAY
39240: PUSH
39241: LD_VAR 0 8
39245: EQUAL
39246: IFFALSE 39291
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
39248: LD_ADDR_VAR 0 2
39252: PUSH
39253: LD_VAR 0 2
39257: PPUSH
39258: LD_INT 1
39260: PPUSH
39261: LD_VAR 0 2
39265: PUSH
39266: LD_INT 1
39268: ARRAY
39269: PPUSH
39270: LD_INT 1
39272: PPUSH
39273: CALL_OW 3
39277: PPUSH
39278: CALL_OW 1
39282: ST_TO_ADDR
// tmp := 1 ;
39283: LD_ADDR_VAR 0 3
39287: PUSH
39288: LD_STRING 1
39290: ST_TO_ADDR
// end ; normal := normal & tmp ;
39291: LD_ADDR_VAR 0 5
39295: PUSH
39296: LD_VAR 0 5
39300: PUSH
39301: LD_VAR 0 3
39305: STR
39306: ST_TO_ADDR
// end ;
39307: GO 39207
39309: POP
39310: POP
// for i = 1 to hardcoreCounter do
39311: LD_ADDR_VAR 0 8
39315: PUSH
39316: DOUBLE
39317: LD_INT 1
39319: DEC
39320: ST_TO_ADDR
39321: LD_EXP 89
39325: PUSH
39326: FOR_TO
39327: IFFALSE 39432
// begin tmp := 0 ;
39329: LD_ADDR_VAR 0 3
39333: PUSH
39334: LD_STRING 0
39336: ST_TO_ADDR
// if result [ 2 ] then
39337: LD_VAR 0 2
39341: PUSH
39342: LD_INT 2
39344: ARRAY
39345: IFFALSE 39414
// if result [ 2 ] [ 1 ] = 100 + i then
39347: LD_VAR 0 2
39351: PUSH
39352: LD_INT 2
39354: ARRAY
39355: PUSH
39356: LD_INT 1
39358: ARRAY
39359: PUSH
39360: LD_INT 100
39362: PUSH
39363: LD_VAR 0 8
39367: PLUS
39368: EQUAL
39369: IFFALSE 39414
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
39371: LD_ADDR_VAR 0 2
39375: PUSH
39376: LD_VAR 0 2
39380: PPUSH
39381: LD_INT 2
39383: PPUSH
39384: LD_VAR 0 2
39388: PUSH
39389: LD_INT 2
39391: ARRAY
39392: PPUSH
39393: LD_INT 1
39395: PPUSH
39396: CALL_OW 3
39400: PPUSH
39401: CALL_OW 1
39405: ST_TO_ADDR
// tmp := 1 ;
39406: LD_ADDR_VAR 0 3
39410: PUSH
39411: LD_STRING 1
39413: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
39414: LD_ADDR_VAR 0 6
39418: PUSH
39419: LD_VAR 0 6
39423: PUSH
39424: LD_VAR 0 3
39428: STR
39429: ST_TO_ADDR
// end ;
39430: GO 39326
39432: POP
39433: POP
// if isGameLoad then
39434: LD_VAR 0 1
39438: IFFALSE 39913
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
39440: LD_ADDR_VAR 0 4
39444: PUSH
39445: LD_EXP 92
39449: PUSH
39450: LD_EXP 91
39454: PUSH
39455: LD_EXP 93
39459: PUSH
39460: LD_EXP 90
39464: PUSH
39465: LD_EXP 94
39469: PUSH
39470: LD_EXP 95
39474: PUSH
39475: LD_EXP 96
39479: PUSH
39480: LD_EXP 97
39484: PUSH
39485: LD_EXP 98
39489: PUSH
39490: LD_EXP 99
39494: PUSH
39495: LD_EXP 100
39499: PUSH
39500: LD_EXP 101
39504: PUSH
39505: LD_EXP 102
39509: PUSH
39510: LD_EXP 103
39514: PUSH
39515: LD_EXP 111
39519: PUSH
39520: LD_EXP 112
39524: PUSH
39525: LD_EXP 113
39529: PUSH
39530: LD_EXP 114
39534: PUSH
39535: LD_EXP 116
39539: PUSH
39540: LD_EXP 117
39544: PUSH
39545: LD_EXP 118
39549: PUSH
39550: LD_EXP 121
39554: PUSH
39555: LD_EXP 123
39559: PUSH
39560: LD_EXP 124
39564: PUSH
39565: LD_EXP 125
39569: PUSH
39570: LD_EXP 127
39574: PUSH
39575: LD_EXP 128
39579: PUSH
39580: LD_EXP 131
39584: PUSH
39585: LD_EXP 132
39589: PUSH
39590: LD_EXP 133
39594: PUSH
39595: LD_EXP 134
39599: PUSH
39600: LD_EXP 135
39604: PUSH
39605: LD_EXP 136
39609: PUSH
39610: LD_EXP 137
39614: PUSH
39615: LD_EXP 138
39619: PUSH
39620: LD_EXP 139
39624: PUSH
39625: LD_EXP 104
39629: PUSH
39630: LD_EXP 105
39634: PUSH
39635: LD_EXP 108
39639: PUSH
39640: LD_EXP 109
39644: PUSH
39645: LD_EXP 110
39649: PUSH
39650: LD_EXP 106
39654: PUSH
39655: LD_EXP 107
39659: PUSH
39660: LD_EXP 115
39664: PUSH
39665: LD_EXP 119
39669: PUSH
39670: LD_EXP 120
39674: PUSH
39675: LD_EXP 122
39679: PUSH
39680: LD_EXP 126
39684: PUSH
39685: LD_EXP 129
39689: PUSH
39690: LD_EXP 130
39694: PUSH
39695: LD_EXP 140
39699: PUSH
39700: LD_EXP 141
39704: PUSH
39705: LD_EXP 142
39709: PUSH
39710: LD_EXP 143
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: LIST
39719: LIST
39720: LIST
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: ST_TO_ADDR
// tmp :=  ;
39771: LD_ADDR_VAR 0 3
39775: PUSH
39776: LD_STRING 
39778: ST_TO_ADDR
// for i = 1 to normalCounter do
39779: LD_ADDR_VAR 0 8
39783: PUSH
39784: DOUBLE
39785: LD_INT 1
39787: DEC
39788: ST_TO_ADDR
39789: LD_EXP 88
39793: PUSH
39794: FOR_TO
39795: IFFALSE 39831
// begin if flags [ i ] then
39797: LD_VAR 0 4
39801: PUSH
39802: LD_VAR 0 8
39806: ARRAY
39807: IFFALSE 39829
// tmp := tmp & i & ; ;
39809: LD_ADDR_VAR 0 3
39813: PUSH
39814: LD_VAR 0 3
39818: PUSH
39819: LD_VAR 0 8
39823: STR
39824: PUSH
39825: LD_STRING ;
39827: STR
39828: ST_TO_ADDR
// end ;
39829: GO 39794
39831: POP
39832: POP
// for i = 1 to hardcoreCounter do
39833: LD_ADDR_VAR 0 8
39837: PUSH
39838: DOUBLE
39839: LD_INT 1
39841: DEC
39842: ST_TO_ADDR
39843: LD_EXP 89
39847: PUSH
39848: FOR_TO
39849: IFFALSE 39895
// begin if flags [ normalCounter + i ] then
39851: LD_VAR 0 4
39855: PUSH
39856: LD_EXP 88
39860: PUSH
39861: LD_VAR 0 8
39865: PLUS
39866: ARRAY
39867: IFFALSE 39893
// tmp := tmp & ( 100 + i ) & ; ;
39869: LD_ADDR_VAR 0 3
39873: PUSH
39874: LD_VAR 0 3
39878: PUSH
39879: LD_INT 100
39881: PUSH
39882: LD_VAR 0 8
39886: PLUS
39887: STR
39888: PUSH
39889: LD_STRING ;
39891: STR
39892: ST_TO_ADDR
// end ;
39893: GO 39848
39895: POP
39896: POP
// if tmp then
39897: LD_VAR 0 3
39901: IFFALSE 39913
// active := tmp ;
39903: LD_ADDR_VAR 0 7
39907: PUSH
39908: LD_VAR 0 3
39912: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
39913: LD_STRING getStreamItemsFromMission("
39915: PUSH
39916: LD_VAR 0 5
39920: STR
39921: PUSH
39922: LD_STRING ","
39924: STR
39925: PUSH
39926: LD_VAR 0 6
39930: STR
39931: PUSH
39932: LD_STRING ","
39934: STR
39935: PUSH
39936: LD_VAR 0 7
39940: STR
39941: PUSH
39942: LD_STRING ")
39944: STR
39945: PPUSH
39946: CALL_OW 559
// end else
39950: GO 39959
// ToLua ( getStreamItemsFromMission("","","") ) ;
39952: LD_STRING getStreamItemsFromMission("","","")
39954: PPUSH
39955: CALL_OW 559
// end ;
39959: LD_VAR 0 2
39963: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
39964: LD_EXP 87
39968: PUSH
39969: LD_EXP 92
39973: AND
39974: IFFALSE 40098
39976: GO 39978
39978: DISABLE
39979: LD_INT 0
39981: PPUSH
39982: PPUSH
// begin enable ;
39983: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
39984: LD_ADDR_VAR 0 2
39988: PUSH
39989: LD_INT 22
39991: PUSH
39992: LD_OWVAR 2
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 2
40003: PUSH
40004: LD_INT 34
40006: PUSH
40007: LD_INT 7
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 34
40016: PUSH
40017: LD_INT 45
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 34
40026: PUSH
40027: LD_INT 28
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: PUSH
40034: LD_INT 34
40036: PUSH
40037: LD_INT 47
40039: PUSH
40040: EMPTY
40041: LIST
40042: LIST
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PPUSH
40055: CALL_OW 69
40059: ST_TO_ADDR
// if not tmp then
40060: LD_VAR 0 2
40064: NOT
40065: IFFALSE 40069
// exit ;
40067: GO 40098
// for i in tmp do
40069: LD_ADDR_VAR 0 1
40073: PUSH
40074: LD_VAR 0 2
40078: PUSH
40079: FOR_IN
40080: IFFALSE 40096
// begin SetLives ( i , 0 ) ;
40082: LD_VAR 0 1
40086: PPUSH
40087: LD_INT 0
40089: PPUSH
40090: CALL_OW 234
// end ;
40094: GO 40079
40096: POP
40097: POP
// end ;
40098: PPOPN 2
40100: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
40101: LD_EXP 87
40105: PUSH
40106: LD_EXP 93
40110: AND
40111: IFFALSE 40195
40113: GO 40115
40115: DISABLE
40116: LD_INT 0
40118: PPUSH
40119: PPUSH
// begin enable ;
40120: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
40121: LD_ADDR_VAR 0 2
40125: PUSH
40126: LD_INT 22
40128: PUSH
40129: LD_OWVAR 2
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 32
40140: PUSH
40141: LD_INT 3
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PPUSH
40152: CALL_OW 69
40156: ST_TO_ADDR
// if not tmp then
40157: LD_VAR 0 2
40161: NOT
40162: IFFALSE 40166
// exit ;
40164: GO 40195
// for i in tmp do
40166: LD_ADDR_VAR 0 1
40170: PUSH
40171: LD_VAR 0 2
40175: PUSH
40176: FOR_IN
40177: IFFALSE 40193
// begin SetLives ( i , 0 ) ;
40179: LD_VAR 0 1
40183: PPUSH
40184: LD_INT 0
40186: PPUSH
40187: CALL_OW 234
// end ;
40191: GO 40176
40193: POP
40194: POP
// end ;
40195: PPOPN 2
40197: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
40198: LD_EXP 87
40202: PUSH
40203: LD_EXP 90
40207: AND
40208: IFFALSE 40301
40210: GO 40212
40212: DISABLE
40213: LD_INT 0
40215: PPUSH
// begin enable ;
40216: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
40217: LD_ADDR_VAR 0 1
40221: PUSH
40222: LD_INT 22
40224: PUSH
40225: LD_OWVAR 2
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 2
40236: PUSH
40237: LD_INT 25
40239: PUSH
40240: LD_INT 5
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 25
40249: PUSH
40250: LD_INT 9
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 25
40259: PUSH
40260: LD_INT 8
40262: PUSH
40263: EMPTY
40264: LIST
40265: LIST
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: PUSH
40273: EMPTY
40274: LIST
40275: LIST
40276: PPUSH
40277: CALL_OW 69
40281: PUSH
40282: FOR_IN
40283: IFFALSE 40299
// begin SetClass ( i , 1 ) ;
40285: LD_VAR 0 1
40289: PPUSH
40290: LD_INT 1
40292: PPUSH
40293: CALL_OW 336
// end ;
40297: GO 40282
40299: POP
40300: POP
// end ;
40301: PPOPN 1
40303: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
40304: LD_EXP 87
40308: PUSH
40309: LD_EXP 91
40313: AND
40314: PUSH
40315: LD_OWVAR 65
40319: PUSH
40320: LD_INT 7
40322: LESS
40323: AND
40324: IFFALSE 40338
40326: GO 40328
40328: DISABLE
// begin enable ;
40329: ENABLE
// game_speed := 7 ;
40330: LD_ADDR_OWVAR 65
40334: PUSH
40335: LD_INT 7
40337: ST_TO_ADDR
// end ;
40338: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
40339: LD_EXP 87
40343: PUSH
40344: LD_EXP 94
40348: AND
40349: IFFALSE 40551
40351: GO 40353
40353: DISABLE
40354: LD_INT 0
40356: PPUSH
40357: PPUSH
40358: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
40359: LD_ADDR_VAR 0 3
40363: PUSH
40364: LD_INT 81
40366: PUSH
40367: LD_OWVAR 2
40371: PUSH
40372: EMPTY
40373: LIST
40374: LIST
40375: PUSH
40376: LD_INT 21
40378: PUSH
40379: LD_INT 1
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PPUSH
40390: CALL_OW 69
40394: ST_TO_ADDR
// if not tmp then
40395: LD_VAR 0 3
40399: NOT
40400: IFFALSE 40404
// exit ;
40402: GO 40551
// if tmp > 5 then
40404: LD_VAR 0 3
40408: PUSH
40409: LD_INT 5
40411: GREATER
40412: IFFALSE 40424
// k := 5 else
40414: LD_ADDR_VAR 0 2
40418: PUSH
40419: LD_INT 5
40421: ST_TO_ADDR
40422: GO 40434
// k := tmp ;
40424: LD_ADDR_VAR 0 2
40428: PUSH
40429: LD_VAR 0 3
40433: ST_TO_ADDR
// for i := 1 to k do
40434: LD_ADDR_VAR 0 1
40438: PUSH
40439: DOUBLE
40440: LD_INT 1
40442: DEC
40443: ST_TO_ADDR
40444: LD_VAR 0 2
40448: PUSH
40449: FOR_TO
40450: IFFALSE 40549
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
40452: LD_VAR 0 3
40456: PUSH
40457: LD_VAR 0 1
40461: ARRAY
40462: PPUSH
40463: LD_VAR 0 1
40467: PUSH
40468: LD_INT 4
40470: MOD
40471: PUSH
40472: LD_INT 1
40474: PLUS
40475: PPUSH
40476: CALL_OW 259
40480: PUSH
40481: LD_INT 10
40483: LESS
40484: IFFALSE 40547
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
40486: LD_VAR 0 3
40490: PUSH
40491: LD_VAR 0 1
40495: ARRAY
40496: PPUSH
40497: LD_VAR 0 1
40501: PUSH
40502: LD_INT 4
40504: MOD
40505: PUSH
40506: LD_INT 1
40508: PLUS
40509: PPUSH
40510: LD_VAR 0 3
40514: PUSH
40515: LD_VAR 0 1
40519: ARRAY
40520: PPUSH
40521: LD_VAR 0 1
40525: PUSH
40526: LD_INT 4
40528: MOD
40529: PUSH
40530: LD_INT 1
40532: PLUS
40533: PPUSH
40534: CALL_OW 259
40538: PUSH
40539: LD_INT 1
40541: PLUS
40542: PPUSH
40543: CALL_OW 237
40547: GO 40449
40549: POP
40550: POP
// end ;
40551: PPOPN 3
40553: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
40554: LD_EXP 87
40558: PUSH
40559: LD_EXP 95
40563: AND
40564: IFFALSE 40584
40566: GO 40568
40568: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
40569: LD_INT 4
40571: PPUSH
40572: LD_OWVAR 2
40576: PPUSH
40577: LD_INT 0
40579: PPUSH
40580: CALL_OW 324
40584: END
// every 0 0$1 trigger StreamModeActive and sShovel do
40585: LD_EXP 87
40589: PUSH
40590: LD_EXP 124
40594: AND
40595: IFFALSE 40615
40597: GO 40599
40599: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
40600: LD_INT 19
40602: PPUSH
40603: LD_OWVAR 2
40607: PPUSH
40608: LD_INT 0
40610: PPUSH
40611: CALL_OW 324
40615: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
40616: LD_EXP 87
40620: PUSH
40621: LD_EXP 96
40625: AND
40626: IFFALSE 40728
40628: GO 40630
40630: DISABLE
40631: LD_INT 0
40633: PPUSH
40634: PPUSH
// begin enable ;
40635: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
40636: LD_ADDR_VAR 0 2
40640: PUSH
40641: LD_INT 22
40643: PUSH
40644: LD_OWVAR 2
40648: PUSH
40649: EMPTY
40650: LIST
40651: LIST
40652: PUSH
40653: LD_INT 2
40655: PUSH
40656: LD_INT 34
40658: PUSH
40659: LD_INT 11
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 34
40668: PUSH
40669: LD_INT 30
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: LIST
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PPUSH
40685: CALL_OW 69
40689: ST_TO_ADDR
// if not tmp then
40690: LD_VAR 0 2
40694: NOT
40695: IFFALSE 40699
// exit ;
40697: GO 40728
// for i in tmp do
40699: LD_ADDR_VAR 0 1
40703: PUSH
40704: LD_VAR 0 2
40708: PUSH
40709: FOR_IN
40710: IFFALSE 40726
// begin SetLives ( i , 0 ) ;
40712: LD_VAR 0 1
40716: PPUSH
40717: LD_INT 0
40719: PPUSH
40720: CALL_OW 234
// end ;
40724: GO 40709
40726: POP
40727: POP
// end ;
40728: PPOPN 2
40730: END
// every 0 0$1 trigger StreamModeActive and sBunker do
40731: LD_EXP 87
40735: PUSH
40736: LD_EXP 97
40740: AND
40741: IFFALSE 40761
40743: GO 40745
40745: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
40746: LD_INT 32
40748: PPUSH
40749: LD_OWVAR 2
40753: PPUSH
40754: LD_INT 0
40756: PPUSH
40757: CALL_OW 324
40761: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
40762: LD_EXP 87
40766: PUSH
40767: LD_EXP 98
40771: AND
40772: IFFALSE 40953
40774: GO 40776
40776: DISABLE
40777: LD_INT 0
40779: PPUSH
40780: PPUSH
40781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
40782: LD_ADDR_VAR 0 2
40786: PUSH
40787: LD_INT 22
40789: PUSH
40790: LD_OWVAR 2
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 33
40801: PUSH
40802: LD_INT 3
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PPUSH
40813: CALL_OW 69
40817: ST_TO_ADDR
// if not tmp then
40818: LD_VAR 0 2
40822: NOT
40823: IFFALSE 40827
// exit ;
40825: GO 40953
// side := 0 ;
40827: LD_ADDR_VAR 0 3
40831: PUSH
40832: LD_INT 0
40834: ST_TO_ADDR
// for i := 1 to 8 do
40835: LD_ADDR_VAR 0 1
40839: PUSH
40840: DOUBLE
40841: LD_INT 1
40843: DEC
40844: ST_TO_ADDR
40845: LD_INT 8
40847: PUSH
40848: FOR_TO
40849: IFFALSE 40897
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
40851: LD_OWVAR 2
40855: PUSH
40856: LD_VAR 0 1
40860: NONEQUAL
40861: PUSH
40862: LD_OWVAR 2
40866: PPUSH
40867: LD_VAR 0 1
40871: PPUSH
40872: CALL_OW 81
40876: PUSH
40877: LD_INT 2
40879: EQUAL
40880: AND
40881: IFFALSE 40895
// begin side := i ;
40883: LD_ADDR_VAR 0 3
40887: PUSH
40888: LD_VAR 0 1
40892: ST_TO_ADDR
// break ;
40893: GO 40897
// end ;
40895: GO 40848
40897: POP
40898: POP
// if not side then
40899: LD_VAR 0 3
40903: NOT
40904: IFFALSE 40908
// exit ;
40906: GO 40953
// for i := 1 to tmp do
40908: LD_ADDR_VAR 0 1
40912: PUSH
40913: DOUBLE
40914: LD_INT 1
40916: DEC
40917: ST_TO_ADDR
40918: LD_VAR 0 2
40922: PUSH
40923: FOR_TO
40924: IFFALSE 40951
// if Prob ( 60 ) then
40926: LD_INT 60
40928: PPUSH
40929: CALL_OW 13
40933: IFFALSE 40949
// SetSide ( i , side ) ;
40935: LD_VAR 0 1
40939: PPUSH
40940: LD_VAR 0 3
40944: PPUSH
40945: CALL_OW 235
40949: GO 40923
40951: POP
40952: POP
// end ;
40953: PPOPN 3
40955: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
40956: LD_EXP 87
40960: PUSH
40961: LD_EXP 100
40965: AND
40966: IFFALSE 41085
40968: GO 40970
40970: DISABLE
40971: LD_INT 0
40973: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
40974: LD_ADDR_VAR 0 1
40978: PUSH
40979: LD_INT 22
40981: PUSH
40982: LD_OWVAR 2
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 21
40993: PUSH
40994: LD_INT 1
40996: PUSH
40997: EMPTY
40998: LIST
40999: LIST
41000: PUSH
41001: LD_INT 3
41003: PUSH
41004: LD_INT 23
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: LIST
41022: PPUSH
41023: CALL_OW 69
41027: PUSH
41028: FOR_IN
41029: IFFALSE 41083
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
41031: LD_VAR 0 1
41035: PPUSH
41036: CALL_OW 257
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: LD_INT 3
41049: PUSH
41050: LD_INT 4
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: IN
41059: IFFALSE 41081
// SetClass ( un , rand ( 1 , 4 ) ) ;
41061: LD_VAR 0 1
41065: PPUSH
41066: LD_INT 1
41068: PPUSH
41069: LD_INT 4
41071: PPUSH
41072: CALL_OW 12
41076: PPUSH
41077: CALL_OW 336
41081: GO 41028
41083: POP
41084: POP
// end ;
41085: PPOPN 1
41087: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
41088: LD_EXP 87
41092: PUSH
41093: LD_EXP 99
41097: AND
41098: IFFALSE 41177
41100: GO 41102
41102: DISABLE
41103: LD_INT 0
41105: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41106: LD_ADDR_VAR 0 1
41110: PUSH
41111: LD_INT 22
41113: PUSH
41114: LD_OWVAR 2
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 21
41125: PUSH
41126: LD_INT 3
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PPUSH
41137: CALL_OW 69
41141: ST_TO_ADDR
// if not tmp then
41142: LD_VAR 0 1
41146: NOT
41147: IFFALSE 41151
// exit ;
41149: GO 41177
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
41151: LD_VAR 0 1
41155: PUSH
41156: LD_INT 1
41158: PPUSH
41159: LD_VAR 0 1
41163: PPUSH
41164: CALL_OW 12
41168: ARRAY
41169: PPUSH
41170: LD_INT 100
41172: PPUSH
41173: CALL_OW 234
// end ;
41177: PPOPN 1
41179: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
41180: LD_EXP 87
41184: PUSH
41185: LD_EXP 101
41189: AND
41190: IFFALSE 41288
41192: GO 41194
41194: DISABLE
41195: LD_INT 0
41197: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
41198: LD_ADDR_VAR 0 1
41202: PUSH
41203: LD_INT 22
41205: PUSH
41206: LD_OWVAR 2
41210: PUSH
41211: EMPTY
41212: LIST
41213: LIST
41214: PUSH
41215: LD_INT 21
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PPUSH
41229: CALL_OW 69
41233: ST_TO_ADDR
// if not tmp then
41234: LD_VAR 0 1
41238: NOT
41239: IFFALSE 41243
// exit ;
41241: GO 41288
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
41243: LD_VAR 0 1
41247: PUSH
41248: LD_INT 1
41250: PPUSH
41251: LD_VAR 0 1
41255: PPUSH
41256: CALL_OW 12
41260: ARRAY
41261: PPUSH
41262: LD_INT 1
41264: PPUSH
41265: LD_INT 4
41267: PPUSH
41268: CALL_OW 12
41272: PPUSH
41273: LD_INT 3000
41275: PPUSH
41276: LD_INT 9000
41278: PPUSH
41279: CALL_OW 12
41283: PPUSH
41284: CALL_OW 492
// end ;
41288: PPOPN 1
41290: END
// every 0 0$1 trigger StreamModeActive and sDepot do
41291: LD_EXP 87
41295: PUSH
41296: LD_EXP 102
41300: AND
41301: IFFALSE 41321
41303: GO 41305
41305: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
41306: LD_INT 1
41308: PPUSH
41309: LD_OWVAR 2
41313: PPUSH
41314: LD_INT 0
41316: PPUSH
41317: CALL_OW 324
41321: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
41322: LD_EXP 87
41326: PUSH
41327: LD_EXP 103
41331: AND
41332: IFFALSE 41415
41334: GO 41336
41336: DISABLE
41337: LD_INT 0
41339: PPUSH
41340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41341: LD_ADDR_VAR 0 2
41345: PUSH
41346: LD_INT 22
41348: PUSH
41349: LD_OWVAR 2
41353: PUSH
41354: EMPTY
41355: LIST
41356: LIST
41357: PUSH
41358: LD_INT 21
41360: PUSH
41361: LD_INT 3
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PPUSH
41372: CALL_OW 69
41376: ST_TO_ADDR
// if not tmp then
41377: LD_VAR 0 2
41381: NOT
41382: IFFALSE 41386
// exit ;
41384: GO 41415
// for i in tmp do
41386: LD_ADDR_VAR 0 1
41390: PUSH
41391: LD_VAR 0 2
41395: PUSH
41396: FOR_IN
41397: IFFALSE 41413
// SetBLevel ( i , 10 ) ;
41399: LD_VAR 0 1
41403: PPUSH
41404: LD_INT 10
41406: PPUSH
41407: CALL_OW 241
41411: GO 41396
41413: POP
41414: POP
// end ;
41415: PPOPN 2
41417: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
41418: LD_EXP 87
41422: PUSH
41423: LD_EXP 104
41427: AND
41428: IFFALSE 41539
41430: GO 41432
41432: DISABLE
41433: LD_INT 0
41435: PPUSH
41436: PPUSH
41437: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41438: LD_ADDR_VAR 0 3
41442: PUSH
41443: LD_INT 22
41445: PUSH
41446: LD_OWVAR 2
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 25
41457: PUSH
41458: LD_INT 1
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: EMPTY
41466: LIST
41467: LIST
41468: PPUSH
41469: CALL_OW 69
41473: ST_TO_ADDR
// if not tmp then
41474: LD_VAR 0 3
41478: NOT
41479: IFFALSE 41483
// exit ;
41481: GO 41539
// un := tmp [ rand ( 1 , tmp ) ] ;
41483: LD_ADDR_VAR 0 2
41487: PUSH
41488: LD_VAR 0 3
41492: PUSH
41493: LD_INT 1
41495: PPUSH
41496: LD_VAR 0 3
41500: PPUSH
41501: CALL_OW 12
41505: ARRAY
41506: ST_TO_ADDR
// if Crawls ( un ) then
41507: LD_VAR 0 2
41511: PPUSH
41512: CALL_OW 318
41516: IFFALSE 41527
// ComWalk ( un ) ;
41518: LD_VAR 0 2
41522: PPUSH
41523: CALL_OW 138
// SetClass ( un , class_sniper ) ;
41527: LD_VAR 0 2
41531: PPUSH
41532: LD_INT 5
41534: PPUSH
41535: CALL_OW 336
// end ;
41539: PPOPN 3
41541: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
41542: LD_EXP 87
41546: PUSH
41547: LD_EXP 105
41551: AND
41552: PUSH
41553: LD_OWVAR 67
41557: PUSH
41558: LD_INT 4
41560: LESS
41561: AND
41562: IFFALSE 41581
41564: GO 41566
41566: DISABLE
// begin Difficulty := Difficulty + 1 ;
41567: LD_ADDR_OWVAR 67
41571: PUSH
41572: LD_OWVAR 67
41576: PUSH
41577: LD_INT 1
41579: PLUS
41580: ST_TO_ADDR
// end ;
41581: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
41582: LD_EXP 87
41586: PUSH
41587: LD_EXP 106
41591: AND
41592: IFFALSE 41695
41594: GO 41596
41596: DISABLE
41597: LD_INT 0
41599: PPUSH
// begin for i := 1 to 5 do
41600: LD_ADDR_VAR 0 1
41604: PUSH
41605: DOUBLE
41606: LD_INT 1
41608: DEC
41609: ST_TO_ADDR
41610: LD_INT 5
41612: PUSH
41613: FOR_TO
41614: IFFALSE 41693
// begin uc_nation := nation_nature ;
41616: LD_ADDR_OWVAR 21
41620: PUSH
41621: LD_INT 0
41623: ST_TO_ADDR
// uc_side := 0 ;
41624: LD_ADDR_OWVAR 20
41628: PUSH
41629: LD_INT 0
41631: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
41632: LD_ADDR_OWVAR 29
41636: PUSH
41637: LD_INT 12
41639: PUSH
41640: LD_INT 12
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: ST_TO_ADDR
// hc_agressivity := 20 ;
41647: LD_ADDR_OWVAR 35
41651: PUSH
41652: LD_INT 20
41654: ST_TO_ADDR
// hc_class := class_tiger ;
41655: LD_ADDR_OWVAR 28
41659: PUSH
41660: LD_INT 14
41662: ST_TO_ADDR
// hc_gallery :=  ;
41663: LD_ADDR_OWVAR 33
41667: PUSH
41668: LD_STRING 
41670: ST_TO_ADDR
// hc_name :=  ;
41671: LD_ADDR_OWVAR 26
41675: PUSH
41676: LD_STRING 
41678: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
41679: CALL_OW 44
41683: PPUSH
41684: LD_INT 0
41686: PPUSH
41687: CALL_OW 51
// end ;
41691: GO 41613
41693: POP
41694: POP
// end ;
41695: PPOPN 1
41697: END
// every 0 0$1 trigger StreamModeActive and sBomb do
41698: LD_EXP 87
41702: PUSH
41703: LD_EXP 107
41707: AND
41708: IFFALSE 41717
41710: GO 41712
41712: DISABLE
// StreamSibBomb ;
41713: CALL 41718 0 0
41717: END
// export function StreamSibBomb ; var i , x , y ; begin
41718: LD_INT 0
41720: PPUSH
41721: PPUSH
41722: PPUSH
41723: PPUSH
// result := false ;
41724: LD_ADDR_VAR 0 1
41728: PUSH
41729: LD_INT 0
41731: ST_TO_ADDR
// for i := 1 to 16 do
41732: LD_ADDR_VAR 0 2
41736: PUSH
41737: DOUBLE
41738: LD_INT 1
41740: DEC
41741: ST_TO_ADDR
41742: LD_INT 16
41744: PUSH
41745: FOR_TO
41746: IFFALSE 41945
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
41748: LD_ADDR_VAR 0 3
41752: PUSH
41753: LD_INT 10
41755: PUSH
41756: LD_INT 20
41758: PUSH
41759: LD_INT 30
41761: PUSH
41762: LD_INT 40
41764: PUSH
41765: LD_INT 50
41767: PUSH
41768: LD_INT 60
41770: PUSH
41771: LD_INT 70
41773: PUSH
41774: LD_INT 80
41776: PUSH
41777: LD_INT 90
41779: PUSH
41780: LD_INT 100
41782: PUSH
41783: LD_INT 110
41785: PUSH
41786: LD_INT 120
41788: PUSH
41789: LD_INT 130
41791: PUSH
41792: LD_INT 140
41794: PUSH
41795: LD_INT 150
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 1
41817: PPUSH
41818: LD_INT 15
41820: PPUSH
41821: CALL_OW 12
41825: ARRAY
41826: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
41827: LD_ADDR_VAR 0 4
41831: PUSH
41832: LD_INT 10
41834: PUSH
41835: LD_INT 20
41837: PUSH
41838: LD_INT 30
41840: PUSH
41841: LD_INT 40
41843: PUSH
41844: LD_INT 50
41846: PUSH
41847: LD_INT 60
41849: PUSH
41850: LD_INT 70
41852: PUSH
41853: LD_INT 80
41855: PUSH
41856: LD_INT 90
41858: PUSH
41859: LD_INT 100
41861: PUSH
41862: LD_INT 110
41864: PUSH
41865: LD_INT 120
41867: PUSH
41868: LD_INT 130
41870: PUSH
41871: LD_INT 140
41873: PUSH
41874: LD_INT 150
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: LIST
41890: LIST
41891: LIST
41892: LIST
41893: PUSH
41894: LD_INT 1
41896: PPUSH
41897: LD_INT 15
41899: PPUSH
41900: CALL_OW 12
41904: ARRAY
41905: ST_TO_ADDR
// if ValidHex ( x , y ) then
41906: LD_VAR 0 3
41910: PPUSH
41911: LD_VAR 0 4
41915: PPUSH
41916: CALL_OW 488
41920: IFFALSE 41943
// begin result := [ x , y ] ;
41922: LD_ADDR_VAR 0 1
41926: PUSH
41927: LD_VAR 0 3
41931: PUSH
41932: LD_VAR 0 4
41936: PUSH
41937: EMPTY
41938: LIST
41939: LIST
41940: ST_TO_ADDR
// break ;
41941: GO 41945
// end ; end ;
41943: GO 41745
41945: POP
41946: POP
// if result then
41947: LD_VAR 0 1
41951: IFFALSE 42011
// begin ToLua ( playSibBomb() ) ;
41953: LD_STRING playSibBomb()
41955: PPUSH
41956: CALL_OW 559
// wait ( 0 0$14 ) ;
41960: LD_INT 490
41962: PPUSH
41963: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
41967: LD_VAR 0 1
41971: PUSH
41972: LD_INT 1
41974: ARRAY
41975: PPUSH
41976: LD_VAR 0 1
41980: PUSH
41981: LD_INT 2
41983: ARRAY
41984: PPUSH
41985: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
41989: LD_VAR 0 1
41993: PUSH
41994: LD_INT 1
41996: ARRAY
41997: PPUSH
41998: LD_VAR 0 1
42002: PUSH
42003: LD_INT 2
42005: ARRAY
42006: PPUSH
42007: CALL_OW 429
// end ; end ;
42011: LD_VAR 0 1
42015: RET
// every 0 0$1 trigger StreamModeActive and sReset do
42016: LD_EXP 87
42020: PUSH
42021: LD_EXP 109
42025: AND
42026: IFFALSE 42038
42028: GO 42030
42030: DISABLE
// YouLost (  ) ;
42031: LD_STRING 
42033: PPUSH
42034: CALL_OW 104
42038: END
// every 0 0$1 trigger StreamModeActive and sFog do
42039: LD_EXP 87
42043: PUSH
42044: LD_EXP 108
42048: AND
42049: IFFALSE 42063
42051: GO 42053
42053: DISABLE
// FogOff ( your_side ) ;
42054: LD_OWVAR 2
42058: PPUSH
42059: CALL_OW 344
42063: END
// every 0 0$1 trigger StreamModeActive and sSun do
42064: LD_EXP 87
42068: PUSH
42069: LD_EXP 110
42073: AND
42074: IFFALSE 42102
42076: GO 42078
42078: DISABLE
// begin solar_recharge_percent := 0 ;
42079: LD_ADDR_OWVAR 79
42083: PUSH
42084: LD_INT 0
42086: ST_TO_ADDR
// wait ( 5 5$00 ) ;
42087: LD_INT 10500
42089: PPUSH
42090: CALL_OW 67
// solar_recharge_percent := 100 ;
42094: LD_ADDR_OWVAR 79
42098: PUSH
42099: LD_INT 100
42101: ST_TO_ADDR
// end ;
42102: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
42103: LD_EXP 87
42107: PUSH
42108: LD_EXP 111
42112: AND
42113: IFFALSE 42352
42115: GO 42117
42117: DISABLE
42118: LD_INT 0
42120: PPUSH
42121: PPUSH
42122: PPUSH
// begin tmp := [ ] ;
42123: LD_ADDR_VAR 0 3
42127: PUSH
42128: EMPTY
42129: ST_TO_ADDR
// for i := 1 to 6 do
42130: LD_ADDR_VAR 0 1
42134: PUSH
42135: DOUBLE
42136: LD_INT 1
42138: DEC
42139: ST_TO_ADDR
42140: LD_INT 6
42142: PUSH
42143: FOR_TO
42144: IFFALSE 42249
// begin uc_nation := nation_nature ;
42146: LD_ADDR_OWVAR 21
42150: PUSH
42151: LD_INT 0
42153: ST_TO_ADDR
// uc_side := 0 ;
42154: LD_ADDR_OWVAR 20
42158: PUSH
42159: LD_INT 0
42161: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
42162: LD_ADDR_OWVAR 29
42166: PUSH
42167: LD_INT 12
42169: PUSH
42170: LD_INT 12
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: ST_TO_ADDR
// hc_agressivity := 20 ;
42177: LD_ADDR_OWVAR 35
42181: PUSH
42182: LD_INT 20
42184: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
42185: LD_ADDR_OWVAR 28
42189: PUSH
42190: LD_INT 17
42192: ST_TO_ADDR
// hc_gallery :=  ;
42193: LD_ADDR_OWVAR 33
42197: PUSH
42198: LD_STRING 
42200: ST_TO_ADDR
// hc_name :=  ;
42201: LD_ADDR_OWVAR 26
42205: PUSH
42206: LD_STRING 
42208: ST_TO_ADDR
// un := CreateHuman ;
42209: LD_ADDR_VAR 0 2
42213: PUSH
42214: CALL_OW 44
42218: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
42219: LD_VAR 0 2
42223: PPUSH
42224: LD_INT 1
42226: PPUSH
42227: CALL_OW 51
// tmp := tmp ^ un ;
42231: LD_ADDR_VAR 0 3
42235: PUSH
42236: LD_VAR 0 3
42240: PUSH
42241: LD_VAR 0 2
42245: ADD
42246: ST_TO_ADDR
// end ;
42247: GO 42143
42249: POP
42250: POP
// repeat wait ( 0 0$1 ) ;
42251: LD_INT 35
42253: PPUSH
42254: CALL_OW 67
// for un in tmp do
42258: LD_ADDR_VAR 0 2
42262: PUSH
42263: LD_VAR 0 3
42267: PUSH
42268: FOR_IN
42269: IFFALSE 42343
// begin if IsDead ( un ) then
42271: LD_VAR 0 2
42275: PPUSH
42276: CALL_OW 301
42280: IFFALSE 42300
// begin tmp := tmp diff un ;
42282: LD_ADDR_VAR 0 3
42286: PUSH
42287: LD_VAR 0 3
42291: PUSH
42292: LD_VAR 0 2
42296: DIFF
42297: ST_TO_ADDR
// continue ;
42298: GO 42268
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
42300: LD_VAR 0 2
42304: PPUSH
42305: LD_INT 3
42307: PUSH
42308: LD_INT 22
42310: PUSH
42311: LD_INT 0
42313: PUSH
42314: EMPTY
42315: LIST
42316: LIST
42317: PUSH
42318: EMPTY
42319: LIST
42320: LIST
42321: PPUSH
42322: CALL_OW 69
42326: PPUSH
42327: LD_VAR 0 2
42331: PPUSH
42332: CALL_OW 74
42336: PPUSH
42337: CALL_OW 115
// end ;
42341: GO 42268
42343: POP
42344: POP
// until not tmp ;
42345: LD_VAR 0 3
42349: NOT
42350: IFFALSE 42251
// end ;
42352: PPOPN 3
42354: END
// every 0 0$1 trigger StreamModeActive and sTroll do
42355: LD_EXP 87
42359: PUSH
42360: LD_EXP 112
42364: AND
42365: IFFALSE 42419
42367: GO 42369
42369: DISABLE
// begin ToLua ( displayTroll(); ) ;
42370: LD_STRING displayTroll();
42372: PPUSH
42373: CALL_OW 559
// wait ( 3 3$00 ) ;
42377: LD_INT 6300
42379: PPUSH
42380: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42384: LD_STRING hideTroll();
42386: PPUSH
42387: CALL_OW 559
// wait ( 1 1$00 ) ;
42391: LD_INT 2100
42393: PPUSH
42394: CALL_OW 67
// ToLua ( displayTroll(); ) ;
42398: LD_STRING displayTroll();
42400: PPUSH
42401: CALL_OW 559
// wait ( 1 1$00 ) ;
42405: LD_INT 2100
42407: PPUSH
42408: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42412: LD_STRING hideTroll();
42414: PPUSH
42415: CALL_OW 559
// end ;
42419: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
42420: LD_EXP 87
42424: PUSH
42425: LD_EXP 113
42429: AND
42430: IFFALSE 42493
42432: GO 42434
42434: DISABLE
42435: LD_INT 0
42437: PPUSH
// begin p := 0 ;
42438: LD_ADDR_VAR 0 1
42442: PUSH
42443: LD_INT 0
42445: ST_TO_ADDR
// repeat game_speed := 1 ;
42446: LD_ADDR_OWVAR 65
42450: PUSH
42451: LD_INT 1
42453: ST_TO_ADDR
// wait ( 0 0$1 ) ;
42454: LD_INT 35
42456: PPUSH
42457: CALL_OW 67
// p := p + 1 ;
42461: LD_ADDR_VAR 0 1
42465: PUSH
42466: LD_VAR 0 1
42470: PUSH
42471: LD_INT 1
42473: PLUS
42474: ST_TO_ADDR
// until p >= 60 ;
42475: LD_VAR 0 1
42479: PUSH
42480: LD_INT 60
42482: GREATEREQUAL
42483: IFFALSE 42446
// game_speed := 4 ;
42485: LD_ADDR_OWVAR 65
42489: PUSH
42490: LD_INT 4
42492: ST_TO_ADDR
// end ;
42493: PPOPN 1
42495: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
42496: LD_EXP 87
42500: PUSH
42501: LD_EXP 114
42505: AND
42506: IFFALSE 42652
42508: GO 42510
42510: DISABLE
42511: LD_INT 0
42513: PPUSH
42514: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42515: LD_ADDR_VAR 0 1
42519: PUSH
42520: LD_INT 22
42522: PUSH
42523: LD_OWVAR 2
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 2
42534: PUSH
42535: LD_INT 30
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 30
42547: PUSH
42548: LD_INT 1
42550: PUSH
42551: EMPTY
42552: LIST
42553: LIST
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: LIST
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PPUSH
42564: CALL_OW 69
42568: ST_TO_ADDR
// if not depot then
42569: LD_VAR 0 1
42573: NOT
42574: IFFALSE 42578
// exit ;
42576: GO 42652
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
42578: LD_ADDR_VAR 0 2
42582: PUSH
42583: LD_VAR 0 1
42587: PUSH
42588: LD_INT 1
42590: PPUSH
42591: LD_VAR 0 1
42595: PPUSH
42596: CALL_OW 12
42600: ARRAY
42601: PPUSH
42602: CALL_OW 274
42606: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
42607: LD_VAR 0 2
42611: PPUSH
42612: LD_INT 1
42614: PPUSH
42615: LD_INT 0
42617: PPUSH
42618: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
42622: LD_VAR 0 2
42626: PPUSH
42627: LD_INT 2
42629: PPUSH
42630: LD_INT 0
42632: PPUSH
42633: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
42637: LD_VAR 0 2
42641: PPUSH
42642: LD_INT 3
42644: PPUSH
42645: LD_INT 0
42647: PPUSH
42648: CALL_OW 277
// end ;
42652: PPOPN 2
42654: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
42655: LD_EXP 87
42659: PUSH
42660: LD_EXP 115
42664: AND
42665: IFFALSE 42762
42667: GO 42669
42669: DISABLE
42670: LD_INT 0
42672: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
42673: LD_ADDR_VAR 0 1
42677: PUSH
42678: LD_INT 22
42680: PUSH
42681: LD_OWVAR 2
42685: PUSH
42686: EMPTY
42687: LIST
42688: LIST
42689: PUSH
42690: LD_INT 21
42692: PUSH
42693: LD_INT 1
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 3
42702: PUSH
42703: LD_INT 23
42705: PUSH
42706: LD_INT 0
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: LIST
42721: PPUSH
42722: CALL_OW 69
42726: ST_TO_ADDR
// if not tmp then
42727: LD_VAR 0 1
42731: NOT
42732: IFFALSE 42736
// exit ;
42734: GO 42762
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
42736: LD_VAR 0 1
42740: PUSH
42741: LD_INT 1
42743: PPUSH
42744: LD_VAR 0 1
42748: PPUSH
42749: CALL_OW 12
42753: ARRAY
42754: PPUSH
42755: LD_INT 200
42757: PPUSH
42758: CALL_OW 234
// end ;
42762: PPOPN 1
42764: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
42765: LD_EXP 87
42769: PUSH
42770: LD_EXP 116
42774: AND
42775: IFFALSE 42854
42777: GO 42779
42779: DISABLE
42780: LD_INT 0
42782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
42783: LD_ADDR_VAR 0 1
42787: PUSH
42788: LD_INT 22
42790: PUSH
42791: LD_OWVAR 2
42795: PUSH
42796: EMPTY
42797: LIST
42798: LIST
42799: PUSH
42800: LD_INT 21
42802: PUSH
42803: LD_INT 2
42805: PUSH
42806: EMPTY
42807: LIST
42808: LIST
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PPUSH
42814: CALL_OW 69
42818: ST_TO_ADDR
// if not tmp then
42819: LD_VAR 0 1
42823: NOT
42824: IFFALSE 42828
// exit ;
42826: GO 42854
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
42828: LD_VAR 0 1
42832: PUSH
42833: LD_INT 1
42835: PPUSH
42836: LD_VAR 0 1
42840: PPUSH
42841: CALL_OW 12
42845: ARRAY
42846: PPUSH
42847: LD_INT 60
42849: PPUSH
42850: CALL_OW 234
// end ;
42854: PPOPN 1
42856: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
42857: LD_EXP 87
42861: PUSH
42862: LD_EXP 117
42866: AND
42867: IFFALSE 42966
42869: GO 42871
42871: DISABLE
42872: LD_INT 0
42874: PPUSH
42875: PPUSH
// begin enable ;
42876: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
42877: LD_ADDR_VAR 0 1
42881: PUSH
42882: LD_INT 22
42884: PUSH
42885: LD_OWVAR 2
42889: PUSH
42890: EMPTY
42891: LIST
42892: LIST
42893: PUSH
42894: LD_INT 61
42896: PUSH
42897: EMPTY
42898: LIST
42899: PUSH
42900: LD_INT 33
42902: PUSH
42903: LD_INT 2
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: LIST
42914: PPUSH
42915: CALL_OW 69
42919: ST_TO_ADDR
// if not tmp then
42920: LD_VAR 0 1
42924: NOT
42925: IFFALSE 42929
// exit ;
42927: GO 42966
// for i in tmp do
42929: LD_ADDR_VAR 0 2
42933: PUSH
42934: LD_VAR 0 1
42938: PUSH
42939: FOR_IN
42940: IFFALSE 42964
// if IsControledBy ( i ) then
42942: LD_VAR 0 2
42946: PPUSH
42947: CALL_OW 312
42951: IFFALSE 42962
// ComUnlink ( i ) ;
42953: LD_VAR 0 2
42957: PPUSH
42958: CALL_OW 136
42962: GO 42939
42964: POP
42965: POP
// end ;
42966: PPOPN 2
42968: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
42969: LD_EXP 87
42973: PUSH
42974: LD_EXP 118
42978: AND
42979: IFFALSE 43119
42981: GO 42983
42983: DISABLE
42984: LD_INT 0
42986: PPUSH
42987: PPUSH
// begin ToLua ( displayPowell(); ) ;
42988: LD_STRING displayPowell();
42990: PPUSH
42991: CALL_OW 559
// uc_side := 0 ;
42995: LD_ADDR_OWVAR 20
42999: PUSH
43000: LD_INT 0
43002: ST_TO_ADDR
// uc_nation := 2 ;
43003: LD_ADDR_OWVAR 21
43007: PUSH
43008: LD_INT 2
43010: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
43011: LD_ADDR_OWVAR 37
43015: PUSH
43016: LD_INT 14
43018: ST_TO_ADDR
// vc_engine := engine_siberite ;
43019: LD_ADDR_OWVAR 39
43023: PUSH
43024: LD_INT 3
43026: ST_TO_ADDR
// vc_control := control_apeman ;
43027: LD_ADDR_OWVAR 38
43031: PUSH
43032: LD_INT 5
43034: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
43035: LD_ADDR_OWVAR 40
43039: PUSH
43040: LD_INT 29
43042: ST_TO_ADDR
// un := CreateVehicle ;
43043: LD_ADDR_VAR 0 2
43047: PUSH
43048: CALL_OW 45
43052: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43053: LD_VAR 0 2
43057: PPUSH
43058: LD_INT 1
43060: PPUSH
43061: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43065: LD_INT 35
43067: PPUSH
43068: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43072: LD_VAR 0 2
43076: PPUSH
43077: LD_INT 22
43079: PUSH
43080: LD_OWVAR 2
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PPUSH
43089: CALL_OW 69
43093: PPUSH
43094: LD_VAR 0 2
43098: PPUSH
43099: CALL_OW 74
43103: PPUSH
43104: CALL_OW 115
// until IsDead ( un ) ;
43108: LD_VAR 0 2
43112: PPUSH
43113: CALL_OW 301
43117: IFFALSE 43065
// end ;
43119: PPOPN 2
43121: END
// every 0 0$1 trigger StreamModeActive and sStu do
43122: LD_EXP 87
43126: PUSH
43127: LD_EXP 126
43131: AND
43132: IFFALSE 43148
43134: GO 43136
43136: DISABLE
// begin ToLua ( displayStucuk(); ) ;
43137: LD_STRING displayStucuk();
43139: PPUSH
43140: CALL_OW 559
// ResetFog ;
43144: CALL_OW 335
// end ;
43148: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
43149: LD_EXP 87
43153: PUSH
43154: LD_EXP 119
43158: AND
43159: IFFALSE 43300
43161: GO 43163
43163: DISABLE
43164: LD_INT 0
43166: PPUSH
43167: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43168: LD_ADDR_VAR 0 2
43172: PUSH
43173: LD_INT 22
43175: PUSH
43176: LD_OWVAR 2
43180: PUSH
43181: EMPTY
43182: LIST
43183: LIST
43184: PUSH
43185: LD_INT 21
43187: PUSH
43188: LD_INT 1
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PPUSH
43199: CALL_OW 69
43203: ST_TO_ADDR
// if not tmp then
43204: LD_VAR 0 2
43208: NOT
43209: IFFALSE 43213
// exit ;
43211: GO 43300
// un := tmp [ rand ( 1 , tmp ) ] ;
43213: LD_ADDR_VAR 0 1
43217: PUSH
43218: LD_VAR 0 2
43222: PUSH
43223: LD_INT 1
43225: PPUSH
43226: LD_VAR 0 2
43230: PPUSH
43231: CALL_OW 12
43235: ARRAY
43236: ST_TO_ADDR
// SetSide ( un , 0 ) ;
43237: LD_VAR 0 1
43241: PPUSH
43242: LD_INT 0
43244: PPUSH
43245: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
43249: LD_VAR 0 1
43253: PPUSH
43254: LD_OWVAR 3
43258: PUSH
43259: LD_VAR 0 1
43263: DIFF
43264: PPUSH
43265: LD_VAR 0 1
43269: PPUSH
43270: CALL_OW 74
43274: PPUSH
43275: CALL_OW 115
// wait ( 0 0$20 ) ;
43279: LD_INT 700
43281: PPUSH
43282: CALL_OW 67
// SetSide ( un , your_side ) ;
43286: LD_VAR 0 1
43290: PPUSH
43291: LD_OWVAR 2
43295: PPUSH
43296: CALL_OW 235
// end ;
43300: PPOPN 2
43302: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
43303: LD_EXP 87
43307: PUSH
43308: LD_EXP 120
43312: AND
43313: IFFALSE 43419
43315: GO 43317
43317: DISABLE
43318: LD_INT 0
43320: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43321: LD_ADDR_VAR 0 1
43325: PUSH
43326: LD_INT 22
43328: PUSH
43329: LD_OWVAR 2
43333: PUSH
43334: EMPTY
43335: LIST
43336: LIST
43337: PUSH
43338: LD_INT 2
43340: PUSH
43341: LD_INT 30
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 30
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: LIST
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PPUSH
43370: CALL_OW 69
43374: ST_TO_ADDR
// if not depot then
43375: LD_VAR 0 1
43379: NOT
43380: IFFALSE 43384
// exit ;
43382: GO 43419
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
43384: LD_VAR 0 1
43388: PUSH
43389: LD_INT 1
43391: ARRAY
43392: PPUSH
43393: CALL_OW 250
43397: PPUSH
43398: LD_VAR 0 1
43402: PUSH
43403: LD_INT 1
43405: ARRAY
43406: PPUSH
43407: CALL_OW 251
43411: PPUSH
43412: LD_INT 70
43414: PPUSH
43415: CALL_OW 495
// end ;
43419: PPOPN 1
43421: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
43422: LD_EXP 87
43426: PUSH
43427: LD_EXP 121
43431: AND
43432: IFFALSE 43643
43434: GO 43436
43436: DISABLE
43437: LD_INT 0
43439: PPUSH
43440: PPUSH
43441: PPUSH
43442: PPUSH
43443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43444: LD_ADDR_VAR 0 5
43448: PUSH
43449: LD_INT 22
43451: PUSH
43452: LD_OWVAR 2
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 21
43463: PUSH
43464: LD_INT 1
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PPUSH
43475: CALL_OW 69
43479: ST_TO_ADDR
// if not tmp then
43480: LD_VAR 0 5
43484: NOT
43485: IFFALSE 43489
// exit ;
43487: GO 43643
// for i in tmp do
43489: LD_ADDR_VAR 0 1
43493: PUSH
43494: LD_VAR 0 5
43498: PUSH
43499: FOR_IN
43500: IFFALSE 43641
// begin d := rand ( 0 , 5 ) ;
43502: LD_ADDR_VAR 0 4
43506: PUSH
43507: LD_INT 0
43509: PPUSH
43510: LD_INT 5
43512: PPUSH
43513: CALL_OW 12
43517: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
43518: LD_ADDR_VAR 0 2
43522: PUSH
43523: LD_VAR 0 1
43527: PPUSH
43528: CALL_OW 250
43532: PPUSH
43533: LD_VAR 0 4
43537: PPUSH
43538: LD_INT 3
43540: PPUSH
43541: LD_INT 12
43543: PPUSH
43544: CALL_OW 12
43548: PPUSH
43549: CALL_OW 272
43553: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
43554: LD_ADDR_VAR 0 3
43558: PUSH
43559: LD_VAR 0 1
43563: PPUSH
43564: CALL_OW 251
43568: PPUSH
43569: LD_VAR 0 4
43573: PPUSH
43574: LD_INT 3
43576: PPUSH
43577: LD_INT 12
43579: PPUSH
43580: CALL_OW 12
43584: PPUSH
43585: CALL_OW 273
43589: ST_TO_ADDR
// if ValidHex ( x , y ) then
43590: LD_VAR 0 2
43594: PPUSH
43595: LD_VAR 0 3
43599: PPUSH
43600: CALL_OW 488
43604: IFFALSE 43639
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
43606: LD_VAR 0 1
43610: PPUSH
43611: LD_VAR 0 2
43615: PPUSH
43616: LD_VAR 0 3
43620: PPUSH
43621: LD_INT 3
43623: PPUSH
43624: LD_INT 6
43626: PPUSH
43627: CALL_OW 12
43631: PPUSH
43632: LD_INT 1
43634: PPUSH
43635: CALL_OW 483
// end ;
43639: GO 43499
43641: POP
43642: POP
// end ;
43643: PPOPN 5
43645: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
43646: LD_EXP 87
43650: PUSH
43651: LD_EXP 122
43655: AND
43656: IFFALSE 43750
43658: GO 43660
43660: DISABLE
43661: LD_INT 0
43663: PPUSH
43664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
43665: LD_ADDR_VAR 0 2
43669: PUSH
43670: LD_INT 22
43672: PUSH
43673: LD_OWVAR 2
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 32
43684: PUSH
43685: LD_INT 1
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 21
43694: PUSH
43695: LD_INT 2
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: LIST
43706: PPUSH
43707: CALL_OW 69
43711: ST_TO_ADDR
// if not tmp then
43712: LD_VAR 0 2
43716: NOT
43717: IFFALSE 43721
// exit ;
43719: GO 43750
// for i in tmp do
43721: LD_ADDR_VAR 0 1
43725: PUSH
43726: LD_VAR 0 2
43730: PUSH
43731: FOR_IN
43732: IFFALSE 43748
// SetFuel ( i , 0 ) ;
43734: LD_VAR 0 1
43738: PPUSH
43739: LD_INT 0
43741: PPUSH
43742: CALL_OW 240
43746: GO 43731
43748: POP
43749: POP
// end ;
43750: PPOPN 2
43752: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
43753: LD_EXP 87
43757: PUSH
43758: LD_EXP 123
43762: AND
43763: IFFALSE 43829
43765: GO 43767
43767: DISABLE
43768: LD_INT 0
43770: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
43771: LD_ADDR_VAR 0 1
43775: PUSH
43776: LD_INT 22
43778: PUSH
43779: LD_OWVAR 2
43783: PUSH
43784: EMPTY
43785: LIST
43786: LIST
43787: PUSH
43788: LD_INT 30
43790: PUSH
43791: LD_INT 29
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PPUSH
43802: CALL_OW 69
43806: ST_TO_ADDR
// if not tmp then
43807: LD_VAR 0 1
43811: NOT
43812: IFFALSE 43816
// exit ;
43814: GO 43829
// DestroyUnit ( tmp [ 1 ] ) ;
43816: LD_VAR 0 1
43820: PUSH
43821: LD_INT 1
43823: ARRAY
43824: PPUSH
43825: CALL_OW 65
// end ;
43829: PPOPN 1
43831: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
43832: LD_EXP 87
43836: PUSH
43837: LD_EXP 125
43841: AND
43842: IFFALSE 43971
43844: GO 43846
43846: DISABLE
43847: LD_INT 0
43849: PPUSH
// begin uc_side := 0 ;
43850: LD_ADDR_OWVAR 20
43854: PUSH
43855: LD_INT 0
43857: ST_TO_ADDR
// uc_nation := nation_arabian ;
43858: LD_ADDR_OWVAR 21
43862: PUSH
43863: LD_INT 2
43865: ST_TO_ADDR
// hc_gallery :=  ;
43866: LD_ADDR_OWVAR 33
43870: PUSH
43871: LD_STRING 
43873: ST_TO_ADDR
// hc_name :=  ;
43874: LD_ADDR_OWVAR 26
43878: PUSH
43879: LD_STRING 
43881: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
43882: LD_INT 1
43884: PPUSH
43885: LD_INT 11
43887: PPUSH
43888: LD_INT 10
43890: PPUSH
43891: CALL_OW 380
// un := CreateHuman ;
43895: LD_ADDR_VAR 0 1
43899: PUSH
43900: CALL_OW 44
43904: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43905: LD_VAR 0 1
43909: PPUSH
43910: LD_INT 1
43912: PPUSH
43913: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43917: LD_INT 35
43919: PPUSH
43920: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43924: LD_VAR 0 1
43928: PPUSH
43929: LD_INT 22
43931: PUSH
43932: LD_OWVAR 2
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PPUSH
43941: CALL_OW 69
43945: PPUSH
43946: LD_VAR 0 1
43950: PPUSH
43951: CALL_OW 74
43955: PPUSH
43956: CALL_OW 115
// until IsDead ( un ) ;
43960: LD_VAR 0 1
43964: PPUSH
43965: CALL_OW 301
43969: IFFALSE 43917
// end ;
43971: PPOPN 1
43973: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
43974: LD_EXP 87
43978: PUSH
43979: LD_EXP 127
43983: AND
43984: IFFALSE 43996
43986: GO 43988
43988: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
43989: LD_STRING earthquake(getX(game), 0, 32)
43991: PPUSH
43992: CALL_OW 559
43996: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
43997: LD_EXP 87
44001: PUSH
44002: LD_EXP 128
44006: AND
44007: IFFALSE 44098
44009: GO 44011
44011: DISABLE
44012: LD_INT 0
44014: PPUSH
// begin enable ;
44015: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
44016: LD_ADDR_VAR 0 1
44020: PUSH
44021: LD_INT 22
44023: PUSH
44024: LD_OWVAR 2
44028: PUSH
44029: EMPTY
44030: LIST
44031: LIST
44032: PUSH
44033: LD_INT 21
44035: PUSH
44036: LD_INT 2
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 33
44045: PUSH
44046: LD_INT 3
44048: PUSH
44049: EMPTY
44050: LIST
44051: LIST
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: LIST
44057: PPUSH
44058: CALL_OW 69
44062: ST_TO_ADDR
// if not tmp then
44063: LD_VAR 0 1
44067: NOT
44068: IFFALSE 44072
// exit ;
44070: GO 44098
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
44072: LD_VAR 0 1
44076: PUSH
44077: LD_INT 1
44079: PPUSH
44080: LD_VAR 0 1
44084: PPUSH
44085: CALL_OW 12
44089: ARRAY
44090: PPUSH
44091: LD_INT 1
44093: PPUSH
44094: CALL_OW 234
// end ;
44098: PPOPN 1
44100: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
44101: LD_EXP 87
44105: PUSH
44106: LD_EXP 129
44110: AND
44111: IFFALSE 44252
44113: GO 44115
44115: DISABLE
44116: LD_INT 0
44118: PPUSH
44119: PPUSH
44120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44121: LD_ADDR_VAR 0 3
44125: PUSH
44126: LD_INT 22
44128: PUSH
44129: LD_OWVAR 2
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 25
44140: PUSH
44141: LD_INT 1
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PPUSH
44152: CALL_OW 69
44156: ST_TO_ADDR
// if not tmp then
44157: LD_VAR 0 3
44161: NOT
44162: IFFALSE 44166
// exit ;
44164: GO 44252
// un := tmp [ rand ( 1 , tmp ) ] ;
44166: LD_ADDR_VAR 0 2
44170: PUSH
44171: LD_VAR 0 3
44175: PUSH
44176: LD_INT 1
44178: PPUSH
44179: LD_VAR 0 3
44183: PPUSH
44184: CALL_OW 12
44188: ARRAY
44189: ST_TO_ADDR
// if Crawls ( un ) then
44190: LD_VAR 0 2
44194: PPUSH
44195: CALL_OW 318
44199: IFFALSE 44210
// ComWalk ( un ) ;
44201: LD_VAR 0 2
44205: PPUSH
44206: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
44210: LD_VAR 0 2
44214: PPUSH
44215: LD_INT 9
44217: PPUSH
44218: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
44222: LD_INT 28
44224: PPUSH
44225: LD_OWVAR 2
44229: PPUSH
44230: LD_INT 2
44232: PPUSH
44233: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
44237: LD_INT 29
44239: PPUSH
44240: LD_OWVAR 2
44244: PPUSH
44245: LD_INT 2
44247: PPUSH
44248: CALL_OW 322
// end ;
44252: PPOPN 3
44254: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
44255: LD_EXP 87
44259: PUSH
44260: LD_EXP 130
44264: AND
44265: IFFALSE 44376
44267: GO 44269
44269: DISABLE
44270: LD_INT 0
44272: PPUSH
44273: PPUSH
44274: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44275: LD_ADDR_VAR 0 3
44279: PUSH
44280: LD_INT 22
44282: PUSH
44283: LD_OWVAR 2
44287: PUSH
44288: EMPTY
44289: LIST
44290: LIST
44291: PUSH
44292: LD_INT 25
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PPUSH
44306: CALL_OW 69
44310: ST_TO_ADDR
// if not tmp then
44311: LD_VAR 0 3
44315: NOT
44316: IFFALSE 44320
// exit ;
44318: GO 44376
// un := tmp [ rand ( 1 , tmp ) ] ;
44320: LD_ADDR_VAR 0 2
44324: PUSH
44325: LD_VAR 0 3
44329: PUSH
44330: LD_INT 1
44332: PPUSH
44333: LD_VAR 0 3
44337: PPUSH
44338: CALL_OW 12
44342: ARRAY
44343: ST_TO_ADDR
// if Crawls ( un ) then
44344: LD_VAR 0 2
44348: PPUSH
44349: CALL_OW 318
44353: IFFALSE 44364
// ComWalk ( un ) ;
44355: LD_VAR 0 2
44359: PPUSH
44360: CALL_OW 138
// SetClass ( un , class_mortar ) ;
44364: LD_VAR 0 2
44368: PPUSH
44369: LD_INT 8
44371: PPUSH
44372: CALL_OW 336
// end ;
44376: PPOPN 3
44378: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
44379: LD_EXP 87
44383: PUSH
44384: LD_EXP 131
44388: AND
44389: IFFALSE 44533
44391: GO 44393
44393: DISABLE
44394: LD_INT 0
44396: PPUSH
44397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
44398: LD_ADDR_VAR 0 2
44402: PUSH
44403: LD_INT 22
44405: PUSH
44406: LD_OWVAR 2
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 21
44417: PUSH
44418: LD_INT 2
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 2
44427: PUSH
44428: LD_INT 34
44430: PUSH
44431: LD_INT 12
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 34
44440: PUSH
44441: LD_INT 51
44443: PUSH
44444: EMPTY
44445: LIST
44446: LIST
44447: PUSH
44448: LD_INT 34
44450: PUSH
44451: LD_INT 32
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: LIST
44462: LIST
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: LIST
44468: PPUSH
44469: CALL_OW 69
44473: ST_TO_ADDR
// if not tmp then
44474: LD_VAR 0 2
44478: NOT
44479: IFFALSE 44483
// exit ;
44481: GO 44533
// for i in tmp do
44483: LD_ADDR_VAR 0 1
44487: PUSH
44488: LD_VAR 0 2
44492: PUSH
44493: FOR_IN
44494: IFFALSE 44531
// if GetCargo ( i , mat_artifact ) = 0 then
44496: LD_VAR 0 1
44500: PPUSH
44501: LD_INT 4
44503: PPUSH
44504: CALL_OW 289
44508: PUSH
44509: LD_INT 0
44511: EQUAL
44512: IFFALSE 44529
// SetCargo ( i , mat_siberit , 100 ) ;
44514: LD_VAR 0 1
44518: PPUSH
44519: LD_INT 3
44521: PPUSH
44522: LD_INT 100
44524: PPUSH
44525: CALL_OW 290
44529: GO 44493
44531: POP
44532: POP
// end ;
44533: PPOPN 2
44535: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
44536: LD_EXP 87
44540: PUSH
44541: LD_EXP 132
44545: AND
44546: IFFALSE 44729
44548: GO 44550
44550: DISABLE
44551: LD_INT 0
44553: PPUSH
44554: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
44555: LD_ADDR_VAR 0 2
44559: PUSH
44560: LD_INT 22
44562: PUSH
44563: LD_OWVAR 2
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PPUSH
44572: CALL_OW 69
44576: ST_TO_ADDR
// if not tmp then
44577: LD_VAR 0 2
44581: NOT
44582: IFFALSE 44586
// exit ;
44584: GO 44729
// for i := 1 to 2 do
44586: LD_ADDR_VAR 0 1
44590: PUSH
44591: DOUBLE
44592: LD_INT 1
44594: DEC
44595: ST_TO_ADDR
44596: LD_INT 2
44598: PUSH
44599: FOR_TO
44600: IFFALSE 44727
// begin uc_side := your_side ;
44602: LD_ADDR_OWVAR 20
44606: PUSH
44607: LD_OWVAR 2
44611: ST_TO_ADDR
// uc_nation := nation_american ;
44612: LD_ADDR_OWVAR 21
44616: PUSH
44617: LD_INT 1
44619: ST_TO_ADDR
// vc_chassis := us_morphling ;
44620: LD_ADDR_OWVAR 37
44624: PUSH
44625: LD_INT 5
44627: ST_TO_ADDR
// vc_engine := engine_siberite ;
44628: LD_ADDR_OWVAR 39
44632: PUSH
44633: LD_INT 3
44635: ST_TO_ADDR
// vc_control := control_computer ;
44636: LD_ADDR_OWVAR 38
44640: PUSH
44641: LD_INT 3
44643: ST_TO_ADDR
// vc_weapon := us_double_laser ;
44644: LD_ADDR_OWVAR 40
44648: PUSH
44649: LD_INT 10
44651: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
44652: LD_VAR 0 2
44656: PUSH
44657: LD_INT 1
44659: ARRAY
44660: PPUSH
44661: CALL_OW 310
44665: NOT
44666: IFFALSE 44713
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
44668: CALL_OW 45
44672: PPUSH
44673: LD_VAR 0 2
44677: PUSH
44678: LD_INT 1
44680: ARRAY
44681: PPUSH
44682: CALL_OW 250
44686: PPUSH
44687: LD_VAR 0 2
44691: PUSH
44692: LD_INT 1
44694: ARRAY
44695: PPUSH
44696: CALL_OW 251
44700: PPUSH
44701: LD_INT 12
44703: PPUSH
44704: LD_INT 1
44706: PPUSH
44707: CALL_OW 50
44711: GO 44725
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
44713: CALL_OW 45
44717: PPUSH
44718: LD_INT 1
44720: PPUSH
44721: CALL_OW 51
// end ;
44725: GO 44599
44727: POP
44728: POP
// end ;
44729: PPOPN 2
44731: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
44732: LD_EXP 87
44736: PUSH
44737: LD_EXP 133
44741: AND
44742: IFFALSE 44964
44744: GO 44746
44746: DISABLE
44747: LD_INT 0
44749: PPUSH
44750: PPUSH
44751: PPUSH
44752: PPUSH
44753: PPUSH
44754: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
44755: LD_ADDR_VAR 0 6
44759: PUSH
44760: LD_INT 22
44762: PUSH
44763: LD_OWVAR 2
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 21
44774: PUSH
44775: LD_INT 1
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 3
44784: PUSH
44785: LD_INT 23
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: EMPTY
44796: LIST
44797: LIST
44798: PUSH
44799: EMPTY
44800: LIST
44801: LIST
44802: LIST
44803: PPUSH
44804: CALL_OW 69
44808: ST_TO_ADDR
// if not tmp then
44809: LD_VAR 0 6
44813: NOT
44814: IFFALSE 44818
// exit ;
44816: GO 44964
// s1 := rand ( 1 , 4 ) ;
44818: LD_ADDR_VAR 0 2
44822: PUSH
44823: LD_INT 1
44825: PPUSH
44826: LD_INT 4
44828: PPUSH
44829: CALL_OW 12
44833: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
44834: LD_ADDR_VAR 0 4
44838: PUSH
44839: LD_VAR 0 6
44843: PUSH
44844: LD_INT 1
44846: ARRAY
44847: PPUSH
44848: LD_VAR 0 2
44852: PPUSH
44853: CALL_OW 259
44857: ST_TO_ADDR
// if s1 = 1 then
44858: LD_VAR 0 2
44862: PUSH
44863: LD_INT 1
44865: EQUAL
44866: IFFALSE 44886
// s2 := rand ( 2 , 4 ) else
44868: LD_ADDR_VAR 0 3
44872: PUSH
44873: LD_INT 2
44875: PPUSH
44876: LD_INT 4
44878: PPUSH
44879: CALL_OW 12
44883: ST_TO_ADDR
44884: GO 44894
// s2 := 1 ;
44886: LD_ADDR_VAR 0 3
44890: PUSH
44891: LD_INT 1
44893: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
44894: LD_ADDR_VAR 0 5
44898: PUSH
44899: LD_VAR 0 6
44903: PUSH
44904: LD_INT 1
44906: ARRAY
44907: PPUSH
44908: LD_VAR 0 3
44912: PPUSH
44913: CALL_OW 259
44917: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
44918: LD_VAR 0 6
44922: PUSH
44923: LD_INT 1
44925: ARRAY
44926: PPUSH
44927: LD_VAR 0 2
44931: PPUSH
44932: LD_VAR 0 5
44936: PPUSH
44937: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
44941: LD_VAR 0 6
44945: PUSH
44946: LD_INT 1
44948: ARRAY
44949: PPUSH
44950: LD_VAR 0 3
44954: PPUSH
44955: LD_VAR 0 4
44959: PPUSH
44960: CALL_OW 237
// end ;
44964: PPOPN 6
44966: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
44967: LD_EXP 87
44971: PUSH
44972: LD_EXP 134
44976: AND
44977: IFFALSE 45056
44979: GO 44981
44981: DISABLE
44982: LD_INT 0
44984: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
44985: LD_ADDR_VAR 0 1
44989: PUSH
44990: LD_INT 22
44992: PUSH
44993: LD_OWVAR 2
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 30
45004: PUSH
45005: LD_INT 3
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PPUSH
45016: CALL_OW 69
45020: ST_TO_ADDR
// if not tmp then
45021: LD_VAR 0 1
45025: NOT
45026: IFFALSE 45030
// exit ;
45028: GO 45056
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
45030: LD_VAR 0 1
45034: PUSH
45035: LD_INT 1
45037: PPUSH
45038: LD_VAR 0 1
45042: PPUSH
45043: CALL_OW 12
45047: ARRAY
45048: PPUSH
45049: LD_INT 1
45051: PPUSH
45052: CALL_OW 234
// end ;
45056: PPOPN 1
45058: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
45059: LD_EXP 87
45063: PUSH
45064: LD_EXP 135
45068: AND
45069: IFFALSE 45181
45071: GO 45073
45073: DISABLE
45074: LD_INT 0
45076: PPUSH
45077: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
45078: LD_ADDR_VAR 0 2
45082: PUSH
45083: LD_INT 22
45085: PUSH
45086: LD_OWVAR 2
45090: PUSH
45091: EMPTY
45092: LIST
45093: LIST
45094: PUSH
45095: LD_INT 2
45097: PUSH
45098: LD_INT 30
45100: PUSH
45101: LD_INT 27
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 30
45110: PUSH
45111: LD_INT 26
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 30
45120: PUSH
45121: LD_INT 28
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: EMPTY
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PPUSH
45138: CALL_OW 69
45142: ST_TO_ADDR
// if not tmp then
45143: LD_VAR 0 2
45147: NOT
45148: IFFALSE 45152
// exit ;
45150: GO 45181
// for i in tmp do
45152: LD_ADDR_VAR 0 1
45156: PUSH
45157: LD_VAR 0 2
45161: PUSH
45162: FOR_IN
45163: IFFALSE 45179
// SetLives ( i , 1 ) ;
45165: LD_VAR 0 1
45169: PPUSH
45170: LD_INT 1
45172: PPUSH
45173: CALL_OW 234
45177: GO 45162
45179: POP
45180: POP
// end ;
45181: PPOPN 2
45183: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
45184: LD_EXP 87
45188: PUSH
45189: LD_EXP 136
45193: AND
45194: IFFALSE 45481
45196: GO 45198
45198: DISABLE
45199: LD_INT 0
45201: PPUSH
45202: PPUSH
45203: PPUSH
// begin i := rand ( 1 , 7 ) ;
45204: LD_ADDR_VAR 0 1
45208: PUSH
45209: LD_INT 1
45211: PPUSH
45212: LD_INT 7
45214: PPUSH
45215: CALL_OW 12
45219: ST_TO_ADDR
// case i of 1 :
45220: LD_VAR 0 1
45224: PUSH
45225: LD_INT 1
45227: DOUBLE
45228: EQUAL
45229: IFTRUE 45233
45231: GO 45243
45233: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
45234: LD_STRING earthquake(getX(game), 0, 32)
45236: PPUSH
45237: CALL_OW 559
45241: GO 45481
45243: LD_INT 2
45245: DOUBLE
45246: EQUAL
45247: IFTRUE 45251
45249: GO 45265
45251: POP
// begin ToLua ( displayStucuk(); ) ;
45252: LD_STRING displayStucuk();
45254: PPUSH
45255: CALL_OW 559
// ResetFog ;
45259: CALL_OW 335
// end ; 3 :
45263: GO 45481
45265: LD_INT 3
45267: DOUBLE
45268: EQUAL
45269: IFTRUE 45273
45271: GO 45377
45273: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
45274: LD_ADDR_VAR 0 2
45278: PUSH
45279: LD_INT 22
45281: PUSH
45282: LD_OWVAR 2
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 25
45293: PUSH
45294: LD_INT 1
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PPUSH
45305: CALL_OW 69
45309: ST_TO_ADDR
// if not tmp then
45310: LD_VAR 0 2
45314: NOT
45315: IFFALSE 45319
// exit ;
45317: GO 45481
// un := tmp [ rand ( 1 , tmp ) ] ;
45319: LD_ADDR_VAR 0 3
45323: PUSH
45324: LD_VAR 0 2
45328: PUSH
45329: LD_INT 1
45331: PPUSH
45332: LD_VAR 0 2
45336: PPUSH
45337: CALL_OW 12
45341: ARRAY
45342: ST_TO_ADDR
// if Crawls ( un ) then
45343: LD_VAR 0 3
45347: PPUSH
45348: CALL_OW 318
45352: IFFALSE 45363
// ComWalk ( un ) ;
45354: LD_VAR 0 3
45358: PPUSH
45359: CALL_OW 138
// SetClass ( un , class_mortar ) ;
45363: LD_VAR 0 3
45367: PPUSH
45368: LD_INT 8
45370: PPUSH
45371: CALL_OW 336
// end ; 4 :
45375: GO 45481
45377: LD_INT 4
45379: DOUBLE
45380: EQUAL
45381: IFTRUE 45385
45383: GO 45459
45385: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
45386: LD_ADDR_VAR 0 2
45390: PUSH
45391: LD_INT 22
45393: PUSH
45394: LD_OWVAR 2
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 30
45405: PUSH
45406: LD_INT 29
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PPUSH
45417: CALL_OW 69
45421: ST_TO_ADDR
// if not tmp then
45422: LD_VAR 0 2
45426: NOT
45427: IFFALSE 45431
// exit ;
45429: GO 45481
// CenterNowOnUnits ( tmp [ 1 ] ) ;
45431: LD_VAR 0 2
45435: PUSH
45436: LD_INT 1
45438: ARRAY
45439: PPUSH
45440: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
45444: LD_VAR 0 2
45448: PUSH
45449: LD_INT 1
45451: ARRAY
45452: PPUSH
45453: CALL_OW 65
// end ; 5 .. 7 :
45457: GO 45481
45459: LD_INT 5
45461: DOUBLE
45462: GREATEREQUAL
45463: IFFALSE 45471
45465: LD_INT 7
45467: DOUBLE
45468: LESSEQUAL
45469: IFTRUE 45473
45471: GO 45480
45473: POP
// StreamSibBomb ; end ;
45474: CALL 41718 0 0
45478: GO 45481
45480: POP
// end ;
45481: PPOPN 3
45483: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
45484: LD_EXP 87
45488: PUSH
45489: LD_EXP 137
45493: AND
45494: IFFALSE 45650
45496: GO 45498
45498: DISABLE
45499: LD_INT 0
45501: PPUSH
45502: PPUSH
45503: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
45504: LD_ADDR_VAR 0 2
45508: PUSH
45509: LD_INT 81
45511: PUSH
45512: LD_OWVAR 2
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 2
45523: PUSH
45524: LD_INT 21
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 21
45536: PUSH
45537: LD_INT 2
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: LIST
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PPUSH
45553: CALL_OW 69
45557: ST_TO_ADDR
// if not tmp then
45558: LD_VAR 0 2
45562: NOT
45563: IFFALSE 45567
// exit ;
45565: GO 45650
// p := 0 ;
45567: LD_ADDR_VAR 0 3
45571: PUSH
45572: LD_INT 0
45574: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
45575: LD_INT 35
45577: PPUSH
45578: CALL_OW 67
// p := p + 1 ;
45582: LD_ADDR_VAR 0 3
45586: PUSH
45587: LD_VAR 0 3
45591: PUSH
45592: LD_INT 1
45594: PLUS
45595: ST_TO_ADDR
// for i in tmp do
45596: LD_ADDR_VAR 0 1
45600: PUSH
45601: LD_VAR 0 2
45605: PUSH
45606: FOR_IN
45607: IFFALSE 45638
// if GetLives ( i ) < 1000 then
45609: LD_VAR 0 1
45613: PPUSH
45614: CALL_OW 256
45618: PUSH
45619: LD_INT 1000
45621: LESS
45622: IFFALSE 45636
// SetLives ( i , 1000 ) ;
45624: LD_VAR 0 1
45628: PPUSH
45629: LD_INT 1000
45631: PPUSH
45632: CALL_OW 234
45636: GO 45606
45638: POP
45639: POP
// until p > 20 ;
45640: LD_VAR 0 3
45644: PUSH
45645: LD_INT 20
45647: GREATER
45648: IFFALSE 45575
// end ;
45650: PPOPN 3
45652: END
// every 0 0$1 trigger StreamModeActive and sTime do
45653: LD_EXP 87
45657: PUSH
45658: LD_EXP 138
45662: AND
45663: IFFALSE 45698
45665: GO 45667
45667: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
45668: LD_INT 28
45670: PPUSH
45671: LD_OWVAR 2
45675: PPUSH
45676: LD_INT 2
45678: PPUSH
45679: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
45683: LD_INT 30
45685: PPUSH
45686: LD_OWVAR 2
45690: PPUSH
45691: LD_INT 2
45693: PPUSH
45694: CALL_OW 322
// end ;
45698: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
45699: LD_EXP 87
45703: PUSH
45704: LD_EXP 139
45708: AND
45709: IFFALSE 45830
45711: GO 45713
45713: DISABLE
45714: LD_INT 0
45716: PPUSH
45717: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
45718: LD_ADDR_VAR 0 2
45722: PUSH
45723: LD_INT 22
45725: PUSH
45726: LD_OWVAR 2
45730: PUSH
45731: EMPTY
45732: LIST
45733: LIST
45734: PUSH
45735: LD_INT 21
45737: PUSH
45738: LD_INT 1
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 3
45747: PUSH
45748: LD_INT 23
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: EMPTY
45759: LIST
45760: LIST
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: LIST
45766: PPUSH
45767: CALL_OW 69
45771: ST_TO_ADDR
// if not tmp then
45772: LD_VAR 0 2
45776: NOT
45777: IFFALSE 45781
// exit ;
45779: GO 45830
// for i in tmp do
45781: LD_ADDR_VAR 0 1
45785: PUSH
45786: LD_VAR 0 2
45790: PUSH
45791: FOR_IN
45792: IFFALSE 45828
// begin if Crawls ( i ) then
45794: LD_VAR 0 1
45798: PPUSH
45799: CALL_OW 318
45803: IFFALSE 45814
// ComWalk ( i ) ;
45805: LD_VAR 0 1
45809: PPUSH
45810: CALL_OW 138
// SetClass ( i , 2 ) ;
45814: LD_VAR 0 1
45818: PPUSH
45819: LD_INT 2
45821: PPUSH
45822: CALL_OW 336
// end ;
45826: GO 45791
45828: POP
45829: POP
// end ;
45830: PPOPN 2
45832: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
45833: LD_EXP 87
45837: PUSH
45838: LD_EXP 140
45842: AND
45843: IFFALSE 46131
45845: GO 45847
45847: DISABLE
45848: LD_INT 0
45850: PPUSH
45851: PPUSH
45852: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
45853: LD_OWVAR 2
45857: PPUSH
45858: LD_INT 9
45860: PPUSH
45861: LD_INT 1
45863: PPUSH
45864: LD_INT 1
45866: PPUSH
45867: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
45871: LD_INT 9
45873: PPUSH
45874: LD_OWVAR 2
45878: PPUSH
45879: CALL_OW 343
// uc_side := 9 ;
45883: LD_ADDR_OWVAR 20
45887: PUSH
45888: LD_INT 9
45890: ST_TO_ADDR
// uc_nation := 2 ;
45891: LD_ADDR_OWVAR 21
45895: PUSH
45896: LD_INT 2
45898: ST_TO_ADDR
// hc_name := Dark Warrior ;
45899: LD_ADDR_OWVAR 26
45903: PUSH
45904: LD_STRING Dark Warrior
45906: ST_TO_ADDR
// hc_gallery :=  ;
45907: LD_ADDR_OWVAR 33
45911: PUSH
45912: LD_STRING 
45914: ST_TO_ADDR
// hc_noskilllimit := true ;
45915: LD_ADDR_OWVAR 76
45919: PUSH
45920: LD_INT 1
45922: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
45923: LD_ADDR_OWVAR 31
45927: PUSH
45928: LD_INT 30
45930: PUSH
45931: LD_INT 30
45933: PUSH
45934: LD_INT 30
45936: PUSH
45937: LD_INT 30
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: ST_TO_ADDR
// un := CreateHuman ;
45946: LD_ADDR_VAR 0 3
45950: PUSH
45951: CALL_OW 44
45955: ST_TO_ADDR
// hc_noskilllimit := false ;
45956: LD_ADDR_OWVAR 76
45960: PUSH
45961: LD_INT 0
45963: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
45964: LD_VAR 0 3
45968: PPUSH
45969: LD_INT 1
45971: PPUSH
45972: CALL_OW 51
// ToLua ( playRanger() ) ;
45976: LD_STRING playRanger()
45978: PPUSH
45979: CALL_OW 559
// p := 0 ;
45983: LD_ADDR_VAR 0 2
45987: PUSH
45988: LD_INT 0
45990: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
45991: LD_INT 35
45993: PPUSH
45994: CALL_OW 67
// p := p + 1 ;
45998: LD_ADDR_VAR 0 2
46002: PUSH
46003: LD_VAR 0 2
46007: PUSH
46008: LD_INT 1
46010: PLUS
46011: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
46012: LD_VAR 0 3
46016: PPUSH
46017: CALL_OW 256
46021: PUSH
46022: LD_INT 1000
46024: LESS
46025: IFFALSE 46039
// SetLives ( un , 1000 ) ;
46027: LD_VAR 0 3
46031: PPUSH
46032: LD_INT 1000
46034: PPUSH
46035: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
46039: LD_VAR 0 3
46043: PPUSH
46044: LD_INT 81
46046: PUSH
46047: LD_OWVAR 2
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: PUSH
46056: LD_INT 91
46058: PUSH
46059: LD_VAR 0 3
46063: PUSH
46064: LD_INT 30
46066: PUSH
46067: EMPTY
46068: LIST
46069: LIST
46070: LIST
46071: PUSH
46072: EMPTY
46073: LIST
46074: LIST
46075: PPUSH
46076: CALL_OW 69
46080: PPUSH
46081: LD_VAR 0 3
46085: PPUSH
46086: CALL_OW 74
46090: PPUSH
46091: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
46095: LD_VAR 0 2
46099: PUSH
46100: LD_INT 80
46102: GREATER
46103: PUSH
46104: LD_VAR 0 3
46108: PPUSH
46109: CALL_OW 301
46113: OR
46114: IFFALSE 45991
// if un then
46116: LD_VAR 0 3
46120: IFFALSE 46131
// RemoveUnit ( un ) ;
46122: LD_VAR 0 3
46126: PPUSH
46127: CALL_OW 64
// end ;
46131: PPOPN 3
46133: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
46134: LD_EXP 141
46138: IFFALSE 46254
46140: GO 46142
46142: DISABLE
46143: LD_INT 0
46145: PPUSH
46146: PPUSH
46147: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
46148: LD_ADDR_VAR 0 2
46152: PUSH
46153: LD_INT 81
46155: PUSH
46156: LD_OWVAR 2
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 21
46167: PUSH
46168: LD_INT 1
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PPUSH
46179: CALL_OW 69
46183: ST_TO_ADDR
// ToLua ( playComputer() ) ;
46184: LD_STRING playComputer()
46186: PPUSH
46187: CALL_OW 559
// if not tmp then
46191: LD_VAR 0 2
46195: NOT
46196: IFFALSE 46200
// exit ;
46198: GO 46254
// for i in tmp do
46200: LD_ADDR_VAR 0 1
46204: PUSH
46205: LD_VAR 0 2
46209: PUSH
46210: FOR_IN
46211: IFFALSE 46252
// for j := 1 to 4 do
46213: LD_ADDR_VAR 0 3
46217: PUSH
46218: DOUBLE
46219: LD_INT 1
46221: DEC
46222: ST_TO_ADDR
46223: LD_INT 4
46225: PUSH
46226: FOR_TO
46227: IFFALSE 46248
// SetSkill ( i , j , 10 ) ;
46229: LD_VAR 0 1
46233: PPUSH
46234: LD_VAR 0 3
46238: PPUSH
46239: LD_INT 10
46241: PPUSH
46242: CALL_OW 237
46246: GO 46226
46248: POP
46249: POP
46250: GO 46210
46252: POP
46253: POP
// end ;
46254: PPOPN 3
46256: END
// every 0 0$1 trigger s30 do var i , tmp ;
46257: LD_EXP 142
46261: IFFALSE 46330
46263: GO 46265
46265: DISABLE
46266: LD_INT 0
46268: PPUSH
46269: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46270: LD_ADDR_VAR 0 2
46274: PUSH
46275: LD_INT 22
46277: PUSH
46278: LD_OWVAR 2
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PPUSH
46287: CALL_OW 69
46291: ST_TO_ADDR
// if not tmp then
46292: LD_VAR 0 2
46296: NOT
46297: IFFALSE 46301
// exit ;
46299: GO 46330
// for i in tmp do
46301: LD_ADDR_VAR 0 1
46305: PUSH
46306: LD_VAR 0 2
46310: PUSH
46311: FOR_IN
46312: IFFALSE 46328
// SetLives ( i , 300 ) ;
46314: LD_VAR 0 1
46318: PPUSH
46319: LD_INT 300
46321: PPUSH
46322: CALL_OW 234
46326: GO 46311
46328: POP
46329: POP
// end ;
46330: PPOPN 2
46332: END
// every 0 0$1 trigger s60 do var i , tmp ;
46333: LD_EXP 143
46337: IFFALSE 46406
46339: GO 46341
46341: DISABLE
46342: LD_INT 0
46344: PPUSH
46345: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46346: LD_ADDR_VAR 0 2
46350: PUSH
46351: LD_INT 22
46353: PUSH
46354: LD_OWVAR 2
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PPUSH
46363: CALL_OW 69
46367: ST_TO_ADDR
// if not tmp then
46368: LD_VAR 0 2
46372: NOT
46373: IFFALSE 46377
// exit ;
46375: GO 46406
// for i in tmp do
46377: LD_ADDR_VAR 0 1
46381: PUSH
46382: LD_VAR 0 2
46386: PUSH
46387: FOR_IN
46388: IFFALSE 46404
// SetLives ( i , 600 ) ;
46390: LD_VAR 0 1
46394: PPUSH
46395: LD_INT 600
46397: PPUSH
46398: CALL_OW 234
46402: GO 46387
46404: POP
46405: POP
// end ;
46406: PPOPN 2
46408: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46409: LD_INT 0
46411: PPUSH
// case cmd of 301 :
46412: LD_VAR 0 1
46416: PUSH
46417: LD_INT 301
46419: DOUBLE
46420: EQUAL
46421: IFTRUE 46425
46423: GO 46457
46425: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
46426: LD_VAR 0 6
46430: PPUSH
46431: LD_VAR 0 7
46435: PPUSH
46436: LD_VAR 0 8
46440: PPUSH
46441: LD_VAR 0 4
46445: PPUSH
46446: LD_VAR 0 5
46450: PPUSH
46451: CALL 47666 0 5
46455: GO 46578
46457: LD_INT 302
46459: DOUBLE
46460: EQUAL
46461: IFTRUE 46465
46463: GO 46502
46465: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
46466: LD_VAR 0 6
46470: PPUSH
46471: LD_VAR 0 7
46475: PPUSH
46476: LD_VAR 0 8
46480: PPUSH
46481: LD_VAR 0 9
46485: PPUSH
46486: LD_VAR 0 4
46490: PPUSH
46491: LD_VAR 0 5
46495: PPUSH
46496: CALL 47757 0 6
46500: GO 46578
46502: LD_INT 303
46504: DOUBLE
46505: EQUAL
46506: IFTRUE 46510
46508: GO 46547
46510: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
46511: LD_VAR 0 6
46515: PPUSH
46516: LD_VAR 0 7
46520: PPUSH
46521: LD_VAR 0 8
46525: PPUSH
46526: LD_VAR 0 9
46530: PPUSH
46531: LD_VAR 0 4
46535: PPUSH
46536: LD_VAR 0 5
46540: PPUSH
46541: CALL 46583 0 6
46545: GO 46578
46547: LD_INT 304
46549: DOUBLE
46550: EQUAL
46551: IFTRUE 46555
46553: GO 46577
46555: POP
// hHackTeleport ( unit , x , y ) ; end ;
46556: LD_VAR 0 2
46560: PPUSH
46561: LD_VAR 0 4
46565: PPUSH
46566: LD_VAR 0 5
46570: PPUSH
46571: CALL 48350 0 3
46575: GO 46578
46577: POP
// end ;
46578: LD_VAR 0 12
46582: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
46583: LD_INT 0
46585: PPUSH
46586: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
46587: LD_VAR 0 1
46591: PUSH
46592: LD_INT 1
46594: LESS
46595: PUSH
46596: LD_VAR 0 1
46600: PUSH
46601: LD_INT 3
46603: GREATER
46604: OR
46605: PUSH
46606: LD_VAR 0 5
46610: PPUSH
46611: LD_VAR 0 6
46615: PPUSH
46616: CALL_OW 428
46620: OR
46621: IFFALSE 46625
// exit ;
46623: GO 47353
// uc_side := your_side ;
46625: LD_ADDR_OWVAR 20
46629: PUSH
46630: LD_OWVAR 2
46634: ST_TO_ADDR
// uc_nation := nation ;
46635: LD_ADDR_OWVAR 21
46639: PUSH
46640: LD_VAR 0 1
46644: ST_TO_ADDR
// bc_level = 1 ;
46645: LD_ADDR_OWVAR 43
46649: PUSH
46650: LD_INT 1
46652: ST_TO_ADDR
// case btype of 1 :
46653: LD_VAR 0 2
46657: PUSH
46658: LD_INT 1
46660: DOUBLE
46661: EQUAL
46662: IFTRUE 46666
46664: GO 46677
46666: POP
// bc_type := b_depot ; 2 :
46667: LD_ADDR_OWVAR 42
46671: PUSH
46672: LD_INT 0
46674: ST_TO_ADDR
46675: GO 47297
46677: LD_INT 2
46679: DOUBLE
46680: EQUAL
46681: IFTRUE 46685
46683: GO 46696
46685: POP
// bc_type := b_warehouse ; 3 :
46686: LD_ADDR_OWVAR 42
46690: PUSH
46691: LD_INT 1
46693: ST_TO_ADDR
46694: GO 47297
46696: LD_INT 3
46698: DOUBLE
46699: EQUAL
46700: IFTRUE 46704
46702: GO 46715
46704: POP
// bc_type := b_lab ; 4 .. 9 :
46705: LD_ADDR_OWVAR 42
46709: PUSH
46710: LD_INT 6
46712: ST_TO_ADDR
46713: GO 47297
46715: LD_INT 4
46717: DOUBLE
46718: GREATEREQUAL
46719: IFFALSE 46727
46721: LD_INT 9
46723: DOUBLE
46724: LESSEQUAL
46725: IFTRUE 46729
46727: GO 46789
46729: POP
// begin bc_type := b_lab_half ;
46730: LD_ADDR_OWVAR 42
46734: PUSH
46735: LD_INT 7
46737: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
46738: LD_ADDR_OWVAR 44
46742: PUSH
46743: LD_INT 10
46745: PUSH
46746: LD_INT 11
46748: PUSH
46749: LD_INT 12
46751: PUSH
46752: LD_INT 15
46754: PUSH
46755: LD_INT 14
46757: PUSH
46758: LD_INT 13
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: LIST
46765: LIST
46766: LIST
46767: LIST
46768: PUSH
46769: LD_VAR 0 2
46773: PUSH
46774: LD_INT 3
46776: MINUS
46777: ARRAY
46778: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
46779: LD_ADDR_OWVAR 45
46783: PUSH
46784: LD_INT 9
46786: ST_TO_ADDR
// end ; 10 .. 13 :
46787: GO 47297
46789: LD_INT 10
46791: DOUBLE
46792: GREATEREQUAL
46793: IFFALSE 46801
46795: LD_INT 13
46797: DOUBLE
46798: LESSEQUAL
46799: IFTRUE 46803
46801: GO 46880
46803: POP
// begin bc_type := b_lab_full ;
46804: LD_ADDR_OWVAR 42
46808: PUSH
46809: LD_INT 8
46811: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
46812: LD_ADDR_OWVAR 44
46816: PUSH
46817: LD_INT 10
46819: PUSH
46820: LD_INT 12
46822: PUSH
46823: LD_INT 14
46825: PUSH
46826: LD_INT 13
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: PUSH
46835: LD_VAR 0 2
46839: PUSH
46840: LD_INT 9
46842: MINUS
46843: ARRAY
46844: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
46845: LD_ADDR_OWVAR 45
46849: PUSH
46850: LD_INT 11
46852: PUSH
46853: LD_INT 15
46855: PUSH
46856: LD_INT 12
46858: PUSH
46859: LD_INT 15
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: LIST
46866: LIST
46867: PUSH
46868: LD_VAR 0 2
46872: PUSH
46873: LD_INT 9
46875: MINUS
46876: ARRAY
46877: ST_TO_ADDR
// end ; 14 :
46878: GO 47297
46880: LD_INT 14
46882: DOUBLE
46883: EQUAL
46884: IFTRUE 46888
46886: GO 46899
46888: POP
// bc_type := b_workshop ; 15 :
46889: LD_ADDR_OWVAR 42
46893: PUSH
46894: LD_INT 2
46896: ST_TO_ADDR
46897: GO 47297
46899: LD_INT 15
46901: DOUBLE
46902: EQUAL
46903: IFTRUE 46907
46905: GO 46918
46907: POP
// bc_type := b_factory ; 16 :
46908: LD_ADDR_OWVAR 42
46912: PUSH
46913: LD_INT 3
46915: ST_TO_ADDR
46916: GO 47297
46918: LD_INT 16
46920: DOUBLE
46921: EQUAL
46922: IFTRUE 46926
46924: GO 46937
46926: POP
// bc_type := b_ext_gun ; 17 :
46927: LD_ADDR_OWVAR 42
46931: PUSH
46932: LD_INT 17
46934: ST_TO_ADDR
46935: GO 47297
46937: LD_INT 17
46939: DOUBLE
46940: EQUAL
46941: IFTRUE 46945
46943: GO 46973
46945: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
46946: LD_ADDR_OWVAR 42
46950: PUSH
46951: LD_INT 19
46953: PUSH
46954: LD_INT 23
46956: PUSH
46957: LD_INT 19
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: LIST
46964: PUSH
46965: LD_VAR 0 1
46969: ARRAY
46970: ST_TO_ADDR
46971: GO 47297
46973: LD_INT 18
46975: DOUBLE
46976: EQUAL
46977: IFTRUE 46981
46979: GO 46992
46981: POP
// bc_type := b_ext_radar ; 19 :
46982: LD_ADDR_OWVAR 42
46986: PUSH
46987: LD_INT 20
46989: ST_TO_ADDR
46990: GO 47297
46992: LD_INT 19
46994: DOUBLE
46995: EQUAL
46996: IFTRUE 47000
46998: GO 47011
47000: POP
// bc_type := b_ext_radio ; 20 :
47001: LD_ADDR_OWVAR 42
47005: PUSH
47006: LD_INT 22
47008: ST_TO_ADDR
47009: GO 47297
47011: LD_INT 20
47013: DOUBLE
47014: EQUAL
47015: IFTRUE 47019
47017: GO 47030
47019: POP
// bc_type := b_ext_siberium ; 21 :
47020: LD_ADDR_OWVAR 42
47024: PUSH
47025: LD_INT 21
47027: ST_TO_ADDR
47028: GO 47297
47030: LD_INT 21
47032: DOUBLE
47033: EQUAL
47034: IFTRUE 47038
47036: GO 47049
47038: POP
// bc_type := b_ext_computer ; 22 :
47039: LD_ADDR_OWVAR 42
47043: PUSH
47044: LD_INT 24
47046: ST_TO_ADDR
47047: GO 47297
47049: LD_INT 22
47051: DOUBLE
47052: EQUAL
47053: IFTRUE 47057
47055: GO 47068
47057: POP
// bc_type := b_ext_track ; 23 :
47058: LD_ADDR_OWVAR 42
47062: PUSH
47063: LD_INT 16
47065: ST_TO_ADDR
47066: GO 47297
47068: LD_INT 23
47070: DOUBLE
47071: EQUAL
47072: IFTRUE 47076
47074: GO 47087
47076: POP
// bc_type := b_ext_laser ; 24 :
47077: LD_ADDR_OWVAR 42
47081: PUSH
47082: LD_INT 25
47084: ST_TO_ADDR
47085: GO 47297
47087: LD_INT 24
47089: DOUBLE
47090: EQUAL
47091: IFTRUE 47095
47093: GO 47106
47095: POP
// bc_type := b_control_tower ; 25 :
47096: LD_ADDR_OWVAR 42
47100: PUSH
47101: LD_INT 36
47103: ST_TO_ADDR
47104: GO 47297
47106: LD_INT 25
47108: DOUBLE
47109: EQUAL
47110: IFTRUE 47114
47112: GO 47125
47114: POP
// bc_type := b_breastwork ; 26 :
47115: LD_ADDR_OWVAR 42
47119: PUSH
47120: LD_INT 31
47122: ST_TO_ADDR
47123: GO 47297
47125: LD_INT 26
47127: DOUBLE
47128: EQUAL
47129: IFTRUE 47133
47131: GO 47144
47133: POP
// bc_type := b_bunker ; 27 :
47134: LD_ADDR_OWVAR 42
47138: PUSH
47139: LD_INT 32
47141: ST_TO_ADDR
47142: GO 47297
47144: LD_INT 27
47146: DOUBLE
47147: EQUAL
47148: IFTRUE 47152
47150: GO 47163
47152: POP
// bc_type := b_turret ; 28 :
47153: LD_ADDR_OWVAR 42
47157: PUSH
47158: LD_INT 33
47160: ST_TO_ADDR
47161: GO 47297
47163: LD_INT 28
47165: DOUBLE
47166: EQUAL
47167: IFTRUE 47171
47169: GO 47182
47171: POP
// bc_type := b_armoury ; 29 :
47172: LD_ADDR_OWVAR 42
47176: PUSH
47177: LD_INT 4
47179: ST_TO_ADDR
47180: GO 47297
47182: LD_INT 29
47184: DOUBLE
47185: EQUAL
47186: IFTRUE 47190
47188: GO 47201
47190: POP
// bc_type := b_barracks ; 30 :
47191: LD_ADDR_OWVAR 42
47195: PUSH
47196: LD_INT 5
47198: ST_TO_ADDR
47199: GO 47297
47201: LD_INT 30
47203: DOUBLE
47204: EQUAL
47205: IFTRUE 47209
47207: GO 47220
47209: POP
// bc_type := b_solar_power ; 31 :
47210: LD_ADDR_OWVAR 42
47214: PUSH
47215: LD_INT 27
47217: ST_TO_ADDR
47218: GO 47297
47220: LD_INT 31
47222: DOUBLE
47223: EQUAL
47224: IFTRUE 47228
47226: GO 47239
47228: POP
// bc_type := b_oil_power ; 32 :
47229: LD_ADDR_OWVAR 42
47233: PUSH
47234: LD_INT 26
47236: ST_TO_ADDR
47237: GO 47297
47239: LD_INT 32
47241: DOUBLE
47242: EQUAL
47243: IFTRUE 47247
47245: GO 47258
47247: POP
// bc_type := b_siberite_power ; 33 :
47248: LD_ADDR_OWVAR 42
47252: PUSH
47253: LD_INT 28
47255: ST_TO_ADDR
47256: GO 47297
47258: LD_INT 33
47260: DOUBLE
47261: EQUAL
47262: IFTRUE 47266
47264: GO 47277
47266: POP
// bc_type := b_oil_mine ; 34 :
47267: LD_ADDR_OWVAR 42
47271: PUSH
47272: LD_INT 29
47274: ST_TO_ADDR
47275: GO 47297
47277: LD_INT 34
47279: DOUBLE
47280: EQUAL
47281: IFTRUE 47285
47283: GO 47296
47285: POP
// bc_type := b_siberite_mine ; end ;
47286: LD_ADDR_OWVAR 42
47290: PUSH
47291: LD_INT 30
47293: ST_TO_ADDR
47294: GO 47297
47296: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
47297: LD_ADDR_VAR 0 8
47301: PUSH
47302: LD_VAR 0 5
47306: PPUSH
47307: LD_VAR 0 6
47311: PPUSH
47312: LD_VAR 0 3
47316: PPUSH
47317: CALL_OW 47
47321: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
47322: LD_OWVAR 42
47326: PUSH
47327: LD_INT 32
47329: PUSH
47330: LD_INT 33
47332: PUSH
47333: EMPTY
47334: LIST
47335: LIST
47336: IN
47337: IFFALSE 47353
// PlaceWeaponTurret ( b , weapon ) ;
47339: LD_VAR 0 8
47343: PPUSH
47344: LD_VAR 0 4
47348: PPUSH
47349: CALL_OW 431
// end ;
47353: LD_VAR 0 7
47357: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
47358: LD_INT 0
47360: PPUSH
47361: PPUSH
47362: PPUSH
47363: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47364: LD_ADDR_VAR 0 4
47368: PUSH
47369: LD_INT 22
47371: PUSH
47372: LD_OWVAR 2
47376: PUSH
47377: EMPTY
47378: LIST
47379: LIST
47380: PUSH
47381: LD_INT 2
47383: PUSH
47384: LD_INT 30
47386: PUSH
47387: LD_INT 0
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 30
47396: PUSH
47397: LD_INT 1
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: LIST
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: PPUSH
47413: CALL_OW 69
47417: ST_TO_ADDR
// if not tmp then
47418: LD_VAR 0 4
47422: NOT
47423: IFFALSE 47427
// exit ;
47425: GO 47486
// for i in tmp do
47427: LD_ADDR_VAR 0 2
47431: PUSH
47432: LD_VAR 0 4
47436: PUSH
47437: FOR_IN
47438: IFFALSE 47484
// for j = 1 to 3 do
47440: LD_ADDR_VAR 0 3
47444: PUSH
47445: DOUBLE
47446: LD_INT 1
47448: DEC
47449: ST_TO_ADDR
47450: LD_INT 3
47452: PUSH
47453: FOR_TO
47454: IFFALSE 47480
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
47456: LD_VAR 0 2
47460: PPUSH
47461: CALL_OW 274
47465: PPUSH
47466: LD_VAR 0 3
47470: PPUSH
47471: LD_INT 99999
47473: PPUSH
47474: CALL_OW 277
47478: GO 47453
47480: POP
47481: POP
47482: GO 47437
47484: POP
47485: POP
// end ;
47486: LD_VAR 0 1
47490: RET
// export function hHackSetLevel10 ; var i , j ; begin
47491: LD_INT 0
47493: PPUSH
47494: PPUSH
47495: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
47496: LD_ADDR_VAR 0 2
47500: PUSH
47501: LD_INT 21
47503: PUSH
47504: LD_INT 1
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PPUSH
47511: CALL_OW 69
47515: PUSH
47516: FOR_IN
47517: IFFALSE 47569
// if IsSelected ( i ) then
47519: LD_VAR 0 2
47523: PPUSH
47524: CALL_OW 306
47528: IFFALSE 47567
// begin for j := 1 to 4 do
47530: LD_ADDR_VAR 0 3
47534: PUSH
47535: DOUBLE
47536: LD_INT 1
47538: DEC
47539: ST_TO_ADDR
47540: LD_INT 4
47542: PUSH
47543: FOR_TO
47544: IFFALSE 47565
// SetSkill ( i , j , 10 ) ;
47546: LD_VAR 0 2
47550: PPUSH
47551: LD_VAR 0 3
47555: PPUSH
47556: LD_INT 10
47558: PPUSH
47559: CALL_OW 237
47563: GO 47543
47565: POP
47566: POP
// end ;
47567: GO 47516
47569: POP
47570: POP
// end ;
47571: LD_VAR 0 1
47575: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
47576: LD_INT 0
47578: PPUSH
47579: PPUSH
47580: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
47581: LD_ADDR_VAR 0 2
47585: PUSH
47586: LD_INT 22
47588: PUSH
47589: LD_OWVAR 2
47593: PUSH
47594: EMPTY
47595: LIST
47596: LIST
47597: PUSH
47598: LD_INT 21
47600: PUSH
47601: LD_INT 1
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PPUSH
47612: CALL_OW 69
47616: PUSH
47617: FOR_IN
47618: IFFALSE 47659
// begin for j := 1 to 4 do
47620: LD_ADDR_VAR 0 3
47624: PUSH
47625: DOUBLE
47626: LD_INT 1
47628: DEC
47629: ST_TO_ADDR
47630: LD_INT 4
47632: PUSH
47633: FOR_TO
47634: IFFALSE 47655
// SetSkill ( i , j , 10 ) ;
47636: LD_VAR 0 2
47640: PPUSH
47641: LD_VAR 0 3
47645: PPUSH
47646: LD_INT 10
47648: PPUSH
47649: CALL_OW 237
47653: GO 47633
47655: POP
47656: POP
// end ;
47657: GO 47617
47659: POP
47660: POP
// end ;
47661: LD_VAR 0 1
47665: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
47666: LD_INT 0
47668: PPUSH
// uc_side := your_side ;
47669: LD_ADDR_OWVAR 20
47673: PUSH
47674: LD_OWVAR 2
47678: ST_TO_ADDR
// uc_nation := nation ;
47679: LD_ADDR_OWVAR 21
47683: PUSH
47684: LD_VAR 0 1
47688: ST_TO_ADDR
// InitHc ;
47689: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
47693: LD_INT 0
47695: PPUSH
47696: LD_VAR 0 2
47700: PPUSH
47701: LD_VAR 0 3
47705: PPUSH
47706: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
47710: LD_VAR 0 4
47714: PPUSH
47715: LD_VAR 0 5
47719: PPUSH
47720: CALL_OW 428
47724: PUSH
47725: LD_INT 0
47727: EQUAL
47728: IFFALSE 47752
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
47730: CALL_OW 44
47734: PPUSH
47735: LD_VAR 0 4
47739: PPUSH
47740: LD_VAR 0 5
47744: PPUSH
47745: LD_INT 1
47747: PPUSH
47748: CALL_OW 48
// end ;
47752: LD_VAR 0 6
47756: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
47757: LD_INT 0
47759: PPUSH
47760: PPUSH
// uc_side := your_side ;
47761: LD_ADDR_OWVAR 20
47765: PUSH
47766: LD_OWVAR 2
47770: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
47771: LD_VAR 0 1
47775: PUSH
47776: LD_INT 1
47778: PUSH
47779: LD_INT 2
47781: PUSH
47782: LD_INT 3
47784: PUSH
47785: LD_INT 4
47787: PUSH
47788: LD_INT 5
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: IN
47798: IFFALSE 47810
// uc_nation := nation_american else
47800: LD_ADDR_OWVAR 21
47804: PUSH
47805: LD_INT 1
47807: ST_TO_ADDR
47808: GO 47853
// if chassis in [ 11 , 12 , 13 , 14 ] then
47810: LD_VAR 0 1
47814: PUSH
47815: LD_INT 11
47817: PUSH
47818: LD_INT 12
47820: PUSH
47821: LD_INT 13
47823: PUSH
47824: LD_INT 14
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: LIST
47831: LIST
47832: IN
47833: IFFALSE 47845
// uc_nation := nation_arabian else
47835: LD_ADDR_OWVAR 21
47839: PUSH
47840: LD_INT 2
47842: ST_TO_ADDR
47843: GO 47853
// uc_nation := nation_russian ;
47845: LD_ADDR_OWVAR 21
47849: PUSH
47850: LD_INT 3
47852: ST_TO_ADDR
// vc_chassis := chassis ;
47853: LD_ADDR_OWVAR 37
47857: PUSH
47858: LD_VAR 0 1
47862: ST_TO_ADDR
// vc_engine := engine ;
47863: LD_ADDR_OWVAR 39
47867: PUSH
47868: LD_VAR 0 2
47872: ST_TO_ADDR
// vc_control := control ;
47873: LD_ADDR_OWVAR 38
47877: PUSH
47878: LD_VAR 0 3
47882: ST_TO_ADDR
// vc_weapon := weapon ;
47883: LD_ADDR_OWVAR 40
47887: PUSH
47888: LD_VAR 0 4
47892: ST_TO_ADDR
// un := CreateVehicle ;
47893: LD_ADDR_VAR 0 8
47897: PUSH
47898: CALL_OW 45
47902: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
47903: LD_VAR 0 8
47907: PPUSH
47908: LD_INT 0
47910: PPUSH
47911: LD_INT 5
47913: PPUSH
47914: CALL_OW 12
47918: PPUSH
47919: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
47923: LD_VAR 0 8
47927: PPUSH
47928: LD_VAR 0 5
47932: PPUSH
47933: LD_VAR 0 6
47937: PPUSH
47938: LD_INT 1
47940: PPUSH
47941: CALL_OW 48
// end ;
47945: LD_VAR 0 7
47949: RET
// export hInvincible ; every 1 do
47950: GO 47952
47952: DISABLE
// hInvincible := [ ] ;
47953: LD_ADDR_EXP 144
47957: PUSH
47958: EMPTY
47959: ST_TO_ADDR
47960: END
// every 10 do var i ;
47961: GO 47963
47963: DISABLE
47964: LD_INT 0
47966: PPUSH
// begin enable ;
47967: ENABLE
// if not hInvincible then
47968: LD_EXP 144
47972: NOT
47973: IFFALSE 47977
// exit ;
47975: GO 48021
// for i in hInvincible do
47977: LD_ADDR_VAR 0 1
47981: PUSH
47982: LD_EXP 144
47986: PUSH
47987: FOR_IN
47988: IFFALSE 48019
// if GetLives ( i ) < 1000 then
47990: LD_VAR 0 1
47994: PPUSH
47995: CALL_OW 256
47999: PUSH
48000: LD_INT 1000
48002: LESS
48003: IFFALSE 48017
// SetLives ( i , 1000 ) ;
48005: LD_VAR 0 1
48009: PPUSH
48010: LD_INT 1000
48012: PPUSH
48013: CALL_OW 234
48017: GO 47987
48019: POP
48020: POP
// end ;
48021: PPOPN 1
48023: END
// export function hHackInvincible ; var i ; begin
48024: LD_INT 0
48026: PPUSH
48027: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
48028: LD_ADDR_VAR 0 2
48032: PUSH
48033: LD_INT 2
48035: PUSH
48036: LD_INT 21
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 21
48048: PUSH
48049: LD_INT 2
48051: PUSH
48052: EMPTY
48053: LIST
48054: LIST
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: LIST
48060: PPUSH
48061: CALL_OW 69
48065: PUSH
48066: FOR_IN
48067: IFFALSE 48128
// if IsSelected ( i ) then
48069: LD_VAR 0 2
48073: PPUSH
48074: CALL_OW 306
48078: IFFALSE 48126
// begin if i in hInvincible then
48080: LD_VAR 0 2
48084: PUSH
48085: LD_EXP 144
48089: IN
48090: IFFALSE 48110
// hInvincible := hInvincible diff i else
48092: LD_ADDR_EXP 144
48096: PUSH
48097: LD_EXP 144
48101: PUSH
48102: LD_VAR 0 2
48106: DIFF
48107: ST_TO_ADDR
48108: GO 48126
// hInvincible := hInvincible union i ;
48110: LD_ADDR_EXP 144
48114: PUSH
48115: LD_EXP 144
48119: PUSH
48120: LD_VAR 0 2
48124: UNION
48125: ST_TO_ADDR
// end ;
48126: GO 48066
48128: POP
48129: POP
// end ;
48130: LD_VAR 0 1
48134: RET
// export function hHackInvisible ; var i , j ; begin
48135: LD_INT 0
48137: PPUSH
48138: PPUSH
48139: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
48140: LD_ADDR_VAR 0 2
48144: PUSH
48145: LD_INT 21
48147: PUSH
48148: LD_INT 1
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: PPUSH
48155: CALL_OW 69
48159: PUSH
48160: FOR_IN
48161: IFFALSE 48185
// if IsSelected ( i ) then
48163: LD_VAR 0 2
48167: PPUSH
48168: CALL_OW 306
48172: IFFALSE 48183
// ComForceInvisible ( i ) ;
48174: LD_VAR 0 2
48178: PPUSH
48179: CALL_OW 496
48183: GO 48160
48185: POP
48186: POP
// end ;
48187: LD_VAR 0 1
48191: RET
// export function hHackChangeYourSide ; begin
48192: LD_INT 0
48194: PPUSH
// if your_side = 8 then
48195: LD_OWVAR 2
48199: PUSH
48200: LD_INT 8
48202: EQUAL
48203: IFFALSE 48215
// your_side := 0 else
48205: LD_ADDR_OWVAR 2
48209: PUSH
48210: LD_INT 0
48212: ST_TO_ADDR
48213: GO 48229
// your_side := your_side + 1 ;
48215: LD_ADDR_OWVAR 2
48219: PUSH
48220: LD_OWVAR 2
48224: PUSH
48225: LD_INT 1
48227: PLUS
48228: ST_TO_ADDR
// end ;
48229: LD_VAR 0 1
48233: RET
// export function hHackChangeUnitSide ; var i , j ; begin
48234: LD_INT 0
48236: PPUSH
48237: PPUSH
48238: PPUSH
// for i in all_units do
48239: LD_ADDR_VAR 0 2
48243: PUSH
48244: LD_OWVAR 3
48248: PUSH
48249: FOR_IN
48250: IFFALSE 48328
// if IsSelected ( i ) then
48252: LD_VAR 0 2
48256: PPUSH
48257: CALL_OW 306
48261: IFFALSE 48326
// begin j := GetSide ( i ) ;
48263: LD_ADDR_VAR 0 3
48267: PUSH
48268: LD_VAR 0 2
48272: PPUSH
48273: CALL_OW 255
48277: ST_TO_ADDR
// if j = 8 then
48278: LD_VAR 0 3
48282: PUSH
48283: LD_INT 8
48285: EQUAL
48286: IFFALSE 48298
// j := 0 else
48288: LD_ADDR_VAR 0 3
48292: PUSH
48293: LD_INT 0
48295: ST_TO_ADDR
48296: GO 48312
// j := j + 1 ;
48298: LD_ADDR_VAR 0 3
48302: PUSH
48303: LD_VAR 0 3
48307: PUSH
48308: LD_INT 1
48310: PLUS
48311: ST_TO_ADDR
// SetSide ( i , j ) ;
48312: LD_VAR 0 2
48316: PPUSH
48317: LD_VAR 0 3
48321: PPUSH
48322: CALL_OW 235
// end ;
48326: GO 48249
48328: POP
48329: POP
// end ;
48330: LD_VAR 0 1
48334: RET
// export function hHackFog ; begin
48335: LD_INT 0
48337: PPUSH
// FogOff ( true ) ;
48338: LD_INT 1
48340: PPUSH
48341: CALL_OW 344
// end ;
48345: LD_VAR 0 1
48349: RET
// export function hHackTeleport ( unit , x , y ) ; begin
48350: LD_INT 0
48352: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
48353: LD_VAR 0 1
48357: PPUSH
48358: LD_VAR 0 2
48362: PPUSH
48363: LD_VAR 0 3
48367: PPUSH
48368: LD_INT 1
48370: PPUSH
48371: LD_INT 1
48373: PPUSH
48374: CALL_OW 483
// CenterOnXY ( x , y ) ;
48378: LD_VAR 0 2
48382: PPUSH
48383: LD_VAR 0 3
48387: PPUSH
48388: CALL_OW 84
// end ;
48392: LD_VAR 0 4
48396: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
48397: LD_INT 0
48399: PPUSH
48400: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
48401: LD_VAR 0 1
48405: NOT
48406: PUSH
48407: LD_VAR 0 2
48411: PPUSH
48412: LD_VAR 0 3
48416: PPUSH
48417: CALL_OW 488
48421: NOT
48422: OR
48423: PUSH
48424: LD_VAR 0 1
48428: PPUSH
48429: CALL_OW 266
48433: PUSH
48434: LD_INT 3
48436: NONEQUAL
48437: PUSH
48438: LD_VAR 0 1
48442: PPUSH
48443: CALL_OW 247
48447: PUSH
48448: LD_INT 1
48450: EQUAL
48451: NOT
48452: AND
48453: OR
48454: IFFALSE 48458
// exit ;
48456: GO 48607
// if GetType ( factory ) = unit_human then
48458: LD_VAR 0 1
48462: PPUSH
48463: CALL_OW 247
48467: PUSH
48468: LD_INT 1
48470: EQUAL
48471: IFFALSE 48488
// factory := IsInUnit ( factory ) ;
48473: LD_ADDR_VAR 0 1
48477: PUSH
48478: LD_VAR 0 1
48482: PPUSH
48483: CALL_OW 310
48487: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
48488: LD_VAR 0 1
48492: PPUSH
48493: CALL_OW 266
48497: PUSH
48498: LD_INT 3
48500: NONEQUAL
48501: IFFALSE 48505
// exit ;
48503: GO 48607
// if HexInfo ( x , y ) = factory then
48505: LD_VAR 0 2
48509: PPUSH
48510: LD_VAR 0 3
48514: PPUSH
48515: CALL_OW 428
48519: PUSH
48520: LD_VAR 0 1
48524: EQUAL
48525: IFFALSE 48552
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
48527: LD_ADDR_EXP 145
48531: PUSH
48532: LD_EXP 145
48536: PPUSH
48537: LD_VAR 0 1
48541: PPUSH
48542: LD_INT 0
48544: PPUSH
48545: CALL_OW 1
48549: ST_TO_ADDR
48550: GO 48603
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
48552: LD_ADDR_EXP 145
48556: PUSH
48557: LD_EXP 145
48561: PPUSH
48562: LD_VAR 0 1
48566: PPUSH
48567: LD_VAR 0 1
48571: PPUSH
48572: CALL_OW 255
48576: PUSH
48577: LD_VAR 0 1
48581: PUSH
48582: LD_VAR 0 2
48586: PUSH
48587: LD_VAR 0 3
48591: PUSH
48592: EMPTY
48593: LIST
48594: LIST
48595: LIST
48596: LIST
48597: PPUSH
48598: CALL_OW 1
48602: ST_TO_ADDR
// UpdateFactoryWaypoints ;
48603: CALL 48612 0 0
// end ;
48607: LD_VAR 0 4
48611: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
48612: LD_INT 0
48614: PPUSH
48615: PPUSH
48616: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
48617: LD_STRING resetFactoryWaypoint();
48619: PPUSH
48620: CALL_OW 559
// if factoryWaypoints then
48624: LD_EXP 145
48628: IFFALSE 48754
// begin list := PrepareArray ( factoryWaypoints ) ;
48630: LD_ADDR_VAR 0 3
48634: PUSH
48635: LD_EXP 145
48639: PPUSH
48640: CALL 95896 0 1
48644: ST_TO_ADDR
// for i := 1 to list do
48645: LD_ADDR_VAR 0 2
48649: PUSH
48650: DOUBLE
48651: LD_INT 1
48653: DEC
48654: ST_TO_ADDR
48655: LD_VAR 0 3
48659: PUSH
48660: FOR_TO
48661: IFFALSE 48752
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
48663: LD_STRING setFactoryWaypointXY(
48665: PUSH
48666: LD_VAR 0 3
48670: PUSH
48671: LD_VAR 0 2
48675: ARRAY
48676: PUSH
48677: LD_INT 1
48679: ARRAY
48680: STR
48681: PUSH
48682: LD_STRING ,
48684: STR
48685: PUSH
48686: LD_VAR 0 3
48690: PUSH
48691: LD_VAR 0 2
48695: ARRAY
48696: PUSH
48697: LD_INT 2
48699: ARRAY
48700: STR
48701: PUSH
48702: LD_STRING ,
48704: STR
48705: PUSH
48706: LD_VAR 0 3
48710: PUSH
48711: LD_VAR 0 2
48715: ARRAY
48716: PUSH
48717: LD_INT 3
48719: ARRAY
48720: STR
48721: PUSH
48722: LD_STRING ,
48724: STR
48725: PUSH
48726: LD_VAR 0 3
48730: PUSH
48731: LD_VAR 0 2
48735: ARRAY
48736: PUSH
48737: LD_INT 4
48739: ARRAY
48740: STR
48741: PUSH
48742: LD_STRING )
48744: STR
48745: PPUSH
48746: CALL_OW 559
48750: GO 48660
48752: POP
48753: POP
// end ; end ;
48754: LD_VAR 0 1
48758: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
48759: LD_INT 0
48761: PPUSH
// if HexInfo ( x , y ) = warehouse then
48762: LD_VAR 0 2
48766: PPUSH
48767: LD_VAR 0 3
48771: PPUSH
48772: CALL_OW 428
48776: PUSH
48777: LD_VAR 0 1
48781: EQUAL
48782: IFFALSE 48809
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
48784: LD_ADDR_EXP 146
48788: PUSH
48789: LD_EXP 146
48793: PPUSH
48794: LD_VAR 0 1
48798: PPUSH
48799: LD_INT 0
48801: PPUSH
48802: CALL_OW 1
48806: ST_TO_ADDR
48807: GO 48860
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
48809: LD_ADDR_EXP 146
48813: PUSH
48814: LD_EXP 146
48818: PPUSH
48819: LD_VAR 0 1
48823: PPUSH
48824: LD_VAR 0 1
48828: PPUSH
48829: CALL_OW 255
48833: PUSH
48834: LD_VAR 0 1
48838: PUSH
48839: LD_VAR 0 2
48843: PUSH
48844: LD_VAR 0 3
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: LIST
48853: LIST
48854: PPUSH
48855: CALL_OW 1
48859: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
48860: CALL 48869 0 0
// end ;
48864: LD_VAR 0 4
48868: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
48869: LD_INT 0
48871: PPUSH
48872: PPUSH
48873: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
48874: LD_STRING resetWarehouseGatheringPoints();
48876: PPUSH
48877: CALL_OW 559
// if warehouseGatheringPoints then
48881: LD_EXP 146
48885: IFFALSE 49011
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
48887: LD_ADDR_VAR 0 3
48891: PUSH
48892: LD_EXP 146
48896: PPUSH
48897: CALL 95896 0 1
48901: ST_TO_ADDR
// for i := 1 to list do
48902: LD_ADDR_VAR 0 2
48906: PUSH
48907: DOUBLE
48908: LD_INT 1
48910: DEC
48911: ST_TO_ADDR
48912: LD_VAR 0 3
48916: PUSH
48917: FOR_TO
48918: IFFALSE 49009
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
48920: LD_STRING setWarehouseGatheringPointXY(
48922: PUSH
48923: LD_VAR 0 3
48927: PUSH
48928: LD_VAR 0 2
48932: ARRAY
48933: PUSH
48934: LD_INT 1
48936: ARRAY
48937: STR
48938: PUSH
48939: LD_STRING ,
48941: STR
48942: PUSH
48943: LD_VAR 0 3
48947: PUSH
48948: LD_VAR 0 2
48952: ARRAY
48953: PUSH
48954: LD_INT 2
48956: ARRAY
48957: STR
48958: PUSH
48959: LD_STRING ,
48961: STR
48962: PUSH
48963: LD_VAR 0 3
48967: PUSH
48968: LD_VAR 0 2
48972: ARRAY
48973: PUSH
48974: LD_INT 3
48976: ARRAY
48977: STR
48978: PUSH
48979: LD_STRING ,
48981: STR
48982: PUSH
48983: LD_VAR 0 3
48987: PUSH
48988: LD_VAR 0 2
48992: ARRAY
48993: PUSH
48994: LD_INT 4
48996: ARRAY
48997: STR
48998: PUSH
48999: LD_STRING )
49001: STR
49002: PPUSH
49003: CALL_OW 559
49007: GO 48917
49009: POP
49010: POP
// end ; end ;
49011: LD_VAR 0 1
49015: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
49016: LD_EXP 146
49020: IFFALSE 49705
49022: GO 49024
49024: DISABLE
49025: LD_INT 0
49027: PPUSH
49028: PPUSH
49029: PPUSH
49030: PPUSH
49031: PPUSH
49032: PPUSH
49033: PPUSH
49034: PPUSH
49035: PPUSH
// begin enable ;
49036: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
49037: LD_ADDR_VAR 0 3
49041: PUSH
49042: LD_EXP 146
49046: PPUSH
49047: CALL 95896 0 1
49051: ST_TO_ADDR
// if not list then
49052: LD_VAR 0 3
49056: NOT
49057: IFFALSE 49061
// exit ;
49059: GO 49705
// for i := 1 to list do
49061: LD_ADDR_VAR 0 1
49065: PUSH
49066: DOUBLE
49067: LD_INT 1
49069: DEC
49070: ST_TO_ADDR
49071: LD_VAR 0 3
49075: PUSH
49076: FOR_TO
49077: IFFALSE 49703
// begin depot := list [ i ] [ 2 ] ;
49079: LD_ADDR_VAR 0 8
49083: PUSH
49084: LD_VAR 0 3
49088: PUSH
49089: LD_VAR 0 1
49093: ARRAY
49094: PUSH
49095: LD_INT 2
49097: ARRAY
49098: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
49099: LD_ADDR_VAR 0 5
49103: PUSH
49104: LD_VAR 0 3
49108: PUSH
49109: LD_VAR 0 1
49113: ARRAY
49114: PUSH
49115: LD_INT 1
49117: ARRAY
49118: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
49119: LD_VAR 0 8
49123: PPUSH
49124: CALL_OW 301
49128: PUSH
49129: LD_VAR 0 5
49133: PUSH
49134: LD_VAR 0 8
49138: PPUSH
49139: CALL_OW 255
49143: NONEQUAL
49144: OR
49145: IFFALSE 49174
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
49147: LD_ADDR_EXP 146
49151: PUSH
49152: LD_EXP 146
49156: PPUSH
49157: LD_VAR 0 8
49161: PPUSH
49162: LD_INT 0
49164: PPUSH
49165: CALL_OW 1
49169: ST_TO_ADDR
// exit ;
49170: POP
49171: POP
49172: GO 49705
// end ; x := list [ i ] [ 3 ] ;
49174: LD_ADDR_VAR 0 6
49178: PUSH
49179: LD_VAR 0 3
49183: PUSH
49184: LD_VAR 0 1
49188: ARRAY
49189: PUSH
49190: LD_INT 3
49192: ARRAY
49193: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
49194: LD_ADDR_VAR 0 7
49198: PUSH
49199: LD_VAR 0 3
49203: PUSH
49204: LD_VAR 0 1
49208: ARRAY
49209: PUSH
49210: LD_INT 4
49212: ARRAY
49213: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
49214: LD_ADDR_VAR 0 9
49218: PUSH
49219: LD_VAR 0 6
49223: PPUSH
49224: LD_VAR 0 7
49228: PPUSH
49229: LD_INT 16
49231: PPUSH
49232: CALL 94484 0 3
49236: ST_TO_ADDR
// if not cratesNearbyPoint then
49237: LD_VAR 0 9
49241: NOT
49242: IFFALSE 49248
// exit ;
49244: POP
49245: POP
49246: GO 49705
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
49248: LD_ADDR_VAR 0 4
49252: PUSH
49253: LD_INT 22
49255: PUSH
49256: LD_VAR 0 5
49260: PUSH
49261: EMPTY
49262: LIST
49263: LIST
49264: PUSH
49265: LD_INT 3
49267: PUSH
49268: LD_INT 60
49270: PUSH
49271: EMPTY
49272: LIST
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 91
49280: PUSH
49281: LD_VAR 0 8
49285: PUSH
49286: LD_INT 6
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 2
49296: PUSH
49297: LD_INT 25
49299: PUSH
49300: LD_INT 2
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 25
49309: PUSH
49310: LD_INT 16
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: LIST
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: PPUSH
49328: CALL_OW 69
49332: PUSH
49333: LD_VAR 0 8
49337: PPUSH
49338: CALL_OW 313
49342: PPUSH
49343: LD_INT 3
49345: PUSH
49346: LD_INT 60
49348: PUSH
49349: EMPTY
49350: LIST
49351: PUSH
49352: EMPTY
49353: LIST
49354: LIST
49355: PUSH
49356: LD_INT 2
49358: PUSH
49359: LD_INT 25
49361: PUSH
49362: LD_INT 2
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 25
49371: PUSH
49372: LD_INT 16
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: EMPTY
49380: LIST
49381: LIST
49382: LIST
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PPUSH
49388: CALL_OW 72
49392: UNION
49393: ST_TO_ADDR
// if tmp then
49394: LD_VAR 0 4
49398: IFFALSE 49478
// begin tmp := ShrinkArray ( tmp , 3 ) ;
49400: LD_ADDR_VAR 0 4
49404: PUSH
49405: LD_VAR 0 4
49409: PPUSH
49410: LD_INT 3
49412: PPUSH
49413: CALL 92453 0 2
49417: ST_TO_ADDR
// for j in tmp do
49418: LD_ADDR_VAR 0 2
49422: PUSH
49423: LD_VAR 0 4
49427: PUSH
49428: FOR_IN
49429: IFFALSE 49472
// begin if IsInUnit ( j ) then
49431: LD_VAR 0 2
49435: PPUSH
49436: CALL_OW 310
49440: IFFALSE 49451
// ComExit ( j ) ;
49442: LD_VAR 0 2
49446: PPUSH
49447: CALL 92536 0 1
// AddComCollect ( j , x , y ) ;
49451: LD_VAR 0 2
49455: PPUSH
49456: LD_VAR 0 6
49460: PPUSH
49461: LD_VAR 0 7
49465: PPUSH
49466: CALL_OW 177
// end ;
49470: GO 49428
49472: POP
49473: POP
// exit ;
49474: POP
49475: POP
49476: GO 49705
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
49478: LD_ADDR_VAR 0 4
49482: PUSH
49483: LD_INT 22
49485: PUSH
49486: LD_VAR 0 5
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 91
49497: PUSH
49498: LD_VAR 0 8
49502: PUSH
49503: LD_INT 8
49505: PUSH
49506: EMPTY
49507: LIST
49508: LIST
49509: LIST
49510: PUSH
49511: LD_INT 2
49513: PUSH
49514: LD_INT 34
49516: PUSH
49517: LD_INT 12
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 34
49526: PUSH
49527: LD_INT 51
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 34
49536: PUSH
49537: LD_INT 32
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 34
49546: PUSH
49547: LD_INT 89
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: LIST
49560: PUSH
49561: EMPTY
49562: LIST
49563: LIST
49564: LIST
49565: PPUSH
49566: CALL_OW 69
49570: ST_TO_ADDR
// if tmp then
49571: LD_VAR 0 4
49575: IFFALSE 49701
// begin for j in tmp do
49577: LD_ADDR_VAR 0 2
49581: PUSH
49582: LD_VAR 0 4
49586: PUSH
49587: FOR_IN
49588: IFFALSE 49699
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
49590: LD_VAR 0 2
49594: PPUSH
49595: CALL_OW 262
49599: PUSH
49600: LD_INT 3
49602: EQUAL
49603: PUSH
49604: LD_VAR 0 2
49608: PPUSH
49609: CALL_OW 261
49613: PUSH
49614: LD_INT 20
49616: GREATER
49617: OR
49618: PUSH
49619: LD_VAR 0 2
49623: PPUSH
49624: CALL_OW 314
49628: NOT
49629: AND
49630: PUSH
49631: LD_VAR 0 2
49635: PPUSH
49636: CALL_OW 263
49640: PUSH
49641: LD_INT 1
49643: NONEQUAL
49644: PUSH
49645: LD_VAR 0 2
49649: PPUSH
49650: CALL_OW 311
49654: OR
49655: AND
49656: IFFALSE 49697
// begin ComCollect ( j , x , y ) ;
49658: LD_VAR 0 2
49662: PPUSH
49663: LD_VAR 0 6
49667: PPUSH
49668: LD_VAR 0 7
49672: PPUSH
49673: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
49677: LD_VAR 0 2
49681: PPUSH
49682: LD_VAR 0 8
49686: PPUSH
49687: CALL_OW 172
// exit ;
49691: POP
49692: POP
49693: POP
49694: POP
49695: GO 49705
// end ;
49697: GO 49587
49699: POP
49700: POP
// end ; end ;
49701: GO 49076
49703: POP
49704: POP
// end ; end_of_file
49705: PPOPN 9
49707: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
49708: LD_INT 0
49710: PPUSH
49711: PPUSH
49712: PPUSH
49713: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
49714: LD_VAR 0 1
49718: PPUSH
49719: CALL_OW 264
49723: PUSH
49724: LD_INT 91
49726: EQUAL
49727: IFFALSE 49799
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
49729: LD_INT 68
49731: PPUSH
49732: LD_VAR 0 1
49736: PPUSH
49737: CALL_OW 255
49741: PPUSH
49742: CALL_OW 321
49746: PUSH
49747: LD_INT 2
49749: EQUAL
49750: IFFALSE 49762
// eff := 70 else
49752: LD_ADDR_VAR 0 4
49756: PUSH
49757: LD_INT 70
49759: ST_TO_ADDR
49760: GO 49770
// eff := 30 ;
49762: LD_ADDR_VAR 0 4
49766: PUSH
49767: LD_INT 30
49769: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
49770: LD_VAR 0 1
49774: PPUSH
49775: CALL_OW 250
49779: PPUSH
49780: LD_VAR 0 1
49784: PPUSH
49785: CALL_OW 251
49789: PPUSH
49790: LD_VAR 0 4
49794: PPUSH
49795: CALL_OW 495
// end ; end ;
49799: LD_VAR 0 2
49803: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
49804: LD_INT 0
49806: PPUSH
// end ;
49807: LD_VAR 0 4
49811: RET
// export function SOS_Command ( cmd ) ; begin
49812: LD_INT 0
49814: PPUSH
// end ;
49815: LD_VAR 0 2
49819: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
49820: LD_INT 0
49822: PPUSH
// end ;
49823: LD_VAR 0 6
49827: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
49828: LD_INT 0
49830: PPUSH
49831: PPUSH
// if not vehicle or not factory then
49832: LD_VAR 0 1
49836: NOT
49837: PUSH
49838: LD_VAR 0 2
49842: NOT
49843: OR
49844: IFFALSE 49848
// exit ;
49846: GO 50079
// if factoryWaypoints >= factory then
49848: LD_EXP 145
49852: PUSH
49853: LD_VAR 0 2
49857: GREATEREQUAL
49858: IFFALSE 50079
// if factoryWaypoints [ factory ] then
49860: LD_EXP 145
49864: PUSH
49865: LD_VAR 0 2
49869: ARRAY
49870: IFFALSE 50079
// begin if GetControl ( vehicle ) = control_manual then
49872: LD_VAR 0 1
49876: PPUSH
49877: CALL_OW 263
49881: PUSH
49882: LD_INT 1
49884: EQUAL
49885: IFFALSE 49966
// begin driver := IsDrivenBy ( vehicle ) ;
49887: LD_ADDR_VAR 0 4
49891: PUSH
49892: LD_VAR 0 1
49896: PPUSH
49897: CALL_OW 311
49901: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
49902: LD_VAR 0 4
49906: PPUSH
49907: LD_EXP 145
49911: PUSH
49912: LD_VAR 0 2
49916: ARRAY
49917: PUSH
49918: LD_INT 3
49920: ARRAY
49921: PPUSH
49922: LD_EXP 145
49926: PUSH
49927: LD_VAR 0 2
49931: ARRAY
49932: PUSH
49933: LD_INT 4
49935: ARRAY
49936: PPUSH
49937: CALL_OW 171
// AddComExitVehicle ( driver ) ;
49941: LD_VAR 0 4
49945: PPUSH
49946: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
49950: LD_VAR 0 4
49954: PPUSH
49955: LD_VAR 0 2
49959: PPUSH
49960: CALL_OW 180
// end else
49964: GO 50079
// if GetControl ( vehicle ) = control_remote then
49966: LD_VAR 0 1
49970: PPUSH
49971: CALL_OW 263
49975: PUSH
49976: LD_INT 2
49978: EQUAL
49979: IFFALSE 50040
// begin wait ( 0 0$2 ) ;
49981: LD_INT 70
49983: PPUSH
49984: CALL_OW 67
// if Connect ( vehicle ) then
49988: LD_VAR 0 1
49992: PPUSH
49993: CALL 62744 0 1
49997: IFFALSE 50038
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
49999: LD_VAR 0 1
50003: PPUSH
50004: LD_EXP 145
50008: PUSH
50009: LD_VAR 0 2
50013: ARRAY
50014: PUSH
50015: LD_INT 3
50017: ARRAY
50018: PPUSH
50019: LD_EXP 145
50023: PUSH
50024: LD_VAR 0 2
50028: ARRAY
50029: PUSH
50030: LD_INT 4
50032: ARRAY
50033: PPUSH
50034: CALL_OW 171
// end else
50038: GO 50079
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
50040: LD_VAR 0 1
50044: PPUSH
50045: LD_EXP 145
50049: PUSH
50050: LD_VAR 0 2
50054: ARRAY
50055: PUSH
50056: LD_INT 3
50058: ARRAY
50059: PPUSH
50060: LD_EXP 145
50064: PUSH
50065: LD_VAR 0 2
50069: ARRAY
50070: PUSH
50071: LD_INT 4
50073: ARRAY
50074: PPUSH
50075: CALL_OW 171
// end ; end ;
50079: LD_VAR 0 3
50083: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
50084: LD_INT 0
50086: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
50087: LD_VAR 0 1
50091: PUSH
50092: LD_INT 250
50094: EQUAL
50095: PUSH
50096: LD_VAR 0 2
50100: PPUSH
50101: CALL_OW 264
50105: PUSH
50106: LD_INT 81
50108: EQUAL
50109: AND
50110: IFFALSE 50131
// MinerPlaceMine ( unit , x , y ) ;
50112: LD_VAR 0 2
50116: PPUSH
50117: LD_VAR 0 4
50121: PPUSH
50122: LD_VAR 0 5
50126: PPUSH
50127: CALL 52955 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
50131: LD_VAR 0 1
50135: PUSH
50136: LD_INT 251
50138: EQUAL
50139: PUSH
50140: LD_VAR 0 2
50144: PPUSH
50145: CALL_OW 264
50149: PUSH
50150: LD_INT 81
50152: EQUAL
50153: AND
50154: IFFALSE 50175
// MinerDetonateMine ( unit , x , y ) ;
50156: LD_VAR 0 2
50160: PPUSH
50161: LD_VAR 0 4
50165: PPUSH
50166: LD_VAR 0 5
50170: PPUSH
50171: CALL 53230 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
50175: LD_VAR 0 1
50179: PUSH
50180: LD_INT 252
50182: EQUAL
50183: PUSH
50184: LD_VAR 0 2
50188: PPUSH
50189: CALL_OW 264
50193: PUSH
50194: LD_INT 81
50196: EQUAL
50197: AND
50198: IFFALSE 50219
// MinerCreateMinefield ( unit , x , y ) ;
50200: LD_VAR 0 2
50204: PPUSH
50205: LD_VAR 0 4
50209: PPUSH
50210: LD_VAR 0 5
50214: PPUSH
50215: CALL 53647 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
50219: LD_VAR 0 1
50223: PUSH
50224: LD_INT 253
50226: EQUAL
50227: PUSH
50228: LD_VAR 0 2
50232: PPUSH
50233: CALL_OW 257
50237: PUSH
50238: LD_INT 5
50240: EQUAL
50241: AND
50242: IFFALSE 50263
// ComBinocular ( unit , x , y ) ;
50244: LD_VAR 0 2
50248: PPUSH
50249: LD_VAR 0 4
50253: PPUSH
50254: LD_VAR 0 5
50258: PPUSH
50259: CALL 54016 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
50263: LD_VAR 0 1
50267: PUSH
50268: LD_INT 254
50270: EQUAL
50271: PUSH
50272: LD_VAR 0 2
50276: PPUSH
50277: CALL_OW 264
50281: PUSH
50282: LD_INT 99
50284: EQUAL
50285: AND
50286: PUSH
50287: LD_VAR 0 3
50291: PPUSH
50292: CALL_OW 263
50296: PUSH
50297: LD_INT 3
50299: EQUAL
50300: AND
50301: IFFALSE 50317
// HackDestroyVehicle ( unit , selectedUnit ) ;
50303: LD_VAR 0 2
50307: PPUSH
50308: LD_VAR 0 3
50312: PPUSH
50313: CALL 52319 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
50317: LD_VAR 0 1
50321: PUSH
50322: LD_INT 255
50324: EQUAL
50325: PUSH
50326: LD_VAR 0 2
50330: PPUSH
50331: CALL_OW 264
50335: PUSH
50336: LD_INT 14
50338: PUSH
50339: LD_INT 53
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: IN
50346: AND
50347: PUSH
50348: LD_VAR 0 4
50352: PPUSH
50353: LD_VAR 0 5
50357: PPUSH
50358: CALL_OW 488
50362: AND
50363: IFFALSE 50387
// CutTreeXYR ( unit , x , y , 12 ) ;
50365: LD_VAR 0 2
50369: PPUSH
50370: LD_VAR 0 4
50374: PPUSH
50375: LD_VAR 0 5
50379: PPUSH
50380: LD_INT 12
50382: PPUSH
50383: CALL 50482 0 4
// if cmd = 256 then
50387: LD_VAR 0 1
50391: PUSH
50392: LD_INT 256
50394: EQUAL
50395: IFFALSE 50416
// SetFactoryWaypoint ( unit , x , y ) ;
50397: LD_VAR 0 2
50401: PPUSH
50402: LD_VAR 0 4
50406: PPUSH
50407: LD_VAR 0 5
50411: PPUSH
50412: CALL 48397 0 3
// if cmd = 257 then
50416: LD_VAR 0 1
50420: PUSH
50421: LD_INT 257
50423: EQUAL
50424: IFFALSE 50445
// SetWarehouseGatheringPoint ( unit , x , y ) ;
50426: LD_VAR 0 2
50430: PPUSH
50431: LD_VAR 0 4
50435: PPUSH
50436: LD_VAR 0 5
50440: PPUSH
50441: CALL 48759 0 3
// if cmd = 258 then
50445: LD_VAR 0 1
50449: PUSH
50450: LD_INT 258
50452: EQUAL
50453: IFFALSE 50477
// BurnTreeXYR ( unit , x , y , 8 ) ;
50455: LD_VAR 0 2
50459: PPUSH
50460: LD_VAR 0 4
50464: PPUSH
50465: LD_VAR 0 5
50469: PPUSH
50470: LD_INT 8
50472: PPUSH
50473: CALL 50876 0 4
// end ;
50477: LD_VAR 0 6
50481: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
50482: LD_INT 0
50484: PPUSH
50485: PPUSH
50486: PPUSH
50487: PPUSH
50488: PPUSH
50489: PPUSH
50490: PPUSH
50491: PPUSH
50492: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
50493: LD_VAR 0 1
50497: PPUSH
50498: CALL_OW 302
50502: NOT
50503: PUSH
50504: LD_VAR 0 2
50508: PPUSH
50509: LD_VAR 0 3
50513: PPUSH
50514: CALL_OW 488
50518: NOT
50519: OR
50520: PUSH
50521: LD_VAR 0 4
50525: NOT
50526: OR
50527: IFFALSE 50531
// exit ;
50529: GO 50871
// list := [ ] ;
50531: LD_ADDR_VAR 0 13
50535: PUSH
50536: EMPTY
50537: ST_TO_ADDR
// if x - r < 0 then
50538: LD_VAR 0 2
50542: PUSH
50543: LD_VAR 0 4
50547: MINUS
50548: PUSH
50549: LD_INT 0
50551: LESS
50552: IFFALSE 50564
// min_x := 0 else
50554: LD_ADDR_VAR 0 7
50558: PUSH
50559: LD_INT 0
50561: ST_TO_ADDR
50562: GO 50580
// min_x := x - r ;
50564: LD_ADDR_VAR 0 7
50568: PUSH
50569: LD_VAR 0 2
50573: PUSH
50574: LD_VAR 0 4
50578: MINUS
50579: ST_TO_ADDR
// if y - r < 0 then
50580: LD_VAR 0 3
50584: PUSH
50585: LD_VAR 0 4
50589: MINUS
50590: PUSH
50591: LD_INT 0
50593: LESS
50594: IFFALSE 50606
// min_y := 0 else
50596: LD_ADDR_VAR 0 8
50600: PUSH
50601: LD_INT 0
50603: ST_TO_ADDR
50604: GO 50622
// min_y := y - r ;
50606: LD_ADDR_VAR 0 8
50610: PUSH
50611: LD_VAR 0 3
50615: PUSH
50616: LD_VAR 0 4
50620: MINUS
50621: ST_TO_ADDR
// max_x := x + r ;
50622: LD_ADDR_VAR 0 9
50626: PUSH
50627: LD_VAR 0 2
50631: PUSH
50632: LD_VAR 0 4
50636: PLUS
50637: ST_TO_ADDR
// max_y := y + r ;
50638: LD_ADDR_VAR 0 10
50642: PUSH
50643: LD_VAR 0 3
50647: PUSH
50648: LD_VAR 0 4
50652: PLUS
50653: ST_TO_ADDR
// for _x = min_x to max_x do
50654: LD_ADDR_VAR 0 11
50658: PUSH
50659: DOUBLE
50660: LD_VAR 0 7
50664: DEC
50665: ST_TO_ADDR
50666: LD_VAR 0 9
50670: PUSH
50671: FOR_TO
50672: IFFALSE 50789
// for _y = min_y to max_y do
50674: LD_ADDR_VAR 0 12
50678: PUSH
50679: DOUBLE
50680: LD_VAR 0 8
50684: DEC
50685: ST_TO_ADDR
50686: LD_VAR 0 10
50690: PUSH
50691: FOR_TO
50692: IFFALSE 50785
// begin if not ValidHex ( _x , _y ) then
50694: LD_VAR 0 11
50698: PPUSH
50699: LD_VAR 0 12
50703: PPUSH
50704: CALL_OW 488
50708: NOT
50709: IFFALSE 50713
// continue ;
50711: GO 50691
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
50713: LD_VAR 0 11
50717: PPUSH
50718: LD_VAR 0 12
50722: PPUSH
50723: CALL_OW 351
50727: PUSH
50728: LD_VAR 0 11
50732: PPUSH
50733: LD_VAR 0 12
50737: PPUSH
50738: CALL_OW 554
50742: AND
50743: IFFALSE 50783
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
50745: LD_ADDR_VAR 0 13
50749: PUSH
50750: LD_VAR 0 13
50754: PPUSH
50755: LD_VAR 0 13
50759: PUSH
50760: LD_INT 1
50762: PLUS
50763: PPUSH
50764: LD_VAR 0 11
50768: PUSH
50769: LD_VAR 0 12
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: PPUSH
50778: CALL_OW 2
50782: ST_TO_ADDR
// end ;
50783: GO 50691
50785: POP
50786: POP
50787: GO 50671
50789: POP
50790: POP
// if not list then
50791: LD_VAR 0 13
50795: NOT
50796: IFFALSE 50800
// exit ;
50798: GO 50871
// for i in list do
50800: LD_ADDR_VAR 0 6
50804: PUSH
50805: LD_VAR 0 13
50809: PUSH
50810: FOR_IN
50811: IFFALSE 50869
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
50813: LD_VAR 0 1
50817: PPUSH
50818: LD_STRING M
50820: PUSH
50821: LD_VAR 0 6
50825: PUSH
50826: LD_INT 1
50828: ARRAY
50829: PUSH
50830: LD_VAR 0 6
50834: PUSH
50835: LD_INT 2
50837: ARRAY
50838: PUSH
50839: LD_INT 0
50841: PUSH
50842: LD_INT 0
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: LD_INT 0
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: PUSH
50860: EMPTY
50861: LIST
50862: PPUSH
50863: CALL_OW 447
50867: GO 50810
50869: POP
50870: POP
// end ;
50871: LD_VAR 0 5
50875: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
50876: LD_INT 0
50878: PPUSH
50879: PPUSH
50880: PPUSH
50881: PPUSH
50882: PPUSH
50883: PPUSH
50884: PPUSH
50885: PPUSH
50886: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
50887: LD_VAR 0 1
50891: PPUSH
50892: CALL_OW 302
50896: NOT
50897: PUSH
50898: LD_VAR 0 2
50902: PPUSH
50903: LD_VAR 0 3
50907: PPUSH
50908: CALL_OW 488
50912: NOT
50913: OR
50914: PUSH
50915: LD_VAR 0 4
50919: NOT
50920: OR
50921: IFFALSE 50925
// exit ;
50923: GO 51273
// list := [ ] ;
50925: LD_ADDR_VAR 0 13
50929: PUSH
50930: EMPTY
50931: ST_TO_ADDR
// if x - r < 0 then
50932: LD_VAR 0 2
50936: PUSH
50937: LD_VAR 0 4
50941: MINUS
50942: PUSH
50943: LD_INT 0
50945: LESS
50946: IFFALSE 50958
// min_x := 0 else
50948: LD_ADDR_VAR 0 7
50952: PUSH
50953: LD_INT 0
50955: ST_TO_ADDR
50956: GO 50974
// min_x := x - r ;
50958: LD_ADDR_VAR 0 7
50962: PUSH
50963: LD_VAR 0 2
50967: PUSH
50968: LD_VAR 0 4
50972: MINUS
50973: ST_TO_ADDR
// if y - r < 0 then
50974: LD_VAR 0 3
50978: PUSH
50979: LD_VAR 0 4
50983: MINUS
50984: PUSH
50985: LD_INT 0
50987: LESS
50988: IFFALSE 51000
// min_y := 0 else
50990: LD_ADDR_VAR 0 8
50994: PUSH
50995: LD_INT 0
50997: ST_TO_ADDR
50998: GO 51016
// min_y := y - r ;
51000: LD_ADDR_VAR 0 8
51004: PUSH
51005: LD_VAR 0 3
51009: PUSH
51010: LD_VAR 0 4
51014: MINUS
51015: ST_TO_ADDR
// max_x := x + r ;
51016: LD_ADDR_VAR 0 9
51020: PUSH
51021: LD_VAR 0 2
51025: PUSH
51026: LD_VAR 0 4
51030: PLUS
51031: ST_TO_ADDR
// max_y := y + r ;
51032: LD_ADDR_VAR 0 10
51036: PUSH
51037: LD_VAR 0 3
51041: PUSH
51042: LD_VAR 0 4
51046: PLUS
51047: ST_TO_ADDR
// for _x = min_x to max_x do
51048: LD_ADDR_VAR 0 11
51052: PUSH
51053: DOUBLE
51054: LD_VAR 0 7
51058: DEC
51059: ST_TO_ADDR
51060: LD_VAR 0 9
51064: PUSH
51065: FOR_TO
51066: IFFALSE 51183
// for _y = min_y to max_y do
51068: LD_ADDR_VAR 0 12
51072: PUSH
51073: DOUBLE
51074: LD_VAR 0 8
51078: DEC
51079: ST_TO_ADDR
51080: LD_VAR 0 10
51084: PUSH
51085: FOR_TO
51086: IFFALSE 51179
// begin if not ValidHex ( _x , _y ) then
51088: LD_VAR 0 11
51092: PPUSH
51093: LD_VAR 0 12
51097: PPUSH
51098: CALL_OW 488
51102: NOT
51103: IFFALSE 51107
// continue ;
51105: GO 51085
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
51107: LD_VAR 0 11
51111: PPUSH
51112: LD_VAR 0 12
51116: PPUSH
51117: CALL_OW 351
51121: PUSH
51122: LD_VAR 0 11
51126: PPUSH
51127: LD_VAR 0 12
51131: PPUSH
51132: CALL_OW 554
51136: AND
51137: IFFALSE 51177
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
51139: LD_ADDR_VAR 0 13
51143: PUSH
51144: LD_VAR 0 13
51148: PPUSH
51149: LD_VAR 0 13
51153: PUSH
51154: LD_INT 1
51156: PLUS
51157: PPUSH
51158: LD_VAR 0 11
51162: PUSH
51163: LD_VAR 0 12
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PPUSH
51172: CALL_OW 2
51176: ST_TO_ADDR
// end ;
51177: GO 51085
51179: POP
51180: POP
51181: GO 51065
51183: POP
51184: POP
// if not list then
51185: LD_VAR 0 13
51189: NOT
51190: IFFALSE 51194
// exit ;
51192: GO 51273
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
51194: LD_ADDR_VAR 0 13
51198: PUSH
51199: LD_VAR 0 1
51203: PPUSH
51204: LD_VAR 0 13
51208: PPUSH
51209: LD_INT 1
51211: PPUSH
51212: LD_INT 1
51214: PPUSH
51215: CALL 59886 0 4
51219: ST_TO_ADDR
// ComStop ( flame ) ;
51220: LD_VAR 0 1
51224: PPUSH
51225: CALL_OW 141
// for i in list do
51229: LD_ADDR_VAR 0 6
51233: PUSH
51234: LD_VAR 0 13
51238: PUSH
51239: FOR_IN
51240: IFFALSE 51271
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
51242: LD_VAR 0 1
51246: PPUSH
51247: LD_VAR 0 6
51251: PUSH
51252: LD_INT 1
51254: ARRAY
51255: PPUSH
51256: LD_VAR 0 6
51260: PUSH
51261: LD_INT 2
51263: ARRAY
51264: PPUSH
51265: CALL_OW 176
51269: GO 51239
51271: POP
51272: POP
// end ;
51273: LD_VAR 0 5
51277: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
51278: LD_EXP 148
51282: NOT
51283: IFFALSE 51333
51285: GO 51287
51287: DISABLE
// begin initHack := true ;
51288: LD_ADDR_EXP 148
51292: PUSH
51293: LD_INT 1
51295: ST_TO_ADDR
// hackTanks := [ ] ;
51296: LD_ADDR_EXP 149
51300: PUSH
51301: EMPTY
51302: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
51303: LD_ADDR_EXP 150
51307: PUSH
51308: EMPTY
51309: ST_TO_ADDR
// hackLimit := 3 ;
51310: LD_ADDR_EXP 151
51314: PUSH
51315: LD_INT 3
51317: ST_TO_ADDR
// hackDist := 12 ;
51318: LD_ADDR_EXP 152
51322: PUSH
51323: LD_INT 12
51325: ST_TO_ADDR
// hackCounter := [ ] ;
51326: LD_ADDR_EXP 153
51330: PUSH
51331: EMPTY
51332: ST_TO_ADDR
// end ;
51333: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
51334: LD_EXP 148
51338: PUSH
51339: LD_INT 34
51341: PUSH
51342: LD_INT 99
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PPUSH
51349: CALL_OW 69
51353: AND
51354: IFFALSE 51607
51356: GO 51358
51358: DISABLE
51359: LD_INT 0
51361: PPUSH
51362: PPUSH
// begin enable ;
51363: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
51364: LD_ADDR_VAR 0 1
51368: PUSH
51369: LD_INT 34
51371: PUSH
51372: LD_INT 99
51374: PUSH
51375: EMPTY
51376: LIST
51377: LIST
51378: PPUSH
51379: CALL_OW 69
51383: PUSH
51384: FOR_IN
51385: IFFALSE 51605
// begin if not i in hackTanks then
51387: LD_VAR 0 1
51391: PUSH
51392: LD_EXP 149
51396: IN
51397: NOT
51398: IFFALSE 51481
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
51400: LD_ADDR_EXP 149
51404: PUSH
51405: LD_EXP 149
51409: PPUSH
51410: LD_EXP 149
51414: PUSH
51415: LD_INT 1
51417: PLUS
51418: PPUSH
51419: LD_VAR 0 1
51423: PPUSH
51424: CALL_OW 1
51428: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
51429: LD_ADDR_EXP 150
51433: PUSH
51434: LD_EXP 150
51438: PPUSH
51439: LD_EXP 150
51443: PUSH
51444: LD_INT 1
51446: PLUS
51447: PPUSH
51448: EMPTY
51449: PPUSH
51450: CALL_OW 1
51454: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
51455: LD_ADDR_EXP 153
51459: PUSH
51460: LD_EXP 153
51464: PPUSH
51465: LD_EXP 153
51469: PUSH
51470: LD_INT 1
51472: PLUS
51473: PPUSH
51474: EMPTY
51475: PPUSH
51476: CALL_OW 1
51480: ST_TO_ADDR
// end ; if not IsOk ( i ) then
51481: LD_VAR 0 1
51485: PPUSH
51486: CALL_OW 302
51490: NOT
51491: IFFALSE 51504
// begin HackUnlinkAll ( i ) ;
51493: LD_VAR 0 1
51497: PPUSH
51498: CALL 51610 0 1
// continue ;
51502: GO 51384
// end ; HackCheckCapturedStatus ( i ) ;
51504: LD_VAR 0 1
51508: PPUSH
51509: CALL 52053 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
51513: LD_ADDR_VAR 0 2
51517: PUSH
51518: LD_INT 81
51520: PUSH
51521: LD_VAR 0 1
51525: PPUSH
51526: CALL_OW 255
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 33
51537: PUSH
51538: LD_INT 3
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 91
51547: PUSH
51548: LD_VAR 0 1
51552: PUSH
51553: LD_EXP 152
51557: PUSH
51558: EMPTY
51559: LIST
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 50
51565: PUSH
51566: EMPTY
51567: LIST
51568: PUSH
51569: EMPTY
51570: LIST
51571: LIST
51572: LIST
51573: LIST
51574: PPUSH
51575: CALL_OW 69
51579: ST_TO_ADDR
// if not tmp then
51580: LD_VAR 0 2
51584: NOT
51585: IFFALSE 51589
// continue ;
51587: GO 51384
// HackLink ( i , tmp ) ;
51589: LD_VAR 0 1
51593: PPUSH
51594: LD_VAR 0 2
51598: PPUSH
51599: CALL 51746 0 2
// end ;
51603: GO 51384
51605: POP
51606: POP
// end ;
51607: PPOPN 2
51609: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
51610: LD_INT 0
51612: PPUSH
51613: PPUSH
51614: PPUSH
// if not hack in hackTanks then
51615: LD_VAR 0 1
51619: PUSH
51620: LD_EXP 149
51624: IN
51625: NOT
51626: IFFALSE 51630
// exit ;
51628: GO 51741
// index := GetElementIndex ( hackTanks , hack ) ;
51630: LD_ADDR_VAR 0 4
51634: PUSH
51635: LD_EXP 149
51639: PPUSH
51640: LD_VAR 0 1
51644: PPUSH
51645: CALL 59183 0 2
51649: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
51650: LD_EXP 150
51654: PUSH
51655: LD_VAR 0 4
51659: ARRAY
51660: IFFALSE 51741
// begin for i in hackTanksCaptured [ index ] do
51662: LD_ADDR_VAR 0 3
51666: PUSH
51667: LD_EXP 150
51671: PUSH
51672: LD_VAR 0 4
51676: ARRAY
51677: PUSH
51678: FOR_IN
51679: IFFALSE 51705
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
51681: LD_VAR 0 3
51685: PUSH
51686: LD_INT 1
51688: ARRAY
51689: PPUSH
51690: LD_VAR 0 3
51694: PUSH
51695: LD_INT 2
51697: ARRAY
51698: PPUSH
51699: CALL_OW 235
51703: GO 51678
51705: POP
51706: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
51707: LD_ADDR_EXP 150
51711: PUSH
51712: LD_EXP 150
51716: PPUSH
51717: LD_VAR 0 4
51721: PPUSH
51722: EMPTY
51723: PPUSH
51724: CALL_OW 1
51728: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
51729: LD_VAR 0 1
51733: PPUSH
51734: LD_INT 0
51736: PPUSH
51737: CALL_OW 505
// end ; end ;
51741: LD_VAR 0 2
51745: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
51746: LD_INT 0
51748: PPUSH
51749: PPUSH
51750: PPUSH
// if not hack in hackTanks or not vehicles then
51751: LD_VAR 0 1
51755: PUSH
51756: LD_EXP 149
51760: IN
51761: NOT
51762: PUSH
51763: LD_VAR 0 2
51767: NOT
51768: OR
51769: IFFALSE 51773
// exit ;
51771: GO 52048
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
51773: LD_ADDR_VAR 0 2
51777: PUSH
51778: LD_VAR 0 1
51782: PPUSH
51783: LD_VAR 0 2
51787: PPUSH
51788: LD_INT 1
51790: PPUSH
51791: LD_INT 1
51793: PPUSH
51794: CALL 59833 0 4
51798: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
51799: LD_ADDR_VAR 0 5
51803: PUSH
51804: LD_EXP 149
51808: PPUSH
51809: LD_VAR 0 1
51813: PPUSH
51814: CALL 59183 0 2
51818: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
51819: LD_EXP 150
51823: PUSH
51824: LD_VAR 0 5
51828: ARRAY
51829: PUSH
51830: LD_EXP 151
51834: LESS
51835: IFFALSE 52024
// begin for i := 1 to vehicles do
51837: LD_ADDR_VAR 0 4
51841: PUSH
51842: DOUBLE
51843: LD_INT 1
51845: DEC
51846: ST_TO_ADDR
51847: LD_VAR 0 2
51851: PUSH
51852: FOR_TO
51853: IFFALSE 52022
// begin if hackTanksCaptured [ index ] = hackLimit then
51855: LD_EXP 150
51859: PUSH
51860: LD_VAR 0 5
51864: ARRAY
51865: PUSH
51866: LD_EXP 151
51870: EQUAL
51871: IFFALSE 51875
// break ;
51873: GO 52022
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
51875: LD_ADDR_EXP 153
51879: PUSH
51880: LD_EXP 153
51884: PPUSH
51885: LD_VAR 0 5
51889: PPUSH
51890: LD_EXP 153
51894: PUSH
51895: LD_VAR 0 5
51899: ARRAY
51900: PUSH
51901: LD_INT 1
51903: PLUS
51904: PPUSH
51905: CALL_OW 1
51909: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
51910: LD_ADDR_EXP 150
51914: PUSH
51915: LD_EXP 150
51919: PPUSH
51920: LD_VAR 0 5
51924: PUSH
51925: LD_EXP 150
51929: PUSH
51930: LD_VAR 0 5
51934: ARRAY
51935: PUSH
51936: LD_INT 1
51938: PLUS
51939: PUSH
51940: EMPTY
51941: LIST
51942: LIST
51943: PPUSH
51944: LD_VAR 0 2
51948: PUSH
51949: LD_VAR 0 4
51953: ARRAY
51954: PUSH
51955: LD_VAR 0 2
51959: PUSH
51960: LD_VAR 0 4
51964: ARRAY
51965: PPUSH
51966: CALL_OW 255
51970: PUSH
51971: EMPTY
51972: LIST
51973: LIST
51974: PPUSH
51975: CALL 59398 0 3
51979: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
51980: LD_VAR 0 2
51984: PUSH
51985: LD_VAR 0 4
51989: ARRAY
51990: PPUSH
51991: LD_VAR 0 1
51995: PPUSH
51996: CALL_OW 255
52000: PPUSH
52001: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
52005: LD_VAR 0 2
52009: PUSH
52010: LD_VAR 0 4
52014: ARRAY
52015: PPUSH
52016: CALL_OW 141
// end ;
52020: GO 51852
52022: POP
52023: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
52024: LD_VAR 0 1
52028: PPUSH
52029: LD_EXP 150
52033: PUSH
52034: LD_VAR 0 5
52038: ARRAY
52039: PUSH
52040: LD_INT 0
52042: PLUS
52043: PPUSH
52044: CALL_OW 505
// end ;
52048: LD_VAR 0 3
52052: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
52053: LD_INT 0
52055: PPUSH
52056: PPUSH
52057: PPUSH
52058: PPUSH
// if not hack in hackTanks then
52059: LD_VAR 0 1
52063: PUSH
52064: LD_EXP 149
52068: IN
52069: NOT
52070: IFFALSE 52074
// exit ;
52072: GO 52314
// index := GetElementIndex ( hackTanks , hack ) ;
52074: LD_ADDR_VAR 0 4
52078: PUSH
52079: LD_EXP 149
52083: PPUSH
52084: LD_VAR 0 1
52088: PPUSH
52089: CALL 59183 0 2
52093: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
52094: LD_ADDR_VAR 0 3
52098: PUSH
52099: DOUBLE
52100: LD_EXP 150
52104: PUSH
52105: LD_VAR 0 4
52109: ARRAY
52110: INC
52111: ST_TO_ADDR
52112: LD_INT 1
52114: PUSH
52115: FOR_DOWNTO
52116: IFFALSE 52288
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
52118: LD_ADDR_VAR 0 5
52122: PUSH
52123: LD_EXP 150
52127: PUSH
52128: LD_VAR 0 4
52132: ARRAY
52133: PUSH
52134: LD_VAR 0 3
52138: ARRAY
52139: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
52140: LD_VAR 0 5
52144: PUSH
52145: LD_INT 1
52147: ARRAY
52148: PPUSH
52149: CALL_OW 302
52153: NOT
52154: PUSH
52155: LD_VAR 0 5
52159: PUSH
52160: LD_INT 1
52162: ARRAY
52163: PPUSH
52164: CALL_OW 255
52168: PUSH
52169: LD_VAR 0 1
52173: PPUSH
52174: CALL_OW 255
52178: NONEQUAL
52179: OR
52180: IFFALSE 52286
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
52182: LD_VAR 0 5
52186: PUSH
52187: LD_INT 1
52189: ARRAY
52190: PPUSH
52191: CALL_OW 305
52195: PUSH
52196: LD_VAR 0 5
52200: PUSH
52201: LD_INT 1
52203: ARRAY
52204: PPUSH
52205: CALL_OW 255
52209: PUSH
52210: LD_VAR 0 1
52214: PPUSH
52215: CALL_OW 255
52219: EQUAL
52220: AND
52221: IFFALSE 52245
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
52223: LD_VAR 0 5
52227: PUSH
52228: LD_INT 1
52230: ARRAY
52231: PPUSH
52232: LD_VAR 0 5
52236: PUSH
52237: LD_INT 2
52239: ARRAY
52240: PPUSH
52241: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
52245: LD_ADDR_EXP 150
52249: PUSH
52250: LD_EXP 150
52254: PPUSH
52255: LD_VAR 0 4
52259: PPUSH
52260: LD_EXP 150
52264: PUSH
52265: LD_VAR 0 4
52269: ARRAY
52270: PPUSH
52271: LD_VAR 0 3
52275: PPUSH
52276: CALL_OW 3
52280: PPUSH
52281: CALL_OW 1
52285: ST_TO_ADDR
// end ; end ;
52286: GO 52115
52288: POP
52289: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
52290: LD_VAR 0 1
52294: PPUSH
52295: LD_EXP 150
52299: PUSH
52300: LD_VAR 0 4
52304: ARRAY
52305: PUSH
52306: LD_INT 0
52308: PLUS
52309: PPUSH
52310: CALL_OW 505
// end ;
52314: LD_VAR 0 2
52318: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
52319: LD_INT 0
52321: PPUSH
52322: PPUSH
52323: PPUSH
52324: PPUSH
// if not hack in hackTanks then
52325: LD_VAR 0 1
52329: PUSH
52330: LD_EXP 149
52334: IN
52335: NOT
52336: IFFALSE 52340
// exit ;
52338: GO 52425
// index := GetElementIndex ( hackTanks , hack ) ;
52340: LD_ADDR_VAR 0 5
52344: PUSH
52345: LD_EXP 149
52349: PPUSH
52350: LD_VAR 0 1
52354: PPUSH
52355: CALL 59183 0 2
52359: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
52360: LD_ADDR_VAR 0 4
52364: PUSH
52365: DOUBLE
52366: LD_INT 1
52368: DEC
52369: ST_TO_ADDR
52370: LD_EXP 150
52374: PUSH
52375: LD_VAR 0 5
52379: ARRAY
52380: PUSH
52381: FOR_TO
52382: IFFALSE 52423
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
52384: LD_EXP 150
52388: PUSH
52389: LD_VAR 0 5
52393: ARRAY
52394: PUSH
52395: LD_VAR 0 4
52399: ARRAY
52400: PUSH
52401: LD_INT 1
52403: ARRAY
52404: PUSH
52405: LD_VAR 0 2
52409: EQUAL
52410: IFFALSE 52421
// KillUnit ( vehicle ) ;
52412: LD_VAR 0 2
52416: PPUSH
52417: CALL_OW 66
52421: GO 52381
52423: POP
52424: POP
// end ;
52425: LD_VAR 0 3
52429: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
52430: LD_EXP 154
52434: NOT
52435: IFFALSE 52470
52437: GO 52439
52439: DISABLE
// begin initMiner := true ;
52440: LD_ADDR_EXP 154
52444: PUSH
52445: LD_INT 1
52447: ST_TO_ADDR
// minersList := [ ] ;
52448: LD_ADDR_EXP 155
52452: PUSH
52453: EMPTY
52454: ST_TO_ADDR
// minerMinesList := [ ] ;
52455: LD_ADDR_EXP 156
52459: PUSH
52460: EMPTY
52461: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
52462: LD_ADDR_EXP 157
52466: PUSH
52467: LD_INT 5
52469: ST_TO_ADDR
// end ;
52470: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
52471: LD_EXP 154
52475: PUSH
52476: LD_INT 34
52478: PUSH
52479: LD_INT 81
52481: PUSH
52482: EMPTY
52483: LIST
52484: LIST
52485: PPUSH
52486: CALL_OW 69
52490: AND
52491: IFFALSE 52952
52493: GO 52495
52495: DISABLE
52496: LD_INT 0
52498: PPUSH
52499: PPUSH
52500: PPUSH
52501: PPUSH
// begin enable ;
52502: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
52503: LD_ADDR_VAR 0 1
52507: PUSH
52508: LD_INT 34
52510: PUSH
52511: LD_INT 81
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PPUSH
52518: CALL_OW 69
52522: PUSH
52523: FOR_IN
52524: IFFALSE 52596
// begin if not i in minersList then
52526: LD_VAR 0 1
52530: PUSH
52531: LD_EXP 155
52535: IN
52536: NOT
52537: IFFALSE 52594
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
52539: LD_ADDR_EXP 155
52543: PUSH
52544: LD_EXP 155
52548: PPUSH
52549: LD_EXP 155
52553: PUSH
52554: LD_INT 1
52556: PLUS
52557: PPUSH
52558: LD_VAR 0 1
52562: PPUSH
52563: CALL_OW 1
52567: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
52568: LD_ADDR_EXP 156
52572: PUSH
52573: LD_EXP 156
52577: PPUSH
52578: LD_EXP 156
52582: PUSH
52583: LD_INT 1
52585: PLUS
52586: PPUSH
52587: EMPTY
52588: PPUSH
52589: CALL_OW 1
52593: ST_TO_ADDR
// end end ;
52594: GO 52523
52596: POP
52597: POP
// for i := minerMinesList downto 1 do
52598: LD_ADDR_VAR 0 1
52602: PUSH
52603: DOUBLE
52604: LD_EXP 156
52608: INC
52609: ST_TO_ADDR
52610: LD_INT 1
52612: PUSH
52613: FOR_DOWNTO
52614: IFFALSE 52950
// begin if IsLive ( minersList [ i ] ) then
52616: LD_EXP 155
52620: PUSH
52621: LD_VAR 0 1
52625: ARRAY
52626: PPUSH
52627: CALL_OW 300
52631: IFFALSE 52659
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
52633: LD_EXP 155
52637: PUSH
52638: LD_VAR 0 1
52642: ARRAY
52643: PPUSH
52644: LD_EXP 156
52648: PUSH
52649: LD_VAR 0 1
52653: ARRAY
52654: PPUSH
52655: CALL_OW 505
// if not minerMinesList [ i ] then
52659: LD_EXP 156
52663: PUSH
52664: LD_VAR 0 1
52668: ARRAY
52669: NOT
52670: IFFALSE 52674
// continue ;
52672: GO 52613
// for j := minerMinesList [ i ] downto 1 do
52674: LD_ADDR_VAR 0 2
52678: PUSH
52679: DOUBLE
52680: LD_EXP 156
52684: PUSH
52685: LD_VAR 0 1
52689: ARRAY
52690: INC
52691: ST_TO_ADDR
52692: LD_INT 1
52694: PUSH
52695: FOR_DOWNTO
52696: IFFALSE 52946
// begin side := GetSide ( minersList [ i ] ) ;
52698: LD_ADDR_VAR 0 3
52702: PUSH
52703: LD_EXP 155
52707: PUSH
52708: LD_VAR 0 1
52712: ARRAY
52713: PPUSH
52714: CALL_OW 255
52718: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
52719: LD_ADDR_VAR 0 4
52723: PUSH
52724: LD_EXP 156
52728: PUSH
52729: LD_VAR 0 1
52733: ARRAY
52734: PUSH
52735: LD_VAR 0 2
52739: ARRAY
52740: PUSH
52741: LD_INT 1
52743: ARRAY
52744: PPUSH
52745: LD_EXP 156
52749: PUSH
52750: LD_VAR 0 1
52754: ARRAY
52755: PUSH
52756: LD_VAR 0 2
52760: ARRAY
52761: PUSH
52762: LD_INT 2
52764: ARRAY
52765: PPUSH
52766: CALL_OW 428
52770: ST_TO_ADDR
// if not tmp then
52771: LD_VAR 0 4
52775: NOT
52776: IFFALSE 52780
// continue ;
52778: GO 52695
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
52780: LD_VAR 0 4
52784: PUSH
52785: LD_INT 81
52787: PUSH
52788: LD_VAR 0 3
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PPUSH
52797: CALL_OW 69
52801: IN
52802: PUSH
52803: LD_EXP 156
52807: PUSH
52808: LD_VAR 0 1
52812: ARRAY
52813: PUSH
52814: LD_VAR 0 2
52818: ARRAY
52819: PUSH
52820: LD_INT 1
52822: ARRAY
52823: PPUSH
52824: LD_EXP 156
52828: PUSH
52829: LD_VAR 0 1
52833: ARRAY
52834: PUSH
52835: LD_VAR 0 2
52839: ARRAY
52840: PUSH
52841: LD_INT 2
52843: ARRAY
52844: PPUSH
52845: CALL_OW 458
52849: AND
52850: IFFALSE 52944
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
52852: LD_EXP 156
52856: PUSH
52857: LD_VAR 0 1
52861: ARRAY
52862: PUSH
52863: LD_VAR 0 2
52867: ARRAY
52868: PUSH
52869: LD_INT 1
52871: ARRAY
52872: PPUSH
52873: LD_EXP 156
52877: PUSH
52878: LD_VAR 0 1
52882: ARRAY
52883: PUSH
52884: LD_VAR 0 2
52888: ARRAY
52889: PUSH
52890: LD_INT 2
52892: ARRAY
52893: PPUSH
52894: LD_VAR 0 3
52898: PPUSH
52899: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
52903: LD_ADDR_EXP 156
52907: PUSH
52908: LD_EXP 156
52912: PPUSH
52913: LD_VAR 0 1
52917: PPUSH
52918: LD_EXP 156
52922: PUSH
52923: LD_VAR 0 1
52927: ARRAY
52928: PPUSH
52929: LD_VAR 0 2
52933: PPUSH
52934: CALL_OW 3
52938: PPUSH
52939: CALL_OW 1
52943: ST_TO_ADDR
// end ; end ;
52944: GO 52695
52946: POP
52947: POP
// end ;
52948: GO 52613
52950: POP
52951: POP
// end ;
52952: PPOPN 4
52954: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
52955: LD_INT 0
52957: PPUSH
52958: PPUSH
// result := false ;
52959: LD_ADDR_VAR 0 4
52963: PUSH
52964: LD_INT 0
52966: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
52967: LD_VAR 0 1
52971: PPUSH
52972: CALL_OW 264
52976: PUSH
52977: LD_INT 81
52979: EQUAL
52980: NOT
52981: IFFALSE 52985
// exit ;
52983: GO 53225
// index := GetElementIndex ( minersList , unit ) ;
52985: LD_ADDR_VAR 0 5
52989: PUSH
52990: LD_EXP 155
52994: PPUSH
52995: LD_VAR 0 1
52999: PPUSH
53000: CALL 59183 0 2
53004: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
53005: LD_EXP 156
53009: PUSH
53010: LD_VAR 0 5
53014: ARRAY
53015: PUSH
53016: LD_EXP 157
53020: GREATEREQUAL
53021: IFFALSE 53025
// exit ;
53023: GO 53225
// ComMoveXY ( unit , x , y ) ;
53025: LD_VAR 0 1
53029: PPUSH
53030: LD_VAR 0 2
53034: PPUSH
53035: LD_VAR 0 3
53039: PPUSH
53040: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
53044: LD_INT 35
53046: PPUSH
53047: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
53051: LD_VAR 0 1
53055: PPUSH
53056: LD_VAR 0 2
53060: PPUSH
53061: LD_VAR 0 3
53065: PPUSH
53066: CALL 90935 0 3
53070: NOT
53071: PUSH
53072: LD_VAR 0 1
53076: PPUSH
53077: CALL_OW 314
53081: AND
53082: IFFALSE 53086
// exit ;
53084: GO 53225
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
53086: LD_VAR 0 2
53090: PPUSH
53091: LD_VAR 0 3
53095: PPUSH
53096: CALL_OW 428
53100: PUSH
53101: LD_VAR 0 1
53105: EQUAL
53106: PUSH
53107: LD_VAR 0 1
53111: PPUSH
53112: CALL_OW 314
53116: NOT
53117: AND
53118: IFFALSE 53044
// PlaySoundXY ( x , y , PlantMine ) ;
53120: LD_VAR 0 2
53124: PPUSH
53125: LD_VAR 0 3
53129: PPUSH
53130: LD_STRING PlantMine
53132: PPUSH
53133: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
53137: LD_VAR 0 2
53141: PPUSH
53142: LD_VAR 0 3
53146: PPUSH
53147: LD_VAR 0 1
53151: PPUSH
53152: CALL_OW 255
53156: PPUSH
53157: LD_INT 0
53159: PPUSH
53160: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
53164: LD_ADDR_EXP 156
53168: PUSH
53169: LD_EXP 156
53173: PPUSH
53174: LD_VAR 0 5
53178: PUSH
53179: LD_EXP 156
53183: PUSH
53184: LD_VAR 0 5
53188: ARRAY
53189: PUSH
53190: LD_INT 1
53192: PLUS
53193: PUSH
53194: EMPTY
53195: LIST
53196: LIST
53197: PPUSH
53198: LD_VAR 0 2
53202: PUSH
53203: LD_VAR 0 3
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PPUSH
53212: CALL 59398 0 3
53216: ST_TO_ADDR
// result := true ;
53217: LD_ADDR_VAR 0 4
53221: PUSH
53222: LD_INT 1
53224: ST_TO_ADDR
// end ;
53225: LD_VAR 0 4
53229: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
53230: LD_INT 0
53232: PPUSH
53233: PPUSH
53234: PPUSH
// if not unit in minersList then
53235: LD_VAR 0 1
53239: PUSH
53240: LD_EXP 155
53244: IN
53245: NOT
53246: IFFALSE 53250
// exit ;
53248: GO 53642
// index := GetElementIndex ( minersList , unit ) ;
53250: LD_ADDR_VAR 0 6
53254: PUSH
53255: LD_EXP 155
53259: PPUSH
53260: LD_VAR 0 1
53264: PPUSH
53265: CALL 59183 0 2
53269: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
53270: LD_ADDR_VAR 0 5
53274: PUSH
53275: DOUBLE
53276: LD_EXP 156
53280: PUSH
53281: LD_VAR 0 6
53285: ARRAY
53286: INC
53287: ST_TO_ADDR
53288: LD_INT 1
53290: PUSH
53291: FOR_DOWNTO
53292: IFFALSE 53453
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
53294: LD_EXP 156
53298: PUSH
53299: LD_VAR 0 6
53303: ARRAY
53304: PUSH
53305: LD_VAR 0 5
53309: ARRAY
53310: PUSH
53311: LD_INT 1
53313: ARRAY
53314: PUSH
53315: LD_VAR 0 2
53319: EQUAL
53320: PUSH
53321: LD_EXP 156
53325: PUSH
53326: LD_VAR 0 6
53330: ARRAY
53331: PUSH
53332: LD_VAR 0 5
53336: ARRAY
53337: PUSH
53338: LD_INT 2
53340: ARRAY
53341: PUSH
53342: LD_VAR 0 3
53346: EQUAL
53347: AND
53348: IFFALSE 53451
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
53350: LD_EXP 156
53354: PUSH
53355: LD_VAR 0 6
53359: ARRAY
53360: PUSH
53361: LD_VAR 0 5
53365: ARRAY
53366: PUSH
53367: LD_INT 1
53369: ARRAY
53370: PPUSH
53371: LD_EXP 156
53375: PUSH
53376: LD_VAR 0 6
53380: ARRAY
53381: PUSH
53382: LD_VAR 0 5
53386: ARRAY
53387: PUSH
53388: LD_INT 2
53390: ARRAY
53391: PPUSH
53392: LD_VAR 0 1
53396: PPUSH
53397: CALL_OW 255
53401: PPUSH
53402: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
53406: LD_ADDR_EXP 156
53410: PUSH
53411: LD_EXP 156
53415: PPUSH
53416: LD_VAR 0 6
53420: PPUSH
53421: LD_EXP 156
53425: PUSH
53426: LD_VAR 0 6
53430: ARRAY
53431: PPUSH
53432: LD_VAR 0 5
53436: PPUSH
53437: CALL_OW 3
53441: PPUSH
53442: CALL_OW 1
53446: ST_TO_ADDR
// exit ;
53447: POP
53448: POP
53449: GO 53642
// end ; end ;
53451: GO 53291
53453: POP
53454: POP
// for i := minerMinesList [ index ] downto 1 do
53455: LD_ADDR_VAR 0 5
53459: PUSH
53460: DOUBLE
53461: LD_EXP 156
53465: PUSH
53466: LD_VAR 0 6
53470: ARRAY
53471: INC
53472: ST_TO_ADDR
53473: LD_INT 1
53475: PUSH
53476: FOR_DOWNTO
53477: IFFALSE 53640
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
53479: LD_EXP 156
53483: PUSH
53484: LD_VAR 0 6
53488: ARRAY
53489: PUSH
53490: LD_VAR 0 5
53494: ARRAY
53495: PUSH
53496: LD_INT 1
53498: ARRAY
53499: PPUSH
53500: LD_EXP 156
53504: PUSH
53505: LD_VAR 0 6
53509: ARRAY
53510: PUSH
53511: LD_VAR 0 5
53515: ARRAY
53516: PUSH
53517: LD_INT 2
53519: ARRAY
53520: PPUSH
53521: LD_VAR 0 2
53525: PPUSH
53526: LD_VAR 0 3
53530: PPUSH
53531: CALL_OW 298
53535: PUSH
53536: LD_INT 6
53538: LESS
53539: IFFALSE 53638
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
53541: LD_EXP 156
53545: PUSH
53546: LD_VAR 0 6
53550: ARRAY
53551: PUSH
53552: LD_VAR 0 5
53556: ARRAY
53557: PUSH
53558: LD_INT 1
53560: ARRAY
53561: PPUSH
53562: LD_EXP 156
53566: PUSH
53567: LD_VAR 0 6
53571: ARRAY
53572: PUSH
53573: LD_VAR 0 5
53577: ARRAY
53578: PUSH
53579: LD_INT 2
53581: ARRAY
53582: PPUSH
53583: LD_VAR 0 1
53587: PPUSH
53588: CALL_OW 255
53592: PPUSH
53593: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
53597: LD_ADDR_EXP 156
53601: PUSH
53602: LD_EXP 156
53606: PPUSH
53607: LD_VAR 0 6
53611: PPUSH
53612: LD_EXP 156
53616: PUSH
53617: LD_VAR 0 6
53621: ARRAY
53622: PPUSH
53623: LD_VAR 0 5
53627: PPUSH
53628: CALL_OW 3
53632: PPUSH
53633: CALL_OW 1
53637: ST_TO_ADDR
// end ; end ;
53638: GO 53476
53640: POP
53641: POP
// end ;
53642: LD_VAR 0 4
53646: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
53647: LD_INT 0
53649: PPUSH
53650: PPUSH
53651: PPUSH
53652: PPUSH
53653: PPUSH
53654: PPUSH
53655: PPUSH
53656: PPUSH
53657: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
53658: LD_VAR 0 1
53662: PPUSH
53663: CALL_OW 264
53667: PUSH
53668: LD_INT 81
53670: EQUAL
53671: NOT
53672: PUSH
53673: LD_VAR 0 1
53677: PUSH
53678: LD_EXP 155
53682: IN
53683: NOT
53684: OR
53685: IFFALSE 53689
// exit ;
53687: GO 54011
// index := GetElementIndex ( minersList , unit ) ;
53689: LD_ADDR_VAR 0 6
53693: PUSH
53694: LD_EXP 155
53698: PPUSH
53699: LD_VAR 0 1
53703: PPUSH
53704: CALL 59183 0 2
53708: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
53709: LD_ADDR_VAR 0 8
53713: PUSH
53714: LD_EXP 157
53718: PUSH
53719: LD_EXP 156
53723: PUSH
53724: LD_VAR 0 6
53728: ARRAY
53729: MINUS
53730: ST_TO_ADDR
// if not minesFreeAmount then
53731: LD_VAR 0 8
53735: NOT
53736: IFFALSE 53740
// exit ;
53738: GO 54011
// tmp := [ ] ;
53740: LD_ADDR_VAR 0 7
53744: PUSH
53745: EMPTY
53746: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
53747: LD_ADDR_VAR 0 5
53751: PUSH
53752: DOUBLE
53753: LD_INT 1
53755: DEC
53756: ST_TO_ADDR
53757: LD_VAR 0 8
53761: PUSH
53762: FOR_TO
53763: IFFALSE 53958
// begin _d := rand ( 0 , 5 ) ;
53765: LD_ADDR_VAR 0 11
53769: PUSH
53770: LD_INT 0
53772: PPUSH
53773: LD_INT 5
53775: PPUSH
53776: CALL_OW 12
53780: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
53781: LD_ADDR_VAR 0 12
53785: PUSH
53786: LD_INT 2
53788: PPUSH
53789: LD_INT 6
53791: PPUSH
53792: CALL_OW 12
53796: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
53797: LD_ADDR_VAR 0 9
53801: PUSH
53802: LD_VAR 0 2
53806: PPUSH
53807: LD_VAR 0 11
53811: PPUSH
53812: LD_VAR 0 12
53816: PPUSH
53817: CALL_OW 272
53821: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
53822: LD_ADDR_VAR 0 10
53826: PUSH
53827: LD_VAR 0 3
53831: PPUSH
53832: LD_VAR 0 11
53836: PPUSH
53837: LD_VAR 0 12
53841: PPUSH
53842: CALL_OW 273
53846: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
53847: LD_VAR 0 9
53851: PPUSH
53852: LD_VAR 0 10
53856: PPUSH
53857: CALL_OW 488
53861: PUSH
53862: LD_VAR 0 9
53866: PUSH
53867: LD_VAR 0 10
53871: PUSH
53872: EMPTY
53873: LIST
53874: LIST
53875: PUSH
53876: LD_VAR 0 7
53880: IN
53881: NOT
53882: AND
53883: PUSH
53884: LD_VAR 0 9
53888: PPUSH
53889: LD_VAR 0 10
53893: PPUSH
53894: CALL_OW 458
53898: NOT
53899: AND
53900: IFFALSE 53942
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
53902: LD_ADDR_VAR 0 7
53906: PUSH
53907: LD_VAR 0 7
53911: PPUSH
53912: LD_VAR 0 7
53916: PUSH
53917: LD_INT 1
53919: PLUS
53920: PPUSH
53921: LD_VAR 0 9
53925: PUSH
53926: LD_VAR 0 10
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PPUSH
53935: CALL_OW 1
53939: ST_TO_ADDR
53940: GO 53956
// i := i - 1 ;
53942: LD_ADDR_VAR 0 5
53946: PUSH
53947: LD_VAR 0 5
53951: PUSH
53952: LD_INT 1
53954: MINUS
53955: ST_TO_ADDR
// end ;
53956: GO 53762
53958: POP
53959: POP
// for i in tmp do
53960: LD_ADDR_VAR 0 5
53964: PUSH
53965: LD_VAR 0 7
53969: PUSH
53970: FOR_IN
53971: IFFALSE 54009
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
53973: LD_VAR 0 1
53977: PPUSH
53978: LD_VAR 0 5
53982: PUSH
53983: LD_INT 1
53985: ARRAY
53986: PPUSH
53987: LD_VAR 0 5
53991: PUSH
53992: LD_INT 2
53994: ARRAY
53995: PPUSH
53996: CALL 52955 0 3
54000: NOT
54001: IFFALSE 54007
// exit ;
54003: POP
54004: POP
54005: GO 54011
54007: GO 53970
54009: POP
54010: POP
// end ;
54011: LD_VAR 0 4
54015: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
54016: LD_INT 0
54018: PPUSH
54019: PPUSH
54020: PPUSH
54021: PPUSH
54022: PPUSH
54023: PPUSH
54024: PPUSH
// if not GetClass ( unit ) = class_sniper then
54025: LD_VAR 0 1
54029: PPUSH
54030: CALL_OW 257
54034: PUSH
54035: LD_INT 5
54037: EQUAL
54038: NOT
54039: IFFALSE 54043
// exit ;
54041: GO 54431
// dist := 8 ;
54043: LD_ADDR_VAR 0 5
54047: PUSH
54048: LD_INT 8
54050: ST_TO_ADDR
// viewRange := 12 ;
54051: LD_ADDR_VAR 0 7
54055: PUSH
54056: LD_INT 12
54058: ST_TO_ADDR
// side := GetSide ( unit ) ;
54059: LD_ADDR_VAR 0 6
54063: PUSH
54064: LD_VAR 0 1
54068: PPUSH
54069: CALL_OW 255
54073: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
54074: LD_INT 61
54076: PPUSH
54077: LD_VAR 0 6
54081: PPUSH
54082: CALL_OW 321
54086: PUSH
54087: LD_INT 2
54089: EQUAL
54090: IFFALSE 54100
// viewRange := 16 ;
54092: LD_ADDR_VAR 0 7
54096: PUSH
54097: LD_INT 16
54099: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
54100: LD_VAR 0 1
54104: PPUSH
54105: LD_VAR 0 2
54109: PPUSH
54110: LD_VAR 0 3
54114: PPUSH
54115: CALL_OW 297
54119: PUSH
54120: LD_VAR 0 5
54124: GREATER
54125: IFFALSE 54204
// begin ComMoveXY ( unit , x , y ) ;
54127: LD_VAR 0 1
54131: PPUSH
54132: LD_VAR 0 2
54136: PPUSH
54137: LD_VAR 0 3
54141: PPUSH
54142: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
54146: LD_INT 35
54148: PPUSH
54149: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
54153: LD_VAR 0 1
54157: PPUSH
54158: LD_VAR 0 2
54162: PPUSH
54163: LD_VAR 0 3
54167: PPUSH
54168: CALL 90935 0 3
54172: NOT
54173: IFFALSE 54177
// exit ;
54175: GO 54431
// until GetDistUnitXY ( unit , x , y ) < dist ;
54177: LD_VAR 0 1
54181: PPUSH
54182: LD_VAR 0 2
54186: PPUSH
54187: LD_VAR 0 3
54191: PPUSH
54192: CALL_OW 297
54196: PUSH
54197: LD_VAR 0 5
54201: LESS
54202: IFFALSE 54146
// end ; ComTurnXY ( unit , x , y ) ;
54204: LD_VAR 0 1
54208: PPUSH
54209: LD_VAR 0 2
54213: PPUSH
54214: LD_VAR 0 3
54218: PPUSH
54219: CALL_OW 118
// wait ( 5 ) ;
54223: LD_INT 5
54225: PPUSH
54226: CALL_OW 67
// _d := GetDir ( unit ) ;
54230: LD_ADDR_VAR 0 10
54234: PUSH
54235: LD_VAR 0 1
54239: PPUSH
54240: CALL_OW 254
54244: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
54245: LD_ADDR_VAR 0 8
54249: PUSH
54250: LD_VAR 0 1
54254: PPUSH
54255: CALL_OW 250
54259: PPUSH
54260: LD_VAR 0 10
54264: PPUSH
54265: LD_VAR 0 5
54269: PPUSH
54270: CALL_OW 272
54274: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
54275: LD_ADDR_VAR 0 9
54279: PUSH
54280: LD_VAR 0 1
54284: PPUSH
54285: CALL_OW 251
54289: PPUSH
54290: LD_VAR 0 10
54294: PPUSH
54295: LD_VAR 0 5
54299: PPUSH
54300: CALL_OW 273
54304: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54305: LD_VAR 0 8
54309: PPUSH
54310: LD_VAR 0 9
54314: PPUSH
54315: CALL_OW 488
54319: NOT
54320: IFFALSE 54324
// exit ;
54322: GO 54431
// ComAnimCustom ( unit , 1 ) ;
54324: LD_VAR 0 1
54328: PPUSH
54329: LD_INT 1
54331: PPUSH
54332: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
54336: LD_VAR 0 8
54340: PPUSH
54341: LD_VAR 0 9
54345: PPUSH
54346: LD_VAR 0 6
54350: PPUSH
54351: LD_VAR 0 7
54355: PPUSH
54356: CALL_OW 330
// repeat wait ( 1 ) ;
54360: LD_INT 1
54362: PPUSH
54363: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
54367: LD_VAR 0 1
54371: PPUSH
54372: CALL_OW 316
54376: PUSH
54377: LD_VAR 0 1
54381: PPUSH
54382: CALL_OW 314
54386: OR
54387: PUSH
54388: LD_VAR 0 1
54392: PPUSH
54393: CALL_OW 302
54397: NOT
54398: OR
54399: PUSH
54400: LD_VAR 0 1
54404: PPUSH
54405: CALL_OW 301
54409: OR
54410: IFFALSE 54360
// RemoveSeeing ( _x , _y , side ) ;
54412: LD_VAR 0 8
54416: PPUSH
54417: LD_VAR 0 9
54421: PPUSH
54422: LD_VAR 0 6
54426: PPUSH
54427: CALL_OW 331
// end ; end_of_file
54431: LD_VAR 0 4
54435: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
54436: LD_INT 0
54438: PPUSH
54439: PPUSH
// if exist_mode then
54440: LD_VAR 0 2
54444: IFFALSE 54469
// unit := CreateCharacter ( prefix & ident ) else
54446: LD_ADDR_VAR 0 5
54450: PUSH
54451: LD_VAR 0 3
54455: PUSH
54456: LD_VAR 0 1
54460: STR
54461: PPUSH
54462: CALL_OW 34
54466: ST_TO_ADDR
54467: GO 54484
// unit := NewCharacter ( ident ) ;
54469: LD_ADDR_VAR 0 5
54473: PUSH
54474: LD_VAR 0 1
54478: PPUSH
54479: CALL_OW 25
54483: ST_TO_ADDR
// result := unit ;
54484: LD_ADDR_VAR 0 4
54488: PUSH
54489: LD_VAR 0 5
54493: ST_TO_ADDR
// end ;
54494: LD_VAR 0 4
54498: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
54499: LD_INT 0
54501: PPUSH
54502: PPUSH
// if not side or not nation then
54503: LD_VAR 0 1
54507: NOT
54508: PUSH
54509: LD_VAR 0 2
54513: NOT
54514: OR
54515: IFFALSE 54519
// exit ;
54517: GO 55287
// case nation of nation_american :
54519: LD_VAR 0 2
54523: PUSH
54524: LD_INT 1
54526: DOUBLE
54527: EQUAL
54528: IFTRUE 54532
54530: GO 54746
54532: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
54533: LD_ADDR_VAR 0 4
54537: PUSH
54538: LD_INT 35
54540: PUSH
54541: LD_INT 45
54543: PUSH
54544: LD_INT 46
54546: PUSH
54547: LD_INT 47
54549: PUSH
54550: LD_INT 82
54552: PUSH
54553: LD_INT 83
54555: PUSH
54556: LD_INT 84
54558: PUSH
54559: LD_INT 85
54561: PUSH
54562: LD_INT 86
54564: PUSH
54565: LD_INT 1
54567: PUSH
54568: LD_INT 2
54570: PUSH
54571: LD_INT 6
54573: PUSH
54574: LD_INT 15
54576: PUSH
54577: LD_INT 16
54579: PUSH
54580: LD_INT 7
54582: PUSH
54583: LD_INT 12
54585: PUSH
54586: LD_INT 13
54588: PUSH
54589: LD_INT 10
54591: PUSH
54592: LD_INT 14
54594: PUSH
54595: LD_INT 20
54597: PUSH
54598: LD_INT 21
54600: PUSH
54601: LD_INT 22
54603: PUSH
54604: LD_INT 25
54606: PUSH
54607: LD_INT 32
54609: PUSH
54610: LD_INT 27
54612: PUSH
54613: LD_INT 36
54615: PUSH
54616: LD_INT 69
54618: PUSH
54619: LD_INT 39
54621: PUSH
54622: LD_INT 34
54624: PUSH
54625: LD_INT 40
54627: PUSH
54628: LD_INT 48
54630: PUSH
54631: LD_INT 49
54633: PUSH
54634: LD_INT 50
54636: PUSH
54637: LD_INT 51
54639: PUSH
54640: LD_INT 52
54642: PUSH
54643: LD_INT 53
54645: PUSH
54646: LD_INT 54
54648: PUSH
54649: LD_INT 55
54651: PUSH
54652: LD_INT 56
54654: PUSH
54655: LD_INT 57
54657: PUSH
54658: LD_INT 58
54660: PUSH
54661: LD_INT 59
54663: PUSH
54664: LD_INT 60
54666: PUSH
54667: LD_INT 61
54669: PUSH
54670: LD_INT 62
54672: PUSH
54673: LD_INT 80
54675: PUSH
54676: LD_INT 82
54678: PUSH
54679: LD_INT 83
54681: PUSH
54682: LD_INT 84
54684: PUSH
54685: LD_INT 85
54687: PUSH
54688: LD_INT 86
54690: PUSH
54691: EMPTY
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: LIST
54698: LIST
54699: LIST
54700: LIST
54701: LIST
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: LIST
54720: LIST
54721: LIST
54722: LIST
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: LIST
54734: LIST
54735: LIST
54736: LIST
54737: LIST
54738: LIST
54739: LIST
54740: LIST
54741: LIST
54742: LIST
54743: ST_TO_ADDR
54744: GO 55211
54746: LD_INT 2
54748: DOUBLE
54749: EQUAL
54750: IFTRUE 54754
54752: GO 54980
54754: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
54755: LD_ADDR_VAR 0 4
54759: PUSH
54760: LD_INT 35
54762: PUSH
54763: LD_INT 45
54765: PUSH
54766: LD_INT 46
54768: PUSH
54769: LD_INT 47
54771: PUSH
54772: LD_INT 82
54774: PUSH
54775: LD_INT 83
54777: PUSH
54778: LD_INT 84
54780: PUSH
54781: LD_INT 85
54783: PUSH
54784: LD_INT 87
54786: PUSH
54787: LD_INT 70
54789: PUSH
54790: LD_INT 1
54792: PUSH
54793: LD_INT 11
54795: PUSH
54796: LD_INT 3
54798: PUSH
54799: LD_INT 4
54801: PUSH
54802: LD_INT 5
54804: PUSH
54805: LD_INT 6
54807: PUSH
54808: LD_INT 15
54810: PUSH
54811: LD_INT 18
54813: PUSH
54814: LD_INT 7
54816: PUSH
54817: LD_INT 17
54819: PUSH
54820: LD_INT 8
54822: PUSH
54823: LD_INT 20
54825: PUSH
54826: LD_INT 21
54828: PUSH
54829: LD_INT 22
54831: PUSH
54832: LD_INT 72
54834: PUSH
54835: LD_INT 26
54837: PUSH
54838: LD_INT 69
54840: PUSH
54841: LD_INT 39
54843: PUSH
54844: LD_INT 40
54846: PUSH
54847: LD_INT 41
54849: PUSH
54850: LD_INT 42
54852: PUSH
54853: LD_INT 43
54855: PUSH
54856: LD_INT 48
54858: PUSH
54859: LD_INT 49
54861: PUSH
54862: LD_INT 50
54864: PUSH
54865: LD_INT 51
54867: PUSH
54868: LD_INT 52
54870: PUSH
54871: LD_INT 53
54873: PUSH
54874: LD_INT 54
54876: PUSH
54877: LD_INT 55
54879: PUSH
54880: LD_INT 56
54882: PUSH
54883: LD_INT 60
54885: PUSH
54886: LD_INT 61
54888: PUSH
54889: LD_INT 62
54891: PUSH
54892: LD_INT 66
54894: PUSH
54895: LD_INT 67
54897: PUSH
54898: LD_INT 68
54900: PUSH
54901: LD_INT 81
54903: PUSH
54904: LD_INT 82
54906: PUSH
54907: LD_INT 83
54909: PUSH
54910: LD_INT 84
54912: PUSH
54913: LD_INT 85
54915: PUSH
54916: LD_INT 87
54918: PUSH
54919: LD_INT 88
54921: PUSH
54922: EMPTY
54923: LIST
54924: LIST
54925: LIST
54926: LIST
54927: LIST
54928: LIST
54929: LIST
54930: LIST
54931: LIST
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: LIST
54954: LIST
54955: LIST
54956: LIST
54957: LIST
54958: LIST
54959: LIST
54960: LIST
54961: LIST
54962: LIST
54963: LIST
54964: LIST
54965: LIST
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: LIST
54971: LIST
54972: LIST
54973: LIST
54974: LIST
54975: LIST
54976: LIST
54977: ST_TO_ADDR
54978: GO 55211
54980: LD_INT 3
54982: DOUBLE
54983: EQUAL
54984: IFTRUE 54988
54986: GO 55210
54988: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
54989: LD_ADDR_VAR 0 4
54993: PUSH
54994: LD_INT 46
54996: PUSH
54997: LD_INT 47
54999: PUSH
55000: LD_INT 1
55002: PUSH
55003: LD_INT 2
55005: PUSH
55006: LD_INT 82
55008: PUSH
55009: LD_INT 83
55011: PUSH
55012: LD_INT 84
55014: PUSH
55015: LD_INT 85
55017: PUSH
55018: LD_INT 86
55020: PUSH
55021: LD_INT 11
55023: PUSH
55024: LD_INT 9
55026: PUSH
55027: LD_INT 20
55029: PUSH
55030: LD_INT 19
55032: PUSH
55033: LD_INT 21
55035: PUSH
55036: LD_INT 24
55038: PUSH
55039: LD_INT 22
55041: PUSH
55042: LD_INT 25
55044: PUSH
55045: LD_INT 28
55047: PUSH
55048: LD_INT 29
55050: PUSH
55051: LD_INT 30
55053: PUSH
55054: LD_INT 31
55056: PUSH
55057: LD_INT 37
55059: PUSH
55060: LD_INT 38
55062: PUSH
55063: LD_INT 32
55065: PUSH
55066: LD_INT 27
55068: PUSH
55069: LD_INT 33
55071: PUSH
55072: LD_INT 69
55074: PUSH
55075: LD_INT 39
55077: PUSH
55078: LD_INT 34
55080: PUSH
55081: LD_INT 40
55083: PUSH
55084: LD_INT 71
55086: PUSH
55087: LD_INT 23
55089: PUSH
55090: LD_INT 44
55092: PUSH
55093: LD_INT 48
55095: PUSH
55096: LD_INT 49
55098: PUSH
55099: LD_INT 50
55101: PUSH
55102: LD_INT 51
55104: PUSH
55105: LD_INT 52
55107: PUSH
55108: LD_INT 53
55110: PUSH
55111: LD_INT 54
55113: PUSH
55114: LD_INT 55
55116: PUSH
55117: LD_INT 56
55119: PUSH
55120: LD_INT 57
55122: PUSH
55123: LD_INT 58
55125: PUSH
55126: LD_INT 59
55128: PUSH
55129: LD_INT 63
55131: PUSH
55132: LD_INT 64
55134: PUSH
55135: LD_INT 65
55137: PUSH
55138: LD_INT 82
55140: PUSH
55141: LD_INT 83
55143: PUSH
55144: LD_INT 84
55146: PUSH
55147: LD_INT 85
55149: PUSH
55150: LD_INT 86
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: LIST
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: LIST
55167: LIST
55168: LIST
55169: LIST
55170: LIST
55171: LIST
55172: LIST
55173: LIST
55174: LIST
55175: LIST
55176: LIST
55177: LIST
55178: LIST
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: ST_TO_ADDR
55208: GO 55211
55210: POP
// if state > - 1 and state < 3 then
55211: LD_VAR 0 3
55215: PUSH
55216: LD_INT 1
55218: NEG
55219: GREATER
55220: PUSH
55221: LD_VAR 0 3
55225: PUSH
55226: LD_INT 3
55228: LESS
55229: AND
55230: IFFALSE 55287
// for i in result do
55232: LD_ADDR_VAR 0 5
55236: PUSH
55237: LD_VAR 0 4
55241: PUSH
55242: FOR_IN
55243: IFFALSE 55285
// if GetTech ( i , side ) <> state then
55245: LD_VAR 0 5
55249: PPUSH
55250: LD_VAR 0 1
55254: PPUSH
55255: CALL_OW 321
55259: PUSH
55260: LD_VAR 0 3
55264: NONEQUAL
55265: IFFALSE 55283
// result := result diff i ;
55267: LD_ADDR_VAR 0 4
55271: PUSH
55272: LD_VAR 0 4
55276: PUSH
55277: LD_VAR 0 5
55281: DIFF
55282: ST_TO_ADDR
55283: GO 55242
55285: POP
55286: POP
// end ;
55287: LD_VAR 0 4
55291: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
55292: LD_INT 0
55294: PPUSH
55295: PPUSH
55296: PPUSH
// result := true ;
55297: LD_ADDR_VAR 0 3
55301: PUSH
55302: LD_INT 1
55304: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
55305: LD_ADDR_VAR 0 5
55309: PUSH
55310: LD_VAR 0 2
55314: PPUSH
55315: CALL_OW 480
55319: ST_TO_ADDR
// if not tmp then
55320: LD_VAR 0 5
55324: NOT
55325: IFFALSE 55329
// exit ;
55327: GO 55378
// for i in tmp do
55329: LD_ADDR_VAR 0 4
55333: PUSH
55334: LD_VAR 0 5
55338: PUSH
55339: FOR_IN
55340: IFFALSE 55376
// if GetTech ( i , side ) <> state_researched then
55342: LD_VAR 0 4
55346: PPUSH
55347: LD_VAR 0 1
55351: PPUSH
55352: CALL_OW 321
55356: PUSH
55357: LD_INT 2
55359: NONEQUAL
55360: IFFALSE 55374
// begin result := false ;
55362: LD_ADDR_VAR 0 3
55366: PUSH
55367: LD_INT 0
55369: ST_TO_ADDR
// exit ;
55370: POP
55371: POP
55372: GO 55378
// end ;
55374: GO 55339
55376: POP
55377: POP
// end ;
55378: LD_VAR 0 3
55382: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
55383: LD_INT 0
55385: PPUSH
55386: PPUSH
55387: PPUSH
55388: PPUSH
55389: PPUSH
55390: PPUSH
55391: PPUSH
55392: PPUSH
55393: PPUSH
55394: PPUSH
55395: PPUSH
55396: PPUSH
55397: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
55398: LD_VAR 0 1
55402: NOT
55403: PUSH
55404: LD_VAR 0 1
55408: PPUSH
55409: CALL_OW 257
55413: PUSH
55414: LD_INT 9
55416: NONEQUAL
55417: OR
55418: IFFALSE 55422
// exit ;
55420: GO 55995
// side := GetSide ( unit ) ;
55422: LD_ADDR_VAR 0 9
55426: PUSH
55427: LD_VAR 0 1
55431: PPUSH
55432: CALL_OW 255
55436: ST_TO_ADDR
// tech_space := tech_spacanom ;
55437: LD_ADDR_VAR 0 12
55441: PUSH
55442: LD_INT 29
55444: ST_TO_ADDR
// tech_time := tech_taurad ;
55445: LD_ADDR_VAR 0 13
55449: PUSH
55450: LD_INT 28
55452: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
55453: LD_ADDR_VAR 0 11
55457: PUSH
55458: LD_VAR 0 1
55462: PPUSH
55463: CALL_OW 310
55467: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
55468: LD_VAR 0 11
55472: PPUSH
55473: CALL_OW 247
55477: PUSH
55478: LD_INT 2
55480: EQUAL
55481: IFFALSE 55485
// exit ;
55483: GO 55995
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
55485: LD_ADDR_VAR 0 8
55489: PUSH
55490: LD_INT 81
55492: PUSH
55493: LD_VAR 0 9
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: PUSH
55502: LD_INT 3
55504: PUSH
55505: LD_INT 21
55507: PUSH
55508: LD_INT 3
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: EMPTY
55516: LIST
55517: LIST
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PPUSH
55523: CALL_OW 69
55527: ST_TO_ADDR
// if not tmp then
55528: LD_VAR 0 8
55532: NOT
55533: IFFALSE 55537
// exit ;
55535: GO 55995
// if in_unit then
55537: LD_VAR 0 11
55541: IFFALSE 55565
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
55543: LD_ADDR_VAR 0 10
55547: PUSH
55548: LD_VAR 0 8
55552: PPUSH
55553: LD_VAR 0 11
55557: PPUSH
55558: CALL_OW 74
55562: ST_TO_ADDR
55563: GO 55585
// enemy := NearestUnitToUnit ( tmp , unit ) ;
55565: LD_ADDR_VAR 0 10
55569: PUSH
55570: LD_VAR 0 8
55574: PPUSH
55575: LD_VAR 0 1
55579: PPUSH
55580: CALL_OW 74
55584: ST_TO_ADDR
// if not enemy then
55585: LD_VAR 0 10
55589: NOT
55590: IFFALSE 55594
// exit ;
55592: GO 55995
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
55594: LD_VAR 0 11
55598: PUSH
55599: LD_VAR 0 11
55603: PPUSH
55604: LD_VAR 0 10
55608: PPUSH
55609: CALL_OW 296
55613: PUSH
55614: LD_INT 13
55616: GREATER
55617: AND
55618: PUSH
55619: LD_VAR 0 1
55623: PPUSH
55624: LD_VAR 0 10
55628: PPUSH
55629: CALL_OW 296
55633: PUSH
55634: LD_INT 12
55636: GREATER
55637: OR
55638: IFFALSE 55642
// exit ;
55640: GO 55995
// missile := [ 1 ] ;
55642: LD_ADDR_VAR 0 14
55646: PUSH
55647: LD_INT 1
55649: PUSH
55650: EMPTY
55651: LIST
55652: ST_TO_ADDR
// if Researched ( side , tech_space ) then
55653: LD_VAR 0 9
55657: PPUSH
55658: LD_VAR 0 12
55662: PPUSH
55663: CALL_OW 325
55667: IFFALSE 55696
// missile := Replace ( missile , missile + 1 , 2 ) ;
55669: LD_ADDR_VAR 0 14
55673: PUSH
55674: LD_VAR 0 14
55678: PPUSH
55679: LD_VAR 0 14
55683: PUSH
55684: LD_INT 1
55686: PLUS
55687: PPUSH
55688: LD_INT 2
55690: PPUSH
55691: CALL_OW 1
55695: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
55696: LD_VAR 0 9
55700: PPUSH
55701: LD_VAR 0 13
55705: PPUSH
55706: CALL_OW 325
55710: PUSH
55711: LD_VAR 0 10
55715: PPUSH
55716: CALL_OW 255
55720: PPUSH
55721: LD_VAR 0 13
55725: PPUSH
55726: CALL_OW 325
55730: NOT
55731: AND
55732: IFFALSE 55761
// missile := Replace ( missile , missile + 1 , 3 ) ;
55734: LD_ADDR_VAR 0 14
55738: PUSH
55739: LD_VAR 0 14
55743: PPUSH
55744: LD_VAR 0 14
55748: PUSH
55749: LD_INT 1
55751: PLUS
55752: PPUSH
55753: LD_INT 3
55755: PPUSH
55756: CALL_OW 1
55760: ST_TO_ADDR
// if missile < 2 then
55761: LD_VAR 0 14
55765: PUSH
55766: LD_INT 2
55768: LESS
55769: IFFALSE 55773
// exit ;
55771: GO 55995
// x := GetX ( enemy ) ;
55773: LD_ADDR_VAR 0 4
55777: PUSH
55778: LD_VAR 0 10
55782: PPUSH
55783: CALL_OW 250
55787: ST_TO_ADDR
// y := GetY ( enemy ) ;
55788: LD_ADDR_VAR 0 5
55792: PUSH
55793: LD_VAR 0 10
55797: PPUSH
55798: CALL_OW 251
55802: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
55803: LD_ADDR_VAR 0 6
55807: PUSH
55808: LD_VAR 0 4
55812: PUSH
55813: LD_INT 1
55815: NEG
55816: PPUSH
55817: LD_INT 1
55819: PPUSH
55820: CALL_OW 12
55824: PLUS
55825: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
55826: LD_ADDR_VAR 0 7
55830: PUSH
55831: LD_VAR 0 5
55835: PUSH
55836: LD_INT 1
55838: NEG
55839: PPUSH
55840: LD_INT 1
55842: PPUSH
55843: CALL_OW 12
55847: PLUS
55848: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55849: LD_VAR 0 6
55853: PPUSH
55854: LD_VAR 0 7
55858: PPUSH
55859: CALL_OW 488
55863: NOT
55864: IFFALSE 55886
// begin _x := x ;
55866: LD_ADDR_VAR 0 6
55870: PUSH
55871: LD_VAR 0 4
55875: ST_TO_ADDR
// _y := y ;
55876: LD_ADDR_VAR 0 7
55880: PUSH
55881: LD_VAR 0 5
55885: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
55886: LD_ADDR_VAR 0 3
55890: PUSH
55891: LD_INT 1
55893: PPUSH
55894: LD_VAR 0 14
55898: PPUSH
55899: CALL_OW 12
55903: ST_TO_ADDR
// case i of 1 :
55904: LD_VAR 0 3
55908: PUSH
55909: LD_INT 1
55911: DOUBLE
55912: EQUAL
55913: IFTRUE 55917
55915: GO 55934
55917: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
55918: LD_VAR 0 1
55922: PPUSH
55923: LD_VAR 0 10
55927: PPUSH
55928: CALL_OW 115
55932: GO 55995
55934: LD_INT 2
55936: DOUBLE
55937: EQUAL
55938: IFTRUE 55942
55940: GO 55964
55942: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
55943: LD_VAR 0 1
55947: PPUSH
55948: LD_VAR 0 6
55952: PPUSH
55953: LD_VAR 0 7
55957: PPUSH
55958: CALL_OW 153
55962: GO 55995
55964: LD_INT 3
55966: DOUBLE
55967: EQUAL
55968: IFTRUE 55972
55970: GO 55994
55972: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
55973: LD_VAR 0 1
55977: PPUSH
55978: LD_VAR 0 6
55982: PPUSH
55983: LD_VAR 0 7
55987: PPUSH
55988: CALL_OW 154
55992: GO 55995
55994: POP
// end ;
55995: LD_VAR 0 2
55999: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
56000: LD_INT 0
56002: PPUSH
56003: PPUSH
56004: PPUSH
56005: PPUSH
56006: PPUSH
56007: PPUSH
// if not unit or not building then
56008: LD_VAR 0 1
56012: NOT
56013: PUSH
56014: LD_VAR 0 2
56018: NOT
56019: OR
56020: IFFALSE 56024
// exit ;
56022: GO 56182
// x := GetX ( building ) ;
56024: LD_ADDR_VAR 0 5
56028: PUSH
56029: LD_VAR 0 2
56033: PPUSH
56034: CALL_OW 250
56038: ST_TO_ADDR
// y := GetY ( building ) ;
56039: LD_ADDR_VAR 0 6
56043: PUSH
56044: LD_VAR 0 2
56048: PPUSH
56049: CALL_OW 251
56053: ST_TO_ADDR
// for i = 0 to 5 do
56054: LD_ADDR_VAR 0 4
56058: PUSH
56059: DOUBLE
56060: LD_INT 0
56062: DEC
56063: ST_TO_ADDR
56064: LD_INT 5
56066: PUSH
56067: FOR_TO
56068: IFFALSE 56180
// begin _x := ShiftX ( x , i , 3 ) ;
56070: LD_ADDR_VAR 0 7
56074: PUSH
56075: LD_VAR 0 5
56079: PPUSH
56080: LD_VAR 0 4
56084: PPUSH
56085: LD_INT 3
56087: PPUSH
56088: CALL_OW 272
56092: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
56093: LD_ADDR_VAR 0 8
56097: PUSH
56098: LD_VAR 0 6
56102: PPUSH
56103: LD_VAR 0 4
56107: PPUSH
56108: LD_INT 3
56110: PPUSH
56111: CALL_OW 273
56115: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56116: LD_VAR 0 7
56120: PPUSH
56121: LD_VAR 0 8
56125: PPUSH
56126: CALL_OW 488
56130: NOT
56131: IFFALSE 56135
// continue ;
56133: GO 56067
// if HexInfo ( _x , _y ) = 0 then
56135: LD_VAR 0 7
56139: PPUSH
56140: LD_VAR 0 8
56144: PPUSH
56145: CALL_OW 428
56149: PUSH
56150: LD_INT 0
56152: EQUAL
56153: IFFALSE 56178
// begin ComMoveXY ( unit , _x , _y ) ;
56155: LD_VAR 0 1
56159: PPUSH
56160: LD_VAR 0 7
56164: PPUSH
56165: LD_VAR 0 8
56169: PPUSH
56170: CALL_OW 111
// exit ;
56174: POP
56175: POP
56176: GO 56182
// end ; end ;
56178: GO 56067
56180: POP
56181: POP
// end ;
56182: LD_VAR 0 3
56186: RET
// export function ScanBase ( side , base_area ) ; begin
56187: LD_INT 0
56189: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
56190: LD_ADDR_VAR 0 3
56194: PUSH
56195: LD_VAR 0 2
56199: PPUSH
56200: LD_INT 81
56202: PUSH
56203: LD_VAR 0 1
56207: PUSH
56208: EMPTY
56209: LIST
56210: LIST
56211: PPUSH
56212: CALL_OW 70
56216: ST_TO_ADDR
// end ;
56217: LD_VAR 0 3
56221: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
56222: LD_INT 0
56224: PPUSH
56225: PPUSH
56226: PPUSH
56227: PPUSH
// result := false ;
56228: LD_ADDR_VAR 0 2
56232: PUSH
56233: LD_INT 0
56235: ST_TO_ADDR
// side := GetSide ( unit ) ;
56236: LD_ADDR_VAR 0 3
56240: PUSH
56241: LD_VAR 0 1
56245: PPUSH
56246: CALL_OW 255
56250: ST_TO_ADDR
// nat := GetNation ( unit ) ;
56251: LD_ADDR_VAR 0 4
56255: PUSH
56256: LD_VAR 0 1
56260: PPUSH
56261: CALL_OW 248
56265: ST_TO_ADDR
// case nat of 1 :
56266: LD_VAR 0 4
56270: PUSH
56271: LD_INT 1
56273: DOUBLE
56274: EQUAL
56275: IFTRUE 56279
56277: GO 56290
56279: POP
// tech := tech_lassight ; 2 :
56280: LD_ADDR_VAR 0 5
56284: PUSH
56285: LD_INT 12
56287: ST_TO_ADDR
56288: GO 56329
56290: LD_INT 2
56292: DOUBLE
56293: EQUAL
56294: IFTRUE 56298
56296: GO 56309
56298: POP
// tech := tech_mortar ; 3 :
56299: LD_ADDR_VAR 0 5
56303: PUSH
56304: LD_INT 41
56306: ST_TO_ADDR
56307: GO 56329
56309: LD_INT 3
56311: DOUBLE
56312: EQUAL
56313: IFTRUE 56317
56315: GO 56328
56317: POP
// tech := tech_bazooka ; end ;
56318: LD_ADDR_VAR 0 5
56322: PUSH
56323: LD_INT 44
56325: ST_TO_ADDR
56326: GO 56329
56328: POP
// if Researched ( side , tech ) then
56329: LD_VAR 0 3
56333: PPUSH
56334: LD_VAR 0 5
56338: PPUSH
56339: CALL_OW 325
56343: IFFALSE 56370
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
56345: LD_ADDR_VAR 0 2
56349: PUSH
56350: LD_INT 5
56352: PUSH
56353: LD_INT 8
56355: PUSH
56356: LD_INT 9
56358: PUSH
56359: EMPTY
56360: LIST
56361: LIST
56362: LIST
56363: PUSH
56364: LD_VAR 0 4
56368: ARRAY
56369: ST_TO_ADDR
// end ;
56370: LD_VAR 0 2
56374: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
56375: LD_INT 0
56377: PPUSH
56378: PPUSH
56379: PPUSH
// if not mines then
56380: LD_VAR 0 2
56384: NOT
56385: IFFALSE 56389
// exit ;
56387: GO 56533
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
56389: LD_ADDR_VAR 0 5
56393: PUSH
56394: LD_INT 81
56396: PUSH
56397: LD_VAR 0 1
56401: PUSH
56402: EMPTY
56403: LIST
56404: LIST
56405: PUSH
56406: LD_INT 3
56408: PUSH
56409: LD_INT 21
56411: PUSH
56412: LD_INT 3
56414: PUSH
56415: EMPTY
56416: LIST
56417: LIST
56418: PUSH
56419: EMPTY
56420: LIST
56421: LIST
56422: PUSH
56423: EMPTY
56424: LIST
56425: LIST
56426: PPUSH
56427: CALL_OW 69
56431: ST_TO_ADDR
// for i in mines do
56432: LD_ADDR_VAR 0 4
56436: PUSH
56437: LD_VAR 0 2
56441: PUSH
56442: FOR_IN
56443: IFFALSE 56531
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
56445: LD_VAR 0 4
56449: PUSH
56450: LD_INT 1
56452: ARRAY
56453: PPUSH
56454: LD_VAR 0 4
56458: PUSH
56459: LD_INT 2
56461: ARRAY
56462: PPUSH
56463: CALL_OW 458
56467: NOT
56468: IFFALSE 56472
// continue ;
56470: GO 56442
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
56472: LD_VAR 0 4
56476: PUSH
56477: LD_INT 1
56479: ARRAY
56480: PPUSH
56481: LD_VAR 0 4
56485: PUSH
56486: LD_INT 2
56488: ARRAY
56489: PPUSH
56490: CALL_OW 428
56494: PUSH
56495: LD_VAR 0 5
56499: IN
56500: IFFALSE 56529
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
56502: LD_VAR 0 4
56506: PUSH
56507: LD_INT 1
56509: ARRAY
56510: PPUSH
56511: LD_VAR 0 4
56515: PUSH
56516: LD_INT 2
56518: ARRAY
56519: PPUSH
56520: LD_VAR 0 1
56524: PPUSH
56525: CALL_OW 456
// end ;
56529: GO 56442
56531: POP
56532: POP
// end ;
56533: LD_VAR 0 3
56537: RET
// export function Count ( array ) ; begin
56538: LD_INT 0
56540: PPUSH
// result := array + 0 ;
56541: LD_ADDR_VAR 0 2
56545: PUSH
56546: LD_VAR 0 1
56550: PUSH
56551: LD_INT 0
56553: PLUS
56554: ST_TO_ADDR
// end ;
56555: LD_VAR 0 2
56559: RET
// export function IsEmpty ( building ) ; begin
56560: LD_INT 0
56562: PPUSH
// if not building then
56563: LD_VAR 0 1
56567: NOT
56568: IFFALSE 56572
// exit ;
56570: GO 56615
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
56572: LD_ADDR_VAR 0 2
56576: PUSH
56577: LD_VAR 0 1
56581: PUSH
56582: LD_INT 22
56584: PUSH
56585: LD_VAR 0 1
56589: PPUSH
56590: CALL_OW 255
56594: PUSH
56595: EMPTY
56596: LIST
56597: LIST
56598: PUSH
56599: LD_INT 58
56601: PUSH
56602: EMPTY
56603: LIST
56604: PUSH
56605: EMPTY
56606: LIST
56607: LIST
56608: PPUSH
56609: CALL_OW 69
56613: IN
56614: ST_TO_ADDR
// end ;
56615: LD_VAR 0 2
56619: RET
// export function IsNotFull ( building ) ; var places ; begin
56620: LD_INT 0
56622: PPUSH
56623: PPUSH
// if not building then
56624: LD_VAR 0 1
56628: NOT
56629: IFFALSE 56633
// exit ;
56631: GO 56661
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
56633: LD_ADDR_VAR 0 2
56637: PUSH
56638: LD_VAR 0 1
56642: PPUSH
56643: LD_INT 3
56645: PUSH
56646: LD_INT 62
56648: PUSH
56649: EMPTY
56650: LIST
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PPUSH
56656: CALL_OW 72
56660: ST_TO_ADDR
// end ;
56661: LD_VAR 0 2
56665: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
56666: LD_INT 0
56668: PPUSH
56669: PPUSH
56670: PPUSH
56671: PPUSH
// tmp := [ ] ;
56672: LD_ADDR_VAR 0 3
56676: PUSH
56677: EMPTY
56678: ST_TO_ADDR
// list := [ ] ;
56679: LD_ADDR_VAR 0 5
56683: PUSH
56684: EMPTY
56685: ST_TO_ADDR
// for i = 16 to 25 do
56686: LD_ADDR_VAR 0 4
56690: PUSH
56691: DOUBLE
56692: LD_INT 16
56694: DEC
56695: ST_TO_ADDR
56696: LD_INT 25
56698: PUSH
56699: FOR_TO
56700: IFFALSE 56773
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
56702: LD_ADDR_VAR 0 3
56706: PUSH
56707: LD_VAR 0 3
56711: PUSH
56712: LD_INT 22
56714: PUSH
56715: LD_VAR 0 1
56719: PPUSH
56720: CALL_OW 255
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_INT 91
56731: PUSH
56732: LD_VAR 0 1
56736: PUSH
56737: LD_INT 6
56739: PUSH
56740: EMPTY
56741: LIST
56742: LIST
56743: LIST
56744: PUSH
56745: LD_INT 30
56747: PUSH
56748: LD_VAR 0 4
56752: PUSH
56753: EMPTY
56754: LIST
56755: LIST
56756: PUSH
56757: EMPTY
56758: LIST
56759: LIST
56760: LIST
56761: PUSH
56762: EMPTY
56763: LIST
56764: PPUSH
56765: CALL_OW 69
56769: ADD
56770: ST_TO_ADDR
56771: GO 56699
56773: POP
56774: POP
// for i = 1 to tmp do
56775: LD_ADDR_VAR 0 4
56779: PUSH
56780: DOUBLE
56781: LD_INT 1
56783: DEC
56784: ST_TO_ADDR
56785: LD_VAR 0 3
56789: PUSH
56790: FOR_TO
56791: IFFALSE 56879
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
56793: LD_ADDR_VAR 0 5
56797: PUSH
56798: LD_VAR 0 5
56802: PUSH
56803: LD_VAR 0 3
56807: PUSH
56808: LD_VAR 0 4
56812: ARRAY
56813: PPUSH
56814: CALL_OW 266
56818: PUSH
56819: LD_VAR 0 3
56823: PUSH
56824: LD_VAR 0 4
56828: ARRAY
56829: PPUSH
56830: CALL_OW 250
56834: PUSH
56835: LD_VAR 0 3
56839: PUSH
56840: LD_VAR 0 4
56844: ARRAY
56845: PPUSH
56846: CALL_OW 251
56850: PUSH
56851: LD_VAR 0 3
56855: PUSH
56856: LD_VAR 0 4
56860: ARRAY
56861: PPUSH
56862: CALL_OW 254
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: LIST
56871: LIST
56872: PUSH
56873: EMPTY
56874: LIST
56875: ADD
56876: ST_TO_ADDR
56877: GO 56790
56879: POP
56880: POP
// result := list ;
56881: LD_ADDR_VAR 0 2
56885: PUSH
56886: LD_VAR 0 5
56890: ST_TO_ADDR
// end ;
56891: LD_VAR 0 2
56895: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
56896: LD_INT 0
56898: PPUSH
56899: PPUSH
56900: PPUSH
56901: PPUSH
56902: PPUSH
56903: PPUSH
56904: PPUSH
// if not factory then
56905: LD_VAR 0 1
56909: NOT
56910: IFFALSE 56914
// exit ;
56912: GO 57507
// if control = control_apeman then
56914: LD_VAR 0 4
56918: PUSH
56919: LD_INT 5
56921: EQUAL
56922: IFFALSE 57031
// begin tmp := UnitsInside ( factory ) ;
56924: LD_ADDR_VAR 0 8
56928: PUSH
56929: LD_VAR 0 1
56933: PPUSH
56934: CALL_OW 313
56938: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
56939: LD_VAR 0 8
56943: PPUSH
56944: LD_INT 25
56946: PUSH
56947: LD_INT 12
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: PPUSH
56954: CALL_OW 72
56958: NOT
56959: IFFALSE 56969
// control := control_manual ;
56961: LD_ADDR_VAR 0 4
56965: PUSH
56966: LD_INT 1
56968: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
56969: LD_ADDR_VAR 0 8
56973: PUSH
56974: LD_VAR 0 1
56978: PPUSH
56979: CALL 56666 0 1
56983: ST_TO_ADDR
// if tmp then
56984: LD_VAR 0 8
56988: IFFALSE 57031
// begin for i in tmp do
56990: LD_ADDR_VAR 0 7
56994: PUSH
56995: LD_VAR 0 8
56999: PUSH
57000: FOR_IN
57001: IFFALSE 57029
// if i [ 1 ] = b_ext_radio then
57003: LD_VAR 0 7
57007: PUSH
57008: LD_INT 1
57010: ARRAY
57011: PUSH
57012: LD_INT 22
57014: EQUAL
57015: IFFALSE 57027
// begin control := control_remote ;
57017: LD_ADDR_VAR 0 4
57021: PUSH
57022: LD_INT 2
57024: ST_TO_ADDR
// break ;
57025: GO 57029
// end ;
57027: GO 57000
57029: POP
57030: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
57031: LD_VAR 0 1
57035: PPUSH
57036: LD_VAR 0 2
57040: PPUSH
57041: LD_VAR 0 3
57045: PPUSH
57046: LD_VAR 0 4
57050: PPUSH
57051: LD_VAR 0 5
57055: PPUSH
57056: CALL_OW 448
57060: IFFALSE 57095
// begin result := [ chassis , engine , control , weapon ] ;
57062: LD_ADDR_VAR 0 6
57066: PUSH
57067: LD_VAR 0 2
57071: PUSH
57072: LD_VAR 0 3
57076: PUSH
57077: LD_VAR 0 4
57081: PUSH
57082: LD_VAR 0 5
57086: PUSH
57087: EMPTY
57088: LIST
57089: LIST
57090: LIST
57091: LIST
57092: ST_TO_ADDR
// exit ;
57093: GO 57507
// end ; _chassis := AvailableChassisList ( factory ) ;
57095: LD_ADDR_VAR 0 9
57099: PUSH
57100: LD_VAR 0 1
57104: PPUSH
57105: CALL_OW 475
57109: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
57110: LD_ADDR_VAR 0 11
57114: PUSH
57115: LD_VAR 0 1
57119: PPUSH
57120: CALL_OW 476
57124: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
57125: LD_ADDR_VAR 0 12
57129: PUSH
57130: LD_VAR 0 1
57134: PPUSH
57135: CALL_OW 477
57139: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
57140: LD_ADDR_VAR 0 10
57144: PUSH
57145: LD_VAR 0 1
57149: PPUSH
57150: CALL_OW 478
57154: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
57155: LD_VAR 0 9
57159: NOT
57160: PUSH
57161: LD_VAR 0 11
57165: NOT
57166: OR
57167: PUSH
57168: LD_VAR 0 12
57172: NOT
57173: OR
57174: PUSH
57175: LD_VAR 0 10
57179: NOT
57180: OR
57181: IFFALSE 57216
// begin result := [ chassis , engine , control , weapon ] ;
57183: LD_ADDR_VAR 0 6
57187: PUSH
57188: LD_VAR 0 2
57192: PUSH
57193: LD_VAR 0 3
57197: PUSH
57198: LD_VAR 0 4
57202: PUSH
57203: LD_VAR 0 5
57207: PUSH
57208: EMPTY
57209: LIST
57210: LIST
57211: LIST
57212: LIST
57213: ST_TO_ADDR
// exit ;
57214: GO 57507
// end ; if not chassis in _chassis then
57216: LD_VAR 0 2
57220: PUSH
57221: LD_VAR 0 9
57225: IN
57226: NOT
57227: IFFALSE 57253
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
57229: LD_ADDR_VAR 0 2
57233: PUSH
57234: LD_VAR 0 9
57238: PUSH
57239: LD_INT 1
57241: PPUSH
57242: LD_VAR 0 9
57246: PPUSH
57247: CALL_OW 12
57251: ARRAY
57252: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
57253: LD_VAR 0 2
57257: PPUSH
57258: LD_VAR 0 3
57262: PPUSH
57263: CALL 57512 0 2
57267: NOT
57268: IFFALSE 57327
// repeat engine := _engine [ 1 ] ;
57270: LD_ADDR_VAR 0 3
57274: PUSH
57275: LD_VAR 0 11
57279: PUSH
57280: LD_INT 1
57282: ARRAY
57283: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
57284: LD_ADDR_VAR 0 11
57288: PUSH
57289: LD_VAR 0 11
57293: PPUSH
57294: LD_INT 1
57296: PPUSH
57297: CALL_OW 3
57301: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
57302: LD_VAR 0 2
57306: PPUSH
57307: LD_VAR 0 3
57311: PPUSH
57312: CALL 57512 0 2
57316: PUSH
57317: LD_VAR 0 11
57321: PUSH
57322: EMPTY
57323: EQUAL
57324: OR
57325: IFFALSE 57270
// if not control in _control then
57327: LD_VAR 0 4
57331: PUSH
57332: LD_VAR 0 12
57336: IN
57337: NOT
57338: IFFALSE 57364
// control := _control [ rand ( 1 , _control ) ] ;
57340: LD_ADDR_VAR 0 4
57344: PUSH
57345: LD_VAR 0 12
57349: PUSH
57350: LD_INT 1
57352: PPUSH
57353: LD_VAR 0 12
57357: PPUSH
57358: CALL_OW 12
57362: ARRAY
57363: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
57364: LD_VAR 0 2
57368: PPUSH
57369: LD_VAR 0 5
57373: PPUSH
57374: CALL 57732 0 2
57378: NOT
57379: IFFALSE 57438
// repeat weapon := _weapon [ 1 ] ;
57381: LD_ADDR_VAR 0 5
57385: PUSH
57386: LD_VAR 0 10
57390: PUSH
57391: LD_INT 1
57393: ARRAY
57394: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
57395: LD_ADDR_VAR 0 10
57399: PUSH
57400: LD_VAR 0 10
57404: PPUSH
57405: LD_INT 1
57407: PPUSH
57408: CALL_OW 3
57412: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
57413: LD_VAR 0 2
57417: PPUSH
57418: LD_VAR 0 5
57422: PPUSH
57423: CALL 57732 0 2
57427: PUSH
57428: LD_VAR 0 10
57432: PUSH
57433: EMPTY
57434: EQUAL
57435: OR
57436: IFFALSE 57381
// result := [ ] ;
57438: LD_ADDR_VAR 0 6
57442: PUSH
57443: EMPTY
57444: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
57445: LD_VAR 0 1
57449: PPUSH
57450: LD_VAR 0 2
57454: PPUSH
57455: LD_VAR 0 3
57459: PPUSH
57460: LD_VAR 0 4
57464: PPUSH
57465: LD_VAR 0 5
57469: PPUSH
57470: CALL_OW 448
57474: IFFALSE 57507
// result := [ chassis , engine , control , weapon ] ;
57476: LD_ADDR_VAR 0 6
57480: PUSH
57481: LD_VAR 0 2
57485: PUSH
57486: LD_VAR 0 3
57490: PUSH
57491: LD_VAR 0 4
57495: PUSH
57496: LD_VAR 0 5
57500: PUSH
57501: EMPTY
57502: LIST
57503: LIST
57504: LIST
57505: LIST
57506: ST_TO_ADDR
// end ;
57507: LD_VAR 0 6
57511: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
57512: LD_INT 0
57514: PPUSH
// if not chassis or not engine then
57515: LD_VAR 0 1
57519: NOT
57520: PUSH
57521: LD_VAR 0 2
57525: NOT
57526: OR
57527: IFFALSE 57531
// exit ;
57529: GO 57727
// case engine of engine_solar :
57531: LD_VAR 0 2
57535: PUSH
57536: LD_INT 2
57538: DOUBLE
57539: EQUAL
57540: IFTRUE 57544
57542: GO 57582
57544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
57545: LD_ADDR_VAR 0 3
57549: PUSH
57550: LD_INT 11
57552: PUSH
57553: LD_INT 12
57555: PUSH
57556: LD_INT 13
57558: PUSH
57559: LD_INT 14
57561: PUSH
57562: LD_INT 1
57564: PUSH
57565: LD_INT 2
57567: PUSH
57568: LD_INT 3
57570: PUSH
57571: EMPTY
57572: LIST
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: LIST
57578: LIST
57579: ST_TO_ADDR
57580: GO 57711
57582: LD_INT 1
57584: DOUBLE
57585: EQUAL
57586: IFTRUE 57590
57588: GO 57652
57590: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
57591: LD_ADDR_VAR 0 3
57595: PUSH
57596: LD_INT 11
57598: PUSH
57599: LD_INT 12
57601: PUSH
57602: LD_INT 13
57604: PUSH
57605: LD_INT 14
57607: PUSH
57608: LD_INT 1
57610: PUSH
57611: LD_INT 2
57613: PUSH
57614: LD_INT 3
57616: PUSH
57617: LD_INT 4
57619: PUSH
57620: LD_INT 5
57622: PUSH
57623: LD_INT 21
57625: PUSH
57626: LD_INT 23
57628: PUSH
57629: LD_INT 22
57631: PUSH
57632: LD_INT 24
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: LIST
57639: LIST
57640: LIST
57641: LIST
57642: LIST
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: ST_TO_ADDR
57650: GO 57711
57652: LD_INT 3
57654: DOUBLE
57655: EQUAL
57656: IFTRUE 57660
57658: GO 57710
57660: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
57661: LD_ADDR_VAR 0 3
57665: PUSH
57666: LD_INT 13
57668: PUSH
57669: LD_INT 14
57671: PUSH
57672: LD_INT 2
57674: PUSH
57675: LD_INT 3
57677: PUSH
57678: LD_INT 4
57680: PUSH
57681: LD_INT 5
57683: PUSH
57684: LD_INT 21
57686: PUSH
57687: LD_INT 22
57689: PUSH
57690: LD_INT 23
57692: PUSH
57693: LD_INT 24
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: LIST
57700: LIST
57701: LIST
57702: LIST
57703: LIST
57704: LIST
57705: LIST
57706: LIST
57707: ST_TO_ADDR
57708: GO 57711
57710: POP
// result := ( chassis in result ) ;
57711: LD_ADDR_VAR 0 3
57715: PUSH
57716: LD_VAR 0 1
57720: PUSH
57721: LD_VAR 0 3
57725: IN
57726: ST_TO_ADDR
// end ;
57727: LD_VAR 0 3
57731: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
57732: LD_INT 0
57734: PPUSH
// if not chassis or not weapon then
57735: LD_VAR 0 1
57739: NOT
57740: PUSH
57741: LD_VAR 0 2
57745: NOT
57746: OR
57747: IFFALSE 57751
// exit ;
57749: GO 58811
// case weapon of us_machine_gun :
57751: LD_VAR 0 2
57755: PUSH
57756: LD_INT 2
57758: DOUBLE
57759: EQUAL
57760: IFTRUE 57764
57762: GO 57794
57764: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
57765: LD_ADDR_VAR 0 3
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: LD_INT 2
57775: PUSH
57776: LD_INT 3
57778: PUSH
57779: LD_INT 4
57781: PUSH
57782: LD_INT 5
57784: PUSH
57785: EMPTY
57786: LIST
57787: LIST
57788: LIST
57789: LIST
57790: LIST
57791: ST_TO_ADDR
57792: GO 58795
57794: LD_INT 3
57796: DOUBLE
57797: EQUAL
57798: IFTRUE 57802
57800: GO 57832
57802: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
57803: LD_ADDR_VAR 0 3
57807: PUSH
57808: LD_INT 1
57810: PUSH
57811: LD_INT 2
57813: PUSH
57814: LD_INT 3
57816: PUSH
57817: LD_INT 4
57819: PUSH
57820: LD_INT 5
57822: PUSH
57823: EMPTY
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: LIST
57829: ST_TO_ADDR
57830: GO 58795
57832: LD_INT 11
57834: DOUBLE
57835: EQUAL
57836: IFTRUE 57840
57838: GO 57870
57840: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
57841: LD_ADDR_VAR 0 3
57845: PUSH
57846: LD_INT 1
57848: PUSH
57849: LD_INT 2
57851: PUSH
57852: LD_INT 3
57854: PUSH
57855: LD_INT 4
57857: PUSH
57858: LD_INT 5
57860: PUSH
57861: EMPTY
57862: LIST
57863: LIST
57864: LIST
57865: LIST
57866: LIST
57867: ST_TO_ADDR
57868: GO 58795
57870: LD_INT 4
57872: DOUBLE
57873: EQUAL
57874: IFTRUE 57878
57876: GO 57904
57878: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
57879: LD_ADDR_VAR 0 3
57883: PUSH
57884: LD_INT 2
57886: PUSH
57887: LD_INT 3
57889: PUSH
57890: LD_INT 4
57892: PUSH
57893: LD_INT 5
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: ST_TO_ADDR
57902: GO 58795
57904: LD_INT 5
57906: DOUBLE
57907: EQUAL
57908: IFTRUE 57912
57910: GO 57938
57912: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
57913: LD_ADDR_VAR 0 3
57917: PUSH
57918: LD_INT 2
57920: PUSH
57921: LD_INT 3
57923: PUSH
57924: LD_INT 4
57926: PUSH
57927: LD_INT 5
57929: PUSH
57930: EMPTY
57931: LIST
57932: LIST
57933: LIST
57934: LIST
57935: ST_TO_ADDR
57936: GO 58795
57938: LD_INT 9
57940: DOUBLE
57941: EQUAL
57942: IFTRUE 57946
57944: GO 57972
57946: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
57947: LD_ADDR_VAR 0 3
57951: PUSH
57952: LD_INT 2
57954: PUSH
57955: LD_INT 3
57957: PUSH
57958: LD_INT 4
57960: PUSH
57961: LD_INT 5
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: ST_TO_ADDR
57970: GO 58795
57972: LD_INT 7
57974: DOUBLE
57975: EQUAL
57976: IFTRUE 57980
57978: GO 58006
57980: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
57981: LD_ADDR_VAR 0 3
57985: PUSH
57986: LD_INT 2
57988: PUSH
57989: LD_INT 3
57991: PUSH
57992: LD_INT 4
57994: PUSH
57995: LD_INT 5
57997: PUSH
57998: EMPTY
57999: LIST
58000: LIST
58001: LIST
58002: LIST
58003: ST_TO_ADDR
58004: GO 58795
58006: LD_INT 12
58008: DOUBLE
58009: EQUAL
58010: IFTRUE 58014
58012: GO 58040
58014: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
58015: LD_ADDR_VAR 0 3
58019: PUSH
58020: LD_INT 2
58022: PUSH
58023: LD_INT 3
58025: PUSH
58026: LD_INT 4
58028: PUSH
58029: LD_INT 5
58031: PUSH
58032: EMPTY
58033: LIST
58034: LIST
58035: LIST
58036: LIST
58037: ST_TO_ADDR
58038: GO 58795
58040: LD_INT 13
58042: DOUBLE
58043: EQUAL
58044: IFTRUE 58048
58046: GO 58074
58048: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
58049: LD_ADDR_VAR 0 3
58053: PUSH
58054: LD_INT 2
58056: PUSH
58057: LD_INT 3
58059: PUSH
58060: LD_INT 4
58062: PUSH
58063: LD_INT 5
58065: PUSH
58066: EMPTY
58067: LIST
58068: LIST
58069: LIST
58070: LIST
58071: ST_TO_ADDR
58072: GO 58795
58074: LD_INT 14
58076: DOUBLE
58077: EQUAL
58078: IFTRUE 58082
58080: GO 58100
58082: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
58083: LD_ADDR_VAR 0 3
58087: PUSH
58088: LD_INT 4
58090: PUSH
58091: LD_INT 5
58093: PUSH
58094: EMPTY
58095: LIST
58096: LIST
58097: ST_TO_ADDR
58098: GO 58795
58100: LD_INT 6
58102: DOUBLE
58103: EQUAL
58104: IFTRUE 58108
58106: GO 58126
58108: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
58109: LD_ADDR_VAR 0 3
58113: PUSH
58114: LD_INT 4
58116: PUSH
58117: LD_INT 5
58119: PUSH
58120: EMPTY
58121: LIST
58122: LIST
58123: ST_TO_ADDR
58124: GO 58795
58126: LD_INT 10
58128: DOUBLE
58129: EQUAL
58130: IFTRUE 58134
58132: GO 58152
58134: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
58135: LD_ADDR_VAR 0 3
58139: PUSH
58140: LD_INT 4
58142: PUSH
58143: LD_INT 5
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: ST_TO_ADDR
58150: GO 58795
58152: LD_INT 22
58154: DOUBLE
58155: EQUAL
58156: IFTRUE 58160
58158: GO 58186
58160: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
58161: LD_ADDR_VAR 0 3
58165: PUSH
58166: LD_INT 11
58168: PUSH
58169: LD_INT 12
58171: PUSH
58172: LD_INT 13
58174: PUSH
58175: LD_INT 14
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: LIST
58182: LIST
58183: ST_TO_ADDR
58184: GO 58795
58186: LD_INT 23
58188: DOUBLE
58189: EQUAL
58190: IFTRUE 58194
58192: GO 58220
58194: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
58195: LD_ADDR_VAR 0 3
58199: PUSH
58200: LD_INT 11
58202: PUSH
58203: LD_INT 12
58205: PUSH
58206: LD_INT 13
58208: PUSH
58209: LD_INT 14
58211: PUSH
58212: EMPTY
58213: LIST
58214: LIST
58215: LIST
58216: LIST
58217: ST_TO_ADDR
58218: GO 58795
58220: LD_INT 24
58222: DOUBLE
58223: EQUAL
58224: IFTRUE 58228
58226: GO 58254
58228: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
58229: LD_ADDR_VAR 0 3
58233: PUSH
58234: LD_INT 11
58236: PUSH
58237: LD_INT 12
58239: PUSH
58240: LD_INT 13
58242: PUSH
58243: LD_INT 14
58245: PUSH
58246: EMPTY
58247: LIST
58248: LIST
58249: LIST
58250: LIST
58251: ST_TO_ADDR
58252: GO 58795
58254: LD_INT 30
58256: DOUBLE
58257: EQUAL
58258: IFTRUE 58262
58260: GO 58288
58262: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
58263: LD_ADDR_VAR 0 3
58267: PUSH
58268: LD_INT 11
58270: PUSH
58271: LD_INT 12
58273: PUSH
58274: LD_INT 13
58276: PUSH
58277: LD_INT 14
58279: PUSH
58280: EMPTY
58281: LIST
58282: LIST
58283: LIST
58284: LIST
58285: ST_TO_ADDR
58286: GO 58795
58288: LD_INT 25
58290: DOUBLE
58291: EQUAL
58292: IFTRUE 58296
58294: GO 58314
58296: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
58297: LD_ADDR_VAR 0 3
58301: PUSH
58302: LD_INT 13
58304: PUSH
58305: LD_INT 14
58307: PUSH
58308: EMPTY
58309: LIST
58310: LIST
58311: ST_TO_ADDR
58312: GO 58795
58314: LD_INT 27
58316: DOUBLE
58317: EQUAL
58318: IFTRUE 58322
58320: GO 58340
58322: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
58323: LD_ADDR_VAR 0 3
58327: PUSH
58328: LD_INT 13
58330: PUSH
58331: LD_INT 14
58333: PUSH
58334: EMPTY
58335: LIST
58336: LIST
58337: ST_TO_ADDR
58338: GO 58795
58340: LD_INT 92
58342: DOUBLE
58343: EQUAL
58344: IFTRUE 58348
58346: GO 58374
58348: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
58349: LD_ADDR_VAR 0 3
58353: PUSH
58354: LD_INT 11
58356: PUSH
58357: LD_INT 12
58359: PUSH
58360: LD_INT 13
58362: PUSH
58363: LD_INT 14
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: LIST
58370: LIST
58371: ST_TO_ADDR
58372: GO 58795
58374: LD_INT 28
58376: DOUBLE
58377: EQUAL
58378: IFTRUE 58382
58380: GO 58400
58382: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
58383: LD_ADDR_VAR 0 3
58387: PUSH
58388: LD_INT 13
58390: PUSH
58391: LD_INT 14
58393: PUSH
58394: EMPTY
58395: LIST
58396: LIST
58397: ST_TO_ADDR
58398: GO 58795
58400: LD_INT 29
58402: DOUBLE
58403: EQUAL
58404: IFTRUE 58408
58406: GO 58426
58408: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
58409: LD_ADDR_VAR 0 3
58413: PUSH
58414: LD_INT 13
58416: PUSH
58417: LD_INT 14
58419: PUSH
58420: EMPTY
58421: LIST
58422: LIST
58423: ST_TO_ADDR
58424: GO 58795
58426: LD_INT 31
58428: DOUBLE
58429: EQUAL
58430: IFTRUE 58434
58432: GO 58452
58434: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
58435: LD_ADDR_VAR 0 3
58439: PUSH
58440: LD_INT 13
58442: PUSH
58443: LD_INT 14
58445: PUSH
58446: EMPTY
58447: LIST
58448: LIST
58449: ST_TO_ADDR
58450: GO 58795
58452: LD_INT 26
58454: DOUBLE
58455: EQUAL
58456: IFTRUE 58460
58458: GO 58478
58460: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
58461: LD_ADDR_VAR 0 3
58465: PUSH
58466: LD_INT 13
58468: PUSH
58469: LD_INT 14
58471: PUSH
58472: EMPTY
58473: LIST
58474: LIST
58475: ST_TO_ADDR
58476: GO 58795
58478: LD_INT 42
58480: DOUBLE
58481: EQUAL
58482: IFTRUE 58486
58484: GO 58512
58486: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
58487: LD_ADDR_VAR 0 3
58491: PUSH
58492: LD_INT 21
58494: PUSH
58495: LD_INT 22
58497: PUSH
58498: LD_INT 23
58500: PUSH
58501: LD_INT 24
58503: PUSH
58504: EMPTY
58505: LIST
58506: LIST
58507: LIST
58508: LIST
58509: ST_TO_ADDR
58510: GO 58795
58512: LD_INT 43
58514: DOUBLE
58515: EQUAL
58516: IFTRUE 58520
58518: GO 58546
58520: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
58521: LD_ADDR_VAR 0 3
58525: PUSH
58526: LD_INT 21
58528: PUSH
58529: LD_INT 22
58531: PUSH
58532: LD_INT 23
58534: PUSH
58535: LD_INT 24
58537: PUSH
58538: EMPTY
58539: LIST
58540: LIST
58541: LIST
58542: LIST
58543: ST_TO_ADDR
58544: GO 58795
58546: LD_INT 44
58548: DOUBLE
58549: EQUAL
58550: IFTRUE 58554
58552: GO 58580
58554: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
58555: LD_ADDR_VAR 0 3
58559: PUSH
58560: LD_INT 21
58562: PUSH
58563: LD_INT 22
58565: PUSH
58566: LD_INT 23
58568: PUSH
58569: LD_INT 24
58571: PUSH
58572: EMPTY
58573: LIST
58574: LIST
58575: LIST
58576: LIST
58577: ST_TO_ADDR
58578: GO 58795
58580: LD_INT 45
58582: DOUBLE
58583: EQUAL
58584: IFTRUE 58588
58586: GO 58614
58588: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
58589: LD_ADDR_VAR 0 3
58593: PUSH
58594: LD_INT 21
58596: PUSH
58597: LD_INT 22
58599: PUSH
58600: LD_INT 23
58602: PUSH
58603: LD_INT 24
58605: PUSH
58606: EMPTY
58607: LIST
58608: LIST
58609: LIST
58610: LIST
58611: ST_TO_ADDR
58612: GO 58795
58614: LD_INT 49
58616: DOUBLE
58617: EQUAL
58618: IFTRUE 58622
58620: GO 58648
58622: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
58623: LD_ADDR_VAR 0 3
58627: PUSH
58628: LD_INT 21
58630: PUSH
58631: LD_INT 22
58633: PUSH
58634: LD_INT 23
58636: PUSH
58637: LD_INT 24
58639: PUSH
58640: EMPTY
58641: LIST
58642: LIST
58643: LIST
58644: LIST
58645: ST_TO_ADDR
58646: GO 58795
58648: LD_INT 51
58650: DOUBLE
58651: EQUAL
58652: IFTRUE 58656
58654: GO 58682
58656: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
58657: LD_ADDR_VAR 0 3
58661: PUSH
58662: LD_INT 21
58664: PUSH
58665: LD_INT 22
58667: PUSH
58668: LD_INT 23
58670: PUSH
58671: LD_INT 24
58673: PUSH
58674: EMPTY
58675: LIST
58676: LIST
58677: LIST
58678: LIST
58679: ST_TO_ADDR
58680: GO 58795
58682: LD_INT 52
58684: DOUBLE
58685: EQUAL
58686: IFTRUE 58690
58688: GO 58716
58690: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
58691: LD_ADDR_VAR 0 3
58695: PUSH
58696: LD_INT 21
58698: PUSH
58699: LD_INT 22
58701: PUSH
58702: LD_INT 23
58704: PUSH
58705: LD_INT 24
58707: PUSH
58708: EMPTY
58709: LIST
58710: LIST
58711: LIST
58712: LIST
58713: ST_TO_ADDR
58714: GO 58795
58716: LD_INT 53
58718: DOUBLE
58719: EQUAL
58720: IFTRUE 58724
58722: GO 58742
58724: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
58725: LD_ADDR_VAR 0 3
58729: PUSH
58730: LD_INT 23
58732: PUSH
58733: LD_INT 24
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: ST_TO_ADDR
58740: GO 58795
58742: LD_INT 46
58744: DOUBLE
58745: EQUAL
58746: IFTRUE 58750
58748: GO 58768
58750: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
58751: LD_ADDR_VAR 0 3
58755: PUSH
58756: LD_INT 23
58758: PUSH
58759: LD_INT 24
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: ST_TO_ADDR
58766: GO 58795
58768: LD_INT 47
58770: DOUBLE
58771: EQUAL
58772: IFTRUE 58776
58774: GO 58794
58776: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
58777: LD_ADDR_VAR 0 3
58781: PUSH
58782: LD_INT 23
58784: PUSH
58785: LD_INT 24
58787: PUSH
58788: EMPTY
58789: LIST
58790: LIST
58791: ST_TO_ADDR
58792: GO 58795
58794: POP
// result := ( chassis in result ) ;
58795: LD_ADDR_VAR 0 3
58799: PUSH
58800: LD_VAR 0 1
58804: PUSH
58805: LD_VAR 0 3
58809: IN
58810: ST_TO_ADDR
// end ;
58811: LD_VAR 0 3
58815: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
58816: LD_INT 0
58818: PPUSH
58819: PPUSH
58820: PPUSH
58821: PPUSH
58822: PPUSH
58823: PPUSH
58824: PPUSH
// result := array ;
58825: LD_ADDR_VAR 0 5
58829: PUSH
58830: LD_VAR 0 1
58834: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
58835: LD_VAR 0 1
58839: NOT
58840: PUSH
58841: LD_VAR 0 2
58845: NOT
58846: OR
58847: PUSH
58848: LD_VAR 0 3
58852: NOT
58853: OR
58854: PUSH
58855: LD_VAR 0 2
58859: PUSH
58860: LD_VAR 0 1
58864: GREATER
58865: OR
58866: PUSH
58867: LD_VAR 0 3
58871: PUSH
58872: LD_VAR 0 1
58876: GREATER
58877: OR
58878: IFFALSE 58882
// exit ;
58880: GO 59178
// if direction then
58882: LD_VAR 0 4
58886: IFFALSE 58950
// begin d := 1 ;
58888: LD_ADDR_VAR 0 9
58892: PUSH
58893: LD_INT 1
58895: ST_TO_ADDR
// if i_from > i_to then
58896: LD_VAR 0 2
58900: PUSH
58901: LD_VAR 0 3
58905: GREATER
58906: IFFALSE 58932
// length := ( array - i_from ) + i_to else
58908: LD_ADDR_VAR 0 11
58912: PUSH
58913: LD_VAR 0 1
58917: PUSH
58918: LD_VAR 0 2
58922: MINUS
58923: PUSH
58924: LD_VAR 0 3
58928: PLUS
58929: ST_TO_ADDR
58930: GO 58948
// length := i_to - i_from ;
58932: LD_ADDR_VAR 0 11
58936: PUSH
58937: LD_VAR 0 3
58941: PUSH
58942: LD_VAR 0 2
58946: MINUS
58947: ST_TO_ADDR
// end else
58948: GO 59011
// begin d := - 1 ;
58950: LD_ADDR_VAR 0 9
58954: PUSH
58955: LD_INT 1
58957: NEG
58958: ST_TO_ADDR
// if i_from > i_to then
58959: LD_VAR 0 2
58963: PUSH
58964: LD_VAR 0 3
58968: GREATER
58969: IFFALSE 58989
// length := i_from - i_to else
58971: LD_ADDR_VAR 0 11
58975: PUSH
58976: LD_VAR 0 2
58980: PUSH
58981: LD_VAR 0 3
58985: MINUS
58986: ST_TO_ADDR
58987: GO 59011
// length := ( array - i_to ) + i_from ;
58989: LD_ADDR_VAR 0 11
58993: PUSH
58994: LD_VAR 0 1
58998: PUSH
58999: LD_VAR 0 3
59003: MINUS
59004: PUSH
59005: LD_VAR 0 2
59009: PLUS
59010: ST_TO_ADDR
// end ; if not length then
59011: LD_VAR 0 11
59015: NOT
59016: IFFALSE 59020
// exit ;
59018: GO 59178
// tmp := array ;
59020: LD_ADDR_VAR 0 10
59024: PUSH
59025: LD_VAR 0 1
59029: ST_TO_ADDR
// for i = 1 to length do
59030: LD_ADDR_VAR 0 6
59034: PUSH
59035: DOUBLE
59036: LD_INT 1
59038: DEC
59039: ST_TO_ADDR
59040: LD_VAR 0 11
59044: PUSH
59045: FOR_TO
59046: IFFALSE 59166
// begin for j = 1 to array do
59048: LD_ADDR_VAR 0 7
59052: PUSH
59053: DOUBLE
59054: LD_INT 1
59056: DEC
59057: ST_TO_ADDR
59058: LD_VAR 0 1
59062: PUSH
59063: FOR_TO
59064: IFFALSE 59152
// begin k := j + d ;
59066: LD_ADDR_VAR 0 8
59070: PUSH
59071: LD_VAR 0 7
59075: PUSH
59076: LD_VAR 0 9
59080: PLUS
59081: ST_TO_ADDR
// if k > array then
59082: LD_VAR 0 8
59086: PUSH
59087: LD_VAR 0 1
59091: GREATER
59092: IFFALSE 59102
// k := 1 ;
59094: LD_ADDR_VAR 0 8
59098: PUSH
59099: LD_INT 1
59101: ST_TO_ADDR
// if not k then
59102: LD_VAR 0 8
59106: NOT
59107: IFFALSE 59119
// k := array ;
59109: LD_ADDR_VAR 0 8
59113: PUSH
59114: LD_VAR 0 1
59118: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
59119: LD_ADDR_VAR 0 10
59123: PUSH
59124: LD_VAR 0 10
59128: PPUSH
59129: LD_VAR 0 8
59133: PPUSH
59134: LD_VAR 0 1
59138: PUSH
59139: LD_VAR 0 7
59143: ARRAY
59144: PPUSH
59145: CALL_OW 1
59149: ST_TO_ADDR
// end ;
59150: GO 59063
59152: POP
59153: POP
// array := tmp ;
59154: LD_ADDR_VAR 0 1
59158: PUSH
59159: LD_VAR 0 10
59163: ST_TO_ADDR
// end ;
59164: GO 59045
59166: POP
59167: POP
// result := array ;
59168: LD_ADDR_VAR 0 5
59172: PUSH
59173: LD_VAR 0 1
59177: ST_TO_ADDR
// end ;
59178: LD_VAR 0 5
59182: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
59183: LD_INT 0
59185: PPUSH
59186: PPUSH
// result := 0 ;
59187: LD_ADDR_VAR 0 3
59191: PUSH
59192: LD_INT 0
59194: ST_TO_ADDR
// if not array or not value in array then
59195: LD_VAR 0 1
59199: NOT
59200: PUSH
59201: LD_VAR 0 2
59205: PUSH
59206: LD_VAR 0 1
59210: IN
59211: NOT
59212: OR
59213: IFFALSE 59217
// exit ;
59215: GO 59271
// for i = 1 to array do
59217: LD_ADDR_VAR 0 4
59221: PUSH
59222: DOUBLE
59223: LD_INT 1
59225: DEC
59226: ST_TO_ADDR
59227: LD_VAR 0 1
59231: PUSH
59232: FOR_TO
59233: IFFALSE 59269
// if value = array [ i ] then
59235: LD_VAR 0 2
59239: PUSH
59240: LD_VAR 0 1
59244: PUSH
59245: LD_VAR 0 4
59249: ARRAY
59250: EQUAL
59251: IFFALSE 59267
// begin result := i ;
59253: LD_ADDR_VAR 0 3
59257: PUSH
59258: LD_VAR 0 4
59262: ST_TO_ADDR
// exit ;
59263: POP
59264: POP
59265: GO 59271
// end ;
59267: GO 59232
59269: POP
59270: POP
// end ;
59271: LD_VAR 0 3
59275: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
59276: LD_INT 0
59278: PPUSH
// vc_chassis := chassis ;
59279: LD_ADDR_OWVAR 37
59283: PUSH
59284: LD_VAR 0 1
59288: ST_TO_ADDR
// vc_engine := engine ;
59289: LD_ADDR_OWVAR 39
59293: PUSH
59294: LD_VAR 0 2
59298: ST_TO_ADDR
// vc_control := control ;
59299: LD_ADDR_OWVAR 38
59303: PUSH
59304: LD_VAR 0 3
59308: ST_TO_ADDR
// vc_weapon := weapon ;
59309: LD_ADDR_OWVAR 40
59313: PUSH
59314: LD_VAR 0 4
59318: ST_TO_ADDR
// vc_fuel_battery := fuel ;
59319: LD_ADDR_OWVAR 41
59323: PUSH
59324: LD_VAR 0 5
59328: ST_TO_ADDR
// end ;
59329: LD_VAR 0 6
59333: RET
// export function WantPlant ( unit ) ; var task ; begin
59334: LD_INT 0
59336: PPUSH
59337: PPUSH
// result := false ;
59338: LD_ADDR_VAR 0 2
59342: PUSH
59343: LD_INT 0
59345: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
59346: LD_ADDR_VAR 0 3
59350: PUSH
59351: LD_VAR 0 1
59355: PPUSH
59356: CALL_OW 437
59360: ST_TO_ADDR
// if task then
59361: LD_VAR 0 3
59365: IFFALSE 59393
// if task [ 1 ] [ 1 ] = p then
59367: LD_VAR 0 3
59371: PUSH
59372: LD_INT 1
59374: ARRAY
59375: PUSH
59376: LD_INT 1
59378: ARRAY
59379: PUSH
59380: LD_STRING p
59382: EQUAL
59383: IFFALSE 59393
// result := true ;
59385: LD_ADDR_VAR 0 2
59389: PUSH
59390: LD_INT 1
59392: ST_TO_ADDR
// end ;
59393: LD_VAR 0 2
59397: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
59398: LD_INT 0
59400: PPUSH
59401: PPUSH
59402: PPUSH
59403: PPUSH
// if pos < 1 then
59404: LD_VAR 0 2
59408: PUSH
59409: LD_INT 1
59411: LESS
59412: IFFALSE 59416
// exit ;
59414: GO 59719
// if pos = 1 then
59416: LD_VAR 0 2
59420: PUSH
59421: LD_INT 1
59423: EQUAL
59424: IFFALSE 59457
// result := Replace ( arr , pos [ 1 ] , value ) else
59426: LD_ADDR_VAR 0 4
59430: PUSH
59431: LD_VAR 0 1
59435: PPUSH
59436: LD_VAR 0 2
59440: PUSH
59441: LD_INT 1
59443: ARRAY
59444: PPUSH
59445: LD_VAR 0 3
59449: PPUSH
59450: CALL_OW 1
59454: ST_TO_ADDR
59455: GO 59719
// begin tmp := arr ;
59457: LD_ADDR_VAR 0 6
59461: PUSH
59462: LD_VAR 0 1
59466: ST_TO_ADDR
// s_arr := [ tmp ] ;
59467: LD_ADDR_VAR 0 7
59471: PUSH
59472: LD_VAR 0 6
59476: PUSH
59477: EMPTY
59478: LIST
59479: ST_TO_ADDR
// for i = 1 to pos - 1 do
59480: LD_ADDR_VAR 0 5
59484: PUSH
59485: DOUBLE
59486: LD_INT 1
59488: DEC
59489: ST_TO_ADDR
59490: LD_VAR 0 2
59494: PUSH
59495: LD_INT 1
59497: MINUS
59498: PUSH
59499: FOR_TO
59500: IFFALSE 59545
// begin tmp := tmp [ pos [ i ] ] ;
59502: LD_ADDR_VAR 0 6
59506: PUSH
59507: LD_VAR 0 6
59511: PUSH
59512: LD_VAR 0 2
59516: PUSH
59517: LD_VAR 0 5
59521: ARRAY
59522: ARRAY
59523: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
59524: LD_ADDR_VAR 0 7
59528: PUSH
59529: LD_VAR 0 7
59533: PUSH
59534: LD_VAR 0 6
59538: PUSH
59539: EMPTY
59540: LIST
59541: ADD
59542: ST_TO_ADDR
// end ;
59543: GO 59499
59545: POP
59546: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
59547: LD_ADDR_VAR 0 6
59551: PUSH
59552: LD_VAR 0 6
59556: PPUSH
59557: LD_VAR 0 2
59561: PUSH
59562: LD_VAR 0 2
59566: ARRAY
59567: PPUSH
59568: LD_VAR 0 3
59572: PPUSH
59573: CALL_OW 1
59577: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
59578: LD_ADDR_VAR 0 7
59582: PUSH
59583: LD_VAR 0 7
59587: PPUSH
59588: LD_VAR 0 7
59592: PPUSH
59593: LD_VAR 0 6
59597: PPUSH
59598: CALL_OW 1
59602: ST_TO_ADDR
// for i = s_arr downto 2 do
59603: LD_ADDR_VAR 0 5
59607: PUSH
59608: DOUBLE
59609: LD_VAR 0 7
59613: INC
59614: ST_TO_ADDR
59615: LD_INT 2
59617: PUSH
59618: FOR_DOWNTO
59619: IFFALSE 59703
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
59621: LD_ADDR_VAR 0 6
59625: PUSH
59626: LD_VAR 0 7
59630: PUSH
59631: LD_VAR 0 5
59635: PUSH
59636: LD_INT 1
59638: MINUS
59639: ARRAY
59640: PPUSH
59641: LD_VAR 0 2
59645: PUSH
59646: LD_VAR 0 5
59650: PUSH
59651: LD_INT 1
59653: MINUS
59654: ARRAY
59655: PPUSH
59656: LD_VAR 0 7
59660: PUSH
59661: LD_VAR 0 5
59665: ARRAY
59666: PPUSH
59667: CALL_OW 1
59671: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
59672: LD_ADDR_VAR 0 7
59676: PUSH
59677: LD_VAR 0 7
59681: PPUSH
59682: LD_VAR 0 5
59686: PUSH
59687: LD_INT 1
59689: MINUS
59690: PPUSH
59691: LD_VAR 0 6
59695: PPUSH
59696: CALL_OW 1
59700: ST_TO_ADDR
// end ;
59701: GO 59618
59703: POP
59704: POP
// result := s_arr [ 1 ] ;
59705: LD_ADDR_VAR 0 4
59709: PUSH
59710: LD_VAR 0 7
59714: PUSH
59715: LD_INT 1
59717: ARRAY
59718: ST_TO_ADDR
// end ; end ;
59719: LD_VAR 0 4
59723: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
59724: LD_INT 0
59726: PPUSH
59727: PPUSH
// if not list then
59728: LD_VAR 0 1
59732: NOT
59733: IFFALSE 59737
// exit ;
59735: GO 59828
// i := list [ pos1 ] ;
59737: LD_ADDR_VAR 0 5
59741: PUSH
59742: LD_VAR 0 1
59746: PUSH
59747: LD_VAR 0 2
59751: ARRAY
59752: ST_TO_ADDR
// if not i then
59753: LD_VAR 0 5
59757: NOT
59758: IFFALSE 59762
// exit ;
59760: GO 59828
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
59762: LD_ADDR_VAR 0 1
59766: PUSH
59767: LD_VAR 0 1
59771: PPUSH
59772: LD_VAR 0 2
59776: PPUSH
59777: LD_VAR 0 1
59781: PUSH
59782: LD_VAR 0 3
59786: ARRAY
59787: PPUSH
59788: CALL_OW 1
59792: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
59793: LD_ADDR_VAR 0 1
59797: PUSH
59798: LD_VAR 0 1
59802: PPUSH
59803: LD_VAR 0 3
59807: PPUSH
59808: LD_VAR 0 5
59812: PPUSH
59813: CALL_OW 1
59817: ST_TO_ADDR
// result := list ;
59818: LD_ADDR_VAR 0 4
59822: PUSH
59823: LD_VAR 0 1
59827: ST_TO_ADDR
// end ;
59828: LD_VAR 0 4
59832: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
59833: LD_INT 0
59835: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
59836: LD_ADDR_VAR 0 5
59840: PUSH
59841: LD_VAR 0 1
59845: PPUSH
59846: CALL_OW 250
59850: PPUSH
59851: LD_VAR 0 1
59855: PPUSH
59856: CALL_OW 251
59860: PPUSH
59861: LD_VAR 0 2
59865: PPUSH
59866: LD_VAR 0 3
59870: PPUSH
59871: LD_VAR 0 4
59875: PPUSH
59876: CALL 60254 0 5
59880: ST_TO_ADDR
// end ;
59881: LD_VAR 0 5
59885: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
59886: LD_INT 0
59888: PPUSH
59889: PPUSH
59890: PPUSH
59891: PPUSH
// if not list or not unit then
59892: LD_VAR 0 2
59896: NOT
59897: PUSH
59898: LD_VAR 0 1
59902: NOT
59903: OR
59904: IFFALSE 59908
// exit ;
59906: GO 60249
// result := [ ] ;
59908: LD_ADDR_VAR 0 5
59912: PUSH
59913: EMPTY
59914: ST_TO_ADDR
// for i in list do
59915: LD_ADDR_VAR 0 6
59919: PUSH
59920: LD_VAR 0 2
59924: PUSH
59925: FOR_IN
59926: IFFALSE 60144
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
59928: LD_ADDR_VAR 0 8
59932: PUSH
59933: LD_VAR 0 1
59937: PPUSH
59938: LD_VAR 0 6
59942: PUSH
59943: LD_INT 1
59945: ARRAY
59946: PPUSH
59947: LD_VAR 0 6
59951: PUSH
59952: LD_INT 2
59954: ARRAY
59955: PPUSH
59956: CALL_OW 297
59960: ST_TO_ADDR
// if not Count ( result ) then
59961: LD_VAR 0 5
59965: PPUSH
59966: CALL 56538 0 1
59970: NOT
59971: IFFALSE 60004
// begin result := Join ( result , [ i , tmp ] ) ;
59973: LD_ADDR_VAR 0 5
59977: PUSH
59978: LD_VAR 0 5
59982: PPUSH
59983: LD_VAR 0 6
59987: PUSH
59988: LD_VAR 0 8
59992: PUSH
59993: EMPTY
59994: LIST
59995: LIST
59996: PPUSH
59997: CALL 92138 0 2
60001: ST_TO_ADDR
// continue ;
60002: GO 59925
// end ; if result [ result ] [ 2 ] <= tmp then
60004: LD_VAR 0 5
60008: PUSH
60009: LD_VAR 0 5
60013: ARRAY
60014: PUSH
60015: LD_INT 2
60017: ARRAY
60018: PUSH
60019: LD_VAR 0 8
60023: LESSEQUAL
60024: IFFALSE 60057
// result := Join ( result , [ i , tmp ] ) else
60026: LD_ADDR_VAR 0 5
60030: PUSH
60031: LD_VAR 0 5
60035: PPUSH
60036: LD_VAR 0 6
60040: PUSH
60041: LD_VAR 0 8
60045: PUSH
60046: EMPTY
60047: LIST
60048: LIST
60049: PPUSH
60050: CALL 92138 0 2
60054: ST_TO_ADDR
60055: GO 60142
// begin for j := 1 to Count ( result ) do
60057: LD_ADDR_VAR 0 7
60061: PUSH
60062: DOUBLE
60063: LD_INT 1
60065: DEC
60066: ST_TO_ADDR
60067: LD_VAR 0 5
60071: PPUSH
60072: CALL 56538 0 1
60076: PUSH
60077: FOR_TO
60078: IFFALSE 60140
// begin if tmp < result [ j ] [ 2 ] then
60080: LD_VAR 0 8
60084: PUSH
60085: LD_VAR 0 5
60089: PUSH
60090: LD_VAR 0 7
60094: ARRAY
60095: PUSH
60096: LD_INT 2
60098: ARRAY
60099: LESS
60100: IFFALSE 60138
// begin result := Insert ( result , j , [ i , tmp ] ) ;
60102: LD_ADDR_VAR 0 5
60106: PUSH
60107: LD_VAR 0 5
60111: PPUSH
60112: LD_VAR 0 7
60116: PPUSH
60117: LD_VAR 0 6
60121: PUSH
60122: LD_VAR 0 8
60126: PUSH
60127: EMPTY
60128: LIST
60129: LIST
60130: PPUSH
60131: CALL_OW 2
60135: ST_TO_ADDR
// break ;
60136: GO 60140
// end ; end ;
60138: GO 60077
60140: POP
60141: POP
// end ; end ;
60142: GO 59925
60144: POP
60145: POP
// if result and not asc then
60146: LD_VAR 0 5
60150: PUSH
60151: LD_VAR 0 3
60155: NOT
60156: AND
60157: IFFALSE 60174
// result := ReverseArray ( result ) ;
60159: LD_ADDR_VAR 0 5
60163: PUSH
60164: LD_VAR 0 5
60168: PPUSH
60169: CALL 87414 0 1
60173: ST_TO_ADDR
// tmp := [ ] ;
60174: LD_ADDR_VAR 0 8
60178: PUSH
60179: EMPTY
60180: ST_TO_ADDR
// if mode then
60181: LD_VAR 0 4
60185: IFFALSE 60249
// begin for i := 1 to result do
60187: LD_ADDR_VAR 0 6
60191: PUSH
60192: DOUBLE
60193: LD_INT 1
60195: DEC
60196: ST_TO_ADDR
60197: LD_VAR 0 5
60201: PUSH
60202: FOR_TO
60203: IFFALSE 60237
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
60205: LD_ADDR_VAR 0 8
60209: PUSH
60210: LD_VAR 0 8
60214: PPUSH
60215: LD_VAR 0 5
60219: PUSH
60220: LD_VAR 0 6
60224: ARRAY
60225: PUSH
60226: LD_INT 1
60228: ARRAY
60229: PPUSH
60230: CALL 92138 0 2
60234: ST_TO_ADDR
60235: GO 60202
60237: POP
60238: POP
// result := tmp ;
60239: LD_ADDR_VAR 0 5
60243: PUSH
60244: LD_VAR 0 8
60248: ST_TO_ADDR
// end ; end ;
60249: LD_VAR 0 5
60253: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
60254: LD_INT 0
60256: PPUSH
60257: PPUSH
60258: PPUSH
60259: PPUSH
// if not list then
60260: LD_VAR 0 3
60264: NOT
60265: IFFALSE 60269
// exit ;
60267: GO 60657
// result := [ ] ;
60269: LD_ADDR_VAR 0 6
60273: PUSH
60274: EMPTY
60275: ST_TO_ADDR
// for i in list do
60276: LD_ADDR_VAR 0 7
60280: PUSH
60281: LD_VAR 0 3
60285: PUSH
60286: FOR_IN
60287: IFFALSE 60489
// begin tmp := GetDistUnitXY ( i , x , y ) ;
60289: LD_ADDR_VAR 0 9
60293: PUSH
60294: LD_VAR 0 7
60298: PPUSH
60299: LD_VAR 0 1
60303: PPUSH
60304: LD_VAR 0 2
60308: PPUSH
60309: CALL_OW 297
60313: ST_TO_ADDR
// if not result then
60314: LD_VAR 0 6
60318: NOT
60319: IFFALSE 60345
// result := [ [ i , tmp ] ] else
60321: LD_ADDR_VAR 0 6
60325: PUSH
60326: LD_VAR 0 7
60330: PUSH
60331: LD_VAR 0 9
60335: PUSH
60336: EMPTY
60337: LIST
60338: LIST
60339: PUSH
60340: EMPTY
60341: LIST
60342: ST_TO_ADDR
60343: GO 60487
// begin if result [ result ] [ 2 ] < tmp then
60345: LD_VAR 0 6
60349: PUSH
60350: LD_VAR 0 6
60354: ARRAY
60355: PUSH
60356: LD_INT 2
60358: ARRAY
60359: PUSH
60360: LD_VAR 0 9
60364: LESS
60365: IFFALSE 60407
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
60367: LD_ADDR_VAR 0 6
60371: PUSH
60372: LD_VAR 0 6
60376: PPUSH
60377: LD_VAR 0 6
60381: PUSH
60382: LD_INT 1
60384: PLUS
60385: PPUSH
60386: LD_VAR 0 7
60390: PUSH
60391: LD_VAR 0 9
60395: PUSH
60396: EMPTY
60397: LIST
60398: LIST
60399: PPUSH
60400: CALL_OW 2
60404: ST_TO_ADDR
60405: GO 60487
// for j = 1 to result do
60407: LD_ADDR_VAR 0 8
60411: PUSH
60412: DOUBLE
60413: LD_INT 1
60415: DEC
60416: ST_TO_ADDR
60417: LD_VAR 0 6
60421: PUSH
60422: FOR_TO
60423: IFFALSE 60485
// begin if tmp < result [ j ] [ 2 ] then
60425: LD_VAR 0 9
60429: PUSH
60430: LD_VAR 0 6
60434: PUSH
60435: LD_VAR 0 8
60439: ARRAY
60440: PUSH
60441: LD_INT 2
60443: ARRAY
60444: LESS
60445: IFFALSE 60483
// begin result := Insert ( result , j , [ i , tmp ] ) ;
60447: LD_ADDR_VAR 0 6
60451: PUSH
60452: LD_VAR 0 6
60456: PPUSH
60457: LD_VAR 0 8
60461: PPUSH
60462: LD_VAR 0 7
60466: PUSH
60467: LD_VAR 0 9
60471: PUSH
60472: EMPTY
60473: LIST
60474: LIST
60475: PPUSH
60476: CALL_OW 2
60480: ST_TO_ADDR
// break ;
60481: GO 60485
// end ; end ;
60483: GO 60422
60485: POP
60486: POP
// end ; end ;
60487: GO 60286
60489: POP
60490: POP
// if result and not asc then
60491: LD_VAR 0 6
60495: PUSH
60496: LD_VAR 0 4
60500: NOT
60501: AND
60502: IFFALSE 60577
// begin tmp := result ;
60504: LD_ADDR_VAR 0 9
60508: PUSH
60509: LD_VAR 0 6
60513: ST_TO_ADDR
// for i = tmp downto 1 do
60514: LD_ADDR_VAR 0 7
60518: PUSH
60519: DOUBLE
60520: LD_VAR 0 9
60524: INC
60525: ST_TO_ADDR
60526: LD_INT 1
60528: PUSH
60529: FOR_DOWNTO
60530: IFFALSE 60575
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
60532: LD_ADDR_VAR 0 6
60536: PUSH
60537: LD_VAR 0 6
60541: PPUSH
60542: LD_VAR 0 9
60546: PUSH
60547: LD_VAR 0 7
60551: MINUS
60552: PUSH
60553: LD_INT 1
60555: PLUS
60556: PPUSH
60557: LD_VAR 0 9
60561: PUSH
60562: LD_VAR 0 7
60566: ARRAY
60567: PPUSH
60568: CALL_OW 1
60572: ST_TO_ADDR
60573: GO 60529
60575: POP
60576: POP
// end ; tmp := [ ] ;
60577: LD_ADDR_VAR 0 9
60581: PUSH
60582: EMPTY
60583: ST_TO_ADDR
// if mode then
60584: LD_VAR 0 5
60588: IFFALSE 60657
// begin for i = 1 to result do
60590: LD_ADDR_VAR 0 7
60594: PUSH
60595: DOUBLE
60596: LD_INT 1
60598: DEC
60599: ST_TO_ADDR
60600: LD_VAR 0 6
60604: PUSH
60605: FOR_TO
60606: IFFALSE 60645
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
60608: LD_ADDR_VAR 0 9
60612: PUSH
60613: LD_VAR 0 9
60617: PPUSH
60618: LD_VAR 0 7
60622: PPUSH
60623: LD_VAR 0 6
60627: PUSH
60628: LD_VAR 0 7
60632: ARRAY
60633: PUSH
60634: LD_INT 1
60636: ARRAY
60637: PPUSH
60638: CALL_OW 1
60642: ST_TO_ADDR
60643: GO 60605
60645: POP
60646: POP
// result := tmp ;
60647: LD_ADDR_VAR 0 6
60651: PUSH
60652: LD_VAR 0 9
60656: ST_TO_ADDR
// end ; end ;
60657: LD_VAR 0 6
60661: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
60662: LD_INT 0
60664: PPUSH
60665: PPUSH
60666: PPUSH
60667: PPUSH
60668: PPUSH
60669: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
60670: LD_ADDR_VAR 0 5
60674: PUSH
60675: LD_INT 0
60677: PUSH
60678: LD_INT 0
60680: PUSH
60681: LD_INT 0
60683: PUSH
60684: EMPTY
60685: PUSH
60686: EMPTY
60687: LIST
60688: LIST
60689: LIST
60690: LIST
60691: ST_TO_ADDR
// if not x or not y then
60692: LD_VAR 0 2
60696: NOT
60697: PUSH
60698: LD_VAR 0 3
60702: NOT
60703: OR
60704: IFFALSE 60708
// exit ;
60706: GO 62358
// if not range then
60708: LD_VAR 0 4
60712: NOT
60713: IFFALSE 60723
// range := 10 ;
60715: LD_ADDR_VAR 0 4
60719: PUSH
60720: LD_INT 10
60722: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
60723: LD_ADDR_VAR 0 8
60727: PUSH
60728: LD_INT 81
60730: PUSH
60731: LD_VAR 0 1
60735: PUSH
60736: EMPTY
60737: LIST
60738: LIST
60739: PUSH
60740: LD_INT 92
60742: PUSH
60743: LD_VAR 0 2
60747: PUSH
60748: LD_VAR 0 3
60752: PUSH
60753: LD_VAR 0 4
60757: PUSH
60758: EMPTY
60759: LIST
60760: LIST
60761: LIST
60762: LIST
60763: PUSH
60764: LD_INT 3
60766: PUSH
60767: LD_INT 21
60769: PUSH
60770: LD_INT 3
60772: PUSH
60773: EMPTY
60774: LIST
60775: LIST
60776: PUSH
60777: EMPTY
60778: LIST
60779: LIST
60780: PUSH
60781: EMPTY
60782: LIST
60783: LIST
60784: LIST
60785: PPUSH
60786: CALL_OW 69
60790: ST_TO_ADDR
// if not tmp then
60791: LD_VAR 0 8
60795: NOT
60796: IFFALSE 60800
// exit ;
60798: GO 62358
// for i in tmp do
60800: LD_ADDR_VAR 0 6
60804: PUSH
60805: LD_VAR 0 8
60809: PUSH
60810: FOR_IN
60811: IFFALSE 62333
// begin points := [ 0 , 0 , 0 ] ;
60813: LD_ADDR_VAR 0 9
60817: PUSH
60818: LD_INT 0
60820: PUSH
60821: LD_INT 0
60823: PUSH
60824: LD_INT 0
60826: PUSH
60827: EMPTY
60828: LIST
60829: LIST
60830: LIST
60831: ST_TO_ADDR
// bpoints := 1 ;
60832: LD_ADDR_VAR 0 10
60836: PUSH
60837: LD_INT 1
60839: ST_TO_ADDR
// case GetType ( i ) of unit_human :
60840: LD_VAR 0 6
60844: PPUSH
60845: CALL_OW 247
60849: PUSH
60850: LD_INT 1
60852: DOUBLE
60853: EQUAL
60854: IFTRUE 60858
60856: GO 61436
60858: POP
// begin if GetClass ( i ) = 1 then
60859: LD_VAR 0 6
60863: PPUSH
60864: CALL_OW 257
60868: PUSH
60869: LD_INT 1
60871: EQUAL
60872: IFFALSE 60893
// points := [ 10 , 5 , 3 ] ;
60874: LD_ADDR_VAR 0 9
60878: PUSH
60879: LD_INT 10
60881: PUSH
60882: LD_INT 5
60884: PUSH
60885: LD_INT 3
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: LIST
60892: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
60893: LD_VAR 0 6
60897: PPUSH
60898: CALL_OW 257
60902: PUSH
60903: LD_INT 2
60905: PUSH
60906: LD_INT 3
60908: PUSH
60909: LD_INT 4
60911: PUSH
60912: EMPTY
60913: LIST
60914: LIST
60915: LIST
60916: IN
60917: IFFALSE 60938
// points := [ 3 , 2 , 1 ] ;
60919: LD_ADDR_VAR 0 9
60923: PUSH
60924: LD_INT 3
60926: PUSH
60927: LD_INT 2
60929: PUSH
60930: LD_INT 1
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: LIST
60937: ST_TO_ADDR
// if GetClass ( i ) = 5 then
60938: LD_VAR 0 6
60942: PPUSH
60943: CALL_OW 257
60947: PUSH
60948: LD_INT 5
60950: EQUAL
60951: IFFALSE 60972
// points := [ 130 , 5 , 2 ] ;
60953: LD_ADDR_VAR 0 9
60957: PUSH
60958: LD_INT 130
60960: PUSH
60961: LD_INT 5
60963: PUSH
60964: LD_INT 2
60966: PUSH
60967: EMPTY
60968: LIST
60969: LIST
60970: LIST
60971: ST_TO_ADDR
// if GetClass ( i ) = 8 then
60972: LD_VAR 0 6
60976: PPUSH
60977: CALL_OW 257
60981: PUSH
60982: LD_INT 8
60984: EQUAL
60985: IFFALSE 61006
// points := [ 35 , 35 , 30 ] ;
60987: LD_ADDR_VAR 0 9
60991: PUSH
60992: LD_INT 35
60994: PUSH
60995: LD_INT 35
60997: PUSH
60998: LD_INT 30
61000: PUSH
61001: EMPTY
61002: LIST
61003: LIST
61004: LIST
61005: ST_TO_ADDR
// if GetClass ( i ) = 9 then
61006: LD_VAR 0 6
61010: PPUSH
61011: CALL_OW 257
61015: PUSH
61016: LD_INT 9
61018: EQUAL
61019: IFFALSE 61040
// points := [ 20 , 55 , 40 ] ;
61021: LD_ADDR_VAR 0 9
61025: PUSH
61026: LD_INT 20
61028: PUSH
61029: LD_INT 55
61031: PUSH
61032: LD_INT 40
61034: PUSH
61035: EMPTY
61036: LIST
61037: LIST
61038: LIST
61039: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
61040: LD_VAR 0 6
61044: PPUSH
61045: CALL_OW 257
61049: PUSH
61050: LD_INT 12
61052: PUSH
61053: LD_INT 16
61055: PUSH
61056: EMPTY
61057: LIST
61058: LIST
61059: IN
61060: IFFALSE 61081
// points := [ 5 , 3 , 2 ] ;
61062: LD_ADDR_VAR 0 9
61066: PUSH
61067: LD_INT 5
61069: PUSH
61070: LD_INT 3
61072: PUSH
61073: LD_INT 2
61075: PUSH
61076: EMPTY
61077: LIST
61078: LIST
61079: LIST
61080: ST_TO_ADDR
// if GetClass ( i ) = 17 then
61081: LD_VAR 0 6
61085: PPUSH
61086: CALL_OW 257
61090: PUSH
61091: LD_INT 17
61093: EQUAL
61094: IFFALSE 61115
// points := [ 100 , 50 , 75 ] ;
61096: LD_ADDR_VAR 0 9
61100: PUSH
61101: LD_INT 100
61103: PUSH
61104: LD_INT 50
61106: PUSH
61107: LD_INT 75
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: LIST
61114: ST_TO_ADDR
// if GetClass ( i ) = 15 then
61115: LD_VAR 0 6
61119: PPUSH
61120: CALL_OW 257
61124: PUSH
61125: LD_INT 15
61127: EQUAL
61128: IFFALSE 61149
// points := [ 10 , 5 , 3 ] ;
61130: LD_ADDR_VAR 0 9
61134: PUSH
61135: LD_INT 10
61137: PUSH
61138: LD_INT 5
61140: PUSH
61141: LD_INT 3
61143: PUSH
61144: EMPTY
61145: LIST
61146: LIST
61147: LIST
61148: ST_TO_ADDR
// if GetClass ( i ) = 14 then
61149: LD_VAR 0 6
61153: PPUSH
61154: CALL_OW 257
61158: PUSH
61159: LD_INT 14
61161: EQUAL
61162: IFFALSE 61183
// points := [ 10 , 0 , 0 ] ;
61164: LD_ADDR_VAR 0 9
61168: PUSH
61169: LD_INT 10
61171: PUSH
61172: LD_INT 0
61174: PUSH
61175: LD_INT 0
61177: PUSH
61178: EMPTY
61179: LIST
61180: LIST
61181: LIST
61182: ST_TO_ADDR
// if GetClass ( i ) = 11 then
61183: LD_VAR 0 6
61187: PPUSH
61188: CALL_OW 257
61192: PUSH
61193: LD_INT 11
61195: EQUAL
61196: IFFALSE 61217
// points := [ 30 , 10 , 5 ] ;
61198: LD_ADDR_VAR 0 9
61202: PUSH
61203: LD_INT 30
61205: PUSH
61206: LD_INT 10
61208: PUSH
61209: LD_INT 5
61211: PUSH
61212: EMPTY
61213: LIST
61214: LIST
61215: LIST
61216: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
61217: LD_VAR 0 1
61221: PPUSH
61222: LD_INT 5
61224: PPUSH
61225: CALL_OW 321
61229: PUSH
61230: LD_INT 2
61232: EQUAL
61233: IFFALSE 61250
// bpoints := bpoints * 1.8 ;
61235: LD_ADDR_VAR 0 10
61239: PUSH
61240: LD_VAR 0 10
61244: PUSH
61245: LD_REAL  1.80000000000000E+0000
61248: MUL
61249: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
61250: LD_VAR 0 6
61254: PPUSH
61255: CALL_OW 257
61259: PUSH
61260: LD_INT 1
61262: PUSH
61263: LD_INT 2
61265: PUSH
61266: LD_INT 3
61268: PUSH
61269: LD_INT 4
61271: PUSH
61272: EMPTY
61273: LIST
61274: LIST
61275: LIST
61276: LIST
61277: IN
61278: PUSH
61279: LD_VAR 0 1
61283: PPUSH
61284: LD_INT 51
61286: PPUSH
61287: CALL_OW 321
61291: PUSH
61292: LD_INT 2
61294: EQUAL
61295: AND
61296: IFFALSE 61313
// bpoints := bpoints * 1.2 ;
61298: LD_ADDR_VAR 0 10
61302: PUSH
61303: LD_VAR 0 10
61307: PUSH
61308: LD_REAL  1.20000000000000E+0000
61311: MUL
61312: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
61313: LD_VAR 0 6
61317: PPUSH
61318: CALL_OW 257
61322: PUSH
61323: LD_INT 5
61325: PUSH
61326: LD_INT 7
61328: PUSH
61329: LD_INT 9
61331: PUSH
61332: EMPTY
61333: LIST
61334: LIST
61335: LIST
61336: IN
61337: PUSH
61338: LD_VAR 0 1
61342: PPUSH
61343: LD_INT 52
61345: PPUSH
61346: CALL_OW 321
61350: PUSH
61351: LD_INT 2
61353: EQUAL
61354: AND
61355: IFFALSE 61372
// bpoints := bpoints * 1.5 ;
61357: LD_ADDR_VAR 0 10
61361: PUSH
61362: LD_VAR 0 10
61366: PUSH
61367: LD_REAL  1.50000000000000E+0000
61370: MUL
61371: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
61372: LD_VAR 0 1
61376: PPUSH
61377: LD_INT 66
61379: PPUSH
61380: CALL_OW 321
61384: PUSH
61385: LD_INT 2
61387: EQUAL
61388: IFFALSE 61405
// bpoints := bpoints * 1.1 ;
61390: LD_ADDR_VAR 0 10
61394: PUSH
61395: LD_VAR 0 10
61399: PUSH
61400: LD_REAL  1.10000000000000E+0000
61403: MUL
61404: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
61405: LD_ADDR_VAR 0 10
61409: PUSH
61410: LD_VAR 0 10
61414: PUSH
61415: LD_VAR 0 6
61419: PPUSH
61420: LD_INT 1
61422: PPUSH
61423: CALL_OW 259
61427: PUSH
61428: LD_REAL  1.15000000000000E+0000
61431: MUL
61432: MUL
61433: ST_TO_ADDR
// end ; unit_vehicle :
61434: GO 62262
61436: LD_INT 2
61438: DOUBLE
61439: EQUAL
61440: IFTRUE 61444
61442: GO 62250
61444: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
61445: LD_VAR 0 6
61449: PPUSH
61450: CALL_OW 264
61454: PUSH
61455: LD_INT 2
61457: PUSH
61458: LD_INT 42
61460: PUSH
61461: LD_INT 24
61463: PUSH
61464: EMPTY
61465: LIST
61466: LIST
61467: LIST
61468: IN
61469: IFFALSE 61490
// points := [ 25 , 5 , 3 ] ;
61471: LD_ADDR_VAR 0 9
61475: PUSH
61476: LD_INT 25
61478: PUSH
61479: LD_INT 5
61481: PUSH
61482: LD_INT 3
61484: PUSH
61485: EMPTY
61486: LIST
61487: LIST
61488: LIST
61489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
61490: LD_VAR 0 6
61494: PPUSH
61495: CALL_OW 264
61499: PUSH
61500: LD_INT 4
61502: PUSH
61503: LD_INT 43
61505: PUSH
61506: LD_INT 25
61508: PUSH
61509: EMPTY
61510: LIST
61511: LIST
61512: LIST
61513: IN
61514: IFFALSE 61535
// points := [ 40 , 15 , 5 ] ;
61516: LD_ADDR_VAR 0 9
61520: PUSH
61521: LD_INT 40
61523: PUSH
61524: LD_INT 15
61526: PUSH
61527: LD_INT 5
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: LIST
61534: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
61535: LD_VAR 0 6
61539: PPUSH
61540: CALL_OW 264
61544: PUSH
61545: LD_INT 3
61547: PUSH
61548: LD_INT 23
61550: PUSH
61551: EMPTY
61552: LIST
61553: LIST
61554: IN
61555: IFFALSE 61576
// points := [ 7 , 25 , 8 ] ;
61557: LD_ADDR_VAR 0 9
61561: PUSH
61562: LD_INT 7
61564: PUSH
61565: LD_INT 25
61567: PUSH
61568: LD_INT 8
61570: PUSH
61571: EMPTY
61572: LIST
61573: LIST
61574: LIST
61575: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
61576: LD_VAR 0 6
61580: PPUSH
61581: CALL_OW 264
61585: PUSH
61586: LD_INT 5
61588: PUSH
61589: LD_INT 27
61591: PUSH
61592: LD_INT 44
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: LIST
61599: IN
61600: IFFALSE 61621
// points := [ 14 , 50 , 16 ] ;
61602: LD_ADDR_VAR 0 9
61606: PUSH
61607: LD_INT 14
61609: PUSH
61610: LD_INT 50
61612: PUSH
61613: LD_INT 16
61615: PUSH
61616: EMPTY
61617: LIST
61618: LIST
61619: LIST
61620: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
61621: LD_VAR 0 6
61625: PPUSH
61626: CALL_OW 264
61630: PUSH
61631: LD_INT 6
61633: PUSH
61634: LD_INT 46
61636: PUSH
61637: EMPTY
61638: LIST
61639: LIST
61640: IN
61641: IFFALSE 61662
// points := [ 32 , 120 , 70 ] ;
61643: LD_ADDR_VAR 0 9
61647: PUSH
61648: LD_INT 32
61650: PUSH
61651: LD_INT 120
61653: PUSH
61654: LD_INT 70
61656: PUSH
61657: EMPTY
61658: LIST
61659: LIST
61660: LIST
61661: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
61662: LD_VAR 0 6
61666: PPUSH
61667: CALL_OW 264
61671: PUSH
61672: LD_INT 7
61674: PUSH
61675: LD_INT 28
61677: PUSH
61678: LD_INT 45
61680: PUSH
61681: LD_INT 92
61683: PUSH
61684: EMPTY
61685: LIST
61686: LIST
61687: LIST
61688: LIST
61689: IN
61690: IFFALSE 61711
// points := [ 35 , 20 , 45 ] ;
61692: LD_ADDR_VAR 0 9
61696: PUSH
61697: LD_INT 35
61699: PUSH
61700: LD_INT 20
61702: PUSH
61703: LD_INT 45
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: LIST
61710: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
61711: LD_VAR 0 6
61715: PPUSH
61716: CALL_OW 264
61720: PUSH
61721: LD_INT 47
61723: PUSH
61724: EMPTY
61725: LIST
61726: IN
61727: IFFALSE 61748
// points := [ 67 , 45 , 75 ] ;
61729: LD_ADDR_VAR 0 9
61733: PUSH
61734: LD_INT 67
61736: PUSH
61737: LD_INT 45
61739: PUSH
61740: LD_INT 75
61742: PUSH
61743: EMPTY
61744: LIST
61745: LIST
61746: LIST
61747: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
61748: LD_VAR 0 6
61752: PPUSH
61753: CALL_OW 264
61757: PUSH
61758: LD_INT 26
61760: PUSH
61761: EMPTY
61762: LIST
61763: IN
61764: IFFALSE 61785
// points := [ 120 , 30 , 80 ] ;
61766: LD_ADDR_VAR 0 9
61770: PUSH
61771: LD_INT 120
61773: PUSH
61774: LD_INT 30
61776: PUSH
61777: LD_INT 80
61779: PUSH
61780: EMPTY
61781: LIST
61782: LIST
61783: LIST
61784: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
61785: LD_VAR 0 6
61789: PPUSH
61790: CALL_OW 264
61794: PUSH
61795: LD_INT 22
61797: PUSH
61798: EMPTY
61799: LIST
61800: IN
61801: IFFALSE 61822
// points := [ 40 , 1 , 1 ] ;
61803: LD_ADDR_VAR 0 9
61807: PUSH
61808: LD_INT 40
61810: PUSH
61811: LD_INT 1
61813: PUSH
61814: LD_INT 1
61816: PUSH
61817: EMPTY
61818: LIST
61819: LIST
61820: LIST
61821: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
61822: LD_VAR 0 6
61826: PPUSH
61827: CALL_OW 264
61831: PUSH
61832: LD_INT 29
61834: PUSH
61835: EMPTY
61836: LIST
61837: IN
61838: IFFALSE 61859
// points := [ 70 , 200 , 400 ] ;
61840: LD_ADDR_VAR 0 9
61844: PUSH
61845: LD_INT 70
61847: PUSH
61848: LD_INT 200
61850: PUSH
61851: LD_INT 400
61853: PUSH
61854: EMPTY
61855: LIST
61856: LIST
61857: LIST
61858: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
61859: LD_VAR 0 6
61863: PPUSH
61864: CALL_OW 264
61868: PUSH
61869: LD_INT 14
61871: PUSH
61872: LD_INT 53
61874: PUSH
61875: EMPTY
61876: LIST
61877: LIST
61878: IN
61879: IFFALSE 61900
// points := [ 40 , 10 , 20 ] ;
61881: LD_ADDR_VAR 0 9
61885: PUSH
61886: LD_INT 40
61888: PUSH
61889: LD_INT 10
61891: PUSH
61892: LD_INT 20
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: LIST
61899: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
61900: LD_VAR 0 6
61904: PPUSH
61905: CALL_OW 264
61909: PUSH
61910: LD_INT 9
61912: PUSH
61913: EMPTY
61914: LIST
61915: IN
61916: IFFALSE 61937
// points := [ 5 , 70 , 20 ] ;
61918: LD_ADDR_VAR 0 9
61922: PUSH
61923: LD_INT 5
61925: PUSH
61926: LD_INT 70
61928: PUSH
61929: LD_INT 20
61931: PUSH
61932: EMPTY
61933: LIST
61934: LIST
61935: LIST
61936: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
61937: LD_VAR 0 6
61941: PPUSH
61942: CALL_OW 264
61946: PUSH
61947: LD_INT 10
61949: PUSH
61950: EMPTY
61951: LIST
61952: IN
61953: IFFALSE 61974
// points := [ 35 , 110 , 70 ] ;
61955: LD_ADDR_VAR 0 9
61959: PUSH
61960: LD_INT 35
61962: PUSH
61963: LD_INT 110
61965: PUSH
61966: LD_INT 70
61968: PUSH
61969: EMPTY
61970: LIST
61971: LIST
61972: LIST
61973: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
61974: LD_VAR 0 6
61978: PPUSH
61979: CALL_OW 265
61983: PUSH
61984: LD_INT 25
61986: EQUAL
61987: IFFALSE 62008
// points := [ 80 , 65 , 100 ] ;
61989: LD_ADDR_VAR 0 9
61993: PUSH
61994: LD_INT 80
61996: PUSH
61997: LD_INT 65
61999: PUSH
62000: LD_INT 100
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: LIST
62007: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
62008: LD_VAR 0 6
62012: PPUSH
62013: CALL_OW 263
62017: PUSH
62018: LD_INT 1
62020: EQUAL
62021: IFFALSE 62056
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
62023: LD_ADDR_VAR 0 10
62027: PUSH
62028: LD_VAR 0 10
62032: PUSH
62033: LD_VAR 0 6
62037: PPUSH
62038: CALL_OW 311
62042: PPUSH
62043: LD_INT 3
62045: PPUSH
62046: CALL_OW 259
62050: PUSH
62051: LD_INT 4
62053: MUL
62054: MUL
62055: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
62056: LD_VAR 0 6
62060: PPUSH
62061: CALL_OW 263
62065: PUSH
62066: LD_INT 2
62068: EQUAL
62069: IFFALSE 62120
// begin j := IsControledBy ( i ) ;
62071: LD_ADDR_VAR 0 7
62075: PUSH
62076: LD_VAR 0 6
62080: PPUSH
62081: CALL_OW 312
62085: ST_TO_ADDR
// if j then
62086: LD_VAR 0 7
62090: IFFALSE 62120
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
62092: LD_ADDR_VAR 0 10
62096: PUSH
62097: LD_VAR 0 10
62101: PUSH
62102: LD_VAR 0 7
62106: PPUSH
62107: LD_INT 3
62109: PPUSH
62110: CALL_OW 259
62114: PUSH
62115: LD_INT 3
62117: MUL
62118: MUL
62119: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
62120: LD_VAR 0 6
62124: PPUSH
62125: CALL_OW 264
62129: PUSH
62130: LD_INT 5
62132: PUSH
62133: LD_INT 6
62135: PUSH
62136: LD_INT 46
62138: PUSH
62139: LD_INT 44
62141: PUSH
62142: LD_INT 47
62144: PUSH
62145: LD_INT 45
62147: PUSH
62148: LD_INT 28
62150: PUSH
62151: LD_INT 7
62153: PUSH
62154: LD_INT 27
62156: PUSH
62157: LD_INT 29
62159: PUSH
62160: EMPTY
62161: LIST
62162: LIST
62163: LIST
62164: LIST
62165: LIST
62166: LIST
62167: LIST
62168: LIST
62169: LIST
62170: LIST
62171: IN
62172: PUSH
62173: LD_VAR 0 1
62177: PPUSH
62178: LD_INT 52
62180: PPUSH
62181: CALL_OW 321
62185: PUSH
62186: LD_INT 2
62188: EQUAL
62189: AND
62190: IFFALSE 62207
// bpoints := bpoints * 1.2 ;
62192: LD_ADDR_VAR 0 10
62196: PUSH
62197: LD_VAR 0 10
62201: PUSH
62202: LD_REAL  1.20000000000000E+0000
62205: MUL
62206: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
62207: LD_VAR 0 6
62211: PPUSH
62212: CALL_OW 264
62216: PUSH
62217: LD_INT 6
62219: PUSH
62220: LD_INT 46
62222: PUSH
62223: LD_INT 47
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: LIST
62230: IN
62231: IFFALSE 62248
// bpoints := bpoints * 1.2 ;
62233: LD_ADDR_VAR 0 10
62237: PUSH
62238: LD_VAR 0 10
62242: PUSH
62243: LD_REAL  1.20000000000000E+0000
62246: MUL
62247: ST_TO_ADDR
// end ; unit_building :
62248: GO 62262
62250: LD_INT 3
62252: DOUBLE
62253: EQUAL
62254: IFTRUE 62258
62256: GO 62261
62258: POP
// ; end ;
62259: GO 62262
62261: POP
// for j = 1 to 3 do
62262: LD_ADDR_VAR 0 7
62266: PUSH
62267: DOUBLE
62268: LD_INT 1
62270: DEC
62271: ST_TO_ADDR
62272: LD_INT 3
62274: PUSH
62275: FOR_TO
62276: IFFALSE 62329
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
62278: LD_ADDR_VAR 0 5
62282: PUSH
62283: LD_VAR 0 5
62287: PPUSH
62288: LD_VAR 0 7
62292: PPUSH
62293: LD_VAR 0 5
62297: PUSH
62298: LD_VAR 0 7
62302: ARRAY
62303: PUSH
62304: LD_VAR 0 9
62308: PUSH
62309: LD_VAR 0 7
62313: ARRAY
62314: PUSH
62315: LD_VAR 0 10
62319: MUL
62320: PLUS
62321: PPUSH
62322: CALL_OW 1
62326: ST_TO_ADDR
62327: GO 62275
62329: POP
62330: POP
// end ;
62331: GO 60810
62333: POP
62334: POP
// result := Replace ( result , 4 , tmp ) ;
62335: LD_ADDR_VAR 0 5
62339: PUSH
62340: LD_VAR 0 5
62344: PPUSH
62345: LD_INT 4
62347: PPUSH
62348: LD_VAR 0 8
62352: PPUSH
62353: CALL_OW 1
62357: ST_TO_ADDR
// end ;
62358: LD_VAR 0 5
62362: RET
// export function DangerAtRange ( unit , range ) ; begin
62363: LD_INT 0
62365: PPUSH
// if not unit then
62366: LD_VAR 0 1
62370: NOT
62371: IFFALSE 62375
// exit ;
62373: GO 62420
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
62375: LD_ADDR_VAR 0 3
62379: PUSH
62380: LD_VAR 0 1
62384: PPUSH
62385: CALL_OW 255
62389: PPUSH
62390: LD_VAR 0 1
62394: PPUSH
62395: CALL_OW 250
62399: PPUSH
62400: LD_VAR 0 1
62404: PPUSH
62405: CALL_OW 251
62409: PPUSH
62410: LD_VAR 0 2
62414: PPUSH
62415: CALL 60662 0 4
62419: ST_TO_ADDR
// end ;
62420: LD_VAR 0 3
62424: RET
// export function DangerInArea ( side , area ) ; begin
62425: LD_INT 0
62427: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
62428: LD_ADDR_VAR 0 3
62432: PUSH
62433: LD_VAR 0 2
62437: PPUSH
62438: LD_INT 81
62440: PUSH
62441: LD_VAR 0 1
62445: PUSH
62446: EMPTY
62447: LIST
62448: LIST
62449: PPUSH
62450: CALL_OW 70
62454: ST_TO_ADDR
// end ;
62455: LD_VAR 0 3
62459: RET
// export function IsExtension ( b ) ; begin
62460: LD_INT 0
62462: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
62463: LD_ADDR_VAR 0 2
62467: PUSH
62468: LD_VAR 0 1
62472: PUSH
62473: LD_INT 23
62475: PUSH
62476: LD_INT 20
62478: PUSH
62479: LD_INT 22
62481: PUSH
62482: LD_INT 17
62484: PUSH
62485: LD_INT 24
62487: PUSH
62488: LD_INT 21
62490: PUSH
62491: LD_INT 19
62493: PUSH
62494: LD_INT 16
62496: PUSH
62497: LD_INT 25
62499: PUSH
62500: LD_INT 18
62502: PUSH
62503: EMPTY
62504: LIST
62505: LIST
62506: LIST
62507: LIST
62508: LIST
62509: LIST
62510: LIST
62511: LIST
62512: LIST
62513: LIST
62514: IN
62515: ST_TO_ADDR
// end ;
62516: LD_VAR 0 2
62520: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
62521: LD_INT 0
62523: PPUSH
62524: PPUSH
62525: PPUSH
// result := [ ] ;
62526: LD_ADDR_VAR 0 4
62530: PUSH
62531: EMPTY
62532: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
62533: LD_ADDR_VAR 0 5
62537: PUSH
62538: LD_VAR 0 2
62542: PPUSH
62543: LD_INT 21
62545: PUSH
62546: LD_INT 3
62548: PUSH
62549: EMPTY
62550: LIST
62551: LIST
62552: PPUSH
62553: CALL_OW 70
62557: ST_TO_ADDR
// if not tmp then
62558: LD_VAR 0 5
62562: NOT
62563: IFFALSE 62567
// exit ;
62565: GO 62631
// if checkLink then
62567: LD_VAR 0 3
62571: IFFALSE 62621
// begin for i in tmp do
62573: LD_ADDR_VAR 0 6
62577: PUSH
62578: LD_VAR 0 5
62582: PUSH
62583: FOR_IN
62584: IFFALSE 62619
// if GetBase ( i ) <> base then
62586: LD_VAR 0 6
62590: PPUSH
62591: CALL_OW 274
62595: PUSH
62596: LD_VAR 0 1
62600: NONEQUAL
62601: IFFALSE 62617
// ComLinkToBase ( base , i ) ;
62603: LD_VAR 0 1
62607: PPUSH
62608: LD_VAR 0 6
62612: PPUSH
62613: CALL_OW 169
62617: GO 62583
62619: POP
62620: POP
// end ; result := tmp ;
62621: LD_ADDR_VAR 0 4
62625: PUSH
62626: LD_VAR 0 5
62630: ST_TO_ADDR
// end ;
62631: LD_VAR 0 4
62635: RET
// export function ComComplete ( units , b ) ; var i ; begin
62636: LD_INT 0
62638: PPUSH
62639: PPUSH
// if not units then
62640: LD_VAR 0 1
62644: NOT
62645: IFFALSE 62649
// exit ;
62647: GO 62739
// for i in units do
62649: LD_ADDR_VAR 0 4
62653: PUSH
62654: LD_VAR 0 1
62658: PUSH
62659: FOR_IN
62660: IFFALSE 62737
// if BuildingStatus ( b ) = bs_build then
62662: LD_VAR 0 2
62666: PPUSH
62667: CALL_OW 461
62671: PUSH
62672: LD_INT 1
62674: EQUAL
62675: IFFALSE 62735
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
62677: LD_VAR 0 4
62681: PPUSH
62682: LD_STRING h
62684: PUSH
62685: LD_VAR 0 2
62689: PPUSH
62690: CALL_OW 250
62694: PUSH
62695: LD_VAR 0 2
62699: PPUSH
62700: CALL_OW 251
62704: PUSH
62705: LD_VAR 0 2
62709: PUSH
62710: LD_INT 0
62712: PUSH
62713: LD_INT 0
62715: PUSH
62716: LD_INT 0
62718: PUSH
62719: EMPTY
62720: LIST
62721: LIST
62722: LIST
62723: LIST
62724: LIST
62725: LIST
62726: LIST
62727: PUSH
62728: EMPTY
62729: LIST
62730: PPUSH
62731: CALL_OW 446
62735: GO 62659
62737: POP
62738: POP
// end ;
62739: LD_VAR 0 3
62743: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
62744: LD_INT 0
62746: PPUSH
62747: PPUSH
62748: PPUSH
62749: PPUSH
62750: PPUSH
62751: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
62752: LD_VAR 0 1
62756: NOT
62757: PUSH
62758: LD_VAR 0 1
62762: PPUSH
62763: CALL_OW 263
62767: PUSH
62768: LD_INT 2
62770: NONEQUAL
62771: OR
62772: IFFALSE 62776
// exit ;
62774: GO 63092
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
62776: LD_ADDR_VAR 0 6
62780: PUSH
62781: LD_INT 22
62783: PUSH
62784: LD_VAR 0 1
62788: PPUSH
62789: CALL_OW 255
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 2
62800: PUSH
62801: LD_INT 30
62803: PUSH
62804: LD_INT 36
62806: PUSH
62807: EMPTY
62808: LIST
62809: LIST
62810: PUSH
62811: LD_INT 34
62813: PUSH
62814: LD_INT 31
62816: PUSH
62817: EMPTY
62818: LIST
62819: LIST
62820: PUSH
62821: EMPTY
62822: LIST
62823: LIST
62824: LIST
62825: PUSH
62826: EMPTY
62827: LIST
62828: LIST
62829: PPUSH
62830: CALL_OW 69
62834: ST_TO_ADDR
// if not tmp then
62835: LD_VAR 0 6
62839: NOT
62840: IFFALSE 62844
// exit ;
62842: GO 63092
// result := [ ] ;
62844: LD_ADDR_VAR 0 2
62848: PUSH
62849: EMPTY
62850: ST_TO_ADDR
// for i in tmp do
62851: LD_ADDR_VAR 0 3
62855: PUSH
62856: LD_VAR 0 6
62860: PUSH
62861: FOR_IN
62862: IFFALSE 62933
// begin t := UnitsInside ( i ) ;
62864: LD_ADDR_VAR 0 4
62868: PUSH
62869: LD_VAR 0 3
62873: PPUSH
62874: CALL_OW 313
62878: ST_TO_ADDR
// if t then
62879: LD_VAR 0 4
62883: IFFALSE 62931
// for j in t do
62885: LD_ADDR_VAR 0 7
62889: PUSH
62890: LD_VAR 0 4
62894: PUSH
62895: FOR_IN
62896: IFFALSE 62929
// result := Replace ( result , result + 1 , j ) ;
62898: LD_ADDR_VAR 0 2
62902: PUSH
62903: LD_VAR 0 2
62907: PPUSH
62908: LD_VAR 0 2
62912: PUSH
62913: LD_INT 1
62915: PLUS
62916: PPUSH
62917: LD_VAR 0 7
62921: PPUSH
62922: CALL_OW 1
62926: ST_TO_ADDR
62927: GO 62895
62929: POP
62930: POP
// end ;
62931: GO 62861
62933: POP
62934: POP
// if not result then
62935: LD_VAR 0 2
62939: NOT
62940: IFFALSE 62944
// exit ;
62942: GO 63092
// mech := result [ 1 ] ;
62944: LD_ADDR_VAR 0 5
62948: PUSH
62949: LD_VAR 0 2
62953: PUSH
62954: LD_INT 1
62956: ARRAY
62957: ST_TO_ADDR
// if result > 1 then
62958: LD_VAR 0 2
62962: PUSH
62963: LD_INT 1
62965: GREATER
62966: IFFALSE 63078
// begin for i = 2 to result do
62968: LD_ADDR_VAR 0 3
62972: PUSH
62973: DOUBLE
62974: LD_INT 2
62976: DEC
62977: ST_TO_ADDR
62978: LD_VAR 0 2
62982: PUSH
62983: FOR_TO
62984: IFFALSE 63076
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
62986: LD_ADDR_VAR 0 4
62990: PUSH
62991: LD_VAR 0 2
62995: PUSH
62996: LD_VAR 0 3
63000: ARRAY
63001: PPUSH
63002: LD_INT 3
63004: PPUSH
63005: CALL_OW 259
63009: PUSH
63010: LD_VAR 0 2
63014: PUSH
63015: LD_VAR 0 3
63019: ARRAY
63020: PPUSH
63021: CALL_OW 432
63025: MINUS
63026: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
63027: LD_VAR 0 4
63031: PUSH
63032: LD_VAR 0 5
63036: PPUSH
63037: LD_INT 3
63039: PPUSH
63040: CALL_OW 259
63044: PUSH
63045: LD_VAR 0 5
63049: PPUSH
63050: CALL_OW 432
63054: MINUS
63055: GREATEREQUAL
63056: IFFALSE 63074
// mech := result [ i ] ;
63058: LD_ADDR_VAR 0 5
63062: PUSH
63063: LD_VAR 0 2
63067: PUSH
63068: LD_VAR 0 3
63072: ARRAY
63073: ST_TO_ADDR
// end ;
63074: GO 62983
63076: POP
63077: POP
// end ; ComLinkTo ( vehicle , mech ) ;
63078: LD_VAR 0 1
63082: PPUSH
63083: LD_VAR 0 5
63087: PPUSH
63088: CALL_OW 135
// end ;
63092: LD_VAR 0 2
63096: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
63097: LD_INT 0
63099: PPUSH
63100: PPUSH
63101: PPUSH
63102: PPUSH
63103: PPUSH
63104: PPUSH
63105: PPUSH
63106: PPUSH
63107: PPUSH
63108: PPUSH
63109: PPUSH
63110: PPUSH
63111: PPUSH
// result := [ ] ;
63112: LD_ADDR_VAR 0 7
63116: PUSH
63117: EMPTY
63118: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
63119: LD_VAR 0 1
63123: PPUSH
63124: CALL_OW 266
63128: PUSH
63129: LD_INT 0
63131: PUSH
63132: LD_INT 1
63134: PUSH
63135: EMPTY
63136: LIST
63137: LIST
63138: IN
63139: NOT
63140: IFFALSE 63144
// exit ;
63142: GO 64778
// if name then
63144: LD_VAR 0 3
63148: IFFALSE 63164
// SetBName ( base_dep , name ) ;
63150: LD_VAR 0 1
63154: PPUSH
63155: LD_VAR 0 3
63159: PPUSH
63160: CALL_OW 500
// base := GetBase ( base_dep ) ;
63164: LD_ADDR_VAR 0 15
63168: PUSH
63169: LD_VAR 0 1
63173: PPUSH
63174: CALL_OW 274
63178: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
63179: LD_ADDR_VAR 0 16
63183: PUSH
63184: LD_VAR 0 1
63188: PPUSH
63189: CALL_OW 255
63193: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
63194: LD_ADDR_VAR 0 17
63198: PUSH
63199: LD_VAR 0 1
63203: PPUSH
63204: CALL_OW 248
63208: ST_TO_ADDR
// if sources then
63209: LD_VAR 0 5
63213: IFFALSE 63260
// for i = 1 to 3 do
63215: LD_ADDR_VAR 0 8
63219: PUSH
63220: DOUBLE
63221: LD_INT 1
63223: DEC
63224: ST_TO_ADDR
63225: LD_INT 3
63227: PUSH
63228: FOR_TO
63229: IFFALSE 63258
// AddResourceType ( base , i , sources [ i ] ) ;
63231: LD_VAR 0 15
63235: PPUSH
63236: LD_VAR 0 8
63240: PPUSH
63241: LD_VAR 0 5
63245: PUSH
63246: LD_VAR 0 8
63250: ARRAY
63251: PPUSH
63252: CALL_OW 276
63256: GO 63228
63258: POP
63259: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
63260: LD_ADDR_VAR 0 18
63264: PUSH
63265: LD_VAR 0 15
63269: PPUSH
63270: LD_VAR 0 2
63274: PPUSH
63275: LD_INT 1
63277: PPUSH
63278: CALL 62521 0 3
63282: ST_TO_ADDR
// InitHc ;
63283: CALL_OW 19
// InitUc ;
63287: CALL_OW 18
// uc_side := side ;
63291: LD_ADDR_OWVAR 20
63295: PUSH
63296: LD_VAR 0 16
63300: ST_TO_ADDR
// uc_nation := nation ;
63301: LD_ADDR_OWVAR 21
63305: PUSH
63306: LD_VAR 0 17
63310: ST_TO_ADDR
// if buildings then
63311: LD_VAR 0 18
63315: IFFALSE 64637
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
63317: LD_ADDR_VAR 0 19
63321: PUSH
63322: LD_VAR 0 18
63326: PPUSH
63327: LD_INT 2
63329: PUSH
63330: LD_INT 30
63332: PUSH
63333: LD_INT 29
63335: PUSH
63336: EMPTY
63337: LIST
63338: LIST
63339: PUSH
63340: LD_INT 30
63342: PUSH
63343: LD_INT 30
63345: PUSH
63346: EMPTY
63347: LIST
63348: LIST
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: LIST
63354: PPUSH
63355: CALL_OW 72
63359: ST_TO_ADDR
// if tmp then
63360: LD_VAR 0 19
63364: IFFALSE 63412
// for i in tmp do
63366: LD_ADDR_VAR 0 8
63370: PUSH
63371: LD_VAR 0 19
63375: PUSH
63376: FOR_IN
63377: IFFALSE 63410
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
63379: LD_VAR 0 8
63383: PPUSH
63384: CALL_OW 250
63388: PPUSH
63389: LD_VAR 0 8
63393: PPUSH
63394: CALL_OW 251
63398: PPUSH
63399: LD_VAR 0 16
63403: PPUSH
63404: CALL_OW 441
63408: GO 63376
63410: POP
63411: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
63412: LD_VAR 0 18
63416: PPUSH
63417: LD_INT 2
63419: PUSH
63420: LD_INT 30
63422: PUSH
63423: LD_INT 32
63425: PUSH
63426: EMPTY
63427: LIST
63428: LIST
63429: PUSH
63430: LD_INT 30
63432: PUSH
63433: LD_INT 33
63435: PUSH
63436: EMPTY
63437: LIST
63438: LIST
63439: PUSH
63440: EMPTY
63441: LIST
63442: LIST
63443: LIST
63444: PPUSH
63445: CALL_OW 72
63449: IFFALSE 63537
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
63451: LD_ADDR_VAR 0 8
63455: PUSH
63456: LD_VAR 0 18
63460: PPUSH
63461: LD_INT 2
63463: PUSH
63464: LD_INT 30
63466: PUSH
63467: LD_INT 32
63469: PUSH
63470: EMPTY
63471: LIST
63472: LIST
63473: PUSH
63474: LD_INT 30
63476: PUSH
63477: LD_INT 33
63479: PUSH
63480: EMPTY
63481: LIST
63482: LIST
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: LIST
63488: PPUSH
63489: CALL_OW 72
63493: PUSH
63494: FOR_IN
63495: IFFALSE 63535
// begin if not GetBWeapon ( i ) then
63497: LD_VAR 0 8
63501: PPUSH
63502: CALL_OW 269
63506: NOT
63507: IFFALSE 63533
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
63509: LD_VAR 0 8
63513: PPUSH
63514: LD_VAR 0 8
63518: PPUSH
63519: LD_VAR 0 2
63523: PPUSH
63524: CALL 64783 0 2
63528: PPUSH
63529: CALL_OW 431
// end ;
63533: GO 63494
63535: POP
63536: POP
// end ; for i = 1 to personel do
63537: LD_ADDR_VAR 0 8
63541: PUSH
63542: DOUBLE
63543: LD_INT 1
63545: DEC
63546: ST_TO_ADDR
63547: LD_VAR 0 6
63551: PUSH
63552: FOR_TO
63553: IFFALSE 64617
// begin if i > 4 then
63555: LD_VAR 0 8
63559: PUSH
63560: LD_INT 4
63562: GREATER
63563: IFFALSE 63567
// break ;
63565: GO 64617
// case i of 1 :
63567: LD_VAR 0 8
63571: PUSH
63572: LD_INT 1
63574: DOUBLE
63575: EQUAL
63576: IFTRUE 63580
63578: GO 63660
63580: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
63581: LD_ADDR_VAR 0 12
63585: PUSH
63586: LD_VAR 0 18
63590: PPUSH
63591: LD_INT 22
63593: PUSH
63594: LD_VAR 0 16
63598: PUSH
63599: EMPTY
63600: LIST
63601: LIST
63602: PUSH
63603: LD_INT 58
63605: PUSH
63606: EMPTY
63607: LIST
63608: PUSH
63609: LD_INT 2
63611: PUSH
63612: LD_INT 30
63614: PUSH
63615: LD_INT 32
63617: PUSH
63618: EMPTY
63619: LIST
63620: LIST
63621: PUSH
63622: LD_INT 30
63624: PUSH
63625: LD_INT 4
63627: PUSH
63628: EMPTY
63629: LIST
63630: LIST
63631: PUSH
63632: LD_INT 30
63634: PUSH
63635: LD_INT 5
63637: PUSH
63638: EMPTY
63639: LIST
63640: LIST
63641: PUSH
63642: EMPTY
63643: LIST
63644: LIST
63645: LIST
63646: LIST
63647: PUSH
63648: EMPTY
63649: LIST
63650: LIST
63651: LIST
63652: PPUSH
63653: CALL_OW 72
63657: ST_TO_ADDR
63658: GO 63882
63660: LD_INT 2
63662: DOUBLE
63663: EQUAL
63664: IFTRUE 63668
63666: GO 63730
63668: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
63669: LD_ADDR_VAR 0 12
63673: PUSH
63674: LD_VAR 0 18
63678: PPUSH
63679: LD_INT 22
63681: PUSH
63682: LD_VAR 0 16
63686: PUSH
63687: EMPTY
63688: LIST
63689: LIST
63690: PUSH
63691: LD_INT 2
63693: PUSH
63694: LD_INT 30
63696: PUSH
63697: LD_INT 0
63699: PUSH
63700: EMPTY
63701: LIST
63702: LIST
63703: PUSH
63704: LD_INT 30
63706: PUSH
63707: LD_INT 1
63709: PUSH
63710: EMPTY
63711: LIST
63712: LIST
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: LIST
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: PPUSH
63723: CALL_OW 72
63727: ST_TO_ADDR
63728: GO 63882
63730: LD_INT 3
63732: DOUBLE
63733: EQUAL
63734: IFTRUE 63738
63736: GO 63800
63738: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
63739: LD_ADDR_VAR 0 12
63743: PUSH
63744: LD_VAR 0 18
63748: PPUSH
63749: LD_INT 22
63751: PUSH
63752: LD_VAR 0 16
63756: PUSH
63757: EMPTY
63758: LIST
63759: LIST
63760: PUSH
63761: LD_INT 2
63763: PUSH
63764: LD_INT 30
63766: PUSH
63767: LD_INT 2
63769: PUSH
63770: EMPTY
63771: LIST
63772: LIST
63773: PUSH
63774: LD_INT 30
63776: PUSH
63777: LD_INT 3
63779: PUSH
63780: EMPTY
63781: LIST
63782: LIST
63783: PUSH
63784: EMPTY
63785: LIST
63786: LIST
63787: LIST
63788: PUSH
63789: EMPTY
63790: LIST
63791: LIST
63792: PPUSH
63793: CALL_OW 72
63797: ST_TO_ADDR
63798: GO 63882
63800: LD_INT 4
63802: DOUBLE
63803: EQUAL
63804: IFTRUE 63808
63806: GO 63881
63808: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
63809: LD_ADDR_VAR 0 12
63813: PUSH
63814: LD_VAR 0 18
63818: PPUSH
63819: LD_INT 22
63821: PUSH
63822: LD_VAR 0 16
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: PUSH
63831: LD_INT 2
63833: PUSH
63834: LD_INT 30
63836: PUSH
63837: LD_INT 6
63839: PUSH
63840: EMPTY
63841: LIST
63842: LIST
63843: PUSH
63844: LD_INT 30
63846: PUSH
63847: LD_INT 7
63849: PUSH
63850: EMPTY
63851: LIST
63852: LIST
63853: PUSH
63854: LD_INT 30
63856: PUSH
63857: LD_INT 8
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PUSH
63864: EMPTY
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: PUSH
63870: EMPTY
63871: LIST
63872: LIST
63873: PPUSH
63874: CALL_OW 72
63878: ST_TO_ADDR
63879: GO 63882
63881: POP
// if i = 1 then
63882: LD_VAR 0 8
63886: PUSH
63887: LD_INT 1
63889: EQUAL
63890: IFFALSE 64001
// begin tmp := [ ] ;
63892: LD_ADDR_VAR 0 19
63896: PUSH
63897: EMPTY
63898: ST_TO_ADDR
// for j in f do
63899: LD_ADDR_VAR 0 9
63903: PUSH
63904: LD_VAR 0 12
63908: PUSH
63909: FOR_IN
63910: IFFALSE 63983
// if GetBType ( j ) = b_bunker then
63912: LD_VAR 0 9
63916: PPUSH
63917: CALL_OW 266
63921: PUSH
63922: LD_INT 32
63924: EQUAL
63925: IFFALSE 63952
// tmp := Insert ( tmp , 1 , j ) else
63927: LD_ADDR_VAR 0 19
63931: PUSH
63932: LD_VAR 0 19
63936: PPUSH
63937: LD_INT 1
63939: PPUSH
63940: LD_VAR 0 9
63944: PPUSH
63945: CALL_OW 2
63949: ST_TO_ADDR
63950: GO 63981
// tmp := Insert ( tmp , tmp + 1 , j ) ;
63952: LD_ADDR_VAR 0 19
63956: PUSH
63957: LD_VAR 0 19
63961: PPUSH
63962: LD_VAR 0 19
63966: PUSH
63967: LD_INT 1
63969: PLUS
63970: PPUSH
63971: LD_VAR 0 9
63975: PPUSH
63976: CALL_OW 2
63980: ST_TO_ADDR
63981: GO 63909
63983: POP
63984: POP
// if tmp then
63985: LD_VAR 0 19
63989: IFFALSE 64001
// f := tmp ;
63991: LD_ADDR_VAR 0 12
63995: PUSH
63996: LD_VAR 0 19
64000: ST_TO_ADDR
// end ; x := personel [ i ] ;
64001: LD_ADDR_VAR 0 13
64005: PUSH
64006: LD_VAR 0 6
64010: PUSH
64011: LD_VAR 0 8
64015: ARRAY
64016: ST_TO_ADDR
// if x = - 1 then
64017: LD_VAR 0 13
64021: PUSH
64022: LD_INT 1
64024: NEG
64025: EQUAL
64026: IFFALSE 64235
// begin for j in f do
64028: LD_ADDR_VAR 0 9
64032: PUSH
64033: LD_VAR 0 12
64037: PUSH
64038: FOR_IN
64039: IFFALSE 64231
// repeat InitHc ;
64041: CALL_OW 19
// if GetBType ( j ) = b_barracks then
64045: LD_VAR 0 9
64049: PPUSH
64050: CALL_OW 266
64054: PUSH
64055: LD_INT 5
64057: EQUAL
64058: IFFALSE 64128
// begin if UnitsInside ( j ) < 3 then
64060: LD_VAR 0 9
64064: PPUSH
64065: CALL_OW 313
64069: PUSH
64070: LD_INT 3
64072: LESS
64073: IFFALSE 64109
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
64075: LD_INT 0
64077: PPUSH
64078: LD_INT 5
64080: PUSH
64081: LD_INT 8
64083: PUSH
64084: LD_INT 9
64086: PUSH
64087: EMPTY
64088: LIST
64089: LIST
64090: LIST
64091: PUSH
64092: LD_VAR 0 17
64096: ARRAY
64097: PPUSH
64098: LD_VAR 0 4
64102: PPUSH
64103: CALL_OW 380
64107: GO 64126
// PrepareHuman ( false , i , skill ) ;
64109: LD_INT 0
64111: PPUSH
64112: LD_VAR 0 8
64116: PPUSH
64117: LD_VAR 0 4
64121: PPUSH
64122: CALL_OW 380
// end else
64126: GO 64145
// PrepareHuman ( false , i , skill ) ;
64128: LD_INT 0
64130: PPUSH
64131: LD_VAR 0 8
64135: PPUSH
64136: LD_VAR 0 4
64140: PPUSH
64141: CALL_OW 380
// un := CreateHuman ;
64145: LD_ADDR_VAR 0 14
64149: PUSH
64150: CALL_OW 44
64154: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
64155: LD_ADDR_VAR 0 7
64159: PUSH
64160: LD_VAR 0 7
64164: PPUSH
64165: LD_INT 1
64167: PPUSH
64168: LD_VAR 0 14
64172: PPUSH
64173: CALL_OW 2
64177: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
64178: LD_VAR 0 14
64182: PPUSH
64183: LD_VAR 0 9
64187: PPUSH
64188: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
64192: LD_VAR 0 9
64196: PPUSH
64197: CALL_OW 313
64201: PUSH
64202: LD_INT 6
64204: EQUAL
64205: PUSH
64206: LD_VAR 0 9
64210: PPUSH
64211: CALL_OW 266
64215: PUSH
64216: LD_INT 32
64218: PUSH
64219: LD_INT 31
64221: PUSH
64222: EMPTY
64223: LIST
64224: LIST
64225: IN
64226: OR
64227: IFFALSE 64041
64229: GO 64038
64231: POP
64232: POP
// end else
64233: GO 64615
// for j = 1 to x do
64235: LD_ADDR_VAR 0 9
64239: PUSH
64240: DOUBLE
64241: LD_INT 1
64243: DEC
64244: ST_TO_ADDR
64245: LD_VAR 0 13
64249: PUSH
64250: FOR_TO
64251: IFFALSE 64613
// begin InitHc ;
64253: CALL_OW 19
// if not f then
64257: LD_VAR 0 12
64261: NOT
64262: IFFALSE 64351
// begin PrepareHuman ( false , i , skill ) ;
64264: LD_INT 0
64266: PPUSH
64267: LD_VAR 0 8
64271: PPUSH
64272: LD_VAR 0 4
64276: PPUSH
64277: CALL_OW 380
// un := CreateHuman ;
64281: LD_ADDR_VAR 0 14
64285: PUSH
64286: CALL_OW 44
64290: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
64291: LD_ADDR_VAR 0 7
64295: PUSH
64296: LD_VAR 0 7
64300: PPUSH
64301: LD_INT 1
64303: PPUSH
64304: LD_VAR 0 14
64308: PPUSH
64309: CALL_OW 2
64313: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
64314: LD_VAR 0 14
64318: PPUSH
64319: LD_VAR 0 1
64323: PPUSH
64324: CALL_OW 250
64328: PPUSH
64329: LD_VAR 0 1
64333: PPUSH
64334: CALL_OW 251
64338: PPUSH
64339: LD_INT 10
64341: PPUSH
64342: LD_INT 0
64344: PPUSH
64345: CALL_OW 50
// continue ;
64349: GO 64250
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
64351: LD_VAR 0 12
64355: PUSH
64356: LD_INT 1
64358: ARRAY
64359: PPUSH
64360: CALL_OW 313
64364: PUSH
64365: LD_VAR 0 12
64369: PUSH
64370: LD_INT 1
64372: ARRAY
64373: PPUSH
64374: CALL_OW 266
64378: PUSH
64379: LD_INT 32
64381: PUSH
64382: LD_INT 31
64384: PUSH
64385: EMPTY
64386: LIST
64387: LIST
64388: IN
64389: AND
64390: PUSH
64391: LD_VAR 0 12
64395: PUSH
64396: LD_INT 1
64398: ARRAY
64399: PPUSH
64400: CALL_OW 313
64404: PUSH
64405: LD_INT 6
64407: EQUAL
64408: OR
64409: IFFALSE 64429
// f := Delete ( f , 1 ) ;
64411: LD_ADDR_VAR 0 12
64415: PUSH
64416: LD_VAR 0 12
64420: PPUSH
64421: LD_INT 1
64423: PPUSH
64424: CALL_OW 3
64428: ST_TO_ADDR
// if not f then
64429: LD_VAR 0 12
64433: NOT
64434: IFFALSE 64452
// begin x := x + 2 ;
64436: LD_ADDR_VAR 0 13
64440: PUSH
64441: LD_VAR 0 13
64445: PUSH
64446: LD_INT 2
64448: PLUS
64449: ST_TO_ADDR
// continue ;
64450: GO 64250
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
64452: LD_VAR 0 12
64456: PUSH
64457: LD_INT 1
64459: ARRAY
64460: PPUSH
64461: CALL_OW 266
64465: PUSH
64466: LD_INT 5
64468: EQUAL
64469: IFFALSE 64543
// begin if UnitsInside ( f [ 1 ] ) < 3 then
64471: LD_VAR 0 12
64475: PUSH
64476: LD_INT 1
64478: ARRAY
64479: PPUSH
64480: CALL_OW 313
64484: PUSH
64485: LD_INT 3
64487: LESS
64488: IFFALSE 64524
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
64490: LD_INT 0
64492: PPUSH
64493: LD_INT 5
64495: PUSH
64496: LD_INT 8
64498: PUSH
64499: LD_INT 9
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: LIST
64506: PUSH
64507: LD_VAR 0 17
64511: ARRAY
64512: PPUSH
64513: LD_VAR 0 4
64517: PPUSH
64518: CALL_OW 380
64522: GO 64541
// PrepareHuman ( false , i , skill ) ;
64524: LD_INT 0
64526: PPUSH
64527: LD_VAR 0 8
64531: PPUSH
64532: LD_VAR 0 4
64536: PPUSH
64537: CALL_OW 380
// end else
64541: GO 64560
// PrepareHuman ( false , i , skill ) ;
64543: LD_INT 0
64545: PPUSH
64546: LD_VAR 0 8
64550: PPUSH
64551: LD_VAR 0 4
64555: PPUSH
64556: CALL_OW 380
// un := CreateHuman ;
64560: LD_ADDR_VAR 0 14
64564: PUSH
64565: CALL_OW 44
64569: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
64570: LD_ADDR_VAR 0 7
64574: PUSH
64575: LD_VAR 0 7
64579: PPUSH
64580: LD_INT 1
64582: PPUSH
64583: LD_VAR 0 14
64587: PPUSH
64588: CALL_OW 2
64592: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
64593: LD_VAR 0 14
64597: PPUSH
64598: LD_VAR 0 12
64602: PUSH
64603: LD_INT 1
64605: ARRAY
64606: PPUSH
64607: CALL_OW 52
// end ;
64611: GO 64250
64613: POP
64614: POP
// end ;
64615: GO 63552
64617: POP
64618: POP
// result := result ^ buildings ;
64619: LD_ADDR_VAR 0 7
64623: PUSH
64624: LD_VAR 0 7
64628: PUSH
64629: LD_VAR 0 18
64633: ADD
64634: ST_TO_ADDR
// end else
64635: GO 64778
// begin for i = 1 to personel do
64637: LD_ADDR_VAR 0 8
64641: PUSH
64642: DOUBLE
64643: LD_INT 1
64645: DEC
64646: ST_TO_ADDR
64647: LD_VAR 0 6
64651: PUSH
64652: FOR_TO
64653: IFFALSE 64776
// begin if i > 4 then
64655: LD_VAR 0 8
64659: PUSH
64660: LD_INT 4
64662: GREATER
64663: IFFALSE 64667
// break ;
64665: GO 64776
// x := personel [ i ] ;
64667: LD_ADDR_VAR 0 13
64671: PUSH
64672: LD_VAR 0 6
64676: PUSH
64677: LD_VAR 0 8
64681: ARRAY
64682: ST_TO_ADDR
// if x = - 1 then
64683: LD_VAR 0 13
64687: PUSH
64688: LD_INT 1
64690: NEG
64691: EQUAL
64692: IFFALSE 64696
// continue ;
64694: GO 64652
// PrepareHuman ( false , i , skill ) ;
64696: LD_INT 0
64698: PPUSH
64699: LD_VAR 0 8
64703: PPUSH
64704: LD_VAR 0 4
64708: PPUSH
64709: CALL_OW 380
// un := CreateHuman ;
64713: LD_ADDR_VAR 0 14
64717: PUSH
64718: CALL_OW 44
64722: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
64723: LD_VAR 0 14
64727: PPUSH
64728: LD_VAR 0 1
64732: PPUSH
64733: CALL_OW 250
64737: PPUSH
64738: LD_VAR 0 1
64742: PPUSH
64743: CALL_OW 251
64747: PPUSH
64748: LD_INT 10
64750: PPUSH
64751: LD_INT 0
64753: PPUSH
64754: CALL_OW 50
// result := result ^ un ;
64758: LD_ADDR_VAR 0 7
64762: PUSH
64763: LD_VAR 0 7
64767: PUSH
64768: LD_VAR 0 14
64772: ADD
64773: ST_TO_ADDR
// end ;
64774: GO 64652
64776: POP
64777: POP
// end ; end ;
64778: LD_VAR 0 7
64782: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
64783: LD_INT 0
64785: PPUSH
64786: PPUSH
64787: PPUSH
64788: PPUSH
64789: PPUSH
64790: PPUSH
64791: PPUSH
64792: PPUSH
64793: PPUSH
64794: PPUSH
64795: PPUSH
64796: PPUSH
64797: PPUSH
64798: PPUSH
64799: PPUSH
64800: PPUSH
// result := false ;
64801: LD_ADDR_VAR 0 3
64805: PUSH
64806: LD_INT 0
64808: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
64809: LD_VAR 0 1
64813: NOT
64814: PUSH
64815: LD_VAR 0 1
64819: PPUSH
64820: CALL_OW 266
64824: PUSH
64825: LD_INT 32
64827: PUSH
64828: LD_INT 33
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: IN
64835: NOT
64836: OR
64837: IFFALSE 64841
// exit ;
64839: GO 65950
// nat := GetNation ( tower ) ;
64841: LD_ADDR_VAR 0 12
64845: PUSH
64846: LD_VAR 0 1
64850: PPUSH
64851: CALL_OW 248
64855: ST_TO_ADDR
// side := GetSide ( tower ) ;
64856: LD_ADDR_VAR 0 16
64860: PUSH
64861: LD_VAR 0 1
64865: PPUSH
64866: CALL_OW 255
64870: ST_TO_ADDR
// x := GetX ( tower ) ;
64871: LD_ADDR_VAR 0 10
64875: PUSH
64876: LD_VAR 0 1
64880: PPUSH
64881: CALL_OW 250
64885: ST_TO_ADDR
// y := GetY ( tower ) ;
64886: LD_ADDR_VAR 0 11
64890: PUSH
64891: LD_VAR 0 1
64895: PPUSH
64896: CALL_OW 251
64900: ST_TO_ADDR
// if not x or not y then
64901: LD_VAR 0 10
64905: NOT
64906: PUSH
64907: LD_VAR 0 11
64911: NOT
64912: OR
64913: IFFALSE 64917
// exit ;
64915: GO 65950
// weapon := 0 ;
64917: LD_ADDR_VAR 0 18
64921: PUSH
64922: LD_INT 0
64924: ST_TO_ADDR
// fac_list := [ ] ;
64925: LD_ADDR_VAR 0 17
64929: PUSH
64930: EMPTY
64931: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
64932: LD_ADDR_VAR 0 6
64936: PUSH
64937: LD_VAR 0 1
64941: PPUSH
64942: CALL_OW 274
64946: PPUSH
64947: LD_VAR 0 2
64951: PPUSH
64952: LD_INT 0
64954: PPUSH
64955: CALL 62521 0 3
64959: PPUSH
64960: LD_INT 30
64962: PUSH
64963: LD_INT 3
64965: PUSH
64966: EMPTY
64967: LIST
64968: LIST
64969: PPUSH
64970: CALL_OW 72
64974: ST_TO_ADDR
// if not factories then
64975: LD_VAR 0 6
64979: NOT
64980: IFFALSE 64984
// exit ;
64982: GO 65950
// for i in factories do
64984: LD_ADDR_VAR 0 8
64988: PUSH
64989: LD_VAR 0 6
64993: PUSH
64994: FOR_IN
64995: IFFALSE 65020
// fac_list := fac_list union AvailableWeaponList ( i ) ;
64997: LD_ADDR_VAR 0 17
65001: PUSH
65002: LD_VAR 0 17
65006: PUSH
65007: LD_VAR 0 8
65011: PPUSH
65012: CALL_OW 478
65016: UNION
65017: ST_TO_ADDR
65018: GO 64994
65020: POP
65021: POP
// if not fac_list then
65022: LD_VAR 0 17
65026: NOT
65027: IFFALSE 65031
// exit ;
65029: GO 65950
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
65031: LD_ADDR_VAR 0 5
65035: PUSH
65036: LD_INT 4
65038: PUSH
65039: LD_INT 5
65041: PUSH
65042: LD_INT 9
65044: PUSH
65045: LD_INT 10
65047: PUSH
65048: LD_INT 6
65050: PUSH
65051: LD_INT 7
65053: PUSH
65054: LD_INT 11
65056: PUSH
65057: EMPTY
65058: LIST
65059: LIST
65060: LIST
65061: LIST
65062: LIST
65063: LIST
65064: LIST
65065: PUSH
65066: LD_INT 27
65068: PUSH
65069: LD_INT 28
65071: PUSH
65072: LD_INT 26
65074: PUSH
65075: LD_INT 30
65077: PUSH
65078: EMPTY
65079: LIST
65080: LIST
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 43
65086: PUSH
65087: LD_INT 44
65089: PUSH
65090: LD_INT 46
65092: PUSH
65093: LD_INT 45
65095: PUSH
65096: LD_INT 47
65098: PUSH
65099: LD_INT 49
65101: PUSH
65102: EMPTY
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: PUSH
65110: EMPTY
65111: LIST
65112: LIST
65113: LIST
65114: PUSH
65115: LD_VAR 0 12
65119: ARRAY
65120: ST_TO_ADDR
// list := list isect fac_list ;
65121: LD_ADDR_VAR 0 5
65125: PUSH
65126: LD_VAR 0 5
65130: PUSH
65131: LD_VAR 0 17
65135: ISECT
65136: ST_TO_ADDR
// if not list then
65137: LD_VAR 0 5
65141: NOT
65142: IFFALSE 65146
// exit ;
65144: GO 65950
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
65146: LD_VAR 0 12
65150: PUSH
65151: LD_INT 3
65153: EQUAL
65154: PUSH
65155: LD_INT 49
65157: PUSH
65158: LD_VAR 0 5
65162: IN
65163: AND
65164: PUSH
65165: LD_INT 31
65167: PPUSH
65168: LD_VAR 0 16
65172: PPUSH
65173: CALL_OW 321
65177: PUSH
65178: LD_INT 2
65180: EQUAL
65181: AND
65182: IFFALSE 65242
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
65184: LD_INT 22
65186: PUSH
65187: LD_VAR 0 16
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: LD_INT 35
65198: PUSH
65199: LD_INT 49
65201: PUSH
65202: EMPTY
65203: LIST
65204: LIST
65205: PUSH
65206: LD_INT 91
65208: PUSH
65209: LD_VAR 0 1
65213: PUSH
65214: LD_INT 10
65216: PUSH
65217: EMPTY
65218: LIST
65219: LIST
65220: LIST
65221: PUSH
65222: EMPTY
65223: LIST
65224: LIST
65225: LIST
65226: PPUSH
65227: CALL_OW 69
65231: NOT
65232: IFFALSE 65242
// weapon := ru_time_lapser ;
65234: LD_ADDR_VAR 0 18
65238: PUSH
65239: LD_INT 49
65241: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
65242: LD_VAR 0 12
65246: PUSH
65247: LD_INT 1
65249: PUSH
65250: LD_INT 2
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: IN
65257: PUSH
65258: LD_INT 11
65260: PUSH
65261: LD_VAR 0 5
65265: IN
65266: PUSH
65267: LD_INT 30
65269: PUSH
65270: LD_VAR 0 5
65274: IN
65275: OR
65276: AND
65277: PUSH
65278: LD_INT 6
65280: PPUSH
65281: LD_VAR 0 16
65285: PPUSH
65286: CALL_OW 321
65290: PUSH
65291: LD_INT 2
65293: EQUAL
65294: AND
65295: IFFALSE 65460
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
65297: LD_INT 22
65299: PUSH
65300: LD_VAR 0 16
65304: PUSH
65305: EMPTY
65306: LIST
65307: LIST
65308: PUSH
65309: LD_INT 2
65311: PUSH
65312: LD_INT 35
65314: PUSH
65315: LD_INT 11
65317: PUSH
65318: EMPTY
65319: LIST
65320: LIST
65321: PUSH
65322: LD_INT 35
65324: PUSH
65325: LD_INT 30
65327: PUSH
65328: EMPTY
65329: LIST
65330: LIST
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: LIST
65336: PUSH
65337: LD_INT 91
65339: PUSH
65340: LD_VAR 0 1
65344: PUSH
65345: LD_INT 18
65347: PUSH
65348: EMPTY
65349: LIST
65350: LIST
65351: LIST
65352: PUSH
65353: EMPTY
65354: LIST
65355: LIST
65356: LIST
65357: PPUSH
65358: CALL_OW 69
65362: NOT
65363: PUSH
65364: LD_INT 22
65366: PUSH
65367: LD_VAR 0 16
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: PUSH
65376: LD_INT 2
65378: PUSH
65379: LD_INT 30
65381: PUSH
65382: LD_INT 32
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 30
65391: PUSH
65392: LD_INT 33
65394: PUSH
65395: EMPTY
65396: LIST
65397: LIST
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: LIST
65403: PUSH
65404: LD_INT 91
65406: PUSH
65407: LD_VAR 0 1
65411: PUSH
65412: LD_INT 12
65414: PUSH
65415: EMPTY
65416: LIST
65417: LIST
65418: LIST
65419: PUSH
65420: EMPTY
65421: LIST
65422: LIST
65423: LIST
65424: PUSH
65425: EMPTY
65426: LIST
65427: PPUSH
65428: CALL_OW 69
65432: PUSH
65433: LD_INT 2
65435: GREATER
65436: AND
65437: IFFALSE 65460
// weapon := [ us_radar , ar_radar ] [ nat ] ;
65439: LD_ADDR_VAR 0 18
65443: PUSH
65444: LD_INT 11
65446: PUSH
65447: LD_INT 30
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_VAR 0 12
65458: ARRAY
65459: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
65460: LD_VAR 0 18
65464: NOT
65465: PUSH
65466: LD_INT 40
65468: PPUSH
65469: LD_VAR 0 16
65473: PPUSH
65474: CALL_OW 321
65478: PUSH
65479: LD_INT 2
65481: EQUAL
65482: AND
65483: PUSH
65484: LD_INT 7
65486: PUSH
65487: LD_VAR 0 5
65491: IN
65492: PUSH
65493: LD_INT 28
65495: PUSH
65496: LD_VAR 0 5
65500: IN
65501: OR
65502: PUSH
65503: LD_INT 45
65505: PUSH
65506: LD_VAR 0 5
65510: IN
65511: OR
65512: AND
65513: IFFALSE 65767
// begin hex := GetHexInfo ( x , y ) ;
65515: LD_ADDR_VAR 0 4
65519: PUSH
65520: LD_VAR 0 10
65524: PPUSH
65525: LD_VAR 0 11
65529: PPUSH
65530: CALL_OW 546
65534: ST_TO_ADDR
// if hex [ 1 ] then
65535: LD_VAR 0 4
65539: PUSH
65540: LD_INT 1
65542: ARRAY
65543: IFFALSE 65547
// exit ;
65545: GO 65950
// height := hex [ 2 ] ;
65547: LD_ADDR_VAR 0 15
65551: PUSH
65552: LD_VAR 0 4
65556: PUSH
65557: LD_INT 2
65559: ARRAY
65560: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
65561: LD_ADDR_VAR 0 14
65565: PUSH
65566: LD_INT 0
65568: PUSH
65569: LD_INT 2
65571: PUSH
65572: LD_INT 3
65574: PUSH
65575: LD_INT 5
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: LIST
65582: LIST
65583: ST_TO_ADDR
// for i in tmp do
65584: LD_ADDR_VAR 0 8
65588: PUSH
65589: LD_VAR 0 14
65593: PUSH
65594: FOR_IN
65595: IFFALSE 65765
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
65597: LD_ADDR_VAR 0 9
65601: PUSH
65602: LD_VAR 0 10
65606: PPUSH
65607: LD_VAR 0 8
65611: PPUSH
65612: LD_INT 5
65614: PPUSH
65615: CALL_OW 272
65619: PUSH
65620: LD_VAR 0 11
65624: PPUSH
65625: LD_VAR 0 8
65629: PPUSH
65630: LD_INT 5
65632: PPUSH
65633: CALL_OW 273
65637: PUSH
65638: EMPTY
65639: LIST
65640: LIST
65641: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
65642: LD_VAR 0 9
65646: PUSH
65647: LD_INT 1
65649: ARRAY
65650: PPUSH
65651: LD_VAR 0 9
65655: PUSH
65656: LD_INT 2
65658: ARRAY
65659: PPUSH
65660: CALL_OW 488
65664: IFFALSE 65763
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
65666: LD_ADDR_VAR 0 4
65670: PUSH
65671: LD_VAR 0 9
65675: PUSH
65676: LD_INT 1
65678: ARRAY
65679: PPUSH
65680: LD_VAR 0 9
65684: PUSH
65685: LD_INT 2
65687: ARRAY
65688: PPUSH
65689: CALL_OW 546
65693: ST_TO_ADDR
// if hex [ 1 ] then
65694: LD_VAR 0 4
65698: PUSH
65699: LD_INT 1
65701: ARRAY
65702: IFFALSE 65706
// continue ;
65704: GO 65594
// h := hex [ 2 ] ;
65706: LD_ADDR_VAR 0 13
65710: PUSH
65711: LD_VAR 0 4
65715: PUSH
65716: LD_INT 2
65718: ARRAY
65719: ST_TO_ADDR
// if h + 7 < height then
65720: LD_VAR 0 13
65724: PUSH
65725: LD_INT 7
65727: PLUS
65728: PUSH
65729: LD_VAR 0 15
65733: LESS
65734: IFFALSE 65763
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
65736: LD_ADDR_VAR 0 18
65740: PUSH
65741: LD_INT 7
65743: PUSH
65744: LD_INT 28
65746: PUSH
65747: LD_INT 45
65749: PUSH
65750: EMPTY
65751: LIST
65752: LIST
65753: LIST
65754: PUSH
65755: LD_VAR 0 12
65759: ARRAY
65760: ST_TO_ADDR
// break ;
65761: GO 65765
// end ; end ; end ;
65763: GO 65594
65765: POP
65766: POP
// end ; if not weapon then
65767: LD_VAR 0 18
65771: NOT
65772: IFFALSE 65832
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
65774: LD_ADDR_VAR 0 5
65778: PUSH
65779: LD_VAR 0 5
65783: PUSH
65784: LD_INT 11
65786: PUSH
65787: LD_INT 30
65789: PUSH
65790: LD_INT 49
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: LIST
65797: DIFF
65798: ST_TO_ADDR
// if not list then
65799: LD_VAR 0 5
65803: NOT
65804: IFFALSE 65808
// exit ;
65806: GO 65950
// weapon := list [ rand ( 1 , list ) ] ;
65808: LD_ADDR_VAR 0 18
65812: PUSH
65813: LD_VAR 0 5
65817: PUSH
65818: LD_INT 1
65820: PPUSH
65821: LD_VAR 0 5
65825: PPUSH
65826: CALL_OW 12
65830: ARRAY
65831: ST_TO_ADDR
// end ; if weapon then
65832: LD_VAR 0 18
65836: IFFALSE 65950
// begin tmp := CostOfWeapon ( weapon ) ;
65838: LD_ADDR_VAR 0 14
65842: PUSH
65843: LD_VAR 0 18
65847: PPUSH
65848: CALL_OW 451
65852: ST_TO_ADDR
// j := GetBase ( tower ) ;
65853: LD_ADDR_VAR 0 9
65857: PUSH
65858: LD_VAR 0 1
65862: PPUSH
65863: CALL_OW 274
65867: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
65868: LD_VAR 0 9
65872: PPUSH
65873: LD_INT 1
65875: PPUSH
65876: CALL_OW 275
65880: PUSH
65881: LD_VAR 0 14
65885: PUSH
65886: LD_INT 1
65888: ARRAY
65889: GREATEREQUAL
65890: PUSH
65891: LD_VAR 0 9
65895: PPUSH
65896: LD_INT 2
65898: PPUSH
65899: CALL_OW 275
65903: PUSH
65904: LD_VAR 0 14
65908: PUSH
65909: LD_INT 2
65911: ARRAY
65912: GREATEREQUAL
65913: AND
65914: PUSH
65915: LD_VAR 0 9
65919: PPUSH
65920: LD_INT 3
65922: PPUSH
65923: CALL_OW 275
65927: PUSH
65928: LD_VAR 0 14
65932: PUSH
65933: LD_INT 3
65935: ARRAY
65936: GREATEREQUAL
65937: AND
65938: IFFALSE 65950
// result := weapon ;
65940: LD_ADDR_VAR 0 3
65944: PUSH
65945: LD_VAR 0 18
65949: ST_TO_ADDR
// end ; end ;
65950: LD_VAR 0 3
65954: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
65955: LD_INT 0
65957: PPUSH
65958: PPUSH
// result := true ;
65959: LD_ADDR_VAR 0 3
65963: PUSH
65964: LD_INT 1
65966: ST_TO_ADDR
// if array1 = array2 then
65967: LD_VAR 0 1
65971: PUSH
65972: LD_VAR 0 2
65976: EQUAL
65977: IFFALSE 66037
// begin for i = 1 to array1 do
65979: LD_ADDR_VAR 0 4
65983: PUSH
65984: DOUBLE
65985: LD_INT 1
65987: DEC
65988: ST_TO_ADDR
65989: LD_VAR 0 1
65993: PUSH
65994: FOR_TO
65995: IFFALSE 66033
// if array1 [ i ] <> array2 [ i ] then
65997: LD_VAR 0 1
66001: PUSH
66002: LD_VAR 0 4
66006: ARRAY
66007: PUSH
66008: LD_VAR 0 2
66012: PUSH
66013: LD_VAR 0 4
66017: ARRAY
66018: NONEQUAL
66019: IFFALSE 66031
// begin result := false ;
66021: LD_ADDR_VAR 0 3
66025: PUSH
66026: LD_INT 0
66028: ST_TO_ADDR
// break ;
66029: GO 66033
// end ;
66031: GO 65994
66033: POP
66034: POP
// end else
66035: GO 66045
// result := false ;
66037: LD_ADDR_VAR 0 3
66041: PUSH
66042: LD_INT 0
66044: ST_TO_ADDR
// end ;
66045: LD_VAR 0 3
66049: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
66050: LD_INT 0
66052: PPUSH
66053: PPUSH
// if not array1 or not array2 then
66054: LD_VAR 0 1
66058: NOT
66059: PUSH
66060: LD_VAR 0 2
66064: NOT
66065: OR
66066: IFFALSE 66070
// exit ;
66068: GO 66134
// result := true ;
66070: LD_ADDR_VAR 0 3
66074: PUSH
66075: LD_INT 1
66077: ST_TO_ADDR
// for i = 1 to array1 do
66078: LD_ADDR_VAR 0 4
66082: PUSH
66083: DOUBLE
66084: LD_INT 1
66086: DEC
66087: ST_TO_ADDR
66088: LD_VAR 0 1
66092: PUSH
66093: FOR_TO
66094: IFFALSE 66132
// if array1 [ i ] <> array2 [ i ] then
66096: LD_VAR 0 1
66100: PUSH
66101: LD_VAR 0 4
66105: ARRAY
66106: PUSH
66107: LD_VAR 0 2
66111: PUSH
66112: LD_VAR 0 4
66116: ARRAY
66117: NONEQUAL
66118: IFFALSE 66130
// begin result := false ;
66120: LD_ADDR_VAR 0 3
66124: PUSH
66125: LD_INT 0
66127: ST_TO_ADDR
// break ;
66128: GO 66132
// end ;
66130: GO 66093
66132: POP
66133: POP
// end ;
66134: LD_VAR 0 3
66138: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
66139: LD_INT 0
66141: PPUSH
66142: PPUSH
66143: PPUSH
// pom := GetBase ( fac ) ;
66144: LD_ADDR_VAR 0 5
66148: PUSH
66149: LD_VAR 0 1
66153: PPUSH
66154: CALL_OW 274
66158: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
66159: LD_ADDR_VAR 0 4
66163: PUSH
66164: LD_VAR 0 2
66168: PUSH
66169: LD_INT 1
66171: ARRAY
66172: PPUSH
66173: LD_VAR 0 2
66177: PUSH
66178: LD_INT 2
66180: ARRAY
66181: PPUSH
66182: LD_VAR 0 2
66186: PUSH
66187: LD_INT 3
66189: ARRAY
66190: PPUSH
66191: LD_VAR 0 2
66195: PUSH
66196: LD_INT 4
66198: ARRAY
66199: PPUSH
66200: CALL_OW 449
66204: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
66205: LD_ADDR_VAR 0 3
66209: PUSH
66210: LD_VAR 0 5
66214: PPUSH
66215: LD_INT 1
66217: PPUSH
66218: CALL_OW 275
66222: PUSH
66223: LD_VAR 0 4
66227: PUSH
66228: LD_INT 1
66230: ARRAY
66231: GREATEREQUAL
66232: PUSH
66233: LD_VAR 0 5
66237: PPUSH
66238: LD_INT 2
66240: PPUSH
66241: CALL_OW 275
66245: PUSH
66246: LD_VAR 0 4
66250: PUSH
66251: LD_INT 2
66253: ARRAY
66254: GREATEREQUAL
66255: AND
66256: PUSH
66257: LD_VAR 0 5
66261: PPUSH
66262: LD_INT 3
66264: PPUSH
66265: CALL_OW 275
66269: PUSH
66270: LD_VAR 0 4
66274: PUSH
66275: LD_INT 3
66277: ARRAY
66278: GREATEREQUAL
66279: AND
66280: ST_TO_ADDR
// end ;
66281: LD_VAR 0 3
66285: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
66286: LD_INT 0
66288: PPUSH
66289: PPUSH
66290: PPUSH
66291: PPUSH
// pom := GetBase ( building ) ;
66292: LD_ADDR_VAR 0 3
66296: PUSH
66297: LD_VAR 0 1
66301: PPUSH
66302: CALL_OW 274
66306: ST_TO_ADDR
// if not pom then
66307: LD_VAR 0 3
66311: NOT
66312: IFFALSE 66316
// exit ;
66314: GO 66486
// btype := GetBType ( building ) ;
66316: LD_ADDR_VAR 0 5
66320: PUSH
66321: LD_VAR 0 1
66325: PPUSH
66326: CALL_OW 266
66330: ST_TO_ADDR
// if btype = b_armoury then
66331: LD_VAR 0 5
66335: PUSH
66336: LD_INT 4
66338: EQUAL
66339: IFFALSE 66349
// btype := b_barracks ;
66341: LD_ADDR_VAR 0 5
66345: PUSH
66346: LD_INT 5
66348: ST_TO_ADDR
// if btype = b_depot then
66349: LD_VAR 0 5
66353: PUSH
66354: LD_INT 0
66356: EQUAL
66357: IFFALSE 66367
// btype := b_warehouse ;
66359: LD_ADDR_VAR 0 5
66363: PUSH
66364: LD_INT 1
66366: ST_TO_ADDR
// if btype = b_workshop then
66367: LD_VAR 0 5
66371: PUSH
66372: LD_INT 2
66374: EQUAL
66375: IFFALSE 66385
// btype := b_factory ;
66377: LD_ADDR_VAR 0 5
66381: PUSH
66382: LD_INT 3
66384: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
66385: LD_ADDR_VAR 0 4
66389: PUSH
66390: LD_VAR 0 5
66394: PPUSH
66395: LD_VAR 0 1
66399: PPUSH
66400: CALL_OW 248
66404: PPUSH
66405: CALL_OW 450
66409: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
66410: LD_ADDR_VAR 0 2
66414: PUSH
66415: LD_VAR 0 3
66419: PPUSH
66420: LD_INT 1
66422: PPUSH
66423: CALL_OW 275
66427: PUSH
66428: LD_VAR 0 4
66432: PUSH
66433: LD_INT 1
66435: ARRAY
66436: GREATEREQUAL
66437: PUSH
66438: LD_VAR 0 3
66442: PPUSH
66443: LD_INT 2
66445: PPUSH
66446: CALL_OW 275
66450: PUSH
66451: LD_VAR 0 4
66455: PUSH
66456: LD_INT 2
66458: ARRAY
66459: GREATEREQUAL
66460: AND
66461: PUSH
66462: LD_VAR 0 3
66466: PPUSH
66467: LD_INT 3
66469: PPUSH
66470: CALL_OW 275
66474: PUSH
66475: LD_VAR 0 4
66479: PUSH
66480: LD_INT 3
66482: ARRAY
66483: GREATEREQUAL
66484: AND
66485: ST_TO_ADDR
// end ;
66486: LD_VAR 0 2
66490: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
66491: LD_INT 0
66493: PPUSH
66494: PPUSH
66495: PPUSH
// pom := GetBase ( building ) ;
66496: LD_ADDR_VAR 0 4
66500: PUSH
66501: LD_VAR 0 1
66505: PPUSH
66506: CALL_OW 274
66510: ST_TO_ADDR
// if not pom then
66511: LD_VAR 0 4
66515: NOT
66516: IFFALSE 66520
// exit ;
66518: GO 66621
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
66520: LD_ADDR_VAR 0 5
66524: PUSH
66525: LD_VAR 0 2
66529: PPUSH
66530: LD_VAR 0 1
66534: PPUSH
66535: CALL_OW 248
66539: PPUSH
66540: CALL_OW 450
66544: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
66545: LD_ADDR_VAR 0 3
66549: PUSH
66550: LD_VAR 0 4
66554: PPUSH
66555: LD_INT 1
66557: PPUSH
66558: CALL_OW 275
66562: PUSH
66563: LD_VAR 0 5
66567: PUSH
66568: LD_INT 1
66570: ARRAY
66571: GREATEREQUAL
66572: PUSH
66573: LD_VAR 0 4
66577: PPUSH
66578: LD_INT 2
66580: PPUSH
66581: CALL_OW 275
66585: PUSH
66586: LD_VAR 0 5
66590: PUSH
66591: LD_INT 2
66593: ARRAY
66594: GREATEREQUAL
66595: AND
66596: PUSH
66597: LD_VAR 0 4
66601: PPUSH
66602: LD_INT 3
66604: PPUSH
66605: CALL_OW 275
66609: PUSH
66610: LD_VAR 0 5
66614: PUSH
66615: LD_INT 3
66617: ARRAY
66618: GREATEREQUAL
66619: AND
66620: ST_TO_ADDR
// end ;
66621: LD_VAR 0 3
66625: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
66626: LD_INT 0
66628: PPUSH
66629: PPUSH
66630: PPUSH
66631: PPUSH
66632: PPUSH
66633: PPUSH
66634: PPUSH
66635: PPUSH
66636: PPUSH
66637: PPUSH
66638: PPUSH
// result := false ;
66639: LD_ADDR_VAR 0 8
66643: PUSH
66644: LD_INT 0
66646: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
66647: LD_VAR 0 5
66651: NOT
66652: PUSH
66653: LD_VAR 0 1
66657: NOT
66658: OR
66659: PUSH
66660: LD_VAR 0 2
66664: NOT
66665: OR
66666: PUSH
66667: LD_VAR 0 3
66671: NOT
66672: OR
66673: IFFALSE 66677
// exit ;
66675: GO 67491
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
66677: LD_ADDR_VAR 0 14
66681: PUSH
66682: LD_VAR 0 1
66686: PPUSH
66687: LD_VAR 0 2
66691: PPUSH
66692: LD_VAR 0 3
66696: PPUSH
66697: LD_VAR 0 4
66701: PPUSH
66702: LD_VAR 0 5
66706: PUSH
66707: LD_INT 1
66709: ARRAY
66710: PPUSH
66711: CALL_OW 248
66715: PPUSH
66716: LD_INT 0
66718: PPUSH
66719: CALL 68744 0 6
66723: ST_TO_ADDR
// if not hexes then
66724: LD_VAR 0 14
66728: NOT
66729: IFFALSE 66733
// exit ;
66731: GO 67491
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66733: LD_ADDR_VAR 0 17
66737: PUSH
66738: LD_VAR 0 5
66742: PPUSH
66743: LD_INT 22
66745: PUSH
66746: LD_VAR 0 13
66750: PPUSH
66751: CALL_OW 255
66755: PUSH
66756: EMPTY
66757: LIST
66758: LIST
66759: PUSH
66760: LD_INT 2
66762: PUSH
66763: LD_INT 30
66765: PUSH
66766: LD_INT 0
66768: PUSH
66769: EMPTY
66770: LIST
66771: LIST
66772: PUSH
66773: LD_INT 30
66775: PUSH
66776: LD_INT 1
66778: PUSH
66779: EMPTY
66780: LIST
66781: LIST
66782: PUSH
66783: EMPTY
66784: LIST
66785: LIST
66786: LIST
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PPUSH
66792: CALL_OW 72
66796: ST_TO_ADDR
// for i = 1 to hexes do
66797: LD_ADDR_VAR 0 9
66801: PUSH
66802: DOUBLE
66803: LD_INT 1
66805: DEC
66806: ST_TO_ADDR
66807: LD_VAR 0 14
66811: PUSH
66812: FOR_TO
66813: IFFALSE 67489
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66815: LD_ADDR_VAR 0 13
66819: PUSH
66820: LD_VAR 0 14
66824: PUSH
66825: LD_VAR 0 9
66829: ARRAY
66830: PUSH
66831: LD_INT 1
66833: ARRAY
66834: PPUSH
66835: LD_VAR 0 14
66839: PUSH
66840: LD_VAR 0 9
66844: ARRAY
66845: PUSH
66846: LD_INT 2
66848: ARRAY
66849: PPUSH
66850: CALL_OW 428
66854: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
66855: LD_VAR 0 14
66859: PUSH
66860: LD_VAR 0 9
66864: ARRAY
66865: PUSH
66866: LD_INT 1
66868: ARRAY
66869: PPUSH
66870: LD_VAR 0 14
66874: PUSH
66875: LD_VAR 0 9
66879: ARRAY
66880: PUSH
66881: LD_INT 2
66883: ARRAY
66884: PPUSH
66885: CALL_OW 351
66889: PUSH
66890: LD_VAR 0 14
66894: PUSH
66895: LD_VAR 0 9
66899: ARRAY
66900: PUSH
66901: LD_INT 1
66903: ARRAY
66904: PPUSH
66905: LD_VAR 0 14
66909: PUSH
66910: LD_VAR 0 9
66914: ARRAY
66915: PUSH
66916: LD_INT 2
66918: ARRAY
66919: PPUSH
66920: CALL_OW 488
66924: NOT
66925: OR
66926: PUSH
66927: LD_VAR 0 13
66931: PPUSH
66932: CALL_OW 247
66936: PUSH
66937: LD_INT 3
66939: EQUAL
66940: OR
66941: IFFALSE 66947
// exit ;
66943: POP
66944: POP
66945: GO 67491
// if not tmp then
66947: LD_VAR 0 13
66951: NOT
66952: IFFALSE 66956
// continue ;
66954: GO 66812
// result := true ;
66956: LD_ADDR_VAR 0 8
66960: PUSH
66961: LD_INT 1
66963: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
66964: LD_VAR 0 6
66968: PUSH
66969: LD_VAR 0 13
66973: PPUSH
66974: CALL_OW 247
66978: PUSH
66979: LD_INT 2
66981: EQUAL
66982: AND
66983: PUSH
66984: LD_VAR 0 13
66988: PPUSH
66989: CALL_OW 263
66993: PUSH
66994: LD_INT 1
66996: EQUAL
66997: AND
66998: IFFALSE 67162
// begin if IsDrivenBy ( tmp ) then
67000: LD_VAR 0 13
67004: PPUSH
67005: CALL_OW 311
67009: IFFALSE 67013
// continue ;
67011: GO 66812
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
67013: LD_VAR 0 6
67017: PPUSH
67018: LD_INT 3
67020: PUSH
67021: LD_INT 60
67023: PUSH
67024: EMPTY
67025: LIST
67026: PUSH
67027: EMPTY
67028: LIST
67029: LIST
67030: PUSH
67031: LD_INT 3
67033: PUSH
67034: LD_INT 55
67036: PUSH
67037: EMPTY
67038: LIST
67039: PUSH
67040: EMPTY
67041: LIST
67042: LIST
67043: PUSH
67044: EMPTY
67045: LIST
67046: LIST
67047: PPUSH
67048: CALL_OW 72
67052: IFFALSE 67160
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
67054: LD_ADDR_VAR 0 18
67058: PUSH
67059: LD_VAR 0 6
67063: PPUSH
67064: LD_INT 3
67066: PUSH
67067: LD_INT 60
67069: PUSH
67070: EMPTY
67071: LIST
67072: PUSH
67073: EMPTY
67074: LIST
67075: LIST
67076: PUSH
67077: LD_INT 3
67079: PUSH
67080: LD_INT 55
67082: PUSH
67083: EMPTY
67084: LIST
67085: PUSH
67086: EMPTY
67087: LIST
67088: LIST
67089: PUSH
67090: EMPTY
67091: LIST
67092: LIST
67093: PPUSH
67094: CALL_OW 72
67098: PUSH
67099: LD_INT 1
67101: ARRAY
67102: ST_TO_ADDR
// if IsInUnit ( driver ) then
67103: LD_VAR 0 18
67107: PPUSH
67108: CALL_OW 310
67112: IFFALSE 67123
// ComExit ( driver ) ;
67114: LD_VAR 0 18
67118: PPUSH
67119: CALL 92536 0 1
// AddComEnterUnit ( driver , tmp ) ;
67123: LD_VAR 0 18
67127: PPUSH
67128: LD_VAR 0 13
67132: PPUSH
67133: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
67137: LD_VAR 0 18
67141: PPUSH
67142: LD_VAR 0 7
67146: PPUSH
67147: CALL_OW 173
// AddComExitVehicle ( driver ) ;
67151: LD_VAR 0 18
67155: PPUSH
67156: CALL_OW 181
// end ; continue ;
67160: GO 66812
// end ; if not cleaners or not tmp in cleaners then
67162: LD_VAR 0 6
67166: NOT
67167: PUSH
67168: LD_VAR 0 13
67172: PUSH
67173: LD_VAR 0 6
67177: IN
67178: NOT
67179: OR
67180: IFFALSE 67487
// begin if dep then
67182: LD_VAR 0 17
67186: IFFALSE 67322
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
67188: LD_ADDR_VAR 0 16
67192: PUSH
67193: LD_VAR 0 17
67197: PUSH
67198: LD_INT 1
67200: ARRAY
67201: PPUSH
67202: CALL_OW 250
67206: PPUSH
67207: LD_VAR 0 17
67211: PUSH
67212: LD_INT 1
67214: ARRAY
67215: PPUSH
67216: CALL_OW 254
67220: PPUSH
67221: LD_INT 5
67223: PPUSH
67224: CALL_OW 272
67228: PUSH
67229: LD_VAR 0 17
67233: PUSH
67234: LD_INT 1
67236: ARRAY
67237: PPUSH
67238: CALL_OW 251
67242: PPUSH
67243: LD_VAR 0 17
67247: PUSH
67248: LD_INT 1
67250: ARRAY
67251: PPUSH
67252: CALL_OW 254
67256: PPUSH
67257: LD_INT 5
67259: PPUSH
67260: CALL_OW 273
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
67269: LD_VAR 0 16
67273: PUSH
67274: LD_INT 1
67276: ARRAY
67277: PPUSH
67278: LD_VAR 0 16
67282: PUSH
67283: LD_INT 2
67285: ARRAY
67286: PPUSH
67287: CALL_OW 488
67291: IFFALSE 67322
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
67293: LD_VAR 0 13
67297: PPUSH
67298: LD_VAR 0 16
67302: PUSH
67303: LD_INT 1
67305: ARRAY
67306: PPUSH
67307: LD_VAR 0 16
67311: PUSH
67312: LD_INT 2
67314: ARRAY
67315: PPUSH
67316: CALL_OW 111
// continue ;
67320: GO 66812
// end ; end ; r := GetDir ( tmp ) ;
67322: LD_ADDR_VAR 0 15
67326: PUSH
67327: LD_VAR 0 13
67331: PPUSH
67332: CALL_OW 254
67336: ST_TO_ADDR
// if r = 5 then
67337: LD_VAR 0 15
67341: PUSH
67342: LD_INT 5
67344: EQUAL
67345: IFFALSE 67355
// r := 0 ;
67347: LD_ADDR_VAR 0 15
67351: PUSH
67352: LD_INT 0
67354: ST_TO_ADDR
// for j = r to 5 do
67355: LD_ADDR_VAR 0 10
67359: PUSH
67360: DOUBLE
67361: LD_VAR 0 15
67365: DEC
67366: ST_TO_ADDR
67367: LD_INT 5
67369: PUSH
67370: FOR_TO
67371: IFFALSE 67485
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
67373: LD_ADDR_VAR 0 11
67377: PUSH
67378: LD_VAR 0 13
67382: PPUSH
67383: CALL_OW 250
67387: PPUSH
67388: LD_VAR 0 10
67392: PPUSH
67393: LD_INT 2
67395: PPUSH
67396: CALL_OW 272
67400: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
67401: LD_ADDR_VAR 0 12
67405: PUSH
67406: LD_VAR 0 13
67410: PPUSH
67411: CALL_OW 251
67415: PPUSH
67416: LD_VAR 0 10
67420: PPUSH
67421: LD_INT 2
67423: PPUSH
67424: CALL_OW 273
67428: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
67429: LD_VAR 0 11
67433: PPUSH
67434: LD_VAR 0 12
67438: PPUSH
67439: CALL_OW 488
67443: PUSH
67444: LD_VAR 0 11
67448: PPUSH
67449: LD_VAR 0 12
67453: PPUSH
67454: CALL_OW 428
67458: NOT
67459: AND
67460: IFFALSE 67483
// begin ComMoveXY ( tmp , _x , _y ) ;
67462: LD_VAR 0 13
67466: PPUSH
67467: LD_VAR 0 11
67471: PPUSH
67472: LD_VAR 0 12
67476: PPUSH
67477: CALL_OW 111
// break ;
67481: GO 67485
// end ; end ;
67483: GO 67370
67485: POP
67486: POP
// end ; end ;
67487: GO 66812
67489: POP
67490: POP
// end ;
67491: LD_VAR 0 8
67495: RET
// export function BuildingTechInvented ( side , btype ) ; begin
67496: LD_INT 0
67498: PPUSH
// result := true ;
67499: LD_ADDR_VAR 0 3
67503: PUSH
67504: LD_INT 1
67506: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
67507: LD_VAR 0 2
67511: PUSH
67512: LD_INT 24
67514: DOUBLE
67515: EQUAL
67516: IFTRUE 67526
67518: LD_INT 33
67520: DOUBLE
67521: EQUAL
67522: IFTRUE 67526
67524: GO 67551
67526: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
67527: LD_ADDR_VAR 0 3
67531: PUSH
67532: LD_INT 32
67534: PPUSH
67535: LD_VAR 0 1
67539: PPUSH
67540: CALL_OW 321
67544: PUSH
67545: LD_INT 2
67547: EQUAL
67548: ST_TO_ADDR
67549: GO 67867
67551: LD_INT 20
67553: DOUBLE
67554: EQUAL
67555: IFTRUE 67559
67557: GO 67584
67559: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
67560: LD_ADDR_VAR 0 3
67564: PUSH
67565: LD_INT 6
67567: PPUSH
67568: LD_VAR 0 1
67572: PPUSH
67573: CALL_OW 321
67577: PUSH
67578: LD_INT 2
67580: EQUAL
67581: ST_TO_ADDR
67582: GO 67867
67584: LD_INT 22
67586: DOUBLE
67587: EQUAL
67588: IFTRUE 67598
67590: LD_INT 36
67592: DOUBLE
67593: EQUAL
67594: IFTRUE 67598
67596: GO 67623
67598: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
67599: LD_ADDR_VAR 0 3
67603: PUSH
67604: LD_INT 15
67606: PPUSH
67607: LD_VAR 0 1
67611: PPUSH
67612: CALL_OW 321
67616: PUSH
67617: LD_INT 2
67619: EQUAL
67620: ST_TO_ADDR
67621: GO 67867
67623: LD_INT 30
67625: DOUBLE
67626: EQUAL
67627: IFTRUE 67631
67629: GO 67656
67631: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
67632: LD_ADDR_VAR 0 3
67636: PUSH
67637: LD_INT 20
67639: PPUSH
67640: LD_VAR 0 1
67644: PPUSH
67645: CALL_OW 321
67649: PUSH
67650: LD_INT 2
67652: EQUAL
67653: ST_TO_ADDR
67654: GO 67867
67656: LD_INT 28
67658: DOUBLE
67659: EQUAL
67660: IFTRUE 67670
67662: LD_INT 21
67664: DOUBLE
67665: EQUAL
67666: IFTRUE 67670
67668: GO 67695
67670: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
67671: LD_ADDR_VAR 0 3
67675: PUSH
67676: LD_INT 21
67678: PPUSH
67679: LD_VAR 0 1
67683: PPUSH
67684: CALL_OW 321
67688: PUSH
67689: LD_INT 2
67691: EQUAL
67692: ST_TO_ADDR
67693: GO 67867
67695: LD_INT 16
67697: DOUBLE
67698: EQUAL
67699: IFTRUE 67703
67701: GO 67728
67703: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
67704: LD_ADDR_VAR 0 3
67708: PUSH
67709: LD_INT 84
67711: PPUSH
67712: LD_VAR 0 1
67716: PPUSH
67717: CALL_OW 321
67721: PUSH
67722: LD_INT 2
67724: EQUAL
67725: ST_TO_ADDR
67726: GO 67867
67728: LD_INT 19
67730: DOUBLE
67731: EQUAL
67732: IFTRUE 67742
67734: LD_INT 23
67736: DOUBLE
67737: EQUAL
67738: IFTRUE 67742
67740: GO 67767
67742: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
67743: LD_ADDR_VAR 0 3
67747: PUSH
67748: LD_INT 83
67750: PPUSH
67751: LD_VAR 0 1
67755: PPUSH
67756: CALL_OW 321
67760: PUSH
67761: LD_INT 2
67763: EQUAL
67764: ST_TO_ADDR
67765: GO 67867
67767: LD_INT 17
67769: DOUBLE
67770: EQUAL
67771: IFTRUE 67775
67773: GO 67800
67775: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
67776: LD_ADDR_VAR 0 3
67780: PUSH
67781: LD_INT 39
67783: PPUSH
67784: LD_VAR 0 1
67788: PPUSH
67789: CALL_OW 321
67793: PUSH
67794: LD_INT 2
67796: EQUAL
67797: ST_TO_ADDR
67798: GO 67867
67800: LD_INT 18
67802: DOUBLE
67803: EQUAL
67804: IFTRUE 67808
67806: GO 67833
67808: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
67809: LD_ADDR_VAR 0 3
67813: PUSH
67814: LD_INT 40
67816: PPUSH
67817: LD_VAR 0 1
67821: PPUSH
67822: CALL_OW 321
67826: PUSH
67827: LD_INT 2
67829: EQUAL
67830: ST_TO_ADDR
67831: GO 67867
67833: LD_INT 27
67835: DOUBLE
67836: EQUAL
67837: IFTRUE 67841
67839: GO 67866
67841: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
67842: LD_ADDR_VAR 0 3
67846: PUSH
67847: LD_INT 35
67849: PPUSH
67850: LD_VAR 0 1
67854: PPUSH
67855: CALL_OW 321
67859: PUSH
67860: LD_INT 2
67862: EQUAL
67863: ST_TO_ADDR
67864: GO 67867
67866: POP
// end ;
67867: LD_VAR 0 3
67871: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
67872: LD_INT 0
67874: PPUSH
67875: PPUSH
67876: PPUSH
67877: PPUSH
67878: PPUSH
67879: PPUSH
67880: PPUSH
67881: PPUSH
67882: PPUSH
67883: PPUSH
67884: PPUSH
// result := false ;
67885: LD_ADDR_VAR 0 6
67889: PUSH
67890: LD_INT 0
67892: ST_TO_ADDR
// if btype = b_depot then
67893: LD_VAR 0 2
67897: PUSH
67898: LD_INT 0
67900: EQUAL
67901: IFFALSE 67913
// begin result := true ;
67903: LD_ADDR_VAR 0 6
67907: PUSH
67908: LD_INT 1
67910: ST_TO_ADDR
// exit ;
67911: GO 68739
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
67913: LD_VAR 0 1
67917: NOT
67918: PUSH
67919: LD_VAR 0 1
67923: PPUSH
67924: CALL_OW 266
67928: PUSH
67929: LD_INT 0
67931: PUSH
67932: LD_INT 1
67934: PUSH
67935: EMPTY
67936: LIST
67937: LIST
67938: IN
67939: NOT
67940: OR
67941: PUSH
67942: LD_VAR 0 2
67946: NOT
67947: OR
67948: PUSH
67949: LD_VAR 0 5
67953: PUSH
67954: LD_INT 0
67956: PUSH
67957: LD_INT 1
67959: PUSH
67960: LD_INT 2
67962: PUSH
67963: LD_INT 3
67965: PUSH
67966: LD_INT 4
67968: PUSH
67969: LD_INT 5
67971: PUSH
67972: EMPTY
67973: LIST
67974: LIST
67975: LIST
67976: LIST
67977: LIST
67978: LIST
67979: IN
67980: NOT
67981: OR
67982: PUSH
67983: LD_VAR 0 3
67987: PPUSH
67988: LD_VAR 0 4
67992: PPUSH
67993: CALL_OW 488
67997: NOT
67998: OR
67999: IFFALSE 68003
// exit ;
68001: GO 68739
// side := GetSide ( depot ) ;
68003: LD_ADDR_VAR 0 9
68007: PUSH
68008: LD_VAR 0 1
68012: PPUSH
68013: CALL_OW 255
68017: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
68018: LD_VAR 0 9
68022: PPUSH
68023: LD_VAR 0 2
68027: PPUSH
68028: CALL 67496 0 2
68032: NOT
68033: IFFALSE 68037
// exit ;
68035: GO 68739
// pom := GetBase ( depot ) ;
68037: LD_ADDR_VAR 0 10
68041: PUSH
68042: LD_VAR 0 1
68046: PPUSH
68047: CALL_OW 274
68051: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68052: LD_ADDR_VAR 0 11
68056: PUSH
68057: LD_VAR 0 2
68061: PPUSH
68062: LD_VAR 0 1
68066: PPUSH
68067: CALL_OW 248
68071: PPUSH
68072: CALL_OW 450
68076: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
68077: LD_VAR 0 10
68081: PPUSH
68082: LD_INT 1
68084: PPUSH
68085: CALL_OW 275
68089: PUSH
68090: LD_VAR 0 11
68094: PUSH
68095: LD_INT 1
68097: ARRAY
68098: GREATEREQUAL
68099: PUSH
68100: LD_VAR 0 10
68104: PPUSH
68105: LD_INT 2
68107: PPUSH
68108: CALL_OW 275
68112: PUSH
68113: LD_VAR 0 11
68117: PUSH
68118: LD_INT 2
68120: ARRAY
68121: GREATEREQUAL
68122: AND
68123: PUSH
68124: LD_VAR 0 10
68128: PPUSH
68129: LD_INT 3
68131: PPUSH
68132: CALL_OW 275
68136: PUSH
68137: LD_VAR 0 11
68141: PUSH
68142: LD_INT 3
68144: ARRAY
68145: GREATEREQUAL
68146: AND
68147: NOT
68148: IFFALSE 68152
// exit ;
68150: GO 68739
// if GetBType ( depot ) = b_depot then
68152: LD_VAR 0 1
68156: PPUSH
68157: CALL_OW 266
68161: PUSH
68162: LD_INT 0
68164: EQUAL
68165: IFFALSE 68177
// dist := 28 else
68167: LD_ADDR_VAR 0 14
68171: PUSH
68172: LD_INT 28
68174: ST_TO_ADDR
68175: GO 68185
// dist := 36 ;
68177: LD_ADDR_VAR 0 14
68181: PUSH
68182: LD_INT 36
68184: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
68185: LD_VAR 0 1
68189: PPUSH
68190: LD_VAR 0 3
68194: PPUSH
68195: LD_VAR 0 4
68199: PPUSH
68200: CALL_OW 297
68204: PUSH
68205: LD_VAR 0 14
68209: GREATER
68210: IFFALSE 68214
// exit ;
68212: GO 68739
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
68214: LD_ADDR_VAR 0 12
68218: PUSH
68219: LD_VAR 0 2
68223: PPUSH
68224: LD_VAR 0 3
68228: PPUSH
68229: LD_VAR 0 4
68233: PPUSH
68234: LD_VAR 0 5
68238: PPUSH
68239: LD_VAR 0 1
68243: PPUSH
68244: CALL_OW 248
68248: PPUSH
68249: LD_INT 0
68251: PPUSH
68252: CALL 68744 0 6
68256: ST_TO_ADDR
// if not hexes then
68257: LD_VAR 0 12
68261: NOT
68262: IFFALSE 68266
// exit ;
68264: GO 68739
// hex := GetHexInfo ( x , y ) ;
68266: LD_ADDR_VAR 0 15
68270: PUSH
68271: LD_VAR 0 3
68275: PPUSH
68276: LD_VAR 0 4
68280: PPUSH
68281: CALL_OW 546
68285: ST_TO_ADDR
// if hex [ 1 ] then
68286: LD_VAR 0 15
68290: PUSH
68291: LD_INT 1
68293: ARRAY
68294: IFFALSE 68298
// exit ;
68296: GO 68739
// height := hex [ 2 ] ;
68298: LD_ADDR_VAR 0 13
68302: PUSH
68303: LD_VAR 0 15
68307: PUSH
68308: LD_INT 2
68310: ARRAY
68311: ST_TO_ADDR
// for i = 1 to hexes do
68312: LD_ADDR_VAR 0 7
68316: PUSH
68317: DOUBLE
68318: LD_INT 1
68320: DEC
68321: ST_TO_ADDR
68322: LD_VAR 0 12
68326: PUSH
68327: FOR_TO
68328: IFFALSE 68658
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
68330: LD_VAR 0 12
68334: PUSH
68335: LD_VAR 0 7
68339: ARRAY
68340: PUSH
68341: LD_INT 1
68343: ARRAY
68344: PPUSH
68345: LD_VAR 0 12
68349: PUSH
68350: LD_VAR 0 7
68354: ARRAY
68355: PUSH
68356: LD_INT 2
68358: ARRAY
68359: PPUSH
68360: CALL_OW 488
68364: NOT
68365: PUSH
68366: LD_VAR 0 12
68370: PUSH
68371: LD_VAR 0 7
68375: ARRAY
68376: PUSH
68377: LD_INT 1
68379: ARRAY
68380: PPUSH
68381: LD_VAR 0 12
68385: PUSH
68386: LD_VAR 0 7
68390: ARRAY
68391: PUSH
68392: LD_INT 2
68394: ARRAY
68395: PPUSH
68396: CALL_OW 428
68400: PUSH
68401: LD_INT 0
68403: GREATER
68404: OR
68405: PUSH
68406: LD_VAR 0 12
68410: PUSH
68411: LD_VAR 0 7
68415: ARRAY
68416: PUSH
68417: LD_INT 1
68419: ARRAY
68420: PPUSH
68421: LD_VAR 0 12
68425: PUSH
68426: LD_VAR 0 7
68430: ARRAY
68431: PUSH
68432: LD_INT 2
68434: ARRAY
68435: PPUSH
68436: CALL_OW 351
68440: OR
68441: IFFALSE 68447
// exit ;
68443: POP
68444: POP
68445: GO 68739
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68447: LD_ADDR_VAR 0 8
68451: PUSH
68452: LD_VAR 0 12
68456: PUSH
68457: LD_VAR 0 7
68461: ARRAY
68462: PUSH
68463: LD_INT 1
68465: ARRAY
68466: PPUSH
68467: LD_VAR 0 12
68471: PUSH
68472: LD_VAR 0 7
68476: ARRAY
68477: PUSH
68478: LD_INT 2
68480: ARRAY
68481: PPUSH
68482: CALL_OW 546
68486: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
68487: LD_VAR 0 8
68491: PUSH
68492: LD_INT 1
68494: ARRAY
68495: PUSH
68496: LD_VAR 0 8
68500: PUSH
68501: LD_INT 2
68503: ARRAY
68504: PUSH
68505: LD_VAR 0 13
68509: PUSH
68510: LD_INT 2
68512: PLUS
68513: GREATER
68514: OR
68515: PUSH
68516: LD_VAR 0 8
68520: PUSH
68521: LD_INT 2
68523: ARRAY
68524: PUSH
68525: LD_VAR 0 13
68529: PUSH
68530: LD_INT 2
68532: MINUS
68533: LESS
68534: OR
68535: PUSH
68536: LD_VAR 0 8
68540: PUSH
68541: LD_INT 3
68543: ARRAY
68544: PUSH
68545: LD_INT 0
68547: PUSH
68548: LD_INT 8
68550: PUSH
68551: LD_INT 9
68553: PUSH
68554: LD_INT 10
68556: PUSH
68557: LD_INT 11
68559: PUSH
68560: LD_INT 12
68562: PUSH
68563: LD_INT 13
68565: PUSH
68566: LD_INT 16
68568: PUSH
68569: LD_INT 17
68571: PUSH
68572: LD_INT 18
68574: PUSH
68575: LD_INT 19
68577: PUSH
68578: LD_INT 20
68580: PUSH
68581: LD_INT 21
68583: PUSH
68584: EMPTY
68585: LIST
68586: LIST
68587: LIST
68588: LIST
68589: LIST
68590: LIST
68591: LIST
68592: LIST
68593: LIST
68594: LIST
68595: LIST
68596: LIST
68597: LIST
68598: IN
68599: NOT
68600: OR
68601: PUSH
68602: LD_VAR 0 8
68606: PUSH
68607: LD_INT 5
68609: ARRAY
68610: NOT
68611: OR
68612: PUSH
68613: LD_VAR 0 8
68617: PUSH
68618: LD_INT 6
68620: ARRAY
68621: PUSH
68622: LD_INT 1
68624: PUSH
68625: LD_INT 2
68627: PUSH
68628: LD_INT 7
68630: PUSH
68631: LD_INT 9
68633: PUSH
68634: LD_INT 10
68636: PUSH
68637: LD_INT 11
68639: PUSH
68640: EMPTY
68641: LIST
68642: LIST
68643: LIST
68644: LIST
68645: LIST
68646: LIST
68647: IN
68648: NOT
68649: OR
68650: IFFALSE 68656
// exit ;
68652: POP
68653: POP
68654: GO 68739
// end ;
68656: GO 68327
68658: POP
68659: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
68660: LD_VAR 0 9
68664: PPUSH
68665: LD_VAR 0 3
68669: PPUSH
68670: LD_VAR 0 4
68674: PPUSH
68675: LD_INT 20
68677: PPUSH
68678: CALL 60662 0 4
68682: PUSH
68683: LD_INT 4
68685: ARRAY
68686: IFFALSE 68690
// exit ;
68688: GO 68739
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
68690: LD_VAR 0 2
68694: PUSH
68695: LD_INT 29
68697: PUSH
68698: LD_INT 30
68700: PUSH
68701: EMPTY
68702: LIST
68703: LIST
68704: IN
68705: PUSH
68706: LD_VAR 0 3
68710: PPUSH
68711: LD_VAR 0 4
68715: PPUSH
68716: LD_VAR 0 9
68720: PPUSH
68721: CALL_OW 440
68725: NOT
68726: AND
68727: IFFALSE 68731
// exit ;
68729: GO 68739
// result := true ;
68731: LD_ADDR_VAR 0 6
68735: PUSH
68736: LD_INT 1
68738: ST_TO_ADDR
// end ;
68739: LD_VAR 0 6
68743: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
68744: LD_INT 0
68746: PPUSH
68747: PPUSH
68748: PPUSH
68749: PPUSH
68750: PPUSH
68751: PPUSH
68752: PPUSH
68753: PPUSH
68754: PPUSH
68755: PPUSH
68756: PPUSH
68757: PPUSH
68758: PPUSH
68759: PPUSH
68760: PPUSH
68761: PPUSH
68762: PPUSH
68763: PPUSH
68764: PPUSH
68765: PPUSH
68766: PPUSH
68767: PPUSH
68768: PPUSH
68769: PPUSH
68770: PPUSH
68771: PPUSH
68772: PPUSH
68773: PPUSH
68774: PPUSH
68775: PPUSH
68776: PPUSH
68777: PPUSH
68778: PPUSH
68779: PPUSH
68780: PPUSH
68781: PPUSH
68782: PPUSH
68783: PPUSH
68784: PPUSH
68785: PPUSH
68786: PPUSH
68787: PPUSH
68788: PPUSH
68789: PPUSH
68790: PPUSH
68791: PPUSH
68792: PPUSH
68793: PPUSH
68794: PPUSH
68795: PPUSH
68796: PPUSH
68797: PPUSH
68798: PPUSH
68799: PPUSH
68800: PPUSH
68801: PPUSH
68802: PPUSH
68803: PPUSH
// result = [ ] ;
68804: LD_ADDR_VAR 0 7
68808: PUSH
68809: EMPTY
68810: ST_TO_ADDR
// temp_list = [ ] ;
68811: LD_ADDR_VAR 0 9
68815: PUSH
68816: EMPTY
68817: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
68818: LD_VAR 0 4
68822: PUSH
68823: LD_INT 0
68825: PUSH
68826: LD_INT 1
68828: PUSH
68829: LD_INT 2
68831: PUSH
68832: LD_INT 3
68834: PUSH
68835: LD_INT 4
68837: PUSH
68838: LD_INT 5
68840: PUSH
68841: EMPTY
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: IN
68849: NOT
68850: PUSH
68851: LD_VAR 0 1
68855: PUSH
68856: LD_INT 0
68858: PUSH
68859: LD_INT 1
68861: PUSH
68862: EMPTY
68863: LIST
68864: LIST
68865: IN
68866: PUSH
68867: LD_VAR 0 5
68871: PUSH
68872: LD_INT 1
68874: PUSH
68875: LD_INT 2
68877: PUSH
68878: LD_INT 3
68880: PUSH
68881: EMPTY
68882: LIST
68883: LIST
68884: LIST
68885: IN
68886: NOT
68887: AND
68888: OR
68889: IFFALSE 68893
// exit ;
68891: GO 87284
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
68893: LD_VAR 0 1
68897: PUSH
68898: LD_INT 6
68900: PUSH
68901: LD_INT 7
68903: PUSH
68904: LD_INT 8
68906: PUSH
68907: LD_INT 13
68909: PUSH
68910: LD_INT 12
68912: PUSH
68913: LD_INT 15
68915: PUSH
68916: LD_INT 11
68918: PUSH
68919: LD_INT 14
68921: PUSH
68922: LD_INT 10
68924: PUSH
68925: EMPTY
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: IN
68936: IFFALSE 68946
// btype = b_lab ;
68938: LD_ADDR_VAR 0 1
68942: PUSH
68943: LD_INT 6
68945: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
68946: LD_VAR 0 6
68950: PUSH
68951: LD_INT 0
68953: PUSH
68954: LD_INT 1
68956: PUSH
68957: LD_INT 2
68959: PUSH
68960: EMPTY
68961: LIST
68962: LIST
68963: LIST
68964: IN
68965: NOT
68966: PUSH
68967: LD_VAR 0 1
68971: PUSH
68972: LD_INT 0
68974: PUSH
68975: LD_INT 1
68977: PUSH
68978: LD_INT 2
68980: PUSH
68981: LD_INT 3
68983: PUSH
68984: LD_INT 6
68986: PUSH
68987: LD_INT 36
68989: PUSH
68990: LD_INT 4
68992: PUSH
68993: LD_INT 5
68995: PUSH
68996: LD_INT 31
68998: PUSH
68999: LD_INT 32
69001: PUSH
69002: LD_INT 33
69004: PUSH
69005: EMPTY
69006: LIST
69007: LIST
69008: LIST
69009: LIST
69010: LIST
69011: LIST
69012: LIST
69013: LIST
69014: LIST
69015: LIST
69016: LIST
69017: IN
69018: NOT
69019: PUSH
69020: LD_VAR 0 6
69024: PUSH
69025: LD_INT 1
69027: EQUAL
69028: AND
69029: OR
69030: PUSH
69031: LD_VAR 0 1
69035: PUSH
69036: LD_INT 2
69038: PUSH
69039: LD_INT 3
69041: PUSH
69042: EMPTY
69043: LIST
69044: LIST
69045: IN
69046: NOT
69047: PUSH
69048: LD_VAR 0 6
69052: PUSH
69053: LD_INT 2
69055: EQUAL
69056: AND
69057: OR
69058: IFFALSE 69068
// mode = 0 ;
69060: LD_ADDR_VAR 0 6
69064: PUSH
69065: LD_INT 0
69067: ST_TO_ADDR
// case mode of 0 :
69068: LD_VAR 0 6
69072: PUSH
69073: LD_INT 0
69075: DOUBLE
69076: EQUAL
69077: IFTRUE 69081
69079: GO 80534
69081: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69082: LD_ADDR_VAR 0 11
69086: PUSH
69087: LD_INT 0
69089: PUSH
69090: LD_INT 0
69092: PUSH
69093: EMPTY
69094: LIST
69095: LIST
69096: PUSH
69097: LD_INT 0
69099: PUSH
69100: LD_INT 1
69102: NEG
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: PUSH
69108: LD_INT 1
69110: PUSH
69111: LD_INT 0
69113: PUSH
69114: EMPTY
69115: LIST
69116: LIST
69117: PUSH
69118: LD_INT 1
69120: PUSH
69121: LD_INT 1
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 0
69130: PUSH
69131: LD_INT 1
69133: PUSH
69134: EMPTY
69135: LIST
69136: LIST
69137: PUSH
69138: LD_INT 1
69140: NEG
69141: PUSH
69142: LD_INT 0
69144: PUSH
69145: EMPTY
69146: LIST
69147: LIST
69148: PUSH
69149: LD_INT 1
69151: NEG
69152: PUSH
69153: LD_INT 1
69155: NEG
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: LD_INT 1
69163: NEG
69164: PUSH
69165: LD_INT 2
69167: NEG
69168: PUSH
69169: EMPTY
69170: LIST
69171: LIST
69172: PUSH
69173: LD_INT 0
69175: PUSH
69176: LD_INT 2
69178: NEG
69179: PUSH
69180: EMPTY
69181: LIST
69182: LIST
69183: PUSH
69184: LD_INT 1
69186: PUSH
69187: LD_INT 1
69189: NEG
69190: PUSH
69191: EMPTY
69192: LIST
69193: LIST
69194: PUSH
69195: LD_INT 1
69197: PUSH
69198: LD_INT 2
69200: PUSH
69201: EMPTY
69202: LIST
69203: LIST
69204: PUSH
69205: LD_INT 0
69207: PUSH
69208: LD_INT 2
69210: PUSH
69211: EMPTY
69212: LIST
69213: LIST
69214: PUSH
69215: LD_INT 1
69217: NEG
69218: PUSH
69219: LD_INT 1
69221: PUSH
69222: EMPTY
69223: LIST
69224: LIST
69225: PUSH
69226: LD_INT 1
69228: PUSH
69229: LD_INT 3
69231: PUSH
69232: EMPTY
69233: LIST
69234: LIST
69235: PUSH
69236: LD_INT 0
69238: PUSH
69239: LD_INT 3
69241: PUSH
69242: EMPTY
69243: LIST
69244: LIST
69245: PUSH
69246: LD_INT 1
69248: NEG
69249: PUSH
69250: LD_INT 2
69252: PUSH
69253: EMPTY
69254: LIST
69255: LIST
69256: PUSH
69257: EMPTY
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: LIST
69267: LIST
69268: LIST
69269: LIST
69270: LIST
69271: LIST
69272: LIST
69273: LIST
69274: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69275: LD_ADDR_VAR 0 12
69279: PUSH
69280: LD_INT 0
69282: PUSH
69283: LD_INT 0
69285: PUSH
69286: EMPTY
69287: LIST
69288: LIST
69289: PUSH
69290: LD_INT 0
69292: PUSH
69293: LD_INT 1
69295: NEG
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 1
69303: PUSH
69304: LD_INT 0
69306: PUSH
69307: EMPTY
69308: LIST
69309: LIST
69310: PUSH
69311: LD_INT 1
69313: PUSH
69314: LD_INT 1
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: LD_INT 0
69323: PUSH
69324: LD_INT 1
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 1
69333: NEG
69334: PUSH
69335: LD_INT 0
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 1
69344: NEG
69345: PUSH
69346: LD_INT 1
69348: NEG
69349: PUSH
69350: EMPTY
69351: LIST
69352: LIST
69353: PUSH
69354: LD_INT 1
69356: PUSH
69357: LD_INT 1
69359: NEG
69360: PUSH
69361: EMPTY
69362: LIST
69363: LIST
69364: PUSH
69365: LD_INT 2
69367: PUSH
69368: LD_INT 0
69370: PUSH
69371: EMPTY
69372: LIST
69373: LIST
69374: PUSH
69375: LD_INT 2
69377: PUSH
69378: LD_INT 1
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: LD_INT 1
69387: NEG
69388: PUSH
69389: LD_INT 1
69391: PUSH
69392: EMPTY
69393: LIST
69394: LIST
69395: PUSH
69396: LD_INT 2
69398: NEG
69399: PUSH
69400: LD_INT 0
69402: PUSH
69403: EMPTY
69404: LIST
69405: LIST
69406: PUSH
69407: LD_INT 2
69409: NEG
69410: PUSH
69411: LD_INT 1
69413: NEG
69414: PUSH
69415: EMPTY
69416: LIST
69417: LIST
69418: PUSH
69419: LD_INT 2
69421: NEG
69422: PUSH
69423: LD_INT 1
69425: PUSH
69426: EMPTY
69427: LIST
69428: LIST
69429: PUSH
69430: LD_INT 3
69432: NEG
69433: PUSH
69434: LD_INT 0
69436: PUSH
69437: EMPTY
69438: LIST
69439: LIST
69440: PUSH
69441: LD_INT 3
69443: NEG
69444: PUSH
69445: LD_INT 1
69447: NEG
69448: PUSH
69449: EMPTY
69450: LIST
69451: LIST
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: LIST
69457: LIST
69458: LIST
69459: LIST
69460: LIST
69461: LIST
69462: LIST
69463: LIST
69464: LIST
69465: LIST
69466: LIST
69467: LIST
69468: LIST
69469: LIST
69470: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69471: LD_ADDR_VAR 0 13
69475: PUSH
69476: LD_INT 0
69478: PUSH
69479: LD_INT 0
69481: PUSH
69482: EMPTY
69483: LIST
69484: LIST
69485: PUSH
69486: LD_INT 0
69488: PUSH
69489: LD_INT 1
69491: NEG
69492: PUSH
69493: EMPTY
69494: LIST
69495: LIST
69496: PUSH
69497: LD_INT 1
69499: PUSH
69500: LD_INT 0
69502: PUSH
69503: EMPTY
69504: LIST
69505: LIST
69506: PUSH
69507: LD_INT 1
69509: PUSH
69510: LD_INT 1
69512: PUSH
69513: EMPTY
69514: LIST
69515: LIST
69516: PUSH
69517: LD_INT 0
69519: PUSH
69520: LD_INT 1
69522: PUSH
69523: EMPTY
69524: LIST
69525: LIST
69526: PUSH
69527: LD_INT 1
69529: NEG
69530: PUSH
69531: LD_INT 0
69533: PUSH
69534: EMPTY
69535: LIST
69536: LIST
69537: PUSH
69538: LD_INT 1
69540: NEG
69541: PUSH
69542: LD_INT 1
69544: NEG
69545: PUSH
69546: EMPTY
69547: LIST
69548: LIST
69549: PUSH
69550: LD_INT 1
69552: NEG
69553: PUSH
69554: LD_INT 2
69556: NEG
69557: PUSH
69558: EMPTY
69559: LIST
69560: LIST
69561: PUSH
69562: LD_INT 2
69564: PUSH
69565: LD_INT 1
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 2
69574: PUSH
69575: LD_INT 2
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PUSH
69582: LD_INT 1
69584: PUSH
69585: LD_INT 2
69587: PUSH
69588: EMPTY
69589: LIST
69590: LIST
69591: PUSH
69592: LD_INT 2
69594: NEG
69595: PUSH
69596: LD_INT 1
69598: NEG
69599: PUSH
69600: EMPTY
69601: LIST
69602: LIST
69603: PUSH
69604: LD_INT 2
69606: NEG
69607: PUSH
69608: LD_INT 2
69610: NEG
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 2
69618: NEG
69619: PUSH
69620: LD_INT 3
69622: NEG
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 3
69630: NEG
69631: PUSH
69632: LD_INT 2
69634: NEG
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 3
69642: NEG
69643: PUSH
69644: LD_INT 3
69646: NEG
69647: PUSH
69648: EMPTY
69649: LIST
69650: LIST
69651: PUSH
69652: EMPTY
69653: LIST
69654: LIST
69655: LIST
69656: LIST
69657: LIST
69658: LIST
69659: LIST
69660: LIST
69661: LIST
69662: LIST
69663: LIST
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69670: LD_ADDR_VAR 0 14
69674: PUSH
69675: LD_INT 0
69677: PUSH
69678: LD_INT 0
69680: PUSH
69681: EMPTY
69682: LIST
69683: LIST
69684: PUSH
69685: LD_INT 0
69687: PUSH
69688: LD_INT 1
69690: NEG
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 1
69698: PUSH
69699: LD_INT 0
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 1
69708: PUSH
69709: LD_INT 1
69711: PUSH
69712: EMPTY
69713: LIST
69714: LIST
69715: PUSH
69716: LD_INT 0
69718: PUSH
69719: LD_INT 1
69721: PUSH
69722: EMPTY
69723: LIST
69724: LIST
69725: PUSH
69726: LD_INT 1
69728: NEG
69729: PUSH
69730: LD_INT 0
69732: PUSH
69733: EMPTY
69734: LIST
69735: LIST
69736: PUSH
69737: LD_INT 1
69739: NEG
69740: PUSH
69741: LD_INT 1
69743: NEG
69744: PUSH
69745: EMPTY
69746: LIST
69747: LIST
69748: PUSH
69749: LD_INT 1
69751: NEG
69752: PUSH
69753: LD_INT 2
69755: NEG
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PUSH
69761: LD_INT 0
69763: PUSH
69764: LD_INT 2
69766: NEG
69767: PUSH
69768: EMPTY
69769: LIST
69770: LIST
69771: PUSH
69772: LD_INT 1
69774: PUSH
69775: LD_INT 1
69777: NEG
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: LD_INT 1
69785: PUSH
69786: LD_INT 2
69788: PUSH
69789: EMPTY
69790: LIST
69791: LIST
69792: PUSH
69793: LD_INT 0
69795: PUSH
69796: LD_INT 2
69798: PUSH
69799: EMPTY
69800: LIST
69801: LIST
69802: PUSH
69803: LD_INT 1
69805: NEG
69806: PUSH
69807: LD_INT 1
69809: PUSH
69810: EMPTY
69811: LIST
69812: LIST
69813: PUSH
69814: LD_INT 1
69816: NEG
69817: PUSH
69818: LD_INT 3
69820: NEG
69821: PUSH
69822: EMPTY
69823: LIST
69824: LIST
69825: PUSH
69826: LD_INT 0
69828: PUSH
69829: LD_INT 3
69831: NEG
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_INT 1
69839: PUSH
69840: LD_INT 2
69842: NEG
69843: PUSH
69844: EMPTY
69845: LIST
69846: LIST
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: LIST
69852: LIST
69853: LIST
69854: LIST
69855: LIST
69856: LIST
69857: LIST
69858: LIST
69859: LIST
69860: LIST
69861: LIST
69862: LIST
69863: LIST
69864: LIST
69865: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69866: LD_ADDR_VAR 0 15
69870: PUSH
69871: LD_INT 0
69873: PUSH
69874: LD_INT 0
69876: PUSH
69877: EMPTY
69878: LIST
69879: LIST
69880: PUSH
69881: LD_INT 0
69883: PUSH
69884: LD_INT 1
69886: NEG
69887: PUSH
69888: EMPTY
69889: LIST
69890: LIST
69891: PUSH
69892: LD_INT 1
69894: PUSH
69895: LD_INT 0
69897: PUSH
69898: EMPTY
69899: LIST
69900: LIST
69901: PUSH
69902: LD_INT 1
69904: PUSH
69905: LD_INT 1
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: LD_INT 0
69914: PUSH
69915: LD_INT 1
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: LD_INT 1
69924: NEG
69925: PUSH
69926: LD_INT 0
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 1
69935: NEG
69936: PUSH
69937: LD_INT 1
69939: NEG
69940: PUSH
69941: EMPTY
69942: LIST
69943: LIST
69944: PUSH
69945: LD_INT 1
69947: PUSH
69948: LD_INT 1
69950: NEG
69951: PUSH
69952: EMPTY
69953: LIST
69954: LIST
69955: PUSH
69956: LD_INT 2
69958: PUSH
69959: LD_INT 0
69961: PUSH
69962: EMPTY
69963: LIST
69964: LIST
69965: PUSH
69966: LD_INT 2
69968: PUSH
69969: LD_INT 1
69971: PUSH
69972: EMPTY
69973: LIST
69974: LIST
69975: PUSH
69976: LD_INT 1
69978: NEG
69979: PUSH
69980: LD_INT 1
69982: PUSH
69983: EMPTY
69984: LIST
69985: LIST
69986: PUSH
69987: LD_INT 2
69989: NEG
69990: PUSH
69991: LD_INT 0
69993: PUSH
69994: EMPTY
69995: LIST
69996: LIST
69997: PUSH
69998: LD_INT 2
70000: NEG
70001: PUSH
70002: LD_INT 1
70004: NEG
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 2
70012: PUSH
70013: LD_INT 1
70015: NEG
70016: PUSH
70017: EMPTY
70018: LIST
70019: LIST
70020: PUSH
70021: LD_INT 3
70023: PUSH
70024: LD_INT 0
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: LD_INT 3
70033: PUSH
70034: LD_INT 1
70036: PUSH
70037: EMPTY
70038: LIST
70039: LIST
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: LIST
70053: LIST
70054: LIST
70055: LIST
70056: LIST
70057: LIST
70058: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70059: LD_ADDR_VAR 0 16
70063: PUSH
70064: LD_INT 0
70066: PUSH
70067: LD_INT 0
70069: PUSH
70070: EMPTY
70071: LIST
70072: LIST
70073: PUSH
70074: LD_INT 0
70076: PUSH
70077: LD_INT 1
70079: NEG
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: LD_INT 1
70087: PUSH
70088: LD_INT 0
70090: PUSH
70091: EMPTY
70092: LIST
70093: LIST
70094: PUSH
70095: LD_INT 1
70097: PUSH
70098: LD_INT 1
70100: PUSH
70101: EMPTY
70102: LIST
70103: LIST
70104: PUSH
70105: LD_INT 0
70107: PUSH
70108: LD_INT 1
70110: PUSH
70111: EMPTY
70112: LIST
70113: LIST
70114: PUSH
70115: LD_INT 1
70117: NEG
70118: PUSH
70119: LD_INT 0
70121: PUSH
70122: EMPTY
70123: LIST
70124: LIST
70125: PUSH
70126: LD_INT 1
70128: NEG
70129: PUSH
70130: LD_INT 1
70132: NEG
70133: PUSH
70134: EMPTY
70135: LIST
70136: LIST
70137: PUSH
70138: LD_INT 1
70140: NEG
70141: PUSH
70142: LD_INT 2
70144: NEG
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 2
70152: PUSH
70153: LD_INT 1
70155: PUSH
70156: EMPTY
70157: LIST
70158: LIST
70159: PUSH
70160: LD_INT 2
70162: PUSH
70163: LD_INT 2
70165: PUSH
70166: EMPTY
70167: LIST
70168: LIST
70169: PUSH
70170: LD_INT 1
70172: PUSH
70173: LD_INT 2
70175: PUSH
70176: EMPTY
70177: LIST
70178: LIST
70179: PUSH
70180: LD_INT 2
70182: NEG
70183: PUSH
70184: LD_INT 1
70186: NEG
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PUSH
70192: LD_INT 2
70194: NEG
70195: PUSH
70196: LD_INT 2
70198: NEG
70199: PUSH
70200: EMPTY
70201: LIST
70202: LIST
70203: PUSH
70204: LD_INT 3
70206: PUSH
70207: LD_INT 2
70209: PUSH
70210: EMPTY
70211: LIST
70212: LIST
70213: PUSH
70214: LD_INT 3
70216: PUSH
70217: LD_INT 3
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: PUSH
70224: LD_INT 2
70226: PUSH
70227: LD_INT 3
70229: PUSH
70230: EMPTY
70231: LIST
70232: LIST
70233: PUSH
70234: EMPTY
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: LIST
70247: LIST
70248: LIST
70249: LIST
70250: LIST
70251: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70252: LD_ADDR_VAR 0 17
70256: PUSH
70257: LD_INT 0
70259: PUSH
70260: LD_INT 0
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 0
70269: PUSH
70270: LD_INT 1
70272: NEG
70273: PUSH
70274: EMPTY
70275: LIST
70276: LIST
70277: PUSH
70278: LD_INT 1
70280: PUSH
70281: LD_INT 0
70283: PUSH
70284: EMPTY
70285: LIST
70286: LIST
70287: PUSH
70288: LD_INT 1
70290: PUSH
70291: LD_INT 1
70293: PUSH
70294: EMPTY
70295: LIST
70296: LIST
70297: PUSH
70298: LD_INT 0
70300: PUSH
70301: LD_INT 1
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 1
70310: NEG
70311: PUSH
70312: LD_INT 0
70314: PUSH
70315: EMPTY
70316: LIST
70317: LIST
70318: PUSH
70319: LD_INT 1
70321: NEG
70322: PUSH
70323: LD_INT 1
70325: NEG
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 1
70333: NEG
70334: PUSH
70335: LD_INT 2
70337: NEG
70338: PUSH
70339: EMPTY
70340: LIST
70341: LIST
70342: PUSH
70343: LD_INT 0
70345: PUSH
70346: LD_INT 2
70348: NEG
70349: PUSH
70350: EMPTY
70351: LIST
70352: LIST
70353: PUSH
70354: LD_INT 1
70356: PUSH
70357: LD_INT 1
70359: NEG
70360: PUSH
70361: EMPTY
70362: LIST
70363: LIST
70364: PUSH
70365: LD_INT 2
70367: PUSH
70368: LD_INT 0
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: PUSH
70375: LD_INT 2
70377: PUSH
70378: LD_INT 1
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 2
70387: PUSH
70388: LD_INT 2
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 1
70397: PUSH
70398: LD_INT 2
70400: PUSH
70401: EMPTY
70402: LIST
70403: LIST
70404: PUSH
70405: LD_INT 0
70407: PUSH
70408: LD_INT 2
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 1
70417: NEG
70418: PUSH
70419: LD_INT 1
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: LD_INT 2
70428: NEG
70429: PUSH
70430: LD_INT 0
70432: PUSH
70433: EMPTY
70434: LIST
70435: LIST
70436: PUSH
70437: LD_INT 2
70439: NEG
70440: PUSH
70441: LD_INT 1
70443: NEG
70444: PUSH
70445: EMPTY
70446: LIST
70447: LIST
70448: PUSH
70449: LD_INT 2
70451: NEG
70452: PUSH
70453: LD_INT 2
70455: NEG
70456: PUSH
70457: EMPTY
70458: LIST
70459: LIST
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: LIST
70471: LIST
70472: LIST
70473: LIST
70474: LIST
70475: LIST
70476: LIST
70477: LIST
70478: LIST
70479: LIST
70480: LIST
70481: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70482: LD_ADDR_VAR 0 18
70486: PUSH
70487: LD_INT 0
70489: PUSH
70490: LD_INT 0
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 0
70499: PUSH
70500: LD_INT 1
70502: NEG
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 1
70510: PUSH
70511: LD_INT 0
70513: PUSH
70514: EMPTY
70515: LIST
70516: LIST
70517: PUSH
70518: LD_INT 1
70520: PUSH
70521: LD_INT 1
70523: PUSH
70524: EMPTY
70525: LIST
70526: LIST
70527: PUSH
70528: LD_INT 0
70530: PUSH
70531: LD_INT 1
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 1
70540: NEG
70541: PUSH
70542: LD_INT 0
70544: PUSH
70545: EMPTY
70546: LIST
70547: LIST
70548: PUSH
70549: LD_INT 1
70551: NEG
70552: PUSH
70553: LD_INT 1
70555: NEG
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 1
70563: NEG
70564: PUSH
70565: LD_INT 2
70567: NEG
70568: PUSH
70569: EMPTY
70570: LIST
70571: LIST
70572: PUSH
70573: LD_INT 0
70575: PUSH
70576: LD_INT 2
70578: NEG
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 1
70586: PUSH
70587: LD_INT 1
70589: NEG
70590: PUSH
70591: EMPTY
70592: LIST
70593: LIST
70594: PUSH
70595: LD_INT 2
70597: PUSH
70598: LD_INT 0
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: PUSH
70605: LD_INT 2
70607: PUSH
70608: LD_INT 1
70610: PUSH
70611: EMPTY
70612: LIST
70613: LIST
70614: PUSH
70615: LD_INT 2
70617: PUSH
70618: LD_INT 2
70620: PUSH
70621: EMPTY
70622: LIST
70623: LIST
70624: PUSH
70625: LD_INT 1
70627: PUSH
70628: LD_INT 2
70630: PUSH
70631: EMPTY
70632: LIST
70633: LIST
70634: PUSH
70635: LD_INT 0
70637: PUSH
70638: LD_INT 2
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PUSH
70645: LD_INT 1
70647: NEG
70648: PUSH
70649: LD_INT 1
70651: PUSH
70652: EMPTY
70653: LIST
70654: LIST
70655: PUSH
70656: LD_INT 2
70658: NEG
70659: PUSH
70660: LD_INT 0
70662: PUSH
70663: EMPTY
70664: LIST
70665: LIST
70666: PUSH
70667: LD_INT 2
70669: NEG
70670: PUSH
70671: LD_INT 1
70673: NEG
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: LD_INT 2
70681: NEG
70682: PUSH
70683: LD_INT 2
70685: NEG
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: EMPTY
70692: LIST
70693: LIST
70694: LIST
70695: LIST
70696: LIST
70697: LIST
70698: LIST
70699: LIST
70700: LIST
70701: LIST
70702: LIST
70703: LIST
70704: LIST
70705: LIST
70706: LIST
70707: LIST
70708: LIST
70709: LIST
70710: LIST
70711: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70712: LD_ADDR_VAR 0 19
70716: PUSH
70717: LD_INT 0
70719: PUSH
70720: LD_INT 0
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_INT 0
70729: PUSH
70730: LD_INT 1
70732: NEG
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 1
70740: PUSH
70741: LD_INT 0
70743: PUSH
70744: EMPTY
70745: LIST
70746: LIST
70747: PUSH
70748: LD_INT 1
70750: PUSH
70751: LD_INT 1
70753: PUSH
70754: EMPTY
70755: LIST
70756: LIST
70757: PUSH
70758: LD_INT 0
70760: PUSH
70761: LD_INT 1
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 1
70770: NEG
70771: PUSH
70772: LD_INT 0
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: LD_INT 1
70781: NEG
70782: PUSH
70783: LD_INT 1
70785: NEG
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 1
70793: NEG
70794: PUSH
70795: LD_INT 2
70797: NEG
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 0
70805: PUSH
70806: LD_INT 2
70808: NEG
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: PUSH
70814: LD_INT 1
70816: PUSH
70817: LD_INT 1
70819: NEG
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: PUSH
70825: LD_INT 2
70827: PUSH
70828: LD_INT 0
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: LD_INT 2
70837: PUSH
70838: LD_INT 1
70840: PUSH
70841: EMPTY
70842: LIST
70843: LIST
70844: PUSH
70845: LD_INT 2
70847: PUSH
70848: LD_INT 2
70850: PUSH
70851: EMPTY
70852: LIST
70853: LIST
70854: PUSH
70855: LD_INT 1
70857: PUSH
70858: LD_INT 2
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 0
70867: PUSH
70868: LD_INT 2
70870: PUSH
70871: EMPTY
70872: LIST
70873: LIST
70874: PUSH
70875: LD_INT 1
70877: NEG
70878: PUSH
70879: LD_INT 1
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: LD_INT 2
70888: NEG
70889: PUSH
70890: LD_INT 0
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: PUSH
70897: LD_INT 2
70899: NEG
70900: PUSH
70901: LD_INT 1
70903: NEG
70904: PUSH
70905: EMPTY
70906: LIST
70907: LIST
70908: PUSH
70909: LD_INT 2
70911: NEG
70912: PUSH
70913: LD_INT 2
70915: NEG
70916: PUSH
70917: EMPTY
70918: LIST
70919: LIST
70920: PUSH
70921: EMPTY
70922: LIST
70923: LIST
70924: LIST
70925: LIST
70926: LIST
70927: LIST
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: LIST
70939: LIST
70940: LIST
70941: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70942: LD_ADDR_VAR 0 20
70946: PUSH
70947: LD_INT 0
70949: PUSH
70950: LD_INT 0
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: LD_INT 0
70959: PUSH
70960: LD_INT 1
70962: NEG
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: PUSH
70968: LD_INT 1
70970: PUSH
70971: LD_INT 0
70973: PUSH
70974: EMPTY
70975: LIST
70976: LIST
70977: PUSH
70978: LD_INT 1
70980: PUSH
70981: LD_INT 1
70983: PUSH
70984: EMPTY
70985: LIST
70986: LIST
70987: PUSH
70988: LD_INT 0
70990: PUSH
70991: LD_INT 1
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: PUSH
70998: LD_INT 1
71000: NEG
71001: PUSH
71002: LD_INT 0
71004: PUSH
71005: EMPTY
71006: LIST
71007: LIST
71008: PUSH
71009: LD_INT 1
71011: NEG
71012: PUSH
71013: LD_INT 1
71015: NEG
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 1
71023: NEG
71024: PUSH
71025: LD_INT 2
71027: NEG
71028: PUSH
71029: EMPTY
71030: LIST
71031: LIST
71032: PUSH
71033: LD_INT 0
71035: PUSH
71036: LD_INT 2
71038: NEG
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 1
71046: PUSH
71047: LD_INT 1
71049: NEG
71050: PUSH
71051: EMPTY
71052: LIST
71053: LIST
71054: PUSH
71055: LD_INT 2
71057: PUSH
71058: LD_INT 0
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_INT 2
71067: PUSH
71068: LD_INT 1
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 2
71077: PUSH
71078: LD_INT 2
71080: PUSH
71081: EMPTY
71082: LIST
71083: LIST
71084: PUSH
71085: LD_INT 1
71087: PUSH
71088: LD_INT 2
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: LD_INT 0
71097: PUSH
71098: LD_INT 2
71100: PUSH
71101: EMPTY
71102: LIST
71103: LIST
71104: PUSH
71105: LD_INT 1
71107: NEG
71108: PUSH
71109: LD_INT 1
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PUSH
71116: LD_INT 2
71118: NEG
71119: PUSH
71120: LD_INT 0
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: LD_INT 2
71129: NEG
71130: PUSH
71131: LD_INT 1
71133: NEG
71134: PUSH
71135: EMPTY
71136: LIST
71137: LIST
71138: PUSH
71139: LD_INT 2
71141: NEG
71142: PUSH
71143: LD_INT 2
71145: NEG
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: LIST
71155: LIST
71156: LIST
71157: LIST
71158: LIST
71159: LIST
71160: LIST
71161: LIST
71162: LIST
71163: LIST
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71172: LD_ADDR_VAR 0 21
71176: PUSH
71177: LD_INT 0
71179: PUSH
71180: LD_INT 0
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: LD_INT 0
71189: PUSH
71190: LD_INT 1
71192: NEG
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 1
71200: PUSH
71201: LD_INT 0
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: LD_INT 1
71210: PUSH
71211: LD_INT 1
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: PUSH
71218: LD_INT 0
71220: PUSH
71221: LD_INT 1
71223: PUSH
71224: EMPTY
71225: LIST
71226: LIST
71227: PUSH
71228: LD_INT 1
71230: NEG
71231: PUSH
71232: LD_INT 0
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: LD_INT 1
71241: NEG
71242: PUSH
71243: LD_INT 1
71245: NEG
71246: PUSH
71247: EMPTY
71248: LIST
71249: LIST
71250: PUSH
71251: LD_INT 1
71253: NEG
71254: PUSH
71255: LD_INT 2
71257: NEG
71258: PUSH
71259: EMPTY
71260: LIST
71261: LIST
71262: PUSH
71263: LD_INT 0
71265: PUSH
71266: LD_INT 2
71268: NEG
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: PUSH
71274: LD_INT 1
71276: PUSH
71277: LD_INT 1
71279: NEG
71280: PUSH
71281: EMPTY
71282: LIST
71283: LIST
71284: PUSH
71285: LD_INT 2
71287: PUSH
71288: LD_INT 0
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: LD_INT 2
71297: PUSH
71298: LD_INT 1
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 2
71307: PUSH
71308: LD_INT 2
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: PUSH
71315: LD_INT 1
71317: PUSH
71318: LD_INT 2
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: LD_INT 0
71327: PUSH
71328: LD_INT 2
71330: PUSH
71331: EMPTY
71332: LIST
71333: LIST
71334: PUSH
71335: LD_INT 1
71337: NEG
71338: PUSH
71339: LD_INT 1
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 2
71348: NEG
71349: PUSH
71350: LD_INT 0
71352: PUSH
71353: EMPTY
71354: LIST
71355: LIST
71356: PUSH
71357: LD_INT 2
71359: NEG
71360: PUSH
71361: LD_INT 1
71363: NEG
71364: PUSH
71365: EMPTY
71366: LIST
71367: LIST
71368: PUSH
71369: LD_INT 2
71371: NEG
71372: PUSH
71373: LD_INT 2
71375: NEG
71376: PUSH
71377: EMPTY
71378: LIST
71379: LIST
71380: PUSH
71381: EMPTY
71382: LIST
71383: LIST
71384: LIST
71385: LIST
71386: LIST
71387: LIST
71388: LIST
71389: LIST
71390: LIST
71391: LIST
71392: LIST
71393: LIST
71394: LIST
71395: LIST
71396: LIST
71397: LIST
71398: LIST
71399: LIST
71400: LIST
71401: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71402: LD_ADDR_VAR 0 22
71406: PUSH
71407: LD_INT 0
71409: PUSH
71410: LD_INT 0
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: PUSH
71417: LD_INT 0
71419: PUSH
71420: LD_INT 1
71422: NEG
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: PUSH
71428: LD_INT 1
71430: PUSH
71431: LD_INT 0
71433: PUSH
71434: EMPTY
71435: LIST
71436: LIST
71437: PUSH
71438: LD_INT 1
71440: PUSH
71441: LD_INT 1
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: PUSH
71448: LD_INT 0
71450: PUSH
71451: LD_INT 1
71453: PUSH
71454: EMPTY
71455: LIST
71456: LIST
71457: PUSH
71458: LD_INT 1
71460: NEG
71461: PUSH
71462: LD_INT 0
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PUSH
71469: LD_INT 1
71471: NEG
71472: PUSH
71473: LD_INT 1
71475: NEG
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 1
71483: NEG
71484: PUSH
71485: LD_INT 2
71487: NEG
71488: PUSH
71489: EMPTY
71490: LIST
71491: LIST
71492: PUSH
71493: LD_INT 0
71495: PUSH
71496: LD_INT 2
71498: NEG
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PUSH
71504: LD_INT 1
71506: PUSH
71507: LD_INT 1
71509: NEG
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: PUSH
71515: LD_INT 2
71517: PUSH
71518: LD_INT 0
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: PUSH
71525: LD_INT 2
71527: PUSH
71528: LD_INT 1
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PUSH
71535: LD_INT 2
71537: PUSH
71538: LD_INT 2
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: PUSH
71545: LD_INT 1
71547: PUSH
71548: LD_INT 2
71550: PUSH
71551: EMPTY
71552: LIST
71553: LIST
71554: PUSH
71555: LD_INT 0
71557: PUSH
71558: LD_INT 2
71560: PUSH
71561: EMPTY
71562: LIST
71563: LIST
71564: PUSH
71565: LD_INT 1
71567: NEG
71568: PUSH
71569: LD_INT 1
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PUSH
71576: LD_INT 2
71578: NEG
71579: PUSH
71580: LD_INT 0
71582: PUSH
71583: EMPTY
71584: LIST
71585: LIST
71586: PUSH
71587: LD_INT 2
71589: NEG
71590: PUSH
71591: LD_INT 1
71593: NEG
71594: PUSH
71595: EMPTY
71596: LIST
71597: LIST
71598: PUSH
71599: LD_INT 2
71601: NEG
71602: PUSH
71603: LD_INT 2
71605: NEG
71606: PUSH
71607: EMPTY
71608: LIST
71609: LIST
71610: PUSH
71611: EMPTY
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
71632: LD_ADDR_VAR 0 23
71636: PUSH
71637: LD_INT 0
71639: PUSH
71640: LD_INT 0
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PUSH
71647: LD_INT 0
71649: PUSH
71650: LD_INT 1
71652: NEG
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: PUSH
71658: LD_INT 1
71660: PUSH
71661: LD_INT 0
71663: PUSH
71664: EMPTY
71665: LIST
71666: LIST
71667: PUSH
71668: LD_INT 1
71670: PUSH
71671: LD_INT 1
71673: PUSH
71674: EMPTY
71675: LIST
71676: LIST
71677: PUSH
71678: LD_INT 0
71680: PUSH
71681: LD_INT 1
71683: PUSH
71684: EMPTY
71685: LIST
71686: LIST
71687: PUSH
71688: LD_INT 1
71690: NEG
71691: PUSH
71692: LD_INT 0
71694: PUSH
71695: EMPTY
71696: LIST
71697: LIST
71698: PUSH
71699: LD_INT 1
71701: NEG
71702: PUSH
71703: LD_INT 1
71705: NEG
71706: PUSH
71707: EMPTY
71708: LIST
71709: LIST
71710: PUSH
71711: LD_INT 1
71713: NEG
71714: PUSH
71715: LD_INT 2
71717: NEG
71718: PUSH
71719: EMPTY
71720: LIST
71721: LIST
71722: PUSH
71723: LD_INT 0
71725: PUSH
71726: LD_INT 2
71728: NEG
71729: PUSH
71730: EMPTY
71731: LIST
71732: LIST
71733: PUSH
71734: LD_INT 1
71736: PUSH
71737: LD_INT 1
71739: NEG
71740: PUSH
71741: EMPTY
71742: LIST
71743: LIST
71744: PUSH
71745: LD_INT 2
71747: PUSH
71748: LD_INT 0
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PUSH
71755: LD_INT 2
71757: PUSH
71758: LD_INT 1
71760: PUSH
71761: EMPTY
71762: LIST
71763: LIST
71764: PUSH
71765: LD_INT 2
71767: PUSH
71768: LD_INT 2
71770: PUSH
71771: EMPTY
71772: LIST
71773: LIST
71774: PUSH
71775: LD_INT 1
71777: PUSH
71778: LD_INT 2
71780: PUSH
71781: EMPTY
71782: LIST
71783: LIST
71784: PUSH
71785: LD_INT 0
71787: PUSH
71788: LD_INT 2
71790: PUSH
71791: EMPTY
71792: LIST
71793: LIST
71794: PUSH
71795: LD_INT 1
71797: NEG
71798: PUSH
71799: LD_INT 1
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: PUSH
71806: LD_INT 2
71808: NEG
71809: PUSH
71810: LD_INT 0
71812: PUSH
71813: EMPTY
71814: LIST
71815: LIST
71816: PUSH
71817: LD_INT 2
71819: NEG
71820: PUSH
71821: LD_INT 1
71823: NEG
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 2
71831: NEG
71832: PUSH
71833: LD_INT 2
71835: NEG
71836: PUSH
71837: EMPTY
71838: LIST
71839: LIST
71840: PUSH
71841: LD_INT 2
71843: NEG
71844: PUSH
71845: LD_INT 3
71847: NEG
71848: PUSH
71849: EMPTY
71850: LIST
71851: LIST
71852: PUSH
71853: LD_INT 1
71855: NEG
71856: PUSH
71857: LD_INT 3
71859: NEG
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: PUSH
71865: LD_INT 1
71867: PUSH
71868: LD_INT 2
71870: NEG
71871: PUSH
71872: EMPTY
71873: LIST
71874: LIST
71875: PUSH
71876: LD_INT 2
71878: PUSH
71879: LD_INT 1
71881: NEG
71882: PUSH
71883: EMPTY
71884: LIST
71885: LIST
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: LIST
71891: LIST
71892: LIST
71893: LIST
71894: LIST
71895: LIST
71896: LIST
71897: LIST
71898: LIST
71899: LIST
71900: LIST
71901: LIST
71902: LIST
71903: LIST
71904: LIST
71905: LIST
71906: LIST
71907: LIST
71908: LIST
71909: LIST
71910: LIST
71911: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
71912: LD_ADDR_VAR 0 24
71916: PUSH
71917: LD_INT 0
71919: PUSH
71920: LD_INT 0
71922: PUSH
71923: EMPTY
71924: LIST
71925: LIST
71926: PUSH
71927: LD_INT 0
71929: PUSH
71930: LD_INT 1
71932: NEG
71933: PUSH
71934: EMPTY
71935: LIST
71936: LIST
71937: PUSH
71938: LD_INT 1
71940: PUSH
71941: LD_INT 0
71943: PUSH
71944: EMPTY
71945: LIST
71946: LIST
71947: PUSH
71948: LD_INT 1
71950: PUSH
71951: LD_INT 1
71953: PUSH
71954: EMPTY
71955: LIST
71956: LIST
71957: PUSH
71958: LD_INT 0
71960: PUSH
71961: LD_INT 1
71963: PUSH
71964: EMPTY
71965: LIST
71966: LIST
71967: PUSH
71968: LD_INT 1
71970: NEG
71971: PUSH
71972: LD_INT 0
71974: PUSH
71975: EMPTY
71976: LIST
71977: LIST
71978: PUSH
71979: LD_INT 1
71981: NEG
71982: PUSH
71983: LD_INT 1
71985: NEG
71986: PUSH
71987: EMPTY
71988: LIST
71989: LIST
71990: PUSH
71991: LD_INT 1
71993: NEG
71994: PUSH
71995: LD_INT 2
71997: NEG
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: PUSH
72003: LD_INT 0
72005: PUSH
72006: LD_INT 2
72008: NEG
72009: PUSH
72010: EMPTY
72011: LIST
72012: LIST
72013: PUSH
72014: LD_INT 1
72016: PUSH
72017: LD_INT 1
72019: NEG
72020: PUSH
72021: EMPTY
72022: LIST
72023: LIST
72024: PUSH
72025: LD_INT 2
72027: PUSH
72028: LD_INT 0
72030: PUSH
72031: EMPTY
72032: LIST
72033: LIST
72034: PUSH
72035: LD_INT 2
72037: PUSH
72038: LD_INT 1
72040: PUSH
72041: EMPTY
72042: LIST
72043: LIST
72044: PUSH
72045: LD_INT 2
72047: PUSH
72048: LD_INT 2
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: PUSH
72055: LD_INT 1
72057: PUSH
72058: LD_INT 2
72060: PUSH
72061: EMPTY
72062: LIST
72063: LIST
72064: PUSH
72065: LD_INT 0
72067: PUSH
72068: LD_INT 2
72070: PUSH
72071: EMPTY
72072: LIST
72073: LIST
72074: PUSH
72075: LD_INT 1
72077: NEG
72078: PUSH
72079: LD_INT 1
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: PUSH
72086: LD_INT 2
72088: NEG
72089: PUSH
72090: LD_INT 0
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: PUSH
72097: LD_INT 2
72099: NEG
72100: PUSH
72101: LD_INT 1
72103: NEG
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: PUSH
72109: LD_INT 2
72111: NEG
72112: PUSH
72113: LD_INT 2
72115: NEG
72116: PUSH
72117: EMPTY
72118: LIST
72119: LIST
72120: PUSH
72121: LD_INT 1
72123: PUSH
72124: LD_INT 2
72126: NEG
72127: PUSH
72128: EMPTY
72129: LIST
72130: LIST
72131: PUSH
72132: LD_INT 2
72134: PUSH
72135: LD_INT 1
72137: NEG
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: PUSH
72143: LD_INT 3
72145: PUSH
72146: LD_INT 1
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: PUSH
72153: LD_INT 3
72155: PUSH
72156: LD_INT 2
72158: PUSH
72159: EMPTY
72160: LIST
72161: LIST
72162: PUSH
72163: EMPTY
72164: LIST
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: LIST
72175: LIST
72176: LIST
72177: LIST
72178: LIST
72179: LIST
72180: LIST
72181: LIST
72182: LIST
72183: LIST
72184: LIST
72185: LIST
72186: LIST
72187: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
72188: LD_ADDR_VAR 0 25
72192: PUSH
72193: LD_INT 0
72195: PUSH
72196: LD_INT 0
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: LD_INT 0
72205: PUSH
72206: LD_INT 1
72208: NEG
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: PUSH
72214: LD_INT 1
72216: PUSH
72217: LD_INT 0
72219: PUSH
72220: EMPTY
72221: LIST
72222: LIST
72223: PUSH
72224: LD_INT 1
72226: PUSH
72227: LD_INT 1
72229: PUSH
72230: EMPTY
72231: LIST
72232: LIST
72233: PUSH
72234: LD_INT 0
72236: PUSH
72237: LD_INT 1
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PUSH
72244: LD_INT 1
72246: NEG
72247: PUSH
72248: LD_INT 0
72250: PUSH
72251: EMPTY
72252: LIST
72253: LIST
72254: PUSH
72255: LD_INT 1
72257: NEG
72258: PUSH
72259: LD_INT 1
72261: NEG
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 1
72269: NEG
72270: PUSH
72271: LD_INT 2
72273: NEG
72274: PUSH
72275: EMPTY
72276: LIST
72277: LIST
72278: PUSH
72279: LD_INT 0
72281: PUSH
72282: LD_INT 2
72284: NEG
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: PUSH
72290: LD_INT 1
72292: PUSH
72293: LD_INT 1
72295: NEG
72296: PUSH
72297: EMPTY
72298: LIST
72299: LIST
72300: PUSH
72301: LD_INT 2
72303: PUSH
72304: LD_INT 0
72306: PUSH
72307: EMPTY
72308: LIST
72309: LIST
72310: PUSH
72311: LD_INT 2
72313: PUSH
72314: LD_INT 1
72316: PUSH
72317: EMPTY
72318: LIST
72319: LIST
72320: PUSH
72321: LD_INT 2
72323: PUSH
72324: LD_INT 2
72326: PUSH
72327: EMPTY
72328: LIST
72329: LIST
72330: PUSH
72331: LD_INT 1
72333: PUSH
72334: LD_INT 2
72336: PUSH
72337: EMPTY
72338: LIST
72339: LIST
72340: PUSH
72341: LD_INT 0
72343: PUSH
72344: LD_INT 2
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: PUSH
72351: LD_INT 1
72353: NEG
72354: PUSH
72355: LD_INT 1
72357: PUSH
72358: EMPTY
72359: LIST
72360: LIST
72361: PUSH
72362: LD_INT 2
72364: NEG
72365: PUSH
72366: LD_INT 0
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: PUSH
72373: LD_INT 2
72375: NEG
72376: PUSH
72377: LD_INT 1
72379: NEG
72380: PUSH
72381: EMPTY
72382: LIST
72383: LIST
72384: PUSH
72385: LD_INT 2
72387: NEG
72388: PUSH
72389: LD_INT 2
72391: NEG
72392: PUSH
72393: EMPTY
72394: LIST
72395: LIST
72396: PUSH
72397: LD_INT 3
72399: PUSH
72400: LD_INT 1
72402: PUSH
72403: EMPTY
72404: LIST
72405: LIST
72406: PUSH
72407: LD_INT 3
72409: PUSH
72410: LD_INT 2
72412: PUSH
72413: EMPTY
72414: LIST
72415: LIST
72416: PUSH
72417: LD_INT 2
72419: PUSH
72420: LD_INT 3
72422: PUSH
72423: EMPTY
72424: LIST
72425: LIST
72426: PUSH
72427: LD_INT 1
72429: PUSH
72430: LD_INT 3
72432: PUSH
72433: EMPTY
72434: LIST
72435: LIST
72436: PUSH
72437: EMPTY
72438: LIST
72439: LIST
72440: LIST
72441: LIST
72442: LIST
72443: LIST
72444: LIST
72445: LIST
72446: LIST
72447: LIST
72448: LIST
72449: LIST
72450: LIST
72451: LIST
72452: LIST
72453: LIST
72454: LIST
72455: LIST
72456: LIST
72457: LIST
72458: LIST
72459: LIST
72460: LIST
72461: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
72462: LD_ADDR_VAR 0 26
72466: PUSH
72467: LD_INT 0
72469: PUSH
72470: LD_INT 0
72472: PUSH
72473: EMPTY
72474: LIST
72475: LIST
72476: PUSH
72477: LD_INT 0
72479: PUSH
72480: LD_INT 1
72482: NEG
72483: PUSH
72484: EMPTY
72485: LIST
72486: LIST
72487: PUSH
72488: LD_INT 1
72490: PUSH
72491: LD_INT 0
72493: PUSH
72494: EMPTY
72495: LIST
72496: LIST
72497: PUSH
72498: LD_INT 1
72500: PUSH
72501: LD_INT 1
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: PUSH
72508: LD_INT 0
72510: PUSH
72511: LD_INT 1
72513: PUSH
72514: EMPTY
72515: LIST
72516: LIST
72517: PUSH
72518: LD_INT 1
72520: NEG
72521: PUSH
72522: LD_INT 0
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: PUSH
72529: LD_INT 1
72531: NEG
72532: PUSH
72533: LD_INT 1
72535: NEG
72536: PUSH
72537: EMPTY
72538: LIST
72539: LIST
72540: PUSH
72541: LD_INT 1
72543: NEG
72544: PUSH
72545: LD_INT 2
72547: NEG
72548: PUSH
72549: EMPTY
72550: LIST
72551: LIST
72552: PUSH
72553: LD_INT 0
72555: PUSH
72556: LD_INT 2
72558: NEG
72559: PUSH
72560: EMPTY
72561: LIST
72562: LIST
72563: PUSH
72564: LD_INT 1
72566: PUSH
72567: LD_INT 1
72569: NEG
72570: PUSH
72571: EMPTY
72572: LIST
72573: LIST
72574: PUSH
72575: LD_INT 2
72577: PUSH
72578: LD_INT 0
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: PUSH
72585: LD_INT 2
72587: PUSH
72588: LD_INT 1
72590: PUSH
72591: EMPTY
72592: LIST
72593: LIST
72594: PUSH
72595: LD_INT 2
72597: PUSH
72598: LD_INT 2
72600: PUSH
72601: EMPTY
72602: LIST
72603: LIST
72604: PUSH
72605: LD_INT 1
72607: PUSH
72608: LD_INT 2
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: PUSH
72615: LD_INT 0
72617: PUSH
72618: LD_INT 2
72620: PUSH
72621: EMPTY
72622: LIST
72623: LIST
72624: PUSH
72625: LD_INT 1
72627: NEG
72628: PUSH
72629: LD_INT 1
72631: PUSH
72632: EMPTY
72633: LIST
72634: LIST
72635: PUSH
72636: LD_INT 2
72638: NEG
72639: PUSH
72640: LD_INT 0
72642: PUSH
72643: EMPTY
72644: LIST
72645: LIST
72646: PUSH
72647: LD_INT 2
72649: NEG
72650: PUSH
72651: LD_INT 1
72653: NEG
72654: PUSH
72655: EMPTY
72656: LIST
72657: LIST
72658: PUSH
72659: LD_INT 2
72661: NEG
72662: PUSH
72663: LD_INT 2
72665: NEG
72666: PUSH
72667: EMPTY
72668: LIST
72669: LIST
72670: PUSH
72671: LD_INT 2
72673: PUSH
72674: LD_INT 3
72676: PUSH
72677: EMPTY
72678: LIST
72679: LIST
72680: PUSH
72681: LD_INT 1
72683: PUSH
72684: LD_INT 3
72686: PUSH
72687: EMPTY
72688: LIST
72689: LIST
72690: PUSH
72691: LD_INT 1
72693: NEG
72694: PUSH
72695: LD_INT 2
72697: PUSH
72698: EMPTY
72699: LIST
72700: LIST
72701: PUSH
72702: LD_INT 2
72704: NEG
72705: PUSH
72706: LD_INT 1
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: EMPTY
72714: LIST
72715: LIST
72716: LIST
72717: LIST
72718: LIST
72719: LIST
72720: LIST
72721: LIST
72722: LIST
72723: LIST
72724: LIST
72725: LIST
72726: LIST
72727: LIST
72728: LIST
72729: LIST
72730: LIST
72731: LIST
72732: LIST
72733: LIST
72734: LIST
72735: LIST
72736: LIST
72737: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
72738: LD_ADDR_VAR 0 27
72742: PUSH
72743: LD_INT 0
72745: PUSH
72746: LD_INT 0
72748: PUSH
72749: EMPTY
72750: LIST
72751: LIST
72752: PUSH
72753: LD_INT 0
72755: PUSH
72756: LD_INT 1
72758: NEG
72759: PUSH
72760: EMPTY
72761: LIST
72762: LIST
72763: PUSH
72764: LD_INT 1
72766: PUSH
72767: LD_INT 0
72769: PUSH
72770: EMPTY
72771: LIST
72772: LIST
72773: PUSH
72774: LD_INT 1
72776: PUSH
72777: LD_INT 1
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: PUSH
72784: LD_INT 0
72786: PUSH
72787: LD_INT 1
72789: PUSH
72790: EMPTY
72791: LIST
72792: LIST
72793: PUSH
72794: LD_INT 1
72796: NEG
72797: PUSH
72798: LD_INT 0
72800: PUSH
72801: EMPTY
72802: LIST
72803: LIST
72804: PUSH
72805: LD_INT 1
72807: NEG
72808: PUSH
72809: LD_INT 1
72811: NEG
72812: PUSH
72813: EMPTY
72814: LIST
72815: LIST
72816: PUSH
72817: LD_INT 1
72819: NEG
72820: PUSH
72821: LD_INT 2
72823: NEG
72824: PUSH
72825: EMPTY
72826: LIST
72827: LIST
72828: PUSH
72829: LD_INT 0
72831: PUSH
72832: LD_INT 2
72834: NEG
72835: PUSH
72836: EMPTY
72837: LIST
72838: LIST
72839: PUSH
72840: LD_INT 1
72842: PUSH
72843: LD_INT 1
72845: NEG
72846: PUSH
72847: EMPTY
72848: LIST
72849: LIST
72850: PUSH
72851: LD_INT 2
72853: PUSH
72854: LD_INT 0
72856: PUSH
72857: EMPTY
72858: LIST
72859: LIST
72860: PUSH
72861: LD_INT 2
72863: PUSH
72864: LD_INT 1
72866: PUSH
72867: EMPTY
72868: LIST
72869: LIST
72870: PUSH
72871: LD_INT 2
72873: PUSH
72874: LD_INT 2
72876: PUSH
72877: EMPTY
72878: LIST
72879: LIST
72880: PUSH
72881: LD_INT 1
72883: PUSH
72884: LD_INT 2
72886: PUSH
72887: EMPTY
72888: LIST
72889: LIST
72890: PUSH
72891: LD_INT 0
72893: PUSH
72894: LD_INT 2
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: PUSH
72901: LD_INT 1
72903: NEG
72904: PUSH
72905: LD_INT 1
72907: PUSH
72908: EMPTY
72909: LIST
72910: LIST
72911: PUSH
72912: LD_INT 2
72914: NEG
72915: PUSH
72916: LD_INT 0
72918: PUSH
72919: EMPTY
72920: LIST
72921: LIST
72922: PUSH
72923: LD_INT 2
72925: NEG
72926: PUSH
72927: LD_INT 1
72929: NEG
72930: PUSH
72931: EMPTY
72932: LIST
72933: LIST
72934: PUSH
72935: LD_INT 2
72937: NEG
72938: PUSH
72939: LD_INT 2
72941: NEG
72942: PUSH
72943: EMPTY
72944: LIST
72945: LIST
72946: PUSH
72947: LD_INT 1
72949: NEG
72950: PUSH
72951: LD_INT 2
72953: PUSH
72954: EMPTY
72955: LIST
72956: LIST
72957: PUSH
72958: LD_INT 2
72960: NEG
72961: PUSH
72962: LD_INT 1
72964: PUSH
72965: EMPTY
72966: LIST
72967: LIST
72968: PUSH
72969: LD_INT 3
72971: NEG
72972: PUSH
72973: LD_INT 1
72975: NEG
72976: PUSH
72977: EMPTY
72978: LIST
72979: LIST
72980: PUSH
72981: LD_INT 3
72983: NEG
72984: PUSH
72985: LD_INT 2
72987: NEG
72988: PUSH
72989: EMPTY
72990: LIST
72991: LIST
72992: PUSH
72993: EMPTY
72994: LIST
72995: LIST
72996: LIST
72997: LIST
72998: LIST
72999: LIST
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: LIST
73005: LIST
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
73018: LD_ADDR_VAR 0 28
73022: PUSH
73023: LD_INT 0
73025: PUSH
73026: LD_INT 0
73028: PUSH
73029: EMPTY
73030: LIST
73031: LIST
73032: PUSH
73033: LD_INT 0
73035: PUSH
73036: LD_INT 1
73038: NEG
73039: PUSH
73040: EMPTY
73041: LIST
73042: LIST
73043: PUSH
73044: LD_INT 1
73046: PUSH
73047: LD_INT 0
73049: PUSH
73050: EMPTY
73051: LIST
73052: LIST
73053: PUSH
73054: LD_INT 1
73056: PUSH
73057: LD_INT 1
73059: PUSH
73060: EMPTY
73061: LIST
73062: LIST
73063: PUSH
73064: LD_INT 0
73066: PUSH
73067: LD_INT 1
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: PUSH
73074: LD_INT 1
73076: NEG
73077: PUSH
73078: LD_INT 0
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: PUSH
73085: LD_INT 1
73087: NEG
73088: PUSH
73089: LD_INT 1
73091: NEG
73092: PUSH
73093: EMPTY
73094: LIST
73095: LIST
73096: PUSH
73097: LD_INT 1
73099: NEG
73100: PUSH
73101: LD_INT 2
73103: NEG
73104: PUSH
73105: EMPTY
73106: LIST
73107: LIST
73108: PUSH
73109: LD_INT 0
73111: PUSH
73112: LD_INT 2
73114: NEG
73115: PUSH
73116: EMPTY
73117: LIST
73118: LIST
73119: PUSH
73120: LD_INT 1
73122: PUSH
73123: LD_INT 1
73125: NEG
73126: PUSH
73127: EMPTY
73128: LIST
73129: LIST
73130: PUSH
73131: LD_INT 2
73133: PUSH
73134: LD_INT 0
73136: PUSH
73137: EMPTY
73138: LIST
73139: LIST
73140: PUSH
73141: LD_INT 2
73143: PUSH
73144: LD_INT 1
73146: PUSH
73147: EMPTY
73148: LIST
73149: LIST
73150: PUSH
73151: LD_INT 2
73153: PUSH
73154: LD_INT 2
73156: PUSH
73157: EMPTY
73158: LIST
73159: LIST
73160: PUSH
73161: LD_INT 1
73163: PUSH
73164: LD_INT 2
73166: PUSH
73167: EMPTY
73168: LIST
73169: LIST
73170: PUSH
73171: LD_INT 0
73173: PUSH
73174: LD_INT 2
73176: PUSH
73177: EMPTY
73178: LIST
73179: LIST
73180: PUSH
73181: LD_INT 1
73183: NEG
73184: PUSH
73185: LD_INT 1
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: PUSH
73192: LD_INT 2
73194: NEG
73195: PUSH
73196: LD_INT 0
73198: PUSH
73199: EMPTY
73200: LIST
73201: LIST
73202: PUSH
73203: LD_INT 2
73205: NEG
73206: PUSH
73207: LD_INT 1
73209: NEG
73210: PUSH
73211: EMPTY
73212: LIST
73213: LIST
73214: PUSH
73215: LD_INT 2
73217: NEG
73218: PUSH
73219: LD_INT 2
73221: NEG
73222: PUSH
73223: EMPTY
73224: LIST
73225: LIST
73226: PUSH
73227: LD_INT 2
73229: NEG
73230: PUSH
73231: LD_INT 3
73233: NEG
73234: PUSH
73235: EMPTY
73236: LIST
73237: LIST
73238: PUSH
73239: LD_INT 1
73241: NEG
73242: PUSH
73243: LD_INT 3
73245: NEG
73246: PUSH
73247: EMPTY
73248: LIST
73249: LIST
73250: PUSH
73251: LD_INT 3
73253: NEG
73254: PUSH
73255: LD_INT 1
73257: NEG
73258: PUSH
73259: EMPTY
73260: LIST
73261: LIST
73262: PUSH
73263: LD_INT 3
73265: NEG
73266: PUSH
73267: LD_INT 2
73269: NEG
73270: PUSH
73271: EMPTY
73272: LIST
73273: LIST
73274: PUSH
73275: EMPTY
73276: LIST
73277: LIST
73278: LIST
73279: LIST
73280: LIST
73281: LIST
73282: LIST
73283: LIST
73284: LIST
73285: LIST
73286: LIST
73287: LIST
73288: LIST
73289: LIST
73290: LIST
73291: LIST
73292: LIST
73293: LIST
73294: LIST
73295: LIST
73296: LIST
73297: LIST
73298: LIST
73299: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
73300: LD_ADDR_VAR 0 29
73304: PUSH
73305: LD_INT 0
73307: PUSH
73308: LD_INT 0
73310: PUSH
73311: EMPTY
73312: LIST
73313: LIST
73314: PUSH
73315: LD_INT 0
73317: PUSH
73318: LD_INT 1
73320: NEG
73321: PUSH
73322: EMPTY
73323: LIST
73324: LIST
73325: PUSH
73326: LD_INT 1
73328: PUSH
73329: LD_INT 0
73331: PUSH
73332: EMPTY
73333: LIST
73334: LIST
73335: PUSH
73336: LD_INT 1
73338: PUSH
73339: LD_INT 1
73341: PUSH
73342: EMPTY
73343: LIST
73344: LIST
73345: PUSH
73346: LD_INT 0
73348: PUSH
73349: LD_INT 1
73351: PUSH
73352: EMPTY
73353: LIST
73354: LIST
73355: PUSH
73356: LD_INT 1
73358: NEG
73359: PUSH
73360: LD_INT 0
73362: PUSH
73363: EMPTY
73364: LIST
73365: LIST
73366: PUSH
73367: LD_INT 1
73369: NEG
73370: PUSH
73371: LD_INT 1
73373: NEG
73374: PUSH
73375: EMPTY
73376: LIST
73377: LIST
73378: PUSH
73379: LD_INT 1
73381: NEG
73382: PUSH
73383: LD_INT 2
73385: NEG
73386: PUSH
73387: EMPTY
73388: LIST
73389: LIST
73390: PUSH
73391: LD_INT 0
73393: PUSH
73394: LD_INT 2
73396: NEG
73397: PUSH
73398: EMPTY
73399: LIST
73400: LIST
73401: PUSH
73402: LD_INT 1
73404: PUSH
73405: LD_INT 1
73407: NEG
73408: PUSH
73409: EMPTY
73410: LIST
73411: LIST
73412: PUSH
73413: LD_INT 2
73415: PUSH
73416: LD_INT 0
73418: PUSH
73419: EMPTY
73420: LIST
73421: LIST
73422: PUSH
73423: LD_INT 2
73425: PUSH
73426: LD_INT 1
73428: PUSH
73429: EMPTY
73430: LIST
73431: LIST
73432: PUSH
73433: LD_INT 1
73435: PUSH
73436: LD_INT 2
73438: PUSH
73439: EMPTY
73440: LIST
73441: LIST
73442: PUSH
73443: LD_INT 0
73445: PUSH
73446: LD_INT 2
73448: PUSH
73449: EMPTY
73450: LIST
73451: LIST
73452: PUSH
73453: LD_INT 1
73455: NEG
73456: PUSH
73457: LD_INT 1
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: PUSH
73464: LD_INT 2
73466: NEG
73467: PUSH
73468: LD_INT 1
73470: NEG
73471: PUSH
73472: EMPTY
73473: LIST
73474: LIST
73475: PUSH
73476: LD_INT 2
73478: NEG
73479: PUSH
73480: LD_INT 2
73482: NEG
73483: PUSH
73484: EMPTY
73485: LIST
73486: LIST
73487: PUSH
73488: LD_INT 2
73490: NEG
73491: PUSH
73492: LD_INT 3
73494: NEG
73495: PUSH
73496: EMPTY
73497: LIST
73498: LIST
73499: PUSH
73500: LD_INT 2
73502: PUSH
73503: LD_INT 1
73505: NEG
73506: PUSH
73507: EMPTY
73508: LIST
73509: LIST
73510: PUSH
73511: LD_INT 3
73513: PUSH
73514: LD_INT 1
73516: PUSH
73517: EMPTY
73518: LIST
73519: LIST
73520: PUSH
73521: LD_INT 1
73523: PUSH
73524: LD_INT 3
73526: PUSH
73527: EMPTY
73528: LIST
73529: LIST
73530: PUSH
73531: LD_INT 1
73533: NEG
73534: PUSH
73535: LD_INT 2
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PUSH
73542: LD_INT 3
73544: NEG
73545: PUSH
73546: LD_INT 2
73548: NEG
73549: PUSH
73550: EMPTY
73551: LIST
73552: LIST
73553: PUSH
73554: EMPTY
73555: LIST
73556: LIST
73557: LIST
73558: LIST
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: LIST
73566: LIST
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: LIST
73573: LIST
73574: LIST
73575: LIST
73576: LIST
73577: LIST
73578: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
73579: LD_ADDR_VAR 0 30
73583: PUSH
73584: LD_INT 0
73586: PUSH
73587: LD_INT 0
73589: PUSH
73590: EMPTY
73591: LIST
73592: LIST
73593: PUSH
73594: LD_INT 0
73596: PUSH
73597: LD_INT 1
73599: NEG
73600: PUSH
73601: EMPTY
73602: LIST
73603: LIST
73604: PUSH
73605: LD_INT 1
73607: PUSH
73608: LD_INT 0
73610: PUSH
73611: EMPTY
73612: LIST
73613: LIST
73614: PUSH
73615: LD_INT 1
73617: PUSH
73618: LD_INT 1
73620: PUSH
73621: EMPTY
73622: LIST
73623: LIST
73624: PUSH
73625: LD_INT 0
73627: PUSH
73628: LD_INT 1
73630: PUSH
73631: EMPTY
73632: LIST
73633: LIST
73634: PUSH
73635: LD_INT 1
73637: NEG
73638: PUSH
73639: LD_INT 0
73641: PUSH
73642: EMPTY
73643: LIST
73644: LIST
73645: PUSH
73646: LD_INT 1
73648: NEG
73649: PUSH
73650: LD_INT 1
73652: NEG
73653: PUSH
73654: EMPTY
73655: LIST
73656: LIST
73657: PUSH
73658: LD_INT 1
73660: NEG
73661: PUSH
73662: LD_INT 2
73664: NEG
73665: PUSH
73666: EMPTY
73667: LIST
73668: LIST
73669: PUSH
73670: LD_INT 0
73672: PUSH
73673: LD_INT 2
73675: NEG
73676: PUSH
73677: EMPTY
73678: LIST
73679: LIST
73680: PUSH
73681: LD_INT 1
73683: PUSH
73684: LD_INT 1
73686: NEG
73687: PUSH
73688: EMPTY
73689: LIST
73690: LIST
73691: PUSH
73692: LD_INT 2
73694: PUSH
73695: LD_INT 0
73697: PUSH
73698: EMPTY
73699: LIST
73700: LIST
73701: PUSH
73702: LD_INT 2
73704: PUSH
73705: LD_INT 1
73707: PUSH
73708: EMPTY
73709: LIST
73710: LIST
73711: PUSH
73712: LD_INT 2
73714: PUSH
73715: LD_INT 2
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: PUSH
73722: LD_INT 1
73724: PUSH
73725: LD_INT 2
73727: PUSH
73728: EMPTY
73729: LIST
73730: LIST
73731: PUSH
73732: LD_INT 1
73734: NEG
73735: PUSH
73736: LD_INT 1
73738: PUSH
73739: EMPTY
73740: LIST
73741: LIST
73742: PUSH
73743: LD_INT 2
73745: NEG
73746: PUSH
73747: LD_INT 0
73749: PUSH
73750: EMPTY
73751: LIST
73752: LIST
73753: PUSH
73754: LD_INT 2
73756: NEG
73757: PUSH
73758: LD_INT 1
73760: NEG
73761: PUSH
73762: EMPTY
73763: LIST
73764: LIST
73765: PUSH
73766: LD_INT 1
73768: NEG
73769: PUSH
73770: LD_INT 3
73772: NEG
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: PUSH
73778: LD_INT 1
73780: PUSH
73781: LD_INT 2
73783: NEG
73784: PUSH
73785: EMPTY
73786: LIST
73787: LIST
73788: PUSH
73789: LD_INT 3
73791: PUSH
73792: LD_INT 2
73794: PUSH
73795: EMPTY
73796: LIST
73797: LIST
73798: PUSH
73799: LD_INT 2
73801: PUSH
73802: LD_INT 3
73804: PUSH
73805: EMPTY
73806: LIST
73807: LIST
73808: PUSH
73809: LD_INT 2
73811: NEG
73812: PUSH
73813: LD_INT 1
73815: PUSH
73816: EMPTY
73817: LIST
73818: LIST
73819: PUSH
73820: LD_INT 3
73822: NEG
73823: PUSH
73824: LD_INT 1
73826: NEG
73827: PUSH
73828: EMPTY
73829: LIST
73830: LIST
73831: PUSH
73832: EMPTY
73833: LIST
73834: LIST
73835: LIST
73836: LIST
73837: LIST
73838: LIST
73839: LIST
73840: LIST
73841: LIST
73842: LIST
73843: LIST
73844: LIST
73845: LIST
73846: LIST
73847: LIST
73848: LIST
73849: LIST
73850: LIST
73851: LIST
73852: LIST
73853: LIST
73854: LIST
73855: LIST
73856: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
73857: LD_ADDR_VAR 0 31
73861: PUSH
73862: LD_INT 0
73864: PUSH
73865: LD_INT 0
73867: PUSH
73868: EMPTY
73869: LIST
73870: LIST
73871: PUSH
73872: LD_INT 0
73874: PUSH
73875: LD_INT 1
73877: NEG
73878: PUSH
73879: EMPTY
73880: LIST
73881: LIST
73882: PUSH
73883: LD_INT 1
73885: PUSH
73886: LD_INT 0
73888: PUSH
73889: EMPTY
73890: LIST
73891: LIST
73892: PUSH
73893: LD_INT 1
73895: PUSH
73896: LD_INT 1
73898: PUSH
73899: EMPTY
73900: LIST
73901: LIST
73902: PUSH
73903: LD_INT 0
73905: PUSH
73906: LD_INT 1
73908: PUSH
73909: EMPTY
73910: LIST
73911: LIST
73912: PUSH
73913: LD_INT 1
73915: NEG
73916: PUSH
73917: LD_INT 0
73919: PUSH
73920: EMPTY
73921: LIST
73922: LIST
73923: PUSH
73924: LD_INT 1
73926: NEG
73927: PUSH
73928: LD_INT 1
73930: NEG
73931: PUSH
73932: EMPTY
73933: LIST
73934: LIST
73935: PUSH
73936: LD_INT 1
73938: NEG
73939: PUSH
73940: LD_INT 2
73942: NEG
73943: PUSH
73944: EMPTY
73945: LIST
73946: LIST
73947: PUSH
73948: LD_INT 1
73950: PUSH
73951: LD_INT 1
73953: NEG
73954: PUSH
73955: EMPTY
73956: LIST
73957: LIST
73958: PUSH
73959: LD_INT 2
73961: PUSH
73962: LD_INT 0
73964: PUSH
73965: EMPTY
73966: LIST
73967: LIST
73968: PUSH
73969: LD_INT 2
73971: PUSH
73972: LD_INT 1
73974: PUSH
73975: EMPTY
73976: LIST
73977: LIST
73978: PUSH
73979: LD_INT 2
73981: PUSH
73982: LD_INT 2
73984: PUSH
73985: EMPTY
73986: LIST
73987: LIST
73988: PUSH
73989: LD_INT 1
73991: PUSH
73992: LD_INT 2
73994: PUSH
73995: EMPTY
73996: LIST
73997: LIST
73998: PUSH
73999: LD_INT 0
74001: PUSH
74002: LD_INT 2
74004: PUSH
74005: EMPTY
74006: LIST
74007: LIST
74008: PUSH
74009: LD_INT 1
74011: NEG
74012: PUSH
74013: LD_INT 1
74015: PUSH
74016: EMPTY
74017: LIST
74018: LIST
74019: PUSH
74020: LD_INT 2
74022: NEG
74023: PUSH
74024: LD_INT 1
74026: NEG
74027: PUSH
74028: EMPTY
74029: LIST
74030: LIST
74031: PUSH
74032: LD_INT 2
74034: NEG
74035: PUSH
74036: LD_INT 2
74038: NEG
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: PUSH
74044: LD_INT 2
74046: NEG
74047: PUSH
74048: LD_INT 3
74050: NEG
74051: PUSH
74052: EMPTY
74053: LIST
74054: LIST
74055: PUSH
74056: LD_INT 2
74058: PUSH
74059: LD_INT 1
74061: NEG
74062: PUSH
74063: EMPTY
74064: LIST
74065: LIST
74066: PUSH
74067: LD_INT 3
74069: PUSH
74070: LD_INT 1
74072: PUSH
74073: EMPTY
74074: LIST
74075: LIST
74076: PUSH
74077: LD_INT 1
74079: PUSH
74080: LD_INT 3
74082: PUSH
74083: EMPTY
74084: LIST
74085: LIST
74086: PUSH
74087: LD_INT 1
74089: NEG
74090: PUSH
74091: LD_INT 2
74093: PUSH
74094: EMPTY
74095: LIST
74096: LIST
74097: PUSH
74098: LD_INT 3
74100: NEG
74101: PUSH
74102: LD_INT 2
74104: NEG
74105: PUSH
74106: EMPTY
74107: LIST
74108: LIST
74109: PUSH
74110: EMPTY
74111: LIST
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: LIST
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: LIST
74129: LIST
74130: LIST
74131: LIST
74132: LIST
74133: LIST
74134: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74135: LD_ADDR_VAR 0 32
74139: PUSH
74140: LD_INT 0
74142: PUSH
74143: LD_INT 0
74145: PUSH
74146: EMPTY
74147: LIST
74148: LIST
74149: PUSH
74150: LD_INT 0
74152: PUSH
74153: LD_INT 1
74155: NEG
74156: PUSH
74157: EMPTY
74158: LIST
74159: LIST
74160: PUSH
74161: LD_INT 1
74163: PUSH
74164: LD_INT 0
74166: PUSH
74167: EMPTY
74168: LIST
74169: LIST
74170: PUSH
74171: LD_INT 1
74173: PUSH
74174: LD_INT 1
74176: PUSH
74177: EMPTY
74178: LIST
74179: LIST
74180: PUSH
74181: LD_INT 0
74183: PUSH
74184: LD_INT 1
74186: PUSH
74187: EMPTY
74188: LIST
74189: LIST
74190: PUSH
74191: LD_INT 1
74193: NEG
74194: PUSH
74195: LD_INT 0
74197: PUSH
74198: EMPTY
74199: LIST
74200: LIST
74201: PUSH
74202: LD_INT 1
74204: NEG
74205: PUSH
74206: LD_INT 1
74208: NEG
74209: PUSH
74210: EMPTY
74211: LIST
74212: LIST
74213: PUSH
74214: LD_INT 1
74216: NEG
74217: PUSH
74218: LD_INT 2
74220: NEG
74221: PUSH
74222: EMPTY
74223: LIST
74224: LIST
74225: PUSH
74226: LD_INT 0
74228: PUSH
74229: LD_INT 2
74231: NEG
74232: PUSH
74233: EMPTY
74234: LIST
74235: LIST
74236: PUSH
74237: LD_INT 1
74239: PUSH
74240: LD_INT 1
74242: NEG
74243: PUSH
74244: EMPTY
74245: LIST
74246: LIST
74247: PUSH
74248: LD_INT 2
74250: PUSH
74251: LD_INT 1
74253: PUSH
74254: EMPTY
74255: LIST
74256: LIST
74257: PUSH
74258: LD_INT 2
74260: PUSH
74261: LD_INT 2
74263: PUSH
74264: EMPTY
74265: LIST
74266: LIST
74267: PUSH
74268: LD_INT 1
74270: PUSH
74271: LD_INT 2
74273: PUSH
74274: EMPTY
74275: LIST
74276: LIST
74277: PUSH
74278: LD_INT 0
74280: PUSH
74281: LD_INT 2
74283: PUSH
74284: EMPTY
74285: LIST
74286: LIST
74287: PUSH
74288: LD_INT 1
74290: NEG
74291: PUSH
74292: LD_INT 1
74294: PUSH
74295: EMPTY
74296: LIST
74297: LIST
74298: PUSH
74299: LD_INT 2
74301: NEG
74302: PUSH
74303: LD_INT 0
74305: PUSH
74306: EMPTY
74307: LIST
74308: LIST
74309: PUSH
74310: LD_INT 2
74312: NEG
74313: PUSH
74314: LD_INT 1
74316: NEG
74317: PUSH
74318: EMPTY
74319: LIST
74320: LIST
74321: PUSH
74322: LD_INT 1
74324: NEG
74325: PUSH
74326: LD_INT 3
74328: NEG
74329: PUSH
74330: EMPTY
74331: LIST
74332: LIST
74333: PUSH
74334: LD_INT 1
74336: PUSH
74337: LD_INT 2
74339: NEG
74340: PUSH
74341: EMPTY
74342: LIST
74343: LIST
74344: PUSH
74345: LD_INT 3
74347: PUSH
74348: LD_INT 2
74350: PUSH
74351: EMPTY
74352: LIST
74353: LIST
74354: PUSH
74355: LD_INT 2
74357: PUSH
74358: LD_INT 3
74360: PUSH
74361: EMPTY
74362: LIST
74363: LIST
74364: PUSH
74365: LD_INT 2
74367: NEG
74368: PUSH
74369: LD_INT 1
74371: PUSH
74372: EMPTY
74373: LIST
74374: LIST
74375: PUSH
74376: LD_INT 3
74378: NEG
74379: PUSH
74380: LD_INT 1
74382: NEG
74383: PUSH
74384: EMPTY
74385: LIST
74386: LIST
74387: PUSH
74388: EMPTY
74389: LIST
74390: LIST
74391: LIST
74392: LIST
74393: LIST
74394: LIST
74395: LIST
74396: LIST
74397: LIST
74398: LIST
74399: LIST
74400: LIST
74401: LIST
74402: LIST
74403: LIST
74404: LIST
74405: LIST
74406: LIST
74407: LIST
74408: LIST
74409: LIST
74410: LIST
74411: LIST
74412: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
74413: LD_ADDR_VAR 0 33
74417: PUSH
74418: LD_INT 0
74420: PUSH
74421: LD_INT 0
74423: PUSH
74424: EMPTY
74425: LIST
74426: LIST
74427: PUSH
74428: LD_INT 0
74430: PUSH
74431: LD_INT 1
74433: NEG
74434: PUSH
74435: EMPTY
74436: LIST
74437: LIST
74438: PUSH
74439: LD_INT 1
74441: PUSH
74442: LD_INT 0
74444: PUSH
74445: EMPTY
74446: LIST
74447: LIST
74448: PUSH
74449: LD_INT 1
74451: PUSH
74452: LD_INT 1
74454: PUSH
74455: EMPTY
74456: LIST
74457: LIST
74458: PUSH
74459: LD_INT 0
74461: PUSH
74462: LD_INT 1
74464: PUSH
74465: EMPTY
74466: LIST
74467: LIST
74468: PUSH
74469: LD_INT 1
74471: NEG
74472: PUSH
74473: LD_INT 0
74475: PUSH
74476: EMPTY
74477: LIST
74478: LIST
74479: PUSH
74480: LD_INT 1
74482: NEG
74483: PUSH
74484: LD_INT 1
74486: NEG
74487: PUSH
74488: EMPTY
74489: LIST
74490: LIST
74491: PUSH
74492: LD_INT 1
74494: NEG
74495: PUSH
74496: LD_INT 2
74498: NEG
74499: PUSH
74500: EMPTY
74501: LIST
74502: LIST
74503: PUSH
74504: LD_INT 1
74506: PUSH
74507: LD_INT 1
74509: NEG
74510: PUSH
74511: EMPTY
74512: LIST
74513: LIST
74514: PUSH
74515: LD_INT 2
74517: PUSH
74518: LD_INT 0
74520: PUSH
74521: EMPTY
74522: LIST
74523: LIST
74524: PUSH
74525: LD_INT 2
74527: PUSH
74528: LD_INT 1
74530: PUSH
74531: EMPTY
74532: LIST
74533: LIST
74534: PUSH
74535: LD_INT 1
74537: PUSH
74538: LD_INT 2
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: PUSH
74545: LD_INT 0
74547: PUSH
74548: LD_INT 2
74550: PUSH
74551: EMPTY
74552: LIST
74553: LIST
74554: PUSH
74555: LD_INT 1
74557: NEG
74558: PUSH
74559: LD_INT 1
74561: PUSH
74562: EMPTY
74563: LIST
74564: LIST
74565: PUSH
74566: LD_INT 2
74568: NEG
74569: PUSH
74570: LD_INT 0
74572: PUSH
74573: EMPTY
74574: LIST
74575: LIST
74576: PUSH
74577: LD_INT 2
74579: NEG
74580: PUSH
74581: LD_INT 1
74583: NEG
74584: PUSH
74585: EMPTY
74586: LIST
74587: LIST
74588: PUSH
74589: LD_INT 2
74591: NEG
74592: PUSH
74593: LD_INT 2
74595: NEG
74596: PUSH
74597: EMPTY
74598: LIST
74599: LIST
74600: PUSH
74601: LD_INT 2
74603: NEG
74604: PUSH
74605: LD_INT 3
74607: NEG
74608: PUSH
74609: EMPTY
74610: LIST
74611: LIST
74612: PUSH
74613: LD_INT 2
74615: PUSH
74616: LD_INT 1
74618: NEG
74619: PUSH
74620: EMPTY
74621: LIST
74622: LIST
74623: PUSH
74624: LD_INT 3
74626: PUSH
74627: LD_INT 1
74629: PUSH
74630: EMPTY
74631: LIST
74632: LIST
74633: PUSH
74634: LD_INT 1
74636: PUSH
74637: LD_INT 3
74639: PUSH
74640: EMPTY
74641: LIST
74642: LIST
74643: PUSH
74644: LD_INT 1
74646: NEG
74647: PUSH
74648: LD_INT 2
74650: PUSH
74651: EMPTY
74652: LIST
74653: LIST
74654: PUSH
74655: LD_INT 3
74657: NEG
74658: PUSH
74659: LD_INT 2
74661: NEG
74662: PUSH
74663: EMPTY
74664: LIST
74665: LIST
74666: PUSH
74667: EMPTY
74668: LIST
74669: LIST
74670: LIST
74671: LIST
74672: LIST
74673: LIST
74674: LIST
74675: LIST
74676: LIST
74677: LIST
74678: LIST
74679: LIST
74680: LIST
74681: LIST
74682: LIST
74683: LIST
74684: LIST
74685: LIST
74686: LIST
74687: LIST
74688: LIST
74689: LIST
74690: LIST
74691: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74692: LD_ADDR_VAR 0 34
74696: PUSH
74697: LD_INT 0
74699: PUSH
74700: LD_INT 0
74702: PUSH
74703: EMPTY
74704: LIST
74705: LIST
74706: PUSH
74707: LD_INT 0
74709: PUSH
74710: LD_INT 1
74712: NEG
74713: PUSH
74714: EMPTY
74715: LIST
74716: LIST
74717: PUSH
74718: LD_INT 1
74720: PUSH
74721: LD_INT 0
74723: PUSH
74724: EMPTY
74725: LIST
74726: LIST
74727: PUSH
74728: LD_INT 1
74730: PUSH
74731: LD_INT 1
74733: PUSH
74734: EMPTY
74735: LIST
74736: LIST
74737: PUSH
74738: LD_INT 0
74740: PUSH
74741: LD_INT 1
74743: PUSH
74744: EMPTY
74745: LIST
74746: LIST
74747: PUSH
74748: LD_INT 1
74750: NEG
74751: PUSH
74752: LD_INT 0
74754: PUSH
74755: EMPTY
74756: LIST
74757: LIST
74758: PUSH
74759: LD_INT 1
74761: NEG
74762: PUSH
74763: LD_INT 1
74765: NEG
74766: PUSH
74767: EMPTY
74768: LIST
74769: LIST
74770: PUSH
74771: LD_INT 1
74773: NEG
74774: PUSH
74775: LD_INT 2
74777: NEG
74778: PUSH
74779: EMPTY
74780: LIST
74781: LIST
74782: PUSH
74783: LD_INT 0
74785: PUSH
74786: LD_INT 2
74788: NEG
74789: PUSH
74790: EMPTY
74791: LIST
74792: LIST
74793: PUSH
74794: LD_INT 1
74796: PUSH
74797: LD_INT 1
74799: NEG
74800: PUSH
74801: EMPTY
74802: LIST
74803: LIST
74804: PUSH
74805: LD_INT 2
74807: PUSH
74808: LD_INT 1
74810: PUSH
74811: EMPTY
74812: LIST
74813: LIST
74814: PUSH
74815: LD_INT 2
74817: PUSH
74818: LD_INT 2
74820: PUSH
74821: EMPTY
74822: LIST
74823: LIST
74824: PUSH
74825: LD_INT 1
74827: PUSH
74828: LD_INT 2
74830: PUSH
74831: EMPTY
74832: LIST
74833: LIST
74834: PUSH
74835: LD_INT 1
74837: NEG
74838: PUSH
74839: LD_INT 1
74841: PUSH
74842: EMPTY
74843: LIST
74844: LIST
74845: PUSH
74846: LD_INT 2
74848: NEG
74849: PUSH
74850: LD_INT 0
74852: PUSH
74853: EMPTY
74854: LIST
74855: LIST
74856: PUSH
74857: LD_INT 2
74859: NEG
74860: PUSH
74861: LD_INT 1
74863: NEG
74864: PUSH
74865: EMPTY
74866: LIST
74867: LIST
74868: PUSH
74869: LD_INT 2
74871: NEG
74872: PUSH
74873: LD_INT 2
74875: NEG
74876: PUSH
74877: EMPTY
74878: LIST
74879: LIST
74880: PUSH
74881: LD_INT 1
74883: NEG
74884: PUSH
74885: LD_INT 3
74887: NEG
74888: PUSH
74889: EMPTY
74890: LIST
74891: LIST
74892: PUSH
74893: LD_INT 1
74895: PUSH
74896: LD_INT 2
74898: NEG
74899: PUSH
74900: EMPTY
74901: LIST
74902: LIST
74903: PUSH
74904: LD_INT 3
74906: PUSH
74907: LD_INT 2
74909: PUSH
74910: EMPTY
74911: LIST
74912: LIST
74913: PUSH
74914: LD_INT 2
74916: PUSH
74917: LD_INT 3
74919: PUSH
74920: EMPTY
74921: LIST
74922: LIST
74923: PUSH
74924: LD_INT 2
74926: NEG
74927: PUSH
74928: LD_INT 1
74930: PUSH
74931: EMPTY
74932: LIST
74933: LIST
74934: PUSH
74935: LD_INT 3
74937: NEG
74938: PUSH
74939: LD_INT 1
74941: NEG
74942: PUSH
74943: EMPTY
74944: LIST
74945: LIST
74946: PUSH
74947: EMPTY
74948: LIST
74949: LIST
74950: LIST
74951: LIST
74952: LIST
74953: LIST
74954: LIST
74955: LIST
74956: LIST
74957: LIST
74958: LIST
74959: LIST
74960: LIST
74961: LIST
74962: LIST
74963: LIST
74964: LIST
74965: LIST
74966: LIST
74967: LIST
74968: LIST
74969: LIST
74970: LIST
74971: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
74972: LD_ADDR_VAR 0 35
74976: PUSH
74977: LD_INT 0
74979: PUSH
74980: LD_INT 0
74982: PUSH
74983: EMPTY
74984: LIST
74985: LIST
74986: PUSH
74987: LD_INT 0
74989: PUSH
74990: LD_INT 1
74992: NEG
74993: PUSH
74994: EMPTY
74995: LIST
74996: LIST
74997: PUSH
74998: LD_INT 1
75000: PUSH
75001: LD_INT 0
75003: PUSH
75004: EMPTY
75005: LIST
75006: LIST
75007: PUSH
75008: LD_INT 1
75010: PUSH
75011: LD_INT 1
75013: PUSH
75014: EMPTY
75015: LIST
75016: LIST
75017: PUSH
75018: LD_INT 0
75020: PUSH
75021: LD_INT 1
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: PUSH
75028: LD_INT 1
75030: NEG
75031: PUSH
75032: LD_INT 0
75034: PUSH
75035: EMPTY
75036: LIST
75037: LIST
75038: PUSH
75039: LD_INT 1
75041: NEG
75042: PUSH
75043: LD_INT 1
75045: NEG
75046: PUSH
75047: EMPTY
75048: LIST
75049: LIST
75050: PUSH
75051: LD_INT 2
75053: PUSH
75054: LD_INT 1
75056: PUSH
75057: EMPTY
75058: LIST
75059: LIST
75060: PUSH
75061: LD_INT 2
75063: NEG
75064: PUSH
75065: LD_INT 1
75067: NEG
75068: PUSH
75069: EMPTY
75070: LIST
75071: LIST
75072: PUSH
75073: EMPTY
75074: LIST
75075: LIST
75076: LIST
75077: LIST
75078: LIST
75079: LIST
75080: LIST
75081: LIST
75082: LIST
75083: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
75084: LD_ADDR_VAR 0 36
75088: PUSH
75089: LD_INT 0
75091: PUSH
75092: LD_INT 0
75094: PUSH
75095: EMPTY
75096: LIST
75097: LIST
75098: PUSH
75099: LD_INT 0
75101: PUSH
75102: LD_INT 1
75104: NEG
75105: PUSH
75106: EMPTY
75107: LIST
75108: LIST
75109: PUSH
75110: LD_INT 1
75112: PUSH
75113: LD_INT 0
75115: PUSH
75116: EMPTY
75117: LIST
75118: LIST
75119: PUSH
75120: LD_INT 1
75122: PUSH
75123: LD_INT 1
75125: PUSH
75126: EMPTY
75127: LIST
75128: LIST
75129: PUSH
75130: LD_INT 0
75132: PUSH
75133: LD_INT 1
75135: PUSH
75136: EMPTY
75137: LIST
75138: LIST
75139: PUSH
75140: LD_INT 1
75142: NEG
75143: PUSH
75144: LD_INT 0
75146: PUSH
75147: EMPTY
75148: LIST
75149: LIST
75150: PUSH
75151: LD_INT 1
75153: NEG
75154: PUSH
75155: LD_INT 1
75157: NEG
75158: PUSH
75159: EMPTY
75160: LIST
75161: LIST
75162: PUSH
75163: LD_INT 1
75165: NEG
75166: PUSH
75167: LD_INT 2
75169: NEG
75170: PUSH
75171: EMPTY
75172: LIST
75173: LIST
75174: PUSH
75175: LD_INT 1
75177: PUSH
75178: LD_INT 2
75180: PUSH
75181: EMPTY
75182: LIST
75183: LIST
75184: PUSH
75185: EMPTY
75186: LIST
75187: LIST
75188: LIST
75189: LIST
75190: LIST
75191: LIST
75192: LIST
75193: LIST
75194: LIST
75195: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
75196: LD_ADDR_VAR 0 37
75200: PUSH
75201: LD_INT 0
75203: PUSH
75204: LD_INT 0
75206: PUSH
75207: EMPTY
75208: LIST
75209: LIST
75210: PUSH
75211: LD_INT 0
75213: PUSH
75214: LD_INT 1
75216: NEG
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: PUSH
75222: LD_INT 1
75224: PUSH
75225: LD_INT 0
75227: PUSH
75228: EMPTY
75229: LIST
75230: LIST
75231: PUSH
75232: LD_INT 1
75234: PUSH
75235: LD_INT 1
75237: PUSH
75238: EMPTY
75239: LIST
75240: LIST
75241: PUSH
75242: LD_INT 0
75244: PUSH
75245: LD_INT 1
75247: PUSH
75248: EMPTY
75249: LIST
75250: LIST
75251: PUSH
75252: LD_INT 1
75254: NEG
75255: PUSH
75256: LD_INT 0
75258: PUSH
75259: EMPTY
75260: LIST
75261: LIST
75262: PUSH
75263: LD_INT 1
75265: NEG
75266: PUSH
75267: LD_INT 1
75269: NEG
75270: PUSH
75271: EMPTY
75272: LIST
75273: LIST
75274: PUSH
75275: LD_INT 1
75277: PUSH
75278: LD_INT 1
75280: NEG
75281: PUSH
75282: EMPTY
75283: LIST
75284: LIST
75285: PUSH
75286: LD_INT 1
75288: NEG
75289: PUSH
75290: LD_INT 1
75292: PUSH
75293: EMPTY
75294: LIST
75295: LIST
75296: PUSH
75297: EMPTY
75298: LIST
75299: LIST
75300: LIST
75301: LIST
75302: LIST
75303: LIST
75304: LIST
75305: LIST
75306: LIST
75307: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
75308: LD_ADDR_VAR 0 38
75312: PUSH
75313: LD_INT 0
75315: PUSH
75316: LD_INT 0
75318: PUSH
75319: EMPTY
75320: LIST
75321: LIST
75322: PUSH
75323: LD_INT 0
75325: PUSH
75326: LD_INT 1
75328: NEG
75329: PUSH
75330: EMPTY
75331: LIST
75332: LIST
75333: PUSH
75334: LD_INT 1
75336: PUSH
75337: LD_INT 0
75339: PUSH
75340: EMPTY
75341: LIST
75342: LIST
75343: PUSH
75344: LD_INT 1
75346: PUSH
75347: LD_INT 1
75349: PUSH
75350: EMPTY
75351: LIST
75352: LIST
75353: PUSH
75354: LD_INT 0
75356: PUSH
75357: LD_INT 1
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: PUSH
75364: LD_INT 1
75366: NEG
75367: PUSH
75368: LD_INT 0
75370: PUSH
75371: EMPTY
75372: LIST
75373: LIST
75374: PUSH
75375: LD_INT 1
75377: NEG
75378: PUSH
75379: LD_INT 1
75381: NEG
75382: PUSH
75383: EMPTY
75384: LIST
75385: LIST
75386: PUSH
75387: LD_INT 2
75389: PUSH
75390: LD_INT 1
75392: PUSH
75393: EMPTY
75394: LIST
75395: LIST
75396: PUSH
75397: LD_INT 2
75399: NEG
75400: PUSH
75401: LD_INT 1
75403: NEG
75404: PUSH
75405: EMPTY
75406: LIST
75407: LIST
75408: PUSH
75409: EMPTY
75410: LIST
75411: LIST
75412: LIST
75413: LIST
75414: LIST
75415: LIST
75416: LIST
75417: LIST
75418: LIST
75419: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
75420: LD_ADDR_VAR 0 39
75424: PUSH
75425: LD_INT 0
75427: PUSH
75428: LD_INT 0
75430: PUSH
75431: EMPTY
75432: LIST
75433: LIST
75434: PUSH
75435: LD_INT 0
75437: PUSH
75438: LD_INT 1
75440: NEG
75441: PUSH
75442: EMPTY
75443: LIST
75444: LIST
75445: PUSH
75446: LD_INT 1
75448: PUSH
75449: LD_INT 0
75451: PUSH
75452: EMPTY
75453: LIST
75454: LIST
75455: PUSH
75456: LD_INT 1
75458: PUSH
75459: LD_INT 1
75461: PUSH
75462: EMPTY
75463: LIST
75464: LIST
75465: PUSH
75466: LD_INT 0
75468: PUSH
75469: LD_INT 1
75471: PUSH
75472: EMPTY
75473: LIST
75474: LIST
75475: PUSH
75476: LD_INT 1
75478: NEG
75479: PUSH
75480: LD_INT 0
75482: PUSH
75483: EMPTY
75484: LIST
75485: LIST
75486: PUSH
75487: LD_INT 1
75489: NEG
75490: PUSH
75491: LD_INT 1
75493: NEG
75494: PUSH
75495: EMPTY
75496: LIST
75497: LIST
75498: PUSH
75499: LD_INT 1
75501: NEG
75502: PUSH
75503: LD_INT 2
75505: NEG
75506: PUSH
75507: EMPTY
75508: LIST
75509: LIST
75510: PUSH
75511: LD_INT 1
75513: PUSH
75514: LD_INT 2
75516: PUSH
75517: EMPTY
75518: LIST
75519: LIST
75520: PUSH
75521: EMPTY
75522: LIST
75523: LIST
75524: LIST
75525: LIST
75526: LIST
75527: LIST
75528: LIST
75529: LIST
75530: LIST
75531: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
75532: LD_ADDR_VAR 0 40
75536: PUSH
75537: LD_INT 0
75539: PUSH
75540: LD_INT 0
75542: PUSH
75543: EMPTY
75544: LIST
75545: LIST
75546: PUSH
75547: LD_INT 0
75549: PUSH
75550: LD_INT 1
75552: NEG
75553: PUSH
75554: EMPTY
75555: LIST
75556: LIST
75557: PUSH
75558: LD_INT 1
75560: PUSH
75561: LD_INT 0
75563: PUSH
75564: EMPTY
75565: LIST
75566: LIST
75567: PUSH
75568: LD_INT 1
75570: PUSH
75571: LD_INT 1
75573: PUSH
75574: EMPTY
75575: LIST
75576: LIST
75577: PUSH
75578: LD_INT 0
75580: PUSH
75581: LD_INT 1
75583: PUSH
75584: EMPTY
75585: LIST
75586: LIST
75587: PUSH
75588: LD_INT 1
75590: NEG
75591: PUSH
75592: LD_INT 0
75594: PUSH
75595: EMPTY
75596: LIST
75597: LIST
75598: PUSH
75599: LD_INT 1
75601: NEG
75602: PUSH
75603: LD_INT 1
75605: NEG
75606: PUSH
75607: EMPTY
75608: LIST
75609: LIST
75610: PUSH
75611: LD_INT 1
75613: PUSH
75614: LD_INT 1
75616: NEG
75617: PUSH
75618: EMPTY
75619: LIST
75620: LIST
75621: PUSH
75622: LD_INT 1
75624: NEG
75625: PUSH
75626: LD_INT 1
75628: PUSH
75629: EMPTY
75630: LIST
75631: LIST
75632: PUSH
75633: EMPTY
75634: LIST
75635: LIST
75636: LIST
75637: LIST
75638: LIST
75639: LIST
75640: LIST
75641: LIST
75642: LIST
75643: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75644: LD_ADDR_VAR 0 41
75648: PUSH
75649: LD_INT 0
75651: PUSH
75652: LD_INT 0
75654: PUSH
75655: EMPTY
75656: LIST
75657: LIST
75658: PUSH
75659: LD_INT 0
75661: PUSH
75662: LD_INT 1
75664: NEG
75665: PUSH
75666: EMPTY
75667: LIST
75668: LIST
75669: PUSH
75670: LD_INT 1
75672: PUSH
75673: LD_INT 0
75675: PUSH
75676: EMPTY
75677: LIST
75678: LIST
75679: PUSH
75680: LD_INT 1
75682: PUSH
75683: LD_INT 1
75685: PUSH
75686: EMPTY
75687: LIST
75688: LIST
75689: PUSH
75690: LD_INT 0
75692: PUSH
75693: LD_INT 1
75695: PUSH
75696: EMPTY
75697: LIST
75698: LIST
75699: PUSH
75700: LD_INT 1
75702: NEG
75703: PUSH
75704: LD_INT 0
75706: PUSH
75707: EMPTY
75708: LIST
75709: LIST
75710: PUSH
75711: LD_INT 1
75713: NEG
75714: PUSH
75715: LD_INT 1
75717: NEG
75718: PUSH
75719: EMPTY
75720: LIST
75721: LIST
75722: PUSH
75723: LD_INT 1
75725: NEG
75726: PUSH
75727: LD_INT 2
75729: NEG
75730: PUSH
75731: EMPTY
75732: LIST
75733: LIST
75734: PUSH
75735: LD_INT 1
75737: PUSH
75738: LD_INT 1
75740: NEG
75741: PUSH
75742: EMPTY
75743: LIST
75744: LIST
75745: PUSH
75746: LD_INT 2
75748: PUSH
75749: LD_INT 0
75751: PUSH
75752: EMPTY
75753: LIST
75754: LIST
75755: PUSH
75756: LD_INT 2
75758: PUSH
75759: LD_INT 1
75761: PUSH
75762: EMPTY
75763: LIST
75764: LIST
75765: PUSH
75766: LD_INT 2
75768: PUSH
75769: LD_INT 2
75771: PUSH
75772: EMPTY
75773: LIST
75774: LIST
75775: PUSH
75776: LD_INT 1
75778: PUSH
75779: LD_INT 2
75781: PUSH
75782: EMPTY
75783: LIST
75784: LIST
75785: PUSH
75786: LD_INT 1
75788: NEG
75789: PUSH
75790: LD_INT 1
75792: PUSH
75793: EMPTY
75794: LIST
75795: LIST
75796: PUSH
75797: LD_INT 2
75799: NEG
75800: PUSH
75801: LD_INT 0
75803: PUSH
75804: EMPTY
75805: LIST
75806: LIST
75807: PUSH
75808: LD_INT 2
75810: NEG
75811: PUSH
75812: LD_INT 1
75814: NEG
75815: PUSH
75816: EMPTY
75817: LIST
75818: LIST
75819: PUSH
75820: LD_INT 2
75822: NEG
75823: PUSH
75824: LD_INT 2
75826: NEG
75827: PUSH
75828: EMPTY
75829: LIST
75830: LIST
75831: PUSH
75832: LD_INT 2
75834: NEG
75835: PUSH
75836: LD_INT 3
75838: NEG
75839: PUSH
75840: EMPTY
75841: LIST
75842: LIST
75843: PUSH
75844: LD_INT 2
75846: PUSH
75847: LD_INT 1
75849: NEG
75850: PUSH
75851: EMPTY
75852: LIST
75853: LIST
75854: PUSH
75855: LD_INT 3
75857: PUSH
75858: LD_INT 0
75860: PUSH
75861: EMPTY
75862: LIST
75863: LIST
75864: PUSH
75865: LD_INT 3
75867: PUSH
75868: LD_INT 1
75870: PUSH
75871: EMPTY
75872: LIST
75873: LIST
75874: PUSH
75875: LD_INT 3
75877: PUSH
75878: LD_INT 2
75880: PUSH
75881: EMPTY
75882: LIST
75883: LIST
75884: PUSH
75885: LD_INT 3
75887: PUSH
75888: LD_INT 3
75890: PUSH
75891: EMPTY
75892: LIST
75893: LIST
75894: PUSH
75895: LD_INT 2
75897: PUSH
75898: LD_INT 3
75900: PUSH
75901: EMPTY
75902: LIST
75903: LIST
75904: PUSH
75905: LD_INT 2
75907: NEG
75908: PUSH
75909: LD_INT 1
75911: PUSH
75912: EMPTY
75913: LIST
75914: LIST
75915: PUSH
75916: LD_INT 3
75918: NEG
75919: PUSH
75920: LD_INT 0
75922: PUSH
75923: EMPTY
75924: LIST
75925: LIST
75926: PUSH
75927: LD_INT 3
75929: NEG
75930: PUSH
75931: LD_INT 1
75933: NEG
75934: PUSH
75935: EMPTY
75936: LIST
75937: LIST
75938: PUSH
75939: LD_INT 3
75941: NEG
75942: PUSH
75943: LD_INT 2
75945: NEG
75946: PUSH
75947: EMPTY
75948: LIST
75949: LIST
75950: PUSH
75951: LD_INT 3
75953: NEG
75954: PUSH
75955: LD_INT 3
75957: NEG
75958: PUSH
75959: EMPTY
75960: LIST
75961: LIST
75962: PUSH
75963: EMPTY
75964: LIST
75965: LIST
75966: LIST
75967: LIST
75968: LIST
75969: LIST
75970: LIST
75971: LIST
75972: LIST
75973: LIST
75974: LIST
75975: LIST
75976: LIST
75977: LIST
75978: LIST
75979: LIST
75980: LIST
75981: LIST
75982: LIST
75983: LIST
75984: LIST
75985: LIST
75986: LIST
75987: LIST
75988: LIST
75989: LIST
75990: LIST
75991: LIST
75992: LIST
75993: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75994: LD_ADDR_VAR 0 42
75998: PUSH
75999: LD_INT 0
76001: PUSH
76002: LD_INT 0
76004: PUSH
76005: EMPTY
76006: LIST
76007: LIST
76008: PUSH
76009: LD_INT 0
76011: PUSH
76012: LD_INT 1
76014: NEG
76015: PUSH
76016: EMPTY
76017: LIST
76018: LIST
76019: PUSH
76020: LD_INT 1
76022: PUSH
76023: LD_INT 0
76025: PUSH
76026: EMPTY
76027: LIST
76028: LIST
76029: PUSH
76030: LD_INT 1
76032: PUSH
76033: LD_INT 1
76035: PUSH
76036: EMPTY
76037: LIST
76038: LIST
76039: PUSH
76040: LD_INT 0
76042: PUSH
76043: LD_INT 1
76045: PUSH
76046: EMPTY
76047: LIST
76048: LIST
76049: PUSH
76050: LD_INT 1
76052: NEG
76053: PUSH
76054: LD_INT 0
76056: PUSH
76057: EMPTY
76058: LIST
76059: LIST
76060: PUSH
76061: LD_INT 1
76063: NEG
76064: PUSH
76065: LD_INT 1
76067: NEG
76068: PUSH
76069: EMPTY
76070: LIST
76071: LIST
76072: PUSH
76073: LD_INT 1
76075: NEG
76076: PUSH
76077: LD_INT 2
76079: NEG
76080: PUSH
76081: EMPTY
76082: LIST
76083: LIST
76084: PUSH
76085: LD_INT 0
76087: PUSH
76088: LD_INT 2
76090: NEG
76091: PUSH
76092: EMPTY
76093: LIST
76094: LIST
76095: PUSH
76096: LD_INT 1
76098: PUSH
76099: LD_INT 1
76101: NEG
76102: PUSH
76103: EMPTY
76104: LIST
76105: LIST
76106: PUSH
76107: LD_INT 2
76109: PUSH
76110: LD_INT 1
76112: PUSH
76113: EMPTY
76114: LIST
76115: LIST
76116: PUSH
76117: LD_INT 2
76119: PUSH
76120: LD_INT 2
76122: PUSH
76123: EMPTY
76124: LIST
76125: LIST
76126: PUSH
76127: LD_INT 1
76129: PUSH
76130: LD_INT 2
76132: PUSH
76133: EMPTY
76134: LIST
76135: LIST
76136: PUSH
76137: LD_INT 0
76139: PUSH
76140: LD_INT 2
76142: PUSH
76143: EMPTY
76144: LIST
76145: LIST
76146: PUSH
76147: LD_INT 1
76149: NEG
76150: PUSH
76151: LD_INT 1
76153: PUSH
76154: EMPTY
76155: LIST
76156: LIST
76157: PUSH
76158: LD_INT 2
76160: NEG
76161: PUSH
76162: LD_INT 1
76164: NEG
76165: PUSH
76166: EMPTY
76167: LIST
76168: LIST
76169: PUSH
76170: LD_INT 2
76172: NEG
76173: PUSH
76174: LD_INT 2
76176: NEG
76177: PUSH
76178: EMPTY
76179: LIST
76180: LIST
76181: PUSH
76182: LD_INT 2
76184: NEG
76185: PUSH
76186: LD_INT 3
76188: NEG
76189: PUSH
76190: EMPTY
76191: LIST
76192: LIST
76193: PUSH
76194: LD_INT 1
76196: NEG
76197: PUSH
76198: LD_INT 3
76200: NEG
76201: PUSH
76202: EMPTY
76203: LIST
76204: LIST
76205: PUSH
76206: LD_INT 0
76208: PUSH
76209: LD_INT 3
76211: NEG
76212: PUSH
76213: EMPTY
76214: LIST
76215: LIST
76216: PUSH
76217: LD_INT 1
76219: PUSH
76220: LD_INT 2
76222: NEG
76223: PUSH
76224: EMPTY
76225: LIST
76226: LIST
76227: PUSH
76228: LD_INT 3
76230: PUSH
76231: LD_INT 2
76233: PUSH
76234: EMPTY
76235: LIST
76236: LIST
76237: PUSH
76238: LD_INT 3
76240: PUSH
76241: LD_INT 3
76243: PUSH
76244: EMPTY
76245: LIST
76246: LIST
76247: PUSH
76248: LD_INT 2
76250: PUSH
76251: LD_INT 3
76253: PUSH
76254: EMPTY
76255: LIST
76256: LIST
76257: PUSH
76258: LD_INT 1
76260: PUSH
76261: LD_INT 3
76263: PUSH
76264: EMPTY
76265: LIST
76266: LIST
76267: PUSH
76268: LD_INT 0
76270: PUSH
76271: LD_INT 3
76273: PUSH
76274: EMPTY
76275: LIST
76276: LIST
76277: PUSH
76278: LD_INT 1
76280: NEG
76281: PUSH
76282: LD_INT 2
76284: PUSH
76285: EMPTY
76286: LIST
76287: LIST
76288: PUSH
76289: LD_INT 3
76291: NEG
76292: PUSH
76293: LD_INT 2
76295: NEG
76296: PUSH
76297: EMPTY
76298: LIST
76299: LIST
76300: PUSH
76301: LD_INT 3
76303: NEG
76304: PUSH
76305: LD_INT 3
76307: NEG
76308: PUSH
76309: EMPTY
76310: LIST
76311: LIST
76312: PUSH
76313: EMPTY
76314: LIST
76315: LIST
76316: LIST
76317: LIST
76318: LIST
76319: LIST
76320: LIST
76321: LIST
76322: LIST
76323: LIST
76324: LIST
76325: LIST
76326: LIST
76327: LIST
76328: LIST
76329: LIST
76330: LIST
76331: LIST
76332: LIST
76333: LIST
76334: LIST
76335: LIST
76336: LIST
76337: LIST
76338: LIST
76339: LIST
76340: LIST
76341: LIST
76342: LIST
76343: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76344: LD_ADDR_VAR 0 43
76348: PUSH
76349: LD_INT 0
76351: PUSH
76352: LD_INT 0
76354: PUSH
76355: EMPTY
76356: LIST
76357: LIST
76358: PUSH
76359: LD_INT 0
76361: PUSH
76362: LD_INT 1
76364: NEG
76365: PUSH
76366: EMPTY
76367: LIST
76368: LIST
76369: PUSH
76370: LD_INT 1
76372: PUSH
76373: LD_INT 0
76375: PUSH
76376: EMPTY
76377: LIST
76378: LIST
76379: PUSH
76380: LD_INT 1
76382: PUSH
76383: LD_INT 1
76385: PUSH
76386: EMPTY
76387: LIST
76388: LIST
76389: PUSH
76390: LD_INT 0
76392: PUSH
76393: LD_INT 1
76395: PUSH
76396: EMPTY
76397: LIST
76398: LIST
76399: PUSH
76400: LD_INT 1
76402: NEG
76403: PUSH
76404: LD_INT 0
76406: PUSH
76407: EMPTY
76408: LIST
76409: LIST
76410: PUSH
76411: LD_INT 1
76413: NEG
76414: PUSH
76415: LD_INT 1
76417: NEG
76418: PUSH
76419: EMPTY
76420: LIST
76421: LIST
76422: PUSH
76423: LD_INT 1
76425: NEG
76426: PUSH
76427: LD_INT 2
76429: NEG
76430: PUSH
76431: EMPTY
76432: LIST
76433: LIST
76434: PUSH
76435: LD_INT 0
76437: PUSH
76438: LD_INT 2
76440: NEG
76441: PUSH
76442: EMPTY
76443: LIST
76444: LIST
76445: PUSH
76446: LD_INT 1
76448: PUSH
76449: LD_INT 1
76451: NEG
76452: PUSH
76453: EMPTY
76454: LIST
76455: LIST
76456: PUSH
76457: LD_INT 2
76459: PUSH
76460: LD_INT 0
76462: PUSH
76463: EMPTY
76464: LIST
76465: LIST
76466: PUSH
76467: LD_INT 2
76469: PUSH
76470: LD_INT 1
76472: PUSH
76473: EMPTY
76474: LIST
76475: LIST
76476: PUSH
76477: LD_INT 1
76479: PUSH
76480: LD_INT 2
76482: PUSH
76483: EMPTY
76484: LIST
76485: LIST
76486: PUSH
76487: LD_INT 0
76489: PUSH
76490: LD_INT 2
76492: PUSH
76493: EMPTY
76494: LIST
76495: LIST
76496: PUSH
76497: LD_INT 1
76499: NEG
76500: PUSH
76501: LD_INT 1
76503: PUSH
76504: EMPTY
76505: LIST
76506: LIST
76507: PUSH
76508: LD_INT 2
76510: NEG
76511: PUSH
76512: LD_INT 0
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: PUSH
76519: LD_INT 2
76521: NEG
76522: PUSH
76523: LD_INT 1
76525: NEG
76526: PUSH
76527: EMPTY
76528: LIST
76529: LIST
76530: PUSH
76531: LD_INT 1
76533: NEG
76534: PUSH
76535: LD_INT 3
76537: NEG
76538: PUSH
76539: EMPTY
76540: LIST
76541: LIST
76542: PUSH
76543: LD_INT 0
76545: PUSH
76546: LD_INT 3
76548: NEG
76549: PUSH
76550: EMPTY
76551: LIST
76552: LIST
76553: PUSH
76554: LD_INT 1
76556: PUSH
76557: LD_INT 2
76559: NEG
76560: PUSH
76561: EMPTY
76562: LIST
76563: LIST
76564: PUSH
76565: LD_INT 2
76567: PUSH
76568: LD_INT 1
76570: NEG
76571: PUSH
76572: EMPTY
76573: LIST
76574: LIST
76575: PUSH
76576: LD_INT 3
76578: PUSH
76579: LD_INT 0
76581: PUSH
76582: EMPTY
76583: LIST
76584: LIST
76585: PUSH
76586: LD_INT 3
76588: PUSH
76589: LD_INT 1
76591: PUSH
76592: EMPTY
76593: LIST
76594: LIST
76595: PUSH
76596: LD_INT 1
76598: PUSH
76599: LD_INT 3
76601: PUSH
76602: EMPTY
76603: LIST
76604: LIST
76605: PUSH
76606: LD_INT 0
76608: PUSH
76609: LD_INT 3
76611: PUSH
76612: EMPTY
76613: LIST
76614: LIST
76615: PUSH
76616: LD_INT 1
76618: NEG
76619: PUSH
76620: LD_INT 2
76622: PUSH
76623: EMPTY
76624: LIST
76625: LIST
76626: PUSH
76627: LD_INT 2
76629: NEG
76630: PUSH
76631: LD_INT 1
76633: PUSH
76634: EMPTY
76635: LIST
76636: LIST
76637: PUSH
76638: LD_INT 3
76640: NEG
76641: PUSH
76642: LD_INT 0
76644: PUSH
76645: EMPTY
76646: LIST
76647: LIST
76648: PUSH
76649: LD_INT 3
76651: NEG
76652: PUSH
76653: LD_INT 1
76655: NEG
76656: PUSH
76657: EMPTY
76658: LIST
76659: LIST
76660: PUSH
76661: EMPTY
76662: LIST
76663: LIST
76664: LIST
76665: LIST
76666: LIST
76667: LIST
76668: LIST
76669: LIST
76670: LIST
76671: LIST
76672: LIST
76673: LIST
76674: LIST
76675: LIST
76676: LIST
76677: LIST
76678: LIST
76679: LIST
76680: LIST
76681: LIST
76682: LIST
76683: LIST
76684: LIST
76685: LIST
76686: LIST
76687: LIST
76688: LIST
76689: LIST
76690: LIST
76691: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76692: LD_ADDR_VAR 0 44
76696: PUSH
76697: LD_INT 0
76699: PUSH
76700: LD_INT 0
76702: PUSH
76703: EMPTY
76704: LIST
76705: LIST
76706: PUSH
76707: LD_INT 0
76709: PUSH
76710: LD_INT 1
76712: NEG
76713: PUSH
76714: EMPTY
76715: LIST
76716: LIST
76717: PUSH
76718: LD_INT 1
76720: PUSH
76721: LD_INT 0
76723: PUSH
76724: EMPTY
76725: LIST
76726: LIST
76727: PUSH
76728: LD_INT 1
76730: PUSH
76731: LD_INT 1
76733: PUSH
76734: EMPTY
76735: LIST
76736: LIST
76737: PUSH
76738: LD_INT 0
76740: PUSH
76741: LD_INT 1
76743: PUSH
76744: EMPTY
76745: LIST
76746: LIST
76747: PUSH
76748: LD_INT 1
76750: NEG
76751: PUSH
76752: LD_INT 0
76754: PUSH
76755: EMPTY
76756: LIST
76757: LIST
76758: PUSH
76759: LD_INT 1
76761: NEG
76762: PUSH
76763: LD_INT 1
76765: NEG
76766: PUSH
76767: EMPTY
76768: LIST
76769: LIST
76770: PUSH
76771: LD_INT 1
76773: NEG
76774: PUSH
76775: LD_INT 2
76777: NEG
76778: PUSH
76779: EMPTY
76780: LIST
76781: LIST
76782: PUSH
76783: LD_INT 1
76785: PUSH
76786: LD_INT 1
76788: NEG
76789: PUSH
76790: EMPTY
76791: LIST
76792: LIST
76793: PUSH
76794: LD_INT 2
76796: PUSH
76797: LD_INT 0
76799: PUSH
76800: EMPTY
76801: LIST
76802: LIST
76803: PUSH
76804: LD_INT 2
76806: PUSH
76807: LD_INT 1
76809: PUSH
76810: EMPTY
76811: LIST
76812: LIST
76813: PUSH
76814: LD_INT 2
76816: PUSH
76817: LD_INT 2
76819: PUSH
76820: EMPTY
76821: LIST
76822: LIST
76823: PUSH
76824: LD_INT 1
76826: PUSH
76827: LD_INT 2
76829: PUSH
76830: EMPTY
76831: LIST
76832: LIST
76833: PUSH
76834: LD_INT 1
76836: NEG
76837: PUSH
76838: LD_INT 1
76840: PUSH
76841: EMPTY
76842: LIST
76843: LIST
76844: PUSH
76845: LD_INT 2
76847: NEG
76848: PUSH
76849: LD_INT 0
76851: PUSH
76852: EMPTY
76853: LIST
76854: LIST
76855: PUSH
76856: LD_INT 2
76858: NEG
76859: PUSH
76860: LD_INT 1
76862: NEG
76863: PUSH
76864: EMPTY
76865: LIST
76866: LIST
76867: PUSH
76868: LD_INT 2
76870: NEG
76871: PUSH
76872: LD_INT 2
76874: NEG
76875: PUSH
76876: EMPTY
76877: LIST
76878: LIST
76879: PUSH
76880: LD_INT 2
76882: NEG
76883: PUSH
76884: LD_INT 3
76886: NEG
76887: PUSH
76888: EMPTY
76889: LIST
76890: LIST
76891: PUSH
76892: LD_INT 2
76894: PUSH
76895: LD_INT 1
76897: NEG
76898: PUSH
76899: EMPTY
76900: LIST
76901: LIST
76902: PUSH
76903: LD_INT 3
76905: PUSH
76906: LD_INT 0
76908: PUSH
76909: EMPTY
76910: LIST
76911: LIST
76912: PUSH
76913: LD_INT 3
76915: PUSH
76916: LD_INT 1
76918: PUSH
76919: EMPTY
76920: LIST
76921: LIST
76922: PUSH
76923: LD_INT 3
76925: PUSH
76926: LD_INT 2
76928: PUSH
76929: EMPTY
76930: LIST
76931: LIST
76932: PUSH
76933: LD_INT 3
76935: PUSH
76936: LD_INT 3
76938: PUSH
76939: EMPTY
76940: LIST
76941: LIST
76942: PUSH
76943: LD_INT 2
76945: PUSH
76946: LD_INT 3
76948: PUSH
76949: EMPTY
76950: LIST
76951: LIST
76952: PUSH
76953: LD_INT 2
76955: NEG
76956: PUSH
76957: LD_INT 1
76959: PUSH
76960: EMPTY
76961: LIST
76962: LIST
76963: PUSH
76964: LD_INT 3
76966: NEG
76967: PUSH
76968: LD_INT 0
76970: PUSH
76971: EMPTY
76972: LIST
76973: LIST
76974: PUSH
76975: LD_INT 3
76977: NEG
76978: PUSH
76979: LD_INT 1
76981: NEG
76982: PUSH
76983: EMPTY
76984: LIST
76985: LIST
76986: PUSH
76987: LD_INT 3
76989: NEG
76990: PUSH
76991: LD_INT 2
76993: NEG
76994: PUSH
76995: EMPTY
76996: LIST
76997: LIST
76998: PUSH
76999: LD_INT 3
77001: NEG
77002: PUSH
77003: LD_INT 3
77005: NEG
77006: PUSH
77007: EMPTY
77008: LIST
77009: LIST
77010: PUSH
77011: EMPTY
77012: LIST
77013: LIST
77014: LIST
77015: LIST
77016: LIST
77017: LIST
77018: LIST
77019: LIST
77020: LIST
77021: LIST
77022: LIST
77023: LIST
77024: LIST
77025: LIST
77026: LIST
77027: LIST
77028: LIST
77029: LIST
77030: LIST
77031: LIST
77032: LIST
77033: LIST
77034: LIST
77035: LIST
77036: LIST
77037: LIST
77038: LIST
77039: LIST
77040: LIST
77041: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77042: LD_ADDR_VAR 0 45
77046: PUSH
77047: LD_INT 0
77049: PUSH
77050: LD_INT 0
77052: PUSH
77053: EMPTY
77054: LIST
77055: LIST
77056: PUSH
77057: LD_INT 0
77059: PUSH
77060: LD_INT 1
77062: NEG
77063: PUSH
77064: EMPTY
77065: LIST
77066: LIST
77067: PUSH
77068: LD_INT 1
77070: PUSH
77071: LD_INT 0
77073: PUSH
77074: EMPTY
77075: LIST
77076: LIST
77077: PUSH
77078: LD_INT 1
77080: PUSH
77081: LD_INT 1
77083: PUSH
77084: EMPTY
77085: LIST
77086: LIST
77087: PUSH
77088: LD_INT 0
77090: PUSH
77091: LD_INT 1
77093: PUSH
77094: EMPTY
77095: LIST
77096: LIST
77097: PUSH
77098: LD_INT 1
77100: NEG
77101: PUSH
77102: LD_INT 0
77104: PUSH
77105: EMPTY
77106: LIST
77107: LIST
77108: PUSH
77109: LD_INT 1
77111: NEG
77112: PUSH
77113: LD_INT 1
77115: NEG
77116: PUSH
77117: EMPTY
77118: LIST
77119: LIST
77120: PUSH
77121: LD_INT 1
77123: NEG
77124: PUSH
77125: LD_INT 2
77127: NEG
77128: PUSH
77129: EMPTY
77130: LIST
77131: LIST
77132: PUSH
77133: LD_INT 0
77135: PUSH
77136: LD_INT 2
77138: NEG
77139: PUSH
77140: EMPTY
77141: LIST
77142: LIST
77143: PUSH
77144: LD_INT 1
77146: PUSH
77147: LD_INT 1
77149: NEG
77150: PUSH
77151: EMPTY
77152: LIST
77153: LIST
77154: PUSH
77155: LD_INT 2
77157: PUSH
77158: LD_INT 1
77160: PUSH
77161: EMPTY
77162: LIST
77163: LIST
77164: PUSH
77165: LD_INT 2
77167: PUSH
77168: LD_INT 2
77170: PUSH
77171: EMPTY
77172: LIST
77173: LIST
77174: PUSH
77175: LD_INT 1
77177: PUSH
77178: LD_INT 2
77180: PUSH
77181: EMPTY
77182: LIST
77183: LIST
77184: PUSH
77185: LD_INT 0
77187: PUSH
77188: LD_INT 2
77190: PUSH
77191: EMPTY
77192: LIST
77193: LIST
77194: PUSH
77195: LD_INT 1
77197: NEG
77198: PUSH
77199: LD_INT 1
77201: PUSH
77202: EMPTY
77203: LIST
77204: LIST
77205: PUSH
77206: LD_INT 2
77208: NEG
77209: PUSH
77210: LD_INT 1
77212: NEG
77213: PUSH
77214: EMPTY
77215: LIST
77216: LIST
77217: PUSH
77218: LD_INT 2
77220: NEG
77221: PUSH
77222: LD_INT 2
77224: NEG
77225: PUSH
77226: EMPTY
77227: LIST
77228: LIST
77229: PUSH
77230: LD_INT 2
77232: NEG
77233: PUSH
77234: LD_INT 3
77236: NEG
77237: PUSH
77238: EMPTY
77239: LIST
77240: LIST
77241: PUSH
77242: LD_INT 1
77244: NEG
77245: PUSH
77246: LD_INT 3
77248: NEG
77249: PUSH
77250: EMPTY
77251: LIST
77252: LIST
77253: PUSH
77254: LD_INT 0
77256: PUSH
77257: LD_INT 3
77259: NEG
77260: PUSH
77261: EMPTY
77262: LIST
77263: LIST
77264: PUSH
77265: LD_INT 1
77267: PUSH
77268: LD_INT 2
77270: NEG
77271: PUSH
77272: EMPTY
77273: LIST
77274: LIST
77275: PUSH
77276: LD_INT 3
77278: PUSH
77279: LD_INT 2
77281: PUSH
77282: EMPTY
77283: LIST
77284: LIST
77285: PUSH
77286: LD_INT 3
77288: PUSH
77289: LD_INT 3
77291: PUSH
77292: EMPTY
77293: LIST
77294: LIST
77295: PUSH
77296: LD_INT 2
77298: PUSH
77299: LD_INT 3
77301: PUSH
77302: EMPTY
77303: LIST
77304: LIST
77305: PUSH
77306: LD_INT 1
77308: PUSH
77309: LD_INT 3
77311: PUSH
77312: EMPTY
77313: LIST
77314: LIST
77315: PUSH
77316: LD_INT 0
77318: PUSH
77319: LD_INT 3
77321: PUSH
77322: EMPTY
77323: LIST
77324: LIST
77325: PUSH
77326: LD_INT 1
77328: NEG
77329: PUSH
77330: LD_INT 2
77332: PUSH
77333: EMPTY
77334: LIST
77335: LIST
77336: PUSH
77337: LD_INT 3
77339: NEG
77340: PUSH
77341: LD_INT 2
77343: NEG
77344: PUSH
77345: EMPTY
77346: LIST
77347: LIST
77348: PUSH
77349: LD_INT 3
77351: NEG
77352: PUSH
77353: LD_INT 3
77355: NEG
77356: PUSH
77357: EMPTY
77358: LIST
77359: LIST
77360: PUSH
77361: EMPTY
77362: LIST
77363: LIST
77364: LIST
77365: LIST
77366: LIST
77367: LIST
77368: LIST
77369: LIST
77370: LIST
77371: LIST
77372: LIST
77373: LIST
77374: LIST
77375: LIST
77376: LIST
77377: LIST
77378: LIST
77379: LIST
77380: LIST
77381: LIST
77382: LIST
77383: LIST
77384: LIST
77385: LIST
77386: LIST
77387: LIST
77388: LIST
77389: LIST
77390: LIST
77391: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
77392: LD_ADDR_VAR 0 46
77396: PUSH
77397: LD_INT 0
77399: PUSH
77400: LD_INT 0
77402: PUSH
77403: EMPTY
77404: LIST
77405: LIST
77406: PUSH
77407: LD_INT 0
77409: PUSH
77410: LD_INT 1
77412: NEG
77413: PUSH
77414: EMPTY
77415: LIST
77416: LIST
77417: PUSH
77418: LD_INT 1
77420: PUSH
77421: LD_INT 0
77423: PUSH
77424: EMPTY
77425: LIST
77426: LIST
77427: PUSH
77428: LD_INT 1
77430: PUSH
77431: LD_INT 1
77433: PUSH
77434: EMPTY
77435: LIST
77436: LIST
77437: PUSH
77438: LD_INT 0
77440: PUSH
77441: LD_INT 1
77443: PUSH
77444: EMPTY
77445: LIST
77446: LIST
77447: PUSH
77448: LD_INT 1
77450: NEG
77451: PUSH
77452: LD_INT 0
77454: PUSH
77455: EMPTY
77456: LIST
77457: LIST
77458: PUSH
77459: LD_INT 1
77461: NEG
77462: PUSH
77463: LD_INT 1
77465: NEG
77466: PUSH
77467: EMPTY
77468: LIST
77469: LIST
77470: PUSH
77471: LD_INT 1
77473: NEG
77474: PUSH
77475: LD_INT 2
77477: NEG
77478: PUSH
77479: EMPTY
77480: LIST
77481: LIST
77482: PUSH
77483: LD_INT 0
77485: PUSH
77486: LD_INT 2
77488: NEG
77489: PUSH
77490: EMPTY
77491: LIST
77492: LIST
77493: PUSH
77494: LD_INT 1
77496: PUSH
77497: LD_INT 1
77499: NEG
77500: PUSH
77501: EMPTY
77502: LIST
77503: LIST
77504: PUSH
77505: LD_INT 2
77507: PUSH
77508: LD_INT 0
77510: PUSH
77511: EMPTY
77512: LIST
77513: LIST
77514: PUSH
77515: LD_INT 2
77517: PUSH
77518: LD_INT 1
77520: PUSH
77521: EMPTY
77522: LIST
77523: LIST
77524: PUSH
77525: LD_INT 1
77527: PUSH
77528: LD_INT 2
77530: PUSH
77531: EMPTY
77532: LIST
77533: LIST
77534: PUSH
77535: LD_INT 0
77537: PUSH
77538: LD_INT 2
77540: PUSH
77541: EMPTY
77542: LIST
77543: LIST
77544: PUSH
77545: LD_INT 1
77547: NEG
77548: PUSH
77549: LD_INT 1
77551: PUSH
77552: EMPTY
77553: LIST
77554: LIST
77555: PUSH
77556: LD_INT 2
77558: NEG
77559: PUSH
77560: LD_INT 0
77562: PUSH
77563: EMPTY
77564: LIST
77565: LIST
77566: PUSH
77567: LD_INT 2
77569: NEG
77570: PUSH
77571: LD_INT 1
77573: NEG
77574: PUSH
77575: EMPTY
77576: LIST
77577: LIST
77578: PUSH
77579: LD_INT 1
77581: NEG
77582: PUSH
77583: LD_INT 3
77585: NEG
77586: PUSH
77587: EMPTY
77588: LIST
77589: LIST
77590: PUSH
77591: LD_INT 0
77593: PUSH
77594: LD_INT 3
77596: NEG
77597: PUSH
77598: EMPTY
77599: LIST
77600: LIST
77601: PUSH
77602: LD_INT 1
77604: PUSH
77605: LD_INT 2
77607: NEG
77608: PUSH
77609: EMPTY
77610: LIST
77611: LIST
77612: PUSH
77613: LD_INT 2
77615: PUSH
77616: LD_INT 1
77618: NEG
77619: PUSH
77620: EMPTY
77621: LIST
77622: LIST
77623: PUSH
77624: LD_INT 3
77626: PUSH
77627: LD_INT 0
77629: PUSH
77630: EMPTY
77631: LIST
77632: LIST
77633: PUSH
77634: LD_INT 3
77636: PUSH
77637: LD_INT 1
77639: PUSH
77640: EMPTY
77641: LIST
77642: LIST
77643: PUSH
77644: LD_INT 1
77646: PUSH
77647: LD_INT 3
77649: PUSH
77650: EMPTY
77651: LIST
77652: LIST
77653: PUSH
77654: LD_INT 0
77656: PUSH
77657: LD_INT 3
77659: PUSH
77660: EMPTY
77661: LIST
77662: LIST
77663: PUSH
77664: LD_INT 1
77666: NEG
77667: PUSH
77668: LD_INT 2
77670: PUSH
77671: EMPTY
77672: LIST
77673: LIST
77674: PUSH
77675: LD_INT 2
77677: NEG
77678: PUSH
77679: LD_INT 1
77681: PUSH
77682: EMPTY
77683: LIST
77684: LIST
77685: PUSH
77686: LD_INT 3
77688: NEG
77689: PUSH
77690: LD_INT 0
77692: PUSH
77693: EMPTY
77694: LIST
77695: LIST
77696: PUSH
77697: LD_INT 3
77699: NEG
77700: PUSH
77701: LD_INT 1
77703: NEG
77704: PUSH
77705: EMPTY
77706: LIST
77707: LIST
77708: PUSH
77709: EMPTY
77710: LIST
77711: LIST
77712: LIST
77713: LIST
77714: LIST
77715: LIST
77716: LIST
77717: LIST
77718: LIST
77719: LIST
77720: LIST
77721: LIST
77722: LIST
77723: LIST
77724: LIST
77725: LIST
77726: LIST
77727: LIST
77728: LIST
77729: LIST
77730: LIST
77731: LIST
77732: LIST
77733: LIST
77734: LIST
77735: LIST
77736: LIST
77737: LIST
77738: LIST
77739: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
77740: LD_ADDR_VAR 0 47
77744: PUSH
77745: LD_INT 0
77747: PUSH
77748: LD_INT 0
77750: PUSH
77751: EMPTY
77752: LIST
77753: LIST
77754: PUSH
77755: LD_INT 0
77757: PUSH
77758: LD_INT 1
77760: NEG
77761: PUSH
77762: EMPTY
77763: LIST
77764: LIST
77765: PUSH
77766: LD_INT 1
77768: PUSH
77769: LD_INT 0
77771: PUSH
77772: EMPTY
77773: LIST
77774: LIST
77775: PUSH
77776: LD_INT 1
77778: PUSH
77779: LD_INT 1
77781: PUSH
77782: EMPTY
77783: LIST
77784: LIST
77785: PUSH
77786: LD_INT 0
77788: PUSH
77789: LD_INT 1
77791: PUSH
77792: EMPTY
77793: LIST
77794: LIST
77795: PUSH
77796: LD_INT 1
77798: NEG
77799: PUSH
77800: LD_INT 0
77802: PUSH
77803: EMPTY
77804: LIST
77805: LIST
77806: PUSH
77807: LD_INT 1
77809: NEG
77810: PUSH
77811: LD_INT 1
77813: NEG
77814: PUSH
77815: EMPTY
77816: LIST
77817: LIST
77818: PUSH
77819: LD_INT 1
77821: NEG
77822: PUSH
77823: LD_INT 2
77825: NEG
77826: PUSH
77827: EMPTY
77828: LIST
77829: LIST
77830: PUSH
77831: LD_INT 0
77833: PUSH
77834: LD_INT 2
77836: NEG
77837: PUSH
77838: EMPTY
77839: LIST
77840: LIST
77841: PUSH
77842: LD_INT 1
77844: PUSH
77845: LD_INT 1
77847: NEG
77848: PUSH
77849: EMPTY
77850: LIST
77851: LIST
77852: PUSH
77853: LD_INT 2
77855: NEG
77856: PUSH
77857: LD_INT 1
77859: NEG
77860: PUSH
77861: EMPTY
77862: LIST
77863: LIST
77864: PUSH
77865: LD_INT 2
77867: NEG
77868: PUSH
77869: LD_INT 2
77871: NEG
77872: PUSH
77873: EMPTY
77874: LIST
77875: LIST
77876: PUSH
77877: EMPTY
77878: LIST
77879: LIST
77880: LIST
77881: LIST
77882: LIST
77883: LIST
77884: LIST
77885: LIST
77886: LIST
77887: LIST
77888: LIST
77889: LIST
77890: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
77891: LD_ADDR_VAR 0 48
77895: PUSH
77896: LD_INT 0
77898: PUSH
77899: LD_INT 0
77901: PUSH
77902: EMPTY
77903: LIST
77904: LIST
77905: PUSH
77906: LD_INT 0
77908: PUSH
77909: LD_INT 1
77911: NEG
77912: PUSH
77913: EMPTY
77914: LIST
77915: LIST
77916: PUSH
77917: LD_INT 1
77919: PUSH
77920: LD_INT 0
77922: PUSH
77923: EMPTY
77924: LIST
77925: LIST
77926: PUSH
77927: LD_INT 1
77929: PUSH
77930: LD_INT 1
77932: PUSH
77933: EMPTY
77934: LIST
77935: LIST
77936: PUSH
77937: LD_INT 0
77939: PUSH
77940: LD_INT 1
77942: PUSH
77943: EMPTY
77944: LIST
77945: LIST
77946: PUSH
77947: LD_INT 1
77949: NEG
77950: PUSH
77951: LD_INT 0
77953: PUSH
77954: EMPTY
77955: LIST
77956: LIST
77957: PUSH
77958: LD_INT 1
77960: NEG
77961: PUSH
77962: LD_INT 1
77964: NEG
77965: PUSH
77966: EMPTY
77967: LIST
77968: LIST
77969: PUSH
77970: LD_INT 1
77972: NEG
77973: PUSH
77974: LD_INT 2
77976: NEG
77977: PUSH
77978: EMPTY
77979: LIST
77980: LIST
77981: PUSH
77982: LD_INT 0
77984: PUSH
77985: LD_INT 2
77987: NEG
77988: PUSH
77989: EMPTY
77990: LIST
77991: LIST
77992: PUSH
77993: LD_INT 1
77995: PUSH
77996: LD_INT 1
77998: NEG
77999: PUSH
78000: EMPTY
78001: LIST
78002: LIST
78003: PUSH
78004: LD_INT 2
78006: PUSH
78007: LD_INT 0
78009: PUSH
78010: EMPTY
78011: LIST
78012: LIST
78013: PUSH
78014: LD_INT 2
78016: PUSH
78017: LD_INT 1
78019: PUSH
78020: EMPTY
78021: LIST
78022: LIST
78023: PUSH
78024: EMPTY
78025: LIST
78026: LIST
78027: LIST
78028: LIST
78029: LIST
78030: LIST
78031: LIST
78032: LIST
78033: LIST
78034: LIST
78035: LIST
78036: LIST
78037: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
78038: LD_ADDR_VAR 0 49
78042: PUSH
78043: LD_INT 0
78045: PUSH
78046: LD_INT 0
78048: PUSH
78049: EMPTY
78050: LIST
78051: LIST
78052: PUSH
78053: LD_INT 0
78055: PUSH
78056: LD_INT 1
78058: NEG
78059: PUSH
78060: EMPTY
78061: LIST
78062: LIST
78063: PUSH
78064: LD_INT 1
78066: PUSH
78067: LD_INT 0
78069: PUSH
78070: EMPTY
78071: LIST
78072: LIST
78073: PUSH
78074: LD_INT 1
78076: PUSH
78077: LD_INT 1
78079: PUSH
78080: EMPTY
78081: LIST
78082: LIST
78083: PUSH
78084: LD_INT 0
78086: PUSH
78087: LD_INT 1
78089: PUSH
78090: EMPTY
78091: LIST
78092: LIST
78093: PUSH
78094: LD_INT 1
78096: NEG
78097: PUSH
78098: LD_INT 0
78100: PUSH
78101: EMPTY
78102: LIST
78103: LIST
78104: PUSH
78105: LD_INT 1
78107: NEG
78108: PUSH
78109: LD_INT 1
78111: NEG
78112: PUSH
78113: EMPTY
78114: LIST
78115: LIST
78116: PUSH
78117: LD_INT 1
78119: PUSH
78120: LD_INT 1
78122: NEG
78123: PUSH
78124: EMPTY
78125: LIST
78126: LIST
78127: PUSH
78128: LD_INT 2
78130: PUSH
78131: LD_INT 0
78133: PUSH
78134: EMPTY
78135: LIST
78136: LIST
78137: PUSH
78138: LD_INT 2
78140: PUSH
78141: LD_INT 1
78143: PUSH
78144: EMPTY
78145: LIST
78146: LIST
78147: PUSH
78148: LD_INT 2
78150: PUSH
78151: LD_INT 2
78153: PUSH
78154: EMPTY
78155: LIST
78156: LIST
78157: PUSH
78158: LD_INT 1
78160: PUSH
78161: LD_INT 2
78163: PUSH
78164: EMPTY
78165: LIST
78166: LIST
78167: PUSH
78168: EMPTY
78169: LIST
78170: LIST
78171: LIST
78172: LIST
78173: LIST
78174: LIST
78175: LIST
78176: LIST
78177: LIST
78178: LIST
78179: LIST
78180: LIST
78181: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
78182: LD_ADDR_VAR 0 50
78186: PUSH
78187: LD_INT 0
78189: PUSH
78190: LD_INT 0
78192: PUSH
78193: EMPTY
78194: LIST
78195: LIST
78196: PUSH
78197: LD_INT 0
78199: PUSH
78200: LD_INT 1
78202: NEG
78203: PUSH
78204: EMPTY
78205: LIST
78206: LIST
78207: PUSH
78208: LD_INT 1
78210: PUSH
78211: LD_INT 0
78213: PUSH
78214: EMPTY
78215: LIST
78216: LIST
78217: PUSH
78218: LD_INT 1
78220: PUSH
78221: LD_INT 1
78223: PUSH
78224: EMPTY
78225: LIST
78226: LIST
78227: PUSH
78228: LD_INT 0
78230: PUSH
78231: LD_INT 1
78233: PUSH
78234: EMPTY
78235: LIST
78236: LIST
78237: PUSH
78238: LD_INT 1
78240: NEG
78241: PUSH
78242: LD_INT 0
78244: PUSH
78245: EMPTY
78246: LIST
78247: LIST
78248: PUSH
78249: LD_INT 1
78251: NEG
78252: PUSH
78253: LD_INT 1
78255: NEG
78256: PUSH
78257: EMPTY
78258: LIST
78259: LIST
78260: PUSH
78261: LD_INT 2
78263: PUSH
78264: LD_INT 1
78266: PUSH
78267: EMPTY
78268: LIST
78269: LIST
78270: PUSH
78271: LD_INT 2
78273: PUSH
78274: LD_INT 2
78276: PUSH
78277: EMPTY
78278: LIST
78279: LIST
78280: PUSH
78281: LD_INT 1
78283: PUSH
78284: LD_INT 2
78286: PUSH
78287: EMPTY
78288: LIST
78289: LIST
78290: PUSH
78291: LD_INT 0
78293: PUSH
78294: LD_INT 2
78296: PUSH
78297: EMPTY
78298: LIST
78299: LIST
78300: PUSH
78301: LD_INT 1
78303: NEG
78304: PUSH
78305: LD_INT 1
78307: PUSH
78308: EMPTY
78309: LIST
78310: LIST
78311: PUSH
78312: EMPTY
78313: LIST
78314: LIST
78315: LIST
78316: LIST
78317: LIST
78318: LIST
78319: LIST
78320: LIST
78321: LIST
78322: LIST
78323: LIST
78324: LIST
78325: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
78326: LD_ADDR_VAR 0 51
78330: PUSH
78331: LD_INT 0
78333: PUSH
78334: LD_INT 0
78336: PUSH
78337: EMPTY
78338: LIST
78339: LIST
78340: PUSH
78341: LD_INT 0
78343: PUSH
78344: LD_INT 1
78346: NEG
78347: PUSH
78348: EMPTY
78349: LIST
78350: LIST
78351: PUSH
78352: LD_INT 1
78354: PUSH
78355: LD_INT 0
78357: PUSH
78358: EMPTY
78359: LIST
78360: LIST
78361: PUSH
78362: LD_INT 1
78364: PUSH
78365: LD_INT 1
78367: PUSH
78368: EMPTY
78369: LIST
78370: LIST
78371: PUSH
78372: LD_INT 0
78374: PUSH
78375: LD_INT 1
78377: PUSH
78378: EMPTY
78379: LIST
78380: LIST
78381: PUSH
78382: LD_INT 1
78384: NEG
78385: PUSH
78386: LD_INT 0
78388: PUSH
78389: EMPTY
78390: LIST
78391: LIST
78392: PUSH
78393: LD_INT 1
78395: NEG
78396: PUSH
78397: LD_INT 1
78399: NEG
78400: PUSH
78401: EMPTY
78402: LIST
78403: LIST
78404: PUSH
78405: LD_INT 1
78407: PUSH
78408: LD_INT 2
78410: PUSH
78411: EMPTY
78412: LIST
78413: LIST
78414: PUSH
78415: LD_INT 0
78417: PUSH
78418: LD_INT 2
78420: PUSH
78421: EMPTY
78422: LIST
78423: LIST
78424: PUSH
78425: LD_INT 1
78427: NEG
78428: PUSH
78429: LD_INT 1
78431: PUSH
78432: EMPTY
78433: LIST
78434: LIST
78435: PUSH
78436: LD_INT 2
78438: NEG
78439: PUSH
78440: LD_INT 0
78442: PUSH
78443: EMPTY
78444: LIST
78445: LIST
78446: PUSH
78447: LD_INT 2
78449: NEG
78450: PUSH
78451: LD_INT 1
78453: NEG
78454: PUSH
78455: EMPTY
78456: LIST
78457: LIST
78458: PUSH
78459: EMPTY
78460: LIST
78461: LIST
78462: LIST
78463: LIST
78464: LIST
78465: LIST
78466: LIST
78467: LIST
78468: LIST
78469: LIST
78470: LIST
78471: LIST
78472: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78473: LD_ADDR_VAR 0 52
78477: PUSH
78478: LD_INT 0
78480: PUSH
78481: LD_INT 0
78483: PUSH
78484: EMPTY
78485: LIST
78486: LIST
78487: PUSH
78488: LD_INT 0
78490: PUSH
78491: LD_INT 1
78493: NEG
78494: PUSH
78495: EMPTY
78496: LIST
78497: LIST
78498: PUSH
78499: LD_INT 1
78501: PUSH
78502: LD_INT 0
78504: PUSH
78505: EMPTY
78506: LIST
78507: LIST
78508: PUSH
78509: LD_INT 1
78511: PUSH
78512: LD_INT 1
78514: PUSH
78515: EMPTY
78516: LIST
78517: LIST
78518: PUSH
78519: LD_INT 0
78521: PUSH
78522: LD_INT 1
78524: PUSH
78525: EMPTY
78526: LIST
78527: LIST
78528: PUSH
78529: LD_INT 1
78531: NEG
78532: PUSH
78533: LD_INT 0
78535: PUSH
78536: EMPTY
78537: LIST
78538: LIST
78539: PUSH
78540: LD_INT 1
78542: NEG
78543: PUSH
78544: LD_INT 1
78546: NEG
78547: PUSH
78548: EMPTY
78549: LIST
78550: LIST
78551: PUSH
78552: LD_INT 1
78554: NEG
78555: PUSH
78556: LD_INT 2
78558: NEG
78559: PUSH
78560: EMPTY
78561: LIST
78562: LIST
78563: PUSH
78564: LD_INT 1
78566: NEG
78567: PUSH
78568: LD_INT 1
78570: PUSH
78571: EMPTY
78572: LIST
78573: LIST
78574: PUSH
78575: LD_INT 2
78577: NEG
78578: PUSH
78579: LD_INT 0
78581: PUSH
78582: EMPTY
78583: LIST
78584: LIST
78585: PUSH
78586: LD_INT 2
78588: NEG
78589: PUSH
78590: LD_INT 1
78592: NEG
78593: PUSH
78594: EMPTY
78595: LIST
78596: LIST
78597: PUSH
78598: LD_INT 2
78600: NEG
78601: PUSH
78602: LD_INT 2
78604: NEG
78605: PUSH
78606: EMPTY
78607: LIST
78608: LIST
78609: PUSH
78610: EMPTY
78611: LIST
78612: LIST
78613: LIST
78614: LIST
78615: LIST
78616: LIST
78617: LIST
78618: LIST
78619: LIST
78620: LIST
78621: LIST
78622: LIST
78623: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78624: LD_ADDR_VAR 0 53
78628: PUSH
78629: LD_INT 0
78631: PUSH
78632: LD_INT 0
78634: PUSH
78635: EMPTY
78636: LIST
78637: LIST
78638: PUSH
78639: LD_INT 0
78641: PUSH
78642: LD_INT 1
78644: NEG
78645: PUSH
78646: EMPTY
78647: LIST
78648: LIST
78649: PUSH
78650: LD_INT 1
78652: PUSH
78653: LD_INT 0
78655: PUSH
78656: EMPTY
78657: LIST
78658: LIST
78659: PUSH
78660: LD_INT 1
78662: PUSH
78663: LD_INT 1
78665: PUSH
78666: EMPTY
78667: LIST
78668: LIST
78669: PUSH
78670: LD_INT 0
78672: PUSH
78673: LD_INT 1
78675: PUSH
78676: EMPTY
78677: LIST
78678: LIST
78679: PUSH
78680: LD_INT 1
78682: NEG
78683: PUSH
78684: LD_INT 0
78686: PUSH
78687: EMPTY
78688: LIST
78689: LIST
78690: PUSH
78691: LD_INT 1
78693: NEG
78694: PUSH
78695: LD_INT 1
78697: NEG
78698: PUSH
78699: EMPTY
78700: LIST
78701: LIST
78702: PUSH
78703: LD_INT 1
78705: NEG
78706: PUSH
78707: LD_INT 2
78709: NEG
78710: PUSH
78711: EMPTY
78712: LIST
78713: LIST
78714: PUSH
78715: LD_INT 0
78717: PUSH
78718: LD_INT 2
78720: NEG
78721: PUSH
78722: EMPTY
78723: LIST
78724: LIST
78725: PUSH
78726: LD_INT 1
78728: PUSH
78729: LD_INT 1
78731: NEG
78732: PUSH
78733: EMPTY
78734: LIST
78735: LIST
78736: PUSH
78737: LD_INT 2
78739: PUSH
78740: LD_INT 0
78742: PUSH
78743: EMPTY
78744: LIST
78745: LIST
78746: PUSH
78747: LD_INT 2
78749: PUSH
78750: LD_INT 1
78752: PUSH
78753: EMPTY
78754: LIST
78755: LIST
78756: PUSH
78757: LD_INT 2
78759: PUSH
78760: LD_INT 2
78762: PUSH
78763: EMPTY
78764: LIST
78765: LIST
78766: PUSH
78767: LD_INT 1
78769: PUSH
78770: LD_INT 2
78772: PUSH
78773: EMPTY
78774: LIST
78775: LIST
78776: PUSH
78777: LD_INT 0
78779: PUSH
78780: LD_INT 2
78782: PUSH
78783: EMPTY
78784: LIST
78785: LIST
78786: PUSH
78787: LD_INT 1
78789: NEG
78790: PUSH
78791: LD_INT 1
78793: PUSH
78794: EMPTY
78795: LIST
78796: LIST
78797: PUSH
78798: LD_INT 2
78800: NEG
78801: PUSH
78802: LD_INT 0
78804: PUSH
78805: EMPTY
78806: LIST
78807: LIST
78808: PUSH
78809: LD_INT 2
78811: NEG
78812: PUSH
78813: LD_INT 1
78815: NEG
78816: PUSH
78817: EMPTY
78818: LIST
78819: LIST
78820: PUSH
78821: LD_INT 2
78823: NEG
78824: PUSH
78825: LD_INT 2
78827: NEG
78828: PUSH
78829: EMPTY
78830: LIST
78831: LIST
78832: PUSH
78833: EMPTY
78834: LIST
78835: LIST
78836: LIST
78837: LIST
78838: LIST
78839: LIST
78840: LIST
78841: LIST
78842: LIST
78843: LIST
78844: LIST
78845: LIST
78846: LIST
78847: LIST
78848: LIST
78849: LIST
78850: LIST
78851: LIST
78852: LIST
78853: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78854: LD_ADDR_VAR 0 54
78858: PUSH
78859: LD_INT 0
78861: PUSH
78862: LD_INT 0
78864: PUSH
78865: EMPTY
78866: LIST
78867: LIST
78868: PUSH
78869: LD_INT 0
78871: PUSH
78872: LD_INT 1
78874: NEG
78875: PUSH
78876: EMPTY
78877: LIST
78878: LIST
78879: PUSH
78880: LD_INT 1
78882: PUSH
78883: LD_INT 0
78885: PUSH
78886: EMPTY
78887: LIST
78888: LIST
78889: PUSH
78890: LD_INT 1
78892: PUSH
78893: LD_INT 1
78895: PUSH
78896: EMPTY
78897: LIST
78898: LIST
78899: PUSH
78900: LD_INT 0
78902: PUSH
78903: LD_INT 1
78905: PUSH
78906: EMPTY
78907: LIST
78908: LIST
78909: PUSH
78910: LD_INT 1
78912: NEG
78913: PUSH
78914: LD_INT 0
78916: PUSH
78917: EMPTY
78918: LIST
78919: LIST
78920: PUSH
78921: LD_INT 1
78923: NEG
78924: PUSH
78925: LD_INT 1
78927: NEG
78928: PUSH
78929: EMPTY
78930: LIST
78931: LIST
78932: PUSH
78933: LD_INT 1
78935: NEG
78936: PUSH
78937: LD_INT 2
78939: NEG
78940: PUSH
78941: EMPTY
78942: LIST
78943: LIST
78944: PUSH
78945: LD_INT 0
78947: PUSH
78948: LD_INT 2
78950: NEG
78951: PUSH
78952: EMPTY
78953: LIST
78954: LIST
78955: PUSH
78956: LD_INT 1
78958: PUSH
78959: LD_INT 1
78961: NEG
78962: PUSH
78963: EMPTY
78964: LIST
78965: LIST
78966: PUSH
78967: LD_INT 2
78969: PUSH
78970: LD_INT 0
78972: PUSH
78973: EMPTY
78974: LIST
78975: LIST
78976: PUSH
78977: LD_INT 2
78979: PUSH
78980: LD_INT 1
78982: PUSH
78983: EMPTY
78984: LIST
78985: LIST
78986: PUSH
78987: LD_INT 2
78989: PUSH
78990: LD_INT 2
78992: PUSH
78993: EMPTY
78994: LIST
78995: LIST
78996: PUSH
78997: LD_INT 1
78999: PUSH
79000: LD_INT 2
79002: PUSH
79003: EMPTY
79004: LIST
79005: LIST
79006: PUSH
79007: LD_INT 0
79009: PUSH
79010: LD_INT 2
79012: PUSH
79013: EMPTY
79014: LIST
79015: LIST
79016: PUSH
79017: LD_INT 1
79019: NEG
79020: PUSH
79021: LD_INT 1
79023: PUSH
79024: EMPTY
79025: LIST
79026: LIST
79027: PUSH
79028: LD_INT 2
79030: NEG
79031: PUSH
79032: LD_INT 0
79034: PUSH
79035: EMPTY
79036: LIST
79037: LIST
79038: PUSH
79039: LD_INT 2
79041: NEG
79042: PUSH
79043: LD_INT 1
79045: NEG
79046: PUSH
79047: EMPTY
79048: LIST
79049: LIST
79050: PUSH
79051: LD_INT 2
79053: NEG
79054: PUSH
79055: LD_INT 2
79057: NEG
79058: PUSH
79059: EMPTY
79060: LIST
79061: LIST
79062: PUSH
79063: EMPTY
79064: LIST
79065: LIST
79066: LIST
79067: LIST
79068: LIST
79069: LIST
79070: LIST
79071: LIST
79072: LIST
79073: LIST
79074: LIST
79075: LIST
79076: LIST
79077: LIST
79078: LIST
79079: LIST
79080: LIST
79081: LIST
79082: LIST
79083: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79084: LD_ADDR_VAR 0 55
79088: PUSH
79089: LD_INT 0
79091: PUSH
79092: LD_INT 0
79094: PUSH
79095: EMPTY
79096: LIST
79097: LIST
79098: PUSH
79099: LD_INT 0
79101: PUSH
79102: LD_INT 1
79104: NEG
79105: PUSH
79106: EMPTY
79107: LIST
79108: LIST
79109: PUSH
79110: LD_INT 1
79112: PUSH
79113: LD_INT 0
79115: PUSH
79116: EMPTY
79117: LIST
79118: LIST
79119: PUSH
79120: LD_INT 1
79122: PUSH
79123: LD_INT 1
79125: PUSH
79126: EMPTY
79127: LIST
79128: LIST
79129: PUSH
79130: LD_INT 0
79132: PUSH
79133: LD_INT 1
79135: PUSH
79136: EMPTY
79137: LIST
79138: LIST
79139: PUSH
79140: LD_INT 1
79142: NEG
79143: PUSH
79144: LD_INT 0
79146: PUSH
79147: EMPTY
79148: LIST
79149: LIST
79150: PUSH
79151: LD_INT 1
79153: NEG
79154: PUSH
79155: LD_INT 1
79157: NEG
79158: PUSH
79159: EMPTY
79160: LIST
79161: LIST
79162: PUSH
79163: LD_INT 1
79165: NEG
79166: PUSH
79167: LD_INT 2
79169: NEG
79170: PUSH
79171: EMPTY
79172: LIST
79173: LIST
79174: PUSH
79175: LD_INT 0
79177: PUSH
79178: LD_INT 2
79180: NEG
79181: PUSH
79182: EMPTY
79183: LIST
79184: LIST
79185: PUSH
79186: LD_INT 1
79188: PUSH
79189: LD_INT 1
79191: NEG
79192: PUSH
79193: EMPTY
79194: LIST
79195: LIST
79196: PUSH
79197: LD_INT 2
79199: PUSH
79200: LD_INT 0
79202: PUSH
79203: EMPTY
79204: LIST
79205: LIST
79206: PUSH
79207: LD_INT 2
79209: PUSH
79210: LD_INT 1
79212: PUSH
79213: EMPTY
79214: LIST
79215: LIST
79216: PUSH
79217: LD_INT 2
79219: PUSH
79220: LD_INT 2
79222: PUSH
79223: EMPTY
79224: LIST
79225: LIST
79226: PUSH
79227: LD_INT 1
79229: PUSH
79230: LD_INT 2
79232: PUSH
79233: EMPTY
79234: LIST
79235: LIST
79236: PUSH
79237: LD_INT 0
79239: PUSH
79240: LD_INT 2
79242: PUSH
79243: EMPTY
79244: LIST
79245: LIST
79246: PUSH
79247: LD_INT 1
79249: NEG
79250: PUSH
79251: LD_INT 1
79253: PUSH
79254: EMPTY
79255: LIST
79256: LIST
79257: PUSH
79258: LD_INT 2
79260: NEG
79261: PUSH
79262: LD_INT 0
79264: PUSH
79265: EMPTY
79266: LIST
79267: LIST
79268: PUSH
79269: LD_INT 2
79271: NEG
79272: PUSH
79273: LD_INT 1
79275: NEG
79276: PUSH
79277: EMPTY
79278: LIST
79279: LIST
79280: PUSH
79281: LD_INT 2
79283: NEG
79284: PUSH
79285: LD_INT 2
79287: NEG
79288: PUSH
79289: EMPTY
79290: LIST
79291: LIST
79292: PUSH
79293: EMPTY
79294: LIST
79295: LIST
79296: LIST
79297: LIST
79298: LIST
79299: LIST
79300: LIST
79301: LIST
79302: LIST
79303: LIST
79304: LIST
79305: LIST
79306: LIST
79307: LIST
79308: LIST
79309: LIST
79310: LIST
79311: LIST
79312: LIST
79313: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79314: LD_ADDR_VAR 0 56
79318: PUSH
79319: LD_INT 0
79321: PUSH
79322: LD_INT 0
79324: PUSH
79325: EMPTY
79326: LIST
79327: LIST
79328: PUSH
79329: LD_INT 0
79331: PUSH
79332: LD_INT 1
79334: NEG
79335: PUSH
79336: EMPTY
79337: LIST
79338: LIST
79339: PUSH
79340: LD_INT 1
79342: PUSH
79343: LD_INT 0
79345: PUSH
79346: EMPTY
79347: LIST
79348: LIST
79349: PUSH
79350: LD_INT 1
79352: PUSH
79353: LD_INT 1
79355: PUSH
79356: EMPTY
79357: LIST
79358: LIST
79359: PUSH
79360: LD_INT 0
79362: PUSH
79363: LD_INT 1
79365: PUSH
79366: EMPTY
79367: LIST
79368: LIST
79369: PUSH
79370: LD_INT 1
79372: NEG
79373: PUSH
79374: LD_INT 0
79376: PUSH
79377: EMPTY
79378: LIST
79379: LIST
79380: PUSH
79381: LD_INT 1
79383: NEG
79384: PUSH
79385: LD_INT 1
79387: NEG
79388: PUSH
79389: EMPTY
79390: LIST
79391: LIST
79392: PUSH
79393: LD_INT 1
79395: NEG
79396: PUSH
79397: LD_INT 2
79399: NEG
79400: PUSH
79401: EMPTY
79402: LIST
79403: LIST
79404: PUSH
79405: LD_INT 0
79407: PUSH
79408: LD_INT 2
79410: NEG
79411: PUSH
79412: EMPTY
79413: LIST
79414: LIST
79415: PUSH
79416: LD_INT 1
79418: PUSH
79419: LD_INT 1
79421: NEG
79422: PUSH
79423: EMPTY
79424: LIST
79425: LIST
79426: PUSH
79427: LD_INT 2
79429: PUSH
79430: LD_INT 0
79432: PUSH
79433: EMPTY
79434: LIST
79435: LIST
79436: PUSH
79437: LD_INT 2
79439: PUSH
79440: LD_INT 1
79442: PUSH
79443: EMPTY
79444: LIST
79445: LIST
79446: PUSH
79447: LD_INT 2
79449: PUSH
79450: LD_INT 2
79452: PUSH
79453: EMPTY
79454: LIST
79455: LIST
79456: PUSH
79457: LD_INT 1
79459: PUSH
79460: LD_INT 2
79462: PUSH
79463: EMPTY
79464: LIST
79465: LIST
79466: PUSH
79467: LD_INT 0
79469: PUSH
79470: LD_INT 2
79472: PUSH
79473: EMPTY
79474: LIST
79475: LIST
79476: PUSH
79477: LD_INT 1
79479: NEG
79480: PUSH
79481: LD_INT 1
79483: PUSH
79484: EMPTY
79485: LIST
79486: LIST
79487: PUSH
79488: LD_INT 2
79490: NEG
79491: PUSH
79492: LD_INT 0
79494: PUSH
79495: EMPTY
79496: LIST
79497: LIST
79498: PUSH
79499: LD_INT 2
79501: NEG
79502: PUSH
79503: LD_INT 1
79505: NEG
79506: PUSH
79507: EMPTY
79508: LIST
79509: LIST
79510: PUSH
79511: LD_INT 2
79513: NEG
79514: PUSH
79515: LD_INT 2
79517: NEG
79518: PUSH
79519: EMPTY
79520: LIST
79521: LIST
79522: PUSH
79523: EMPTY
79524: LIST
79525: LIST
79526: LIST
79527: LIST
79528: LIST
79529: LIST
79530: LIST
79531: LIST
79532: LIST
79533: LIST
79534: LIST
79535: LIST
79536: LIST
79537: LIST
79538: LIST
79539: LIST
79540: LIST
79541: LIST
79542: LIST
79543: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79544: LD_ADDR_VAR 0 57
79548: PUSH
79549: LD_INT 0
79551: PUSH
79552: LD_INT 0
79554: PUSH
79555: EMPTY
79556: LIST
79557: LIST
79558: PUSH
79559: LD_INT 0
79561: PUSH
79562: LD_INT 1
79564: NEG
79565: PUSH
79566: EMPTY
79567: LIST
79568: LIST
79569: PUSH
79570: LD_INT 1
79572: PUSH
79573: LD_INT 0
79575: PUSH
79576: EMPTY
79577: LIST
79578: LIST
79579: PUSH
79580: LD_INT 1
79582: PUSH
79583: LD_INT 1
79585: PUSH
79586: EMPTY
79587: LIST
79588: LIST
79589: PUSH
79590: LD_INT 0
79592: PUSH
79593: LD_INT 1
79595: PUSH
79596: EMPTY
79597: LIST
79598: LIST
79599: PUSH
79600: LD_INT 1
79602: NEG
79603: PUSH
79604: LD_INT 0
79606: PUSH
79607: EMPTY
79608: LIST
79609: LIST
79610: PUSH
79611: LD_INT 1
79613: NEG
79614: PUSH
79615: LD_INT 1
79617: NEG
79618: PUSH
79619: EMPTY
79620: LIST
79621: LIST
79622: PUSH
79623: LD_INT 1
79625: NEG
79626: PUSH
79627: LD_INT 2
79629: NEG
79630: PUSH
79631: EMPTY
79632: LIST
79633: LIST
79634: PUSH
79635: LD_INT 0
79637: PUSH
79638: LD_INT 2
79640: NEG
79641: PUSH
79642: EMPTY
79643: LIST
79644: LIST
79645: PUSH
79646: LD_INT 1
79648: PUSH
79649: LD_INT 1
79651: NEG
79652: PUSH
79653: EMPTY
79654: LIST
79655: LIST
79656: PUSH
79657: LD_INT 2
79659: PUSH
79660: LD_INT 0
79662: PUSH
79663: EMPTY
79664: LIST
79665: LIST
79666: PUSH
79667: LD_INT 2
79669: PUSH
79670: LD_INT 1
79672: PUSH
79673: EMPTY
79674: LIST
79675: LIST
79676: PUSH
79677: LD_INT 2
79679: PUSH
79680: LD_INT 2
79682: PUSH
79683: EMPTY
79684: LIST
79685: LIST
79686: PUSH
79687: LD_INT 1
79689: PUSH
79690: LD_INT 2
79692: PUSH
79693: EMPTY
79694: LIST
79695: LIST
79696: PUSH
79697: LD_INT 0
79699: PUSH
79700: LD_INT 2
79702: PUSH
79703: EMPTY
79704: LIST
79705: LIST
79706: PUSH
79707: LD_INT 1
79709: NEG
79710: PUSH
79711: LD_INT 1
79713: PUSH
79714: EMPTY
79715: LIST
79716: LIST
79717: PUSH
79718: LD_INT 2
79720: NEG
79721: PUSH
79722: LD_INT 0
79724: PUSH
79725: EMPTY
79726: LIST
79727: LIST
79728: PUSH
79729: LD_INT 2
79731: NEG
79732: PUSH
79733: LD_INT 1
79735: NEG
79736: PUSH
79737: EMPTY
79738: LIST
79739: LIST
79740: PUSH
79741: LD_INT 2
79743: NEG
79744: PUSH
79745: LD_INT 2
79747: NEG
79748: PUSH
79749: EMPTY
79750: LIST
79751: LIST
79752: PUSH
79753: EMPTY
79754: LIST
79755: LIST
79756: LIST
79757: LIST
79758: LIST
79759: LIST
79760: LIST
79761: LIST
79762: LIST
79763: LIST
79764: LIST
79765: LIST
79766: LIST
79767: LIST
79768: LIST
79769: LIST
79770: LIST
79771: LIST
79772: LIST
79773: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79774: LD_ADDR_VAR 0 58
79778: PUSH
79779: LD_INT 0
79781: PUSH
79782: LD_INT 0
79784: PUSH
79785: EMPTY
79786: LIST
79787: LIST
79788: PUSH
79789: LD_INT 0
79791: PUSH
79792: LD_INT 1
79794: NEG
79795: PUSH
79796: EMPTY
79797: LIST
79798: LIST
79799: PUSH
79800: LD_INT 1
79802: PUSH
79803: LD_INT 0
79805: PUSH
79806: EMPTY
79807: LIST
79808: LIST
79809: PUSH
79810: LD_INT 1
79812: PUSH
79813: LD_INT 1
79815: PUSH
79816: EMPTY
79817: LIST
79818: LIST
79819: PUSH
79820: LD_INT 0
79822: PUSH
79823: LD_INT 1
79825: PUSH
79826: EMPTY
79827: LIST
79828: LIST
79829: PUSH
79830: LD_INT 1
79832: NEG
79833: PUSH
79834: LD_INT 0
79836: PUSH
79837: EMPTY
79838: LIST
79839: LIST
79840: PUSH
79841: LD_INT 1
79843: NEG
79844: PUSH
79845: LD_INT 1
79847: NEG
79848: PUSH
79849: EMPTY
79850: LIST
79851: LIST
79852: PUSH
79853: LD_INT 1
79855: NEG
79856: PUSH
79857: LD_INT 2
79859: NEG
79860: PUSH
79861: EMPTY
79862: LIST
79863: LIST
79864: PUSH
79865: LD_INT 0
79867: PUSH
79868: LD_INT 2
79870: NEG
79871: PUSH
79872: EMPTY
79873: LIST
79874: LIST
79875: PUSH
79876: LD_INT 1
79878: PUSH
79879: LD_INT 1
79881: NEG
79882: PUSH
79883: EMPTY
79884: LIST
79885: LIST
79886: PUSH
79887: LD_INT 2
79889: PUSH
79890: LD_INT 0
79892: PUSH
79893: EMPTY
79894: LIST
79895: LIST
79896: PUSH
79897: LD_INT 2
79899: PUSH
79900: LD_INT 1
79902: PUSH
79903: EMPTY
79904: LIST
79905: LIST
79906: PUSH
79907: LD_INT 2
79909: PUSH
79910: LD_INT 2
79912: PUSH
79913: EMPTY
79914: LIST
79915: LIST
79916: PUSH
79917: LD_INT 1
79919: PUSH
79920: LD_INT 2
79922: PUSH
79923: EMPTY
79924: LIST
79925: LIST
79926: PUSH
79927: LD_INT 0
79929: PUSH
79930: LD_INT 2
79932: PUSH
79933: EMPTY
79934: LIST
79935: LIST
79936: PUSH
79937: LD_INT 1
79939: NEG
79940: PUSH
79941: LD_INT 1
79943: PUSH
79944: EMPTY
79945: LIST
79946: LIST
79947: PUSH
79948: LD_INT 2
79950: NEG
79951: PUSH
79952: LD_INT 0
79954: PUSH
79955: EMPTY
79956: LIST
79957: LIST
79958: PUSH
79959: LD_INT 2
79961: NEG
79962: PUSH
79963: LD_INT 1
79965: NEG
79966: PUSH
79967: EMPTY
79968: LIST
79969: LIST
79970: PUSH
79971: LD_INT 2
79973: NEG
79974: PUSH
79975: LD_INT 2
79977: NEG
79978: PUSH
79979: EMPTY
79980: LIST
79981: LIST
79982: PUSH
79983: EMPTY
79984: LIST
79985: LIST
79986: LIST
79987: LIST
79988: LIST
79989: LIST
79990: LIST
79991: LIST
79992: LIST
79993: LIST
79994: LIST
79995: LIST
79996: LIST
79997: LIST
79998: LIST
79999: LIST
80000: LIST
80001: LIST
80002: LIST
80003: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80004: LD_ADDR_VAR 0 59
80008: PUSH
80009: LD_INT 0
80011: PUSH
80012: LD_INT 0
80014: PUSH
80015: EMPTY
80016: LIST
80017: LIST
80018: PUSH
80019: LD_INT 0
80021: PUSH
80022: LD_INT 1
80024: NEG
80025: PUSH
80026: EMPTY
80027: LIST
80028: LIST
80029: PUSH
80030: LD_INT 1
80032: PUSH
80033: LD_INT 0
80035: PUSH
80036: EMPTY
80037: LIST
80038: LIST
80039: PUSH
80040: LD_INT 1
80042: PUSH
80043: LD_INT 1
80045: PUSH
80046: EMPTY
80047: LIST
80048: LIST
80049: PUSH
80050: LD_INT 0
80052: PUSH
80053: LD_INT 1
80055: PUSH
80056: EMPTY
80057: LIST
80058: LIST
80059: PUSH
80060: LD_INT 1
80062: NEG
80063: PUSH
80064: LD_INT 0
80066: PUSH
80067: EMPTY
80068: LIST
80069: LIST
80070: PUSH
80071: LD_INT 1
80073: NEG
80074: PUSH
80075: LD_INT 1
80077: NEG
80078: PUSH
80079: EMPTY
80080: LIST
80081: LIST
80082: PUSH
80083: EMPTY
80084: LIST
80085: LIST
80086: LIST
80087: LIST
80088: LIST
80089: LIST
80090: LIST
80091: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80092: LD_ADDR_VAR 0 60
80096: PUSH
80097: LD_INT 0
80099: PUSH
80100: LD_INT 0
80102: PUSH
80103: EMPTY
80104: LIST
80105: LIST
80106: PUSH
80107: LD_INT 0
80109: PUSH
80110: LD_INT 1
80112: NEG
80113: PUSH
80114: EMPTY
80115: LIST
80116: LIST
80117: PUSH
80118: LD_INT 1
80120: PUSH
80121: LD_INT 0
80123: PUSH
80124: EMPTY
80125: LIST
80126: LIST
80127: PUSH
80128: LD_INT 1
80130: PUSH
80131: LD_INT 1
80133: PUSH
80134: EMPTY
80135: LIST
80136: LIST
80137: PUSH
80138: LD_INT 0
80140: PUSH
80141: LD_INT 1
80143: PUSH
80144: EMPTY
80145: LIST
80146: LIST
80147: PUSH
80148: LD_INT 1
80150: NEG
80151: PUSH
80152: LD_INT 0
80154: PUSH
80155: EMPTY
80156: LIST
80157: LIST
80158: PUSH
80159: LD_INT 1
80161: NEG
80162: PUSH
80163: LD_INT 1
80165: NEG
80166: PUSH
80167: EMPTY
80168: LIST
80169: LIST
80170: PUSH
80171: EMPTY
80172: LIST
80173: LIST
80174: LIST
80175: LIST
80176: LIST
80177: LIST
80178: LIST
80179: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80180: LD_ADDR_VAR 0 61
80184: PUSH
80185: LD_INT 0
80187: PUSH
80188: LD_INT 0
80190: PUSH
80191: EMPTY
80192: LIST
80193: LIST
80194: PUSH
80195: LD_INT 0
80197: PUSH
80198: LD_INT 1
80200: NEG
80201: PUSH
80202: EMPTY
80203: LIST
80204: LIST
80205: PUSH
80206: LD_INT 1
80208: PUSH
80209: LD_INT 0
80211: PUSH
80212: EMPTY
80213: LIST
80214: LIST
80215: PUSH
80216: LD_INT 1
80218: PUSH
80219: LD_INT 1
80221: PUSH
80222: EMPTY
80223: LIST
80224: LIST
80225: PUSH
80226: LD_INT 0
80228: PUSH
80229: LD_INT 1
80231: PUSH
80232: EMPTY
80233: LIST
80234: LIST
80235: PUSH
80236: LD_INT 1
80238: NEG
80239: PUSH
80240: LD_INT 0
80242: PUSH
80243: EMPTY
80244: LIST
80245: LIST
80246: PUSH
80247: LD_INT 1
80249: NEG
80250: PUSH
80251: LD_INT 1
80253: NEG
80254: PUSH
80255: EMPTY
80256: LIST
80257: LIST
80258: PUSH
80259: EMPTY
80260: LIST
80261: LIST
80262: LIST
80263: LIST
80264: LIST
80265: LIST
80266: LIST
80267: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80268: LD_ADDR_VAR 0 62
80272: PUSH
80273: LD_INT 0
80275: PUSH
80276: LD_INT 0
80278: PUSH
80279: EMPTY
80280: LIST
80281: LIST
80282: PUSH
80283: LD_INT 0
80285: PUSH
80286: LD_INT 1
80288: NEG
80289: PUSH
80290: EMPTY
80291: LIST
80292: LIST
80293: PUSH
80294: LD_INT 1
80296: PUSH
80297: LD_INT 0
80299: PUSH
80300: EMPTY
80301: LIST
80302: LIST
80303: PUSH
80304: LD_INT 1
80306: PUSH
80307: LD_INT 1
80309: PUSH
80310: EMPTY
80311: LIST
80312: LIST
80313: PUSH
80314: LD_INT 0
80316: PUSH
80317: LD_INT 1
80319: PUSH
80320: EMPTY
80321: LIST
80322: LIST
80323: PUSH
80324: LD_INT 1
80326: NEG
80327: PUSH
80328: LD_INT 0
80330: PUSH
80331: EMPTY
80332: LIST
80333: LIST
80334: PUSH
80335: LD_INT 1
80337: NEG
80338: PUSH
80339: LD_INT 1
80341: NEG
80342: PUSH
80343: EMPTY
80344: LIST
80345: LIST
80346: PUSH
80347: EMPTY
80348: LIST
80349: LIST
80350: LIST
80351: LIST
80352: LIST
80353: LIST
80354: LIST
80355: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80356: LD_ADDR_VAR 0 63
80360: PUSH
80361: LD_INT 0
80363: PUSH
80364: LD_INT 0
80366: PUSH
80367: EMPTY
80368: LIST
80369: LIST
80370: PUSH
80371: LD_INT 0
80373: PUSH
80374: LD_INT 1
80376: NEG
80377: PUSH
80378: EMPTY
80379: LIST
80380: LIST
80381: PUSH
80382: LD_INT 1
80384: PUSH
80385: LD_INT 0
80387: PUSH
80388: EMPTY
80389: LIST
80390: LIST
80391: PUSH
80392: LD_INT 1
80394: PUSH
80395: LD_INT 1
80397: PUSH
80398: EMPTY
80399: LIST
80400: LIST
80401: PUSH
80402: LD_INT 0
80404: PUSH
80405: LD_INT 1
80407: PUSH
80408: EMPTY
80409: LIST
80410: LIST
80411: PUSH
80412: LD_INT 1
80414: NEG
80415: PUSH
80416: LD_INT 0
80418: PUSH
80419: EMPTY
80420: LIST
80421: LIST
80422: PUSH
80423: LD_INT 1
80425: NEG
80426: PUSH
80427: LD_INT 1
80429: NEG
80430: PUSH
80431: EMPTY
80432: LIST
80433: LIST
80434: PUSH
80435: EMPTY
80436: LIST
80437: LIST
80438: LIST
80439: LIST
80440: LIST
80441: LIST
80442: LIST
80443: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80444: LD_ADDR_VAR 0 64
80448: PUSH
80449: LD_INT 0
80451: PUSH
80452: LD_INT 0
80454: PUSH
80455: EMPTY
80456: LIST
80457: LIST
80458: PUSH
80459: LD_INT 0
80461: PUSH
80462: LD_INT 1
80464: NEG
80465: PUSH
80466: EMPTY
80467: LIST
80468: LIST
80469: PUSH
80470: LD_INT 1
80472: PUSH
80473: LD_INT 0
80475: PUSH
80476: EMPTY
80477: LIST
80478: LIST
80479: PUSH
80480: LD_INT 1
80482: PUSH
80483: LD_INT 1
80485: PUSH
80486: EMPTY
80487: LIST
80488: LIST
80489: PUSH
80490: LD_INT 0
80492: PUSH
80493: LD_INT 1
80495: PUSH
80496: EMPTY
80497: LIST
80498: LIST
80499: PUSH
80500: LD_INT 1
80502: NEG
80503: PUSH
80504: LD_INT 0
80506: PUSH
80507: EMPTY
80508: LIST
80509: LIST
80510: PUSH
80511: LD_INT 1
80513: NEG
80514: PUSH
80515: LD_INT 1
80517: NEG
80518: PUSH
80519: EMPTY
80520: LIST
80521: LIST
80522: PUSH
80523: EMPTY
80524: LIST
80525: LIST
80526: LIST
80527: LIST
80528: LIST
80529: LIST
80530: LIST
80531: ST_TO_ADDR
// end ; 1 :
80532: GO 86429
80534: LD_INT 1
80536: DOUBLE
80537: EQUAL
80538: IFTRUE 80542
80540: GO 83165
80542: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
80543: LD_ADDR_VAR 0 11
80547: PUSH
80548: LD_INT 1
80550: NEG
80551: PUSH
80552: LD_INT 3
80554: NEG
80555: PUSH
80556: EMPTY
80557: LIST
80558: LIST
80559: PUSH
80560: LD_INT 0
80562: PUSH
80563: LD_INT 3
80565: NEG
80566: PUSH
80567: EMPTY
80568: LIST
80569: LIST
80570: PUSH
80571: LD_INT 1
80573: PUSH
80574: LD_INT 2
80576: NEG
80577: PUSH
80578: EMPTY
80579: LIST
80580: LIST
80581: PUSH
80582: EMPTY
80583: LIST
80584: LIST
80585: LIST
80586: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
80587: LD_ADDR_VAR 0 12
80591: PUSH
80592: LD_INT 2
80594: PUSH
80595: LD_INT 1
80597: NEG
80598: PUSH
80599: EMPTY
80600: LIST
80601: LIST
80602: PUSH
80603: LD_INT 3
80605: PUSH
80606: LD_INT 0
80608: PUSH
80609: EMPTY
80610: LIST
80611: LIST
80612: PUSH
80613: LD_INT 3
80615: PUSH
80616: LD_INT 1
80618: PUSH
80619: EMPTY
80620: LIST
80621: LIST
80622: PUSH
80623: EMPTY
80624: LIST
80625: LIST
80626: LIST
80627: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
80628: LD_ADDR_VAR 0 13
80632: PUSH
80633: LD_INT 3
80635: PUSH
80636: LD_INT 2
80638: PUSH
80639: EMPTY
80640: LIST
80641: LIST
80642: PUSH
80643: LD_INT 3
80645: PUSH
80646: LD_INT 3
80648: PUSH
80649: EMPTY
80650: LIST
80651: LIST
80652: PUSH
80653: LD_INT 2
80655: PUSH
80656: LD_INT 3
80658: PUSH
80659: EMPTY
80660: LIST
80661: LIST
80662: PUSH
80663: EMPTY
80664: LIST
80665: LIST
80666: LIST
80667: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
80668: LD_ADDR_VAR 0 14
80672: PUSH
80673: LD_INT 1
80675: PUSH
80676: LD_INT 3
80678: PUSH
80679: EMPTY
80680: LIST
80681: LIST
80682: PUSH
80683: LD_INT 0
80685: PUSH
80686: LD_INT 3
80688: PUSH
80689: EMPTY
80690: LIST
80691: LIST
80692: PUSH
80693: LD_INT 1
80695: NEG
80696: PUSH
80697: LD_INT 2
80699: PUSH
80700: EMPTY
80701: LIST
80702: LIST
80703: PUSH
80704: EMPTY
80705: LIST
80706: LIST
80707: LIST
80708: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
80709: LD_ADDR_VAR 0 15
80713: PUSH
80714: LD_INT 2
80716: NEG
80717: PUSH
80718: LD_INT 1
80720: PUSH
80721: EMPTY
80722: LIST
80723: LIST
80724: PUSH
80725: LD_INT 3
80727: NEG
80728: PUSH
80729: LD_INT 0
80731: PUSH
80732: EMPTY
80733: LIST
80734: LIST
80735: PUSH
80736: LD_INT 3
80738: NEG
80739: PUSH
80740: LD_INT 1
80742: NEG
80743: PUSH
80744: EMPTY
80745: LIST
80746: LIST
80747: PUSH
80748: EMPTY
80749: LIST
80750: LIST
80751: LIST
80752: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
80753: LD_ADDR_VAR 0 16
80757: PUSH
80758: LD_INT 2
80760: NEG
80761: PUSH
80762: LD_INT 3
80764: NEG
80765: PUSH
80766: EMPTY
80767: LIST
80768: LIST
80769: PUSH
80770: LD_INT 3
80772: NEG
80773: PUSH
80774: LD_INT 2
80776: NEG
80777: PUSH
80778: EMPTY
80779: LIST
80780: LIST
80781: PUSH
80782: LD_INT 3
80784: NEG
80785: PUSH
80786: LD_INT 3
80788: NEG
80789: PUSH
80790: EMPTY
80791: LIST
80792: LIST
80793: PUSH
80794: EMPTY
80795: LIST
80796: LIST
80797: LIST
80798: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
80799: LD_ADDR_VAR 0 17
80803: PUSH
80804: LD_INT 1
80806: NEG
80807: PUSH
80808: LD_INT 3
80810: NEG
80811: PUSH
80812: EMPTY
80813: LIST
80814: LIST
80815: PUSH
80816: LD_INT 0
80818: PUSH
80819: LD_INT 3
80821: NEG
80822: PUSH
80823: EMPTY
80824: LIST
80825: LIST
80826: PUSH
80827: LD_INT 1
80829: PUSH
80830: LD_INT 2
80832: NEG
80833: PUSH
80834: EMPTY
80835: LIST
80836: LIST
80837: PUSH
80838: EMPTY
80839: LIST
80840: LIST
80841: LIST
80842: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
80843: LD_ADDR_VAR 0 18
80847: PUSH
80848: LD_INT 2
80850: PUSH
80851: LD_INT 1
80853: NEG
80854: PUSH
80855: EMPTY
80856: LIST
80857: LIST
80858: PUSH
80859: LD_INT 3
80861: PUSH
80862: LD_INT 0
80864: PUSH
80865: EMPTY
80866: LIST
80867: LIST
80868: PUSH
80869: LD_INT 3
80871: PUSH
80872: LD_INT 1
80874: PUSH
80875: EMPTY
80876: LIST
80877: LIST
80878: PUSH
80879: EMPTY
80880: LIST
80881: LIST
80882: LIST
80883: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
80884: LD_ADDR_VAR 0 19
80888: PUSH
80889: LD_INT 3
80891: PUSH
80892: LD_INT 2
80894: PUSH
80895: EMPTY
80896: LIST
80897: LIST
80898: PUSH
80899: LD_INT 3
80901: PUSH
80902: LD_INT 3
80904: PUSH
80905: EMPTY
80906: LIST
80907: LIST
80908: PUSH
80909: LD_INT 2
80911: PUSH
80912: LD_INT 3
80914: PUSH
80915: EMPTY
80916: LIST
80917: LIST
80918: PUSH
80919: EMPTY
80920: LIST
80921: LIST
80922: LIST
80923: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
80924: LD_ADDR_VAR 0 20
80928: PUSH
80929: LD_INT 1
80931: PUSH
80932: LD_INT 3
80934: PUSH
80935: EMPTY
80936: LIST
80937: LIST
80938: PUSH
80939: LD_INT 0
80941: PUSH
80942: LD_INT 3
80944: PUSH
80945: EMPTY
80946: LIST
80947: LIST
80948: PUSH
80949: LD_INT 1
80951: NEG
80952: PUSH
80953: LD_INT 2
80955: PUSH
80956: EMPTY
80957: LIST
80958: LIST
80959: PUSH
80960: EMPTY
80961: LIST
80962: LIST
80963: LIST
80964: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
80965: LD_ADDR_VAR 0 21
80969: PUSH
80970: LD_INT 2
80972: NEG
80973: PUSH
80974: LD_INT 1
80976: PUSH
80977: EMPTY
80978: LIST
80979: LIST
80980: PUSH
80981: LD_INT 3
80983: NEG
80984: PUSH
80985: LD_INT 0
80987: PUSH
80988: EMPTY
80989: LIST
80990: LIST
80991: PUSH
80992: LD_INT 3
80994: NEG
80995: PUSH
80996: LD_INT 1
80998: NEG
80999: PUSH
81000: EMPTY
81001: LIST
81002: LIST
81003: PUSH
81004: EMPTY
81005: LIST
81006: LIST
81007: LIST
81008: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
81009: LD_ADDR_VAR 0 22
81013: PUSH
81014: LD_INT 2
81016: NEG
81017: PUSH
81018: LD_INT 3
81020: NEG
81021: PUSH
81022: EMPTY
81023: LIST
81024: LIST
81025: PUSH
81026: LD_INT 3
81028: NEG
81029: PUSH
81030: LD_INT 2
81032: NEG
81033: PUSH
81034: EMPTY
81035: LIST
81036: LIST
81037: PUSH
81038: LD_INT 3
81040: NEG
81041: PUSH
81042: LD_INT 3
81044: NEG
81045: PUSH
81046: EMPTY
81047: LIST
81048: LIST
81049: PUSH
81050: EMPTY
81051: LIST
81052: LIST
81053: LIST
81054: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
81055: LD_ADDR_VAR 0 23
81059: PUSH
81060: LD_INT 0
81062: PUSH
81063: LD_INT 3
81065: NEG
81066: PUSH
81067: EMPTY
81068: LIST
81069: LIST
81070: PUSH
81071: LD_INT 1
81073: NEG
81074: PUSH
81075: LD_INT 4
81077: NEG
81078: PUSH
81079: EMPTY
81080: LIST
81081: LIST
81082: PUSH
81083: LD_INT 1
81085: PUSH
81086: LD_INT 3
81088: NEG
81089: PUSH
81090: EMPTY
81091: LIST
81092: LIST
81093: PUSH
81094: EMPTY
81095: LIST
81096: LIST
81097: LIST
81098: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
81099: LD_ADDR_VAR 0 24
81103: PUSH
81104: LD_INT 3
81106: PUSH
81107: LD_INT 0
81109: PUSH
81110: EMPTY
81111: LIST
81112: LIST
81113: PUSH
81114: LD_INT 3
81116: PUSH
81117: LD_INT 1
81119: NEG
81120: PUSH
81121: EMPTY
81122: LIST
81123: LIST
81124: PUSH
81125: LD_INT 4
81127: PUSH
81128: LD_INT 1
81130: PUSH
81131: EMPTY
81132: LIST
81133: LIST
81134: PUSH
81135: EMPTY
81136: LIST
81137: LIST
81138: LIST
81139: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
81140: LD_ADDR_VAR 0 25
81144: PUSH
81145: LD_INT 3
81147: PUSH
81148: LD_INT 3
81150: PUSH
81151: EMPTY
81152: LIST
81153: LIST
81154: PUSH
81155: LD_INT 4
81157: PUSH
81158: LD_INT 3
81160: PUSH
81161: EMPTY
81162: LIST
81163: LIST
81164: PUSH
81165: LD_INT 3
81167: PUSH
81168: LD_INT 4
81170: PUSH
81171: EMPTY
81172: LIST
81173: LIST
81174: PUSH
81175: EMPTY
81176: LIST
81177: LIST
81178: LIST
81179: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
81180: LD_ADDR_VAR 0 26
81184: PUSH
81185: LD_INT 0
81187: PUSH
81188: LD_INT 3
81190: PUSH
81191: EMPTY
81192: LIST
81193: LIST
81194: PUSH
81195: LD_INT 1
81197: PUSH
81198: LD_INT 4
81200: PUSH
81201: EMPTY
81202: LIST
81203: LIST
81204: PUSH
81205: LD_INT 1
81207: NEG
81208: PUSH
81209: LD_INT 3
81211: PUSH
81212: EMPTY
81213: LIST
81214: LIST
81215: PUSH
81216: EMPTY
81217: LIST
81218: LIST
81219: LIST
81220: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
81221: LD_ADDR_VAR 0 27
81225: PUSH
81226: LD_INT 3
81228: NEG
81229: PUSH
81230: LD_INT 0
81232: PUSH
81233: EMPTY
81234: LIST
81235: LIST
81236: PUSH
81237: LD_INT 3
81239: NEG
81240: PUSH
81241: LD_INT 1
81243: PUSH
81244: EMPTY
81245: LIST
81246: LIST
81247: PUSH
81248: LD_INT 4
81250: NEG
81251: PUSH
81252: LD_INT 1
81254: NEG
81255: PUSH
81256: EMPTY
81257: LIST
81258: LIST
81259: PUSH
81260: EMPTY
81261: LIST
81262: LIST
81263: LIST
81264: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
81265: LD_ADDR_VAR 0 28
81269: PUSH
81270: LD_INT 3
81272: NEG
81273: PUSH
81274: LD_INT 3
81276: NEG
81277: PUSH
81278: EMPTY
81279: LIST
81280: LIST
81281: PUSH
81282: LD_INT 3
81284: NEG
81285: PUSH
81286: LD_INT 4
81288: NEG
81289: PUSH
81290: EMPTY
81291: LIST
81292: LIST
81293: PUSH
81294: LD_INT 4
81296: NEG
81297: PUSH
81298: LD_INT 3
81300: NEG
81301: PUSH
81302: EMPTY
81303: LIST
81304: LIST
81305: PUSH
81306: EMPTY
81307: LIST
81308: LIST
81309: LIST
81310: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
81311: LD_ADDR_VAR 0 29
81315: PUSH
81316: LD_INT 1
81318: NEG
81319: PUSH
81320: LD_INT 3
81322: NEG
81323: PUSH
81324: EMPTY
81325: LIST
81326: LIST
81327: PUSH
81328: LD_INT 0
81330: PUSH
81331: LD_INT 3
81333: NEG
81334: PUSH
81335: EMPTY
81336: LIST
81337: LIST
81338: PUSH
81339: LD_INT 1
81341: PUSH
81342: LD_INT 2
81344: NEG
81345: PUSH
81346: EMPTY
81347: LIST
81348: LIST
81349: PUSH
81350: LD_INT 1
81352: NEG
81353: PUSH
81354: LD_INT 4
81356: NEG
81357: PUSH
81358: EMPTY
81359: LIST
81360: LIST
81361: PUSH
81362: LD_INT 0
81364: PUSH
81365: LD_INT 4
81367: NEG
81368: PUSH
81369: EMPTY
81370: LIST
81371: LIST
81372: PUSH
81373: LD_INT 1
81375: PUSH
81376: LD_INT 3
81378: NEG
81379: PUSH
81380: EMPTY
81381: LIST
81382: LIST
81383: PUSH
81384: LD_INT 1
81386: NEG
81387: PUSH
81388: LD_INT 5
81390: NEG
81391: PUSH
81392: EMPTY
81393: LIST
81394: LIST
81395: PUSH
81396: LD_INT 0
81398: PUSH
81399: LD_INT 5
81401: NEG
81402: PUSH
81403: EMPTY
81404: LIST
81405: LIST
81406: PUSH
81407: LD_INT 1
81409: PUSH
81410: LD_INT 4
81412: NEG
81413: PUSH
81414: EMPTY
81415: LIST
81416: LIST
81417: PUSH
81418: LD_INT 1
81420: NEG
81421: PUSH
81422: LD_INT 6
81424: NEG
81425: PUSH
81426: EMPTY
81427: LIST
81428: LIST
81429: PUSH
81430: LD_INT 0
81432: PUSH
81433: LD_INT 6
81435: NEG
81436: PUSH
81437: EMPTY
81438: LIST
81439: LIST
81440: PUSH
81441: LD_INT 1
81443: PUSH
81444: LD_INT 5
81446: NEG
81447: PUSH
81448: EMPTY
81449: LIST
81450: LIST
81451: PUSH
81452: EMPTY
81453: LIST
81454: LIST
81455: LIST
81456: LIST
81457: LIST
81458: LIST
81459: LIST
81460: LIST
81461: LIST
81462: LIST
81463: LIST
81464: LIST
81465: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
81466: LD_ADDR_VAR 0 30
81470: PUSH
81471: LD_INT 2
81473: PUSH
81474: LD_INT 1
81476: NEG
81477: PUSH
81478: EMPTY
81479: LIST
81480: LIST
81481: PUSH
81482: LD_INT 3
81484: PUSH
81485: LD_INT 0
81487: PUSH
81488: EMPTY
81489: LIST
81490: LIST
81491: PUSH
81492: LD_INT 3
81494: PUSH
81495: LD_INT 1
81497: PUSH
81498: EMPTY
81499: LIST
81500: LIST
81501: PUSH
81502: LD_INT 3
81504: PUSH
81505: LD_INT 1
81507: NEG
81508: PUSH
81509: EMPTY
81510: LIST
81511: LIST
81512: PUSH
81513: LD_INT 4
81515: PUSH
81516: LD_INT 0
81518: PUSH
81519: EMPTY
81520: LIST
81521: LIST
81522: PUSH
81523: LD_INT 4
81525: PUSH
81526: LD_INT 1
81528: PUSH
81529: EMPTY
81530: LIST
81531: LIST
81532: PUSH
81533: LD_INT 4
81535: PUSH
81536: LD_INT 1
81538: NEG
81539: PUSH
81540: EMPTY
81541: LIST
81542: LIST
81543: PUSH
81544: LD_INT 5
81546: PUSH
81547: LD_INT 0
81549: PUSH
81550: EMPTY
81551: LIST
81552: LIST
81553: PUSH
81554: LD_INT 5
81556: PUSH
81557: LD_INT 1
81559: PUSH
81560: EMPTY
81561: LIST
81562: LIST
81563: PUSH
81564: LD_INT 5
81566: PUSH
81567: LD_INT 1
81569: NEG
81570: PUSH
81571: EMPTY
81572: LIST
81573: LIST
81574: PUSH
81575: LD_INT 6
81577: PUSH
81578: LD_INT 0
81580: PUSH
81581: EMPTY
81582: LIST
81583: LIST
81584: PUSH
81585: LD_INT 6
81587: PUSH
81588: LD_INT 1
81590: PUSH
81591: EMPTY
81592: LIST
81593: LIST
81594: PUSH
81595: EMPTY
81596: LIST
81597: LIST
81598: LIST
81599: LIST
81600: LIST
81601: LIST
81602: LIST
81603: LIST
81604: LIST
81605: LIST
81606: LIST
81607: LIST
81608: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
81609: LD_ADDR_VAR 0 31
81613: PUSH
81614: LD_INT 3
81616: PUSH
81617: LD_INT 2
81619: PUSH
81620: EMPTY
81621: LIST
81622: LIST
81623: PUSH
81624: LD_INT 3
81626: PUSH
81627: LD_INT 3
81629: PUSH
81630: EMPTY
81631: LIST
81632: LIST
81633: PUSH
81634: LD_INT 2
81636: PUSH
81637: LD_INT 3
81639: PUSH
81640: EMPTY
81641: LIST
81642: LIST
81643: PUSH
81644: LD_INT 4
81646: PUSH
81647: LD_INT 3
81649: PUSH
81650: EMPTY
81651: LIST
81652: LIST
81653: PUSH
81654: LD_INT 4
81656: PUSH
81657: LD_INT 4
81659: PUSH
81660: EMPTY
81661: LIST
81662: LIST
81663: PUSH
81664: LD_INT 3
81666: PUSH
81667: LD_INT 4
81669: PUSH
81670: EMPTY
81671: LIST
81672: LIST
81673: PUSH
81674: LD_INT 5
81676: PUSH
81677: LD_INT 4
81679: PUSH
81680: EMPTY
81681: LIST
81682: LIST
81683: PUSH
81684: LD_INT 5
81686: PUSH
81687: LD_INT 5
81689: PUSH
81690: EMPTY
81691: LIST
81692: LIST
81693: PUSH
81694: LD_INT 4
81696: PUSH
81697: LD_INT 5
81699: PUSH
81700: EMPTY
81701: LIST
81702: LIST
81703: PUSH
81704: LD_INT 6
81706: PUSH
81707: LD_INT 5
81709: PUSH
81710: EMPTY
81711: LIST
81712: LIST
81713: PUSH
81714: LD_INT 6
81716: PUSH
81717: LD_INT 6
81719: PUSH
81720: EMPTY
81721: LIST
81722: LIST
81723: PUSH
81724: LD_INT 5
81726: PUSH
81727: LD_INT 6
81729: PUSH
81730: EMPTY
81731: LIST
81732: LIST
81733: PUSH
81734: EMPTY
81735: LIST
81736: LIST
81737: LIST
81738: LIST
81739: LIST
81740: LIST
81741: LIST
81742: LIST
81743: LIST
81744: LIST
81745: LIST
81746: LIST
81747: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
81748: LD_ADDR_VAR 0 32
81752: PUSH
81753: LD_INT 1
81755: PUSH
81756: LD_INT 3
81758: PUSH
81759: EMPTY
81760: LIST
81761: LIST
81762: PUSH
81763: LD_INT 0
81765: PUSH
81766: LD_INT 3
81768: PUSH
81769: EMPTY
81770: LIST
81771: LIST
81772: PUSH
81773: LD_INT 1
81775: NEG
81776: PUSH
81777: LD_INT 2
81779: PUSH
81780: EMPTY
81781: LIST
81782: LIST
81783: PUSH
81784: LD_INT 1
81786: PUSH
81787: LD_INT 4
81789: PUSH
81790: EMPTY
81791: LIST
81792: LIST
81793: PUSH
81794: LD_INT 0
81796: PUSH
81797: LD_INT 4
81799: PUSH
81800: EMPTY
81801: LIST
81802: LIST
81803: PUSH
81804: LD_INT 1
81806: NEG
81807: PUSH
81808: LD_INT 3
81810: PUSH
81811: EMPTY
81812: LIST
81813: LIST
81814: PUSH
81815: LD_INT 1
81817: PUSH
81818: LD_INT 5
81820: PUSH
81821: EMPTY
81822: LIST
81823: LIST
81824: PUSH
81825: LD_INT 0
81827: PUSH
81828: LD_INT 5
81830: PUSH
81831: EMPTY
81832: LIST
81833: LIST
81834: PUSH
81835: LD_INT 1
81837: NEG
81838: PUSH
81839: LD_INT 4
81841: PUSH
81842: EMPTY
81843: LIST
81844: LIST
81845: PUSH
81846: LD_INT 1
81848: PUSH
81849: LD_INT 6
81851: PUSH
81852: EMPTY
81853: LIST
81854: LIST
81855: PUSH
81856: LD_INT 0
81858: PUSH
81859: LD_INT 6
81861: PUSH
81862: EMPTY
81863: LIST
81864: LIST
81865: PUSH
81866: LD_INT 1
81868: NEG
81869: PUSH
81870: LD_INT 5
81872: PUSH
81873: EMPTY
81874: LIST
81875: LIST
81876: PUSH
81877: EMPTY
81878: LIST
81879: LIST
81880: LIST
81881: LIST
81882: LIST
81883: LIST
81884: LIST
81885: LIST
81886: LIST
81887: LIST
81888: LIST
81889: LIST
81890: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
81891: LD_ADDR_VAR 0 33
81895: PUSH
81896: LD_INT 2
81898: NEG
81899: PUSH
81900: LD_INT 1
81902: PUSH
81903: EMPTY
81904: LIST
81905: LIST
81906: PUSH
81907: LD_INT 3
81909: NEG
81910: PUSH
81911: LD_INT 0
81913: PUSH
81914: EMPTY
81915: LIST
81916: LIST
81917: PUSH
81918: LD_INT 3
81920: NEG
81921: PUSH
81922: LD_INT 1
81924: NEG
81925: PUSH
81926: EMPTY
81927: LIST
81928: LIST
81929: PUSH
81930: LD_INT 3
81932: NEG
81933: PUSH
81934: LD_INT 1
81936: PUSH
81937: EMPTY
81938: LIST
81939: LIST
81940: PUSH
81941: LD_INT 4
81943: NEG
81944: PUSH
81945: LD_INT 0
81947: PUSH
81948: EMPTY
81949: LIST
81950: LIST
81951: PUSH
81952: LD_INT 4
81954: NEG
81955: PUSH
81956: LD_INT 1
81958: NEG
81959: PUSH
81960: EMPTY
81961: LIST
81962: LIST
81963: PUSH
81964: LD_INT 4
81966: NEG
81967: PUSH
81968: LD_INT 1
81970: PUSH
81971: EMPTY
81972: LIST
81973: LIST
81974: PUSH
81975: LD_INT 5
81977: NEG
81978: PUSH
81979: LD_INT 0
81981: PUSH
81982: EMPTY
81983: LIST
81984: LIST
81985: PUSH
81986: LD_INT 5
81988: NEG
81989: PUSH
81990: LD_INT 1
81992: NEG
81993: PUSH
81994: EMPTY
81995: LIST
81996: LIST
81997: PUSH
81998: LD_INT 5
82000: NEG
82001: PUSH
82002: LD_INT 1
82004: PUSH
82005: EMPTY
82006: LIST
82007: LIST
82008: PUSH
82009: LD_INT 6
82011: NEG
82012: PUSH
82013: LD_INT 0
82015: PUSH
82016: EMPTY
82017: LIST
82018: LIST
82019: PUSH
82020: LD_INT 6
82022: NEG
82023: PUSH
82024: LD_INT 1
82026: NEG
82027: PUSH
82028: EMPTY
82029: LIST
82030: LIST
82031: PUSH
82032: EMPTY
82033: LIST
82034: LIST
82035: LIST
82036: LIST
82037: LIST
82038: LIST
82039: LIST
82040: LIST
82041: LIST
82042: LIST
82043: LIST
82044: LIST
82045: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
82046: LD_ADDR_VAR 0 34
82050: PUSH
82051: LD_INT 2
82053: NEG
82054: PUSH
82055: LD_INT 3
82057: NEG
82058: PUSH
82059: EMPTY
82060: LIST
82061: LIST
82062: PUSH
82063: LD_INT 3
82065: NEG
82066: PUSH
82067: LD_INT 2
82069: NEG
82070: PUSH
82071: EMPTY
82072: LIST
82073: LIST
82074: PUSH
82075: LD_INT 3
82077: NEG
82078: PUSH
82079: LD_INT 3
82081: NEG
82082: PUSH
82083: EMPTY
82084: LIST
82085: LIST
82086: PUSH
82087: LD_INT 3
82089: NEG
82090: PUSH
82091: LD_INT 4
82093: NEG
82094: PUSH
82095: EMPTY
82096: LIST
82097: LIST
82098: PUSH
82099: LD_INT 4
82101: NEG
82102: PUSH
82103: LD_INT 3
82105: NEG
82106: PUSH
82107: EMPTY
82108: LIST
82109: LIST
82110: PUSH
82111: LD_INT 4
82113: NEG
82114: PUSH
82115: LD_INT 4
82117: NEG
82118: PUSH
82119: EMPTY
82120: LIST
82121: LIST
82122: PUSH
82123: LD_INT 4
82125: NEG
82126: PUSH
82127: LD_INT 5
82129: NEG
82130: PUSH
82131: EMPTY
82132: LIST
82133: LIST
82134: PUSH
82135: LD_INT 5
82137: NEG
82138: PUSH
82139: LD_INT 4
82141: NEG
82142: PUSH
82143: EMPTY
82144: LIST
82145: LIST
82146: PUSH
82147: LD_INT 5
82149: NEG
82150: PUSH
82151: LD_INT 5
82153: NEG
82154: PUSH
82155: EMPTY
82156: LIST
82157: LIST
82158: PUSH
82159: LD_INT 5
82161: NEG
82162: PUSH
82163: LD_INT 6
82165: NEG
82166: PUSH
82167: EMPTY
82168: LIST
82169: LIST
82170: PUSH
82171: LD_INT 6
82173: NEG
82174: PUSH
82175: LD_INT 5
82177: NEG
82178: PUSH
82179: EMPTY
82180: LIST
82181: LIST
82182: PUSH
82183: LD_INT 6
82185: NEG
82186: PUSH
82187: LD_INT 6
82189: NEG
82190: PUSH
82191: EMPTY
82192: LIST
82193: LIST
82194: PUSH
82195: EMPTY
82196: LIST
82197: LIST
82198: LIST
82199: LIST
82200: LIST
82201: LIST
82202: LIST
82203: LIST
82204: LIST
82205: LIST
82206: LIST
82207: LIST
82208: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
82209: LD_ADDR_VAR 0 41
82213: PUSH
82214: LD_INT 0
82216: PUSH
82217: LD_INT 2
82219: NEG
82220: PUSH
82221: EMPTY
82222: LIST
82223: LIST
82224: PUSH
82225: LD_INT 1
82227: NEG
82228: PUSH
82229: LD_INT 3
82231: NEG
82232: PUSH
82233: EMPTY
82234: LIST
82235: LIST
82236: PUSH
82237: LD_INT 1
82239: PUSH
82240: LD_INT 2
82242: NEG
82243: PUSH
82244: EMPTY
82245: LIST
82246: LIST
82247: PUSH
82248: EMPTY
82249: LIST
82250: LIST
82251: LIST
82252: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
82253: LD_ADDR_VAR 0 42
82257: PUSH
82258: LD_INT 2
82260: PUSH
82261: LD_INT 0
82263: PUSH
82264: EMPTY
82265: LIST
82266: LIST
82267: PUSH
82268: LD_INT 2
82270: PUSH
82271: LD_INT 1
82273: NEG
82274: PUSH
82275: EMPTY
82276: LIST
82277: LIST
82278: PUSH
82279: LD_INT 3
82281: PUSH
82282: LD_INT 1
82284: PUSH
82285: EMPTY
82286: LIST
82287: LIST
82288: PUSH
82289: EMPTY
82290: LIST
82291: LIST
82292: LIST
82293: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
82294: LD_ADDR_VAR 0 43
82298: PUSH
82299: LD_INT 2
82301: PUSH
82302: LD_INT 2
82304: PUSH
82305: EMPTY
82306: LIST
82307: LIST
82308: PUSH
82309: LD_INT 3
82311: PUSH
82312: LD_INT 2
82314: PUSH
82315: EMPTY
82316: LIST
82317: LIST
82318: PUSH
82319: LD_INT 2
82321: PUSH
82322: LD_INT 3
82324: PUSH
82325: EMPTY
82326: LIST
82327: LIST
82328: PUSH
82329: EMPTY
82330: LIST
82331: LIST
82332: LIST
82333: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
82334: LD_ADDR_VAR 0 44
82338: PUSH
82339: LD_INT 0
82341: PUSH
82342: LD_INT 2
82344: PUSH
82345: EMPTY
82346: LIST
82347: LIST
82348: PUSH
82349: LD_INT 1
82351: PUSH
82352: LD_INT 3
82354: PUSH
82355: EMPTY
82356: LIST
82357: LIST
82358: PUSH
82359: LD_INT 1
82361: NEG
82362: PUSH
82363: LD_INT 2
82365: PUSH
82366: EMPTY
82367: LIST
82368: LIST
82369: PUSH
82370: EMPTY
82371: LIST
82372: LIST
82373: LIST
82374: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
82375: LD_ADDR_VAR 0 45
82379: PUSH
82380: LD_INT 2
82382: NEG
82383: PUSH
82384: LD_INT 0
82386: PUSH
82387: EMPTY
82388: LIST
82389: LIST
82390: PUSH
82391: LD_INT 2
82393: NEG
82394: PUSH
82395: LD_INT 1
82397: PUSH
82398: EMPTY
82399: LIST
82400: LIST
82401: PUSH
82402: LD_INT 3
82404: NEG
82405: PUSH
82406: LD_INT 1
82408: NEG
82409: PUSH
82410: EMPTY
82411: LIST
82412: LIST
82413: PUSH
82414: EMPTY
82415: LIST
82416: LIST
82417: LIST
82418: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
82419: LD_ADDR_VAR 0 46
82423: PUSH
82424: LD_INT 2
82426: NEG
82427: PUSH
82428: LD_INT 2
82430: NEG
82431: PUSH
82432: EMPTY
82433: LIST
82434: LIST
82435: PUSH
82436: LD_INT 2
82438: NEG
82439: PUSH
82440: LD_INT 3
82442: NEG
82443: PUSH
82444: EMPTY
82445: LIST
82446: LIST
82447: PUSH
82448: LD_INT 3
82450: NEG
82451: PUSH
82452: LD_INT 2
82454: NEG
82455: PUSH
82456: EMPTY
82457: LIST
82458: LIST
82459: PUSH
82460: EMPTY
82461: LIST
82462: LIST
82463: LIST
82464: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
82465: LD_ADDR_VAR 0 47
82469: PUSH
82470: LD_INT 2
82472: NEG
82473: PUSH
82474: LD_INT 3
82476: NEG
82477: PUSH
82478: EMPTY
82479: LIST
82480: LIST
82481: PUSH
82482: LD_INT 1
82484: NEG
82485: PUSH
82486: LD_INT 3
82488: NEG
82489: PUSH
82490: EMPTY
82491: LIST
82492: LIST
82493: PUSH
82494: EMPTY
82495: LIST
82496: LIST
82497: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
82498: LD_ADDR_VAR 0 48
82502: PUSH
82503: LD_INT 1
82505: PUSH
82506: LD_INT 2
82508: NEG
82509: PUSH
82510: EMPTY
82511: LIST
82512: LIST
82513: PUSH
82514: LD_INT 2
82516: PUSH
82517: LD_INT 1
82519: NEG
82520: PUSH
82521: EMPTY
82522: LIST
82523: LIST
82524: PUSH
82525: EMPTY
82526: LIST
82527: LIST
82528: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
82529: LD_ADDR_VAR 0 49
82533: PUSH
82534: LD_INT 3
82536: PUSH
82537: LD_INT 1
82539: PUSH
82540: EMPTY
82541: LIST
82542: LIST
82543: PUSH
82544: LD_INT 3
82546: PUSH
82547: LD_INT 2
82549: PUSH
82550: EMPTY
82551: LIST
82552: LIST
82553: PUSH
82554: EMPTY
82555: LIST
82556: LIST
82557: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
82558: LD_ADDR_VAR 0 50
82562: PUSH
82563: LD_INT 2
82565: PUSH
82566: LD_INT 3
82568: PUSH
82569: EMPTY
82570: LIST
82571: LIST
82572: PUSH
82573: LD_INT 1
82575: PUSH
82576: LD_INT 3
82578: PUSH
82579: EMPTY
82580: LIST
82581: LIST
82582: PUSH
82583: EMPTY
82584: LIST
82585: LIST
82586: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
82587: LD_ADDR_VAR 0 51
82591: PUSH
82592: LD_INT 1
82594: NEG
82595: PUSH
82596: LD_INT 2
82598: PUSH
82599: EMPTY
82600: LIST
82601: LIST
82602: PUSH
82603: LD_INT 2
82605: NEG
82606: PUSH
82607: LD_INT 1
82609: PUSH
82610: EMPTY
82611: LIST
82612: LIST
82613: PUSH
82614: EMPTY
82615: LIST
82616: LIST
82617: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
82618: LD_ADDR_VAR 0 52
82622: PUSH
82623: LD_INT 3
82625: NEG
82626: PUSH
82627: LD_INT 1
82629: NEG
82630: PUSH
82631: EMPTY
82632: LIST
82633: LIST
82634: PUSH
82635: LD_INT 3
82637: NEG
82638: PUSH
82639: LD_INT 2
82641: NEG
82642: PUSH
82643: EMPTY
82644: LIST
82645: LIST
82646: PUSH
82647: EMPTY
82648: LIST
82649: LIST
82650: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
82651: LD_ADDR_VAR 0 53
82655: PUSH
82656: LD_INT 1
82658: NEG
82659: PUSH
82660: LD_INT 3
82662: NEG
82663: PUSH
82664: EMPTY
82665: LIST
82666: LIST
82667: PUSH
82668: LD_INT 0
82670: PUSH
82671: LD_INT 3
82673: NEG
82674: PUSH
82675: EMPTY
82676: LIST
82677: LIST
82678: PUSH
82679: LD_INT 1
82681: PUSH
82682: LD_INT 2
82684: NEG
82685: PUSH
82686: EMPTY
82687: LIST
82688: LIST
82689: PUSH
82690: EMPTY
82691: LIST
82692: LIST
82693: LIST
82694: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
82695: LD_ADDR_VAR 0 54
82699: PUSH
82700: LD_INT 2
82702: PUSH
82703: LD_INT 1
82705: NEG
82706: PUSH
82707: EMPTY
82708: LIST
82709: LIST
82710: PUSH
82711: LD_INT 3
82713: PUSH
82714: LD_INT 0
82716: PUSH
82717: EMPTY
82718: LIST
82719: LIST
82720: PUSH
82721: LD_INT 3
82723: PUSH
82724: LD_INT 1
82726: PUSH
82727: EMPTY
82728: LIST
82729: LIST
82730: PUSH
82731: EMPTY
82732: LIST
82733: LIST
82734: LIST
82735: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
82736: LD_ADDR_VAR 0 55
82740: PUSH
82741: LD_INT 3
82743: PUSH
82744: LD_INT 2
82746: PUSH
82747: EMPTY
82748: LIST
82749: LIST
82750: PUSH
82751: LD_INT 3
82753: PUSH
82754: LD_INT 3
82756: PUSH
82757: EMPTY
82758: LIST
82759: LIST
82760: PUSH
82761: LD_INT 2
82763: PUSH
82764: LD_INT 3
82766: PUSH
82767: EMPTY
82768: LIST
82769: LIST
82770: PUSH
82771: EMPTY
82772: LIST
82773: LIST
82774: LIST
82775: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
82776: LD_ADDR_VAR 0 56
82780: PUSH
82781: LD_INT 1
82783: PUSH
82784: LD_INT 3
82786: PUSH
82787: EMPTY
82788: LIST
82789: LIST
82790: PUSH
82791: LD_INT 0
82793: PUSH
82794: LD_INT 3
82796: PUSH
82797: EMPTY
82798: LIST
82799: LIST
82800: PUSH
82801: LD_INT 1
82803: NEG
82804: PUSH
82805: LD_INT 2
82807: PUSH
82808: EMPTY
82809: LIST
82810: LIST
82811: PUSH
82812: EMPTY
82813: LIST
82814: LIST
82815: LIST
82816: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
82817: LD_ADDR_VAR 0 57
82821: PUSH
82822: LD_INT 2
82824: NEG
82825: PUSH
82826: LD_INT 1
82828: PUSH
82829: EMPTY
82830: LIST
82831: LIST
82832: PUSH
82833: LD_INT 3
82835: NEG
82836: PUSH
82837: LD_INT 0
82839: PUSH
82840: EMPTY
82841: LIST
82842: LIST
82843: PUSH
82844: LD_INT 3
82846: NEG
82847: PUSH
82848: LD_INT 1
82850: NEG
82851: PUSH
82852: EMPTY
82853: LIST
82854: LIST
82855: PUSH
82856: EMPTY
82857: LIST
82858: LIST
82859: LIST
82860: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
82861: LD_ADDR_VAR 0 58
82865: PUSH
82866: LD_INT 2
82868: NEG
82869: PUSH
82870: LD_INT 3
82872: NEG
82873: PUSH
82874: EMPTY
82875: LIST
82876: LIST
82877: PUSH
82878: LD_INT 3
82880: NEG
82881: PUSH
82882: LD_INT 2
82884: NEG
82885: PUSH
82886: EMPTY
82887: LIST
82888: LIST
82889: PUSH
82890: LD_INT 3
82892: NEG
82893: PUSH
82894: LD_INT 3
82896: NEG
82897: PUSH
82898: EMPTY
82899: LIST
82900: LIST
82901: PUSH
82902: EMPTY
82903: LIST
82904: LIST
82905: LIST
82906: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
82907: LD_ADDR_VAR 0 59
82911: PUSH
82912: LD_INT 1
82914: NEG
82915: PUSH
82916: LD_INT 2
82918: NEG
82919: PUSH
82920: EMPTY
82921: LIST
82922: LIST
82923: PUSH
82924: LD_INT 0
82926: PUSH
82927: LD_INT 2
82929: NEG
82930: PUSH
82931: EMPTY
82932: LIST
82933: LIST
82934: PUSH
82935: LD_INT 1
82937: PUSH
82938: LD_INT 1
82940: NEG
82941: PUSH
82942: EMPTY
82943: LIST
82944: LIST
82945: PUSH
82946: EMPTY
82947: LIST
82948: LIST
82949: LIST
82950: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
82951: LD_ADDR_VAR 0 60
82955: PUSH
82956: LD_INT 1
82958: PUSH
82959: LD_INT 1
82961: NEG
82962: PUSH
82963: EMPTY
82964: LIST
82965: LIST
82966: PUSH
82967: LD_INT 2
82969: PUSH
82970: LD_INT 0
82972: PUSH
82973: EMPTY
82974: LIST
82975: LIST
82976: PUSH
82977: LD_INT 2
82979: PUSH
82980: LD_INT 1
82982: PUSH
82983: EMPTY
82984: LIST
82985: LIST
82986: PUSH
82987: EMPTY
82988: LIST
82989: LIST
82990: LIST
82991: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
82992: LD_ADDR_VAR 0 61
82996: PUSH
82997: LD_INT 2
82999: PUSH
83000: LD_INT 1
83002: PUSH
83003: EMPTY
83004: LIST
83005: LIST
83006: PUSH
83007: LD_INT 2
83009: PUSH
83010: LD_INT 2
83012: PUSH
83013: EMPTY
83014: LIST
83015: LIST
83016: PUSH
83017: LD_INT 1
83019: PUSH
83020: LD_INT 2
83022: PUSH
83023: EMPTY
83024: LIST
83025: LIST
83026: PUSH
83027: EMPTY
83028: LIST
83029: LIST
83030: LIST
83031: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
83032: LD_ADDR_VAR 0 62
83036: PUSH
83037: LD_INT 1
83039: PUSH
83040: LD_INT 2
83042: PUSH
83043: EMPTY
83044: LIST
83045: LIST
83046: PUSH
83047: LD_INT 0
83049: PUSH
83050: LD_INT 2
83052: PUSH
83053: EMPTY
83054: LIST
83055: LIST
83056: PUSH
83057: LD_INT 1
83059: NEG
83060: PUSH
83061: LD_INT 1
83063: PUSH
83064: EMPTY
83065: LIST
83066: LIST
83067: PUSH
83068: EMPTY
83069: LIST
83070: LIST
83071: LIST
83072: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
83073: LD_ADDR_VAR 0 63
83077: PUSH
83078: LD_INT 1
83080: NEG
83081: PUSH
83082: LD_INT 1
83084: PUSH
83085: EMPTY
83086: LIST
83087: LIST
83088: PUSH
83089: LD_INT 2
83091: NEG
83092: PUSH
83093: LD_INT 0
83095: PUSH
83096: EMPTY
83097: LIST
83098: LIST
83099: PUSH
83100: LD_INT 2
83102: NEG
83103: PUSH
83104: LD_INT 1
83106: NEG
83107: PUSH
83108: EMPTY
83109: LIST
83110: LIST
83111: PUSH
83112: EMPTY
83113: LIST
83114: LIST
83115: LIST
83116: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
83117: LD_ADDR_VAR 0 64
83121: PUSH
83122: LD_INT 1
83124: NEG
83125: PUSH
83126: LD_INT 2
83128: NEG
83129: PUSH
83130: EMPTY
83131: LIST
83132: LIST
83133: PUSH
83134: LD_INT 2
83136: NEG
83137: PUSH
83138: LD_INT 1
83140: NEG
83141: PUSH
83142: EMPTY
83143: LIST
83144: LIST
83145: PUSH
83146: LD_INT 2
83148: NEG
83149: PUSH
83150: LD_INT 2
83152: NEG
83153: PUSH
83154: EMPTY
83155: LIST
83156: LIST
83157: PUSH
83158: EMPTY
83159: LIST
83160: LIST
83161: LIST
83162: ST_TO_ADDR
// end ; 2 :
83163: GO 86429
83165: LD_INT 2
83167: DOUBLE
83168: EQUAL
83169: IFTRUE 83173
83171: GO 86428
83173: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
83174: LD_ADDR_VAR 0 29
83178: PUSH
83179: LD_INT 4
83181: PUSH
83182: LD_INT 0
83184: PUSH
83185: EMPTY
83186: LIST
83187: LIST
83188: PUSH
83189: LD_INT 4
83191: PUSH
83192: LD_INT 1
83194: NEG
83195: PUSH
83196: EMPTY
83197: LIST
83198: LIST
83199: PUSH
83200: LD_INT 5
83202: PUSH
83203: LD_INT 0
83205: PUSH
83206: EMPTY
83207: LIST
83208: LIST
83209: PUSH
83210: LD_INT 5
83212: PUSH
83213: LD_INT 1
83215: PUSH
83216: EMPTY
83217: LIST
83218: LIST
83219: PUSH
83220: LD_INT 4
83222: PUSH
83223: LD_INT 1
83225: PUSH
83226: EMPTY
83227: LIST
83228: LIST
83229: PUSH
83230: LD_INT 3
83232: PUSH
83233: LD_INT 0
83235: PUSH
83236: EMPTY
83237: LIST
83238: LIST
83239: PUSH
83240: LD_INT 3
83242: PUSH
83243: LD_INT 1
83245: NEG
83246: PUSH
83247: EMPTY
83248: LIST
83249: LIST
83250: PUSH
83251: LD_INT 3
83253: PUSH
83254: LD_INT 2
83256: NEG
83257: PUSH
83258: EMPTY
83259: LIST
83260: LIST
83261: PUSH
83262: LD_INT 5
83264: PUSH
83265: LD_INT 2
83267: PUSH
83268: EMPTY
83269: LIST
83270: LIST
83271: PUSH
83272: LD_INT 3
83274: PUSH
83275: LD_INT 3
83277: PUSH
83278: EMPTY
83279: LIST
83280: LIST
83281: PUSH
83282: LD_INT 3
83284: PUSH
83285: LD_INT 2
83287: PUSH
83288: EMPTY
83289: LIST
83290: LIST
83291: PUSH
83292: LD_INT 4
83294: PUSH
83295: LD_INT 3
83297: PUSH
83298: EMPTY
83299: LIST
83300: LIST
83301: PUSH
83302: LD_INT 4
83304: PUSH
83305: LD_INT 4
83307: PUSH
83308: EMPTY
83309: LIST
83310: LIST
83311: PUSH
83312: LD_INT 3
83314: PUSH
83315: LD_INT 4
83317: PUSH
83318: EMPTY
83319: LIST
83320: LIST
83321: PUSH
83322: LD_INT 2
83324: PUSH
83325: LD_INT 3
83327: PUSH
83328: EMPTY
83329: LIST
83330: LIST
83331: PUSH
83332: LD_INT 2
83334: PUSH
83335: LD_INT 2
83337: PUSH
83338: EMPTY
83339: LIST
83340: LIST
83341: PUSH
83342: LD_INT 4
83344: PUSH
83345: LD_INT 2
83347: PUSH
83348: EMPTY
83349: LIST
83350: LIST
83351: PUSH
83352: LD_INT 2
83354: PUSH
83355: LD_INT 4
83357: PUSH
83358: EMPTY
83359: LIST
83360: LIST
83361: PUSH
83362: LD_INT 0
83364: PUSH
83365: LD_INT 4
83367: PUSH
83368: EMPTY
83369: LIST
83370: LIST
83371: PUSH
83372: LD_INT 0
83374: PUSH
83375: LD_INT 3
83377: PUSH
83378: EMPTY
83379: LIST
83380: LIST
83381: PUSH
83382: LD_INT 1
83384: PUSH
83385: LD_INT 4
83387: PUSH
83388: EMPTY
83389: LIST
83390: LIST
83391: PUSH
83392: LD_INT 1
83394: PUSH
83395: LD_INT 5
83397: PUSH
83398: EMPTY
83399: LIST
83400: LIST
83401: PUSH
83402: LD_INT 0
83404: PUSH
83405: LD_INT 5
83407: PUSH
83408: EMPTY
83409: LIST
83410: LIST
83411: PUSH
83412: LD_INT 1
83414: NEG
83415: PUSH
83416: LD_INT 4
83418: PUSH
83419: EMPTY
83420: LIST
83421: LIST
83422: PUSH
83423: LD_INT 1
83425: NEG
83426: PUSH
83427: LD_INT 3
83429: PUSH
83430: EMPTY
83431: LIST
83432: LIST
83433: PUSH
83434: LD_INT 2
83436: PUSH
83437: LD_INT 5
83439: PUSH
83440: EMPTY
83441: LIST
83442: LIST
83443: PUSH
83444: LD_INT 2
83446: NEG
83447: PUSH
83448: LD_INT 3
83450: PUSH
83451: EMPTY
83452: LIST
83453: LIST
83454: PUSH
83455: LD_INT 3
83457: NEG
83458: PUSH
83459: LD_INT 0
83461: PUSH
83462: EMPTY
83463: LIST
83464: LIST
83465: PUSH
83466: LD_INT 3
83468: NEG
83469: PUSH
83470: LD_INT 1
83472: NEG
83473: PUSH
83474: EMPTY
83475: LIST
83476: LIST
83477: PUSH
83478: LD_INT 2
83480: NEG
83481: PUSH
83482: LD_INT 0
83484: PUSH
83485: EMPTY
83486: LIST
83487: LIST
83488: PUSH
83489: LD_INT 2
83491: NEG
83492: PUSH
83493: LD_INT 1
83495: PUSH
83496: EMPTY
83497: LIST
83498: LIST
83499: PUSH
83500: LD_INT 3
83502: NEG
83503: PUSH
83504: LD_INT 1
83506: PUSH
83507: EMPTY
83508: LIST
83509: LIST
83510: PUSH
83511: LD_INT 4
83513: NEG
83514: PUSH
83515: LD_INT 0
83517: PUSH
83518: EMPTY
83519: LIST
83520: LIST
83521: PUSH
83522: LD_INT 4
83524: NEG
83525: PUSH
83526: LD_INT 1
83528: NEG
83529: PUSH
83530: EMPTY
83531: LIST
83532: LIST
83533: PUSH
83534: LD_INT 4
83536: NEG
83537: PUSH
83538: LD_INT 2
83540: NEG
83541: PUSH
83542: EMPTY
83543: LIST
83544: LIST
83545: PUSH
83546: LD_INT 2
83548: NEG
83549: PUSH
83550: LD_INT 2
83552: PUSH
83553: EMPTY
83554: LIST
83555: LIST
83556: PUSH
83557: LD_INT 4
83559: NEG
83560: PUSH
83561: LD_INT 4
83563: NEG
83564: PUSH
83565: EMPTY
83566: LIST
83567: LIST
83568: PUSH
83569: LD_INT 4
83571: NEG
83572: PUSH
83573: LD_INT 5
83575: NEG
83576: PUSH
83577: EMPTY
83578: LIST
83579: LIST
83580: PUSH
83581: LD_INT 3
83583: NEG
83584: PUSH
83585: LD_INT 4
83587: NEG
83588: PUSH
83589: EMPTY
83590: LIST
83591: LIST
83592: PUSH
83593: LD_INT 3
83595: NEG
83596: PUSH
83597: LD_INT 3
83599: NEG
83600: PUSH
83601: EMPTY
83602: LIST
83603: LIST
83604: PUSH
83605: LD_INT 4
83607: NEG
83608: PUSH
83609: LD_INT 3
83611: NEG
83612: PUSH
83613: EMPTY
83614: LIST
83615: LIST
83616: PUSH
83617: LD_INT 5
83619: NEG
83620: PUSH
83621: LD_INT 4
83623: NEG
83624: PUSH
83625: EMPTY
83626: LIST
83627: LIST
83628: PUSH
83629: LD_INT 5
83631: NEG
83632: PUSH
83633: LD_INT 5
83635: NEG
83636: PUSH
83637: EMPTY
83638: LIST
83639: LIST
83640: PUSH
83641: LD_INT 3
83643: NEG
83644: PUSH
83645: LD_INT 5
83647: NEG
83648: PUSH
83649: EMPTY
83650: LIST
83651: LIST
83652: PUSH
83653: LD_INT 5
83655: NEG
83656: PUSH
83657: LD_INT 3
83659: NEG
83660: PUSH
83661: EMPTY
83662: LIST
83663: LIST
83664: PUSH
83665: EMPTY
83666: LIST
83667: LIST
83668: LIST
83669: LIST
83670: LIST
83671: LIST
83672: LIST
83673: LIST
83674: LIST
83675: LIST
83676: LIST
83677: LIST
83678: LIST
83679: LIST
83680: LIST
83681: LIST
83682: LIST
83683: LIST
83684: LIST
83685: LIST
83686: LIST
83687: LIST
83688: LIST
83689: LIST
83690: LIST
83691: LIST
83692: LIST
83693: LIST
83694: LIST
83695: LIST
83696: LIST
83697: LIST
83698: LIST
83699: LIST
83700: LIST
83701: LIST
83702: LIST
83703: LIST
83704: LIST
83705: LIST
83706: LIST
83707: LIST
83708: LIST
83709: LIST
83710: LIST
83711: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
83712: LD_ADDR_VAR 0 30
83716: PUSH
83717: LD_INT 4
83719: PUSH
83720: LD_INT 4
83722: PUSH
83723: EMPTY
83724: LIST
83725: LIST
83726: PUSH
83727: LD_INT 4
83729: PUSH
83730: LD_INT 3
83732: PUSH
83733: EMPTY
83734: LIST
83735: LIST
83736: PUSH
83737: LD_INT 5
83739: PUSH
83740: LD_INT 4
83742: PUSH
83743: EMPTY
83744: LIST
83745: LIST
83746: PUSH
83747: LD_INT 5
83749: PUSH
83750: LD_INT 5
83752: PUSH
83753: EMPTY
83754: LIST
83755: LIST
83756: PUSH
83757: LD_INT 4
83759: PUSH
83760: LD_INT 5
83762: PUSH
83763: EMPTY
83764: LIST
83765: LIST
83766: PUSH
83767: LD_INT 3
83769: PUSH
83770: LD_INT 4
83772: PUSH
83773: EMPTY
83774: LIST
83775: LIST
83776: PUSH
83777: LD_INT 3
83779: PUSH
83780: LD_INT 3
83782: PUSH
83783: EMPTY
83784: LIST
83785: LIST
83786: PUSH
83787: LD_INT 5
83789: PUSH
83790: LD_INT 3
83792: PUSH
83793: EMPTY
83794: LIST
83795: LIST
83796: PUSH
83797: LD_INT 3
83799: PUSH
83800: LD_INT 5
83802: PUSH
83803: EMPTY
83804: LIST
83805: LIST
83806: PUSH
83807: LD_INT 0
83809: PUSH
83810: LD_INT 3
83812: PUSH
83813: EMPTY
83814: LIST
83815: LIST
83816: PUSH
83817: LD_INT 0
83819: PUSH
83820: LD_INT 2
83822: PUSH
83823: EMPTY
83824: LIST
83825: LIST
83826: PUSH
83827: LD_INT 1
83829: PUSH
83830: LD_INT 3
83832: PUSH
83833: EMPTY
83834: LIST
83835: LIST
83836: PUSH
83837: LD_INT 1
83839: PUSH
83840: LD_INT 4
83842: PUSH
83843: EMPTY
83844: LIST
83845: LIST
83846: PUSH
83847: LD_INT 0
83849: PUSH
83850: LD_INT 4
83852: PUSH
83853: EMPTY
83854: LIST
83855: LIST
83856: PUSH
83857: LD_INT 1
83859: NEG
83860: PUSH
83861: LD_INT 3
83863: PUSH
83864: EMPTY
83865: LIST
83866: LIST
83867: PUSH
83868: LD_INT 1
83870: NEG
83871: PUSH
83872: LD_INT 2
83874: PUSH
83875: EMPTY
83876: LIST
83877: LIST
83878: PUSH
83879: LD_INT 2
83881: PUSH
83882: LD_INT 4
83884: PUSH
83885: EMPTY
83886: LIST
83887: LIST
83888: PUSH
83889: LD_INT 2
83891: NEG
83892: PUSH
83893: LD_INT 2
83895: PUSH
83896: EMPTY
83897: LIST
83898: LIST
83899: PUSH
83900: LD_INT 4
83902: NEG
83903: PUSH
83904: LD_INT 0
83906: PUSH
83907: EMPTY
83908: LIST
83909: LIST
83910: PUSH
83911: LD_INT 4
83913: NEG
83914: PUSH
83915: LD_INT 1
83917: NEG
83918: PUSH
83919: EMPTY
83920: LIST
83921: LIST
83922: PUSH
83923: LD_INT 3
83925: NEG
83926: PUSH
83927: LD_INT 0
83929: PUSH
83930: EMPTY
83931: LIST
83932: LIST
83933: PUSH
83934: LD_INT 3
83936: NEG
83937: PUSH
83938: LD_INT 1
83940: PUSH
83941: EMPTY
83942: LIST
83943: LIST
83944: PUSH
83945: LD_INT 4
83947: NEG
83948: PUSH
83949: LD_INT 1
83951: PUSH
83952: EMPTY
83953: LIST
83954: LIST
83955: PUSH
83956: LD_INT 5
83958: NEG
83959: PUSH
83960: LD_INT 0
83962: PUSH
83963: EMPTY
83964: LIST
83965: LIST
83966: PUSH
83967: LD_INT 5
83969: NEG
83970: PUSH
83971: LD_INT 1
83973: NEG
83974: PUSH
83975: EMPTY
83976: LIST
83977: LIST
83978: PUSH
83979: LD_INT 5
83981: NEG
83982: PUSH
83983: LD_INT 2
83985: NEG
83986: PUSH
83987: EMPTY
83988: LIST
83989: LIST
83990: PUSH
83991: LD_INT 3
83993: NEG
83994: PUSH
83995: LD_INT 2
83997: PUSH
83998: EMPTY
83999: LIST
84000: LIST
84001: PUSH
84002: LD_INT 3
84004: NEG
84005: PUSH
84006: LD_INT 3
84008: NEG
84009: PUSH
84010: EMPTY
84011: LIST
84012: LIST
84013: PUSH
84014: LD_INT 3
84016: NEG
84017: PUSH
84018: LD_INT 4
84020: NEG
84021: PUSH
84022: EMPTY
84023: LIST
84024: LIST
84025: PUSH
84026: LD_INT 2
84028: NEG
84029: PUSH
84030: LD_INT 3
84032: NEG
84033: PUSH
84034: EMPTY
84035: LIST
84036: LIST
84037: PUSH
84038: LD_INT 2
84040: NEG
84041: PUSH
84042: LD_INT 2
84044: NEG
84045: PUSH
84046: EMPTY
84047: LIST
84048: LIST
84049: PUSH
84050: LD_INT 3
84052: NEG
84053: PUSH
84054: LD_INT 2
84056: NEG
84057: PUSH
84058: EMPTY
84059: LIST
84060: LIST
84061: PUSH
84062: LD_INT 4
84064: NEG
84065: PUSH
84066: LD_INT 3
84068: NEG
84069: PUSH
84070: EMPTY
84071: LIST
84072: LIST
84073: PUSH
84074: LD_INT 4
84076: NEG
84077: PUSH
84078: LD_INT 4
84080: NEG
84081: PUSH
84082: EMPTY
84083: LIST
84084: LIST
84085: PUSH
84086: LD_INT 2
84088: NEG
84089: PUSH
84090: LD_INT 4
84092: NEG
84093: PUSH
84094: EMPTY
84095: LIST
84096: LIST
84097: PUSH
84098: LD_INT 4
84100: NEG
84101: PUSH
84102: LD_INT 2
84104: NEG
84105: PUSH
84106: EMPTY
84107: LIST
84108: LIST
84109: PUSH
84110: LD_INT 0
84112: PUSH
84113: LD_INT 4
84115: NEG
84116: PUSH
84117: EMPTY
84118: LIST
84119: LIST
84120: PUSH
84121: LD_INT 0
84123: PUSH
84124: LD_INT 5
84126: NEG
84127: PUSH
84128: EMPTY
84129: LIST
84130: LIST
84131: PUSH
84132: LD_INT 1
84134: PUSH
84135: LD_INT 4
84137: NEG
84138: PUSH
84139: EMPTY
84140: LIST
84141: LIST
84142: PUSH
84143: LD_INT 1
84145: PUSH
84146: LD_INT 3
84148: NEG
84149: PUSH
84150: EMPTY
84151: LIST
84152: LIST
84153: PUSH
84154: LD_INT 0
84156: PUSH
84157: LD_INT 3
84159: NEG
84160: PUSH
84161: EMPTY
84162: LIST
84163: LIST
84164: PUSH
84165: LD_INT 1
84167: NEG
84168: PUSH
84169: LD_INT 4
84171: NEG
84172: PUSH
84173: EMPTY
84174: LIST
84175: LIST
84176: PUSH
84177: LD_INT 1
84179: NEG
84180: PUSH
84181: LD_INT 5
84183: NEG
84184: PUSH
84185: EMPTY
84186: LIST
84187: LIST
84188: PUSH
84189: LD_INT 2
84191: PUSH
84192: LD_INT 3
84194: NEG
84195: PUSH
84196: EMPTY
84197: LIST
84198: LIST
84199: PUSH
84200: LD_INT 2
84202: NEG
84203: PUSH
84204: LD_INT 5
84206: NEG
84207: PUSH
84208: EMPTY
84209: LIST
84210: LIST
84211: PUSH
84212: EMPTY
84213: LIST
84214: LIST
84215: LIST
84216: LIST
84217: LIST
84218: LIST
84219: LIST
84220: LIST
84221: LIST
84222: LIST
84223: LIST
84224: LIST
84225: LIST
84226: LIST
84227: LIST
84228: LIST
84229: LIST
84230: LIST
84231: LIST
84232: LIST
84233: LIST
84234: LIST
84235: LIST
84236: LIST
84237: LIST
84238: LIST
84239: LIST
84240: LIST
84241: LIST
84242: LIST
84243: LIST
84244: LIST
84245: LIST
84246: LIST
84247: LIST
84248: LIST
84249: LIST
84250: LIST
84251: LIST
84252: LIST
84253: LIST
84254: LIST
84255: LIST
84256: LIST
84257: LIST
84258: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
84259: LD_ADDR_VAR 0 31
84263: PUSH
84264: LD_INT 0
84266: PUSH
84267: LD_INT 4
84269: PUSH
84270: EMPTY
84271: LIST
84272: LIST
84273: PUSH
84274: LD_INT 0
84276: PUSH
84277: LD_INT 3
84279: PUSH
84280: EMPTY
84281: LIST
84282: LIST
84283: PUSH
84284: LD_INT 1
84286: PUSH
84287: LD_INT 4
84289: PUSH
84290: EMPTY
84291: LIST
84292: LIST
84293: PUSH
84294: LD_INT 1
84296: PUSH
84297: LD_INT 5
84299: PUSH
84300: EMPTY
84301: LIST
84302: LIST
84303: PUSH
84304: LD_INT 0
84306: PUSH
84307: LD_INT 5
84309: PUSH
84310: EMPTY
84311: LIST
84312: LIST
84313: PUSH
84314: LD_INT 1
84316: NEG
84317: PUSH
84318: LD_INT 4
84320: PUSH
84321: EMPTY
84322: LIST
84323: LIST
84324: PUSH
84325: LD_INT 1
84327: NEG
84328: PUSH
84329: LD_INT 3
84331: PUSH
84332: EMPTY
84333: LIST
84334: LIST
84335: PUSH
84336: LD_INT 2
84338: PUSH
84339: LD_INT 5
84341: PUSH
84342: EMPTY
84343: LIST
84344: LIST
84345: PUSH
84346: LD_INT 2
84348: NEG
84349: PUSH
84350: LD_INT 3
84352: PUSH
84353: EMPTY
84354: LIST
84355: LIST
84356: PUSH
84357: LD_INT 3
84359: NEG
84360: PUSH
84361: LD_INT 0
84363: PUSH
84364: EMPTY
84365: LIST
84366: LIST
84367: PUSH
84368: LD_INT 3
84370: NEG
84371: PUSH
84372: LD_INT 1
84374: NEG
84375: PUSH
84376: EMPTY
84377: LIST
84378: LIST
84379: PUSH
84380: LD_INT 2
84382: NEG
84383: PUSH
84384: LD_INT 0
84386: PUSH
84387: EMPTY
84388: LIST
84389: LIST
84390: PUSH
84391: LD_INT 2
84393: NEG
84394: PUSH
84395: LD_INT 1
84397: PUSH
84398: EMPTY
84399: LIST
84400: LIST
84401: PUSH
84402: LD_INT 3
84404: NEG
84405: PUSH
84406: LD_INT 1
84408: PUSH
84409: EMPTY
84410: LIST
84411: LIST
84412: PUSH
84413: LD_INT 4
84415: NEG
84416: PUSH
84417: LD_INT 0
84419: PUSH
84420: EMPTY
84421: LIST
84422: LIST
84423: PUSH
84424: LD_INT 4
84426: NEG
84427: PUSH
84428: LD_INT 1
84430: NEG
84431: PUSH
84432: EMPTY
84433: LIST
84434: LIST
84435: PUSH
84436: LD_INT 4
84438: NEG
84439: PUSH
84440: LD_INT 2
84442: NEG
84443: PUSH
84444: EMPTY
84445: LIST
84446: LIST
84447: PUSH
84448: LD_INT 2
84450: NEG
84451: PUSH
84452: LD_INT 2
84454: PUSH
84455: EMPTY
84456: LIST
84457: LIST
84458: PUSH
84459: LD_INT 4
84461: NEG
84462: PUSH
84463: LD_INT 4
84465: NEG
84466: PUSH
84467: EMPTY
84468: LIST
84469: LIST
84470: PUSH
84471: LD_INT 4
84473: NEG
84474: PUSH
84475: LD_INT 5
84477: NEG
84478: PUSH
84479: EMPTY
84480: LIST
84481: LIST
84482: PUSH
84483: LD_INT 3
84485: NEG
84486: PUSH
84487: LD_INT 4
84489: NEG
84490: PUSH
84491: EMPTY
84492: LIST
84493: LIST
84494: PUSH
84495: LD_INT 3
84497: NEG
84498: PUSH
84499: LD_INT 3
84501: NEG
84502: PUSH
84503: EMPTY
84504: LIST
84505: LIST
84506: PUSH
84507: LD_INT 4
84509: NEG
84510: PUSH
84511: LD_INT 3
84513: NEG
84514: PUSH
84515: EMPTY
84516: LIST
84517: LIST
84518: PUSH
84519: LD_INT 5
84521: NEG
84522: PUSH
84523: LD_INT 4
84525: NEG
84526: PUSH
84527: EMPTY
84528: LIST
84529: LIST
84530: PUSH
84531: LD_INT 5
84533: NEG
84534: PUSH
84535: LD_INT 5
84537: NEG
84538: PUSH
84539: EMPTY
84540: LIST
84541: LIST
84542: PUSH
84543: LD_INT 3
84545: NEG
84546: PUSH
84547: LD_INT 5
84549: NEG
84550: PUSH
84551: EMPTY
84552: LIST
84553: LIST
84554: PUSH
84555: LD_INT 5
84557: NEG
84558: PUSH
84559: LD_INT 3
84561: NEG
84562: PUSH
84563: EMPTY
84564: LIST
84565: LIST
84566: PUSH
84567: LD_INT 0
84569: PUSH
84570: LD_INT 3
84572: NEG
84573: PUSH
84574: EMPTY
84575: LIST
84576: LIST
84577: PUSH
84578: LD_INT 0
84580: PUSH
84581: LD_INT 4
84583: NEG
84584: PUSH
84585: EMPTY
84586: LIST
84587: LIST
84588: PUSH
84589: LD_INT 1
84591: PUSH
84592: LD_INT 3
84594: NEG
84595: PUSH
84596: EMPTY
84597: LIST
84598: LIST
84599: PUSH
84600: LD_INT 1
84602: PUSH
84603: LD_INT 2
84605: NEG
84606: PUSH
84607: EMPTY
84608: LIST
84609: LIST
84610: PUSH
84611: LD_INT 0
84613: PUSH
84614: LD_INT 2
84616: NEG
84617: PUSH
84618: EMPTY
84619: LIST
84620: LIST
84621: PUSH
84622: LD_INT 1
84624: NEG
84625: PUSH
84626: LD_INT 3
84628: NEG
84629: PUSH
84630: EMPTY
84631: LIST
84632: LIST
84633: PUSH
84634: LD_INT 1
84636: NEG
84637: PUSH
84638: LD_INT 4
84640: NEG
84641: PUSH
84642: EMPTY
84643: LIST
84644: LIST
84645: PUSH
84646: LD_INT 2
84648: PUSH
84649: LD_INT 2
84651: NEG
84652: PUSH
84653: EMPTY
84654: LIST
84655: LIST
84656: PUSH
84657: LD_INT 2
84659: NEG
84660: PUSH
84661: LD_INT 4
84663: NEG
84664: PUSH
84665: EMPTY
84666: LIST
84667: LIST
84668: PUSH
84669: LD_INT 4
84671: PUSH
84672: LD_INT 0
84674: PUSH
84675: EMPTY
84676: LIST
84677: LIST
84678: PUSH
84679: LD_INT 4
84681: PUSH
84682: LD_INT 1
84684: NEG
84685: PUSH
84686: EMPTY
84687: LIST
84688: LIST
84689: PUSH
84690: LD_INT 5
84692: PUSH
84693: LD_INT 0
84695: PUSH
84696: EMPTY
84697: LIST
84698: LIST
84699: PUSH
84700: LD_INT 5
84702: PUSH
84703: LD_INT 1
84705: PUSH
84706: EMPTY
84707: LIST
84708: LIST
84709: PUSH
84710: LD_INT 4
84712: PUSH
84713: LD_INT 1
84715: PUSH
84716: EMPTY
84717: LIST
84718: LIST
84719: PUSH
84720: LD_INT 3
84722: PUSH
84723: LD_INT 0
84725: PUSH
84726: EMPTY
84727: LIST
84728: LIST
84729: PUSH
84730: LD_INT 3
84732: PUSH
84733: LD_INT 1
84735: NEG
84736: PUSH
84737: EMPTY
84738: LIST
84739: LIST
84740: PUSH
84741: LD_INT 3
84743: PUSH
84744: LD_INT 2
84746: NEG
84747: PUSH
84748: EMPTY
84749: LIST
84750: LIST
84751: PUSH
84752: LD_INT 5
84754: PUSH
84755: LD_INT 2
84757: PUSH
84758: EMPTY
84759: LIST
84760: LIST
84761: PUSH
84762: EMPTY
84763: LIST
84764: LIST
84765: LIST
84766: LIST
84767: LIST
84768: LIST
84769: LIST
84770: LIST
84771: LIST
84772: LIST
84773: LIST
84774: LIST
84775: LIST
84776: LIST
84777: LIST
84778: LIST
84779: LIST
84780: LIST
84781: LIST
84782: LIST
84783: LIST
84784: LIST
84785: LIST
84786: LIST
84787: LIST
84788: LIST
84789: LIST
84790: LIST
84791: LIST
84792: LIST
84793: LIST
84794: LIST
84795: LIST
84796: LIST
84797: LIST
84798: LIST
84799: LIST
84800: LIST
84801: LIST
84802: LIST
84803: LIST
84804: LIST
84805: LIST
84806: LIST
84807: LIST
84808: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
84809: LD_ADDR_VAR 0 32
84813: PUSH
84814: LD_INT 4
84816: NEG
84817: PUSH
84818: LD_INT 0
84820: PUSH
84821: EMPTY
84822: LIST
84823: LIST
84824: PUSH
84825: LD_INT 4
84827: NEG
84828: PUSH
84829: LD_INT 1
84831: NEG
84832: PUSH
84833: EMPTY
84834: LIST
84835: LIST
84836: PUSH
84837: LD_INT 3
84839: NEG
84840: PUSH
84841: LD_INT 0
84843: PUSH
84844: EMPTY
84845: LIST
84846: LIST
84847: PUSH
84848: LD_INT 3
84850: NEG
84851: PUSH
84852: LD_INT 1
84854: PUSH
84855: EMPTY
84856: LIST
84857: LIST
84858: PUSH
84859: LD_INT 4
84861: NEG
84862: PUSH
84863: LD_INT 1
84865: PUSH
84866: EMPTY
84867: LIST
84868: LIST
84869: PUSH
84870: LD_INT 5
84872: NEG
84873: PUSH
84874: LD_INT 0
84876: PUSH
84877: EMPTY
84878: LIST
84879: LIST
84880: PUSH
84881: LD_INT 5
84883: NEG
84884: PUSH
84885: LD_INT 1
84887: NEG
84888: PUSH
84889: EMPTY
84890: LIST
84891: LIST
84892: PUSH
84893: LD_INT 5
84895: NEG
84896: PUSH
84897: LD_INT 2
84899: NEG
84900: PUSH
84901: EMPTY
84902: LIST
84903: LIST
84904: PUSH
84905: LD_INT 3
84907: NEG
84908: PUSH
84909: LD_INT 2
84911: PUSH
84912: EMPTY
84913: LIST
84914: LIST
84915: PUSH
84916: LD_INT 3
84918: NEG
84919: PUSH
84920: LD_INT 3
84922: NEG
84923: PUSH
84924: EMPTY
84925: LIST
84926: LIST
84927: PUSH
84928: LD_INT 3
84930: NEG
84931: PUSH
84932: LD_INT 4
84934: NEG
84935: PUSH
84936: EMPTY
84937: LIST
84938: LIST
84939: PUSH
84940: LD_INT 2
84942: NEG
84943: PUSH
84944: LD_INT 3
84946: NEG
84947: PUSH
84948: EMPTY
84949: LIST
84950: LIST
84951: PUSH
84952: LD_INT 2
84954: NEG
84955: PUSH
84956: LD_INT 2
84958: NEG
84959: PUSH
84960: EMPTY
84961: LIST
84962: LIST
84963: PUSH
84964: LD_INT 3
84966: NEG
84967: PUSH
84968: LD_INT 2
84970: NEG
84971: PUSH
84972: EMPTY
84973: LIST
84974: LIST
84975: PUSH
84976: LD_INT 4
84978: NEG
84979: PUSH
84980: LD_INT 3
84982: NEG
84983: PUSH
84984: EMPTY
84985: LIST
84986: LIST
84987: PUSH
84988: LD_INT 4
84990: NEG
84991: PUSH
84992: LD_INT 4
84994: NEG
84995: PUSH
84996: EMPTY
84997: LIST
84998: LIST
84999: PUSH
85000: LD_INT 2
85002: NEG
85003: PUSH
85004: LD_INT 4
85006: NEG
85007: PUSH
85008: EMPTY
85009: LIST
85010: LIST
85011: PUSH
85012: LD_INT 4
85014: NEG
85015: PUSH
85016: LD_INT 2
85018: NEG
85019: PUSH
85020: EMPTY
85021: LIST
85022: LIST
85023: PUSH
85024: LD_INT 0
85026: PUSH
85027: LD_INT 4
85029: NEG
85030: PUSH
85031: EMPTY
85032: LIST
85033: LIST
85034: PUSH
85035: LD_INT 0
85037: PUSH
85038: LD_INT 5
85040: NEG
85041: PUSH
85042: EMPTY
85043: LIST
85044: LIST
85045: PUSH
85046: LD_INT 1
85048: PUSH
85049: LD_INT 4
85051: NEG
85052: PUSH
85053: EMPTY
85054: LIST
85055: LIST
85056: PUSH
85057: LD_INT 1
85059: PUSH
85060: LD_INT 3
85062: NEG
85063: PUSH
85064: EMPTY
85065: LIST
85066: LIST
85067: PUSH
85068: LD_INT 0
85070: PUSH
85071: LD_INT 3
85073: NEG
85074: PUSH
85075: EMPTY
85076: LIST
85077: LIST
85078: PUSH
85079: LD_INT 1
85081: NEG
85082: PUSH
85083: LD_INT 4
85085: NEG
85086: PUSH
85087: EMPTY
85088: LIST
85089: LIST
85090: PUSH
85091: LD_INT 1
85093: NEG
85094: PUSH
85095: LD_INT 5
85097: NEG
85098: PUSH
85099: EMPTY
85100: LIST
85101: LIST
85102: PUSH
85103: LD_INT 2
85105: PUSH
85106: LD_INT 3
85108: NEG
85109: PUSH
85110: EMPTY
85111: LIST
85112: LIST
85113: PUSH
85114: LD_INT 2
85116: NEG
85117: PUSH
85118: LD_INT 5
85120: NEG
85121: PUSH
85122: EMPTY
85123: LIST
85124: LIST
85125: PUSH
85126: LD_INT 3
85128: PUSH
85129: LD_INT 0
85131: PUSH
85132: EMPTY
85133: LIST
85134: LIST
85135: PUSH
85136: LD_INT 3
85138: PUSH
85139: LD_INT 1
85141: NEG
85142: PUSH
85143: EMPTY
85144: LIST
85145: LIST
85146: PUSH
85147: LD_INT 4
85149: PUSH
85150: LD_INT 0
85152: PUSH
85153: EMPTY
85154: LIST
85155: LIST
85156: PUSH
85157: LD_INT 4
85159: PUSH
85160: LD_INT 1
85162: PUSH
85163: EMPTY
85164: LIST
85165: LIST
85166: PUSH
85167: LD_INT 3
85169: PUSH
85170: LD_INT 1
85172: PUSH
85173: EMPTY
85174: LIST
85175: LIST
85176: PUSH
85177: LD_INT 2
85179: PUSH
85180: LD_INT 0
85182: PUSH
85183: EMPTY
85184: LIST
85185: LIST
85186: PUSH
85187: LD_INT 2
85189: PUSH
85190: LD_INT 1
85192: NEG
85193: PUSH
85194: EMPTY
85195: LIST
85196: LIST
85197: PUSH
85198: LD_INT 2
85200: PUSH
85201: LD_INT 2
85203: NEG
85204: PUSH
85205: EMPTY
85206: LIST
85207: LIST
85208: PUSH
85209: LD_INT 4
85211: PUSH
85212: LD_INT 2
85214: PUSH
85215: EMPTY
85216: LIST
85217: LIST
85218: PUSH
85219: LD_INT 4
85221: PUSH
85222: LD_INT 4
85224: PUSH
85225: EMPTY
85226: LIST
85227: LIST
85228: PUSH
85229: LD_INT 4
85231: PUSH
85232: LD_INT 3
85234: PUSH
85235: EMPTY
85236: LIST
85237: LIST
85238: PUSH
85239: LD_INT 5
85241: PUSH
85242: LD_INT 4
85244: PUSH
85245: EMPTY
85246: LIST
85247: LIST
85248: PUSH
85249: LD_INT 5
85251: PUSH
85252: LD_INT 5
85254: PUSH
85255: EMPTY
85256: LIST
85257: LIST
85258: PUSH
85259: LD_INT 4
85261: PUSH
85262: LD_INT 5
85264: PUSH
85265: EMPTY
85266: LIST
85267: LIST
85268: PUSH
85269: LD_INT 3
85271: PUSH
85272: LD_INT 4
85274: PUSH
85275: EMPTY
85276: LIST
85277: LIST
85278: PUSH
85279: LD_INT 3
85281: PUSH
85282: LD_INT 3
85284: PUSH
85285: EMPTY
85286: LIST
85287: LIST
85288: PUSH
85289: LD_INT 5
85291: PUSH
85292: LD_INT 3
85294: PUSH
85295: EMPTY
85296: LIST
85297: LIST
85298: PUSH
85299: LD_INT 3
85301: PUSH
85302: LD_INT 5
85304: PUSH
85305: EMPTY
85306: LIST
85307: LIST
85308: PUSH
85309: EMPTY
85310: LIST
85311: LIST
85312: LIST
85313: LIST
85314: LIST
85315: LIST
85316: LIST
85317: LIST
85318: LIST
85319: LIST
85320: LIST
85321: LIST
85322: LIST
85323: LIST
85324: LIST
85325: LIST
85326: LIST
85327: LIST
85328: LIST
85329: LIST
85330: LIST
85331: LIST
85332: LIST
85333: LIST
85334: LIST
85335: LIST
85336: LIST
85337: LIST
85338: LIST
85339: LIST
85340: LIST
85341: LIST
85342: LIST
85343: LIST
85344: LIST
85345: LIST
85346: LIST
85347: LIST
85348: LIST
85349: LIST
85350: LIST
85351: LIST
85352: LIST
85353: LIST
85354: LIST
85355: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
85356: LD_ADDR_VAR 0 33
85360: PUSH
85361: LD_INT 4
85363: NEG
85364: PUSH
85365: LD_INT 4
85367: NEG
85368: PUSH
85369: EMPTY
85370: LIST
85371: LIST
85372: PUSH
85373: LD_INT 4
85375: NEG
85376: PUSH
85377: LD_INT 5
85379: NEG
85380: PUSH
85381: EMPTY
85382: LIST
85383: LIST
85384: PUSH
85385: LD_INT 3
85387: NEG
85388: PUSH
85389: LD_INT 4
85391: NEG
85392: PUSH
85393: EMPTY
85394: LIST
85395: LIST
85396: PUSH
85397: LD_INT 3
85399: NEG
85400: PUSH
85401: LD_INT 3
85403: NEG
85404: PUSH
85405: EMPTY
85406: LIST
85407: LIST
85408: PUSH
85409: LD_INT 4
85411: NEG
85412: PUSH
85413: LD_INT 3
85415: NEG
85416: PUSH
85417: EMPTY
85418: LIST
85419: LIST
85420: PUSH
85421: LD_INT 5
85423: NEG
85424: PUSH
85425: LD_INT 4
85427: NEG
85428: PUSH
85429: EMPTY
85430: LIST
85431: LIST
85432: PUSH
85433: LD_INT 5
85435: NEG
85436: PUSH
85437: LD_INT 5
85439: NEG
85440: PUSH
85441: EMPTY
85442: LIST
85443: LIST
85444: PUSH
85445: LD_INT 3
85447: NEG
85448: PUSH
85449: LD_INT 5
85451: NEG
85452: PUSH
85453: EMPTY
85454: LIST
85455: LIST
85456: PUSH
85457: LD_INT 5
85459: NEG
85460: PUSH
85461: LD_INT 3
85463: NEG
85464: PUSH
85465: EMPTY
85466: LIST
85467: LIST
85468: PUSH
85469: LD_INT 0
85471: PUSH
85472: LD_INT 3
85474: NEG
85475: PUSH
85476: EMPTY
85477: LIST
85478: LIST
85479: PUSH
85480: LD_INT 0
85482: PUSH
85483: LD_INT 4
85485: NEG
85486: PUSH
85487: EMPTY
85488: LIST
85489: LIST
85490: PUSH
85491: LD_INT 1
85493: PUSH
85494: LD_INT 3
85496: NEG
85497: PUSH
85498: EMPTY
85499: LIST
85500: LIST
85501: PUSH
85502: LD_INT 1
85504: PUSH
85505: LD_INT 2
85507: NEG
85508: PUSH
85509: EMPTY
85510: LIST
85511: LIST
85512: PUSH
85513: LD_INT 0
85515: PUSH
85516: LD_INT 2
85518: NEG
85519: PUSH
85520: EMPTY
85521: LIST
85522: LIST
85523: PUSH
85524: LD_INT 1
85526: NEG
85527: PUSH
85528: LD_INT 3
85530: NEG
85531: PUSH
85532: EMPTY
85533: LIST
85534: LIST
85535: PUSH
85536: LD_INT 1
85538: NEG
85539: PUSH
85540: LD_INT 4
85542: NEG
85543: PUSH
85544: EMPTY
85545: LIST
85546: LIST
85547: PUSH
85548: LD_INT 2
85550: PUSH
85551: LD_INT 2
85553: NEG
85554: PUSH
85555: EMPTY
85556: LIST
85557: LIST
85558: PUSH
85559: LD_INT 2
85561: NEG
85562: PUSH
85563: LD_INT 4
85565: NEG
85566: PUSH
85567: EMPTY
85568: LIST
85569: LIST
85570: PUSH
85571: LD_INT 4
85573: PUSH
85574: LD_INT 0
85576: PUSH
85577: EMPTY
85578: LIST
85579: LIST
85580: PUSH
85581: LD_INT 4
85583: PUSH
85584: LD_INT 1
85586: NEG
85587: PUSH
85588: EMPTY
85589: LIST
85590: LIST
85591: PUSH
85592: LD_INT 5
85594: PUSH
85595: LD_INT 0
85597: PUSH
85598: EMPTY
85599: LIST
85600: LIST
85601: PUSH
85602: LD_INT 5
85604: PUSH
85605: LD_INT 1
85607: PUSH
85608: EMPTY
85609: LIST
85610: LIST
85611: PUSH
85612: LD_INT 4
85614: PUSH
85615: LD_INT 1
85617: PUSH
85618: EMPTY
85619: LIST
85620: LIST
85621: PUSH
85622: LD_INT 3
85624: PUSH
85625: LD_INT 0
85627: PUSH
85628: EMPTY
85629: LIST
85630: LIST
85631: PUSH
85632: LD_INT 3
85634: PUSH
85635: LD_INT 1
85637: NEG
85638: PUSH
85639: EMPTY
85640: LIST
85641: LIST
85642: PUSH
85643: LD_INT 3
85645: PUSH
85646: LD_INT 2
85648: NEG
85649: PUSH
85650: EMPTY
85651: LIST
85652: LIST
85653: PUSH
85654: LD_INT 5
85656: PUSH
85657: LD_INT 2
85659: PUSH
85660: EMPTY
85661: LIST
85662: LIST
85663: PUSH
85664: LD_INT 3
85666: PUSH
85667: LD_INT 3
85669: PUSH
85670: EMPTY
85671: LIST
85672: LIST
85673: PUSH
85674: LD_INT 3
85676: PUSH
85677: LD_INT 2
85679: PUSH
85680: EMPTY
85681: LIST
85682: LIST
85683: PUSH
85684: LD_INT 4
85686: PUSH
85687: LD_INT 3
85689: PUSH
85690: EMPTY
85691: LIST
85692: LIST
85693: PUSH
85694: LD_INT 4
85696: PUSH
85697: LD_INT 4
85699: PUSH
85700: EMPTY
85701: LIST
85702: LIST
85703: PUSH
85704: LD_INT 3
85706: PUSH
85707: LD_INT 4
85709: PUSH
85710: EMPTY
85711: LIST
85712: LIST
85713: PUSH
85714: LD_INT 2
85716: PUSH
85717: LD_INT 3
85719: PUSH
85720: EMPTY
85721: LIST
85722: LIST
85723: PUSH
85724: LD_INT 2
85726: PUSH
85727: LD_INT 2
85729: PUSH
85730: EMPTY
85731: LIST
85732: LIST
85733: PUSH
85734: LD_INT 4
85736: PUSH
85737: LD_INT 2
85739: PUSH
85740: EMPTY
85741: LIST
85742: LIST
85743: PUSH
85744: LD_INT 2
85746: PUSH
85747: LD_INT 4
85749: PUSH
85750: EMPTY
85751: LIST
85752: LIST
85753: PUSH
85754: LD_INT 0
85756: PUSH
85757: LD_INT 4
85759: PUSH
85760: EMPTY
85761: LIST
85762: LIST
85763: PUSH
85764: LD_INT 0
85766: PUSH
85767: LD_INT 3
85769: PUSH
85770: EMPTY
85771: LIST
85772: LIST
85773: PUSH
85774: LD_INT 1
85776: PUSH
85777: LD_INT 4
85779: PUSH
85780: EMPTY
85781: LIST
85782: LIST
85783: PUSH
85784: LD_INT 1
85786: PUSH
85787: LD_INT 5
85789: PUSH
85790: EMPTY
85791: LIST
85792: LIST
85793: PUSH
85794: LD_INT 0
85796: PUSH
85797: LD_INT 5
85799: PUSH
85800: EMPTY
85801: LIST
85802: LIST
85803: PUSH
85804: LD_INT 1
85806: NEG
85807: PUSH
85808: LD_INT 4
85810: PUSH
85811: EMPTY
85812: LIST
85813: LIST
85814: PUSH
85815: LD_INT 1
85817: NEG
85818: PUSH
85819: LD_INT 3
85821: PUSH
85822: EMPTY
85823: LIST
85824: LIST
85825: PUSH
85826: LD_INT 2
85828: PUSH
85829: LD_INT 5
85831: PUSH
85832: EMPTY
85833: LIST
85834: LIST
85835: PUSH
85836: LD_INT 2
85838: NEG
85839: PUSH
85840: LD_INT 3
85842: PUSH
85843: EMPTY
85844: LIST
85845: LIST
85846: PUSH
85847: EMPTY
85848: LIST
85849: LIST
85850: LIST
85851: LIST
85852: LIST
85853: LIST
85854: LIST
85855: LIST
85856: LIST
85857: LIST
85858: LIST
85859: LIST
85860: LIST
85861: LIST
85862: LIST
85863: LIST
85864: LIST
85865: LIST
85866: LIST
85867: LIST
85868: LIST
85869: LIST
85870: LIST
85871: LIST
85872: LIST
85873: LIST
85874: LIST
85875: LIST
85876: LIST
85877: LIST
85878: LIST
85879: LIST
85880: LIST
85881: LIST
85882: LIST
85883: LIST
85884: LIST
85885: LIST
85886: LIST
85887: LIST
85888: LIST
85889: LIST
85890: LIST
85891: LIST
85892: LIST
85893: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
85894: LD_ADDR_VAR 0 34
85898: PUSH
85899: LD_INT 0
85901: PUSH
85902: LD_INT 4
85904: NEG
85905: PUSH
85906: EMPTY
85907: LIST
85908: LIST
85909: PUSH
85910: LD_INT 0
85912: PUSH
85913: LD_INT 5
85915: NEG
85916: PUSH
85917: EMPTY
85918: LIST
85919: LIST
85920: PUSH
85921: LD_INT 1
85923: PUSH
85924: LD_INT 4
85926: NEG
85927: PUSH
85928: EMPTY
85929: LIST
85930: LIST
85931: PUSH
85932: LD_INT 1
85934: PUSH
85935: LD_INT 3
85937: NEG
85938: PUSH
85939: EMPTY
85940: LIST
85941: LIST
85942: PUSH
85943: LD_INT 0
85945: PUSH
85946: LD_INT 3
85948: NEG
85949: PUSH
85950: EMPTY
85951: LIST
85952: LIST
85953: PUSH
85954: LD_INT 1
85956: NEG
85957: PUSH
85958: LD_INT 4
85960: NEG
85961: PUSH
85962: EMPTY
85963: LIST
85964: LIST
85965: PUSH
85966: LD_INT 1
85968: NEG
85969: PUSH
85970: LD_INT 5
85972: NEG
85973: PUSH
85974: EMPTY
85975: LIST
85976: LIST
85977: PUSH
85978: LD_INT 2
85980: PUSH
85981: LD_INT 3
85983: NEG
85984: PUSH
85985: EMPTY
85986: LIST
85987: LIST
85988: PUSH
85989: LD_INT 2
85991: NEG
85992: PUSH
85993: LD_INT 5
85995: NEG
85996: PUSH
85997: EMPTY
85998: LIST
85999: LIST
86000: PUSH
86001: LD_INT 3
86003: PUSH
86004: LD_INT 0
86006: PUSH
86007: EMPTY
86008: LIST
86009: LIST
86010: PUSH
86011: LD_INT 3
86013: PUSH
86014: LD_INT 1
86016: NEG
86017: PUSH
86018: EMPTY
86019: LIST
86020: LIST
86021: PUSH
86022: LD_INT 4
86024: PUSH
86025: LD_INT 0
86027: PUSH
86028: EMPTY
86029: LIST
86030: LIST
86031: PUSH
86032: LD_INT 4
86034: PUSH
86035: LD_INT 1
86037: PUSH
86038: EMPTY
86039: LIST
86040: LIST
86041: PUSH
86042: LD_INT 3
86044: PUSH
86045: LD_INT 1
86047: PUSH
86048: EMPTY
86049: LIST
86050: LIST
86051: PUSH
86052: LD_INT 2
86054: PUSH
86055: LD_INT 0
86057: PUSH
86058: EMPTY
86059: LIST
86060: LIST
86061: PUSH
86062: LD_INT 2
86064: PUSH
86065: LD_INT 1
86067: NEG
86068: PUSH
86069: EMPTY
86070: LIST
86071: LIST
86072: PUSH
86073: LD_INT 2
86075: PUSH
86076: LD_INT 2
86078: NEG
86079: PUSH
86080: EMPTY
86081: LIST
86082: LIST
86083: PUSH
86084: LD_INT 4
86086: PUSH
86087: LD_INT 2
86089: PUSH
86090: EMPTY
86091: LIST
86092: LIST
86093: PUSH
86094: LD_INT 4
86096: PUSH
86097: LD_INT 4
86099: PUSH
86100: EMPTY
86101: LIST
86102: LIST
86103: PUSH
86104: LD_INT 4
86106: PUSH
86107: LD_INT 3
86109: PUSH
86110: EMPTY
86111: LIST
86112: LIST
86113: PUSH
86114: LD_INT 5
86116: PUSH
86117: LD_INT 4
86119: PUSH
86120: EMPTY
86121: LIST
86122: LIST
86123: PUSH
86124: LD_INT 5
86126: PUSH
86127: LD_INT 5
86129: PUSH
86130: EMPTY
86131: LIST
86132: LIST
86133: PUSH
86134: LD_INT 4
86136: PUSH
86137: LD_INT 5
86139: PUSH
86140: EMPTY
86141: LIST
86142: LIST
86143: PUSH
86144: LD_INT 3
86146: PUSH
86147: LD_INT 4
86149: PUSH
86150: EMPTY
86151: LIST
86152: LIST
86153: PUSH
86154: LD_INT 3
86156: PUSH
86157: LD_INT 3
86159: PUSH
86160: EMPTY
86161: LIST
86162: LIST
86163: PUSH
86164: LD_INT 5
86166: PUSH
86167: LD_INT 3
86169: PUSH
86170: EMPTY
86171: LIST
86172: LIST
86173: PUSH
86174: LD_INT 3
86176: PUSH
86177: LD_INT 5
86179: PUSH
86180: EMPTY
86181: LIST
86182: LIST
86183: PUSH
86184: LD_INT 0
86186: PUSH
86187: LD_INT 3
86189: PUSH
86190: EMPTY
86191: LIST
86192: LIST
86193: PUSH
86194: LD_INT 0
86196: PUSH
86197: LD_INT 2
86199: PUSH
86200: EMPTY
86201: LIST
86202: LIST
86203: PUSH
86204: LD_INT 1
86206: PUSH
86207: LD_INT 3
86209: PUSH
86210: EMPTY
86211: LIST
86212: LIST
86213: PUSH
86214: LD_INT 1
86216: PUSH
86217: LD_INT 4
86219: PUSH
86220: EMPTY
86221: LIST
86222: LIST
86223: PUSH
86224: LD_INT 0
86226: PUSH
86227: LD_INT 4
86229: PUSH
86230: EMPTY
86231: LIST
86232: LIST
86233: PUSH
86234: LD_INT 1
86236: NEG
86237: PUSH
86238: LD_INT 3
86240: PUSH
86241: EMPTY
86242: LIST
86243: LIST
86244: PUSH
86245: LD_INT 1
86247: NEG
86248: PUSH
86249: LD_INT 2
86251: PUSH
86252: EMPTY
86253: LIST
86254: LIST
86255: PUSH
86256: LD_INT 2
86258: PUSH
86259: LD_INT 4
86261: PUSH
86262: EMPTY
86263: LIST
86264: LIST
86265: PUSH
86266: LD_INT 2
86268: NEG
86269: PUSH
86270: LD_INT 2
86272: PUSH
86273: EMPTY
86274: LIST
86275: LIST
86276: PUSH
86277: LD_INT 4
86279: NEG
86280: PUSH
86281: LD_INT 0
86283: PUSH
86284: EMPTY
86285: LIST
86286: LIST
86287: PUSH
86288: LD_INT 4
86290: NEG
86291: PUSH
86292: LD_INT 1
86294: NEG
86295: PUSH
86296: EMPTY
86297: LIST
86298: LIST
86299: PUSH
86300: LD_INT 3
86302: NEG
86303: PUSH
86304: LD_INT 0
86306: PUSH
86307: EMPTY
86308: LIST
86309: LIST
86310: PUSH
86311: LD_INT 3
86313: NEG
86314: PUSH
86315: LD_INT 1
86317: PUSH
86318: EMPTY
86319: LIST
86320: LIST
86321: PUSH
86322: LD_INT 4
86324: NEG
86325: PUSH
86326: LD_INT 1
86328: PUSH
86329: EMPTY
86330: LIST
86331: LIST
86332: PUSH
86333: LD_INT 5
86335: NEG
86336: PUSH
86337: LD_INT 0
86339: PUSH
86340: EMPTY
86341: LIST
86342: LIST
86343: PUSH
86344: LD_INT 5
86346: NEG
86347: PUSH
86348: LD_INT 1
86350: NEG
86351: PUSH
86352: EMPTY
86353: LIST
86354: LIST
86355: PUSH
86356: LD_INT 5
86358: NEG
86359: PUSH
86360: LD_INT 2
86362: NEG
86363: PUSH
86364: EMPTY
86365: LIST
86366: LIST
86367: PUSH
86368: LD_INT 3
86370: NEG
86371: PUSH
86372: LD_INT 2
86374: PUSH
86375: EMPTY
86376: LIST
86377: LIST
86378: PUSH
86379: EMPTY
86380: LIST
86381: LIST
86382: LIST
86383: LIST
86384: LIST
86385: LIST
86386: LIST
86387: LIST
86388: LIST
86389: LIST
86390: LIST
86391: LIST
86392: LIST
86393: LIST
86394: LIST
86395: LIST
86396: LIST
86397: LIST
86398: LIST
86399: LIST
86400: LIST
86401: LIST
86402: LIST
86403: LIST
86404: LIST
86405: LIST
86406: LIST
86407: LIST
86408: LIST
86409: LIST
86410: LIST
86411: LIST
86412: LIST
86413: LIST
86414: LIST
86415: LIST
86416: LIST
86417: LIST
86418: LIST
86419: LIST
86420: LIST
86421: LIST
86422: LIST
86423: LIST
86424: LIST
86425: ST_TO_ADDR
// end ; end ;
86426: GO 86429
86428: POP
// case btype of b_depot , b_warehouse :
86429: LD_VAR 0 1
86433: PUSH
86434: LD_INT 0
86436: DOUBLE
86437: EQUAL
86438: IFTRUE 86448
86440: LD_INT 1
86442: DOUBLE
86443: EQUAL
86444: IFTRUE 86448
86446: GO 86649
86448: POP
// case nation of nation_american :
86449: LD_VAR 0 5
86453: PUSH
86454: LD_INT 1
86456: DOUBLE
86457: EQUAL
86458: IFTRUE 86462
86460: GO 86518
86462: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
86463: LD_ADDR_VAR 0 9
86467: PUSH
86468: LD_VAR 0 11
86472: PUSH
86473: LD_VAR 0 12
86477: PUSH
86478: LD_VAR 0 13
86482: PUSH
86483: LD_VAR 0 14
86487: PUSH
86488: LD_VAR 0 15
86492: PUSH
86493: LD_VAR 0 16
86497: PUSH
86498: EMPTY
86499: LIST
86500: LIST
86501: LIST
86502: LIST
86503: LIST
86504: LIST
86505: PUSH
86506: LD_VAR 0 4
86510: PUSH
86511: LD_INT 1
86513: PLUS
86514: ARRAY
86515: ST_TO_ADDR
86516: GO 86647
86518: LD_INT 2
86520: DOUBLE
86521: EQUAL
86522: IFTRUE 86526
86524: GO 86582
86526: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
86527: LD_ADDR_VAR 0 9
86531: PUSH
86532: LD_VAR 0 17
86536: PUSH
86537: LD_VAR 0 18
86541: PUSH
86542: LD_VAR 0 19
86546: PUSH
86547: LD_VAR 0 20
86551: PUSH
86552: LD_VAR 0 21
86556: PUSH
86557: LD_VAR 0 22
86561: PUSH
86562: EMPTY
86563: LIST
86564: LIST
86565: LIST
86566: LIST
86567: LIST
86568: LIST
86569: PUSH
86570: LD_VAR 0 4
86574: PUSH
86575: LD_INT 1
86577: PLUS
86578: ARRAY
86579: ST_TO_ADDR
86580: GO 86647
86582: LD_INT 3
86584: DOUBLE
86585: EQUAL
86586: IFTRUE 86590
86588: GO 86646
86590: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
86591: LD_ADDR_VAR 0 9
86595: PUSH
86596: LD_VAR 0 23
86600: PUSH
86601: LD_VAR 0 24
86605: PUSH
86606: LD_VAR 0 25
86610: PUSH
86611: LD_VAR 0 26
86615: PUSH
86616: LD_VAR 0 27
86620: PUSH
86621: LD_VAR 0 28
86625: PUSH
86626: EMPTY
86627: LIST
86628: LIST
86629: LIST
86630: LIST
86631: LIST
86632: LIST
86633: PUSH
86634: LD_VAR 0 4
86638: PUSH
86639: LD_INT 1
86641: PLUS
86642: ARRAY
86643: ST_TO_ADDR
86644: GO 86647
86646: POP
86647: GO 87202
86649: LD_INT 2
86651: DOUBLE
86652: EQUAL
86653: IFTRUE 86663
86655: LD_INT 3
86657: DOUBLE
86658: EQUAL
86659: IFTRUE 86663
86661: GO 86719
86663: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
86664: LD_ADDR_VAR 0 9
86668: PUSH
86669: LD_VAR 0 29
86673: PUSH
86674: LD_VAR 0 30
86678: PUSH
86679: LD_VAR 0 31
86683: PUSH
86684: LD_VAR 0 32
86688: PUSH
86689: LD_VAR 0 33
86693: PUSH
86694: LD_VAR 0 34
86698: PUSH
86699: EMPTY
86700: LIST
86701: LIST
86702: LIST
86703: LIST
86704: LIST
86705: LIST
86706: PUSH
86707: LD_VAR 0 4
86711: PUSH
86712: LD_INT 1
86714: PLUS
86715: ARRAY
86716: ST_TO_ADDR
86717: GO 87202
86719: LD_INT 16
86721: DOUBLE
86722: EQUAL
86723: IFTRUE 86781
86725: LD_INT 17
86727: DOUBLE
86728: EQUAL
86729: IFTRUE 86781
86731: LD_INT 18
86733: DOUBLE
86734: EQUAL
86735: IFTRUE 86781
86737: LD_INT 19
86739: DOUBLE
86740: EQUAL
86741: IFTRUE 86781
86743: LD_INT 22
86745: DOUBLE
86746: EQUAL
86747: IFTRUE 86781
86749: LD_INT 20
86751: DOUBLE
86752: EQUAL
86753: IFTRUE 86781
86755: LD_INT 21
86757: DOUBLE
86758: EQUAL
86759: IFTRUE 86781
86761: LD_INT 23
86763: DOUBLE
86764: EQUAL
86765: IFTRUE 86781
86767: LD_INT 24
86769: DOUBLE
86770: EQUAL
86771: IFTRUE 86781
86773: LD_INT 25
86775: DOUBLE
86776: EQUAL
86777: IFTRUE 86781
86779: GO 86837
86781: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
86782: LD_ADDR_VAR 0 9
86786: PUSH
86787: LD_VAR 0 35
86791: PUSH
86792: LD_VAR 0 36
86796: PUSH
86797: LD_VAR 0 37
86801: PUSH
86802: LD_VAR 0 38
86806: PUSH
86807: LD_VAR 0 39
86811: PUSH
86812: LD_VAR 0 40
86816: PUSH
86817: EMPTY
86818: LIST
86819: LIST
86820: LIST
86821: LIST
86822: LIST
86823: LIST
86824: PUSH
86825: LD_VAR 0 4
86829: PUSH
86830: LD_INT 1
86832: PLUS
86833: ARRAY
86834: ST_TO_ADDR
86835: GO 87202
86837: LD_INT 6
86839: DOUBLE
86840: EQUAL
86841: IFTRUE 86893
86843: LD_INT 7
86845: DOUBLE
86846: EQUAL
86847: IFTRUE 86893
86849: LD_INT 8
86851: DOUBLE
86852: EQUAL
86853: IFTRUE 86893
86855: LD_INT 13
86857: DOUBLE
86858: EQUAL
86859: IFTRUE 86893
86861: LD_INT 12
86863: DOUBLE
86864: EQUAL
86865: IFTRUE 86893
86867: LD_INT 15
86869: DOUBLE
86870: EQUAL
86871: IFTRUE 86893
86873: LD_INT 11
86875: DOUBLE
86876: EQUAL
86877: IFTRUE 86893
86879: LD_INT 14
86881: DOUBLE
86882: EQUAL
86883: IFTRUE 86893
86885: LD_INT 10
86887: DOUBLE
86888: EQUAL
86889: IFTRUE 86893
86891: GO 86949
86893: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
86894: LD_ADDR_VAR 0 9
86898: PUSH
86899: LD_VAR 0 41
86903: PUSH
86904: LD_VAR 0 42
86908: PUSH
86909: LD_VAR 0 43
86913: PUSH
86914: LD_VAR 0 44
86918: PUSH
86919: LD_VAR 0 45
86923: PUSH
86924: LD_VAR 0 46
86928: PUSH
86929: EMPTY
86930: LIST
86931: LIST
86932: LIST
86933: LIST
86934: LIST
86935: LIST
86936: PUSH
86937: LD_VAR 0 4
86941: PUSH
86942: LD_INT 1
86944: PLUS
86945: ARRAY
86946: ST_TO_ADDR
86947: GO 87202
86949: LD_INT 36
86951: DOUBLE
86952: EQUAL
86953: IFTRUE 86957
86955: GO 87013
86957: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
86958: LD_ADDR_VAR 0 9
86962: PUSH
86963: LD_VAR 0 47
86967: PUSH
86968: LD_VAR 0 48
86972: PUSH
86973: LD_VAR 0 49
86977: PUSH
86978: LD_VAR 0 50
86982: PUSH
86983: LD_VAR 0 51
86987: PUSH
86988: LD_VAR 0 52
86992: PUSH
86993: EMPTY
86994: LIST
86995: LIST
86996: LIST
86997: LIST
86998: LIST
86999: LIST
87000: PUSH
87001: LD_VAR 0 4
87005: PUSH
87006: LD_INT 1
87008: PLUS
87009: ARRAY
87010: ST_TO_ADDR
87011: GO 87202
87013: LD_INT 4
87015: DOUBLE
87016: EQUAL
87017: IFTRUE 87039
87019: LD_INT 5
87021: DOUBLE
87022: EQUAL
87023: IFTRUE 87039
87025: LD_INT 34
87027: DOUBLE
87028: EQUAL
87029: IFTRUE 87039
87031: LD_INT 37
87033: DOUBLE
87034: EQUAL
87035: IFTRUE 87039
87037: GO 87095
87039: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
87040: LD_ADDR_VAR 0 9
87044: PUSH
87045: LD_VAR 0 53
87049: PUSH
87050: LD_VAR 0 54
87054: PUSH
87055: LD_VAR 0 55
87059: PUSH
87060: LD_VAR 0 56
87064: PUSH
87065: LD_VAR 0 57
87069: PUSH
87070: LD_VAR 0 58
87074: PUSH
87075: EMPTY
87076: LIST
87077: LIST
87078: LIST
87079: LIST
87080: LIST
87081: LIST
87082: PUSH
87083: LD_VAR 0 4
87087: PUSH
87088: LD_INT 1
87090: PLUS
87091: ARRAY
87092: ST_TO_ADDR
87093: GO 87202
87095: LD_INT 31
87097: DOUBLE
87098: EQUAL
87099: IFTRUE 87145
87101: LD_INT 32
87103: DOUBLE
87104: EQUAL
87105: IFTRUE 87145
87107: LD_INT 33
87109: DOUBLE
87110: EQUAL
87111: IFTRUE 87145
87113: LD_INT 27
87115: DOUBLE
87116: EQUAL
87117: IFTRUE 87145
87119: LD_INT 26
87121: DOUBLE
87122: EQUAL
87123: IFTRUE 87145
87125: LD_INT 28
87127: DOUBLE
87128: EQUAL
87129: IFTRUE 87145
87131: LD_INT 29
87133: DOUBLE
87134: EQUAL
87135: IFTRUE 87145
87137: LD_INT 30
87139: DOUBLE
87140: EQUAL
87141: IFTRUE 87145
87143: GO 87201
87145: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
87146: LD_ADDR_VAR 0 9
87150: PUSH
87151: LD_VAR 0 59
87155: PUSH
87156: LD_VAR 0 60
87160: PUSH
87161: LD_VAR 0 61
87165: PUSH
87166: LD_VAR 0 62
87170: PUSH
87171: LD_VAR 0 63
87175: PUSH
87176: LD_VAR 0 64
87180: PUSH
87181: EMPTY
87182: LIST
87183: LIST
87184: LIST
87185: LIST
87186: LIST
87187: LIST
87188: PUSH
87189: LD_VAR 0 4
87193: PUSH
87194: LD_INT 1
87196: PLUS
87197: ARRAY
87198: ST_TO_ADDR
87199: GO 87202
87201: POP
// temp_list2 = [ ] ;
87202: LD_ADDR_VAR 0 10
87206: PUSH
87207: EMPTY
87208: ST_TO_ADDR
// for i in temp_list do
87209: LD_ADDR_VAR 0 8
87213: PUSH
87214: LD_VAR 0 9
87218: PUSH
87219: FOR_IN
87220: IFFALSE 87272
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
87222: LD_ADDR_VAR 0 10
87226: PUSH
87227: LD_VAR 0 10
87231: PUSH
87232: LD_VAR 0 8
87236: PUSH
87237: LD_INT 1
87239: ARRAY
87240: PUSH
87241: LD_VAR 0 2
87245: PLUS
87246: PUSH
87247: LD_VAR 0 8
87251: PUSH
87252: LD_INT 2
87254: ARRAY
87255: PUSH
87256: LD_VAR 0 3
87260: PLUS
87261: PUSH
87262: EMPTY
87263: LIST
87264: LIST
87265: PUSH
87266: EMPTY
87267: LIST
87268: ADD
87269: ST_TO_ADDR
87270: GO 87219
87272: POP
87273: POP
// result = temp_list2 ;
87274: LD_ADDR_VAR 0 7
87278: PUSH
87279: LD_VAR 0 10
87283: ST_TO_ADDR
// end ;
87284: LD_VAR 0 7
87288: RET
// export function EnemyInRange ( unit , dist ) ; begin
87289: LD_INT 0
87291: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
87292: LD_ADDR_VAR 0 3
87296: PUSH
87297: LD_VAR 0 1
87301: PPUSH
87302: CALL_OW 255
87306: PPUSH
87307: LD_VAR 0 1
87311: PPUSH
87312: CALL_OW 250
87316: PPUSH
87317: LD_VAR 0 1
87321: PPUSH
87322: CALL_OW 251
87326: PPUSH
87327: LD_VAR 0 2
87331: PPUSH
87332: CALL 60662 0 4
87336: PUSH
87337: LD_INT 4
87339: ARRAY
87340: ST_TO_ADDR
// end ;
87341: LD_VAR 0 3
87345: RET
// export function PlayerSeeMe ( unit ) ; begin
87346: LD_INT 0
87348: PPUSH
// result := See ( your_side , unit ) ;
87349: LD_ADDR_VAR 0 2
87353: PUSH
87354: LD_OWVAR 2
87358: PPUSH
87359: LD_VAR 0 1
87363: PPUSH
87364: CALL_OW 292
87368: ST_TO_ADDR
// end ;
87369: LD_VAR 0 2
87373: RET
// export function ReverseDir ( unit ) ; begin
87374: LD_INT 0
87376: PPUSH
// if not unit then
87377: LD_VAR 0 1
87381: NOT
87382: IFFALSE 87386
// exit ;
87384: GO 87409
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
87386: LD_ADDR_VAR 0 2
87390: PUSH
87391: LD_VAR 0 1
87395: PPUSH
87396: CALL_OW 254
87400: PUSH
87401: LD_INT 3
87403: PLUS
87404: PUSH
87405: LD_INT 6
87407: MOD
87408: ST_TO_ADDR
// end ;
87409: LD_VAR 0 2
87413: RET
// export function ReverseArray ( array ) ; var i ; begin
87414: LD_INT 0
87416: PPUSH
87417: PPUSH
// if not array then
87418: LD_VAR 0 1
87422: NOT
87423: IFFALSE 87427
// exit ;
87425: GO 87482
// result := [ ] ;
87427: LD_ADDR_VAR 0 2
87431: PUSH
87432: EMPTY
87433: ST_TO_ADDR
// for i := array downto 1 do
87434: LD_ADDR_VAR 0 3
87438: PUSH
87439: DOUBLE
87440: LD_VAR 0 1
87444: INC
87445: ST_TO_ADDR
87446: LD_INT 1
87448: PUSH
87449: FOR_DOWNTO
87450: IFFALSE 87480
// result := Join ( result , array [ i ] ) ;
87452: LD_ADDR_VAR 0 2
87456: PUSH
87457: LD_VAR 0 2
87461: PPUSH
87462: LD_VAR 0 1
87466: PUSH
87467: LD_VAR 0 3
87471: ARRAY
87472: PPUSH
87473: CALL 92138 0 2
87477: ST_TO_ADDR
87478: GO 87449
87480: POP
87481: POP
// end ;
87482: LD_VAR 0 2
87486: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
87487: LD_INT 0
87489: PPUSH
87490: PPUSH
87491: PPUSH
87492: PPUSH
87493: PPUSH
87494: PPUSH
// if not unit or not hexes then
87495: LD_VAR 0 1
87499: NOT
87500: PUSH
87501: LD_VAR 0 2
87505: NOT
87506: OR
87507: IFFALSE 87511
// exit ;
87509: GO 87634
// dist := 9999 ;
87511: LD_ADDR_VAR 0 5
87515: PUSH
87516: LD_INT 9999
87518: ST_TO_ADDR
// for i = 1 to hexes do
87519: LD_ADDR_VAR 0 4
87523: PUSH
87524: DOUBLE
87525: LD_INT 1
87527: DEC
87528: ST_TO_ADDR
87529: LD_VAR 0 2
87533: PUSH
87534: FOR_TO
87535: IFFALSE 87622
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
87537: LD_ADDR_VAR 0 6
87541: PUSH
87542: LD_VAR 0 1
87546: PPUSH
87547: LD_VAR 0 2
87551: PUSH
87552: LD_VAR 0 4
87556: ARRAY
87557: PUSH
87558: LD_INT 1
87560: ARRAY
87561: PPUSH
87562: LD_VAR 0 2
87566: PUSH
87567: LD_VAR 0 4
87571: ARRAY
87572: PUSH
87573: LD_INT 2
87575: ARRAY
87576: PPUSH
87577: CALL_OW 297
87581: ST_TO_ADDR
// if tdist < dist then
87582: LD_VAR 0 6
87586: PUSH
87587: LD_VAR 0 5
87591: LESS
87592: IFFALSE 87620
// begin hex := hexes [ i ] ;
87594: LD_ADDR_VAR 0 8
87598: PUSH
87599: LD_VAR 0 2
87603: PUSH
87604: LD_VAR 0 4
87608: ARRAY
87609: ST_TO_ADDR
// dist := tdist ;
87610: LD_ADDR_VAR 0 5
87614: PUSH
87615: LD_VAR 0 6
87619: ST_TO_ADDR
// end ; end ;
87620: GO 87534
87622: POP
87623: POP
// result := hex ;
87624: LD_ADDR_VAR 0 3
87628: PUSH
87629: LD_VAR 0 8
87633: ST_TO_ADDR
// end ;
87634: LD_VAR 0 3
87638: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
87639: LD_INT 0
87641: PPUSH
87642: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
87643: LD_VAR 0 1
87647: NOT
87648: PUSH
87649: LD_VAR 0 1
87653: PUSH
87654: LD_INT 21
87656: PUSH
87657: LD_INT 2
87659: PUSH
87660: EMPTY
87661: LIST
87662: LIST
87663: PUSH
87664: LD_INT 23
87666: PUSH
87667: LD_INT 2
87669: PUSH
87670: EMPTY
87671: LIST
87672: LIST
87673: PUSH
87674: EMPTY
87675: LIST
87676: LIST
87677: PPUSH
87678: CALL_OW 69
87682: IN
87683: NOT
87684: OR
87685: IFFALSE 87689
// exit ;
87687: GO 87736
// for i = 1 to 3 do
87689: LD_ADDR_VAR 0 3
87693: PUSH
87694: DOUBLE
87695: LD_INT 1
87697: DEC
87698: ST_TO_ADDR
87699: LD_INT 3
87701: PUSH
87702: FOR_TO
87703: IFFALSE 87734
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
87705: LD_VAR 0 1
87709: PPUSH
87710: CALL_OW 250
87714: PPUSH
87715: LD_VAR 0 1
87719: PPUSH
87720: CALL_OW 251
87724: PPUSH
87725: LD_INT 1
87727: PPUSH
87728: CALL_OW 453
87732: GO 87702
87734: POP
87735: POP
// end ;
87736: LD_VAR 0 2
87740: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
87741: LD_INT 0
87743: PPUSH
87744: PPUSH
87745: PPUSH
87746: PPUSH
87747: PPUSH
87748: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
87749: LD_VAR 0 1
87753: NOT
87754: PUSH
87755: LD_VAR 0 2
87759: NOT
87760: OR
87761: PUSH
87762: LD_VAR 0 1
87766: PPUSH
87767: CALL_OW 314
87771: OR
87772: IFFALSE 87776
// exit ;
87774: GO 88243
// if GetLives ( i ) < 250 then
87776: LD_VAR 0 4
87780: PPUSH
87781: CALL_OW 256
87785: PUSH
87786: LD_INT 250
87788: LESS
87789: IFFALSE 87802
// begin ComAutodestruct ( i ) ;
87791: LD_VAR 0 4
87795: PPUSH
87796: CALL 87639 0 1
// exit ;
87800: GO 88243
// end ; x := GetX ( enemy_unit ) ;
87802: LD_ADDR_VAR 0 7
87806: PUSH
87807: LD_VAR 0 2
87811: PPUSH
87812: CALL_OW 250
87816: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
87817: LD_ADDR_VAR 0 8
87821: PUSH
87822: LD_VAR 0 2
87826: PPUSH
87827: CALL_OW 251
87831: ST_TO_ADDR
// if not x or not y then
87832: LD_VAR 0 7
87836: NOT
87837: PUSH
87838: LD_VAR 0 8
87842: NOT
87843: OR
87844: IFFALSE 87848
// exit ;
87846: GO 88243
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
87848: LD_ADDR_VAR 0 6
87852: PUSH
87853: LD_VAR 0 7
87857: PPUSH
87858: LD_INT 0
87860: PPUSH
87861: LD_INT 4
87863: PPUSH
87864: CALL_OW 272
87868: PUSH
87869: LD_VAR 0 8
87873: PPUSH
87874: LD_INT 0
87876: PPUSH
87877: LD_INT 4
87879: PPUSH
87880: CALL_OW 273
87884: PUSH
87885: EMPTY
87886: LIST
87887: LIST
87888: PUSH
87889: LD_VAR 0 7
87893: PPUSH
87894: LD_INT 1
87896: PPUSH
87897: LD_INT 4
87899: PPUSH
87900: CALL_OW 272
87904: PUSH
87905: LD_VAR 0 8
87909: PPUSH
87910: LD_INT 1
87912: PPUSH
87913: LD_INT 4
87915: PPUSH
87916: CALL_OW 273
87920: PUSH
87921: EMPTY
87922: LIST
87923: LIST
87924: PUSH
87925: LD_VAR 0 7
87929: PPUSH
87930: LD_INT 2
87932: PPUSH
87933: LD_INT 4
87935: PPUSH
87936: CALL_OW 272
87940: PUSH
87941: LD_VAR 0 8
87945: PPUSH
87946: LD_INT 2
87948: PPUSH
87949: LD_INT 4
87951: PPUSH
87952: CALL_OW 273
87956: PUSH
87957: EMPTY
87958: LIST
87959: LIST
87960: PUSH
87961: LD_VAR 0 7
87965: PPUSH
87966: LD_INT 3
87968: PPUSH
87969: LD_INT 4
87971: PPUSH
87972: CALL_OW 272
87976: PUSH
87977: LD_VAR 0 8
87981: PPUSH
87982: LD_INT 3
87984: PPUSH
87985: LD_INT 4
87987: PPUSH
87988: CALL_OW 273
87992: PUSH
87993: EMPTY
87994: LIST
87995: LIST
87996: PUSH
87997: LD_VAR 0 7
88001: PPUSH
88002: LD_INT 4
88004: PPUSH
88005: LD_INT 4
88007: PPUSH
88008: CALL_OW 272
88012: PUSH
88013: LD_VAR 0 8
88017: PPUSH
88018: LD_INT 4
88020: PPUSH
88021: LD_INT 4
88023: PPUSH
88024: CALL_OW 273
88028: PUSH
88029: EMPTY
88030: LIST
88031: LIST
88032: PUSH
88033: LD_VAR 0 7
88037: PPUSH
88038: LD_INT 5
88040: PPUSH
88041: LD_INT 4
88043: PPUSH
88044: CALL_OW 272
88048: PUSH
88049: LD_VAR 0 8
88053: PPUSH
88054: LD_INT 5
88056: PPUSH
88057: LD_INT 4
88059: PPUSH
88060: CALL_OW 273
88064: PUSH
88065: EMPTY
88066: LIST
88067: LIST
88068: PUSH
88069: EMPTY
88070: LIST
88071: LIST
88072: LIST
88073: LIST
88074: LIST
88075: LIST
88076: ST_TO_ADDR
// for i = tmp downto 1 do
88077: LD_ADDR_VAR 0 4
88081: PUSH
88082: DOUBLE
88083: LD_VAR 0 6
88087: INC
88088: ST_TO_ADDR
88089: LD_INT 1
88091: PUSH
88092: FOR_DOWNTO
88093: IFFALSE 88194
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
88095: LD_VAR 0 6
88099: PUSH
88100: LD_VAR 0 4
88104: ARRAY
88105: PUSH
88106: LD_INT 1
88108: ARRAY
88109: PPUSH
88110: LD_VAR 0 6
88114: PUSH
88115: LD_VAR 0 4
88119: ARRAY
88120: PUSH
88121: LD_INT 2
88123: ARRAY
88124: PPUSH
88125: CALL_OW 488
88129: NOT
88130: PUSH
88131: LD_VAR 0 6
88135: PUSH
88136: LD_VAR 0 4
88140: ARRAY
88141: PUSH
88142: LD_INT 1
88144: ARRAY
88145: PPUSH
88146: LD_VAR 0 6
88150: PUSH
88151: LD_VAR 0 4
88155: ARRAY
88156: PUSH
88157: LD_INT 2
88159: ARRAY
88160: PPUSH
88161: CALL_OW 428
88165: PUSH
88166: LD_INT 0
88168: NONEQUAL
88169: OR
88170: IFFALSE 88192
// tmp := Delete ( tmp , i ) ;
88172: LD_ADDR_VAR 0 6
88176: PUSH
88177: LD_VAR 0 6
88181: PPUSH
88182: LD_VAR 0 4
88186: PPUSH
88187: CALL_OW 3
88191: ST_TO_ADDR
88192: GO 88092
88194: POP
88195: POP
// j := GetClosestHex ( unit , tmp ) ;
88196: LD_ADDR_VAR 0 5
88200: PUSH
88201: LD_VAR 0 1
88205: PPUSH
88206: LD_VAR 0 6
88210: PPUSH
88211: CALL 87487 0 2
88215: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
88216: LD_VAR 0 1
88220: PPUSH
88221: LD_VAR 0 5
88225: PUSH
88226: LD_INT 1
88228: ARRAY
88229: PPUSH
88230: LD_VAR 0 5
88234: PUSH
88235: LD_INT 2
88237: ARRAY
88238: PPUSH
88239: CALL_OW 111
// end ;
88243: LD_VAR 0 3
88247: RET
// export function PrepareApemanSoldier ( ) ; begin
88248: LD_INT 0
88250: PPUSH
// uc_nation := 0 ;
88251: LD_ADDR_OWVAR 21
88255: PUSH
88256: LD_INT 0
88258: ST_TO_ADDR
// hc_sex := sex_male ;
88259: LD_ADDR_OWVAR 27
88263: PUSH
88264: LD_INT 1
88266: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
88267: LD_ADDR_OWVAR 28
88271: PUSH
88272: LD_INT 15
88274: ST_TO_ADDR
// hc_gallery :=  ;
88275: LD_ADDR_OWVAR 33
88279: PUSH
88280: LD_STRING 
88282: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
88283: LD_ADDR_OWVAR 31
88287: PUSH
88288: LD_INT 0
88290: PPUSH
88291: LD_INT 3
88293: PPUSH
88294: CALL_OW 12
88298: PUSH
88299: LD_INT 0
88301: PPUSH
88302: LD_INT 3
88304: PPUSH
88305: CALL_OW 12
88309: PUSH
88310: LD_INT 0
88312: PUSH
88313: LD_INT 0
88315: PUSH
88316: EMPTY
88317: LIST
88318: LIST
88319: LIST
88320: LIST
88321: ST_TO_ADDR
// end ;
88322: LD_VAR 0 1
88326: RET
// export function PrepareApemanEngineer ( ) ; begin
88327: LD_INT 0
88329: PPUSH
// uc_nation := 0 ;
88330: LD_ADDR_OWVAR 21
88334: PUSH
88335: LD_INT 0
88337: ST_TO_ADDR
// hc_sex := sex_male ;
88338: LD_ADDR_OWVAR 27
88342: PUSH
88343: LD_INT 1
88345: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
88346: LD_ADDR_OWVAR 28
88350: PUSH
88351: LD_INT 16
88353: ST_TO_ADDR
// hc_gallery :=  ;
88354: LD_ADDR_OWVAR 33
88358: PUSH
88359: LD_STRING 
88361: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
88362: LD_ADDR_OWVAR 31
88366: PUSH
88367: LD_INT 0
88369: PPUSH
88370: LD_INT 3
88372: PPUSH
88373: CALL_OW 12
88377: PUSH
88378: LD_INT 0
88380: PPUSH
88381: LD_INT 3
88383: PPUSH
88384: CALL_OW 12
88388: PUSH
88389: LD_INT 0
88391: PUSH
88392: LD_INT 0
88394: PUSH
88395: EMPTY
88396: LIST
88397: LIST
88398: LIST
88399: LIST
88400: ST_TO_ADDR
// end ;
88401: LD_VAR 0 1
88405: RET
// export function PrepareApeman ( agressivity ) ; begin
88406: LD_INT 0
88408: PPUSH
// uc_side := 0 ;
88409: LD_ADDR_OWVAR 20
88413: PUSH
88414: LD_INT 0
88416: ST_TO_ADDR
// uc_nation := 0 ;
88417: LD_ADDR_OWVAR 21
88421: PUSH
88422: LD_INT 0
88424: ST_TO_ADDR
// hc_sex := sex_male ;
88425: LD_ADDR_OWVAR 27
88429: PUSH
88430: LD_INT 1
88432: ST_TO_ADDR
// hc_class := class_apeman ;
88433: LD_ADDR_OWVAR 28
88437: PUSH
88438: LD_INT 12
88440: ST_TO_ADDR
// hc_gallery :=  ;
88441: LD_ADDR_OWVAR 33
88445: PUSH
88446: LD_STRING 
88448: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
88449: LD_ADDR_OWVAR 35
88453: PUSH
88454: LD_VAR 0 1
88458: NEG
88459: PPUSH
88460: LD_VAR 0 1
88464: PPUSH
88465: CALL_OW 12
88469: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
88470: LD_ADDR_OWVAR 31
88474: PUSH
88475: LD_INT 0
88477: PPUSH
88478: LD_INT 3
88480: PPUSH
88481: CALL_OW 12
88485: PUSH
88486: LD_INT 0
88488: PPUSH
88489: LD_INT 3
88491: PPUSH
88492: CALL_OW 12
88496: PUSH
88497: LD_INT 0
88499: PUSH
88500: LD_INT 0
88502: PUSH
88503: EMPTY
88504: LIST
88505: LIST
88506: LIST
88507: LIST
88508: ST_TO_ADDR
// end ;
88509: LD_VAR 0 2
88513: RET
// export function PrepareTiger ( agressivity ) ; begin
88514: LD_INT 0
88516: PPUSH
// uc_side := 0 ;
88517: LD_ADDR_OWVAR 20
88521: PUSH
88522: LD_INT 0
88524: ST_TO_ADDR
// uc_nation := 0 ;
88525: LD_ADDR_OWVAR 21
88529: PUSH
88530: LD_INT 0
88532: ST_TO_ADDR
// hc_class := class_tiger ;
88533: LD_ADDR_OWVAR 28
88537: PUSH
88538: LD_INT 14
88540: ST_TO_ADDR
// hc_gallery :=  ;
88541: LD_ADDR_OWVAR 33
88545: PUSH
88546: LD_STRING 
88548: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
88549: LD_ADDR_OWVAR 35
88553: PUSH
88554: LD_VAR 0 1
88558: NEG
88559: PPUSH
88560: LD_VAR 0 1
88564: PPUSH
88565: CALL_OW 12
88569: ST_TO_ADDR
// end ;
88570: LD_VAR 0 2
88574: RET
// export function PrepareEnchidna ( ) ; begin
88575: LD_INT 0
88577: PPUSH
// uc_side := 0 ;
88578: LD_ADDR_OWVAR 20
88582: PUSH
88583: LD_INT 0
88585: ST_TO_ADDR
// uc_nation := 0 ;
88586: LD_ADDR_OWVAR 21
88590: PUSH
88591: LD_INT 0
88593: ST_TO_ADDR
// hc_class := class_baggie ;
88594: LD_ADDR_OWVAR 28
88598: PUSH
88599: LD_INT 13
88601: ST_TO_ADDR
// hc_gallery :=  ;
88602: LD_ADDR_OWVAR 33
88606: PUSH
88607: LD_STRING 
88609: ST_TO_ADDR
// end ;
88610: LD_VAR 0 1
88614: RET
// export function PrepareFrog ( ) ; begin
88615: LD_INT 0
88617: PPUSH
// uc_side := 0 ;
88618: LD_ADDR_OWVAR 20
88622: PUSH
88623: LD_INT 0
88625: ST_TO_ADDR
// uc_nation := 0 ;
88626: LD_ADDR_OWVAR 21
88630: PUSH
88631: LD_INT 0
88633: ST_TO_ADDR
// hc_class := class_frog ;
88634: LD_ADDR_OWVAR 28
88638: PUSH
88639: LD_INT 19
88641: ST_TO_ADDR
// hc_gallery :=  ;
88642: LD_ADDR_OWVAR 33
88646: PUSH
88647: LD_STRING 
88649: ST_TO_ADDR
// end ;
88650: LD_VAR 0 1
88654: RET
// export function PrepareFish ( ) ; begin
88655: LD_INT 0
88657: PPUSH
// uc_side := 0 ;
88658: LD_ADDR_OWVAR 20
88662: PUSH
88663: LD_INT 0
88665: ST_TO_ADDR
// uc_nation := 0 ;
88666: LD_ADDR_OWVAR 21
88670: PUSH
88671: LD_INT 0
88673: ST_TO_ADDR
// hc_class := class_fish ;
88674: LD_ADDR_OWVAR 28
88678: PUSH
88679: LD_INT 20
88681: ST_TO_ADDR
// hc_gallery :=  ;
88682: LD_ADDR_OWVAR 33
88686: PUSH
88687: LD_STRING 
88689: ST_TO_ADDR
// end ;
88690: LD_VAR 0 1
88694: RET
// export function PrepareBird ( ) ; begin
88695: LD_INT 0
88697: PPUSH
// uc_side := 0 ;
88698: LD_ADDR_OWVAR 20
88702: PUSH
88703: LD_INT 0
88705: ST_TO_ADDR
// uc_nation := 0 ;
88706: LD_ADDR_OWVAR 21
88710: PUSH
88711: LD_INT 0
88713: ST_TO_ADDR
// hc_class := class_phororhacos ;
88714: LD_ADDR_OWVAR 28
88718: PUSH
88719: LD_INT 18
88721: ST_TO_ADDR
// hc_gallery :=  ;
88722: LD_ADDR_OWVAR 33
88726: PUSH
88727: LD_STRING 
88729: ST_TO_ADDR
// end ;
88730: LD_VAR 0 1
88734: RET
// export function PrepareHorse ( ) ; begin
88735: LD_INT 0
88737: PPUSH
// uc_side := 0 ;
88738: LD_ADDR_OWVAR 20
88742: PUSH
88743: LD_INT 0
88745: ST_TO_ADDR
// uc_nation := 0 ;
88746: LD_ADDR_OWVAR 21
88750: PUSH
88751: LD_INT 0
88753: ST_TO_ADDR
// hc_class := class_horse ;
88754: LD_ADDR_OWVAR 28
88758: PUSH
88759: LD_INT 21
88761: ST_TO_ADDR
// hc_gallery :=  ;
88762: LD_ADDR_OWVAR 33
88766: PUSH
88767: LD_STRING 
88769: ST_TO_ADDR
// end ;
88770: LD_VAR 0 1
88774: RET
// export function PrepareMastodont ( ) ; begin
88775: LD_INT 0
88777: PPUSH
// uc_side := 0 ;
88778: LD_ADDR_OWVAR 20
88782: PUSH
88783: LD_INT 0
88785: ST_TO_ADDR
// uc_nation := 0 ;
88786: LD_ADDR_OWVAR 21
88790: PUSH
88791: LD_INT 0
88793: ST_TO_ADDR
// vc_chassis := class_mastodont ;
88794: LD_ADDR_OWVAR 37
88798: PUSH
88799: LD_INT 31
88801: ST_TO_ADDR
// vc_control := control_rider ;
88802: LD_ADDR_OWVAR 38
88806: PUSH
88807: LD_INT 4
88809: ST_TO_ADDR
// end ;
88810: LD_VAR 0 1
88814: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
88815: LD_INT 0
88817: PPUSH
88818: PPUSH
88819: PPUSH
// uc_side = 0 ;
88820: LD_ADDR_OWVAR 20
88824: PUSH
88825: LD_INT 0
88827: ST_TO_ADDR
// uc_nation = 0 ;
88828: LD_ADDR_OWVAR 21
88832: PUSH
88833: LD_INT 0
88835: ST_TO_ADDR
// InitHc_All ( ) ;
88836: CALL_OW 584
// InitVc ;
88840: CALL_OW 20
// if mastodonts then
88844: LD_VAR 0 6
88848: IFFALSE 88915
// for i = 1 to mastodonts do
88850: LD_ADDR_VAR 0 11
88854: PUSH
88855: DOUBLE
88856: LD_INT 1
88858: DEC
88859: ST_TO_ADDR
88860: LD_VAR 0 6
88864: PUSH
88865: FOR_TO
88866: IFFALSE 88913
// begin vc_chassis := 31 ;
88868: LD_ADDR_OWVAR 37
88872: PUSH
88873: LD_INT 31
88875: ST_TO_ADDR
// vc_control := control_rider ;
88876: LD_ADDR_OWVAR 38
88880: PUSH
88881: LD_INT 4
88883: ST_TO_ADDR
// animal := CreateVehicle ;
88884: LD_ADDR_VAR 0 12
88888: PUSH
88889: CALL_OW 45
88893: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
88894: LD_VAR 0 12
88898: PPUSH
88899: LD_VAR 0 8
88903: PPUSH
88904: LD_INT 0
88906: PPUSH
88907: CALL 91043 0 3
// end ;
88911: GO 88865
88913: POP
88914: POP
// if horses then
88915: LD_VAR 0 5
88919: IFFALSE 88986
// for i = 1 to horses do
88921: LD_ADDR_VAR 0 11
88925: PUSH
88926: DOUBLE
88927: LD_INT 1
88929: DEC
88930: ST_TO_ADDR
88931: LD_VAR 0 5
88935: PUSH
88936: FOR_TO
88937: IFFALSE 88984
// begin hc_class := 21 ;
88939: LD_ADDR_OWVAR 28
88943: PUSH
88944: LD_INT 21
88946: ST_TO_ADDR
// hc_gallery :=  ;
88947: LD_ADDR_OWVAR 33
88951: PUSH
88952: LD_STRING 
88954: ST_TO_ADDR
// animal := CreateHuman ;
88955: LD_ADDR_VAR 0 12
88959: PUSH
88960: CALL_OW 44
88964: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
88965: LD_VAR 0 12
88969: PPUSH
88970: LD_VAR 0 8
88974: PPUSH
88975: LD_INT 0
88977: PPUSH
88978: CALL 91043 0 3
// end ;
88982: GO 88936
88984: POP
88985: POP
// if birds then
88986: LD_VAR 0 1
88990: IFFALSE 89057
// for i = 1 to birds do
88992: LD_ADDR_VAR 0 11
88996: PUSH
88997: DOUBLE
88998: LD_INT 1
89000: DEC
89001: ST_TO_ADDR
89002: LD_VAR 0 1
89006: PUSH
89007: FOR_TO
89008: IFFALSE 89055
// begin hc_class := 18 ;
89010: LD_ADDR_OWVAR 28
89014: PUSH
89015: LD_INT 18
89017: ST_TO_ADDR
// hc_gallery =  ;
89018: LD_ADDR_OWVAR 33
89022: PUSH
89023: LD_STRING 
89025: ST_TO_ADDR
// animal := CreateHuman ;
89026: LD_ADDR_VAR 0 12
89030: PUSH
89031: CALL_OW 44
89035: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89036: LD_VAR 0 12
89040: PPUSH
89041: LD_VAR 0 8
89045: PPUSH
89046: LD_INT 0
89048: PPUSH
89049: CALL 91043 0 3
// end ;
89053: GO 89007
89055: POP
89056: POP
// if tigers then
89057: LD_VAR 0 2
89061: IFFALSE 89145
// for i = 1 to tigers do
89063: LD_ADDR_VAR 0 11
89067: PUSH
89068: DOUBLE
89069: LD_INT 1
89071: DEC
89072: ST_TO_ADDR
89073: LD_VAR 0 2
89077: PUSH
89078: FOR_TO
89079: IFFALSE 89143
// begin hc_class = class_tiger ;
89081: LD_ADDR_OWVAR 28
89085: PUSH
89086: LD_INT 14
89088: ST_TO_ADDR
// hc_gallery =  ;
89089: LD_ADDR_OWVAR 33
89093: PUSH
89094: LD_STRING 
89096: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
89097: LD_ADDR_OWVAR 35
89101: PUSH
89102: LD_INT 7
89104: NEG
89105: PPUSH
89106: LD_INT 7
89108: PPUSH
89109: CALL_OW 12
89113: ST_TO_ADDR
// animal := CreateHuman ;
89114: LD_ADDR_VAR 0 12
89118: PUSH
89119: CALL_OW 44
89123: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89124: LD_VAR 0 12
89128: PPUSH
89129: LD_VAR 0 8
89133: PPUSH
89134: LD_INT 0
89136: PPUSH
89137: CALL 91043 0 3
// end ;
89141: GO 89078
89143: POP
89144: POP
// if apemans then
89145: LD_VAR 0 3
89149: IFFALSE 89272
// for i = 1 to apemans do
89151: LD_ADDR_VAR 0 11
89155: PUSH
89156: DOUBLE
89157: LD_INT 1
89159: DEC
89160: ST_TO_ADDR
89161: LD_VAR 0 3
89165: PUSH
89166: FOR_TO
89167: IFFALSE 89270
// begin hc_class = class_apeman ;
89169: LD_ADDR_OWVAR 28
89173: PUSH
89174: LD_INT 12
89176: ST_TO_ADDR
// hc_gallery =  ;
89177: LD_ADDR_OWVAR 33
89181: PUSH
89182: LD_STRING 
89184: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
89185: LD_ADDR_OWVAR 35
89189: PUSH
89190: LD_INT 2
89192: NEG
89193: PPUSH
89194: LD_INT 2
89196: PPUSH
89197: CALL_OW 12
89201: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
89202: LD_ADDR_OWVAR 31
89206: PUSH
89207: LD_INT 1
89209: PPUSH
89210: LD_INT 3
89212: PPUSH
89213: CALL_OW 12
89217: PUSH
89218: LD_INT 1
89220: PPUSH
89221: LD_INT 3
89223: PPUSH
89224: CALL_OW 12
89228: PUSH
89229: LD_INT 0
89231: PUSH
89232: LD_INT 0
89234: PUSH
89235: EMPTY
89236: LIST
89237: LIST
89238: LIST
89239: LIST
89240: ST_TO_ADDR
// animal := CreateHuman ;
89241: LD_ADDR_VAR 0 12
89245: PUSH
89246: CALL_OW 44
89250: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89251: LD_VAR 0 12
89255: PPUSH
89256: LD_VAR 0 8
89260: PPUSH
89261: LD_INT 0
89263: PPUSH
89264: CALL 91043 0 3
// end ;
89268: GO 89166
89270: POP
89271: POP
// if enchidnas then
89272: LD_VAR 0 4
89276: IFFALSE 89343
// for i = 1 to enchidnas do
89278: LD_ADDR_VAR 0 11
89282: PUSH
89283: DOUBLE
89284: LD_INT 1
89286: DEC
89287: ST_TO_ADDR
89288: LD_VAR 0 4
89292: PUSH
89293: FOR_TO
89294: IFFALSE 89341
// begin hc_class = 13 ;
89296: LD_ADDR_OWVAR 28
89300: PUSH
89301: LD_INT 13
89303: ST_TO_ADDR
// hc_gallery =  ;
89304: LD_ADDR_OWVAR 33
89308: PUSH
89309: LD_STRING 
89311: ST_TO_ADDR
// animal := CreateHuman ;
89312: LD_ADDR_VAR 0 12
89316: PUSH
89317: CALL_OW 44
89321: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89322: LD_VAR 0 12
89326: PPUSH
89327: LD_VAR 0 8
89331: PPUSH
89332: LD_INT 0
89334: PPUSH
89335: CALL 91043 0 3
// end ;
89339: GO 89293
89341: POP
89342: POP
// if fishes then
89343: LD_VAR 0 7
89347: IFFALSE 89414
// for i = 1 to fishes do
89349: LD_ADDR_VAR 0 11
89353: PUSH
89354: DOUBLE
89355: LD_INT 1
89357: DEC
89358: ST_TO_ADDR
89359: LD_VAR 0 7
89363: PUSH
89364: FOR_TO
89365: IFFALSE 89412
// begin hc_class = 20 ;
89367: LD_ADDR_OWVAR 28
89371: PUSH
89372: LD_INT 20
89374: ST_TO_ADDR
// hc_gallery =  ;
89375: LD_ADDR_OWVAR 33
89379: PUSH
89380: LD_STRING 
89382: ST_TO_ADDR
// animal := CreateHuman ;
89383: LD_ADDR_VAR 0 12
89387: PUSH
89388: CALL_OW 44
89392: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
89393: LD_VAR 0 12
89397: PPUSH
89398: LD_VAR 0 9
89402: PPUSH
89403: LD_INT 0
89405: PPUSH
89406: CALL 91043 0 3
// end ;
89410: GO 89364
89412: POP
89413: POP
// end ;
89414: LD_VAR 0 10
89418: RET
// export function WantHeal ( sci , unit ) ; begin
89419: LD_INT 0
89421: PPUSH
// if GetTaskList ( sci ) > 0 then
89422: LD_VAR 0 1
89426: PPUSH
89427: CALL_OW 437
89431: PUSH
89432: LD_INT 0
89434: GREATER
89435: IFFALSE 89505
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
89437: LD_VAR 0 1
89441: PPUSH
89442: CALL_OW 437
89446: PUSH
89447: LD_INT 1
89449: ARRAY
89450: PUSH
89451: LD_INT 1
89453: ARRAY
89454: PUSH
89455: LD_STRING l
89457: EQUAL
89458: PUSH
89459: LD_VAR 0 1
89463: PPUSH
89464: CALL_OW 437
89468: PUSH
89469: LD_INT 1
89471: ARRAY
89472: PUSH
89473: LD_INT 4
89475: ARRAY
89476: PUSH
89477: LD_VAR 0 2
89481: EQUAL
89482: AND
89483: IFFALSE 89495
// result := true else
89485: LD_ADDR_VAR 0 3
89489: PUSH
89490: LD_INT 1
89492: ST_TO_ADDR
89493: GO 89503
// result := false ;
89495: LD_ADDR_VAR 0 3
89499: PUSH
89500: LD_INT 0
89502: ST_TO_ADDR
// end else
89503: GO 89513
// result := false ;
89505: LD_ADDR_VAR 0 3
89509: PUSH
89510: LD_INT 0
89512: ST_TO_ADDR
// end ;
89513: LD_VAR 0 3
89517: RET
// export function HealTarget ( sci ) ; begin
89518: LD_INT 0
89520: PPUSH
// if not sci then
89521: LD_VAR 0 1
89525: NOT
89526: IFFALSE 89530
// exit ;
89528: GO 89595
// result := 0 ;
89530: LD_ADDR_VAR 0 2
89534: PUSH
89535: LD_INT 0
89537: ST_TO_ADDR
// if GetTaskList ( sci ) then
89538: LD_VAR 0 1
89542: PPUSH
89543: CALL_OW 437
89547: IFFALSE 89595
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
89549: LD_VAR 0 1
89553: PPUSH
89554: CALL_OW 437
89558: PUSH
89559: LD_INT 1
89561: ARRAY
89562: PUSH
89563: LD_INT 1
89565: ARRAY
89566: PUSH
89567: LD_STRING l
89569: EQUAL
89570: IFFALSE 89595
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
89572: LD_ADDR_VAR 0 2
89576: PUSH
89577: LD_VAR 0 1
89581: PPUSH
89582: CALL_OW 437
89586: PUSH
89587: LD_INT 1
89589: ARRAY
89590: PUSH
89591: LD_INT 4
89593: ARRAY
89594: ST_TO_ADDR
// end ;
89595: LD_VAR 0 2
89599: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
89600: LD_INT 0
89602: PPUSH
89603: PPUSH
89604: PPUSH
89605: PPUSH
// if not base_units then
89606: LD_VAR 0 1
89610: NOT
89611: IFFALSE 89615
// exit ;
89613: GO 89702
// result := false ;
89615: LD_ADDR_VAR 0 2
89619: PUSH
89620: LD_INT 0
89622: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
89623: LD_ADDR_VAR 0 5
89627: PUSH
89628: LD_VAR 0 1
89632: PPUSH
89633: LD_INT 21
89635: PUSH
89636: LD_INT 3
89638: PUSH
89639: EMPTY
89640: LIST
89641: LIST
89642: PPUSH
89643: CALL_OW 72
89647: ST_TO_ADDR
// if not tmp then
89648: LD_VAR 0 5
89652: NOT
89653: IFFALSE 89657
// exit ;
89655: GO 89702
// for i in tmp do
89657: LD_ADDR_VAR 0 3
89661: PUSH
89662: LD_VAR 0 5
89666: PUSH
89667: FOR_IN
89668: IFFALSE 89700
// begin result := EnemyInRange ( i , 22 ) ;
89670: LD_ADDR_VAR 0 2
89674: PUSH
89675: LD_VAR 0 3
89679: PPUSH
89680: LD_INT 22
89682: PPUSH
89683: CALL 87289 0 2
89687: ST_TO_ADDR
// if result then
89688: LD_VAR 0 2
89692: IFFALSE 89698
// exit ;
89694: POP
89695: POP
89696: GO 89702
// end ;
89698: GO 89667
89700: POP
89701: POP
// end ;
89702: LD_VAR 0 2
89706: RET
// export function FilterByTag ( units , tag ) ; begin
89707: LD_INT 0
89709: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
89710: LD_ADDR_VAR 0 3
89714: PUSH
89715: LD_VAR 0 1
89719: PPUSH
89720: LD_INT 120
89722: PUSH
89723: LD_VAR 0 2
89727: PUSH
89728: EMPTY
89729: LIST
89730: LIST
89731: PPUSH
89732: CALL_OW 72
89736: ST_TO_ADDR
// end ;
89737: LD_VAR 0 3
89741: RET
// export function IsDriver ( un ) ; begin
89742: LD_INT 0
89744: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
89745: LD_ADDR_VAR 0 2
89749: PUSH
89750: LD_VAR 0 1
89754: PUSH
89755: LD_INT 55
89757: PUSH
89758: EMPTY
89759: LIST
89760: PPUSH
89761: CALL_OW 69
89765: IN
89766: ST_TO_ADDR
// end ;
89767: LD_VAR 0 2
89771: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
89772: LD_INT 0
89774: PPUSH
89775: PPUSH
// list := [ ] ;
89776: LD_ADDR_VAR 0 5
89780: PUSH
89781: EMPTY
89782: ST_TO_ADDR
// case d of 0 :
89783: LD_VAR 0 3
89787: PUSH
89788: LD_INT 0
89790: DOUBLE
89791: EQUAL
89792: IFTRUE 89796
89794: GO 89929
89796: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
89797: LD_ADDR_VAR 0 5
89801: PUSH
89802: LD_VAR 0 1
89806: PUSH
89807: LD_INT 4
89809: MINUS
89810: PUSH
89811: LD_VAR 0 2
89815: PUSH
89816: LD_INT 4
89818: MINUS
89819: PUSH
89820: LD_INT 2
89822: PUSH
89823: EMPTY
89824: LIST
89825: LIST
89826: LIST
89827: PUSH
89828: LD_VAR 0 1
89832: PUSH
89833: LD_INT 3
89835: MINUS
89836: PUSH
89837: LD_VAR 0 2
89841: PUSH
89842: LD_INT 1
89844: PUSH
89845: EMPTY
89846: LIST
89847: LIST
89848: LIST
89849: PUSH
89850: LD_VAR 0 1
89854: PUSH
89855: LD_INT 4
89857: PLUS
89858: PUSH
89859: LD_VAR 0 2
89863: PUSH
89864: LD_INT 4
89866: PUSH
89867: EMPTY
89868: LIST
89869: LIST
89870: LIST
89871: PUSH
89872: LD_VAR 0 1
89876: PUSH
89877: LD_INT 3
89879: PLUS
89880: PUSH
89881: LD_VAR 0 2
89885: PUSH
89886: LD_INT 3
89888: PLUS
89889: PUSH
89890: LD_INT 5
89892: PUSH
89893: EMPTY
89894: LIST
89895: LIST
89896: LIST
89897: PUSH
89898: LD_VAR 0 1
89902: PUSH
89903: LD_VAR 0 2
89907: PUSH
89908: LD_INT 4
89910: PLUS
89911: PUSH
89912: LD_INT 0
89914: PUSH
89915: EMPTY
89916: LIST
89917: LIST
89918: LIST
89919: PUSH
89920: EMPTY
89921: LIST
89922: LIST
89923: LIST
89924: LIST
89925: LIST
89926: ST_TO_ADDR
// end ; 1 :
89927: GO 90627
89929: LD_INT 1
89931: DOUBLE
89932: EQUAL
89933: IFTRUE 89937
89935: GO 90070
89937: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
89938: LD_ADDR_VAR 0 5
89942: PUSH
89943: LD_VAR 0 1
89947: PUSH
89948: LD_VAR 0 2
89952: PUSH
89953: LD_INT 4
89955: MINUS
89956: PUSH
89957: LD_INT 3
89959: PUSH
89960: EMPTY
89961: LIST
89962: LIST
89963: LIST
89964: PUSH
89965: LD_VAR 0 1
89969: PUSH
89970: LD_INT 3
89972: MINUS
89973: PUSH
89974: LD_VAR 0 2
89978: PUSH
89979: LD_INT 3
89981: MINUS
89982: PUSH
89983: LD_INT 2
89985: PUSH
89986: EMPTY
89987: LIST
89988: LIST
89989: LIST
89990: PUSH
89991: LD_VAR 0 1
89995: PUSH
89996: LD_INT 4
89998: MINUS
89999: PUSH
90000: LD_VAR 0 2
90004: PUSH
90005: LD_INT 1
90007: PUSH
90008: EMPTY
90009: LIST
90010: LIST
90011: LIST
90012: PUSH
90013: LD_VAR 0 1
90017: PUSH
90018: LD_VAR 0 2
90022: PUSH
90023: LD_INT 3
90025: PLUS
90026: PUSH
90027: LD_INT 0
90029: PUSH
90030: EMPTY
90031: LIST
90032: LIST
90033: LIST
90034: PUSH
90035: LD_VAR 0 1
90039: PUSH
90040: LD_INT 4
90042: PLUS
90043: PUSH
90044: LD_VAR 0 2
90048: PUSH
90049: LD_INT 4
90051: PLUS
90052: PUSH
90053: LD_INT 5
90055: PUSH
90056: EMPTY
90057: LIST
90058: LIST
90059: LIST
90060: PUSH
90061: EMPTY
90062: LIST
90063: LIST
90064: LIST
90065: LIST
90066: LIST
90067: ST_TO_ADDR
// end ; 2 :
90068: GO 90627
90070: LD_INT 2
90072: DOUBLE
90073: EQUAL
90074: IFTRUE 90078
90076: GO 90207
90078: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
90079: LD_ADDR_VAR 0 5
90083: PUSH
90084: LD_VAR 0 1
90088: PUSH
90089: LD_VAR 0 2
90093: PUSH
90094: LD_INT 3
90096: MINUS
90097: PUSH
90098: LD_INT 3
90100: PUSH
90101: EMPTY
90102: LIST
90103: LIST
90104: LIST
90105: PUSH
90106: LD_VAR 0 1
90110: PUSH
90111: LD_INT 4
90113: PLUS
90114: PUSH
90115: LD_VAR 0 2
90119: PUSH
90120: LD_INT 4
90122: PUSH
90123: EMPTY
90124: LIST
90125: LIST
90126: LIST
90127: PUSH
90128: LD_VAR 0 1
90132: PUSH
90133: LD_VAR 0 2
90137: PUSH
90138: LD_INT 4
90140: PLUS
90141: PUSH
90142: LD_INT 0
90144: PUSH
90145: EMPTY
90146: LIST
90147: LIST
90148: LIST
90149: PUSH
90150: LD_VAR 0 1
90154: PUSH
90155: LD_INT 3
90157: MINUS
90158: PUSH
90159: LD_VAR 0 2
90163: PUSH
90164: LD_INT 1
90166: PUSH
90167: EMPTY
90168: LIST
90169: LIST
90170: LIST
90171: PUSH
90172: LD_VAR 0 1
90176: PUSH
90177: LD_INT 4
90179: MINUS
90180: PUSH
90181: LD_VAR 0 2
90185: PUSH
90186: LD_INT 4
90188: MINUS
90189: PUSH
90190: LD_INT 2
90192: PUSH
90193: EMPTY
90194: LIST
90195: LIST
90196: LIST
90197: PUSH
90198: EMPTY
90199: LIST
90200: LIST
90201: LIST
90202: LIST
90203: LIST
90204: ST_TO_ADDR
// end ; 3 :
90205: GO 90627
90207: LD_INT 3
90209: DOUBLE
90210: EQUAL
90211: IFTRUE 90215
90213: GO 90348
90215: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
90216: LD_ADDR_VAR 0 5
90220: PUSH
90221: LD_VAR 0 1
90225: PUSH
90226: LD_INT 3
90228: PLUS
90229: PUSH
90230: LD_VAR 0 2
90234: PUSH
90235: LD_INT 4
90237: PUSH
90238: EMPTY
90239: LIST
90240: LIST
90241: LIST
90242: PUSH
90243: LD_VAR 0 1
90247: PUSH
90248: LD_INT 4
90250: PLUS
90251: PUSH
90252: LD_VAR 0 2
90256: PUSH
90257: LD_INT 4
90259: PLUS
90260: PUSH
90261: LD_INT 5
90263: PUSH
90264: EMPTY
90265: LIST
90266: LIST
90267: LIST
90268: PUSH
90269: LD_VAR 0 1
90273: PUSH
90274: LD_INT 4
90276: MINUS
90277: PUSH
90278: LD_VAR 0 2
90282: PUSH
90283: LD_INT 1
90285: PUSH
90286: EMPTY
90287: LIST
90288: LIST
90289: LIST
90290: PUSH
90291: LD_VAR 0 1
90295: PUSH
90296: LD_VAR 0 2
90300: PUSH
90301: LD_INT 4
90303: MINUS
90304: PUSH
90305: LD_INT 3
90307: PUSH
90308: EMPTY
90309: LIST
90310: LIST
90311: LIST
90312: PUSH
90313: LD_VAR 0 1
90317: PUSH
90318: LD_INT 3
90320: MINUS
90321: PUSH
90322: LD_VAR 0 2
90326: PUSH
90327: LD_INT 3
90329: MINUS
90330: PUSH
90331: LD_INT 2
90333: PUSH
90334: EMPTY
90335: LIST
90336: LIST
90337: LIST
90338: PUSH
90339: EMPTY
90340: LIST
90341: LIST
90342: LIST
90343: LIST
90344: LIST
90345: ST_TO_ADDR
// end ; 4 :
90346: GO 90627
90348: LD_INT 4
90350: DOUBLE
90351: EQUAL
90352: IFTRUE 90356
90354: GO 90489
90356: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
90357: LD_ADDR_VAR 0 5
90361: PUSH
90362: LD_VAR 0 1
90366: PUSH
90367: LD_VAR 0 2
90371: PUSH
90372: LD_INT 4
90374: PLUS
90375: PUSH
90376: LD_INT 0
90378: PUSH
90379: EMPTY
90380: LIST
90381: LIST
90382: LIST
90383: PUSH
90384: LD_VAR 0 1
90388: PUSH
90389: LD_INT 3
90391: PLUS
90392: PUSH
90393: LD_VAR 0 2
90397: PUSH
90398: LD_INT 3
90400: PLUS
90401: PUSH
90402: LD_INT 5
90404: PUSH
90405: EMPTY
90406: LIST
90407: LIST
90408: LIST
90409: PUSH
90410: LD_VAR 0 1
90414: PUSH
90415: LD_INT 4
90417: PLUS
90418: PUSH
90419: LD_VAR 0 2
90423: PUSH
90424: LD_INT 4
90426: PUSH
90427: EMPTY
90428: LIST
90429: LIST
90430: LIST
90431: PUSH
90432: LD_VAR 0 1
90436: PUSH
90437: LD_VAR 0 2
90441: PUSH
90442: LD_INT 3
90444: MINUS
90445: PUSH
90446: LD_INT 3
90448: PUSH
90449: EMPTY
90450: LIST
90451: LIST
90452: LIST
90453: PUSH
90454: LD_VAR 0 1
90458: PUSH
90459: LD_INT 4
90461: MINUS
90462: PUSH
90463: LD_VAR 0 2
90467: PUSH
90468: LD_INT 4
90470: MINUS
90471: PUSH
90472: LD_INT 2
90474: PUSH
90475: EMPTY
90476: LIST
90477: LIST
90478: LIST
90479: PUSH
90480: EMPTY
90481: LIST
90482: LIST
90483: LIST
90484: LIST
90485: LIST
90486: ST_TO_ADDR
// end ; 5 :
90487: GO 90627
90489: LD_INT 5
90491: DOUBLE
90492: EQUAL
90493: IFTRUE 90497
90495: GO 90626
90497: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
90498: LD_ADDR_VAR 0 5
90502: PUSH
90503: LD_VAR 0 1
90507: PUSH
90508: LD_INT 4
90510: MINUS
90511: PUSH
90512: LD_VAR 0 2
90516: PUSH
90517: LD_INT 1
90519: PUSH
90520: EMPTY
90521: LIST
90522: LIST
90523: LIST
90524: PUSH
90525: LD_VAR 0 1
90529: PUSH
90530: LD_VAR 0 2
90534: PUSH
90535: LD_INT 4
90537: MINUS
90538: PUSH
90539: LD_INT 3
90541: PUSH
90542: EMPTY
90543: LIST
90544: LIST
90545: LIST
90546: PUSH
90547: LD_VAR 0 1
90551: PUSH
90552: LD_INT 4
90554: PLUS
90555: PUSH
90556: LD_VAR 0 2
90560: PUSH
90561: LD_INT 4
90563: PLUS
90564: PUSH
90565: LD_INT 5
90567: PUSH
90568: EMPTY
90569: LIST
90570: LIST
90571: LIST
90572: PUSH
90573: LD_VAR 0 1
90577: PUSH
90578: LD_INT 3
90580: PLUS
90581: PUSH
90582: LD_VAR 0 2
90586: PUSH
90587: LD_INT 4
90589: PUSH
90590: EMPTY
90591: LIST
90592: LIST
90593: LIST
90594: PUSH
90595: LD_VAR 0 1
90599: PUSH
90600: LD_VAR 0 2
90604: PUSH
90605: LD_INT 3
90607: PLUS
90608: PUSH
90609: LD_INT 0
90611: PUSH
90612: EMPTY
90613: LIST
90614: LIST
90615: LIST
90616: PUSH
90617: EMPTY
90618: LIST
90619: LIST
90620: LIST
90621: LIST
90622: LIST
90623: ST_TO_ADDR
// end ; end ;
90624: GO 90627
90626: POP
// result := list ;
90627: LD_ADDR_VAR 0 4
90631: PUSH
90632: LD_VAR 0 5
90636: ST_TO_ADDR
// end ;
90637: LD_VAR 0 4
90641: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
90642: LD_INT 0
90644: PPUSH
90645: PPUSH
90646: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
90647: LD_VAR 0 1
90651: NOT
90652: PUSH
90653: LD_VAR 0 2
90657: PUSH
90658: LD_INT 1
90660: PUSH
90661: LD_INT 2
90663: PUSH
90664: LD_INT 3
90666: PUSH
90667: LD_INT 4
90669: PUSH
90670: EMPTY
90671: LIST
90672: LIST
90673: LIST
90674: LIST
90675: IN
90676: NOT
90677: OR
90678: IFFALSE 90682
// exit ;
90680: GO 90765
// tmp := [ ] ;
90682: LD_ADDR_VAR 0 5
90686: PUSH
90687: EMPTY
90688: ST_TO_ADDR
// for i in units do
90689: LD_ADDR_VAR 0 4
90693: PUSH
90694: LD_VAR 0 1
90698: PUSH
90699: FOR_IN
90700: IFFALSE 90734
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
90702: LD_ADDR_VAR 0 5
90706: PUSH
90707: LD_VAR 0 5
90711: PPUSH
90712: LD_VAR 0 4
90716: PPUSH
90717: LD_VAR 0 2
90721: PPUSH
90722: CALL_OW 259
90726: PPUSH
90727: CALL 92138 0 2
90731: ST_TO_ADDR
90732: GO 90699
90734: POP
90735: POP
// if not tmp then
90736: LD_VAR 0 5
90740: NOT
90741: IFFALSE 90745
// exit ;
90743: GO 90765
// result := SortListByListDesc ( units , tmp ) ;
90745: LD_ADDR_VAR 0 3
90749: PUSH
90750: LD_VAR 0 1
90754: PPUSH
90755: LD_VAR 0 5
90759: PPUSH
90760: CALL_OW 77
90764: ST_TO_ADDR
// end ;
90765: LD_VAR 0 3
90769: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
90770: LD_INT 0
90772: PPUSH
90773: PPUSH
90774: PPUSH
// result := false ;
90775: LD_ADDR_VAR 0 3
90779: PUSH
90780: LD_INT 0
90782: ST_TO_ADDR
// if not building then
90783: LD_VAR 0 2
90787: NOT
90788: IFFALSE 90792
// exit ;
90790: GO 90930
// x := GetX ( building ) ;
90792: LD_ADDR_VAR 0 4
90796: PUSH
90797: LD_VAR 0 2
90801: PPUSH
90802: CALL_OW 250
90806: ST_TO_ADDR
// y := GetY ( building ) ;
90807: LD_ADDR_VAR 0 5
90811: PUSH
90812: LD_VAR 0 2
90816: PPUSH
90817: CALL_OW 251
90821: ST_TO_ADDR
// if not x or not y then
90822: LD_VAR 0 4
90826: NOT
90827: PUSH
90828: LD_VAR 0 5
90832: NOT
90833: OR
90834: IFFALSE 90838
// exit ;
90836: GO 90930
// if GetTaskList ( unit ) then
90838: LD_VAR 0 1
90842: PPUSH
90843: CALL_OW 437
90847: IFFALSE 90930
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
90849: LD_STRING e
90851: PUSH
90852: LD_VAR 0 1
90856: PPUSH
90857: CALL_OW 437
90861: PUSH
90862: LD_INT 1
90864: ARRAY
90865: PUSH
90866: LD_INT 1
90868: ARRAY
90869: EQUAL
90870: PUSH
90871: LD_VAR 0 4
90875: PUSH
90876: LD_VAR 0 1
90880: PPUSH
90881: CALL_OW 437
90885: PUSH
90886: LD_INT 1
90888: ARRAY
90889: PUSH
90890: LD_INT 2
90892: ARRAY
90893: EQUAL
90894: AND
90895: PUSH
90896: LD_VAR 0 5
90900: PUSH
90901: LD_VAR 0 1
90905: PPUSH
90906: CALL_OW 437
90910: PUSH
90911: LD_INT 1
90913: ARRAY
90914: PUSH
90915: LD_INT 3
90917: ARRAY
90918: EQUAL
90919: AND
90920: IFFALSE 90930
// result := true end ;
90922: LD_ADDR_VAR 0 3
90926: PUSH
90927: LD_INT 1
90929: ST_TO_ADDR
// end ;
90930: LD_VAR 0 3
90934: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
90935: LD_INT 0
90937: PPUSH
// result := false ;
90938: LD_ADDR_VAR 0 4
90942: PUSH
90943: LD_INT 0
90945: ST_TO_ADDR
// if GetTaskList ( unit ) then
90946: LD_VAR 0 1
90950: PPUSH
90951: CALL_OW 437
90955: IFFALSE 91038
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
90957: LD_STRING M
90959: PUSH
90960: LD_VAR 0 1
90964: PPUSH
90965: CALL_OW 437
90969: PUSH
90970: LD_INT 1
90972: ARRAY
90973: PUSH
90974: LD_INT 1
90976: ARRAY
90977: EQUAL
90978: PUSH
90979: LD_VAR 0 2
90983: PUSH
90984: LD_VAR 0 1
90988: PPUSH
90989: CALL_OW 437
90993: PUSH
90994: LD_INT 1
90996: ARRAY
90997: PUSH
90998: LD_INT 2
91000: ARRAY
91001: EQUAL
91002: AND
91003: PUSH
91004: LD_VAR 0 3
91008: PUSH
91009: LD_VAR 0 1
91013: PPUSH
91014: CALL_OW 437
91018: PUSH
91019: LD_INT 1
91021: ARRAY
91022: PUSH
91023: LD_INT 3
91025: ARRAY
91026: EQUAL
91027: AND
91028: IFFALSE 91038
// result := true ;
91030: LD_ADDR_VAR 0 4
91034: PUSH
91035: LD_INT 1
91037: ST_TO_ADDR
// end ; end ;
91038: LD_VAR 0 4
91042: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
91043: LD_INT 0
91045: PPUSH
91046: PPUSH
91047: PPUSH
91048: PPUSH
// if not unit or not area then
91049: LD_VAR 0 1
91053: NOT
91054: PUSH
91055: LD_VAR 0 2
91059: NOT
91060: OR
91061: IFFALSE 91065
// exit ;
91063: GO 91241
// tmp := AreaToList ( area , i ) ;
91065: LD_ADDR_VAR 0 6
91069: PUSH
91070: LD_VAR 0 2
91074: PPUSH
91075: LD_VAR 0 5
91079: PPUSH
91080: CALL_OW 517
91084: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
91085: LD_ADDR_VAR 0 5
91089: PUSH
91090: DOUBLE
91091: LD_INT 1
91093: DEC
91094: ST_TO_ADDR
91095: LD_VAR 0 6
91099: PUSH
91100: LD_INT 1
91102: ARRAY
91103: PUSH
91104: FOR_TO
91105: IFFALSE 91239
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
91107: LD_ADDR_VAR 0 7
91111: PUSH
91112: LD_VAR 0 6
91116: PUSH
91117: LD_INT 1
91119: ARRAY
91120: PUSH
91121: LD_VAR 0 5
91125: ARRAY
91126: PUSH
91127: LD_VAR 0 6
91131: PUSH
91132: LD_INT 2
91134: ARRAY
91135: PUSH
91136: LD_VAR 0 5
91140: ARRAY
91141: PUSH
91142: EMPTY
91143: LIST
91144: LIST
91145: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
91146: LD_INT 92
91148: PUSH
91149: LD_VAR 0 7
91153: PUSH
91154: LD_INT 1
91156: ARRAY
91157: PUSH
91158: LD_VAR 0 7
91162: PUSH
91163: LD_INT 2
91165: ARRAY
91166: PUSH
91167: LD_INT 2
91169: PUSH
91170: EMPTY
91171: LIST
91172: LIST
91173: LIST
91174: LIST
91175: PPUSH
91176: CALL_OW 69
91180: PUSH
91181: LD_INT 0
91183: EQUAL
91184: IFFALSE 91237
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
91186: LD_VAR 0 1
91190: PPUSH
91191: LD_VAR 0 7
91195: PUSH
91196: LD_INT 1
91198: ARRAY
91199: PPUSH
91200: LD_VAR 0 7
91204: PUSH
91205: LD_INT 2
91207: ARRAY
91208: PPUSH
91209: LD_VAR 0 3
91213: PPUSH
91214: CALL_OW 48
// result := IsPlaced ( unit ) ;
91218: LD_ADDR_VAR 0 4
91222: PUSH
91223: LD_VAR 0 1
91227: PPUSH
91228: CALL_OW 305
91232: ST_TO_ADDR
// exit ;
91233: POP
91234: POP
91235: GO 91241
// end ; end ;
91237: GO 91104
91239: POP
91240: POP
// end ;
91241: LD_VAR 0 4
91245: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
91246: LD_INT 0
91248: PPUSH
91249: PPUSH
91250: PPUSH
// if not side or side > 8 then
91251: LD_VAR 0 1
91255: NOT
91256: PUSH
91257: LD_VAR 0 1
91261: PUSH
91262: LD_INT 8
91264: GREATER
91265: OR
91266: IFFALSE 91270
// exit ;
91268: GO 91457
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
91270: LD_ADDR_VAR 0 4
91274: PUSH
91275: LD_INT 22
91277: PUSH
91278: LD_VAR 0 1
91282: PUSH
91283: EMPTY
91284: LIST
91285: LIST
91286: PUSH
91287: LD_INT 21
91289: PUSH
91290: LD_INT 3
91292: PUSH
91293: EMPTY
91294: LIST
91295: LIST
91296: PUSH
91297: EMPTY
91298: LIST
91299: LIST
91300: PPUSH
91301: CALL_OW 69
91305: ST_TO_ADDR
// if not tmp then
91306: LD_VAR 0 4
91310: NOT
91311: IFFALSE 91315
// exit ;
91313: GO 91457
// enable_addtolog := true ;
91315: LD_ADDR_OWVAR 81
91319: PUSH
91320: LD_INT 1
91322: ST_TO_ADDR
// AddToLog ( [ ) ;
91323: LD_STRING [
91325: PPUSH
91326: CALL_OW 561
// for i in tmp do
91330: LD_ADDR_VAR 0 3
91334: PUSH
91335: LD_VAR 0 4
91339: PUSH
91340: FOR_IN
91341: IFFALSE 91448
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
91343: LD_STRING [
91345: PUSH
91346: LD_VAR 0 3
91350: PPUSH
91351: CALL_OW 266
91355: STR
91356: PUSH
91357: LD_STRING , 
91359: STR
91360: PUSH
91361: LD_VAR 0 3
91365: PPUSH
91366: CALL_OW 250
91370: STR
91371: PUSH
91372: LD_STRING , 
91374: STR
91375: PUSH
91376: LD_VAR 0 3
91380: PPUSH
91381: CALL_OW 251
91385: STR
91386: PUSH
91387: LD_STRING , 
91389: STR
91390: PUSH
91391: LD_VAR 0 3
91395: PPUSH
91396: CALL_OW 254
91400: STR
91401: PUSH
91402: LD_STRING , 
91404: STR
91405: PUSH
91406: LD_VAR 0 3
91410: PPUSH
91411: LD_INT 1
91413: PPUSH
91414: CALL_OW 268
91418: STR
91419: PUSH
91420: LD_STRING , 
91422: STR
91423: PUSH
91424: LD_VAR 0 3
91428: PPUSH
91429: LD_INT 2
91431: PPUSH
91432: CALL_OW 268
91436: STR
91437: PUSH
91438: LD_STRING ],
91440: STR
91441: PPUSH
91442: CALL_OW 561
// end ;
91446: GO 91340
91448: POP
91449: POP
// AddToLog ( ]; ) ;
91450: LD_STRING ];
91452: PPUSH
91453: CALL_OW 561
// end ;
91457: LD_VAR 0 2
91461: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
91462: LD_INT 0
91464: PPUSH
91465: PPUSH
91466: PPUSH
91467: PPUSH
91468: PPUSH
// if not area or not rate or not max then
91469: LD_VAR 0 1
91473: NOT
91474: PUSH
91475: LD_VAR 0 2
91479: NOT
91480: OR
91481: PUSH
91482: LD_VAR 0 4
91486: NOT
91487: OR
91488: IFFALSE 91492
// exit ;
91490: GO 91681
// while 1 do
91492: LD_INT 1
91494: IFFALSE 91681
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
91496: LD_ADDR_VAR 0 9
91500: PUSH
91501: LD_VAR 0 1
91505: PPUSH
91506: LD_INT 1
91508: PPUSH
91509: CALL_OW 287
91513: PUSH
91514: LD_INT 10
91516: MUL
91517: ST_TO_ADDR
// r := rate / 10 ;
91518: LD_ADDR_VAR 0 7
91522: PUSH
91523: LD_VAR 0 2
91527: PUSH
91528: LD_INT 10
91530: DIVREAL
91531: ST_TO_ADDR
// time := 1 1$00 ;
91532: LD_ADDR_VAR 0 8
91536: PUSH
91537: LD_INT 2100
91539: ST_TO_ADDR
// if amount < min then
91540: LD_VAR 0 9
91544: PUSH
91545: LD_VAR 0 3
91549: LESS
91550: IFFALSE 91568
// r := r * 2 else
91552: LD_ADDR_VAR 0 7
91556: PUSH
91557: LD_VAR 0 7
91561: PUSH
91562: LD_INT 2
91564: MUL
91565: ST_TO_ADDR
91566: GO 91594
// if amount > max then
91568: LD_VAR 0 9
91572: PUSH
91573: LD_VAR 0 4
91577: GREATER
91578: IFFALSE 91594
// r := r / 2 ;
91580: LD_ADDR_VAR 0 7
91584: PUSH
91585: LD_VAR 0 7
91589: PUSH
91590: LD_INT 2
91592: DIVREAL
91593: ST_TO_ADDR
// time := time / r ;
91594: LD_ADDR_VAR 0 8
91598: PUSH
91599: LD_VAR 0 8
91603: PUSH
91604: LD_VAR 0 7
91608: DIVREAL
91609: ST_TO_ADDR
// if time < 0 then
91610: LD_VAR 0 8
91614: PUSH
91615: LD_INT 0
91617: LESS
91618: IFFALSE 91635
// time := time * - 1 ;
91620: LD_ADDR_VAR 0 8
91624: PUSH
91625: LD_VAR 0 8
91629: PUSH
91630: LD_INT 1
91632: NEG
91633: MUL
91634: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
91635: LD_VAR 0 8
91639: PUSH
91640: LD_INT 35
91642: PPUSH
91643: LD_INT 875
91645: PPUSH
91646: CALL_OW 12
91650: PLUS
91651: PPUSH
91652: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
91656: LD_INT 1
91658: PPUSH
91659: LD_INT 5
91661: PPUSH
91662: CALL_OW 12
91666: PPUSH
91667: LD_VAR 0 1
91671: PPUSH
91672: LD_INT 1
91674: PPUSH
91675: CALL_OW 55
// end ;
91679: GO 91492
// end ;
91681: LD_VAR 0 5
91685: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
91686: LD_INT 0
91688: PPUSH
91689: PPUSH
91690: PPUSH
91691: PPUSH
91692: PPUSH
91693: PPUSH
91694: PPUSH
91695: PPUSH
// if not turrets or not factories then
91696: LD_VAR 0 1
91700: NOT
91701: PUSH
91702: LD_VAR 0 2
91706: NOT
91707: OR
91708: IFFALSE 91712
// exit ;
91710: GO 92019
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
91712: LD_ADDR_VAR 0 10
91716: PUSH
91717: LD_INT 5
91719: PUSH
91720: LD_INT 6
91722: PUSH
91723: EMPTY
91724: LIST
91725: LIST
91726: PUSH
91727: LD_INT 2
91729: PUSH
91730: LD_INT 4
91732: PUSH
91733: EMPTY
91734: LIST
91735: LIST
91736: PUSH
91737: LD_INT 3
91739: PUSH
91740: LD_INT 5
91742: PUSH
91743: EMPTY
91744: LIST
91745: LIST
91746: PUSH
91747: EMPTY
91748: LIST
91749: LIST
91750: LIST
91751: PUSH
91752: LD_INT 24
91754: PUSH
91755: LD_INT 25
91757: PUSH
91758: EMPTY
91759: LIST
91760: LIST
91761: PUSH
91762: LD_INT 23
91764: PUSH
91765: LD_INT 27
91767: PUSH
91768: EMPTY
91769: LIST
91770: LIST
91771: PUSH
91772: EMPTY
91773: LIST
91774: LIST
91775: PUSH
91776: LD_INT 42
91778: PUSH
91779: LD_INT 43
91781: PUSH
91782: EMPTY
91783: LIST
91784: LIST
91785: PUSH
91786: LD_INT 44
91788: PUSH
91789: LD_INT 46
91791: PUSH
91792: EMPTY
91793: LIST
91794: LIST
91795: PUSH
91796: LD_INT 45
91798: PUSH
91799: LD_INT 47
91801: PUSH
91802: EMPTY
91803: LIST
91804: LIST
91805: PUSH
91806: EMPTY
91807: LIST
91808: LIST
91809: LIST
91810: PUSH
91811: EMPTY
91812: LIST
91813: LIST
91814: LIST
91815: ST_TO_ADDR
// result := [ ] ;
91816: LD_ADDR_VAR 0 3
91820: PUSH
91821: EMPTY
91822: ST_TO_ADDR
// for i in turrets do
91823: LD_ADDR_VAR 0 4
91827: PUSH
91828: LD_VAR 0 1
91832: PUSH
91833: FOR_IN
91834: IFFALSE 92017
// begin nat := GetNation ( i ) ;
91836: LD_ADDR_VAR 0 7
91840: PUSH
91841: LD_VAR 0 4
91845: PPUSH
91846: CALL_OW 248
91850: ST_TO_ADDR
// weapon := 0 ;
91851: LD_ADDR_VAR 0 8
91855: PUSH
91856: LD_INT 0
91858: ST_TO_ADDR
// if not nat then
91859: LD_VAR 0 7
91863: NOT
91864: IFFALSE 91868
// continue ;
91866: GO 91833
// for j in list [ nat ] do
91868: LD_ADDR_VAR 0 5
91872: PUSH
91873: LD_VAR 0 10
91877: PUSH
91878: LD_VAR 0 7
91882: ARRAY
91883: PUSH
91884: FOR_IN
91885: IFFALSE 91926
// if GetBWeapon ( i ) = j [ 1 ] then
91887: LD_VAR 0 4
91891: PPUSH
91892: CALL_OW 269
91896: PUSH
91897: LD_VAR 0 5
91901: PUSH
91902: LD_INT 1
91904: ARRAY
91905: EQUAL
91906: IFFALSE 91924
// begin weapon := j [ 2 ] ;
91908: LD_ADDR_VAR 0 8
91912: PUSH
91913: LD_VAR 0 5
91917: PUSH
91918: LD_INT 2
91920: ARRAY
91921: ST_TO_ADDR
// break ;
91922: GO 91926
// end ;
91924: GO 91884
91926: POP
91927: POP
// if not weapon then
91928: LD_VAR 0 8
91932: NOT
91933: IFFALSE 91937
// continue ;
91935: GO 91833
// for k in factories do
91937: LD_ADDR_VAR 0 6
91941: PUSH
91942: LD_VAR 0 2
91946: PUSH
91947: FOR_IN
91948: IFFALSE 92013
// begin weapons := AvailableWeaponList ( k ) ;
91950: LD_ADDR_VAR 0 9
91954: PUSH
91955: LD_VAR 0 6
91959: PPUSH
91960: CALL_OW 478
91964: ST_TO_ADDR
// if not weapons then
91965: LD_VAR 0 9
91969: NOT
91970: IFFALSE 91974
// continue ;
91972: GO 91947
// if weapon in weapons then
91974: LD_VAR 0 8
91978: PUSH
91979: LD_VAR 0 9
91983: IN
91984: IFFALSE 92011
// begin result := [ i , weapon ] ;
91986: LD_ADDR_VAR 0 3
91990: PUSH
91991: LD_VAR 0 4
91995: PUSH
91996: LD_VAR 0 8
92000: PUSH
92001: EMPTY
92002: LIST
92003: LIST
92004: ST_TO_ADDR
// exit ;
92005: POP
92006: POP
92007: POP
92008: POP
92009: GO 92019
// end ; end ;
92011: GO 91947
92013: POP
92014: POP
// end ;
92015: GO 91833
92017: POP
92018: POP
// end ;
92019: LD_VAR 0 3
92023: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
92024: LD_INT 0
92026: PPUSH
// if not side or side > 8 then
92027: LD_VAR 0 3
92031: NOT
92032: PUSH
92033: LD_VAR 0 3
92037: PUSH
92038: LD_INT 8
92040: GREATER
92041: OR
92042: IFFALSE 92046
// exit ;
92044: GO 92105
// if not range then
92046: LD_VAR 0 4
92050: NOT
92051: IFFALSE 92062
// range := - 12 ;
92053: LD_ADDR_VAR 0 4
92057: PUSH
92058: LD_INT 12
92060: NEG
92061: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
92062: LD_VAR 0 1
92066: PPUSH
92067: LD_VAR 0 2
92071: PPUSH
92072: LD_VAR 0 3
92076: PPUSH
92077: LD_VAR 0 4
92081: PPUSH
92082: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
92086: LD_VAR 0 1
92090: PPUSH
92091: LD_VAR 0 2
92095: PPUSH
92096: LD_VAR 0 3
92100: PPUSH
92101: CALL_OW 331
// end ;
92105: LD_VAR 0 5
92109: RET
// export function Video ( mode ) ; begin
92110: LD_INT 0
92112: PPUSH
// ingame_video = mode ;
92113: LD_ADDR_OWVAR 52
92117: PUSH
92118: LD_VAR 0 1
92122: ST_TO_ADDR
// interface_hidden = mode ;
92123: LD_ADDR_OWVAR 54
92127: PUSH
92128: LD_VAR 0 1
92132: ST_TO_ADDR
// end ;
92133: LD_VAR 0 2
92137: RET
// export function Join ( array , element ) ; begin
92138: LD_INT 0
92140: PPUSH
// result := Replace ( array , array + 1 , element ) ;
92141: LD_ADDR_VAR 0 3
92145: PUSH
92146: LD_VAR 0 1
92150: PPUSH
92151: LD_VAR 0 1
92155: PUSH
92156: LD_INT 1
92158: PLUS
92159: PPUSH
92160: LD_VAR 0 2
92164: PPUSH
92165: CALL_OW 1
92169: ST_TO_ADDR
// end ;
92170: LD_VAR 0 3
92174: RET
// export function JoinUnion ( array , element ) ; begin
92175: LD_INT 0
92177: PPUSH
// result := array union element ;
92178: LD_ADDR_VAR 0 3
92182: PUSH
92183: LD_VAR 0 1
92187: PUSH
92188: LD_VAR 0 2
92192: UNION
92193: ST_TO_ADDR
// end ;
92194: LD_VAR 0 3
92198: RET
// export function GetBehemoths ( side ) ; begin
92199: LD_INT 0
92201: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
92202: LD_ADDR_VAR 0 2
92206: PUSH
92207: LD_INT 22
92209: PUSH
92210: LD_VAR 0 1
92214: PUSH
92215: EMPTY
92216: LIST
92217: LIST
92218: PUSH
92219: LD_INT 31
92221: PUSH
92222: LD_INT 25
92224: PUSH
92225: EMPTY
92226: LIST
92227: LIST
92228: PUSH
92229: EMPTY
92230: LIST
92231: LIST
92232: PPUSH
92233: CALL_OW 69
92237: ST_TO_ADDR
// end ;
92238: LD_VAR 0 2
92242: RET
// export function Shuffle ( array ) ; var i , index ; begin
92243: LD_INT 0
92245: PPUSH
92246: PPUSH
92247: PPUSH
// result := [ ] ;
92248: LD_ADDR_VAR 0 2
92252: PUSH
92253: EMPTY
92254: ST_TO_ADDR
// if not array then
92255: LD_VAR 0 1
92259: NOT
92260: IFFALSE 92264
// exit ;
92262: GO 92363
// Randomize ;
92264: CALL_OW 10
// for i = array downto 1 do
92268: LD_ADDR_VAR 0 3
92272: PUSH
92273: DOUBLE
92274: LD_VAR 0 1
92278: INC
92279: ST_TO_ADDR
92280: LD_INT 1
92282: PUSH
92283: FOR_DOWNTO
92284: IFFALSE 92361
// begin index := rand ( 1 , array ) ;
92286: LD_ADDR_VAR 0 4
92290: PUSH
92291: LD_INT 1
92293: PPUSH
92294: LD_VAR 0 1
92298: PPUSH
92299: CALL_OW 12
92303: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
92304: LD_ADDR_VAR 0 2
92308: PUSH
92309: LD_VAR 0 2
92313: PPUSH
92314: LD_VAR 0 2
92318: PUSH
92319: LD_INT 1
92321: PLUS
92322: PPUSH
92323: LD_VAR 0 1
92327: PUSH
92328: LD_VAR 0 4
92332: ARRAY
92333: PPUSH
92334: CALL_OW 2
92338: ST_TO_ADDR
// array := Delete ( array , index ) ;
92339: LD_ADDR_VAR 0 1
92343: PUSH
92344: LD_VAR 0 1
92348: PPUSH
92349: LD_VAR 0 4
92353: PPUSH
92354: CALL_OW 3
92358: ST_TO_ADDR
// end ;
92359: GO 92283
92361: POP
92362: POP
// end ;
92363: LD_VAR 0 2
92367: RET
// export function GetBaseMaterials ( base ) ; begin
92368: LD_INT 0
92370: PPUSH
// result := [ 0 , 0 , 0 ] ;
92371: LD_ADDR_VAR 0 2
92375: PUSH
92376: LD_INT 0
92378: PUSH
92379: LD_INT 0
92381: PUSH
92382: LD_INT 0
92384: PUSH
92385: EMPTY
92386: LIST
92387: LIST
92388: LIST
92389: ST_TO_ADDR
// if not base then
92390: LD_VAR 0 1
92394: NOT
92395: IFFALSE 92399
// exit ;
92397: GO 92448
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
92399: LD_ADDR_VAR 0 2
92403: PUSH
92404: LD_VAR 0 1
92408: PPUSH
92409: LD_INT 1
92411: PPUSH
92412: CALL_OW 275
92416: PUSH
92417: LD_VAR 0 1
92421: PPUSH
92422: LD_INT 2
92424: PPUSH
92425: CALL_OW 275
92429: PUSH
92430: LD_VAR 0 1
92434: PPUSH
92435: LD_INT 3
92437: PPUSH
92438: CALL_OW 275
92442: PUSH
92443: EMPTY
92444: LIST
92445: LIST
92446: LIST
92447: ST_TO_ADDR
// end ;
92448: LD_VAR 0 2
92452: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
92453: LD_INT 0
92455: PPUSH
92456: PPUSH
// result := array ;
92457: LD_ADDR_VAR 0 3
92461: PUSH
92462: LD_VAR 0 1
92466: ST_TO_ADDR
// if size >= result then
92467: LD_VAR 0 2
92471: PUSH
92472: LD_VAR 0 3
92476: GREATEREQUAL
92477: IFFALSE 92481
// exit ;
92479: GO 92531
// if size then
92481: LD_VAR 0 2
92485: IFFALSE 92531
// for i := array downto size do
92487: LD_ADDR_VAR 0 4
92491: PUSH
92492: DOUBLE
92493: LD_VAR 0 1
92497: INC
92498: ST_TO_ADDR
92499: LD_VAR 0 2
92503: PUSH
92504: FOR_DOWNTO
92505: IFFALSE 92529
// result := Delete ( result , result ) ;
92507: LD_ADDR_VAR 0 3
92511: PUSH
92512: LD_VAR 0 3
92516: PPUSH
92517: LD_VAR 0 3
92521: PPUSH
92522: CALL_OW 3
92526: ST_TO_ADDR
92527: GO 92504
92529: POP
92530: POP
// end ;
92531: LD_VAR 0 3
92535: RET
// export function ComExit ( unit ) ; var tmp ; begin
92536: LD_INT 0
92538: PPUSH
92539: PPUSH
// if not IsInUnit ( unit ) then
92540: LD_VAR 0 1
92544: PPUSH
92545: CALL_OW 310
92549: NOT
92550: IFFALSE 92554
// exit ;
92552: GO 92614
// tmp := IsInUnit ( unit ) ;
92554: LD_ADDR_VAR 0 3
92558: PUSH
92559: LD_VAR 0 1
92563: PPUSH
92564: CALL_OW 310
92568: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
92569: LD_VAR 0 3
92573: PPUSH
92574: CALL_OW 247
92578: PUSH
92579: LD_INT 2
92581: EQUAL
92582: IFFALSE 92595
// ComExitVehicle ( unit ) else
92584: LD_VAR 0 1
92588: PPUSH
92589: CALL_OW 121
92593: GO 92604
// ComExitBuilding ( unit ) ;
92595: LD_VAR 0 1
92599: PPUSH
92600: CALL_OW 122
// result := tmp ;
92604: LD_ADDR_VAR 0 2
92608: PUSH
92609: LD_VAR 0 3
92613: ST_TO_ADDR
// end ;
92614: LD_VAR 0 2
92618: RET
// export function ComExitAll ( units ) ; var i ; begin
92619: LD_INT 0
92621: PPUSH
92622: PPUSH
// if not units then
92623: LD_VAR 0 1
92627: NOT
92628: IFFALSE 92632
// exit ;
92630: GO 92658
// for i in units do
92632: LD_ADDR_VAR 0 3
92636: PUSH
92637: LD_VAR 0 1
92641: PUSH
92642: FOR_IN
92643: IFFALSE 92656
// ComExit ( i ) ;
92645: LD_VAR 0 3
92649: PPUSH
92650: CALL 92536 0 1
92654: GO 92642
92656: POP
92657: POP
// end ;
92658: LD_VAR 0 2
92662: RET
// export function ResetHc ; begin
92663: LD_INT 0
92665: PPUSH
// InitHc ;
92666: CALL_OW 19
// hc_importance := 0 ;
92670: LD_ADDR_OWVAR 32
92674: PUSH
92675: LD_INT 0
92677: ST_TO_ADDR
// end ;
92678: LD_VAR 0 1
92682: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
92683: LD_INT 0
92685: PPUSH
92686: PPUSH
92687: PPUSH
// _x := ( x1 + x2 ) div 2 ;
92688: LD_ADDR_VAR 0 6
92692: PUSH
92693: LD_VAR 0 1
92697: PUSH
92698: LD_VAR 0 3
92702: PLUS
92703: PUSH
92704: LD_INT 2
92706: DIV
92707: ST_TO_ADDR
// if _x < 0 then
92708: LD_VAR 0 6
92712: PUSH
92713: LD_INT 0
92715: LESS
92716: IFFALSE 92733
// _x := _x * - 1 ;
92718: LD_ADDR_VAR 0 6
92722: PUSH
92723: LD_VAR 0 6
92727: PUSH
92728: LD_INT 1
92730: NEG
92731: MUL
92732: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
92733: LD_ADDR_VAR 0 7
92737: PUSH
92738: LD_VAR 0 2
92742: PUSH
92743: LD_VAR 0 4
92747: PLUS
92748: PUSH
92749: LD_INT 2
92751: DIV
92752: ST_TO_ADDR
// if _y < 0 then
92753: LD_VAR 0 7
92757: PUSH
92758: LD_INT 0
92760: LESS
92761: IFFALSE 92778
// _y := _y * - 1 ;
92763: LD_ADDR_VAR 0 7
92767: PUSH
92768: LD_VAR 0 7
92772: PUSH
92773: LD_INT 1
92775: NEG
92776: MUL
92777: ST_TO_ADDR
// result := [ _x , _y ] ;
92778: LD_ADDR_VAR 0 5
92782: PUSH
92783: LD_VAR 0 6
92787: PUSH
92788: LD_VAR 0 7
92792: PUSH
92793: EMPTY
92794: LIST
92795: LIST
92796: ST_TO_ADDR
// end ;
92797: LD_VAR 0 5
92801: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
92802: LD_INT 0
92804: PPUSH
92805: PPUSH
92806: PPUSH
92807: PPUSH
// task := GetTaskList ( unit ) ;
92808: LD_ADDR_VAR 0 7
92812: PUSH
92813: LD_VAR 0 1
92817: PPUSH
92818: CALL_OW 437
92822: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
92823: LD_VAR 0 7
92827: NOT
92828: PUSH
92829: LD_VAR 0 1
92833: PPUSH
92834: LD_VAR 0 2
92838: PPUSH
92839: CALL_OW 308
92843: NOT
92844: AND
92845: IFFALSE 92849
// exit ;
92847: GO 92967
// if IsInArea ( unit , area ) then
92849: LD_VAR 0 1
92853: PPUSH
92854: LD_VAR 0 2
92858: PPUSH
92859: CALL_OW 308
92863: IFFALSE 92881
// begin ComMoveToArea ( unit , goAway ) ;
92865: LD_VAR 0 1
92869: PPUSH
92870: LD_VAR 0 3
92874: PPUSH
92875: CALL_OW 113
// exit ;
92879: GO 92967
// end ; if task [ 1 ] [ 1 ] <> M then
92881: LD_VAR 0 7
92885: PUSH
92886: LD_INT 1
92888: ARRAY
92889: PUSH
92890: LD_INT 1
92892: ARRAY
92893: PUSH
92894: LD_STRING M
92896: NONEQUAL
92897: IFFALSE 92901
// exit ;
92899: GO 92967
// x := task [ 1 ] [ 2 ] ;
92901: LD_ADDR_VAR 0 5
92905: PUSH
92906: LD_VAR 0 7
92910: PUSH
92911: LD_INT 1
92913: ARRAY
92914: PUSH
92915: LD_INT 2
92917: ARRAY
92918: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
92919: LD_ADDR_VAR 0 6
92923: PUSH
92924: LD_VAR 0 7
92928: PUSH
92929: LD_INT 1
92931: ARRAY
92932: PUSH
92933: LD_INT 3
92935: ARRAY
92936: ST_TO_ADDR
// if InArea ( x , y , area ) then
92937: LD_VAR 0 5
92941: PPUSH
92942: LD_VAR 0 6
92946: PPUSH
92947: LD_VAR 0 2
92951: PPUSH
92952: CALL_OW 309
92956: IFFALSE 92967
// ComStop ( unit ) ;
92958: LD_VAR 0 1
92962: PPUSH
92963: CALL_OW 141
// end ;
92967: LD_VAR 0 4
92971: RET
// export function Abs ( value ) ; begin
92972: LD_INT 0
92974: PPUSH
// result := value ;
92975: LD_ADDR_VAR 0 2
92979: PUSH
92980: LD_VAR 0 1
92984: ST_TO_ADDR
// if value < 0 then
92985: LD_VAR 0 1
92989: PUSH
92990: LD_INT 0
92992: LESS
92993: IFFALSE 93010
// result := value * - 1 ;
92995: LD_ADDR_VAR 0 2
92999: PUSH
93000: LD_VAR 0 1
93004: PUSH
93005: LD_INT 1
93007: NEG
93008: MUL
93009: ST_TO_ADDR
// end ;
93010: LD_VAR 0 2
93014: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
93015: LD_INT 0
93017: PPUSH
93018: PPUSH
93019: PPUSH
93020: PPUSH
93021: PPUSH
93022: PPUSH
93023: PPUSH
93024: PPUSH
// if not unit or not building then
93025: LD_VAR 0 1
93029: NOT
93030: PUSH
93031: LD_VAR 0 2
93035: NOT
93036: OR
93037: IFFALSE 93041
// exit ;
93039: GO 93267
// x := GetX ( building ) ;
93041: LD_ADDR_VAR 0 4
93045: PUSH
93046: LD_VAR 0 2
93050: PPUSH
93051: CALL_OW 250
93055: ST_TO_ADDR
// y := GetY ( building ) ;
93056: LD_ADDR_VAR 0 6
93060: PUSH
93061: LD_VAR 0 2
93065: PPUSH
93066: CALL_OW 251
93070: ST_TO_ADDR
// d := GetDir ( building ) ;
93071: LD_ADDR_VAR 0 8
93075: PUSH
93076: LD_VAR 0 2
93080: PPUSH
93081: CALL_OW 254
93085: ST_TO_ADDR
// r := 4 ;
93086: LD_ADDR_VAR 0 9
93090: PUSH
93091: LD_INT 4
93093: ST_TO_ADDR
// for i := 1 to 5 do
93094: LD_ADDR_VAR 0 10
93098: PUSH
93099: DOUBLE
93100: LD_INT 1
93102: DEC
93103: ST_TO_ADDR
93104: LD_INT 5
93106: PUSH
93107: FOR_TO
93108: IFFALSE 93265
// begin _x := ShiftX ( x , d , r + i ) ;
93110: LD_ADDR_VAR 0 5
93114: PUSH
93115: LD_VAR 0 4
93119: PPUSH
93120: LD_VAR 0 8
93124: PPUSH
93125: LD_VAR 0 9
93129: PUSH
93130: LD_VAR 0 10
93134: PLUS
93135: PPUSH
93136: CALL_OW 272
93140: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
93141: LD_ADDR_VAR 0 7
93145: PUSH
93146: LD_VAR 0 6
93150: PPUSH
93151: LD_VAR 0 8
93155: PPUSH
93156: LD_VAR 0 9
93160: PUSH
93161: LD_VAR 0 10
93165: PLUS
93166: PPUSH
93167: CALL_OW 273
93171: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
93172: LD_VAR 0 5
93176: PPUSH
93177: LD_VAR 0 7
93181: PPUSH
93182: CALL_OW 488
93186: PUSH
93187: LD_VAR 0 5
93191: PPUSH
93192: LD_VAR 0 7
93196: PPUSH
93197: CALL_OW 428
93201: PPUSH
93202: CALL_OW 247
93206: PUSH
93207: LD_INT 3
93209: PUSH
93210: LD_INT 2
93212: PUSH
93213: EMPTY
93214: LIST
93215: LIST
93216: IN
93217: NOT
93218: AND
93219: IFFALSE 93263
// begin ComMoveXY ( unit , _x , _y ) ;
93221: LD_VAR 0 1
93225: PPUSH
93226: LD_VAR 0 5
93230: PPUSH
93231: LD_VAR 0 7
93235: PPUSH
93236: CALL_OW 111
// result := [ _x , _y ] ;
93240: LD_ADDR_VAR 0 3
93244: PUSH
93245: LD_VAR 0 5
93249: PUSH
93250: LD_VAR 0 7
93254: PUSH
93255: EMPTY
93256: LIST
93257: LIST
93258: ST_TO_ADDR
// exit ;
93259: POP
93260: POP
93261: GO 93267
// end ; end ;
93263: GO 93107
93265: POP
93266: POP
// end ;
93267: LD_VAR 0 3
93271: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
93272: LD_INT 0
93274: PPUSH
93275: PPUSH
93276: PPUSH
// result := 0 ;
93277: LD_ADDR_VAR 0 3
93281: PUSH
93282: LD_INT 0
93284: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
93285: LD_VAR 0 1
93289: PUSH
93290: LD_INT 0
93292: LESS
93293: PUSH
93294: LD_VAR 0 1
93298: PUSH
93299: LD_INT 8
93301: GREATER
93302: OR
93303: PUSH
93304: LD_VAR 0 2
93308: PUSH
93309: LD_INT 0
93311: LESS
93312: OR
93313: PUSH
93314: LD_VAR 0 2
93318: PUSH
93319: LD_INT 8
93321: GREATER
93322: OR
93323: IFFALSE 93327
// exit ;
93325: GO 93402
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
93327: LD_ADDR_VAR 0 4
93331: PUSH
93332: LD_INT 22
93334: PUSH
93335: LD_VAR 0 2
93339: PUSH
93340: EMPTY
93341: LIST
93342: LIST
93343: PPUSH
93344: CALL_OW 69
93348: PUSH
93349: FOR_IN
93350: IFFALSE 93400
// begin un := UnitShoot ( i ) ;
93352: LD_ADDR_VAR 0 5
93356: PUSH
93357: LD_VAR 0 4
93361: PPUSH
93362: CALL_OW 504
93366: ST_TO_ADDR
// if GetSide ( un ) = side1 then
93367: LD_VAR 0 5
93371: PPUSH
93372: CALL_OW 255
93376: PUSH
93377: LD_VAR 0 1
93381: EQUAL
93382: IFFALSE 93398
// begin result := un ;
93384: LD_ADDR_VAR 0 3
93388: PUSH
93389: LD_VAR 0 5
93393: ST_TO_ADDR
// exit ;
93394: POP
93395: POP
93396: GO 93402
// end ; end ;
93398: GO 93349
93400: POP
93401: POP
// end ;
93402: LD_VAR 0 3
93406: RET
// export function GetCargoBay ( units ) ; begin
93407: LD_INT 0
93409: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
93410: LD_ADDR_VAR 0 2
93414: PUSH
93415: LD_VAR 0 1
93419: PPUSH
93420: LD_INT 2
93422: PUSH
93423: LD_INT 34
93425: PUSH
93426: LD_INT 12
93428: PUSH
93429: EMPTY
93430: LIST
93431: LIST
93432: PUSH
93433: LD_INT 34
93435: PUSH
93436: LD_INT 51
93438: PUSH
93439: EMPTY
93440: LIST
93441: LIST
93442: PUSH
93443: LD_INT 34
93445: PUSH
93446: LD_INT 32
93448: PUSH
93449: EMPTY
93450: LIST
93451: LIST
93452: PUSH
93453: LD_INT 34
93455: PUSH
93456: LD_INT 89
93458: PUSH
93459: EMPTY
93460: LIST
93461: LIST
93462: PUSH
93463: EMPTY
93464: LIST
93465: LIST
93466: LIST
93467: LIST
93468: LIST
93469: PPUSH
93470: CALL_OW 72
93474: ST_TO_ADDR
// end ;
93475: LD_VAR 0 2
93479: RET
// export function Negate ( value ) ; begin
93480: LD_INT 0
93482: PPUSH
// result := not value ;
93483: LD_ADDR_VAR 0 2
93487: PUSH
93488: LD_VAR 0 1
93492: NOT
93493: ST_TO_ADDR
// end ;
93494: LD_VAR 0 2
93498: RET
// export function Inc ( value ) ; begin
93499: LD_INT 0
93501: PPUSH
// result := value + 1 ;
93502: LD_ADDR_VAR 0 2
93506: PUSH
93507: LD_VAR 0 1
93511: PUSH
93512: LD_INT 1
93514: PLUS
93515: ST_TO_ADDR
// end ;
93516: LD_VAR 0 2
93520: RET
// export function Dec ( value ) ; begin
93521: LD_INT 0
93523: PPUSH
// result := value - 1 ;
93524: LD_ADDR_VAR 0 2
93528: PUSH
93529: LD_VAR 0 1
93533: PUSH
93534: LD_INT 1
93536: MINUS
93537: ST_TO_ADDR
// end ;
93538: LD_VAR 0 2
93542: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
93543: LD_INT 0
93545: PPUSH
93546: PPUSH
93547: PPUSH
93548: PPUSH
93549: PPUSH
93550: PPUSH
93551: PPUSH
93552: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
93553: LD_VAR 0 1
93557: PPUSH
93558: LD_VAR 0 2
93562: PPUSH
93563: CALL_OW 488
93567: NOT
93568: PUSH
93569: LD_VAR 0 3
93573: PPUSH
93574: LD_VAR 0 4
93578: PPUSH
93579: CALL_OW 488
93583: NOT
93584: OR
93585: IFFALSE 93598
// begin result := - 1 ;
93587: LD_ADDR_VAR 0 5
93591: PUSH
93592: LD_INT 1
93594: NEG
93595: ST_TO_ADDR
// exit ;
93596: GO 93833
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
93598: LD_ADDR_VAR 0 12
93602: PUSH
93603: LD_VAR 0 1
93607: PPUSH
93608: LD_VAR 0 2
93612: PPUSH
93613: LD_VAR 0 3
93617: PPUSH
93618: LD_VAR 0 4
93622: PPUSH
93623: CALL 92683 0 4
93627: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
93628: LD_ADDR_VAR 0 11
93632: PUSH
93633: LD_VAR 0 1
93637: PPUSH
93638: LD_VAR 0 2
93642: PPUSH
93643: LD_VAR 0 12
93647: PUSH
93648: LD_INT 1
93650: ARRAY
93651: PPUSH
93652: LD_VAR 0 12
93656: PUSH
93657: LD_INT 2
93659: ARRAY
93660: PPUSH
93661: CALL_OW 298
93665: ST_TO_ADDR
// distance := 9999 ;
93666: LD_ADDR_VAR 0 10
93670: PUSH
93671: LD_INT 9999
93673: ST_TO_ADDR
// for i := 0 to 5 do
93674: LD_ADDR_VAR 0 6
93678: PUSH
93679: DOUBLE
93680: LD_INT 0
93682: DEC
93683: ST_TO_ADDR
93684: LD_INT 5
93686: PUSH
93687: FOR_TO
93688: IFFALSE 93831
// begin _x := ShiftX ( x1 , i , centerDist ) ;
93690: LD_ADDR_VAR 0 7
93694: PUSH
93695: LD_VAR 0 1
93699: PPUSH
93700: LD_VAR 0 6
93704: PPUSH
93705: LD_VAR 0 11
93709: PPUSH
93710: CALL_OW 272
93714: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
93715: LD_ADDR_VAR 0 8
93719: PUSH
93720: LD_VAR 0 2
93724: PPUSH
93725: LD_VAR 0 6
93729: PPUSH
93730: LD_VAR 0 11
93734: PPUSH
93735: CALL_OW 273
93739: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
93740: LD_VAR 0 7
93744: PPUSH
93745: LD_VAR 0 8
93749: PPUSH
93750: CALL_OW 488
93754: NOT
93755: IFFALSE 93759
// continue ;
93757: GO 93687
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
93759: LD_ADDR_VAR 0 9
93763: PUSH
93764: LD_VAR 0 12
93768: PUSH
93769: LD_INT 1
93771: ARRAY
93772: PPUSH
93773: LD_VAR 0 12
93777: PUSH
93778: LD_INT 2
93780: ARRAY
93781: PPUSH
93782: LD_VAR 0 7
93786: PPUSH
93787: LD_VAR 0 8
93791: PPUSH
93792: CALL_OW 298
93796: ST_TO_ADDR
// if tmp < distance then
93797: LD_VAR 0 9
93801: PUSH
93802: LD_VAR 0 10
93806: LESS
93807: IFFALSE 93829
// begin result := i ;
93809: LD_ADDR_VAR 0 5
93813: PUSH
93814: LD_VAR 0 6
93818: ST_TO_ADDR
// distance := tmp ;
93819: LD_ADDR_VAR 0 10
93823: PUSH
93824: LD_VAR 0 9
93828: ST_TO_ADDR
// end ; end ;
93829: GO 93687
93831: POP
93832: POP
// end ;
93833: LD_VAR 0 5
93837: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
93838: LD_INT 0
93840: PPUSH
93841: PPUSH
// if not driver or not IsInUnit ( driver ) then
93842: LD_VAR 0 1
93846: NOT
93847: PUSH
93848: LD_VAR 0 1
93852: PPUSH
93853: CALL_OW 310
93857: NOT
93858: OR
93859: IFFALSE 93863
// exit ;
93861: GO 93953
// vehicle := IsInUnit ( driver ) ;
93863: LD_ADDR_VAR 0 3
93867: PUSH
93868: LD_VAR 0 1
93872: PPUSH
93873: CALL_OW 310
93877: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
93878: LD_VAR 0 1
93882: PPUSH
93883: LD_STRING \
93885: PUSH
93886: LD_INT 0
93888: PUSH
93889: LD_INT 0
93891: PUSH
93892: LD_INT 0
93894: PUSH
93895: LD_INT 0
93897: PUSH
93898: LD_INT 0
93900: PUSH
93901: LD_INT 0
93903: PUSH
93904: EMPTY
93905: LIST
93906: LIST
93907: LIST
93908: LIST
93909: LIST
93910: LIST
93911: LIST
93912: PUSH
93913: LD_STRING E
93915: PUSH
93916: LD_INT 0
93918: PUSH
93919: LD_INT 0
93921: PUSH
93922: LD_VAR 0 3
93926: PUSH
93927: LD_INT 0
93929: PUSH
93930: LD_INT 0
93932: PUSH
93933: LD_INT 0
93935: PUSH
93936: EMPTY
93937: LIST
93938: LIST
93939: LIST
93940: LIST
93941: LIST
93942: LIST
93943: LIST
93944: PUSH
93945: EMPTY
93946: LIST
93947: LIST
93948: PPUSH
93949: CALL_OW 446
// end ;
93953: LD_VAR 0 2
93957: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
93958: LD_INT 0
93960: PPUSH
93961: PPUSH
// if not driver or not IsInUnit ( driver ) then
93962: LD_VAR 0 1
93966: NOT
93967: PUSH
93968: LD_VAR 0 1
93972: PPUSH
93973: CALL_OW 310
93977: NOT
93978: OR
93979: IFFALSE 93983
// exit ;
93981: GO 94073
// vehicle := IsInUnit ( driver ) ;
93983: LD_ADDR_VAR 0 3
93987: PUSH
93988: LD_VAR 0 1
93992: PPUSH
93993: CALL_OW 310
93997: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
93998: LD_VAR 0 1
94002: PPUSH
94003: LD_STRING \
94005: PUSH
94006: LD_INT 0
94008: PUSH
94009: LD_INT 0
94011: PUSH
94012: LD_INT 0
94014: PUSH
94015: LD_INT 0
94017: PUSH
94018: LD_INT 0
94020: PUSH
94021: LD_INT 0
94023: PUSH
94024: EMPTY
94025: LIST
94026: LIST
94027: LIST
94028: LIST
94029: LIST
94030: LIST
94031: LIST
94032: PUSH
94033: LD_STRING E
94035: PUSH
94036: LD_INT 0
94038: PUSH
94039: LD_INT 0
94041: PUSH
94042: LD_VAR 0 3
94046: PUSH
94047: LD_INT 0
94049: PUSH
94050: LD_INT 0
94052: PUSH
94053: LD_INT 0
94055: PUSH
94056: EMPTY
94057: LIST
94058: LIST
94059: LIST
94060: LIST
94061: LIST
94062: LIST
94063: LIST
94064: PUSH
94065: EMPTY
94066: LIST
94067: LIST
94068: PPUSH
94069: CALL_OW 447
// end ;
94073: LD_VAR 0 2
94077: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
94078: LD_INT 0
94080: PPUSH
94081: PPUSH
94082: PPUSH
// tmp := [ ] ;
94083: LD_ADDR_VAR 0 5
94087: PUSH
94088: EMPTY
94089: ST_TO_ADDR
// for i in units do
94090: LD_ADDR_VAR 0 4
94094: PUSH
94095: LD_VAR 0 1
94099: PUSH
94100: FOR_IN
94101: IFFALSE 94139
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
94103: LD_ADDR_VAR 0 5
94107: PUSH
94108: LD_VAR 0 5
94112: PPUSH
94113: LD_VAR 0 5
94117: PUSH
94118: LD_INT 1
94120: PLUS
94121: PPUSH
94122: LD_VAR 0 4
94126: PPUSH
94127: CALL_OW 256
94131: PPUSH
94132: CALL_OW 2
94136: ST_TO_ADDR
94137: GO 94100
94139: POP
94140: POP
// if not tmp then
94141: LD_VAR 0 5
94145: NOT
94146: IFFALSE 94150
// exit ;
94148: GO 94198
// if asc then
94150: LD_VAR 0 2
94154: IFFALSE 94178
// result := SortListByListAsc ( units , tmp ) else
94156: LD_ADDR_VAR 0 3
94160: PUSH
94161: LD_VAR 0 1
94165: PPUSH
94166: LD_VAR 0 5
94170: PPUSH
94171: CALL_OW 76
94175: ST_TO_ADDR
94176: GO 94198
// result := SortListByListDesc ( units , tmp ) ;
94178: LD_ADDR_VAR 0 3
94182: PUSH
94183: LD_VAR 0 1
94187: PPUSH
94188: LD_VAR 0 5
94192: PPUSH
94193: CALL_OW 77
94197: ST_TO_ADDR
// end ;
94198: LD_VAR 0 3
94202: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
94203: LD_INT 0
94205: PPUSH
94206: PPUSH
// task := GetTaskList ( mech ) ;
94207: LD_ADDR_VAR 0 4
94211: PUSH
94212: LD_VAR 0 1
94216: PPUSH
94217: CALL_OW 437
94221: ST_TO_ADDR
// if not task then
94222: LD_VAR 0 4
94226: NOT
94227: IFFALSE 94231
// exit ;
94229: GO 94273
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
94231: LD_ADDR_VAR 0 3
94235: PUSH
94236: LD_VAR 0 4
94240: PUSH
94241: LD_INT 1
94243: ARRAY
94244: PUSH
94245: LD_INT 1
94247: ARRAY
94248: PUSH
94249: LD_STRING r
94251: EQUAL
94252: PUSH
94253: LD_VAR 0 4
94257: PUSH
94258: LD_INT 1
94260: ARRAY
94261: PUSH
94262: LD_INT 4
94264: ARRAY
94265: PUSH
94266: LD_VAR 0 2
94270: EQUAL
94271: AND
94272: ST_TO_ADDR
// end ;
94273: LD_VAR 0 3
94277: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
94278: LD_INT 0
94280: PPUSH
// SetDir ( unit , d ) ;
94281: LD_VAR 0 1
94285: PPUSH
94286: LD_VAR 0 4
94290: PPUSH
94291: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
94295: LD_VAR 0 1
94299: PPUSH
94300: LD_VAR 0 2
94304: PPUSH
94305: LD_VAR 0 3
94309: PPUSH
94310: LD_VAR 0 5
94314: PPUSH
94315: CALL_OW 48
// end ;
94319: LD_VAR 0 6
94323: RET
// export function ToNaturalNumber ( number ) ; begin
94324: LD_INT 0
94326: PPUSH
// result := number div 1 ;
94327: LD_ADDR_VAR 0 2
94331: PUSH
94332: LD_VAR 0 1
94336: PUSH
94337: LD_INT 1
94339: DIV
94340: ST_TO_ADDR
// if number < 0 then
94341: LD_VAR 0 1
94345: PUSH
94346: LD_INT 0
94348: LESS
94349: IFFALSE 94359
// result := 0 ;
94351: LD_ADDR_VAR 0 2
94355: PUSH
94356: LD_INT 0
94358: ST_TO_ADDR
// end ;
94359: LD_VAR 0 2
94363: RET
// export function SortByClass ( units , class ) ; var un ; begin
94364: LD_INT 0
94366: PPUSH
94367: PPUSH
// if not units or not class then
94368: LD_VAR 0 1
94372: NOT
94373: PUSH
94374: LD_VAR 0 2
94378: NOT
94379: OR
94380: IFFALSE 94384
// exit ;
94382: GO 94479
// result := [ ] ;
94384: LD_ADDR_VAR 0 3
94388: PUSH
94389: EMPTY
94390: ST_TO_ADDR
// for un in units do
94391: LD_ADDR_VAR 0 4
94395: PUSH
94396: LD_VAR 0 1
94400: PUSH
94401: FOR_IN
94402: IFFALSE 94477
// if GetClass ( un ) = class then
94404: LD_VAR 0 4
94408: PPUSH
94409: CALL_OW 257
94413: PUSH
94414: LD_VAR 0 2
94418: EQUAL
94419: IFFALSE 94446
// result := Insert ( result , 1 , un ) else
94421: LD_ADDR_VAR 0 3
94425: PUSH
94426: LD_VAR 0 3
94430: PPUSH
94431: LD_INT 1
94433: PPUSH
94434: LD_VAR 0 4
94438: PPUSH
94439: CALL_OW 2
94443: ST_TO_ADDR
94444: GO 94475
// result := Replace ( result , result + 1 , un ) ;
94446: LD_ADDR_VAR 0 3
94450: PUSH
94451: LD_VAR 0 3
94455: PPUSH
94456: LD_VAR 0 3
94460: PUSH
94461: LD_INT 1
94463: PLUS
94464: PPUSH
94465: LD_VAR 0 4
94469: PPUSH
94470: CALL_OW 1
94474: ST_TO_ADDR
94475: GO 94401
94477: POP
94478: POP
// end ;
94479: LD_VAR 0 3
94483: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
94484: LD_INT 0
94486: PPUSH
94487: PPUSH
94488: PPUSH
94489: PPUSH
94490: PPUSH
94491: PPUSH
94492: PPUSH
// result := [ ] ;
94493: LD_ADDR_VAR 0 4
94497: PUSH
94498: EMPTY
94499: ST_TO_ADDR
// if x - r < 0 then
94500: LD_VAR 0 1
94504: PUSH
94505: LD_VAR 0 3
94509: MINUS
94510: PUSH
94511: LD_INT 0
94513: LESS
94514: IFFALSE 94526
// min_x := 0 else
94516: LD_ADDR_VAR 0 8
94520: PUSH
94521: LD_INT 0
94523: ST_TO_ADDR
94524: GO 94542
// min_x := x - r ;
94526: LD_ADDR_VAR 0 8
94530: PUSH
94531: LD_VAR 0 1
94535: PUSH
94536: LD_VAR 0 3
94540: MINUS
94541: ST_TO_ADDR
// if y - r < 0 then
94542: LD_VAR 0 2
94546: PUSH
94547: LD_VAR 0 3
94551: MINUS
94552: PUSH
94553: LD_INT 0
94555: LESS
94556: IFFALSE 94568
// min_y := 0 else
94558: LD_ADDR_VAR 0 7
94562: PUSH
94563: LD_INT 0
94565: ST_TO_ADDR
94566: GO 94584
// min_y := y - r ;
94568: LD_ADDR_VAR 0 7
94572: PUSH
94573: LD_VAR 0 2
94577: PUSH
94578: LD_VAR 0 3
94582: MINUS
94583: ST_TO_ADDR
// max_x := x + r ;
94584: LD_ADDR_VAR 0 9
94588: PUSH
94589: LD_VAR 0 1
94593: PUSH
94594: LD_VAR 0 3
94598: PLUS
94599: ST_TO_ADDR
// max_y := y + r ;
94600: LD_ADDR_VAR 0 10
94604: PUSH
94605: LD_VAR 0 2
94609: PUSH
94610: LD_VAR 0 3
94614: PLUS
94615: ST_TO_ADDR
// for _x = min_x to max_x do
94616: LD_ADDR_VAR 0 5
94620: PUSH
94621: DOUBLE
94622: LD_VAR 0 8
94626: DEC
94627: ST_TO_ADDR
94628: LD_VAR 0 9
94632: PUSH
94633: FOR_TO
94634: IFFALSE 94735
// for _y = min_y to max_y do
94636: LD_ADDR_VAR 0 6
94640: PUSH
94641: DOUBLE
94642: LD_VAR 0 7
94646: DEC
94647: ST_TO_ADDR
94648: LD_VAR 0 10
94652: PUSH
94653: FOR_TO
94654: IFFALSE 94731
// begin if not ValidHex ( _x , _y ) then
94656: LD_VAR 0 5
94660: PPUSH
94661: LD_VAR 0 6
94665: PPUSH
94666: CALL_OW 488
94670: NOT
94671: IFFALSE 94675
// continue ;
94673: GO 94653
// if GetResourceTypeXY ( _x , _y ) then
94675: LD_VAR 0 5
94679: PPUSH
94680: LD_VAR 0 6
94684: PPUSH
94685: CALL_OW 283
94689: IFFALSE 94729
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
94691: LD_ADDR_VAR 0 4
94695: PUSH
94696: LD_VAR 0 4
94700: PPUSH
94701: LD_VAR 0 4
94705: PUSH
94706: LD_INT 1
94708: PLUS
94709: PPUSH
94710: LD_VAR 0 5
94714: PUSH
94715: LD_VAR 0 6
94719: PUSH
94720: EMPTY
94721: LIST
94722: LIST
94723: PPUSH
94724: CALL_OW 1
94728: ST_TO_ADDR
// end ;
94729: GO 94653
94731: POP
94732: POP
94733: GO 94633
94735: POP
94736: POP
// end ;
94737: LD_VAR 0 4
94741: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
94742: LD_INT 0
94744: PPUSH
94745: PPUSH
94746: PPUSH
94747: PPUSH
94748: PPUSH
94749: PPUSH
94750: PPUSH
94751: PPUSH
// if not units then
94752: LD_VAR 0 1
94756: NOT
94757: IFFALSE 94761
// exit ;
94759: GO 95285
// result := UnitFilter ( units , [ f_ok ] ) ;
94761: LD_ADDR_VAR 0 3
94765: PUSH
94766: LD_VAR 0 1
94770: PPUSH
94771: LD_INT 50
94773: PUSH
94774: EMPTY
94775: LIST
94776: PPUSH
94777: CALL_OW 72
94781: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
94782: LD_ADDR_VAR 0 8
94786: PUSH
94787: LD_VAR 0 1
94791: PUSH
94792: LD_INT 1
94794: ARRAY
94795: PPUSH
94796: CALL_OW 255
94800: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
94801: LD_ADDR_VAR 0 10
94805: PUSH
94806: LD_INT 29
94808: PUSH
94809: LD_INT 91
94811: PUSH
94812: LD_INT 49
94814: PUSH
94815: EMPTY
94816: LIST
94817: LIST
94818: LIST
94819: ST_TO_ADDR
// if not result then
94820: LD_VAR 0 3
94824: NOT
94825: IFFALSE 94829
// exit ;
94827: GO 95285
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
94829: LD_ADDR_VAR 0 5
94833: PUSH
94834: LD_INT 81
94836: PUSH
94837: LD_VAR 0 8
94841: PUSH
94842: EMPTY
94843: LIST
94844: LIST
94845: PPUSH
94846: CALL_OW 69
94850: ST_TO_ADDR
// for i in result do
94851: LD_ADDR_VAR 0 4
94855: PUSH
94856: LD_VAR 0 3
94860: PUSH
94861: FOR_IN
94862: IFFALSE 95283
// begin tag := GetTag ( i ) + 1 ;
94864: LD_ADDR_VAR 0 9
94868: PUSH
94869: LD_VAR 0 4
94873: PPUSH
94874: CALL_OW 110
94878: PUSH
94879: LD_INT 1
94881: PLUS
94882: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
94883: LD_ADDR_VAR 0 7
94887: PUSH
94888: LD_VAR 0 4
94892: PPUSH
94893: CALL_OW 250
94897: PPUSH
94898: LD_VAR 0 4
94902: PPUSH
94903: CALL_OW 251
94907: PPUSH
94908: LD_INT 6
94910: PPUSH
94911: CALL 94484 0 3
94915: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
94916: LD_VAR 0 4
94920: PPUSH
94921: CALL_OW 247
94925: PUSH
94926: LD_INT 2
94928: EQUAL
94929: PUSH
94930: LD_VAR 0 7
94934: AND
94935: PUSH
94936: LD_VAR 0 4
94940: PPUSH
94941: CALL_OW 264
94945: PUSH
94946: LD_VAR 0 10
94950: IN
94951: NOT
94952: AND
94953: IFFALSE 94992
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
94955: LD_VAR 0 4
94959: PPUSH
94960: LD_VAR 0 7
94964: PUSH
94965: LD_INT 1
94967: ARRAY
94968: PUSH
94969: LD_INT 1
94971: ARRAY
94972: PPUSH
94973: LD_VAR 0 7
94977: PUSH
94978: LD_INT 1
94980: ARRAY
94981: PUSH
94982: LD_INT 2
94984: ARRAY
94985: PPUSH
94986: CALL_OW 116
94990: GO 95281
// if path > tag then
94992: LD_VAR 0 2
94996: PUSH
94997: LD_VAR 0 9
95001: GREATER
95002: IFFALSE 95210
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
95004: LD_ADDR_VAR 0 6
95008: PUSH
95009: LD_VAR 0 5
95013: PPUSH
95014: LD_INT 91
95016: PUSH
95017: LD_VAR 0 4
95021: PUSH
95022: LD_INT 8
95024: PUSH
95025: EMPTY
95026: LIST
95027: LIST
95028: LIST
95029: PPUSH
95030: CALL_OW 72
95034: ST_TO_ADDR
// if nearEnemy then
95035: LD_VAR 0 6
95039: IFFALSE 95108
// begin if GetWeapon ( i ) = ru_time_lapser then
95041: LD_VAR 0 4
95045: PPUSH
95046: CALL_OW 264
95050: PUSH
95051: LD_INT 49
95053: EQUAL
95054: IFFALSE 95082
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
95056: LD_VAR 0 4
95060: PPUSH
95061: LD_VAR 0 6
95065: PPUSH
95066: LD_VAR 0 4
95070: PPUSH
95071: CALL_OW 74
95075: PPUSH
95076: CALL_OW 112
95080: GO 95106
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
95082: LD_VAR 0 4
95086: PPUSH
95087: LD_VAR 0 6
95091: PPUSH
95092: LD_VAR 0 4
95096: PPUSH
95097: CALL_OW 74
95101: PPUSH
95102: CALL 96210 0 2
// end else
95106: GO 95208
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
95108: LD_VAR 0 4
95112: PPUSH
95113: LD_VAR 0 2
95117: PUSH
95118: LD_VAR 0 9
95122: ARRAY
95123: PUSH
95124: LD_INT 1
95126: ARRAY
95127: PPUSH
95128: LD_VAR 0 2
95132: PUSH
95133: LD_VAR 0 9
95137: ARRAY
95138: PUSH
95139: LD_INT 2
95141: ARRAY
95142: PPUSH
95143: CALL_OW 297
95147: PUSH
95148: LD_INT 6
95150: GREATER
95151: IFFALSE 95194
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
95153: LD_VAR 0 4
95157: PPUSH
95158: LD_VAR 0 2
95162: PUSH
95163: LD_VAR 0 9
95167: ARRAY
95168: PUSH
95169: LD_INT 1
95171: ARRAY
95172: PPUSH
95173: LD_VAR 0 2
95177: PUSH
95178: LD_VAR 0 9
95182: ARRAY
95183: PUSH
95184: LD_INT 2
95186: ARRAY
95187: PPUSH
95188: CALL_OW 114
95192: GO 95208
// SetTag ( i , tag ) ;
95194: LD_VAR 0 4
95198: PPUSH
95199: LD_VAR 0 9
95203: PPUSH
95204: CALL_OW 109
// end else
95208: GO 95281
// if enemy then
95210: LD_VAR 0 5
95214: IFFALSE 95281
// begin if GetWeapon ( i ) = ru_time_lapser then
95216: LD_VAR 0 4
95220: PPUSH
95221: CALL_OW 264
95225: PUSH
95226: LD_INT 49
95228: EQUAL
95229: IFFALSE 95257
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
95231: LD_VAR 0 4
95235: PPUSH
95236: LD_VAR 0 5
95240: PPUSH
95241: LD_VAR 0 4
95245: PPUSH
95246: CALL_OW 74
95250: PPUSH
95251: CALL_OW 112
95255: GO 95281
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
95257: LD_VAR 0 4
95261: PPUSH
95262: LD_VAR 0 5
95266: PPUSH
95267: LD_VAR 0 4
95271: PPUSH
95272: CALL_OW 74
95276: PPUSH
95277: CALL 96210 0 2
// end ; end ;
95281: GO 94861
95283: POP
95284: POP
// end ;
95285: LD_VAR 0 3
95289: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
95290: LD_INT 0
95292: PPUSH
95293: PPUSH
95294: PPUSH
// if not unit or IsInUnit ( unit ) then
95295: LD_VAR 0 1
95299: NOT
95300: PUSH
95301: LD_VAR 0 1
95305: PPUSH
95306: CALL_OW 310
95310: OR
95311: IFFALSE 95315
// exit ;
95313: GO 95406
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
95315: LD_ADDR_VAR 0 4
95319: PUSH
95320: LD_VAR 0 1
95324: PPUSH
95325: CALL_OW 250
95329: PPUSH
95330: LD_VAR 0 2
95334: PPUSH
95335: LD_INT 1
95337: PPUSH
95338: CALL_OW 272
95342: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
95343: LD_ADDR_VAR 0 5
95347: PUSH
95348: LD_VAR 0 1
95352: PPUSH
95353: CALL_OW 251
95357: PPUSH
95358: LD_VAR 0 2
95362: PPUSH
95363: LD_INT 1
95365: PPUSH
95366: CALL_OW 273
95370: ST_TO_ADDR
// if ValidHex ( x , y ) then
95371: LD_VAR 0 4
95375: PPUSH
95376: LD_VAR 0 5
95380: PPUSH
95381: CALL_OW 488
95385: IFFALSE 95406
// ComTurnXY ( unit , x , y ) ;
95387: LD_VAR 0 1
95391: PPUSH
95392: LD_VAR 0 4
95396: PPUSH
95397: LD_VAR 0 5
95401: PPUSH
95402: CALL_OW 118
// end ;
95406: LD_VAR 0 3
95410: RET
// export function SeeUnits ( side , units ) ; var i ; begin
95411: LD_INT 0
95413: PPUSH
95414: PPUSH
// result := false ;
95415: LD_ADDR_VAR 0 3
95419: PUSH
95420: LD_INT 0
95422: ST_TO_ADDR
// if not units then
95423: LD_VAR 0 2
95427: NOT
95428: IFFALSE 95432
// exit ;
95430: GO 95477
// for i in units do
95432: LD_ADDR_VAR 0 4
95436: PUSH
95437: LD_VAR 0 2
95441: PUSH
95442: FOR_IN
95443: IFFALSE 95475
// if See ( side , i ) then
95445: LD_VAR 0 1
95449: PPUSH
95450: LD_VAR 0 4
95454: PPUSH
95455: CALL_OW 292
95459: IFFALSE 95473
// begin result := true ;
95461: LD_ADDR_VAR 0 3
95465: PUSH
95466: LD_INT 1
95468: ST_TO_ADDR
// exit ;
95469: POP
95470: POP
95471: GO 95477
// end ;
95473: GO 95442
95475: POP
95476: POP
// end ;
95477: LD_VAR 0 3
95481: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
95482: LD_INT 0
95484: PPUSH
95485: PPUSH
95486: PPUSH
95487: PPUSH
// if not unit or not points then
95488: LD_VAR 0 1
95492: NOT
95493: PUSH
95494: LD_VAR 0 2
95498: NOT
95499: OR
95500: IFFALSE 95504
// exit ;
95502: GO 95594
// dist := 99999 ;
95504: LD_ADDR_VAR 0 5
95508: PUSH
95509: LD_INT 99999
95511: ST_TO_ADDR
// for i in points do
95512: LD_ADDR_VAR 0 4
95516: PUSH
95517: LD_VAR 0 2
95521: PUSH
95522: FOR_IN
95523: IFFALSE 95592
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
95525: LD_ADDR_VAR 0 6
95529: PUSH
95530: LD_VAR 0 1
95534: PPUSH
95535: LD_VAR 0 4
95539: PUSH
95540: LD_INT 1
95542: ARRAY
95543: PPUSH
95544: LD_VAR 0 4
95548: PUSH
95549: LD_INT 2
95551: ARRAY
95552: PPUSH
95553: CALL_OW 297
95557: ST_TO_ADDR
// if tmpDist < dist then
95558: LD_VAR 0 6
95562: PUSH
95563: LD_VAR 0 5
95567: LESS
95568: IFFALSE 95590
// begin result := i ;
95570: LD_ADDR_VAR 0 3
95574: PUSH
95575: LD_VAR 0 4
95579: ST_TO_ADDR
// dist := tmpDist ;
95580: LD_ADDR_VAR 0 5
95584: PUSH
95585: LD_VAR 0 6
95589: ST_TO_ADDR
// end ; end ;
95590: GO 95522
95592: POP
95593: POP
// end ;
95594: LD_VAR 0 3
95598: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
95599: LD_INT 0
95601: PPUSH
// uc_side := side ;
95602: LD_ADDR_OWVAR 20
95606: PUSH
95607: LD_VAR 0 1
95611: ST_TO_ADDR
// uc_nation := 3 ;
95612: LD_ADDR_OWVAR 21
95616: PUSH
95617: LD_INT 3
95619: ST_TO_ADDR
// vc_chassis := 25 ;
95620: LD_ADDR_OWVAR 37
95624: PUSH
95625: LD_INT 25
95627: ST_TO_ADDR
// vc_engine := engine_siberite ;
95628: LD_ADDR_OWVAR 39
95632: PUSH
95633: LD_INT 3
95635: ST_TO_ADDR
// vc_control := control_computer ;
95636: LD_ADDR_OWVAR 38
95640: PUSH
95641: LD_INT 3
95643: ST_TO_ADDR
// vc_weapon := 59 ;
95644: LD_ADDR_OWVAR 40
95648: PUSH
95649: LD_INT 59
95651: ST_TO_ADDR
// result := CreateVehicle ;
95652: LD_ADDR_VAR 0 5
95656: PUSH
95657: CALL_OW 45
95661: ST_TO_ADDR
// SetDir ( result , d ) ;
95662: LD_VAR 0 5
95666: PPUSH
95667: LD_VAR 0 4
95671: PPUSH
95672: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
95676: LD_VAR 0 5
95680: PPUSH
95681: LD_VAR 0 2
95685: PPUSH
95686: LD_VAR 0 3
95690: PPUSH
95691: LD_INT 0
95693: PPUSH
95694: CALL_OW 48
// end ;
95698: LD_VAR 0 5
95702: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
95703: LD_INT 0
95705: PPUSH
95706: PPUSH
95707: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
95708: LD_ADDR_VAR 0 2
95712: PUSH
95713: LD_INT 0
95715: PUSH
95716: LD_INT 0
95718: PUSH
95719: LD_INT 0
95721: PUSH
95722: LD_INT 0
95724: PUSH
95725: EMPTY
95726: LIST
95727: LIST
95728: LIST
95729: LIST
95730: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
95731: LD_VAR 0 1
95735: NOT
95736: PUSH
95737: LD_VAR 0 1
95741: PPUSH
95742: CALL_OW 264
95746: PUSH
95747: LD_INT 12
95749: PUSH
95750: LD_INT 51
95752: PUSH
95753: LD_INT 32
95755: PUSH
95756: LD_INT 89
95758: PUSH
95759: EMPTY
95760: LIST
95761: LIST
95762: LIST
95763: LIST
95764: IN
95765: NOT
95766: OR
95767: IFFALSE 95771
// exit ;
95769: GO 95869
// for i := 1 to 3 do
95771: LD_ADDR_VAR 0 3
95775: PUSH
95776: DOUBLE
95777: LD_INT 1
95779: DEC
95780: ST_TO_ADDR
95781: LD_INT 3
95783: PUSH
95784: FOR_TO
95785: IFFALSE 95867
// begin tmp := GetCargo ( cargo , i ) ;
95787: LD_ADDR_VAR 0 4
95791: PUSH
95792: LD_VAR 0 1
95796: PPUSH
95797: LD_VAR 0 3
95801: PPUSH
95802: CALL_OW 289
95806: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
95807: LD_ADDR_VAR 0 2
95811: PUSH
95812: LD_VAR 0 2
95816: PPUSH
95817: LD_VAR 0 3
95821: PPUSH
95822: LD_VAR 0 4
95826: PPUSH
95827: CALL_OW 1
95831: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
95832: LD_ADDR_VAR 0 2
95836: PUSH
95837: LD_VAR 0 2
95841: PPUSH
95842: LD_INT 4
95844: PPUSH
95845: LD_VAR 0 2
95849: PUSH
95850: LD_INT 4
95852: ARRAY
95853: PUSH
95854: LD_VAR 0 4
95858: PLUS
95859: PPUSH
95860: CALL_OW 1
95864: ST_TO_ADDR
// end ;
95865: GO 95784
95867: POP
95868: POP
// end ;
95869: LD_VAR 0 2
95873: RET
// export function Length ( array ) ; begin
95874: LD_INT 0
95876: PPUSH
// result := array + 0 ;
95877: LD_ADDR_VAR 0 2
95881: PUSH
95882: LD_VAR 0 1
95886: PUSH
95887: LD_INT 0
95889: PLUS
95890: ST_TO_ADDR
// end ;
95891: LD_VAR 0 2
95895: RET
// export function PrepareArray ( array ) ; begin
95896: LD_INT 0
95898: PPUSH
// result := array diff 0 ;
95899: LD_ADDR_VAR 0 2
95903: PUSH
95904: LD_VAR 0 1
95908: PUSH
95909: LD_INT 0
95911: DIFF
95912: ST_TO_ADDR
// if not result [ 1 ] then
95913: LD_VAR 0 2
95917: PUSH
95918: LD_INT 1
95920: ARRAY
95921: NOT
95922: IFFALSE 95942
// result := Delete ( result , 1 ) ;
95924: LD_ADDR_VAR 0 2
95928: PUSH
95929: LD_VAR 0 2
95933: PPUSH
95934: LD_INT 1
95936: PPUSH
95937: CALL_OW 3
95941: ST_TO_ADDR
// end ;
95942: LD_VAR 0 2
95946: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
95947: LD_INT 0
95949: PPUSH
95950: PPUSH
95951: PPUSH
95952: PPUSH
// sibRocketRange := 25 ;
95953: LD_ADDR_VAR 0 6
95957: PUSH
95958: LD_INT 25
95960: ST_TO_ADDR
// result := false ;
95961: LD_ADDR_VAR 0 4
95965: PUSH
95966: LD_INT 0
95968: ST_TO_ADDR
// for i := 0 to 5 do
95969: LD_ADDR_VAR 0 5
95973: PUSH
95974: DOUBLE
95975: LD_INT 0
95977: DEC
95978: ST_TO_ADDR
95979: LD_INT 5
95981: PUSH
95982: FOR_TO
95983: IFFALSE 96050
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
95985: LD_VAR 0 1
95989: PPUSH
95990: LD_VAR 0 5
95994: PPUSH
95995: LD_VAR 0 6
95999: PPUSH
96000: CALL_OW 272
96004: PPUSH
96005: LD_VAR 0 2
96009: PPUSH
96010: LD_VAR 0 5
96014: PPUSH
96015: LD_VAR 0 6
96019: PPUSH
96020: CALL_OW 273
96024: PPUSH
96025: LD_VAR 0 3
96029: PPUSH
96030: CALL_OW 309
96034: IFFALSE 96048
// begin result := true ;
96036: LD_ADDR_VAR 0 4
96040: PUSH
96041: LD_INT 1
96043: ST_TO_ADDR
// exit ;
96044: POP
96045: POP
96046: GO 96052
// end ;
96048: GO 95982
96050: POP
96051: POP
// end ;
96052: LD_VAR 0 4
96056: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
96057: LD_INT 0
96059: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
96060: LD_VAR 0 1
96064: PPUSH
96065: LD_VAR 0 2
96069: PPUSH
96070: LD_INT 0
96072: PPUSH
96073: LD_INT 0
96075: PPUSH
96076: LD_INT 1
96078: PPUSH
96079: LD_INT 0
96081: PPUSH
96082: CALL_OW 587
// end ;
96086: LD_VAR 0 3
96090: RET
// export function CenterOnNow ( unit ) ; begin
96091: LD_INT 0
96093: PPUSH
// result := IsInUnit ( unit ) ;
96094: LD_ADDR_VAR 0 2
96098: PUSH
96099: LD_VAR 0 1
96103: PPUSH
96104: CALL_OW 310
96108: ST_TO_ADDR
// if not result then
96109: LD_VAR 0 2
96113: NOT
96114: IFFALSE 96126
// result := unit ;
96116: LD_ADDR_VAR 0 2
96120: PUSH
96121: LD_VAR 0 1
96125: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
96126: LD_VAR 0 1
96130: PPUSH
96131: CALL_OW 87
// end ;
96135: LD_VAR 0 2
96139: RET
// export function ComMoveHex ( unit , hex ) ; begin
96140: LD_INT 0
96142: PPUSH
// if not hex then
96143: LD_VAR 0 2
96147: NOT
96148: IFFALSE 96152
// exit ;
96150: GO 96205
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
96152: LD_VAR 0 2
96156: PUSH
96157: LD_INT 1
96159: ARRAY
96160: PPUSH
96161: LD_VAR 0 2
96165: PUSH
96166: LD_INT 2
96168: ARRAY
96169: PPUSH
96170: CALL_OW 428
96174: IFFALSE 96178
// exit ;
96176: GO 96205
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
96178: LD_VAR 0 1
96182: PPUSH
96183: LD_VAR 0 2
96187: PUSH
96188: LD_INT 1
96190: ARRAY
96191: PPUSH
96192: LD_VAR 0 2
96196: PUSH
96197: LD_INT 2
96199: ARRAY
96200: PPUSH
96201: CALL_OW 111
// end ;
96205: LD_VAR 0 3
96209: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
96210: LD_INT 0
96212: PPUSH
96213: PPUSH
96214: PPUSH
// if not unit or not enemy then
96215: LD_VAR 0 1
96219: NOT
96220: PUSH
96221: LD_VAR 0 2
96225: NOT
96226: OR
96227: IFFALSE 96231
// exit ;
96229: GO 96355
// x := GetX ( enemy ) ;
96231: LD_ADDR_VAR 0 4
96235: PUSH
96236: LD_VAR 0 2
96240: PPUSH
96241: CALL_OW 250
96245: ST_TO_ADDR
// y := GetY ( enemy ) ;
96246: LD_ADDR_VAR 0 5
96250: PUSH
96251: LD_VAR 0 2
96255: PPUSH
96256: CALL_OW 251
96260: ST_TO_ADDR
// if ValidHex ( x , y ) then
96261: LD_VAR 0 4
96265: PPUSH
96266: LD_VAR 0 5
96270: PPUSH
96271: CALL_OW 488
96275: IFFALSE 96355
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
96277: LD_VAR 0 2
96281: PPUSH
96282: CALL_OW 247
96286: PUSH
96287: LD_INT 3
96289: PUSH
96290: LD_INT 2
96292: PUSH
96293: EMPTY
96294: LIST
96295: LIST
96296: IN
96297: PUSH
96298: LD_VAR 0 1
96302: PPUSH
96303: CALL_OW 255
96307: PPUSH
96308: LD_VAR 0 2
96312: PPUSH
96313: CALL_OW 292
96317: AND
96318: IFFALSE 96336
// ComAttackUnit ( unit , enemy ) else
96320: LD_VAR 0 1
96324: PPUSH
96325: LD_VAR 0 2
96329: PPUSH
96330: CALL_OW 115
96334: GO 96355
// ComAgressiveMove ( unit , x , y ) ;
96336: LD_VAR 0 1
96340: PPUSH
96341: LD_VAR 0 4
96345: PPUSH
96346: LD_VAR 0 5
96350: PPUSH
96351: CALL_OW 114
// end ; end_of_file
96355: LD_VAR 0 3
96359: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
96360: LD_VAR 0 1
96364: PUSH
96365: LD_INT 200
96367: DOUBLE
96368: GREATEREQUAL
96369: IFFALSE 96377
96371: LD_INT 299
96373: DOUBLE
96374: LESSEQUAL
96375: IFTRUE 96379
96377: GO 96411
96379: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
96380: LD_VAR 0 1
96384: PPUSH
96385: LD_VAR 0 2
96389: PPUSH
96390: LD_VAR 0 3
96394: PPUSH
96395: LD_VAR 0 4
96399: PPUSH
96400: LD_VAR 0 5
96404: PPUSH
96405: CALL 50084 0 5
96409: GO 96488
96411: LD_INT 300
96413: DOUBLE
96414: GREATEREQUAL
96415: IFFALSE 96423
96417: LD_INT 399
96419: DOUBLE
96420: LESSEQUAL
96421: IFTRUE 96425
96423: GO 96487
96425: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
96426: LD_VAR 0 1
96430: PPUSH
96431: LD_VAR 0 2
96435: PPUSH
96436: LD_VAR 0 3
96440: PPUSH
96441: LD_VAR 0 4
96445: PPUSH
96446: LD_VAR 0 5
96450: PPUSH
96451: LD_VAR 0 6
96455: PPUSH
96456: LD_VAR 0 7
96460: PPUSH
96461: LD_VAR 0 8
96465: PPUSH
96466: LD_VAR 0 9
96470: PPUSH
96471: LD_VAR 0 10
96475: PPUSH
96476: LD_VAR 0 11
96480: PPUSH
96481: CALL 46409 0 11
96485: GO 96488
96487: POP
// end ;
96488: PPOPN 11
96490: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
96491: LD_VAR 0 1
96495: PPUSH
96496: LD_VAR 0 2
96500: PPUSH
96501: LD_VAR 0 3
96505: PPUSH
96506: LD_VAR 0 4
96510: PPUSH
96511: LD_VAR 0 5
96515: PPUSH
96516: CALL 49820 0 5
// end ; end_of_file
96520: PPOPN 5
96522: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
96523: LD_VAR 0 1
96527: PPUSH
96528: LD_VAR 0 2
96532: PPUSH
96533: LD_VAR 0 3
96537: PPUSH
96538: LD_VAR 0 4
96542: PPUSH
96543: LD_VAR 0 5
96547: PPUSH
96548: LD_VAR 0 6
96552: PPUSH
96553: CALL 34061 0 6
// end ;
96557: PPOPN 6
96559: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
96560: LD_INT 0
96562: PPUSH
// begin if not units then
96563: LD_VAR 0 1
96567: NOT
96568: IFFALSE 96572
// exit ;
96570: GO 96572
// end ;
96572: PPOPN 7
96574: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
96575: CALL 33965 0 0
// end ;
96579: PPOPN 1
96581: END
