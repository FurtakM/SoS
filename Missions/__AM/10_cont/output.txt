// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned , ruDepotConstructed , spawnRussians ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 20
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 29
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 38
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 39
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 40
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 41
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 42
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 50
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 47
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 46
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 48
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 49
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 61
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 51
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: LD_INT 6
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: PUSH
 146: LD_OWVAR 67
 150: ARRAY
 151: ST_TO_ADDR
// eventVar1 = 0 ;
 152: LD_ADDR_EXP 65
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// eventVar2 = 0 ;
 160: LD_ADDR_EXP 66
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// fastEnd = 0 ;
 168: LD_ADDR_EXP 63
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// KhatamStatus = 0 ;
 176: LD_ADDR_EXP 53
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// GensherStatus = 0 ;
 184: LD_ADDR_EXP 52
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// cratesSpawned = 0 ;
 192: LD_ADDR_EXP 56
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 , 2 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 59
 204: PUSH
 205: LD_INT 1
 207: PUSH
 208: LD_INT 2
 210: PUSH
 211: LD_INT 2
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 , 4 ] [ Difficulty ] ;
 229: LD_ADDR_EXP 60
 233: PUSH
 234: LD_INT 2
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: LD_INT 4
 242: PUSH
 243: LD_INT 4
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_OWVAR 67
 256: ARRAY
 257: ST_TO_ADDR
// snipersTrained := false ;
 258: LD_ADDR_EXP 62
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// ruDepotConstructed := false ;
 266: LD_ADDR_EXP 57
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// spawnRussians := false ;
 274: LD_ADDR_EXP 58
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// attackAvalaible = 1 ;
 282: LD_ADDR_EXP 64
 286: PUSH
 287: LD_INT 1
 289: ST_TO_ADDR
// mission_prefix := 10c_ ;
 290: LD_ADDR_EXP 54
 294: PUSH
 295: LD_STRING 10c_
 297: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 298: LD_ADDR_EXP 55
 302: PUSH
 303: LD_STRING 10_
 305: ST_TO_ADDR
// debugMode = 0 ;
 306: LD_ADDR_EXP 67
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// CreateNature ;
 314: CALL 26779 0 0
// PrepareDifficulty ;
 318: CALL 11448 0 0
// PrepareJMMTeam ;
 322: CALL 1370 0 0
// PrepareCathyTeam ;
 326: CALL 2606 0 0
// PlaceMines ( MineField1 , 1 + Difficulty ) ;
 330: LD_INT 24
 332: PPUSH
 333: LD_INT 1
 335: PUSH
 336: LD_OWVAR 67
 340: PLUS
 341: PPUSH
 342: CALL 21308 0 2
// if Difficulty > 1 then
 346: LD_OWVAR 67
 350: PUSH
 351: LD_INT 1
 353: GREATER
 354: IFFALSE 368
// PlaceMines ( MineField2 , Difficulty ) ;
 356: LD_INT 25
 358: PPUSH
 359: LD_OWVAR 67
 363: PPUSH
 364: CALL 21308 0 2
// if Difficulty > 2 then
 368: LD_OWVAR 67
 372: PUSH
 373: LD_INT 2
 375: GREATER
 376: IFFALSE 390
// PlaceMines ( MineField3 , Difficulty ) ;
 378: LD_INT 26
 380: PPUSH
 381: LD_OWVAR 67
 385: PPUSH
 386: CALL 21308 0 2
// PrepareArabianCommander ;
 390: CALL 4088 0 0
// PrepareArabian ;
 394: CALL 4140 0 0
// BuildArabianBase ;
 398: CALL 14263 0 0
// TameApemans ;
 402: CALL 20113 0 0
// end ;
 406: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 407: LD_EXP 67
 411: PUSH
 412: LD_INT 1
 414: EQUAL
 415: IFFALSE 721
 417: GO 419
 419: DISABLE
 420: LD_INT 0
 422: PPUSH
// begin enable ;
 423: ENABLE
// fogoff ( true ) ;
 424: LD_INT 1
 426: PPUSH
 427: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 431: LD_ADDR_VAR 0 1
 435: PUSH
 436: LD_INT 22
 438: PUSH
 439: LD_INT 1
 441: PUSH
 442: EMPTY
 443: LIST
 444: LIST
 445: PUSH
 446: LD_INT 21
 448: PUSH
 449: LD_INT 1
 451: PUSH
 452: EMPTY
 453: LIST
 454: LIST
 455: PUSH
 456: EMPTY
 457: LIST
 458: LIST
 459: PPUSH
 460: CALL_OW 69
 464: PUSH
 465: FOR_IN
 466: IFFALSE 482
// SetLives ( i , 1000 ) ;
 468: LD_VAR 0 1
 472: PPUSH
 473: LD_INT 1000
 475: PPUSH
 476: CALL_OW 234
 480: GO 465
 482: POP
 483: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 484: LD_ADDR_VAR 0 1
 488: PUSH
 489: LD_INT 22
 491: PUSH
 492: LD_INT 1
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 2
 501: PUSH
 502: LD_INT 30
 504: PUSH
 505: LD_INT 0
 507: PUSH
 508: EMPTY
 509: LIST
 510: LIST
 511: PUSH
 512: LD_INT 30
 514: PUSH
 515: LD_INT 1
 517: PUSH
 518: EMPTY
 519: LIST
 520: LIST
 521: PUSH
 522: EMPTY
 523: LIST
 524: LIST
 525: LIST
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PPUSH
 531: CALL_OW 69
 535: PUSH
 536: FOR_IN
 537: IFFALSE 561
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 539: LD_VAR 0 1
 543: PPUSH
 544: CALL_OW 274
 548: PPUSH
 549: LD_INT 1
 551: PPUSH
 552: LD_INT 9999
 554: PPUSH
 555: CALL_OW 277
 559: GO 536
 561: POP
 562: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 563: LD_ADDR_VAR 0 1
 567: PUSH
 568: LD_INT 22
 570: PUSH
 571: LD_INT 1
 573: PUSH
 574: EMPTY
 575: LIST
 576: LIST
 577: PUSH
 578: LD_INT 2
 580: PUSH
 581: LD_INT 30
 583: PUSH
 584: LD_INT 0
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PUSH
 591: LD_INT 30
 593: PUSH
 594: LD_INT 1
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: LIST
 605: PUSH
 606: EMPTY
 607: LIST
 608: LIST
 609: PPUSH
 610: CALL_OW 69
 614: PUSH
 615: FOR_IN
 616: IFFALSE 640
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 618: LD_VAR 0 1
 622: PPUSH
 623: CALL_OW 274
 627: PPUSH
 628: LD_INT 2
 630: PPUSH
 631: LD_INT 9999
 633: PPUSH
 634: CALL_OW 277
 638: GO 615
 640: POP
 641: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 642: LD_ADDR_VAR 0 1
 646: PUSH
 647: LD_INT 22
 649: PUSH
 650: LD_INT 1
 652: PUSH
 653: EMPTY
 654: LIST
 655: LIST
 656: PUSH
 657: LD_INT 2
 659: PUSH
 660: LD_INT 30
 662: PUSH
 663: LD_INT 0
 665: PUSH
 666: EMPTY
 667: LIST
 668: LIST
 669: PUSH
 670: LD_INT 30
 672: PUSH
 673: LD_INT 1
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: LIST
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PPUSH
 689: CALL_OW 69
 693: PUSH
 694: FOR_IN
 695: IFFALSE 719
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 697: LD_VAR 0 1
 701: PPUSH
 702: CALL_OW 274
 706: PPUSH
 707: LD_INT 3
 709: PPUSH
 710: LD_INT 9999
 712: PPUSH
 713: CALL_OW 277
 717: GO 694
 719: POP
 720: POP
// end ;
 721: PPOPN 1
 723: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 724: LD_INT 25
 726: PUSH
 727: LD_INT 5
 729: PUSH
 730: EMPTY
 731: LIST
 732: LIST
 733: PPUSH
 734: CALL_OW 69
 738: IFFALSE 751
 740: GO 742
 742: DISABLE
// snipersTrained := true ;
 743: LD_ADDR_EXP 62
 747: PUSH
 748: LD_INT 1
 750: ST_TO_ADDR
 751: END
// every 0 0$1 trigger GetAttitude ( 1 , 2 ) = att_friend and ruDestroyedBuildings and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] ] ) = 0 do
 752: LD_INT 1
 754: PPUSH
 755: LD_INT 2
 757: PPUSH
 758: CALL_OW 81
 762: PUSH
 763: LD_INT 1
 765: EQUAL
 766: PUSH
 767: LD_EXP 42
 771: AND
 772: PUSH
 773: LD_INT 22
 775: PUSH
 776: LD_INT 3
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PUSH
 783: LD_INT 21
 785: PUSH
 786: LD_INT 3
 788: PUSH
 789: EMPTY
 790: LIST
 791: LIST
 792: PUSH
 793: EMPTY
 794: LIST
 795: LIST
 796: PPUSH
 797: CALL_OW 69
 801: PUSH
 802: LD_INT 0
 804: EQUAL
 805: AND
 806: IFFALSE 818
 808: GO 810
 810: DISABLE
// SetAchievement ( ACH_POWER ) ;
 811: LD_STRING ACH_POWER
 813: PPUSH
 814: CALL_OW 543
 818: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 819: LD_INT 22
 821: PUSH
 822: LD_INT 1
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: LD_INT 30
 831: PUSH
 832: LD_INT 1
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PPUSH
 843: CALL_OW 69
 847: PUSH
 848: LD_INT 22
 850: PUSH
 851: LD_INT 1
 853: PUSH
 854: EMPTY
 855: LIST
 856: LIST
 857: PUSH
 858: LD_INT 30
 860: PUSH
 861: LD_INT 32
 863: PUSH
 864: EMPTY
 865: LIST
 866: LIST
 867: PUSH
 868: EMPTY
 869: LIST
 870: LIST
 871: PPUSH
 872: CALL_OW 69
 876: AND
 877: PUSH
 878: LD_INT 22
 880: PUSH
 881: LD_INT 1
 883: PUSH
 884: EMPTY
 885: LIST
 886: LIST
 887: PUSH
 888: LD_INT 30
 890: PUSH
 891: LD_INT 33
 893: PUSH
 894: EMPTY
 895: LIST
 896: LIST
 897: PUSH
 898: EMPTY
 899: LIST
 900: LIST
 901: PPUSH
 902: CALL_OW 69
 906: AND
 907: PUSH
 908: LD_INT 22
 910: PUSH
 911: LD_INT 1
 913: PUSH
 914: EMPTY
 915: LIST
 916: LIST
 917: PUSH
 918: LD_INT 30
 920: PUSH
 921: LD_INT 5
 923: PUSH
 924: EMPTY
 925: LIST
 926: LIST
 927: PUSH
 928: EMPTY
 929: LIST
 930: LIST
 931: PPUSH
 932: CALL_OW 69
 936: AND
 937: PUSH
 938: LD_INT 22
 940: PUSH
 941: LD_INT 1
 943: PUSH
 944: EMPTY
 945: LIST
 946: LIST
 947: PUSH
 948: LD_INT 30
 950: PUSH
 951: LD_INT 3
 953: PUSH
 954: EMPTY
 955: LIST
 956: LIST
 957: PUSH
 958: EMPTY
 959: LIST
 960: LIST
 961: PPUSH
 962: CALL_OW 69
 966: AND
 967: PUSH
 968: LD_INT 22
 970: PUSH
 971: LD_INT 1
 973: PUSH
 974: EMPTY
 975: LIST
 976: LIST
 977: PUSH
 978: LD_INT 30
 980: PUSH
 981: LD_INT 36
 983: PUSH
 984: EMPTY
 985: LIST
 986: LIST
 987: PUSH
 988: EMPTY
 989: LIST
 990: LIST
 991: PPUSH
 992: CALL_OW 69
 996: AND
 997: PUSH
 998: LD_INT 22
1000: PUSH
1001: LD_INT 1
1003: PUSH
1004: EMPTY
1005: LIST
1006: LIST
1007: PUSH
1008: LD_INT 30
1010: PUSH
1011: LD_INT 31
1013: PUSH
1014: EMPTY
1015: LIST
1016: LIST
1017: PUSH
1018: EMPTY
1019: LIST
1020: LIST
1021: PPUSH
1022: CALL_OW 69
1026: AND
1027: PUSH
1028: LD_INT 22
1030: PUSH
1031: LD_INT 1
1033: PUSH
1034: EMPTY
1035: LIST
1036: LIST
1037: PUSH
1038: LD_INT 30
1040: PUSH
1041: LD_INT 22
1043: PUSH
1044: EMPTY
1045: LIST
1046: LIST
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: PPUSH
1052: CALL_OW 69
1056: AND
1057: PUSH
1058: LD_INT 22
1060: PUSH
1061: LD_INT 1
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: PUSH
1068: LD_INT 30
1070: PUSH
1071: LD_INT 20
1073: PUSH
1074: EMPTY
1075: LIST
1076: LIST
1077: PUSH
1078: EMPTY
1079: LIST
1080: LIST
1081: PPUSH
1082: CALL_OW 69
1086: AND
1087: PUSH
1088: LD_INT 22
1090: PUSH
1091: LD_INT 1
1093: PUSH
1094: EMPTY
1095: LIST
1096: LIST
1097: PUSH
1098: LD_INT 30
1100: PUSH
1101: LD_INT 19
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: PPUSH
1112: CALL_OW 69
1116: AND
1117: PUSH
1118: LD_INT 22
1120: PUSH
1121: LD_INT 1
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: PUSH
1128: LD_INT 30
1130: PUSH
1131: LD_INT 16
1133: PUSH
1134: EMPTY
1135: LIST
1136: LIST
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: PPUSH
1142: CALL_OW 69
1146: AND
1147: PUSH
1148: LD_INT 22
1150: PUSH
1151: LD_INT 1
1153: PUSH
1154: EMPTY
1155: LIST
1156: LIST
1157: PUSH
1158: LD_INT 30
1160: PUSH
1161: LD_INT 17
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: PUSH
1168: EMPTY
1169: LIST
1170: LIST
1171: PPUSH
1172: CALL_OW 69
1176: AND
1177: PUSH
1178: LD_INT 22
1180: PUSH
1181: LD_INT 1
1183: PUSH
1184: EMPTY
1185: LIST
1186: LIST
1187: PUSH
1188: LD_INT 30
1190: PUSH
1191: LD_INT 21
1193: PUSH
1194: EMPTY
1195: LIST
1196: LIST
1197: PUSH
1198: EMPTY
1199: LIST
1200: LIST
1201: PPUSH
1202: CALL_OW 69
1206: AND
1207: PUSH
1208: LD_INT 22
1210: PUSH
1211: LD_INT 1
1213: PUSH
1214: EMPTY
1215: LIST
1216: LIST
1217: PUSH
1218: LD_INT 30
1220: PUSH
1221: LD_INT 29
1223: PUSH
1224: EMPTY
1225: LIST
1226: LIST
1227: PUSH
1228: EMPTY
1229: LIST
1230: LIST
1231: PPUSH
1232: CALL_OW 69
1236: AND
1237: PUSH
1238: LD_INT 22
1240: PUSH
1241: LD_INT 1
1243: PUSH
1244: EMPTY
1245: LIST
1246: LIST
1247: PUSH
1248: LD_INT 30
1250: PUSH
1251: LD_INT 30
1253: PUSH
1254: EMPTY
1255: LIST
1256: LIST
1257: PUSH
1258: EMPTY
1259: LIST
1260: LIST
1261: PPUSH
1262: CALL_OW 69
1266: AND
1267: PUSH
1268: LD_INT 22
1270: PUSH
1271: LD_INT 1
1273: PUSH
1274: EMPTY
1275: LIST
1276: LIST
1277: PUSH
1278: LD_INT 30
1280: PUSH
1281: LD_INT 27
1283: PUSH
1284: EMPTY
1285: LIST
1286: LIST
1287: PUSH
1288: EMPTY
1289: LIST
1290: LIST
1291: PPUSH
1292: CALL_OW 69
1296: AND
1297: PUSH
1298: LD_INT 22
1300: PUSH
1301: LD_INT 1
1303: PUSH
1304: EMPTY
1305: LIST
1306: LIST
1307: PUSH
1308: LD_INT 30
1310: PUSH
1311: LD_INT 26
1313: PUSH
1314: EMPTY
1315: LIST
1316: LIST
1317: PUSH
1318: EMPTY
1319: LIST
1320: LIST
1321: PPUSH
1322: CALL_OW 69
1326: AND
1327: PUSH
1328: LD_INT 22
1330: PUSH
1331: LD_INT 1
1333: PUSH
1334: EMPTY
1335: LIST
1336: LIST
1337: PUSH
1338: LD_INT 30
1340: PUSH
1341: LD_INT 28
1343: PUSH
1344: EMPTY
1345: LIST
1346: LIST
1347: PUSH
1348: EMPTY
1349: LIST
1350: LIST
1351: PPUSH
1352: CALL_OW 69
1356: AND
1357: IFFALSE 1369
1359: GO 1361
1361: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1362: LD_STRING ACH_ARCH
1364: PPUSH
1365: CALL_OW 543
1369: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1370: LD_INT 0
1372: PPUSH
1373: PPUSH
1374: PPUSH
1375: PPUSH
1376: PPUSH
1377: PPUSH
// uc_side = 1 ;
1378: LD_ADDR_OWVAR 20
1382: PUSH
1383: LD_INT 1
1385: ST_TO_ADDR
// uc_nation = 1 ;
1386: LD_ADDR_OWVAR 21
1390: PUSH
1391: LD_INT 1
1393: ST_TO_ADDR
// count = 0 ;
1394: LD_ADDR_VAR 0 6
1398: PUSH
1399: LD_INT 0
1401: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 10_ ) ;
1402: LD_ADDR_EXP 1
1406: PUSH
1407: LD_STRING JMM
1409: PPUSH
1410: LD_INT 1
1412: PPUSH
1413: LD_STRING 10_
1415: PPUSH
1416: CALL 47006 0 3
1420: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1421: LD_ADDR_EXP 20
1425: PUSH
1426: LD_EXP 20
1430: PUSH
1431: LD_EXP 1
1435: ADD
1436: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 10_ ) ;
1437: LD_ADDR_EXP 10
1441: PUSH
1442: LD_STRING Gary
1444: PPUSH
1445: LD_INT 1
1447: PPUSH
1448: LD_STRING 10_
1450: PPUSH
1451: CALL 47006 0 3
1455: ST_TO_ADDR
// if Gary then
1456: LD_EXP 10
1460: IFFALSE 1478
// JMMSquad = JMMSquad ^ Gary ;
1462: LD_ADDR_EXP 20
1466: PUSH
1467: LD_EXP 20
1471: PUSH
1472: LD_EXP 10
1476: ADD
1477: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 10_ ) ;
1478: LD_ADDR_EXP 5
1482: PUSH
1483: LD_STRING Cyrus
1485: PPUSH
1486: LD_INT 1
1488: PPUSH
1489: LD_STRING 10_
1491: PPUSH
1492: CALL 47006 0 3
1496: ST_TO_ADDR
// if Cyrus then
1497: LD_EXP 5
1501: IFFALSE 1519
// JMMSquad = JMMSquad ^ Cyrus ;
1503: LD_ADDR_EXP 20
1507: PUSH
1508: LD_EXP 20
1512: PUSH
1513: LD_EXP 5
1517: ADD
1518: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 10_ ) ;
1519: LD_ADDR_EXP 4
1523: PUSH
1524: LD_STRING Bobby
1526: PPUSH
1527: LD_INT 1
1529: PPUSH
1530: LD_STRING 10_
1532: PPUSH
1533: CALL 47006 0 3
1537: ST_TO_ADDR
// if Bobby then
1538: LD_EXP 4
1542: IFFALSE 1560
// JMMSquad = JMMSquad ^ Bobby ;
1544: LD_ADDR_EXP 20
1548: PUSH
1549: LD_EXP 20
1553: PUSH
1554: LD_EXP 4
1558: ADD
1559: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 10_ ) ;
1560: LD_ADDR_EXP 6
1564: PUSH
1565: LD_STRING Lisa
1567: PPUSH
1568: LD_INT 1
1570: PPUSH
1571: LD_STRING 10_
1573: PPUSH
1574: CALL 47006 0 3
1578: ST_TO_ADDR
// if Lisa then
1579: LD_EXP 6
1583: IFFALSE 1601
// JMMSquad = JMMSquad ^ Lisa ;
1585: LD_ADDR_EXP 20
1589: PUSH
1590: LD_EXP 20
1594: PUSH
1595: LD_EXP 6
1599: ADD
1600: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 10_ ) ;
1601: LD_ADDR_EXP 2
1605: PUSH
1606: LD_STRING Brown
1608: PPUSH
1609: LD_INT 1
1611: PPUSH
1612: LD_STRING 10_
1614: PPUSH
1615: CALL 47006 0 3
1619: ST_TO_ADDR
// if Brown then
1620: LD_EXP 2
1624: IFFALSE 1642
// JMMSquad = JMMSquad ^ Brown ;
1626: LD_ADDR_EXP 20
1630: PUSH
1631: LD_EXP 20
1635: PUSH
1636: LD_EXP 2
1640: ADD
1641: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 10_ ) ;
1642: LD_ADDR_EXP 3
1646: PUSH
1647: LD_STRING Donaldson
1649: PPUSH
1650: LD_INT 1
1652: PPUSH
1653: LD_STRING 10_
1655: PPUSH
1656: CALL 47006 0 3
1660: ST_TO_ADDR
// if Donaldson then
1661: LD_EXP 3
1665: IFFALSE 1683
// JMMSquad = JMMSquad ^ Donaldson ;
1667: LD_ADDR_EXP 20
1671: PUSH
1672: LD_EXP 20
1676: PUSH
1677: LD_EXP 3
1681: ADD
1682: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 10_ ) ;
1683: LD_ADDR_EXP 7
1687: PUSH
1688: LD_STRING Frank
1690: PPUSH
1691: LD_INT 1
1693: PPUSH
1694: LD_STRING 10_
1696: PPUSH
1697: CALL 47006 0 3
1701: ST_TO_ADDR
// if Frank then
1702: LD_EXP 7
1706: IFFALSE 1724
// JMMSquad = JMMSquad ^ Frank ;
1708: LD_ADDR_EXP 20
1712: PUSH
1713: LD_EXP 20
1717: PUSH
1718: LD_EXP 7
1722: ADD
1723: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 10_ ) ;
1724: LD_ADDR_EXP 9
1728: PUSH
1729: LD_STRING Houten
1731: PPUSH
1732: LD_INT 1
1734: PPUSH
1735: LD_STRING 10_
1737: PPUSH
1738: CALL 47006 0 3
1742: ST_TO_ADDR
// if Houten then
1743: LD_EXP 9
1747: IFFALSE 1765
// JMMSquad = JMMSquad ^ Houten ;
1749: LD_ADDR_EXP 20
1753: PUSH
1754: LD_EXP 20
1758: PUSH
1759: LD_EXP 9
1763: ADD
1764: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1765: LD_ADDR_EXP 21
1769: PUSH
1770: LD_STRING OthersIn10
1772: PPUSH
1773: CALL_OW 31
1777: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
1778: LD_ADDR_EXP 24
1782: PUSH
1783: LD_STRING Powell
1785: PPUSH
1786: LD_INT 0
1788: PPUSH
1789: LD_STRING 
1791: PPUSH
1792: CALL 47006 0 3
1796: ST_TO_ADDR
// for i in JMMSquad do
1797: LD_ADDR_VAR 0 2
1801: PUSH
1802: LD_EXP 20
1806: PUSH
1807: FOR_IN
1808: IFFALSE 2088
// begin if count < 3 then
1810: LD_VAR 0 6
1814: PUSH
1815: LD_INT 3
1817: LESS
1818: IFFALSE 1935
// begin vc_engine = 1 ;
1820: LD_ADDR_OWVAR 39
1824: PUSH
1825: LD_INT 1
1827: ST_TO_ADDR
// vc_control = 1 ;
1828: LD_ADDR_OWVAR 38
1832: PUSH
1833: LD_INT 1
1835: ST_TO_ADDR
// vc_weapon = 12 ;
1836: LD_ADDR_OWVAR 40
1840: PUSH
1841: LD_INT 12
1843: ST_TO_ADDR
// vc_chassis = 3 ;
1844: LD_ADDR_OWVAR 37
1848: PUSH
1849: LD_INT 3
1851: ST_TO_ADDR
// veh = CreateVehicle ;
1852: LD_ADDR_VAR 0 4
1856: PUSH
1857: CALL_OW 45
1861: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1862: LD_VAR 0 4
1866: PPUSH
1867: LD_INT 1
1869: PPUSH
1870: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1874: LD_VAR 0 4
1878: PPUSH
1879: LD_INT 2
1881: PPUSH
1882: LD_INT 0
1884: PPUSH
1885: CALL_OW 49
// if count mod 2 = 0 then
1889: LD_VAR 0 6
1893: PUSH
1894: LD_INT 2
1896: MOD
1897: PUSH
1898: LD_INT 0
1900: EQUAL
1901: IFFALSE 1920
// AddCargo ( veh , 1 , 100 ) else
1903: LD_VAR 0 4
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: LD_INT 100
1913: PPUSH
1914: CALL_OW 291
1918: GO 1935
// AddCargo ( veh , 3 , 100 ) end ;
1920: LD_VAR 0 4
1924: PPUSH
1925: LD_INT 3
1927: PPUSH
1928: LD_INT 100
1930: PPUSH
1931: CALL_OW 291
// if count >= 3 then
1935: LD_VAR 0 6
1939: PUSH
1940: LD_INT 3
1942: GREATEREQUAL
1943: IFFALSE 2058
// begin vc_engine = 1 ;
1945: LD_ADDR_OWVAR 39
1949: PUSH
1950: LD_INT 1
1952: ST_TO_ADDR
// vc_control = 1 ;
1953: LD_ADDR_OWVAR 38
1957: PUSH
1958: LD_INT 1
1960: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1961: LD_ADDR_OWVAR 40
1965: PUSH
1966: LD_INT 3
1968: PUSH
1969: LD_INT 4
1971: PUSH
1972: LD_INT 5
1974: PUSH
1975: EMPTY
1976: LIST
1977: LIST
1978: LIST
1979: PUSH
1980: LD_INT 1
1982: PPUSH
1983: LD_INT 3
1985: PPUSH
1986: CALL_OW 12
1990: ARRAY
1991: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
1992: LD_ADDR_OWVAR 37
1996: PUSH
1997: LD_INT 2
1999: PUSH
2000: LD_INT 3
2002: PUSH
2003: EMPTY
2004: LIST
2005: LIST
2006: PUSH
2007: LD_VAR 0 2
2011: PUSH
2012: LD_INT 2
2014: MOD
2015: PUSH
2016: LD_INT 1
2018: PLUS
2019: ARRAY
2020: ST_TO_ADDR
// veh = CreateVehicle ;
2021: LD_ADDR_VAR 0 4
2025: PUSH
2026: CALL_OW 45
2030: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2031: LD_VAR 0 4
2035: PPUSH
2036: LD_INT 1
2038: PPUSH
2039: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2043: LD_VAR 0 4
2047: PPUSH
2048: LD_INT 2
2050: PPUSH
2051: LD_INT 0
2053: PPUSH
2054: CALL_OW 49
// end ; count = count + 1 ;
2058: LD_ADDR_VAR 0 6
2062: PUSH
2063: LD_VAR 0 6
2067: PUSH
2068: LD_INT 1
2070: PLUS
2071: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2072: LD_VAR 0 2
2076: PPUSH
2077: LD_VAR 0 4
2081: PPUSH
2082: CALL_OW 52
// end ;
2086: GO 1807
2088: POP
2089: POP
// for i := 1 to others10 do
2090: LD_ADDR_VAR 0 2
2094: PUSH
2095: DOUBLE
2096: LD_INT 1
2098: DEC
2099: ST_TO_ADDR
2100: LD_EXP 21
2104: PUSH
2105: FOR_TO
2106: IFFALSE 2337
// begin if i < [ 5 , 4 , 3 , 3 ] [ Difficulty ] then
2108: LD_VAR 0 2
2112: PUSH
2113: LD_INT 5
2115: PUSH
2116: LD_INT 4
2118: PUSH
2119: LD_INT 3
2121: PUSH
2122: LD_INT 3
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: LIST
2129: LIST
2130: PUSH
2131: LD_OWVAR 67
2135: ARRAY
2136: LESS
2137: IFFALSE 2290
// begin vc_engine = 1 ;
2139: LD_ADDR_OWVAR 39
2143: PUSH
2144: LD_INT 1
2146: ST_TO_ADDR
// vc_control = 1 ;
2147: LD_ADDR_OWVAR 38
2151: PUSH
2152: LD_INT 1
2154: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2155: LD_ADDR_OWVAR 40
2159: PUSH
2160: LD_INT 3
2162: PUSH
2163: LD_INT 4
2165: PUSH
2166: LD_INT 5
2168: PUSH
2169: EMPTY
2170: LIST
2171: LIST
2172: LIST
2173: PUSH
2174: LD_INT 1
2176: PPUSH
2177: LD_INT 3
2179: PPUSH
2180: CALL_OW 12
2184: ARRAY
2185: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
2186: LD_ADDR_OWVAR 37
2190: PUSH
2191: LD_INT 2
2193: PUSH
2194: LD_INT 3
2196: PUSH
2197: EMPTY
2198: LIST
2199: LIST
2200: PUSH
2201: LD_VAR 0 2
2205: PUSH
2206: LD_INT 2
2208: MOD
2209: PUSH
2210: LD_INT 1
2212: PLUS
2213: ARRAY
2214: ST_TO_ADDR
// veh = CreateVehicle ;
2215: LD_ADDR_VAR 0 4
2219: PUSH
2220: CALL_OW 45
2224: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2225: LD_VAR 0 4
2229: PPUSH
2230: LD_INT 1
2232: PPUSH
2233: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2237: LD_VAR 0 4
2241: PPUSH
2242: LD_INT 2
2244: PPUSH
2245: LD_INT 0
2247: PPUSH
2248: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2252: LD_ADDR_EXP 28
2256: PUSH
2257: LD_EXP 28
2261: PUSH
2262: LD_VAR 0 4
2266: ADD
2267: ST_TO_ADDR
// PlaceHumanInUnit ( others10 [ i ] , veh ) ;
2268: LD_EXP 21
2272: PUSH
2273: LD_VAR 0 2
2277: ARRAY
2278: PPUSH
2279: LD_VAR 0 4
2283: PPUSH
2284: CALL_OW 52
// end else
2288: GO 2335
// begin PlaceUnitXYR ( others10 [ i ] , 106 , 33 , 6 , false ) ;
2290: LD_EXP 21
2294: PUSH
2295: LD_VAR 0 2
2299: ARRAY
2300: PPUSH
2301: LD_INT 106
2303: PPUSH
2304: LD_INT 33
2306: PPUSH
2307: LD_INT 6
2309: PPUSH
2310: LD_INT 0
2312: PPUSH
2313: CALL_OW 50
// SetSide ( others10 [ i ] , 4 ) ;
2317: LD_EXP 21
2321: PUSH
2322: LD_VAR 0 2
2326: ARRAY
2327: PPUSH
2328: LD_INT 4
2330: PPUSH
2331: CALL_OW 235
// end ; end ;
2335: GO 2105
2337: POP
2338: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2339: LD_INT 22
2341: PUSH
2342: LD_INT 1
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: PUSH
2349: LD_INT 21
2351: PUSH
2352: LD_INT 1
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: PUSH
2359: EMPTY
2360: LIST
2361: LIST
2362: PPUSH
2363: CALL_OW 69
2367: PPUSH
2368: LD_INT 1
2370: PPUSH
2371: CALL_OW 336
// end ;
2375: LD_VAR 0 1
2379: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2380: LD_INT 0
2382: PPUSH
2383: PPUSH
2384: PPUSH
2385: PPUSH
2386: PPUSH
// uc_side = 1 ;
2387: LD_ADDR_OWVAR 20
2391: PUSH
2392: LD_INT 1
2394: ST_TO_ADDR
// uc_nation = 1 ;
2395: LD_ADDR_OWVAR 21
2399: PUSH
2400: LD_INT 1
2402: ST_TO_ADDR
// for i := 1 to 10 do
2403: LD_ADDR_VAR 0 2
2407: PUSH
2408: DOUBLE
2409: LD_INT 1
2411: DEC
2412: ST_TO_ADDR
2413: LD_INT 10
2415: PUSH
2416: FOR_TO
2417: IFFALSE 2599
// begin vc_engine = 1 ;
2419: LD_ADDR_OWVAR 39
2423: PUSH
2424: LD_INT 1
2426: ST_TO_ADDR
// vc_control = 1 ;
2427: LD_ADDR_OWVAR 38
2431: PUSH
2432: LD_INT 1
2434: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2435: LD_ADDR_OWVAR 40
2439: PUSH
2440: LD_INT 3
2442: PUSH
2443: LD_INT 4
2445: PUSH
2446: LD_INT 5
2448: PUSH
2449: LD_INT 12
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: LIST
2457: PUSH
2458: LD_INT 1
2460: PPUSH
2461: LD_INT 4
2463: PPUSH
2464: CALL_OW 12
2468: ARRAY
2469: ST_TO_ADDR
// vc_chassis = 3 ;
2470: LD_ADDR_OWVAR 37
2474: PUSH
2475: LD_INT 3
2477: ST_TO_ADDR
// veh = CreateVehicle ;
2478: LD_ADDR_VAR 0 3
2482: PUSH
2483: CALL_OW 45
2487: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2488: LD_VAR 0 3
2492: PPUSH
2493: LD_INT 1
2495: PPUSH
2496: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2500: LD_VAR 0 3
2504: PPUSH
2505: LD_INT 2
2507: PPUSH
2508: LD_INT 0
2510: PPUSH
2511: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2515: LD_ADDR_EXP 28
2519: PUSH
2520: LD_EXP 28
2524: PUSH
2525: LD_VAR 0 3
2529: ADD
2530: ST_TO_ADDR
// if vc_weapon = 12 then
2531: LD_OWVAR 40
2535: PUSH
2536: LD_INT 12
2538: EQUAL
2539: IFFALSE 2597
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2541: LD_ADDR_VAR 0 4
2545: PUSH
2546: LD_INT 5
2548: PPUSH
2549: LD_INT 10
2551: PPUSH
2552: CALL_OW 12
2556: PUSH
2557: LD_INT 10
2559: MUL
2560: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2561: LD_VAR 0 3
2565: PPUSH
2566: LD_INT 1
2568: PUSH
2569: LD_INT 3
2571: PUSH
2572: EMPTY
2573: LIST
2574: LIST
2575: PUSH
2576: LD_INT 1
2578: PPUSH
2579: LD_INT 2
2581: PPUSH
2582: CALL_OW 12
2586: ARRAY
2587: PPUSH
2588: LD_VAR 0 4
2592: PPUSH
2593: CALL_OW 291
// end ; end ;
2597: GO 2416
2599: POP
2600: POP
// end ;
2601: LD_VAR 0 1
2605: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2606: LD_INT 0
2608: PPUSH
2609: PPUSH
2610: PPUSH
// uc_side = 4 ;
2611: LD_ADDR_OWVAR 20
2615: PUSH
2616: LD_INT 4
2618: ST_TO_ADDR
// uc_nation = 1 ;
2619: LD_ADDR_OWVAR 21
2623: PUSH
2624: LD_INT 1
2626: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ,  ) ;
2627: LD_ADDR_EXP 11
2631: PUSH
2632: LD_STRING Simms
2634: PPUSH
2635: LD_INT 0
2637: PPUSH
2638: LD_STRING 
2640: PPUSH
2641: CALL 47006 0 3
2645: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 08_ ) ;
2646: LD_ADDR_EXP 12
2650: PUSH
2651: LD_STRING Denis
2653: PPUSH
2654: LD_INT 1
2656: PPUSH
2657: LD_STRING 08_
2659: PPUSH
2660: CALL 47006 0 3
2664: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 08_ ) ;
2665: LD_ADDR_EXP 13
2669: PUSH
2670: LD_STRING Joan
2672: PPUSH
2673: LD_INT 1
2675: PPUSH
2676: LD_STRING 08_
2678: PPUSH
2679: CALL 47006 0 3
2683: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2684: LD_STRING 08_Khatam
2686: PPUSH
2687: CALL_OW 28
2691: IFFALSE 2714
// Khatam = PrepareUnit ( Khatam , true , 08_ ) else
2693: LD_ADDR_EXP 14
2697: PUSH
2698: LD_STRING Khatam
2700: PPUSH
2701: LD_INT 1
2703: PPUSH
2704: LD_STRING 08_
2706: PPUSH
2707: CALL 47006 0 3
2711: ST_TO_ADDR
2712: GO 2742
// if TestCharacters ( 03_Khatam ) then
2714: LD_STRING 03_Khatam
2716: PPUSH
2717: CALL_OW 28
2721: IFFALSE 2742
// Khatam = PrepareUnit ( Khatam , true , 03_ ) ;
2723: LD_ADDR_EXP 14
2727: PUSH
2728: LD_STRING Khatam
2730: PPUSH
2731: LD_INT 1
2733: PPUSH
2734: LD_STRING 03_
2736: PPUSH
2737: CALL 47006 0 3
2741: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 08_ ) ;
2742: LD_ADDR_EXP 15
2746: PUSH
2747: LD_STRING Gladstone
2749: PPUSH
2750: LD_INT 1
2752: PPUSH
2753: LD_STRING 08_
2755: PPUSH
2756: CALL 47006 0 3
2760: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ,  ) ;
2761: LD_ADDR_EXP 17
2765: PUSH
2766: LD_STRING DeltaDoctor
2768: PPUSH
2769: LD_INT 1
2771: PPUSH
2772: LD_STRING 
2774: PPUSH
2775: CALL 47006 0 3
2779: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 08_ ) ;
2780: LD_ADDR_EXP 7
2784: PUSH
2785: LD_STRING Frank
2787: PPUSH
2788: LD_INT 1
2790: PPUSH
2791: LD_STRING 08_
2793: PPUSH
2794: CALL 47006 0 3
2798: ST_TO_ADDR
// if Frank then
2799: LD_EXP 7
2803: IFFALSE 2826
// Kikuchi = PrepareUnit ( Yamoko , false ,  ) else
2805: LD_ADDR_EXP 8
2809: PUSH
2810: LD_STRING Yamoko
2812: PPUSH
2813: LD_INT 0
2815: PPUSH
2816: LD_STRING 
2818: PPUSH
2819: CALL 47006 0 3
2823: ST_TO_ADDR
2824: GO 2845
// Kikuchi = PrepareUnit ( Kikuchi , true , 08_ ) ;
2826: LD_ADDR_EXP 8
2830: PUSH
2831: LD_STRING Kikuchi
2833: PPUSH
2834: LD_INT 1
2836: PPUSH
2837: LD_STRING 08_
2839: PPUSH
2840: CALL 47006 0 3
2844: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2845: LD_ADDR_EXP 22
2849: PUSH
2850: LD_STRING 09_others
2852: PPUSH
2853: CALL_OW 31
2857: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2858: LD_ADDR_EXP 23
2862: PUSH
2863: LD_STRING 09_apes
2865: PPUSH
2866: CALL_OW 31
2870: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2871: LD_EXP 11
2875: PPUSH
2876: LD_INT 1
2878: PPUSH
2879: LD_INT 0
2881: PPUSH
2882: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2886: LD_EXP 12
2890: PPUSH
2891: LD_INT 1
2893: PPUSH
2894: LD_INT 0
2896: PPUSH
2897: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2901: LD_EXP 13
2905: PPUSH
2906: LD_INT 1
2908: PPUSH
2909: LD_INT 0
2911: PPUSH
2912: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2916: LD_EXP 14
2920: PPUSH
2921: LD_INT 1
2923: PPUSH
2924: LD_INT 0
2926: PPUSH
2927: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2931: LD_EXP 15
2935: PPUSH
2936: LD_INT 1
2938: PPUSH
2939: LD_INT 0
2941: PPUSH
2942: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2946: LD_EXP 17
2950: PPUSH
2951: LD_INT 1
2953: PPUSH
2954: LD_INT 0
2956: PPUSH
2957: CALL_OW 49
// if Kikuchi then
2961: LD_EXP 8
2965: IFFALSE 2982
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2967: LD_EXP 8
2971: PPUSH
2972: LD_INT 1
2974: PPUSH
2975: LD_INT 0
2977: PPUSH
2978: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2982: LD_EXP 11
2986: PUSH
2987: LD_EXP 14
2991: PUSH
2992: LD_EXP 12
2996: PUSH
2997: LD_EXP 15
3001: PUSH
3002: LD_EXP 17
3006: PUSH
3007: LD_EXP 13
3011: PUSH
3012: EMPTY
3013: LIST
3014: LIST
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: PPUSH
3020: LD_INT 4
3022: PPUSH
3023: CALL_OW 336
// if others09 > 2 then
3027: LD_EXP 22
3031: PUSH
3032: LD_INT 2
3034: GREATER
3035: IFFALSE 3116
// begin for i := 1 to 3 do
3037: LD_ADDR_VAR 0 2
3041: PUSH
3042: DOUBLE
3043: LD_INT 1
3045: DEC
3046: ST_TO_ADDR
3047: LD_INT 3
3049: PUSH
3050: FOR_TO
3051: IFFALSE 3112
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
3053: LD_EXP 22
3057: PUSH
3058: LD_VAR 0 2
3062: ARRAY
3063: PPUSH
3064: LD_INT 1
3066: PPUSH
3067: LD_INT 0
3069: PPUSH
3070: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
3074: LD_ADDR_EXP 22
3078: PUSH
3079: LD_EXP 22
3083: PPUSH
3084: LD_INT 1
3086: PPUSH
3087: CALL_OW 3
3091: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
3092: LD_EXP 22
3096: PUSH
3097: LD_VAR 0 2
3101: ARRAY
3102: PPUSH
3103: LD_INT 2
3105: PPUSH
3106: CALL_OW 336
// end ;
3110: GO 3050
3112: POP
3113: POP
// end else
3114: GO 3176
// begin for i in others09 do
3116: LD_ADDR_VAR 0 2
3120: PUSH
3121: LD_EXP 22
3125: PUSH
3126: FOR_IN
3127: IFFALSE 3174
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3129: LD_VAR 0 2
3133: PPUSH
3134: LD_INT 1
3136: PPUSH
3137: LD_INT 0
3139: PPUSH
3140: CALL_OW 49
// others09 = others09 diff i ;
3144: LD_ADDR_EXP 22
3148: PUSH
3149: LD_EXP 22
3153: PUSH
3154: LD_VAR 0 2
3158: DIFF
3159: ST_TO_ADDR
// SetClass ( i , 2 ) ;
3160: LD_VAR 0 2
3164: PPUSH
3165: LD_INT 2
3167: PPUSH
3168: CALL_OW 336
// end ;
3172: GO 3126
3174: POP
3175: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
3176: LD_INT 22
3178: PUSH
3179: LD_INT 4
3181: PUSH
3182: EMPTY
3183: LIST
3184: LIST
3185: PUSH
3186: LD_INT 25
3188: PUSH
3189: LD_INT 2
3191: PUSH
3192: EMPTY
3193: LIST
3194: LIST
3195: PUSH
3196: EMPTY
3197: LIST
3198: LIST
3199: PPUSH
3200: CALL_OW 69
3204: PUSH
3205: LD_INT 0
3207: EQUAL
3208: IFFALSE 3340
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3210: LD_ADDR_VAR 0 3
3214: PUSH
3215: LD_INT 22
3217: PUSH
3218: LD_INT 4
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: PUSH
3225: LD_INT 25
3227: PUSH
3228: LD_INT 2
3230: PUSH
3231: EMPTY
3232: LIST
3233: LIST
3234: PUSH
3235: EMPTY
3236: LIST
3237: LIST
3238: PPUSH
3239: CALL_OW 69
3243: PUSH
3244: LD_EXP 11
3248: PUSH
3249: LD_EXP 14
3253: PUSH
3254: LD_EXP 12
3258: PUSH
3259: LD_EXP 15
3263: PUSH
3264: LD_EXP 17
3268: PUSH
3269: LD_EXP 13
3273: PUSH
3274: EMPTY
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: DIFF
3282: ST_TO_ADDR
// if not tmp then
3283: LD_VAR 0 3
3287: NOT
3288: IFFALSE 3324
// begin if Denis then
3290: LD_EXP 12
3294: IFFALSE 3310
// SetClass ( Denis , 2 ) else
3296: LD_EXP 12
3300: PPUSH
3301: LD_INT 2
3303: PPUSH
3304: CALL_OW 336
3308: GO 3322
// SetClass ( DeltaDoctor , 2 ) ;
3310: LD_EXP 17
3314: PPUSH
3315: LD_INT 2
3317: PPUSH
3318: CALL_OW 336
// end else
3322: GO 3340
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3324: LD_VAR 0 3
3328: PUSH
3329: LD_INT 1
3331: ARRAY
3332: PPUSH
3333: LD_INT 2
3335: PPUSH
3336: CALL_OW 336
// end ; end ; for i in ape09 do
3340: LD_ADDR_VAR 0 2
3344: PUSH
3345: LD_EXP 23
3349: PUSH
3350: FOR_IN
3351: IFFALSE 3370
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3353: LD_VAR 0 2
3357: PPUSH
3358: LD_INT 1
3360: PPUSH
3361: LD_INT 0
3363: PPUSH
3364: CALL_OW 49
3368: GO 3350
3370: POP
3371: POP
// uc_side = 4 ;
3372: LD_ADDR_OWVAR 20
3376: PUSH
3377: LD_INT 4
3379: ST_TO_ADDR
// hc_class := 1 ;
3380: LD_ADDR_OWVAR 28
3384: PUSH
3385: LD_INT 1
3387: ST_TO_ADDR
// hc_sex := sex_female ;
3388: LD_ADDR_OWVAR 27
3392: PUSH
3393: LD_INT 2
3395: ST_TO_ADDR
// hc_gallery :=  ;
3396: LD_ADDR_OWVAR 33
3400: PUSH
3401: LD_STRING 
3403: ST_TO_ADDR
// hc_name :=  ;
3404: LD_ADDR_OWVAR 26
3408: PUSH
3409: LD_STRING 
3411: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3412: LD_ADDR_OWVAR 31
3416: PUSH
3417: LD_INT 1
3419: PUSH
3420: LD_INT 7
3422: PUSH
3423: LD_INT 1
3425: PUSH
3426: LD_INT 0
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: ST_TO_ADDR
// AmScout = CreateHuman ;
3435: LD_ADDR_EXP 18
3439: PUSH
3440: CALL_OW 44
3444: ST_TO_ADDR
// end ;
3445: LD_VAR 0 1
3449: RET
// export function PrepareCornell ; begin
3450: LD_INT 0
3452: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3453: LD_INT 4
3455: PPUSH
3456: LD_INT 4
3458: PPUSH
3459: CALL_OW 343
// uc_side = 4 ;
3463: LD_ADDR_OWVAR 20
3467: PUSH
3468: LD_INT 4
3470: ST_TO_ADDR
// uc_nation = 1 ;
3471: LD_ADDR_OWVAR 21
3475: PUSH
3476: LD_INT 1
3478: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornel , true , 03_ ) ;
3479: LD_ADDR_EXP 19
3483: PUSH
3484: LD_STRING Cornel
3486: PPUSH
3487: LD_INT 1
3489: PPUSH
3490: LD_STRING 03_
3492: PPUSH
3493: CALL 47006 0 3
3497: ST_TO_ADDR
// if not Cornell then
3498: LD_EXP 19
3502: NOT
3503: IFFALSE 3507
// exit ;
3505: GO 3615
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3507: LD_EXP 19
3511: PPUSH
3512: LD_INT 8
3514: PPUSH
3515: LD_INT 0
3517: PPUSH
3518: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3522: LD_EXP 19
3526: PPUSH
3527: LD_INT 350
3529: PPUSH
3530: CALL_OW 234
// if IsInUnit ( JMM ) then
3534: LD_EXP 1
3538: PPUSH
3539: CALL_OW 310
3543: IFFALSE 3586
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3545: LD_EXP 19
3549: PPUSH
3550: LD_EXP 1
3554: PPUSH
3555: CALL_OW 310
3559: PPUSH
3560: CALL_OW 250
3564: PPUSH
3565: LD_EXP 1
3569: PPUSH
3570: CALL_OW 310
3574: PPUSH
3575: CALL_OW 251
3579: PPUSH
3580: CALL_OW 111
3584: GO 3615
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3586: LD_EXP 19
3590: PPUSH
3591: LD_EXP 1
3595: PPUSH
3596: CALL_OW 250
3600: PPUSH
3601: LD_EXP 1
3605: PPUSH
3606: CALL_OW 251
3610: PPUSH
3611: CALL_OW 111
// end ; end_of_file
3615: LD_VAR 0 1
3619: RET
// export function PrepareRussians ; var i , un ; begin
3620: LD_INT 0
3622: PPUSH
3623: PPUSH
3624: PPUSH
// uc_side = 3 ;
3625: LD_ADDR_OWVAR 20
3629: PUSH
3630: LD_INT 3
3632: ST_TO_ADDR
// uc_nation = 3 ;
3633: LD_ADDR_OWVAR 21
3637: PUSH
3638: LD_INT 3
3640: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ,  ) ;
3641: LD_ADDR_EXP 25
3645: PUSH
3646: LD_STRING Tsaritsyn
3648: PPUSH
3649: LD_INT 0
3651: PPUSH
3652: LD_STRING 
3654: PPUSH
3655: CALL 47006 0 3
3659: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3660: LD_EXP 25
3664: PPUSH
3665: LD_INT 3
3667: PPUSH
3668: LD_INT 0
3670: PPUSH
3671: CALL_OW 49
// for i = 1 to 14 do
3675: LD_ADDR_VAR 0 2
3679: PUSH
3680: DOUBLE
3681: LD_INT 1
3683: DEC
3684: ST_TO_ADDR
3685: LD_INT 14
3687: PUSH
3688: FOR_TO
3689: IFFALSE 3775
// begin uc_side = 3 ;
3691: LD_ADDR_OWVAR 20
3695: PUSH
3696: LD_INT 3
3698: ST_TO_ADDR
// uc_nation = 3 ;
3699: LD_ADDR_OWVAR 21
3703: PUSH
3704: LD_INT 3
3706: ST_TO_ADDR
// hc_gallery =  ;
3707: LD_ADDR_OWVAR 33
3711: PUSH
3712: LD_STRING 
3714: ST_TO_ADDR
// hc_name =  ;
3715: LD_ADDR_OWVAR 26
3719: PUSH
3720: LD_STRING 
3722: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3723: LD_INT 0
3725: PPUSH
3726: LD_INT 1
3728: PPUSH
3729: LD_EXP 36
3733: PPUSH
3734: LD_EXP 37
3738: PPUSH
3739: CALL_OW 12
3743: PPUSH
3744: CALL_OW 380
// un = CreateHuman ;
3748: LD_ADDR_VAR 0 3
3752: PUSH
3753: CALL_OW 44
3757: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3758: LD_VAR 0 3
3762: PPUSH
3763: LD_INT 3
3765: PPUSH
3766: LD_INT 0
3768: PPUSH
3769: CALL_OW 49
// end ;
3773: GO 3688
3775: POP
3776: POP
// for i = 1 to 6 do
3777: LD_ADDR_VAR 0 2
3781: PUSH
3782: DOUBLE
3783: LD_INT 1
3785: DEC
3786: ST_TO_ADDR
3787: LD_INT 6
3789: PUSH
3790: FOR_TO
3791: IFFALSE 3877
// begin uc_side = 3 ;
3793: LD_ADDR_OWVAR 20
3797: PUSH
3798: LD_INT 3
3800: ST_TO_ADDR
// uc_nation = 3 ;
3801: LD_ADDR_OWVAR 21
3805: PUSH
3806: LD_INT 3
3808: ST_TO_ADDR
// hc_gallery =  ;
3809: LD_ADDR_OWVAR 33
3813: PUSH
3814: LD_STRING 
3816: ST_TO_ADDR
// hc_name =  ;
3817: LD_ADDR_OWVAR 26
3821: PUSH
3822: LD_STRING 
3824: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3825: LD_INT 0
3827: PPUSH
3828: LD_INT 2
3830: PPUSH
3831: LD_EXP 36
3835: PPUSH
3836: LD_EXP 37
3840: PPUSH
3841: CALL_OW 12
3845: PPUSH
3846: CALL_OW 380
// un = CreateHuman ;
3850: LD_ADDR_VAR 0 3
3854: PUSH
3855: CALL_OW 44
3859: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3860: LD_VAR 0 3
3864: PPUSH
3865: LD_INT 3
3867: PPUSH
3868: LD_INT 0
3870: PPUSH
3871: CALL_OW 49
// end ;
3875: GO 3790
3877: POP
3878: POP
// for i = 1 to 6 do
3879: LD_ADDR_VAR 0 2
3883: PUSH
3884: DOUBLE
3885: LD_INT 1
3887: DEC
3888: ST_TO_ADDR
3889: LD_INT 6
3891: PUSH
3892: FOR_TO
3893: IFFALSE 3979
// begin uc_side = 3 ;
3895: LD_ADDR_OWVAR 20
3899: PUSH
3900: LD_INT 3
3902: ST_TO_ADDR
// uc_nation = 3 ;
3903: LD_ADDR_OWVAR 21
3907: PUSH
3908: LD_INT 3
3910: ST_TO_ADDR
// hc_gallery =  ;
3911: LD_ADDR_OWVAR 33
3915: PUSH
3916: LD_STRING 
3918: ST_TO_ADDR
// hc_name =  ;
3919: LD_ADDR_OWVAR 26
3923: PUSH
3924: LD_STRING 
3926: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3927: LD_INT 0
3929: PPUSH
3930: LD_INT 3
3932: PPUSH
3933: LD_EXP 36
3937: PPUSH
3938: LD_EXP 37
3942: PPUSH
3943: CALL_OW 12
3947: PPUSH
3948: CALL_OW 380
// un = CreateHuman ;
3952: LD_ADDR_VAR 0 3
3956: PUSH
3957: CALL_OW 44
3961: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3962: LD_VAR 0 3
3966: PPUSH
3967: LD_INT 3
3969: PPUSH
3970: LD_INT 0
3972: PPUSH
3973: CALL_OW 49
// end ;
3977: GO 3892
3979: POP
3980: POP
// for i = 1 to 4 do
3981: LD_ADDR_VAR 0 2
3985: PUSH
3986: DOUBLE
3987: LD_INT 1
3989: DEC
3990: ST_TO_ADDR
3991: LD_INT 4
3993: PUSH
3994: FOR_TO
3995: IFFALSE 4081
// begin uc_side = 3 ;
3997: LD_ADDR_OWVAR 20
4001: PUSH
4002: LD_INT 3
4004: ST_TO_ADDR
// uc_nation = 3 ;
4005: LD_ADDR_OWVAR 21
4009: PUSH
4010: LD_INT 3
4012: ST_TO_ADDR
// hc_gallery =  ;
4013: LD_ADDR_OWVAR 33
4017: PUSH
4018: LD_STRING 
4020: ST_TO_ADDR
// hc_name =  ;
4021: LD_ADDR_OWVAR 26
4025: PUSH
4026: LD_STRING 
4028: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4029: LD_INT 0
4031: PPUSH
4032: LD_INT 4
4034: PPUSH
4035: LD_EXP 36
4039: PPUSH
4040: LD_EXP 37
4044: PPUSH
4045: CALL_OW 12
4049: PPUSH
4050: CALL_OW 380
// un = CreateHuman ;
4054: LD_ADDR_VAR 0 3
4058: PUSH
4059: CALL_OW 44
4063: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4064: LD_VAR 0 3
4068: PPUSH
4069: LD_INT 3
4071: PPUSH
4072: LD_INT 0
4074: PPUSH
4075: CALL_OW 49
// end ;
4079: GO 3994
4081: POP
4082: POP
// end ; end_of_file
4083: LD_VAR 0 1
4087: RET
// export function PrepareArabianCommander ; begin
4088: LD_INT 0
4090: PPUSH
// uc_side = 2 ;
4091: LD_ADDR_OWVAR 20
4095: PUSH
4096: LD_INT 2
4098: ST_TO_ADDR
// uc_nation = 2 ;
4099: LD_ADDR_OWVAR 21
4103: PUSH
4104: LD_INT 2
4106: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
4107: LD_ADDR_EXP 26
4111: PUSH
4112: LD_STRING Dietrich
4114: PPUSH
4115: CALL_OW 25
4119: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
4120: LD_EXP 26
4124: PPUSH
4125: LD_INT 4
4127: PPUSH
4128: LD_INT 0
4130: PPUSH
4131: CALL_OW 49
// end ;
4135: LD_VAR 0 1
4139: RET
// export function PrepareArabian ; var i , un , veh ; begin
4140: LD_INT 0
4142: PPUSH
4143: PPUSH
4144: PPUSH
4145: PPUSH
// uc_side := 2 ;
4146: LD_ADDR_OWVAR 20
4150: PUSH
4151: LD_INT 2
4153: ST_TO_ADDR
// uc_nation := 2 ;
4154: LD_ADDR_OWVAR 21
4158: PUSH
4159: LD_INT 2
4161: ST_TO_ADDR
// if not Ahmed then
4162: LD_EXP 27
4166: NOT
4167: IFFALSE 4235
// begin InitHc ;
4169: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
4173: LD_INT 1
4175: PPUSH
4176: LD_INT 1
4178: PPUSH
4179: LD_EXP 36
4183: PPUSH
4184: LD_EXP 37
4188: PUSH
4189: LD_INT 1
4191: PLUS
4192: PPUSH
4193: CALL_OW 12
4197: PPUSH
4198: CALL_OW 380
// hc_name := Ahmed Abbasid ;
4202: LD_ADDR_OWVAR 26
4206: PUSH
4207: LD_STRING Ahmed Abbasid
4209: ST_TO_ADDR
// Ahmed := CreateHuman ;
4210: LD_ADDR_EXP 27
4214: PUSH
4215: CALL_OW 44
4219: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
4220: LD_EXP 27
4224: PPUSH
4225: LD_INT 4
4227: PPUSH
4228: LD_INT 0
4230: PPUSH
4231: CALL_OW 49
// end ; for i = 1 to 4 do
4235: LD_ADDR_VAR 0 2
4239: PUSH
4240: DOUBLE
4241: LD_INT 1
4243: DEC
4244: ST_TO_ADDR
4245: LD_INT 4
4247: PUSH
4248: FOR_TO
4249: IFFALSE 4335
// begin uc_side = 2 ;
4251: LD_ADDR_OWVAR 20
4255: PUSH
4256: LD_INT 2
4258: ST_TO_ADDR
// uc_nation = 2 ;
4259: LD_ADDR_OWVAR 21
4263: PUSH
4264: LD_INT 2
4266: ST_TO_ADDR
// hc_gallery =  ;
4267: LD_ADDR_OWVAR 33
4271: PUSH
4272: LD_STRING 
4274: ST_TO_ADDR
// hc_name =  ;
4275: LD_ADDR_OWVAR 26
4279: PUSH
4280: LD_STRING 
4282: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4283: LD_INT 0
4285: PPUSH
4286: LD_INT 2
4288: PPUSH
4289: LD_EXP 36
4293: PPUSH
4294: LD_EXP 37
4298: PPUSH
4299: CALL_OW 12
4303: PPUSH
4304: CALL_OW 380
// un = CreateHuman ;
4308: LD_ADDR_VAR 0 3
4312: PUSH
4313: CALL_OW 44
4317: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4318: LD_VAR 0 3
4322: PPUSH
4323: LD_INT 4
4325: PPUSH
4326: LD_INT 0
4328: PPUSH
4329: CALL_OW 49
// end ;
4333: GO 4248
4335: POP
4336: POP
// for i = 1 to 5 do
4337: LD_ADDR_VAR 0 2
4341: PUSH
4342: DOUBLE
4343: LD_INT 1
4345: DEC
4346: ST_TO_ADDR
4347: LD_INT 5
4349: PUSH
4350: FOR_TO
4351: IFFALSE 4437
// begin uc_side = 2 ;
4353: LD_ADDR_OWVAR 20
4357: PUSH
4358: LD_INT 2
4360: ST_TO_ADDR
// uc_nation = 2 ;
4361: LD_ADDR_OWVAR 21
4365: PUSH
4366: LD_INT 2
4368: ST_TO_ADDR
// hc_gallery =  ;
4369: LD_ADDR_OWVAR 33
4373: PUSH
4374: LD_STRING 
4376: ST_TO_ADDR
// hc_name =  ;
4377: LD_ADDR_OWVAR 26
4381: PUSH
4382: LD_STRING 
4384: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4385: LD_INT 0
4387: PPUSH
4388: LD_INT 1
4390: PPUSH
4391: LD_EXP 36
4395: PPUSH
4396: LD_EXP 37
4400: PPUSH
4401: CALL_OW 12
4405: PPUSH
4406: CALL_OW 380
// un = CreateHuman ;
4410: LD_ADDR_VAR 0 3
4414: PUSH
4415: CALL_OW 44
4419: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4420: LD_VAR 0 3
4424: PPUSH
4425: LD_INT 4
4427: PPUSH
4428: LD_INT 0
4430: PPUSH
4431: CALL_OW 49
// end ;
4435: GO 4350
4437: POP
4438: POP
// for i = 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
4439: LD_ADDR_VAR 0 2
4443: PUSH
4444: DOUBLE
4445: LD_INT 1
4447: DEC
4448: ST_TO_ADDR
4449: LD_INT 3
4451: PUSH
4452: LD_INT 4
4454: PUSH
4455: LD_INT 4
4457: PUSH
4458: LD_INT 4
4460: PUSH
4461: EMPTY
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: PUSH
4467: LD_OWVAR 67
4471: ARRAY
4472: PUSH
4473: FOR_TO
4474: IFFALSE 4560
// begin uc_side = 2 ;
4476: LD_ADDR_OWVAR 20
4480: PUSH
4481: LD_INT 2
4483: ST_TO_ADDR
// uc_nation = 2 ;
4484: LD_ADDR_OWVAR 21
4488: PUSH
4489: LD_INT 2
4491: ST_TO_ADDR
// hc_gallery =  ;
4492: LD_ADDR_OWVAR 33
4496: PUSH
4497: LD_STRING 
4499: ST_TO_ADDR
// hc_name =  ;
4500: LD_ADDR_OWVAR 26
4504: PUSH
4505: LD_STRING 
4507: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4508: LD_INT 0
4510: PPUSH
4511: LD_INT 4
4513: PPUSH
4514: LD_EXP 36
4518: PPUSH
4519: LD_EXP 37
4523: PPUSH
4524: CALL_OW 12
4528: PPUSH
4529: CALL_OW 380
// un = CreateHuman ;
4533: LD_ADDR_VAR 0 3
4537: PUSH
4538: CALL_OW 44
4542: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4543: LD_VAR 0 3
4547: PPUSH
4548: LD_INT 4
4550: PPUSH
4551: LD_INT 0
4553: PPUSH
4554: CALL_OW 49
// end ;
4558: GO 4473
4560: POP
4561: POP
// for i = 1 to 2 do
4562: LD_ADDR_VAR 0 2
4566: PUSH
4567: DOUBLE
4568: LD_INT 1
4570: DEC
4571: ST_TO_ADDR
4572: LD_INT 2
4574: PUSH
4575: FOR_TO
4576: IFFALSE 4706
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4578: LD_ADDR_VAR 0 4
4582: PUSH
4583: LD_INT 22
4585: PUSH
4586: LD_INT 2
4588: PUSH
4589: EMPTY
4590: LIST
4591: LIST
4592: PUSH
4593: LD_INT 21
4595: PUSH
4596: LD_INT 2
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: PUSH
4603: LD_INT 58
4605: PUSH
4606: EMPTY
4607: LIST
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: LIST
4613: PPUSH
4614: CALL_OW 69
4618: ST_TO_ADDR
// uc_side = 2 ;
4619: LD_ADDR_OWVAR 20
4623: PUSH
4624: LD_INT 2
4626: ST_TO_ADDR
// uc_nation = 2 ;
4627: LD_ADDR_OWVAR 21
4631: PUSH
4632: LD_INT 2
4634: ST_TO_ADDR
// hc_gallery =  ;
4635: LD_ADDR_OWVAR 33
4639: PUSH
4640: LD_STRING 
4642: ST_TO_ADDR
// hc_name =  ;
4643: LD_ADDR_OWVAR 26
4647: PUSH
4648: LD_STRING 
4650: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4651: LD_INT 0
4653: PPUSH
4654: LD_INT 3
4656: PPUSH
4657: LD_EXP 36
4661: PPUSH
4662: LD_EXP 37
4666: PPUSH
4667: CALL_OW 12
4671: PPUSH
4672: CALL_OW 380
// un = CreateHuman ;
4676: LD_ADDR_VAR 0 3
4680: PUSH
4681: CALL_OW 44
4685: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4686: LD_VAR 0 3
4690: PPUSH
4691: LD_VAR 0 4
4695: PUSH
4696: LD_INT 1
4698: ARRAY
4699: PPUSH
4700: CALL_OW 52
// end ;
4704: GO 4575
4706: POP
4707: POP
// end ;
4708: LD_VAR 0 1
4712: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4713: LD_INT 0
4715: PPUSH
4716: PPUSH
4717: PPUSH
4718: PPUSH
4719: PPUSH
4720: PPUSH
// for i := 1 to 2 do
4721: LD_ADDR_VAR 0 2
4725: PUSH
4726: DOUBLE
4727: LD_INT 1
4729: DEC
4730: ST_TO_ADDR
4731: LD_INT 2
4733: PUSH
4734: FOR_TO
4735: IFFALSE 4861
// begin uc_side = 5 ;
4737: LD_ADDR_OWVAR 20
4741: PUSH
4742: LD_INT 5
4744: ST_TO_ADDR
// uc_nation = 2 ;
4745: LD_ADDR_OWVAR 21
4749: PUSH
4750: LD_INT 2
4752: ST_TO_ADDR
// vc_chassis := 31 ;
4753: LD_ADDR_OWVAR 37
4757: PUSH
4758: LD_INT 31
4760: ST_TO_ADDR
// vc_control := control_rider ;
4761: LD_ADDR_OWVAR 38
4765: PUSH
4766: LD_INT 4
4768: ST_TO_ADDR
// animal := CreateVehicle ;
4769: LD_ADDR_VAR 0 3
4773: PUSH
4774: CALL_OW 45
4778: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4779: LD_VAR 0 3
4783: PPUSH
4784: LD_INT 7
4786: PPUSH
4787: LD_INT 0
4789: PPUSH
4790: CALL_OW 49
// hc_gallery =  ;
4794: LD_ADDR_OWVAR 33
4798: PUSH
4799: LD_STRING 
4801: ST_TO_ADDR
// hc_name =  ;
4802: LD_ADDR_OWVAR 26
4806: PUSH
4807: LD_STRING 
4809: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4810: LD_INT 0
4812: PPUSH
4813: LD_INT 11
4815: PPUSH
4816: LD_EXP 36
4820: PPUSH
4821: LD_EXP 37
4825: PPUSH
4826: CALL_OW 12
4830: PPUSH
4831: CALL_OW 380
// un = CreateHuman ;
4835: LD_ADDR_VAR 0 4
4839: PUSH
4840: CALL_OW 44
4844: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4845: LD_VAR 0 4
4849: PPUSH
4850: LD_VAR 0 3
4854: PPUSH
4855: CALL_OW 52
// end ;
4859: GO 4734
4861: POP
4862: POP
// repeat wait ( 0 0$1 ) ;
4863: LD_INT 35
4865: PPUSH
4866: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
4870: LD_ADDR_VAR 0 5
4874: PUSH
4875: LD_INT 22
4877: PUSH
4878: LD_INT 1
4880: PUSH
4881: EMPTY
4882: LIST
4883: LIST
4884: PPUSH
4885: CALL_OW 69
4889: PPUSH
4890: LD_VAR 0 2
4894: PPUSH
4895: CALL_OW 74
4899: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
4900: LD_ADDR_VAR 0 6
4904: PUSH
4905: LD_INT 22
4907: PUSH
4908: LD_INT 1
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: LD_INT 2
4917: PUSH
4918: LD_INT 59
4920: PUSH
4921: EMPTY
4922: LIST
4923: PUSH
4924: LD_INT 21
4926: PUSH
4927: LD_INT 1
4929: PUSH
4930: EMPTY
4931: LIST
4932: LIST
4933: PUSH
4934: LD_INT 21
4936: PUSH
4937: LD_INT 2
4939: PUSH
4940: EMPTY
4941: LIST
4942: LIST
4943: PUSH
4944: EMPTY
4945: LIST
4946: LIST
4947: LIST
4948: LIST
4949: PUSH
4950: EMPTY
4951: LIST
4952: LIST
4953: PUSH
4954: EMPTY
4955: LIST
4956: PPUSH
4957: CALL_OW 69
4961: PPUSH
4962: LD_VAR 0 2
4966: PPUSH
4967: CALL_OW 74
4971: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4972: LD_ADDR_VAR 0 2
4976: PUSH
4977: LD_INT 22
4979: PUSH
4980: LD_INT 5
4982: PUSH
4983: EMPTY
4984: LIST
4985: LIST
4986: PUSH
4987: LD_INT 25
4989: PUSH
4990: LD_INT 11
4992: PUSH
4993: EMPTY
4994: LIST
4995: LIST
4996: PUSH
4997: EMPTY
4998: LIST
4999: LIST
5000: PPUSH
5001: CALL_OW 69
5005: PUSH
5006: FOR_IN
5007: IFFALSE 5077
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5009: LD_VAR 0 2
5013: PPUSH
5014: LD_VAR 0 5
5018: PPUSH
5019: CALL_OW 296
5023: PUSH
5024: LD_INT 8
5026: PLUS
5027: PUSH
5028: LD_VAR 0 2
5032: PPUSH
5033: LD_VAR 0 6
5037: PPUSH
5038: CALL_OW 296
5042: LESS
5043: IFFALSE 5061
// ComAttackUnit ( i , target1 ) else
5045: LD_VAR 0 2
5049: PPUSH
5050: LD_VAR 0 5
5054: PPUSH
5055: CALL_OW 115
5059: GO 5075
// ComAttackUnit ( i , target2 ) ;
5061: LD_VAR 0 2
5065: PPUSH
5066: LD_VAR 0 6
5070: PPUSH
5071: CALL_OW 115
// end ;
5075: GO 5006
5077: POP
5078: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
5079: LD_INT 22
5081: PUSH
5082: LD_INT 5
5084: PUSH
5085: EMPTY
5086: LIST
5087: LIST
5088: PUSH
5089: LD_INT 25
5091: PUSH
5092: LD_INT 11
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PPUSH
5103: CALL_OW 69
5107: PUSH
5108: LD_INT 0
5110: EQUAL
5111: PUSH
5112: LD_INT 22
5114: PUSH
5115: LD_INT 1
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: PPUSH
5122: CALL_OW 69
5126: PUSH
5127: LD_INT 0
5129: EQUAL
5130: OR
5131: IFFALSE 4863
// end ; end_of_file
5133: LD_VAR 0 1
5137: RET
// every 1 do
5138: GO 5140
5140: DISABLE
// begin Video ( true ) ;
5141: LD_INT 1
5143: PPUSH
5144: CALL 83715 0 1
// RevealFogArea ( 1 , EpsilonTerrain ) ;
5148: LD_INT 1
5150: PPUSH
5151: LD_INT 19
5153: PPUSH
5154: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
5158: LD_EXP 11
5162: PPUSH
5163: CALL_OW 87
// wait ( 0 0$3 ) ;
5167: LD_INT 105
5169: PPUSH
5170: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
5174: LD_EXP 1
5178: PPUSH
5179: CALL_OW 310
5183: PPUSH
5184: CALL_OW 85
// Wait ( 0 0$1 ) ;
5188: LD_INT 35
5190: PPUSH
5191: CALL_OW 67
// if IsOk ( Gary ) then
5195: LD_EXP 10
5199: PPUSH
5200: CALL_OW 302
5204: IFFALSE 5242
// begin Say ( Gary , D2-Gary-1 ) ;
5206: LD_EXP 10
5210: PPUSH
5211: LD_STRING D2-Gary-1
5213: PPUSH
5214: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
5218: LD_EXP 1
5222: PPUSH
5223: LD_STRING D2-JMM-1
5225: PPUSH
5226: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
5230: LD_EXP 10
5234: PPUSH
5235: LD_STRING D2-Gary-2
5237: PPUSH
5238: CALL_OW 88
// end ; Video ( false ) ;
5242: LD_INT 0
5244: PPUSH
5245: CALL 83715 0 1
// ChangeMissionObjectives ( M1 ) ;
5249: LD_STRING M1
5251: PPUSH
5252: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5256: LD_INT 38
5258: PPUSH
5259: LD_INT 1
5261: PPUSH
5262: LD_INT 100
5264: PPUSH
5265: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5269: LD_INT 47
5271: PPUSH
5272: LD_INT 1
5274: PPUSH
5275: LD_INT 50
5277: PPUSH
5278: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5282: LD_INT 47
5284: PPUSH
5285: LD_INT 3
5287: PPUSH
5288: LD_INT 50
5290: PPUSH
5291: CALL_OW 291
// SaveForQuickRestart ;
5295: CALL_OW 22
// end ;
5299: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5300: LD_EXP 1
5304: PPUSH
5305: LD_EXP 11
5309: PPUSH
5310: CALL_OW 296
5314: PUSH
5315: LD_INT 15
5317: LESS
5318: IFFALSE 5999
5320: GO 5322
5322: DISABLE
5323: LD_INT 0
5325: PPUSH
// begin wait ( 0 0$3 ) ;
5326: LD_INT 105
5328: PPUSH
5329: CALL_OW 67
// Video ( true ) ;
5333: LD_INT 1
5335: PPUSH
5336: CALL 83715 0 1
// ComExitVehicle ( JMM ) ;
5340: LD_EXP 1
5344: PPUSH
5345: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5349: LD_EXP 1
5353: PPUSH
5354: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
5358: LD_EXP 1
5362: PPUSH
5363: LD_EXP 11
5367: PPUSH
5368: CALL_OW 179
// p := 15 ;
5372: LD_ADDR_VAR 0 1
5376: PUSH
5377: LD_INT 15
5379: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5380: LD_INT 35
5382: PPUSH
5383: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5387: LD_EXP 11
5391: PUSH
5392: LD_EXP 13
5396: PUSH
5397: LD_EXP 12
5401: PUSH
5402: LD_EXP 14
5406: PUSH
5407: LD_EXP 8
5411: PUSH
5412: EMPTY
5413: LIST
5414: LIST
5415: LIST
5416: LIST
5417: LIST
5418: PPUSH
5419: LD_EXP 1
5423: PPUSH
5424: CALL_OW 112
// p := p - 1 ;
5428: LD_ADDR_VAR 0 1
5432: PUSH
5433: LD_VAR 0 1
5437: PUSH
5438: LD_INT 1
5440: MINUS
5441: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5442: LD_EXP 1
5446: PPUSH
5447: LD_EXP 11
5451: PPUSH
5452: CALL_OW 296
5456: PUSH
5457: LD_INT 5
5459: LESS
5460: PUSH
5461: LD_VAR 0 1
5465: PUSH
5466: LD_INT 0
5468: LESSEQUAL
5469: OR
5470: IFFALSE 5380
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5472: LD_EXP 11
5476: PUSH
5477: LD_EXP 13
5481: PUSH
5482: LD_EXP 12
5486: PUSH
5487: LD_EXP 14
5491: PUSH
5492: LD_EXP 8
5496: PUSH
5497: EMPTY
5498: LIST
5499: LIST
5500: LIST
5501: LIST
5502: LIST
5503: PPUSH
5504: LD_EXP 1
5508: PPUSH
5509: CALL_OW 119
// if not IsInUnit ( JMM ) then
5513: LD_EXP 1
5517: PPUSH
5518: CALL_OW 310
5522: NOT
5523: IFFALSE 5539
// ComTurnUnit ( JMM , Simms ) ;
5525: LD_EXP 1
5529: PPUSH
5530: LD_EXP 11
5534: PPUSH
5535: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5539: LD_EXP 11
5543: PUSH
5544: LD_EXP 13
5548: PUSH
5549: LD_EXP 12
5553: PUSH
5554: LD_EXP 14
5558: PUSH
5559: EMPTY
5560: LIST
5561: LIST
5562: LIST
5563: LIST
5564: PPUSH
5565: LD_EXP 1
5569: PPUSH
5570: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5574: LD_EXP 1
5578: PUSH
5579: LD_EXP 11
5583: PUSH
5584: EMPTY
5585: LIST
5586: LIST
5587: PPUSH
5588: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5592: LD_EXP 11
5596: PPUSH
5597: LD_STRING D2a-Sim-1
5599: PPUSH
5600: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5604: LD_EXP 1
5608: PPUSH
5609: LD_STRING D2a-JMM-1
5611: PPUSH
5612: CALL_OW 88
// if IsOk ( Joan ) then
5616: LD_EXP 13
5620: PPUSH
5621: CALL_OW 302
5625: IFFALSE 5703
// begin if not IsInUnit ( JMM ) then
5627: LD_EXP 1
5631: PPUSH
5632: CALL_OW 310
5636: NOT
5637: IFFALSE 5653
// ComTurnUnit ( JMM , Joan ) ;
5639: LD_EXP 1
5643: PPUSH
5644: LD_EXP 13
5648: PPUSH
5649: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
5653: LD_EXP 13
5657: PPUSH
5658: LD_EXP 1
5662: PPUSH
5663: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5667: LD_EXP 13
5671: PPUSH
5672: LD_STRING D2b-Joan-1
5674: PPUSH
5675: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5679: LD_EXP 1
5683: PPUSH
5684: LD_STRING D2b-JMM-1
5686: PPUSH
5687: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5691: LD_EXP 13
5695: PPUSH
5696: LD_STRING D2b-Joan-2
5698: PPUSH
5699: CALL_OW 88
// end ; if IsOk ( Denis ) then
5703: LD_EXP 12
5707: PPUSH
5708: CALL_OW 302
5712: IFFALSE 5766
// begin if not IsInUnit ( JMM ) then
5714: LD_EXP 1
5718: PPUSH
5719: CALL_OW 310
5723: NOT
5724: IFFALSE 5740
// ComTurnUnit ( JMM , Denis ) ;
5726: LD_EXP 1
5730: PPUSH
5731: LD_EXP 12
5735: PPUSH
5736: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
5740: LD_EXP 12
5744: PPUSH
5745: LD_EXP 1
5749: PPUSH
5750: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
5754: LD_EXP 12
5758: PPUSH
5759: LD_STRING D2c-Den-1
5761: PPUSH
5762: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
5766: LD_EXP 8
5770: PPUSH
5771: CALL_OW 302
5775: PUSH
5776: LD_STRING 08_Kikuchi
5778: PPUSH
5779: CALL_OW 28
5783: NOT
5784: AND
5785: IFFALSE 5880
// begin repeat wait ( 0 0$1 ) ;
5787: LD_INT 35
5789: PPUSH
5790: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
5794: LD_EXP 8
5798: PPUSH
5799: LD_EXP 1
5803: PPUSH
5804: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
5808: LD_EXP 1
5812: PPUSH
5813: LD_EXP 8
5817: PPUSH
5818: CALL_OW 296
5822: PUSH
5823: LD_INT 5
5825: LESS
5826: IFFALSE 5787
// ComTurnUnit ( Kikuchi , JMM ) ;
5828: LD_EXP 8
5832: PPUSH
5833: LD_EXP 1
5837: PPUSH
5838: CALL_OW 119
// if not IsInUnit ( JMM ) then
5842: LD_EXP 1
5846: PPUSH
5847: CALL_OW 310
5851: NOT
5852: IFFALSE 5868
// ComTurnUnit ( JMM , Kikuchi ) ;
5854: LD_EXP 1
5858: PPUSH
5859: LD_EXP 8
5863: PPUSH
5864: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
5868: LD_EXP 8
5872: PPUSH
5873: LD_STRING D3b-Yam-1
5875: PPUSH
5876: CALL_OW 88
// end ; if IsOk ( Khatam ) then
5880: LD_EXP 14
5884: PPUSH
5885: CALL_OW 302
5889: IFFALSE 5955
// begin if not IsInUnit ( JMM ) then
5891: LD_EXP 1
5895: PPUSH
5896: CALL_OW 310
5900: NOT
5901: IFFALSE 5917
// ComTurnUnit ( JMM , Khatam ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_EXP 14
5912: PPUSH
5913: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
5917: LD_EXP 14
5921: PPUSH
5922: LD_EXP 1
5926: PPUSH
5927: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
5931: LD_EXP 1
5935: PPUSH
5936: LD_STRING D2c-JMM-1
5938: PPUSH
5939: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
5943: LD_EXP 14
5947: PPUSH
5948: LD_STRING D2c-Khat-1
5950: PPUSH
5951: CALL_OW 88
// end ; Video ( false ) ;
5955: LD_INT 0
5957: PPUSH
5958: CALL 83715 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
5962: LD_INT 22
5964: PUSH
5965: LD_INT 4
5967: PUSH
5968: EMPTY
5969: LIST
5970: LIST
5971: PPUSH
5972: CALL_OW 69
5976: PPUSH
5977: LD_INT 1
5979: PPUSH
5980: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
5984: LD_STRING M1a
5986: PPUSH
5987: CALL_OW 337
// joinEpsilon = 1 ;
5991: LD_ADDR_EXP 29
5995: PUSH
5996: LD_INT 1
5998: ST_TO_ADDR
// end ;
5999: PPOPN 1
6001: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do var p ;
6002: LD_INT 38
6004: PPUSH
6005: LD_INT 1
6007: PPUSH
6008: CALL_OW 289
6012: PUSH
6013: LD_INT 0
6015: EQUAL
6016: PUSH
6017: LD_INT 47
6019: PPUSH
6020: LD_INT 1
6022: PPUSH
6023: CALL_OW 289
6027: PUSH
6028: LD_INT 0
6030: EQUAL
6031: AND
6032: PUSH
6033: LD_INT 47
6035: PPUSH
6036: LD_INT 2
6038: PPUSH
6039: CALL_OW 289
6043: PUSH
6044: LD_INT 0
6046: EQUAL
6047: AND
6048: IFFALSE 6173
6050: GO 6052
6052: DISABLE
6053: LD_INT 0
6055: PPUSH
// begin p := 0 ;
6056: LD_ADDR_VAR 0 1
6060: PUSH
6061: LD_INT 0
6063: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6064: LD_INT 38
6066: PUSH
6067: LD_INT 47
6069: PUSH
6070: EMPTY
6071: LIST
6072: LIST
6073: PPUSH
6074: LD_INT 56
6076: PPUSH
6077: LD_INT 0
6079: PPUSH
6080: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6084: LD_INT 35
6086: PPUSH
6087: CALL_OW 67
// p := p + 1 ;
6091: LD_ADDR_VAR 0 1
6095: PUSH
6096: LD_VAR 0 1
6100: PUSH
6101: LD_INT 1
6103: PLUS
6104: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6105: LD_INT 38
6107: PUSH
6108: LD_INT 47
6110: PUSH
6111: EMPTY
6112: LIST
6113: LIST
6114: PPUSH
6115: LD_INT 56
6117: PPUSH
6118: LD_INT 0
6120: PPUSH
6121: CALL_OW 111
// if IsInArea ( cargo1 , RemArea ) then
6125: LD_INT 38
6127: PPUSH
6128: LD_INT 27
6130: PPUSH
6131: CALL_OW 308
6135: IFFALSE 6144
// RemoveUnit ( cargo1 ) ;
6137: LD_INT 38
6139: PPUSH
6140: CALL_OW 64
// if IsInArea ( cargo2 , RemArea ) then
6144: LD_INT 47
6146: PPUSH
6147: LD_INT 27
6149: PPUSH
6150: CALL_OW 308
6154: IFFALSE 6163
// RemoveUnit ( cargo2 ) ;
6156: LD_INT 47
6158: PPUSH
6159: CALL_OW 64
// until p > 30 ;
6163: LD_VAR 0 1
6167: PUSH
6168: LD_INT 30
6170: GREATER
6171: IFFALSE 6084
// end ;
6173: PPOPN 1
6175: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
6176: LD_EXP 65
6180: PUSH
6181: LD_INT 1
6183: EQUAL
6184: IFFALSE 7316
6186: GO 6188
6188: DISABLE
6189: LD_INT 0
6191: PPUSH
6192: PPUSH
6193: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6194: LD_ADDR_VAR 0 1
6198: PUSH
6199: LD_INT 22
6201: PUSH
6202: LD_INT 1
6204: PUSH
6205: EMPTY
6206: LIST
6207: LIST
6208: PUSH
6209: LD_INT 25
6211: PUSH
6212: LD_INT 4
6214: PUSH
6215: EMPTY
6216: LIST
6217: LIST
6218: PUSH
6219: LD_INT 26
6221: PUSH
6222: LD_INT 1
6224: PUSH
6225: EMPTY
6226: LIST
6227: LIST
6228: PUSH
6229: EMPTY
6230: LIST
6231: LIST
6232: LIST
6233: PPUSH
6234: CALL_OW 69
6238: PUSH
6239: LD_EXP 1
6243: PUSH
6244: LD_EXP 2
6248: PUSH
6249: LD_EXP 3
6253: PUSH
6254: LD_EXP 4
6258: PUSH
6259: LD_EXP 5
6263: PUSH
6264: LD_EXP 6
6268: PUSH
6269: LD_EXP 7
6273: PUSH
6274: LD_EXP 8
6278: PUSH
6279: LD_EXP 9
6283: PUSH
6284: LD_EXP 10
6288: PUSH
6289: LD_EXP 11
6293: PUSH
6294: LD_EXP 12
6298: PUSH
6299: LD_EXP 13
6303: PUSH
6304: LD_EXP 14
6308: PUSH
6309: LD_EXP 15
6313: PUSH
6314: LD_EXP 16
6318: PUSH
6319: LD_EXP 17
6323: PUSH
6324: LD_EXP 18
6328: PUSH
6329: LD_EXP 19
6333: PUSH
6334: LD_EXP 24
6338: PUSH
6339: EMPTY
6340: LIST
6341: LIST
6342: LIST
6343: LIST
6344: LIST
6345: LIST
6346: LIST
6347: LIST
6348: LIST
6349: LIST
6350: LIST
6351: LIST
6352: LIST
6353: LIST
6354: LIST
6355: LIST
6356: LIST
6357: LIST
6358: LIST
6359: LIST
6360: DIFF
6361: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6362: LD_ADDR_VAR 0 2
6366: PUSH
6367: LD_INT 22
6369: PUSH
6370: LD_INT 1
6372: PUSH
6373: EMPTY
6374: LIST
6375: LIST
6376: PUSH
6377: LD_INT 26
6379: PUSH
6380: LD_INT 1
6382: PUSH
6383: EMPTY
6384: LIST
6385: LIST
6386: PUSH
6387: LD_INT 2
6389: PUSH
6390: LD_INT 25
6392: PUSH
6393: LD_INT 1
6395: PUSH
6396: EMPTY
6397: LIST
6398: LIST
6399: PUSH
6400: LD_INT 25
6402: PUSH
6403: LD_INT 2
6405: PUSH
6406: EMPTY
6407: LIST
6408: LIST
6409: PUSH
6410: LD_INT 25
6412: PUSH
6413: LD_INT 3
6415: PUSH
6416: EMPTY
6417: LIST
6418: LIST
6419: PUSH
6420: EMPTY
6421: LIST
6422: LIST
6423: LIST
6424: LIST
6425: PUSH
6426: EMPTY
6427: LIST
6428: LIST
6429: LIST
6430: PPUSH
6431: CALL_OW 69
6435: PUSH
6436: LD_EXP 1
6440: PUSH
6441: LD_EXP 2
6445: PUSH
6446: LD_EXP 3
6450: PUSH
6451: LD_EXP 4
6455: PUSH
6456: LD_EXP 5
6460: PUSH
6461: LD_EXP 6
6465: PUSH
6466: LD_EXP 7
6470: PUSH
6471: LD_EXP 8
6475: PUSH
6476: LD_EXP 9
6480: PUSH
6481: LD_EXP 10
6485: PUSH
6486: LD_EXP 11
6490: PUSH
6491: LD_EXP 12
6495: PUSH
6496: LD_EXP 13
6500: PUSH
6501: LD_EXP 14
6505: PUSH
6506: LD_EXP 15
6510: PUSH
6511: LD_EXP 16
6515: PUSH
6516: LD_EXP 17
6520: PUSH
6521: LD_EXP 18
6525: PUSH
6526: LD_EXP 19
6530: PUSH
6531: LD_EXP 24
6535: PUSH
6536: EMPTY
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: DIFF
6558: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6559: LD_EXP 10
6563: PUSH
6564: LD_VAR 0 2
6568: OR
6569: PUSH
6570: LD_EXP 17
6574: PUSH
6575: LD_VAR 0 1
6579: OR
6580: AND
6581: IFFALSE 6800
// begin DialogueOn ;
6583: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6587: LD_EXP 17
6591: PPUSH
6592: CALL_OW 302
6596: IFFALSE 6612
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6598: LD_EXP 17
6602: PPUSH
6603: LD_STRING D3-Sci1-1
6605: PPUSH
6606: CALL_OW 88
6610: GO 6624
// Say ( tmp1 , D3-Sci1-1 ) ;
6612: LD_VAR 0 1
6616: PPUSH
6617: LD_STRING D3-Sci1-1
6619: PPUSH
6620: CALL_OW 88
// if IsOk ( Gary ) then
6624: LD_EXP 10
6628: PPUSH
6629: CALL_OW 302
6633: IFFALSE 6649
// Say ( Gary , D3-Gary-1 ) else
6635: LD_EXP 10
6639: PPUSH
6640: LD_STRING D3-Gary-1
6642: PPUSH
6643: CALL_OW 88
6647: GO 6661
// Say ( tmp2 , D3-Gary-1 ) ;
6649: LD_VAR 0 2
6653: PPUSH
6654: LD_STRING D3-Gary-1
6656: PPUSH
6657: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6661: LD_EXP 17
6665: PPUSH
6666: CALL_OW 302
6670: IFFALSE 6686
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6672: LD_EXP 17
6676: PPUSH
6677: LD_STRING D3-Sci1-2
6679: PPUSH
6680: CALL_OW 88
6684: GO 6698
// Say ( tmp1 , D3-Sci1-2 ) ;
6686: LD_VAR 0 1
6690: PPUSH
6691: LD_STRING D3-Sci1-2
6693: PPUSH
6694: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6698: LD_EXP 1
6702: PPUSH
6703: LD_STRING D3-JMM-2
6705: PPUSH
6706: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6710: LD_EXP 17
6714: PPUSH
6715: CALL_OW 302
6719: IFFALSE 6735
// Say ( DeltaDoctor , D3-Sci1-3 ) else
6721: LD_EXP 17
6725: PPUSH
6726: LD_STRING D3-Sci1-3
6728: PPUSH
6729: CALL_OW 88
6733: GO 6747
// Say ( tmp1 , D3-Sci1-3 ) ;
6735: LD_VAR 0 1
6739: PPUSH
6740: LD_STRING D3-Sci1-3
6742: PPUSH
6743: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
6747: LD_EXP 1
6751: PPUSH
6752: LD_STRING D3-JMM-3
6754: PPUSH
6755: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6759: LD_EXP 17
6763: PPUSH
6764: CALL_OW 302
6768: IFFALSE 6784
// Say ( DeltaDoctor , D3-Sci1-4 ) else
6770: LD_EXP 17
6774: PPUSH
6775: LD_STRING D3-Sci1-4
6777: PPUSH
6778: CALL_OW 88
6782: GO 6796
// Say ( tmp1 , D3-Sci1-4 ) ;
6784: LD_VAR 0 1
6788: PPUSH
6789: LD_STRING D3-Sci1-4
6791: PPUSH
6792: CALL_OW 88
// DialogueOff ;
6796: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
6800: LD_INT 12
6802: PPUSH
6803: LD_INT 1
6805: PPUSH
6806: LD_INT 1
6808: PPUSH
6809: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
6813: LD_INT 32
6815: PPUSH
6816: LD_INT 1
6818: PPUSH
6819: LD_INT 1
6821: PPUSH
6822: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
6826: LD_INT 12
6828: PPUSH
6829: LD_INT 1
6831: PPUSH
6832: LD_INT 1
6834: PPUSH
6835: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
6839: LD_INT 33
6841: PPUSH
6842: LD_INT 1
6844: PPUSH
6845: LD_INT 1
6847: PPUSH
6848: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
6852: LD_STRING M2
6854: PPUSH
6855: CALL_OW 337
// wait ( 3 3$0 ) ;
6859: LD_INT 6300
6861: PPUSH
6862: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
6866: LD_INT 35
6868: PPUSH
6869: CALL_OW 67
// until not InBattle ( 1 ) ;
6873: LD_INT 1
6875: PPUSH
6876: CALL_OW 463
6880: NOT
6881: IFFALSE 6866
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
6883: LD_EXP 11
6887: PPUSH
6888: CALL_OW 302
6892: PUSH
6893: LD_EXP 17
6897: PPUSH
6898: CALL_OW 302
6902: AND
6903: IFFALSE 7072
// begin DialogueOn ;
6905: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
6909: LD_EXP 11
6913: PPUSH
6914: LD_STRING D3a-Sim-1
6916: PPUSH
6917: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
6921: LD_EXP 17
6925: PPUSH
6926: LD_STRING D3a-Sci1-1
6928: PPUSH
6929: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
6933: LD_EXP 11
6937: PPUSH
6938: LD_STRING D3a-Sim-2
6940: PPUSH
6941: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
6945: LD_EXP 17
6949: PPUSH
6950: LD_STRING D3a-Sci1-2
6952: PPUSH
6953: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
6957: LD_EXP 11
6961: PPUSH
6962: LD_STRING D3a-Sim-3
6964: PPUSH
6965: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
6969: LD_EXP 17
6973: PPUSH
6974: LD_STRING D3a-Sci1-3
6976: PPUSH
6977: CALL_OW 88
// if IsOK ( Joan ) then
6981: LD_EXP 13
6985: PPUSH
6986: CALL_OW 302
6990: IFFALSE 7006
// Say ( Simms , D3a-Sim-4 ) else
6992: LD_EXP 11
6996: PPUSH
6997: LD_STRING D3a-Sim-4
6999: PPUSH
7000: CALL_OW 88
7004: GO 7018
// Say ( Simms , D3a-Sim-4a ) ;
7006: LD_EXP 11
7010: PPUSH
7011: LD_STRING D3a-Sim-4a
7013: PPUSH
7014: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
7018: LD_EXP 17
7022: PPUSH
7023: LD_STRING D3a-Sci1-4
7025: PPUSH
7026: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7030: LD_EXP 11
7034: PPUSH
7035: LD_STRING D3a-Sim-5
7037: PPUSH
7038: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
7042: LD_EXP 17
7046: PPUSH
7047: LD_STRING D3a-Sci1-5
7049: PPUSH
7050: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7054: LD_EXP 11
7058: PPUSH
7059: LD_STRING D3a-Sim-6
7061: PPUSH
7062: CALL_OW 88
// DialogueOff ;
7066: CALL_OW 7
// end else
7070: GO 7316
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
7072: LD_ADDR_VAR 0 3
7076: PUSH
7077: LD_INT 22
7079: PUSH
7080: LD_INT 1
7082: PUSH
7083: EMPTY
7084: LIST
7085: LIST
7086: PUSH
7087: LD_INT 25
7089: PUSH
7090: LD_INT 4
7092: PUSH
7093: EMPTY
7094: LIST
7095: LIST
7096: PUSH
7097: EMPTY
7098: LIST
7099: LIST
7100: PPUSH
7101: CALL_OW 69
7105: PUSH
7106: LD_EXP 11
7110: PUSH
7111: LD_EXP 14
7115: PUSH
7116: EMPTY
7117: LIST
7118: LIST
7119: DIFF
7120: ST_TO_ADDR
// if tmp3 > 0 then
7121: LD_VAR 0 3
7125: PUSH
7126: LD_INT 0
7128: GREATER
7129: IFFALSE 7316
// begin DialogueOn ;
7131: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7135: LD_EXP 11
7139: PPUSH
7140: LD_STRING D3a-Sim-1
7142: PPUSH
7143: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
7147: LD_VAR 0 3
7151: PUSH
7152: LD_INT 1
7154: ARRAY
7155: PPUSH
7156: LD_STRING D3a-Sci1-1
7158: PPUSH
7159: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7163: LD_EXP 11
7167: PPUSH
7168: LD_STRING D3a-Sim-2
7170: PPUSH
7171: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
7175: LD_VAR 0 3
7179: PUSH
7180: LD_INT 1
7182: ARRAY
7183: PPUSH
7184: LD_STRING D3a-Sci1-2
7186: PPUSH
7187: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7191: LD_EXP 11
7195: PPUSH
7196: LD_STRING D3a-Sim-3
7198: PPUSH
7199: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
7203: LD_VAR 0 3
7207: PUSH
7208: LD_INT 1
7210: ARRAY
7211: PPUSH
7212: LD_STRING D3a-Sci1-3
7214: PPUSH
7215: CALL_OW 88
// if IsOK ( Joan ) then
7219: LD_EXP 13
7223: PPUSH
7224: CALL_OW 302
7228: IFFALSE 7244
// Say ( Simms , D3a-Sim-4 ) else
7230: LD_EXP 11
7234: PPUSH
7235: LD_STRING D3a-Sim-4
7237: PPUSH
7238: CALL_OW 88
7242: GO 7256
// Say ( Simms , D3a-Sim-4a ) ;
7244: LD_EXP 11
7248: PPUSH
7249: LD_STRING D3a-Sim-4a
7251: PPUSH
7252: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
7256: LD_VAR 0 3
7260: PUSH
7261: LD_INT 1
7263: ARRAY
7264: PPUSH
7265: LD_STRING D3a-Sci1-4
7267: PPUSH
7268: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7272: LD_EXP 11
7276: PPUSH
7277: LD_STRING D3a-Sim-5
7279: PPUSH
7280: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
7284: LD_VAR 0 3
7288: PUSH
7289: LD_INT 1
7291: ARRAY
7292: PPUSH
7293: LD_STRING D3a-Sci1-5
7295: PPUSH
7296: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7300: LD_EXP 11
7304: PPUSH
7305: LD_STRING D3a-Sim-6
7307: PPUSH
7308: CALL_OW 88
// DialogueOff ;
7312: CALL_OW 7
// end ; end ; end ;
7316: PPOPN 3
7318: END
// every 0 0$2 trigger joinEpsilon = 1 do var rnd ;
7319: LD_EXP 29
7323: PUSH
7324: LD_INT 1
7326: EQUAL
7327: IFFALSE 7662
7329: GO 7331
7331: DISABLE
7332: LD_INT 0
7334: PPUSH
// begin wait ( 2 2$00 ) ;
7335: LD_INT 4200
7337: PPUSH
7338: CALL_OW 67
// SayRadio ( AmScout , D4-FSol1-1 ) ;
7342: LD_EXP 18
7346: PPUSH
7347: LD_STRING D4-FSol1-1
7349: PPUSH
7350: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
7354: LD_STRING M3
7356: PPUSH
7357: CALL_OW 337
// PrepareRussians ;
7361: CALL 3620 0 0
// spawnRussians := true ;
7365: LD_ADDR_EXP 58
7369: PUSH
7370: LD_INT 1
7372: ST_TO_ADDR
// rnd = Rand ( 1 , 100 ) ;
7373: LD_ADDR_VAR 0 1
7377: PUSH
7378: LD_INT 1
7380: PPUSH
7381: LD_INT 100
7383: PPUSH
7384: CALL_OW 12
7388: ST_TO_ADDR
// if difficulty = 1 then
7389: LD_OWVAR 67
7393: PUSH
7394: LD_INT 1
7396: EQUAL
7397: IFFALSE 7480
// begin if rnd > 0 and rnd < 51 then
7399: LD_VAR 0 1
7403: PUSH
7404: LD_INT 0
7406: GREATER
7407: PUSH
7408: LD_VAR 0 1
7412: PUSH
7413: LD_INT 51
7415: LESS
7416: AND
7417: IFFALSE 7426
// BuildRussianBase ( 2 ) ;
7419: LD_INT 2
7421: PPUSH
7422: CALL 11768 0 1
// if rnd > 50 and rnd < 81 then
7426: LD_VAR 0 1
7430: PUSH
7431: LD_INT 50
7433: GREATER
7434: PUSH
7435: LD_VAR 0 1
7439: PUSH
7440: LD_INT 81
7442: LESS
7443: AND
7444: IFFALSE 7453
// BuildRussianBase ( 1 ) ;
7446: LD_INT 1
7448: PPUSH
7449: CALL 11768 0 1
// if rnd > 80 and rnd < 101 then
7453: LD_VAR 0 1
7457: PUSH
7458: LD_INT 80
7460: GREATER
7461: PUSH
7462: LD_VAR 0 1
7466: PUSH
7467: LD_INT 101
7469: LESS
7470: AND
7471: IFFALSE 7480
// BuildRussianBase ( 3 ) ;
7473: LD_INT 3
7475: PPUSH
7476: CALL 11768 0 1
// end ; if difficulty = 2 then
7480: LD_OWVAR 67
7484: PUSH
7485: LD_INT 2
7487: EQUAL
7488: IFFALSE 7571
// begin if rnd > 0 and rnd < 61 then
7490: LD_VAR 0 1
7494: PUSH
7495: LD_INT 0
7497: GREATER
7498: PUSH
7499: LD_VAR 0 1
7503: PUSH
7504: LD_INT 61
7506: LESS
7507: AND
7508: IFFALSE 7517
// BuildRussianBase ( 2 ) ;
7510: LD_INT 2
7512: PPUSH
7513: CALL 11768 0 1
// if rnd > 60 and rnd < 81 then
7517: LD_VAR 0 1
7521: PUSH
7522: LD_INT 60
7524: GREATER
7525: PUSH
7526: LD_VAR 0 1
7530: PUSH
7531: LD_INT 81
7533: LESS
7534: AND
7535: IFFALSE 7544
// BuildRussianBase ( 1 ) ;
7537: LD_INT 1
7539: PPUSH
7540: CALL 11768 0 1
// if rnd > 80 and rnd < 101 then
7544: LD_VAR 0 1
7548: PUSH
7549: LD_INT 80
7551: GREATER
7552: PUSH
7553: LD_VAR 0 1
7557: PUSH
7558: LD_INT 101
7560: LESS
7561: AND
7562: IFFALSE 7571
// BuildRussianBase ( 3 ) ;
7564: LD_INT 3
7566: PPUSH
7567: CALL 11768 0 1
// end ; if difficulty >= 3 then
7571: LD_OWVAR 67
7575: PUSH
7576: LD_INT 3
7578: GREATEREQUAL
7579: IFFALSE 7662
// begin if rnd > 0 and rnd < 71 then
7581: LD_VAR 0 1
7585: PUSH
7586: LD_INT 0
7588: GREATER
7589: PUSH
7590: LD_VAR 0 1
7594: PUSH
7595: LD_INT 71
7597: LESS
7598: AND
7599: IFFALSE 7608
// BuildRussianBase ( 3 ) ;
7601: LD_INT 3
7603: PPUSH
7604: CALL 11768 0 1
// if rnd > 70 and rnd < 81 then
7608: LD_VAR 0 1
7612: PUSH
7613: LD_INT 70
7615: GREATER
7616: PUSH
7617: LD_VAR 0 1
7621: PUSH
7622: LD_INT 81
7624: LESS
7625: AND
7626: IFFALSE 7635
// BuildRussianBase ( 2 ) ;
7628: LD_INT 2
7630: PPUSH
7631: CALL 11768 0 1
// if rnd > 80 and rnd < 101 then
7635: LD_VAR 0 1
7639: PUSH
7640: LD_INT 80
7642: GREATER
7643: PUSH
7644: LD_VAR 0 1
7648: PUSH
7649: LD_INT 101
7651: LESS
7652: AND
7653: IFFALSE 7662
// BuildRussianBase ( 1 ) ;
7655: LD_INT 1
7657: PPUSH
7658: CALL 11768 0 1
// end ; end ;
7662: PPOPN 1
7664: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7665: LD_INT 54
7667: PPUSH
7668: LD_INT 1
7670: PPUSH
7671: CALL_OW 321
7675: PUSH
7676: LD_INT 2
7678: EQUAL
7679: PUSH
7680: LD_INT 21
7682: PPUSH
7683: LD_INT 1
7685: PPUSH
7686: CALL_OW 321
7690: PUSH
7691: LD_INT 2
7693: EQUAL
7694: OR
7695: PUSH
7696: LD_INT 22
7698: PPUSH
7699: LD_INT 1
7701: PPUSH
7702: CALL_OW 321
7706: PUSH
7707: LD_INT 2
7709: EQUAL
7710: OR
7711: IFFALSE 8013
7713: GO 7715
7715: DISABLE
7716: LD_INT 0
7718: PPUSH
7719: PPUSH
// begin if IsOk ( DeltaDoctor ) then
7720: LD_EXP 17
7724: PPUSH
7725: CALL_OW 302
7729: IFFALSE 7743
// tmp := DeltaDoctor else
7731: LD_ADDR_VAR 0 2
7735: PUSH
7736: LD_EXP 17
7740: ST_TO_ADDR
7741: GO 7753
// tmp := Denis ;
7743: LD_ADDR_VAR 0 2
7747: PUSH
7748: LD_EXP 12
7752: ST_TO_ADDR
// if tmp then
7753: LD_VAR 0 2
7757: IFFALSE 7851
// begin DialogueOn ;
7759: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
7763: LD_EXP 1
7767: PPUSH
7768: LD_STRING D6-JMM-1
7770: PPUSH
7771: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
7775: LD_VAR 0 2
7779: PPUSH
7780: LD_STRING D6-Sci1-1
7782: PPUSH
7783: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
7787: LD_EXP 1
7791: PPUSH
7792: LD_STRING D6-JMM-2
7794: PPUSH
7795: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
7799: LD_VAR 0 2
7803: PPUSH
7804: LD_STRING D6-Sci1-2
7806: PPUSH
7807: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
7811: LD_EXP 1
7815: PPUSH
7816: LD_STRING D6-JMM-3
7818: PPUSH
7819: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
7823: LD_VAR 0 2
7827: PPUSH
7828: LD_STRING D6-Sci1-3
7830: PPUSH
7831: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
7835: LD_EXP 1
7839: PPUSH
7840: LD_STRING D6-JMM-4
7842: PPUSH
7843: CALL_OW 88
// DialogueOff ;
7847: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
7851: LD_INT 1050
7853: PPUSH
7854: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
7858: LD_EXP 49
7862: PUSH
7863: LD_INT 0
7865: EQUAL
7866: PUSH
7867: LD_EXP 14
7871: PPUSH
7872: CALL_OW 302
7876: AND
7877: IFFALSE 7935
// begin DialogueOn ;
7879: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
7883: LD_EXP 27
7887: PPUSH
7888: LD_STRING D5-Ar1-1
7890: PPUSH
7891: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
7895: LD_EXP 26
7899: PPUSH
7900: LD_STRING D5-Diet-1
7902: PPUSH
7903: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
7907: LD_EXP 27
7911: PPUSH
7912: LD_STRING D5-Ar1-2
7914: PPUSH
7915: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
7919: LD_EXP 26
7923: PPUSH
7924: LD_STRING D5-Diet-2
7926: PPUSH
7927: CALL_OW 88
// DialogueOff ;
7931: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
7935: LD_INT 35
7937: PPUSH
7938: CALL_OW 67
// until tick > 10 10$00 ;
7942: LD_OWVAR 1
7946: PUSH
7947: LD_INT 21000
7949: GREATER
7950: IFFALSE 7935
// wait ( 1 1$30 ) ;
7952: LD_INT 3150
7954: PPUSH
7955: CALL_OW 67
// if arabianTrait = 0 then
7959: LD_EXP 49
7963: PUSH
7964: LD_INT 0
7966: EQUAL
7967: IFFALSE 8013
// begin arabianTrait = 1 ;
7969: LD_ADDR_EXP 49
7973: PUSH
7974: LD_INT 1
7976: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
7977: LD_INT 2
7979: PPUSH
7980: LD_INT 3
7982: PPUSH
7983: LD_INT 1
7985: PPUSH
7986: LD_INT 1
7988: PPUSH
7989: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
7993: LD_INT 2
7995: PPUSH
7996: LD_INT 6
7998: PPUSH
7999: LD_INT 1
8001: PPUSH
8002: LD_INT 1
8004: PPUSH
8005: CALL_OW 80
// PrepareArabianTrait ;
8009: CALL 8016 0 0
// end ; end ;
8013: PPOPN 2
8015: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding ; begin
8016: LD_INT 0
8018: PPUSH
8019: PPUSH
8020: PPUSH
8021: PPUSH
8022: PPUSH
8023: PPUSH
8024: PPUSH
8025: PPUSH
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
8026: LD_ADDR_VAR 0 6
8030: PUSH
8031: LD_INT 22
8033: PUSH
8034: LD_INT 2
8036: PUSH
8037: EMPTY
8038: LIST
8039: LIST
8040: PUSH
8041: LD_INT 2
8043: PUSH
8044: LD_INT 25
8046: PUSH
8047: LD_INT 4
8049: PUSH
8050: EMPTY
8051: LIST
8052: LIST
8053: PUSH
8054: LD_INT 25
8056: PUSH
8057: LD_INT 2
8059: PUSH
8060: EMPTY
8061: LIST
8062: LIST
8063: PUSH
8064: LD_INT 25
8066: PUSH
8067: LD_INT 3
8069: PUSH
8070: EMPTY
8071: LIST
8072: LIST
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: LIST
8078: LIST
8079: PUSH
8080: EMPTY
8081: LIST
8082: LIST
8083: PPUSH
8084: CALL_OW 69
8088: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8089: LD_ADDR_VAR 0 5
8093: PUSH
8094: LD_INT 22
8096: PUSH
8097: LD_INT 2
8099: PUSH
8100: EMPTY
8101: LIST
8102: LIST
8103: PUSH
8104: LD_INT 21
8106: PUSH
8107: LD_INT 1
8109: PUSH
8110: EMPTY
8111: LIST
8112: LIST
8113: PUSH
8114: LD_INT 2
8116: PUSH
8117: LD_INT 25
8119: PUSH
8120: LD_INT 1
8122: PUSH
8123: EMPTY
8124: LIST
8125: LIST
8126: PUSH
8127: LD_INT 25
8129: PUSH
8130: LD_INT 8
8132: PUSH
8133: EMPTY
8134: LIST
8135: LIST
8136: PUSH
8137: LD_INT 25
8139: PUSH
8140: LD_INT 15
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: PUSH
8147: EMPTY
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: PUSH
8153: EMPTY
8154: LIST
8155: LIST
8156: LIST
8157: PPUSH
8158: CALL_OW 69
8162: PUSH
8163: LD_EXP 26
8167: PUSH
8168: EMPTY
8169: LIST
8170: DIFF
8171: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
8172: LD_ADDR_VAR 0 7
8176: PUSH
8177: LD_INT 22
8179: PUSH
8180: LD_INT 2
8182: PUSH
8183: EMPTY
8184: LIST
8185: LIST
8186: PUSH
8187: LD_INT 30
8189: PUSH
8190: LD_INT 5
8192: PUSH
8193: EMPTY
8194: LIST
8195: LIST
8196: PUSH
8197: EMPTY
8198: LIST
8199: LIST
8200: PPUSH
8201: CALL_OW 69
8205: PUSH
8206: LD_INT 1
8208: ARRAY
8209: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
8210: LD_VAR 0 6
8214: PPUSH
8215: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
8219: LD_VAR 0 5
8223: PPUSH
8224: CALL_OW 122
// wait ( 0 0$3 ) ;
8228: LD_INT 105
8230: PPUSH
8231: CALL_OW 67
// AddComEnterUnit ( arCivilian , barracks ) ;
8235: LD_VAR 0 6
8239: PPUSH
8240: LD_VAR 0 7
8244: PPUSH
8245: CALL_OW 180
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
8249: LD_VAR 0 6
8253: PPUSH
8254: LD_INT 1
8256: PUSH
8257: LD_INT 8
8259: PUSH
8260: EMPTY
8261: LIST
8262: LIST
8263: PUSH
8264: LD_INT 1
8266: PPUSH
8267: LD_INT 2
8269: PPUSH
8270: CALL_OW 12
8274: ARRAY
8275: PPUSH
8276: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
8280: LD_VAR 0 6
8284: PPUSH
8285: CALL_OW 182
// wait ( 0 0$1 ) ;
8289: LD_INT 35
8291: PPUSH
8292: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
8296: LD_INT 76
8298: PPUSH
8299: LD_INT 19
8301: PPUSH
8302: CALL_OW 84
// DialogueOn ;
8306: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8310: LD_INT 22
8312: PUSH
8313: LD_INT 1
8315: PUSH
8316: EMPTY
8317: LIST
8318: LIST
8319: PUSH
8320: LD_INT 26
8322: PUSH
8323: LD_INT 1
8325: PUSH
8326: EMPTY
8327: LIST
8328: LIST
8329: PUSH
8330: LD_INT 2
8332: PUSH
8333: LD_INT 25
8335: PUSH
8336: LD_INT 1
8338: PUSH
8339: EMPTY
8340: LIST
8341: LIST
8342: PUSH
8343: LD_INT 25
8345: PUSH
8346: LD_INT 2
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 25
8355: PUSH
8356: LD_INT 3
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: LD_INT 25
8365: PUSH
8366: LD_INT 4
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: LD_INT 25
8375: PUSH
8376: LD_INT 5
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: PUSH
8383: EMPTY
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: PUSH
8391: EMPTY
8392: LIST
8393: LIST
8394: LIST
8395: PPUSH
8396: CALL_OW 69
8400: PPUSH
8401: LD_STRING D8-Sol1-1
8403: PPUSH
8404: LD_STRING D8-Sol1-1
8406: PPUSH
8407: CALL 11110 0 3
// if IsOK ( DeltaDoctor ) then
8411: LD_EXP 17
8415: PPUSH
8416: CALL_OW 302
8420: IFFALSE 8436
// Say ( DeltaDoctor , D8-Sci1-1 ) else
8422: LD_EXP 17
8426: PPUSH
8427: LD_STRING D8-Sci1-1
8429: PPUSH
8430: CALL_OW 88
8434: GO 8537
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8436: LD_INT 22
8438: PUSH
8439: LD_INT 1
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PUSH
8446: LD_INT 26
8448: PUSH
8449: LD_INT 1
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: PUSH
8456: LD_INT 2
8458: PUSH
8459: LD_INT 25
8461: PUSH
8462: LD_INT 1
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 25
8471: PUSH
8472: LD_INT 2
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 25
8481: PUSH
8482: LD_INT 3
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PUSH
8489: LD_INT 25
8491: PUSH
8492: LD_INT 4
8494: PUSH
8495: EMPTY
8496: LIST
8497: LIST
8498: PUSH
8499: LD_INT 25
8501: PUSH
8502: LD_INT 5
8504: PUSH
8505: EMPTY
8506: LIST
8507: LIST
8508: PUSH
8509: EMPTY
8510: LIST
8511: LIST
8512: LIST
8513: LIST
8514: LIST
8515: LIST
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: LIST
8521: PPUSH
8522: CALL_OW 69
8526: PPUSH
8527: LD_STRING D8-Sol1-1
8529: PPUSH
8530: LD_STRING D8-Sol1-1
8532: PPUSH
8533: CALL 11110 0 3
// Say ( JMM , D8-JMM-1 ) ;
8537: LD_EXP 1
8541: PPUSH
8542: LD_STRING D8-JMM-1
8544: PPUSH
8545: CALL_OW 88
// DialogueOff ;
8549: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
8553: LD_INT 2
8555: PPUSH
8556: LD_INT 2
8558: PPUSH
8559: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8563: LD_INT 1
8565: PPUSH
8566: LD_INT 2
8568: PPUSH
8569: LD_INT 2
8571: PPUSH
8572: LD_INT 1
8574: PPUSH
8575: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
8579: LD_INT 3
8581: PPUSH
8582: LD_INT 2
8584: PPUSH
8585: LD_INT 1
8587: PPUSH
8588: LD_INT 1
8590: PPUSH
8591: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
8595: LD_STRING M4
8597: PPUSH
8598: CALL_OW 337
// wait ( 0 0$1 ) ;
8602: LD_INT 35
8604: PPUSH
8605: CALL_OW 67
// if IsLive ( Khatam ) then
8609: LD_EXP 14
8613: PPUSH
8614: CALL_OW 300
8618: IFFALSE 8632
// DoNotAttack ( 2 , Khatam ) ;
8620: LD_INT 2
8622: PPUSH
8623: LD_EXP 14
8627: PPUSH
8628: CALL_OW 471
// wait ( 0 0$1 ) ;
8632: LD_INT 35
8634: PPUSH
8635: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
8639: LD_ADDR_VAR 0 8
8643: PUSH
8644: LD_INT 22
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 21
8656: PUSH
8657: LD_INT 3
8659: PUSH
8660: EMPTY
8661: LIST
8662: LIST
8663: PUSH
8664: EMPTY
8665: LIST
8666: LIST
8667: PPUSH
8668: CALL_OW 69
8672: PPUSH
8673: LD_VAR 0 5
8677: PUSH
8678: LD_INT 1
8680: ARRAY
8681: PPUSH
8682: CALL_OW 74
8686: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
8687: LD_VAR 0 5
8691: PPUSH
8692: LD_INT 25
8694: PUSH
8695: LD_INT 1
8697: PUSH
8698: EMPTY
8699: LIST
8700: LIST
8701: PPUSH
8702: CALL_OW 72
8706: PUSH
8707: LD_INT 1
8709: ARRAY
8710: PPUSH
8711: LD_VAR 0 8
8715: PPUSH
8716: CALL_OW 250
8720: PPUSH
8721: LD_VAR 0 8
8725: PPUSH
8726: CALL_OW 251
8730: PPUSH
8731: LD_VAR 0 8
8735: PPUSH
8736: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
8740: LD_VAR 0 5
8744: PPUSH
8745: LD_INT 84
8747: PPUSH
8748: LD_INT 22
8750: PPUSH
8751: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
8755: LD_VAR 0 5
8759: PPUSH
8760: LD_INT 82
8762: PPUSH
8763: LD_INT 5
8765: PPUSH
8766: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
8770: LD_VAR 0 5
8774: PPUSH
8775: LD_INT 95
8777: PPUSH
8778: LD_INT 12
8780: PPUSH
8781: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
8785: LD_VAR 0 5
8789: PPUSH
8790: LD_INT 102
8792: PPUSH
8793: LD_INT 11
8795: PPUSH
8796: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
8800: LD_VAR 0 5
8804: PPUSH
8805: LD_INT 116
8807: PPUSH
8808: LD_INT 15
8810: PPUSH
8811: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
8815: LD_VAR 0 5
8819: PPUSH
8820: LD_INT 140
8822: PPUSH
8823: LD_INT 25
8825: PPUSH
8826: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
8830: LD_VAR 0 5
8834: PPUSH
8835: LD_INT 160
8837: PPUSH
8838: LD_INT 56
8840: PPUSH
8841: CALL_OW 174
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8845: LD_ADDR_VAR 0 5
8849: PUSH
8850: LD_INT 22
8852: PUSH
8853: LD_INT 2
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: PUSH
8860: LD_INT 21
8862: PUSH
8863: LD_INT 1
8865: PUSH
8866: EMPTY
8867: LIST
8868: LIST
8869: PUSH
8870: LD_INT 2
8872: PUSH
8873: LD_INT 25
8875: PUSH
8876: LD_INT 1
8878: PUSH
8879: EMPTY
8880: LIST
8881: LIST
8882: PUSH
8883: LD_INT 25
8885: PUSH
8886: LD_INT 8
8888: PUSH
8889: EMPTY
8890: LIST
8891: LIST
8892: PUSH
8893: LD_INT 25
8895: PUSH
8896: LD_INT 15
8898: PUSH
8899: EMPTY
8900: LIST
8901: LIST
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: LIST
8907: LIST
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: LIST
8913: PPUSH
8914: CALL_OW 69
8918: PUSH
8919: LD_EXP 26
8923: PUSH
8924: EMPTY
8925: LIST
8926: DIFF
8927: ST_TO_ADDR
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
8928: LD_ADDR_VAR 0 6
8932: PUSH
8933: LD_INT 22
8935: PUSH
8936: LD_INT 2
8938: PUSH
8939: EMPTY
8940: LIST
8941: LIST
8942: PUSH
8943: LD_INT 21
8945: PUSH
8946: LD_INT 1
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 2
8955: PUSH
8956: LD_INT 25
8958: PUSH
8959: LD_INT 2
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: LD_INT 25
8968: PUSH
8969: LD_INT 3
8971: PUSH
8972: EMPTY
8973: LIST
8974: LIST
8975: PUSH
8976: LD_INT 25
8978: PUSH
8979: LD_INT 4
8981: PUSH
8982: EMPTY
8983: LIST
8984: LIST
8985: PUSH
8986: LD_INT 25
8988: PUSH
8989: LD_INT 12
8991: PUSH
8992: EMPTY
8993: LIST
8994: LIST
8995: PUSH
8996: LD_INT 25
8998: PUSH
8999: LD_INT 16
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: LIST
9010: LIST
9011: LIST
9012: LIST
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: LIST
9018: PPUSH
9019: CALL_OW 69
9023: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
9024: LD_ADDR_VAR 0 6
9028: PUSH
9029: LD_VAR 0 6
9033: PUSH
9034: LD_EXP 26
9038: ADD
9039: ST_TO_ADDR
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
9040: LD_VAR 0 5
9044: PPUSH
9045: LD_INT 189
9047: PPUSH
9048: LD_INT 79
9050: PPUSH
9051: CALL_OW 174
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
9055: LD_VAR 0 5
9059: PPUSH
9060: LD_INT 25
9062: PUSH
9063: LD_INT 15
9065: PUSH
9066: EMPTY
9067: LIST
9068: LIST
9069: PPUSH
9070: CALL_OW 72
9074: IFFALSE 9115
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
9076: LD_VAR 0 5
9080: PPUSH
9081: LD_INT 25
9083: PUSH
9084: LD_INT 15
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: PPUSH
9091: CALL_OW 72
9095: PUSH
9096: LD_INT 1
9098: ARRAY
9099: PPUSH
9100: LD_INT 84
9102: PPUSH
9103: LD_INT 21
9105: PPUSH
9106: CALL_OW 428
9110: PPUSH
9111: CALL_OW 120
// wait ( 0 0$4 ) ;
9115: LD_INT 140
9117: PPUSH
9118: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
9122: LD_VAR 0 6
9126: PPUSH
9127: LD_INT 88
9129: PPUSH
9130: LD_INT 8
9132: PPUSH
9133: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
9137: LD_VAR 0 6
9141: PPUSH
9142: LD_INT 102
9144: PPUSH
9145: LD_INT 10
9147: PPUSH
9148: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
9152: LD_VAR 0 6
9156: PPUSH
9157: LD_INT 116
9159: PPUSH
9160: LD_INT 15
9162: PPUSH
9163: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
9167: LD_VAR 0 6
9171: PPUSH
9172: LD_INT 140
9174: PPUSH
9175: LD_INT 25
9177: PPUSH
9178: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
9182: LD_VAR 0 6
9186: PPUSH
9187: LD_INT 160
9189: PPUSH
9190: LD_INT 56
9192: PPUSH
9193: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
9197: LD_VAR 0 6
9201: PPUSH
9202: LD_INT 189
9204: PPUSH
9205: LD_INT 79
9207: PPUSH
9208: CALL_OW 171
// arabianAttackersAI = 1 ;
9212: LD_ADDR_EXP 46
9216: PUSH
9217: LD_INT 1
9219: ST_TO_ADDR
// if IsOk ( Gary ) then
9220: LD_EXP 10
9224: PPUSH
9225: CALL_OW 302
9229: IFFALSE 9243
// Say ( Gary , D8a-Gary-1 ) ;
9231: LD_EXP 10
9235: PPUSH
9236: LD_STRING D8a-Gary-1
9238: PPUSH
9239: CALL_OW 88
// wait ( 0 0$5 ) ;
9243: LD_INT 175
9245: PPUSH
9246: CALL_OW 67
// if IsOK ( Khatam ) then
9250: LD_EXP 14
9254: PPUSH
9255: CALL_OW 302
9259: IFFALSE 9795
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
9261: LD_ADDR_VAR 0 3
9265: PUSH
9266: LD_INT 22
9268: PUSH
9269: LD_INT 1
9271: PUSH
9272: EMPTY
9273: LIST
9274: LIST
9275: PUSH
9276: LD_INT 2
9278: PUSH
9279: LD_INT 25
9281: PUSH
9282: LD_INT 1
9284: PUSH
9285: EMPTY
9286: LIST
9287: LIST
9288: PUSH
9289: LD_INT 25
9291: PUSH
9292: LD_INT 2
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: PUSH
9299: LD_INT 25
9301: PUSH
9302: LD_INT 3
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: PUSH
9309: LD_INT 25
9311: PUSH
9312: LD_INT 4
9314: PUSH
9315: EMPTY
9316: LIST
9317: LIST
9318: PUSH
9319: LD_INT 25
9321: PUSH
9322: LD_INT 5
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 25
9331: PUSH
9332: LD_INT 8
9334: PUSH
9335: EMPTY
9336: LIST
9337: LIST
9338: PUSH
9339: EMPTY
9340: LIST
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: LIST
9347: PUSH
9348: EMPTY
9349: LIST
9350: LIST
9351: PPUSH
9352: CALL_OW 69
9356: PUSH
9357: LD_EXP 1
9361: PUSH
9362: LD_EXP 2
9366: PUSH
9367: LD_EXP 3
9371: PUSH
9372: LD_EXP 4
9376: PUSH
9377: LD_EXP 5
9381: PUSH
9382: LD_EXP 6
9386: PUSH
9387: LD_EXP 7
9391: PUSH
9392: LD_EXP 8
9396: PUSH
9397: LD_EXP 9
9401: PUSH
9402: LD_EXP 10
9406: PUSH
9407: LD_EXP 11
9411: PUSH
9412: LD_EXP 12
9416: PUSH
9417: LD_EXP 13
9421: PUSH
9422: LD_EXP 14
9426: PUSH
9427: LD_EXP 15
9431: PUSH
9432: LD_EXP 16
9436: PUSH
9437: LD_EXP 17
9441: PUSH
9442: LD_EXP 19
9446: PUSH
9447: LD_EXP 24
9451: PUSH
9452: EMPTY
9453: LIST
9454: LIST
9455: LIST
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: LIST
9464: LIST
9465: LIST
9466: LIST
9467: LIST
9468: LIST
9469: LIST
9470: LIST
9471: LIST
9472: DIFF
9473: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
9474: LD_EXP 14
9478: PPUSH
9479: LD_INT 8
9481: PPUSH
9482: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
9486: LD_EXP 14
9490: PPUSH
9491: CALL_OW 122
// wait ( 0 0$1 ) ;
9495: LD_INT 35
9497: PPUSH
9498: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
9502: LD_EXP 14
9506: PPUSH
9507: CALL_OW 121
// wait ( 0 0$1 ) ;
9511: LD_INT 35
9513: PPUSH
9514: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
9518: LD_EXP 14
9522: PPUSH
9523: LD_INT 7
9525: PPUSH
9526: CALL_OW 113
// if not tmp then
9530: LD_VAR 0 3
9534: NOT
9535: IFFALSE 9539
// exit ;
9537: GO 9795
// DialogueOn ;
9539: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
9543: LD_VAR 0 3
9547: PUSH
9548: LD_INT 1
9550: ARRAY
9551: PPUSH
9552: CALL_OW 258
9556: PUSH
9557: LD_INT 1
9559: EQUAL
9560: IFFALSE 9580
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
9562: LD_VAR 0 3
9566: PUSH
9567: LD_INT 1
9569: ARRAY
9570: PPUSH
9571: LD_STRING D8b-Sol1-1
9573: PPUSH
9574: CALL_OW 88
9578: GO 9596
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
9580: LD_VAR 0 3
9584: PUSH
9585: LD_INT 1
9587: ARRAY
9588: PPUSH
9589: LD_STRING D8b-FSol1-1
9591: PPUSH
9592: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
9596: LD_EXP 14
9600: PPUSH
9601: LD_STRING D8b-Khat-1
9603: PPUSH
9604: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9608: LD_VAR 0 3
9612: PUSH
9613: LD_INT 1
9615: ARRAY
9616: PPUSH
9617: CALL_OW 258
9621: PUSH
9622: LD_INT 1
9624: EQUAL
9625: IFFALSE 9645
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
9627: LD_VAR 0 3
9631: PUSH
9632: LD_INT 1
9634: ARRAY
9635: PPUSH
9636: LD_STRING D8b-Sol1-2
9638: PPUSH
9639: CALL_OW 88
9643: GO 9661
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
9645: LD_VAR 0 3
9649: PUSH
9650: LD_INT 1
9652: ARRAY
9653: PPUSH
9654: LD_STRING D8b-FSol1-2
9656: PPUSH
9657: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
9661: LD_EXP 14
9665: PPUSH
9666: LD_STRING D8b-Khat-2
9668: PPUSH
9669: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9673: LD_VAR 0 3
9677: PUSH
9678: LD_INT 1
9680: ARRAY
9681: PPUSH
9682: CALL_OW 258
9686: PUSH
9687: LD_INT 1
9689: EQUAL
9690: IFFALSE 9710
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
9692: LD_VAR 0 3
9696: PUSH
9697: LD_INT 1
9699: ARRAY
9700: PPUSH
9701: LD_STRING D8b-Sol1-3
9703: PPUSH
9704: CALL_OW 88
9708: GO 9726
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
9710: LD_VAR 0 3
9714: PUSH
9715: LD_INT 1
9717: ARRAY
9718: PPUSH
9719: LD_STRING D8b-FSol1-3
9721: PPUSH
9722: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
9726: LD_EXP 14
9730: PPUSH
9731: LD_STRING D8b-Khat-3
9733: PPUSH
9734: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9738: LD_VAR 0 3
9742: PUSH
9743: LD_INT 1
9745: ARRAY
9746: PPUSH
9747: CALL_OW 258
9751: PUSH
9752: LD_INT 1
9754: EQUAL
9755: IFFALSE 9775
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
9757: LD_VAR 0 3
9761: PUSH
9762: LD_INT 1
9764: ARRAY
9765: PPUSH
9766: LD_STRING D8b-Sol1-4
9768: PPUSH
9769: CALL_OW 88
9773: GO 9791
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
9775: LD_VAR 0 3
9779: PUSH
9780: LD_INT 1
9782: ARRAY
9783: PPUSH
9784: LD_STRING D8b-FSol1-4
9786: PPUSH
9787: CALL_OW 88
// DialogueOff ;
9791: CALL_OW 7
// end ; end ;
9795: LD_VAR 0 1
9799: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
9800: LD_INT 7
9802: PPUSH
9803: LD_INT 22
9805: PUSH
9806: LD_INT 2
9808: PUSH
9809: EMPTY
9810: LIST
9811: LIST
9812: PPUSH
9813: CALL_OW 70
9817: PUSH
9818: LD_INT 0
9820: GREATER
9821: PUSH
9822: LD_EXP 14
9826: PPUSH
9827: LD_INT 7
9829: PPUSH
9830: CALL_OW 308
9834: OR
9835: IFFALSE 10042
9837: GO 9839
9839: DISABLE
9840: LD_INT 0
9842: PPUSH
// begin enable ;
9843: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
9844: LD_ADDR_VAR 0 1
9848: PUSH
9849: LD_INT 7
9851: PPUSH
9852: LD_INT 22
9854: PUSH
9855: LD_INT 2
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: PPUSH
9862: CALL_OW 70
9866: PUSH
9867: FOR_IN
9868: IFFALSE 10009
// begin if GetClass ( i ) = 4 then
9870: LD_VAR 0 1
9874: PPUSH
9875: CALL_OW 257
9879: PUSH
9880: LD_INT 4
9882: EQUAL
9883: IFFALSE 9895
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
9885: LD_INT 1
9887: PPUSH
9888: LD_STRING 10_ScientistsEscape_1
9890: PPUSH
9891: CALL_OW 39
// if i = Dietrich then
9895: LD_VAR 0 1
9899: PUSH
9900: LD_EXP 26
9904: EQUAL
9905: IFFALSE 9915
// GensherStatus = 1 ;
9907: LD_ADDR_EXP 52
9911: PUSH
9912: LD_INT 1
9914: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
9915: LD_VAR 0 1
9919: PPUSH
9920: CALL_OW 257
9924: PUSH
9925: LD_INT 1
9927: EQUAL
9928: PUSH
9929: LD_VAR 0 1
9933: PPUSH
9934: CALL_OW 257
9938: PUSH
9939: LD_INT 2
9941: EQUAL
9942: OR
9943: PUSH
9944: LD_VAR 0 1
9948: PPUSH
9949: CALL_OW 257
9953: PUSH
9954: LD_INT 3
9956: EQUAL
9957: OR
9958: PUSH
9959: LD_VAR 0 1
9963: PPUSH
9964: CALL_OW 257
9968: PUSH
9969: LD_INT 4
9971: EQUAL
9972: OR
9973: PUSH
9974: LD_VAR 0 1
9978: PPUSH
9979: CALL_OW 257
9983: PUSH
9984: LD_INT 8
9986: EQUAL
9987: OR
9988: IFFALSE 9998
// arabianEscape = 1 ;
9990: LD_ADDR_EXP 47
9994: PUSH
9995: LD_INT 1
9997: ST_TO_ADDR
// RemoveUnit ( i ) ;
9998: LD_VAR 0 1
10002: PPUSH
10003: CALL_OW 64
// end ;
10007: GO 9867
10009: POP
10010: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
10011: LD_EXP 14
10015: PPUSH
10016: LD_INT 7
10018: PPUSH
10019: CALL_OW 308
10023: IFFALSE 10042
// begin KhatamStatus = 1 ;
10025: LD_ADDR_EXP 53
10029: PUSH
10030: LD_INT 1
10032: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
10033: LD_EXP 14
10037: PPUSH
10038: CALL_OW 64
// end ; end ;
10042: PPOPN 1
10044: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
10045: LD_INT 22
10047: PUSH
10048: LD_INT 2
10050: PUSH
10051: EMPTY
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 21
10057: PUSH
10058: LD_INT 1
10060: PUSH
10061: EMPTY
10062: LIST
10063: LIST
10064: PUSH
10065: EMPTY
10066: LIST
10067: LIST
10068: PPUSH
10069: CALL_OW 69
10073: PUSH
10074: LD_INT 0
10076: EQUAL
10077: PUSH
10078: LD_INT 22
10080: PUSH
10081: LD_INT 4
10083: PUSH
10084: EMPTY
10085: LIST
10086: LIST
10087: PUSH
10088: LD_INT 21
10090: PUSH
10091: LD_INT 1
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: PPUSH
10102: CALL_OW 69
10106: PUSH
10107: LD_INT 0
10109: EQUAL
10110: AND
10111: IFFALSE 10124
10113: GO 10115
10115: DISABLE
// arabianDefeated = 1 ;
10116: LD_ADDR_EXP 48
10120: PUSH
10121: LD_INT 1
10123: ST_TO_ADDR
10124: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
10125: LD_INT 54
10127: PPUSH
10128: LD_INT 1
10130: PPUSH
10131: CALL_OW 321
10135: PUSH
10136: LD_INT 2
10138: EQUAL
10139: PUSH
10140: LD_INT 55
10142: PPUSH
10143: LD_INT 1
10145: PPUSH
10146: CALL_OW 321
10150: PUSH
10151: LD_INT 2
10153: EQUAL
10154: AND
10155: PUSH
10156: LD_INT 21
10158: PPUSH
10159: LD_INT 1
10161: PPUSH
10162: CALL_OW 321
10166: PUSH
10167: LD_INT 2
10169: EQUAL
10170: AND
10171: PUSH
10172: LD_INT 22
10174: PPUSH
10175: LD_INT 1
10177: PPUSH
10178: CALL_OW 321
10182: PUSH
10183: LD_INT 2
10185: EQUAL
10186: AND
10187: PUSH
10188: LD_INT 12
10190: PPUSH
10191: LD_INT 1
10193: PPUSH
10194: CALL_OW 321
10198: PUSH
10199: LD_INT 2
10201: EQUAL
10202: AND
10203: PUSH
10204: LD_INT 32
10206: PPUSH
10207: LD_INT 1
10209: PPUSH
10210: CALL_OW 321
10214: PUSH
10215: LD_INT 2
10217: EQUAL
10218: AND
10219: PUSH
10220: LD_EXP 63
10224: PUSH
10225: LD_INT 0
10227: EQUAL
10228: AND
10229: PUSH
10230: LD_EXP 49
10234: PUSH
10235: LD_INT 0
10237: EQUAL
10238: AND
10239: PUSH
10240: LD_OWVAR 1
10244: PUSH
10245: LD_INT 31500
10247: GREATEREQUAL
10248: AND
10249: IFFALSE 10266
10251: GO 10253
10253: DISABLE
// begin arabianTrait = 1 ;
10254: LD_ADDR_EXP 49
10258: PUSH
10259: LD_INT 1
10261: ST_TO_ADDR
// PrepareArabianTrait ;
10262: CALL 8016 0 0
// end ;
10266: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
10267: LD_EXP 29
10271: PUSH
10272: LD_STRING 02_mikhailStatus_1
10274: PPUSH
10275: LD_INT 0
10277: PPUSH
10278: CALL_OW 30
10282: PUSH
10283: LD_INT 1
10285: EQUAL
10286: AND
10287: PUSH
10288: LD_INT 22
10290: PUSH
10291: LD_INT 5
10293: PUSH
10294: EMPTY
10295: LIST
10296: LIST
10297: PPUSH
10298: CALL_OW 69
10302: PUSH
10303: LD_INT 0
10305: EQUAL
10306: AND
10307: PUSH
10308: LD_INT 22
10310: PUSH
10311: LD_INT 2
10313: PUSH
10314: EMPTY
10315: LIST
10316: LIST
10317: PUSH
10318: LD_INT 21
10320: PUSH
10321: LD_INT 1
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PPUSH
10332: CALL_OW 69
10336: PUSH
10337: LD_INT 0
10339: EQUAL
10340: PUSH
10341: LD_EXP 49
10345: PUSH
10346: LD_INT 0
10348: EQUAL
10349: OR
10350: AND
10351: IFFALSE 10360
10353: GO 10355
10355: DISABLE
// PrepareCornell ;
10356: CALL 3450 0 0
10360: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
10361: LD_INT 22
10363: PUSH
10364: LD_INT 1
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: PPUSH
10371: CALL_OW 69
10375: PPUSH
10376: LD_EXP 19
10380: PPUSH
10381: CALL_OW 74
10385: PPUSH
10386: LD_EXP 19
10390: PPUSH
10391: CALL_OW 296
10395: PUSH
10396: LD_INT 9
10398: LESS
10399: IFFALSE 10620
10401: GO 10403
10403: DISABLE
// begin InGameOn ;
10404: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
10408: LD_EXP 19
10412: PPUSH
10413: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
10417: LD_EXP 19
10421: PPUSH
10422: LD_STRING D7-Corn-1
10424: PPUSH
10425: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
10429: LD_INT 22
10431: PUSH
10432: LD_INT 1
10434: PUSH
10435: EMPTY
10436: LIST
10437: LIST
10438: PUSH
10439: LD_INT 2
10441: PUSH
10442: LD_INT 25
10444: PUSH
10445: LD_INT 1
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: PUSH
10452: LD_INT 25
10454: PUSH
10455: LD_INT 2
10457: PUSH
10458: EMPTY
10459: LIST
10460: LIST
10461: PUSH
10462: LD_INT 25
10464: PUSH
10465: LD_INT 3
10467: PUSH
10468: EMPTY
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 25
10474: PUSH
10475: LD_INT 4
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: PUSH
10482: LD_INT 25
10484: PUSH
10485: LD_INT 5
10487: PUSH
10488: EMPTY
10489: LIST
10490: LIST
10491: PUSH
10492: EMPTY
10493: LIST
10494: LIST
10495: LIST
10496: LIST
10497: LIST
10498: LIST
10499: PUSH
10500: EMPTY
10501: LIST
10502: LIST
10503: PPUSH
10504: CALL_OW 69
10508: PPUSH
10509: LD_STRING D7-Sol1-1
10511: PPUSH
10512: LD_STRING D7-FSol1-1
10514: PPUSH
10515: CALL 11110 0 3
// CenterNowOnUnits ( Cornell ) ;
10519: LD_EXP 19
10523: PPUSH
10524: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
10528: LD_EXP 19
10532: PPUSH
10533: LD_STRING D7-Corn-2
10535: PPUSH
10536: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10540: LD_EXP 1
10544: PPUSH
10545: LD_STRING D7-JMM-2
10547: PPUSH
10548: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
10552: LD_EXP 19
10556: PPUSH
10557: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
10561: LD_EXP 19
10565: PPUSH
10566: LD_STRING D7-Corn-3
10568: PPUSH
10569: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
10573: LD_EXP 19
10577: PPUSH
10578: LD_INT 250
10580: PPUSH
10581: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
10585: LD_EXP 19
10589: PPUSH
10590: LD_INT 1
10592: PPUSH
10593: CALL_OW 235
// wait ( 0 0$1 ) ;
10597: LD_INT 35
10599: PPUSH
10600: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
10604: LD_EXP 1
10608: PPUSH
10609: LD_STRING D7-JMM-3
10611: PPUSH
10612: CALL_OW 88
// InGameOff ;
10616: CALL_OW 9
// end ;
10620: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
10621: LD_EXP 19
10625: PPUSH
10626: CALL_OW 255
10630: PUSH
10631: LD_INT 1
10633: EQUAL
10634: PUSH
10635: LD_EXP 19
10639: PPUSH
10640: CALL_OW 256
10644: PUSH
10645: LD_INT 350
10647: GREATER
10648: AND
10649: IFFALSE 10842
10651: GO 10653
10653: DISABLE
// begin DialogueOn ;
10654: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
10658: LD_EXP 1
10662: PPUSH
10663: LD_STRING D7a-JMM-1
10665: PPUSH
10666: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
10670: LD_EXP 19
10674: PPUSH
10675: LD_STRING D7a-Corn-1
10677: PPUSH
10678: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
10682: LD_EXP 1
10686: PPUSH
10687: LD_STRING D7a-JMM-2
10689: PPUSH
10690: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
10694: LD_EXP 19
10698: PPUSH
10699: LD_STRING D7a-Corn-2
10701: PPUSH
10702: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
10706: LD_EXP 1
10710: PPUSH
10711: LD_STRING D7a-JMM-3
10713: PPUSH
10714: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
10718: LD_EXP 19
10722: PPUSH
10723: LD_STRING D7a-Corn-3
10725: PPUSH
10726: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
10730: LD_EXP 1
10734: PPUSH
10735: LD_STRING D7a-JMM-4
10737: PPUSH
10738: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
10742: LD_EXP 19
10746: PPUSH
10747: LD_STRING D7a-Corn-4
10749: PPUSH
10750: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
10754: LD_EXP 1
10758: PPUSH
10759: LD_STRING D7a-JMM-5
10761: PPUSH
10762: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
10766: LD_EXP 19
10770: PPUSH
10771: LD_STRING D7a-Corn-5
10773: PPUSH
10774: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
10778: LD_EXP 1
10782: PPUSH
10783: LD_STRING D7a-JMM-6
10785: PPUSH
10786: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
10790: LD_EXP 19
10794: PPUSH
10795: LD_STRING D7a-Corn-6
10797: PPUSH
10798: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
10802: LD_EXP 1
10806: PPUSH
10807: LD_STRING D7a-JMM-7
10809: PPUSH
10810: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
10814: LD_EXP 19
10818: PPUSH
10819: LD_STRING D7a-Corn-7
10821: PPUSH
10822: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
10826: LD_EXP 1
10830: PPUSH
10831: LD_STRING D7a-JMM-8
10833: PPUSH
10834: CALL_OW 88
// DialogueOff ;
10838: CALL_OW 7
// end ;
10842: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
10843: LD_EXP 61
10847: PUSH
10848: LD_EXP 1
10852: PPUSH
10853: CALL_OW 302
10857: PUSH
10858: LD_EXP 5
10862: PPUSH
10863: CALL_OW 302
10867: OR
10868: AND
10869: IFFALSE 10959
10871: GO 10873
10873: DISABLE
// begin Wait ( 0 0$2 ) ;
10874: LD_INT 70
10876: PPUSH
10877: CALL_OW 67
// DialogueOn ;
10881: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
10885: LD_EXP 61
10889: PUSH
10890: LD_INT 1
10892: ARRAY
10893: PPUSH
10894: LD_EXP 61
10898: PUSH
10899: LD_INT 2
10901: ARRAY
10902: PPUSH
10903: CALL_OW 86
// if IsOk ( Cyrus ) then
10907: LD_EXP 5
10911: PPUSH
10912: CALL_OW 302
10916: IFFALSE 10932
// Say ( Cyrus , D10-Cyrus-1 ) else
10918: LD_EXP 5
10922: PPUSH
10923: LD_STRING D10-Cyrus-1
10925: PPUSH
10926: CALL_OW 88
10930: GO 10955
// if IsOk ( JMM ) then
10932: LD_EXP 1
10936: PPUSH
10937: CALL_OW 302
10941: IFFALSE 10955
// Say ( JMM , D10-JMM-1 ) ;
10943: LD_EXP 1
10947: PPUSH
10948: LD_STRING D10-JMM-1
10950: PPUSH
10951: CALL_OW 88
// DialogueOff ;
10955: CALL_OW 7
// end ;
10959: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
10960: LD_INT 12
10962: PPUSH
10963: LD_INT 1
10965: PPUSH
10966: CALL_OW 321
10970: PUSH
10971: LD_INT 2
10973: EQUAL
10974: IFFALSE 10986
10976: GO 10978
10978: DISABLE
// ChangeMissionObjectives ( M2b ) ;
10979: LD_STRING M2b
10981: PPUSH
10982: CALL_OW 337
10986: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
10987: LD_INT 32
10989: PPUSH
10990: LD_INT 1
10992: PPUSH
10993: CALL_OW 321
10997: PUSH
10998: LD_INT 2
11000: EQUAL
11001: IFFALSE 11013
11003: GO 11005
11005: DISABLE
// ChangeMissionObjectives ( M2c ) ;
11006: LD_STRING M2c
11008: PPUSH
11009: CALL_OW 337
11013: END
// every 0 0$1 trigger arabianDefeated = 1 do
11014: LD_EXP 48
11018: PUSH
11019: LD_INT 1
11021: EQUAL
11022: IFFALSE 11034
11024: GO 11026
11026: DISABLE
// ChangeMissionObjectives ( M4a ) ;
11027: LD_STRING M4a
11029: PPUSH
11030: CALL_OW 337
11034: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
11035: LD_INT 54
11037: PPUSH
11038: LD_INT 1
11040: PPUSH
11041: CALL_OW 321
11045: PUSH
11046: LD_INT 2
11048: EQUAL
11049: PUSH
11050: LD_INT 55
11052: PPUSH
11053: LD_INT 1
11055: PPUSH
11056: CALL_OW 321
11060: PUSH
11061: LD_INT 2
11063: EQUAL
11064: AND
11065: PUSH
11066: LD_INT 21
11068: PPUSH
11069: LD_INT 1
11071: PPUSH
11072: CALL_OW 321
11076: PUSH
11077: LD_INT 2
11079: EQUAL
11080: AND
11081: PUSH
11082: LD_INT 22
11084: PPUSH
11085: LD_INT 1
11087: PPUSH
11088: CALL_OW 321
11092: PUSH
11093: LD_INT 2
11095: EQUAL
11096: AND
11097: IFFALSE 11109
11099: GO 11101
11101: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
11102: LD_STRING M2a
11104: PPUSH
11105: CALL_OW 337
11109: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
11110: LD_INT 0
11112: PPUSH
11113: PPUSH
11114: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
11115: LD_ADDR_VAR 0 1
11119: PUSH
11120: LD_VAR 0 1
11124: PUSH
11125: LD_EXP 1
11129: PUSH
11130: LD_EXP 2
11134: PUSH
11135: LD_EXP 3
11139: PUSH
11140: LD_EXP 4
11144: PUSH
11145: LD_EXP 5
11149: PUSH
11150: LD_EXP 6
11154: PUSH
11155: LD_EXP 7
11159: PUSH
11160: LD_EXP 8
11164: PUSH
11165: LD_EXP 9
11169: PUSH
11170: LD_EXP 10
11174: PUSH
11175: LD_EXP 11
11179: PUSH
11180: LD_EXP 12
11184: PUSH
11185: LD_EXP 13
11189: PUSH
11190: LD_EXP 14
11194: PUSH
11195: LD_EXP 15
11199: PUSH
11200: LD_EXP 16
11204: PUSH
11205: LD_EXP 17
11209: PUSH
11210: LD_EXP 18
11214: PUSH
11215: LD_EXP 19
11219: PUSH
11220: LD_EXP 24
11224: PUSH
11225: EMPTY
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: DIFF
11247: ST_TO_ADDR
// if not characters then
11248: LD_VAR 0 1
11252: NOT
11253: IFFALSE 11257
// exit ;
11255: GO 11403
// rnd = rand ( 1 , characters ) ;
11257: LD_ADDR_VAR 0 6
11261: PUSH
11262: LD_INT 1
11264: PPUSH
11265: LD_VAR 0 1
11269: PPUSH
11270: CALL_OW 12
11274: ST_TO_ADDR
// for i = 1 to characters do
11275: LD_ADDR_VAR 0 5
11279: PUSH
11280: DOUBLE
11281: LD_INT 1
11283: DEC
11284: ST_TO_ADDR
11285: LD_VAR 0 1
11289: PUSH
11290: FOR_TO
11291: IFFALSE 11401
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11293: LD_VAR 0 5
11297: PUSH
11298: LD_VAR 0 6
11302: EQUAL
11303: PUSH
11304: LD_VAR 0 1
11308: PUSH
11309: LD_VAR 0 5
11313: ARRAY
11314: PPUSH
11315: CALL_OW 258
11319: PUSH
11320: LD_INT 1
11322: EQUAL
11323: AND
11324: IFFALSE 11346
// Say ( characters [ i ] , dialogMID ) ;
11326: LD_VAR 0 1
11330: PUSH
11331: LD_VAR 0 5
11335: ARRAY
11336: PPUSH
11337: LD_VAR 0 2
11341: PPUSH
11342: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11346: LD_VAR 0 5
11350: PUSH
11351: LD_VAR 0 6
11355: EQUAL
11356: PUSH
11357: LD_VAR 0 1
11361: PUSH
11362: LD_VAR 0 5
11366: ARRAY
11367: PPUSH
11368: CALL_OW 258
11372: PUSH
11373: LD_INT 2
11375: EQUAL
11376: AND
11377: IFFALSE 11399
// Say ( characters [ i ] , dialogFID ) ;
11379: LD_VAR 0 1
11383: PUSH
11384: LD_VAR 0 5
11388: ARRAY
11389: PPUSH
11390: LD_VAR 0 3
11394: PPUSH
11395: CALL_OW 88
// end ;
11399: GO 11290
11401: POP
11402: POP
// end ;
11403: LD_VAR 0 4
11407: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11408: LD_INT 0
11410: PPUSH
11411: PPUSH
// for i in charactersList do
11412: LD_ADDR_VAR 0 4
11416: PUSH
11417: LD_VAR 0 1
11421: PUSH
11422: FOR_IN
11423: IFFALSE 11441
// SaveCharacters ( i , ident ) ;
11425: LD_VAR 0 4
11429: PPUSH
11430: LD_VAR 0 2
11434: PPUSH
11435: CALL_OW 38
11439: GO 11422
11441: POP
11442: POP
// end ;
11443: LD_VAR 0 3
11447: RET
// export function PrepareDifficulty ; begin
11448: LD_INT 0
11450: PPUSH
// if difficulty = 1 then
11451: LD_OWVAR 67
11455: PUSH
11456: LD_INT 1
11458: EQUAL
11459: IFFALSE 11503
// begin RuSolMinLevel = 3 ;
11461: LD_ADDR_EXP 36
11465: PUSH
11466: LD_INT 3
11468: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11469: LD_ADDR_EXP 37
11473: PUSH
11474: LD_INT 5
11476: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11477: LD_INT 51
11479: PPUSH
11480: LD_INT 6
11482: PPUSH
11483: LD_INT 2
11485: PPUSH
11486: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11490: LD_INT 51
11492: PPUSH
11493: LD_INT 5
11495: PPUSH
11496: LD_INT 2
11498: PPUSH
11499: CALL_OW 322
// end ; if difficulty = 2 then
11503: LD_OWVAR 67
11507: PUSH
11508: LD_INT 2
11510: EQUAL
11511: IFFALSE 11607
// begin RuSolMinLevel = 5 ;
11513: LD_ADDR_EXP 36
11517: PUSH
11518: LD_INT 5
11520: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
11521: LD_ADDR_EXP 37
11525: PUSH
11526: LD_INT 7
11528: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11529: LD_INT 51
11531: PPUSH
11532: LD_INT 6
11534: PPUSH
11535: LD_INT 2
11537: PPUSH
11538: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11542: LD_INT 57
11544: PPUSH
11545: LD_INT 6
11547: PPUSH
11548: LD_INT 2
11550: PPUSH
11551: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11555: LD_INT 63
11557: PPUSH
11558: LD_INT 6
11560: PPUSH
11561: LD_INT 2
11563: PPUSH
11564: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11568: LD_INT 51
11570: PPUSH
11571: LD_INT 5
11573: PPUSH
11574: LD_INT 2
11576: PPUSH
11577: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
11581: LD_INT 5
11583: PPUSH
11584: LD_INT 2
11586: PPUSH
11587: LD_INT 2
11589: PPUSH
11590: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
11594: LD_INT 5
11596: PPUSH
11597: LD_INT 5
11599: PPUSH
11600: LD_INT 2
11602: PPUSH
11603: CALL_OW 322
// end ; if difficulty >= 3 then
11607: LD_OWVAR 67
11611: PUSH
11612: LD_INT 3
11614: GREATEREQUAL
11615: IFFALSE 11763
// begin RuSolMinLevel = 6 ;
11617: LD_ADDR_EXP 36
11621: PUSH
11622: LD_INT 6
11624: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
11625: LD_ADDR_EXP 37
11629: PUSH
11630: LD_INT 8
11632: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11633: LD_INT 51
11635: PPUSH
11636: LD_INT 6
11638: PPUSH
11639: LD_INT 2
11641: PPUSH
11642: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11646: LD_INT 57
11648: PPUSH
11649: LD_INT 6
11651: PPUSH
11652: LD_INT 2
11654: PPUSH
11655: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
11659: LD_INT 52
11661: PPUSH
11662: LD_INT 6
11664: PPUSH
11665: LD_INT 2
11667: PPUSH
11668: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
11672: LD_INT 58
11674: PPUSH
11675: LD_INT 6
11677: PPUSH
11678: LD_INT 2
11680: PPUSH
11681: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11685: LD_INT 63
11687: PPUSH
11688: LD_INT 6
11690: PPUSH
11691: LD_INT 2
11693: PPUSH
11694: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
11698: LD_INT 64
11700: PPUSH
11701: LD_INT 6
11703: PPUSH
11704: LD_INT 2
11706: PPUSH
11707: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11711: LD_INT 51
11713: PPUSH
11714: LD_INT 5
11716: PPUSH
11717: LD_INT 2
11719: PPUSH
11720: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
11724: LD_INT 52
11726: PPUSH
11727: LD_INT 5
11729: PPUSH
11730: LD_INT 2
11732: PPUSH
11733: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
11737: LD_INT 66
11739: PPUSH
11740: LD_INT 2
11742: PPUSH
11743: LD_INT 2
11745: PPUSH
11746: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
11750: LD_INT 66
11752: PPUSH
11753: LD_INT 5
11755: PPUSH
11756: LD_INT 2
11758: PPUSH
11759: CALL_OW 322
// end ; end ;
11763: LD_VAR 0 1
11767: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
11768: LD_INT 0
11770: PPUSH
11771: PPUSH
11772: PPUSH
11773: PPUSH
11774: PPUSH
11775: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
11776: LD_ADDR_VAR 0 7
11780: PUSH
11781: LD_INT 43
11783: PUSH
11784: LD_INT 68
11786: PUSH
11787: EMPTY
11788: LIST
11789: LIST
11790: PUSH
11791: LD_INT 43
11793: PUSH
11794: LD_INT 79
11796: PUSH
11797: EMPTY
11798: LIST
11799: LIST
11800: PUSH
11801: LD_INT 99
11803: PUSH
11804: LD_INT 114
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: PUSH
11811: LD_INT 103
11813: PUSH
11814: LD_INT 114
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: PUSH
11821: LD_INT 156
11823: PUSH
11824: LD_INT 92
11826: PUSH
11827: EMPTY
11828: LIST
11829: LIST
11830: PUSH
11831: LD_INT 152
11833: PUSH
11834: LD_INT 85
11836: PUSH
11837: EMPTY
11838: LIST
11839: LIST
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: ST_TO_ADDR
// for i in sources do
11849: LD_ADDR_VAR 0 3
11853: PUSH
11854: LD_VAR 0 7
11858: PUSH
11859: FOR_IN
11860: IFFALSE 11889
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
11862: LD_VAR 0 3
11866: PUSH
11867: LD_INT 1
11869: ARRAY
11870: PPUSH
11871: LD_VAR 0 3
11875: PUSH
11876: LD_INT 2
11878: ARRAY
11879: PPUSH
11880: LD_INT 3
11882: PPUSH
11883: CALL_OW 441
11887: GO 11859
11889: POP
11890: POP
// case position of 1 :
11891: LD_VAR 0 1
11895: PUSH
11896: LD_INT 1
11898: DOUBLE
11899: EQUAL
11900: IFTRUE 11904
11902: GO 11915
11904: POP
// area := westConv ; 2 :
11905: LD_ADDR_VAR 0 6
11909: PUSH
11910: LD_INT 20
11912: ST_TO_ADDR
11913: GO 11954
11915: LD_INT 2
11917: DOUBLE
11918: EQUAL
11919: IFTRUE 11923
11921: GO 11934
11923: POP
// area := midConv ; 3 :
11924: LD_ADDR_VAR 0 6
11928: PUSH
11929: LD_INT 21
11931: ST_TO_ADDR
11932: GO 11954
11934: LD_INT 3
11936: DOUBLE
11937: EQUAL
11938: IFTRUE 11942
11940: GO 11953
11942: POP
// area := eastConv ; end ;
11943: LD_ADDR_VAR 0 6
11947: PUSH
11948: LD_INT 22
11950: ST_TO_ADDR
11951: GO 11954
11953: POP
// area := AreaToList ( area , 0 ) ;
11954: LD_ADDR_VAR 0 6
11958: PUSH
11959: LD_VAR 0 6
11963: PPUSH
11964: LD_INT 0
11966: PPUSH
11967: CALL_OW 517
11971: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
11972: LD_ADDR_VAR 0 3
11976: PUSH
11977: DOUBLE
11978: LD_INT 1
11980: DEC
11981: ST_TO_ADDR
11982: LD_VAR 0 6
11986: PUSH
11987: LD_INT 1
11989: ARRAY
11990: PUSH
11991: FOR_TO
11992: IFFALSE 12073
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
11994: LD_VAR 0 6
11998: PUSH
11999: LD_INT 1
12001: ARRAY
12002: PUSH
12003: LD_VAR 0 3
12007: ARRAY
12008: PPUSH
12009: LD_VAR 0 6
12013: PUSH
12014: LD_INT 2
12016: ARRAY
12017: PUSH
12018: LD_VAR 0 3
12022: ARRAY
12023: PPUSH
12024: LD_INT 1
12026: PPUSH
12027: LD_INT 1
12029: PPUSH
12030: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
12034: LD_VAR 0 6
12038: PUSH
12039: LD_INT 1
12041: ARRAY
12042: PUSH
12043: LD_VAR 0 3
12047: ARRAY
12048: PPUSH
12049: LD_VAR 0 6
12053: PUSH
12054: LD_INT 2
12056: ARRAY
12057: PUSH
12058: LD_VAR 0 3
12062: ARRAY
12063: PPUSH
12064: LD_INT 1
12066: PPUSH
12067: CALL_OW 331
// end ;
12071: GO 11991
12073: POP
12074: POP
// ruPossition = position ;
12075: LD_ADDR_EXP 41
12079: PUSH
12080: LD_VAR 0 1
12084: ST_TO_ADDR
// if position = 1 then
12085: LD_VAR 0 1
12089: PUSH
12090: LD_INT 1
12092: EQUAL
12093: IFFALSE 12841
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12095: LD_ADDR_VAR 0 4
12099: PUSH
12100: LD_INT 22
12102: PUSH
12103: LD_INT 3
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 25
12112: PUSH
12113: LD_INT 2
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: PPUSH
12124: CALL_OW 69
12128: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
12129: LD_ADDR_VAR 0 5
12133: PUSH
12134: LD_INT 0
12136: PUSH
12137: LD_INT 49
12139: PUSH
12140: LD_INT 74
12142: PUSH
12143: LD_INT 3
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 4
12154: PUSH
12155: LD_INT 73
12157: PUSH
12158: LD_INT 88
12160: PUSH
12161: LD_INT 5
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: PUSH
12170: LD_INT 4
12172: PUSH
12173: LD_INT 56
12175: PUSH
12176: LD_INT 62
12178: PUSH
12179: LD_INT 3
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: PUSH
12188: LD_INT 29
12190: PUSH
12191: LD_INT 43
12193: PUSH
12194: LD_INT 68
12196: PUSH
12197: LD_INT 2
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 30
12208: PUSH
12209: LD_INT 43
12211: PUSH
12212: LD_INT 79
12214: PUSH
12215: LD_INT 5
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 28
12226: PUSH
12227: LD_INT 60
12229: PUSH
12230: LD_INT 75
12232: PUSH
12233: LD_INT 1
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: PUSH
12242: LD_INT 2
12244: PUSH
12245: LD_INT 50
12247: PUSH
12248: LD_INT 87
12250: PUSH
12251: LD_INT 1
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: PUSH
12260: LD_INT 28
12262: PUSH
12263: LD_INT 45
12265: PUSH
12266: LD_INT 67
12268: PUSH
12269: LD_INT 2
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: PUSH
12278: LD_INT 17
12280: PUSH
12281: LD_INT 47
12283: PUSH
12284: LD_INT 84
12286: PUSH
12287: LD_INT 2
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: PUSH
12296: LD_INT 18
12298: PUSH
12299: LD_INT 46
12301: PUSH
12302: LD_INT 87
12304: PUSH
12305: LD_INT 1
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 28
12316: PUSH
12317: LD_INT 41
12319: PUSH
12320: LD_INT 64
12322: PUSH
12323: LD_INT 5
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: PUSH
12332: LD_INT 32
12334: PUSH
12335: LD_INT 75
12337: PUSH
12338: LD_INT 76
12340: PUSH
12341: LD_INT 5
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: PUSH
12350: LD_INT 32
12352: PUSH
12353: LD_INT 77
12355: PUSH
12356: LD_INT 75
12358: PUSH
12359: LD_INT 5
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: PUSH
12368: LD_INT 32
12370: PUSH
12371: LD_INT 69
12373: PUSH
12374: LD_INT 68
12376: PUSH
12377: LD_INT 3
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: PUSH
12386: LD_INT 32
12388: PUSH
12389: LD_INT 59
12391: PUSH
12392: LD_INT 96
12394: PUSH
12395: LD_INT 5
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: PUSH
12404: LD_INT 32
12406: PUSH
12407: LD_INT 56
12409: PUSH
12410: LD_INT 96
12412: PUSH
12413: LD_INT 0
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: PUSH
12422: LD_INT 32
12424: PUSH
12425: LD_INT 51
12427: PUSH
12428: LD_INT 61
12430: PUSH
12431: LD_INT 3
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 32
12442: PUSH
12443: LD_INT 42
12445: PUSH
12446: LD_INT 60
12448: PUSH
12449: LD_INT 3
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: PUSH
12458: LD_INT 32
12460: PUSH
12461: LD_INT 36
12463: PUSH
12464: LD_INT 58
12466: PUSH
12467: LD_INT 3
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: PUSH
12476: LD_INT 32
12478: PUSH
12479: LD_INT 39
12481: PUSH
12482: LD_INT 59
12484: PUSH
12485: LD_INT 3
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 32
12496: PUSH
12497: LD_INT 61
12499: PUSH
12500: LD_INT 64
12502: PUSH
12503: LD_INT 3
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: PUSH
12512: LD_INT 33
12514: PUSH
12515: LD_INT 63
12517: PUSH
12518: LD_INT 90
12520: PUSH
12521: LD_INT 5
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 33
12532: PUSH
12533: LD_INT 64
12535: PUSH
12536: LD_INT 88
12538: PUSH
12539: LD_INT 5
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: PUSH
12548: LD_INT 33
12550: PUSH
12551: LD_INT 72
12553: PUSH
12554: LD_INT 82
12556: PUSH
12557: LD_INT 5
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 6
12568: PUSH
12569: LD_INT 42
12571: PUSH
12572: LD_INT 74
12574: PUSH
12575: LD_INT 1
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: PUSH
12584: LD_INT 6
12586: PUSH
12587: LD_INT 56
12589: PUSH
12590: LD_INT 77
12592: PUSH
12593: LD_INT 2
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: PUSH
12602: LD_INT 21
12604: PUSH
12605: LD_INT 54
12607: PUSH
12608: LD_INT 91
12610: PUSH
12611: LD_INT 5
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 16
12622: PUSH
12623: LD_INT 50
12625: PUSH
12626: LD_INT 83
12628: PUSH
12629: LD_INT 3
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: PUSH
12638: LD_INT 24
12640: PUSH
12641: LD_INT 50
12643: PUSH
12644: LD_INT 90
12646: PUSH
12647: LD_INT 0
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: PUSH
12656: EMPTY
12657: LIST
12658: LIST
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12687: LD_ADDR_VAR 0 3
12691: PUSH
12692: LD_INT 22
12694: PUSH
12695: LD_INT 3
12697: PUSH
12698: EMPTY
12699: LIST
12700: LIST
12701: PUSH
12702: LD_INT 3
12704: PUSH
12705: LD_INT 25
12707: PUSH
12708: LD_INT 2
12710: PUSH
12711: EMPTY
12712: LIST
12713: LIST
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: EMPTY
12720: LIST
12721: LIST
12722: PPUSH
12723: CALL_OW 69
12727: PUSH
12728: FOR_IN
12729: IFFALSE 12748
// AddComAgressiveMove ( i , 53 , 82 ) ;
12731: LD_VAR 0 3
12735: PPUSH
12736: LD_INT 53
12738: PPUSH
12739: LD_INT 82
12741: PPUSH
12742: CALL_OW 174
12746: GO 12728
12748: POP
12749: POP
// for i := 1 to buildingsTab do
12750: LD_ADDR_VAR 0 3
12754: PUSH
12755: DOUBLE
12756: LD_INT 1
12758: DEC
12759: ST_TO_ADDR
12760: LD_VAR 0 5
12764: PUSH
12765: FOR_TO
12766: IFFALSE 12839
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12768: LD_VAR 0 4
12772: PPUSH
12773: LD_VAR 0 5
12777: PUSH
12778: LD_VAR 0 3
12782: ARRAY
12783: PUSH
12784: LD_INT 1
12786: ARRAY
12787: PPUSH
12788: LD_VAR 0 5
12792: PUSH
12793: LD_VAR 0 3
12797: ARRAY
12798: PUSH
12799: LD_INT 2
12801: ARRAY
12802: PPUSH
12803: LD_VAR 0 5
12807: PUSH
12808: LD_VAR 0 3
12812: ARRAY
12813: PUSH
12814: LD_INT 3
12816: ARRAY
12817: PPUSH
12818: LD_VAR 0 5
12822: PUSH
12823: LD_VAR 0 3
12827: ARRAY
12828: PUSH
12829: LD_INT 4
12831: ARRAY
12832: PPUSH
12833: CALL_OW 205
12837: GO 12765
12839: POP
12840: POP
// end ; if position = 2 then
12841: LD_VAR 0 1
12845: PUSH
12846: LD_INT 2
12848: EQUAL
12849: IFFALSE 13464
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12851: LD_ADDR_VAR 0 4
12855: PUSH
12856: LD_INT 22
12858: PUSH
12859: LD_INT 3
12861: PUSH
12862: EMPTY
12863: LIST
12864: LIST
12865: PUSH
12866: LD_INT 25
12868: PUSH
12869: LD_INT 2
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: PUSH
12876: EMPTY
12877: LIST
12878: LIST
12879: PPUSH
12880: CALL_OW 69
12884: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
12885: LD_ADDR_VAR 0 5
12889: PUSH
12890: LD_INT 0
12892: PUSH
12893: LD_INT 104
12895: PUSH
12896: LD_INT 110
12898: PUSH
12899: LD_INT 5
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 4
12910: PUSH
12911: LD_INT 98
12913: PUSH
12914: LD_INT 90
12916: PUSH
12917: LD_INT 3
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 29
12928: PUSH
12929: LD_INT 103
12931: PUSH
12932: LD_INT 114
12934: PUSH
12935: LD_INT 2
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 30
12946: PUSH
12947: LD_INT 99
12949: PUSH
12950: LD_INT 114
12952: PUSH
12953: LD_INT 3
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 28
12964: PUSH
12965: LD_INT 100
12967: PUSH
12968: LD_INT 112
12970: PUSH
12971: LD_INT 1
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 2
12982: PUSH
12983: LD_INT 92
12985: PUSH
12986: LD_INT 101
12988: PUSH
12989: LD_INT 0
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 28
13000: PUSH
13001: LD_INT 97
13003: PUSH
13004: LD_INT 116
13006: PUSH
13007: LD_INT 5
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 17
13018: PUSH
13019: LD_INT 96
13021: PUSH
13022: LD_INT 101
13024: PUSH
13025: LD_INT 4
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 18
13036: PUSH
13037: LD_INT 88
13039: PUSH
13040: LD_INT 97
13042: PUSH
13043: LD_INT 2
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 28
13054: PUSH
13055: LD_INT 106
13057: PUSH
13058: LD_INT 92
13060: PUSH
13061: LD_INT 2
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 32
13072: PUSH
13073: LD_INT 88
13075: PUSH
13076: LD_INT 89
13078: PUSH
13079: LD_INT 2
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 32
13090: PUSH
13091: LD_INT 86
13093: PUSH
13094: LD_INT 90
13096: PUSH
13097: LD_INT 2
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 32
13108: PUSH
13109: LD_INT 85
13111: PUSH
13112: LD_INT 99
13114: PUSH
13115: LD_INT 2
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 32
13126: PUSH
13127: LD_INT 85
13129: PUSH
13130: LD_INT 107
13132: PUSH
13133: LD_INT 1
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 33
13144: PUSH
13145: LD_INT 105
13147: PUSH
13148: LD_INT 99
13150: PUSH
13151: LD_INT 1
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 33
13162: PUSH
13163: LD_INT 102
13165: PUSH
13166: LD_INT 92
13168: PUSH
13169: LD_INT 3
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 33
13180: PUSH
13181: LD_INT 105
13183: PUSH
13184: LD_INT 92
13186: PUSH
13187: LD_INT 2
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 6
13198: PUSH
13199: LD_INT 92
13201: PUSH
13202: LD_INT 110
13204: PUSH
13205: LD_INT 0
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 6
13216: PUSH
13217: LD_INT 103
13219: PUSH
13220: LD_INT 103
13222: PUSH
13223: LD_INT 5
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 21
13234: PUSH
13235: LD_INT 89
13237: PUSH
13238: LD_INT 101
13240: PUSH
13241: LD_INT 1
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 16
13252: PUSH
13253: LD_INT 95
13255: PUSH
13256: LD_INT 104
13258: PUSH
13259: LD_INT 4
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 24
13270: PUSH
13271: LD_INT 92
13273: PUSH
13274: LD_INT 105
13276: PUSH
13277: LD_INT 0
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13310: LD_ADDR_VAR 0 3
13314: PUSH
13315: LD_INT 22
13317: PUSH
13318: LD_INT 3
13320: PUSH
13321: EMPTY
13322: LIST
13323: LIST
13324: PUSH
13325: LD_INT 3
13327: PUSH
13328: LD_INT 25
13330: PUSH
13331: LD_INT 2
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: PUSH
13338: EMPTY
13339: LIST
13340: LIST
13341: PUSH
13342: EMPTY
13343: LIST
13344: LIST
13345: PPUSH
13346: CALL_OW 69
13350: PUSH
13351: FOR_IN
13352: IFFALSE 13371
// AddComAgressiveMove ( i , 96 , 99 ) ;
13354: LD_VAR 0 3
13358: PPUSH
13359: LD_INT 96
13361: PPUSH
13362: LD_INT 99
13364: PPUSH
13365: CALL_OW 174
13369: GO 13351
13371: POP
13372: POP
// for i := 1 to buildingsTab do
13373: LD_ADDR_VAR 0 3
13377: PUSH
13378: DOUBLE
13379: LD_INT 1
13381: DEC
13382: ST_TO_ADDR
13383: LD_VAR 0 5
13387: PUSH
13388: FOR_TO
13389: IFFALSE 13462
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13391: LD_VAR 0 4
13395: PPUSH
13396: LD_VAR 0 5
13400: PUSH
13401: LD_VAR 0 3
13405: ARRAY
13406: PUSH
13407: LD_INT 1
13409: ARRAY
13410: PPUSH
13411: LD_VAR 0 5
13415: PUSH
13416: LD_VAR 0 3
13420: ARRAY
13421: PUSH
13422: LD_INT 2
13424: ARRAY
13425: PPUSH
13426: LD_VAR 0 5
13430: PUSH
13431: LD_VAR 0 3
13435: ARRAY
13436: PUSH
13437: LD_INT 3
13439: ARRAY
13440: PPUSH
13441: LD_VAR 0 5
13445: PUSH
13446: LD_VAR 0 3
13450: ARRAY
13451: PUSH
13452: LD_INT 4
13454: ARRAY
13455: PPUSH
13456: CALL_OW 205
13460: GO 13388
13462: POP
13463: POP
// end ; if position = 3 then
13464: LD_VAR 0 1
13468: PUSH
13469: LD_INT 3
13471: EQUAL
13472: IFFALSE 14258
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13474: LD_ADDR_VAR 0 4
13478: PUSH
13479: LD_INT 22
13481: PUSH
13482: LD_INT 3
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: PUSH
13489: LD_INT 25
13491: PUSH
13492: LD_INT 2
13494: PUSH
13495: EMPTY
13496: LIST
13497: LIST
13498: PUSH
13499: EMPTY
13500: LIST
13501: LIST
13502: PPUSH
13503: CALL_OW 69
13507: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
13508: LD_ADDR_VAR 0 5
13512: PUSH
13513: LD_INT 0
13515: PUSH
13516: LD_INT 151
13518: PUSH
13519: LD_INT 71
13521: PUSH
13522: LD_INT 4
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 4
13533: PUSH
13534: LD_INT 145
13536: PUSH
13537: LD_INT 53
13539: PUSH
13540: LD_INT 3
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: PUSH
13549: LD_INT 4
13551: PUSH
13552: LD_INT 172
13554: PUSH
13555: LD_INT 102
13557: PUSH
13558: LD_INT 5
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 29
13569: PUSH
13570: LD_INT 152
13572: PUSH
13573: LD_INT 85
13575: PUSH
13576: LD_INT 3
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 30
13587: PUSH
13588: LD_INT 156
13590: PUSH
13591: LD_INT 92
13593: PUSH
13594: LD_INT 3
13596: PUSH
13597: EMPTY
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: PUSH
13603: LD_INT 28
13605: PUSH
13606: LD_INT 151
13608: PUSH
13609: LD_INT 66
13611: PUSH
13612: LD_INT 4
13614: PUSH
13615: EMPTY
13616: LIST
13617: LIST
13618: LIST
13619: LIST
13620: PUSH
13621: LD_INT 2
13623: PUSH
13624: LD_INT 163
13626: PUSH
13627: LD_INT 95
13629: PUSH
13630: LD_INT 5
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: LIST
13637: LIST
13638: PUSH
13639: LD_INT 28
13641: PUSH
13642: LD_INT 149
13644: PUSH
13645: LD_INT 63
13647: PUSH
13648: LD_INT 4
13650: PUSH
13651: EMPTY
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: PUSH
13657: LD_INT 17
13659: PUSH
13660: LD_INT 167
13662: PUSH
13663: LD_INT 99
13665: PUSH
13666: LD_INT 5
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: PUSH
13675: LD_INT 18
13677: PUSH
13678: LD_INT 163
13680: PUSH
13681: LD_INT 98
13683: PUSH
13684: LD_INT 0
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: PUSH
13693: LD_INT 28
13695: PUSH
13696: LD_INT 154
13698: PUSH
13699: LD_INT 70
13701: PUSH
13702: LD_INT 4
13704: PUSH
13705: EMPTY
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: PUSH
13711: LD_INT 32
13713: PUSH
13714: LD_INT 155
13716: PUSH
13717: LD_INT 62
13719: PUSH
13720: LD_INT 4
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: PUSH
13729: LD_INT 32
13731: PUSH
13732: LD_INT 161
13734: PUSH
13735: LD_INT 69
13737: PUSH
13738: LD_INT 4
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: LIST
13745: LIST
13746: PUSH
13747: LD_INT 32
13749: PUSH
13750: LD_INT 168
13752: PUSH
13753: LD_INT 78
13755: PUSH
13756: LD_INT 4
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: PUSH
13765: LD_INT 32
13767: PUSH
13768: LD_INT 163
13770: PUSH
13771: LD_INT 80
13773: PUSH
13774: LD_INT 5
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: LIST
13781: LIST
13782: PUSH
13783: LD_INT 32
13785: PUSH
13786: LD_INT 136
13788: PUSH
13789: LD_INT 73
13791: PUSH
13792: LD_INT 0
13794: PUSH
13795: EMPTY
13796: LIST
13797: LIST
13798: LIST
13799: LIST
13800: PUSH
13801: LD_INT 32
13803: PUSH
13804: LD_INT 157
13806: PUSH
13807: LD_INT 98
13809: PUSH
13810: LD_INT 0
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: LIST
13817: LIST
13818: PUSH
13819: LD_INT 32
13821: PUSH
13822: LD_INT 150
13824: PUSH
13825: LD_INT 87
13827: PUSH
13828: LD_INT 1
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: LIST
13835: LIST
13836: PUSH
13837: LD_INT 33
13839: PUSH
13840: LD_INT 171
13842: PUSH
13843: LD_INT 97
13845: PUSH
13846: LD_INT 4
13848: PUSH
13849: EMPTY
13850: LIST
13851: LIST
13852: LIST
13853: LIST
13854: PUSH
13855: LD_INT 33
13857: PUSH
13858: LD_INT 168
13860: PUSH
13861: LD_INT 92
13863: PUSH
13864: LD_INT 4
13866: PUSH
13867: EMPTY
13868: LIST
13869: LIST
13870: LIST
13871: LIST
13872: PUSH
13873: LD_INT 33
13875: PUSH
13876: LD_INT 166
13878: PUSH
13879: LD_INT 80
13881: PUSH
13882: LD_INT 5
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 33
13893: PUSH
13894: LD_INT 141
13896: PUSH
13897: LD_INT 54
13899: PUSH
13900: LD_INT 2
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: PUSH
13909: LD_INT 33
13911: PUSH
13912: LD_INT 133
13914: PUSH
13915: LD_INT 57
13917: PUSH
13918: LD_INT 2
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 33
13929: PUSH
13930: LD_INT 132
13932: PUSH
13933: LD_INT 61
13935: PUSH
13936: LD_INT 2
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: PUSH
13945: LD_INT 33
13947: PUSH
13948: LD_INT 150
13950: PUSH
13951: LD_INT 82
13953: PUSH
13954: LD_INT 0
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: PUSH
13963: LD_INT 33
13965: PUSH
13966: LD_INT 132
13968: PUSH
13969: LD_INT 72
13971: PUSH
13972: LD_INT 0
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 6
13983: PUSH
13984: LD_INT 146
13986: PUSH
13987: LD_INT 64
13989: PUSH
13990: LD_INT 4
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 6
14001: PUSH
14002: LD_INT 159
14004: PUSH
14005: LD_INT 85
14007: PUSH
14008: LD_INT 4
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 21
14019: PUSH
14020: LD_INT 163
14022: PUSH
14023: LD_INT 91
14025: PUSH
14026: LD_INT 3
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: PUSH
14035: LD_INT 16
14037: PUSH
14038: LD_INT 166
14040: PUSH
14041: LD_INT 95
14043: PUSH
14044: LD_INT 4
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: PUSH
14053: LD_INT 24
14055: PUSH
14056: LD_INT 159
14058: PUSH
14059: LD_INT 95
14061: PUSH
14062: LD_INT 1
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: PUSH
14071: EMPTY
14072: LIST
14073: LIST
14074: LIST
14075: LIST
14076: LIST
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: LIST
14082: LIST
14083: LIST
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: LIST
14089: LIST
14090: LIST
14091: LIST
14092: LIST
14093: LIST
14094: LIST
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: LIST
14100: LIST
14101: LIST
14102: LIST
14103: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
14104: LD_ADDR_VAR 0 3
14108: PUSH
14109: LD_INT 22
14111: PUSH
14112: LD_INT 3
14114: PUSH
14115: EMPTY
14116: LIST
14117: LIST
14118: PUSH
14119: LD_INT 3
14121: PUSH
14122: LD_INT 25
14124: PUSH
14125: LD_INT 2
14127: PUSH
14128: EMPTY
14129: LIST
14130: LIST
14131: PUSH
14132: EMPTY
14133: LIST
14134: LIST
14135: PUSH
14136: EMPTY
14137: LIST
14138: LIST
14139: PPUSH
14140: CALL_OW 69
14144: PUSH
14145: FOR_IN
14146: IFFALSE 14165
// AddComAgressiveMove ( i , 141 , 65 ) ;
14148: LD_VAR 0 3
14152: PPUSH
14153: LD_INT 141
14155: PPUSH
14156: LD_INT 65
14158: PPUSH
14159: CALL_OW 174
14163: GO 14145
14165: POP
14166: POP
// for i := 1 to buildingsTab do
14167: LD_ADDR_VAR 0 3
14171: PUSH
14172: DOUBLE
14173: LD_INT 1
14175: DEC
14176: ST_TO_ADDR
14177: LD_VAR 0 5
14181: PUSH
14182: FOR_TO
14183: IFFALSE 14256
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
14185: LD_VAR 0 4
14189: PPUSH
14190: LD_VAR 0 5
14194: PUSH
14195: LD_VAR 0 3
14199: ARRAY
14200: PUSH
14201: LD_INT 1
14203: ARRAY
14204: PPUSH
14205: LD_VAR 0 5
14209: PUSH
14210: LD_VAR 0 3
14214: ARRAY
14215: PUSH
14216: LD_INT 2
14218: ARRAY
14219: PPUSH
14220: LD_VAR 0 5
14224: PUSH
14225: LD_VAR 0 3
14229: ARRAY
14230: PUSH
14231: LD_INT 3
14233: ARRAY
14234: PPUSH
14235: LD_VAR 0 5
14239: PUSH
14240: LD_VAR 0 3
14244: ARRAY
14245: PUSH
14246: LD_INT 4
14248: ARRAY
14249: PPUSH
14250: CALL_OW 205
14254: GO 14182
14256: POP
14257: POP
// end ; end ;
14258: LD_VAR 0 2
14262: RET
// export arBuildingsTab ; export function BuildArabianBase ; var i , engineers ; begin
14263: LD_INT 0
14265: PPUSH
14266: PPUSH
14267: PPUSH
// arBuildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 72 , 24 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
14268: LD_ADDR_EXP 68
14272: PUSH
14273: LD_INT 0
14275: PUSH
14276: LD_INT 71
14278: PUSH
14279: LD_INT 15
14281: PUSH
14282: LD_INT 3
14284: PUSH
14285: EMPTY
14286: LIST
14287: LIST
14288: LIST
14289: LIST
14290: PUSH
14291: LD_INT 6
14293: PUSH
14294: LD_INT 77
14296: PUSH
14297: LD_INT 18
14299: PUSH
14300: LD_INT 3
14302: PUSH
14303: EMPTY
14304: LIST
14305: LIST
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 4
14311: PUSH
14312: LD_INT 77
14314: PUSH
14315: LD_INT 26
14317: PUSH
14318: LD_INT 0
14320: PUSH
14321: EMPTY
14322: LIST
14323: LIST
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 31
14329: PUSH
14330: LD_INT 72
14332: PUSH
14333: LD_INT 24
14335: PUSH
14336: LD_INT 0
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: PUSH
14345: LD_INT 31
14347: PUSH
14348: LD_INT 82
14350: PUSH
14351: LD_INT 28
14353: PUSH
14354: LD_INT 0
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: LIST
14361: LIST
14362: PUSH
14363: LD_INT 31
14365: PUSH
14366: LD_INT 84
14368: PUSH
14369: LD_INT 21
14371: PUSH
14372: LD_INT 3
14374: PUSH
14375: EMPTY
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: PUSH
14381: LD_INT 31
14383: PUSH
14384: LD_INT 66
14386: PUSH
14387: LD_INT 14
14389: PUSH
14390: LD_INT 2
14392: PUSH
14393: EMPTY
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: PUSH
14399: LD_INT 27
14401: PUSH
14402: LD_INT 67
14404: PUSH
14405: LD_INT 18
14407: PUSH
14408: LD_INT 5
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: LIST
14415: LIST
14416: PUSH
14417: LD_INT 27
14419: PUSH
14420: LD_INT 69
14422: PUSH
14423: LD_INT 23
14425: PUSH
14426: LD_INT 2
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: LIST
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: ST_TO_ADDR
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
14446: LD_ADDR_VAR 0 3
14450: PUSH
14451: LD_INT 22
14453: PUSH
14454: LD_INT 2
14456: PUSH
14457: EMPTY
14458: LIST
14459: LIST
14460: PUSH
14461: LD_INT 25
14463: PUSH
14464: LD_INT 2
14466: PUSH
14467: EMPTY
14468: LIST
14469: LIST
14470: PUSH
14471: EMPTY
14472: LIST
14473: LIST
14474: PPUSH
14475: CALL_OW 69
14479: ST_TO_ADDR
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
14480: LD_VAR 0 3
14484: PPUSH
14485: LD_EXP 68
14489: PUSH
14490: LD_INT 1
14492: ARRAY
14493: PUSH
14494: LD_INT 1
14496: ARRAY
14497: PPUSH
14498: LD_EXP 68
14502: PUSH
14503: LD_INT 1
14505: ARRAY
14506: PUSH
14507: LD_INT 2
14509: ARRAY
14510: PPUSH
14511: LD_EXP 68
14515: PUSH
14516: LD_INT 1
14518: ARRAY
14519: PUSH
14520: LD_INT 3
14522: ARRAY
14523: PPUSH
14524: LD_EXP 68
14528: PUSH
14529: LD_INT 1
14531: ARRAY
14532: PUSH
14533: LD_INT 4
14535: ARRAY
14536: PPUSH
14537: CALL_OW 205
// end ;
14541: LD_VAR 0 1
14545: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
14546: LD_INT 0
14548: PPUSH
14549: PPUSH
14550: PPUSH
14551: PPUSH
14552: PPUSH
14553: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14554: LD_ADDR_VAR 0 7
14558: PUSH
14559: LD_INT 22
14561: PUSH
14562: LD_VAR 0 1
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: LD_INT 25
14573: PUSH
14574: LD_INT 9
14576: PUSH
14577: EMPTY
14578: LIST
14579: LIST
14580: PUSH
14581: EMPTY
14582: LIST
14583: LIST
14584: PPUSH
14585: CALL_OW 69
14589: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14590: LD_ADDR_VAR 0 8
14594: PUSH
14595: LD_INT 22
14597: PUSH
14598: LD_VAR 0 2
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: PUSH
14607: LD_INT 3
14609: PUSH
14610: LD_INT 21
14612: PUSH
14613: LD_INT 3
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: PUSH
14624: EMPTY
14625: LIST
14626: LIST
14627: PPUSH
14628: CALL_OW 69
14632: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14633: LD_ADDR_VAR 0 5
14637: PUSH
14638: LD_INT 1
14640: PPUSH
14641: LD_INT 3
14643: PPUSH
14644: CALL_OW 12
14648: ST_TO_ADDR
// for i = 1 to list do
14649: LD_ADDR_VAR 0 6
14653: PUSH
14654: DOUBLE
14655: LD_INT 1
14657: DEC
14658: ST_TO_ADDR
14659: LD_VAR 0 7
14663: PUSH
14664: FOR_TO
14665: IFFALSE 15655
// for ta in filter do
14667: LD_ADDR_VAR 0 4
14671: PUSH
14672: LD_VAR 0 8
14676: PUSH
14677: FOR_IN
14678: IFFALSE 15651
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14680: LD_VAR 0 7
14684: PUSH
14685: LD_VAR 0 6
14689: ARRAY
14690: PPUSH
14691: LD_VAR 0 4
14695: PPUSH
14696: CALL_OW 296
14700: PUSH
14701: LD_INT 15
14703: LESSEQUAL
14704: IFFALSE 15649
// begin case c of 1 :
14706: LD_VAR 0 5
14710: PUSH
14711: LD_INT 1
14713: DOUBLE
14714: EQUAL
14715: IFTRUE 14719
14717: GO 15151
14719: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
14720: LD_VAR 0 7
14724: PUSH
14725: LD_VAR 0 6
14729: ARRAY
14730: PPUSH
14731: LD_VAR 0 4
14735: PPUSH
14736: CALL_OW 250
14740: PPUSH
14741: LD_VAR 0 4
14745: PPUSH
14746: CALL_OW 251
14750: PPUSH
14751: CALL_OW 154
// if eventVar2 = 0 then
14755: LD_EXP 66
14759: PUSH
14760: LD_INT 0
14762: EQUAL
14763: IFFALSE 15149
// begin eventVar2 = 1 ;
14765: LD_ADDR_EXP 66
14769: PUSH
14770: LD_INT 1
14772: ST_TO_ADDR
// wait ( 0 0$7 ) ;
14773: LD_INT 245
14775: PPUSH
14776: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
14780: LD_VAR 0 4
14784: PPUSH
14785: CALL_OW 250
14789: PPUSH
14790: LD_VAR 0 4
14794: PPUSH
14795: CALL_OW 251
14799: PPUSH
14800: CALL_OW 84
// DialogueOn ;
14804: CALL_OW 6
// if IsOK ( Cyrus ) then
14808: LD_EXP 5
14812: PPUSH
14813: CALL_OW 302
14817: IFFALSE 14833
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
14819: LD_EXP 5
14823: PPUSH
14824: LD_STRING D9a-Cyrus-1
14826: PPUSH
14827: CALL_OW 88
// end else
14831: GO 14955
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
14833: LD_INT 22
14835: PUSH
14836: LD_INT 1
14838: PUSH
14839: EMPTY
14840: LIST
14841: LIST
14842: PUSH
14843: LD_INT 26
14845: PUSH
14846: LD_INT 1
14848: PUSH
14849: EMPTY
14850: LIST
14851: LIST
14852: PUSH
14853: LD_INT 2
14855: PUSH
14856: LD_INT 25
14858: PUSH
14859: LD_INT 1
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: LD_INT 25
14868: PUSH
14869: LD_INT 2
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: PUSH
14876: LD_INT 25
14878: PUSH
14879: LD_INT 3
14881: PUSH
14882: EMPTY
14883: LIST
14884: LIST
14885: PUSH
14886: LD_INT 25
14888: PUSH
14889: LD_INT 4
14891: PUSH
14892: EMPTY
14893: LIST
14894: LIST
14895: PUSH
14896: LD_INT 25
14898: PUSH
14899: LD_INT 5
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PUSH
14906: EMPTY
14907: LIST
14908: LIST
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: PUSH
14914: EMPTY
14915: LIST
14916: LIST
14917: LIST
14918: PPUSH
14919: CALL_OW 69
14923: PUSH
14924: LD_EXP 1
14928: PUSH
14929: LD_EXP 14
14933: PUSH
14934: LD_EXP 5
14938: PUSH
14939: EMPTY
14940: LIST
14941: LIST
14942: LIST
14943: DIFF
14944: PPUSH
14945: LD_STRING D9a-Sol1-1
14947: PPUSH
14948: LD_STRING D9a-Sol1-1
14950: PPUSH
14951: CALL 11110 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
14955: LD_INT 22
14957: PUSH
14958: LD_INT 1
14960: PUSH
14961: EMPTY
14962: LIST
14963: LIST
14964: PUSH
14965: LD_INT 26
14967: PUSH
14968: LD_INT 1
14970: PUSH
14971: EMPTY
14972: LIST
14973: LIST
14974: PUSH
14975: LD_INT 2
14977: PUSH
14978: LD_INT 25
14980: PUSH
14981: LD_INT 1
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PUSH
14988: LD_INT 25
14990: PUSH
14991: LD_INT 2
14993: PUSH
14994: EMPTY
14995: LIST
14996: LIST
14997: PUSH
14998: LD_INT 25
15000: PUSH
15001: LD_INT 3
15003: PUSH
15004: EMPTY
15005: LIST
15006: LIST
15007: PUSH
15008: LD_INT 25
15010: PUSH
15011: LD_INT 4
15013: PUSH
15014: EMPTY
15015: LIST
15016: LIST
15017: PUSH
15018: LD_INT 25
15020: PUSH
15021: LD_INT 5
15023: PUSH
15024: EMPTY
15025: LIST
15026: LIST
15027: PUSH
15028: EMPTY
15029: LIST
15030: LIST
15031: LIST
15032: LIST
15033: LIST
15034: LIST
15035: PUSH
15036: EMPTY
15037: LIST
15038: LIST
15039: LIST
15040: PPUSH
15041: CALL_OW 69
15045: PUSH
15046: LD_EXP 1
15050: PUSH
15051: LD_EXP 14
15055: PUSH
15056: LD_EXP 5
15060: PUSH
15061: EMPTY
15062: LIST
15063: LIST
15064: LIST
15065: DIFF
15066: PPUSH
15067: LD_STRING D9b-Sol1-1
15069: PPUSH
15070: LD_STRING D9b-Sol1-1
15072: PPUSH
15073: CALL 11110 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15077: LD_STRING 09_arInfo
15079: PPUSH
15080: LD_INT 0
15082: PPUSH
15083: CALL_OW 30
15087: PUSH
15088: LD_INT 1
15090: EQUAL
15091: IFFALSE 15105
// Say ( JMM , D9a-JMM-1 ) ;
15093: LD_EXP 1
15097: PPUSH
15098: LD_STRING D9a-JMM-1
15100: PPUSH
15101: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15105: LD_EXP 1
15109: PPUSH
15110: LD_STRING D9c-JMM-1
15112: PPUSH
15113: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15117: LD_INT 12
15119: PPUSH
15120: LD_INT 1
15122: PPUSH
15123: CALL_OW 321
15127: PUSH
15128: LD_INT 2
15130: EQUAL
15131: IFFALSE 15145
// Say ( JMM , D9c-JMM-1a ) ;
15133: LD_EXP 1
15137: PPUSH
15138: LD_STRING D9c-JMM-1a
15140: PPUSH
15141: CALL_OW 88
// DialogueOff ;
15145: CALL_OW 7
// end ; end ; 2 :
15149: GO 15649
15151: LD_INT 2
15153: DOUBLE
15154: EQUAL
15155: IFTRUE 15159
15157: GO 15617
15159: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
15160: LD_VAR 0 7
15164: PUSH
15165: LD_VAR 0 6
15169: ARRAY
15170: PPUSH
15171: LD_VAR 0 4
15175: PPUSH
15176: CALL_OW 250
15180: PUSH
15181: LD_INT 1
15183: NEG
15184: PPUSH
15185: LD_INT 1
15187: PPUSH
15188: CALL_OW 12
15192: PLUS
15193: PPUSH
15194: LD_VAR 0 4
15198: PPUSH
15199: CALL_OW 251
15203: PUSH
15204: LD_INT 1
15206: NEG
15207: PPUSH
15208: LD_INT 1
15210: PPUSH
15211: CALL_OW 12
15215: PLUS
15216: PPUSH
15217: CALL_OW 153
// if eventVar2 = 0 then
15221: LD_EXP 66
15225: PUSH
15226: LD_INT 0
15228: EQUAL
15229: IFFALSE 15615
// begin eventVar2 = 1 ;
15231: LD_ADDR_EXP 66
15235: PUSH
15236: LD_INT 1
15238: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15239: LD_INT 245
15241: PPUSH
15242: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15246: LD_VAR 0 4
15250: PPUSH
15251: CALL_OW 250
15255: PPUSH
15256: LD_VAR 0 4
15260: PPUSH
15261: CALL_OW 251
15265: PPUSH
15266: CALL_OW 84
// DialogueOn ;
15270: CALL_OW 6
// if IsOK ( Cyrus ) then
15274: LD_EXP 5
15278: PPUSH
15279: CALL_OW 302
15283: IFFALSE 15299
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15285: LD_EXP 5
15289: PPUSH
15290: LD_STRING D9a-Cyrus-1
15292: PPUSH
15293: CALL_OW 88
// end else
15297: GO 15421
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15299: LD_INT 22
15301: PUSH
15302: LD_INT 1
15304: PUSH
15305: EMPTY
15306: LIST
15307: LIST
15308: PUSH
15309: LD_INT 26
15311: PUSH
15312: LD_INT 1
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: LD_INT 2
15321: PUSH
15322: LD_INT 25
15324: PUSH
15325: LD_INT 1
15327: PUSH
15328: EMPTY
15329: LIST
15330: LIST
15331: PUSH
15332: LD_INT 25
15334: PUSH
15335: LD_INT 2
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: LD_INT 25
15344: PUSH
15345: LD_INT 3
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: LD_INT 25
15354: PUSH
15355: LD_INT 4
15357: PUSH
15358: EMPTY
15359: LIST
15360: LIST
15361: PUSH
15362: LD_INT 25
15364: PUSH
15365: LD_INT 5
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: LIST
15376: LIST
15377: LIST
15378: LIST
15379: PUSH
15380: EMPTY
15381: LIST
15382: LIST
15383: LIST
15384: PPUSH
15385: CALL_OW 69
15389: PUSH
15390: LD_EXP 1
15394: PUSH
15395: LD_EXP 14
15399: PUSH
15400: LD_EXP 5
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: LIST
15409: DIFF
15410: PPUSH
15411: LD_STRING D9a-Sol1-1
15413: PPUSH
15414: LD_STRING D9a-Sol1-1
15416: PPUSH
15417: CALL 11110 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15421: LD_INT 22
15423: PUSH
15424: LD_INT 1
15426: PUSH
15427: EMPTY
15428: LIST
15429: LIST
15430: PUSH
15431: LD_INT 26
15433: PUSH
15434: LD_INT 1
15436: PUSH
15437: EMPTY
15438: LIST
15439: LIST
15440: PUSH
15441: LD_INT 2
15443: PUSH
15444: LD_INT 25
15446: PUSH
15447: LD_INT 1
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: PUSH
15454: LD_INT 25
15456: PUSH
15457: LD_INT 2
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: LD_INT 25
15466: PUSH
15467: LD_INT 3
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: PUSH
15474: LD_INT 25
15476: PUSH
15477: LD_INT 4
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PUSH
15484: LD_INT 25
15486: PUSH
15487: LD_INT 5
15489: PUSH
15490: EMPTY
15491: LIST
15492: LIST
15493: PUSH
15494: EMPTY
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: LIST
15506: PPUSH
15507: CALL_OW 69
15511: PUSH
15512: LD_EXP 1
15516: PUSH
15517: LD_EXP 14
15521: PUSH
15522: LD_EXP 5
15526: PUSH
15527: EMPTY
15528: LIST
15529: LIST
15530: LIST
15531: DIFF
15532: PPUSH
15533: LD_STRING D9b-Sol1-1
15535: PPUSH
15536: LD_STRING D9b-Sol1-1
15538: PPUSH
15539: CALL 11110 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15543: LD_STRING 09_arInfo
15545: PPUSH
15546: LD_INT 0
15548: PPUSH
15549: CALL_OW 30
15553: PUSH
15554: LD_INT 1
15556: EQUAL
15557: IFFALSE 15571
// Say ( JMM , D9a-JMM-1 ) ;
15559: LD_EXP 1
15563: PPUSH
15564: LD_STRING D9a-JMM-1
15566: PPUSH
15567: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15571: LD_EXP 1
15575: PPUSH
15576: LD_STRING D9c-JMM-1
15578: PPUSH
15579: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15583: LD_INT 12
15585: PPUSH
15586: LD_INT 1
15588: PPUSH
15589: CALL_OW 321
15593: PUSH
15594: LD_INT 2
15596: EQUAL
15597: IFFALSE 15611
// Say ( JMM , D9c-JMM-1a ) ;
15599: LD_EXP 1
15603: PPUSH
15604: LD_STRING D9c-JMM-1a
15606: PPUSH
15607: CALL_OW 88
// DialogueOff ;
15611: CALL_OW 7
// end ; end ; 3 :
15615: GO 15649
15617: LD_INT 3
15619: DOUBLE
15620: EQUAL
15621: IFTRUE 15625
15623: GO 15648
15625: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15626: LD_VAR 0 7
15630: PUSH
15631: LD_VAR 0 6
15635: ARRAY
15636: PPUSH
15637: LD_VAR 0 4
15641: PPUSH
15642: CALL_OW 115
15646: GO 15649
15648: POP
// end ; end ;
15649: GO 14677
15651: POP
15652: POP
15653: GO 14664
15655: POP
15656: POP
// end ;
15657: LD_VAR 0 3
15661: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
15662: LD_INT 0
15664: PPUSH
15665: PPUSH
15666: PPUSH
15667: PPUSH
// for i = 1 to 72 do
15668: LD_ADDR_VAR 0 5
15672: PUSH
15673: DOUBLE
15674: LD_INT 1
15676: DEC
15677: ST_TO_ADDR
15678: LD_INT 72
15680: PUSH
15681: FOR_TO
15682: IFFALSE 15740
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
15684: LD_VAR 0 5
15688: PPUSH
15689: LD_VAR 0 1
15693: PPUSH
15694: CALL_OW 321
15698: PUSH
15699: LD_INT 1
15701: EQUAL
15702: PUSH
15703: LD_VAR 0 5
15707: PPUSH
15708: LD_VAR 0 3
15712: PPUSH
15713: CALL_OW 482
15717: PUSH
15718: LD_INT 1
15720: EQUAL
15721: AND
15722: IFFALSE 15738
// AddComResearch ( lab , i ) ;
15724: LD_VAR 0 2
15728: PPUSH
15729: LD_VAR 0 5
15733: PPUSH
15734: CALL_OW 184
15738: GO 15681
15740: POP
15741: POP
// end ;
15742: LD_VAR 0 4
15746: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
15747: LD_INT 0
15749: PPUSH
15750: PPUSH
15751: PPUSH
15752: PPUSH
15753: PPUSH
15754: PPUSH
15755: PPUSH
15756: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
15757: LD_ADDR_VAR 0 6
15761: PUSH
15762: LD_INT 22
15764: PUSH
15765: LD_VAR 0 1
15769: PUSH
15770: EMPTY
15771: LIST
15772: LIST
15773: PUSH
15774: LD_INT 56
15776: PUSH
15777: EMPTY
15778: LIST
15779: PUSH
15780: LD_INT 24
15782: PUSH
15783: LD_INT 700
15785: PUSH
15786: EMPTY
15787: LIST
15788: LIST
15789: PUSH
15790: LD_INT 3
15792: PUSH
15793: LD_INT 60
15795: PUSH
15796: EMPTY
15797: LIST
15798: PUSH
15799: EMPTY
15800: LIST
15801: LIST
15802: PUSH
15803: LD_INT 2
15805: PUSH
15806: LD_INT 25
15808: PUSH
15809: LD_INT 1
15811: PUSH
15812: EMPTY
15813: LIST
15814: LIST
15815: PUSH
15816: LD_INT 25
15818: PUSH
15819: LD_INT 9
15821: PUSH
15822: EMPTY
15823: LIST
15824: LIST
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: LIST
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: PPUSH
15838: CALL_OW 69
15842: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
15843: LD_ADDR_VAR 0 7
15847: PUSH
15848: LD_INT 22
15850: PUSH
15851: LD_VAR 0 1
15855: PUSH
15856: EMPTY
15857: LIST
15858: LIST
15859: PUSH
15860: LD_INT 30
15862: PUSH
15863: LD_INT 32
15865: PUSH
15866: EMPTY
15867: LIST
15868: LIST
15869: PUSH
15870: LD_INT 58
15872: PUSH
15873: EMPTY
15874: LIST
15875: PUSH
15876: LD_INT 24
15878: PUSH
15879: LD_INT 251
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PUSH
15886: EMPTY
15887: LIST
15888: LIST
15889: LIST
15890: LIST
15891: PPUSH
15892: CALL_OW 69
15896: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
15897: LD_ADDR_VAR 0 9
15901: PUSH
15902: LD_INT 22
15904: PUSH
15905: LD_VAR 0 1
15909: PUSH
15910: EMPTY
15911: LIST
15912: LIST
15913: PUSH
15914: LD_INT 2
15916: PUSH
15917: LD_INT 30
15919: PUSH
15920: LD_INT 4
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: LD_INT 30
15929: PUSH
15930: LD_INT 5
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PUSH
15937: EMPTY
15938: LIST
15939: LIST
15940: LIST
15941: PUSH
15942: LD_INT 24
15944: PUSH
15945: LD_INT 251
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: EMPTY
15953: LIST
15954: LIST
15955: LIST
15956: PPUSH
15957: CALL_OW 69
15961: ST_TO_ADDR
// if barrackList > 0 then
15962: LD_VAR 0 9
15966: PUSH
15967: LD_INT 0
15969: GREATER
15970: IFFALSE 16105
// begin if turretList = 0 then
15972: LD_VAR 0 7
15976: PUSH
15977: LD_INT 0
15979: EQUAL
15980: IFFALSE 16029
// begin for i in soldiers_list do
15982: LD_ADDR_VAR 0 4
15986: PUSH
15987: LD_VAR 0 6
15991: PUSH
15992: FOR_IN
15993: IFFALSE 16025
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
15995: LD_VAR 0 4
15999: PPUSH
16000: LD_VAR 0 9
16004: PUSH
16005: LD_INT 1
16007: PPUSH
16008: LD_VAR 0 9
16012: PPUSH
16013: CALL_OW 12
16017: ARRAY
16018: PPUSH
16019: CALL_OW 120
16023: GO 15992
16025: POP
16026: POP
// end else
16027: GO 16105
// begin for i in barrackList do
16029: LD_ADDR_VAR 0 4
16033: PUSH
16034: LD_VAR 0 9
16038: PUSH
16039: FOR_IN
16040: IFFALSE 16103
// begin insideUnits = UnitsInside ( i ) ;
16042: LD_ADDR_VAR 0 10
16046: PUSH
16047: LD_VAR 0 4
16051: PPUSH
16052: CALL_OW 313
16056: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
16057: LD_VAR 0 10
16061: PUSH
16062: LD_INT 1
16064: ARRAY
16065: PPUSH
16066: LD_VAR 0 7
16070: PUSH
16071: LD_INT 1
16073: ARRAY
16074: PPUSH
16075: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
16079: LD_VAR 0 6
16083: PUSH
16084: LD_INT 1
16086: ARRAY
16087: PPUSH
16088: LD_VAR 0 7
16092: PUSH
16093: LD_INT 1
16095: ARRAY
16096: PPUSH
16097: CALL_OW 120
// end ;
16101: GO 16039
16103: POP
16104: POP
// end ; end ; end ;
16105: LD_VAR 0 3
16109: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
16110: LD_INT 0
16112: PPUSH
16113: PPUSH
16114: PPUSH
16115: PPUSH
16116: PPUSH
16117: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
16118: LD_ADDR_VAR 0 6
16122: PUSH
16123: LD_VAR 0 2
16127: PPUSH
16128: CALL_OW 313
16132: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
16133: LD_ADDR_VAR 0 7
16137: PUSH
16138: LD_INT 22
16140: PUSH
16141: LD_VAR 0 1
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 25
16152: PUSH
16153: LD_INT 2
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: PUSH
16160: LD_INT 24
16162: PUSH
16163: LD_INT 1000
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: LD_INT 3
16172: PUSH
16173: LD_INT 54
16175: PUSH
16176: EMPTY
16177: LIST
16178: PUSH
16179: EMPTY
16180: LIST
16181: LIST
16182: PUSH
16183: EMPTY
16184: LIST
16185: LIST
16186: LIST
16187: LIST
16188: PPUSH
16189: CALL_OW 69
16193: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
16194: LD_ADDR_VAR 0 4
16198: PUSH
16199: LD_INT 22
16201: PUSH
16202: LD_VAR 0 1
16206: PUSH
16207: EMPTY
16208: LIST
16209: LIST
16210: PUSH
16211: LD_INT 21
16213: PUSH
16214: LD_INT 3
16216: PUSH
16217: EMPTY
16218: LIST
16219: LIST
16220: PUSH
16221: LD_INT 3
16223: PUSH
16224: LD_INT 24
16226: PUSH
16227: LD_INT 1000
16229: PUSH
16230: EMPTY
16231: LIST
16232: LIST
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: PUSH
16238: EMPTY
16239: LIST
16240: LIST
16241: LIST
16242: PUSH
16243: EMPTY
16244: LIST
16245: PPUSH
16246: CALL_OW 69
16250: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
16251: LD_VAR 0 4
16255: NOT
16256: PUSH
16257: LD_VAR 0 7
16261: NOT
16262: AND
16263: PUSH
16264: LD_EXP 42
16268: NOT
16269: AND
16270: IFFALSE 16274
// exit ;
16272: GO 16465
// if buildings_list > 0 and engineerOkInside then
16274: LD_VAR 0 4
16278: PUSH
16279: LD_INT 0
16281: GREATER
16282: PUSH
16283: LD_VAR 0 6
16287: AND
16288: IFFALSE 16342
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16290: LD_ADDR_VAR 0 5
16294: PUSH
16295: LD_INT 22
16297: PUSH
16298: LD_VAR 0 1
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: LD_INT 25
16309: PUSH
16310: LD_INT 2
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PPUSH
16321: CALL_OW 69
16325: PUSH
16326: FOR_IN
16327: IFFALSE 16340
// ComExitBuilding ( i ) ;
16329: LD_VAR 0 5
16333: PPUSH
16334: CALL_OW 122
16338: GO 16326
16340: POP
16341: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
16342: LD_VAR 0 4
16346: PUSH
16347: LD_INT 0
16349: GREATER
16350: PUSH
16351: LD_VAR 0 7
16355: PUSH
16356: LD_INT 0
16358: GREATER
16359: AND
16360: IFFALSE 16414
// begin for i in engineerOkOutside do
16362: LD_ADDR_VAR 0 5
16366: PUSH
16367: LD_VAR 0 7
16371: PUSH
16372: FOR_IN
16373: IFFALSE 16412
// for j in buildings_list do
16375: LD_ADDR_VAR 0 8
16379: PUSH
16380: LD_VAR 0 4
16384: PUSH
16385: FOR_IN
16386: IFFALSE 16408
// ComRepairBuilding ( i , j [ 1 ] ) ;
16388: LD_VAR 0 5
16392: PPUSH
16393: LD_VAR 0 8
16397: PUSH
16398: LD_INT 1
16400: ARRAY
16401: PPUSH
16402: CALL_OW 130
16406: GO 16385
16408: POP
16409: POP
16410: GO 16372
16412: POP
16413: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
16414: LD_VAR 0 4
16418: PUSH
16419: LD_INT 0
16421: EQUAL
16422: PUSH
16423: LD_VAR 0 7
16427: PUSH
16428: LD_INT 0
16430: GREATER
16431: AND
16432: IFFALSE 16465
// for i in engineerOkOutside do
16434: LD_ADDR_VAR 0 5
16438: PUSH
16439: LD_VAR 0 7
16443: PUSH
16444: FOR_IN
16445: IFFALSE 16463
// ComEnterUnit ( i , building ) ;
16447: LD_VAR 0 5
16451: PPUSH
16452: LD_VAR 0 2
16456: PPUSH
16457: CALL_OW 120
16461: GO 16444
16463: POP
16464: POP
// end ;
16465: LD_VAR 0 3
16469: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
16470: LD_INT 0
16472: PPUSH
16473: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
16474: LD_INT 22
16476: PUSH
16477: LD_VAR 0 1
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 25
16488: PUSH
16489: LD_INT 2
16491: PUSH
16492: EMPTY
16493: LIST
16494: LIST
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PPUSH
16500: CALL_OW 69
16504: PUSH
16505: LD_INT 0
16507: GREATER
16508: PUSH
16509: LD_INT 22
16511: PUSH
16512: LD_VAR 0 1
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: LD_INT 21
16523: PUSH
16524: LD_INT 3
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: PUSH
16531: LD_INT 3
16533: PUSH
16534: LD_INT 24
16536: PUSH
16537: LD_INT 1000
16539: PUSH
16540: EMPTY
16541: LIST
16542: LIST
16543: PUSH
16544: EMPTY
16545: LIST
16546: LIST
16547: PUSH
16548: EMPTY
16549: LIST
16550: LIST
16551: LIST
16552: PPUSH
16553: CALL_OW 69
16557: PUSH
16558: LD_INT 0
16560: EQUAL
16561: AND
16562: PUSH
16563: LD_VAR 0 2
16567: PUSH
16568: LD_INT 0
16570: GREATER
16571: AND
16572: IFFALSE 16671
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16574: LD_ADDR_VAR 0 4
16578: PUSH
16579: LD_INT 22
16581: PUSH
16582: LD_VAR 0 1
16586: PUSH
16587: EMPTY
16588: LIST
16589: LIST
16590: PUSH
16591: LD_INT 25
16593: PUSH
16594: LD_INT 2
16596: PUSH
16597: EMPTY
16598: LIST
16599: LIST
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PPUSH
16605: CALL_OW 69
16609: PUSH
16610: FOR_IN
16611: IFFALSE 16669
// begin AddComExitBuilding ( i ) ;
16613: LD_VAR 0 4
16617: PPUSH
16618: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
16622: LD_VAR 0 4
16626: PPUSH
16627: LD_VAR 0 2
16631: PUSH
16632: LD_INT 1
16634: ARRAY
16635: PPUSH
16636: LD_VAR 0 2
16640: PUSH
16641: LD_INT 2
16643: ARRAY
16644: PPUSH
16645: LD_VAR 0 2
16649: PUSH
16650: LD_INT 3
16652: ARRAY
16653: PPUSH
16654: LD_VAR 0 2
16658: PUSH
16659: LD_INT 4
16661: ARRAY
16662: PPUSH
16663: CALL_OW 205
// end ;
16667: GO 16610
16669: POP
16670: POP
// end ; end ;
16671: LD_VAR 0 3
16675: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
16676: LD_INT 0
16678: PPUSH
16679: PPUSH
16680: PPUSH
16681: PPUSH
16682: PPUSH
16683: PPUSH
16684: PPUSH
16685: PPUSH
16686: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
16687: LD_ADDR_VAR 0 6
16691: PUSH
16692: LD_INT 22
16694: PUSH
16695: LD_VAR 0 1
16699: PUSH
16700: EMPTY
16701: LIST
16702: LIST
16703: PUSH
16704: LD_INT 25
16706: PUSH
16707: LD_INT 4
16709: PUSH
16710: EMPTY
16711: LIST
16712: LIST
16713: PUSH
16714: LD_INT 24
16716: PUSH
16717: LD_INT 251
16719: PUSH
16720: EMPTY
16721: LIST
16722: LIST
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: LIST
16728: PPUSH
16729: CALL_OW 69
16733: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
16734: LD_ADDR_VAR 0 7
16738: PUSH
16739: LD_VAR 0 3
16743: PPUSH
16744: LD_INT 22
16746: PUSH
16747: LD_VAR 0 1
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: LD_INT 25
16758: PUSH
16759: LD_INT 4
16761: PUSH
16762: EMPTY
16763: LIST
16764: LIST
16765: PUSH
16766: LD_INT 50
16768: PUSH
16769: EMPTY
16770: LIST
16771: PUSH
16772: EMPTY
16773: LIST
16774: LIST
16775: LIST
16776: PPUSH
16777: CALL_OW 70
16781: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
16782: LD_ADDR_VAR 0 10
16786: PUSH
16787: LD_VAR 0 3
16791: PPUSH
16792: LD_INT 22
16794: PUSH
16795: LD_VAR 0 1
16799: PUSH
16800: EMPTY
16801: LIST
16802: LIST
16803: PUSH
16804: LD_INT 21
16806: PUSH
16807: LD_INT 1
16809: PUSH
16810: EMPTY
16811: LIST
16812: LIST
16813: PUSH
16814: LD_INT 3
16816: PUSH
16817: LD_INT 25
16819: PUSH
16820: LD_INT 3
16822: PUSH
16823: EMPTY
16824: LIST
16825: LIST
16826: PUSH
16827: EMPTY
16828: LIST
16829: LIST
16830: PUSH
16831: LD_INT 3
16833: PUSH
16834: LD_INT 24
16836: PUSH
16837: LD_INT 750
16839: PUSH
16840: EMPTY
16841: LIST
16842: LIST
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: EMPTY
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: PPUSH
16854: CALL_OW 70
16858: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
16859: LD_ADDR_VAR 0 11
16863: PUSH
16864: LD_VAR 0 2
16868: PPUSH
16869: LD_INT 22
16871: PUSH
16872: LD_VAR 0 1
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 21
16883: PUSH
16884: LD_INT 1
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 3
16893: PUSH
16894: LD_INT 25
16896: PUSH
16897: LD_INT 3
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: LD_INT 3
16910: PUSH
16911: LD_INT 24
16913: PUSH
16914: LD_INT 1000
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: PPUSH
16931: CALL_OW 70
16935: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
16936: LD_VAR 0 10
16940: NOT
16941: PUSH
16942: LD_VAR 0 7
16946: NOT
16947: AND
16948: PUSH
16949: LD_VAR 0 11
16953: NOT
16954: AND
16955: IFFALSE 16959
// exit ;
16957: GO 17219
// if damageUnits > 0 and sci_list > 0 then
16959: LD_VAR 0 10
16963: PUSH
16964: LD_INT 0
16966: GREATER
16967: PUSH
16968: LD_VAR 0 6
16972: PUSH
16973: LD_INT 0
16975: GREATER
16976: AND
16977: IFFALSE 17010
// for i in damageUnits do
16979: LD_ADDR_VAR 0 8
16983: PUSH
16984: LD_VAR 0 10
16988: PUSH
16989: FOR_IN
16990: IFFALSE 17008
// ComMoveToArea ( i , healArea ) ;
16992: LD_VAR 0 8
16996: PPUSH
16997: LD_VAR 0 2
17001: PPUSH
17002: CALL_OW 113
17006: GO 16989
17008: POP
17009: POP
// if unitsToHeal > 0 and sci_list > 0 then
17010: LD_VAR 0 11
17014: PUSH
17015: LD_INT 0
17017: GREATER
17018: PUSH
17019: LD_VAR 0 6
17023: PUSH
17024: LD_INT 0
17026: GREATER
17027: AND
17028: IFFALSE 17087
// begin for i in sci_list do
17030: LD_ADDR_VAR 0 8
17034: PUSH
17035: LD_VAR 0 6
17039: PUSH
17040: FOR_IN
17041: IFFALSE 17085
// begin ComExitBuilding ( i ) ;
17043: LD_VAR 0 8
17047: PPUSH
17048: CALL_OW 122
// for j in unitsToHeal do
17052: LD_ADDR_VAR 0 9
17056: PUSH
17057: LD_VAR 0 11
17061: PUSH
17062: FOR_IN
17063: IFFALSE 17081
// AddComHeal ( i , j ) ;
17065: LD_VAR 0 8
17069: PPUSH
17070: LD_VAR 0 9
17074: PPUSH
17075: CALL_OW 188
17079: GO 17062
17081: POP
17082: POP
// end ;
17083: GO 17040
17085: POP
17086: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
17087: LD_VAR 0 10
17091: PUSH
17092: LD_INT 0
17094: EQUAL
17095: PUSH
17096: LD_VAR 0 11
17100: PUSH
17101: LD_INT 0
17103: EQUAL
17104: AND
17105: PUSH
17106: LD_VAR 0 7
17110: PUSH
17111: LD_INT 0
17113: GREATER
17114: AND
17115: IFFALSE 17219
// for i in sci_listOutside do
17117: LD_ADDR_VAR 0 8
17121: PUSH
17122: LD_VAR 0 7
17126: PUSH
17127: FOR_IN
17128: IFFALSE 17217
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
17130: LD_ADDR_VAR 0 12
17134: PUSH
17135: LD_INT 22
17137: PUSH
17138: LD_VAR 0 1
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: LD_INT 21
17149: PUSH
17150: LD_INT 3
17152: PUSH
17153: EMPTY
17154: LIST
17155: LIST
17156: PUSH
17157: LD_INT 30
17159: PUSH
17160: LD_INT 8
17162: PUSH
17163: EMPTY
17164: LIST
17165: LIST
17166: PUSH
17167: EMPTY
17168: LIST
17169: LIST
17170: LIST
17171: PPUSH
17172: CALL_OW 69
17176: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
17177: LD_ADDR_VAR 0 13
17181: PUSH
17182: LD_INT 1
17184: PPUSH
17185: LD_VAR 0 12
17189: PPUSH
17190: CALL_OW 12
17194: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
17195: LD_VAR 0 8
17199: PPUSH
17200: LD_VAR 0 12
17204: PUSH
17205: LD_VAR 0 13
17209: ARRAY
17210: PPUSH
17211: CALL_OW 120
// end ;
17215: GO 17127
17217: POP
17218: POP
// end ;
17219: LD_VAR 0 5
17223: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
17224: LD_INT 0
17226: PPUSH
17227: PPUSH
17228: PPUSH
17229: PPUSH
17230: PPUSH
17231: PPUSH
17232: PPUSH
17233: PPUSH
17234: PPUSH
17235: PPUSH
17236: PPUSH
// amChassisTab = [ ] ;
17237: LD_ADDR_VAR 0 19
17241: PUSH
17242: EMPTY
17243: ST_TO_ADDR
// arChassisTab = [ ] ;
17244: LD_ADDR_VAR 0 18
17248: PUSH
17249: EMPTY
17250: ST_TO_ADDR
// ruChassisTab = [ ] ;
17251: LD_ADDR_VAR 0 17
17255: PUSH
17256: EMPTY
17257: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
17258: LD_INT 35
17260: PPUSH
17261: CALL_OW 67
// if nation = 1 then
17265: LD_VAR 0 5
17269: PUSH
17270: LD_INT 1
17272: EQUAL
17273: IFFALSE 17778
// begin uc_side = side ;
17275: LD_ADDR_OWVAR 20
17279: PUSH
17280: LD_VAR 0 2
17284: ST_TO_ADDR
// uc_nation = nation ;
17285: LD_ADDR_OWVAR 21
17289: PUSH
17290: LD_VAR 0 5
17294: ST_TO_ADDR
// vc_engine = vehengine ;
17295: LD_ADDR_OWVAR 39
17299: PUSH
17300: LD_VAR 0 6
17304: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17305: LD_ADDR_OWVAR 38
17309: PUSH
17310: LD_VAR 0 7
17314: PUSH
17315: LD_INT 1
17317: PPUSH
17318: LD_VAR 0 7
17322: PPUSH
17323: CALL_OW 12
17327: ARRAY
17328: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
17329: LD_ADDR_OWVAR 40
17333: PUSH
17334: LD_VAR 0 10
17338: PUSH
17339: LD_INT 1
17341: PPUSH
17342: LD_VAR 0 10
17346: PPUSH
17347: CALL_OW 12
17351: ARRAY
17352: ST_TO_ADDR
// for j = 1 to AMWeapon do
17353: LD_ADDR_VAR 0 14
17357: PUSH
17358: DOUBLE
17359: LD_INT 1
17361: DEC
17362: ST_TO_ADDR
17363: LD_VAR 0 10
17367: PUSH
17368: FOR_TO
17369: IFFALSE 17670
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
17371: LD_VAR 0 10
17375: PUSH
17376: LD_VAR 0 14
17380: ARRAY
17381: PUSH
17382: LD_INT 2
17384: EQUAL
17385: PUSH
17386: LD_VAR 0 10
17390: PUSH
17391: LD_VAR 0 14
17395: ARRAY
17396: PUSH
17397: LD_INT 3
17399: EQUAL
17400: OR
17401: IFFALSE 17454
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
17403: LD_ADDR_VAR 0 19
17407: PUSH
17408: LD_INT 1
17410: PUSH
17411: LD_INT 2
17413: PUSH
17414: LD_INT 3
17416: PUSH
17417: LD_INT 4
17419: PUSH
17420: LD_INT 5
17422: PUSH
17423: EMPTY
17424: LIST
17425: LIST
17426: LIST
17427: LIST
17428: LIST
17429: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17430: LD_ADDR_OWVAR 37
17434: PUSH
17435: LD_VAR 0 19
17439: PUSH
17440: LD_INT 1
17442: PPUSH
17443: LD_VAR 0 19
17447: PPUSH
17448: CALL_OW 12
17452: ARRAY
17453: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
17454: LD_VAR 0 10
17458: PUSH
17459: LD_VAR 0 14
17463: ARRAY
17464: PUSH
17465: LD_INT 4
17467: EQUAL
17468: PUSH
17469: LD_VAR 0 10
17473: PUSH
17474: LD_VAR 0 14
17478: ARRAY
17479: PUSH
17480: LD_INT 5
17482: EQUAL
17483: OR
17484: PUSH
17485: LD_VAR 0 10
17489: PUSH
17490: LD_VAR 0 14
17494: ARRAY
17495: PUSH
17496: LD_INT 9
17498: EQUAL
17499: OR
17500: PUSH
17501: LD_VAR 0 10
17505: PUSH
17506: LD_VAR 0 14
17510: ARRAY
17511: PUSH
17512: LD_INT 11
17514: EQUAL
17515: OR
17516: PUSH
17517: LD_VAR 0 10
17521: PUSH
17522: LD_VAR 0 14
17526: ARRAY
17527: PUSH
17528: LD_INT 7
17530: EQUAL
17531: OR
17532: IFFALSE 17581
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
17534: LD_ADDR_VAR 0 19
17538: PUSH
17539: LD_INT 2
17541: PUSH
17542: LD_INT 3
17544: PUSH
17545: LD_INT 4
17547: PUSH
17548: LD_INT 5
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: LIST
17555: LIST
17556: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17557: LD_ADDR_OWVAR 37
17561: PUSH
17562: LD_VAR 0 19
17566: PUSH
17567: LD_INT 1
17569: PPUSH
17570: LD_VAR 0 19
17574: PPUSH
17575: CALL_OW 12
17579: ARRAY
17580: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
17581: LD_VAR 0 10
17585: PUSH
17586: LD_VAR 0 14
17590: ARRAY
17591: PUSH
17592: LD_INT 8
17594: EQUAL
17595: PUSH
17596: LD_VAR 0 10
17600: PUSH
17601: LD_VAR 0 14
17605: ARRAY
17606: PUSH
17607: LD_INT 6
17609: EQUAL
17610: OR
17611: PUSH
17612: LD_VAR 0 10
17616: PUSH
17617: LD_VAR 0 14
17621: ARRAY
17622: PUSH
17623: LD_INT 10
17625: EQUAL
17626: OR
17627: IFFALSE 17668
// begin amChassisTab = [ 4 , 5 ] ;
17629: LD_ADDR_VAR 0 19
17633: PUSH
17634: LD_INT 4
17636: PUSH
17637: LD_INT 5
17639: PUSH
17640: EMPTY
17641: LIST
17642: LIST
17643: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17644: LD_ADDR_OWVAR 37
17648: PUSH
17649: LD_VAR 0 19
17653: PUSH
17654: LD_INT 1
17656: PPUSH
17657: LD_VAR 0 19
17661: PPUSH
17662: CALL_OW 12
17666: ARRAY
17667: ST_TO_ADDR
// end ; end ;
17668: GO 17368
17670: POP
17671: POP
// veh = CreateVehicle ;
17672: LD_ADDR_VAR 0 16
17676: PUSH
17677: CALL_OW 45
17681: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17682: LD_VAR 0 16
17686: PPUSH
17687: LD_VAR 0 1
17691: PPUSH
17692: LD_INT 0
17694: PPUSH
17695: CALL_OW 49
// if vc_control = 1 then
17699: LD_OWVAR 38
17703: PUSH
17704: LD_INT 1
17706: EQUAL
17707: IFFALSE 17764
// begin hc_gallery =  ;
17709: LD_ADDR_OWVAR 33
17713: PUSH
17714: LD_STRING 
17716: ST_TO_ADDR
// hc_name =  ;
17717: LD_ADDR_OWVAR 26
17721: PUSH
17722: LD_STRING 
17724: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17725: LD_INT 0
17727: PPUSH
17728: LD_INT 3
17730: PPUSH
17731: LD_VAR 0 4
17735: PPUSH
17736: CALL_OW 380
// un = CreateHuman ;
17740: LD_ADDR_VAR 0 15
17744: PUSH
17745: CALL_OW 44
17749: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17750: LD_VAR 0 15
17754: PPUSH
17755: LD_VAR 0 16
17759: PPUSH
17760: CALL_OW 52
// end ; i = i + 1 ;
17764: LD_ADDR_VAR 0 13
17768: PUSH
17769: LD_VAR 0 13
17773: PUSH
17774: LD_INT 1
17776: PLUS
17777: ST_TO_ADDR
// end ; if nation = 2 then
17778: LD_VAR 0 5
17782: PUSH
17783: LD_INT 2
17785: EQUAL
17786: IFFALSE 18208
// begin uc_side = side ;
17788: LD_ADDR_OWVAR 20
17792: PUSH
17793: LD_VAR 0 2
17797: ST_TO_ADDR
// uc_nation = nation ;
17798: LD_ADDR_OWVAR 21
17802: PUSH
17803: LD_VAR 0 5
17807: ST_TO_ADDR
// vc_engine = vehengine ;
17808: LD_ADDR_OWVAR 39
17812: PUSH
17813: LD_VAR 0 6
17817: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17818: LD_ADDR_OWVAR 38
17822: PUSH
17823: LD_VAR 0 7
17827: PUSH
17828: LD_INT 1
17830: PPUSH
17831: LD_VAR 0 7
17835: PPUSH
17836: CALL_OW 12
17840: ARRAY
17841: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
17842: LD_ADDR_OWVAR 40
17846: PUSH
17847: LD_VAR 0 9
17851: PUSH
17852: LD_INT 1
17854: PPUSH
17855: LD_VAR 0 9
17859: PPUSH
17860: CALL_OW 12
17864: ARRAY
17865: ST_TO_ADDR
// for j = 1 to ARWeapons do
17866: LD_ADDR_VAR 0 14
17870: PUSH
17871: DOUBLE
17872: LD_INT 1
17874: DEC
17875: ST_TO_ADDR
17876: LD_VAR 0 9
17880: PUSH
17881: FOR_TO
17882: IFFALSE 18100
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
17884: LD_VAR 0 9
17888: PUSH
17889: LD_VAR 0 14
17893: ARRAY
17894: PUSH
17895: LD_INT 24
17897: EQUAL
17898: PUSH
17899: LD_VAR 0 9
17903: PUSH
17904: LD_VAR 0 14
17908: ARRAY
17909: PUSH
17910: LD_INT 22
17912: EQUAL
17913: OR
17914: PUSH
17915: LD_VAR 0 9
17919: PUSH
17920: LD_VAR 0 14
17924: ARRAY
17925: PUSH
17926: LD_INT 23
17928: EQUAL
17929: OR
17930: PUSH
17931: LD_VAR 0 9
17935: PUSH
17936: LD_VAR 0 14
17940: ARRAY
17941: PUSH
17942: LD_INT 30
17944: EQUAL
17945: OR
17946: IFFALSE 17983
// begin arChassisTab = [ 14 ] ;
17948: LD_ADDR_VAR 0 18
17952: PUSH
17953: LD_INT 14
17955: PUSH
17956: EMPTY
17957: LIST
17958: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
17959: LD_ADDR_OWVAR 37
17963: PUSH
17964: LD_VAR 0 18
17968: PUSH
17969: LD_INT 1
17971: PPUSH
17972: LD_VAR 0 18
17976: PPUSH
17977: CALL_OW 12
17981: ARRAY
17982: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
17983: LD_VAR 0 9
17987: PUSH
17988: LD_VAR 0 14
17992: ARRAY
17993: PUSH
17994: LD_INT 29
17996: EQUAL
17997: PUSH
17998: LD_VAR 0 9
18002: PUSH
18003: LD_VAR 0 14
18007: ARRAY
18008: PUSH
18009: LD_INT 28
18011: EQUAL
18012: OR
18013: PUSH
18014: LD_VAR 0 9
18018: PUSH
18019: LD_VAR 0 14
18023: ARRAY
18024: PUSH
18025: LD_INT 27
18027: EQUAL
18028: OR
18029: PUSH
18030: LD_VAR 0 9
18034: PUSH
18035: LD_VAR 0 14
18039: ARRAY
18040: PUSH
18041: LD_INT 26
18043: EQUAL
18044: OR
18045: PUSH
18046: LD_VAR 0 9
18050: PUSH
18051: LD_VAR 0 14
18055: ARRAY
18056: PUSH
18057: LD_INT 25
18059: EQUAL
18060: OR
18061: IFFALSE 18098
// begin arChassisTab = [ 14 ] ;
18063: LD_ADDR_VAR 0 18
18067: PUSH
18068: LD_INT 14
18070: PUSH
18071: EMPTY
18072: LIST
18073: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18074: LD_ADDR_OWVAR 37
18078: PUSH
18079: LD_VAR 0 18
18083: PUSH
18084: LD_INT 1
18086: PPUSH
18087: LD_VAR 0 18
18091: PPUSH
18092: CALL_OW 12
18096: ARRAY
18097: ST_TO_ADDR
// end ; end ;
18098: GO 17881
18100: POP
18101: POP
// veh = CreateVehicle ;
18102: LD_ADDR_VAR 0 16
18106: PUSH
18107: CALL_OW 45
18111: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18112: LD_VAR 0 16
18116: PPUSH
18117: LD_VAR 0 1
18121: PPUSH
18122: LD_INT 0
18124: PPUSH
18125: CALL_OW 49
// if vc_control = 1 then
18129: LD_OWVAR 38
18133: PUSH
18134: LD_INT 1
18136: EQUAL
18137: IFFALSE 18194
// begin hc_gallery =  ;
18139: LD_ADDR_OWVAR 33
18143: PUSH
18144: LD_STRING 
18146: ST_TO_ADDR
// hc_name =  ;
18147: LD_ADDR_OWVAR 26
18151: PUSH
18152: LD_STRING 
18154: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18155: LD_INT 0
18157: PPUSH
18158: LD_INT 3
18160: PPUSH
18161: LD_VAR 0 4
18165: PPUSH
18166: CALL_OW 380
// un = CreateHuman ;
18170: LD_ADDR_VAR 0 15
18174: PUSH
18175: CALL_OW 44
18179: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18180: LD_VAR 0 15
18184: PPUSH
18185: LD_VAR 0 16
18189: PPUSH
18190: CALL_OW 52
// end ; i = i + 1 ;
18194: LD_ADDR_VAR 0 13
18198: PUSH
18199: LD_VAR 0 13
18203: PUSH
18204: LD_INT 1
18206: PLUS
18207: ST_TO_ADDR
// end ; if nation = 3 then
18208: LD_VAR 0 5
18212: PUSH
18213: LD_INT 3
18215: EQUAL
18216: IFFALSE 18622
// begin uc_side = side ;
18218: LD_ADDR_OWVAR 20
18222: PUSH
18223: LD_VAR 0 2
18227: ST_TO_ADDR
// uc_nation = nation ;
18228: LD_ADDR_OWVAR 21
18232: PUSH
18233: LD_VAR 0 5
18237: ST_TO_ADDR
// vc_engine = vehengine ;
18238: LD_ADDR_OWVAR 39
18242: PUSH
18243: LD_VAR 0 6
18247: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18248: LD_ADDR_OWVAR 38
18252: PUSH
18253: LD_VAR 0 7
18257: PUSH
18258: LD_INT 1
18260: PPUSH
18261: LD_VAR 0 7
18265: PPUSH
18266: CALL_OW 12
18270: ARRAY
18271: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
18272: LD_ADDR_OWVAR 40
18276: PUSH
18277: LD_VAR 0 8
18281: PUSH
18282: LD_INT 1
18284: PPUSH
18285: LD_VAR 0 8
18289: PPUSH
18290: CALL_OW 12
18294: ARRAY
18295: ST_TO_ADDR
// for j = 1 to RuWeapons do
18296: LD_ADDR_VAR 0 14
18300: PUSH
18301: DOUBLE
18302: LD_INT 1
18304: DEC
18305: ST_TO_ADDR
18306: LD_VAR 0 8
18310: PUSH
18311: FOR_TO
18312: IFFALSE 18514
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
18314: LD_VAR 0 8
18318: PUSH
18319: LD_VAR 0 14
18323: ARRAY
18324: PUSH
18325: LD_INT 42
18327: EQUAL
18328: PUSH
18329: LD_VAR 0 8
18333: PUSH
18334: LD_VAR 0 14
18338: ARRAY
18339: PUSH
18340: LD_INT 43
18342: EQUAL
18343: OR
18344: PUSH
18345: LD_VAR 0 8
18349: PUSH
18350: LD_VAR 0 14
18354: ARRAY
18355: PUSH
18356: LD_INT 44
18358: EQUAL
18359: OR
18360: PUSH
18361: LD_VAR 0 8
18365: PUSH
18366: LD_VAR 0 14
18370: ARRAY
18371: PUSH
18372: LD_INT 45
18374: EQUAL
18375: OR
18376: PUSH
18377: LD_VAR 0 8
18381: PUSH
18382: LD_VAR 0 14
18386: ARRAY
18387: PUSH
18388: LD_INT 49
18390: EQUAL
18391: OR
18392: IFFALSE 18441
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
18394: LD_ADDR_VAR 0 17
18398: PUSH
18399: LD_INT 21
18401: PUSH
18402: LD_INT 22
18404: PUSH
18405: LD_INT 23
18407: PUSH
18408: LD_INT 24
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: LIST
18415: LIST
18416: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18417: LD_ADDR_OWVAR 37
18421: PUSH
18422: LD_VAR 0 17
18426: PUSH
18427: LD_INT 1
18429: PPUSH
18430: LD_VAR 0 17
18434: PPUSH
18435: CALL_OW 12
18439: ARRAY
18440: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
18441: LD_VAR 0 8
18445: PUSH
18446: LD_VAR 0 14
18450: ARRAY
18451: PUSH
18452: LD_INT 46
18454: EQUAL
18455: PUSH
18456: LD_VAR 0 8
18460: PUSH
18461: LD_VAR 0 14
18465: ARRAY
18466: PUSH
18467: LD_INT 47
18469: EQUAL
18470: OR
18471: IFFALSE 18512
// begin ruChassisTab = [ 23 , 24 ] ;
18473: LD_ADDR_VAR 0 17
18477: PUSH
18478: LD_INT 23
18480: PUSH
18481: LD_INT 24
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18488: LD_ADDR_OWVAR 37
18492: PUSH
18493: LD_VAR 0 17
18497: PUSH
18498: LD_INT 1
18500: PPUSH
18501: LD_VAR 0 17
18505: PPUSH
18506: CALL_OW 12
18510: ARRAY
18511: ST_TO_ADDR
// end ; end ;
18512: GO 18311
18514: POP
18515: POP
// veh = CreateVehicle ;
18516: LD_ADDR_VAR 0 16
18520: PUSH
18521: CALL_OW 45
18525: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18526: LD_VAR 0 16
18530: PPUSH
18531: LD_VAR 0 1
18535: PPUSH
18536: LD_INT 0
18538: PPUSH
18539: CALL_OW 49
// if vc_control = 1 then
18543: LD_OWVAR 38
18547: PUSH
18548: LD_INT 1
18550: EQUAL
18551: IFFALSE 18608
// begin hc_gallery =  ;
18553: LD_ADDR_OWVAR 33
18557: PUSH
18558: LD_STRING 
18560: ST_TO_ADDR
// hc_name =  ;
18561: LD_ADDR_OWVAR 26
18565: PUSH
18566: LD_STRING 
18568: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18569: LD_INT 0
18571: PPUSH
18572: LD_INT 3
18574: PPUSH
18575: LD_VAR 0 4
18579: PPUSH
18580: CALL_OW 380
// un = CreateHuman ;
18584: LD_ADDR_VAR 0 15
18588: PUSH
18589: CALL_OW 44
18593: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18594: LD_VAR 0 15
18598: PPUSH
18599: LD_VAR 0 16
18603: PPUSH
18604: CALL_OW 52
// end ; i = i + 1 ;
18608: LD_ADDR_VAR 0 13
18612: PUSH
18613: LD_VAR 0 13
18617: PUSH
18618: LD_INT 1
18620: PLUS
18621: ST_TO_ADDR
// end ; until i = vehCount ;
18622: LD_VAR 0 13
18626: PUSH
18627: LD_VAR 0 3
18631: EQUAL
18632: IFFALSE 17258
// repeat wait ( 0 0$1 ) ;
18634: LD_INT 35
18636: PPUSH
18637: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
18641: LD_ADDR_VAR 0 20
18645: PUSH
18646: LD_INT 22
18648: PUSH
18649: LD_VAR 0 2
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: PUSH
18658: LD_INT 21
18660: PUSH
18661: LD_INT 2
18663: PUSH
18664: EMPTY
18665: LIST
18666: LIST
18667: PUSH
18668: LD_INT 24
18670: PUSH
18671: LD_INT 650
18673: PUSH
18674: EMPTY
18675: LIST
18676: LIST
18677: PUSH
18678: EMPTY
18679: LIST
18680: LIST
18681: LIST
18682: PPUSH
18683: CALL_OW 69
18687: ST_TO_ADDR
// if vehicleOK_list > 0 then
18688: LD_VAR 0 20
18692: PUSH
18693: LD_INT 0
18695: GREATER
18696: IFFALSE 18887
// begin for i in vehicleOK_list do
18698: LD_ADDR_VAR 0 13
18702: PUSH
18703: LD_VAR 0 20
18707: PUSH
18708: FOR_IN
18709: IFFALSE 18885
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18711: LD_ADDR_VAR 0 21
18715: PUSH
18716: LD_INT 22
18718: PUSH
18719: LD_VAR 0 11
18723: PUSH
18724: EMPTY
18725: LIST
18726: LIST
18727: PPUSH
18728: CALL_OW 69
18732: PPUSH
18733: LD_VAR 0 13
18737: PPUSH
18738: CALL_OW 74
18742: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18743: LD_ADDR_VAR 0 22
18747: PUSH
18748: LD_INT 22
18750: PUSH
18751: LD_VAR 0 11
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 2
18762: PUSH
18763: LD_INT 59
18765: PUSH
18766: EMPTY
18767: LIST
18768: PUSH
18769: LD_INT 21
18771: PUSH
18772: LD_INT 1
18774: PUSH
18775: EMPTY
18776: LIST
18777: LIST
18778: PUSH
18779: LD_INT 21
18781: PUSH
18782: LD_INT 2
18784: PUSH
18785: EMPTY
18786: LIST
18787: LIST
18788: PUSH
18789: EMPTY
18790: LIST
18791: LIST
18792: LIST
18793: LIST
18794: PUSH
18795: EMPTY
18796: LIST
18797: LIST
18798: PUSH
18799: EMPTY
18800: LIST
18801: PPUSH
18802: CALL_OW 69
18806: PPUSH
18807: LD_VAR 0 13
18811: PPUSH
18812: CALL_OW 74
18816: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18817: LD_VAR 0 13
18821: PPUSH
18822: LD_VAR 0 21
18826: PPUSH
18827: CALL_OW 296
18831: PUSH
18832: LD_INT 8
18834: PLUS
18835: PUSH
18836: LD_VAR 0 13
18840: PPUSH
18841: LD_VAR 0 22
18845: PPUSH
18846: CALL_OW 296
18850: LESS
18851: IFFALSE 18869
// begin ComAttackUnit ( i , target1 ) ;
18853: LD_VAR 0 13
18857: PPUSH
18858: LD_VAR 0 21
18862: PPUSH
18863: CALL_OW 115
// end else
18867: GO 18883
// begin ComAttackUnit ( i , target2 ) ;
18869: LD_VAR 0 13
18873: PPUSH
18874: LD_VAR 0 22
18878: PPUSH
18879: CALL_OW 115
// end ; end ;
18883: GO 18708
18885: POP
18886: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
18887: LD_INT 22
18889: PUSH
18890: LD_VAR 0 2
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: PUSH
18899: LD_INT 21
18901: PUSH
18902: LD_INT 2
18904: PUSH
18905: EMPTY
18906: LIST
18907: LIST
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PPUSH
18913: CALL_OW 69
18917: PUSH
18918: LD_INT 0
18920: EQUAL
18921: IFFALSE 18634
// end ;
18923: LD_VAR 0 12
18927: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
18928: LD_INT 0
18930: PPUSH
18931: PPUSH
18932: PPUSH
18933: PPUSH
18934: PPUSH
18935: PPUSH
18936: PPUSH
18937: PPUSH
18938: PPUSH
18939: PPUSH
18940: PPUSH
// for i = 1 to soldierCount do
18941: LD_ADDR_VAR 0 13
18945: PUSH
18946: DOUBLE
18947: LD_INT 1
18949: DEC
18950: ST_TO_ADDR
18951: LD_VAR 0 3
18955: PUSH
18956: FOR_TO
18957: IFFALSE 19039
// begin uc_side = side ;
18959: LD_ADDR_OWVAR 20
18963: PUSH
18964: LD_VAR 0 1
18968: ST_TO_ADDR
// uc_nation = nation ;
18969: LD_ADDR_OWVAR 21
18973: PUSH
18974: LD_VAR 0 2
18978: ST_TO_ADDR
// hc_name =  ;
18979: LD_ADDR_OWVAR 26
18983: PUSH
18984: LD_STRING 
18986: ST_TO_ADDR
// hc_gallery =  ;
18987: LD_ADDR_OWVAR 33
18991: PUSH
18992: LD_STRING 
18994: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
18995: LD_INT 0
18997: PPUSH
18998: LD_INT 1
19000: PPUSH
19001: LD_VAR 0 8
19005: PPUSH
19006: CALL_OW 380
// un = CreateHuman ;
19010: LD_ADDR_VAR 0 15
19014: PUSH
19015: CALL_OW 44
19019: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19020: LD_VAR 0 15
19024: PPUSH
19025: LD_VAR 0 9
19029: PPUSH
19030: LD_INT 0
19032: PPUSH
19033: CALL_OW 49
// end ;
19037: GO 18956
19039: POP
19040: POP
// for i = 1 to sniperCount do
19041: LD_ADDR_VAR 0 13
19045: PUSH
19046: DOUBLE
19047: LD_INT 1
19049: DEC
19050: ST_TO_ADDR
19051: LD_VAR 0 4
19055: PUSH
19056: FOR_TO
19057: IFFALSE 19139
// begin uc_side = side ;
19059: LD_ADDR_OWVAR 20
19063: PUSH
19064: LD_VAR 0 1
19068: ST_TO_ADDR
// uc_nation = nation ;
19069: LD_ADDR_OWVAR 21
19073: PUSH
19074: LD_VAR 0 2
19078: ST_TO_ADDR
// hc_name =  ;
19079: LD_ADDR_OWVAR 26
19083: PUSH
19084: LD_STRING 
19086: ST_TO_ADDR
// hc_gallery =  ;
19087: LD_ADDR_OWVAR 33
19091: PUSH
19092: LD_STRING 
19094: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
19095: LD_INT 0
19097: PPUSH
19098: LD_INT 5
19100: PPUSH
19101: LD_VAR 0 8
19105: PPUSH
19106: CALL_OW 380
// un = CreateHuman ;
19110: LD_ADDR_VAR 0 15
19114: PUSH
19115: CALL_OW 44
19119: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19120: LD_VAR 0 15
19124: PPUSH
19125: LD_VAR 0 9
19129: PPUSH
19130: LD_INT 0
19132: PPUSH
19133: CALL_OW 49
// end ;
19137: GO 19056
19139: POP
19140: POP
// for i = 1 to bazookCount do
19141: LD_ADDR_VAR 0 13
19145: PUSH
19146: DOUBLE
19147: LD_INT 1
19149: DEC
19150: ST_TO_ADDR
19151: LD_VAR 0 5
19155: PUSH
19156: FOR_TO
19157: IFFALSE 19239
// begin uc_side = side ;
19159: LD_ADDR_OWVAR 20
19163: PUSH
19164: LD_VAR 0 1
19168: ST_TO_ADDR
// uc_nation = nation ;
19169: LD_ADDR_OWVAR 21
19173: PUSH
19174: LD_VAR 0 2
19178: ST_TO_ADDR
// hc_name =  ;
19179: LD_ADDR_OWVAR 26
19183: PUSH
19184: LD_STRING 
19186: ST_TO_ADDR
// hc_gallery =  ;
19187: LD_ADDR_OWVAR 33
19191: PUSH
19192: LD_STRING 
19194: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
19195: LD_INT 0
19197: PPUSH
19198: LD_INT 9
19200: PPUSH
19201: LD_VAR 0 8
19205: PPUSH
19206: CALL_OW 380
// un = CreateHuman ;
19210: LD_ADDR_VAR 0 15
19214: PUSH
19215: CALL_OW 44
19219: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19220: LD_VAR 0 15
19224: PPUSH
19225: LD_VAR 0 9
19229: PPUSH
19230: LD_INT 0
19232: PPUSH
19233: CALL_OW 49
// end ;
19237: GO 19156
19239: POP
19240: POP
// for i = 1 to mortalCount do
19241: LD_ADDR_VAR 0 13
19245: PUSH
19246: DOUBLE
19247: LD_INT 1
19249: DEC
19250: ST_TO_ADDR
19251: LD_VAR 0 6
19255: PUSH
19256: FOR_TO
19257: IFFALSE 19339
// begin uc_side = side ;
19259: LD_ADDR_OWVAR 20
19263: PUSH
19264: LD_VAR 0 1
19268: ST_TO_ADDR
// uc_nation = nation ;
19269: LD_ADDR_OWVAR 21
19273: PUSH
19274: LD_VAR 0 2
19278: ST_TO_ADDR
// hc_name =  ;
19279: LD_ADDR_OWVAR 26
19283: PUSH
19284: LD_STRING 
19286: ST_TO_ADDR
// hc_gallery =  ;
19287: LD_ADDR_OWVAR 33
19291: PUSH
19292: LD_STRING 
19294: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
19295: LD_INT 0
19297: PPUSH
19298: LD_INT 8
19300: PPUSH
19301: LD_VAR 0 8
19305: PPUSH
19306: CALL_OW 380
// un = CreateHuman ;
19310: LD_ADDR_VAR 0 15
19314: PUSH
19315: CALL_OW 44
19319: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19320: LD_VAR 0 15
19324: PPUSH
19325: LD_VAR 0 9
19329: PPUSH
19330: LD_INT 0
19332: PPUSH
19333: CALL_OW 49
// end ;
19337: GO 19256
19339: POP
19340: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
19341: LD_ADDR_VAR 0 18
19345: PUSH
19346: LD_INT 22
19348: PUSH
19349: LD_VAR 0 1
19353: PUSH
19354: EMPTY
19355: LIST
19356: LIST
19357: PUSH
19358: LD_INT 2
19360: PUSH
19361: LD_INT 25
19363: PUSH
19364: LD_INT 1
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PUSH
19371: LD_INT 25
19373: PUSH
19374: LD_INT 5
19376: PUSH
19377: EMPTY
19378: LIST
19379: LIST
19380: PUSH
19381: LD_INT 25
19383: PUSH
19384: LD_INT 8
19386: PUSH
19387: EMPTY
19388: LIST
19389: LIST
19390: PUSH
19391: LD_INT 25
19393: PUSH
19394: LD_INT 9
19396: PUSH
19397: EMPTY
19398: LIST
19399: LIST
19400: PUSH
19401: EMPTY
19402: LIST
19403: LIST
19404: LIST
19405: LIST
19406: LIST
19407: PUSH
19408: EMPTY
19409: LIST
19410: LIST
19411: PPUSH
19412: CALL_OW 69
19416: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
19417: LD_ADDR_VAR 0 17
19421: PUSH
19422: LD_INT 22
19424: PUSH
19425: LD_VAR 0 1
19429: PUSH
19430: EMPTY
19431: LIST
19432: LIST
19433: PUSH
19434: LD_INT 25
19436: PUSH
19437: LD_INT 4
19439: PUSH
19440: EMPTY
19441: LIST
19442: LIST
19443: PUSH
19444: EMPTY
19445: LIST
19446: LIST
19447: PPUSH
19448: CALL_OW 69
19452: ST_TO_ADDR
// for i in medic_list do
19453: LD_ADDR_VAR 0 13
19457: PUSH
19458: LD_VAR 0 17
19462: PUSH
19463: FOR_IN
19464: IFFALSE 19482
// ComMoveToArea ( i , healArea ) ;
19466: LD_VAR 0 13
19470: PPUSH
19471: LD_VAR 0 10
19475: PPUSH
19476: CALL_OW 113
19480: GO 19463
19482: POP
19483: POP
// repeat wait ( 0 0$1 ) ;
19484: LD_INT 35
19486: PPUSH
19487: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
19491: LD_ADDR_VAR 0 16
19495: PUSH
19496: LD_INT 22
19498: PUSH
19499: LD_VAR 0 1
19503: PUSH
19504: EMPTY
19505: LIST
19506: LIST
19507: PUSH
19508: LD_INT 1
19510: PUSH
19511: LD_INT 3
19513: PUSH
19514: LD_INT 24
19516: PUSH
19517: LD_INT 550
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: PUSH
19528: LD_INT 24
19530: PUSH
19531: LD_INT 250
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: PUSH
19538: EMPTY
19539: LIST
19540: LIST
19541: LIST
19542: PUSH
19543: EMPTY
19544: LIST
19545: LIST
19546: PPUSH
19547: CALL_OW 69
19551: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
19552: LD_ADDR_VAR 0 18
19556: PUSH
19557: LD_INT 22
19559: PUSH
19560: LD_VAR 0 1
19564: PUSH
19565: EMPTY
19566: LIST
19567: LIST
19568: PUSH
19569: LD_INT 2
19571: PUSH
19572: LD_INT 25
19574: PUSH
19575: LD_INT 1
19577: PUSH
19578: EMPTY
19579: LIST
19580: LIST
19581: PUSH
19582: LD_INT 25
19584: PUSH
19585: LD_INT 5
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: PUSH
19592: LD_INT 25
19594: PUSH
19595: LD_INT 8
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: PUSH
19602: LD_INT 25
19604: PUSH
19605: LD_INT 9
19607: PUSH
19608: EMPTY
19609: LIST
19610: LIST
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: PUSH
19619: LD_INT 24
19621: PUSH
19622: LD_INT 1000
19624: PUSH
19625: EMPTY
19626: LIST
19627: LIST
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: LIST
19633: PPUSH
19634: CALL_OW 69
19638: ST_TO_ADDR
// if medicCount > 0 then
19639: LD_VAR 0 7
19643: PUSH
19644: LD_INT 0
19646: GREATER
19647: IFFALSE 19721
// begin if damageUnit_list > 0 then
19649: LD_VAR 0 16
19653: PUSH
19654: LD_INT 0
19656: GREATER
19657: IFFALSE 19721
// begin for i in damageUnit_list do
19659: LD_ADDR_VAR 0 13
19663: PUSH
19664: LD_VAR 0 16
19668: PUSH
19669: FOR_IN
19670: IFFALSE 19719
// begin ComMoveToArea ( i , healArea ) ;
19672: LD_VAR 0 13
19676: PPUSH
19677: LD_VAR 0 10
19681: PPUSH
19682: CALL_OW 113
// for j in medic_list do
19686: LD_ADDR_VAR 0 14
19690: PUSH
19691: LD_VAR 0 17
19695: PUSH
19696: FOR_IN
19697: IFFALSE 19715
// AddComHeal ( j , i ) ;
19699: LD_VAR 0 14
19703: PPUSH
19704: LD_VAR 0 13
19708: PPUSH
19709: CALL_OW 188
19713: GO 19696
19715: POP
19716: POP
// end ;
19717: GO 19669
19719: POP
19720: POP
// end ; end ; for i in soldiersOK_list do
19721: LD_ADDR_VAR 0 13
19725: PUSH
19726: LD_VAR 0 18
19730: PUSH
19731: FOR_IN
19732: IFFALSE 19908
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19734: LD_ADDR_VAR 0 21
19738: PUSH
19739: LD_INT 22
19741: PUSH
19742: LD_VAR 0 11
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PPUSH
19751: CALL_OW 69
19755: PPUSH
19756: LD_VAR 0 13
19760: PPUSH
19761: CALL_OW 74
19765: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19766: LD_ADDR_VAR 0 22
19770: PUSH
19771: LD_INT 22
19773: PUSH
19774: LD_VAR 0 11
19778: PUSH
19779: EMPTY
19780: LIST
19781: LIST
19782: PUSH
19783: LD_INT 2
19785: PUSH
19786: LD_INT 59
19788: PUSH
19789: EMPTY
19790: LIST
19791: PUSH
19792: LD_INT 21
19794: PUSH
19795: LD_INT 1
19797: PUSH
19798: EMPTY
19799: LIST
19800: LIST
19801: PUSH
19802: LD_INT 21
19804: PUSH
19805: LD_INT 2
19807: PUSH
19808: EMPTY
19809: LIST
19810: LIST
19811: PUSH
19812: EMPTY
19813: LIST
19814: LIST
19815: LIST
19816: LIST
19817: PUSH
19818: EMPTY
19819: LIST
19820: LIST
19821: PUSH
19822: EMPTY
19823: LIST
19824: PPUSH
19825: CALL_OW 69
19829: PPUSH
19830: LD_VAR 0 13
19834: PPUSH
19835: CALL_OW 74
19839: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19840: LD_VAR 0 13
19844: PPUSH
19845: LD_VAR 0 21
19849: PPUSH
19850: CALL_OW 296
19854: PUSH
19855: LD_INT 8
19857: PLUS
19858: PUSH
19859: LD_VAR 0 13
19863: PPUSH
19864: LD_VAR 0 22
19868: PPUSH
19869: CALL_OW 296
19873: LESS
19874: IFFALSE 19892
// begin ComAttackUnit ( i , target1 ) ;
19876: LD_VAR 0 13
19880: PPUSH
19881: LD_VAR 0 21
19885: PPUSH
19886: CALL_OW 115
// end else
19890: GO 19906
// begin ComAttackUnit ( i , target2 ) ;
19892: LD_VAR 0 13
19896: PPUSH
19897: LD_VAR 0 22
19901: PPUSH
19902: CALL_OW 115
// end ; end ;
19906: GO 19731
19908: POP
19909: POP
// for i in soldiersOK_list do
19910: LD_ADDR_VAR 0 13
19914: PUSH
19915: LD_VAR 0 18
19919: PUSH
19920: FOR_IN
19921: IFFALSE 20097
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19923: LD_ADDR_VAR 0 21
19927: PUSH
19928: LD_INT 22
19930: PUSH
19931: LD_VAR 0 11
19935: PUSH
19936: EMPTY
19937: LIST
19938: LIST
19939: PPUSH
19940: CALL_OW 69
19944: PPUSH
19945: LD_VAR 0 13
19949: PPUSH
19950: CALL_OW 74
19954: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19955: LD_ADDR_VAR 0 22
19959: PUSH
19960: LD_INT 22
19962: PUSH
19963: LD_VAR 0 11
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: LD_INT 2
19974: PUSH
19975: LD_INT 59
19977: PUSH
19978: EMPTY
19979: LIST
19980: PUSH
19981: LD_INT 21
19983: PUSH
19984: LD_INT 1
19986: PUSH
19987: EMPTY
19988: LIST
19989: LIST
19990: PUSH
19991: LD_INT 21
19993: PUSH
19994: LD_INT 2
19996: PUSH
19997: EMPTY
19998: LIST
19999: LIST
20000: PUSH
20001: EMPTY
20002: LIST
20003: LIST
20004: LIST
20005: LIST
20006: PUSH
20007: EMPTY
20008: LIST
20009: LIST
20010: PUSH
20011: EMPTY
20012: LIST
20013: PPUSH
20014: CALL_OW 69
20018: PPUSH
20019: LD_VAR 0 13
20023: PPUSH
20024: CALL_OW 74
20028: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20029: LD_VAR 0 13
20033: PPUSH
20034: LD_VAR 0 21
20038: PPUSH
20039: CALL_OW 296
20043: PUSH
20044: LD_INT 8
20046: PLUS
20047: PUSH
20048: LD_VAR 0 13
20052: PPUSH
20053: LD_VAR 0 22
20057: PPUSH
20058: CALL_OW 296
20062: LESS
20063: IFFALSE 20081
// begin ComAttackUnit ( i , target1 ) ;
20065: LD_VAR 0 13
20069: PPUSH
20070: LD_VAR 0 21
20074: PPUSH
20075: CALL_OW 115
// end else
20079: GO 20095
// begin ComAttackUnit ( i , target2 ) ;
20081: LD_VAR 0 13
20085: PPUSH
20086: LD_VAR 0 22
20090: PPUSH
20091: CALL_OW 115
// end ; end ;
20095: GO 19920
20097: POP
20098: POP
// until soldiersOK_list = [ ] ;
20099: LD_VAR 0 18
20103: PUSH
20104: EMPTY
20105: EQUAL
20106: IFFALSE 19484
// end ;
20108: LD_VAR 0 12
20112: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
20113: LD_INT 0
20115: PPUSH
20116: PPUSH
20117: PPUSH
20118: PPUSH
20119: PPUSH
20120: PPUSH
20121: PPUSH
// repeat wait ( 0 0$1 ) ;
20122: LD_INT 35
20124: PPUSH
20125: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
20129: LD_ADDR_VAR 0 7
20133: PUSH
20134: LD_INT 22
20136: PUSH
20137: LD_INT 2
20139: PUSH
20140: EMPTY
20141: LIST
20142: LIST
20143: PUSH
20144: LD_INT 25
20146: PUSH
20147: LD_INT 4
20149: PUSH
20150: EMPTY
20151: LIST
20152: LIST
20153: PUSH
20154: LD_INT 3
20156: PUSH
20157: LD_INT 60
20159: PUSH
20160: EMPTY
20161: LIST
20162: PUSH
20163: EMPTY
20164: LIST
20165: LIST
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: LIST
20171: PPUSH
20172: CALL_OW 69
20176: ST_TO_ADDR
// if not tmp then
20177: LD_VAR 0 7
20181: NOT
20182: IFFALSE 20186
// continue ;
20184: GO 20122
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20186: LD_ADDR_VAR 0 3
20190: PUSH
20191: LD_INT 5
20193: PPUSH
20194: LD_INT 22
20196: PUSH
20197: LD_INT 0
20199: PUSH
20200: EMPTY
20201: LIST
20202: LIST
20203: PUSH
20204: LD_INT 25
20206: PUSH
20207: LD_INT 12
20209: PUSH
20210: EMPTY
20211: LIST
20212: LIST
20213: PUSH
20214: EMPTY
20215: LIST
20216: LIST
20217: PPUSH
20218: CALL_OW 70
20222: PUSH
20223: FOR_IN
20224: IFFALSE 20257
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
20226: LD_VAR 0 7
20230: PPUSH
20231: LD_VAR 0 3
20235: PPUSH
20236: CALL_OW 250
20240: PPUSH
20241: LD_VAR 0 3
20245: PPUSH
20246: CALL_OW 251
20250: PPUSH
20251: CALL_OW 131
20255: GO 20223
20257: POP
20258: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
20259: LD_INT 22
20261: PUSH
20262: LD_INT 2
20264: PUSH
20265: EMPTY
20266: LIST
20267: LIST
20268: PUSH
20269: LD_INT 25
20271: PUSH
20272: LD_INT 4
20274: PUSH
20275: EMPTY
20276: LIST
20277: LIST
20278: PUSH
20279: EMPTY
20280: LIST
20281: LIST
20282: PPUSH
20283: CALL_OW 69
20287: PUSH
20288: LD_INT 0
20290: EQUAL
20291: PUSH
20292: LD_INT 5
20294: PPUSH
20295: LD_INT 22
20297: PUSH
20298: LD_INT 0
20300: PUSH
20301: EMPTY
20302: LIST
20303: LIST
20304: PUSH
20305: LD_INT 25
20307: PUSH
20308: LD_INT 12
20310: PUSH
20311: EMPTY
20312: LIST
20313: LIST
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PPUSH
20319: CALL_OW 70
20323: PUSH
20324: LD_INT 2
20326: LESS
20327: OR
20328: PUSH
20329: LD_OWVAR 1
20333: PUSH
20334: LD_INT 7000
20336: GREATEREQUAL
20337: OR
20338: IFFALSE 20122
// repeat wait ( 0 0$1 ) ;
20340: LD_INT 35
20342: PPUSH
20343: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
20347: LD_ADDR_VAR 0 5
20351: PUSH
20352: LD_INT 22
20354: PUSH
20355: LD_INT 2
20357: PUSH
20358: EMPTY
20359: LIST
20360: LIST
20361: PUSH
20362: LD_INT 30
20364: PUSH
20365: LD_INT 5
20367: PUSH
20368: EMPTY
20369: LIST
20370: LIST
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: PPUSH
20376: CALL_OW 69
20380: ST_TO_ADDR
// until arm ;
20381: LD_VAR 0 5
20385: IFFALSE 20340
// wait ( 0 0$25 ) ;
20387: LD_INT 875
20389: PPUSH
20390: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20394: LD_ADDR_VAR 0 6
20398: PUSH
20399: LD_INT 22
20401: PUSH
20402: LD_INT 2
20404: PUSH
20405: EMPTY
20406: LIST
20407: LIST
20408: PUSH
20409: LD_INT 2
20411: PUSH
20412: LD_INT 30
20414: PUSH
20415: LD_INT 0
20417: PUSH
20418: EMPTY
20419: LIST
20420: LIST
20421: PUSH
20422: LD_INT 30
20424: PUSH
20425: LD_INT 1
20427: PUSH
20428: EMPTY
20429: LIST
20430: LIST
20431: PUSH
20432: EMPTY
20433: LIST
20434: LIST
20435: LIST
20436: PUSH
20437: EMPTY
20438: LIST
20439: LIST
20440: PPUSH
20441: CALL_OW 69
20445: ST_TO_ADDR
// j := 0 ;
20446: LD_ADDR_VAR 0 3
20450: PUSH
20451: LD_INT 0
20453: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
20454: LD_ADDR_VAR 0 2
20458: PUSH
20459: LD_INT 22
20461: PUSH
20462: LD_INT 2
20464: PUSH
20465: EMPTY
20466: LIST
20467: LIST
20468: PUSH
20469: LD_INT 25
20471: PUSH
20472: LD_INT 12
20474: PUSH
20475: EMPTY
20476: LIST
20477: LIST
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PPUSH
20483: CALL_OW 69
20487: PUSH
20488: FOR_IN
20489: IFFALSE 20576
// begin ComMoveXY ( i , 63 , 16 ) ;
20491: LD_VAR 0 2
20495: PPUSH
20496: LD_INT 63
20498: PPUSH
20499: LD_INT 16
20501: PPUSH
20502: CALL_OW 111
// j := j + 1 ;
20506: LD_ADDR_VAR 0 3
20510: PUSH
20511: LD_VAR 0 3
20515: PUSH
20516: LD_INT 1
20518: PLUS
20519: ST_TO_ADDR
// if j < 5 then
20520: LD_VAR 0 3
20524: PUSH
20525: LD_INT 5
20527: LESS
20528: IFFALSE 20546
// b := arm [ 1 ] else
20530: LD_ADDR_VAR 0 4
20534: PUSH
20535: LD_VAR 0 5
20539: PUSH
20540: LD_INT 1
20542: ARRAY
20543: ST_TO_ADDR
20544: GO 20560
// b := dep [ 1 ] ;
20546: LD_ADDR_VAR 0 4
20550: PUSH
20551: LD_VAR 0 6
20555: PUSH
20556: LD_INT 1
20558: ARRAY
20559: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
20560: LD_VAR 0 2
20564: PPUSH
20565: LD_VAR 0 4
20569: PPUSH
20570: CALL_OW 180
// end ;
20574: GO 20488
20576: POP
20577: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
20578: LD_ADDR_VAR 0 2
20582: PUSH
20583: LD_INT 22
20585: PUSH
20586: LD_INT 2
20588: PUSH
20589: EMPTY
20590: LIST
20591: LIST
20592: PUSH
20593: LD_INT 25
20595: PUSH
20596: LD_INT 4
20598: PUSH
20599: EMPTY
20600: LIST
20601: LIST
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: PPUSH
20607: CALL_OW 69
20611: PUSH
20612: FOR_IN
20613: IFFALSE 20659
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20615: LD_VAR 0 2
20619: PPUSH
20620: LD_INT 22
20622: PUSH
20623: LD_INT 2
20625: PUSH
20626: EMPTY
20627: LIST
20628: LIST
20629: PUSH
20630: LD_INT 30
20632: PUSH
20633: LD_INT 8
20635: PUSH
20636: EMPTY
20637: LIST
20638: LIST
20639: PUSH
20640: EMPTY
20641: LIST
20642: LIST
20643: PPUSH
20644: CALL_OW 69
20648: PUSH
20649: LD_INT 1
20651: ARRAY
20652: PPUSH
20653: CALL_OW 120
20657: GO 20612
20659: POP
20660: POP
// end ;
20661: LD_VAR 0 1
20665: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
20666: LD_INT 0
20668: PPUSH
20669: PPUSH
20670: PPUSH
20671: PPUSH
20672: PPUSH
20673: PPUSH
20674: PPUSH
20675: PPUSH
20676: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
20677: LD_INT 22
20679: PUSH
20680: LD_VAR 0 1
20684: PUSH
20685: EMPTY
20686: LIST
20687: LIST
20688: PUSH
20689: LD_INT 21
20691: PUSH
20692: LD_INT 2
20694: PUSH
20695: EMPTY
20696: LIST
20697: LIST
20698: PUSH
20699: EMPTY
20700: LIST
20701: LIST
20702: PPUSH
20703: CALL_OW 69
20707: PUSH
20708: LD_VAR 0 3
20712: LESSEQUAL
20713: IFFALSE 20857
// for i = 1 to vehCount do
20715: LD_ADDR_VAR 0 10
20719: PUSH
20720: DOUBLE
20721: LD_INT 1
20723: DEC
20724: ST_TO_ADDR
20725: LD_VAR 0 3
20729: PUSH
20730: FOR_TO
20731: IFFALSE 20855
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
20733: LD_ADDR_VAR 0 12
20737: PUSH
20738: LD_VAR 0 5
20742: PUSH
20743: LD_INT 1
20745: PPUSH
20746: LD_VAR 0 5
20750: PPUSH
20751: CALL_OW 12
20755: ARRAY
20756: ST_TO_ADDR
// if randWeapon = 46 then
20757: LD_VAR 0 12
20761: PUSH
20762: LD_INT 46
20764: EQUAL
20765: IFFALSE 20810
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
20767: LD_VAR 0 2
20771: PPUSH
20772: LD_INT 24
20774: PPUSH
20775: LD_VAR 0 6
20779: PPUSH
20780: LD_VAR 0 7
20784: PUSH
20785: LD_INT 1
20787: PPUSH
20788: LD_VAR 0 7
20792: PPUSH
20793: CALL_OW 12
20797: ARRAY
20798: PPUSH
20799: LD_VAR 0 12
20803: PPUSH
20804: CALL_OW 185
20808: GO 20853
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
20810: LD_VAR 0 2
20814: PPUSH
20815: LD_VAR 0 8
20819: PPUSH
20820: LD_VAR 0 6
20824: PPUSH
20825: LD_VAR 0 7
20829: PUSH
20830: LD_INT 1
20832: PPUSH
20833: LD_VAR 0 7
20837: PPUSH
20838: CALL_OW 12
20842: ARRAY
20843: PPUSH
20844: LD_VAR 0 12
20848: PPUSH
20849: CALL_OW 185
// end ;
20853: GO 20730
20855: POP
20856: POP
// repeat wait ( 0 0$1 ) ;
20857: LD_INT 35
20859: PPUSH
20860: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
20864: LD_INT 22
20866: PUSH
20867: LD_VAR 0 1
20871: PUSH
20872: EMPTY
20873: LIST
20874: LIST
20875: PUSH
20876: LD_INT 21
20878: PUSH
20879: LD_INT 2
20881: PUSH
20882: EMPTY
20883: LIST
20884: LIST
20885: PUSH
20886: LD_INT 24
20888: PUSH
20889: LD_INT 250
20891: PUSH
20892: EMPTY
20893: LIST
20894: LIST
20895: PUSH
20896: EMPTY
20897: LIST
20898: LIST
20899: LIST
20900: PPUSH
20901: CALL_OW 69
20905: PUSH
20906: LD_VAR 0 3
20910: GREATEREQUAL
20911: IFFALSE 20857
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
20913: LD_INT 22
20915: PUSH
20916: LD_VAR 0 1
20920: PUSH
20921: EMPTY
20922: LIST
20923: LIST
20924: PUSH
20925: LD_INT 21
20927: PUSH
20928: LD_INT 2
20930: PUSH
20931: EMPTY
20932: LIST
20933: LIST
20934: PUSH
20935: LD_INT 24
20937: PUSH
20938: LD_INT 250
20940: PUSH
20941: EMPTY
20942: LIST
20943: LIST
20944: PUSH
20945: EMPTY
20946: LIST
20947: LIST
20948: LIST
20949: PPUSH
20950: CALL_OW 69
20954: PUSH
20955: LD_VAR 0 3
20959: GREATEREQUAL
20960: IFFALSE 21303
// begin repeat begin wait ( 0 0$1 ) ;
20962: LD_INT 35
20964: PPUSH
20965: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
20969: LD_INT 22
20971: PUSH
20972: LD_VAR 0 1
20976: PUSH
20977: EMPTY
20978: LIST
20979: LIST
20980: PUSH
20981: LD_INT 21
20983: PUSH
20984: LD_INT 2
20986: PUSH
20987: EMPTY
20988: LIST
20989: LIST
20990: PUSH
20991: LD_INT 24
20993: PUSH
20994: LD_INT 651
20996: PUSH
20997: EMPTY
20998: LIST
20999: LIST
21000: PUSH
21001: EMPTY
21002: LIST
21003: LIST
21004: LIST
21005: PPUSH
21006: CALL_OW 69
21010: PUSH
21011: LD_INT 0
21013: GREATER
21014: IFFALSE 21242
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
21016: LD_ADDR_VAR 0 10
21020: PUSH
21021: LD_INT 22
21023: PUSH
21024: LD_VAR 0 1
21028: PUSH
21029: EMPTY
21030: LIST
21031: LIST
21032: PUSH
21033: LD_INT 21
21035: PUSH
21036: LD_INT 2
21038: PUSH
21039: EMPTY
21040: LIST
21041: LIST
21042: PUSH
21043: LD_INT 24
21045: PUSH
21046: LD_INT 651
21048: PUSH
21049: EMPTY
21050: LIST
21051: LIST
21052: PUSH
21053: EMPTY
21054: LIST
21055: LIST
21056: LIST
21057: PPUSH
21058: CALL_OW 69
21062: PUSH
21063: FOR_IN
21064: IFFALSE 21240
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
21066: LD_ADDR_VAR 0 16
21070: PUSH
21071: LD_INT 22
21073: PUSH
21074: LD_VAR 0 4
21078: PUSH
21079: EMPTY
21080: LIST
21081: LIST
21082: PPUSH
21083: CALL_OW 69
21087: PPUSH
21088: LD_VAR 0 10
21092: PPUSH
21093: CALL_OW 74
21097: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
21098: LD_ADDR_VAR 0 17
21102: PUSH
21103: LD_INT 22
21105: PUSH
21106: LD_VAR 0 4
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PUSH
21115: LD_INT 2
21117: PUSH
21118: LD_INT 59
21120: PUSH
21121: EMPTY
21122: LIST
21123: PUSH
21124: LD_INT 21
21126: PUSH
21127: LD_INT 1
21129: PUSH
21130: EMPTY
21131: LIST
21132: LIST
21133: PUSH
21134: LD_INT 21
21136: PUSH
21137: LD_INT 2
21139: PUSH
21140: EMPTY
21141: LIST
21142: LIST
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: LIST
21148: LIST
21149: PUSH
21150: EMPTY
21151: LIST
21152: LIST
21153: PUSH
21154: EMPTY
21155: LIST
21156: PPUSH
21157: CALL_OW 69
21161: PPUSH
21162: LD_VAR 0 10
21166: PPUSH
21167: CALL_OW 74
21171: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
21172: LD_VAR 0 10
21176: PPUSH
21177: LD_VAR 0 16
21181: PPUSH
21182: CALL_OW 296
21186: PUSH
21187: LD_INT 8
21189: PLUS
21190: PUSH
21191: LD_VAR 0 10
21195: PPUSH
21196: LD_VAR 0 17
21200: PPUSH
21201: CALL_OW 296
21205: LESS
21206: IFFALSE 21224
// begin ComAttackUnit ( i , target1 ) ;
21208: LD_VAR 0 10
21212: PPUSH
21213: LD_VAR 0 16
21217: PPUSH
21218: CALL_OW 115
// end else
21222: GO 21238
// begin ComAttackUnit ( i , target2 ) ;
21224: LD_VAR 0 10
21228: PPUSH
21229: LD_VAR 0 17
21233: PPUSH
21234: CALL_OW 115
// end ; end ;
21238: GO 21063
21240: POP
21241: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
21242: LD_INT 22
21244: PUSH
21245: LD_VAR 0 1
21249: PUSH
21250: EMPTY
21251: LIST
21252: LIST
21253: PUSH
21254: LD_INT 21
21256: PUSH
21257: LD_INT 2
21259: PUSH
21260: EMPTY
21261: LIST
21262: LIST
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PPUSH
21268: CALL_OW 69
21272: PUSH
21273: LD_INT 0
21275: EQUAL
21276: PUSH
21277: LD_INT 22
21279: PUSH
21280: LD_VAR 0 4
21284: PUSH
21285: EMPTY
21286: LIST
21287: LIST
21288: PUSH
21289: EMPTY
21290: LIST
21291: PPUSH
21292: CALL_OW 69
21296: PUSH
21297: LD_INT 0
21299: EQUAL
21300: OR
21301: IFFALSE 20962
// end ; end ;
21303: LD_VAR 0 9
21307: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
21308: LD_INT 0
21310: PPUSH
21311: PPUSH
21312: PPUSH
21313: PPUSH
// r := 100 ;
21314: LD_ADDR_VAR 0 5
21318: PUSH
21319: LD_INT 100
21321: ST_TO_ADDR
// x := 0 ;
21322: LD_ADDR_VAR 0 6
21326: PUSH
21327: LD_INT 0
21329: ST_TO_ADDR
// while ( x < n ) do
21330: LD_VAR 0 6
21334: PUSH
21335: LD_VAR 0 2
21339: LESS
21340: IFFALSE 21627
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
21342: LD_ADDR_VAR 0 4
21346: PUSH
21347: DOUBLE
21348: LD_INT 1
21350: DEC
21351: ST_TO_ADDR
21352: LD_VAR 0 1
21356: PPUSH
21357: LD_INT 0
21359: PPUSH
21360: CALL_OW 517
21364: PUSH
21365: LD_INT 1
21367: ARRAY
21368: PUSH
21369: FOR_TO
21370: IFFALSE 21623
// begin if r > 50 then
21372: LD_VAR 0 5
21376: PUSH
21377: LD_INT 50
21379: GREATER
21380: IFFALSE 21599
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
21382: LD_VAR 0 1
21386: PPUSH
21387: LD_INT 0
21389: PPUSH
21390: CALL_OW 517
21394: PUSH
21395: LD_INT 1
21397: ARRAY
21398: PUSH
21399: LD_VAR 0 4
21403: ARRAY
21404: PPUSH
21405: LD_VAR 0 1
21409: PPUSH
21410: LD_INT 0
21412: PPUSH
21413: CALL_OW 517
21417: PUSH
21418: LD_INT 2
21420: ARRAY
21421: PUSH
21422: LD_VAR 0 4
21426: ARRAY
21427: PPUSH
21428: CALL_OW 458
21432: NOT
21433: IFFALSE 21583
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
21435: LD_VAR 0 1
21439: PPUSH
21440: LD_INT 0
21442: PPUSH
21443: CALL_OW 517
21447: PUSH
21448: LD_INT 1
21450: ARRAY
21451: PUSH
21452: LD_VAR 0 4
21456: ARRAY
21457: PPUSH
21458: LD_VAR 0 1
21462: PPUSH
21463: LD_INT 0
21465: PPUSH
21466: CALL_OW 517
21470: PUSH
21471: LD_INT 2
21473: ARRAY
21474: PUSH
21475: LD_VAR 0 4
21479: ARRAY
21480: PPUSH
21481: LD_INT 5
21483: PPUSH
21484: LD_INT 0
21486: PPUSH
21487: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
21491: LD_ADDR_EXP 50
21495: PUSH
21496: LD_EXP 50
21500: PPUSH
21501: LD_INT 1
21503: PPUSH
21504: LD_VAR 0 1
21508: PPUSH
21509: LD_INT 0
21511: PPUSH
21512: CALL_OW 517
21516: PUSH
21517: LD_INT 1
21519: ARRAY
21520: PUSH
21521: LD_VAR 0 4
21525: ARRAY
21526: PUSH
21527: LD_VAR 0 1
21531: PPUSH
21532: LD_INT 0
21534: PPUSH
21535: CALL_OW 517
21539: PUSH
21540: LD_INT 2
21542: ARRAY
21543: PUSH
21544: LD_VAR 0 4
21548: ARRAY
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PPUSH
21554: CALL_OW 2
21558: ST_TO_ADDR
// r := 0 ;
21559: LD_ADDR_VAR 0 5
21563: PUSH
21564: LD_INT 0
21566: ST_TO_ADDR
// x := x + 1 ;
21567: LD_ADDR_VAR 0 6
21571: PUSH
21572: LD_VAR 0 6
21576: PUSH
21577: LD_INT 1
21579: PLUS
21580: ST_TO_ADDR
// end else
21581: GO 21597
// r := r + 35 ;
21583: LD_ADDR_VAR 0 5
21587: PUSH
21588: LD_VAR 0 5
21592: PUSH
21593: LD_INT 35
21595: PLUS
21596: ST_TO_ADDR
// end else
21597: GO 21621
// r := r + rand ( 10 , 25 ) ;
21599: LD_ADDR_VAR 0 5
21603: PUSH
21604: LD_VAR 0 5
21608: PUSH
21609: LD_INT 10
21611: PPUSH
21612: LD_INT 25
21614: PPUSH
21615: CALL_OW 12
21619: PLUS
21620: ST_TO_ADDR
// end ;
21621: GO 21369
21623: POP
21624: POP
21625: GO 21330
// end ; end_of_file
21627: LD_VAR 0 3
21631: RET
// every 0 0$1 trigger russianAI = 1 do
21632: LD_EXP 39
21636: PUSH
21637: LD_INT 1
21639: EQUAL
21640: IFFALSE 21859
21642: GO 21644
21644: DISABLE
// begin enable ;
21645: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
21646: LD_INT 3
21648: PPUSH
21649: LD_EXP 30
21653: PPUSH
21654: CALL 16110 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
21658: LD_INT 3
21660: PPUSH
21661: LD_EXP 42
21665: PPUSH
21666: CALL 16470 0 2
// if ruPossition = 1 then
21670: LD_EXP 41
21674: PUSH
21675: LD_INT 1
21677: EQUAL
21678: IFFALSE 21733
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21680: LD_INT 3
21682: PPUSH
21683: LD_INT 13
21685: PPUSH
21686: LD_INT 10
21688: PPUSH
21689: LD_INT 22
21691: PUSH
21692: LD_INT 3
21694: PUSH
21695: EMPTY
21696: LIST
21697: LIST
21698: PUSH
21699: LD_INT 21
21701: PUSH
21702: LD_INT 3
21704: PUSH
21705: EMPTY
21706: LIST
21707: LIST
21708: PUSH
21709: LD_INT 30
21711: PUSH
21712: LD_INT 8
21714: PUSH
21715: EMPTY
21716: LIST
21717: LIST
21718: PUSH
21719: EMPTY
21720: LIST
21721: LIST
21722: LIST
21723: PPUSH
21724: CALL_OW 69
21728: PPUSH
21729: CALL 16676 0 4
// if ruPossition = 2 then
21733: LD_EXP 41
21737: PUSH
21738: LD_INT 2
21740: EQUAL
21741: IFFALSE 21796
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21743: LD_INT 3
21745: PPUSH
21746: LD_INT 14
21748: PPUSH
21749: LD_INT 11
21751: PPUSH
21752: LD_INT 22
21754: PUSH
21755: LD_INT 3
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 21
21764: PUSH
21765: LD_INT 3
21767: PUSH
21768: EMPTY
21769: LIST
21770: LIST
21771: PUSH
21772: LD_INT 30
21774: PUSH
21775: LD_INT 8
21777: PUSH
21778: EMPTY
21779: LIST
21780: LIST
21781: PUSH
21782: EMPTY
21783: LIST
21784: LIST
21785: LIST
21786: PPUSH
21787: CALL_OW 69
21791: PPUSH
21792: CALL 16676 0 4
// if ruPossition = 3 then
21796: LD_EXP 41
21800: PUSH
21801: LD_INT 3
21803: EQUAL
21804: IFFALSE 21859
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21806: LD_INT 3
21808: PPUSH
21809: LD_INT 15
21811: PPUSH
21812: LD_INT 12
21814: PPUSH
21815: LD_INT 22
21817: PUSH
21818: LD_INT 3
21820: PUSH
21821: EMPTY
21822: LIST
21823: LIST
21824: PUSH
21825: LD_INT 21
21827: PUSH
21828: LD_INT 3
21830: PUSH
21831: EMPTY
21832: LIST
21833: LIST
21834: PUSH
21835: LD_INT 30
21837: PUSH
21838: LD_INT 8
21840: PUSH
21841: EMPTY
21842: LIST
21843: LIST
21844: PUSH
21845: EMPTY
21846: LIST
21847: LIST
21848: LIST
21849: PPUSH
21850: CALL_OW 69
21854: PPUSH
21855: CALL 16676 0 4
// end ;
21859: END
// every 0 0$1 do
21860: GO 21862
21862: DISABLE
// begin enable ;
21863: ENABLE
// if ruPossition = 1 then
21864: LD_EXP 41
21868: PUSH
21869: LD_INT 1
21871: EQUAL
21872: IFFALSE 21884
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
21874: LD_INT 3
21876: PPUSH
21877: LD_INT 10
21879: PPUSH
21880: CALL 15747 0 2
// if ruPossition = 2 then
21884: LD_EXP 41
21888: PUSH
21889: LD_INT 2
21891: EQUAL
21892: IFFALSE 21904
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
21894: LD_INT 3
21896: PPUSH
21897: LD_INT 11
21899: PPUSH
21900: CALL 15747 0 2
// if ruPossition = 3 then
21904: LD_EXP 41
21908: PUSH
21909: LD_INT 3
21911: EQUAL
21912: IFFALSE 21924
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
21914: LD_INT 3
21916: PPUSH
21917: LD_INT 12
21919: PPUSH
21920: CALL 15747 0 2
// IntBazooka ( 3 , 1 ) ;
21924: LD_INT 3
21926: PPUSH
21927: LD_INT 1
21929: PPUSH
21930: CALL 14546 0 2
// IntBazooka ( 6 , 1 ) ;
21934: LD_INT 6
21936: PPUSH
21937: LD_INT 1
21939: PPUSH
21940: CALL 14546 0 2
// end ;
21944: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
21945: LD_EXP 39
21949: PUSH
21950: LD_INT 1
21952: EQUAL
21953: PUSH
21954: LD_EXP 35
21958: PPUSH
21959: CALL_OW 302
21963: AND
21964: PUSH
21965: LD_EXP 35
21969: PPUSH
21970: CALL_OW 255
21974: PUSH
21975: LD_INT 3
21977: EQUAL
21978: AND
21979: PUSH
21980: LD_INT 22
21982: PUSH
21983: LD_INT 3
21985: PUSH
21986: EMPTY
21987: LIST
21988: LIST
21989: PUSH
21990: LD_INT 21
21992: PUSH
21993: LD_INT 2
21995: PUSH
21996: EMPTY
21997: LIST
21998: LIST
21999: PUSH
22000: LD_INT 33
22002: PUSH
22003: LD_INT 3
22005: PUSH
22006: EMPTY
22007: LIST
22008: LIST
22009: PUSH
22010: EMPTY
22011: LIST
22012: LIST
22013: LIST
22014: PPUSH
22015: CALL_OW 69
22019: PUSH
22020: LD_INT 0
22022: EQUAL
22023: AND
22024: IFFALSE 22232
22026: GO 22028
22028: DISABLE
// begin enable ;
22029: ENABLE
// if Difficulty = 1 then
22030: LD_OWVAR 67
22034: PUSH
22035: LD_INT 1
22037: EQUAL
22038: IFFALSE 22100
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22040: LD_INT 3
22042: PPUSH
22043: LD_EXP 35
22047: PPUSH
22048: LD_INT 5
22050: PPUSH
22051: LD_INT 8
22053: PPUSH
22054: CALL_OW 12
22058: PPUSH
22059: LD_INT 1
22061: PPUSH
22062: LD_INT 43
22064: PUSH
22065: LD_INT 44
22067: PUSH
22068: LD_INT 45
22070: PUSH
22071: LD_INT 46
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: PPUSH
22080: LD_INT 1
22082: PPUSH
22083: LD_INT 3
22085: PUSH
22086: LD_INT 3
22088: PUSH
22089: EMPTY
22090: LIST
22091: LIST
22092: PPUSH
22093: LD_INT 22
22095: PPUSH
22096: CALL 20666 0 8
// if Difficulty = 2 then
22100: LD_OWVAR 67
22104: PUSH
22105: LD_INT 2
22107: EQUAL
22108: IFFALSE 22166
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22110: LD_INT 3
22112: PPUSH
22113: LD_EXP 35
22117: PPUSH
22118: LD_INT 6
22120: PPUSH
22121: LD_INT 8
22123: PPUSH
22124: CALL_OW 12
22128: PPUSH
22129: LD_INT 1
22131: PPUSH
22132: LD_INT 44
22134: PUSH
22135: LD_INT 45
22137: PUSH
22138: LD_INT 46
22140: PUSH
22141: EMPTY
22142: LIST
22143: LIST
22144: LIST
22145: PPUSH
22146: LD_INT 1
22148: PPUSH
22149: LD_INT 3
22151: PUSH
22152: LD_INT 3
22154: PUSH
22155: EMPTY
22156: LIST
22157: LIST
22158: PPUSH
22159: LD_INT 22
22161: PPUSH
22162: CALL 20666 0 8
// if Difficulty >= 3 then
22166: LD_OWVAR 67
22170: PUSH
22171: LD_INT 3
22173: GREATEREQUAL
22174: IFFALSE 22232
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22176: LD_INT 3
22178: PPUSH
22179: LD_EXP 35
22183: PPUSH
22184: LD_INT 7
22186: PPUSH
22187: LD_INT 8
22189: PPUSH
22190: CALL_OW 12
22194: PPUSH
22195: LD_INT 1
22197: PPUSH
22198: LD_INT 44
22200: PUSH
22201: LD_INT 45
22203: PUSH
22204: LD_INT 46
22206: PUSH
22207: EMPTY
22208: LIST
22209: LIST
22210: LIST
22211: PPUSH
22212: LD_INT 1
22214: PPUSH
22215: LD_INT 3
22217: PUSH
22218: LD_INT 3
22220: PUSH
22221: EMPTY
22222: LIST
22223: LIST
22224: PPUSH
22225: LD_INT 22
22227: PPUSH
22228: CALL 20666 0 8
// end ;
22232: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
22233: LD_EXP 50
22237: PUSH
22238: LD_EXP 49
22242: AND
22243: IFFALSE 22364
22245: GO 22247
22247: DISABLE
22248: LD_INT 0
22250: PPUSH
// begin enable ;
22251: ENABLE
// for i in arabianMines do
22252: LD_ADDR_VAR 0 1
22256: PUSH
22257: LD_EXP 50
22261: PUSH
22262: FOR_IN
22263: IFFALSE 22362
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
22265: LD_INT 22
22267: PUSH
22268: LD_INT 1
22270: PUSH
22271: EMPTY
22272: LIST
22273: LIST
22274: PUSH
22275: LD_INT 92
22277: PUSH
22278: LD_VAR 0 1
22282: PUSH
22283: LD_INT 1
22285: ARRAY
22286: PUSH
22287: LD_VAR 0 1
22291: PUSH
22292: LD_INT 2
22294: ARRAY
22295: PUSH
22296: LD_INT 3
22298: PUSH
22299: EMPTY
22300: LIST
22301: LIST
22302: LIST
22303: LIST
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PPUSH
22309: CALL_OW 69
22313: IFFALSE 22360
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
22315: LD_VAR 0 1
22319: PUSH
22320: LD_INT 1
22322: ARRAY
22323: PPUSH
22324: LD_VAR 0 1
22328: PUSH
22329: LD_INT 2
22331: ARRAY
22332: PPUSH
22333: LD_INT 5
22335: PPUSH
22336: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
22340: LD_ADDR_EXP 50
22344: PUSH
22345: LD_EXP 50
22349: PPUSH
22350: LD_VAR 0 1
22354: PPUSH
22355: CALL_OW 3
22359: ST_TO_ADDR
// end ; end ;
22360: GO 22262
22362: POP
22363: POP
// end ; end_of_file
22364: PPOPN 1
22366: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
22367: LD_VAR 0 1
22371: PPUSH
22372: CALL_OW 255
22376: PUSH
22377: LD_INT 4
22379: EQUAL
22380: IFFALSE 22394
// SetBName ( building , epsilon ) ;
22382: LD_VAR 0 1
22386: PPUSH
22387: LD_STRING epsilon
22389: PPUSH
22390: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
22394: LD_VAR 0 1
22398: PPUSH
22399: CALL_OW 255
22403: PUSH
22404: LD_INT 1
22406: EQUAL
22407: PUSH
22408: LD_VAR 0 1
22412: PPUSH
22413: CALL_OW 266
22417: PUSH
22418: LD_INT 0
22420: EQUAL
22421: AND
22422: IFFALSE 22436
// SetBName ( building , epsilon ) ;
22424: LD_VAR 0 1
22428: PPUSH
22429: LD_STRING epsilon
22431: PPUSH
22432: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
22436: LD_VAR 0 1
22440: PPUSH
22441: CALL_OW 255
22445: PUSH
22446: LD_INT 3
22448: EQUAL
22449: PUSH
22450: LD_VAR 0 1
22454: PPUSH
22455: CALL_OW 266
22459: PUSH
22460: LD_INT 0
22462: EQUAL
22463: AND
22464: IFFALSE 22478
// SetBName ( building , chuikov ) ;
22466: LD_VAR 0 1
22470: PPUSH
22471: LD_STRING chuikov
22473: PPUSH
22474: CALL_OW 500
// if GetSide ( building ) = 2 then
22478: LD_VAR 0 1
22482: PPUSH
22483: CALL_OW 255
22487: PUSH
22488: LD_INT 2
22490: EQUAL
22491: IFFALSE 22547
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22493: LD_VAR 0 1
22497: PPUSH
22498: CALL_OW 266
22502: PUSH
22503: LD_INT 6
22505: EQUAL
22506: PUSH
22507: LD_VAR 0 1
22511: PPUSH
22512: CALL_OW 266
22516: PUSH
22517: LD_INT 9
22519: EQUAL
22520: OR
22521: IFFALSE 22547
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22523: LD_VAR 0 1
22527: PPUSH
22528: LD_INT 10
22530: PPUSH
22531: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22535: LD_VAR 0 1
22539: PPUSH
22540: LD_INT 11
22542: PPUSH
22543: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
22547: LD_VAR 0 1
22551: PPUSH
22552: CALL_OW 255
22556: PUSH
22557: LD_INT 3
22559: EQUAL
22560: IFFALSE 22594
// begin ruDepotConstructed := true ;
22562: LD_ADDR_EXP 57
22566: PUSH
22567: LD_INT 1
22569: ST_TO_ADDR
// if GetBType ( building ) = 2 then
22570: LD_VAR 0 1
22574: PPUSH
22575: CALL_OW 266
22579: PUSH
22580: LD_INT 2
22582: EQUAL
22583: IFFALSE 22594
// AddComUpgrade ( building ) ;
22585: LD_VAR 0 1
22589: PPUSH
22590: CALL_OW 206
// end ; end ;
22594: PPOPN 2
22596: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
22597: LD_INT 0
22599: PPUSH
22600: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
22601: LD_VAR 0 1
22605: PUSH
22606: LD_INT 22
22608: PUSH
22609: LD_INT 3
22611: PUSH
22612: EMPTY
22613: LIST
22614: LIST
22615: PUSH
22616: LD_INT 23
22618: PUSH
22619: LD_INT 3
22621: PUSH
22622: EMPTY
22623: LIST
22624: LIST
22625: PUSH
22626: LD_INT 21
22628: PUSH
22629: LD_INT 2
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: PUSH
22636: EMPTY
22637: LIST
22638: LIST
22639: LIST
22640: PPUSH
22641: CALL_OW 69
22645: IN
22646: PUSH
22647: LD_EXP 61
22651: NOT
22652: AND
22653: IFFALSE 22684
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
22655: LD_ADDR_EXP 61
22659: PUSH
22660: LD_VAR 0 1
22664: PPUSH
22665: CALL_OW 250
22669: PUSH
22670: LD_VAR 0 1
22674: PPUSH
22675: CALL_OW 251
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: ST_TO_ADDR
// end ;
22684: PPOPN 3
22686: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
22687: LD_VAR 0 2
22691: PPUSH
22692: CALL_OW 255
22696: PUSH
22697: LD_INT 3
22699: EQUAL
22700: PUSH
22701: LD_EXP 35
22705: PPUSH
22706: CALL_OW 255
22710: PUSH
22711: LD_INT 3
22713: EQUAL
22714: AND
22715: PUSH
22716: LD_EXP 35
22720: PPUSH
22721: CALL_OW 302
22725: AND
22726: IFFALSE 22742
// ComEnterUnit ( human , ruFab ) ;
22728: LD_VAR 0 2
22732: PPUSH
22733: LD_EXP 35
22737: PPUSH
22738: CALL_OW 120
// end ;
22742: PPOPN 2
22744: END
// on BuildingComplete ( building ) do var i , engineers , sol , tmp ;
22745: LD_INT 0
22747: PPUSH
22748: PPUSH
22749: PPUSH
22750: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22751: LD_VAR 0 1
22755: PPUSH
22756: CALL_OW 255
22760: PUSH
22761: LD_INT 1
22763: EQUAL
22764: PUSH
22765: LD_EXP 65
22769: PUSH
22770: LD_INT 0
22772: EQUAL
22773: AND
22774: IFFALSE 22976
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
22776: LD_VAR 0 1
22780: PPUSH
22781: CALL_OW 266
22785: PUSH
22786: LD_INT 26
22788: EQUAL
22789: PUSH
22790: LD_VAR 0 1
22794: PPUSH
22795: CALL_OW 266
22799: PUSH
22800: LD_INT 27
22802: EQUAL
22803: OR
22804: PUSH
22805: LD_VAR 0 1
22809: PPUSH
22810: CALL_OW 266
22814: PUSH
22815: LD_INT 28
22817: EQUAL
22818: OR
22819: IFFALSE 22976
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
22821: LD_INT 22
22823: PUSH
22824: LD_INT 1
22826: PUSH
22827: EMPTY
22828: LIST
22829: LIST
22830: PUSH
22831: LD_INT 2
22833: PUSH
22834: LD_INT 30
22836: PUSH
22837: LD_INT 7
22839: PUSH
22840: EMPTY
22841: LIST
22842: LIST
22843: PUSH
22844: LD_INT 30
22846: PUSH
22847: LD_INT 8
22849: PUSH
22850: EMPTY
22851: LIST
22852: LIST
22853: PUSH
22854: EMPTY
22855: LIST
22856: LIST
22857: LIST
22858: PUSH
22859: EMPTY
22860: LIST
22861: LIST
22862: PPUSH
22863: CALL_OW 69
22867: PUSH
22868: LD_INT 0
22870: GREATER
22871: IFFALSE 22976
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22873: LD_ADDR_VAR 0 2
22877: PUSH
22878: LD_INT 22
22880: PUSH
22881: LD_INT 1
22883: PUSH
22884: EMPTY
22885: LIST
22886: LIST
22887: PUSH
22888: LD_INT 2
22890: PUSH
22891: LD_INT 30
22893: PUSH
22894: LD_INT 7
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PUSH
22901: LD_INT 30
22903: PUSH
22904: LD_INT 8
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: LIST
22915: PUSH
22916: EMPTY
22917: LIST
22918: LIST
22919: PPUSH
22920: CALL_OW 69
22924: PUSH
22925: FOR_IN
22926: IFFALSE 22974
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22928: LD_VAR 0 2
22932: PPUSH
22933: LD_INT 1
22935: PPUSH
22936: CALL_OW 268
22940: PUSH
22941: LD_INT 11
22943: EQUAL
22944: PUSH
22945: LD_VAR 0 2
22949: PPUSH
22950: LD_INT 2
22952: PPUSH
22953: CALL_OW 268
22957: PUSH
22958: LD_INT 11
22960: EQUAL
22961: OR
22962: IFFALSE 22972
// eventVar1 = 1 ;
22964: LD_ADDR_EXP 65
22968: PUSH
22969: LD_INT 1
22971: ST_TO_ADDR
22972: GO 22925
22974: POP
22975: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
22976: LD_VAR 0 1
22980: PPUSH
22981: CALL_OW 255
22985: PUSH
22986: LD_INT 3
22988: EQUAL
22989: IFFALSE 23469
// begin if GetBType ( building ) = b_depot then
22991: LD_VAR 0 1
22995: PPUSH
22996: CALL_OW 266
23000: PUSH
23001: LD_INT 0
23003: EQUAL
23004: IFFALSE 23076
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
23006: LD_VAR 0 1
23010: PPUSH
23011: CALL_OW 274
23015: PPUSH
23016: LD_INT 1
23018: PPUSH
23019: LD_INT 5000
23021: PPUSH
23022: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
23026: LD_VAR 0 1
23030: PPUSH
23031: CALL_OW 274
23035: PPUSH
23036: LD_INT 2
23038: PPUSH
23039: LD_INT 300
23041: PPUSH
23042: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
23046: LD_VAR 0 1
23050: PPUSH
23051: CALL_OW 274
23055: PPUSH
23056: LD_INT 3
23058: PPUSH
23059: LD_INT 100
23061: PPUSH
23062: CALL_OW 277
// ruDepot = building ;
23066: LD_ADDR_EXP 30
23070: PUSH
23071: LD_VAR 0 1
23075: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23076: LD_VAR 0 1
23080: PPUSH
23081: CALL_OW 266
23085: PUSH
23086: LD_INT 0
23088: EQUAL
23089: PUSH
23090: LD_VAR 0 1
23094: PPUSH
23095: CALL_OW 266
23099: PUSH
23100: LD_INT 2
23102: EQUAL
23103: OR
23104: PUSH
23105: LD_VAR 0 1
23109: PPUSH
23110: CALL_OW 266
23114: PUSH
23115: LD_INT 4
23117: EQUAL
23118: OR
23119: IFFALSE 23130
// ComUpgrade ( building ) ;
23121: LD_VAR 0 1
23125: PPUSH
23126: CALL_OW 146
// if GetBType ( building ) = b_lab then
23130: LD_VAR 0 1
23134: PPUSH
23135: CALL_OW 266
23139: PUSH
23140: LD_INT 6
23142: EQUAL
23143: IFFALSE 23346
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
23145: LD_INT 22
23147: PUSH
23148: LD_INT 3
23150: PUSH
23151: EMPTY
23152: LIST
23153: LIST
23154: PUSH
23155: LD_INT 30
23157: PUSH
23158: LD_INT 8
23160: PUSH
23161: EMPTY
23162: LIST
23163: LIST
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: PPUSH
23169: CALL_OW 69
23173: PUSH
23174: LD_INT 0
23176: EQUAL
23177: IFFALSE 23215
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23179: LD_VAR 0 1
23183: PPUSH
23184: LD_INT 10
23186: PPUSH
23187: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
23191: LD_VAR 0 1
23195: PPUSH
23196: LD_INT 12
23198: PPUSH
23199: CALL_OW 207
// ruLab1 = building ;
23203: LD_ADDR_EXP 31
23207: PUSH
23208: LD_VAR 0 1
23212: ST_TO_ADDR
// end else
23213: GO 23249
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
23215: LD_VAR 0 1
23219: PPUSH
23220: LD_INT 11
23222: PPUSH
23223: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
23227: LD_VAR 0 1
23231: PPUSH
23232: LD_INT 14
23234: PPUSH
23235: CALL_OW 207
// ruLab2 = building ;
23239: LD_ADDR_EXP 32
23243: PUSH
23244: LD_VAR 0 1
23248: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
23249: LD_INT 3
23251: PPUSH
23252: LD_VAR 0 1
23256: PPUSH
23257: LD_INT 3
23259: PPUSH
23260: CALL 15662 0 3
// if ruDestroyedBuildings > 0 then
23264: LD_EXP 42
23268: PUSH
23269: LD_INT 0
23271: GREATER
23272: IFFALSE 23346
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23274: LD_ADDR_EXP 42
23278: PUSH
23279: LD_EXP 42
23283: PPUSH
23284: LD_INT 1
23286: PPUSH
23287: CALL_OW 3
23291: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23292: LD_ADDR_EXP 42
23296: PUSH
23297: LD_EXP 42
23301: PPUSH
23302: LD_INT 1
23304: PPUSH
23305: CALL_OW 3
23309: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23310: LD_ADDR_EXP 42
23314: PUSH
23315: LD_EXP 42
23319: PPUSH
23320: LD_INT 1
23322: PPUSH
23323: CALL_OW 3
23327: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23328: LD_ADDR_EXP 42
23332: PUSH
23333: LD_EXP 42
23337: PPUSH
23338: LD_INT 1
23340: PPUSH
23341: CALL_OW 3
23345: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
23346: LD_VAR 0 1
23350: PPUSH
23351: CALL_OW 266
23355: PUSH
23356: LD_INT 32
23358: EQUAL
23359: IFFALSE 23396
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23361: LD_VAR 0 1
23365: PPUSH
23366: LD_INT 44
23368: PUSH
23369: LD_INT 45
23371: PUSH
23372: LD_INT 46
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: LIST
23379: PUSH
23380: LD_INT 1
23382: PPUSH
23383: LD_INT 3
23385: PPUSH
23386: CALL_OW 12
23390: ARRAY
23391: PPUSH
23392: CALL_OW 208
// if GetBType ( building ) = b_turret then
23396: LD_VAR 0 1
23400: PPUSH
23401: CALL_OW 266
23405: PUSH
23406: LD_INT 33
23408: EQUAL
23409: IFFALSE 23446
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23411: LD_VAR 0 1
23415: PPUSH
23416: LD_INT 44
23418: PUSH
23419: LD_INT 45
23421: PUSH
23422: LD_INT 46
23424: PUSH
23425: EMPTY
23426: LIST
23427: LIST
23428: LIST
23429: PUSH
23430: LD_INT 1
23432: PPUSH
23433: LD_INT 3
23435: PPUSH
23436: CALL_OW 12
23440: ARRAY
23441: PPUSH
23442: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
23446: LD_VAR 0 1
23450: PPUSH
23451: CALL_OW 266
23455: PUSH
23456: LD_INT 24
23458: EQUAL
23459: IFFALSE 23469
// russianAI = 1 ;
23461: LD_ADDR_EXP 39
23465: PUSH
23466: LD_INT 1
23468: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
23469: LD_VAR 0 1
23473: PPUSH
23474: CALL_OW 255
23478: PUSH
23479: LD_INT 2
23481: EQUAL
23482: IFFALSE 24361
// begin if GetBType ( building ) = arBuildingsTab [ 1 ] [ 1 ] then
23484: LD_VAR 0 1
23488: PPUSH
23489: CALL_OW 266
23493: PUSH
23494: LD_EXP 68
23498: PUSH
23499: LD_INT 1
23501: ARRAY
23502: PUSH
23503: LD_INT 1
23505: ARRAY
23506: EQUAL
23507: IFFALSE 23634
// begin arBuildingsTab := Delete ( arBuildingsTab , 1 ) ;
23509: LD_ADDR_EXP 68
23513: PUSH
23514: LD_EXP 68
23518: PPUSH
23519: LD_INT 1
23521: PPUSH
23522: CALL_OW 3
23526: ST_TO_ADDR
// if arBuildingsTab then
23527: LD_EXP 68
23531: IFFALSE 23634
// begin engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
23533: LD_ADDR_VAR 0 3
23537: PUSH
23538: LD_INT 22
23540: PUSH
23541: LD_INT 2
23543: PUSH
23544: EMPTY
23545: LIST
23546: LIST
23547: PUSH
23548: LD_INT 25
23550: PUSH
23551: LD_INT 2
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: PUSH
23558: EMPTY
23559: LIST
23560: LIST
23561: PPUSH
23562: CALL_OW 69
23566: ST_TO_ADDR
// if engineers then
23567: LD_VAR 0 3
23571: IFFALSE 23634
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
23573: LD_VAR 0 3
23577: PPUSH
23578: LD_EXP 68
23582: PUSH
23583: LD_INT 1
23585: ARRAY
23586: PUSH
23587: LD_INT 1
23589: ARRAY
23590: PPUSH
23591: LD_EXP 68
23595: PUSH
23596: LD_INT 1
23598: ARRAY
23599: PUSH
23600: LD_INT 2
23602: ARRAY
23603: PPUSH
23604: LD_EXP 68
23608: PUSH
23609: LD_INT 1
23611: ARRAY
23612: PUSH
23613: LD_INT 3
23615: ARRAY
23616: PPUSH
23617: LD_EXP 68
23621: PUSH
23622: LD_INT 1
23624: ARRAY
23625: PUSH
23626: LD_INT 4
23628: ARRAY
23629: PPUSH
23630: CALL_OW 205
// end ; end ; if GetBType ( building ) = b_breastwork then
23634: LD_VAR 0 1
23638: PPUSH
23639: CALL_OW 266
23643: PUSH
23644: LD_INT 31
23646: EQUAL
23647: IFFALSE 23793
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
23649: LD_ADDR_VAR 0 4
23653: PUSH
23654: LD_INT 22
23656: PUSH
23657: LD_INT 2
23659: PUSH
23660: EMPTY
23661: LIST
23662: LIST
23663: PUSH
23664: LD_INT 2
23666: PUSH
23667: LD_INT 25
23669: PUSH
23670: LD_INT 1
23672: PUSH
23673: EMPTY
23674: LIST
23675: LIST
23676: PUSH
23677: LD_INT 25
23679: PUSH
23680: LD_INT 8
23682: PUSH
23683: EMPTY
23684: LIST
23685: LIST
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: LIST
23691: PUSH
23692: EMPTY
23693: LIST
23694: LIST
23695: PPUSH
23696: CALL_OW 69
23700: PUSH
23701: LD_EXP 26
23705: DIFF
23706: ST_TO_ADDR
// if not sol then
23707: LD_VAR 0 4
23711: NOT
23712: IFFALSE 23716
// exit ;
23714: GO 24361
// for i in sol do
23716: LD_ADDR_VAR 0 2
23720: PUSH
23721: LD_VAR 0 4
23725: PUSH
23726: FOR_IN
23727: IFFALSE 23791
// if not GetTag ( i ) then
23729: LD_VAR 0 2
23733: PPUSH
23734: CALL_OW 110
23738: NOT
23739: IFFALSE 23789
// begin if IsInUnit ( i ) then
23741: LD_VAR 0 2
23745: PPUSH
23746: CALL_OW 310
23750: IFFALSE 23761
// ComExitBuilding ( i ) ;
23752: LD_VAR 0 2
23756: PPUSH
23757: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
23761: LD_VAR 0 2
23765: PPUSH
23766: LD_VAR 0 1
23770: PPUSH
23771: CALL_OW 180
// SetTag ( i , 11 ) ;
23775: LD_VAR 0 2
23779: PPUSH
23780: LD_INT 11
23782: PPUSH
23783: CALL_OW 109
// break ;
23787: GO 23791
// end ;
23789: GO 23726
23791: POP
23792: POP
// end ; if GetBType ( building ) = b_depot then
23793: LD_VAR 0 1
23797: PPUSH
23798: CALL_OW 266
23802: PUSH
23803: LD_INT 0
23805: EQUAL
23806: IFFALSE 23892
// begin arDepot = building ;
23808: LD_ADDR_EXP 43
23812: PUSH
23813: LD_VAR 0 1
23817: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
23818: LD_INT 38
23820: PUSH
23821: LD_INT 47
23823: PUSH
23824: EMPTY
23825: LIST
23826: LIST
23827: PPUSH
23828: LD_INT 71
23830: PPUSH
23831: LD_INT 19
23833: PPUSH
23834: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
23838: LD_VAR 0 1
23842: PPUSH
23843: CALL_OW 274
23847: PPUSH
23848: LD_INT 1
23850: PPUSH
23851: LD_INT 500
23853: PPUSH
23854: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
23858: LD_VAR 0 1
23862: PPUSH
23863: CALL_OW 274
23867: PPUSH
23868: LD_INT 3
23870: PPUSH
23871: LD_INT 30
23873: PPUSH
23874: CALL_OW 277
// ComEnterUnit ( Dietrich , building ) ;
23878: LD_EXP 26
23882: PPUSH
23883: LD_VAR 0 1
23887: PPUSH
23888: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
23892: LD_VAR 0 1
23896: PPUSH
23897: CALL_OW 266
23901: PUSH
23902: LD_INT 6
23904: EQUAL
23905: PUSH
23906: LD_VAR 0 1
23910: PPUSH
23911: CALL_OW 266
23915: PUSH
23916: LD_INT 9
23918: EQUAL
23919: OR
23920: IFFALSE 23971
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23922: LD_VAR 0 1
23926: PPUSH
23927: LD_INT 10
23929: PPUSH
23930: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
23934: LD_VAR 0 1
23938: PPUSH
23939: LD_INT 11
23941: PPUSH
23942: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
23946: LD_INT 2
23948: PPUSH
23949: LD_VAR 0 1
23953: PPUSH
23954: LD_INT 2
23956: PPUSH
23957: CALL 15662 0 3
// arLab = building ;
23961: LD_ADDR_EXP 44
23965: PUSH
23966: LD_VAR 0 1
23970: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23971: LD_VAR 0 1
23975: PPUSH
23976: CALL_OW 266
23980: PUSH
23981: LD_INT 2
23983: EQUAL
23984: PUSH
23985: LD_VAR 0 1
23989: PPUSH
23990: CALL_OW 266
23994: PUSH
23995: LD_INT 4
23997: EQUAL
23998: OR
23999: IFFALSE 24070
// begin ComUpgrade ( building ) ;
24001: LD_VAR 0 1
24005: PPUSH
24006: CALL_OW 146
// if GetBType ( building ) = b_armoury then
24010: LD_VAR 0 1
24014: PPUSH
24015: CALL_OW 266
24019: PUSH
24020: LD_INT 4
24022: EQUAL
24023: IFFALSE 24070
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Dietrich , 75 , 21 ) ;
24025: LD_INT 22
24027: PUSH
24028: LD_INT 2
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 25
24037: PUSH
24038: LD_INT 1
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: EMPTY
24046: LIST
24047: LIST
24048: PPUSH
24049: CALL_OW 69
24053: PUSH
24054: LD_EXP 26
24058: DIFF
24059: PPUSH
24060: LD_INT 75
24062: PPUSH
24063: LD_INT 21
24065: PPUSH
24066: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
24070: LD_VAR 0 1
24074: PPUSH
24075: CALL_OW 266
24079: PUSH
24080: LD_INT 27
24082: EQUAL
24083: IFFALSE 24361
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
24085: LD_INT 22
24087: PUSH
24088: LD_INT 2
24090: PUSH
24091: EMPTY
24092: LIST
24093: LIST
24094: PUSH
24095: LD_INT 30
24097: PUSH
24098: LD_INT 27
24100: PUSH
24101: EMPTY
24102: LIST
24103: LIST
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: PPUSH
24109: CALL_OW 69
24113: PUSH
24114: LD_INT 2
24116: EQUAL
24117: IFFALSE 24361
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
24119: LD_ADDR_VAR 0 2
24123: PUSH
24124: LD_INT 22
24126: PUSH
24127: LD_INT 2
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 21
24136: PUSH
24137: LD_INT 1
24139: PUSH
24140: EMPTY
24141: LIST
24142: LIST
24143: PUSH
24144: LD_INT 25
24146: PUSH
24147: LD_INT 2
24149: PUSH
24150: EMPTY
24151: LIST
24152: LIST
24153: PUSH
24154: EMPTY
24155: LIST
24156: LIST
24157: LIST
24158: PPUSH
24159: CALL_OW 69
24163: PUSH
24164: LD_INT 1
24166: ARRAY
24167: ST_TO_ADDR
// if not i then
24168: LD_VAR 0 2
24172: NOT
24173: IFFALSE 24177
// exit ;
24175: GO 24361
// AddComMoveXY ( i , 92 , 34 ) ;
24177: LD_VAR 0 2
24181: PPUSH
24182: LD_INT 92
24184: PPUSH
24185: LD_INT 34
24187: PPUSH
24188: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24192: LD_VAR 0 2
24196: PPUSH
24197: LD_INT 35
24199: PPUSH
24200: CALL_OW 202
// AddComMoveXY ( i , 101 , 20 ) ;
24204: LD_VAR 0 2
24208: PPUSH
24209: LD_INT 101
24211: PPUSH
24212: LD_INT 20
24214: PPUSH
24215: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24219: LD_VAR 0 2
24223: PPUSH
24224: LD_INT 35
24226: PPUSH
24227: CALL_OW 202
// AddComMoveXY ( i , 115 , 30 ) ;
24231: LD_VAR 0 2
24235: PPUSH
24236: LD_INT 115
24238: PPUSH
24239: LD_INT 30
24241: PPUSH
24242: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24246: LD_VAR 0 2
24250: PPUSH
24251: LD_INT 35
24253: PPUSH
24254: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
24258: LD_VAR 0 2
24262: PPUSH
24263: LD_INT 82
24265: PPUSH
24266: LD_INT 57
24268: PPUSH
24269: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24273: LD_VAR 0 2
24277: PPUSH
24278: LD_INT 35
24280: PPUSH
24281: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
24285: LD_VAR 0 2
24289: PPUSH
24290: LD_INT 36
24292: PPUSH
24293: LD_INT 28
24295: PPUSH
24296: CALL_OW 171
// AddComWait ( i , 0 0$2 ) ;
24300: LD_VAR 0 2
24304: PPUSH
24305: LD_INT 70
24307: PPUSH
24308: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
24312: LD_INT 22
24314: PUSH
24315: LD_INT 2
24317: PUSH
24318: EMPTY
24319: LIST
24320: LIST
24321: PUSH
24322: LD_INT 21
24324: PUSH
24325: LD_INT 1
24327: PUSH
24328: EMPTY
24329: LIST
24330: LIST
24331: PUSH
24332: LD_INT 25
24334: PUSH
24335: LD_INT 2
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: LIST
24346: PPUSH
24347: CALL_OW 69
24351: PPUSH
24352: LD_EXP 43
24356: PPUSH
24357: CALL_OW 180
// end ; end ; end ;
24361: PPOPN 5
24363: END
// on UpgradeComplete ( building ) do var i ;
24364: LD_INT 0
24366: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
24367: LD_VAR 0 1
24371: PPUSH
24372: CALL_OW 255
24376: PUSH
24377: LD_INT 1
24379: EQUAL
24380: PUSH
24381: LD_EXP 65
24385: PUSH
24386: LD_INT 0
24388: EQUAL
24389: AND
24390: IFFALSE 24588
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
24392: LD_VAR 0 1
24396: PPUSH
24397: CALL_OW 266
24401: PUSH
24402: LD_INT 7
24404: EQUAL
24405: PUSH
24406: LD_VAR 0 1
24410: PPUSH
24411: CALL_OW 266
24415: PUSH
24416: LD_INT 8
24418: EQUAL
24419: OR
24420: IFFALSE 24588
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
24422: LD_INT 22
24424: PUSH
24425: LD_INT 1
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 2
24434: PUSH
24435: LD_INT 30
24437: PUSH
24438: LD_INT 26
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: PUSH
24445: LD_INT 30
24447: PUSH
24448: LD_INT 27
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 30
24457: PUSH
24458: LD_INT 28
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: LIST
24469: LIST
24470: PUSH
24471: EMPTY
24472: LIST
24473: LIST
24474: PPUSH
24475: CALL_OW 69
24479: PUSH
24480: LD_INT 0
24482: GREATER
24483: IFFALSE 24588
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
24485: LD_ADDR_VAR 0 2
24489: PUSH
24490: LD_INT 22
24492: PUSH
24493: LD_INT 1
24495: PUSH
24496: EMPTY
24497: LIST
24498: LIST
24499: PUSH
24500: LD_INT 2
24502: PUSH
24503: LD_INT 30
24505: PUSH
24506: LD_INT 7
24508: PUSH
24509: EMPTY
24510: LIST
24511: LIST
24512: PUSH
24513: LD_INT 30
24515: PUSH
24516: LD_INT 8
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: EMPTY
24524: LIST
24525: LIST
24526: LIST
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: PPUSH
24532: CALL_OW 69
24536: PUSH
24537: FOR_IN
24538: IFFALSE 24586
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
24540: LD_VAR 0 2
24544: PPUSH
24545: LD_INT 1
24547: PPUSH
24548: CALL_OW 268
24552: PUSH
24553: LD_INT 11
24555: EQUAL
24556: PUSH
24557: LD_VAR 0 2
24561: PPUSH
24562: LD_INT 2
24564: PPUSH
24565: CALL_OW 268
24569: PUSH
24570: LD_INT 11
24572: EQUAL
24573: OR
24574: IFFALSE 24584
// eventVar1 = 1 ;
24576: LD_ADDR_EXP 65
24580: PUSH
24581: LD_INT 1
24583: ST_TO_ADDR
24584: GO 24537
24586: POP
24587: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
24588: LD_VAR 0 1
24592: PPUSH
24593: CALL_OW 255
24597: PUSH
24598: LD_INT 2
24600: EQUAL
24601: IFFALSE 24706
// begin if GetBType ( building ) = b_barracks then
24603: LD_VAR 0 1
24607: PPUSH
24608: CALL_OW 266
24612: PUSH
24613: LD_INT 5
24615: EQUAL
24616: IFFALSE 24706
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
24618: LD_ADDR_VAR 0 2
24622: PUSH
24623: LD_INT 22
24625: PUSH
24626: LD_INT 2
24628: PUSH
24629: EMPTY
24630: LIST
24631: LIST
24632: PUSH
24633: LD_INT 25
24635: PUSH
24636: LD_INT 1
24638: PUSH
24639: EMPTY
24640: LIST
24641: LIST
24642: PUSH
24643: LD_INT 3
24645: PUSH
24646: LD_INT 54
24648: PUSH
24649: EMPTY
24650: LIST
24651: PUSH
24652: EMPTY
24653: LIST
24654: LIST
24655: PUSH
24656: EMPTY
24657: LIST
24658: LIST
24659: LIST
24660: PPUSH
24661: CALL_OW 69
24665: PUSH
24666: LD_EXP 26
24670: PUSH
24671: EMPTY
24672: LIST
24673: DIFF
24674: PUSH
24675: FOR_IN
24676: IFFALSE 24694
// ComEnterUnit ( i , building ) ;
24678: LD_VAR 0 2
24682: PPUSH
24683: LD_VAR 0 1
24687: PPUSH
24688: CALL_OW 120
24692: GO 24675
24694: POP
24695: POP
// arArm = building ;
24696: LD_ADDR_EXP 45
24700: PUSH
24701: LD_VAR 0 1
24705: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
24706: LD_VAR 0 1
24710: PPUSH
24711: CALL_OW 255
24715: PUSH
24716: LD_INT 3
24718: EQUAL
24719: IFFALSE 25192
// begin if GetBType ( building ) = b_factory then
24721: LD_VAR 0 1
24725: PPUSH
24726: CALL_OW 266
24730: PUSH
24731: LD_INT 3
24733: EQUAL
24734: IFFALSE 24801
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
24736: LD_ADDR_VAR 0 2
24740: PUSH
24741: LD_INT 22
24743: PUSH
24744: LD_INT 3
24746: PUSH
24747: EMPTY
24748: LIST
24749: LIST
24750: PUSH
24751: LD_INT 25
24753: PUSH
24754: LD_INT 3
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PPUSH
24765: CALL_OW 69
24769: PUSH
24770: FOR_IN
24771: IFFALSE 24789
// ComEnterUnit ( i , building ) ;
24773: LD_VAR 0 2
24777: PPUSH
24778: LD_VAR 0 1
24782: PPUSH
24783: CALL_OW 120
24787: GO 24770
24789: POP
24790: POP
// ruFab = building ;
24791: LD_ADDR_EXP 35
24795: PUSH
24796: LD_VAR 0 1
24800: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
24801: LD_INT 22
24803: PUSH
24804: LD_INT 3
24806: PUSH
24807: EMPTY
24808: LIST
24809: LIST
24810: PUSH
24811: LD_INT 21
24813: PUSH
24814: LD_INT 3
24816: PUSH
24817: EMPTY
24818: LIST
24819: LIST
24820: PUSH
24821: LD_INT 30
24823: PUSH
24824: LD_INT 8
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: LIST
24835: PPUSH
24836: CALL_OW 69
24840: PUSH
24841: LD_INT 2
24843: EQUAL
24844: IFFALSE 25052
// begin for i = 1 to 2 do
24846: LD_ADDR_VAR 0 2
24850: PUSH
24851: DOUBLE
24852: LD_INT 1
24854: DEC
24855: ST_TO_ADDR
24856: LD_INT 2
24858: PUSH
24859: FOR_TO
24860: IFFALSE 24947
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
24862: LD_INT 22
24864: PUSH
24865: LD_INT 3
24867: PUSH
24868: EMPTY
24869: LIST
24870: LIST
24871: PUSH
24872: LD_INT 25
24874: PUSH
24875: LD_INT 4
24877: PUSH
24878: EMPTY
24879: LIST
24880: LIST
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: PPUSH
24886: CALL_OW 69
24890: PUSH
24891: LD_VAR 0 2
24895: ARRAY
24896: PPUSH
24897: LD_INT 22
24899: PUSH
24900: LD_INT 3
24902: PUSH
24903: EMPTY
24904: LIST
24905: LIST
24906: PUSH
24907: LD_INT 21
24909: PUSH
24910: LD_INT 3
24912: PUSH
24913: EMPTY
24914: LIST
24915: LIST
24916: PUSH
24917: LD_INT 30
24919: PUSH
24920: LD_INT 8
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: LIST
24931: PPUSH
24932: CALL_OW 69
24936: PUSH
24937: LD_INT 1
24939: ARRAY
24940: PPUSH
24941: CALL_OW 120
24945: GO 24859
24947: POP
24948: POP
// for i = 3 to 4 do
24949: LD_ADDR_VAR 0 2
24953: PUSH
24954: DOUBLE
24955: LD_INT 3
24957: DEC
24958: ST_TO_ADDR
24959: LD_INT 4
24961: PUSH
24962: FOR_TO
24963: IFFALSE 25050
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
24965: LD_INT 22
24967: PUSH
24968: LD_INT 3
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: LD_INT 25
24977: PUSH
24978: LD_INT 4
24980: PUSH
24981: EMPTY
24982: LIST
24983: LIST
24984: PUSH
24985: EMPTY
24986: LIST
24987: LIST
24988: PPUSH
24989: CALL_OW 69
24993: PUSH
24994: LD_VAR 0 2
24998: ARRAY
24999: PPUSH
25000: LD_INT 22
25002: PUSH
25003: LD_INT 3
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: PUSH
25010: LD_INT 21
25012: PUSH
25013: LD_INT 3
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: PUSH
25020: LD_INT 30
25022: PUSH
25023: LD_INT 8
25025: PUSH
25026: EMPTY
25027: LIST
25028: LIST
25029: PUSH
25030: EMPTY
25031: LIST
25032: LIST
25033: LIST
25034: PPUSH
25035: CALL_OW 69
25039: PUSH
25040: LD_INT 2
25042: ARRAY
25043: PPUSH
25044: CALL_OW 120
25048: GO 24962
25050: POP
25051: POP
// end ; if GetBType ( building ) = b_barracks then
25052: LD_VAR 0 1
25056: PPUSH
25057: CALL_OW 266
25061: PUSH
25062: LD_INT 5
25064: EQUAL
25065: IFFALSE 25192
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
25067: LD_ADDR_VAR 0 2
25071: PUSH
25072: LD_INT 22
25074: PUSH
25075: LD_INT 3
25077: PUSH
25078: EMPTY
25079: LIST
25080: LIST
25081: PUSH
25082: LD_INT 25
25084: PUSH
25085: LD_INT 1
25087: PUSH
25088: EMPTY
25089: LIST
25090: LIST
25091: PUSH
25092: LD_INT 3
25094: PUSH
25095: LD_INT 54
25097: PUSH
25098: EMPTY
25099: LIST
25100: PUSH
25101: EMPTY
25102: LIST
25103: LIST
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: LIST
25109: PPUSH
25110: CALL_OW 69
25114: PUSH
25115: FOR_IN
25116: IFFALSE 25134
// ComEnterUnit ( i , building ) ;
25118: LD_VAR 0 2
25122: PPUSH
25123: LD_VAR 0 1
25127: PPUSH
25128: CALL_OW 120
25132: GO 25115
25134: POP
25135: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
25136: LD_INT 22
25138: PUSH
25139: LD_INT 3
25141: PUSH
25142: EMPTY
25143: LIST
25144: LIST
25145: PUSH
25146: LD_INT 30
25148: PUSH
25149: LD_INT 5
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: PUSH
25156: EMPTY
25157: LIST
25158: LIST
25159: PPUSH
25160: CALL_OW 69
25164: PUSH
25165: LD_INT 0
25167: EQUAL
25168: IFFALSE 25182
// ruArm1 = building else
25170: LD_ADDR_EXP 33
25174: PUSH
25175: LD_VAR 0 1
25179: ST_TO_ADDR
25180: GO 25192
// ruArm2 = building ;
25182: LD_ADDR_EXP 34
25186: PUSH
25187: LD_VAR 0 1
25191: ST_TO_ADDR
// end ; end ; end ;
25192: PPOPN 2
25194: END
// on EnterBuilding ( building , human ) do var rnd ;
25195: LD_INT 0
25197: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
25198: LD_VAR 0 2
25202: PPUSH
25203: CALL_OW 255
25207: PUSH
25208: LD_INT 2
25210: EQUAL
25211: PUSH
25212: LD_VAR 0 2
25216: PPUSH
25217: CALL_OW 257
25221: PUSH
25222: LD_INT 1
25224: EQUAL
25225: AND
25226: PUSH
25227: LD_VAR 0 1
25231: PUSH
25232: LD_EXP 45
25236: EQUAL
25237: AND
25238: IFFALSE 25285
// begin wait ( 0 0$1 ) ;
25240: LD_INT 35
25242: PPUSH
25243: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
25247: LD_ADDR_VAR 0 3
25251: PUSH
25252: LD_INT 1
25254: PPUSH
25255: LD_INT 100
25257: PPUSH
25258: CALL_OW 12
25262: ST_TO_ADDR
// if rnd > 50 then
25263: LD_VAR 0 3
25267: PUSH
25268: LD_INT 50
25270: GREATER
25271: IFFALSE 25285
// SetClass ( human , class_mortar ) ;
25273: LD_VAR 0 2
25277: PPUSH
25278: LD_INT 8
25280: PPUSH
25281: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
25285: LD_VAR 0 2
25289: PUSH
25290: LD_INT 22
25292: PUSH
25293: LD_INT 2
25295: PUSH
25296: EMPTY
25297: LIST
25298: LIST
25299: PUSH
25300: LD_INT 25
25302: PUSH
25303: LD_INT 12
25305: PUSH
25306: EMPTY
25307: LIST
25308: LIST
25309: PUSH
25310: EMPTY
25311: LIST
25312: LIST
25313: PPUSH
25314: CALL_OW 69
25318: IN
25319: IFFALSE 25369
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
25321: LD_VAR 0 1
25325: PPUSH
25326: CALL_OW 266
25330: PUSH
25331: LD_INT 0
25333: PUSH
25334: LD_INT 1
25336: PUSH
25337: EMPTY
25338: LIST
25339: LIST
25340: IN
25341: IFFALSE 25357
// SetClass ( human , class_apeman_engineer ) else
25343: LD_VAR 0 2
25347: PPUSH
25348: LD_INT 16
25350: PPUSH
25351: CALL_OW 336
25355: GO 25369
// SetClass ( human , class_apeman_soldier ) ;
25357: LD_VAR 0 2
25361: PPUSH
25362: LD_INT 15
25364: PPUSH
25365: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
25369: LD_VAR 0 2
25373: PPUSH
25374: CALL_OW 255
25378: PUSH
25379: LD_INT 3
25381: EQUAL
25382: PUSH
25383: LD_VAR 0 2
25387: PPUSH
25388: CALL_OW 257
25392: PUSH
25393: LD_INT 1
25395: EQUAL
25396: AND
25397: PUSH
25398: LD_VAR 0 1
25402: PUSH
25403: LD_EXP 33
25407: EQUAL
25408: PUSH
25409: LD_VAR 0 1
25413: PUSH
25414: LD_EXP 34
25418: EQUAL
25419: OR
25420: PUSH
25421: EMPTY
25422: LIST
25423: AND
25424: IFFALSE 25445
// begin wait ( 0 0$1 ) ;
25426: LD_INT 35
25428: PPUSH
25429: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
25433: LD_VAR 0 2
25437: PPUSH
25438: LD_INT 9
25440: PPUSH
25441: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
25445: LD_VAR 0 2
25449: PPUSH
25450: CALL_OW 255
25454: PUSH
25455: LD_INT 3
25457: EQUAL
25458: PUSH
25459: LD_VAR 0 2
25463: PPUSH
25464: CALL_OW 257
25468: PUSH
25469: LD_INT 9
25471: EQUAL
25472: AND
25473: PUSH
25474: LD_VAR 0 1
25478: PPUSH
25479: CALL_OW 266
25483: PUSH
25484: LD_INT 32
25486: EQUAL
25487: AND
25488: IFFALSE 25509
// begin wait ( 0 0$1 ) ;
25490: LD_INT 35
25492: PPUSH
25493: CALL_OW 67
// SetClass ( human , 1 ) ;
25497: LD_VAR 0 2
25501: PPUSH
25502: LD_INT 1
25504: PPUSH
25505: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
25509: LD_VAR 0 2
25513: PPUSH
25514: CALL_OW 255
25518: PUSH
25519: LD_INT 3
25521: EQUAL
25522: PUSH
25523: LD_VAR 0 2
25527: PPUSH
25528: CALL_OW 257
25532: PUSH
25533: LD_INT 3
25535: EQUAL
25536: AND
25537: PUSH
25538: LD_VAR 0 1
25542: PUSH
25543: LD_EXP 35
25547: EQUAL
25548: AND
25549: IFFALSE 25563
// SetLives ( human , 1000 ) ;
25551: LD_VAR 0 2
25555: PPUSH
25556: LD_INT 1000
25558: PPUSH
25559: CALL_OW 234
// end ;
25563: PPOPN 3
25565: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25566: LD_VAR 0 1
25570: PUSH
25571: LD_INT 1
25573: EQUAL
25574: PUSH
25575: LD_VAR 0 2
25579: PUSH
25580: LD_INT 2
25582: EQUAL
25583: AND
25584: PUSH
25585: LD_INT 1
25587: PPUSH
25588: LD_INT 2
25590: PPUSH
25591: CALL_OW 81
25595: PUSH
25596: LD_INT 1
25598: EQUAL
25599: AND
25600: IFFALSE 25621
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
25602: LD_EXP 24
25606: PPUSH
25607: LD_STRING D6b-Pow-1
25609: PPUSH
25610: CALL_OW 94
// YouLost ( Powell ) ;
25614: LD_STRING Powell
25616: PPUSH
25617: CALL_OW 104
// end ; end ;
25621: PPOPN 2
25623: END
// every 0 0$10 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
25624: LD_INT 23
25626: PPUSH
25627: LD_INT 22
25629: PUSH
25630: LD_INT 1
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: PUSH
25637: LD_INT 21
25639: PUSH
25640: LD_INT 3
25642: PUSH
25643: EMPTY
25644: LIST
25645: LIST
25646: PUSH
25647: EMPTY
25648: LIST
25649: LIST
25650: PPUSH
25651: CALL_OW 70
25655: PUSH
25656: LD_INT 23
25658: PPUSH
25659: LD_INT 22
25661: PUSH
25662: LD_INT 1
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 21
25671: PUSH
25672: LD_INT 2
25674: PUSH
25675: EMPTY
25676: LIST
25677: LIST
25678: PUSH
25679: EMPTY
25680: LIST
25681: LIST
25682: PPUSH
25683: CALL_OW 70
25687: OR
25688: PUSH
25689: LD_INT 1
25691: PPUSH
25692: LD_INT 2
25694: PPUSH
25695: CALL_OW 81
25699: PUSH
25700: LD_INT 1
25702: EQUAL
25703: AND
25704: IFFALSE 25837
25706: GO 25708
25708: DISABLE
// begin enable ;
25709: ENABLE
// wait ( 0 0$10 ) ;
25710: LD_INT 350
25712: PPUSH
25713: CALL_OW 67
// if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
25717: LD_INT 23
25719: PPUSH
25720: LD_INT 22
25722: PUSH
25723: LD_INT 1
25725: PUSH
25726: EMPTY
25727: LIST
25728: LIST
25729: PUSH
25730: LD_INT 21
25732: PUSH
25733: LD_INT 3
25735: PUSH
25736: EMPTY
25737: LIST
25738: LIST
25739: PUSH
25740: EMPTY
25741: LIST
25742: LIST
25743: PPUSH
25744: CALL_OW 70
25748: PUSH
25749: LD_INT 23
25751: PPUSH
25752: LD_INT 22
25754: PUSH
25755: LD_INT 1
25757: PUSH
25758: EMPTY
25759: LIST
25760: LIST
25761: PUSH
25762: LD_INT 21
25764: PUSH
25765: LD_INT 2
25767: PUSH
25768: EMPTY
25769: LIST
25770: LIST
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PPUSH
25776: CALL_OW 70
25780: OR
25781: PUSH
25782: LD_INT 1
25784: PPUSH
25785: LD_INT 2
25787: PPUSH
25788: CALL_OW 81
25792: PUSH
25793: LD_INT 1
25795: EQUAL
25796: AND
25797: IFFALSE 25837
// begin disable ;
25799: DISABLE
// InGameOn ;
25800: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
25804: LD_INT 73
25806: PPUSH
25807: LD_INT 18
25809: PPUSH
25810: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
25814: LD_EXP 24
25818: PPUSH
25819: LD_STRING D6b-Pow-1
25821: PPUSH
25822: CALL_OW 94
// YouLost ( Powell ) ;
25826: LD_STRING Powell
25828: PPUSH
25829: CALL_OW 104
// InGameOff ;
25833: CALL_OW 9
// end ; end ;
25837: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
25838: LD_VAR 0 1
25842: PUSH
25843: LD_EXP 1
25847: EQUAL
25848: IFFALSE 25857
// YouLost ( JMM ) ;
25850: LD_STRING JMM
25852: PPUSH
25853: CALL_OW 104
// if unit = Khatam then
25857: LD_VAR 0 1
25861: PUSH
25862: LD_EXP 14
25866: EQUAL
25867: IFFALSE 25877
// KhatamStatus = 0 ;
25869: LD_ADDR_EXP 53
25873: PUSH
25874: LD_INT 0
25876: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
25877: LD_VAR 0 1
25881: PPUSH
25882: CALL_OW 255
25886: PUSH
25887: LD_INT 3
25889: EQUAL
25890: PUSH
25891: LD_VAR 0 1
25895: PPUSH
25896: CALL_OW 247
25900: PUSH
25901: LD_INT 3
25903: EQUAL
25904: AND
25905: IFFALSE 26597
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
25907: LD_VAR 0 1
25911: PPUSH
25912: CALL_OW 266
25916: PUSH
25917: LD_INT 31
25919: EQUAL
25920: PUSH
25921: LD_VAR 0 1
25925: PPUSH
25926: CALL_OW 266
25930: PUSH
25931: LD_INT 32
25933: EQUAL
25934: OR
25935: PUSH
25936: LD_VAR 0 1
25940: PPUSH
25941: CALL_OW 266
25945: PUSH
25946: LD_INT 36
25948: EQUAL
25949: OR
25950: PUSH
25951: LD_VAR 0 1
25955: PPUSH
25956: CALL_OW 266
25960: PUSH
25961: LD_INT 0
25963: EQUAL
25964: OR
25965: PUSH
25966: LD_VAR 0 1
25970: PPUSH
25971: CALL_OW 266
25975: PUSH
25976: LD_INT 24
25978: EQUAL
25979: OR
25980: PUSH
25981: LD_VAR 0 1
25985: PPUSH
25986: CALL_OW 266
25990: PUSH
25991: LD_INT 17
25993: EQUAL
25994: OR
25995: PUSH
25996: LD_VAR 0 1
26000: PPUSH
26001: CALL_OW 266
26005: PUSH
26006: LD_INT 25
26008: EQUAL
26009: OR
26010: PUSH
26011: LD_VAR 0 1
26015: PPUSH
26016: CALL_OW 266
26020: PUSH
26021: LD_INT 19
26023: EQUAL
26024: OR
26025: PUSH
26026: LD_VAR 0 1
26030: PPUSH
26031: CALL_OW 266
26035: PUSH
26036: LD_INT 20
26038: EQUAL
26039: OR
26040: PUSH
26041: LD_VAR 0 1
26045: PPUSH
26046: CALL_OW 266
26050: PUSH
26051: LD_INT 18
26053: EQUAL
26054: OR
26055: PUSH
26056: LD_VAR 0 1
26060: PPUSH
26061: CALL_OW 266
26065: PUSH
26066: LD_INT 21
26068: EQUAL
26069: OR
26070: PUSH
26071: LD_VAR 0 1
26075: PPUSH
26076: CALL_OW 266
26080: PUSH
26081: LD_INT 23
26083: EQUAL
26084: OR
26085: PUSH
26086: LD_VAR 0 1
26090: PPUSH
26091: CALL_OW 266
26095: PUSH
26096: LD_INT 16
26098: EQUAL
26099: OR
26100: PUSH
26101: LD_VAR 0 1
26105: PPUSH
26106: CALL_OW 266
26110: PUSH
26111: LD_INT 6
26113: EQUAL
26114: OR
26115: PUSH
26116: LD_VAR 0 1
26120: PPUSH
26121: CALL_OW 266
26125: PUSH
26126: LD_INT 29
26128: EQUAL
26129: OR
26130: PUSH
26131: LD_VAR 0 1
26135: PPUSH
26136: CALL_OW 266
26140: PUSH
26141: LD_INT 26
26143: EQUAL
26144: OR
26145: PUSH
26146: LD_VAR 0 1
26150: PPUSH
26151: CALL_OW 266
26155: PUSH
26156: LD_INT 30
26158: EQUAL
26159: OR
26160: PUSH
26161: LD_VAR 0 1
26165: PPUSH
26166: CALL_OW 266
26170: PUSH
26171: LD_INT 28
26173: EQUAL
26174: OR
26175: PUSH
26176: LD_VAR 0 1
26180: PPUSH
26181: CALL_OW 266
26185: PUSH
26186: LD_INT 27
26188: EQUAL
26189: OR
26190: PUSH
26191: LD_VAR 0 1
26195: PPUSH
26196: CALL_OW 266
26200: PUSH
26201: LD_INT 33
26203: EQUAL
26204: OR
26205: PUSH
26206: LD_VAR 0 1
26210: PPUSH
26211: CALL_OW 266
26215: PUSH
26216: LD_INT 2
26218: EQUAL
26219: OR
26220: PUSH
26221: LD_VAR 0 1
26225: PPUSH
26226: CALL_OW 266
26230: PUSH
26231: LD_INT 4
26233: EQUAL
26234: OR
26235: IFFALSE 26321
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
26237: LD_ADDR_EXP 42
26241: PUSH
26242: LD_EXP 42
26246: PUSH
26247: LD_VAR 0 1
26251: PPUSH
26252: CALL_OW 266
26256: ADD
26257: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26258: LD_ADDR_EXP 42
26262: PUSH
26263: LD_EXP 42
26267: PUSH
26268: LD_VAR 0 1
26272: PPUSH
26273: CALL_OW 250
26277: ADD
26278: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26279: LD_ADDR_EXP 42
26283: PUSH
26284: LD_EXP 42
26288: PUSH
26289: LD_VAR 0 1
26293: PPUSH
26294: CALL_OW 251
26298: ADD
26299: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26300: LD_ADDR_EXP 42
26304: PUSH
26305: LD_EXP 42
26309: PUSH
26310: LD_VAR 0 1
26314: PPUSH
26315: CALL_OW 254
26319: ADD
26320: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
26321: LD_VAR 0 1
26325: PPUSH
26326: CALL_OW 266
26330: PUSH
26331: LD_INT 1
26333: EQUAL
26334: IFFALSE 26413
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
26336: LD_ADDR_EXP 42
26340: PUSH
26341: LD_EXP 42
26345: PUSH
26346: LD_INT 0
26348: ADD
26349: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26350: LD_ADDR_EXP 42
26354: PUSH
26355: LD_EXP 42
26359: PUSH
26360: LD_VAR 0 1
26364: PPUSH
26365: CALL_OW 250
26369: ADD
26370: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26371: LD_ADDR_EXP 42
26375: PUSH
26376: LD_EXP 42
26380: PUSH
26381: LD_VAR 0 1
26385: PPUSH
26386: CALL_OW 251
26390: ADD
26391: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26392: LD_ADDR_EXP 42
26396: PUSH
26397: LD_EXP 42
26401: PUSH
26402: LD_VAR 0 1
26406: PPUSH
26407: CALL_OW 254
26411: ADD
26412: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
26413: LD_VAR 0 1
26417: PPUSH
26418: CALL_OW 266
26422: PUSH
26423: LD_INT 3
26425: EQUAL
26426: IFFALSE 26505
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
26428: LD_ADDR_EXP 42
26432: PUSH
26433: LD_EXP 42
26437: PUSH
26438: LD_INT 2
26440: ADD
26441: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26442: LD_ADDR_EXP 42
26446: PUSH
26447: LD_EXP 42
26451: PUSH
26452: LD_VAR 0 1
26456: PPUSH
26457: CALL_OW 250
26461: ADD
26462: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26463: LD_ADDR_EXP 42
26467: PUSH
26468: LD_EXP 42
26472: PUSH
26473: LD_VAR 0 1
26477: PPUSH
26478: CALL_OW 251
26482: ADD
26483: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26484: LD_ADDR_EXP 42
26488: PUSH
26489: LD_EXP 42
26493: PUSH
26494: LD_VAR 0 1
26498: PPUSH
26499: CALL_OW 254
26503: ADD
26504: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
26505: LD_VAR 0 1
26509: PPUSH
26510: CALL_OW 266
26514: PUSH
26515: LD_INT 5
26517: EQUAL
26518: IFFALSE 26597
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
26520: LD_ADDR_EXP 42
26524: PUSH
26525: LD_EXP 42
26529: PUSH
26530: LD_INT 4
26532: ADD
26533: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26534: LD_ADDR_EXP 42
26538: PUSH
26539: LD_EXP 42
26543: PUSH
26544: LD_VAR 0 1
26548: PPUSH
26549: CALL_OW 250
26553: ADD
26554: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26555: LD_ADDR_EXP 42
26559: PUSH
26560: LD_EXP 42
26564: PUSH
26565: LD_VAR 0 1
26569: PPUSH
26570: CALL_OW 251
26574: ADD
26575: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26576: LD_ADDR_EXP 42
26580: PUSH
26581: LD_EXP 42
26585: PUSH
26586: LD_VAR 0 1
26590: PPUSH
26591: CALL_OW 254
26595: ADD
26596: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
26597: LD_EXP 51
26601: PUSH
26602: LD_VAR 0 1
26606: PPUSH
26607: CALL_OW 257
26611: PUSH
26612: LD_INT 3
26614: EQUAL
26615: AND
26616: PUSH
26617: LD_VAR 0 1
26621: PPUSH
26622: CALL_OW 255
26626: PUSH
26627: LD_INT 3
26629: EQUAL
26630: AND
26631: PUSH
26632: LD_EXP 35
26636: PPUSH
26637: CALL_OW 302
26641: AND
26642: PUSH
26643: LD_EXP 35
26647: PPUSH
26648: CALL_OW 255
26652: PUSH
26653: LD_INT 3
26655: EQUAL
26656: AND
26657: IFFALSE 26741
// begin ruMech := ruMech - 1 ;
26659: LD_ADDR_EXP 51
26663: PUSH
26664: LD_EXP 51
26668: PUSH
26669: LD_INT 1
26671: MINUS
26672: ST_TO_ADDR
// uc_side = 3 ;
26673: LD_ADDR_OWVAR 20
26677: PUSH
26678: LD_INT 3
26680: ST_TO_ADDR
// uc_nation = 3 ;
26681: LD_ADDR_OWVAR 21
26685: PUSH
26686: LD_INT 3
26688: ST_TO_ADDR
// hc_gallery :=  ;
26689: LD_ADDR_OWVAR 33
26693: PUSH
26694: LD_STRING 
26696: ST_TO_ADDR
// hc_name :=  ;
26697: LD_ADDR_OWVAR 26
26701: PUSH
26702: LD_STRING 
26704: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
26705: LD_INT 0
26707: PPUSH
26708: LD_EXP 36
26712: PPUSH
26713: LD_EXP 37
26717: PPUSH
26718: CALL_OW 12
26722: PPUSH
26723: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
26727: CALL_OW 44
26731: PPUSH
26732: LD_EXP 35
26736: PPUSH
26737: CALL_OW 52
// end ; end ;
26741: PPOPN 1
26743: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
26744: LD_ADDR_OWVAR 57
26748: PUSH
26749: LD_INT 0
26751: ST_TO_ADDR
// fastEnd = 1 ;
26752: LD_ADDR_EXP 63
26756: PUSH
26757: LD_INT 1
26759: ST_TO_ADDR
// FinishMission ;
26760: CALL 27928 0 0
// end ;
26764: PPOPN 1
26766: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
26767: LD_VAR 0 1
26771: PPUSH
26772: CALL 43097 0 1
// end ; end_of_file
26776: PPOPN 1
26778: END
// export function CreateNature ; var i , un ; begin
26779: LD_INT 0
26781: PPUSH
26782: PPUSH
26783: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
26784: LD_ADDR_VAR 0 2
26788: PUSH
26789: DOUBLE
26790: LD_INT 1
26792: DEC
26793: ST_TO_ADDR
26794: LD_OWVAR 67
26798: PUSH
26799: LD_INT 1
26801: PPUSH
26802: LD_INT 5
26804: PPUSH
26805: CALL_OW 12
26809: PLUS
26810: PUSH
26811: FOR_TO
26812: IFFALSE 26957
// begin hc_sex = sex_male ;
26814: LD_ADDR_OWVAR 27
26818: PUSH
26819: LD_INT 1
26821: ST_TO_ADDR
// uc_side = 0 ;
26822: LD_ADDR_OWVAR 20
26826: PUSH
26827: LD_INT 0
26829: ST_TO_ADDR
// uc_nation = nation_nature ;
26830: LD_ADDR_OWVAR 21
26834: PUSH
26835: LD_INT 0
26837: ST_TO_ADDR
// hc_class = class_apeman ;
26838: LD_ADDR_OWVAR 28
26842: PUSH
26843: LD_INT 12
26845: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
26846: LD_ADDR_OWVAR 31
26850: PUSH
26851: LD_INT 2
26853: PPUSH
26854: LD_INT 7
26856: PPUSH
26857: CALL_OW 12
26861: PUSH
26862: LD_OWVAR 67
26866: PLUS
26867: PUSH
26868: LD_INT 2
26870: PPUSH
26871: LD_INT 10
26873: PPUSH
26874: CALL_OW 12
26878: PUSH
26879: LD_INT 2
26881: PPUSH
26882: LD_INT 10
26884: PPUSH
26885: CALL_OW 12
26889: PUSH
26890: LD_INT 2
26892: PPUSH
26893: LD_INT 10
26895: PPUSH
26896: CALL_OW 12
26900: PUSH
26901: EMPTY
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
26907: LD_ADDR_OWVAR 35
26911: PUSH
26912: LD_INT 5
26914: NEG
26915: PPUSH
26916: LD_INT 5
26918: PPUSH
26919: CALL_OW 12
26923: PUSH
26924: LD_OWVAR 67
26928: MUL
26929: ST_TO_ADDR
// un = CreateHuman ;
26930: LD_ADDR_VAR 0 3
26934: PUSH
26935: CALL_OW 44
26939: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
26940: LD_VAR 0 3
26944: PPUSH
26945: LD_INT 5
26947: PPUSH
26948: LD_INT 0
26950: PPUSH
26951: CALL_OW 49
// end ;
26955: GO 26811
26957: POP
26958: POP
// for i = 1 to Difficulty + 2 do
26959: LD_ADDR_VAR 0 2
26963: PUSH
26964: DOUBLE
26965: LD_INT 1
26967: DEC
26968: ST_TO_ADDR
26969: LD_OWVAR 67
26973: PUSH
26974: LD_INT 2
26976: PLUS
26977: PUSH
26978: FOR_TO
26979: IFFALSE 27088
// begin hc_sex = sex_male ;
26981: LD_ADDR_OWVAR 27
26985: PUSH
26986: LD_INT 1
26988: ST_TO_ADDR
// uc_side = 0 ;
26989: LD_ADDR_OWVAR 20
26993: PUSH
26994: LD_INT 0
26996: ST_TO_ADDR
// uc_nation = nation_nature ;
26997: LD_ADDR_OWVAR 21
27001: PUSH
27002: LD_INT 0
27004: ST_TO_ADDR
// hc_class = class_tiger ;
27005: LD_ADDR_OWVAR 28
27009: PUSH
27010: LD_INT 14
27012: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27013: LD_ADDR_OWVAR 31
27017: PUSH
27018: LD_EXP 37
27022: PUSH
27023: LD_INT 0
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: LD_INT 0
27031: PUSH
27032: EMPTY
27033: LIST
27034: LIST
27035: LIST
27036: LIST
27037: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27038: LD_ADDR_OWVAR 35
27042: PUSH
27043: LD_INT 5
27045: NEG
27046: PPUSH
27047: LD_INT 5
27049: PPUSH
27050: CALL_OW 12
27054: PUSH
27055: LD_OWVAR 67
27059: MUL
27060: ST_TO_ADDR
// un = CreateHuman ;
27061: LD_ADDR_VAR 0 3
27065: PUSH
27066: CALL_OW 44
27070: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27071: LD_VAR 0 3
27075: PPUSH
27076: LD_INT 6
27078: PPUSH
27079: LD_INT 0
27081: PPUSH
27082: CALL_OW 49
// end ;
27086: GO 26978
27088: POP
27089: POP
// for i = 1 to rand ( 3 , 4 ) do
27090: LD_ADDR_VAR 0 2
27094: PUSH
27095: DOUBLE
27096: LD_INT 1
27098: DEC
27099: ST_TO_ADDR
27100: LD_INT 3
27102: PPUSH
27103: LD_INT 4
27105: PPUSH
27106: CALL_OW 12
27110: PUSH
27111: FOR_TO
27112: IFFALSE 27206
// begin hc_sex = sex_male ;
27114: LD_ADDR_OWVAR 27
27118: PUSH
27119: LD_INT 1
27121: ST_TO_ADDR
// uc_side = 0 ;
27122: LD_ADDR_OWVAR 20
27126: PUSH
27127: LD_INT 0
27129: ST_TO_ADDR
// uc_nation = nation_nature ;
27130: LD_ADDR_OWVAR 21
27134: PUSH
27135: LD_INT 0
27137: ST_TO_ADDR
// hc_class = 18 ;
27138: LD_ADDR_OWVAR 28
27142: PUSH
27143: LD_INT 18
27145: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27146: LD_ADDR_OWVAR 31
27150: PUSH
27151: LD_EXP 37
27155: PUSH
27156: LD_INT 0
27158: PUSH
27159: LD_INT 0
27161: PUSH
27162: LD_INT 0
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: ST_TO_ADDR
// hc_agressivity = 0 ;
27171: LD_ADDR_OWVAR 35
27175: PUSH
27176: LD_INT 0
27178: ST_TO_ADDR
// un = CreateHuman ;
27179: LD_ADDR_VAR 0 3
27183: PUSH
27184: CALL_OW 44
27188: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27189: LD_VAR 0 3
27193: PPUSH
27194: LD_INT 6
27196: PPUSH
27197: LD_INT 0
27199: PPUSH
27200: CALL_OW 49
// end ;
27204: GO 27111
27206: POP
27207: POP
// end ; end_of_file
27208: LD_VAR 0 1
27212: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
27213: LD_EXP 46
27217: PUSH
27218: LD_INT 1
27220: EQUAL
27221: IFFALSE 27309
27223: GO 27225
27225: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
27226: LD_INT 7
27228: PPUSH
27229: LD_INT 5
27231: PPUSH
27232: LD_INT 4
27234: PUSH
27235: LD_INT 5
27237: PUSH
27238: LD_INT 6
27240: PUSH
27241: LD_INT 6
27243: PUSH
27244: EMPTY
27245: LIST
27246: LIST
27247: LIST
27248: LIST
27249: PUSH
27250: LD_OWVAR 67
27254: ARRAY
27255: PPUSH
27256: LD_EXP 36
27260: PPUSH
27261: LD_EXP 37
27265: PPUSH
27266: CALL_OW 12
27270: PPUSH
27271: LD_INT 2
27273: PPUSH
27274: LD_INT 1
27276: PPUSH
27277: LD_INT 1
27279: PPUSH
27280: EMPTY
27281: PPUSH
27282: LD_INT 25
27284: PUSH
27285: LD_INT 26
27287: PUSH
27288: LD_INT 27
27290: PUSH
27291: LD_INT 28
27293: PUSH
27294: EMPTY
27295: LIST
27296: LIST
27297: LIST
27298: LIST
27299: PPUSH
27300: EMPTY
27301: PPUSH
27302: LD_INT 1
27304: PPUSH
27305: CALL 17224 0 11
27309: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27310: LD_EXP 46
27314: PUSH
27315: LD_INT 1
27317: EQUAL
27318: IFFALSE 27410
27320: GO 27322
27322: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
27323: LD_INT 5
27325: PPUSH
27326: LD_INT 2
27328: PPUSH
27329: LD_INT 5
27331: PUSH
27332: LD_INT 6
27334: PUSH
27335: LD_INT 8
27337: PUSH
27338: LD_INT 9
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: LIST
27345: LIST
27346: PUSH
27347: LD_OWVAR 67
27351: ARRAY
27352: PPUSH
27353: LD_INT 0
27355: PPUSH
27356: LD_INT 0
27358: PPUSH
27359: LD_INT 2
27361: PUSH
27362: LD_INT 4
27364: PUSH
27365: LD_INT 5
27367: PUSH
27368: EMPTY
27369: LIST
27370: LIST
27371: LIST
27372: PUSH
27373: LD_OWVAR 67
27377: ARRAY
27378: PPUSH
27379: LD_INT 0
27381: PPUSH
27382: LD_EXP 36
27386: PPUSH
27387: LD_EXP 37
27391: PPUSH
27392: CALL_OW 12
27396: PPUSH
27397: LD_INT 7
27399: PPUSH
27400: LD_INT 9
27402: PPUSH
27403: LD_INT 1
27405: PPUSH
27406: CALL 18928 0 11
27410: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27411: LD_EXP 46
27415: PUSH
27416: LD_INT 1
27418: EQUAL
27419: IFFALSE 27428
27421: GO 27423
27423: DISABLE
// PrepareArabianSheik ;
27424: CALL 4713 0 0
27428: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27429: LD_EXP 29
27433: PUSH
27434: LD_EXP 64
27438: PUSH
27439: LD_INT 1
27441: EQUAL
27442: AND
27443: IFFALSE 27512
27445: GO 27447
27447: DISABLE
// begin enable ;
27448: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
27449: LD_INT 6
27451: PPUSH
27452: LD_INT 3
27454: PPUSH
27455: LD_EXP 60
27459: PPUSH
27460: LD_INT 0
27462: PPUSH
27463: LD_OWVAR 67
27467: PPUSH
27468: LD_INT 0
27470: PPUSH
27471: LD_EXP 60
27475: PUSH
27476: LD_INT 3
27478: DIV
27479: PUSH
27480: LD_INT 1
27482: PLUS
27483: PPUSH
27484: LD_EXP 36
27488: PPUSH
27489: LD_EXP 37
27493: PPUSH
27494: CALL_OW 12
27498: PPUSH
27499: LD_INT 17
27501: PPUSH
27502: LD_INT 18
27504: PPUSH
27505: LD_INT 1
27507: PPUSH
27508: CALL 18928 0 11
// end ;
27512: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27513: LD_EXP 29
27517: PUSH
27518: LD_EXP 64
27522: PUSH
27523: LD_INT 1
27525: EQUAL
27526: AND
27527: IFFALSE 27604
27529: GO 27531
27531: DISABLE
// begin enable ;
27532: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
27533: LD_INT 17
27535: PPUSH
27536: LD_INT 6
27538: PPUSH
27539: LD_EXP 59
27543: PPUSH
27544: LD_EXP 36
27548: PPUSH
27549: LD_EXP 37
27553: PPUSH
27554: CALL_OW 12
27558: PPUSH
27559: LD_INT 3
27561: PPUSH
27562: LD_INT 1
27564: PPUSH
27565: LD_INT 3
27567: PUSH
27568: LD_INT 3
27570: PUSH
27571: EMPTY
27572: LIST
27573: LIST
27574: PPUSH
27575: LD_INT 43
27577: PUSH
27578: LD_INT 44
27580: PUSH
27581: LD_INT 45
27583: PUSH
27584: LD_INT 46
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: LIST
27591: LIST
27592: PPUSH
27593: EMPTY
27594: PPUSH
27595: EMPTY
27596: PPUSH
27597: LD_INT 1
27599: PPUSH
27600: CALL 17224 0 11
// end ;
27604: END
// every 10 10$00 trigger joinEpsilon do
27605: LD_EXP 29
27609: IFFALSE 27663
27611: GO 27613
27613: DISABLE
// begin enable ;
27614: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
27615: LD_ADDR_EXP 59
27619: PUSH
27620: LD_EXP 59
27624: PUSH
27625: LD_INT 1
27627: PPUSH
27628: LD_OWVAR 67
27632: PPUSH
27633: CALL_OW 12
27637: PLUS
27638: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
27639: LD_ADDR_EXP 60
27643: PUSH
27644: LD_EXP 60
27648: PUSH
27649: LD_INT 1
27651: PPUSH
27652: LD_OWVAR 67
27656: PPUSH
27657: CALL_OW 12
27661: PLUS
27662: ST_TO_ADDR
// end ;
27663: END
// every 21 21$0 trigger attackAvalaible = 1 do
27664: LD_EXP 64
27668: PUSH
27669: LD_INT 1
27671: EQUAL
27672: IFFALSE 27685
27674: GO 27676
27676: DISABLE
// attackAvalaible = 0 ; end_of_file
27677: LD_ADDR_EXP 64
27681: PUSH
27682: LD_INT 0
27684: ST_TO_ADDR
27685: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
27686: LD_INT 54
27688: PPUSH
27689: LD_INT 1
27691: PPUSH
27692: CALL_OW 321
27696: PUSH
27697: LD_INT 2
27699: EQUAL
27700: PUSH
27701: LD_INT 55
27703: PPUSH
27704: LD_INT 1
27706: PPUSH
27707: CALL_OW 321
27711: PUSH
27712: LD_INT 2
27714: EQUAL
27715: AND
27716: PUSH
27717: LD_INT 21
27719: PPUSH
27720: LD_INT 1
27722: PPUSH
27723: CALL_OW 321
27727: PUSH
27728: LD_INT 2
27730: EQUAL
27731: AND
27732: PUSH
27733: LD_INT 22
27735: PPUSH
27736: LD_INT 1
27738: PPUSH
27739: CALL_OW 321
27743: PUSH
27744: LD_INT 2
27746: EQUAL
27747: AND
27748: PUSH
27749: LD_INT 12
27751: PPUSH
27752: LD_INT 1
27754: PPUSH
27755: CALL_OW 321
27759: PUSH
27760: LD_INT 1
27762: EQUAL
27763: PUSH
27764: LD_INT 32
27766: PPUSH
27767: LD_INT 1
27769: PPUSH
27770: CALL_OW 321
27774: PUSH
27775: LD_INT 1
27777: EQUAL
27778: OR
27779: PUSH
27780: EMPTY
27781: LIST
27782: AND
27783: PUSH
27784: LD_EXP 48
27788: PUSH
27789: LD_INT 1
27791: EQUAL
27792: AND
27793: PUSH
27794: LD_INT 22
27796: PUSH
27797: LD_INT 3
27799: PUSH
27800: EMPTY
27801: LIST
27802: LIST
27803: PUSH
27804: LD_INT 21
27806: PUSH
27807: LD_INT 1
27809: PUSH
27810: EMPTY
27811: LIST
27812: LIST
27813: PUSH
27814: EMPTY
27815: LIST
27816: LIST
27817: PPUSH
27818: CALL_OW 69
27822: PUSH
27823: LD_INT 0
27825: EQUAL
27826: AND
27827: IFFALSE 27883
27829: GO 27831
27831: DISABLE
// begin case query ( QEndMission ) of 1 :
27832: LD_STRING QEndMission
27834: PPUSH
27835: CALL_OW 97
27839: PUSH
27840: LD_INT 1
27842: DOUBLE
27843: EQUAL
27844: IFTRUE 27848
27846: GO 27859
27848: POP
// begin end_the_mission_allowed = true ;
27849: LD_ADDR_OWVAR 57
27853: PUSH
27854: LD_INT 1
27856: ST_TO_ADDR
// end ; 2 :
27857: GO 27883
27859: LD_INT 2
27861: DOUBLE
27862: EQUAL
27863: IFTRUE 27867
27865: GO 27882
27867: POP
// begin fastEnd = 1 ;
27868: LD_ADDR_EXP 63
27872: PUSH
27873: LD_INT 1
27875: ST_TO_ADDR
// FinishMission ;
27876: CALL 27928 0 0
// end ; end ;
27880: GO 27883
27882: POP
// end ;
27883: END
// every 0 0$1 trigger spawnRussians and not ruDepotConstructed and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
27884: LD_EXP 58
27888: PUSH
27889: LD_EXP 57
27893: NOT
27894: AND
27895: PUSH
27896: LD_INT 22
27898: PUSH
27899: LD_INT 3
27901: PUSH
27902: EMPTY
27903: LIST
27904: LIST
27905: PPUSH
27906: CALL_OW 69
27910: PUSH
27911: LD_INT 0
27913: EQUAL
27914: AND
27915: IFFALSE 27927
27917: GO 27919
27919: DISABLE
// SetAchievement ( ACH_TACT ) ;
27920: LD_STRING ACH_TACT
27922: PPUSH
27923: CALL_OW 543
27927: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
27928: LD_INT 0
27930: PPUSH
27931: PPUSH
27932: PPUSH
27933: PPUSH
// if not snipersTrained then
27934: LD_EXP 62
27938: NOT
27939: IFFALSE 27948
// SetAchievement ( ACH_SNIPER ) ;
27941: LD_STRING ACH_SNIPER
27943: PPUSH
27944: CALL_OW 543
// m1 := false ;
27948: LD_ADDR_VAR 0 2
27952: PUSH
27953: LD_INT 0
27955: ST_TO_ADDR
// m2 := false ;
27956: LD_ADDR_VAR 0 3
27960: PUSH
27961: LD_INT 0
27963: ST_TO_ADDR
// m3 := false ;
27964: LD_ADDR_VAR 0 4
27968: PUSH
27969: LD_INT 0
27971: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
27972: LD_EXP 53
27976: PPUSH
27977: LD_STRING 10_KhatamStatus_1
27979: PPUSH
27980: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
27984: LD_EXP 52
27988: PPUSH
27989: LD_STRING 10_GensherEscape_1
27991: PPUSH
27992: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
27996: LD_INT 12
27998: PPUSH
27999: LD_INT 1
28001: PPUSH
28002: CALL_OW 321
28006: PUSH
28007: LD_INT 2
28009: EQUAL
28010: IFFALSE 28032
// begin AddMedal ( sights , 1 ) ;
28012: LD_STRING sights
28014: PPUSH
28015: LD_INT 1
28017: PPUSH
28018: CALL_OW 101
// m1 := true ;
28022: LD_ADDR_VAR 0 2
28026: PUSH
28027: LD_INT 1
28029: ST_TO_ADDR
// end else
28030: GO 28043
// begin AddMedal ( sights , - 1 ) ;
28032: LD_STRING sights
28034: PPUSH
28035: LD_INT 1
28037: NEG
28038: PPUSH
28039: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
28043: LD_INT 32
28045: PPUSH
28046: LD_INT 1
28048: PPUSH
28049: CALL_OW 321
28053: PUSH
28054: LD_INT 2
28056: EQUAL
28057: IFFALSE 28079
// begin AddMedal ( computers , 1 ) ;
28059: LD_STRING computers
28061: PPUSH
28062: LD_INT 1
28064: PPUSH
28065: CALL_OW 101
// m2 := true ;
28069: LD_ADDR_VAR 0 3
28073: PUSH
28074: LD_INT 1
28076: ST_TO_ADDR
// end else
28077: GO 28090
// begin AddMedal ( computers , - 1 ) ;
28079: LD_STRING computers
28081: PPUSH
28082: LD_INT 1
28084: NEG
28085: PPUSH
28086: CALL_OW 101
// end ; if arabianEscape = 0 then
28090: LD_EXP 47
28094: PUSH
28095: LD_INT 0
28097: EQUAL
28098: IFFALSE 28130
// begin AddMedal ( renegades , 2 ) ;
28100: LD_STRING renegades
28102: PPUSH
28103: LD_INT 2
28105: PPUSH
28106: CALL_OW 101
// m3 := true ;
28110: LD_ADDR_VAR 0 4
28114: PUSH
28115: LD_INT 1
28117: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
28118: LD_INT 0
28120: PPUSH
28121: LD_STRING 10_ScientistsEscape_1
28123: PPUSH
28124: CALL_OW 39
// end else
28128: GO 28141
// begin AddMedal ( renegades , - 1 ) ;
28130: LD_STRING renegades
28132: PPUSH
28133: LD_INT 1
28135: NEG
28136: PPUSH
28137: CALL_OW 101
// end ; SaveEpsilonBase ;
28141: CALL 28927 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
28145: LD_VAR 0 2
28149: PUSH
28150: LD_VAR 0 3
28154: AND
28155: PUSH
28156: LD_VAR 0 4
28160: AND
28161: PUSH
28162: LD_OWVAR 67
28166: PUSH
28167: LD_INT 3
28169: GREATEREQUAL
28170: AND
28171: IFFALSE 28183
// SetAchievementEX ( ACH_AMER , 10 ) ;
28173: LD_STRING ACH_AMER
28175: PPUSH
28176: LD_INT 10
28178: PPUSH
28179: CALL_OW 564
// if tick <= 40 40$00 then
28183: LD_OWVAR 1
28187: PUSH
28188: LD_INT 84000
28190: LESSEQUAL
28191: IFFALSE 28207
// begin wait ( 3 ) ;
28193: LD_INT 3
28195: PPUSH
28196: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
28200: LD_STRING ACH_ASPEED_10
28202: PPUSH
28203: CALL_OW 543
// end ; GiveMedals ( Main ) ;
28207: LD_STRING Main
28209: PPUSH
28210: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
28214: LD_INT 22
28216: PUSH
28217: LD_INT 1
28219: PUSH
28220: EMPTY
28221: LIST
28222: LIST
28223: PUSH
28224: LD_INT 23
28226: PUSH
28227: LD_INT 1
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: PUSH
28234: LD_INT 21
28236: PUSH
28237: LD_INT 1
28239: PUSH
28240: EMPTY
28241: LIST
28242: LIST
28243: PUSH
28244: LD_INT 2
28246: PUSH
28247: LD_INT 25
28249: PUSH
28250: LD_INT 1
28252: PUSH
28253: EMPTY
28254: LIST
28255: LIST
28256: PUSH
28257: LD_INT 25
28259: PUSH
28260: LD_INT 2
28262: PUSH
28263: EMPTY
28264: LIST
28265: LIST
28266: PUSH
28267: LD_INT 25
28269: PUSH
28270: LD_INT 3
28272: PUSH
28273: EMPTY
28274: LIST
28275: LIST
28276: PUSH
28277: LD_INT 25
28279: PUSH
28280: LD_INT 4
28282: PUSH
28283: EMPTY
28284: LIST
28285: LIST
28286: PUSH
28287: LD_INT 25
28289: PUSH
28290: LD_INT 5
28292: PUSH
28293: EMPTY
28294: LIST
28295: LIST
28296: PUSH
28297: LD_INT 25
28299: PUSH
28300: LD_INT 8
28302: PUSH
28303: EMPTY
28304: LIST
28305: LIST
28306: PUSH
28307: EMPTY
28308: LIST
28309: LIST
28310: LIST
28311: LIST
28312: LIST
28313: LIST
28314: LIST
28315: PUSH
28316: EMPTY
28317: LIST
28318: LIST
28319: LIST
28320: LIST
28321: PPUSH
28322: CALL_OW 69
28326: PPUSH
28327: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
28331: LD_EXP 1
28335: PPUSH
28336: LD_EXP 54
28340: PUSH
28341: LD_STRING JMM
28343: STR
28344: PPUSH
28345: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
28349: LD_EXP 2
28353: PPUSH
28354: LD_EXP 54
28358: PUSH
28359: LD_STRING Brown
28361: STR
28362: PPUSH
28363: CALL 11408 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
28367: LD_EXP 3
28371: PPUSH
28372: LD_EXP 54
28376: PUSH
28377: LD_STRING Donaldson
28379: STR
28380: PPUSH
28381: CALL 11408 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
28385: LD_EXP 4
28389: PPUSH
28390: LD_EXP 54
28394: PUSH
28395: LD_STRING Bobby
28397: STR
28398: PPUSH
28399: CALL 11408 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
28403: LD_EXP 5
28407: PPUSH
28408: LD_EXP 54
28412: PUSH
28413: LD_STRING Cyrus
28415: STR
28416: PPUSH
28417: CALL 11408 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
28421: LD_EXP 6
28425: PPUSH
28426: LD_EXP 54
28430: PUSH
28431: LD_STRING Lisa
28433: STR
28434: PPUSH
28435: CALL 11408 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
28439: LD_EXP 7
28443: PPUSH
28444: LD_EXP 54
28448: PUSH
28449: LD_STRING Frank
28451: STR
28452: PPUSH
28453: CALL 11408 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
28457: LD_EXP 8
28461: PPUSH
28462: LD_EXP 54
28466: PUSH
28467: LD_STRING Kikuchi
28469: STR
28470: PPUSH
28471: CALL 11408 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
28475: LD_EXP 9
28479: PPUSH
28480: LD_EXP 54
28484: PUSH
28485: LD_STRING Houten
28487: STR
28488: PPUSH
28489: CALL 11408 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
28493: LD_EXP 10
28497: PPUSH
28498: LD_EXP 54
28502: PUSH
28503: LD_STRING Gary
28505: STR
28506: PPUSH
28507: CALL 11408 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
28511: LD_EXP 19
28515: PPUSH
28516: LD_EXP 54
28520: PUSH
28521: LD_STRING Cornell
28523: STR
28524: PPUSH
28525: CALL 11408 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
28529: LD_EXP 11
28533: PPUSH
28534: LD_EXP 54
28538: PUSH
28539: LD_STRING Simms
28541: STR
28542: PPUSH
28543: CALL 11408 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
28547: LD_EXP 12
28551: PPUSH
28552: LD_EXP 54
28556: PUSH
28557: LD_STRING Denis
28559: STR
28560: PPUSH
28561: CALL 11408 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
28565: LD_EXP 13
28569: PPUSH
28570: LD_EXP 54
28574: PUSH
28575: LD_STRING Joan
28577: STR
28578: PPUSH
28579: CALL 11408 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
28583: LD_EXP 15
28587: PPUSH
28588: LD_EXP 54
28592: PUSH
28593: LD_STRING Gladstone
28595: STR
28596: PPUSH
28597: CALL 11408 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
28601: LD_EXP 17
28605: PPUSH
28606: LD_EXP 54
28610: PUSH
28611: LD_STRING DeltaDoctor
28613: STR
28614: PPUSH
28615: CALL 11408 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
28619: LD_EXP 22
28623: PPUSH
28624: LD_STRING 10c_lock
28626: PPUSH
28627: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
28631: LD_INT 50
28633: PUSH
28634: EMPTY
28635: LIST
28636: PUSH
28637: LD_INT 22
28639: PUSH
28640: LD_INT 1
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: PUSH
28647: LD_INT 21
28649: PUSH
28650: LD_INT 1
28652: PUSH
28653: EMPTY
28654: LIST
28655: LIST
28656: PUSH
28657: LD_INT 2
28659: PUSH
28660: LD_INT 25
28662: PUSH
28663: LD_INT 1
28665: PUSH
28666: EMPTY
28667: LIST
28668: LIST
28669: PUSH
28670: LD_INT 25
28672: PUSH
28673: LD_INT 2
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 25
28682: PUSH
28683: LD_INT 3
28685: PUSH
28686: EMPTY
28687: LIST
28688: LIST
28689: PUSH
28690: LD_INT 25
28692: PUSH
28693: LD_INT 4
28695: PUSH
28696: EMPTY
28697: LIST
28698: LIST
28699: PUSH
28700: LD_INT 25
28702: PUSH
28703: LD_INT 5
28705: PUSH
28706: EMPTY
28707: LIST
28708: LIST
28709: PUSH
28710: LD_INT 25
28712: PUSH
28713: LD_INT 8
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: EMPTY
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: LIST
28726: LIST
28727: LIST
28728: PUSH
28729: EMPTY
28730: LIST
28731: LIST
28732: LIST
28733: LIST
28734: PPUSH
28735: CALL_OW 69
28739: PUSH
28740: LD_EXP 1
28744: PUSH
28745: LD_EXP 2
28749: PUSH
28750: LD_EXP 3
28754: PUSH
28755: LD_EXP 4
28759: PUSH
28760: LD_EXP 5
28764: PUSH
28765: LD_EXP 6
28769: PUSH
28770: LD_EXP 7
28774: PUSH
28775: LD_EXP 15
28779: PUSH
28780: LD_EXP 8
28784: PUSH
28785: LD_EXP 12
28789: PUSH
28790: LD_EXP 13
28794: PUSH
28795: LD_EXP 9
28799: PUSH
28800: LD_EXP 11
28804: PUSH
28805: LD_EXP 10
28809: PUSH
28810: LD_EXP 17
28814: PUSH
28815: LD_EXP 19
28819: PUSH
28820: EMPTY
28821: LIST
28822: LIST
28823: LIST
28824: LIST
28825: LIST
28826: LIST
28827: LIST
28828: LIST
28829: LIST
28830: LIST
28831: LIST
28832: LIST
28833: LIST
28834: LIST
28835: LIST
28836: LIST
28837: DIFF
28838: PPUSH
28839: LD_STRING 10_other_survivors
28841: PPUSH
28842: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
28846: LD_INT 50
28848: PUSH
28849: EMPTY
28850: LIST
28851: PUSH
28852: LD_INT 22
28854: PUSH
28855: LD_INT 1
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 21
28864: PUSH
28865: LD_INT 1
28867: PUSH
28868: EMPTY
28869: LIST
28870: LIST
28871: PUSH
28872: LD_INT 2
28874: PUSH
28875: LD_INT 25
28877: PUSH
28878: LD_INT 16
28880: PUSH
28881: EMPTY
28882: LIST
28883: LIST
28884: PUSH
28885: LD_INT 25
28887: PUSH
28888: LD_INT 12
28890: PUSH
28891: EMPTY
28892: LIST
28893: LIST
28894: PUSH
28895: EMPTY
28896: LIST
28897: LIST
28898: LIST
28899: PUSH
28900: EMPTY
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: PPUSH
28906: CALL_OW 69
28910: PPUSH
28911: LD_STRING 10_ape
28913: PPUSH
28914: CALL_OW 38
// YouWin ;
28918: CALL_OW 103
// end ;
28922: LD_VAR 0 1
28926: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
28927: LD_INT 0
28929: PPUSH
28930: PPUSH
28931: PPUSH
28932: PPUSH
// epsilonBase = [ ] ;
28933: LD_ADDR_VAR 0 2
28937: PUSH
28938: EMPTY
28939: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
28940: LD_ADDR_VAR 0 3
28944: PUSH
28945: LD_INT 22
28947: PUSH
28948: LD_INT 1
28950: PUSH
28951: EMPTY
28952: LIST
28953: LIST
28954: PUSH
28955: LD_INT 21
28957: PUSH
28958: LD_INT 3
28960: PUSH
28961: EMPTY
28962: LIST
28963: LIST
28964: PUSH
28965: LD_INT 50
28967: PUSH
28968: EMPTY
28969: LIST
28970: PUSH
28971: EMPTY
28972: LIST
28973: LIST
28974: LIST
28975: PPUSH
28976: CALL_OW 69
28980: ST_TO_ADDR
// for i in buildings do
28981: LD_ADDR_VAR 0 4
28985: PUSH
28986: LD_VAR 0 3
28990: PUSH
28991: FOR_IN
28992: IFFALSE 29444
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
28994: LD_VAR 0 4
28998: PPUSH
28999: CALL_OW 266
29003: PUSH
29004: LD_INT 6
29006: PUSH
29007: LD_INT 7
29009: PUSH
29010: LD_INT 8
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: LIST
29017: IN
29018: IFFALSE 29132
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
29020: LD_ADDR_VAR 0 2
29024: PUSH
29025: LD_VAR 0 2
29029: PUSH
29030: LD_VAR 0 4
29034: PPUSH
29035: CALL_OW 266
29039: PUSH
29040: LD_VAR 0 4
29044: PPUSH
29045: CALL_OW 250
29049: PUSH
29050: LD_VAR 0 4
29054: PPUSH
29055: CALL_OW 251
29059: PUSH
29060: LD_VAR 0 4
29064: PPUSH
29065: CALL_OW 254
29069: PUSH
29070: LD_VAR 0 4
29074: PPUSH
29075: CALL_OW 267
29079: PUSH
29080: LD_VAR 0 4
29084: PPUSH
29085: CALL_OW 248
29089: PUSH
29090: LD_VAR 0 4
29094: PPUSH
29095: LD_INT 1
29097: PPUSH
29098: CALL_OW 268
29102: PUSH
29103: LD_VAR 0 4
29107: PPUSH
29108: LD_INT 2
29110: PPUSH
29111: CALL_OW 268
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: LIST
29120: LIST
29121: LIST
29122: LIST
29123: LIST
29124: LIST
29125: PUSH
29126: EMPTY
29127: LIST
29128: ADD
29129: ST_TO_ADDR
29130: GO 29442
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
29132: LD_VAR 0 4
29136: PPUSH
29137: CALL_OW 266
29141: PUSH
29142: LD_INT 32
29144: EQUAL
29145: PUSH
29146: LD_VAR 0 4
29150: PPUSH
29151: CALL_OW 266
29155: PUSH
29156: LD_INT 33
29158: EQUAL
29159: OR
29160: IFFALSE 29257
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
29162: LD_ADDR_VAR 0 2
29166: PUSH
29167: LD_VAR 0 2
29171: PUSH
29172: LD_VAR 0 4
29176: PPUSH
29177: CALL_OW 266
29181: PUSH
29182: LD_VAR 0 4
29186: PPUSH
29187: CALL_OW 250
29191: PUSH
29192: LD_VAR 0 4
29196: PPUSH
29197: CALL_OW 251
29201: PUSH
29202: LD_VAR 0 4
29206: PPUSH
29207: CALL_OW 254
29211: PUSH
29212: LD_VAR 0 4
29216: PPUSH
29217: CALL_OW 267
29221: PUSH
29222: LD_VAR 0 4
29226: PPUSH
29227: CALL_OW 248
29231: PUSH
29232: LD_VAR 0 4
29236: PPUSH
29237: CALL_OW 269
29241: PUSH
29242: EMPTY
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: LIST
29250: PUSH
29251: EMPTY
29252: LIST
29253: ADD
29254: ST_TO_ADDR
29255: GO 29442
// if GetBType ( i ) = b_factory then
29257: LD_VAR 0 4
29261: PPUSH
29262: CALL_OW 266
29266: PUSH
29267: LD_INT 3
29269: EQUAL
29270: IFFALSE 29360
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
29272: LD_ADDR_VAR 0 2
29276: PUSH
29277: LD_VAR 0 2
29281: PPUSH
29282: LD_INT 1
29284: PPUSH
29285: LD_VAR 0 4
29289: PPUSH
29290: CALL_OW 266
29294: PUSH
29295: LD_VAR 0 4
29299: PPUSH
29300: CALL_OW 250
29304: PUSH
29305: LD_VAR 0 4
29309: PPUSH
29310: CALL_OW 251
29314: PUSH
29315: LD_VAR 0 4
29319: PPUSH
29320: CALL_OW 254
29324: PUSH
29325: LD_VAR 0 4
29329: PPUSH
29330: CALL_OW 267
29334: PUSH
29335: LD_VAR 0 4
29339: PPUSH
29340: CALL_OW 248
29344: PUSH
29345: EMPTY
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: PPUSH
29353: CALL_OW 2
29357: ST_TO_ADDR
29358: GO 29442
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
29360: LD_ADDR_VAR 0 2
29364: PUSH
29365: LD_VAR 0 2
29369: PUSH
29370: LD_VAR 0 4
29374: PPUSH
29375: CALL_OW 266
29379: PUSH
29380: LD_VAR 0 4
29384: PPUSH
29385: CALL_OW 250
29389: PUSH
29390: LD_VAR 0 4
29394: PPUSH
29395: CALL_OW 251
29399: PUSH
29400: LD_VAR 0 4
29404: PPUSH
29405: CALL_OW 254
29409: PUSH
29410: LD_VAR 0 4
29414: PPUSH
29415: CALL_OW 267
29419: PUSH
29420: LD_VAR 0 4
29424: PPUSH
29425: CALL_OW 248
29429: PUSH
29430: EMPTY
29431: LIST
29432: LIST
29433: LIST
29434: LIST
29435: LIST
29436: LIST
29437: PUSH
29438: EMPTY
29439: LIST
29440: ADD
29441: ST_TO_ADDR
// end ;
29442: GO 28991
29444: POP
29445: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
29446: LD_VAR 0 2
29450: PPUSH
29451: LD_STRING 10_EpsilonBase
29453: PPUSH
29454: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
29458: LD_INT 19
29460: PPUSH
29461: LD_STRING 10_EpsilonEnv
29463: PPUSH
29464: CALL 29473 0 2
// end ;
29468: LD_VAR 0 1
29472: RET
// export function SaveEnvironment ( area , saveId ) ; begin
29473: LD_INT 0
29475: PPUSH
// result := ListEnvironmentArea ( area ) ;
29476: LD_ADDR_VAR 0 3
29480: PUSH
29481: LD_VAR 0 1
29485: PPUSH
29486: CALL_OW 353
29490: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
29491: LD_VAR 0 3
29495: PPUSH
29496: LD_VAR 0 2
29500: PPUSH
29501: CALL_OW 39
// end ; end_of_file
29505: LD_VAR 0 3
29509: RET
// every 0 0$01 do var timer ;
29510: GO 29512
29512: DISABLE
29513: LD_INT 0
29515: PPUSH
// begin timer := 0 0$20 ;
29516: LD_ADDR_VAR 0 1
29520: PUSH
29521: LD_INT 700
29523: ST_TO_ADDR
// repeat wait ( timer ) ;
29524: LD_VAR 0 1
29528: PPUSH
29529: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 14 then
29533: LD_EXP 56
29537: PUSH
29538: LD_INT 6
29540: GREATEREQUAL
29541: PUSH
29542: LD_EXP 56
29546: PUSH
29547: LD_INT 14
29549: LESS
29550: AND
29551: IFFALSE 29567
// timer := timer + 0 0$3 ;
29553: LD_ADDR_VAR 0 1
29557: PUSH
29558: LD_VAR 0 1
29562: PUSH
29563: LD_INT 105
29565: PLUS
29566: ST_TO_ADDR
// if cratesSpawned >= 14 then
29567: LD_EXP 56
29571: PUSH
29572: LD_INT 14
29574: GREATEREQUAL
29575: IFFALSE 29591
// timer := timer + 0 0$6 ;
29577: LD_ADDR_VAR 0 1
29581: PUSH
29582: LD_VAR 0 1
29586: PUSH
29587: LD_INT 210
29589: PLUS
29590: ST_TO_ADDR
// if timer > 2 2$00 then
29591: LD_VAR 0 1
29595: PUSH
29596: LD_INT 4200
29598: GREATER
29599: IFFALSE 29609
// timer := 0 0$45 ;
29601: LD_ADDR_VAR 0 1
29605: PUSH
29606: LD_INT 1575
29608: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
29609: LD_INT 1
29611: PPUSH
29612: LD_INT 5
29614: PPUSH
29615: CALL_OW 12
29619: PPUSH
29620: LD_INT 16
29622: PPUSH
29623: LD_INT 1
29625: PPUSH
29626: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
29630: LD_ADDR_EXP 56
29634: PUSH
29635: LD_EXP 56
29639: PUSH
29640: LD_INT 1
29642: PLUS
29643: ST_TO_ADDR
// until false ;
29644: LD_INT 0
29646: IFFALSE 29524
// end ; end_of_file
29648: PPOPN 1
29650: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
29651: LD_INT 0
29653: PPUSH
// ar_miner := 81 ;
29654: LD_ADDR_EXP 76
29658: PUSH
29659: LD_INT 81
29661: ST_TO_ADDR
// ar_crane := 88 ;
29662: LD_ADDR_EXP 75
29666: PUSH
29667: LD_INT 88
29669: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
29670: LD_ADDR_EXP 70
29674: PUSH
29675: LD_INT 89
29677: ST_TO_ADDR
// us_hack := 99 ;
29678: LD_ADDR_EXP 71
29682: PUSH
29683: LD_INT 99
29685: ST_TO_ADDR
// us_artillery := 97 ;
29686: LD_ADDR_EXP 72
29690: PUSH
29691: LD_INT 97
29693: ST_TO_ADDR
// ar_bio_bomb := 91 ;
29694: LD_ADDR_EXP 73
29698: PUSH
29699: LD_INT 91
29701: ST_TO_ADDR
// ar_mortar := 92 ;
29702: LD_ADDR_EXP 74
29706: PUSH
29707: LD_INT 92
29709: ST_TO_ADDR
// ru_radar := 98 ;
29710: LD_ADDR_EXP 69
29714: PUSH
29715: LD_INT 98
29717: ST_TO_ADDR
// tech_Artillery := 80 ;
29718: LD_ADDR_EXP 77
29722: PUSH
29723: LD_INT 80
29725: ST_TO_ADDR
// tech_RadMat := 81 ;
29726: LD_ADDR_EXP 78
29730: PUSH
29731: LD_INT 81
29733: ST_TO_ADDR
// tech_BasicTools := 82 ;
29734: LD_ADDR_EXP 79
29738: PUSH
29739: LD_INT 82
29741: ST_TO_ADDR
// tech_Cargo := 83 ;
29742: LD_ADDR_EXP 80
29746: PUSH
29747: LD_INT 83
29749: ST_TO_ADDR
// tech_Track := 84 ;
29750: LD_ADDR_EXP 81
29754: PUSH
29755: LD_INT 84
29757: ST_TO_ADDR
// tech_Crane := 85 ;
29758: LD_ADDR_EXP 82
29762: PUSH
29763: LD_INT 85
29765: ST_TO_ADDR
// tech_Bulldozer := 86 ;
29766: LD_ADDR_EXP 83
29770: PUSH
29771: LD_INT 86
29773: ST_TO_ADDR
// tech_Hovercraft := 87 ;
29774: LD_ADDR_EXP 84
29778: PUSH
29779: LD_INT 87
29781: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
29782: LD_ADDR_EXP 85
29786: PUSH
29787: LD_INT 88
29789: ST_TO_ADDR
// class_mastodont := 31 ;
29790: LD_ADDR_EXP 86
29794: PUSH
29795: LD_INT 31
29797: ST_TO_ADDR
// class_horse := 21 ;
29798: LD_ADDR_EXP 87
29802: PUSH
29803: LD_INT 21
29805: ST_TO_ADDR
// end ;
29806: LD_VAR 0 1
29810: RET
// every 1 do
29811: GO 29813
29813: DISABLE
// InitGlobalVariables ; end_of_file end_of_file
29814: CALL 29651 0 0
29818: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
29819: LD_INT 0
29821: PPUSH
// if p2 = 100 then
29822: LD_VAR 0 2
29826: PUSH
29827: LD_INT 100
29829: EQUAL
29830: IFFALSE 30779
// begin if not StreamModeActive then
29832: LD_EXP 88
29836: NOT
29837: IFFALSE 29847
// StreamModeActive := true ;
29839: LD_ADDR_EXP 88
29843: PUSH
29844: LD_INT 1
29846: ST_TO_ADDR
// if p3 = 0 then
29847: LD_VAR 0 3
29851: PUSH
29852: LD_INT 0
29854: EQUAL
29855: IFFALSE 29861
// InitStreamMode ;
29857: CALL 30939 0 0
// if p3 = 1 then
29861: LD_VAR 0 3
29865: PUSH
29866: LD_INT 1
29868: EQUAL
29869: IFFALSE 29879
// sRocket := true ;
29871: LD_ADDR_EXP 93
29875: PUSH
29876: LD_INT 1
29878: ST_TO_ADDR
// if p3 = 2 then
29879: LD_VAR 0 3
29883: PUSH
29884: LD_INT 2
29886: EQUAL
29887: IFFALSE 29897
// sSpeed := true ;
29889: LD_ADDR_EXP 92
29893: PUSH
29894: LD_INT 1
29896: ST_TO_ADDR
// if p3 = 3 then
29897: LD_VAR 0 3
29901: PUSH
29902: LD_INT 3
29904: EQUAL
29905: IFFALSE 29915
// sEngine := true ;
29907: LD_ADDR_EXP 94
29911: PUSH
29912: LD_INT 1
29914: ST_TO_ADDR
// if p3 = 4 then
29915: LD_VAR 0 3
29919: PUSH
29920: LD_INT 4
29922: EQUAL
29923: IFFALSE 29933
// sSpec := true ;
29925: LD_ADDR_EXP 91
29929: PUSH
29930: LD_INT 1
29932: ST_TO_ADDR
// if p3 = 5 then
29933: LD_VAR 0 3
29937: PUSH
29938: LD_INT 5
29940: EQUAL
29941: IFFALSE 29951
// sLevel := true ;
29943: LD_ADDR_EXP 95
29947: PUSH
29948: LD_INT 1
29950: ST_TO_ADDR
// if p3 = 6 then
29951: LD_VAR 0 3
29955: PUSH
29956: LD_INT 6
29958: EQUAL
29959: IFFALSE 29969
// sArmoury := true ;
29961: LD_ADDR_EXP 96
29965: PUSH
29966: LD_INT 1
29968: ST_TO_ADDR
// if p3 = 7 then
29969: LD_VAR 0 3
29973: PUSH
29974: LD_INT 7
29976: EQUAL
29977: IFFALSE 29987
// sRadar := true ;
29979: LD_ADDR_EXP 97
29983: PUSH
29984: LD_INT 1
29986: ST_TO_ADDR
// if p3 = 8 then
29987: LD_VAR 0 3
29991: PUSH
29992: LD_INT 8
29994: EQUAL
29995: IFFALSE 30005
// sBunker := true ;
29997: LD_ADDR_EXP 98
30001: PUSH
30002: LD_INT 1
30004: ST_TO_ADDR
// if p3 = 9 then
30005: LD_VAR 0 3
30009: PUSH
30010: LD_INT 9
30012: EQUAL
30013: IFFALSE 30023
// sHack := true ;
30015: LD_ADDR_EXP 99
30019: PUSH
30020: LD_INT 1
30022: ST_TO_ADDR
// if p3 = 10 then
30023: LD_VAR 0 3
30027: PUSH
30028: LD_INT 10
30030: EQUAL
30031: IFFALSE 30041
// sFire := true ;
30033: LD_ADDR_EXP 100
30037: PUSH
30038: LD_INT 1
30040: ST_TO_ADDR
// if p3 = 11 then
30041: LD_VAR 0 3
30045: PUSH
30046: LD_INT 11
30048: EQUAL
30049: IFFALSE 30059
// sRefresh := true ;
30051: LD_ADDR_EXP 101
30055: PUSH
30056: LD_INT 1
30058: ST_TO_ADDR
// if p3 = 12 then
30059: LD_VAR 0 3
30063: PUSH
30064: LD_INT 12
30066: EQUAL
30067: IFFALSE 30077
// sExp := true ;
30069: LD_ADDR_EXP 102
30073: PUSH
30074: LD_INT 1
30076: ST_TO_ADDR
// if p3 = 13 then
30077: LD_VAR 0 3
30081: PUSH
30082: LD_INT 13
30084: EQUAL
30085: IFFALSE 30095
// sDepot := true ;
30087: LD_ADDR_EXP 103
30091: PUSH
30092: LD_INT 1
30094: ST_TO_ADDR
// if p3 = 14 then
30095: LD_VAR 0 3
30099: PUSH
30100: LD_INT 14
30102: EQUAL
30103: IFFALSE 30113
// sFlag := true ;
30105: LD_ADDR_EXP 104
30109: PUSH
30110: LD_INT 1
30112: ST_TO_ADDR
// if p3 = 15 then
30113: LD_VAR 0 3
30117: PUSH
30118: LD_INT 15
30120: EQUAL
30121: IFFALSE 30131
// sKamikadze := true ;
30123: LD_ADDR_EXP 112
30127: PUSH
30128: LD_INT 1
30130: ST_TO_ADDR
// if p3 = 16 then
30131: LD_VAR 0 3
30135: PUSH
30136: LD_INT 16
30138: EQUAL
30139: IFFALSE 30149
// sTroll := true ;
30141: LD_ADDR_EXP 113
30145: PUSH
30146: LD_INT 1
30148: ST_TO_ADDR
// if p3 = 17 then
30149: LD_VAR 0 3
30153: PUSH
30154: LD_INT 17
30156: EQUAL
30157: IFFALSE 30167
// sSlow := true ;
30159: LD_ADDR_EXP 114
30163: PUSH
30164: LD_INT 1
30166: ST_TO_ADDR
// if p3 = 18 then
30167: LD_VAR 0 3
30171: PUSH
30172: LD_INT 18
30174: EQUAL
30175: IFFALSE 30185
// sLack := true ;
30177: LD_ADDR_EXP 115
30181: PUSH
30182: LD_INT 1
30184: ST_TO_ADDR
// if p3 = 19 then
30185: LD_VAR 0 3
30189: PUSH
30190: LD_INT 19
30192: EQUAL
30193: IFFALSE 30203
// sTank := true ;
30195: LD_ADDR_EXP 117
30199: PUSH
30200: LD_INT 1
30202: ST_TO_ADDR
// if p3 = 20 then
30203: LD_VAR 0 3
30207: PUSH
30208: LD_INT 20
30210: EQUAL
30211: IFFALSE 30221
// sRemote := true ;
30213: LD_ADDR_EXP 118
30217: PUSH
30218: LD_INT 1
30220: ST_TO_ADDR
// if p3 = 21 then
30221: LD_VAR 0 3
30225: PUSH
30226: LD_INT 21
30228: EQUAL
30229: IFFALSE 30239
// sPowell := true ;
30231: LD_ADDR_EXP 119
30235: PUSH
30236: LD_INT 1
30238: ST_TO_ADDR
// if p3 = 22 then
30239: LD_VAR 0 3
30243: PUSH
30244: LD_INT 22
30246: EQUAL
30247: IFFALSE 30257
// sTeleport := true ;
30249: LD_ADDR_EXP 122
30253: PUSH
30254: LD_INT 1
30256: ST_TO_ADDR
// if p3 = 23 then
30257: LD_VAR 0 3
30261: PUSH
30262: LD_INT 23
30264: EQUAL
30265: IFFALSE 30275
// sOilTower := true ;
30267: LD_ADDR_EXP 124
30271: PUSH
30272: LD_INT 1
30274: ST_TO_ADDR
// if p3 = 24 then
30275: LD_VAR 0 3
30279: PUSH
30280: LD_INT 24
30282: EQUAL
30283: IFFALSE 30293
// sShovel := true ;
30285: LD_ADDR_EXP 125
30289: PUSH
30290: LD_INT 1
30292: ST_TO_ADDR
// if p3 = 25 then
30293: LD_VAR 0 3
30297: PUSH
30298: LD_INT 25
30300: EQUAL
30301: IFFALSE 30311
// sSheik := true ;
30303: LD_ADDR_EXP 126
30307: PUSH
30308: LD_INT 1
30310: ST_TO_ADDR
// if p3 = 26 then
30311: LD_VAR 0 3
30315: PUSH
30316: LD_INT 26
30318: EQUAL
30319: IFFALSE 30329
// sEarthquake := true ;
30321: LD_ADDR_EXP 128
30325: PUSH
30326: LD_INT 1
30328: ST_TO_ADDR
// if p3 = 27 then
30329: LD_VAR 0 3
30333: PUSH
30334: LD_INT 27
30336: EQUAL
30337: IFFALSE 30347
// sAI := true ;
30339: LD_ADDR_EXP 129
30343: PUSH
30344: LD_INT 1
30346: ST_TO_ADDR
// if p3 = 28 then
30347: LD_VAR 0 3
30351: PUSH
30352: LD_INT 28
30354: EQUAL
30355: IFFALSE 30365
// sCargo := true ;
30357: LD_ADDR_EXP 132
30361: PUSH
30362: LD_INT 1
30364: ST_TO_ADDR
// if p3 = 29 then
30365: LD_VAR 0 3
30369: PUSH
30370: LD_INT 29
30372: EQUAL
30373: IFFALSE 30383
// sDLaser := true ;
30375: LD_ADDR_EXP 133
30379: PUSH
30380: LD_INT 1
30382: ST_TO_ADDR
// if p3 = 30 then
30383: LD_VAR 0 3
30387: PUSH
30388: LD_INT 30
30390: EQUAL
30391: IFFALSE 30401
// sExchange := true ;
30393: LD_ADDR_EXP 134
30397: PUSH
30398: LD_INT 1
30400: ST_TO_ADDR
// if p3 = 31 then
30401: LD_VAR 0 3
30405: PUSH
30406: LD_INT 31
30408: EQUAL
30409: IFFALSE 30419
// sFac := true ;
30411: LD_ADDR_EXP 135
30415: PUSH
30416: LD_INT 1
30418: ST_TO_ADDR
// if p3 = 32 then
30419: LD_VAR 0 3
30423: PUSH
30424: LD_INT 32
30426: EQUAL
30427: IFFALSE 30437
// sPower := true ;
30429: LD_ADDR_EXP 136
30433: PUSH
30434: LD_INT 1
30436: ST_TO_ADDR
// if p3 = 33 then
30437: LD_VAR 0 3
30441: PUSH
30442: LD_INT 33
30444: EQUAL
30445: IFFALSE 30455
// sRandom := true ;
30447: LD_ADDR_EXP 137
30451: PUSH
30452: LD_INT 1
30454: ST_TO_ADDR
// if p3 = 34 then
30455: LD_VAR 0 3
30459: PUSH
30460: LD_INT 34
30462: EQUAL
30463: IFFALSE 30473
// sShield := true ;
30465: LD_ADDR_EXP 138
30469: PUSH
30470: LD_INT 1
30472: ST_TO_ADDR
// if p3 = 35 then
30473: LD_VAR 0 3
30477: PUSH
30478: LD_INT 35
30480: EQUAL
30481: IFFALSE 30491
// sTime := true ;
30483: LD_ADDR_EXP 139
30487: PUSH
30488: LD_INT 1
30490: ST_TO_ADDR
// if p3 = 36 then
30491: LD_VAR 0 3
30495: PUSH
30496: LD_INT 36
30498: EQUAL
30499: IFFALSE 30509
// sTools := true ;
30501: LD_ADDR_EXP 140
30505: PUSH
30506: LD_INT 1
30508: ST_TO_ADDR
// if p3 = 101 then
30509: LD_VAR 0 3
30513: PUSH
30514: LD_INT 101
30516: EQUAL
30517: IFFALSE 30527
// sSold := true ;
30519: LD_ADDR_EXP 105
30523: PUSH
30524: LD_INT 1
30526: ST_TO_ADDR
// if p3 = 102 then
30527: LD_VAR 0 3
30531: PUSH
30532: LD_INT 102
30534: EQUAL
30535: IFFALSE 30545
// sDiff := true ;
30537: LD_ADDR_EXP 106
30541: PUSH
30542: LD_INT 1
30544: ST_TO_ADDR
// if p3 = 103 then
30545: LD_VAR 0 3
30549: PUSH
30550: LD_INT 103
30552: EQUAL
30553: IFFALSE 30563
// sFog := true ;
30555: LD_ADDR_EXP 109
30559: PUSH
30560: LD_INT 1
30562: ST_TO_ADDR
// if p3 = 104 then
30563: LD_VAR 0 3
30567: PUSH
30568: LD_INT 104
30570: EQUAL
30571: IFFALSE 30581
// sReset := true ;
30573: LD_ADDR_EXP 110
30577: PUSH
30578: LD_INT 1
30580: ST_TO_ADDR
// if p3 = 105 then
30581: LD_VAR 0 3
30585: PUSH
30586: LD_INT 105
30588: EQUAL
30589: IFFALSE 30599
// sSun := true ;
30591: LD_ADDR_EXP 111
30595: PUSH
30596: LD_INT 1
30598: ST_TO_ADDR
// if p3 = 106 then
30599: LD_VAR 0 3
30603: PUSH
30604: LD_INT 106
30606: EQUAL
30607: IFFALSE 30617
// sTiger := true ;
30609: LD_ADDR_EXP 107
30613: PUSH
30614: LD_INT 1
30616: ST_TO_ADDR
// if p3 = 107 then
30617: LD_VAR 0 3
30621: PUSH
30622: LD_INT 107
30624: EQUAL
30625: IFFALSE 30635
// sBomb := true ;
30627: LD_ADDR_EXP 108
30631: PUSH
30632: LD_INT 1
30634: ST_TO_ADDR
// if p3 = 108 then
30635: LD_VAR 0 3
30639: PUSH
30640: LD_INT 108
30642: EQUAL
30643: IFFALSE 30653
// sWound := true ;
30645: LD_ADDR_EXP 116
30649: PUSH
30650: LD_INT 1
30652: ST_TO_ADDR
// if p3 = 109 then
30653: LD_VAR 0 3
30657: PUSH
30658: LD_INT 109
30660: EQUAL
30661: IFFALSE 30671
// sBetray := true ;
30663: LD_ADDR_EXP 120
30667: PUSH
30668: LD_INT 1
30670: ST_TO_ADDR
// if p3 = 110 then
30671: LD_VAR 0 3
30675: PUSH
30676: LD_INT 110
30678: EQUAL
30679: IFFALSE 30689
// sContamin := true ;
30681: LD_ADDR_EXP 121
30685: PUSH
30686: LD_INT 1
30688: ST_TO_ADDR
// if p3 = 111 then
30689: LD_VAR 0 3
30693: PUSH
30694: LD_INT 111
30696: EQUAL
30697: IFFALSE 30707
// sOil := true ;
30699: LD_ADDR_EXP 123
30703: PUSH
30704: LD_INT 1
30706: ST_TO_ADDR
// if p3 = 112 then
30707: LD_VAR 0 3
30711: PUSH
30712: LD_INT 112
30714: EQUAL
30715: IFFALSE 30725
// sStu := true ;
30717: LD_ADDR_EXP 127
30721: PUSH
30722: LD_INT 1
30724: ST_TO_ADDR
// if p3 = 113 then
30725: LD_VAR 0 3
30729: PUSH
30730: LD_INT 113
30732: EQUAL
30733: IFFALSE 30743
// sBazooka := true ;
30735: LD_ADDR_EXP 130
30739: PUSH
30740: LD_INT 1
30742: ST_TO_ADDR
// if p3 = 114 then
30743: LD_VAR 0 3
30747: PUSH
30748: LD_INT 114
30750: EQUAL
30751: IFFALSE 30761
// sMortar := true ;
30753: LD_ADDR_EXP 131
30757: PUSH
30758: LD_INT 1
30760: ST_TO_ADDR
// if p3 = 115 then
30761: LD_VAR 0 3
30765: PUSH
30766: LD_INT 115
30768: EQUAL
30769: IFFALSE 30779
// sRanger := true ;
30771: LD_ADDR_EXP 141
30775: PUSH
30776: LD_INT 1
30778: ST_TO_ADDR
// end ; if p2 = 101 then
30779: LD_VAR 0 2
30783: PUSH
30784: LD_INT 101
30786: EQUAL
30787: IFFALSE 30915
// begin case p3 of 1 :
30789: LD_VAR 0 3
30793: PUSH
30794: LD_INT 1
30796: DOUBLE
30797: EQUAL
30798: IFTRUE 30802
30800: GO 30809
30802: POP
// hHackUnlimitedResources ; 2 :
30803: CALL 41952 0 0
30807: GO 30915
30809: LD_INT 2
30811: DOUBLE
30812: EQUAL
30813: IFTRUE 30817
30815: GO 30824
30817: POP
// hHackSetLevel10 ; 3 :
30818: CALL 42085 0 0
30822: GO 30915
30824: LD_INT 3
30826: DOUBLE
30827: EQUAL
30828: IFTRUE 30832
30830: GO 30839
30832: POP
// hHackSetLevel10YourUnits ; 4 :
30833: CALL 42170 0 0
30837: GO 30915
30839: LD_INT 4
30841: DOUBLE
30842: EQUAL
30843: IFTRUE 30847
30845: GO 30854
30847: POP
// hHackInvincible ; 5 :
30848: CALL 42618 0 0
30852: GO 30915
30854: LD_INT 5
30856: DOUBLE
30857: EQUAL
30858: IFTRUE 30862
30860: GO 30869
30862: POP
// hHackInvisible ; 6 :
30863: CALL 42729 0 0
30867: GO 30915
30869: LD_INT 6
30871: DOUBLE
30872: EQUAL
30873: IFTRUE 30877
30875: GO 30884
30877: POP
// hHackChangeYourSide ; 7 :
30878: CALL 42786 0 0
30882: GO 30915
30884: LD_INT 7
30886: DOUBLE
30887: EQUAL
30888: IFTRUE 30892
30890: GO 30899
30892: POP
// hHackChangeUnitSide ; 8 :
30893: CALL 42828 0 0
30897: GO 30915
30899: LD_INT 8
30901: DOUBLE
30902: EQUAL
30903: IFTRUE 30907
30905: GO 30914
30907: POP
// hHackFog ; end ;
30908: CALL 42929 0 0
30912: GO 30915
30914: POP
// end ; end ;
30915: LD_VAR 0 7
30919: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
30920: GO 30922
30922: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
30923: LD_STRING initStreamRollete();
30925: PPUSH
30926: CALL_OW 559
// InitStreamMode ;
30930: CALL 30939 0 0
// DefineStreamItems ( ) ;
30934: CALL 31379 0 0
// end ;
30938: END
// function InitStreamMode ; begin
30939: LD_INT 0
30941: PPUSH
// streamModeActive := false ;
30942: LD_ADDR_EXP 88
30946: PUSH
30947: LD_INT 0
30949: ST_TO_ADDR
// normalCounter := 36 ;
30950: LD_ADDR_EXP 89
30954: PUSH
30955: LD_INT 36
30957: ST_TO_ADDR
// hardcoreCounter := 16 ;
30958: LD_ADDR_EXP 90
30962: PUSH
30963: LD_INT 16
30965: ST_TO_ADDR
// sRocket := false ;
30966: LD_ADDR_EXP 93
30970: PUSH
30971: LD_INT 0
30973: ST_TO_ADDR
// sSpeed := false ;
30974: LD_ADDR_EXP 92
30978: PUSH
30979: LD_INT 0
30981: ST_TO_ADDR
// sEngine := false ;
30982: LD_ADDR_EXP 94
30986: PUSH
30987: LD_INT 0
30989: ST_TO_ADDR
// sSpec := false ;
30990: LD_ADDR_EXP 91
30994: PUSH
30995: LD_INT 0
30997: ST_TO_ADDR
// sLevel := false ;
30998: LD_ADDR_EXP 95
31002: PUSH
31003: LD_INT 0
31005: ST_TO_ADDR
// sArmoury := false ;
31006: LD_ADDR_EXP 96
31010: PUSH
31011: LD_INT 0
31013: ST_TO_ADDR
// sRadar := false ;
31014: LD_ADDR_EXP 97
31018: PUSH
31019: LD_INT 0
31021: ST_TO_ADDR
// sBunker := false ;
31022: LD_ADDR_EXP 98
31026: PUSH
31027: LD_INT 0
31029: ST_TO_ADDR
// sHack := false ;
31030: LD_ADDR_EXP 99
31034: PUSH
31035: LD_INT 0
31037: ST_TO_ADDR
// sFire := false ;
31038: LD_ADDR_EXP 100
31042: PUSH
31043: LD_INT 0
31045: ST_TO_ADDR
// sRefresh := false ;
31046: LD_ADDR_EXP 101
31050: PUSH
31051: LD_INT 0
31053: ST_TO_ADDR
// sExp := false ;
31054: LD_ADDR_EXP 102
31058: PUSH
31059: LD_INT 0
31061: ST_TO_ADDR
// sDepot := false ;
31062: LD_ADDR_EXP 103
31066: PUSH
31067: LD_INT 0
31069: ST_TO_ADDR
// sFlag := false ;
31070: LD_ADDR_EXP 104
31074: PUSH
31075: LD_INT 0
31077: ST_TO_ADDR
// sKamikadze := false ;
31078: LD_ADDR_EXP 112
31082: PUSH
31083: LD_INT 0
31085: ST_TO_ADDR
// sTroll := false ;
31086: LD_ADDR_EXP 113
31090: PUSH
31091: LD_INT 0
31093: ST_TO_ADDR
// sSlow := false ;
31094: LD_ADDR_EXP 114
31098: PUSH
31099: LD_INT 0
31101: ST_TO_ADDR
// sLack := false ;
31102: LD_ADDR_EXP 115
31106: PUSH
31107: LD_INT 0
31109: ST_TO_ADDR
// sTank := false ;
31110: LD_ADDR_EXP 117
31114: PUSH
31115: LD_INT 0
31117: ST_TO_ADDR
// sRemote := false ;
31118: LD_ADDR_EXP 118
31122: PUSH
31123: LD_INT 0
31125: ST_TO_ADDR
// sPowell := false ;
31126: LD_ADDR_EXP 119
31130: PUSH
31131: LD_INT 0
31133: ST_TO_ADDR
// sTeleport := false ;
31134: LD_ADDR_EXP 122
31138: PUSH
31139: LD_INT 0
31141: ST_TO_ADDR
// sOilTower := false ;
31142: LD_ADDR_EXP 124
31146: PUSH
31147: LD_INT 0
31149: ST_TO_ADDR
// sShovel := false ;
31150: LD_ADDR_EXP 125
31154: PUSH
31155: LD_INT 0
31157: ST_TO_ADDR
// sSheik := false ;
31158: LD_ADDR_EXP 126
31162: PUSH
31163: LD_INT 0
31165: ST_TO_ADDR
// sEarthquake := false ;
31166: LD_ADDR_EXP 128
31170: PUSH
31171: LD_INT 0
31173: ST_TO_ADDR
// sAI := false ;
31174: LD_ADDR_EXP 129
31178: PUSH
31179: LD_INT 0
31181: ST_TO_ADDR
// sCargo := false ;
31182: LD_ADDR_EXP 132
31186: PUSH
31187: LD_INT 0
31189: ST_TO_ADDR
// sDLaser := false ;
31190: LD_ADDR_EXP 133
31194: PUSH
31195: LD_INT 0
31197: ST_TO_ADDR
// sExchange := false ;
31198: LD_ADDR_EXP 134
31202: PUSH
31203: LD_INT 0
31205: ST_TO_ADDR
// sFac := false ;
31206: LD_ADDR_EXP 135
31210: PUSH
31211: LD_INT 0
31213: ST_TO_ADDR
// sPower := false ;
31214: LD_ADDR_EXP 136
31218: PUSH
31219: LD_INT 0
31221: ST_TO_ADDR
// sRandom := false ;
31222: LD_ADDR_EXP 137
31226: PUSH
31227: LD_INT 0
31229: ST_TO_ADDR
// sShield := false ;
31230: LD_ADDR_EXP 138
31234: PUSH
31235: LD_INT 0
31237: ST_TO_ADDR
// sTime := false ;
31238: LD_ADDR_EXP 139
31242: PUSH
31243: LD_INT 0
31245: ST_TO_ADDR
// sTools := false ;
31246: LD_ADDR_EXP 140
31250: PUSH
31251: LD_INT 0
31253: ST_TO_ADDR
// sSold := false ;
31254: LD_ADDR_EXP 105
31258: PUSH
31259: LD_INT 0
31261: ST_TO_ADDR
// sDiff := false ;
31262: LD_ADDR_EXP 106
31266: PUSH
31267: LD_INT 0
31269: ST_TO_ADDR
// sFog := false ;
31270: LD_ADDR_EXP 109
31274: PUSH
31275: LD_INT 0
31277: ST_TO_ADDR
// sReset := false ;
31278: LD_ADDR_EXP 110
31282: PUSH
31283: LD_INT 0
31285: ST_TO_ADDR
// sSun := false ;
31286: LD_ADDR_EXP 111
31290: PUSH
31291: LD_INT 0
31293: ST_TO_ADDR
// sTiger := false ;
31294: LD_ADDR_EXP 107
31298: PUSH
31299: LD_INT 0
31301: ST_TO_ADDR
// sBomb := false ;
31302: LD_ADDR_EXP 108
31306: PUSH
31307: LD_INT 0
31309: ST_TO_ADDR
// sWound := false ;
31310: LD_ADDR_EXP 116
31314: PUSH
31315: LD_INT 0
31317: ST_TO_ADDR
// sBetray := false ;
31318: LD_ADDR_EXP 120
31322: PUSH
31323: LD_INT 0
31325: ST_TO_ADDR
// sContamin := false ;
31326: LD_ADDR_EXP 121
31330: PUSH
31331: LD_INT 0
31333: ST_TO_ADDR
// sOil := false ;
31334: LD_ADDR_EXP 123
31338: PUSH
31339: LD_INT 0
31341: ST_TO_ADDR
// sStu := false ;
31342: LD_ADDR_EXP 127
31346: PUSH
31347: LD_INT 0
31349: ST_TO_ADDR
// sBazooka := false ;
31350: LD_ADDR_EXP 130
31354: PUSH
31355: LD_INT 0
31357: ST_TO_ADDR
// sMortar := false ;
31358: LD_ADDR_EXP 131
31362: PUSH
31363: LD_INT 0
31365: ST_TO_ADDR
// sRanger := false ;
31366: LD_ADDR_EXP 141
31370: PUSH
31371: LD_INT 0
31373: ST_TO_ADDR
// end ;
31374: LD_VAR 0 1
31378: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
31379: LD_INT 0
31381: PPUSH
31382: PPUSH
31383: PPUSH
31384: PPUSH
31385: PPUSH
// result := [ ] ;
31386: LD_ADDR_VAR 0 1
31390: PUSH
31391: EMPTY
31392: ST_TO_ADDR
// if campaign_id = 1 then
31393: LD_OWVAR 69
31397: PUSH
31398: LD_INT 1
31400: EQUAL
31401: IFFALSE 34339
// begin case mission_number of 1 :
31403: LD_OWVAR 70
31407: PUSH
31408: LD_INT 1
31410: DOUBLE
31411: EQUAL
31412: IFTRUE 31416
31414: GO 31480
31416: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
31417: LD_ADDR_VAR 0 1
31421: PUSH
31422: LD_INT 2
31424: PUSH
31425: LD_INT 4
31427: PUSH
31428: LD_INT 11
31430: PUSH
31431: LD_INT 12
31433: PUSH
31434: LD_INT 15
31436: PUSH
31437: LD_INT 16
31439: PUSH
31440: LD_INT 22
31442: PUSH
31443: LD_INT 23
31445: PUSH
31446: LD_INT 26
31448: PUSH
31449: EMPTY
31450: LIST
31451: LIST
31452: LIST
31453: LIST
31454: LIST
31455: LIST
31456: LIST
31457: LIST
31458: LIST
31459: PUSH
31460: LD_INT 101
31462: PUSH
31463: LD_INT 102
31465: PUSH
31466: LD_INT 106
31468: PUSH
31469: EMPTY
31470: LIST
31471: LIST
31472: LIST
31473: PUSH
31474: EMPTY
31475: LIST
31476: LIST
31477: ST_TO_ADDR
31478: GO 34337
31480: LD_INT 2
31482: DOUBLE
31483: EQUAL
31484: IFTRUE 31488
31486: GO 31560
31488: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
31489: LD_ADDR_VAR 0 1
31493: PUSH
31494: LD_INT 2
31496: PUSH
31497: LD_INT 4
31499: PUSH
31500: LD_INT 11
31502: PUSH
31503: LD_INT 12
31505: PUSH
31506: LD_INT 15
31508: PUSH
31509: LD_INT 16
31511: PUSH
31512: LD_INT 22
31514: PUSH
31515: LD_INT 23
31517: PUSH
31518: LD_INT 26
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: PUSH
31532: LD_INT 101
31534: PUSH
31535: LD_INT 102
31537: PUSH
31538: LD_INT 105
31540: PUSH
31541: LD_INT 106
31543: PUSH
31544: LD_INT 108
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: PUSH
31554: EMPTY
31555: LIST
31556: LIST
31557: ST_TO_ADDR
31558: GO 34337
31560: LD_INT 3
31562: DOUBLE
31563: EQUAL
31564: IFTRUE 31568
31566: GO 31644
31568: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
31569: LD_ADDR_VAR 0 1
31573: PUSH
31574: LD_INT 2
31576: PUSH
31577: LD_INT 4
31579: PUSH
31580: LD_INT 5
31582: PUSH
31583: LD_INT 11
31585: PUSH
31586: LD_INT 12
31588: PUSH
31589: LD_INT 15
31591: PUSH
31592: LD_INT 16
31594: PUSH
31595: LD_INT 22
31597: PUSH
31598: LD_INT 26
31600: PUSH
31601: LD_INT 36
31603: PUSH
31604: EMPTY
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: LIST
31611: LIST
31612: LIST
31613: LIST
31614: LIST
31615: PUSH
31616: LD_INT 101
31618: PUSH
31619: LD_INT 102
31621: PUSH
31622: LD_INT 105
31624: PUSH
31625: LD_INT 106
31627: PUSH
31628: LD_INT 108
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: PUSH
31638: EMPTY
31639: LIST
31640: LIST
31641: ST_TO_ADDR
31642: GO 34337
31644: LD_INT 4
31646: DOUBLE
31647: EQUAL
31648: IFTRUE 31652
31650: GO 31736
31652: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
31653: LD_ADDR_VAR 0 1
31657: PUSH
31658: LD_INT 2
31660: PUSH
31661: LD_INT 4
31663: PUSH
31664: LD_INT 5
31666: PUSH
31667: LD_INT 8
31669: PUSH
31670: LD_INT 11
31672: PUSH
31673: LD_INT 12
31675: PUSH
31676: LD_INT 15
31678: PUSH
31679: LD_INT 16
31681: PUSH
31682: LD_INT 22
31684: PUSH
31685: LD_INT 23
31687: PUSH
31688: LD_INT 26
31690: PUSH
31691: LD_INT 36
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: LIST
31702: LIST
31703: LIST
31704: LIST
31705: LIST
31706: LIST
31707: PUSH
31708: LD_INT 101
31710: PUSH
31711: LD_INT 102
31713: PUSH
31714: LD_INT 105
31716: PUSH
31717: LD_INT 106
31719: PUSH
31720: LD_INT 108
31722: PUSH
31723: EMPTY
31724: LIST
31725: LIST
31726: LIST
31727: LIST
31728: LIST
31729: PUSH
31730: EMPTY
31731: LIST
31732: LIST
31733: ST_TO_ADDR
31734: GO 34337
31736: LD_INT 5
31738: DOUBLE
31739: EQUAL
31740: IFTRUE 31744
31742: GO 31844
31744: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
31745: LD_ADDR_VAR 0 1
31749: PUSH
31750: LD_INT 2
31752: PUSH
31753: LD_INT 4
31755: PUSH
31756: LD_INT 5
31758: PUSH
31759: LD_INT 6
31761: PUSH
31762: LD_INT 8
31764: PUSH
31765: LD_INT 11
31767: PUSH
31768: LD_INT 12
31770: PUSH
31771: LD_INT 15
31773: PUSH
31774: LD_INT 16
31776: PUSH
31777: LD_INT 22
31779: PUSH
31780: LD_INT 23
31782: PUSH
31783: LD_INT 25
31785: PUSH
31786: LD_INT 26
31788: PUSH
31789: LD_INT 36
31791: PUSH
31792: EMPTY
31793: LIST
31794: LIST
31795: LIST
31796: LIST
31797: LIST
31798: LIST
31799: LIST
31800: LIST
31801: LIST
31802: LIST
31803: LIST
31804: LIST
31805: LIST
31806: LIST
31807: PUSH
31808: LD_INT 101
31810: PUSH
31811: LD_INT 102
31813: PUSH
31814: LD_INT 105
31816: PUSH
31817: LD_INT 106
31819: PUSH
31820: LD_INT 108
31822: PUSH
31823: LD_INT 109
31825: PUSH
31826: LD_INT 112
31828: PUSH
31829: EMPTY
31830: LIST
31831: LIST
31832: LIST
31833: LIST
31834: LIST
31835: LIST
31836: LIST
31837: PUSH
31838: EMPTY
31839: LIST
31840: LIST
31841: ST_TO_ADDR
31842: GO 34337
31844: LD_INT 6
31846: DOUBLE
31847: EQUAL
31848: IFTRUE 31852
31850: GO 31972
31852: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
31853: LD_ADDR_VAR 0 1
31857: PUSH
31858: LD_INT 2
31860: PUSH
31861: LD_INT 4
31863: PUSH
31864: LD_INT 5
31866: PUSH
31867: LD_INT 6
31869: PUSH
31870: LD_INT 8
31872: PUSH
31873: LD_INT 11
31875: PUSH
31876: LD_INT 12
31878: PUSH
31879: LD_INT 15
31881: PUSH
31882: LD_INT 16
31884: PUSH
31885: LD_INT 20
31887: PUSH
31888: LD_INT 21
31890: PUSH
31891: LD_INT 22
31893: PUSH
31894: LD_INT 23
31896: PUSH
31897: LD_INT 25
31899: PUSH
31900: LD_INT 26
31902: PUSH
31903: LD_INT 30
31905: PUSH
31906: LD_INT 31
31908: PUSH
31909: LD_INT 32
31911: PUSH
31912: LD_INT 36
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: LIST
31919: LIST
31920: LIST
31921: LIST
31922: LIST
31923: LIST
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: LIST
31931: LIST
31932: LIST
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 101
31938: PUSH
31939: LD_INT 102
31941: PUSH
31942: LD_INT 105
31944: PUSH
31945: LD_INT 106
31947: PUSH
31948: LD_INT 108
31950: PUSH
31951: LD_INT 109
31953: PUSH
31954: LD_INT 112
31956: PUSH
31957: EMPTY
31958: LIST
31959: LIST
31960: LIST
31961: LIST
31962: LIST
31963: LIST
31964: LIST
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: ST_TO_ADDR
31970: GO 34337
31972: LD_INT 7
31974: DOUBLE
31975: EQUAL
31976: IFTRUE 31980
31978: GO 32080
31980: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
31981: LD_ADDR_VAR 0 1
31985: PUSH
31986: LD_INT 2
31988: PUSH
31989: LD_INT 4
31991: PUSH
31992: LD_INT 5
31994: PUSH
31995: LD_INT 7
31997: PUSH
31998: LD_INT 11
32000: PUSH
32001: LD_INT 12
32003: PUSH
32004: LD_INT 15
32006: PUSH
32007: LD_INT 16
32009: PUSH
32010: LD_INT 20
32012: PUSH
32013: LD_INT 21
32015: PUSH
32016: LD_INT 22
32018: PUSH
32019: LD_INT 23
32021: PUSH
32022: LD_INT 25
32024: PUSH
32025: LD_INT 26
32027: PUSH
32028: EMPTY
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 101
32046: PUSH
32047: LD_INT 102
32049: PUSH
32050: LD_INT 103
32052: PUSH
32053: LD_INT 105
32055: PUSH
32056: LD_INT 106
32058: PUSH
32059: LD_INT 108
32061: PUSH
32062: LD_INT 112
32064: PUSH
32065: EMPTY
32066: LIST
32067: LIST
32068: LIST
32069: LIST
32070: LIST
32071: LIST
32072: LIST
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: ST_TO_ADDR
32078: GO 34337
32080: LD_INT 8
32082: DOUBLE
32083: EQUAL
32084: IFTRUE 32088
32086: GO 32216
32088: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
32089: LD_ADDR_VAR 0 1
32093: PUSH
32094: LD_INT 2
32096: PUSH
32097: LD_INT 4
32099: PUSH
32100: LD_INT 5
32102: PUSH
32103: LD_INT 6
32105: PUSH
32106: LD_INT 7
32108: PUSH
32109: LD_INT 8
32111: PUSH
32112: LD_INT 11
32114: PUSH
32115: LD_INT 12
32117: PUSH
32118: LD_INT 15
32120: PUSH
32121: LD_INT 16
32123: PUSH
32124: LD_INT 20
32126: PUSH
32127: LD_INT 21
32129: PUSH
32130: LD_INT 22
32132: PUSH
32133: LD_INT 23
32135: PUSH
32136: LD_INT 25
32138: PUSH
32139: LD_INT 26
32141: PUSH
32142: LD_INT 30
32144: PUSH
32145: LD_INT 31
32147: PUSH
32148: LD_INT 32
32150: PUSH
32151: LD_INT 36
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: LIST
32166: LIST
32167: LIST
32168: LIST
32169: LIST
32170: LIST
32171: LIST
32172: LIST
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 101
32178: PUSH
32179: LD_INT 102
32181: PUSH
32182: LD_INT 103
32184: PUSH
32185: LD_INT 105
32187: PUSH
32188: LD_INT 106
32190: PUSH
32191: LD_INT 108
32193: PUSH
32194: LD_INT 109
32196: PUSH
32197: LD_INT 112
32199: PUSH
32200: EMPTY
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: PUSH
32210: EMPTY
32211: LIST
32212: LIST
32213: ST_TO_ADDR
32214: GO 34337
32216: LD_INT 9
32218: DOUBLE
32219: EQUAL
32220: IFTRUE 32224
32222: GO 32360
32224: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
32225: LD_ADDR_VAR 0 1
32229: PUSH
32230: LD_INT 2
32232: PUSH
32233: LD_INT 4
32235: PUSH
32236: LD_INT 5
32238: PUSH
32239: LD_INT 6
32241: PUSH
32242: LD_INT 7
32244: PUSH
32245: LD_INT 8
32247: PUSH
32248: LD_INT 11
32250: PUSH
32251: LD_INT 12
32253: PUSH
32254: LD_INT 15
32256: PUSH
32257: LD_INT 16
32259: PUSH
32260: LD_INT 20
32262: PUSH
32263: LD_INT 21
32265: PUSH
32266: LD_INT 22
32268: PUSH
32269: LD_INT 23
32271: PUSH
32272: LD_INT 25
32274: PUSH
32275: LD_INT 26
32277: PUSH
32278: LD_INT 28
32280: PUSH
32281: LD_INT 30
32283: PUSH
32284: LD_INT 31
32286: PUSH
32287: LD_INT 32
32289: PUSH
32290: LD_INT 36
32292: PUSH
32293: EMPTY
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: LIST
32315: PUSH
32316: LD_INT 101
32318: PUSH
32319: LD_INT 102
32321: PUSH
32322: LD_INT 103
32324: PUSH
32325: LD_INT 105
32327: PUSH
32328: LD_INT 106
32330: PUSH
32331: LD_INT 108
32333: PUSH
32334: LD_INT 109
32336: PUSH
32337: LD_INT 112
32339: PUSH
32340: LD_INT 114
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: LIST
32349: LIST
32350: LIST
32351: LIST
32352: LIST
32353: PUSH
32354: EMPTY
32355: LIST
32356: LIST
32357: ST_TO_ADDR
32358: GO 34337
32360: LD_INT 10
32362: DOUBLE
32363: EQUAL
32364: IFTRUE 32368
32366: GO 32552
32368: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
32369: LD_ADDR_VAR 0 1
32373: PUSH
32374: LD_INT 2
32376: PUSH
32377: LD_INT 4
32379: PUSH
32380: LD_INT 5
32382: PUSH
32383: LD_INT 6
32385: PUSH
32386: LD_INT 7
32388: PUSH
32389: LD_INT 8
32391: PUSH
32392: LD_INT 9
32394: PUSH
32395: LD_INT 10
32397: PUSH
32398: LD_INT 11
32400: PUSH
32401: LD_INT 12
32403: PUSH
32404: LD_INT 13
32406: PUSH
32407: LD_INT 14
32409: PUSH
32410: LD_INT 15
32412: PUSH
32413: LD_INT 16
32415: PUSH
32416: LD_INT 17
32418: PUSH
32419: LD_INT 18
32421: PUSH
32422: LD_INT 19
32424: PUSH
32425: LD_INT 20
32427: PUSH
32428: LD_INT 21
32430: PUSH
32431: LD_INT 22
32433: PUSH
32434: LD_INT 23
32436: PUSH
32437: LD_INT 24
32439: PUSH
32440: LD_INT 25
32442: PUSH
32443: LD_INT 26
32445: PUSH
32446: LD_INT 28
32448: PUSH
32449: LD_INT 30
32451: PUSH
32452: LD_INT 31
32454: PUSH
32455: LD_INT 32
32457: PUSH
32458: LD_INT 36
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: LIST
32472: LIST
32473: LIST
32474: LIST
32475: LIST
32476: LIST
32477: LIST
32478: LIST
32479: LIST
32480: LIST
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: LIST
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 101
32494: PUSH
32495: LD_INT 102
32497: PUSH
32498: LD_INT 103
32500: PUSH
32501: LD_INT 104
32503: PUSH
32504: LD_INT 105
32506: PUSH
32507: LD_INT 106
32509: PUSH
32510: LD_INT 107
32512: PUSH
32513: LD_INT 108
32515: PUSH
32516: LD_INT 109
32518: PUSH
32519: LD_INT 110
32521: PUSH
32522: LD_INT 111
32524: PUSH
32525: LD_INT 112
32527: PUSH
32528: LD_INT 114
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: LIST
32535: LIST
32536: LIST
32537: LIST
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: PUSH
32546: EMPTY
32547: LIST
32548: LIST
32549: ST_TO_ADDR
32550: GO 34337
32552: LD_INT 11
32554: DOUBLE
32555: EQUAL
32556: IFTRUE 32560
32558: GO 32752
32560: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
32561: LD_ADDR_VAR 0 1
32565: PUSH
32566: LD_INT 2
32568: PUSH
32569: LD_INT 3
32571: PUSH
32572: LD_INT 4
32574: PUSH
32575: LD_INT 5
32577: PUSH
32578: LD_INT 6
32580: PUSH
32581: LD_INT 7
32583: PUSH
32584: LD_INT 8
32586: PUSH
32587: LD_INT 9
32589: PUSH
32590: LD_INT 10
32592: PUSH
32593: LD_INT 11
32595: PUSH
32596: LD_INT 12
32598: PUSH
32599: LD_INT 13
32601: PUSH
32602: LD_INT 14
32604: PUSH
32605: LD_INT 15
32607: PUSH
32608: LD_INT 16
32610: PUSH
32611: LD_INT 17
32613: PUSH
32614: LD_INT 18
32616: PUSH
32617: LD_INT 19
32619: PUSH
32620: LD_INT 20
32622: PUSH
32623: LD_INT 21
32625: PUSH
32626: LD_INT 22
32628: PUSH
32629: LD_INT 23
32631: PUSH
32632: LD_INT 24
32634: PUSH
32635: LD_INT 25
32637: PUSH
32638: LD_INT 26
32640: PUSH
32641: LD_INT 28
32643: PUSH
32644: LD_INT 30
32646: PUSH
32647: LD_INT 31
32649: PUSH
32650: LD_INT 32
32652: PUSH
32653: LD_INT 34
32655: PUSH
32656: LD_INT 36
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: LIST
32676: LIST
32677: LIST
32678: LIST
32679: LIST
32680: LIST
32681: LIST
32682: LIST
32683: LIST
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: PUSH
32692: LD_INT 101
32694: PUSH
32695: LD_INT 102
32697: PUSH
32698: LD_INT 103
32700: PUSH
32701: LD_INT 104
32703: PUSH
32704: LD_INT 105
32706: PUSH
32707: LD_INT 106
32709: PUSH
32710: LD_INT 107
32712: PUSH
32713: LD_INT 108
32715: PUSH
32716: LD_INT 109
32718: PUSH
32719: LD_INT 110
32721: PUSH
32722: LD_INT 111
32724: PUSH
32725: LD_INT 112
32727: PUSH
32728: LD_INT 114
32730: PUSH
32731: EMPTY
32732: LIST
32733: LIST
32734: LIST
32735: LIST
32736: LIST
32737: LIST
32738: LIST
32739: LIST
32740: LIST
32741: LIST
32742: LIST
32743: LIST
32744: LIST
32745: PUSH
32746: EMPTY
32747: LIST
32748: LIST
32749: ST_TO_ADDR
32750: GO 34337
32752: LD_INT 12
32754: DOUBLE
32755: EQUAL
32756: IFTRUE 32760
32758: GO 32968
32760: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
32761: LD_ADDR_VAR 0 1
32765: PUSH
32766: LD_INT 1
32768: PUSH
32769: LD_INT 2
32771: PUSH
32772: LD_INT 3
32774: PUSH
32775: LD_INT 4
32777: PUSH
32778: LD_INT 5
32780: PUSH
32781: LD_INT 6
32783: PUSH
32784: LD_INT 7
32786: PUSH
32787: LD_INT 8
32789: PUSH
32790: LD_INT 9
32792: PUSH
32793: LD_INT 10
32795: PUSH
32796: LD_INT 11
32798: PUSH
32799: LD_INT 12
32801: PUSH
32802: LD_INT 13
32804: PUSH
32805: LD_INT 14
32807: PUSH
32808: LD_INT 15
32810: PUSH
32811: LD_INT 16
32813: PUSH
32814: LD_INT 17
32816: PUSH
32817: LD_INT 18
32819: PUSH
32820: LD_INT 19
32822: PUSH
32823: LD_INT 20
32825: PUSH
32826: LD_INT 21
32828: PUSH
32829: LD_INT 22
32831: PUSH
32832: LD_INT 23
32834: PUSH
32835: LD_INT 24
32837: PUSH
32838: LD_INT 25
32840: PUSH
32841: LD_INT 26
32843: PUSH
32844: LD_INT 27
32846: PUSH
32847: LD_INT 28
32849: PUSH
32850: LD_INT 30
32852: PUSH
32853: LD_INT 31
32855: PUSH
32856: LD_INT 32
32858: PUSH
32859: LD_INT 33
32861: PUSH
32862: LD_INT 34
32864: PUSH
32865: LD_INT 36
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: LIST
32877: LIST
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: PUSH
32904: LD_INT 101
32906: PUSH
32907: LD_INT 102
32909: PUSH
32910: LD_INT 103
32912: PUSH
32913: LD_INT 104
32915: PUSH
32916: LD_INT 105
32918: PUSH
32919: LD_INT 106
32921: PUSH
32922: LD_INT 107
32924: PUSH
32925: LD_INT 108
32927: PUSH
32928: LD_INT 109
32930: PUSH
32931: LD_INT 110
32933: PUSH
32934: LD_INT 111
32936: PUSH
32937: LD_INT 112
32939: PUSH
32940: LD_INT 113
32942: PUSH
32943: LD_INT 114
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: LIST
32952: LIST
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: PUSH
32962: EMPTY
32963: LIST
32964: LIST
32965: ST_TO_ADDR
32966: GO 34337
32968: LD_INT 13
32970: DOUBLE
32971: EQUAL
32972: IFTRUE 32976
32974: GO 33172
32976: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
32977: LD_ADDR_VAR 0 1
32981: PUSH
32982: LD_INT 1
32984: PUSH
32985: LD_INT 2
32987: PUSH
32988: LD_INT 3
32990: PUSH
32991: LD_INT 4
32993: PUSH
32994: LD_INT 5
32996: PUSH
32997: LD_INT 8
32999: PUSH
33000: LD_INT 9
33002: PUSH
33003: LD_INT 10
33005: PUSH
33006: LD_INT 11
33008: PUSH
33009: LD_INT 12
33011: PUSH
33012: LD_INT 14
33014: PUSH
33015: LD_INT 15
33017: PUSH
33018: LD_INT 16
33020: PUSH
33021: LD_INT 17
33023: PUSH
33024: LD_INT 18
33026: PUSH
33027: LD_INT 19
33029: PUSH
33030: LD_INT 20
33032: PUSH
33033: LD_INT 21
33035: PUSH
33036: LD_INT 22
33038: PUSH
33039: LD_INT 23
33041: PUSH
33042: LD_INT 24
33044: PUSH
33045: LD_INT 25
33047: PUSH
33048: LD_INT 26
33050: PUSH
33051: LD_INT 27
33053: PUSH
33054: LD_INT 28
33056: PUSH
33057: LD_INT 30
33059: PUSH
33060: LD_INT 31
33062: PUSH
33063: LD_INT 32
33065: PUSH
33066: LD_INT 33
33068: PUSH
33069: LD_INT 34
33071: PUSH
33072: LD_INT 36
33074: PUSH
33075: EMPTY
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: LIST
33087: LIST
33088: LIST
33089: LIST
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 101
33110: PUSH
33111: LD_INT 102
33113: PUSH
33114: LD_INT 103
33116: PUSH
33117: LD_INT 104
33119: PUSH
33120: LD_INT 105
33122: PUSH
33123: LD_INT 106
33125: PUSH
33126: LD_INT 107
33128: PUSH
33129: LD_INT 108
33131: PUSH
33132: LD_INT 109
33134: PUSH
33135: LD_INT 110
33137: PUSH
33138: LD_INT 111
33140: PUSH
33141: LD_INT 112
33143: PUSH
33144: LD_INT 113
33146: PUSH
33147: LD_INT 114
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: LIST
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: LIST
33164: LIST
33165: PUSH
33166: EMPTY
33167: LIST
33168: LIST
33169: ST_TO_ADDR
33170: GO 34337
33172: LD_INT 14
33174: DOUBLE
33175: EQUAL
33176: IFTRUE 33180
33178: GO 33392
33180: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
33181: LD_ADDR_VAR 0 1
33185: PUSH
33186: LD_INT 1
33188: PUSH
33189: LD_INT 2
33191: PUSH
33192: LD_INT 3
33194: PUSH
33195: LD_INT 4
33197: PUSH
33198: LD_INT 5
33200: PUSH
33201: LD_INT 6
33203: PUSH
33204: LD_INT 7
33206: PUSH
33207: LD_INT 8
33209: PUSH
33210: LD_INT 9
33212: PUSH
33213: LD_INT 10
33215: PUSH
33216: LD_INT 11
33218: PUSH
33219: LD_INT 12
33221: PUSH
33222: LD_INT 13
33224: PUSH
33225: LD_INT 14
33227: PUSH
33228: LD_INT 15
33230: PUSH
33231: LD_INT 16
33233: PUSH
33234: LD_INT 17
33236: PUSH
33237: LD_INT 18
33239: PUSH
33240: LD_INT 19
33242: PUSH
33243: LD_INT 20
33245: PUSH
33246: LD_INT 21
33248: PUSH
33249: LD_INT 22
33251: PUSH
33252: LD_INT 23
33254: PUSH
33255: LD_INT 24
33257: PUSH
33258: LD_INT 25
33260: PUSH
33261: LD_INT 26
33263: PUSH
33264: LD_INT 27
33266: PUSH
33267: LD_INT 28
33269: PUSH
33270: LD_INT 29
33272: PUSH
33273: LD_INT 30
33275: PUSH
33276: LD_INT 31
33278: PUSH
33279: LD_INT 32
33281: PUSH
33282: LD_INT 33
33284: PUSH
33285: LD_INT 34
33287: PUSH
33288: LD_INT 36
33290: PUSH
33291: EMPTY
33292: LIST
33293: LIST
33294: LIST
33295: LIST
33296: LIST
33297: LIST
33298: LIST
33299: LIST
33300: LIST
33301: LIST
33302: LIST
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: LIST
33308: LIST
33309: LIST
33310: LIST
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: PUSH
33328: LD_INT 101
33330: PUSH
33331: LD_INT 102
33333: PUSH
33334: LD_INT 103
33336: PUSH
33337: LD_INT 104
33339: PUSH
33340: LD_INT 105
33342: PUSH
33343: LD_INT 106
33345: PUSH
33346: LD_INT 107
33348: PUSH
33349: LD_INT 108
33351: PUSH
33352: LD_INT 109
33354: PUSH
33355: LD_INT 110
33357: PUSH
33358: LD_INT 111
33360: PUSH
33361: LD_INT 112
33363: PUSH
33364: LD_INT 113
33366: PUSH
33367: LD_INT 114
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: LIST
33378: LIST
33379: LIST
33380: LIST
33381: LIST
33382: LIST
33383: LIST
33384: LIST
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: ST_TO_ADDR
33390: GO 34337
33392: LD_INT 15
33394: DOUBLE
33395: EQUAL
33396: IFTRUE 33400
33398: GO 33612
33400: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
33401: LD_ADDR_VAR 0 1
33405: PUSH
33406: LD_INT 1
33408: PUSH
33409: LD_INT 2
33411: PUSH
33412: LD_INT 3
33414: PUSH
33415: LD_INT 4
33417: PUSH
33418: LD_INT 5
33420: PUSH
33421: LD_INT 6
33423: PUSH
33424: LD_INT 7
33426: PUSH
33427: LD_INT 8
33429: PUSH
33430: LD_INT 9
33432: PUSH
33433: LD_INT 10
33435: PUSH
33436: LD_INT 11
33438: PUSH
33439: LD_INT 12
33441: PUSH
33442: LD_INT 13
33444: PUSH
33445: LD_INT 14
33447: PUSH
33448: LD_INT 15
33450: PUSH
33451: LD_INT 16
33453: PUSH
33454: LD_INT 17
33456: PUSH
33457: LD_INT 18
33459: PUSH
33460: LD_INT 19
33462: PUSH
33463: LD_INT 20
33465: PUSH
33466: LD_INT 21
33468: PUSH
33469: LD_INT 22
33471: PUSH
33472: LD_INT 23
33474: PUSH
33475: LD_INT 24
33477: PUSH
33478: LD_INT 25
33480: PUSH
33481: LD_INT 26
33483: PUSH
33484: LD_INT 27
33486: PUSH
33487: LD_INT 28
33489: PUSH
33490: LD_INT 29
33492: PUSH
33493: LD_INT 30
33495: PUSH
33496: LD_INT 31
33498: PUSH
33499: LD_INT 32
33501: PUSH
33502: LD_INT 33
33504: PUSH
33505: LD_INT 34
33507: PUSH
33508: LD_INT 36
33510: PUSH
33511: EMPTY
33512: LIST
33513: LIST
33514: LIST
33515: LIST
33516: LIST
33517: LIST
33518: LIST
33519: LIST
33520: LIST
33521: LIST
33522: LIST
33523: LIST
33524: LIST
33525: LIST
33526: LIST
33527: LIST
33528: LIST
33529: LIST
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: PUSH
33548: LD_INT 101
33550: PUSH
33551: LD_INT 102
33553: PUSH
33554: LD_INT 103
33556: PUSH
33557: LD_INT 104
33559: PUSH
33560: LD_INT 105
33562: PUSH
33563: LD_INT 106
33565: PUSH
33566: LD_INT 107
33568: PUSH
33569: LD_INT 108
33571: PUSH
33572: LD_INT 109
33574: PUSH
33575: LD_INT 110
33577: PUSH
33578: LD_INT 111
33580: PUSH
33581: LD_INT 112
33583: PUSH
33584: LD_INT 113
33586: PUSH
33587: LD_INT 114
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: LIST
33602: LIST
33603: LIST
33604: LIST
33605: PUSH
33606: EMPTY
33607: LIST
33608: LIST
33609: ST_TO_ADDR
33610: GO 34337
33612: LD_INT 16
33614: DOUBLE
33615: EQUAL
33616: IFTRUE 33620
33618: GO 33744
33620: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
33621: LD_ADDR_VAR 0 1
33625: PUSH
33626: LD_INT 2
33628: PUSH
33629: LD_INT 4
33631: PUSH
33632: LD_INT 5
33634: PUSH
33635: LD_INT 7
33637: PUSH
33638: LD_INT 11
33640: PUSH
33641: LD_INT 12
33643: PUSH
33644: LD_INT 15
33646: PUSH
33647: LD_INT 16
33649: PUSH
33650: LD_INT 20
33652: PUSH
33653: LD_INT 21
33655: PUSH
33656: LD_INT 22
33658: PUSH
33659: LD_INT 23
33661: PUSH
33662: LD_INT 25
33664: PUSH
33665: LD_INT 26
33667: PUSH
33668: LD_INT 30
33670: PUSH
33671: LD_INT 31
33673: PUSH
33674: LD_INT 32
33676: PUSH
33677: LD_INT 33
33679: PUSH
33680: LD_INT 34
33682: PUSH
33683: EMPTY
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: PUSH
33704: LD_INT 101
33706: PUSH
33707: LD_INT 102
33709: PUSH
33710: LD_INT 103
33712: PUSH
33713: LD_INT 106
33715: PUSH
33716: LD_INT 108
33718: PUSH
33719: LD_INT 112
33721: PUSH
33722: LD_INT 113
33724: PUSH
33725: LD_INT 114
33727: PUSH
33728: EMPTY
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: PUSH
33738: EMPTY
33739: LIST
33740: LIST
33741: ST_TO_ADDR
33742: GO 34337
33744: LD_INT 17
33746: DOUBLE
33747: EQUAL
33748: IFTRUE 33752
33750: GO 33964
33752: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
33753: LD_ADDR_VAR 0 1
33757: PUSH
33758: LD_INT 1
33760: PUSH
33761: LD_INT 2
33763: PUSH
33764: LD_INT 3
33766: PUSH
33767: LD_INT 4
33769: PUSH
33770: LD_INT 5
33772: PUSH
33773: LD_INT 6
33775: PUSH
33776: LD_INT 7
33778: PUSH
33779: LD_INT 8
33781: PUSH
33782: LD_INT 9
33784: PUSH
33785: LD_INT 10
33787: PUSH
33788: LD_INT 11
33790: PUSH
33791: LD_INT 12
33793: PUSH
33794: LD_INT 13
33796: PUSH
33797: LD_INT 14
33799: PUSH
33800: LD_INT 15
33802: PUSH
33803: LD_INT 16
33805: PUSH
33806: LD_INT 17
33808: PUSH
33809: LD_INT 18
33811: PUSH
33812: LD_INT 19
33814: PUSH
33815: LD_INT 20
33817: PUSH
33818: LD_INT 21
33820: PUSH
33821: LD_INT 22
33823: PUSH
33824: LD_INT 23
33826: PUSH
33827: LD_INT 24
33829: PUSH
33830: LD_INT 25
33832: PUSH
33833: LD_INT 26
33835: PUSH
33836: LD_INT 27
33838: PUSH
33839: LD_INT 28
33841: PUSH
33842: LD_INT 29
33844: PUSH
33845: LD_INT 30
33847: PUSH
33848: LD_INT 31
33850: PUSH
33851: LD_INT 32
33853: PUSH
33854: LD_INT 33
33856: PUSH
33857: LD_INT 34
33859: PUSH
33860: LD_INT 36
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: LIST
33867: LIST
33868: LIST
33869: LIST
33870: LIST
33871: LIST
33872: LIST
33873: LIST
33874: LIST
33875: LIST
33876: LIST
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: LIST
33890: LIST
33891: LIST
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: PUSH
33900: LD_INT 101
33902: PUSH
33903: LD_INT 102
33905: PUSH
33906: LD_INT 103
33908: PUSH
33909: LD_INT 104
33911: PUSH
33912: LD_INT 105
33914: PUSH
33915: LD_INT 106
33917: PUSH
33918: LD_INT 107
33920: PUSH
33921: LD_INT 108
33923: PUSH
33924: LD_INT 109
33926: PUSH
33927: LD_INT 110
33929: PUSH
33930: LD_INT 111
33932: PUSH
33933: LD_INT 112
33935: PUSH
33936: LD_INT 113
33938: PUSH
33939: LD_INT 114
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: ST_TO_ADDR
33962: GO 34337
33964: LD_INT 18
33966: DOUBLE
33967: EQUAL
33968: IFTRUE 33972
33970: GO 34108
33972: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
33973: LD_ADDR_VAR 0 1
33977: PUSH
33978: LD_INT 2
33980: PUSH
33981: LD_INT 4
33983: PUSH
33984: LD_INT 5
33986: PUSH
33987: LD_INT 7
33989: PUSH
33990: LD_INT 11
33992: PUSH
33993: LD_INT 12
33995: PUSH
33996: LD_INT 15
33998: PUSH
33999: LD_INT 16
34001: PUSH
34002: LD_INT 20
34004: PUSH
34005: LD_INT 21
34007: PUSH
34008: LD_INT 22
34010: PUSH
34011: LD_INT 23
34013: PUSH
34014: LD_INT 25
34016: PUSH
34017: LD_INT 26
34019: PUSH
34020: LD_INT 30
34022: PUSH
34023: LD_INT 31
34025: PUSH
34026: LD_INT 32
34028: PUSH
34029: LD_INT 33
34031: PUSH
34032: LD_INT 34
34034: PUSH
34035: LD_INT 35
34037: PUSH
34038: LD_INT 36
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: LIST
34045: LIST
34046: LIST
34047: LIST
34048: LIST
34049: LIST
34050: LIST
34051: LIST
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 101
34066: PUSH
34067: LD_INT 102
34069: PUSH
34070: LD_INT 103
34072: PUSH
34073: LD_INT 106
34075: PUSH
34076: LD_INT 108
34078: PUSH
34079: LD_INT 112
34081: PUSH
34082: LD_INT 113
34084: PUSH
34085: LD_INT 114
34087: PUSH
34088: LD_INT 115
34090: PUSH
34091: EMPTY
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: PUSH
34102: EMPTY
34103: LIST
34104: LIST
34105: ST_TO_ADDR
34106: GO 34337
34108: LD_INT 19
34110: DOUBLE
34111: EQUAL
34112: IFTRUE 34116
34114: GO 34336
34116: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
34117: LD_ADDR_VAR 0 1
34121: PUSH
34122: LD_INT 1
34124: PUSH
34125: LD_INT 2
34127: PUSH
34128: LD_INT 3
34130: PUSH
34131: LD_INT 4
34133: PUSH
34134: LD_INT 5
34136: PUSH
34137: LD_INT 6
34139: PUSH
34140: LD_INT 7
34142: PUSH
34143: LD_INT 8
34145: PUSH
34146: LD_INT 9
34148: PUSH
34149: LD_INT 10
34151: PUSH
34152: LD_INT 11
34154: PUSH
34155: LD_INT 12
34157: PUSH
34158: LD_INT 13
34160: PUSH
34161: LD_INT 14
34163: PUSH
34164: LD_INT 15
34166: PUSH
34167: LD_INT 16
34169: PUSH
34170: LD_INT 17
34172: PUSH
34173: LD_INT 18
34175: PUSH
34176: LD_INT 19
34178: PUSH
34179: LD_INT 20
34181: PUSH
34182: LD_INT 21
34184: PUSH
34185: LD_INT 22
34187: PUSH
34188: LD_INT 23
34190: PUSH
34191: LD_INT 24
34193: PUSH
34194: LD_INT 25
34196: PUSH
34197: LD_INT 26
34199: PUSH
34200: LD_INT 27
34202: PUSH
34203: LD_INT 28
34205: PUSH
34206: LD_INT 29
34208: PUSH
34209: LD_INT 30
34211: PUSH
34212: LD_INT 31
34214: PUSH
34215: LD_INT 32
34217: PUSH
34218: LD_INT 33
34220: PUSH
34221: LD_INT 34
34223: PUSH
34224: LD_INT 35
34226: PUSH
34227: LD_INT 36
34229: PUSH
34230: EMPTY
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: LIST
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: LIST
34245: LIST
34246: LIST
34247: LIST
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: PUSH
34268: LD_INT 101
34270: PUSH
34271: LD_INT 102
34273: PUSH
34274: LD_INT 103
34276: PUSH
34277: LD_INT 104
34279: PUSH
34280: LD_INT 105
34282: PUSH
34283: LD_INT 106
34285: PUSH
34286: LD_INT 107
34288: PUSH
34289: LD_INT 108
34291: PUSH
34292: LD_INT 109
34294: PUSH
34295: LD_INT 110
34297: PUSH
34298: LD_INT 111
34300: PUSH
34301: LD_INT 112
34303: PUSH
34304: LD_INT 113
34306: PUSH
34307: LD_INT 114
34309: PUSH
34310: LD_INT 115
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: LIST
34317: LIST
34318: LIST
34319: LIST
34320: LIST
34321: LIST
34322: LIST
34323: LIST
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: PUSH
34330: EMPTY
34331: LIST
34332: LIST
34333: ST_TO_ADDR
34334: GO 34337
34336: POP
// end else
34337: GO 34556
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
34339: LD_ADDR_VAR 0 1
34343: PUSH
34344: LD_INT 1
34346: PUSH
34347: LD_INT 2
34349: PUSH
34350: LD_INT 3
34352: PUSH
34353: LD_INT 4
34355: PUSH
34356: LD_INT 5
34358: PUSH
34359: LD_INT 6
34361: PUSH
34362: LD_INT 7
34364: PUSH
34365: LD_INT 8
34367: PUSH
34368: LD_INT 9
34370: PUSH
34371: LD_INT 10
34373: PUSH
34374: LD_INT 11
34376: PUSH
34377: LD_INT 12
34379: PUSH
34380: LD_INT 13
34382: PUSH
34383: LD_INT 14
34385: PUSH
34386: LD_INT 15
34388: PUSH
34389: LD_INT 16
34391: PUSH
34392: LD_INT 17
34394: PUSH
34395: LD_INT 18
34397: PUSH
34398: LD_INT 19
34400: PUSH
34401: LD_INT 20
34403: PUSH
34404: LD_INT 21
34406: PUSH
34407: LD_INT 22
34409: PUSH
34410: LD_INT 23
34412: PUSH
34413: LD_INT 24
34415: PUSH
34416: LD_INT 25
34418: PUSH
34419: LD_INT 26
34421: PUSH
34422: LD_INT 27
34424: PUSH
34425: LD_INT 28
34427: PUSH
34428: LD_INT 29
34430: PUSH
34431: LD_INT 30
34433: PUSH
34434: LD_INT 31
34436: PUSH
34437: LD_INT 32
34439: PUSH
34440: LD_INT 33
34442: PUSH
34443: LD_INT 34
34445: PUSH
34446: LD_INT 35
34448: PUSH
34449: LD_INT 36
34451: PUSH
34452: EMPTY
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: LIST
34473: LIST
34474: LIST
34475: LIST
34476: LIST
34477: LIST
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 101
34492: PUSH
34493: LD_INT 102
34495: PUSH
34496: LD_INT 103
34498: PUSH
34499: LD_INT 104
34501: PUSH
34502: LD_INT 105
34504: PUSH
34505: LD_INT 106
34507: PUSH
34508: LD_INT 107
34510: PUSH
34511: LD_INT 108
34513: PUSH
34514: LD_INT 109
34516: PUSH
34517: LD_INT 110
34519: PUSH
34520: LD_INT 111
34522: PUSH
34523: LD_INT 112
34525: PUSH
34526: LD_INT 113
34528: PUSH
34529: LD_INT 114
34531: PUSH
34532: LD_INT 115
34534: PUSH
34535: EMPTY
34536: LIST
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: PUSH
34552: EMPTY
34553: LIST
34554: LIST
34555: ST_TO_ADDR
// if result then
34556: LD_VAR 0 1
34560: IFFALSE 34849
// begin normal :=  ;
34562: LD_ADDR_VAR 0 3
34566: PUSH
34567: LD_STRING 
34569: ST_TO_ADDR
// hardcore :=  ;
34570: LD_ADDR_VAR 0 4
34574: PUSH
34575: LD_STRING 
34577: ST_TO_ADDR
// for i = 1 to normalCounter do
34578: LD_ADDR_VAR 0 5
34582: PUSH
34583: DOUBLE
34584: LD_INT 1
34586: DEC
34587: ST_TO_ADDR
34588: LD_EXP 89
34592: PUSH
34593: FOR_TO
34594: IFFALSE 34695
// begin tmp := 0 ;
34596: LD_ADDR_VAR 0 2
34600: PUSH
34601: LD_STRING 0
34603: ST_TO_ADDR
// if result [ 1 ] then
34604: LD_VAR 0 1
34608: PUSH
34609: LD_INT 1
34611: ARRAY
34612: IFFALSE 34677
// if result [ 1 ] [ 1 ] = i then
34614: LD_VAR 0 1
34618: PUSH
34619: LD_INT 1
34621: ARRAY
34622: PUSH
34623: LD_INT 1
34625: ARRAY
34626: PUSH
34627: LD_VAR 0 5
34631: EQUAL
34632: IFFALSE 34677
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
34634: LD_ADDR_VAR 0 1
34638: PUSH
34639: LD_VAR 0 1
34643: PPUSH
34644: LD_INT 1
34646: PPUSH
34647: LD_VAR 0 1
34651: PUSH
34652: LD_INT 1
34654: ARRAY
34655: PPUSH
34656: LD_INT 1
34658: PPUSH
34659: CALL_OW 3
34663: PPUSH
34664: CALL_OW 1
34668: ST_TO_ADDR
// tmp := 1 ;
34669: LD_ADDR_VAR 0 2
34673: PUSH
34674: LD_STRING 1
34676: ST_TO_ADDR
// end ; normal := normal & tmp ;
34677: LD_ADDR_VAR 0 3
34681: PUSH
34682: LD_VAR 0 3
34686: PUSH
34687: LD_VAR 0 2
34691: STR
34692: ST_TO_ADDR
// end ;
34693: GO 34593
34695: POP
34696: POP
// for i = 1 to hardcoreCounter do
34697: LD_ADDR_VAR 0 5
34701: PUSH
34702: DOUBLE
34703: LD_INT 1
34705: DEC
34706: ST_TO_ADDR
34707: LD_EXP 90
34711: PUSH
34712: FOR_TO
34713: IFFALSE 34818
// begin tmp := 0 ;
34715: LD_ADDR_VAR 0 2
34719: PUSH
34720: LD_STRING 0
34722: ST_TO_ADDR
// if result [ 2 ] then
34723: LD_VAR 0 1
34727: PUSH
34728: LD_INT 2
34730: ARRAY
34731: IFFALSE 34800
// if result [ 2 ] [ 1 ] = 100 + i then
34733: LD_VAR 0 1
34737: PUSH
34738: LD_INT 2
34740: ARRAY
34741: PUSH
34742: LD_INT 1
34744: ARRAY
34745: PUSH
34746: LD_INT 100
34748: PUSH
34749: LD_VAR 0 5
34753: PLUS
34754: EQUAL
34755: IFFALSE 34800
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
34757: LD_ADDR_VAR 0 1
34761: PUSH
34762: LD_VAR 0 1
34766: PPUSH
34767: LD_INT 2
34769: PPUSH
34770: LD_VAR 0 1
34774: PUSH
34775: LD_INT 2
34777: ARRAY
34778: PPUSH
34779: LD_INT 1
34781: PPUSH
34782: CALL_OW 3
34786: PPUSH
34787: CALL_OW 1
34791: ST_TO_ADDR
// tmp := 1 ;
34792: LD_ADDR_VAR 0 2
34796: PUSH
34797: LD_STRING 1
34799: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
34800: LD_ADDR_VAR 0 4
34804: PUSH
34805: LD_VAR 0 4
34809: PUSH
34810: LD_VAR 0 2
34814: STR
34815: ST_TO_ADDR
// end ;
34816: GO 34712
34818: POP
34819: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
34820: LD_STRING getStreamItemsFromMission("
34822: PUSH
34823: LD_VAR 0 3
34827: STR
34828: PUSH
34829: LD_STRING ","
34831: STR
34832: PUSH
34833: LD_VAR 0 4
34837: STR
34838: PUSH
34839: LD_STRING ")
34841: STR
34842: PPUSH
34843: CALL_OW 559
// end else
34847: GO 34856
// ToLua ( getStreamItemsFromMission("","") ) ;
34849: LD_STRING getStreamItemsFromMission("","")
34851: PPUSH
34852: CALL_OW 559
// end ;
34856: LD_VAR 0 1
34860: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
34861: LD_EXP 88
34865: PUSH
34866: LD_EXP 93
34870: AND
34871: IFFALSE 34995
34873: GO 34875
34875: DISABLE
34876: LD_INT 0
34878: PPUSH
34879: PPUSH
// begin enable ;
34880: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
34881: LD_ADDR_VAR 0 2
34885: PUSH
34886: LD_INT 22
34888: PUSH
34889: LD_OWVAR 2
34893: PUSH
34894: EMPTY
34895: LIST
34896: LIST
34897: PUSH
34898: LD_INT 2
34900: PUSH
34901: LD_INT 34
34903: PUSH
34904: LD_INT 7
34906: PUSH
34907: EMPTY
34908: LIST
34909: LIST
34910: PUSH
34911: LD_INT 34
34913: PUSH
34914: LD_INT 45
34916: PUSH
34917: EMPTY
34918: LIST
34919: LIST
34920: PUSH
34921: LD_INT 34
34923: PUSH
34924: LD_INT 28
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: LD_INT 34
34933: PUSH
34934: LD_INT 47
34936: PUSH
34937: EMPTY
34938: LIST
34939: LIST
34940: PUSH
34941: EMPTY
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: PUSH
34948: EMPTY
34949: LIST
34950: LIST
34951: PPUSH
34952: CALL_OW 69
34956: ST_TO_ADDR
// if not tmp then
34957: LD_VAR 0 2
34961: NOT
34962: IFFALSE 34966
// exit ;
34964: GO 34995
// for i in tmp do
34966: LD_ADDR_VAR 0 1
34970: PUSH
34971: LD_VAR 0 2
34975: PUSH
34976: FOR_IN
34977: IFFALSE 34993
// begin SetLives ( i , 0 ) ;
34979: LD_VAR 0 1
34983: PPUSH
34984: LD_INT 0
34986: PPUSH
34987: CALL_OW 234
// end ;
34991: GO 34976
34993: POP
34994: POP
// end ;
34995: PPOPN 2
34997: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
34998: LD_EXP 88
35002: PUSH
35003: LD_EXP 94
35007: AND
35008: IFFALSE 35092
35010: GO 35012
35012: DISABLE
35013: LD_INT 0
35015: PPUSH
35016: PPUSH
// begin enable ;
35017: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
35018: LD_ADDR_VAR 0 2
35022: PUSH
35023: LD_INT 22
35025: PUSH
35026: LD_OWVAR 2
35030: PUSH
35031: EMPTY
35032: LIST
35033: LIST
35034: PUSH
35035: LD_INT 32
35037: PUSH
35038: LD_INT 3
35040: PUSH
35041: EMPTY
35042: LIST
35043: LIST
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PPUSH
35049: CALL_OW 69
35053: ST_TO_ADDR
// if not tmp then
35054: LD_VAR 0 2
35058: NOT
35059: IFFALSE 35063
// exit ;
35061: GO 35092
// for i in tmp do
35063: LD_ADDR_VAR 0 1
35067: PUSH
35068: LD_VAR 0 2
35072: PUSH
35073: FOR_IN
35074: IFFALSE 35090
// begin SetLives ( i , 0 ) ;
35076: LD_VAR 0 1
35080: PPUSH
35081: LD_INT 0
35083: PPUSH
35084: CALL_OW 234
// end ;
35088: GO 35073
35090: POP
35091: POP
// end ;
35092: PPOPN 2
35094: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
35095: LD_EXP 88
35099: PUSH
35100: LD_EXP 91
35104: AND
35105: IFFALSE 35198
35107: GO 35109
35109: DISABLE
35110: LD_INT 0
35112: PPUSH
// begin enable ;
35113: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
35114: LD_ADDR_VAR 0 1
35118: PUSH
35119: LD_INT 22
35121: PUSH
35122: LD_OWVAR 2
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 2
35133: PUSH
35134: LD_INT 25
35136: PUSH
35137: LD_INT 5
35139: PUSH
35140: EMPTY
35141: LIST
35142: LIST
35143: PUSH
35144: LD_INT 25
35146: PUSH
35147: LD_INT 9
35149: PUSH
35150: EMPTY
35151: LIST
35152: LIST
35153: PUSH
35154: LD_INT 25
35156: PUSH
35157: LD_INT 8
35159: PUSH
35160: EMPTY
35161: LIST
35162: LIST
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: PUSH
35170: EMPTY
35171: LIST
35172: LIST
35173: PPUSH
35174: CALL_OW 69
35178: PUSH
35179: FOR_IN
35180: IFFALSE 35196
// begin SetClass ( i , 1 ) ;
35182: LD_VAR 0 1
35186: PPUSH
35187: LD_INT 1
35189: PPUSH
35190: CALL_OW 336
// end ;
35194: GO 35179
35196: POP
35197: POP
// end ;
35198: PPOPN 1
35200: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
35201: LD_EXP 88
35205: PUSH
35206: LD_EXP 92
35210: AND
35211: PUSH
35212: LD_OWVAR 65
35216: PUSH
35217: LD_INT 7
35219: LESS
35220: AND
35221: IFFALSE 35235
35223: GO 35225
35225: DISABLE
// begin enable ;
35226: ENABLE
// game_speed := 7 ;
35227: LD_ADDR_OWVAR 65
35231: PUSH
35232: LD_INT 7
35234: ST_TO_ADDR
// end ;
35235: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
35236: LD_EXP 88
35240: PUSH
35241: LD_EXP 95
35245: AND
35246: IFFALSE 35448
35248: GO 35250
35250: DISABLE
35251: LD_INT 0
35253: PPUSH
35254: PPUSH
35255: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
35256: LD_ADDR_VAR 0 3
35260: PUSH
35261: LD_INT 81
35263: PUSH
35264: LD_OWVAR 2
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 21
35275: PUSH
35276: LD_INT 1
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PPUSH
35287: CALL_OW 69
35291: ST_TO_ADDR
// if not tmp then
35292: LD_VAR 0 3
35296: NOT
35297: IFFALSE 35301
// exit ;
35299: GO 35448
// if tmp > 5 then
35301: LD_VAR 0 3
35305: PUSH
35306: LD_INT 5
35308: GREATER
35309: IFFALSE 35321
// k := 5 else
35311: LD_ADDR_VAR 0 2
35315: PUSH
35316: LD_INT 5
35318: ST_TO_ADDR
35319: GO 35331
// k := tmp ;
35321: LD_ADDR_VAR 0 2
35325: PUSH
35326: LD_VAR 0 3
35330: ST_TO_ADDR
// for i := 1 to k do
35331: LD_ADDR_VAR 0 1
35335: PUSH
35336: DOUBLE
35337: LD_INT 1
35339: DEC
35340: ST_TO_ADDR
35341: LD_VAR 0 2
35345: PUSH
35346: FOR_TO
35347: IFFALSE 35446
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
35349: LD_VAR 0 3
35353: PUSH
35354: LD_VAR 0 1
35358: ARRAY
35359: PPUSH
35360: LD_VAR 0 1
35364: PUSH
35365: LD_INT 4
35367: MOD
35368: PUSH
35369: LD_INT 1
35371: PLUS
35372: PPUSH
35373: CALL_OW 259
35377: PUSH
35378: LD_INT 10
35380: LESS
35381: IFFALSE 35444
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
35383: LD_VAR 0 3
35387: PUSH
35388: LD_VAR 0 1
35392: ARRAY
35393: PPUSH
35394: LD_VAR 0 1
35398: PUSH
35399: LD_INT 4
35401: MOD
35402: PUSH
35403: LD_INT 1
35405: PLUS
35406: PPUSH
35407: LD_VAR 0 3
35411: PUSH
35412: LD_VAR 0 1
35416: ARRAY
35417: PPUSH
35418: LD_VAR 0 1
35422: PUSH
35423: LD_INT 4
35425: MOD
35426: PUSH
35427: LD_INT 1
35429: PLUS
35430: PPUSH
35431: CALL_OW 259
35435: PUSH
35436: LD_INT 1
35438: PLUS
35439: PPUSH
35440: CALL_OW 237
35444: GO 35346
35446: POP
35447: POP
// end ;
35448: PPOPN 3
35450: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
35451: LD_EXP 88
35455: PUSH
35456: LD_EXP 96
35460: AND
35461: IFFALSE 35481
35463: GO 35465
35465: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
35466: LD_INT 4
35468: PPUSH
35469: LD_OWVAR 2
35473: PPUSH
35474: LD_INT 0
35476: PPUSH
35477: CALL_OW 324
35481: END
// every 0 0$1 trigger StreamModeActive and sShovel do
35482: LD_EXP 88
35486: PUSH
35487: LD_EXP 125
35491: AND
35492: IFFALSE 35512
35494: GO 35496
35496: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
35497: LD_INT 19
35499: PPUSH
35500: LD_OWVAR 2
35504: PPUSH
35505: LD_INT 0
35507: PPUSH
35508: CALL_OW 324
35512: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
35513: LD_EXP 88
35517: PUSH
35518: LD_EXP 97
35522: AND
35523: IFFALSE 35625
35525: GO 35527
35527: DISABLE
35528: LD_INT 0
35530: PPUSH
35531: PPUSH
// begin enable ;
35532: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
35533: LD_ADDR_VAR 0 2
35537: PUSH
35538: LD_INT 22
35540: PUSH
35541: LD_OWVAR 2
35545: PUSH
35546: EMPTY
35547: LIST
35548: LIST
35549: PUSH
35550: LD_INT 2
35552: PUSH
35553: LD_INT 34
35555: PUSH
35556: LD_INT 11
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 34
35565: PUSH
35566: LD_INT 30
35568: PUSH
35569: EMPTY
35570: LIST
35571: LIST
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: LIST
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: PPUSH
35582: CALL_OW 69
35586: ST_TO_ADDR
// if not tmp then
35587: LD_VAR 0 2
35591: NOT
35592: IFFALSE 35596
// exit ;
35594: GO 35625
// for i in tmp do
35596: LD_ADDR_VAR 0 1
35600: PUSH
35601: LD_VAR 0 2
35605: PUSH
35606: FOR_IN
35607: IFFALSE 35623
// begin SetLives ( i , 0 ) ;
35609: LD_VAR 0 1
35613: PPUSH
35614: LD_INT 0
35616: PPUSH
35617: CALL_OW 234
// end ;
35621: GO 35606
35623: POP
35624: POP
// end ;
35625: PPOPN 2
35627: END
// every 0 0$1 trigger StreamModeActive and sBunker do
35628: LD_EXP 88
35632: PUSH
35633: LD_EXP 98
35637: AND
35638: IFFALSE 35658
35640: GO 35642
35642: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
35643: LD_INT 32
35645: PPUSH
35646: LD_OWVAR 2
35650: PPUSH
35651: LD_INT 0
35653: PPUSH
35654: CALL_OW 324
35658: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
35659: LD_EXP 88
35663: PUSH
35664: LD_EXP 99
35668: AND
35669: IFFALSE 35850
35671: GO 35673
35673: DISABLE
35674: LD_INT 0
35676: PPUSH
35677: PPUSH
35678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
35679: LD_ADDR_VAR 0 2
35683: PUSH
35684: LD_INT 22
35686: PUSH
35687: LD_OWVAR 2
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 33
35698: PUSH
35699: LD_INT 3
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PPUSH
35710: CALL_OW 69
35714: ST_TO_ADDR
// if not tmp then
35715: LD_VAR 0 2
35719: NOT
35720: IFFALSE 35724
// exit ;
35722: GO 35850
// side := 0 ;
35724: LD_ADDR_VAR 0 3
35728: PUSH
35729: LD_INT 0
35731: ST_TO_ADDR
// for i := 1 to 8 do
35732: LD_ADDR_VAR 0 1
35736: PUSH
35737: DOUBLE
35738: LD_INT 1
35740: DEC
35741: ST_TO_ADDR
35742: LD_INT 8
35744: PUSH
35745: FOR_TO
35746: IFFALSE 35794
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
35748: LD_OWVAR 2
35752: PUSH
35753: LD_VAR 0 1
35757: NONEQUAL
35758: PUSH
35759: LD_OWVAR 2
35763: PPUSH
35764: LD_VAR 0 1
35768: PPUSH
35769: CALL_OW 81
35773: PUSH
35774: LD_INT 2
35776: EQUAL
35777: AND
35778: IFFALSE 35792
// begin side := i ;
35780: LD_ADDR_VAR 0 3
35784: PUSH
35785: LD_VAR 0 1
35789: ST_TO_ADDR
// break ;
35790: GO 35794
// end ;
35792: GO 35745
35794: POP
35795: POP
// if not side then
35796: LD_VAR 0 3
35800: NOT
35801: IFFALSE 35805
// exit ;
35803: GO 35850
// for i := 1 to tmp do
35805: LD_ADDR_VAR 0 1
35809: PUSH
35810: DOUBLE
35811: LD_INT 1
35813: DEC
35814: ST_TO_ADDR
35815: LD_VAR 0 2
35819: PUSH
35820: FOR_TO
35821: IFFALSE 35848
// if Prob ( 60 ) then
35823: LD_INT 60
35825: PPUSH
35826: CALL_OW 13
35830: IFFALSE 35846
// SetSide ( i , side ) ;
35832: LD_VAR 0 1
35836: PPUSH
35837: LD_VAR 0 3
35841: PPUSH
35842: CALL_OW 235
35846: GO 35820
35848: POP
35849: POP
// end ;
35850: PPOPN 3
35852: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
35853: LD_EXP 88
35857: PUSH
35858: LD_EXP 101
35862: AND
35863: IFFALSE 35982
35865: GO 35867
35867: DISABLE
35868: LD_INT 0
35870: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
35871: LD_ADDR_VAR 0 1
35875: PUSH
35876: LD_INT 22
35878: PUSH
35879: LD_OWVAR 2
35883: PUSH
35884: EMPTY
35885: LIST
35886: LIST
35887: PUSH
35888: LD_INT 21
35890: PUSH
35891: LD_INT 1
35893: PUSH
35894: EMPTY
35895: LIST
35896: LIST
35897: PUSH
35898: LD_INT 3
35900: PUSH
35901: LD_INT 23
35903: PUSH
35904: LD_INT 0
35906: PUSH
35907: EMPTY
35908: LIST
35909: LIST
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: LIST
35919: PPUSH
35920: CALL_OW 69
35924: PUSH
35925: FOR_IN
35926: IFFALSE 35980
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
35928: LD_VAR 0 1
35932: PPUSH
35933: CALL_OW 257
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: LD_INT 2
35943: PUSH
35944: LD_INT 3
35946: PUSH
35947: LD_INT 4
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: IN
35956: IFFALSE 35978
// SetClass ( un , rand ( 1 , 4 ) ) ;
35958: LD_VAR 0 1
35962: PPUSH
35963: LD_INT 1
35965: PPUSH
35966: LD_INT 4
35968: PPUSH
35969: CALL_OW 12
35973: PPUSH
35974: CALL_OW 336
35978: GO 35925
35980: POP
35981: POP
// end ;
35982: PPOPN 1
35984: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
35985: LD_EXP 88
35989: PUSH
35990: LD_EXP 100
35994: AND
35995: IFFALSE 36074
35997: GO 35999
35999: DISABLE
36000: LD_INT 0
36002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
36003: LD_ADDR_VAR 0 1
36007: PUSH
36008: LD_INT 22
36010: PUSH
36011: LD_OWVAR 2
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 21
36022: PUSH
36023: LD_INT 3
36025: PUSH
36026: EMPTY
36027: LIST
36028: LIST
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PPUSH
36034: CALL_OW 69
36038: ST_TO_ADDR
// if not tmp then
36039: LD_VAR 0 1
36043: NOT
36044: IFFALSE 36048
// exit ;
36046: GO 36074
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
36048: LD_VAR 0 1
36052: PUSH
36053: LD_INT 1
36055: PPUSH
36056: LD_VAR 0 1
36060: PPUSH
36061: CALL_OW 12
36065: ARRAY
36066: PPUSH
36067: LD_INT 100
36069: PPUSH
36070: CALL_OW 234
// end ;
36074: PPOPN 1
36076: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
36077: LD_EXP 88
36081: PUSH
36082: LD_EXP 102
36086: AND
36087: IFFALSE 36185
36089: GO 36091
36091: DISABLE
36092: LD_INT 0
36094: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
36095: LD_ADDR_VAR 0 1
36099: PUSH
36100: LD_INT 22
36102: PUSH
36103: LD_OWVAR 2
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: LD_INT 21
36114: PUSH
36115: LD_INT 1
36117: PUSH
36118: EMPTY
36119: LIST
36120: LIST
36121: PUSH
36122: EMPTY
36123: LIST
36124: LIST
36125: PPUSH
36126: CALL_OW 69
36130: ST_TO_ADDR
// if not tmp then
36131: LD_VAR 0 1
36135: NOT
36136: IFFALSE 36140
// exit ;
36138: GO 36185
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
36140: LD_VAR 0 1
36144: PUSH
36145: LD_INT 1
36147: PPUSH
36148: LD_VAR 0 1
36152: PPUSH
36153: CALL_OW 12
36157: ARRAY
36158: PPUSH
36159: LD_INT 1
36161: PPUSH
36162: LD_INT 4
36164: PPUSH
36165: CALL_OW 12
36169: PPUSH
36170: LD_INT 3000
36172: PPUSH
36173: LD_INT 9000
36175: PPUSH
36176: CALL_OW 12
36180: PPUSH
36181: CALL_OW 492
// end ;
36185: PPOPN 1
36187: END
// every 0 0$1 trigger StreamModeActive and sDepot do
36188: LD_EXP 88
36192: PUSH
36193: LD_EXP 103
36197: AND
36198: IFFALSE 36218
36200: GO 36202
36202: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
36203: LD_INT 1
36205: PPUSH
36206: LD_OWVAR 2
36210: PPUSH
36211: LD_INT 0
36213: PPUSH
36214: CALL_OW 324
36218: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
36219: LD_EXP 88
36223: PUSH
36224: LD_EXP 104
36228: AND
36229: IFFALSE 36312
36231: GO 36233
36233: DISABLE
36234: LD_INT 0
36236: PPUSH
36237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
36238: LD_ADDR_VAR 0 2
36242: PUSH
36243: LD_INT 22
36245: PUSH
36246: LD_OWVAR 2
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 21
36257: PUSH
36258: LD_INT 3
36260: PUSH
36261: EMPTY
36262: LIST
36263: LIST
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PPUSH
36269: CALL_OW 69
36273: ST_TO_ADDR
// if not tmp then
36274: LD_VAR 0 2
36278: NOT
36279: IFFALSE 36283
// exit ;
36281: GO 36312
// for i in tmp do
36283: LD_ADDR_VAR 0 1
36287: PUSH
36288: LD_VAR 0 2
36292: PUSH
36293: FOR_IN
36294: IFFALSE 36310
// SetBLevel ( i , 10 ) ;
36296: LD_VAR 0 1
36300: PPUSH
36301: LD_INT 10
36303: PPUSH
36304: CALL_OW 241
36308: GO 36293
36310: POP
36311: POP
// end ;
36312: PPOPN 2
36314: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
36315: LD_EXP 88
36319: PUSH
36320: LD_EXP 105
36324: AND
36325: IFFALSE 36436
36327: GO 36329
36329: DISABLE
36330: LD_INT 0
36332: PPUSH
36333: PPUSH
36334: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
36335: LD_ADDR_VAR 0 3
36339: PUSH
36340: LD_INT 22
36342: PUSH
36343: LD_OWVAR 2
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 25
36354: PUSH
36355: LD_INT 1
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PPUSH
36366: CALL_OW 69
36370: ST_TO_ADDR
// if not tmp then
36371: LD_VAR 0 3
36375: NOT
36376: IFFALSE 36380
// exit ;
36378: GO 36436
// un := tmp [ rand ( 1 , tmp ) ] ;
36380: LD_ADDR_VAR 0 2
36384: PUSH
36385: LD_VAR 0 3
36389: PUSH
36390: LD_INT 1
36392: PPUSH
36393: LD_VAR 0 3
36397: PPUSH
36398: CALL_OW 12
36402: ARRAY
36403: ST_TO_ADDR
// if Crawls ( un ) then
36404: LD_VAR 0 2
36408: PPUSH
36409: CALL_OW 318
36413: IFFALSE 36424
// ComWalk ( un ) ;
36415: LD_VAR 0 2
36419: PPUSH
36420: CALL_OW 138
// SetClass ( un , class_sniper ) ;
36424: LD_VAR 0 2
36428: PPUSH
36429: LD_INT 5
36431: PPUSH
36432: CALL_OW 336
// end ;
36436: PPOPN 3
36438: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
36439: LD_EXP 88
36443: PUSH
36444: LD_EXP 106
36448: AND
36449: PUSH
36450: LD_OWVAR 67
36454: PUSH
36455: LD_INT 3
36457: LESS
36458: AND
36459: IFFALSE 36478
36461: GO 36463
36463: DISABLE
// Difficulty := Difficulty + 1 ;
36464: LD_ADDR_OWVAR 67
36468: PUSH
36469: LD_OWVAR 67
36473: PUSH
36474: LD_INT 1
36476: PLUS
36477: ST_TO_ADDR
36478: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
36479: LD_EXP 88
36483: PUSH
36484: LD_EXP 107
36488: AND
36489: IFFALSE 36592
36491: GO 36493
36493: DISABLE
36494: LD_INT 0
36496: PPUSH
// begin for i := 1 to 5 do
36497: LD_ADDR_VAR 0 1
36501: PUSH
36502: DOUBLE
36503: LD_INT 1
36505: DEC
36506: ST_TO_ADDR
36507: LD_INT 5
36509: PUSH
36510: FOR_TO
36511: IFFALSE 36590
// begin uc_nation := nation_nature ;
36513: LD_ADDR_OWVAR 21
36517: PUSH
36518: LD_INT 0
36520: ST_TO_ADDR
// uc_side := 0 ;
36521: LD_ADDR_OWVAR 20
36525: PUSH
36526: LD_INT 0
36528: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
36529: LD_ADDR_OWVAR 29
36533: PUSH
36534: LD_INT 12
36536: PUSH
36537: LD_INT 12
36539: PUSH
36540: EMPTY
36541: LIST
36542: LIST
36543: ST_TO_ADDR
// hc_agressivity := 20 ;
36544: LD_ADDR_OWVAR 35
36548: PUSH
36549: LD_INT 20
36551: ST_TO_ADDR
// hc_class := class_tiger ;
36552: LD_ADDR_OWVAR 28
36556: PUSH
36557: LD_INT 14
36559: ST_TO_ADDR
// hc_gallery :=  ;
36560: LD_ADDR_OWVAR 33
36564: PUSH
36565: LD_STRING 
36567: ST_TO_ADDR
// hc_name :=  ;
36568: LD_ADDR_OWVAR 26
36572: PUSH
36573: LD_STRING 
36575: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
36576: CALL_OW 44
36580: PPUSH
36581: LD_INT 0
36583: PPUSH
36584: CALL_OW 51
// end ;
36588: GO 36510
36590: POP
36591: POP
// end ;
36592: PPOPN 1
36594: END
// every 0 0$1 trigger StreamModeActive and sBomb do
36595: LD_EXP 88
36599: PUSH
36600: LD_EXP 108
36604: AND
36605: IFFALSE 36614
36607: GO 36609
36609: DISABLE
// StreamSibBomb ;
36610: CALL 36615 0 0
36614: END
// export function StreamSibBomb ; var i , x , y ; begin
36615: LD_INT 0
36617: PPUSH
36618: PPUSH
36619: PPUSH
36620: PPUSH
// result := false ;
36621: LD_ADDR_VAR 0 1
36625: PUSH
36626: LD_INT 0
36628: ST_TO_ADDR
// for i := 1 to 16 do
36629: LD_ADDR_VAR 0 2
36633: PUSH
36634: DOUBLE
36635: LD_INT 1
36637: DEC
36638: ST_TO_ADDR
36639: LD_INT 16
36641: PUSH
36642: FOR_TO
36643: IFFALSE 36842
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
36645: LD_ADDR_VAR 0 3
36649: PUSH
36650: LD_INT 10
36652: PUSH
36653: LD_INT 20
36655: PUSH
36656: LD_INT 30
36658: PUSH
36659: LD_INT 40
36661: PUSH
36662: LD_INT 50
36664: PUSH
36665: LD_INT 60
36667: PUSH
36668: LD_INT 70
36670: PUSH
36671: LD_INT 80
36673: PUSH
36674: LD_INT 90
36676: PUSH
36677: LD_INT 100
36679: PUSH
36680: LD_INT 110
36682: PUSH
36683: LD_INT 120
36685: PUSH
36686: LD_INT 130
36688: PUSH
36689: LD_INT 140
36691: PUSH
36692: LD_INT 150
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 1
36714: PPUSH
36715: LD_INT 15
36717: PPUSH
36718: CALL_OW 12
36722: ARRAY
36723: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
36724: LD_ADDR_VAR 0 4
36728: PUSH
36729: LD_INT 10
36731: PUSH
36732: LD_INT 20
36734: PUSH
36735: LD_INT 30
36737: PUSH
36738: LD_INT 40
36740: PUSH
36741: LD_INT 50
36743: PUSH
36744: LD_INT 60
36746: PUSH
36747: LD_INT 70
36749: PUSH
36750: LD_INT 80
36752: PUSH
36753: LD_INT 90
36755: PUSH
36756: LD_INT 100
36758: PUSH
36759: LD_INT 110
36761: PUSH
36762: LD_INT 120
36764: PUSH
36765: LD_INT 130
36767: PUSH
36768: LD_INT 140
36770: PUSH
36771: LD_INT 150
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 1
36793: PPUSH
36794: LD_INT 15
36796: PPUSH
36797: CALL_OW 12
36801: ARRAY
36802: ST_TO_ADDR
// if ValidHex ( x , y ) then
36803: LD_VAR 0 3
36807: PPUSH
36808: LD_VAR 0 4
36812: PPUSH
36813: CALL_OW 488
36817: IFFALSE 36840
// begin result := [ x , y ] ;
36819: LD_ADDR_VAR 0 1
36823: PUSH
36824: LD_VAR 0 3
36828: PUSH
36829: LD_VAR 0 4
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: ST_TO_ADDR
// break ;
36838: GO 36842
// end ; end ;
36840: GO 36642
36842: POP
36843: POP
// if result then
36844: LD_VAR 0 1
36848: IFFALSE 36908
// begin ToLua ( playSibBomb() ) ;
36850: LD_STRING playSibBomb()
36852: PPUSH
36853: CALL_OW 559
// wait ( 0 0$14 ) ;
36857: LD_INT 490
36859: PPUSH
36860: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
36864: LD_VAR 0 1
36868: PUSH
36869: LD_INT 1
36871: ARRAY
36872: PPUSH
36873: LD_VAR 0 1
36877: PUSH
36878: LD_INT 2
36880: ARRAY
36881: PPUSH
36882: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
36886: LD_VAR 0 1
36890: PUSH
36891: LD_INT 1
36893: ARRAY
36894: PPUSH
36895: LD_VAR 0 1
36899: PUSH
36900: LD_INT 2
36902: ARRAY
36903: PPUSH
36904: CALL_OW 429
// end ; end ;
36908: LD_VAR 0 1
36912: RET
// every 0 0$1 trigger StreamModeActive and sReset do
36913: LD_EXP 88
36917: PUSH
36918: LD_EXP 110
36922: AND
36923: IFFALSE 36935
36925: GO 36927
36927: DISABLE
// YouLost (  ) ;
36928: LD_STRING 
36930: PPUSH
36931: CALL_OW 104
36935: END
// every 0 0$1 trigger StreamModeActive and sFog do
36936: LD_EXP 88
36940: PUSH
36941: LD_EXP 109
36945: AND
36946: IFFALSE 36960
36948: GO 36950
36950: DISABLE
// FogOff ( your_side ) ;
36951: LD_OWVAR 2
36955: PPUSH
36956: CALL_OW 344
36960: END
// every 0 0$1 trigger StreamModeActive and sSun do
36961: LD_EXP 88
36965: PUSH
36966: LD_EXP 111
36970: AND
36971: IFFALSE 36999
36973: GO 36975
36975: DISABLE
// begin solar_recharge_percent := 0 ;
36976: LD_ADDR_OWVAR 79
36980: PUSH
36981: LD_INT 0
36983: ST_TO_ADDR
// wait ( 5 5$00 ) ;
36984: LD_INT 10500
36986: PPUSH
36987: CALL_OW 67
// solar_recharge_percent := 100 ;
36991: LD_ADDR_OWVAR 79
36995: PUSH
36996: LD_INT 100
36998: ST_TO_ADDR
// end ;
36999: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
37000: LD_EXP 88
37004: PUSH
37005: LD_EXP 112
37009: AND
37010: IFFALSE 37249
37012: GO 37014
37014: DISABLE
37015: LD_INT 0
37017: PPUSH
37018: PPUSH
37019: PPUSH
// begin tmp := [ ] ;
37020: LD_ADDR_VAR 0 3
37024: PUSH
37025: EMPTY
37026: ST_TO_ADDR
// for i := 1 to 6 do
37027: LD_ADDR_VAR 0 1
37031: PUSH
37032: DOUBLE
37033: LD_INT 1
37035: DEC
37036: ST_TO_ADDR
37037: LD_INT 6
37039: PUSH
37040: FOR_TO
37041: IFFALSE 37146
// begin uc_nation := nation_nature ;
37043: LD_ADDR_OWVAR 21
37047: PUSH
37048: LD_INT 0
37050: ST_TO_ADDR
// uc_side := 0 ;
37051: LD_ADDR_OWVAR 20
37055: PUSH
37056: LD_INT 0
37058: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37059: LD_ADDR_OWVAR 29
37063: PUSH
37064: LD_INT 12
37066: PUSH
37067: LD_INT 12
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: ST_TO_ADDR
// hc_agressivity := 20 ;
37074: LD_ADDR_OWVAR 35
37078: PUSH
37079: LD_INT 20
37081: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
37082: LD_ADDR_OWVAR 28
37086: PUSH
37087: LD_INT 17
37089: ST_TO_ADDR
// hc_gallery :=  ;
37090: LD_ADDR_OWVAR 33
37094: PUSH
37095: LD_STRING 
37097: ST_TO_ADDR
// hc_name :=  ;
37098: LD_ADDR_OWVAR 26
37102: PUSH
37103: LD_STRING 
37105: ST_TO_ADDR
// un := CreateHuman ;
37106: LD_ADDR_VAR 0 2
37110: PUSH
37111: CALL_OW 44
37115: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
37116: LD_VAR 0 2
37120: PPUSH
37121: LD_INT 1
37123: PPUSH
37124: CALL_OW 51
// tmp := tmp ^ un ;
37128: LD_ADDR_VAR 0 3
37132: PUSH
37133: LD_VAR 0 3
37137: PUSH
37138: LD_VAR 0 2
37142: ADD
37143: ST_TO_ADDR
// end ;
37144: GO 37040
37146: POP
37147: POP
// repeat wait ( 0 0$1 ) ;
37148: LD_INT 35
37150: PPUSH
37151: CALL_OW 67
// for un in tmp do
37155: LD_ADDR_VAR 0 2
37159: PUSH
37160: LD_VAR 0 3
37164: PUSH
37165: FOR_IN
37166: IFFALSE 37240
// begin if IsDead ( un ) then
37168: LD_VAR 0 2
37172: PPUSH
37173: CALL_OW 301
37177: IFFALSE 37197
// begin tmp := tmp diff un ;
37179: LD_ADDR_VAR 0 3
37183: PUSH
37184: LD_VAR 0 3
37188: PUSH
37189: LD_VAR 0 2
37193: DIFF
37194: ST_TO_ADDR
// continue ;
37195: GO 37165
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
37197: LD_VAR 0 2
37201: PPUSH
37202: LD_INT 3
37204: PUSH
37205: LD_INT 22
37207: PUSH
37208: LD_INT 0
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: EMPTY
37216: LIST
37217: LIST
37218: PPUSH
37219: CALL_OW 69
37223: PPUSH
37224: LD_VAR 0 2
37228: PPUSH
37229: CALL_OW 74
37233: PPUSH
37234: CALL_OW 115
// end ;
37238: GO 37165
37240: POP
37241: POP
// until not tmp ;
37242: LD_VAR 0 3
37246: NOT
37247: IFFALSE 37148
// end ;
37249: PPOPN 3
37251: END
// every 0 0$1 trigger StreamModeActive and sTroll do
37252: LD_EXP 88
37256: PUSH
37257: LD_EXP 113
37261: AND
37262: IFFALSE 37316
37264: GO 37266
37266: DISABLE
// begin ToLua ( displayTroll(); ) ;
37267: LD_STRING displayTroll();
37269: PPUSH
37270: CALL_OW 559
// wait ( 3 3$00 ) ;
37274: LD_INT 6300
37276: PPUSH
37277: CALL_OW 67
// ToLua ( hideTroll(); ) ;
37281: LD_STRING hideTroll();
37283: PPUSH
37284: CALL_OW 559
// wait ( 1 1$00 ) ;
37288: LD_INT 2100
37290: PPUSH
37291: CALL_OW 67
// ToLua ( displayTroll(); ) ;
37295: LD_STRING displayTroll();
37297: PPUSH
37298: CALL_OW 559
// wait ( 1 1$00 ) ;
37302: LD_INT 2100
37304: PPUSH
37305: CALL_OW 67
// ToLua ( hideTroll(); ) ;
37309: LD_STRING hideTroll();
37311: PPUSH
37312: CALL_OW 559
// end ;
37316: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
37317: LD_EXP 88
37321: PUSH
37322: LD_EXP 114
37326: AND
37327: IFFALSE 37390
37329: GO 37331
37331: DISABLE
37332: LD_INT 0
37334: PPUSH
// begin p := 0 ;
37335: LD_ADDR_VAR 0 1
37339: PUSH
37340: LD_INT 0
37342: ST_TO_ADDR
// repeat game_speed := 1 ;
37343: LD_ADDR_OWVAR 65
37347: PUSH
37348: LD_INT 1
37350: ST_TO_ADDR
// wait ( 0 0$1 ) ;
37351: LD_INT 35
37353: PPUSH
37354: CALL_OW 67
// p := p + 1 ;
37358: LD_ADDR_VAR 0 1
37362: PUSH
37363: LD_VAR 0 1
37367: PUSH
37368: LD_INT 1
37370: PLUS
37371: ST_TO_ADDR
// until p >= 60 ;
37372: LD_VAR 0 1
37376: PUSH
37377: LD_INT 60
37379: GREATEREQUAL
37380: IFFALSE 37343
// game_speed := 4 ;
37382: LD_ADDR_OWVAR 65
37386: PUSH
37387: LD_INT 4
37389: ST_TO_ADDR
// end ;
37390: PPOPN 1
37392: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
37393: LD_EXP 88
37397: PUSH
37398: LD_EXP 115
37402: AND
37403: IFFALSE 37549
37405: GO 37407
37407: DISABLE
37408: LD_INT 0
37410: PPUSH
37411: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
37412: LD_ADDR_VAR 0 1
37416: PUSH
37417: LD_INT 22
37419: PUSH
37420: LD_OWVAR 2
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 2
37431: PUSH
37432: LD_INT 30
37434: PUSH
37435: LD_INT 0
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: LD_INT 30
37444: PUSH
37445: LD_INT 1
37447: PUSH
37448: EMPTY
37449: LIST
37450: LIST
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: LIST
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PPUSH
37461: CALL_OW 69
37465: ST_TO_ADDR
// if not depot then
37466: LD_VAR 0 1
37470: NOT
37471: IFFALSE 37475
// exit ;
37473: GO 37549
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
37475: LD_ADDR_VAR 0 2
37479: PUSH
37480: LD_VAR 0 1
37484: PUSH
37485: LD_INT 1
37487: PPUSH
37488: LD_VAR 0 1
37492: PPUSH
37493: CALL_OW 12
37497: ARRAY
37498: PPUSH
37499: CALL_OW 274
37503: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
37504: LD_VAR 0 2
37508: PPUSH
37509: LD_INT 1
37511: PPUSH
37512: LD_INT 0
37514: PPUSH
37515: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
37519: LD_VAR 0 2
37523: PPUSH
37524: LD_INT 2
37526: PPUSH
37527: LD_INT 0
37529: PPUSH
37530: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
37534: LD_VAR 0 2
37538: PPUSH
37539: LD_INT 3
37541: PPUSH
37542: LD_INT 0
37544: PPUSH
37545: CALL_OW 277
// end ;
37549: PPOPN 2
37551: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
37552: LD_EXP 88
37556: PUSH
37557: LD_EXP 116
37561: AND
37562: IFFALSE 37659
37564: GO 37566
37566: DISABLE
37567: LD_INT 0
37569: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
37570: LD_ADDR_VAR 0 1
37574: PUSH
37575: LD_INT 22
37577: PUSH
37578: LD_OWVAR 2
37582: PUSH
37583: EMPTY
37584: LIST
37585: LIST
37586: PUSH
37587: LD_INT 21
37589: PUSH
37590: LD_INT 1
37592: PUSH
37593: EMPTY
37594: LIST
37595: LIST
37596: PUSH
37597: LD_INT 3
37599: PUSH
37600: LD_INT 23
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: LIST
37618: PPUSH
37619: CALL_OW 69
37623: ST_TO_ADDR
// if not tmp then
37624: LD_VAR 0 1
37628: NOT
37629: IFFALSE 37633
// exit ;
37631: GO 37659
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
37633: LD_VAR 0 1
37637: PUSH
37638: LD_INT 1
37640: PPUSH
37641: LD_VAR 0 1
37645: PPUSH
37646: CALL_OW 12
37650: ARRAY
37651: PPUSH
37652: LD_INT 200
37654: PPUSH
37655: CALL_OW 234
// end ;
37659: PPOPN 1
37661: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
37662: LD_EXP 88
37666: PUSH
37667: LD_EXP 117
37671: AND
37672: IFFALSE 37751
37674: GO 37676
37676: DISABLE
37677: LD_INT 0
37679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
37680: LD_ADDR_VAR 0 1
37684: PUSH
37685: LD_INT 22
37687: PUSH
37688: LD_OWVAR 2
37692: PUSH
37693: EMPTY
37694: LIST
37695: LIST
37696: PUSH
37697: LD_INT 21
37699: PUSH
37700: LD_INT 2
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PPUSH
37711: CALL_OW 69
37715: ST_TO_ADDR
// if not tmp then
37716: LD_VAR 0 1
37720: NOT
37721: IFFALSE 37725
// exit ;
37723: GO 37751
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
37725: LD_VAR 0 1
37729: PUSH
37730: LD_INT 1
37732: PPUSH
37733: LD_VAR 0 1
37737: PPUSH
37738: CALL_OW 12
37742: ARRAY
37743: PPUSH
37744: LD_INT 60
37746: PPUSH
37747: CALL_OW 234
// end ;
37751: PPOPN 1
37753: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
37754: LD_EXP 88
37758: PUSH
37759: LD_EXP 118
37763: AND
37764: IFFALSE 37863
37766: GO 37768
37768: DISABLE
37769: LD_INT 0
37771: PPUSH
37772: PPUSH
// begin enable ;
37773: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
37774: LD_ADDR_VAR 0 1
37778: PUSH
37779: LD_INT 22
37781: PUSH
37782: LD_OWVAR 2
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 61
37793: PUSH
37794: EMPTY
37795: LIST
37796: PUSH
37797: LD_INT 33
37799: PUSH
37800: LD_INT 2
37802: PUSH
37803: EMPTY
37804: LIST
37805: LIST
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: LIST
37811: PPUSH
37812: CALL_OW 69
37816: ST_TO_ADDR
// if not tmp then
37817: LD_VAR 0 1
37821: NOT
37822: IFFALSE 37826
// exit ;
37824: GO 37863
// for i in tmp do
37826: LD_ADDR_VAR 0 2
37830: PUSH
37831: LD_VAR 0 1
37835: PUSH
37836: FOR_IN
37837: IFFALSE 37861
// if IsControledBy ( i ) then
37839: LD_VAR 0 2
37843: PPUSH
37844: CALL_OW 312
37848: IFFALSE 37859
// ComUnlink ( i ) ;
37850: LD_VAR 0 2
37854: PPUSH
37855: CALL_OW 136
37859: GO 37836
37861: POP
37862: POP
// end ;
37863: PPOPN 2
37865: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
37866: LD_EXP 88
37870: PUSH
37871: LD_EXP 119
37875: AND
37876: IFFALSE 38016
37878: GO 37880
37880: DISABLE
37881: LD_INT 0
37883: PPUSH
37884: PPUSH
// begin ToLua ( displayPowell(); ) ;
37885: LD_STRING displayPowell();
37887: PPUSH
37888: CALL_OW 559
// uc_side := 0 ;
37892: LD_ADDR_OWVAR 20
37896: PUSH
37897: LD_INT 0
37899: ST_TO_ADDR
// uc_nation := 2 ;
37900: LD_ADDR_OWVAR 21
37904: PUSH
37905: LD_INT 2
37907: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
37908: LD_ADDR_OWVAR 37
37912: PUSH
37913: LD_INT 14
37915: ST_TO_ADDR
// vc_engine := engine_siberite ;
37916: LD_ADDR_OWVAR 39
37920: PUSH
37921: LD_INT 3
37923: ST_TO_ADDR
// vc_control := control_apeman ;
37924: LD_ADDR_OWVAR 38
37928: PUSH
37929: LD_INT 5
37931: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
37932: LD_ADDR_OWVAR 40
37936: PUSH
37937: LD_INT 29
37939: ST_TO_ADDR
// un := CreateVehicle ;
37940: LD_ADDR_VAR 0 2
37944: PUSH
37945: CALL_OW 45
37949: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
37950: LD_VAR 0 2
37954: PPUSH
37955: LD_INT 1
37957: PPUSH
37958: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
37962: LD_INT 35
37964: PPUSH
37965: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
37969: LD_VAR 0 2
37973: PPUSH
37974: LD_INT 22
37976: PUSH
37977: LD_OWVAR 2
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PPUSH
37986: CALL_OW 69
37990: PPUSH
37991: LD_VAR 0 2
37995: PPUSH
37996: CALL_OW 74
38000: PPUSH
38001: CALL_OW 115
// until IsDead ( un ) ;
38005: LD_VAR 0 2
38009: PPUSH
38010: CALL_OW 301
38014: IFFALSE 37962
// end ;
38016: PPOPN 2
38018: END
// every 0 0$1 trigger StreamModeActive and sStu do
38019: LD_EXP 88
38023: PUSH
38024: LD_EXP 127
38028: AND
38029: IFFALSE 38045
38031: GO 38033
38033: DISABLE
// begin ToLua ( displayStucuk(); ) ;
38034: LD_STRING displayStucuk();
38036: PPUSH
38037: CALL_OW 559
// ResetFog ;
38041: CALL_OW 335
// end ;
38045: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
38046: LD_EXP 88
38050: PUSH
38051: LD_EXP 120
38055: AND
38056: IFFALSE 38197
38058: GO 38060
38060: DISABLE
38061: LD_INT 0
38063: PPUSH
38064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
38065: LD_ADDR_VAR 0 2
38069: PUSH
38070: LD_INT 22
38072: PUSH
38073: LD_OWVAR 2
38077: PUSH
38078: EMPTY
38079: LIST
38080: LIST
38081: PUSH
38082: LD_INT 21
38084: PUSH
38085: LD_INT 1
38087: PUSH
38088: EMPTY
38089: LIST
38090: LIST
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PPUSH
38096: CALL_OW 69
38100: ST_TO_ADDR
// if not tmp then
38101: LD_VAR 0 2
38105: NOT
38106: IFFALSE 38110
// exit ;
38108: GO 38197
// un := tmp [ rand ( 1 , tmp ) ] ;
38110: LD_ADDR_VAR 0 1
38114: PUSH
38115: LD_VAR 0 2
38119: PUSH
38120: LD_INT 1
38122: PPUSH
38123: LD_VAR 0 2
38127: PPUSH
38128: CALL_OW 12
38132: ARRAY
38133: ST_TO_ADDR
// SetSide ( un , 0 ) ;
38134: LD_VAR 0 1
38138: PPUSH
38139: LD_INT 0
38141: PPUSH
38142: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
38146: LD_VAR 0 1
38150: PPUSH
38151: LD_OWVAR 3
38155: PUSH
38156: LD_VAR 0 1
38160: DIFF
38161: PPUSH
38162: LD_VAR 0 1
38166: PPUSH
38167: CALL_OW 74
38171: PPUSH
38172: CALL_OW 115
// wait ( 0 0$20 ) ;
38176: LD_INT 700
38178: PPUSH
38179: CALL_OW 67
// SetSide ( un , your_side ) ;
38183: LD_VAR 0 1
38187: PPUSH
38188: LD_OWVAR 2
38192: PPUSH
38193: CALL_OW 235
// end ;
38197: PPOPN 2
38199: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
38200: LD_EXP 88
38204: PUSH
38205: LD_EXP 121
38209: AND
38210: IFFALSE 38316
38212: GO 38214
38214: DISABLE
38215: LD_INT 0
38217: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38218: LD_ADDR_VAR 0 1
38222: PUSH
38223: LD_INT 22
38225: PUSH
38226: LD_OWVAR 2
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 2
38237: PUSH
38238: LD_INT 30
38240: PUSH
38241: LD_INT 0
38243: PUSH
38244: EMPTY
38245: LIST
38246: LIST
38247: PUSH
38248: LD_INT 30
38250: PUSH
38251: LD_INT 1
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: LIST
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PPUSH
38267: CALL_OW 69
38271: ST_TO_ADDR
// if not depot then
38272: LD_VAR 0 1
38276: NOT
38277: IFFALSE 38281
// exit ;
38279: GO 38316
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
38281: LD_VAR 0 1
38285: PUSH
38286: LD_INT 1
38288: ARRAY
38289: PPUSH
38290: CALL_OW 250
38294: PPUSH
38295: LD_VAR 0 1
38299: PUSH
38300: LD_INT 1
38302: ARRAY
38303: PPUSH
38304: CALL_OW 251
38308: PPUSH
38309: LD_INT 70
38311: PPUSH
38312: CALL_OW 495
// end ;
38316: PPOPN 1
38318: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
38319: LD_EXP 88
38323: PUSH
38324: LD_EXP 122
38328: AND
38329: IFFALSE 38540
38331: GO 38333
38333: DISABLE
38334: LD_INT 0
38336: PPUSH
38337: PPUSH
38338: PPUSH
38339: PPUSH
38340: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
38341: LD_ADDR_VAR 0 5
38345: PUSH
38346: LD_INT 22
38348: PUSH
38349: LD_OWVAR 2
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 21
38360: PUSH
38361: LD_INT 1
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: EMPTY
38369: LIST
38370: LIST
38371: PPUSH
38372: CALL_OW 69
38376: ST_TO_ADDR
// if not tmp then
38377: LD_VAR 0 5
38381: NOT
38382: IFFALSE 38386
// exit ;
38384: GO 38540
// for i in tmp do
38386: LD_ADDR_VAR 0 1
38390: PUSH
38391: LD_VAR 0 5
38395: PUSH
38396: FOR_IN
38397: IFFALSE 38538
// begin d := rand ( 0 , 5 ) ;
38399: LD_ADDR_VAR 0 4
38403: PUSH
38404: LD_INT 0
38406: PPUSH
38407: LD_INT 5
38409: PPUSH
38410: CALL_OW 12
38414: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
38415: LD_ADDR_VAR 0 2
38419: PUSH
38420: LD_VAR 0 1
38424: PPUSH
38425: CALL_OW 250
38429: PPUSH
38430: LD_VAR 0 4
38434: PPUSH
38435: LD_INT 3
38437: PPUSH
38438: LD_INT 12
38440: PPUSH
38441: CALL_OW 12
38445: PPUSH
38446: CALL_OW 272
38450: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
38451: LD_ADDR_VAR 0 3
38455: PUSH
38456: LD_VAR 0 1
38460: PPUSH
38461: CALL_OW 251
38465: PPUSH
38466: LD_VAR 0 4
38470: PPUSH
38471: LD_INT 3
38473: PPUSH
38474: LD_INT 12
38476: PPUSH
38477: CALL_OW 12
38481: PPUSH
38482: CALL_OW 273
38486: ST_TO_ADDR
// if ValidHex ( x , y ) then
38487: LD_VAR 0 2
38491: PPUSH
38492: LD_VAR 0 3
38496: PPUSH
38497: CALL_OW 488
38501: IFFALSE 38536
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
38503: LD_VAR 0 1
38507: PPUSH
38508: LD_VAR 0 2
38512: PPUSH
38513: LD_VAR 0 3
38517: PPUSH
38518: LD_INT 3
38520: PPUSH
38521: LD_INT 6
38523: PPUSH
38524: CALL_OW 12
38528: PPUSH
38529: LD_INT 1
38531: PPUSH
38532: CALL_OW 483
// end ;
38536: GO 38396
38538: POP
38539: POP
// end ;
38540: PPOPN 5
38542: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
38543: LD_EXP 88
38547: PUSH
38548: LD_EXP 123
38552: AND
38553: IFFALSE 38647
38555: GO 38557
38557: DISABLE
38558: LD_INT 0
38560: PPUSH
38561: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
38562: LD_ADDR_VAR 0 2
38566: PUSH
38567: LD_INT 22
38569: PUSH
38570: LD_OWVAR 2
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 32
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: EMPTY
38586: LIST
38587: LIST
38588: PUSH
38589: LD_INT 21
38591: PUSH
38592: LD_INT 2
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: LIST
38603: PPUSH
38604: CALL_OW 69
38608: ST_TO_ADDR
// if not tmp then
38609: LD_VAR 0 2
38613: NOT
38614: IFFALSE 38618
// exit ;
38616: GO 38647
// for i in tmp do
38618: LD_ADDR_VAR 0 1
38622: PUSH
38623: LD_VAR 0 2
38627: PUSH
38628: FOR_IN
38629: IFFALSE 38645
// SetFuel ( i , 0 ) ;
38631: LD_VAR 0 1
38635: PPUSH
38636: LD_INT 0
38638: PPUSH
38639: CALL_OW 240
38643: GO 38628
38645: POP
38646: POP
// end ;
38647: PPOPN 2
38649: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
38650: LD_EXP 88
38654: PUSH
38655: LD_EXP 124
38659: AND
38660: IFFALSE 38726
38662: GO 38664
38664: DISABLE
38665: LD_INT 0
38667: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
38668: LD_ADDR_VAR 0 1
38672: PUSH
38673: LD_INT 22
38675: PUSH
38676: LD_OWVAR 2
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 30
38687: PUSH
38688: LD_INT 29
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: PPUSH
38699: CALL_OW 69
38703: ST_TO_ADDR
// if not tmp then
38704: LD_VAR 0 1
38708: NOT
38709: IFFALSE 38713
// exit ;
38711: GO 38726
// DestroyUnit ( tmp [ 1 ] ) ;
38713: LD_VAR 0 1
38717: PUSH
38718: LD_INT 1
38720: ARRAY
38721: PPUSH
38722: CALL_OW 65
// end ;
38726: PPOPN 1
38728: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
38729: LD_EXP 88
38733: PUSH
38734: LD_EXP 126
38738: AND
38739: IFFALSE 38868
38741: GO 38743
38743: DISABLE
38744: LD_INT 0
38746: PPUSH
// begin uc_side := 0 ;
38747: LD_ADDR_OWVAR 20
38751: PUSH
38752: LD_INT 0
38754: ST_TO_ADDR
// uc_nation := nation_arabian ;
38755: LD_ADDR_OWVAR 21
38759: PUSH
38760: LD_INT 2
38762: ST_TO_ADDR
// hc_gallery :=  ;
38763: LD_ADDR_OWVAR 33
38767: PUSH
38768: LD_STRING 
38770: ST_TO_ADDR
// hc_name :=  ;
38771: LD_ADDR_OWVAR 26
38775: PUSH
38776: LD_STRING 
38778: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
38779: LD_INT 1
38781: PPUSH
38782: LD_INT 11
38784: PPUSH
38785: LD_INT 10
38787: PPUSH
38788: CALL_OW 380
// un := CreateHuman ;
38792: LD_ADDR_VAR 0 1
38796: PUSH
38797: CALL_OW 44
38801: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38802: LD_VAR 0 1
38806: PPUSH
38807: LD_INT 1
38809: PPUSH
38810: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
38814: LD_INT 35
38816: PPUSH
38817: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
38821: LD_VAR 0 1
38825: PPUSH
38826: LD_INT 22
38828: PUSH
38829: LD_OWVAR 2
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PPUSH
38838: CALL_OW 69
38842: PPUSH
38843: LD_VAR 0 1
38847: PPUSH
38848: CALL_OW 74
38852: PPUSH
38853: CALL_OW 115
// until IsDead ( un ) ;
38857: LD_VAR 0 1
38861: PPUSH
38862: CALL_OW 301
38866: IFFALSE 38814
// end ;
38868: PPOPN 1
38870: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
38871: LD_EXP 88
38875: PUSH
38876: LD_EXP 128
38880: AND
38881: IFFALSE 38893
38883: GO 38885
38885: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
38886: LD_STRING earthquake(getX(game), 0, 32)
38888: PPUSH
38889: CALL_OW 559
38893: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
38894: LD_EXP 88
38898: PUSH
38899: LD_EXP 129
38903: AND
38904: IFFALSE 38995
38906: GO 38908
38908: DISABLE
38909: LD_INT 0
38911: PPUSH
// begin enable ;
38912: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
38913: LD_ADDR_VAR 0 1
38917: PUSH
38918: LD_INT 22
38920: PUSH
38921: LD_OWVAR 2
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 21
38932: PUSH
38933: LD_INT 2
38935: PUSH
38936: EMPTY
38937: LIST
38938: LIST
38939: PUSH
38940: LD_INT 33
38942: PUSH
38943: LD_INT 3
38945: PUSH
38946: EMPTY
38947: LIST
38948: LIST
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: LIST
38954: PPUSH
38955: CALL_OW 69
38959: ST_TO_ADDR
// if not tmp then
38960: LD_VAR 0 1
38964: NOT
38965: IFFALSE 38969
// exit ;
38967: GO 38995
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
38969: LD_VAR 0 1
38973: PUSH
38974: LD_INT 1
38976: PPUSH
38977: LD_VAR 0 1
38981: PPUSH
38982: CALL_OW 12
38986: ARRAY
38987: PPUSH
38988: LD_INT 1
38990: PPUSH
38991: CALL_OW 234
// end ;
38995: PPOPN 1
38997: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
38998: LD_EXP 88
39002: PUSH
39003: LD_EXP 130
39007: AND
39008: IFFALSE 39149
39010: GO 39012
39012: DISABLE
39013: LD_INT 0
39015: PPUSH
39016: PPUSH
39017: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
39018: LD_ADDR_VAR 0 3
39022: PUSH
39023: LD_INT 22
39025: PUSH
39026: LD_OWVAR 2
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 25
39037: PUSH
39038: LD_INT 1
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PPUSH
39049: CALL_OW 69
39053: ST_TO_ADDR
// if not tmp then
39054: LD_VAR 0 3
39058: NOT
39059: IFFALSE 39063
// exit ;
39061: GO 39149
// un := tmp [ rand ( 1 , tmp ) ] ;
39063: LD_ADDR_VAR 0 2
39067: PUSH
39068: LD_VAR 0 3
39072: PUSH
39073: LD_INT 1
39075: PPUSH
39076: LD_VAR 0 3
39080: PPUSH
39081: CALL_OW 12
39085: ARRAY
39086: ST_TO_ADDR
// if Crawls ( un ) then
39087: LD_VAR 0 2
39091: PPUSH
39092: CALL_OW 318
39096: IFFALSE 39107
// ComWalk ( un ) ;
39098: LD_VAR 0 2
39102: PPUSH
39103: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
39107: LD_VAR 0 2
39111: PPUSH
39112: LD_INT 9
39114: PPUSH
39115: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
39119: LD_INT 28
39121: PPUSH
39122: LD_OWVAR 2
39126: PPUSH
39127: LD_INT 2
39129: PPUSH
39130: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
39134: LD_INT 29
39136: PPUSH
39137: LD_OWVAR 2
39141: PPUSH
39142: LD_INT 2
39144: PPUSH
39145: CALL_OW 322
// end ;
39149: PPOPN 3
39151: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
39152: LD_EXP 88
39156: PUSH
39157: LD_EXP 131
39161: AND
39162: IFFALSE 39273
39164: GO 39166
39166: DISABLE
39167: LD_INT 0
39169: PPUSH
39170: PPUSH
39171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
39172: LD_ADDR_VAR 0 3
39176: PUSH
39177: LD_INT 22
39179: PUSH
39180: LD_OWVAR 2
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 25
39191: PUSH
39192: LD_INT 1
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PPUSH
39203: CALL_OW 69
39207: ST_TO_ADDR
// if not tmp then
39208: LD_VAR 0 3
39212: NOT
39213: IFFALSE 39217
// exit ;
39215: GO 39273
// un := tmp [ rand ( 1 , tmp ) ] ;
39217: LD_ADDR_VAR 0 2
39221: PUSH
39222: LD_VAR 0 3
39226: PUSH
39227: LD_INT 1
39229: PPUSH
39230: LD_VAR 0 3
39234: PPUSH
39235: CALL_OW 12
39239: ARRAY
39240: ST_TO_ADDR
// if Crawls ( un ) then
39241: LD_VAR 0 2
39245: PPUSH
39246: CALL_OW 318
39250: IFFALSE 39261
// ComWalk ( un ) ;
39252: LD_VAR 0 2
39256: PPUSH
39257: CALL_OW 138
// SetClass ( un , class_mortar ) ;
39261: LD_VAR 0 2
39265: PPUSH
39266: LD_INT 8
39268: PPUSH
39269: CALL_OW 336
// end ;
39273: PPOPN 3
39275: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
39276: LD_EXP 88
39280: PUSH
39281: LD_EXP 132
39285: AND
39286: IFFALSE 39430
39288: GO 39290
39290: DISABLE
39291: LD_INT 0
39293: PPUSH
39294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
39295: LD_ADDR_VAR 0 2
39299: PUSH
39300: LD_INT 22
39302: PUSH
39303: LD_OWVAR 2
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 21
39314: PUSH
39315: LD_INT 2
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 2
39324: PUSH
39325: LD_INT 34
39327: PUSH
39328: LD_INT 12
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 34
39337: PUSH
39338: LD_INT 51
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 34
39347: PUSH
39348: LD_INT 32
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: LIST
39365: PPUSH
39366: CALL_OW 69
39370: ST_TO_ADDR
// if not tmp then
39371: LD_VAR 0 2
39375: NOT
39376: IFFALSE 39380
// exit ;
39378: GO 39430
// for i in tmp do
39380: LD_ADDR_VAR 0 1
39384: PUSH
39385: LD_VAR 0 2
39389: PUSH
39390: FOR_IN
39391: IFFALSE 39428
// if GetCargo ( i , mat_artifact ) = 0 then
39393: LD_VAR 0 1
39397: PPUSH
39398: LD_INT 4
39400: PPUSH
39401: CALL_OW 289
39405: PUSH
39406: LD_INT 0
39408: EQUAL
39409: IFFALSE 39426
// SetCargo ( i , mat_siberit , 100 ) ;
39411: LD_VAR 0 1
39415: PPUSH
39416: LD_INT 3
39418: PPUSH
39419: LD_INT 100
39421: PPUSH
39422: CALL_OW 290
39426: GO 39390
39428: POP
39429: POP
// end ;
39430: PPOPN 2
39432: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
39433: LD_EXP 88
39437: PUSH
39438: LD_EXP 133
39442: AND
39443: IFFALSE 39626
39445: GO 39447
39447: DISABLE
39448: LD_INT 0
39450: PPUSH
39451: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
39452: LD_ADDR_VAR 0 2
39456: PUSH
39457: LD_INT 22
39459: PUSH
39460: LD_OWVAR 2
39464: PUSH
39465: EMPTY
39466: LIST
39467: LIST
39468: PPUSH
39469: CALL_OW 69
39473: ST_TO_ADDR
// if not tmp then
39474: LD_VAR 0 2
39478: NOT
39479: IFFALSE 39483
// exit ;
39481: GO 39626
// for i := 1 to 2 do
39483: LD_ADDR_VAR 0 1
39487: PUSH
39488: DOUBLE
39489: LD_INT 1
39491: DEC
39492: ST_TO_ADDR
39493: LD_INT 2
39495: PUSH
39496: FOR_TO
39497: IFFALSE 39624
// begin uc_side := your_side ;
39499: LD_ADDR_OWVAR 20
39503: PUSH
39504: LD_OWVAR 2
39508: ST_TO_ADDR
// uc_nation := nation_american ;
39509: LD_ADDR_OWVAR 21
39513: PUSH
39514: LD_INT 1
39516: ST_TO_ADDR
// vc_chassis := us_morphling ;
39517: LD_ADDR_OWVAR 37
39521: PUSH
39522: LD_INT 5
39524: ST_TO_ADDR
// vc_engine := engine_siberite ;
39525: LD_ADDR_OWVAR 39
39529: PUSH
39530: LD_INT 3
39532: ST_TO_ADDR
// vc_control := control_computer ;
39533: LD_ADDR_OWVAR 38
39537: PUSH
39538: LD_INT 3
39540: ST_TO_ADDR
// vc_weapon := us_double_laser ;
39541: LD_ADDR_OWVAR 40
39545: PUSH
39546: LD_INT 10
39548: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
39549: LD_VAR 0 2
39553: PUSH
39554: LD_INT 1
39556: ARRAY
39557: PPUSH
39558: CALL_OW 310
39562: NOT
39563: IFFALSE 39610
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
39565: CALL_OW 45
39569: PPUSH
39570: LD_VAR 0 2
39574: PUSH
39575: LD_INT 1
39577: ARRAY
39578: PPUSH
39579: CALL_OW 250
39583: PPUSH
39584: LD_VAR 0 2
39588: PUSH
39589: LD_INT 1
39591: ARRAY
39592: PPUSH
39593: CALL_OW 251
39597: PPUSH
39598: LD_INT 12
39600: PPUSH
39601: LD_INT 1
39603: PPUSH
39604: CALL_OW 50
39608: GO 39622
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
39610: CALL_OW 45
39614: PPUSH
39615: LD_INT 1
39617: PPUSH
39618: CALL_OW 51
// end ;
39622: GO 39496
39624: POP
39625: POP
// end ;
39626: PPOPN 2
39628: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
39629: LD_EXP 88
39633: PUSH
39634: LD_EXP 134
39638: AND
39639: IFFALSE 39861
39641: GO 39643
39643: DISABLE
39644: LD_INT 0
39646: PPUSH
39647: PPUSH
39648: PPUSH
39649: PPUSH
39650: PPUSH
39651: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
39652: LD_ADDR_VAR 0 6
39656: PUSH
39657: LD_INT 22
39659: PUSH
39660: LD_OWVAR 2
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 21
39671: PUSH
39672: LD_INT 1
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 3
39681: PUSH
39682: LD_INT 23
39684: PUSH
39685: LD_INT 0
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: LIST
39700: PPUSH
39701: CALL_OW 69
39705: ST_TO_ADDR
// if not tmp then
39706: LD_VAR 0 6
39710: NOT
39711: IFFALSE 39715
// exit ;
39713: GO 39861
// s1 := rand ( 1 , 4 ) ;
39715: LD_ADDR_VAR 0 2
39719: PUSH
39720: LD_INT 1
39722: PPUSH
39723: LD_INT 4
39725: PPUSH
39726: CALL_OW 12
39730: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
39731: LD_ADDR_VAR 0 4
39735: PUSH
39736: LD_VAR 0 6
39740: PUSH
39741: LD_INT 1
39743: ARRAY
39744: PPUSH
39745: LD_VAR 0 2
39749: PPUSH
39750: CALL_OW 259
39754: ST_TO_ADDR
// if s1 = 1 then
39755: LD_VAR 0 2
39759: PUSH
39760: LD_INT 1
39762: EQUAL
39763: IFFALSE 39783
// s2 := rand ( 2 , 4 ) else
39765: LD_ADDR_VAR 0 3
39769: PUSH
39770: LD_INT 2
39772: PPUSH
39773: LD_INT 4
39775: PPUSH
39776: CALL_OW 12
39780: ST_TO_ADDR
39781: GO 39791
// s2 := 1 ;
39783: LD_ADDR_VAR 0 3
39787: PUSH
39788: LD_INT 1
39790: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
39791: LD_ADDR_VAR 0 5
39795: PUSH
39796: LD_VAR 0 6
39800: PUSH
39801: LD_INT 1
39803: ARRAY
39804: PPUSH
39805: LD_VAR 0 3
39809: PPUSH
39810: CALL_OW 259
39814: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
39815: LD_VAR 0 6
39819: PUSH
39820: LD_INT 1
39822: ARRAY
39823: PPUSH
39824: LD_VAR 0 2
39828: PPUSH
39829: LD_VAR 0 5
39833: PPUSH
39834: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
39838: LD_VAR 0 6
39842: PUSH
39843: LD_INT 1
39845: ARRAY
39846: PPUSH
39847: LD_VAR 0 3
39851: PPUSH
39852: LD_VAR 0 4
39856: PPUSH
39857: CALL_OW 237
// end ;
39861: PPOPN 6
39863: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
39864: LD_EXP 88
39868: PUSH
39869: LD_EXP 135
39873: AND
39874: IFFALSE 39953
39876: GO 39878
39878: DISABLE
39879: LD_INT 0
39881: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
39882: LD_ADDR_VAR 0 1
39886: PUSH
39887: LD_INT 22
39889: PUSH
39890: LD_OWVAR 2
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 30
39901: PUSH
39902: LD_INT 3
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: PPUSH
39913: CALL_OW 69
39917: ST_TO_ADDR
// if not tmp then
39918: LD_VAR 0 1
39922: NOT
39923: IFFALSE 39927
// exit ;
39925: GO 39953
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
39927: LD_VAR 0 1
39931: PUSH
39932: LD_INT 1
39934: PPUSH
39935: LD_VAR 0 1
39939: PPUSH
39940: CALL_OW 12
39944: ARRAY
39945: PPUSH
39946: LD_INT 1
39948: PPUSH
39949: CALL_OW 234
// end ;
39953: PPOPN 1
39955: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
39956: LD_EXP 88
39960: PUSH
39961: LD_EXP 136
39965: AND
39966: IFFALSE 40078
39968: GO 39970
39970: DISABLE
39971: LD_INT 0
39973: PPUSH
39974: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
39975: LD_ADDR_VAR 0 2
39979: PUSH
39980: LD_INT 22
39982: PUSH
39983: LD_OWVAR 2
39987: PUSH
39988: EMPTY
39989: LIST
39990: LIST
39991: PUSH
39992: LD_INT 2
39994: PUSH
39995: LD_INT 30
39997: PUSH
39998: LD_INT 27
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 30
40007: PUSH
40008: LD_INT 26
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 30
40017: PUSH
40018: LD_INT 28
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: LIST
40029: LIST
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PPUSH
40035: CALL_OW 69
40039: ST_TO_ADDR
// if not tmp then
40040: LD_VAR 0 2
40044: NOT
40045: IFFALSE 40049
// exit ;
40047: GO 40078
// for i in tmp do
40049: LD_ADDR_VAR 0 1
40053: PUSH
40054: LD_VAR 0 2
40058: PUSH
40059: FOR_IN
40060: IFFALSE 40076
// SetLives ( i , 1 ) ;
40062: LD_VAR 0 1
40066: PPUSH
40067: LD_INT 1
40069: PPUSH
40070: CALL_OW 234
40074: GO 40059
40076: POP
40077: POP
// end ;
40078: PPOPN 2
40080: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
40081: LD_EXP 88
40085: PUSH
40086: LD_EXP 137
40090: AND
40091: IFFALSE 40365
40093: GO 40095
40095: DISABLE
40096: LD_INT 0
40098: PPUSH
40099: PPUSH
40100: PPUSH
// begin i := rand ( 1 , 7 ) ;
40101: LD_ADDR_VAR 0 1
40105: PUSH
40106: LD_INT 1
40108: PPUSH
40109: LD_INT 7
40111: PPUSH
40112: CALL_OW 12
40116: ST_TO_ADDR
// case i of 1 :
40117: LD_VAR 0 1
40121: PUSH
40122: LD_INT 1
40124: DOUBLE
40125: EQUAL
40126: IFTRUE 40130
40128: GO 40140
40130: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
40131: LD_STRING earthquake(getX(game), 0, 32)
40133: PPUSH
40134: CALL_OW 559
40138: GO 40365
40140: LD_INT 2
40142: DOUBLE
40143: EQUAL
40144: IFTRUE 40148
40146: GO 40162
40148: POP
// begin ToLua ( displayStucuk(); ) ;
40149: LD_STRING displayStucuk();
40151: PPUSH
40152: CALL_OW 559
// ResetFog ;
40156: CALL_OW 335
// end ; 3 :
40160: GO 40365
40162: LD_INT 3
40164: DOUBLE
40165: EQUAL
40166: IFTRUE 40170
40168: GO 40274
40170: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40171: LD_ADDR_VAR 0 2
40175: PUSH
40176: LD_INT 22
40178: PUSH
40179: LD_OWVAR 2
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 25
40190: PUSH
40191: LD_INT 1
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: EMPTY
40199: LIST
40200: LIST
40201: PPUSH
40202: CALL_OW 69
40206: ST_TO_ADDR
// if not tmp then
40207: LD_VAR 0 2
40211: NOT
40212: IFFALSE 40216
// exit ;
40214: GO 40365
// un := tmp [ rand ( 1 , tmp ) ] ;
40216: LD_ADDR_VAR 0 3
40220: PUSH
40221: LD_VAR 0 2
40225: PUSH
40226: LD_INT 1
40228: PPUSH
40229: LD_VAR 0 2
40233: PPUSH
40234: CALL_OW 12
40238: ARRAY
40239: ST_TO_ADDR
// if Crawls ( un ) then
40240: LD_VAR 0 3
40244: PPUSH
40245: CALL_OW 318
40249: IFFALSE 40260
// ComWalk ( un ) ;
40251: LD_VAR 0 3
40255: PPUSH
40256: CALL_OW 138
// SetClass ( un , class_mortar ) ;
40260: LD_VAR 0 3
40264: PPUSH
40265: LD_INT 8
40267: PPUSH
40268: CALL_OW 336
// end ; 4 :
40272: GO 40365
40274: LD_INT 4
40276: DOUBLE
40277: EQUAL
40278: IFTRUE 40282
40280: GO 40343
40282: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
40283: LD_ADDR_VAR 0 2
40287: PUSH
40288: LD_INT 22
40290: PUSH
40291: LD_OWVAR 2
40295: PUSH
40296: EMPTY
40297: LIST
40298: LIST
40299: PUSH
40300: LD_INT 30
40302: PUSH
40303: LD_INT 29
40305: PUSH
40306: EMPTY
40307: LIST
40308: LIST
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PPUSH
40314: CALL_OW 69
40318: ST_TO_ADDR
// if not tmp then
40319: LD_VAR 0 2
40323: NOT
40324: IFFALSE 40328
// exit ;
40326: GO 40365
// DestroyUnit ( tmp [ 1 ] ) ;
40328: LD_VAR 0 2
40332: PUSH
40333: LD_INT 1
40335: ARRAY
40336: PPUSH
40337: CALL_OW 65
// end ; 5 .. 7 :
40341: GO 40365
40343: LD_INT 5
40345: DOUBLE
40346: GREATEREQUAL
40347: IFFALSE 40355
40349: LD_INT 7
40351: DOUBLE
40352: LESSEQUAL
40353: IFTRUE 40357
40355: GO 40364
40357: POP
// StreamSibBomb ; end ;
40358: CALL 36615 0 0
40362: GO 40365
40364: POP
// end ;
40365: PPOPN 3
40367: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
40368: LD_EXP 88
40372: PUSH
40373: LD_EXP 138
40377: AND
40378: IFFALSE 40534
40380: GO 40382
40382: DISABLE
40383: LD_INT 0
40385: PPUSH
40386: PPUSH
40387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
40388: LD_ADDR_VAR 0 2
40392: PUSH
40393: LD_INT 81
40395: PUSH
40396: LD_OWVAR 2
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 2
40407: PUSH
40408: LD_INT 21
40410: PUSH
40411: LD_INT 1
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 21
40420: PUSH
40421: LD_INT 2
40423: PUSH
40424: EMPTY
40425: LIST
40426: LIST
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: LIST
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PPUSH
40437: CALL_OW 69
40441: ST_TO_ADDR
// if not tmp then
40442: LD_VAR 0 2
40446: NOT
40447: IFFALSE 40451
// exit ;
40449: GO 40534
// p := 0 ;
40451: LD_ADDR_VAR 0 3
40455: PUSH
40456: LD_INT 0
40458: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40459: LD_INT 35
40461: PPUSH
40462: CALL_OW 67
// p := p + 1 ;
40466: LD_ADDR_VAR 0 3
40470: PUSH
40471: LD_VAR 0 3
40475: PUSH
40476: LD_INT 1
40478: PLUS
40479: ST_TO_ADDR
// for i in tmp do
40480: LD_ADDR_VAR 0 1
40484: PUSH
40485: LD_VAR 0 2
40489: PUSH
40490: FOR_IN
40491: IFFALSE 40522
// if GetLives ( i ) < 1000 then
40493: LD_VAR 0 1
40497: PPUSH
40498: CALL_OW 256
40502: PUSH
40503: LD_INT 1000
40505: LESS
40506: IFFALSE 40520
// SetLives ( i , 1000 ) ;
40508: LD_VAR 0 1
40512: PPUSH
40513: LD_INT 1000
40515: PPUSH
40516: CALL_OW 234
40520: GO 40490
40522: POP
40523: POP
// until p > 20 ;
40524: LD_VAR 0 3
40528: PUSH
40529: LD_INT 20
40531: GREATER
40532: IFFALSE 40459
// end ;
40534: PPOPN 3
40536: END
// every 0 0$1 trigger StreamModeActive and sTime do
40537: LD_EXP 88
40541: PUSH
40542: LD_EXP 139
40546: AND
40547: IFFALSE 40582
40549: GO 40551
40551: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
40552: LD_INT 28
40554: PPUSH
40555: LD_OWVAR 2
40559: PPUSH
40560: LD_INT 2
40562: PPUSH
40563: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
40567: LD_INT 30
40569: PPUSH
40570: LD_OWVAR 2
40574: PPUSH
40575: LD_INT 2
40577: PPUSH
40578: CALL_OW 322
// end ;
40582: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
40583: LD_EXP 88
40587: PUSH
40588: LD_EXP 140
40592: AND
40593: IFFALSE 40714
40595: GO 40597
40597: DISABLE
40598: LD_INT 0
40600: PPUSH
40601: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
40602: LD_ADDR_VAR 0 2
40606: PUSH
40607: LD_INT 22
40609: PUSH
40610: LD_OWVAR 2
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 21
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 3
40631: PUSH
40632: LD_INT 23
40634: PUSH
40635: LD_INT 0
40637: PUSH
40638: EMPTY
40639: LIST
40640: LIST
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: EMPTY
40647: LIST
40648: LIST
40649: LIST
40650: PPUSH
40651: CALL_OW 69
40655: ST_TO_ADDR
// if not tmp then
40656: LD_VAR 0 2
40660: NOT
40661: IFFALSE 40665
// exit ;
40663: GO 40714
// for i in tmp do
40665: LD_ADDR_VAR 0 1
40669: PUSH
40670: LD_VAR 0 2
40674: PUSH
40675: FOR_IN
40676: IFFALSE 40712
// begin if Crawls ( i ) then
40678: LD_VAR 0 1
40682: PPUSH
40683: CALL_OW 318
40687: IFFALSE 40698
// ComWalk ( i ) ;
40689: LD_VAR 0 1
40693: PPUSH
40694: CALL_OW 138
// SetClass ( i , 2 ) ;
40698: LD_VAR 0 1
40702: PPUSH
40703: LD_INT 2
40705: PPUSH
40706: CALL_OW 336
// end ;
40710: GO 40675
40712: POP
40713: POP
// end ;
40714: PPOPN 2
40716: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
40717: LD_EXP 88
40721: PUSH
40722: LD_EXP 141
40726: AND
40727: IFFALSE 41008
40729: GO 40731
40731: DISABLE
40732: LD_INT 0
40734: PPUSH
40735: PPUSH
40736: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
40737: LD_OWVAR 2
40741: PPUSH
40742: LD_INT 9
40744: PPUSH
40745: LD_INT 1
40747: PPUSH
40748: LD_INT 1
40750: PPUSH
40751: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
40755: LD_INT 9
40757: PPUSH
40758: LD_OWVAR 2
40762: PPUSH
40763: CALL_OW 343
// uc_side := 9 ;
40767: LD_ADDR_OWVAR 20
40771: PUSH
40772: LD_INT 9
40774: ST_TO_ADDR
// uc_nation := 2 ;
40775: LD_ADDR_OWVAR 21
40779: PUSH
40780: LD_INT 2
40782: ST_TO_ADDR
// hc_name := Dark Warrior ;
40783: LD_ADDR_OWVAR 26
40787: PUSH
40788: LD_STRING Dark Warrior
40790: ST_TO_ADDR
// hc_gallery :=  ;
40791: LD_ADDR_OWVAR 33
40795: PUSH
40796: LD_STRING 
40798: ST_TO_ADDR
// hc_noskilllimit := true ;
40799: LD_ADDR_OWVAR 76
40803: PUSH
40804: LD_INT 1
40806: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
40807: LD_ADDR_OWVAR 31
40811: PUSH
40812: LD_INT 30
40814: PUSH
40815: LD_INT 30
40817: PUSH
40818: LD_INT 30
40820: PUSH
40821: LD_INT 30
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: ST_TO_ADDR
// un := CreateHuman ;
40830: LD_ADDR_VAR 0 3
40834: PUSH
40835: CALL_OW 44
40839: ST_TO_ADDR
// hc_noskilllimit := false ;
40840: LD_ADDR_OWVAR 76
40844: PUSH
40845: LD_INT 0
40847: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
40848: LD_VAR 0 3
40852: PPUSH
40853: LD_INT 1
40855: PPUSH
40856: CALL_OW 51
// p := 0 ;
40860: LD_ADDR_VAR 0 2
40864: PUSH
40865: LD_INT 0
40867: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
40868: LD_INT 35
40870: PPUSH
40871: CALL_OW 67
// p := p + 1 ;
40875: LD_ADDR_VAR 0 2
40879: PUSH
40880: LD_VAR 0 2
40884: PUSH
40885: LD_INT 1
40887: PLUS
40888: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
40889: LD_VAR 0 3
40893: PPUSH
40894: CALL_OW 256
40898: PUSH
40899: LD_INT 1000
40901: LESS
40902: IFFALSE 40916
// SetLives ( un , 1000 ) ;
40904: LD_VAR 0 3
40908: PPUSH
40909: LD_INT 1000
40911: PPUSH
40912: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
40916: LD_VAR 0 3
40920: PPUSH
40921: LD_INT 81
40923: PUSH
40924: LD_OWVAR 2
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 91
40935: PUSH
40936: LD_VAR 0 3
40940: PUSH
40941: LD_INT 30
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: LIST
40948: PUSH
40949: EMPTY
40950: LIST
40951: LIST
40952: PPUSH
40953: CALL_OW 69
40957: PPUSH
40958: LD_VAR 0 3
40962: PPUSH
40963: CALL_OW 74
40967: PPUSH
40968: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
40972: LD_VAR 0 2
40976: PUSH
40977: LD_INT 60
40979: GREATER
40980: PUSH
40981: LD_VAR 0 3
40985: PPUSH
40986: CALL_OW 301
40990: OR
40991: IFFALSE 40868
// if un then
40993: LD_VAR 0 3
40997: IFFALSE 41008
// RemoveUnit ( un ) ;
40999: LD_VAR 0 3
41003: PPUSH
41004: CALL_OW 64
// end ;
41008: PPOPN 3
41010: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
41011: LD_INT 0
41013: PPUSH
// case cmd of 301 :
41014: LD_VAR 0 1
41018: PUSH
41019: LD_INT 301
41021: DOUBLE
41022: EQUAL
41023: IFTRUE 41027
41025: GO 41059
41027: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
41028: LD_VAR 0 6
41032: PPUSH
41033: LD_VAR 0 7
41037: PPUSH
41038: LD_VAR 0 8
41042: PPUSH
41043: LD_VAR 0 4
41047: PPUSH
41048: LD_VAR 0 5
41052: PPUSH
41053: CALL 42260 0 5
41057: GO 41180
41059: LD_INT 302
41061: DOUBLE
41062: EQUAL
41063: IFTRUE 41067
41065: GO 41104
41067: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
41068: LD_VAR 0 6
41072: PPUSH
41073: LD_VAR 0 7
41077: PPUSH
41078: LD_VAR 0 8
41082: PPUSH
41083: LD_VAR 0 9
41087: PPUSH
41088: LD_VAR 0 4
41092: PPUSH
41093: LD_VAR 0 5
41097: PPUSH
41098: CALL 42351 0 6
41102: GO 41180
41104: LD_INT 303
41106: DOUBLE
41107: EQUAL
41108: IFTRUE 41112
41110: GO 41149
41112: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
41113: LD_VAR 0 6
41117: PPUSH
41118: LD_VAR 0 7
41122: PPUSH
41123: LD_VAR 0 8
41127: PPUSH
41128: LD_VAR 0 9
41132: PPUSH
41133: LD_VAR 0 4
41137: PPUSH
41138: LD_VAR 0 5
41142: PPUSH
41143: CALL 41185 0 6
41147: GO 41180
41149: LD_INT 304
41151: DOUBLE
41152: EQUAL
41153: IFTRUE 41157
41155: GO 41179
41157: POP
// hHackTeleport ( unit , x , y ) ; end ;
41158: LD_VAR 0 2
41162: PPUSH
41163: LD_VAR 0 4
41167: PPUSH
41168: LD_VAR 0 5
41172: PPUSH
41173: CALL 42944 0 3
41177: GO 41180
41179: POP
// end ;
41180: LD_VAR 0 12
41184: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
41185: LD_INT 0
41187: PPUSH
41188: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
41189: LD_VAR 0 1
41193: PUSH
41194: LD_INT 1
41196: LESS
41197: PUSH
41198: LD_VAR 0 1
41202: PUSH
41203: LD_INT 3
41205: GREATER
41206: OR
41207: PUSH
41208: LD_VAR 0 5
41212: PPUSH
41213: LD_VAR 0 6
41217: PPUSH
41218: CALL_OW 428
41222: OR
41223: IFFALSE 41227
// exit ;
41225: GO 41947
// uc_side := your_side ;
41227: LD_ADDR_OWVAR 20
41231: PUSH
41232: LD_OWVAR 2
41236: ST_TO_ADDR
// uc_nation := nation ;
41237: LD_ADDR_OWVAR 21
41241: PUSH
41242: LD_VAR 0 1
41246: ST_TO_ADDR
// bc_level = 1 ;
41247: LD_ADDR_OWVAR 43
41251: PUSH
41252: LD_INT 1
41254: ST_TO_ADDR
// case btype of 1 :
41255: LD_VAR 0 2
41259: PUSH
41260: LD_INT 1
41262: DOUBLE
41263: EQUAL
41264: IFTRUE 41268
41266: GO 41279
41268: POP
// bc_type := b_depot ; 2 :
41269: LD_ADDR_OWVAR 42
41273: PUSH
41274: LD_INT 0
41276: ST_TO_ADDR
41277: GO 41891
41279: LD_INT 2
41281: DOUBLE
41282: EQUAL
41283: IFTRUE 41287
41285: GO 41298
41287: POP
// bc_type := b_warehouse ; 3 :
41288: LD_ADDR_OWVAR 42
41292: PUSH
41293: LD_INT 1
41295: ST_TO_ADDR
41296: GO 41891
41298: LD_INT 3
41300: DOUBLE
41301: EQUAL
41302: IFTRUE 41306
41304: GO 41317
41306: POP
// bc_type := b_lab ; 4 .. 9 :
41307: LD_ADDR_OWVAR 42
41311: PUSH
41312: LD_INT 6
41314: ST_TO_ADDR
41315: GO 41891
41317: LD_INT 4
41319: DOUBLE
41320: GREATEREQUAL
41321: IFFALSE 41329
41323: LD_INT 9
41325: DOUBLE
41326: LESSEQUAL
41327: IFTRUE 41331
41329: GO 41383
41331: POP
// begin bc_type := b_lab_half ;
41332: LD_ADDR_OWVAR 42
41336: PUSH
41337: LD_INT 7
41339: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
41340: LD_ADDR_OWVAR 44
41344: PUSH
41345: LD_INT 10
41347: PUSH
41348: LD_INT 11
41350: PUSH
41351: LD_INT 12
41353: PUSH
41354: LD_INT 15
41356: PUSH
41357: LD_INT 14
41359: PUSH
41360: LD_INT 13
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: PUSH
41371: LD_VAR 0 2
41375: PUSH
41376: LD_INT 3
41378: MINUS
41379: ARRAY
41380: ST_TO_ADDR
// end ; 10 .. 13 :
41381: GO 41891
41383: LD_INT 10
41385: DOUBLE
41386: GREATEREQUAL
41387: IFFALSE 41395
41389: LD_INT 13
41391: DOUBLE
41392: LESSEQUAL
41393: IFTRUE 41397
41395: GO 41474
41397: POP
// begin bc_type := b_lab_full ;
41398: LD_ADDR_OWVAR 42
41402: PUSH
41403: LD_INT 8
41405: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
41406: LD_ADDR_OWVAR 44
41410: PUSH
41411: LD_INT 10
41413: PUSH
41414: LD_INT 12
41416: PUSH
41417: LD_INT 14
41419: PUSH
41420: LD_INT 13
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: PUSH
41429: LD_VAR 0 2
41433: PUSH
41434: LD_INT 9
41436: MINUS
41437: ARRAY
41438: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
41439: LD_ADDR_OWVAR 45
41443: PUSH
41444: LD_INT 11
41446: PUSH
41447: LD_INT 15
41449: PUSH
41450: LD_INT 12
41452: PUSH
41453: LD_INT 15
41455: PUSH
41456: EMPTY
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: PUSH
41462: LD_VAR 0 2
41466: PUSH
41467: LD_INT 9
41469: MINUS
41470: ARRAY
41471: ST_TO_ADDR
// end ; 14 :
41472: GO 41891
41474: LD_INT 14
41476: DOUBLE
41477: EQUAL
41478: IFTRUE 41482
41480: GO 41493
41482: POP
// bc_type := b_workshop ; 15 :
41483: LD_ADDR_OWVAR 42
41487: PUSH
41488: LD_INT 2
41490: ST_TO_ADDR
41491: GO 41891
41493: LD_INT 15
41495: DOUBLE
41496: EQUAL
41497: IFTRUE 41501
41499: GO 41512
41501: POP
// bc_type := b_factory ; 16 :
41502: LD_ADDR_OWVAR 42
41506: PUSH
41507: LD_INT 3
41509: ST_TO_ADDR
41510: GO 41891
41512: LD_INT 16
41514: DOUBLE
41515: EQUAL
41516: IFTRUE 41520
41518: GO 41531
41520: POP
// bc_type := b_ext_gun ; 17 :
41521: LD_ADDR_OWVAR 42
41525: PUSH
41526: LD_INT 17
41528: ST_TO_ADDR
41529: GO 41891
41531: LD_INT 17
41533: DOUBLE
41534: EQUAL
41535: IFTRUE 41539
41537: GO 41567
41539: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
41540: LD_ADDR_OWVAR 42
41544: PUSH
41545: LD_INT 19
41547: PUSH
41548: LD_INT 23
41550: PUSH
41551: LD_INT 19
41553: PUSH
41554: EMPTY
41555: LIST
41556: LIST
41557: LIST
41558: PUSH
41559: LD_VAR 0 1
41563: ARRAY
41564: ST_TO_ADDR
41565: GO 41891
41567: LD_INT 18
41569: DOUBLE
41570: EQUAL
41571: IFTRUE 41575
41573: GO 41586
41575: POP
// bc_type := b_ext_radar ; 19 :
41576: LD_ADDR_OWVAR 42
41580: PUSH
41581: LD_INT 20
41583: ST_TO_ADDR
41584: GO 41891
41586: LD_INT 19
41588: DOUBLE
41589: EQUAL
41590: IFTRUE 41594
41592: GO 41605
41594: POP
// bc_type := b_ext_radio ; 20 :
41595: LD_ADDR_OWVAR 42
41599: PUSH
41600: LD_INT 22
41602: ST_TO_ADDR
41603: GO 41891
41605: LD_INT 20
41607: DOUBLE
41608: EQUAL
41609: IFTRUE 41613
41611: GO 41624
41613: POP
// bc_type := b_ext_siberium ; 21 :
41614: LD_ADDR_OWVAR 42
41618: PUSH
41619: LD_INT 21
41621: ST_TO_ADDR
41622: GO 41891
41624: LD_INT 21
41626: DOUBLE
41627: EQUAL
41628: IFTRUE 41632
41630: GO 41643
41632: POP
// bc_type := b_ext_computer ; 22 :
41633: LD_ADDR_OWVAR 42
41637: PUSH
41638: LD_INT 24
41640: ST_TO_ADDR
41641: GO 41891
41643: LD_INT 22
41645: DOUBLE
41646: EQUAL
41647: IFTRUE 41651
41649: GO 41662
41651: POP
// bc_type := b_ext_track ; 23 :
41652: LD_ADDR_OWVAR 42
41656: PUSH
41657: LD_INT 16
41659: ST_TO_ADDR
41660: GO 41891
41662: LD_INT 23
41664: DOUBLE
41665: EQUAL
41666: IFTRUE 41670
41668: GO 41681
41670: POP
// bc_type := b_ext_laser ; 24 :
41671: LD_ADDR_OWVAR 42
41675: PUSH
41676: LD_INT 25
41678: ST_TO_ADDR
41679: GO 41891
41681: LD_INT 24
41683: DOUBLE
41684: EQUAL
41685: IFTRUE 41689
41687: GO 41700
41689: POP
// bc_type := b_control_tower ; 25 :
41690: LD_ADDR_OWVAR 42
41694: PUSH
41695: LD_INT 36
41697: ST_TO_ADDR
41698: GO 41891
41700: LD_INT 25
41702: DOUBLE
41703: EQUAL
41704: IFTRUE 41708
41706: GO 41719
41708: POP
// bc_type := b_breastwork ; 26 :
41709: LD_ADDR_OWVAR 42
41713: PUSH
41714: LD_INT 31
41716: ST_TO_ADDR
41717: GO 41891
41719: LD_INT 26
41721: DOUBLE
41722: EQUAL
41723: IFTRUE 41727
41725: GO 41738
41727: POP
// bc_type := b_bunker ; 27 :
41728: LD_ADDR_OWVAR 42
41732: PUSH
41733: LD_INT 32
41735: ST_TO_ADDR
41736: GO 41891
41738: LD_INT 27
41740: DOUBLE
41741: EQUAL
41742: IFTRUE 41746
41744: GO 41757
41746: POP
// bc_type := b_turret ; 28 :
41747: LD_ADDR_OWVAR 42
41751: PUSH
41752: LD_INT 33
41754: ST_TO_ADDR
41755: GO 41891
41757: LD_INT 28
41759: DOUBLE
41760: EQUAL
41761: IFTRUE 41765
41763: GO 41776
41765: POP
// bc_type := b_armoury ; 29 :
41766: LD_ADDR_OWVAR 42
41770: PUSH
41771: LD_INT 4
41773: ST_TO_ADDR
41774: GO 41891
41776: LD_INT 29
41778: DOUBLE
41779: EQUAL
41780: IFTRUE 41784
41782: GO 41795
41784: POP
// bc_type := b_barracks ; 30 :
41785: LD_ADDR_OWVAR 42
41789: PUSH
41790: LD_INT 5
41792: ST_TO_ADDR
41793: GO 41891
41795: LD_INT 30
41797: DOUBLE
41798: EQUAL
41799: IFTRUE 41803
41801: GO 41814
41803: POP
// bc_type := b_solar_power ; 31 :
41804: LD_ADDR_OWVAR 42
41808: PUSH
41809: LD_INT 27
41811: ST_TO_ADDR
41812: GO 41891
41814: LD_INT 31
41816: DOUBLE
41817: EQUAL
41818: IFTRUE 41822
41820: GO 41833
41822: POP
// bc_type := b_oil_power ; 32 :
41823: LD_ADDR_OWVAR 42
41827: PUSH
41828: LD_INT 26
41830: ST_TO_ADDR
41831: GO 41891
41833: LD_INT 32
41835: DOUBLE
41836: EQUAL
41837: IFTRUE 41841
41839: GO 41852
41841: POP
// bc_type := b_siberite_power ; 33 :
41842: LD_ADDR_OWVAR 42
41846: PUSH
41847: LD_INT 28
41849: ST_TO_ADDR
41850: GO 41891
41852: LD_INT 33
41854: DOUBLE
41855: EQUAL
41856: IFTRUE 41860
41858: GO 41871
41860: POP
// bc_type := b_oil_mine ; 34 :
41861: LD_ADDR_OWVAR 42
41865: PUSH
41866: LD_INT 29
41868: ST_TO_ADDR
41869: GO 41891
41871: LD_INT 34
41873: DOUBLE
41874: EQUAL
41875: IFTRUE 41879
41877: GO 41890
41879: POP
// bc_type := b_siberite_mine ; end ;
41880: LD_ADDR_OWVAR 42
41884: PUSH
41885: LD_INT 30
41887: ST_TO_ADDR
41888: GO 41891
41890: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
41891: LD_ADDR_VAR 0 8
41895: PUSH
41896: LD_VAR 0 5
41900: PPUSH
41901: LD_VAR 0 6
41905: PPUSH
41906: LD_VAR 0 3
41910: PPUSH
41911: CALL_OW 47
41915: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
41916: LD_OWVAR 42
41920: PUSH
41921: LD_INT 32
41923: PUSH
41924: LD_INT 33
41926: PUSH
41927: EMPTY
41928: LIST
41929: LIST
41930: IN
41931: IFFALSE 41947
// PlaceWeaponTurret ( b , weapon ) ;
41933: LD_VAR 0 8
41937: PPUSH
41938: LD_VAR 0 4
41942: PPUSH
41943: CALL_OW 431
// end ;
41947: LD_VAR 0 7
41951: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
41952: LD_INT 0
41954: PPUSH
41955: PPUSH
41956: PPUSH
41957: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
41958: LD_ADDR_VAR 0 4
41962: PUSH
41963: LD_INT 22
41965: PUSH
41966: LD_OWVAR 2
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: LD_INT 30
41980: PUSH
41981: LD_INT 0
41983: PUSH
41984: EMPTY
41985: LIST
41986: LIST
41987: PUSH
41988: LD_INT 30
41990: PUSH
41991: LD_INT 1
41993: PUSH
41994: EMPTY
41995: LIST
41996: LIST
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: LIST
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PPUSH
42007: CALL_OW 69
42011: ST_TO_ADDR
// if not tmp then
42012: LD_VAR 0 4
42016: NOT
42017: IFFALSE 42021
// exit ;
42019: GO 42080
// for i in tmp do
42021: LD_ADDR_VAR 0 2
42025: PUSH
42026: LD_VAR 0 4
42030: PUSH
42031: FOR_IN
42032: IFFALSE 42078
// for j = 1 to 3 do
42034: LD_ADDR_VAR 0 3
42038: PUSH
42039: DOUBLE
42040: LD_INT 1
42042: DEC
42043: ST_TO_ADDR
42044: LD_INT 3
42046: PUSH
42047: FOR_TO
42048: IFFALSE 42074
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
42050: LD_VAR 0 2
42054: PPUSH
42055: CALL_OW 274
42059: PPUSH
42060: LD_VAR 0 3
42064: PPUSH
42065: LD_INT 99999
42067: PPUSH
42068: CALL_OW 277
42072: GO 42047
42074: POP
42075: POP
42076: GO 42031
42078: POP
42079: POP
// end ;
42080: LD_VAR 0 1
42084: RET
// export function hHackSetLevel10 ; var i , j ; begin
42085: LD_INT 0
42087: PPUSH
42088: PPUSH
42089: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
42090: LD_ADDR_VAR 0 2
42094: PUSH
42095: LD_INT 21
42097: PUSH
42098: LD_INT 1
42100: PUSH
42101: EMPTY
42102: LIST
42103: LIST
42104: PPUSH
42105: CALL_OW 69
42109: PUSH
42110: FOR_IN
42111: IFFALSE 42163
// if IsSelected ( i ) then
42113: LD_VAR 0 2
42117: PPUSH
42118: CALL_OW 306
42122: IFFALSE 42161
// begin for j := 1 to 4 do
42124: LD_ADDR_VAR 0 3
42128: PUSH
42129: DOUBLE
42130: LD_INT 1
42132: DEC
42133: ST_TO_ADDR
42134: LD_INT 4
42136: PUSH
42137: FOR_TO
42138: IFFALSE 42159
// SetSkill ( i , j , 10 ) ;
42140: LD_VAR 0 2
42144: PPUSH
42145: LD_VAR 0 3
42149: PPUSH
42150: LD_INT 10
42152: PPUSH
42153: CALL_OW 237
42157: GO 42137
42159: POP
42160: POP
// end ;
42161: GO 42110
42163: POP
42164: POP
// end ;
42165: LD_VAR 0 1
42169: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
42170: LD_INT 0
42172: PPUSH
42173: PPUSH
42174: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
42175: LD_ADDR_VAR 0 2
42179: PUSH
42180: LD_INT 22
42182: PUSH
42183: LD_OWVAR 2
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 21
42194: PUSH
42195: LD_INT 1
42197: PUSH
42198: EMPTY
42199: LIST
42200: LIST
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PPUSH
42206: CALL_OW 69
42210: PUSH
42211: FOR_IN
42212: IFFALSE 42253
// begin for j := 1 to 4 do
42214: LD_ADDR_VAR 0 3
42218: PUSH
42219: DOUBLE
42220: LD_INT 1
42222: DEC
42223: ST_TO_ADDR
42224: LD_INT 4
42226: PUSH
42227: FOR_TO
42228: IFFALSE 42249
// SetSkill ( i , j , 10 ) ;
42230: LD_VAR 0 2
42234: PPUSH
42235: LD_VAR 0 3
42239: PPUSH
42240: LD_INT 10
42242: PPUSH
42243: CALL_OW 237
42247: GO 42227
42249: POP
42250: POP
// end ;
42251: GO 42211
42253: POP
42254: POP
// end ;
42255: LD_VAR 0 1
42259: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
42260: LD_INT 0
42262: PPUSH
// uc_side := your_side ;
42263: LD_ADDR_OWVAR 20
42267: PUSH
42268: LD_OWVAR 2
42272: ST_TO_ADDR
// uc_nation := nation ;
42273: LD_ADDR_OWVAR 21
42277: PUSH
42278: LD_VAR 0 1
42282: ST_TO_ADDR
// InitHc ;
42283: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
42287: LD_INT 0
42289: PPUSH
42290: LD_VAR 0 2
42294: PPUSH
42295: LD_VAR 0 3
42299: PPUSH
42300: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
42304: LD_VAR 0 4
42308: PPUSH
42309: LD_VAR 0 5
42313: PPUSH
42314: CALL_OW 428
42318: PUSH
42319: LD_INT 0
42321: EQUAL
42322: IFFALSE 42346
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
42324: CALL_OW 44
42328: PPUSH
42329: LD_VAR 0 4
42333: PPUSH
42334: LD_VAR 0 5
42338: PPUSH
42339: LD_INT 1
42341: PPUSH
42342: CALL_OW 48
// end ;
42346: LD_VAR 0 6
42350: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
42351: LD_INT 0
42353: PPUSH
42354: PPUSH
// uc_side := your_side ;
42355: LD_ADDR_OWVAR 20
42359: PUSH
42360: LD_OWVAR 2
42364: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
42365: LD_VAR 0 1
42369: PUSH
42370: LD_INT 1
42372: PUSH
42373: LD_INT 2
42375: PUSH
42376: LD_INT 3
42378: PUSH
42379: LD_INT 4
42381: PUSH
42382: LD_INT 5
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: IN
42392: IFFALSE 42404
// uc_nation := nation_american else
42394: LD_ADDR_OWVAR 21
42398: PUSH
42399: LD_INT 1
42401: ST_TO_ADDR
42402: GO 42447
// if chassis in [ 11 , 12 , 13 , 14 ] then
42404: LD_VAR 0 1
42408: PUSH
42409: LD_INT 11
42411: PUSH
42412: LD_INT 12
42414: PUSH
42415: LD_INT 13
42417: PUSH
42418: LD_INT 14
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: LIST
42425: LIST
42426: IN
42427: IFFALSE 42439
// uc_nation := nation_arabian else
42429: LD_ADDR_OWVAR 21
42433: PUSH
42434: LD_INT 2
42436: ST_TO_ADDR
42437: GO 42447
// uc_nation := nation_russian ;
42439: LD_ADDR_OWVAR 21
42443: PUSH
42444: LD_INT 3
42446: ST_TO_ADDR
// vc_chassis := chassis ;
42447: LD_ADDR_OWVAR 37
42451: PUSH
42452: LD_VAR 0 1
42456: ST_TO_ADDR
// vc_engine := engine ;
42457: LD_ADDR_OWVAR 39
42461: PUSH
42462: LD_VAR 0 2
42466: ST_TO_ADDR
// vc_control := control ;
42467: LD_ADDR_OWVAR 38
42471: PUSH
42472: LD_VAR 0 3
42476: ST_TO_ADDR
// vc_weapon := weapon ;
42477: LD_ADDR_OWVAR 40
42481: PUSH
42482: LD_VAR 0 4
42486: ST_TO_ADDR
// un := CreateVehicle ;
42487: LD_ADDR_VAR 0 8
42491: PUSH
42492: CALL_OW 45
42496: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
42497: LD_VAR 0 8
42501: PPUSH
42502: LD_INT 0
42504: PPUSH
42505: LD_INT 5
42507: PPUSH
42508: CALL_OW 12
42512: PPUSH
42513: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
42517: LD_VAR 0 8
42521: PPUSH
42522: LD_VAR 0 5
42526: PPUSH
42527: LD_VAR 0 6
42531: PPUSH
42532: LD_INT 1
42534: PPUSH
42535: CALL_OW 48
// end ;
42539: LD_VAR 0 7
42543: RET
// export hInvincible ; every 1 do
42544: GO 42546
42546: DISABLE
// hInvincible := [ ] ;
42547: LD_ADDR_EXP 142
42551: PUSH
42552: EMPTY
42553: ST_TO_ADDR
42554: END
// every 10 do var i ;
42555: GO 42557
42557: DISABLE
42558: LD_INT 0
42560: PPUSH
// begin enable ;
42561: ENABLE
// if not hInvincible then
42562: LD_EXP 142
42566: NOT
42567: IFFALSE 42571
// exit ;
42569: GO 42615
// for i in hInvincible do
42571: LD_ADDR_VAR 0 1
42575: PUSH
42576: LD_EXP 142
42580: PUSH
42581: FOR_IN
42582: IFFALSE 42613
// if GetLives ( i ) < 1000 then
42584: LD_VAR 0 1
42588: PPUSH
42589: CALL_OW 256
42593: PUSH
42594: LD_INT 1000
42596: LESS
42597: IFFALSE 42611
// SetLives ( i , 1000 ) ;
42599: LD_VAR 0 1
42603: PPUSH
42604: LD_INT 1000
42606: PPUSH
42607: CALL_OW 234
42611: GO 42581
42613: POP
42614: POP
// end ;
42615: PPOPN 1
42617: END
// export function hHackInvincible ; var i ; begin
42618: LD_INT 0
42620: PPUSH
42621: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
42622: LD_ADDR_VAR 0 2
42626: PUSH
42627: LD_INT 2
42629: PUSH
42630: LD_INT 21
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 21
42642: PUSH
42643: LD_INT 2
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: LIST
42654: PPUSH
42655: CALL_OW 69
42659: PUSH
42660: FOR_IN
42661: IFFALSE 42722
// if IsSelected ( i ) then
42663: LD_VAR 0 2
42667: PPUSH
42668: CALL_OW 306
42672: IFFALSE 42720
// begin if i in hInvincible then
42674: LD_VAR 0 2
42678: PUSH
42679: LD_EXP 142
42683: IN
42684: IFFALSE 42704
// hInvincible := hInvincible diff i else
42686: LD_ADDR_EXP 142
42690: PUSH
42691: LD_EXP 142
42695: PUSH
42696: LD_VAR 0 2
42700: DIFF
42701: ST_TO_ADDR
42702: GO 42720
// hInvincible := hInvincible union i ;
42704: LD_ADDR_EXP 142
42708: PUSH
42709: LD_EXP 142
42713: PUSH
42714: LD_VAR 0 2
42718: UNION
42719: ST_TO_ADDR
// end ;
42720: GO 42660
42722: POP
42723: POP
// end ;
42724: LD_VAR 0 1
42728: RET
// export function hHackInvisible ; var i , j ; begin
42729: LD_INT 0
42731: PPUSH
42732: PPUSH
42733: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
42734: LD_ADDR_VAR 0 2
42738: PUSH
42739: LD_INT 21
42741: PUSH
42742: LD_INT 1
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PPUSH
42749: CALL_OW 69
42753: PUSH
42754: FOR_IN
42755: IFFALSE 42779
// if IsSelected ( i ) then
42757: LD_VAR 0 2
42761: PPUSH
42762: CALL_OW 306
42766: IFFALSE 42777
// ComForceInvisible ( i ) ;
42768: LD_VAR 0 2
42772: PPUSH
42773: CALL_OW 496
42777: GO 42754
42779: POP
42780: POP
// end ;
42781: LD_VAR 0 1
42785: RET
// export function hHackChangeYourSide ; begin
42786: LD_INT 0
42788: PPUSH
// if your_side = 8 then
42789: LD_OWVAR 2
42793: PUSH
42794: LD_INT 8
42796: EQUAL
42797: IFFALSE 42809
// your_side := 0 else
42799: LD_ADDR_OWVAR 2
42803: PUSH
42804: LD_INT 0
42806: ST_TO_ADDR
42807: GO 42823
// your_side := your_side + 1 ;
42809: LD_ADDR_OWVAR 2
42813: PUSH
42814: LD_OWVAR 2
42818: PUSH
42819: LD_INT 1
42821: PLUS
42822: ST_TO_ADDR
// end ;
42823: LD_VAR 0 1
42827: RET
// export function hHackChangeUnitSide ; var i , j ; begin
42828: LD_INT 0
42830: PPUSH
42831: PPUSH
42832: PPUSH
// for i in all_units do
42833: LD_ADDR_VAR 0 2
42837: PUSH
42838: LD_OWVAR 3
42842: PUSH
42843: FOR_IN
42844: IFFALSE 42922
// if IsSelected ( i ) then
42846: LD_VAR 0 2
42850: PPUSH
42851: CALL_OW 306
42855: IFFALSE 42920
// begin j := GetSide ( i ) ;
42857: LD_ADDR_VAR 0 3
42861: PUSH
42862: LD_VAR 0 2
42866: PPUSH
42867: CALL_OW 255
42871: ST_TO_ADDR
// if j = 8 then
42872: LD_VAR 0 3
42876: PUSH
42877: LD_INT 8
42879: EQUAL
42880: IFFALSE 42892
// j := 0 else
42882: LD_ADDR_VAR 0 3
42886: PUSH
42887: LD_INT 0
42889: ST_TO_ADDR
42890: GO 42906
// j := j + 1 ;
42892: LD_ADDR_VAR 0 3
42896: PUSH
42897: LD_VAR 0 3
42901: PUSH
42902: LD_INT 1
42904: PLUS
42905: ST_TO_ADDR
// SetSide ( i , j ) ;
42906: LD_VAR 0 2
42910: PPUSH
42911: LD_VAR 0 3
42915: PPUSH
42916: CALL_OW 235
// end ;
42920: GO 42843
42922: POP
42923: POP
// end ;
42924: LD_VAR 0 1
42928: RET
// export function hHackFog ; begin
42929: LD_INT 0
42931: PPUSH
// FogOff ( true ) ;
42932: LD_INT 1
42934: PPUSH
42935: CALL_OW 344
// end ;
42939: LD_VAR 0 1
42943: RET
// export function hHackTeleport ( unit , x , y ) ; begin
42944: LD_INT 0
42946: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
42947: LD_VAR 0 1
42951: PPUSH
42952: LD_VAR 0 2
42956: PPUSH
42957: LD_VAR 0 3
42961: PPUSH
42962: LD_INT 1
42964: PPUSH
42965: LD_INT 1
42967: PPUSH
42968: CALL_OW 483
// CenterOnXY ( x , y ) ;
42972: LD_VAR 0 2
42976: PPUSH
42977: LD_VAR 0 3
42981: PPUSH
42982: CALL_OW 84
// end ; end_of_file
42986: LD_VAR 0 4
42990: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
42991: LD_INT 0
42993: PPUSH
42994: PPUSH
42995: PPUSH
42996: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
42997: LD_VAR 0 1
43001: PPUSH
43002: CALL_OW 264
43006: PUSH
43007: LD_EXP 73
43011: EQUAL
43012: IFFALSE 43084
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
43014: LD_INT 68
43016: PPUSH
43017: LD_VAR 0 1
43021: PPUSH
43022: CALL_OW 255
43026: PPUSH
43027: CALL_OW 321
43031: PUSH
43032: LD_INT 2
43034: EQUAL
43035: IFFALSE 43047
// eff := 70 else
43037: LD_ADDR_VAR 0 4
43041: PUSH
43042: LD_INT 70
43044: ST_TO_ADDR
43045: GO 43055
// eff := 30 ;
43047: LD_ADDR_VAR 0 4
43051: PUSH
43052: LD_INT 30
43054: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
43055: LD_VAR 0 1
43059: PPUSH
43060: CALL_OW 250
43064: PPUSH
43065: LD_VAR 0 1
43069: PPUSH
43070: CALL_OW 251
43074: PPUSH
43075: LD_VAR 0 4
43079: PPUSH
43080: CALL_OW 495
// end ; end ;
43084: LD_VAR 0 2
43088: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
43089: LD_INT 0
43091: PPUSH
// end ;
43092: LD_VAR 0 4
43096: RET
// export function SOS_Command ( cmd ) ; begin
43097: LD_INT 0
43099: PPUSH
// end ;
43100: LD_VAR 0 2
43104: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
43105: LD_INT 0
43107: PPUSH
// if cmd = 121 then
43108: LD_VAR 0 1
43112: PUSH
43113: LD_INT 121
43115: EQUAL
43116: IFFALSE 43118
// end ;
43118: LD_VAR 0 6
43122: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
43123: LD_INT 0
43125: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
43126: LD_VAR 0 1
43130: PUSH
43131: LD_INT 250
43133: EQUAL
43134: PUSH
43135: LD_VAR 0 2
43139: PPUSH
43140: CALL_OW 264
43144: PUSH
43145: LD_EXP 76
43149: EQUAL
43150: AND
43151: IFFALSE 43172
// MinerPlaceMine ( unit , x , y ) ;
43153: LD_VAR 0 2
43157: PPUSH
43158: LD_VAR 0 4
43162: PPUSH
43163: LD_VAR 0 5
43167: PPUSH
43168: CALL 45521 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
43172: LD_VAR 0 1
43176: PUSH
43177: LD_INT 251
43179: EQUAL
43180: PUSH
43181: LD_VAR 0 2
43185: PPUSH
43186: CALL_OW 264
43190: PUSH
43191: LD_EXP 76
43195: EQUAL
43196: AND
43197: IFFALSE 43218
// MinerDetonateMine ( unit , x , y ) ;
43199: LD_VAR 0 2
43203: PPUSH
43204: LD_VAR 0 4
43208: PPUSH
43209: LD_VAR 0 5
43213: PPUSH
43214: CALL 45798 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
43218: LD_VAR 0 1
43222: PUSH
43223: LD_INT 252
43225: EQUAL
43226: PUSH
43227: LD_VAR 0 2
43231: PPUSH
43232: CALL_OW 264
43236: PUSH
43237: LD_EXP 76
43241: EQUAL
43242: AND
43243: IFFALSE 43264
// MinerCreateMinefield ( unit , x , y ) ;
43245: LD_VAR 0 2
43249: PPUSH
43250: LD_VAR 0 4
43254: PPUSH
43255: LD_VAR 0 5
43259: PPUSH
43260: CALL 46215 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
43264: LD_VAR 0 1
43268: PUSH
43269: LD_INT 253
43271: EQUAL
43272: PUSH
43273: LD_VAR 0 2
43277: PPUSH
43278: CALL_OW 257
43282: PUSH
43283: LD_INT 5
43285: EQUAL
43286: AND
43287: IFFALSE 43308
// ComBinocular ( unit , x , y ) ;
43289: LD_VAR 0 2
43293: PPUSH
43294: LD_VAR 0 4
43298: PPUSH
43299: LD_VAR 0 5
43303: PPUSH
43304: CALL 46586 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
43308: LD_VAR 0 1
43312: PUSH
43313: LD_INT 254
43315: EQUAL
43316: PUSH
43317: LD_VAR 0 2
43321: PPUSH
43322: CALL_OW 264
43326: PUSH
43327: LD_EXP 71
43331: EQUAL
43332: AND
43333: PUSH
43334: LD_VAR 0 3
43338: PPUSH
43339: CALL_OW 263
43343: PUSH
43344: LD_INT 3
43346: EQUAL
43347: AND
43348: IFFALSE 43364
// HackDestroyVehicle ( unit , selectedUnit ) ;
43350: LD_VAR 0 2
43354: PPUSH
43355: LD_VAR 0 3
43359: PPUSH
43360: CALL 44881 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
43364: LD_VAR 0 1
43368: PUSH
43369: LD_INT 255
43371: EQUAL
43372: PUSH
43373: LD_VAR 0 2
43377: PPUSH
43378: CALL_OW 264
43382: PUSH
43383: LD_INT 14
43385: PUSH
43386: LD_INT 53
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: IN
43393: AND
43394: PUSH
43395: LD_VAR 0 4
43399: PPUSH
43400: LD_VAR 0 5
43404: PPUSH
43405: CALL_OW 488
43409: AND
43410: IFFALSE 43434
// CutTreeXYR ( unit , x , y , 12 ) ;
43412: LD_VAR 0 2
43416: PPUSH
43417: LD_VAR 0 4
43421: PPUSH
43422: LD_VAR 0 5
43426: PPUSH
43427: LD_INT 12
43429: PPUSH
43430: CALL 43447 0 4
// end ;
43434: LD_VAR 0 6
43438: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
43439: LD_INT 0
43441: PPUSH
// end ;
43442: LD_VAR 0 4
43446: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
43447: LD_INT 0
43449: PPUSH
43450: PPUSH
43451: PPUSH
43452: PPUSH
43453: PPUSH
43454: PPUSH
43455: PPUSH
43456: PPUSH
43457: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
43458: LD_VAR 0 1
43462: NOT
43463: PUSH
43464: LD_VAR 0 2
43468: PPUSH
43469: LD_VAR 0 3
43473: PPUSH
43474: CALL_OW 488
43478: NOT
43479: OR
43480: PUSH
43481: LD_VAR 0 4
43485: NOT
43486: OR
43487: IFFALSE 43491
// exit ;
43489: GO 43831
// list := [ ] ;
43491: LD_ADDR_VAR 0 13
43495: PUSH
43496: EMPTY
43497: ST_TO_ADDR
// if x - r < 0 then
43498: LD_VAR 0 2
43502: PUSH
43503: LD_VAR 0 4
43507: MINUS
43508: PUSH
43509: LD_INT 0
43511: LESS
43512: IFFALSE 43524
// min_x := 0 else
43514: LD_ADDR_VAR 0 7
43518: PUSH
43519: LD_INT 0
43521: ST_TO_ADDR
43522: GO 43540
// min_x := x - r ;
43524: LD_ADDR_VAR 0 7
43528: PUSH
43529: LD_VAR 0 2
43533: PUSH
43534: LD_VAR 0 4
43538: MINUS
43539: ST_TO_ADDR
// if y - r < 0 then
43540: LD_VAR 0 3
43544: PUSH
43545: LD_VAR 0 4
43549: MINUS
43550: PUSH
43551: LD_INT 0
43553: LESS
43554: IFFALSE 43566
// min_y := 0 else
43556: LD_ADDR_VAR 0 8
43560: PUSH
43561: LD_INT 0
43563: ST_TO_ADDR
43564: GO 43582
// min_y := y - r ;
43566: LD_ADDR_VAR 0 8
43570: PUSH
43571: LD_VAR 0 3
43575: PUSH
43576: LD_VAR 0 4
43580: MINUS
43581: ST_TO_ADDR
// max_x := x + r ;
43582: LD_ADDR_VAR 0 9
43586: PUSH
43587: LD_VAR 0 2
43591: PUSH
43592: LD_VAR 0 4
43596: PLUS
43597: ST_TO_ADDR
// max_y := y + r ;
43598: LD_ADDR_VAR 0 10
43602: PUSH
43603: LD_VAR 0 3
43607: PUSH
43608: LD_VAR 0 4
43612: PLUS
43613: ST_TO_ADDR
// for _x = min_x to max_x do
43614: LD_ADDR_VAR 0 11
43618: PUSH
43619: DOUBLE
43620: LD_VAR 0 7
43624: DEC
43625: ST_TO_ADDR
43626: LD_VAR 0 9
43630: PUSH
43631: FOR_TO
43632: IFFALSE 43749
// for _y = min_y to max_y do
43634: LD_ADDR_VAR 0 12
43638: PUSH
43639: DOUBLE
43640: LD_VAR 0 8
43644: DEC
43645: ST_TO_ADDR
43646: LD_VAR 0 10
43650: PUSH
43651: FOR_TO
43652: IFFALSE 43745
// begin if not ValidHex ( _x , _y ) then
43654: LD_VAR 0 11
43658: PPUSH
43659: LD_VAR 0 12
43663: PPUSH
43664: CALL_OW 488
43668: NOT
43669: IFFALSE 43673
// continue ;
43671: GO 43651
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
43673: LD_VAR 0 11
43677: PPUSH
43678: LD_VAR 0 12
43682: PPUSH
43683: CALL_OW 351
43687: PUSH
43688: LD_VAR 0 11
43692: PPUSH
43693: LD_VAR 0 12
43697: PPUSH
43698: CALL_OW 554
43702: AND
43703: IFFALSE 43743
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
43705: LD_ADDR_VAR 0 13
43709: PUSH
43710: LD_VAR 0 13
43714: PPUSH
43715: LD_VAR 0 13
43719: PUSH
43720: LD_INT 1
43722: PLUS
43723: PPUSH
43724: LD_VAR 0 11
43728: PUSH
43729: LD_VAR 0 12
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PPUSH
43738: CALL_OW 2
43742: ST_TO_ADDR
// end ;
43743: GO 43651
43745: POP
43746: POP
43747: GO 43631
43749: POP
43750: POP
// if not list then
43751: LD_VAR 0 13
43755: NOT
43756: IFFALSE 43760
// exit ;
43758: GO 43831
// for i in list do
43760: LD_ADDR_VAR 0 6
43764: PUSH
43765: LD_VAR 0 13
43769: PUSH
43770: FOR_IN
43771: IFFALSE 43829
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
43773: LD_VAR 0 1
43777: PPUSH
43778: LD_STRING M
43780: PUSH
43781: LD_VAR 0 6
43785: PUSH
43786: LD_INT 1
43788: ARRAY
43789: PUSH
43790: LD_VAR 0 6
43794: PUSH
43795: LD_INT 2
43797: ARRAY
43798: PUSH
43799: LD_INT 0
43801: PUSH
43802: LD_INT 0
43804: PUSH
43805: LD_INT 0
43807: PUSH
43808: LD_INT 0
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: LIST
43819: PUSH
43820: EMPTY
43821: LIST
43822: PPUSH
43823: CALL_OW 447
43827: GO 43770
43829: POP
43830: POP
// end ;
43831: LD_VAR 0 5
43835: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
43836: LD_EXP 145
43840: NOT
43841: IFFALSE 43891
43843: GO 43845
43845: DISABLE
// begin initHack := true ;
43846: LD_ADDR_EXP 145
43850: PUSH
43851: LD_INT 1
43853: ST_TO_ADDR
// hackTanks := [ ] ;
43854: LD_ADDR_EXP 146
43858: PUSH
43859: EMPTY
43860: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
43861: LD_ADDR_EXP 147
43865: PUSH
43866: EMPTY
43867: ST_TO_ADDR
// hackLimit := 3 ;
43868: LD_ADDR_EXP 148
43872: PUSH
43873: LD_INT 3
43875: ST_TO_ADDR
// hackDist := 12 ;
43876: LD_ADDR_EXP 149
43880: PUSH
43881: LD_INT 12
43883: ST_TO_ADDR
// hackCounter := [ ] ;
43884: LD_ADDR_EXP 150
43888: PUSH
43889: EMPTY
43890: ST_TO_ADDR
// end ;
43891: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
43892: LD_EXP 145
43896: PUSH
43897: LD_INT 34
43899: PUSH
43900: LD_EXP 71
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PPUSH
43909: CALL_OW 69
43913: AND
43914: IFFALSE 44169
43916: GO 43918
43918: DISABLE
43919: LD_INT 0
43921: PPUSH
43922: PPUSH
// begin enable ;
43923: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
43924: LD_ADDR_VAR 0 1
43928: PUSH
43929: LD_INT 34
43931: PUSH
43932: LD_EXP 71
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PPUSH
43941: CALL_OW 69
43945: PUSH
43946: FOR_IN
43947: IFFALSE 44167
// begin if not i in hackTanks then
43949: LD_VAR 0 1
43953: PUSH
43954: LD_EXP 146
43958: IN
43959: NOT
43960: IFFALSE 44043
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
43962: LD_ADDR_EXP 146
43966: PUSH
43967: LD_EXP 146
43971: PPUSH
43972: LD_EXP 146
43976: PUSH
43977: LD_INT 1
43979: PLUS
43980: PPUSH
43981: LD_VAR 0 1
43985: PPUSH
43986: CALL_OW 1
43990: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
43991: LD_ADDR_EXP 147
43995: PUSH
43996: LD_EXP 147
44000: PPUSH
44001: LD_EXP 147
44005: PUSH
44006: LD_INT 1
44008: PLUS
44009: PPUSH
44010: EMPTY
44011: PPUSH
44012: CALL_OW 1
44016: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
44017: LD_ADDR_EXP 150
44021: PUSH
44022: LD_EXP 150
44026: PPUSH
44027: LD_EXP 150
44031: PUSH
44032: LD_INT 1
44034: PLUS
44035: PPUSH
44036: EMPTY
44037: PPUSH
44038: CALL_OW 1
44042: ST_TO_ADDR
// end ; if not IsOk ( i ) then
44043: LD_VAR 0 1
44047: PPUSH
44048: CALL_OW 302
44052: NOT
44053: IFFALSE 44066
// begin HackUnlinkAll ( i ) ;
44055: LD_VAR 0 1
44059: PPUSH
44060: CALL 44172 0 1
// continue ;
44064: GO 43946
// end ; HackCheckCapturedStatus ( i ) ;
44066: LD_VAR 0 1
44070: PPUSH
44071: CALL 44615 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
44075: LD_ADDR_VAR 0 2
44079: PUSH
44080: LD_INT 81
44082: PUSH
44083: LD_VAR 0 1
44087: PPUSH
44088: CALL_OW 255
44092: PUSH
44093: EMPTY
44094: LIST
44095: LIST
44096: PUSH
44097: LD_INT 33
44099: PUSH
44100: LD_INT 3
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 91
44109: PUSH
44110: LD_VAR 0 1
44114: PUSH
44115: LD_EXP 149
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: LIST
44124: PUSH
44125: LD_INT 50
44127: PUSH
44128: EMPTY
44129: LIST
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: LIST
44135: LIST
44136: PPUSH
44137: CALL_OW 69
44141: ST_TO_ADDR
// if not tmp then
44142: LD_VAR 0 2
44146: NOT
44147: IFFALSE 44151
// continue ;
44149: GO 43946
// HackLink ( i , tmp ) ;
44151: LD_VAR 0 1
44155: PPUSH
44156: LD_VAR 0 2
44160: PPUSH
44161: CALL 44308 0 2
// end ;
44165: GO 43946
44167: POP
44168: POP
// end ;
44169: PPOPN 2
44171: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
44172: LD_INT 0
44174: PPUSH
44175: PPUSH
44176: PPUSH
// if not hack in hackTanks then
44177: LD_VAR 0 1
44181: PUSH
44182: LD_EXP 146
44186: IN
44187: NOT
44188: IFFALSE 44192
// exit ;
44190: GO 44303
// index := GetElementIndex ( hackTanks , hack ) ;
44192: LD_ADDR_VAR 0 4
44196: PUSH
44197: LD_EXP 146
44201: PPUSH
44202: LD_VAR 0 1
44206: PPUSH
44207: CALL 51777 0 2
44211: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
44212: LD_EXP 147
44216: PUSH
44217: LD_VAR 0 4
44221: ARRAY
44222: IFFALSE 44303
// begin for i in hackTanksCaptured [ index ] do
44224: LD_ADDR_VAR 0 3
44228: PUSH
44229: LD_EXP 147
44233: PUSH
44234: LD_VAR 0 4
44238: ARRAY
44239: PUSH
44240: FOR_IN
44241: IFFALSE 44267
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
44243: LD_VAR 0 3
44247: PUSH
44248: LD_INT 1
44250: ARRAY
44251: PPUSH
44252: LD_VAR 0 3
44256: PUSH
44257: LD_INT 2
44259: ARRAY
44260: PPUSH
44261: CALL_OW 235
44265: GO 44240
44267: POP
44268: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
44269: LD_ADDR_EXP 147
44273: PUSH
44274: LD_EXP 147
44278: PPUSH
44279: LD_VAR 0 4
44283: PPUSH
44284: EMPTY
44285: PPUSH
44286: CALL_OW 1
44290: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
44291: LD_VAR 0 1
44295: PPUSH
44296: LD_INT 0
44298: PPUSH
44299: CALL_OW 505
// end ; end ;
44303: LD_VAR 0 2
44307: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
44308: LD_INT 0
44310: PPUSH
44311: PPUSH
44312: PPUSH
// if not hack in hackTanks or not vehicles then
44313: LD_VAR 0 1
44317: PUSH
44318: LD_EXP 146
44322: IN
44323: NOT
44324: PUSH
44325: LD_VAR 0 2
44329: NOT
44330: OR
44331: IFFALSE 44335
// exit ;
44333: GO 44610
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
44335: LD_ADDR_VAR 0 2
44339: PUSH
44340: LD_VAR 0 1
44344: PPUSH
44345: LD_VAR 0 2
44349: PPUSH
44350: LD_INT 1
44352: PPUSH
44353: LD_INT 1
44355: PPUSH
44356: CALL 52427 0 4
44360: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
44361: LD_ADDR_VAR 0 5
44365: PUSH
44366: LD_EXP 146
44370: PPUSH
44371: LD_VAR 0 1
44375: PPUSH
44376: CALL 51777 0 2
44380: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
44381: LD_EXP 147
44385: PUSH
44386: LD_VAR 0 5
44390: ARRAY
44391: PUSH
44392: LD_EXP 148
44396: LESS
44397: IFFALSE 44586
// begin for i := 1 to vehicles do
44399: LD_ADDR_VAR 0 4
44403: PUSH
44404: DOUBLE
44405: LD_INT 1
44407: DEC
44408: ST_TO_ADDR
44409: LD_VAR 0 2
44413: PUSH
44414: FOR_TO
44415: IFFALSE 44584
// begin if hackTanksCaptured [ index ] = hackLimit then
44417: LD_EXP 147
44421: PUSH
44422: LD_VAR 0 5
44426: ARRAY
44427: PUSH
44428: LD_EXP 148
44432: EQUAL
44433: IFFALSE 44437
// break ;
44435: GO 44584
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
44437: LD_ADDR_EXP 150
44441: PUSH
44442: LD_EXP 150
44446: PPUSH
44447: LD_VAR 0 5
44451: PPUSH
44452: LD_EXP 150
44456: PUSH
44457: LD_VAR 0 5
44461: ARRAY
44462: PUSH
44463: LD_INT 1
44465: PLUS
44466: PPUSH
44467: CALL_OW 1
44471: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
44472: LD_ADDR_EXP 147
44476: PUSH
44477: LD_EXP 147
44481: PPUSH
44482: LD_VAR 0 5
44486: PUSH
44487: LD_EXP 147
44491: PUSH
44492: LD_VAR 0 5
44496: ARRAY
44497: PUSH
44498: LD_INT 1
44500: PLUS
44501: PUSH
44502: EMPTY
44503: LIST
44504: LIST
44505: PPUSH
44506: LD_VAR 0 2
44510: PUSH
44511: LD_VAR 0 4
44515: ARRAY
44516: PUSH
44517: LD_VAR 0 2
44521: PUSH
44522: LD_VAR 0 4
44526: ARRAY
44527: PPUSH
44528: CALL_OW 255
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PPUSH
44537: CALL 51992 0 3
44541: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
44542: LD_VAR 0 2
44546: PUSH
44547: LD_VAR 0 4
44551: ARRAY
44552: PPUSH
44553: LD_VAR 0 1
44557: PPUSH
44558: CALL_OW 255
44562: PPUSH
44563: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
44567: LD_VAR 0 2
44571: PUSH
44572: LD_VAR 0 4
44576: ARRAY
44577: PPUSH
44578: CALL_OW 141
// end ;
44582: GO 44414
44584: POP
44585: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
44586: LD_VAR 0 1
44590: PPUSH
44591: LD_EXP 147
44595: PUSH
44596: LD_VAR 0 5
44600: ARRAY
44601: PUSH
44602: LD_INT 0
44604: PLUS
44605: PPUSH
44606: CALL_OW 505
// end ;
44610: LD_VAR 0 3
44614: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
44615: LD_INT 0
44617: PPUSH
44618: PPUSH
44619: PPUSH
44620: PPUSH
// if not hack in hackTanks then
44621: LD_VAR 0 1
44625: PUSH
44626: LD_EXP 146
44630: IN
44631: NOT
44632: IFFALSE 44636
// exit ;
44634: GO 44876
// index := GetElementIndex ( hackTanks , hack ) ;
44636: LD_ADDR_VAR 0 4
44640: PUSH
44641: LD_EXP 146
44645: PPUSH
44646: LD_VAR 0 1
44650: PPUSH
44651: CALL 51777 0 2
44655: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
44656: LD_ADDR_VAR 0 3
44660: PUSH
44661: DOUBLE
44662: LD_EXP 147
44666: PUSH
44667: LD_VAR 0 4
44671: ARRAY
44672: INC
44673: ST_TO_ADDR
44674: LD_INT 1
44676: PUSH
44677: FOR_DOWNTO
44678: IFFALSE 44850
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
44680: LD_ADDR_VAR 0 5
44684: PUSH
44685: LD_EXP 147
44689: PUSH
44690: LD_VAR 0 4
44694: ARRAY
44695: PUSH
44696: LD_VAR 0 3
44700: ARRAY
44701: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
44702: LD_VAR 0 5
44706: PUSH
44707: LD_INT 1
44709: ARRAY
44710: PPUSH
44711: CALL_OW 302
44715: NOT
44716: PUSH
44717: LD_VAR 0 5
44721: PUSH
44722: LD_INT 1
44724: ARRAY
44725: PPUSH
44726: CALL_OW 255
44730: PUSH
44731: LD_VAR 0 1
44735: PPUSH
44736: CALL_OW 255
44740: NONEQUAL
44741: OR
44742: IFFALSE 44848
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
44744: LD_VAR 0 5
44748: PUSH
44749: LD_INT 1
44751: ARRAY
44752: PPUSH
44753: CALL_OW 305
44757: PUSH
44758: LD_VAR 0 5
44762: PUSH
44763: LD_INT 1
44765: ARRAY
44766: PPUSH
44767: CALL_OW 255
44771: PUSH
44772: LD_VAR 0 1
44776: PPUSH
44777: CALL_OW 255
44781: EQUAL
44782: AND
44783: IFFALSE 44807
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
44785: LD_VAR 0 5
44789: PUSH
44790: LD_INT 1
44792: ARRAY
44793: PPUSH
44794: LD_VAR 0 5
44798: PUSH
44799: LD_INT 2
44801: ARRAY
44802: PPUSH
44803: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
44807: LD_ADDR_EXP 147
44811: PUSH
44812: LD_EXP 147
44816: PPUSH
44817: LD_VAR 0 4
44821: PPUSH
44822: LD_EXP 147
44826: PUSH
44827: LD_VAR 0 4
44831: ARRAY
44832: PPUSH
44833: LD_VAR 0 3
44837: PPUSH
44838: CALL_OW 3
44842: PPUSH
44843: CALL_OW 1
44847: ST_TO_ADDR
// end ; end ;
44848: GO 44677
44850: POP
44851: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
44852: LD_VAR 0 1
44856: PPUSH
44857: LD_EXP 147
44861: PUSH
44862: LD_VAR 0 4
44866: ARRAY
44867: PUSH
44868: LD_INT 0
44870: PLUS
44871: PPUSH
44872: CALL_OW 505
// end ;
44876: LD_VAR 0 2
44880: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
44881: LD_INT 0
44883: PPUSH
44884: PPUSH
44885: PPUSH
44886: PPUSH
// if not hack in hackTanks then
44887: LD_VAR 0 1
44891: PUSH
44892: LD_EXP 146
44896: IN
44897: NOT
44898: IFFALSE 44902
// exit ;
44900: GO 44987
// index := GetElementIndex ( hackTanks , hack ) ;
44902: LD_ADDR_VAR 0 5
44906: PUSH
44907: LD_EXP 146
44911: PPUSH
44912: LD_VAR 0 1
44916: PPUSH
44917: CALL 51777 0 2
44921: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
44922: LD_ADDR_VAR 0 4
44926: PUSH
44927: DOUBLE
44928: LD_INT 1
44930: DEC
44931: ST_TO_ADDR
44932: LD_EXP 147
44936: PUSH
44937: LD_VAR 0 5
44941: ARRAY
44942: PUSH
44943: FOR_TO
44944: IFFALSE 44985
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
44946: LD_EXP 147
44950: PUSH
44951: LD_VAR 0 5
44955: ARRAY
44956: PUSH
44957: LD_VAR 0 4
44961: ARRAY
44962: PUSH
44963: LD_INT 1
44965: ARRAY
44966: PUSH
44967: LD_VAR 0 2
44971: EQUAL
44972: IFFALSE 44983
// KillUnit ( vehicle ) ;
44974: LD_VAR 0 2
44978: PPUSH
44979: CALL_OW 66
44983: GO 44943
44985: POP
44986: POP
// end ;
44987: LD_VAR 0 3
44991: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
44992: LD_EXP 151
44996: NOT
44997: IFFALSE 45032
44999: GO 45001
45001: DISABLE
// begin initMiner := true ;
45002: LD_ADDR_EXP 151
45006: PUSH
45007: LD_INT 1
45009: ST_TO_ADDR
// minersList := [ ] ;
45010: LD_ADDR_EXP 152
45014: PUSH
45015: EMPTY
45016: ST_TO_ADDR
// minerMinesList := [ ] ;
45017: LD_ADDR_EXP 153
45021: PUSH
45022: EMPTY
45023: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
45024: LD_ADDR_EXP 154
45028: PUSH
45029: LD_INT 5
45031: ST_TO_ADDR
// end ;
45032: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
45033: LD_EXP 151
45037: PUSH
45038: LD_INT 34
45040: PUSH
45041: LD_EXP 76
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PPUSH
45050: CALL_OW 69
45054: AND
45055: IFFALSE 45518
45057: GO 45059
45059: DISABLE
45060: LD_INT 0
45062: PPUSH
45063: PPUSH
45064: PPUSH
45065: PPUSH
// begin enable ;
45066: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
45067: LD_ADDR_VAR 0 1
45071: PUSH
45072: LD_INT 34
45074: PUSH
45075: LD_EXP 76
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PPUSH
45084: CALL_OW 69
45088: PUSH
45089: FOR_IN
45090: IFFALSE 45162
// begin if not i in minersList then
45092: LD_VAR 0 1
45096: PUSH
45097: LD_EXP 152
45101: IN
45102: NOT
45103: IFFALSE 45160
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
45105: LD_ADDR_EXP 152
45109: PUSH
45110: LD_EXP 152
45114: PPUSH
45115: LD_EXP 152
45119: PUSH
45120: LD_INT 1
45122: PLUS
45123: PPUSH
45124: LD_VAR 0 1
45128: PPUSH
45129: CALL_OW 1
45133: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
45134: LD_ADDR_EXP 153
45138: PUSH
45139: LD_EXP 153
45143: PPUSH
45144: LD_EXP 153
45148: PUSH
45149: LD_INT 1
45151: PLUS
45152: PPUSH
45153: EMPTY
45154: PPUSH
45155: CALL_OW 1
45159: ST_TO_ADDR
// end end ;
45160: GO 45089
45162: POP
45163: POP
// for i := minerMinesList downto 1 do
45164: LD_ADDR_VAR 0 1
45168: PUSH
45169: DOUBLE
45170: LD_EXP 153
45174: INC
45175: ST_TO_ADDR
45176: LD_INT 1
45178: PUSH
45179: FOR_DOWNTO
45180: IFFALSE 45516
// begin if IsLive ( minersList [ i ] ) then
45182: LD_EXP 152
45186: PUSH
45187: LD_VAR 0 1
45191: ARRAY
45192: PPUSH
45193: CALL_OW 300
45197: IFFALSE 45225
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
45199: LD_EXP 152
45203: PUSH
45204: LD_VAR 0 1
45208: ARRAY
45209: PPUSH
45210: LD_EXP 153
45214: PUSH
45215: LD_VAR 0 1
45219: ARRAY
45220: PPUSH
45221: CALL_OW 505
// if not minerMinesList [ i ] then
45225: LD_EXP 153
45229: PUSH
45230: LD_VAR 0 1
45234: ARRAY
45235: NOT
45236: IFFALSE 45240
// continue ;
45238: GO 45179
// for j := minerMinesList [ i ] downto 1 do
45240: LD_ADDR_VAR 0 2
45244: PUSH
45245: DOUBLE
45246: LD_EXP 153
45250: PUSH
45251: LD_VAR 0 1
45255: ARRAY
45256: INC
45257: ST_TO_ADDR
45258: LD_INT 1
45260: PUSH
45261: FOR_DOWNTO
45262: IFFALSE 45512
// begin side := GetSide ( minersList [ i ] ) ;
45264: LD_ADDR_VAR 0 3
45268: PUSH
45269: LD_EXP 152
45273: PUSH
45274: LD_VAR 0 1
45278: ARRAY
45279: PPUSH
45280: CALL_OW 255
45284: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
45285: LD_ADDR_VAR 0 4
45289: PUSH
45290: LD_EXP 153
45294: PUSH
45295: LD_VAR 0 1
45299: ARRAY
45300: PUSH
45301: LD_VAR 0 2
45305: ARRAY
45306: PUSH
45307: LD_INT 1
45309: ARRAY
45310: PPUSH
45311: LD_EXP 153
45315: PUSH
45316: LD_VAR 0 1
45320: ARRAY
45321: PUSH
45322: LD_VAR 0 2
45326: ARRAY
45327: PUSH
45328: LD_INT 2
45330: ARRAY
45331: PPUSH
45332: CALL_OW 428
45336: ST_TO_ADDR
// if not tmp then
45337: LD_VAR 0 4
45341: NOT
45342: IFFALSE 45346
// continue ;
45344: GO 45261
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
45346: LD_VAR 0 4
45350: PUSH
45351: LD_INT 81
45353: PUSH
45354: LD_VAR 0 3
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PPUSH
45363: CALL_OW 69
45367: IN
45368: PUSH
45369: LD_EXP 153
45373: PUSH
45374: LD_VAR 0 1
45378: ARRAY
45379: PUSH
45380: LD_VAR 0 2
45384: ARRAY
45385: PUSH
45386: LD_INT 1
45388: ARRAY
45389: PPUSH
45390: LD_EXP 153
45394: PUSH
45395: LD_VAR 0 1
45399: ARRAY
45400: PUSH
45401: LD_VAR 0 2
45405: ARRAY
45406: PUSH
45407: LD_INT 2
45409: ARRAY
45410: PPUSH
45411: CALL_OW 458
45415: AND
45416: IFFALSE 45510
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
45418: LD_EXP 153
45422: PUSH
45423: LD_VAR 0 1
45427: ARRAY
45428: PUSH
45429: LD_VAR 0 2
45433: ARRAY
45434: PUSH
45435: LD_INT 1
45437: ARRAY
45438: PPUSH
45439: LD_EXP 153
45443: PUSH
45444: LD_VAR 0 1
45448: ARRAY
45449: PUSH
45450: LD_VAR 0 2
45454: ARRAY
45455: PUSH
45456: LD_INT 2
45458: ARRAY
45459: PPUSH
45460: LD_VAR 0 3
45464: PPUSH
45465: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
45469: LD_ADDR_EXP 153
45473: PUSH
45474: LD_EXP 153
45478: PPUSH
45479: LD_VAR 0 1
45483: PPUSH
45484: LD_EXP 153
45488: PUSH
45489: LD_VAR 0 1
45493: ARRAY
45494: PPUSH
45495: LD_VAR 0 2
45499: PPUSH
45500: CALL_OW 3
45504: PPUSH
45505: CALL_OW 1
45509: ST_TO_ADDR
// end ; end ;
45510: GO 45261
45512: POP
45513: POP
// end ;
45514: GO 45179
45516: POP
45517: POP
// end ;
45518: PPOPN 4
45520: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
45521: LD_INT 0
45523: PPUSH
45524: PPUSH
// result := false ;
45525: LD_ADDR_VAR 0 4
45529: PUSH
45530: LD_INT 0
45532: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
45533: LD_VAR 0 1
45537: PPUSH
45538: CALL_OW 264
45542: PUSH
45543: LD_EXP 76
45547: EQUAL
45548: NOT
45549: IFFALSE 45553
// exit ;
45551: GO 45793
// index := GetElementIndex ( minersList , unit ) ;
45553: LD_ADDR_VAR 0 5
45557: PUSH
45558: LD_EXP 152
45562: PPUSH
45563: LD_VAR 0 1
45567: PPUSH
45568: CALL 51777 0 2
45572: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
45573: LD_EXP 153
45577: PUSH
45578: LD_VAR 0 5
45582: ARRAY
45583: PUSH
45584: LD_EXP 154
45588: GREATEREQUAL
45589: IFFALSE 45593
// exit ;
45591: GO 45793
// ComMoveXY ( unit , x , y ) ;
45593: LD_VAR 0 1
45597: PPUSH
45598: LD_VAR 0 2
45602: PPUSH
45603: LD_VAR 0 3
45607: PPUSH
45608: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
45612: LD_INT 35
45614: PPUSH
45615: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
45619: LD_VAR 0 1
45623: PPUSH
45624: LD_VAR 0 2
45628: PPUSH
45629: LD_VAR 0 3
45633: PPUSH
45634: CALL 82549 0 3
45638: NOT
45639: PUSH
45640: LD_VAR 0 1
45644: PPUSH
45645: CALL_OW 314
45649: AND
45650: IFFALSE 45654
// exit ;
45652: GO 45793
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
45654: LD_VAR 0 2
45658: PPUSH
45659: LD_VAR 0 3
45663: PPUSH
45664: CALL_OW 428
45668: PUSH
45669: LD_VAR 0 1
45673: EQUAL
45674: PUSH
45675: LD_VAR 0 1
45679: PPUSH
45680: CALL_OW 314
45684: NOT
45685: AND
45686: IFFALSE 45612
// PlaySoundXY ( x , y , PlantMine ) ;
45688: LD_VAR 0 2
45692: PPUSH
45693: LD_VAR 0 3
45697: PPUSH
45698: LD_STRING PlantMine
45700: PPUSH
45701: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
45705: LD_VAR 0 2
45709: PPUSH
45710: LD_VAR 0 3
45714: PPUSH
45715: LD_VAR 0 1
45719: PPUSH
45720: CALL_OW 255
45724: PPUSH
45725: LD_INT 0
45727: PPUSH
45728: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
45732: LD_ADDR_EXP 153
45736: PUSH
45737: LD_EXP 153
45741: PPUSH
45742: LD_VAR 0 5
45746: PUSH
45747: LD_EXP 153
45751: PUSH
45752: LD_VAR 0 5
45756: ARRAY
45757: PUSH
45758: LD_INT 1
45760: PLUS
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PPUSH
45766: LD_VAR 0 2
45770: PUSH
45771: LD_VAR 0 3
45775: PUSH
45776: EMPTY
45777: LIST
45778: LIST
45779: PPUSH
45780: CALL 51992 0 3
45784: ST_TO_ADDR
// result := true ;
45785: LD_ADDR_VAR 0 4
45789: PUSH
45790: LD_INT 1
45792: ST_TO_ADDR
// end ;
45793: LD_VAR 0 4
45797: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
45798: LD_INT 0
45800: PPUSH
45801: PPUSH
45802: PPUSH
// if not unit in minersList then
45803: LD_VAR 0 1
45807: PUSH
45808: LD_EXP 152
45812: IN
45813: NOT
45814: IFFALSE 45818
// exit ;
45816: GO 46210
// index := GetElementIndex ( minersList , unit ) ;
45818: LD_ADDR_VAR 0 6
45822: PUSH
45823: LD_EXP 152
45827: PPUSH
45828: LD_VAR 0 1
45832: PPUSH
45833: CALL 51777 0 2
45837: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
45838: LD_ADDR_VAR 0 5
45842: PUSH
45843: DOUBLE
45844: LD_EXP 153
45848: PUSH
45849: LD_VAR 0 6
45853: ARRAY
45854: INC
45855: ST_TO_ADDR
45856: LD_INT 1
45858: PUSH
45859: FOR_DOWNTO
45860: IFFALSE 46021
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
45862: LD_EXP 153
45866: PUSH
45867: LD_VAR 0 6
45871: ARRAY
45872: PUSH
45873: LD_VAR 0 5
45877: ARRAY
45878: PUSH
45879: LD_INT 1
45881: ARRAY
45882: PUSH
45883: LD_VAR 0 2
45887: EQUAL
45888: PUSH
45889: LD_EXP 153
45893: PUSH
45894: LD_VAR 0 6
45898: ARRAY
45899: PUSH
45900: LD_VAR 0 5
45904: ARRAY
45905: PUSH
45906: LD_INT 2
45908: ARRAY
45909: PUSH
45910: LD_VAR 0 3
45914: EQUAL
45915: AND
45916: IFFALSE 46019
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
45918: LD_EXP 153
45922: PUSH
45923: LD_VAR 0 6
45927: ARRAY
45928: PUSH
45929: LD_VAR 0 5
45933: ARRAY
45934: PUSH
45935: LD_INT 1
45937: ARRAY
45938: PPUSH
45939: LD_EXP 153
45943: PUSH
45944: LD_VAR 0 6
45948: ARRAY
45949: PUSH
45950: LD_VAR 0 5
45954: ARRAY
45955: PUSH
45956: LD_INT 2
45958: ARRAY
45959: PPUSH
45960: LD_VAR 0 1
45964: PPUSH
45965: CALL_OW 255
45969: PPUSH
45970: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
45974: LD_ADDR_EXP 153
45978: PUSH
45979: LD_EXP 153
45983: PPUSH
45984: LD_VAR 0 6
45988: PPUSH
45989: LD_EXP 153
45993: PUSH
45994: LD_VAR 0 6
45998: ARRAY
45999: PPUSH
46000: LD_VAR 0 5
46004: PPUSH
46005: CALL_OW 3
46009: PPUSH
46010: CALL_OW 1
46014: ST_TO_ADDR
// exit ;
46015: POP
46016: POP
46017: GO 46210
// end ; end ;
46019: GO 45859
46021: POP
46022: POP
// for i := minerMinesList [ index ] downto 1 do
46023: LD_ADDR_VAR 0 5
46027: PUSH
46028: DOUBLE
46029: LD_EXP 153
46033: PUSH
46034: LD_VAR 0 6
46038: ARRAY
46039: INC
46040: ST_TO_ADDR
46041: LD_INT 1
46043: PUSH
46044: FOR_DOWNTO
46045: IFFALSE 46208
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
46047: LD_EXP 153
46051: PUSH
46052: LD_VAR 0 6
46056: ARRAY
46057: PUSH
46058: LD_VAR 0 5
46062: ARRAY
46063: PUSH
46064: LD_INT 1
46066: ARRAY
46067: PPUSH
46068: LD_EXP 153
46072: PUSH
46073: LD_VAR 0 6
46077: ARRAY
46078: PUSH
46079: LD_VAR 0 5
46083: ARRAY
46084: PUSH
46085: LD_INT 2
46087: ARRAY
46088: PPUSH
46089: LD_VAR 0 2
46093: PPUSH
46094: LD_VAR 0 3
46098: PPUSH
46099: CALL_OW 298
46103: PUSH
46104: LD_INT 6
46106: LESS
46107: IFFALSE 46206
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
46109: LD_EXP 153
46113: PUSH
46114: LD_VAR 0 6
46118: ARRAY
46119: PUSH
46120: LD_VAR 0 5
46124: ARRAY
46125: PUSH
46126: LD_INT 1
46128: ARRAY
46129: PPUSH
46130: LD_EXP 153
46134: PUSH
46135: LD_VAR 0 6
46139: ARRAY
46140: PUSH
46141: LD_VAR 0 5
46145: ARRAY
46146: PUSH
46147: LD_INT 2
46149: ARRAY
46150: PPUSH
46151: LD_VAR 0 1
46155: PPUSH
46156: CALL_OW 255
46160: PPUSH
46161: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
46165: LD_ADDR_EXP 153
46169: PUSH
46170: LD_EXP 153
46174: PPUSH
46175: LD_VAR 0 6
46179: PPUSH
46180: LD_EXP 153
46184: PUSH
46185: LD_VAR 0 6
46189: ARRAY
46190: PPUSH
46191: LD_VAR 0 5
46195: PPUSH
46196: CALL_OW 3
46200: PPUSH
46201: CALL_OW 1
46205: ST_TO_ADDR
// end ; end ;
46206: GO 46044
46208: POP
46209: POP
// end ;
46210: LD_VAR 0 4
46214: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
46215: LD_INT 0
46217: PPUSH
46218: PPUSH
46219: PPUSH
46220: PPUSH
46221: PPUSH
46222: PPUSH
46223: PPUSH
46224: PPUSH
46225: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
46226: LD_VAR 0 1
46230: PPUSH
46231: CALL_OW 264
46235: PUSH
46236: LD_EXP 76
46240: EQUAL
46241: NOT
46242: PUSH
46243: LD_VAR 0 1
46247: PUSH
46248: LD_EXP 152
46252: IN
46253: NOT
46254: OR
46255: IFFALSE 46259
// exit ;
46257: GO 46581
// index := GetElementIndex ( minersList , unit ) ;
46259: LD_ADDR_VAR 0 6
46263: PUSH
46264: LD_EXP 152
46268: PPUSH
46269: LD_VAR 0 1
46273: PPUSH
46274: CALL 51777 0 2
46278: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
46279: LD_ADDR_VAR 0 8
46283: PUSH
46284: LD_EXP 154
46288: PUSH
46289: LD_EXP 153
46293: PUSH
46294: LD_VAR 0 6
46298: ARRAY
46299: MINUS
46300: ST_TO_ADDR
// if not minesFreeAmount then
46301: LD_VAR 0 8
46305: NOT
46306: IFFALSE 46310
// exit ;
46308: GO 46581
// tmp := [ ] ;
46310: LD_ADDR_VAR 0 7
46314: PUSH
46315: EMPTY
46316: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
46317: LD_ADDR_VAR 0 5
46321: PUSH
46322: DOUBLE
46323: LD_INT 1
46325: DEC
46326: ST_TO_ADDR
46327: LD_VAR 0 8
46331: PUSH
46332: FOR_TO
46333: IFFALSE 46528
// begin _d := rand ( 0 , 5 ) ;
46335: LD_ADDR_VAR 0 11
46339: PUSH
46340: LD_INT 0
46342: PPUSH
46343: LD_INT 5
46345: PPUSH
46346: CALL_OW 12
46350: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
46351: LD_ADDR_VAR 0 12
46355: PUSH
46356: LD_INT 2
46358: PPUSH
46359: LD_INT 6
46361: PPUSH
46362: CALL_OW 12
46366: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
46367: LD_ADDR_VAR 0 9
46371: PUSH
46372: LD_VAR 0 2
46376: PPUSH
46377: LD_VAR 0 11
46381: PPUSH
46382: LD_VAR 0 12
46386: PPUSH
46387: CALL_OW 272
46391: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
46392: LD_ADDR_VAR 0 10
46396: PUSH
46397: LD_VAR 0 3
46401: PPUSH
46402: LD_VAR 0 11
46406: PPUSH
46407: LD_VAR 0 12
46411: PPUSH
46412: CALL_OW 273
46416: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
46417: LD_VAR 0 9
46421: PPUSH
46422: LD_VAR 0 10
46426: PPUSH
46427: CALL_OW 488
46431: PUSH
46432: LD_VAR 0 9
46436: PUSH
46437: LD_VAR 0 10
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_VAR 0 7
46450: IN
46451: NOT
46452: AND
46453: PUSH
46454: LD_VAR 0 9
46458: PPUSH
46459: LD_VAR 0 10
46463: PPUSH
46464: CALL_OW 458
46468: NOT
46469: AND
46470: IFFALSE 46512
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
46472: LD_ADDR_VAR 0 7
46476: PUSH
46477: LD_VAR 0 7
46481: PPUSH
46482: LD_VAR 0 7
46486: PUSH
46487: LD_INT 1
46489: PLUS
46490: PPUSH
46491: LD_VAR 0 9
46495: PUSH
46496: LD_VAR 0 10
46500: PUSH
46501: EMPTY
46502: LIST
46503: LIST
46504: PPUSH
46505: CALL_OW 1
46509: ST_TO_ADDR
46510: GO 46526
// i := i - 1 ;
46512: LD_ADDR_VAR 0 5
46516: PUSH
46517: LD_VAR 0 5
46521: PUSH
46522: LD_INT 1
46524: MINUS
46525: ST_TO_ADDR
// end ;
46526: GO 46332
46528: POP
46529: POP
// for i in tmp do
46530: LD_ADDR_VAR 0 5
46534: PUSH
46535: LD_VAR 0 7
46539: PUSH
46540: FOR_IN
46541: IFFALSE 46579
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
46543: LD_VAR 0 1
46547: PPUSH
46548: LD_VAR 0 5
46552: PUSH
46553: LD_INT 1
46555: ARRAY
46556: PPUSH
46557: LD_VAR 0 5
46561: PUSH
46562: LD_INT 2
46564: ARRAY
46565: PPUSH
46566: CALL 45521 0 3
46570: NOT
46571: IFFALSE 46577
// exit ;
46573: POP
46574: POP
46575: GO 46581
46577: GO 46540
46579: POP
46580: POP
// end ;
46581: LD_VAR 0 4
46585: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
46586: LD_INT 0
46588: PPUSH
46589: PPUSH
46590: PPUSH
46591: PPUSH
46592: PPUSH
46593: PPUSH
46594: PPUSH
// if not GetClass ( unit ) = class_sniper then
46595: LD_VAR 0 1
46599: PPUSH
46600: CALL_OW 257
46604: PUSH
46605: LD_INT 5
46607: EQUAL
46608: NOT
46609: IFFALSE 46613
// exit ;
46611: GO 47001
// dist := 8 ;
46613: LD_ADDR_VAR 0 5
46617: PUSH
46618: LD_INT 8
46620: ST_TO_ADDR
// viewRange := 12 ;
46621: LD_ADDR_VAR 0 7
46625: PUSH
46626: LD_INT 12
46628: ST_TO_ADDR
// side := GetSide ( unit ) ;
46629: LD_ADDR_VAR 0 6
46633: PUSH
46634: LD_VAR 0 1
46638: PPUSH
46639: CALL_OW 255
46643: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
46644: LD_INT 61
46646: PPUSH
46647: LD_VAR 0 6
46651: PPUSH
46652: CALL_OW 321
46656: PUSH
46657: LD_INT 2
46659: EQUAL
46660: IFFALSE 46670
// viewRange := 16 ;
46662: LD_ADDR_VAR 0 7
46666: PUSH
46667: LD_INT 16
46669: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
46670: LD_VAR 0 1
46674: PPUSH
46675: LD_VAR 0 2
46679: PPUSH
46680: LD_VAR 0 3
46684: PPUSH
46685: CALL_OW 297
46689: PUSH
46690: LD_VAR 0 5
46694: GREATER
46695: IFFALSE 46774
// begin ComMoveXY ( unit , x , y ) ;
46697: LD_VAR 0 1
46701: PPUSH
46702: LD_VAR 0 2
46706: PPUSH
46707: LD_VAR 0 3
46711: PPUSH
46712: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
46716: LD_INT 35
46718: PPUSH
46719: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
46723: LD_VAR 0 1
46727: PPUSH
46728: LD_VAR 0 2
46732: PPUSH
46733: LD_VAR 0 3
46737: PPUSH
46738: CALL 82549 0 3
46742: NOT
46743: IFFALSE 46747
// exit ;
46745: GO 47001
// until GetDistUnitXY ( unit , x , y ) < dist ;
46747: LD_VAR 0 1
46751: PPUSH
46752: LD_VAR 0 2
46756: PPUSH
46757: LD_VAR 0 3
46761: PPUSH
46762: CALL_OW 297
46766: PUSH
46767: LD_VAR 0 5
46771: LESS
46772: IFFALSE 46716
// end ; ComTurnXY ( unit , x , y ) ;
46774: LD_VAR 0 1
46778: PPUSH
46779: LD_VAR 0 2
46783: PPUSH
46784: LD_VAR 0 3
46788: PPUSH
46789: CALL_OW 118
// wait ( 5 ) ;
46793: LD_INT 5
46795: PPUSH
46796: CALL_OW 67
// _d := GetDir ( unit ) ;
46800: LD_ADDR_VAR 0 10
46804: PUSH
46805: LD_VAR 0 1
46809: PPUSH
46810: CALL_OW 254
46814: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
46815: LD_ADDR_VAR 0 8
46819: PUSH
46820: LD_VAR 0 1
46824: PPUSH
46825: CALL_OW 250
46829: PPUSH
46830: LD_VAR 0 10
46834: PPUSH
46835: LD_VAR 0 5
46839: PPUSH
46840: CALL_OW 272
46844: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
46845: LD_ADDR_VAR 0 9
46849: PUSH
46850: LD_VAR 0 1
46854: PPUSH
46855: CALL_OW 251
46859: PPUSH
46860: LD_VAR 0 10
46864: PPUSH
46865: LD_VAR 0 5
46869: PPUSH
46870: CALL_OW 273
46874: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
46875: LD_VAR 0 8
46879: PPUSH
46880: LD_VAR 0 9
46884: PPUSH
46885: CALL_OW 488
46889: NOT
46890: IFFALSE 46894
// exit ;
46892: GO 47001
// ComAnimCustom ( unit , 1 ) ;
46894: LD_VAR 0 1
46898: PPUSH
46899: LD_INT 1
46901: PPUSH
46902: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
46906: LD_VAR 0 8
46910: PPUSH
46911: LD_VAR 0 9
46915: PPUSH
46916: LD_VAR 0 6
46920: PPUSH
46921: LD_VAR 0 7
46925: PPUSH
46926: CALL_OW 330
// repeat wait ( 1 ) ;
46930: LD_INT 1
46932: PPUSH
46933: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
46937: LD_VAR 0 1
46941: PPUSH
46942: CALL_OW 316
46946: PUSH
46947: LD_VAR 0 1
46951: PPUSH
46952: CALL_OW 314
46956: OR
46957: PUSH
46958: LD_VAR 0 1
46962: PPUSH
46963: CALL_OW 302
46967: NOT
46968: OR
46969: PUSH
46970: LD_VAR 0 1
46974: PPUSH
46975: CALL_OW 301
46979: OR
46980: IFFALSE 46930
// RemoveSeeing ( _x , _y , side ) ;
46982: LD_VAR 0 8
46986: PPUSH
46987: LD_VAR 0 9
46991: PPUSH
46992: LD_VAR 0 6
46996: PPUSH
46997: CALL_OW 331
// end ; end_of_file
47001: LD_VAR 0 4
47005: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
47006: LD_INT 0
47008: PPUSH
47009: PPUSH
// if exist_mode then
47010: LD_VAR 0 2
47014: IFFALSE 47039
// unit := CreateCharacter ( prefix & ident ) else
47016: LD_ADDR_VAR 0 5
47020: PUSH
47021: LD_VAR 0 3
47025: PUSH
47026: LD_VAR 0 1
47030: STR
47031: PPUSH
47032: CALL_OW 34
47036: ST_TO_ADDR
47037: GO 47054
// unit := NewCharacter ( ident ) ;
47039: LD_ADDR_VAR 0 5
47043: PUSH
47044: LD_VAR 0 1
47048: PPUSH
47049: CALL_OW 25
47053: ST_TO_ADDR
// result := unit ;
47054: LD_ADDR_VAR 0 4
47058: PUSH
47059: LD_VAR 0 5
47063: ST_TO_ADDR
// end ;
47064: LD_VAR 0 4
47068: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
47069: LD_INT 0
47071: PPUSH
47072: PPUSH
// if not side or not nation then
47073: LD_VAR 0 1
47077: NOT
47078: PUSH
47079: LD_VAR 0 2
47083: NOT
47084: OR
47085: IFFALSE 47089
// exit ;
47087: GO 47857
// case nation of nation_american :
47089: LD_VAR 0 2
47093: PUSH
47094: LD_INT 1
47096: DOUBLE
47097: EQUAL
47098: IFTRUE 47102
47100: GO 47316
47102: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
47103: LD_ADDR_VAR 0 4
47107: PUSH
47108: LD_INT 35
47110: PUSH
47111: LD_INT 45
47113: PUSH
47114: LD_INT 46
47116: PUSH
47117: LD_INT 47
47119: PUSH
47120: LD_INT 82
47122: PUSH
47123: LD_INT 83
47125: PUSH
47126: LD_INT 84
47128: PUSH
47129: LD_INT 85
47131: PUSH
47132: LD_INT 86
47134: PUSH
47135: LD_INT 1
47137: PUSH
47138: LD_INT 2
47140: PUSH
47141: LD_INT 6
47143: PUSH
47144: LD_INT 15
47146: PUSH
47147: LD_INT 16
47149: PUSH
47150: LD_INT 7
47152: PUSH
47153: LD_INT 12
47155: PUSH
47156: LD_INT 13
47158: PUSH
47159: LD_INT 10
47161: PUSH
47162: LD_INT 14
47164: PUSH
47165: LD_INT 20
47167: PUSH
47168: LD_INT 21
47170: PUSH
47171: LD_INT 22
47173: PUSH
47174: LD_INT 25
47176: PUSH
47177: LD_INT 32
47179: PUSH
47180: LD_INT 27
47182: PUSH
47183: LD_INT 36
47185: PUSH
47186: LD_INT 69
47188: PUSH
47189: LD_INT 39
47191: PUSH
47192: LD_INT 34
47194: PUSH
47195: LD_INT 40
47197: PUSH
47198: LD_INT 48
47200: PUSH
47201: LD_INT 49
47203: PUSH
47204: LD_INT 50
47206: PUSH
47207: LD_INT 51
47209: PUSH
47210: LD_INT 52
47212: PUSH
47213: LD_INT 53
47215: PUSH
47216: LD_INT 54
47218: PUSH
47219: LD_INT 55
47221: PUSH
47222: LD_INT 56
47224: PUSH
47225: LD_INT 57
47227: PUSH
47228: LD_INT 58
47230: PUSH
47231: LD_INT 59
47233: PUSH
47234: LD_INT 60
47236: PUSH
47237: LD_INT 61
47239: PUSH
47240: LD_INT 62
47242: PUSH
47243: LD_INT 80
47245: PUSH
47246: LD_INT 82
47248: PUSH
47249: LD_INT 83
47251: PUSH
47252: LD_INT 84
47254: PUSH
47255: LD_INT 85
47257: PUSH
47258: LD_INT 86
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: LIST
47292: LIST
47293: LIST
47294: LIST
47295: LIST
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: LIST
47302: LIST
47303: LIST
47304: LIST
47305: LIST
47306: LIST
47307: LIST
47308: LIST
47309: LIST
47310: LIST
47311: LIST
47312: LIST
47313: ST_TO_ADDR
47314: GO 47781
47316: LD_INT 2
47318: DOUBLE
47319: EQUAL
47320: IFTRUE 47324
47322: GO 47550
47324: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
47325: LD_ADDR_VAR 0 4
47329: PUSH
47330: LD_INT 35
47332: PUSH
47333: LD_INT 45
47335: PUSH
47336: LD_INT 46
47338: PUSH
47339: LD_INT 47
47341: PUSH
47342: LD_INT 82
47344: PUSH
47345: LD_INT 83
47347: PUSH
47348: LD_INT 84
47350: PUSH
47351: LD_INT 85
47353: PUSH
47354: LD_INT 87
47356: PUSH
47357: LD_INT 70
47359: PUSH
47360: LD_INT 1
47362: PUSH
47363: LD_INT 11
47365: PUSH
47366: LD_INT 3
47368: PUSH
47369: LD_INT 4
47371: PUSH
47372: LD_INT 5
47374: PUSH
47375: LD_INT 6
47377: PUSH
47378: LD_INT 15
47380: PUSH
47381: LD_INT 18
47383: PUSH
47384: LD_INT 7
47386: PUSH
47387: LD_INT 17
47389: PUSH
47390: LD_INT 8
47392: PUSH
47393: LD_INT 20
47395: PUSH
47396: LD_INT 21
47398: PUSH
47399: LD_INT 22
47401: PUSH
47402: LD_INT 72
47404: PUSH
47405: LD_INT 26
47407: PUSH
47408: LD_INT 69
47410: PUSH
47411: LD_INT 39
47413: PUSH
47414: LD_INT 40
47416: PUSH
47417: LD_INT 41
47419: PUSH
47420: LD_INT 42
47422: PUSH
47423: LD_INT 43
47425: PUSH
47426: LD_INT 48
47428: PUSH
47429: LD_INT 49
47431: PUSH
47432: LD_INT 50
47434: PUSH
47435: LD_INT 51
47437: PUSH
47438: LD_INT 52
47440: PUSH
47441: LD_INT 53
47443: PUSH
47444: LD_INT 54
47446: PUSH
47447: LD_INT 55
47449: PUSH
47450: LD_INT 56
47452: PUSH
47453: LD_INT 60
47455: PUSH
47456: LD_INT 61
47458: PUSH
47459: LD_INT 62
47461: PUSH
47462: LD_INT 66
47464: PUSH
47465: LD_INT 67
47467: PUSH
47468: LD_INT 68
47470: PUSH
47471: LD_INT 81
47473: PUSH
47474: LD_INT 82
47476: PUSH
47477: LD_INT 83
47479: PUSH
47480: LD_INT 84
47482: PUSH
47483: LD_INT 85
47485: PUSH
47486: LD_INT 87
47488: PUSH
47489: LD_INT 88
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: LIST
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: LIST
47535: LIST
47536: LIST
47537: LIST
47538: LIST
47539: LIST
47540: LIST
47541: LIST
47542: LIST
47543: LIST
47544: LIST
47545: LIST
47546: LIST
47547: ST_TO_ADDR
47548: GO 47781
47550: LD_INT 3
47552: DOUBLE
47553: EQUAL
47554: IFTRUE 47558
47556: GO 47780
47558: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
47559: LD_ADDR_VAR 0 4
47563: PUSH
47564: LD_INT 46
47566: PUSH
47567: LD_INT 47
47569: PUSH
47570: LD_INT 1
47572: PUSH
47573: LD_INT 2
47575: PUSH
47576: LD_INT 82
47578: PUSH
47579: LD_INT 83
47581: PUSH
47582: LD_INT 84
47584: PUSH
47585: LD_INT 85
47587: PUSH
47588: LD_INT 86
47590: PUSH
47591: LD_INT 11
47593: PUSH
47594: LD_INT 9
47596: PUSH
47597: LD_INT 20
47599: PUSH
47600: LD_INT 19
47602: PUSH
47603: LD_INT 21
47605: PUSH
47606: LD_INT 24
47608: PUSH
47609: LD_INT 22
47611: PUSH
47612: LD_INT 25
47614: PUSH
47615: LD_INT 28
47617: PUSH
47618: LD_INT 29
47620: PUSH
47621: LD_INT 30
47623: PUSH
47624: LD_INT 31
47626: PUSH
47627: LD_INT 37
47629: PUSH
47630: LD_INT 38
47632: PUSH
47633: LD_INT 32
47635: PUSH
47636: LD_INT 27
47638: PUSH
47639: LD_INT 33
47641: PUSH
47642: LD_INT 69
47644: PUSH
47645: LD_INT 39
47647: PUSH
47648: LD_INT 34
47650: PUSH
47651: LD_INT 40
47653: PUSH
47654: LD_INT 71
47656: PUSH
47657: LD_INT 23
47659: PUSH
47660: LD_INT 44
47662: PUSH
47663: LD_INT 48
47665: PUSH
47666: LD_INT 49
47668: PUSH
47669: LD_INT 50
47671: PUSH
47672: LD_INT 51
47674: PUSH
47675: LD_INT 52
47677: PUSH
47678: LD_INT 53
47680: PUSH
47681: LD_INT 54
47683: PUSH
47684: LD_INT 55
47686: PUSH
47687: LD_INT 56
47689: PUSH
47690: LD_INT 57
47692: PUSH
47693: LD_INT 58
47695: PUSH
47696: LD_INT 59
47698: PUSH
47699: LD_INT 63
47701: PUSH
47702: LD_INT 64
47704: PUSH
47705: LD_INT 65
47707: PUSH
47708: LD_INT 82
47710: PUSH
47711: LD_INT 83
47713: PUSH
47714: LD_INT 84
47716: PUSH
47717: LD_INT 85
47719: PUSH
47720: LD_INT 86
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: LIST
47745: LIST
47746: LIST
47747: LIST
47748: LIST
47749: LIST
47750: LIST
47751: LIST
47752: LIST
47753: LIST
47754: LIST
47755: LIST
47756: LIST
47757: LIST
47758: LIST
47759: LIST
47760: LIST
47761: LIST
47762: LIST
47763: LIST
47764: LIST
47765: LIST
47766: LIST
47767: LIST
47768: LIST
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: LIST
47777: ST_TO_ADDR
47778: GO 47781
47780: POP
// if state > - 1 and state < 3 then
47781: LD_VAR 0 3
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: GREATER
47790: PUSH
47791: LD_VAR 0 3
47795: PUSH
47796: LD_INT 3
47798: LESS
47799: AND
47800: IFFALSE 47857
// for i in result do
47802: LD_ADDR_VAR 0 5
47806: PUSH
47807: LD_VAR 0 4
47811: PUSH
47812: FOR_IN
47813: IFFALSE 47855
// if GetTech ( i , side ) <> state then
47815: LD_VAR 0 5
47819: PPUSH
47820: LD_VAR 0 1
47824: PPUSH
47825: CALL_OW 321
47829: PUSH
47830: LD_VAR 0 3
47834: NONEQUAL
47835: IFFALSE 47853
// result := result diff i ;
47837: LD_ADDR_VAR 0 4
47841: PUSH
47842: LD_VAR 0 4
47846: PUSH
47847: LD_VAR 0 5
47851: DIFF
47852: ST_TO_ADDR
47853: GO 47812
47855: POP
47856: POP
// end ;
47857: LD_VAR 0 4
47861: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
47862: LD_INT 0
47864: PPUSH
47865: PPUSH
47866: PPUSH
// result := true ;
47867: LD_ADDR_VAR 0 3
47871: PUSH
47872: LD_INT 1
47874: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
47875: LD_ADDR_VAR 0 5
47879: PUSH
47880: LD_VAR 0 2
47884: PPUSH
47885: CALL_OW 480
47889: ST_TO_ADDR
// if not tmp then
47890: LD_VAR 0 5
47894: NOT
47895: IFFALSE 47899
// exit ;
47897: GO 47948
// for i in tmp do
47899: LD_ADDR_VAR 0 4
47903: PUSH
47904: LD_VAR 0 5
47908: PUSH
47909: FOR_IN
47910: IFFALSE 47946
// if GetTech ( i , side ) <> state_researched then
47912: LD_VAR 0 4
47916: PPUSH
47917: LD_VAR 0 1
47921: PPUSH
47922: CALL_OW 321
47926: PUSH
47927: LD_INT 2
47929: NONEQUAL
47930: IFFALSE 47944
// begin result := false ;
47932: LD_ADDR_VAR 0 3
47936: PUSH
47937: LD_INT 0
47939: ST_TO_ADDR
// exit ;
47940: POP
47941: POP
47942: GO 47948
// end ;
47944: GO 47909
47946: POP
47947: POP
// end ;
47948: LD_VAR 0 3
47952: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
47953: LD_INT 0
47955: PPUSH
47956: PPUSH
47957: PPUSH
47958: PPUSH
47959: PPUSH
47960: PPUSH
47961: PPUSH
47962: PPUSH
47963: PPUSH
47964: PPUSH
47965: PPUSH
47966: PPUSH
47967: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
47968: LD_VAR 0 1
47972: NOT
47973: PUSH
47974: LD_VAR 0 1
47978: PPUSH
47979: CALL_OW 257
47983: PUSH
47984: LD_INT 9
47986: NONEQUAL
47987: OR
47988: IFFALSE 47992
// exit ;
47990: GO 48565
// side := GetSide ( unit ) ;
47992: LD_ADDR_VAR 0 9
47996: PUSH
47997: LD_VAR 0 1
48001: PPUSH
48002: CALL_OW 255
48006: ST_TO_ADDR
// tech_space := tech_spacanom ;
48007: LD_ADDR_VAR 0 12
48011: PUSH
48012: LD_INT 29
48014: ST_TO_ADDR
// tech_time := tech_taurad ;
48015: LD_ADDR_VAR 0 13
48019: PUSH
48020: LD_INT 28
48022: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
48023: LD_ADDR_VAR 0 11
48027: PUSH
48028: LD_VAR 0 1
48032: PPUSH
48033: CALL_OW 310
48037: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
48038: LD_VAR 0 11
48042: PPUSH
48043: CALL_OW 247
48047: PUSH
48048: LD_INT 2
48050: EQUAL
48051: IFFALSE 48055
// exit ;
48053: GO 48565
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48055: LD_ADDR_VAR 0 8
48059: PUSH
48060: LD_INT 81
48062: PUSH
48063: LD_VAR 0 9
48067: PUSH
48068: EMPTY
48069: LIST
48070: LIST
48071: PUSH
48072: LD_INT 3
48074: PUSH
48075: LD_INT 21
48077: PUSH
48078: LD_INT 3
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: EMPTY
48086: LIST
48087: LIST
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PPUSH
48093: CALL_OW 69
48097: ST_TO_ADDR
// if not tmp then
48098: LD_VAR 0 8
48102: NOT
48103: IFFALSE 48107
// exit ;
48105: GO 48565
// if in_unit then
48107: LD_VAR 0 11
48111: IFFALSE 48135
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
48113: LD_ADDR_VAR 0 10
48117: PUSH
48118: LD_VAR 0 8
48122: PPUSH
48123: LD_VAR 0 11
48127: PPUSH
48128: CALL_OW 74
48132: ST_TO_ADDR
48133: GO 48155
// enemy := NearestUnitToUnit ( tmp , unit ) ;
48135: LD_ADDR_VAR 0 10
48139: PUSH
48140: LD_VAR 0 8
48144: PPUSH
48145: LD_VAR 0 1
48149: PPUSH
48150: CALL_OW 74
48154: ST_TO_ADDR
// if not enemy then
48155: LD_VAR 0 10
48159: NOT
48160: IFFALSE 48164
// exit ;
48162: GO 48565
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
48164: LD_VAR 0 11
48168: PUSH
48169: LD_VAR 0 11
48173: PPUSH
48174: LD_VAR 0 10
48178: PPUSH
48179: CALL_OW 296
48183: PUSH
48184: LD_INT 13
48186: GREATER
48187: AND
48188: PUSH
48189: LD_VAR 0 1
48193: PPUSH
48194: LD_VAR 0 10
48198: PPUSH
48199: CALL_OW 296
48203: PUSH
48204: LD_INT 12
48206: GREATER
48207: OR
48208: IFFALSE 48212
// exit ;
48210: GO 48565
// missile := [ 1 ] ;
48212: LD_ADDR_VAR 0 14
48216: PUSH
48217: LD_INT 1
48219: PUSH
48220: EMPTY
48221: LIST
48222: ST_TO_ADDR
// if Researched ( side , tech_space ) then
48223: LD_VAR 0 9
48227: PPUSH
48228: LD_VAR 0 12
48232: PPUSH
48233: CALL_OW 325
48237: IFFALSE 48266
// missile := Insert ( missile , missile + 1 , 2 ) ;
48239: LD_ADDR_VAR 0 14
48243: PUSH
48244: LD_VAR 0 14
48248: PPUSH
48249: LD_VAR 0 14
48253: PUSH
48254: LD_INT 1
48256: PLUS
48257: PPUSH
48258: LD_INT 2
48260: PPUSH
48261: CALL_OW 2
48265: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
48266: LD_VAR 0 9
48270: PPUSH
48271: LD_VAR 0 13
48275: PPUSH
48276: CALL_OW 325
48280: PUSH
48281: LD_VAR 0 10
48285: PPUSH
48286: CALL_OW 255
48290: PPUSH
48291: LD_VAR 0 13
48295: PPUSH
48296: CALL_OW 325
48300: NOT
48301: AND
48302: IFFALSE 48331
// missile := Insert ( missile , missile + 1 , 3 ) ;
48304: LD_ADDR_VAR 0 14
48308: PUSH
48309: LD_VAR 0 14
48313: PPUSH
48314: LD_VAR 0 14
48318: PUSH
48319: LD_INT 1
48321: PLUS
48322: PPUSH
48323: LD_INT 3
48325: PPUSH
48326: CALL_OW 2
48330: ST_TO_ADDR
// if missile < 2 then
48331: LD_VAR 0 14
48335: PUSH
48336: LD_INT 2
48338: LESS
48339: IFFALSE 48343
// exit ;
48341: GO 48565
// x := GetX ( enemy ) ;
48343: LD_ADDR_VAR 0 4
48347: PUSH
48348: LD_VAR 0 10
48352: PPUSH
48353: CALL_OW 250
48357: ST_TO_ADDR
// y := GetY ( enemy ) ;
48358: LD_ADDR_VAR 0 5
48362: PUSH
48363: LD_VAR 0 10
48367: PPUSH
48368: CALL_OW 251
48372: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
48373: LD_ADDR_VAR 0 6
48377: PUSH
48378: LD_VAR 0 4
48382: PUSH
48383: LD_INT 1
48385: NEG
48386: PPUSH
48387: LD_INT 1
48389: PPUSH
48390: CALL_OW 12
48394: PLUS
48395: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
48396: LD_ADDR_VAR 0 7
48400: PUSH
48401: LD_VAR 0 5
48405: PUSH
48406: LD_INT 1
48408: NEG
48409: PPUSH
48410: LD_INT 1
48412: PPUSH
48413: CALL_OW 12
48417: PLUS
48418: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48419: LD_VAR 0 6
48423: PPUSH
48424: LD_VAR 0 7
48428: PPUSH
48429: CALL_OW 488
48433: NOT
48434: IFFALSE 48456
// begin _x := x ;
48436: LD_ADDR_VAR 0 6
48440: PUSH
48441: LD_VAR 0 4
48445: ST_TO_ADDR
// _y := y ;
48446: LD_ADDR_VAR 0 7
48450: PUSH
48451: LD_VAR 0 5
48455: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
48456: LD_ADDR_VAR 0 3
48460: PUSH
48461: LD_INT 1
48463: PPUSH
48464: LD_VAR 0 14
48468: PPUSH
48469: CALL_OW 12
48473: ST_TO_ADDR
// case i of 1 :
48474: LD_VAR 0 3
48478: PUSH
48479: LD_INT 1
48481: DOUBLE
48482: EQUAL
48483: IFTRUE 48487
48485: GO 48504
48487: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
48488: LD_VAR 0 1
48492: PPUSH
48493: LD_VAR 0 10
48497: PPUSH
48498: CALL_OW 115
48502: GO 48565
48504: LD_INT 2
48506: DOUBLE
48507: EQUAL
48508: IFTRUE 48512
48510: GO 48534
48512: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
48513: LD_VAR 0 1
48517: PPUSH
48518: LD_VAR 0 6
48522: PPUSH
48523: LD_VAR 0 7
48527: PPUSH
48528: CALL_OW 153
48532: GO 48565
48534: LD_INT 3
48536: DOUBLE
48537: EQUAL
48538: IFTRUE 48542
48540: GO 48564
48542: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
48543: LD_VAR 0 1
48547: PPUSH
48548: LD_VAR 0 6
48552: PPUSH
48553: LD_VAR 0 7
48557: PPUSH
48558: CALL_OW 154
48562: GO 48565
48564: POP
// end ;
48565: LD_VAR 0 2
48569: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
48570: LD_INT 0
48572: PPUSH
48573: PPUSH
48574: PPUSH
48575: PPUSH
48576: PPUSH
48577: PPUSH
// if not unit or not building then
48578: LD_VAR 0 1
48582: NOT
48583: PUSH
48584: LD_VAR 0 2
48588: NOT
48589: OR
48590: IFFALSE 48594
// exit ;
48592: GO 48752
// x := GetX ( building ) ;
48594: LD_ADDR_VAR 0 5
48598: PUSH
48599: LD_VAR 0 2
48603: PPUSH
48604: CALL_OW 250
48608: ST_TO_ADDR
// y := GetY ( building ) ;
48609: LD_ADDR_VAR 0 6
48613: PUSH
48614: LD_VAR 0 2
48618: PPUSH
48619: CALL_OW 251
48623: ST_TO_ADDR
// for i = 0 to 5 do
48624: LD_ADDR_VAR 0 4
48628: PUSH
48629: DOUBLE
48630: LD_INT 0
48632: DEC
48633: ST_TO_ADDR
48634: LD_INT 5
48636: PUSH
48637: FOR_TO
48638: IFFALSE 48750
// begin _x := ShiftX ( x , i , 3 ) ;
48640: LD_ADDR_VAR 0 7
48644: PUSH
48645: LD_VAR 0 5
48649: PPUSH
48650: LD_VAR 0 4
48654: PPUSH
48655: LD_INT 3
48657: PPUSH
48658: CALL_OW 272
48662: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
48663: LD_ADDR_VAR 0 8
48667: PUSH
48668: LD_VAR 0 6
48672: PPUSH
48673: LD_VAR 0 4
48677: PPUSH
48678: LD_INT 3
48680: PPUSH
48681: CALL_OW 273
48685: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48686: LD_VAR 0 7
48690: PPUSH
48691: LD_VAR 0 8
48695: PPUSH
48696: CALL_OW 488
48700: NOT
48701: IFFALSE 48705
// continue ;
48703: GO 48637
// if HexInfo ( _x , _y ) = 0 then
48705: LD_VAR 0 7
48709: PPUSH
48710: LD_VAR 0 8
48714: PPUSH
48715: CALL_OW 428
48719: PUSH
48720: LD_INT 0
48722: EQUAL
48723: IFFALSE 48748
// begin ComMoveXY ( unit , _x , _y ) ;
48725: LD_VAR 0 1
48729: PPUSH
48730: LD_VAR 0 7
48734: PPUSH
48735: LD_VAR 0 8
48739: PPUSH
48740: CALL_OW 111
// exit ;
48744: POP
48745: POP
48746: GO 48752
// end ; end ;
48748: GO 48637
48750: POP
48751: POP
// end ;
48752: LD_VAR 0 3
48756: RET
// export function ScanBase ( side , base_area ) ; begin
48757: LD_INT 0
48759: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
48760: LD_ADDR_VAR 0 3
48764: PUSH
48765: LD_VAR 0 2
48769: PPUSH
48770: LD_INT 81
48772: PUSH
48773: LD_VAR 0 1
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PPUSH
48782: CALL_OW 70
48786: ST_TO_ADDR
// end ;
48787: LD_VAR 0 3
48791: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
48792: LD_INT 0
48794: PPUSH
48795: PPUSH
48796: PPUSH
48797: PPUSH
// result := false ;
48798: LD_ADDR_VAR 0 2
48802: PUSH
48803: LD_INT 0
48805: ST_TO_ADDR
// side := GetSide ( unit ) ;
48806: LD_ADDR_VAR 0 3
48810: PUSH
48811: LD_VAR 0 1
48815: PPUSH
48816: CALL_OW 255
48820: ST_TO_ADDR
// nat := GetNation ( unit ) ;
48821: LD_ADDR_VAR 0 4
48825: PUSH
48826: LD_VAR 0 1
48830: PPUSH
48831: CALL_OW 248
48835: ST_TO_ADDR
// case nat of 1 :
48836: LD_VAR 0 4
48840: PUSH
48841: LD_INT 1
48843: DOUBLE
48844: EQUAL
48845: IFTRUE 48849
48847: GO 48860
48849: POP
// tech := tech_lassight ; 2 :
48850: LD_ADDR_VAR 0 5
48854: PUSH
48855: LD_INT 12
48857: ST_TO_ADDR
48858: GO 48899
48860: LD_INT 2
48862: DOUBLE
48863: EQUAL
48864: IFTRUE 48868
48866: GO 48879
48868: POP
// tech := tech_mortar ; 3 :
48869: LD_ADDR_VAR 0 5
48873: PUSH
48874: LD_INT 41
48876: ST_TO_ADDR
48877: GO 48899
48879: LD_INT 3
48881: DOUBLE
48882: EQUAL
48883: IFTRUE 48887
48885: GO 48898
48887: POP
// tech := tech_bazooka ; end ;
48888: LD_ADDR_VAR 0 5
48892: PUSH
48893: LD_INT 44
48895: ST_TO_ADDR
48896: GO 48899
48898: POP
// if Researched ( side , tech ) then
48899: LD_VAR 0 3
48903: PPUSH
48904: LD_VAR 0 5
48908: PPUSH
48909: CALL_OW 325
48913: IFFALSE 48940
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
48915: LD_ADDR_VAR 0 2
48919: PUSH
48920: LD_INT 5
48922: PUSH
48923: LD_INT 8
48925: PUSH
48926: LD_INT 9
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: LIST
48933: PUSH
48934: LD_VAR 0 4
48938: ARRAY
48939: ST_TO_ADDR
// end ;
48940: LD_VAR 0 2
48944: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
48945: LD_INT 0
48947: PPUSH
48948: PPUSH
48949: PPUSH
// if not mines then
48950: LD_VAR 0 2
48954: NOT
48955: IFFALSE 48959
// exit ;
48957: GO 49103
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
48959: LD_ADDR_VAR 0 5
48963: PUSH
48964: LD_INT 81
48966: PUSH
48967: LD_VAR 0 1
48971: PUSH
48972: EMPTY
48973: LIST
48974: LIST
48975: PUSH
48976: LD_INT 3
48978: PUSH
48979: LD_INT 21
48981: PUSH
48982: LD_INT 3
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: EMPTY
48994: LIST
48995: LIST
48996: PPUSH
48997: CALL_OW 69
49001: ST_TO_ADDR
// for i in mines do
49002: LD_ADDR_VAR 0 4
49006: PUSH
49007: LD_VAR 0 2
49011: PUSH
49012: FOR_IN
49013: IFFALSE 49101
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
49015: LD_VAR 0 4
49019: PUSH
49020: LD_INT 1
49022: ARRAY
49023: PPUSH
49024: LD_VAR 0 4
49028: PUSH
49029: LD_INT 2
49031: ARRAY
49032: PPUSH
49033: CALL_OW 458
49037: NOT
49038: IFFALSE 49042
// continue ;
49040: GO 49012
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
49042: LD_VAR 0 4
49046: PUSH
49047: LD_INT 1
49049: ARRAY
49050: PPUSH
49051: LD_VAR 0 4
49055: PUSH
49056: LD_INT 2
49058: ARRAY
49059: PPUSH
49060: CALL_OW 428
49064: PUSH
49065: LD_VAR 0 5
49069: IN
49070: IFFALSE 49099
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
49072: LD_VAR 0 4
49076: PUSH
49077: LD_INT 1
49079: ARRAY
49080: PPUSH
49081: LD_VAR 0 4
49085: PUSH
49086: LD_INT 2
49088: ARRAY
49089: PPUSH
49090: LD_VAR 0 1
49094: PPUSH
49095: CALL_OW 456
// end ;
49099: GO 49012
49101: POP
49102: POP
// end ;
49103: LD_VAR 0 3
49107: RET
// export function Count ( array ) ; var i ; begin
49108: LD_INT 0
49110: PPUSH
49111: PPUSH
// result := 0 ;
49112: LD_ADDR_VAR 0 2
49116: PUSH
49117: LD_INT 0
49119: ST_TO_ADDR
// for i in array do
49120: LD_ADDR_VAR 0 3
49124: PUSH
49125: LD_VAR 0 1
49129: PUSH
49130: FOR_IN
49131: IFFALSE 49155
// if i then
49133: LD_VAR 0 3
49137: IFFALSE 49153
// result := result + 1 ;
49139: LD_ADDR_VAR 0 2
49143: PUSH
49144: LD_VAR 0 2
49148: PUSH
49149: LD_INT 1
49151: PLUS
49152: ST_TO_ADDR
49153: GO 49130
49155: POP
49156: POP
// end ;
49157: LD_VAR 0 2
49161: RET
// export function IsEmpty ( building ) ; begin
49162: LD_INT 0
49164: PPUSH
// if not building then
49165: LD_VAR 0 1
49169: NOT
49170: IFFALSE 49174
// exit ;
49172: GO 49217
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
49174: LD_ADDR_VAR 0 2
49178: PUSH
49179: LD_VAR 0 1
49183: PUSH
49184: LD_INT 22
49186: PUSH
49187: LD_VAR 0 1
49191: PPUSH
49192: CALL_OW 255
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 58
49203: PUSH
49204: EMPTY
49205: LIST
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PPUSH
49211: CALL_OW 69
49215: IN
49216: ST_TO_ADDR
// end ;
49217: LD_VAR 0 2
49221: RET
// export function IsNotFull ( building ) ; begin
49222: LD_INT 0
49224: PPUSH
// if not building then
49225: LD_VAR 0 1
49229: NOT
49230: IFFALSE 49234
// exit ;
49232: GO 49253
// result := UnitsInside ( building ) < 6 ;
49234: LD_ADDR_VAR 0 2
49238: PUSH
49239: LD_VAR 0 1
49243: PPUSH
49244: CALL_OW 313
49248: PUSH
49249: LD_INT 6
49251: LESS
49252: ST_TO_ADDR
// end ;
49253: LD_VAR 0 2
49257: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
49258: LD_INT 0
49260: PPUSH
49261: PPUSH
49262: PPUSH
49263: PPUSH
// tmp := [ ] ;
49264: LD_ADDR_VAR 0 3
49268: PUSH
49269: EMPTY
49270: ST_TO_ADDR
// list := [ ] ;
49271: LD_ADDR_VAR 0 5
49275: PUSH
49276: EMPTY
49277: ST_TO_ADDR
// for i = 16 to 25 do
49278: LD_ADDR_VAR 0 4
49282: PUSH
49283: DOUBLE
49284: LD_INT 16
49286: DEC
49287: ST_TO_ADDR
49288: LD_INT 25
49290: PUSH
49291: FOR_TO
49292: IFFALSE 49365
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
49294: LD_ADDR_VAR 0 3
49298: PUSH
49299: LD_VAR 0 3
49303: PUSH
49304: LD_INT 22
49306: PUSH
49307: LD_VAR 0 1
49311: PPUSH
49312: CALL_OW 255
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 91
49323: PUSH
49324: LD_VAR 0 1
49328: PUSH
49329: LD_INT 6
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 30
49339: PUSH
49340: LD_VAR 0 4
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: EMPTY
49350: LIST
49351: LIST
49352: LIST
49353: PUSH
49354: EMPTY
49355: LIST
49356: PPUSH
49357: CALL_OW 69
49361: ADD
49362: ST_TO_ADDR
49363: GO 49291
49365: POP
49366: POP
// for i = 1 to tmp do
49367: LD_ADDR_VAR 0 4
49371: PUSH
49372: DOUBLE
49373: LD_INT 1
49375: DEC
49376: ST_TO_ADDR
49377: LD_VAR 0 3
49381: PUSH
49382: FOR_TO
49383: IFFALSE 49471
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
49385: LD_ADDR_VAR 0 5
49389: PUSH
49390: LD_VAR 0 5
49394: PUSH
49395: LD_VAR 0 3
49399: PUSH
49400: LD_VAR 0 4
49404: ARRAY
49405: PPUSH
49406: CALL_OW 266
49410: PUSH
49411: LD_VAR 0 3
49415: PUSH
49416: LD_VAR 0 4
49420: ARRAY
49421: PPUSH
49422: CALL_OW 250
49426: PUSH
49427: LD_VAR 0 3
49431: PUSH
49432: LD_VAR 0 4
49436: ARRAY
49437: PPUSH
49438: CALL_OW 251
49442: PUSH
49443: LD_VAR 0 3
49447: PUSH
49448: LD_VAR 0 4
49452: ARRAY
49453: PPUSH
49454: CALL_OW 254
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: PUSH
49465: EMPTY
49466: LIST
49467: ADD
49468: ST_TO_ADDR
49469: GO 49382
49471: POP
49472: POP
// result := list ;
49473: LD_ADDR_VAR 0 2
49477: PUSH
49478: LD_VAR 0 5
49482: ST_TO_ADDR
// end ;
49483: LD_VAR 0 2
49487: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
49488: LD_INT 0
49490: PPUSH
49491: PPUSH
49492: PPUSH
49493: PPUSH
49494: PPUSH
49495: PPUSH
49496: PPUSH
// if not factory then
49497: LD_VAR 0 1
49501: NOT
49502: IFFALSE 49506
// exit ;
49504: GO 50099
// if control = control_apeman then
49506: LD_VAR 0 4
49510: PUSH
49511: LD_INT 5
49513: EQUAL
49514: IFFALSE 49623
// begin tmp := UnitsInside ( factory ) ;
49516: LD_ADDR_VAR 0 8
49520: PUSH
49521: LD_VAR 0 1
49525: PPUSH
49526: CALL_OW 313
49530: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
49531: LD_VAR 0 8
49535: PPUSH
49536: LD_INT 25
49538: PUSH
49539: LD_INT 12
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PPUSH
49546: CALL_OW 72
49550: NOT
49551: IFFALSE 49561
// control := control_manual ;
49553: LD_ADDR_VAR 0 4
49557: PUSH
49558: LD_INT 1
49560: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
49561: LD_ADDR_VAR 0 8
49565: PUSH
49566: LD_VAR 0 1
49570: PPUSH
49571: CALL 49258 0 1
49575: ST_TO_ADDR
// if tmp then
49576: LD_VAR 0 8
49580: IFFALSE 49623
// begin for i in tmp do
49582: LD_ADDR_VAR 0 7
49586: PUSH
49587: LD_VAR 0 8
49591: PUSH
49592: FOR_IN
49593: IFFALSE 49621
// if i [ 1 ] = b_ext_radio then
49595: LD_VAR 0 7
49599: PUSH
49600: LD_INT 1
49602: ARRAY
49603: PUSH
49604: LD_INT 22
49606: EQUAL
49607: IFFALSE 49619
// begin control := control_remote ;
49609: LD_ADDR_VAR 0 4
49613: PUSH
49614: LD_INT 2
49616: ST_TO_ADDR
// break ;
49617: GO 49621
// end ;
49619: GO 49592
49621: POP
49622: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
49623: LD_VAR 0 1
49627: PPUSH
49628: LD_VAR 0 2
49632: PPUSH
49633: LD_VAR 0 3
49637: PPUSH
49638: LD_VAR 0 4
49642: PPUSH
49643: LD_VAR 0 5
49647: PPUSH
49648: CALL_OW 448
49652: IFFALSE 49687
// begin result := [ chassis , engine , control , weapon ] ;
49654: LD_ADDR_VAR 0 6
49658: PUSH
49659: LD_VAR 0 2
49663: PUSH
49664: LD_VAR 0 3
49668: PUSH
49669: LD_VAR 0 4
49673: PUSH
49674: LD_VAR 0 5
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: LIST
49683: LIST
49684: ST_TO_ADDR
// exit ;
49685: GO 50099
// end ; _chassis := AvailableChassisList ( factory ) ;
49687: LD_ADDR_VAR 0 9
49691: PUSH
49692: LD_VAR 0 1
49696: PPUSH
49697: CALL_OW 475
49701: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
49702: LD_ADDR_VAR 0 11
49706: PUSH
49707: LD_VAR 0 1
49711: PPUSH
49712: CALL_OW 476
49716: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
49717: LD_ADDR_VAR 0 12
49721: PUSH
49722: LD_VAR 0 1
49726: PPUSH
49727: CALL_OW 477
49731: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
49732: LD_ADDR_VAR 0 10
49736: PUSH
49737: LD_VAR 0 1
49741: PPUSH
49742: CALL_OW 478
49746: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
49747: LD_VAR 0 9
49751: NOT
49752: PUSH
49753: LD_VAR 0 11
49757: NOT
49758: OR
49759: PUSH
49760: LD_VAR 0 12
49764: NOT
49765: OR
49766: PUSH
49767: LD_VAR 0 10
49771: NOT
49772: OR
49773: IFFALSE 49808
// begin result := [ chassis , engine , control , weapon ] ;
49775: LD_ADDR_VAR 0 6
49779: PUSH
49780: LD_VAR 0 2
49784: PUSH
49785: LD_VAR 0 3
49789: PUSH
49790: LD_VAR 0 4
49794: PUSH
49795: LD_VAR 0 5
49799: PUSH
49800: EMPTY
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: ST_TO_ADDR
// exit ;
49806: GO 50099
// end ; if not chassis in _chassis then
49808: LD_VAR 0 2
49812: PUSH
49813: LD_VAR 0 9
49817: IN
49818: NOT
49819: IFFALSE 49845
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
49821: LD_ADDR_VAR 0 2
49825: PUSH
49826: LD_VAR 0 9
49830: PUSH
49831: LD_INT 1
49833: PPUSH
49834: LD_VAR 0 9
49838: PPUSH
49839: CALL_OW 12
49843: ARRAY
49844: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
49845: LD_VAR 0 2
49849: PPUSH
49850: LD_VAR 0 3
49854: PPUSH
49855: CALL 50104 0 2
49859: NOT
49860: IFFALSE 49919
// repeat engine := _engine [ 1 ] ;
49862: LD_ADDR_VAR 0 3
49866: PUSH
49867: LD_VAR 0 11
49871: PUSH
49872: LD_INT 1
49874: ARRAY
49875: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
49876: LD_ADDR_VAR 0 11
49880: PUSH
49881: LD_VAR 0 11
49885: PPUSH
49886: LD_INT 1
49888: PPUSH
49889: CALL_OW 3
49893: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
49894: LD_VAR 0 2
49898: PPUSH
49899: LD_VAR 0 3
49903: PPUSH
49904: CALL 50104 0 2
49908: PUSH
49909: LD_VAR 0 11
49913: PUSH
49914: EMPTY
49915: EQUAL
49916: OR
49917: IFFALSE 49862
// if not control in _control then
49919: LD_VAR 0 4
49923: PUSH
49924: LD_VAR 0 12
49928: IN
49929: NOT
49930: IFFALSE 49956
// control := _control [ rand ( 1 , _control ) ] ;
49932: LD_ADDR_VAR 0 4
49936: PUSH
49937: LD_VAR 0 12
49941: PUSH
49942: LD_INT 1
49944: PPUSH
49945: LD_VAR 0 12
49949: PPUSH
49950: CALL_OW 12
49954: ARRAY
49955: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
49956: LD_VAR 0 2
49960: PPUSH
49961: LD_VAR 0 5
49965: PPUSH
49966: CALL 50324 0 2
49970: NOT
49971: IFFALSE 50030
// repeat weapon := _weapon [ 1 ] ;
49973: LD_ADDR_VAR 0 5
49977: PUSH
49978: LD_VAR 0 10
49982: PUSH
49983: LD_INT 1
49985: ARRAY
49986: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
49987: LD_ADDR_VAR 0 10
49991: PUSH
49992: LD_VAR 0 10
49996: PPUSH
49997: LD_INT 1
49999: PPUSH
50000: CALL_OW 3
50004: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
50005: LD_VAR 0 2
50009: PPUSH
50010: LD_VAR 0 5
50014: PPUSH
50015: CALL 50324 0 2
50019: PUSH
50020: LD_VAR 0 10
50024: PUSH
50025: EMPTY
50026: EQUAL
50027: OR
50028: IFFALSE 49973
// result := [ ] ;
50030: LD_ADDR_VAR 0 6
50034: PUSH
50035: EMPTY
50036: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
50037: LD_VAR 0 1
50041: PPUSH
50042: LD_VAR 0 2
50046: PPUSH
50047: LD_VAR 0 3
50051: PPUSH
50052: LD_VAR 0 4
50056: PPUSH
50057: LD_VAR 0 5
50061: PPUSH
50062: CALL_OW 448
50066: IFFALSE 50099
// result := [ chassis , engine , control , weapon ] ;
50068: LD_ADDR_VAR 0 6
50072: PUSH
50073: LD_VAR 0 2
50077: PUSH
50078: LD_VAR 0 3
50082: PUSH
50083: LD_VAR 0 4
50087: PUSH
50088: LD_VAR 0 5
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: LIST
50097: LIST
50098: ST_TO_ADDR
// end ;
50099: LD_VAR 0 6
50103: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
50104: LD_INT 0
50106: PPUSH
// if not chassis or not engine then
50107: LD_VAR 0 1
50111: NOT
50112: PUSH
50113: LD_VAR 0 2
50117: NOT
50118: OR
50119: IFFALSE 50123
// exit ;
50121: GO 50319
// case engine of engine_solar :
50123: LD_VAR 0 2
50127: PUSH
50128: LD_INT 2
50130: DOUBLE
50131: EQUAL
50132: IFTRUE 50136
50134: GO 50174
50136: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
50137: LD_ADDR_VAR 0 3
50141: PUSH
50142: LD_INT 11
50144: PUSH
50145: LD_INT 12
50147: PUSH
50148: LD_INT 13
50150: PUSH
50151: LD_INT 14
50153: PUSH
50154: LD_INT 1
50156: PUSH
50157: LD_INT 2
50159: PUSH
50160: LD_INT 3
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: ST_TO_ADDR
50172: GO 50303
50174: LD_INT 1
50176: DOUBLE
50177: EQUAL
50178: IFTRUE 50182
50180: GO 50244
50182: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
50183: LD_ADDR_VAR 0 3
50187: PUSH
50188: LD_INT 11
50190: PUSH
50191: LD_INT 12
50193: PUSH
50194: LD_INT 13
50196: PUSH
50197: LD_INT 14
50199: PUSH
50200: LD_INT 1
50202: PUSH
50203: LD_INT 2
50205: PUSH
50206: LD_INT 3
50208: PUSH
50209: LD_INT 4
50211: PUSH
50212: LD_INT 5
50214: PUSH
50215: LD_INT 21
50217: PUSH
50218: LD_INT 23
50220: PUSH
50221: LD_INT 22
50223: PUSH
50224: LD_INT 24
50226: PUSH
50227: EMPTY
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: ST_TO_ADDR
50242: GO 50303
50244: LD_INT 3
50246: DOUBLE
50247: EQUAL
50248: IFTRUE 50252
50250: GO 50302
50252: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
50253: LD_ADDR_VAR 0 3
50257: PUSH
50258: LD_INT 13
50260: PUSH
50261: LD_INT 14
50263: PUSH
50264: LD_INT 2
50266: PUSH
50267: LD_INT 3
50269: PUSH
50270: LD_INT 4
50272: PUSH
50273: LD_INT 5
50275: PUSH
50276: LD_INT 21
50278: PUSH
50279: LD_INT 22
50281: PUSH
50282: LD_INT 23
50284: PUSH
50285: LD_INT 24
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: LIST
50292: LIST
50293: LIST
50294: LIST
50295: LIST
50296: LIST
50297: LIST
50298: LIST
50299: ST_TO_ADDR
50300: GO 50303
50302: POP
// result := ( chassis in result ) ;
50303: LD_ADDR_VAR 0 3
50307: PUSH
50308: LD_VAR 0 1
50312: PUSH
50313: LD_VAR 0 3
50317: IN
50318: ST_TO_ADDR
// end ;
50319: LD_VAR 0 3
50323: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
50324: LD_INT 0
50326: PPUSH
// if not chassis or not weapon then
50327: LD_VAR 0 1
50331: NOT
50332: PUSH
50333: LD_VAR 0 2
50337: NOT
50338: OR
50339: IFFALSE 50343
// exit ;
50341: GO 51405
// case weapon of us_machine_gun :
50343: LD_VAR 0 2
50347: PUSH
50348: LD_INT 2
50350: DOUBLE
50351: EQUAL
50352: IFTRUE 50356
50354: GO 50386
50356: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
50357: LD_ADDR_VAR 0 3
50361: PUSH
50362: LD_INT 1
50364: PUSH
50365: LD_INT 2
50367: PUSH
50368: LD_INT 3
50370: PUSH
50371: LD_INT 4
50373: PUSH
50374: LD_INT 5
50376: PUSH
50377: EMPTY
50378: LIST
50379: LIST
50380: LIST
50381: LIST
50382: LIST
50383: ST_TO_ADDR
50384: GO 51389
50386: LD_INT 3
50388: DOUBLE
50389: EQUAL
50390: IFTRUE 50394
50392: GO 50424
50394: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
50395: LD_ADDR_VAR 0 3
50399: PUSH
50400: LD_INT 1
50402: PUSH
50403: LD_INT 2
50405: PUSH
50406: LD_INT 3
50408: PUSH
50409: LD_INT 4
50411: PUSH
50412: LD_INT 5
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: ST_TO_ADDR
50422: GO 51389
50424: LD_INT 11
50426: DOUBLE
50427: EQUAL
50428: IFTRUE 50432
50430: GO 50462
50432: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
50433: LD_ADDR_VAR 0 3
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: LD_INT 2
50443: PUSH
50444: LD_INT 3
50446: PUSH
50447: LD_INT 4
50449: PUSH
50450: LD_INT 5
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: ST_TO_ADDR
50460: GO 51389
50462: LD_INT 4
50464: DOUBLE
50465: EQUAL
50466: IFTRUE 50470
50468: GO 50496
50470: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
50471: LD_ADDR_VAR 0 3
50475: PUSH
50476: LD_INT 2
50478: PUSH
50479: LD_INT 3
50481: PUSH
50482: LD_INT 4
50484: PUSH
50485: LD_INT 5
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: LIST
50492: LIST
50493: ST_TO_ADDR
50494: GO 51389
50496: LD_INT 5
50498: DOUBLE
50499: EQUAL
50500: IFTRUE 50504
50502: GO 50530
50504: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
50505: LD_ADDR_VAR 0 3
50509: PUSH
50510: LD_INT 2
50512: PUSH
50513: LD_INT 3
50515: PUSH
50516: LD_INT 4
50518: PUSH
50519: LD_INT 5
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: LIST
50526: LIST
50527: ST_TO_ADDR
50528: GO 51389
50530: LD_INT 9
50532: DOUBLE
50533: EQUAL
50534: IFTRUE 50538
50536: GO 50564
50538: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
50539: LD_ADDR_VAR 0 3
50543: PUSH
50544: LD_INT 2
50546: PUSH
50547: LD_INT 3
50549: PUSH
50550: LD_INT 4
50552: PUSH
50553: LD_INT 5
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: ST_TO_ADDR
50562: GO 51389
50564: LD_INT 7
50566: DOUBLE
50567: EQUAL
50568: IFTRUE 50572
50570: GO 50598
50572: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
50573: LD_ADDR_VAR 0 3
50577: PUSH
50578: LD_INT 2
50580: PUSH
50581: LD_INT 3
50583: PUSH
50584: LD_INT 4
50586: PUSH
50587: LD_INT 5
50589: PUSH
50590: EMPTY
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: ST_TO_ADDR
50596: GO 51389
50598: LD_INT 12
50600: DOUBLE
50601: EQUAL
50602: IFTRUE 50606
50604: GO 50632
50606: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
50607: LD_ADDR_VAR 0 3
50611: PUSH
50612: LD_INT 2
50614: PUSH
50615: LD_INT 3
50617: PUSH
50618: LD_INT 4
50620: PUSH
50621: LD_INT 5
50623: PUSH
50624: EMPTY
50625: LIST
50626: LIST
50627: LIST
50628: LIST
50629: ST_TO_ADDR
50630: GO 51389
50632: LD_INT 13
50634: DOUBLE
50635: EQUAL
50636: IFTRUE 50640
50638: GO 50666
50640: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
50641: LD_ADDR_VAR 0 3
50645: PUSH
50646: LD_INT 2
50648: PUSH
50649: LD_INT 3
50651: PUSH
50652: LD_INT 4
50654: PUSH
50655: LD_INT 5
50657: PUSH
50658: EMPTY
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: ST_TO_ADDR
50664: GO 51389
50666: LD_INT 14
50668: DOUBLE
50669: EQUAL
50670: IFTRUE 50674
50672: GO 50692
50674: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
50675: LD_ADDR_VAR 0 3
50679: PUSH
50680: LD_INT 4
50682: PUSH
50683: LD_INT 5
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: ST_TO_ADDR
50690: GO 51389
50692: LD_INT 6
50694: DOUBLE
50695: EQUAL
50696: IFTRUE 50700
50698: GO 50718
50700: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
50701: LD_ADDR_VAR 0 3
50705: PUSH
50706: LD_INT 4
50708: PUSH
50709: LD_INT 5
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: ST_TO_ADDR
50716: GO 51389
50718: LD_INT 10
50720: DOUBLE
50721: EQUAL
50722: IFTRUE 50726
50724: GO 50744
50726: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
50727: LD_ADDR_VAR 0 3
50731: PUSH
50732: LD_INT 4
50734: PUSH
50735: LD_INT 5
50737: PUSH
50738: EMPTY
50739: LIST
50740: LIST
50741: ST_TO_ADDR
50742: GO 51389
50744: LD_INT 22
50746: DOUBLE
50747: EQUAL
50748: IFTRUE 50752
50750: GO 50778
50752: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
50753: LD_ADDR_VAR 0 3
50757: PUSH
50758: LD_INT 11
50760: PUSH
50761: LD_INT 12
50763: PUSH
50764: LD_INT 13
50766: PUSH
50767: LD_INT 14
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: ST_TO_ADDR
50776: GO 51389
50778: LD_INT 23
50780: DOUBLE
50781: EQUAL
50782: IFTRUE 50786
50784: GO 50812
50786: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
50787: LD_ADDR_VAR 0 3
50791: PUSH
50792: LD_INT 11
50794: PUSH
50795: LD_INT 12
50797: PUSH
50798: LD_INT 13
50800: PUSH
50801: LD_INT 14
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: ST_TO_ADDR
50810: GO 51389
50812: LD_INT 24
50814: DOUBLE
50815: EQUAL
50816: IFTRUE 50820
50818: GO 50846
50820: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
50821: LD_ADDR_VAR 0 3
50825: PUSH
50826: LD_INT 11
50828: PUSH
50829: LD_INT 12
50831: PUSH
50832: LD_INT 13
50834: PUSH
50835: LD_INT 14
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: ST_TO_ADDR
50844: GO 51389
50846: LD_INT 30
50848: DOUBLE
50849: EQUAL
50850: IFTRUE 50854
50852: GO 50880
50854: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
50855: LD_ADDR_VAR 0 3
50859: PUSH
50860: LD_INT 11
50862: PUSH
50863: LD_INT 12
50865: PUSH
50866: LD_INT 13
50868: PUSH
50869: LD_INT 14
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: LIST
50876: LIST
50877: ST_TO_ADDR
50878: GO 51389
50880: LD_INT 25
50882: DOUBLE
50883: EQUAL
50884: IFTRUE 50888
50886: GO 50906
50888: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
50889: LD_ADDR_VAR 0 3
50893: PUSH
50894: LD_INT 13
50896: PUSH
50897: LD_INT 14
50899: PUSH
50900: EMPTY
50901: LIST
50902: LIST
50903: ST_TO_ADDR
50904: GO 51389
50906: LD_INT 27
50908: DOUBLE
50909: EQUAL
50910: IFTRUE 50914
50912: GO 50932
50914: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
50915: LD_ADDR_VAR 0 3
50919: PUSH
50920: LD_INT 13
50922: PUSH
50923: LD_INT 14
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: ST_TO_ADDR
50930: GO 51389
50932: LD_EXP 74
50936: DOUBLE
50937: EQUAL
50938: IFTRUE 50942
50940: GO 50968
50942: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
50943: LD_ADDR_VAR 0 3
50947: PUSH
50948: LD_INT 11
50950: PUSH
50951: LD_INT 12
50953: PUSH
50954: LD_INT 13
50956: PUSH
50957: LD_INT 14
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: ST_TO_ADDR
50966: GO 51389
50968: LD_INT 28
50970: DOUBLE
50971: EQUAL
50972: IFTRUE 50976
50974: GO 50994
50976: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
50977: LD_ADDR_VAR 0 3
50981: PUSH
50982: LD_INT 13
50984: PUSH
50985: LD_INT 14
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: ST_TO_ADDR
50992: GO 51389
50994: LD_INT 29
50996: DOUBLE
50997: EQUAL
50998: IFTRUE 51002
51000: GO 51020
51002: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
51003: LD_ADDR_VAR 0 3
51007: PUSH
51008: LD_INT 13
51010: PUSH
51011: LD_INT 14
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: ST_TO_ADDR
51018: GO 51389
51020: LD_INT 31
51022: DOUBLE
51023: EQUAL
51024: IFTRUE 51028
51026: GO 51046
51028: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
51029: LD_ADDR_VAR 0 3
51033: PUSH
51034: LD_INT 13
51036: PUSH
51037: LD_INT 14
51039: PUSH
51040: EMPTY
51041: LIST
51042: LIST
51043: ST_TO_ADDR
51044: GO 51389
51046: LD_INT 26
51048: DOUBLE
51049: EQUAL
51050: IFTRUE 51054
51052: GO 51072
51054: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
51055: LD_ADDR_VAR 0 3
51059: PUSH
51060: LD_INT 13
51062: PUSH
51063: LD_INT 14
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: ST_TO_ADDR
51070: GO 51389
51072: LD_INT 42
51074: DOUBLE
51075: EQUAL
51076: IFTRUE 51080
51078: GO 51106
51080: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
51081: LD_ADDR_VAR 0 3
51085: PUSH
51086: LD_INT 21
51088: PUSH
51089: LD_INT 22
51091: PUSH
51092: LD_INT 23
51094: PUSH
51095: LD_INT 24
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: LIST
51102: LIST
51103: ST_TO_ADDR
51104: GO 51389
51106: LD_INT 43
51108: DOUBLE
51109: EQUAL
51110: IFTRUE 51114
51112: GO 51140
51114: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
51115: LD_ADDR_VAR 0 3
51119: PUSH
51120: LD_INT 21
51122: PUSH
51123: LD_INT 22
51125: PUSH
51126: LD_INT 23
51128: PUSH
51129: LD_INT 24
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: LIST
51136: LIST
51137: ST_TO_ADDR
51138: GO 51389
51140: LD_INT 44
51142: DOUBLE
51143: EQUAL
51144: IFTRUE 51148
51146: GO 51174
51148: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
51149: LD_ADDR_VAR 0 3
51153: PUSH
51154: LD_INT 21
51156: PUSH
51157: LD_INT 22
51159: PUSH
51160: LD_INT 23
51162: PUSH
51163: LD_INT 24
51165: PUSH
51166: EMPTY
51167: LIST
51168: LIST
51169: LIST
51170: LIST
51171: ST_TO_ADDR
51172: GO 51389
51174: LD_INT 45
51176: DOUBLE
51177: EQUAL
51178: IFTRUE 51182
51180: GO 51208
51182: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
51183: LD_ADDR_VAR 0 3
51187: PUSH
51188: LD_INT 21
51190: PUSH
51191: LD_INT 22
51193: PUSH
51194: LD_INT 23
51196: PUSH
51197: LD_INT 24
51199: PUSH
51200: EMPTY
51201: LIST
51202: LIST
51203: LIST
51204: LIST
51205: ST_TO_ADDR
51206: GO 51389
51208: LD_INT 49
51210: DOUBLE
51211: EQUAL
51212: IFTRUE 51216
51214: GO 51242
51216: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
51217: LD_ADDR_VAR 0 3
51221: PUSH
51222: LD_INT 21
51224: PUSH
51225: LD_INT 22
51227: PUSH
51228: LD_INT 23
51230: PUSH
51231: LD_INT 24
51233: PUSH
51234: EMPTY
51235: LIST
51236: LIST
51237: LIST
51238: LIST
51239: ST_TO_ADDR
51240: GO 51389
51242: LD_INT 51
51244: DOUBLE
51245: EQUAL
51246: IFTRUE 51250
51248: GO 51276
51250: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
51251: LD_ADDR_VAR 0 3
51255: PUSH
51256: LD_INT 21
51258: PUSH
51259: LD_INT 22
51261: PUSH
51262: LD_INT 23
51264: PUSH
51265: LD_INT 24
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: ST_TO_ADDR
51274: GO 51389
51276: LD_INT 52
51278: DOUBLE
51279: EQUAL
51280: IFTRUE 51284
51282: GO 51310
51284: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
51285: LD_ADDR_VAR 0 3
51289: PUSH
51290: LD_INT 21
51292: PUSH
51293: LD_INT 22
51295: PUSH
51296: LD_INT 23
51298: PUSH
51299: LD_INT 24
51301: PUSH
51302: EMPTY
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: ST_TO_ADDR
51308: GO 51389
51310: LD_INT 53
51312: DOUBLE
51313: EQUAL
51314: IFTRUE 51318
51316: GO 51336
51318: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
51319: LD_ADDR_VAR 0 3
51323: PUSH
51324: LD_INT 23
51326: PUSH
51327: LD_INT 24
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: ST_TO_ADDR
51334: GO 51389
51336: LD_INT 46
51338: DOUBLE
51339: EQUAL
51340: IFTRUE 51344
51342: GO 51362
51344: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
51345: LD_ADDR_VAR 0 3
51349: PUSH
51350: LD_INT 23
51352: PUSH
51353: LD_INT 24
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: ST_TO_ADDR
51360: GO 51389
51362: LD_INT 47
51364: DOUBLE
51365: EQUAL
51366: IFTRUE 51370
51368: GO 51388
51370: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
51371: LD_ADDR_VAR 0 3
51375: PUSH
51376: LD_INT 23
51378: PUSH
51379: LD_INT 24
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: ST_TO_ADDR
51386: GO 51389
51388: POP
// result := ( chassis in result ) ;
51389: LD_ADDR_VAR 0 3
51393: PUSH
51394: LD_VAR 0 1
51398: PUSH
51399: LD_VAR 0 3
51403: IN
51404: ST_TO_ADDR
// end ;
51405: LD_VAR 0 3
51409: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
51410: LD_INT 0
51412: PPUSH
51413: PPUSH
51414: PPUSH
51415: PPUSH
51416: PPUSH
51417: PPUSH
51418: PPUSH
// result := array ;
51419: LD_ADDR_VAR 0 5
51423: PUSH
51424: LD_VAR 0 1
51428: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
51429: LD_VAR 0 1
51433: NOT
51434: PUSH
51435: LD_VAR 0 2
51439: NOT
51440: OR
51441: PUSH
51442: LD_VAR 0 3
51446: NOT
51447: OR
51448: PUSH
51449: LD_VAR 0 2
51453: PUSH
51454: LD_VAR 0 1
51458: GREATER
51459: OR
51460: PUSH
51461: LD_VAR 0 3
51465: PUSH
51466: LD_VAR 0 1
51470: GREATER
51471: OR
51472: IFFALSE 51476
// exit ;
51474: GO 51772
// if direction then
51476: LD_VAR 0 4
51480: IFFALSE 51544
// begin d := 1 ;
51482: LD_ADDR_VAR 0 9
51486: PUSH
51487: LD_INT 1
51489: ST_TO_ADDR
// if i_from > i_to then
51490: LD_VAR 0 2
51494: PUSH
51495: LD_VAR 0 3
51499: GREATER
51500: IFFALSE 51526
// length := ( array - i_from ) + i_to else
51502: LD_ADDR_VAR 0 11
51506: PUSH
51507: LD_VAR 0 1
51511: PUSH
51512: LD_VAR 0 2
51516: MINUS
51517: PUSH
51518: LD_VAR 0 3
51522: PLUS
51523: ST_TO_ADDR
51524: GO 51542
// length := i_to - i_from ;
51526: LD_ADDR_VAR 0 11
51530: PUSH
51531: LD_VAR 0 3
51535: PUSH
51536: LD_VAR 0 2
51540: MINUS
51541: ST_TO_ADDR
// end else
51542: GO 51605
// begin d := - 1 ;
51544: LD_ADDR_VAR 0 9
51548: PUSH
51549: LD_INT 1
51551: NEG
51552: ST_TO_ADDR
// if i_from > i_to then
51553: LD_VAR 0 2
51557: PUSH
51558: LD_VAR 0 3
51562: GREATER
51563: IFFALSE 51583
// length := i_from - i_to else
51565: LD_ADDR_VAR 0 11
51569: PUSH
51570: LD_VAR 0 2
51574: PUSH
51575: LD_VAR 0 3
51579: MINUS
51580: ST_TO_ADDR
51581: GO 51605
// length := ( array - i_to ) + i_from ;
51583: LD_ADDR_VAR 0 11
51587: PUSH
51588: LD_VAR 0 1
51592: PUSH
51593: LD_VAR 0 3
51597: MINUS
51598: PUSH
51599: LD_VAR 0 2
51603: PLUS
51604: ST_TO_ADDR
// end ; if not length then
51605: LD_VAR 0 11
51609: NOT
51610: IFFALSE 51614
// exit ;
51612: GO 51772
// tmp := array ;
51614: LD_ADDR_VAR 0 10
51618: PUSH
51619: LD_VAR 0 1
51623: ST_TO_ADDR
// for i = 1 to length do
51624: LD_ADDR_VAR 0 6
51628: PUSH
51629: DOUBLE
51630: LD_INT 1
51632: DEC
51633: ST_TO_ADDR
51634: LD_VAR 0 11
51638: PUSH
51639: FOR_TO
51640: IFFALSE 51760
// begin for j = 1 to array do
51642: LD_ADDR_VAR 0 7
51646: PUSH
51647: DOUBLE
51648: LD_INT 1
51650: DEC
51651: ST_TO_ADDR
51652: LD_VAR 0 1
51656: PUSH
51657: FOR_TO
51658: IFFALSE 51746
// begin k := j + d ;
51660: LD_ADDR_VAR 0 8
51664: PUSH
51665: LD_VAR 0 7
51669: PUSH
51670: LD_VAR 0 9
51674: PLUS
51675: ST_TO_ADDR
// if k > array then
51676: LD_VAR 0 8
51680: PUSH
51681: LD_VAR 0 1
51685: GREATER
51686: IFFALSE 51696
// k := 1 ;
51688: LD_ADDR_VAR 0 8
51692: PUSH
51693: LD_INT 1
51695: ST_TO_ADDR
// if not k then
51696: LD_VAR 0 8
51700: NOT
51701: IFFALSE 51713
// k := array ;
51703: LD_ADDR_VAR 0 8
51707: PUSH
51708: LD_VAR 0 1
51712: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
51713: LD_ADDR_VAR 0 10
51717: PUSH
51718: LD_VAR 0 10
51722: PPUSH
51723: LD_VAR 0 8
51727: PPUSH
51728: LD_VAR 0 1
51732: PUSH
51733: LD_VAR 0 7
51737: ARRAY
51738: PPUSH
51739: CALL_OW 1
51743: ST_TO_ADDR
// end ;
51744: GO 51657
51746: POP
51747: POP
// array := tmp ;
51748: LD_ADDR_VAR 0 1
51752: PUSH
51753: LD_VAR 0 10
51757: ST_TO_ADDR
// end ;
51758: GO 51639
51760: POP
51761: POP
// result := array ;
51762: LD_ADDR_VAR 0 5
51766: PUSH
51767: LD_VAR 0 1
51771: ST_TO_ADDR
// end ;
51772: LD_VAR 0 5
51776: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
51777: LD_INT 0
51779: PPUSH
51780: PPUSH
// result := 0 ;
51781: LD_ADDR_VAR 0 3
51785: PUSH
51786: LD_INT 0
51788: ST_TO_ADDR
// if not array or not value in array then
51789: LD_VAR 0 1
51793: NOT
51794: PUSH
51795: LD_VAR 0 2
51799: PUSH
51800: LD_VAR 0 1
51804: IN
51805: NOT
51806: OR
51807: IFFALSE 51811
// exit ;
51809: GO 51865
// for i = 1 to array do
51811: LD_ADDR_VAR 0 4
51815: PUSH
51816: DOUBLE
51817: LD_INT 1
51819: DEC
51820: ST_TO_ADDR
51821: LD_VAR 0 1
51825: PUSH
51826: FOR_TO
51827: IFFALSE 51863
// if value = array [ i ] then
51829: LD_VAR 0 2
51833: PUSH
51834: LD_VAR 0 1
51838: PUSH
51839: LD_VAR 0 4
51843: ARRAY
51844: EQUAL
51845: IFFALSE 51861
// begin result := i ;
51847: LD_ADDR_VAR 0 3
51851: PUSH
51852: LD_VAR 0 4
51856: ST_TO_ADDR
// exit ;
51857: POP
51858: POP
51859: GO 51865
// end ;
51861: GO 51826
51863: POP
51864: POP
// end ;
51865: LD_VAR 0 3
51869: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
51870: LD_INT 0
51872: PPUSH
// vc_chassis := chassis ;
51873: LD_ADDR_OWVAR 37
51877: PUSH
51878: LD_VAR 0 1
51882: ST_TO_ADDR
// vc_engine := engine ;
51883: LD_ADDR_OWVAR 39
51887: PUSH
51888: LD_VAR 0 2
51892: ST_TO_ADDR
// vc_control := control ;
51893: LD_ADDR_OWVAR 38
51897: PUSH
51898: LD_VAR 0 3
51902: ST_TO_ADDR
// vc_weapon := weapon ;
51903: LD_ADDR_OWVAR 40
51907: PUSH
51908: LD_VAR 0 4
51912: ST_TO_ADDR
// vc_fuel_battery := fuel ;
51913: LD_ADDR_OWVAR 41
51917: PUSH
51918: LD_VAR 0 5
51922: ST_TO_ADDR
// end ;
51923: LD_VAR 0 6
51927: RET
// export function WantPlant ( unit ) ; var task ; begin
51928: LD_INT 0
51930: PPUSH
51931: PPUSH
// result := false ;
51932: LD_ADDR_VAR 0 2
51936: PUSH
51937: LD_INT 0
51939: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
51940: LD_ADDR_VAR 0 3
51944: PUSH
51945: LD_VAR 0 1
51949: PPUSH
51950: CALL_OW 437
51954: ST_TO_ADDR
// if task then
51955: LD_VAR 0 3
51959: IFFALSE 51987
// if task [ 1 ] [ 1 ] = p then
51961: LD_VAR 0 3
51965: PUSH
51966: LD_INT 1
51968: ARRAY
51969: PUSH
51970: LD_INT 1
51972: ARRAY
51973: PUSH
51974: LD_STRING p
51976: EQUAL
51977: IFFALSE 51987
// result := true ;
51979: LD_ADDR_VAR 0 2
51983: PUSH
51984: LD_INT 1
51986: ST_TO_ADDR
// end ;
51987: LD_VAR 0 2
51991: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
51992: LD_INT 0
51994: PPUSH
51995: PPUSH
51996: PPUSH
51997: PPUSH
// if pos < 1 then
51998: LD_VAR 0 2
52002: PUSH
52003: LD_INT 1
52005: LESS
52006: IFFALSE 52010
// exit ;
52008: GO 52313
// if pos = 1 then
52010: LD_VAR 0 2
52014: PUSH
52015: LD_INT 1
52017: EQUAL
52018: IFFALSE 52051
// result := Replace ( arr , pos [ 1 ] , value ) else
52020: LD_ADDR_VAR 0 4
52024: PUSH
52025: LD_VAR 0 1
52029: PPUSH
52030: LD_VAR 0 2
52034: PUSH
52035: LD_INT 1
52037: ARRAY
52038: PPUSH
52039: LD_VAR 0 3
52043: PPUSH
52044: CALL_OW 1
52048: ST_TO_ADDR
52049: GO 52313
// begin tmp := arr ;
52051: LD_ADDR_VAR 0 6
52055: PUSH
52056: LD_VAR 0 1
52060: ST_TO_ADDR
// s_arr := [ tmp ] ;
52061: LD_ADDR_VAR 0 7
52065: PUSH
52066: LD_VAR 0 6
52070: PUSH
52071: EMPTY
52072: LIST
52073: ST_TO_ADDR
// for i = 1 to pos - 1 do
52074: LD_ADDR_VAR 0 5
52078: PUSH
52079: DOUBLE
52080: LD_INT 1
52082: DEC
52083: ST_TO_ADDR
52084: LD_VAR 0 2
52088: PUSH
52089: LD_INT 1
52091: MINUS
52092: PUSH
52093: FOR_TO
52094: IFFALSE 52139
// begin tmp := tmp [ pos [ i ] ] ;
52096: LD_ADDR_VAR 0 6
52100: PUSH
52101: LD_VAR 0 6
52105: PUSH
52106: LD_VAR 0 2
52110: PUSH
52111: LD_VAR 0 5
52115: ARRAY
52116: ARRAY
52117: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
52118: LD_ADDR_VAR 0 7
52122: PUSH
52123: LD_VAR 0 7
52127: PUSH
52128: LD_VAR 0 6
52132: PUSH
52133: EMPTY
52134: LIST
52135: ADD
52136: ST_TO_ADDR
// end ;
52137: GO 52093
52139: POP
52140: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
52141: LD_ADDR_VAR 0 6
52145: PUSH
52146: LD_VAR 0 6
52150: PPUSH
52151: LD_VAR 0 2
52155: PUSH
52156: LD_VAR 0 2
52160: ARRAY
52161: PPUSH
52162: LD_VAR 0 3
52166: PPUSH
52167: CALL_OW 1
52171: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
52172: LD_ADDR_VAR 0 7
52176: PUSH
52177: LD_VAR 0 7
52181: PPUSH
52182: LD_VAR 0 7
52186: PPUSH
52187: LD_VAR 0 6
52191: PPUSH
52192: CALL_OW 1
52196: ST_TO_ADDR
// for i = s_arr downto 2 do
52197: LD_ADDR_VAR 0 5
52201: PUSH
52202: DOUBLE
52203: LD_VAR 0 7
52207: INC
52208: ST_TO_ADDR
52209: LD_INT 2
52211: PUSH
52212: FOR_DOWNTO
52213: IFFALSE 52297
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
52215: LD_ADDR_VAR 0 6
52219: PUSH
52220: LD_VAR 0 7
52224: PUSH
52225: LD_VAR 0 5
52229: PUSH
52230: LD_INT 1
52232: MINUS
52233: ARRAY
52234: PPUSH
52235: LD_VAR 0 2
52239: PUSH
52240: LD_VAR 0 5
52244: PUSH
52245: LD_INT 1
52247: MINUS
52248: ARRAY
52249: PPUSH
52250: LD_VAR 0 7
52254: PUSH
52255: LD_VAR 0 5
52259: ARRAY
52260: PPUSH
52261: CALL_OW 1
52265: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
52266: LD_ADDR_VAR 0 7
52270: PUSH
52271: LD_VAR 0 7
52275: PPUSH
52276: LD_VAR 0 5
52280: PUSH
52281: LD_INT 1
52283: MINUS
52284: PPUSH
52285: LD_VAR 0 6
52289: PPUSH
52290: CALL_OW 1
52294: ST_TO_ADDR
// end ;
52295: GO 52212
52297: POP
52298: POP
// result := s_arr [ 1 ] ;
52299: LD_ADDR_VAR 0 4
52303: PUSH
52304: LD_VAR 0 7
52308: PUSH
52309: LD_INT 1
52311: ARRAY
52312: ST_TO_ADDR
// end ; end ;
52313: LD_VAR 0 4
52317: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
52318: LD_INT 0
52320: PPUSH
52321: PPUSH
// if not list then
52322: LD_VAR 0 1
52326: NOT
52327: IFFALSE 52331
// exit ;
52329: GO 52422
// i := list [ pos1 ] ;
52331: LD_ADDR_VAR 0 5
52335: PUSH
52336: LD_VAR 0 1
52340: PUSH
52341: LD_VAR 0 2
52345: ARRAY
52346: ST_TO_ADDR
// if not i then
52347: LD_VAR 0 5
52351: NOT
52352: IFFALSE 52356
// exit ;
52354: GO 52422
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
52356: LD_ADDR_VAR 0 1
52360: PUSH
52361: LD_VAR 0 1
52365: PPUSH
52366: LD_VAR 0 2
52370: PPUSH
52371: LD_VAR 0 1
52375: PUSH
52376: LD_VAR 0 3
52380: ARRAY
52381: PPUSH
52382: CALL_OW 1
52386: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
52387: LD_ADDR_VAR 0 1
52391: PUSH
52392: LD_VAR 0 1
52396: PPUSH
52397: LD_VAR 0 3
52401: PPUSH
52402: LD_VAR 0 5
52406: PPUSH
52407: CALL_OW 1
52411: ST_TO_ADDR
// result := list ;
52412: LD_ADDR_VAR 0 4
52416: PUSH
52417: LD_VAR 0 1
52421: ST_TO_ADDR
// end ;
52422: LD_VAR 0 4
52426: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
52427: LD_INT 0
52429: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
52430: LD_ADDR_VAR 0 5
52434: PUSH
52435: LD_VAR 0 1
52439: PPUSH
52440: CALL_OW 250
52444: PPUSH
52445: LD_VAR 0 1
52449: PPUSH
52450: CALL_OW 251
52454: PPUSH
52455: LD_VAR 0 2
52459: PPUSH
52460: LD_VAR 0 3
52464: PPUSH
52465: LD_VAR 0 4
52469: PPUSH
52470: CALL 52480 0 5
52474: ST_TO_ADDR
// end ;
52475: LD_VAR 0 5
52479: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
52480: LD_INT 0
52482: PPUSH
52483: PPUSH
52484: PPUSH
52485: PPUSH
// if not list then
52486: LD_VAR 0 3
52490: NOT
52491: IFFALSE 52495
// exit ;
52493: GO 52883
// result := [ ] ;
52495: LD_ADDR_VAR 0 6
52499: PUSH
52500: EMPTY
52501: ST_TO_ADDR
// for i in list do
52502: LD_ADDR_VAR 0 7
52506: PUSH
52507: LD_VAR 0 3
52511: PUSH
52512: FOR_IN
52513: IFFALSE 52715
// begin tmp := GetDistUnitXY ( i , x , y ) ;
52515: LD_ADDR_VAR 0 9
52519: PUSH
52520: LD_VAR 0 7
52524: PPUSH
52525: LD_VAR 0 1
52529: PPUSH
52530: LD_VAR 0 2
52534: PPUSH
52535: CALL_OW 297
52539: ST_TO_ADDR
// if not result then
52540: LD_VAR 0 6
52544: NOT
52545: IFFALSE 52571
// result := [ [ i , tmp ] ] else
52547: LD_ADDR_VAR 0 6
52551: PUSH
52552: LD_VAR 0 7
52556: PUSH
52557: LD_VAR 0 9
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: EMPTY
52567: LIST
52568: ST_TO_ADDR
52569: GO 52713
// begin if result [ result ] [ 2 ] < tmp then
52571: LD_VAR 0 6
52575: PUSH
52576: LD_VAR 0 6
52580: ARRAY
52581: PUSH
52582: LD_INT 2
52584: ARRAY
52585: PUSH
52586: LD_VAR 0 9
52590: LESS
52591: IFFALSE 52633
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
52593: LD_ADDR_VAR 0 6
52597: PUSH
52598: LD_VAR 0 6
52602: PPUSH
52603: LD_VAR 0 6
52607: PUSH
52608: LD_INT 1
52610: PLUS
52611: PPUSH
52612: LD_VAR 0 7
52616: PUSH
52617: LD_VAR 0 9
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PPUSH
52626: CALL_OW 2
52630: ST_TO_ADDR
52631: GO 52713
// for j = 1 to result do
52633: LD_ADDR_VAR 0 8
52637: PUSH
52638: DOUBLE
52639: LD_INT 1
52641: DEC
52642: ST_TO_ADDR
52643: LD_VAR 0 6
52647: PUSH
52648: FOR_TO
52649: IFFALSE 52711
// begin if tmp < result [ j ] [ 2 ] then
52651: LD_VAR 0 9
52655: PUSH
52656: LD_VAR 0 6
52660: PUSH
52661: LD_VAR 0 8
52665: ARRAY
52666: PUSH
52667: LD_INT 2
52669: ARRAY
52670: LESS
52671: IFFALSE 52709
// begin result := Insert ( result , j , [ i , tmp ] ) ;
52673: LD_ADDR_VAR 0 6
52677: PUSH
52678: LD_VAR 0 6
52682: PPUSH
52683: LD_VAR 0 8
52687: PPUSH
52688: LD_VAR 0 7
52692: PUSH
52693: LD_VAR 0 9
52697: PUSH
52698: EMPTY
52699: LIST
52700: LIST
52701: PPUSH
52702: CALL_OW 2
52706: ST_TO_ADDR
// break ;
52707: GO 52711
// end ; end ;
52709: GO 52648
52711: POP
52712: POP
// end ; end ;
52713: GO 52512
52715: POP
52716: POP
// if result and not asc then
52717: LD_VAR 0 6
52721: PUSH
52722: LD_VAR 0 4
52726: NOT
52727: AND
52728: IFFALSE 52803
// begin tmp := result ;
52730: LD_ADDR_VAR 0 9
52734: PUSH
52735: LD_VAR 0 6
52739: ST_TO_ADDR
// for i = tmp downto 1 do
52740: LD_ADDR_VAR 0 7
52744: PUSH
52745: DOUBLE
52746: LD_VAR 0 9
52750: INC
52751: ST_TO_ADDR
52752: LD_INT 1
52754: PUSH
52755: FOR_DOWNTO
52756: IFFALSE 52801
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
52758: LD_ADDR_VAR 0 6
52762: PUSH
52763: LD_VAR 0 6
52767: PPUSH
52768: LD_VAR 0 9
52772: PUSH
52773: LD_VAR 0 7
52777: MINUS
52778: PUSH
52779: LD_INT 1
52781: PLUS
52782: PPUSH
52783: LD_VAR 0 9
52787: PUSH
52788: LD_VAR 0 7
52792: ARRAY
52793: PPUSH
52794: CALL_OW 1
52798: ST_TO_ADDR
52799: GO 52755
52801: POP
52802: POP
// end ; tmp := [ ] ;
52803: LD_ADDR_VAR 0 9
52807: PUSH
52808: EMPTY
52809: ST_TO_ADDR
// if mode then
52810: LD_VAR 0 5
52814: IFFALSE 52883
// begin for i = 1 to result do
52816: LD_ADDR_VAR 0 7
52820: PUSH
52821: DOUBLE
52822: LD_INT 1
52824: DEC
52825: ST_TO_ADDR
52826: LD_VAR 0 6
52830: PUSH
52831: FOR_TO
52832: IFFALSE 52871
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
52834: LD_ADDR_VAR 0 9
52838: PUSH
52839: LD_VAR 0 9
52843: PPUSH
52844: LD_VAR 0 7
52848: PPUSH
52849: LD_VAR 0 6
52853: PUSH
52854: LD_VAR 0 7
52858: ARRAY
52859: PUSH
52860: LD_INT 1
52862: ARRAY
52863: PPUSH
52864: CALL_OW 1
52868: ST_TO_ADDR
52869: GO 52831
52871: POP
52872: POP
// result := tmp ;
52873: LD_ADDR_VAR 0 6
52877: PUSH
52878: LD_VAR 0 9
52882: ST_TO_ADDR
// end ; end ;
52883: LD_VAR 0 6
52887: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
52888: LD_INT 0
52890: PPUSH
52891: PPUSH
52892: PPUSH
52893: PPUSH
52894: PPUSH
52895: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
52896: LD_ADDR_VAR 0 5
52900: PUSH
52901: LD_INT 0
52903: PUSH
52904: LD_INT 0
52906: PUSH
52907: LD_INT 0
52909: PUSH
52910: EMPTY
52911: PUSH
52912: EMPTY
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: ST_TO_ADDR
// if not x or not y then
52918: LD_VAR 0 2
52922: NOT
52923: PUSH
52924: LD_VAR 0 3
52928: NOT
52929: OR
52930: IFFALSE 52934
// exit ;
52932: GO 54586
// if not range then
52934: LD_VAR 0 4
52938: NOT
52939: IFFALSE 52949
// range := 10 ;
52941: LD_ADDR_VAR 0 4
52945: PUSH
52946: LD_INT 10
52948: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
52949: LD_ADDR_VAR 0 8
52953: PUSH
52954: LD_INT 81
52956: PUSH
52957: LD_VAR 0 1
52961: PUSH
52962: EMPTY
52963: LIST
52964: LIST
52965: PUSH
52966: LD_INT 92
52968: PUSH
52969: LD_VAR 0 2
52973: PUSH
52974: LD_VAR 0 3
52978: PUSH
52979: LD_VAR 0 4
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 3
52992: PUSH
52993: LD_INT 21
52995: PUSH
52996: LD_INT 3
52998: PUSH
52999: EMPTY
53000: LIST
53001: LIST
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: LIST
53011: PPUSH
53012: CALL_OW 69
53016: ST_TO_ADDR
// if not tmp then
53017: LD_VAR 0 8
53021: NOT
53022: IFFALSE 53026
// exit ;
53024: GO 54586
// for i in tmp do
53026: LD_ADDR_VAR 0 6
53030: PUSH
53031: LD_VAR 0 8
53035: PUSH
53036: FOR_IN
53037: IFFALSE 54561
// begin points := [ 0 , 0 , 0 ] ;
53039: LD_ADDR_VAR 0 9
53043: PUSH
53044: LD_INT 0
53046: PUSH
53047: LD_INT 0
53049: PUSH
53050: LD_INT 0
53052: PUSH
53053: EMPTY
53054: LIST
53055: LIST
53056: LIST
53057: ST_TO_ADDR
// bpoints := 1 ;
53058: LD_ADDR_VAR 0 10
53062: PUSH
53063: LD_INT 1
53065: ST_TO_ADDR
// case GetType ( i ) of unit_human :
53066: LD_VAR 0 6
53070: PPUSH
53071: CALL_OW 247
53075: PUSH
53076: LD_INT 1
53078: DOUBLE
53079: EQUAL
53080: IFTRUE 53084
53082: GO 53662
53084: POP
// begin if GetClass ( i ) = 1 then
53085: LD_VAR 0 6
53089: PPUSH
53090: CALL_OW 257
53094: PUSH
53095: LD_INT 1
53097: EQUAL
53098: IFFALSE 53119
// points := [ 10 , 5 , 3 ] ;
53100: LD_ADDR_VAR 0 9
53104: PUSH
53105: LD_INT 10
53107: PUSH
53108: LD_INT 5
53110: PUSH
53111: LD_INT 3
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: LIST
53118: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
53119: LD_VAR 0 6
53123: PPUSH
53124: CALL_OW 257
53128: PUSH
53129: LD_INT 2
53131: PUSH
53132: LD_INT 3
53134: PUSH
53135: LD_INT 4
53137: PUSH
53138: EMPTY
53139: LIST
53140: LIST
53141: LIST
53142: IN
53143: IFFALSE 53164
// points := [ 3 , 2 , 1 ] ;
53145: LD_ADDR_VAR 0 9
53149: PUSH
53150: LD_INT 3
53152: PUSH
53153: LD_INT 2
53155: PUSH
53156: LD_INT 1
53158: PUSH
53159: EMPTY
53160: LIST
53161: LIST
53162: LIST
53163: ST_TO_ADDR
// if GetClass ( i ) = 5 then
53164: LD_VAR 0 6
53168: PPUSH
53169: CALL_OW 257
53173: PUSH
53174: LD_INT 5
53176: EQUAL
53177: IFFALSE 53198
// points := [ 130 , 5 , 2 ] ;
53179: LD_ADDR_VAR 0 9
53183: PUSH
53184: LD_INT 130
53186: PUSH
53187: LD_INT 5
53189: PUSH
53190: LD_INT 2
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: LIST
53197: ST_TO_ADDR
// if GetClass ( i ) = 8 then
53198: LD_VAR 0 6
53202: PPUSH
53203: CALL_OW 257
53207: PUSH
53208: LD_INT 8
53210: EQUAL
53211: IFFALSE 53232
// points := [ 35 , 35 , 30 ] ;
53213: LD_ADDR_VAR 0 9
53217: PUSH
53218: LD_INT 35
53220: PUSH
53221: LD_INT 35
53223: PUSH
53224: LD_INT 30
53226: PUSH
53227: EMPTY
53228: LIST
53229: LIST
53230: LIST
53231: ST_TO_ADDR
// if GetClass ( i ) = 9 then
53232: LD_VAR 0 6
53236: PPUSH
53237: CALL_OW 257
53241: PUSH
53242: LD_INT 9
53244: EQUAL
53245: IFFALSE 53266
// points := [ 20 , 55 , 40 ] ;
53247: LD_ADDR_VAR 0 9
53251: PUSH
53252: LD_INT 20
53254: PUSH
53255: LD_INT 55
53257: PUSH
53258: LD_INT 40
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: LIST
53265: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
53266: LD_VAR 0 6
53270: PPUSH
53271: CALL_OW 257
53275: PUSH
53276: LD_INT 12
53278: PUSH
53279: LD_INT 16
53281: PUSH
53282: EMPTY
53283: LIST
53284: LIST
53285: IN
53286: IFFALSE 53307
// points := [ 5 , 3 , 2 ] ;
53288: LD_ADDR_VAR 0 9
53292: PUSH
53293: LD_INT 5
53295: PUSH
53296: LD_INT 3
53298: PUSH
53299: LD_INT 2
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: LIST
53306: ST_TO_ADDR
// if GetClass ( i ) = 17 then
53307: LD_VAR 0 6
53311: PPUSH
53312: CALL_OW 257
53316: PUSH
53317: LD_INT 17
53319: EQUAL
53320: IFFALSE 53341
// points := [ 100 , 50 , 75 ] ;
53322: LD_ADDR_VAR 0 9
53326: PUSH
53327: LD_INT 100
53329: PUSH
53330: LD_INT 50
53332: PUSH
53333: LD_INT 75
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: LIST
53340: ST_TO_ADDR
// if GetClass ( i ) = 15 then
53341: LD_VAR 0 6
53345: PPUSH
53346: CALL_OW 257
53350: PUSH
53351: LD_INT 15
53353: EQUAL
53354: IFFALSE 53375
// points := [ 10 , 5 , 3 ] ;
53356: LD_ADDR_VAR 0 9
53360: PUSH
53361: LD_INT 10
53363: PUSH
53364: LD_INT 5
53366: PUSH
53367: LD_INT 3
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: LIST
53374: ST_TO_ADDR
// if GetClass ( i ) = 14 then
53375: LD_VAR 0 6
53379: PPUSH
53380: CALL_OW 257
53384: PUSH
53385: LD_INT 14
53387: EQUAL
53388: IFFALSE 53409
// points := [ 10 , 0 , 0 ] ;
53390: LD_ADDR_VAR 0 9
53394: PUSH
53395: LD_INT 10
53397: PUSH
53398: LD_INT 0
53400: PUSH
53401: LD_INT 0
53403: PUSH
53404: EMPTY
53405: LIST
53406: LIST
53407: LIST
53408: ST_TO_ADDR
// if GetClass ( i ) = 11 then
53409: LD_VAR 0 6
53413: PPUSH
53414: CALL_OW 257
53418: PUSH
53419: LD_INT 11
53421: EQUAL
53422: IFFALSE 53443
// points := [ 30 , 10 , 5 ] ;
53424: LD_ADDR_VAR 0 9
53428: PUSH
53429: LD_INT 30
53431: PUSH
53432: LD_INT 10
53434: PUSH
53435: LD_INT 5
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: LIST
53442: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
53443: LD_VAR 0 1
53447: PPUSH
53448: LD_INT 5
53450: PPUSH
53451: CALL_OW 321
53455: PUSH
53456: LD_INT 2
53458: EQUAL
53459: IFFALSE 53476
// bpoints := bpoints * 1.8 ;
53461: LD_ADDR_VAR 0 10
53465: PUSH
53466: LD_VAR 0 10
53470: PUSH
53471: LD_REAL  1.80000000000000E+0000
53474: MUL
53475: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
53476: LD_VAR 0 6
53480: PPUSH
53481: CALL_OW 257
53485: PUSH
53486: LD_INT 1
53488: PUSH
53489: LD_INT 2
53491: PUSH
53492: LD_INT 3
53494: PUSH
53495: LD_INT 4
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: LIST
53502: LIST
53503: IN
53504: PUSH
53505: LD_VAR 0 1
53509: PPUSH
53510: LD_INT 51
53512: PPUSH
53513: CALL_OW 321
53517: PUSH
53518: LD_INT 2
53520: EQUAL
53521: AND
53522: IFFALSE 53539
// bpoints := bpoints * 1.2 ;
53524: LD_ADDR_VAR 0 10
53528: PUSH
53529: LD_VAR 0 10
53533: PUSH
53534: LD_REAL  1.20000000000000E+0000
53537: MUL
53538: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
53539: LD_VAR 0 6
53543: PPUSH
53544: CALL_OW 257
53548: PUSH
53549: LD_INT 5
53551: PUSH
53552: LD_INT 7
53554: PUSH
53555: LD_INT 9
53557: PUSH
53558: EMPTY
53559: LIST
53560: LIST
53561: LIST
53562: IN
53563: PUSH
53564: LD_VAR 0 1
53568: PPUSH
53569: LD_INT 52
53571: PPUSH
53572: CALL_OW 321
53576: PUSH
53577: LD_INT 2
53579: EQUAL
53580: AND
53581: IFFALSE 53598
// bpoints := bpoints * 1.5 ;
53583: LD_ADDR_VAR 0 10
53587: PUSH
53588: LD_VAR 0 10
53592: PUSH
53593: LD_REAL  1.50000000000000E+0000
53596: MUL
53597: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
53598: LD_VAR 0 1
53602: PPUSH
53603: LD_INT 66
53605: PPUSH
53606: CALL_OW 321
53610: PUSH
53611: LD_INT 2
53613: EQUAL
53614: IFFALSE 53631
// bpoints := bpoints * 1.1 ;
53616: LD_ADDR_VAR 0 10
53620: PUSH
53621: LD_VAR 0 10
53625: PUSH
53626: LD_REAL  1.10000000000000E+0000
53629: MUL
53630: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
53631: LD_ADDR_VAR 0 10
53635: PUSH
53636: LD_VAR 0 10
53640: PUSH
53641: LD_VAR 0 6
53645: PPUSH
53646: LD_INT 1
53648: PPUSH
53649: CALL_OW 259
53653: PUSH
53654: LD_REAL  1.15000000000000E+0000
53657: MUL
53658: MUL
53659: ST_TO_ADDR
// end ; unit_vehicle :
53660: GO 54490
53662: LD_INT 2
53664: DOUBLE
53665: EQUAL
53666: IFTRUE 53670
53668: GO 54478
53670: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
53671: LD_VAR 0 6
53675: PPUSH
53676: CALL_OW 264
53680: PUSH
53681: LD_INT 2
53683: PUSH
53684: LD_INT 42
53686: PUSH
53687: LD_INT 24
53689: PUSH
53690: EMPTY
53691: LIST
53692: LIST
53693: LIST
53694: IN
53695: IFFALSE 53716
// points := [ 25 , 5 , 3 ] ;
53697: LD_ADDR_VAR 0 9
53701: PUSH
53702: LD_INT 25
53704: PUSH
53705: LD_INT 5
53707: PUSH
53708: LD_INT 3
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: LIST
53715: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
53716: LD_VAR 0 6
53720: PPUSH
53721: CALL_OW 264
53725: PUSH
53726: LD_INT 4
53728: PUSH
53729: LD_INT 43
53731: PUSH
53732: LD_INT 25
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: LIST
53739: IN
53740: IFFALSE 53761
// points := [ 40 , 15 , 5 ] ;
53742: LD_ADDR_VAR 0 9
53746: PUSH
53747: LD_INT 40
53749: PUSH
53750: LD_INT 15
53752: PUSH
53753: LD_INT 5
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: LIST
53760: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
53761: LD_VAR 0 6
53765: PPUSH
53766: CALL_OW 264
53770: PUSH
53771: LD_INT 3
53773: PUSH
53774: LD_INT 23
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: IN
53781: IFFALSE 53802
// points := [ 7 , 25 , 8 ] ;
53783: LD_ADDR_VAR 0 9
53787: PUSH
53788: LD_INT 7
53790: PUSH
53791: LD_INT 25
53793: PUSH
53794: LD_INT 8
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: LIST
53801: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
53802: LD_VAR 0 6
53806: PPUSH
53807: CALL_OW 264
53811: PUSH
53812: LD_INT 5
53814: PUSH
53815: LD_INT 27
53817: PUSH
53818: LD_INT 44
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: LIST
53825: IN
53826: IFFALSE 53847
// points := [ 14 , 50 , 16 ] ;
53828: LD_ADDR_VAR 0 9
53832: PUSH
53833: LD_INT 14
53835: PUSH
53836: LD_INT 50
53838: PUSH
53839: LD_INT 16
53841: PUSH
53842: EMPTY
53843: LIST
53844: LIST
53845: LIST
53846: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
53847: LD_VAR 0 6
53851: PPUSH
53852: CALL_OW 264
53856: PUSH
53857: LD_INT 6
53859: PUSH
53860: LD_INT 46
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: IN
53867: IFFALSE 53888
// points := [ 32 , 120 , 70 ] ;
53869: LD_ADDR_VAR 0 9
53873: PUSH
53874: LD_INT 32
53876: PUSH
53877: LD_INT 120
53879: PUSH
53880: LD_INT 70
53882: PUSH
53883: EMPTY
53884: LIST
53885: LIST
53886: LIST
53887: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
53888: LD_VAR 0 6
53892: PPUSH
53893: CALL_OW 264
53897: PUSH
53898: LD_INT 7
53900: PUSH
53901: LD_INT 28
53903: PUSH
53904: LD_INT 45
53906: PUSH
53907: LD_EXP 74
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: LIST
53916: LIST
53917: IN
53918: IFFALSE 53939
// points := [ 35 , 20 , 45 ] ;
53920: LD_ADDR_VAR 0 9
53924: PUSH
53925: LD_INT 35
53927: PUSH
53928: LD_INT 20
53930: PUSH
53931: LD_INT 45
53933: PUSH
53934: EMPTY
53935: LIST
53936: LIST
53937: LIST
53938: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
53939: LD_VAR 0 6
53943: PPUSH
53944: CALL_OW 264
53948: PUSH
53949: LD_INT 47
53951: PUSH
53952: EMPTY
53953: LIST
53954: IN
53955: IFFALSE 53976
// points := [ 67 , 45 , 75 ] ;
53957: LD_ADDR_VAR 0 9
53961: PUSH
53962: LD_INT 67
53964: PUSH
53965: LD_INT 45
53967: PUSH
53968: LD_INT 75
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: LIST
53975: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
53976: LD_VAR 0 6
53980: PPUSH
53981: CALL_OW 264
53985: PUSH
53986: LD_INT 26
53988: PUSH
53989: EMPTY
53990: LIST
53991: IN
53992: IFFALSE 54013
// points := [ 120 , 30 , 80 ] ;
53994: LD_ADDR_VAR 0 9
53998: PUSH
53999: LD_INT 120
54001: PUSH
54002: LD_INT 30
54004: PUSH
54005: LD_INT 80
54007: PUSH
54008: EMPTY
54009: LIST
54010: LIST
54011: LIST
54012: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
54013: LD_VAR 0 6
54017: PPUSH
54018: CALL_OW 264
54022: PUSH
54023: LD_INT 22
54025: PUSH
54026: EMPTY
54027: LIST
54028: IN
54029: IFFALSE 54050
// points := [ 40 , 1 , 1 ] ;
54031: LD_ADDR_VAR 0 9
54035: PUSH
54036: LD_INT 40
54038: PUSH
54039: LD_INT 1
54041: PUSH
54042: LD_INT 1
54044: PUSH
54045: EMPTY
54046: LIST
54047: LIST
54048: LIST
54049: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
54050: LD_VAR 0 6
54054: PPUSH
54055: CALL_OW 264
54059: PUSH
54060: LD_INT 29
54062: PUSH
54063: EMPTY
54064: LIST
54065: IN
54066: IFFALSE 54087
// points := [ 70 , 200 , 400 ] ;
54068: LD_ADDR_VAR 0 9
54072: PUSH
54073: LD_INT 70
54075: PUSH
54076: LD_INT 200
54078: PUSH
54079: LD_INT 400
54081: PUSH
54082: EMPTY
54083: LIST
54084: LIST
54085: LIST
54086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
54087: LD_VAR 0 6
54091: PPUSH
54092: CALL_OW 264
54096: PUSH
54097: LD_INT 14
54099: PUSH
54100: LD_INT 53
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: IN
54107: IFFALSE 54128
// points := [ 40 , 10 , 20 ] ;
54109: LD_ADDR_VAR 0 9
54113: PUSH
54114: LD_INT 40
54116: PUSH
54117: LD_INT 10
54119: PUSH
54120: LD_INT 20
54122: PUSH
54123: EMPTY
54124: LIST
54125: LIST
54126: LIST
54127: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
54128: LD_VAR 0 6
54132: PPUSH
54133: CALL_OW 264
54137: PUSH
54138: LD_INT 9
54140: PUSH
54141: EMPTY
54142: LIST
54143: IN
54144: IFFALSE 54165
// points := [ 5 , 70 , 20 ] ;
54146: LD_ADDR_VAR 0 9
54150: PUSH
54151: LD_INT 5
54153: PUSH
54154: LD_INT 70
54156: PUSH
54157: LD_INT 20
54159: PUSH
54160: EMPTY
54161: LIST
54162: LIST
54163: LIST
54164: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
54165: LD_VAR 0 6
54169: PPUSH
54170: CALL_OW 264
54174: PUSH
54175: LD_INT 10
54177: PUSH
54178: EMPTY
54179: LIST
54180: IN
54181: IFFALSE 54202
// points := [ 35 , 110 , 70 ] ;
54183: LD_ADDR_VAR 0 9
54187: PUSH
54188: LD_INT 35
54190: PUSH
54191: LD_INT 110
54193: PUSH
54194: LD_INT 70
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: LIST
54201: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
54202: LD_VAR 0 6
54206: PPUSH
54207: CALL_OW 265
54211: PUSH
54212: LD_INT 25
54214: EQUAL
54215: IFFALSE 54236
// points := [ 80 , 65 , 100 ] ;
54217: LD_ADDR_VAR 0 9
54221: PUSH
54222: LD_INT 80
54224: PUSH
54225: LD_INT 65
54227: PUSH
54228: LD_INT 100
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: LIST
54235: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
54236: LD_VAR 0 6
54240: PPUSH
54241: CALL_OW 263
54245: PUSH
54246: LD_INT 1
54248: EQUAL
54249: IFFALSE 54284
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
54251: LD_ADDR_VAR 0 10
54255: PUSH
54256: LD_VAR 0 10
54260: PUSH
54261: LD_VAR 0 6
54265: PPUSH
54266: CALL_OW 311
54270: PPUSH
54271: LD_INT 3
54273: PPUSH
54274: CALL_OW 259
54278: PUSH
54279: LD_INT 4
54281: MUL
54282: MUL
54283: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
54284: LD_VAR 0 6
54288: PPUSH
54289: CALL_OW 263
54293: PUSH
54294: LD_INT 2
54296: EQUAL
54297: IFFALSE 54348
// begin j := IsControledBy ( i ) ;
54299: LD_ADDR_VAR 0 7
54303: PUSH
54304: LD_VAR 0 6
54308: PPUSH
54309: CALL_OW 312
54313: ST_TO_ADDR
// if j then
54314: LD_VAR 0 7
54318: IFFALSE 54348
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
54320: LD_ADDR_VAR 0 10
54324: PUSH
54325: LD_VAR 0 10
54329: PUSH
54330: LD_VAR 0 7
54334: PPUSH
54335: LD_INT 3
54337: PPUSH
54338: CALL_OW 259
54342: PUSH
54343: LD_INT 3
54345: MUL
54346: MUL
54347: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
54348: LD_VAR 0 6
54352: PPUSH
54353: CALL_OW 264
54357: PUSH
54358: LD_INT 5
54360: PUSH
54361: LD_INT 6
54363: PUSH
54364: LD_INT 46
54366: PUSH
54367: LD_INT 44
54369: PUSH
54370: LD_INT 47
54372: PUSH
54373: LD_INT 45
54375: PUSH
54376: LD_INT 28
54378: PUSH
54379: LD_INT 7
54381: PUSH
54382: LD_INT 27
54384: PUSH
54385: LD_INT 29
54387: PUSH
54388: EMPTY
54389: LIST
54390: LIST
54391: LIST
54392: LIST
54393: LIST
54394: LIST
54395: LIST
54396: LIST
54397: LIST
54398: LIST
54399: IN
54400: PUSH
54401: LD_VAR 0 1
54405: PPUSH
54406: LD_INT 52
54408: PPUSH
54409: CALL_OW 321
54413: PUSH
54414: LD_INT 2
54416: EQUAL
54417: AND
54418: IFFALSE 54435
// bpoints := bpoints * 1.2 ;
54420: LD_ADDR_VAR 0 10
54424: PUSH
54425: LD_VAR 0 10
54429: PUSH
54430: LD_REAL  1.20000000000000E+0000
54433: MUL
54434: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
54435: LD_VAR 0 6
54439: PPUSH
54440: CALL_OW 264
54444: PUSH
54445: LD_INT 6
54447: PUSH
54448: LD_INT 46
54450: PUSH
54451: LD_INT 47
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: LIST
54458: IN
54459: IFFALSE 54476
// bpoints := bpoints * 1.2 ;
54461: LD_ADDR_VAR 0 10
54465: PUSH
54466: LD_VAR 0 10
54470: PUSH
54471: LD_REAL  1.20000000000000E+0000
54474: MUL
54475: ST_TO_ADDR
// end ; unit_building :
54476: GO 54490
54478: LD_INT 3
54480: DOUBLE
54481: EQUAL
54482: IFTRUE 54486
54484: GO 54489
54486: POP
// ; end ;
54487: GO 54490
54489: POP
// for j = 1 to 3 do
54490: LD_ADDR_VAR 0 7
54494: PUSH
54495: DOUBLE
54496: LD_INT 1
54498: DEC
54499: ST_TO_ADDR
54500: LD_INT 3
54502: PUSH
54503: FOR_TO
54504: IFFALSE 54557
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
54506: LD_ADDR_VAR 0 5
54510: PUSH
54511: LD_VAR 0 5
54515: PPUSH
54516: LD_VAR 0 7
54520: PPUSH
54521: LD_VAR 0 5
54525: PUSH
54526: LD_VAR 0 7
54530: ARRAY
54531: PUSH
54532: LD_VAR 0 9
54536: PUSH
54537: LD_VAR 0 7
54541: ARRAY
54542: PUSH
54543: LD_VAR 0 10
54547: MUL
54548: PLUS
54549: PPUSH
54550: CALL_OW 1
54554: ST_TO_ADDR
54555: GO 54503
54557: POP
54558: POP
// end ;
54559: GO 53036
54561: POP
54562: POP
// result := Replace ( result , 4 , tmp ) ;
54563: LD_ADDR_VAR 0 5
54567: PUSH
54568: LD_VAR 0 5
54572: PPUSH
54573: LD_INT 4
54575: PPUSH
54576: LD_VAR 0 8
54580: PPUSH
54581: CALL_OW 1
54585: ST_TO_ADDR
// end ;
54586: LD_VAR 0 5
54590: RET
// export function DangerAtRange ( unit , range ) ; begin
54591: LD_INT 0
54593: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
54594: LD_ADDR_VAR 0 3
54598: PUSH
54599: LD_VAR 0 1
54603: PPUSH
54604: CALL_OW 255
54608: PPUSH
54609: LD_VAR 0 1
54613: PPUSH
54614: CALL_OW 250
54618: PPUSH
54619: LD_VAR 0 1
54623: PPUSH
54624: CALL_OW 251
54628: PPUSH
54629: LD_VAR 0 2
54633: PPUSH
54634: CALL 52888 0 4
54638: ST_TO_ADDR
// end ;
54639: LD_VAR 0 3
54643: RET
// export function DangerInArea ( side , area ) ; begin
54644: LD_INT 0
54646: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
54647: LD_ADDR_VAR 0 3
54651: PUSH
54652: LD_VAR 0 2
54656: PPUSH
54657: LD_INT 81
54659: PUSH
54660: LD_VAR 0 1
54664: PUSH
54665: EMPTY
54666: LIST
54667: LIST
54668: PPUSH
54669: CALL_OW 70
54673: ST_TO_ADDR
// end ;
54674: LD_VAR 0 3
54678: RET
// export function IsExtension ( b ) ; begin
54679: LD_INT 0
54681: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
54682: LD_ADDR_VAR 0 2
54686: PUSH
54687: LD_VAR 0 1
54691: PUSH
54692: LD_INT 23
54694: PUSH
54695: LD_INT 20
54697: PUSH
54698: LD_INT 22
54700: PUSH
54701: LD_INT 17
54703: PUSH
54704: LD_INT 24
54706: PUSH
54707: LD_INT 21
54709: PUSH
54710: LD_INT 19
54712: PUSH
54713: LD_INT 16
54715: PUSH
54716: LD_INT 25
54718: PUSH
54719: LD_INT 18
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: LIST
54731: LIST
54732: LIST
54733: IN
54734: ST_TO_ADDR
// end ;
54735: LD_VAR 0 2
54739: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
54740: LD_INT 0
54742: PPUSH
54743: PPUSH
54744: PPUSH
// result := [ ] ;
54745: LD_ADDR_VAR 0 4
54749: PUSH
54750: EMPTY
54751: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
54752: LD_ADDR_VAR 0 5
54756: PUSH
54757: LD_VAR 0 2
54761: PPUSH
54762: LD_INT 21
54764: PUSH
54765: LD_INT 3
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: PPUSH
54772: CALL_OW 70
54776: ST_TO_ADDR
// if not tmp then
54777: LD_VAR 0 5
54781: NOT
54782: IFFALSE 54786
// exit ;
54784: GO 54850
// if checkLink then
54786: LD_VAR 0 3
54790: IFFALSE 54840
// begin for i in tmp do
54792: LD_ADDR_VAR 0 6
54796: PUSH
54797: LD_VAR 0 5
54801: PUSH
54802: FOR_IN
54803: IFFALSE 54838
// if GetBase ( i ) <> base then
54805: LD_VAR 0 6
54809: PPUSH
54810: CALL_OW 274
54814: PUSH
54815: LD_VAR 0 1
54819: NONEQUAL
54820: IFFALSE 54836
// ComLinkToBase ( base , i ) ;
54822: LD_VAR 0 1
54826: PPUSH
54827: LD_VAR 0 6
54831: PPUSH
54832: CALL_OW 169
54836: GO 54802
54838: POP
54839: POP
// end ; result := tmp ;
54840: LD_ADDR_VAR 0 4
54844: PUSH
54845: LD_VAR 0 5
54849: ST_TO_ADDR
// end ;
54850: LD_VAR 0 4
54854: RET
// export function ComComplete ( units , b ) ; var i ; begin
54855: LD_INT 0
54857: PPUSH
54858: PPUSH
// if not units then
54859: LD_VAR 0 1
54863: NOT
54864: IFFALSE 54868
// exit ;
54866: GO 54958
// for i in units do
54868: LD_ADDR_VAR 0 4
54872: PUSH
54873: LD_VAR 0 1
54877: PUSH
54878: FOR_IN
54879: IFFALSE 54956
// if BuildingStatus ( b ) = bs_build then
54881: LD_VAR 0 2
54885: PPUSH
54886: CALL_OW 461
54890: PUSH
54891: LD_INT 1
54893: EQUAL
54894: IFFALSE 54954
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
54896: LD_VAR 0 4
54900: PPUSH
54901: LD_STRING h
54903: PUSH
54904: LD_VAR 0 2
54908: PPUSH
54909: CALL_OW 250
54913: PUSH
54914: LD_VAR 0 2
54918: PPUSH
54919: CALL_OW 251
54923: PUSH
54924: LD_VAR 0 2
54928: PUSH
54929: LD_INT 0
54931: PUSH
54932: LD_INT 0
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: PUSH
54947: EMPTY
54948: LIST
54949: PPUSH
54950: CALL_OW 446
54954: GO 54878
54956: POP
54957: POP
// end ;
54958: LD_VAR 0 3
54962: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
54963: LD_INT 0
54965: PPUSH
54966: PPUSH
54967: PPUSH
54968: PPUSH
54969: PPUSH
54970: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
54971: LD_VAR 0 1
54975: NOT
54976: PUSH
54977: LD_VAR 0 1
54981: PPUSH
54982: CALL_OW 263
54986: PUSH
54987: LD_INT 2
54989: NONEQUAL
54990: OR
54991: IFFALSE 54995
// exit ;
54993: GO 55311
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
54995: LD_ADDR_VAR 0 6
54999: PUSH
55000: LD_INT 22
55002: PUSH
55003: LD_VAR 0 1
55007: PPUSH
55008: CALL_OW 255
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 2
55019: PUSH
55020: LD_INT 30
55022: PUSH
55023: LD_INT 36
55025: PUSH
55026: EMPTY
55027: LIST
55028: LIST
55029: PUSH
55030: LD_INT 34
55032: PUSH
55033: LD_INT 31
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: LIST
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PPUSH
55049: CALL_OW 69
55053: ST_TO_ADDR
// if not tmp then
55054: LD_VAR 0 6
55058: NOT
55059: IFFALSE 55063
// exit ;
55061: GO 55311
// result := [ ] ;
55063: LD_ADDR_VAR 0 2
55067: PUSH
55068: EMPTY
55069: ST_TO_ADDR
// for i in tmp do
55070: LD_ADDR_VAR 0 3
55074: PUSH
55075: LD_VAR 0 6
55079: PUSH
55080: FOR_IN
55081: IFFALSE 55152
// begin t := UnitsInside ( i ) ;
55083: LD_ADDR_VAR 0 4
55087: PUSH
55088: LD_VAR 0 3
55092: PPUSH
55093: CALL_OW 313
55097: ST_TO_ADDR
// if t then
55098: LD_VAR 0 4
55102: IFFALSE 55150
// for j in t do
55104: LD_ADDR_VAR 0 7
55108: PUSH
55109: LD_VAR 0 4
55113: PUSH
55114: FOR_IN
55115: IFFALSE 55148
// result := Replace ( result , result + 1 , j ) ;
55117: LD_ADDR_VAR 0 2
55121: PUSH
55122: LD_VAR 0 2
55126: PPUSH
55127: LD_VAR 0 2
55131: PUSH
55132: LD_INT 1
55134: PLUS
55135: PPUSH
55136: LD_VAR 0 7
55140: PPUSH
55141: CALL_OW 1
55145: ST_TO_ADDR
55146: GO 55114
55148: POP
55149: POP
// end ;
55150: GO 55080
55152: POP
55153: POP
// if not result then
55154: LD_VAR 0 2
55158: NOT
55159: IFFALSE 55163
// exit ;
55161: GO 55311
// mech := result [ 1 ] ;
55163: LD_ADDR_VAR 0 5
55167: PUSH
55168: LD_VAR 0 2
55172: PUSH
55173: LD_INT 1
55175: ARRAY
55176: ST_TO_ADDR
// if result > 1 then
55177: LD_VAR 0 2
55181: PUSH
55182: LD_INT 1
55184: GREATER
55185: IFFALSE 55297
// begin for i = 2 to result do
55187: LD_ADDR_VAR 0 3
55191: PUSH
55192: DOUBLE
55193: LD_INT 2
55195: DEC
55196: ST_TO_ADDR
55197: LD_VAR 0 2
55201: PUSH
55202: FOR_TO
55203: IFFALSE 55295
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
55205: LD_ADDR_VAR 0 4
55209: PUSH
55210: LD_VAR 0 2
55214: PUSH
55215: LD_VAR 0 3
55219: ARRAY
55220: PPUSH
55221: LD_INT 3
55223: PPUSH
55224: CALL_OW 259
55228: PUSH
55229: LD_VAR 0 2
55233: PUSH
55234: LD_VAR 0 3
55238: ARRAY
55239: PPUSH
55240: CALL_OW 432
55244: MINUS
55245: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
55246: LD_VAR 0 4
55250: PUSH
55251: LD_VAR 0 5
55255: PPUSH
55256: LD_INT 3
55258: PPUSH
55259: CALL_OW 259
55263: PUSH
55264: LD_VAR 0 5
55268: PPUSH
55269: CALL_OW 432
55273: MINUS
55274: GREATEREQUAL
55275: IFFALSE 55293
// mech := result [ i ] ;
55277: LD_ADDR_VAR 0 5
55281: PUSH
55282: LD_VAR 0 2
55286: PUSH
55287: LD_VAR 0 3
55291: ARRAY
55292: ST_TO_ADDR
// end ;
55293: GO 55202
55295: POP
55296: POP
// end ; ComLinkTo ( vehicle , mech ) ;
55297: LD_VAR 0 1
55301: PPUSH
55302: LD_VAR 0 5
55306: PPUSH
55307: CALL_OW 135
// end ;
55311: LD_VAR 0 2
55315: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
55316: LD_INT 0
55318: PPUSH
55319: PPUSH
55320: PPUSH
55321: PPUSH
55322: PPUSH
55323: PPUSH
55324: PPUSH
55325: PPUSH
55326: PPUSH
55327: PPUSH
55328: PPUSH
55329: PPUSH
55330: PPUSH
// result := [ ] ;
55331: LD_ADDR_VAR 0 7
55335: PUSH
55336: EMPTY
55337: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
55338: LD_VAR 0 1
55342: PPUSH
55343: CALL_OW 266
55347: PUSH
55348: LD_INT 0
55350: PUSH
55351: LD_INT 1
55353: PUSH
55354: EMPTY
55355: LIST
55356: LIST
55357: IN
55358: NOT
55359: IFFALSE 55363
// exit ;
55361: GO 56997
// if name then
55363: LD_VAR 0 3
55367: IFFALSE 55383
// SetBName ( base_dep , name ) ;
55369: LD_VAR 0 1
55373: PPUSH
55374: LD_VAR 0 3
55378: PPUSH
55379: CALL_OW 500
// base := GetBase ( base_dep ) ;
55383: LD_ADDR_VAR 0 15
55387: PUSH
55388: LD_VAR 0 1
55392: PPUSH
55393: CALL_OW 274
55397: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
55398: LD_ADDR_VAR 0 16
55402: PUSH
55403: LD_VAR 0 1
55407: PPUSH
55408: CALL_OW 255
55412: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
55413: LD_ADDR_VAR 0 17
55417: PUSH
55418: LD_VAR 0 1
55422: PPUSH
55423: CALL_OW 248
55427: ST_TO_ADDR
// if sources then
55428: LD_VAR 0 5
55432: IFFALSE 55479
// for i = 1 to 3 do
55434: LD_ADDR_VAR 0 8
55438: PUSH
55439: DOUBLE
55440: LD_INT 1
55442: DEC
55443: ST_TO_ADDR
55444: LD_INT 3
55446: PUSH
55447: FOR_TO
55448: IFFALSE 55477
// AddResourceType ( base , i , sources [ i ] ) ;
55450: LD_VAR 0 15
55454: PPUSH
55455: LD_VAR 0 8
55459: PPUSH
55460: LD_VAR 0 5
55464: PUSH
55465: LD_VAR 0 8
55469: ARRAY
55470: PPUSH
55471: CALL_OW 276
55475: GO 55447
55477: POP
55478: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
55479: LD_ADDR_VAR 0 18
55483: PUSH
55484: LD_VAR 0 15
55488: PPUSH
55489: LD_VAR 0 2
55493: PPUSH
55494: LD_INT 1
55496: PPUSH
55497: CALL 54740 0 3
55501: ST_TO_ADDR
// InitHc ;
55502: CALL_OW 19
// InitUc ;
55506: CALL_OW 18
// uc_side := side ;
55510: LD_ADDR_OWVAR 20
55514: PUSH
55515: LD_VAR 0 16
55519: ST_TO_ADDR
// uc_nation := nation ;
55520: LD_ADDR_OWVAR 21
55524: PUSH
55525: LD_VAR 0 17
55529: ST_TO_ADDR
// if buildings then
55530: LD_VAR 0 18
55534: IFFALSE 56856
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
55536: LD_ADDR_VAR 0 19
55540: PUSH
55541: LD_VAR 0 18
55545: PPUSH
55546: LD_INT 2
55548: PUSH
55549: LD_INT 30
55551: PUSH
55552: LD_INT 29
55554: PUSH
55555: EMPTY
55556: LIST
55557: LIST
55558: PUSH
55559: LD_INT 30
55561: PUSH
55562: LD_INT 30
55564: PUSH
55565: EMPTY
55566: LIST
55567: LIST
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: LIST
55573: PPUSH
55574: CALL_OW 72
55578: ST_TO_ADDR
// if tmp then
55579: LD_VAR 0 19
55583: IFFALSE 55631
// for i in tmp do
55585: LD_ADDR_VAR 0 8
55589: PUSH
55590: LD_VAR 0 19
55594: PUSH
55595: FOR_IN
55596: IFFALSE 55629
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
55598: LD_VAR 0 8
55602: PPUSH
55603: CALL_OW 250
55607: PPUSH
55608: LD_VAR 0 8
55612: PPUSH
55613: CALL_OW 251
55617: PPUSH
55618: LD_VAR 0 16
55622: PPUSH
55623: CALL_OW 441
55627: GO 55595
55629: POP
55630: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
55631: LD_VAR 0 18
55635: PPUSH
55636: LD_INT 2
55638: PUSH
55639: LD_INT 30
55641: PUSH
55642: LD_INT 32
55644: PUSH
55645: EMPTY
55646: LIST
55647: LIST
55648: PUSH
55649: LD_INT 30
55651: PUSH
55652: LD_INT 33
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: EMPTY
55660: LIST
55661: LIST
55662: LIST
55663: PPUSH
55664: CALL_OW 72
55668: IFFALSE 55756
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
55670: LD_ADDR_VAR 0 8
55674: PUSH
55675: LD_VAR 0 18
55679: PPUSH
55680: LD_INT 2
55682: PUSH
55683: LD_INT 30
55685: PUSH
55686: LD_INT 32
55688: PUSH
55689: EMPTY
55690: LIST
55691: LIST
55692: PUSH
55693: LD_INT 30
55695: PUSH
55696: LD_INT 33
55698: PUSH
55699: EMPTY
55700: LIST
55701: LIST
55702: PUSH
55703: EMPTY
55704: LIST
55705: LIST
55706: LIST
55707: PPUSH
55708: CALL_OW 72
55712: PUSH
55713: FOR_IN
55714: IFFALSE 55754
// begin if not GetBWeapon ( i ) then
55716: LD_VAR 0 8
55720: PPUSH
55721: CALL_OW 269
55725: NOT
55726: IFFALSE 55752
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
55728: LD_VAR 0 8
55732: PPUSH
55733: LD_VAR 0 8
55737: PPUSH
55738: LD_VAR 0 2
55742: PPUSH
55743: CALL 57002 0 2
55747: PPUSH
55748: CALL_OW 431
// end ;
55752: GO 55713
55754: POP
55755: POP
// end ; for i = 1 to personel do
55756: LD_ADDR_VAR 0 8
55760: PUSH
55761: DOUBLE
55762: LD_INT 1
55764: DEC
55765: ST_TO_ADDR
55766: LD_VAR 0 6
55770: PUSH
55771: FOR_TO
55772: IFFALSE 56836
// begin if i > 4 then
55774: LD_VAR 0 8
55778: PUSH
55779: LD_INT 4
55781: GREATER
55782: IFFALSE 55786
// break ;
55784: GO 56836
// case i of 1 :
55786: LD_VAR 0 8
55790: PUSH
55791: LD_INT 1
55793: DOUBLE
55794: EQUAL
55795: IFTRUE 55799
55797: GO 55879
55799: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
55800: LD_ADDR_VAR 0 12
55804: PUSH
55805: LD_VAR 0 18
55809: PPUSH
55810: LD_INT 22
55812: PUSH
55813: LD_VAR 0 16
55817: PUSH
55818: EMPTY
55819: LIST
55820: LIST
55821: PUSH
55822: LD_INT 58
55824: PUSH
55825: EMPTY
55826: LIST
55827: PUSH
55828: LD_INT 2
55830: PUSH
55831: LD_INT 30
55833: PUSH
55834: LD_INT 32
55836: PUSH
55837: EMPTY
55838: LIST
55839: LIST
55840: PUSH
55841: LD_INT 30
55843: PUSH
55844: LD_INT 4
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: PUSH
55851: LD_INT 30
55853: PUSH
55854: LD_INT 5
55856: PUSH
55857: EMPTY
55858: LIST
55859: LIST
55860: PUSH
55861: EMPTY
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: PUSH
55867: EMPTY
55868: LIST
55869: LIST
55870: LIST
55871: PPUSH
55872: CALL_OW 72
55876: ST_TO_ADDR
55877: GO 56101
55879: LD_INT 2
55881: DOUBLE
55882: EQUAL
55883: IFTRUE 55887
55885: GO 55949
55887: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
55888: LD_ADDR_VAR 0 12
55892: PUSH
55893: LD_VAR 0 18
55897: PPUSH
55898: LD_INT 22
55900: PUSH
55901: LD_VAR 0 16
55905: PUSH
55906: EMPTY
55907: LIST
55908: LIST
55909: PUSH
55910: LD_INT 2
55912: PUSH
55913: LD_INT 30
55915: PUSH
55916: LD_INT 0
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: PUSH
55923: LD_INT 30
55925: PUSH
55926: LD_INT 1
55928: PUSH
55929: EMPTY
55930: LIST
55931: LIST
55932: PUSH
55933: EMPTY
55934: LIST
55935: LIST
55936: LIST
55937: PUSH
55938: EMPTY
55939: LIST
55940: LIST
55941: PPUSH
55942: CALL_OW 72
55946: ST_TO_ADDR
55947: GO 56101
55949: LD_INT 3
55951: DOUBLE
55952: EQUAL
55953: IFTRUE 55957
55955: GO 56019
55957: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
55958: LD_ADDR_VAR 0 12
55962: PUSH
55963: LD_VAR 0 18
55967: PPUSH
55968: LD_INT 22
55970: PUSH
55971: LD_VAR 0 16
55975: PUSH
55976: EMPTY
55977: LIST
55978: LIST
55979: PUSH
55980: LD_INT 2
55982: PUSH
55983: LD_INT 30
55985: PUSH
55986: LD_INT 2
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: PUSH
55993: LD_INT 30
55995: PUSH
55996: LD_INT 3
55998: PUSH
55999: EMPTY
56000: LIST
56001: LIST
56002: PUSH
56003: EMPTY
56004: LIST
56005: LIST
56006: LIST
56007: PUSH
56008: EMPTY
56009: LIST
56010: LIST
56011: PPUSH
56012: CALL_OW 72
56016: ST_TO_ADDR
56017: GO 56101
56019: LD_INT 4
56021: DOUBLE
56022: EQUAL
56023: IFTRUE 56027
56025: GO 56100
56027: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
56028: LD_ADDR_VAR 0 12
56032: PUSH
56033: LD_VAR 0 18
56037: PPUSH
56038: LD_INT 22
56040: PUSH
56041: LD_VAR 0 16
56045: PUSH
56046: EMPTY
56047: LIST
56048: LIST
56049: PUSH
56050: LD_INT 2
56052: PUSH
56053: LD_INT 30
56055: PUSH
56056: LD_INT 6
56058: PUSH
56059: EMPTY
56060: LIST
56061: LIST
56062: PUSH
56063: LD_INT 30
56065: PUSH
56066: LD_INT 7
56068: PUSH
56069: EMPTY
56070: LIST
56071: LIST
56072: PUSH
56073: LD_INT 30
56075: PUSH
56076: LD_INT 8
56078: PUSH
56079: EMPTY
56080: LIST
56081: LIST
56082: PUSH
56083: EMPTY
56084: LIST
56085: LIST
56086: LIST
56087: LIST
56088: PUSH
56089: EMPTY
56090: LIST
56091: LIST
56092: PPUSH
56093: CALL_OW 72
56097: ST_TO_ADDR
56098: GO 56101
56100: POP
// if i = 1 then
56101: LD_VAR 0 8
56105: PUSH
56106: LD_INT 1
56108: EQUAL
56109: IFFALSE 56220
// begin tmp := [ ] ;
56111: LD_ADDR_VAR 0 19
56115: PUSH
56116: EMPTY
56117: ST_TO_ADDR
// for j in f do
56118: LD_ADDR_VAR 0 9
56122: PUSH
56123: LD_VAR 0 12
56127: PUSH
56128: FOR_IN
56129: IFFALSE 56202
// if GetBType ( j ) = b_bunker then
56131: LD_VAR 0 9
56135: PPUSH
56136: CALL_OW 266
56140: PUSH
56141: LD_INT 32
56143: EQUAL
56144: IFFALSE 56171
// tmp := Insert ( tmp , 1 , j ) else
56146: LD_ADDR_VAR 0 19
56150: PUSH
56151: LD_VAR 0 19
56155: PPUSH
56156: LD_INT 1
56158: PPUSH
56159: LD_VAR 0 9
56163: PPUSH
56164: CALL_OW 2
56168: ST_TO_ADDR
56169: GO 56200
// tmp := Insert ( tmp , tmp + 1 , j ) ;
56171: LD_ADDR_VAR 0 19
56175: PUSH
56176: LD_VAR 0 19
56180: PPUSH
56181: LD_VAR 0 19
56185: PUSH
56186: LD_INT 1
56188: PLUS
56189: PPUSH
56190: LD_VAR 0 9
56194: PPUSH
56195: CALL_OW 2
56199: ST_TO_ADDR
56200: GO 56128
56202: POP
56203: POP
// if tmp then
56204: LD_VAR 0 19
56208: IFFALSE 56220
// f := tmp ;
56210: LD_ADDR_VAR 0 12
56214: PUSH
56215: LD_VAR 0 19
56219: ST_TO_ADDR
// end ; x := personel [ i ] ;
56220: LD_ADDR_VAR 0 13
56224: PUSH
56225: LD_VAR 0 6
56229: PUSH
56230: LD_VAR 0 8
56234: ARRAY
56235: ST_TO_ADDR
// if x = - 1 then
56236: LD_VAR 0 13
56240: PUSH
56241: LD_INT 1
56243: NEG
56244: EQUAL
56245: IFFALSE 56454
// begin for j in f do
56247: LD_ADDR_VAR 0 9
56251: PUSH
56252: LD_VAR 0 12
56256: PUSH
56257: FOR_IN
56258: IFFALSE 56450
// repeat InitHc ;
56260: CALL_OW 19
// if GetBType ( j ) = b_barracks then
56264: LD_VAR 0 9
56268: PPUSH
56269: CALL_OW 266
56273: PUSH
56274: LD_INT 5
56276: EQUAL
56277: IFFALSE 56347
// begin if UnitsInside ( j ) < 3 then
56279: LD_VAR 0 9
56283: PPUSH
56284: CALL_OW 313
56288: PUSH
56289: LD_INT 3
56291: LESS
56292: IFFALSE 56328
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
56294: LD_INT 0
56296: PPUSH
56297: LD_INT 5
56299: PUSH
56300: LD_INT 8
56302: PUSH
56303: LD_INT 9
56305: PUSH
56306: EMPTY
56307: LIST
56308: LIST
56309: LIST
56310: PUSH
56311: LD_VAR 0 17
56315: ARRAY
56316: PPUSH
56317: LD_VAR 0 4
56321: PPUSH
56322: CALL_OW 380
56326: GO 56345
// PrepareHuman ( false , i , skill ) ;
56328: LD_INT 0
56330: PPUSH
56331: LD_VAR 0 8
56335: PPUSH
56336: LD_VAR 0 4
56340: PPUSH
56341: CALL_OW 380
// end else
56345: GO 56364
// PrepareHuman ( false , i , skill ) ;
56347: LD_INT 0
56349: PPUSH
56350: LD_VAR 0 8
56354: PPUSH
56355: LD_VAR 0 4
56359: PPUSH
56360: CALL_OW 380
// un := CreateHuman ;
56364: LD_ADDR_VAR 0 14
56368: PUSH
56369: CALL_OW 44
56373: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56374: LD_ADDR_VAR 0 7
56378: PUSH
56379: LD_VAR 0 7
56383: PPUSH
56384: LD_INT 1
56386: PPUSH
56387: LD_VAR 0 14
56391: PPUSH
56392: CALL_OW 2
56396: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
56397: LD_VAR 0 14
56401: PPUSH
56402: LD_VAR 0 9
56406: PPUSH
56407: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
56411: LD_VAR 0 9
56415: PPUSH
56416: CALL_OW 313
56420: PUSH
56421: LD_INT 6
56423: EQUAL
56424: PUSH
56425: LD_VAR 0 9
56429: PPUSH
56430: CALL_OW 266
56434: PUSH
56435: LD_INT 32
56437: PUSH
56438: LD_INT 31
56440: PUSH
56441: EMPTY
56442: LIST
56443: LIST
56444: IN
56445: OR
56446: IFFALSE 56260
56448: GO 56257
56450: POP
56451: POP
// end else
56452: GO 56834
// for j = 1 to x do
56454: LD_ADDR_VAR 0 9
56458: PUSH
56459: DOUBLE
56460: LD_INT 1
56462: DEC
56463: ST_TO_ADDR
56464: LD_VAR 0 13
56468: PUSH
56469: FOR_TO
56470: IFFALSE 56832
// begin InitHc ;
56472: CALL_OW 19
// if not f then
56476: LD_VAR 0 12
56480: NOT
56481: IFFALSE 56570
// begin PrepareHuman ( false , i , skill ) ;
56483: LD_INT 0
56485: PPUSH
56486: LD_VAR 0 8
56490: PPUSH
56491: LD_VAR 0 4
56495: PPUSH
56496: CALL_OW 380
// un := CreateHuman ;
56500: LD_ADDR_VAR 0 14
56504: PUSH
56505: CALL_OW 44
56509: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56510: LD_ADDR_VAR 0 7
56514: PUSH
56515: LD_VAR 0 7
56519: PPUSH
56520: LD_INT 1
56522: PPUSH
56523: LD_VAR 0 14
56527: PPUSH
56528: CALL_OW 2
56532: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
56533: LD_VAR 0 14
56537: PPUSH
56538: LD_VAR 0 1
56542: PPUSH
56543: CALL_OW 250
56547: PPUSH
56548: LD_VAR 0 1
56552: PPUSH
56553: CALL_OW 251
56557: PPUSH
56558: LD_INT 10
56560: PPUSH
56561: LD_INT 0
56563: PPUSH
56564: CALL_OW 50
// continue ;
56568: GO 56469
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
56570: LD_VAR 0 12
56574: PUSH
56575: LD_INT 1
56577: ARRAY
56578: PPUSH
56579: CALL_OW 313
56583: PUSH
56584: LD_VAR 0 12
56588: PUSH
56589: LD_INT 1
56591: ARRAY
56592: PPUSH
56593: CALL_OW 266
56597: PUSH
56598: LD_INT 32
56600: PUSH
56601: LD_INT 31
56603: PUSH
56604: EMPTY
56605: LIST
56606: LIST
56607: IN
56608: AND
56609: PUSH
56610: LD_VAR 0 12
56614: PUSH
56615: LD_INT 1
56617: ARRAY
56618: PPUSH
56619: CALL_OW 313
56623: PUSH
56624: LD_INT 6
56626: EQUAL
56627: OR
56628: IFFALSE 56648
// f := Delete ( f , 1 ) ;
56630: LD_ADDR_VAR 0 12
56634: PUSH
56635: LD_VAR 0 12
56639: PPUSH
56640: LD_INT 1
56642: PPUSH
56643: CALL_OW 3
56647: ST_TO_ADDR
// if not f then
56648: LD_VAR 0 12
56652: NOT
56653: IFFALSE 56671
// begin x := x + 2 ;
56655: LD_ADDR_VAR 0 13
56659: PUSH
56660: LD_VAR 0 13
56664: PUSH
56665: LD_INT 2
56667: PLUS
56668: ST_TO_ADDR
// continue ;
56669: GO 56469
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
56671: LD_VAR 0 12
56675: PUSH
56676: LD_INT 1
56678: ARRAY
56679: PPUSH
56680: CALL_OW 266
56684: PUSH
56685: LD_INT 5
56687: EQUAL
56688: IFFALSE 56762
// begin if UnitsInside ( f [ 1 ] ) < 3 then
56690: LD_VAR 0 12
56694: PUSH
56695: LD_INT 1
56697: ARRAY
56698: PPUSH
56699: CALL_OW 313
56703: PUSH
56704: LD_INT 3
56706: LESS
56707: IFFALSE 56743
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
56709: LD_INT 0
56711: PPUSH
56712: LD_INT 5
56714: PUSH
56715: LD_INT 8
56717: PUSH
56718: LD_INT 9
56720: PUSH
56721: EMPTY
56722: LIST
56723: LIST
56724: LIST
56725: PUSH
56726: LD_VAR 0 17
56730: ARRAY
56731: PPUSH
56732: LD_VAR 0 4
56736: PPUSH
56737: CALL_OW 380
56741: GO 56760
// PrepareHuman ( false , i , skill ) ;
56743: LD_INT 0
56745: PPUSH
56746: LD_VAR 0 8
56750: PPUSH
56751: LD_VAR 0 4
56755: PPUSH
56756: CALL_OW 380
// end else
56760: GO 56779
// PrepareHuman ( false , i , skill ) ;
56762: LD_INT 0
56764: PPUSH
56765: LD_VAR 0 8
56769: PPUSH
56770: LD_VAR 0 4
56774: PPUSH
56775: CALL_OW 380
// un := CreateHuman ;
56779: LD_ADDR_VAR 0 14
56783: PUSH
56784: CALL_OW 44
56788: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
56789: LD_ADDR_VAR 0 7
56793: PUSH
56794: LD_VAR 0 7
56798: PPUSH
56799: LD_INT 1
56801: PPUSH
56802: LD_VAR 0 14
56806: PPUSH
56807: CALL_OW 2
56811: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
56812: LD_VAR 0 14
56816: PPUSH
56817: LD_VAR 0 12
56821: PUSH
56822: LD_INT 1
56824: ARRAY
56825: PPUSH
56826: CALL_OW 52
// end ;
56830: GO 56469
56832: POP
56833: POP
// end ;
56834: GO 55771
56836: POP
56837: POP
// result := result ^ buildings ;
56838: LD_ADDR_VAR 0 7
56842: PUSH
56843: LD_VAR 0 7
56847: PUSH
56848: LD_VAR 0 18
56852: ADD
56853: ST_TO_ADDR
// end else
56854: GO 56997
// begin for i = 1 to personel do
56856: LD_ADDR_VAR 0 8
56860: PUSH
56861: DOUBLE
56862: LD_INT 1
56864: DEC
56865: ST_TO_ADDR
56866: LD_VAR 0 6
56870: PUSH
56871: FOR_TO
56872: IFFALSE 56995
// begin if i > 4 then
56874: LD_VAR 0 8
56878: PUSH
56879: LD_INT 4
56881: GREATER
56882: IFFALSE 56886
// break ;
56884: GO 56995
// x := personel [ i ] ;
56886: LD_ADDR_VAR 0 13
56890: PUSH
56891: LD_VAR 0 6
56895: PUSH
56896: LD_VAR 0 8
56900: ARRAY
56901: ST_TO_ADDR
// if x = - 1 then
56902: LD_VAR 0 13
56906: PUSH
56907: LD_INT 1
56909: NEG
56910: EQUAL
56911: IFFALSE 56915
// continue ;
56913: GO 56871
// PrepareHuman ( false , i , skill ) ;
56915: LD_INT 0
56917: PPUSH
56918: LD_VAR 0 8
56922: PPUSH
56923: LD_VAR 0 4
56927: PPUSH
56928: CALL_OW 380
// un := CreateHuman ;
56932: LD_ADDR_VAR 0 14
56936: PUSH
56937: CALL_OW 44
56941: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
56942: LD_VAR 0 14
56946: PPUSH
56947: LD_VAR 0 1
56951: PPUSH
56952: CALL_OW 250
56956: PPUSH
56957: LD_VAR 0 1
56961: PPUSH
56962: CALL_OW 251
56966: PPUSH
56967: LD_INT 10
56969: PPUSH
56970: LD_INT 0
56972: PPUSH
56973: CALL_OW 50
// result := result ^ un ;
56977: LD_ADDR_VAR 0 7
56981: PUSH
56982: LD_VAR 0 7
56986: PUSH
56987: LD_VAR 0 14
56991: ADD
56992: ST_TO_ADDR
// end ;
56993: GO 56871
56995: POP
56996: POP
// end ; end ;
56997: LD_VAR 0 7
57001: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
57002: LD_INT 0
57004: PPUSH
57005: PPUSH
57006: PPUSH
57007: PPUSH
57008: PPUSH
57009: PPUSH
57010: PPUSH
57011: PPUSH
57012: PPUSH
57013: PPUSH
57014: PPUSH
57015: PPUSH
57016: PPUSH
57017: PPUSH
57018: PPUSH
57019: PPUSH
// result := false ;
57020: LD_ADDR_VAR 0 3
57024: PUSH
57025: LD_INT 0
57027: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
57028: LD_VAR 0 1
57032: NOT
57033: PUSH
57034: LD_VAR 0 1
57038: PPUSH
57039: CALL_OW 266
57043: PUSH
57044: LD_INT 32
57046: PUSH
57047: LD_INT 33
57049: PUSH
57050: EMPTY
57051: LIST
57052: LIST
57053: IN
57054: NOT
57055: OR
57056: IFFALSE 57060
// exit ;
57058: GO 58169
// nat := GetNation ( tower ) ;
57060: LD_ADDR_VAR 0 12
57064: PUSH
57065: LD_VAR 0 1
57069: PPUSH
57070: CALL_OW 248
57074: ST_TO_ADDR
// side := GetSide ( tower ) ;
57075: LD_ADDR_VAR 0 16
57079: PUSH
57080: LD_VAR 0 1
57084: PPUSH
57085: CALL_OW 255
57089: ST_TO_ADDR
// x := GetX ( tower ) ;
57090: LD_ADDR_VAR 0 10
57094: PUSH
57095: LD_VAR 0 1
57099: PPUSH
57100: CALL_OW 250
57104: ST_TO_ADDR
// y := GetY ( tower ) ;
57105: LD_ADDR_VAR 0 11
57109: PUSH
57110: LD_VAR 0 1
57114: PPUSH
57115: CALL_OW 251
57119: ST_TO_ADDR
// if not x or not y then
57120: LD_VAR 0 10
57124: NOT
57125: PUSH
57126: LD_VAR 0 11
57130: NOT
57131: OR
57132: IFFALSE 57136
// exit ;
57134: GO 58169
// weapon := 0 ;
57136: LD_ADDR_VAR 0 18
57140: PUSH
57141: LD_INT 0
57143: ST_TO_ADDR
// fac_list := [ ] ;
57144: LD_ADDR_VAR 0 17
57148: PUSH
57149: EMPTY
57150: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
57151: LD_ADDR_VAR 0 6
57155: PUSH
57156: LD_VAR 0 1
57160: PPUSH
57161: CALL_OW 274
57165: PPUSH
57166: LD_VAR 0 2
57170: PPUSH
57171: LD_INT 0
57173: PPUSH
57174: CALL 54740 0 3
57178: PPUSH
57179: LD_INT 30
57181: PUSH
57182: LD_INT 3
57184: PUSH
57185: EMPTY
57186: LIST
57187: LIST
57188: PPUSH
57189: CALL_OW 72
57193: ST_TO_ADDR
// if not factories then
57194: LD_VAR 0 6
57198: NOT
57199: IFFALSE 57203
// exit ;
57201: GO 58169
// for i in factories do
57203: LD_ADDR_VAR 0 8
57207: PUSH
57208: LD_VAR 0 6
57212: PUSH
57213: FOR_IN
57214: IFFALSE 57239
// fac_list := fac_list union AvailableWeaponList ( i ) ;
57216: LD_ADDR_VAR 0 17
57220: PUSH
57221: LD_VAR 0 17
57225: PUSH
57226: LD_VAR 0 8
57230: PPUSH
57231: CALL_OW 478
57235: UNION
57236: ST_TO_ADDR
57237: GO 57213
57239: POP
57240: POP
// if not fac_list then
57241: LD_VAR 0 17
57245: NOT
57246: IFFALSE 57250
// exit ;
57248: GO 58169
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
57250: LD_ADDR_VAR 0 5
57254: PUSH
57255: LD_INT 4
57257: PUSH
57258: LD_INT 5
57260: PUSH
57261: LD_INT 9
57263: PUSH
57264: LD_INT 10
57266: PUSH
57267: LD_INT 6
57269: PUSH
57270: LD_INT 7
57272: PUSH
57273: LD_INT 11
57275: PUSH
57276: EMPTY
57277: LIST
57278: LIST
57279: LIST
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: PUSH
57285: LD_INT 27
57287: PUSH
57288: LD_INT 28
57290: PUSH
57291: LD_INT 26
57293: PUSH
57294: LD_INT 30
57296: PUSH
57297: EMPTY
57298: LIST
57299: LIST
57300: LIST
57301: LIST
57302: PUSH
57303: LD_INT 43
57305: PUSH
57306: LD_INT 44
57308: PUSH
57309: LD_INT 46
57311: PUSH
57312: LD_INT 45
57314: PUSH
57315: LD_INT 47
57317: PUSH
57318: LD_INT 49
57320: PUSH
57321: EMPTY
57322: LIST
57323: LIST
57324: LIST
57325: LIST
57326: LIST
57327: LIST
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: LIST
57333: PUSH
57334: LD_VAR 0 12
57338: ARRAY
57339: ST_TO_ADDR
// list := list isect fac_list ;
57340: LD_ADDR_VAR 0 5
57344: PUSH
57345: LD_VAR 0 5
57349: PUSH
57350: LD_VAR 0 17
57354: ISECT
57355: ST_TO_ADDR
// if not list then
57356: LD_VAR 0 5
57360: NOT
57361: IFFALSE 57365
// exit ;
57363: GO 58169
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
57365: LD_VAR 0 12
57369: PUSH
57370: LD_INT 3
57372: EQUAL
57373: PUSH
57374: LD_INT 49
57376: PUSH
57377: LD_VAR 0 5
57381: IN
57382: AND
57383: PUSH
57384: LD_INT 31
57386: PPUSH
57387: LD_VAR 0 16
57391: PPUSH
57392: CALL_OW 321
57396: PUSH
57397: LD_INT 2
57399: EQUAL
57400: AND
57401: IFFALSE 57461
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
57403: LD_INT 22
57405: PUSH
57406: LD_VAR 0 16
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 35
57417: PUSH
57418: LD_INT 49
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 91
57427: PUSH
57428: LD_VAR 0 1
57432: PUSH
57433: LD_INT 10
57435: PUSH
57436: EMPTY
57437: LIST
57438: LIST
57439: LIST
57440: PUSH
57441: EMPTY
57442: LIST
57443: LIST
57444: LIST
57445: PPUSH
57446: CALL_OW 69
57450: NOT
57451: IFFALSE 57461
// weapon := ru_time_lapser ;
57453: LD_ADDR_VAR 0 18
57457: PUSH
57458: LD_INT 49
57460: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
57461: LD_VAR 0 12
57465: PUSH
57466: LD_INT 1
57468: PUSH
57469: LD_INT 2
57471: PUSH
57472: EMPTY
57473: LIST
57474: LIST
57475: IN
57476: PUSH
57477: LD_INT 11
57479: PUSH
57480: LD_VAR 0 5
57484: IN
57485: PUSH
57486: LD_INT 30
57488: PUSH
57489: LD_VAR 0 5
57493: IN
57494: OR
57495: AND
57496: PUSH
57497: LD_INT 6
57499: PPUSH
57500: LD_VAR 0 16
57504: PPUSH
57505: CALL_OW 321
57509: PUSH
57510: LD_INT 2
57512: EQUAL
57513: AND
57514: IFFALSE 57679
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
57516: LD_INT 22
57518: PUSH
57519: LD_VAR 0 16
57523: PUSH
57524: EMPTY
57525: LIST
57526: LIST
57527: PUSH
57528: LD_INT 2
57530: PUSH
57531: LD_INT 35
57533: PUSH
57534: LD_INT 11
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: PUSH
57541: LD_INT 35
57543: PUSH
57544: LD_INT 30
57546: PUSH
57547: EMPTY
57548: LIST
57549: LIST
57550: PUSH
57551: EMPTY
57552: LIST
57553: LIST
57554: LIST
57555: PUSH
57556: LD_INT 91
57558: PUSH
57559: LD_VAR 0 1
57563: PUSH
57564: LD_INT 18
57566: PUSH
57567: EMPTY
57568: LIST
57569: LIST
57570: LIST
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: LIST
57576: PPUSH
57577: CALL_OW 69
57581: NOT
57582: PUSH
57583: LD_INT 22
57585: PUSH
57586: LD_VAR 0 16
57590: PUSH
57591: EMPTY
57592: LIST
57593: LIST
57594: PUSH
57595: LD_INT 2
57597: PUSH
57598: LD_INT 30
57600: PUSH
57601: LD_INT 32
57603: PUSH
57604: EMPTY
57605: LIST
57606: LIST
57607: PUSH
57608: LD_INT 30
57610: PUSH
57611: LD_INT 33
57613: PUSH
57614: EMPTY
57615: LIST
57616: LIST
57617: PUSH
57618: EMPTY
57619: LIST
57620: LIST
57621: LIST
57622: PUSH
57623: LD_INT 91
57625: PUSH
57626: LD_VAR 0 1
57630: PUSH
57631: LD_INT 12
57633: PUSH
57634: EMPTY
57635: LIST
57636: LIST
57637: LIST
57638: PUSH
57639: EMPTY
57640: LIST
57641: LIST
57642: LIST
57643: PUSH
57644: EMPTY
57645: LIST
57646: PPUSH
57647: CALL_OW 69
57651: PUSH
57652: LD_INT 2
57654: GREATER
57655: AND
57656: IFFALSE 57679
// weapon := [ us_radar , ar_radar ] [ nat ] ;
57658: LD_ADDR_VAR 0 18
57662: PUSH
57663: LD_INT 11
57665: PUSH
57666: LD_INT 30
57668: PUSH
57669: EMPTY
57670: LIST
57671: LIST
57672: PUSH
57673: LD_VAR 0 12
57677: ARRAY
57678: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
57679: LD_VAR 0 18
57683: NOT
57684: PUSH
57685: LD_INT 40
57687: PPUSH
57688: LD_VAR 0 16
57692: PPUSH
57693: CALL_OW 321
57697: PUSH
57698: LD_INT 2
57700: EQUAL
57701: AND
57702: PUSH
57703: LD_INT 7
57705: PUSH
57706: LD_VAR 0 5
57710: IN
57711: PUSH
57712: LD_INT 28
57714: PUSH
57715: LD_VAR 0 5
57719: IN
57720: OR
57721: PUSH
57722: LD_INT 45
57724: PUSH
57725: LD_VAR 0 5
57729: IN
57730: OR
57731: AND
57732: IFFALSE 57986
// begin hex := GetHexInfo ( x , y ) ;
57734: LD_ADDR_VAR 0 4
57738: PUSH
57739: LD_VAR 0 10
57743: PPUSH
57744: LD_VAR 0 11
57748: PPUSH
57749: CALL_OW 546
57753: ST_TO_ADDR
// if hex [ 1 ] then
57754: LD_VAR 0 4
57758: PUSH
57759: LD_INT 1
57761: ARRAY
57762: IFFALSE 57766
// exit ;
57764: GO 58169
// height := hex [ 2 ] ;
57766: LD_ADDR_VAR 0 15
57770: PUSH
57771: LD_VAR 0 4
57775: PUSH
57776: LD_INT 2
57778: ARRAY
57779: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
57780: LD_ADDR_VAR 0 14
57784: PUSH
57785: LD_INT 0
57787: PUSH
57788: LD_INT 2
57790: PUSH
57791: LD_INT 3
57793: PUSH
57794: LD_INT 5
57796: PUSH
57797: EMPTY
57798: LIST
57799: LIST
57800: LIST
57801: LIST
57802: ST_TO_ADDR
// for i in tmp do
57803: LD_ADDR_VAR 0 8
57807: PUSH
57808: LD_VAR 0 14
57812: PUSH
57813: FOR_IN
57814: IFFALSE 57984
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
57816: LD_ADDR_VAR 0 9
57820: PUSH
57821: LD_VAR 0 10
57825: PPUSH
57826: LD_VAR 0 8
57830: PPUSH
57831: LD_INT 5
57833: PPUSH
57834: CALL_OW 272
57838: PUSH
57839: LD_VAR 0 11
57843: PPUSH
57844: LD_VAR 0 8
57848: PPUSH
57849: LD_INT 5
57851: PPUSH
57852: CALL_OW 273
57856: PUSH
57857: EMPTY
57858: LIST
57859: LIST
57860: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
57861: LD_VAR 0 9
57865: PUSH
57866: LD_INT 1
57868: ARRAY
57869: PPUSH
57870: LD_VAR 0 9
57874: PUSH
57875: LD_INT 2
57877: ARRAY
57878: PPUSH
57879: CALL_OW 488
57883: IFFALSE 57982
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
57885: LD_ADDR_VAR 0 4
57889: PUSH
57890: LD_VAR 0 9
57894: PUSH
57895: LD_INT 1
57897: ARRAY
57898: PPUSH
57899: LD_VAR 0 9
57903: PUSH
57904: LD_INT 2
57906: ARRAY
57907: PPUSH
57908: CALL_OW 546
57912: ST_TO_ADDR
// if hex [ 1 ] then
57913: LD_VAR 0 4
57917: PUSH
57918: LD_INT 1
57920: ARRAY
57921: IFFALSE 57925
// continue ;
57923: GO 57813
// h := hex [ 2 ] ;
57925: LD_ADDR_VAR 0 13
57929: PUSH
57930: LD_VAR 0 4
57934: PUSH
57935: LD_INT 2
57937: ARRAY
57938: ST_TO_ADDR
// if h + 7 < height then
57939: LD_VAR 0 13
57943: PUSH
57944: LD_INT 7
57946: PLUS
57947: PUSH
57948: LD_VAR 0 15
57952: LESS
57953: IFFALSE 57982
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
57955: LD_ADDR_VAR 0 18
57959: PUSH
57960: LD_INT 7
57962: PUSH
57963: LD_INT 28
57965: PUSH
57966: LD_INT 45
57968: PUSH
57969: EMPTY
57970: LIST
57971: LIST
57972: LIST
57973: PUSH
57974: LD_VAR 0 12
57978: ARRAY
57979: ST_TO_ADDR
// break ;
57980: GO 57984
// end ; end ; end ;
57982: GO 57813
57984: POP
57985: POP
// end ; if not weapon then
57986: LD_VAR 0 18
57990: NOT
57991: IFFALSE 58051
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
57993: LD_ADDR_VAR 0 5
57997: PUSH
57998: LD_VAR 0 5
58002: PUSH
58003: LD_INT 11
58005: PUSH
58006: LD_INT 30
58008: PUSH
58009: LD_INT 49
58011: PUSH
58012: EMPTY
58013: LIST
58014: LIST
58015: LIST
58016: DIFF
58017: ST_TO_ADDR
// if not list then
58018: LD_VAR 0 5
58022: NOT
58023: IFFALSE 58027
// exit ;
58025: GO 58169
// weapon := list [ rand ( 1 , list ) ] ;
58027: LD_ADDR_VAR 0 18
58031: PUSH
58032: LD_VAR 0 5
58036: PUSH
58037: LD_INT 1
58039: PPUSH
58040: LD_VAR 0 5
58044: PPUSH
58045: CALL_OW 12
58049: ARRAY
58050: ST_TO_ADDR
// end ; if weapon then
58051: LD_VAR 0 18
58055: IFFALSE 58169
// begin tmp := CostOfWeapon ( weapon ) ;
58057: LD_ADDR_VAR 0 14
58061: PUSH
58062: LD_VAR 0 18
58066: PPUSH
58067: CALL_OW 451
58071: ST_TO_ADDR
// j := GetBase ( tower ) ;
58072: LD_ADDR_VAR 0 9
58076: PUSH
58077: LD_VAR 0 1
58081: PPUSH
58082: CALL_OW 274
58086: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
58087: LD_VAR 0 9
58091: PPUSH
58092: LD_INT 1
58094: PPUSH
58095: CALL_OW 275
58099: PUSH
58100: LD_VAR 0 14
58104: PUSH
58105: LD_INT 1
58107: ARRAY
58108: GREATEREQUAL
58109: PUSH
58110: LD_VAR 0 9
58114: PPUSH
58115: LD_INT 2
58117: PPUSH
58118: CALL_OW 275
58122: PUSH
58123: LD_VAR 0 14
58127: PUSH
58128: LD_INT 2
58130: ARRAY
58131: GREATEREQUAL
58132: AND
58133: PUSH
58134: LD_VAR 0 9
58138: PPUSH
58139: LD_INT 3
58141: PPUSH
58142: CALL_OW 275
58146: PUSH
58147: LD_VAR 0 14
58151: PUSH
58152: LD_INT 3
58154: ARRAY
58155: GREATEREQUAL
58156: AND
58157: IFFALSE 58169
// result := weapon ;
58159: LD_ADDR_VAR 0 3
58163: PUSH
58164: LD_VAR 0 18
58168: ST_TO_ADDR
// end ; end ;
58169: LD_VAR 0 3
58173: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
58174: LD_INT 0
58176: PPUSH
58177: PPUSH
// result := true ;
58178: LD_ADDR_VAR 0 3
58182: PUSH
58183: LD_INT 1
58185: ST_TO_ADDR
// if array1 = array2 then
58186: LD_VAR 0 1
58190: PUSH
58191: LD_VAR 0 2
58195: EQUAL
58196: IFFALSE 58256
// begin for i = 1 to array1 do
58198: LD_ADDR_VAR 0 4
58202: PUSH
58203: DOUBLE
58204: LD_INT 1
58206: DEC
58207: ST_TO_ADDR
58208: LD_VAR 0 1
58212: PUSH
58213: FOR_TO
58214: IFFALSE 58252
// if array1 [ i ] <> array2 [ i ] then
58216: LD_VAR 0 1
58220: PUSH
58221: LD_VAR 0 4
58225: ARRAY
58226: PUSH
58227: LD_VAR 0 2
58231: PUSH
58232: LD_VAR 0 4
58236: ARRAY
58237: NONEQUAL
58238: IFFALSE 58250
// begin result := false ;
58240: LD_ADDR_VAR 0 3
58244: PUSH
58245: LD_INT 0
58247: ST_TO_ADDR
// break ;
58248: GO 58252
// end ;
58250: GO 58213
58252: POP
58253: POP
// end else
58254: GO 58264
// result := false ;
58256: LD_ADDR_VAR 0 3
58260: PUSH
58261: LD_INT 0
58263: ST_TO_ADDR
// end ;
58264: LD_VAR 0 3
58268: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
58269: LD_INT 0
58271: PPUSH
58272: PPUSH
// if not array1 or not array2 then
58273: LD_VAR 0 1
58277: NOT
58278: PUSH
58279: LD_VAR 0 2
58283: NOT
58284: OR
58285: IFFALSE 58289
// exit ;
58287: GO 58353
// result := true ;
58289: LD_ADDR_VAR 0 3
58293: PUSH
58294: LD_INT 1
58296: ST_TO_ADDR
// for i = 1 to array1 do
58297: LD_ADDR_VAR 0 4
58301: PUSH
58302: DOUBLE
58303: LD_INT 1
58305: DEC
58306: ST_TO_ADDR
58307: LD_VAR 0 1
58311: PUSH
58312: FOR_TO
58313: IFFALSE 58351
// if array1 [ i ] <> array2 [ i ] then
58315: LD_VAR 0 1
58319: PUSH
58320: LD_VAR 0 4
58324: ARRAY
58325: PUSH
58326: LD_VAR 0 2
58330: PUSH
58331: LD_VAR 0 4
58335: ARRAY
58336: NONEQUAL
58337: IFFALSE 58349
// begin result := false ;
58339: LD_ADDR_VAR 0 3
58343: PUSH
58344: LD_INT 0
58346: ST_TO_ADDR
// break ;
58347: GO 58351
// end ;
58349: GO 58312
58351: POP
58352: POP
// end ;
58353: LD_VAR 0 3
58357: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
58358: LD_INT 0
58360: PPUSH
58361: PPUSH
58362: PPUSH
// pom := GetBase ( fac ) ;
58363: LD_ADDR_VAR 0 5
58367: PUSH
58368: LD_VAR 0 1
58372: PPUSH
58373: CALL_OW 274
58377: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
58378: LD_ADDR_VAR 0 4
58382: PUSH
58383: LD_VAR 0 2
58387: PUSH
58388: LD_INT 1
58390: ARRAY
58391: PPUSH
58392: LD_VAR 0 2
58396: PUSH
58397: LD_INT 2
58399: ARRAY
58400: PPUSH
58401: LD_VAR 0 2
58405: PUSH
58406: LD_INT 3
58408: ARRAY
58409: PPUSH
58410: LD_VAR 0 2
58414: PUSH
58415: LD_INT 4
58417: ARRAY
58418: PPUSH
58419: CALL_OW 449
58423: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
58424: LD_ADDR_VAR 0 3
58428: PUSH
58429: LD_VAR 0 5
58433: PPUSH
58434: LD_INT 1
58436: PPUSH
58437: CALL_OW 275
58441: PUSH
58442: LD_VAR 0 4
58446: PUSH
58447: LD_INT 1
58449: ARRAY
58450: GREATEREQUAL
58451: PUSH
58452: LD_VAR 0 5
58456: PPUSH
58457: LD_INT 2
58459: PPUSH
58460: CALL_OW 275
58464: PUSH
58465: LD_VAR 0 4
58469: PUSH
58470: LD_INT 2
58472: ARRAY
58473: GREATEREQUAL
58474: AND
58475: PUSH
58476: LD_VAR 0 5
58480: PPUSH
58481: LD_INT 3
58483: PPUSH
58484: CALL_OW 275
58488: PUSH
58489: LD_VAR 0 4
58493: PUSH
58494: LD_INT 3
58496: ARRAY
58497: GREATEREQUAL
58498: AND
58499: ST_TO_ADDR
// end ;
58500: LD_VAR 0 3
58504: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
58505: LD_INT 0
58507: PPUSH
58508: PPUSH
58509: PPUSH
58510: PPUSH
// pom := GetBase ( building ) ;
58511: LD_ADDR_VAR 0 3
58515: PUSH
58516: LD_VAR 0 1
58520: PPUSH
58521: CALL_OW 274
58525: ST_TO_ADDR
// if not pom then
58526: LD_VAR 0 3
58530: NOT
58531: IFFALSE 58535
// exit ;
58533: GO 58705
// btype := GetBType ( building ) ;
58535: LD_ADDR_VAR 0 5
58539: PUSH
58540: LD_VAR 0 1
58544: PPUSH
58545: CALL_OW 266
58549: ST_TO_ADDR
// if btype = b_armoury then
58550: LD_VAR 0 5
58554: PUSH
58555: LD_INT 4
58557: EQUAL
58558: IFFALSE 58568
// btype := b_barracks ;
58560: LD_ADDR_VAR 0 5
58564: PUSH
58565: LD_INT 5
58567: ST_TO_ADDR
// if btype = b_depot then
58568: LD_VAR 0 5
58572: PUSH
58573: LD_INT 0
58575: EQUAL
58576: IFFALSE 58586
// btype := b_warehouse ;
58578: LD_ADDR_VAR 0 5
58582: PUSH
58583: LD_INT 1
58585: ST_TO_ADDR
// if btype = b_workshop then
58586: LD_VAR 0 5
58590: PUSH
58591: LD_INT 2
58593: EQUAL
58594: IFFALSE 58604
// btype := b_factory ;
58596: LD_ADDR_VAR 0 5
58600: PUSH
58601: LD_INT 3
58603: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
58604: LD_ADDR_VAR 0 4
58608: PUSH
58609: LD_VAR 0 5
58613: PPUSH
58614: LD_VAR 0 1
58618: PPUSH
58619: CALL_OW 248
58623: PPUSH
58624: CALL_OW 450
58628: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
58629: LD_ADDR_VAR 0 2
58633: PUSH
58634: LD_VAR 0 3
58638: PPUSH
58639: LD_INT 1
58641: PPUSH
58642: CALL_OW 275
58646: PUSH
58647: LD_VAR 0 4
58651: PUSH
58652: LD_INT 1
58654: ARRAY
58655: GREATEREQUAL
58656: PUSH
58657: LD_VAR 0 3
58661: PPUSH
58662: LD_INT 2
58664: PPUSH
58665: CALL_OW 275
58669: PUSH
58670: LD_VAR 0 4
58674: PUSH
58675: LD_INT 2
58677: ARRAY
58678: GREATEREQUAL
58679: AND
58680: PUSH
58681: LD_VAR 0 3
58685: PPUSH
58686: LD_INT 3
58688: PPUSH
58689: CALL_OW 275
58693: PUSH
58694: LD_VAR 0 4
58698: PUSH
58699: LD_INT 3
58701: ARRAY
58702: GREATEREQUAL
58703: AND
58704: ST_TO_ADDR
// end ;
58705: LD_VAR 0 2
58709: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
58710: LD_INT 0
58712: PPUSH
58713: PPUSH
58714: PPUSH
// pom := GetBase ( building ) ;
58715: LD_ADDR_VAR 0 4
58719: PUSH
58720: LD_VAR 0 1
58724: PPUSH
58725: CALL_OW 274
58729: ST_TO_ADDR
// if not pom then
58730: LD_VAR 0 4
58734: NOT
58735: IFFALSE 58739
// exit ;
58737: GO 58840
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
58739: LD_ADDR_VAR 0 5
58743: PUSH
58744: LD_VAR 0 2
58748: PPUSH
58749: LD_VAR 0 1
58753: PPUSH
58754: CALL_OW 248
58758: PPUSH
58759: CALL_OW 450
58763: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
58764: LD_ADDR_VAR 0 3
58768: PUSH
58769: LD_VAR 0 4
58773: PPUSH
58774: LD_INT 1
58776: PPUSH
58777: CALL_OW 275
58781: PUSH
58782: LD_VAR 0 5
58786: PUSH
58787: LD_INT 1
58789: ARRAY
58790: GREATEREQUAL
58791: PUSH
58792: LD_VAR 0 4
58796: PPUSH
58797: LD_INT 2
58799: PPUSH
58800: CALL_OW 275
58804: PUSH
58805: LD_VAR 0 5
58809: PUSH
58810: LD_INT 2
58812: ARRAY
58813: GREATEREQUAL
58814: AND
58815: PUSH
58816: LD_VAR 0 4
58820: PPUSH
58821: LD_INT 3
58823: PPUSH
58824: CALL_OW 275
58828: PUSH
58829: LD_VAR 0 5
58833: PUSH
58834: LD_INT 3
58836: ARRAY
58837: GREATEREQUAL
58838: AND
58839: ST_TO_ADDR
// end ;
58840: LD_VAR 0 3
58844: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
58845: LD_INT 0
58847: PPUSH
58848: PPUSH
58849: PPUSH
58850: PPUSH
58851: PPUSH
58852: PPUSH
58853: PPUSH
58854: PPUSH
58855: PPUSH
58856: PPUSH
58857: PPUSH
// result := false ;
58858: LD_ADDR_VAR 0 8
58862: PUSH
58863: LD_INT 0
58865: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
58866: LD_VAR 0 5
58870: NOT
58871: PUSH
58872: LD_VAR 0 1
58876: NOT
58877: OR
58878: PUSH
58879: LD_VAR 0 2
58883: NOT
58884: OR
58885: PUSH
58886: LD_VAR 0 3
58890: NOT
58891: OR
58892: IFFALSE 58896
// exit ;
58894: GO 59710
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
58896: LD_ADDR_VAR 0 14
58900: PUSH
58901: LD_VAR 0 1
58905: PPUSH
58906: LD_VAR 0 2
58910: PPUSH
58911: LD_VAR 0 3
58915: PPUSH
58916: LD_VAR 0 4
58920: PPUSH
58921: LD_VAR 0 5
58925: PUSH
58926: LD_INT 1
58928: ARRAY
58929: PPUSH
58930: CALL_OW 248
58934: PPUSH
58935: LD_INT 0
58937: PPUSH
58938: CALL 60947 0 6
58942: ST_TO_ADDR
// if not hexes then
58943: LD_VAR 0 14
58947: NOT
58948: IFFALSE 58952
// exit ;
58950: GO 59710
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58952: LD_ADDR_VAR 0 17
58956: PUSH
58957: LD_VAR 0 5
58961: PPUSH
58962: LD_INT 22
58964: PUSH
58965: LD_VAR 0 13
58969: PPUSH
58970: CALL_OW 255
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: LD_INT 2
58981: PUSH
58982: LD_INT 30
58984: PUSH
58985: LD_INT 0
58987: PUSH
58988: EMPTY
58989: LIST
58990: LIST
58991: PUSH
58992: LD_INT 30
58994: PUSH
58995: LD_INT 1
58997: PUSH
58998: EMPTY
58999: LIST
59000: LIST
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: LIST
59006: PUSH
59007: EMPTY
59008: LIST
59009: LIST
59010: PPUSH
59011: CALL_OW 72
59015: ST_TO_ADDR
// for i = 1 to hexes do
59016: LD_ADDR_VAR 0 9
59020: PUSH
59021: DOUBLE
59022: LD_INT 1
59024: DEC
59025: ST_TO_ADDR
59026: LD_VAR 0 14
59030: PUSH
59031: FOR_TO
59032: IFFALSE 59708
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
59034: LD_ADDR_VAR 0 13
59038: PUSH
59039: LD_VAR 0 14
59043: PUSH
59044: LD_VAR 0 9
59048: ARRAY
59049: PUSH
59050: LD_INT 1
59052: ARRAY
59053: PPUSH
59054: LD_VAR 0 14
59058: PUSH
59059: LD_VAR 0 9
59063: ARRAY
59064: PUSH
59065: LD_INT 2
59067: ARRAY
59068: PPUSH
59069: CALL_OW 428
59073: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
59074: LD_VAR 0 14
59078: PUSH
59079: LD_VAR 0 9
59083: ARRAY
59084: PUSH
59085: LD_INT 1
59087: ARRAY
59088: PPUSH
59089: LD_VAR 0 14
59093: PUSH
59094: LD_VAR 0 9
59098: ARRAY
59099: PUSH
59100: LD_INT 2
59102: ARRAY
59103: PPUSH
59104: CALL_OW 351
59108: PUSH
59109: LD_VAR 0 14
59113: PUSH
59114: LD_VAR 0 9
59118: ARRAY
59119: PUSH
59120: LD_INT 1
59122: ARRAY
59123: PPUSH
59124: LD_VAR 0 14
59128: PUSH
59129: LD_VAR 0 9
59133: ARRAY
59134: PUSH
59135: LD_INT 2
59137: ARRAY
59138: PPUSH
59139: CALL_OW 488
59143: NOT
59144: OR
59145: PUSH
59146: LD_VAR 0 13
59150: PPUSH
59151: CALL_OW 247
59155: PUSH
59156: LD_INT 3
59158: EQUAL
59159: OR
59160: IFFALSE 59166
// exit ;
59162: POP
59163: POP
59164: GO 59710
// if not tmp then
59166: LD_VAR 0 13
59170: NOT
59171: IFFALSE 59175
// continue ;
59173: GO 59031
// result := true ;
59175: LD_ADDR_VAR 0 8
59179: PUSH
59180: LD_INT 1
59182: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
59183: LD_VAR 0 6
59187: PUSH
59188: LD_VAR 0 13
59192: PPUSH
59193: CALL_OW 247
59197: PUSH
59198: LD_INT 2
59200: EQUAL
59201: AND
59202: PUSH
59203: LD_VAR 0 13
59207: PPUSH
59208: CALL_OW 263
59212: PUSH
59213: LD_INT 1
59215: EQUAL
59216: AND
59217: IFFALSE 59381
// begin if IsDrivenBy ( tmp ) then
59219: LD_VAR 0 13
59223: PPUSH
59224: CALL_OW 311
59228: IFFALSE 59232
// continue ;
59230: GO 59031
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
59232: LD_VAR 0 6
59236: PPUSH
59237: LD_INT 3
59239: PUSH
59240: LD_INT 60
59242: PUSH
59243: EMPTY
59244: LIST
59245: PUSH
59246: EMPTY
59247: LIST
59248: LIST
59249: PUSH
59250: LD_INT 3
59252: PUSH
59253: LD_INT 55
59255: PUSH
59256: EMPTY
59257: LIST
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: EMPTY
59264: LIST
59265: LIST
59266: PPUSH
59267: CALL_OW 72
59271: IFFALSE 59379
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
59273: LD_ADDR_VAR 0 18
59277: PUSH
59278: LD_VAR 0 6
59282: PPUSH
59283: LD_INT 3
59285: PUSH
59286: LD_INT 60
59288: PUSH
59289: EMPTY
59290: LIST
59291: PUSH
59292: EMPTY
59293: LIST
59294: LIST
59295: PUSH
59296: LD_INT 3
59298: PUSH
59299: LD_INT 55
59301: PUSH
59302: EMPTY
59303: LIST
59304: PUSH
59305: EMPTY
59306: LIST
59307: LIST
59308: PUSH
59309: EMPTY
59310: LIST
59311: LIST
59312: PPUSH
59313: CALL_OW 72
59317: PUSH
59318: LD_INT 1
59320: ARRAY
59321: ST_TO_ADDR
// if IsInUnit ( driver ) then
59322: LD_VAR 0 18
59326: PPUSH
59327: CALL_OW 310
59331: IFFALSE 59342
// ComExit ( driver ) ;
59333: LD_VAR 0 18
59337: PPUSH
59338: CALL 84131 0 1
// AddComEnterUnit ( driver , tmp ) ;
59342: LD_VAR 0 18
59346: PPUSH
59347: LD_VAR 0 13
59351: PPUSH
59352: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
59356: LD_VAR 0 18
59360: PPUSH
59361: LD_VAR 0 7
59365: PPUSH
59366: CALL_OW 173
// AddComExitVehicle ( driver ) ;
59370: LD_VAR 0 18
59374: PPUSH
59375: CALL_OW 181
// end ; continue ;
59379: GO 59031
// end ; if not cleaners or not tmp in cleaners then
59381: LD_VAR 0 6
59385: NOT
59386: PUSH
59387: LD_VAR 0 13
59391: PUSH
59392: LD_VAR 0 6
59396: IN
59397: NOT
59398: OR
59399: IFFALSE 59706
// begin if dep then
59401: LD_VAR 0 17
59405: IFFALSE 59541
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
59407: LD_ADDR_VAR 0 16
59411: PUSH
59412: LD_VAR 0 17
59416: PUSH
59417: LD_INT 1
59419: ARRAY
59420: PPUSH
59421: CALL_OW 250
59425: PPUSH
59426: LD_VAR 0 17
59430: PUSH
59431: LD_INT 1
59433: ARRAY
59434: PPUSH
59435: CALL_OW 254
59439: PPUSH
59440: LD_INT 5
59442: PPUSH
59443: CALL_OW 272
59447: PUSH
59448: LD_VAR 0 17
59452: PUSH
59453: LD_INT 1
59455: ARRAY
59456: PPUSH
59457: CALL_OW 251
59461: PPUSH
59462: LD_VAR 0 17
59466: PUSH
59467: LD_INT 1
59469: ARRAY
59470: PPUSH
59471: CALL_OW 254
59475: PPUSH
59476: LD_INT 5
59478: PPUSH
59479: CALL_OW 273
59483: PUSH
59484: EMPTY
59485: LIST
59486: LIST
59487: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
59488: LD_VAR 0 16
59492: PUSH
59493: LD_INT 1
59495: ARRAY
59496: PPUSH
59497: LD_VAR 0 16
59501: PUSH
59502: LD_INT 2
59504: ARRAY
59505: PPUSH
59506: CALL_OW 488
59510: IFFALSE 59541
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
59512: LD_VAR 0 13
59516: PPUSH
59517: LD_VAR 0 16
59521: PUSH
59522: LD_INT 1
59524: ARRAY
59525: PPUSH
59526: LD_VAR 0 16
59530: PUSH
59531: LD_INT 2
59533: ARRAY
59534: PPUSH
59535: CALL_OW 111
// continue ;
59539: GO 59031
// end ; end ; r := GetDir ( tmp ) ;
59541: LD_ADDR_VAR 0 15
59545: PUSH
59546: LD_VAR 0 13
59550: PPUSH
59551: CALL_OW 254
59555: ST_TO_ADDR
// if r = 5 then
59556: LD_VAR 0 15
59560: PUSH
59561: LD_INT 5
59563: EQUAL
59564: IFFALSE 59574
// r := 0 ;
59566: LD_ADDR_VAR 0 15
59570: PUSH
59571: LD_INT 0
59573: ST_TO_ADDR
// for j = r to 5 do
59574: LD_ADDR_VAR 0 10
59578: PUSH
59579: DOUBLE
59580: LD_VAR 0 15
59584: DEC
59585: ST_TO_ADDR
59586: LD_INT 5
59588: PUSH
59589: FOR_TO
59590: IFFALSE 59704
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
59592: LD_ADDR_VAR 0 11
59596: PUSH
59597: LD_VAR 0 13
59601: PPUSH
59602: CALL_OW 250
59606: PPUSH
59607: LD_VAR 0 10
59611: PPUSH
59612: LD_INT 2
59614: PPUSH
59615: CALL_OW 272
59619: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
59620: LD_ADDR_VAR 0 12
59624: PUSH
59625: LD_VAR 0 13
59629: PPUSH
59630: CALL_OW 251
59634: PPUSH
59635: LD_VAR 0 10
59639: PPUSH
59640: LD_INT 2
59642: PPUSH
59643: CALL_OW 273
59647: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
59648: LD_VAR 0 11
59652: PPUSH
59653: LD_VAR 0 12
59657: PPUSH
59658: CALL_OW 488
59662: PUSH
59663: LD_VAR 0 11
59667: PPUSH
59668: LD_VAR 0 12
59672: PPUSH
59673: CALL_OW 428
59677: NOT
59678: AND
59679: IFFALSE 59702
// begin ComMoveXY ( tmp , _x , _y ) ;
59681: LD_VAR 0 13
59685: PPUSH
59686: LD_VAR 0 11
59690: PPUSH
59691: LD_VAR 0 12
59695: PPUSH
59696: CALL_OW 111
// break ;
59700: GO 59704
// end ; end ;
59702: GO 59589
59704: POP
59705: POP
// end ; end ;
59706: GO 59031
59708: POP
59709: POP
// end ;
59710: LD_VAR 0 8
59714: RET
// export function BuildingTechInvented ( side , btype ) ; begin
59715: LD_INT 0
59717: PPUSH
// result := true ;
59718: LD_ADDR_VAR 0 3
59722: PUSH
59723: LD_INT 1
59725: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
59726: LD_VAR 0 2
59730: PUSH
59731: LD_INT 24
59733: DOUBLE
59734: EQUAL
59735: IFTRUE 59745
59737: LD_INT 33
59739: DOUBLE
59740: EQUAL
59741: IFTRUE 59745
59743: GO 59770
59745: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
59746: LD_ADDR_VAR 0 3
59750: PUSH
59751: LD_INT 32
59753: PPUSH
59754: LD_VAR 0 1
59758: PPUSH
59759: CALL_OW 321
59763: PUSH
59764: LD_INT 2
59766: EQUAL
59767: ST_TO_ADDR
59768: GO 60090
59770: LD_INT 20
59772: DOUBLE
59773: EQUAL
59774: IFTRUE 59778
59776: GO 59803
59778: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
59779: LD_ADDR_VAR 0 3
59783: PUSH
59784: LD_INT 6
59786: PPUSH
59787: LD_VAR 0 1
59791: PPUSH
59792: CALL_OW 321
59796: PUSH
59797: LD_INT 2
59799: EQUAL
59800: ST_TO_ADDR
59801: GO 60090
59803: LD_INT 22
59805: DOUBLE
59806: EQUAL
59807: IFTRUE 59817
59809: LD_INT 36
59811: DOUBLE
59812: EQUAL
59813: IFTRUE 59817
59815: GO 59842
59817: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
59818: LD_ADDR_VAR 0 3
59822: PUSH
59823: LD_INT 15
59825: PPUSH
59826: LD_VAR 0 1
59830: PPUSH
59831: CALL_OW 321
59835: PUSH
59836: LD_INT 2
59838: EQUAL
59839: ST_TO_ADDR
59840: GO 60090
59842: LD_INT 30
59844: DOUBLE
59845: EQUAL
59846: IFTRUE 59850
59848: GO 59875
59850: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
59851: LD_ADDR_VAR 0 3
59855: PUSH
59856: LD_INT 20
59858: PPUSH
59859: LD_VAR 0 1
59863: PPUSH
59864: CALL_OW 321
59868: PUSH
59869: LD_INT 2
59871: EQUAL
59872: ST_TO_ADDR
59873: GO 60090
59875: LD_INT 28
59877: DOUBLE
59878: EQUAL
59879: IFTRUE 59889
59881: LD_INT 21
59883: DOUBLE
59884: EQUAL
59885: IFTRUE 59889
59887: GO 59914
59889: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
59890: LD_ADDR_VAR 0 3
59894: PUSH
59895: LD_INT 21
59897: PPUSH
59898: LD_VAR 0 1
59902: PPUSH
59903: CALL_OW 321
59907: PUSH
59908: LD_INT 2
59910: EQUAL
59911: ST_TO_ADDR
59912: GO 60090
59914: LD_INT 16
59916: DOUBLE
59917: EQUAL
59918: IFTRUE 59922
59920: GO 59949
59922: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
59923: LD_ADDR_VAR 0 3
59927: PUSH
59928: LD_EXP 81
59932: PPUSH
59933: LD_VAR 0 1
59937: PPUSH
59938: CALL_OW 321
59942: PUSH
59943: LD_INT 2
59945: EQUAL
59946: ST_TO_ADDR
59947: GO 60090
59949: LD_INT 19
59951: DOUBLE
59952: EQUAL
59953: IFTRUE 59963
59955: LD_INT 23
59957: DOUBLE
59958: EQUAL
59959: IFTRUE 59963
59961: GO 59990
59963: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
59964: LD_ADDR_VAR 0 3
59968: PUSH
59969: LD_EXP 80
59973: PPUSH
59974: LD_VAR 0 1
59978: PPUSH
59979: CALL_OW 321
59983: PUSH
59984: LD_INT 2
59986: EQUAL
59987: ST_TO_ADDR
59988: GO 60090
59990: LD_INT 17
59992: DOUBLE
59993: EQUAL
59994: IFTRUE 59998
59996: GO 60023
59998: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
59999: LD_ADDR_VAR 0 3
60003: PUSH
60004: LD_INT 39
60006: PPUSH
60007: LD_VAR 0 1
60011: PPUSH
60012: CALL_OW 321
60016: PUSH
60017: LD_INT 2
60019: EQUAL
60020: ST_TO_ADDR
60021: GO 60090
60023: LD_INT 18
60025: DOUBLE
60026: EQUAL
60027: IFTRUE 60031
60029: GO 60056
60031: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
60032: LD_ADDR_VAR 0 3
60036: PUSH
60037: LD_INT 40
60039: PPUSH
60040: LD_VAR 0 1
60044: PPUSH
60045: CALL_OW 321
60049: PUSH
60050: LD_INT 2
60052: EQUAL
60053: ST_TO_ADDR
60054: GO 60090
60056: LD_INT 27
60058: DOUBLE
60059: EQUAL
60060: IFTRUE 60064
60062: GO 60089
60064: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
60065: LD_ADDR_VAR 0 3
60069: PUSH
60070: LD_INT 35
60072: PPUSH
60073: LD_VAR 0 1
60077: PPUSH
60078: CALL_OW 321
60082: PUSH
60083: LD_INT 2
60085: EQUAL
60086: ST_TO_ADDR
60087: GO 60090
60089: POP
// end ;
60090: LD_VAR 0 3
60094: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
60095: LD_INT 0
60097: PPUSH
60098: PPUSH
60099: PPUSH
60100: PPUSH
60101: PPUSH
60102: PPUSH
60103: PPUSH
60104: PPUSH
60105: PPUSH
60106: PPUSH
60107: PPUSH
// result := false ;
60108: LD_ADDR_VAR 0 6
60112: PUSH
60113: LD_INT 0
60115: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
60116: LD_VAR 0 1
60120: NOT
60121: PUSH
60122: LD_VAR 0 1
60126: PPUSH
60127: CALL_OW 266
60131: PUSH
60132: LD_INT 0
60134: PUSH
60135: LD_INT 1
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: IN
60142: NOT
60143: OR
60144: PUSH
60145: LD_VAR 0 2
60149: NOT
60150: OR
60151: PUSH
60152: LD_VAR 0 5
60156: PUSH
60157: LD_INT 0
60159: PUSH
60160: LD_INT 1
60162: PUSH
60163: LD_INT 2
60165: PUSH
60166: LD_INT 3
60168: PUSH
60169: LD_INT 4
60171: PUSH
60172: LD_INT 5
60174: PUSH
60175: EMPTY
60176: LIST
60177: LIST
60178: LIST
60179: LIST
60180: LIST
60181: LIST
60182: IN
60183: NOT
60184: OR
60185: PUSH
60186: LD_VAR 0 3
60190: PPUSH
60191: LD_VAR 0 4
60195: PPUSH
60196: CALL_OW 488
60200: NOT
60201: OR
60202: IFFALSE 60206
// exit ;
60204: GO 60942
// side := GetSide ( depot ) ;
60206: LD_ADDR_VAR 0 9
60210: PUSH
60211: LD_VAR 0 1
60215: PPUSH
60216: CALL_OW 255
60220: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
60221: LD_VAR 0 9
60225: PPUSH
60226: LD_VAR 0 2
60230: PPUSH
60231: CALL 59715 0 2
60235: NOT
60236: IFFALSE 60240
// exit ;
60238: GO 60942
// pom := GetBase ( depot ) ;
60240: LD_ADDR_VAR 0 10
60244: PUSH
60245: LD_VAR 0 1
60249: PPUSH
60250: CALL_OW 274
60254: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
60255: LD_ADDR_VAR 0 11
60259: PUSH
60260: LD_VAR 0 2
60264: PPUSH
60265: LD_VAR 0 1
60269: PPUSH
60270: CALL_OW 248
60274: PPUSH
60275: CALL_OW 450
60279: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
60280: LD_VAR 0 10
60284: PPUSH
60285: LD_INT 1
60287: PPUSH
60288: CALL_OW 275
60292: PUSH
60293: LD_VAR 0 11
60297: PUSH
60298: LD_INT 1
60300: ARRAY
60301: GREATEREQUAL
60302: PUSH
60303: LD_VAR 0 10
60307: PPUSH
60308: LD_INT 2
60310: PPUSH
60311: CALL_OW 275
60315: PUSH
60316: LD_VAR 0 11
60320: PUSH
60321: LD_INT 2
60323: ARRAY
60324: GREATEREQUAL
60325: AND
60326: PUSH
60327: LD_VAR 0 10
60331: PPUSH
60332: LD_INT 3
60334: PPUSH
60335: CALL_OW 275
60339: PUSH
60340: LD_VAR 0 11
60344: PUSH
60345: LD_INT 3
60347: ARRAY
60348: GREATEREQUAL
60349: AND
60350: NOT
60351: IFFALSE 60355
// exit ;
60353: GO 60942
// if GetBType ( depot ) = b_depot then
60355: LD_VAR 0 1
60359: PPUSH
60360: CALL_OW 266
60364: PUSH
60365: LD_INT 0
60367: EQUAL
60368: IFFALSE 60380
// dist := 28 else
60370: LD_ADDR_VAR 0 14
60374: PUSH
60375: LD_INT 28
60377: ST_TO_ADDR
60378: GO 60388
// dist := 36 ;
60380: LD_ADDR_VAR 0 14
60384: PUSH
60385: LD_INT 36
60387: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
60388: LD_VAR 0 1
60392: PPUSH
60393: LD_VAR 0 3
60397: PPUSH
60398: LD_VAR 0 4
60402: PPUSH
60403: CALL_OW 297
60407: PUSH
60408: LD_VAR 0 14
60412: GREATER
60413: IFFALSE 60417
// exit ;
60415: GO 60942
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
60417: LD_ADDR_VAR 0 12
60421: PUSH
60422: LD_VAR 0 2
60426: PPUSH
60427: LD_VAR 0 3
60431: PPUSH
60432: LD_VAR 0 4
60436: PPUSH
60437: LD_VAR 0 5
60441: PPUSH
60442: LD_VAR 0 1
60446: PPUSH
60447: CALL_OW 248
60451: PPUSH
60452: LD_INT 0
60454: PPUSH
60455: CALL 60947 0 6
60459: ST_TO_ADDR
// if not hexes then
60460: LD_VAR 0 12
60464: NOT
60465: IFFALSE 60469
// exit ;
60467: GO 60942
// hex := GetHexInfo ( x , y ) ;
60469: LD_ADDR_VAR 0 15
60473: PUSH
60474: LD_VAR 0 3
60478: PPUSH
60479: LD_VAR 0 4
60483: PPUSH
60484: CALL_OW 546
60488: ST_TO_ADDR
// if hex [ 1 ] then
60489: LD_VAR 0 15
60493: PUSH
60494: LD_INT 1
60496: ARRAY
60497: IFFALSE 60501
// exit ;
60499: GO 60942
// height := hex [ 2 ] ;
60501: LD_ADDR_VAR 0 13
60505: PUSH
60506: LD_VAR 0 15
60510: PUSH
60511: LD_INT 2
60513: ARRAY
60514: ST_TO_ADDR
// for i = 1 to hexes do
60515: LD_ADDR_VAR 0 7
60519: PUSH
60520: DOUBLE
60521: LD_INT 1
60523: DEC
60524: ST_TO_ADDR
60525: LD_VAR 0 12
60529: PUSH
60530: FOR_TO
60531: IFFALSE 60861
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
60533: LD_VAR 0 12
60537: PUSH
60538: LD_VAR 0 7
60542: ARRAY
60543: PUSH
60544: LD_INT 1
60546: ARRAY
60547: PPUSH
60548: LD_VAR 0 12
60552: PUSH
60553: LD_VAR 0 7
60557: ARRAY
60558: PUSH
60559: LD_INT 2
60561: ARRAY
60562: PPUSH
60563: CALL_OW 488
60567: NOT
60568: PUSH
60569: LD_VAR 0 12
60573: PUSH
60574: LD_VAR 0 7
60578: ARRAY
60579: PUSH
60580: LD_INT 1
60582: ARRAY
60583: PPUSH
60584: LD_VAR 0 12
60588: PUSH
60589: LD_VAR 0 7
60593: ARRAY
60594: PUSH
60595: LD_INT 2
60597: ARRAY
60598: PPUSH
60599: CALL_OW 428
60603: PUSH
60604: LD_INT 0
60606: GREATER
60607: OR
60608: PUSH
60609: LD_VAR 0 12
60613: PUSH
60614: LD_VAR 0 7
60618: ARRAY
60619: PUSH
60620: LD_INT 1
60622: ARRAY
60623: PPUSH
60624: LD_VAR 0 12
60628: PUSH
60629: LD_VAR 0 7
60633: ARRAY
60634: PUSH
60635: LD_INT 2
60637: ARRAY
60638: PPUSH
60639: CALL_OW 351
60643: OR
60644: IFFALSE 60650
// exit ;
60646: POP
60647: POP
60648: GO 60942
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
60650: LD_ADDR_VAR 0 8
60654: PUSH
60655: LD_VAR 0 12
60659: PUSH
60660: LD_VAR 0 7
60664: ARRAY
60665: PUSH
60666: LD_INT 1
60668: ARRAY
60669: PPUSH
60670: LD_VAR 0 12
60674: PUSH
60675: LD_VAR 0 7
60679: ARRAY
60680: PUSH
60681: LD_INT 2
60683: ARRAY
60684: PPUSH
60685: CALL_OW 546
60689: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
60690: LD_VAR 0 8
60694: PUSH
60695: LD_INT 1
60697: ARRAY
60698: PUSH
60699: LD_VAR 0 8
60703: PUSH
60704: LD_INT 2
60706: ARRAY
60707: PUSH
60708: LD_VAR 0 13
60712: PUSH
60713: LD_INT 2
60715: PLUS
60716: GREATER
60717: OR
60718: PUSH
60719: LD_VAR 0 8
60723: PUSH
60724: LD_INT 2
60726: ARRAY
60727: PUSH
60728: LD_VAR 0 13
60732: PUSH
60733: LD_INT 2
60735: MINUS
60736: LESS
60737: OR
60738: PUSH
60739: LD_VAR 0 8
60743: PUSH
60744: LD_INT 3
60746: ARRAY
60747: PUSH
60748: LD_INT 0
60750: PUSH
60751: LD_INT 8
60753: PUSH
60754: LD_INT 9
60756: PUSH
60757: LD_INT 10
60759: PUSH
60760: LD_INT 11
60762: PUSH
60763: LD_INT 12
60765: PUSH
60766: LD_INT 13
60768: PUSH
60769: LD_INT 16
60771: PUSH
60772: LD_INT 17
60774: PUSH
60775: LD_INT 18
60777: PUSH
60778: LD_INT 19
60780: PUSH
60781: LD_INT 20
60783: PUSH
60784: LD_INT 21
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: LIST
60791: LIST
60792: LIST
60793: LIST
60794: LIST
60795: LIST
60796: LIST
60797: LIST
60798: LIST
60799: LIST
60800: LIST
60801: IN
60802: NOT
60803: OR
60804: PUSH
60805: LD_VAR 0 8
60809: PUSH
60810: LD_INT 5
60812: ARRAY
60813: NOT
60814: OR
60815: PUSH
60816: LD_VAR 0 8
60820: PUSH
60821: LD_INT 6
60823: ARRAY
60824: PUSH
60825: LD_INT 1
60827: PUSH
60828: LD_INT 2
60830: PUSH
60831: LD_INT 7
60833: PUSH
60834: LD_INT 9
60836: PUSH
60837: LD_INT 10
60839: PUSH
60840: LD_INT 11
60842: PUSH
60843: EMPTY
60844: LIST
60845: LIST
60846: LIST
60847: LIST
60848: LIST
60849: LIST
60850: IN
60851: NOT
60852: OR
60853: IFFALSE 60859
// exit ;
60855: POP
60856: POP
60857: GO 60942
// end ;
60859: GO 60530
60861: POP
60862: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
60863: LD_VAR 0 9
60867: PPUSH
60868: LD_VAR 0 3
60872: PPUSH
60873: LD_VAR 0 4
60877: PPUSH
60878: LD_INT 20
60880: PPUSH
60881: CALL 52888 0 4
60885: PUSH
60886: LD_INT 4
60888: ARRAY
60889: IFFALSE 60893
// exit ;
60891: GO 60942
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
60893: LD_VAR 0 2
60897: PUSH
60898: LD_INT 29
60900: PUSH
60901: LD_INT 30
60903: PUSH
60904: EMPTY
60905: LIST
60906: LIST
60907: IN
60908: PUSH
60909: LD_VAR 0 3
60913: PPUSH
60914: LD_VAR 0 4
60918: PPUSH
60919: LD_VAR 0 9
60923: PPUSH
60924: CALL_OW 440
60928: NOT
60929: AND
60930: IFFALSE 60934
// exit ;
60932: GO 60942
// result := true ;
60934: LD_ADDR_VAR 0 6
60938: PUSH
60939: LD_INT 1
60941: ST_TO_ADDR
// end ;
60942: LD_VAR 0 6
60946: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
60947: LD_INT 0
60949: PPUSH
60950: PPUSH
60951: PPUSH
60952: PPUSH
60953: PPUSH
60954: PPUSH
60955: PPUSH
60956: PPUSH
60957: PPUSH
60958: PPUSH
60959: PPUSH
60960: PPUSH
60961: PPUSH
60962: PPUSH
60963: PPUSH
60964: PPUSH
60965: PPUSH
60966: PPUSH
60967: PPUSH
60968: PPUSH
60969: PPUSH
60970: PPUSH
60971: PPUSH
60972: PPUSH
60973: PPUSH
60974: PPUSH
60975: PPUSH
60976: PPUSH
60977: PPUSH
60978: PPUSH
60979: PPUSH
60980: PPUSH
60981: PPUSH
60982: PPUSH
60983: PPUSH
60984: PPUSH
60985: PPUSH
60986: PPUSH
60987: PPUSH
60988: PPUSH
60989: PPUSH
60990: PPUSH
60991: PPUSH
60992: PPUSH
60993: PPUSH
60994: PPUSH
60995: PPUSH
60996: PPUSH
60997: PPUSH
60998: PPUSH
60999: PPUSH
61000: PPUSH
61001: PPUSH
61002: PPUSH
61003: PPUSH
61004: PPUSH
61005: PPUSH
61006: PPUSH
// result = [ ] ;
61007: LD_ADDR_VAR 0 7
61011: PUSH
61012: EMPTY
61013: ST_TO_ADDR
// temp_list = [ ] ;
61014: LD_ADDR_VAR 0 9
61018: PUSH
61019: EMPTY
61020: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
61021: LD_VAR 0 4
61025: PUSH
61026: LD_INT 0
61028: PUSH
61029: LD_INT 1
61031: PUSH
61032: LD_INT 2
61034: PUSH
61035: LD_INT 3
61037: PUSH
61038: LD_INT 4
61040: PUSH
61041: LD_INT 5
61043: PUSH
61044: EMPTY
61045: LIST
61046: LIST
61047: LIST
61048: LIST
61049: LIST
61050: LIST
61051: IN
61052: NOT
61053: PUSH
61054: LD_VAR 0 1
61058: PUSH
61059: LD_INT 0
61061: PUSH
61062: LD_INT 1
61064: PUSH
61065: EMPTY
61066: LIST
61067: LIST
61068: IN
61069: PUSH
61070: LD_VAR 0 5
61074: PUSH
61075: LD_INT 1
61077: PUSH
61078: LD_INT 2
61080: PUSH
61081: LD_INT 3
61083: PUSH
61084: EMPTY
61085: LIST
61086: LIST
61087: LIST
61088: IN
61089: NOT
61090: AND
61091: OR
61092: IFFALSE 61096
// exit ;
61094: GO 79487
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
61096: LD_VAR 0 1
61100: PUSH
61101: LD_INT 6
61103: PUSH
61104: LD_INT 7
61106: PUSH
61107: LD_INT 8
61109: PUSH
61110: LD_INT 13
61112: PUSH
61113: LD_INT 12
61115: PUSH
61116: LD_INT 15
61118: PUSH
61119: LD_INT 11
61121: PUSH
61122: LD_INT 14
61124: PUSH
61125: LD_INT 10
61127: PUSH
61128: EMPTY
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: LIST
61135: LIST
61136: LIST
61137: LIST
61138: IN
61139: IFFALSE 61149
// btype = b_lab ;
61141: LD_ADDR_VAR 0 1
61145: PUSH
61146: LD_INT 6
61148: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
61149: LD_VAR 0 6
61153: PUSH
61154: LD_INT 0
61156: PUSH
61157: LD_INT 1
61159: PUSH
61160: LD_INT 2
61162: PUSH
61163: EMPTY
61164: LIST
61165: LIST
61166: LIST
61167: IN
61168: NOT
61169: PUSH
61170: LD_VAR 0 1
61174: PUSH
61175: LD_INT 0
61177: PUSH
61178: LD_INT 1
61180: PUSH
61181: LD_INT 2
61183: PUSH
61184: LD_INT 3
61186: PUSH
61187: LD_INT 6
61189: PUSH
61190: LD_INT 36
61192: PUSH
61193: LD_INT 4
61195: PUSH
61196: LD_INT 5
61198: PUSH
61199: LD_INT 31
61201: PUSH
61202: LD_INT 32
61204: PUSH
61205: LD_INT 33
61207: PUSH
61208: EMPTY
61209: LIST
61210: LIST
61211: LIST
61212: LIST
61213: LIST
61214: LIST
61215: LIST
61216: LIST
61217: LIST
61218: LIST
61219: LIST
61220: IN
61221: NOT
61222: PUSH
61223: LD_VAR 0 6
61227: PUSH
61228: LD_INT 1
61230: EQUAL
61231: AND
61232: OR
61233: PUSH
61234: LD_VAR 0 1
61238: PUSH
61239: LD_INT 2
61241: PUSH
61242: LD_INT 3
61244: PUSH
61245: EMPTY
61246: LIST
61247: LIST
61248: IN
61249: NOT
61250: PUSH
61251: LD_VAR 0 6
61255: PUSH
61256: LD_INT 2
61258: EQUAL
61259: AND
61260: OR
61261: IFFALSE 61271
// mode = 0 ;
61263: LD_ADDR_VAR 0 6
61267: PUSH
61268: LD_INT 0
61270: ST_TO_ADDR
// case mode of 0 :
61271: LD_VAR 0 6
61275: PUSH
61276: LD_INT 0
61278: DOUBLE
61279: EQUAL
61280: IFTRUE 61284
61282: GO 72737
61284: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
61285: LD_ADDR_VAR 0 11
61289: PUSH
61290: LD_INT 0
61292: PUSH
61293: LD_INT 0
61295: PUSH
61296: EMPTY
61297: LIST
61298: LIST
61299: PUSH
61300: LD_INT 0
61302: PUSH
61303: LD_INT 1
61305: NEG
61306: PUSH
61307: EMPTY
61308: LIST
61309: LIST
61310: PUSH
61311: LD_INT 1
61313: PUSH
61314: LD_INT 0
61316: PUSH
61317: EMPTY
61318: LIST
61319: LIST
61320: PUSH
61321: LD_INT 1
61323: PUSH
61324: LD_INT 1
61326: PUSH
61327: EMPTY
61328: LIST
61329: LIST
61330: PUSH
61331: LD_INT 0
61333: PUSH
61334: LD_INT 1
61336: PUSH
61337: EMPTY
61338: LIST
61339: LIST
61340: PUSH
61341: LD_INT 1
61343: NEG
61344: PUSH
61345: LD_INT 0
61347: PUSH
61348: EMPTY
61349: LIST
61350: LIST
61351: PUSH
61352: LD_INT 1
61354: NEG
61355: PUSH
61356: LD_INT 1
61358: NEG
61359: PUSH
61360: EMPTY
61361: LIST
61362: LIST
61363: PUSH
61364: LD_INT 1
61366: NEG
61367: PUSH
61368: LD_INT 2
61370: NEG
61371: PUSH
61372: EMPTY
61373: LIST
61374: LIST
61375: PUSH
61376: LD_INT 0
61378: PUSH
61379: LD_INT 2
61381: NEG
61382: PUSH
61383: EMPTY
61384: LIST
61385: LIST
61386: PUSH
61387: LD_INT 1
61389: PUSH
61390: LD_INT 1
61392: NEG
61393: PUSH
61394: EMPTY
61395: LIST
61396: LIST
61397: PUSH
61398: LD_INT 1
61400: PUSH
61401: LD_INT 2
61403: PUSH
61404: EMPTY
61405: LIST
61406: LIST
61407: PUSH
61408: LD_INT 0
61410: PUSH
61411: LD_INT 2
61413: PUSH
61414: EMPTY
61415: LIST
61416: LIST
61417: PUSH
61418: LD_INT 1
61420: NEG
61421: PUSH
61422: LD_INT 1
61424: PUSH
61425: EMPTY
61426: LIST
61427: LIST
61428: PUSH
61429: LD_INT 1
61431: PUSH
61432: LD_INT 3
61434: PUSH
61435: EMPTY
61436: LIST
61437: LIST
61438: PUSH
61439: LD_INT 0
61441: PUSH
61442: LD_INT 3
61444: PUSH
61445: EMPTY
61446: LIST
61447: LIST
61448: PUSH
61449: LD_INT 1
61451: NEG
61452: PUSH
61453: LD_INT 2
61455: PUSH
61456: EMPTY
61457: LIST
61458: LIST
61459: PUSH
61460: EMPTY
61461: LIST
61462: LIST
61463: LIST
61464: LIST
61465: LIST
61466: LIST
61467: LIST
61468: LIST
61469: LIST
61470: LIST
61471: LIST
61472: LIST
61473: LIST
61474: LIST
61475: LIST
61476: LIST
61477: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
61478: LD_ADDR_VAR 0 12
61482: PUSH
61483: LD_INT 0
61485: PUSH
61486: LD_INT 0
61488: PUSH
61489: EMPTY
61490: LIST
61491: LIST
61492: PUSH
61493: LD_INT 0
61495: PUSH
61496: LD_INT 1
61498: NEG
61499: PUSH
61500: EMPTY
61501: LIST
61502: LIST
61503: PUSH
61504: LD_INT 1
61506: PUSH
61507: LD_INT 0
61509: PUSH
61510: EMPTY
61511: LIST
61512: LIST
61513: PUSH
61514: LD_INT 1
61516: PUSH
61517: LD_INT 1
61519: PUSH
61520: EMPTY
61521: LIST
61522: LIST
61523: PUSH
61524: LD_INT 0
61526: PUSH
61527: LD_INT 1
61529: PUSH
61530: EMPTY
61531: LIST
61532: LIST
61533: PUSH
61534: LD_INT 1
61536: NEG
61537: PUSH
61538: LD_INT 0
61540: PUSH
61541: EMPTY
61542: LIST
61543: LIST
61544: PUSH
61545: LD_INT 1
61547: NEG
61548: PUSH
61549: LD_INT 1
61551: NEG
61552: PUSH
61553: EMPTY
61554: LIST
61555: LIST
61556: PUSH
61557: LD_INT 1
61559: PUSH
61560: LD_INT 1
61562: NEG
61563: PUSH
61564: EMPTY
61565: LIST
61566: LIST
61567: PUSH
61568: LD_INT 2
61570: PUSH
61571: LD_INT 0
61573: PUSH
61574: EMPTY
61575: LIST
61576: LIST
61577: PUSH
61578: LD_INT 2
61580: PUSH
61581: LD_INT 1
61583: PUSH
61584: EMPTY
61585: LIST
61586: LIST
61587: PUSH
61588: LD_INT 1
61590: NEG
61591: PUSH
61592: LD_INT 1
61594: PUSH
61595: EMPTY
61596: LIST
61597: LIST
61598: PUSH
61599: LD_INT 2
61601: NEG
61602: PUSH
61603: LD_INT 0
61605: PUSH
61606: EMPTY
61607: LIST
61608: LIST
61609: PUSH
61610: LD_INT 2
61612: NEG
61613: PUSH
61614: LD_INT 1
61616: NEG
61617: PUSH
61618: EMPTY
61619: LIST
61620: LIST
61621: PUSH
61622: LD_INT 2
61624: NEG
61625: PUSH
61626: LD_INT 1
61628: PUSH
61629: EMPTY
61630: LIST
61631: LIST
61632: PUSH
61633: LD_INT 3
61635: NEG
61636: PUSH
61637: LD_INT 0
61639: PUSH
61640: EMPTY
61641: LIST
61642: LIST
61643: PUSH
61644: LD_INT 3
61646: NEG
61647: PUSH
61648: LD_INT 1
61650: NEG
61651: PUSH
61652: EMPTY
61653: LIST
61654: LIST
61655: PUSH
61656: EMPTY
61657: LIST
61658: LIST
61659: LIST
61660: LIST
61661: LIST
61662: LIST
61663: LIST
61664: LIST
61665: LIST
61666: LIST
61667: LIST
61668: LIST
61669: LIST
61670: LIST
61671: LIST
61672: LIST
61673: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
61674: LD_ADDR_VAR 0 13
61678: PUSH
61679: LD_INT 0
61681: PUSH
61682: LD_INT 0
61684: PUSH
61685: EMPTY
61686: LIST
61687: LIST
61688: PUSH
61689: LD_INT 0
61691: PUSH
61692: LD_INT 1
61694: NEG
61695: PUSH
61696: EMPTY
61697: LIST
61698: LIST
61699: PUSH
61700: LD_INT 1
61702: PUSH
61703: LD_INT 0
61705: PUSH
61706: EMPTY
61707: LIST
61708: LIST
61709: PUSH
61710: LD_INT 1
61712: PUSH
61713: LD_INT 1
61715: PUSH
61716: EMPTY
61717: LIST
61718: LIST
61719: PUSH
61720: LD_INT 0
61722: PUSH
61723: LD_INT 1
61725: PUSH
61726: EMPTY
61727: LIST
61728: LIST
61729: PUSH
61730: LD_INT 1
61732: NEG
61733: PUSH
61734: LD_INT 0
61736: PUSH
61737: EMPTY
61738: LIST
61739: LIST
61740: PUSH
61741: LD_INT 1
61743: NEG
61744: PUSH
61745: LD_INT 1
61747: NEG
61748: PUSH
61749: EMPTY
61750: LIST
61751: LIST
61752: PUSH
61753: LD_INT 1
61755: NEG
61756: PUSH
61757: LD_INT 2
61759: NEG
61760: PUSH
61761: EMPTY
61762: LIST
61763: LIST
61764: PUSH
61765: LD_INT 2
61767: PUSH
61768: LD_INT 1
61770: PUSH
61771: EMPTY
61772: LIST
61773: LIST
61774: PUSH
61775: LD_INT 2
61777: PUSH
61778: LD_INT 2
61780: PUSH
61781: EMPTY
61782: LIST
61783: LIST
61784: PUSH
61785: LD_INT 1
61787: PUSH
61788: LD_INT 2
61790: PUSH
61791: EMPTY
61792: LIST
61793: LIST
61794: PUSH
61795: LD_INT 2
61797: NEG
61798: PUSH
61799: LD_INT 1
61801: NEG
61802: PUSH
61803: EMPTY
61804: LIST
61805: LIST
61806: PUSH
61807: LD_INT 2
61809: NEG
61810: PUSH
61811: LD_INT 2
61813: NEG
61814: PUSH
61815: EMPTY
61816: LIST
61817: LIST
61818: PUSH
61819: LD_INT 2
61821: NEG
61822: PUSH
61823: LD_INT 3
61825: NEG
61826: PUSH
61827: EMPTY
61828: LIST
61829: LIST
61830: PUSH
61831: LD_INT 3
61833: NEG
61834: PUSH
61835: LD_INT 2
61837: NEG
61838: PUSH
61839: EMPTY
61840: LIST
61841: LIST
61842: PUSH
61843: LD_INT 3
61845: NEG
61846: PUSH
61847: LD_INT 3
61849: NEG
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: PUSH
61855: EMPTY
61856: LIST
61857: LIST
61858: LIST
61859: LIST
61860: LIST
61861: LIST
61862: LIST
61863: LIST
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: LIST
61869: LIST
61870: LIST
61871: LIST
61872: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
61873: LD_ADDR_VAR 0 14
61877: PUSH
61878: LD_INT 0
61880: PUSH
61881: LD_INT 0
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: PUSH
61888: LD_INT 0
61890: PUSH
61891: LD_INT 1
61893: NEG
61894: PUSH
61895: EMPTY
61896: LIST
61897: LIST
61898: PUSH
61899: LD_INT 1
61901: PUSH
61902: LD_INT 0
61904: PUSH
61905: EMPTY
61906: LIST
61907: LIST
61908: PUSH
61909: LD_INT 1
61911: PUSH
61912: LD_INT 1
61914: PUSH
61915: EMPTY
61916: LIST
61917: LIST
61918: PUSH
61919: LD_INT 0
61921: PUSH
61922: LD_INT 1
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: PUSH
61929: LD_INT 1
61931: NEG
61932: PUSH
61933: LD_INT 0
61935: PUSH
61936: EMPTY
61937: LIST
61938: LIST
61939: PUSH
61940: LD_INT 1
61942: NEG
61943: PUSH
61944: LD_INT 1
61946: NEG
61947: PUSH
61948: EMPTY
61949: LIST
61950: LIST
61951: PUSH
61952: LD_INT 1
61954: NEG
61955: PUSH
61956: LD_INT 2
61958: NEG
61959: PUSH
61960: EMPTY
61961: LIST
61962: LIST
61963: PUSH
61964: LD_INT 0
61966: PUSH
61967: LD_INT 2
61969: NEG
61970: PUSH
61971: EMPTY
61972: LIST
61973: LIST
61974: PUSH
61975: LD_INT 1
61977: PUSH
61978: LD_INT 1
61980: NEG
61981: PUSH
61982: EMPTY
61983: LIST
61984: LIST
61985: PUSH
61986: LD_INT 1
61988: PUSH
61989: LD_INT 2
61991: PUSH
61992: EMPTY
61993: LIST
61994: LIST
61995: PUSH
61996: LD_INT 0
61998: PUSH
61999: LD_INT 2
62001: PUSH
62002: EMPTY
62003: LIST
62004: LIST
62005: PUSH
62006: LD_INT 1
62008: NEG
62009: PUSH
62010: LD_INT 1
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: PUSH
62017: LD_INT 1
62019: NEG
62020: PUSH
62021: LD_INT 3
62023: NEG
62024: PUSH
62025: EMPTY
62026: LIST
62027: LIST
62028: PUSH
62029: LD_INT 0
62031: PUSH
62032: LD_INT 3
62034: NEG
62035: PUSH
62036: EMPTY
62037: LIST
62038: LIST
62039: PUSH
62040: LD_INT 1
62042: PUSH
62043: LD_INT 2
62045: NEG
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: LIST
62055: LIST
62056: LIST
62057: LIST
62058: LIST
62059: LIST
62060: LIST
62061: LIST
62062: LIST
62063: LIST
62064: LIST
62065: LIST
62066: LIST
62067: LIST
62068: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
62069: LD_ADDR_VAR 0 15
62073: PUSH
62074: LD_INT 0
62076: PUSH
62077: LD_INT 0
62079: PUSH
62080: EMPTY
62081: LIST
62082: LIST
62083: PUSH
62084: LD_INT 0
62086: PUSH
62087: LD_INT 1
62089: NEG
62090: PUSH
62091: EMPTY
62092: LIST
62093: LIST
62094: PUSH
62095: LD_INT 1
62097: PUSH
62098: LD_INT 0
62100: PUSH
62101: EMPTY
62102: LIST
62103: LIST
62104: PUSH
62105: LD_INT 1
62107: PUSH
62108: LD_INT 1
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: PUSH
62115: LD_INT 0
62117: PUSH
62118: LD_INT 1
62120: PUSH
62121: EMPTY
62122: LIST
62123: LIST
62124: PUSH
62125: LD_INT 1
62127: NEG
62128: PUSH
62129: LD_INT 0
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PUSH
62136: LD_INT 1
62138: NEG
62139: PUSH
62140: LD_INT 1
62142: NEG
62143: PUSH
62144: EMPTY
62145: LIST
62146: LIST
62147: PUSH
62148: LD_INT 1
62150: PUSH
62151: LD_INT 1
62153: NEG
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 2
62161: PUSH
62162: LD_INT 0
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 2
62171: PUSH
62172: LD_INT 1
62174: PUSH
62175: EMPTY
62176: LIST
62177: LIST
62178: PUSH
62179: LD_INT 1
62181: NEG
62182: PUSH
62183: LD_INT 1
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: PUSH
62190: LD_INT 2
62192: NEG
62193: PUSH
62194: LD_INT 0
62196: PUSH
62197: EMPTY
62198: LIST
62199: LIST
62200: PUSH
62201: LD_INT 2
62203: NEG
62204: PUSH
62205: LD_INT 1
62207: NEG
62208: PUSH
62209: EMPTY
62210: LIST
62211: LIST
62212: PUSH
62213: LD_INT 2
62215: PUSH
62216: LD_INT 1
62218: NEG
62219: PUSH
62220: EMPTY
62221: LIST
62222: LIST
62223: PUSH
62224: LD_INT 3
62226: PUSH
62227: LD_INT 0
62229: PUSH
62230: EMPTY
62231: LIST
62232: LIST
62233: PUSH
62234: LD_INT 3
62236: PUSH
62237: LD_INT 1
62239: PUSH
62240: EMPTY
62241: LIST
62242: LIST
62243: PUSH
62244: EMPTY
62245: LIST
62246: LIST
62247: LIST
62248: LIST
62249: LIST
62250: LIST
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
62262: LD_ADDR_VAR 0 16
62266: PUSH
62267: LD_INT 0
62269: PUSH
62270: LD_INT 0
62272: PUSH
62273: EMPTY
62274: LIST
62275: LIST
62276: PUSH
62277: LD_INT 0
62279: PUSH
62280: LD_INT 1
62282: NEG
62283: PUSH
62284: EMPTY
62285: LIST
62286: LIST
62287: PUSH
62288: LD_INT 1
62290: PUSH
62291: LD_INT 0
62293: PUSH
62294: EMPTY
62295: LIST
62296: LIST
62297: PUSH
62298: LD_INT 1
62300: PUSH
62301: LD_INT 1
62303: PUSH
62304: EMPTY
62305: LIST
62306: LIST
62307: PUSH
62308: LD_INT 0
62310: PUSH
62311: LD_INT 1
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PUSH
62318: LD_INT 1
62320: NEG
62321: PUSH
62322: LD_INT 0
62324: PUSH
62325: EMPTY
62326: LIST
62327: LIST
62328: PUSH
62329: LD_INT 1
62331: NEG
62332: PUSH
62333: LD_INT 1
62335: NEG
62336: PUSH
62337: EMPTY
62338: LIST
62339: LIST
62340: PUSH
62341: LD_INT 1
62343: NEG
62344: PUSH
62345: LD_INT 2
62347: NEG
62348: PUSH
62349: EMPTY
62350: LIST
62351: LIST
62352: PUSH
62353: LD_INT 2
62355: PUSH
62356: LD_INT 1
62358: PUSH
62359: EMPTY
62360: LIST
62361: LIST
62362: PUSH
62363: LD_INT 2
62365: PUSH
62366: LD_INT 2
62368: PUSH
62369: EMPTY
62370: LIST
62371: LIST
62372: PUSH
62373: LD_INT 1
62375: PUSH
62376: LD_INT 2
62378: PUSH
62379: EMPTY
62380: LIST
62381: LIST
62382: PUSH
62383: LD_INT 2
62385: NEG
62386: PUSH
62387: LD_INT 1
62389: NEG
62390: PUSH
62391: EMPTY
62392: LIST
62393: LIST
62394: PUSH
62395: LD_INT 2
62397: NEG
62398: PUSH
62399: LD_INT 2
62401: NEG
62402: PUSH
62403: EMPTY
62404: LIST
62405: LIST
62406: PUSH
62407: LD_INT 3
62409: PUSH
62410: LD_INT 2
62412: PUSH
62413: EMPTY
62414: LIST
62415: LIST
62416: PUSH
62417: LD_INT 3
62419: PUSH
62420: LD_INT 3
62422: PUSH
62423: EMPTY
62424: LIST
62425: LIST
62426: PUSH
62427: LD_INT 2
62429: PUSH
62430: LD_INT 3
62432: PUSH
62433: EMPTY
62434: LIST
62435: LIST
62436: PUSH
62437: EMPTY
62438: LIST
62439: LIST
62440: LIST
62441: LIST
62442: LIST
62443: LIST
62444: LIST
62445: LIST
62446: LIST
62447: LIST
62448: LIST
62449: LIST
62450: LIST
62451: LIST
62452: LIST
62453: LIST
62454: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62455: LD_ADDR_VAR 0 17
62459: PUSH
62460: LD_INT 0
62462: PUSH
62463: LD_INT 0
62465: PUSH
62466: EMPTY
62467: LIST
62468: LIST
62469: PUSH
62470: LD_INT 0
62472: PUSH
62473: LD_INT 1
62475: NEG
62476: PUSH
62477: EMPTY
62478: LIST
62479: LIST
62480: PUSH
62481: LD_INT 1
62483: PUSH
62484: LD_INT 0
62486: PUSH
62487: EMPTY
62488: LIST
62489: LIST
62490: PUSH
62491: LD_INT 1
62493: PUSH
62494: LD_INT 1
62496: PUSH
62497: EMPTY
62498: LIST
62499: LIST
62500: PUSH
62501: LD_INT 0
62503: PUSH
62504: LD_INT 1
62506: PUSH
62507: EMPTY
62508: LIST
62509: LIST
62510: PUSH
62511: LD_INT 1
62513: NEG
62514: PUSH
62515: LD_INT 0
62517: PUSH
62518: EMPTY
62519: LIST
62520: LIST
62521: PUSH
62522: LD_INT 1
62524: NEG
62525: PUSH
62526: LD_INT 1
62528: NEG
62529: PUSH
62530: EMPTY
62531: LIST
62532: LIST
62533: PUSH
62534: LD_INT 1
62536: NEG
62537: PUSH
62538: LD_INT 2
62540: NEG
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: PUSH
62546: LD_INT 0
62548: PUSH
62549: LD_INT 2
62551: NEG
62552: PUSH
62553: EMPTY
62554: LIST
62555: LIST
62556: PUSH
62557: LD_INT 1
62559: PUSH
62560: LD_INT 1
62562: NEG
62563: PUSH
62564: EMPTY
62565: LIST
62566: LIST
62567: PUSH
62568: LD_INT 2
62570: PUSH
62571: LD_INT 0
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: PUSH
62578: LD_INT 2
62580: PUSH
62581: LD_INT 1
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: PUSH
62588: LD_INT 2
62590: PUSH
62591: LD_INT 2
62593: PUSH
62594: EMPTY
62595: LIST
62596: LIST
62597: PUSH
62598: LD_INT 1
62600: PUSH
62601: LD_INT 2
62603: PUSH
62604: EMPTY
62605: LIST
62606: LIST
62607: PUSH
62608: LD_INT 0
62610: PUSH
62611: LD_INT 2
62613: PUSH
62614: EMPTY
62615: LIST
62616: LIST
62617: PUSH
62618: LD_INT 1
62620: NEG
62621: PUSH
62622: LD_INT 1
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PUSH
62629: LD_INT 2
62631: NEG
62632: PUSH
62633: LD_INT 0
62635: PUSH
62636: EMPTY
62637: LIST
62638: LIST
62639: PUSH
62640: LD_INT 2
62642: NEG
62643: PUSH
62644: LD_INT 1
62646: NEG
62647: PUSH
62648: EMPTY
62649: LIST
62650: LIST
62651: PUSH
62652: LD_INT 2
62654: NEG
62655: PUSH
62656: LD_INT 2
62658: NEG
62659: PUSH
62660: EMPTY
62661: LIST
62662: LIST
62663: PUSH
62664: EMPTY
62665: LIST
62666: LIST
62667: LIST
62668: LIST
62669: LIST
62670: LIST
62671: LIST
62672: LIST
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: LIST
62681: LIST
62682: LIST
62683: LIST
62684: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62685: LD_ADDR_VAR 0 18
62689: PUSH
62690: LD_INT 0
62692: PUSH
62693: LD_INT 0
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: PUSH
62700: LD_INT 0
62702: PUSH
62703: LD_INT 1
62705: NEG
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PUSH
62711: LD_INT 1
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: EMPTY
62718: LIST
62719: LIST
62720: PUSH
62721: LD_INT 1
62723: PUSH
62724: LD_INT 1
62726: PUSH
62727: EMPTY
62728: LIST
62729: LIST
62730: PUSH
62731: LD_INT 0
62733: PUSH
62734: LD_INT 1
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PUSH
62741: LD_INT 1
62743: NEG
62744: PUSH
62745: LD_INT 0
62747: PUSH
62748: EMPTY
62749: LIST
62750: LIST
62751: PUSH
62752: LD_INT 1
62754: NEG
62755: PUSH
62756: LD_INT 1
62758: NEG
62759: PUSH
62760: EMPTY
62761: LIST
62762: LIST
62763: PUSH
62764: LD_INT 1
62766: NEG
62767: PUSH
62768: LD_INT 2
62770: NEG
62771: PUSH
62772: EMPTY
62773: LIST
62774: LIST
62775: PUSH
62776: LD_INT 0
62778: PUSH
62779: LD_INT 2
62781: NEG
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PUSH
62787: LD_INT 1
62789: PUSH
62790: LD_INT 1
62792: NEG
62793: PUSH
62794: EMPTY
62795: LIST
62796: LIST
62797: PUSH
62798: LD_INT 2
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: EMPTY
62805: LIST
62806: LIST
62807: PUSH
62808: LD_INT 2
62810: PUSH
62811: LD_INT 1
62813: PUSH
62814: EMPTY
62815: LIST
62816: LIST
62817: PUSH
62818: LD_INT 2
62820: PUSH
62821: LD_INT 2
62823: PUSH
62824: EMPTY
62825: LIST
62826: LIST
62827: PUSH
62828: LD_INT 1
62830: PUSH
62831: LD_INT 2
62833: PUSH
62834: EMPTY
62835: LIST
62836: LIST
62837: PUSH
62838: LD_INT 0
62840: PUSH
62841: LD_INT 2
62843: PUSH
62844: EMPTY
62845: LIST
62846: LIST
62847: PUSH
62848: LD_INT 1
62850: NEG
62851: PUSH
62852: LD_INT 1
62854: PUSH
62855: EMPTY
62856: LIST
62857: LIST
62858: PUSH
62859: LD_INT 2
62861: NEG
62862: PUSH
62863: LD_INT 0
62865: PUSH
62866: EMPTY
62867: LIST
62868: LIST
62869: PUSH
62870: LD_INT 2
62872: NEG
62873: PUSH
62874: LD_INT 1
62876: NEG
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 2
62884: NEG
62885: PUSH
62886: LD_INT 2
62888: NEG
62889: PUSH
62890: EMPTY
62891: LIST
62892: LIST
62893: PUSH
62894: EMPTY
62895: LIST
62896: LIST
62897: LIST
62898: LIST
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: LIST
62907: LIST
62908: LIST
62909: LIST
62910: LIST
62911: LIST
62912: LIST
62913: LIST
62914: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
62915: LD_ADDR_VAR 0 19
62919: PUSH
62920: LD_INT 0
62922: PUSH
62923: LD_INT 0
62925: PUSH
62926: EMPTY
62927: LIST
62928: LIST
62929: PUSH
62930: LD_INT 0
62932: PUSH
62933: LD_INT 1
62935: NEG
62936: PUSH
62937: EMPTY
62938: LIST
62939: LIST
62940: PUSH
62941: LD_INT 1
62943: PUSH
62944: LD_INT 0
62946: PUSH
62947: EMPTY
62948: LIST
62949: LIST
62950: PUSH
62951: LD_INT 1
62953: PUSH
62954: LD_INT 1
62956: PUSH
62957: EMPTY
62958: LIST
62959: LIST
62960: PUSH
62961: LD_INT 0
62963: PUSH
62964: LD_INT 1
62966: PUSH
62967: EMPTY
62968: LIST
62969: LIST
62970: PUSH
62971: LD_INT 1
62973: NEG
62974: PUSH
62975: LD_INT 0
62977: PUSH
62978: EMPTY
62979: LIST
62980: LIST
62981: PUSH
62982: LD_INT 1
62984: NEG
62985: PUSH
62986: LD_INT 1
62988: NEG
62989: PUSH
62990: EMPTY
62991: LIST
62992: LIST
62993: PUSH
62994: LD_INT 1
62996: NEG
62997: PUSH
62998: LD_INT 2
63000: NEG
63001: PUSH
63002: EMPTY
63003: LIST
63004: LIST
63005: PUSH
63006: LD_INT 0
63008: PUSH
63009: LD_INT 2
63011: NEG
63012: PUSH
63013: EMPTY
63014: LIST
63015: LIST
63016: PUSH
63017: LD_INT 1
63019: PUSH
63020: LD_INT 1
63022: NEG
63023: PUSH
63024: EMPTY
63025: LIST
63026: LIST
63027: PUSH
63028: LD_INT 2
63030: PUSH
63031: LD_INT 0
63033: PUSH
63034: EMPTY
63035: LIST
63036: LIST
63037: PUSH
63038: LD_INT 2
63040: PUSH
63041: LD_INT 1
63043: PUSH
63044: EMPTY
63045: LIST
63046: LIST
63047: PUSH
63048: LD_INT 2
63050: PUSH
63051: LD_INT 2
63053: PUSH
63054: EMPTY
63055: LIST
63056: LIST
63057: PUSH
63058: LD_INT 1
63060: PUSH
63061: LD_INT 2
63063: PUSH
63064: EMPTY
63065: LIST
63066: LIST
63067: PUSH
63068: LD_INT 0
63070: PUSH
63071: LD_INT 2
63073: PUSH
63074: EMPTY
63075: LIST
63076: LIST
63077: PUSH
63078: LD_INT 1
63080: NEG
63081: PUSH
63082: LD_INT 1
63084: PUSH
63085: EMPTY
63086: LIST
63087: LIST
63088: PUSH
63089: LD_INT 2
63091: NEG
63092: PUSH
63093: LD_INT 0
63095: PUSH
63096: EMPTY
63097: LIST
63098: LIST
63099: PUSH
63100: LD_INT 2
63102: NEG
63103: PUSH
63104: LD_INT 1
63106: NEG
63107: PUSH
63108: EMPTY
63109: LIST
63110: LIST
63111: PUSH
63112: LD_INT 2
63114: NEG
63115: PUSH
63116: LD_INT 2
63118: NEG
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: EMPTY
63125: LIST
63126: LIST
63127: LIST
63128: LIST
63129: LIST
63130: LIST
63131: LIST
63132: LIST
63133: LIST
63134: LIST
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: LIST
63140: LIST
63141: LIST
63142: LIST
63143: LIST
63144: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63145: LD_ADDR_VAR 0 20
63149: PUSH
63150: LD_INT 0
63152: PUSH
63153: LD_INT 0
63155: PUSH
63156: EMPTY
63157: LIST
63158: LIST
63159: PUSH
63160: LD_INT 0
63162: PUSH
63163: LD_INT 1
63165: NEG
63166: PUSH
63167: EMPTY
63168: LIST
63169: LIST
63170: PUSH
63171: LD_INT 1
63173: PUSH
63174: LD_INT 0
63176: PUSH
63177: EMPTY
63178: LIST
63179: LIST
63180: PUSH
63181: LD_INT 1
63183: PUSH
63184: LD_INT 1
63186: PUSH
63187: EMPTY
63188: LIST
63189: LIST
63190: PUSH
63191: LD_INT 0
63193: PUSH
63194: LD_INT 1
63196: PUSH
63197: EMPTY
63198: LIST
63199: LIST
63200: PUSH
63201: LD_INT 1
63203: NEG
63204: PUSH
63205: LD_INT 0
63207: PUSH
63208: EMPTY
63209: LIST
63210: LIST
63211: PUSH
63212: LD_INT 1
63214: NEG
63215: PUSH
63216: LD_INT 1
63218: NEG
63219: PUSH
63220: EMPTY
63221: LIST
63222: LIST
63223: PUSH
63224: LD_INT 1
63226: NEG
63227: PUSH
63228: LD_INT 2
63230: NEG
63231: PUSH
63232: EMPTY
63233: LIST
63234: LIST
63235: PUSH
63236: LD_INT 0
63238: PUSH
63239: LD_INT 2
63241: NEG
63242: PUSH
63243: EMPTY
63244: LIST
63245: LIST
63246: PUSH
63247: LD_INT 1
63249: PUSH
63250: LD_INT 1
63252: NEG
63253: PUSH
63254: EMPTY
63255: LIST
63256: LIST
63257: PUSH
63258: LD_INT 2
63260: PUSH
63261: LD_INT 0
63263: PUSH
63264: EMPTY
63265: LIST
63266: LIST
63267: PUSH
63268: LD_INT 2
63270: PUSH
63271: LD_INT 1
63273: PUSH
63274: EMPTY
63275: LIST
63276: LIST
63277: PUSH
63278: LD_INT 2
63280: PUSH
63281: LD_INT 2
63283: PUSH
63284: EMPTY
63285: LIST
63286: LIST
63287: PUSH
63288: LD_INT 1
63290: PUSH
63291: LD_INT 2
63293: PUSH
63294: EMPTY
63295: LIST
63296: LIST
63297: PUSH
63298: LD_INT 0
63300: PUSH
63301: LD_INT 2
63303: PUSH
63304: EMPTY
63305: LIST
63306: LIST
63307: PUSH
63308: LD_INT 1
63310: NEG
63311: PUSH
63312: LD_INT 1
63314: PUSH
63315: EMPTY
63316: LIST
63317: LIST
63318: PUSH
63319: LD_INT 2
63321: NEG
63322: PUSH
63323: LD_INT 0
63325: PUSH
63326: EMPTY
63327: LIST
63328: LIST
63329: PUSH
63330: LD_INT 2
63332: NEG
63333: PUSH
63334: LD_INT 1
63336: NEG
63337: PUSH
63338: EMPTY
63339: LIST
63340: LIST
63341: PUSH
63342: LD_INT 2
63344: NEG
63345: PUSH
63346: LD_INT 2
63348: NEG
63349: PUSH
63350: EMPTY
63351: LIST
63352: LIST
63353: PUSH
63354: EMPTY
63355: LIST
63356: LIST
63357: LIST
63358: LIST
63359: LIST
63360: LIST
63361: LIST
63362: LIST
63363: LIST
63364: LIST
63365: LIST
63366: LIST
63367: LIST
63368: LIST
63369: LIST
63370: LIST
63371: LIST
63372: LIST
63373: LIST
63374: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63375: LD_ADDR_VAR 0 21
63379: PUSH
63380: LD_INT 0
63382: PUSH
63383: LD_INT 0
63385: PUSH
63386: EMPTY
63387: LIST
63388: LIST
63389: PUSH
63390: LD_INT 0
63392: PUSH
63393: LD_INT 1
63395: NEG
63396: PUSH
63397: EMPTY
63398: LIST
63399: LIST
63400: PUSH
63401: LD_INT 1
63403: PUSH
63404: LD_INT 0
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 1
63413: PUSH
63414: LD_INT 1
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: LD_INT 0
63423: PUSH
63424: LD_INT 1
63426: PUSH
63427: EMPTY
63428: LIST
63429: LIST
63430: PUSH
63431: LD_INT 1
63433: NEG
63434: PUSH
63435: LD_INT 0
63437: PUSH
63438: EMPTY
63439: LIST
63440: LIST
63441: PUSH
63442: LD_INT 1
63444: NEG
63445: PUSH
63446: LD_INT 1
63448: NEG
63449: PUSH
63450: EMPTY
63451: LIST
63452: LIST
63453: PUSH
63454: LD_INT 1
63456: NEG
63457: PUSH
63458: LD_INT 2
63460: NEG
63461: PUSH
63462: EMPTY
63463: LIST
63464: LIST
63465: PUSH
63466: LD_INT 0
63468: PUSH
63469: LD_INT 2
63471: NEG
63472: PUSH
63473: EMPTY
63474: LIST
63475: LIST
63476: PUSH
63477: LD_INT 1
63479: PUSH
63480: LD_INT 1
63482: NEG
63483: PUSH
63484: EMPTY
63485: LIST
63486: LIST
63487: PUSH
63488: LD_INT 2
63490: PUSH
63491: LD_INT 0
63493: PUSH
63494: EMPTY
63495: LIST
63496: LIST
63497: PUSH
63498: LD_INT 2
63500: PUSH
63501: LD_INT 1
63503: PUSH
63504: EMPTY
63505: LIST
63506: LIST
63507: PUSH
63508: LD_INT 2
63510: PUSH
63511: LD_INT 2
63513: PUSH
63514: EMPTY
63515: LIST
63516: LIST
63517: PUSH
63518: LD_INT 1
63520: PUSH
63521: LD_INT 2
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: PUSH
63528: LD_INT 0
63530: PUSH
63531: LD_INT 2
63533: PUSH
63534: EMPTY
63535: LIST
63536: LIST
63537: PUSH
63538: LD_INT 1
63540: NEG
63541: PUSH
63542: LD_INT 1
63544: PUSH
63545: EMPTY
63546: LIST
63547: LIST
63548: PUSH
63549: LD_INT 2
63551: NEG
63552: PUSH
63553: LD_INT 0
63555: PUSH
63556: EMPTY
63557: LIST
63558: LIST
63559: PUSH
63560: LD_INT 2
63562: NEG
63563: PUSH
63564: LD_INT 1
63566: NEG
63567: PUSH
63568: EMPTY
63569: LIST
63570: LIST
63571: PUSH
63572: LD_INT 2
63574: NEG
63575: PUSH
63576: LD_INT 2
63578: NEG
63579: PUSH
63580: EMPTY
63581: LIST
63582: LIST
63583: PUSH
63584: EMPTY
63585: LIST
63586: LIST
63587: LIST
63588: LIST
63589: LIST
63590: LIST
63591: LIST
63592: LIST
63593: LIST
63594: LIST
63595: LIST
63596: LIST
63597: LIST
63598: LIST
63599: LIST
63600: LIST
63601: LIST
63602: LIST
63603: LIST
63604: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
63605: LD_ADDR_VAR 0 22
63609: PUSH
63610: LD_INT 0
63612: PUSH
63613: LD_INT 0
63615: PUSH
63616: EMPTY
63617: LIST
63618: LIST
63619: PUSH
63620: LD_INT 0
63622: PUSH
63623: LD_INT 1
63625: NEG
63626: PUSH
63627: EMPTY
63628: LIST
63629: LIST
63630: PUSH
63631: LD_INT 1
63633: PUSH
63634: LD_INT 0
63636: PUSH
63637: EMPTY
63638: LIST
63639: LIST
63640: PUSH
63641: LD_INT 1
63643: PUSH
63644: LD_INT 1
63646: PUSH
63647: EMPTY
63648: LIST
63649: LIST
63650: PUSH
63651: LD_INT 0
63653: PUSH
63654: LD_INT 1
63656: PUSH
63657: EMPTY
63658: LIST
63659: LIST
63660: PUSH
63661: LD_INT 1
63663: NEG
63664: PUSH
63665: LD_INT 0
63667: PUSH
63668: EMPTY
63669: LIST
63670: LIST
63671: PUSH
63672: LD_INT 1
63674: NEG
63675: PUSH
63676: LD_INT 1
63678: NEG
63679: PUSH
63680: EMPTY
63681: LIST
63682: LIST
63683: PUSH
63684: LD_INT 1
63686: NEG
63687: PUSH
63688: LD_INT 2
63690: NEG
63691: PUSH
63692: EMPTY
63693: LIST
63694: LIST
63695: PUSH
63696: LD_INT 0
63698: PUSH
63699: LD_INT 2
63701: NEG
63702: PUSH
63703: EMPTY
63704: LIST
63705: LIST
63706: PUSH
63707: LD_INT 1
63709: PUSH
63710: LD_INT 1
63712: NEG
63713: PUSH
63714: EMPTY
63715: LIST
63716: LIST
63717: PUSH
63718: LD_INT 2
63720: PUSH
63721: LD_INT 0
63723: PUSH
63724: EMPTY
63725: LIST
63726: LIST
63727: PUSH
63728: LD_INT 2
63730: PUSH
63731: LD_INT 1
63733: PUSH
63734: EMPTY
63735: LIST
63736: LIST
63737: PUSH
63738: LD_INT 2
63740: PUSH
63741: LD_INT 2
63743: PUSH
63744: EMPTY
63745: LIST
63746: LIST
63747: PUSH
63748: LD_INT 1
63750: PUSH
63751: LD_INT 2
63753: PUSH
63754: EMPTY
63755: LIST
63756: LIST
63757: PUSH
63758: LD_INT 0
63760: PUSH
63761: LD_INT 2
63763: PUSH
63764: EMPTY
63765: LIST
63766: LIST
63767: PUSH
63768: LD_INT 1
63770: NEG
63771: PUSH
63772: LD_INT 1
63774: PUSH
63775: EMPTY
63776: LIST
63777: LIST
63778: PUSH
63779: LD_INT 2
63781: NEG
63782: PUSH
63783: LD_INT 0
63785: PUSH
63786: EMPTY
63787: LIST
63788: LIST
63789: PUSH
63790: LD_INT 2
63792: NEG
63793: PUSH
63794: LD_INT 1
63796: NEG
63797: PUSH
63798: EMPTY
63799: LIST
63800: LIST
63801: PUSH
63802: LD_INT 2
63804: NEG
63805: PUSH
63806: LD_INT 2
63808: NEG
63809: PUSH
63810: EMPTY
63811: LIST
63812: LIST
63813: PUSH
63814: EMPTY
63815: LIST
63816: LIST
63817: LIST
63818: LIST
63819: LIST
63820: LIST
63821: LIST
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: LIST
63827: LIST
63828: LIST
63829: LIST
63830: LIST
63831: LIST
63832: LIST
63833: LIST
63834: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
63835: LD_ADDR_VAR 0 23
63839: PUSH
63840: LD_INT 0
63842: PUSH
63843: LD_INT 0
63845: PUSH
63846: EMPTY
63847: LIST
63848: LIST
63849: PUSH
63850: LD_INT 0
63852: PUSH
63853: LD_INT 1
63855: NEG
63856: PUSH
63857: EMPTY
63858: LIST
63859: LIST
63860: PUSH
63861: LD_INT 1
63863: PUSH
63864: LD_INT 0
63866: PUSH
63867: EMPTY
63868: LIST
63869: LIST
63870: PUSH
63871: LD_INT 1
63873: PUSH
63874: LD_INT 1
63876: PUSH
63877: EMPTY
63878: LIST
63879: LIST
63880: PUSH
63881: LD_INT 0
63883: PUSH
63884: LD_INT 1
63886: PUSH
63887: EMPTY
63888: LIST
63889: LIST
63890: PUSH
63891: LD_INT 1
63893: NEG
63894: PUSH
63895: LD_INT 0
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 1
63904: NEG
63905: PUSH
63906: LD_INT 1
63908: NEG
63909: PUSH
63910: EMPTY
63911: LIST
63912: LIST
63913: PUSH
63914: LD_INT 1
63916: NEG
63917: PUSH
63918: LD_INT 2
63920: NEG
63921: PUSH
63922: EMPTY
63923: LIST
63924: LIST
63925: PUSH
63926: LD_INT 0
63928: PUSH
63929: LD_INT 2
63931: NEG
63932: PUSH
63933: EMPTY
63934: LIST
63935: LIST
63936: PUSH
63937: LD_INT 1
63939: PUSH
63940: LD_INT 1
63942: NEG
63943: PUSH
63944: EMPTY
63945: LIST
63946: LIST
63947: PUSH
63948: LD_INT 2
63950: PUSH
63951: LD_INT 0
63953: PUSH
63954: EMPTY
63955: LIST
63956: LIST
63957: PUSH
63958: LD_INT 2
63960: PUSH
63961: LD_INT 1
63963: PUSH
63964: EMPTY
63965: LIST
63966: LIST
63967: PUSH
63968: LD_INT 2
63970: PUSH
63971: LD_INT 2
63973: PUSH
63974: EMPTY
63975: LIST
63976: LIST
63977: PUSH
63978: LD_INT 1
63980: PUSH
63981: LD_INT 2
63983: PUSH
63984: EMPTY
63985: LIST
63986: LIST
63987: PUSH
63988: LD_INT 0
63990: PUSH
63991: LD_INT 2
63993: PUSH
63994: EMPTY
63995: LIST
63996: LIST
63997: PUSH
63998: LD_INT 1
64000: NEG
64001: PUSH
64002: LD_INT 1
64004: PUSH
64005: EMPTY
64006: LIST
64007: LIST
64008: PUSH
64009: LD_INT 2
64011: NEG
64012: PUSH
64013: LD_INT 0
64015: PUSH
64016: EMPTY
64017: LIST
64018: LIST
64019: PUSH
64020: LD_INT 2
64022: NEG
64023: PUSH
64024: LD_INT 1
64026: NEG
64027: PUSH
64028: EMPTY
64029: LIST
64030: LIST
64031: PUSH
64032: LD_INT 2
64034: NEG
64035: PUSH
64036: LD_INT 2
64038: NEG
64039: PUSH
64040: EMPTY
64041: LIST
64042: LIST
64043: PUSH
64044: LD_INT 2
64046: NEG
64047: PUSH
64048: LD_INT 3
64050: NEG
64051: PUSH
64052: EMPTY
64053: LIST
64054: LIST
64055: PUSH
64056: LD_INT 1
64058: NEG
64059: PUSH
64060: LD_INT 3
64062: NEG
64063: PUSH
64064: EMPTY
64065: LIST
64066: LIST
64067: PUSH
64068: LD_INT 1
64070: PUSH
64071: LD_INT 2
64073: NEG
64074: PUSH
64075: EMPTY
64076: LIST
64077: LIST
64078: PUSH
64079: LD_INT 2
64081: PUSH
64082: LD_INT 1
64084: NEG
64085: PUSH
64086: EMPTY
64087: LIST
64088: LIST
64089: PUSH
64090: EMPTY
64091: LIST
64092: LIST
64093: LIST
64094: LIST
64095: LIST
64096: LIST
64097: LIST
64098: LIST
64099: LIST
64100: LIST
64101: LIST
64102: LIST
64103: LIST
64104: LIST
64105: LIST
64106: LIST
64107: LIST
64108: LIST
64109: LIST
64110: LIST
64111: LIST
64112: LIST
64113: LIST
64114: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
64115: LD_ADDR_VAR 0 24
64119: PUSH
64120: LD_INT 0
64122: PUSH
64123: LD_INT 0
64125: PUSH
64126: EMPTY
64127: LIST
64128: LIST
64129: PUSH
64130: LD_INT 0
64132: PUSH
64133: LD_INT 1
64135: NEG
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: PUSH
64141: LD_INT 1
64143: PUSH
64144: LD_INT 0
64146: PUSH
64147: EMPTY
64148: LIST
64149: LIST
64150: PUSH
64151: LD_INT 1
64153: PUSH
64154: LD_INT 1
64156: PUSH
64157: EMPTY
64158: LIST
64159: LIST
64160: PUSH
64161: LD_INT 0
64163: PUSH
64164: LD_INT 1
64166: PUSH
64167: EMPTY
64168: LIST
64169: LIST
64170: PUSH
64171: LD_INT 1
64173: NEG
64174: PUSH
64175: LD_INT 0
64177: PUSH
64178: EMPTY
64179: LIST
64180: LIST
64181: PUSH
64182: LD_INT 1
64184: NEG
64185: PUSH
64186: LD_INT 1
64188: NEG
64189: PUSH
64190: EMPTY
64191: LIST
64192: LIST
64193: PUSH
64194: LD_INT 1
64196: NEG
64197: PUSH
64198: LD_INT 2
64200: NEG
64201: PUSH
64202: EMPTY
64203: LIST
64204: LIST
64205: PUSH
64206: LD_INT 0
64208: PUSH
64209: LD_INT 2
64211: NEG
64212: PUSH
64213: EMPTY
64214: LIST
64215: LIST
64216: PUSH
64217: LD_INT 1
64219: PUSH
64220: LD_INT 1
64222: NEG
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: PUSH
64228: LD_INT 2
64230: PUSH
64231: LD_INT 0
64233: PUSH
64234: EMPTY
64235: LIST
64236: LIST
64237: PUSH
64238: LD_INT 2
64240: PUSH
64241: LD_INT 1
64243: PUSH
64244: EMPTY
64245: LIST
64246: LIST
64247: PUSH
64248: LD_INT 2
64250: PUSH
64251: LD_INT 2
64253: PUSH
64254: EMPTY
64255: LIST
64256: LIST
64257: PUSH
64258: LD_INT 1
64260: PUSH
64261: LD_INT 2
64263: PUSH
64264: EMPTY
64265: LIST
64266: LIST
64267: PUSH
64268: LD_INT 0
64270: PUSH
64271: LD_INT 2
64273: PUSH
64274: EMPTY
64275: LIST
64276: LIST
64277: PUSH
64278: LD_INT 1
64280: NEG
64281: PUSH
64282: LD_INT 1
64284: PUSH
64285: EMPTY
64286: LIST
64287: LIST
64288: PUSH
64289: LD_INT 2
64291: NEG
64292: PUSH
64293: LD_INT 0
64295: PUSH
64296: EMPTY
64297: LIST
64298: LIST
64299: PUSH
64300: LD_INT 2
64302: NEG
64303: PUSH
64304: LD_INT 1
64306: NEG
64307: PUSH
64308: EMPTY
64309: LIST
64310: LIST
64311: PUSH
64312: LD_INT 2
64314: NEG
64315: PUSH
64316: LD_INT 2
64318: NEG
64319: PUSH
64320: EMPTY
64321: LIST
64322: LIST
64323: PUSH
64324: LD_INT 1
64326: PUSH
64327: LD_INT 2
64329: NEG
64330: PUSH
64331: EMPTY
64332: LIST
64333: LIST
64334: PUSH
64335: LD_INT 2
64337: PUSH
64338: LD_INT 1
64340: NEG
64341: PUSH
64342: EMPTY
64343: LIST
64344: LIST
64345: PUSH
64346: LD_INT 3
64348: PUSH
64349: LD_INT 1
64351: PUSH
64352: EMPTY
64353: LIST
64354: LIST
64355: PUSH
64356: LD_INT 3
64358: PUSH
64359: LD_INT 2
64361: PUSH
64362: EMPTY
64363: LIST
64364: LIST
64365: PUSH
64366: EMPTY
64367: LIST
64368: LIST
64369: LIST
64370: LIST
64371: LIST
64372: LIST
64373: LIST
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: LIST
64379: LIST
64380: LIST
64381: LIST
64382: LIST
64383: LIST
64384: LIST
64385: LIST
64386: LIST
64387: LIST
64388: LIST
64389: LIST
64390: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
64391: LD_ADDR_VAR 0 25
64395: PUSH
64396: LD_INT 0
64398: PUSH
64399: LD_INT 0
64401: PUSH
64402: EMPTY
64403: LIST
64404: LIST
64405: PUSH
64406: LD_INT 0
64408: PUSH
64409: LD_INT 1
64411: NEG
64412: PUSH
64413: EMPTY
64414: LIST
64415: LIST
64416: PUSH
64417: LD_INT 1
64419: PUSH
64420: LD_INT 0
64422: PUSH
64423: EMPTY
64424: LIST
64425: LIST
64426: PUSH
64427: LD_INT 1
64429: PUSH
64430: LD_INT 1
64432: PUSH
64433: EMPTY
64434: LIST
64435: LIST
64436: PUSH
64437: LD_INT 0
64439: PUSH
64440: LD_INT 1
64442: PUSH
64443: EMPTY
64444: LIST
64445: LIST
64446: PUSH
64447: LD_INT 1
64449: NEG
64450: PUSH
64451: LD_INT 0
64453: PUSH
64454: EMPTY
64455: LIST
64456: LIST
64457: PUSH
64458: LD_INT 1
64460: NEG
64461: PUSH
64462: LD_INT 1
64464: NEG
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 1
64472: NEG
64473: PUSH
64474: LD_INT 2
64476: NEG
64477: PUSH
64478: EMPTY
64479: LIST
64480: LIST
64481: PUSH
64482: LD_INT 0
64484: PUSH
64485: LD_INT 2
64487: NEG
64488: PUSH
64489: EMPTY
64490: LIST
64491: LIST
64492: PUSH
64493: LD_INT 1
64495: PUSH
64496: LD_INT 1
64498: NEG
64499: PUSH
64500: EMPTY
64501: LIST
64502: LIST
64503: PUSH
64504: LD_INT 2
64506: PUSH
64507: LD_INT 0
64509: PUSH
64510: EMPTY
64511: LIST
64512: LIST
64513: PUSH
64514: LD_INT 2
64516: PUSH
64517: LD_INT 1
64519: PUSH
64520: EMPTY
64521: LIST
64522: LIST
64523: PUSH
64524: LD_INT 2
64526: PUSH
64527: LD_INT 2
64529: PUSH
64530: EMPTY
64531: LIST
64532: LIST
64533: PUSH
64534: LD_INT 1
64536: PUSH
64537: LD_INT 2
64539: PUSH
64540: EMPTY
64541: LIST
64542: LIST
64543: PUSH
64544: LD_INT 0
64546: PUSH
64547: LD_INT 2
64549: PUSH
64550: EMPTY
64551: LIST
64552: LIST
64553: PUSH
64554: LD_INT 1
64556: NEG
64557: PUSH
64558: LD_INT 1
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 2
64567: NEG
64568: PUSH
64569: LD_INT 0
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 2
64578: NEG
64579: PUSH
64580: LD_INT 1
64582: NEG
64583: PUSH
64584: EMPTY
64585: LIST
64586: LIST
64587: PUSH
64588: LD_INT 2
64590: NEG
64591: PUSH
64592: LD_INT 2
64594: NEG
64595: PUSH
64596: EMPTY
64597: LIST
64598: LIST
64599: PUSH
64600: LD_INT 3
64602: PUSH
64603: LD_INT 1
64605: PUSH
64606: EMPTY
64607: LIST
64608: LIST
64609: PUSH
64610: LD_INT 3
64612: PUSH
64613: LD_INT 2
64615: PUSH
64616: EMPTY
64617: LIST
64618: LIST
64619: PUSH
64620: LD_INT 2
64622: PUSH
64623: LD_INT 3
64625: PUSH
64626: EMPTY
64627: LIST
64628: LIST
64629: PUSH
64630: LD_INT 1
64632: PUSH
64633: LD_INT 3
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: EMPTY
64641: LIST
64642: LIST
64643: LIST
64644: LIST
64645: LIST
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: LIST
64658: LIST
64659: LIST
64660: LIST
64661: LIST
64662: LIST
64663: LIST
64664: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
64665: LD_ADDR_VAR 0 26
64669: PUSH
64670: LD_INT 0
64672: PUSH
64673: LD_INT 0
64675: PUSH
64676: EMPTY
64677: LIST
64678: LIST
64679: PUSH
64680: LD_INT 0
64682: PUSH
64683: LD_INT 1
64685: NEG
64686: PUSH
64687: EMPTY
64688: LIST
64689: LIST
64690: PUSH
64691: LD_INT 1
64693: PUSH
64694: LD_INT 0
64696: PUSH
64697: EMPTY
64698: LIST
64699: LIST
64700: PUSH
64701: LD_INT 1
64703: PUSH
64704: LD_INT 1
64706: PUSH
64707: EMPTY
64708: LIST
64709: LIST
64710: PUSH
64711: LD_INT 0
64713: PUSH
64714: LD_INT 1
64716: PUSH
64717: EMPTY
64718: LIST
64719: LIST
64720: PUSH
64721: LD_INT 1
64723: NEG
64724: PUSH
64725: LD_INT 0
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: PUSH
64732: LD_INT 1
64734: NEG
64735: PUSH
64736: LD_INT 1
64738: NEG
64739: PUSH
64740: EMPTY
64741: LIST
64742: LIST
64743: PUSH
64744: LD_INT 1
64746: NEG
64747: PUSH
64748: LD_INT 2
64750: NEG
64751: PUSH
64752: EMPTY
64753: LIST
64754: LIST
64755: PUSH
64756: LD_INT 0
64758: PUSH
64759: LD_INT 2
64761: NEG
64762: PUSH
64763: EMPTY
64764: LIST
64765: LIST
64766: PUSH
64767: LD_INT 1
64769: PUSH
64770: LD_INT 1
64772: NEG
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 2
64780: PUSH
64781: LD_INT 0
64783: PUSH
64784: EMPTY
64785: LIST
64786: LIST
64787: PUSH
64788: LD_INT 2
64790: PUSH
64791: LD_INT 1
64793: PUSH
64794: EMPTY
64795: LIST
64796: LIST
64797: PUSH
64798: LD_INT 2
64800: PUSH
64801: LD_INT 2
64803: PUSH
64804: EMPTY
64805: LIST
64806: LIST
64807: PUSH
64808: LD_INT 1
64810: PUSH
64811: LD_INT 2
64813: PUSH
64814: EMPTY
64815: LIST
64816: LIST
64817: PUSH
64818: LD_INT 0
64820: PUSH
64821: LD_INT 2
64823: PUSH
64824: EMPTY
64825: LIST
64826: LIST
64827: PUSH
64828: LD_INT 1
64830: NEG
64831: PUSH
64832: LD_INT 1
64834: PUSH
64835: EMPTY
64836: LIST
64837: LIST
64838: PUSH
64839: LD_INT 2
64841: NEG
64842: PUSH
64843: LD_INT 0
64845: PUSH
64846: EMPTY
64847: LIST
64848: LIST
64849: PUSH
64850: LD_INT 2
64852: NEG
64853: PUSH
64854: LD_INT 1
64856: NEG
64857: PUSH
64858: EMPTY
64859: LIST
64860: LIST
64861: PUSH
64862: LD_INT 2
64864: NEG
64865: PUSH
64866: LD_INT 2
64868: NEG
64869: PUSH
64870: EMPTY
64871: LIST
64872: LIST
64873: PUSH
64874: LD_INT 2
64876: PUSH
64877: LD_INT 3
64879: PUSH
64880: EMPTY
64881: LIST
64882: LIST
64883: PUSH
64884: LD_INT 1
64886: PUSH
64887: LD_INT 3
64889: PUSH
64890: EMPTY
64891: LIST
64892: LIST
64893: PUSH
64894: LD_INT 1
64896: NEG
64897: PUSH
64898: LD_INT 2
64900: PUSH
64901: EMPTY
64902: LIST
64903: LIST
64904: PUSH
64905: LD_INT 2
64907: NEG
64908: PUSH
64909: LD_INT 1
64911: PUSH
64912: EMPTY
64913: LIST
64914: LIST
64915: PUSH
64916: EMPTY
64917: LIST
64918: LIST
64919: LIST
64920: LIST
64921: LIST
64922: LIST
64923: LIST
64924: LIST
64925: LIST
64926: LIST
64927: LIST
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
64941: LD_ADDR_VAR 0 27
64945: PUSH
64946: LD_INT 0
64948: PUSH
64949: LD_INT 0
64951: PUSH
64952: EMPTY
64953: LIST
64954: LIST
64955: PUSH
64956: LD_INT 0
64958: PUSH
64959: LD_INT 1
64961: NEG
64962: PUSH
64963: EMPTY
64964: LIST
64965: LIST
64966: PUSH
64967: LD_INT 1
64969: PUSH
64970: LD_INT 0
64972: PUSH
64973: EMPTY
64974: LIST
64975: LIST
64976: PUSH
64977: LD_INT 1
64979: PUSH
64980: LD_INT 1
64982: PUSH
64983: EMPTY
64984: LIST
64985: LIST
64986: PUSH
64987: LD_INT 0
64989: PUSH
64990: LD_INT 1
64992: PUSH
64993: EMPTY
64994: LIST
64995: LIST
64996: PUSH
64997: LD_INT 1
64999: NEG
65000: PUSH
65001: LD_INT 0
65003: PUSH
65004: EMPTY
65005: LIST
65006: LIST
65007: PUSH
65008: LD_INT 1
65010: NEG
65011: PUSH
65012: LD_INT 1
65014: NEG
65015: PUSH
65016: EMPTY
65017: LIST
65018: LIST
65019: PUSH
65020: LD_INT 1
65022: NEG
65023: PUSH
65024: LD_INT 2
65026: NEG
65027: PUSH
65028: EMPTY
65029: LIST
65030: LIST
65031: PUSH
65032: LD_INT 0
65034: PUSH
65035: LD_INT 2
65037: NEG
65038: PUSH
65039: EMPTY
65040: LIST
65041: LIST
65042: PUSH
65043: LD_INT 1
65045: PUSH
65046: LD_INT 1
65048: NEG
65049: PUSH
65050: EMPTY
65051: LIST
65052: LIST
65053: PUSH
65054: LD_INT 2
65056: PUSH
65057: LD_INT 0
65059: PUSH
65060: EMPTY
65061: LIST
65062: LIST
65063: PUSH
65064: LD_INT 2
65066: PUSH
65067: LD_INT 1
65069: PUSH
65070: EMPTY
65071: LIST
65072: LIST
65073: PUSH
65074: LD_INT 2
65076: PUSH
65077: LD_INT 2
65079: PUSH
65080: EMPTY
65081: LIST
65082: LIST
65083: PUSH
65084: LD_INT 1
65086: PUSH
65087: LD_INT 2
65089: PUSH
65090: EMPTY
65091: LIST
65092: LIST
65093: PUSH
65094: LD_INT 0
65096: PUSH
65097: LD_INT 2
65099: PUSH
65100: EMPTY
65101: LIST
65102: LIST
65103: PUSH
65104: LD_INT 1
65106: NEG
65107: PUSH
65108: LD_INT 1
65110: PUSH
65111: EMPTY
65112: LIST
65113: LIST
65114: PUSH
65115: LD_INT 2
65117: NEG
65118: PUSH
65119: LD_INT 0
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 2
65128: NEG
65129: PUSH
65130: LD_INT 1
65132: NEG
65133: PUSH
65134: EMPTY
65135: LIST
65136: LIST
65137: PUSH
65138: LD_INT 2
65140: NEG
65141: PUSH
65142: LD_INT 2
65144: NEG
65145: PUSH
65146: EMPTY
65147: LIST
65148: LIST
65149: PUSH
65150: LD_INT 1
65152: NEG
65153: PUSH
65154: LD_INT 2
65156: PUSH
65157: EMPTY
65158: LIST
65159: LIST
65160: PUSH
65161: LD_INT 2
65163: NEG
65164: PUSH
65165: LD_INT 1
65167: PUSH
65168: EMPTY
65169: LIST
65170: LIST
65171: PUSH
65172: LD_INT 3
65174: NEG
65175: PUSH
65176: LD_INT 1
65178: NEG
65179: PUSH
65180: EMPTY
65181: LIST
65182: LIST
65183: PUSH
65184: LD_INT 3
65186: NEG
65187: PUSH
65188: LD_INT 2
65190: NEG
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PUSH
65196: EMPTY
65197: LIST
65198: LIST
65199: LIST
65200: LIST
65201: LIST
65202: LIST
65203: LIST
65204: LIST
65205: LIST
65206: LIST
65207: LIST
65208: LIST
65209: LIST
65210: LIST
65211: LIST
65212: LIST
65213: LIST
65214: LIST
65215: LIST
65216: LIST
65217: LIST
65218: LIST
65219: LIST
65220: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
65221: LD_ADDR_VAR 0 28
65225: PUSH
65226: LD_INT 0
65228: PUSH
65229: LD_INT 0
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: PUSH
65236: LD_INT 0
65238: PUSH
65239: LD_INT 1
65241: NEG
65242: PUSH
65243: EMPTY
65244: LIST
65245: LIST
65246: PUSH
65247: LD_INT 1
65249: PUSH
65250: LD_INT 0
65252: PUSH
65253: EMPTY
65254: LIST
65255: LIST
65256: PUSH
65257: LD_INT 1
65259: PUSH
65260: LD_INT 1
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 0
65269: PUSH
65270: LD_INT 1
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 1
65279: NEG
65280: PUSH
65281: LD_INT 0
65283: PUSH
65284: EMPTY
65285: LIST
65286: LIST
65287: PUSH
65288: LD_INT 1
65290: NEG
65291: PUSH
65292: LD_INT 1
65294: NEG
65295: PUSH
65296: EMPTY
65297: LIST
65298: LIST
65299: PUSH
65300: LD_INT 1
65302: NEG
65303: PUSH
65304: LD_INT 2
65306: NEG
65307: PUSH
65308: EMPTY
65309: LIST
65310: LIST
65311: PUSH
65312: LD_INT 0
65314: PUSH
65315: LD_INT 2
65317: NEG
65318: PUSH
65319: EMPTY
65320: LIST
65321: LIST
65322: PUSH
65323: LD_INT 1
65325: PUSH
65326: LD_INT 1
65328: NEG
65329: PUSH
65330: EMPTY
65331: LIST
65332: LIST
65333: PUSH
65334: LD_INT 2
65336: PUSH
65337: LD_INT 0
65339: PUSH
65340: EMPTY
65341: LIST
65342: LIST
65343: PUSH
65344: LD_INT 2
65346: PUSH
65347: LD_INT 1
65349: PUSH
65350: EMPTY
65351: LIST
65352: LIST
65353: PUSH
65354: LD_INT 2
65356: PUSH
65357: LD_INT 2
65359: PUSH
65360: EMPTY
65361: LIST
65362: LIST
65363: PUSH
65364: LD_INT 1
65366: PUSH
65367: LD_INT 2
65369: PUSH
65370: EMPTY
65371: LIST
65372: LIST
65373: PUSH
65374: LD_INT 0
65376: PUSH
65377: LD_INT 2
65379: PUSH
65380: EMPTY
65381: LIST
65382: LIST
65383: PUSH
65384: LD_INT 1
65386: NEG
65387: PUSH
65388: LD_INT 1
65390: PUSH
65391: EMPTY
65392: LIST
65393: LIST
65394: PUSH
65395: LD_INT 2
65397: NEG
65398: PUSH
65399: LD_INT 0
65401: PUSH
65402: EMPTY
65403: LIST
65404: LIST
65405: PUSH
65406: LD_INT 2
65408: NEG
65409: PUSH
65410: LD_INT 1
65412: NEG
65413: PUSH
65414: EMPTY
65415: LIST
65416: LIST
65417: PUSH
65418: LD_INT 2
65420: NEG
65421: PUSH
65422: LD_INT 2
65424: NEG
65425: PUSH
65426: EMPTY
65427: LIST
65428: LIST
65429: PUSH
65430: LD_INT 2
65432: NEG
65433: PUSH
65434: LD_INT 3
65436: NEG
65437: PUSH
65438: EMPTY
65439: LIST
65440: LIST
65441: PUSH
65442: LD_INT 1
65444: NEG
65445: PUSH
65446: LD_INT 3
65448: NEG
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 3
65456: NEG
65457: PUSH
65458: LD_INT 1
65460: NEG
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 3
65468: NEG
65469: PUSH
65470: LD_INT 2
65472: NEG
65473: PUSH
65474: EMPTY
65475: LIST
65476: LIST
65477: PUSH
65478: EMPTY
65479: LIST
65480: LIST
65481: LIST
65482: LIST
65483: LIST
65484: LIST
65485: LIST
65486: LIST
65487: LIST
65488: LIST
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
65503: LD_ADDR_VAR 0 29
65507: PUSH
65508: LD_INT 0
65510: PUSH
65511: LD_INT 0
65513: PUSH
65514: EMPTY
65515: LIST
65516: LIST
65517: PUSH
65518: LD_INT 0
65520: PUSH
65521: LD_INT 1
65523: NEG
65524: PUSH
65525: EMPTY
65526: LIST
65527: LIST
65528: PUSH
65529: LD_INT 1
65531: PUSH
65532: LD_INT 0
65534: PUSH
65535: EMPTY
65536: LIST
65537: LIST
65538: PUSH
65539: LD_INT 1
65541: PUSH
65542: LD_INT 1
65544: PUSH
65545: EMPTY
65546: LIST
65547: LIST
65548: PUSH
65549: LD_INT 0
65551: PUSH
65552: LD_INT 1
65554: PUSH
65555: EMPTY
65556: LIST
65557: LIST
65558: PUSH
65559: LD_INT 1
65561: NEG
65562: PUSH
65563: LD_INT 0
65565: PUSH
65566: EMPTY
65567: LIST
65568: LIST
65569: PUSH
65570: LD_INT 1
65572: NEG
65573: PUSH
65574: LD_INT 1
65576: NEG
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: PUSH
65582: LD_INT 1
65584: NEG
65585: PUSH
65586: LD_INT 2
65588: NEG
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 0
65596: PUSH
65597: LD_INT 2
65599: NEG
65600: PUSH
65601: EMPTY
65602: LIST
65603: LIST
65604: PUSH
65605: LD_INT 1
65607: PUSH
65608: LD_INT 1
65610: NEG
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 2
65618: PUSH
65619: LD_INT 0
65621: PUSH
65622: EMPTY
65623: LIST
65624: LIST
65625: PUSH
65626: LD_INT 2
65628: PUSH
65629: LD_INT 1
65631: PUSH
65632: EMPTY
65633: LIST
65634: LIST
65635: PUSH
65636: LD_INT 1
65638: PUSH
65639: LD_INT 2
65641: PUSH
65642: EMPTY
65643: LIST
65644: LIST
65645: PUSH
65646: LD_INT 0
65648: PUSH
65649: LD_INT 2
65651: PUSH
65652: EMPTY
65653: LIST
65654: LIST
65655: PUSH
65656: LD_INT 1
65658: NEG
65659: PUSH
65660: LD_INT 1
65662: PUSH
65663: EMPTY
65664: LIST
65665: LIST
65666: PUSH
65667: LD_INT 2
65669: NEG
65670: PUSH
65671: LD_INT 1
65673: NEG
65674: PUSH
65675: EMPTY
65676: LIST
65677: LIST
65678: PUSH
65679: LD_INT 2
65681: NEG
65682: PUSH
65683: LD_INT 2
65685: NEG
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 2
65693: NEG
65694: PUSH
65695: LD_INT 3
65697: NEG
65698: PUSH
65699: EMPTY
65700: LIST
65701: LIST
65702: PUSH
65703: LD_INT 2
65705: PUSH
65706: LD_INT 1
65708: NEG
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 3
65716: PUSH
65717: LD_INT 1
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 1
65726: PUSH
65727: LD_INT 3
65729: PUSH
65730: EMPTY
65731: LIST
65732: LIST
65733: PUSH
65734: LD_INT 1
65736: NEG
65737: PUSH
65738: LD_INT 2
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 3
65747: NEG
65748: PUSH
65749: LD_INT 2
65751: NEG
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: LIST
65767: LIST
65768: LIST
65769: LIST
65770: LIST
65771: LIST
65772: LIST
65773: LIST
65774: LIST
65775: LIST
65776: LIST
65777: LIST
65778: LIST
65779: LIST
65780: LIST
65781: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
65782: LD_ADDR_VAR 0 30
65786: PUSH
65787: LD_INT 0
65789: PUSH
65790: LD_INT 0
65792: PUSH
65793: EMPTY
65794: LIST
65795: LIST
65796: PUSH
65797: LD_INT 0
65799: PUSH
65800: LD_INT 1
65802: NEG
65803: PUSH
65804: EMPTY
65805: LIST
65806: LIST
65807: PUSH
65808: LD_INT 1
65810: PUSH
65811: LD_INT 0
65813: PUSH
65814: EMPTY
65815: LIST
65816: LIST
65817: PUSH
65818: LD_INT 1
65820: PUSH
65821: LD_INT 1
65823: PUSH
65824: EMPTY
65825: LIST
65826: LIST
65827: PUSH
65828: LD_INT 0
65830: PUSH
65831: LD_INT 1
65833: PUSH
65834: EMPTY
65835: LIST
65836: LIST
65837: PUSH
65838: LD_INT 1
65840: NEG
65841: PUSH
65842: LD_INT 0
65844: PUSH
65845: EMPTY
65846: LIST
65847: LIST
65848: PUSH
65849: LD_INT 1
65851: NEG
65852: PUSH
65853: LD_INT 1
65855: NEG
65856: PUSH
65857: EMPTY
65858: LIST
65859: LIST
65860: PUSH
65861: LD_INT 1
65863: NEG
65864: PUSH
65865: LD_INT 2
65867: NEG
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 0
65875: PUSH
65876: LD_INT 2
65878: NEG
65879: PUSH
65880: EMPTY
65881: LIST
65882: LIST
65883: PUSH
65884: LD_INT 1
65886: PUSH
65887: LD_INT 1
65889: NEG
65890: PUSH
65891: EMPTY
65892: LIST
65893: LIST
65894: PUSH
65895: LD_INT 2
65897: PUSH
65898: LD_INT 0
65900: PUSH
65901: EMPTY
65902: LIST
65903: LIST
65904: PUSH
65905: LD_INT 2
65907: PUSH
65908: LD_INT 1
65910: PUSH
65911: EMPTY
65912: LIST
65913: LIST
65914: PUSH
65915: LD_INT 2
65917: PUSH
65918: LD_INT 2
65920: PUSH
65921: EMPTY
65922: LIST
65923: LIST
65924: PUSH
65925: LD_INT 1
65927: PUSH
65928: LD_INT 2
65930: PUSH
65931: EMPTY
65932: LIST
65933: LIST
65934: PUSH
65935: LD_INT 1
65937: NEG
65938: PUSH
65939: LD_INT 1
65941: PUSH
65942: EMPTY
65943: LIST
65944: LIST
65945: PUSH
65946: LD_INT 2
65948: NEG
65949: PUSH
65950: LD_INT 0
65952: PUSH
65953: EMPTY
65954: LIST
65955: LIST
65956: PUSH
65957: LD_INT 2
65959: NEG
65960: PUSH
65961: LD_INT 1
65963: NEG
65964: PUSH
65965: EMPTY
65966: LIST
65967: LIST
65968: PUSH
65969: LD_INT 1
65971: NEG
65972: PUSH
65973: LD_INT 3
65975: NEG
65976: PUSH
65977: EMPTY
65978: LIST
65979: LIST
65980: PUSH
65981: LD_INT 1
65983: PUSH
65984: LD_INT 2
65986: NEG
65987: PUSH
65988: EMPTY
65989: LIST
65990: LIST
65991: PUSH
65992: LD_INT 3
65994: PUSH
65995: LD_INT 2
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 2
66004: PUSH
66005: LD_INT 3
66007: PUSH
66008: EMPTY
66009: LIST
66010: LIST
66011: PUSH
66012: LD_INT 2
66014: NEG
66015: PUSH
66016: LD_INT 1
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 3
66025: NEG
66026: PUSH
66027: LD_INT 1
66029: NEG
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: EMPTY
66036: LIST
66037: LIST
66038: LIST
66039: LIST
66040: LIST
66041: LIST
66042: LIST
66043: LIST
66044: LIST
66045: LIST
66046: LIST
66047: LIST
66048: LIST
66049: LIST
66050: LIST
66051: LIST
66052: LIST
66053: LIST
66054: LIST
66055: LIST
66056: LIST
66057: LIST
66058: LIST
66059: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
66060: LD_ADDR_VAR 0 31
66064: PUSH
66065: LD_INT 0
66067: PUSH
66068: LD_INT 0
66070: PUSH
66071: EMPTY
66072: LIST
66073: LIST
66074: PUSH
66075: LD_INT 0
66077: PUSH
66078: LD_INT 1
66080: NEG
66081: PUSH
66082: EMPTY
66083: LIST
66084: LIST
66085: PUSH
66086: LD_INT 1
66088: PUSH
66089: LD_INT 0
66091: PUSH
66092: EMPTY
66093: LIST
66094: LIST
66095: PUSH
66096: LD_INT 1
66098: PUSH
66099: LD_INT 1
66101: PUSH
66102: EMPTY
66103: LIST
66104: LIST
66105: PUSH
66106: LD_INT 0
66108: PUSH
66109: LD_INT 1
66111: PUSH
66112: EMPTY
66113: LIST
66114: LIST
66115: PUSH
66116: LD_INT 1
66118: NEG
66119: PUSH
66120: LD_INT 0
66122: PUSH
66123: EMPTY
66124: LIST
66125: LIST
66126: PUSH
66127: LD_INT 1
66129: NEG
66130: PUSH
66131: LD_INT 1
66133: NEG
66134: PUSH
66135: EMPTY
66136: LIST
66137: LIST
66138: PUSH
66139: LD_INT 1
66141: NEG
66142: PUSH
66143: LD_INT 2
66145: NEG
66146: PUSH
66147: EMPTY
66148: LIST
66149: LIST
66150: PUSH
66151: LD_INT 1
66153: PUSH
66154: LD_INT 1
66156: NEG
66157: PUSH
66158: EMPTY
66159: LIST
66160: LIST
66161: PUSH
66162: LD_INT 2
66164: PUSH
66165: LD_INT 0
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 2
66174: PUSH
66175: LD_INT 1
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: PUSH
66182: LD_INT 2
66184: PUSH
66185: LD_INT 2
66187: PUSH
66188: EMPTY
66189: LIST
66190: LIST
66191: PUSH
66192: LD_INT 1
66194: PUSH
66195: LD_INT 2
66197: PUSH
66198: EMPTY
66199: LIST
66200: LIST
66201: PUSH
66202: LD_INT 0
66204: PUSH
66205: LD_INT 2
66207: PUSH
66208: EMPTY
66209: LIST
66210: LIST
66211: PUSH
66212: LD_INT 1
66214: NEG
66215: PUSH
66216: LD_INT 1
66218: PUSH
66219: EMPTY
66220: LIST
66221: LIST
66222: PUSH
66223: LD_INT 2
66225: NEG
66226: PUSH
66227: LD_INT 1
66229: NEG
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 2
66237: NEG
66238: PUSH
66239: LD_INT 2
66241: NEG
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 2
66249: NEG
66250: PUSH
66251: LD_INT 3
66253: NEG
66254: PUSH
66255: EMPTY
66256: LIST
66257: LIST
66258: PUSH
66259: LD_INT 2
66261: PUSH
66262: LD_INT 1
66264: NEG
66265: PUSH
66266: EMPTY
66267: LIST
66268: LIST
66269: PUSH
66270: LD_INT 3
66272: PUSH
66273: LD_INT 1
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 1
66282: PUSH
66283: LD_INT 3
66285: PUSH
66286: EMPTY
66287: LIST
66288: LIST
66289: PUSH
66290: LD_INT 1
66292: NEG
66293: PUSH
66294: LD_INT 2
66296: PUSH
66297: EMPTY
66298: LIST
66299: LIST
66300: PUSH
66301: LD_INT 3
66303: NEG
66304: PUSH
66305: LD_INT 2
66307: NEG
66308: PUSH
66309: EMPTY
66310: LIST
66311: LIST
66312: PUSH
66313: EMPTY
66314: LIST
66315: LIST
66316: LIST
66317: LIST
66318: LIST
66319: LIST
66320: LIST
66321: LIST
66322: LIST
66323: LIST
66324: LIST
66325: LIST
66326: LIST
66327: LIST
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66338: LD_ADDR_VAR 0 32
66342: PUSH
66343: LD_INT 0
66345: PUSH
66346: LD_INT 0
66348: PUSH
66349: EMPTY
66350: LIST
66351: LIST
66352: PUSH
66353: LD_INT 0
66355: PUSH
66356: LD_INT 1
66358: NEG
66359: PUSH
66360: EMPTY
66361: LIST
66362: LIST
66363: PUSH
66364: LD_INT 1
66366: PUSH
66367: LD_INT 0
66369: PUSH
66370: EMPTY
66371: LIST
66372: LIST
66373: PUSH
66374: LD_INT 1
66376: PUSH
66377: LD_INT 1
66379: PUSH
66380: EMPTY
66381: LIST
66382: LIST
66383: PUSH
66384: LD_INT 0
66386: PUSH
66387: LD_INT 1
66389: PUSH
66390: EMPTY
66391: LIST
66392: LIST
66393: PUSH
66394: LD_INT 1
66396: NEG
66397: PUSH
66398: LD_INT 0
66400: PUSH
66401: EMPTY
66402: LIST
66403: LIST
66404: PUSH
66405: LD_INT 1
66407: NEG
66408: PUSH
66409: LD_INT 1
66411: NEG
66412: PUSH
66413: EMPTY
66414: LIST
66415: LIST
66416: PUSH
66417: LD_INT 1
66419: NEG
66420: PUSH
66421: LD_INT 2
66423: NEG
66424: PUSH
66425: EMPTY
66426: LIST
66427: LIST
66428: PUSH
66429: LD_INT 0
66431: PUSH
66432: LD_INT 2
66434: NEG
66435: PUSH
66436: EMPTY
66437: LIST
66438: LIST
66439: PUSH
66440: LD_INT 1
66442: PUSH
66443: LD_INT 1
66445: NEG
66446: PUSH
66447: EMPTY
66448: LIST
66449: LIST
66450: PUSH
66451: LD_INT 2
66453: PUSH
66454: LD_INT 1
66456: PUSH
66457: EMPTY
66458: LIST
66459: LIST
66460: PUSH
66461: LD_INT 2
66463: PUSH
66464: LD_INT 2
66466: PUSH
66467: EMPTY
66468: LIST
66469: LIST
66470: PUSH
66471: LD_INT 1
66473: PUSH
66474: LD_INT 2
66476: PUSH
66477: EMPTY
66478: LIST
66479: LIST
66480: PUSH
66481: LD_INT 0
66483: PUSH
66484: LD_INT 2
66486: PUSH
66487: EMPTY
66488: LIST
66489: LIST
66490: PUSH
66491: LD_INT 1
66493: NEG
66494: PUSH
66495: LD_INT 1
66497: PUSH
66498: EMPTY
66499: LIST
66500: LIST
66501: PUSH
66502: LD_INT 2
66504: NEG
66505: PUSH
66506: LD_INT 0
66508: PUSH
66509: EMPTY
66510: LIST
66511: LIST
66512: PUSH
66513: LD_INT 2
66515: NEG
66516: PUSH
66517: LD_INT 1
66519: NEG
66520: PUSH
66521: EMPTY
66522: LIST
66523: LIST
66524: PUSH
66525: LD_INT 1
66527: NEG
66528: PUSH
66529: LD_INT 3
66531: NEG
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 1
66539: PUSH
66540: LD_INT 2
66542: NEG
66543: PUSH
66544: EMPTY
66545: LIST
66546: LIST
66547: PUSH
66548: LD_INT 3
66550: PUSH
66551: LD_INT 2
66553: PUSH
66554: EMPTY
66555: LIST
66556: LIST
66557: PUSH
66558: LD_INT 2
66560: PUSH
66561: LD_INT 3
66563: PUSH
66564: EMPTY
66565: LIST
66566: LIST
66567: PUSH
66568: LD_INT 2
66570: NEG
66571: PUSH
66572: LD_INT 1
66574: PUSH
66575: EMPTY
66576: LIST
66577: LIST
66578: PUSH
66579: LD_INT 3
66581: NEG
66582: PUSH
66583: LD_INT 1
66585: NEG
66586: PUSH
66587: EMPTY
66588: LIST
66589: LIST
66590: PUSH
66591: EMPTY
66592: LIST
66593: LIST
66594: LIST
66595: LIST
66596: LIST
66597: LIST
66598: LIST
66599: LIST
66600: LIST
66601: LIST
66602: LIST
66603: LIST
66604: LIST
66605: LIST
66606: LIST
66607: LIST
66608: LIST
66609: LIST
66610: LIST
66611: LIST
66612: LIST
66613: LIST
66614: LIST
66615: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
66616: LD_ADDR_VAR 0 33
66620: PUSH
66621: LD_INT 0
66623: PUSH
66624: LD_INT 0
66626: PUSH
66627: EMPTY
66628: LIST
66629: LIST
66630: PUSH
66631: LD_INT 0
66633: PUSH
66634: LD_INT 1
66636: NEG
66637: PUSH
66638: EMPTY
66639: LIST
66640: LIST
66641: PUSH
66642: LD_INT 1
66644: PUSH
66645: LD_INT 0
66647: PUSH
66648: EMPTY
66649: LIST
66650: LIST
66651: PUSH
66652: LD_INT 1
66654: PUSH
66655: LD_INT 1
66657: PUSH
66658: EMPTY
66659: LIST
66660: LIST
66661: PUSH
66662: LD_INT 0
66664: PUSH
66665: LD_INT 1
66667: PUSH
66668: EMPTY
66669: LIST
66670: LIST
66671: PUSH
66672: LD_INT 1
66674: NEG
66675: PUSH
66676: LD_INT 0
66678: PUSH
66679: EMPTY
66680: LIST
66681: LIST
66682: PUSH
66683: LD_INT 1
66685: NEG
66686: PUSH
66687: LD_INT 1
66689: NEG
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 1
66697: NEG
66698: PUSH
66699: LD_INT 2
66701: NEG
66702: PUSH
66703: EMPTY
66704: LIST
66705: LIST
66706: PUSH
66707: LD_INT 1
66709: PUSH
66710: LD_INT 1
66712: NEG
66713: PUSH
66714: EMPTY
66715: LIST
66716: LIST
66717: PUSH
66718: LD_INT 2
66720: PUSH
66721: LD_INT 0
66723: PUSH
66724: EMPTY
66725: LIST
66726: LIST
66727: PUSH
66728: LD_INT 2
66730: PUSH
66731: LD_INT 1
66733: PUSH
66734: EMPTY
66735: LIST
66736: LIST
66737: PUSH
66738: LD_INT 1
66740: PUSH
66741: LD_INT 2
66743: PUSH
66744: EMPTY
66745: LIST
66746: LIST
66747: PUSH
66748: LD_INT 0
66750: PUSH
66751: LD_INT 2
66753: PUSH
66754: EMPTY
66755: LIST
66756: LIST
66757: PUSH
66758: LD_INT 1
66760: NEG
66761: PUSH
66762: LD_INT 1
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: PUSH
66769: LD_INT 2
66771: NEG
66772: PUSH
66773: LD_INT 0
66775: PUSH
66776: EMPTY
66777: LIST
66778: LIST
66779: PUSH
66780: LD_INT 2
66782: NEG
66783: PUSH
66784: LD_INT 1
66786: NEG
66787: PUSH
66788: EMPTY
66789: LIST
66790: LIST
66791: PUSH
66792: LD_INT 2
66794: NEG
66795: PUSH
66796: LD_INT 2
66798: NEG
66799: PUSH
66800: EMPTY
66801: LIST
66802: LIST
66803: PUSH
66804: LD_INT 2
66806: NEG
66807: PUSH
66808: LD_INT 3
66810: NEG
66811: PUSH
66812: EMPTY
66813: LIST
66814: LIST
66815: PUSH
66816: LD_INT 2
66818: PUSH
66819: LD_INT 1
66821: NEG
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 3
66829: PUSH
66830: LD_INT 1
66832: PUSH
66833: EMPTY
66834: LIST
66835: LIST
66836: PUSH
66837: LD_INT 1
66839: PUSH
66840: LD_INT 3
66842: PUSH
66843: EMPTY
66844: LIST
66845: LIST
66846: PUSH
66847: LD_INT 1
66849: NEG
66850: PUSH
66851: LD_INT 2
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 3
66860: NEG
66861: PUSH
66862: LD_INT 2
66864: NEG
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: LIST
66874: LIST
66875: LIST
66876: LIST
66877: LIST
66878: LIST
66879: LIST
66880: LIST
66881: LIST
66882: LIST
66883: LIST
66884: LIST
66885: LIST
66886: LIST
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
66895: LD_ADDR_VAR 0 34
66899: PUSH
66900: LD_INT 0
66902: PUSH
66903: LD_INT 0
66905: PUSH
66906: EMPTY
66907: LIST
66908: LIST
66909: PUSH
66910: LD_INT 0
66912: PUSH
66913: LD_INT 1
66915: NEG
66916: PUSH
66917: EMPTY
66918: LIST
66919: LIST
66920: PUSH
66921: LD_INT 1
66923: PUSH
66924: LD_INT 0
66926: PUSH
66927: EMPTY
66928: LIST
66929: LIST
66930: PUSH
66931: LD_INT 1
66933: PUSH
66934: LD_INT 1
66936: PUSH
66937: EMPTY
66938: LIST
66939: LIST
66940: PUSH
66941: LD_INT 0
66943: PUSH
66944: LD_INT 1
66946: PUSH
66947: EMPTY
66948: LIST
66949: LIST
66950: PUSH
66951: LD_INT 1
66953: NEG
66954: PUSH
66955: LD_INT 0
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: LD_INT 1
66964: NEG
66965: PUSH
66966: LD_INT 1
66968: NEG
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 1
66976: NEG
66977: PUSH
66978: LD_INT 2
66980: NEG
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 0
66988: PUSH
66989: LD_INT 2
66991: NEG
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 1
66999: PUSH
67000: LD_INT 1
67002: NEG
67003: PUSH
67004: EMPTY
67005: LIST
67006: LIST
67007: PUSH
67008: LD_INT 2
67010: PUSH
67011: LD_INT 1
67013: PUSH
67014: EMPTY
67015: LIST
67016: LIST
67017: PUSH
67018: LD_INT 2
67020: PUSH
67021: LD_INT 2
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 1
67030: PUSH
67031: LD_INT 2
67033: PUSH
67034: EMPTY
67035: LIST
67036: LIST
67037: PUSH
67038: LD_INT 1
67040: NEG
67041: PUSH
67042: LD_INT 1
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 2
67051: NEG
67052: PUSH
67053: LD_INT 0
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 2
67062: NEG
67063: PUSH
67064: LD_INT 1
67066: NEG
67067: PUSH
67068: EMPTY
67069: LIST
67070: LIST
67071: PUSH
67072: LD_INT 2
67074: NEG
67075: PUSH
67076: LD_INT 2
67078: NEG
67079: PUSH
67080: EMPTY
67081: LIST
67082: LIST
67083: PUSH
67084: LD_INT 1
67086: NEG
67087: PUSH
67088: LD_INT 3
67090: NEG
67091: PUSH
67092: EMPTY
67093: LIST
67094: LIST
67095: PUSH
67096: LD_INT 1
67098: PUSH
67099: LD_INT 2
67101: NEG
67102: PUSH
67103: EMPTY
67104: LIST
67105: LIST
67106: PUSH
67107: LD_INT 3
67109: PUSH
67110: LD_INT 2
67112: PUSH
67113: EMPTY
67114: LIST
67115: LIST
67116: PUSH
67117: LD_INT 2
67119: PUSH
67120: LD_INT 3
67122: PUSH
67123: EMPTY
67124: LIST
67125: LIST
67126: PUSH
67127: LD_INT 2
67129: NEG
67130: PUSH
67131: LD_INT 1
67133: PUSH
67134: EMPTY
67135: LIST
67136: LIST
67137: PUSH
67138: LD_INT 3
67140: NEG
67141: PUSH
67142: LD_INT 1
67144: NEG
67145: PUSH
67146: EMPTY
67147: LIST
67148: LIST
67149: PUSH
67150: EMPTY
67151: LIST
67152: LIST
67153: LIST
67154: LIST
67155: LIST
67156: LIST
67157: LIST
67158: LIST
67159: LIST
67160: LIST
67161: LIST
67162: LIST
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
67175: LD_ADDR_VAR 0 35
67179: PUSH
67180: LD_INT 0
67182: PUSH
67183: LD_INT 0
67185: PUSH
67186: EMPTY
67187: LIST
67188: LIST
67189: PUSH
67190: LD_INT 0
67192: PUSH
67193: LD_INT 1
67195: NEG
67196: PUSH
67197: EMPTY
67198: LIST
67199: LIST
67200: PUSH
67201: LD_INT 1
67203: PUSH
67204: LD_INT 0
67206: PUSH
67207: EMPTY
67208: LIST
67209: LIST
67210: PUSH
67211: LD_INT 1
67213: PUSH
67214: LD_INT 1
67216: PUSH
67217: EMPTY
67218: LIST
67219: LIST
67220: PUSH
67221: LD_INT 0
67223: PUSH
67224: LD_INT 1
67226: PUSH
67227: EMPTY
67228: LIST
67229: LIST
67230: PUSH
67231: LD_INT 1
67233: NEG
67234: PUSH
67235: LD_INT 0
67237: PUSH
67238: EMPTY
67239: LIST
67240: LIST
67241: PUSH
67242: LD_INT 1
67244: NEG
67245: PUSH
67246: LD_INT 1
67248: NEG
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 2
67256: PUSH
67257: LD_INT 1
67259: PUSH
67260: EMPTY
67261: LIST
67262: LIST
67263: PUSH
67264: LD_INT 2
67266: NEG
67267: PUSH
67268: LD_INT 1
67270: NEG
67271: PUSH
67272: EMPTY
67273: LIST
67274: LIST
67275: PUSH
67276: EMPTY
67277: LIST
67278: LIST
67279: LIST
67280: LIST
67281: LIST
67282: LIST
67283: LIST
67284: LIST
67285: LIST
67286: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
67287: LD_ADDR_VAR 0 36
67291: PUSH
67292: LD_INT 0
67294: PUSH
67295: LD_INT 0
67297: PUSH
67298: EMPTY
67299: LIST
67300: LIST
67301: PUSH
67302: LD_INT 0
67304: PUSH
67305: LD_INT 1
67307: NEG
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 1
67315: PUSH
67316: LD_INT 0
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: LD_INT 1
67325: PUSH
67326: LD_INT 1
67328: PUSH
67329: EMPTY
67330: LIST
67331: LIST
67332: PUSH
67333: LD_INT 0
67335: PUSH
67336: LD_INT 1
67338: PUSH
67339: EMPTY
67340: LIST
67341: LIST
67342: PUSH
67343: LD_INT 1
67345: NEG
67346: PUSH
67347: LD_INT 0
67349: PUSH
67350: EMPTY
67351: LIST
67352: LIST
67353: PUSH
67354: LD_INT 1
67356: NEG
67357: PUSH
67358: LD_INT 1
67360: NEG
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 1
67368: NEG
67369: PUSH
67370: LD_INT 2
67372: NEG
67373: PUSH
67374: EMPTY
67375: LIST
67376: LIST
67377: PUSH
67378: LD_INT 1
67380: PUSH
67381: LD_INT 2
67383: PUSH
67384: EMPTY
67385: LIST
67386: LIST
67387: PUSH
67388: EMPTY
67389: LIST
67390: LIST
67391: LIST
67392: LIST
67393: LIST
67394: LIST
67395: LIST
67396: LIST
67397: LIST
67398: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
67399: LD_ADDR_VAR 0 37
67403: PUSH
67404: LD_INT 0
67406: PUSH
67407: LD_INT 0
67409: PUSH
67410: EMPTY
67411: LIST
67412: LIST
67413: PUSH
67414: LD_INT 0
67416: PUSH
67417: LD_INT 1
67419: NEG
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 1
67427: PUSH
67428: LD_INT 0
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 1
67437: PUSH
67438: LD_INT 1
67440: PUSH
67441: EMPTY
67442: LIST
67443: LIST
67444: PUSH
67445: LD_INT 0
67447: PUSH
67448: LD_INT 1
67450: PUSH
67451: EMPTY
67452: LIST
67453: LIST
67454: PUSH
67455: LD_INT 1
67457: NEG
67458: PUSH
67459: LD_INT 0
67461: PUSH
67462: EMPTY
67463: LIST
67464: LIST
67465: PUSH
67466: LD_INT 1
67468: NEG
67469: PUSH
67470: LD_INT 1
67472: NEG
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 1
67480: PUSH
67481: LD_INT 1
67483: NEG
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 1
67491: NEG
67492: PUSH
67493: LD_INT 1
67495: PUSH
67496: EMPTY
67497: LIST
67498: LIST
67499: PUSH
67500: EMPTY
67501: LIST
67502: LIST
67503: LIST
67504: LIST
67505: LIST
67506: LIST
67507: LIST
67508: LIST
67509: LIST
67510: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
67511: LD_ADDR_VAR 0 38
67515: PUSH
67516: LD_INT 0
67518: PUSH
67519: LD_INT 0
67521: PUSH
67522: EMPTY
67523: LIST
67524: LIST
67525: PUSH
67526: LD_INT 0
67528: PUSH
67529: LD_INT 1
67531: NEG
67532: PUSH
67533: EMPTY
67534: LIST
67535: LIST
67536: PUSH
67537: LD_INT 1
67539: PUSH
67540: LD_INT 0
67542: PUSH
67543: EMPTY
67544: LIST
67545: LIST
67546: PUSH
67547: LD_INT 1
67549: PUSH
67550: LD_INT 1
67552: PUSH
67553: EMPTY
67554: LIST
67555: LIST
67556: PUSH
67557: LD_INT 0
67559: PUSH
67560: LD_INT 1
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 1
67569: NEG
67570: PUSH
67571: LD_INT 0
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 1
67580: NEG
67581: PUSH
67582: LD_INT 1
67584: NEG
67585: PUSH
67586: EMPTY
67587: LIST
67588: LIST
67589: PUSH
67590: LD_INT 2
67592: PUSH
67593: LD_INT 1
67595: PUSH
67596: EMPTY
67597: LIST
67598: LIST
67599: PUSH
67600: LD_INT 2
67602: NEG
67603: PUSH
67604: LD_INT 1
67606: NEG
67607: PUSH
67608: EMPTY
67609: LIST
67610: LIST
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: LIST
67616: LIST
67617: LIST
67618: LIST
67619: LIST
67620: LIST
67621: LIST
67622: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
67623: LD_ADDR_VAR 0 39
67627: PUSH
67628: LD_INT 0
67630: PUSH
67631: LD_INT 0
67633: PUSH
67634: EMPTY
67635: LIST
67636: LIST
67637: PUSH
67638: LD_INT 0
67640: PUSH
67641: LD_INT 1
67643: NEG
67644: PUSH
67645: EMPTY
67646: LIST
67647: LIST
67648: PUSH
67649: LD_INT 1
67651: PUSH
67652: LD_INT 0
67654: PUSH
67655: EMPTY
67656: LIST
67657: LIST
67658: PUSH
67659: LD_INT 1
67661: PUSH
67662: LD_INT 1
67664: PUSH
67665: EMPTY
67666: LIST
67667: LIST
67668: PUSH
67669: LD_INT 0
67671: PUSH
67672: LD_INT 1
67674: PUSH
67675: EMPTY
67676: LIST
67677: LIST
67678: PUSH
67679: LD_INT 1
67681: NEG
67682: PUSH
67683: LD_INT 0
67685: PUSH
67686: EMPTY
67687: LIST
67688: LIST
67689: PUSH
67690: LD_INT 1
67692: NEG
67693: PUSH
67694: LD_INT 1
67696: NEG
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 1
67704: NEG
67705: PUSH
67706: LD_INT 2
67708: NEG
67709: PUSH
67710: EMPTY
67711: LIST
67712: LIST
67713: PUSH
67714: LD_INT 1
67716: PUSH
67717: LD_INT 2
67719: PUSH
67720: EMPTY
67721: LIST
67722: LIST
67723: PUSH
67724: EMPTY
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
67735: LD_ADDR_VAR 0 40
67739: PUSH
67740: LD_INT 0
67742: PUSH
67743: LD_INT 0
67745: PUSH
67746: EMPTY
67747: LIST
67748: LIST
67749: PUSH
67750: LD_INT 0
67752: PUSH
67753: LD_INT 1
67755: NEG
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 1
67763: PUSH
67764: LD_INT 0
67766: PUSH
67767: EMPTY
67768: LIST
67769: LIST
67770: PUSH
67771: LD_INT 1
67773: PUSH
67774: LD_INT 1
67776: PUSH
67777: EMPTY
67778: LIST
67779: LIST
67780: PUSH
67781: LD_INT 0
67783: PUSH
67784: LD_INT 1
67786: PUSH
67787: EMPTY
67788: LIST
67789: LIST
67790: PUSH
67791: LD_INT 1
67793: NEG
67794: PUSH
67795: LD_INT 0
67797: PUSH
67798: EMPTY
67799: LIST
67800: LIST
67801: PUSH
67802: LD_INT 1
67804: NEG
67805: PUSH
67806: LD_INT 1
67808: NEG
67809: PUSH
67810: EMPTY
67811: LIST
67812: LIST
67813: PUSH
67814: LD_INT 1
67816: PUSH
67817: LD_INT 1
67819: NEG
67820: PUSH
67821: EMPTY
67822: LIST
67823: LIST
67824: PUSH
67825: LD_INT 1
67827: NEG
67828: PUSH
67829: LD_INT 1
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: EMPTY
67837: LIST
67838: LIST
67839: LIST
67840: LIST
67841: LIST
67842: LIST
67843: LIST
67844: LIST
67845: LIST
67846: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
67847: LD_ADDR_VAR 0 41
67851: PUSH
67852: LD_INT 0
67854: PUSH
67855: LD_INT 0
67857: PUSH
67858: EMPTY
67859: LIST
67860: LIST
67861: PUSH
67862: LD_INT 0
67864: PUSH
67865: LD_INT 1
67867: NEG
67868: PUSH
67869: EMPTY
67870: LIST
67871: LIST
67872: PUSH
67873: LD_INT 1
67875: PUSH
67876: LD_INT 0
67878: PUSH
67879: EMPTY
67880: LIST
67881: LIST
67882: PUSH
67883: LD_INT 1
67885: PUSH
67886: LD_INT 1
67888: PUSH
67889: EMPTY
67890: LIST
67891: LIST
67892: PUSH
67893: LD_INT 0
67895: PUSH
67896: LD_INT 1
67898: PUSH
67899: EMPTY
67900: LIST
67901: LIST
67902: PUSH
67903: LD_INT 1
67905: NEG
67906: PUSH
67907: LD_INT 0
67909: PUSH
67910: EMPTY
67911: LIST
67912: LIST
67913: PUSH
67914: LD_INT 1
67916: NEG
67917: PUSH
67918: LD_INT 1
67920: NEG
67921: PUSH
67922: EMPTY
67923: LIST
67924: LIST
67925: PUSH
67926: LD_INT 1
67928: NEG
67929: PUSH
67930: LD_INT 2
67932: NEG
67933: PUSH
67934: EMPTY
67935: LIST
67936: LIST
67937: PUSH
67938: LD_INT 1
67940: PUSH
67941: LD_INT 1
67943: NEG
67944: PUSH
67945: EMPTY
67946: LIST
67947: LIST
67948: PUSH
67949: LD_INT 2
67951: PUSH
67952: LD_INT 0
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 2
67961: PUSH
67962: LD_INT 1
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: LD_INT 2
67971: PUSH
67972: LD_INT 2
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 1
67981: PUSH
67982: LD_INT 2
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 1
67991: NEG
67992: PUSH
67993: LD_INT 1
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 2
68002: NEG
68003: PUSH
68004: LD_INT 0
68006: PUSH
68007: EMPTY
68008: LIST
68009: LIST
68010: PUSH
68011: LD_INT 2
68013: NEG
68014: PUSH
68015: LD_INT 1
68017: NEG
68018: PUSH
68019: EMPTY
68020: LIST
68021: LIST
68022: PUSH
68023: LD_INT 2
68025: NEG
68026: PUSH
68027: LD_INT 2
68029: NEG
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 2
68037: NEG
68038: PUSH
68039: LD_INT 3
68041: NEG
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 2
68049: PUSH
68050: LD_INT 1
68052: NEG
68053: PUSH
68054: EMPTY
68055: LIST
68056: LIST
68057: PUSH
68058: LD_INT 3
68060: PUSH
68061: LD_INT 0
68063: PUSH
68064: EMPTY
68065: LIST
68066: LIST
68067: PUSH
68068: LD_INT 3
68070: PUSH
68071: LD_INT 1
68073: PUSH
68074: EMPTY
68075: LIST
68076: LIST
68077: PUSH
68078: LD_INT 3
68080: PUSH
68081: LD_INT 2
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: PUSH
68088: LD_INT 3
68090: PUSH
68091: LD_INT 3
68093: PUSH
68094: EMPTY
68095: LIST
68096: LIST
68097: PUSH
68098: LD_INT 2
68100: PUSH
68101: LD_INT 3
68103: PUSH
68104: EMPTY
68105: LIST
68106: LIST
68107: PUSH
68108: LD_INT 2
68110: NEG
68111: PUSH
68112: LD_INT 1
68114: PUSH
68115: EMPTY
68116: LIST
68117: LIST
68118: PUSH
68119: LD_INT 3
68121: NEG
68122: PUSH
68123: LD_INT 0
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 3
68132: NEG
68133: PUSH
68134: LD_INT 1
68136: NEG
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: LD_INT 3
68144: NEG
68145: PUSH
68146: LD_INT 2
68148: NEG
68149: PUSH
68150: EMPTY
68151: LIST
68152: LIST
68153: PUSH
68154: LD_INT 3
68156: NEG
68157: PUSH
68158: LD_INT 3
68160: NEG
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: EMPTY
68167: LIST
68168: LIST
68169: LIST
68170: LIST
68171: LIST
68172: LIST
68173: LIST
68174: LIST
68175: LIST
68176: LIST
68177: LIST
68178: LIST
68179: LIST
68180: LIST
68181: LIST
68182: LIST
68183: LIST
68184: LIST
68185: LIST
68186: LIST
68187: LIST
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: LIST
68193: LIST
68194: LIST
68195: LIST
68196: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68197: LD_ADDR_VAR 0 42
68201: PUSH
68202: LD_INT 0
68204: PUSH
68205: LD_INT 0
68207: PUSH
68208: EMPTY
68209: LIST
68210: LIST
68211: PUSH
68212: LD_INT 0
68214: PUSH
68215: LD_INT 1
68217: NEG
68218: PUSH
68219: EMPTY
68220: LIST
68221: LIST
68222: PUSH
68223: LD_INT 1
68225: PUSH
68226: LD_INT 0
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 1
68235: PUSH
68236: LD_INT 1
68238: PUSH
68239: EMPTY
68240: LIST
68241: LIST
68242: PUSH
68243: LD_INT 0
68245: PUSH
68246: LD_INT 1
68248: PUSH
68249: EMPTY
68250: LIST
68251: LIST
68252: PUSH
68253: LD_INT 1
68255: NEG
68256: PUSH
68257: LD_INT 0
68259: PUSH
68260: EMPTY
68261: LIST
68262: LIST
68263: PUSH
68264: LD_INT 1
68266: NEG
68267: PUSH
68268: LD_INT 1
68270: NEG
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 1
68278: NEG
68279: PUSH
68280: LD_INT 2
68282: NEG
68283: PUSH
68284: EMPTY
68285: LIST
68286: LIST
68287: PUSH
68288: LD_INT 0
68290: PUSH
68291: LD_INT 2
68293: NEG
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 1
68301: PUSH
68302: LD_INT 1
68304: NEG
68305: PUSH
68306: EMPTY
68307: LIST
68308: LIST
68309: PUSH
68310: LD_INT 2
68312: PUSH
68313: LD_INT 1
68315: PUSH
68316: EMPTY
68317: LIST
68318: LIST
68319: PUSH
68320: LD_INT 2
68322: PUSH
68323: LD_INT 2
68325: PUSH
68326: EMPTY
68327: LIST
68328: LIST
68329: PUSH
68330: LD_INT 1
68332: PUSH
68333: LD_INT 2
68335: PUSH
68336: EMPTY
68337: LIST
68338: LIST
68339: PUSH
68340: LD_INT 0
68342: PUSH
68343: LD_INT 2
68345: PUSH
68346: EMPTY
68347: LIST
68348: LIST
68349: PUSH
68350: LD_INT 1
68352: NEG
68353: PUSH
68354: LD_INT 1
68356: PUSH
68357: EMPTY
68358: LIST
68359: LIST
68360: PUSH
68361: LD_INT 2
68363: NEG
68364: PUSH
68365: LD_INT 1
68367: NEG
68368: PUSH
68369: EMPTY
68370: LIST
68371: LIST
68372: PUSH
68373: LD_INT 2
68375: NEG
68376: PUSH
68377: LD_INT 2
68379: NEG
68380: PUSH
68381: EMPTY
68382: LIST
68383: LIST
68384: PUSH
68385: LD_INT 2
68387: NEG
68388: PUSH
68389: LD_INT 3
68391: NEG
68392: PUSH
68393: EMPTY
68394: LIST
68395: LIST
68396: PUSH
68397: LD_INT 1
68399: NEG
68400: PUSH
68401: LD_INT 3
68403: NEG
68404: PUSH
68405: EMPTY
68406: LIST
68407: LIST
68408: PUSH
68409: LD_INT 0
68411: PUSH
68412: LD_INT 3
68414: NEG
68415: PUSH
68416: EMPTY
68417: LIST
68418: LIST
68419: PUSH
68420: LD_INT 1
68422: PUSH
68423: LD_INT 2
68425: NEG
68426: PUSH
68427: EMPTY
68428: LIST
68429: LIST
68430: PUSH
68431: LD_INT 3
68433: PUSH
68434: LD_INT 2
68436: PUSH
68437: EMPTY
68438: LIST
68439: LIST
68440: PUSH
68441: LD_INT 3
68443: PUSH
68444: LD_INT 3
68446: PUSH
68447: EMPTY
68448: LIST
68449: LIST
68450: PUSH
68451: LD_INT 2
68453: PUSH
68454: LD_INT 3
68456: PUSH
68457: EMPTY
68458: LIST
68459: LIST
68460: PUSH
68461: LD_INT 1
68463: PUSH
68464: LD_INT 3
68466: PUSH
68467: EMPTY
68468: LIST
68469: LIST
68470: PUSH
68471: LD_INT 0
68473: PUSH
68474: LD_INT 3
68476: PUSH
68477: EMPTY
68478: LIST
68479: LIST
68480: PUSH
68481: LD_INT 1
68483: NEG
68484: PUSH
68485: LD_INT 2
68487: PUSH
68488: EMPTY
68489: LIST
68490: LIST
68491: PUSH
68492: LD_INT 3
68494: NEG
68495: PUSH
68496: LD_INT 2
68498: NEG
68499: PUSH
68500: EMPTY
68501: LIST
68502: LIST
68503: PUSH
68504: LD_INT 3
68506: NEG
68507: PUSH
68508: LD_INT 3
68510: NEG
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: LIST
68520: LIST
68521: LIST
68522: LIST
68523: LIST
68524: LIST
68525: LIST
68526: LIST
68527: LIST
68528: LIST
68529: LIST
68530: LIST
68531: LIST
68532: LIST
68533: LIST
68534: LIST
68535: LIST
68536: LIST
68537: LIST
68538: LIST
68539: LIST
68540: LIST
68541: LIST
68542: LIST
68543: LIST
68544: LIST
68545: LIST
68546: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
68547: LD_ADDR_VAR 0 43
68551: PUSH
68552: LD_INT 0
68554: PUSH
68555: LD_INT 0
68557: PUSH
68558: EMPTY
68559: LIST
68560: LIST
68561: PUSH
68562: LD_INT 0
68564: PUSH
68565: LD_INT 1
68567: NEG
68568: PUSH
68569: EMPTY
68570: LIST
68571: LIST
68572: PUSH
68573: LD_INT 1
68575: PUSH
68576: LD_INT 0
68578: PUSH
68579: EMPTY
68580: LIST
68581: LIST
68582: PUSH
68583: LD_INT 1
68585: PUSH
68586: LD_INT 1
68588: PUSH
68589: EMPTY
68590: LIST
68591: LIST
68592: PUSH
68593: LD_INT 0
68595: PUSH
68596: LD_INT 1
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PUSH
68603: LD_INT 1
68605: NEG
68606: PUSH
68607: LD_INT 0
68609: PUSH
68610: EMPTY
68611: LIST
68612: LIST
68613: PUSH
68614: LD_INT 1
68616: NEG
68617: PUSH
68618: LD_INT 1
68620: NEG
68621: PUSH
68622: EMPTY
68623: LIST
68624: LIST
68625: PUSH
68626: LD_INT 1
68628: NEG
68629: PUSH
68630: LD_INT 2
68632: NEG
68633: PUSH
68634: EMPTY
68635: LIST
68636: LIST
68637: PUSH
68638: LD_INT 0
68640: PUSH
68641: LD_INT 2
68643: NEG
68644: PUSH
68645: EMPTY
68646: LIST
68647: LIST
68648: PUSH
68649: LD_INT 1
68651: PUSH
68652: LD_INT 1
68654: NEG
68655: PUSH
68656: EMPTY
68657: LIST
68658: LIST
68659: PUSH
68660: LD_INT 2
68662: PUSH
68663: LD_INT 0
68665: PUSH
68666: EMPTY
68667: LIST
68668: LIST
68669: PUSH
68670: LD_INT 2
68672: PUSH
68673: LD_INT 1
68675: PUSH
68676: EMPTY
68677: LIST
68678: LIST
68679: PUSH
68680: LD_INT 1
68682: PUSH
68683: LD_INT 2
68685: PUSH
68686: EMPTY
68687: LIST
68688: LIST
68689: PUSH
68690: LD_INT 0
68692: PUSH
68693: LD_INT 2
68695: PUSH
68696: EMPTY
68697: LIST
68698: LIST
68699: PUSH
68700: LD_INT 1
68702: NEG
68703: PUSH
68704: LD_INT 1
68706: PUSH
68707: EMPTY
68708: LIST
68709: LIST
68710: PUSH
68711: LD_INT 2
68713: NEG
68714: PUSH
68715: LD_INT 0
68717: PUSH
68718: EMPTY
68719: LIST
68720: LIST
68721: PUSH
68722: LD_INT 2
68724: NEG
68725: PUSH
68726: LD_INT 1
68728: NEG
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 1
68736: NEG
68737: PUSH
68738: LD_INT 3
68740: NEG
68741: PUSH
68742: EMPTY
68743: LIST
68744: LIST
68745: PUSH
68746: LD_INT 0
68748: PUSH
68749: LD_INT 3
68751: NEG
68752: PUSH
68753: EMPTY
68754: LIST
68755: LIST
68756: PUSH
68757: LD_INT 1
68759: PUSH
68760: LD_INT 2
68762: NEG
68763: PUSH
68764: EMPTY
68765: LIST
68766: LIST
68767: PUSH
68768: LD_INT 2
68770: PUSH
68771: LD_INT 1
68773: NEG
68774: PUSH
68775: EMPTY
68776: LIST
68777: LIST
68778: PUSH
68779: LD_INT 3
68781: PUSH
68782: LD_INT 0
68784: PUSH
68785: EMPTY
68786: LIST
68787: LIST
68788: PUSH
68789: LD_INT 3
68791: PUSH
68792: LD_INT 1
68794: PUSH
68795: EMPTY
68796: LIST
68797: LIST
68798: PUSH
68799: LD_INT 1
68801: PUSH
68802: LD_INT 3
68804: PUSH
68805: EMPTY
68806: LIST
68807: LIST
68808: PUSH
68809: LD_INT 0
68811: PUSH
68812: LD_INT 3
68814: PUSH
68815: EMPTY
68816: LIST
68817: LIST
68818: PUSH
68819: LD_INT 1
68821: NEG
68822: PUSH
68823: LD_INT 2
68825: PUSH
68826: EMPTY
68827: LIST
68828: LIST
68829: PUSH
68830: LD_INT 2
68832: NEG
68833: PUSH
68834: LD_INT 1
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PUSH
68841: LD_INT 3
68843: NEG
68844: PUSH
68845: LD_INT 0
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 3
68854: NEG
68855: PUSH
68856: LD_INT 1
68858: NEG
68859: PUSH
68860: EMPTY
68861: LIST
68862: LIST
68863: PUSH
68864: EMPTY
68865: LIST
68866: LIST
68867: LIST
68868: LIST
68869: LIST
68870: LIST
68871: LIST
68872: LIST
68873: LIST
68874: LIST
68875: LIST
68876: LIST
68877: LIST
68878: LIST
68879: LIST
68880: LIST
68881: LIST
68882: LIST
68883: LIST
68884: LIST
68885: LIST
68886: LIST
68887: LIST
68888: LIST
68889: LIST
68890: LIST
68891: LIST
68892: LIST
68893: LIST
68894: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
68895: LD_ADDR_VAR 0 44
68899: PUSH
68900: LD_INT 0
68902: PUSH
68903: LD_INT 0
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 0
68912: PUSH
68913: LD_INT 1
68915: NEG
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 1
68923: PUSH
68924: LD_INT 0
68926: PUSH
68927: EMPTY
68928: LIST
68929: LIST
68930: PUSH
68931: LD_INT 1
68933: PUSH
68934: LD_INT 1
68936: PUSH
68937: EMPTY
68938: LIST
68939: LIST
68940: PUSH
68941: LD_INT 0
68943: PUSH
68944: LD_INT 1
68946: PUSH
68947: EMPTY
68948: LIST
68949: LIST
68950: PUSH
68951: LD_INT 1
68953: NEG
68954: PUSH
68955: LD_INT 0
68957: PUSH
68958: EMPTY
68959: LIST
68960: LIST
68961: PUSH
68962: LD_INT 1
68964: NEG
68965: PUSH
68966: LD_INT 1
68968: NEG
68969: PUSH
68970: EMPTY
68971: LIST
68972: LIST
68973: PUSH
68974: LD_INT 1
68976: NEG
68977: PUSH
68978: LD_INT 2
68980: NEG
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 1
68988: PUSH
68989: LD_INT 1
68991: NEG
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 2
68999: PUSH
69000: LD_INT 0
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 2
69009: PUSH
69010: LD_INT 1
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 2
69019: PUSH
69020: LD_INT 2
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 1
69029: PUSH
69030: LD_INT 2
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 1
69039: NEG
69040: PUSH
69041: LD_INT 1
69043: PUSH
69044: EMPTY
69045: LIST
69046: LIST
69047: PUSH
69048: LD_INT 2
69050: NEG
69051: PUSH
69052: LD_INT 0
69054: PUSH
69055: EMPTY
69056: LIST
69057: LIST
69058: PUSH
69059: LD_INT 2
69061: NEG
69062: PUSH
69063: LD_INT 1
69065: NEG
69066: PUSH
69067: EMPTY
69068: LIST
69069: LIST
69070: PUSH
69071: LD_INT 2
69073: NEG
69074: PUSH
69075: LD_INT 2
69077: NEG
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PUSH
69083: LD_INT 2
69085: NEG
69086: PUSH
69087: LD_INT 3
69089: NEG
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 2
69097: PUSH
69098: LD_INT 1
69100: NEG
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 3
69108: PUSH
69109: LD_INT 0
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 3
69118: PUSH
69119: LD_INT 1
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 3
69128: PUSH
69129: LD_INT 2
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 3
69138: PUSH
69139: LD_INT 3
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 2
69148: PUSH
69149: LD_INT 3
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: PUSH
69156: LD_INT 2
69158: NEG
69159: PUSH
69160: LD_INT 1
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: PUSH
69167: LD_INT 3
69169: NEG
69170: PUSH
69171: LD_INT 0
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 3
69180: NEG
69181: PUSH
69182: LD_INT 1
69184: NEG
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 3
69192: NEG
69193: PUSH
69194: LD_INT 2
69196: NEG
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 3
69204: NEG
69205: PUSH
69206: LD_INT 3
69208: NEG
69209: PUSH
69210: EMPTY
69211: LIST
69212: LIST
69213: PUSH
69214: EMPTY
69215: LIST
69216: LIST
69217: LIST
69218: LIST
69219: LIST
69220: LIST
69221: LIST
69222: LIST
69223: LIST
69224: LIST
69225: LIST
69226: LIST
69227: LIST
69228: LIST
69229: LIST
69230: LIST
69231: LIST
69232: LIST
69233: LIST
69234: LIST
69235: LIST
69236: LIST
69237: LIST
69238: LIST
69239: LIST
69240: LIST
69241: LIST
69242: LIST
69243: LIST
69244: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69245: LD_ADDR_VAR 0 45
69249: PUSH
69250: LD_INT 0
69252: PUSH
69253: LD_INT 0
69255: PUSH
69256: EMPTY
69257: LIST
69258: LIST
69259: PUSH
69260: LD_INT 0
69262: PUSH
69263: LD_INT 1
69265: NEG
69266: PUSH
69267: EMPTY
69268: LIST
69269: LIST
69270: PUSH
69271: LD_INT 1
69273: PUSH
69274: LD_INT 0
69276: PUSH
69277: EMPTY
69278: LIST
69279: LIST
69280: PUSH
69281: LD_INT 1
69283: PUSH
69284: LD_INT 1
69286: PUSH
69287: EMPTY
69288: LIST
69289: LIST
69290: PUSH
69291: LD_INT 0
69293: PUSH
69294: LD_INT 1
69296: PUSH
69297: EMPTY
69298: LIST
69299: LIST
69300: PUSH
69301: LD_INT 1
69303: NEG
69304: PUSH
69305: LD_INT 0
69307: PUSH
69308: EMPTY
69309: LIST
69310: LIST
69311: PUSH
69312: LD_INT 1
69314: NEG
69315: PUSH
69316: LD_INT 1
69318: NEG
69319: PUSH
69320: EMPTY
69321: LIST
69322: LIST
69323: PUSH
69324: LD_INT 1
69326: NEG
69327: PUSH
69328: LD_INT 2
69330: NEG
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 0
69338: PUSH
69339: LD_INT 2
69341: NEG
69342: PUSH
69343: EMPTY
69344: LIST
69345: LIST
69346: PUSH
69347: LD_INT 1
69349: PUSH
69350: LD_INT 1
69352: NEG
69353: PUSH
69354: EMPTY
69355: LIST
69356: LIST
69357: PUSH
69358: LD_INT 2
69360: PUSH
69361: LD_INT 1
69363: PUSH
69364: EMPTY
69365: LIST
69366: LIST
69367: PUSH
69368: LD_INT 2
69370: PUSH
69371: LD_INT 2
69373: PUSH
69374: EMPTY
69375: LIST
69376: LIST
69377: PUSH
69378: LD_INT 1
69380: PUSH
69381: LD_INT 2
69383: PUSH
69384: EMPTY
69385: LIST
69386: LIST
69387: PUSH
69388: LD_INT 0
69390: PUSH
69391: LD_INT 2
69393: PUSH
69394: EMPTY
69395: LIST
69396: LIST
69397: PUSH
69398: LD_INT 1
69400: NEG
69401: PUSH
69402: LD_INT 1
69404: PUSH
69405: EMPTY
69406: LIST
69407: LIST
69408: PUSH
69409: LD_INT 2
69411: NEG
69412: PUSH
69413: LD_INT 1
69415: NEG
69416: PUSH
69417: EMPTY
69418: LIST
69419: LIST
69420: PUSH
69421: LD_INT 2
69423: NEG
69424: PUSH
69425: LD_INT 2
69427: NEG
69428: PUSH
69429: EMPTY
69430: LIST
69431: LIST
69432: PUSH
69433: LD_INT 2
69435: NEG
69436: PUSH
69437: LD_INT 3
69439: NEG
69440: PUSH
69441: EMPTY
69442: LIST
69443: LIST
69444: PUSH
69445: LD_INT 1
69447: NEG
69448: PUSH
69449: LD_INT 3
69451: NEG
69452: PUSH
69453: EMPTY
69454: LIST
69455: LIST
69456: PUSH
69457: LD_INT 0
69459: PUSH
69460: LD_INT 3
69462: NEG
69463: PUSH
69464: EMPTY
69465: LIST
69466: LIST
69467: PUSH
69468: LD_INT 1
69470: PUSH
69471: LD_INT 2
69473: NEG
69474: PUSH
69475: EMPTY
69476: LIST
69477: LIST
69478: PUSH
69479: LD_INT 3
69481: PUSH
69482: LD_INT 2
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 3
69491: PUSH
69492: LD_INT 3
69494: PUSH
69495: EMPTY
69496: LIST
69497: LIST
69498: PUSH
69499: LD_INT 2
69501: PUSH
69502: LD_INT 3
69504: PUSH
69505: EMPTY
69506: LIST
69507: LIST
69508: PUSH
69509: LD_INT 1
69511: PUSH
69512: LD_INT 3
69514: PUSH
69515: EMPTY
69516: LIST
69517: LIST
69518: PUSH
69519: LD_INT 0
69521: PUSH
69522: LD_INT 3
69524: PUSH
69525: EMPTY
69526: LIST
69527: LIST
69528: PUSH
69529: LD_INT 1
69531: NEG
69532: PUSH
69533: LD_INT 2
69535: PUSH
69536: EMPTY
69537: LIST
69538: LIST
69539: PUSH
69540: LD_INT 3
69542: NEG
69543: PUSH
69544: LD_INT 2
69546: NEG
69547: PUSH
69548: EMPTY
69549: LIST
69550: LIST
69551: PUSH
69552: LD_INT 3
69554: NEG
69555: PUSH
69556: LD_INT 3
69558: NEG
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: LIST
69568: LIST
69569: LIST
69570: LIST
69571: LIST
69572: LIST
69573: LIST
69574: LIST
69575: LIST
69576: LIST
69577: LIST
69578: LIST
69579: LIST
69580: LIST
69581: LIST
69582: LIST
69583: LIST
69584: LIST
69585: LIST
69586: LIST
69587: LIST
69588: LIST
69589: LIST
69590: LIST
69591: LIST
69592: LIST
69593: LIST
69594: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69595: LD_ADDR_VAR 0 46
69599: PUSH
69600: LD_INT 0
69602: PUSH
69603: LD_INT 0
69605: PUSH
69606: EMPTY
69607: LIST
69608: LIST
69609: PUSH
69610: LD_INT 0
69612: PUSH
69613: LD_INT 1
69615: NEG
69616: PUSH
69617: EMPTY
69618: LIST
69619: LIST
69620: PUSH
69621: LD_INT 1
69623: PUSH
69624: LD_INT 0
69626: PUSH
69627: EMPTY
69628: LIST
69629: LIST
69630: PUSH
69631: LD_INT 1
69633: PUSH
69634: LD_INT 1
69636: PUSH
69637: EMPTY
69638: LIST
69639: LIST
69640: PUSH
69641: LD_INT 0
69643: PUSH
69644: LD_INT 1
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 1
69653: NEG
69654: PUSH
69655: LD_INT 0
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 1
69664: NEG
69665: PUSH
69666: LD_INT 1
69668: NEG
69669: PUSH
69670: EMPTY
69671: LIST
69672: LIST
69673: PUSH
69674: LD_INT 1
69676: NEG
69677: PUSH
69678: LD_INT 2
69680: NEG
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: LD_INT 0
69688: PUSH
69689: LD_INT 2
69691: NEG
69692: PUSH
69693: EMPTY
69694: LIST
69695: LIST
69696: PUSH
69697: LD_INT 1
69699: PUSH
69700: LD_INT 1
69702: NEG
69703: PUSH
69704: EMPTY
69705: LIST
69706: LIST
69707: PUSH
69708: LD_INT 2
69710: PUSH
69711: LD_INT 0
69713: PUSH
69714: EMPTY
69715: LIST
69716: LIST
69717: PUSH
69718: LD_INT 2
69720: PUSH
69721: LD_INT 1
69723: PUSH
69724: EMPTY
69725: LIST
69726: LIST
69727: PUSH
69728: LD_INT 1
69730: PUSH
69731: LD_INT 2
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: LD_INT 0
69740: PUSH
69741: LD_INT 2
69743: PUSH
69744: EMPTY
69745: LIST
69746: LIST
69747: PUSH
69748: LD_INT 1
69750: NEG
69751: PUSH
69752: LD_INT 1
69754: PUSH
69755: EMPTY
69756: LIST
69757: LIST
69758: PUSH
69759: LD_INT 2
69761: NEG
69762: PUSH
69763: LD_INT 0
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 2
69772: NEG
69773: PUSH
69774: LD_INT 1
69776: NEG
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: PUSH
69782: LD_INT 1
69784: NEG
69785: PUSH
69786: LD_INT 3
69788: NEG
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: LD_INT 0
69796: PUSH
69797: LD_INT 3
69799: NEG
69800: PUSH
69801: EMPTY
69802: LIST
69803: LIST
69804: PUSH
69805: LD_INT 1
69807: PUSH
69808: LD_INT 2
69810: NEG
69811: PUSH
69812: EMPTY
69813: LIST
69814: LIST
69815: PUSH
69816: LD_INT 2
69818: PUSH
69819: LD_INT 1
69821: NEG
69822: PUSH
69823: EMPTY
69824: LIST
69825: LIST
69826: PUSH
69827: LD_INT 3
69829: PUSH
69830: LD_INT 0
69832: PUSH
69833: EMPTY
69834: LIST
69835: LIST
69836: PUSH
69837: LD_INT 3
69839: PUSH
69840: LD_INT 1
69842: PUSH
69843: EMPTY
69844: LIST
69845: LIST
69846: PUSH
69847: LD_INT 1
69849: PUSH
69850: LD_INT 3
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PUSH
69857: LD_INT 0
69859: PUSH
69860: LD_INT 3
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PUSH
69867: LD_INT 1
69869: NEG
69870: PUSH
69871: LD_INT 2
69873: PUSH
69874: EMPTY
69875: LIST
69876: LIST
69877: PUSH
69878: LD_INT 2
69880: NEG
69881: PUSH
69882: LD_INT 1
69884: PUSH
69885: EMPTY
69886: LIST
69887: LIST
69888: PUSH
69889: LD_INT 3
69891: NEG
69892: PUSH
69893: LD_INT 0
69895: PUSH
69896: EMPTY
69897: LIST
69898: LIST
69899: PUSH
69900: LD_INT 3
69902: NEG
69903: PUSH
69904: LD_INT 1
69906: NEG
69907: PUSH
69908: EMPTY
69909: LIST
69910: LIST
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: LIST
69916: LIST
69917: LIST
69918: LIST
69919: LIST
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: LIST
69937: LIST
69938: LIST
69939: LIST
69940: LIST
69941: LIST
69942: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
69943: LD_ADDR_VAR 0 47
69947: PUSH
69948: LD_INT 0
69950: PUSH
69951: LD_INT 0
69953: PUSH
69954: EMPTY
69955: LIST
69956: LIST
69957: PUSH
69958: LD_INT 0
69960: PUSH
69961: LD_INT 1
69963: NEG
69964: PUSH
69965: EMPTY
69966: LIST
69967: LIST
69968: PUSH
69969: LD_INT 1
69971: PUSH
69972: LD_INT 0
69974: PUSH
69975: EMPTY
69976: LIST
69977: LIST
69978: PUSH
69979: LD_INT 1
69981: PUSH
69982: LD_INT 1
69984: PUSH
69985: EMPTY
69986: LIST
69987: LIST
69988: PUSH
69989: LD_INT 0
69991: PUSH
69992: LD_INT 1
69994: PUSH
69995: EMPTY
69996: LIST
69997: LIST
69998: PUSH
69999: LD_INT 1
70001: NEG
70002: PUSH
70003: LD_INT 0
70005: PUSH
70006: EMPTY
70007: LIST
70008: LIST
70009: PUSH
70010: LD_INT 1
70012: NEG
70013: PUSH
70014: LD_INT 1
70016: NEG
70017: PUSH
70018: EMPTY
70019: LIST
70020: LIST
70021: PUSH
70022: LD_INT 1
70024: NEG
70025: PUSH
70026: LD_INT 2
70028: NEG
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: LD_INT 0
70036: PUSH
70037: LD_INT 2
70039: NEG
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PUSH
70045: LD_INT 1
70047: PUSH
70048: LD_INT 1
70050: NEG
70051: PUSH
70052: EMPTY
70053: LIST
70054: LIST
70055: PUSH
70056: LD_INT 2
70058: NEG
70059: PUSH
70060: LD_INT 1
70062: NEG
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 2
70070: NEG
70071: PUSH
70072: LD_INT 2
70074: NEG
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: PUSH
70080: EMPTY
70081: LIST
70082: LIST
70083: LIST
70084: LIST
70085: LIST
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
70094: LD_ADDR_VAR 0 48
70098: PUSH
70099: LD_INT 0
70101: PUSH
70102: LD_INT 0
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 0
70111: PUSH
70112: LD_INT 1
70114: NEG
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 1
70122: PUSH
70123: LD_INT 0
70125: PUSH
70126: EMPTY
70127: LIST
70128: LIST
70129: PUSH
70130: LD_INT 1
70132: PUSH
70133: LD_INT 1
70135: PUSH
70136: EMPTY
70137: LIST
70138: LIST
70139: PUSH
70140: LD_INT 0
70142: PUSH
70143: LD_INT 1
70145: PUSH
70146: EMPTY
70147: LIST
70148: LIST
70149: PUSH
70150: LD_INT 1
70152: NEG
70153: PUSH
70154: LD_INT 0
70156: PUSH
70157: EMPTY
70158: LIST
70159: LIST
70160: PUSH
70161: LD_INT 1
70163: NEG
70164: PUSH
70165: LD_INT 1
70167: NEG
70168: PUSH
70169: EMPTY
70170: LIST
70171: LIST
70172: PUSH
70173: LD_INT 1
70175: NEG
70176: PUSH
70177: LD_INT 2
70179: NEG
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: LD_INT 0
70187: PUSH
70188: LD_INT 2
70190: NEG
70191: PUSH
70192: EMPTY
70193: LIST
70194: LIST
70195: PUSH
70196: LD_INT 1
70198: PUSH
70199: LD_INT 1
70201: NEG
70202: PUSH
70203: EMPTY
70204: LIST
70205: LIST
70206: PUSH
70207: LD_INT 2
70209: PUSH
70210: LD_INT 0
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: LD_INT 2
70219: PUSH
70220: LD_INT 1
70222: PUSH
70223: EMPTY
70224: LIST
70225: LIST
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
70241: LD_ADDR_VAR 0 49
70245: PUSH
70246: LD_INT 0
70248: PUSH
70249: LD_INT 0
70251: PUSH
70252: EMPTY
70253: LIST
70254: LIST
70255: PUSH
70256: LD_INT 0
70258: PUSH
70259: LD_INT 1
70261: NEG
70262: PUSH
70263: EMPTY
70264: LIST
70265: LIST
70266: PUSH
70267: LD_INT 1
70269: PUSH
70270: LD_INT 0
70272: PUSH
70273: EMPTY
70274: LIST
70275: LIST
70276: PUSH
70277: LD_INT 1
70279: PUSH
70280: LD_INT 1
70282: PUSH
70283: EMPTY
70284: LIST
70285: LIST
70286: PUSH
70287: LD_INT 0
70289: PUSH
70290: LD_INT 1
70292: PUSH
70293: EMPTY
70294: LIST
70295: LIST
70296: PUSH
70297: LD_INT 1
70299: NEG
70300: PUSH
70301: LD_INT 0
70303: PUSH
70304: EMPTY
70305: LIST
70306: LIST
70307: PUSH
70308: LD_INT 1
70310: NEG
70311: PUSH
70312: LD_INT 1
70314: NEG
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 1
70322: PUSH
70323: LD_INT 1
70325: NEG
70326: PUSH
70327: EMPTY
70328: LIST
70329: LIST
70330: PUSH
70331: LD_INT 2
70333: PUSH
70334: LD_INT 0
70336: PUSH
70337: EMPTY
70338: LIST
70339: LIST
70340: PUSH
70341: LD_INT 2
70343: PUSH
70344: LD_INT 1
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 2
70353: PUSH
70354: LD_INT 2
70356: PUSH
70357: EMPTY
70358: LIST
70359: LIST
70360: PUSH
70361: LD_INT 1
70363: PUSH
70364: LD_INT 2
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: PUSH
70371: EMPTY
70372: LIST
70373: LIST
70374: LIST
70375: LIST
70376: LIST
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
70385: LD_ADDR_VAR 0 50
70389: PUSH
70390: LD_INT 0
70392: PUSH
70393: LD_INT 0
70395: PUSH
70396: EMPTY
70397: LIST
70398: LIST
70399: PUSH
70400: LD_INT 0
70402: PUSH
70403: LD_INT 1
70405: NEG
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 1
70413: PUSH
70414: LD_INT 0
70416: PUSH
70417: EMPTY
70418: LIST
70419: LIST
70420: PUSH
70421: LD_INT 1
70423: PUSH
70424: LD_INT 1
70426: PUSH
70427: EMPTY
70428: LIST
70429: LIST
70430: PUSH
70431: LD_INT 0
70433: PUSH
70434: LD_INT 1
70436: PUSH
70437: EMPTY
70438: LIST
70439: LIST
70440: PUSH
70441: LD_INT 1
70443: NEG
70444: PUSH
70445: LD_INT 0
70447: PUSH
70448: EMPTY
70449: LIST
70450: LIST
70451: PUSH
70452: LD_INT 1
70454: NEG
70455: PUSH
70456: LD_INT 1
70458: NEG
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: PUSH
70464: LD_INT 2
70466: PUSH
70467: LD_INT 1
70469: PUSH
70470: EMPTY
70471: LIST
70472: LIST
70473: PUSH
70474: LD_INT 2
70476: PUSH
70477: LD_INT 2
70479: PUSH
70480: EMPTY
70481: LIST
70482: LIST
70483: PUSH
70484: LD_INT 1
70486: PUSH
70487: LD_INT 2
70489: PUSH
70490: EMPTY
70491: LIST
70492: LIST
70493: PUSH
70494: LD_INT 0
70496: PUSH
70497: LD_INT 2
70499: PUSH
70500: EMPTY
70501: LIST
70502: LIST
70503: PUSH
70504: LD_INT 1
70506: NEG
70507: PUSH
70508: LD_INT 1
70510: PUSH
70511: EMPTY
70512: LIST
70513: LIST
70514: PUSH
70515: EMPTY
70516: LIST
70517: LIST
70518: LIST
70519: LIST
70520: LIST
70521: LIST
70522: LIST
70523: LIST
70524: LIST
70525: LIST
70526: LIST
70527: LIST
70528: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
70529: LD_ADDR_VAR 0 51
70533: PUSH
70534: LD_INT 0
70536: PUSH
70537: LD_INT 0
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 0
70546: PUSH
70547: LD_INT 1
70549: NEG
70550: PUSH
70551: EMPTY
70552: LIST
70553: LIST
70554: PUSH
70555: LD_INT 1
70557: PUSH
70558: LD_INT 0
70560: PUSH
70561: EMPTY
70562: LIST
70563: LIST
70564: PUSH
70565: LD_INT 1
70567: PUSH
70568: LD_INT 1
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 0
70577: PUSH
70578: LD_INT 1
70580: PUSH
70581: EMPTY
70582: LIST
70583: LIST
70584: PUSH
70585: LD_INT 1
70587: NEG
70588: PUSH
70589: LD_INT 0
70591: PUSH
70592: EMPTY
70593: LIST
70594: LIST
70595: PUSH
70596: LD_INT 1
70598: NEG
70599: PUSH
70600: LD_INT 1
70602: NEG
70603: PUSH
70604: EMPTY
70605: LIST
70606: LIST
70607: PUSH
70608: LD_INT 1
70610: PUSH
70611: LD_INT 2
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PUSH
70618: LD_INT 0
70620: PUSH
70621: LD_INT 2
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: PUSH
70628: LD_INT 1
70630: NEG
70631: PUSH
70632: LD_INT 1
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PUSH
70639: LD_INT 2
70641: NEG
70642: PUSH
70643: LD_INT 0
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: PUSH
70650: LD_INT 2
70652: NEG
70653: PUSH
70654: LD_INT 1
70656: NEG
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: LIST
70666: LIST
70667: LIST
70668: LIST
70669: LIST
70670: LIST
70671: LIST
70672: LIST
70673: LIST
70674: LIST
70675: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70676: LD_ADDR_VAR 0 52
70680: PUSH
70681: LD_INT 0
70683: PUSH
70684: LD_INT 0
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 0
70693: PUSH
70694: LD_INT 1
70696: NEG
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: PUSH
70702: LD_INT 1
70704: PUSH
70705: LD_INT 0
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 1
70714: PUSH
70715: LD_INT 1
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: PUSH
70722: LD_INT 0
70724: PUSH
70725: LD_INT 1
70727: PUSH
70728: EMPTY
70729: LIST
70730: LIST
70731: PUSH
70732: LD_INT 1
70734: NEG
70735: PUSH
70736: LD_INT 0
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PUSH
70743: LD_INT 1
70745: NEG
70746: PUSH
70747: LD_INT 1
70749: NEG
70750: PUSH
70751: EMPTY
70752: LIST
70753: LIST
70754: PUSH
70755: LD_INT 1
70757: NEG
70758: PUSH
70759: LD_INT 2
70761: NEG
70762: PUSH
70763: EMPTY
70764: LIST
70765: LIST
70766: PUSH
70767: LD_INT 1
70769: NEG
70770: PUSH
70771: LD_INT 1
70773: PUSH
70774: EMPTY
70775: LIST
70776: LIST
70777: PUSH
70778: LD_INT 2
70780: NEG
70781: PUSH
70782: LD_INT 0
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 2
70791: NEG
70792: PUSH
70793: LD_INT 1
70795: NEG
70796: PUSH
70797: EMPTY
70798: LIST
70799: LIST
70800: PUSH
70801: LD_INT 2
70803: NEG
70804: PUSH
70805: LD_INT 2
70807: NEG
70808: PUSH
70809: EMPTY
70810: LIST
70811: LIST
70812: PUSH
70813: EMPTY
70814: LIST
70815: LIST
70816: LIST
70817: LIST
70818: LIST
70819: LIST
70820: LIST
70821: LIST
70822: LIST
70823: LIST
70824: LIST
70825: LIST
70826: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70827: LD_ADDR_VAR 0 53
70831: PUSH
70832: LD_INT 0
70834: PUSH
70835: LD_INT 0
70837: PUSH
70838: EMPTY
70839: LIST
70840: LIST
70841: PUSH
70842: LD_INT 0
70844: PUSH
70845: LD_INT 1
70847: NEG
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PUSH
70853: LD_INT 1
70855: PUSH
70856: LD_INT 0
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: PUSH
70863: LD_INT 1
70865: PUSH
70866: LD_INT 1
70868: PUSH
70869: EMPTY
70870: LIST
70871: LIST
70872: PUSH
70873: LD_INT 0
70875: PUSH
70876: LD_INT 1
70878: PUSH
70879: EMPTY
70880: LIST
70881: LIST
70882: PUSH
70883: LD_INT 1
70885: NEG
70886: PUSH
70887: LD_INT 0
70889: PUSH
70890: EMPTY
70891: LIST
70892: LIST
70893: PUSH
70894: LD_INT 1
70896: NEG
70897: PUSH
70898: LD_INT 1
70900: NEG
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 1
70908: NEG
70909: PUSH
70910: LD_INT 2
70912: NEG
70913: PUSH
70914: EMPTY
70915: LIST
70916: LIST
70917: PUSH
70918: LD_INT 0
70920: PUSH
70921: LD_INT 2
70923: NEG
70924: PUSH
70925: EMPTY
70926: LIST
70927: LIST
70928: PUSH
70929: LD_INT 1
70931: PUSH
70932: LD_INT 1
70934: NEG
70935: PUSH
70936: EMPTY
70937: LIST
70938: LIST
70939: PUSH
70940: LD_INT 2
70942: PUSH
70943: LD_INT 0
70945: PUSH
70946: EMPTY
70947: LIST
70948: LIST
70949: PUSH
70950: LD_INT 2
70952: PUSH
70953: LD_INT 1
70955: PUSH
70956: EMPTY
70957: LIST
70958: LIST
70959: PUSH
70960: LD_INT 2
70962: PUSH
70963: LD_INT 2
70965: PUSH
70966: EMPTY
70967: LIST
70968: LIST
70969: PUSH
70970: LD_INT 1
70972: PUSH
70973: LD_INT 2
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: PUSH
70980: LD_INT 0
70982: PUSH
70983: LD_INT 2
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: PUSH
70990: LD_INT 1
70992: NEG
70993: PUSH
70994: LD_INT 1
70996: PUSH
70997: EMPTY
70998: LIST
70999: LIST
71000: PUSH
71001: LD_INT 2
71003: NEG
71004: PUSH
71005: LD_INT 0
71007: PUSH
71008: EMPTY
71009: LIST
71010: LIST
71011: PUSH
71012: LD_INT 2
71014: NEG
71015: PUSH
71016: LD_INT 1
71018: NEG
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 2
71026: NEG
71027: PUSH
71028: LD_INT 2
71030: NEG
71031: PUSH
71032: EMPTY
71033: LIST
71034: LIST
71035: PUSH
71036: EMPTY
71037: LIST
71038: LIST
71039: LIST
71040: LIST
71041: LIST
71042: LIST
71043: LIST
71044: LIST
71045: LIST
71046: LIST
71047: LIST
71048: LIST
71049: LIST
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71057: LD_ADDR_VAR 0 54
71061: PUSH
71062: LD_INT 0
71064: PUSH
71065: LD_INT 0
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 0
71074: PUSH
71075: LD_INT 1
71077: NEG
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: LD_INT 1
71085: PUSH
71086: LD_INT 0
71088: PUSH
71089: EMPTY
71090: LIST
71091: LIST
71092: PUSH
71093: LD_INT 1
71095: PUSH
71096: LD_INT 1
71098: PUSH
71099: EMPTY
71100: LIST
71101: LIST
71102: PUSH
71103: LD_INT 0
71105: PUSH
71106: LD_INT 1
71108: PUSH
71109: EMPTY
71110: LIST
71111: LIST
71112: PUSH
71113: LD_INT 1
71115: NEG
71116: PUSH
71117: LD_INT 0
71119: PUSH
71120: EMPTY
71121: LIST
71122: LIST
71123: PUSH
71124: LD_INT 1
71126: NEG
71127: PUSH
71128: LD_INT 1
71130: NEG
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 1
71138: NEG
71139: PUSH
71140: LD_INT 2
71142: NEG
71143: PUSH
71144: EMPTY
71145: LIST
71146: LIST
71147: PUSH
71148: LD_INT 0
71150: PUSH
71151: LD_INT 2
71153: NEG
71154: PUSH
71155: EMPTY
71156: LIST
71157: LIST
71158: PUSH
71159: LD_INT 1
71161: PUSH
71162: LD_INT 1
71164: NEG
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: PUSH
71170: LD_INT 2
71172: PUSH
71173: LD_INT 0
71175: PUSH
71176: EMPTY
71177: LIST
71178: LIST
71179: PUSH
71180: LD_INT 2
71182: PUSH
71183: LD_INT 1
71185: PUSH
71186: EMPTY
71187: LIST
71188: LIST
71189: PUSH
71190: LD_INT 2
71192: PUSH
71193: LD_INT 2
71195: PUSH
71196: EMPTY
71197: LIST
71198: LIST
71199: PUSH
71200: LD_INT 1
71202: PUSH
71203: LD_INT 2
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 0
71212: PUSH
71213: LD_INT 2
71215: PUSH
71216: EMPTY
71217: LIST
71218: LIST
71219: PUSH
71220: LD_INT 1
71222: NEG
71223: PUSH
71224: LD_INT 1
71226: PUSH
71227: EMPTY
71228: LIST
71229: LIST
71230: PUSH
71231: LD_INT 2
71233: NEG
71234: PUSH
71235: LD_INT 0
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: PUSH
71242: LD_INT 2
71244: NEG
71245: PUSH
71246: LD_INT 1
71248: NEG
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 2
71256: NEG
71257: PUSH
71258: LD_INT 2
71260: NEG
71261: PUSH
71262: EMPTY
71263: LIST
71264: LIST
71265: PUSH
71266: EMPTY
71267: LIST
71268: LIST
71269: LIST
71270: LIST
71271: LIST
71272: LIST
71273: LIST
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: LIST
71284: LIST
71285: LIST
71286: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71287: LD_ADDR_VAR 0 55
71291: PUSH
71292: LD_INT 0
71294: PUSH
71295: LD_INT 0
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: PUSH
71302: LD_INT 0
71304: PUSH
71305: LD_INT 1
71307: NEG
71308: PUSH
71309: EMPTY
71310: LIST
71311: LIST
71312: PUSH
71313: LD_INT 1
71315: PUSH
71316: LD_INT 0
71318: PUSH
71319: EMPTY
71320: LIST
71321: LIST
71322: PUSH
71323: LD_INT 1
71325: PUSH
71326: LD_INT 1
71328: PUSH
71329: EMPTY
71330: LIST
71331: LIST
71332: PUSH
71333: LD_INT 0
71335: PUSH
71336: LD_INT 1
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PUSH
71343: LD_INT 1
71345: NEG
71346: PUSH
71347: LD_INT 0
71349: PUSH
71350: EMPTY
71351: LIST
71352: LIST
71353: PUSH
71354: LD_INT 1
71356: NEG
71357: PUSH
71358: LD_INT 1
71360: NEG
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 1
71368: NEG
71369: PUSH
71370: LD_INT 2
71372: NEG
71373: PUSH
71374: EMPTY
71375: LIST
71376: LIST
71377: PUSH
71378: LD_INT 0
71380: PUSH
71381: LD_INT 2
71383: NEG
71384: PUSH
71385: EMPTY
71386: LIST
71387: LIST
71388: PUSH
71389: LD_INT 1
71391: PUSH
71392: LD_INT 1
71394: NEG
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PUSH
71400: LD_INT 2
71402: PUSH
71403: LD_INT 0
71405: PUSH
71406: EMPTY
71407: LIST
71408: LIST
71409: PUSH
71410: LD_INT 2
71412: PUSH
71413: LD_INT 1
71415: PUSH
71416: EMPTY
71417: LIST
71418: LIST
71419: PUSH
71420: LD_INT 2
71422: PUSH
71423: LD_INT 2
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 1
71432: PUSH
71433: LD_INT 2
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PUSH
71440: LD_INT 0
71442: PUSH
71443: LD_INT 2
71445: PUSH
71446: EMPTY
71447: LIST
71448: LIST
71449: PUSH
71450: LD_INT 1
71452: NEG
71453: PUSH
71454: LD_INT 1
71456: PUSH
71457: EMPTY
71458: LIST
71459: LIST
71460: PUSH
71461: LD_INT 2
71463: NEG
71464: PUSH
71465: LD_INT 0
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: PUSH
71472: LD_INT 2
71474: NEG
71475: PUSH
71476: LD_INT 1
71478: NEG
71479: PUSH
71480: EMPTY
71481: LIST
71482: LIST
71483: PUSH
71484: LD_INT 2
71486: NEG
71487: PUSH
71488: LD_INT 2
71490: NEG
71491: PUSH
71492: EMPTY
71493: LIST
71494: LIST
71495: PUSH
71496: EMPTY
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: LIST
71503: LIST
71504: LIST
71505: LIST
71506: LIST
71507: LIST
71508: LIST
71509: LIST
71510: LIST
71511: LIST
71512: LIST
71513: LIST
71514: LIST
71515: LIST
71516: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71517: LD_ADDR_VAR 0 56
71521: PUSH
71522: LD_INT 0
71524: PUSH
71525: LD_INT 0
71527: PUSH
71528: EMPTY
71529: LIST
71530: LIST
71531: PUSH
71532: LD_INT 0
71534: PUSH
71535: LD_INT 1
71537: NEG
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: PUSH
71543: LD_INT 1
71545: PUSH
71546: LD_INT 0
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: LD_INT 1
71555: PUSH
71556: LD_INT 1
71558: PUSH
71559: EMPTY
71560: LIST
71561: LIST
71562: PUSH
71563: LD_INT 0
71565: PUSH
71566: LD_INT 1
71568: PUSH
71569: EMPTY
71570: LIST
71571: LIST
71572: PUSH
71573: LD_INT 1
71575: NEG
71576: PUSH
71577: LD_INT 0
71579: PUSH
71580: EMPTY
71581: LIST
71582: LIST
71583: PUSH
71584: LD_INT 1
71586: NEG
71587: PUSH
71588: LD_INT 1
71590: NEG
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: PUSH
71596: LD_INT 1
71598: NEG
71599: PUSH
71600: LD_INT 2
71602: NEG
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: PUSH
71608: LD_INT 0
71610: PUSH
71611: LD_INT 2
71613: NEG
71614: PUSH
71615: EMPTY
71616: LIST
71617: LIST
71618: PUSH
71619: LD_INT 1
71621: PUSH
71622: LD_INT 1
71624: NEG
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: LD_INT 2
71632: PUSH
71633: LD_INT 0
71635: PUSH
71636: EMPTY
71637: LIST
71638: LIST
71639: PUSH
71640: LD_INT 2
71642: PUSH
71643: LD_INT 1
71645: PUSH
71646: EMPTY
71647: LIST
71648: LIST
71649: PUSH
71650: LD_INT 2
71652: PUSH
71653: LD_INT 2
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: LD_INT 1
71662: PUSH
71663: LD_INT 2
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PUSH
71670: LD_INT 0
71672: PUSH
71673: LD_INT 2
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: PUSH
71680: LD_INT 1
71682: NEG
71683: PUSH
71684: LD_INT 1
71686: PUSH
71687: EMPTY
71688: LIST
71689: LIST
71690: PUSH
71691: LD_INT 2
71693: NEG
71694: PUSH
71695: LD_INT 0
71697: PUSH
71698: EMPTY
71699: LIST
71700: LIST
71701: PUSH
71702: LD_INT 2
71704: NEG
71705: PUSH
71706: LD_INT 1
71708: NEG
71709: PUSH
71710: EMPTY
71711: LIST
71712: LIST
71713: PUSH
71714: LD_INT 2
71716: NEG
71717: PUSH
71718: LD_INT 2
71720: NEG
71721: PUSH
71722: EMPTY
71723: LIST
71724: LIST
71725: PUSH
71726: EMPTY
71727: LIST
71728: LIST
71729: LIST
71730: LIST
71731: LIST
71732: LIST
71733: LIST
71734: LIST
71735: LIST
71736: LIST
71737: LIST
71738: LIST
71739: LIST
71740: LIST
71741: LIST
71742: LIST
71743: LIST
71744: LIST
71745: LIST
71746: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71747: LD_ADDR_VAR 0 57
71751: PUSH
71752: LD_INT 0
71754: PUSH
71755: LD_INT 0
71757: PUSH
71758: EMPTY
71759: LIST
71760: LIST
71761: PUSH
71762: LD_INT 0
71764: PUSH
71765: LD_INT 1
71767: NEG
71768: PUSH
71769: EMPTY
71770: LIST
71771: LIST
71772: PUSH
71773: LD_INT 1
71775: PUSH
71776: LD_INT 0
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: PUSH
71783: LD_INT 1
71785: PUSH
71786: LD_INT 1
71788: PUSH
71789: EMPTY
71790: LIST
71791: LIST
71792: PUSH
71793: LD_INT 0
71795: PUSH
71796: LD_INT 1
71798: PUSH
71799: EMPTY
71800: LIST
71801: LIST
71802: PUSH
71803: LD_INT 1
71805: NEG
71806: PUSH
71807: LD_INT 0
71809: PUSH
71810: EMPTY
71811: LIST
71812: LIST
71813: PUSH
71814: LD_INT 1
71816: NEG
71817: PUSH
71818: LD_INT 1
71820: NEG
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: PUSH
71826: LD_INT 1
71828: NEG
71829: PUSH
71830: LD_INT 2
71832: NEG
71833: PUSH
71834: EMPTY
71835: LIST
71836: LIST
71837: PUSH
71838: LD_INT 0
71840: PUSH
71841: LD_INT 2
71843: NEG
71844: PUSH
71845: EMPTY
71846: LIST
71847: LIST
71848: PUSH
71849: LD_INT 1
71851: PUSH
71852: LD_INT 1
71854: NEG
71855: PUSH
71856: EMPTY
71857: LIST
71858: LIST
71859: PUSH
71860: LD_INT 2
71862: PUSH
71863: LD_INT 0
71865: PUSH
71866: EMPTY
71867: LIST
71868: LIST
71869: PUSH
71870: LD_INT 2
71872: PUSH
71873: LD_INT 1
71875: PUSH
71876: EMPTY
71877: LIST
71878: LIST
71879: PUSH
71880: LD_INT 2
71882: PUSH
71883: LD_INT 2
71885: PUSH
71886: EMPTY
71887: LIST
71888: LIST
71889: PUSH
71890: LD_INT 1
71892: PUSH
71893: LD_INT 2
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: PUSH
71900: LD_INT 0
71902: PUSH
71903: LD_INT 2
71905: PUSH
71906: EMPTY
71907: LIST
71908: LIST
71909: PUSH
71910: LD_INT 1
71912: NEG
71913: PUSH
71914: LD_INT 1
71916: PUSH
71917: EMPTY
71918: LIST
71919: LIST
71920: PUSH
71921: LD_INT 2
71923: NEG
71924: PUSH
71925: LD_INT 0
71927: PUSH
71928: EMPTY
71929: LIST
71930: LIST
71931: PUSH
71932: LD_INT 2
71934: NEG
71935: PUSH
71936: LD_INT 1
71938: NEG
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: LD_INT 2
71946: NEG
71947: PUSH
71948: LD_INT 2
71950: NEG
71951: PUSH
71952: EMPTY
71953: LIST
71954: LIST
71955: PUSH
71956: EMPTY
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: LIST
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71977: LD_ADDR_VAR 0 58
71981: PUSH
71982: LD_INT 0
71984: PUSH
71985: LD_INT 0
71987: PUSH
71988: EMPTY
71989: LIST
71990: LIST
71991: PUSH
71992: LD_INT 0
71994: PUSH
71995: LD_INT 1
71997: NEG
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: PUSH
72003: LD_INT 1
72005: PUSH
72006: LD_INT 0
72008: PUSH
72009: EMPTY
72010: LIST
72011: LIST
72012: PUSH
72013: LD_INT 1
72015: PUSH
72016: LD_INT 1
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: PUSH
72023: LD_INT 0
72025: PUSH
72026: LD_INT 1
72028: PUSH
72029: EMPTY
72030: LIST
72031: LIST
72032: PUSH
72033: LD_INT 1
72035: NEG
72036: PUSH
72037: LD_INT 0
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: PUSH
72044: LD_INT 1
72046: NEG
72047: PUSH
72048: LD_INT 1
72050: NEG
72051: PUSH
72052: EMPTY
72053: LIST
72054: LIST
72055: PUSH
72056: LD_INT 1
72058: NEG
72059: PUSH
72060: LD_INT 2
72062: NEG
72063: PUSH
72064: EMPTY
72065: LIST
72066: LIST
72067: PUSH
72068: LD_INT 0
72070: PUSH
72071: LD_INT 2
72073: NEG
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: PUSH
72079: LD_INT 1
72081: PUSH
72082: LD_INT 1
72084: NEG
72085: PUSH
72086: EMPTY
72087: LIST
72088: LIST
72089: PUSH
72090: LD_INT 2
72092: PUSH
72093: LD_INT 0
72095: PUSH
72096: EMPTY
72097: LIST
72098: LIST
72099: PUSH
72100: LD_INT 2
72102: PUSH
72103: LD_INT 1
72105: PUSH
72106: EMPTY
72107: LIST
72108: LIST
72109: PUSH
72110: LD_INT 2
72112: PUSH
72113: LD_INT 2
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: PUSH
72120: LD_INT 1
72122: PUSH
72123: LD_INT 2
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: PUSH
72130: LD_INT 0
72132: PUSH
72133: LD_INT 2
72135: PUSH
72136: EMPTY
72137: LIST
72138: LIST
72139: PUSH
72140: LD_INT 1
72142: NEG
72143: PUSH
72144: LD_INT 1
72146: PUSH
72147: EMPTY
72148: LIST
72149: LIST
72150: PUSH
72151: LD_INT 2
72153: NEG
72154: PUSH
72155: LD_INT 0
72157: PUSH
72158: EMPTY
72159: LIST
72160: LIST
72161: PUSH
72162: LD_INT 2
72164: NEG
72165: PUSH
72166: LD_INT 1
72168: NEG
72169: PUSH
72170: EMPTY
72171: LIST
72172: LIST
72173: PUSH
72174: LD_INT 2
72176: NEG
72177: PUSH
72178: LD_INT 2
72180: NEG
72181: PUSH
72182: EMPTY
72183: LIST
72184: LIST
72185: PUSH
72186: EMPTY
72187: LIST
72188: LIST
72189: LIST
72190: LIST
72191: LIST
72192: LIST
72193: LIST
72194: LIST
72195: LIST
72196: LIST
72197: LIST
72198: LIST
72199: LIST
72200: LIST
72201: LIST
72202: LIST
72203: LIST
72204: LIST
72205: LIST
72206: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72207: LD_ADDR_VAR 0 59
72211: PUSH
72212: LD_INT 0
72214: PUSH
72215: LD_INT 0
72217: PUSH
72218: EMPTY
72219: LIST
72220: LIST
72221: PUSH
72222: LD_INT 0
72224: PUSH
72225: LD_INT 1
72227: NEG
72228: PUSH
72229: EMPTY
72230: LIST
72231: LIST
72232: PUSH
72233: LD_INT 1
72235: PUSH
72236: LD_INT 0
72238: PUSH
72239: EMPTY
72240: LIST
72241: LIST
72242: PUSH
72243: LD_INT 1
72245: PUSH
72246: LD_INT 1
72248: PUSH
72249: EMPTY
72250: LIST
72251: LIST
72252: PUSH
72253: LD_INT 0
72255: PUSH
72256: LD_INT 1
72258: PUSH
72259: EMPTY
72260: LIST
72261: LIST
72262: PUSH
72263: LD_INT 1
72265: NEG
72266: PUSH
72267: LD_INT 0
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: PUSH
72274: LD_INT 1
72276: NEG
72277: PUSH
72278: LD_INT 1
72280: NEG
72281: PUSH
72282: EMPTY
72283: LIST
72284: LIST
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: LIST
72290: LIST
72291: LIST
72292: LIST
72293: LIST
72294: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72295: LD_ADDR_VAR 0 60
72299: PUSH
72300: LD_INT 0
72302: PUSH
72303: LD_INT 0
72305: PUSH
72306: EMPTY
72307: LIST
72308: LIST
72309: PUSH
72310: LD_INT 0
72312: PUSH
72313: LD_INT 1
72315: NEG
72316: PUSH
72317: EMPTY
72318: LIST
72319: LIST
72320: PUSH
72321: LD_INT 1
72323: PUSH
72324: LD_INT 0
72326: PUSH
72327: EMPTY
72328: LIST
72329: LIST
72330: PUSH
72331: LD_INT 1
72333: PUSH
72334: LD_INT 1
72336: PUSH
72337: EMPTY
72338: LIST
72339: LIST
72340: PUSH
72341: LD_INT 0
72343: PUSH
72344: LD_INT 1
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: PUSH
72351: LD_INT 1
72353: NEG
72354: PUSH
72355: LD_INT 0
72357: PUSH
72358: EMPTY
72359: LIST
72360: LIST
72361: PUSH
72362: LD_INT 1
72364: NEG
72365: PUSH
72366: LD_INT 1
72368: NEG
72369: PUSH
72370: EMPTY
72371: LIST
72372: LIST
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: LIST
72378: LIST
72379: LIST
72380: LIST
72381: LIST
72382: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72383: LD_ADDR_VAR 0 61
72387: PUSH
72388: LD_INT 0
72390: PUSH
72391: LD_INT 0
72393: PUSH
72394: EMPTY
72395: LIST
72396: LIST
72397: PUSH
72398: LD_INT 0
72400: PUSH
72401: LD_INT 1
72403: NEG
72404: PUSH
72405: EMPTY
72406: LIST
72407: LIST
72408: PUSH
72409: LD_INT 1
72411: PUSH
72412: LD_INT 0
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: PUSH
72419: LD_INT 1
72421: PUSH
72422: LD_INT 1
72424: PUSH
72425: EMPTY
72426: LIST
72427: LIST
72428: PUSH
72429: LD_INT 0
72431: PUSH
72432: LD_INT 1
72434: PUSH
72435: EMPTY
72436: LIST
72437: LIST
72438: PUSH
72439: LD_INT 1
72441: NEG
72442: PUSH
72443: LD_INT 0
72445: PUSH
72446: EMPTY
72447: LIST
72448: LIST
72449: PUSH
72450: LD_INT 1
72452: NEG
72453: PUSH
72454: LD_INT 1
72456: NEG
72457: PUSH
72458: EMPTY
72459: LIST
72460: LIST
72461: PUSH
72462: EMPTY
72463: LIST
72464: LIST
72465: LIST
72466: LIST
72467: LIST
72468: LIST
72469: LIST
72470: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72471: LD_ADDR_VAR 0 62
72475: PUSH
72476: LD_INT 0
72478: PUSH
72479: LD_INT 0
72481: PUSH
72482: EMPTY
72483: LIST
72484: LIST
72485: PUSH
72486: LD_INT 0
72488: PUSH
72489: LD_INT 1
72491: NEG
72492: PUSH
72493: EMPTY
72494: LIST
72495: LIST
72496: PUSH
72497: LD_INT 1
72499: PUSH
72500: LD_INT 0
72502: PUSH
72503: EMPTY
72504: LIST
72505: LIST
72506: PUSH
72507: LD_INT 1
72509: PUSH
72510: LD_INT 1
72512: PUSH
72513: EMPTY
72514: LIST
72515: LIST
72516: PUSH
72517: LD_INT 0
72519: PUSH
72520: LD_INT 1
72522: PUSH
72523: EMPTY
72524: LIST
72525: LIST
72526: PUSH
72527: LD_INT 1
72529: NEG
72530: PUSH
72531: LD_INT 0
72533: PUSH
72534: EMPTY
72535: LIST
72536: LIST
72537: PUSH
72538: LD_INT 1
72540: NEG
72541: PUSH
72542: LD_INT 1
72544: NEG
72545: PUSH
72546: EMPTY
72547: LIST
72548: LIST
72549: PUSH
72550: EMPTY
72551: LIST
72552: LIST
72553: LIST
72554: LIST
72555: LIST
72556: LIST
72557: LIST
72558: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72559: LD_ADDR_VAR 0 63
72563: PUSH
72564: LD_INT 0
72566: PUSH
72567: LD_INT 0
72569: PUSH
72570: EMPTY
72571: LIST
72572: LIST
72573: PUSH
72574: LD_INT 0
72576: PUSH
72577: LD_INT 1
72579: NEG
72580: PUSH
72581: EMPTY
72582: LIST
72583: LIST
72584: PUSH
72585: LD_INT 1
72587: PUSH
72588: LD_INT 0
72590: PUSH
72591: EMPTY
72592: LIST
72593: LIST
72594: PUSH
72595: LD_INT 1
72597: PUSH
72598: LD_INT 1
72600: PUSH
72601: EMPTY
72602: LIST
72603: LIST
72604: PUSH
72605: LD_INT 0
72607: PUSH
72608: LD_INT 1
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: PUSH
72615: LD_INT 1
72617: NEG
72618: PUSH
72619: LD_INT 0
72621: PUSH
72622: EMPTY
72623: LIST
72624: LIST
72625: PUSH
72626: LD_INT 1
72628: NEG
72629: PUSH
72630: LD_INT 1
72632: NEG
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: PUSH
72638: EMPTY
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: LIST
72645: LIST
72646: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
72647: LD_ADDR_VAR 0 64
72651: PUSH
72652: LD_INT 0
72654: PUSH
72655: LD_INT 0
72657: PUSH
72658: EMPTY
72659: LIST
72660: LIST
72661: PUSH
72662: LD_INT 0
72664: PUSH
72665: LD_INT 1
72667: NEG
72668: PUSH
72669: EMPTY
72670: LIST
72671: LIST
72672: PUSH
72673: LD_INT 1
72675: PUSH
72676: LD_INT 0
72678: PUSH
72679: EMPTY
72680: LIST
72681: LIST
72682: PUSH
72683: LD_INT 1
72685: PUSH
72686: LD_INT 1
72688: PUSH
72689: EMPTY
72690: LIST
72691: LIST
72692: PUSH
72693: LD_INT 0
72695: PUSH
72696: LD_INT 1
72698: PUSH
72699: EMPTY
72700: LIST
72701: LIST
72702: PUSH
72703: LD_INT 1
72705: NEG
72706: PUSH
72707: LD_INT 0
72709: PUSH
72710: EMPTY
72711: LIST
72712: LIST
72713: PUSH
72714: LD_INT 1
72716: NEG
72717: PUSH
72718: LD_INT 1
72720: NEG
72721: PUSH
72722: EMPTY
72723: LIST
72724: LIST
72725: PUSH
72726: EMPTY
72727: LIST
72728: LIST
72729: LIST
72730: LIST
72731: LIST
72732: LIST
72733: LIST
72734: ST_TO_ADDR
// end ; 1 :
72735: GO 78632
72737: LD_INT 1
72739: DOUBLE
72740: EQUAL
72741: IFTRUE 72745
72743: GO 75368
72745: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
72746: LD_ADDR_VAR 0 11
72750: PUSH
72751: LD_INT 1
72753: NEG
72754: PUSH
72755: LD_INT 3
72757: NEG
72758: PUSH
72759: EMPTY
72760: LIST
72761: LIST
72762: PUSH
72763: LD_INT 0
72765: PUSH
72766: LD_INT 3
72768: NEG
72769: PUSH
72770: EMPTY
72771: LIST
72772: LIST
72773: PUSH
72774: LD_INT 1
72776: PUSH
72777: LD_INT 2
72779: NEG
72780: PUSH
72781: EMPTY
72782: LIST
72783: LIST
72784: PUSH
72785: EMPTY
72786: LIST
72787: LIST
72788: LIST
72789: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
72790: LD_ADDR_VAR 0 12
72794: PUSH
72795: LD_INT 2
72797: PUSH
72798: LD_INT 1
72800: NEG
72801: PUSH
72802: EMPTY
72803: LIST
72804: LIST
72805: PUSH
72806: LD_INT 3
72808: PUSH
72809: LD_INT 0
72811: PUSH
72812: EMPTY
72813: LIST
72814: LIST
72815: PUSH
72816: LD_INT 3
72818: PUSH
72819: LD_INT 1
72821: PUSH
72822: EMPTY
72823: LIST
72824: LIST
72825: PUSH
72826: EMPTY
72827: LIST
72828: LIST
72829: LIST
72830: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
72831: LD_ADDR_VAR 0 13
72835: PUSH
72836: LD_INT 3
72838: PUSH
72839: LD_INT 2
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PUSH
72846: LD_INT 3
72848: PUSH
72849: LD_INT 3
72851: PUSH
72852: EMPTY
72853: LIST
72854: LIST
72855: PUSH
72856: LD_INT 2
72858: PUSH
72859: LD_INT 3
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: PUSH
72866: EMPTY
72867: LIST
72868: LIST
72869: LIST
72870: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
72871: LD_ADDR_VAR 0 14
72875: PUSH
72876: LD_INT 1
72878: PUSH
72879: LD_INT 3
72881: PUSH
72882: EMPTY
72883: LIST
72884: LIST
72885: PUSH
72886: LD_INT 0
72888: PUSH
72889: LD_INT 3
72891: PUSH
72892: EMPTY
72893: LIST
72894: LIST
72895: PUSH
72896: LD_INT 1
72898: NEG
72899: PUSH
72900: LD_INT 2
72902: PUSH
72903: EMPTY
72904: LIST
72905: LIST
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: LIST
72911: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72912: LD_ADDR_VAR 0 15
72916: PUSH
72917: LD_INT 2
72919: NEG
72920: PUSH
72921: LD_INT 1
72923: PUSH
72924: EMPTY
72925: LIST
72926: LIST
72927: PUSH
72928: LD_INT 3
72930: NEG
72931: PUSH
72932: LD_INT 0
72934: PUSH
72935: EMPTY
72936: LIST
72937: LIST
72938: PUSH
72939: LD_INT 3
72941: NEG
72942: PUSH
72943: LD_INT 1
72945: NEG
72946: PUSH
72947: EMPTY
72948: LIST
72949: LIST
72950: PUSH
72951: EMPTY
72952: LIST
72953: LIST
72954: LIST
72955: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72956: LD_ADDR_VAR 0 16
72960: PUSH
72961: LD_INT 2
72963: NEG
72964: PUSH
72965: LD_INT 3
72967: NEG
72968: PUSH
72969: EMPTY
72970: LIST
72971: LIST
72972: PUSH
72973: LD_INT 3
72975: NEG
72976: PUSH
72977: LD_INT 2
72979: NEG
72980: PUSH
72981: EMPTY
72982: LIST
72983: LIST
72984: PUSH
72985: LD_INT 3
72987: NEG
72988: PUSH
72989: LD_INT 3
72991: NEG
72992: PUSH
72993: EMPTY
72994: LIST
72995: LIST
72996: PUSH
72997: EMPTY
72998: LIST
72999: LIST
73000: LIST
73001: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
73002: LD_ADDR_VAR 0 17
73006: PUSH
73007: LD_INT 1
73009: NEG
73010: PUSH
73011: LD_INT 3
73013: NEG
73014: PUSH
73015: EMPTY
73016: LIST
73017: LIST
73018: PUSH
73019: LD_INT 0
73021: PUSH
73022: LD_INT 3
73024: NEG
73025: PUSH
73026: EMPTY
73027: LIST
73028: LIST
73029: PUSH
73030: LD_INT 1
73032: PUSH
73033: LD_INT 2
73035: NEG
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: PUSH
73041: EMPTY
73042: LIST
73043: LIST
73044: LIST
73045: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
73046: LD_ADDR_VAR 0 18
73050: PUSH
73051: LD_INT 2
73053: PUSH
73054: LD_INT 1
73056: NEG
73057: PUSH
73058: EMPTY
73059: LIST
73060: LIST
73061: PUSH
73062: LD_INT 3
73064: PUSH
73065: LD_INT 0
73067: PUSH
73068: EMPTY
73069: LIST
73070: LIST
73071: PUSH
73072: LD_INT 3
73074: PUSH
73075: LD_INT 1
73077: PUSH
73078: EMPTY
73079: LIST
73080: LIST
73081: PUSH
73082: EMPTY
73083: LIST
73084: LIST
73085: LIST
73086: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
73087: LD_ADDR_VAR 0 19
73091: PUSH
73092: LD_INT 3
73094: PUSH
73095: LD_INT 2
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: PUSH
73102: LD_INT 3
73104: PUSH
73105: LD_INT 3
73107: PUSH
73108: EMPTY
73109: LIST
73110: LIST
73111: PUSH
73112: LD_INT 2
73114: PUSH
73115: LD_INT 3
73117: PUSH
73118: EMPTY
73119: LIST
73120: LIST
73121: PUSH
73122: EMPTY
73123: LIST
73124: LIST
73125: LIST
73126: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
73127: LD_ADDR_VAR 0 20
73131: PUSH
73132: LD_INT 1
73134: PUSH
73135: LD_INT 3
73137: PUSH
73138: EMPTY
73139: LIST
73140: LIST
73141: PUSH
73142: LD_INT 0
73144: PUSH
73145: LD_INT 3
73147: PUSH
73148: EMPTY
73149: LIST
73150: LIST
73151: PUSH
73152: LD_INT 1
73154: NEG
73155: PUSH
73156: LD_INT 2
73158: PUSH
73159: EMPTY
73160: LIST
73161: LIST
73162: PUSH
73163: EMPTY
73164: LIST
73165: LIST
73166: LIST
73167: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73168: LD_ADDR_VAR 0 21
73172: PUSH
73173: LD_INT 2
73175: NEG
73176: PUSH
73177: LD_INT 1
73179: PUSH
73180: EMPTY
73181: LIST
73182: LIST
73183: PUSH
73184: LD_INT 3
73186: NEG
73187: PUSH
73188: LD_INT 0
73190: PUSH
73191: EMPTY
73192: LIST
73193: LIST
73194: PUSH
73195: LD_INT 3
73197: NEG
73198: PUSH
73199: LD_INT 1
73201: NEG
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: PUSH
73207: EMPTY
73208: LIST
73209: LIST
73210: LIST
73211: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73212: LD_ADDR_VAR 0 22
73216: PUSH
73217: LD_INT 2
73219: NEG
73220: PUSH
73221: LD_INT 3
73223: NEG
73224: PUSH
73225: EMPTY
73226: LIST
73227: LIST
73228: PUSH
73229: LD_INT 3
73231: NEG
73232: PUSH
73233: LD_INT 2
73235: NEG
73236: PUSH
73237: EMPTY
73238: LIST
73239: LIST
73240: PUSH
73241: LD_INT 3
73243: NEG
73244: PUSH
73245: LD_INT 3
73247: NEG
73248: PUSH
73249: EMPTY
73250: LIST
73251: LIST
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: LIST
73257: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
73258: LD_ADDR_VAR 0 23
73262: PUSH
73263: LD_INT 0
73265: PUSH
73266: LD_INT 3
73268: NEG
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: PUSH
73274: LD_INT 1
73276: NEG
73277: PUSH
73278: LD_INT 4
73280: NEG
73281: PUSH
73282: EMPTY
73283: LIST
73284: LIST
73285: PUSH
73286: LD_INT 1
73288: PUSH
73289: LD_INT 3
73291: NEG
73292: PUSH
73293: EMPTY
73294: LIST
73295: LIST
73296: PUSH
73297: EMPTY
73298: LIST
73299: LIST
73300: LIST
73301: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
73302: LD_ADDR_VAR 0 24
73306: PUSH
73307: LD_INT 3
73309: PUSH
73310: LD_INT 0
73312: PUSH
73313: EMPTY
73314: LIST
73315: LIST
73316: PUSH
73317: LD_INT 3
73319: PUSH
73320: LD_INT 1
73322: NEG
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: PUSH
73328: LD_INT 4
73330: PUSH
73331: LD_INT 1
73333: PUSH
73334: EMPTY
73335: LIST
73336: LIST
73337: PUSH
73338: EMPTY
73339: LIST
73340: LIST
73341: LIST
73342: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
73343: LD_ADDR_VAR 0 25
73347: PUSH
73348: LD_INT 3
73350: PUSH
73351: LD_INT 3
73353: PUSH
73354: EMPTY
73355: LIST
73356: LIST
73357: PUSH
73358: LD_INT 4
73360: PUSH
73361: LD_INT 3
73363: PUSH
73364: EMPTY
73365: LIST
73366: LIST
73367: PUSH
73368: LD_INT 3
73370: PUSH
73371: LD_INT 4
73373: PUSH
73374: EMPTY
73375: LIST
73376: LIST
73377: PUSH
73378: EMPTY
73379: LIST
73380: LIST
73381: LIST
73382: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
73383: LD_ADDR_VAR 0 26
73387: PUSH
73388: LD_INT 0
73390: PUSH
73391: LD_INT 3
73393: PUSH
73394: EMPTY
73395: LIST
73396: LIST
73397: PUSH
73398: LD_INT 1
73400: PUSH
73401: LD_INT 4
73403: PUSH
73404: EMPTY
73405: LIST
73406: LIST
73407: PUSH
73408: LD_INT 1
73410: NEG
73411: PUSH
73412: LD_INT 3
73414: PUSH
73415: EMPTY
73416: LIST
73417: LIST
73418: PUSH
73419: EMPTY
73420: LIST
73421: LIST
73422: LIST
73423: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
73424: LD_ADDR_VAR 0 27
73428: PUSH
73429: LD_INT 3
73431: NEG
73432: PUSH
73433: LD_INT 0
73435: PUSH
73436: EMPTY
73437: LIST
73438: LIST
73439: PUSH
73440: LD_INT 3
73442: NEG
73443: PUSH
73444: LD_INT 1
73446: PUSH
73447: EMPTY
73448: LIST
73449: LIST
73450: PUSH
73451: LD_INT 4
73453: NEG
73454: PUSH
73455: LD_INT 1
73457: NEG
73458: PUSH
73459: EMPTY
73460: LIST
73461: LIST
73462: PUSH
73463: EMPTY
73464: LIST
73465: LIST
73466: LIST
73467: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
73468: LD_ADDR_VAR 0 28
73472: PUSH
73473: LD_INT 3
73475: NEG
73476: PUSH
73477: LD_INT 3
73479: NEG
73480: PUSH
73481: EMPTY
73482: LIST
73483: LIST
73484: PUSH
73485: LD_INT 3
73487: NEG
73488: PUSH
73489: LD_INT 4
73491: NEG
73492: PUSH
73493: EMPTY
73494: LIST
73495: LIST
73496: PUSH
73497: LD_INT 4
73499: NEG
73500: PUSH
73501: LD_INT 3
73503: NEG
73504: PUSH
73505: EMPTY
73506: LIST
73507: LIST
73508: PUSH
73509: EMPTY
73510: LIST
73511: LIST
73512: LIST
73513: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
73514: LD_ADDR_VAR 0 29
73518: PUSH
73519: LD_INT 1
73521: NEG
73522: PUSH
73523: LD_INT 3
73525: NEG
73526: PUSH
73527: EMPTY
73528: LIST
73529: LIST
73530: PUSH
73531: LD_INT 0
73533: PUSH
73534: LD_INT 3
73536: NEG
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PUSH
73542: LD_INT 1
73544: PUSH
73545: LD_INT 2
73547: NEG
73548: PUSH
73549: EMPTY
73550: LIST
73551: LIST
73552: PUSH
73553: LD_INT 1
73555: NEG
73556: PUSH
73557: LD_INT 4
73559: NEG
73560: PUSH
73561: EMPTY
73562: LIST
73563: LIST
73564: PUSH
73565: LD_INT 0
73567: PUSH
73568: LD_INT 4
73570: NEG
73571: PUSH
73572: EMPTY
73573: LIST
73574: LIST
73575: PUSH
73576: LD_INT 1
73578: PUSH
73579: LD_INT 3
73581: NEG
73582: PUSH
73583: EMPTY
73584: LIST
73585: LIST
73586: PUSH
73587: LD_INT 1
73589: NEG
73590: PUSH
73591: LD_INT 5
73593: NEG
73594: PUSH
73595: EMPTY
73596: LIST
73597: LIST
73598: PUSH
73599: LD_INT 0
73601: PUSH
73602: LD_INT 5
73604: NEG
73605: PUSH
73606: EMPTY
73607: LIST
73608: LIST
73609: PUSH
73610: LD_INT 1
73612: PUSH
73613: LD_INT 4
73615: NEG
73616: PUSH
73617: EMPTY
73618: LIST
73619: LIST
73620: PUSH
73621: LD_INT 1
73623: NEG
73624: PUSH
73625: LD_INT 6
73627: NEG
73628: PUSH
73629: EMPTY
73630: LIST
73631: LIST
73632: PUSH
73633: LD_INT 0
73635: PUSH
73636: LD_INT 6
73638: NEG
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: PUSH
73644: LD_INT 1
73646: PUSH
73647: LD_INT 5
73649: NEG
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: PUSH
73655: EMPTY
73656: LIST
73657: LIST
73658: LIST
73659: LIST
73660: LIST
73661: LIST
73662: LIST
73663: LIST
73664: LIST
73665: LIST
73666: LIST
73667: LIST
73668: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
73669: LD_ADDR_VAR 0 30
73673: PUSH
73674: LD_INT 2
73676: PUSH
73677: LD_INT 1
73679: NEG
73680: PUSH
73681: EMPTY
73682: LIST
73683: LIST
73684: PUSH
73685: LD_INT 3
73687: PUSH
73688: LD_INT 0
73690: PUSH
73691: EMPTY
73692: LIST
73693: LIST
73694: PUSH
73695: LD_INT 3
73697: PUSH
73698: LD_INT 1
73700: PUSH
73701: EMPTY
73702: LIST
73703: LIST
73704: PUSH
73705: LD_INT 3
73707: PUSH
73708: LD_INT 1
73710: NEG
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: PUSH
73716: LD_INT 4
73718: PUSH
73719: LD_INT 0
73721: PUSH
73722: EMPTY
73723: LIST
73724: LIST
73725: PUSH
73726: LD_INT 4
73728: PUSH
73729: LD_INT 1
73731: PUSH
73732: EMPTY
73733: LIST
73734: LIST
73735: PUSH
73736: LD_INT 4
73738: PUSH
73739: LD_INT 1
73741: NEG
73742: PUSH
73743: EMPTY
73744: LIST
73745: LIST
73746: PUSH
73747: LD_INT 5
73749: PUSH
73750: LD_INT 0
73752: PUSH
73753: EMPTY
73754: LIST
73755: LIST
73756: PUSH
73757: LD_INT 5
73759: PUSH
73760: LD_INT 1
73762: PUSH
73763: EMPTY
73764: LIST
73765: LIST
73766: PUSH
73767: LD_INT 5
73769: PUSH
73770: LD_INT 1
73772: NEG
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: PUSH
73778: LD_INT 6
73780: PUSH
73781: LD_INT 0
73783: PUSH
73784: EMPTY
73785: LIST
73786: LIST
73787: PUSH
73788: LD_INT 6
73790: PUSH
73791: LD_INT 1
73793: PUSH
73794: EMPTY
73795: LIST
73796: LIST
73797: PUSH
73798: EMPTY
73799: LIST
73800: LIST
73801: LIST
73802: LIST
73803: LIST
73804: LIST
73805: LIST
73806: LIST
73807: LIST
73808: LIST
73809: LIST
73810: LIST
73811: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
73812: LD_ADDR_VAR 0 31
73816: PUSH
73817: LD_INT 3
73819: PUSH
73820: LD_INT 2
73822: PUSH
73823: EMPTY
73824: LIST
73825: LIST
73826: PUSH
73827: LD_INT 3
73829: PUSH
73830: LD_INT 3
73832: PUSH
73833: EMPTY
73834: LIST
73835: LIST
73836: PUSH
73837: LD_INT 2
73839: PUSH
73840: LD_INT 3
73842: PUSH
73843: EMPTY
73844: LIST
73845: LIST
73846: PUSH
73847: LD_INT 4
73849: PUSH
73850: LD_INT 3
73852: PUSH
73853: EMPTY
73854: LIST
73855: LIST
73856: PUSH
73857: LD_INT 4
73859: PUSH
73860: LD_INT 4
73862: PUSH
73863: EMPTY
73864: LIST
73865: LIST
73866: PUSH
73867: LD_INT 3
73869: PUSH
73870: LD_INT 4
73872: PUSH
73873: EMPTY
73874: LIST
73875: LIST
73876: PUSH
73877: LD_INT 5
73879: PUSH
73880: LD_INT 4
73882: PUSH
73883: EMPTY
73884: LIST
73885: LIST
73886: PUSH
73887: LD_INT 5
73889: PUSH
73890: LD_INT 5
73892: PUSH
73893: EMPTY
73894: LIST
73895: LIST
73896: PUSH
73897: LD_INT 4
73899: PUSH
73900: LD_INT 5
73902: PUSH
73903: EMPTY
73904: LIST
73905: LIST
73906: PUSH
73907: LD_INT 6
73909: PUSH
73910: LD_INT 5
73912: PUSH
73913: EMPTY
73914: LIST
73915: LIST
73916: PUSH
73917: LD_INT 6
73919: PUSH
73920: LD_INT 6
73922: PUSH
73923: EMPTY
73924: LIST
73925: LIST
73926: PUSH
73927: LD_INT 5
73929: PUSH
73930: LD_INT 6
73932: PUSH
73933: EMPTY
73934: LIST
73935: LIST
73936: PUSH
73937: EMPTY
73938: LIST
73939: LIST
73940: LIST
73941: LIST
73942: LIST
73943: LIST
73944: LIST
73945: LIST
73946: LIST
73947: LIST
73948: LIST
73949: LIST
73950: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
73951: LD_ADDR_VAR 0 32
73955: PUSH
73956: LD_INT 1
73958: PUSH
73959: LD_INT 3
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: PUSH
73966: LD_INT 0
73968: PUSH
73969: LD_INT 3
73971: PUSH
73972: EMPTY
73973: LIST
73974: LIST
73975: PUSH
73976: LD_INT 1
73978: NEG
73979: PUSH
73980: LD_INT 2
73982: PUSH
73983: EMPTY
73984: LIST
73985: LIST
73986: PUSH
73987: LD_INT 1
73989: PUSH
73990: LD_INT 4
73992: PUSH
73993: EMPTY
73994: LIST
73995: LIST
73996: PUSH
73997: LD_INT 0
73999: PUSH
74000: LD_INT 4
74002: PUSH
74003: EMPTY
74004: LIST
74005: LIST
74006: PUSH
74007: LD_INT 1
74009: NEG
74010: PUSH
74011: LD_INT 3
74013: PUSH
74014: EMPTY
74015: LIST
74016: LIST
74017: PUSH
74018: LD_INT 1
74020: PUSH
74021: LD_INT 5
74023: PUSH
74024: EMPTY
74025: LIST
74026: LIST
74027: PUSH
74028: LD_INT 0
74030: PUSH
74031: LD_INT 5
74033: PUSH
74034: EMPTY
74035: LIST
74036: LIST
74037: PUSH
74038: LD_INT 1
74040: NEG
74041: PUSH
74042: LD_INT 4
74044: PUSH
74045: EMPTY
74046: LIST
74047: LIST
74048: PUSH
74049: LD_INT 1
74051: PUSH
74052: LD_INT 6
74054: PUSH
74055: EMPTY
74056: LIST
74057: LIST
74058: PUSH
74059: LD_INT 0
74061: PUSH
74062: LD_INT 6
74064: PUSH
74065: EMPTY
74066: LIST
74067: LIST
74068: PUSH
74069: LD_INT 1
74071: NEG
74072: PUSH
74073: LD_INT 5
74075: PUSH
74076: EMPTY
74077: LIST
74078: LIST
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: LIST
74084: LIST
74085: LIST
74086: LIST
74087: LIST
74088: LIST
74089: LIST
74090: LIST
74091: LIST
74092: LIST
74093: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
74094: LD_ADDR_VAR 0 33
74098: PUSH
74099: LD_INT 2
74101: NEG
74102: PUSH
74103: LD_INT 1
74105: PUSH
74106: EMPTY
74107: LIST
74108: LIST
74109: PUSH
74110: LD_INT 3
74112: NEG
74113: PUSH
74114: LD_INT 0
74116: PUSH
74117: EMPTY
74118: LIST
74119: LIST
74120: PUSH
74121: LD_INT 3
74123: NEG
74124: PUSH
74125: LD_INT 1
74127: NEG
74128: PUSH
74129: EMPTY
74130: LIST
74131: LIST
74132: PUSH
74133: LD_INT 3
74135: NEG
74136: PUSH
74137: LD_INT 1
74139: PUSH
74140: EMPTY
74141: LIST
74142: LIST
74143: PUSH
74144: LD_INT 4
74146: NEG
74147: PUSH
74148: LD_INT 0
74150: PUSH
74151: EMPTY
74152: LIST
74153: LIST
74154: PUSH
74155: LD_INT 4
74157: NEG
74158: PUSH
74159: LD_INT 1
74161: NEG
74162: PUSH
74163: EMPTY
74164: LIST
74165: LIST
74166: PUSH
74167: LD_INT 4
74169: NEG
74170: PUSH
74171: LD_INT 1
74173: PUSH
74174: EMPTY
74175: LIST
74176: LIST
74177: PUSH
74178: LD_INT 5
74180: NEG
74181: PUSH
74182: LD_INT 0
74184: PUSH
74185: EMPTY
74186: LIST
74187: LIST
74188: PUSH
74189: LD_INT 5
74191: NEG
74192: PUSH
74193: LD_INT 1
74195: NEG
74196: PUSH
74197: EMPTY
74198: LIST
74199: LIST
74200: PUSH
74201: LD_INT 5
74203: NEG
74204: PUSH
74205: LD_INT 1
74207: PUSH
74208: EMPTY
74209: LIST
74210: LIST
74211: PUSH
74212: LD_INT 6
74214: NEG
74215: PUSH
74216: LD_INT 0
74218: PUSH
74219: EMPTY
74220: LIST
74221: LIST
74222: PUSH
74223: LD_INT 6
74225: NEG
74226: PUSH
74227: LD_INT 1
74229: NEG
74230: PUSH
74231: EMPTY
74232: LIST
74233: LIST
74234: PUSH
74235: EMPTY
74236: LIST
74237: LIST
74238: LIST
74239: LIST
74240: LIST
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: LIST
74248: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
74249: LD_ADDR_VAR 0 34
74253: PUSH
74254: LD_INT 2
74256: NEG
74257: PUSH
74258: LD_INT 3
74260: NEG
74261: PUSH
74262: EMPTY
74263: LIST
74264: LIST
74265: PUSH
74266: LD_INT 3
74268: NEG
74269: PUSH
74270: LD_INT 2
74272: NEG
74273: PUSH
74274: EMPTY
74275: LIST
74276: LIST
74277: PUSH
74278: LD_INT 3
74280: NEG
74281: PUSH
74282: LD_INT 3
74284: NEG
74285: PUSH
74286: EMPTY
74287: LIST
74288: LIST
74289: PUSH
74290: LD_INT 3
74292: NEG
74293: PUSH
74294: LD_INT 4
74296: NEG
74297: PUSH
74298: EMPTY
74299: LIST
74300: LIST
74301: PUSH
74302: LD_INT 4
74304: NEG
74305: PUSH
74306: LD_INT 3
74308: NEG
74309: PUSH
74310: EMPTY
74311: LIST
74312: LIST
74313: PUSH
74314: LD_INT 4
74316: NEG
74317: PUSH
74318: LD_INT 4
74320: NEG
74321: PUSH
74322: EMPTY
74323: LIST
74324: LIST
74325: PUSH
74326: LD_INT 4
74328: NEG
74329: PUSH
74330: LD_INT 5
74332: NEG
74333: PUSH
74334: EMPTY
74335: LIST
74336: LIST
74337: PUSH
74338: LD_INT 5
74340: NEG
74341: PUSH
74342: LD_INT 4
74344: NEG
74345: PUSH
74346: EMPTY
74347: LIST
74348: LIST
74349: PUSH
74350: LD_INT 5
74352: NEG
74353: PUSH
74354: LD_INT 5
74356: NEG
74357: PUSH
74358: EMPTY
74359: LIST
74360: LIST
74361: PUSH
74362: LD_INT 5
74364: NEG
74365: PUSH
74366: LD_INT 6
74368: NEG
74369: PUSH
74370: EMPTY
74371: LIST
74372: LIST
74373: PUSH
74374: LD_INT 6
74376: NEG
74377: PUSH
74378: LD_INT 5
74380: NEG
74381: PUSH
74382: EMPTY
74383: LIST
74384: LIST
74385: PUSH
74386: LD_INT 6
74388: NEG
74389: PUSH
74390: LD_INT 6
74392: NEG
74393: PUSH
74394: EMPTY
74395: LIST
74396: LIST
74397: PUSH
74398: EMPTY
74399: LIST
74400: LIST
74401: LIST
74402: LIST
74403: LIST
74404: LIST
74405: LIST
74406: LIST
74407: LIST
74408: LIST
74409: LIST
74410: LIST
74411: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
74412: LD_ADDR_VAR 0 41
74416: PUSH
74417: LD_INT 0
74419: PUSH
74420: LD_INT 2
74422: NEG
74423: PUSH
74424: EMPTY
74425: LIST
74426: LIST
74427: PUSH
74428: LD_INT 1
74430: NEG
74431: PUSH
74432: LD_INT 3
74434: NEG
74435: PUSH
74436: EMPTY
74437: LIST
74438: LIST
74439: PUSH
74440: LD_INT 1
74442: PUSH
74443: LD_INT 2
74445: NEG
74446: PUSH
74447: EMPTY
74448: LIST
74449: LIST
74450: PUSH
74451: EMPTY
74452: LIST
74453: LIST
74454: LIST
74455: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
74456: LD_ADDR_VAR 0 42
74460: PUSH
74461: LD_INT 2
74463: PUSH
74464: LD_INT 0
74466: PUSH
74467: EMPTY
74468: LIST
74469: LIST
74470: PUSH
74471: LD_INT 2
74473: PUSH
74474: LD_INT 1
74476: NEG
74477: PUSH
74478: EMPTY
74479: LIST
74480: LIST
74481: PUSH
74482: LD_INT 3
74484: PUSH
74485: LD_INT 1
74487: PUSH
74488: EMPTY
74489: LIST
74490: LIST
74491: PUSH
74492: EMPTY
74493: LIST
74494: LIST
74495: LIST
74496: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
74497: LD_ADDR_VAR 0 43
74501: PUSH
74502: LD_INT 2
74504: PUSH
74505: LD_INT 2
74507: PUSH
74508: EMPTY
74509: LIST
74510: LIST
74511: PUSH
74512: LD_INT 3
74514: PUSH
74515: LD_INT 2
74517: PUSH
74518: EMPTY
74519: LIST
74520: LIST
74521: PUSH
74522: LD_INT 2
74524: PUSH
74525: LD_INT 3
74527: PUSH
74528: EMPTY
74529: LIST
74530: LIST
74531: PUSH
74532: EMPTY
74533: LIST
74534: LIST
74535: LIST
74536: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
74537: LD_ADDR_VAR 0 44
74541: PUSH
74542: LD_INT 0
74544: PUSH
74545: LD_INT 2
74547: PUSH
74548: EMPTY
74549: LIST
74550: LIST
74551: PUSH
74552: LD_INT 1
74554: PUSH
74555: LD_INT 3
74557: PUSH
74558: EMPTY
74559: LIST
74560: LIST
74561: PUSH
74562: LD_INT 1
74564: NEG
74565: PUSH
74566: LD_INT 2
74568: PUSH
74569: EMPTY
74570: LIST
74571: LIST
74572: PUSH
74573: EMPTY
74574: LIST
74575: LIST
74576: LIST
74577: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74578: LD_ADDR_VAR 0 45
74582: PUSH
74583: LD_INT 2
74585: NEG
74586: PUSH
74587: LD_INT 0
74589: PUSH
74590: EMPTY
74591: LIST
74592: LIST
74593: PUSH
74594: LD_INT 2
74596: NEG
74597: PUSH
74598: LD_INT 1
74600: PUSH
74601: EMPTY
74602: LIST
74603: LIST
74604: PUSH
74605: LD_INT 3
74607: NEG
74608: PUSH
74609: LD_INT 1
74611: NEG
74612: PUSH
74613: EMPTY
74614: LIST
74615: LIST
74616: PUSH
74617: EMPTY
74618: LIST
74619: LIST
74620: LIST
74621: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
74622: LD_ADDR_VAR 0 46
74626: PUSH
74627: LD_INT 2
74629: NEG
74630: PUSH
74631: LD_INT 2
74633: NEG
74634: PUSH
74635: EMPTY
74636: LIST
74637: LIST
74638: PUSH
74639: LD_INT 2
74641: NEG
74642: PUSH
74643: LD_INT 3
74645: NEG
74646: PUSH
74647: EMPTY
74648: LIST
74649: LIST
74650: PUSH
74651: LD_INT 3
74653: NEG
74654: PUSH
74655: LD_INT 2
74657: NEG
74658: PUSH
74659: EMPTY
74660: LIST
74661: LIST
74662: PUSH
74663: EMPTY
74664: LIST
74665: LIST
74666: LIST
74667: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
74668: LD_ADDR_VAR 0 47
74672: PUSH
74673: LD_INT 2
74675: NEG
74676: PUSH
74677: LD_INT 3
74679: NEG
74680: PUSH
74681: EMPTY
74682: LIST
74683: LIST
74684: PUSH
74685: LD_INT 1
74687: NEG
74688: PUSH
74689: LD_INT 3
74691: NEG
74692: PUSH
74693: EMPTY
74694: LIST
74695: LIST
74696: PUSH
74697: EMPTY
74698: LIST
74699: LIST
74700: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
74701: LD_ADDR_VAR 0 48
74705: PUSH
74706: LD_INT 1
74708: PUSH
74709: LD_INT 2
74711: NEG
74712: PUSH
74713: EMPTY
74714: LIST
74715: LIST
74716: PUSH
74717: LD_INT 2
74719: PUSH
74720: LD_INT 1
74722: NEG
74723: PUSH
74724: EMPTY
74725: LIST
74726: LIST
74727: PUSH
74728: EMPTY
74729: LIST
74730: LIST
74731: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
74732: LD_ADDR_VAR 0 49
74736: PUSH
74737: LD_INT 3
74739: PUSH
74740: LD_INT 1
74742: PUSH
74743: EMPTY
74744: LIST
74745: LIST
74746: PUSH
74747: LD_INT 3
74749: PUSH
74750: LD_INT 2
74752: PUSH
74753: EMPTY
74754: LIST
74755: LIST
74756: PUSH
74757: EMPTY
74758: LIST
74759: LIST
74760: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
74761: LD_ADDR_VAR 0 50
74765: PUSH
74766: LD_INT 2
74768: PUSH
74769: LD_INT 3
74771: PUSH
74772: EMPTY
74773: LIST
74774: LIST
74775: PUSH
74776: LD_INT 1
74778: PUSH
74779: LD_INT 3
74781: PUSH
74782: EMPTY
74783: LIST
74784: LIST
74785: PUSH
74786: EMPTY
74787: LIST
74788: LIST
74789: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
74790: LD_ADDR_VAR 0 51
74794: PUSH
74795: LD_INT 1
74797: NEG
74798: PUSH
74799: LD_INT 2
74801: PUSH
74802: EMPTY
74803: LIST
74804: LIST
74805: PUSH
74806: LD_INT 2
74808: NEG
74809: PUSH
74810: LD_INT 1
74812: PUSH
74813: EMPTY
74814: LIST
74815: LIST
74816: PUSH
74817: EMPTY
74818: LIST
74819: LIST
74820: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
74821: LD_ADDR_VAR 0 52
74825: PUSH
74826: LD_INT 3
74828: NEG
74829: PUSH
74830: LD_INT 1
74832: NEG
74833: PUSH
74834: EMPTY
74835: LIST
74836: LIST
74837: PUSH
74838: LD_INT 3
74840: NEG
74841: PUSH
74842: LD_INT 2
74844: NEG
74845: PUSH
74846: EMPTY
74847: LIST
74848: LIST
74849: PUSH
74850: EMPTY
74851: LIST
74852: LIST
74853: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
74854: LD_ADDR_VAR 0 53
74858: PUSH
74859: LD_INT 1
74861: NEG
74862: PUSH
74863: LD_INT 3
74865: NEG
74866: PUSH
74867: EMPTY
74868: LIST
74869: LIST
74870: PUSH
74871: LD_INT 0
74873: PUSH
74874: LD_INT 3
74876: NEG
74877: PUSH
74878: EMPTY
74879: LIST
74880: LIST
74881: PUSH
74882: LD_INT 1
74884: PUSH
74885: LD_INT 2
74887: NEG
74888: PUSH
74889: EMPTY
74890: LIST
74891: LIST
74892: PUSH
74893: EMPTY
74894: LIST
74895: LIST
74896: LIST
74897: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
74898: LD_ADDR_VAR 0 54
74902: PUSH
74903: LD_INT 2
74905: PUSH
74906: LD_INT 1
74908: NEG
74909: PUSH
74910: EMPTY
74911: LIST
74912: LIST
74913: PUSH
74914: LD_INT 3
74916: PUSH
74917: LD_INT 0
74919: PUSH
74920: EMPTY
74921: LIST
74922: LIST
74923: PUSH
74924: LD_INT 3
74926: PUSH
74927: LD_INT 1
74929: PUSH
74930: EMPTY
74931: LIST
74932: LIST
74933: PUSH
74934: EMPTY
74935: LIST
74936: LIST
74937: LIST
74938: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
74939: LD_ADDR_VAR 0 55
74943: PUSH
74944: LD_INT 3
74946: PUSH
74947: LD_INT 2
74949: PUSH
74950: EMPTY
74951: LIST
74952: LIST
74953: PUSH
74954: LD_INT 3
74956: PUSH
74957: LD_INT 3
74959: PUSH
74960: EMPTY
74961: LIST
74962: LIST
74963: PUSH
74964: LD_INT 2
74966: PUSH
74967: LD_INT 3
74969: PUSH
74970: EMPTY
74971: LIST
74972: LIST
74973: PUSH
74974: EMPTY
74975: LIST
74976: LIST
74977: LIST
74978: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
74979: LD_ADDR_VAR 0 56
74983: PUSH
74984: LD_INT 1
74986: PUSH
74987: LD_INT 3
74989: PUSH
74990: EMPTY
74991: LIST
74992: LIST
74993: PUSH
74994: LD_INT 0
74996: PUSH
74997: LD_INT 3
74999: PUSH
75000: EMPTY
75001: LIST
75002: LIST
75003: PUSH
75004: LD_INT 1
75006: NEG
75007: PUSH
75008: LD_INT 2
75010: PUSH
75011: EMPTY
75012: LIST
75013: LIST
75014: PUSH
75015: EMPTY
75016: LIST
75017: LIST
75018: LIST
75019: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
75020: LD_ADDR_VAR 0 57
75024: PUSH
75025: LD_INT 2
75027: NEG
75028: PUSH
75029: LD_INT 1
75031: PUSH
75032: EMPTY
75033: LIST
75034: LIST
75035: PUSH
75036: LD_INT 3
75038: NEG
75039: PUSH
75040: LD_INT 0
75042: PUSH
75043: EMPTY
75044: LIST
75045: LIST
75046: PUSH
75047: LD_INT 3
75049: NEG
75050: PUSH
75051: LD_INT 1
75053: NEG
75054: PUSH
75055: EMPTY
75056: LIST
75057: LIST
75058: PUSH
75059: EMPTY
75060: LIST
75061: LIST
75062: LIST
75063: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75064: LD_ADDR_VAR 0 58
75068: PUSH
75069: LD_INT 2
75071: NEG
75072: PUSH
75073: LD_INT 3
75075: NEG
75076: PUSH
75077: EMPTY
75078: LIST
75079: LIST
75080: PUSH
75081: LD_INT 3
75083: NEG
75084: PUSH
75085: LD_INT 2
75087: NEG
75088: PUSH
75089: EMPTY
75090: LIST
75091: LIST
75092: PUSH
75093: LD_INT 3
75095: NEG
75096: PUSH
75097: LD_INT 3
75099: NEG
75100: PUSH
75101: EMPTY
75102: LIST
75103: LIST
75104: PUSH
75105: EMPTY
75106: LIST
75107: LIST
75108: LIST
75109: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
75110: LD_ADDR_VAR 0 59
75114: PUSH
75115: LD_INT 1
75117: NEG
75118: PUSH
75119: LD_INT 2
75121: NEG
75122: PUSH
75123: EMPTY
75124: LIST
75125: LIST
75126: PUSH
75127: LD_INT 0
75129: PUSH
75130: LD_INT 2
75132: NEG
75133: PUSH
75134: EMPTY
75135: LIST
75136: LIST
75137: PUSH
75138: LD_INT 1
75140: PUSH
75141: LD_INT 1
75143: NEG
75144: PUSH
75145: EMPTY
75146: LIST
75147: LIST
75148: PUSH
75149: EMPTY
75150: LIST
75151: LIST
75152: LIST
75153: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
75154: LD_ADDR_VAR 0 60
75158: PUSH
75159: LD_INT 1
75161: PUSH
75162: LD_INT 1
75164: NEG
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: PUSH
75170: LD_INT 2
75172: PUSH
75173: LD_INT 0
75175: PUSH
75176: EMPTY
75177: LIST
75178: LIST
75179: PUSH
75180: LD_INT 2
75182: PUSH
75183: LD_INT 1
75185: PUSH
75186: EMPTY
75187: LIST
75188: LIST
75189: PUSH
75190: EMPTY
75191: LIST
75192: LIST
75193: LIST
75194: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
75195: LD_ADDR_VAR 0 61
75199: PUSH
75200: LD_INT 2
75202: PUSH
75203: LD_INT 1
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: PUSH
75210: LD_INT 2
75212: PUSH
75213: LD_INT 2
75215: PUSH
75216: EMPTY
75217: LIST
75218: LIST
75219: PUSH
75220: LD_INT 1
75222: PUSH
75223: LD_INT 2
75225: PUSH
75226: EMPTY
75227: LIST
75228: LIST
75229: PUSH
75230: EMPTY
75231: LIST
75232: LIST
75233: LIST
75234: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
75235: LD_ADDR_VAR 0 62
75239: PUSH
75240: LD_INT 1
75242: PUSH
75243: LD_INT 2
75245: PUSH
75246: EMPTY
75247: LIST
75248: LIST
75249: PUSH
75250: LD_INT 0
75252: PUSH
75253: LD_INT 2
75255: PUSH
75256: EMPTY
75257: LIST
75258: LIST
75259: PUSH
75260: LD_INT 1
75262: NEG
75263: PUSH
75264: LD_INT 1
75266: PUSH
75267: EMPTY
75268: LIST
75269: LIST
75270: PUSH
75271: EMPTY
75272: LIST
75273: LIST
75274: LIST
75275: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
75276: LD_ADDR_VAR 0 63
75280: PUSH
75281: LD_INT 1
75283: NEG
75284: PUSH
75285: LD_INT 1
75287: PUSH
75288: EMPTY
75289: LIST
75290: LIST
75291: PUSH
75292: LD_INT 2
75294: NEG
75295: PUSH
75296: LD_INT 0
75298: PUSH
75299: EMPTY
75300: LIST
75301: LIST
75302: PUSH
75303: LD_INT 2
75305: NEG
75306: PUSH
75307: LD_INT 1
75309: NEG
75310: PUSH
75311: EMPTY
75312: LIST
75313: LIST
75314: PUSH
75315: EMPTY
75316: LIST
75317: LIST
75318: LIST
75319: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75320: LD_ADDR_VAR 0 64
75324: PUSH
75325: LD_INT 1
75327: NEG
75328: PUSH
75329: LD_INT 2
75331: NEG
75332: PUSH
75333: EMPTY
75334: LIST
75335: LIST
75336: PUSH
75337: LD_INT 2
75339: NEG
75340: PUSH
75341: LD_INT 1
75343: NEG
75344: PUSH
75345: EMPTY
75346: LIST
75347: LIST
75348: PUSH
75349: LD_INT 2
75351: NEG
75352: PUSH
75353: LD_INT 2
75355: NEG
75356: PUSH
75357: EMPTY
75358: LIST
75359: LIST
75360: PUSH
75361: EMPTY
75362: LIST
75363: LIST
75364: LIST
75365: ST_TO_ADDR
// end ; 2 :
75366: GO 78632
75368: LD_INT 2
75370: DOUBLE
75371: EQUAL
75372: IFTRUE 75376
75374: GO 78631
75376: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
75377: LD_ADDR_VAR 0 29
75381: PUSH
75382: LD_INT 4
75384: PUSH
75385: LD_INT 0
75387: PUSH
75388: EMPTY
75389: LIST
75390: LIST
75391: PUSH
75392: LD_INT 4
75394: PUSH
75395: LD_INT 1
75397: NEG
75398: PUSH
75399: EMPTY
75400: LIST
75401: LIST
75402: PUSH
75403: LD_INT 5
75405: PUSH
75406: LD_INT 0
75408: PUSH
75409: EMPTY
75410: LIST
75411: LIST
75412: PUSH
75413: LD_INT 5
75415: PUSH
75416: LD_INT 1
75418: PUSH
75419: EMPTY
75420: LIST
75421: LIST
75422: PUSH
75423: LD_INT 4
75425: PUSH
75426: LD_INT 1
75428: PUSH
75429: EMPTY
75430: LIST
75431: LIST
75432: PUSH
75433: LD_INT 3
75435: PUSH
75436: LD_INT 0
75438: PUSH
75439: EMPTY
75440: LIST
75441: LIST
75442: PUSH
75443: LD_INT 3
75445: PUSH
75446: LD_INT 1
75448: NEG
75449: PUSH
75450: EMPTY
75451: LIST
75452: LIST
75453: PUSH
75454: LD_INT 3
75456: PUSH
75457: LD_INT 2
75459: NEG
75460: PUSH
75461: EMPTY
75462: LIST
75463: LIST
75464: PUSH
75465: LD_INT 5
75467: PUSH
75468: LD_INT 2
75470: PUSH
75471: EMPTY
75472: LIST
75473: LIST
75474: PUSH
75475: LD_INT 3
75477: PUSH
75478: LD_INT 3
75480: PUSH
75481: EMPTY
75482: LIST
75483: LIST
75484: PUSH
75485: LD_INT 3
75487: PUSH
75488: LD_INT 2
75490: PUSH
75491: EMPTY
75492: LIST
75493: LIST
75494: PUSH
75495: LD_INT 4
75497: PUSH
75498: LD_INT 3
75500: PUSH
75501: EMPTY
75502: LIST
75503: LIST
75504: PUSH
75505: LD_INT 4
75507: PUSH
75508: LD_INT 4
75510: PUSH
75511: EMPTY
75512: LIST
75513: LIST
75514: PUSH
75515: LD_INT 3
75517: PUSH
75518: LD_INT 4
75520: PUSH
75521: EMPTY
75522: LIST
75523: LIST
75524: PUSH
75525: LD_INT 2
75527: PUSH
75528: LD_INT 3
75530: PUSH
75531: EMPTY
75532: LIST
75533: LIST
75534: PUSH
75535: LD_INT 2
75537: PUSH
75538: LD_INT 2
75540: PUSH
75541: EMPTY
75542: LIST
75543: LIST
75544: PUSH
75545: LD_INT 4
75547: PUSH
75548: LD_INT 2
75550: PUSH
75551: EMPTY
75552: LIST
75553: LIST
75554: PUSH
75555: LD_INT 2
75557: PUSH
75558: LD_INT 4
75560: PUSH
75561: EMPTY
75562: LIST
75563: LIST
75564: PUSH
75565: LD_INT 0
75567: PUSH
75568: LD_INT 4
75570: PUSH
75571: EMPTY
75572: LIST
75573: LIST
75574: PUSH
75575: LD_INT 0
75577: PUSH
75578: LD_INT 3
75580: PUSH
75581: EMPTY
75582: LIST
75583: LIST
75584: PUSH
75585: LD_INT 1
75587: PUSH
75588: LD_INT 4
75590: PUSH
75591: EMPTY
75592: LIST
75593: LIST
75594: PUSH
75595: LD_INT 1
75597: PUSH
75598: LD_INT 5
75600: PUSH
75601: EMPTY
75602: LIST
75603: LIST
75604: PUSH
75605: LD_INT 0
75607: PUSH
75608: LD_INT 5
75610: PUSH
75611: EMPTY
75612: LIST
75613: LIST
75614: PUSH
75615: LD_INT 1
75617: NEG
75618: PUSH
75619: LD_INT 4
75621: PUSH
75622: EMPTY
75623: LIST
75624: LIST
75625: PUSH
75626: LD_INT 1
75628: NEG
75629: PUSH
75630: LD_INT 3
75632: PUSH
75633: EMPTY
75634: LIST
75635: LIST
75636: PUSH
75637: LD_INT 2
75639: PUSH
75640: LD_INT 5
75642: PUSH
75643: EMPTY
75644: LIST
75645: LIST
75646: PUSH
75647: LD_INT 2
75649: NEG
75650: PUSH
75651: LD_INT 3
75653: PUSH
75654: EMPTY
75655: LIST
75656: LIST
75657: PUSH
75658: LD_INT 3
75660: NEG
75661: PUSH
75662: LD_INT 0
75664: PUSH
75665: EMPTY
75666: LIST
75667: LIST
75668: PUSH
75669: LD_INT 3
75671: NEG
75672: PUSH
75673: LD_INT 1
75675: NEG
75676: PUSH
75677: EMPTY
75678: LIST
75679: LIST
75680: PUSH
75681: LD_INT 2
75683: NEG
75684: PUSH
75685: LD_INT 0
75687: PUSH
75688: EMPTY
75689: LIST
75690: LIST
75691: PUSH
75692: LD_INT 2
75694: NEG
75695: PUSH
75696: LD_INT 1
75698: PUSH
75699: EMPTY
75700: LIST
75701: LIST
75702: PUSH
75703: LD_INT 3
75705: NEG
75706: PUSH
75707: LD_INT 1
75709: PUSH
75710: EMPTY
75711: LIST
75712: LIST
75713: PUSH
75714: LD_INT 4
75716: NEG
75717: PUSH
75718: LD_INT 0
75720: PUSH
75721: EMPTY
75722: LIST
75723: LIST
75724: PUSH
75725: LD_INT 4
75727: NEG
75728: PUSH
75729: LD_INT 1
75731: NEG
75732: PUSH
75733: EMPTY
75734: LIST
75735: LIST
75736: PUSH
75737: LD_INT 4
75739: NEG
75740: PUSH
75741: LD_INT 2
75743: NEG
75744: PUSH
75745: EMPTY
75746: LIST
75747: LIST
75748: PUSH
75749: LD_INT 2
75751: NEG
75752: PUSH
75753: LD_INT 2
75755: PUSH
75756: EMPTY
75757: LIST
75758: LIST
75759: PUSH
75760: LD_INT 4
75762: NEG
75763: PUSH
75764: LD_INT 4
75766: NEG
75767: PUSH
75768: EMPTY
75769: LIST
75770: LIST
75771: PUSH
75772: LD_INT 4
75774: NEG
75775: PUSH
75776: LD_INT 5
75778: NEG
75779: PUSH
75780: EMPTY
75781: LIST
75782: LIST
75783: PUSH
75784: LD_INT 3
75786: NEG
75787: PUSH
75788: LD_INT 4
75790: NEG
75791: PUSH
75792: EMPTY
75793: LIST
75794: LIST
75795: PUSH
75796: LD_INT 3
75798: NEG
75799: PUSH
75800: LD_INT 3
75802: NEG
75803: PUSH
75804: EMPTY
75805: LIST
75806: LIST
75807: PUSH
75808: LD_INT 4
75810: NEG
75811: PUSH
75812: LD_INT 3
75814: NEG
75815: PUSH
75816: EMPTY
75817: LIST
75818: LIST
75819: PUSH
75820: LD_INT 5
75822: NEG
75823: PUSH
75824: LD_INT 4
75826: NEG
75827: PUSH
75828: EMPTY
75829: LIST
75830: LIST
75831: PUSH
75832: LD_INT 5
75834: NEG
75835: PUSH
75836: LD_INT 5
75838: NEG
75839: PUSH
75840: EMPTY
75841: LIST
75842: LIST
75843: PUSH
75844: LD_INT 3
75846: NEG
75847: PUSH
75848: LD_INT 5
75850: NEG
75851: PUSH
75852: EMPTY
75853: LIST
75854: LIST
75855: PUSH
75856: LD_INT 5
75858: NEG
75859: PUSH
75860: LD_INT 3
75862: NEG
75863: PUSH
75864: EMPTY
75865: LIST
75866: LIST
75867: PUSH
75868: EMPTY
75869: LIST
75870: LIST
75871: LIST
75872: LIST
75873: LIST
75874: LIST
75875: LIST
75876: LIST
75877: LIST
75878: LIST
75879: LIST
75880: LIST
75881: LIST
75882: LIST
75883: LIST
75884: LIST
75885: LIST
75886: LIST
75887: LIST
75888: LIST
75889: LIST
75890: LIST
75891: LIST
75892: LIST
75893: LIST
75894: LIST
75895: LIST
75896: LIST
75897: LIST
75898: LIST
75899: LIST
75900: LIST
75901: LIST
75902: LIST
75903: LIST
75904: LIST
75905: LIST
75906: LIST
75907: LIST
75908: LIST
75909: LIST
75910: LIST
75911: LIST
75912: LIST
75913: LIST
75914: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
75915: LD_ADDR_VAR 0 30
75919: PUSH
75920: LD_INT 4
75922: PUSH
75923: LD_INT 4
75925: PUSH
75926: EMPTY
75927: LIST
75928: LIST
75929: PUSH
75930: LD_INT 4
75932: PUSH
75933: LD_INT 3
75935: PUSH
75936: EMPTY
75937: LIST
75938: LIST
75939: PUSH
75940: LD_INT 5
75942: PUSH
75943: LD_INT 4
75945: PUSH
75946: EMPTY
75947: LIST
75948: LIST
75949: PUSH
75950: LD_INT 5
75952: PUSH
75953: LD_INT 5
75955: PUSH
75956: EMPTY
75957: LIST
75958: LIST
75959: PUSH
75960: LD_INT 4
75962: PUSH
75963: LD_INT 5
75965: PUSH
75966: EMPTY
75967: LIST
75968: LIST
75969: PUSH
75970: LD_INT 3
75972: PUSH
75973: LD_INT 4
75975: PUSH
75976: EMPTY
75977: LIST
75978: LIST
75979: PUSH
75980: LD_INT 3
75982: PUSH
75983: LD_INT 3
75985: PUSH
75986: EMPTY
75987: LIST
75988: LIST
75989: PUSH
75990: LD_INT 5
75992: PUSH
75993: LD_INT 3
75995: PUSH
75996: EMPTY
75997: LIST
75998: LIST
75999: PUSH
76000: LD_INT 3
76002: PUSH
76003: LD_INT 5
76005: PUSH
76006: EMPTY
76007: LIST
76008: LIST
76009: PUSH
76010: LD_INT 0
76012: PUSH
76013: LD_INT 3
76015: PUSH
76016: EMPTY
76017: LIST
76018: LIST
76019: PUSH
76020: LD_INT 0
76022: PUSH
76023: LD_INT 2
76025: PUSH
76026: EMPTY
76027: LIST
76028: LIST
76029: PUSH
76030: LD_INT 1
76032: PUSH
76033: LD_INT 3
76035: PUSH
76036: EMPTY
76037: LIST
76038: LIST
76039: PUSH
76040: LD_INT 1
76042: PUSH
76043: LD_INT 4
76045: PUSH
76046: EMPTY
76047: LIST
76048: LIST
76049: PUSH
76050: LD_INT 0
76052: PUSH
76053: LD_INT 4
76055: PUSH
76056: EMPTY
76057: LIST
76058: LIST
76059: PUSH
76060: LD_INT 1
76062: NEG
76063: PUSH
76064: LD_INT 3
76066: PUSH
76067: EMPTY
76068: LIST
76069: LIST
76070: PUSH
76071: LD_INT 1
76073: NEG
76074: PUSH
76075: LD_INT 2
76077: PUSH
76078: EMPTY
76079: LIST
76080: LIST
76081: PUSH
76082: LD_INT 2
76084: PUSH
76085: LD_INT 4
76087: PUSH
76088: EMPTY
76089: LIST
76090: LIST
76091: PUSH
76092: LD_INT 2
76094: NEG
76095: PUSH
76096: LD_INT 2
76098: PUSH
76099: EMPTY
76100: LIST
76101: LIST
76102: PUSH
76103: LD_INT 4
76105: NEG
76106: PUSH
76107: LD_INT 0
76109: PUSH
76110: EMPTY
76111: LIST
76112: LIST
76113: PUSH
76114: LD_INT 4
76116: NEG
76117: PUSH
76118: LD_INT 1
76120: NEG
76121: PUSH
76122: EMPTY
76123: LIST
76124: LIST
76125: PUSH
76126: LD_INT 3
76128: NEG
76129: PUSH
76130: LD_INT 0
76132: PUSH
76133: EMPTY
76134: LIST
76135: LIST
76136: PUSH
76137: LD_INT 3
76139: NEG
76140: PUSH
76141: LD_INT 1
76143: PUSH
76144: EMPTY
76145: LIST
76146: LIST
76147: PUSH
76148: LD_INT 4
76150: NEG
76151: PUSH
76152: LD_INT 1
76154: PUSH
76155: EMPTY
76156: LIST
76157: LIST
76158: PUSH
76159: LD_INT 5
76161: NEG
76162: PUSH
76163: LD_INT 0
76165: PUSH
76166: EMPTY
76167: LIST
76168: LIST
76169: PUSH
76170: LD_INT 5
76172: NEG
76173: PUSH
76174: LD_INT 1
76176: NEG
76177: PUSH
76178: EMPTY
76179: LIST
76180: LIST
76181: PUSH
76182: LD_INT 5
76184: NEG
76185: PUSH
76186: LD_INT 2
76188: NEG
76189: PUSH
76190: EMPTY
76191: LIST
76192: LIST
76193: PUSH
76194: LD_INT 3
76196: NEG
76197: PUSH
76198: LD_INT 2
76200: PUSH
76201: EMPTY
76202: LIST
76203: LIST
76204: PUSH
76205: LD_INT 3
76207: NEG
76208: PUSH
76209: LD_INT 3
76211: NEG
76212: PUSH
76213: EMPTY
76214: LIST
76215: LIST
76216: PUSH
76217: LD_INT 3
76219: NEG
76220: PUSH
76221: LD_INT 4
76223: NEG
76224: PUSH
76225: EMPTY
76226: LIST
76227: LIST
76228: PUSH
76229: LD_INT 2
76231: NEG
76232: PUSH
76233: LD_INT 3
76235: NEG
76236: PUSH
76237: EMPTY
76238: LIST
76239: LIST
76240: PUSH
76241: LD_INT 2
76243: NEG
76244: PUSH
76245: LD_INT 2
76247: NEG
76248: PUSH
76249: EMPTY
76250: LIST
76251: LIST
76252: PUSH
76253: LD_INT 3
76255: NEG
76256: PUSH
76257: LD_INT 2
76259: NEG
76260: PUSH
76261: EMPTY
76262: LIST
76263: LIST
76264: PUSH
76265: LD_INT 4
76267: NEG
76268: PUSH
76269: LD_INT 3
76271: NEG
76272: PUSH
76273: EMPTY
76274: LIST
76275: LIST
76276: PUSH
76277: LD_INT 4
76279: NEG
76280: PUSH
76281: LD_INT 4
76283: NEG
76284: PUSH
76285: EMPTY
76286: LIST
76287: LIST
76288: PUSH
76289: LD_INT 2
76291: NEG
76292: PUSH
76293: LD_INT 4
76295: NEG
76296: PUSH
76297: EMPTY
76298: LIST
76299: LIST
76300: PUSH
76301: LD_INT 4
76303: NEG
76304: PUSH
76305: LD_INT 2
76307: NEG
76308: PUSH
76309: EMPTY
76310: LIST
76311: LIST
76312: PUSH
76313: LD_INT 0
76315: PUSH
76316: LD_INT 4
76318: NEG
76319: PUSH
76320: EMPTY
76321: LIST
76322: LIST
76323: PUSH
76324: LD_INT 0
76326: PUSH
76327: LD_INT 5
76329: NEG
76330: PUSH
76331: EMPTY
76332: LIST
76333: LIST
76334: PUSH
76335: LD_INT 1
76337: PUSH
76338: LD_INT 4
76340: NEG
76341: PUSH
76342: EMPTY
76343: LIST
76344: LIST
76345: PUSH
76346: LD_INT 1
76348: PUSH
76349: LD_INT 3
76351: NEG
76352: PUSH
76353: EMPTY
76354: LIST
76355: LIST
76356: PUSH
76357: LD_INT 0
76359: PUSH
76360: LD_INT 3
76362: NEG
76363: PUSH
76364: EMPTY
76365: LIST
76366: LIST
76367: PUSH
76368: LD_INT 1
76370: NEG
76371: PUSH
76372: LD_INT 4
76374: NEG
76375: PUSH
76376: EMPTY
76377: LIST
76378: LIST
76379: PUSH
76380: LD_INT 1
76382: NEG
76383: PUSH
76384: LD_INT 5
76386: NEG
76387: PUSH
76388: EMPTY
76389: LIST
76390: LIST
76391: PUSH
76392: LD_INT 2
76394: PUSH
76395: LD_INT 3
76397: NEG
76398: PUSH
76399: EMPTY
76400: LIST
76401: LIST
76402: PUSH
76403: LD_INT 2
76405: NEG
76406: PUSH
76407: LD_INT 5
76409: NEG
76410: PUSH
76411: EMPTY
76412: LIST
76413: LIST
76414: PUSH
76415: EMPTY
76416: LIST
76417: LIST
76418: LIST
76419: LIST
76420: LIST
76421: LIST
76422: LIST
76423: LIST
76424: LIST
76425: LIST
76426: LIST
76427: LIST
76428: LIST
76429: LIST
76430: LIST
76431: LIST
76432: LIST
76433: LIST
76434: LIST
76435: LIST
76436: LIST
76437: LIST
76438: LIST
76439: LIST
76440: LIST
76441: LIST
76442: LIST
76443: LIST
76444: LIST
76445: LIST
76446: LIST
76447: LIST
76448: LIST
76449: LIST
76450: LIST
76451: LIST
76452: LIST
76453: LIST
76454: LIST
76455: LIST
76456: LIST
76457: LIST
76458: LIST
76459: LIST
76460: LIST
76461: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
76462: LD_ADDR_VAR 0 31
76466: PUSH
76467: LD_INT 0
76469: PUSH
76470: LD_INT 4
76472: PUSH
76473: EMPTY
76474: LIST
76475: LIST
76476: PUSH
76477: LD_INT 0
76479: PUSH
76480: LD_INT 3
76482: PUSH
76483: EMPTY
76484: LIST
76485: LIST
76486: PUSH
76487: LD_INT 1
76489: PUSH
76490: LD_INT 4
76492: PUSH
76493: EMPTY
76494: LIST
76495: LIST
76496: PUSH
76497: LD_INT 1
76499: PUSH
76500: LD_INT 5
76502: PUSH
76503: EMPTY
76504: LIST
76505: LIST
76506: PUSH
76507: LD_INT 0
76509: PUSH
76510: LD_INT 5
76512: PUSH
76513: EMPTY
76514: LIST
76515: LIST
76516: PUSH
76517: LD_INT 1
76519: NEG
76520: PUSH
76521: LD_INT 4
76523: PUSH
76524: EMPTY
76525: LIST
76526: LIST
76527: PUSH
76528: LD_INT 1
76530: NEG
76531: PUSH
76532: LD_INT 3
76534: PUSH
76535: EMPTY
76536: LIST
76537: LIST
76538: PUSH
76539: LD_INT 2
76541: PUSH
76542: LD_INT 5
76544: PUSH
76545: EMPTY
76546: LIST
76547: LIST
76548: PUSH
76549: LD_INT 2
76551: NEG
76552: PUSH
76553: LD_INT 3
76555: PUSH
76556: EMPTY
76557: LIST
76558: LIST
76559: PUSH
76560: LD_INT 3
76562: NEG
76563: PUSH
76564: LD_INT 0
76566: PUSH
76567: EMPTY
76568: LIST
76569: LIST
76570: PUSH
76571: LD_INT 3
76573: NEG
76574: PUSH
76575: LD_INT 1
76577: NEG
76578: PUSH
76579: EMPTY
76580: LIST
76581: LIST
76582: PUSH
76583: LD_INT 2
76585: NEG
76586: PUSH
76587: LD_INT 0
76589: PUSH
76590: EMPTY
76591: LIST
76592: LIST
76593: PUSH
76594: LD_INT 2
76596: NEG
76597: PUSH
76598: LD_INT 1
76600: PUSH
76601: EMPTY
76602: LIST
76603: LIST
76604: PUSH
76605: LD_INT 3
76607: NEG
76608: PUSH
76609: LD_INT 1
76611: PUSH
76612: EMPTY
76613: LIST
76614: LIST
76615: PUSH
76616: LD_INT 4
76618: NEG
76619: PUSH
76620: LD_INT 0
76622: PUSH
76623: EMPTY
76624: LIST
76625: LIST
76626: PUSH
76627: LD_INT 4
76629: NEG
76630: PUSH
76631: LD_INT 1
76633: NEG
76634: PUSH
76635: EMPTY
76636: LIST
76637: LIST
76638: PUSH
76639: LD_INT 4
76641: NEG
76642: PUSH
76643: LD_INT 2
76645: NEG
76646: PUSH
76647: EMPTY
76648: LIST
76649: LIST
76650: PUSH
76651: LD_INT 2
76653: NEG
76654: PUSH
76655: LD_INT 2
76657: PUSH
76658: EMPTY
76659: LIST
76660: LIST
76661: PUSH
76662: LD_INT 4
76664: NEG
76665: PUSH
76666: LD_INT 4
76668: NEG
76669: PUSH
76670: EMPTY
76671: LIST
76672: LIST
76673: PUSH
76674: LD_INT 4
76676: NEG
76677: PUSH
76678: LD_INT 5
76680: NEG
76681: PUSH
76682: EMPTY
76683: LIST
76684: LIST
76685: PUSH
76686: LD_INT 3
76688: NEG
76689: PUSH
76690: LD_INT 4
76692: NEG
76693: PUSH
76694: EMPTY
76695: LIST
76696: LIST
76697: PUSH
76698: LD_INT 3
76700: NEG
76701: PUSH
76702: LD_INT 3
76704: NEG
76705: PUSH
76706: EMPTY
76707: LIST
76708: LIST
76709: PUSH
76710: LD_INT 4
76712: NEG
76713: PUSH
76714: LD_INT 3
76716: NEG
76717: PUSH
76718: EMPTY
76719: LIST
76720: LIST
76721: PUSH
76722: LD_INT 5
76724: NEG
76725: PUSH
76726: LD_INT 4
76728: NEG
76729: PUSH
76730: EMPTY
76731: LIST
76732: LIST
76733: PUSH
76734: LD_INT 5
76736: NEG
76737: PUSH
76738: LD_INT 5
76740: NEG
76741: PUSH
76742: EMPTY
76743: LIST
76744: LIST
76745: PUSH
76746: LD_INT 3
76748: NEG
76749: PUSH
76750: LD_INT 5
76752: NEG
76753: PUSH
76754: EMPTY
76755: LIST
76756: LIST
76757: PUSH
76758: LD_INT 5
76760: NEG
76761: PUSH
76762: LD_INT 3
76764: NEG
76765: PUSH
76766: EMPTY
76767: LIST
76768: LIST
76769: PUSH
76770: LD_INT 0
76772: PUSH
76773: LD_INT 3
76775: NEG
76776: PUSH
76777: EMPTY
76778: LIST
76779: LIST
76780: PUSH
76781: LD_INT 0
76783: PUSH
76784: LD_INT 4
76786: NEG
76787: PUSH
76788: EMPTY
76789: LIST
76790: LIST
76791: PUSH
76792: LD_INT 1
76794: PUSH
76795: LD_INT 3
76797: NEG
76798: PUSH
76799: EMPTY
76800: LIST
76801: LIST
76802: PUSH
76803: LD_INT 1
76805: PUSH
76806: LD_INT 2
76808: NEG
76809: PUSH
76810: EMPTY
76811: LIST
76812: LIST
76813: PUSH
76814: LD_INT 0
76816: PUSH
76817: LD_INT 2
76819: NEG
76820: PUSH
76821: EMPTY
76822: LIST
76823: LIST
76824: PUSH
76825: LD_INT 1
76827: NEG
76828: PUSH
76829: LD_INT 3
76831: NEG
76832: PUSH
76833: EMPTY
76834: LIST
76835: LIST
76836: PUSH
76837: LD_INT 1
76839: NEG
76840: PUSH
76841: LD_INT 4
76843: NEG
76844: PUSH
76845: EMPTY
76846: LIST
76847: LIST
76848: PUSH
76849: LD_INT 2
76851: PUSH
76852: LD_INT 2
76854: NEG
76855: PUSH
76856: EMPTY
76857: LIST
76858: LIST
76859: PUSH
76860: LD_INT 2
76862: NEG
76863: PUSH
76864: LD_INT 4
76866: NEG
76867: PUSH
76868: EMPTY
76869: LIST
76870: LIST
76871: PUSH
76872: LD_INT 4
76874: PUSH
76875: LD_INT 0
76877: PUSH
76878: EMPTY
76879: LIST
76880: LIST
76881: PUSH
76882: LD_INT 4
76884: PUSH
76885: LD_INT 1
76887: NEG
76888: PUSH
76889: EMPTY
76890: LIST
76891: LIST
76892: PUSH
76893: LD_INT 5
76895: PUSH
76896: LD_INT 0
76898: PUSH
76899: EMPTY
76900: LIST
76901: LIST
76902: PUSH
76903: LD_INT 5
76905: PUSH
76906: LD_INT 1
76908: PUSH
76909: EMPTY
76910: LIST
76911: LIST
76912: PUSH
76913: LD_INT 4
76915: PUSH
76916: LD_INT 1
76918: PUSH
76919: EMPTY
76920: LIST
76921: LIST
76922: PUSH
76923: LD_INT 3
76925: PUSH
76926: LD_INT 0
76928: PUSH
76929: EMPTY
76930: LIST
76931: LIST
76932: PUSH
76933: LD_INT 3
76935: PUSH
76936: LD_INT 1
76938: NEG
76939: PUSH
76940: EMPTY
76941: LIST
76942: LIST
76943: PUSH
76944: LD_INT 3
76946: PUSH
76947: LD_INT 2
76949: NEG
76950: PUSH
76951: EMPTY
76952: LIST
76953: LIST
76954: PUSH
76955: LD_INT 5
76957: PUSH
76958: LD_INT 2
76960: PUSH
76961: EMPTY
76962: LIST
76963: LIST
76964: PUSH
76965: EMPTY
76966: LIST
76967: LIST
76968: LIST
76969: LIST
76970: LIST
76971: LIST
76972: LIST
76973: LIST
76974: LIST
76975: LIST
76976: LIST
76977: LIST
76978: LIST
76979: LIST
76980: LIST
76981: LIST
76982: LIST
76983: LIST
76984: LIST
76985: LIST
76986: LIST
76987: LIST
76988: LIST
76989: LIST
76990: LIST
76991: LIST
76992: LIST
76993: LIST
76994: LIST
76995: LIST
76996: LIST
76997: LIST
76998: LIST
76999: LIST
77000: LIST
77001: LIST
77002: LIST
77003: LIST
77004: LIST
77005: LIST
77006: LIST
77007: LIST
77008: LIST
77009: LIST
77010: LIST
77011: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
77012: LD_ADDR_VAR 0 32
77016: PUSH
77017: LD_INT 4
77019: NEG
77020: PUSH
77021: LD_INT 0
77023: PUSH
77024: EMPTY
77025: LIST
77026: LIST
77027: PUSH
77028: LD_INT 4
77030: NEG
77031: PUSH
77032: LD_INT 1
77034: NEG
77035: PUSH
77036: EMPTY
77037: LIST
77038: LIST
77039: PUSH
77040: LD_INT 3
77042: NEG
77043: PUSH
77044: LD_INT 0
77046: PUSH
77047: EMPTY
77048: LIST
77049: LIST
77050: PUSH
77051: LD_INT 3
77053: NEG
77054: PUSH
77055: LD_INT 1
77057: PUSH
77058: EMPTY
77059: LIST
77060: LIST
77061: PUSH
77062: LD_INT 4
77064: NEG
77065: PUSH
77066: LD_INT 1
77068: PUSH
77069: EMPTY
77070: LIST
77071: LIST
77072: PUSH
77073: LD_INT 5
77075: NEG
77076: PUSH
77077: LD_INT 0
77079: PUSH
77080: EMPTY
77081: LIST
77082: LIST
77083: PUSH
77084: LD_INT 5
77086: NEG
77087: PUSH
77088: LD_INT 1
77090: NEG
77091: PUSH
77092: EMPTY
77093: LIST
77094: LIST
77095: PUSH
77096: LD_INT 5
77098: NEG
77099: PUSH
77100: LD_INT 2
77102: NEG
77103: PUSH
77104: EMPTY
77105: LIST
77106: LIST
77107: PUSH
77108: LD_INT 3
77110: NEG
77111: PUSH
77112: LD_INT 2
77114: PUSH
77115: EMPTY
77116: LIST
77117: LIST
77118: PUSH
77119: LD_INT 3
77121: NEG
77122: PUSH
77123: LD_INT 3
77125: NEG
77126: PUSH
77127: EMPTY
77128: LIST
77129: LIST
77130: PUSH
77131: LD_INT 3
77133: NEG
77134: PUSH
77135: LD_INT 4
77137: NEG
77138: PUSH
77139: EMPTY
77140: LIST
77141: LIST
77142: PUSH
77143: LD_INT 2
77145: NEG
77146: PUSH
77147: LD_INT 3
77149: NEG
77150: PUSH
77151: EMPTY
77152: LIST
77153: LIST
77154: PUSH
77155: LD_INT 2
77157: NEG
77158: PUSH
77159: LD_INT 2
77161: NEG
77162: PUSH
77163: EMPTY
77164: LIST
77165: LIST
77166: PUSH
77167: LD_INT 3
77169: NEG
77170: PUSH
77171: LD_INT 2
77173: NEG
77174: PUSH
77175: EMPTY
77176: LIST
77177: LIST
77178: PUSH
77179: LD_INT 4
77181: NEG
77182: PUSH
77183: LD_INT 3
77185: NEG
77186: PUSH
77187: EMPTY
77188: LIST
77189: LIST
77190: PUSH
77191: LD_INT 4
77193: NEG
77194: PUSH
77195: LD_INT 4
77197: NEG
77198: PUSH
77199: EMPTY
77200: LIST
77201: LIST
77202: PUSH
77203: LD_INT 2
77205: NEG
77206: PUSH
77207: LD_INT 4
77209: NEG
77210: PUSH
77211: EMPTY
77212: LIST
77213: LIST
77214: PUSH
77215: LD_INT 4
77217: NEG
77218: PUSH
77219: LD_INT 2
77221: NEG
77222: PUSH
77223: EMPTY
77224: LIST
77225: LIST
77226: PUSH
77227: LD_INT 0
77229: PUSH
77230: LD_INT 4
77232: NEG
77233: PUSH
77234: EMPTY
77235: LIST
77236: LIST
77237: PUSH
77238: LD_INT 0
77240: PUSH
77241: LD_INT 5
77243: NEG
77244: PUSH
77245: EMPTY
77246: LIST
77247: LIST
77248: PUSH
77249: LD_INT 1
77251: PUSH
77252: LD_INT 4
77254: NEG
77255: PUSH
77256: EMPTY
77257: LIST
77258: LIST
77259: PUSH
77260: LD_INT 1
77262: PUSH
77263: LD_INT 3
77265: NEG
77266: PUSH
77267: EMPTY
77268: LIST
77269: LIST
77270: PUSH
77271: LD_INT 0
77273: PUSH
77274: LD_INT 3
77276: NEG
77277: PUSH
77278: EMPTY
77279: LIST
77280: LIST
77281: PUSH
77282: LD_INT 1
77284: NEG
77285: PUSH
77286: LD_INT 4
77288: NEG
77289: PUSH
77290: EMPTY
77291: LIST
77292: LIST
77293: PUSH
77294: LD_INT 1
77296: NEG
77297: PUSH
77298: LD_INT 5
77300: NEG
77301: PUSH
77302: EMPTY
77303: LIST
77304: LIST
77305: PUSH
77306: LD_INT 2
77308: PUSH
77309: LD_INT 3
77311: NEG
77312: PUSH
77313: EMPTY
77314: LIST
77315: LIST
77316: PUSH
77317: LD_INT 2
77319: NEG
77320: PUSH
77321: LD_INT 5
77323: NEG
77324: PUSH
77325: EMPTY
77326: LIST
77327: LIST
77328: PUSH
77329: LD_INT 3
77331: PUSH
77332: LD_INT 0
77334: PUSH
77335: EMPTY
77336: LIST
77337: LIST
77338: PUSH
77339: LD_INT 3
77341: PUSH
77342: LD_INT 1
77344: NEG
77345: PUSH
77346: EMPTY
77347: LIST
77348: LIST
77349: PUSH
77350: LD_INT 4
77352: PUSH
77353: LD_INT 0
77355: PUSH
77356: EMPTY
77357: LIST
77358: LIST
77359: PUSH
77360: LD_INT 4
77362: PUSH
77363: LD_INT 1
77365: PUSH
77366: EMPTY
77367: LIST
77368: LIST
77369: PUSH
77370: LD_INT 3
77372: PUSH
77373: LD_INT 1
77375: PUSH
77376: EMPTY
77377: LIST
77378: LIST
77379: PUSH
77380: LD_INT 2
77382: PUSH
77383: LD_INT 0
77385: PUSH
77386: EMPTY
77387: LIST
77388: LIST
77389: PUSH
77390: LD_INT 2
77392: PUSH
77393: LD_INT 1
77395: NEG
77396: PUSH
77397: EMPTY
77398: LIST
77399: LIST
77400: PUSH
77401: LD_INT 2
77403: PUSH
77404: LD_INT 2
77406: NEG
77407: PUSH
77408: EMPTY
77409: LIST
77410: LIST
77411: PUSH
77412: LD_INT 4
77414: PUSH
77415: LD_INT 2
77417: PUSH
77418: EMPTY
77419: LIST
77420: LIST
77421: PUSH
77422: LD_INT 4
77424: PUSH
77425: LD_INT 4
77427: PUSH
77428: EMPTY
77429: LIST
77430: LIST
77431: PUSH
77432: LD_INT 4
77434: PUSH
77435: LD_INT 3
77437: PUSH
77438: EMPTY
77439: LIST
77440: LIST
77441: PUSH
77442: LD_INT 5
77444: PUSH
77445: LD_INT 4
77447: PUSH
77448: EMPTY
77449: LIST
77450: LIST
77451: PUSH
77452: LD_INT 5
77454: PUSH
77455: LD_INT 5
77457: PUSH
77458: EMPTY
77459: LIST
77460: LIST
77461: PUSH
77462: LD_INT 4
77464: PUSH
77465: LD_INT 5
77467: PUSH
77468: EMPTY
77469: LIST
77470: LIST
77471: PUSH
77472: LD_INT 3
77474: PUSH
77475: LD_INT 4
77477: PUSH
77478: EMPTY
77479: LIST
77480: LIST
77481: PUSH
77482: LD_INT 3
77484: PUSH
77485: LD_INT 3
77487: PUSH
77488: EMPTY
77489: LIST
77490: LIST
77491: PUSH
77492: LD_INT 5
77494: PUSH
77495: LD_INT 3
77497: PUSH
77498: EMPTY
77499: LIST
77500: LIST
77501: PUSH
77502: LD_INT 3
77504: PUSH
77505: LD_INT 5
77507: PUSH
77508: EMPTY
77509: LIST
77510: LIST
77511: PUSH
77512: EMPTY
77513: LIST
77514: LIST
77515: LIST
77516: LIST
77517: LIST
77518: LIST
77519: LIST
77520: LIST
77521: LIST
77522: LIST
77523: LIST
77524: LIST
77525: LIST
77526: LIST
77527: LIST
77528: LIST
77529: LIST
77530: LIST
77531: LIST
77532: LIST
77533: LIST
77534: LIST
77535: LIST
77536: LIST
77537: LIST
77538: LIST
77539: LIST
77540: LIST
77541: LIST
77542: LIST
77543: LIST
77544: LIST
77545: LIST
77546: LIST
77547: LIST
77548: LIST
77549: LIST
77550: LIST
77551: LIST
77552: LIST
77553: LIST
77554: LIST
77555: LIST
77556: LIST
77557: LIST
77558: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
77559: LD_ADDR_VAR 0 33
77563: PUSH
77564: LD_INT 4
77566: NEG
77567: PUSH
77568: LD_INT 4
77570: NEG
77571: PUSH
77572: EMPTY
77573: LIST
77574: LIST
77575: PUSH
77576: LD_INT 4
77578: NEG
77579: PUSH
77580: LD_INT 5
77582: NEG
77583: PUSH
77584: EMPTY
77585: LIST
77586: LIST
77587: PUSH
77588: LD_INT 3
77590: NEG
77591: PUSH
77592: LD_INT 4
77594: NEG
77595: PUSH
77596: EMPTY
77597: LIST
77598: LIST
77599: PUSH
77600: LD_INT 3
77602: NEG
77603: PUSH
77604: LD_INT 3
77606: NEG
77607: PUSH
77608: EMPTY
77609: LIST
77610: LIST
77611: PUSH
77612: LD_INT 4
77614: NEG
77615: PUSH
77616: LD_INT 3
77618: NEG
77619: PUSH
77620: EMPTY
77621: LIST
77622: LIST
77623: PUSH
77624: LD_INT 5
77626: NEG
77627: PUSH
77628: LD_INT 4
77630: NEG
77631: PUSH
77632: EMPTY
77633: LIST
77634: LIST
77635: PUSH
77636: LD_INT 5
77638: NEG
77639: PUSH
77640: LD_INT 5
77642: NEG
77643: PUSH
77644: EMPTY
77645: LIST
77646: LIST
77647: PUSH
77648: LD_INT 3
77650: NEG
77651: PUSH
77652: LD_INT 5
77654: NEG
77655: PUSH
77656: EMPTY
77657: LIST
77658: LIST
77659: PUSH
77660: LD_INT 5
77662: NEG
77663: PUSH
77664: LD_INT 3
77666: NEG
77667: PUSH
77668: EMPTY
77669: LIST
77670: LIST
77671: PUSH
77672: LD_INT 0
77674: PUSH
77675: LD_INT 3
77677: NEG
77678: PUSH
77679: EMPTY
77680: LIST
77681: LIST
77682: PUSH
77683: LD_INT 0
77685: PUSH
77686: LD_INT 4
77688: NEG
77689: PUSH
77690: EMPTY
77691: LIST
77692: LIST
77693: PUSH
77694: LD_INT 1
77696: PUSH
77697: LD_INT 3
77699: NEG
77700: PUSH
77701: EMPTY
77702: LIST
77703: LIST
77704: PUSH
77705: LD_INT 1
77707: PUSH
77708: LD_INT 2
77710: NEG
77711: PUSH
77712: EMPTY
77713: LIST
77714: LIST
77715: PUSH
77716: LD_INT 0
77718: PUSH
77719: LD_INT 2
77721: NEG
77722: PUSH
77723: EMPTY
77724: LIST
77725: LIST
77726: PUSH
77727: LD_INT 1
77729: NEG
77730: PUSH
77731: LD_INT 3
77733: NEG
77734: PUSH
77735: EMPTY
77736: LIST
77737: LIST
77738: PUSH
77739: LD_INT 1
77741: NEG
77742: PUSH
77743: LD_INT 4
77745: NEG
77746: PUSH
77747: EMPTY
77748: LIST
77749: LIST
77750: PUSH
77751: LD_INT 2
77753: PUSH
77754: LD_INT 2
77756: NEG
77757: PUSH
77758: EMPTY
77759: LIST
77760: LIST
77761: PUSH
77762: LD_INT 2
77764: NEG
77765: PUSH
77766: LD_INT 4
77768: NEG
77769: PUSH
77770: EMPTY
77771: LIST
77772: LIST
77773: PUSH
77774: LD_INT 4
77776: PUSH
77777: LD_INT 0
77779: PUSH
77780: EMPTY
77781: LIST
77782: LIST
77783: PUSH
77784: LD_INT 4
77786: PUSH
77787: LD_INT 1
77789: NEG
77790: PUSH
77791: EMPTY
77792: LIST
77793: LIST
77794: PUSH
77795: LD_INT 5
77797: PUSH
77798: LD_INT 0
77800: PUSH
77801: EMPTY
77802: LIST
77803: LIST
77804: PUSH
77805: LD_INT 5
77807: PUSH
77808: LD_INT 1
77810: PUSH
77811: EMPTY
77812: LIST
77813: LIST
77814: PUSH
77815: LD_INT 4
77817: PUSH
77818: LD_INT 1
77820: PUSH
77821: EMPTY
77822: LIST
77823: LIST
77824: PUSH
77825: LD_INT 3
77827: PUSH
77828: LD_INT 0
77830: PUSH
77831: EMPTY
77832: LIST
77833: LIST
77834: PUSH
77835: LD_INT 3
77837: PUSH
77838: LD_INT 1
77840: NEG
77841: PUSH
77842: EMPTY
77843: LIST
77844: LIST
77845: PUSH
77846: LD_INT 3
77848: PUSH
77849: LD_INT 2
77851: NEG
77852: PUSH
77853: EMPTY
77854: LIST
77855: LIST
77856: PUSH
77857: LD_INT 5
77859: PUSH
77860: LD_INT 2
77862: PUSH
77863: EMPTY
77864: LIST
77865: LIST
77866: PUSH
77867: LD_INT 3
77869: PUSH
77870: LD_INT 3
77872: PUSH
77873: EMPTY
77874: LIST
77875: LIST
77876: PUSH
77877: LD_INT 3
77879: PUSH
77880: LD_INT 2
77882: PUSH
77883: EMPTY
77884: LIST
77885: LIST
77886: PUSH
77887: LD_INT 4
77889: PUSH
77890: LD_INT 3
77892: PUSH
77893: EMPTY
77894: LIST
77895: LIST
77896: PUSH
77897: LD_INT 4
77899: PUSH
77900: LD_INT 4
77902: PUSH
77903: EMPTY
77904: LIST
77905: LIST
77906: PUSH
77907: LD_INT 3
77909: PUSH
77910: LD_INT 4
77912: PUSH
77913: EMPTY
77914: LIST
77915: LIST
77916: PUSH
77917: LD_INT 2
77919: PUSH
77920: LD_INT 3
77922: PUSH
77923: EMPTY
77924: LIST
77925: LIST
77926: PUSH
77927: LD_INT 2
77929: PUSH
77930: LD_INT 2
77932: PUSH
77933: EMPTY
77934: LIST
77935: LIST
77936: PUSH
77937: LD_INT 4
77939: PUSH
77940: LD_INT 2
77942: PUSH
77943: EMPTY
77944: LIST
77945: LIST
77946: PUSH
77947: LD_INT 2
77949: PUSH
77950: LD_INT 4
77952: PUSH
77953: EMPTY
77954: LIST
77955: LIST
77956: PUSH
77957: LD_INT 0
77959: PUSH
77960: LD_INT 4
77962: PUSH
77963: EMPTY
77964: LIST
77965: LIST
77966: PUSH
77967: LD_INT 0
77969: PUSH
77970: LD_INT 3
77972: PUSH
77973: EMPTY
77974: LIST
77975: LIST
77976: PUSH
77977: LD_INT 1
77979: PUSH
77980: LD_INT 4
77982: PUSH
77983: EMPTY
77984: LIST
77985: LIST
77986: PUSH
77987: LD_INT 1
77989: PUSH
77990: LD_INT 5
77992: PUSH
77993: EMPTY
77994: LIST
77995: LIST
77996: PUSH
77997: LD_INT 0
77999: PUSH
78000: LD_INT 5
78002: PUSH
78003: EMPTY
78004: LIST
78005: LIST
78006: PUSH
78007: LD_INT 1
78009: NEG
78010: PUSH
78011: LD_INT 4
78013: PUSH
78014: EMPTY
78015: LIST
78016: LIST
78017: PUSH
78018: LD_INT 1
78020: NEG
78021: PUSH
78022: LD_INT 3
78024: PUSH
78025: EMPTY
78026: LIST
78027: LIST
78028: PUSH
78029: LD_INT 2
78031: PUSH
78032: LD_INT 5
78034: PUSH
78035: EMPTY
78036: LIST
78037: LIST
78038: PUSH
78039: LD_INT 2
78041: NEG
78042: PUSH
78043: LD_INT 3
78045: PUSH
78046: EMPTY
78047: LIST
78048: LIST
78049: PUSH
78050: EMPTY
78051: LIST
78052: LIST
78053: LIST
78054: LIST
78055: LIST
78056: LIST
78057: LIST
78058: LIST
78059: LIST
78060: LIST
78061: LIST
78062: LIST
78063: LIST
78064: LIST
78065: LIST
78066: LIST
78067: LIST
78068: LIST
78069: LIST
78070: LIST
78071: LIST
78072: LIST
78073: LIST
78074: LIST
78075: LIST
78076: LIST
78077: LIST
78078: LIST
78079: LIST
78080: LIST
78081: LIST
78082: LIST
78083: LIST
78084: LIST
78085: LIST
78086: LIST
78087: LIST
78088: LIST
78089: LIST
78090: LIST
78091: LIST
78092: LIST
78093: LIST
78094: LIST
78095: LIST
78096: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
78097: LD_ADDR_VAR 0 34
78101: PUSH
78102: LD_INT 0
78104: PUSH
78105: LD_INT 4
78107: NEG
78108: PUSH
78109: EMPTY
78110: LIST
78111: LIST
78112: PUSH
78113: LD_INT 0
78115: PUSH
78116: LD_INT 5
78118: NEG
78119: PUSH
78120: EMPTY
78121: LIST
78122: LIST
78123: PUSH
78124: LD_INT 1
78126: PUSH
78127: LD_INT 4
78129: NEG
78130: PUSH
78131: EMPTY
78132: LIST
78133: LIST
78134: PUSH
78135: LD_INT 1
78137: PUSH
78138: LD_INT 3
78140: NEG
78141: PUSH
78142: EMPTY
78143: LIST
78144: LIST
78145: PUSH
78146: LD_INT 0
78148: PUSH
78149: LD_INT 3
78151: NEG
78152: PUSH
78153: EMPTY
78154: LIST
78155: LIST
78156: PUSH
78157: LD_INT 1
78159: NEG
78160: PUSH
78161: LD_INT 4
78163: NEG
78164: PUSH
78165: EMPTY
78166: LIST
78167: LIST
78168: PUSH
78169: LD_INT 1
78171: NEG
78172: PUSH
78173: LD_INT 5
78175: NEG
78176: PUSH
78177: EMPTY
78178: LIST
78179: LIST
78180: PUSH
78181: LD_INT 2
78183: PUSH
78184: LD_INT 3
78186: NEG
78187: PUSH
78188: EMPTY
78189: LIST
78190: LIST
78191: PUSH
78192: LD_INT 2
78194: NEG
78195: PUSH
78196: LD_INT 5
78198: NEG
78199: PUSH
78200: EMPTY
78201: LIST
78202: LIST
78203: PUSH
78204: LD_INT 3
78206: PUSH
78207: LD_INT 0
78209: PUSH
78210: EMPTY
78211: LIST
78212: LIST
78213: PUSH
78214: LD_INT 3
78216: PUSH
78217: LD_INT 1
78219: NEG
78220: PUSH
78221: EMPTY
78222: LIST
78223: LIST
78224: PUSH
78225: LD_INT 4
78227: PUSH
78228: LD_INT 0
78230: PUSH
78231: EMPTY
78232: LIST
78233: LIST
78234: PUSH
78235: LD_INT 4
78237: PUSH
78238: LD_INT 1
78240: PUSH
78241: EMPTY
78242: LIST
78243: LIST
78244: PUSH
78245: LD_INT 3
78247: PUSH
78248: LD_INT 1
78250: PUSH
78251: EMPTY
78252: LIST
78253: LIST
78254: PUSH
78255: LD_INT 2
78257: PUSH
78258: LD_INT 0
78260: PUSH
78261: EMPTY
78262: LIST
78263: LIST
78264: PUSH
78265: LD_INT 2
78267: PUSH
78268: LD_INT 1
78270: NEG
78271: PUSH
78272: EMPTY
78273: LIST
78274: LIST
78275: PUSH
78276: LD_INT 2
78278: PUSH
78279: LD_INT 2
78281: NEG
78282: PUSH
78283: EMPTY
78284: LIST
78285: LIST
78286: PUSH
78287: LD_INT 4
78289: PUSH
78290: LD_INT 2
78292: PUSH
78293: EMPTY
78294: LIST
78295: LIST
78296: PUSH
78297: LD_INT 4
78299: PUSH
78300: LD_INT 4
78302: PUSH
78303: EMPTY
78304: LIST
78305: LIST
78306: PUSH
78307: LD_INT 4
78309: PUSH
78310: LD_INT 3
78312: PUSH
78313: EMPTY
78314: LIST
78315: LIST
78316: PUSH
78317: LD_INT 5
78319: PUSH
78320: LD_INT 4
78322: PUSH
78323: EMPTY
78324: LIST
78325: LIST
78326: PUSH
78327: LD_INT 5
78329: PUSH
78330: LD_INT 5
78332: PUSH
78333: EMPTY
78334: LIST
78335: LIST
78336: PUSH
78337: LD_INT 4
78339: PUSH
78340: LD_INT 5
78342: PUSH
78343: EMPTY
78344: LIST
78345: LIST
78346: PUSH
78347: LD_INT 3
78349: PUSH
78350: LD_INT 4
78352: PUSH
78353: EMPTY
78354: LIST
78355: LIST
78356: PUSH
78357: LD_INT 3
78359: PUSH
78360: LD_INT 3
78362: PUSH
78363: EMPTY
78364: LIST
78365: LIST
78366: PUSH
78367: LD_INT 5
78369: PUSH
78370: LD_INT 3
78372: PUSH
78373: EMPTY
78374: LIST
78375: LIST
78376: PUSH
78377: LD_INT 3
78379: PUSH
78380: LD_INT 5
78382: PUSH
78383: EMPTY
78384: LIST
78385: LIST
78386: PUSH
78387: LD_INT 0
78389: PUSH
78390: LD_INT 3
78392: PUSH
78393: EMPTY
78394: LIST
78395: LIST
78396: PUSH
78397: LD_INT 0
78399: PUSH
78400: LD_INT 2
78402: PUSH
78403: EMPTY
78404: LIST
78405: LIST
78406: PUSH
78407: LD_INT 1
78409: PUSH
78410: LD_INT 3
78412: PUSH
78413: EMPTY
78414: LIST
78415: LIST
78416: PUSH
78417: LD_INT 1
78419: PUSH
78420: LD_INT 4
78422: PUSH
78423: EMPTY
78424: LIST
78425: LIST
78426: PUSH
78427: LD_INT 0
78429: PUSH
78430: LD_INT 4
78432: PUSH
78433: EMPTY
78434: LIST
78435: LIST
78436: PUSH
78437: LD_INT 1
78439: NEG
78440: PUSH
78441: LD_INT 3
78443: PUSH
78444: EMPTY
78445: LIST
78446: LIST
78447: PUSH
78448: LD_INT 1
78450: NEG
78451: PUSH
78452: LD_INT 2
78454: PUSH
78455: EMPTY
78456: LIST
78457: LIST
78458: PUSH
78459: LD_INT 2
78461: PUSH
78462: LD_INT 4
78464: PUSH
78465: EMPTY
78466: LIST
78467: LIST
78468: PUSH
78469: LD_INT 2
78471: NEG
78472: PUSH
78473: LD_INT 2
78475: PUSH
78476: EMPTY
78477: LIST
78478: LIST
78479: PUSH
78480: LD_INT 4
78482: NEG
78483: PUSH
78484: LD_INT 0
78486: PUSH
78487: EMPTY
78488: LIST
78489: LIST
78490: PUSH
78491: LD_INT 4
78493: NEG
78494: PUSH
78495: LD_INT 1
78497: NEG
78498: PUSH
78499: EMPTY
78500: LIST
78501: LIST
78502: PUSH
78503: LD_INT 3
78505: NEG
78506: PUSH
78507: LD_INT 0
78509: PUSH
78510: EMPTY
78511: LIST
78512: LIST
78513: PUSH
78514: LD_INT 3
78516: NEG
78517: PUSH
78518: LD_INT 1
78520: PUSH
78521: EMPTY
78522: LIST
78523: LIST
78524: PUSH
78525: LD_INT 4
78527: NEG
78528: PUSH
78529: LD_INT 1
78531: PUSH
78532: EMPTY
78533: LIST
78534: LIST
78535: PUSH
78536: LD_INT 5
78538: NEG
78539: PUSH
78540: LD_INT 0
78542: PUSH
78543: EMPTY
78544: LIST
78545: LIST
78546: PUSH
78547: LD_INT 5
78549: NEG
78550: PUSH
78551: LD_INT 1
78553: NEG
78554: PUSH
78555: EMPTY
78556: LIST
78557: LIST
78558: PUSH
78559: LD_INT 5
78561: NEG
78562: PUSH
78563: LD_INT 2
78565: NEG
78566: PUSH
78567: EMPTY
78568: LIST
78569: LIST
78570: PUSH
78571: LD_INT 3
78573: NEG
78574: PUSH
78575: LD_INT 2
78577: PUSH
78578: EMPTY
78579: LIST
78580: LIST
78581: PUSH
78582: EMPTY
78583: LIST
78584: LIST
78585: LIST
78586: LIST
78587: LIST
78588: LIST
78589: LIST
78590: LIST
78591: LIST
78592: LIST
78593: LIST
78594: LIST
78595: LIST
78596: LIST
78597: LIST
78598: LIST
78599: LIST
78600: LIST
78601: LIST
78602: LIST
78603: LIST
78604: LIST
78605: LIST
78606: LIST
78607: LIST
78608: LIST
78609: LIST
78610: LIST
78611: LIST
78612: LIST
78613: LIST
78614: LIST
78615: LIST
78616: LIST
78617: LIST
78618: LIST
78619: LIST
78620: LIST
78621: LIST
78622: LIST
78623: LIST
78624: LIST
78625: LIST
78626: LIST
78627: LIST
78628: ST_TO_ADDR
// end ; end ;
78629: GO 78632
78631: POP
// case btype of b_depot , b_warehouse :
78632: LD_VAR 0 1
78636: PUSH
78637: LD_INT 0
78639: DOUBLE
78640: EQUAL
78641: IFTRUE 78651
78643: LD_INT 1
78645: DOUBLE
78646: EQUAL
78647: IFTRUE 78651
78649: GO 78852
78651: POP
// case nation of nation_american :
78652: LD_VAR 0 5
78656: PUSH
78657: LD_INT 1
78659: DOUBLE
78660: EQUAL
78661: IFTRUE 78665
78663: GO 78721
78665: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
78666: LD_ADDR_VAR 0 9
78670: PUSH
78671: LD_VAR 0 11
78675: PUSH
78676: LD_VAR 0 12
78680: PUSH
78681: LD_VAR 0 13
78685: PUSH
78686: LD_VAR 0 14
78690: PUSH
78691: LD_VAR 0 15
78695: PUSH
78696: LD_VAR 0 16
78700: PUSH
78701: EMPTY
78702: LIST
78703: LIST
78704: LIST
78705: LIST
78706: LIST
78707: LIST
78708: PUSH
78709: LD_VAR 0 4
78713: PUSH
78714: LD_INT 1
78716: PLUS
78717: ARRAY
78718: ST_TO_ADDR
78719: GO 78850
78721: LD_INT 2
78723: DOUBLE
78724: EQUAL
78725: IFTRUE 78729
78727: GO 78785
78729: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
78730: LD_ADDR_VAR 0 9
78734: PUSH
78735: LD_VAR 0 17
78739: PUSH
78740: LD_VAR 0 18
78744: PUSH
78745: LD_VAR 0 19
78749: PUSH
78750: LD_VAR 0 20
78754: PUSH
78755: LD_VAR 0 21
78759: PUSH
78760: LD_VAR 0 22
78764: PUSH
78765: EMPTY
78766: LIST
78767: LIST
78768: LIST
78769: LIST
78770: LIST
78771: LIST
78772: PUSH
78773: LD_VAR 0 4
78777: PUSH
78778: LD_INT 1
78780: PLUS
78781: ARRAY
78782: ST_TO_ADDR
78783: GO 78850
78785: LD_INT 3
78787: DOUBLE
78788: EQUAL
78789: IFTRUE 78793
78791: GO 78849
78793: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
78794: LD_ADDR_VAR 0 9
78798: PUSH
78799: LD_VAR 0 23
78803: PUSH
78804: LD_VAR 0 24
78808: PUSH
78809: LD_VAR 0 25
78813: PUSH
78814: LD_VAR 0 26
78818: PUSH
78819: LD_VAR 0 27
78823: PUSH
78824: LD_VAR 0 28
78828: PUSH
78829: EMPTY
78830: LIST
78831: LIST
78832: LIST
78833: LIST
78834: LIST
78835: LIST
78836: PUSH
78837: LD_VAR 0 4
78841: PUSH
78842: LD_INT 1
78844: PLUS
78845: ARRAY
78846: ST_TO_ADDR
78847: GO 78850
78849: POP
78850: GO 79405
78852: LD_INT 2
78854: DOUBLE
78855: EQUAL
78856: IFTRUE 78866
78858: LD_INT 3
78860: DOUBLE
78861: EQUAL
78862: IFTRUE 78866
78864: GO 78922
78866: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
78867: LD_ADDR_VAR 0 9
78871: PUSH
78872: LD_VAR 0 29
78876: PUSH
78877: LD_VAR 0 30
78881: PUSH
78882: LD_VAR 0 31
78886: PUSH
78887: LD_VAR 0 32
78891: PUSH
78892: LD_VAR 0 33
78896: PUSH
78897: LD_VAR 0 34
78901: PUSH
78902: EMPTY
78903: LIST
78904: LIST
78905: LIST
78906: LIST
78907: LIST
78908: LIST
78909: PUSH
78910: LD_VAR 0 4
78914: PUSH
78915: LD_INT 1
78917: PLUS
78918: ARRAY
78919: ST_TO_ADDR
78920: GO 79405
78922: LD_INT 16
78924: DOUBLE
78925: EQUAL
78926: IFTRUE 78984
78928: LD_INT 17
78930: DOUBLE
78931: EQUAL
78932: IFTRUE 78984
78934: LD_INT 18
78936: DOUBLE
78937: EQUAL
78938: IFTRUE 78984
78940: LD_INT 19
78942: DOUBLE
78943: EQUAL
78944: IFTRUE 78984
78946: LD_INT 22
78948: DOUBLE
78949: EQUAL
78950: IFTRUE 78984
78952: LD_INT 20
78954: DOUBLE
78955: EQUAL
78956: IFTRUE 78984
78958: LD_INT 21
78960: DOUBLE
78961: EQUAL
78962: IFTRUE 78984
78964: LD_INT 23
78966: DOUBLE
78967: EQUAL
78968: IFTRUE 78984
78970: LD_INT 24
78972: DOUBLE
78973: EQUAL
78974: IFTRUE 78984
78976: LD_INT 25
78978: DOUBLE
78979: EQUAL
78980: IFTRUE 78984
78982: GO 79040
78984: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
78985: LD_ADDR_VAR 0 9
78989: PUSH
78990: LD_VAR 0 35
78994: PUSH
78995: LD_VAR 0 36
78999: PUSH
79000: LD_VAR 0 37
79004: PUSH
79005: LD_VAR 0 38
79009: PUSH
79010: LD_VAR 0 39
79014: PUSH
79015: LD_VAR 0 40
79019: PUSH
79020: EMPTY
79021: LIST
79022: LIST
79023: LIST
79024: LIST
79025: LIST
79026: LIST
79027: PUSH
79028: LD_VAR 0 4
79032: PUSH
79033: LD_INT 1
79035: PLUS
79036: ARRAY
79037: ST_TO_ADDR
79038: GO 79405
79040: LD_INT 6
79042: DOUBLE
79043: EQUAL
79044: IFTRUE 79096
79046: LD_INT 7
79048: DOUBLE
79049: EQUAL
79050: IFTRUE 79096
79052: LD_INT 8
79054: DOUBLE
79055: EQUAL
79056: IFTRUE 79096
79058: LD_INT 13
79060: DOUBLE
79061: EQUAL
79062: IFTRUE 79096
79064: LD_INT 12
79066: DOUBLE
79067: EQUAL
79068: IFTRUE 79096
79070: LD_INT 15
79072: DOUBLE
79073: EQUAL
79074: IFTRUE 79096
79076: LD_INT 11
79078: DOUBLE
79079: EQUAL
79080: IFTRUE 79096
79082: LD_INT 14
79084: DOUBLE
79085: EQUAL
79086: IFTRUE 79096
79088: LD_INT 10
79090: DOUBLE
79091: EQUAL
79092: IFTRUE 79096
79094: GO 79152
79096: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
79097: LD_ADDR_VAR 0 9
79101: PUSH
79102: LD_VAR 0 41
79106: PUSH
79107: LD_VAR 0 42
79111: PUSH
79112: LD_VAR 0 43
79116: PUSH
79117: LD_VAR 0 44
79121: PUSH
79122: LD_VAR 0 45
79126: PUSH
79127: LD_VAR 0 46
79131: PUSH
79132: EMPTY
79133: LIST
79134: LIST
79135: LIST
79136: LIST
79137: LIST
79138: LIST
79139: PUSH
79140: LD_VAR 0 4
79144: PUSH
79145: LD_INT 1
79147: PLUS
79148: ARRAY
79149: ST_TO_ADDR
79150: GO 79405
79152: LD_INT 36
79154: DOUBLE
79155: EQUAL
79156: IFTRUE 79160
79158: GO 79216
79160: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
79161: LD_ADDR_VAR 0 9
79165: PUSH
79166: LD_VAR 0 47
79170: PUSH
79171: LD_VAR 0 48
79175: PUSH
79176: LD_VAR 0 49
79180: PUSH
79181: LD_VAR 0 50
79185: PUSH
79186: LD_VAR 0 51
79190: PUSH
79191: LD_VAR 0 52
79195: PUSH
79196: EMPTY
79197: LIST
79198: LIST
79199: LIST
79200: LIST
79201: LIST
79202: LIST
79203: PUSH
79204: LD_VAR 0 4
79208: PUSH
79209: LD_INT 1
79211: PLUS
79212: ARRAY
79213: ST_TO_ADDR
79214: GO 79405
79216: LD_INT 4
79218: DOUBLE
79219: EQUAL
79220: IFTRUE 79242
79222: LD_INT 5
79224: DOUBLE
79225: EQUAL
79226: IFTRUE 79242
79228: LD_INT 34
79230: DOUBLE
79231: EQUAL
79232: IFTRUE 79242
79234: LD_INT 37
79236: DOUBLE
79237: EQUAL
79238: IFTRUE 79242
79240: GO 79298
79242: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
79243: LD_ADDR_VAR 0 9
79247: PUSH
79248: LD_VAR 0 53
79252: PUSH
79253: LD_VAR 0 54
79257: PUSH
79258: LD_VAR 0 55
79262: PUSH
79263: LD_VAR 0 56
79267: PUSH
79268: LD_VAR 0 57
79272: PUSH
79273: LD_VAR 0 58
79277: PUSH
79278: EMPTY
79279: LIST
79280: LIST
79281: LIST
79282: LIST
79283: LIST
79284: LIST
79285: PUSH
79286: LD_VAR 0 4
79290: PUSH
79291: LD_INT 1
79293: PLUS
79294: ARRAY
79295: ST_TO_ADDR
79296: GO 79405
79298: LD_INT 31
79300: DOUBLE
79301: EQUAL
79302: IFTRUE 79348
79304: LD_INT 32
79306: DOUBLE
79307: EQUAL
79308: IFTRUE 79348
79310: LD_INT 33
79312: DOUBLE
79313: EQUAL
79314: IFTRUE 79348
79316: LD_INT 27
79318: DOUBLE
79319: EQUAL
79320: IFTRUE 79348
79322: LD_INT 26
79324: DOUBLE
79325: EQUAL
79326: IFTRUE 79348
79328: LD_INT 28
79330: DOUBLE
79331: EQUAL
79332: IFTRUE 79348
79334: LD_INT 29
79336: DOUBLE
79337: EQUAL
79338: IFTRUE 79348
79340: LD_INT 30
79342: DOUBLE
79343: EQUAL
79344: IFTRUE 79348
79346: GO 79404
79348: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
79349: LD_ADDR_VAR 0 9
79353: PUSH
79354: LD_VAR 0 59
79358: PUSH
79359: LD_VAR 0 60
79363: PUSH
79364: LD_VAR 0 61
79368: PUSH
79369: LD_VAR 0 62
79373: PUSH
79374: LD_VAR 0 63
79378: PUSH
79379: LD_VAR 0 64
79383: PUSH
79384: EMPTY
79385: LIST
79386: LIST
79387: LIST
79388: LIST
79389: LIST
79390: LIST
79391: PUSH
79392: LD_VAR 0 4
79396: PUSH
79397: LD_INT 1
79399: PLUS
79400: ARRAY
79401: ST_TO_ADDR
79402: GO 79405
79404: POP
// temp_list2 = [ ] ;
79405: LD_ADDR_VAR 0 10
79409: PUSH
79410: EMPTY
79411: ST_TO_ADDR
// for i in temp_list do
79412: LD_ADDR_VAR 0 8
79416: PUSH
79417: LD_VAR 0 9
79421: PUSH
79422: FOR_IN
79423: IFFALSE 79475
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
79425: LD_ADDR_VAR 0 10
79429: PUSH
79430: LD_VAR 0 10
79434: PUSH
79435: LD_VAR 0 8
79439: PUSH
79440: LD_INT 1
79442: ARRAY
79443: PUSH
79444: LD_VAR 0 2
79448: PLUS
79449: PUSH
79450: LD_VAR 0 8
79454: PUSH
79455: LD_INT 2
79457: ARRAY
79458: PUSH
79459: LD_VAR 0 3
79463: PLUS
79464: PUSH
79465: EMPTY
79466: LIST
79467: LIST
79468: PUSH
79469: EMPTY
79470: LIST
79471: ADD
79472: ST_TO_ADDR
79473: GO 79422
79475: POP
79476: POP
// result = temp_list2 ;
79477: LD_ADDR_VAR 0 7
79481: PUSH
79482: LD_VAR 0 10
79486: ST_TO_ADDR
// end ;
79487: LD_VAR 0 7
79491: RET
// export function EnemyInRange ( unit , dist ) ; begin
79492: LD_INT 0
79494: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
79495: LD_ADDR_VAR 0 3
79499: PUSH
79500: LD_VAR 0 1
79504: PPUSH
79505: CALL_OW 255
79509: PPUSH
79510: LD_VAR 0 1
79514: PPUSH
79515: CALL_OW 250
79519: PPUSH
79520: LD_VAR 0 1
79524: PPUSH
79525: CALL_OW 251
79529: PPUSH
79530: LD_VAR 0 2
79534: PPUSH
79535: CALL 52888 0 4
79539: PUSH
79540: LD_INT 4
79542: ARRAY
79543: ST_TO_ADDR
// end ;
79544: LD_VAR 0 3
79548: RET
// export function PlayerSeeMe ( unit ) ; begin
79549: LD_INT 0
79551: PPUSH
// result := See ( your_side , unit ) ;
79552: LD_ADDR_VAR 0 2
79556: PUSH
79557: LD_OWVAR 2
79561: PPUSH
79562: LD_VAR 0 1
79566: PPUSH
79567: CALL_OW 292
79571: ST_TO_ADDR
// end ;
79572: LD_VAR 0 2
79576: RET
// export function ReverseDir ( unit ) ; begin
79577: LD_INT 0
79579: PPUSH
// if not unit then
79580: LD_VAR 0 1
79584: NOT
79585: IFFALSE 79589
// exit ;
79587: GO 79612
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
79589: LD_ADDR_VAR 0 2
79593: PUSH
79594: LD_VAR 0 1
79598: PPUSH
79599: CALL_OW 254
79603: PUSH
79604: LD_INT 3
79606: PLUS
79607: PUSH
79608: LD_INT 6
79610: MOD
79611: ST_TO_ADDR
// end ;
79612: LD_VAR 0 2
79616: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
79617: LD_INT 0
79619: PPUSH
79620: PPUSH
79621: PPUSH
79622: PPUSH
79623: PPUSH
// if not hexes then
79624: LD_VAR 0 2
79628: NOT
79629: IFFALSE 79633
// exit ;
79631: GO 79781
// dist := 9999 ;
79633: LD_ADDR_VAR 0 5
79637: PUSH
79638: LD_INT 9999
79640: ST_TO_ADDR
// for i = 1 to hexes do
79641: LD_ADDR_VAR 0 4
79645: PUSH
79646: DOUBLE
79647: LD_INT 1
79649: DEC
79650: ST_TO_ADDR
79651: LD_VAR 0 2
79655: PUSH
79656: FOR_TO
79657: IFFALSE 79769
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
79659: LD_VAR 0 1
79663: PPUSH
79664: LD_VAR 0 2
79668: PUSH
79669: LD_VAR 0 4
79673: ARRAY
79674: PUSH
79675: LD_INT 1
79677: ARRAY
79678: PPUSH
79679: LD_VAR 0 2
79683: PUSH
79684: LD_VAR 0 4
79688: ARRAY
79689: PUSH
79690: LD_INT 2
79692: ARRAY
79693: PPUSH
79694: CALL_OW 297
79698: PUSH
79699: LD_VAR 0 5
79703: LESS
79704: IFFALSE 79767
// begin hex := hexes [ i ] ;
79706: LD_ADDR_VAR 0 7
79710: PUSH
79711: LD_VAR 0 2
79715: PUSH
79716: LD_VAR 0 4
79720: ARRAY
79721: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
79722: LD_ADDR_VAR 0 5
79726: PUSH
79727: LD_VAR 0 1
79731: PPUSH
79732: LD_VAR 0 2
79736: PUSH
79737: LD_VAR 0 4
79741: ARRAY
79742: PUSH
79743: LD_INT 1
79745: ARRAY
79746: PPUSH
79747: LD_VAR 0 2
79751: PUSH
79752: LD_VAR 0 4
79756: ARRAY
79757: PUSH
79758: LD_INT 2
79760: ARRAY
79761: PPUSH
79762: CALL_OW 297
79766: ST_TO_ADDR
// end ; end ;
79767: GO 79656
79769: POP
79770: POP
// result := hex ;
79771: LD_ADDR_VAR 0 3
79775: PUSH
79776: LD_VAR 0 7
79780: ST_TO_ADDR
// end ;
79781: LD_VAR 0 3
79785: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
79786: LD_INT 0
79788: PPUSH
79789: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
79790: LD_VAR 0 1
79794: NOT
79795: PUSH
79796: LD_VAR 0 1
79800: PUSH
79801: LD_INT 21
79803: PUSH
79804: LD_INT 2
79806: PUSH
79807: EMPTY
79808: LIST
79809: LIST
79810: PUSH
79811: LD_INT 23
79813: PUSH
79814: LD_INT 2
79816: PUSH
79817: EMPTY
79818: LIST
79819: LIST
79820: PUSH
79821: EMPTY
79822: LIST
79823: LIST
79824: PPUSH
79825: CALL_OW 69
79829: IN
79830: NOT
79831: OR
79832: IFFALSE 79836
// exit ;
79834: GO 79883
// for i = 1 to 3 do
79836: LD_ADDR_VAR 0 3
79840: PUSH
79841: DOUBLE
79842: LD_INT 1
79844: DEC
79845: ST_TO_ADDR
79846: LD_INT 3
79848: PUSH
79849: FOR_TO
79850: IFFALSE 79881
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
79852: LD_VAR 0 1
79856: PPUSH
79857: CALL_OW 250
79861: PPUSH
79862: LD_VAR 0 1
79866: PPUSH
79867: CALL_OW 251
79871: PPUSH
79872: LD_INT 1
79874: PPUSH
79875: CALL_OW 453
79879: GO 79849
79881: POP
79882: POP
// end ;
79883: LD_VAR 0 2
79887: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
79888: LD_INT 0
79890: PPUSH
79891: PPUSH
79892: PPUSH
79893: PPUSH
79894: PPUSH
79895: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
79896: LD_VAR 0 1
79900: NOT
79901: PUSH
79902: LD_VAR 0 2
79906: NOT
79907: OR
79908: PUSH
79909: LD_VAR 0 1
79913: PPUSH
79914: CALL_OW 314
79918: OR
79919: IFFALSE 79923
// exit ;
79921: GO 80364
// x := GetX ( enemy_unit ) ;
79923: LD_ADDR_VAR 0 7
79927: PUSH
79928: LD_VAR 0 2
79932: PPUSH
79933: CALL_OW 250
79937: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
79938: LD_ADDR_VAR 0 8
79942: PUSH
79943: LD_VAR 0 2
79947: PPUSH
79948: CALL_OW 251
79952: ST_TO_ADDR
// if not x or not y then
79953: LD_VAR 0 7
79957: NOT
79958: PUSH
79959: LD_VAR 0 8
79963: NOT
79964: OR
79965: IFFALSE 79969
// exit ;
79967: GO 80364
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
79969: LD_ADDR_VAR 0 6
79973: PUSH
79974: LD_VAR 0 7
79978: PPUSH
79979: LD_INT 0
79981: PPUSH
79982: LD_INT 4
79984: PPUSH
79985: CALL_OW 272
79989: PUSH
79990: LD_VAR 0 8
79994: PPUSH
79995: LD_INT 0
79997: PPUSH
79998: LD_INT 4
80000: PPUSH
80001: CALL_OW 273
80005: PUSH
80006: EMPTY
80007: LIST
80008: LIST
80009: PUSH
80010: LD_VAR 0 7
80014: PPUSH
80015: LD_INT 1
80017: PPUSH
80018: LD_INT 4
80020: PPUSH
80021: CALL_OW 272
80025: PUSH
80026: LD_VAR 0 8
80030: PPUSH
80031: LD_INT 1
80033: PPUSH
80034: LD_INT 4
80036: PPUSH
80037: CALL_OW 273
80041: PUSH
80042: EMPTY
80043: LIST
80044: LIST
80045: PUSH
80046: LD_VAR 0 7
80050: PPUSH
80051: LD_INT 2
80053: PPUSH
80054: LD_INT 4
80056: PPUSH
80057: CALL_OW 272
80061: PUSH
80062: LD_VAR 0 8
80066: PPUSH
80067: LD_INT 2
80069: PPUSH
80070: LD_INT 4
80072: PPUSH
80073: CALL_OW 273
80077: PUSH
80078: EMPTY
80079: LIST
80080: LIST
80081: PUSH
80082: LD_VAR 0 7
80086: PPUSH
80087: LD_INT 3
80089: PPUSH
80090: LD_INT 4
80092: PPUSH
80093: CALL_OW 272
80097: PUSH
80098: LD_VAR 0 8
80102: PPUSH
80103: LD_INT 3
80105: PPUSH
80106: LD_INT 4
80108: PPUSH
80109: CALL_OW 273
80113: PUSH
80114: EMPTY
80115: LIST
80116: LIST
80117: PUSH
80118: LD_VAR 0 7
80122: PPUSH
80123: LD_INT 4
80125: PPUSH
80126: LD_INT 4
80128: PPUSH
80129: CALL_OW 272
80133: PUSH
80134: LD_VAR 0 8
80138: PPUSH
80139: LD_INT 4
80141: PPUSH
80142: LD_INT 4
80144: PPUSH
80145: CALL_OW 273
80149: PUSH
80150: EMPTY
80151: LIST
80152: LIST
80153: PUSH
80154: LD_VAR 0 7
80158: PPUSH
80159: LD_INT 5
80161: PPUSH
80162: LD_INT 4
80164: PPUSH
80165: CALL_OW 272
80169: PUSH
80170: LD_VAR 0 8
80174: PPUSH
80175: LD_INT 5
80177: PPUSH
80178: LD_INT 4
80180: PPUSH
80181: CALL_OW 273
80185: PUSH
80186: EMPTY
80187: LIST
80188: LIST
80189: PUSH
80190: EMPTY
80191: LIST
80192: LIST
80193: LIST
80194: LIST
80195: LIST
80196: LIST
80197: ST_TO_ADDR
// for i = tmp downto 1 do
80198: LD_ADDR_VAR 0 4
80202: PUSH
80203: DOUBLE
80204: LD_VAR 0 6
80208: INC
80209: ST_TO_ADDR
80210: LD_INT 1
80212: PUSH
80213: FOR_DOWNTO
80214: IFFALSE 80315
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
80216: LD_VAR 0 6
80220: PUSH
80221: LD_VAR 0 4
80225: ARRAY
80226: PUSH
80227: LD_INT 1
80229: ARRAY
80230: PPUSH
80231: LD_VAR 0 6
80235: PUSH
80236: LD_VAR 0 4
80240: ARRAY
80241: PUSH
80242: LD_INT 2
80244: ARRAY
80245: PPUSH
80246: CALL_OW 488
80250: NOT
80251: PUSH
80252: LD_VAR 0 6
80256: PUSH
80257: LD_VAR 0 4
80261: ARRAY
80262: PUSH
80263: LD_INT 1
80265: ARRAY
80266: PPUSH
80267: LD_VAR 0 6
80271: PUSH
80272: LD_VAR 0 4
80276: ARRAY
80277: PUSH
80278: LD_INT 2
80280: ARRAY
80281: PPUSH
80282: CALL_OW 428
80286: PUSH
80287: LD_INT 0
80289: NONEQUAL
80290: OR
80291: IFFALSE 80313
// tmp := Delete ( tmp , i ) ;
80293: LD_ADDR_VAR 0 6
80297: PUSH
80298: LD_VAR 0 6
80302: PPUSH
80303: LD_VAR 0 4
80307: PPUSH
80308: CALL_OW 3
80312: ST_TO_ADDR
80313: GO 80213
80315: POP
80316: POP
// j := GetClosestHex ( unit , tmp ) ;
80317: LD_ADDR_VAR 0 5
80321: PUSH
80322: LD_VAR 0 1
80326: PPUSH
80327: LD_VAR 0 6
80331: PPUSH
80332: CALL 79617 0 2
80336: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
80337: LD_VAR 0 1
80341: PPUSH
80342: LD_VAR 0 5
80346: PUSH
80347: LD_INT 1
80349: ARRAY
80350: PPUSH
80351: LD_VAR 0 5
80355: PUSH
80356: LD_INT 2
80358: ARRAY
80359: PPUSH
80360: CALL_OW 111
// end ;
80364: LD_VAR 0 3
80368: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
80369: LD_INT 0
80371: PPUSH
80372: PPUSH
80373: PPUSH
// uc_side = 0 ;
80374: LD_ADDR_OWVAR 20
80378: PUSH
80379: LD_INT 0
80381: ST_TO_ADDR
// uc_nation = 0 ;
80382: LD_ADDR_OWVAR 21
80386: PUSH
80387: LD_INT 0
80389: ST_TO_ADDR
// InitHc_All ( ) ;
80390: CALL_OW 584
// InitVc ;
80394: CALL_OW 20
// if mastodonts then
80398: LD_VAR 0 6
80402: IFFALSE 80469
// for i = 1 to mastodonts do
80404: LD_ADDR_VAR 0 11
80408: PUSH
80409: DOUBLE
80410: LD_INT 1
80412: DEC
80413: ST_TO_ADDR
80414: LD_VAR 0 6
80418: PUSH
80419: FOR_TO
80420: IFFALSE 80467
// begin vc_chassis := 31 ;
80422: LD_ADDR_OWVAR 37
80426: PUSH
80427: LD_INT 31
80429: ST_TO_ADDR
// vc_control := control_rider ;
80430: LD_ADDR_OWVAR 38
80434: PUSH
80435: LD_INT 4
80437: ST_TO_ADDR
// animal := CreateVehicle ;
80438: LD_ADDR_VAR 0 12
80442: PUSH
80443: CALL_OW 45
80447: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80448: LD_VAR 0 12
80452: PPUSH
80453: LD_VAR 0 8
80457: PPUSH
80458: LD_INT 0
80460: PPUSH
80461: CALL 82657 0 3
// end ;
80465: GO 80419
80467: POP
80468: POP
// if horses then
80469: LD_VAR 0 5
80473: IFFALSE 80540
// for i = 1 to horses do
80475: LD_ADDR_VAR 0 11
80479: PUSH
80480: DOUBLE
80481: LD_INT 1
80483: DEC
80484: ST_TO_ADDR
80485: LD_VAR 0 5
80489: PUSH
80490: FOR_TO
80491: IFFALSE 80538
// begin hc_class := 21 ;
80493: LD_ADDR_OWVAR 28
80497: PUSH
80498: LD_INT 21
80500: ST_TO_ADDR
// hc_gallery :=  ;
80501: LD_ADDR_OWVAR 33
80505: PUSH
80506: LD_STRING 
80508: ST_TO_ADDR
// animal := CreateHuman ;
80509: LD_ADDR_VAR 0 12
80513: PUSH
80514: CALL_OW 44
80518: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80519: LD_VAR 0 12
80523: PPUSH
80524: LD_VAR 0 8
80528: PPUSH
80529: LD_INT 0
80531: PPUSH
80532: CALL 82657 0 3
// end ;
80536: GO 80490
80538: POP
80539: POP
// if birds then
80540: LD_VAR 0 1
80544: IFFALSE 80611
// for i = 1 to birds do
80546: LD_ADDR_VAR 0 11
80550: PUSH
80551: DOUBLE
80552: LD_INT 1
80554: DEC
80555: ST_TO_ADDR
80556: LD_VAR 0 1
80560: PUSH
80561: FOR_TO
80562: IFFALSE 80609
// begin hc_class = 18 ;
80564: LD_ADDR_OWVAR 28
80568: PUSH
80569: LD_INT 18
80571: ST_TO_ADDR
// hc_gallery =  ;
80572: LD_ADDR_OWVAR 33
80576: PUSH
80577: LD_STRING 
80579: ST_TO_ADDR
// animal := CreateHuman ;
80580: LD_ADDR_VAR 0 12
80584: PUSH
80585: CALL_OW 44
80589: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80590: LD_VAR 0 12
80594: PPUSH
80595: LD_VAR 0 8
80599: PPUSH
80600: LD_INT 0
80602: PPUSH
80603: CALL 82657 0 3
// end ;
80607: GO 80561
80609: POP
80610: POP
// if tigers then
80611: LD_VAR 0 2
80615: IFFALSE 80699
// for i = 1 to tigers do
80617: LD_ADDR_VAR 0 11
80621: PUSH
80622: DOUBLE
80623: LD_INT 1
80625: DEC
80626: ST_TO_ADDR
80627: LD_VAR 0 2
80631: PUSH
80632: FOR_TO
80633: IFFALSE 80697
// begin hc_class = class_tiger ;
80635: LD_ADDR_OWVAR 28
80639: PUSH
80640: LD_INT 14
80642: ST_TO_ADDR
// hc_gallery =  ;
80643: LD_ADDR_OWVAR 33
80647: PUSH
80648: LD_STRING 
80650: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
80651: LD_ADDR_OWVAR 35
80655: PUSH
80656: LD_INT 7
80658: NEG
80659: PPUSH
80660: LD_INT 7
80662: PPUSH
80663: CALL_OW 12
80667: ST_TO_ADDR
// animal := CreateHuman ;
80668: LD_ADDR_VAR 0 12
80672: PUSH
80673: CALL_OW 44
80677: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80678: LD_VAR 0 12
80682: PPUSH
80683: LD_VAR 0 8
80687: PPUSH
80688: LD_INT 0
80690: PPUSH
80691: CALL 82657 0 3
// end ;
80695: GO 80632
80697: POP
80698: POP
// if apemans then
80699: LD_VAR 0 3
80703: IFFALSE 80826
// for i = 1 to apemans do
80705: LD_ADDR_VAR 0 11
80709: PUSH
80710: DOUBLE
80711: LD_INT 1
80713: DEC
80714: ST_TO_ADDR
80715: LD_VAR 0 3
80719: PUSH
80720: FOR_TO
80721: IFFALSE 80824
// begin hc_class = class_apeman ;
80723: LD_ADDR_OWVAR 28
80727: PUSH
80728: LD_INT 12
80730: ST_TO_ADDR
// hc_gallery =  ;
80731: LD_ADDR_OWVAR 33
80735: PUSH
80736: LD_STRING 
80738: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
80739: LD_ADDR_OWVAR 35
80743: PUSH
80744: LD_INT 2
80746: NEG
80747: PPUSH
80748: LD_INT 2
80750: PPUSH
80751: CALL_OW 12
80755: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
80756: LD_ADDR_OWVAR 31
80760: PUSH
80761: LD_INT 1
80763: PPUSH
80764: LD_INT 3
80766: PPUSH
80767: CALL_OW 12
80771: PUSH
80772: LD_INT 1
80774: PPUSH
80775: LD_INT 3
80777: PPUSH
80778: CALL_OW 12
80782: PUSH
80783: LD_INT 0
80785: PUSH
80786: LD_INT 0
80788: PUSH
80789: EMPTY
80790: LIST
80791: LIST
80792: LIST
80793: LIST
80794: ST_TO_ADDR
// animal := CreateHuman ;
80795: LD_ADDR_VAR 0 12
80799: PUSH
80800: CALL_OW 44
80804: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80805: LD_VAR 0 12
80809: PPUSH
80810: LD_VAR 0 8
80814: PPUSH
80815: LD_INT 0
80817: PPUSH
80818: CALL 82657 0 3
// end ;
80822: GO 80720
80824: POP
80825: POP
// if enchidnas then
80826: LD_VAR 0 4
80830: IFFALSE 80897
// for i = 1 to enchidnas do
80832: LD_ADDR_VAR 0 11
80836: PUSH
80837: DOUBLE
80838: LD_INT 1
80840: DEC
80841: ST_TO_ADDR
80842: LD_VAR 0 4
80846: PUSH
80847: FOR_TO
80848: IFFALSE 80895
// begin hc_class = 13 ;
80850: LD_ADDR_OWVAR 28
80854: PUSH
80855: LD_INT 13
80857: ST_TO_ADDR
// hc_gallery =  ;
80858: LD_ADDR_OWVAR 33
80862: PUSH
80863: LD_STRING 
80865: ST_TO_ADDR
// animal := CreateHuman ;
80866: LD_ADDR_VAR 0 12
80870: PUSH
80871: CALL_OW 44
80875: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
80876: LD_VAR 0 12
80880: PPUSH
80881: LD_VAR 0 8
80885: PPUSH
80886: LD_INT 0
80888: PPUSH
80889: CALL 82657 0 3
// end ;
80893: GO 80847
80895: POP
80896: POP
// if fishes then
80897: LD_VAR 0 7
80901: IFFALSE 80968
// for i = 1 to fishes do
80903: LD_ADDR_VAR 0 11
80907: PUSH
80908: DOUBLE
80909: LD_INT 1
80911: DEC
80912: ST_TO_ADDR
80913: LD_VAR 0 7
80917: PUSH
80918: FOR_TO
80919: IFFALSE 80966
// begin hc_class = 20 ;
80921: LD_ADDR_OWVAR 28
80925: PUSH
80926: LD_INT 20
80928: ST_TO_ADDR
// hc_gallery =  ;
80929: LD_ADDR_OWVAR 33
80933: PUSH
80934: LD_STRING 
80936: ST_TO_ADDR
// animal := CreateHuman ;
80937: LD_ADDR_VAR 0 12
80941: PUSH
80942: CALL_OW 44
80946: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
80947: LD_VAR 0 12
80951: PPUSH
80952: LD_VAR 0 9
80956: PPUSH
80957: LD_INT 0
80959: PPUSH
80960: CALL 82657 0 3
// end ;
80964: GO 80918
80966: POP
80967: POP
// end ;
80968: LD_VAR 0 10
80972: RET
// export function WantHeal ( sci , unit ) ; begin
80973: LD_INT 0
80975: PPUSH
// if GetTaskList ( sci ) > 0 then
80976: LD_VAR 0 1
80980: PPUSH
80981: CALL_OW 437
80985: PUSH
80986: LD_INT 0
80988: GREATER
80989: IFFALSE 81059
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
80991: LD_VAR 0 1
80995: PPUSH
80996: CALL_OW 437
81000: PUSH
81001: LD_INT 1
81003: ARRAY
81004: PUSH
81005: LD_INT 1
81007: ARRAY
81008: PUSH
81009: LD_STRING l
81011: EQUAL
81012: PUSH
81013: LD_VAR 0 1
81017: PPUSH
81018: CALL_OW 437
81022: PUSH
81023: LD_INT 1
81025: ARRAY
81026: PUSH
81027: LD_INT 4
81029: ARRAY
81030: PUSH
81031: LD_VAR 0 2
81035: EQUAL
81036: AND
81037: IFFALSE 81049
// result := true else
81039: LD_ADDR_VAR 0 3
81043: PUSH
81044: LD_INT 1
81046: ST_TO_ADDR
81047: GO 81057
// result := false ;
81049: LD_ADDR_VAR 0 3
81053: PUSH
81054: LD_INT 0
81056: ST_TO_ADDR
// end else
81057: GO 81067
// result := false ;
81059: LD_ADDR_VAR 0 3
81063: PUSH
81064: LD_INT 0
81066: ST_TO_ADDR
// end ;
81067: LD_VAR 0 3
81071: RET
// export function HealTarget ( sci ) ; begin
81072: LD_INT 0
81074: PPUSH
// if not sci then
81075: LD_VAR 0 1
81079: NOT
81080: IFFALSE 81084
// exit ;
81082: GO 81149
// result := 0 ;
81084: LD_ADDR_VAR 0 2
81088: PUSH
81089: LD_INT 0
81091: ST_TO_ADDR
// if GetTaskList ( sci ) then
81092: LD_VAR 0 1
81096: PPUSH
81097: CALL_OW 437
81101: IFFALSE 81149
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
81103: LD_VAR 0 1
81107: PPUSH
81108: CALL_OW 437
81112: PUSH
81113: LD_INT 1
81115: ARRAY
81116: PUSH
81117: LD_INT 1
81119: ARRAY
81120: PUSH
81121: LD_STRING l
81123: EQUAL
81124: IFFALSE 81149
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
81126: LD_ADDR_VAR 0 2
81130: PUSH
81131: LD_VAR 0 1
81135: PPUSH
81136: CALL_OW 437
81140: PUSH
81141: LD_INT 1
81143: ARRAY
81144: PUSH
81145: LD_INT 4
81147: ARRAY
81148: ST_TO_ADDR
// end ;
81149: LD_VAR 0 2
81153: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
81154: LD_INT 0
81156: PPUSH
81157: PPUSH
81158: PPUSH
81159: PPUSH
// if not base_units then
81160: LD_VAR 0 1
81164: NOT
81165: IFFALSE 81169
// exit ;
81167: GO 81256
// result := false ;
81169: LD_ADDR_VAR 0 2
81173: PUSH
81174: LD_INT 0
81176: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
81177: LD_ADDR_VAR 0 5
81181: PUSH
81182: LD_VAR 0 1
81186: PPUSH
81187: LD_INT 21
81189: PUSH
81190: LD_INT 3
81192: PUSH
81193: EMPTY
81194: LIST
81195: LIST
81196: PPUSH
81197: CALL_OW 72
81201: ST_TO_ADDR
// if not tmp then
81202: LD_VAR 0 5
81206: NOT
81207: IFFALSE 81211
// exit ;
81209: GO 81256
// for i in tmp do
81211: LD_ADDR_VAR 0 3
81215: PUSH
81216: LD_VAR 0 5
81220: PUSH
81221: FOR_IN
81222: IFFALSE 81254
// begin result := EnemyInRange ( i , 22 ) ;
81224: LD_ADDR_VAR 0 2
81228: PUSH
81229: LD_VAR 0 3
81233: PPUSH
81234: LD_INT 22
81236: PPUSH
81237: CALL 79492 0 2
81241: ST_TO_ADDR
// if result then
81242: LD_VAR 0 2
81246: IFFALSE 81252
// exit ;
81248: POP
81249: POP
81250: GO 81256
// end ;
81252: GO 81221
81254: POP
81255: POP
// end ;
81256: LD_VAR 0 2
81260: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
81261: LD_INT 0
81263: PPUSH
81264: PPUSH
// if not units then
81265: LD_VAR 0 1
81269: NOT
81270: IFFALSE 81274
// exit ;
81272: GO 81344
// result := [ ] ;
81274: LD_ADDR_VAR 0 3
81278: PUSH
81279: EMPTY
81280: ST_TO_ADDR
// for i in units do
81281: LD_ADDR_VAR 0 4
81285: PUSH
81286: LD_VAR 0 1
81290: PUSH
81291: FOR_IN
81292: IFFALSE 81342
// if GetTag ( i ) = tag then
81294: LD_VAR 0 4
81298: PPUSH
81299: CALL_OW 110
81303: PUSH
81304: LD_VAR 0 2
81308: EQUAL
81309: IFFALSE 81340
// result := Replace ( result , result + 1 , i ) ;
81311: LD_ADDR_VAR 0 3
81315: PUSH
81316: LD_VAR 0 3
81320: PPUSH
81321: LD_VAR 0 3
81325: PUSH
81326: LD_INT 1
81328: PLUS
81329: PPUSH
81330: LD_VAR 0 4
81334: PPUSH
81335: CALL_OW 1
81339: ST_TO_ADDR
81340: GO 81291
81342: POP
81343: POP
// end ;
81344: LD_VAR 0 3
81348: RET
// export function IsDriver ( un ) ; begin
81349: LD_INT 0
81351: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
81352: LD_ADDR_VAR 0 2
81356: PUSH
81357: LD_VAR 0 1
81361: PUSH
81362: LD_INT 55
81364: PUSH
81365: EMPTY
81366: LIST
81367: PPUSH
81368: CALL_OW 69
81372: IN
81373: ST_TO_ADDR
// end ;
81374: LD_VAR 0 2
81378: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
81379: LD_INT 0
81381: PPUSH
81382: PPUSH
// list := [ ] ;
81383: LD_ADDR_VAR 0 5
81387: PUSH
81388: EMPTY
81389: ST_TO_ADDR
// case d of 0 :
81390: LD_VAR 0 3
81394: PUSH
81395: LD_INT 0
81397: DOUBLE
81398: EQUAL
81399: IFTRUE 81403
81401: GO 81536
81403: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
81404: LD_ADDR_VAR 0 5
81408: PUSH
81409: LD_VAR 0 1
81413: PUSH
81414: LD_INT 4
81416: MINUS
81417: PUSH
81418: LD_VAR 0 2
81422: PUSH
81423: LD_INT 4
81425: MINUS
81426: PUSH
81427: LD_INT 2
81429: PUSH
81430: EMPTY
81431: LIST
81432: LIST
81433: LIST
81434: PUSH
81435: LD_VAR 0 1
81439: PUSH
81440: LD_INT 3
81442: MINUS
81443: PUSH
81444: LD_VAR 0 2
81448: PUSH
81449: LD_INT 1
81451: PUSH
81452: EMPTY
81453: LIST
81454: LIST
81455: LIST
81456: PUSH
81457: LD_VAR 0 1
81461: PUSH
81462: LD_INT 4
81464: PLUS
81465: PUSH
81466: LD_VAR 0 2
81470: PUSH
81471: LD_INT 4
81473: PUSH
81474: EMPTY
81475: LIST
81476: LIST
81477: LIST
81478: PUSH
81479: LD_VAR 0 1
81483: PUSH
81484: LD_INT 3
81486: PLUS
81487: PUSH
81488: LD_VAR 0 2
81492: PUSH
81493: LD_INT 3
81495: PLUS
81496: PUSH
81497: LD_INT 5
81499: PUSH
81500: EMPTY
81501: LIST
81502: LIST
81503: LIST
81504: PUSH
81505: LD_VAR 0 1
81509: PUSH
81510: LD_VAR 0 2
81514: PUSH
81515: LD_INT 4
81517: PLUS
81518: PUSH
81519: LD_INT 0
81521: PUSH
81522: EMPTY
81523: LIST
81524: LIST
81525: LIST
81526: PUSH
81527: EMPTY
81528: LIST
81529: LIST
81530: LIST
81531: LIST
81532: LIST
81533: ST_TO_ADDR
// end ; 1 :
81534: GO 82234
81536: LD_INT 1
81538: DOUBLE
81539: EQUAL
81540: IFTRUE 81544
81542: GO 81677
81544: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
81545: LD_ADDR_VAR 0 5
81549: PUSH
81550: LD_VAR 0 1
81554: PUSH
81555: LD_VAR 0 2
81559: PUSH
81560: LD_INT 4
81562: MINUS
81563: PUSH
81564: LD_INT 3
81566: PUSH
81567: EMPTY
81568: LIST
81569: LIST
81570: LIST
81571: PUSH
81572: LD_VAR 0 1
81576: PUSH
81577: LD_INT 3
81579: MINUS
81580: PUSH
81581: LD_VAR 0 2
81585: PUSH
81586: LD_INT 3
81588: MINUS
81589: PUSH
81590: LD_INT 2
81592: PUSH
81593: EMPTY
81594: LIST
81595: LIST
81596: LIST
81597: PUSH
81598: LD_VAR 0 1
81602: PUSH
81603: LD_INT 4
81605: MINUS
81606: PUSH
81607: LD_VAR 0 2
81611: PUSH
81612: LD_INT 1
81614: PUSH
81615: EMPTY
81616: LIST
81617: LIST
81618: LIST
81619: PUSH
81620: LD_VAR 0 1
81624: PUSH
81625: LD_VAR 0 2
81629: PUSH
81630: LD_INT 3
81632: PLUS
81633: PUSH
81634: LD_INT 0
81636: PUSH
81637: EMPTY
81638: LIST
81639: LIST
81640: LIST
81641: PUSH
81642: LD_VAR 0 1
81646: PUSH
81647: LD_INT 4
81649: PLUS
81650: PUSH
81651: LD_VAR 0 2
81655: PUSH
81656: LD_INT 4
81658: PLUS
81659: PUSH
81660: LD_INT 5
81662: PUSH
81663: EMPTY
81664: LIST
81665: LIST
81666: LIST
81667: PUSH
81668: EMPTY
81669: LIST
81670: LIST
81671: LIST
81672: LIST
81673: LIST
81674: ST_TO_ADDR
// end ; 2 :
81675: GO 82234
81677: LD_INT 2
81679: DOUBLE
81680: EQUAL
81681: IFTRUE 81685
81683: GO 81814
81685: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
81686: LD_ADDR_VAR 0 5
81690: PUSH
81691: LD_VAR 0 1
81695: PUSH
81696: LD_VAR 0 2
81700: PUSH
81701: LD_INT 3
81703: MINUS
81704: PUSH
81705: LD_INT 3
81707: PUSH
81708: EMPTY
81709: LIST
81710: LIST
81711: LIST
81712: PUSH
81713: LD_VAR 0 1
81717: PUSH
81718: LD_INT 4
81720: PLUS
81721: PUSH
81722: LD_VAR 0 2
81726: PUSH
81727: LD_INT 4
81729: PUSH
81730: EMPTY
81731: LIST
81732: LIST
81733: LIST
81734: PUSH
81735: LD_VAR 0 1
81739: PUSH
81740: LD_VAR 0 2
81744: PUSH
81745: LD_INT 4
81747: PLUS
81748: PUSH
81749: LD_INT 0
81751: PUSH
81752: EMPTY
81753: LIST
81754: LIST
81755: LIST
81756: PUSH
81757: LD_VAR 0 1
81761: PUSH
81762: LD_INT 3
81764: MINUS
81765: PUSH
81766: LD_VAR 0 2
81770: PUSH
81771: LD_INT 1
81773: PUSH
81774: EMPTY
81775: LIST
81776: LIST
81777: LIST
81778: PUSH
81779: LD_VAR 0 1
81783: PUSH
81784: LD_INT 4
81786: MINUS
81787: PUSH
81788: LD_VAR 0 2
81792: PUSH
81793: LD_INT 4
81795: MINUS
81796: PUSH
81797: LD_INT 2
81799: PUSH
81800: EMPTY
81801: LIST
81802: LIST
81803: LIST
81804: PUSH
81805: EMPTY
81806: LIST
81807: LIST
81808: LIST
81809: LIST
81810: LIST
81811: ST_TO_ADDR
// end ; 3 :
81812: GO 82234
81814: LD_INT 3
81816: DOUBLE
81817: EQUAL
81818: IFTRUE 81822
81820: GO 81955
81822: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
81823: LD_ADDR_VAR 0 5
81827: PUSH
81828: LD_VAR 0 1
81832: PUSH
81833: LD_INT 3
81835: PLUS
81836: PUSH
81837: LD_VAR 0 2
81841: PUSH
81842: LD_INT 4
81844: PUSH
81845: EMPTY
81846: LIST
81847: LIST
81848: LIST
81849: PUSH
81850: LD_VAR 0 1
81854: PUSH
81855: LD_INT 4
81857: PLUS
81858: PUSH
81859: LD_VAR 0 2
81863: PUSH
81864: LD_INT 4
81866: PLUS
81867: PUSH
81868: LD_INT 5
81870: PUSH
81871: EMPTY
81872: LIST
81873: LIST
81874: LIST
81875: PUSH
81876: LD_VAR 0 1
81880: PUSH
81881: LD_INT 4
81883: MINUS
81884: PUSH
81885: LD_VAR 0 2
81889: PUSH
81890: LD_INT 1
81892: PUSH
81893: EMPTY
81894: LIST
81895: LIST
81896: LIST
81897: PUSH
81898: LD_VAR 0 1
81902: PUSH
81903: LD_VAR 0 2
81907: PUSH
81908: LD_INT 4
81910: MINUS
81911: PUSH
81912: LD_INT 3
81914: PUSH
81915: EMPTY
81916: LIST
81917: LIST
81918: LIST
81919: PUSH
81920: LD_VAR 0 1
81924: PUSH
81925: LD_INT 3
81927: MINUS
81928: PUSH
81929: LD_VAR 0 2
81933: PUSH
81934: LD_INT 3
81936: MINUS
81937: PUSH
81938: LD_INT 2
81940: PUSH
81941: EMPTY
81942: LIST
81943: LIST
81944: LIST
81945: PUSH
81946: EMPTY
81947: LIST
81948: LIST
81949: LIST
81950: LIST
81951: LIST
81952: ST_TO_ADDR
// end ; 4 :
81953: GO 82234
81955: LD_INT 4
81957: DOUBLE
81958: EQUAL
81959: IFTRUE 81963
81961: GO 82096
81963: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
81964: LD_ADDR_VAR 0 5
81968: PUSH
81969: LD_VAR 0 1
81973: PUSH
81974: LD_VAR 0 2
81978: PUSH
81979: LD_INT 4
81981: PLUS
81982: PUSH
81983: LD_INT 0
81985: PUSH
81986: EMPTY
81987: LIST
81988: LIST
81989: LIST
81990: PUSH
81991: LD_VAR 0 1
81995: PUSH
81996: LD_INT 3
81998: PLUS
81999: PUSH
82000: LD_VAR 0 2
82004: PUSH
82005: LD_INT 3
82007: PLUS
82008: PUSH
82009: LD_INT 5
82011: PUSH
82012: EMPTY
82013: LIST
82014: LIST
82015: LIST
82016: PUSH
82017: LD_VAR 0 1
82021: PUSH
82022: LD_INT 4
82024: PLUS
82025: PUSH
82026: LD_VAR 0 2
82030: PUSH
82031: LD_INT 4
82033: PUSH
82034: EMPTY
82035: LIST
82036: LIST
82037: LIST
82038: PUSH
82039: LD_VAR 0 1
82043: PUSH
82044: LD_VAR 0 2
82048: PUSH
82049: LD_INT 3
82051: MINUS
82052: PUSH
82053: LD_INT 3
82055: PUSH
82056: EMPTY
82057: LIST
82058: LIST
82059: LIST
82060: PUSH
82061: LD_VAR 0 1
82065: PUSH
82066: LD_INT 4
82068: MINUS
82069: PUSH
82070: LD_VAR 0 2
82074: PUSH
82075: LD_INT 4
82077: MINUS
82078: PUSH
82079: LD_INT 2
82081: PUSH
82082: EMPTY
82083: LIST
82084: LIST
82085: LIST
82086: PUSH
82087: EMPTY
82088: LIST
82089: LIST
82090: LIST
82091: LIST
82092: LIST
82093: ST_TO_ADDR
// end ; 5 :
82094: GO 82234
82096: LD_INT 5
82098: DOUBLE
82099: EQUAL
82100: IFTRUE 82104
82102: GO 82233
82104: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
82105: LD_ADDR_VAR 0 5
82109: PUSH
82110: LD_VAR 0 1
82114: PUSH
82115: LD_INT 4
82117: MINUS
82118: PUSH
82119: LD_VAR 0 2
82123: PUSH
82124: LD_INT 1
82126: PUSH
82127: EMPTY
82128: LIST
82129: LIST
82130: LIST
82131: PUSH
82132: LD_VAR 0 1
82136: PUSH
82137: LD_VAR 0 2
82141: PUSH
82142: LD_INT 4
82144: MINUS
82145: PUSH
82146: LD_INT 3
82148: PUSH
82149: EMPTY
82150: LIST
82151: LIST
82152: LIST
82153: PUSH
82154: LD_VAR 0 1
82158: PUSH
82159: LD_INT 4
82161: PLUS
82162: PUSH
82163: LD_VAR 0 2
82167: PUSH
82168: LD_INT 4
82170: PLUS
82171: PUSH
82172: LD_INT 5
82174: PUSH
82175: EMPTY
82176: LIST
82177: LIST
82178: LIST
82179: PUSH
82180: LD_VAR 0 1
82184: PUSH
82185: LD_INT 3
82187: PLUS
82188: PUSH
82189: LD_VAR 0 2
82193: PUSH
82194: LD_INT 4
82196: PUSH
82197: EMPTY
82198: LIST
82199: LIST
82200: LIST
82201: PUSH
82202: LD_VAR 0 1
82206: PUSH
82207: LD_VAR 0 2
82211: PUSH
82212: LD_INT 3
82214: PLUS
82215: PUSH
82216: LD_INT 0
82218: PUSH
82219: EMPTY
82220: LIST
82221: LIST
82222: LIST
82223: PUSH
82224: EMPTY
82225: LIST
82226: LIST
82227: LIST
82228: LIST
82229: LIST
82230: ST_TO_ADDR
// end ; end ;
82231: GO 82234
82233: POP
// result := list ;
82234: LD_ADDR_VAR 0 4
82238: PUSH
82239: LD_VAR 0 5
82243: ST_TO_ADDR
// end ;
82244: LD_VAR 0 4
82248: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
82249: LD_INT 0
82251: PPUSH
82252: PPUSH
82253: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
82254: LD_VAR 0 1
82258: NOT
82259: PUSH
82260: LD_VAR 0 2
82264: PUSH
82265: LD_INT 1
82267: PUSH
82268: LD_INT 2
82270: PUSH
82271: LD_INT 3
82273: PUSH
82274: LD_INT 4
82276: PUSH
82277: EMPTY
82278: LIST
82279: LIST
82280: LIST
82281: LIST
82282: IN
82283: NOT
82284: OR
82285: IFFALSE 82289
// exit ;
82287: GO 82381
// tmp := [ ] ;
82289: LD_ADDR_VAR 0 5
82293: PUSH
82294: EMPTY
82295: ST_TO_ADDR
// for i in units do
82296: LD_ADDR_VAR 0 4
82300: PUSH
82301: LD_VAR 0 1
82305: PUSH
82306: FOR_IN
82307: IFFALSE 82350
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
82309: LD_ADDR_VAR 0 5
82313: PUSH
82314: LD_VAR 0 5
82318: PPUSH
82319: LD_VAR 0 5
82323: PUSH
82324: LD_INT 1
82326: PLUS
82327: PPUSH
82328: LD_VAR 0 4
82332: PPUSH
82333: LD_VAR 0 2
82337: PPUSH
82338: CALL_OW 259
82342: PPUSH
82343: CALL_OW 2
82347: ST_TO_ADDR
82348: GO 82306
82350: POP
82351: POP
// if not tmp then
82352: LD_VAR 0 5
82356: NOT
82357: IFFALSE 82361
// exit ;
82359: GO 82381
// result := SortListByListDesc ( units , tmp ) ;
82361: LD_ADDR_VAR 0 3
82365: PUSH
82366: LD_VAR 0 1
82370: PPUSH
82371: LD_VAR 0 5
82375: PPUSH
82376: CALL_OW 77
82380: ST_TO_ADDR
// end ;
82381: LD_VAR 0 3
82385: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
82386: LD_INT 0
82388: PPUSH
82389: PPUSH
82390: PPUSH
// result := false ;
82391: LD_ADDR_VAR 0 3
82395: PUSH
82396: LD_INT 0
82398: ST_TO_ADDR
// x := GetX ( building ) ;
82399: LD_ADDR_VAR 0 4
82403: PUSH
82404: LD_VAR 0 2
82408: PPUSH
82409: CALL_OW 250
82413: ST_TO_ADDR
// y := GetY ( building ) ;
82414: LD_ADDR_VAR 0 5
82418: PUSH
82419: LD_VAR 0 2
82423: PPUSH
82424: CALL_OW 251
82428: ST_TO_ADDR
// if not building or not x or not y then
82429: LD_VAR 0 2
82433: NOT
82434: PUSH
82435: LD_VAR 0 4
82439: NOT
82440: OR
82441: PUSH
82442: LD_VAR 0 5
82446: NOT
82447: OR
82448: IFFALSE 82452
// exit ;
82450: GO 82544
// if GetTaskList ( unit ) then
82452: LD_VAR 0 1
82456: PPUSH
82457: CALL_OW 437
82461: IFFALSE 82544
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
82463: LD_STRING e
82465: PUSH
82466: LD_VAR 0 1
82470: PPUSH
82471: CALL_OW 437
82475: PUSH
82476: LD_INT 1
82478: ARRAY
82479: PUSH
82480: LD_INT 1
82482: ARRAY
82483: EQUAL
82484: PUSH
82485: LD_VAR 0 4
82489: PUSH
82490: LD_VAR 0 1
82494: PPUSH
82495: CALL_OW 437
82499: PUSH
82500: LD_INT 1
82502: ARRAY
82503: PUSH
82504: LD_INT 2
82506: ARRAY
82507: EQUAL
82508: AND
82509: PUSH
82510: LD_VAR 0 5
82514: PUSH
82515: LD_VAR 0 1
82519: PPUSH
82520: CALL_OW 437
82524: PUSH
82525: LD_INT 1
82527: ARRAY
82528: PUSH
82529: LD_INT 3
82531: ARRAY
82532: EQUAL
82533: AND
82534: IFFALSE 82544
// result := true end ;
82536: LD_ADDR_VAR 0 3
82540: PUSH
82541: LD_INT 1
82543: ST_TO_ADDR
// end ;
82544: LD_VAR 0 3
82548: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
82549: LD_INT 0
82551: PPUSH
// result := false ;
82552: LD_ADDR_VAR 0 4
82556: PUSH
82557: LD_INT 0
82559: ST_TO_ADDR
// if GetTaskList ( unit ) then
82560: LD_VAR 0 1
82564: PPUSH
82565: CALL_OW 437
82569: IFFALSE 82652
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
82571: LD_STRING M
82573: PUSH
82574: LD_VAR 0 1
82578: PPUSH
82579: CALL_OW 437
82583: PUSH
82584: LD_INT 1
82586: ARRAY
82587: PUSH
82588: LD_INT 1
82590: ARRAY
82591: EQUAL
82592: PUSH
82593: LD_VAR 0 2
82597: PUSH
82598: LD_VAR 0 1
82602: PPUSH
82603: CALL_OW 437
82607: PUSH
82608: LD_INT 1
82610: ARRAY
82611: PUSH
82612: LD_INT 2
82614: ARRAY
82615: EQUAL
82616: AND
82617: PUSH
82618: LD_VAR 0 3
82622: PUSH
82623: LD_VAR 0 1
82627: PPUSH
82628: CALL_OW 437
82632: PUSH
82633: LD_INT 1
82635: ARRAY
82636: PUSH
82637: LD_INT 3
82639: ARRAY
82640: EQUAL
82641: AND
82642: IFFALSE 82652
// result := true ;
82644: LD_ADDR_VAR 0 4
82648: PUSH
82649: LD_INT 1
82651: ST_TO_ADDR
// end ; end ;
82652: LD_VAR 0 4
82656: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
82657: LD_INT 0
82659: PPUSH
82660: PPUSH
82661: PPUSH
82662: PPUSH
// if not unit or not area then
82663: LD_VAR 0 1
82667: NOT
82668: PUSH
82669: LD_VAR 0 2
82673: NOT
82674: OR
82675: IFFALSE 82679
// exit ;
82677: GO 82843
// tmp := AreaToList ( area , i ) ;
82679: LD_ADDR_VAR 0 6
82683: PUSH
82684: LD_VAR 0 2
82688: PPUSH
82689: LD_VAR 0 5
82693: PPUSH
82694: CALL_OW 517
82698: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
82699: LD_ADDR_VAR 0 5
82703: PUSH
82704: DOUBLE
82705: LD_INT 1
82707: DEC
82708: ST_TO_ADDR
82709: LD_VAR 0 6
82713: PUSH
82714: LD_INT 1
82716: ARRAY
82717: PUSH
82718: FOR_TO
82719: IFFALSE 82841
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
82721: LD_ADDR_VAR 0 7
82725: PUSH
82726: LD_VAR 0 6
82730: PUSH
82731: LD_INT 1
82733: ARRAY
82734: PUSH
82735: LD_VAR 0 5
82739: ARRAY
82740: PUSH
82741: LD_VAR 0 6
82745: PUSH
82746: LD_INT 2
82748: ARRAY
82749: PUSH
82750: LD_VAR 0 5
82754: ARRAY
82755: PUSH
82756: EMPTY
82757: LIST
82758: LIST
82759: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
82760: LD_VAR 0 7
82764: PUSH
82765: LD_INT 1
82767: ARRAY
82768: PPUSH
82769: LD_VAR 0 7
82773: PUSH
82774: LD_INT 2
82776: ARRAY
82777: PPUSH
82778: CALL_OW 428
82782: PUSH
82783: LD_INT 0
82785: EQUAL
82786: IFFALSE 82839
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
82788: LD_VAR 0 1
82792: PPUSH
82793: LD_VAR 0 7
82797: PUSH
82798: LD_INT 1
82800: ARRAY
82801: PPUSH
82802: LD_VAR 0 7
82806: PUSH
82807: LD_INT 2
82809: ARRAY
82810: PPUSH
82811: LD_VAR 0 3
82815: PPUSH
82816: CALL_OW 48
// result := IsPlaced ( unit ) ;
82820: LD_ADDR_VAR 0 4
82824: PUSH
82825: LD_VAR 0 1
82829: PPUSH
82830: CALL_OW 305
82834: ST_TO_ADDR
// exit ;
82835: POP
82836: POP
82837: GO 82843
// end ; end ;
82839: GO 82718
82841: POP
82842: POP
// end ;
82843: LD_VAR 0 4
82847: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
82848: LD_INT 0
82850: PPUSH
82851: PPUSH
82852: PPUSH
// if not side or side > 8 then
82853: LD_VAR 0 1
82857: NOT
82858: PUSH
82859: LD_VAR 0 1
82863: PUSH
82864: LD_INT 8
82866: GREATER
82867: OR
82868: IFFALSE 82872
// exit ;
82870: GO 83059
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
82872: LD_ADDR_VAR 0 4
82876: PUSH
82877: LD_INT 22
82879: PUSH
82880: LD_VAR 0 1
82884: PUSH
82885: EMPTY
82886: LIST
82887: LIST
82888: PUSH
82889: LD_INT 21
82891: PUSH
82892: LD_INT 3
82894: PUSH
82895: EMPTY
82896: LIST
82897: LIST
82898: PUSH
82899: EMPTY
82900: LIST
82901: LIST
82902: PPUSH
82903: CALL_OW 69
82907: ST_TO_ADDR
// if not tmp then
82908: LD_VAR 0 4
82912: NOT
82913: IFFALSE 82917
// exit ;
82915: GO 83059
// enable_addtolog := true ;
82917: LD_ADDR_OWVAR 81
82921: PUSH
82922: LD_INT 1
82924: ST_TO_ADDR
// AddToLog ( [ ) ;
82925: LD_STRING [
82927: PPUSH
82928: CALL_OW 561
// for i in tmp do
82932: LD_ADDR_VAR 0 3
82936: PUSH
82937: LD_VAR 0 4
82941: PUSH
82942: FOR_IN
82943: IFFALSE 83050
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
82945: LD_STRING [
82947: PUSH
82948: LD_VAR 0 3
82952: PPUSH
82953: CALL_OW 266
82957: STR
82958: PUSH
82959: LD_STRING , 
82961: STR
82962: PUSH
82963: LD_VAR 0 3
82967: PPUSH
82968: CALL_OW 250
82972: STR
82973: PUSH
82974: LD_STRING , 
82976: STR
82977: PUSH
82978: LD_VAR 0 3
82982: PPUSH
82983: CALL_OW 251
82987: STR
82988: PUSH
82989: LD_STRING , 
82991: STR
82992: PUSH
82993: LD_VAR 0 3
82997: PPUSH
82998: CALL_OW 254
83002: STR
83003: PUSH
83004: LD_STRING , 
83006: STR
83007: PUSH
83008: LD_VAR 0 3
83012: PPUSH
83013: LD_INT 1
83015: PPUSH
83016: CALL_OW 268
83020: STR
83021: PUSH
83022: LD_STRING , 
83024: STR
83025: PUSH
83026: LD_VAR 0 3
83030: PPUSH
83031: LD_INT 2
83033: PPUSH
83034: CALL_OW 268
83038: STR
83039: PUSH
83040: LD_STRING ],
83042: STR
83043: PPUSH
83044: CALL_OW 561
// end ;
83048: GO 82942
83050: POP
83051: POP
// AddToLog ( ]; ) ;
83052: LD_STRING ];
83054: PPUSH
83055: CALL_OW 561
// end ;
83059: LD_VAR 0 2
83063: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
83064: LD_INT 0
83066: PPUSH
83067: PPUSH
83068: PPUSH
83069: PPUSH
83070: PPUSH
// if not area or not rate or not max then
83071: LD_VAR 0 1
83075: NOT
83076: PUSH
83077: LD_VAR 0 2
83081: NOT
83082: OR
83083: PUSH
83084: LD_VAR 0 4
83088: NOT
83089: OR
83090: IFFALSE 83094
// exit ;
83092: GO 83286
// while 1 do
83094: LD_INT 1
83096: IFFALSE 83286
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
83098: LD_ADDR_VAR 0 9
83102: PUSH
83103: LD_VAR 0 1
83107: PPUSH
83108: LD_INT 1
83110: PPUSH
83111: CALL_OW 287
83115: PUSH
83116: LD_INT 10
83118: MUL
83119: ST_TO_ADDR
// r := rate / 10 ;
83120: LD_ADDR_VAR 0 7
83124: PUSH
83125: LD_VAR 0 2
83129: PUSH
83130: LD_INT 10
83132: DIVREAL
83133: ST_TO_ADDR
// time := 1 1$00 ;
83134: LD_ADDR_VAR 0 8
83138: PUSH
83139: LD_INT 2100
83141: ST_TO_ADDR
// if amount < min then
83142: LD_VAR 0 9
83146: PUSH
83147: LD_VAR 0 3
83151: LESS
83152: IFFALSE 83170
// r := r * 2 else
83154: LD_ADDR_VAR 0 7
83158: PUSH
83159: LD_VAR 0 7
83163: PUSH
83164: LD_INT 2
83166: MUL
83167: ST_TO_ADDR
83168: GO 83196
// if amount > max then
83170: LD_VAR 0 9
83174: PUSH
83175: LD_VAR 0 4
83179: GREATER
83180: IFFALSE 83196
// r := r / 2 ;
83182: LD_ADDR_VAR 0 7
83186: PUSH
83187: LD_VAR 0 7
83191: PUSH
83192: LD_INT 2
83194: DIVREAL
83195: ST_TO_ADDR
// time := time / r ;
83196: LD_ADDR_VAR 0 8
83200: PUSH
83201: LD_VAR 0 8
83205: PUSH
83206: LD_VAR 0 7
83210: DIVREAL
83211: ST_TO_ADDR
// if time < 0 then
83212: LD_VAR 0 8
83216: PUSH
83217: LD_INT 0
83219: LESS
83220: IFFALSE 83237
// time := time * - 1 ;
83222: LD_ADDR_VAR 0 8
83226: PUSH
83227: LD_VAR 0 8
83231: PUSH
83232: LD_INT 1
83234: NEG
83235: MUL
83236: ST_TO_ADDR
// wait ( time ) ;
83237: LD_VAR 0 8
83241: PPUSH
83242: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
83246: LD_INT 35
83248: PPUSH
83249: LD_INT 875
83251: PPUSH
83252: CALL_OW 12
83256: PPUSH
83257: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
83261: LD_INT 1
83263: PPUSH
83264: LD_INT 5
83266: PPUSH
83267: CALL_OW 12
83271: PPUSH
83272: LD_VAR 0 1
83276: PPUSH
83277: LD_INT 1
83279: PPUSH
83280: CALL_OW 55
// end ;
83284: GO 83094
// end ;
83286: LD_VAR 0 5
83290: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
83291: LD_INT 0
83293: PPUSH
83294: PPUSH
83295: PPUSH
83296: PPUSH
83297: PPUSH
83298: PPUSH
83299: PPUSH
83300: PPUSH
// if not turrets or not factories then
83301: LD_VAR 0 1
83305: NOT
83306: PUSH
83307: LD_VAR 0 2
83311: NOT
83312: OR
83313: IFFALSE 83317
// exit ;
83315: GO 83624
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
83317: LD_ADDR_VAR 0 10
83321: PUSH
83322: LD_INT 5
83324: PUSH
83325: LD_INT 6
83327: PUSH
83328: EMPTY
83329: LIST
83330: LIST
83331: PUSH
83332: LD_INT 2
83334: PUSH
83335: LD_INT 4
83337: PUSH
83338: EMPTY
83339: LIST
83340: LIST
83341: PUSH
83342: LD_INT 3
83344: PUSH
83345: LD_INT 5
83347: PUSH
83348: EMPTY
83349: LIST
83350: LIST
83351: PUSH
83352: EMPTY
83353: LIST
83354: LIST
83355: LIST
83356: PUSH
83357: LD_INT 24
83359: PUSH
83360: LD_INT 25
83362: PUSH
83363: EMPTY
83364: LIST
83365: LIST
83366: PUSH
83367: LD_INT 23
83369: PUSH
83370: LD_INT 27
83372: PUSH
83373: EMPTY
83374: LIST
83375: LIST
83376: PUSH
83377: EMPTY
83378: LIST
83379: LIST
83380: PUSH
83381: LD_INT 42
83383: PUSH
83384: LD_INT 43
83386: PUSH
83387: EMPTY
83388: LIST
83389: LIST
83390: PUSH
83391: LD_INT 44
83393: PUSH
83394: LD_INT 46
83396: PUSH
83397: EMPTY
83398: LIST
83399: LIST
83400: PUSH
83401: LD_INT 45
83403: PUSH
83404: LD_INT 47
83406: PUSH
83407: EMPTY
83408: LIST
83409: LIST
83410: PUSH
83411: EMPTY
83412: LIST
83413: LIST
83414: LIST
83415: PUSH
83416: EMPTY
83417: LIST
83418: LIST
83419: LIST
83420: ST_TO_ADDR
// result := [ ] ;
83421: LD_ADDR_VAR 0 3
83425: PUSH
83426: EMPTY
83427: ST_TO_ADDR
// for i in turrets do
83428: LD_ADDR_VAR 0 4
83432: PUSH
83433: LD_VAR 0 1
83437: PUSH
83438: FOR_IN
83439: IFFALSE 83622
// begin nat := GetNation ( i ) ;
83441: LD_ADDR_VAR 0 7
83445: PUSH
83446: LD_VAR 0 4
83450: PPUSH
83451: CALL_OW 248
83455: ST_TO_ADDR
// weapon := 0 ;
83456: LD_ADDR_VAR 0 8
83460: PUSH
83461: LD_INT 0
83463: ST_TO_ADDR
// if not nat then
83464: LD_VAR 0 7
83468: NOT
83469: IFFALSE 83473
// continue ;
83471: GO 83438
// for j in list [ nat ] do
83473: LD_ADDR_VAR 0 5
83477: PUSH
83478: LD_VAR 0 10
83482: PUSH
83483: LD_VAR 0 7
83487: ARRAY
83488: PUSH
83489: FOR_IN
83490: IFFALSE 83531
// if GetBWeapon ( i ) = j [ 1 ] then
83492: LD_VAR 0 4
83496: PPUSH
83497: CALL_OW 269
83501: PUSH
83502: LD_VAR 0 5
83506: PUSH
83507: LD_INT 1
83509: ARRAY
83510: EQUAL
83511: IFFALSE 83529
// begin weapon := j [ 2 ] ;
83513: LD_ADDR_VAR 0 8
83517: PUSH
83518: LD_VAR 0 5
83522: PUSH
83523: LD_INT 2
83525: ARRAY
83526: ST_TO_ADDR
// break ;
83527: GO 83531
// end ;
83529: GO 83489
83531: POP
83532: POP
// if not weapon then
83533: LD_VAR 0 8
83537: NOT
83538: IFFALSE 83542
// continue ;
83540: GO 83438
// for k in factories do
83542: LD_ADDR_VAR 0 6
83546: PUSH
83547: LD_VAR 0 2
83551: PUSH
83552: FOR_IN
83553: IFFALSE 83618
// begin weapons := AvailableWeaponList ( k ) ;
83555: LD_ADDR_VAR 0 9
83559: PUSH
83560: LD_VAR 0 6
83564: PPUSH
83565: CALL_OW 478
83569: ST_TO_ADDR
// if not weapons then
83570: LD_VAR 0 9
83574: NOT
83575: IFFALSE 83579
// continue ;
83577: GO 83552
// if weapon in weapons then
83579: LD_VAR 0 8
83583: PUSH
83584: LD_VAR 0 9
83588: IN
83589: IFFALSE 83616
// begin result := [ i , weapon ] ;
83591: LD_ADDR_VAR 0 3
83595: PUSH
83596: LD_VAR 0 4
83600: PUSH
83601: LD_VAR 0 8
83605: PUSH
83606: EMPTY
83607: LIST
83608: LIST
83609: ST_TO_ADDR
// exit ;
83610: POP
83611: POP
83612: POP
83613: POP
83614: GO 83624
// end ; end ;
83616: GO 83552
83618: POP
83619: POP
// end ;
83620: GO 83438
83622: POP
83623: POP
// end ;
83624: LD_VAR 0 3
83628: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
83629: LD_INT 0
83631: PPUSH
// if not side or side > 8 then
83632: LD_VAR 0 3
83636: NOT
83637: PUSH
83638: LD_VAR 0 3
83642: PUSH
83643: LD_INT 8
83645: GREATER
83646: OR
83647: IFFALSE 83651
// exit ;
83649: GO 83710
// if not range then
83651: LD_VAR 0 4
83655: NOT
83656: IFFALSE 83667
// range := - 12 ;
83658: LD_ADDR_VAR 0 4
83662: PUSH
83663: LD_INT 12
83665: NEG
83666: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
83667: LD_VAR 0 1
83671: PPUSH
83672: LD_VAR 0 2
83676: PPUSH
83677: LD_VAR 0 3
83681: PPUSH
83682: LD_VAR 0 4
83686: PPUSH
83687: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
83691: LD_VAR 0 1
83695: PPUSH
83696: LD_VAR 0 2
83700: PPUSH
83701: LD_VAR 0 3
83705: PPUSH
83706: CALL_OW 331
// end ;
83710: LD_VAR 0 5
83714: RET
// export function Video ( mode ) ; begin
83715: LD_INT 0
83717: PPUSH
// ingame_video = mode ;
83718: LD_ADDR_OWVAR 52
83722: PUSH
83723: LD_VAR 0 1
83727: ST_TO_ADDR
// interface_hidden = mode ;
83728: LD_ADDR_OWVAR 54
83732: PUSH
83733: LD_VAR 0 1
83737: ST_TO_ADDR
// end ;
83738: LD_VAR 0 2
83742: RET
// export function Join ( array , element ) ; begin
83743: LD_INT 0
83745: PPUSH
// result := Replace ( array , array + 1 , element ) ;
83746: LD_ADDR_VAR 0 3
83750: PUSH
83751: LD_VAR 0 1
83755: PPUSH
83756: LD_VAR 0 1
83760: PUSH
83761: LD_INT 1
83763: PLUS
83764: PPUSH
83765: LD_VAR 0 2
83769: PPUSH
83770: CALL_OW 1
83774: ST_TO_ADDR
// end ;
83775: LD_VAR 0 3
83779: RET
// export function JoinUnion ( array , element ) ; begin
83780: LD_INT 0
83782: PPUSH
// result := array union element ;
83783: LD_ADDR_VAR 0 3
83787: PUSH
83788: LD_VAR 0 1
83792: PUSH
83793: LD_VAR 0 2
83797: UNION
83798: ST_TO_ADDR
// end ;
83799: LD_VAR 0 3
83803: RET
// export function GetBehemoths ( side ) ; begin
83804: LD_INT 0
83806: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
83807: LD_ADDR_VAR 0 2
83811: PUSH
83812: LD_INT 22
83814: PUSH
83815: LD_VAR 0 1
83819: PUSH
83820: EMPTY
83821: LIST
83822: LIST
83823: PUSH
83824: LD_INT 31
83826: PUSH
83827: LD_INT 25
83829: PUSH
83830: EMPTY
83831: LIST
83832: LIST
83833: PUSH
83834: EMPTY
83835: LIST
83836: LIST
83837: PPUSH
83838: CALL_OW 69
83842: ST_TO_ADDR
// end ;
83843: LD_VAR 0 2
83847: RET
// export function Shuffle ( array ) ; var i , index ; begin
83848: LD_INT 0
83850: PPUSH
83851: PPUSH
83852: PPUSH
// result := [ ] ;
83853: LD_ADDR_VAR 0 2
83857: PUSH
83858: EMPTY
83859: ST_TO_ADDR
// if not array then
83860: LD_VAR 0 1
83864: NOT
83865: IFFALSE 83869
// exit ;
83867: GO 83968
// Randomize ;
83869: CALL_OW 10
// for i = array downto 1 do
83873: LD_ADDR_VAR 0 3
83877: PUSH
83878: DOUBLE
83879: LD_VAR 0 1
83883: INC
83884: ST_TO_ADDR
83885: LD_INT 1
83887: PUSH
83888: FOR_DOWNTO
83889: IFFALSE 83966
// begin index := rand ( 1 , array ) ;
83891: LD_ADDR_VAR 0 4
83895: PUSH
83896: LD_INT 1
83898: PPUSH
83899: LD_VAR 0 1
83903: PPUSH
83904: CALL_OW 12
83908: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
83909: LD_ADDR_VAR 0 2
83913: PUSH
83914: LD_VAR 0 2
83918: PPUSH
83919: LD_VAR 0 2
83923: PUSH
83924: LD_INT 1
83926: PLUS
83927: PPUSH
83928: LD_VAR 0 1
83932: PUSH
83933: LD_VAR 0 4
83937: ARRAY
83938: PPUSH
83939: CALL_OW 2
83943: ST_TO_ADDR
// array := Delete ( array , index ) ;
83944: LD_ADDR_VAR 0 1
83948: PUSH
83949: LD_VAR 0 1
83953: PPUSH
83954: LD_VAR 0 4
83958: PPUSH
83959: CALL_OW 3
83963: ST_TO_ADDR
// end ;
83964: GO 83888
83966: POP
83967: POP
// end ;
83968: LD_VAR 0 2
83972: RET
// export function GetBaseMaterials ( base ) ; begin
83973: LD_INT 0
83975: PPUSH
// result := [ 0 , 0 , 0 ] ;
83976: LD_ADDR_VAR 0 2
83980: PUSH
83981: LD_INT 0
83983: PUSH
83984: LD_INT 0
83986: PUSH
83987: LD_INT 0
83989: PUSH
83990: EMPTY
83991: LIST
83992: LIST
83993: LIST
83994: ST_TO_ADDR
// if not base then
83995: LD_VAR 0 1
83999: NOT
84000: IFFALSE 84004
// exit ;
84002: GO 84053
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
84004: LD_ADDR_VAR 0 2
84008: PUSH
84009: LD_VAR 0 1
84013: PPUSH
84014: LD_INT 1
84016: PPUSH
84017: CALL_OW 275
84021: PUSH
84022: LD_VAR 0 1
84026: PPUSH
84027: LD_INT 2
84029: PPUSH
84030: CALL_OW 275
84034: PUSH
84035: LD_VAR 0 1
84039: PPUSH
84040: LD_INT 3
84042: PPUSH
84043: CALL_OW 275
84047: PUSH
84048: EMPTY
84049: LIST
84050: LIST
84051: LIST
84052: ST_TO_ADDR
// end ;
84053: LD_VAR 0 2
84057: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
84058: LD_INT 0
84060: PPUSH
84061: PPUSH
// result := array ;
84062: LD_ADDR_VAR 0 3
84066: PUSH
84067: LD_VAR 0 1
84071: ST_TO_ADDR
// if size > 0 then
84072: LD_VAR 0 2
84076: PUSH
84077: LD_INT 0
84079: GREATER
84080: IFFALSE 84126
// for i := array downto size do
84082: LD_ADDR_VAR 0 4
84086: PUSH
84087: DOUBLE
84088: LD_VAR 0 1
84092: INC
84093: ST_TO_ADDR
84094: LD_VAR 0 2
84098: PUSH
84099: FOR_DOWNTO
84100: IFFALSE 84124
// result := Delete ( result , result ) ;
84102: LD_ADDR_VAR 0 3
84106: PUSH
84107: LD_VAR 0 3
84111: PPUSH
84112: LD_VAR 0 3
84116: PPUSH
84117: CALL_OW 3
84121: ST_TO_ADDR
84122: GO 84099
84124: POP
84125: POP
// end ;
84126: LD_VAR 0 3
84130: RET
// export function ComExit ( unit ) ; var tmp ; begin
84131: LD_INT 0
84133: PPUSH
84134: PPUSH
// if not IsInUnit ( unit ) then
84135: LD_VAR 0 1
84139: PPUSH
84140: CALL_OW 310
84144: NOT
84145: IFFALSE 84149
// exit ;
84147: GO 84209
// tmp := IsInUnit ( unit ) ;
84149: LD_ADDR_VAR 0 3
84153: PUSH
84154: LD_VAR 0 1
84158: PPUSH
84159: CALL_OW 310
84163: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
84164: LD_VAR 0 3
84168: PPUSH
84169: CALL_OW 247
84173: PUSH
84174: LD_INT 2
84176: EQUAL
84177: IFFALSE 84190
// ComExitVehicle ( unit ) else
84179: LD_VAR 0 1
84183: PPUSH
84184: CALL_OW 121
84188: GO 84199
// ComExitBuilding ( unit ) ;
84190: LD_VAR 0 1
84194: PPUSH
84195: CALL_OW 122
// result := tmp ;
84199: LD_ADDR_VAR 0 2
84203: PUSH
84204: LD_VAR 0 3
84208: ST_TO_ADDR
// end ;
84209: LD_VAR 0 2
84213: RET
// export function ComExitAll ( units ) ; var i ; begin
84214: LD_INT 0
84216: PPUSH
84217: PPUSH
// if not units then
84218: LD_VAR 0 1
84222: NOT
84223: IFFALSE 84227
// exit ;
84225: GO 84253
// for i in units do
84227: LD_ADDR_VAR 0 3
84231: PUSH
84232: LD_VAR 0 1
84236: PUSH
84237: FOR_IN
84238: IFFALSE 84251
// ComExit ( i ) ;
84240: LD_VAR 0 3
84244: PPUSH
84245: CALL 84131 0 1
84249: GO 84237
84251: POP
84252: POP
// end ;
84253: LD_VAR 0 2
84257: RET
// export function ResetHc ; begin
84258: LD_INT 0
84260: PPUSH
// InitHc ;
84261: CALL_OW 19
// hc_importance := 0 ;
84265: LD_ADDR_OWVAR 32
84269: PUSH
84270: LD_INT 0
84272: ST_TO_ADDR
// end ;
84273: LD_VAR 0 1
84277: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
84278: LD_INT 0
84280: PPUSH
84281: PPUSH
84282: PPUSH
// _x := ( x1 + x2 ) div 2 ;
84283: LD_ADDR_VAR 0 6
84287: PUSH
84288: LD_VAR 0 1
84292: PUSH
84293: LD_VAR 0 3
84297: PLUS
84298: PUSH
84299: LD_INT 2
84301: DIV
84302: ST_TO_ADDR
// if _x < 0 then
84303: LD_VAR 0 6
84307: PUSH
84308: LD_INT 0
84310: LESS
84311: IFFALSE 84328
// _x := _x * - 1 ;
84313: LD_ADDR_VAR 0 6
84317: PUSH
84318: LD_VAR 0 6
84322: PUSH
84323: LD_INT 1
84325: NEG
84326: MUL
84327: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
84328: LD_ADDR_VAR 0 7
84332: PUSH
84333: LD_VAR 0 2
84337: PUSH
84338: LD_VAR 0 4
84342: PLUS
84343: PUSH
84344: LD_INT 2
84346: DIV
84347: ST_TO_ADDR
// if _y < 0 then
84348: LD_VAR 0 7
84352: PUSH
84353: LD_INT 0
84355: LESS
84356: IFFALSE 84373
// _y := _y * - 1 ;
84358: LD_ADDR_VAR 0 7
84362: PUSH
84363: LD_VAR 0 7
84367: PUSH
84368: LD_INT 1
84370: NEG
84371: MUL
84372: ST_TO_ADDR
// result := [ _x , _y ] ;
84373: LD_ADDR_VAR 0 5
84377: PUSH
84378: LD_VAR 0 6
84382: PUSH
84383: LD_VAR 0 7
84387: PUSH
84388: EMPTY
84389: LIST
84390: LIST
84391: ST_TO_ADDR
// end ;
84392: LD_VAR 0 5
84396: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
84397: LD_INT 0
84399: PPUSH
84400: PPUSH
84401: PPUSH
84402: PPUSH
// task := GetTaskList ( unit ) ;
84403: LD_ADDR_VAR 0 7
84407: PUSH
84408: LD_VAR 0 1
84412: PPUSH
84413: CALL_OW 437
84417: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
84418: LD_VAR 0 7
84422: NOT
84423: PUSH
84424: LD_VAR 0 1
84428: PPUSH
84429: LD_VAR 0 2
84433: PPUSH
84434: CALL_OW 308
84438: NOT
84439: AND
84440: IFFALSE 84444
// exit ;
84442: GO 84562
// if IsInArea ( unit , area ) then
84444: LD_VAR 0 1
84448: PPUSH
84449: LD_VAR 0 2
84453: PPUSH
84454: CALL_OW 308
84458: IFFALSE 84476
// begin ComMoveToArea ( unit , goAway ) ;
84460: LD_VAR 0 1
84464: PPUSH
84465: LD_VAR 0 3
84469: PPUSH
84470: CALL_OW 113
// exit ;
84474: GO 84562
// end ; if task [ 1 ] [ 1 ] <> M then
84476: LD_VAR 0 7
84480: PUSH
84481: LD_INT 1
84483: ARRAY
84484: PUSH
84485: LD_INT 1
84487: ARRAY
84488: PUSH
84489: LD_STRING M
84491: NONEQUAL
84492: IFFALSE 84496
// exit ;
84494: GO 84562
// x := task [ 1 ] [ 2 ] ;
84496: LD_ADDR_VAR 0 5
84500: PUSH
84501: LD_VAR 0 7
84505: PUSH
84506: LD_INT 1
84508: ARRAY
84509: PUSH
84510: LD_INT 2
84512: ARRAY
84513: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
84514: LD_ADDR_VAR 0 6
84518: PUSH
84519: LD_VAR 0 7
84523: PUSH
84524: LD_INT 1
84526: ARRAY
84527: PUSH
84528: LD_INT 3
84530: ARRAY
84531: ST_TO_ADDR
// if InArea ( x , y , area ) then
84532: LD_VAR 0 5
84536: PPUSH
84537: LD_VAR 0 6
84541: PPUSH
84542: LD_VAR 0 2
84546: PPUSH
84547: CALL_OW 309
84551: IFFALSE 84562
// ComStop ( unit ) ;
84553: LD_VAR 0 1
84557: PPUSH
84558: CALL_OW 141
// end ;
84562: LD_VAR 0 4
84566: RET
// export function Abs ( value ) ; begin
84567: LD_INT 0
84569: PPUSH
// result := value ;
84570: LD_ADDR_VAR 0 2
84574: PUSH
84575: LD_VAR 0 1
84579: ST_TO_ADDR
// if value < 0 then
84580: LD_VAR 0 1
84584: PUSH
84585: LD_INT 0
84587: LESS
84588: IFFALSE 84605
// result := value * - 1 ;
84590: LD_ADDR_VAR 0 2
84594: PUSH
84595: LD_VAR 0 1
84599: PUSH
84600: LD_INT 1
84602: NEG
84603: MUL
84604: ST_TO_ADDR
// end ;
84605: LD_VAR 0 2
84609: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
84610: LD_INT 0
84612: PPUSH
84613: PPUSH
84614: PPUSH
84615: PPUSH
84616: PPUSH
84617: PPUSH
84618: PPUSH
84619: PPUSH
// if not unit or not building then
84620: LD_VAR 0 1
84624: NOT
84625: PUSH
84626: LD_VAR 0 2
84630: NOT
84631: OR
84632: IFFALSE 84636
// exit ;
84634: GO 84862
// x := GetX ( building ) ;
84636: LD_ADDR_VAR 0 4
84640: PUSH
84641: LD_VAR 0 2
84645: PPUSH
84646: CALL_OW 250
84650: ST_TO_ADDR
// y := GetY ( building ) ;
84651: LD_ADDR_VAR 0 6
84655: PUSH
84656: LD_VAR 0 2
84660: PPUSH
84661: CALL_OW 251
84665: ST_TO_ADDR
// d := GetDir ( building ) ;
84666: LD_ADDR_VAR 0 8
84670: PUSH
84671: LD_VAR 0 2
84675: PPUSH
84676: CALL_OW 254
84680: ST_TO_ADDR
// r := 4 ;
84681: LD_ADDR_VAR 0 9
84685: PUSH
84686: LD_INT 4
84688: ST_TO_ADDR
// for i := 1 to 5 do
84689: LD_ADDR_VAR 0 10
84693: PUSH
84694: DOUBLE
84695: LD_INT 1
84697: DEC
84698: ST_TO_ADDR
84699: LD_INT 5
84701: PUSH
84702: FOR_TO
84703: IFFALSE 84860
// begin _x := ShiftX ( x , d , r + i ) ;
84705: LD_ADDR_VAR 0 5
84709: PUSH
84710: LD_VAR 0 4
84714: PPUSH
84715: LD_VAR 0 8
84719: PPUSH
84720: LD_VAR 0 9
84724: PUSH
84725: LD_VAR 0 10
84729: PLUS
84730: PPUSH
84731: CALL_OW 272
84735: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
84736: LD_ADDR_VAR 0 7
84740: PUSH
84741: LD_VAR 0 6
84745: PPUSH
84746: LD_VAR 0 8
84750: PPUSH
84751: LD_VAR 0 9
84755: PUSH
84756: LD_VAR 0 10
84760: PLUS
84761: PPUSH
84762: CALL_OW 273
84766: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
84767: LD_VAR 0 5
84771: PPUSH
84772: LD_VAR 0 7
84776: PPUSH
84777: CALL_OW 488
84781: PUSH
84782: LD_VAR 0 5
84786: PPUSH
84787: LD_VAR 0 7
84791: PPUSH
84792: CALL_OW 428
84796: PPUSH
84797: CALL_OW 247
84801: PUSH
84802: LD_INT 3
84804: PUSH
84805: LD_INT 2
84807: PUSH
84808: EMPTY
84809: LIST
84810: LIST
84811: IN
84812: NOT
84813: AND
84814: IFFALSE 84858
// begin ComMoveXY ( unit , _x , _y ) ;
84816: LD_VAR 0 1
84820: PPUSH
84821: LD_VAR 0 5
84825: PPUSH
84826: LD_VAR 0 7
84830: PPUSH
84831: CALL_OW 111
// result := [ _x , _y ] ;
84835: LD_ADDR_VAR 0 3
84839: PUSH
84840: LD_VAR 0 5
84844: PUSH
84845: LD_VAR 0 7
84849: PUSH
84850: EMPTY
84851: LIST
84852: LIST
84853: ST_TO_ADDR
// exit ;
84854: POP
84855: POP
84856: GO 84862
// end ; end ;
84858: GO 84702
84860: POP
84861: POP
// end ;
84862: LD_VAR 0 3
84866: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
84867: LD_INT 0
84869: PPUSH
84870: PPUSH
84871: PPUSH
// result := 0 ;
84872: LD_ADDR_VAR 0 3
84876: PUSH
84877: LD_INT 0
84879: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
84880: LD_VAR 0 1
84884: PUSH
84885: LD_INT 0
84887: LESS
84888: PUSH
84889: LD_VAR 0 1
84893: PUSH
84894: LD_INT 8
84896: GREATER
84897: OR
84898: PUSH
84899: LD_VAR 0 2
84903: PUSH
84904: LD_INT 0
84906: LESS
84907: OR
84908: PUSH
84909: LD_VAR 0 2
84913: PUSH
84914: LD_INT 8
84916: GREATER
84917: OR
84918: IFFALSE 84922
// exit ;
84920: GO 84997
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
84922: LD_ADDR_VAR 0 4
84926: PUSH
84927: LD_INT 22
84929: PUSH
84930: LD_VAR 0 2
84934: PUSH
84935: EMPTY
84936: LIST
84937: LIST
84938: PPUSH
84939: CALL_OW 69
84943: PUSH
84944: FOR_IN
84945: IFFALSE 84995
// begin un := UnitShoot ( i ) ;
84947: LD_ADDR_VAR 0 5
84951: PUSH
84952: LD_VAR 0 4
84956: PPUSH
84957: CALL_OW 504
84961: ST_TO_ADDR
// if GetSide ( un ) = side1 then
84962: LD_VAR 0 5
84966: PPUSH
84967: CALL_OW 255
84971: PUSH
84972: LD_VAR 0 1
84976: EQUAL
84977: IFFALSE 84993
// begin result := un ;
84979: LD_ADDR_VAR 0 3
84983: PUSH
84984: LD_VAR 0 5
84988: ST_TO_ADDR
// exit ;
84989: POP
84990: POP
84991: GO 84997
// end ; end ;
84993: GO 84944
84995: POP
84996: POP
// end ;
84997: LD_VAR 0 3
85001: RET
// export function GetCargoBay ( units ) ; begin
85002: LD_INT 0
85004: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
85005: LD_ADDR_VAR 0 2
85009: PUSH
85010: LD_VAR 0 1
85014: PPUSH
85015: LD_INT 2
85017: PUSH
85018: LD_INT 34
85020: PUSH
85021: LD_INT 12
85023: PUSH
85024: EMPTY
85025: LIST
85026: LIST
85027: PUSH
85028: LD_INT 34
85030: PUSH
85031: LD_INT 51
85033: PUSH
85034: EMPTY
85035: LIST
85036: LIST
85037: PUSH
85038: LD_INT 34
85040: PUSH
85041: LD_INT 32
85043: PUSH
85044: EMPTY
85045: LIST
85046: LIST
85047: PUSH
85048: LD_INT 34
85050: PUSH
85051: LD_EXP 70
85055: PUSH
85056: EMPTY
85057: LIST
85058: LIST
85059: PUSH
85060: EMPTY
85061: LIST
85062: LIST
85063: LIST
85064: LIST
85065: LIST
85066: PPUSH
85067: CALL_OW 72
85071: ST_TO_ADDR
// end ;
85072: LD_VAR 0 2
85076: RET
// export function Negate ( value ) ; begin
85077: LD_INT 0
85079: PPUSH
// result := not value ;
85080: LD_ADDR_VAR 0 2
85084: PUSH
85085: LD_VAR 0 1
85089: NOT
85090: ST_TO_ADDR
// end ;
85091: LD_VAR 0 2
85095: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
85096: LD_INT 0
85098: PPUSH
// if x1 = x2 then
85099: LD_VAR 0 1
85103: PUSH
85104: LD_VAR 0 3
85108: EQUAL
85109: IFFALSE 85143
// begin if y1 > y2 then
85111: LD_VAR 0 2
85115: PUSH
85116: LD_VAR 0 4
85120: GREATER
85121: IFFALSE 85133
// result := 0 else
85123: LD_ADDR_VAR 0 5
85127: PUSH
85128: LD_INT 0
85130: ST_TO_ADDR
85131: GO 85141
// result := 3 ;
85133: LD_ADDR_VAR 0 5
85137: PUSH
85138: LD_INT 3
85140: ST_TO_ADDR
// exit ;
85141: GO 85229
// end ; if y1 = y2 then
85143: LD_VAR 0 2
85147: PUSH
85148: LD_VAR 0 4
85152: EQUAL
85153: IFFALSE 85187
// begin if x1 > x2 then
85155: LD_VAR 0 1
85159: PUSH
85160: LD_VAR 0 3
85164: GREATER
85165: IFFALSE 85177
// result := 1 else
85167: LD_ADDR_VAR 0 5
85171: PUSH
85172: LD_INT 1
85174: ST_TO_ADDR
85175: GO 85185
// result := 4 ;
85177: LD_ADDR_VAR 0 5
85181: PUSH
85182: LD_INT 4
85184: ST_TO_ADDR
// exit ;
85185: GO 85229
// end ; if x1 > x2 and y1 > y2 then
85187: LD_VAR 0 1
85191: PUSH
85192: LD_VAR 0 3
85196: GREATER
85197: PUSH
85198: LD_VAR 0 2
85202: PUSH
85203: LD_VAR 0 4
85207: GREATER
85208: AND
85209: IFFALSE 85221
// result := 2 else
85211: LD_ADDR_VAR 0 5
85215: PUSH
85216: LD_INT 2
85218: ST_TO_ADDR
85219: GO 85229
// result := 5 ;
85221: LD_ADDR_VAR 0 5
85225: PUSH
85226: LD_INT 5
85228: ST_TO_ADDR
// end ;
85229: LD_VAR 0 5
85233: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
85234: LD_INT 0
85236: PPUSH
85237: PPUSH
// if not driver or not IsInUnit ( driver ) then
85238: LD_VAR 0 1
85242: NOT
85243: PUSH
85244: LD_VAR 0 1
85248: PPUSH
85249: CALL_OW 310
85253: NOT
85254: OR
85255: IFFALSE 85259
// exit ;
85257: GO 85349
// vehicle := IsInUnit ( driver ) ;
85259: LD_ADDR_VAR 0 3
85263: PUSH
85264: LD_VAR 0 1
85268: PPUSH
85269: CALL_OW 310
85273: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
85274: LD_VAR 0 1
85278: PPUSH
85279: LD_STRING \
85281: PUSH
85282: LD_INT 0
85284: PUSH
85285: LD_INT 0
85287: PUSH
85288: LD_INT 0
85290: PUSH
85291: LD_INT 0
85293: PUSH
85294: LD_INT 0
85296: PUSH
85297: LD_INT 0
85299: PUSH
85300: EMPTY
85301: LIST
85302: LIST
85303: LIST
85304: LIST
85305: LIST
85306: LIST
85307: LIST
85308: PUSH
85309: LD_STRING E
85311: PUSH
85312: LD_INT 0
85314: PUSH
85315: LD_INT 0
85317: PUSH
85318: LD_VAR 0 3
85322: PUSH
85323: LD_INT 0
85325: PUSH
85326: LD_INT 0
85328: PUSH
85329: LD_INT 0
85331: PUSH
85332: EMPTY
85333: LIST
85334: LIST
85335: LIST
85336: LIST
85337: LIST
85338: LIST
85339: LIST
85340: PUSH
85341: EMPTY
85342: LIST
85343: LIST
85344: PPUSH
85345: CALL_OW 446
// end ;
85349: LD_VAR 0 2
85353: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
85354: LD_INT 0
85356: PPUSH
85357: PPUSH
// if not driver or not IsInUnit ( driver ) then
85358: LD_VAR 0 1
85362: NOT
85363: PUSH
85364: LD_VAR 0 1
85368: PPUSH
85369: CALL_OW 310
85373: NOT
85374: OR
85375: IFFALSE 85379
// exit ;
85377: GO 85469
// vehicle := IsInUnit ( driver ) ;
85379: LD_ADDR_VAR 0 3
85383: PUSH
85384: LD_VAR 0 1
85388: PPUSH
85389: CALL_OW 310
85393: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
85394: LD_VAR 0 1
85398: PPUSH
85399: LD_STRING \
85401: PUSH
85402: LD_INT 0
85404: PUSH
85405: LD_INT 0
85407: PUSH
85408: LD_INT 0
85410: PUSH
85411: LD_INT 0
85413: PUSH
85414: LD_INT 0
85416: PUSH
85417: LD_INT 0
85419: PUSH
85420: EMPTY
85421: LIST
85422: LIST
85423: LIST
85424: LIST
85425: LIST
85426: LIST
85427: LIST
85428: PUSH
85429: LD_STRING E
85431: PUSH
85432: LD_INT 0
85434: PUSH
85435: LD_INT 0
85437: PUSH
85438: LD_VAR 0 3
85442: PUSH
85443: LD_INT 0
85445: PUSH
85446: LD_INT 0
85448: PUSH
85449: LD_INT 0
85451: PUSH
85452: EMPTY
85453: LIST
85454: LIST
85455: LIST
85456: LIST
85457: LIST
85458: LIST
85459: LIST
85460: PUSH
85461: EMPTY
85462: LIST
85463: LIST
85464: PPUSH
85465: CALL_OW 447
// end ;
85469: LD_VAR 0 2
85473: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
85474: LD_INT 0
85476: PPUSH
85477: PPUSH
85478: PPUSH
// tmp := [ ] ;
85479: LD_ADDR_VAR 0 5
85483: PUSH
85484: EMPTY
85485: ST_TO_ADDR
// for i in units do
85486: LD_ADDR_VAR 0 4
85490: PUSH
85491: LD_VAR 0 1
85495: PUSH
85496: FOR_IN
85497: IFFALSE 85535
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
85499: LD_ADDR_VAR 0 5
85503: PUSH
85504: LD_VAR 0 5
85508: PPUSH
85509: LD_VAR 0 5
85513: PUSH
85514: LD_INT 1
85516: PLUS
85517: PPUSH
85518: LD_VAR 0 4
85522: PPUSH
85523: CALL_OW 256
85527: PPUSH
85528: CALL_OW 2
85532: ST_TO_ADDR
85533: GO 85496
85535: POP
85536: POP
// if not tmp then
85537: LD_VAR 0 5
85541: NOT
85542: IFFALSE 85546
// exit ;
85544: GO 85594
// if asc then
85546: LD_VAR 0 2
85550: IFFALSE 85574
// result := SortListByListAsc ( units , tmp ) else
85552: LD_ADDR_VAR 0 3
85556: PUSH
85557: LD_VAR 0 1
85561: PPUSH
85562: LD_VAR 0 5
85566: PPUSH
85567: CALL_OW 76
85571: ST_TO_ADDR
85572: GO 85594
// result := SortListByListDesc ( units , tmp ) ;
85574: LD_ADDR_VAR 0 3
85578: PUSH
85579: LD_VAR 0 1
85583: PPUSH
85584: LD_VAR 0 5
85588: PPUSH
85589: CALL_OW 77
85593: ST_TO_ADDR
// end ;
85594: LD_VAR 0 3
85598: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
85599: LD_INT 0
85601: PPUSH
85602: PPUSH
// task := GetTaskList ( mech ) ;
85603: LD_ADDR_VAR 0 4
85607: PUSH
85608: LD_VAR 0 1
85612: PPUSH
85613: CALL_OW 437
85617: ST_TO_ADDR
// if not task then
85618: LD_VAR 0 4
85622: NOT
85623: IFFALSE 85627
// exit ;
85625: GO 85669
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
85627: LD_ADDR_VAR 0 3
85631: PUSH
85632: LD_VAR 0 4
85636: PUSH
85637: LD_INT 1
85639: ARRAY
85640: PUSH
85641: LD_INT 1
85643: ARRAY
85644: PUSH
85645: LD_STRING r
85647: EQUAL
85648: PUSH
85649: LD_VAR 0 4
85653: PUSH
85654: LD_INT 1
85656: ARRAY
85657: PUSH
85658: LD_INT 4
85660: ARRAY
85661: PUSH
85662: LD_VAR 0 2
85666: EQUAL
85667: AND
85668: ST_TO_ADDR
// end ;
85669: LD_VAR 0 3
85673: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
85674: LD_INT 0
85676: PPUSH
// SetDir ( unit , d ) ;
85677: LD_VAR 0 1
85681: PPUSH
85682: LD_VAR 0 4
85686: PPUSH
85687: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
85691: LD_VAR 0 1
85695: PPUSH
85696: LD_VAR 0 2
85700: PPUSH
85701: LD_VAR 0 3
85705: PPUSH
85706: LD_VAR 0 5
85710: PPUSH
85711: CALL_OW 48
// end ;
85715: LD_VAR 0 6
85719: RET
// export function ToNaturalNumber ( number ) ; begin
85720: LD_INT 0
85722: PPUSH
// result := number div 1 ;
85723: LD_ADDR_VAR 0 2
85727: PUSH
85728: LD_VAR 0 1
85732: PUSH
85733: LD_INT 1
85735: DIV
85736: ST_TO_ADDR
// if number < 0 then
85737: LD_VAR 0 1
85741: PUSH
85742: LD_INT 0
85744: LESS
85745: IFFALSE 85755
// result := 0 ;
85747: LD_ADDR_VAR 0 2
85751: PUSH
85752: LD_INT 0
85754: ST_TO_ADDR
// end ;
85755: LD_VAR 0 2
85759: RET
// export function SortByClass ( units , class ) ; var un ; begin
85760: LD_INT 0
85762: PPUSH
85763: PPUSH
// if not units or not class then
85764: LD_VAR 0 1
85768: NOT
85769: PUSH
85770: LD_VAR 0 2
85774: NOT
85775: OR
85776: IFFALSE 85780
// exit ;
85778: GO 85875
// result := [ ] ;
85780: LD_ADDR_VAR 0 3
85784: PUSH
85785: EMPTY
85786: ST_TO_ADDR
// for un in units do
85787: LD_ADDR_VAR 0 4
85791: PUSH
85792: LD_VAR 0 1
85796: PUSH
85797: FOR_IN
85798: IFFALSE 85873
// if GetClass ( un ) = class then
85800: LD_VAR 0 4
85804: PPUSH
85805: CALL_OW 257
85809: PUSH
85810: LD_VAR 0 2
85814: EQUAL
85815: IFFALSE 85842
// result := Insert ( result , 1 , un ) else
85817: LD_ADDR_VAR 0 3
85821: PUSH
85822: LD_VAR 0 3
85826: PPUSH
85827: LD_INT 1
85829: PPUSH
85830: LD_VAR 0 4
85834: PPUSH
85835: CALL_OW 2
85839: ST_TO_ADDR
85840: GO 85871
// result := Replace ( result , result + 1 , un ) ;
85842: LD_ADDR_VAR 0 3
85846: PUSH
85847: LD_VAR 0 3
85851: PPUSH
85852: LD_VAR 0 3
85856: PUSH
85857: LD_INT 1
85859: PLUS
85860: PPUSH
85861: LD_VAR 0 4
85865: PPUSH
85866: CALL_OW 1
85870: ST_TO_ADDR
85871: GO 85797
85873: POP
85874: POP
// end ;
85875: LD_VAR 0 3
85879: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
85880: LD_INT 0
85882: PPUSH
85883: PPUSH
85884: PPUSH
85885: PPUSH
85886: PPUSH
85887: PPUSH
85888: PPUSH
// result := [ ] ;
85889: LD_ADDR_VAR 0 4
85893: PUSH
85894: EMPTY
85895: ST_TO_ADDR
// if x - r < 0 then
85896: LD_VAR 0 1
85900: PUSH
85901: LD_VAR 0 3
85905: MINUS
85906: PUSH
85907: LD_INT 0
85909: LESS
85910: IFFALSE 85922
// min_x := 0 else
85912: LD_ADDR_VAR 0 8
85916: PUSH
85917: LD_INT 0
85919: ST_TO_ADDR
85920: GO 85938
// min_x := x - r ;
85922: LD_ADDR_VAR 0 8
85926: PUSH
85927: LD_VAR 0 1
85931: PUSH
85932: LD_VAR 0 3
85936: MINUS
85937: ST_TO_ADDR
// if y - r < 0 then
85938: LD_VAR 0 2
85942: PUSH
85943: LD_VAR 0 3
85947: MINUS
85948: PUSH
85949: LD_INT 0
85951: LESS
85952: IFFALSE 85964
// min_y := 0 else
85954: LD_ADDR_VAR 0 7
85958: PUSH
85959: LD_INT 0
85961: ST_TO_ADDR
85962: GO 85980
// min_y := y - r ;
85964: LD_ADDR_VAR 0 7
85968: PUSH
85969: LD_VAR 0 2
85973: PUSH
85974: LD_VAR 0 3
85978: MINUS
85979: ST_TO_ADDR
// max_x := x + r ;
85980: LD_ADDR_VAR 0 9
85984: PUSH
85985: LD_VAR 0 1
85989: PUSH
85990: LD_VAR 0 3
85994: PLUS
85995: ST_TO_ADDR
// max_y := y + r ;
85996: LD_ADDR_VAR 0 10
86000: PUSH
86001: LD_VAR 0 2
86005: PUSH
86006: LD_VAR 0 3
86010: PLUS
86011: ST_TO_ADDR
// for _x = min_x to max_x do
86012: LD_ADDR_VAR 0 5
86016: PUSH
86017: DOUBLE
86018: LD_VAR 0 8
86022: DEC
86023: ST_TO_ADDR
86024: LD_VAR 0 9
86028: PUSH
86029: FOR_TO
86030: IFFALSE 86131
// for _y = min_y to max_y do
86032: LD_ADDR_VAR 0 6
86036: PUSH
86037: DOUBLE
86038: LD_VAR 0 7
86042: DEC
86043: ST_TO_ADDR
86044: LD_VAR 0 10
86048: PUSH
86049: FOR_TO
86050: IFFALSE 86127
// begin if not ValidHex ( _x , _y ) then
86052: LD_VAR 0 5
86056: PPUSH
86057: LD_VAR 0 6
86061: PPUSH
86062: CALL_OW 488
86066: NOT
86067: IFFALSE 86071
// continue ;
86069: GO 86049
// if GetResourceTypeXY ( _x , _y ) then
86071: LD_VAR 0 5
86075: PPUSH
86076: LD_VAR 0 6
86080: PPUSH
86081: CALL_OW 283
86085: IFFALSE 86125
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
86087: LD_ADDR_VAR 0 4
86091: PUSH
86092: LD_VAR 0 4
86096: PPUSH
86097: LD_VAR 0 4
86101: PUSH
86102: LD_INT 1
86104: PLUS
86105: PPUSH
86106: LD_VAR 0 5
86110: PUSH
86111: LD_VAR 0 6
86115: PUSH
86116: EMPTY
86117: LIST
86118: LIST
86119: PPUSH
86120: CALL_OW 1
86124: ST_TO_ADDR
// end ;
86125: GO 86049
86127: POP
86128: POP
86129: GO 86029
86131: POP
86132: POP
// end ;
86133: LD_VAR 0 4
86137: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
86138: LD_INT 0
86140: PPUSH
86141: PPUSH
86142: PPUSH
86143: PPUSH
86144: PPUSH
86145: PPUSH
// if not units then
86146: LD_VAR 0 1
86150: NOT
86151: IFFALSE 86155
// exit ;
86153: GO 86556
// result := UnitFilter ( units , [ f_ok ] ) ;
86155: LD_ADDR_VAR 0 3
86159: PUSH
86160: LD_VAR 0 1
86164: PPUSH
86165: LD_INT 50
86167: PUSH
86168: EMPTY
86169: LIST
86170: PPUSH
86171: CALL_OW 72
86175: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
86176: LD_ADDR_VAR 0 7
86180: PUSH
86181: LD_VAR 0 1
86185: PUSH
86186: LD_INT 1
86188: ARRAY
86189: PPUSH
86190: CALL_OW 255
86194: ST_TO_ADDR
// if not result then
86195: LD_VAR 0 3
86199: NOT
86200: IFFALSE 86204
// exit ;
86202: GO 86556
// for i in result do
86204: LD_ADDR_VAR 0 4
86208: PUSH
86209: LD_VAR 0 3
86213: PUSH
86214: FOR_IN
86215: IFFALSE 86554
// begin tag := GetTag ( i ) + 1 ;
86217: LD_ADDR_VAR 0 8
86221: PUSH
86222: LD_VAR 0 4
86226: PPUSH
86227: CALL_OW 110
86231: PUSH
86232: LD_INT 1
86234: PLUS
86235: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
86236: LD_ADDR_VAR 0 6
86240: PUSH
86241: LD_VAR 0 4
86245: PPUSH
86246: CALL_OW 250
86250: PPUSH
86251: LD_VAR 0 4
86255: PPUSH
86256: CALL_OW 251
86260: PPUSH
86261: LD_INT 6
86263: PPUSH
86264: CALL 85880 0 3
86268: ST_TO_ADDR
// if cr then
86269: LD_VAR 0 6
86273: IFFALSE 86312
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
86275: LD_VAR 0 4
86279: PPUSH
86280: LD_VAR 0 6
86284: PUSH
86285: LD_INT 1
86287: ARRAY
86288: PUSH
86289: LD_INT 1
86291: ARRAY
86292: PPUSH
86293: LD_VAR 0 6
86297: PUSH
86298: LD_INT 1
86300: ARRAY
86301: PUSH
86302: LD_INT 2
86304: ARRAY
86305: PPUSH
86306: CALL_OW 116
86310: GO 86552
// if path > tag then
86312: LD_VAR 0 2
86316: PUSH
86317: LD_VAR 0 8
86321: GREATER
86322: IFFALSE 86500
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
86324: LD_ADDR_VAR 0 5
86328: PUSH
86329: LD_INT 81
86331: PUSH
86332: LD_VAR 0 7
86336: PUSH
86337: EMPTY
86338: LIST
86339: LIST
86340: PUSH
86341: LD_INT 91
86343: PUSH
86344: LD_VAR 0 4
86348: PUSH
86349: LD_INT 12
86351: PUSH
86352: EMPTY
86353: LIST
86354: LIST
86355: LIST
86356: PUSH
86357: EMPTY
86358: LIST
86359: LIST
86360: PPUSH
86361: CALL_OW 69
86365: ST_TO_ADDR
// if enemy then
86366: LD_VAR 0 5
86370: IFFALSE 86398
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
86372: LD_VAR 0 4
86376: PPUSH
86377: LD_VAR 0 5
86381: PPUSH
86382: LD_VAR 0 4
86386: PPUSH
86387: CALL_OW 74
86391: PPUSH
86392: CALL_OW 115
86396: GO 86498
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
86398: LD_VAR 0 4
86402: PPUSH
86403: LD_VAR 0 2
86407: PUSH
86408: LD_VAR 0 8
86412: ARRAY
86413: PUSH
86414: LD_INT 1
86416: ARRAY
86417: PPUSH
86418: LD_VAR 0 2
86422: PUSH
86423: LD_VAR 0 8
86427: ARRAY
86428: PUSH
86429: LD_INT 2
86431: ARRAY
86432: PPUSH
86433: CALL_OW 297
86437: PUSH
86438: LD_INT 6
86440: GREATER
86441: IFFALSE 86484
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
86443: LD_VAR 0 4
86447: PPUSH
86448: LD_VAR 0 2
86452: PUSH
86453: LD_VAR 0 8
86457: ARRAY
86458: PUSH
86459: LD_INT 1
86461: ARRAY
86462: PPUSH
86463: LD_VAR 0 2
86467: PUSH
86468: LD_VAR 0 8
86472: ARRAY
86473: PUSH
86474: LD_INT 2
86476: ARRAY
86477: PPUSH
86478: CALL_OW 114
86482: GO 86498
// SetTag ( i , tag ) ;
86484: LD_VAR 0 4
86488: PPUSH
86489: LD_VAR 0 8
86493: PPUSH
86494: CALL_OW 109
// end else
86498: GO 86552
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
86500: LD_ADDR_VAR 0 5
86504: PUSH
86505: LD_INT 81
86507: PUSH
86508: LD_VAR 0 7
86512: PUSH
86513: EMPTY
86514: LIST
86515: LIST
86516: PPUSH
86517: CALL_OW 69
86521: ST_TO_ADDR
// if enemy then
86522: LD_VAR 0 5
86526: IFFALSE 86552
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
86528: LD_VAR 0 4
86532: PPUSH
86533: LD_VAR 0 5
86537: PPUSH
86538: LD_VAR 0 4
86542: PPUSH
86543: CALL_OW 74
86547: PPUSH
86548: CALL_OW 115
// end ; end ;
86552: GO 86214
86554: POP
86555: POP
// end ; end_of_file
86556: LD_VAR 0 3
86560: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
86561: LD_VAR 0 1
86565: PUSH
86566: LD_INT 200
86568: DOUBLE
86569: GREATEREQUAL
86570: IFFALSE 86578
86572: LD_INT 299
86574: DOUBLE
86575: LESSEQUAL
86576: IFTRUE 86580
86578: GO 86612
86580: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
86581: LD_VAR 0 1
86585: PPUSH
86586: LD_VAR 0 2
86590: PPUSH
86591: LD_VAR 0 3
86595: PPUSH
86596: LD_VAR 0 4
86600: PPUSH
86601: LD_VAR 0 5
86605: PPUSH
86606: CALL 43123 0 5
86610: GO 86689
86612: LD_INT 300
86614: DOUBLE
86615: GREATEREQUAL
86616: IFFALSE 86624
86618: LD_INT 399
86620: DOUBLE
86621: LESSEQUAL
86622: IFTRUE 86626
86624: GO 86688
86626: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
86627: LD_VAR 0 1
86631: PPUSH
86632: LD_VAR 0 2
86636: PPUSH
86637: LD_VAR 0 3
86641: PPUSH
86642: LD_VAR 0 4
86646: PPUSH
86647: LD_VAR 0 5
86651: PPUSH
86652: LD_VAR 0 6
86656: PPUSH
86657: LD_VAR 0 7
86661: PPUSH
86662: LD_VAR 0 8
86666: PPUSH
86667: LD_VAR 0 9
86671: PPUSH
86672: LD_VAR 0 10
86676: PPUSH
86677: LD_VAR 0 11
86681: PPUSH
86682: CALL 41011 0 11
86686: GO 86689
86688: POP
// end ;
86689: PPOPN 11
86691: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
86692: LD_VAR 0 1
86696: PPUSH
86697: LD_VAR 0 2
86701: PPUSH
86702: LD_VAR 0 3
86706: PPUSH
86707: LD_VAR 0 4
86711: PPUSH
86712: LD_VAR 0 5
86716: PPUSH
86717: CALL 43105 0 5
// end ; end_of_file
86721: PPOPN 5
86723: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
86724: LD_VAR 0 1
86728: PPUSH
86729: LD_VAR 0 2
86733: PPUSH
86734: LD_VAR 0 3
86738: PPUSH
86739: LD_VAR 0 4
86743: PPUSH
86744: LD_VAR 0 5
86748: PPUSH
86749: LD_VAR 0 6
86753: PPUSH
86754: CALL 29819 0 6
// end ;
86758: PPOPN 6
86760: END
