// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 115 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// PrepareArabian ;
  33: CALL 3401 0 0
// PrepareAmerican ;
  37: CALL 1011 0 0
// PrepareRussian ;
  41: CALL 8661 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  45: LD_INT 4
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 4
  53: PUSH
  54: LD_INT 5
  56: PUSH
  57: LD_INT 5
  59: PUSH
  60: LD_INT 5
  62: PUSH
  63: EMPTY
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: PUSH
  69: LD_OWVAR 67
  73: ARRAY
  74: PPUSH
  75: LD_INT 2
  77: PPUSH
  78: LD_INT 1
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 2
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: LD_INT 2
  92: PPUSH
  93: CALL 88886 0 9
// Action ;
  97: CALL 25484 0 0
// if debug then
 101: LD_EXP 1
 105: IFFALSE 114
// FogOff ( 1 ) ;
 107: LD_INT 1
 109: PPUSH
 110: CALL_OW 344
// end ;
 114: END
// export debug , mission_prefix , arBaseActive , arabianAttack , khatamStatus , seenRussianTeleport , joinedToEpsilon , arabianDefeated , hasBase , epsilon , escapeKhatam , arabianAttackSpawned , gensherEscaped , ruScriptActive , ruScriptActive2 , firstAttack , dialogRussianSpaceAmmo , russianWaveAttack , spawnedRussians , hasSniper , arabianEscapedCounter , ruActiveAttacks ; function Init ; begin
 115: LD_INT 0
 117: PPUSH
// debug := false ;
 118: LD_ADDR_EXP 1
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// mission_prefix := 08c_ ;
 126: LD_ADDR_EXP 2
 130: PUSH
 131: LD_STRING 08c_
 133: ST_TO_ADDR
// arBaseActive := true ;
 134: LD_ADDR_EXP 3
 138: PUSH
 139: LD_INT 1
 141: ST_TO_ADDR
// arabianAttack := false ;
 142: LD_ADDR_EXP 4
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// khatamStatus := false ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// seenRussianTeleport := false ;
 158: LD_ADDR_EXP 6
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// joinedToEpsilon := false ;
 166: LD_ADDR_EXP 7
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// arabianDefeated := false ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// arabianAttackSpawned := false ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// gensherEscaped := false ;
 190: LD_ADDR_EXP 13
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// hasBase := false ;
 198: LD_ADDR_EXP 9
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// epsilon := 0 ;
 206: LD_ADDR_EXP 10
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// escapeKhatam := false ;
 214: LD_ADDR_EXP 11
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// ruScriptActive := false ;
 222: LD_ADDR_EXP 14
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// ruScriptActive2 := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// firstAttack := false ;
 238: LD_ADDR_EXP 16
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// dialogRussianSpaceAmmo := false ;
 246: LD_ADDR_EXP 17
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// russianWaveAttack := 0 ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// spawnedRussians := false ;
 262: LD_ADDR_EXP 19
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// hasSniper := false ;
 270: LD_ADDR_EXP 20
 274: PUSH
 275: LD_INT 0
 277: ST_TO_ADDR
// arabianEscapedCounter := 0 ;
 278: LD_ADDR_EXP 21
 282: PUSH
 283: LD_INT 0
 285: ST_TO_ADDR
// ruActiveAttacks := false ;
 286: LD_ADDR_EXP 22
 290: PUSH
 291: LD_INT 0
 293: ST_TO_ADDR
// ruTransportDestroyed := false ;
 294: LD_ADDR_EXP 78
 298: PUSH
 299: LD_INT 0
 301: ST_TO_ADDR
// end ;
 302: LD_VAR 0 1
 306: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) do
 307: LD_INT 22
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 25
 319: PUSH
 320: LD_INT 5
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PPUSH
 331: CALL_OW 69
 335: IFFALSE 348
 337: GO 339
 339: DISABLE
// hasSniper := true ;
 340: LD_ADDR_EXP 20
 344: PUSH
 345: LD_INT 1
 347: ST_TO_ADDR
 348: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and not arabianAttack and spawnedRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 349: LD_INT 1
 351: PPUSH
 352: LD_INT 2
 354: PPUSH
 355: CALL_OW 81
 359: PUSH
 360: LD_INT 1
 362: EQUAL
 363: PUSH
 364: LD_EXP 4
 368: NOT
 369: AND
 370: PUSH
 371: LD_EXP 19
 375: AND
 376: PUSH
 377: LD_INT 22
 379: PUSH
 380: LD_INT 3
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PPUSH
 387: CALL_OW 69
 391: PUSH
 392: LD_INT 0
 394: EQUAL
 395: AND
 396: IFFALSE 408
 398: GO 400
 400: DISABLE
// SetAchievement ( ACH_POWER ) ;
 401: LD_STRING ACH_POWER
 403: PPUSH
 404: CALL_OW 543
 408: END
// every 0 0$1 trigger spawnedRussians and not ruBase and not ruBase2 and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 409: LD_EXP 19
 413: PUSH
 414: LD_EXP 68
 418: NOT
 419: AND
 420: PUSH
 421: LD_EXP 69
 425: NOT
 426: AND
 427: PUSH
 428: LD_INT 22
 430: PUSH
 431: LD_INT 3
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PPUSH
 438: CALL_OW 69
 442: PUSH
 443: LD_INT 0
 445: EQUAL
 446: AND
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_TACT ) ;
 452: LD_STRING ACH_TACT
 454: PPUSH
 455: CALL_OW 543
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: LD_INT 22
 491: PUSH
 492: LD_INT 1
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 30
 501: PUSH
 502: LD_INT 32
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PPUSH
 513: CALL_OW 69
 517: AND
 518: PUSH
 519: LD_INT 22
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: LD_INT 30
 531: PUSH
 532: LD_INT 33
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PPUSH
 543: CALL_OW 69
 547: AND
 548: PUSH
 549: LD_INT 22
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 30
 561: PUSH
 562: LD_INT 5
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: AND
 578: PUSH
 579: LD_INT 22
 581: PUSH
 582: LD_INT 1
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: LD_INT 30
 591: PUSH
 592: LD_INT 3
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PPUSH
 603: CALL_OW 69
 607: AND
 608: PUSH
 609: LD_INT 22
 611: PUSH
 612: LD_INT 1
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: PUSH
 619: LD_INT 30
 621: PUSH
 622: LD_INT 36
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PPUSH
 633: CALL_OW 69
 637: AND
 638: PUSH
 639: LD_INT 22
 641: PUSH
 642: LD_INT 1
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 30
 651: PUSH
 652: LD_INT 31
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PPUSH
 663: CALL_OW 69
 667: AND
 668: PUSH
 669: LD_INT 22
 671: PUSH
 672: LD_INT 1
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: PUSH
 679: LD_INT 30
 681: PUSH
 682: LD_INT 22
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PUSH
 689: EMPTY
 690: LIST
 691: LIST
 692: PPUSH
 693: CALL_OW 69
 697: AND
 698: PUSH
 699: LD_INT 22
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: PUSH
 709: LD_INT 30
 711: PUSH
 712: LD_INT 20
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PPUSH
 723: CALL_OW 69
 727: AND
 728: PUSH
 729: LD_INT 22
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PUSH
 739: LD_INT 30
 741: PUSH
 742: LD_INT 19
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PPUSH
 753: CALL_OW 69
 757: AND
 758: PUSH
 759: LD_INT 22
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PUSH
 769: LD_INT 30
 771: PUSH
 772: LD_INT 16
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PPUSH
 783: CALL_OW 69
 787: AND
 788: PUSH
 789: LD_INT 22
 791: PUSH
 792: LD_INT 1
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 30
 801: PUSH
 802: LD_INT 17
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: PPUSH
 813: CALL_OW 69
 817: AND
 818: PUSH
 819: LD_INT 22
 821: PUSH
 822: LD_INT 1
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: LD_INT 30
 831: PUSH
 832: LD_INT 21
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PPUSH
 843: CALL_OW 69
 847: AND
 848: PUSH
 849: LD_INT 22
 851: PUSH
 852: LD_INT 1
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: PUSH
 859: LD_INT 30
 861: PUSH
 862: LD_INT 29
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: PPUSH
 873: CALL_OW 69
 877: AND
 878: PUSH
 879: LD_INT 22
 881: PUSH
 882: LD_INT 1
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: PUSH
 889: LD_INT 30
 891: PUSH
 892: LD_INT 30
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: PPUSH
 903: CALL_OW 69
 907: AND
 908: PUSH
 909: LD_INT 22
 911: PUSH
 912: LD_INT 1
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: PUSH
 919: LD_INT 30
 921: PUSH
 922: LD_INT 27
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PPUSH
 933: CALL_OW 69
 937: AND
 938: PUSH
 939: LD_INT 22
 941: PUSH
 942: LD_INT 1
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: LD_INT 30
 951: PUSH
 952: LD_INT 26
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PPUSH
 963: CALL_OW 69
 967: AND
 968: PUSH
 969: LD_INT 22
 971: PUSH
 972: LD_INT 1
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 30
 981: PUSH
 982: LD_INT 28
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: PPUSH
 993: CALL_OW 69
 997: AND
 998: IFFALSE 1010
1000: GO 1002
1002: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1003: LD_STRING ACH_ARCH
1005: PPUSH
1006: CALL_OW 543
1010: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Mike ; export Cornell , Truman , Powell ; export JMMSquad , others , others09 , ape09 ; export function PrepareAmerican ; var i , j , veh , vehs , sibRes , tmp , amount ; begin
1011: LD_INT 0
1013: PPUSH
1014: PPUSH
1015: PPUSH
1016: PPUSH
1017: PPUSH
1018: PPUSH
1019: PPUSH
1020: PPUSH
// uc_nation := nation_american ;
1021: LD_ADDR_OWVAR 21
1025: PUSH
1026: LD_INT 1
1028: ST_TO_ADDR
// uc_side := 4 ;
1029: LD_ADDR_OWVAR 20
1033: PUSH
1034: LD_INT 4
1036: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1037: LD_ADDR_EXP 44
1041: PUSH
1042: LD_STRING Powell
1044: PPUSH
1045: LD_INT 0
1047: PPUSH
1048: LD_STRING 
1050: PPUSH
1051: CALL 54507 0 3
1055: ST_TO_ADDR
// uc_side := 1 ;
1056: LD_ADDR_OWVAR 20
1060: PUSH
1061: LD_INT 1
1063: ST_TO_ADDR
// JMMSquad := [ ] ;
1064: LD_ADDR_EXP 45
1068: PUSH
1069: EMPTY
1070: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 10_ ) ;
1071: LD_ADDR_EXP 23
1075: PUSH
1076: LD_STRING JMM
1078: PPUSH
1079: LD_EXP 1
1083: NOT
1084: PPUSH
1085: LD_STRING 10_
1087: PPUSH
1088: CALL 54507 0 3
1092: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 10_ ) ;
1093: LD_ADDR_EXP 32
1097: PUSH
1098: LD_STRING Gary
1100: PPUSH
1101: LD_EXP 1
1105: NOT
1106: PPUSH
1107: LD_STRING 10_
1109: PPUSH
1110: CALL 54507 0 3
1114: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 10_ ) ;
1115: LD_ADDR_EXP 27
1119: PUSH
1120: LD_STRING Cyrus
1122: PPUSH
1123: LD_EXP 1
1127: NOT
1128: PPUSH
1129: LD_STRING 10_
1131: PPUSH
1132: CALL 54507 0 3
1136: ST_TO_ADDR
// if Cyrus then
1137: LD_EXP 27
1141: IFFALSE 1159
// JMMSquad := JMMSquad ^ Cyrus ;
1143: LD_ADDR_EXP 45
1147: PUSH
1148: LD_EXP 45
1152: PUSH
1153: LD_EXP 27
1157: ADD
1158: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 10_ ) ;
1159: LD_ADDR_EXP 26
1163: PUSH
1164: LD_STRING Bobby
1166: PPUSH
1167: LD_EXP 1
1171: NOT
1172: PPUSH
1173: LD_STRING 10_
1175: PPUSH
1176: CALL 54507 0 3
1180: ST_TO_ADDR
// if Bobby then
1181: LD_EXP 26
1185: IFFALSE 1203
// JMMSquad := JMMSquad ^ Bobby ;
1187: LD_ADDR_EXP 45
1191: PUSH
1192: LD_EXP 45
1196: PUSH
1197: LD_EXP 26
1201: ADD
1202: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 10_ ) ;
1203: LD_ADDR_EXP 28
1207: PUSH
1208: LD_STRING Lisa
1210: PPUSH
1211: LD_EXP 1
1215: NOT
1216: PPUSH
1217: LD_STRING 10_
1219: PPUSH
1220: CALL 54507 0 3
1224: ST_TO_ADDR
// if Lisa then
1225: LD_EXP 28
1229: IFFALSE 1247
// JMMSquad := JMMSquad ^ Lisa ;
1231: LD_ADDR_EXP 45
1235: PUSH
1236: LD_EXP 45
1240: PUSH
1241: LD_EXP 28
1245: ADD
1246: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 10_ ) ;
1247: LD_ADDR_EXP 24
1251: PUSH
1252: LD_STRING Brown
1254: PPUSH
1255: LD_EXP 1
1259: NOT
1260: PPUSH
1261: LD_STRING 10_
1263: PPUSH
1264: CALL 54507 0 3
1268: ST_TO_ADDR
// if Brown then
1269: LD_EXP 24
1273: IFFALSE 1291
// JMMSquad := JMMSquad ^ Brown ;
1275: LD_ADDR_EXP 45
1279: PUSH
1280: LD_EXP 45
1284: PUSH
1285: LD_EXP 24
1289: ADD
1290: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 10_ ) ;
1291: LD_ADDR_EXP 25
1295: PUSH
1296: LD_STRING Donaldson
1298: PPUSH
1299: LD_EXP 1
1303: NOT
1304: PPUSH
1305: LD_STRING 10_
1307: PPUSH
1308: CALL 54507 0 3
1312: ST_TO_ADDR
// if Donaldson then
1313: LD_EXP 25
1317: IFFALSE 1335
// JMMSquad := JMMSquad ^ Donaldson ;
1319: LD_ADDR_EXP 45
1323: PUSH
1324: LD_EXP 45
1328: PUSH
1329: LD_EXP 25
1333: ADD
1334: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 10_ ) ;
1335: LD_ADDR_EXP 29
1339: PUSH
1340: LD_STRING Frank
1342: PPUSH
1343: LD_EXP 1
1347: NOT
1348: PPUSH
1349: LD_STRING 10_
1351: PPUSH
1352: CALL 54507 0 3
1356: ST_TO_ADDR
// if Frank then
1357: LD_EXP 29
1361: IFFALSE 1379
// JMMSquad := JMMSquad ^ Frank ;
1363: LD_ADDR_EXP 45
1367: PUSH
1368: LD_EXP 45
1372: PUSH
1373: LD_EXP 29
1377: ADD
1378: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 10_ ) ;
1379: LD_ADDR_EXP 31
1383: PUSH
1384: LD_STRING Houten
1386: PPUSH
1387: LD_EXP 1
1391: NOT
1392: PPUSH
1393: LD_STRING 10_
1395: PPUSH
1396: CALL 54507 0 3
1400: ST_TO_ADDR
// if Houten then
1401: LD_EXP 31
1405: IFFALSE 1423
// JMMSquad := JMMSquad ^ Houten ;
1407: LD_ADDR_EXP 45
1411: PUSH
1412: LD_EXP 45
1416: PUSH
1417: LD_EXP 31
1421: ADD
1422: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn10 ) ;
1423: LD_ADDR_EXP 46
1427: PUSH
1428: LD_STRING OthersIn10
1430: PPUSH
1431: CALL_OW 31
1435: ST_TO_ADDR
// if Count ( JMMSquad ) + Count ( others ) < 9 then
1436: LD_EXP 45
1440: PPUSH
1441: CALL 56609 0 1
1445: PUSH
1446: LD_EXP 46
1450: PPUSH
1451: CALL 56609 0 1
1455: PLUS
1456: PUSH
1457: LD_INT 9
1459: LESS
1460: IFFALSE 1547
// begin InitHC_All ( ) ;
1462: CALL_OW 584
// for i := 9 downto Count ( JMMSquad ) + Count ( others ) do
1466: LD_ADDR_VAR 0 2
1470: PUSH
1471: DOUBLE
1472: LD_INT 9
1474: INC
1475: ST_TO_ADDR
1476: LD_EXP 45
1480: PPUSH
1481: CALL 56609 0 1
1485: PUSH
1486: LD_EXP 46
1490: PPUSH
1491: CALL 56609 0 1
1495: PLUS
1496: PUSH
1497: FOR_DOWNTO
1498: IFFALSE 1545
// begin PrepareHuman ( false , i mod 4 + 1 , 5 ) ;
1500: LD_INT 0
1502: PPUSH
1503: LD_VAR 0 2
1507: PUSH
1508: LD_INT 4
1510: MOD
1511: PUSH
1512: LD_INT 1
1514: PLUS
1515: PPUSH
1516: LD_INT 5
1518: PPUSH
1519: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1523: LD_ADDR_EXP 46
1527: PUSH
1528: LD_EXP 46
1532: PPUSH
1533: CALL_OW 44
1537: PPUSH
1538: CALL 92209 0 2
1542: ST_TO_ADDR
// end ;
1543: GO 1497
1545: POP
1546: POP
// end ; if debug then
1547: LD_EXP 1
1551: IFFALSE 1592
// result := [ Cyrus , Bobby , Lisa , Donaldson , Brown ] else
1553: LD_ADDR_VAR 0 1
1557: PUSH
1558: LD_EXP 27
1562: PUSH
1563: LD_EXP 26
1567: PUSH
1568: LD_EXP 28
1572: PUSH
1573: LD_EXP 25
1577: PUSH
1578: LD_EXP 24
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: ST_TO_ADDR
1590: GO 1755
// result := CharacterSelection ( 1 , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ sel_not_changeable , sel_hired , sel_change_class ] ^ JMM ^ Gary ^ [ sel_not_hired , sel_changeable , sel_change_class ] ^ JMMSquad ^ others ^ [ sel_not_changeable , sel_not_hired ] ^ Powell , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , class_scientistic ] ) ;
1592: LD_ADDR_VAR 0 1
1596: PUSH
1597: LD_STRING 1
1599: PPUSH
1600: LD_INT 6
1602: PUSH
1603: LD_INT 5
1605: PUSH
1606: LD_INT 4
1608: PUSH
1609: LD_INT 4
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: PUSH
1618: LD_OWVAR 67
1622: ARRAY
1623: PPUSH
1624: LD_INT 6
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: LD_INT 4
1632: PUSH
1633: LD_INT 4
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_OWVAR 67
1646: ARRAY
1647: PPUSH
1648: LD_INT -4
1650: PUSH
1651: LD_INT -1
1653: PUSH
1654: LD_INT -5
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: PUSH
1662: LD_EXP 23
1666: ADD
1667: PUSH
1668: LD_EXP 32
1672: ADD
1673: PUSH
1674: LD_INT -2
1676: PUSH
1677: LD_INT -3
1679: PUSH
1680: LD_INT -5
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: LIST
1687: ADD
1688: PUSH
1689: LD_EXP 45
1693: ADD
1694: PUSH
1695: LD_EXP 46
1699: ADD
1700: PUSH
1701: LD_INT -4
1703: PUSH
1704: LD_INT -2
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: ADD
1711: PUSH
1712: LD_EXP 44
1716: ADD
1717: PPUSH
1718: LD_INT 1
1720: PUSH
1721: LD_INT 3
1723: PUSH
1724: LD_INT 1
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PUSH
1731: LD_INT 2
1733: PUSH
1734: LD_INT 1
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PUSH
1741: LD_INT 4
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: PPUSH
1750: CALL_OW 42
1754: ST_TO_ADDR
// result := JoinUnion ( result , JMM ) ;
1755: LD_ADDR_VAR 0 1
1759: PUSH
1760: LD_VAR 0 1
1764: PPUSH
1765: LD_EXP 23
1769: PPUSH
1770: CALL 92246 0 2
1774: ST_TO_ADDR
// if Gary then
1775: LD_EXP 32
1779: IFFALSE 1801
// result := JoinUnion ( result , Gary ) ;
1781: LD_ADDR_VAR 0 1
1785: PUSH
1786: LD_VAR 0 1
1790: PPUSH
1791: LD_EXP 32
1795: PPUSH
1796: CALL 92246 0 2
1800: ST_TO_ADDR
// if Count ( others ) then
1801: LD_EXP 46
1805: PPUSH
1806: CALL 56609 0 1
1810: IFFALSE 1828
// others := others diff result ;
1812: LD_ADDR_EXP 46
1816: PUSH
1817: LD_EXP 46
1821: PUSH
1822: LD_VAR 0 1
1826: DIFF
1827: ST_TO_ADDR
// vehs := [ ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: EMPTY
1834: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1835: LD_INT 2
1837: PPUSH
1838: LD_INT 1
1840: PPUSH
1841: LD_INT 1
1843: PPUSH
1844: LD_INT 12
1846: PPUSH
1847: LD_INT 50
1849: PPUSH
1850: CALL 59347 0 5
// veh := CreateVehicle ;
1854: LD_ADDR_VAR 0 4
1858: PUSH
1859: CALL_OW 45
1863: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1864: LD_ADDR_VAR 0 5
1868: PUSH
1869: LD_VAR 0 5
1873: PPUSH
1874: LD_VAR 0 4
1878: PPUSH
1879: CALL 92209 0 2
1883: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1884: LD_VAR 0 4
1888: PPUSH
1889: LD_INT 1
1891: PPUSH
1892: CALL_OW 233
// sibRes := LoadVariable ( 09_sibRes , 100 ) - 20 ;
1896: LD_ADDR_VAR 0 6
1900: PUSH
1901: LD_STRING 09_sibRes
1903: PPUSH
1904: LD_INT 100
1906: PPUSH
1907: CALL_OW 30
1911: PUSH
1912: LD_INT 20
1914: MINUS
1915: ST_TO_ADDR
// if sibRes >= 100 then
1916: LD_VAR 0 6
1920: PUSH
1921: LD_INT 100
1923: GREATEREQUAL
1924: IFFALSE 1943
// SetCargo ( veh , mat_siberit , 100 ) else
1926: LD_VAR 0 4
1930: PPUSH
1931: LD_INT 3
1933: PPUSH
1934: LD_INT 100
1936: PPUSH
1937: CALL_OW 290
1941: GO 1960
// SetCargo ( veh , mat_siberit , sibRes ) ;
1943: LD_VAR 0 4
1947: PPUSH
1948: LD_INT 3
1950: PPUSH
1951: LD_VAR 0 6
1955: PPUSH
1956: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1960: LD_INT 2
1962: PPUSH
1963: LD_INT 1
1965: PPUSH
1966: LD_INT 1
1968: PPUSH
1969: LD_INT 12
1971: PPUSH
1972: LD_INT 50
1974: PPUSH
1975: CALL 59347 0 5
// veh := CreateVehicle ;
1979: LD_ADDR_VAR 0 4
1983: PUSH
1984: CALL_OW 45
1988: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1989: LD_ADDR_VAR 0 5
1993: PUSH
1994: LD_VAR 0 5
1998: PPUSH
1999: LD_VAR 0 4
2003: PPUSH
2004: CALL 92209 0 2
2008: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2009: LD_VAR 0 4
2013: PPUSH
2014: LD_INT 1
2016: PPUSH
2017: CALL_OW 233
// SetCargo ( veh , mat_cans , 100 ) ;
2021: LD_VAR 0 4
2025: PPUSH
2026: LD_INT 1
2028: PPUSH
2029: LD_INT 100
2031: PPUSH
2032: CALL_OW 290
// for i := 1 to Count ( result ) - 2 do
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: DOUBLE
2042: LD_INT 1
2044: DEC
2045: ST_TO_ADDR
2046: LD_VAR 0 1
2050: PPUSH
2051: CALL 56609 0 1
2055: PUSH
2056: LD_INT 2
2058: MINUS
2059: PUSH
2060: FOR_TO
2061: IFFALSE 2167
// begin PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , [ us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun ] [ i mod 5 + 1 ] , rand ( 45 , 55 ) ) ;
2063: LD_INT 2
2065: PPUSH
2066: LD_INT 1
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 3
2074: PUSH
2075: LD_INT 4
2077: PUSH
2078: LD_INT 5
2080: PUSH
2081: LD_INT 11
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: PUSH
2094: LD_VAR 0 2
2098: PUSH
2099: LD_INT 5
2101: MOD
2102: PUSH
2103: LD_INT 1
2105: PLUS
2106: ARRAY
2107: PPUSH
2108: LD_INT 45
2110: PPUSH
2111: LD_INT 55
2113: PPUSH
2114: CALL_OW 12
2118: PPUSH
2119: CALL 59347 0 5
// veh := CreateVehicle ;
2123: LD_ADDR_VAR 0 4
2127: PUSH
2128: CALL_OW 45
2132: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
2133: LD_ADDR_VAR 0 5
2137: PUSH
2138: LD_VAR 0 5
2142: PPUSH
2143: LD_VAR 0 4
2147: PPUSH
2148: CALL 92209 0 2
2152: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 1
2160: PPUSH
2161: CALL_OW 233
// end ;
2165: GO 2060
2167: POP
2168: POP
// for i in vehs do
2169: LD_ADDR_VAR 0 2
2173: PUSH
2174: LD_VAR 0 5
2178: PUSH
2179: FOR_IN
2180: IFFALSE 2235
// begin PlaceUnitArea ( i , startArea , false ) ;
2182: LD_VAR 0 2
2186: PPUSH
2187: LD_INT 3
2189: PPUSH
2190: LD_INT 0
2192: PPUSH
2193: CALL_OW 49
// PlaceHumanInUnit ( result [ 1 ] , i ) ;
2197: LD_VAR 0 1
2201: PUSH
2202: LD_INT 1
2204: ARRAY
2205: PPUSH
2206: LD_VAR 0 2
2210: PPUSH
2211: CALL_OW 52
// result := Delete ( result , 1 ) ;
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: LD_VAR 0 1
2224: PPUSH
2225: LD_INT 1
2227: PPUSH
2228: CALL_OW 3
2232: ST_TO_ADDR
// end ;
2233: GO 2179
2235: POP
2236: POP
// uc_side := 4 ;
2237: LD_ADDR_OWVAR 20
2241: PUSH
2242: LD_INT 4
2244: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , debug ) then
2245: LD_STRING 08_SikorskiStatus
2247: PPUSH
2248: LD_EXP 1
2252: PPUSH
2253: CALL_OW 30
2257: IFFALSE 2278
// Truman := PrepareUnit ( Truman , false ,  ) ;
2259: LD_ADDR_EXP 43
2263: PUSH
2264: LD_STRING Truman
2266: PPUSH
2267: LD_INT 0
2269: PPUSH
2270: LD_STRING 
2272: PPUSH
2273: CALL 54507 0 3
2277: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , false ,  ) ;
2278: LD_ADDR_EXP 33
2282: PUSH
2283: LD_STRING Simms
2285: PPUSH
2286: LD_INT 0
2288: PPUSH
2289: LD_STRING 
2291: PPUSH
2292: CALL 54507 0 3
2296: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 08_ ) ;
2297: LD_ADDR_EXP 34
2301: PUSH
2302: LD_STRING Denis
2304: PPUSH
2305: LD_EXP 1
2309: NOT
2310: PPUSH
2311: LD_STRING 08_
2313: PPUSH
2314: CALL 54507 0 3
2318: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 08_ ) ;
2319: LD_ADDR_EXP 35
2323: PUSH
2324: LD_STRING Joan
2326: PPUSH
2327: LD_EXP 1
2331: NOT
2332: PPUSH
2333: LD_STRING 08_
2335: PPUSH
2336: CALL 54507 0 3
2340: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 08_ ) ;
2341: LD_ADDR_EXP 41
2345: PUSH
2346: LD_STRING Mike
2348: PPUSH
2349: LD_EXP 1
2353: NOT
2354: PPUSH
2355: LD_STRING 08_
2357: PPUSH
2358: CALL 54507 0 3
2362: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2363: LD_STRING 08_Khatam
2365: PPUSH
2366: CALL_OW 28
2370: IFFALSE 2393
// Khatam := PrepareUnit ( Khatam , true , 08_ ) else
2372: LD_ADDR_EXP 36
2376: PUSH
2377: LD_STRING Khatam
2379: PPUSH
2380: LD_INT 1
2382: PPUSH
2383: LD_STRING 08_
2385: PPUSH
2386: CALL 54507 0 3
2390: ST_TO_ADDR
2391: GO 2421
// if TestCharacters ( 03_Khatam ) then
2393: LD_STRING 03_Khatam
2395: PPUSH
2396: CALL_OW 28
2400: IFFALSE 2421
// Khatam := PrepareUnit ( Khatam , true , 03_ ) ;
2402: LD_ADDR_EXP 36
2406: PUSH
2407: LD_STRING Khatam
2409: PPUSH
2410: LD_INT 1
2412: PPUSH
2413: LD_STRING 03_
2415: PPUSH
2416: CALL 54507 0 3
2420: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 08_ ) ;
2421: LD_ADDR_EXP 37
2425: PUSH
2426: LD_STRING Gladstone
2428: PPUSH
2429: LD_EXP 1
2433: NOT
2434: PPUSH
2435: LD_STRING 08_
2437: PPUSH
2438: CALL 54507 0 3
2442: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) ,  ) ;
2443: LD_ADDR_EXP 39
2447: PUSH
2448: LD_STRING DeltaDoctor
2450: PPUSH
2451: LD_EXP 1
2455: NOT
2456: PPUSH
2457: LD_STRING 
2459: PPUSH
2460: CALL 54507 0 3
2464: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 08_ ) ;
2465: LD_ADDR_EXP 29
2469: PUSH
2470: LD_STRING Frank
2472: PPUSH
2473: LD_EXP 1
2477: NOT
2478: PPUSH
2479: LD_STRING 08_
2481: PPUSH
2482: CALL 54507 0 3
2486: ST_TO_ADDR
// if Frank then
2487: LD_EXP 29
2491: IFFALSE 2514
// Kikuchi := PrepareUnit ( Yamoko , false ,  ) else
2493: LD_ADDR_EXP 30
2497: PUSH
2498: LD_STRING Yamoko
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: LD_STRING 
2506: PPUSH
2507: CALL 54507 0 3
2511: ST_TO_ADDR
2512: GO 2536
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 08_ ) ;
2514: LD_ADDR_EXP 30
2518: PUSH
2519: LD_STRING Kikuchi
2521: PPUSH
2522: LD_EXP 1
2526: NOT
2527: PPUSH
2528: LD_STRING 08_
2530: PPUSH
2531: CALL 54507 0 3
2535: ST_TO_ADDR
// others09 := CreateCharacterSet ( 09_others ) ;
2536: LD_ADDR_EXP 47
2540: PUSH
2541: LD_STRING 09_others
2543: PPUSH
2544: CALL_OW 31
2548: ST_TO_ADDR
// ape09 := CreateCharacterSet ( 09_apes ) ;
2549: LD_ADDR_EXP 48
2553: PUSH
2554: LD_STRING 09_apes
2556: PPUSH
2557: CALL_OW 31
2561: ST_TO_ADDR
// if Truman then
2562: LD_EXP 43
2566: IFFALSE 2583
// PlaceUnitArea ( Truman , epsilonSpawnArea , false ) ;
2568: LD_EXP 43
2572: PPUSH
2573: LD_INT 4
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 49
// if Mike then
2583: LD_EXP 41
2587: IFFALSE 2604
// PlaceUnitArea ( Mike , epsilonSpawnArea , false ) ;
2589: LD_EXP 41
2593: PPUSH
2594: LD_INT 4
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 49
// if Simms then
2604: LD_EXP 33
2608: IFFALSE 2625
// PlaceUnitArea ( Simms , epsilonSpawnArea , false ) ;
2610: LD_EXP 33
2614: PPUSH
2615: LD_INT 4
2617: PPUSH
2618: LD_INT 0
2620: PPUSH
2621: CALL_OW 49
// if Denis then
2625: LD_EXP 34
2629: IFFALSE 2646
// PlaceUnitArea ( Denis , epsilonSpawnArea , false ) ;
2631: LD_EXP 34
2635: PPUSH
2636: LD_INT 4
2638: PPUSH
2639: LD_INT 0
2641: PPUSH
2642: CALL_OW 49
// if Joan then
2646: LD_EXP 35
2650: IFFALSE 2667
// PlaceUnitArea ( Joan , epsilonSpawnArea , false ) ;
2652: LD_EXP 35
2656: PPUSH
2657: LD_INT 4
2659: PPUSH
2660: LD_INT 0
2662: PPUSH
2663: CALL_OW 49
// if Khatam then
2667: LD_EXP 36
2671: IFFALSE 2688
// PlaceUnitArea ( Khatam , epsilonSpawnArea , false ) ;
2673: LD_EXP 36
2677: PPUSH
2678: LD_INT 4
2680: PPUSH
2681: LD_INT 0
2683: PPUSH
2684: CALL_OW 49
// if Gladstone then
2688: LD_EXP 37
2692: IFFALSE 2709
// PlaceUnitArea ( Gladstone , epsilonSpawnArea , false ) ;
2694: LD_EXP 37
2698: PPUSH
2699: LD_INT 4
2701: PPUSH
2702: LD_INT 0
2704: PPUSH
2705: CALL_OW 49
// if DeltaDoctor then
2709: LD_EXP 39
2713: IFFALSE 2730
// PlaceUnitArea ( DeltaDoctor , epsilonSpawnArea , false ) ;
2715: LD_EXP 39
2719: PPUSH
2720: LD_INT 4
2722: PPUSH
2723: LD_INT 0
2725: PPUSH
2726: CALL_OW 49
// if Kikuchi then
2730: LD_EXP 30
2734: IFFALSE 2751
// PlaceUnitArea ( Kikuchi , epsilonSpawnArea , false ) ;
2736: LD_EXP 30
2740: PPUSH
2741: LD_INT 4
2743: PPUSH
2744: LD_INT 0
2746: PPUSH
2747: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , class_scientistic ) ;
2751: LD_EXP 33
2755: PUSH
2756: LD_EXP 36
2760: PUSH
2761: LD_EXP 34
2765: PUSH
2766: LD_EXP 37
2770: PUSH
2771: LD_EXP 39
2775: PUSH
2776: LD_EXP 35
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: LIST
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: CALL_OW 336
// amount := Count ( others09 ) ;
2796: LD_ADDR_VAR 0 8
2800: PUSH
2801: LD_EXP 47
2805: PPUSH
2806: CALL 56609 0 1
2810: ST_TO_ADDR
// if amount then
2811: LD_VAR 0 8
2815: IFFALSE 2963
// begin if amount > [ 6 , 5 , 4 , 4 ] [ Difficulty ] then
2817: LD_VAR 0 8
2821: PUSH
2822: LD_INT 6
2824: PUSH
2825: LD_INT 5
2827: PUSH
2828: LD_INT 4
2830: PUSH
2831: LD_INT 4
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_OWVAR 67
2844: ARRAY
2845: GREATER
2846: IFFALSE 2877
// amount := [ 6 , 5 , 4 , 4 ] [ Difficulty ] ;
2848: LD_ADDR_VAR 0 8
2852: PUSH
2853: LD_INT 6
2855: PUSH
2856: LD_INT 5
2858: PUSH
2859: LD_INT 4
2861: PUSH
2862: LD_INT 4
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: LIST
2869: LIST
2870: PUSH
2871: LD_OWVAR 67
2875: ARRAY
2876: ST_TO_ADDR
// for i := 1 to amount do
2877: LD_ADDR_VAR 0 2
2881: PUSH
2882: DOUBLE
2883: LD_INT 1
2885: DEC
2886: ST_TO_ADDR
2887: LD_VAR 0 8
2891: PUSH
2892: FOR_TO
2893: IFFALSE 2934
// begin PlaceUnitArea ( others09 [ 1 ] , epsilonSpawnArea , false ) ;
2895: LD_EXP 47
2899: PUSH
2900: LD_INT 1
2902: ARRAY
2903: PPUSH
2904: LD_INT 4
2906: PPUSH
2907: LD_INT 0
2909: PPUSH
2910: CALL_OW 49
// others09 := Delete ( others09 , 1 ) ;
2914: LD_ADDR_EXP 47
2918: PUSH
2919: LD_EXP 47
2923: PPUSH
2924: LD_INT 1
2926: PPUSH
2927: CALL_OW 3
2931: ST_TO_ADDR
// end ;
2932: GO 2892
2934: POP
2935: POP
// if Count ( others09 ) then
2936: LD_EXP 47
2940: PPUSH
2941: CALL 56609 0 1
2945: IFFALSE 2963
// others := others union others09 ;
2947: LD_ADDR_EXP 46
2951: PUSH
2952: LD_EXP 46
2956: PUSH
2957: LD_EXP 47
2961: UNION
2962: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) = 0 then
2963: LD_INT 22
2965: PUSH
2966: LD_INT 4
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: LD_INT 50
2975: PUSH
2976: EMPTY
2977: LIST
2978: PUSH
2979: LD_INT 25
2981: PUSH
2982: LD_INT 2
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PUSH
2989: EMPTY
2990: LIST
2991: LIST
2992: LIST
2993: PPUSH
2994: CALL_OW 69
2998: PUSH
2999: LD_INT 0
3001: EQUAL
3002: IFFALSE 3141
// begin tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3004: LD_ADDR_VAR 0 7
3008: PUSH
3009: LD_INT 22
3011: PUSH
3012: LD_INT 4
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: LD_INT 50
3021: PUSH
3022: EMPTY
3023: LIST
3024: PUSH
3025: LD_INT 25
3027: PUSH
3028: LD_INT 2
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: LIST
3039: PPUSH
3040: CALL_OW 69
3044: PUSH
3045: LD_EXP 33
3049: PUSH
3050: LD_EXP 36
3054: PUSH
3055: LD_EXP 34
3059: PUSH
3060: LD_EXP 37
3064: PUSH
3065: LD_EXP 39
3069: PUSH
3070: LD_EXP 35
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: DIFF
3083: ST_TO_ADDR
// if not tmp then
3084: LD_VAR 0 7
3088: NOT
3089: IFFALSE 3125
// begin if Denis then
3091: LD_EXP 34
3095: IFFALSE 3111
// SetClass ( Denis , class_engineer ) else
3097: LD_EXP 34
3101: PPUSH
3102: LD_INT 2
3104: PPUSH
3105: CALL_OW 336
3109: GO 3123
// SetClass ( DeltaDoctor , class_engineer ) ;
3111: LD_EXP 39
3115: PPUSH
3116: LD_INT 2
3118: PPUSH
3119: CALL_OW 336
// end else
3123: GO 3141
// SetClass ( tmp [ 1 ] , class_engineer ) ;
3125: LD_VAR 0 7
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: PPUSH
3134: LD_INT 2
3136: PPUSH
3137: CALL_OW 336
// end ; for i in ape09 do
3141: LD_ADDR_VAR 0 2
3145: PUSH
3146: LD_EXP 48
3150: PUSH
3151: FOR_IN
3152: IFFALSE 3171
// PlaceUnitArea ( i , epsilonSpawnArea , false ) ;
3154: LD_VAR 0 2
3158: PPUSH
3159: LD_INT 4
3161: PPUSH
3162: LD_INT 0
3164: PPUSH
3165: CALL_OW 49
3169: GO 3151
3171: POP
3172: POP
// PrepareSoldier ( sex_female , 6 ) ;
3173: LD_INT 2
3175: PPUSH
3176: LD_INT 6
3178: PPUSH
3179: CALL_OW 381
// AmScout := CreateHuman ;
3183: LD_ADDR_EXP 40
3187: PUSH
3188: CALL_OW 44
3192: ST_TO_ADDR
// end ;
3193: LD_VAR 0 1
3197: RET
// export function PrepareCornell ; begin
3198: LD_INT 0
3200: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3201: LD_INT 4
3203: PPUSH
3204: LD_INT 4
3206: PPUSH
3207: CALL_OW 343
// uc_side := 4 ;
3211: LD_ADDR_OWVAR 20
3215: PUSH
3216: LD_INT 4
3218: ST_TO_ADDR
// uc_nation := nation_american ;
3219: LD_ADDR_OWVAR 21
3223: PUSH
3224: LD_INT 1
3226: ST_TO_ADDR
// Cornell := PrepareUnit ( Cornel , ( not debug ) , 03_ ) ;
3227: LD_ADDR_EXP 42
3231: PUSH
3232: LD_STRING Cornel
3234: PPUSH
3235: LD_EXP 1
3239: NOT
3240: PPUSH
3241: LD_STRING 03_
3243: PPUSH
3244: CALL 54507 0 3
3248: ST_TO_ADDR
// if not Cornell then
3249: LD_EXP 42
3253: NOT
3254: IFFALSE 3258
// exit ;
3256: GO 3396
// PlaceUnitArea ( Cornell , cornelSpawnArea , false ) ;
3258: LD_EXP 42
3262: PPUSH
3263: LD_INT 12
3265: PPUSH
3266: LD_INT 0
3268: PPUSH
3269: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3273: LD_EXP 42
3277: PPUSH
3278: LD_INT 350
3280: PPUSH
3281: CALL_OW 234
// ComMoveXY ( Cornell , 125 , 17 ) ;
3285: LD_EXP 42
3289: PPUSH
3290: LD_INT 125
3292: PPUSH
3293: LD_INT 17
3295: PPUSH
3296: CALL_OW 111
// AddComMoveXY ( Cornell , 112 , 19 ) ;
3300: LD_EXP 42
3304: PPUSH
3305: LD_INT 112
3307: PPUSH
3308: LD_INT 19
3310: PPUSH
3311: CALL_OW 171
// if IsInUnit ( JMM ) then
3315: LD_EXP 23
3319: PPUSH
3320: CALL_OW 310
3324: IFFALSE 3367
// AddComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3326: LD_EXP 42
3330: PPUSH
3331: LD_EXP 23
3335: PPUSH
3336: CALL_OW 310
3340: PPUSH
3341: CALL_OW 250
3345: PPUSH
3346: LD_EXP 23
3350: PPUSH
3351: CALL_OW 310
3355: PPUSH
3356: CALL_OW 251
3360: PPUSH
3361: CALL_OW 171
3365: GO 3396
// AddComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3367: LD_EXP 42
3371: PPUSH
3372: LD_EXP 23
3376: PPUSH
3377: CALL_OW 250
3381: PPUSH
3382: LD_EXP 23
3386: PPUSH
3387: CALL_OW 251
3391: PPUSH
3392: CALL_OW 171
// end ; end_of_file
3396: LD_VAR 0 1
3400: RET
// export arForces , Dietrich , Ahmed ; export arTech , arBuildings , arMines , arCameras , arEscapist ; export function PrepareArabian ; var i , j , un , tmp , skill ; begin
3401: LD_INT 0
3403: PPUSH
3404: PPUSH
3405: PPUSH
3406: PPUSH
3407: PPUSH
3408: PPUSH
// uc_side := 2 ;
3409: LD_ADDR_OWVAR 20
3413: PUSH
3414: LD_INT 2
3416: ST_TO_ADDR
// uc_nation := nation_arabian ;
3417: LD_ADDR_OWVAR 21
3421: PUSH
3422: LD_INT 2
3424: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
3425: LD_ADDR_VAR 0 6
3429: PUSH
3430: LD_INT 4
3432: PUSH
3433: LD_INT 5
3435: PUSH
3436: LD_INT 6
3438: PUSH
3439: LD_INT 7
3441: PUSH
3442: EMPTY
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: PUSH
3448: LD_OWVAR 67
3452: ARRAY
3453: ST_TO_ADDR
// arForces := [ ] ;
3454: LD_ADDR_EXP 49
3458: PUSH
3459: EMPTY
3460: ST_TO_ADDR
// arTech := [ ] ;
3461: LD_ADDR_EXP 52
3465: PUSH
3466: EMPTY
3467: ST_TO_ADDR
// arBuildings := [ ] ;
3468: LD_ADDR_EXP 53
3472: PUSH
3473: EMPTY
3474: ST_TO_ADDR
// arCameras := [ [ 94 , 19 ] , [ 92 , 34 ] , [ 109 , 67 ] , [ 120 , 38 ] , [ 116 , 30 ] , [ 102 , 20 ] ] ;
3475: LD_ADDR_EXP 55
3479: PUSH
3480: LD_INT 94
3482: PUSH
3483: LD_INT 19
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 92
3492: PUSH
3493: LD_INT 34
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: LD_INT 109
3502: PUSH
3503: LD_INT 67
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: LD_INT 120
3512: PUSH
3513: LD_INT 38
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PUSH
3520: LD_INT 116
3522: PUSH
3523: LD_INT 30
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: PUSH
3530: LD_INT 102
3532: PUSH
3533: LD_INT 20
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: ST_TO_ADDR
// arMines := [ [ 73 , 36 ] , [ 76 , 38 ] , [ 79 , 39 ] ] ;
3548: LD_ADDR_EXP 54
3552: PUSH
3553: LD_INT 73
3555: PUSH
3556: LD_INT 36
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 76
3565: PUSH
3566: LD_INT 38
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: PUSH
3573: LD_INT 79
3575: PUSH
3576: LD_INT 39
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: LIST
3587: ST_TO_ADDR
// arEscapist := [ ] ;
3588: LD_ADDR_EXP 56
3592: PUSH
3593: EMPTY
3594: ST_TO_ADDR
// SetResourceType ( GetBase ( arDep ) , mat_cans , 150 ) ;
3595: LD_INT 35
3597: PPUSH
3598: CALL_OW 274
3602: PPUSH
3603: LD_INT 1
3605: PPUSH
3606: LD_INT 150
3608: PPUSH
3609: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_oil , 60 ) ;
3613: LD_INT 35
3615: PPUSH
3616: CALL_OW 274
3620: PPUSH
3621: LD_INT 2
3623: PPUSH
3624: LD_INT 60
3626: PPUSH
3627: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_siberit , 10 ) ;
3631: LD_INT 35
3633: PPUSH
3634: CALL_OW 274
3638: PPUSH
3639: LD_INT 3
3641: PPUSH
3642: LD_INT 10
3644: PPUSH
3645: CALL_OW 277
// HiddenCamera ( 36 , 22 , 2 ) ;
3649: LD_INT 36
3651: PPUSH
3652: LD_INT 22
3654: PPUSH
3655: LD_INT 2
3657: PPUSH
3658: CALL_OW 244
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
3662: LD_ADDR_VAR 0 2
3666: PUSH
3667: LD_INT 22
3669: PUSH
3670: LD_INT 2
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_INT 21
3679: PUSH
3680: LD_INT 3
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PPUSH
3691: CALL_OW 69
3695: PUSH
3696: FOR_IN
3697: IFFALSE 3713
// SetBLevel ( i , 6 ) ;
3699: LD_VAR 0 2
3703: PPUSH
3704: LD_INT 6
3706: PPUSH
3707: CALL_OW 241
3711: GO 3696
3713: POP
3714: POP
// Dietrich := NewCharacter ( Dietrich ) ;
3715: LD_ADDR_EXP 50
3719: PUSH
3720: LD_STRING Dietrich
3722: PPUSH
3723: CALL_OW 25
3727: ST_TO_ADDR
// PlaceHumanInUnit ( Dietrich , arDep ) ;
3728: LD_EXP 50
3732: PPUSH
3733: LD_INT 35
3735: PPUSH
3736: CALL_OW 52
// InitHC_All ( ) ;
3740: CALL_OW 584
// for i := 1 to 3 do
3744: LD_ADDR_VAR 0 2
3748: PUSH
3749: DOUBLE
3750: LD_INT 1
3752: DEC
3753: ST_TO_ADDR
3754: LD_INT 3
3756: PUSH
3757: FOR_TO
3758: IFFALSE 3864
// begin PrepareEngineer ( sex_male , skill ) ;
3760: LD_INT 1
3762: PPUSH
3763: LD_VAR 0 6
3767: PPUSH
3768: CALL_OW 382
// if i = 1 then
3772: LD_VAR 0 2
3776: PUSH
3777: LD_INT 1
3779: EQUAL
3780: IFFALSE 3792
// hc_name := Ahmed Abbasid else
3782: LD_ADDR_OWVAR 26
3786: PUSH
3787: LD_STRING Ahmed Abbasid
3789: ST_TO_ADDR
3790: GO 3800
// hc_name :=  ;
3792: LD_ADDR_OWVAR 26
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// un := CreateHuman ;
3800: LD_ADDR_VAR 0 4
3804: PUSH
3805: CALL_OW 44
3809: ST_TO_ADDR
// if i = 1 then
3810: LD_VAR 0 2
3814: PUSH
3815: LD_INT 1
3817: EQUAL
3818: IFFALSE 3830
// Ahmed := un ;
3820: LD_ADDR_EXP 51
3824: PUSH
3825: LD_VAR 0 4
3829: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
3830: LD_ADDR_EXP 49
3834: PUSH
3835: LD_EXP 49
3839: PPUSH
3840: LD_VAR 0 4
3844: PPUSH
3845: CALL 92209 0 2
3849: ST_TO_ADDR
// PlaceHumanInUnit ( un , arDep ) ;
3850: LD_VAR 0 4
3854: PPUSH
3855: LD_INT 35
3857: PPUSH
3858: CALL_OW 52
// end ;
3862: GO 3757
3864: POP
3865: POP
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
3866: LD_ADDR_VAR 0 2
3870: PUSH
3871: DOUBLE
3872: LD_INT 1
3874: DEC
3875: ST_TO_ADDR
3876: LD_INT 2
3878: PUSH
3879: LD_INT 3
3881: PUSH
3882: LD_INT 4
3884: PUSH
3885: LD_INT 5
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: PUSH
3894: LD_OWVAR 67
3898: ARRAY
3899: PUSH
3900: FOR_TO
3901: IFFALSE 3976
// begin PrepareScientist ( false , skill ) ;
3903: LD_INT 0
3905: PPUSH
3906: LD_VAR 0 6
3910: PPUSH
3911: CALL_OW 384
// un := CreateHuman ;
3915: LD_ADDR_VAR 0 4
3919: PUSH
3920: CALL_OW 44
3924: ST_TO_ADDR
// SetSkill ( un , skill_combat , skill ) ;
3925: LD_VAR 0 4
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_VAR 0 6
3937: PPUSH
3938: CALL_OW 237
// arForces := Join ( arForces , un ) ;
3942: LD_ADDR_EXP 49
3946: PUSH
3947: LD_EXP 49
3951: PPUSH
3952: LD_VAR 0 4
3956: PPUSH
3957: CALL 92209 0 2
3961: ST_TO_ADDR
// PlaceHumanInUnit ( un , arLab ) ;
3962: LD_VAR 0 4
3966: PPUSH
3967: LD_INT 36
3969: PPUSH
3970: CALL_OW 52
// end ;
3974: GO 3900
3976: POP
3977: POP
// for j in [ arBar1 , arBar2 ] do
3978: LD_ADDR_VAR 0 3
3982: PUSH
3983: LD_INT 37
3985: PUSH
3986: LD_INT 38
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PUSH
3993: FOR_IN
3994: IFFALSE 4074
// for i := 1 to 4 do
3996: LD_ADDR_VAR 0 2
4000: PUSH
4001: DOUBLE
4002: LD_INT 1
4004: DEC
4005: ST_TO_ADDR
4006: LD_INT 4
4008: PUSH
4009: FOR_TO
4010: IFFALSE 4070
// begin PrepareSoldier ( false , skill ) ;
4012: LD_INT 0
4014: PPUSH
4015: LD_VAR 0 6
4019: PPUSH
4020: CALL_OW 381
// un := CreateHuman ;
4024: LD_ADDR_VAR 0 4
4028: PUSH
4029: CALL_OW 44
4033: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
4034: LD_ADDR_EXP 49
4038: PUSH
4039: LD_EXP 49
4043: PPUSH
4044: LD_VAR 0 4
4048: PPUSH
4049: CALL 92209 0 2
4053: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
4054: LD_VAR 0 4
4058: PPUSH
4059: LD_VAR 0 3
4063: PPUSH
4064: CALL_OW 52
// end ;
4068: GO 4009
4070: POP
4071: POP
4072: GO 3993
4074: POP
4075: POP
// for i := 1 to 3 do
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: DOUBLE
4082: LD_INT 1
4084: DEC
4085: ST_TO_ADDR
4086: LD_INT 3
4088: PUSH
4089: FOR_TO
4090: IFFALSE 4169
// begin un := arForces [ arForces - i ] ;
4092: LD_ADDR_VAR 0 4
4096: PUSH
4097: LD_EXP 49
4101: PUSH
4102: LD_EXP 49
4106: PUSH
4107: LD_VAR 0 2
4111: MINUS
4112: ARRAY
4113: ST_TO_ADDR
// ComExitBuilding ( un ) ;
4114: LD_VAR 0 4
4118: PPUSH
4119: CALL_OW 122
// AddComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4123: LD_VAR 0 4
4127: PPUSH
4128: LD_INT 22
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 30
4140: PUSH
4141: LD_INT 31
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PPUSH
4152: CALL_OW 69
4156: PUSH
4157: LD_VAR 0 2
4161: ARRAY
4162: PPUSH
4163: CALL_OW 180
// end ;
4167: GO 4089
4169: POP
4170: POP
// for i := 1 to 3 do
4171: LD_ADDR_VAR 0 2
4175: PUSH
4176: DOUBLE
4177: LD_INT 1
4179: DEC
4180: ST_TO_ADDR
4181: LD_INT 3
4183: PUSH
4184: FOR_TO
4185: IFFALSE 4270
// begin tmp := UnitFilter ( arForces , [ [ f_class , class_soldier ] , [ f_not , [ f_tag , tMine ] ] ] ) ;
4187: LD_ADDR_VAR 0 5
4191: PUSH
4192: LD_EXP 49
4196: PPUSH
4197: LD_INT 25
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 3
4209: PUSH
4210: LD_INT 120
4212: PUSH
4213: LD_INT 6
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: EMPTY
4225: LIST
4226: LIST
4227: PPUSH
4228: CALL_OW 72
4232: ST_TO_ADDR
// if not tmp then
4233: LD_VAR 0 5
4237: NOT
4238: IFFALSE 4242
// continue ;
4240: GO 4184
// un := tmp [ 1 ] ;
4242: LD_ADDR_VAR 0 4
4246: PUSH
4247: LD_VAR 0 5
4251: PUSH
4252: LD_INT 1
4254: ARRAY
4255: ST_TO_ADDR
// SetTag ( un , tMine ) ;
4256: LD_VAR 0 4
4260: PPUSH
4261: LD_INT 6
4263: PPUSH
4264: CALL_OW 109
// end ;
4268: GO 4184
4270: POP
4271: POP
// for i in UnitsInside ( arBar2 ) do
4272: LD_ADDR_VAR 0 2
4276: PUSH
4277: LD_INT 38
4279: PPUSH
4280: CALL_OW 313
4284: PUSH
4285: FOR_IN
4286: IFFALSE 4302
// SetClass ( i , class_mortar ) ;
4288: LD_VAR 0 2
4292: PPUSH
4293: LD_INT 8
4295: PPUSH
4296: CALL_OW 336
4300: GO 4285
4302: POP
4303: POP
// end ;
4304: LD_VAR 0 1
4308: RET
// every 0 0$2 trigger joinedToEpsilon do var i , eng ;
4309: LD_EXP 7
4313: IFFALSE 4726
4315: GO 4317
4317: DISABLE
4318: LD_INT 0
4320: PPUSH
4321: PPUSH
// begin ComUpgradeLab ( arLab , b_lab_siberium ) ;
4322: LD_INT 36
4324: PPUSH
4325: LD_INT 11
4327: PPUSH
4328: CALL_OW 147
// wait ( 0 0$10 ) ;
4332: LD_INT 350
4334: PPUSH
4335: CALL_OW 67
// arBuildings := [ [ b_solar_power , 69 , 4 , 2 ] , [ b_solar_power , 67 , 6 , 3 ] ] ;
4339: LD_ADDR_EXP 53
4343: PUSH
4344: LD_INT 27
4346: PUSH
4347: LD_INT 69
4349: PUSH
4350: LD_INT 4
4352: PUSH
4353: LD_INT 2
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: PUSH
4362: LD_INT 27
4364: PUSH
4365: LD_INT 67
4367: PUSH
4368: LD_INT 6
4370: PUSH
4371: LD_INT 3
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4384: LD_INT 35
4386: PPUSH
4387: CALL_OW 67
// until not arBuildings ;
4391: LD_EXP 53
4395: NOT
4396: IFFALSE 4384
// eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
4398: LD_ADDR_VAR 0 2
4402: PUSH
4403: LD_EXP 49
4407: PPUSH
4408: LD_INT 25
4410: PUSH
4411: LD_INT 2
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PPUSH
4418: CALL_OW 72
4422: ST_TO_ADDR
// if eng then
4423: LD_VAR 0 2
4427: IFFALSE 4564
// begin eng := eng [ 1 ] ;
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: LD_VAR 0 2
4438: PUSH
4439: LD_INT 1
4441: ARRAY
4442: ST_TO_ADDR
// SetTag ( eng , tCamera ) ;
4443: LD_VAR 0 2
4447: PPUSH
4448: LD_INT 4
4450: PPUSH
4451: CALL_OW 109
// for i in arCameras do
4455: LD_ADDR_VAR 0 1
4459: PUSH
4460: LD_EXP 55
4464: PUSH
4465: FOR_IN
4466: IFFALSE 4497
// AddComHiddenCamera ( eng , i [ 1 ] , i [ 2 ] ) ;
4468: LD_VAR 0 2
4472: PPUSH
4473: LD_VAR 0 1
4477: PUSH
4478: LD_INT 1
4480: ARRAY
4481: PPUSH
4482: LD_VAR 0 1
4486: PUSH
4487: LD_INT 2
4489: ARRAY
4490: PPUSH
4491: CALL_OW 217
4495: GO 4465
4497: POP
4498: POP
// repeat wait ( 0 0$1 ) ;
4499: LD_INT 35
4501: PPUSH
4502: CALL_OW 67
// until not HasTask ( eng ) or IsDead ( eng ) ;
4506: LD_VAR 0 2
4510: PPUSH
4511: CALL_OW 314
4515: NOT
4516: PUSH
4517: LD_VAR 0 2
4521: PPUSH
4522: CALL_OW 301
4526: OR
4527: IFFALSE 4499
// if IsOk ( eng ) then
4529: LD_VAR 0 2
4533: PPUSH
4534: CALL_OW 302
4538: IFFALSE 4564
// begin SetTag ( eng , 0 ) ;
4540: LD_VAR 0 2
4544: PPUSH
4545: LD_INT 0
4547: PPUSH
4548: CALL_OW 109
// ComEnterUnit ( eng , arDep ) ;
4552: LD_VAR 0 2
4556: PPUSH
4557: LD_INT 35
4559: PPUSH
4560: CALL_OW 120
// end ; end ; repeat wait ( 0 0$1 ) ;
4564: LD_INT 35
4566: PPUSH
4567: CALL_OW 67
// if tick mod 4200 = 0 and GetListOfCratesInArea ( arCratesArea ) < 3 then
4571: LD_OWVAR 1
4575: PUSH
4576: LD_INT 4200
4578: MOD
4579: PUSH
4580: LD_INT 0
4582: EQUAL
4583: PUSH
4584: LD_INT 9
4586: PPUSH
4587: CALL_OW 435
4591: PUSH
4592: LD_INT 3
4594: LESS
4595: AND
4596: IFFALSE 4619
// CreateCratesArea ( rand ( 1 , 5 ) , arCratesArea , true ) ;
4598: LD_INT 1
4600: PPUSH
4601: LD_INT 5
4603: PPUSH
4604: CALL_OW 12
4608: PPUSH
4609: LD_INT 9
4611: PPUSH
4612: LD_INT 1
4614: PPUSH
4615: CALL_OW 55
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) ;
4619: LD_INT 22
4621: PUSH
4622: LD_INT 1
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: LD_INT 3
4631: PUSH
4632: LD_INT 57
4634: PUSH
4635: EMPTY
4636: LIST
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 63
4644: PUSH
4645: LD_INT 11
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: PPUSH
4657: CALL_OW 69
4661: IFFALSE 4564
// wait ( 0 0$10 ) ;
4663: LD_INT 350
4665: PPUSH
4666: CALL_OW 67
// arTech := [ tech_sibPow , tech_sibEng , tech_sib1 ] ;
4670: LD_ADDR_EXP 52
4674: PUSH
4675: LD_INT 21
4677: PUSH
4678: LD_INT 22
4680: PUSH
4681: LD_INT 54
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: LIST
4688: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4689: LD_INT 35
4691: PPUSH
4692: CALL_OW 67
// until not arTech ;
4696: LD_EXP 52
4700: NOT
4701: IFFALSE 4689
// wait ( 0 0$30 ) ;
4703: LD_INT 1050
4705: PPUSH
4706: CALL_OW 67
// arabianAttack := true ;
4710: LD_ADDR_EXP 4
4714: PUSH
4715: LD_INT 1
4717: ST_TO_ADDR
// arBaseActive := false ;
4718: LD_ADDR_EXP 3
4722: PUSH
4723: LD_INT 0
4725: ST_TO_ADDR
// end ;
4726: PPOPN 2
4728: END
// every 3 trigger arBaseActive and arMines and FilterUnitsInArea ( arMinesArea , [ f_enemy , 2 ] ) do var i , e ;
4729: LD_EXP 3
4733: PUSH
4734: LD_EXP 54
4738: AND
4739: PUSH
4740: LD_INT 8
4742: PPUSH
4743: LD_INT 81
4745: PUSH
4746: LD_INT 2
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PPUSH
4753: CALL_OW 70
4757: AND
4758: IFFALSE 4869
4760: GO 4762
4762: DISABLE
4763: LD_INT 0
4765: PPUSH
4766: PPUSH
// begin enable ;
4767: ENABLE
// for i in arMines do
4768: LD_ADDR_VAR 0 1
4772: PUSH
4773: LD_EXP 54
4777: PUSH
4778: FOR_IN
4779: IFFALSE 4867
// begin e := HexInfo ( i [ 1 ] , i [ 2 ] ) ;
4781: LD_ADDR_VAR 0 2
4785: PUSH
4786: LD_VAR 0 1
4790: PUSH
4791: LD_INT 1
4793: ARRAY
4794: PPUSH
4795: LD_VAR 0 1
4799: PUSH
4800: LD_INT 2
4802: ARRAY
4803: PPUSH
4804: CALL_OW 428
4808: ST_TO_ADDR
// if not e then
4809: LD_VAR 0 2
4813: NOT
4814: IFFALSE 4818
// continue ;
4816: GO 4778
// if GetSide ( e ) in [ 3 , 6 ] then
4818: LD_VAR 0 2
4822: PPUSH
4823: CALL_OW 255
4827: PUSH
4828: LD_INT 3
4830: PUSH
4831: LD_INT 6
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: IN
4838: IFFALSE 4865
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 2 ) ;
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 1
4847: ARRAY
4848: PPUSH
4849: LD_VAR 0 1
4853: PUSH
4854: LD_INT 2
4856: ARRAY
4857: PPUSH
4858: LD_INT 2
4860: PPUSH
4861: CALL_OW 456
// end ;
4865: GO 4778
4867: POP
4868: POP
// end ;
4869: PPOPN 2
4871: END
// every 0 0$2 trigger arBaseActive do var i , un , b , side , tmp , lab , eng , tag , cr , tw , sci , sol , hurtUnits , enemyInBase , empty , fac ;
4872: LD_EXP 3
4876: IFFALSE 7064
4878: GO 4880
4880: DISABLE
4881: LD_INT 0
4883: PPUSH
4884: PPUSH
4885: PPUSH
4886: PPUSH
4887: PPUSH
4888: PPUSH
4889: PPUSH
4890: PPUSH
4891: PPUSH
4892: PPUSH
4893: PPUSH
4894: PPUSH
4895: PPUSH
4896: PPUSH
4897: PPUSH
4898: PPUSH
// begin enable ;
4899: ENABLE
// side := 2 ;
4900: LD_ADDR_VAR 0 4
4904: PUSH
4905: LD_INT 2
4907: ST_TO_ADDR
// if arTech then
4908: LD_EXP 52
4912: IFFALSE 5068
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4914: LD_ADDR_VAR 0 6
4918: PUSH
4919: LD_INT 22
4921: PUSH
4922: LD_VAR 0 4
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: LD_INT 50
4933: PUSH
4934: EMPTY
4935: LIST
4936: PUSH
4937: LD_INT 2
4939: PUSH
4940: LD_INT 30
4942: PUSH
4943: LD_INT 6
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PUSH
4950: LD_INT 30
4952: PUSH
4953: LD_INT 7
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: PUSH
4960: LD_INT 30
4962: PUSH
4963: LD_INT 8
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: PPUSH
4981: CALL_OW 69
4985: ST_TO_ADDR
// if lab then
4986: LD_VAR 0 6
4990: IFFALSE 5068
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
4992: LD_VAR 0 6
4996: PUSH
4997: LD_INT 1
4999: ARRAY
5000: PPUSH
5001: CALL_OW 461
5005: PUSH
5006: LD_INT 2
5008: EQUAL
5009: IFFALSE 5068
// begin for i in arTech do
5011: LD_ADDR_VAR 0 1
5015: PUSH
5016: LD_EXP 52
5020: PUSH
5021: FOR_IN
5022: IFFALSE 5066
// if CanBeResearched ( lab [ 1 ] , i ) then
5024: LD_VAR 0 6
5028: PUSH
5029: LD_INT 1
5031: ARRAY
5032: PPUSH
5033: LD_VAR 0 1
5037: PPUSH
5038: CALL_OW 430
5042: IFFALSE 5064
// begin ComResearch ( lab [ 1 ] , i ) ;
5044: LD_VAR 0 6
5048: PUSH
5049: LD_INT 1
5051: ARRAY
5052: PPUSH
5053: LD_VAR 0 1
5057: PPUSH
5058: CALL_OW 124
// break ;
5062: GO 5066
// end ;
5064: GO 5021
5066: POP
5067: POP
// end ; end ; end ; tmp := FilterUnitsInArea ( arBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5068: LD_ADDR_VAR 0 5
5072: PUSH
5073: LD_INT 5
5075: PPUSH
5076: LD_INT 21
5078: PUSH
5079: LD_INT 3
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 3
5088: PUSH
5089: LD_INT 24
5091: PUSH
5092: LD_INT 1000
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: PPUSH
5107: CALL_OW 70
5111: ST_TO_ADDR
// cr := GetListOfCratesInArea ( arCratesArea ) ;
5112: LD_ADDR_VAR 0 9
5116: PUSH
5117: LD_INT 9
5119: PPUSH
5120: CALL_OW 435
5124: ST_TO_ADDR
// sci := UnitFilter ( arForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
5125: LD_ADDR_VAR 0 11
5129: PUSH
5130: LD_EXP 49
5134: PPUSH
5135: LD_INT 25
5137: PUSH
5138: LD_INT 4
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: PUSH
5145: LD_INT 50
5147: PUSH
5148: EMPTY
5149: LIST
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: PPUSH
5155: CALL_OW 72
5159: ST_TO_ADDR
// if sci then
5160: LD_VAR 0 11
5164: IFFALSE 5528
// begin hurtUnits := UnitFilter ( arForces , [ [ f_inarea , arBaseArea ] , [ f_not , [ f_inside ] ] , [ f_tag , tHeal ] ] ) ;
5166: LD_ADDR_VAR 0 13
5170: PUSH
5171: LD_EXP 49
5175: PPUSH
5176: LD_INT 95
5178: PUSH
5179: LD_INT 5
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 3
5188: PUSH
5189: LD_INT 54
5191: PUSH
5192: EMPTY
5193: LIST
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PUSH
5199: LD_INT 120
5201: PUSH
5202: LD_INT 1
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 72
5218: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5219: LD_ADDR_VAR 0 6
5223: PUSH
5224: LD_INT 22
5226: PUSH
5227: LD_VAR 0 4
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: LD_INT 50
5238: PUSH
5239: EMPTY
5240: LIST
5241: PUSH
5242: LD_INT 2
5244: PUSH
5245: LD_INT 30
5247: PUSH
5248: LD_INT 6
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: LD_INT 30
5257: PUSH
5258: LD_INT 7
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PUSH
5265: LD_INT 30
5267: PUSH
5268: LD_INT 8
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: LIST
5285: PPUSH
5286: CALL_OW 69
5290: ST_TO_ADDR
// tag := GetTag ( i ) ;
5291: LD_ADDR_VAR 0 8
5295: PUSH
5296: LD_VAR 0 1
5300: PPUSH
5301: CALL_OW 110
5305: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
5306: LD_VAR 0 1
5310: PPUSH
5311: CALL_OW 256
5315: PUSH
5316: LD_INT 800
5318: LESS
5319: PUSH
5320: LD_VAR 0 8
5324: PUSH
5325: LD_INT 1
5327: NONEQUAL
5328: AND
5329: IFFALSE 5358
// begin ComMoveXY ( i , 72 , 15 ) ;
5331: LD_VAR 0 1
5335: PPUSH
5336: LD_INT 72
5338: PPUSH
5339: LD_INT 15
5341: PPUSH
5342: CALL_OW 111
// SetTag ( i , tHeal ) ;
5346: LD_VAR 0 1
5350: PPUSH
5351: LD_INT 1
5353: PPUSH
5354: CALL_OW 109
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5358: LD_VAR 0 1
5362: PPUSH
5363: CALL_OW 256
5367: PUSH
5368: LD_INT 1000
5370: EQUAL
5371: PUSH
5372: LD_VAR 0 8
5376: PUSH
5377: LD_INT 1
5379: EQUAL
5380: AND
5381: IFFALSE 5395
// begin SetTag ( i , 0 ) ;
5383: LD_VAR 0 1
5387: PPUSH
5388: LD_INT 0
5390: PPUSH
5391: CALL_OW 109
// end ; if hurtUnits then
5395: LD_VAR 0 13
5399: IFFALSE 5460
// begin for i in sci do
5401: LD_ADDR_VAR 0 1
5405: PUSH
5406: LD_VAR 0 11
5410: PUSH
5411: FOR_IN
5412: IFFALSE 5456
// if IsInUnit ( i ) then
5414: LD_VAR 0 1
5418: PPUSH
5419: CALL_OW 310
5423: IFFALSE 5436
// ComExitBuilding ( i ) else
5425: LD_VAR 0 1
5429: PPUSH
5430: CALL_OW 122
5434: GO 5454
// ComHeal ( i , hurtUnits [ 1 ] ) ;
5436: LD_VAR 0 1
5440: PPUSH
5441: LD_VAR 0 13
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PPUSH
5450: CALL_OW 128
5454: GO 5411
5456: POP
5457: POP
// end else
5458: GO 5528
// if lab then
5460: LD_VAR 0 6
5464: IFFALSE 5528
// begin for i in sci do
5466: LD_ADDR_VAR 0 1
5470: PUSH
5471: LD_VAR 0 11
5475: PUSH
5476: FOR_IN
5477: IFFALSE 5526
// if not IsInUnit ( i ) and GetTag ( i ) <> tHeal then
5479: LD_VAR 0 1
5483: PPUSH
5484: CALL_OW 310
5488: NOT
5489: PUSH
5490: LD_VAR 0 1
5494: PPUSH
5495: CALL_OW 110
5499: PUSH
5500: LD_INT 1
5502: NONEQUAL
5503: AND
5504: IFFALSE 5524
// ComEnterUnit ( i , lab [ 1 ] ) ;
5506: LD_VAR 0 1
5510: PPUSH
5511: LD_VAR 0 6
5515: PUSH
5516: LD_INT 1
5518: ARRAY
5519: PPUSH
5520: CALL_OW 120
5524: GO 5476
5526: POP
5527: POP
// end ; end ; eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
5528: LD_ADDR_VAR 0 7
5532: PUSH
5533: LD_EXP 49
5537: PPUSH
5538: LD_INT 25
5540: PUSH
5541: LD_INT 2
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PPUSH
5548: CALL_OW 72
5552: ST_TO_ADDR
// if eng then
5553: LD_VAR 0 7
5557: IFFALSE 6226
// begin for i in eng do
5559: LD_ADDR_VAR 0 1
5563: PUSH
5564: LD_VAR 0 7
5568: PUSH
5569: FOR_IN
5570: IFFALSE 6224
// begin tag := GetTag ( i ) ;
5572: LD_ADDR_VAR 0 8
5576: PUSH
5577: LD_VAR 0 1
5581: PPUSH
5582: CALL_OW 110
5586: ST_TO_ADDR
// if tag = tCamera then
5587: LD_VAR 0 8
5591: PUSH
5592: LD_INT 4
5594: EQUAL
5595: IFFALSE 5599
// continue ;
5597: GO 5569
// if GetLives ( i ) < 600 and tag <> tHeal then
5599: LD_VAR 0 1
5603: PPUSH
5604: CALL_OW 256
5608: PUSH
5609: LD_INT 600
5611: LESS
5612: PUSH
5613: LD_VAR 0 8
5617: PUSH
5618: LD_INT 1
5620: NONEQUAL
5621: AND
5622: IFFALSE 5660
// begin SetTag ( i , tHeal ) ;
5624: LD_VAR 0 1
5628: PPUSH
5629: LD_INT 1
5631: PPUSH
5632: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
5636: LD_VAR 0 1
5640: PPUSH
5641: LD_INT 72
5643: PPUSH
5644: LD_INT 15
5646: PPUSH
5647: CALL_OW 111
// AddComHold ( i ) ;
5651: LD_VAR 0 1
5655: PPUSH
5656: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
5660: LD_VAR 0 8
5664: PUSH
5665: LD_INT 1
5667: EQUAL
5668: PUSH
5669: LD_VAR 0 1
5673: PPUSH
5674: CALL_OW 256
5678: PUSH
5679: LD_INT 1000
5681: EQUAL
5682: AND
5683: IFFALSE 5697
// SetTag ( i , 0 ) ;
5685: LD_VAR 0 1
5689: PPUSH
5690: LD_INT 0
5692: PPUSH
5693: CALL_OW 109
// if not tag then
5697: LD_VAR 0 8
5701: NOT
5702: IFFALSE 5848
// begin if cr or tmp or Count ( arBuildings ) then
5704: LD_VAR 0 9
5708: PUSH
5709: LD_VAR 0 5
5713: OR
5714: PUSH
5715: LD_EXP 53
5719: PPUSH
5720: CALL 56609 0 1
5724: OR
5725: IFFALSE 5812
// begin if IsInUnit ( i ) then
5727: LD_VAR 0 1
5731: PPUSH
5732: CALL_OW 310
5736: IFFALSE 5747
// ComExitBuilding ( i ) ;
5738: LD_VAR 0 1
5742: PPUSH
5743: CALL_OW 122
// if tmp then
5747: LD_VAR 0 5
5751: IFFALSE 5767
// SetTag ( i , tRepair ) else
5753: LD_VAR 0 1
5757: PPUSH
5758: LD_INT 3
5760: PPUSH
5761: CALL_OW 109
5765: GO 5810
// if cr then
5767: LD_VAR 0 9
5771: IFFALSE 5787
// SetTag ( i , tCrates ) else
5773: LD_VAR 0 1
5777: PPUSH
5778: LD_INT 2
5780: PPUSH
5781: CALL_OW 109
5785: GO 5810
// if Count ( arBuildings ) then
5787: LD_EXP 53
5791: PPUSH
5792: CALL 56609 0 1
5796: IFFALSE 5810
// SetTag ( i , tBuild ) ;
5798: LD_VAR 0 1
5802: PPUSH
5803: LD_INT 5
5805: PPUSH
5806: CALL_OW 109
// end else
5810: GO 5848
// if not IsInUnit ( i ) then
5812: LD_VAR 0 1
5816: PPUSH
5817: CALL_OW 310
5821: NOT
5822: IFFALSE 5848
// begin SetTag ( i , 0 ) ;
5824: LD_VAR 0 1
5828: PPUSH
5829: LD_INT 0
5831: PPUSH
5832: CALL_OW 109
// ComEnterUnit ( i , arDep ) ;
5836: LD_VAR 0 1
5840: PPUSH
5841: LD_INT 35
5843: PPUSH
5844: CALL_OW 120
// end ; end ; if tag = tRepair then
5848: LD_VAR 0 8
5852: PUSH
5853: LD_INT 3
5855: EQUAL
5856: IFFALSE 5958
// begin if IsInUnit ( i ) then
5858: LD_VAR 0 1
5862: PPUSH
5863: CALL_OW 310
5867: IFFALSE 5880
// begin ComExitBuilding ( i ) ;
5869: LD_VAR 0 1
5873: PPUSH
5874: CALL_OW 122
// continue ;
5878: GO 5569
// end ; if not tmp then
5880: LD_VAR 0 5
5884: NOT
5885: IFFALSE 5901
// begin SetTag ( i , 0 ) ;
5887: LD_VAR 0 1
5891: PPUSH
5892: LD_INT 0
5894: PPUSH
5895: CALL_OW 109
// continue ;
5899: GO 5569
// end ; if not HasTask ( i ) then
5901: LD_VAR 0 1
5905: PPUSH
5906: CALL_OW 314
5910: NOT
5911: IFFALSE 5931
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
5913: LD_VAR 0 1
5917: PPUSH
5918: LD_VAR 0 5
5922: PUSH
5923: LD_INT 1
5925: ARRAY
5926: PPUSH
5927: CALL_OW 130
// if not IsInArea ( i , arBaseArea ) then
5931: LD_VAR 0 1
5935: PPUSH
5936: LD_INT 5
5938: PPUSH
5939: CALL_OW 308
5943: NOT
5944: IFFALSE 5958
// ComMoveToArea ( i , arBaseArea ) ;
5946: LD_VAR 0 1
5950: PPUSH
5951: LD_INT 5
5953: PPUSH
5954: CALL_OW 113
// end ; if tag = tBuild then
5958: LD_VAR 0 8
5962: PUSH
5963: LD_INT 5
5965: EQUAL
5966: IFFALSE 6077
// begin if IsInUnit ( i ) then
5968: LD_VAR 0 1
5972: PPUSH
5973: CALL_OW 310
5977: IFFALSE 5990
// begin ComExitBuilding ( i ) ;
5979: LD_VAR 0 1
5983: PPUSH
5984: CALL_OW 122
// continue ;
5988: GO 5569
// end ; if not Count ( arBuildings ) then
5990: LD_EXP 53
5994: PPUSH
5995: CALL 56609 0 1
5999: NOT
6000: IFFALSE 6016
// begin SetTag ( i , 0 ) ;
6002: LD_VAR 0 1
6006: PPUSH
6007: LD_INT 0
6009: PPUSH
6010: CALL_OW 109
// continue ;
6014: GO 5569
// end ; ComBuild ( i , arBuildings [ 1 ] [ 1 ] , arBuildings [ 1 ] [ 2 ] , arBuildings [ 1 ] [ 3 ] , arBuildings [ 1 ] [ 4 ] ) ;
6016: LD_VAR 0 1
6020: PPUSH
6021: LD_EXP 53
6025: PUSH
6026: LD_INT 1
6028: ARRAY
6029: PUSH
6030: LD_INT 1
6032: ARRAY
6033: PPUSH
6034: LD_EXP 53
6038: PUSH
6039: LD_INT 1
6041: ARRAY
6042: PUSH
6043: LD_INT 2
6045: ARRAY
6046: PPUSH
6047: LD_EXP 53
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PUSH
6056: LD_INT 3
6058: ARRAY
6059: PPUSH
6060: LD_EXP 53
6064: PUSH
6065: LD_INT 1
6067: ARRAY
6068: PUSH
6069: LD_INT 4
6071: ARRAY
6072: PPUSH
6073: CALL_OW 145
// end ; if tag = tCrates then
6077: LD_VAR 0 8
6081: PUSH
6082: LD_INT 2
6084: EQUAL
6085: IFFALSE 6222
// begin if IsInUnit ( i ) then
6087: LD_VAR 0 1
6091: PPUSH
6092: CALL_OW 310
6096: IFFALSE 6109
// begin ComExitBuilding ( i ) ;
6098: LD_VAR 0 1
6102: PPUSH
6103: CALL_OW 122
// continue ;
6107: GO 5569
// end ; if not cr then
6109: LD_VAR 0 9
6113: NOT
6114: IFFALSE 6130
// begin SetTag ( i , 0 ) ;
6116: LD_VAR 0 1
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 109
// continue ;
6128: GO 5569
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
6130: LD_VAR 0 1
6134: PPUSH
6135: CALL_OW 314
6139: NOT
6140: PUSH
6141: LD_INT 81
6143: PUSH
6144: LD_VAR 0 4
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: PUSH
6153: LD_INT 92
6155: PUSH
6156: LD_VAR 0 9
6160: PUSH
6161: LD_INT 1
6163: ARRAY
6164: PUSH
6165: LD_VAR 0 9
6169: PUSH
6170: LD_INT 2
6172: ARRAY
6173: PUSH
6174: LD_INT 12
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: PPUSH
6187: CALL_OW 69
6191: NOT
6192: AND
6193: IFFALSE 6222
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
6195: LD_VAR 0 1
6199: PPUSH
6200: LD_VAR 0 9
6204: PUSH
6205: LD_INT 1
6207: ARRAY
6208: PPUSH
6209: LD_VAR 0 9
6213: PUSH
6214: LD_INT 2
6216: ARRAY
6217: PPUSH
6218: CALL_OW 117
// end ; end ;
6222: GO 5569
6224: POP
6225: POP
// end ; sol := UnitFilter ( arForces , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6226: LD_ADDR_VAR 0 12
6230: PUSH
6231: LD_EXP 49
6235: PPUSH
6236: LD_INT 25
6238: PUSH
6239: LD_INT 1
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: PUSH
6246: LD_INT 50
6248: PUSH
6249: EMPTY
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PPUSH
6256: CALL_OW 72
6260: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( arBaseArea , [ f_enemy , side ] ) ;
6261: LD_ADDR_VAR 0 14
6265: PUSH
6266: LD_INT 5
6268: PPUSH
6269: LD_INT 81
6271: PUSH
6272: LD_VAR 0 4
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PPUSH
6281: CALL_OW 70
6285: ST_TO_ADDR
// if sol then
6286: LD_VAR 0 12
6290: IFFALSE 7064
// begin tmp := UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ;
6292: LD_ADDR_VAR 0 5
6296: PUSH
6297: LD_VAR 0 12
6301: PPUSH
6302: LD_INT 50
6304: PUSH
6305: EMPTY
6306: LIST
6307: PUSH
6308: LD_INT 120
6310: PUSH
6311: LD_INT 6
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: PPUSH
6322: CALL_OW 72
6326: ST_TO_ADDR
// if tmp and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , 76 , 38 , 12 ] ] ) then
6327: LD_VAR 0 5
6331: PUSH
6332: LD_INT 81
6334: PUSH
6335: LD_VAR 0 4
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: LD_INT 92
6346: PUSH
6347: LD_INT 76
6349: PUSH
6350: LD_INT 38
6352: PUSH
6353: LD_INT 12
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PPUSH
6366: CALL_OW 69
6370: NOT
6371: AND
6372: IFFALSE 6542
// for i := 1 to Count ( tmp ) do
6374: LD_ADDR_VAR 0 1
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_VAR 0 5
6388: PPUSH
6389: CALL 56609 0 1
6393: PUSH
6394: FOR_TO
6395: IFFALSE 6540
// begin un := tmp [ i ] ;
6397: LD_ADDR_VAR 0 2
6401: PUSH
6402: LD_VAR 0 5
6406: PUSH
6407: LD_VAR 0 1
6411: ARRAY
6412: ST_TO_ADDR
// b := IsInUnit ( un ) ;
6413: LD_ADDR_VAR 0 3
6417: PUSH
6418: LD_VAR 0 2
6422: PPUSH
6423: CALL_OW 310
6427: ST_TO_ADDR
// if not MineOfUnit ( un ) then
6428: LD_VAR 0 2
6432: PPUSH
6433: CALL_OW 459
6437: NOT
6438: IFFALSE 6507
// begin ComExitBuilding ( un ) ;
6440: LD_VAR 0 2
6444: PPUSH
6445: CALL_OW 122
// AddComPlaceRemoteCharge ( un , arMines [ i ] [ 1 ] , arMines [ i ] [ 2 ] , 0 ) ;
6449: LD_VAR 0 2
6453: PPUSH
6454: LD_EXP 54
6458: PUSH
6459: LD_VAR 0 1
6463: ARRAY
6464: PUSH
6465: LD_INT 1
6467: ARRAY
6468: PPUSH
6469: LD_EXP 54
6473: PUSH
6474: LD_VAR 0 1
6478: ARRAY
6479: PUSH
6480: LD_INT 2
6482: ARRAY
6483: PPUSH
6484: LD_INT 0
6486: PPUSH
6487: CALL_OW 193
// AddComEnterUnit ( un , b ) ;
6491: LD_VAR 0 2
6495: PPUSH
6496: LD_VAR 0 3
6500: PPUSH
6501: CALL_OW 180
// end else
6505: GO 6538
// if not b and not HasTask ( un ) then
6507: LD_VAR 0 3
6511: NOT
6512: PUSH
6513: LD_VAR 0 2
6517: PPUSH
6518: CALL_OW 314
6522: NOT
6523: AND
6524: IFFALSE 6538
// ComEnterUnit ( un , arBar1 ) ;
6526: LD_VAR 0 2
6530: PPUSH
6531: LD_INT 37
6533: PPUSH
6534: CALL_OW 120
// end ;
6538: GO 6394
6540: POP
6541: POP
// if enemyInBase then
6542: LD_VAR 0 14
6546: IFFALSE 6691
// begin for i in sol do
6548: LD_ADDR_VAR 0 1
6552: PUSH
6553: LD_VAR 0 12
6557: PUSH
6558: FOR_IN
6559: IFFALSE 6687
// begin tw := IsInUnit ( i ) ;
6561: LD_ADDR_VAR 0 10
6565: PUSH
6566: LD_VAR 0 1
6570: PPUSH
6571: CALL_OW 310
6575: ST_TO_ADDR
// if tw then
6576: LD_VAR 0 10
6580: IFFALSE 6661
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
6582: LD_VAR 0 10
6586: PUSH
6587: LD_INT 22
6589: PUSH
6590: LD_VAR 0 4
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 101
6601: PUSH
6602: LD_INT 2
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 2
6611: PUSH
6612: LD_INT 30
6614: PUSH
6615: LD_INT 32
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 30
6624: PUSH
6625: LD_INT 31
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: LIST
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: PPUSH
6642: CALL_OW 69
6646: IN
6647: NOT
6648: IFFALSE 6659
// ComExitBuilding ( i ) ;
6650: LD_VAR 0 1
6654: PPUSH
6655: CALL_OW 122
// end else
6659: GO 6685
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
6661: LD_VAR 0 1
6665: PPUSH
6666: LD_VAR 0 14
6670: PPUSH
6671: LD_VAR 0 1
6675: PPUSH
6676: CALL_OW 74
6680: PPUSH
6681: CALL_OW 115
// end ;
6685: GO 6558
6687: POP
6688: POP
// end else
6689: GO 7064
// begin empty := FilterUnitsInArea ( arBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
6691: LD_ADDR_VAR 0 15
6695: PUSH
6696: LD_INT 5
6698: PPUSH
6699: LD_INT 3
6701: PUSH
6702: LD_INT 62
6704: PUSH
6705: EMPTY
6706: LIST
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: LD_INT 2
6714: PUSH
6715: LD_INT 30
6717: PUSH
6718: LD_INT 32
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 30
6727: PUSH
6728: LD_INT 4
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PUSH
6735: LD_INT 30
6737: PUSH
6738: LD_INT 5
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 30
6747: PUSH
6748: LD_INT 31
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PPUSH
6766: CALL_OW 70
6770: ST_TO_ADDR
// if empty then
6771: LD_VAR 0 15
6775: IFFALSE 6792
// empty := ReverseArray ( empty ) ;
6777: LD_ADDR_VAR 0 15
6781: PUSH
6782: LD_VAR 0 15
6786: PPUSH
6787: CALL 87485 0 1
6791: ST_TO_ADDR
// for i in sol do
6792: LD_ADDR_VAR 0 1
6796: PUSH
6797: LD_VAR 0 12
6801: PUSH
6802: FOR_IN
6803: IFFALSE 7062
// begin tag := GetTag ( i ) ;
6805: LD_ADDR_VAR 0 8
6809: PUSH
6810: LD_VAR 0 1
6814: PPUSH
6815: CALL_OW 110
6819: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
6820: LD_VAR 0 1
6824: PPUSH
6825: CALL_OW 256
6829: PUSH
6830: LD_INT 1000
6832: LESS
6833: PUSH
6834: LD_VAR 0 8
6838: PUSH
6839: LD_INT 1
6841: NONEQUAL
6842: AND
6843: IFFALSE 6883
// begin SetTag ( i , tHeal ) ;
6845: LD_VAR 0 1
6849: PPUSH
6850: LD_INT 1
6852: PPUSH
6853: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_INT 72
6864: PPUSH
6865: LD_INT 15
6867: PPUSH
6868: CALL_OW 111
// AddComHold ( i ) ;
6872: LD_VAR 0 1
6876: PPUSH
6877: CALL_OW 200
// continue ;
6881: GO 6802
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
6883: LD_VAR 0 1
6887: PPUSH
6888: CALL_OW 256
6892: PUSH
6893: LD_INT 1000
6895: EQUAL
6896: PUSH
6897: LD_VAR 0 8
6901: PUSH
6902: LD_INT 1
6904: EQUAL
6905: AND
6906: IFFALSE 6987
// begin if MineOfUnit ( i ) or Count ( UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ) < 3 then
6908: LD_VAR 0 1
6912: PPUSH
6913: CALL_OW 459
6917: PUSH
6918: LD_VAR 0 12
6922: PPUSH
6923: LD_INT 50
6925: PUSH
6926: EMPTY
6927: LIST
6928: PUSH
6929: LD_INT 120
6931: PUSH
6932: LD_INT 6
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 72
6947: PPUSH
6948: CALL 56609 0 1
6952: PUSH
6953: LD_INT 3
6955: LESS
6956: OR
6957: IFFALSE 6973
// SetTag ( i , tMine ) else
6959: LD_VAR 0 1
6963: PPUSH
6964: LD_INT 6
6966: PPUSH
6967: CALL_OW 109
6971: GO 6985
// SetTag ( i , 0 ) ;
6973: LD_VAR 0 1
6977: PPUSH
6978: LD_INT 0
6980: PPUSH
6981: CALL_OW 109
// continue ;
6985: GO 6802
// end ; if tag = tMine then
6987: LD_VAR 0 8
6991: PUSH
6992: LD_INT 6
6994: EQUAL
6995: IFFALSE 6999
// continue ;
6997: GO 6802
// if not IsInUnit ( i ) and not tag and empty then
6999: LD_VAR 0 1
7003: PPUSH
7004: CALL_OW 310
7008: NOT
7009: PUSH
7010: LD_VAR 0 8
7014: NOT
7015: AND
7016: PUSH
7017: LD_VAR 0 15
7021: AND
7022: IFFALSE 7060
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
7024: LD_VAR 0 1
7028: PPUSH
7029: LD_VAR 0 15
7033: PUSH
7034: LD_INT 1
7036: ARRAY
7037: PPUSH
7038: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
7042: LD_ADDR_VAR 0 15
7046: PUSH
7047: LD_VAR 0 15
7051: PPUSH
7052: LD_INT 1
7054: PPUSH
7055: CALL_OW 3
7059: ST_TO_ADDR
// end ; end ;
7060: GO 6802
7062: POP
7063: POP
// end ; end ; end ;
7064: PPOPN 16
7066: END
// every 0 0$1 trigger Count ( arEscapist ) do var i ;
7067: LD_EXP 56
7071: PPUSH
7072: CALL 56609 0 1
7076: IFFALSE 7221
7078: GO 7080
7080: DISABLE
7081: LD_INT 0
7083: PPUSH
// begin enable ;
7084: ENABLE
// for i in UnitFilter ( arEscapist , [ f_ok ] ) do
7085: LD_ADDR_VAR 0 1
7089: PUSH
7090: LD_EXP 56
7094: PPUSH
7095: LD_INT 50
7097: PUSH
7098: EMPTY
7099: LIST
7100: PPUSH
7101: CALL_OW 72
7105: PUSH
7106: FOR_IN
7107: IFFALSE 7219
// begin if not HasTask ( i ) then
7109: LD_VAR 0 1
7113: PPUSH
7114: CALL_OW 314
7118: NOT
7119: IFFALSE 7133
// ComMoveToArea ( i , khatamArea ) ;
7121: LD_VAR 0 1
7125: PPUSH
7126: LD_INT 11
7128: PPUSH
7129: CALL_OW 113
// if IsInArea ( i , khatamArea ) then
7133: LD_VAR 0 1
7137: PPUSH
7138: LD_INT 11
7140: PPUSH
7141: CALL_OW 308
7145: IFFALSE 7217
// begin RemoveUnit ( i ) ;
7147: LD_VAR 0 1
7151: PPUSH
7152: CALL_OW 64
// arEscapist := arEscapist diff i ;
7156: LD_ADDR_EXP 56
7160: PUSH
7161: LD_EXP 56
7165: PUSH
7166: LD_VAR 0 1
7170: DIFF
7171: ST_TO_ADDR
// arabianEscapedCounter := Inc ( arabianEscapedCounter ) ;
7172: LD_ADDR_EXP 21
7176: PUSH
7177: LD_EXP 21
7181: PPUSH
7182: CALL 93570 0 1
7186: ST_TO_ADDR
// if i = Dietrich then
7187: LD_VAR 0 1
7191: PUSH
7192: LD_EXP 50
7196: EQUAL
7197: IFFALSE 7217
// begin gensherEscaped := true ;
7199: LD_ADDR_EXP 13
7203: PUSH
7204: LD_INT 1
7206: ST_TO_ADDR
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
7207: LD_INT 1
7209: PPUSH
7210: LD_STRING 10_GensherEscape_1
7212: PPUSH
7213: CALL_OW 39
// end ; end ; end ;
7217: GO 7106
7219: POP
7220: POP
// end ;
7221: PPOPN 1
7223: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ; var i , skill , un , veh ; begin
7224: LD_INT 0
7226: PPUSH
7227: PPUSH
7228: PPUSH
7229: PPUSH
7230: PPUSH
// uc_side := 5 ;
7231: LD_ADDR_OWVAR 20
7235: PUSH
7236: LD_INT 5
7238: ST_TO_ADDR
// uc_nation := nation_arabian ;
7239: LD_ADDR_OWVAR 21
7243: PUSH
7244: LD_INT 2
7246: ST_TO_ADDR
// skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_INT 5
7254: PUSH
7255: LD_INT 6
7257: PUSH
7258: LD_INT 7
7260: PUSH
7261: LD_INT 8
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: PUSH
7270: LD_OWVAR 67
7274: ARRAY
7275: ST_TO_ADDR
// arAttackersInf := [ ] ;
7276: LD_ADDR_EXP 57
7280: PUSH
7281: EMPTY
7282: ST_TO_ADDR
// arAttackersVeh := [ ] ;
7283: LD_ADDR_EXP 58
7287: PUSH
7288: EMPTY
7289: ST_TO_ADDR
// InitHC_All ( ) ;
7290: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
7294: LD_ADDR_VAR 0 2
7298: PUSH
7299: DOUBLE
7300: LD_INT 1
7302: DEC
7303: ST_TO_ADDR
7304: LD_INT 3
7306: PUSH
7307: LD_INT 4
7309: PUSH
7310: LD_INT 5
7312: PUSH
7313: LD_INT 6
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: PUSH
7322: LD_OWVAR 67
7326: ARRAY
7327: PUSH
7328: FOR_TO
7329: IFFALSE 7431
// begin PrepareSoldier ( false , skill ) ;
7331: LD_INT 0
7333: PPUSH
7334: LD_VAR 0 3
7338: PPUSH
7339: CALL_OW 381
// un := CreateHuman ;
7343: LD_ADDR_VAR 0 4
7347: PUSH
7348: CALL_OW 44
7352: ST_TO_ADDR
// if i mod 2 = 0 then
7353: LD_VAR 0 2
7357: PUSH
7358: LD_INT 2
7360: MOD
7361: PUSH
7362: LD_INT 0
7364: EQUAL
7365: IFFALSE 7379
// SetClass ( un , class_mortar ) ;
7367: LD_VAR 0 4
7371: PPUSH
7372: LD_INT 8
7374: PPUSH
7375: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
7379: LD_VAR 0 4
7383: PPUSH
7384: LD_INT 19
7386: PPUSH
7387: LD_INT 0
7389: PPUSH
7390: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
7394: LD_ADDR_EXP 57
7398: PUSH
7399: LD_EXP 57
7403: PPUSH
7404: LD_VAR 0 4
7408: PPUSH
7409: CALL 92209 0 2
7413: ST_TO_ADDR
// ComAgressiveMove ( un , 104 , 60 ) ;
7414: LD_VAR 0 4
7418: PPUSH
7419: LD_INT 104
7421: PPUSH
7422: LD_INT 60
7424: PPUSH
7425: CALL_OW 114
// end ;
7429: GO 7328
7431: POP
7432: POP
// for i := 1 to 3 do
7433: LD_ADDR_VAR 0 2
7437: PUSH
7438: DOUBLE
7439: LD_INT 1
7441: DEC
7442: ST_TO_ADDR
7443: LD_INT 3
7445: PUSH
7446: FOR_TO
7447: IFFALSE 7599
// begin PrepareMechanic ( false , skill ) ;
7449: LD_INT 0
7451: PPUSH
7452: LD_VAR 0 3
7456: PPUSH
7457: CALL_OW 383
// un := CreateHuman ;
7461: LD_ADDR_VAR 0 4
7465: PUSH
7466: CALL_OW 44
7470: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
7471: LD_INT 14
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_INT 1
7479: PPUSH
7480: LD_INT 27
7482: PUSH
7483: LD_INT 25
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PUSH
7490: LD_VAR 0 2
7494: PUSH
7495: LD_INT 2
7497: MOD
7498: PUSH
7499: LD_INT 1
7501: PLUS
7502: ARRAY
7503: PPUSH
7504: LD_INT 80
7506: PPUSH
7507: CALL 59347 0 5
// veh := CreateVehicle ;
7511: LD_ADDR_VAR 0 5
7515: PUSH
7516: CALL_OW 45
7520: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7521: LD_VAR 0 5
7525: PPUSH
7526: LD_INT 4
7528: PPUSH
7529: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7533: LD_VAR 0 5
7537: PPUSH
7538: LD_INT 18
7540: PPUSH
7541: LD_INT 0
7543: PPUSH
7544: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7548: LD_VAR 0 4
7552: PPUSH
7553: LD_VAR 0 5
7557: PPUSH
7558: CALL_OW 52
// ComMoveXY ( un , 129 , 20 ) ;
7562: LD_VAR 0 4
7566: PPUSH
7567: LD_INT 129
7569: PPUSH
7570: LD_INT 20
7572: PPUSH
7573: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , un ) ;
7577: LD_ADDR_EXP 58
7581: PUSH
7582: LD_EXP 58
7586: PPUSH
7587: LD_VAR 0 4
7591: PPUSH
7592: CALL 92209 0 2
7596: ST_TO_ADDR
// end ;
7597: GO 7446
7599: POP
7600: POP
// wait ( 0 0$2 ) ;
7601: LD_INT 70
7603: PPUSH
7604: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
7608: LD_ADDR_VAR 0 2
7612: PUSH
7613: DOUBLE
7614: LD_INT 1
7616: DEC
7617: ST_TO_ADDR
7618: LD_INT 1
7620: PUSH
7621: LD_INT 2
7623: PUSH
7624: LD_INT 2
7626: PUSH
7627: LD_INT 3
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: LD_OWVAR 67
7640: ARRAY
7641: PUSH
7642: FOR_TO
7643: IFFALSE 7774
// begin PrepareMechanic ( false , skill ) ;
7645: LD_INT 0
7647: PPUSH
7648: LD_VAR 0 3
7652: PPUSH
7653: CALL_OW 383
// un := CreateHuman ;
7657: LD_ADDR_VAR 0 4
7661: PUSH
7662: CALL_OW 44
7666: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
7667: LD_INT 14
7669: PPUSH
7670: LD_INT 1
7672: PPUSH
7673: LD_INT 1
7675: PPUSH
7676: LD_INT 26
7678: PPUSH
7679: LD_INT 80
7681: PPUSH
7682: CALL 59347 0 5
// veh := CreateVehicle ;
7686: LD_ADDR_VAR 0 5
7690: PUSH
7691: CALL_OW 45
7695: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7696: LD_VAR 0 5
7700: PPUSH
7701: LD_INT 4
7703: PPUSH
7704: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7708: LD_VAR 0 5
7712: PPUSH
7713: LD_INT 18
7715: PPUSH
7716: LD_INT 0
7718: PPUSH
7719: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7723: LD_VAR 0 4
7727: PPUSH
7728: LD_VAR 0 5
7732: PPUSH
7733: CALL_OW 52
// ComMoveXY ( un , 133 , 40 ) ;
7737: LD_VAR 0 4
7741: PPUSH
7742: LD_INT 133
7744: PPUSH
7745: LD_INT 40
7747: PPUSH
7748: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , un ) ;
7752: LD_ADDR_EXP 58
7756: PUSH
7757: LD_EXP 58
7761: PPUSH
7762: LD_VAR 0 4
7766: PPUSH
7767: CALL 92209 0 2
7771: ST_TO_ADDR
// end ;
7772: GO 7642
7774: POP
7775: POP
// wait ( 0 0$2 ) ;
7776: LD_INT 70
7778: PPUSH
7779: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
7783: LD_ADDR_VAR 0 2
7787: PUSH
7788: DOUBLE
7789: LD_INT 1
7791: DEC
7792: ST_TO_ADDR
7793: LD_INT 1
7795: PUSH
7796: LD_INT 2
7798: PUSH
7799: LD_INT 3
7801: PUSH
7802: LD_INT 4
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: PUSH
7811: LD_OWVAR 67
7815: ARRAY
7816: PUSH
7817: FOR_TO
7818: IFFALSE 7980
// begin PrepareMechanic ( false , skill ) ;
7820: LD_INT 0
7822: PPUSH
7823: LD_VAR 0 3
7827: PPUSH
7828: CALL_OW 383
// un := CreateHuman ;
7832: LD_ADDR_VAR 0 4
7836: PUSH
7837: CALL_OW 44
7841: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
7842: LD_INT 14
7844: PPUSH
7845: LD_INT 1
7847: PPUSH
7848: LD_INT 1
7850: PPUSH
7851: LD_INT 28
7853: PPUSH
7854: LD_INT 80
7856: PPUSH
7857: CALL 59347 0 5
// veh := CreateVehicle ;
7861: LD_ADDR_VAR 0 5
7865: PUSH
7866: CALL_OW 45
7870: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7871: LD_VAR 0 5
7875: PPUSH
7876: LD_INT 4
7878: PPUSH
7879: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7883: LD_VAR 0 5
7887: PPUSH
7888: LD_INT 18
7890: PPUSH
7891: LD_INT 0
7893: PPUSH
7894: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7898: LD_VAR 0 4
7902: PPUSH
7903: LD_VAR 0 5
7907: PPUSH
7908: CALL_OW 52
// if i mod 2 = 0 then
7912: LD_VAR 0 2
7916: PUSH
7917: LD_INT 2
7919: MOD
7920: PUSH
7921: LD_INT 0
7923: EQUAL
7924: IFFALSE 7943
// ComMoveXY ( un , 136 , 61 ) else
7926: LD_VAR 0 4
7930: PPUSH
7931: LD_INT 136
7933: PPUSH
7934: LD_INT 61
7936: PPUSH
7937: CALL_OW 111
7941: GO 7958
// ComMoveXY ( un , 137 , 41 ) ;
7943: LD_VAR 0 4
7947: PPUSH
7948: LD_INT 137
7950: PPUSH
7951: LD_INT 41
7953: PPUSH
7954: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , un ) ;
7958: LD_ADDR_EXP 58
7962: PUSH
7963: LD_EXP 58
7967: PPUSH
7968: LD_VAR 0 4
7972: PPUSH
7973: CALL 92209 0 2
7977: ST_TO_ADDR
// end ;
7978: GO 7817
7980: POP
7981: POP
// arabianAttackSpawned := true ;
7982: LD_ADDR_EXP 12
7986: PUSH
7987: LD_INT 1
7989: ST_TO_ADDR
// end ;
7990: LD_VAR 0 1
7994: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest ;
7995: LD_EXP 57
7999: IFFALSE 8412
8001: GO 8003
8003: DISABLE
8004: LD_INT 0
8006: PPUSH
8007: PPUSH
8008: PPUSH
// begin wait ( 0 0$10 ) ;
8009: LD_INT 350
8011: PPUSH
8012: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
8016: LD_ADDR_VAR 0 2
8020: PUSH
8021: LD_EXP 57
8025: PPUSH
8026: LD_INT 25
8028: PUSH
8029: LD_INT 1
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PUSH
8036: LD_INT 50
8038: PUSH
8039: EMPTY
8040: LIST
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PPUSH
8046: CALL_OW 72
8050: ST_TO_ADDR
// for i in tmp do
8051: LD_ADDR_VAR 0 1
8055: PUSH
8056: LD_VAR 0 2
8060: PUSH
8061: FOR_IN
8062: IFFALSE 8187
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
8064: LD_ADDR_VAR 0 3
8068: PUSH
8069: LD_INT 22
8071: PUSH
8072: LD_INT 1
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PUSH
8079: LD_INT 3
8081: PUSH
8082: LD_INT 120
8084: PUSH
8085: LD_INT 11
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PUSH
8096: LD_INT 2
8098: PUSH
8099: LD_INT 21
8101: PUSH
8102: LD_INT 2
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: LD_INT 21
8111: PUSH
8112: LD_INT 3
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: LIST
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: LIST
8128: PPUSH
8129: CALL_OW 69
8133: PPUSH
8134: LD_VAR 0 1
8138: PPUSH
8139: CALL_OW 74
8143: ST_TO_ADDR
// if not nearest then
8144: LD_VAR 0 3
8148: NOT
8149: IFFALSE 8153
// break ;
8151: GO 8187
// SetTag ( nearest , tMined ) ;
8153: LD_VAR 0 3
8157: PPUSH
8158: LD_INT 11
8160: PPUSH
8161: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
8165: LD_VAR 0 1
8169: PPUSH
8170: LD_INT 0
8172: PPUSH
8173: LD_INT 0
8175: PPUSH
8176: LD_VAR 0 3
8180: PPUSH
8181: CALL_OW 132
// end ;
8185: GO 8061
8187: POP
8188: POP
// if hasBase and epsilon then
8189: LD_EXP 9
8193: PUSH
8194: LD_EXP 10
8198: AND
8199: IFFALSE 8223
// AddComPlaceDelayedCharge ( tmp , 0 , 0 , epsilon ) else
8201: LD_VAR 0 2
8205: PPUSH
8206: LD_INT 0
8208: PPUSH
8209: LD_INT 0
8211: PPUSH
8212: LD_EXP 10
8216: PPUSH
8217: CALL_OW 192
8221: GO 8238
// AddComMoveXY ( tmp , 107 , 59 ) ;
8223: LD_VAR 0 2
8227: PPUSH
8228: LD_INT 107
8230: PPUSH
8231: LD_INT 59
8233: PPUSH
8234: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8238: LD_INT 35
8240: PPUSH
8241: CALL_OW 67
// until IsDead ( Dietrich ) or gensherEscaped ;
8245: LD_EXP 50
8249: PPUSH
8250: CALL_OW 301
8254: PUSH
8255: LD_EXP 13
8259: OR
8260: IFFALSE 8238
// if not gensherEscaped then
8262: LD_EXP 13
8266: NOT
8267: IFFALSE 8276
// wait ( 1 1$20 ) ;
8269: LD_INT 2800
8271: PPUSH
8272: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
8276: LD_ADDR_VAR 0 2
8280: PUSH
8281: LD_EXP 57
8285: PPUSH
8286: LD_INT 50
8288: PUSH
8289: EMPTY
8290: LIST
8291: PPUSH
8292: CALL_OW 72
8296: ST_TO_ADDR
// ComMoveXY ( tmp , 143 , 117 ) ;
8297: LD_VAR 0 2
8301: PPUSH
8302: LD_INT 143
8304: PPUSH
8305: LD_INT 117
8307: PPUSH
8308: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8312: LD_INT 35
8314: PPUSH
8315: CALL_OW 67
// for i in tmp do
8319: LD_ADDR_VAR 0 1
8323: PUSH
8324: LD_VAR 0 2
8328: PUSH
8329: FOR_IN
8330: IFFALSE 8403
// if IsInArea ( i , arAttackSpawn2Area ) then
8332: LD_VAR 0 1
8336: PPUSH
8337: LD_INT 19
8339: PPUSH
8340: CALL_OW 308
8344: IFFALSE 8389
// begin tmp := tmp diff i ;
8346: LD_ADDR_VAR 0 2
8350: PUSH
8351: LD_VAR 0 2
8355: PUSH
8356: LD_VAR 0 1
8360: DIFF
8361: ST_TO_ADDR
// arAttackersInf := arAttackersInf diff i ;
8362: LD_ADDR_EXP 57
8366: PUSH
8367: LD_EXP 57
8371: PUSH
8372: LD_VAR 0 1
8376: DIFF
8377: ST_TO_ADDR
// RemoveUnit ( i ) ;
8378: LD_VAR 0 1
8382: PPUSH
8383: CALL_OW 64
// end else
8387: GO 8401
// ComMoveToArea ( i , arAttackSpawn2Area ) ;
8389: LD_VAR 0 1
8393: PPUSH
8394: LD_INT 19
8396: PPUSH
8397: CALL_OW 113
8401: GO 8329
8403: POP
8404: POP
// until not tmp ;
8405: LD_VAR 0 2
8409: NOT
8410: IFFALSE 8312
// end ;
8412: PPOPN 3
8414: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp ;
8415: LD_EXP 58
8419: IFFALSE 8658
8421: GO 8423
8423: DISABLE
8424: LD_INT 0
8426: PPUSH
8427: PPUSH
// begin repeat wait ( 0 0$1 ) ;
8428: LD_INT 35
8430: PPUSH
8431: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8435: LD_ADDR_VAR 0 2
8439: PUSH
8440: LD_EXP 58
8444: PPUSH
8445: LD_INT 50
8447: PUSH
8448: EMPTY
8449: LIST
8450: PPUSH
8451: CALL_OW 72
8455: ST_TO_ADDR
// for i in tmp do
8456: LD_ADDR_VAR 0 1
8460: PUSH
8461: LD_VAR 0 2
8465: PUSH
8466: FOR_IN
8467: IFFALSE 8493
// AgressiveMove ( i , [ [ 110 , 40 ] ] ) ;
8469: LD_VAR 0 1
8473: PPUSH
8474: LD_INT 110
8476: PUSH
8477: LD_INT 40
8479: PUSH
8480: EMPTY
8481: LIST
8482: LIST
8483: PUSH
8484: EMPTY
8485: LIST
8486: PPUSH
8487: CALL 94813 0 2
8491: GO 8466
8493: POP
8494: POP
// until not arAttackersVeh or gensherEscaped or IsDead ( Dietrich ) ;
8495: LD_EXP 58
8499: NOT
8500: PUSH
8501: LD_EXP 13
8505: OR
8506: PUSH
8507: LD_EXP 50
8511: PPUSH
8512: CALL_OW 301
8516: OR
8517: IFFALSE 8428
// if not arAttackersVeh then
8519: LD_EXP 58
8523: NOT
8524: IFFALSE 8528
// exit ;
8526: GO 8658
// repeat wait ( 0 0$1 ) ;
8528: LD_INT 35
8530: PPUSH
8531: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8535: LD_ADDR_VAR 0 2
8539: PUSH
8540: LD_EXP 58
8544: PPUSH
8545: LD_INT 50
8547: PUSH
8548: EMPTY
8549: LIST
8550: PPUSH
8551: CALL_OW 72
8555: ST_TO_ADDR
// for i in tmp do
8556: LD_ADDR_VAR 0 1
8560: PUSH
8561: LD_VAR 0 2
8565: PUSH
8566: FOR_IN
8567: IFFALSE 8649
// if IsInArea ( i , arAttackSpawnArea ) then
8569: LD_VAR 0 1
8573: PPUSH
8574: LD_INT 18
8576: PPUSH
8577: CALL_OW 308
8581: IFFALSE 8635
// begin if IsInUnit ( i ) then
8583: LD_VAR 0 1
8587: PPUSH
8588: CALL_OW 310
8592: IFFALSE 8608
// RemoveUnit ( IsInUnit ( i ) ) ;
8594: LD_VAR 0 1
8598: PPUSH
8599: CALL_OW 310
8603: PPUSH
8604: CALL_OW 64
// RemoveUnit ( i ) ;
8608: LD_VAR 0 1
8612: PPUSH
8613: CALL_OW 64
// arAttackersVeh := arAttackersVeh diff i ;
8617: LD_ADDR_EXP 58
8621: PUSH
8622: LD_EXP 58
8626: PUSH
8627: LD_VAR 0 1
8631: DIFF
8632: ST_TO_ADDR
// end else
8633: GO 8647
// ComMoveToArea ( i , arAttackSpawnArea ) ;
8635: LD_VAR 0 1
8639: PPUSH
8640: LD_INT 18
8642: PPUSH
8643: CALL_OW 113
8647: GO 8566
8649: POP
8650: POP
// until not tmp ;
8651: LD_VAR 0 2
8655: NOT
8656: IFFALSE 8528
// end ; end_of_file
8658: PPOPN 2
8660: END
// export ruForces , ruForces2 , ruCommander , ruCommander2 , ruMech , ruMech2 ; export ruTech , ruBaseArea , ruBaseArea2 , ruBase , ruBase2 , ruConstructList , ruConstructList2 , ruCratesArea , ruCratesArea2 , ruHealPoint , ruHealPoint2 , ruBuildings , ruBuildings2 , ruTransportDestroyed , ruTanks , ruTanks2 , ruExtraTanks , ruParkingArea , ruParkingArea2 , ruCratesSpawnArea , ruCratesSpawnArea2 ; export function PrepareRussian ; var i , j , un , skill , sources ; begin
8661: LD_INT 0
8663: PPUSH
8664: PPUSH
8665: PPUSH
8666: PPUSH
8667: PPUSH
8668: PPUSH
// uc_side := 3 ;
8669: LD_ADDR_OWVAR 20
8673: PUSH
8674: LD_INT 3
8676: ST_TO_ADDR
// uc_nation := nation_russian ;
8677: LD_ADDR_OWVAR 21
8681: PUSH
8682: LD_INT 3
8684: ST_TO_ADDR
// ruForces := [ ] ;
8685: LD_ADDR_EXP 59
8689: PUSH
8690: EMPTY
8691: ST_TO_ADDR
// ruForces2 := [ ] ;
8692: LD_ADDR_EXP 60
8696: PUSH
8697: EMPTY
8698: ST_TO_ADDR
// ruMech := [ ] ;
8699: LD_ADDR_EXP 63
8703: PUSH
8704: EMPTY
8705: ST_TO_ADDR
// ruMech2 := [ ] ;
8706: LD_ADDR_EXP 64
8710: PUSH
8711: EMPTY
8712: ST_TO_ADDR
// ruTech := [ tech_LimTeleport , tech_ST1 , tech_Weap2 , tech_Sib1 ] ;
8713: LD_ADDR_EXP 65
8717: PUSH
8718: LD_INT 37
8720: PUSH
8721: LD_INT 63
8723: PUSH
8724: LD_INT 52
8726: PUSH
8727: LD_INT 54
8729: PUSH
8730: EMPTY
8731: LIST
8732: LIST
8733: LIST
8734: LIST
8735: ST_TO_ADDR
// ruBaseArea := 0 ;
8736: LD_ADDR_EXP 66
8740: PUSH
8741: LD_INT 0
8743: ST_TO_ADDR
// ruBaseArea2 := 0 ;
8744: LD_ADDR_EXP 67
8748: PUSH
8749: LD_INT 0
8751: ST_TO_ADDR
// ruBase := 0 ;
8752: LD_ADDR_EXP 68
8756: PUSH
8757: LD_INT 0
8759: ST_TO_ADDR
// ruBase2 := 0 ;
8760: LD_ADDR_EXP 69
8764: PUSH
8765: LD_INT 0
8767: ST_TO_ADDR
// ruConstructList := [ ] ;
8768: LD_ADDR_EXP 70
8772: PUSH
8773: EMPTY
8774: ST_TO_ADDR
// ruConstructList2 := [ [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ] ;
8775: LD_ADDR_EXP 71
8779: PUSH
8780: LD_INT 22
8782: PUSH
8783: LD_INT 3
8785: PUSH
8786: LD_INT 1
8788: PUSH
8789: LD_INT 43
8791: PUSH
8792: LD_INT 44
8794: PUSH
8795: LD_INT 45
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: LIST
8802: PUSH
8803: LD_INT 1
8805: PPUSH
8806: LD_INT 3
8808: PPUSH
8809: CALL_OW 12
8813: ARRAY
8814: PUSH
8815: EMPTY
8816: LIST
8817: LIST
8818: LIST
8819: LIST
8820: PUSH
8821: LD_INT 22
8823: PUSH
8824: LD_INT 3
8826: PUSH
8827: LD_INT 1
8829: PUSH
8830: LD_INT 43
8832: PUSH
8833: LD_INT 44
8835: PUSH
8836: LD_INT 45
8838: PUSH
8839: EMPTY
8840: LIST
8841: LIST
8842: LIST
8843: PUSH
8844: LD_INT 1
8846: PPUSH
8847: LD_INT 3
8849: PPUSH
8850: CALL_OW 12
8854: ARRAY
8855: PUSH
8856: EMPTY
8857: LIST
8858: LIST
8859: LIST
8860: LIST
8861: PUSH
8862: LD_INT 22
8864: PUSH
8865: LD_INT 3
8867: PUSH
8868: LD_INT 1
8870: PUSH
8871: LD_INT 43
8873: PUSH
8874: LD_INT 44
8876: PUSH
8877: LD_INT 45
8879: PUSH
8880: EMPTY
8881: LIST
8882: LIST
8883: LIST
8884: PUSH
8885: LD_INT 1
8887: PPUSH
8888: LD_INT 3
8890: PPUSH
8891: CALL_OW 12
8895: ARRAY
8896: PUSH
8897: EMPTY
8898: LIST
8899: LIST
8900: LIST
8901: LIST
8902: PUSH
8903: EMPTY
8904: LIST
8905: LIST
8906: LIST
8907: ST_TO_ADDR
// ruCratesArea := 0 ;
8908: LD_ADDR_EXP 72
8912: PUSH
8913: LD_INT 0
8915: ST_TO_ADDR
// ruCratesArea2 := 0 ;
8916: LD_ADDR_EXP 73
8920: PUSH
8921: LD_INT 0
8923: ST_TO_ADDR
// ruHealPoint := [ ] ;
8924: LD_ADDR_EXP 74
8928: PUSH
8929: EMPTY
8930: ST_TO_ADDR
// ruHealPoint2 := [ ] ;
8931: LD_ADDR_EXP 75
8935: PUSH
8936: EMPTY
8937: ST_TO_ADDR
// ruBuildings := [ ] ;
8938: LD_ADDR_EXP 76
8942: PUSH
8943: EMPTY
8944: ST_TO_ADDR
// ruBuildings2 := [ ] ;
8945: LD_ADDR_EXP 77
8949: PUSH
8950: EMPTY
8951: ST_TO_ADDR
// ruTanks := [ ] ;
8952: LD_ADDR_EXP 79
8956: PUSH
8957: EMPTY
8958: ST_TO_ADDR
// ruTanks2 := [ ] ;
8959: LD_ADDR_EXP 80
8963: PUSH
8964: EMPTY
8965: ST_TO_ADDR
// ruParkingArea := 0 ;
8966: LD_ADDR_EXP 82
8970: PUSH
8971: LD_INT 0
8973: ST_TO_ADDR
// ruParkingArea2 := 0 ;
8974: LD_ADDR_EXP 83
8978: PUSH
8979: LD_INT 0
8981: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
8982: LD_ADDR_VAR 0 2
8986: PUSH
8987: DOUBLE
8988: LD_INT 1
8990: DEC
8991: ST_TO_ADDR
8992: LD_INT 2
8994: PUSH
8995: LD_INT 3
8997: PUSH
8998: LD_INT 4
9000: PUSH
9001: LD_INT 4
9003: PUSH
9004: EMPTY
9005: LIST
9006: LIST
9007: LIST
9008: LIST
9009: PUSH
9010: LD_OWVAR 67
9014: ARRAY
9015: PUSH
9016: FOR_TO
9017: IFFALSE 9077
// ruConstructList := Join ( ruConstructList , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
9019: LD_ADDR_EXP 70
9023: PUSH
9024: LD_EXP 70
9028: PPUSH
9029: LD_INT 22
9031: PUSH
9032: LD_INT 3
9034: PUSH
9035: LD_INT 1
9037: PUSH
9038: LD_INT 43
9040: PUSH
9041: LD_INT 44
9043: PUSH
9044: LD_INT 45
9046: PUSH
9047: EMPTY
9048: LIST
9049: LIST
9050: LIST
9051: PUSH
9052: LD_INT 1
9054: PPUSH
9055: LD_INT 3
9057: PPUSH
9058: CALL_OW 12
9062: ARRAY
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: LIST
9068: LIST
9069: PPUSH
9070: CALL 92209 0 2
9074: ST_TO_ADDR
9075: GO 9016
9077: POP
9078: POP
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
9079: LD_ADDR_VAR 0 6
9083: PUSH
9084: LD_INT 43
9086: PUSH
9087: LD_INT 68
9089: PUSH
9090: EMPTY
9091: LIST
9092: LIST
9093: PUSH
9094: LD_INT 43
9096: PUSH
9097: LD_INT 79
9099: PUSH
9100: EMPTY
9101: LIST
9102: LIST
9103: PUSH
9104: LD_INT 99
9106: PUSH
9107: LD_INT 114
9109: PUSH
9110: EMPTY
9111: LIST
9112: LIST
9113: PUSH
9114: LD_INT 103
9116: PUSH
9117: LD_INT 114
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: PUSH
9124: LD_INT 156
9126: PUSH
9127: LD_INT 92
9129: PUSH
9130: EMPTY
9131: LIST
9132: LIST
9133: PUSH
9134: LD_INT 152
9136: PUSH
9137: LD_INT 85
9139: PUSH
9140: EMPTY
9141: LIST
9142: LIST
9143: PUSH
9144: EMPTY
9145: LIST
9146: LIST
9147: LIST
9148: LIST
9149: LIST
9150: LIST
9151: ST_TO_ADDR
// for i in sources do
9152: LD_ADDR_VAR 0 2
9156: PUSH
9157: LD_VAR 0 6
9161: PUSH
9162: FOR_IN
9163: IFFALSE 9192
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
9165: LD_VAR 0 2
9169: PUSH
9170: LD_INT 1
9172: ARRAY
9173: PPUSH
9174: LD_VAR 0 2
9178: PUSH
9179: LD_INT 2
9181: ARRAY
9182: PPUSH
9183: LD_INT 3
9185: PPUSH
9186: CALL_OW 441
9190: GO 9162
9192: POP
9193: POP
// if Difficulty > 2 then
9194: LD_OWVAR 67
9198: PUSH
9199: LD_INT 2
9201: GREATER
9202: IFFALSE 9230
// begin SetTech ( tech_weap2 , 6 , state_researched ) ;
9204: LD_INT 52
9206: PPUSH
9207: LD_INT 6
9209: PPUSH
9210: LD_INT 2
9212: PPUSH
9213: CALL_OW 322
// SetTech ( tech_comp2 , 6 , state_researched ) ;
9217: LD_INT 58
9219: PPUSH
9220: LD_INT 6
9222: PPUSH
9223: LD_INT 2
9225: PPUSH
9226: CALL_OW 322
// end ; skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
9230: LD_ADDR_VAR 0 5
9234: PUSH
9235: LD_INT 5
9237: PUSH
9238: LD_INT 6
9240: PUSH
9241: LD_INT 7
9243: PUSH
9244: LD_INT 8
9246: PUSH
9247: EMPTY
9248: LIST
9249: LIST
9250: LIST
9251: LIST
9252: PUSH
9253: LD_OWVAR 67
9257: ARRAY
9258: ST_TO_ADDR
// ruCommander := PrepareUnit ( Tsaritsyn , false ,  ) ;
9259: LD_ADDR_EXP 61
9263: PUSH
9264: LD_STRING Tsaritsyn
9266: PPUSH
9267: LD_INT 0
9269: PPUSH
9270: LD_STRING 
9272: PPUSH
9273: CALL 54507 0 3
9277: ST_TO_ADDR
// for i := 1 to 4 do
9278: LD_ADDR_VAR 0 2
9282: PUSH
9283: DOUBLE
9284: LD_INT 1
9286: DEC
9287: ST_TO_ADDR
9288: LD_INT 4
9290: PUSH
9291: FOR_TO
9292: IFFALSE 9510
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9294: LD_ADDR_VAR 0 3
9298: PUSH
9299: DOUBLE
9300: LD_INT 1
9302: DEC
9303: ST_TO_ADDR
9304: LD_INT 5
9306: PUSH
9307: LD_INT 6
9309: PUSH
9310: LD_INT 8
9312: PUSH
9313: LD_INT 9
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: LIST
9320: LIST
9321: PUSH
9322: LD_OWVAR 67
9326: ARRAY
9327: PUSH
9328: LD_INT 3
9330: PUSH
9331: LD_INT 4
9333: PUSH
9334: LD_INT 5
9336: PUSH
9337: LD_INT 6
9339: PUSH
9340: EMPTY
9341: LIST
9342: LIST
9343: LIST
9344: LIST
9345: PUSH
9346: LD_OWVAR 67
9350: ARRAY
9351: PUSH
9352: LD_INT 3
9354: PUSH
9355: LD_INT 4
9357: PUSH
9358: LD_INT 5
9360: PUSH
9361: LD_INT 6
9363: PUSH
9364: EMPTY
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: PUSH
9370: LD_OWVAR 67
9374: ARRAY
9375: PUSH
9376: LD_INT 2
9378: PUSH
9379: LD_INT 3
9381: PUSH
9382: LD_INT 3
9384: PUSH
9385: LD_INT 3
9387: PUSH
9388: EMPTY
9389: LIST
9390: LIST
9391: LIST
9392: LIST
9393: PUSH
9394: LD_OWVAR 67
9398: ARRAY
9399: PUSH
9400: EMPTY
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: PUSH
9406: LD_VAR 0 2
9410: ARRAY
9411: PUSH
9412: FOR_TO
9413: IFFALSE 9506
// begin PrepareHuman ( false , i , skill ) ;
9415: LD_INT 0
9417: PPUSH
9418: LD_VAR 0 2
9422: PPUSH
9423: LD_VAR 0 5
9427: PPUSH
9428: CALL_OW 380
// un := CreateHuman ;
9432: LD_ADDR_VAR 0 4
9436: PUSH
9437: CALL_OW 44
9441: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
9442: LD_ADDR_EXP 59
9446: PUSH
9447: LD_EXP 59
9451: PPUSH
9452: LD_VAR 0 4
9456: PPUSH
9457: CALL 92209 0 2
9461: ST_TO_ADDR
// if i = 3 then
9462: LD_VAR 0 2
9466: PUSH
9467: LD_INT 3
9469: EQUAL
9470: IFFALSE 9504
// begin ruMech := Join ( ruMech , un ) ;
9472: LD_ADDR_EXP 63
9476: PUSH
9477: LD_EXP 63
9481: PPUSH
9482: LD_VAR 0 4
9486: PPUSH
9487: CALL 92209 0 2
9491: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9492: LD_VAR 0 4
9496: PPUSH
9497: LD_INT 1
9499: PPUSH
9500: CALL_OW 336
// end ; end ;
9504: GO 9412
9506: POP
9507: POP
9508: GO 9291
9510: POP
9511: POP
// if Difficulty < 4 then
9512: LD_OWVAR 67
9516: PUSH
9517: LD_INT 4
9519: LESS
9520: IFFALSE 9524
// exit ;
9522: GO 9796
// PrepareSoldier ( sex_male , skill + 1 ) ;
9524: LD_INT 1
9526: PPUSH
9527: LD_VAR 0 5
9531: PUSH
9532: LD_INT 1
9534: PLUS
9535: PPUSH
9536: CALL_OW 381
// hc_importance := 100 ;
9540: LD_ADDR_OWVAR 32
9544: PUSH
9545: LD_INT 100
9547: ST_TO_ADDR
// ruCommander2 := CreateHuman ;
9548: LD_ADDR_EXP 62
9552: PUSH
9553: CALL_OW 44
9557: ST_TO_ADDR
// InitHc_All ( ) ;
9558: CALL_OW 584
// for i := 1 to 4 do
9562: LD_ADDR_VAR 0 2
9566: PUSH
9567: DOUBLE
9568: LD_INT 1
9570: DEC
9571: ST_TO_ADDR
9572: LD_INT 4
9574: PUSH
9575: FOR_TO
9576: IFFALSE 9794
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9578: LD_ADDR_VAR 0 3
9582: PUSH
9583: DOUBLE
9584: LD_INT 1
9586: DEC
9587: ST_TO_ADDR
9588: LD_INT 5
9590: PUSH
9591: LD_INT 6
9593: PUSH
9594: LD_INT 8
9596: PUSH
9597: LD_INT 9
9599: PUSH
9600: EMPTY
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: PUSH
9606: LD_OWVAR 67
9610: ARRAY
9611: PUSH
9612: LD_INT 3
9614: PUSH
9615: LD_INT 4
9617: PUSH
9618: LD_INT 5
9620: PUSH
9621: LD_INT 6
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: PUSH
9630: LD_OWVAR 67
9634: ARRAY
9635: PUSH
9636: LD_INT 3
9638: PUSH
9639: LD_INT 4
9641: PUSH
9642: LD_INT 5
9644: PUSH
9645: LD_INT 6
9647: PUSH
9648: EMPTY
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: PUSH
9654: LD_OWVAR 67
9658: ARRAY
9659: PUSH
9660: LD_INT 2
9662: PUSH
9663: LD_INT 3
9665: PUSH
9666: LD_INT 3
9668: PUSH
9669: LD_INT 3
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: PUSH
9678: LD_OWVAR 67
9682: ARRAY
9683: PUSH
9684: EMPTY
9685: LIST
9686: LIST
9687: LIST
9688: LIST
9689: PUSH
9690: LD_VAR 0 2
9694: ARRAY
9695: PUSH
9696: FOR_TO
9697: IFFALSE 9790
// begin PrepareHuman ( false , i , skill ) ;
9699: LD_INT 0
9701: PPUSH
9702: LD_VAR 0 2
9706: PPUSH
9707: LD_VAR 0 5
9711: PPUSH
9712: CALL_OW 380
// un := CreateHuman ;
9716: LD_ADDR_VAR 0 4
9720: PUSH
9721: CALL_OW 44
9725: ST_TO_ADDR
// ruForces2 := Join ( ruForces2 , un ) ;
9726: LD_ADDR_EXP 60
9730: PUSH
9731: LD_EXP 60
9735: PPUSH
9736: LD_VAR 0 4
9740: PPUSH
9741: CALL 92209 0 2
9745: ST_TO_ADDR
// if i = 3 then
9746: LD_VAR 0 2
9750: PUSH
9751: LD_INT 3
9753: EQUAL
9754: IFFALSE 9788
// begin ruMech2 := Join ( ruMech2 , un ) ;
9756: LD_ADDR_EXP 64
9760: PUSH
9761: LD_EXP 64
9765: PPUSH
9766: LD_VAR 0 4
9770: PPUSH
9771: CALL 92209 0 2
9775: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9776: LD_VAR 0 4
9780: PPUSH
9781: LD_INT 1
9783: PPUSH
9784: CALL_OW 336
// end ; end ;
9788: GO 9696
9790: POP
9791: POP
9792: GO 9575
9794: POP
9795: POP
// end ;
9796: LD_VAR 0 1
9800: RET
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings ) < 3 do var i ;
9801: LD_EXP 66
9805: PPUSH
9806: LD_INT 30
9808: PUSH
9809: LD_INT 3
9811: PUSH
9812: EMPTY
9813: LIST
9814: LIST
9815: PUSH
9816: LD_INT 50
9818: PUSH
9819: EMPTY
9820: LIST
9821: PUSH
9822: EMPTY
9823: LIST
9824: LIST
9825: PPUSH
9826: CALL_OW 70
9830: PUSH
9831: LD_EXP 76
9835: PPUSH
9836: CALL 56609 0 1
9840: PUSH
9841: LD_INT 3
9843: LESS
9844: AND
9845: IFFALSE 10109
9847: GO 9849
9849: DISABLE
9850: LD_INT 0
9852: PPUSH
// begin enable ;
9853: ENABLE
// ruConstructList := ruConstructList ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
9854: LD_ADDR_EXP 70
9858: PUSH
9859: LD_EXP 70
9863: PUSH
9864: LD_INT 22
9866: PUSH
9867: LD_INT 22
9869: PUSH
9870: LD_INT 24
9872: PUSH
9873: LD_INT 24
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: PUSH
9882: LD_OWVAR 67
9886: ARRAY
9887: PUSH
9888: LD_INT 1
9890: PUSH
9891: LD_INT 3
9893: PUSH
9894: LD_INT 44
9896: PUSH
9897: LD_INT 45
9899: PUSH
9900: EMPTY
9901: LIST
9902: LIST
9903: PUSH
9904: LD_INT 1
9906: PPUSH
9907: LD_INT 2
9909: PPUSH
9910: CALL_OW 12
9914: ARRAY
9915: PUSH
9916: EMPTY
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: PUSH
9922: LD_INT 22
9924: PUSH
9925: LD_INT 22
9927: PUSH
9928: LD_INT 24
9930: PUSH
9931: LD_INT 24
9933: PUSH
9934: EMPTY
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: PUSH
9940: LD_OWVAR 67
9944: ARRAY
9945: PUSH
9946: LD_INT 1
9948: PUSH
9949: LD_INT 3
9951: PUSH
9952: LD_INT 45
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: PUSH
9961: LD_INT 22
9963: PUSH
9964: LD_INT 22
9966: PUSH
9967: LD_INT 24
9969: PUSH
9970: LD_INT 24
9972: PUSH
9973: EMPTY
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: PUSH
9979: LD_OWVAR 67
9983: ARRAY
9984: PUSH
9985: LD_INT 1
9987: PUSH
9988: LD_INT 3
9990: PUSH
9991: LD_INT 45
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: LIST
9998: LIST
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: ADD
10005: ST_TO_ADDR
// for i := Difficulty downto 1 do
10006: LD_ADDR_VAR 0 1
10010: PUSH
10011: DOUBLE
10012: LD_OWVAR 67
10016: INC
10017: ST_TO_ADDR
10018: LD_INT 1
10020: PUSH
10021: FOR_DOWNTO
10022: IFFALSE 10107
// ruConstructList := Join ( ruConstructList , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 4 ) ] ] ) ;
10024: LD_ADDR_EXP 70
10028: PUSH
10029: LD_EXP 70
10033: PPUSH
10034: LD_INT 22
10036: PUSH
10037: LD_INT 22
10039: PUSH
10040: LD_INT 24
10042: PUSH
10043: LD_INT 24
10045: PUSH
10046: EMPTY
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: PUSH
10052: LD_OWVAR 67
10056: ARRAY
10057: PUSH
10058: LD_INT 1
10060: PUSH
10061: LD_INT 3
10063: PUSH
10064: LD_INT 44
10066: PUSH
10067: LD_INT 45
10069: PUSH
10070: LD_INT 45
10072: PUSH
10073: LD_INT 43
10075: PUSH
10076: EMPTY
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: PUSH
10082: LD_INT 1
10084: PPUSH
10085: LD_INT 4
10087: PPUSH
10088: CALL_OW 12
10092: ARRAY
10093: PUSH
10094: EMPTY
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: PPUSH
10100: CALL 92209 0 2
10104: ST_TO_ADDR
10105: GO 10021
10107: POP
10108: POP
// end ;
10109: PPOPN 1
10111: END
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea2 , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings2 ) < 3 do
10112: LD_EXP 67
10116: PPUSH
10117: LD_INT 30
10119: PUSH
10120: LD_INT 3
10122: PUSH
10123: EMPTY
10124: LIST
10125: LIST
10126: PUSH
10127: LD_INT 50
10129: PUSH
10130: EMPTY
10131: LIST
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PPUSH
10137: CALL_OW 70
10141: PUSH
10142: LD_EXP 77
10146: PPUSH
10147: CALL 56609 0 1
10151: PUSH
10152: LD_INT 3
10154: LESS
10155: AND
10156: IFFALSE 10351
10158: GO 10160
10160: DISABLE
// begin enable ;
10161: ENABLE
// ruConstructList2 := ruConstructList2 ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] ] ;
10162: LD_ADDR_EXP 71
10166: PUSH
10167: LD_EXP 71
10171: PUSH
10172: LD_INT 22
10174: PUSH
10175: LD_INT 22
10177: PUSH
10178: LD_INT 24
10180: PUSH
10181: LD_INT 24
10183: PUSH
10184: EMPTY
10185: LIST
10186: LIST
10187: LIST
10188: LIST
10189: PUSH
10190: LD_INT 1
10192: PPUSH
10193: LD_INT 4
10195: PPUSH
10196: CALL_OW 12
10200: ARRAY
10201: PUSH
10202: LD_INT 1
10204: PUSH
10205: LD_INT 3
10207: PUSH
10208: LD_INT 44
10210: PUSH
10211: LD_INT 45
10213: PUSH
10214: EMPTY
10215: LIST
10216: LIST
10217: PUSH
10218: LD_INT 1
10220: PPUSH
10221: LD_INT 2
10223: PPUSH
10224: CALL_OW 12
10228: ARRAY
10229: PUSH
10230: EMPTY
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: PUSH
10236: LD_INT 22
10238: PUSH
10239: LD_INT 22
10241: PUSH
10242: LD_INT 24
10244: PUSH
10245: LD_INT 24
10247: PUSH
10248: EMPTY
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: PUSH
10254: LD_INT 1
10256: PPUSH
10257: LD_INT 4
10259: PPUSH
10260: CALL_OW 12
10264: ARRAY
10265: PUSH
10266: LD_INT 1
10268: PUSH
10269: LD_INT 3
10271: PUSH
10272: LD_INT 45
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 22
10283: PUSH
10284: LD_INT 22
10286: PUSH
10287: LD_INT 24
10289: PUSH
10290: LD_INT 24
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 1
10301: PPUSH
10302: LD_INT 4
10304: PPUSH
10305: CALL_OW 12
10309: ARRAY
10310: PUSH
10311: LD_INT 1
10313: PUSH
10314: LD_INT 3
10316: PUSH
10317: LD_INT 45
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 22
10328: PUSH
10329: LD_INT 1
10331: PUSH
10332: LD_INT 3
10334: PUSH
10335: LD_INT 43
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: PUSH
10344: EMPTY
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: ADD
10350: ST_TO_ADDR
// end ;
10351: END
// export function SpawnConvoy ; var i , tmp , spawn , area , path , place , point ; begin
10352: LD_INT 0
10354: PPUSH
10355: PPUSH
10356: PPUSH
10357: PPUSH
10358: PPUSH
10359: PPUSH
10360: PPUSH
10361: PPUSH
// case Difficulty of 1 :
10362: LD_OWVAR 67
10366: PUSH
10367: LD_INT 1
10369: DOUBLE
10370: EQUAL
10371: IFTRUE 10375
10373: GO 10394
10375: POP
// spawn := rand ( 1 , 2 ) ; 2 :
10376: LD_ADDR_VAR 0 4
10380: PUSH
10381: LD_INT 1
10383: PPUSH
10384: LD_INT 2
10386: PPUSH
10387: CALL_OW 12
10391: ST_TO_ADDR
10392: GO 10468
10394: LD_INT 2
10396: DOUBLE
10397: EQUAL
10398: IFTRUE 10402
10400: GO 10421
10402: POP
// spawn := rand ( 1 , 3 ) ; 3 :
10403: LD_ADDR_VAR 0 4
10407: PUSH
10408: LD_INT 1
10410: PPUSH
10411: LD_INT 3
10413: PPUSH
10414: CALL_OW 12
10418: ST_TO_ADDR
10419: GO 10468
10421: LD_INT 3
10423: DOUBLE
10424: EQUAL
10425: IFTRUE 10429
10427: GO 10448
10429: POP
// spawn := rand ( 2 , 3 ) ; 4 :
10430: LD_ADDR_VAR 0 4
10434: PUSH
10435: LD_INT 2
10437: PPUSH
10438: LD_INT 3
10440: PPUSH
10441: CALL_OW 12
10445: ST_TO_ADDR
10446: GO 10468
10448: LD_INT 4
10450: DOUBLE
10451: EQUAL
10452: IFTRUE 10456
10454: GO 10467
10456: POP
// spawn := 3 ; end ;
10457: LD_ADDR_VAR 0 4
10461: PUSH
10462: LD_INT 3
10464: ST_TO_ADDR
10465: GO 10468
10467: POP
// path := [ centerPathArea , westPathArea , eastPathArea ] [ spawn ] ;
10468: LD_ADDR_VAR 0 6
10472: PUSH
10473: LD_INT 24
10475: PUSH
10476: LD_INT 25
10478: PUSH
10479: LD_INT 23
10481: PUSH
10482: EMPTY
10483: LIST
10484: LIST
10485: LIST
10486: PUSH
10487: LD_VAR 0 4
10491: ARRAY
10492: ST_TO_ADDR
// area := [ ruSpawnCenterArea , ruSpawnWestArea , ruSpawnEastArea ] [ spawn ] ;
10493: LD_ADDR_VAR 0 5
10497: PUSH
10498: LD_INT 21
10500: PUSH
10501: LD_INT 22
10503: PUSH
10504: LD_INT 20
10506: PUSH
10507: EMPTY
10508: LIST
10509: LIST
10510: LIST
10511: PUSH
10512: LD_VAR 0 4
10516: ARRAY
10517: ST_TO_ADDR
// point := [ [ 96 , 102 ] , [ 54 , 85 ] , [ 146 , 67 ] ] [ spawn ] ;
10518: LD_ADDR_VAR 0 8
10522: PUSH
10523: LD_INT 96
10525: PUSH
10526: LD_INT 102
10528: PUSH
10529: EMPTY
10530: LIST
10531: LIST
10532: PUSH
10533: LD_INT 54
10535: PUSH
10536: LD_INT 85
10538: PUSH
10539: EMPTY
10540: LIST
10541: LIST
10542: PUSH
10543: LD_INT 146
10545: PUSH
10546: LD_INT 67
10548: PUSH
10549: EMPTY
10550: LIST
10551: LIST
10552: PUSH
10553: EMPTY
10554: LIST
10555: LIST
10556: LIST
10557: PUSH
10558: LD_VAR 0 4
10562: ARRAY
10563: ST_TO_ADDR
// for i in ruForces union ruCommander do
10564: LD_ADDR_VAR 0 2
10568: PUSH
10569: LD_EXP 59
10573: PUSH
10574: LD_EXP 61
10578: UNION
10579: PUSH
10580: FOR_IN
10581: IFFALSE 10636
// begin PlaceUnitArea ( i , area , false ) ;
10583: LD_VAR 0 2
10587: PPUSH
10588: LD_VAR 0 5
10592: PPUSH
10593: LD_INT 0
10595: PPUSH
10596: CALL_OW 49
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
10600: LD_VAR 0 2
10604: PPUSH
10605: LD_VAR 0 8
10609: PUSH
10610: LD_INT 1
10612: ARRAY
10613: PPUSH
10614: LD_VAR 0 8
10618: PUSH
10619: LD_INT 2
10621: ARRAY
10622: PPUSH
10623: CALL_OW 111
// wait ( 0 0$0.4 ) ;
10627: LD_INT 14
10629: PPUSH
10630: CALL_OW 67
// end ;
10634: GO 10580
10636: POP
10637: POP
// DRussianConvoy ;
10638: CALL 28663 0 0
// spawnedRussians := true ;
10642: LD_ADDR_EXP 19
10646: PUSH
10647: LD_INT 1
10649: ST_TO_ADDR
// RevealFogArea ( 1 , path ) ;
10650: LD_INT 1
10652: PPUSH
10653: LD_VAR 0 6
10657: PPUSH
10658: CALL_OW 332
// case spawn of 1 :
10662: LD_VAR 0 4
10666: PUSH
10667: LD_INT 1
10669: DOUBLE
10670: EQUAL
10671: IFTRUE 10675
10673: GO 10685
10675: POP
// RaiseSailEvent ( ERussianBaseC ) ; 2 :
10676: LD_INT 102
10678: PPUSH
10679: CALL_OW 427
10683: GO 10722
10685: LD_INT 2
10687: DOUBLE
10688: EQUAL
10689: IFTRUE 10693
10691: GO 10703
10693: POP
// RaiseSailEvent ( ERussianBaseW ) ; 3 :
10694: LD_INT 103
10696: PPUSH
10697: CALL_OW 427
10701: GO 10722
10703: LD_INT 3
10705: DOUBLE
10706: EQUAL
10707: IFTRUE 10711
10709: GO 10721
10711: POP
// RaiseSailEvent ( ERussianBaseE ) ; end ;
10712: LD_INT 104
10714: PPUSH
10715: CALL_OW 427
10719: GO 10722
10721: POP
// if Difficulty < 4 then
10722: LD_OWVAR 67
10726: PUSH
10727: LD_INT 4
10729: LESS
10730: IFFALSE 10734
// exit ;
10732: GO 10811
// RevealFogArea ( 1 , ruSpawnWestArea ) ;
10734: LD_INT 1
10736: PPUSH
10737: LD_INT 22
10739: PPUSH
10740: CALL_OW 332
// for i in ruForces2 union ruCommander2 do
10744: LD_ADDR_VAR 0 2
10748: PUSH
10749: LD_EXP 60
10753: PUSH
10754: LD_EXP 62
10758: UNION
10759: PUSH
10760: FOR_IN
10761: IFFALSE 10802
// begin PlaceUnitArea ( i , ruSpawnWestArea , false ) ;
10763: LD_VAR 0 2
10767: PPUSH
10768: LD_INT 22
10770: PPUSH
10771: LD_INT 0
10773: PPUSH
10774: CALL_OW 49
// ComAgressiveMove ( i , 54 , 85 ) ;
10778: LD_VAR 0 2
10782: PPUSH
10783: LD_INT 54
10785: PPUSH
10786: LD_INT 85
10788: PPUSH
10789: CALL_OW 114
// wait ( 0 0$0.8 ) ;
10793: LD_INT 28
10795: PPUSH
10796: CALL_OW 67
// end ;
10800: GO 10760
10802: POP
10803: POP
// RaiseSailEvent ( ERussianBaseW2 ) ;
10804: LD_INT 105
10806: PPUSH
10807: CALL_OW 427
// end ;
10811: LD_VAR 0 1
10815: RET
// export function RussianBase ( group , option ) ; begin
10816: LD_INT 0
10818: PPUSH
// case option of 1 :
10819: LD_VAR 0 2
10823: PUSH
10824: LD_INT 1
10826: DOUBLE
10827: EQUAL
10828: IFTRUE 10832
10830: GO 11288
10832: POP
// begin ruBaseArea := ruBaseCenterArea ;
10833: LD_ADDR_EXP 66
10837: PUSH
10838: LD_INT 26
10840: ST_TO_ADDR
// ruCratesArea := ruBaseCenterArea ;
10841: LD_ADDR_EXP 72
10845: PUSH
10846: LD_INT 26
10848: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
10849: LD_ADDR_EXP 76
10853: PUSH
10854: LD_INT 0
10856: PUSH
10857: LD_INT 104
10859: PUSH
10860: LD_INT 110
10862: PUSH
10863: LD_INT 5
10865: PUSH
10866: EMPTY
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: PUSH
10872: LD_INT 4
10874: PUSH
10875: LD_INT 98
10877: PUSH
10878: LD_INT 90
10880: PUSH
10881: LD_INT 3
10883: PUSH
10884: EMPTY
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: PUSH
10890: LD_INT 29
10892: PUSH
10893: LD_INT 103
10895: PUSH
10896: LD_INT 114
10898: PUSH
10899: LD_INT 2
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: PUSH
10908: LD_INT 30
10910: PUSH
10911: LD_INT 99
10913: PUSH
10914: LD_INT 114
10916: PUSH
10917: LD_INT 3
10919: PUSH
10920: EMPTY
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: PUSH
10926: LD_INT 28
10928: PUSH
10929: LD_INT 100
10931: PUSH
10932: LD_INT 112
10934: PUSH
10935: LD_INT 1
10937: PUSH
10938: EMPTY
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: PUSH
10944: LD_INT 2
10946: PUSH
10947: LD_INT 92
10949: PUSH
10950: LD_INT 101
10952: PUSH
10953: LD_INT 0
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: PUSH
10962: LD_INT 26
10964: PUSH
10965: LD_INT 97
10967: PUSH
10968: LD_INT 116
10970: PUSH
10971: LD_INT 5
10973: PUSH
10974: EMPTY
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: PUSH
10980: LD_INT 17
10982: PUSH
10983: LD_INT 96
10985: PUSH
10986: LD_INT 101
10988: PUSH
10989: LD_INT 4
10991: PUSH
10992: EMPTY
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: PUSH
10998: LD_INT 18
11000: PUSH
11001: LD_INT 88
11003: PUSH
11004: LD_INT 97
11006: PUSH
11007: LD_INT 2
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: PUSH
11016: LD_INT 26
11018: PUSH
11019: LD_INT 106
11021: PUSH
11022: LD_INT 92
11024: PUSH
11025: LD_INT 2
11027: PUSH
11028: EMPTY
11029: LIST
11030: LIST
11031: LIST
11032: LIST
11033: PUSH
11034: LD_INT 6
11036: PUSH
11037: LD_INT 93
11039: PUSH
11040: LD_INT 110
11042: PUSH
11043: LD_INT 0
11045: PUSH
11046: EMPTY
11047: LIST
11048: LIST
11049: LIST
11050: LIST
11051: PUSH
11052: LD_INT 21
11054: PUSH
11055: LD_INT 89
11057: PUSH
11058: LD_INT 101
11060: PUSH
11061: LD_INT 1
11063: PUSH
11064: EMPTY
11065: LIST
11066: LIST
11067: LIST
11068: LIST
11069: PUSH
11070: LD_INT 16
11072: PUSH
11073: LD_INT 95
11075: PUSH
11076: LD_INT 104
11078: PUSH
11079: LD_INT 4
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: PUSH
11088: LD_INT 24
11090: PUSH
11091: LD_INT 92
11093: PUSH
11094: LD_INT 105
11096: PUSH
11097: LD_INT 0
11099: PUSH
11100: EMPTY
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: PUSH
11106: LD_INT 33
11108: PUSH
11109: LD_INT 88
11111: PUSH
11112: LD_INT 89
11114: PUSH
11115: LD_INT 2
11117: PUSH
11118: EMPTY
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: PUSH
11124: LD_INT 33
11126: PUSH
11127: LD_INT 86
11129: PUSH
11130: LD_INT 90
11132: PUSH
11133: LD_INT 2
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: PUSH
11142: LD_INT 33
11144: PUSH
11145: LD_INT 85
11147: PUSH
11148: LD_INT 99
11150: PUSH
11151: LD_INT 2
11153: PUSH
11154: EMPTY
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: PUSH
11160: LD_INT 33
11162: PUSH
11163: LD_INT 85
11165: PUSH
11166: LD_INT 107
11168: PUSH
11169: LD_INT 1
11171: PUSH
11172: EMPTY
11173: LIST
11174: LIST
11175: LIST
11176: LIST
11177: PUSH
11178: LD_INT 33
11180: PUSH
11181: LD_INT 105
11183: PUSH
11184: LD_INT 99
11186: PUSH
11187: LD_INT 1
11189: PUSH
11190: EMPTY
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: PUSH
11196: LD_INT 33
11198: PUSH
11199: LD_INT 102
11201: PUSH
11202: LD_INT 92
11204: PUSH
11205: LD_INT 3
11207: PUSH
11208: EMPTY
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: PUSH
11214: LD_INT 33
11216: PUSH
11217: LD_INT 105
11219: PUSH
11220: LD_INT 92
11222: PUSH
11223: LD_INT 2
11225: PUSH
11226: EMPTY
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: PUSH
11232: EMPTY
11233: LIST
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: LIST
11241: LIST
11242: LIST
11243: LIST
11244: LIST
11245: LIST
11246: LIST
11247: LIST
11248: LIST
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: ST_TO_ADDR
// ruHealPoint := [ 98 , 107 ] ;
11255: LD_ADDR_EXP 74
11259: PUSH
11260: LD_INT 98
11262: PUSH
11263: LD_INT 107
11265: PUSH
11266: EMPTY
11267: LIST
11268: LIST
11269: ST_TO_ADDR
// ruParkingArea := ruParkingCenterArea ;
11270: LD_ADDR_EXP 82
11274: PUSH
11275: LD_INT 30
11277: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnCenterArea ;
11278: LD_ADDR_EXP 84
11282: PUSH
11283: LD_INT 36
11285: ST_TO_ADDR
// end ; 2 :
11286: GO 12312
11288: LD_INT 2
11290: DOUBLE
11291: EQUAL
11292: IFTRUE 11296
11294: GO 11790
11296: POP
// begin ruBaseArea := ruBaseWestArea ;
11297: LD_ADDR_EXP 66
11301: PUSH
11302: LD_INT 28
11304: ST_TO_ADDR
// ruCratesArea := ruBaseWestArea ;
11305: LD_ADDR_EXP 72
11309: PUSH
11310: LD_INT 28
11312: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
11313: LD_ADDR_EXP 76
11317: PUSH
11318: LD_INT 0
11320: PUSH
11321: LD_INT 49
11323: PUSH
11324: LD_INT 74
11326: PUSH
11327: LD_INT 3
11329: PUSH
11330: EMPTY
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: PUSH
11336: LD_INT 4
11338: PUSH
11339: LD_INT 73
11341: PUSH
11342: LD_INT 88
11344: PUSH
11345: LD_INT 5
11347: PUSH
11348: EMPTY
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: PUSH
11354: LD_INT 4
11356: PUSH
11357: LD_INT 56
11359: PUSH
11360: LD_INT 62
11362: PUSH
11363: LD_INT 3
11365: PUSH
11366: EMPTY
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: PUSH
11372: LD_INT 29
11374: PUSH
11375: LD_INT 43
11377: PUSH
11378: LD_INT 68
11380: PUSH
11381: LD_INT 2
11383: PUSH
11384: EMPTY
11385: LIST
11386: LIST
11387: LIST
11388: LIST
11389: PUSH
11390: LD_INT 30
11392: PUSH
11393: LD_INT 43
11395: PUSH
11396: LD_INT 79
11398: PUSH
11399: LD_INT 5
11401: PUSH
11402: EMPTY
11403: LIST
11404: LIST
11405: LIST
11406: LIST
11407: PUSH
11408: LD_INT 28
11410: PUSH
11411: LD_INT 60
11413: PUSH
11414: LD_INT 75
11416: PUSH
11417: LD_INT 1
11419: PUSH
11420: EMPTY
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: PUSH
11426: LD_INT 2
11428: PUSH
11429: LD_INT 50
11431: PUSH
11432: LD_INT 87
11434: PUSH
11435: LD_INT 1
11437: PUSH
11438: EMPTY
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: PUSH
11444: LD_INT 26
11446: PUSH
11447: LD_INT 45
11449: PUSH
11450: LD_INT 67
11452: PUSH
11453: LD_INT 2
11455: PUSH
11456: EMPTY
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 17
11464: PUSH
11465: LD_INT 47
11467: PUSH
11468: LD_INT 84
11470: PUSH
11471: LD_INT 2
11473: PUSH
11474: EMPTY
11475: LIST
11476: LIST
11477: LIST
11478: LIST
11479: PUSH
11480: LD_INT 18
11482: PUSH
11483: LD_INT 46
11485: PUSH
11486: LD_INT 87
11488: PUSH
11489: LD_INT 1
11491: PUSH
11492: EMPTY
11493: LIST
11494: LIST
11495: LIST
11496: LIST
11497: PUSH
11498: LD_INT 26
11500: PUSH
11501: LD_INT 41
11503: PUSH
11504: LD_INT 64
11506: PUSH
11507: LD_INT 5
11509: PUSH
11510: EMPTY
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: PUSH
11516: LD_INT 6
11518: PUSH
11519: LD_INT 42
11521: PUSH
11522: LD_INT 74
11524: PUSH
11525: LD_INT 1
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: PUSH
11534: LD_INT 21
11536: PUSH
11537: LD_INT 54
11539: PUSH
11540: LD_INT 91
11542: PUSH
11543: LD_INT 5
11545: PUSH
11546: EMPTY
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: PUSH
11552: LD_INT 16
11554: PUSH
11555: LD_INT 50
11557: PUSH
11558: LD_INT 83
11560: PUSH
11561: LD_INT 3
11563: PUSH
11564: EMPTY
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: PUSH
11570: LD_INT 24
11572: PUSH
11573: LD_INT 50
11575: PUSH
11576: LD_INT 90
11578: PUSH
11579: LD_INT 0
11581: PUSH
11582: EMPTY
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: PUSH
11588: LD_INT 33
11590: PUSH
11591: LD_INT 51
11593: PUSH
11594: LD_INT 61
11596: PUSH
11597: LD_INT 3
11599: PUSH
11600: EMPTY
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: PUSH
11606: LD_INT 33
11608: PUSH
11609: LD_INT 42
11611: PUSH
11612: LD_INT 60
11614: PUSH
11615: LD_INT 3
11617: PUSH
11618: EMPTY
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: PUSH
11624: LD_INT 33
11626: PUSH
11627: LD_INT 36
11629: PUSH
11630: LD_INT 58
11632: PUSH
11633: LD_INT 3
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: PUSH
11642: LD_INT 33
11644: PUSH
11645: LD_INT 39
11647: PUSH
11648: LD_INT 59
11650: PUSH
11651: LD_INT 3
11653: PUSH
11654: EMPTY
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: PUSH
11660: LD_INT 33
11662: PUSH
11663: LD_INT 61
11665: PUSH
11666: LD_INT 64
11668: PUSH
11669: LD_INT 3
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: PUSH
11678: LD_INT 33
11680: PUSH
11681: LD_INT 63
11683: PUSH
11684: LD_INT 90
11686: PUSH
11687: LD_INT 5
11689: PUSH
11690: EMPTY
11691: LIST
11692: LIST
11693: LIST
11694: LIST
11695: PUSH
11696: LD_INT 33
11698: PUSH
11699: LD_INT 64
11701: PUSH
11702: LD_INT 88
11704: PUSH
11705: LD_INT 5
11707: PUSH
11708: EMPTY
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: PUSH
11714: LD_INT 33
11716: PUSH
11717: LD_INT 72
11719: PUSH
11720: LD_INT 82
11722: PUSH
11723: LD_INT 5
11725: PUSH
11726: EMPTY
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: PUSH
11732: EMPTY
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
11757: LD_ADDR_EXP 74
11761: PUSH
11762: LD_INT 45
11764: PUSH
11765: LD_INT 75
11767: PUSH
11768: EMPTY
11769: LIST
11770: LIST
11771: ST_TO_ADDR
// ruParkingArea := ruParkingWestArea ;
11772: LD_ADDR_EXP 82
11776: PUSH
11777: LD_INT 31
11779: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnWestArea ;
11780: LD_ADDR_EXP 84
11784: PUSH
11785: LD_INT 37
11787: ST_TO_ADDR
// end ; 3 :
11788: GO 12312
11790: LD_INT 3
11792: DOUBLE
11793: EQUAL
11794: IFTRUE 11798
11796: GO 12311
11798: POP
// begin ruBaseArea := ruBaseEastArea ;
11799: LD_ADDR_EXP 66
11803: PUSH
11804: LD_INT 27
11806: ST_TO_ADDR
// ruCratesArea := ruBaseEastArea ;
11807: LD_ADDR_EXP 72
11811: PUSH
11812: LD_INT 27
11814: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] , [ b_turret , 158 , 65 , 3 ] , [ b_turret , 144 , 53 , 2 ] , [ b_turret , 150 , 81 , 1 ] ] ;
11815: LD_ADDR_EXP 76
11819: PUSH
11820: LD_INT 0
11822: PUSH
11823: LD_INT 152
11825: PUSH
11826: LD_INT 72
11828: PUSH
11829: LD_INT 4
11831: PUSH
11832: EMPTY
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 4
11840: PUSH
11841: LD_INT 139
11843: PUSH
11844: LD_INT 69
11846: PUSH
11847: LD_INT 1
11849: PUSH
11850: EMPTY
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 4
11858: PUSH
11859: LD_INT 142
11861: PUSH
11862: LD_INT 56
11864: PUSH
11865: LD_INT 2
11867: PUSH
11868: EMPTY
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: PUSH
11874: LD_INT 29
11876: PUSH
11877: LD_INT 152
11879: PUSH
11880: LD_INT 85
11882: PUSH
11883: LD_INT 3
11885: PUSH
11886: EMPTY
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: PUSH
11892: LD_INT 30
11894: PUSH
11895: LD_INT 156
11897: PUSH
11898: LD_INT 92
11900: PUSH
11901: LD_INT 3
11903: PUSH
11904: EMPTY
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: PUSH
11910: LD_INT 28
11912: PUSH
11913: LD_INT 157
11915: PUSH
11916: LD_INT 96
11918: PUSH
11919: LD_INT 4
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: PUSH
11928: LD_INT 2
11930: PUSH
11931: LD_INT 161
11933: PUSH
11934: LD_INT 74
11936: PUSH
11937: LD_INT 5
11939: PUSH
11940: EMPTY
11941: LIST
11942: LIST
11943: LIST
11944: LIST
11945: PUSH
11946: LD_INT 21
11948: PUSH
11949: LD_INT 157
11951: PUSH
11952: LD_INT 74
11954: PUSH
11955: LD_INT 1
11957: PUSH
11958: EMPTY
11959: LIST
11960: LIST
11961: LIST
11962: LIST
11963: PUSH
11964: LD_INT 16
11966: PUSH
11967: LD_INT 161
11969: PUSH
11970: LD_INT 77
11972: PUSH
11973: LD_INT 0
11975: PUSH
11976: EMPTY
11977: LIST
11978: LIST
11979: LIST
11980: LIST
11981: PUSH
11982: LD_INT 24
11984: PUSH
11985: LD_INT 165
11987: PUSH
11988: LD_INT 78
11990: PUSH
11991: LD_INT 5
11993: PUSH
11994: EMPTY
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: PUSH
12000: LD_INT 17
12002: PUSH
12003: LD_INT 164
12005: PUSH
12006: LD_INT 74
12008: PUSH
12009: LD_INT 4
12011: PUSH
12012: EMPTY
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: PUSH
12018: LD_INT 6
12020: PUSH
12021: LD_INT 164
12023: PUSH
12024: LD_INT 95
12026: PUSH
12027: LD_INT 5
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: PUSH
12036: LD_INT 18
12038: PUSH
12039: LD_INT 161
12041: PUSH
12042: LD_INT 70
12044: PUSH
12045: LD_INT 3
12047: PUSH
12048: EMPTY
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: PUSH
12054: LD_INT 26
12056: PUSH
12057: LD_INT 155
12059: PUSH
12060: LD_INT 87
12062: PUSH
12063: LD_INT 0
12065: PUSH
12066: EMPTY
12067: LIST
12068: LIST
12069: LIST
12070: LIST
12071: PUSH
12072: LD_INT 26
12074: PUSH
12075: LD_INT 159
12077: PUSH
12078: LD_INT 95
12080: PUSH
12081: LD_INT 3
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: PUSH
12090: LD_INT 26
12092: PUSH
12093: LD_INT 167
12095: PUSH
12096: LD_INT 98
12098: PUSH
12099: LD_INT 1
12101: PUSH
12102: EMPTY
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: PUSH
12108: LD_INT 33
12110: PUSH
12111: LD_INT 152
12113: PUSH
12114: LD_INT 89
12116: PUSH
12117: LD_INT 1
12119: PUSH
12120: EMPTY
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: PUSH
12126: LD_INT 33
12128: PUSH
12129: LD_INT 134
12131: PUSH
12132: LD_INT 61
12134: PUSH
12135: LD_INT 2
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: PUSH
12144: LD_INT 33
12146: PUSH
12147: LD_INT 156
12149: PUSH
12150: LD_INT 62
12152: PUSH
12153: LD_INT 3
12155: PUSH
12156: EMPTY
12157: LIST
12158: LIST
12159: LIST
12160: LIST
12161: PUSH
12162: LD_INT 33
12164: PUSH
12165: LD_INT 171
12167: PUSH
12168: LD_INT 97
12170: PUSH
12171: LD_INT 5
12173: PUSH
12174: EMPTY
12175: LIST
12176: LIST
12177: LIST
12178: LIST
12179: PUSH
12180: LD_INT 33
12182: PUSH
12183: LD_INT 169
12185: PUSH
12186: LD_INT 103
12188: PUSH
12189: LD_INT 5
12191: PUSH
12192: EMPTY
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: PUSH
12198: LD_INT 33
12200: PUSH
12201: LD_INT 158
12203: PUSH
12204: LD_INT 65
12206: PUSH
12207: LD_INT 3
12209: PUSH
12210: EMPTY
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: PUSH
12216: LD_INT 33
12218: PUSH
12219: LD_INT 144
12221: PUSH
12222: LD_INT 53
12224: PUSH
12225: LD_INT 2
12227: PUSH
12228: EMPTY
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: PUSH
12234: LD_INT 33
12236: PUSH
12237: LD_INT 150
12239: PUSH
12240: LD_INT 81
12242: PUSH
12243: LD_INT 1
12245: PUSH
12246: EMPTY
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: PUSH
12252: EMPTY
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: ST_TO_ADDR
// ruHealPoint := [ 145 , 71 ] ;
12278: LD_ADDR_EXP 74
12282: PUSH
12283: LD_INT 145
12285: PUSH
12286: LD_INT 71
12288: PUSH
12289: EMPTY
12290: LIST
12291: LIST
12292: ST_TO_ADDR
// ruParkingArea := ruParkingEastArea ;
12293: LD_ADDR_EXP 82
12297: PUSH
12298: LD_INT 29
12300: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnEastArea ;
12301: LD_ADDR_EXP 84
12305: PUSH
12306: LD_INT 35
12308: ST_TO_ADDR
// end ; end ;
12309: GO 12312
12311: POP
// ruScriptActive := true ;
12312: LD_ADDR_EXP 14
12316: PUSH
12317: LD_INT 1
12319: ST_TO_ADDR
// end ;
12320: LD_VAR 0 3
12324: RET
// export function RussianBase2 ( group , option ) ; begin
12325: LD_INT 0
12327: PPUSH
// case option of 1 :
12328: LD_VAR 0 2
12332: PUSH
12333: LD_INT 1
12335: DOUBLE
12336: EQUAL
12337: IFTRUE 12341
12339: GO 12797
12341: POP
// begin ruBaseArea2 := ruBaseCenterArea ;
12342: LD_ADDR_EXP 67
12346: PUSH
12347: LD_INT 26
12349: ST_TO_ADDR
// ruCratesArea2 := ruBaseCenterArea ;
12350: LD_ADDR_EXP 73
12354: PUSH
12355: LD_INT 26
12357: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
12358: LD_ADDR_EXP 77
12362: PUSH
12363: LD_INT 0
12365: PUSH
12366: LD_INT 104
12368: PUSH
12369: LD_INT 110
12371: PUSH
12372: LD_INT 5
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: PUSH
12381: LD_INT 4
12383: PUSH
12384: LD_INT 98
12386: PUSH
12387: LD_INT 90
12389: PUSH
12390: LD_INT 3
12392: PUSH
12393: EMPTY
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: PUSH
12399: LD_INT 29
12401: PUSH
12402: LD_INT 103
12404: PUSH
12405: LD_INT 114
12407: PUSH
12408: LD_INT 2
12410: PUSH
12411: EMPTY
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: PUSH
12417: LD_INT 30
12419: PUSH
12420: LD_INT 99
12422: PUSH
12423: LD_INT 114
12425: PUSH
12426: LD_INT 3
12428: PUSH
12429: EMPTY
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: PUSH
12435: LD_INT 28
12437: PUSH
12438: LD_INT 100
12440: PUSH
12441: LD_INT 112
12443: PUSH
12444: LD_INT 1
12446: PUSH
12447: EMPTY
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: PUSH
12453: LD_INT 2
12455: PUSH
12456: LD_INT 92
12458: PUSH
12459: LD_INT 101
12461: PUSH
12462: LD_INT 0
12464: PUSH
12465: EMPTY
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: PUSH
12471: LD_INT 26
12473: PUSH
12474: LD_INT 97
12476: PUSH
12477: LD_INT 116
12479: PUSH
12480: LD_INT 5
12482: PUSH
12483: EMPTY
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: PUSH
12489: LD_INT 17
12491: PUSH
12492: LD_INT 96
12494: PUSH
12495: LD_INT 101
12497: PUSH
12498: LD_INT 4
12500: PUSH
12501: EMPTY
12502: LIST
12503: LIST
12504: LIST
12505: LIST
12506: PUSH
12507: LD_INT 18
12509: PUSH
12510: LD_INT 88
12512: PUSH
12513: LD_INT 97
12515: PUSH
12516: LD_INT 2
12518: PUSH
12519: EMPTY
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: PUSH
12525: LD_INT 26
12527: PUSH
12528: LD_INT 106
12530: PUSH
12531: LD_INT 92
12533: PUSH
12534: LD_INT 2
12536: PUSH
12537: EMPTY
12538: LIST
12539: LIST
12540: LIST
12541: LIST
12542: PUSH
12543: LD_INT 6
12545: PUSH
12546: LD_INT 93
12548: PUSH
12549: LD_INT 110
12551: PUSH
12552: LD_INT 0
12554: PUSH
12555: EMPTY
12556: LIST
12557: LIST
12558: LIST
12559: LIST
12560: PUSH
12561: LD_INT 21
12563: PUSH
12564: LD_INT 89
12566: PUSH
12567: LD_INT 101
12569: PUSH
12570: LD_INT 1
12572: PUSH
12573: EMPTY
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: PUSH
12579: LD_INT 16
12581: PUSH
12582: LD_INT 95
12584: PUSH
12585: LD_INT 104
12587: PUSH
12588: LD_INT 4
12590: PUSH
12591: EMPTY
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: PUSH
12597: LD_INT 24
12599: PUSH
12600: LD_INT 92
12602: PUSH
12603: LD_INT 105
12605: PUSH
12606: LD_INT 0
12608: PUSH
12609: EMPTY
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: PUSH
12615: LD_INT 33
12617: PUSH
12618: LD_INT 88
12620: PUSH
12621: LD_INT 89
12623: PUSH
12624: LD_INT 2
12626: PUSH
12627: EMPTY
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: PUSH
12633: LD_INT 33
12635: PUSH
12636: LD_INT 86
12638: PUSH
12639: LD_INT 90
12641: PUSH
12642: LD_INT 2
12644: PUSH
12645: EMPTY
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: PUSH
12651: LD_INT 33
12653: PUSH
12654: LD_INT 85
12656: PUSH
12657: LD_INT 99
12659: PUSH
12660: LD_INT 2
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: PUSH
12669: LD_INT 33
12671: PUSH
12672: LD_INT 85
12674: PUSH
12675: LD_INT 107
12677: PUSH
12678: LD_INT 1
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: PUSH
12687: LD_INT 33
12689: PUSH
12690: LD_INT 105
12692: PUSH
12693: LD_INT 99
12695: PUSH
12696: LD_INT 1
12698: PUSH
12699: EMPTY
12700: LIST
12701: LIST
12702: LIST
12703: LIST
12704: PUSH
12705: LD_INT 33
12707: PUSH
12708: LD_INT 102
12710: PUSH
12711: LD_INT 92
12713: PUSH
12714: LD_INT 3
12716: PUSH
12717: EMPTY
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: PUSH
12723: LD_INT 33
12725: PUSH
12726: LD_INT 105
12728: PUSH
12729: LD_INT 92
12731: PUSH
12732: LD_INT 2
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: PUSH
12741: EMPTY
12742: LIST
12743: LIST
12744: LIST
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: ST_TO_ADDR
// ruHealPoint2 := [ 98 , 107 ] ;
12764: LD_ADDR_EXP 75
12768: PUSH
12769: LD_INT 98
12771: PUSH
12772: LD_INT 107
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: ST_TO_ADDR
// ruParkingArea2 := ruParkingCenterArea ;
12779: LD_ADDR_EXP 83
12783: PUSH
12784: LD_INT 30
12786: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnCenterArea ;
12787: LD_ADDR_EXP 85
12791: PUSH
12792: LD_INT 36
12794: ST_TO_ADDR
// end ; 2 :
12795: GO 13764
12797: LD_INT 2
12799: DOUBLE
12800: EQUAL
12801: IFTRUE 12805
12803: GO 13299
12805: POP
// begin ruBaseArea2 := ruBaseWestArea ;
12806: LD_ADDR_EXP 67
12810: PUSH
12811: LD_INT 28
12813: ST_TO_ADDR
// ruCratesArea2 := ruBaseWestArea ;
12814: LD_ADDR_EXP 73
12818: PUSH
12819: LD_INT 28
12821: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
12822: LD_ADDR_EXP 77
12826: PUSH
12827: LD_INT 0
12829: PUSH
12830: LD_INT 49
12832: PUSH
12833: LD_INT 74
12835: PUSH
12836: LD_INT 3
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: PUSH
12845: LD_INT 4
12847: PUSH
12848: LD_INT 73
12850: PUSH
12851: LD_INT 88
12853: PUSH
12854: LD_INT 5
12856: PUSH
12857: EMPTY
12858: LIST
12859: LIST
12860: LIST
12861: LIST
12862: PUSH
12863: LD_INT 4
12865: PUSH
12866: LD_INT 56
12868: PUSH
12869: LD_INT 62
12871: PUSH
12872: LD_INT 3
12874: PUSH
12875: EMPTY
12876: LIST
12877: LIST
12878: LIST
12879: LIST
12880: PUSH
12881: LD_INT 29
12883: PUSH
12884: LD_INT 43
12886: PUSH
12887: LD_INT 68
12889: PUSH
12890: LD_INT 2
12892: PUSH
12893: EMPTY
12894: LIST
12895: LIST
12896: LIST
12897: LIST
12898: PUSH
12899: LD_INT 30
12901: PUSH
12902: LD_INT 43
12904: PUSH
12905: LD_INT 79
12907: PUSH
12908: LD_INT 5
12910: PUSH
12911: EMPTY
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: PUSH
12917: LD_INT 28
12919: PUSH
12920: LD_INT 60
12922: PUSH
12923: LD_INT 75
12925: PUSH
12926: LD_INT 1
12928: PUSH
12929: EMPTY
12930: LIST
12931: LIST
12932: LIST
12933: LIST
12934: PUSH
12935: LD_INT 2
12937: PUSH
12938: LD_INT 50
12940: PUSH
12941: LD_INT 87
12943: PUSH
12944: LD_INT 1
12946: PUSH
12947: EMPTY
12948: LIST
12949: LIST
12950: LIST
12951: LIST
12952: PUSH
12953: LD_INT 26
12955: PUSH
12956: LD_INT 45
12958: PUSH
12959: LD_INT 67
12961: PUSH
12962: LD_INT 2
12964: PUSH
12965: EMPTY
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: PUSH
12971: LD_INT 17
12973: PUSH
12974: LD_INT 47
12976: PUSH
12977: LD_INT 84
12979: PUSH
12980: LD_INT 2
12982: PUSH
12983: EMPTY
12984: LIST
12985: LIST
12986: LIST
12987: LIST
12988: PUSH
12989: LD_INT 18
12991: PUSH
12992: LD_INT 46
12994: PUSH
12995: LD_INT 87
12997: PUSH
12998: LD_INT 1
13000: PUSH
13001: EMPTY
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: PUSH
13007: LD_INT 26
13009: PUSH
13010: LD_INT 41
13012: PUSH
13013: LD_INT 64
13015: PUSH
13016: LD_INT 5
13018: PUSH
13019: EMPTY
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: PUSH
13025: LD_INT 6
13027: PUSH
13028: LD_INT 42
13030: PUSH
13031: LD_INT 74
13033: PUSH
13034: LD_INT 1
13036: PUSH
13037: EMPTY
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: PUSH
13043: LD_INT 21
13045: PUSH
13046: LD_INT 54
13048: PUSH
13049: LD_INT 91
13051: PUSH
13052: LD_INT 5
13054: PUSH
13055: EMPTY
13056: LIST
13057: LIST
13058: LIST
13059: LIST
13060: PUSH
13061: LD_INT 16
13063: PUSH
13064: LD_INT 50
13066: PUSH
13067: LD_INT 83
13069: PUSH
13070: LD_INT 3
13072: PUSH
13073: EMPTY
13074: LIST
13075: LIST
13076: LIST
13077: LIST
13078: PUSH
13079: LD_INT 24
13081: PUSH
13082: LD_INT 50
13084: PUSH
13085: LD_INT 90
13087: PUSH
13088: LD_INT 0
13090: PUSH
13091: EMPTY
13092: LIST
13093: LIST
13094: LIST
13095: LIST
13096: PUSH
13097: LD_INT 33
13099: PUSH
13100: LD_INT 51
13102: PUSH
13103: LD_INT 61
13105: PUSH
13106: LD_INT 3
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: PUSH
13115: LD_INT 33
13117: PUSH
13118: LD_INT 42
13120: PUSH
13121: LD_INT 60
13123: PUSH
13124: LD_INT 3
13126: PUSH
13127: EMPTY
13128: LIST
13129: LIST
13130: LIST
13131: LIST
13132: PUSH
13133: LD_INT 33
13135: PUSH
13136: LD_INT 36
13138: PUSH
13139: LD_INT 58
13141: PUSH
13142: LD_INT 3
13144: PUSH
13145: EMPTY
13146: LIST
13147: LIST
13148: LIST
13149: LIST
13150: PUSH
13151: LD_INT 33
13153: PUSH
13154: LD_INT 39
13156: PUSH
13157: LD_INT 59
13159: PUSH
13160: LD_INT 3
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: PUSH
13169: LD_INT 33
13171: PUSH
13172: LD_INT 61
13174: PUSH
13175: LD_INT 64
13177: PUSH
13178: LD_INT 3
13180: PUSH
13181: EMPTY
13182: LIST
13183: LIST
13184: LIST
13185: LIST
13186: PUSH
13187: LD_INT 33
13189: PUSH
13190: LD_INT 63
13192: PUSH
13193: LD_INT 90
13195: PUSH
13196: LD_INT 5
13198: PUSH
13199: EMPTY
13200: LIST
13201: LIST
13202: LIST
13203: LIST
13204: PUSH
13205: LD_INT 33
13207: PUSH
13208: LD_INT 64
13210: PUSH
13211: LD_INT 88
13213: PUSH
13214: LD_INT 5
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: LIST
13221: LIST
13222: PUSH
13223: LD_INT 33
13225: PUSH
13226: LD_INT 72
13228: PUSH
13229: LD_INT 82
13231: PUSH
13232: LD_INT 5
13234: PUSH
13235: EMPTY
13236: LIST
13237: LIST
13238: LIST
13239: LIST
13240: PUSH
13241: EMPTY
13242: LIST
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
13266: LD_ADDR_EXP 74
13270: PUSH
13271: LD_INT 45
13273: PUSH
13274: LD_INT 75
13276: PUSH
13277: EMPTY
13278: LIST
13279: LIST
13280: ST_TO_ADDR
// ruParkingArea2 := ruParkingWestArea ;
13281: LD_ADDR_EXP 83
13285: PUSH
13286: LD_INT 31
13288: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnWestArea ;
13289: LD_ADDR_EXP 85
13293: PUSH
13294: LD_INT 37
13296: ST_TO_ADDR
// end ; 3 :
13297: GO 13764
13299: LD_INT 3
13301: DOUBLE
13302: EQUAL
13303: IFTRUE 13307
13305: GO 13763
13307: POP
// begin ruBaseArea2 := ruBaseEastArea ;
13308: LD_ADDR_EXP 67
13312: PUSH
13313: LD_INT 27
13315: ST_TO_ADDR
// ruCratesArea2 := ruBaseEastArea ;
13316: LD_ADDR_EXP 73
13320: PUSH
13321: LD_INT 27
13323: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] ] ;
13324: LD_ADDR_EXP 77
13328: PUSH
13329: LD_INT 0
13331: PUSH
13332: LD_INT 152
13334: PUSH
13335: LD_INT 72
13337: PUSH
13338: LD_INT 4
13340: PUSH
13341: EMPTY
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: PUSH
13347: LD_INT 4
13349: PUSH
13350: LD_INT 139
13352: PUSH
13353: LD_INT 69
13355: PUSH
13356: LD_INT 1
13358: PUSH
13359: EMPTY
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: PUSH
13365: LD_INT 4
13367: PUSH
13368: LD_INT 142
13370: PUSH
13371: LD_INT 56
13373: PUSH
13374: LD_INT 2
13376: PUSH
13377: EMPTY
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: PUSH
13383: LD_INT 29
13385: PUSH
13386: LD_INT 152
13388: PUSH
13389: LD_INT 85
13391: PUSH
13392: LD_INT 3
13394: PUSH
13395: EMPTY
13396: LIST
13397: LIST
13398: LIST
13399: LIST
13400: PUSH
13401: LD_INT 30
13403: PUSH
13404: LD_INT 156
13406: PUSH
13407: LD_INT 92
13409: PUSH
13410: LD_INT 3
13412: PUSH
13413: EMPTY
13414: LIST
13415: LIST
13416: LIST
13417: LIST
13418: PUSH
13419: LD_INT 28
13421: PUSH
13422: LD_INT 157
13424: PUSH
13425: LD_INT 96
13427: PUSH
13428: LD_INT 4
13430: PUSH
13431: EMPTY
13432: LIST
13433: LIST
13434: LIST
13435: LIST
13436: PUSH
13437: LD_INT 2
13439: PUSH
13440: LD_INT 161
13442: PUSH
13443: LD_INT 74
13445: PUSH
13446: LD_INT 5
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: LIST
13453: LIST
13454: PUSH
13455: LD_INT 21
13457: PUSH
13458: LD_INT 157
13460: PUSH
13461: LD_INT 74
13463: PUSH
13464: LD_INT 1
13466: PUSH
13467: EMPTY
13468: LIST
13469: LIST
13470: LIST
13471: LIST
13472: PUSH
13473: LD_INT 16
13475: PUSH
13476: LD_INT 161
13478: PUSH
13479: LD_INT 77
13481: PUSH
13482: LD_INT 0
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: PUSH
13491: LD_INT 24
13493: PUSH
13494: LD_INT 165
13496: PUSH
13497: LD_INT 78
13499: PUSH
13500: LD_INT 5
13502: PUSH
13503: EMPTY
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: PUSH
13509: LD_INT 17
13511: PUSH
13512: LD_INT 164
13514: PUSH
13515: LD_INT 74
13517: PUSH
13518: LD_INT 4
13520: PUSH
13521: EMPTY
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: PUSH
13527: LD_INT 6
13529: PUSH
13530: LD_INT 164
13532: PUSH
13533: LD_INT 95
13535: PUSH
13536: LD_INT 5
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: LIST
13543: LIST
13544: PUSH
13545: LD_INT 18
13547: PUSH
13548: LD_INT 161
13550: PUSH
13551: LD_INT 70
13553: PUSH
13554: LD_INT 3
13556: PUSH
13557: EMPTY
13558: LIST
13559: LIST
13560: LIST
13561: LIST
13562: PUSH
13563: LD_INT 26
13565: PUSH
13566: LD_INT 155
13568: PUSH
13569: LD_INT 87
13571: PUSH
13572: LD_INT 0
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: PUSH
13581: LD_INT 26
13583: PUSH
13584: LD_INT 159
13586: PUSH
13587: LD_INT 95
13589: PUSH
13590: LD_INT 3
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: PUSH
13599: LD_INT 26
13601: PUSH
13602: LD_INT 167
13604: PUSH
13605: LD_INT 98
13607: PUSH
13608: LD_INT 1
13610: PUSH
13611: EMPTY
13612: LIST
13613: LIST
13614: LIST
13615: LIST
13616: PUSH
13617: LD_INT 33
13619: PUSH
13620: LD_INT 152
13622: PUSH
13623: LD_INT 89
13625: PUSH
13626: LD_INT 1
13628: PUSH
13629: EMPTY
13630: LIST
13631: LIST
13632: LIST
13633: LIST
13634: PUSH
13635: LD_INT 33
13637: PUSH
13638: LD_INT 134
13640: PUSH
13641: LD_INT 61
13643: PUSH
13644: LD_INT 2
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: PUSH
13653: LD_INT 33
13655: PUSH
13656: LD_INT 156
13658: PUSH
13659: LD_INT 62
13661: PUSH
13662: LD_INT 3
13664: PUSH
13665: EMPTY
13666: LIST
13667: LIST
13668: LIST
13669: LIST
13670: PUSH
13671: LD_INT 33
13673: PUSH
13674: LD_INT 171
13676: PUSH
13677: LD_INT 97
13679: PUSH
13680: LD_INT 5
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: PUSH
13689: LD_INT 33
13691: PUSH
13692: LD_INT 169
13694: PUSH
13695: LD_INT 103
13697: PUSH
13698: LD_INT 5
13700: PUSH
13701: EMPTY
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: PUSH
13707: EMPTY
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: LIST
13725: LIST
13726: LIST
13727: LIST
13728: LIST
13729: ST_TO_ADDR
// ruHealPoint2 := [ 145 , 71 ] ;
13730: LD_ADDR_EXP 75
13734: PUSH
13735: LD_INT 145
13737: PUSH
13738: LD_INT 71
13740: PUSH
13741: EMPTY
13742: LIST
13743: LIST
13744: ST_TO_ADDR
// ruParkingArea2 := ruParkingEastArea ;
13745: LD_ADDR_EXP 83
13749: PUSH
13750: LD_INT 29
13752: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnEastArea ;
13753: LD_ADDR_EXP 85
13757: PUSH
13758: LD_INT 35
13760: ST_TO_ADDR
// end ; end ;
13761: GO 13764
13763: POP
// ruScriptActive2 := true ;
13764: LD_ADDR_EXP 15
13768: PUSH
13769: LD_INT 1
13771: ST_TO_ADDR
// end ;
13772: LD_VAR 0 3
13776: RET
// every 0 0$2 trigger ruScriptActive and Count ( ruForces ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
13777: LD_EXP 14
13781: PUSH
13782: LD_EXP 59
13786: PPUSH
13787: CALL 56609 0 1
13791: AND
13792: IFFALSE 16374
13794: GO 13796
13796: DISABLE
13797: LD_INT 0
13799: PPUSH
13800: PPUSH
13801: PPUSH
13802: PPUSH
13803: PPUSH
13804: PPUSH
13805: PPUSH
13806: PPUSH
13807: PPUSH
13808: PPUSH
13809: PPUSH
13810: PPUSH
13811: PPUSH
13812: PPUSH
13813: PPUSH
13814: PPUSH
// begin enable ;
13815: ENABLE
// if ruTech then
13816: LD_EXP 65
13820: IFFALSE 13974
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
13822: LD_ADDR_VAR 0 4
13826: PUSH
13827: LD_INT 22
13829: PUSH
13830: LD_INT 3
13832: PUSH
13833: EMPTY
13834: LIST
13835: LIST
13836: PUSH
13837: LD_INT 50
13839: PUSH
13840: EMPTY
13841: LIST
13842: PUSH
13843: LD_INT 2
13845: PUSH
13846: LD_INT 30
13848: PUSH
13849: LD_INT 6
13851: PUSH
13852: EMPTY
13853: LIST
13854: LIST
13855: PUSH
13856: LD_INT 30
13858: PUSH
13859: LD_INT 7
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: PUSH
13866: LD_INT 30
13868: PUSH
13869: LD_INT 8
13871: PUSH
13872: EMPTY
13873: LIST
13874: LIST
13875: PUSH
13876: EMPTY
13877: LIST
13878: LIST
13879: LIST
13880: LIST
13881: PUSH
13882: EMPTY
13883: LIST
13884: LIST
13885: LIST
13886: PPUSH
13887: CALL_OW 69
13891: ST_TO_ADDR
// if lab then
13892: LD_VAR 0 4
13896: IFFALSE 13974
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
13898: LD_VAR 0 4
13902: PUSH
13903: LD_INT 1
13905: ARRAY
13906: PPUSH
13907: CALL_OW 461
13911: PUSH
13912: LD_INT 2
13914: EQUAL
13915: IFFALSE 13974
// begin for i in ruTech do
13917: LD_ADDR_VAR 0 1
13921: PUSH
13922: LD_EXP 65
13926: PUSH
13927: FOR_IN
13928: IFFALSE 13972
// if CanBeResearched ( lab [ 1 ] , i ) then
13930: LD_VAR 0 4
13934: PUSH
13935: LD_INT 1
13937: ARRAY
13938: PPUSH
13939: LD_VAR 0 1
13943: PPUSH
13944: CALL_OW 430
13948: IFFALSE 13970
// begin ComResearch ( lab [ 1 ] , i ) ;
13950: LD_VAR 0 4
13954: PUSH
13955: LD_INT 1
13957: ARRAY
13958: PPUSH
13959: LD_VAR 0 1
13963: PPUSH
13964: CALL_OW 124
// break ;
13968: GO 13972
// end ;
13970: GO 13927
13972: POP
13973: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
13974: LD_ADDR_VAR 0 14
13978: PUSH
13979: LD_EXP 66
13983: PPUSH
13984: LD_INT 22
13986: PUSH
13987: LD_INT 3
13989: PUSH
13990: EMPTY
13991: LIST
13992: LIST
13993: PUSH
13994: LD_INT 30
13996: PUSH
13997: LD_INT 3
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: PUSH
14004: LD_INT 50
14006: PUSH
14007: EMPTY
14008: LIST
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: LIST
14014: PPUSH
14015: CALL_OW 70
14019: ST_TO_ADDR
// if fac then
14020: LD_VAR 0 14
14024: IFFALSE 14619
// begin if UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
14026: LD_EXP 63
14030: PPUSH
14031: LD_INT 3
14033: PUSH
14034: LD_INT 60
14036: PUSH
14037: EMPTY
14038: LIST
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: PUSH
14044: LD_INT 3
14046: PUSH
14047: LD_INT 25
14049: PUSH
14050: LD_INT 3
14052: PUSH
14053: EMPTY
14054: LIST
14055: LIST
14056: PUSH
14057: EMPTY
14058: LIST
14059: LIST
14060: PUSH
14061: EMPTY
14062: LIST
14063: LIST
14064: PPUSH
14065: CALL_OW 72
14069: IFFALSE 14210
// begin for i in UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
14071: LD_ADDR_VAR 0 1
14075: PUSH
14076: LD_EXP 63
14080: PPUSH
14081: LD_INT 3
14083: PUSH
14084: LD_INT 60
14086: PUSH
14087: EMPTY
14088: LIST
14089: PUSH
14090: EMPTY
14091: LIST
14092: LIST
14093: PUSH
14094: LD_INT 3
14096: PUSH
14097: LD_INT 25
14099: PUSH
14100: LD_INT 3
14102: PUSH
14103: EMPTY
14104: LIST
14105: LIST
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: PUSH
14111: EMPTY
14112: LIST
14113: LIST
14114: PPUSH
14115: CALL_OW 72
14119: PUSH
14120: FOR_IN
14121: IFFALSE 14208
// begin SetTag ( i , tMech ) ;
14123: LD_VAR 0 1
14127: PPUSH
14128: LD_INT 7
14130: PPUSH
14131: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
14135: LD_VAR 0 1
14139: PPUSH
14140: CALL_OW 310
14144: PUSH
14145: LD_VAR 0 1
14149: PPUSH
14150: CALL_OW 310
14154: PUSH
14155: LD_VAR 0 14
14159: PUSH
14160: LD_INT 1
14162: ARRAY
14163: NONEQUAL
14164: AND
14165: IFFALSE 14176
// ComExitBuilding ( i ) ;
14167: LD_VAR 0 1
14171: PPUSH
14172: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
14176: LD_VAR 0 1
14180: PPUSH
14181: LD_VAR 0 14
14185: PUSH
14186: LD_INT 1
14188: ARRAY
14189: PPUSH
14190: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
14194: LD_VAR 0 1
14198: PPUSH
14199: LD_INT 3
14201: PPUSH
14202: CALL_OW 183
// end ;
14206: GO 14120
14208: POP
14209: POP
// end ; if UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
14210: LD_EXP 63
14214: PPUSH
14215: LD_INT 25
14217: PUSH
14218: LD_INT 3
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: PUSH
14225: LD_INT 3
14227: PUSH
14228: LD_INT 54
14230: PUSH
14231: EMPTY
14232: LIST
14233: PUSH
14234: EMPTY
14235: LIST
14236: LIST
14237: PUSH
14238: LD_INT 120
14240: PUSH
14241: LD_INT 7
14243: PUSH
14244: EMPTY
14245: LIST
14246: LIST
14247: PUSH
14248: LD_INT 50
14250: PUSH
14251: EMPTY
14252: LIST
14253: PUSH
14254: EMPTY
14255: LIST
14256: LIST
14257: LIST
14258: LIST
14259: PPUSH
14260: CALL_OW 72
14264: IFFALSE 14351
// begin for i in UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
14266: LD_ADDR_VAR 0 1
14270: PUSH
14271: LD_EXP 63
14275: PPUSH
14276: LD_INT 25
14278: PUSH
14279: LD_INT 3
14281: PUSH
14282: EMPTY
14283: LIST
14284: LIST
14285: PUSH
14286: LD_INT 3
14288: PUSH
14289: LD_INT 54
14291: PUSH
14292: EMPTY
14293: LIST
14294: PUSH
14295: EMPTY
14296: LIST
14297: LIST
14298: PUSH
14299: LD_INT 120
14301: PUSH
14302: LD_INT 7
14304: PUSH
14305: EMPTY
14306: LIST
14307: LIST
14308: PUSH
14309: LD_INT 50
14311: PUSH
14312: EMPTY
14313: LIST
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: LIST
14319: LIST
14320: PPUSH
14321: CALL_OW 72
14325: PUSH
14326: FOR_IN
14327: IFFALSE 14349
// ComEnterUnit ( i , fac [ 1 ] ) ;
14329: LD_VAR 0 1
14333: PPUSH
14334: LD_VAR 0 14
14338: PUSH
14339: LD_INT 1
14341: ARRAY
14342: PPUSH
14343: CALL_OW 120
14347: GO 14326
14349: POP
14350: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
14351: LD_VAR 0 14
14355: PUSH
14356: LD_INT 1
14358: ARRAY
14359: PPUSH
14360: CALL_OW 461
14364: PUSH
14365: LD_INT 2
14367: EQUAL
14368: IFFALSE 14619
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
14370: LD_ADDR_VAR 0 15
14374: PUSH
14375: LD_EXP 66
14379: PPUSH
14380: LD_INT 2
14382: PUSH
14383: LD_INT 30
14385: PUSH
14386: LD_INT 32
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: PUSH
14393: LD_INT 30
14395: PUSH
14396: LD_INT 33
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: PUSH
14403: EMPTY
14404: LIST
14405: LIST
14406: LIST
14407: PUSH
14408: LD_INT 35
14410: PUSH
14411: LD_INT 0
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: PPUSH
14422: CALL_OW 70
14426: ST_TO_ADDR
// if emptyTowers then
14427: LD_VAR 0 15
14431: IFFALSE 14481
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea ) ;
14433: LD_ADDR_VAR 0 16
14437: PUSH
14438: LD_VAR 0 15
14442: PUSH
14443: LD_INT 1
14445: ARRAY
14446: PPUSH
14447: LD_EXP 66
14451: PPUSH
14452: CALL 64854 0 2
14456: ST_TO_ADDR
// if weapon then
14457: LD_VAR 0 16
14461: IFFALSE 14481
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
14463: LD_VAR 0 15
14467: PUSH
14468: LD_INT 1
14470: ARRAY
14471: PPUSH
14472: LD_VAR 0 16
14476: PPUSH
14477: CALL_OW 148
// end ; if ruConstructList then
14481: LD_EXP 70
14485: IFFALSE 14619
// if CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
14487: LD_VAR 0 14
14491: PUSH
14492: LD_INT 1
14494: ARRAY
14495: PPUSH
14496: LD_EXP 70
14500: PUSH
14501: LD_INT 1
14503: ARRAY
14504: PUSH
14505: LD_INT 1
14507: ARRAY
14508: PPUSH
14509: LD_EXP 70
14513: PUSH
14514: LD_INT 1
14516: ARRAY
14517: PUSH
14518: LD_INT 2
14520: ARRAY
14521: PPUSH
14522: LD_EXP 70
14526: PUSH
14527: LD_INT 1
14529: ARRAY
14530: PUSH
14531: LD_INT 3
14533: ARRAY
14534: PPUSH
14535: LD_EXP 70
14539: PUSH
14540: LD_INT 1
14542: ARRAY
14543: PUSH
14544: LD_INT 4
14546: ARRAY
14547: PPUSH
14548: CALL_OW 448
14552: IFFALSE 14619
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
14554: LD_VAR 0 14
14558: PUSH
14559: LD_INT 1
14561: ARRAY
14562: PPUSH
14563: LD_EXP 70
14567: PUSH
14568: LD_INT 1
14570: ARRAY
14571: PUSH
14572: LD_INT 1
14574: ARRAY
14575: PPUSH
14576: LD_EXP 70
14580: PUSH
14581: LD_INT 1
14583: ARRAY
14584: PUSH
14585: LD_INT 2
14587: ARRAY
14588: PPUSH
14589: LD_EXP 70
14593: PUSH
14594: LD_INT 1
14596: ARRAY
14597: PUSH
14598: LD_INT 3
14600: ARRAY
14601: PPUSH
14602: LD_EXP 70
14606: PUSH
14607: LD_INT 1
14609: ARRAY
14610: PUSH
14611: LD_INT 4
14613: ARRAY
14614: PPUSH
14615: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14619: LD_ADDR_VAR 0 2
14623: PUSH
14624: LD_EXP 66
14628: PPUSH
14629: LD_INT 21
14631: PUSH
14632: LD_INT 3
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PUSH
14639: LD_INT 3
14641: PUSH
14642: LD_INT 57
14644: PUSH
14645: EMPTY
14646: LIST
14647: PUSH
14648: EMPTY
14649: LIST
14650: LIST
14651: PUSH
14652: LD_INT 3
14654: PUSH
14655: LD_INT 24
14657: PUSH
14658: LD_INT 1000
14660: PUSH
14661: EMPTY
14662: LIST
14663: LIST
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: PUSH
14669: EMPTY
14670: LIST
14671: LIST
14672: LIST
14673: PPUSH
14674: CALL_OW 70
14678: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea ) ;
14679: LD_ADDR_VAR 0 8
14683: PUSH
14684: LD_EXP 72
14688: PPUSH
14689: CALL_OW 435
14693: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
14694: LD_ADDR_VAR 0 9
14698: PUSH
14699: LD_EXP 59
14703: PPUSH
14704: LD_INT 25
14706: PUSH
14707: LD_INT 4
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: LD_INT 50
14716: PUSH
14717: EMPTY
14718: LIST
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PPUSH
14724: CALL_OW 72
14728: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
14729: LD_ADDR_VAR 0 4
14733: PUSH
14734: LD_EXP 66
14738: PPUSH
14739: LD_INT 2
14741: PUSH
14742: LD_INT 30
14744: PUSH
14745: LD_INT 6
14747: PUSH
14748: EMPTY
14749: LIST
14750: LIST
14751: PUSH
14752: LD_INT 30
14754: PUSH
14755: LD_INT 7
14757: PUSH
14758: EMPTY
14759: LIST
14760: LIST
14761: PUSH
14762: LD_INT 30
14764: PUSH
14765: LD_INT 8
14767: PUSH
14768: EMPTY
14769: LIST
14770: LIST
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: LIST
14776: LIST
14777: PPUSH
14778: CALL_OW 70
14782: ST_TO_ADDR
// if sci then
14783: LD_VAR 0 9
14787: IFFALSE 14948
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
14789: LD_ADDR_VAR 0 11
14793: PUSH
14794: LD_EXP 59
14798: PPUSH
14799: LD_INT 95
14801: PUSH
14802: LD_EXP 66
14806: PUSH
14807: EMPTY
14808: LIST
14809: LIST
14810: PUSH
14811: LD_INT 120
14813: PUSH
14814: LD_INT 1
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PUSH
14821: EMPTY
14822: LIST
14823: LIST
14824: PPUSH
14825: CALL_OW 72
14829: ST_TO_ADDR
// if hurtUnits then
14830: LD_VAR 0 11
14834: IFFALSE 14895
// begin for i in sci do
14836: LD_ADDR_VAR 0 1
14840: PUSH
14841: LD_VAR 0 9
14845: PUSH
14846: FOR_IN
14847: IFFALSE 14891
// if IsInUnit ( i ) then
14849: LD_VAR 0 1
14853: PPUSH
14854: CALL_OW 310
14858: IFFALSE 14871
// ComExitBuilding ( i ) else
14860: LD_VAR 0 1
14864: PPUSH
14865: CALL_OW 122
14869: GO 14889
// ComHeal ( i , hurtUnits [ 1 ] ) ;
14871: LD_VAR 0 1
14875: PPUSH
14876: LD_VAR 0 11
14880: PUSH
14881: LD_INT 1
14883: ARRAY
14884: PPUSH
14885: CALL_OW 128
14889: GO 14846
14891: POP
14892: POP
// end else
14893: GO 14948
// if lab then
14895: LD_VAR 0 4
14899: IFFALSE 14948
// begin for i in sci do
14901: LD_ADDR_VAR 0 1
14905: PUSH
14906: LD_VAR 0 9
14910: PUSH
14911: FOR_IN
14912: IFFALSE 14946
// if not IsInUnit ( i ) then
14914: LD_VAR 0 1
14918: PPUSH
14919: CALL_OW 310
14923: NOT
14924: IFFALSE 14944
// ComEnterUnit ( i , lab [ 1 ] ) ;
14926: LD_VAR 0 1
14930: PPUSH
14931: LD_VAR 0 4
14935: PUSH
14936: LD_INT 1
14938: ARRAY
14939: PPUSH
14940: CALL_OW 120
14944: GO 14911
14946: POP
14947: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
14948: LD_ADDR_VAR 0 5
14952: PUSH
14953: LD_EXP 59
14957: PPUSH
14958: LD_INT 25
14960: PUSH
14961: LD_INT 2
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PPUSH
14968: CALL_OW 72
14972: ST_TO_ADDR
// if eng then
14973: LD_VAR 0 5
14977: IFFALSE 15762
// begin for i in eng do
14979: LD_ADDR_VAR 0 1
14983: PUSH
14984: LD_VAR 0 5
14988: PUSH
14989: FOR_IN
14990: IFFALSE 15760
// begin tag := GetTag ( i ) ;
14992: LD_ADDR_VAR 0 6
14996: PUSH
14997: LD_VAR 0 1
15001: PPUSH
15002: CALL_OW 110
15006: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
15007: LD_VAR 0 1
15011: PPUSH
15012: CALL_OW 256
15016: PUSH
15017: LD_INT 800
15019: LESS
15020: PUSH
15021: LD_VAR 0 6
15025: PUSH
15026: LD_INT 1
15028: NONEQUAL
15029: AND
15030: IFFALSE 15080
// begin SetTag ( i , tHeal ) ;
15032: LD_VAR 0 1
15036: PPUSH
15037: LD_INT 1
15039: PPUSH
15040: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
15044: LD_VAR 0 1
15048: PPUSH
15049: LD_EXP 74
15053: PUSH
15054: LD_INT 1
15056: ARRAY
15057: PPUSH
15058: LD_EXP 74
15062: PUSH
15063: LD_INT 2
15065: ARRAY
15066: PPUSH
15067: CALL_OW 111
// AddComHold ( i ) ;
15071: LD_VAR 0 1
15075: PPUSH
15076: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
15080: LD_VAR 0 6
15084: PUSH
15085: LD_INT 1
15087: EQUAL
15088: PUSH
15089: LD_VAR 0 1
15093: PPUSH
15094: CALL_OW 256
15098: PUSH
15099: LD_INT 1000
15101: EQUAL
15102: AND
15103: IFFALSE 15117
// SetTag ( i , 0 ) ;
15105: LD_VAR 0 1
15109: PPUSH
15110: LD_INT 0
15112: PPUSH
15113: CALL_OW 109
// if not tag then
15117: LD_VAR 0 6
15121: NOT
15122: IFFALSE 15294
// begin undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15124: LD_ADDR_VAR 0 3
15128: PUSH
15129: LD_EXP 66
15133: PPUSH
15134: LD_INT 57
15136: PUSH
15137: EMPTY
15138: LIST
15139: PPUSH
15140: CALL_OW 70
15144: ST_TO_ADDR
// if undone then
15145: LD_VAR 0 3
15149: IFFALSE 15171
// begin ComComplete ( i , undone [ 1 ] ) ;
15151: LD_VAR 0 1
15155: PPUSH
15156: LD_VAR 0 3
15160: PUSH
15161: LD_INT 1
15163: ARRAY
15164: PPUSH
15165: CALL 62707 0 2
// continue ;
15169: GO 14989
// end ; if cr or tmp or Count ( ruBuildings ) then
15171: LD_VAR 0 8
15175: PUSH
15176: LD_VAR 0 2
15180: OR
15181: PUSH
15182: LD_EXP 76
15186: PPUSH
15187: CALL 56609 0 1
15191: OR
15192: IFFALSE 15268
// begin if IsInUnit ( i ) then
15194: LD_VAR 0 1
15198: PPUSH
15199: CALL_OW 310
15203: IFFALSE 15214
// ComExitBuilding ( i ) ;
15205: LD_VAR 0 1
15209: PPUSH
15210: CALL_OW 122
// if tmp then
15214: LD_VAR 0 2
15218: IFFALSE 15234
// SetTag ( i , tRepair ) else
15220: LD_VAR 0 1
15224: PPUSH
15225: LD_INT 3
15227: PPUSH
15228: CALL_OW 109
15232: GO 15266
// if cr then
15234: LD_VAR 0 8
15238: IFFALSE 15254
// SetTag ( i , tCrates ) else
15240: LD_VAR 0 1
15244: PPUSH
15245: LD_INT 2
15247: PPUSH
15248: CALL_OW 109
15252: GO 15266
// SetTag ( i , tBuild ) ;
15254: LD_VAR 0 1
15258: PPUSH
15259: LD_INT 5
15261: PPUSH
15262: CALL_OW 109
// end else
15266: GO 15294
// if not IsInUnit ( i ) then
15268: LD_VAR 0 1
15272: PPUSH
15273: CALL_OW 310
15277: NOT
15278: IFFALSE 15294
// ComEnterUnit ( i , ruBase ) ;
15280: LD_VAR 0 1
15284: PPUSH
15285: LD_EXP 68
15289: PPUSH
15290: CALL_OW 120
// end ; if tag = tRepair then
15294: LD_VAR 0 6
15298: PUSH
15299: LD_INT 3
15301: EQUAL
15302: IFFALSE 15408
// begin if IsInUnit ( i ) then
15304: LD_VAR 0 1
15308: PPUSH
15309: CALL_OW 310
15313: IFFALSE 15326
// begin ComExitBuilding ( i ) ;
15315: LD_VAR 0 1
15319: PPUSH
15320: CALL_OW 122
// continue ;
15324: GO 14989
// end ; if not tmp then
15326: LD_VAR 0 2
15330: NOT
15331: IFFALSE 15347
// begin SetTag ( i , 0 ) ;
15333: LD_VAR 0 1
15337: PPUSH
15338: LD_INT 0
15340: PPUSH
15341: CALL_OW 109
// continue ;
15345: GO 14989
// end ; if not HasTask ( i ) then
15347: LD_VAR 0 1
15351: PPUSH
15352: CALL_OW 314
15356: NOT
15357: IFFALSE 15377
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
15359: LD_VAR 0 1
15363: PPUSH
15364: LD_VAR 0 2
15368: PUSH
15369: LD_INT 1
15371: ARRAY
15372: PPUSH
15373: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
15377: LD_VAR 0 1
15381: PPUSH
15382: LD_EXP 66
15386: PPUSH
15387: CALL_OW 308
15391: NOT
15392: IFFALSE 15408
// ComMoveToArea ( i , ruBaseArea ) ;
15394: LD_VAR 0 1
15398: PPUSH
15399: LD_EXP 66
15403: PPUSH
15404: CALL_OW 113
// end ; if tag = tBuild then
15408: LD_VAR 0 6
15412: PUSH
15413: LD_INT 5
15415: EQUAL
15416: IFFALSE 15615
// begin if IsInUnit ( i ) then
15418: LD_VAR 0 1
15422: PPUSH
15423: CALL_OW 310
15427: IFFALSE 15440
// begin ComExitBuilding ( i ) ;
15429: LD_VAR 0 1
15433: PPUSH
15434: CALL_OW 122
// continue ;
15438: GO 14989
// end ; if not Count ( ruBuildings ) then
15440: LD_EXP 76
15444: PPUSH
15445: CALL 56609 0 1
15449: NOT
15450: IFFALSE 15468
// begin SetTag ( i , 0 ) ;
15452: LD_VAR 0 1
15456: PPUSH
15457: LD_INT 0
15459: PPUSH
15460: CALL_OW 109
// continue ;
15464: GO 14989
// end else
15466: GO 15507
// if not CanBeBuiltOnlyResources ( ruBase , ruBuildings [ 1 ] [ 1 ] ) then
15468: LD_EXP 68
15472: PPUSH
15473: LD_EXP 76
15477: PUSH
15478: LD_INT 1
15480: ARRAY
15481: PUSH
15482: LD_INT 1
15484: ARRAY
15485: PPUSH
15486: CALL 25338 0 2
15490: NOT
15491: IFFALSE 15507
// begin SetTag ( i , 0 ) ;
15493: LD_VAR 0 1
15497: PPUSH
15498: LD_INT 0
15500: PPUSH
15501: CALL_OW 109
// continue ;
15505: GO 14989
// end ; undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15507: LD_ADDR_VAR 0 3
15511: PUSH
15512: LD_EXP 66
15516: PPUSH
15517: LD_INT 57
15519: PUSH
15520: EMPTY
15521: LIST
15522: PPUSH
15523: CALL_OW 70
15527: ST_TO_ADDR
// if undone then
15528: LD_VAR 0 3
15532: IFFALSE 15554
// begin ComComplete ( i , undone [ 1 ] ) ;
15534: LD_VAR 0 1
15538: PPUSH
15539: LD_VAR 0 3
15543: PUSH
15544: LD_INT 1
15546: ARRAY
15547: PPUSH
15548: CALL 62707 0 2
// continue ;
15552: GO 14989
// end ; ComBuild ( i , ruBuildings [ 1 ] [ 1 ] , ruBuildings [ 1 ] [ 2 ] , ruBuildings [ 1 ] [ 3 ] , ruBuildings [ 1 ] [ 4 ] ) ;
15554: LD_VAR 0 1
15558: PPUSH
15559: LD_EXP 76
15563: PUSH
15564: LD_INT 1
15566: ARRAY
15567: PUSH
15568: LD_INT 1
15570: ARRAY
15571: PPUSH
15572: LD_EXP 76
15576: PUSH
15577: LD_INT 1
15579: ARRAY
15580: PUSH
15581: LD_INT 2
15583: ARRAY
15584: PPUSH
15585: LD_EXP 76
15589: PUSH
15590: LD_INT 1
15592: ARRAY
15593: PUSH
15594: LD_INT 3
15596: ARRAY
15597: PPUSH
15598: LD_EXP 76
15602: PUSH
15603: LD_INT 1
15605: ARRAY
15606: PUSH
15607: LD_INT 4
15609: ARRAY
15610: PPUSH
15611: CALL_OW 145
// end ; if tag = tCrates then
15615: LD_VAR 0 6
15619: PUSH
15620: LD_INT 2
15622: EQUAL
15623: IFFALSE 15758
// begin if IsInUnit ( i ) then
15625: LD_VAR 0 1
15629: PPUSH
15630: CALL_OW 310
15634: IFFALSE 15647
// begin ComExitBuilding ( i ) ;
15636: LD_VAR 0 1
15640: PPUSH
15641: CALL_OW 122
// continue ;
15645: GO 14989
// end ; if not cr then
15647: LD_VAR 0 8
15651: NOT
15652: IFFALSE 15668
// begin SetTag ( i , 0 ) ;
15654: LD_VAR 0 1
15658: PPUSH
15659: LD_INT 0
15661: PPUSH
15662: CALL_OW 109
// continue ;
15666: GO 14989
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
15668: LD_VAR 0 1
15672: PPUSH
15673: CALL_OW 314
15677: NOT
15678: PUSH
15679: LD_INT 81
15681: PUSH
15682: LD_INT 3
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: PUSH
15689: LD_INT 92
15691: PUSH
15692: LD_VAR 0 8
15696: PUSH
15697: LD_INT 1
15699: ARRAY
15700: PUSH
15701: LD_VAR 0 8
15705: PUSH
15706: LD_INT 2
15708: ARRAY
15709: PUSH
15710: LD_INT 12
15712: PUSH
15713: EMPTY
15714: LIST
15715: LIST
15716: LIST
15717: LIST
15718: PUSH
15719: EMPTY
15720: LIST
15721: LIST
15722: PPUSH
15723: CALL_OW 69
15727: NOT
15728: AND
15729: IFFALSE 15758
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
15731: LD_VAR 0 1
15735: PPUSH
15736: LD_VAR 0 8
15740: PUSH
15741: LD_INT 1
15743: ARRAY
15744: PPUSH
15745: LD_VAR 0 8
15749: PUSH
15750: LD_INT 2
15752: ARRAY
15753: PPUSH
15754: CALL_OW 117
// end ; end ;
15758: GO 14989
15760: POP
15761: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander ;
15762: LD_ADDR_VAR 0 10
15766: PUSH
15767: LD_EXP 59
15771: PPUSH
15772: LD_INT 2
15774: PUSH
15775: LD_INT 25
15777: PUSH
15778: LD_INT 1
15780: PUSH
15781: EMPTY
15782: LIST
15783: LIST
15784: PUSH
15785: LD_INT 25
15787: PUSH
15788: LD_INT 9
15790: PUSH
15791: EMPTY
15792: LIST
15793: LIST
15794: PUSH
15795: EMPTY
15796: LIST
15797: LIST
15798: LIST
15799: PUSH
15800: LD_INT 50
15802: PUSH
15803: EMPTY
15804: LIST
15805: PUSH
15806: EMPTY
15807: LIST
15808: LIST
15809: PPUSH
15810: CALL_OW 72
15814: PUSH
15815: LD_EXP 61
15819: UNION
15820: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
15821: LD_ADDR_VAR 0 12
15825: PUSH
15826: LD_EXP 66
15830: PPUSH
15831: LD_INT 81
15833: PUSH
15834: LD_INT 3
15836: PUSH
15837: EMPTY
15838: LIST
15839: LIST
15840: PPUSH
15841: CALL_OW 70
15845: ST_TO_ADDR
// if sol then
15846: LD_VAR 0 10
15850: IFFALSE 16374
// begin if enemyInBase then
15852: LD_VAR 0 12
15856: IFFALSE 15999
// begin for i in sol do
15858: LD_ADDR_VAR 0 1
15862: PUSH
15863: LD_VAR 0 10
15867: PUSH
15868: FOR_IN
15869: IFFALSE 15995
// begin tw := IsInUnit ( i ) ;
15871: LD_ADDR_VAR 0 7
15875: PUSH
15876: LD_VAR 0 1
15880: PPUSH
15881: CALL_OW 310
15885: ST_TO_ADDR
// if tw then
15886: LD_VAR 0 7
15890: IFFALSE 15969
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
15892: LD_VAR 0 7
15896: PUSH
15897: LD_INT 22
15899: PUSH
15900: LD_INT 3
15902: PUSH
15903: EMPTY
15904: LIST
15905: LIST
15906: PUSH
15907: LD_INT 101
15909: PUSH
15910: LD_INT 1
15912: PUSH
15913: EMPTY
15914: LIST
15915: LIST
15916: PUSH
15917: LD_INT 2
15919: PUSH
15920: LD_INT 30
15922: PUSH
15923: LD_INT 32
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: LD_INT 30
15932: PUSH
15933: LD_INT 31
15935: PUSH
15936: EMPTY
15937: LIST
15938: LIST
15939: PUSH
15940: EMPTY
15941: LIST
15942: LIST
15943: LIST
15944: PUSH
15945: EMPTY
15946: LIST
15947: LIST
15948: LIST
15949: PPUSH
15950: CALL_OW 69
15954: IN
15955: NOT
15956: IFFALSE 15967
// ComExitBuilding ( i ) ;
15958: LD_VAR 0 1
15962: PPUSH
15963: CALL_OW 122
// end else
15967: GO 15993
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
15969: LD_VAR 0 1
15973: PPUSH
15974: LD_VAR 0 12
15978: PPUSH
15979: LD_VAR 0 1
15983: PPUSH
15984: CALL_OW 74
15988: PPUSH
15989: CALL_OW 115
// end ;
15993: GO 15868
15995: POP
15996: POP
// end else
15997: GO 16374
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
15999: LD_ADDR_VAR 0 13
16003: PUSH
16004: LD_EXP 66
16008: PPUSH
16009: LD_INT 3
16011: PUSH
16012: LD_INT 62
16014: PUSH
16015: EMPTY
16016: LIST
16017: PUSH
16018: EMPTY
16019: LIST
16020: LIST
16021: PUSH
16022: LD_INT 2
16024: PUSH
16025: LD_INT 30
16027: PUSH
16028: LD_INT 32
16030: PUSH
16031: EMPTY
16032: LIST
16033: LIST
16034: PUSH
16035: LD_INT 30
16037: PUSH
16038: LD_INT 4
16040: PUSH
16041: EMPTY
16042: LIST
16043: LIST
16044: PUSH
16045: LD_INT 30
16047: PUSH
16048: LD_INT 5
16050: PUSH
16051: EMPTY
16052: LIST
16053: LIST
16054: PUSH
16055: LD_INT 30
16057: PUSH
16058: LD_INT 31
16060: PUSH
16061: EMPTY
16062: LIST
16063: LIST
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: LIST
16069: LIST
16070: LIST
16071: PUSH
16072: EMPTY
16073: LIST
16074: LIST
16075: PPUSH
16076: CALL_OW 70
16080: ST_TO_ADDR
// if empty then
16081: LD_VAR 0 13
16085: IFFALSE 16102
// empty := ReverseArray ( empty ) ;
16087: LD_ADDR_VAR 0 13
16091: PUSH
16092: LD_VAR 0 13
16096: PPUSH
16097: CALL 87485 0 1
16101: ST_TO_ADDR
// for i in sol do
16102: LD_ADDR_VAR 0 1
16106: PUSH
16107: LD_VAR 0 10
16111: PUSH
16112: FOR_IN
16113: IFFALSE 16372
// begin tag := GetTag ( i ) ;
16115: LD_ADDR_VAR 0 6
16119: PUSH
16120: LD_VAR 0 1
16124: PPUSH
16125: CALL_OW 110
16129: ST_TO_ADDR
// if tag = tMech then
16130: LD_VAR 0 6
16134: PUSH
16135: LD_INT 7
16137: EQUAL
16138: IFFALSE 16142
// continue ;
16140: GO 16112
// if GetLives ( i ) < 1000 and tag <> tHeal then
16142: LD_VAR 0 1
16146: PPUSH
16147: CALL_OW 256
16151: PUSH
16152: LD_INT 1000
16154: LESS
16155: PUSH
16156: LD_VAR 0 6
16160: PUSH
16161: LD_INT 1
16163: NONEQUAL
16164: AND
16165: IFFALSE 16217
// begin SetTag ( i , tHeal ) ;
16167: LD_VAR 0 1
16171: PPUSH
16172: LD_INT 1
16174: PPUSH
16175: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
16179: LD_VAR 0 1
16183: PPUSH
16184: LD_EXP 74
16188: PUSH
16189: LD_INT 1
16191: ARRAY
16192: PPUSH
16193: LD_EXP 74
16197: PUSH
16198: LD_INT 2
16200: ARRAY
16201: PPUSH
16202: CALL_OW 111
// AddComHold ( i ) ;
16206: LD_VAR 0 1
16210: PPUSH
16211: CALL_OW 200
// continue ;
16215: GO 16112
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
16217: LD_VAR 0 1
16221: PPUSH
16222: CALL_OW 256
16226: PUSH
16227: LD_INT 1000
16229: EQUAL
16230: PUSH
16231: LD_VAR 0 6
16235: PUSH
16236: LD_INT 1
16238: EQUAL
16239: AND
16240: IFFALSE 16256
// begin SetTag ( i , 0 ) ;
16242: LD_VAR 0 1
16246: PPUSH
16247: LD_INT 0
16249: PPUSH
16250: CALL_OW 109
// continue ;
16254: GO 16112
// end ; if HasTask ( i ) then
16256: LD_VAR 0 1
16260: PPUSH
16261: CALL_OW 314
16265: IFFALSE 16269
// continue ;
16267: GO 16112
// if not IsInUnit ( i ) and not tag and empty then
16269: LD_VAR 0 1
16273: PPUSH
16274: CALL_OW 310
16278: NOT
16279: PUSH
16280: LD_VAR 0 6
16284: NOT
16285: AND
16286: PUSH
16287: LD_VAR 0 13
16291: AND
16292: IFFALSE 16370
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
16294: LD_VAR 0 1
16298: PPUSH
16299: LD_VAR 0 13
16303: PUSH
16304: LD_INT 1
16306: ARRAY
16307: PPUSH
16308: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
16312: LD_VAR 0 13
16316: PUSH
16317: LD_INT 1
16319: ARRAY
16320: PPUSH
16321: CALL_OW 266
16325: PUSH
16326: LD_INT 5
16328: EQUAL
16329: PUSH
16330: LD_INT 50
16332: PPUSH
16333: CALL_OW 13
16337: AND
16338: IFFALSE 16352
// AddComChangeProfession ( i , class_bazooker ) ;
16340: LD_VAR 0 1
16344: PPUSH
16345: LD_INT 9
16347: PPUSH
16348: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
16352: LD_ADDR_VAR 0 13
16356: PUSH
16357: LD_VAR 0 13
16361: PPUSH
16362: LD_INT 1
16364: PPUSH
16365: CALL_OW 3
16369: ST_TO_ADDR
// end ; end ;
16370: GO 16112
16372: POP
16373: POP
// end ; end ; end ;
16374: PPOPN 16
16376: END
// every 0 0$2 trigger ruScriptActive2 and Count ( ruForces2 ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
16377: LD_EXP 15
16381: PUSH
16382: LD_EXP 60
16386: PPUSH
16387: CALL 56609 0 1
16391: AND
16392: IFFALSE 19044
16394: GO 16396
16396: DISABLE
16397: LD_INT 0
16399: PPUSH
16400: PPUSH
16401: PPUSH
16402: PPUSH
16403: PPUSH
16404: PPUSH
16405: PPUSH
16406: PPUSH
16407: PPUSH
16408: PPUSH
16409: PPUSH
16410: PPUSH
16411: PPUSH
16412: PPUSH
16413: PPUSH
16414: PPUSH
// begin enable ;
16415: ENABLE
// if ruTech then
16416: LD_EXP 65
16420: IFFALSE 16574
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
16422: LD_ADDR_VAR 0 4
16426: PUSH
16427: LD_INT 22
16429: PUSH
16430: LD_INT 3
16432: PUSH
16433: EMPTY
16434: LIST
16435: LIST
16436: PUSH
16437: LD_INT 50
16439: PUSH
16440: EMPTY
16441: LIST
16442: PUSH
16443: LD_INT 2
16445: PUSH
16446: LD_INT 30
16448: PUSH
16449: LD_INT 6
16451: PUSH
16452: EMPTY
16453: LIST
16454: LIST
16455: PUSH
16456: LD_INT 30
16458: PUSH
16459: LD_INT 7
16461: PUSH
16462: EMPTY
16463: LIST
16464: LIST
16465: PUSH
16466: LD_INT 30
16468: PUSH
16469: LD_INT 8
16471: PUSH
16472: EMPTY
16473: LIST
16474: LIST
16475: PUSH
16476: EMPTY
16477: LIST
16478: LIST
16479: LIST
16480: LIST
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: LIST
16486: PPUSH
16487: CALL_OW 69
16491: ST_TO_ADDR
// if lab then
16492: LD_VAR 0 4
16496: IFFALSE 16574
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
16498: LD_VAR 0 4
16502: PUSH
16503: LD_INT 1
16505: ARRAY
16506: PPUSH
16507: CALL_OW 461
16511: PUSH
16512: LD_INT 2
16514: EQUAL
16515: IFFALSE 16574
// begin for i in ruTech do
16517: LD_ADDR_VAR 0 1
16521: PUSH
16522: LD_EXP 65
16526: PUSH
16527: FOR_IN
16528: IFFALSE 16572
// if CanBeResearched ( lab [ 1 ] , i ) then
16530: LD_VAR 0 4
16534: PUSH
16535: LD_INT 1
16537: ARRAY
16538: PPUSH
16539: LD_VAR 0 1
16543: PPUSH
16544: CALL_OW 430
16548: IFFALSE 16570
// begin ComResearch ( lab [ 1 ] , i ) ;
16550: LD_VAR 0 4
16554: PUSH
16555: LD_INT 1
16557: ARRAY
16558: PPUSH
16559: LD_VAR 0 1
16563: PPUSH
16564: CALL_OW 124
// break ;
16568: GO 16572
// end ;
16570: GO 16527
16572: POP
16573: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
16574: LD_ADDR_VAR 0 14
16578: PUSH
16579: LD_EXP 67
16583: PPUSH
16584: LD_INT 22
16586: PUSH
16587: LD_INT 3
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: LD_INT 30
16596: PUSH
16597: LD_INT 3
16599: PUSH
16600: EMPTY
16601: LIST
16602: LIST
16603: PUSH
16604: LD_INT 50
16606: PUSH
16607: EMPTY
16608: LIST
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: LIST
16614: PPUSH
16615: CALL_OW 70
16619: ST_TO_ADDR
// if fac then
16620: LD_VAR 0 14
16624: IFFALSE 17219
// begin if UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
16626: LD_EXP 64
16630: PPUSH
16631: LD_INT 3
16633: PUSH
16634: LD_INT 60
16636: PUSH
16637: EMPTY
16638: LIST
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PUSH
16644: LD_INT 3
16646: PUSH
16647: LD_INT 25
16649: PUSH
16650: LD_INT 3
16652: PUSH
16653: EMPTY
16654: LIST
16655: LIST
16656: PUSH
16657: EMPTY
16658: LIST
16659: LIST
16660: PUSH
16661: EMPTY
16662: LIST
16663: LIST
16664: PPUSH
16665: CALL_OW 72
16669: IFFALSE 16810
// begin for i in UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
16671: LD_ADDR_VAR 0 1
16675: PUSH
16676: LD_EXP 64
16680: PPUSH
16681: LD_INT 3
16683: PUSH
16684: LD_INT 60
16686: PUSH
16687: EMPTY
16688: LIST
16689: PUSH
16690: EMPTY
16691: LIST
16692: LIST
16693: PUSH
16694: LD_INT 3
16696: PUSH
16697: LD_INT 25
16699: PUSH
16700: LD_INT 3
16702: PUSH
16703: EMPTY
16704: LIST
16705: LIST
16706: PUSH
16707: EMPTY
16708: LIST
16709: LIST
16710: PUSH
16711: EMPTY
16712: LIST
16713: LIST
16714: PPUSH
16715: CALL_OW 72
16719: PUSH
16720: FOR_IN
16721: IFFALSE 16808
// begin SetTag ( i , tMech ) ;
16723: LD_VAR 0 1
16727: PPUSH
16728: LD_INT 7
16730: PPUSH
16731: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
16735: LD_VAR 0 1
16739: PPUSH
16740: CALL_OW 310
16744: PUSH
16745: LD_VAR 0 1
16749: PPUSH
16750: CALL_OW 310
16754: PUSH
16755: LD_VAR 0 14
16759: PUSH
16760: LD_INT 1
16762: ARRAY
16763: NONEQUAL
16764: AND
16765: IFFALSE 16776
// ComExitBuilding ( i ) ;
16767: LD_VAR 0 1
16771: PPUSH
16772: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
16776: LD_VAR 0 1
16780: PPUSH
16781: LD_VAR 0 14
16785: PUSH
16786: LD_INT 1
16788: ARRAY
16789: PPUSH
16790: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
16794: LD_VAR 0 1
16798: PPUSH
16799: LD_INT 3
16801: PPUSH
16802: CALL_OW 183
// end ;
16806: GO 16720
16808: POP
16809: POP
// end ; if UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
16810: LD_EXP 64
16814: PPUSH
16815: LD_INT 25
16817: PUSH
16818: LD_INT 3
16820: PUSH
16821: EMPTY
16822: LIST
16823: LIST
16824: PUSH
16825: LD_INT 3
16827: PUSH
16828: LD_INT 54
16830: PUSH
16831: EMPTY
16832: LIST
16833: PUSH
16834: EMPTY
16835: LIST
16836: LIST
16837: PUSH
16838: LD_INT 120
16840: PUSH
16841: LD_INT 7
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 50
16850: PUSH
16851: EMPTY
16852: LIST
16853: PUSH
16854: EMPTY
16855: LIST
16856: LIST
16857: LIST
16858: LIST
16859: PPUSH
16860: CALL_OW 72
16864: IFFALSE 16951
// begin for i in UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
16866: LD_ADDR_VAR 0 1
16870: PUSH
16871: LD_EXP 64
16875: PPUSH
16876: LD_INT 25
16878: PUSH
16879: LD_INT 3
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PUSH
16886: LD_INT 3
16888: PUSH
16889: LD_INT 54
16891: PUSH
16892: EMPTY
16893: LIST
16894: PUSH
16895: EMPTY
16896: LIST
16897: LIST
16898: PUSH
16899: LD_INT 120
16901: PUSH
16902: LD_INT 7
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: LD_INT 50
16911: PUSH
16912: EMPTY
16913: LIST
16914: PUSH
16915: EMPTY
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: PPUSH
16921: CALL_OW 72
16925: PUSH
16926: FOR_IN
16927: IFFALSE 16949
// ComEnterUnit ( i , fac [ 1 ] ) ;
16929: LD_VAR 0 1
16933: PPUSH
16934: LD_VAR 0 14
16938: PUSH
16939: LD_INT 1
16941: ARRAY
16942: PPUSH
16943: CALL_OW 120
16947: GO 16926
16949: POP
16950: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
16951: LD_VAR 0 14
16955: PUSH
16956: LD_INT 1
16958: ARRAY
16959: PPUSH
16960: CALL_OW 461
16964: PUSH
16965: LD_INT 2
16967: EQUAL
16968: IFFALSE 17219
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea2 , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
16970: LD_ADDR_VAR 0 15
16974: PUSH
16975: LD_EXP 67
16979: PPUSH
16980: LD_INT 2
16982: PUSH
16983: LD_INT 30
16985: PUSH
16986: LD_INT 32
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: PUSH
16993: LD_INT 30
16995: PUSH
16996: LD_INT 33
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: EMPTY
17004: LIST
17005: LIST
17006: LIST
17007: PUSH
17008: LD_INT 35
17010: PUSH
17011: LD_INT 0
17013: PUSH
17014: EMPTY
17015: LIST
17016: LIST
17017: PUSH
17018: EMPTY
17019: LIST
17020: LIST
17021: PPUSH
17022: CALL_OW 70
17026: ST_TO_ADDR
// if emptyTowers then
17027: LD_VAR 0 15
17031: IFFALSE 17081
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea2 ) ;
17033: LD_ADDR_VAR 0 16
17037: PUSH
17038: LD_VAR 0 15
17042: PUSH
17043: LD_INT 1
17045: ARRAY
17046: PPUSH
17047: LD_EXP 67
17051: PPUSH
17052: CALL 64854 0 2
17056: ST_TO_ADDR
// if weapon then
17057: LD_VAR 0 16
17061: IFFALSE 17081
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
17063: LD_VAR 0 15
17067: PUSH
17068: LD_INT 1
17070: ARRAY
17071: PPUSH
17072: LD_VAR 0 16
17076: PPUSH
17077: CALL_OW 148
// end ; if ruConstructList2 then
17081: LD_EXP 71
17085: IFFALSE 17219
// if CanBeConstructed ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) then
17087: LD_VAR 0 14
17091: PUSH
17092: LD_INT 1
17094: ARRAY
17095: PPUSH
17096: LD_EXP 71
17100: PUSH
17101: LD_INT 1
17103: ARRAY
17104: PUSH
17105: LD_INT 1
17107: ARRAY
17108: PPUSH
17109: LD_EXP 71
17113: PUSH
17114: LD_INT 1
17116: ARRAY
17117: PUSH
17118: LD_INT 2
17120: ARRAY
17121: PPUSH
17122: LD_EXP 71
17126: PUSH
17127: LD_INT 1
17129: ARRAY
17130: PUSH
17131: LD_INT 3
17133: ARRAY
17134: PPUSH
17135: LD_EXP 71
17139: PUSH
17140: LD_INT 1
17142: ARRAY
17143: PUSH
17144: LD_INT 4
17146: ARRAY
17147: PPUSH
17148: CALL_OW 448
17152: IFFALSE 17219
// ComConstruct ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) ;
17154: LD_VAR 0 14
17158: PUSH
17159: LD_INT 1
17161: ARRAY
17162: PPUSH
17163: LD_EXP 71
17167: PUSH
17168: LD_INT 1
17170: ARRAY
17171: PUSH
17172: LD_INT 1
17174: ARRAY
17175: PPUSH
17176: LD_EXP 71
17180: PUSH
17181: LD_INT 1
17183: ARRAY
17184: PUSH
17185: LD_INT 2
17187: ARRAY
17188: PPUSH
17189: LD_EXP 71
17193: PUSH
17194: LD_INT 1
17196: ARRAY
17197: PUSH
17198: LD_INT 3
17200: ARRAY
17201: PPUSH
17202: LD_EXP 71
17206: PUSH
17207: LD_INT 1
17209: ARRAY
17210: PUSH
17211: LD_INT 4
17213: ARRAY
17214: PPUSH
17215: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea2 , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17219: LD_ADDR_VAR 0 2
17223: PUSH
17224: LD_EXP 67
17228: PPUSH
17229: LD_INT 21
17231: PUSH
17232: LD_INT 3
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 3
17241: PUSH
17242: LD_INT 57
17244: PUSH
17245: EMPTY
17246: LIST
17247: PUSH
17248: EMPTY
17249: LIST
17250: LIST
17251: PUSH
17252: LD_INT 3
17254: PUSH
17255: LD_INT 24
17257: PUSH
17258: LD_INT 1000
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: PUSH
17265: EMPTY
17266: LIST
17267: LIST
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: LIST
17273: PPUSH
17274: CALL_OW 70
17278: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea2 ) ;
17279: LD_ADDR_VAR 0 8
17283: PUSH
17284: LD_EXP 73
17288: PPUSH
17289: CALL_OW 435
17293: ST_TO_ADDR
// sci := UnitFilter ( ruForces2 , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
17294: LD_ADDR_VAR 0 9
17298: PUSH
17299: LD_EXP 60
17303: PPUSH
17304: LD_INT 25
17306: PUSH
17307: LD_INT 4
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: LD_INT 50
17316: PUSH
17317: EMPTY
17318: LIST
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PPUSH
17324: CALL_OW 72
17328: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea2 , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
17329: LD_ADDR_VAR 0 4
17333: PUSH
17334: LD_EXP 67
17338: PPUSH
17339: LD_INT 2
17341: PUSH
17342: LD_INT 30
17344: PUSH
17345: LD_INT 6
17347: PUSH
17348: EMPTY
17349: LIST
17350: LIST
17351: PUSH
17352: LD_INT 30
17354: PUSH
17355: LD_INT 7
17357: PUSH
17358: EMPTY
17359: LIST
17360: LIST
17361: PUSH
17362: LD_INT 30
17364: PUSH
17365: LD_INT 8
17367: PUSH
17368: EMPTY
17369: LIST
17370: LIST
17371: PUSH
17372: EMPTY
17373: LIST
17374: LIST
17375: LIST
17376: LIST
17377: PPUSH
17378: CALL_OW 70
17382: ST_TO_ADDR
// if sci then
17383: LD_VAR 0 9
17387: IFFALSE 17618
// begin hurtUnits := UnitFilter ( ruForces2 , [ [ f_inarea , ruBaseArea2 ] , [ f_tag , tHeal ] ] ) ;
17389: LD_ADDR_VAR 0 11
17393: PUSH
17394: LD_EXP 60
17398: PPUSH
17399: LD_INT 95
17401: PUSH
17402: LD_EXP 67
17406: PUSH
17407: EMPTY
17408: LIST
17409: LIST
17410: PUSH
17411: LD_INT 120
17413: PUSH
17414: LD_INT 1
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PPUSH
17425: CALL_OW 72
17429: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
17430: LD_ADDR_VAR 0 4
17434: PUSH
17435: LD_INT 22
17437: PUSH
17438: LD_INT 3
17440: PUSH
17441: EMPTY
17442: LIST
17443: LIST
17444: PUSH
17445: LD_INT 50
17447: PUSH
17448: EMPTY
17449: LIST
17450: PUSH
17451: LD_INT 2
17453: PUSH
17454: LD_INT 30
17456: PUSH
17457: LD_INT 6
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 30
17466: PUSH
17467: LD_INT 7
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 30
17476: PUSH
17477: LD_INT 8
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: PUSH
17484: EMPTY
17485: LIST
17486: LIST
17487: LIST
17488: LIST
17489: PUSH
17490: EMPTY
17491: LIST
17492: LIST
17493: LIST
17494: PPUSH
17495: CALL_OW 69
17499: ST_TO_ADDR
// if hurtUnits then
17500: LD_VAR 0 11
17504: IFFALSE 17565
// begin for i in sci do
17506: LD_ADDR_VAR 0 1
17510: PUSH
17511: LD_VAR 0 9
17515: PUSH
17516: FOR_IN
17517: IFFALSE 17561
// if IsInUnit ( i ) then
17519: LD_VAR 0 1
17523: PPUSH
17524: CALL_OW 310
17528: IFFALSE 17541
// ComExitBuilding ( i ) else
17530: LD_VAR 0 1
17534: PPUSH
17535: CALL_OW 122
17539: GO 17559
// ComHeal ( i , hurtUnits [ 1 ] ) ;
17541: LD_VAR 0 1
17545: PPUSH
17546: LD_VAR 0 11
17550: PUSH
17551: LD_INT 1
17553: ARRAY
17554: PPUSH
17555: CALL_OW 128
17559: GO 17516
17561: POP
17562: POP
// end else
17563: GO 17618
// if lab then
17565: LD_VAR 0 4
17569: IFFALSE 17618
// begin for i in sci do
17571: LD_ADDR_VAR 0 1
17575: PUSH
17576: LD_VAR 0 9
17580: PUSH
17581: FOR_IN
17582: IFFALSE 17616
// if not IsInUnit ( i ) then
17584: LD_VAR 0 1
17588: PPUSH
17589: CALL_OW 310
17593: NOT
17594: IFFALSE 17614
// ComEnterUnit ( i , lab [ 1 ] ) ;
17596: LD_VAR 0 1
17600: PPUSH
17601: LD_VAR 0 4
17605: PUSH
17606: LD_INT 1
17608: ARRAY
17609: PPUSH
17610: CALL_OW 120
17614: GO 17581
17616: POP
17617: POP
// end ; end ; eng := UnitFilter ( ruForces2 , [ f_class , 2 ] ) ;
17618: LD_ADDR_VAR 0 5
17622: PUSH
17623: LD_EXP 60
17627: PPUSH
17628: LD_INT 25
17630: PUSH
17631: LD_INT 2
17633: PUSH
17634: EMPTY
17635: LIST
17636: LIST
17637: PPUSH
17638: CALL_OW 72
17642: ST_TO_ADDR
// if eng then
17643: LD_VAR 0 5
17647: IFFALSE 18432
// begin for i in eng do
17649: LD_ADDR_VAR 0 1
17653: PUSH
17654: LD_VAR 0 5
17658: PUSH
17659: FOR_IN
17660: IFFALSE 18430
// begin tag := GetTag ( i ) ;
17662: LD_ADDR_VAR 0 6
17666: PUSH
17667: LD_VAR 0 1
17671: PPUSH
17672: CALL_OW 110
17676: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
17677: LD_VAR 0 1
17681: PPUSH
17682: CALL_OW 256
17686: PUSH
17687: LD_INT 800
17689: LESS
17690: PUSH
17691: LD_VAR 0 6
17695: PUSH
17696: LD_INT 1
17698: NONEQUAL
17699: AND
17700: IFFALSE 17750
// begin SetTag ( i , tHeal ) ;
17702: LD_VAR 0 1
17706: PPUSH
17707: LD_INT 1
17709: PPUSH
17710: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
17714: LD_VAR 0 1
17718: PPUSH
17719: LD_EXP 75
17723: PUSH
17724: LD_INT 1
17726: ARRAY
17727: PPUSH
17728: LD_EXP 75
17732: PUSH
17733: LD_INT 2
17735: ARRAY
17736: PPUSH
17737: CALL_OW 111
// AddComHold ( i ) ;
17741: LD_VAR 0 1
17745: PPUSH
17746: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
17750: LD_VAR 0 6
17754: PUSH
17755: LD_INT 1
17757: EQUAL
17758: PUSH
17759: LD_VAR 0 1
17763: PPUSH
17764: CALL_OW 256
17768: PUSH
17769: LD_INT 1000
17771: EQUAL
17772: AND
17773: IFFALSE 17787
// SetTag ( i , 0 ) ;
17775: LD_VAR 0 1
17779: PPUSH
17780: LD_INT 0
17782: PPUSH
17783: CALL_OW 109
// if not tag then
17787: LD_VAR 0 6
17791: NOT
17792: IFFALSE 17964
// begin undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
17794: LD_ADDR_VAR 0 3
17798: PUSH
17799: LD_EXP 67
17803: PPUSH
17804: LD_INT 57
17806: PUSH
17807: EMPTY
17808: LIST
17809: PPUSH
17810: CALL_OW 70
17814: ST_TO_ADDR
// if undone then
17815: LD_VAR 0 3
17819: IFFALSE 17841
// begin ComComplete ( i , undone [ 1 ] ) ;
17821: LD_VAR 0 1
17825: PPUSH
17826: LD_VAR 0 3
17830: PUSH
17831: LD_INT 1
17833: ARRAY
17834: PPUSH
17835: CALL 62707 0 2
// continue ;
17839: GO 17659
// end ; if cr or tmp or Count ( ruBuildings2 ) then
17841: LD_VAR 0 8
17845: PUSH
17846: LD_VAR 0 2
17850: OR
17851: PUSH
17852: LD_EXP 77
17856: PPUSH
17857: CALL 56609 0 1
17861: OR
17862: IFFALSE 17938
// begin if IsInUnit ( i ) then
17864: LD_VAR 0 1
17868: PPUSH
17869: CALL_OW 310
17873: IFFALSE 17884
// ComExitBuilding ( i ) ;
17875: LD_VAR 0 1
17879: PPUSH
17880: CALL_OW 122
// if tmp then
17884: LD_VAR 0 2
17888: IFFALSE 17904
// SetTag ( i , tRepair ) else
17890: LD_VAR 0 1
17894: PPUSH
17895: LD_INT 3
17897: PPUSH
17898: CALL_OW 109
17902: GO 17936
// if cr then
17904: LD_VAR 0 8
17908: IFFALSE 17924
// SetTag ( i , tCrates ) else
17910: LD_VAR 0 1
17914: PPUSH
17915: LD_INT 2
17917: PPUSH
17918: CALL_OW 109
17922: GO 17936
// SetTag ( i , tBuild ) ;
17924: LD_VAR 0 1
17928: PPUSH
17929: LD_INT 5
17931: PPUSH
17932: CALL_OW 109
// end else
17936: GO 17964
// if not IsInUnit ( i ) then
17938: LD_VAR 0 1
17942: PPUSH
17943: CALL_OW 310
17947: NOT
17948: IFFALSE 17964
// ComEnterUnit ( i , ruBase2 ) ;
17950: LD_VAR 0 1
17954: PPUSH
17955: LD_EXP 69
17959: PPUSH
17960: CALL_OW 120
// end ; if tag = tRepair then
17964: LD_VAR 0 6
17968: PUSH
17969: LD_INT 3
17971: EQUAL
17972: IFFALSE 18078
// begin if IsInUnit ( i ) then
17974: LD_VAR 0 1
17978: PPUSH
17979: CALL_OW 310
17983: IFFALSE 17996
// begin ComExitBuilding ( i ) ;
17985: LD_VAR 0 1
17989: PPUSH
17990: CALL_OW 122
// continue ;
17994: GO 17659
// end ; if not tmp then
17996: LD_VAR 0 2
18000: NOT
18001: IFFALSE 18017
// begin SetTag ( i , 0 ) ;
18003: LD_VAR 0 1
18007: PPUSH
18008: LD_INT 0
18010: PPUSH
18011: CALL_OW 109
// continue ;
18015: GO 17659
// end ; if not HasTask ( i ) then
18017: LD_VAR 0 1
18021: PPUSH
18022: CALL_OW 314
18026: NOT
18027: IFFALSE 18047
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
18029: LD_VAR 0 1
18033: PPUSH
18034: LD_VAR 0 2
18038: PUSH
18039: LD_INT 1
18041: ARRAY
18042: PPUSH
18043: CALL_OW 130
// if not IsInArea ( i , ruBaseArea2 ) then
18047: LD_VAR 0 1
18051: PPUSH
18052: LD_EXP 67
18056: PPUSH
18057: CALL_OW 308
18061: NOT
18062: IFFALSE 18078
// ComMoveToArea ( i , ruBaseArea2 ) ;
18064: LD_VAR 0 1
18068: PPUSH
18069: LD_EXP 67
18073: PPUSH
18074: CALL_OW 113
// end ; if tag = tBuild then
18078: LD_VAR 0 6
18082: PUSH
18083: LD_INT 5
18085: EQUAL
18086: IFFALSE 18285
// begin if IsInUnit ( i ) then
18088: LD_VAR 0 1
18092: PPUSH
18093: CALL_OW 310
18097: IFFALSE 18110
// begin ComExitBuilding ( i ) ;
18099: LD_VAR 0 1
18103: PPUSH
18104: CALL_OW 122
// continue ;
18108: GO 17659
// end ; if not Count ( ruBuildings2 ) then
18110: LD_EXP 77
18114: PPUSH
18115: CALL 56609 0 1
18119: NOT
18120: IFFALSE 18138
// begin SetTag ( i , 0 ) ;
18122: LD_VAR 0 1
18126: PPUSH
18127: LD_INT 0
18129: PPUSH
18130: CALL_OW 109
// continue ;
18134: GO 17659
// end else
18136: GO 18177
// if not CanBeBuiltOnlyResources ( ruBase2 , ruBuildings2 [ 1 ] [ 1 ] ) then
18138: LD_EXP 69
18142: PPUSH
18143: LD_EXP 77
18147: PUSH
18148: LD_INT 1
18150: ARRAY
18151: PUSH
18152: LD_INT 1
18154: ARRAY
18155: PPUSH
18156: CALL 25338 0 2
18160: NOT
18161: IFFALSE 18177
// begin SetTag ( i , 0 ) ;
18163: LD_VAR 0 1
18167: PPUSH
18168: LD_INT 0
18170: PPUSH
18171: CALL_OW 109
// continue ;
18175: GO 17659
// end ; undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
18177: LD_ADDR_VAR 0 3
18181: PUSH
18182: LD_EXP 67
18186: PPUSH
18187: LD_INT 57
18189: PUSH
18190: EMPTY
18191: LIST
18192: PPUSH
18193: CALL_OW 70
18197: ST_TO_ADDR
// if undone then
18198: LD_VAR 0 3
18202: IFFALSE 18224
// begin ComComplete ( i , undone [ 1 ] ) ;
18204: LD_VAR 0 1
18208: PPUSH
18209: LD_VAR 0 3
18213: PUSH
18214: LD_INT 1
18216: ARRAY
18217: PPUSH
18218: CALL 62707 0 2
// continue ;
18222: GO 17659
// end ; ComBuild ( i , ruBuildings2 [ 1 ] [ 1 ] , ruBuildings2 [ 1 ] [ 2 ] , ruBuildings2 [ 1 ] [ 3 ] , ruBuildings2 [ 1 ] [ 4 ] ) ;
18224: LD_VAR 0 1
18228: PPUSH
18229: LD_EXP 77
18233: PUSH
18234: LD_INT 1
18236: ARRAY
18237: PUSH
18238: LD_INT 1
18240: ARRAY
18241: PPUSH
18242: LD_EXP 77
18246: PUSH
18247: LD_INT 1
18249: ARRAY
18250: PUSH
18251: LD_INT 2
18253: ARRAY
18254: PPUSH
18255: LD_EXP 77
18259: PUSH
18260: LD_INT 1
18262: ARRAY
18263: PUSH
18264: LD_INT 3
18266: ARRAY
18267: PPUSH
18268: LD_EXP 77
18272: PUSH
18273: LD_INT 1
18275: ARRAY
18276: PUSH
18277: LD_INT 4
18279: ARRAY
18280: PPUSH
18281: CALL_OW 145
// end ; if tag = tCrates then
18285: LD_VAR 0 6
18289: PUSH
18290: LD_INT 2
18292: EQUAL
18293: IFFALSE 18428
// begin if IsInUnit ( i ) then
18295: LD_VAR 0 1
18299: PPUSH
18300: CALL_OW 310
18304: IFFALSE 18317
// begin ComExitBuilding ( i ) ;
18306: LD_VAR 0 1
18310: PPUSH
18311: CALL_OW 122
// continue ;
18315: GO 17659
// end ; if not cr then
18317: LD_VAR 0 8
18321: NOT
18322: IFFALSE 18338
// begin SetTag ( i , 0 ) ;
18324: LD_VAR 0 1
18328: PPUSH
18329: LD_INT 0
18331: PPUSH
18332: CALL_OW 109
// continue ;
18336: GO 17659
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
18338: LD_VAR 0 1
18342: PPUSH
18343: CALL_OW 314
18347: NOT
18348: PUSH
18349: LD_INT 81
18351: PUSH
18352: LD_INT 3
18354: PUSH
18355: EMPTY
18356: LIST
18357: LIST
18358: PUSH
18359: LD_INT 92
18361: PUSH
18362: LD_VAR 0 8
18366: PUSH
18367: LD_INT 1
18369: ARRAY
18370: PUSH
18371: LD_VAR 0 8
18375: PUSH
18376: LD_INT 2
18378: ARRAY
18379: PUSH
18380: LD_INT 12
18382: PUSH
18383: EMPTY
18384: LIST
18385: LIST
18386: LIST
18387: LIST
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: PPUSH
18393: CALL_OW 69
18397: NOT
18398: AND
18399: IFFALSE 18428
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
18401: LD_VAR 0 1
18405: PPUSH
18406: LD_VAR 0 8
18410: PUSH
18411: LD_INT 1
18413: ARRAY
18414: PPUSH
18415: LD_VAR 0 8
18419: PUSH
18420: LD_INT 2
18422: ARRAY
18423: PPUSH
18424: CALL_OW 117
// end ; end ;
18428: GO 17659
18430: POP
18431: POP
// end ; sol := UnitFilter ( ruForces2 , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander2 ;
18432: LD_ADDR_VAR 0 10
18436: PUSH
18437: LD_EXP 60
18441: PPUSH
18442: LD_INT 2
18444: PUSH
18445: LD_INT 25
18447: PUSH
18448: LD_INT 1
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PUSH
18455: LD_INT 25
18457: PUSH
18458: LD_INT 9
18460: PUSH
18461: EMPTY
18462: LIST
18463: LIST
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: LIST
18469: PUSH
18470: LD_INT 50
18472: PUSH
18473: EMPTY
18474: LIST
18475: PUSH
18476: EMPTY
18477: LIST
18478: LIST
18479: PPUSH
18480: CALL_OW 72
18484: PUSH
18485: LD_EXP 62
18489: UNION
18490: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
18491: LD_ADDR_VAR 0 12
18495: PUSH
18496: LD_EXP 67
18500: PPUSH
18501: LD_INT 81
18503: PUSH
18504: LD_INT 3
18506: PUSH
18507: EMPTY
18508: LIST
18509: LIST
18510: PPUSH
18511: CALL_OW 70
18515: ST_TO_ADDR
// if sol then
18516: LD_VAR 0 10
18520: IFFALSE 19044
// begin if enemyInBase then
18522: LD_VAR 0 12
18526: IFFALSE 18669
// begin for i in sol do
18528: LD_ADDR_VAR 0 1
18532: PUSH
18533: LD_VAR 0 10
18537: PUSH
18538: FOR_IN
18539: IFFALSE 18665
// begin tw := IsInUnit ( i ) ;
18541: LD_ADDR_VAR 0 7
18545: PUSH
18546: LD_VAR 0 1
18550: PPUSH
18551: CALL_OW 310
18555: ST_TO_ADDR
// if tw then
18556: LD_VAR 0 7
18560: IFFALSE 18639
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
18562: LD_VAR 0 7
18566: PUSH
18567: LD_INT 22
18569: PUSH
18570: LD_INT 3
18572: PUSH
18573: EMPTY
18574: LIST
18575: LIST
18576: PUSH
18577: LD_INT 101
18579: PUSH
18580: LD_INT 1
18582: PUSH
18583: EMPTY
18584: LIST
18585: LIST
18586: PUSH
18587: LD_INT 2
18589: PUSH
18590: LD_INT 30
18592: PUSH
18593: LD_INT 32
18595: PUSH
18596: EMPTY
18597: LIST
18598: LIST
18599: PUSH
18600: LD_INT 30
18602: PUSH
18603: LD_INT 31
18605: PUSH
18606: EMPTY
18607: LIST
18608: LIST
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: LIST
18614: PUSH
18615: EMPTY
18616: LIST
18617: LIST
18618: LIST
18619: PPUSH
18620: CALL_OW 69
18624: IN
18625: NOT
18626: IFFALSE 18637
// ComExitBuilding ( i ) ;
18628: LD_VAR 0 1
18632: PPUSH
18633: CALL_OW 122
// end else
18637: GO 18663
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
18639: LD_VAR 0 1
18643: PPUSH
18644: LD_VAR 0 12
18648: PPUSH
18649: LD_VAR 0 1
18653: PPUSH
18654: CALL_OW 74
18658: PPUSH
18659: CALL_OW 115
// end ;
18663: GO 18538
18665: POP
18666: POP
// end else
18667: GO 19044
// begin empty := FilterUnitsInArea ( ruBaseArea2 , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
18669: LD_ADDR_VAR 0 13
18673: PUSH
18674: LD_EXP 67
18678: PPUSH
18679: LD_INT 3
18681: PUSH
18682: LD_INT 62
18684: PUSH
18685: EMPTY
18686: LIST
18687: PUSH
18688: EMPTY
18689: LIST
18690: LIST
18691: PUSH
18692: LD_INT 2
18694: PUSH
18695: LD_INT 30
18697: PUSH
18698: LD_INT 32
18700: PUSH
18701: EMPTY
18702: LIST
18703: LIST
18704: PUSH
18705: LD_INT 30
18707: PUSH
18708: LD_INT 4
18710: PUSH
18711: EMPTY
18712: LIST
18713: LIST
18714: PUSH
18715: LD_INT 30
18717: PUSH
18718: LD_INT 5
18720: PUSH
18721: EMPTY
18722: LIST
18723: LIST
18724: PUSH
18725: LD_INT 30
18727: PUSH
18728: LD_INT 31
18730: PUSH
18731: EMPTY
18732: LIST
18733: LIST
18734: PUSH
18735: EMPTY
18736: LIST
18737: LIST
18738: LIST
18739: LIST
18740: LIST
18741: PUSH
18742: EMPTY
18743: LIST
18744: LIST
18745: PPUSH
18746: CALL_OW 70
18750: ST_TO_ADDR
// if empty then
18751: LD_VAR 0 13
18755: IFFALSE 18772
// empty := ReverseArray ( empty ) ;
18757: LD_ADDR_VAR 0 13
18761: PUSH
18762: LD_VAR 0 13
18766: PPUSH
18767: CALL 87485 0 1
18771: ST_TO_ADDR
// for i in sol do
18772: LD_ADDR_VAR 0 1
18776: PUSH
18777: LD_VAR 0 10
18781: PUSH
18782: FOR_IN
18783: IFFALSE 19042
// begin tag := GetTag ( i ) ;
18785: LD_ADDR_VAR 0 6
18789: PUSH
18790: LD_VAR 0 1
18794: PPUSH
18795: CALL_OW 110
18799: ST_TO_ADDR
// if tag = tMech then
18800: LD_VAR 0 6
18804: PUSH
18805: LD_INT 7
18807: EQUAL
18808: IFFALSE 18812
// continue ;
18810: GO 18782
// if GetLives ( i ) < 1000 and tag <> tHeal then
18812: LD_VAR 0 1
18816: PPUSH
18817: CALL_OW 256
18821: PUSH
18822: LD_INT 1000
18824: LESS
18825: PUSH
18826: LD_VAR 0 6
18830: PUSH
18831: LD_INT 1
18833: NONEQUAL
18834: AND
18835: IFFALSE 18887
// begin SetTag ( i , tHeal ) ;
18837: LD_VAR 0 1
18841: PPUSH
18842: LD_INT 1
18844: PPUSH
18845: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
18849: LD_VAR 0 1
18853: PPUSH
18854: LD_EXP 75
18858: PUSH
18859: LD_INT 1
18861: ARRAY
18862: PPUSH
18863: LD_EXP 75
18867: PUSH
18868: LD_INT 2
18870: ARRAY
18871: PPUSH
18872: CALL_OW 111
// AddComHold ( i ) ;
18876: LD_VAR 0 1
18880: PPUSH
18881: CALL_OW 200
// continue ;
18885: GO 18782
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
18887: LD_VAR 0 1
18891: PPUSH
18892: CALL_OW 256
18896: PUSH
18897: LD_INT 1000
18899: EQUAL
18900: PUSH
18901: LD_VAR 0 6
18905: PUSH
18906: LD_INT 1
18908: EQUAL
18909: AND
18910: IFFALSE 18926
// begin SetTag ( i , 0 ) ;
18912: LD_VAR 0 1
18916: PPUSH
18917: LD_INT 0
18919: PPUSH
18920: CALL_OW 109
// continue ;
18924: GO 18782
// end ; if HasTask ( i ) then
18926: LD_VAR 0 1
18930: PPUSH
18931: CALL_OW 314
18935: IFFALSE 18939
// continue ;
18937: GO 18782
// if not IsInUnit ( i ) and not tag and empty then
18939: LD_VAR 0 1
18943: PPUSH
18944: CALL_OW 310
18948: NOT
18949: PUSH
18950: LD_VAR 0 6
18954: NOT
18955: AND
18956: PUSH
18957: LD_VAR 0 13
18961: AND
18962: IFFALSE 19040
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
18964: LD_VAR 0 1
18968: PPUSH
18969: LD_VAR 0 13
18973: PUSH
18974: LD_INT 1
18976: ARRAY
18977: PPUSH
18978: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
18982: LD_VAR 0 13
18986: PUSH
18987: LD_INT 1
18989: ARRAY
18990: PPUSH
18991: CALL_OW 266
18995: PUSH
18996: LD_INT 5
18998: EQUAL
18999: PUSH
19000: LD_INT 50
19002: PPUSH
19003: CALL_OW 13
19007: AND
19008: IFFALSE 19022
// AddComChangeProfession ( i , class_bazooker ) ;
19010: LD_VAR 0 1
19014: PPUSH
19015: LD_INT 9
19017: PPUSH
19018: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
19022: LD_ADDR_VAR 0 13
19026: PUSH
19027: LD_VAR 0 13
19031: PPUSH
19032: LD_INT 1
19034: PPUSH
19035: CALL_OW 3
19039: ST_TO_ADDR
// end ; end ;
19040: GO 18782
19042: POP
19043: POP
// end ; end ; end ;
19044: PPOPN 16
19046: END
// every 0 0$1 trigger ruTanks and ruActiveAttacks do var i , mech , enemy ;
19047: LD_EXP 79
19051: PUSH
19052: LD_EXP 22
19056: AND
19057: IFFALSE 19624
19059: GO 19061
19061: DISABLE
19062: LD_INT 0
19064: PPUSH
19065: PPUSH
19066: PPUSH
// begin enable ;
19067: ENABLE
// if not ruTanks then
19068: LD_EXP 79
19072: NOT
19073: IFFALSE 19077
// exit ;
19075: GO 19624
// for i in ruTanks do
19077: LD_ADDR_VAR 0 1
19081: PUSH
19082: LD_EXP 79
19086: PUSH
19087: FOR_IN
19088: IFFALSE 19622
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19090: LD_VAR 0 1
19094: PPUSH
19095: CALL_OW 302
19099: NOT
19100: PUSH
19101: LD_VAR 0 1
19105: PPUSH
19106: CALL_OW 255
19110: PUSH
19111: LD_INT 3
19113: NONEQUAL
19114: OR
19115: IFFALSE 19135
// begin ruTanks := ruTanks diff i ;
19117: LD_ADDR_EXP 79
19121: PUSH
19122: LD_EXP 79
19126: PUSH
19127: LD_VAR 0 1
19131: DIFF
19132: ST_TO_ADDR
// continue ;
19133: GO 19087
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19135: LD_VAR 0 1
19139: PPUSH
19140: CALL_OW 110
19144: NOT
19145: PUSH
19146: LD_VAR 0 1
19150: PPUSH
19151: CALL_OW 110
19155: PUSH
19156: LD_INT 0
19158: EQUAL
19159: OR
19160: IFFALSE 19333
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase ) then
19162: LD_VAR 0 1
19166: PPUSH
19167: CALL_OW 262
19171: PUSH
19172: LD_INT 1
19174: EQUAL
19175: PUSH
19176: LD_VAR 0 1
19180: PPUSH
19181: CALL_OW 261
19185: PUSH
19186: LD_INT 50
19188: LESS
19189: AND
19190: PUSH
19191: LD_EXP 68
19195: PPUSH
19196: CALL_OW 302
19200: AND
19201: IFFALSE 19288
// begin ComMoveXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) ;
19203: LD_VAR 0 1
19207: PPUSH
19208: LD_EXP 68
19212: PPUSH
19213: CALL_OW 250
19217: PPUSH
19218: LD_EXP 68
19222: PPUSH
19223: CALL_OW 251
19227: PPUSH
19228: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19232: LD_INT 35
19234: PPUSH
19235: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) < 6 ;
19239: LD_VAR 0 1
19243: PPUSH
19244: LD_EXP 68
19248: PPUSH
19249: CALL_OW 250
19253: PPUSH
19254: LD_EXP 68
19258: PPUSH
19259: CALL_OW 251
19263: PPUSH
19264: CALL_OW 297
19268: PUSH
19269: LD_INT 6
19271: LESS
19272: IFFALSE 19232
// SetFuel ( i , 100 ) ;
19274: LD_VAR 0 1
19278: PPUSH
19279: LD_INT 100
19281: PPUSH
19282: CALL_OW 240
// end else
19286: GO 19333
// if not IsInArea ( i , ruParkingArea ) then
19288: LD_VAR 0 1
19292: PPUSH
19293: LD_EXP 82
19297: PPUSH
19298: CALL_OW 308
19302: NOT
19303: IFFALSE 19321
// ComMoveToArea ( i , ruParkingArea ) else
19305: LD_VAR 0 1
19309: PPUSH
19310: LD_EXP 82
19314: PPUSH
19315: CALL_OW 113
19319: GO 19333
// SetTag ( i , tParking ) ;
19321: LD_VAR 0 1
19325: PPUSH
19326: LD_INT 12
19328: PPUSH
19329: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19333: LD_VAR 0 1
19337: PPUSH
19338: CALL_OW 110
19342: PUSH
19343: LD_INT 12
19345: EQUAL
19346: IFFALSE 19476
// begin if GetLives ( i ) < 650 then
19348: LD_VAR 0 1
19352: PPUSH
19353: CALL_OW 256
19357: PUSH
19358: LD_INT 650
19360: LESS
19361: IFFALSE 19453
// begin if not IsDrivenBy ( i ) then
19363: LD_VAR 0 1
19367: PPUSH
19368: CALL_OW 311
19372: NOT
19373: IFFALSE 19377
// continue ;
19375: GO 19087
// mech := IsDrivenBy ( i ) ;
19377: LD_ADDR_VAR 0 2
19381: PUSH
19382: LD_VAR 0 1
19386: PPUSH
19387: CALL_OW 311
19391: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19392: LD_VAR 0 2
19396: PPUSH
19397: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19401: LD_VAR 0 2
19405: PPUSH
19406: LD_VAR 0 1
19410: PPUSH
19411: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19415: LD_INT 35
19417: PPUSH
19418: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19422: LD_VAR 0 1
19426: PPUSH
19427: CALL_OW 256
19431: PUSH
19432: LD_INT 1000
19434: EQUAL
19435: IFFALSE 19415
// ComEnterUnit ( mech , i ) ;
19437: LD_VAR 0 2
19441: PPUSH
19442: LD_VAR 0 1
19446: PPUSH
19447: CALL_OW 120
// end else
19451: GO 19476
// if IsDrivenBy ( i ) then
19453: LD_VAR 0 1
19457: PPUSH
19458: CALL_OW 311
19462: IFFALSE 19476
// SetTag ( i , tAttack ) ;
19464: LD_VAR 0 1
19468: PPUSH
19469: LD_INT 13
19471: PPUSH
19472: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
19476: LD_VAR 0 1
19480: PPUSH
19481: CALL_OW 110
19485: PUSH
19486: LD_INT 13
19488: EQUAL
19489: IFFALSE 19620
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
19491: LD_ADDR_VAR 0 3
19495: PUSH
19496: LD_EXP 66
19500: PPUSH
19501: LD_INT 81
19503: PUSH
19504: LD_INT 3
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: PPUSH
19511: CALL_OW 70
19515: ST_TO_ADDR
// if GetLives ( i ) < 650 then
19516: LD_VAR 0 1
19520: PPUSH
19521: CALL_OW 256
19525: PUSH
19526: LD_INT 650
19528: LESS
19529: IFFALSE 19554
// begin ComStop ( i ) ;
19531: LD_VAR 0 1
19535: PPUSH
19536: CALL_OW 141
// SetTag ( i , 0 ) ;
19540: LD_VAR 0 1
19544: PPUSH
19545: LD_INT 0
19547: PPUSH
19548: CALL_OW 109
// continue ;
19552: GO 19087
// end ; if enemy then
19554: LD_VAR 0 3
19558: IFFALSE 19598
// begin if not HasTask ( i ) then
19560: LD_VAR 0 1
19564: PPUSH
19565: CALL_OW 314
19569: NOT
19570: IFFALSE 19596
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
19572: LD_VAR 0 1
19576: PPUSH
19577: LD_VAR 0 3
19581: PPUSH
19582: LD_VAR 0 1
19586: PPUSH
19587: CALL_OW 74
19591: PPUSH
19592: CALL_OW 115
// end else
19596: GO 19620
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
19598: LD_VAR 0 1
19602: PPUSH
19603: LD_INT 105
19605: PUSH
19606: LD_INT 35
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PUSH
19613: EMPTY
19614: LIST
19615: PPUSH
19616: CALL 94813 0 2
// end ; end ;
19620: GO 19087
19622: POP
19623: POP
// end ;
19624: PPOPN 3
19626: END
// every 0 0$1 trigger ruTanks2 and ruActiveAttacks do var i , mech , enemy ;
19627: LD_EXP 80
19631: PUSH
19632: LD_EXP 22
19636: AND
19637: IFFALSE 20204
19639: GO 19641
19641: DISABLE
19642: LD_INT 0
19644: PPUSH
19645: PPUSH
19646: PPUSH
// begin enable ;
19647: ENABLE
// if not ruTanks2 then
19648: LD_EXP 80
19652: NOT
19653: IFFALSE 19657
// exit ;
19655: GO 20204
// for i in ruTanks2 do
19657: LD_ADDR_VAR 0 1
19661: PUSH
19662: LD_EXP 80
19666: PUSH
19667: FOR_IN
19668: IFFALSE 20202
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19670: LD_VAR 0 1
19674: PPUSH
19675: CALL_OW 302
19679: NOT
19680: PUSH
19681: LD_VAR 0 1
19685: PPUSH
19686: CALL_OW 255
19690: PUSH
19691: LD_INT 3
19693: NONEQUAL
19694: OR
19695: IFFALSE 19715
// begin ruTanks := ruTanks diff i ;
19697: LD_ADDR_EXP 79
19701: PUSH
19702: LD_EXP 79
19706: PUSH
19707: LD_VAR 0 1
19711: DIFF
19712: ST_TO_ADDR
// continue ;
19713: GO 19667
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19715: LD_VAR 0 1
19719: PPUSH
19720: CALL_OW 110
19724: NOT
19725: PUSH
19726: LD_VAR 0 1
19730: PPUSH
19731: CALL_OW 110
19735: PUSH
19736: LD_INT 0
19738: EQUAL
19739: OR
19740: IFFALSE 19913
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase2 ) then
19742: LD_VAR 0 1
19746: PPUSH
19747: CALL_OW 262
19751: PUSH
19752: LD_INT 1
19754: EQUAL
19755: PUSH
19756: LD_VAR 0 1
19760: PPUSH
19761: CALL_OW 261
19765: PUSH
19766: LD_INT 50
19768: LESS
19769: AND
19770: PUSH
19771: LD_EXP 69
19775: PPUSH
19776: CALL_OW 302
19780: AND
19781: IFFALSE 19868
// begin ComMoveXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) ;
19783: LD_VAR 0 1
19787: PPUSH
19788: LD_EXP 69
19792: PPUSH
19793: CALL_OW 250
19797: PPUSH
19798: LD_EXP 69
19802: PPUSH
19803: CALL_OW 251
19807: PPUSH
19808: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19812: LD_INT 35
19814: PPUSH
19815: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) < 6 ;
19819: LD_VAR 0 1
19823: PPUSH
19824: LD_EXP 69
19828: PPUSH
19829: CALL_OW 250
19833: PPUSH
19834: LD_EXP 69
19838: PPUSH
19839: CALL_OW 251
19843: PPUSH
19844: CALL_OW 297
19848: PUSH
19849: LD_INT 6
19851: LESS
19852: IFFALSE 19812
// SetFuel ( i , 100 ) ;
19854: LD_VAR 0 1
19858: PPUSH
19859: LD_INT 100
19861: PPUSH
19862: CALL_OW 240
// end else
19866: GO 19913
// if not IsInArea ( i , ruParkingArea2 ) then
19868: LD_VAR 0 1
19872: PPUSH
19873: LD_EXP 83
19877: PPUSH
19878: CALL_OW 308
19882: NOT
19883: IFFALSE 19901
// ComMoveToArea ( i , ruParkingArea2 ) else
19885: LD_VAR 0 1
19889: PPUSH
19890: LD_EXP 83
19894: PPUSH
19895: CALL_OW 113
19899: GO 19913
// SetTag ( i , tParking ) ;
19901: LD_VAR 0 1
19905: PPUSH
19906: LD_INT 12
19908: PPUSH
19909: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19913: LD_VAR 0 1
19917: PPUSH
19918: CALL_OW 110
19922: PUSH
19923: LD_INT 12
19925: EQUAL
19926: IFFALSE 20056
// begin if GetLives ( i ) < 650 then
19928: LD_VAR 0 1
19932: PPUSH
19933: CALL_OW 256
19937: PUSH
19938: LD_INT 650
19940: LESS
19941: IFFALSE 20033
// begin if not IsDrivenBy ( i ) then
19943: LD_VAR 0 1
19947: PPUSH
19948: CALL_OW 311
19952: NOT
19953: IFFALSE 19957
// continue ;
19955: GO 19667
// mech := IsDrivenBy ( i ) ;
19957: LD_ADDR_VAR 0 2
19961: PUSH
19962: LD_VAR 0 1
19966: PPUSH
19967: CALL_OW 311
19971: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19972: LD_VAR 0 2
19976: PPUSH
19977: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19981: LD_VAR 0 2
19985: PPUSH
19986: LD_VAR 0 1
19990: PPUSH
19991: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19995: LD_INT 35
19997: PPUSH
19998: CALL_OW 67
// until GetLives ( i ) = 1000 ;
20002: LD_VAR 0 1
20006: PPUSH
20007: CALL_OW 256
20011: PUSH
20012: LD_INT 1000
20014: EQUAL
20015: IFFALSE 19995
// ComEnterUnit ( mech , i ) ;
20017: LD_VAR 0 2
20021: PPUSH
20022: LD_VAR 0 1
20026: PPUSH
20027: CALL_OW 120
// end else
20031: GO 20056
// if IsDrivenBy ( i ) then
20033: LD_VAR 0 1
20037: PPUSH
20038: CALL_OW 311
20042: IFFALSE 20056
// SetTag ( i , tAttack ) ;
20044: LD_VAR 0 1
20048: PPUSH
20049: LD_INT 13
20051: PPUSH
20052: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
20056: LD_VAR 0 1
20060: PPUSH
20061: CALL_OW 110
20065: PUSH
20066: LD_INT 13
20068: EQUAL
20069: IFFALSE 20200
// begin enemy := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
20071: LD_ADDR_VAR 0 3
20075: PUSH
20076: LD_EXP 67
20080: PPUSH
20081: LD_INT 81
20083: PUSH
20084: LD_INT 3
20086: PUSH
20087: EMPTY
20088: LIST
20089: LIST
20090: PPUSH
20091: CALL_OW 70
20095: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20096: LD_VAR 0 1
20100: PPUSH
20101: CALL_OW 256
20105: PUSH
20106: LD_INT 650
20108: LESS
20109: IFFALSE 20134
// begin ComStop ( i ) ;
20111: LD_VAR 0 1
20115: PPUSH
20116: CALL_OW 141
// SetTag ( i , 0 ) ;
20120: LD_VAR 0 1
20124: PPUSH
20125: LD_INT 0
20127: PPUSH
20128: CALL_OW 109
// continue ;
20132: GO 19667
// end ; if enemy then
20134: LD_VAR 0 3
20138: IFFALSE 20178
// begin if not HasTask ( i ) then
20140: LD_VAR 0 1
20144: PPUSH
20145: CALL_OW 314
20149: NOT
20150: IFFALSE 20176
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20152: LD_VAR 0 1
20156: PPUSH
20157: LD_VAR 0 3
20161: PPUSH
20162: LD_VAR 0 1
20166: PPUSH
20167: CALL_OW 74
20171: PPUSH
20172: CALL_OW 115
// end else
20176: GO 20200
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20178: LD_VAR 0 1
20182: PPUSH
20183: LD_INT 105
20185: PUSH
20186: LD_INT 35
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: EMPTY
20194: LIST
20195: PPUSH
20196: CALL 94813 0 2
// end ; end ;
20200: GO 19667
20202: POP
20203: POP
// end ;
20204: PPOPN 3
20206: END
// every 5 5$00 trigger Count ( ruExtraTanks ) do
20207: LD_EXP 81
20211: PPUSH
20212: CALL 56609 0 1
20216: IFFALSE 20229
20218: GO 20220
20220: DISABLE
// begin enable ;
20221: ENABLE
// RaiseSailEvent ( EExtraAttack ) ;
20222: LD_INT 106
20224: PPUSH
20225: CALL_OW 427
// end ;
20229: END
// export function RussianExtraAttack ; var i , tmp ; begin
20230: LD_INT 0
20232: PPUSH
20233: PPUSH
20234: PPUSH
// tmp := UnitFilter ( ruExtraTanks , [ f_ok ] ) ;
20235: LD_ADDR_VAR 0 3
20239: PUSH
20240: LD_EXP 81
20244: PPUSH
20245: LD_INT 50
20247: PUSH
20248: EMPTY
20249: LIST
20250: PPUSH
20251: CALL_OW 72
20255: ST_TO_ADDR
// ruExtraTanks := ruExtraTanks diff tmp ;
20256: LD_ADDR_EXP 81
20260: PUSH
20261: LD_EXP 81
20265: PUSH
20266: LD_VAR 0 3
20270: DIFF
20271: ST_TO_ADDR
// ComAgressiveMove ( tmp , 105 , 35 ) ;
20272: LD_VAR 0 3
20276: PPUSH
20277: LD_INT 105
20279: PPUSH
20280: LD_INT 35
20282: PPUSH
20283: CALL_OW 114
// wait ( 0 0$5 ) ;
20287: LD_INT 175
20289: PPUSH
20290: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20294: LD_INT 35
20296: PPUSH
20297: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20301: LD_ADDR_VAR 0 3
20305: PUSH
20306: LD_VAR 0 3
20310: PPUSH
20311: LD_INT 50
20313: PUSH
20314: EMPTY
20315: LIST
20316: PPUSH
20317: CALL_OW 72
20321: ST_TO_ADDR
// for i in tmp do
20322: LD_ADDR_VAR 0 2
20326: PUSH
20327: LD_VAR 0 3
20331: PUSH
20332: FOR_IN
20333: IFFALSE 20359
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20335: LD_VAR 0 2
20339: PPUSH
20340: LD_INT 105
20342: PUSH
20343: LD_INT 35
20345: PUSH
20346: EMPTY
20347: LIST
20348: LIST
20349: PUSH
20350: EMPTY
20351: LIST
20352: PPUSH
20353: CALL 94813 0 2
20357: GO 20332
20359: POP
20360: POP
// until not tmp ;
20361: LD_VAR 0 3
20365: NOT
20366: IFFALSE 20294
// end ;
20368: LD_VAR 0 1
20372: RET
// export function PrepareRussianAttack ( strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
20373: LD_INT 0
20375: PPUSH
20376: PPUSH
20377: PPUSH
20378: PPUSH
20379: PPUSH
20380: PPUSH
20381: PPUSH
20382: PPUSH
20383: PPUSH
20384: PPUSH
// result := [ ] ;
20385: LD_ADDR_VAR 0 2
20389: PUSH
20390: EMPTY
20391: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
20392: LD_ADDR_VAR 0 7
20396: PUSH
20397: LD_INT 4
20399: PUSH
20400: LD_INT 5
20402: PUSH
20403: LD_INT 6
20405: PUSH
20406: LD_INT 7
20408: PUSH
20409: EMPTY
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: PUSH
20415: LD_OWVAR 67
20419: ARRAY
20420: ST_TO_ADDR
// area := arAttackSpawn2Area ;
20421: LD_ADDR_VAR 0 8
20425: PUSH
20426: LD_INT 19
20428: ST_TO_ADDR
// parking := ruGatPointArea ;
20429: LD_ADDR_VAR 0 9
20433: PUSH
20434: LD_INT 32
20436: ST_TO_ADDR
// dir := 5 ;
20437: LD_ADDR_VAR 0 10
20441: PUSH
20442: LD_INT 5
20444: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) then
20445: LD_VAR 0 8
20449: PPUSH
20450: LD_INT 2
20452: PUSH
20453: LD_INT 22
20455: PUSH
20456: LD_INT 0
20458: PUSH
20459: EMPTY
20460: LIST
20461: LIST
20462: PUSH
20463: LD_INT 22
20465: PUSH
20466: LD_INT 6
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: PUSH
20473: EMPTY
20474: LIST
20475: LIST
20476: LIST
20477: PPUSH
20478: CALL_OW 70
20482: IFFALSE 20543
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) do
20484: LD_ADDR_VAR 0 3
20488: PUSH
20489: LD_VAR 0 8
20493: PPUSH
20494: LD_INT 2
20496: PUSH
20497: LD_INT 22
20499: PUSH
20500: LD_INT 0
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: PUSH
20507: LD_INT 22
20509: PUSH
20510: LD_INT 6
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PUSH
20517: EMPTY
20518: LIST
20519: LIST
20520: LIST
20521: PPUSH
20522: CALL_OW 70
20526: PUSH
20527: FOR_IN
20528: IFFALSE 20541
// RemoveUnit ( i ) ;
20530: LD_VAR 0 3
20534: PPUSH
20535: CALL_OW 64
20539: GO 20527
20541: POP
20542: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) then
20543: LD_VAR 0 8
20547: PPUSH
20548: LD_INT 3
20550: PUSH
20551: LD_INT 21
20553: PUSH
20554: LD_INT 1
20556: PUSH
20557: EMPTY
20558: LIST
20559: LIST
20560: PUSH
20561: EMPTY
20562: LIST
20563: LIST
20564: PUSH
20565: LD_INT 22
20567: PUSH
20568: LD_INT 1
20570: PUSH
20571: EMPTY
20572: LIST
20573: LIST
20574: PUSH
20575: EMPTY
20576: LIST
20577: LIST
20578: PPUSH
20579: CALL_OW 70
20583: IFFALSE 20647
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) do
20585: LD_ADDR_VAR 0 3
20589: PUSH
20590: LD_VAR 0 8
20594: PPUSH
20595: LD_INT 3
20597: PUSH
20598: LD_INT 21
20600: PUSH
20601: LD_INT 1
20603: PUSH
20604: EMPTY
20605: LIST
20606: LIST
20607: PUSH
20608: EMPTY
20609: LIST
20610: LIST
20611: PUSH
20612: LD_INT 22
20614: PUSH
20615: LD_INT 1
20617: PUSH
20618: EMPTY
20619: LIST
20620: LIST
20621: PUSH
20622: EMPTY
20623: LIST
20624: LIST
20625: PPUSH
20626: CALL_OW 70
20630: PUSH
20631: FOR_IN
20632: IFFALSE 20645
// KillUnit ( i ) ;
20634: LD_VAR 0 3
20638: PPUSH
20639: CALL_OW 66
20643: GO 20631
20645: POP
20646: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) then
20647: LD_VAR 0 8
20651: PPUSH
20652: LD_INT 21
20654: PUSH
20655: LD_INT 1
20657: PUSH
20658: EMPTY
20659: LIST
20660: LIST
20661: PUSH
20662: LD_INT 22
20664: PUSH
20665: LD_INT 1
20667: PUSH
20668: EMPTY
20669: LIST
20670: LIST
20671: PUSH
20672: EMPTY
20673: LIST
20674: LIST
20675: PPUSH
20676: CALL_OW 70
20680: IFFALSE 20743
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) do
20682: LD_ADDR_VAR 0 3
20686: PUSH
20687: LD_VAR 0 8
20691: PPUSH
20692: LD_INT 21
20694: PUSH
20695: LD_INT 1
20697: PUSH
20698: EMPTY
20699: LIST
20700: LIST
20701: PUSH
20702: LD_INT 22
20704: PUSH
20705: LD_INT 1
20707: PUSH
20708: EMPTY
20709: LIST
20710: LIST
20711: PUSH
20712: EMPTY
20713: LIST
20714: LIST
20715: PPUSH
20716: CALL_OW 70
20720: PUSH
20721: FOR_IN
20722: IFFALSE 20741
// ComMoveXY ( i , 92 , 92 ) ;
20724: LD_VAR 0 3
20728: PPUSH
20729: LD_INT 92
20731: PPUSH
20732: LD_INT 92
20734: PPUSH
20735: CALL_OW 111
20739: GO 20721
20741: POP
20742: POP
// repeat wait ( 0 0$1 ) ;
20743: LD_INT 35
20745: PPUSH
20746: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
20750: LD_VAR 0 8
20754: PPUSH
20755: LD_INT 50
20757: PUSH
20758: EMPTY
20759: LIST
20760: PPUSH
20761: CALL_OW 70
20765: NOT
20766: IFFALSE 20743
// InitHC_All ( ) ;
20768: CALL_OW 584
// InitVc ;
20772: CALL_OW 20
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + strength do
20776: LD_ADDR_VAR 0 3
20780: PUSH
20781: DOUBLE
20782: LD_INT 1
20784: DEC
20785: ST_TO_ADDR
20786: LD_INT 3
20788: PUSH
20789: LD_INT 4
20791: PUSH
20792: LD_INT 4
20794: PUSH
20795: LD_INT 5
20797: PUSH
20798: EMPTY
20799: LIST
20800: LIST
20801: LIST
20802: LIST
20803: PUSH
20804: LD_OWVAR 67
20808: ARRAY
20809: PUSH
20810: LD_VAR 0 1
20814: PLUS
20815: PUSH
20816: FOR_TO
20817: IFFALSE 21124
// begin uc_side := 6 ;
20819: LD_ADDR_OWVAR 20
20823: PUSH
20824: LD_INT 6
20826: ST_TO_ADDR
// uc_nation := nation_russian ;
20827: LD_ADDR_OWVAR 21
20831: PUSH
20832: LD_INT 3
20834: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
20835: LD_ADDR_VAR 0 11
20839: PUSH
20840: LD_INT 1
20842: PUSH
20843: LD_INT 3
20845: PUSH
20846: LD_INT 3
20848: PUSH
20849: LD_INT 3
20851: PUSH
20852: EMPTY
20853: LIST
20854: LIST
20855: LIST
20856: LIST
20857: PUSH
20858: LD_INT 1
20860: PPUSH
20861: LD_INT 4
20863: PPUSH
20864: CALL_OW 12
20868: ARRAY
20869: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
20870: LD_INT 22
20872: PUSH
20873: LD_INT 24
20875: PUSH
20876: LD_INT 23
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: LIST
20883: PUSH
20884: LD_VAR 0 3
20888: PUSH
20889: LD_INT 3
20891: MOD
20892: PUSH
20893: LD_INT 1
20895: PLUS
20896: ARRAY
20897: PPUSH
20898: LD_INT 3
20900: PUSH
20901: LD_INT 1
20903: PUSH
20904: EMPTY
20905: LIST
20906: LIST
20907: PUSH
20908: LD_INT 1
20910: PPUSH
20911: LD_INT 2
20913: PPUSH
20914: CALL_OW 12
20918: ARRAY
20919: PPUSH
20920: LD_VAR 0 11
20924: PPUSH
20925: LD_INT 45
20927: PUSH
20928: LD_INT 46
20930: PUSH
20931: LD_INT 43
20933: PUSH
20934: EMPTY
20935: LIST
20936: LIST
20937: LIST
20938: PUSH
20939: LD_VAR 0 3
20943: PUSH
20944: LD_INT 3
20946: MOD
20947: PUSH
20948: LD_INT 1
20950: PLUS
20951: ARRAY
20952: PPUSH
20953: LD_INT 100
20955: PPUSH
20956: CALL 59347 0 5
// veh := CreateVehicle ;
20960: LD_ADDR_VAR 0 6
20964: PUSH
20965: CALL_OW 45
20969: ST_TO_ADDR
// SetDir ( veh , dir ) ;
20970: LD_VAR 0 6
20974: PPUSH
20975: LD_VAR 0 10
20979: PPUSH
20980: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
20984: LD_VAR 0 6
20988: PPUSH
20989: LD_VAR 0 8
20993: PPUSH
20994: LD_INT 0
20996: PPUSH
20997: CALL_OW 49
// if control = control_manual then
21001: LD_VAR 0 11
21005: PUSH
21006: LD_INT 1
21008: EQUAL
21009: IFFALSE 21063
// begin uc_side := 6 ;
21011: LD_ADDR_OWVAR 20
21015: PUSH
21016: LD_INT 6
21018: ST_TO_ADDR
// uc_nation := nation_russian ;
21019: LD_ADDR_OWVAR 21
21023: PUSH
21024: LD_INT 3
21026: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
21027: LD_INT 0
21029: PPUSH
21030: LD_VAR 0 7
21034: PPUSH
21035: CALL_OW 383
// un := CreateHuman ;
21039: LD_ADDR_VAR 0 5
21043: PUSH
21044: CALL_OW 44
21048: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
21049: LD_VAR 0 5
21053: PPUSH
21054: LD_VAR 0 6
21058: PPUSH
21059: CALL_OW 52
// end ; repeat ComMoveToArea ( veh , parking ) ;
21063: LD_VAR 0 6
21067: PPUSH
21068: LD_VAR 0 9
21072: PPUSH
21073: CALL_OW 113
// wait ( 0 0$3 ) ;
21077: LD_INT 105
21079: PPUSH
21080: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
21084: LD_VAR 0 8
21088: PPUSH
21089: LD_INT 50
21091: PUSH
21092: EMPTY
21093: LIST
21094: PPUSH
21095: CALL_OW 70
21099: NOT
21100: IFFALSE 21063
// result := Join ( result , veh ) ;
21102: LD_ADDR_VAR 0 2
21106: PUSH
21107: LD_VAR 0 2
21111: PPUSH
21112: LD_VAR 0 6
21116: PPUSH
21117: CALL 92209 0 2
21121: ST_TO_ADDR
// end ;
21122: GO 20816
21124: POP
21125: POP
// for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
21126: LD_ADDR_VAR 0 3
21130: PUSH
21131: DOUBLE
21132: LD_INT 1
21134: DEC
21135: ST_TO_ADDR
21136: LD_INT 2
21138: PUSH
21139: LD_INT 2
21141: PUSH
21142: LD_INT 3
21144: PUSH
21145: LD_INT 4
21147: PUSH
21148: EMPTY
21149: LIST
21150: LIST
21151: LIST
21152: LIST
21153: PUSH
21154: LD_OWVAR 67
21158: ARRAY
21159: PUSH
21160: FOR_TO
21161: IFFALSE 21317
// begin uc_side := 6 ;
21163: LD_ADDR_OWVAR 20
21167: PUSH
21168: LD_INT 6
21170: ST_TO_ADDR
// uc_nation := nation_russian ;
21171: LD_ADDR_OWVAR 21
21175: PUSH
21176: LD_INT 3
21178: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
21179: LD_INT 0
21181: PPUSH
21182: LD_VAR 0 7
21186: PPUSH
21187: CALL_OW 381
// un := CreateHuman ;
21191: LD_ADDR_VAR 0 5
21195: PUSH
21196: CALL_OW 44
21200: ST_TO_ADDR
// if Prob ( [ 35 , 60 , 70 , 80 ] [ Difficulty ] ) then
21201: LD_INT 35
21203: PUSH
21204: LD_INT 60
21206: PUSH
21207: LD_INT 70
21209: PUSH
21210: LD_INT 80
21212: PUSH
21213: EMPTY
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: PUSH
21219: LD_OWVAR 67
21223: ARRAY
21224: PPUSH
21225: CALL_OW 13
21229: IFFALSE 21243
// SetClass ( un , class_bazooker ) ;
21231: LD_VAR 0 5
21235: PPUSH
21236: LD_INT 9
21238: PPUSH
21239: CALL_OW 336
// SetDir ( un , dir ) ;
21243: LD_VAR 0 5
21247: PPUSH
21248: LD_VAR 0 10
21252: PPUSH
21253: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
21257: LD_VAR 0 5
21261: PPUSH
21262: LD_VAR 0 8
21266: PPUSH
21267: LD_INT 0
21269: PPUSH
21270: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
21274: LD_VAR 0 5
21278: PPUSH
21279: LD_VAR 0 9
21283: PPUSH
21284: CALL_OW 113
// wait ( 0 0$1 ) ;
21288: LD_INT 35
21290: PPUSH
21291: CALL_OW 67
// result := Join ( result , un ) ;
21295: LD_ADDR_VAR 0 2
21299: PUSH
21300: LD_VAR 0 2
21304: PPUSH
21305: LD_VAR 0 5
21309: PPUSH
21310: CALL 92209 0 2
21314: ST_TO_ADDR
// end ;
21315: GO 21160
21317: POP
21318: POP
// end ;
21319: LD_VAR 0 2
21323: RET
// export function SendRussianAttack ( wave ) ; var path , attackers , e , i , enemy ; begin
21324: LD_INT 0
21326: PPUSH
21327: PPUSH
21328: PPUSH
21329: PPUSH
21330: PPUSH
21331: PPUSH
// russianWaveAttack := Inc ( russianWaveAttack ) ;
21332: LD_ADDR_EXP 18
21336: PUSH
21337: LD_EXP 18
21341: PPUSH
21342: CALL 93570 0 1
21346: ST_TO_ADDR
// path := [ [ 99 , 91 ] , [ 78 , 50 ] , [ 91 , 45 ] ] ;
21347: LD_ADDR_VAR 0 3
21351: PUSH
21352: LD_INT 99
21354: PUSH
21355: LD_INT 91
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: LD_INT 78
21364: PUSH
21365: LD_INT 50
21367: PUSH
21368: EMPTY
21369: LIST
21370: LIST
21371: PUSH
21372: LD_INT 91
21374: PUSH
21375: LD_INT 45
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PUSH
21382: EMPTY
21383: LIST
21384: LIST
21385: LIST
21386: ST_TO_ADDR
// attackers := PrepareRussianAttack ( wave ) ;
21387: LD_ADDR_VAR 0 4
21391: PUSH
21392: LD_VAR 0 1
21396: PPUSH
21397: CALL 20373 0 1
21401: ST_TO_ADDR
// ComAgressiveMove ( UnitFilter ( attackers , [ f_type , unit_human ] ) , 108 , 60 ) ;
21402: LD_VAR 0 4
21406: PPUSH
21407: LD_INT 21
21409: PUSH
21410: LD_INT 1
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: PPUSH
21417: CALL_OW 72
21421: PPUSH
21422: LD_INT 108
21424: PPUSH
21425: LD_INT 60
21427: PPUSH
21428: CALL_OW 114
// DRussianNextAttack ;
21432: CALL 28643 0 0
// repeat wait ( 0 0$2 ) ;
21436: LD_INT 70
21438: PPUSH
21439: CALL_OW 67
// enemy := FilterAllUnits ( [ f_enemy , 6 ] ) ;
21443: LD_ADDR_VAR 0 7
21447: PUSH
21448: LD_INT 81
21450: PUSH
21451: LD_INT 6
21453: PUSH
21454: EMPTY
21455: LIST
21456: LIST
21457: PPUSH
21458: CALL_OW 69
21462: ST_TO_ADDR
// attackers := UnitFilter ( attackers , [ f_ok ] ) ;
21463: LD_ADDR_VAR 0 4
21467: PUSH
21468: LD_VAR 0 4
21472: PPUSH
21473: LD_INT 50
21475: PUSH
21476: EMPTY
21477: LIST
21478: PPUSH
21479: CALL_OW 72
21483: ST_TO_ADDR
// for i in attackers do
21484: LD_ADDR_VAR 0 6
21488: PUSH
21489: LD_VAR 0 4
21493: PUSH
21494: FOR_IN
21495: IFFALSE 21871
// begin if not IsOk ( i ) then
21497: LD_VAR 0 6
21501: PPUSH
21502: CALL_OW 302
21506: NOT
21507: IFFALSE 21527
// begin attackers := attackers diff i ;
21509: LD_ADDR_VAR 0 4
21513: PUSH
21514: LD_VAR 0 4
21518: PUSH
21519: LD_VAR 0 6
21523: DIFF
21524: ST_TO_ADDR
// continue ;
21525: GO 21494
// end ; if GetType ( i ) = unit_vehicle then
21527: LD_VAR 0 6
21531: PPUSH
21532: CALL_OW 247
21536: PUSH
21537: LD_INT 2
21539: EQUAL
21540: IFFALSE 21558
// AgressiveMove ( i , path ) else
21542: LD_VAR 0 6
21546: PPUSH
21547: LD_VAR 0 3
21551: PPUSH
21552: CALL 94813 0 2
21556: GO 21869
// begin if GetClass ( i ) = class_bazooker then
21558: LD_VAR 0 6
21562: PPUSH
21563: CALL_OW 257
21567: PUSH
21568: LD_INT 9
21570: EQUAL
21571: IFFALSE 21845
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
21573: LD_VAR 0 6
21577: PPUSH
21578: LD_VAR 0 7
21582: PPUSH
21583: LD_VAR 0 6
21587: PPUSH
21588: CALL_OW 74
21592: PPUSH
21593: CALL_OW 296
21597: PUSH
21598: LD_INT 12
21600: GREATER
21601: IFFALSE 21629
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21603: LD_VAR 0 6
21607: PPUSH
21608: LD_VAR 0 7
21612: PPUSH
21613: LD_VAR 0 6
21617: PPUSH
21618: CALL_OW 74
21622: PPUSH
21623: CALL 96281 0 2
21627: GO 21843
// begin e := NearestUnitToUnit ( enemy , i ) ;
21629: LD_ADDR_VAR 0 5
21633: PUSH
21634: LD_VAR 0 7
21638: PPUSH
21639: LD_VAR 0 6
21643: PPUSH
21644: CALL_OW 74
21648: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
21649: LD_INT 1
21651: PPUSH
21652: LD_INT 3
21654: PPUSH
21655: CALL_OW 12
21659: PUSH
21660: LD_INT 1
21662: DOUBLE
21663: EQUAL
21664: IFTRUE 21668
21666: GO 21685
21668: POP
// ComAttackUnit ( i , e ) ; 2 :
21669: LD_VAR 0 6
21673: PPUSH
21674: LD_VAR 0 5
21678: PPUSH
21679: CALL_OW 115
21683: GO 21843
21685: LD_INT 2
21687: DOUBLE
21688: EQUAL
21689: IFTRUE 21693
21691: GO 21771
21693: POP
// begin ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ;
21694: LD_VAR 0 6
21698: PPUSH
21699: LD_VAR 0 5
21703: PPUSH
21704: CALL_OW 250
21708: PPUSH
21709: LD_VAR 0 5
21713: PPUSH
21714: CALL_OW 251
21718: PPUSH
21719: CALL_OW 153
// if GetType ( e ) <> unit_building and not dialogRussianSpaceAmmo then
21723: LD_VAR 0 5
21727: PPUSH
21728: CALL_OW 247
21732: PUSH
21733: LD_INT 3
21735: NONEQUAL
21736: PUSH
21737: LD_EXP 17
21741: NOT
21742: AND
21743: IFFALSE 21769
// begin dialogRussianSpaceAmmo := true ;
21745: LD_ADDR_EXP 17
21749: PUSH
21750: LD_INT 1
21752: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21753: LD_INT 210
21755: PPUSH
21756: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21760: LD_VAR 0 5
21764: PPUSH
21765: CALL 28690 0 1
// end ; end ; 3 :
21769: GO 21843
21771: LD_INT 3
21773: DOUBLE
21774: EQUAL
21775: IFTRUE 21779
21777: GO 21842
21779: POP
// begin ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ;
21780: LD_VAR 0 6
21784: PPUSH
21785: LD_VAR 0 5
21789: PPUSH
21790: CALL_OW 250
21794: PPUSH
21795: LD_VAR 0 5
21799: PPUSH
21800: CALL_OW 251
21804: PPUSH
21805: CALL_OW 154
// if not dialogRussianSpaceAmmo then
21809: LD_EXP 17
21813: NOT
21814: IFFALSE 21840
// begin dialogRussianSpaceAmmo := true ;
21816: LD_ADDR_EXP 17
21820: PUSH
21821: LD_INT 1
21823: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21824: LD_INT 210
21826: PPUSH
21827: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21831: LD_VAR 0 5
21835: PPUSH
21836: CALL 28690 0 1
// end ; end ; end ;
21840: GO 21843
21842: POP
// end ; end else
21843: GO 21869
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
21845: LD_VAR 0 6
21849: PPUSH
21850: LD_VAR 0 7
21854: PPUSH
21855: LD_VAR 0 6
21859: PPUSH
21860: CALL_OW 74
21864: PPUSH
21865: CALL 96281 0 2
// end ; end ;
21869: GO 21494
21871: POP
21872: POP
// until not attackers ;
21873: LD_VAR 0 4
21877: NOT
21878: IFFALSE 21436
// end ;
21880: LD_VAR 0 2
21884: RET
// every 6 6$30 trigger epsilon and firstAttack do var i , un , tmp ;
21885: LD_EXP 10
21889: PUSH
21890: LD_EXP 16
21894: AND
21895: IFFALSE 22007
21897: GO 21899
21899: DISABLE
21900: LD_INT 0
21902: PPUSH
21903: PPUSH
21904: PPUSH
// begin InitHC_All ( ) ;
21905: CALL_OW 584
// for i := 1 to 3 do
21909: LD_ADDR_VAR 0 1
21913: PUSH
21914: DOUBLE
21915: LD_INT 1
21917: DEC
21918: ST_TO_ADDR
21919: LD_INT 3
21921: PUSH
21922: FOR_TO
21923: IFFALSE 22005
// begin uc_side := 6 ;
21925: LD_ADDR_OWVAR 20
21929: PUSH
21930: LD_INT 6
21932: ST_TO_ADDR
// uc_nation := nation_russian ;
21933: LD_ADDR_OWVAR 21
21937: PUSH
21938: LD_INT 3
21940: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
21941: LD_INT 0
21943: PPUSH
21944: LD_INT 3
21946: PPUSH
21947: CALL_OW 381
// un := CreateHuman ;
21951: LD_ADDR_VAR 0 2
21955: PUSH
21956: CALL_OW 44
21960: ST_TO_ADDR
// SetDir ( un , 2 ) ;
21961: LD_VAR 0 2
21965: PPUSH
21966: LD_INT 2
21968: PPUSH
21969: CALL_OW 233
// PlaceUnitArea ( un , ruNorthSpawnArea , false ) ;
21973: LD_VAR 0 2
21977: PPUSH
21978: LD_INT 33
21980: PPUSH
21981: LD_INT 0
21983: PPUSH
21984: CALL_OW 49
// ComAgressiveMove ( un , 52 , 16 ) ;
21988: LD_VAR 0 2
21992: PPUSH
21993: LD_INT 52
21995: PPUSH
21996: LD_INT 16
21998: PPUSH
21999: CALL_OW 114
// end ;
22003: GO 21922
22005: POP
22006: POP
// end ;
22007: PPOPN 3
22009: END
// every 5 5$00 trigger IsOk ( ruBase ) and not ruTransportDestroyed do var cargo ;
22010: LD_EXP 68
22014: PPUSH
22015: CALL_OW 302
22019: PUSH
22020: LD_EXP 78
22024: NOT
22025: AND
22026: IFFALSE 22263
22028: GO 22030
22030: DISABLE
22031: LD_INT 0
22033: PPUSH
// begin enable ;
22034: ENABLE
// uc_side := 3 ;
22035: LD_ADDR_OWVAR 20
22039: PUSH
22040: LD_INT 3
22042: ST_TO_ADDR
// uc_nation := nation_russian ;
22043: LD_ADDR_OWVAR 21
22047: PUSH
22048: LD_INT 3
22050: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
22051: LD_INT 22
22053: PPUSH
22054: LD_INT 3
22056: PPUSH
22057: LD_INT 3
22059: PPUSH
22060: LD_INT 51
22062: PPUSH
22063: LD_INT 100
22065: PPUSH
22066: CALL 59347 0 5
// cargo := CreateVehicle ;
22070: LD_ADDR_VAR 0 1
22074: PUSH
22075: CALL_OW 45
22079: ST_TO_ADDR
// SetDir ( cargo , 5 ) ;
22080: LD_VAR 0 1
22084: PPUSH
22085: LD_INT 5
22087: PPUSH
22088: CALL_OW 233
// PlaceUnitXY ( cargo , 187 , 117 , false ) ;
22092: LD_VAR 0 1
22096: PPUSH
22097: LD_INT 187
22099: PPUSH
22100: LD_INT 117
22102: PPUSH
22103: LD_INT 0
22105: PPUSH
22106: CALL_OW 48
// SetCargo ( cargo , mat_cans , 100 ) ;
22110: LD_VAR 0 1
22114: PPUSH
22115: LD_INT 1
22117: PPUSH
22118: LD_INT 100
22120: PPUSH
22121: CALL_OW 290
// ComMoveUnit ( cargo , ruBase ) ;
22125: LD_VAR 0 1
22129: PPUSH
22130: LD_EXP 68
22134: PPUSH
22135: CALL_OW 112
// AddComGive ( cargo , ruBase ) ;
22139: LD_VAR 0 1
22143: PPUSH
22144: LD_EXP 68
22148: PPUSH
22149: CALL_OW 221
// AddComMoveXY ( cargo , 187 , 117 ) ;
22153: LD_VAR 0 1
22157: PPUSH
22158: LD_INT 187
22160: PPUSH
22161: LD_INT 117
22163: PPUSH
22164: CALL_OW 171
// wait ( 0 0$10 ) ;
22168: LD_INT 350
22170: PPUSH
22171: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22175: LD_INT 35
22177: PPUSH
22178: CALL_OW 67
// if not HasTask ( cargo ) then
22182: LD_VAR 0 1
22186: PPUSH
22187: CALL_OW 314
22191: NOT
22192: IFFALSE 22209
// ComMoveXY ( cargo , 187 , 117 ) ;
22194: LD_VAR 0 1
22198: PPUSH
22199: LD_INT 187
22201: PPUSH
22202: LD_INT 117
22204: PPUSH
22205: CALL_OW 111
// until IsDead ( cargo ) or IsAt ( cargo , 187 , 117 ) ;
22209: LD_VAR 0 1
22213: PPUSH
22214: CALL_OW 301
22218: PUSH
22219: LD_VAR 0 1
22223: PPUSH
22224: LD_INT 187
22226: PPUSH
22227: LD_INT 117
22229: PPUSH
22230: CALL_OW 307
22234: OR
22235: IFFALSE 22175
// if IsAt ( cargo , 187 , 117 ) then
22237: LD_VAR 0 1
22241: PPUSH
22242: LD_INT 187
22244: PPUSH
22245: LD_INT 117
22247: PPUSH
22248: CALL_OW 307
22252: IFFALSE 22263
// RemoveUnit ( cargo ) ;
22254: LD_VAR 0 1
22258: PPUSH
22259: CALL_OW 64
// end ; end_of_file
22263: PPOPN 1
22265: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
22266: LD_VAR 0 1
22270: PPUSH
22271: CALL 49779 0 1
// if unit = Dietrich and not arabianAttack then
22275: LD_VAR 0 1
22279: PUSH
22280: LD_EXP 50
22284: EQUAL
22285: PUSH
22286: LD_EXP 4
22290: NOT
22291: AND
22292: IFFALSE 22301
// YouLost ( ArabDefeated ) ;
22294: LD_STRING ArabDefeated
22296: PPUSH
22297: CALL_OW 104
// if unit in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) and not arabianAttack then
22301: LD_VAR 0 1
22305: PUSH
22306: LD_INT 22
22308: PUSH
22309: LD_INT 2
22311: PUSH
22312: EMPTY
22313: LIST
22314: LIST
22315: PUSH
22316: LD_INT 25
22318: PUSH
22319: LD_INT 4
22321: PUSH
22322: EMPTY
22323: LIST
22324: LIST
22325: PUSH
22326: EMPTY
22327: LIST
22328: LIST
22329: PPUSH
22330: CALL_OW 69
22334: IN
22335: PUSH
22336: LD_EXP 4
22340: NOT
22341: AND
22342: IFFALSE 22351
// YouLost ( ArabDefeated ) ;
22344: LD_STRING ArabDefeated
22346: PPUSH
22347: CALL_OW 104
// if unit in JMMSquad then
22351: LD_VAR 0 1
22355: PUSH
22356: LD_EXP 45
22360: IN
22361: IFFALSE 22379
// JMMSquad := JMMSquad diff unit ;
22363: LD_ADDR_EXP 45
22367: PUSH
22368: LD_EXP 45
22372: PUSH
22373: LD_VAR 0 1
22377: DIFF
22378: ST_TO_ADDR
// if unit = Truman then
22379: LD_VAR 0 1
22383: PUSH
22384: LD_EXP 43
22388: EQUAL
22389: IFFALSE 22398
// YouLost ( Powell ) ;
22391: LD_STRING Powell
22393: PPUSH
22394: CALL_OW 104
// if unit = JMM then
22398: LD_VAR 0 1
22402: PUSH
22403: LD_EXP 23
22407: EQUAL
22408: IFFALSE 22417
// YouLost ( JMM ) ;
22410: LD_STRING JMM
22412: PPUSH
22413: CALL_OW 104
// if unit in arEscapist then
22417: LD_VAR 0 1
22421: PUSH
22422: LD_EXP 56
22426: IN
22427: IFFALSE 22445
// arEscapist := arEscapist diff unit ;
22429: LD_ADDR_EXP 56
22433: PUSH
22434: LD_EXP 56
22438: PUSH
22439: LD_VAR 0 1
22443: DIFF
22444: ST_TO_ADDR
// if unit in arAttackersInf then
22445: LD_VAR 0 1
22449: PUSH
22450: LD_EXP 57
22454: IN
22455: IFFALSE 22473
// arAttackersInf := arAttackersInf diff unit ;
22457: LD_ADDR_EXP 57
22461: PUSH
22462: LD_EXP 57
22466: PUSH
22467: LD_VAR 0 1
22471: DIFF
22472: ST_TO_ADDR
// if unit in arAttackersVeh then
22473: LD_VAR 0 1
22477: PUSH
22478: LD_EXP 58
22482: IN
22483: IFFALSE 22501
// arAttackersVeh := arAttackersVeh diff unit ;
22485: LD_ADDR_EXP 58
22489: PUSH
22490: LD_EXP 58
22494: PUSH
22495: LD_VAR 0 1
22499: DIFF
22500: ST_TO_ADDR
// if unit = Khatam then
22501: LD_VAR 0 1
22505: PUSH
22506: LD_EXP 36
22510: EQUAL
22511: IFFALSE 22521
// khatamStatus := false ;
22513: LD_ADDR_EXP 5
22517: PUSH
22518: LD_INT 0
22520: ST_TO_ADDR
// if unit = epsilon then
22521: LD_VAR 0 1
22525: PUSH
22526: LD_EXP 10
22530: EQUAL
22531: IFFALSE 22562
// begin hasBase := false ;
22533: LD_ADDR_EXP 9
22537: PUSH
22538: LD_INT 0
22540: ST_TO_ADDR
// epsilon := 0 ;
22541: LD_ADDR_EXP 10
22545: PUSH
22546: LD_INT 0
22548: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
22549: LD_INT 0
22551: PPUSH
22552: LD_INT 1
22554: PPUSH
22555: LD_INT 1
22557: PPUSH
22558: CALL_OW 324
// end ; if unit = Khatam then
22562: LD_VAR 0 1
22566: PUSH
22567: LD_EXP 36
22571: EQUAL
22572: IFFALSE 22584
// SaveVariable ( 0 , 10_KhatamStatus_1 ) ;
22574: LD_INT 0
22576: PPUSH
22577: LD_STRING 10_KhatamStatus_1
22579: PPUSH
22580: CALL_OW 39
// if unit in ruForces then
22584: LD_VAR 0 1
22588: PUSH
22589: LD_EXP 59
22593: IN
22594: IFFALSE 22612
// ruForces := ruForces diff unit ;
22596: LD_ADDR_EXP 59
22600: PUSH
22601: LD_EXP 59
22605: PUSH
22606: LD_VAR 0 1
22610: DIFF
22611: ST_TO_ADDR
// if unit in ruForces2 then
22612: LD_VAR 0 1
22616: PUSH
22617: LD_EXP 60
22621: IN
22622: IFFALSE 22640
// ruForces2 := ruForces2 diff unit ;
22624: LD_ADDR_EXP 60
22628: PUSH
22629: LD_EXP 60
22633: PUSH
22634: LD_VAR 0 1
22638: DIFF
22639: ST_TO_ADDR
// if unit in ruTanks then
22640: LD_VAR 0 1
22644: PUSH
22645: LD_EXP 79
22649: IN
22650: IFFALSE 22668
// ruTanks := ruTanks diff unit ;
22652: LD_ADDR_EXP 79
22656: PUSH
22657: LD_EXP 79
22661: PUSH
22662: LD_VAR 0 1
22666: DIFF
22667: ST_TO_ADDR
// if unit in ruTanks2 then
22668: LD_VAR 0 1
22672: PUSH
22673: LD_EXP 80
22677: IN
22678: IFFALSE 22696
// ruTanks2 := ruTanks2 diff unit ;
22680: LD_ADDR_EXP 80
22684: PUSH
22685: LD_EXP 80
22689: PUSH
22690: LD_VAR 0 1
22694: DIFF
22695: ST_TO_ADDR
// if unit in ruExtraTanks then
22696: LD_VAR 0 1
22700: PUSH
22701: LD_EXP 81
22705: IN
22706: IFFALSE 22724
// ruExtraTanks := ruExtraTanks diff unit ;
22708: LD_ADDR_EXP 81
22712: PUSH
22713: LD_EXP 81
22717: PUSH
22718: LD_VAR 0 1
22722: DIFF
22723: ST_TO_ADDR
// if unit in ruMech then
22724: LD_VAR 0 1
22728: PUSH
22729: LD_EXP 63
22733: IN
22734: IFFALSE 22752
// ruMech := ruMech diff unit ;
22736: LD_ADDR_EXP 63
22740: PUSH
22741: LD_EXP 63
22745: PUSH
22746: LD_VAR 0 1
22750: DIFF
22751: ST_TO_ADDR
// if unit in ruMech2 then
22752: LD_VAR 0 1
22756: PUSH
22757: LD_EXP 64
22761: IN
22762: IFFALSE 22780
// ruMech2 := ruMech2 diff unit ;
22764: LD_ADDR_EXP 64
22768: PUSH
22769: LD_EXP 64
22773: PUSH
22774: LD_VAR 0 1
22778: DIFF
22779: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 3 then
22780: LD_VAR 0 1
22784: PPUSH
22785: CALL_OW 266
22789: PUSH
22790: LD_INT 32
22792: PUSH
22793: LD_INT 33
22795: PUSH
22796: EMPTY
22797: LIST
22798: LIST
22799: IN
22800: PUSH
22801: LD_VAR 0 1
22805: PPUSH
22806: CALL_OW 255
22810: PUSH
22811: LD_INT 3
22813: EQUAL
22814: AND
22815: IFFALSE 22971
// begin if IsInArea ( unit , ruBaseArea ) then
22817: LD_VAR 0 1
22821: PPUSH
22822: LD_EXP 66
22826: PPUSH
22827: CALL_OW 308
22831: IFFALSE 22894
// ruBuildings := Join ( ruBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
22833: LD_ADDR_EXP 76
22837: PUSH
22838: LD_EXP 76
22842: PPUSH
22843: LD_VAR 0 1
22847: PPUSH
22848: CALL_OW 266
22852: PUSH
22853: LD_VAR 0 1
22857: PPUSH
22858: CALL_OW 250
22862: PUSH
22863: LD_VAR 0 1
22867: PPUSH
22868: CALL_OW 251
22872: PUSH
22873: LD_VAR 0 1
22877: PPUSH
22878: CALL_OW 254
22882: PUSH
22883: EMPTY
22884: LIST
22885: LIST
22886: LIST
22887: LIST
22888: PPUSH
22889: CALL 92209 0 2
22893: ST_TO_ADDR
// if IsInArea ( unit , ruBaseArea2 ) then
22894: LD_VAR 0 1
22898: PPUSH
22899: LD_EXP 67
22903: PPUSH
22904: CALL_OW 308
22908: IFFALSE 22971
// ruBuildings2 := Join ( ruBuildings2 , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
22910: LD_ADDR_EXP 77
22914: PUSH
22915: LD_EXP 77
22919: PPUSH
22920: LD_VAR 0 1
22924: PPUSH
22925: CALL_OW 266
22929: PUSH
22930: LD_VAR 0 1
22934: PPUSH
22935: CALL_OW 250
22939: PUSH
22940: LD_VAR 0 1
22944: PPUSH
22945: CALL_OW 251
22949: PUSH
22950: LD_VAR 0 1
22954: PPUSH
22955: CALL_OW 254
22959: PUSH
22960: EMPTY
22961: LIST
22962: LIST
22963: LIST
22964: LIST
22965: PPUSH
22966: CALL 92209 0 2
22970: ST_TO_ADDR
// end ; if unit in FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) then
22971: LD_VAR 0 1
22975: PUSH
22976: LD_INT 22
22978: PUSH
22979: LD_INT 6
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 34
22988: PUSH
22989: LD_INT 51
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: PPUSH
23000: CALL_OW 69
23004: IN
23005: IFFALSE 23015
// ruTransportDestroyed := true ;
23007: LD_ADDR_EXP 78
23011: PUSH
23012: LD_INT 1
23014: ST_TO_ADDR
// end ;
23015: PPOPN 1
23017: END
// on ClassChanged ( un , oldClass , newClass ) do begin if GetTag ( un ) = tMech then
23018: LD_VAR 0 1
23022: PPUSH
23023: CALL_OW 110
23027: PUSH
23028: LD_INT 7
23030: EQUAL
23031: IFFALSE 23045
// SetTag ( un , 0 ) ;
23033: LD_VAR 0 1
23037: PPUSH
23038: LD_INT 0
23040: PPUSH
23041: CALL_OW 109
// end ;
23045: PPOPN 3
23047: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
23048: LD_VAR 0 2
23052: PUSH
23053: LD_INT 22
23055: PUSH
23056: LD_INT 3
23058: PUSH
23059: EMPTY
23060: LIST
23061: LIST
23062: PUSH
23063: LD_INT 25
23065: PUSH
23066: LD_INT 3
23068: PUSH
23069: EMPTY
23070: LIST
23071: LIST
23072: PUSH
23073: EMPTY
23074: LIST
23075: LIST
23076: PPUSH
23077: CALL_OW 69
23081: IN
23082: PUSH
23083: LD_VAR 0 1
23087: PPUSH
23088: CALL_OW 266
23092: PUSH
23093: LD_INT 3
23095: EQUAL
23096: AND
23097: PUSH
23098: LD_VAR 0 2
23102: PPUSH
23103: CALL_OW 256
23107: PUSH
23108: LD_INT 1000
23110: LESS
23111: AND
23112: IFFALSE 23138
// begin SetTag ( un , 0 ) ;
23114: LD_VAR 0 2
23118: PPUSH
23119: LD_INT 0
23121: PPUSH
23122: CALL_OW 109
// SetLives ( un , 1000 ) ;
23126: LD_VAR 0 2
23130: PPUSH
23131: LD_INT 1000
23133: PPUSH
23134: CALL_OW 234
// end ; end ;
23138: PPOPN 2
23140: END
// on UnitGoesToRed ( un ) do var i ;
23141: LD_INT 0
23143: PPUSH
// begin if un = Khatam and GetSide ( Khatam ) = 8 then
23144: LD_VAR 0 1
23148: PUSH
23149: LD_EXP 36
23153: EQUAL
23154: PUSH
23155: LD_EXP 36
23159: PPUSH
23160: CALL_OW 255
23164: PUSH
23165: LD_INT 8
23167: EQUAL
23168: AND
23169: IFFALSE 23180
// KillUnit ( Khatam ) ;
23171: LD_EXP 36
23175: PPUSH
23176: CALL_OW 66
// end ;
23180: PPOPN 2
23182: END
// on SpontaneousTeleported ( un ) do begin if not seenRussianTeleport then
23183: LD_EXP 6
23187: NOT
23188: IFFALSE 23222
// begin seenRussianTeleport := true ;
23190: LD_ADDR_EXP 6
23194: PUSH
23195: LD_INT 1
23197: ST_TO_ADDR
// DTankTeleport ( GetX ( un ) , GetY ( un ) ) ;
23198: LD_VAR 0 1
23202: PPUSH
23203: CALL_OW 250
23207: PPUSH
23208: LD_VAR 0 1
23212: PPUSH
23213: CALL_OW 251
23217: PPUSH
23218: CALL 26700 0 2
// end ; end ;
23222: PPOPN 1
23224: END
// on BuildingCaptured ( captured , oldSide , unit ) do var i , x , y ;
23225: LD_INT 0
23227: PPUSH
23228: PPUSH
23229: PPUSH
// begin if oldSide = 2 and GetBType ( captured ) in [ b_lab_half , b_lab , b_depot , b_barracks ] then
23230: LD_VAR 0 2
23234: PUSH
23235: LD_INT 2
23237: EQUAL
23238: PUSH
23239: LD_VAR 0 1
23243: PPUSH
23244: CALL_OW 266
23248: PUSH
23249: LD_INT 7
23251: PUSH
23252: LD_INT 6
23254: PUSH
23255: LD_INT 0
23257: PUSH
23258: LD_INT 5
23260: PUSH
23261: EMPTY
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: IN
23267: AND
23268: IFFALSE 23387
// begin for i := 1 to rand ( 2 , 4 ) do
23270: LD_ADDR_VAR 0 4
23274: PUSH
23275: DOUBLE
23276: LD_INT 1
23278: DEC
23279: ST_TO_ADDR
23280: LD_INT 2
23282: PPUSH
23283: LD_INT 4
23285: PPUSH
23286: CALL_OW 12
23290: PUSH
23291: FOR_TO
23292: IFFALSE 23385
// begin x := GetX ( captured ) - rand ( - 2 , 2 ) ;
23294: LD_ADDR_VAR 0 5
23298: PUSH
23299: LD_VAR 0 1
23303: PPUSH
23304: CALL_OW 250
23308: PUSH
23309: LD_INT 2
23311: NEG
23312: PPUSH
23313: LD_INT 2
23315: PPUSH
23316: CALL_OW 12
23320: MINUS
23321: ST_TO_ADDR
// y := GetY ( captured ) + rand ( - 2 , 2 ) ;
23322: LD_ADDR_VAR 0 6
23326: PUSH
23327: LD_VAR 0 1
23331: PPUSH
23332: CALL_OW 251
23336: PUSH
23337: LD_INT 2
23339: NEG
23340: PPUSH
23341: LD_INT 2
23343: PPUSH
23344: CALL_OW 12
23348: PLUS
23349: ST_TO_ADDR
// if ValidHex ( x , y ) then
23350: LD_VAR 0 5
23354: PPUSH
23355: LD_VAR 0 6
23359: PPUSH
23360: CALL_OW 488
23364: IFFALSE 23383
// MineExplosion ( x , y , 10 ) ;
23366: LD_VAR 0 5
23370: PPUSH
23371: LD_VAR 0 6
23375: PPUSH
23376: LD_INT 10
23378: PPUSH
23379: CALL_OW 453
// end ;
23383: GO 23291
23385: POP
23386: POP
// end ; end ;
23387: PPOPN 6
23389: END
// on VehicleConstructed ( veh , fac ) do var side ;
23390: LD_INT 0
23392: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
23393: LD_VAR 0 1
23397: PPUSH
23398: LD_VAR 0 2
23402: PPUSH
23403: CALL 49899 0 2
// side := GetSide ( fac ) ;
23407: LD_ADDR_VAR 0 3
23411: PUSH
23412: LD_VAR 0 2
23416: PPUSH
23417: CALL_OW 255
23421: ST_TO_ADDR
// if side = 3 then
23422: LD_VAR 0 3
23426: PUSH
23427: LD_INT 3
23429: EQUAL
23430: IFFALSE 23614
// begin if IsInArea ( fac , ruBaseArea ) then
23432: LD_VAR 0 2
23436: PPUSH
23437: LD_EXP 66
23441: PPUSH
23442: CALL_OW 308
23446: IFFALSE 23523
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
23448: LD_ADDR_EXP 70
23452: PUSH
23453: LD_EXP 70
23457: PPUSH
23458: LD_INT 1
23460: PPUSH
23461: CALL_OW 3
23465: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23466: LD_VAR 0 1
23470: PPUSH
23471: CALL_OW 263
23475: PUSH
23476: LD_INT 1
23478: EQUAL
23479: IFFALSE 23503
// ruTanks := Join ( ruTanks , veh ) else
23481: LD_ADDR_EXP 79
23485: PUSH
23486: LD_EXP 79
23490: PPUSH
23491: LD_VAR 0 1
23495: PPUSH
23496: CALL 92209 0 2
23500: ST_TO_ADDR
23501: GO 23523
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23503: LD_ADDR_EXP 81
23507: PUSH
23508: LD_EXP 81
23512: PPUSH
23513: LD_VAR 0 1
23517: PPUSH
23518: CALL 92209 0 2
23522: ST_TO_ADDR
// end ; if IsInArea ( fac , ruBaseArea2 ) then
23523: LD_VAR 0 2
23527: PPUSH
23528: LD_EXP 67
23532: PPUSH
23533: CALL_OW 308
23537: IFFALSE 23614
// begin ruConstructList2 := Delete ( ruConstructList2 , 1 ) ;
23539: LD_ADDR_EXP 71
23543: PUSH
23544: LD_EXP 71
23548: PPUSH
23549: LD_INT 1
23551: PPUSH
23552: CALL_OW 3
23556: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23557: LD_VAR 0 1
23561: PPUSH
23562: CALL_OW 263
23566: PUSH
23567: LD_INT 1
23569: EQUAL
23570: IFFALSE 23594
// ruTanks2 := Join ( ruTanks2 , veh ) else
23572: LD_ADDR_EXP 80
23576: PUSH
23577: LD_EXP 80
23581: PPUSH
23582: LD_VAR 0 1
23586: PPUSH
23587: CALL 92209 0 2
23591: ST_TO_ADDR
23592: GO 23614
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23594: LD_ADDR_EXP 81
23598: PUSH
23599: LD_EXP 81
23603: PPUSH
23604: LD_VAR 0 1
23608: PPUSH
23609: CALL 92209 0 2
23613: ST_TO_ADDR
// end ; end ; end ;
23614: PPOPN 3
23616: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
23617: LD_INT 0
23619: PPUSH
23620: PPUSH
23621: PPUSH
// begin side := GetSide ( driver ) ;
23622: LD_ADDR_VAR 0 7
23626: PUSH
23627: LD_VAR 0 1
23631: PPUSH
23632: CALL_OW 255
23636: ST_TO_ADDR
// if side = 5 then
23637: LD_VAR 0 7
23641: PUSH
23642: LD_INT 5
23644: EQUAL
23645: IFFALSE 23725
// begin arAttackersVeh := arAttackersVeh diff driver ;
23647: LD_ADDR_EXP 58
23651: PUSH
23652: LD_EXP 58
23656: PUSH
23657: LD_VAR 0 1
23661: DIFF
23662: ST_TO_ADDR
// ComMoveXY ( driver , 189 , 80 ) ;
23663: LD_VAR 0 1
23667: PPUSH
23668: LD_INT 189
23670: PPUSH
23671: LD_INT 80
23673: PPUSH
23674: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23678: LD_INT 35
23680: PPUSH
23681: CALL_OW 67
// if not IsOk ( driver ) then
23685: LD_VAR 0 1
23689: PPUSH
23690: CALL_OW 302
23694: NOT
23695: IFFALSE 23699
// exit ;
23697: GO 24249
// until IsAt ( driver , 189 , 80 ) ;
23699: LD_VAR 0 1
23703: PPUSH
23704: LD_INT 189
23706: PPUSH
23707: LD_INT 80
23709: PPUSH
23710: CALL_OW 307
23714: IFFALSE 23678
// RemoveUnit ( driver ) ;
23716: LD_VAR 0 1
23720: PPUSH
23721: CALL_OW 64
// end ; if side = 6 then
23725: LD_VAR 0 7
23729: PUSH
23730: LD_INT 6
23732: EQUAL
23733: IFFALSE 23791
// begin repeat ComMoveToArea ( driver , arAttackSpawn2Area ) ;
23735: LD_VAR 0 1
23739: PPUSH
23740: LD_INT 19
23742: PPUSH
23743: CALL_OW 113
// wait ( 0 0$3 ) ;
23747: LD_INT 105
23749: PPUSH
23750: CALL_OW 67
// if not IsOk ( driver ) then
23754: LD_VAR 0 1
23758: PPUSH
23759: CALL_OW 302
23763: NOT
23764: IFFALSE 23768
// exit ;
23766: GO 24249
// until IsInArea ( driver , arAttackSpawn2Area ) ;
23768: LD_VAR 0 1
23772: PPUSH
23773: LD_INT 19
23775: PPUSH
23776: CALL_OW 308
23780: IFFALSE 23735
// RemoveUnit ( driver ) ;
23782: LD_VAR 0 1
23786: PPUSH
23787: CALL_OW 64
// end ; if side = 3 then
23791: LD_VAR 0 7
23795: PUSH
23796: LD_INT 3
23798: EQUAL
23799: IFFALSE 24249
// begin if driver in ruMech then
23801: LD_VAR 0 1
23805: PUSH
23806: LD_EXP 63
23810: IN
23811: IFFALSE 24025
// begin ComMoveToArea ( driver , ruBaseArea ) ;
23813: LD_VAR 0 1
23817: PPUSH
23818: LD_EXP 66
23822: PPUSH
23823: CALL_OW 113
// SetTag ( driver , tMech ) ;
23827: LD_VAR 0 1
23831: PPUSH
23832: LD_INT 7
23834: PPUSH
23835: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
23839: LD_ADDR_VAR 0 6
23843: PUSH
23844: LD_EXP 66
23848: PPUSH
23849: LD_INT 22
23851: PUSH
23852: LD_INT 3
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 30
23861: PUSH
23862: LD_INT 3
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 50
23871: PUSH
23872: EMPTY
23873: LIST
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: LIST
23879: PPUSH
23880: CALL_OW 70
23884: ST_TO_ADDR
// if fac then
23885: LD_VAR 0 6
23889: IFFALSE 23911
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
23891: LD_VAR 0 1
23895: PPUSH
23896: LD_VAR 0 6
23900: PUSH
23901: LD_INT 1
23903: ARRAY
23904: PPUSH
23905: CALL_OW 180
// exit ;
23909: GO 24249
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
23911: LD_ADDR_VAR 0 5
23915: PUSH
23916: LD_EXP 66
23920: PPUSH
23921: LD_INT 22
23923: PUSH
23924: LD_INT 3
23926: PUSH
23927: EMPTY
23928: LIST
23929: LIST
23930: PUSH
23931: LD_INT 2
23933: PUSH
23934: LD_INT 30
23936: PUSH
23937: LD_INT 4
23939: PUSH
23940: EMPTY
23941: LIST
23942: LIST
23943: PUSH
23944: LD_INT 30
23946: PUSH
23947: LD_INT 5
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: PUSH
23954: EMPTY
23955: LIST
23956: LIST
23957: LIST
23958: PUSH
23959: LD_INT 3
23961: PUSH
23962: LD_INT 62
23964: PUSH
23965: EMPTY
23966: LIST
23967: PUSH
23968: EMPTY
23969: LIST
23970: LIST
23971: PUSH
23972: LD_INT 50
23974: PUSH
23975: EMPTY
23976: LIST
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: PPUSH
23984: CALL_OW 70
23988: ST_TO_ADDR
// if arm then
23989: LD_VAR 0 5
23993: IFFALSE 24025
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
23995: LD_VAR 0 1
23999: PPUSH
24000: LD_VAR 0 5
24004: PUSH
24005: LD_INT 1
24007: ARRAY
24008: PPUSH
24009: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
24013: LD_VAR 0 1
24017: PPUSH
24018: LD_INT 1
24020: PPUSH
24021: CALL_OW 183
// end ; end ; if driver in ruMech2 then
24025: LD_VAR 0 1
24029: PUSH
24030: LD_EXP 64
24034: IN
24035: IFFALSE 24249
// begin ComMoveToArea ( driver , ruBaseArea2 ) ;
24037: LD_VAR 0 1
24041: PPUSH
24042: LD_EXP 67
24046: PPUSH
24047: CALL_OW 113
// SetTag ( driver , tMech ) ;
24051: LD_VAR 0 1
24055: PPUSH
24056: LD_INT 7
24058: PPUSH
24059: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
24063: LD_ADDR_VAR 0 6
24067: PUSH
24068: LD_EXP 67
24072: PPUSH
24073: LD_INT 22
24075: PUSH
24076: LD_INT 3
24078: PUSH
24079: EMPTY
24080: LIST
24081: LIST
24082: PUSH
24083: LD_INT 30
24085: PUSH
24086: LD_INT 3
24088: PUSH
24089: EMPTY
24090: LIST
24091: LIST
24092: PUSH
24093: LD_INT 50
24095: PUSH
24096: EMPTY
24097: LIST
24098: PUSH
24099: EMPTY
24100: LIST
24101: LIST
24102: LIST
24103: PPUSH
24104: CALL_OW 70
24108: ST_TO_ADDR
// if fac then
24109: LD_VAR 0 6
24113: IFFALSE 24135
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
24115: LD_VAR 0 1
24119: PPUSH
24120: LD_VAR 0 6
24124: PUSH
24125: LD_INT 1
24127: ARRAY
24128: PPUSH
24129: CALL_OW 180
// exit ;
24133: GO 24249
// end ; arm := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
24135: LD_ADDR_VAR 0 5
24139: PUSH
24140: LD_EXP 67
24144: PPUSH
24145: LD_INT 22
24147: PUSH
24148: LD_INT 3
24150: PUSH
24151: EMPTY
24152: LIST
24153: LIST
24154: PUSH
24155: LD_INT 2
24157: PUSH
24158: LD_INT 30
24160: PUSH
24161: LD_INT 4
24163: PUSH
24164: EMPTY
24165: LIST
24166: LIST
24167: PUSH
24168: LD_INT 30
24170: PUSH
24171: LD_INT 5
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: LIST
24182: PUSH
24183: LD_INT 3
24185: PUSH
24186: LD_INT 62
24188: PUSH
24189: EMPTY
24190: LIST
24191: PUSH
24192: EMPTY
24193: LIST
24194: LIST
24195: PUSH
24196: LD_INT 50
24198: PUSH
24199: EMPTY
24200: LIST
24201: PUSH
24202: EMPTY
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: PPUSH
24208: CALL_OW 70
24212: ST_TO_ADDR
// if arm then
24213: LD_VAR 0 5
24217: IFFALSE 24249
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
24219: LD_VAR 0 1
24223: PPUSH
24224: LD_VAR 0 5
24228: PUSH
24229: LD_INT 1
24231: ARRAY
24232: PPUSH
24233: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
24237: LD_VAR 0 1
24241: PPUSH
24242: LD_INT 1
24244: PPUSH
24245: CALL_OW 183
// end ; end ; end ; end ;
24249: PPOPN 7
24251: END
// on EndTheMissionRaised ( ev ) do begin end_the_mission_allowed = false ;
24252: LD_ADDR_OWVAR 57
24256: PUSH
24257: LD_INT 0
24259: ST_TO_ADDR
// FinishMission ;
24260: CALL 32124 0 0
// end ;
24264: PPOPN 1
24266: END
// on BuildingComplete ( b ) do var side , type ;
24267: LD_INT 0
24269: PPUSH
24270: PPUSH
// begin side := GetSide ( b ) ;
24271: LD_ADDR_VAR 0 2
24275: PUSH
24276: LD_VAR 0 1
24280: PPUSH
24281: CALL_OW 255
24285: ST_TO_ADDR
// type := GetBType ( b ) ;
24286: LD_ADDR_VAR 0 3
24290: PUSH
24291: LD_VAR 0 1
24295: PPUSH
24296: CALL_OW 266
24300: ST_TO_ADDR
// if side = 2 then
24301: LD_VAR 0 2
24305: PUSH
24306: LD_INT 2
24308: EQUAL
24309: IFFALSE 24329
// arBuildings := Delete ( arBuildings , 1 ) ;
24311: LD_ADDR_EXP 53
24315: PUSH
24316: LD_EXP 53
24320: PPUSH
24321: LD_INT 1
24323: PPUSH
24324: CALL_OW 3
24328: ST_TO_ADDR
// if side = 1 then
24329: LD_VAR 0 2
24333: PUSH
24334: LD_INT 1
24336: EQUAL
24337: IFFALSE 24399
// if type = b_depot and not hasBase then
24339: LD_VAR 0 3
24343: PUSH
24344: LD_INT 0
24346: EQUAL
24347: PUSH
24348: LD_EXP 9
24352: NOT
24353: AND
24354: IFFALSE 24399
// begin hasBase := true ;
24356: LD_ADDR_EXP 9
24360: PUSH
24361: LD_INT 1
24363: ST_TO_ADDR
// epsilon := b ;
24364: LD_ADDR_EXP 10
24368: PUSH
24369: LD_VAR 0 1
24373: ST_TO_ADDR
// SetBName ( b , epsilon ) ;
24374: LD_VAR 0 1
24378: PPUSH
24379: LD_STRING epsilon
24381: PPUSH
24382: CALL_OW 500
// SetRestrict ( b_depot , 1 , false ) ;
24386: LD_INT 0
24388: PPUSH
24389: LD_INT 1
24391: PPUSH
24392: LD_INT 0
24394: PPUSH
24395: CALL_OW 324
// end ; if side = 3 then
24399: LD_VAR 0 2
24403: PUSH
24404: LD_INT 3
24406: EQUAL
24407: IFFALSE 24693
// begin if IsInArea ( b , ruBaseArea ) then
24409: LD_VAR 0 1
24413: PPUSH
24414: LD_EXP 66
24418: PPUSH
24419: CALL_OW 308
24423: IFFALSE 24443
// ruBuildings := Delete ( ruBuildings , 1 ) ;
24425: LD_ADDR_EXP 76
24429: PUSH
24430: LD_EXP 76
24434: PPUSH
24435: LD_INT 1
24437: PPUSH
24438: CALL_OW 3
24442: ST_TO_ADDR
// if IsInArea ( b , ruBaseArea2 ) then
24443: LD_VAR 0 1
24447: PPUSH
24448: LD_EXP 67
24452: PPUSH
24453: CALL_OW 308
24457: IFFALSE 24477
// ruBuildings2 := Delete ( ruBuildings2 , 1 ) ;
24459: LD_ADDR_EXP 77
24463: PUSH
24464: LD_EXP 77
24468: PPUSH
24469: LD_INT 1
24471: PPUSH
24472: CALL_OW 3
24476: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
24477: LD_VAR 0 3
24481: PUSH
24482: LD_INT 0
24484: PUSH
24485: LD_INT 4
24487: PUSH
24488: LD_INT 2
24490: PUSH
24491: EMPTY
24492: LIST
24493: LIST
24494: LIST
24495: IN
24496: IFFALSE 24507
// ComUpgrade ( b ) ;
24498: LD_VAR 0 1
24502: PPUSH
24503: CALL_OW 146
// if type = b_lab then
24507: LD_VAR 0 3
24511: PUSH
24512: LD_INT 6
24514: EQUAL
24515: IFFALSE 24559
// if IsInArea ( b , ruBaseArea ) then
24517: LD_VAR 0 1
24521: PPUSH
24522: LD_EXP 66
24526: PPUSH
24527: CALL_OW 308
24531: IFFALSE 24547
// ComUpgradeLab ( b , b_lab_weapon ) else
24533: LD_VAR 0 1
24537: PPUSH
24538: LD_INT 10
24540: PPUSH
24541: CALL_OW 147
24545: GO 24559
// ComUpgradeLab ( b , b_lab_computer ) ;
24547: LD_VAR 0 1
24551: PPUSH
24552: LD_INT 12
24554: PPUSH
24555: CALL_OW 147
// if type = b_depot then
24559: LD_VAR 0 3
24563: PUSH
24564: LD_INT 0
24566: EQUAL
24567: IFFALSE 24693
// begin SetResourceType ( GetBase ( b ) , mat_cans , 2550 ) ;
24569: LD_VAR 0 1
24573: PPUSH
24574: CALL_OW 274
24578: PPUSH
24579: LD_INT 1
24581: PPUSH
24582: LD_INT 2550
24584: PPUSH
24585: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
24589: LD_VAR 0 1
24593: PPUSH
24594: CALL_OW 274
24598: PPUSH
24599: LD_INT 2
24601: PPUSH
24602: LD_INT 250
24604: PPUSH
24605: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 200 ) ;
24609: LD_VAR 0 1
24613: PPUSH
24614: CALL_OW 274
24618: PPUSH
24619: LD_INT 3
24621: PPUSH
24622: LD_INT 200
24624: PPUSH
24625: CALL_OW 277
// if IsInArea ( b , ruBaseArea ) then
24629: LD_VAR 0 1
24633: PPUSH
24634: LD_EXP 66
24638: PPUSH
24639: CALL_OW 308
24643: IFFALSE 24667
// begin ruBase := b ;
24645: LD_ADDR_EXP 68
24649: PUSH
24650: LD_VAR 0 1
24654: ST_TO_ADDR
// SetBName ( b , chuikov ) ;
24655: LD_VAR 0 1
24659: PPUSH
24660: LD_STRING chuikov
24662: PPUSH
24663: CALL_OW 500
// end ; if IsInArea ( b , ruBaseArea2 ) then
24667: LD_VAR 0 1
24671: PPUSH
24672: LD_EXP 67
24676: PPUSH
24677: CALL_OW 308
24681: IFFALSE 24693
// begin ruBase2 := b ;
24683: LD_ADDR_EXP 69
24687: PUSH
24688: LD_VAR 0 1
24692: ST_TO_ADDR
// end ; end ; end ; end ;
24693: PPOPN 3
24695: END
// on UpgradeComplete ( b ) do var side , type ;
24696: LD_INT 0
24698: PPUSH
24699: PPUSH
// begin side := GetSide ( b ) ;
24700: LD_ADDR_VAR 0 2
24704: PUSH
24705: LD_VAR 0 1
24709: PPUSH
24710: CALL_OW 255
24714: ST_TO_ADDR
// type := GetBType ( b ) ;
24715: LD_ADDR_VAR 0 3
24719: PUSH
24720: LD_VAR 0 1
24724: PPUSH
24725: CALL_OW 266
24729: ST_TO_ADDR
// if side = 3 then
24730: LD_VAR 0 2
24734: PUSH
24735: LD_INT 3
24737: EQUAL
24738: IFFALSE 24792
// if type = b_lab_half then
24740: LD_VAR 0 3
24744: PUSH
24745: LD_INT 7
24747: EQUAL
24748: IFFALSE 24792
// if IsInArea ( b , ruBaseArea ) then
24750: LD_VAR 0 1
24754: PPUSH
24755: LD_EXP 66
24759: PPUSH
24760: CALL_OW 308
24764: IFFALSE 24780
// ComUpgradeLab ( b , b_lab_spacetime ) else
24766: LD_VAR 0 1
24770: PPUSH
24771: LD_INT 14
24773: PPUSH
24774: CALL_OW 147
24778: GO 24792
// ComUpgradeLab ( b , b_lab_siberium ) ;
24780: LD_VAR 0 1
24784: PPUSH
24785: LD_INT 11
24787: PPUSH
24788: CALL_OW 147
// end ;
24792: PPOPN 3
24794: END
// on ResearchComplete ( tech , lab ) do var side ;
24795: LD_INT 0
24797: PPUSH
// begin side := GetSide ( lab ) ;
24798: LD_ADDR_VAR 0 3
24802: PUSH
24803: LD_VAR 0 2
24807: PPUSH
24808: CALL_OW 255
24812: ST_TO_ADDR
// if side = 2 then
24813: LD_VAR 0 3
24817: PUSH
24818: LD_INT 2
24820: EQUAL
24821: IFFALSE 24869
// begin arTech := Delete ( arTech , 1 ) ;
24823: LD_ADDR_EXP 52
24827: PUSH
24828: LD_EXP 52
24832: PPUSH
24833: LD_INT 1
24835: PPUSH
24836: CALL_OW 3
24840: ST_TO_ADDR
// if tech = tech_sibPow then
24841: LD_VAR 0 1
24845: PUSH
24846: LD_INT 21
24848: EQUAL
24849: IFFALSE 24855
// DArabTrait1 ;
24851: CALL 29062 0 0
// if tech = tech_sibEng then
24855: LD_VAR 0 1
24859: PUSH
24860: LD_INT 22
24862: EQUAL
24863: IFFALSE 24869
// DArabTrait2 ;
24865: CALL 29393 0 0
// end ; end ;
24869: PPOPN 3
24871: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
24872: LD_VAR 0 1
24876: PPUSH
24877: CALL 49883 0 1
// end ;
24881: PPOPN 1
24883: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
24884: LD_VAR 0 1
24888: PUSH
24889: LD_INT 1
24891: EQUAL
24892: PUSH
24893: LD_VAR 0 2
24897: PUSH
24898: LD_INT 2
24900: EQUAL
24901: AND
24902: PUSH
24903: LD_INT 1
24905: PPUSH
24906: LD_INT 2
24908: PPUSH
24909: CALL_OW 81
24913: PUSH
24914: LD_INT 1
24916: EQUAL
24917: AND
24918: IFFALSE 24924
// DAttackOnAlly ;
24920: CALL 26778 0 0
// end ;
24924: PPOPN 2
24926: END
// on SailEvent ( event ) do begin case event of EArabAttack :
24927: LD_VAR 0 1
24931: PUSH
24932: LD_INT 101
24934: DOUBLE
24935: EQUAL
24936: IFTRUE 24940
24938: GO 24947
24940: POP
// ArabAttack ; ERussianBaseC :
24941: CALL 7224 0 0
24945: GO 25099
24947: LD_INT 102
24949: DOUBLE
24950: EQUAL
24951: IFTRUE 24955
24953: GO 24976
24955: POP
// RussianBase ( ruForces union ruCommander , 1 ) ; ERussianBaseW :
24956: LD_EXP 59
24960: PUSH
24961: LD_EXP 61
24965: UNION
24966: PPUSH
24967: LD_INT 1
24969: PPUSH
24970: CALL 10816 0 2
24974: GO 25099
24976: LD_INT 103
24978: DOUBLE
24979: EQUAL
24980: IFTRUE 24984
24982: GO 25005
24984: POP
// RussianBase ( ruForces union ruCommander , 2 ) ; ERussianBaseE :
24985: LD_EXP 59
24989: PUSH
24990: LD_EXP 61
24994: UNION
24995: PPUSH
24996: LD_INT 2
24998: PPUSH
24999: CALL 10816 0 2
25003: GO 25099
25005: LD_INT 104
25007: DOUBLE
25008: EQUAL
25009: IFTRUE 25013
25011: GO 25034
25013: POP
// RussianBase ( ruForces union ruCommander , 3 ) ; ERussianBaseW2 :
25014: LD_EXP 59
25018: PUSH
25019: LD_EXP 61
25023: UNION
25024: PPUSH
25025: LD_INT 3
25027: PPUSH
25028: CALL 10816 0 2
25032: GO 25099
25034: LD_INT 105
25036: DOUBLE
25037: EQUAL
25038: IFTRUE 25042
25040: GO 25063
25042: POP
// RussianBase2 ( ruForces2 union ruCommander2 , 2 ) ; EExtraAttack :
25043: LD_EXP 60
25047: PUSH
25048: LD_EXP 62
25052: UNION
25053: PPUSH
25054: LD_INT 2
25056: PPUSH
25057: CALL 12325 0 2
25061: GO 25099
25063: LD_INT 106
25065: DOUBLE
25066: EQUAL
25067: IFTRUE 25071
25069: GO 25078
25071: POP
// RussianExtraAttack ; ESendRussianAttack :
25072: CALL 20230 0 0
25076: GO 25099
25078: LD_INT 107
25080: DOUBLE
25081: EQUAL
25082: IFTRUE 25086
25084: GO 25098
25086: POP
// SendRussianAttack ( russianWaveAttack ) ; end ;
25087: LD_EXP 18
25091: PPUSH
25092: CALL 21324 0 1
25096: GO 25099
25098: POP
// end ; end_of_file
25099: PPOPN 1
25101: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
25102: LD_INT 0
25104: PPUSH
25105: PPUSH
25106: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
25107: LD_ADDR_VAR 0 1
25111: PUSH
25112: LD_VAR 0 1
25116: PUSH
25117: LD_EXP 23
25121: PUSH
25122: LD_EXP 24
25126: PUSH
25127: LD_EXP 25
25131: PUSH
25132: LD_EXP 26
25136: PUSH
25137: LD_EXP 27
25141: PUSH
25142: LD_EXP 28
25146: PUSH
25147: LD_EXP 29
25151: PUSH
25152: LD_EXP 30
25156: PUSH
25157: LD_EXP 31
25161: PUSH
25162: LD_EXP 32
25166: PUSH
25167: LD_EXP 33
25171: PUSH
25172: LD_EXP 34
25176: PUSH
25177: LD_EXP 35
25181: PUSH
25182: LD_EXP 36
25186: PUSH
25187: LD_EXP 37
25191: PUSH
25192: LD_EXP 38
25196: PUSH
25197: LD_EXP 39
25201: PUSH
25202: LD_EXP 40
25206: PUSH
25207: LD_EXP 42
25211: PUSH
25212: LD_EXP 44
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: LIST
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: LIST
25226: LIST
25227: LIST
25228: LIST
25229: LIST
25230: LIST
25231: LIST
25232: LIST
25233: LIST
25234: LIST
25235: LIST
25236: LIST
25237: LIST
25238: DIFF
25239: ST_TO_ADDR
// if not characters then
25240: LD_VAR 0 1
25244: NOT
25245: IFFALSE 25249
// exit ;
25247: GO 25333
// speaker := characters [ rand ( 1 , Count ( characters ) ) ] ;
25249: LD_ADDR_VAR 0 6
25253: PUSH
25254: LD_VAR 0 1
25258: PUSH
25259: LD_INT 1
25261: PPUSH
25262: LD_VAR 0 1
25266: PPUSH
25267: CALL 56609 0 1
25271: PPUSH
25272: CALL_OW 12
25276: ARRAY
25277: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
25278: LD_VAR 0 6
25282: PPUSH
25283: CALL_OW 258
25287: PUSH
25288: LD_INT 1
25290: EQUAL
25291: IFFALSE 25309
// Say ( speaker , dialogMID ) else
25293: LD_VAR 0 6
25297: PPUSH
25298: LD_VAR 0 2
25302: PPUSH
25303: CALL_OW 88
25307: GO 25323
// Say ( speaker , dialogFID ) ;
25309: LD_VAR 0 6
25313: PPUSH
25314: LD_VAR 0 3
25318: PPUSH
25319: CALL_OW 88
// result := speaker ;
25323: LD_ADDR_VAR 0 4
25327: PUSH
25328: LD_VAR 0 6
25332: ST_TO_ADDR
// end ;
25333: LD_VAR 0 4
25337: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
25338: LD_INT 0
25340: PPUSH
25341: PPUSH
25342: PPUSH
// if btype = b_depot then
25343: LD_VAR 0 2
25347: PUSH
25348: LD_INT 0
25350: EQUAL
25351: IFFALSE 25363
// begin result := true ;
25353: LD_ADDR_VAR 0 3
25357: PUSH
25358: LD_INT 1
25360: ST_TO_ADDR
// exit ;
25361: GO 25479
// end ; pom := GetBase ( depot ) ;
25363: LD_ADDR_VAR 0 4
25367: PUSH
25368: LD_VAR 0 1
25372: PPUSH
25373: CALL_OW 274
25377: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
25378: LD_ADDR_VAR 0 5
25382: PUSH
25383: LD_VAR 0 2
25387: PPUSH
25388: LD_VAR 0 1
25392: PPUSH
25393: CALL_OW 248
25397: PPUSH
25398: CALL_OW 450
25402: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
25403: LD_ADDR_VAR 0 3
25407: PUSH
25408: LD_VAR 0 4
25412: PPUSH
25413: LD_INT 1
25415: PPUSH
25416: CALL_OW 275
25420: PUSH
25421: LD_VAR 0 5
25425: PUSH
25426: LD_INT 1
25428: ARRAY
25429: GREATEREQUAL
25430: PUSH
25431: LD_VAR 0 4
25435: PPUSH
25436: LD_INT 2
25438: PPUSH
25439: CALL_OW 275
25443: PUSH
25444: LD_VAR 0 5
25448: PUSH
25449: LD_INT 2
25451: ARRAY
25452: GREATEREQUAL
25453: AND
25454: PUSH
25455: LD_VAR 0 4
25459: PPUSH
25460: LD_INT 3
25462: PPUSH
25463: CALL_OW 275
25467: PUSH
25468: LD_VAR 0 5
25472: PUSH
25473: LD_INT 3
25475: ARRAY
25476: GREATEREQUAL
25477: AND
25478: ST_TO_ADDR
// end ; end_of_file
25479: LD_VAR 0 3
25483: RET
// export function Action ; begin
25484: LD_INT 0
25486: PPUSH
// InGameOn ;
25487: CALL_OW 8
// CenterNowOnXY ( 25 , 35 ) ;
25491: LD_INT 25
25493: PPUSH
25494: LD_INT 35
25496: PPUSH
25497: CALL_OW 86
// RevealFogArea ( 1 , arBaseArea ) ;
25501: LD_INT 1
25503: PPUSH
25504: LD_INT 5
25506: PPUSH
25507: CALL_OW 332
// RevealFogArea ( 1 , epsilonSpawnArea ) ;
25511: LD_INT 1
25513: PPUSH
25514: LD_INT 4
25516: PPUSH
25517: CALL_OW 332
// wait ( 0 0$1.5 ) ;
25521: LD_INT 52
25523: PPUSH
25524: CALL_OW 67
// CenterNowOnUnits ( Simms ) ;
25528: LD_EXP 33
25532: PPUSH
25533: CALL_OW 87
// wait ( 0 0$3 ) ;
25537: LD_INT 105
25539: PPUSH
25540: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
25544: LD_EXP 23
25548: PPUSH
25549: CALL_OW 310
25553: PPUSH
25554: CALL_OW 85
// wait ( 0 0$1 ) ;
25558: LD_INT 35
25560: PPUSH
25561: CALL_OW 67
// if IsOk ( Gary ) then
25565: LD_EXP 32
25569: PPUSH
25570: CALL_OW 302
25574: IFFALSE 25612
// begin Say ( Gary , D2-Gary-1 ) ;
25576: LD_EXP 32
25580: PPUSH
25581: LD_STRING D2-Gary-1
25583: PPUSH
25584: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
25588: LD_EXP 23
25592: PPUSH
25593: LD_STRING D2-JMM-1
25595: PPUSH
25596: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
25600: LD_EXP 32
25604: PPUSH
25605: LD_STRING D2-Gary-2
25607: PPUSH
25608: CALL_OW 88
// end ; InGameOff ;
25612: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
25616: LD_STRING M1
25618: PPUSH
25619: CALL_OW 337
// SaveForQuickRestart ;
25623: CALL_OW 22
// end ;
25627: LD_VAR 0 1
25631: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var i , p ;
25632: LD_EXP 23
25636: PPUSH
25637: LD_EXP 33
25641: PPUSH
25642: CALL_OW 296
25646: PUSH
25647: LD_INT 15
25649: LESS
25650: IFFALSE 26610
25652: GO 25654
25654: DISABLE
25655: LD_INT 0
25657: PPUSH
25658: PPUSH
// begin wait ( 0 0$3 ) ;
25659: LD_INT 105
25661: PPUSH
25662: CALL_OW 67
// Video ( true ) ;
25666: LD_INT 1
25668: PPUSH
25669: CALL 92181 0 1
// ComExitVehicle ( JMM ) ;
25673: LD_EXP 23
25677: PPUSH
25678: CALL_OW 121
// AddComMoveUnit ( JMM , Simms ) ;
25682: LD_EXP 23
25686: PPUSH
25687: LD_EXP 33
25691: PPUSH
25692: CALL_OW 172
// CenterNowOnUnits ( JMM ) ;
25696: LD_EXP 23
25700: PPUSH
25701: CALL_OW 87
// if Truman then
25705: LD_EXP 43
25709: IFFALSE 25846
// begin ComMoveUnit ( Truman , JMM ) ;
25711: LD_EXP 43
25715: PPUSH
25716: LD_EXP 23
25720: PPUSH
25721: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
25725: LD_INT 35
25727: PPUSH
25728: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
25732: LD_EXP 43
25736: PPUSH
25737: LD_EXP 23
25741: PPUSH
25742: CALL_OW 296
25746: PUSH
25747: LD_INT 6
25749: LESS
25750: IFFALSE 25725
// ComTurnUnit ( Truman , JMM ) ;
25752: LD_EXP 43
25756: PPUSH
25757: LD_EXP 23
25761: PPUSH
25762: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
25766: LD_EXP 23
25770: PPUSH
25771: LD_EXP 43
25775: PPUSH
25776: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
25780: LD_EXP 43
25784: PPUSH
25785: LD_STRING D2-Tru-1
25787: PPUSH
25788: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
25792: LD_EXP 23
25796: PPUSH
25797: LD_STRING D2-JMM-Tru-1
25799: PPUSH
25800: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
25804: LD_EXP 43
25808: PPUSH
25809: LD_STRING D2-Tru-2
25811: PPUSH
25812: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
25816: LD_EXP 43
25820: PPUSH
25821: LD_INT 79
25823: PPUSH
25824: LD_INT 41
25826: PPUSH
25827: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
25831: LD_EXP 43
25835: PPUSH
25836: LD_INT 17
25838: PPUSH
25839: LD_INT 31
25841: PPUSH
25842: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
25846: LD_EXP 23
25850: PPUSH
25851: LD_EXP 33
25855: PPUSH
25856: CALL_OW 179
// p := 15 ;
25860: LD_ADDR_VAR 0 2
25864: PUSH
25865: LD_INT 15
25867: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25868: LD_INT 35
25870: PPUSH
25871: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25875: LD_EXP 33
25879: PUSH
25880: LD_EXP 35
25884: PUSH
25885: LD_EXP 34
25889: PUSH
25890: LD_EXP 36
25894: PUSH
25895: LD_EXP 30
25899: PUSH
25900: EMPTY
25901: LIST
25902: LIST
25903: LIST
25904: LIST
25905: LIST
25906: PPUSH
25907: LD_EXP 23
25911: PPUSH
25912: CALL_OW 112
// p := p - 1 ;
25916: LD_ADDR_VAR 0 2
25920: PUSH
25921: LD_VAR 0 2
25925: PUSH
25926: LD_INT 1
25928: MINUS
25929: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
25930: LD_EXP 23
25934: PPUSH
25935: LD_EXP 33
25939: PPUSH
25940: CALL_OW 296
25944: PUSH
25945: LD_INT 5
25947: LESS
25948: PUSH
25949: LD_VAR 0 2
25953: PUSH
25954: LD_INT 0
25956: LESSEQUAL
25957: OR
25958: IFFALSE 25868
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25960: LD_EXP 33
25964: PUSH
25965: LD_EXP 35
25969: PUSH
25970: LD_EXP 34
25974: PUSH
25975: LD_EXP 36
25979: PUSH
25980: LD_EXP 30
25984: PUSH
25985: EMPTY
25986: LIST
25987: LIST
25988: LIST
25989: LIST
25990: LIST
25991: PPUSH
25992: LD_EXP 23
25996: PPUSH
25997: CALL_OW 119
// if not IsInUnit ( JMM ) then
26001: LD_EXP 23
26005: PPUSH
26006: CALL_OW 310
26010: NOT
26011: IFFALSE 26027
// ComTurnUnit ( JMM , Simms ) ;
26013: LD_EXP 23
26017: PPUSH
26018: LD_EXP 33
26022: PPUSH
26023: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
26027: LD_EXP 33
26031: PUSH
26032: LD_EXP 35
26036: PUSH
26037: LD_EXP 34
26041: PUSH
26042: LD_EXP 36
26046: PUSH
26047: EMPTY
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: PPUSH
26053: LD_EXP 23
26057: PPUSH
26058: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
26062: LD_EXP 23
26066: PUSH
26067: LD_EXP 33
26071: PUSH
26072: EMPTY
26073: LIST
26074: LIST
26075: PPUSH
26076: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
26080: LD_EXP 33
26084: PPUSH
26085: LD_STRING D2a-Sim-1
26087: PPUSH
26088: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
26092: LD_EXP 23
26096: PPUSH
26097: LD_STRING D2a-JMM-1
26099: PPUSH
26100: CALL_OW 88
// if IsOk ( Joan ) then
26104: LD_EXP 35
26108: PPUSH
26109: CALL_OW 302
26113: IFFALSE 26191
// begin if not IsInUnit ( JMM ) then
26115: LD_EXP 23
26119: PPUSH
26120: CALL_OW 310
26124: NOT
26125: IFFALSE 26141
// ComTurnUnit ( JMM , Joan ) ;
26127: LD_EXP 23
26131: PPUSH
26132: LD_EXP 35
26136: PPUSH
26137: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
26141: LD_EXP 35
26145: PPUSH
26146: LD_EXP 23
26150: PPUSH
26151: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
26155: LD_EXP 35
26159: PPUSH
26160: LD_STRING D2b-Joan-1
26162: PPUSH
26163: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
26167: LD_EXP 23
26171: PPUSH
26172: LD_STRING D2b-JMM-1
26174: PPUSH
26175: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
26179: LD_EXP 35
26183: PPUSH
26184: LD_STRING D2b-Joan-2
26186: PPUSH
26187: CALL_OW 88
// end ; if IsOk ( Denis ) then
26191: LD_EXP 34
26195: PPUSH
26196: CALL_OW 302
26200: IFFALSE 26254
// begin if not IsInUnit ( JMM ) then
26202: LD_EXP 23
26206: PPUSH
26207: CALL_OW 310
26211: NOT
26212: IFFALSE 26228
// ComTurnUnit ( JMM , Denis ) ;
26214: LD_EXP 23
26218: PPUSH
26219: LD_EXP 34
26223: PPUSH
26224: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
26228: LD_EXP 34
26232: PPUSH
26233: LD_EXP 23
26237: PPUSH
26238: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
26242: LD_EXP 34
26246: PPUSH
26247: LD_STRING D2c-Den-1
26249: PPUSH
26250: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
26254: LD_EXP 30
26258: PPUSH
26259: CALL_OW 302
26263: PUSH
26264: LD_STRING 08_Kikuchi
26266: PPUSH
26267: CALL_OW 28
26271: NOT
26272: AND
26273: IFFALSE 26368
// begin repeat wait ( 0 0$1 ) ;
26275: LD_INT 35
26277: PPUSH
26278: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
26282: LD_EXP 30
26286: PPUSH
26287: LD_EXP 23
26291: PPUSH
26292: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
26296: LD_EXP 23
26300: PPUSH
26301: LD_EXP 30
26305: PPUSH
26306: CALL_OW 296
26310: PUSH
26311: LD_INT 5
26313: LESS
26314: IFFALSE 26275
// ComTurnUnit ( Kikuchi , JMM ) ;
26316: LD_EXP 30
26320: PPUSH
26321: LD_EXP 23
26325: PPUSH
26326: CALL_OW 119
// if not IsInUnit ( JMM ) then
26330: LD_EXP 23
26334: PPUSH
26335: CALL_OW 310
26339: NOT
26340: IFFALSE 26356
// ComTurnUnit ( JMM , Kikuchi ) ;
26342: LD_EXP 23
26346: PPUSH
26347: LD_EXP 30
26351: PPUSH
26352: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
26356: LD_EXP 30
26360: PPUSH
26361: LD_STRING D3b-Yam-1
26363: PPUSH
26364: CALL_OW 88
// end ; if IsOk ( Khatam ) then
26368: LD_EXP 36
26372: PPUSH
26373: CALL_OW 302
26377: IFFALSE 26443
// begin if not IsInUnit ( JMM ) then
26379: LD_EXP 23
26383: PPUSH
26384: CALL_OW 310
26388: NOT
26389: IFFALSE 26405
// ComTurnUnit ( JMM , Khatam ) ;
26391: LD_EXP 23
26395: PPUSH
26396: LD_EXP 36
26400: PPUSH
26401: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
26405: LD_EXP 36
26409: PPUSH
26410: LD_EXP 23
26414: PPUSH
26415: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
26419: LD_EXP 23
26423: PPUSH
26424: LD_STRING D2c-JMM-1
26426: PPUSH
26427: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
26431: LD_EXP 36
26435: PPUSH
26436: LD_STRING D2c-Khat-1
26438: PPUSH
26439: CALL_OW 88
// end ; Video ( false ) ;
26443: LD_INT 0
26445: PPUSH
26446: CALL 92181 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
26450: LD_INT 22
26452: PUSH
26453: LD_INT 4
26455: PUSH
26456: EMPTY
26457: LIST
26458: LIST
26459: PPUSH
26460: CALL_OW 69
26464: PUSH
26465: LD_EXP 43
26469: DIFF
26470: PPUSH
26471: LD_INT 1
26473: PPUSH
26474: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
26478: LD_STRING M1a
26480: PPUSH
26481: CALL_OW 337
// SetRestrict ( b_depot , 1 , true ) ;
26485: LD_INT 0
26487: PPUSH
26488: LD_INT 1
26490: PPUSH
26491: LD_INT 1
26493: PPUSH
26494: CALL_OW 324
// joinedToEpsilon := true ;
26498: LD_ADDR_EXP 7
26502: PUSH
26503: LD_INT 1
26505: ST_TO_ADDR
// wait ( 0 0$30 ) ;
26506: LD_INT 1050
26508: PPUSH
26509: CALL_OW 67
// SpawnConvoy ;
26513: CALL 10352 0 0
// wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26517: LD_INT 25200
26519: PUSH
26520: LD_INT 2100
26522: PUSH
26523: LD_OWVAR 67
26527: MUL
26528: MINUS
26529: PPUSH
26530: CALL_OW 67
// firstAttack := true ;
26534: LD_ADDR_EXP 16
26538: PUSH
26539: LD_INT 1
26541: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26542: LD_INT 107
26544: PPUSH
26545: CALL_OW 427
// for i := 1 to Difficulty do
26549: LD_ADDR_VAR 0 1
26553: PUSH
26554: DOUBLE
26555: LD_INT 1
26557: DEC
26558: ST_TO_ADDR
26559: LD_OWVAR 67
26563: PUSH
26564: FOR_TO
26565: IFFALSE 26608
// begin wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26567: LD_INT 25200
26569: PUSH
26570: LD_INT 2100
26572: PUSH
26573: LD_OWVAR 67
26577: MUL
26578: MINUS
26579: PPUSH
26580: CALL_OW 67
// if not ruActiveAttacks then
26584: LD_EXP 22
26588: NOT
26589: IFFALSE 26599
// ruActiveAttacks := true ;
26591: LD_ADDR_EXP 22
26595: PUSH
26596: LD_INT 1
26598: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26599: LD_INT 107
26601: PPUSH
26602: CALL_OW 427
// end ;
26606: GO 26564
26608: POP
26609: POP
// end ;
26610: PPOPN 2
26612: END
// every 0 0$1 trigger IsOk ( Truman ) and joinedToEpsilon do
26613: LD_EXP 43
26617: PPUSH
26618: CALL_OW 302
26622: PUSH
26623: LD_EXP 7
26627: AND
26628: IFFALSE 26699
26630: GO 26632
26632: DISABLE
// begin enable ;
26633: ENABLE
// if not HasTask ( Truman ) then
26634: LD_EXP 43
26638: PPUSH
26639: CALL_OW 314
26643: NOT
26644: IFFALSE 26658
// ComMoveToArea ( Truman , removeArea ) ;
26646: LD_EXP 43
26650: PPUSH
26651: LD_INT 10
26653: PPUSH
26654: CALL_OW 113
// if IsAt ( Truman , 17 , 32 ) or IsInArea ( Truman , removeArea ) then
26658: LD_EXP 43
26662: PPUSH
26663: LD_INT 17
26665: PPUSH
26666: LD_INT 32
26668: PPUSH
26669: CALL_OW 307
26673: PUSH
26674: LD_EXP 43
26678: PPUSH
26679: LD_INT 10
26681: PPUSH
26682: CALL_OW 308
26686: OR
26687: IFFALSE 26699
// begin RemoveUnit ( Truman ) ;
26689: LD_EXP 43
26693: PPUSH
26694: CALL_OW 64
// disable ;
26698: DISABLE
// end ; end ;
26699: END
// export function DTankTeleport ( x , y ) ; begin
26700: LD_INT 0
26702: PPUSH
// DialogueOn ;
26703: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
26707: LD_VAR 0 1
26711: PPUSH
26712: LD_VAR 0 2
26716: PPUSH
26717: CALL_OW 86
// if IsOk ( Cyrus ) then
26721: LD_EXP 27
26725: PPUSH
26726: CALL_OW 302
26730: IFFALSE 26746
// Say ( Cyrus , D10-Cyrus-1 ) else
26732: LD_EXP 27
26736: PPUSH
26737: LD_STRING D10-Cyrus-1
26739: PPUSH
26740: CALL_OW 88
26744: GO 26769
// if IsOk ( JMM ) then
26746: LD_EXP 23
26750: PPUSH
26751: CALL_OW 302
26755: IFFALSE 26769
// Say ( JMM , D10-JMM-1 ) ;
26757: LD_EXP 23
26761: PPUSH
26762: LD_STRING D10-JMM-1
26764: PPUSH
26765: CALL_OW 88
// DialogueOff ;
26769: CALL_OW 7
// end ;
26773: LD_VAR 0 3
26777: RET
// export function DAttackOnAlly ; begin
26778: LD_INT 0
26780: PPUSH
// DialogueOn ;
26781: CALL_OW 6
// dwait ( 0 0$0.3 ) ;
26785: LD_INT 10
26787: PPUSH
26788: CALL_OW 68
// SayRadio ( Powell , D6b-Pow-1 ) ;
26792: LD_EXP 44
26796: PPUSH
26797: LD_STRING D6b-Pow-1
26799: PPUSH
26800: CALL_OW 94
// YouLost ( Powell ) ;
26804: LD_STRING Powell
26806: PPUSH
26807: CALL_OW 104
// DialogueOff ;
26811: CALL_OW 7
// end ;
26815: LD_VAR 0 1
26819: RET
// every 0 0$5 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
26820: LD_INT 5
26822: PPUSH
26823: LD_INT 22
26825: PUSH
26826: LD_INT 1
26828: PUSH
26829: EMPTY
26830: LIST
26831: LIST
26832: PUSH
26833: LD_INT 21
26835: PUSH
26836: LD_INT 3
26838: PUSH
26839: EMPTY
26840: LIST
26841: LIST
26842: PUSH
26843: EMPTY
26844: LIST
26845: LIST
26846: PPUSH
26847: CALL_OW 70
26851: PUSH
26852: LD_INT 5
26854: PPUSH
26855: LD_INT 22
26857: PUSH
26858: LD_INT 1
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: PUSH
26865: LD_INT 21
26867: PUSH
26868: LD_INT 2
26870: PUSH
26871: EMPTY
26872: LIST
26873: LIST
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PPUSH
26879: CALL_OW 70
26883: OR
26884: PUSH
26885: LD_INT 1
26887: PPUSH
26888: LD_INT 2
26890: PPUSH
26891: CALL_OW 81
26895: PUSH
26896: LD_INT 1
26898: EQUAL
26899: AND
26900: IFFALSE 27135
26902: GO 26904
26904: DISABLE
// begin if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26905: LD_INT 5
26907: PPUSH
26908: LD_INT 22
26910: PUSH
26911: LD_INT 1
26913: PUSH
26914: EMPTY
26915: LIST
26916: LIST
26917: PUSH
26918: LD_INT 21
26920: PUSH
26921: LD_INT 3
26923: PUSH
26924: EMPTY
26925: LIST
26926: LIST
26927: PUSH
26928: EMPTY
26929: LIST
26930: LIST
26931: PPUSH
26932: CALL_OW 70
26936: PUSH
26937: LD_INT 5
26939: PPUSH
26940: LD_INT 22
26942: PUSH
26943: LD_INT 1
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 21
26952: PUSH
26953: LD_INT 2
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: PUSH
26960: EMPTY
26961: LIST
26962: LIST
26963: PPUSH
26964: CALL_OW 70
26968: OR
26969: PUSH
26970: LD_INT 1
26972: PPUSH
26973: LD_INT 2
26975: PPUSH
26976: CALL_OW 81
26980: PUSH
26981: LD_INT 1
26983: EQUAL
26984: AND
26985: IFFALSE 26994
// Query ( QAttack ) ;
26987: LD_STRING QAttack
26989: PPUSH
26990: CALL_OW 97
// wait ( 0 0$20 ) ;
26994: LD_INT 700
26996: PPUSH
26997: CALL_OW 67
// repeat wait ( 0 0$10 ) ;
27001: LD_INT 350
27003: PPUSH
27004: CALL_OW 67
// if arabianAttack then
27008: LD_EXP 4
27012: IFFALSE 27016
// exit ;
27014: GO 27135
// until ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend ;
27016: LD_INT 5
27018: PPUSH
27019: LD_INT 22
27021: PUSH
27022: LD_INT 1
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: PUSH
27029: LD_INT 21
27031: PUSH
27032: LD_INT 3
27034: PUSH
27035: EMPTY
27036: LIST
27037: LIST
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: PPUSH
27043: CALL_OW 70
27047: PUSH
27048: LD_INT 5
27050: PPUSH
27051: LD_INT 22
27053: PUSH
27054: LD_INT 1
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: PUSH
27061: LD_INT 21
27063: PUSH
27064: LD_INT 2
27066: PUSH
27067: EMPTY
27068: LIST
27069: LIST
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PPUSH
27075: CALL_OW 70
27079: OR
27080: PUSH
27081: LD_INT 1
27083: PPUSH
27084: LD_INT 2
27086: PPUSH
27087: CALL_OW 81
27091: PUSH
27092: LD_INT 1
27094: EQUAL
27095: AND
27096: IFFALSE 27001
// InGameOn ;
27098: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
27102: LD_INT 73
27104: PPUSH
27105: LD_INT 18
27107: PPUSH
27108: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
27112: LD_EXP 44
27116: PPUSH
27117: LD_STRING D6b-Pow-1
27119: PPUSH
27120: CALL_OW 94
// YouLost ( Powell ) ;
27124: LD_STRING Powell
27126: PPUSH
27127: CALL_OW 104
// InGameOff ;
27131: CALL_OW 9
// end ;
27135: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
27136: LD_INT 12
27138: PPUSH
27139: LD_INT 1
27141: PPUSH
27142: CALL_OW 321
27146: PUSH
27147: LD_INT 2
27149: EQUAL
27150: IFFALSE 27162
27152: GO 27154
27154: DISABLE
// ChangeMissionObjectives ( M2b ) ;
27155: LD_STRING M2b
27157: PPUSH
27158: CALL_OW 337
27162: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
27163: LD_INT 32
27165: PPUSH
27166: LD_INT 1
27168: PPUSH
27169: CALL_OW 321
27173: PUSH
27174: LD_INT 2
27176: EQUAL
27177: IFFALSE 27189
27179: GO 27181
27181: DISABLE
// ChangeMissionObjectives ( M2c ) ;
27182: LD_STRING M2c
27184: PPUSH
27185: CALL_OW 337
27189: END
// every 0 0$1 trigger arabianAttack and arabianAttackSpawned and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and UnitFilter ( arAttackersVeh , [ f_ok ] ) = 0 and UnitFilter ( arAttackersInf , [ f_ok ] ) = 0 do
27190: LD_EXP 4
27194: PUSH
27195: LD_EXP 12
27199: AND
27200: PUSH
27201: LD_INT 22
27203: PUSH
27204: LD_INT 2
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: LD_INT 21
27213: PUSH
27214: LD_INT 1
27216: PUSH
27217: EMPTY
27218: LIST
27219: LIST
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: PPUSH
27225: CALL_OW 69
27229: PUSH
27230: LD_INT 0
27232: EQUAL
27233: AND
27234: PUSH
27235: LD_EXP 58
27239: PPUSH
27240: LD_INT 50
27242: PUSH
27243: EMPTY
27244: LIST
27245: PPUSH
27246: CALL_OW 72
27250: PUSH
27251: LD_INT 0
27253: EQUAL
27254: AND
27255: PUSH
27256: LD_EXP 57
27260: PPUSH
27261: LD_INT 50
27263: PUSH
27264: EMPTY
27265: LIST
27266: PPUSH
27267: CALL_OW 72
27271: PUSH
27272: LD_INT 0
27274: EQUAL
27275: AND
27276: IFFALSE 27296
27278: GO 27280
27280: DISABLE
// begin arabianDefeated := true ;
27281: LD_ADDR_EXP 8
27285: PUSH
27286: LD_INT 1
27288: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
27289: LD_STRING M4a
27291: PPUSH
27292: CALL_OW 337
// end ;
27296: END
// every 0 0$1 trigger GetTech ( tech_Sib1 , 1 ) = state_researched and GetTech ( tech_Sib2 , 1 ) = state_researched and GetTech ( tech_SibPow , 1 ) = state_researched and GetTech ( tech_SibEng , 1 ) = state_researched do
27297: LD_INT 54
27299: PPUSH
27300: LD_INT 1
27302: PPUSH
27303: CALL_OW 321
27307: PUSH
27308: LD_INT 2
27310: EQUAL
27311: PUSH
27312: LD_INT 55
27314: PPUSH
27315: LD_INT 1
27317: PPUSH
27318: CALL_OW 321
27322: PUSH
27323: LD_INT 2
27325: EQUAL
27326: AND
27327: PUSH
27328: LD_INT 21
27330: PPUSH
27331: LD_INT 1
27333: PPUSH
27334: CALL_OW 321
27338: PUSH
27339: LD_INT 2
27341: EQUAL
27342: AND
27343: PUSH
27344: LD_INT 22
27346: PPUSH
27347: LD_INT 1
27349: PPUSH
27350: CALL_OW 321
27354: PUSH
27355: LD_INT 2
27357: EQUAL
27358: AND
27359: IFFALSE 27371
27361: GO 27363
27363: DISABLE
// ChangeMissionObjectives ( M2a ) ;
27364: LD_STRING M2a
27366: PPUSH
27367: CALL_OW 337
27371: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) do var garySpeaker , deltaSpeaker , tmp1 , tmp2 , tmp3 ;
27372: LD_INT 22
27374: PUSH
27375: LD_INT 1
27377: PUSH
27378: EMPTY
27379: LIST
27380: LIST
27381: PUSH
27382: LD_INT 3
27384: PUSH
27385: LD_INT 57
27387: PUSH
27388: EMPTY
27389: LIST
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 63
27397: PUSH
27398: LD_INT 11
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: PUSH
27405: EMPTY
27406: LIST
27407: LIST
27408: LIST
27409: PPUSH
27410: CALL_OW 69
27414: IFFALSE 28640
27416: GO 27418
27418: DISABLE
27419: LD_INT 0
27421: PPUSH
27422: PPUSH
27423: PPUSH
27424: PPUSH
27425: PPUSH
// begin garySpeaker := IsOk ( Gary ) ;
27426: LD_ADDR_VAR 0 1
27430: PUSH
27431: LD_EXP 32
27435: PPUSH
27436: CALL_OW 302
27440: ST_TO_ADDR
// deltaSpeaker := IsOk ( DeltaDoctor ) ;
27441: LD_ADDR_VAR 0 2
27445: PUSH
27446: LD_EXP 39
27450: PPUSH
27451: CALL_OW 302
27455: ST_TO_ADDR
// tmp1 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27456: LD_ADDR_VAR 0 3
27460: PUSH
27461: LD_INT 22
27463: PUSH
27464: LD_INT 1
27466: PUSH
27467: EMPTY
27468: LIST
27469: LIST
27470: PUSH
27471: LD_INT 50
27473: PUSH
27474: EMPTY
27475: LIST
27476: PUSH
27477: LD_INT 25
27479: PUSH
27480: LD_INT 4
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: LD_INT 26
27489: PUSH
27490: LD_INT 1
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: PPUSH
27503: CALL_OW 69
27507: PUSH
27508: LD_EXP 23
27512: PUSH
27513: LD_EXP 24
27517: PUSH
27518: LD_EXP 25
27522: PUSH
27523: LD_EXP 26
27527: PUSH
27528: LD_EXP 27
27532: PUSH
27533: LD_EXP 28
27537: PUSH
27538: LD_EXP 29
27542: PUSH
27543: LD_EXP 30
27547: PUSH
27548: LD_EXP 31
27552: PUSH
27553: LD_EXP 32
27557: PUSH
27558: LD_EXP 33
27562: PUSH
27563: LD_EXP 34
27567: PUSH
27568: LD_EXP 35
27572: PUSH
27573: LD_EXP 36
27577: PUSH
27578: LD_EXP 37
27582: PUSH
27583: LD_EXP 38
27587: PUSH
27588: LD_EXP 39
27592: PUSH
27593: LD_EXP 40
27597: PUSH
27598: LD_EXP 42
27602: PUSH
27603: LD_EXP 44
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: LIST
27614: LIST
27615: LIST
27616: LIST
27617: LIST
27618: LIST
27619: LIST
27620: LIST
27621: LIST
27622: LIST
27623: LIST
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: LIST
27629: DIFF
27630: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27631: LD_ADDR_VAR 0 4
27635: PUSH
27636: LD_INT 22
27638: PUSH
27639: LD_INT 1
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: PUSH
27646: LD_INT 50
27648: PUSH
27649: EMPTY
27650: LIST
27651: PUSH
27652: LD_INT 26
27654: PUSH
27655: LD_INT 1
27657: PUSH
27658: EMPTY
27659: LIST
27660: LIST
27661: PUSH
27662: LD_INT 2
27664: PUSH
27665: LD_INT 25
27667: PUSH
27668: LD_INT 1
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 25
27677: PUSH
27678: LD_INT 2
27680: PUSH
27681: EMPTY
27682: LIST
27683: LIST
27684: PUSH
27685: LD_INT 25
27687: PUSH
27688: LD_INT 3
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: PUSH
27695: EMPTY
27696: LIST
27697: LIST
27698: LIST
27699: LIST
27700: PUSH
27701: EMPTY
27702: LIST
27703: LIST
27704: LIST
27705: LIST
27706: PPUSH
27707: CALL_OW 69
27711: PUSH
27712: LD_EXP 23
27716: PUSH
27717: LD_EXP 24
27721: PUSH
27722: LD_EXP 25
27726: PUSH
27727: LD_EXP 26
27731: PUSH
27732: LD_EXP 27
27736: PUSH
27737: LD_EXP 28
27741: PUSH
27742: LD_EXP 29
27746: PUSH
27747: LD_EXP 30
27751: PUSH
27752: LD_EXP 31
27756: PUSH
27757: LD_EXP 32
27761: PUSH
27762: LD_EXP 33
27766: PUSH
27767: LD_EXP 34
27771: PUSH
27772: LD_EXP 35
27776: PUSH
27777: LD_EXP 36
27781: PUSH
27782: LD_EXP 37
27786: PUSH
27787: LD_EXP 38
27791: PUSH
27792: LD_EXP 39
27796: PUSH
27797: LD_EXP 40
27801: PUSH
27802: LD_EXP 42
27806: PUSH
27807: LD_EXP 44
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: LIST
27818: LIST
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: LIST
27830: LIST
27831: LIST
27832: LIST
27833: DIFF
27834: ST_TO_ADDR
// if tmp1 then
27835: LD_VAR 0 3
27839: IFFALSE 27855
// tmp1 := tmp1 [ 1 ] ;
27841: LD_ADDR_VAR 0 3
27845: PUSH
27846: LD_VAR 0 3
27850: PUSH
27851: LD_INT 1
27853: ARRAY
27854: ST_TO_ADDR
// if tmp2 then
27855: LD_VAR 0 4
27859: IFFALSE 27875
// tmp2 := tmp2 [ 1 ] ;
27861: LD_ADDR_VAR 0 4
27865: PUSH
27866: LD_VAR 0 4
27870: PUSH
27871: LD_INT 1
27873: ARRAY
27874: ST_TO_ADDR
// if ( garySpeaker or tmp2 ) and ( deltaSpeaker or tmp1 ) then
27875: LD_VAR 0 1
27879: PUSH
27880: LD_VAR 0 4
27884: OR
27885: PUSH
27886: LD_VAR 0 2
27890: PUSH
27891: LD_VAR 0 3
27895: OR
27896: AND
27897: IFFALSE 28091
// begin DialogueOn ;
27899: CALL_OW 6
// if deltaSpeaker then
27903: LD_VAR 0 2
27907: IFFALSE 27923
// Say ( DeltaDoctor , D3-Sci1-1 ) else
27909: LD_EXP 39
27913: PPUSH
27914: LD_STRING D3-Sci1-1
27916: PPUSH
27917: CALL_OW 88
27921: GO 27935
// Say ( tmp1 , D3-Sci1-1 ) ;
27923: LD_VAR 0 3
27927: PPUSH
27928: LD_STRING D3-Sci1-1
27930: PPUSH
27931: CALL_OW 88
// if garySpeaker then
27935: LD_VAR 0 1
27939: IFFALSE 27955
// Say ( Gary , D3-Gary-1 ) else
27941: LD_EXP 32
27945: PPUSH
27946: LD_STRING D3-Gary-1
27948: PPUSH
27949: CALL_OW 88
27953: GO 27967
// Say ( tmp2 , D3-Gary-1 ) ;
27955: LD_VAR 0 4
27959: PPUSH
27960: LD_STRING D3-Gary-1
27962: PPUSH
27963: CALL_OW 88
// if deltaSpeaker then
27967: LD_VAR 0 2
27971: IFFALSE 27987
// Say ( DeltaDoctor , D3-Sci1-2 ) else
27973: LD_EXP 39
27977: PPUSH
27978: LD_STRING D3-Sci1-2
27980: PPUSH
27981: CALL_OW 88
27985: GO 27999
// Say ( tmp1 , D3-Sci1-2 ) ;
27987: LD_VAR 0 3
27991: PPUSH
27992: LD_STRING D3-Sci1-2
27994: PPUSH
27995: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
27999: LD_EXP 23
28003: PPUSH
28004: LD_STRING D3-JMM-2
28006: PPUSH
28007: CALL_OW 88
// if deltaSpeaker then
28011: LD_VAR 0 2
28015: IFFALSE 28031
// Say ( DeltaDoctor , D3-Sci1-3 ) else
28017: LD_EXP 39
28021: PPUSH
28022: LD_STRING D3-Sci1-3
28024: PPUSH
28025: CALL_OW 88
28029: GO 28043
// Say ( tmp1 , D3-Sci1-3 ) ;
28031: LD_VAR 0 3
28035: PPUSH
28036: LD_STRING D3-Sci1-3
28038: PPUSH
28039: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
28043: LD_EXP 23
28047: PPUSH
28048: LD_STRING D3-JMM-3
28050: PPUSH
28051: CALL_OW 88
// if deltaSpeaker then
28055: LD_VAR 0 2
28059: IFFALSE 28075
// Say ( DeltaDoctor , D3-Sci1-4 ) else
28061: LD_EXP 39
28065: PPUSH
28066: LD_STRING D3-Sci1-4
28068: PPUSH
28069: CALL_OW 88
28073: GO 28087
// Say ( tmp1 , D3-Sci1-4 ) ;
28075: LD_VAR 0 3
28079: PPUSH
28080: LD_STRING D3-Sci1-4
28082: PPUSH
28083: CALL_OW 88
// DialogueOff ;
28087: CALL_OW 7
// end ; SetTech ( tech_LasSight , 1 , state_enabled ) ;
28091: LD_INT 12
28093: PPUSH
28094: LD_INT 1
28096: PPUSH
28097: LD_INT 1
28099: PPUSH
28100: CALL_OW 322
// SetTech ( tech_Rocket , 1 , state_enabled ) ;
28104: LD_INT 40
28106: PPUSH
28107: LD_INT 1
28109: PPUSH
28110: LD_INT 1
28112: PPUSH
28113: CALL_OW 322
// SetTech ( tech_AI , 1 , state_enabled ) ;
28117: LD_INT 32
28119: PPUSH
28120: LD_INT 1
28122: PPUSH
28123: LD_INT 1
28125: PPUSH
28126: CALL_OW 322
// SetRestrict ( b_turret , 1 , true ) ;
28130: LD_INT 33
28132: PPUSH
28133: LD_INT 1
28135: PPUSH
28136: LD_INT 1
28138: PPUSH
28139: CALL_OW 324
// SetRestrict ( b_lab_computer , 1 , true ) ;
28143: LD_INT 12
28145: PPUSH
28146: LD_INT 1
28148: PPUSH
28149: LD_INT 1
28151: PPUSH
28152: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
28156: LD_STRING M2
28158: PPUSH
28159: CALL_OW 337
// wait ( 3 3$0 ) ;
28163: LD_INT 6300
28165: PPUSH
28166: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
28170: LD_INT 35
28172: PPUSH
28173: CALL_OW 67
// until not InBattle ( 1 ) ;
28177: LD_INT 1
28179: PPUSH
28180: CALL_OW 463
28184: NOT
28185: IFFALSE 28170
// if IsOk ( Simms ) and deltaSpeaker then
28187: LD_EXP 33
28191: PPUSH
28192: CALL_OW 302
28196: PUSH
28197: LD_VAR 0 2
28201: AND
28202: IFFALSE 28371
// begin DialogueOn ;
28204: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28208: LD_EXP 33
28212: PPUSH
28213: LD_STRING D3a-Sim-1
28215: PPUSH
28216: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
28220: LD_EXP 39
28224: PPUSH
28225: LD_STRING D3a-Sci1-1
28227: PPUSH
28228: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28232: LD_EXP 33
28236: PPUSH
28237: LD_STRING D3a-Sim-2
28239: PPUSH
28240: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
28244: LD_EXP 39
28248: PPUSH
28249: LD_STRING D3a-Sci1-2
28251: PPUSH
28252: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28256: LD_EXP 33
28260: PPUSH
28261: LD_STRING D3a-Sim-3
28263: PPUSH
28264: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
28268: LD_EXP 39
28272: PPUSH
28273: LD_STRING D3a-Sci1-3
28275: PPUSH
28276: CALL_OW 88
// if IsOK ( Joan ) then
28280: LD_EXP 35
28284: PPUSH
28285: CALL_OW 302
28289: IFFALSE 28305
// Say ( Simms , D3a-Sim-4 ) else
28291: LD_EXP 33
28295: PPUSH
28296: LD_STRING D3a-Sim-4
28298: PPUSH
28299: CALL_OW 88
28303: GO 28317
// Say ( Simms , D3a-Sim-4a ) ;
28305: LD_EXP 33
28309: PPUSH
28310: LD_STRING D3a-Sim-4a
28312: PPUSH
28313: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
28317: LD_EXP 39
28321: PPUSH
28322: LD_STRING D3a-Sci1-4
28324: PPUSH
28325: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28329: LD_EXP 33
28333: PPUSH
28334: LD_STRING D3a-Sim-5
28336: PPUSH
28337: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
28341: LD_EXP 39
28345: PPUSH
28346: LD_STRING D3a-Sci1-5
28348: PPUSH
28349: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28353: LD_EXP 33
28357: PPUSH
28358: LD_STRING D3a-Sim-6
28360: PPUSH
28361: CALL_OW 88
// DialogueOff ;
28365: CALL_OW 7
// end else
28369: GO 28640
// begin tmp3 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
28371: LD_ADDR_VAR 0 5
28375: PUSH
28376: LD_INT 22
28378: PUSH
28379: LD_INT 1
28381: PUSH
28382: EMPTY
28383: LIST
28384: LIST
28385: PUSH
28386: LD_INT 26
28388: PUSH
28389: LD_INT 1
28391: PUSH
28392: EMPTY
28393: LIST
28394: LIST
28395: PUSH
28396: LD_INT 25
28398: PUSH
28399: LD_INT 4
28401: PUSH
28402: EMPTY
28403: LIST
28404: LIST
28405: PUSH
28406: EMPTY
28407: LIST
28408: LIST
28409: LIST
28410: PPUSH
28411: CALL_OW 69
28415: PUSH
28416: LD_EXP 23
28420: PUSH
28421: LD_EXP 29
28425: PUSH
28426: LD_EXP 28
28430: PUSH
28431: LD_EXP 33
28435: PUSH
28436: LD_EXP 36
28440: PUSH
28441: EMPTY
28442: LIST
28443: LIST
28444: LIST
28445: LIST
28446: LIST
28447: DIFF
28448: ST_TO_ADDR
// if tmp3 then
28449: LD_VAR 0 5
28453: IFFALSE 28640
// begin DialogueOn ;
28455: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28459: LD_EXP 33
28463: PPUSH
28464: LD_STRING D3a-Sim-1
28466: PPUSH
28467: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
28471: LD_VAR 0 5
28475: PUSH
28476: LD_INT 1
28478: ARRAY
28479: PPUSH
28480: LD_STRING D3a-Sci1-1
28482: PPUSH
28483: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28487: LD_EXP 33
28491: PPUSH
28492: LD_STRING D3a-Sim-2
28494: PPUSH
28495: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
28499: LD_VAR 0 5
28503: PUSH
28504: LD_INT 1
28506: ARRAY
28507: PPUSH
28508: LD_STRING D3a-Sci1-2
28510: PPUSH
28511: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28515: LD_EXP 33
28519: PPUSH
28520: LD_STRING D3a-Sim-3
28522: PPUSH
28523: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
28527: LD_VAR 0 5
28531: PUSH
28532: LD_INT 1
28534: ARRAY
28535: PPUSH
28536: LD_STRING D3a-Sci1-3
28538: PPUSH
28539: CALL_OW 88
// if IsOK ( Joan ) then
28543: LD_EXP 35
28547: PPUSH
28548: CALL_OW 302
28552: IFFALSE 28568
// Say ( Simms , D3a-Sim-4 ) else
28554: LD_EXP 33
28558: PPUSH
28559: LD_STRING D3a-Sim-4
28561: PPUSH
28562: CALL_OW 88
28566: GO 28580
// Say ( Simms , D3a-Sim-4a ) ;
28568: LD_EXP 33
28572: PPUSH
28573: LD_STRING D3a-Sim-4a
28575: PPUSH
28576: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
28580: LD_VAR 0 5
28584: PUSH
28585: LD_INT 1
28587: ARRAY
28588: PPUSH
28589: LD_STRING D3a-Sci1-4
28591: PPUSH
28592: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28596: LD_EXP 33
28600: PPUSH
28601: LD_STRING D3a-Sim-5
28603: PPUSH
28604: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
28608: LD_VAR 0 5
28612: PUSH
28613: LD_INT 1
28615: ARRAY
28616: PPUSH
28617: LD_STRING D3a-Sci1-5
28619: PPUSH
28620: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28624: LD_EXP 33
28628: PPUSH
28629: LD_STRING D3a-Sim-6
28631: PPUSH
28632: CALL_OW 88
// DialogueOff ;
28636: CALL_OW 7
// end ; end ; end ;
28640: PPOPN 5
28642: END
// export function DRussianNextAttack ; begin
28643: LD_INT 0
28645: PPUSH
// SayRadio ( AmScout , D4-FSol1-2 ) ;
28646: LD_EXP 40
28650: PPUSH
28651: LD_STRING D4-FSol1-2
28653: PPUSH
28654: CALL_OW 94
// end ;
28658: LD_VAR 0 1
28662: RET
// export function DRussianConvoy ; begin
28663: LD_INT 0
28665: PPUSH
// SayRadio ( AmScout , D4-FSol1-1 ) ;
28666: LD_EXP 40
28670: PPUSH
28671: LD_STRING D4-FSol1-1
28673: PPUSH
28674: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
28678: LD_STRING M3
28680: PPUSH
28681: CALL_OW 337
// end ;
28685: LD_VAR 0 1
28689: RET
// export function DRussianSpaceAmmo ( unit ) ; begin
28690: LD_INT 0
28692: PPUSH
// CenterNowOnUnits ( unit ) ;
28693: LD_VAR 0 1
28697: PPUSH
28698: CALL_OW 87
// DialogueOn ;
28702: CALL_OW 6
// if IsOK ( Cyrus ) then
28706: LD_EXP 27
28710: PPUSH
28711: CALL_OW 302
28715: IFFALSE 28731
// Say ( Cyrus , D9a-Cyrus-1 ) else
28717: LD_EXP 27
28721: PPUSH
28722: LD_STRING D9a-Cyrus-1
28724: PPUSH
28725: CALL_OW 88
28729: GO 28853
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
28731: LD_INT 22
28733: PUSH
28734: LD_INT 1
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 26
28743: PUSH
28744: LD_INT 1
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 2
28753: PUSH
28754: LD_INT 25
28756: PUSH
28757: LD_INT 1
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 25
28766: PUSH
28767: LD_INT 2
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 25
28776: PUSH
28777: LD_INT 3
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: PUSH
28784: LD_INT 25
28786: PUSH
28787: LD_INT 4
28789: PUSH
28790: EMPTY
28791: LIST
28792: LIST
28793: PUSH
28794: LD_INT 25
28796: PUSH
28797: LD_INT 5
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: EMPTY
28805: LIST
28806: LIST
28807: LIST
28808: LIST
28809: LIST
28810: LIST
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: LIST
28816: PPUSH
28817: CALL_OW 69
28821: PUSH
28822: LD_EXP 23
28826: PUSH
28827: LD_EXP 36
28831: PUSH
28832: LD_EXP 27
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: LIST
28841: DIFF
28842: PPUSH
28843: LD_STRING D9a-Sol1-1
28845: PPUSH
28846: LD_STRING D9a-Sol1-1
28848: PPUSH
28849: CALL 25102 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
28853: LD_INT 22
28855: PUSH
28856: LD_INT 1
28858: PUSH
28859: EMPTY
28860: LIST
28861: LIST
28862: PUSH
28863: LD_INT 26
28865: PUSH
28866: LD_INT 1
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 2
28875: PUSH
28876: LD_INT 25
28878: PUSH
28879: LD_INT 1
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 25
28888: PUSH
28889: LD_INT 2
28891: PUSH
28892: EMPTY
28893: LIST
28894: LIST
28895: PUSH
28896: LD_INT 25
28898: PUSH
28899: LD_INT 3
28901: PUSH
28902: EMPTY
28903: LIST
28904: LIST
28905: PUSH
28906: LD_INT 25
28908: PUSH
28909: LD_INT 4
28911: PUSH
28912: EMPTY
28913: LIST
28914: LIST
28915: PUSH
28916: LD_INT 25
28918: PUSH
28919: LD_INT 5
28921: PUSH
28922: EMPTY
28923: LIST
28924: LIST
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: LIST
28930: LIST
28931: LIST
28932: LIST
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: LIST
28938: PPUSH
28939: CALL_OW 69
28943: PUSH
28944: LD_EXP 23
28948: PUSH
28949: LD_EXP 36
28953: PUSH
28954: LD_EXP 27
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: LIST
28963: DIFF
28964: PPUSH
28965: LD_STRING D9b-Sol1-1
28967: PPUSH
28968: LD_STRING D9b-Sol1-1
28970: PPUSH
28971: CALL 25102 0 3
// if LoadVariable ( 09_arInfo , 0 ) then
28975: LD_STRING 09_arInfo
28977: PPUSH
28978: LD_INT 0
28980: PPUSH
28981: CALL_OW 30
28985: IFFALSE 28999
// Say ( JMM , D9a-JMM-1 ) ;
28987: LD_EXP 23
28991: PPUSH
28992: LD_STRING D9a-JMM-1
28994: PPUSH
28995: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
28999: LD_EXP 23
29003: PPUSH
29004: LD_STRING D9c-JMM-1
29006: PPUSH
29007: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) then
29011: LD_INT 22
29013: PUSH
29014: LD_INT 1
29016: PUSH
29017: EMPTY
29018: LIST
29019: LIST
29020: PUSH
29021: LD_INT 25
29023: PUSH
29024: LD_INT 5
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PPUSH
29035: CALL_OW 69
29039: IFFALSE 29053
// Say ( JMM , D9c-JMM-1a ) ;
29041: LD_EXP 23
29045: PPUSH
29046: LD_STRING D9c-JMM-1a
29048: PPUSH
29049: CALL_OW 88
// DialogueOff ;
29053: CALL_OW 7
// end ;
29057: LD_VAR 0 2
29061: RET
// export function DArabTrait1 ; var tmp ; begin
29062: LD_INT 0
29064: PPUSH
29065: PPUSH
// if IsOk ( DeltaDoctor ) then
29066: LD_EXP 39
29070: PPUSH
29071: CALL_OW 302
29075: IFFALSE 29089
// tmp := DeltaDoctor else
29077: LD_ADDR_VAR 0 2
29081: PUSH
29082: LD_EXP 39
29086: ST_TO_ADDR
29087: GO 29287
// if IsOk ( Denis ) then
29089: LD_EXP 34
29093: PPUSH
29094: CALL_OW 302
29098: IFFALSE 29112
// tmp := Denis else
29100: LD_ADDR_VAR 0 2
29104: PUSH
29105: LD_EXP 34
29109: ST_TO_ADDR
29110: GO 29287
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
29112: LD_ADDR_VAR 0 2
29116: PUSH
29117: LD_INT 22
29119: PUSH
29120: LD_INT 1
29122: PUSH
29123: EMPTY
29124: LIST
29125: LIST
29126: PUSH
29127: LD_INT 50
29129: PUSH
29130: EMPTY
29131: LIST
29132: PUSH
29133: LD_INT 25
29135: PUSH
29136: LD_INT 4
29138: PUSH
29139: EMPTY
29140: LIST
29141: LIST
29142: PUSH
29143: LD_INT 26
29145: PUSH
29146: LD_INT 1
29148: PUSH
29149: EMPTY
29150: LIST
29151: LIST
29152: PUSH
29153: EMPTY
29154: LIST
29155: LIST
29156: LIST
29157: LIST
29158: PPUSH
29159: CALL_OW 69
29163: PUSH
29164: LD_EXP 23
29168: PUSH
29169: LD_EXP 24
29173: PUSH
29174: LD_EXP 25
29178: PUSH
29179: LD_EXP 26
29183: PUSH
29184: LD_EXP 27
29188: PUSH
29189: LD_EXP 28
29193: PUSH
29194: LD_EXP 29
29198: PUSH
29199: LD_EXP 30
29203: PUSH
29204: LD_EXP 31
29208: PUSH
29209: LD_EXP 32
29213: PUSH
29214: LD_EXP 33
29218: PUSH
29219: LD_EXP 34
29223: PUSH
29224: LD_EXP 35
29228: PUSH
29229: LD_EXP 36
29233: PUSH
29234: LD_EXP 37
29238: PUSH
29239: LD_EXP 38
29243: PUSH
29244: LD_EXP 39
29248: PUSH
29249: LD_EXP 40
29253: PUSH
29254: LD_EXP 42
29258: PUSH
29259: LD_EXP 44
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: LIST
29273: LIST
29274: LIST
29275: LIST
29276: LIST
29277: LIST
29278: LIST
29279: LIST
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: DIFF
29286: ST_TO_ADDR
// if not tmp then
29287: LD_VAR 0 2
29291: NOT
29292: IFFALSE 29296
// exit ;
29294: GO 29388
// DialogueOn ;
29296: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
29300: LD_EXP 23
29304: PPUSH
29305: LD_STRING D6-JMM-1
29307: PPUSH
29308: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
29312: LD_VAR 0 2
29316: PPUSH
29317: LD_STRING D6-Sci1-1
29319: PPUSH
29320: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
29324: LD_EXP 23
29328: PPUSH
29329: LD_STRING D6-JMM-2
29331: PPUSH
29332: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
29336: LD_VAR 0 2
29340: PPUSH
29341: LD_STRING D6-Sci1-2
29343: PPUSH
29344: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
29348: LD_EXP 23
29352: PPUSH
29353: LD_STRING D6-JMM-3
29355: PPUSH
29356: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
29360: LD_VAR 0 2
29364: PPUSH
29365: LD_STRING D6-Sci1-3
29367: PPUSH
29368: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
29372: LD_EXP 23
29376: PPUSH
29377: LD_STRING D6-JMM-4
29379: PPUSH
29380: CALL_OW 88
// DialogueOff ;
29384: CALL_OW 7
// end ;
29388: LD_VAR 0 1
29392: RET
// export function DArabTrait2 ; begin
29393: LD_INT 0
29395: PPUSH
// if not IsPlaced ( Khatam ) or not IsOk ( Ahmed ) or not IsOk ( Dietrich ) then
29396: LD_EXP 36
29400: PPUSH
29401: CALL_OW 305
29405: NOT
29406: PUSH
29407: LD_EXP 51
29411: PPUSH
29412: CALL_OW 302
29416: NOT
29417: OR
29418: PUSH
29419: LD_EXP 50
29423: PPUSH
29424: CALL_OW 302
29428: NOT
29429: OR
29430: IFFALSE 29434
// exit ;
29432: GO 29490
// DialogueOn ;
29434: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
29438: LD_EXP 51
29442: PPUSH
29443: LD_STRING D5-Ar1-1
29445: PPUSH
29446: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
29450: LD_EXP 50
29454: PPUSH
29455: LD_STRING D5-Diet-1
29457: PPUSH
29458: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
29462: LD_EXP 51
29466: PPUSH
29467: LD_STRING D5-Ar1-2
29469: PPUSH
29470: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
29474: LD_EXP 50
29478: PPUSH
29479: LD_STRING D5-Diet-2
29481: PPUSH
29482: CALL_OW 88
// DialogueOff ;
29486: CALL_OW 7
// end ;
29490: LD_VAR 0 1
29494: RET
// every 0 0$2 trigger arabianAttack do var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding , speaker ;
29495: LD_EXP 4
29499: IFFALSE 31189
29501: GO 29503
29503: DISABLE
29504: LD_INT 0
29506: PPUSH
29507: PPUSH
29508: PPUSH
29509: PPUSH
29510: PPUSH
29511: PPUSH
29512: PPUSH
29513: PPUSH
// begin SetAttitude ( 2 , 3 , att_friend , true ) ;
29514: LD_INT 2
29516: PPUSH
29517: LD_INT 3
29519: PPUSH
29520: LD_INT 1
29522: PPUSH
29523: LD_INT 1
29525: PPUSH
29526: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
29530: LD_INT 2
29532: PPUSH
29533: LD_INT 6
29535: PPUSH
29536: LD_INT 1
29538: PPUSH
29539: LD_INT 1
29541: PPUSH
29542: CALL_OW 80
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
29546: LD_ADDR_VAR 0 5
29550: PUSH
29551: LD_INT 22
29553: PUSH
29554: LD_INT 2
29556: PUSH
29557: EMPTY
29558: LIST
29559: LIST
29560: PUSH
29561: LD_INT 2
29563: PUSH
29564: LD_INT 25
29566: PUSH
29567: LD_INT 4
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 25
29576: PUSH
29577: LD_INT 2
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 25
29586: PUSH
29587: LD_INT 3
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: LIST
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PPUSH
29604: CALL_OW 69
29608: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
29609: LD_ADDR_VAR 0 4
29613: PUSH
29614: LD_INT 22
29616: PUSH
29617: LD_INT 2
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 21
29626: PUSH
29627: LD_INT 1
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 2
29636: PUSH
29637: LD_INT 25
29639: PUSH
29640: LD_INT 1
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 25
29649: PUSH
29650: LD_INT 8
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 25
29659: PUSH
29660: LD_INT 15
29662: PUSH
29663: EMPTY
29664: LIST
29665: LIST
29666: PUSH
29667: EMPTY
29668: LIST
29669: LIST
29670: LIST
29671: LIST
29672: PUSH
29673: EMPTY
29674: LIST
29675: LIST
29676: LIST
29677: PPUSH
29678: CALL_OW 69
29682: PUSH
29683: LD_EXP 50
29687: PUSH
29688: EMPTY
29689: LIST
29690: DIFF
29691: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
29692: LD_ADDR_VAR 0 6
29696: PUSH
29697: LD_INT 22
29699: PUSH
29700: LD_INT 2
29702: PUSH
29703: EMPTY
29704: LIST
29705: LIST
29706: PUSH
29707: LD_INT 30
29709: PUSH
29710: LD_INT 5
29712: PUSH
29713: EMPTY
29714: LIST
29715: LIST
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PPUSH
29721: CALL_OW 69
29725: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
29726: LD_VAR 0 5
29730: PPUSH
29731: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
29735: LD_VAR 0 4
29739: PPUSH
29740: CALL_OW 122
// RaiseSailEvent ( EArabAttack ) ;
29744: LD_INT 101
29746: PPUSH
29747: CALL_OW 427
// SayRadio ( AmScout , D4-FSol1-3 ) ;
29751: LD_EXP 40
29755: PPUSH
29756: LD_STRING D4-FSol1-3
29758: PPUSH
29759: CALL_OW 94
// for i in arCivilian do
29763: LD_ADDR_VAR 0 1
29767: PUSH
29768: LD_VAR 0 5
29772: PUSH
29773: FOR_IN
29774: IFFALSE 29853
// begin AddComEnterUnit ( i , barracks [ i mod 2 + 1 ] ) ;
29776: LD_VAR 0 1
29780: PPUSH
29781: LD_VAR 0 6
29785: PUSH
29786: LD_VAR 0 1
29790: PUSH
29791: LD_INT 2
29793: MOD
29794: PUSH
29795: LD_INT 1
29797: PLUS
29798: ARRAY
29799: PPUSH
29800: CALL_OW 180
// AddComChangeProfession ( i , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
29804: LD_VAR 0 1
29808: PPUSH
29809: LD_INT 1
29811: PUSH
29812: LD_INT 8
29814: PUSH
29815: EMPTY
29816: LIST
29817: LIST
29818: PUSH
29819: LD_INT 1
29821: PPUSH
29822: LD_INT 2
29824: PPUSH
29825: CALL_OW 12
29829: ARRAY
29830: PPUSH
29831: CALL_OW 183
// AddComExitBuilding ( i ) ;
29835: LD_VAR 0 1
29839: PPUSH
29840: CALL_OW 182
// wait ( 0 0$0.5 ) ;
29844: LD_INT 18
29846: PPUSH
29847: CALL_OW 67
// end ;
29851: GO 29773
29853: POP
29854: POP
// wait ( 0 0$3 ) ;
29855: LD_INT 105
29857: PPUSH
29858: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
29862: LD_INT 76
29864: PPUSH
29865: LD_INT 19
29867: PPUSH
29868: CALL_OW 84
// DialogueOn ;
29872: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29876: LD_INT 22
29878: PUSH
29879: LD_INT 1
29881: PUSH
29882: EMPTY
29883: LIST
29884: LIST
29885: PUSH
29886: LD_INT 26
29888: PUSH
29889: LD_INT 1
29891: PUSH
29892: EMPTY
29893: LIST
29894: LIST
29895: PUSH
29896: LD_INT 2
29898: PUSH
29899: LD_INT 25
29901: PUSH
29902: LD_INT 1
29904: PUSH
29905: EMPTY
29906: LIST
29907: LIST
29908: PUSH
29909: LD_INT 25
29911: PUSH
29912: LD_INT 2
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: PUSH
29919: LD_INT 25
29921: PUSH
29922: LD_INT 3
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 25
29931: PUSH
29932: LD_INT 4
29934: PUSH
29935: EMPTY
29936: LIST
29937: LIST
29938: PUSH
29939: LD_INT 25
29941: PUSH
29942: LD_INT 5
29944: PUSH
29945: EMPTY
29946: LIST
29947: LIST
29948: PUSH
29949: EMPTY
29950: LIST
29951: LIST
29952: LIST
29953: LIST
29954: LIST
29955: LIST
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: LIST
29961: PPUSH
29962: CALL_OW 69
29966: PPUSH
29967: LD_STRING D8-Sol1-1
29969: PPUSH
29970: LD_STRING D8-Sol1-1
29972: PPUSH
29973: CALL 25102 0 3
// if IsOk ( DeltaDoctor ) then
29977: LD_EXP 39
29981: PPUSH
29982: CALL_OW 302
29986: IFFALSE 30002
// Say ( DeltaDoctor , D8-Sci1-1 ) else
29988: LD_EXP 39
29992: PPUSH
29993: LD_STRING D8-Sci1-1
29995: PPUSH
29996: CALL_OW 88
30000: GO 30103
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
30002: LD_INT 22
30004: PUSH
30005: LD_INT 1
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 26
30014: PUSH
30015: LD_INT 1
30017: PUSH
30018: EMPTY
30019: LIST
30020: LIST
30021: PUSH
30022: LD_INT 2
30024: PUSH
30025: LD_INT 25
30027: PUSH
30028: LD_INT 1
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 25
30037: PUSH
30038: LD_INT 2
30040: PUSH
30041: EMPTY
30042: LIST
30043: LIST
30044: PUSH
30045: LD_INT 25
30047: PUSH
30048: LD_INT 3
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: PUSH
30055: LD_INT 25
30057: PUSH
30058: LD_INT 4
30060: PUSH
30061: EMPTY
30062: LIST
30063: LIST
30064: PUSH
30065: LD_INT 25
30067: PUSH
30068: LD_INT 5
30070: PUSH
30071: EMPTY
30072: LIST
30073: LIST
30074: PUSH
30075: EMPTY
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: PUSH
30083: EMPTY
30084: LIST
30085: LIST
30086: LIST
30087: PPUSH
30088: CALL_OW 69
30092: PPUSH
30093: LD_STRING D8-Sol1-1
30095: PPUSH
30096: LD_STRING D8-Sol1-1
30098: PPUSH
30099: CALL 25102 0 3
// Say ( JMM , D8-JMM-1 ) ;
30103: LD_EXP 23
30107: PPUSH
30108: LD_STRING D8-JMM-1
30110: PPUSH
30111: CALL_OW 88
// DialogueOff ;
30115: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
30119: LD_INT 2
30121: PPUSH
30122: LD_INT 2
30124: PPUSH
30125: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
30129: LD_INT 1
30131: PPUSH
30132: LD_INT 2
30134: PPUSH
30135: LD_INT 2
30137: PPUSH
30138: LD_INT 1
30140: PPUSH
30141: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
30145: LD_INT 3
30147: PPUSH
30148: LD_INT 2
30150: PPUSH
30151: LD_INT 1
30153: PPUSH
30154: LD_INT 1
30156: PPUSH
30157: CALL_OW 80
// SetAttitude ( 6 , 2 , att_friend , true ) ;
30161: LD_INT 6
30163: PPUSH
30164: LD_INT 2
30166: PPUSH
30167: LD_INT 1
30169: PPUSH
30170: LD_INT 1
30172: PPUSH
30173: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
30177: LD_STRING M4
30179: PPUSH
30180: CALL_OW 337
// wait ( 0 0$1 ) ;
30184: LD_INT 35
30186: PPUSH
30187: CALL_OW 67
// if IsLive ( Khatam ) then
30191: LD_EXP 36
30195: PPUSH
30196: CALL_OW 300
30200: IFFALSE 30214
// DoNotAttack ( 2 , Khatam ) ;
30202: LD_INT 2
30204: PPUSH
30205: LD_EXP 36
30209: PPUSH
30210: CALL_OW 471
// wait ( 0 0$1 ) ;
30214: LD_INT 35
30216: PPUSH
30217: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
30221: LD_ADDR_VAR 0 7
30225: PUSH
30226: LD_INT 22
30228: PUSH
30229: LD_INT 1
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 21
30238: PUSH
30239: LD_INT 3
30241: PUSH
30242: EMPTY
30243: LIST
30244: LIST
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PPUSH
30250: CALL_OW 69
30254: PPUSH
30255: LD_VAR 0 4
30259: PUSH
30260: LD_INT 1
30262: ARRAY
30263: PPUSH
30264: CALL_OW 74
30268: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
30269: LD_VAR 0 4
30273: PPUSH
30274: LD_INT 25
30276: PUSH
30277: LD_INT 1
30279: PUSH
30280: EMPTY
30281: LIST
30282: LIST
30283: PPUSH
30284: CALL_OW 72
30288: PUSH
30289: LD_INT 1
30291: ARRAY
30292: PPUSH
30293: LD_VAR 0 7
30297: PPUSH
30298: CALL_OW 250
30302: PPUSH
30303: LD_VAR 0 7
30307: PPUSH
30308: CALL_OW 251
30312: PPUSH
30313: LD_VAR 0 7
30317: PPUSH
30318: CALL_OW 192
// AddComMoveXY ( arSoldiers , 84 , 22 ) ;
30322: LD_VAR 0 4
30326: PPUSH
30327: LD_INT 84
30329: PPUSH
30330: LD_INT 22
30332: PPUSH
30333: CALL_OW 171
// AddComMoveXY ( arSoldiers , 82 , 5 ) ;
30337: LD_VAR 0 4
30341: PPUSH
30342: LD_INT 82
30344: PPUSH
30345: LD_INT 5
30347: PPUSH
30348: CALL_OW 171
// AddComMoveXY ( arSoldiers , 95 , 12 ) ;
30352: LD_VAR 0 4
30356: PPUSH
30357: LD_INT 95
30359: PPUSH
30360: LD_INT 12
30362: PPUSH
30363: CALL_OW 171
// AddComMoveXY ( arSoldiers , 102 , 11 ) ;
30367: LD_VAR 0 4
30371: PPUSH
30372: LD_INT 102
30374: PPUSH
30375: LD_INT 11
30377: PPUSH
30378: CALL_OW 171
// AddComMoveXY ( arSoldiers , 116 , 15 ) ;
30382: LD_VAR 0 4
30386: PPUSH
30387: LD_INT 116
30389: PPUSH
30390: LD_INT 15
30392: PPUSH
30393: CALL_OW 171
// AddComMoveXY ( arSoldiers , 140 , 25 ) ;
30397: LD_VAR 0 4
30401: PPUSH
30402: LD_INT 140
30404: PPUSH
30405: LD_INT 25
30407: PPUSH
30408: CALL_OW 171
// arSoldiers := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
30412: LD_ADDR_VAR 0 4
30416: PUSH
30417: LD_INT 22
30419: PUSH
30420: LD_INT 2
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 21
30429: PUSH
30430: LD_INT 1
30432: PUSH
30433: EMPTY
30434: LIST
30435: LIST
30436: PUSH
30437: LD_INT 2
30439: PUSH
30440: LD_INT 25
30442: PUSH
30443: LD_INT 1
30445: PUSH
30446: EMPTY
30447: LIST
30448: LIST
30449: PUSH
30450: LD_INT 25
30452: PUSH
30453: LD_INT 8
30455: PUSH
30456: EMPTY
30457: LIST
30458: LIST
30459: PUSH
30460: LD_INT 25
30462: PUSH
30463: LD_INT 15
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: LIST
30480: PPUSH
30481: CALL_OW 69
30485: PUSH
30486: LD_EXP 50
30490: PUSH
30491: EMPTY
30492: LIST
30493: DIFF
30494: ST_TO_ADDR
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
30495: LD_ADDR_VAR 0 5
30499: PUSH
30500: LD_INT 22
30502: PUSH
30503: LD_INT 2
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 21
30512: PUSH
30513: LD_INT 1
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: PUSH
30520: LD_INT 2
30522: PUSH
30523: LD_INT 25
30525: PUSH
30526: LD_INT 2
30528: PUSH
30529: EMPTY
30530: LIST
30531: LIST
30532: PUSH
30533: LD_INT 25
30535: PUSH
30536: LD_INT 3
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: PUSH
30543: LD_INT 25
30545: PUSH
30546: LD_INT 4
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_INT 25
30555: PUSH
30556: LD_INT 12
30558: PUSH
30559: EMPTY
30560: LIST
30561: LIST
30562: PUSH
30563: LD_INT 25
30565: PUSH
30566: LD_INT 16
30568: PUSH
30569: EMPTY
30570: LIST
30571: LIST
30572: PUSH
30573: EMPTY
30574: LIST
30575: LIST
30576: LIST
30577: LIST
30578: LIST
30579: LIST
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: LIST
30585: PPUSH
30586: CALL_OW 69
30590: ST_TO_ADDR
// arCivilian := arCivilian ^ Dietrich ;
30591: LD_ADDR_VAR 0 5
30595: PUSH
30596: LD_VAR 0 5
30600: PUSH
30601: LD_EXP 50
30605: ADD
30606: ST_TO_ADDR
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
30607: LD_VAR 0 5
30611: PPUSH
30612: LD_INT 88
30614: PPUSH
30615: LD_INT 8
30617: PPUSH
30618: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
30622: LD_VAR 0 5
30626: PPUSH
30627: LD_INT 102
30629: PPUSH
30630: LD_INT 10
30632: PPUSH
30633: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
30637: LD_VAR 0 5
30641: PPUSH
30642: LD_INT 116
30644: PPUSH
30645: LD_INT 15
30647: PPUSH
30648: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
30652: LD_VAR 0 5
30656: PPUSH
30657: LD_INT 140
30659: PPUSH
30660: LD_INT 25
30662: PPUSH
30663: CALL_OW 171
// arEscapist := arCivilian union arSoldiers ;
30667: LD_ADDR_EXP 56
30671: PUSH
30672: LD_VAR 0 5
30676: PUSH
30677: LD_VAR 0 4
30681: UNION
30682: ST_TO_ADDR
// if IsOk ( Gary ) then
30683: LD_EXP 32
30687: PPUSH
30688: CALL_OW 302
30692: IFFALSE 30706
// Say ( Gary , D8a-Gary-1 ) ;
30694: LD_EXP 32
30698: PPUSH
30699: LD_STRING D8a-Gary-1
30701: PPUSH
30702: CALL_OW 88
// wait ( 0 0$5 ) ;
30706: LD_INT 175
30708: PPUSH
30709: CALL_OW 67
// if IsOK ( Khatam ) then
30713: LD_EXP 36
30717: PPUSH
30718: CALL_OW 302
30722: IFFALSE 31189
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
30724: LD_ADDR_VAR 0 2
30728: PUSH
30729: LD_INT 22
30731: PUSH
30732: LD_INT 1
30734: PUSH
30735: EMPTY
30736: LIST
30737: LIST
30738: PUSH
30739: LD_INT 2
30741: PUSH
30742: LD_INT 25
30744: PUSH
30745: LD_INT 1
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 25
30754: PUSH
30755: LD_INT 2
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 25
30764: PUSH
30765: LD_INT 3
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 25
30774: PUSH
30775: LD_INT 4
30777: PUSH
30778: EMPTY
30779: LIST
30780: LIST
30781: PUSH
30782: LD_INT 25
30784: PUSH
30785: LD_INT 5
30787: PUSH
30788: EMPTY
30789: LIST
30790: LIST
30791: PUSH
30792: LD_INT 25
30794: PUSH
30795: LD_INT 8
30797: PUSH
30798: EMPTY
30799: LIST
30800: LIST
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: LIST
30806: LIST
30807: LIST
30808: LIST
30809: LIST
30810: PUSH
30811: EMPTY
30812: LIST
30813: LIST
30814: PPUSH
30815: CALL_OW 69
30819: PUSH
30820: LD_EXP 23
30824: PUSH
30825: LD_EXP 24
30829: PUSH
30830: LD_EXP 25
30834: PUSH
30835: LD_EXP 26
30839: PUSH
30840: LD_EXP 27
30844: PUSH
30845: LD_EXP 28
30849: PUSH
30850: LD_EXP 29
30854: PUSH
30855: LD_EXP 30
30859: PUSH
30860: LD_EXP 31
30864: PUSH
30865: LD_EXP 32
30869: PUSH
30870: LD_EXP 33
30874: PUSH
30875: LD_EXP 34
30879: PUSH
30880: LD_EXP 35
30884: PUSH
30885: LD_EXP 36
30889: PUSH
30890: LD_EXP 37
30894: PUSH
30895: LD_EXP 38
30899: PUSH
30900: LD_EXP 39
30904: PUSH
30905: LD_EXP 42
30909: PUSH
30910: LD_EXP 44
30914: PUSH
30915: EMPTY
30916: LIST
30917: LIST
30918: LIST
30919: LIST
30920: LIST
30921: LIST
30922: LIST
30923: LIST
30924: LIST
30925: LIST
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: LIST
30934: LIST
30935: DIFF
30936: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
30937: LD_EXP 36
30941: PPUSH
30942: LD_INT 8
30944: PPUSH
30945: CALL_OW 235
// ComExit ( Khatam ) ;
30949: LD_EXP 36
30953: PPUSH
30954: CALL 92607 0 1
// wait ( 0 0$1 ) ;
30958: LD_INT 35
30960: PPUSH
30961: CALL_OW 67
// ComMoveToArea ( Khatam , khatamArea ) ;
30965: LD_EXP 36
30969: PPUSH
30970: LD_INT 11
30972: PPUSH
30973: CALL_OW 113
// escapeKhatam := true ;
30977: LD_ADDR_EXP 11
30981: PUSH
30982: LD_INT 1
30984: ST_TO_ADDR
// if not tmp then
30985: LD_VAR 0 2
30989: NOT
30990: IFFALSE 30994
// exit ;
30992: GO 31189
// wait ( 0 0$2 ) ;
30994: LD_INT 70
30996: PPUSH
30997: CALL_OW 67
// DialogueOn ;
31001: CALL_OW 6
// speaker := DialogRandom ( tmp , D8b-Sol1-1 , D8b-FSol1-1 ) ;
31005: LD_ADDR_VAR 0 8
31009: PUSH
31010: LD_VAR 0 2
31014: PPUSH
31015: LD_STRING D8b-Sol1-1
31017: PPUSH
31018: LD_STRING D8b-FSol1-1
31020: PPUSH
31021: CALL 25102 0 3
31025: ST_TO_ADDR
// Say ( Khatam , D8b-Khat-1 ) ;
31026: LD_EXP 36
31030: PPUSH
31031: LD_STRING D8b-Khat-1
31033: PPUSH
31034: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31038: LD_VAR 0 8
31042: PPUSH
31043: CALL_OW 258
31047: PUSH
31048: LD_INT 1
31050: EQUAL
31051: IFFALSE 31067
// Say ( speaker , D8b-Sol1-2 ) else
31053: LD_VAR 0 8
31057: PPUSH
31058: LD_STRING D8b-Sol1-2
31060: PPUSH
31061: CALL_OW 88
31065: GO 31079
// Say ( speaker , D8b-FSol1-2 ) ;
31067: LD_VAR 0 8
31071: PPUSH
31072: LD_STRING D8b-FSol1-2
31074: PPUSH
31075: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
31079: LD_EXP 36
31083: PPUSH
31084: LD_STRING D8b-Khat-2
31086: PPUSH
31087: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31091: LD_VAR 0 8
31095: PPUSH
31096: CALL_OW 258
31100: PUSH
31101: LD_INT 1
31103: EQUAL
31104: IFFALSE 31120
// Say ( speaker , D8b-Sol1-3 ) else
31106: LD_VAR 0 8
31110: PPUSH
31111: LD_STRING D8b-Sol1-3
31113: PPUSH
31114: CALL_OW 88
31118: GO 31132
// Say ( speaker , D8b-FSol1-3 ) ;
31120: LD_VAR 0 8
31124: PPUSH
31125: LD_STRING D8b-FSol1-3
31127: PPUSH
31128: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
31132: LD_EXP 36
31136: PPUSH
31137: LD_STRING D8b-Khat-3
31139: PPUSH
31140: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31144: LD_VAR 0 8
31148: PPUSH
31149: CALL_OW 258
31153: PUSH
31154: LD_INT 1
31156: EQUAL
31157: IFFALSE 31173
// Say ( speaker , D8b-Sol1-4 ) else
31159: LD_VAR 0 8
31163: PPUSH
31164: LD_STRING D8b-Sol1-4
31166: PPUSH
31167: CALL_OW 88
31171: GO 31185
// Say ( speaker , D8b-FSol1-4 ) ;
31173: LD_VAR 0 8
31177: PPUSH
31178: LD_STRING D8b-FSol1-4
31180: PPUSH
31181: CALL_OW 88
// DialogueOff ;
31185: CALL_OW 7
// end ; end ;
31189: PPOPN 8
31191: END
// every 0 0$1 trigger escapeKhatam and IsOk ( Khatam ) do
31192: LD_EXP 11
31196: PUSH
31197: LD_EXP 36
31201: PPUSH
31202: CALL_OW 302
31206: AND
31207: IFFALSE 31282
31209: GO 31211
31211: DISABLE
// begin enable ;
31212: ENABLE
// if IsOk ( Khatam ) and not HasTask ( Khatam ) then
31213: LD_EXP 36
31217: PPUSH
31218: CALL_OW 302
31222: PUSH
31223: LD_EXP 36
31227: PPUSH
31228: CALL_OW 314
31232: NOT
31233: AND
31234: IFFALSE 31248
// ComMoveToArea ( Khatam , khatamArea ) ;
31236: LD_EXP 36
31240: PPUSH
31241: LD_INT 11
31243: PPUSH
31244: CALL_OW 113
// if IsInArea ( Khatam , khatamArea ) then
31248: LD_EXP 36
31252: PPUSH
31253: LD_INT 11
31255: PPUSH
31256: CALL_OW 308
31260: IFFALSE 31282
// begin SaveVariable ( 1 , 10_KhatamStatus_1 ) ;
31262: LD_INT 1
31264: PPUSH
31265: LD_STRING 10_KhatamStatus_1
31267: PPUSH
31268: CALL_OW 39
// RemoveUnit ( Khatam ) ;
31272: LD_EXP 36
31276: PPUSH
31277: CALL_OW 64
// disable ;
31281: DISABLE
// end ; end ;
31282: END
// every 0 0$30 trigger joinedToEpsilon and not InBattle ( 1 ) and hasBase and LoadVariable ( 02_mikhailStatus_1 , 0 ) and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or not arabianAttack ) do
31283: LD_EXP 7
31287: PUSH
31288: LD_INT 1
31290: PPUSH
31291: CALL_OW 463
31295: NOT
31296: AND
31297: PUSH
31298: LD_EXP 9
31302: AND
31303: PUSH
31304: LD_STRING 02_mikhailStatus_1
31306: PPUSH
31307: LD_INT 0
31309: PPUSH
31310: CALL_OW 30
31314: AND
31315: PUSH
31316: LD_INT 22
31318: PUSH
31319: LD_INT 5
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: PPUSH
31326: CALL_OW 69
31330: PUSH
31331: LD_INT 0
31333: EQUAL
31334: AND
31335: PUSH
31336: LD_INT 22
31338: PUSH
31339: LD_INT 2
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 21
31348: PUSH
31349: LD_INT 1
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PPUSH
31360: CALL_OW 69
31364: PUSH
31365: LD_INT 0
31367: EQUAL
31368: PUSH
31369: LD_EXP 4
31373: NOT
31374: OR
31375: AND
31376: IFFALSE 31398
31378: GO 31380
31380: DISABLE
// begin wait ( 5 5$00 * Difficulty ) ;
31381: LD_INT 10500
31383: PUSH
31384: LD_OWVAR 67
31388: MUL
31389: PPUSH
31390: CALL_OW 67
// PrepareCornell ;
31394: CALL 3198 0 0
// end ;
31398: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 and IsOk ( Cornell ) do
31399: LD_INT 22
31401: PUSH
31402: LD_INT 1
31404: PUSH
31405: EMPTY
31406: LIST
31407: LIST
31408: PPUSH
31409: CALL_OW 69
31413: PPUSH
31414: LD_EXP 42
31418: PPUSH
31419: CALL_OW 74
31423: PPUSH
31424: LD_EXP 42
31428: PPUSH
31429: CALL_OW 296
31433: PUSH
31434: LD_INT 9
31436: LESS
31437: PUSH
31438: LD_EXP 42
31442: PPUSH
31443: CALL_OW 302
31447: AND
31448: IFFALSE 31892
31450: GO 31452
31452: DISABLE
// begin InGameOn ;
31453: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
31457: LD_EXP 42
31461: PPUSH
31462: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
31466: LD_EXP 42
31470: PPUSH
31471: LD_STRING D7-Corn-1
31473: PPUSH
31474: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
31478: LD_INT 22
31480: PUSH
31481: LD_INT 1
31483: PUSH
31484: EMPTY
31485: LIST
31486: LIST
31487: PUSH
31488: LD_INT 2
31490: PUSH
31491: LD_INT 25
31493: PUSH
31494: LD_INT 1
31496: PUSH
31497: EMPTY
31498: LIST
31499: LIST
31500: PUSH
31501: LD_INT 25
31503: PUSH
31504: LD_INT 2
31506: PUSH
31507: EMPTY
31508: LIST
31509: LIST
31510: PUSH
31511: LD_INT 25
31513: PUSH
31514: LD_INT 3
31516: PUSH
31517: EMPTY
31518: LIST
31519: LIST
31520: PUSH
31521: LD_INT 25
31523: PUSH
31524: LD_INT 4
31526: PUSH
31527: EMPTY
31528: LIST
31529: LIST
31530: PUSH
31531: LD_INT 25
31533: PUSH
31534: LD_INT 5
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: PUSH
31541: EMPTY
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: PUSH
31549: EMPTY
31550: LIST
31551: LIST
31552: PPUSH
31553: CALL_OW 69
31557: PPUSH
31558: LD_STRING D7-Sol1-1
31560: PPUSH
31561: LD_STRING D7-FSol1-1
31563: PPUSH
31564: CALL 25102 0 3
// CenterNowOnUnits ( Cornell ) ;
31568: LD_EXP 42
31572: PPUSH
31573: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
31577: LD_EXP 42
31581: PPUSH
31582: LD_STRING D7-Corn-2
31584: PPUSH
31585: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
31589: LD_EXP 23
31593: PPUSH
31594: LD_STRING D7-JMM-2
31596: PPUSH
31597: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
31601: LD_EXP 42
31605: PPUSH
31606: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
31610: LD_EXP 42
31614: PPUSH
31615: LD_STRING D7-Corn-3
31617: PPUSH
31618: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
31622: LD_EXP 42
31626: PPUSH
31627: LD_INT 250
31629: PPUSH
31630: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
31634: LD_EXP 42
31638: PPUSH
31639: LD_INT 1
31641: PPUSH
31642: CALL_OW 235
// wait ( 0 0$1 ) ;
31646: LD_INT 35
31648: PPUSH
31649: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
31653: LD_EXP 23
31657: PPUSH
31658: LD_STRING D7-JMM-3
31660: PPUSH
31661: CALL_OW 88
// InGameOff ;
31665: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
31669: LD_INT 35
31671: PPUSH
31672: CALL_OW 67
// if IsDead ( Cornell ) then
31676: LD_EXP 42
31680: PPUSH
31681: CALL_OW 301
31685: IFFALSE 31689
// exit ;
31687: GO 31892
// until GetLives ( Cornell ) > 350 ;
31689: LD_EXP 42
31693: PPUSH
31694: CALL_OW 256
31698: PUSH
31699: LD_INT 350
31701: GREATER
31702: IFFALSE 31669
// DialogueOn ;
31704: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
31708: LD_EXP 23
31712: PPUSH
31713: LD_STRING D7a-JMM-1
31715: PPUSH
31716: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
31720: LD_EXP 42
31724: PPUSH
31725: LD_STRING D7a-Corn-1
31727: PPUSH
31728: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
31732: LD_EXP 23
31736: PPUSH
31737: LD_STRING D7a-JMM-2
31739: PPUSH
31740: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
31744: LD_EXP 42
31748: PPUSH
31749: LD_STRING D7a-Corn-2
31751: PPUSH
31752: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
31756: LD_EXP 23
31760: PPUSH
31761: LD_STRING D7a-JMM-3
31763: PPUSH
31764: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
31768: LD_EXP 42
31772: PPUSH
31773: LD_STRING D7a-Corn-3
31775: PPUSH
31776: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
31780: LD_EXP 23
31784: PPUSH
31785: LD_STRING D7a-JMM-4
31787: PPUSH
31788: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
31792: LD_EXP 42
31796: PPUSH
31797: LD_STRING D7a-Corn-4
31799: PPUSH
31800: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
31804: LD_EXP 23
31808: PPUSH
31809: LD_STRING D7a-JMM-5
31811: PPUSH
31812: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
31816: LD_EXP 42
31820: PPUSH
31821: LD_STRING D7a-Corn-5
31823: PPUSH
31824: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
31828: LD_EXP 23
31832: PPUSH
31833: LD_STRING D7a-JMM-6
31835: PPUSH
31836: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
31840: LD_EXP 42
31844: PPUSH
31845: LD_STRING D7a-Corn-6
31847: PPUSH
31848: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
31852: LD_EXP 23
31856: PPUSH
31857: LD_STRING D7a-JMM-7
31859: PPUSH
31860: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
31864: LD_EXP 42
31868: PPUSH
31869: LD_STRING D7a-Corn-7
31871: PPUSH
31872: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
31876: LD_EXP 23
31880: PPUSH
31881: LD_STRING D7a-JMM-8
31883: PPUSH
31884: CALL_OW 88
// DialogueOff ;
31888: CALL_OW 7
// end ;
31892: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
31893: LD_INT 54
31895: PPUSH
31896: LD_INT 1
31898: PPUSH
31899: CALL_OW 321
31903: PUSH
31904: LD_INT 2
31906: EQUAL
31907: PUSH
31908: LD_INT 55
31910: PPUSH
31911: LD_INT 1
31913: PPUSH
31914: CALL_OW 321
31918: PUSH
31919: LD_INT 2
31921: EQUAL
31922: AND
31923: PUSH
31924: LD_INT 21
31926: PPUSH
31927: LD_INT 1
31929: PPUSH
31930: CALL_OW 321
31934: PUSH
31935: LD_INT 2
31937: EQUAL
31938: AND
31939: PUSH
31940: LD_INT 22
31942: PPUSH
31943: LD_INT 1
31945: PPUSH
31946: CALL_OW 321
31950: PUSH
31951: LD_INT 2
31953: EQUAL
31954: AND
31955: PUSH
31956: LD_INT 12
31958: PPUSH
31959: LD_INT 1
31961: PPUSH
31962: CALL_OW 321
31966: PUSH
31967: LD_INT 1
31969: EQUAL
31970: PUSH
31971: LD_INT 32
31973: PPUSH
31974: LD_INT 1
31976: PPUSH
31977: CALL_OW 321
31981: PUSH
31982: LD_INT 1
31984: EQUAL
31985: OR
31986: PUSH
31987: EMPTY
31988: LIST
31989: AND
31990: PUSH
31991: LD_EXP 8
31995: AND
31996: PUSH
31997: LD_INT 22
31999: PUSH
32000: LD_INT 3
32002: PUSH
32003: EMPTY
32004: LIST
32005: LIST
32006: PUSH
32007: LD_INT 21
32009: PUSH
32010: LD_INT 1
32012: PUSH
32013: EMPTY
32014: LIST
32015: LIST
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PPUSH
32021: CALL_OW 69
32025: PUSH
32026: LD_INT 0
32028: EQUAL
32029: AND
32030: IFFALSE 32078
32032: GO 32034
32034: DISABLE
// begin case Query ( QEndMission ) of 1 :
32035: LD_STRING QEndMission
32037: PPUSH
32038: CALL_OW 97
32042: PUSH
32043: LD_INT 1
32045: DOUBLE
32046: EQUAL
32047: IFTRUE 32051
32049: GO 32062
32051: POP
// end_the_mission_allowed = true ; 2 :
32052: LD_ADDR_OWVAR 57
32056: PUSH
32057: LD_INT 1
32059: ST_TO_ADDR
32060: GO 32078
32062: LD_INT 2
32064: DOUBLE
32065: EQUAL
32066: IFTRUE 32070
32068: GO 32077
32070: POP
// FinishMission ; end ;
32071: CALL 32124 0 0
32075: GO 32078
32077: POP
// end ;
32078: END
// function EnchancedSaveCharacters ( unit , id ) ; begin
32079: LD_INT 0
32081: PPUSH
// if IsLive ( unit ) or unit in JMMSquad then
32082: LD_VAR 0 1
32086: PPUSH
32087: CALL_OW 300
32091: PUSH
32092: LD_VAR 0 1
32096: PUSH
32097: LD_EXP 45
32101: IN
32102: OR
32103: IFFALSE 32119
// SaveCharacters ( unit , id ) ;
32105: LD_VAR 0 1
32109: PPUSH
32110: LD_VAR 0 2
32114: PPUSH
32115: CALL_OW 38
// end ;
32119: LD_VAR 0 3
32123: RET
// export function FinishMission ; var m1 , m2 , m3 , prefix ; begin
32124: LD_INT 0
32126: PPUSH
32127: PPUSH
32128: PPUSH
32129: PPUSH
32130: PPUSH
// if not hasSniper then
32131: LD_EXP 20
32135: NOT
32136: IFFALSE 32145
// SetAchievement ( ACH_SNIPER ) ;
32138: LD_STRING ACH_SNIPER
32140: PPUSH
32141: CALL_OW 543
// m1 := false ;
32145: LD_ADDR_VAR 0 2
32149: PUSH
32150: LD_INT 0
32152: ST_TO_ADDR
// m2 := false ;
32153: LD_ADDR_VAR 0 3
32157: PUSH
32158: LD_INT 0
32160: ST_TO_ADDR
// m3 := false ;
32161: LD_ADDR_VAR 0 4
32165: PUSH
32166: LD_INT 0
32168: ST_TO_ADDR
// if GetTech ( tech_LasSight , 1 ) = state_researched then
32169: LD_INT 12
32171: PPUSH
32172: LD_INT 1
32174: PPUSH
32175: CALL_OW 321
32179: PUSH
32180: LD_INT 2
32182: EQUAL
32183: IFFALSE 32205
// begin AddMedal ( sights , 1 ) ;
32185: LD_STRING sights
32187: PPUSH
32188: LD_INT 1
32190: PPUSH
32191: CALL_OW 101
// m1 := true ;
32195: LD_ADDR_VAR 0 2
32199: PUSH
32200: LD_INT 1
32202: ST_TO_ADDR
// end else
32203: GO 32216
// AddMedal ( sights , - 1 ) ;
32205: LD_STRING sights
32207: PPUSH
32208: LD_INT 1
32210: NEG
32211: PPUSH
32212: CALL_OW 101
// if GetTech ( tech_AI , 1 ) = state_researched then
32216: LD_INT 32
32218: PPUSH
32219: LD_INT 1
32221: PPUSH
32222: CALL_OW 321
32226: PUSH
32227: LD_INT 2
32229: EQUAL
32230: IFFALSE 32252
// begin AddMedal ( computers , 1 ) ;
32232: LD_STRING computers
32234: PPUSH
32235: LD_INT 1
32237: PPUSH
32238: CALL_OW 101
// m2 := true ;
32242: LD_ADDR_VAR 0 3
32246: PUSH
32247: LD_INT 1
32249: ST_TO_ADDR
// end else
32250: GO 32263
// AddMedal ( computers , - 1 ) ;
32252: LD_STRING computers
32254: PPUSH
32255: LD_INT 1
32257: NEG
32258: PPUSH
32259: CALL_OW 101
// if arabianEscapedCounter = 0 then
32263: LD_EXP 21
32267: PUSH
32268: LD_INT 0
32270: EQUAL
32271: IFFALSE 32303
// begin AddMedal ( renegades , 2 ) ;
32273: LD_STRING renegades
32275: PPUSH
32276: LD_INT 2
32278: PPUSH
32279: CALL_OW 101
// m3 := true ;
32283: LD_ADDR_VAR 0 4
32287: PUSH
32288: LD_INT 1
32290: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
32291: LD_INT 0
32293: PPUSH
32294: LD_STRING 10_ScientistsEscape_1
32296: PPUSH
32297: CALL_OW 39
// end else
32301: GO 32314
// AddMedal ( renegades , - 1 ) ;
32303: LD_STRING renegades
32305: PPUSH
32306: LD_INT 1
32308: NEG
32309: PPUSH
32310: CALL_OW 101
// SaveEpsilonBase ;
32314: CALL 33156 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
32318: LD_VAR 0 2
32322: PUSH
32323: LD_VAR 0 3
32327: AND
32328: PUSH
32329: LD_VAR 0 4
32333: AND
32334: PUSH
32335: LD_OWVAR 67
32339: PUSH
32340: LD_INT 3
32342: GREATEREQUAL
32343: AND
32344: IFFALSE 32356
// SetAchievementEX ( ACH_AMER , 10 ) ;
32346: LD_STRING ACH_AMER
32348: PPUSH
32349: LD_INT 10
32351: PPUSH
32352: CALL_OW 564
// if tick <= 40 40$00 then
32356: LD_OWVAR 1
32360: PUSH
32361: LD_INT 84000
32363: LESSEQUAL
32364: IFFALSE 32380
// begin wait ( 3 ) ;
32366: LD_INT 3
32368: PPUSH
32369: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
32373: LD_STRING ACH_ASPEED_10
32375: PPUSH
32376: CALL_OW 543
// end ; GiveMedals ( Main ) ;
32380: LD_STRING Main
32382: PPUSH
32383: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
32387: LD_INT 22
32389: PUSH
32390: LD_INT 1
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PUSH
32397: LD_INT 23
32399: PUSH
32400: LD_INT 1
32402: PUSH
32403: EMPTY
32404: LIST
32405: LIST
32406: PUSH
32407: LD_INT 21
32409: PUSH
32410: LD_INT 1
32412: PUSH
32413: EMPTY
32414: LIST
32415: LIST
32416: PUSH
32417: LD_INT 2
32419: PUSH
32420: LD_INT 25
32422: PUSH
32423: LD_INT 1
32425: PUSH
32426: EMPTY
32427: LIST
32428: LIST
32429: PUSH
32430: LD_INT 25
32432: PUSH
32433: LD_INT 2
32435: PUSH
32436: EMPTY
32437: LIST
32438: LIST
32439: PUSH
32440: LD_INT 25
32442: PUSH
32443: LD_INT 3
32445: PUSH
32446: EMPTY
32447: LIST
32448: LIST
32449: PUSH
32450: LD_INT 25
32452: PUSH
32453: LD_INT 4
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: PUSH
32460: LD_INT 25
32462: PUSH
32463: LD_INT 5
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: PUSH
32470: LD_INT 25
32472: PUSH
32473: LD_INT 8
32475: PUSH
32476: EMPTY
32477: LIST
32478: LIST
32479: PUSH
32480: EMPTY
32481: LIST
32482: LIST
32483: LIST
32484: LIST
32485: LIST
32486: LIST
32487: LIST
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: LIST
32493: LIST
32494: PPUSH
32495: CALL_OW 69
32499: PPUSH
32500: CALL_OW 43
// prefix := 10c_ ;
32504: LD_ADDR_VAR 0 5
32508: PUSH
32509: LD_STRING 10c_
32511: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
32512: LD_EXP 23
32516: PPUSH
32517: LD_VAR 0 5
32521: PUSH
32522: LD_STRING JMM
32524: STR
32525: PPUSH
32526: CALL_OW 38
// EnchancedSaveCharacters ( Brown , prefix & Brown ) ;
32530: LD_EXP 24
32534: PPUSH
32535: LD_VAR 0 5
32539: PUSH
32540: LD_STRING Brown
32542: STR
32543: PPUSH
32544: CALL 32079 0 2
// EnchancedSaveCharacters ( Donaldson , prefix & Donaldson ) ;
32548: LD_EXP 25
32552: PPUSH
32553: LD_VAR 0 5
32557: PUSH
32558: LD_STRING Donaldson
32560: STR
32561: PPUSH
32562: CALL 32079 0 2
// EnchancedSaveCharacters ( Bobby , prefix & Bobby ) ;
32566: LD_EXP 26
32570: PPUSH
32571: LD_VAR 0 5
32575: PUSH
32576: LD_STRING Bobby
32578: STR
32579: PPUSH
32580: CALL 32079 0 2
// EnchancedSaveCharacters ( Cyrus , prefix & Cyrus ) ;
32584: LD_EXP 27
32588: PPUSH
32589: LD_VAR 0 5
32593: PUSH
32594: LD_STRING Cyrus
32596: STR
32597: PPUSH
32598: CALL 32079 0 2
// EnchancedSaveCharacters ( Lisa , prefix & Lisa ) ;
32602: LD_EXP 28
32606: PPUSH
32607: LD_VAR 0 5
32611: PUSH
32612: LD_STRING Lisa
32614: STR
32615: PPUSH
32616: CALL 32079 0 2
// EnchancedSaveCharacters ( Frank , prefix & Frank ) ;
32620: LD_EXP 29
32624: PPUSH
32625: LD_VAR 0 5
32629: PUSH
32630: LD_STRING Frank
32632: STR
32633: PPUSH
32634: CALL 32079 0 2
// if Kikuchi then
32638: LD_EXP 30
32642: IFFALSE 32669
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
32644: LD_STRING enableBioCharacter(BIO_YAMO)
32646: PPUSH
32647: CALL_OW 559
// EnchancedSaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
32651: LD_EXP 30
32655: PPUSH
32656: LD_VAR 0 5
32660: PUSH
32661: LD_STRING Kikuchi
32663: STR
32664: PPUSH
32665: CALL 32079 0 2
// end ; EnchancedSaveCharacters ( Houten , prefix & Houten ) ;
32669: LD_EXP 31
32673: PPUSH
32674: LD_VAR 0 5
32678: PUSH
32679: LD_STRING Houten
32681: STR
32682: PPUSH
32683: CALL 32079 0 2
// EnchancedSaveCharacters ( Gary , prefix & Gary ) ;
32687: LD_EXP 32
32691: PPUSH
32692: LD_VAR 0 5
32696: PUSH
32697: LD_STRING Gary
32699: STR
32700: PPUSH
32701: CALL 32079 0 2
// EnchancedSaveCharacters ( Cornell , prefix & Cornell ) ;
32705: LD_EXP 42
32709: PPUSH
32710: LD_VAR 0 5
32714: PUSH
32715: LD_STRING Cornell
32717: STR
32718: PPUSH
32719: CALL 32079 0 2
// EnchancedSaveCharacters ( Simms , prefix & Simms ) ;
32723: LD_EXP 33
32727: PPUSH
32728: LD_VAR 0 5
32732: PUSH
32733: LD_STRING Simms
32735: STR
32736: PPUSH
32737: CALL 32079 0 2
// EnchancedSaveCharacters ( Denis , prefix & Denis ) ;
32741: LD_EXP 34
32745: PPUSH
32746: LD_VAR 0 5
32750: PUSH
32751: LD_STRING Denis
32753: STR
32754: PPUSH
32755: CALL 32079 0 2
// EnchancedSaveCharacters ( Joan , prefix & Joan ) ;
32759: LD_EXP 35
32763: PPUSH
32764: LD_VAR 0 5
32768: PUSH
32769: LD_STRING Joan
32771: STR
32772: PPUSH
32773: CALL 32079 0 2
// EnchancedSaveCharacters ( Gladstone , prefix & Gladstone ) ;
32777: LD_EXP 37
32781: PPUSH
32782: LD_VAR 0 5
32786: PUSH
32787: LD_STRING Gladstone
32789: STR
32790: PPUSH
32791: CALL 32079 0 2
// EnchancedSaveCharacters ( DeltaDoctor , prefix & DeltaDoctor ) ;
32795: LD_EXP 39
32799: PPUSH
32800: LD_VAR 0 5
32804: PUSH
32805: LD_STRING DeltaDoctor
32807: STR
32808: PPUSH
32809: CALL 32079 0 2
// if IsLive ( Mike ) then
32813: LD_EXP 41
32817: PPUSH
32818: CALL_OW 300
32822: IFFALSE 32842
// SaveCharacters ( Mike , prefix & Mike ) ;
32824: LD_EXP 41
32828: PPUSH
32829: LD_VAR 0 5
32833: PUSH
32834: LD_STRING Mike
32836: STR
32837: PPUSH
32838: CALL_OW 38
// SaveCharacters ( others , 10c_lock ) ;
32842: LD_EXP 46
32846: PPUSH
32847: LD_STRING 10c_lock
32849: PPUSH
32850: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
32854: LD_INT 50
32856: PUSH
32857: EMPTY
32858: LIST
32859: PUSH
32860: LD_INT 22
32862: PUSH
32863: LD_INT 1
32865: PUSH
32866: EMPTY
32867: LIST
32868: LIST
32869: PUSH
32870: LD_INT 21
32872: PUSH
32873: LD_INT 1
32875: PUSH
32876: EMPTY
32877: LIST
32878: LIST
32879: PUSH
32880: LD_INT 2
32882: PUSH
32883: LD_INT 25
32885: PUSH
32886: LD_INT 1
32888: PUSH
32889: EMPTY
32890: LIST
32891: LIST
32892: PUSH
32893: LD_INT 25
32895: PUSH
32896: LD_INT 2
32898: PUSH
32899: EMPTY
32900: LIST
32901: LIST
32902: PUSH
32903: LD_INT 25
32905: PUSH
32906: LD_INT 3
32908: PUSH
32909: EMPTY
32910: LIST
32911: LIST
32912: PUSH
32913: LD_INT 25
32915: PUSH
32916: LD_INT 4
32918: PUSH
32919: EMPTY
32920: LIST
32921: LIST
32922: PUSH
32923: LD_INT 25
32925: PUSH
32926: LD_INT 5
32928: PUSH
32929: EMPTY
32930: LIST
32931: LIST
32932: PUSH
32933: LD_INT 25
32935: PUSH
32936: LD_INT 8
32938: PUSH
32939: EMPTY
32940: LIST
32941: LIST
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: LIST
32947: LIST
32948: LIST
32949: LIST
32950: LIST
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: LIST
32956: LIST
32957: PPUSH
32958: CALL_OW 69
32962: PUSH
32963: LD_EXP 23
32967: PUSH
32968: LD_EXP 24
32972: PUSH
32973: LD_EXP 25
32977: PUSH
32978: LD_EXP 26
32982: PUSH
32983: LD_EXP 27
32987: PUSH
32988: LD_EXP 28
32992: PUSH
32993: LD_EXP 29
32997: PUSH
32998: LD_EXP 37
33002: PUSH
33003: LD_EXP 30
33007: PUSH
33008: LD_EXP 34
33012: PUSH
33013: LD_EXP 35
33017: PUSH
33018: LD_EXP 31
33022: PUSH
33023: LD_EXP 33
33027: PUSH
33028: LD_EXP 32
33032: PUSH
33033: LD_EXP 39
33037: PUSH
33038: LD_EXP 42
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: LIST
33047: LIST
33048: LIST
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: LIST
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: DIFF
33061: PPUSH
33062: LD_STRING 10_other_survivors
33064: PPUSH
33065: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) diff Mike , 10_ape ) ;
33069: LD_INT 50
33071: PUSH
33072: EMPTY
33073: LIST
33074: PUSH
33075: LD_INT 22
33077: PUSH
33078: LD_INT 1
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 21
33087: PUSH
33088: LD_INT 1
33090: PUSH
33091: EMPTY
33092: LIST
33093: LIST
33094: PUSH
33095: LD_INT 2
33097: PUSH
33098: LD_INT 25
33100: PUSH
33101: LD_INT 16
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: PUSH
33108: LD_INT 25
33110: PUSH
33111: LD_INT 12
33113: PUSH
33114: EMPTY
33115: LIST
33116: LIST
33117: PUSH
33118: EMPTY
33119: LIST
33120: LIST
33121: LIST
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: PPUSH
33129: CALL_OW 69
33133: PUSH
33134: LD_EXP 41
33138: DIFF
33139: PPUSH
33140: LD_STRING 10_ape
33142: PPUSH
33143: CALL_OW 38
// YouWin ;
33147: CALL_OW 103
// end ;
33151: LD_VAR 0 1
33155: RET
// function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
33156: LD_INT 0
33158: PPUSH
33159: PPUSH
33160: PPUSH
33161: PPUSH
// epsilonBase := [ ] ;
33162: LD_ADDR_VAR 0 2
33166: PUSH
33167: EMPTY
33168: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
33169: LD_ADDR_VAR 0 3
33173: PUSH
33174: LD_INT 22
33176: PUSH
33177: LD_INT 1
33179: PUSH
33180: EMPTY
33181: LIST
33182: LIST
33183: PUSH
33184: LD_INT 21
33186: PUSH
33187: LD_INT 3
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: PUSH
33194: LD_INT 50
33196: PUSH
33197: EMPTY
33198: LIST
33199: PUSH
33200: EMPTY
33201: LIST
33202: LIST
33203: LIST
33204: PPUSH
33205: CALL_OW 69
33209: ST_TO_ADDR
// for i in buildings do
33210: LD_ADDR_VAR 0 4
33214: PUSH
33215: LD_VAR 0 3
33219: PUSH
33220: FOR_IN
33221: IFFALSE 33673
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
33223: LD_VAR 0 4
33227: PPUSH
33228: CALL_OW 266
33232: PUSH
33233: LD_INT 6
33235: PUSH
33236: LD_INT 7
33238: PUSH
33239: LD_INT 8
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: LIST
33246: IN
33247: IFFALSE 33361
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
33249: LD_ADDR_VAR 0 2
33253: PUSH
33254: LD_VAR 0 2
33258: PUSH
33259: LD_VAR 0 4
33263: PPUSH
33264: CALL_OW 266
33268: PUSH
33269: LD_VAR 0 4
33273: PPUSH
33274: CALL_OW 250
33278: PUSH
33279: LD_VAR 0 4
33283: PPUSH
33284: CALL_OW 251
33288: PUSH
33289: LD_VAR 0 4
33293: PPUSH
33294: CALL_OW 254
33298: PUSH
33299: LD_VAR 0 4
33303: PPUSH
33304: CALL_OW 267
33308: PUSH
33309: LD_VAR 0 4
33313: PPUSH
33314: CALL_OW 248
33318: PUSH
33319: LD_VAR 0 4
33323: PPUSH
33324: LD_INT 1
33326: PPUSH
33327: CALL_OW 268
33331: PUSH
33332: LD_VAR 0 4
33336: PPUSH
33337: LD_INT 2
33339: PPUSH
33340: CALL_OW 268
33344: PUSH
33345: EMPTY
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: LIST
33354: PUSH
33355: EMPTY
33356: LIST
33357: ADD
33358: ST_TO_ADDR
33359: GO 33671
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
33361: LD_VAR 0 4
33365: PPUSH
33366: CALL_OW 266
33370: PUSH
33371: LD_INT 32
33373: EQUAL
33374: PUSH
33375: LD_VAR 0 4
33379: PPUSH
33380: CALL_OW 266
33384: PUSH
33385: LD_INT 33
33387: EQUAL
33388: OR
33389: IFFALSE 33486
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
33391: LD_ADDR_VAR 0 2
33395: PUSH
33396: LD_VAR 0 2
33400: PUSH
33401: LD_VAR 0 4
33405: PPUSH
33406: CALL_OW 266
33410: PUSH
33411: LD_VAR 0 4
33415: PPUSH
33416: CALL_OW 250
33420: PUSH
33421: LD_VAR 0 4
33425: PPUSH
33426: CALL_OW 251
33430: PUSH
33431: LD_VAR 0 4
33435: PPUSH
33436: CALL_OW 254
33440: PUSH
33441: LD_VAR 0 4
33445: PPUSH
33446: CALL_OW 267
33450: PUSH
33451: LD_VAR 0 4
33455: PPUSH
33456: CALL_OW 248
33460: PUSH
33461: LD_VAR 0 4
33465: PPUSH
33466: CALL_OW 269
33470: PUSH
33471: EMPTY
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: PUSH
33480: EMPTY
33481: LIST
33482: ADD
33483: ST_TO_ADDR
33484: GO 33671
// if GetBType ( i ) = b_factory then
33486: LD_VAR 0 4
33490: PPUSH
33491: CALL_OW 266
33495: PUSH
33496: LD_INT 3
33498: EQUAL
33499: IFFALSE 33589
// epsilonBase := Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
33501: LD_ADDR_VAR 0 2
33505: PUSH
33506: LD_VAR 0 2
33510: PPUSH
33511: LD_INT 1
33513: PPUSH
33514: LD_VAR 0 4
33518: PPUSH
33519: CALL_OW 266
33523: PUSH
33524: LD_VAR 0 4
33528: PPUSH
33529: CALL_OW 250
33533: PUSH
33534: LD_VAR 0 4
33538: PPUSH
33539: CALL_OW 251
33543: PUSH
33544: LD_VAR 0 4
33548: PPUSH
33549: CALL_OW 254
33553: PUSH
33554: LD_VAR 0 4
33558: PPUSH
33559: CALL_OW 267
33563: PUSH
33564: LD_VAR 0 4
33568: PPUSH
33569: CALL_OW 248
33573: PUSH
33574: EMPTY
33575: LIST
33576: LIST
33577: LIST
33578: LIST
33579: LIST
33580: LIST
33581: PPUSH
33582: CALL_OW 2
33586: ST_TO_ADDR
33587: GO 33671
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
33589: LD_ADDR_VAR 0 2
33593: PUSH
33594: LD_VAR 0 2
33598: PUSH
33599: LD_VAR 0 4
33603: PPUSH
33604: CALL_OW 266
33608: PUSH
33609: LD_VAR 0 4
33613: PPUSH
33614: CALL_OW 250
33618: PUSH
33619: LD_VAR 0 4
33623: PPUSH
33624: CALL_OW 251
33628: PUSH
33629: LD_VAR 0 4
33633: PPUSH
33634: CALL_OW 254
33638: PUSH
33639: LD_VAR 0 4
33643: PPUSH
33644: CALL_OW 267
33648: PUSH
33649: LD_VAR 0 4
33653: PPUSH
33654: CALL_OW 248
33658: PUSH
33659: EMPTY
33660: LIST
33661: LIST
33662: LIST
33663: LIST
33664: LIST
33665: LIST
33666: PUSH
33667: EMPTY
33668: LIST
33669: ADD
33670: ST_TO_ADDR
// end ;
33671: GO 33220
33673: POP
33674: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
33675: LD_VAR 0 2
33679: PPUSH
33680: LD_STRING 10_EpsilonBase
33682: PPUSH
33683: CALL_OW 39
// SaveVariable ( ListEnvironmentArea ( epsilonBaseArea ) , 10_EpsilonEnv ) ;
33687: LD_INT 34
33689: PPUSH
33690: CALL_OW 353
33694: PPUSH
33695: LD_STRING 10_EpsilonEnv
33697: PPUSH
33698: CALL_OW 39
// end ; end_of_file
33702: LD_VAR 0 1
33706: RET
// every 1 1$05 + 0 0$20 trigger joinedToEpsilon do var i , tmp ;
33707: LD_EXP 7
33711: IFFALSE 33834
33713: GO 33715
33715: DISABLE
33716: LD_INT 0
33718: PPUSH
33719: PPUSH
// begin enable ;
33720: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
33721: LD_INT 35
33723: PPUSH
33724: LD_INT 385
33726: PPUSH
33727: CALL_OW 12
33731: PPUSH
33732: CALL_OW 67
// tmp := [ cratesSpawn1Area , cratesSpawn2Area , cratesSpawn3Area , cratesSpawn4Area , cratesSpawn5Area , cratesSpawn6Area ] ;
33736: LD_ADDR_VAR 0 2
33740: PUSH
33741: LD_INT 13
33743: PUSH
33744: LD_INT 14
33746: PUSH
33747: LD_INT 15
33749: PUSH
33750: LD_INT 16
33752: PUSH
33753: LD_INT 17
33755: PUSH
33756: LD_INT 38
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
33767: LD_ADDR_VAR 0 1
33771: PUSH
33772: LD_VAR 0 2
33776: PUSH
33777: LD_INT 1
33779: PPUSH
33780: LD_VAR 0 2
33784: PPUSH
33785: CALL 56609 0 1
33789: PPUSH
33790: CALL_OW 12
33794: ARRAY
33795: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 8 then
33796: LD_VAR 0 1
33800: PPUSH
33801: CALL_OW 435
33805: PUSH
33806: LD_INT 8
33808: LESS
33809: IFFALSE 33834
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
33811: LD_INT 1
33813: PPUSH
33814: LD_INT 5
33816: PPUSH
33817: CALL_OW 12
33821: PPUSH
33822: LD_VAR 0 1
33826: PPUSH
33827: LD_INT 1
33829: PPUSH
33830: CALL_OW 55
// end ;
33834: PPOPN 2
33836: END
// every 0 0$20 trigger tick < 5 5$00 and hasBase do
33837: LD_OWVAR 1
33841: PUSH
33842: LD_INT 10500
33844: LESS
33845: PUSH
33846: LD_EXP 9
33850: AND
33851: IFFALSE 33878
33853: GO 33855
33855: DISABLE
// begin enable ;
33856: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSpawn3Area , true ) ;
33857: LD_INT 1
33859: PPUSH
33860: LD_INT 5
33862: PPUSH
33863: CALL_OW 12
33867: PPUSH
33868: LD_INT 15
33870: PPUSH
33871: LD_INT 1
33873: PPUSH
33874: CALL_OW 55
// end ;
33878: END
// every 0 0$55 trigger ruBase do
33879: LD_EXP 68
33883: IFFALSE 33927
33885: GO 33887
33887: DISABLE
// begin enable ;
33888: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea ) < 3 then
33889: LD_EXP 84
33893: PPUSH
33894: CALL_OW 435
33898: PUSH
33899: LD_INT 3
33901: LESS
33902: IFFALSE 33927
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea , true ) ;
33904: LD_INT 1
33906: PPUSH
33907: LD_INT 5
33909: PPUSH
33910: CALL_OW 12
33914: PPUSH
33915: LD_EXP 84
33919: PPUSH
33920: LD_INT 1
33922: PPUSH
33923: CALL_OW 55
// end ;
33927: END
// every 1 1$05 trigger ruBase2 do
33928: LD_EXP 69
33932: IFFALSE 33976
33934: GO 33936
33936: DISABLE
// begin enable ;
33937: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea2 ) < 3 then
33938: LD_EXP 85
33942: PPUSH
33943: CALL_OW 435
33947: PUSH
33948: LD_INT 3
33950: LESS
33951: IFFALSE 33976
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea2 , true ) ;
33953: LD_INT 1
33955: PPUSH
33956: LD_INT 5
33958: PPUSH
33959: CALL_OW 12
33963: PPUSH
33964: LD_EXP 85
33968: PPUSH
33969: LD_INT 1
33971: PPUSH
33972: CALL_OW 55
// end ; end_of_file end_of_file
33976: END
// export globalGameSaveCounter ; every 0 0$1 do
33977: GO 33979
33979: DISABLE
// begin enable ;
33980: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
33981: LD_STRING updateTimer(
33983: PUSH
33984: LD_OWVAR 1
33988: STR
33989: PUSH
33990: LD_STRING );
33992: STR
33993: PPUSH
33994: CALL_OW 559
// end ;
33998: END
// every 0 0$1 do
33999: GO 34001
34001: DISABLE
// begin globalGameSaveCounter := 0 ;
34002: LD_ADDR_EXP 86
34006: PUSH
34007: LD_INT 0
34009: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
34010: LD_STRING setGameSaveCounter(0)
34012: PPUSH
34013: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
34017: LD_STRING initStreamRollete();
34019: PPUSH
34020: CALL_OW 559
// InitStreamMode ;
34024: CALL 35350 0 0
// DefineStreamItems ( false ) ;
34028: LD_INT 0
34030: PPUSH
34031: CALL 35814 0 1
// end ;
34035: END
// export function SOS_MapStart ( ) ; begin
34036: LD_INT 0
34038: PPUSH
// if streamModeActive then
34039: LD_EXP 87
34043: IFFALSE 34052
// DefineStreamItems ( true ) ;
34045: LD_INT 1
34047: PPUSH
34048: CALL 35814 0 1
// UpdateLuaVariables ( ) ;
34052: CALL 34069 0 0
// UpdateFactoryWaypoints ( ) ;
34056: CALL 48683 0 0
// UpdateWarehouseGatheringPoints ( ) ;
34060: CALL 48940 0 0
// end ;
34064: LD_VAR 0 1
34068: RET
// function UpdateLuaVariables ( ) ; begin
34069: LD_INT 0
34071: PPUSH
// if globalGameSaveCounter then
34072: LD_EXP 86
34076: IFFALSE 34110
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
34078: LD_ADDR_EXP 86
34082: PUSH
34083: LD_EXP 86
34087: PPUSH
34088: CALL 93570 0 1
34092: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
34093: LD_STRING setGameSaveCounter(
34095: PUSH
34096: LD_EXP 86
34100: STR
34101: PUSH
34102: LD_STRING )
34104: STR
34105: PPUSH
34106: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
34110: LD_STRING setGameDifficulty(
34112: PUSH
34113: LD_OWVAR 67
34117: STR
34118: PUSH
34119: LD_STRING )
34121: STR
34122: PPUSH
34123: CALL_OW 559
// end ;
34127: LD_VAR 0 1
34131: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34132: LD_INT 0
34134: PPUSH
// if p2 = stream_mode then
34135: LD_VAR 0 2
34139: PUSH
34140: LD_INT 100
34142: EQUAL
34143: IFFALSE 35146
// begin if not StreamModeActive then
34145: LD_EXP 87
34149: NOT
34150: IFFALSE 34160
// StreamModeActive := true ;
34152: LD_ADDR_EXP 87
34156: PUSH
34157: LD_INT 1
34159: ST_TO_ADDR
// if p3 = 0 then
34160: LD_VAR 0 3
34164: PUSH
34165: LD_INT 0
34167: EQUAL
34168: IFFALSE 34174
// InitStreamMode ;
34170: CALL 35350 0 0
// if p3 = 1 then
34174: LD_VAR 0 3
34178: PUSH
34179: LD_INT 1
34181: EQUAL
34182: IFFALSE 34192
// sRocket := true ;
34184: LD_ADDR_EXP 92
34188: PUSH
34189: LD_INT 1
34191: ST_TO_ADDR
// if p3 = 2 then
34192: LD_VAR 0 3
34196: PUSH
34197: LD_INT 2
34199: EQUAL
34200: IFFALSE 34210
// sSpeed := true ;
34202: LD_ADDR_EXP 91
34206: PUSH
34207: LD_INT 1
34209: ST_TO_ADDR
// if p3 = 3 then
34210: LD_VAR 0 3
34214: PUSH
34215: LD_INT 3
34217: EQUAL
34218: IFFALSE 34228
// sEngine := true ;
34220: LD_ADDR_EXP 93
34224: PUSH
34225: LD_INT 1
34227: ST_TO_ADDR
// if p3 = 4 then
34228: LD_VAR 0 3
34232: PUSH
34233: LD_INT 4
34235: EQUAL
34236: IFFALSE 34246
// sSpec := true ;
34238: LD_ADDR_EXP 90
34242: PUSH
34243: LD_INT 1
34245: ST_TO_ADDR
// if p3 = 5 then
34246: LD_VAR 0 3
34250: PUSH
34251: LD_INT 5
34253: EQUAL
34254: IFFALSE 34264
// sLevel := true ;
34256: LD_ADDR_EXP 94
34260: PUSH
34261: LD_INT 1
34263: ST_TO_ADDR
// if p3 = 6 then
34264: LD_VAR 0 3
34268: PUSH
34269: LD_INT 6
34271: EQUAL
34272: IFFALSE 34282
// sArmoury := true ;
34274: LD_ADDR_EXP 95
34278: PUSH
34279: LD_INT 1
34281: ST_TO_ADDR
// if p3 = 7 then
34282: LD_VAR 0 3
34286: PUSH
34287: LD_INT 7
34289: EQUAL
34290: IFFALSE 34300
// sRadar := true ;
34292: LD_ADDR_EXP 96
34296: PUSH
34297: LD_INT 1
34299: ST_TO_ADDR
// if p3 = 8 then
34300: LD_VAR 0 3
34304: PUSH
34305: LD_INT 8
34307: EQUAL
34308: IFFALSE 34318
// sBunker := true ;
34310: LD_ADDR_EXP 97
34314: PUSH
34315: LD_INT 1
34317: ST_TO_ADDR
// if p3 = 9 then
34318: LD_VAR 0 3
34322: PUSH
34323: LD_INT 9
34325: EQUAL
34326: IFFALSE 34336
// sHack := true ;
34328: LD_ADDR_EXP 98
34332: PUSH
34333: LD_INT 1
34335: ST_TO_ADDR
// if p3 = 10 then
34336: LD_VAR 0 3
34340: PUSH
34341: LD_INT 10
34343: EQUAL
34344: IFFALSE 34354
// sFire := true ;
34346: LD_ADDR_EXP 99
34350: PUSH
34351: LD_INT 1
34353: ST_TO_ADDR
// if p3 = 11 then
34354: LD_VAR 0 3
34358: PUSH
34359: LD_INT 11
34361: EQUAL
34362: IFFALSE 34372
// sRefresh := true ;
34364: LD_ADDR_EXP 100
34368: PUSH
34369: LD_INT 1
34371: ST_TO_ADDR
// if p3 = 12 then
34372: LD_VAR 0 3
34376: PUSH
34377: LD_INT 12
34379: EQUAL
34380: IFFALSE 34390
// sExp := true ;
34382: LD_ADDR_EXP 101
34386: PUSH
34387: LD_INT 1
34389: ST_TO_ADDR
// if p3 = 13 then
34390: LD_VAR 0 3
34394: PUSH
34395: LD_INT 13
34397: EQUAL
34398: IFFALSE 34408
// sDepot := true ;
34400: LD_ADDR_EXP 102
34404: PUSH
34405: LD_INT 1
34407: ST_TO_ADDR
// if p3 = 14 then
34408: LD_VAR 0 3
34412: PUSH
34413: LD_INT 14
34415: EQUAL
34416: IFFALSE 34426
// sFlag := true ;
34418: LD_ADDR_EXP 103
34422: PUSH
34423: LD_INT 1
34425: ST_TO_ADDR
// if p3 = 15 then
34426: LD_VAR 0 3
34430: PUSH
34431: LD_INT 15
34433: EQUAL
34434: IFFALSE 34444
// sKamikadze := true ;
34436: LD_ADDR_EXP 111
34440: PUSH
34441: LD_INT 1
34443: ST_TO_ADDR
// if p3 = 16 then
34444: LD_VAR 0 3
34448: PUSH
34449: LD_INT 16
34451: EQUAL
34452: IFFALSE 34462
// sTroll := true ;
34454: LD_ADDR_EXP 112
34458: PUSH
34459: LD_INT 1
34461: ST_TO_ADDR
// if p3 = 17 then
34462: LD_VAR 0 3
34466: PUSH
34467: LD_INT 17
34469: EQUAL
34470: IFFALSE 34480
// sSlow := true ;
34472: LD_ADDR_EXP 113
34476: PUSH
34477: LD_INT 1
34479: ST_TO_ADDR
// if p3 = 18 then
34480: LD_VAR 0 3
34484: PUSH
34485: LD_INT 18
34487: EQUAL
34488: IFFALSE 34498
// sLack := true ;
34490: LD_ADDR_EXP 114
34494: PUSH
34495: LD_INT 1
34497: ST_TO_ADDR
// if p3 = 19 then
34498: LD_VAR 0 3
34502: PUSH
34503: LD_INT 19
34505: EQUAL
34506: IFFALSE 34516
// sTank := true ;
34508: LD_ADDR_EXP 116
34512: PUSH
34513: LD_INT 1
34515: ST_TO_ADDR
// if p3 = 20 then
34516: LD_VAR 0 3
34520: PUSH
34521: LD_INT 20
34523: EQUAL
34524: IFFALSE 34534
// sRemote := true ;
34526: LD_ADDR_EXP 117
34530: PUSH
34531: LD_INT 1
34533: ST_TO_ADDR
// if p3 = 21 then
34534: LD_VAR 0 3
34538: PUSH
34539: LD_INT 21
34541: EQUAL
34542: IFFALSE 34552
// sPowell := true ;
34544: LD_ADDR_EXP 118
34548: PUSH
34549: LD_INT 1
34551: ST_TO_ADDR
// if p3 = 22 then
34552: LD_VAR 0 3
34556: PUSH
34557: LD_INT 22
34559: EQUAL
34560: IFFALSE 34570
// sTeleport := true ;
34562: LD_ADDR_EXP 121
34566: PUSH
34567: LD_INT 1
34569: ST_TO_ADDR
// if p3 = 23 then
34570: LD_VAR 0 3
34574: PUSH
34575: LD_INT 23
34577: EQUAL
34578: IFFALSE 34588
// sOilTower := true ;
34580: LD_ADDR_EXP 123
34584: PUSH
34585: LD_INT 1
34587: ST_TO_ADDR
// if p3 = 24 then
34588: LD_VAR 0 3
34592: PUSH
34593: LD_INT 24
34595: EQUAL
34596: IFFALSE 34606
// sShovel := true ;
34598: LD_ADDR_EXP 124
34602: PUSH
34603: LD_INT 1
34605: ST_TO_ADDR
// if p3 = 25 then
34606: LD_VAR 0 3
34610: PUSH
34611: LD_INT 25
34613: EQUAL
34614: IFFALSE 34624
// sSheik := true ;
34616: LD_ADDR_EXP 125
34620: PUSH
34621: LD_INT 1
34623: ST_TO_ADDR
// if p3 = 26 then
34624: LD_VAR 0 3
34628: PUSH
34629: LD_INT 26
34631: EQUAL
34632: IFFALSE 34642
// sEarthquake := true ;
34634: LD_ADDR_EXP 127
34638: PUSH
34639: LD_INT 1
34641: ST_TO_ADDR
// if p3 = 27 then
34642: LD_VAR 0 3
34646: PUSH
34647: LD_INT 27
34649: EQUAL
34650: IFFALSE 34660
// sAI := true ;
34652: LD_ADDR_EXP 128
34656: PUSH
34657: LD_INT 1
34659: ST_TO_ADDR
// if p3 = 28 then
34660: LD_VAR 0 3
34664: PUSH
34665: LD_INT 28
34667: EQUAL
34668: IFFALSE 34678
// sCargo := true ;
34670: LD_ADDR_EXP 131
34674: PUSH
34675: LD_INT 1
34677: ST_TO_ADDR
// if p3 = 29 then
34678: LD_VAR 0 3
34682: PUSH
34683: LD_INT 29
34685: EQUAL
34686: IFFALSE 34696
// sDLaser := true ;
34688: LD_ADDR_EXP 132
34692: PUSH
34693: LD_INT 1
34695: ST_TO_ADDR
// if p3 = 30 then
34696: LD_VAR 0 3
34700: PUSH
34701: LD_INT 30
34703: EQUAL
34704: IFFALSE 34714
// sExchange := true ;
34706: LD_ADDR_EXP 133
34710: PUSH
34711: LD_INT 1
34713: ST_TO_ADDR
// if p3 = 31 then
34714: LD_VAR 0 3
34718: PUSH
34719: LD_INT 31
34721: EQUAL
34722: IFFALSE 34732
// sFac := true ;
34724: LD_ADDR_EXP 134
34728: PUSH
34729: LD_INT 1
34731: ST_TO_ADDR
// if p3 = 32 then
34732: LD_VAR 0 3
34736: PUSH
34737: LD_INT 32
34739: EQUAL
34740: IFFALSE 34750
// sPower := true ;
34742: LD_ADDR_EXP 135
34746: PUSH
34747: LD_INT 1
34749: ST_TO_ADDR
// if p3 = 33 then
34750: LD_VAR 0 3
34754: PUSH
34755: LD_INT 33
34757: EQUAL
34758: IFFALSE 34768
// sRandom := true ;
34760: LD_ADDR_EXP 136
34764: PUSH
34765: LD_INT 1
34767: ST_TO_ADDR
// if p3 = 34 then
34768: LD_VAR 0 3
34772: PUSH
34773: LD_INT 34
34775: EQUAL
34776: IFFALSE 34786
// sShield := true ;
34778: LD_ADDR_EXP 137
34782: PUSH
34783: LD_INT 1
34785: ST_TO_ADDR
// if p3 = 35 then
34786: LD_VAR 0 3
34790: PUSH
34791: LD_INT 35
34793: EQUAL
34794: IFFALSE 34804
// sTime := true ;
34796: LD_ADDR_EXP 138
34800: PUSH
34801: LD_INT 1
34803: ST_TO_ADDR
// if p3 = 36 then
34804: LD_VAR 0 3
34808: PUSH
34809: LD_INT 36
34811: EQUAL
34812: IFFALSE 34822
// sTools := true ;
34814: LD_ADDR_EXP 139
34818: PUSH
34819: LD_INT 1
34821: ST_TO_ADDR
// if p3 = 101 then
34822: LD_VAR 0 3
34826: PUSH
34827: LD_INT 101
34829: EQUAL
34830: IFFALSE 34840
// sSold := true ;
34832: LD_ADDR_EXP 104
34836: PUSH
34837: LD_INT 1
34839: ST_TO_ADDR
// if p3 = 102 then
34840: LD_VAR 0 3
34844: PUSH
34845: LD_INT 102
34847: EQUAL
34848: IFFALSE 34858
// sDiff := true ;
34850: LD_ADDR_EXP 105
34854: PUSH
34855: LD_INT 1
34857: ST_TO_ADDR
// if p3 = 103 then
34858: LD_VAR 0 3
34862: PUSH
34863: LD_INT 103
34865: EQUAL
34866: IFFALSE 34876
// sFog := true ;
34868: LD_ADDR_EXP 108
34872: PUSH
34873: LD_INT 1
34875: ST_TO_ADDR
// if p3 = 104 then
34876: LD_VAR 0 3
34880: PUSH
34881: LD_INT 104
34883: EQUAL
34884: IFFALSE 34894
// sReset := true ;
34886: LD_ADDR_EXP 109
34890: PUSH
34891: LD_INT 1
34893: ST_TO_ADDR
// if p3 = 105 then
34894: LD_VAR 0 3
34898: PUSH
34899: LD_INT 105
34901: EQUAL
34902: IFFALSE 34912
// sSun := true ;
34904: LD_ADDR_EXP 110
34908: PUSH
34909: LD_INT 1
34911: ST_TO_ADDR
// if p3 = 106 then
34912: LD_VAR 0 3
34916: PUSH
34917: LD_INT 106
34919: EQUAL
34920: IFFALSE 34930
// sTiger := true ;
34922: LD_ADDR_EXP 106
34926: PUSH
34927: LD_INT 1
34929: ST_TO_ADDR
// if p3 = 107 then
34930: LD_VAR 0 3
34934: PUSH
34935: LD_INT 107
34937: EQUAL
34938: IFFALSE 34948
// sBomb := true ;
34940: LD_ADDR_EXP 107
34944: PUSH
34945: LD_INT 1
34947: ST_TO_ADDR
// if p3 = 108 then
34948: LD_VAR 0 3
34952: PUSH
34953: LD_INT 108
34955: EQUAL
34956: IFFALSE 34966
// sWound := true ;
34958: LD_ADDR_EXP 115
34962: PUSH
34963: LD_INT 1
34965: ST_TO_ADDR
// if p3 = 109 then
34966: LD_VAR 0 3
34970: PUSH
34971: LD_INT 109
34973: EQUAL
34974: IFFALSE 34984
// sBetray := true ;
34976: LD_ADDR_EXP 119
34980: PUSH
34981: LD_INT 1
34983: ST_TO_ADDR
// if p3 = 110 then
34984: LD_VAR 0 3
34988: PUSH
34989: LD_INT 110
34991: EQUAL
34992: IFFALSE 35002
// sContamin := true ;
34994: LD_ADDR_EXP 120
34998: PUSH
34999: LD_INT 1
35001: ST_TO_ADDR
// if p3 = 111 then
35002: LD_VAR 0 3
35006: PUSH
35007: LD_INT 111
35009: EQUAL
35010: IFFALSE 35020
// sOil := true ;
35012: LD_ADDR_EXP 122
35016: PUSH
35017: LD_INT 1
35019: ST_TO_ADDR
// if p3 = 112 then
35020: LD_VAR 0 3
35024: PUSH
35025: LD_INT 112
35027: EQUAL
35028: IFFALSE 35038
// sStu := true ;
35030: LD_ADDR_EXP 126
35034: PUSH
35035: LD_INT 1
35037: ST_TO_ADDR
// if p3 = 113 then
35038: LD_VAR 0 3
35042: PUSH
35043: LD_INT 113
35045: EQUAL
35046: IFFALSE 35056
// sBazooka := true ;
35048: LD_ADDR_EXP 129
35052: PUSH
35053: LD_INT 1
35055: ST_TO_ADDR
// if p3 = 114 then
35056: LD_VAR 0 3
35060: PUSH
35061: LD_INT 114
35063: EQUAL
35064: IFFALSE 35074
// sMortar := true ;
35066: LD_ADDR_EXP 130
35070: PUSH
35071: LD_INT 1
35073: ST_TO_ADDR
// if p3 = 115 then
35074: LD_VAR 0 3
35078: PUSH
35079: LD_INT 115
35081: EQUAL
35082: IFFALSE 35092
// sRanger := true ;
35084: LD_ADDR_EXP 140
35088: PUSH
35089: LD_INT 1
35091: ST_TO_ADDR
// if p3 = 116 then
35092: LD_VAR 0 3
35096: PUSH
35097: LD_INT 116
35099: EQUAL
35100: IFFALSE 35110
// sComputer := true ;
35102: LD_ADDR_EXP 141
35106: PUSH
35107: LD_INT 1
35109: ST_TO_ADDR
// if p3 = 117 then
35110: LD_VAR 0 3
35114: PUSH
35115: LD_INT 117
35117: EQUAL
35118: IFFALSE 35128
// s30 := true ;
35120: LD_ADDR_EXP 142
35124: PUSH
35125: LD_INT 1
35127: ST_TO_ADDR
// if p3 = 118 then
35128: LD_VAR 0 3
35132: PUSH
35133: LD_INT 118
35135: EQUAL
35136: IFFALSE 35146
// s60 := true ;
35138: LD_ADDR_EXP 143
35142: PUSH
35143: LD_INT 1
35145: ST_TO_ADDR
// end ; if p2 = hack_mode then
35146: LD_VAR 0 2
35150: PUSH
35151: LD_INT 101
35153: EQUAL
35154: IFFALSE 35282
// begin case p3 of 1 :
35156: LD_VAR 0 3
35160: PUSH
35161: LD_INT 1
35163: DOUBLE
35164: EQUAL
35165: IFTRUE 35169
35167: GO 35176
35169: POP
// hHackUnlimitedResources ; 2 :
35170: CALL 47429 0 0
35174: GO 35282
35176: LD_INT 2
35178: DOUBLE
35179: EQUAL
35180: IFTRUE 35184
35182: GO 35191
35184: POP
// hHackSetLevel10 ; 3 :
35185: CALL 47562 0 0
35189: GO 35282
35191: LD_INT 3
35193: DOUBLE
35194: EQUAL
35195: IFTRUE 35199
35197: GO 35206
35199: POP
// hHackSetLevel10YourUnits ; 4 :
35200: CALL 47647 0 0
35204: GO 35282
35206: LD_INT 4
35208: DOUBLE
35209: EQUAL
35210: IFTRUE 35214
35212: GO 35221
35214: POP
// hHackInvincible ; 5 :
35215: CALL 48095 0 0
35219: GO 35282
35221: LD_INT 5
35223: DOUBLE
35224: EQUAL
35225: IFTRUE 35229
35227: GO 35236
35229: POP
// hHackInvisible ; 6 :
35230: CALL 48206 0 0
35234: GO 35282
35236: LD_INT 6
35238: DOUBLE
35239: EQUAL
35240: IFTRUE 35244
35242: GO 35251
35244: POP
// hHackChangeYourSide ; 7 :
35245: CALL 48263 0 0
35249: GO 35282
35251: LD_INT 7
35253: DOUBLE
35254: EQUAL
35255: IFTRUE 35259
35257: GO 35266
35259: POP
// hHackChangeUnitSide ; 8 :
35260: CALL 48305 0 0
35264: GO 35282
35266: LD_INT 8
35268: DOUBLE
35269: EQUAL
35270: IFTRUE 35274
35272: GO 35281
35274: POP
// hHackFog ; end ;
35275: CALL 48406 0 0
35279: GO 35282
35281: POP
// end ; if p2 = game_save_mode then
35282: LD_VAR 0 2
35286: PUSH
35287: LD_INT 102
35289: EQUAL
35290: IFFALSE 35345
// begin if p3 = 1 then
35292: LD_VAR 0 3
35296: PUSH
35297: LD_INT 1
35299: EQUAL
35300: IFFALSE 35312
// globalGameSaveCounter := p4 ;
35302: LD_ADDR_EXP 86
35306: PUSH
35307: LD_VAR 0 4
35311: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
35312: LD_VAR 0 3
35316: PUSH
35317: LD_INT 2
35319: EQUAL
35320: PUSH
35321: LD_EXP 86
35325: AND
35326: IFFALSE 35345
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
35328: LD_STRING setGameSaveCounter(
35330: PUSH
35331: LD_EXP 86
35335: STR
35336: PUSH
35337: LD_STRING )
35339: STR
35340: PPUSH
35341: CALL_OW 559
// end ; end ;
35345: LD_VAR 0 7
35349: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
35350: LD_INT 0
35352: PPUSH
// streamModeActive := false ;
35353: LD_ADDR_EXP 87
35357: PUSH
35358: LD_INT 0
35360: ST_TO_ADDR
// normalCounter := 36 ;
35361: LD_ADDR_EXP 88
35365: PUSH
35366: LD_INT 36
35368: ST_TO_ADDR
// hardcoreCounter := 18 ;
35369: LD_ADDR_EXP 89
35373: PUSH
35374: LD_INT 18
35376: ST_TO_ADDR
// sRocket := false ;
35377: LD_ADDR_EXP 92
35381: PUSH
35382: LD_INT 0
35384: ST_TO_ADDR
// sSpeed := false ;
35385: LD_ADDR_EXP 91
35389: PUSH
35390: LD_INT 0
35392: ST_TO_ADDR
// sEngine := false ;
35393: LD_ADDR_EXP 93
35397: PUSH
35398: LD_INT 0
35400: ST_TO_ADDR
// sSpec := false ;
35401: LD_ADDR_EXP 90
35405: PUSH
35406: LD_INT 0
35408: ST_TO_ADDR
// sLevel := false ;
35409: LD_ADDR_EXP 94
35413: PUSH
35414: LD_INT 0
35416: ST_TO_ADDR
// sArmoury := false ;
35417: LD_ADDR_EXP 95
35421: PUSH
35422: LD_INT 0
35424: ST_TO_ADDR
// sRadar := false ;
35425: LD_ADDR_EXP 96
35429: PUSH
35430: LD_INT 0
35432: ST_TO_ADDR
// sBunker := false ;
35433: LD_ADDR_EXP 97
35437: PUSH
35438: LD_INT 0
35440: ST_TO_ADDR
// sHack := false ;
35441: LD_ADDR_EXP 98
35445: PUSH
35446: LD_INT 0
35448: ST_TO_ADDR
// sFire := false ;
35449: LD_ADDR_EXP 99
35453: PUSH
35454: LD_INT 0
35456: ST_TO_ADDR
// sRefresh := false ;
35457: LD_ADDR_EXP 100
35461: PUSH
35462: LD_INT 0
35464: ST_TO_ADDR
// sExp := false ;
35465: LD_ADDR_EXP 101
35469: PUSH
35470: LD_INT 0
35472: ST_TO_ADDR
// sDepot := false ;
35473: LD_ADDR_EXP 102
35477: PUSH
35478: LD_INT 0
35480: ST_TO_ADDR
// sFlag := false ;
35481: LD_ADDR_EXP 103
35485: PUSH
35486: LD_INT 0
35488: ST_TO_ADDR
// sKamikadze := false ;
35489: LD_ADDR_EXP 111
35493: PUSH
35494: LD_INT 0
35496: ST_TO_ADDR
// sTroll := false ;
35497: LD_ADDR_EXP 112
35501: PUSH
35502: LD_INT 0
35504: ST_TO_ADDR
// sSlow := false ;
35505: LD_ADDR_EXP 113
35509: PUSH
35510: LD_INT 0
35512: ST_TO_ADDR
// sLack := false ;
35513: LD_ADDR_EXP 114
35517: PUSH
35518: LD_INT 0
35520: ST_TO_ADDR
// sTank := false ;
35521: LD_ADDR_EXP 116
35525: PUSH
35526: LD_INT 0
35528: ST_TO_ADDR
// sRemote := false ;
35529: LD_ADDR_EXP 117
35533: PUSH
35534: LD_INT 0
35536: ST_TO_ADDR
// sPowell := false ;
35537: LD_ADDR_EXP 118
35541: PUSH
35542: LD_INT 0
35544: ST_TO_ADDR
// sTeleport := false ;
35545: LD_ADDR_EXP 121
35549: PUSH
35550: LD_INT 0
35552: ST_TO_ADDR
// sOilTower := false ;
35553: LD_ADDR_EXP 123
35557: PUSH
35558: LD_INT 0
35560: ST_TO_ADDR
// sShovel := false ;
35561: LD_ADDR_EXP 124
35565: PUSH
35566: LD_INT 0
35568: ST_TO_ADDR
// sSheik := false ;
35569: LD_ADDR_EXP 125
35573: PUSH
35574: LD_INT 0
35576: ST_TO_ADDR
// sEarthquake := false ;
35577: LD_ADDR_EXP 127
35581: PUSH
35582: LD_INT 0
35584: ST_TO_ADDR
// sAI := false ;
35585: LD_ADDR_EXP 128
35589: PUSH
35590: LD_INT 0
35592: ST_TO_ADDR
// sCargo := false ;
35593: LD_ADDR_EXP 131
35597: PUSH
35598: LD_INT 0
35600: ST_TO_ADDR
// sDLaser := false ;
35601: LD_ADDR_EXP 132
35605: PUSH
35606: LD_INT 0
35608: ST_TO_ADDR
// sExchange := false ;
35609: LD_ADDR_EXP 133
35613: PUSH
35614: LD_INT 0
35616: ST_TO_ADDR
// sFac := false ;
35617: LD_ADDR_EXP 134
35621: PUSH
35622: LD_INT 0
35624: ST_TO_ADDR
// sPower := false ;
35625: LD_ADDR_EXP 135
35629: PUSH
35630: LD_INT 0
35632: ST_TO_ADDR
// sRandom := false ;
35633: LD_ADDR_EXP 136
35637: PUSH
35638: LD_INT 0
35640: ST_TO_ADDR
// sShield := false ;
35641: LD_ADDR_EXP 137
35645: PUSH
35646: LD_INT 0
35648: ST_TO_ADDR
// sTime := false ;
35649: LD_ADDR_EXP 138
35653: PUSH
35654: LD_INT 0
35656: ST_TO_ADDR
// sTools := false ;
35657: LD_ADDR_EXP 139
35661: PUSH
35662: LD_INT 0
35664: ST_TO_ADDR
// sSold := false ;
35665: LD_ADDR_EXP 104
35669: PUSH
35670: LD_INT 0
35672: ST_TO_ADDR
// sDiff := false ;
35673: LD_ADDR_EXP 105
35677: PUSH
35678: LD_INT 0
35680: ST_TO_ADDR
// sFog := false ;
35681: LD_ADDR_EXP 108
35685: PUSH
35686: LD_INT 0
35688: ST_TO_ADDR
// sReset := false ;
35689: LD_ADDR_EXP 109
35693: PUSH
35694: LD_INT 0
35696: ST_TO_ADDR
// sSun := false ;
35697: LD_ADDR_EXP 110
35701: PUSH
35702: LD_INT 0
35704: ST_TO_ADDR
// sTiger := false ;
35705: LD_ADDR_EXP 106
35709: PUSH
35710: LD_INT 0
35712: ST_TO_ADDR
// sBomb := false ;
35713: LD_ADDR_EXP 107
35717: PUSH
35718: LD_INT 0
35720: ST_TO_ADDR
// sWound := false ;
35721: LD_ADDR_EXP 115
35725: PUSH
35726: LD_INT 0
35728: ST_TO_ADDR
// sBetray := false ;
35729: LD_ADDR_EXP 119
35733: PUSH
35734: LD_INT 0
35736: ST_TO_ADDR
// sContamin := false ;
35737: LD_ADDR_EXP 120
35741: PUSH
35742: LD_INT 0
35744: ST_TO_ADDR
// sOil := false ;
35745: LD_ADDR_EXP 122
35749: PUSH
35750: LD_INT 0
35752: ST_TO_ADDR
// sStu := false ;
35753: LD_ADDR_EXP 126
35757: PUSH
35758: LD_INT 0
35760: ST_TO_ADDR
// sBazooka := false ;
35761: LD_ADDR_EXP 129
35765: PUSH
35766: LD_INT 0
35768: ST_TO_ADDR
// sMortar := false ;
35769: LD_ADDR_EXP 130
35773: PUSH
35774: LD_INT 0
35776: ST_TO_ADDR
// sRanger := false ;
35777: LD_ADDR_EXP 140
35781: PUSH
35782: LD_INT 0
35784: ST_TO_ADDR
// sComputer := false ;
35785: LD_ADDR_EXP 141
35789: PUSH
35790: LD_INT 0
35792: ST_TO_ADDR
// s30 := false ;
35793: LD_ADDR_EXP 142
35797: PUSH
35798: LD_INT 0
35800: ST_TO_ADDR
// s60 := false ;
35801: LD_ADDR_EXP 143
35805: PUSH
35806: LD_INT 0
35808: ST_TO_ADDR
// end ;
35809: LD_VAR 0 1
35813: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
35814: LD_INT 0
35816: PPUSH
35817: PPUSH
35818: PPUSH
35819: PPUSH
35820: PPUSH
35821: PPUSH
35822: PPUSH
// result := [ ] ;
35823: LD_ADDR_VAR 0 2
35827: PUSH
35828: EMPTY
35829: ST_TO_ADDR
// if campaign_id = 1 then
35830: LD_OWVAR 69
35834: PUSH
35835: LD_INT 1
35837: EQUAL
35838: IFFALSE 39004
// begin case mission_number of 1 :
35840: LD_OWVAR 70
35844: PUSH
35845: LD_INT 1
35847: DOUBLE
35848: EQUAL
35849: IFTRUE 35853
35851: GO 35929
35853: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
35854: LD_ADDR_VAR 0 2
35858: PUSH
35859: LD_INT 2
35861: PUSH
35862: LD_INT 4
35864: PUSH
35865: LD_INT 11
35867: PUSH
35868: LD_INT 12
35870: PUSH
35871: LD_INT 15
35873: PUSH
35874: LD_INT 16
35876: PUSH
35877: LD_INT 22
35879: PUSH
35880: LD_INT 23
35882: PUSH
35883: LD_INT 26
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: LIST
35890: LIST
35891: LIST
35892: LIST
35893: LIST
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 101
35899: PUSH
35900: LD_INT 102
35902: PUSH
35903: LD_INT 106
35905: PUSH
35906: LD_INT 116
35908: PUSH
35909: LD_INT 117
35911: PUSH
35912: LD_INT 118
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: PUSH
35923: EMPTY
35924: LIST
35925: LIST
35926: ST_TO_ADDR
35927: GO 39002
35929: LD_INT 2
35931: DOUBLE
35932: EQUAL
35933: IFTRUE 35937
35935: GO 36021
35937: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
35938: LD_ADDR_VAR 0 2
35942: PUSH
35943: LD_INT 2
35945: PUSH
35946: LD_INT 4
35948: PUSH
35949: LD_INT 11
35951: PUSH
35952: LD_INT 12
35954: PUSH
35955: LD_INT 15
35957: PUSH
35958: LD_INT 16
35960: PUSH
35961: LD_INT 22
35963: PUSH
35964: LD_INT 23
35966: PUSH
35967: LD_INT 26
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 101
35983: PUSH
35984: LD_INT 102
35986: PUSH
35987: LD_INT 105
35989: PUSH
35990: LD_INT 106
35992: PUSH
35993: LD_INT 108
35995: PUSH
35996: LD_INT 116
35998: PUSH
35999: LD_INT 117
36001: PUSH
36002: LD_INT 118
36004: PUSH
36005: EMPTY
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: PUSH
36015: EMPTY
36016: LIST
36017: LIST
36018: ST_TO_ADDR
36019: GO 39002
36021: LD_INT 3
36023: DOUBLE
36024: EQUAL
36025: IFTRUE 36029
36027: GO 36117
36029: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
36030: LD_ADDR_VAR 0 2
36034: PUSH
36035: LD_INT 2
36037: PUSH
36038: LD_INT 4
36040: PUSH
36041: LD_INT 5
36043: PUSH
36044: LD_INT 11
36046: PUSH
36047: LD_INT 12
36049: PUSH
36050: LD_INT 15
36052: PUSH
36053: LD_INT 16
36055: PUSH
36056: LD_INT 22
36058: PUSH
36059: LD_INT 26
36061: PUSH
36062: LD_INT 36
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 101
36079: PUSH
36080: LD_INT 102
36082: PUSH
36083: LD_INT 105
36085: PUSH
36086: LD_INT 106
36088: PUSH
36089: LD_INT 108
36091: PUSH
36092: LD_INT 116
36094: PUSH
36095: LD_INT 117
36097: PUSH
36098: LD_INT 118
36100: PUSH
36101: EMPTY
36102: LIST
36103: LIST
36104: LIST
36105: LIST
36106: LIST
36107: LIST
36108: LIST
36109: LIST
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: ST_TO_ADDR
36115: GO 39002
36117: LD_INT 4
36119: DOUBLE
36120: EQUAL
36121: IFTRUE 36125
36123: GO 36221
36125: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
36126: LD_ADDR_VAR 0 2
36130: PUSH
36131: LD_INT 2
36133: PUSH
36134: LD_INT 4
36136: PUSH
36137: LD_INT 5
36139: PUSH
36140: LD_INT 8
36142: PUSH
36143: LD_INT 11
36145: PUSH
36146: LD_INT 12
36148: PUSH
36149: LD_INT 15
36151: PUSH
36152: LD_INT 16
36154: PUSH
36155: LD_INT 22
36157: PUSH
36158: LD_INT 23
36160: PUSH
36161: LD_INT 26
36163: PUSH
36164: LD_INT 36
36166: PUSH
36167: EMPTY
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: PUSH
36181: LD_INT 101
36183: PUSH
36184: LD_INT 102
36186: PUSH
36187: LD_INT 105
36189: PUSH
36190: LD_INT 106
36192: PUSH
36193: LD_INT 108
36195: PUSH
36196: LD_INT 116
36198: PUSH
36199: LD_INT 117
36201: PUSH
36202: LD_INT 118
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: PUSH
36215: EMPTY
36216: LIST
36217: LIST
36218: ST_TO_ADDR
36219: GO 39002
36221: LD_INT 5
36223: DOUBLE
36224: EQUAL
36225: IFTRUE 36229
36227: GO 36341
36229: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
36230: LD_ADDR_VAR 0 2
36234: PUSH
36235: LD_INT 2
36237: PUSH
36238: LD_INT 4
36240: PUSH
36241: LD_INT 5
36243: PUSH
36244: LD_INT 6
36246: PUSH
36247: LD_INT 8
36249: PUSH
36250: LD_INT 11
36252: PUSH
36253: LD_INT 12
36255: PUSH
36256: LD_INT 15
36258: PUSH
36259: LD_INT 16
36261: PUSH
36262: LD_INT 22
36264: PUSH
36265: LD_INT 23
36267: PUSH
36268: LD_INT 25
36270: PUSH
36271: LD_INT 26
36273: PUSH
36274: LD_INT 36
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: LIST
36281: LIST
36282: LIST
36283: LIST
36284: LIST
36285: LIST
36286: LIST
36287: LIST
36288: LIST
36289: LIST
36290: LIST
36291: LIST
36292: PUSH
36293: LD_INT 101
36295: PUSH
36296: LD_INT 102
36298: PUSH
36299: LD_INT 105
36301: PUSH
36302: LD_INT 106
36304: PUSH
36305: LD_INT 108
36307: PUSH
36308: LD_INT 109
36310: PUSH
36311: LD_INT 112
36313: PUSH
36314: LD_INT 116
36316: PUSH
36317: LD_INT 117
36319: PUSH
36320: LD_INT 118
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: LIST
36327: LIST
36328: LIST
36329: LIST
36330: LIST
36331: LIST
36332: LIST
36333: LIST
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: ST_TO_ADDR
36339: GO 39002
36341: LD_INT 6
36343: DOUBLE
36344: EQUAL
36345: IFTRUE 36349
36347: GO 36481
36349: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
36350: LD_ADDR_VAR 0 2
36354: PUSH
36355: LD_INT 2
36357: PUSH
36358: LD_INT 4
36360: PUSH
36361: LD_INT 5
36363: PUSH
36364: LD_INT 6
36366: PUSH
36367: LD_INT 8
36369: PUSH
36370: LD_INT 11
36372: PUSH
36373: LD_INT 12
36375: PUSH
36376: LD_INT 15
36378: PUSH
36379: LD_INT 16
36381: PUSH
36382: LD_INT 20
36384: PUSH
36385: LD_INT 21
36387: PUSH
36388: LD_INT 22
36390: PUSH
36391: LD_INT 23
36393: PUSH
36394: LD_INT 25
36396: PUSH
36397: LD_INT 26
36399: PUSH
36400: LD_INT 30
36402: PUSH
36403: LD_INT 31
36405: PUSH
36406: LD_INT 32
36408: PUSH
36409: LD_INT 36
36411: PUSH
36412: EMPTY
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: LIST
36424: LIST
36425: LIST
36426: LIST
36427: LIST
36428: LIST
36429: LIST
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 101
36435: PUSH
36436: LD_INT 102
36438: PUSH
36439: LD_INT 105
36441: PUSH
36442: LD_INT 106
36444: PUSH
36445: LD_INT 108
36447: PUSH
36448: LD_INT 109
36450: PUSH
36451: LD_INT 112
36453: PUSH
36454: LD_INT 116
36456: PUSH
36457: LD_INT 117
36459: PUSH
36460: LD_INT 118
36462: PUSH
36463: EMPTY
36464: LIST
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: PUSH
36475: EMPTY
36476: LIST
36477: LIST
36478: ST_TO_ADDR
36479: GO 39002
36481: LD_INT 7
36483: DOUBLE
36484: EQUAL
36485: IFTRUE 36489
36487: GO 36601
36489: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
36490: LD_ADDR_VAR 0 2
36494: PUSH
36495: LD_INT 2
36497: PUSH
36498: LD_INT 4
36500: PUSH
36501: LD_INT 5
36503: PUSH
36504: LD_INT 7
36506: PUSH
36507: LD_INT 11
36509: PUSH
36510: LD_INT 12
36512: PUSH
36513: LD_INT 15
36515: PUSH
36516: LD_INT 16
36518: PUSH
36519: LD_INT 20
36521: PUSH
36522: LD_INT 21
36524: PUSH
36525: LD_INT 22
36527: PUSH
36528: LD_INT 23
36530: PUSH
36531: LD_INT 25
36533: PUSH
36534: LD_INT 26
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: LIST
36551: LIST
36552: PUSH
36553: LD_INT 101
36555: PUSH
36556: LD_INT 102
36558: PUSH
36559: LD_INT 103
36561: PUSH
36562: LD_INT 105
36564: PUSH
36565: LD_INT 106
36567: PUSH
36568: LD_INT 108
36570: PUSH
36571: LD_INT 112
36573: PUSH
36574: LD_INT 116
36576: PUSH
36577: LD_INT 117
36579: PUSH
36580: LD_INT 118
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: PUSH
36595: EMPTY
36596: LIST
36597: LIST
36598: ST_TO_ADDR
36599: GO 39002
36601: LD_INT 8
36603: DOUBLE
36604: EQUAL
36605: IFTRUE 36609
36607: GO 36749
36609: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
36610: LD_ADDR_VAR 0 2
36614: PUSH
36615: LD_INT 2
36617: PUSH
36618: LD_INT 4
36620: PUSH
36621: LD_INT 5
36623: PUSH
36624: LD_INT 6
36626: PUSH
36627: LD_INT 7
36629: PUSH
36630: LD_INT 8
36632: PUSH
36633: LD_INT 11
36635: PUSH
36636: LD_INT 12
36638: PUSH
36639: LD_INT 15
36641: PUSH
36642: LD_INT 16
36644: PUSH
36645: LD_INT 20
36647: PUSH
36648: LD_INT 21
36650: PUSH
36651: LD_INT 22
36653: PUSH
36654: LD_INT 23
36656: PUSH
36657: LD_INT 25
36659: PUSH
36660: LD_INT 26
36662: PUSH
36663: LD_INT 30
36665: PUSH
36666: LD_INT 31
36668: PUSH
36669: LD_INT 32
36671: PUSH
36672: LD_INT 36
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: LIST
36685: LIST
36686: LIST
36687: LIST
36688: LIST
36689: LIST
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: PUSH
36697: LD_INT 101
36699: PUSH
36700: LD_INT 102
36702: PUSH
36703: LD_INT 103
36705: PUSH
36706: LD_INT 105
36708: PUSH
36709: LD_INT 106
36711: PUSH
36712: LD_INT 108
36714: PUSH
36715: LD_INT 109
36717: PUSH
36718: LD_INT 112
36720: PUSH
36721: LD_INT 116
36723: PUSH
36724: LD_INT 117
36726: PUSH
36727: LD_INT 118
36729: PUSH
36730: EMPTY
36731: LIST
36732: LIST
36733: LIST
36734: LIST
36735: LIST
36736: LIST
36737: LIST
36738: LIST
36739: LIST
36740: LIST
36741: LIST
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: ST_TO_ADDR
36747: GO 39002
36749: LD_INT 9
36751: DOUBLE
36752: EQUAL
36753: IFTRUE 36757
36755: GO 36905
36757: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
36758: LD_ADDR_VAR 0 2
36762: PUSH
36763: LD_INT 2
36765: PUSH
36766: LD_INT 4
36768: PUSH
36769: LD_INT 5
36771: PUSH
36772: LD_INT 6
36774: PUSH
36775: LD_INT 7
36777: PUSH
36778: LD_INT 8
36780: PUSH
36781: LD_INT 11
36783: PUSH
36784: LD_INT 12
36786: PUSH
36787: LD_INT 15
36789: PUSH
36790: LD_INT 16
36792: PUSH
36793: LD_INT 20
36795: PUSH
36796: LD_INT 21
36798: PUSH
36799: LD_INT 22
36801: PUSH
36802: LD_INT 23
36804: PUSH
36805: LD_INT 25
36807: PUSH
36808: LD_INT 26
36810: PUSH
36811: LD_INT 28
36813: PUSH
36814: LD_INT 30
36816: PUSH
36817: LD_INT 31
36819: PUSH
36820: LD_INT 32
36822: PUSH
36823: LD_INT 36
36825: PUSH
36826: EMPTY
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: LIST
36841: LIST
36842: LIST
36843: LIST
36844: LIST
36845: LIST
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 101
36851: PUSH
36852: LD_INT 102
36854: PUSH
36855: LD_INT 103
36857: PUSH
36858: LD_INT 105
36860: PUSH
36861: LD_INT 106
36863: PUSH
36864: LD_INT 108
36866: PUSH
36867: LD_INT 109
36869: PUSH
36870: LD_INT 112
36872: PUSH
36873: LD_INT 114
36875: PUSH
36876: LD_INT 116
36878: PUSH
36879: LD_INT 117
36881: PUSH
36882: LD_INT 118
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: LIST
36889: LIST
36890: LIST
36891: LIST
36892: LIST
36893: LIST
36894: LIST
36895: LIST
36896: LIST
36897: LIST
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: ST_TO_ADDR
36903: GO 39002
36905: LD_INT 10
36907: DOUBLE
36908: EQUAL
36909: IFTRUE 36913
36911: GO 37109
36913: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
36914: LD_ADDR_VAR 0 2
36918: PUSH
36919: LD_INT 2
36921: PUSH
36922: LD_INT 4
36924: PUSH
36925: LD_INT 5
36927: PUSH
36928: LD_INT 6
36930: PUSH
36931: LD_INT 7
36933: PUSH
36934: LD_INT 8
36936: PUSH
36937: LD_INT 9
36939: PUSH
36940: LD_INT 10
36942: PUSH
36943: LD_INT 11
36945: PUSH
36946: LD_INT 12
36948: PUSH
36949: LD_INT 13
36951: PUSH
36952: LD_INT 14
36954: PUSH
36955: LD_INT 15
36957: PUSH
36958: LD_INT 16
36960: PUSH
36961: LD_INT 17
36963: PUSH
36964: LD_INT 18
36966: PUSH
36967: LD_INT 19
36969: PUSH
36970: LD_INT 20
36972: PUSH
36973: LD_INT 21
36975: PUSH
36976: LD_INT 22
36978: PUSH
36979: LD_INT 23
36981: PUSH
36982: LD_INT 24
36984: PUSH
36985: LD_INT 25
36987: PUSH
36988: LD_INT 26
36990: PUSH
36991: LD_INT 28
36993: PUSH
36994: LD_INT 30
36996: PUSH
36997: LD_INT 31
36999: PUSH
37000: LD_INT 32
37002: PUSH
37003: LD_INT 36
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: LIST
37010: LIST
37011: LIST
37012: LIST
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 101
37039: PUSH
37040: LD_INT 102
37042: PUSH
37043: LD_INT 103
37045: PUSH
37046: LD_INT 104
37048: PUSH
37049: LD_INT 105
37051: PUSH
37052: LD_INT 106
37054: PUSH
37055: LD_INT 107
37057: PUSH
37058: LD_INT 108
37060: PUSH
37061: LD_INT 109
37063: PUSH
37064: LD_INT 110
37066: PUSH
37067: LD_INT 111
37069: PUSH
37070: LD_INT 112
37072: PUSH
37073: LD_INT 114
37075: PUSH
37076: LD_INT 116
37078: PUSH
37079: LD_INT 117
37081: PUSH
37082: LD_INT 118
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: PUSH
37103: EMPTY
37104: LIST
37105: LIST
37106: ST_TO_ADDR
37107: GO 39002
37109: LD_INT 11
37111: DOUBLE
37112: EQUAL
37113: IFTRUE 37117
37115: GO 37321
37117: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
37118: LD_ADDR_VAR 0 2
37122: PUSH
37123: LD_INT 2
37125: PUSH
37126: LD_INT 3
37128: PUSH
37129: LD_INT 4
37131: PUSH
37132: LD_INT 5
37134: PUSH
37135: LD_INT 6
37137: PUSH
37138: LD_INT 7
37140: PUSH
37141: LD_INT 8
37143: PUSH
37144: LD_INT 9
37146: PUSH
37147: LD_INT 10
37149: PUSH
37150: LD_INT 11
37152: PUSH
37153: LD_INT 12
37155: PUSH
37156: LD_INT 13
37158: PUSH
37159: LD_INT 14
37161: PUSH
37162: LD_INT 15
37164: PUSH
37165: LD_INT 16
37167: PUSH
37168: LD_INT 17
37170: PUSH
37171: LD_INT 18
37173: PUSH
37174: LD_INT 19
37176: PUSH
37177: LD_INT 20
37179: PUSH
37180: LD_INT 21
37182: PUSH
37183: LD_INT 22
37185: PUSH
37186: LD_INT 23
37188: PUSH
37189: LD_INT 24
37191: PUSH
37192: LD_INT 25
37194: PUSH
37195: LD_INT 26
37197: PUSH
37198: LD_INT 28
37200: PUSH
37201: LD_INT 30
37203: PUSH
37204: LD_INT 31
37206: PUSH
37207: LD_INT 32
37209: PUSH
37210: LD_INT 34
37212: PUSH
37213: LD_INT 36
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: LIST
37220: LIST
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 101
37251: PUSH
37252: LD_INT 102
37254: PUSH
37255: LD_INT 103
37257: PUSH
37258: LD_INT 104
37260: PUSH
37261: LD_INT 105
37263: PUSH
37264: LD_INT 106
37266: PUSH
37267: LD_INT 107
37269: PUSH
37270: LD_INT 108
37272: PUSH
37273: LD_INT 109
37275: PUSH
37276: LD_INT 110
37278: PUSH
37279: LD_INT 111
37281: PUSH
37282: LD_INT 112
37284: PUSH
37285: LD_INT 114
37287: PUSH
37288: LD_INT 116
37290: PUSH
37291: LD_INT 117
37293: PUSH
37294: LD_INT 118
37296: PUSH
37297: EMPTY
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: ST_TO_ADDR
37319: GO 39002
37321: LD_INT 12
37323: DOUBLE
37324: EQUAL
37325: IFTRUE 37329
37327: GO 37549
37329: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
37330: LD_ADDR_VAR 0 2
37334: PUSH
37335: LD_INT 1
37337: PUSH
37338: LD_INT 2
37340: PUSH
37341: LD_INT 3
37343: PUSH
37344: LD_INT 4
37346: PUSH
37347: LD_INT 5
37349: PUSH
37350: LD_INT 6
37352: PUSH
37353: LD_INT 7
37355: PUSH
37356: LD_INT 8
37358: PUSH
37359: LD_INT 9
37361: PUSH
37362: LD_INT 10
37364: PUSH
37365: LD_INT 11
37367: PUSH
37368: LD_INT 12
37370: PUSH
37371: LD_INT 13
37373: PUSH
37374: LD_INT 14
37376: PUSH
37377: LD_INT 15
37379: PUSH
37380: LD_INT 16
37382: PUSH
37383: LD_INT 17
37385: PUSH
37386: LD_INT 18
37388: PUSH
37389: LD_INT 19
37391: PUSH
37392: LD_INT 20
37394: PUSH
37395: LD_INT 21
37397: PUSH
37398: LD_INT 22
37400: PUSH
37401: LD_INT 23
37403: PUSH
37404: LD_INT 24
37406: PUSH
37407: LD_INT 25
37409: PUSH
37410: LD_INT 26
37412: PUSH
37413: LD_INT 27
37415: PUSH
37416: LD_INT 28
37418: PUSH
37419: LD_INT 30
37421: PUSH
37422: LD_INT 31
37424: PUSH
37425: LD_INT 32
37427: PUSH
37428: LD_INT 33
37430: PUSH
37431: LD_INT 34
37433: PUSH
37434: LD_INT 36
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 101
37475: PUSH
37476: LD_INT 102
37478: PUSH
37479: LD_INT 103
37481: PUSH
37482: LD_INT 104
37484: PUSH
37485: LD_INT 105
37487: PUSH
37488: LD_INT 106
37490: PUSH
37491: LD_INT 107
37493: PUSH
37494: LD_INT 108
37496: PUSH
37497: LD_INT 109
37499: PUSH
37500: LD_INT 110
37502: PUSH
37503: LD_INT 111
37505: PUSH
37506: LD_INT 112
37508: PUSH
37509: LD_INT 113
37511: PUSH
37512: LD_INT 114
37514: PUSH
37515: LD_INT 116
37517: PUSH
37518: LD_INT 117
37520: PUSH
37521: LD_INT 118
37523: PUSH
37524: EMPTY
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: ST_TO_ADDR
37547: GO 39002
37549: LD_INT 13
37551: DOUBLE
37552: EQUAL
37553: IFTRUE 37557
37555: GO 37765
37557: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
37558: LD_ADDR_VAR 0 2
37562: PUSH
37563: LD_INT 1
37565: PUSH
37566: LD_INT 2
37568: PUSH
37569: LD_INT 3
37571: PUSH
37572: LD_INT 4
37574: PUSH
37575: LD_INT 5
37577: PUSH
37578: LD_INT 8
37580: PUSH
37581: LD_INT 9
37583: PUSH
37584: LD_INT 10
37586: PUSH
37587: LD_INT 11
37589: PUSH
37590: LD_INT 12
37592: PUSH
37593: LD_INT 14
37595: PUSH
37596: LD_INT 15
37598: PUSH
37599: LD_INT 16
37601: PUSH
37602: LD_INT 17
37604: PUSH
37605: LD_INT 18
37607: PUSH
37608: LD_INT 19
37610: PUSH
37611: LD_INT 20
37613: PUSH
37614: LD_INT 21
37616: PUSH
37617: LD_INT 22
37619: PUSH
37620: LD_INT 23
37622: PUSH
37623: LD_INT 24
37625: PUSH
37626: LD_INT 25
37628: PUSH
37629: LD_INT 26
37631: PUSH
37632: LD_INT 27
37634: PUSH
37635: LD_INT 28
37637: PUSH
37638: LD_INT 30
37640: PUSH
37641: LD_INT 31
37643: PUSH
37644: LD_INT 32
37646: PUSH
37647: LD_INT 33
37649: PUSH
37650: LD_INT 34
37652: PUSH
37653: LD_INT 36
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: LIST
37679: LIST
37680: LIST
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: PUSH
37689: LD_INT 101
37691: PUSH
37692: LD_INT 102
37694: PUSH
37695: LD_INT 103
37697: PUSH
37698: LD_INT 104
37700: PUSH
37701: LD_INT 105
37703: PUSH
37704: LD_INT 106
37706: PUSH
37707: LD_INT 107
37709: PUSH
37710: LD_INT 108
37712: PUSH
37713: LD_INT 109
37715: PUSH
37716: LD_INT 110
37718: PUSH
37719: LD_INT 111
37721: PUSH
37722: LD_INT 112
37724: PUSH
37725: LD_INT 113
37727: PUSH
37728: LD_INT 114
37730: PUSH
37731: LD_INT 116
37733: PUSH
37734: LD_INT 117
37736: PUSH
37737: LD_INT 118
37739: PUSH
37740: EMPTY
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: ST_TO_ADDR
37763: GO 39002
37765: LD_INT 14
37767: DOUBLE
37768: EQUAL
37769: IFTRUE 37773
37771: GO 37997
37773: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
37774: LD_ADDR_VAR 0 2
37778: PUSH
37779: LD_INT 1
37781: PUSH
37782: LD_INT 2
37784: PUSH
37785: LD_INT 3
37787: PUSH
37788: LD_INT 4
37790: PUSH
37791: LD_INT 5
37793: PUSH
37794: LD_INT 6
37796: PUSH
37797: LD_INT 7
37799: PUSH
37800: LD_INT 8
37802: PUSH
37803: LD_INT 9
37805: PUSH
37806: LD_INT 10
37808: PUSH
37809: LD_INT 11
37811: PUSH
37812: LD_INT 12
37814: PUSH
37815: LD_INT 13
37817: PUSH
37818: LD_INT 14
37820: PUSH
37821: LD_INT 15
37823: PUSH
37824: LD_INT 16
37826: PUSH
37827: LD_INT 17
37829: PUSH
37830: LD_INT 18
37832: PUSH
37833: LD_INT 19
37835: PUSH
37836: LD_INT 20
37838: PUSH
37839: LD_INT 21
37841: PUSH
37842: LD_INT 22
37844: PUSH
37845: LD_INT 23
37847: PUSH
37848: LD_INT 24
37850: PUSH
37851: LD_INT 25
37853: PUSH
37854: LD_INT 26
37856: PUSH
37857: LD_INT 27
37859: PUSH
37860: LD_INT 28
37862: PUSH
37863: LD_INT 29
37865: PUSH
37866: LD_INT 30
37868: PUSH
37869: LD_INT 31
37871: PUSH
37872: LD_INT 32
37874: PUSH
37875: LD_INT 33
37877: PUSH
37878: LD_INT 34
37880: PUSH
37881: LD_INT 36
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: LIST
37888: LIST
37889: LIST
37890: LIST
37891: LIST
37892: LIST
37893: LIST
37894: LIST
37895: LIST
37896: LIST
37897: LIST
37898: LIST
37899: LIST
37900: LIST
37901: LIST
37902: LIST
37903: LIST
37904: LIST
37905: LIST
37906: LIST
37907: LIST
37908: LIST
37909: LIST
37910: LIST
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: PUSH
37921: LD_INT 101
37923: PUSH
37924: LD_INT 102
37926: PUSH
37927: LD_INT 103
37929: PUSH
37930: LD_INT 104
37932: PUSH
37933: LD_INT 105
37935: PUSH
37936: LD_INT 106
37938: PUSH
37939: LD_INT 107
37941: PUSH
37942: LD_INT 108
37944: PUSH
37945: LD_INT 109
37947: PUSH
37948: LD_INT 110
37950: PUSH
37951: LD_INT 111
37953: PUSH
37954: LD_INT 112
37956: PUSH
37957: LD_INT 113
37959: PUSH
37960: LD_INT 114
37962: PUSH
37963: LD_INT 116
37965: PUSH
37966: LD_INT 117
37968: PUSH
37969: LD_INT 118
37971: PUSH
37972: EMPTY
37973: LIST
37974: LIST
37975: LIST
37976: LIST
37977: LIST
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: ST_TO_ADDR
37995: GO 39002
37997: LD_INT 15
37999: DOUBLE
38000: EQUAL
38001: IFTRUE 38005
38003: GO 38229
38005: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
38006: LD_ADDR_VAR 0 2
38010: PUSH
38011: LD_INT 1
38013: PUSH
38014: LD_INT 2
38016: PUSH
38017: LD_INT 3
38019: PUSH
38020: LD_INT 4
38022: PUSH
38023: LD_INT 5
38025: PUSH
38026: LD_INT 6
38028: PUSH
38029: LD_INT 7
38031: PUSH
38032: LD_INT 8
38034: PUSH
38035: LD_INT 9
38037: PUSH
38038: LD_INT 10
38040: PUSH
38041: LD_INT 11
38043: PUSH
38044: LD_INT 12
38046: PUSH
38047: LD_INT 13
38049: PUSH
38050: LD_INT 14
38052: PUSH
38053: LD_INT 15
38055: PUSH
38056: LD_INT 16
38058: PUSH
38059: LD_INT 17
38061: PUSH
38062: LD_INT 18
38064: PUSH
38065: LD_INT 19
38067: PUSH
38068: LD_INT 20
38070: PUSH
38071: LD_INT 21
38073: PUSH
38074: LD_INT 22
38076: PUSH
38077: LD_INT 23
38079: PUSH
38080: LD_INT 24
38082: PUSH
38083: LD_INT 25
38085: PUSH
38086: LD_INT 26
38088: PUSH
38089: LD_INT 27
38091: PUSH
38092: LD_INT 28
38094: PUSH
38095: LD_INT 29
38097: PUSH
38098: LD_INT 30
38100: PUSH
38101: LD_INT 31
38103: PUSH
38104: LD_INT 32
38106: PUSH
38107: LD_INT 33
38109: PUSH
38110: LD_INT 34
38112: PUSH
38113: LD_INT 36
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: LIST
38132: LIST
38133: LIST
38134: LIST
38135: LIST
38136: LIST
38137: LIST
38138: LIST
38139: LIST
38140: LIST
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 101
38155: PUSH
38156: LD_INT 102
38158: PUSH
38159: LD_INT 103
38161: PUSH
38162: LD_INT 104
38164: PUSH
38165: LD_INT 105
38167: PUSH
38168: LD_INT 106
38170: PUSH
38171: LD_INT 107
38173: PUSH
38174: LD_INT 108
38176: PUSH
38177: LD_INT 109
38179: PUSH
38180: LD_INT 110
38182: PUSH
38183: LD_INT 111
38185: PUSH
38186: LD_INT 112
38188: PUSH
38189: LD_INT 113
38191: PUSH
38192: LD_INT 114
38194: PUSH
38195: LD_INT 116
38197: PUSH
38198: LD_INT 117
38200: PUSH
38201: LD_INT 118
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: LIST
38220: LIST
38221: LIST
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: ST_TO_ADDR
38227: GO 39002
38229: LD_INT 16
38231: DOUBLE
38232: EQUAL
38233: IFTRUE 38237
38235: GO 38373
38237: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
38238: LD_ADDR_VAR 0 2
38242: PUSH
38243: LD_INT 2
38245: PUSH
38246: LD_INT 4
38248: PUSH
38249: LD_INT 5
38251: PUSH
38252: LD_INT 7
38254: PUSH
38255: LD_INT 11
38257: PUSH
38258: LD_INT 12
38260: PUSH
38261: LD_INT 15
38263: PUSH
38264: LD_INT 16
38266: PUSH
38267: LD_INT 20
38269: PUSH
38270: LD_INT 21
38272: PUSH
38273: LD_INT 22
38275: PUSH
38276: LD_INT 23
38278: PUSH
38279: LD_INT 25
38281: PUSH
38282: LD_INT 26
38284: PUSH
38285: LD_INT 30
38287: PUSH
38288: LD_INT 31
38290: PUSH
38291: LD_INT 32
38293: PUSH
38294: LD_INT 33
38296: PUSH
38297: LD_INT 34
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 101
38323: PUSH
38324: LD_INT 102
38326: PUSH
38327: LD_INT 103
38329: PUSH
38330: LD_INT 106
38332: PUSH
38333: LD_INT 108
38335: PUSH
38336: LD_INT 112
38338: PUSH
38339: LD_INT 113
38341: PUSH
38342: LD_INT 114
38344: PUSH
38345: LD_INT 116
38347: PUSH
38348: LD_INT 117
38350: PUSH
38351: LD_INT 118
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: ST_TO_ADDR
38371: GO 39002
38373: LD_INT 17
38375: DOUBLE
38376: EQUAL
38377: IFTRUE 38381
38379: GO 38605
38381: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
38382: LD_ADDR_VAR 0 2
38386: PUSH
38387: LD_INT 1
38389: PUSH
38390: LD_INT 2
38392: PUSH
38393: LD_INT 3
38395: PUSH
38396: LD_INT 4
38398: PUSH
38399: LD_INT 5
38401: PUSH
38402: LD_INT 6
38404: PUSH
38405: LD_INT 7
38407: PUSH
38408: LD_INT 8
38410: PUSH
38411: LD_INT 9
38413: PUSH
38414: LD_INT 10
38416: PUSH
38417: LD_INT 11
38419: PUSH
38420: LD_INT 12
38422: PUSH
38423: LD_INT 13
38425: PUSH
38426: LD_INT 14
38428: PUSH
38429: LD_INT 15
38431: PUSH
38432: LD_INT 16
38434: PUSH
38435: LD_INT 17
38437: PUSH
38438: LD_INT 18
38440: PUSH
38441: LD_INT 19
38443: PUSH
38444: LD_INT 20
38446: PUSH
38447: LD_INT 21
38449: PUSH
38450: LD_INT 22
38452: PUSH
38453: LD_INT 23
38455: PUSH
38456: LD_INT 24
38458: PUSH
38459: LD_INT 25
38461: PUSH
38462: LD_INT 26
38464: PUSH
38465: LD_INT 27
38467: PUSH
38468: LD_INT 28
38470: PUSH
38471: LD_INT 29
38473: PUSH
38474: LD_INT 30
38476: PUSH
38477: LD_INT 31
38479: PUSH
38480: LD_INT 32
38482: PUSH
38483: LD_INT 33
38485: PUSH
38486: LD_INT 34
38488: PUSH
38489: LD_INT 36
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 101
38531: PUSH
38532: LD_INT 102
38534: PUSH
38535: LD_INT 103
38537: PUSH
38538: LD_INT 104
38540: PUSH
38541: LD_INT 105
38543: PUSH
38544: LD_INT 106
38546: PUSH
38547: LD_INT 107
38549: PUSH
38550: LD_INT 108
38552: PUSH
38553: LD_INT 109
38555: PUSH
38556: LD_INT 110
38558: PUSH
38559: LD_INT 111
38561: PUSH
38562: LD_INT 112
38564: PUSH
38565: LD_INT 113
38567: PUSH
38568: LD_INT 114
38570: PUSH
38571: LD_INT 116
38573: PUSH
38574: LD_INT 117
38576: PUSH
38577: LD_INT 118
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: LIST
38584: LIST
38585: LIST
38586: LIST
38587: LIST
38588: LIST
38589: LIST
38590: LIST
38591: LIST
38592: LIST
38593: LIST
38594: LIST
38595: LIST
38596: LIST
38597: LIST
38598: PUSH
38599: EMPTY
38600: LIST
38601: LIST
38602: ST_TO_ADDR
38603: GO 39002
38605: LD_INT 18
38607: DOUBLE
38608: EQUAL
38609: IFTRUE 38613
38611: GO 38761
38613: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
38614: LD_ADDR_VAR 0 2
38618: PUSH
38619: LD_INT 2
38621: PUSH
38622: LD_INT 4
38624: PUSH
38625: LD_INT 5
38627: PUSH
38628: LD_INT 7
38630: PUSH
38631: LD_INT 11
38633: PUSH
38634: LD_INT 12
38636: PUSH
38637: LD_INT 15
38639: PUSH
38640: LD_INT 16
38642: PUSH
38643: LD_INT 20
38645: PUSH
38646: LD_INT 21
38648: PUSH
38649: LD_INT 22
38651: PUSH
38652: LD_INT 23
38654: PUSH
38655: LD_INT 25
38657: PUSH
38658: LD_INT 26
38660: PUSH
38661: LD_INT 30
38663: PUSH
38664: LD_INT 31
38666: PUSH
38667: LD_INT 32
38669: PUSH
38670: LD_INT 33
38672: PUSH
38673: LD_INT 34
38675: PUSH
38676: LD_INT 35
38678: PUSH
38679: LD_INT 36
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: PUSH
38705: LD_INT 101
38707: PUSH
38708: LD_INT 102
38710: PUSH
38711: LD_INT 103
38713: PUSH
38714: LD_INT 106
38716: PUSH
38717: LD_INT 108
38719: PUSH
38720: LD_INT 112
38722: PUSH
38723: LD_INT 113
38725: PUSH
38726: LD_INT 114
38728: PUSH
38729: LD_INT 115
38731: PUSH
38732: LD_INT 116
38734: PUSH
38735: LD_INT 117
38737: PUSH
38738: LD_INT 118
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: LIST
38753: LIST
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: ST_TO_ADDR
38759: GO 39002
38761: LD_INT 19
38763: DOUBLE
38764: EQUAL
38765: IFTRUE 38769
38767: GO 39001
38769: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
38770: LD_ADDR_VAR 0 2
38774: PUSH
38775: LD_INT 1
38777: PUSH
38778: LD_INT 2
38780: PUSH
38781: LD_INT 3
38783: PUSH
38784: LD_INT 4
38786: PUSH
38787: LD_INT 5
38789: PUSH
38790: LD_INT 6
38792: PUSH
38793: LD_INT 7
38795: PUSH
38796: LD_INT 8
38798: PUSH
38799: LD_INT 9
38801: PUSH
38802: LD_INT 10
38804: PUSH
38805: LD_INT 11
38807: PUSH
38808: LD_INT 12
38810: PUSH
38811: LD_INT 13
38813: PUSH
38814: LD_INT 14
38816: PUSH
38817: LD_INT 15
38819: PUSH
38820: LD_INT 16
38822: PUSH
38823: LD_INT 17
38825: PUSH
38826: LD_INT 18
38828: PUSH
38829: LD_INT 19
38831: PUSH
38832: LD_INT 20
38834: PUSH
38835: LD_INT 21
38837: PUSH
38838: LD_INT 22
38840: PUSH
38841: LD_INT 23
38843: PUSH
38844: LD_INT 24
38846: PUSH
38847: LD_INT 25
38849: PUSH
38850: LD_INT 26
38852: PUSH
38853: LD_INT 27
38855: PUSH
38856: LD_INT 28
38858: PUSH
38859: LD_INT 29
38861: PUSH
38862: LD_INT 30
38864: PUSH
38865: LD_INT 31
38867: PUSH
38868: LD_INT 32
38870: PUSH
38871: LD_INT 33
38873: PUSH
38874: LD_INT 34
38876: PUSH
38877: LD_INT 35
38879: PUSH
38880: LD_INT 36
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 101
38923: PUSH
38924: LD_INT 102
38926: PUSH
38927: LD_INT 103
38929: PUSH
38930: LD_INT 104
38932: PUSH
38933: LD_INT 105
38935: PUSH
38936: LD_INT 106
38938: PUSH
38939: LD_INT 107
38941: PUSH
38942: LD_INT 108
38944: PUSH
38945: LD_INT 109
38947: PUSH
38948: LD_INT 110
38950: PUSH
38951: LD_INT 111
38953: PUSH
38954: LD_INT 112
38956: PUSH
38957: LD_INT 113
38959: PUSH
38960: LD_INT 114
38962: PUSH
38963: LD_INT 115
38965: PUSH
38966: LD_INT 116
38968: PUSH
38969: LD_INT 117
38971: PUSH
38972: LD_INT 118
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: ST_TO_ADDR
38999: GO 39002
39001: POP
// end else
39002: GO 39233
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
39004: LD_ADDR_VAR 0 2
39008: PUSH
39009: LD_INT 1
39011: PUSH
39012: LD_INT 2
39014: PUSH
39015: LD_INT 3
39017: PUSH
39018: LD_INT 4
39020: PUSH
39021: LD_INT 5
39023: PUSH
39024: LD_INT 6
39026: PUSH
39027: LD_INT 7
39029: PUSH
39030: LD_INT 8
39032: PUSH
39033: LD_INT 9
39035: PUSH
39036: LD_INT 10
39038: PUSH
39039: LD_INT 11
39041: PUSH
39042: LD_INT 12
39044: PUSH
39045: LD_INT 13
39047: PUSH
39048: LD_INT 14
39050: PUSH
39051: LD_INT 15
39053: PUSH
39054: LD_INT 16
39056: PUSH
39057: LD_INT 17
39059: PUSH
39060: LD_INT 18
39062: PUSH
39063: LD_INT 19
39065: PUSH
39066: LD_INT 20
39068: PUSH
39069: LD_INT 21
39071: PUSH
39072: LD_INT 22
39074: PUSH
39075: LD_INT 23
39077: PUSH
39078: LD_INT 24
39080: PUSH
39081: LD_INT 25
39083: PUSH
39084: LD_INT 26
39086: PUSH
39087: LD_INT 27
39089: PUSH
39090: LD_INT 28
39092: PUSH
39093: LD_INT 29
39095: PUSH
39096: LD_INT 30
39098: PUSH
39099: LD_INT 31
39101: PUSH
39102: LD_INT 32
39104: PUSH
39105: LD_INT 33
39107: PUSH
39108: LD_INT 34
39110: PUSH
39111: LD_INT 35
39113: PUSH
39114: LD_INT 36
39116: PUSH
39117: EMPTY
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 101
39157: PUSH
39158: LD_INT 102
39160: PUSH
39161: LD_INT 103
39163: PUSH
39164: LD_INT 104
39166: PUSH
39167: LD_INT 105
39169: PUSH
39170: LD_INT 106
39172: PUSH
39173: LD_INT 107
39175: PUSH
39176: LD_INT 108
39178: PUSH
39179: LD_INT 109
39181: PUSH
39182: LD_INT 110
39184: PUSH
39185: LD_INT 111
39187: PUSH
39188: LD_INT 112
39190: PUSH
39191: LD_INT 113
39193: PUSH
39194: LD_INT 114
39196: PUSH
39197: LD_INT 115
39199: PUSH
39200: LD_INT 116
39202: PUSH
39203: LD_INT 117
39205: PUSH
39206: LD_INT 118
39208: PUSH
39209: EMPTY
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: ST_TO_ADDR
// if result then
39233: LD_VAR 0 2
39237: IFFALSE 40023
// begin normal :=  ;
39239: LD_ADDR_VAR 0 5
39243: PUSH
39244: LD_STRING 
39246: ST_TO_ADDR
// hardcore :=  ;
39247: LD_ADDR_VAR 0 6
39251: PUSH
39252: LD_STRING 
39254: ST_TO_ADDR
// active :=  ;
39255: LD_ADDR_VAR 0 7
39259: PUSH
39260: LD_STRING 
39262: ST_TO_ADDR
// for i = 1 to normalCounter do
39263: LD_ADDR_VAR 0 8
39267: PUSH
39268: DOUBLE
39269: LD_INT 1
39271: DEC
39272: ST_TO_ADDR
39273: LD_EXP 88
39277: PUSH
39278: FOR_TO
39279: IFFALSE 39380
// begin tmp := 0 ;
39281: LD_ADDR_VAR 0 3
39285: PUSH
39286: LD_STRING 0
39288: ST_TO_ADDR
// if result [ 1 ] then
39289: LD_VAR 0 2
39293: PUSH
39294: LD_INT 1
39296: ARRAY
39297: IFFALSE 39362
// if result [ 1 ] [ 1 ] = i then
39299: LD_VAR 0 2
39303: PUSH
39304: LD_INT 1
39306: ARRAY
39307: PUSH
39308: LD_INT 1
39310: ARRAY
39311: PUSH
39312: LD_VAR 0 8
39316: EQUAL
39317: IFFALSE 39362
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
39319: LD_ADDR_VAR 0 2
39323: PUSH
39324: LD_VAR 0 2
39328: PPUSH
39329: LD_INT 1
39331: PPUSH
39332: LD_VAR 0 2
39336: PUSH
39337: LD_INT 1
39339: ARRAY
39340: PPUSH
39341: LD_INT 1
39343: PPUSH
39344: CALL_OW 3
39348: PPUSH
39349: CALL_OW 1
39353: ST_TO_ADDR
// tmp := 1 ;
39354: LD_ADDR_VAR 0 3
39358: PUSH
39359: LD_STRING 1
39361: ST_TO_ADDR
// end ; normal := normal & tmp ;
39362: LD_ADDR_VAR 0 5
39366: PUSH
39367: LD_VAR 0 5
39371: PUSH
39372: LD_VAR 0 3
39376: STR
39377: ST_TO_ADDR
// end ;
39378: GO 39278
39380: POP
39381: POP
// for i = 1 to hardcoreCounter do
39382: LD_ADDR_VAR 0 8
39386: PUSH
39387: DOUBLE
39388: LD_INT 1
39390: DEC
39391: ST_TO_ADDR
39392: LD_EXP 89
39396: PUSH
39397: FOR_TO
39398: IFFALSE 39503
// begin tmp := 0 ;
39400: LD_ADDR_VAR 0 3
39404: PUSH
39405: LD_STRING 0
39407: ST_TO_ADDR
// if result [ 2 ] then
39408: LD_VAR 0 2
39412: PUSH
39413: LD_INT 2
39415: ARRAY
39416: IFFALSE 39485
// if result [ 2 ] [ 1 ] = 100 + i then
39418: LD_VAR 0 2
39422: PUSH
39423: LD_INT 2
39425: ARRAY
39426: PUSH
39427: LD_INT 1
39429: ARRAY
39430: PUSH
39431: LD_INT 100
39433: PUSH
39434: LD_VAR 0 8
39438: PLUS
39439: EQUAL
39440: IFFALSE 39485
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
39442: LD_ADDR_VAR 0 2
39446: PUSH
39447: LD_VAR 0 2
39451: PPUSH
39452: LD_INT 2
39454: PPUSH
39455: LD_VAR 0 2
39459: PUSH
39460: LD_INT 2
39462: ARRAY
39463: PPUSH
39464: LD_INT 1
39466: PPUSH
39467: CALL_OW 3
39471: PPUSH
39472: CALL_OW 1
39476: ST_TO_ADDR
// tmp := 1 ;
39477: LD_ADDR_VAR 0 3
39481: PUSH
39482: LD_STRING 1
39484: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
39485: LD_ADDR_VAR 0 6
39489: PUSH
39490: LD_VAR 0 6
39494: PUSH
39495: LD_VAR 0 3
39499: STR
39500: ST_TO_ADDR
// end ;
39501: GO 39397
39503: POP
39504: POP
// if isGameLoad then
39505: LD_VAR 0 1
39509: IFFALSE 39984
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
39511: LD_ADDR_VAR 0 4
39515: PUSH
39516: LD_EXP 92
39520: PUSH
39521: LD_EXP 91
39525: PUSH
39526: LD_EXP 93
39530: PUSH
39531: LD_EXP 90
39535: PUSH
39536: LD_EXP 94
39540: PUSH
39541: LD_EXP 95
39545: PUSH
39546: LD_EXP 96
39550: PUSH
39551: LD_EXP 97
39555: PUSH
39556: LD_EXP 98
39560: PUSH
39561: LD_EXP 99
39565: PUSH
39566: LD_EXP 100
39570: PUSH
39571: LD_EXP 101
39575: PUSH
39576: LD_EXP 102
39580: PUSH
39581: LD_EXP 103
39585: PUSH
39586: LD_EXP 111
39590: PUSH
39591: LD_EXP 112
39595: PUSH
39596: LD_EXP 113
39600: PUSH
39601: LD_EXP 114
39605: PUSH
39606: LD_EXP 116
39610: PUSH
39611: LD_EXP 117
39615: PUSH
39616: LD_EXP 118
39620: PUSH
39621: LD_EXP 121
39625: PUSH
39626: LD_EXP 123
39630: PUSH
39631: LD_EXP 124
39635: PUSH
39636: LD_EXP 125
39640: PUSH
39641: LD_EXP 127
39645: PUSH
39646: LD_EXP 128
39650: PUSH
39651: LD_EXP 131
39655: PUSH
39656: LD_EXP 132
39660: PUSH
39661: LD_EXP 133
39665: PUSH
39666: LD_EXP 134
39670: PUSH
39671: LD_EXP 135
39675: PUSH
39676: LD_EXP 136
39680: PUSH
39681: LD_EXP 137
39685: PUSH
39686: LD_EXP 138
39690: PUSH
39691: LD_EXP 139
39695: PUSH
39696: LD_EXP 104
39700: PUSH
39701: LD_EXP 105
39705: PUSH
39706: LD_EXP 108
39710: PUSH
39711: LD_EXP 109
39715: PUSH
39716: LD_EXP 110
39720: PUSH
39721: LD_EXP 106
39725: PUSH
39726: LD_EXP 107
39730: PUSH
39731: LD_EXP 115
39735: PUSH
39736: LD_EXP 119
39740: PUSH
39741: LD_EXP 120
39745: PUSH
39746: LD_EXP 122
39750: PUSH
39751: LD_EXP 126
39755: PUSH
39756: LD_EXP 129
39760: PUSH
39761: LD_EXP 130
39765: PUSH
39766: LD_EXP 140
39770: PUSH
39771: LD_EXP 141
39775: PUSH
39776: LD_EXP 142
39780: PUSH
39781: LD_EXP 143
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: LIST
39790: LIST
39791: LIST
39792: LIST
39793: LIST
39794: LIST
39795: LIST
39796: LIST
39797: LIST
39798: LIST
39799: LIST
39800: LIST
39801: LIST
39802: LIST
39803: LIST
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: ST_TO_ADDR
// tmp :=  ;
39842: LD_ADDR_VAR 0 3
39846: PUSH
39847: LD_STRING 
39849: ST_TO_ADDR
// for i = 1 to normalCounter do
39850: LD_ADDR_VAR 0 8
39854: PUSH
39855: DOUBLE
39856: LD_INT 1
39858: DEC
39859: ST_TO_ADDR
39860: LD_EXP 88
39864: PUSH
39865: FOR_TO
39866: IFFALSE 39902
// begin if flags [ i ] then
39868: LD_VAR 0 4
39872: PUSH
39873: LD_VAR 0 8
39877: ARRAY
39878: IFFALSE 39900
// tmp := tmp & i & ; ;
39880: LD_ADDR_VAR 0 3
39884: PUSH
39885: LD_VAR 0 3
39889: PUSH
39890: LD_VAR 0 8
39894: STR
39895: PUSH
39896: LD_STRING ;
39898: STR
39899: ST_TO_ADDR
// end ;
39900: GO 39865
39902: POP
39903: POP
// for i = 1 to hardcoreCounter do
39904: LD_ADDR_VAR 0 8
39908: PUSH
39909: DOUBLE
39910: LD_INT 1
39912: DEC
39913: ST_TO_ADDR
39914: LD_EXP 89
39918: PUSH
39919: FOR_TO
39920: IFFALSE 39966
// begin if flags [ normalCounter + i ] then
39922: LD_VAR 0 4
39926: PUSH
39927: LD_EXP 88
39931: PUSH
39932: LD_VAR 0 8
39936: PLUS
39937: ARRAY
39938: IFFALSE 39964
// tmp := tmp & ( 100 + i ) & ; ;
39940: LD_ADDR_VAR 0 3
39944: PUSH
39945: LD_VAR 0 3
39949: PUSH
39950: LD_INT 100
39952: PUSH
39953: LD_VAR 0 8
39957: PLUS
39958: STR
39959: PUSH
39960: LD_STRING ;
39962: STR
39963: ST_TO_ADDR
// end ;
39964: GO 39919
39966: POP
39967: POP
// if tmp then
39968: LD_VAR 0 3
39972: IFFALSE 39984
// active := tmp ;
39974: LD_ADDR_VAR 0 7
39978: PUSH
39979: LD_VAR 0 3
39983: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
39984: LD_STRING getStreamItemsFromMission("
39986: PUSH
39987: LD_VAR 0 5
39991: STR
39992: PUSH
39993: LD_STRING ","
39995: STR
39996: PUSH
39997: LD_VAR 0 6
40001: STR
40002: PUSH
40003: LD_STRING ","
40005: STR
40006: PUSH
40007: LD_VAR 0 7
40011: STR
40012: PUSH
40013: LD_STRING ")
40015: STR
40016: PPUSH
40017: CALL_OW 559
// end else
40021: GO 40030
// ToLua ( getStreamItemsFromMission("","","") ) ;
40023: LD_STRING getStreamItemsFromMission("","","")
40025: PPUSH
40026: CALL_OW 559
// end ;
40030: LD_VAR 0 2
40034: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
40035: LD_EXP 87
40039: PUSH
40040: LD_EXP 92
40044: AND
40045: IFFALSE 40169
40047: GO 40049
40049: DISABLE
40050: LD_INT 0
40052: PPUSH
40053: PPUSH
// begin enable ;
40054: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
40055: LD_ADDR_VAR 0 2
40059: PUSH
40060: LD_INT 22
40062: PUSH
40063: LD_OWVAR 2
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 2
40074: PUSH
40075: LD_INT 34
40077: PUSH
40078: LD_INT 7
40080: PUSH
40081: EMPTY
40082: LIST
40083: LIST
40084: PUSH
40085: LD_INT 34
40087: PUSH
40088: LD_INT 45
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 34
40097: PUSH
40098: LD_INT 28
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 34
40107: PUSH
40108: LD_INT 47
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PPUSH
40126: CALL_OW 69
40130: ST_TO_ADDR
// if not tmp then
40131: LD_VAR 0 2
40135: NOT
40136: IFFALSE 40140
// exit ;
40138: GO 40169
// for i in tmp do
40140: LD_ADDR_VAR 0 1
40144: PUSH
40145: LD_VAR 0 2
40149: PUSH
40150: FOR_IN
40151: IFFALSE 40167
// begin SetLives ( i , 0 ) ;
40153: LD_VAR 0 1
40157: PPUSH
40158: LD_INT 0
40160: PPUSH
40161: CALL_OW 234
// end ;
40165: GO 40150
40167: POP
40168: POP
// end ;
40169: PPOPN 2
40171: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
40172: LD_EXP 87
40176: PUSH
40177: LD_EXP 93
40181: AND
40182: IFFALSE 40266
40184: GO 40186
40186: DISABLE
40187: LD_INT 0
40189: PPUSH
40190: PPUSH
// begin enable ;
40191: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
40192: LD_ADDR_VAR 0 2
40196: PUSH
40197: LD_INT 22
40199: PUSH
40200: LD_OWVAR 2
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 32
40211: PUSH
40212: LD_INT 3
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PPUSH
40223: CALL_OW 69
40227: ST_TO_ADDR
// if not tmp then
40228: LD_VAR 0 2
40232: NOT
40233: IFFALSE 40237
// exit ;
40235: GO 40266
// for i in tmp do
40237: LD_ADDR_VAR 0 1
40241: PUSH
40242: LD_VAR 0 2
40246: PUSH
40247: FOR_IN
40248: IFFALSE 40264
// begin SetLives ( i , 0 ) ;
40250: LD_VAR 0 1
40254: PPUSH
40255: LD_INT 0
40257: PPUSH
40258: CALL_OW 234
// end ;
40262: GO 40247
40264: POP
40265: POP
// end ;
40266: PPOPN 2
40268: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
40269: LD_EXP 87
40273: PUSH
40274: LD_EXP 90
40278: AND
40279: IFFALSE 40372
40281: GO 40283
40283: DISABLE
40284: LD_INT 0
40286: PPUSH
// begin enable ;
40287: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
40288: LD_ADDR_VAR 0 1
40292: PUSH
40293: LD_INT 22
40295: PUSH
40296: LD_OWVAR 2
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 2
40307: PUSH
40308: LD_INT 25
40310: PUSH
40311: LD_INT 5
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 25
40320: PUSH
40321: LD_INT 9
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 25
40330: PUSH
40331: LD_INT 8
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: LIST
40342: LIST
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PPUSH
40348: CALL_OW 69
40352: PUSH
40353: FOR_IN
40354: IFFALSE 40370
// begin SetClass ( i , 1 ) ;
40356: LD_VAR 0 1
40360: PPUSH
40361: LD_INT 1
40363: PPUSH
40364: CALL_OW 336
// end ;
40368: GO 40353
40370: POP
40371: POP
// end ;
40372: PPOPN 1
40374: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
40375: LD_EXP 87
40379: PUSH
40380: LD_EXP 91
40384: AND
40385: PUSH
40386: LD_OWVAR 65
40390: PUSH
40391: LD_INT 7
40393: LESS
40394: AND
40395: IFFALSE 40409
40397: GO 40399
40399: DISABLE
// begin enable ;
40400: ENABLE
// game_speed := 7 ;
40401: LD_ADDR_OWVAR 65
40405: PUSH
40406: LD_INT 7
40408: ST_TO_ADDR
// end ;
40409: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
40410: LD_EXP 87
40414: PUSH
40415: LD_EXP 94
40419: AND
40420: IFFALSE 40622
40422: GO 40424
40424: DISABLE
40425: LD_INT 0
40427: PPUSH
40428: PPUSH
40429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
40430: LD_ADDR_VAR 0 3
40434: PUSH
40435: LD_INT 81
40437: PUSH
40438: LD_OWVAR 2
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 21
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PPUSH
40461: CALL_OW 69
40465: ST_TO_ADDR
// if not tmp then
40466: LD_VAR 0 3
40470: NOT
40471: IFFALSE 40475
// exit ;
40473: GO 40622
// if tmp > 5 then
40475: LD_VAR 0 3
40479: PUSH
40480: LD_INT 5
40482: GREATER
40483: IFFALSE 40495
// k := 5 else
40485: LD_ADDR_VAR 0 2
40489: PUSH
40490: LD_INT 5
40492: ST_TO_ADDR
40493: GO 40505
// k := tmp ;
40495: LD_ADDR_VAR 0 2
40499: PUSH
40500: LD_VAR 0 3
40504: ST_TO_ADDR
// for i := 1 to k do
40505: LD_ADDR_VAR 0 1
40509: PUSH
40510: DOUBLE
40511: LD_INT 1
40513: DEC
40514: ST_TO_ADDR
40515: LD_VAR 0 2
40519: PUSH
40520: FOR_TO
40521: IFFALSE 40620
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
40523: LD_VAR 0 3
40527: PUSH
40528: LD_VAR 0 1
40532: ARRAY
40533: PPUSH
40534: LD_VAR 0 1
40538: PUSH
40539: LD_INT 4
40541: MOD
40542: PUSH
40543: LD_INT 1
40545: PLUS
40546: PPUSH
40547: CALL_OW 259
40551: PUSH
40552: LD_INT 10
40554: LESS
40555: IFFALSE 40618
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
40557: LD_VAR 0 3
40561: PUSH
40562: LD_VAR 0 1
40566: ARRAY
40567: PPUSH
40568: LD_VAR 0 1
40572: PUSH
40573: LD_INT 4
40575: MOD
40576: PUSH
40577: LD_INT 1
40579: PLUS
40580: PPUSH
40581: LD_VAR 0 3
40585: PUSH
40586: LD_VAR 0 1
40590: ARRAY
40591: PPUSH
40592: LD_VAR 0 1
40596: PUSH
40597: LD_INT 4
40599: MOD
40600: PUSH
40601: LD_INT 1
40603: PLUS
40604: PPUSH
40605: CALL_OW 259
40609: PUSH
40610: LD_INT 1
40612: PLUS
40613: PPUSH
40614: CALL_OW 237
40618: GO 40520
40620: POP
40621: POP
// end ;
40622: PPOPN 3
40624: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
40625: LD_EXP 87
40629: PUSH
40630: LD_EXP 95
40634: AND
40635: IFFALSE 40655
40637: GO 40639
40639: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
40640: LD_INT 4
40642: PPUSH
40643: LD_OWVAR 2
40647: PPUSH
40648: LD_INT 0
40650: PPUSH
40651: CALL_OW 324
40655: END
// every 0 0$1 trigger StreamModeActive and sShovel do
40656: LD_EXP 87
40660: PUSH
40661: LD_EXP 124
40665: AND
40666: IFFALSE 40686
40668: GO 40670
40670: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
40671: LD_INT 19
40673: PPUSH
40674: LD_OWVAR 2
40678: PPUSH
40679: LD_INT 0
40681: PPUSH
40682: CALL_OW 324
40686: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
40687: LD_EXP 87
40691: PUSH
40692: LD_EXP 96
40696: AND
40697: IFFALSE 40799
40699: GO 40701
40701: DISABLE
40702: LD_INT 0
40704: PPUSH
40705: PPUSH
// begin enable ;
40706: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
40707: LD_ADDR_VAR 0 2
40711: PUSH
40712: LD_INT 22
40714: PUSH
40715: LD_OWVAR 2
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 2
40726: PUSH
40727: LD_INT 34
40729: PUSH
40730: LD_INT 11
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 34
40739: PUSH
40740: LD_INT 30
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: LIST
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PPUSH
40756: CALL_OW 69
40760: ST_TO_ADDR
// if not tmp then
40761: LD_VAR 0 2
40765: NOT
40766: IFFALSE 40770
// exit ;
40768: GO 40799
// for i in tmp do
40770: LD_ADDR_VAR 0 1
40774: PUSH
40775: LD_VAR 0 2
40779: PUSH
40780: FOR_IN
40781: IFFALSE 40797
// begin SetLives ( i , 0 ) ;
40783: LD_VAR 0 1
40787: PPUSH
40788: LD_INT 0
40790: PPUSH
40791: CALL_OW 234
// end ;
40795: GO 40780
40797: POP
40798: POP
// end ;
40799: PPOPN 2
40801: END
// every 0 0$1 trigger StreamModeActive and sBunker do
40802: LD_EXP 87
40806: PUSH
40807: LD_EXP 97
40811: AND
40812: IFFALSE 40832
40814: GO 40816
40816: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
40817: LD_INT 32
40819: PPUSH
40820: LD_OWVAR 2
40824: PPUSH
40825: LD_INT 0
40827: PPUSH
40828: CALL_OW 324
40832: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
40833: LD_EXP 87
40837: PUSH
40838: LD_EXP 98
40842: AND
40843: IFFALSE 41024
40845: GO 40847
40847: DISABLE
40848: LD_INT 0
40850: PPUSH
40851: PPUSH
40852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
40853: LD_ADDR_VAR 0 2
40857: PUSH
40858: LD_INT 22
40860: PUSH
40861: LD_OWVAR 2
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 33
40872: PUSH
40873: LD_INT 3
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PPUSH
40884: CALL_OW 69
40888: ST_TO_ADDR
// if not tmp then
40889: LD_VAR 0 2
40893: NOT
40894: IFFALSE 40898
// exit ;
40896: GO 41024
// side := 0 ;
40898: LD_ADDR_VAR 0 3
40902: PUSH
40903: LD_INT 0
40905: ST_TO_ADDR
// for i := 1 to 8 do
40906: LD_ADDR_VAR 0 1
40910: PUSH
40911: DOUBLE
40912: LD_INT 1
40914: DEC
40915: ST_TO_ADDR
40916: LD_INT 8
40918: PUSH
40919: FOR_TO
40920: IFFALSE 40968
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
40922: LD_OWVAR 2
40926: PUSH
40927: LD_VAR 0 1
40931: NONEQUAL
40932: PUSH
40933: LD_OWVAR 2
40937: PPUSH
40938: LD_VAR 0 1
40942: PPUSH
40943: CALL_OW 81
40947: PUSH
40948: LD_INT 2
40950: EQUAL
40951: AND
40952: IFFALSE 40966
// begin side := i ;
40954: LD_ADDR_VAR 0 3
40958: PUSH
40959: LD_VAR 0 1
40963: ST_TO_ADDR
// break ;
40964: GO 40968
// end ;
40966: GO 40919
40968: POP
40969: POP
// if not side then
40970: LD_VAR 0 3
40974: NOT
40975: IFFALSE 40979
// exit ;
40977: GO 41024
// for i := 1 to tmp do
40979: LD_ADDR_VAR 0 1
40983: PUSH
40984: DOUBLE
40985: LD_INT 1
40987: DEC
40988: ST_TO_ADDR
40989: LD_VAR 0 2
40993: PUSH
40994: FOR_TO
40995: IFFALSE 41022
// if Prob ( 60 ) then
40997: LD_INT 60
40999: PPUSH
41000: CALL_OW 13
41004: IFFALSE 41020
// SetSide ( i , side ) ;
41006: LD_VAR 0 1
41010: PPUSH
41011: LD_VAR 0 3
41015: PPUSH
41016: CALL_OW 235
41020: GO 40994
41022: POP
41023: POP
// end ;
41024: PPOPN 3
41026: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
41027: LD_EXP 87
41031: PUSH
41032: LD_EXP 100
41036: AND
41037: IFFALSE 41156
41039: GO 41041
41041: DISABLE
41042: LD_INT 0
41044: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
41045: LD_ADDR_VAR 0 1
41049: PUSH
41050: LD_INT 22
41052: PUSH
41053: LD_OWVAR 2
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 21
41064: PUSH
41065: LD_INT 1
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: LD_INT 3
41074: PUSH
41075: LD_INT 23
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: EMPTY
41082: LIST
41083: LIST
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: LIST
41093: PPUSH
41094: CALL_OW 69
41098: PUSH
41099: FOR_IN
41100: IFFALSE 41154
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
41102: LD_VAR 0 1
41106: PPUSH
41107: CALL_OW 257
41111: PUSH
41112: LD_INT 1
41114: PUSH
41115: LD_INT 2
41117: PUSH
41118: LD_INT 3
41120: PUSH
41121: LD_INT 4
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: LIST
41128: LIST
41129: IN
41130: IFFALSE 41152
// SetClass ( un , rand ( 1 , 4 ) ) ;
41132: LD_VAR 0 1
41136: PPUSH
41137: LD_INT 1
41139: PPUSH
41140: LD_INT 4
41142: PPUSH
41143: CALL_OW 12
41147: PPUSH
41148: CALL_OW 336
41152: GO 41099
41154: POP
41155: POP
// end ;
41156: PPOPN 1
41158: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
41159: LD_EXP 87
41163: PUSH
41164: LD_EXP 99
41168: AND
41169: IFFALSE 41248
41171: GO 41173
41173: DISABLE
41174: LD_INT 0
41176: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41177: LD_ADDR_VAR 0 1
41181: PUSH
41182: LD_INT 22
41184: PUSH
41185: LD_OWVAR 2
41189: PUSH
41190: EMPTY
41191: LIST
41192: LIST
41193: PUSH
41194: LD_INT 21
41196: PUSH
41197: LD_INT 3
41199: PUSH
41200: EMPTY
41201: LIST
41202: LIST
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PPUSH
41208: CALL_OW 69
41212: ST_TO_ADDR
// if not tmp then
41213: LD_VAR 0 1
41217: NOT
41218: IFFALSE 41222
// exit ;
41220: GO 41248
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
41222: LD_VAR 0 1
41226: PUSH
41227: LD_INT 1
41229: PPUSH
41230: LD_VAR 0 1
41234: PPUSH
41235: CALL_OW 12
41239: ARRAY
41240: PPUSH
41241: LD_INT 100
41243: PPUSH
41244: CALL_OW 234
// end ;
41248: PPOPN 1
41250: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
41251: LD_EXP 87
41255: PUSH
41256: LD_EXP 101
41260: AND
41261: IFFALSE 41359
41263: GO 41265
41265: DISABLE
41266: LD_INT 0
41268: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
41269: LD_ADDR_VAR 0 1
41273: PUSH
41274: LD_INT 22
41276: PUSH
41277: LD_OWVAR 2
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 21
41288: PUSH
41289: LD_INT 1
41291: PUSH
41292: EMPTY
41293: LIST
41294: LIST
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PPUSH
41300: CALL_OW 69
41304: ST_TO_ADDR
// if not tmp then
41305: LD_VAR 0 1
41309: NOT
41310: IFFALSE 41314
// exit ;
41312: GO 41359
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
41314: LD_VAR 0 1
41318: PUSH
41319: LD_INT 1
41321: PPUSH
41322: LD_VAR 0 1
41326: PPUSH
41327: CALL_OW 12
41331: ARRAY
41332: PPUSH
41333: LD_INT 1
41335: PPUSH
41336: LD_INT 4
41338: PPUSH
41339: CALL_OW 12
41343: PPUSH
41344: LD_INT 3000
41346: PPUSH
41347: LD_INT 9000
41349: PPUSH
41350: CALL_OW 12
41354: PPUSH
41355: CALL_OW 492
// end ;
41359: PPOPN 1
41361: END
// every 0 0$1 trigger StreamModeActive and sDepot do
41362: LD_EXP 87
41366: PUSH
41367: LD_EXP 102
41371: AND
41372: IFFALSE 41392
41374: GO 41376
41376: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
41377: LD_INT 1
41379: PPUSH
41380: LD_OWVAR 2
41384: PPUSH
41385: LD_INT 0
41387: PPUSH
41388: CALL_OW 324
41392: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
41393: LD_EXP 87
41397: PUSH
41398: LD_EXP 103
41402: AND
41403: IFFALSE 41486
41405: GO 41407
41407: DISABLE
41408: LD_INT 0
41410: PPUSH
41411: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41412: LD_ADDR_VAR 0 2
41416: PUSH
41417: LD_INT 22
41419: PUSH
41420: LD_OWVAR 2
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 21
41431: PUSH
41432: LD_INT 3
41434: PUSH
41435: EMPTY
41436: LIST
41437: LIST
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PPUSH
41443: CALL_OW 69
41447: ST_TO_ADDR
// if not tmp then
41448: LD_VAR 0 2
41452: NOT
41453: IFFALSE 41457
// exit ;
41455: GO 41486
// for i in tmp do
41457: LD_ADDR_VAR 0 1
41461: PUSH
41462: LD_VAR 0 2
41466: PUSH
41467: FOR_IN
41468: IFFALSE 41484
// SetBLevel ( i , 10 ) ;
41470: LD_VAR 0 1
41474: PPUSH
41475: LD_INT 10
41477: PPUSH
41478: CALL_OW 241
41482: GO 41467
41484: POP
41485: POP
// end ;
41486: PPOPN 2
41488: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
41489: LD_EXP 87
41493: PUSH
41494: LD_EXP 104
41498: AND
41499: IFFALSE 41610
41501: GO 41503
41503: DISABLE
41504: LD_INT 0
41506: PPUSH
41507: PPUSH
41508: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41509: LD_ADDR_VAR 0 3
41513: PUSH
41514: LD_INT 22
41516: PUSH
41517: LD_OWVAR 2
41521: PUSH
41522: EMPTY
41523: LIST
41524: LIST
41525: PUSH
41526: LD_INT 25
41528: PUSH
41529: LD_INT 1
41531: PUSH
41532: EMPTY
41533: LIST
41534: LIST
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PPUSH
41540: CALL_OW 69
41544: ST_TO_ADDR
// if not tmp then
41545: LD_VAR 0 3
41549: NOT
41550: IFFALSE 41554
// exit ;
41552: GO 41610
// un := tmp [ rand ( 1 , tmp ) ] ;
41554: LD_ADDR_VAR 0 2
41558: PUSH
41559: LD_VAR 0 3
41563: PUSH
41564: LD_INT 1
41566: PPUSH
41567: LD_VAR 0 3
41571: PPUSH
41572: CALL_OW 12
41576: ARRAY
41577: ST_TO_ADDR
// if Crawls ( un ) then
41578: LD_VAR 0 2
41582: PPUSH
41583: CALL_OW 318
41587: IFFALSE 41598
// ComWalk ( un ) ;
41589: LD_VAR 0 2
41593: PPUSH
41594: CALL_OW 138
// SetClass ( un , class_sniper ) ;
41598: LD_VAR 0 2
41602: PPUSH
41603: LD_INT 5
41605: PPUSH
41606: CALL_OW 336
// end ;
41610: PPOPN 3
41612: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
41613: LD_EXP 87
41617: PUSH
41618: LD_EXP 105
41622: AND
41623: PUSH
41624: LD_OWVAR 67
41628: PUSH
41629: LD_INT 4
41631: LESS
41632: AND
41633: IFFALSE 41652
41635: GO 41637
41637: DISABLE
// begin Difficulty := Difficulty + 1 ;
41638: LD_ADDR_OWVAR 67
41642: PUSH
41643: LD_OWVAR 67
41647: PUSH
41648: LD_INT 1
41650: PLUS
41651: ST_TO_ADDR
// end ;
41652: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
41653: LD_EXP 87
41657: PUSH
41658: LD_EXP 106
41662: AND
41663: IFFALSE 41766
41665: GO 41667
41667: DISABLE
41668: LD_INT 0
41670: PPUSH
// begin for i := 1 to 5 do
41671: LD_ADDR_VAR 0 1
41675: PUSH
41676: DOUBLE
41677: LD_INT 1
41679: DEC
41680: ST_TO_ADDR
41681: LD_INT 5
41683: PUSH
41684: FOR_TO
41685: IFFALSE 41764
// begin uc_nation := nation_nature ;
41687: LD_ADDR_OWVAR 21
41691: PUSH
41692: LD_INT 0
41694: ST_TO_ADDR
// uc_side := 0 ;
41695: LD_ADDR_OWVAR 20
41699: PUSH
41700: LD_INT 0
41702: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
41703: LD_ADDR_OWVAR 29
41707: PUSH
41708: LD_INT 12
41710: PUSH
41711: LD_INT 12
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: ST_TO_ADDR
// hc_agressivity := 20 ;
41718: LD_ADDR_OWVAR 35
41722: PUSH
41723: LD_INT 20
41725: ST_TO_ADDR
// hc_class := class_tiger ;
41726: LD_ADDR_OWVAR 28
41730: PUSH
41731: LD_INT 14
41733: ST_TO_ADDR
// hc_gallery :=  ;
41734: LD_ADDR_OWVAR 33
41738: PUSH
41739: LD_STRING 
41741: ST_TO_ADDR
// hc_name :=  ;
41742: LD_ADDR_OWVAR 26
41746: PUSH
41747: LD_STRING 
41749: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
41750: CALL_OW 44
41754: PPUSH
41755: LD_INT 0
41757: PPUSH
41758: CALL_OW 51
// end ;
41762: GO 41684
41764: POP
41765: POP
// end ;
41766: PPOPN 1
41768: END
// every 0 0$1 trigger StreamModeActive and sBomb do
41769: LD_EXP 87
41773: PUSH
41774: LD_EXP 107
41778: AND
41779: IFFALSE 41788
41781: GO 41783
41783: DISABLE
// StreamSibBomb ;
41784: CALL 41789 0 0
41788: END
// export function StreamSibBomb ; var i , x , y ; begin
41789: LD_INT 0
41791: PPUSH
41792: PPUSH
41793: PPUSH
41794: PPUSH
// result := false ;
41795: LD_ADDR_VAR 0 1
41799: PUSH
41800: LD_INT 0
41802: ST_TO_ADDR
// for i := 1 to 16 do
41803: LD_ADDR_VAR 0 2
41807: PUSH
41808: DOUBLE
41809: LD_INT 1
41811: DEC
41812: ST_TO_ADDR
41813: LD_INT 16
41815: PUSH
41816: FOR_TO
41817: IFFALSE 42016
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
41819: LD_ADDR_VAR 0 3
41823: PUSH
41824: LD_INT 10
41826: PUSH
41827: LD_INT 20
41829: PUSH
41830: LD_INT 30
41832: PUSH
41833: LD_INT 40
41835: PUSH
41836: LD_INT 50
41838: PUSH
41839: LD_INT 60
41841: PUSH
41842: LD_INT 70
41844: PUSH
41845: LD_INT 80
41847: PUSH
41848: LD_INT 90
41850: PUSH
41851: LD_INT 100
41853: PUSH
41854: LD_INT 110
41856: PUSH
41857: LD_INT 120
41859: PUSH
41860: LD_INT 130
41862: PUSH
41863: LD_INT 140
41865: PUSH
41866: LD_INT 150
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: LIST
41873: LIST
41874: LIST
41875: LIST
41876: LIST
41877: LIST
41878: LIST
41879: LIST
41880: LIST
41881: LIST
41882: LIST
41883: LIST
41884: LIST
41885: PUSH
41886: LD_INT 1
41888: PPUSH
41889: LD_INT 15
41891: PPUSH
41892: CALL_OW 12
41896: ARRAY
41897: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
41898: LD_ADDR_VAR 0 4
41902: PUSH
41903: LD_INT 10
41905: PUSH
41906: LD_INT 20
41908: PUSH
41909: LD_INT 30
41911: PUSH
41912: LD_INT 40
41914: PUSH
41915: LD_INT 50
41917: PUSH
41918: LD_INT 60
41920: PUSH
41921: LD_INT 70
41923: PUSH
41924: LD_INT 80
41926: PUSH
41927: LD_INT 90
41929: PUSH
41930: LD_INT 100
41932: PUSH
41933: LD_INT 110
41935: PUSH
41936: LD_INT 120
41938: PUSH
41939: LD_INT 130
41941: PUSH
41942: LD_INT 140
41944: PUSH
41945: LD_INT 150
41947: PUSH
41948: EMPTY
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: LIST
41961: LIST
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 1
41967: PPUSH
41968: LD_INT 15
41970: PPUSH
41971: CALL_OW 12
41975: ARRAY
41976: ST_TO_ADDR
// if ValidHex ( x , y ) then
41977: LD_VAR 0 3
41981: PPUSH
41982: LD_VAR 0 4
41986: PPUSH
41987: CALL_OW 488
41991: IFFALSE 42014
// begin result := [ x , y ] ;
41993: LD_ADDR_VAR 0 1
41997: PUSH
41998: LD_VAR 0 3
42002: PUSH
42003: LD_VAR 0 4
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: ST_TO_ADDR
// break ;
42012: GO 42016
// end ; end ;
42014: GO 41816
42016: POP
42017: POP
// if result then
42018: LD_VAR 0 1
42022: IFFALSE 42082
// begin ToLua ( playSibBomb() ) ;
42024: LD_STRING playSibBomb()
42026: PPUSH
42027: CALL_OW 559
// wait ( 0 0$14 ) ;
42031: LD_INT 490
42033: PPUSH
42034: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
42038: LD_VAR 0 1
42042: PUSH
42043: LD_INT 1
42045: ARRAY
42046: PPUSH
42047: LD_VAR 0 1
42051: PUSH
42052: LD_INT 2
42054: ARRAY
42055: PPUSH
42056: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
42060: LD_VAR 0 1
42064: PUSH
42065: LD_INT 1
42067: ARRAY
42068: PPUSH
42069: LD_VAR 0 1
42073: PUSH
42074: LD_INT 2
42076: ARRAY
42077: PPUSH
42078: CALL_OW 429
// end ; end ;
42082: LD_VAR 0 1
42086: RET
// every 0 0$1 trigger StreamModeActive and sReset do
42087: LD_EXP 87
42091: PUSH
42092: LD_EXP 109
42096: AND
42097: IFFALSE 42109
42099: GO 42101
42101: DISABLE
// YouLost (  ) ;
42102: LD_STRING 
42104: PPUSH
42105: CALL_OW 104
42109: END
// every 0 0$1 trigger StreamModeActive and sFog do
42110: LD_EXP 87
42114: PUSH
42115: LD_EXP 108
42119: AND
42120: IFFALSE 42134
42122: GO 42124
42124: DISABLE
// FogOff ( your_side ) ;
42125: LD_OWVAR 2
42129: PPUSH
42130: CALL_OW 344
42134: END
// every 0 0$1 trigger StreamModeActive and sSun do
42135: LD_EXP 87
42139: PUSH
42140: LD_EXP 110
42144: AND
42145: IFFALSE 42173
42147: GO 42149
42149: DISABLE
// begin solar_recharge_percent := 0 ;
42150: LD_ADDR_OWVAR 79
42154: PUSH
42155: LD_INT 0
42157: ST_TO_ADDR
// wait ( 5 5$00 ) ;
42158: LD_INT 10500
42160: PPUSH
42161: CALL_OW 67
// solar_recharge_percent := 100 ;
42165: LD_ADDR_OWVAR 79
42169: PUSH
42170: LD_INT 100
42172: ST_TO_ADDR
// end ;
42173: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
42174: LD_EXP 87
42178: PUSH
42179: LD_EXP 111
42183: AND
42184: IFFALSE 42423
42186: GO 42188
42188: DISABLE
42189: LD_INT 0
42191: PPUSH
42192: PPUSH
42193: PPUSH
// begin tmp := [ ] ;
42194: LD_ADDR_VAR 0 3
42198: PUSH
42199: EMPTY
42200: ST_TO_ADDR
// for i := 1 to 6 do
42201: LD_ADDR_VAR 0 1
42205: PUSH
42206: DOUBLE
42207: LD_INT 1
42209: DEC
42210: ST_TO_ADDR
42211: LD_INT 6
42213: PUSH
42214: FOR_TO
42215: IFFALSE 42320
// begin uc_nation := nation_nature ;
42217: LD_ADDR_OWVAR 21
42221: PUSH
42222: LD_INT 0
42224: ST_TO_ADDR
// uc_side := 0 ;
42225: LD_ADDR_OWVAR 20
42229: PUSH
42230: LD_INT 0
42232: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
42233: LD_ADDR_OWVAR 29
42237: PUSH
42238: LD_INT 12
42240: PUSH
42241: LD_INT 12
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: ST_TO_ADDR
// hc_agressivity := 20 ;
42248: LD_ADDR_OWVAR 35
42252: PUSH
42253: LD_INT 20
42255: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
42256: LD_ADDR_OWVAR 28
42260: PUSH
42261: LD_INT 17
42263: ST_TO_ADDR
// hc_gallery :=  ;
42264: LD_ADDR_OWVAR 33
42268: PUSH
42269: LD_STRING 
42271: ST_TO_ADDR
// hc_name :=  ;
42272: LD_ADDR_OWVAR 26
42276: PUSH
42277: LD_STRING 
42279: ST_TO_ADDR
// un := CreateHuman ;
42280: LD_ADDR_VAR 0 2
42284: PUSH
42285: CALL_OW 44
42289: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
42290: LD_VAR 0 2
42294: PPUSH
42295: LD_INT 1
42297: PPUSH
42298: CALL_OW 51
// tmp := tmp ^ un ;
42302: LD_ADDR_VAR 0 3
42306: PUSH
42307: LD_VAR 0 3
42311: PUSH
42312: LD_VAR 0 2
42316: ADD
42317: ST_TO_ADDR
// end ;
42318: GO 42214
42320: POP
42321: POP
// repeat wait ( 0 0$1 ) ;
42322: LD_INT 35
42324: PPUSH
42325: CALL_OW 67
// for un in tmp do
42329: LD_ADDR_VAR 0 2
42333: PUSH
42334: LD_VAR 0 3
42338: PUSH
42339: FOR_IN
42340: IFFALSE 42414
// begin if IsDead ( un ) then
42342: LD_VAR 0 2
42346: PPUSH
42347: CALL_OW 301
42351: IFFALSE 42371
// begin tmp := tmp diff un ;
42353: LD_ADDR_VAR 0 3
42357: PUSH
42358: LD_VAR 0 3
42362: PUSH
42363: LD_VAR 0 2
42367: DIFF
42368: ST_TO_ADDR
// continue ;
42369: GO 42339
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
42371: LD_VAR 0 2
42375: PPUSH
42376: LD_INT 3
42378: PUSH
42379: LD_INT 22
42381: PUSH
42382: LD_INT 0
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PPUSH
42393: CALL_OW 69
42397: PPUSH
42398: LD_VAR 0 2
42402: PPUSH
42403: CALL_OW 74
42407: PPUSH
42408: CALL_OW 115
// end ;
42412: GO 42339
42414: POP
42415: POP
// until not tmp ;
42416: LD_VAR 0 3
42420: NOT
42421: IFFALSE 42322
// end ;
42423: PPOPN 3
42425: END
// every 0 0$1 trigger StreamModeActive and sTroll do
42426: LD_EXP 87
42430: PUSH
42431: LD_EXP 112
42435: AND
42436: IFFALSE 42490
42438: GO 42440
42440: DISABLE
// begin ToLua ( displayTroll(); ) ;
42441: LD_STRING displayTroll();
42443: PPUSH
42444: CALL_OW 559
// wait ( 3 3$00 ) ;
42448: LD_INT 6300
42450: PPUSH
42451: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42455: LD_STRING hideTroll();
42457: PPUSH
42458: CALL_OW 559
// wait ( 1 1$00 ) ;
42462: LD_INT 2100
42464: PPUSH
42465: CALL_OW 67
// ToLua ( displayTroll(); ) ;
42469: LD_STRING displayTroll();
42471: PPUSH
42472: CALL_OW 559
// wait ( 1 1$00 ) ;
42476: LD_INT 2100
42478: PPUSH
42479: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42483: LD_STRING hideTroll();
42485: PPUSH
42486: CALL_OW 559
// end ;
42490: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
42491: LD_EXP 87
42495: PUSH
42496: LD_EXP 113
42500: AND
42501: IFFALSE 42564
42503: GO 42505
42505: DISABLE
42506: LD_INT 0
42508: PPUSH
// begin p := 0 ;
42509: LD_ADDR_VAR 0 1
42513: PUSH
42514: LD_INT 0
42516: ST_TO_ADDR
// repeat game_speed := 1 ;
42517: LD_ADDR_OWVAR 65
42521: PUSH
42522: LD_INT 1
42524: ST_TO_ADDR
// wait ( 0 0$1 ) ;
42525: LD_INT 35
42527: PPUSH
42528: CALL_OW 67
// p := p + 1 ;
42532: LD_ADDR_VAR 0 1
42536: PUSH
42537: LD_VAR 0 1
42541: PUSH
42542: LD_INT 1
42544: PLUS
42545: ST_TO_ADDR
// until p >= 60 ;
42546: LD_VAR 0 1
42550: PUSH
42551: LD_INT 60
42553: GREATEREQUAL
42554: IFFALSE 42517
// game_speed := 4 ;
42556: LD_ADDR_OWVAR 65
42560: PUSH
42561: LD_INT 4
42563: ST_TO_ADDR
// end ;
42564: PPOPN 1
42566: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
42567: LD_EXP 87
42571: PUSH
42572: LD_EXP 114
42576: AND
42577: IFFALSE 42723
42579: GO 42581
42581: DISABLE
42582: LD_INT 0
42584: PPUSH
42585: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42586: LD_ADDR_VAR 0 1
42590: PUSH
42591: LD_INT 22
42593: PUSH
42594: LD_OWVAR 2
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: LD_INT 30
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: EMPTY
42613: LIST
42614: LIST
42615: PUSH
42616: LD_INT 30
42618: PUSH
42619: LD_INT 1
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: LIST
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: PPUSH
42635: CALL_OW 69
42639: ST_TO_ADDR
// if not depot then
42640: LD_VAR 0 1
42644: NOT
42645: IFFALSE 42649
// exit ;
42647: GO 42723
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
42649: LD_ADDR_VAR 0 2
42653: PUSH
42654: LD_VAR 0 1
42658: PUSH
42659: LD_INT 1
42661: PPUSH
42662: LD_VAR 0 1
42666: PPUSH
42667: CALL_OW 12
42671: ARRAY
42672: PPUSH
42673: CALL_OW 274
42677: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
42678: LD_VAR 0 2
42682: PPUSH
42683: LD_INT 1
42685: PPUSH
42686: LD_INT 0
42688: PPUSH
42689: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
42693: LD_VAR 0 2
42697: PPUSH
42698: LD_INT 2
42700: PPUSH
42701: LD_INT 0
42703: PPUSH
42704: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
42708: LD_VAR 0 2
42712: PPUSH
42713: LD_INT 3
42715: PPUSH
42716: LD_INT 0
42718: PPUSH
42719: CALL_OW 277
// end ;
42723: PPOPN 2
42725: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
42726: LD_EXP 87
42730: PUSH
42731: LD_EXP 115
42735: AND
42736: IFFALSE 42833
42738: GO 42740
42740: DISABLE
42741: LD_INT 0
42743: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
42744: LD_ADDR_VAR 0 1
42748: PUSH
42749: LD_INT 22
42751: PUSH
42752: LD_OWVAR 2
42756: PUSH
42757: EMPTY
42758: LIST
42759: LIST
42760: PUSH
42761: LD_INT 21
42763: PUSH
42764: LD_INT 1
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 3
42773: PUSH
42774: LD_INT 23
42776: PUSH
42777: LD_INT 0
42779: PUSH
42780: EMPTY
42781: LIST
42782: LIST
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: LIST
42792: PPUSH
42793: CALL_OW 69
42797: ST_TO_ADDR
// if not tmp then
42798: LD_VAR 0 1
42802: NOT
42803: IFFALSE 42807
// exit ;
42805: GO 42833
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
42807: LD_VAR 0 1
42811: PUSH
42812: LD_INT 1
42814: PPUSH
42815: LD_VAR 0 1
42819: PPUSH
42820: CALL_OW 12
42824: ARRAY
42825: PPUSH
42826: LD_INT 200
42828: PPUSH
42829: CALL_OW 234
// end ;
42833: PPOPN 1
42835: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
42836: LD_EXP 87
42840: PUSH
42841: LD_EXP 116
42845: AND
42846: IFFALSE 42925
42848: GO 42850
42850: DISABLE
42851: LD_INT 0
42853: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
42854: LD_ADDR_VAR 0 1
42858: PUSH
42859: LD_INT 22
42861: PUSH
42862: LD_OWVAR 2
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 21
42873: PUSH
42874: LD_INT 2
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: EMPTY
42882: LIST
42883: LIST
42884: PPUSH
42885: CALL_OW 69
42889: ST_TO_ADDR
// if not tmp then
42890: LD_VAR 0 1
42894: NOT
42895: IFFALSE 42899
// exit ;
42897: GO 42925
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
42899: LD_VAR 0 1
42903: PUSH
42904: LD_INT 1
42906: PPUSH
42907: LD_VAR 0 1
42911: PPUSH
42912: CALL_OW 12
42916: ARRAY
42917: PPUSH
42918: LD_INT 60
42920: PPUSH
42921: CALL_OW 234
// end ;
42925: PPOPN 1
42927: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
42928: LD_EXP 87
42932: PUSH
42933: LD_EXP 117
42937: AND
42938: IFFALSE 43037
42940: GO 42942
42942: DISABLE
42943: LD_INT 0
42945: PPUSH
42946: PPUSH
// begin enable ;
42947: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
42948: LD_ADDR_VAR 0 1
42952: PUSH
42953: LD_INT 22
42955: PUSH
42956: LD_OWVAR 2
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 61
42967: PUSH
42968: EMPTY
42969: LIST
42970: PUSH
42971: LD_INT 33
42973: PUSH
42974: LD_INT 2
42976: PUSH
42977: EMPTY
42978: LIST
42979: LIST
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: LIST
42985: PPUSH
42986: CALL_OW 69
42990: ST_TO_ADDR
// if not tmp then
42991: LD_VAR 0 1
42995: NOT
42996: IFFALSE 43000
// exit ;
42998: GO 43037
// for i in tmp do
43000: LD_ADDR_VAR 0 2
43004: PUSH
43005: LD_VAR 0 1
43009: PUSH
43010: FOR_IN
43011: IFFALSE 43035
// if IsControledBy ( i ) then
43013: LD_VAR 0 2
43017: PPUSH
43018: CALL_OW 312
43022: IFFALSE 43033
// ComUnlink ( i ) ;
43024: LD_VAR 0 2
43028: PPUSH
43029: CALL_OW 136
43033: GO 43010
43035: POP
43036: POP
// end ;
43037: PPOPN 2
43039: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
43040: LD_EXP 87
43044: PUSH
43045: LD_EXP 118
43049: AND
43050: IFFALSE 43190
43052: GO 43054
43054: DISABLE
43055: LD_INT 0
43057: PPUSH
43058: PPUSH
// begin ToLua ( displayPowell(); ) ;
43059: LD_STRING displayPowell();
43061: PPUSH
43062: CALL_OW 559
// uc_side := 0 ;
43066: LD_ADDR_OWVAR 20
43070: PUSH
43071: LD_INT 0
43073: ST_TO_ADDR
// uc_nation := 2 ;
43074: LD_ADDR_OWVAR 21
43078: PUSH
43079: LD_INT 2
43081: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
43082: LD_ADDR_OWVAR 37
43086: PUSH
43087: LD_INT 14
43089: ST_TO_ADDR
// vc_engine := engine_siberite ;
43090: LD_ADDR_OWVAR 39
43094: PUSH
43095: LD_INT 3
43097: ST_TO_ADDR
// vc_control := control_apeman ;
43098: LD_ADDR_OWVAR 38
43102: PUSH
43103: LD_INT 5
43105: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
43106: LD_ADDR_OWVAR 40
43110: PUSH
43111: LD_INT 29
43113: ST_TO_ADDR
// un := CreateVehicle ;
43114: LD_ADDR_VAR 0 2
43118: PUSH
43119: CALL_OW 45
43123: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43124: LD_VAR 0 2
43128: PPUSH
43129: LD_INT 1
43131: PPUSH
43132: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43136: LD_INT 35
43138: PPUSH
43139: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43143: LD_VAR 0 2
43147: PPUSH
43148: LD_INT 22
43150: PUSH
43151: LD_OWVAR 2
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PPUSH
43160: CALL_OW 69
43164: PPUSH
43165: LD_VAR 0 2
43169: PPUSH
43170: CALL_OW 74
43174: PPUSH
43175: CALL_OW 115
// until IsDead ( un ) ;
43179: LD_VAR 0 2
43183: PPUSH
43184: CALL_OW 301
43188: IFFALSE 43136
// end ;
43190: PPOPN 2
43192: END
// every 0 0$1 trigger StreamModeActive and sStu do
43193: LD_EXP 87
43197: PUSH
43198: LD_EXP 126
43202: AND
43203: IFFALSE 43219
43205: GO 43207
43207: DISABLE
// begin ToLua ( displayStucuk(); ) ;
43208: LD_STRING displayStucuk();
43210: PPUSH
43211: CALL_OW 559
// ResetFog ;
43215: CALL_OW 335
// end ;
43219: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
43220: LD_EXP 87
43224: PUSH
43225: LD_EXP 119
43229: AND
43230: IFFALSE 43371
43232: GO 43234
43234: DISABLE
43235: LD_INT 0
43237: PPUSH
43238: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43239: LD_ADDR_VAR 0 2
43243: PUSH
43244: LD_INT 22
43246: PUSH
43247: LD_OWVAR 2
43251: PUSH
43252: EMPTY
43253: LIST
43254: LIST
43255: PUSH
43256: LD_INT 21
43258: PUSH
43259: LD_INT 1
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: EMPTY
43267: LIST
43268: LIST
43269: PPUSH
43270: CALL_OW 69
43274: ST_TO_ADDR
// if not tmp then
43275: LD_VAR 0 2
43279: NOT
43280: IFFALSE 43284
// exit ;
43282: GO 43371
// un := tmp [ rand ( 1 , tmp ) ] ;
43284: LD_ADDR_VAR 0 1
43288: PUSH
43289: LD_VAR 0 2
43293: PUSH
43294: LD_INT 1
43296: PPUSH
43297: LD_VAR 0 2
43301: PPUSH
43302: CALL_OW 12
43306: ARRAY
43307: ST_TO_ADDR
// SetSide ( un , 0 ) ;
43308: LD_VAR 0 1
43312: PPUSH
43313: LD_INT 0
43315: PPUSH
43316: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
43320: LD_VAR 0 1
43324: PPUSH
43325: LD_OWVAR 3
43329: PUSH
43330: LD_VAR 0 1
43334: DIFF
43335: PPUSH
43336: LD_VAR 0 1
43340: PPUSH
43341: CALL_OW 74
43345: PPUSH
43346: CALL_OW 115
// wait ( 0 0$20 ) ;
43350: LD_INT 700
43352: PPUSH
43353: CALL_OW 67
// SetSide ( un , your_side ) ;
43357: LD_VAR 0 1
43361: PPUSH
43362: LD_OWVAR 2
43366: PPUSH
43367: CALL_OW 235
// end ;
43371: PPOPN 2
43373: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
43374: LD_EXP 87
43378: PUSH
43379: LD_EXP 120
43383: AND
43384: IFFALSE 43490
43386: GO 43388
43388: DISABLE
43389: LD_INT 0
43391: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43392: LD_ADDR_VAR 0 1
43396: PUSH
43397: LD_INT 22
43399: PUSH
43400: LD_OWVAR 2
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 2
43411: PUSH
43412: LD_INT 30
43414: PUSH
43415: LD_INT 0
43417: PUSH
43418: EMPTY
43419: LIST
43420: LIST
43421: PUSH
43422: LD_INT 30
43424: PUSH
43425: LD_INT 1
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: EMPTY
43433: LIST
43434: LIST
43435: LIST
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PPUSH
43441: CALL_OW 69
43445: ST_TO_ADDR
// if not depot then
43446: LD_VAR 0 1
43450: NOT
43451: IFFALSE 43455
// exit ;
43453: GO 43490
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
43455: LD_VAR 0 1
43459: PUSH
43460: LD_INT 1
43462: ARRAY
43463: PPUSH
43464: CALL_OW 250
43468: PPUSH
43469: LD_VAR 0 1
43473: PUSH
43474: LD_INT 1
43476: ARRAY
43477: PPUSH
43478: CALL_OW 251
43482: PPUSH
43483: LD_INT 70
43485: PPUSH
43486: CALL_OW 495
// end ;
43490: PPOPN 1
43492: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
43493: LD_EXP 87
43497: PUSH
43498: LD_EXP 121
43502: AND
43503: IFFALSE 43714
43505: GO 43507
43507: DISABLE
43508: LD_INT 0
43510: PPUSH
43511: PPUSH
43512: PPUSH
43513: PPUSH
43514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43515: LD_ADDR_VAR 0 5
43519: PUSH
43520: LD_INT 22
43522: PUSH
43523: LD_OWVAR 2
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 21
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PPUSH
43546: CALL_OW 69
43550: ST_TO_ADDR
// if not tmp then
43551: LD_VAR 0 5
43555: NOT
43556: IFFALSE 43560
// exit ;
43558: GO 43714
// for i in tmp do
43560: LD_ADDR_VAR 0 1
43564: PUSH
43565: LD_VAR 0 5
43569: PUSH
43570: FOR_IN
43571: IFFALSE 43712
// begin d := rand ( 0 , 5 ) ;
43573: LD_ADDR_VAR 0 4
43577: PUSH
43578: LD_INT 0
43580: PPUSH
43581: LD_INT 5
43583: PPUSH
43584: CALL_OW 12
43588: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
43589: LD_ADDR_VAR 0 2
43593: PUSH
43594: LD_VAR 0 1
43598: PPUSH
43599: CALL_OW 250
43603: PPUSH
43604: LD_VAR 0 4
43608: PPUSH
43609: LD_INT 3
43611: PPUSH
43612: LD_INT 12
43614: PPUSH
43615: CALL_OW 12
43619: PPUSH
43620: CALL_OW 272
43624: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
43625: LD_ADDR_VAR 0 3
43629: PUSH
43630: LD_VAR 0 1
43634: PPUSH
43635: CALL_OW 251
43639: PPUSH
43640: LD_VAR 0 4
43644: PPUSH
43645: LD_INT 3
43647: PPUSH
43648: LD_INT 12
43650: PPUSH
43651: CALL_OW 12
43655: PPUSH
43656: CALL_OW 273
43660: ST_TO_ADDR
// if ValidHex ( x , y ) then
43661: LD_VAR 0 2
43665: PPUSH
43666: LD_VAR 0 3
43670: PPUSH
43671: CALL_OW 488
43675: IFFALSE 43710
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
43677: LD_VAR 0 1
43681: PPUSH
43682: LD_VAR 0 2
43686: PPUSH
43687: LD_VAR 0 3
43691: PPUSH
43692: LD_INT 3
43694: PPUSH
43695: LD_INT 6
43697: PPUSH
43698: CALL_OW 12
43702: PPUSH
43703: LD_INT 1
43705: PPUSH
43706: CALL_OW 483
// end ;
43710: GO 43570
43712: POP
43713: POP
// end ;
43714: PPOPN 5
43716: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
43717: LD_EXP 87
43721: PUSH
43722: LD_EXP 122
43726: AND
43727: IFFALSE 43821
43729: GO 43731
43731: DISABLE
43732: LD_INT 0
43734: PPUSH
43735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
43736: LD_ADDR_VAR 0 2
43740: PUSH
43741: LD_INT 22
43743: PUSH
43744: LD_OWVAR 2
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 32
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 21
43765: PUSH
43766: LD_INT 2
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: EMPTY
43774: LIST
43775: LIST
43776: LIST
43777: PPUSH
43778: CALL_OW 69
43782: ST_TO_ADDR
// if not tmp then
43783: LD_VAR 0 2
43787: NOT
43788: IFFALSE 43792
// exit ;
43790: GO 43821
// for i in tmp do
43792: LD_ADDR_VAR 0 1
43796: PUSH
43797: LD_VAR 0 2
43801: PUSH
43802: FOR_IN
43803: IFFALSE 43819
// SetFuel ( i , 0 ) ;
43805: LD_VAR 0 1
43809: PPUSH
43810: LD_INT 0
43812: PPUSH
43813: CALL_OW 240
43817: GO 43802
43819: POP
43820: POP
// end ;
43821: PPOPN 2
43823: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
43824: LD_EXP 87
43828: PUSH
43829: LD_EXP 123
43833: AND
43834: IFFALSE 43900
43836: GO 43838
43838: DISABLE
43839: LD_INT 0
43841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
43842: LD_ADDR_VAR 0 1
43846: PUSH
43847: LD_INT 22
43849: PUSH
43850: LD_OWVAR 2
43854: PUSH
43855: EMPTY
43856: LIST
43857: LIST
43858: PUSH
43859: LD_INT 30
43861: PUSH
43862: LD_INT 29
43864: PUSH
43865: EMPTY
43866: LIST
43867: LIST
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PPUSH
43873: CALL_OW 69
43877: ST_TO_ADDR
// if not tmp then
43878: LD_VAR 0 1
43882: NOT
43883: IFFALSE 43887
// exit ;
43885: GO 43900
// DestroyUnit ( tmp [ 1 ] ) ;
43887: LD_VAR 0 1
43891: PUSH
43892: LD_INT 1
43894: ARRAY
43895: PPUSH
43896: CALL_OW 65
// end ;
43900: PPOPN 1
43902: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
43903: LD_EXP 87
43907: PUSH
43908: LD_EXP 125
43912: AND
43913: IFFALSE 44042
43915: GO 43917
43917: DISABLE
43918: LD_INT 0
43920: PPUSH
// begin uc_side := 0 ;
43921: LD_ADDR_OWVAR 20
43925: PUSH
43926: LD_INT 0
43928: ST_TO_ADDR
// uc_nation := nation_arabian ;
43929: LD_ADDR_OWVAR 21
43933: PUSH
43934: LD_INT 2
43936: ST_TO_ADDR
// hc_gallery :=  ;
43937: LD_ADDR_OWVAR 33
43941: PUSH
43942: LD_STRING 
43944: ST_TO_ADDR
// hc_name :=  ;
43945: LD_ADDR_OWVAR 26
43949: PUSH
43950: LD_STRING 
43952: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
43953: LD_INT 1
43955: PPUSH
43956: LD_INT 11
43958: PPUSH
43959: LD_INT 10
43961: PPUSH
43962: CALL_OW 380
// un := CreateHuman ;
43966: LD_ADDR_VAR 0 1
43970: PUSH
43971: CALL_OW 44
43975: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43976: LD_VAR 0 1
43980: PPUSH
43981: LD_INT 1
43983: PPUSH
43984: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43988: LD_INT 35
43990: PPUSH
43991: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43995: LD_VAR 0 1
43999: PPUSH
44000: LD_INT 22
44002: PUSH
44003: LD_OWVAR 2
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PPUSH
44012: CALL_OW 69
44016: PPUSH
44017: LD_VAR 0 1
44021: PPUSH
44022: CALL_OW 74
44026: PPUSH
44027: CALL_OW 115
// until IsDead ( un ) ;
44031: LD_VAR 0 1
44035: PPUSH
44036: CALL_OW 301
44040: IFFALSE 43988
// end ;
44042: PPOPN 1
44044: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
44045: LD_EXP 87
44049: PUSH
44050: LD_EXP 127
44054: AND
44055: IFFALSE 44067
44057: GO 44059
44059: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
44060: LD_STRING earthquake(getX(game), 0, 32)
44062: PPUSH
44063: CALL_OW 559
44067: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
44068: LD_EXP 87
44072: PUSH
44073: LD_EXP 128
44077: AND
44078: IFFALSE 44169
44080: GO 44082
44082: DISABLE
44083: LD_INT 0
44085: PPUSH
// begin enable ;
44086: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
44087: LD_ADDR_VAR 0 1
44091: PUSH
44092: LD_INT 22
44094: PUSH
44095: LD_OWVAR 2
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 21
44106: PUSH
44107: LD_INT 2
44109: PUSH
44110: EMPTY
44111: LIST
44112: LIST
44113: PUSH
44114: LD_INT 33
44116: PUSH
44117: LD_INT 3
44119: PUSH
44120: EMPTY
44121: LIST
44122: LIST
44123: PUSH
44124: EMPTY
44125: LIST
44126: LIST
44127: LIST
44128: PPUSH
44129: CALL_OW 69
44133: ST_TO_ADDR
// if not tmp then
44134: LD_VAR 0 1
44138: NOT
44139: IFFALSE 44143
// exit ;
44141: GO 44169
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
44143: LD_VAR 0 1
44147: PUSH
44148: LD_INT 1
44150: PPUSH
44151: LD_VAR 0 1
44155: PPUSH
44156: CALL_OW 12
44160: ARRAY
44161: PPUSH
44162: LD_INT 1
44164: PPUSH
44165: CALL_OW 234
// end ;
44169: PPOPN 1
44171: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
44172: LD_EXP 87
44176: PUSH
44177: LD_EXP 129
44181: AND
44182: IFFALSE 44323
44184: GO 44186
44186: DISABLE
44187: LD_INT 0
44189: PPUSH
44190: PPUSH
44191: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44192: LD_ADDR_VAR 0 3
44196: PUSH
44197: LD_INT 22
44199: PUSH
44200: LD_OWVAR 2
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 25
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PPUSH
44223: CALL_OW 69
44227: ST_TO_ADDR
// if not tmp then
44228: LD_VAR 0 3
44232: NOT
44233: IFFALSE 44237
// exit ;
44235: GO 44323
// un := tmp [ rand ( 1 , tmp ) ] ;
44237: LD_ADDR_VAR 0 2
44241: PUSH
44242: LD_VAR 0 3
44246: PUSH
44247: LD_INT 1
44249: PPUSH
44250: LD_VAR 0 3
44254: PPUSH
44255: CALL_OW 12
44259: ARRAY
44260: ST_TO_ADDR
// if Crawls ( un ) then
44261: LD_VAR 0 2
44265: PPUSH
44266: CALL_OW 318
44270: IFFALSE 44281
// ComWalk ( un ) ;
44272: LD_VAR 0 2
44276: PPUSH
44277: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
44281: LD_VAR 0 2
44285: PPUSH
44286: LD_INT 9
44288: PPUSH
44289: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
44293: LD_INT 28
44295: PPUSH
44296: LD_OWVAR 2
44300: PPUSH
44301: LD_INT 2
44303: PPUSH
44304: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
44308: LD_INT 29
44310: PPUSH
44311: LD_OWVAR 2
44315: PPUSH
44316: LD_INT 2
44318: PPUSH
44319: CALL_OW 322
// end ;
44323: PPOPN 3
44325: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
44326: LD_EXP 87
44330: PUSH
44331: LD_EXP 130
44335: AND
44336: IFFALSE 44447
44338: GO 44340
44340: DISABLE
44341: LD_INT 0
44343: PPUSH
44344: PPUSH
44345: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44346: LD_ADDR_VAR 0 3
44350: PUSH
44351: LD_INT 22
44353: PUSH
44354: LD_OWVAR 2
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 25
44365: PUSH
44366: LD_INT 1
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PPUSH
44377: CALL_OW 69
44381: ST_TO_ADDR
// if not tmp then
44382: LD_VAR 0 3
44386: NOT
44387: IFFALSE 44391
// exit ;
44389: GO 44447
// un := tmp [ rand ( 1 , tmp ) ] ;
44391: LD_ADDR_VAR 0 2
44395: PUSH
44396: LD_VAR 0 3
44400: PUSH
44401: LD_INT 1
44403: PPUSH
44404: LD_VAR 0 3
44408: PPUSH
44409: CALL_OW 12
44413: ARRAY
44414: ST_TO_ADDR
// if Crawls ( un ) then
44415: LD_VAR 0 2
44419: PPUSH
44420: CALL_OW 318
44424: IFFALSE 44435
// ComWalk ( un ) ;
44426: LD_VAR 0 2
44430: PPUSH
44431: CALL_OW 138
// SetClass ( un , class_mortar ) ;
44435: LD_VAR 0 2
44439: PPUSH
44440: LD_INT 8
44442: PPUSH
44443: CALL_OW 336
// end ;
44447: PPOPN 3
44449: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
44450: LD_EXP 87
44454: PUSH
44455: LD_EXP 131
44459: AND
44460: IFFALSE 44604
44462: GO 44464
44464: DISABLE
44465: LD_INT 0
44467: PPUSH
44468: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
44469: LD_ADDR_VAR 0 2
44473: PUSH
44474: LD_INT 22
44476: PUSH
44477: LD_OWVAR 2
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 21
44488: PUSH
44489: LD_INT 2
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 2
44498: PUSH
44499: LD_INT 34
44501: PUSH
44502: LD_INT 12
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 34
44511: PUSH
44512: LD_INT 51
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 34
44521: PUSH
44522: LD_INT 32
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: LIST
44533: LIST
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: LIST
44539: PPUSH
44540: CALL_OW 69
44544: ST_TO_ADDR
// if not tmp then
44545: LD_VAR 0 2
44549: NOT
44550: IFFALSE 44554
// exit ;
44552: GO 44604
// for i in tmp do
44554: LD_ADDR_VAR 0 1
44558: PUSH
44559: LD_VAR 0 2
44563: PUSH
44564: FOR_IN
44565: IFFALSE 44602
// if GetCargo ( i , mat_artifact ) = 0 then
44567: LD_VAR 0 1
44571: PPUSH
44572: LD_INT 4
44574: PPUSH
44575: CALL_OW 289
44579: PUSH
44580: LD_INT 0
44582: EQUAL
44583: IFFALSE 44600
// SetCargo ( i , mat_siberit , 100 ) ;
44585: LD_VAR 0 1
44589: PPUSH
44590: LD_INT 3
44592: PPUSH
44593: LD_INT 100
44595: PPUSH
44596: CALL_OW 290
44600: GO 44564
44602: POP
44603: POP
// end ;
44604: PPOPN 2
44606: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
44607: LD_EXP 87
44611: PUSH
44612: LD_EXP 132
44616: AND
44617: IFFALSE 44800
44619: GO 44621
44621: DISABLE
44622: LD_INT 0
44624: PPUSH
44625: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
44626: LD_ADDR_VAR 0 2
44630: PUSH
44631: LD_INT 22
44633: PUSH
44634: LD_OWVAR 2
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PPUSH
44643: CALL_OW 69
44647: ST_TO_ADDR
// if not tmp then
44648: LD_VAR 0 2
44652: NOT
44653: IFFALSE 44657
// exit ;
44655: GO 44800
// for i := 1 to 2 do
44657: LD_ADDR_VAR 0 1
44661: PUSH
44662: DOUBLE
44663: LD_INT 1
44665: DEC
44666: ST_TO_ADDR
44667: LD_INT 2
44669: PUSH
44670: FOR_TO
44671: IFFALSE 44798
// begin uc_side := your_side ;
44673: LD_ADDR_OWVAR 20
44677: PUSH
44678: LD_OWVAR 2
44682: ST_TO_ADDR
// uc_nation := nation_american ;
44683: LD_ADDR_OWVAR 21
44687: PUSH
44688: LD_INT 1
44690: ST_TO_ADDR
// vc_chassis := us_morphling ;
44691: LD_ADDR_OWVAR 37
44695: PUSH
44696: LD_INT 5
44698: ST_TO_ADDR
// vc_engine := engine_siberite ;
44699: LD_ADDR_OWVAR 39
44703: PUSH
44704: LD_INT 3
44706: ST_TO_ADDR
// vc_control := control_computer ;
44707: LD_ADDR_OWVAR 38
44711: PUSH
44712: LD_INT 3
44714: ST_TO_ADDR
// vc_weapon := us_double_laser ;
44715: LD_ADDR_OWVAR 40
44719: PUSH
44720: LD_INT 10
44722: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
44723: LD_VAR 0 2
44727: PUSH
44728: LD_INT 1
44730: ARRAY
44731: PPUSH
44732: CALL_OW 310
44736: NOT
44737: IFFALSE 44784
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
44739: CALL_OW 45
44743: PPUSH
44744: LD_VAR 0 2
44748: PUSH
44749: LD_INT 1
44751: ARRAY
44752: PPUSH
44753: CALL_OW 250
44757: PPUSH
44758: LD_VAR 0 2
44762: PUSH
44763: LD_INT 1
44765: ARRAY
44766: PPUSH
44767: CALL_OW 251
44771: PPUSH
44772: LD_INT 12
44774: PPUSH
44775: LD_INT 1
44777: PPUSH
44778: CALL_OW 50
44782: GO 44796
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
44784: CALL_OW 45
44788: PPUSH
44789: LD_INT 1
44791: PPUSH
44792: CALL_OW 51
// end ;
44796: GO 44670
44798: POP
44799: POP
// end ;
44800: PPOPN 2
44802: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
44803: LD_EXP 87
44807: PUSH
44808: LD_EXP 133
44812: AND
44813: IFFALSE 45035
44815: GO 44817
44817: DISABLE
44818: LD_INT 0
44820: PPUSH
44821: PPUSH
44822: PPUSH
44823: PPUSH
44824: PPUSH
44825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
44826: LD_ADDR_VAR 0 6
44830: PUSH
44831: LD_INT 22
44833: PUSH
44834: LD_OWVAR 2
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 21
44845: PUSH
44846: LD_INT 1
44848: PUSH
44849: EMPTY
44850: LIST
44851: LIST
44852: PUSH
44853: LD_INT 3
44855: PUSH
44856: LD_INT 23
44858: PUSH
44859: LD_INT 0
44861: PUSH
44862: EMPTY
44863: LIST
44864: LIST
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: EMPTY
44871: LIST
44872: LIST
44873: LIST
44874: PPUSH
44875: CALL_OW 69
44879: ST_TO_ADDR
// if not tmp then
44880: LD_VAR 0 6
44884: NOT
44885: IFFALSE 44889
// exit ;
44887: GO 45035
// s1 := rand ( 1 , 4 ) ;
44889: LD_ADDR_VAR 0 2
44893: PUSH
44894: LD_INT 1
44896: PPUSH
44897: LD_INT 4
44899: PPUSH
44900: CALL_OW 12
44904: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
44905: LD_ADDR_VAR 0 4
44909: PUSH
44910: LD_VAR 0 6
44914: PUSH
44915: LD_INT 1
44917: ARRAY
44918: PPUSH
44919: LD_VAR 0 2
44923: PPUSH
44924: CALL_OW 259
44928: ST_TO_ADDR
// if s1 = 1 then
44929: LD_VAR 0 2
44933: PUSH
44934: LD_INT 1
44936: EQUAL
44937: IFFALSE 44957
// s2 := rand ( 2 , 4 ) else
44939: LD_ADDR_VAR 0 3
44943: PUSH
44944: LD_INT 2
44946: PPUSH
44947: LD_INT 4
44949: PPUSH
44950: CALL_OW 12
44954: ST_TO_ADDR
44955: GO 44965
// s2 := 1 ;
44957: LD_ADDR_VAR 0 3
44961: PUSH
44962: LD_INT 1
44964: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
44965: LD_ADDR_VAR 0 5
44969: PUSH
44970: LD_VAR 0 6
44974: PUSH
44975: LD_INT 1
44977: ARRAY
44978: PPUSH
44979: LD_VAR 0 3
44983: PPUSH
44984: CALL_OW 259
44988: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
44989: LD_VAR 0 6
44993: PUSH
44994: LD_INT 1
44996: ARRAY
44997: PPUSH
44998: LD_VAR 0 2
45002: PPUSH
45003: LD_VAR 0 5
45007: PPUSH
45008: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
45012: LD_VAR 0 6
45016: PUSH
45017: LD_INT 1
45019: ARRAY
45020: PPUSH
45021: LD_VAR 0 3
45025: PPUSH
45026: LD_VAR 0 4
45030: PPUSH
45031: CALL_OW 237
// end ;
45035: PPOPN 6
45037: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
45038: LD_EXP 87
45042: PUSH
45043: LD_EXP 134
45047: AND
45048: IFFALSE 45127
45050: GO 45052
45052: DISABLE
45053: LD_INT 0
45055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
45056: LD_ADDR_VAR 0 1
45060: PUSH
45061: LD_INT 22
45063: PUSH
45064: LD_OWVAR 2
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: PUSH
45073: LD_INT 30
45075: PUSH
45076: LD_INT 3
45078: PUSH
45079: EMPTY
45080: LIST
45081: LIST
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PPUSH
45087: CALL_OW 69
45091: ST_TO_ADDR
// if not tmp then
45092: LD_VAR 0 1
45096: NOT
45097: IFFALSE 45101
// exit ;
45099: GO 45127
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
45101: LD_VAR 0 1
45105: PUSH
45106: LD_INT 1
45108: PPUSH
45109: LD_VAR 0 1
45113: PPUSH
45114: CALL_OW 12
45118: ARRAY
45119: PPUSH
45120: LD_INT 1
45122: PPUSH
45123: CALL_OW 234
// end ;
45127: PPOPN 1
45129: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
45130: LD_EXP 87
45134: PUSH
45135: LD_EXP 135
45139: AND
45140: IFFALSE 45252
45142: GO 45144
45144: DISABLE
45145: LD_INT 0
45147: PPUSH
45148: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
45149: LD_ADDR_VAR 0 2
45153: PUSH
45154: LD_INT 22
45156: PUSH
45157: LD_OWVAR 2
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: LD_INT 2
45168: PUSH
45169: LD_INT 30
45171: PUSH
45172: LD_INT 27
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 30
45181: PUSH
45182: LD_INT 26
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 30
45191: PUSH
45192: LD_INT 28
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PPUSH
45209: CALL_OW 69
45213: ST_TO_ADDR
// if not tmp then
45214: LD_VAR 0 2
45218: NOT
45219: IFFALSE 45223
// exit ;
45221: GO 45252
// for i in tmp do
45223: LD_ADDR_VAR 0 1
45227: PUSH
45228: LD_VAR 0 2
45232: PUSH
45233: FOR_IN
45234: IFFALSE 45250
// SetLives ( i , 1 ) ;
45236: LD_VAR 0 1
45240: PPUSH
45241: LD_INT 1
45243: PPUSH
45244: CALL_OW 234
45248: GO 45233
45250: POP
45251: POP
// end ;
45252: PPOPN 2
45254: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
45255: LD_EXP 87
45259: PUSH
45260: LD_EXP 136
45264: AND
45265: IFFALSE 45552
45267: GO 45269
45269: DISABLE
45270: LD_INT 0
45272: PPUSH
45273: PPUSH
45274: PPUSH
// begin i := rand ( 1 , 7 ) ;
45275: LD_ADDR_VAR 0 1
45279: PUSH
45280: LD_INT 1
45282: PPUSH
45283: LD_INT 7
45285: PPUSH
45286: CALL_OW 12
45290: ST_TO_ADDR
// case i of 1 :
45291: LD_VAR 0 1
45295: PUSH
45296: LD_INT 1
45298: DOUBLE
45299: EQUAL
45300: IFTRUE 45304
45302: GO 45314
45304: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
45305: LD_STRING earthquake(getX(game), 0, 32)
45307: PPUSH
45308: CALL_OW 559
45312: GO 45552
45314: LD_INT 2
45316: DOUBLE
45317: EQUAL
45318: IFTRUE 45322
45320: GO 45336
45322: POP
// begin ToLua ( displayStucuk(); ) ;
45323: LD_STRING displayStucuk();
45325: PPUSH
45326: CALL_OW 559
// ResetFog ;
45330: CALL_OW 335
// end ; 3 :
45334: GO 45552
45336: LD_INT 3
45338: DOUBLE
45339: EQUAL
45340: IFTRUE 45344
45342: GO 45448
45344: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
45345: LD_ADDR_VAR 0 2
45349: PUSH
45350: LD_INT 22
45352: PUSH
45353: LD_OWVAR 2
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 25
45364: PUSH
45365: LD_INT 1
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: EMPTY
45373: LIST
45374: LIST
45375: PPUSH
45376: CALL_OW 69
45380: ST_TO_ADDR
// if not tmp then
45381: LD_VAR 0 2
45385: NOT
45386: IFFALSE 45390
// exit ;
45388: GO 45552
// un := tmp [ rand ( 1 , tmp ) ] ;
45390: LD_ADDR_VAR 0 3
45394: PUSH
45395: LD_VAR 0 2
45399: PUSH
45400: LD_INT 1
45402: PPUSH
45403: LD_VAR 0 2
45407: PPUSH
45408: CALL_OW 12
45412: ARRAY
45413: ST_TO_ADDR
// if Crawls ( un ) then
45414: LD_VAR 0 3
45418: PPUSH
45419: CALL_OW 318
45423: IFFALSE 45434
// ComWalk ( un ) ;
45425: LD_VAR 0 3
45429: PPUSH
45430: CALL_OW 138
// SetClass ( un , class_mortar ) ;
45434: LD_VAR 0 3
45438: PPUSH
45439: LD_INT 8
45441: PPUSH
45442: CALL_OW 336
// end ; 4 :
45446: GO 45552
45448: LD_INT 4
45450: DOUBLE
45451: EQUAL
45452: IFTRUE 45456
45454: GO 45530
45456: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
45457: LD_ADDR_VAR 0 2
45461: PUSH
45462: LD_INT 22
45464: PUSH
45465: LD_OWVAR 2
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 30
45476: PUSH
45477: LD_INT 29
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PPUSH
45488: CALL_OW 69
45492: ST_TO_ADDR
// if not tmp then
45493: LD_VAR 0 2
45497: NOT
45498: IFFALSE 45502
// exit ;
45500: GO 45552
// CenterNowOnUnits ( tmp [ 1 ] ) ;
45502: LD_VAR 0 2
45506: PUSH
45507: LD_INT 1
45509: ARRAY
45510: PPUSH
45511: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
45515: LD_VAR 0 2
45519: PUSH
45520: LD_INT 1
45522: ARRAY
45523: PPUSH
45524: CALL_OW 65
// end ; 5 .. 7 :
45528: GO 45552
45530: LD_INT 5
45532: DOUBLE
45533: GREATEREQUAL
45534: IFFALSE 45542
45536: LD_INT 7
45538: DOUBLE
45539: LESSEQUAL
45540: IFTRUE 45544
45542: GO 45551
45544: POP
// StreamSibBomb ; end ;
45545: CALL 41789 0 0
45549: GO 45552
45551: POP
// end ;
45552: PPOPN 3
45554: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
45555: LD_EXP 87
45559: PUSH
45560: LD_EXP 137
45564: AND
45565: IFFALSE 45721
45567: GO 45569
45569: DISABLE
45570: LD_INT 0
45572: PPUSH
45573: PPUSH
45574: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
45575: LD_ADDR_VAR 0 2
45579: PUSH
45580: LD_INT 81
45582: PUSH
45583: LD_OWVAR 2
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 2
45594: PUSH
45595: LD_INT 21
45597: PUSH
45598: LD_INT 1
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 21
45607: PUSH
45608: LD_INT 2
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: EMPTY
45616: LIST
45617: LIST
45618: LIST
45619: PUSH
45620: EMPTY
45621: LIST
45622: LIST
45623: PPUSH
45624: CALL_OW 69
45628: ST_TO_ADDR
// if not tmp then
45629: LD_VAR 0 2
45633: NOT
45634: IFFALSE 45638
// exit ;
45636: GO 45721
// p := 0 ;
45638: LD_ADDR_VAR 0 3
45642: PUSH
45643: LD_INT 0
45645: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
45646: LD_INT 35
45648: PPUSH
45649: CALL_OW 67
// p := p + 1 ;
45653: LD_ADDR_VAR 0 3
45657: PUSH
45658: LD_VAR 0 3
45662: PUSH
45663: LD_INT 1
45665: PLUS
45666: ST_TO_ADDR
// for i in tmp do
45667: LD_ADDR_VAR 0 1
45671: PUSH
45672: LD_VAR 0 2
45676: PUSH
45677: FOR_IN
45678: IFFALSE 45709
// if GetLives ( i ) < 1000 then
45680: LD_VAR 0 1
45684: PPUSH
45685: CALL_OW 256
45689: PUSH
45690: LD_INT 1000
45692: LESS
45693: IFFALSE 45707
// SetLives ( i , 1000 ) ;
45695: LD_VAR 0 1
45699: PPUSH
45700: LD_INT 1000
45702: PPUSH
45703: CALL_OW 234
45707: GO 45677
45709: POP
45710: POP
// until p > 20 ;
45711: LD_VAR 0 3
45715: PUSH
45716: LD_INT 20
45718: GREATER
45719: IFFALSE 45646
// end ;
45721: PPOPN 3
45723: END
// every 0 0$1 trigger StreamModeActive and sTime do
45724: LD_EXP 87
45728: PUSH
45729: LD_EXP 138
45733: AND
45734: IFFALSE 45769
45736: GO 45738
45738: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
45739: LD_INT 28
45741: PPUSH
45742: LD_OWVAR 2
45746: PPUSH
45747: LD_INT 2
45749: PPUSH
45750: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
45754: LD_INT 30
45756: PPUSH
45757: LD_OWVAR 2
45761: PPUSH
45762: LD_INT 2
45764: PPUSH
45765: CALL_OW 322
// end ;
45769: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
45770: LD_EXP 87
45774: PUSH
45775: LD_EXP 139
45779: AND
45780: IFFALSE 45901
45782: GO 45784
45784: DISABLE
45785: LD_INT 0
45787: PPUSH
45788: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
45789: LD_ADDR_VAR 0 2
45793: PUSH
45794: LD_INT 22
45796: PUSH
45797: LD_OWVAR 2
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 21
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 3
45818: PUSH
45819: LD_INT 23
45821: PUSH
45822: LD_INT 0
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: EMPTY
45834: LIST
45835: LIST
45836: LIST
45837: PPUSH
45838: CALL_OW 69
45842: ST_TO_ADDR
// if not tmp then
45843: LD_VAR 0 2
45847: NOT
45848: IFFALSE 45852
// exit ;
45850: GO 45901
// for i in tmp do
45852: LD_ADDR_VAR 0 1
45856: PUSH
45857: LD_VAR 0 2
45861: PUSH
45862: FOR_IN
45863: IFFALSE 45899
// begin if Crawls ( i ) then
45865: LD_VAR 0 1
45869: PPUSH
45870: CALL_OW 318
45874: IFFALSE 45885
// ComWalk ( i ) ;
45876: LD_VAR 0 1
45880: PPUSH
45881: CALL_OW 138
// SetClass ( i , 2 ) ;
45885: LD_VAR 0 1
45889: PPUSH
45890: LD_INT 2
45892: PPUSH
45893: CALL_OW 336
// end ;
45897: GO 45862
45899: POP
45900: POP
// end ;
45901: PPOPN 2
45903: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
45904: LD_EXP 87
45908: PUSH
45909: LD_EXP 140
45913: AND
45914: IFFALSE 46202
45916: GO 45918
45918: DISABLE
45919: LD_INT 0
45921: PPUSH
45922: PPUSH
45923: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
45924: LD_OWVAR 2
45928: PPUSH
45929: LD_INT 9
45931: PPUSH
45932: LD_INT 1
45934: PPUSH
45935: LD_INT 1
45937: PPUSH
45938: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
45942: LD_INT 9
45944: PPUSH
45945: LD_OWVAR 2
45949: PPUSH
45950: CALL_OW 343
// uc_side := 9 ;
45954: LD_ADDR_OWVAR 20
45958: PUSH
45959: LD_INT 9
45961: ST_TO_ADDR
// uc_nation := 2 ;
45962: LD_ADDR_OWVAR 21
45966: PUSH
45967: LD_INT 2
45969: ST_TO_ADDR
// hc_name := Dark Warrior ;
45970: LD_ADDR_OWVAR 26
45974: PUSH
45975: LD_STRING Dark Warrior
45977: ST_TO_ADDR
// hc_gallery :=  ;
45978: LD_ADDR_OWVAR 33
45982: PUSH
45983: LD_STRING 
45985: ST_TO_ADDR
// hc_noskilllimit := true ;
45986: LD_ADDR_OWVAR 76
45990: PUSH
45991: LD_INT 1
45993: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
45994: LD_ADDR_OWVAR 31
45998: PUSH
45999: LD_INT 30
46001: PUSH
46002: LD_INT 30
46004: PUSH
46005: LD_INT 30
46007: PUSH
46008: LD_INT 30
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: ST_TO_ADDR
// un := CreateHuman ;
46017: LD_ADDR_VAR 0 3
46021: PUSH
46022: CALL_OW 44
46026: ST_TO_ADDR
// hc_noskilllimit := false ;
46027: LD_ADDR_OWVAR 76
46031: PUSH
46032: LD_INT 0
46034: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
46035: LD_VAR 0 3
46039: PPUSH
46040: LD_INT 1
46042: PPUSH
46043: CALL_OW 51
// ToLua ( playRanger() ) ;
46047: LD_STRING playRanger()
46049: PPUSH
46050: CALL_OW 559
// p := 0 ;
46054: LD_ADDR_VAR 0 2
46058: PUSH
46059: LD_INT 0
46061: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
46062: LD_INT 35
46064: PPUSH
46065: CALL_OW 67
// p := p + 1 ;
46069: LD_ADDR_VAR 0 2
46073: PUSH
46074: LD_VAR 0 2
46078: PUSH
46079: LD_INT 1
46081: PLUS
46082: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
46083: LD_VAR 0 3
46087: PPUSH
46088: CALL_OW 256
46092: PUSH
46093: LD_INT 1000
46095: LESS
46096: IFFALSE 46110
// SetLives ( un , 1000 ) ;
46098: LD_VAR 0 3
46102: PPUSH
46103: LD_INT 1000
46105: PPUSH
46106: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
46110: LD_VAR 0 3
46114: PPUSH
46115: LD_INT 81
46117: PUSH
46118: LD_OWVAR 2
46122: PUSH
46123: EMPTY
46124: LIST
46125: LIST
46126: PUSH
46127: LD_INT 91
46129: PUSH
46130: LD_VAR 0 3
46134: PUSH
46135: LD_INT 30
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: LIST
46142: PUSH
46143: EMPTY
46144: LIST
46145: LIST
46146: PPUSH
46147: CALL_OW 69
46151: PPUSH
46152: LD_VAR 0 3
46156: PPUSH
46157: CALL_OW 74
46161: PPUSH
46162: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
46166: LD_VAR 0 2
46170: PUSH
46171: LD_INT 80
46173: GREATER
46174: PUSH
46175: LD_VAR 0 3
46179: PPUSH
46180: CALL_OW 301
46184: OR
46185: IFFALSE 46062
// if un then
46187: LD_VAR 0 3
46191: IFFALSE 46202
// RemoveUnit ( un ) ;
46193: LD_VAR 0 3
46197: PPUSH
46198: CALL_OW 64
// end ;
46202: PPOPN 3
46204: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
46205: LD_EXP 141
46209: IFFALSE 46325
46211: GO 46213
46213: DISABLE
46214: LD_INT 0
46216: PPUSH
46217: PPUSH
46218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
46219: LD_ADDR_VAR 0 2
46223: PUSH
46224: LD_INT 81
46226: PUSH
46227: LD_OWVAR 2
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 21
46238: PUSH
46239: LD_INT 1
46241: PUSH
46242: EMPTY
46243: LIST
46244: LIST
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PPUSH
46250: CALL_OW 69
46254: ST_TO_ADDR
// ToLua ( playComputer() ) ;
46255: LD_STRING playComputer()
46257: PPUSH
46258: CALL_OW 559
// if not tmp then
46262: LD_VAR 0 2
46266: NOT
46267: IFFALSE 46271
// exit ;
46269: GO 46325
// for i in tmp do
46271: LD_ADDR_VAR 0 1
46275: PUSH
46276: LD_VAR 0 2
46280: PUSH
46281: FOR_IN
46282: IFFALSE 46323
// for j := 1 to 4 do
46284: LD_ADDR_VAR 0 3
46288: PUSH
46289: DOUBLE
46290: LD_INT 1
46292: DEC
46293: ST_TO_ADDR
46294: LD_INT 4
46296: PUSH
46297: FOR_TO
46298: IFFALSE 46319
// SetSkill ( i , j , 10 ) ;
46300: LD_VAR 0 1
46304: PPUSH
46305: LD_VAR 0 3
46309: PPUSH
46310: LD_INT 10
46312: PPUSH
46313: CALL_OW 237
46317: GO 46297
46319: POP
46320: POP
46321: GO 46281
46323: POP
46324: POP
// end ;
46325: PPOPN 3
46327: END
// every 0 0$1 trigger s30 do var i , tmp ;
46328: LD_EXP 142
46332: IFFALSE 46401
46334: GO 46336
46336: DISABLE
46337: LD_INT 0
46339: PPUSH
46340: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46341: LD_ADDR_VAR 0 2
46345: PUSH
46346: LD_INT 22
46348: PUSH
46349: LD_OWVAR 2
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PPUSH
46358: CALL_OW 69
46362: ST_TO_ADDR
// if not tmp then
46363: LD_VAR 0 2
46367: NOT
46368: IFFALSE 46372
// exit ;
46370: GO 46401
// for i in tmp do
46372: LD_ADDR_VAR 0 1
46376: PUSH
46377: LD_VAR 0 2
46381: PUSH
46382: FOR_IN
46383: IFFALSE 46399
// SetLives ( i , 300 ) ;
46385: LD_VAR 0 1
46389: PPUSH
46390: LD_INT 300
46392: PPUSH
46393: CALL_OW 234
46397: GO 46382
46399: POP
46400: POP
// end ;
46401: PPOPN 2
46403: END
// every 0 0$1 trigger s60 do var i , tmp ;
46404: LD_EXP 143
46408: IFFALSE 46477
46410: GO 46412
46412: DISABLE
46413: LD_INT 0
46415: PPUSH
46416: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46417: LD_ADDR_VAR 0 2
46421: PUSH
46422: LD_INT 22
46424: PUSH
46425: LD_OWVAR 2
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PPUSH
46434: CALL_OW 69
46438: ST_TO_ADDR
// if not tmp then
46439: LD_VAR 0 2
46443: NOT
46444: IFFALSE 46448
// exit ;
46446: GO 46477
// for i in tmp do
46448: LD_ADDR_VAR 0 1
46452: PUSH
46453: LD_VAR 0 2
46457: PUSH
46458: FOR_IN
46459: IFFALSE 46475
// SetLives ( i , 600 ) ;
46461: LD_VAR 0 1
46465: PPUSH
46466: LD_INT 600
46468: PPUSH
46469: CALL_OW 234
46473: GO 46458
46475: POP
46476: POP
// end ;
46477: PPOPN 2
46479: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46480: LD_INT 0
46482: PPUSH
// case cmd of 301 :
46483: LD_VAR 0 1
46487: PUSH
46488: LD_INT 301
46490: DOUBLE
46491: EQUAL
46492: IFTRUE 46496
46494: GO 46528
46496: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
46497: LD_VAR 0 6
46501: PPUSH
46502: LD_VAR 0 7
46506: PPUSH
46507: LD_VAR 0 8
46511: PPUSH
46512: LD_VAR 0 4
46516: PPUSH
46517: LD_VAR 0 5
46521: PPUSH
46522: CALL 47737 0 5
46526: GO 46649
46528: LD_INT 302
46530: DOUBLE
46531: EQUAL
46532: IFTRUE 46536
46534: GO 46573
46536: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
46537: LD_VAR 0 6
46541: PPUSH
46542: LD_VAR 0 7
46546: PPUSH
46547: LD_VAR 0 8
46551: PPUSH
46552: LD_VAR 0 9
46556: PPUSH
46557: LD_VAR 0 4
46561: PPUSH
46562: LD_VAR 0 5
46566: PPUSH
46567: CALL 47828 0 6
46571: GO 46649
46573: LD_INT 303
46575: DOUBLE
46576: EQUAL
46577: IFTRUE 46581
46579: GO 46618
46581: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
46582: LD_VAR 0 6
46586: PPUSH
46587: LD_VAR 0 7
46591: PPUSH
46592: LD_VAR 0 8
46596: PPUSH
46597: LD_VAR 0 9
46601: PPUSH
46602: LD_VAR 0 4
46606: PPUSH
46607: LD_VAR 0 5
46611: PPUSH
46612: CALL 46654 0 6
46616: GO 46649
46618: LD_INT 304
46620: DOUBLE
46621: EQUAL
46622: IFTRUE 46626
46624: GO 46648
46626: POP
// hHackTeleport ( unit , x , y ) ; end ;
46627: LD_VAR 0 2
46631: PPUSH
46632: LD_VAR 0 4
46636: PPUSH
46637: LD_VAR 0 5
46641: PPUSH
46642: CALL 48421 0 3
46646: GO 46649
46648: POP
// end ;
46649: LD_VAR 0 12
46653: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
46654: LD_INT 0
46656: PPUSH
46657: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
46658: LD_VAR 0 1
46662: PUSH
46663: LD_INT 1
46665: LESS
46666: PUSH
46667: LD_VAR 0 1
46671: PUSH
46672: LD_INT 3
46674: GREATER
46675: OR
46676: PUSH
46677: LD_VAR 0 5
46681: PPUSH
46682: LD_VAR 0 6
46686: PPUSH
46687: CALL_OW 428
46691: OR
46692: IFFALSE 46696
// exit ;
46694: GO 47424
// uc_side := your_side ;
46696: LD_ADDR_OWVAR 20
46700: PUSH
46701: LD_OWVAR 2
46705: ST_TO_ADDR
// uc_nation := nation ;
46706: LD_ADDR_OWVAR 21
46710: PUSH
46711: LD_VAR 0 1
46715: ST_TO_ADDR
// bc_level = 1 ;
46716: LD_ADDR_OWVAR 43
46720: PUSH
46721: LD_INT 1
46723: ST_TO_ADDR
// case btype of 1 :
46724: LD_VAR 0 2
46728: PUSH
46729: LD_INT 1
46731: DOUBLE
46732: EQUAL
46733: IFTRUE 46737
46735: GO 46748
46737: POP
// bc_type := b_depot ; 2 :
46738: LD_ADDR_OWVAR 42
46742: PUSH
46743: LD_INT 0
46745: ST_TO_ADDR
46746: GO 47368
46748: LD_INT 2
46750: DOUBLE
46751: EQUAL
46752: IFTRUE 46756
46754: GO 46767
46756: POP
// bc_type := b_warehouse ; 3 :
46757: LD_ADDR_OWVAR 42
46761: PUSH
46762: LD_INT 1
46764: ST_TO_ADDR
46765: GO 47368
46767: LD_INT 3
46769: DOUBLE
46770: EQUAL
46771: IFTRUE 46775
46773: GO 46786
46775: POP
// bc_type := b_lab ; 4 .. 9 :
46776: LD_ADDR_OWVAR 42
46780: PUSH
46781: LD_INT 6
46783: ST_TO_ADDR
46784: GO 47368
46786: LD_INT 4
46788: DOUBLE
46789: GREATEREQUAL
46790: IFFALSE 46798
46792: LD_INT 9
46794: DOUBLE
46795: LESSEQUAL
46796: IFTRUE 46800
46798: GO 46860
46800: POP
// begin bc_type := b_lab_half ;
46801: LD_ADDR_OWVAR 42
46805: PUSH
46806: LD_INT 7
46808: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
46809: LD_ADDR_OWVAR 44
46813: PUSH
46814: LD_INT 10
46816: PUSH
46817: LD_INT 11
46819: PUSH
46820: LD_INT 12
46822: PUSH
46823: LD_INT 15
46825: PUSH
46826: LD_INT 14
46828: PUSH
46829: LD_INT 13
46831: PUSH
46832: EMPTY
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: PUSH
46840: LD_VAR 0 2
46844: PUSH
46845: LD_INT 3
46847: MINUS
46848: ARRAY
46849: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
46850: LD_ADDR_OWVAR 45
46854: PUSH
46855: LD_INT 9
46857: ST_TO_ADDR
// end ; 10 .. 13 :
46858: GO 47368
46860: LD_INT 10
46862: DOUBLE
46863: GREATEREQUAL
46864: IFFALSE 46872
46866: LD_INT 13
46868: DOUBLE
46869: LESSEQUAL
46870: IFTRUE 46874
46872: GO 46951
46874: POP
// begin bc_type := b_lab_full ;
46875: LD_ADDR_OWVAR 42
46879: PUSH
46880: LD_INT 8
46882: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
46883: LD_ADDR_OWVAR 44
46887: PUSH
46888: LD_INT 10
46890: PUSH
46891: LD_INT 12
46893: PUSH
46894: LD_INT 14
46896: PUSH
46897: LD_INT 13
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: PUSH
46906: LD_VAR 0 2
46910: PUSH
46911: LD_INT 9
46913: MINUS
46914: ARRAY
46915: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
46916: LD_ADDR_OWVAR 45
46920: PUSH
46921: LD_INT 11
46923: PUSH
46924: LD_INT 15
46926: PUSH
46927: LD_INT 12
46929: PUSH
46930: LD_INT 15
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: LIST
46937: LIST
46938: PUSH
46939: LD_VAR 0 2
46943: PUSH
46944: LD_INT 9
46946: MINUS
46947: ARRAY
46948: ST_TO_ADDR
// end ; 14 :
46949: GO 47368
46951: LD_INT 14
46953: DOUBLE
46954: EQUAL
46955: IFTRUE 46959
46957: GO 46970
46959: POP
// bc_type := b_workshop ; 15 :
46960: LD_ADDR_OWVAR 42
46964: PUSH
46965: LD_INT 2
46967: ST_TO_ADDR
46968: GO 47368
46970: LD_INT 15
46972: DOUBLE
46973: EQUAL
46974: IFTRUE 46978
46976: GO 46989
46978: POP
// bc_type := b_factory ; 16 :
46979: LD_ADDR_OWVAR 42
46983: PUSH
46984: LD_INT 3
46986: ST_TO_ADDR
46987: GO 47368
46989: LD_INT 16
46991: DOUBLE
46992: EQUAL
46993: IFTRUE 46997
46995: GO 47008
46997: POP
// bc_type := b_ext_gun ; 17 :
46998: LD_ADDR_OWVAR 42
47002: PUSH
47003: LD_INT 17
47005: ST_TO_ADDR
47006: GO 47368
47008: LD_INT 17
47010: DOUBLE
47011: EQUAL
47012: IFTRUE 47016
47014: GO 47044
47016: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
47017: LD_ADDR_OWVAR 42
47021: PUSH
47022: LD_INT 19
47024: PUSH
47025: LD_INT 23
47027: PUSH
47028: LD_INT 19
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: LIST
47035: PUSH
47036: LD_VAR 0 1
47040: ARRAY
47041: ST_TO_ADDR
47042: GO 47368
47044: LD_INT 18
47046: DOUBLE
47047: EQUAL
47048: IFTRUE 47052
47050: GO 47063
47052: POP
// bc_type := b_ext_radar ; 19 :
47053: LD_ADDR_OWVAR 42
47057: PUSH
47058: LD_INT 20
47060: ST_TO_ADDR
47061: GO 47368
47063: LD_INT 19
47065: DOUBLE
47066: EQUAL
47067: IFTRUE 47071
47069: GO 47082
47071: POP
// bc_type := b_ext_radio ; 20 :
47072: LD_ADDR_OWVAR 42
47076: PUSH
47077: LD_INT 22
47079: ST_TO_ADDR
47080: GO 47368
47082: LD_INT 20
47084: DOUBLE
47085: EQUAL
47086: IFTRUE 47090
47088: GO 47101
47090: POP
// bc_type := b_ext_siberium ; 21 :
47091: LD_ADDR_OWVAR 42
47095: PUSH
47096: LD_INT 21
47098: ST_TO_ADDR
47099: GO 47368
47101: LD_INT 21
47103: DOUBLE
47104: EQUAL
47105: IFTRUE 47109
47107: GO 47120
47109: POP
// bc_type := b_ext_computer ; 22 :
47110: LD_ADDR_OWVAR 42
47114: PUSH
47115: LD_INT 24
47117: ST_TO_ADDR
47118: GO 47368
47120: LD_INT 22
47122: DOUBLE
47123: EQUAL
47124: IFTRUE 47128
47126: GO 47139
47128: POP
// bc_type := b_ext_track ; 23 :
47129: LD_ADDR_OWVAR 42
47133: PUSH
47134: LD_INT 16
47136: ST_TO_ADDR
47137: GO 47368
47139: LD_INT 23
47141: DOUBLE
47142: EQUAL
47143: IFTRUE 47147
47145: GO 47158
47147: POP
// bc_type := b_ext_laser ; 24 :
47148: LD_ADDR_OWVAR 42
47152: PUSH
47153: LD_INT 25
47155: ST_TO_ADDR
47156: GO 47368
47158: LD_INT 24
47160: DOUBLE
47161: EQUAL
47162: IFTRUE 47166
47164: GO 47177
47166: POP
// bc_type := b_control_tower ; 25 :
47167: LD_ADDR_OWVAR 42
47171: PUSH
47172: LD_INT 36
47174: ST_TO_ADDR
47175: GO 47368
47177: LD_INT 25
47179: DOUBLE
47180: EQUAL
47181: IFTRUE 47185
47183: GO 47196
47185: POP
// bc_type := b_breastwork ; 26 :
47186: LD_ADDR_OWVAR 42
47190: PUSH
47191: LD_INT 31
47193: ST_TO_ADDR
47194: GO 47368
47196: LD_INT 26
47198: DOUBLE
47199: EQUAL
47200: IFTRUE 47204
47202: GO 47215
47204: POP
// bc_type := b_bunker ; 27 :
47205: LD_ADDR_OWVAR 42
47209: PUSH
47210: LD_INT 32
47212: ST_TO_ADDR
47213: GO 47368
47215: LD_INT 27
47217: DOUBLE
47218: EQUAL
47219: IFTRUE 47223
47221: GO 47234
47223: POP
// bc_type := b_turret ; 28 :
47224: LD_ADDR_OWVAR 42
47228: PUSH
47229: LD_INT 33
47231: ST_TO_ADDR
47232: GO 47368
47234: LD_INT 28
47236: DOUBLE
47237: EQUAL
47238: IFTRUE 47242
47240: GO 47253
47242: POP
// bc_type := b_armoury ; 29 :
47243: LD_ADDR_OWVAR 42
47247: PUSH
47248: LD_INT 4
47250: ST_TO_ADDR
47251: GO 47368
47253: LD_INT 29
47255: DOUBLE
47256: EQUAL
47257: IFTRUE 47261
47259: GO 47272
47261: POP
// bc_type := b_barracks ; 30 :
47262: LD_ADDR_OWVAR 42
47266: PUSH
47267: LD_INT 5
47269: ST_TO_ADDR
47270: GO 47368
47272: LD_INT 30
47274: DOUBLE
47275: EQUAL
47276: IFTRUE 47280
47278: GO 47291
47280: POP
// bc_type := b_solar_power ; 31 :
47281: LD_ADDR_OWVAR 42
47285: PUSH
47286: LD_INT 27
47288: ST_TO_ADDR
47289: GO 47368
47291: LD_INT 31
47293: DOUBLE
47294: EQUAL
47295: IFTRUE 47299
47297: GO 47310
47299: POP
// bc_type := b_oil_power ; 32 :
47300: LD_ADDR_OWVAR 42
47304: PUSH
47305: LD_INT 26
47307: ST_TO_ADDR
47308: GO 47368
47310: LD_INT 32
47312: DOUBLE
47313: EQUAL
47314: IFTRUE 47318
47316: GO 47329
47318: POP
// bc_type := b_siberite_power ; 33 :
47319: LD_ADDR_OWVAR 42
47323: PUSH
47324: LD_INT 28
47326: ST_TO_ADDR
47327: GO 47368
47329: LD_INT 33
47331: DOUBLE
47332: EQUAL
47333: IFTRUE 47337
47335: GO 47348
47337: POP
// bc_type := b_oil_mine ; 34 :
47338: LD_ADDR_OWVAR 42
47342: PUSH
47343: LD_INT 29
47345: ST_TO_ADDR
47346: GO 47368
47348: LD_INT 34
47350: DOUBLE
47351: EQUAL
47352: IFTRUE 47356
47354: GO 47367
47356: POP
// bc_type := b_siberite_mine ; end ;
47357: LD_ADDR_OWVAR 42
47361: PUSH
47362: LD_INT 30
47364: ST_TO_ADDR
47365: GO 47368
47367: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
47368: LD_ADDR_VAR 0 8
47372: PUSH
47373: LD_VAR 0 5
47377: PPUSH
47378: LD_VAR 0 6
47382: PPUSH
47383: LD_VAR 0 3
47387: PPUSH
47388: CALL_OW 47
47392: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
47393: LD_OWVAR 42
47397: PUSH
47398: LD_INT 32
47400: PUSH
47401: LD_INT 33
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: IN
47408: IFFALSE 47424
// PlaceWeaponTurret ( b , weapon ) ;
47410: LD_VAR 0 8
47414: PPUSH
47415: LD_VAR 0 4
47419: PPUSH
47420: CALL_OW 431
// end ;
47424: LD_VAR 0 7
47428: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
47429: LD_INT 0
47431: PPUSH
47432: PPUSH
47433: PPUSH
47434: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47435: LD_ADDR_VAR 0 4
47439: PUSH
47440: LD_INT 22
47442: PUSH
47443: LD_OWVAR 2
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: PUSH
47455: LD_INT 30
47457: PUSH
47458: LD_INT 0
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: PUSH
47465: LD_INT 30
47467: PUSH
47468: LD_INT 1
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: LIST
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PPUSH
47484: CALL_OW 69
47488: ST_TO_ADDR
// if not tmp then
47489: LD_VAR 0 4
47493: NOT
47494: IFFALSE 47498
// exit ;
47496: GO 47557
// for i in tmp do
47498: LD_ADDR_VAR 0 2
47502: PUSH
47503: LD_VAR 0 4
47507: PUSH
47508: FOR_IN
47509: IFFALSE 47555
// for j = 1 to 3 do
47511: LD_ADDR_VAR 0 3
47515: PUSH
47516: DOUBLE
47517: LD_INT 1
47519: DEC
47520: ST_TO_ADDR
47521: LD_INT 3
47523: PUSH
47524: FOR_TO
47525: IFFALSE 47551
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
47527: LD_VAR 0 2
47531: PPUSH
47532: CALL_OW 274
47536: PPUSH
47537: LD_VAR 0 3
47541: PPUSH
47542: LD_INT 99999
47544: PPUSH
47545: CALL_OW 277
47549: GO 47524
47551: POP
47552: POP
47553: GO 47508
47555: POP
47556: POP
// end ;
47557: LD_VAR 0 1
47561: RET
// export function hHackSetLevel10 ; var i , j ; begin
47562: LD_INT 0
47564: PPUSH
47565: PPUSH
47566: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
47567: LD_ADDR_VAR 0 2
47571: PUSH
47572: LD_INT 21
47574: PUSH
47575: LD_INT 1
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PPUSH
47582: CALL_OW 69
47586: PUSH
47587: FOR_IN
47588: IFFALSE 47640
// if IsSelected ( i ) then
47590: LD_VAR 0 2
47594: PPUSH
47595: CALL_OW 306
47599: IFFALSE 47638
// begin for j := 1 to 4 do
47601: LD_ADDR_VAR 0 3
47605: PUSH
47606: DOUBLE
47607: LD_INT 1
47609: DEC
47610: ST_TO_ADDR
47611: LD_INT 4
47613: PUSH
47614: FOR_TO
47615: IFFALSE 47636
// SetSkill ( i , j , 10 ) ;
47617: LD_VAR 0 2
47621: PPUSH
47622: LD_VAR 0 3
47626: PPUSH
47627: LD_INT 10
47629: PPUSH
47630: CALL_OW 237
47634: GO 47614
47636: POP
47637: POP
// end ;
47638: GO 47587
47640: POP
47641: POP
// end ;
47642: LD_VAR 0 1
47646: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
47647: LD_INT 0
47649: PPUSH
47650: PPUSH
47651: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
47652: LD_ADDR_VAR 0 2
47656: PUSH
47657: LD_INT 22
47659: PUSH
47660: LD_OWVAR 2
47664: PUSH
47665: EMPTY
47666: LIST
47667: LIST
47668: PUSH
47669: LD_INT 21
47671: PUSH
47672: LD_INT 1
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: EMPTY
47680: LIST
47681: LIST
47682: PPUSH
47683: CALL_OW 69
47687: PUSH
47688: FOR_IN
47689: IFFALSE 47730
// begin for j := 1 to 4 do
47691: LD_ADDR_VAR 0 3
47695: PUSH
47696: DOUBLE
47697: LD_INT 1
47699: DEC
47700: ST_TO_ADDR
47701: LD_INT 4
47703: PUSH
47704: FOR_TO
47705: IFFALSE 47726
// SetSkill ( i , j , 10 ) ;
47707: LD_VAR 0 2
47711: PPUSH
47712: LD_VAR 0 3
47716: PPUSH
47717: LD_INT 10
47719: PPUSH
47720: CALL_OW 237
47724: GO 47704
47726: POP
47727: POP
// end ;
47728: GO 47688
47730: POP
47731: POP
// end ;
47732: LD_VAR 0 1
47736: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
47737: LD_INT 0
47739: PPUSH
// uc_side := your_side ;
47740: LD_ADDR_OWVAR 20
47744: PUSH
47745: LD_OWVAR 2
47749: ST_TO_ADDR
// uc_nation := nation ;
47750: LD_ADDR_OWVAR 21
47754: PUSH
47755: LD_VAR 0 1
47759: ST_TO_ADDR
// InitHc ;
47760: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
47764: LD_INT 0
47766: PPUSH
47767: LD_VAR 0 2
47771: PPUSH
47772: LD_VAR 0 3
47776: PPUSH
47777: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
47781: LD_VAR 0 4
47785: PPUSH
47786: LD_VAR 0 5
47790: PPUSH
47791: CALL_OW 428
47795: PUSH
47796: LD_INT 0
47798: EQUAL
47799: IFFALSE 47823
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
47801: CALL_OW 44
47805: PPUSH
47806: LD_VAR 0 4
47810: PPUSH
47811: LD_VAR 0 5
47815: PPUSH
47816: LD_INT 1
47818: PPUSH
47819: CALL_OW 48
// end ;
47823: LD_VAR 0 6
47827: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
47828: LD_INT 0
47830: PPUSH
47831: PPUSH
// uc_side := your_side ;
47832: LD_ADDR_OWVAR 20
47836: PUSH
47837: LD_OWVAR 2
47841: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
47842: LD_VAR 0 1
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: LD_INT 2
47852: PUSH
47853: LD_INT 3
47855: PUSH
47856: LD_INT 4
47858: PUSH
47859: LD_INT 5
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: IN
47869: IFFALSE 47881
// uc_nation := nation_american else
47871: LD_ADDR_OWVAR 21
47875: PUSH
47876: LD_INT 1
47878: ST_TO_ADDR
47879: GO 47924
// if chassis in [ 11 , 12 , 13 , 14 ] then
47881: LD_VAR 0 1
47885: PUSH
47886: LD_INT 11
47888: PUSH
47889: LD_INT 12
47891: PUSH
47892: LD_INT 13
47894: PUSH
47895: LD_INT 14
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: LIST
47902: LIST
47903: IN
47904: IFFALSE 47916
// uc_nation := nation_arabian else
47906: LD_ADDR_OWVAR 21
47910: PUSH
47911: LD_INT 2
47913: ST_TO_ADDR
47914: GO 47924
// uc_nation := nation_russian ;
47916: LD_ADDR_OWVAR 21
47920: PUSH
47921: LD_INT 3
47923: ST_TO_ADDR
// vc_chassis := chassis ;
47924: LD_ADDR_OWVAR 37
47928: PUSH
47929: LD_VAR 0 1
47933: ST_TO_ADDR
// vc_engine := engine ;
47934: LD_ADDR_OWVAR 39
47938: PUSH
47939: LD_VAR 0 2
47943: ST_TO_ADDR
// vc_control := control ;
47944: LD_ADDR_OWVAR 38
47948: PUSH
47949: LD_VAR 0 3
47953: ST_TO_ADDR
// vc_weapon := weapon ;
47954: LD_ADDR_OWVAR 40
47958: PUSH
47959: LD_VAR 0 4
47963: ST_TO_ADDR
// un := CreateVehicle ;
47964: LD_ADDR_VAR 0 8
47968: PUSH
47969: CALL_OW 45
47973: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
47974: LD_VAR 0 8
47978: PPUSH
47979: LD_INT 0
47981: PPUSH
47982: LD_INT 5
47984: PPUSH
47985: CALL_OW 12
47989: PPUSH
47990: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
47994: LD_VAR 0 8
47998: PPUSH
47999: LD_VAR 0 5
48003: PPUSH
48004: LD_VAR 0 6
48008: PPUSH
48009: LD_INT 1
48011: PPUSH
48012: CALL_OW 48
// end ;
48016: LD_VAR 0 7
48020: RET
// export hInvincible ; every 1 do
48021: GO 48023
48023: DISABLE
// hInvincible := [ ] ;
48024: LD_ADDR_EXP 144
48028: PUSH
48029: EMPTY
48030: ST_TO_ADDR
48031: END
// every 10 do var i ;
48032: GO 48034
48034: DISABLE
48035: LD_INT 0
48037: PPUSH
// begin enable ;
48038: ENABLE
// if not hInvincible then
48039: LD_EXP 144
48043: NOT
48044: IFFALSE 48048
// exit ;
48046: GO 48092
// for i in hInvincible do
48048: LD_ADDR_VAR 0 1
48052: PUSH
48053: LD_EXP 144
48057: PUSH
48058: FOR_IN
48059: IFFALSE 48090
// if GetLives ( i ) < 1000 then
48061: LD_VAR 0 1
48065: PPUSH
48066: CALL_OW 256
48070: PUSH
48071: LD_INT 1000
48073: LESS
48074: IFFALSE 48088
// SetLives ( i , 1000 ) ;
48076: LD_VAR 0 1
48080: PPUSH
48081: LD_INT 1000
48083: PPUSH
48084: CALL_OW 234
48088: GO 48058
48090: POP
48091: POP
// end ;
48092: PPOPN 1
48094: END
// export function hHackInvincible ; var i ; begin
48095: LD_INT 0
48097: PPUSH
48098: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
48099: LD_ADDR_VAR 0 2
48103: PUSH
48104: LD_INT 2
48106: PUSH
48107: LD_INT 21
48109: PUSH
48110: LD_INT 1
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 21
48119: PUSH
48120: LD_INT 2
48122: PUSH
48123: EMPTY
48124: LIST
48125: LIST
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: LIST
48131: PPUSH
48132: CALL_OW 69
48136: PUSH
48137: FOR_IN
48138: IFFALSE 48199
// if IsSelected ( i ) then
48140: LD_VAR 0 2
48144: PPUSH
48145: CALL_OW 306
48149: IFFALSE 48197
// begin if i in hInvincible then
48151: LD_VAR 0 2
48155: PUSH
48156: LD_EXP 144
48160: IN
48161: IFFALSE 48181
// hInvincible := hInvincible diff i else
48163: LD_ADDR_EXP 144
48167: PUSH
48168: LD_EXP 144
48172: PUSH
48173: LD_VAR 0 2
48177: DIFF
48178: ST_TO_ADDR
48179: GO 48197
// hInvincible := hInvincible union i ;
48181: LD_ADDR_EXP 144
48185: PUSH
48186: LD_EXP 144
48190: PUSH
48191: LD_VAR 0 2
48195: UNION
48196: ST_TO_ADDR
// end ;
48197: GO 48137
48199: POP
48200: POP
// end ;
48201: LD_VAR 0 1
48205: RET
// export function hHackInvisible ; var i , j ; begin
48206: LD_INT 0
48208: PPUSH
48209: PPUSH
48210: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
48211: LD_ADDR_VAR 0 2
48215: PUSH
48216: LD_INT 21
48218: PUSH
48219: LD_INT 1
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PPUSH
48226: CALL_OW 69
48230: PUSH
48231: FOR_IN
48232: IFFALSE 48256
// if IsSelected ( i ) then
48234: LD_VAR 0 2
48238: PPUSH
48239: CALL_OW 306
48243: IFFALSE 48254
// ComForceInvisible ( i ) ;
48245: LD_VAR 0 2
48249: PPUSH
48250: CALL_OW 496
48254: GO 48231
48256: POP
48257: POP
// end ;
48258: LD_VAR 0 1
48262: RET
// export function hHackChangeYourSide ; begin
48263: LD_INT 0
48265: PPUSH
// if your_side = 8 then
48266: LD_OWVAR 2
48270: PUSH
48271: LD_INT 8
48273: EQUAL
48274: IFFALSE 48286
// your_side := 0 else
48276: LD_ADDR_OWVAR 2
48280: PUSH
48281: LD_INT 0
48283: ST_TO_ADDR
48284: GO 48300
// your_side := your_side + 1 ;
48286: LD_ADDR_OWVAR 2
48290: PUSH
48291: LD_OWVAR 2
48295: PUSH
48296: LD_INT 1
48298: PLUS
48299: ST_TO_ADDR
// end ;
48300: LD_VAR 0 1
48304: RET
// export function hHackChangeUnitSide ; var i , j ; begin
48305: LD_INT 0
48307: PPUSH
48308: PPUSH
48309: PPUSH
// for i in all_units do
48310: LD_ADDR_VAR 0 2
48314: PUSH
48315: LD_OWVAR 3
48319: PUSH
48320: FOR_IN
48321: IFFALSE 48399
// if IsSelected ( i ) then
48323: LD_VAR 0 2
48327: PPUSH
48328: CALL_OW 306
48332: IFFALSE 48397
// begin j := GetSide ( i ) ;
48334: LD_ADDR_VAR 0 3
48338: PUSH
48339: LD_VAR 0 2
48343: PPUSH
48344: CALL_OW 255
48348: ST_TO_ADDR
// if j = 8 then
48349: LD_VAR 0 3
48353: PUSH
48354: LD_INT 8
48356: EQUAL
48357: IFFALSE 48369
// j := 0 else
48359: LD_ADDR_VAR 0 3
48363: PUSH
48364: LD_INT 0
48366: ST_TO_ADDR
48367: GO 48383
// j := j + 1 ;
48369: LD_ADDR_VAR 0 3
48373: PUSH
48374: LD_VAR 0 3
48378: PUSH
48379: LD_INT 1
48381: PLUS
48382: ST_TO_ADDR
// SetSide ( i , j ) ;
48383: LD_VAR 0 2
48387: PPUSH
48388: LD_VAR 0 3
48392: PPUSH
48393: CALL_OW 235
// end ;
48397: GO 48320
48399: POP
48400: POP
// end ;
48401: LD_VAR 0 1
48405: RET
// export function hHackFog ; begin
48406: LD_INT 0
48408: PPUSH
// FogOff ( true ) ;
48409: LD_INT 1
48411: PPUSH
48412: CALL_OW 344
// end ;
48416: LD_VAR 0 1
48420: RET
// export function hHackTeleport ( unit , x , y ) ; begin
48421: LD_INT 0
48423: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
48424: LD_VAR 0 1
48428: PPUSH
48429: LD_VAR 0 2
48433: PPUSH
48434: LD_VAR 0 3
48438: PPUSH
48439: LD_INT 1
48441: PPUSH
48442: LD_INT 1
48444: PPUSH
48445: CALL_OW 483
// CenterOnXY ( x , y ) ;
48449: LD_VAR 0 2
48453: PPUSH
48454: LD_VAR 0 3
48458: PPUSH
48459: CALL_OW 84
// end ;
48463: LD_VAR 0 4
48467: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
48468: LD_INT 0
48470: PPUSH
48471: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
48472: LD_VAR 0 1
48476: NOT
48477: PUSH
48478: LD_VAR 0 2
48482: PPUSH
48483: LD_VAR 0 3
48487: PPUSH
48488: CALL_OW 488
48492: NOT
48493: OR
48494: PUSH
48495: LD_VAR 0 1
48499: PPUSH
48500: CALL_OW 266
48504: PUSH
48505: LD_INT 3
48507: NONEQUAL
48508: PUSH
48509: LD_VAR 0 1
48513: PPUSH
48514: CALL_OW 247
48518: PUSH
48519: LD_INT 1
48521: EQUAL
48522: NOT
48523: AND
48524: OR
48525: IFFALSE 48529
// exit ;
48527: GO 48678
// if GetType ( factory ) = unit_human then
48529: LD_VAR 0 1
48533: PPUSH
48534: CALL_OW 247
48538: PUSH
48539: LD_INT 1
48541: EQUAL
48542: IFFALSE 48559
// factory := IsInUnit ( factory ) ;
48544: LD_ADDR_VAR 0 1
48548: PUSH
48549: LD_VAR 0 1
48553: PPUSH
48554: CALL_OW 310
48558: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
48559: LD_VAR 0 1
48563: PPUSH
48564: CALL_OW 266
48568: PUSH
48569: LD_INT 3
48571: NONEQUAL
48572: IFFALSE 48576
// exit ;
48574: GO 48678
// if HexInfo ( x , y ) = factory then
48576: LD_VAR 0 2
48580: PPUSH
48581: LD_VAR 0 3
48585: PPUSH
48586: CALL_OW 428
48590: PUSH
48591: LD_VAR 0 1
48595: EQUAL
48596: IFFALSE 48623
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
48598: LD_ADDR_EXP 145
48602: PUSH
48603: LD_EXP 145
48607: PPUSH
48608: LD_VAR 0 1
48612: PPUSH
48613: LD_INT 0
48615: PPUSH
48616: CALL_OW 1
48620: ST_TO_ADDR
48621: GO 48674
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
48623: LD_ADDR_EXP 145
48627: PUSH
48628: LD_EXP 145
48632: PPUSH
48633: LD_VAR 0 1
48637: PPUSH
48638: LD_VAR 0 1
48642: PPUSH
48643: CALL_OW 255
48647: PUSH
48648: LD_VAR 0 1
48652: PUSH
48653: LD_VAR 0 2
48657: PUSH
48658: LD_VAR 0 3
48662: PUSH
48663: EMPTY
48664: LIST
48665: LIST
48666: LIST
48667: LIST
48668: PPUSH
48669: CALL_OW 1
48673: ST_TO_ADDR
// UpdateFactoryWaypoints ;
48674: CALL 48683 0 0
// end ;
48678: LD_VAR 0 4
48682: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
48683: LD_INT 0
48685: PPUSH
48686: PPUSH
48687: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
48688: LD_STRING resetFactoryWaypoint();
48690: PPUSH
48691: CALL_OW 559
// if factoryWaypoints then
48695: LD_EXP 145
48699: IFFALSE 48825
// begin list := PrepareArray ( factoryWaypoints ) ;
48701: LD_ADDR_VAR 0 3
48705: PUSH
48706: LD_EXP 145
48710: PPUSH
48711: CALL 95967 0 1
48715: ST_TO_ADDR
// for i := 1 to list do
48716: LD_ADDR_VAR 0 2
48720: PUSH
48721: DOUBLE
48722: LD_INT 1
48724: DEC
48725: ST_TO_ADDR
48726: LD_VAR 0 3
48730: PUSH
48731: FOR_TO
48732: IFFALSE 48823
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
48734: LD_STRING setFactoryWaypointXY(
48736: PUSH
48737: LD_VAR 0 3
48741: PUSH
48742: LD_VAR 0 2
48746: ARRAY
48747: PUSH
48748: LD_INT 1
48750: ARRAY
48751: STR
48752: PUSH
48753: LD_STRING ,
48755: STR
48756: PUSH
48757: LD_VAR 0 3
48761: PUSH
48762: LD_VAR 0 2
48766: ARRAY
48767: PUSH
48768: LD_INT 2
48770: ARRAY
48771: STR
48772: PUSH
48773: LD_STRING ,
48775: STR
48776: PUSH
48777: LD_VAR 0 3
48781: PUSH
48782: LD_VAR 0 2
48786: ARRAY
48787: PUSH
48788: LD_INT 3
48790: ARRAY
48791: STR
48792: PUSH
48793: LD_STRING ,
48795: STR
48796: PUSH
48797: LD_VAR 0 3
48801: PUSH
48802: LD_VAR 0 2
48806: ARRAY
48807: PUSH
48808: LD_INT 4
48810: ARRAY
48811: STR
48812: PUSH
48813: LD_STRING )
48815: STR
48816: PPUSH
48817: CALL_OW 559
48821: GO 48731
48823: POP
48824: POP
// end ; end ;
48825: LD_VAR 0 1
48829: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
48830: LD_INT 0
48832: PPUSH
// if HexInfo ( x , y ) = warehouse then
48833: LD_VAR 0 2
48837: PPUSH
48838: LD_VAR 0 3
48842: PPUSH
48843: CALL_OW 428
48847: PUSH
48848: LD_VAR 0 1
48852: EQUAL
48853: IFFALSE 48880
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
48855: LD_ADDR_EXP 146
48859: PUSH
48860: LD_EXP 146
48864: PPUSH
48865: LD_VAR 0 1
48869: PPUSH
48870: LD_INT 0
48872: PPUSH
48873: CALL_OW 1
48877: ST_TO_ADDR
48878: GO 48931
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
48880: LD_ADDR_EXP 146
48884: PUSH
48885: LD_EXP 146
48889: PPUSH
48890: LD_VAR 0 1
48894: PPUSH
48895: LD_VAR 0 1
48899: PPUSH
48900: CALL_OW 255
48904: PUSH
48905: LD_VAR 0 1
48909: PUSH
48910: LD_VAR 0 2
48914: PUSH
48915: LD_VAR 0 3
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: PPUSH
48926: CALL_OW 1
48930: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
48931: CALL 48940 0 0
// end ;
48935: LD_VAR 0 4
48939: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
48940: LD_INT 0
48942: PPUSH
48943: PPUSH
48944: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
48945: LD_STRING resetWarehouseGatheringPoints();
48947: PPUSH
48948: CALL_OW 559
// if warehouseGatheringPoints then
48952: LD_EXP 146
48956: IFFALSE 49082
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
48958: LD_ADDR_VAR 0 3
48962: PUSH
48963: LD_EXP 146
48967: PPUSH
48968: CALL 95967 0 1
48972: ST_TO_ADDR
// for i := 1 to list do
48973: LD_ADDR_VAR 0 2
48977: PUSH
48978: DOUBLE
48979: LD_INT 1
48981: DEC
48982: ST_TO_ADDR
48983: LD_VAR 0 3
48987: PUSH
48988: FOR_TO
48989: IFFALSE 49080
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
48991: LD_STRING setWarehouseGatheringPointXY(
48993: PUSH
48994: LD_VAR 0 3
48998: PUSH
48999: LD_VAR 0 2
49003: ARRAY
49004: PUSH
49005: LD_INT 1
49007: ARRAY
49008: STR
49009: PUSH
49010: LD_STRING ,
49012: STR
49013: PUSH
49014: LD_VAR 0 3
49018: PUSH
49019: LD_VAR 0 2
49023: ARRAY
49024: PUSH
49025: LD_INT 2
49027: ARRAY
49028: STR
49029: PUSH
49030: LD_STRING ,
49032: STR
49033: PUSH
49034: LD_VAR 0 3
49038: PUSH
49039: LD_VAR 0 2
49043: ARRAY
49044: PUSH
49045: LD_INT 3
49047: ARRAY
49048: STR
49049: PUSH
49050: LD_STRING ,
49052: STR
49053: PUSH
49054: LD_VAR 0 3
49058: PUSH
49059: LD_VAR 0 2
49063: ARRAY
49064: PUSH
49065: LD_INT 4
49067: ARRAY
49068: STR
49069: PUSH
49070: LD_STRING )
49072: STR
49073: PPUSH
49074: CALL_OW 559
49078: GO 48988
49080: POP
49081: POP
// end ; end ;
49082: LD_VAR 0 1
49086: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
49087: LD_EXP 146
49091: IFFALSE 49776
49093: GO 49095
49095: DISABLE
49096: LD_INT 0
49098: PPUSH
49099: PPUSH
49100: PPUSH
49101: PPUSH
49102: PPUSH
49103: PPUSH
49104: PPUSH
49105: PPUSH
49106: PPUSH
// begin enable ;
49107: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
49108: LD_ADDR_VAR 0 3
49112: PUSH
49113: LD_EXP 146
49117: PPUSH
49118: CALL 95967 0 1
49122: ST_TO_ADDR
// if not list then
49123: LD_VAR 0 3
49127: NOT
49128: IFFALSE 49132
// exit ;
49130: GO 49776
// for i := 1 to list do
49132: LD_ADDR_VAR 0 1
49136: PUSH
49137: DOUBLE
49138: LD_INT 1
49140: DEC
49141: ST_TO_ADDR
49142: LD_VAR 0 3
49146: PUSH
49147: FOR_TO
49148: IFFALSE 49774
// begin depot := list [ i ] [ 2 ] ;
49150: LD_ADDR_VAR 0 8
49154: PUSH
49155: LD_VAR 0 3
49159: PUSH
49160: LD_VAR 0 1
49164: ARRAY
49165: PUSH
49166: LD_INT 2
49168: ARRAY
49169: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
49170: LD_ADDR_VAR 0 5
49174: PUSH
49175: LD_VAR 0 3
49179: PUSH
49180: LD_VAR 0 1
49184: ARRAY
49185: PUSH
49186: LD_INT 1
49188: ARRAY
49189: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
49190: LD_VAR 0 8
49194: PPUSH
49195: CALL_OW 301
49199: PUSH
49200: LD_VAR 0 5
49204: PUSH
49205: LD_VAR 0 8
49209: PPUSH
49210: CALL_OW 255
49214: NONEQUAL
49215: OR
49216: IFFALSE 49245
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
49218: LD_ADDR_EXP 146
49222: PUSH
49223: LD_EXP 146
49227: PPUSH
49228: LD_VAR 0 8
49232: PPUSH
49233: LD_INT 0
49235: PPUSH
49236: CALL_OW 1
49240: ST_TO_ADDR
// exit ;
49241: POP
49242: POP
49243: GO 49776
// end ; x := list [ i ] [ 3 ] ;
49245: LD_ADDR_VAR 0 6
49249: PUSH
49250: LD_VAR 0 3
49254: PUSH
49255: LD_VAR 0 1
49259: ARRAY
49260: PUSH
49261: LD_INT 3
49263: ARRAY
49264: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
49265: LD_ADDR_VAR 0 7
49269: PUSH
49270: LD_VAR 0 3
49274: PUSH
49275: LD_VAR 0 1
49279: ARRAY
49280: PUSH
49281: LD_INT 4
49283: ARRAY
49284: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
49285: LD_ADDR_VAR 0 9
49289: PUSH
49290: LD_VAR 0 6
49294: PPUSH
49295: LD_VAR 0 7
49299: PPUSH
49300: LD_INT 16
49302: PPUSH
49303: CALL 94555 0 3
49307: ST_TO_ADDR
// if not cratesNearbyPoint then
49308: LD_VAR 0 9
49312: NOT
49313: IFFALSE 49319
// exit ;
49315: POP
49316: POP
49317: GO 49776
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
49319: LD_ADDR_VAR 0 4
49323: PUSH
49324: LD_INT 22
49326: PUSH
49327: LD_VAR 0 5
49331: PUSH
49332: EMPTY
49333: LIST
49334: LIST
49335: PUSH
49336: LD_INT 3
49338: PUSH
49339: LD_INT 60
49341: PUSH
49342: EMPTY
49343: LIST
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 91
49351: PUSH
49352: LD_VAR 0 8
49356: PUSH
49357: LD_INT 6
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: PUSH
49368: LD_INT 25
49370: PUSH
49371: LD_INT 2
49373: PUSH
49374: EMPTY
49375: LIST
49376: LIST
49377: PUSH
49378: LD_INT 25
49380: PUSH
49381: LD_INT 16
49383: PUSH
49384: EMPTY
49385: LIST
49386: LIST
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: LIST
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: LIST
49397: LIST
49398: PPUSH
49399: CALL_OW 69
49403: PUSH
49404: LD_VAR 0 8
49408: PPUSH
49409: CALL_OW 313
49413: PPUSH
49414: LD_INT 3
49416: PUSH
49417: LD_INT 60
49419: PUSH
49420: EMPTY
49421: LIST
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 2
49429: PUSH
49430: LD_INT 25
49432: PUSH
49433: LD_INT 2
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 25
49442: PUSH
49443: LD_INT 16
49445: PUSH
49446: EMPTY
49447: LIST
49448: LIST
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: LIST
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: PPUSH
49459: CALL_OW 72
49463: UNION
49464: ST_TO_ADDR
// if tmp then
49465: LD_VAR 0 4
49469: IFFALSE 49549
// begin tmp := ShrinkArray ( tmp , 3 ) ;
49471: LD_ADDR_VAR 0 4
49475: PUSH
49476: LD_VAR 0 4
49480: PPUSH
49481: LD_INT 3
49483: PPUSH
49484: CALL 92524 0 2
49488: ST_TO_ADDR
// for j in tmp do
49489: LD_ADDR_VAR 0 2
49493: PUSH
49494: LD_VAR 0 4
49498: PUSH
49499: FOR_IN
49500: IFFALSE 49543
// begin if IsInUnit ( j ) then
49502: LD_VAR 0 2
49506: PPUSH
49507: CALL_OW 310
49511: IFFALSE 49522
// ComExit ( j ) ;
49513: LD_VAR 0 2
49517: PPUSH
49518: CALL 92607 0 1
// AddComCollect ( j , x , y ) ;
49522: LD_VAR 0 2
49526: PPUSH
49527: LD_VAR 0 6
49531: PPUSH
49532: LD_VAR 0 7
49536: PPUSH
49537: CALL_OW 177
// end ;
49541: GO 49499
49543: POP
49544: POP
// exit ;
49545: POP
49546: POP
49547: GO 49776
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
49549: LD_ADDR_VAR 0 4
49553: PUSH
49554: LD_INT 22
49556: PUSH
49557: LD_VAR 0 5
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 91
49568: PUSH
49569: LD_VAR 0 8
49573: PUSH
49574: LD_INT 8
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: LIST
49581: PUSH
49582: LD_INT 2
49584: PUSH
49585: LD_INT 34
49587: PUSH
49588: LD_INT 12
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: PUSH
49595: LD_INT 34
49597: PUSH
49598: LD_INT 51
49600: PUSH
49601: EMPTY
49602: LIST
49603: LIST
49604: PUSH
49605: LD_INT 34
49607: PUSH
49608: LD_INT 32
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 34
49617: PUSH
49618: LD_INT 89
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: LIST
49636: PPUSH
49637: CALL_OW 69
49641: ST_TO_ADDR
// if tmp then
49642: LD_VAR 0 4
49646: IFFALSE 49772
// begin for j in tmp do
49648: LD_ADDR_VAR 0 2
49652: PUSH
49653: LD_VAR 0 4
49657: PUSH
49658: FOR_IN
49659: IFFALSE 49770
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
49661: LD_VAR 0 2
49665: PPUSH
49666: CALL_OW 262
49670: PUSH
49671: LD_INT 3
49673: EQUAL
49674: PUSH
49675: LD_VAR 0 2
49679: PPUSH
49680: CALL_OW 261
49684: PUSH
49685: LD_INT 20
49687: GREATER
49688: OR
49689: PUSH
49690: LD_VAR 0 2
49694: PPUSH
49695: CALL_OW 314
49699: NOT
49700: AND
49701: PUSH
49702: LD_VAR 0 2
49706: PPUSH
49707: CALL_OW 263
49711: PUSH
49712: LD_INT 1
49714: NONEQUAL
49715: PUSH
49716: LD_VAR 0 2
49720: PPUSH
49721: CALL_OW 311
49725: OR
49726: AND
49727: IFFALSE 49768
// begin ComCollect ( j , x , y ) ;
49729: LD_VAR 0 2
49733: PPUSH
49734: LD_VAR 0 6
49738: PPUSH
49739: LD_VAR 0 7
49743: PPUSH
49744: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
49748: LD_VAR 0 2
49752: PPUSH
49753: LD_VAR 0 8
49757: PPUSH
49758: CALL_OW 172
// exit ;
49762: POP
49763: POP
49764: POP
49765: POP
49766: GO 49776
// end ;
49768: GO 49658
49770: POP
49771: POP
// end ; end ;
49772: GO 49147
49774: POP
49775: POP
// end ; end_of_file
49776: PPOPN 9
49778: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
49779: LD_INT 0
49781: PPUSH
49782: PPUSH
49783: PPUSH
49784: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
49785: LD_VAR 0 1
49789: PPUSH
49790: CALL_OW 264
49794: PUSH
49795: LD_INT 91
49797: EQUAL
49798: IFFALSE 49870
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
49800: LD_INT 68
49802: PPUSH
49803: LD_VAR 0 1
49807: PPUSH
49808: CALL_OW 255
49812: PPUSH
49813: CALL_OW 321
49817: PUSH
49818: LD_INT 2
49820: EQUAL
49821: IFFALSE 49833
// eff := 70 else
49823: LD_ADDR_VAR 0 4
49827: PUSH
49828: LD_INT 70
49830: ST_TO_ADDR
49831: GO 49841
// eff := 30 ;
49833: LD_ADDR_VAR 0 4
49837: PUSH
49838: LD_INT 30
49840: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
49841: LD_VAR 0 1
49845: PPUSH
49846: CALL_OW 250
49850: PPUSH
49851: LD_VAR 0 1
49855: PPUSH
49856: CALL_OW 251
49860: PPUSH
49861: LD_VAR 0 4
49865: PPUSH
49866: CALL_OW 495
// end ; end ;
49870: LD_VAR 0 2
49874: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
49875: LD_INT 0
49877: PPUSH
// end ;
49878: LD_VAR 0 4
49882: RET
// export function SOS_Command ( cmd ) ; begin
49883: LD_INT 0
49885: PPUSH
// end ;
49886: LD_VAR 0 2
49890: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
49891: LD_INT 0
49893: PPUSH
// end ;
49894: LD_VAR 0 6
49898: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
49899: LD_INT 0
49901: PPUSH
49902: PPUSH
// if not vehicle or not factory then
49903: LD_VAR 0 1
49907: NOT
49908: PUSH
49909: LD_VAR 0 2
49913: NOT
49914: OR
49915: IFFALSE 49919
// exit ;
49917: GO 50150
// if factoryWaypoints >= factory then
49919: LD_EXP 145
49923: PUSH
49924: LD_VAR 0 2
49928: GREATEREQUAL
49929: IFFALSE 50150
// if factoryWaypoints [ factory ] then
49931: LD_EXP 145
49935: PUSH
49936: LD_VAR 0 2
49940: ARRAY
49941: IFFALSE 50150
// begin if GetControl ( vehicle ) = control_manual then
49943: LD_VAR 0 1
49947: PPUSH
49948: CALL_OW 263
49952: PUSH
49953: LD_INT 1
49955: EQUAL
49956: IFFALSE 50037
// begin driver := IsDrivenBy ( vehicle ) ;
49958: LD_ADDR_VAR 0 4
49962: PUSH
49963: LD_VAR 0 1
49967: PPUSH
49968: CALL_OW 311
49972: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
49973: LD_VAR 0 4
49977: PPUSH
49978: LD_EXP 145
49982: PUSH
49983: LD_VAR 0 2
49987: ARRAY
49988: PUSH
49989: LD_INT 3
49991: ARRAY
49992: PPUSH
49993: LD_EXP 145
49997: PUSH
49998: LD_VAR 0 2
50002: ARRAY
50003: PUSH
50004: LD_INT 4
50006: ARRAY
50007: PPUSH
50008: CALL_OW 171
// AddComExitVehicle ( driver ) ;
50012: LD_VAR 0 4
50016: PPUSH
50017: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
50021: LD_VAR 0 4
50025: PPUSH
50026: LD_VAR 0 2
50030: PPUSH
50031: CALL_OW 180
// end else
50035: GO 50150
// if GetControl ( vehicle ) = control_remote then
50037: LD_VAR 0 1
50041: PPUSH
50042: CALL_OW 263
50046: PUSH
50047: LD_INT 2
50049: EQUAL
50050: IFFALSE 50111
// begin wait ( 0 0$2 ) ;
50052: LD_INT 70
50054: PPUSH
50055: CALL_OW 67
// if Connect ( vehicle ) then
50059: LD_VAR 0 1
50063: PPUSH
50064: CALL 62815 0 1
50068: IFFALSE 50109
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
50070: LD_VAR 0 1
50074: PPUSH
50075: LD_EXP 145
50079: PUSH
50080: LD_VAR 0 2
50084: ARRAY
50085: PUSH
50086: LD_INT 3
50088: ARRAY
50089: PPUSH
50090: LD_EXP 145
50094: PUSH
50095: LD_VAR 0 2
50099: ARRAY
50100: PUSH
50101: LD_INT 4
50103: ARRAY
50104: PPUSH
50105: CALL_OW 171
// end else
50109: GO 50150
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
50111: LD_VAR 0 1
50115: PPUSH
50116: LD_EXP 145
50120: PUSH
50121: LD_VAR 0 2
50125: ARRAY
50126: PUSH
50127: LD_INT 3
50129: ARRAY
50130: PPUSH
50131: LD_EXP 145
50135: PUSH
50136: LD_VAR 0 2
50140: ARRAY
50141: PUSH
50142: LD_INT 4
50144: ARRAY
50145: PPUSH
50146: CALL_OW 171
// end ; end ;
50150: LD_VAR 0 3
50154: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
50155: LD_INT 0
50157: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
50158: LD_VAR 0 1
50162: PUSH
50163: LD_INT 250
50165: EQUAL
50166: PUSH
50167: LD_VAR 0 2
50171: PPUSH
50172: CALL_OW 264
50176: PUSH
50177: LD_INT 81
50179: EQUAL
50180: AND
50181: IFFALSE 50202
// MinerPlaceMine ( unit , x , y ) ;
50183: LD_VAR 0 2
50187: PPUSH
50188: LD_VAR 0 4
50192: PPUSH
50193: LD_VAR 0 5
50197: PPUSH
50198: CALL 53026 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
50202: LD_VAR 0 1
50206: PUSH
50207: LD_INT 251
50209: EQUAL
50210: PUSH
50211: LD_VAR 0 2
50215: PPUSH
50216: CALL_OW 264
50220: PUSH
50221: LD_INT 81
50223: EQUAL
50224: AND
50225: IFFALSE 50246
// MinerDetonateMine ( unit , x , y ) ;
50227: LD_VAR 0 2
50231: PPUSH
50232: LD_VAR 0 4
50236: PPUSH
50237: LD_VAR 0 5
50241: PPUSH
50242: CALL 53301 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
50246: LD_VAR 0 1
50250: PUSH
50251: LD_INT 252
50253: EQUAL
50254: PUSH
50255: LD_VAR 0 2
50259: PPUSH
50260: CALL_OW 264
50264: PUSH
50265: LD_INT 81
50267: EQUAL
50268: AND
50269: IFFALSE 50290
// MinerCreateMinefield ( unit , x , y ) ;
50271: LD_VAR 0 2
50275: PPUSH
50276: LD_VAR 0 4
50280: PPUSH
50281: LD_VAR 0 5
50285: PPUSH
50286: CALL 53718 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
50290: LD_VAR 0 1
50294: PUSH
50295: LD_INT 253
50297: EQUAL
50298: PUSH
50299: LD_VAR 0 2
50303: PPUSH
50304: CALL_OW 257
50308: PUSH
50309: LD_INT 5
50311: EQUAL
50312: AND
50313: IFFALSE 50334
// ComBinocular ( unit , x , y ) ;
50315: LD_VAR 0 2
50319: PPUSH
50320: LD_VAR 0 4
50324: PPUSH
50325: LD_VAR 0 5
50329: PPUSH
50330: CALL 54087 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
50334: LD_VAR 0 1
50338: PUSH
50339: LD_INT 254
50341: EQUAL
50342: PUSH
50343: LD_VAR 0 2
50347: PPUSH
50348: CALL_OW 264
50352: PUSH
50353: LD_INT 99
50355: EQUAL
50356: AND
50357: PUSH
50358: LD_VAR 0 3
50362: PPUSH
50363: CALL_OW 263
50367: PUSH
50368: LD_INT 3
50370: EQUAL
50371: AND
50372: IFFALSE 50388
// HackDestroyVehicle ( unit , selectedUnit ) ;
50374: LD_VAR 0 2
50378: PPUSH
50379: LD_VAR 0 3
50383: PPUSH
50384: CALL 52390 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
50388: LD_VAR 0 1
50392: PUSH
50393: LD_INT 255
50395: EQUAL
50396: PUSH
50397: LD_VAR 0 2
50401: PPUSH
50402: CALL_OW 264
50406: PUSH
50407: LD_INT 14
50409: PUSH
50410: LD_INT 53
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: IN
50417: AND
50418: PUSH
50419: LD_VAR 0 4
50423: PPUSH
50424: LD_VAR 0 5
50428: PPUSH
50429: CALL_OW 488
50433: AND
50434: IFFALSE 50458
// CutTreeXYR ( unit , x , y , 12 ) ;
50436: LD_VAR 0 2
50440: PPUSH
50441: LD_VAR 0 4
50445: PPUSH
50446: LD_VAR 0 5
50450: PPUSH
50451: LD_INT 12
50453: PPUSH
50454: CALL 50553 0 4
// if cmd = 256 then
50458: LD_VAR 0 1
50462: PUSH
50463: LD_INT 256
50465: EQUAL
50466: IFFALSE 50487
// SetFactoryWaypoint ( unit , x , y ) ;
50468: LD_VAR 0 2
50472: PPUSH
50473: LD_VAR 0 4
50477: PPUSH
50478: LD_VAR 0 5
50482: PPUSH
50483: CALL 48468 0 3
// if cmd = 257 then
50487: LD_VAR 0 1
50491: PUSH
50492: LD_INT 257
50494: EQUAL
50495: IFFALSE 50516
// SetWarehouseGatheringPoint ( unit , x , y ) ;
50497: LD_VAR 0 2
50501: PPUSH
50502: LD_VAR 0 4
50506: PPUSH
50507: LD_VAR 0 5
50511: PPUSH
50512: CALL 48830 0 3
// if cmd = 258 then
50516: LD_VAR 0 1
50520: PUSH
50521: LD_INT 258
50523: EQUAL
50524: IFFALSE 50548
// BurnTreeXYR ( unit , x , y , 8 ) ;
50526: LD_VAR 0 2
50530: PPUSH
50531: LD_VAR 0 4
50535: PPUSH
50536: LD_VAR 0 5
50540: PPUSH
50541: LD_INT 8
50543: PPUSH
50544: CALL 50947 0 4
// end ;
50548: LD_VAR 0 6
50552: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
50553: LD_INT 0
50555: PPUSH
50556: PPUSH
50557: PPUSH
50558: PPUSH
50559: PPUSH
50560: PPUSH
50561: PPUSH
50562: PPUSH
50563: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
50564: LD_VAR 0 1
50568: PPUSH
50569: CALL_OW 302
50573: NOT
50574: PUSH
50575: LD_VAR 0 2
50579: PPUSH
50580: LD_VAR 0 3
50584: PPUSH
50585: CALL_OW 488
50589: NOT
50590: OR
50591: PUSH
50592: LD_VAR 0 4
50596: NOT
50597: OR
50598: IFFALSE 50602
// exit ;
50600: GO 50942
// list := [ ] ;
50602: LD_ADDR_VAR 0 13
50606: PUSH
50607: EMPTY
50608: ST_TO_ADDR
// if x - r < 0 then
50609: LD_VAR 0 2
50613: PUSH
50614: LD_VAR 0 4
50618: MINUS
50619: PUSH
50620: LD_INT 0
50622: LESS
50623: IFFALSE 50635
// min_x := 0 else
50625: LD_ADDR_VAR 0 7
50629: PUSH
50630: LD_INT 0
50632: ST_TO_ADDR
50633: GO 50651
// min_x := x - r ;
50635: LD_ADDR_VAR 0 7
50639: PUSH
50640: LD_VAR 0 2
50644: PUSH
50645: LD_VAR 0 4
50649: MINUS
50650: ST_TO_ADDR
// if y - r < 0 then
50651: LD_VAR 0 3
50655: PUSH
50656: LD_VAR 0 4
50660: MINUS
50661: PUSH
50662: LD_INT 0
50664: LESS
50665: IFFALSE 50677
// min_y := 0 else
50667: LD_ADDR_VAR 0 8
50671: PUSH
50672: LD_INT 0
50674: ST_TO_ADDR
50675: GO 50693
// min_y := y - r ;
50677: LD_ADDR_VAR 0 8
50681: PUSH
50682: LD_VAR 0 3
50686: PUSH
50687: LD_VAR 0 4
50691: MINUS
50692: ST_TO_ADDR
// max_x := x + r ;
50693: LD_ADDR_VAR 0 9
50697: PUSH
50698: LD_VAR 0 2
50702: PUSH
50703: LD_VAR 0 4
50707: PLUS
50708: ST_TO_ADDR
// max_y := y + r ;
50709: LD_ADDR_VAR 0 10
50713: PUSH
50714: LD_VAR 0 3
50718: PUSH
50719: LD_VAR 0 4
50723: PLUS
50724: ST_TO_ADDR
// for _x = min_x to max_x do
50725: LD_ADDR_VAR 0 11
50729: PUSH
50730: DOUBLE
50731: LD_VAR 0 7
50735: DEC
50736: ST_TO_ADDR
50737: LD_VAR 0 9
50741: PUSH
50742: FOR_TO
50743: IFFALSE 50860
// for _y = min_y to max_y do
50745: LD_ADDR_VAR 0 12
50749: PUSH
50750: DOUBLE
50751: LD_VAR 0 8
50755: DEC
50756: ST_TO_ADDR
50757: LD_VAR 0 10
50761: PUSH
50762: FOR_TO
50763: IFFALSE 50856
// begin if not ValidHex ( _x , _y ) then
50765: LD_VAR 0 11
50769: PPUSH
50770: LD_VAR 0 12
50774: PPUSH
50775: CALL_OW 488
50779: NOT
50780: IFFALSE 50784
// continue ;
50782: GO 50762
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
50784: LD_VAR 0 11
50788: PPUSH
50789: LD_VAR 0 12
50793: PPUSH
50794: CALL_OW 351
50798: PUSH
50799: LD_VAR 0 11
50803: PPUSH
50804: LD_VAR 0 12
50808: PPUSH
50809: CALL_OW 554
50813: AND
50814: IFFALSE 50854
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
50816: LD_ADDR_VAR 0 13
50820: PUSH
50821: LD_VAR 0 13
50825: PPUSH
50826: LD_VAR 0 13
50830: PUSH
50831: LD_INT 1
50833: PLUS
50834: PPUSH
50835: LD_VAR 0 11
50839: PUSH
50840: LD_VAR 0 12
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PPUSH
50849: CALL_OW 2
50853: ST_TO_ADDR
// end ;
50854: GO 50762
50856: POP
50857: POP
50858: GO 50742
50860: POP
50861: POP
// if not list then
50862: LD_VAR 0 13
50866: NOT
50867: IFFALSE 50871
// exit ;
50869: GO 50942
// for i in list do
50871: LD_ADDR_VAR 0 6
50875: PUSH
50876: LD_VAR 0 13
50880: PUSH
50881: FOR_IN
50882: IFFALSE 50940
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
50884: LD_VAR 0 1
50888: PPUSH
50889: LD_STRING M
50891: PUSH
50892: LD_VAR 0 6
50896: PUSH
50897: LD_INT 1
50899: ARRAY
50900: PUSH
50901: LD_VAR 0 6
50905: PUSH
50906: LD_INT 2
50908: ARRAY
50909: PUSH
50910: LD_INT 0
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: LD_INT 0
50918: PUSH
50919: LD_INT 0
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: PUSH
50931: EMPTY
50932: LIST
50933: PPUSH
50934: CALL_OW 447
50938: GO 50881
50940: POP
50941: POP
// end ;
50942: LD_VAR 0 5
50946: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
50947: LD_INT 0
50949: PPUSH
50950: PPUSH
50951: PPUSH
50952: PPUSH
50953: PPUSH
50954: PPUSH
50955: PPUSH
50956: PPUSH
50957: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
50958: LD_VAR 0 1
50962: PPUSH
50963: CALL_OW 302
50967: NOT
50968: PUSH
50969: LD_VAR 0 2
50973: PPUSH
50974: LD_VAR 0 3
50978: PPUSH
50979: CALL_OW 488
50983: NOT
50984: OR
50985: PUSH
50986: LD_VAR 0 4
50990: NOT
50991: OR
50992: IFFALSE 50996
// exit ;
50994: GO 51344
// list := [ ] ;
50996: LD_ADDR_VAR 0 13
51000: PUSH
51001: EMPTY
51002: ST_TO_ADDR
// if x - r < 0 then
51003: LD_VAR 0 2
51007: PUSH
51008: LD_VAR 0 4
51012: MINUS
51013: PUSH
51014: LD_INT 0
51016: LESS
51017: IFFALSE 51029
// min_x := 0 else
51019: LD_ADDR_VAR 0 7
51023: PUSH
51024: LD_INT 0
51026: ST_TO_ADDR
51027: GO 51045
// min_x := x - r ;
51029: LD_ADDR_VAR 0 7
51033: PUSH
51034: LD_VAR 0 2
51038: PUSH
51039: LD_VAR 0 4
51043: MINUS
51044: ST_TO_ADDR
// if y - r < 0 then
51045: LD_VAR 0 3
51049: PUSH
51050: LD_VAR 0 4
51054: MINUS
51055: PUSH
51056: LD_INT 0
51058: LESS
51059: IFFALSE 51071
// min_y := 0 else
51061: LD_ADDR_VAR 0 8
51065: PUSH
51066: LD_INT 0
51068: ST_TO_ADDR
51069: GO 51087
// min_y := y - r ;
51071: LD_ADDR_VAR 0 8
51075: PUSH
51076: LD_VAR 0 3
51080: PUSH
51081: LD_VAR 0 4
51085: MINUS
51086: ST_TO_ADDR
// max_x := x + r ;
51087: LD_ADDR_VAR 0 9
51091: PUSH
51092: LD_VAR 0 2
51096: PUSH
51097: LD_VAR 0 4
51101: PLUS
51102: ST_TO_ADDR
// max_y := y + r ;
51103: LD_ADDR_VAR 0 10
51107: PUSH
51108: LD_VAR 0 3
51112: PUSH
51113: LD_VAR 0 4
51117: PLUS
51118: ST_TO_ADDR
// for _x = min_x to max_x do
51119: LD_ADDR_VAR 0 11
51123: PUSH
51124: DOUBLE
51125: LD_VAR 0 7
51129: DEC
51130: ST_TO_ADDR
51131: LD_VAR 0 9
51135: PUSH
51136: FOR_TO
51137: IFFALSE 51254
// for _y = min_y to max_y do
51139: LD_ADDR_VAR 0 12
51143: PUSH
51144: DOUBLE
51145: LD_VAR 0 8
51149: DEC
51150: ST_TO_ADDR
51151: LD_VAR 0 10
51155: PUSH
51156: FOR_TO
51157: IFFALSE 51250
// begin if not ValidHex ( _x , _y ) then
51159: LD_VAR 0 11
51163: PPUSH
51164: LD_VAR 0 12
51168: PPUSH
51169: CALL_OW 488
51173: NOT
51174: IFFALSE 51178
// continue ;
51176: GO 51156
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
51178: LD_VAR 0 11
51182: PPUSH
51183: LD_VAR 0 12
51187: PPUSH
51188: CALL_OW 351
51192: PUSH
51193: LD_VAR 0 11
51197: PPUSH
51198: LD_VAR 0 12
51202: PPUSH
51203: CALL_OW 554
51207: AND
51208: IFFALSE 51248
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
51210: LD_ADDR_VAR 0 13
51214: PUSH
51215: LD_VAR 0 13
51219: PPUSH
51220: LD_VAR 0 13
51224: PUSH
51225: LD_INT 1
51227: PLUS
51228: PPUSH
51229: LD_VAR 0 11
51233: PUSH
51234: LD_VAR 0 12
51238: PUSH
51239: EMPTY
51240: LIST
51241: LIST
51242: PPUSH
51243: CALL_OW 2
51247: ST_TO_ADDR
// end ;
51248: GO 51156
51250: POP
51251: POP
51252: GO 51136
51254: POP
51255: POP
// if not list then
51256: LD_VAR 0 13
51260: NOT
51261: IFFALSE 51265
// exit ;
51263: GO 51344
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
51265: LD_ADDR_VAR 0 13
51269: PUSH
51270: LD_VAR 0 1
51274: PPUSH
51275: LD_VAR 0 13
51279: PPUSH
51280: LD_INT 1
51282: PPUSH
51283: LD_INT 1
51285: PPUSH
51286: CALL 59957 0 4
51290: ST_TO_ADDR
// ComStop ( flame ) ;
51291: LD_VAR 0 1
51295: PPUSH
51296: CALL_OW 141
// for i in list do
51300: LD_ADDR_VAR 0 6
51304: PUSH
51305: LD_VAR 0 13
51309: PUSH
51310: FOR_IN
51311: IFFALSE 51342
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
51313: LD_VAR 0 1
51317: PPUSH
51318: LD_VAR 0 6
51322: PUSH
51323: LD_INT 1
51325: ARRAY
51326: PPUSH
51327: LD_VAR 0 6
51331: PUSH
51332: LD_INT 2
51334: ARRAY
51335: PPUSH
51336: CALL_OW 176
51340: GO 51310
51342: POP
51343: POP
// end ;
51344: LD_VAR 0 5
51348: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
51349: LD_EXP 148
51353: NOT
51354: IFFALSE 51404
51356: GO 51358
51358: DISABLE
// begin initHack := true ;
51359: LD_ADDR_EXP 148
51363: PUSH
51364: LD_INT 1
51366: ST_TO_ADDR
// hackTanks := [ ] ;
51367: LD_ADDR_EXP 149
51371: PUSH
51372: EMPTY
51373: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
51374: LD_ADDR_EXP 150
51378: PUSH
51379: EMPTY
51380: ST_TO_ADDR
// hackLimit := 3 ;
51381: LD_ADDR_EXP 151
51385: PUSH
51386: LD_INT 3
51388: ST_TO_ADDR
// hackDist := 12 ;
51389: LD_ADDR_EXP 152
51393: PUSH
51394: LD_INT 12
51396: ST_TO_ADDR
// hackCounter := [ ] ;
51397: LD_ADDR_EXP 153
51401: PUSH
51402: EMPTY
51403: ST_TO_ADDR
// end ;
51404: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
51405: LD_EXP 148
51409: PUSH
51410: LD_INT 34
51412: PUSH
51413: LD_INT 99
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PPUSH
51420: CALL_OW 69
51424: AND
51425: IFFALSE 51678
51427: GO 51429
51429: DISABLE
51430: LD_INT 0
51432: PPUSH
51433: PPUSH
// begin enable ;
51434: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
51435: LD_ADDR_VAR 0 1
51439: PUSH
51440: LD_INT 34
51442: PUSH
51443: LD_INT 99
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PPUSH
51450: CALL_OW 69
51454: PUSH
51455: FOR_IN
51456: IFFALSE 51676
// begin if not i in hackTanks then
51458: LD_VAR 0 1
51462: PUSH
51463: LD_EXP 149
51467: IN
51468: NOT
51469: IFFALSE 51552
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
51471: LD_ADDR_EXP 149
51475: PUSH
51476: LD_EXP 149
51480: PPUSH
51481: LD_EXP 149
51485: PUSH
51486: LD_INT 1
51488: PLUS
51489: PPUSH
51490: LD_VAR 0 1
51494: PPUSH
51495: CALL_OW 1
51499: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
51500: LD_ADDR_EXP 150
51504: PUSH
51505: LD_EXP 150
51509: PPUSH
51510: LD_EXP 150
51514: PUSH
51515: LD_INT 1
51517: PLUS
51518: PPUSH
51519: EMPTY
51520: PPUSH
51521: CALL_OW 1
51525: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
51526: LD_ADDR_EXP 153
51530: PUSH
51531: LD_EXP 153
51535: PPUSH
51536: LD_EXP 153
51540: PUSH
51541: LD_INT 1
51543: PLUS
51544: PPUSH
51545: EMPTY
51546: PPUSH
51547: CALL_OW 1
51551: ST_TO_ADDR
// end ; if not IsOk ( i ) then
51552: LD_VAR 0 1
51556: PPUSH
51557: CALL_OW 302
51561: NOT
51562: IFFALSE 51575
// begin HackUnlinkAll ( i ) ;
51564: LD_VAR 0 1
51568: PPUSH
51569: CALL 51681 0 1
// continue ;
51573: GO 51455
// end ; HackCheckCapturedStatus ( i ) ;
51575: LD_VAR 0 1
51579: PPUSH
51580: CALL 52124 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
51584: LD_ADDR_VAR 0 2
51588: PUSH
51589: LD_INT 81
51591: PUSH
51592: LD_VAR 0 1
51596: PPUSH
51597: CALL_OW 255
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 33
51608: PUSH
51609: LD_INT 3
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 91
51618: PUSH
51619: LD_VAR 0 1
51623: PUSH
51624: LD_EXP 152
51628: PUSH
51629: EMPTY
51630: LIST
51631: LIST
51632: LIST
51633: PUSH
51634: LD_INT 50
51636: PUSH
51637: EMPTY
51638: LIST
51639: PUSH
51640: EMPTY
51641: LIST
51642: LIST
51643: LIST
51644: LIST
51645: PPUSH
51646: CALL_OW 69
51650: ST_TO_ADDR
// if not tmp then
51651: LD_VAR 0 2
51655: NOT
51656: IFFALSE 51660
// continue ;
51658: GO 51455
// HackLink ( i , tmp ) ;
51660: LD_VAR 0 1
51664: PPUSH
51665: LD_VAR 0 2
51669: PPUSH
51670: CALL 51817 0 2
// end ;
51674: GO 51455
51676: POP
51677: POP
// end ;
51678: PPOPN 2
51680: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
51681: LD_INT 0
51683: PPUSH
51684: PPUSH
51685: PPUSH
// if not hack in hackTanks then
51686: LD_VAR 0 1
51690: PUSH
51691: LD_EXP 149
51695: IN
51696: NOT
51697: IFFALSE 51701
// exit ;
51699: GO 51812
// index := GetElementIndex ( hackTanks , hack ) ;
51701: LD_ADDR_VAR 0 4
51705: PUSH
51706: LD_EXP 149
51710: PPUSH
51711: LD_VAR 0 1
51715: PPUSH
51716: CALL 59254 0 2
51720: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
51721: LD_EXP 150
51725: PUSH
51726: LD_VAR 0 4
51730: ARRAY
51731: IFFALSE 51812
// begin for i in hackTanksCaptured [ index ] do
51733: LD_ADDR_VAR 0 3
51737: PUSH
51738: LD_EXP 150
51742: PUSH
51743: LD_VAR 0 4
51747: ARRAY
51748: PUSH
51749: FOR_IN
51750: IFFALSE 51776
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
51752: LD_VAR 0 3
51756: PUSH
51757: LD_INT 1
51759: ARRAY
51760: PPUSH
51761: LD_VAR 0 3
51765: PUSH
51766: LD_INT 2
51768: ARRAY
51769: PPUSH
51770: CALL_OW 235
51774: GO 51749
51776: POP
51777: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
51778: LD_ADDR_EXP 150
51782: PUSH
51783: LD_EXP 150
51787: PPUSH
51788: LD_VAR 0 4
51792: PPUSH
51793: EMPTY
51794: PPUSH
51795: CALL_OW 1
51799: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
51800: LD_VAR 0 1
51804: PPUSH
51805: LD_INT 0
51807: PPUSH
51808: CALL_OW 505
// end ; end ;
51812: LD_VAR 0 2
51816: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
51817: LD_INT 0
51819: PPUSH
51820: PPUSH
51821: PPUSH
// if not hack in hackTanks or not vehicles then
51822: LD_VAR 0 1
51826: PUSH
51827: LD_EXP 149
51831: IN
51832: NOT
51833: PUSH
51834: LD_VAR 0 2
51838: NOT
51839: OR
51840: IFFALSE 51844
// exit ;
51842: GO 52119
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
51844: LD_ADDR_VAR 0 2
51848: PUSH
51849: LD_VAR 0 1
51853: PPUSH
51854: LD_VAR 0 2
51858: PPUSH
51859: LD_INT 1
51861: PPUSH
51862: LD_INT 1
51864: PPUSH
51865: CALL 59904 0 4
51869: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
51870: LD_ADDR_VAR 0 5
51874: PUSH
51875: LD_EXP 149
51879: PPUSH
51880: LD_VAR 0 1
51884: PPUSH
51885: CALL 59254 0 2
51889: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
51890: LD_EXP 150
51894: PUSH
51895: LD_VAR 0 5
51899: ARRAY
51900: PUSH
51901: LD_EXP 151
51905: LESS
51906: IFFALSE 52095
// begin for i := 1 to vehicles do
51908: LD_ADDR_VAR 0 4
51912: PUSH
51913: DOUBLE
51914: LD_INT 1
51916: DEC
51917: ST_TO_ADDR
51918: LD_VAR 0 2
51922: PUSH
51923: FOR_TO
51924: IFFALSE 52093
// begin if hackTanksCaptured [ index ] = hackLimit then
51926: LD_EXP 150
51930: PUSH
51931: LD_VAR 0 5
51935: ARRAY
51936: PUSH
51937: LD_EXP 151
51941: EQUAL
51942: IFFALSE 51946
// break ;
51944: GO 52093
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
51946: LD_ADDR_EXP 153
51950: PUSH
51951: LD_EXP 153
51955: PPUSH
51956: LD_VAR 0 5
51960: PPUSH
51961: LD_EXP 153
51965: PUSH
51966: LD_VAR 0 5
51970: ARRAY
51971: PUSH
51972: LD_INT 1
51974: PLUS
51975: PPUSH
51976: CALL_OW 1
51980: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
51981: LD_ADDR_EXP 150
51985: PUSH
51986: LD_EXP 150
51990: PPUSH
51991: LD_VAR 0 5
51995: PUSH
51996: LD_EXP 150
52000: PUSH
52001: LD_VAR 0 5
52005: ARRAY
52006: PUSH
52007: LD_INT 1
52009: PLUS
52010: PUSH
52011: EMPTY
52012: LIST
52013: LIST
52014: PPUSH
52015: LD_VAR 0 2
52019: PUSH
52020: LD_VAR 0 4
52024: ARRAY
52025: PUSH
52026: LD_VAR 0 2
52030: PUSH
52031: LD_VAR 0 4
52035: ARRAY
52036: PPUSH
52037: CALL_OW 255
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PPUSH
52046: CALL 59469 0 3
52050: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
52051: LD_VAR 0 2
52055: PUSH
52056: LD_VAR 0 4
52060: ARRAY
52061: PPUSH
52062: LD_VAR 0 1
52066: PPUSH
52067: CALL_OW 255
52071: PPUSH
52072: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
52076: LD_VAR 0 2
52080: PUSH
52081: LD_VAR 0 4
52085: ARRAY
52086: PPUSH
52087: CALL_OW 141
// end ;
52091: GO 51923
52093: POP
52094: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
52095: LD_VAR 0 1
52099: PPUSH
52100: LD_EXP 150
52104: PUSH
52105: LD_VAR 0 5
52109: ARRAY
52110: PUSH
52111: LD_INT 0
52113: PLUS
52114: PPUSH
52115: CALL_OW 505
// end ;
52119: LD_VAR 0 3
52123: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
52124: LD_INT 0
52126: PPUSH
52127: PPUSH
52128: PPUSH
52129: PPUSH
// if not hack in hackTanks then
52130: LD_VAR 0 1
52134: PUSH
52135: LD_EXP 149
52139: IN
52140: NOT
52141: IFFALSE 52145
// exit ;
52143: GO 52385
// index := GetElementIndex ( hackTanks , hack ) ;
52145: LD_ADDR_VAR 0 4
52149: PUSH
52150: LD_EXP 149
52154: PPUSH
52155: LD_VAR 0 1
52159: PPUSH
52160: CALL 59254 0 2
52164: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
52165: LD_ADDR_VAR 0 3
52169: PUSH
52170: DOUBLE
52171: LD_EXP 150
52175: PUSH
52176: LD_VAR 0 4
52180: ARRAY
52181: INC
52182: ST_TO_ADDR
52183: LD_INT 1
52185: PUSH
52186: FOR_DOWNTO
52187: IFFALSE 52359
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
52189: LD_ADDR_VAR 0 5
52193: PUSH
52194: LD_EXP 150
52198: PUSH
52199: LD_VAR 0 4
52203: ARRAY
52204: PUSH
52205: LD_VAR 0 3
52209: ARRAY
52210: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
52211: LD_VAR 0 5
52215: PUSH
52216: LD_INT 1
52218: ARRAY
52219: PPUSH
52220: CALL_OW 302
52224: NOT
52225: PUSH
52226: LD_VAR 0 5
52230: PUSH
52231: LD_INT 1
52233: ARRAY
52234: PPUSH
52235: CALL_OW 255
52239: PUSH
52240: LD_VAR 0 1
52244: PPUSH
52245: CALL_OW 255
52249: NONEQUAL
52250: OR
52251: IFFALSE 52357
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
52253: LD_VAR 0 5
52257: PUSH
52258: LD_INT 1
52260: ARRAY
52261: PPUSH
52262: CALL_OW 305
52266: PUSH
52267: LD_VAR 0 5
52271: PUSH
52272: LD_INT 1
52274: ARRAY
52275: PPUSH
52276: CALL_OW 255
52280: PUSH
52281: LD_VAR 0 1
52285: PPUSH
52286: CALL_OW 255
52290: EQUAL
52291: AND
52292: IFFALSE 52316
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
52294: LD_VAR 0 5
52298: PUSH
52299: LD_INT 1
52301: ARRAY
52302: PPUSH
52303: LD_VAR 0 5
52307: PUSH
52308: LD_INT 2
52310: ARRAY
52311: PPUSH
52312: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
52316: LD_ADDR_EXP 150
52320: PUSH
52321: LD_EXP 150
52325: PPUSH
52326: LD_VAR 0 4
52330: PPUSH
52331: LD_EXP 150
52335: PUSH
52336: LD_VAR 0 4
52340: ARRAY
52341: PPUSH
52342: LD_VAR 0 3
52346: PPUSH
52347: CALL_OW 3
52351: PPUSH
52352: CALL_OW 1
52356: ST_TO_ADDR
// end ; end ;
52357: GO 52186
52359: POP
52360: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
52361: LD_VAR 0 1
52365: PPUSH
52366: LD_EXP 150
52370: PUSH
52371: LD_VAR 0 4
52375: ARRAY
52376: PUSH
52377: LD_INT 0
52379: PLUS
52380: PPUSH
52381: CALL_OW 505
// end ;
52385: LD_VAR 0 2
52389: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
52390: LD_INT 0
52392: PPUSH
52393: PPUSH
52394: PPUSH
52395: PPUSH
// if not hack in hackTanks then
52396: LD_VAR 0 1
52400: PUSH
52401: LD_EXP 149
52405: IN
52406: NOT
52407: IFFALSE 52411
// exit ;
52409: GO 52496
// index := GetElementIndex ( hackTanks , hack ) ;
52411: LD_ADDR_VAR 0 5
52415: PUSH
52416: LD_EXP 149
52420: PPUSH
52421: LD_VAR 0 1
52425: PPUSH
52426: CALL 59254 0 2
52430: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
52431: LD_ADDR_VAR 0 4
52435: PUSH
52436: DOUBLE
52437: LD_INT 1
52439: DEC
52440: ST_TO_ADDR
52441: LD_EXP 150
52445: PUSH
52446: LD_VAR 0 5
52450: ARRAY
52451: PUSH
52452: FOR_TO
52453: IFFALSE 52494
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
52455: LD_EXP 150
52459: PUSH
52460: LD_VAR 0 5
52464: ARRAY
52465: PUSH
52466: LD_VAR 0 4
52470: ARRAY
52471: PUSH
52472: LD_INT 1
52474: ARRAY
52475: PUSH
52476: LD_VAR 0 2
52480: EQUAL
52481: IFFALSE 52492
// KillUnit ( vehicle ) ;
52483: LD_VAR 0 2
52487: PPUSH
52488: CALL_OW 66
52492: GO 52452
52494: POP
52495: POP
// end ;
52496: LD_VAR 0 3
52500: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
52501: LD_EXP 154
52505: NOT
52506: IFFALSE 52541
52508: GO 52510
52510: DISABLE
// begin initMiner := true ;
52511: LD_ADDR_EXP 154
52515: PUSH
52516: LD_INT 1
52518: ST_TO_ADDR
// minersList := [ ] ;
52519: LD_ADDR_EXP 155
52523: PUSH
52524: EMPTY
52525: ST_TO_ADDR
// minerMinesList := [ ] ;
52526: LD_ADDR_EXP 156
52530: PUSH
52531: EMPTY
52532: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
52533: LD_ADDR_EXP 157
52537: PUSH
52538: LD_INT 5
52540: ST_TO_ADDR
// end ;
52541: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
52542: LD_EXP 154
52546: PUSH
52547: LD_INT 34
52549: PUSH
52550: LD_INT 81
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PPUSH
52557: CALL_OW 69
52561: AND
52562: IFFALSE 53023
52564: GO 52566
52566: DISABLE
52567: LD_INT 0
52569: PPUSH
52570: PPUSH
52571: PPUSH
52572: PPUSH
// begin enable ;
52573: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
52574: LD_ADDR_VAR 0 1
52578: PUSH
52579: LD_INT 34
52581: PUSH
52582: LD_INT 81
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PPUSH
52589: CALL_OW 69
52593: PUSH
52594: FOR_IN
52595: IFFALSE 52667
// begin if not i in minersList then
52597: LD_VAR 0 1
52601: PUSH
52602: LD_EXP 155
52606: IN
52607: NOT
52608: IFFALSE 52665
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
52610: LD_ADDR_EXP 155
52614: PUSH
52615: LD_EXP 155
52619: PPUSH
52620: LD_EXP 155
52624: PUSH
52625: LD_INT 1
52627: PLUS
52628: PPUSH
52629: LD_VAR 0 1
52633: PPUSH
52634: CALL_OW 1
52638: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
52639: LD_ADDR_EXP 156
52643: PUSH
52644: LD_EXP 156
52648: PPUSH
52649: LD_EXP 156
52653: PUSH
52654: LD_INT 1
52656: PLUS
52657: PPUSH
52658: EMPTY
52659: PPUSH
52660: CALL_OW 1
52664: ST_TO_ADDR
// end end ;
52665: GO 52594
52667: POP
52668: POP
// for i := minerMinesList downto 1 do
52669: LD_ADDR_VAR 0 1
52673: PUSH
52674: DOUBLE
52675: LD_EXP 156
52679: INC
52680: ST_TO_ADDR
52681: LD_INT 1
52683: PUSH
52684: FOR_DOWNTO
52685: IFFALSE 53021
// begin if IsLive ( minersList [ i ] ) then
52687: LD_EXP 155
52691: PUSH
52692: LD_VAR 0 1
52696: ARRAY
52697: PPUSH
52698: CALL_OW 300
52702: IFFALSE 52730
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
52704: LD_EXP 155
52708: PUSH
52709: LD_VAR 0 1
52713: ARRAY
52714: PPUSH
52715: LD_EXP 156
52719: PUSH
52720: LD_VAR 0 1
52724: ARRAY
52725: PPUSH
52726: CALL_OW 505
// if not minerMinesList [ i ] then
52730: LD_EXP 156
52734: PUSH
52735: LD_VAR 0 1
52739: ARRAY
52740: NOT
52741: IFFALSE 52745
// continue ;
52743: GO 52684
// for j := minerMinesList [ i ] downto 1 do
52745: LD_ADDR_VAR 0 2
52749: PUSH
52750: DOUBLE
52751: LD_EXP 156
52755: PUSH
52756: LD_VAR 0 1
52760: ARRAY
52761: INC
52762: ST_TO_ADDR
52763: LD_INT 1
52765: PUSH
52766: FOR_DOWNTO
52767: IFFALSE 53017
// begin side := GetSide ( minersList [ i ] ) ;
52769: LD_ADDR_VAR 0 3
52773: PUSH
52774: LD_EXP 155
52778: PUSH
52779: LD_VAR 0 1
52783: ARRAY
52784: PPUSH
52785: CALL_OW 255
52789: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
52790: LD_ADDR_VAR 0 4
52794: PUSH
52795: LD_EXP 156
52799: PUSH
52800: LD_VAR 0 1
52804: ARRAY
52805: PUSH
52806: LD_VAR 0 2
52810: ARRAY
52811: PUSH
52812: LD_INT 1
52814: ARRAY
52815: PPUSH
52816: LD_EXP 156
52820: PUSH
52821: LD_VAR 0 1
52825: ARRAY
52826: PUSH
52827: LD_VAR 0 2
52831: ARRAY
52832: PUSH
52833: LD_INT 2
52835: ARRAY
52836: PPUSH
52837: CALL_OW 428
52841: ST_TO_ADDR
// if not tmp then
52842: LD_VAR 0 4
52846: NOT
52847: IFFALSE 52851
// continue ;
52849: GO 52766
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
52851: LD_VAR 0 4
52855: PUSH
52856: LD_INT 81
52858: PUSH
52859: LD_VAR 0 3
52863: PUSH
52864: EMPTY
52865: LIST
52866: LIST
52867: PPUSH
52868: CALL_OW 69
52872: IN
52873: PUSH
52874: LD_EXP 156
52878: PUSH
52879: LD_VAR 0 1
52883: ARRAY
52884: PUSH
52885: LD_VAR 0 2
52889: ARRAY
52890: PUSH
52891: LD_INT 1
52893: ARRAY
52894: PPUSH
52895: LD_EXP 156
52899: PUSH
52900: LD_VAR 0 1
52904: ARRAY
52905: PUSH
52906: LD_VAR 0 2
52910: ARRAY
52911: PUSH
52912: LD_INT 2
52914: ARRAY
52915: PPUSH
52916: CALL_OW 458
52920: AND
52921: IFFALSE 53015
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
52923: LD_EXP 156
52927: PUSH
52928: LD_VAR 0 1
52932: ARRAY
52933: PUSH
52934: LD_VAR 0 2
52938: ARRAY
52939: PUSH
52940: LD_INT 1
52942: ARRAY
52943: PPUSH
52944: LD_EXP 156
52948: PUSH
52949: LD_VAR 0 1
52953: ARRAY
52954: PUSH
52955: LD_VAR 0 2
52959: ARRAY
52960: PUSH
52961: LD_INT 2
52963: ARRAY
52964: PPUSH
52965: LD_VAR 0 3
52969: PPUSH
52970: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
52974: LD_ADDR_EXP 156
52978: PUSH
52979: LD_EXP 156
52983: PPUSH
52984: LD_VAR 0 1
52988: PPUSH
52989: LD_EXP 156
52993: PUSH
52994: LD_VAR 0 1
52998: ARRAY
52999: PPUSH
53000: LD_VAR 0 2
53004: PPUSH
53005: CALL_OW 3
53009: PPUSH
53010: CALL_OW 1
53014: ST_TO_ADDR
// end ; end ;
53015: GO 52766
53017: POP
53018: POP
// end ;
53019: GO 52684
53021: POP
53022: POP
// end ;
53023: PPOPN 4
53025: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
53026: LD_INT 0
53028: PPUSH
53029: PPUSH
// result := false ;
53030: LD_ADDR_VAR 0 4
53034: PUSH
53035: LD_INT 0
53037: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
53038: LD_VAR 0 1
53042: PPUSH
53043: CALL_OW 264
53047: PUSH
53048: LD_INT 81
53050: EQUAL
53051: NOT
53052: IFFALSE 53056
// exit ;
53054: GO 53296
// index := GetElementIndex ( minersList , unit ) ;
53056: LD_ADDR_VAR 0 5
53060: PUSH
53061: LD_EXP 155
53065: PPUSH
53066: LD_VAR 0 1
53070: PPUSH
53071: CALL 59254 0 2
53075: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
53076: LD_EXP 156
53080: PUSH
53081: LD_VAR 0 5
53085: ARRAY
53086: PUSH
53087: LD_EXP 157
53091: GREATEREQUAL
53092: IFFALSE 53096
// exit ;
53094: GO 53296
// ComMoveXY ( unit , x , y ) ;
53096: LD_VAR 0 1
53100: PPUSH
53101: LD_VAR 0 2
53105: PPUSH
53106: LD_VAR 0 3
53110: PPUSH
53111: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
53115: LD_INT 35
53117: PPUSH
53118: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
53122: LD_VAR 0 1
53126: PPUSH
53127: LD_VAR 0 2
53131: PPUSH
53132: LD_VAR 0 3
53136: PPUSH
53137: CALL 91006 0 3
53141: NOT
53142: PUSH
53143: LD_VAR 0 1
53147: PPUSH
53148: CALL_OW 314
53152: AND
53153: IFFALSE 53157
// exit ;
53155: GO 53296
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
53157: LD_VAR 0 2
53161: PPUSH
53162: LD_VAR 0 3
53166: PPUSH
53167: CALL_OW 428
53171: PUSH
53172: LD_VAR 0 1
53176: EQUAL
53177: PUSH
53178: LD_VAR 0 1
53182: PPUSH
53183: CALL_OW 314
53187: NOT
53188: AND
53189: IFFALSE 53115
// PlaySoundXY ( x , y , PlantMine ) ;
53191: LD_VAR 0 2
53195: PPUSH
53196: LD_VAR 0 3
53200: PPUSH
53201: LD_STRING PlantMine
53203: PPUSH
53204: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
53208: LD_VAR 0 2
53212: PPUSH
53213: LD_VAR 0 3
53217: PPUSH
53218: LD_VAR 0 1
53222: PPUSH
53223: CALL_OW 255
53227: PPUSH
53228: LD_INT 0
53230: PPUSH
53231: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
53235: LD_ADDR_EXP 156
53239: PUSH
53240: LD_EXP 156
53244: PPUSH
53245: LD_VAR 0 5
53249: PUSH
53250: LD_EXP 156
53254: PUSH
53255: LD_VAR 0 5
53259: ARRAY
53260: PUSH
53261: LD_INT 1
53263: PLUS
53264: PUSH
53265: EMPTY
53266: LIST
53267: LIST
53268: PPUSH
53269: LD_VAR 0 2
53273: PUSH
53274: LD_VAR 0 3
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PPUSH
53283: CALL 59469 0 3
53287: ST_TO_ADDR
// result := true ;
53288: LD_ADDR_VAR 0 4
53292: PUSH
53293: LD_INT 1
53295: ST_TO_ADDR
// end ;
53296: LD_VAR 0 4
53300: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
53301: LD_INT 0
53303: PPUSH
53304: PPUSH
53305: PPUSH
// if not unit in minersList then
53306: LD_VAR 0 1
53310: PUSH
53311: LD_EXP 155
53315: IN
53316: NOT
53317: IFFALSE 53321
// exit ;
53319: GO 53713
// index := GetElementIndex ( minersList , unit ) ;
53321: LD_ADDR_VAR 0 6
53325: PUSH
53326: LD_EXP 155
53330: PPUSH
53331: LD_VAR 0 1
53335: PPUSH
53336: CALL 59254 0 2
53340: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
53341: LD_ADDR_VAR 0 5
53345: PUSH
53346: DOUBLE
53347: LD_EXP 156
53351: PUSH
53352: LD_VAR 0 6
53356: ARRAY
53357: INC
53358: ST_TO_ADDR
53359: LD_INT 1
53361: PUSH
53362: FOR_DOWNTO
53363: IFFALSE 53524
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
53365: LD_EXP 156
53369: PUSH
53370: LD_VAR 0 6
53374: ARRAY
53375: PUSH
53376: LD_VAR 0 5
53380: ARRAY
53381: PUSH
53382: LD_INT 1
53384: ARRAY
53385: PUSH
53386: LD_VAR 0 2
53390: EQUAL
53391: PUSH
53392: LD_EXP 156
53396: PUSH
53397: LD_VAR 0 6
53401: ARRAY
53402: PUSH
53403: LD_VAR 0 5
53407: ARRAY
53408: PUSH
53409: LD_INT 2
53411: ARRAY
53412: PUSH
53413: LD_VAR 0 3
53417: EQUAL
53418: AND
53419: IFFALSE 53522
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
53421: LD_EXP 156
53425: PUSH
53426: LD_VAR 0 6
53430: ARRAY
53431: PUSH
53432: LD_VAR 0 5
53436: ARRAY
53437: PUSH
53438: LD_INT 1
53440: ARRAY
53441: PPUSH
53442: LD_EXP 156
53446: PUSH
53447: LD_VAR 0 6
53451: ARRAY
53452: PUSH
53453: LD_VAR 0 5
53457: ARRAY
53458: PUSH
53459: LD_INT 2
53461: ARRAY
53462: PPUSH
53463: LD_VAR 0 1
53467: PPUSH
53468: CALL_OW 255
53472: PPUSH
53473: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
53477: LD_ADDR_EXP 156
53481: PUSH
53482: LD_EXP 156
53486: PPUSH
53487: LD_VAR 0 6
53491: PPUSH
53492: LD_EXP 156
53496: PUSH
53497: LD_VAR 0 6
53501: ARRAY
53502: PPUSH
53503: LD_VAR 0 5
53507: PPUSH
53508: CALL_OW 3
53512: PPUSH
53513: CALL_OW 1
53517: ST_TO_ADDR
// exit ;
53518: POP
53519: POP
53520: GO 53713
// end ; end ;
53522: GO 53362
53524: POP
53525: POP
// for i := minerMinesList [ index ] downto 1 do
53526: LD_ADDR_VAR 0 5
53530: PUSH
53531: DOUBLE
53532: LD_EXP 156
53536: PUSH
53537: LD_VAR 0 6
53541: ARRAY
53542: INC
53543: ST_TO_ADDR
53544: LD_INT 1
53546: PUSH
53547: FOR_DOWNTO
53548: IFFALSE 53711
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
53550: LD_EXP 156
53554: PUSH
53555: LD_VAR 0 6
53559: ARRAY
53560: PUSH
53561: LD_VAR 0 5
53565: ARRAY
53566: PUSH
53567: LD_INT 1
53569: ARRAY
53570: PPUSH
53571: LD_EXP 156
53575: PUSH
53576: LD_VAR 0 6
53580: ARRAY
53581: PUSH
53582: LD_VAR 0 5
53586: ARRAY
53587: PUSH
53588: LD_INT 2
53590: ARRAY
53591: PPUSH
53592: LD_VAR 0 2
53596: PPUSH
53597: LD_VAR 0 3
53601: PPUSH
53602: CALL_OW 298
53606: PUSH
53607: LD_INT 6
53609: LESS
53610: IFFALSE 53709
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
53612: LD_EXP 156
53616: PUSH
53617: LD_VAR 0 6
53621: ARRAY
53622: PUSH
53623: LD_VAR 0 5
53627: ARRAY
53628: PUSH
53629: LD_INT 1
53631: ARRAY
53632: PPUSH
53633: LD_EXP 156
53637: PUSH
53638: LD_VAR 0 6
53642: ARRAY
53643: PUSH
53644: LD_VAR 0 5
53648: ARRAY
53649: PUSH
53650: LD_INT 2
53652: ARRAY
53653: PPUSH
53654: LD_VAR 0 1
53658: PPUSH
53659: CALL_OW 255
53663: PPUSH
53664: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
53668: LD_ADDR_EXP 156
53672: PUSH
53673: LD_EXP 156
53677: PPUSH
53678: LD_VAR 0 6
53682: PPUSH
53683: LD_EXP 156
53687: PUSH
53688: LD_VAR 0 6
53692: ARRAY
53693: PPUSH
53694: LD_VAR 0 5
53698: PPUSH
53699: CALL_OW 3
53703: PPUSH
53704: CALL_OW 1
53708: ST_TO_ADDR
// end ; end ;
53709: GO 53547
53711: POP
53712: POP
// end ;
53713: LD_VAR 0 4
53717: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
53718: LD_INT 0
53720: PPUSH
53721: PPUSH
53722: PPUSH
53723: PPUSH
53724: PPUSH
53725: PPUSH
53726: PPUSH
53727: PPUSH
53728: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
53729: LD_VAR 0 1
53733: PPUSH
53734: CALL_OW 264
53738: PUSH
53739: LD_INT 81
53741: EQUAL
53742: NOT
53743: PUSH
53744: LD_VAR 0 1
53748: PUSH
53749: LD_EXP 155
53753: IN
53754: NOT
53755: OR
53756: IFFALSE 53760
// exit ;
53758: GO 54082
// index := GetElementIndex ( minersList , unit ) ;
53760: LD_ADDR_VAR 0 6
53764: PUSH
53765: LD_EXP 155
53769: PPUSH
53770: LD_VAR 0 1
53774: PPUSH
53775: CALL 59254 0 2
53779: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
53780: LD_ADDR_VAR 0 8
53784: PUSH
53785: LD_EXP 157
53789: PUSH
53790: LD_EXP 156
53794: PUSH
53795: LD_VAR 0 6
53799: ARRAY
53800: MINUS
53801: ST_TO_ADDR
// if not minesFreeAmount then
53802: LD_VAR 0 8
53806: NOT
53807: IFFALSE 53811
// exit ;
53809: GO 54082
// tmp := [ ] ;
53811: LD_ADDR_VAR 0 7
53815: PUSH
53816: EMPTY
53817: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
53818: LD_ADDR_VAR 0 5
53822: PUSH
53823: DOUBLE
53824: LD_INT 1
53826: DEC
53827: ST_TO_ADDR
53828: LD_VAR 0 8
53832: PUSH
53833: FOR_TO
53834: IFFALSE 54029
// begin _d := rand ( 0 , 5 ) ;
53836: LD_ADDR_VAR 0 11
53840: PUSH
53841: LD_INT 0
53843: PPUSH
53844: LD_INT 5
53846: PPUSH
53847: CALL_OW 12
53851: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
53852: LD_ADDR_VAR 0 12
53856: PUSH
53857: LD_INT 2
53859: PPUSH
53860: LD_INT 6
53862: PPUSH
53863: CALL_OW 12
53867: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
53868: LD_ADDR_VAR 0 9
53872: PUSH
53873: LD_VAR 0 2
53877: PPUSH
53878: LD_VAR 0 11
53882: PPUSH
53883: LD_VAR 0 12
53887: PPUSH
53888: CALL_OW 272
53892: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
53893: LD_ADDR_VAR 0 10
53897: PUSH
53898: LD_VAR 0 3
53902: PPUSH
53903: LD_VAR 0 11
53907: PPUSH
53908: LD_VAR 0 12
53912: PPUSH
53913: CALL_OW 273
53917: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
53918: LD_VAR 0 9
53922: PPUSH
53923: LD_VAR 0 10
53927: PPUSH
53928: CALL_OW 488
53932: PUSH
53933: LD_VAR 0 9
53937: PUSH
53938: LD_VAR 0 10
53942: PUSH
53943: EMPTY
53944: LIST
53945: LIST
53946: PUSH
53947: LD_VAR 0 7
53951: IN
53952: NOT
53953: AND
53954: PUSH
53955: LD_VAR 0 9
53959: PPUSH
53960: LD_VAR 0 10
53964: PPUSH
53965: CALL_OW 458
53969: NOT
53970: AND
53971: IFFALSE 54013
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
53973: LD_ADDR_VAR 0 7
53977: PUSH
53978: LD_VAR 0 7
53982: PPUSH
53983: LD_VAR 0 7
53987: PUSH
53988: LD_INT 1
53990: PLUS
53991: PPUSH
53992: LD_VAR 0 9
53996: PUSH
53997: LD_VAR 0 10
54001: PUSH
54002: EMPTY
54003: LIST
54004: LIST
54005: PPUSH
54006: CALL_OW 1
54010: ST_TO_ADDR
54011: GO 54027
// i := i - 1 ;
54013: LD_ADDR_VAR 0 5
54017: PUSH
54018: LD_VAR 0 5
54022: PUSH
54023: LD_INT 1
54025: MINUS
54026: ST_TO_ADDR
// end ;
54027: GO 53833
54029: POP
54030: POP
// for i in tmp do
54031: LD_ADDR_VAR 0 5
54035: PUSH
54036: LD_VAR 0 7
54040: PUSH
54041: FOR_IN
54042: IFFALSE 54080
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
54044: LD_VAR 0 1
54048: PPUSH
54049: LD_VAR 0 5
54053: PUSH
54054: LD_INT 1
54056: ARRAY
54057: PPUSH
54058: LD_VAR 0 5
54062: PUSH
54063: LD_INT 2
54065: ARRAY
54066: PPUSH
54067: CALL 53026 0 3
54071: NOT
54072: IFFALSE 54078
// exit ;
54074: POP
54075: POP
54076: GO 54082
54078: GO 54041
54080: POP
54081: POP
// end ;
54082: LD_VAR 0 4
54086: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
54087: LD_INT 0
54089: PPUSH
54090: PPUSH
54091: PPUSH
54092: PPUSH
54093: PPUSH
54094: PPUSH
54095: PPUSH
// if not GetClass ( unit ) = class_sniper then
54096: LD_VAR 0 1
54100: PPUSH
54101: CALL_OW 257
54105: PUSH
54106: LD_INT 5
54108: EQUAL
54109: NOT
54110: IFFALSE 54114
// exit ;
54112: GO 54502
// dist := 8 ;
54114: LD_ADDR_VAR 0 5
54118: PUSH
54119: LD_INT 8
54121: ST_TO_ADDR
// viewRange := 12 ;
54122: LD_ADDR_VAR 0 7
54126: PUSH
54127: LD_INT 12
54129: ST_TO_ADDR
// side := GetSide ( unit ) ;
54130: LD_ADDR_VAR 0 6
54134: PUSH
54135: LD_VAR 0 1
54139: PPUSH
54140: CALL_OW 255
54144: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
54145: LD_INT 61
54147: PPUSH
54148: LD_VAR 0 6
54152: PPUSH
54153: CALL_OW 321
54157: PUSH
54158: LD_INT 2
54160: EQUAL
54161: IFFALSE 54171
// viewRange := 16 ;
54163: LD_ADDR_VAR 0 7
54167: PUSH
54168: LD_INT 16
54170: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
54171: LD_VAR 0 1
54175: PPUSH
54176: LD_VAR 0 2
54180: PPUSH
54181: LD_VAR 0 3
54185: PPUSH
54186: CALL_OW 297
54190: PUSH
54191: LD_VAR 0 5
54195: GREATER
54196: IFFALSE 54275
// begin ComMoveXY ( unit , x , y ) ;
54198: LD_VAR 0 1
54202: PPUSH
54203: LD_VAR 0 2
54207: PPUSH
54208: LD_VAR 0 3
54212: PPUSH
54213: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
54217: LD_INT 35
54219: PPUSH
54220: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
54224: LD_VAR 0 1
54228: PPUSH
54229: LD_VAR 0 2
54233: PPUSH
54234: LD_VAR 0 3
54238: PPUSH
54239: CALL 91006 0 3
54243: NOT
54244: IFFALSE 54248
// exit ;
54246: GO 54502
// until GetDistUnitXY ( unit , x , y ) < dist ;
54248: LD_VAR 0 1
54252: PPUSH
54253: LD_VAR 0 2
54257: PPUSH
54258: LD_VAR 0 3
54262: PPUSH
54263: CALL_OW 297
54267: PUSH
54268: LD_VAR 0 5
54272: LESS
54273: IFFALSE 54217
// end ; ComTurnXY ( unit , x , y ) ;
54275: LD_VAR 0 1
54279: PPUSH
54280: LD_VAR 0 2
54284: PPUSH
54285: LD_VAR 0 3
54289: PPUSH
54290: CALL_OW 118
// wait ( 5 ) ;
54294: LD_INT 5
54296: PPUSH
54297: CALL_OW 67
// _d := GetDir ( unit ) ;
54301: LD_ADDR_VAR 0 10
54305: PUSH
54306: LD_VAR 0 1
54310: PPUSH
54311: CALL_OW 254
54315: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
54316: LD_ADDR_VAR 0 8
54320: PUSH
54321: LD_VAR 0 1
54325: PPUSH
54326: CALL_OW 250
54330: PPUSH
54331: LD_VAR 0 10
54335: PPUSH
54336: LD_VAR 0 5
54340: PPUSH
54341: CALL_OW 272
54345: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
54346: LD_ADDR_VAR 0 9
54350: PUSH
54351: LD_VAR 0 1
54355: PPUSH
54356: CALL_OW 251
54360: PPUSH
54361: LD_VAR 0 10
54365: PPUSH
54366: LD_VAR 0 5
54370: PPUSH
54371: CALL_OW 273
54375: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54376: LD_VAR 0 8
54380: PPUSH
54381: LD_VAR 0 9
54385: PPUSH
54386: CALL_OW 488
54390: NOT
54391: IFFALSE 54395
// exit ;
54393: GO 54502
// ComAnimCustom ( unit , 1 ) ;
54395: LD_VAR 0 1
54399: PPUSH
54400: LD_INT 1
54402: PPUSH
54403: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
54407: LD_VAR 0 8
54411: PPUSH
54412: LD_VAR 0 9
54416: PPUSH
54417: LD_VAR 0 6
54421: PPUSH
54422: LD_VAR 0 7
54426: PPUSH
54427: CALL_OW 330
// repeat wait ( 1 ) ;
54431: LD_INT 1
54433: PPUSH
54434: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
54438: LD_VAR 0 1
54442: PPUSH
54443: CALL_OW 316
54447: PUSH
54448: LD_VAR 0 1
54452: PPUSH
54453: CALL_OW 314
54457: OR
54458: PUSH
54459: LD_VAR 0 1
54463: PPUSH
54464: CALL_OW 302
54468: NOT
54469: OR
54470: PUSH
54471: LD_VAR 0 1
54475: PPUSH
54476: CALL_OW 301
54480: OR
54481: IFFALSE 54431
// RemoveSeeing ( _x , _y , side ) ;
54483: LD_VAR 0 8
54487: PPUSH
54488: LD_VAR 0 9
54492: PPUSH
54493: LD_VAR 0 6
54497: PPUSH
54498: CALL_OW 331
// end ; end_of_file
54502: LD_VAR 0 4
54506: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
54507: LD_INT 0
54509: PPUSH
54510: PPUSH
// if exist_mode then
54511: LD_VAR 0 2
54515: IFFALSE 54540
// unit := CreateCharacter ( prefix & ident ) else
54517: LD_ADDR_VAR 0 5
54521: PUSH
54522: LD_VAR 0 3
54526: PUSH
54527: LD_VAR 0 1
54531: STR
54532: PPUSH
54533: CALL_OW 34
54537: ST_TO_ADDR
54538: GO 54555
// unit := NewCharacter ( ident ) ;
54540: LD_ADDR_VAR 0 5
54544: PUSH
54545: LD_VAR 0 1
54549: PPUSH
54550: CALL_OW 25
54554: ST_TO_ADDR
// result := unit ;
54555: LD_ADDR_VAR 0 4
54559: PUSH
54560: LD_VAR 0 5
54564: ST_TO_ADDR
// end ;
54565: LD_VAR 0 4
54569: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
54570: LD_INT 0
54572: PPUSH
54573: PPUSH
// if not side or not nation then
54574: LD_VAR 0 1
54578: NOT
54579: PUSH
54580: LD_VAR 0 2
54584: NOT
54585: OR
54586: IFFALSE 54590
// exit ;
54588: GO 55358
// case nation of nation_american :
54590: LD_VAR 0 2
54594: PUSH
54595: LD_INT 1
54597: DOUBLE
54598: EQUAL
54599: IFTRUE 54603
54601: GO 54817
54603: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
54604: LD_ADDR_VAR 0 4
54608: PUSH
54609: LD_INT 35
54611: PUSH
54612: LD_INT 45
54614: PUSH
54615: LD_INT 46
54617: PUSH
54618: LD_INT 47
54620: PUSH
54621: LD_INT 82
54623: PUSH
54624: LD_INT 83
54626: PUSH
54627: LD_INT 84
54629: PUSH
54630: LD_INT 85
54632: PUSH
54633: LD_INT 86
54635: PUSH
54636: LD_INT 1
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: LD_INT 6
54644: PUSH
54645: LD_INT 15
54647: PUSH
54648: LD_INT 16
54650: PUSH
54651: LD_INT 7
54653: PUSH
54654: LD_INT 12
54656: PUSH
54657: LD_INT 13
54659: PUSH
54660: LD_INT 10
54662: PUSH
54663: LD_INT 14
54665: PUSH
54666: LD_INT 20
54668: PUSH
54669: LD_INT 21
54671: PUSH
54672: LD_INT 22
54674: PUSH
54675: LD_INT 25
54677: PUSH
54678: LD_INT 32
54680: PUSH
54681: LD_INT 27
54683: PUSH
54684: LD_INT 36
54686: PUSH
54687: LD_INT 69
54689: PUSH
54690: LD_INT 39
54692: PUSH
54693: LD_INT 34
54695: PUSH
54696: LD_INT 40
54698: PUSH
54699: LD_INT 48
54701: PUSH
54702: LD_INT 49
54704: PUSH
54705: LD_INT 50
54707: PUSH
54708: LD_INT 51
54710: PUSH
54711: LD_INT 52
54713: PUSH
54714: LD_INT 53
54716: PUSH
54717: LD_INT 54
54719: PUSH
54720: LD_INT 55
54722: PUSH
54723: LD_INT 56
54725: PUSH
54726: LD_INT 57
54728: PUSH
54729: LD_INT 58
54731: PUSH
54732: LD_INT 59
54734: PUSH
54735: LD_INT 60
54737: PUSH
54738: LD_INT 61
54740: PUSH
54741: LD_INT 62
54743: PUSH
54744: LD_INT 80
54746: PUSH
54747: LD_INT 82
54749: PUSH
54750: LD_INT 83
54752: PUSH
54753: LD_INT 84
54755: PUSH
54756: LD_INT 85
54758: PUSH
54759: LD_INT 86
54761: PUSH
54762: EMPTY
54763: LIST
54764: LIST
54765: LIST
54766: LIST
54767: LIST
54768: LIST
54769: LIST
54770: LIST
54771: LIST
54772: LIST
54773: LIST
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: ST_TO_ADDR
54815: GO 55282
54817: LD_INT 2
54819: DOUBLE
54820: EQUAL
54821: IFTRUE 54825
54823: GO 55051
54825: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
54826: LD_ADDR_VAR 0 4
54830: PUSH
54831: LD_INT 35
54833: PUSH
54834: LD_INT 45
54836: PUSH
54837: LD_INT 46
54839: PUSH
54840: LD_INT 47
54842: PUSH
54843: LD_INT 82
54845: PUSH
54846: LD_INT 83
54848: PUSH
54849: LD_INT 84
54851: PUSH
54852: LD_INT 85
54854: PUSH
54855: LD_INT 87
54857: PUSH
54858: LD_INT 70
54860: PUSH
54861: LD_INT 1
54863: PUSH
54864: LD_INT 11
54866: PUSH
54867: LD_INT 3
54869: PUSH
54870: LD_INT 4
54872: PUSH
54873: LD_INT 5
54875: PUSH
54876: LD_INT 6
54878: PUSH
54879: LD_INT 15
54881: PUSH
54882: LD_INT 18
54884: PUSH
54885: LD_INT 7
54887: PUSH
54888: LD_INT 17
54890: PUSH
54891: LD_INT 8
54893: PUSH
54894: LD_INT 20
54896: PUSH
54897: LD_INT 21
54899: PUSH
54900: LD_INT 22
54902: PUSH
54903: LD_INT 72
54905: PUSH
54906: LD_INT 26
54908: PUSH
54909: LD_INT 69
54911: PUSH
54912: LD_INT 39
54914: PUSH
54915: LD_INT 40
54917: PUSH
54918: LD_INT 41
54920: PUSH
54921: LD_INT 42
54923: PUSH
54924: LD_INT 43
54926: PUSH
54927: LD_INT 48
54929: PUSH
54930: LD_INT 49
54932: PUSH
54933: LD_INT 50
54935: PUSH
54936: LD_INT 51
54938: PUSH
54939: LD_INT 52
54941: PUSH
54942: LD_INT 53
54944: PUSH
54945: LD_INT 54
54947: PUSH
54948: LD_INT 55
54950: PUSH
54951: LD_INT 56
54953: PUSH
54954: LD_INT 60
54956: PUSH
54957: LD_INT 61
54959: PUSH
54960: LD_INT 62
54962: PUSH
54963: LD_INT 66
54965: PUSH
54966: LD_INT 67
54968: PUSH
54969: LD_INT 68
54971: PUSH
54972: LD_INT 81
54974: PUSH
54975: LD_INT 82
54977: PUSH
54978: LD_INT 83
54980: PUSH
54981: LD_INT 84
54983: PUSH
54984: LD_INT 85
54986: PUSH
54987: LD_INT 87
54989: PUSH
54990: LD_INT 88
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: LIST
54997: LIST
54998: LIST
54999: LIST
55000: LIST
55001: LIST
55002: LIST
55003: LIST
55004: LIST
55005: LIST
55006: LIST
55007: LIST
55008: LIST
55009: LIST
55010: LIST
55011: LIST
55012: LIST
55013: LIST
55014: LIST
55015: LIST
55016: LIST
55017: LIST
55018: LIST
55019: LIST
55020: LIST
55021: LIST
55022: LIST
55023: LIST
55024: LIST
55025: LIST
55026: LIST
55027: LIST
55028: LIST
55029: LIST
55030: LIST
55031: LIST
55032: LIST
55033: LIST
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: ST_TO_ADDR
55049: GO 55282
55051: LD_INT 3
55053: DOUBLE
55054: EQUAL
55055: IFTRUE 55059
55057: GO 55281
55059: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
55060: LD_ADDR_VAR 0 4
55064: PUSH
55065: LD_INT 46
55067: PUSH
55068: LD_INT 47
55070: PUSH
55071: LD_INT 1
55073: PUSH
55074: LD_INT 2
55076: PUSH
55077: LD_INT 82
55079: PUSH
55080: LD_INT 83
55082: PUSH
55083: LD_INT 84
55085: PUSH
55086: LD_INT 85
55088: PUSH
55089: LD_INT 86
55091: PUSH
55092: LD_INT 11
55094: PUSH
55095: LD_INT 9
55097: PUSH
55098: LD_INT 20
55100: PUSH
55101: LD_INT 19
55103: PUSH
55104: LD_INT 21
55106: PUSH
55107: LD_INT 24
55109: PUSH
55110: LD_INT 22
55112: PUSH
55113: LD_INT 25
55115: PUSH
55116: LD_INT 28
55118: PUSH
55119: LD_INT 29
55121: PUSH
55122: LD_INT 30
55124: PUSH
55125: LD_INT 31
55127: PUSH
55128: LD_INT 37
55130: PUSH
55131: LD_INT 38
55133: PUSH
55134: LD_INT 32
55136: PUSH
55137: LD_INT 27
55139: PUSH
55140: LD_INT 33
55142: PUSH
55143: LD_INT 69
55145: PUSH
55146: LD_INT 39
55148: PUSH
55149: LD_INT 34
55151: PUSH
55152: LD_INT 40
55154: PUSH
55155: LD_INT 71
55157: PUSH
55158: LD_INT 23
55160: PUSH
55161: LD_INT 44
55163: PUSH
55164: LD_INT 48
55166: PUSH
55167: LD_INT 49
55169: PUSH
55170: LD_INT 50
55172: PUSH
55173: LD_INT 51
55175: PUSH
55176: LD_INT 52
55178: PUSH
55179: LD_INT 53
55181: PUSH
55182: LD_INT 54
55184: PUSH
55185: LD_INT 55
55187: PUSH
55188: LD_INT 56
55190: PUSH
55191: LD_INT 57
55193: PUSH
55194: LD_INT 58
55196: PUSH
55197: LD_INT 59
55199: PUSH
55200: LD_INT 63
55202: PUSH
55203: LD_INT 64
55205: PUSH
55206: LD_INT 65
55208: PUSH
55209: LD_INT 82
55211: PUSH
55212: LD_INT 83
55214: PUSH
55215: LD_INT 84
55217: PUSH
55218: LD_INT 85
55220: PUSH
55221: LD_INT 86
55223: PUSH
55224: EMPTY
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: LIST
55232: LIST
55233: LIST
55234: LIST
55235: LIST
55236: LIST
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: LIST
55274: LIST
55275: LIST
55276: LIST
55277: LIST
55278: ST_TO_ADDR
55279: GO 55282
55281: POP
// if state > - 1 and state < 3 then
55282: LD_VAR 0 3
55286: PUSH
55287: LD_INT 1
55289: NEG
55290: GREATER
55291: PUSH
55292: LD_VAR 0 3
55296: PUSH
55297: LD_INT 3
55299: LESS
55300: AND
55301: IFFALSE 55358
// for i in result do
55303: LD_ADDR_VAR 0 5
55307: PUSH
55308: LD_VAR 0 4
55312: PUSH
55313: FOR_IN
55314: IFFALSE 55356
// if GetTech ( i , side ) <> state then
55316: LD_VAR 0 5
55320: PPUSH
55321: LD_VAR 0 1
55325: PPUSH
55326: CALL_OW 321
55330: PUSH
55331: LD_VAR 0 3
55335: NONEQUAL
55336: IFFALSE 55354
// result := result diff i ;
55338: LD_ADDR_VAR 0 4
55342: PUSH
55343: LD_VAR 0 4
55347: PUSH
55348: LD_VAR 0 5
55352: DIFF
55353: ST_TO_ADDR
55354: GO 55313
55356: POP
55357: POP
// end ;
55358: LD_VAR 0 4
55362: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
55363: LD_INT 0
55365: PPUSH
55366: PPUSH
55367: PPUSH
// result := true ;
55368: LD_ADDR_VAR 0 3
55372: PUSH
55373: LD_INT 1
55375: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
55376: LD_ADDR_VAR 0 5
55380: PUSH
55381: LD_VAR 0 2
55385: PPUSH
55386: CALL_OW 480
55390: ST_TO_ADDR
// if not tmp then
55391: LD_VAR 0 5
55395: NOT
55396: IFFALSE 55400
// exit ;
55398: GO 55449
// for i in tmp do
55400: LD_ADDR_VAR 0 4
55404: PUSH
55405: LD_VAR 0 5
55409: PUSH
55410: FOR_IN
55411: IFFALSE 55447
// if GetTech ( i , side ) <> state_researched then
55413: LD_VAR 0 4
55417: PPUSH
55418: LD_VAR 0 1
55422: PPUSH
55423: CALL_OW 321
55427: PUSH
55428: LD_INT 2
55430: NONEQUAL
55431: IFFALSE 55445
// begin result := false ;
55433: LD_ADDR_VAR 0 3
55437: PUSH
55438: LD_INT 0
55440: ST_TO_ADDR
// exit ;
55441: POP
55442: POP
55443: GO 55449
// end ;
55445: GO 55410
55447: POP
55448: POP
// end ;
55449: LD_VAR 0 3
55453: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
55454: LD_INT 0
55456: PPUSH
55457: PPUSH
55458: PPUSH
55459: PPUSH
55460: PPUSH
55461: PPUSH
55462: PPUSH
55463: PPUSH
55464: PPUSH
55465: PPUSH
55466: PPUSH
55467: PPUSH
55468: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
55469: LD_VAR 0 1
55473: NOT
55474: PUSH
55475: LD_VAR 0 1
55479: PPUSH
55480: CALL_OW 257
55484: PUSH
55485: LD_INT 9
55487: NONEQUAL
55488: OR
55489: IFFALSE 55493
// exit ;
55491: GO 56066
// side := GetSide ( unit ) ;
55493: LD_ADDR_VAR 0 9
55497: PUSH
55498: LD_VAR 0 1
55502: PPUSH
55503: CALL_OW 255
55507: ST_TO_ADDR
// tech_space := tech_spacanom ;
55508: LD_ADDR_VAR 0 12
55512: PUSH
55513: LD_INT 29
55515: ST_TO_ADDR
// tech_time := tech_taurad ;
55516: LD_ADDR_VAR 0 13
55520: PUSH
55521: LD_INT 28
55523: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
55524: LD_ADDR_VAR 0 11
55528: PUSH
55529: LD_VAR 0 1
55533: PPUSH
55534: CALL_OW 310
55538: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
55539: LD_VAR 0 11
55543: PPUSH
55544: CALL_OW 247
55548: PUSH
55549: LD_INT 2
55551: EQUAL
55552: IFFALSE 55556
// exit ;
55554: GO 56066
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
55556: LD_ADDR_VAR 0 8
55560: PUSH
55561: LD_INT 81
55563: PUSH
55564: LD_VAR 0 9
55568: PUSH
55569: EMPTY
55570: LIST
55571: LIST
55572: PUSH
55573: LD_INT 3
55575: PUSH
55576: LD_INT 21
55578: PUSH
55579: LD_INT 3
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: PUSH
55586: EMPTY
55587: LIST
55588: LIST
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: PPUSH
55594: CALL_OW 69
55598: ST_TO_ADDR
// if not tmp then
55599: LD_VAR 0 8
55603: NOT
55604: IFFALSE 55608
// exit ;
55606: GO 56066
// if in_unit then
55608: LD_VAR 0 11
55612: IFFALSE 55636
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
55614: LD_ADDR_VAR 0 10
55618: PUSH
55619: LD_VAR 0 8
55623: PPUSH
55624: LD_VAR 0 11
55628: PPUSH
55629: CALL_OW 74
55633: ST_TO_ADDR
55634: GO 55656
// enemy := NearestUnitToUnit ( tmp , unit ) ;
55636: LD_ADDR_VAR 0 10
55640: PUSH
55641: LD_VAR 0 8
55645: PPUSH
55646: LD_VAR 0 1
55650: PPUSH
55651: CALL_OW 74
55655: ST_TO_ADDR
// if not enemy then
55656: LD_VAR 0 10
55660: NOT
55661: IFFALSE 55665
// exit ;
55663: GO 56066
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
55665: LD_VAR 0 11
55669: PUSH
55670: LD_VAR 0 11
55674: PPUSH
55675: LD_VAR 0 10
55679: PPUSH
55680: CALL_OW 296
55684: PUSH
55685: LD_INT 13
55687: GREATER
55688: AND
55689: PUSH
55690: LD_VAR 0 1
55694: PPUSH
55695: LD_VAR 0 10
55699: PPUSH
55700: CALL_OW 296
55704: PUSH
55705: LD_INT 12
55707: GREATER
55708: OR
55709: IFFALSE 55713
// exit ;
55711: GO 56066
// missile := [ 1 ] ;
55713: LD_ADDR_VAR 0 14
55717: PUSH
55718: LD_INT 1
55720: PUSH
55721: EMPTY
55722: LIST
55723: ST_TO_ADDR
// if Researched ( side , tech_space ) then
55724: LD_VAR 0 9
55728: PPUSH
55729: LD_VAR 0 12
55733: PPUSH
55734: CALL_OW 325
55738: IFFALSE 55767
// missile := Replace ( missile , missile + 1 , 2 ) ;
55740: LD_ADDR_VAR 0 14
55744: PUSH
55745: LD_VAR 0 14
55749: PPUSH
55750: LD_VAR 0 14
55754: PUSH
55755: LD_INT 1
55757: PLUS
55758: PPUSH
55759: LD_INT 2
55761: PPUSH
55762: CALL_OW 1
55766: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
55767: LD_VAR 0 9
55771: PPUSH
55772: LD_VAR 0 13
55776: PPUSH
55777: CALL_OW 325
55781: PUSH
55782: LD_VAR 0 10
55786: PPUSH
55787: CALL_OW 255
55791: PPUSH
55792: LD_VAR 0 13
55796: PPUSH
55797: CALL_OW 325
55801: NOT
55802: AND
55803: IFFALSE 55832
// missile := Replace ( missile , missile + 1 , 3 ) ;
55805: LD_ADDR_VAR 0 14
55809: PUSH
55810: LD_VAR 0 14
55814: PPUSH
55815: LD_VAR 0 14
55819: PUSH
55820: LD_INT 1
55822: PLUS
55823: PPUSH
55824: LD_INT 3
55826: PPUSH
55827: CALL_OW 1
55831: ST_TO_ADDR
// if missile < 2 then
55832: LD_VAR 0 14
55836: PUSH
55837: LD_INT 2
55839: LESS
55840: IFFALSE 55844
// exit ;
55842: GO 56066
// x := GetX ( enemy ) ;
55844: LD_ADDR_VAR 0 4
55848: PUSH
55849: LD_VAR 0 10
55853: PPUSH
55854: CALL_OW 250
55858: ST_TO_ADDR
// y := GetY ( enemy ) ;
55859: LD_ADDR_VAR 0 5
55863: PUSH
55864: LD_VAR 0 10
55868: PPUSH
55869: CALL_OW 251
55873: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
55874: LD_ADDR_VAR 0 6
55878: PUSH
55879: LD_VAR 0 4
55883: PUSH
55884: LD_INT 1
55886: NEG
55887: PPUSH
55888: LD_INT 1
55890: PPUSH
55891: CALL_OW 12
55895: PLUS
55896: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
55897: LD_ADDR_VAR 0 7
55901: PUSH
55902: LD_VAR 0 5
55906: PUSH
55907: LD_INT 1
55909: NEG
55910: PPUSH
55911: LD_INT 1
55913: PPUSH
55914: CALL_OW 12
55918: PLUS
55919: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
55920: LD_VAR 0 6
55924: PPUSH
55925: LD_VAR 0 7
55929: PPUSH
55930: CALL_OW 488
55934: NOT
55935: IFFALSE 55957
// begin _x := x ;
55937: LD_ADDR_VAR 0 6
55941: PUSH
55942: LD_VAR 0 4
55946: ST_TO_ADDR
// _y := y ;
55947: LD_ADDR_VAR 0 7
55951: PUSH
55952: LD_VAR 0 5
55956: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
55957: LD_ADDR_VAR 0 3
55961: PUSH
55962: LD_INT 1
55964: PPUSH
55965: LD_VAR 0 14
55969: PPUSH
55970: CALL_OW 12
55974: ST_TO_ADDR
// case i of 1 :
55975: LD_VAR 0 3
55979: PUSH
55980: LD_INT 1
55982: DOUBLE
55983: EQUAL
55984: IFTRUE 55988
55986: GO 56005
55988: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
55989: LD_VAR 0 1
55993: PPUSH
55994: LD_VAR 0 10
55998: PPUSH
55999: CALL_OW 115
56003: GO 56066
56005: LD_INT 2
56007: DOUBLE
56008: EQUAL
56009: IFTRUE 56013
56011: GO 56035
56013: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
56014: LD_VAR 0 1
56018: PPUSH
56019: LD_VAR 0 6
56023: PPUSH
56024: LD_VAR 0 7
56028: PPUSH
56029: CALL_OW 153
56033: GO 56066
56035: LD_INT 3
56037: DOUBLE
56038: EQUAL
56039: IFTRUE 56043
56041: GO 56065
56043: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
56044: LD_VAR 0 1
56048: PPUSH
56049: LD_VAR 0 6
56053: PPUSH
56054: LD_VAR 0 7
56058: PPUSH
56059: CALL_OW 154
56063: GO 56066
56065: POP
// end ;
56066: LD_VAR 0 2
56070: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
56071: LD_INT 0
56073: PPUSH
56074: PPUSH
56075: PPUSH
56076: PPUSH
56077: PPUSH
56078: PPUSH
// if not unit or not building then
56079: LD_VAR 0 1
56083: NOT
56084: PUSH
56085: LD_VAR 0 2
56089: NOT
56090: OR
56091: IFFALSE 56095
// exit ;
56093: GO 56253
// x := GetX ( building ) ;
56095: LD_ADDR_VAR 0 5
56099: PUSH
56100: LD_VAR 0 2
56104: PPUSH
56105: CALL_OW 250
56109: ST_TO_ADDR
// y := GetY ( building ) ;
56110: LD_ADDR_VAR 0 6
56114: PUSH
56115: LD_VAR 0 2
56119: PPUSH
56120: CALL_OW 251
56124: ST_TO_ADDR
// for i = 0 to 5 do
56125: LD_ADDR_VAR 0 4
56129: PUSH
56130: DOUBLE
56131: LD_INT 0
56133: DEC
56134: ST_TO_ADDR
56135: LD_INT 5
56137: PUSH
56138: FOR_TO
56139: IFFALSE 56251
// begin _x := ShiftX ( x , i , 3 ) ;
56141: LD_ADDR_VAR 0 7
56145: PUSH
56146: LD_VAR 0 5
56150: PPUSH
56151: LD_VAR 0 4
56155: PPUSH
56156: LD_INT 3
56158: PPUSH
56159: CALL_OW 272
56163: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
56164: LD_ADDR_VAR 0 8
56168: PUSH
56169: LD_VAR 0 6
56173: PPUSH
56174: LD_VAR 0 4
56178: PPUSH
56179: LD_INT 3
56181: PPUSH
56182: CALL_OW 273
56186: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56187: LD_VAR 0 7
56191: PPUSH
56192: LD_VAR 0 8
56196: PPUSH
56197: CALL_OW 488
56201: NOT
56202: IFFALSE 56206
// continue ;
56204: GO 56138
// if HexInfo ( _x , _y ) = 0 then
56206: LD_VAR 0 7
56210: PPUSH
56211: LD_VAR 0 8
56215: PPUSH
56216: CALL_OW 428
56220: PUSH
56221: LD_INT 0
56223: EQUAL
56224: IFFALSE 56249
// begin ComMoveXY ( unit , _x , _y ) ;
56226: LD_VAR 0 1
56230: PPUSH
56231: LD_VAR 0 7
56235: PPUSH
56236: LD_VAR 0 8
56240: PPUSH
56241: CALL_OW 111
// exit ;
56245: POP
56246: POP
56247: GO 56253
// end ; end ;
56249: GO 56138
56251: POP
56252: POP
// end ;
56253: LD_VAR 0 3
56257: RET
// export function ScanBase ( side , base_area ) ; begin
56258: LD_INT 0
56260: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
56261: LD_ADDR_VAR 0 3
56265: PUSH
56266: LD_VAR 0 2
56270: PPUSH
56271: LD_INT 81
56273: PUSH
56274: LD_VAR 0 1
56278: PUSH
56279: EMPTY
56280: LIST
56281: LIST
56282: PPUSH
56283: CALL_OW 70
56287: ST_TO_ADDR
// end ;
56288: LD_VAR 0 3
56292: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
56293: LD_INT 0
56295: PPUSH
56296: PPUSH
56297: PPUSH
56298: PPUSH
// result := false ;
56299: LD_ADDR_VAR 0 2
56303: PUSH
56304: LD_INT 0
56306: ST_TO_ADDR
// side := GetSide ( unit ) ;
56307: LD_ADDR_VAR 0 3
56311: PUSH
56312: LD_VAR 0 1
56316: PPUSH
56317: CALL_OW 255
56321: ST_TO_ADDR
// nat := GetNation ( unit ) ;
56322: LD_ADDR_VAR 0 4
56326: PUSH
56327: LD_VAR 0 1
56331: PPUSH
56332: CALL_OW 248
56336: ST_TO_ADDR
// case nat of 1 :
56337: LD_VAR 0 4
56341: PUSH
56342: LD_INT 1
56344: DOUBLE
56345: EQUAL
56346: IFTRUE 56350
56348: GO 56361
56350: POP
// tech := tech_lassight ; 2 :
56351: LD_ADDR_VAR 0 5
56355: PUSH
56356: LD_INT 12
56358: ST_TO_ADDR
56359: GO 56400
56361: LD_INT 2
56363: DOUBLE
56364: EQUAL
56365: IFTRUE 56369
56367: GO 56380
56369: POP
// tech := tech_mortar ; 3 :
56370: LD_ADDR_VAR 0 5
56374: PUSH
56375: LD_INT 41
56377: ST_TO_ADDR
56378: GO 56400
56380: LD_INT 3
56382: DOUBLE
56383: EQUAL
56384: IFTRUE 56388
56386: GO 56399
56388: POP
// tech := tech_bazooka ; end ;
56389: LD_ADDR_VAR 0 5
56393: PUSH
56394: LD_INT 44
56396: ST_TO_ADDR
56397: GO 56400
56399: POP
// if Researched ( side , tech ) then
56400: LD_VAR 0 3
56404: PPUSH
56405: LD_VAR 0 5
56409: PPUSH
56410: CALL_OW 325
56414: IFFALSE 56441
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
56416: LD_ADDR_VAR 0 2
56420: PUSH
56421: LD_INT 5
56423: PUSH
56424: LD_INT 8
56426: PUSH
56427: LD_INT 9
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: LIST
56434: PUSH
56435: LD_VAR 0 4
56439: ARRAY
56440: ST_TO_ADDR
// end ;
56441: LD_VAR 0 2
56445: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
56446: LD_INT 0
56448: PPUSH
56449: PPUSH
56450: PPUSH
// if not mines then
56451: LD_VAR 0 2
56455: NOT
56456: IFFALSE 56460
// exit ;
56458: GO 56604
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
56460: LD_ADDR_VAR 0 5
56464: PUSH
56465: LD_INT 81
56467: PUSH
56468: LD_VAR 0 1
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PUSH
56477: LD_INT 3
56479: PUSH
56480: LD_INT 21
56482: PUSH
56483: LD_INT 3
56485: PUSH
56486: EMPTY
56487: LIST
56488: LIST
56489: PUSH
56490: EMPTY
56491: LIST
56492: LIST
56493: PUSH
56494: EMPTY
56495: LIST
56496: LIST
56497: PPUSH
56498: CALL_OW 69
56502: ST_TO_ADDR
// for i in mines do
56503: LD_ADDR_VAR 0 4
56507: PUSH
56508: LD_VAR 0 2
56512: PUSH
56513: FOR_IN
56514: IFFALSE 56602
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
56516: LD_VAR 0 4
56520: PUSH
56521: LD_INT 1
56523: ARRAY
56524: PPUSH
56525: LD_VAR 0 4
56529: PUSH
56530: LD_INT 2
56532: ARRAY
56533: PPUSH
56534: CALL_OW 458
56538: NOT
56539: IFFALSE 56543
// continue ;
56541: GO 56513
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
56543: LD_VAR 0 4
56547: PUSH
56548: LD_INT 1
56550: ARRAY
56551: PPUSH
56552: LD_VAR 0 4
56556: PUSH
56557: LD_INT 2
56559: ARRAY
56560: PPUSH
56561: CALL_OW 428
56565: PUSH
56566: LD_VAR 0 5
56570: IN
56571: IFFALSE 56600
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
56573: LD_VAR 0 4
56577: PUSH
56578: LD_INT 1
56580: ARRAY
56581: PPUSH
56582: LD_VAR 0 4
56586: PUSH
56587: LD_INT 2
56589: ARRAY
56590: PPUSH
56591: LD_VAR 0 1
56595: PPUSH
56596: CALL_OW 456
// end ;
56600: GO 56513
56602: POP
56603: POP
// end ;
56604: LD_VAR 0 3
56608: RET
// export function Count ( array ) ; begin
56609: LD_INT 0
56611: PPUSH
// result := array + 0 ;
56612: LD_ADDR_VAR 0 2
56616: PUSH
56617: LD_VAR 0 1
56621: PUSH
56622: LD_INT 0
56624: PLUS
56625: ST_TO_ADDR
// end ;
56626: LD_VAR 0 2
56630: RET
// export function IsEmpty ( building ) ; begin
56631: LD_INT 0
56633: PPUSH
// if not building then
56634: LD_VAR 0 1
56638: NOT
56639: IFFALSE 56643
// exit ;
56641: GO 56686
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
56643: LD_ADDR_VAR 0 2
56647: PUSH
56648: LD_VAR 0 1
56652: PUSH
56653: LD_INT 22
56655: PUSH
56656: LD_VAR 0 1
56660: PPUSH
56661: CALL_OW 255
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 58
56672: PUSH
56673: EMPTY
56674: LIST
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PPUSH
56680: CALL_OW 69
56684: IN
56685: ST_TO_ADDR
// end ;
56686: LD_VAR 0 2
56690: RET
// export function IsNotFull ( building ) ; var places ; begin
56691: LD_INT 0
56693: PPUSH
56694: PPUSH
// if not building then
56695: LD_VAR 0 1
56699: NOT
56700: IFFALSE 56704
// exit ;
56702: GO 56732
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
56704: LD_ADDR_VAR 0 2
56708: PUSH
56709: LD_VAR 0 1
56713: PPUSH
56714: LD_INT 3
56716: PUSH
56717: LD_INT 62
56719: PUSH
56720: EMPTY
56721: LIST
56722: PUSH
56723: EMPTY
56724: LIST
56725: LIST
56726: PPUSH
56727: CALL_OW 72
56731: ST_TO_ADDR
// end ;
56732: LD_VAR 0 2
56736: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
56737: LD_INT 0
56739: PPUSH
56740: PPUSH
56741: PPUSH
56742: PPUSH
// tmp := [ ] ;
56743: LD_ADDR_VAR 0 3
56747: PUSH
56748: EMPTY
56749: ST_TO_ADDR
// list := [ ] ;
56750: LD_ADDR_VAR 0 5
56754: PUSH
56755: EMPTY
56756: ST_TO_ADDR
// for i = 16 to 25 do
56757: LD_ADDR_VAR 0 4
56761: PUSH
56762: DOUBLE
56763: LD_INT 16
56765: DEC
56766: ST_TO_ADDR
56767: LD_INT 25
56769: PUSH
56770: FOR_TO
56771: IFFALSE 56844
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
56773: LD_ADDR_VAR 0 3
56777: PUSH
56778: LD_VAR 0 3
56782: PUSH
56783: LD_INT 22
56785: PUSH
56786: LD_VAR 0 1
56790: PPUSH
56791: CALL_OW 255
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 91
56802: PUSH
56803: LD_VAR 0 1
56807: PUSH
56808: LD_INT 6
56810: PUSH
56811: EMPTY
56812: LIST
56813: LIST
56814: LIST
56815: PUSH
56816: LD_INT 30
56818: PUSH
56819: LD_VAR 0 4
56823: PUSH
56824: EMPTY
56825: LIST
56826: LIST
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: LIST
56832: PUSH
56833: EMPTY
56834: LIST
56835: PPUSH
56836: CALL_OW 69
56840: ADD
56841: ST_TO_ADDR
56842: GO 56770
56844: POP
56845: POP
// for i = 1 to tmp do
56846: LD_ADDR_VAR 0 4
56850: PUSH
56851: DOUBLE
56852: LD_INT 1
56854: DEC
56855: ST_TO_ADDR
56856: LD_VAR 0 3
56860: PUSH
56861: FOR_TO
56862: IFFALSE 56950
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
56864: LD_ADDR_VAR 0 5
56868: PUSH
56869: LD_VAR 0 5
56873: PUSH
56874: LD_VAR 0 3
56878: PUSH
56879: LD_VAR 0 4
56883: ARRAY
56884: PPUSH
56885: CALL_OW 266
56889: PUSH
56890: LD_VAR 0 3
56894: PUSH
56895: LD_VAR 0 4
56899: ARRAY
56900: PPUSH
56901: CALL_OW 250
56905: PUSH
56906: LD_VAR 0 3
56910: PUSH
56911: LD_VAR 0 4
56915: ARRAY
56916: PPUSH
56917: CALL_OW 251
56921: PUSH
56922: LD_VAR 0 3
56926: PUSH
56927: LD_VAR 0 4
56931: ARRAY
56932: PPUSH
56933: CALL_OW 254
56937: PUSH
56938: EMPTY
56939: LIST
56940: LIST
56941: LIST
56942: LIST
56943: PUSH
56944: EMPTY
56945: LIST
56946: ADD
56947: ST_TO_ADDR
56948: GO 56861
56950: POP
56951: POP
// result := list ;
56952: LD_ADDR_VAR 0 2
56956: PUSH
56957: LD_VAR 0 5
56961: ST_TO_ADDR
// end ;
56962: LD_VAR 0 2
56966: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
56967: LD_INT 0
56969: PPUSH
56970: PPUSH
56971: PPUSH
56972: PPUSH
56973: PPUSH
56974: PPUSH
56975: PPUSH
// if not factory then
56976: LD_VAR 0 1
56980: NOT
56981: IFFALSE 56985
// exit ;
56983: GO 57578
// if control = control_apeman then
56985: LD_VAR 0 4
56989: PUSH
56990: LD_INT 5
56992: EQUAL
56993: IFFALSE 57102
// begin tmp := UnitsInside ( factory ) ;
56995: LD_ADDR_VAR 0 8
56999: PUSH
57000: LD_VAR 0 1
57004: PPUSH
57005: CALL_OW 313
57009: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
57010: LD_VAR 0 8
57014: PPUSH
57015: LD_INT 25
57017: PUSH
57018: LD_INT 12
57020: PUSH
57021: EMPTY
57022: LIST
57023: LIST
57024: PPUSH
57025: CALL_OW 72
57029: NOT
57030: IFFALSE 57040
// control := control_manual ;
57032: LD_ADDR_VAR 0 4
57036: PUSH
57037: LD_INT 1
57039: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
57040: LD_ADDR_VAR 0 8
57044: PUSH
57045: LD_VAR 0 1
57049: PPUSH
57050: CALL 56737 0 1
57054: ST_TO_ADDR
// if tmp then
57055: LD_VAR 0 8
57059: IFFALSE 57102
// begin for i in tmp do
57061: LD_ADDR_VAR 0 7
57065: PUSH
57066: LD_VAR 0 8
57070: PUSH
57071: FOR_IN
57072: IFFALSE 57100
// if i [ 1 ] = b_ext_radio then
57074: LD_VAR 0 7
57078: PUSH
57079: LD_INT 1
57081: ARRAY
57082: PUSH
57083: LD_INT 22
57085: EQUAL
57086: IFFALSE 57098
// begin control := control_remote ;
57088: LD_ADDR_VAR 0 4
57092: PUSH
57093: LD_INT 2
57095: ST_TO_ADDR
// break ;
57096: GO 57100
// end ;
57098: GO 57071
57100: POP
57101: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
57102: LD_VAR 0 1
57106: PPUSH
57107: LD_VAR 0 2
57111: PPUSH
57112: LD_VAR 0 3
57116: PPUSH
57117: LD_VAR 0 4
57121: PPUSH
57122: LD_VAR 0 5
57126: PPUSH
57127: CALL_OW 448
57131: IFFALSE 57166
// begin result := [ chassis , engine , control , weapon ] ;
57133: LD_ADDR_VAR 0 6
57137: PUSH
57138: LD_VAR 0 2
57142: PUSH
57143: LD_VAR 0 3
57147: PUSH
57148: LD_VAR 0 4
57152: PUSH
57153: LD_VAR 0 5
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: LIST
57162: LIST
57163: ST_TO_ADDR
// exit ;
57164: GO 57578
// end ; _chassis := AvailableChassisList ( factory ) ;
57166: LD_ADDR_VAR 0 9
57170: PUSH
57171: LD_VAR 0 1
57175: PPUSH
57176: CALL_OW 475
57180: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
57181: LD_ADDR_VAR 0 11
57185: PUSH
57186: LD_VAR 0 1
57190: PPUSH
57191: CALL_OW 476
57195: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
57196: LD_ADDR_VAR 0 12
57200: PUSH
57201: LD_VAR 0 1
57205: PPUSH
57206: CALL_OW 477
57210: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
57211: LD_ADDR_VAR 0 10
57215: PUSH
57216: LD_VAR 0 1
57220: PPUSH
57221: CALL_OW 478
57225: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
57226: LD_VAR 0 9
57230: NOT
57231: PUSH
57232: LD_VAR 0 11
57236: NOT
57237: OR
57238: PUSH
57239: LD_VAR 0 12
57243: NOT
57244: OR
57245: PUSH
57246: LD_VAR 0 10
57250: NOT
57251: OR
57252: IFFALSE 57287
// begin result := [ chassis , engine , control , weapon ] ;
57254: LD_ADDR_VAR 0 6
57258: PUSH
57259: LD_VAR 0 2
57263: PUSH
57264: LD_VAR 0 3
57268: PUSH
57269: LD_VAR 0 4
57273: PUSH
57274: LD_VAR 0 5
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: LIST
57283: LIST
57284: ST_TO_ADDR
// exit ;
57285: GO 57578
// end ; if not chassis in _chassis then
57287: LD_VAR 0 2
57291: PUSH
57292: LD_VAR 0 9
57296: IN
57297: NOT
57298: IFFALSE 57324
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
57300: LD_ADDR_VAR 0 2
57304: PUSH
57305: LD_VAR 0 9
57309: PUSH
57310: LD_INT 1
57312: PPUSH
57313: LD_VAR 0 9
57317: PPUSH
57318: CALL_OW 12
57322: ARRAY
57323: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
57324: LD_VAR 0 2
57328: PPUSH
57329: LD_VAR 0 3
57333: PPUSH
57334: CALL 57583 0 2
57338: NOT
57339: IFFALSE 57398
// repeat engine := _engine [ 1 ] ;
57341: LD_ADDR_VAR 0 3
57345: PUSH
57346: LD_VAR 0 11
57350: PUSH
57351: LD_INT 1
57353: ARRAY
57354: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
57355: LD_ADDR_VAR 0 11
57359: PUSH
57360: LD_VAR 0 11
57364: PPUSH
57365: LD_INT 1
57367: PPUSH
57368: CALL_OW 3
57372: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
57373: LD_VAR 0 2
57377: PPUSH
57378: LD_VAR 0 3
57382: PPUSH
57383: CALL 57583 0 2
57387: PUSH
57388: LD_VAR 0 11
57392: PUSH
57393: EMPTY
57394: EQUAL
57395: OR
57396: IFFALSE 57341
// if not control in _control then
57398: LD_VAR 0 4
57402: PUSH
57403: LD_VAR 0 12
57407: IN
57408: NOT
57409: IFFALSE 57435
// control := _control [ rand ( 1 , _control ) ] ;
57411: LD_ADDR_VAR 0 4
57415: PUSH
57416: LD_VAR 0 12
57420: PUSH
57421: LD_INT 1
57423: PPUSH
57424: LD_VAR 0 12
57428: PPUSH
57429: CALL_OW 12
57433: ARRAY
57434: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
57435: LD_VAR 0 2
57439: PPUSH
57440: LD_VAR 0 5
57444: PPUSH
57445: CALL 57803 0 2
57449: NOT
57450: IFFALSE 57509
// repeat weapon := _weapon [ 1 ] ;
57452: LD_ADDR_VAR 0 5
57456: PUSH
57457: LD_VAR 0 10
57461: PUSH
57462: LD_INT 1
57464: ARRAY
57465: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
57466: LD_ADDR_VAR 0 10
57470: PUSH
57471: LD_VAR 0 10
57475: PPUSH
57476: LD_INT 1
57478: PPUSH
57479: CALL_OW 3
57483: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
57484: LD_VAR 0 2
57488: PPUSH
57489: LD_VAR 0 5
57493: PPUSH
57494: CALL 57803 0 2
57498: PUSH
57499: LD_VAR 0 10
57503: PUSH
57504: EMPTY
57505: EQUAL
57506: OR
57507: IFFALSE 57452
// result := [ ] ;
57509: LD_ADDR_VAR 0 6
57513: PUSH
57514: EMPTY
57515: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
57516: LD_VAR 0 1
57520: PPUSH
57521: LD_VAR 0 2
57525: PPUSH
57526: LD_VAR 0 3
57530: PPUSH
57531: LD_VAR 0 4
57535: PPUSH
57536: LD_VAR 0 5
57540: PPUSH
57541: CALL_OW 448
57545: IFFALSE 57578
// result := [ chassis , engine , control , weapon ] ;
57547: LD_ADDR_VAR 0 6
57551: PUSH
57552: LD_VAR 0 2
57556: PUSH
57557: LD_VAR 0 3
57561: PUSH
57562: LD_VAR 0 4
57566: PUSH
57567: LD_VAR 0 5
57571: PUSH
57572: EMPTY
57573: LIST
57574: LIST
57575: LIST
57576: LIST
57577: ST_TO_ADDR
// end ;
57578: LD_VAR 0 6
57582: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
57583: LD_INT 0
57585: PPUSH
// if not chassis or not engine then
57586: LD_VAR 0 1
57590: NOT
57591: PUSH
57592: LD_VAR 0 2
57596: NOT
57597: OR
57598: IFFALSE 57602
// exit ;
57600: GO 57798
// case engine of engine_solar :
57602: LD_VAR 0 2
57606: PUSH
57607: LD_INT 2
57609: DOUBLE
57610: EQUAL
57611: IFTRUE 57615
57613: GO 57653
57615: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
57616: LD_ADDR_VAR 0 3
57620: PUSH
57621: LD_INT 11
57623: PUSH
57624: LD_INT 12
57626: PUSH
57627: LD_INT 13
57629: PUSH
57630: LD_INT 14
57632: PUSH
57633: LD_INT 1
57635: PUSH
57636: LD_INT 2
57638: PUSH
57639: LD_INT 3
57641: PUSH
57642: EMPTY
57643: LIST
57644: LIST
57645: LIST
57646: LIST
57647: LIST
57648: LIST
57649: LIST
57650: ST_TO_ADDR
57651: GO 57782
57653: LD_INT 1
57655: DOUBLE
57656: EQUAL
57657: IFTRUE 57661
57659: GO 57723
57661: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
57662: LD_ADDR_VAR 0 3
57666: PUSH
57667: LD_INT 11
57669: PUSH
57670: LD_INT 12
57672: PUSH
57673: LD_INT 13
57675: PUSH
57676: LD_INT 14
57678: PUSH
57679: LD_INT 1
57681: PUSH
57682: LD_INT 2
57684: PUSH
57685: LD_INT 3
57687: PUSH
57688: LD_INT 4
57690: PUSH
57691: LD_INT 5
57693: PUSH
57694: LD_INT 21
57696: PUSH
57697: LD_INT 23
57699: PUSH
57700: LD_INT 22
57702: PUSH
57703: LD_INT 24
57705: PUSH
57706: EMPTY
57707: LIST
57708: LIST
57709: LIST
57710: LIST
57711: LIST
57712: LIST
57713: LIST
57714: LIST
57715: LIST
57716: LIST
57717: LIST
57718: LIST
57719: LIST
57720: ST_TO_ADDR
57721: GO 57782
57723: LD_INT 3
57725: DOUBLE
57726: EQUAL
57727: IFTRUE 57731
57729: GO 57781
57731: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
57732: LD_ADDR_VAR 0 3
57736: PUSH
57737: LD_INT 13
57739: PUSH
57740: LD_INT 14
57742: PUSH
57743: LD_INT 2
57745: PUSH
57746: LD_INT 3
57748: PUSH
57749: LD_INT 4
57751: PUSH
57752: LD_INT 5
57754: PUSH
57755: LD_INT 21
57757: PUSH
57758: LD_INT 22
57760: PUSH
57761: LD_INT 23
57763: PUSH
57764: LD_INT 24
57766: PUSH
57767: EMPTY
57768: LIST
57769: LIST
57770: LIST
57771: LIST
57772: LIST
57773: LIST
57774: LIST
57775: LIST
57776: LIST
57777: LIST
57778: ST_TO_ADDR
57779: GO 57782
57781: POP
// result := ( chassis in result ) ;
57782: LD_ADDR_VAR 0 3
57786: PUSH
57787: LD_VAR 0 1
57791: PUSH
57792: LD_VAR 0 3
57796: IN
57797: ST_TO_ADDR
// end ;
57798: LD_VAR 0 3
57802: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
57803: LD_INT 0
57805: PPUSH
// if not chassis or not weapon then
57806: LD_VAR 0 1
57810: NOT
57811: PUSH
57812: LD_VAR 0 2
57816: NOT
57817: OR
57818: IFFALSE 57822
// exit ;
57820: GO 58882
// case weapon of us_machine_gun :
57822: LD_VAR 0 2
57826: PUSH
57827: LD_INT 2
57829: DOUBLE
57830: EQUAL
57831: IFTRUE 57835
57833: GO 57865
57835: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
57836: LD_ADDR_VAR 0 3
57840: PUSH
57841: LD_INT 1
57843: PUSH
57844: LD_INT 2
57846: PUSH
57847: LD_INT 3
57849: PUSH
57850: LD_INT 4
57852: PUSH
57853: LD_INT 5
57855: PUSH
57856: EMPTY
57857: LIST
57858: LIST
57859: LIST
57860: LIST
57861: LIST
57862: ST_TO_ADDR
57863: GO 58866
57865: LD_INT 3
57867: DOUBLE
57868: EQUAL
57869: IFTRUE 57873
57871: GO 57903
57873: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
57874: LD_ADDR_VAR 0 3
57878: PUSH
57879: LD_INT 1
57881: PUSH
57882: LD_INT 2
57884: PUSH
57885: LD_INT 3
57887: PUSH
57888: LD_INT 4
57890: PUSH
57891: LD_INT 5
57893: PUSH
57894: EMPTY
57895: LIST
57896: LIST
57897: LIST
57898: LIST
57899: LIST
57900: ST_TO_ADDR
57901: GO 58866
57903: LD_INT 11
57905: DOUBLE
57906: EQUAL
57907: IFTRUE 57911
57909: GO 57941
57911: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
57912: LD_ADDR_VAR 0 3
57916: PUSH
57917: LD_INT 1
57919: PUSH
57920: LD_INT 2
57922: PUSH
57923: LD_INT 3
57925: PUSH
57926: LD_INT 4
57928: PUSH
57929: LD_INT 5
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: LIST
57936: LIST
57937: LIST
57938: ST_TO_ADDR
57939: GO 58866
57941: LD_INT 4
57943: DOUBLE
57944: EQUAL
57945: IFTRUE 57949
57947: GO 57975
57949: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
57950: LD_ADDR_VAR 0 3
57954: PUSH
57955: LD_INT 2
57957: PUSH
57958: LD_INT 3
57960: PUSH
57961: LD_INT 4
57963: PUSH
57964: LD_INT 5
57966: PUSH
57967: EMPTY
57968: LIST
57969: LIST
57970: LIST
57971: LIST
57972: ST_TO_ADDR
57973: GO 58866
57975: LD_INT 5
57977: DOUBLE
57978: EQUAL
57979: IFTRUE 57983
57981: GO 58009
57983: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
57984: LD_ADDR_VAR 0 3
57988: PUSH
57989: LD_INT 2
57991: PUSH
57992: LD_INT 3
57994: PUSH
57995: LD_INT 4
57997: PUSH
57998: LD_INT 5
58000: PUSH
58001: EMPTY
58002: LIST
58003: LIST
58004: LIST
58005: LIST
58006: ST_TO_ADDR
58007: GO 58866
58009: LD_INT 9
58011: DOUBLE
58012: EQUAL
58013: IFTRUE 58017
58015: GO 58043
58017: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
58018: LD_ADDR_VAR 0 3
58022: PUSH
58023: LD_INT 2
58025: PUSH
58026: LD_INT 3
58028: PUSH
58029: LD_INT 4
58031: PUSH
58032: LD_INT 5
58034: PUSH
58035: EMPTY
58036: LIST
58037: LIST
58038: LIST
58039: LIST
58040: ST_TO_ADDR
58041: GO 58866
58043: LD_INT 7
58045: DOUBLE
58046: EQUAL
58047: IFTRUE 58051
58049: GO 58077
58051: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
58052: LD_ADDR_VAR 0 3
58056: PUSH
58057: LD_INT 2
58059: PUSH
58060: LD_INT 3
58062: PUSH
58063: LD_INT 4
58065: PUSH
58066: LD_INT 5
58068: PUSH
58069: EMPTY
58070: LIST
58071: LIST
58072: LIST
58073: LIST
58074: ST_TO_ADDR
58075: GO 58866
58077: LD_INT 12
58079: DOUBLE
58080: EQUAL
58081: IFTRUE 58085
58083: GO 58111
58085: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
58086: LD_ADDR_VAR 0 3
58090: PUSH
58091: LD_INT 2
58093: PUSH
58094: LD_INT 3
58096: PUSH
58097: LD_INT 4
58099: PUSH
58100: LD_INT 5
58102: PUSH
58103: EMPTY
58104: LIST
58105: LIST
58106: LIST
58107: LIST
58108: ST_TO_ADDR
58109: GO 58866
58111: LD_INT 13
58113: DOUBLE
58114: EQUAL
58115: IFTRUE 58119
58117: GO 58145
58119: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
58120: LD_ADDR_VAR 0 3
58124: PUSH
58125: LD_INT 2
58127: PUSH
58128: LD_INT 3
58130: PUSH
58131: LD_INT 4
58133: PUSH
58134: LD_INT 5
58136: PUSH
58137: EMPTY
58138: LIST
58139: LIST
58140: LIST
58141: LIST
58142: ST_TO_ADDR
58143: GO 58866
58145: LD_INT 14
58147: DOUBLE
58148: EQUAL
58149: IFTRUE 58153
58151: GO 58171
58153: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
58154: LD_ADDR_VAR 0 3
58158: PUSH
58159: LD_INT 4
58161: PUSH
58162: LD_INT 5
58164: PUSH
58165: EMPTY
58166: LIST
58167: LIST
58168: ST_TO_ADDR
58169: GO 58866
58171: LD_INT 6
58173: DOUBLE
58174: EQUAL
58175: IFTRUE 58179
58177: GO 58197
58179: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
58180: LD_ADDR_VAR 0 3
58184: PUSH
58185: LD_INT 4
58187: PUSH
58188: LD_INT 5
58190: PUSH
58191: EMPTY
58192: LIST
58193: LIST
58194: ST_TO_ADDR
58195: GO 58866
58197: LD_INT 10
58199: DOUBLE
58200: EQUAL
58201: IFTRUE 58205
58203: GO 58223
58205: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
58206: LD_ADDR_VAR 0 3
58210: PUSH
58211: LD_INT 4
58213: PUSH
58214: LD_INT 5
58216: PUSH
58217: EMPTY
58218: LIST
58219: LIST
58220: ST_TO_ADDR
58221: GO 58866
58223: LD_INT 22
58225: DOUBLE
58226: EQUAL
58227: IFTRUE 58231
58229: GO 58257
58231: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
58232: LD_ADDR_VAR 0 3
58236: PUSH
58237: LD_INT 11
58239: PUSH
58240: LD_INT 12
58242: PUSH
58243: LD_INT 13
58245: PUSH
58246: LD_INT 14
58248: PUSH
58249: EMPTY
58250: LIST
58251: LIST
58252: LIST
58253: LIST
58254: ST_TO_ADDR
58255: GO 58866
58257: LD_INT 23
58259: DOUBLE
58260: EQUAL
58261: IFTRUE 58265
58263: GO 58291
58265: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
58266: LD_ADDR_VAR 0 3
58270: PUSH
58271: LD_INT 11
58273: PUSH
58274: LD_INT 12
58276: PUSH
58277: LD_INT 13
58279: PUSH
58280: LD_INT 14
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: LIST
58287: LIST
58288: ST_TO_ADDR
58289: GO 58866
58291: LD_INT 24
58293: DOUBLE
58294: EQUAL
58295: IFTRUE 58299
58297: GO 58325
58299: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
58300: LD_ADDR_VAR 0 3
58304: PUSH
58305: LD_INT 11
58307: PUSH
58308: LD_INT 12
58310: PUSH
58311: LD_INT 13
58313: PUSH
58314: LD_INT 14
58316: PUSH
58317: EMPTY
58318: LIST
58319: LIST
58320: LIST
58321: LIST
58322: ST_TO_ADDR
58323: GO 58866
58325: LD_INT 30
58327: DOUBLE
58328: EQUAL
58329: IFTRUE 58333
58331: GO 58359
58333: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
58334: LD_ADDR_VAR 0 3
58338: PUSH
58339: LD_INT 11
58341: PUSH
58342: LD_INT 12
58344: PUSH
58345: LD_INT 13
58347: PUSH
58348: LD_INT 14
58350: PUSH
58351: EMPTY
58352: LIST
58353: LIST
58354: LIST
58355: LIST
58356: ST_TO_ADDR
58357: GO 58866
58359: LD_INT 25
58361: DOUBLE
58362: EQUAL
58363: IFTRUE 58367
58365: GO 58385
58367: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
58368: LD_ADDR_VAR 0 3
58372: PUSH
58373: LD_INT 13
58375: PUSH
58376: LD_INT 14
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: ST_TO_ADDR
58383: GO 58866
58385: LD_INT 27
58387: DOUBLE
58388: EQUAL
58389: IFTRUE 58393
58391: GO 58411
58393: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
58394: LD_ADDR_VAR 0 3
58398: PUSH
58399: LD_INT 13
58401: PUSH
58402: LD_INT 14
58404: PUSH
58405: EMPTY
58406: LIST
58407: LIST
58408: ST_TO_ADDR
58409: GO 58866
58411: LD_INT 92
58413: DOUBLE
58414: EQUAL
58415: IFTRUE 58419
58417: GO 58445
58419: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
58420: LD_ADDR_VAR 0 3
58424: PUSH
58425: LD_INT 11
58427: PUSH
58428: LD_INT 12
58430: PUSH
58431: LD_INT 13
58433: PUSH
58434: LD_INT 14
58436: PUSH
58437: EMPTY
58438: LIST
58439: LIST
58440: LIST
58441: LIST
58442: ST_TO_ADDR
58443: GO 58866
58445: LD_INT 28
58447: DOUBLE
58448: EQUAL
58449: IFTRUE 58453
58451: GO 58471
58453: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
58454: LD_ADDR_VAR 0 3
58458: PUSH
58459: LD_INT 13
58461: PUSH
58462: LD_INT 14
58464: PUSH
58465: EMPTY
58466: LIST
58467: LIST
58468: ST_TO_ADDR
58469: GO 58866
58471: LD_INT 29
58473: DOUBLE
58474: EQUAL
58475: IFTRUE 58479
58477: GO 58497
58479: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
58480: LD_ADDR_VAR 0 3
58484: PUSH
58485: LD_INT 13
58487: PUSH
58488: LD_INT 14
58490: PUSH
58491: EMPTY
58492: LIST
58493: LIST
58494: ST_TO_ADDR
58495: GO 58866
58497: LD_INT 31
58499: DOUBLE
58500: EQUAL
58501: IFTRUE 58505
58503: GO 58523
58505: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
58506: LD_ADDR_VAR 0 3
58510: PUSH
58511: LD_INT 13
58513: PUSH
58514: LD_INT 14
58516: PUSH
58517: EMPTY
58518: LIST
58519: LIST
58520: ST_TO_ADDR
58521: GO 58866
58523: LD_INT 26
58525: DOUBLE
58526: EQUAL
58527: IFTRUE 58531
58529: GO 58549
58531: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
58532: LD_ADDR_VAR 0 3
58536: PUSH
58537: LD_INT 13
58539: PUSH
58540: LD_INT 14
58542: PUSH
58543: EMPTY
58544: LIST
58545: LIST
58546: ST_TO_ADDR
58547: GO 58866
58549: LD_INT 42
58551: DOUBLE
58552: EQUAL
58553: IFTRUE 58557
58555: GO 58583
58557: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
58558: LD_ADDR_VAR 0 3
58562: PUSH
58563: LD_INT 21
58565: PUSH
58566: LD_INT 22
58568: PUSH
58569: LD_INT 23
58571: PUSH
58572: LD_INT 24
58574: PUSH
58575: EMPTY
58576: LIST
58577: LIST
58578: LIST
58579: LIST
58580: ST_TO_ADDR
58581: GO 58866
58583: LD_INT 43
58585: DOUBLE
58586: EQUAL
58587: IFTRUE 58591
58589: GO 58617
58591: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
58592: LD_ADDR_VAR 0 3
58596: PUSH
58597: LD_INT 21
58599: PUSH
58600: LD_INT 22
58602: PUSH
58603: LD_INT 23
58605: PUSH
58606: LD_INT 24
58608: PUSH
58609: EMPTY
58610: LIST
58611: LIST
58612: LIST
58613: LIST
58614: ST_TO_ADDR
58615: GO 58866
58617: LD_INT 44
58619: DOUBLE
58620: EQUAL
58621: IFTRUE 58625
58623: GO 58651
58625: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
58626: LD_ADDR_VAR 0 3
58630: PUSH
58631: LD_INT 21
58633: PUSH
58634: LD_INT 22
58636: PUSH
58637: LD_INT 23
58639: PUSH
58640: LD_INT 24
58642: PUSH
58643: EMPTY
58644: LIST
58645: LIST
58646: LIST
58647: LIST
58648: ST_TO_ADDR
58649: GO 58866
58651: LD_INT 45
58653: DOUBLE
58654: EQUAL
58655: IFTRUE 58659
58657: GO 58685
58659: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
58660: LD_ADDR_VAR 0 3
58664: PUSH
58665: LD_INT 21
58667: PUSH
58668: LD_INT 22
58670: PUSH
58671: LD_INT 23
58673: PUSH
58674: LD_INT 24
58676: PUSH
58677: EMPTY
58678: LIST
58679: LIST
58680: LIST
58681: LIST
58682: ST_TO_ADDR
58683: GO 58866
58685: LD_INT 49
58687: DOUBLE
58688: EQUAL
58689: IFTRUE 58693
58691: GO 58719
58693: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
58694: LD_ADDR_VAR 0 3
58698: PUSH
58699: LD_INT 21
58701: PUSH
58702: LD_INT 22
58704: PUSH
58705: LD_INT 23
58707: PUSH
58708: LD_INT 24
58710: PUSH
58711: EMPTY
58712: LIST
58713: LIST
58714: LIST
58715: LIST
58716: ST_TO_ADDR
58717: GO 58866
58719: LD_INT 51
58721: DOUBLE
58722: EQUAL
58723: IFTRUE 58727
58725: GO 58753
58727: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
58728: LD_ADDR_VAR 0 3
58732: PUSH
58733: LD_INT 21
58735: PUSH
58736: LD_INT 22
58738: PUSH
58739: LD_INT 23
58741: PUSH
58742: LD_INT 24
58744: PUSH
58745: EMPTY
58746: LIST
58747: LIST
58748: LIST
58749: LIST
58750: ST_TO_ADDR
58751: GO 58866
58753: LD_INT 52
58755: DOUBLE
58756: EQUAL
58757: IFTRUE 58761
58759: GO 58787
58761: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
58762: LD_ADDR_VAR 0 3
58766: PUSH
58767: LD_INT 21
58769: PUSH
58770: LD_INT 22
58772: PUSH
58773: LD_INT 23
58775: PUSH
58776: LD_INT 24
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: LIST
58783: LIST
58784: ST_TO_ADDR
58785: GO 58866
58787: LD_INT 53
58789: DOUBLE
58790: EQUAL
58791: IFTRUE 58795
58793: GO 58813
58795: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
58796: LD_ADDR_VAR 0 3
58800: PUSH
58801: LD_INT 23
58803: PUSH
58804: LD_INT 24
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: ST_TO_ADDR
58811: GO 58866
58813: LD_INT 46
58815: DOUBLE
58816: EQUAL
58817: IFTRUE 58821
58819: GO 58839
58821: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
58822: LD_ADDR_VAR 0 3
58826: PUSH
58827: LD_INT 23
58829: PUSH
58830: LD_INT 24
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: ST_TO_ADDR
58837: GO 58866
58839: LD_INT 47
58841: DOUBLE
58842: EQUAL
58843: IFTRUE 58847
58845: GO 58865
58847: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
58848: LD_ADDR_VAR 0 3
58852: PUSH
58853: LD_INT 23
58855: PUSH
58856: LD_INT 24
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: ST_TO_ADDR
58863: GO 58866
58865: POP
// result := ( chassis in result ) ;
58866: LD_ADDR_VAR 0 3
58870: PUSH
58871: LD_VAR 0 1
58875: PUSH
58876: LD_VAR 0 3
58880: IN
58881: ST_TO_ADDR
// end ;
58882: LD_VAR 0 3
58886: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
58887: LD_INT 0
58889: PPUSH
58890: PPUSH
58891: PPUSH
58892: PPUSH
58893: PPUSH
58894: PPUSH
58895: PPUSH
// result := array ;
58896: LD_ADDR_VAR 0 5
58900: PUSH
58901: LD_VAR 0 1
58905: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
58906: LD_VAR 0 1
58910: NOT
58911: PUSH
58912: LD_VAR 0 2
58916: NOT
58917: OR
58918: PUSH
58919: LD_VAR 0 3
58923: NOT
58924: OR
58925: PUSH
58926: LD_VAR 0 2
58930: PUSH
58931: LD_VAR 0 1
58935: GREATER
58936: OR
58937: PUSH
58938: LD_VAR 0 3
58942: PUSH
58943: LD_VAR 0 1
58947: GREATER
58948: OR
58949: IFFALSE 58953
// exit ;
58951: GO 59249
// if direction then
58953: LD_VAR 0 4
58957: IFFALSE 59021
// begin d := 1 ;
58959: LD_ADDR_VAR 0 9
58963: PUSH
58964: LD_INT 1
58966: ST_TO_ADDR
// if i_from > i_to then
58967: LD_VAR 0 2
58971: PUSH
58972: LD_VAR 0 3
58976: GREATER
58977: IFFALSE 59003
// length := ( array - i_from ) + i_to else
58979: LD_ADDR_VAR 0 11
58983: PUSH
58984: LD_VAR 0 1
58988: PUSH
58989: LD_VAR 0 2
58993: MINUS
58994: PUSH
58995: LD_VAR 0 3
58999: PLUS
59000: ST_TO_ADDR
59001: GO 59019
// length := i_to - i_from ;
59003: LD_ADDR_VAR 0 11
59007: PUSH
59008: LD_VAR 0 3
59012: PUSH
59013: LD_VAR 0 2
59017: MINUS
59018: ST_TO_ADDR
// end else
59019: GO 59082
// begin d := - 1 ;
59021: LD_ADDR_VAR 0 9
59025: PUSH
59026: LD_INT 1
59028: NEG
59029: ST_TO_ADDR
// if i_from > i_to then
59030: LD_VAR 0 2
59034: PUSH
59035: LD_VAR 0 3
59039: GREATER
59040: IFFALSE 59060
// length := i_from - i_to else
59042: LD_ADDR_VAR 0 11
59046: PUSH
59047: LD_VAR 0 2
59051: PUSH
59052: LD_VAR 0 3
59056: MINUS
59057: ST_TO_ADDR
59058: GO 59082
// length := ( array - i_to ) + i_from ;
59060: LD_ADDR_VAR 0 11
59064: PUSH
59065: LD_VAR 0 1
59069: PUSH
59070: LD_VAR 0 3
59074: MINUS
59075: PUSH
59076: LD_VAR 0 2
59080: PLUS
59081: ST_TO_ADDR
// end ; if not length then
59082: LD_VAR 0 11
59086: NOT
59087: IFFALSE 59091
// exit ;
59089: GO 59249
// tmp := array ;
59091: LD_ADDR_VAR 0 10
59095: PUSH
59096: LD_VAR 0 1
59100: ST_TO_ADDR
// for i = 1 to length do
59101: LD_ADDR_VAR 0 6
59105: PUSH
59106: DOUBLE
59107: LD_INT 1
59109: DEC
59110: ST_TO_ADDR
59111: LD_VAR 0 11
59115: PUSH
59116: FOR_TO
59117: IFFALSE 59237
// begin for j = 1 to array do
59119: LD_ADDR_VAR 0 7
59123: PUSH
59124: DOUBLE
59125: LD_INT 1
59127: DEC
59128: ST_TO_ADDR
59129: LD_VAR 0 1
59133: PUSH
59134: FOR_TO
59135: IFFALSE 59223
// begin k := j + d ;
59137: LD_ADDR_VAR 0 8
59141: PUSH
59142: LD_VAR 0 7
59146: PUSH
59147: LD_VAR 0 9
59151: PLUS
59152: ST_TO_ADDR
// if k > array then
59153: LD_VAR 0 8
59157: PUSH
59158: LD_VAR 0 1
59162: GREATER
59163: IFFALSE 59173
// k := 1 ;
59165: LD_ADDR_VAR 0 8
59169: PUSH
59170: LD_INT 1
59172: ST_TO_ADDR
// if not k then
59173: LD_VAR 0 8
59177: NOT
59178: IFFALSE 59190
// k := array ;
59180: LD_ADDR_VAR 0 8
59184: PUSH
59185: LD_VAR 0 1
59189: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
59190: LD_ADDR_VAR 0 10
59194: PUSH
59195: LD_VAR 0 10
59199: PPUSH
59200: LD_VAR 0 8
59204: PPUSH
59205: LD_VAR 0 1
59209: PUSH
59210: LD_VAR 0 7
59214: ARRAY
59215: PPUSH
59216: CALL_OW 1
59220: ST_TO_ADDR
// end ;
59221: GO 59134
59223: POP
59224: POP
// array := tmp ;
59225: LD_ADDR_VAR 0 1
59229: PUSH
59230: LD_VAR 0 10
59234: ST_TO_ADDR
// end ;
59235: GO 59116
59237: POP
59238: POP
// result := array ;
59239: LD_ADDR_VAR 0 5
59243: PUSH
59244: LD_VAR 0 1
59248: ST_TO_ADDR
// end ;
59249: LD_VAR 0 5
59253: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
59254: LD_INT 0
59256: PPUSH
59257: PPUSH
// result := 0 ;
59258: LD_ADDR_VAR 0 3
59262: PUSH
59263: LD_INT 0
59265: ST_TO_ADDR
// if not array or not value in array then
59266: LD_VAR 0 1
59270: NOT
59271: PUSH
59272: LD_VAR 0 2
59276: PUSH
59277: LD_VAR 0 1
59281: IN
59282: NOT
59283: OR
59284: IFFALSE 59288
// exit ;
59286: GO 59342
// for i = 1 to array do
59288: LD_ADDR_VAR 0 4
59292: PUSH
59293: DOUBLE
59294: LD_INT 1
59296: DEC
59297: ST_TO_ADDR
59298: LD_VAR 0 1
59302: PUSH
59303: FOR_TO
59304: IFFALSE 59340
// if value = array [ i ] then
59306: LD_VAR 0 2
59310: PUSH
59311: LD_VAR 0 1
59315: PUSH
59316: LD_VAR 0 4
59320: ARRAY
59321: EQUAL
59322: IFFALSE 59338
// begin result := i ;
59324: LD_ADDR_VAR 0 3
59328: PUSH
59329: LD_VAR 0 4
59333: ST_TO_ADDR
// exit ;
59334: POP
59335: POP
59336: GO 59342
// end ;
59338: GO 59303
59340: POP
59341: POP
// end ;
59342: LD_VAR 0 3
59346: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
59347: LD_INT 0
59349: PPUSH
// vc_chassis := chassis ;
59350: LD_ADDR_OWVAR 37
59354: PUSH
59355: LD_VAR 0 1
59359: ST_TO_ADDR
// vc_engine := engine ;
59360: LD_ADDR_OWVAR 39
59364: PUSH
59365: LD_VAR 0 2
59369: ST_TO_ADDR
// vc_control := control ;
59370: LD_ADDR_OWVAR 38
59374: PUSH
59375: LD_VAR 0 3
59379: ST_TO_ADDR
// vc_weapon := weapon ;
59380: LD_ADDR_OWVAR 40
59384: PUSH
59385: LD_VAR 0 4
59389: ST_TO_ADDR
// vc_fuel_battery := fuel ;
59390: LD_ADDR_OWVAR 41
59394: PUSH
59395: LD_VAR 0 5
59399: ST_TO_ADDR
// end ;
59400: LD_VAR 0 6
59404: RET
// export function WantPlant ( unit ) ; var task ; begin
59405: LD_INT 0
59407: PPUSH
59408: PPUSH
// result := false ;
59409: LD_ADDR_VAR 0 2
59413: PUSH
59414: LD_INT 0
59416: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
59417: LD_ADDR_VAR 0 3
59421: PUSH
59422: LD_VAR 0 1
59426: PPUSH
59427: CALL_OW 437
59431: ST_TO_ADDR
// if task then
59432: LD_VAR 0 3
59436: IFFALSE 59464
// if task [ 1 ] [ 1 ] = p then
59438: LD_VAR 0 3
59442: PUSH
59443: LD_INT 1
59445: ARRAY
59446: PUSH
59447: LD_INT 1
59449: ARRAY
59450: PUSH
59451: LD_STRING p
59453: EQUAL
59454: IFFALSE 59464
// result := true ;
59456: LD_ADDR_VAR 0 2
59460: PUSH
59461: LD_INT 1
59463: ST_TO_ADDR
// end ;
59464: LD_VAR 0 2
59468: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
59469: LD_INT 0
59471: PPUSH
59472: PPUSH
59473: PPUSH
59474: PPUSH
// if pos < 1 then
59475: LD_VAR 0 2
59479: PUSH
59480: LD_INT 1
59482: LESS
59483: IFFALSE 59487
// exit ;
59485: GO 59790
// if pos = 1 then
59487: LD_VAR 0 2
59491: PUSH
59492: LD_INT 1
59494: EQUAL
59495: IFFALSE 59528
// result := Replace ( arr , pos [ 1 ] , value ) else
59497: LD_ADDR_VAR 0 4
59501: PUSH
59502: LD_VAR 0 1
59506: PPUSH
59507: LD_VAR 0 2
59511: PUSH
59512: LD_INT 1
59514: ARRAY
59515: PPUSH
59516: LD_VAR 0 3
59520: PPUSH
59521: CALL_OW 1
59525: ST_TO_ADDR
59526: GO 59790
// begin tmp := arr ;
59528: LD_ADDR_VAR 0 6
59532: PUSH
59533: LD_VAR 0 1
59537: ST_TO_ADDR
// s_arr := [ tmp ] ;
59538: LD_ADDR_VAR 0 7
59542: PUSH
59543: LD_VAR 0 6
59547: PUSH
59548: EMPTY
59549: LIST
59550: ST_TO_ADDR
// for i = 1 to pos - 1 do
59551: LD_ADDR_VAR 0 5
59555: PUSH
59556: DOUBLE
59557: LD_INT 1
59559: DEC
59560: ST_TO_ADDR
59561: LD_VAR 0 2
59565: PUSH
59566: LD_INT 1
59568: MINUS
59569: PUSH
59570: FOR_TO
59571: IFFALSE 59616
// begin tmp := tmp [ pos [ i ] ] ;
59573: LD_ADDR_VAR 0 6
59577: PUSH
59578: LD_VAR 0 6
59582: PUSH
59583: LD_VAR 0 2
59587: PUSH
59588: LD_VAR 0 5
59592: ARRAY
59593: ARRAY
59594: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
59595: LD_ADDR_VAR 0 7
59599: PUSH
59600: LD_VAR 0 7
59604: PUSH
59605: LD_VAR 0 6
59609: PUSH
59610: EMPTY
59611: LIST
59612: ADD
59613: ST_TO_ADDR
// end ;
59614: GO 59570
59616: POP
59617: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
59618: LD_ADDR_VAR 0 6
59622: PUSH
59623: LD_VAR 0 6
59627: PPUSH
59628: LD_VAR 0 2
59632: PUSH
59633: LD_VAR 0 2
59637: ARRAY
59638: PPUSH
59639: LD_VAR 0 3
59643: PPUSH
59644: CALL_OW 1
59648: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
59649: LD_ADDR_VAR 0 7
59653: PUSH
59654: LD_VAR 0 7
59658: PPUSH
59659: LD_VAR 0 7
59663: PPUSH
59664: LD_VAR 0 6
59668: PPUSH
59669: CALL_OW 1
59673: ST_TO_ADDR
// for i = s_arr downto 2 do
59674: LD_ADDR_VAR 0 5
59678: PUSH
59679: DOUBLE
59680: LD_VAR 0 7
59684: INC
59685: ST_TO_ADDR
59686: LD_INT 2
59688: PUSH
59689: FOR_DOWNTO
59690: IFFALSE 59774
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
59692: LD_ADDR_VAR 0 6
59696: PUSH
59697: LD_VAR 0 7
59701: PUSH
59702: LD_VAR 0 5
59706: PUSH
59707: LD_INT 1
59709: MINUS
59710: ARRAY
59711: PPUSH
59712: LD_VAR 0 2
59716: PUSH
59717: LD_VAR 0 5
59721: PUSH
59722: LD_INT 1
59724: MINUS
59725: ARRAY
59726: PPUSH
59727: LD_VAR 0 7
59731: PUSH
59732: LD_VAR 0 5
59736: ARRAY
59737: PPUSH
59738: CALL_OW 1
59742: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
59743: LD_ADDR_VAR 0 7
59747: PUSH
59748: LD_VAR 0 7
59752: PPUSH
59753: LD_VAR 0 5
59757: PUSH
59758: LD_INT 1
59760: MINUS
59761: PPUSH
59762: LD_VAR 0 6
59766: PPUSH
59767: CALL_OW 1
59771: ST_TO_ADDR
// end ;
59772: GO 59689
59774: POP
59775: POP
// result := s_arr [ 1 ] ;
59776: LD_ADDR_VAR 0 4
59780: PUSH
59781: LD_VAR 0 7
59785: PUSH
59786: LD_INT 1
59788: ARRAY
59789: ST_TO_ADDR
// end ; end ;
59790: LD_VAR 0 4
59794: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
59795: LD_INT 0
59797: PPUSH
59798: PPUSH
// if not list then
59799: LD_VAR 0 1
59803: NOT
59804: IFFALSE 59808
// exit ;
59806: GO 59899
// i := list [ pos1 ] ;
59808: LD_ADDR_VAR 0 5
59812: PUSH
59813: LD_VAR 0 1
59817: PUSH
59818: LD_VAR 0 2
59822: ARRAY
59823: ST_TO_ADDR
// if not i then
59824: LD_VAR 0 5
59828: NOT
59829: IFFALSE 59833
// exit ;
59831: GO 59899
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
59833: LD_ADDR_VAR 0 1
59837: PUSH
59838: LD_VAR 0 1
59842: PPUSH
59843: LD_VAR 0 2
59847: PPUSH
59848: LD_VAR 0 1
59852: PUSH
59853: LD_VAR 0 3
59857: ARRAY
59858: PPUSH
59859: CALL_OW 1
59863: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
59864: LD_ADDR_VAR 0 1
59868: PUSH
59869: LD_VAR 0 1
59873: PPUSH
59874: LD_VAR 0 3
59878: PPUSH
59879: LD_VAR 0 5
59883: PPUSH
59884: CALL_OW 1
59888: ST_TO_ADDR
// result := list ;
59889: LD_ADDR_VAR 0 4
59893: PUSH
59894: LD_VAR 0 1
59898: ST_TO_ADDR
// end ;
59899: LD_VAR 0 4
59903: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
59904: LD_INT 0
59906: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
59907: LD_ADDR_VAR 0 5
59911: PUSH
59912: LD_VAR 0 1
59916: PPUSH
59917: CALL_OW 250
59921: PPUSH
59922: LD_VAR 0 1
59926: PPUSH
59927: CALL_OW 251
59931: PPUSH
59932: LD_VAR 0 2
59936: PPUSH
59937: LD_VAR 0 3
59941: PPUSH
59942: LD_VAR 0 4
59946: PPUSH
59947: CALL 60325 0 5
59951: ST_TO_ADDR
// end ;
59952: LD_VAR 0 5
59956: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
59957: LD_INT 0
59959: PPUSH
59960: PPUSH
59961: PPUSH
59962: PPUSH
// if not list or not unit then
59963: LD_VAR 0 2
59967: NOT
59968: PUSH
59969: LD_VAR 0 1
59973: NOT
59974: OR
59975: IFFALSE 59979
// exit ;
59977: GO 60320
// result := [ ] ;
59979: LD_ADDR_VAR 0 5
59983: PUSH
59984: EMPTY
59985: ST_TO_ADDR
// for i in list do
59986: LD_ADDR_VAR 0 6
59990: PUSH
59991: LD_VAR 0 2
59995: PUSH
59996: FOR_IN
59997: IFFALSE 60215
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
59999: LD_ADDR_VAR 0 8
60003: PUSH
60004: LD_VAR 0 1
60008: PPUSH
60009: LD_VAR 0 6
60013: PUSH
60014: LD_INT 1
60016: ARRAY
60017: PPUSH
60018: LD_VAR 0 6
60022: PUSH
60023: LD_INT 2
60025: ARRAY
60026: PPUSH
60027: CALL_OW 297
60031: ST_TO_ADDR
// if not Count ( result ) then
60032: LD_VAR 0 5
60036: PPUSH
60037: CALL 56609 0 1
60041: NOT
60042: IFFALSE 60075
// begin result := Join ( result , [ i , tmp ] ) ;
60044: LD_ADDR_VAR 0 5
60048: PUSH
60049: LD_VAR 0 5
60053: PPUSH
60054: LD_VAR 0 6
60058: PUSH
60059: LD_VAR 0 8
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: PPUSH
60068: CALL 92209 0 2
60072: ST_TO_ADDR
// continue ;
60073: GO 59996
// end ; if result [ result ] [ 2 ] <= tmp then
60075: LD_VAR 0 5
60079: PUSH
60080: LD_VAR 0 5
60084: ARRAY
60085: PUSH
60086: LD_INT 2
60088: ARRAY
60089: PUSH
60090: LD_VAR 0 8
60094: LESSEQUAL
60095: IFFALSE 60128
// result := Join ( result , [ i , tmp ] ) else
60097: LD_ADDR_VAR 0 5
60101: PUSH
60102: LD_VAR 0 5
60106: PPUSH
60107: LD_VAR 0 6
60111: PUSH
60112: LD_VAR 0 8
60116: PUSH
60117: EMPTY
60118: LIST
60119: LIST
60120: PPUSH
60121: CALL 92209 0 2
60125: ST_TO_ADDR
60126: GO 60213
// begin for j := 1 to Count ( result ) do
60128: LD_ADDR_VAR 0 7
60132: PUSH
60133: DOUBLE
60134: LD_INT 1
60136: DEC
60137: ST_TO_ADDR
60138: LD_VAR 0 5
60142: PPUSH
60143: CALL 56609 0 1
60147: PUSH
60148: FOR_TO
60149: IFFALSE 60211
// begin if tmp < result [ j ] [ 2 ] then
60151: LD_VAR 0 8
60155: PUSH
60156: LD_VAR 0 5
60160: PUSH
60161: LD_VAR 0 7
60165: ARRAY
60166: PUSH
60167: LD_INT 2
60169: ARRAY
60170: LESS
60171: IFFALSE 60209
// begin result := Insert ( result , j , [ i , tmp ] ) ;
60173: LD_ADDR_VAR 0 5
60177: PUSH
60178: LD_VAR 0 5
60182: PPUSH
60183: LD_VAR 0 7
60187: PPUSH
60188: LD_VAR 0 6
60192: PUSH
60193: LD_VAR 0 8
60197: PUSH
60198: EMPTY
60199: LIST
60200: LIST
60201: PPUSH
60202: CALL_OW 2
60206: ST_TO_ADDR
// break ;
60207: GO 60211
// end ; end ;
60209: GO 60148
60211: POP
60212: POP
// end ; end ;
60213: GO 59996
60215: POP
60216: POP
// if result and not asc then
60217: LD_VAR 0 5
60221: PUSH
60222: LD_VAR 0 3
60226: NOT
60227: AND
60228: IFFALSE 60245
// result := ReverseArray ( result ) ;
60230: LD_ADDR_VAR 0 5
60234: PUSH
60235: LD_VAR 0 5
60239: PPUSH
60240: CALL 87485 0 1
60244: ST_TO_ADDR
// tmp := [ ] ;
60245: LD_ADDR_VAR 0 8
60249: PUSH
60250: EMPTY
60251: ST_TO_ADDR
// if mode then
60252: LD_VAR 0 4
60256: IFFALSE 60320
// begin for i := 1 to result do
60258: LD_ADDR_VAR 0 6
60262: PUSH
60263: DOUBLE
60264: LD_INT 1
60266: DEC
60267: ST_TO_ADDR
60268: LD_VAR 0 5
60272: PUSH
60273: FOR_TO
60274: IFFALSE 60308
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
60276: LD_ADDR_VAR 0 8
60280: PUSH
60281: LD_VAR 0 8
60285: PPUSH
60286: LD_VAR 0 5
60290: PUSH
60291: LD_VAR 0 6
60295: ARRAY
60296: PUSH
60297: LD_INT 1
60299: ARRAY
60300: PPUSH
60301: CALL 92209 0 2
60305: ST_TO_ADDR
60306: GO 60273
60308: POP
60309: POP
// result := tmp ;
60310: LD_ADDR_VAR 0 5
60314: PUSH
60315: LD_VAR 0 8
60319: ST_TO_ADDR
// end ; end ;
60320: LD_VAR 0 5
60324: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
60325: LD_INT 0
60327: PPUSH
60328: PPUSH
60329: PPUSH
60330: PPUSH
// if not list then
60331: LD_VAR 0 3
60335: NOT
60336: IFFALSE 60340
// exit ;
60338: GO 60728
// result := [ ] ;
60340: LD_ADDR_VAR 0 6
60344: PUSH
60345: EMPTY
60346: ST_TO_ADDR
// for i in list do
60347: LD_ADDR_VAR 0 7
60351: PUSH
60352: LD_VAR 0 3
60356: PUSH
60357: FOR_IN
60358: IFFALSE 60560
// begin tmp := GetDistUnitXY ( i , x , y ) ;
60360: LD_ADDR_VAR 0 9
60364: PUSH
60365: LD_VAR 0 7
60369: PPUSH
60370: LD_VAR 0 1
60374: PPUSH
60375: LD_VAR 0 2
60379: PPUSH
60380: CALL_OW 297
60384: ST_TO_ADDR
// if not result then
60385: LD_VAR 0 6
60389: NOT
60390: IFFALSE 60416
// result := [ [ i , tmp ] ] else
60392: LD_ADDR_VAR 0 6
60396: PUSH
60397: LD_VAR 0 7
60401: PUSH
60402: LD_VAR 0 9
60406: PUSH
60407: EMPTY
60408: LIST
60409: LIST
60410: PUSH
60411: EMPTY
60412: LIST
60413: ST_TO_ADDR
60414: GO 60558
// begin if result [ result ] [ 2 ] < tmp then
60416: LD_VAR 0 6
60420: PUSH
60421: LD_VAR 0 6
60425: ARRAY
60426: PUSH
60427: LD_INT 2
60429: ARRAY
60430: PUSH
60431: LD_VAR 0 9
60435: LESS
60436: IFFALSE 60478
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
60438: LD_ADDR_VAR 0 6
60442: PUSH
60443: LD_VAR 0 6
60447: PPUSH
60448: LD_VAR 0 6
60452: PUSH
60453: LD_INT 1
60455: PLUS
60456: PPUSH
60457: LD_VAR 0 7
60461: PUSH
60462: LD_VAR 0 9
60466: PUSH
60467: EMPTY
60468: LIST
60469: LIST
60470: PPUSH
60471: CALL_OW 2
60475: ST_TO_ADDR
60476: GO 60558
// for j = 1 to result do
60478: LD_ADDR_VAR 0 8
60482: PUSH
60483: DOUBLE
60484: LD_INT 1
60486: DEC
60487: ST_TO_ADDR
60488: LD_VAR 0 6
60492: PUSH
60493: FOR_TO
60494: IFFALSE 60556
// begin if tmp < result [ j ] [ 2 ] then
60496: LD_VAR 0 9
60500: PUSH
60501: LD_VAR 0 6
60505: PUSH
60506: LD_VAR 0 8
60510: ARRAY
60511: PUSH
60512: LD_INT 2
60514: ARRAY
60515: LESS
60516: IFFALSE 60554
// begin result := Insert ( result , j , [ i , tmp ] ) ;
60518: LD_ADDR_VAR 0 6
60522: PUSH
60523: LD_VAR 0 6
60527: PPUSH
60528: LD_VAR 0 8
60532: PPUSH
60533: LD_VAR 0 7
60537: PUSH
60538: LD_VAR 0 9
60542: PUSH
60543: EMPTY
60544: LIST
60545: LIST
60546: PPUSH
60547: CALL_OW 2
60551: ST_TO_ADDR
// break ;
60552: GO 60556
// end ; end ;
60554: GO 60493
60556: POP
60557: POP
// end ; end ;
60558: GO 60357
60560: POP
60561: POP
// if result and not asc then
60562: LD_VAR 0 6
60566: PUSH
60567: LD_VAR 0 4
60571: NOT
60572: AND
60573: IFFALSE 60648
// begin tmp := result ;
60575: LD_ADDR_VAR 0 9
60579: PUSH
60580: LD_VAR 0 6
60584: ST_TO_ADDR
// for i = tmp downto 1 do
60585: LD_ADDR_VAR 0 7
60589: PUSH
60590: DOUBLE
60591: LD_VAR 0 9
60595: INC
60596: ST_TO_ADDR
60597: LD_INT 1
60599: PUSH
60600: FOR_DOWNTO
60601: IFFALSE 60646
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
60603: LD_ADDR_VAR 0 6
60607: PUSH
60608: LD_VAR 0 6
60612: PPUSH
60613: LD_VAR 0 9
60617: PUSH
60618: LD_VAR 0 7
60622: MINUS
60623: PUSH
60624: LD_INT 1
60626: PLUS
60627: PPUSH
60628: LD_VAR 0 9
60632: PUSH
60633: LD_VAR 0 7
60637: ARRAY
60638: PPUSH
60639: CALL_OW 1
60643: ST_TO_ADDR
60644: GO 60600
60646: POP
60647: POP
// end ; tmp := [ ] ;
60648: LD_ADDR_VAR 0 9
60652: PUSH
60653: EMPTY
60654: ST_TO_ADDR
// if mode then
60655: LD_VAR 0 5
60659: IFFALSE 60728
// begin for i = 1 to result do
60661: LD_ADDR_VAR 0 7
60665: PUSH
60666: DOUBLE
60667: LD_INT 1
60669: DEC
60670: ST_TO_ADDR
60671: LD_VAR 0 6
60675: PUSH
60676: FOR_TO
60677: IFFALSE 60716
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
60679: LD_ADDR_VAR 0 9
60683: PUSH
60684: LD_VAR 0 9
60688: PPUSH
60689: LD_VAR 0 7
60693: PPUSH
60694: LD_VAR 0 6
60698: PUSH
60699: LD_VAR 0 7
60703: ARRAY
60704: PUSH
60705: LD_INT 1
60707: ARRAY
60708: PPUSH
60709: CALL_OW 1
60713: ST_TO_ADDR
60714: GO 60676
60716: POP
60717: POP
// result := tmp ;
60718: LD_ADDR_VAR 0 6
60722: PUSH
60723: LD_VAR 0 9
60727: ST_TO_ADDR
// end ; end ;
60728: LD_VAR 0 6
60732: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
60733: LD_INT 0
60735: PPUSH
60736: PPUSH
60737: PPUSH
60738: PPUSH
60739: PPUSH
60740: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
60741: LD_ADDR_VAR 0 5
60745: PUSH
60746: LD_INT 0
60748: PUSH
60749: LD_INT 0
60751: PUSH
60752: LD_INT 0
60754: PUSH
60755: EMPTY
60756: PUSH
60757: EMPTY
60758: LIST
60759: LIST
60760: LIST
60761: LIST
60762: ST_TO_ADDR
// if not x or not y then
60763: LD_VAR 0 2
60767: NOT
60768: PUSH
60769: LD_VAR 0 3
60773: NOT
60774: OR
60775: IFFALSE 60779
// exit ;
60777: GO 62429
// if not range then
60779: LD_VAR 0 4
60783: NOT
60784: IFFALSE 60794
// range := 10 ;
60786: LD_ADDR_VAR 0 4
60790: PUSH
60791: LD_INT 10
60793: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
60794: LD_ADDR_VAR 0 8
60798: PUSH
60799: LD_INT 81
60801: PUSH
60802: LD_VAR 0 1
60806: PUSH
60807: EMPTY
60808: LIST
60809: LIST
60810: PUSH
60811: LD_INT 92
60813: PUSH
60814: LD_VAR 0 2
60818: PUSH
60819: LD_VAR 0 3
60823: PUSH
60824: LD_VAR 0 4
60828: PUSH
60829: EMPTY
60830: LIST
60831: LIST
60832: LIST
60833: LIST
60834: PUSH
60835: LD_INT 3
60837: PUSH
60838: LD_INT 21
60840: PUSH
60841: LD_INT 3
60843: PUSH
60844: EMPTY
60845: LIST
60846: LIST
60847: PUSH
60848: EMPTY
60849: LIST
60850: LIST
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: LIST
60856: PPUSH
60857: CALL_OW 69
60861: ST_TO_ADDR
// if not tmp then
60862: LD_VAR 0 8
60866: NOT
60867: IFFALSE 60871
// exit ;
60869: GO 62429
// for i in tmp do
60871: LD_ADDR_VAR 0 6
60875: PUSH
60876: LD_VAR 0 8
60880: PUSH
60881: FOR_IN
60882: IFFALSE 62404
// begin points := [ 0 , 0 , 0 ] ;
60884: LD_ADDR_VAR 0 9
60888: PUSH
60889: LD_INT 0
60891: PUSH
60892: LD_INT 0
60894: PUSH
60895: LD_INT 0
60897: PUSH
60898: EMPTY
60899: LIST
60900: LIST
60901: LIST
60902: ST_TO_ADDR
// bpoints := 1 ;
60903: LD_ADDR_VAR 0 10
60907: PUSH
60908: LD_INT 1
60910: ST_TO_ADDR
// case GetType ( i ) of unit_human :
60911: LD_VAR 0 6
60915: PPUSH
60916: CALL_OW 247
60920: PUSH
60921: LD_INT 1
60923: DOUBLE
60924: EQUAL
60925: IFTRUE 60929
60927: GO 61507
60929: POP
// begin if GetClass ( i ) = 1 then
60930: LD_VAR 0 6
60934: PPUSH
60935: CALL_OW 257
60939: PUSH
60940: LD_INT 1
60942: EQUAL
60943: IFFALSE 60964
// points := [ 10 , 5 , 3 ] ;
60945: LD_ADDR_VAR 0 9
60949: PUSH
60950: LD_INT 10
60952: PUSH
60953: LD_INT 5
60955: PUSH
60956: LD_INT 3
60958: PUSH
60959: EMPTY
60960: LIST
60961: LIST
60962: LIST
60963: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
60964: LD_VAR 0 6
60968: PPUSH
60969: CALL_OW 257
60973: PUSH
60974: LD_INT 2
60976: PUSH
60977: LD_INT 3
60979: PUSH
60980: LD_INT 4
60982: PUSH
60983: EMPTY
60984: LIST
60985: LIST
60986: LIST
60987: IN
60988: IFFALSE 61009
// points := [ 3 , 2 , 1 ] ;
60990: LD_ADDR_VAR 0 9
60994: PUSH
60995: LD_INT 3
60997: PUSH
60998: LD_INT 2
61000: PUSH
61001: LD_INT 1
61003: PUSH
61004: EMPTY
61005: LIST
61006: LIST
61007: LIST
61008: ST_TO_ADDR
// if GetClass ( i ) = 5 then
61009: LD_VAR 0 6
61013: PPUSH
61014: CALL_OW 257
61018: PUSH
61019: LD_INT 5
61021: EQUAL
61022: IFFALSE 61043
// points := [ 130 , 5 , 2 ] ;
61024: LD_ADDR_VAR 0 9
61028: PUSH
61029: LD_INT 130
61031: PUSH
61032: LD_INT 5
61034: PUSH
61035: LD_INT 2
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: LIST
61042: ST_TO_ADDR
// if GetClass ( i ) = 8 then
61043: LD_VAR 0 6
61047: PPUSH
61048: CALL_OW 257
61052: PUSH
61053: LD_INT 8
61055: EQUAL
61056: IFFALSE 61077
// points := [ 35 , 35 , 30 ] ;
61058: LD_ADDR_VAR 0 9
61062: PUSH
61063: LD_INT 35
61065: PUSH
61066: LD_INT 35
61068: PUSH
61069: LD_INT 30
61071: PUSH
61072: EMPTY
61073: LIST
61074: LIST
61075: LIST
61076: ST_TO_ADDR
// if GetClass ( i ) = 9 then
61077: LD_VAR 0 6
61081: PPUSH
61082: CALL_OW 257
61086: PUSH
61087: LD_INT 9
61089: EQUAL
61090: IFFALSE 61111
// points := [ 20 , 55 , 40 ] ;
61092: LD_ADDR_VAR 0 9
61096: PUSH
61097: LD_INT 20
61099: PUSH
61100: LD_INT 55
61102: PUSH
61103: LD_INT 40
61105: PUSH
61106: EMPTY
61107: LIST
61108: LIST
61109: LIST
61110: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
61111: LD_VAR 0 6
61115: PPUSH
61116: CALL_OW 257
61120: PUSH
61121: LD_INT 12
61123: PUSH
61124: LD_INT 16
61126: PUSH
61127: EMPTY
61128: LIST
61129: LIST
61130: IN
61131: IFFALSE 61152
// points := [ 5 , 3 , 2 ] ;
61133: LD_ADDR_VAR 0 9
61137: PUSH
61138: LD_INT 5
61140: PUSH
61141: LD_INT 3
61143: PUSH
61144: LD_INT 2
61146: PUSH
61147: EMPTY
61148: LIST
61149: LIST
61150: LIST
61151: ST_TO_ADDR
// if GetClass ( i ) = 17 then
61152: LD_VAR 0 6
61156: PPUSH
61157: CALL_OW 257
61161: PUSH
61162: LD_INT 17
61164: EQUAL
61165: IFFALSE 61186
// points := [ 100 , 50 , 75 ] ;
61167: LD_ADDR_VAR 0 9
61171: PUSH
61172: LD_INT 100
61174: PUSH
61175: LD_INT 50
61177: PUSH
61178: LD_INT 75
61180: PUSH
61181: EMPTY
61182: LIST
61183: LIST
61184: LIST
61185: ST_TO_ADDR
// if GetClass ( i ) = 15 then
61186: LD_VAR 0 6
61190: PPUSH
61191: CALL_OW 257
61195: PUSH
61196: LD_INT 15
61198: EQUAL
61199: IFFALSE 61220
// points := [ 10 , 5 , 3 ] ;
61201: LD_ADDR_VAR 0 9
61205: PUSH
61206: LD_INT 10
61208: PUSH
61209: LD_INT 5
61211: PUSH
61212: LD_INT 3
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: LIST
61219: ST_TO_ADDR
// if GetClass ( i ) = 14 then
61220: LD_VAR 0 6
61224: PPUSH
61225: CALL_OW 257
61229: PUSH
61230: LD_INT 14
61232: EQUAL
61233: IFFALSE 61254
// points := [ 10 , 0 , 0 ] ;
61235: LD_ADDR_VAR 0 9
61239: PUSH
61240: LD_INT 10
61242: PUSH
61243: LD_INT 0
61245: PUSH
61246: LD_INT 0
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: LIST
61253: ST_TO_ADDR
// if GetClass ( i ) = 11 then
61254: LD_VAR 0 6
61258: PPUSH
61259: CALL_OW 257
61263: PUSH
61264: LD_INT 11
61266: EQUAL
61267: IFFALSE 61288
// points := [ 30 , 10 , 5 ] ;
61269: LD_ADDR_VAR 0 9
61273: PUSH
61274: LD_INT 30
61276: PUSH
61277: LD_INT 10
61279: PUSH
61280: LD_INT 5
61282: PUSH
61283: EMPTY
61284: LIST
61285: LIST
61286: LIST
61287: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
61288: LD_VAR 0 1
61292: PPUSH
61293: LD_INT 5
61295: PPUSH
61296: CALL_OW 321
61300: PUSH
61301: LD_INT 2
61303: EQUAL
61304: IFFALSE 61321
// bpoints := bpoints * 1.8 ;
61306: LD_ADDR_VAR 0 10
61310: PUSH
61311: LD_VAR 0 10
61315: PUSH
61316: LD_REAL  1.80000000000000E+0000
61319: MUL
61320: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
61321: LD_VAR 0 6
61325: PPUSH
61326: CALL_OW 257
61330: PUSH
61331: LD_INT 1
61333: PUSH
61334: LD_INT 2
61336: PUSH
61337: LD_INT 3
61339: PUSH
61340: LD_INT 4
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: LIST
61347: LIST
61348: IN
61349: PUSH
61350: LD_VAR 0 1
61354: PPUSH
61355: LD_INT 51
61357: PPUSH
61358: CALL_OW 321
61362: PUSH
61363: LD_INT 2
61365: EQUAL
61366: AND
61367: IFFALSE 61384
// bpoints := bpoints * 1.2 ;
61369: LD_ADDR_VAR 0 10
61373: PUSH
61374: LD_VAR 0 10
61378: PUSH
61379: LD_REAL  1.20000000000000E+0000
61382: MUL
61383: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
61384: LD_VAR 0 6
61388: PPUSH
61389: CALL_OW 257
61393: PUSH
61394: LD_INT 5
61396: PUSH
61397: LD_INT 7
61399: PUSH
61400: LD_INT 9
61402: PUSH
61403: EMPTY
61404: LIST
61405: LIST
61406: LIST
61407: IN
61408: PUSH
61409: LD_VAR 0 1
61413: PPUSH
61414: LD_INT 52
61416: PPUSH
61417: CALL_OW 321
61421: PUSH
61422: LD_INT 2
61424: EQUAL
61425: AND
61426: IFFALSE 61443
// bpoints := bpoints * 1.5 ;
61428: LD_ADDR_VAR 0 10
61432: PUSH
61433: LD_VAR 0 10
61437: PUSH
61438: LD_REAL  1.50000000000000E+0000
61441: MUL
61442: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
61443: LD_VAR 0 1
61447: PPUSH
61448: LD_INT 66
61450: PPUSH
61451: CALL_OW 321
61455: PUSH
61456: LD_INT 2
61458: EQUAL
61459: IFFALSE 61476
// bpoints := bpoints * 1.1 ;
61461: LD_ADDR_VAR 0 10
61465: PUSH
61466: LD_VAR 0 10
61470: PUSH
61471: LD_REAL  1.10000000000000E+0000
61474: MUL
61475: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
61476: LD_ADDR_VAR 0 10
61480: PUSH
61481: LD_VAR 0 10
61485: PUSH
61486: LD_VAR 0 6
61490: PPUSH
61491: LD_INT 1
61493: PPUSH
61494: CALL_OW 259
61498: PUSH
61499: LD_REAL  1.15000000000000E+0000
61502: MUL
61503: MUL
61504: ST_TO_ADDR
// end ; unit_vehicle :
61505: GO 62333
61507: LD_INT 2
61509: DOUBLE
61510: EQUAL
61511: IFTRUE 61515
61513: GO 62321
61515: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
61516: LD_VAR 0 6
61520: PPUSH
61521: CALL_OW 264
61525: PUSH
61526: LD_INT 2
61528: PUSH
61529: LD_INT 42
61531: PUSH
61532: LD_INT 24
61534: PUSH
61535: EMPTY
61536: LIST
61537: LIST
61538: LIST
61539: IN
61540: IFFALSE 61561
// points := [ 25 , 5 , 3 ] ;
61542: LD_ADDR_VAR 0 9
61546: PUSH
61547: LD_INT 25
61549: PUSH
61550: LD_INT 5
61552: PUSH
61553: LD_INT 3
61555: PUSH
61556: EMPTY
61557: LIST
61558: LIST
61559: LIST
61560: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
61561: LD_VAR 0 6
61565: PPUSH
61566: CALL_OW 264
61570: PUSH
61571: LD_INT 4
61573: PUSH
61574: LD_INT 43
61576: PUSH
61577: LD_INT 25
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: LIST
61584: IN
61585: IFFALSE 61606
// points := [ 40 , 15 , 5 ] ;
61587: LD_ADDR_VAR 0 9
61591: PUSH
61592: LD_INT 40
61594: PUSH
61595: LD_INT 15
61597: PUSH
61598: LD_INT 5
61600: PUSH
61601: EMPTY
61602: LIST
61603: LIST
61604: LIST
61605: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
61606: LD_VAR 0 6
61610: PPUSH
61611: CALL_OW 264
61615: PUSH
61616: LD_INT 3
61618: PUSH
61619: LD_INT 23
61621: PUSH
61622: EMPTY
61623: LIST
61624: LIST
61625: IN
61626: IFFALSE 61647
// points := [ 7 , 25 , 8 ] ;
61628: LD_ADDR_VAR 0 9
61632: PUSH
61633: LD_INT 7
61635: PUSH
61636: LD_INT 25
61638: PUSH
61639: LD_INT 8
61641: PUSH
61642: EMPTY
61643: LIST
61644: LIST
61645: LIST
61646: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
61647: LD_VAR 0 6
61651: PPUSH
61652: CALL_OW 264
61656: PUSH
61657: LD_INT 5
61659: PUSH
61660: LD_INT 27
61662: PUSH
61663: LD_INT 44
61665: PUSH
61666: EMPTY
61667: LIST
61668: LIST
61669: LIST
61670: IN
61671: IFFALSE 61692
// points := [ 14 , 50 , 16 ] ;
61673: LD_ADDR_VAR 0 9
61677: PUSH
61678: LD_INT 14
61680: PUSH
61681: LD_INT 50
61683: PUSH
61684: LD_INT 16
61686: PUSH
61687: EMPTY
61688: LIST
61689: LIST
61690: LIST
61691: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
61692: LD_VAR 0 6
61696: PPUSH
61697: CALL_OW 264
61701: PUSH
61702: LD_INT 6
61704: PUSH
61705: LD_INT 46
61707: PUSH
61708: EMPTY
61709: LIST
61710: LIST
61711: IN
61712: IFFALSE 61733
// points := [ 32 , 120 , 70 ] ;
61714: LD_ADDR_VAR 0 9
61718: PUSH
61719: LD_INT 32
61721: PUSH
61722: LD_INT 120
61724: PUSH
61725: LD_INT 70
61727: PUSH
61728: EMPTY
61729: LIST
61730: LIST
61731: LIST
61732: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
61733: LD_VAR 0 6
61737: PPUSH
61738: CALL_OW 264
61742: PUSH
61743: LD_INT 7
61745: PUSH
61746: LD_INT 28
61748: PUSH
61749: LD_INT 45
61751: PUSH
61752: LD_INT 92
61754: PUSH
61755: EMPTY
61756: LIST
61757: LIST
61758: LIST
61759: LIST
61760: IN
61761: IFFALSE 61782
// points := [ 35 , 20 , 45 ] ;
61763: LD_ADDR_VAR 0 9
61767: PUSH
61768: LD_INT 35
61770: PUSH
61771: LD_INT 20
61773: PUSH
61774: LD_INT 45
61776: PUSH
61777: EMPTY
61778: LIST
61779: LIST
61780: LIST
61781: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
61782: LD_VAR 0 6
61786: PPUSH
61787: CALL_OW 264
61791: PUSH
61792: LD_INT 47
61794: PUSH
61795: EMPTY
61796: LIST
61797: IN
61798: IFFALSE 61819
// points := [ 67 , 45 , 75 ] ;
61800: LD_ADDR_VAR 0 9
61804: PUSH
61805: LD_INT 67
61807: PUSH
61808: LD_INT 45
61810: PUSH
61811: LD_INT 75
61813: PUSH
61814: EMPTY
61815: LIST
61816: LIST
61817: LIST
61818: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
61819: LD_VAR 0 6
61823: PPUSH
61824: CALL_OW 264
61828: PUSH
61829: LD_INT 26
61831: PUSH
61832: EMPTY
61833: LIST
61834: IN
61835: IFFALSE 61856
// points := [ 120 , 30 , 80 ] ;
61837: LD_ADDR_VAR 0 9
61841: PUSH
61842: LD_INT 120
61844: PUSH
61845: LD_INT 30
61847: PUSH
61848: LD_INT 80
61850: PUSH
61851: EMPTY
61852: LIST
61853: LIST
61854: LIST
61855: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
61856: LD_VAR 0 6
61860: PPUSH
61861: CALL_OW 264
61865: PUSH
61866: LD_INT 22
61868: PUSH
61869: EMPTY
61870: LIST
61871: IN
61872: IFFALSE 61893
// points := [ 40 , 1 , 1 ] ;
61874: LD_ADDR_VAR 0 9
61878: PUSH
61879: LD_INT 40
61881: PUSH
61882: LD_INT 1
61884: PUSH
61885: LD_INT 1
61887: PUSH
61888: EMPTY
61889: LIST
61890: LIST
61891: LIST
61892: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
61893: LD_VAR 0 6
61897: PPUSH
61898: CALL_OW 264
61902: PUSH
61903: LD_INT 29
61905: PUSH
61906: EMPTY
61907: LIST
61908: IN
61909: IFFALSE 61930
// points := [ 70 , 200 , 400 ] ;
61911: LD_ADDR_VAR 0 9
61915: PUSH
61916: LD_INT 70
61918: PUSH
61919: LD_INT 200
61921: PUSH
61922: LD_INT 400
61924: PUSH
61925: EMPTY
61926: LIST
61927: LIST
61928: LIST
61929: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
61930: LD_VAR 0 6
61934: PPUSH
61935: CALL_OW 264
61939: PUSH
61940: LD_INT 14
61942: PUSH
61943: LD_INT 53
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: IN
61950: IFFALSE 61971
// points := [ 40 , 10 , 20 ] ;
61952: LD_ADDR_VAR 0 9
61956: PUSH
61957: LD_INT 40
61959: PUSH
61960: LD_INT 10
61962: PUSH
61963: LD_INT 20
61965: PUSH
61966: EMPTY
61967: LIST
61968: LIST
61969: LIST
61970: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
61971: LD_VAR 0 6
61975: PPUSH
61976: CALL_OW 264
61980: PUSH
61981: LD_INT 9
61983: PUSH
61984: EMPTY
61985: LIST
61986: IN
61987: IFFALSE 62008
// points := [ 5 , 70 , 20 ] ;
61989: LD_ADDR_VAR 0 9
61993: PUSH
61994: LD_INT 5
61996: PUSH
61997: LD_INT 70
61999: PUSH
62000: LD_INT 20
62002: PUSH
62003: EMPTY
62004: LIST
62005: LIST
62006: LIST
62007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
62008: LD_VAR 0 6
62012: PPUSH
62013: CALL_OW 264
62017: PUSH
62018: LD_INT 10
62020: PUSH
62021: EMPTY
62022: LIST
62023: IN
62024: IFFALSE 62045
// points := [ 35 , 110 , 70 ] ;
62026: LD_ADDR_VAR 0 9
62030: PUSH
62031: LD_INT 35
62033: PUSH
62034: LD_INT 110
62036: PUSH
62037: LD_INT 70
62039: PUSH
62040: EMPTY
62041: LIST
62042: LIST
62043: LIST
62044: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
62045: LD_VAR 0 6
62049: PPUSH
62050: CALL_OW 265
62054: PUSH
62055: LD_INT 25
62057: EQUAL
62058: IFFALSE 62079
// points := [ 80 , 65 , 100 ] ;
62060: LD_ADDR_VAR 0 9
62064: PUSH
62065: LD_INT 80
62067: PUSH
62068: LD_INT 65
62070: PUSH
62071: LD_INT 100
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: LIST
62078: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
62079: LD_VAR 0 6
62083: PPUSH
62084: CALL_OW 263
62088: PUSH
62089: LD_INT 1
62091: EQUAL
62092: IFFALSE 62127
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
62094: LD_ADDR_VAR 0 10
62098: PUSH
62099: LD_VAR 0 10
62103: PUSH
62104: LD_VAR 0 6
62108: PPUSH
62109: CALL_OW 311
62113: PPUSH
62114: LD_INT 3
62116: PPUSH
62117: CALL_OW 259
62121: PUSH
62122: LD_INT 4
62124: MUL
62125: MUL
62126: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
62127: LD_VAR 0 6
62131: PPUSH
62132: CALL_OW 263
62136: PUSH
62137: LD_INT 2
62139: EQUAL
62140: IFFALSE 62191
// begin j := IsControledBy ( i ) ;
62142: LD_ADDR_VAR 0 7
62146: PUSH
62147: LD_VAR 0 6
62151: PPUSH
62152: CALL_OW 312
62156: ST_TO_ADDR
// if j then
62157: LD_VAR 0 7
62161: IFFALSE 62191
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
62163: LD_ADDR_VAR 0 10
62167: PUSH
62168: LD_VAR 0 10
62172: PUSH
62173: LD_VAR 0 7
62177: PPUSH
62178: LD_INT 3
62180: PPUSH
62181: CALL_OW 259
62185: PUSH
62186: LD_INT 3
62188: MUL
62189: MUL
62190: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
62191: LD_VAR 0 6
62195: PPUSH
62196: CALL_OW 264
62200: PUSH
62201: LD_INT 5
62203: PUSH
62204: LD_INT 6
62206: PUSH
62207: LD_INT 46
62209: PUSH
62210: LD_INT 44
62212: PUSH
62213: LD_INT 47
62215: PUSH
62216: LD_INT 45
62218: PUSH
62219: LD_INT 28
62221: PUSH
62222: LD_INT 7
62224: PUSH
62225: LD_INT 27
62227: PUSH
62228: LD_INT 29
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: LIST
62235: LIST
62236: LIST
62237: LIST
62238: LIST
62239: LIST
62240: LIST
62241: LIST
62242: IN
62243: PUSH
62244: LD_VAR 0 1
62248: PPUSH
62249: LD_INT 52
62251: PPUSH
62252: CALL_OW 321
62256: PUSH
62257: LD_INT 2
62259: EQUAL
62260: AND
62261: IFFALSE 62278
// bpoints := bpoints * 1.2 ;
62263: LD_ADDR_VAR 0 10
62267: PUSH
62268: LD_VAR 0 10
62272: PUSH
62273: LD_REAL  1.20000000000000E+0000
62276: MUL
62277: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
62278: LD_VAR 0 6
62282: PPUSH
62283: CALL_OW 264
62287: PUSH
62288: LD_INT 6
62290: PUSH
62291: LD_INT 46
62293: PUSH
62294: LD_INT 47
62296: PUSH
62297: EMPTY
62298: LIST
62299: LIST
62300: LIST
62301: IN
62302: IFFALSE 62319
// bpoints := bpoints * 1.2 ;
62304: LD_ADDR_VAR 0 10
62308: PUSH
62309: LD_VAR 0 10
62313: PUSH
62314: LD_REAL  1.20000000000000E+0000
62317: MUL
62318: ST_TO_ADDR
// end ; unit_building :
62319: GO 62333
62321: LD_INT 3
62323: DOUBLE
62324: EQUAL
62325: IFTRUE 62329
62327: GO 62332
62329: POP
// ; end ;
62330: GO 62333
62332: POP
// for j = 1 to 3 do
62333: LD_ADDR_VAR 0 7
62337: PUSH
62338: DOUBLE
62339: LD_INT 1
62341: DEC
62342: ST_TO_ADDR
62343: LD_INT 3
62345: PUSH
62346: FOR_TO
62347: IFFALSE 62400
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
62349: LD_ADDR_VAR 0 5
62353: PUSH
62354: LD_VAR 0 5
62358: PPUSH
62359: LD_VAR 0 7
62363: PPUSH
62364: LD_VAR 0 5
62368: PUSH
62369: LD_VAR 0 7
62373: ARRAY
62374: PUSH
62375: LD_VAR 0 9
62379: PUSH
62380: LD_VAR 0 7
62384: ARRAY
62385: PUSH
62386: LD_VAR 0 10
62390: MUL
62391: PLUS
62392: PPUSH
62393: CALL_OW 1
62397: ST_TO_ADDR
62398: GO 62346
62400: POP
62401: POP
// end ;
62402: GO 60881
62404: POP
62405: POP
// result := Replace ( result , 4 , tmp ) ;
62406: LD_ADDR_VAR 0 5
62410: PUSH
62411: LD_VAR 0 5
62415: PPUSH
62416: LD_INT 4
62418: PPUSH
62419: LD_VAR 0 8
62423: PPUSH
62424: CALL_OW 1
62428: ST_TO_ADDR
// end ;
62429: LD_VAR 0 5
62433: RET
// export function DangerAtRange ( unit , range ) ; begin
62434: LD_INT 0
62436: PPUSH
// if not unit then
62437: LD_VAR 0 1
62441: NOT
62442: IFFALSE 62446
// exit ;
62444: GO 62491
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
62446: LD_ADDR_VAR 0 3
62450: PUSH
62451: LD_VAR 0 1
62455: PPUSH
62456: CALL_OW 255
62460: PPUSH
62461: LD_VAR 0 1
62465: PPUSH
62466: CALL_OW 250
62470: PPUSH
62471: LD_VAR 0 1
62475: PPUSH
62476: CALL_OW 251
62480: PPUSH
62481: LD_VAR 0 2
62485: PPUSH
62486: CALL 60733 0 4
62490: ST_TO_ADDR
// end ;
62491: LD_VAR 0 3
62495: RET
// export function DangerInArea ( side , area ) ; begin
62496: LD_INT 0
62498: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
62499: LD_ADDR_VAR 0 3
62503: PUSH
62504: LD_VAR 0 2
62508: PPUSH
62509: LD_INT 81
62511: PUSH
62512: LD_VAR 0 1
62516: PUSH
62517: EMPTY
62518: LIST
62519: LIST
62520: PPUSH
62521: CALL_OW 70
62525: ST_TO_ADDR
// end ;
62526: LD_VAR 0 3
62530: RET
// export function IsExtension ( b ) ; begin
62531: LD_INT 0
62533: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
62534: LD_ADDR_VAR 0 2
62538: PUSH
62539: LD_VAR 0 1
62543: PUSH
62544: LD_INT 23
62546: PUSH
62547: LD_INT 20
62549: PUSH
62550: LD_INT 22
62552: PUSH
62553: LD_INT 17
62555: PUSH
62556: LD_INT 24
62558: PUSH
62559: LD_INT 21
62561: PUSH
62562: LD_INT 19
62564: PUSH
62565: LD_INT 16
62567: PUSH
62568: LD_INT 25
62570: PUSH
62571: LD_INT 18
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: LIST
62583: LIST
62584: LIST
62585: IN
62586: ST_TO_ADDR
// end ;
62587: LD_VAR 0 2
62591: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
62592: LD_INT 0
62594: PPUSH
62595: PPUSH
62596: PPUSH
// result := [ ] ;
62597: LD_ADDR_VAR 0 4
62601: PUSH
62602: EMPTY
62603: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
62604: LD_ADDR_VAR 0 5
62608: PUSH
62609: LD_VAR 0 2
62613: PPUSH
62614: LD_INT 21
62616: PUSH
62617: LD_INT 3
62619: PUSH
62620: EMPTY
62621: LIST
62622: LIST
62623: PPUSH
62624: CALL_OW 70
62628: ST_TO_ADDR
// if not tmp then
62629: LD_VAR 0 5
62633: NOT
62634: IFFALSE 62638
// exit ;
62636: GO 62702
// if checkLink then
62638: LD_VAR 0 3
62642: IFFALSE 62692
// begin for i in tmp do
62644: LD_ADDR_VAR 0 6
62648: PUSH
62649: LD_VAR 0 5
62653: PUSH
62654: FOR_IN
62655: IFFALSE 62690
// if GetBase ( i ) <> base then
62657: LD_VAR 0 6
62661: PPUSH
62662: CALL_OW 274
62666: PUSH
62667: LD_VAR 0 1
62671: NONEQUAL
62672: IFFALSE 62688
// ComLinkToBase ( base , i ) ;
62674: LD_VAR 0 1
62678: PPUSH
62679: LD_VAR 0 6
62683: PPUSH
62684: CALL_OW 169
62688: GO 62654
62690: POP
62691: POP
// end ; result := tmp ;
62692: LD_ADDR_VAR 0 4
62696: PUSH
62697: LD_VAR 0 5
62701: ST_TO_ADDR
// end ;
62702: LD_VAR 0 4
62706: RET
// export function ComComplete ( units , b ) ; var i ; begin
62707: LD_INT 0
62709: PPUSH
62710: PPUSH
// if not units then
62711: LD_VAR 0 1
62715: NOT
62716: IFFALSE 62720
// exit ;
62718: GO 62810
// for i in units do
62720: LD_ADDR_VAR 0 4
62724: PUSH
62725: LD_VAR 0 1
62729: PUSH
62730: FOR_IN
62731: IFFALSE 62808
// if BuildingStatus ( b ) = bs_build then
62733: LD_VAR 0 2
62737: PPUSH
62738: CALL_OW 461
62742: PUSH
62743: LD_INT 1
62745: EQUAL
62746: IFFALSE 62806
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
62748: LD_VAR 0 4
62752: PPUSH
62753: LD_STRING h
62755: PUSH
62756: LD_VAR 0 2
62760: PPUSH
62761: CALL_OW 250
62765: PUSH
62766: LD_VAR 0 2
62770: PPUSH
62771: CALL_OW 251
62775: PUSH
62776: LD_VAR 0 2
62780: PUSH
62781: LD_INT 0
62783: PUSH
62784: LD_INT 0
62786: PUSH
62787: LD_INT 0
62789: PUSH
62790: EMPTY
62791: LIST
62792: LIST
62793: LIST
62794: LIST
62795: LIST
62796: LIST
62797: LIST
62798: PUSH
62799: EMPTY
62800: LIST
62801: PPUSH
62802: CALL_OW 446
62806: GO 62730
62808: POP
62809: POP
// end ;
62810: LD_VAR 0 3
62814: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
62815: LD_INT 0
62817: PPUSH
62818: PPUSH
62819: PPUSH
62820: PPUSH
62821: PPUSH
62822: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
62823: LD_VAR 0 1
62827: NOT
62828: PUSH
62829: LD_VAR 0 1
62833: PPUSH
62834: CALL_OW 263
62838: PUSH
62839: LD_INT 2
62841: NONEQUAL
62842: OR
62843: IFFALSE 62847
// exit ;
62845: GO 63163
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
62847: LD_ADDR_VAR 0 6
62851: PUSH
62852: LD_INT 22
62854: PUSH
62855: LD_VAR 0 1
62859: PPUSH
62860: CALL_OW 255
62864: PUSH
62865: EMPTY
62866: LIST
62867: LIST
62868: PUSH
62869: LD_INT 2
62871: PUSH
62872: LD_INT 30
62874: PUSH
62875: LD_INT 36
62877: PUSH
62878: EMPTY
62879: LIST
62880: LIST
62881: PUSH
62882: LD_INT 34
62884: PUSH
62885: LD_INT 31
62887: PUSH
62888: EMPTY
62889: LIST
62890: LIST
62891: PUSH
62892: EMPTY
62893: LIST
62894: LIST
62895: LIST
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PPUSH
62901: CALL_OW 69
62905: ST_TO_ADDR
// if not tmp then
62906: LD_VAR 0 6
62910: NOT
62911: IFFALSE 62915
// exit ;
62913: GO 63163
// result := [ ] ;
62915: LD_ADDR_VAR 0 2
62919: PUSH
62920: EMPTY
62921: ST_TO_ADDR
// for i in tmp do
62922: LD_ADDR_VAR 0 3
62926: PUSH
62927: LD_VAR 0 6
62931: PUSH
62932: FOR_IN
62933: IFFALSE 63004
// begin t := UnitsInside ( i ) ;
62935: LD_ADDR_VAR 0 4
62939: PUSH
62940: LD_VAR 0 3
62944: PPUSH
62945: CALL_OW 313
62949: ST_TO_ADDR
// if t then
62950: LD_VAR 0 4
62954: IFFALSE 63002
// for j in t do
62956: LD_ADDR_VAR 0 7
62960: PUSH
62961: LD_VAR 0 4
62965: PUSH
62966: FOR_IN
62967: IFFALSE 63000
// result := Replace ( result , result + 1 , j ) ;
62969: LD_ADDR_VAR 0 2
62973: PUSH
62974: LD_VAR 0 2
62978: PPUSH
62979: LD_VAR 0 2
62983: PUSH
62984: LD_INT 1
62986: PLUS
62987: PPUSH
62988: LD_VAR 0 7
62992: PPUSH
62993: CALL_OW 1
62997: ST_TO_ADDR
62998: GO 62966
63000: POP
63001: POP
// end ;
63002: GO 62932
63004: POP
63005: POP
// if not result then
63006: LD_VAR 0 2
63010: NOT
63011: IFFALSE 63015
// exit ;
63013: GO 63163
// mech := result [ 1 ] ;
63015: LD_ADDR_VAR 0 5
63019: PUSH
63020: LD_VAR 0 2
63024: PUSH
63025: LD_INT 1
63027: ARRAY
63028: ST_TO_ADDR
// if result > 1 then
63029: LD_VAR 0 2
63033: PUSH
63034: LD_INT 1
63036: GREATER
63037: IFFALSE 63149
// begin for i = 2 to result do
63039: LD_ADDR_VAR 0 3
63043: PUSH
63044: DOUBLE
63045: LD_INT 2
63047: DEC
63048: ST_TO_ADDR
63049: LD_VAR 0 2
63053: PUSH
63054: FOR_TO
63055: IFFALSE 63147
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
63057: LD_ADDR_VAR 0 4
63061: PUSH
63062: LD_VAR 0 2
63066: PUSH
63067: LD_VAR 0 3
63071: ARRAY
63072: PPUSH
63073: LD_INT 3
63075: PPUSH
63076: CALL_OW 259
63080: PUSH
63081: LD_VAR 0 2
63085: PUSH
63086: LD_VAR 0 3
63090: ARRAY
63091: PPUSH
63092: CALL_OW 432
63096: MINUS
63097: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
63098: LD_VAR 0 4
63102: PUSH
63103: LD_VAR 0 5
63107: PPUSH
63108: LD_INT 3
63110: PPUSH
63111: CALL_OW 259
63115: PUSH
63116: LD_VAR 0 5
63120: PPUSH
63121: CALL_OW 432
63125: MINUS
63126: GREATEREQUAL
63127: IFFALSE 63145
// mech := result [ i ] ;
63129: LD_ADDR_VAR 0 5
63133: PUSH
63134: LD_VAR 0 2
63138: PUSH
63139: LD_VAR 0 3
63143: ARRAY
63144: ST_TO_ADDR
// end ;
63145: GO 63054
63147: POP
63148: POP
// end ; ComLinkTo ( vehicle , mech ) ;
63149: LD_VAR 0 1
63153: PPUSH
63154: LD_VAR 0 5
63158: PPUSH
63159: CALL_OW 135
// end ;
63163: LD_VAR 0 2
63167: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
63168: LD_INT 0
63170: PPUSH
63171: PPUSH
63172: PPUSH
63173: PPUSH
63174: PPUSH
63175: PPUSH
63176: PPUSH
63177: PPUSH
63178: PPUSH
63179: PPUSH
63180: PPUSH
63181: PPUSH
63182: PPUSH
// result := [ ] ;
63183: LD_ADDR_VAR 0 7
63187: PUSH
63188: EMPTY
63189: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
63190: LD_VAR 0 1
63194: PPUSH
63195: CALL_OW 266
63199: PUSH
63200: LD_INT 0
63202: PUSH
63203: LD_INT 1
63205: PUSH
63206: EMPTY
63207: LIST
63208: LIST
63209: IN
63210: NOT
63211: IFFALSE 63215
// exit ;
63213: GO 64849
// if name then
63215: LD_VAR 0 3
63219: IFFALSE 63235
// SetBName ( base_dep , name ) ;
63221: LD_VAR 0 1
63225: PPUSH
63226: LD_VAR 0 3
63230: PPUSH
63231: CALL_OW 500
// base := GetBase ( base_dep ) ;
63235: LD_ADDR_VAR 0 15
63239: PUSH
63240: LD_VAR 0 1
63244: PPUSH
63245: CALL_OW 274
63249: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
63250: LD_ADDR_VAR 0 16
63254: PUSH
63255: LD_VAR 0 1
63259: PPUSH
63260: CALL_OW 255
63264: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
63265: LD_ADDR_VAR 0 17
63269: PUSH
63270: LD_VAR 0 1
63274: PPUSH
63275: CALL_OW 248
63279: ST_TO_ADDR
// if sources then
63280: LD_VAR 0 5
63284: IFFALSE 63331
// for i = 1 to 3 do
63286: LD_ADDR_VAR 0 8
63290: PUSH
63291: DOUBLE
63292: LD_INT 1
63294: DEC
63295: ST_TO_ADDR
63296: LD_INT 3
63298: PUSH
63299: FOR_TO
63300: IFFALSE 63329
// AddResourceType ( base , i , sources [ i ] ) ;
63302: LD_VAR 0 15
63306: PPUSH
63307: LD_VAR 0 8
63311: PPUSH
63312: LD_VAR 0 5
63316: PUSH
63317: LD_VAR 0 8
63321: ARRAY
63322: PPUSH
63323: CALL_OW 276
63327: GO 63299
63329: POP
63330: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
63331: LD_ADDR_VAR 0 18
63335: PUSH
63336: LD_VAR 0 15
63340: PPUSH
63341: LD_VAR 0 2
63345: PPUSH
63346: LD_INT 1
63348: PPUSH
63349: CALL 62592 0 3
63353: ST_TO_ADDR
// InitHc ;
63354: CALL_OW 19
// InitUc ;
63358: CALL_OW 18
// uc_side := side ;
63362: LD_ADDR_OWVAR 20
63366: PUSH
63367: LD_VAR 0 16
63371: ST_TO_ADDR
// uc_nation := nation ;
63372: LD_ADDR_OWVAR 21
63376: PUSH
63377: LD_VAR 0 17
63381: ST_TO_ADDR
// if buildings then
63382: LD_VAR 0 18
63386: IFFALSE 64708
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
63388: LD_ADDR_VAR 0 19
63392: PUSH
63393: LD_VAR 0 18
63397: PPUSH
63398: LD_INT 2
63400: PUSH
63401: LD_INT 30
63403: PUSH
63404: LD_INT 29
63406: PUSH
63407: EMPTY
63408: LIST
63409: LIST
63410: PUSH
63411: LD_INT 30
63413: PUSH
63414: LD_INT 30
63416: PUSH
63417: EMPTY
63418: LIST
63419: LIST
63420: PUSH
63421: EMPTY
63422: LIST
63423: LIST
63424: LIST
63425: PPUSH
63426: CALL_OW 72
63430: ST_TO_ADDR
// if tmp then
63431: LD_VAR 0 19
63435: IFFALSE 63483
// for i in tmp do
63437: LD_ADDR_VAR 0 8
63441: PUSH
63442: LD_VAR 0 19
63446: PUSH
63447: FOR_IN
63448: IFFALSE 63481
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
63450: LD_VAR 0 8
63454: PPUSH
63455: CALL_OW 250
63459: PPUSH
63460: LD_VAR 0 8
63464: PPUSH
63465: CALL_OW 251
63469: PPUSH
63470: LD_VAR 0 16
63474: PPUSH
63475: CALL_OW 441
63479: GO 63447
63481: POP
63482: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
63483: LD_VAR 0 18
63487: PPUSH
63488: LD_INT 2
63490: PUSH
63491: LD_INT 30
63493: PUSH
63494: LD_INT 32
63496: PUSH
63497: EMPTY
63498: LIST
63499: LIST
63500: PUSH
63501: LD_INT 30
63503: PUSH
63504: LD_INT 33
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PUSH
63511: EMPTY
63512: LIST
63513: LIST
63514: LIST
63515: PPUSH
63516: CALL_OW 72
63520: IFFALSE 63608
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
63522: LD_ADDR_VAR 0 8
63526: PUSH
63527: LD_VAR 0 18
63531: PPUSH
63532: LD_INT 2
63534: PUSH
63535: LD_INT 30
63537: PUSH
63538: LD_INT 32
63540: PUSH
63541: EMPTY
63542: LIST
63543: LIST
63544: PUSH
63545: LD_INT 30
63547: PUSH
63548: LD_INT 33
63550: PUSH
63551: EMPTY
63552: LIST
63553: LIST
63554: PUSH
63555: EMPTY
63556: LIST
63557: LIST
63558: LIST
63559: PPUSH
63560: CALL_OW 72
63564: PUSH
63565: FOR_IN
63566: IFFALSE 63606
// begin if not GetBWeapon ( i ) then
63568: LD_VAR 0 8
63572: PPUSH
63573: CALL_OW 269
63577: NOT
63578: IFFALSE 63604
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
63580: LD_VAR 0 8
63584: PPUSH
63585: LD_VAR 0 8
63589: PPUSH
63590: LD_VAR 0 2
63594: PPUSH
63595: CALL 64854 0 2
63599: PPUSH
63600: CALL_OW 431
// end ;
63604: GO 63565
63606: POP
63607: POP
// end ; for i = 1 to personel do
63608: LD_ADDR_VAR 0 8
63612: PUSH
63613: DOUBLE
63614: LD_INT 1
63616: DEC
63617: ST_TO_ADDR
63618: LD_VAR 0 6
63622: PUSH
63623: FOR_TO
63624: IFFALSE 64688
// begin if i > 4 then
63626: LD_VAR 0 8
63630: PUSH
63631: LD_INT 4
63633: GREATER
63634: IFFALSE 63638
// break ;
63636: GO 64688
// case i of 1 :
63638: LD_VAR 0 8
63642: PUSH
63643: LD_INT 1
63645: DOUBLE
63646: EQUAL
63647: IFTRUE 63651
63649: GO 63731
63651: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
63652: LD_ADDR_VAR 0 12
63656: PUSH
63657: LD_VAR 0 18
63661: PPUSH
63662: LD_INT 22
63664: PUSH
63665: LD_VAR 0 16
63669: PUSH
63670: EMPTY
63671: LIST
63672: LIST
63673: PUSH
63674: LD_INT 58
63676: PUSH
63677: EMPTY
63678: LIST
63679: PUSH
63680: LD_INT 2
63682: PUSH
63683: LD_INT 30
63685: PUSH
63686: LD_INT 32
63688: PUSH
63689: EMPTY
63690: LIST
63691: LIST
63692: PUSH
63693: LD_INT 30
63695: PUSH
63696: LD_INT 4
63698: PUSH
63699: EMPTY
63700: LIST
63701: LIST
63702: PUSH
63703: LD_INT 30
63705: PUSH
63706: LD_INT 5
63708: PUSH
63709: EMPTY
63710: LIST
63711: LIST
63712: PUSH
63713: EMPTY
63714: LIST
63715: LIST
63716: LIST
63717: LIST
63718: PUSH
63719: EMPTY
63720: LIST
63721: LIST
63722: LIST
63723: PPUSH
63724: CALL_OW 72
63728: ST_TO_ADDR
63729: GO 63953
63731: LD_INT 2
63733: DOUBLE
63734: EQUAL
63735: IFTRUE 63739
63737: GO 63801
63739: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
63740: LD_ADDR_VAR 0 12
63744: PUSH
63745: LD_VAR 0 18
63749: PPUSH
63750: LD_INT 22
63752: PUSH
63753: LD_VAR 0 16
63757: PUSH
63758: EMPTY
63759: LIST
63760: LIST
63761: PUSH
63762: LD_INT 2
63764: PUSH
63765: LD_INT 30
63767: PUSH
63768: LD_INT 0
63770: PUSH
63771: EMPTY
63772: LIST
63773: LIST
63774: PUSH
63775: LD_INT 30
63777: PUSH
63778: LD_INT 1
63780: PUSH
63781: EMPTY
63782: LIST
63783: LIST
63784: PUSH
63785: EMPTY
63786: LIST
63787: LIST
63788: LIST
63789: PUSH
63790: EMPTY
63791: LIST
63792: LIST
63793: PPUSH
63794: CALL_OW 72
63798: ST_TO_ADDR
63799: GO 63953
63801: LD_INT 3
63803: DOUBLE
63804: EQUAL
63805: IFTRUE 63809
63807: GO 63871
63809: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
63810: LD_ADDR_VAR 0 12
63814: PUSH
63815: LD_VAR 0 18
63819: PPUSH
63820: LD_INT 22
63822: PUSH
63823: LD_VAR 0 16
63827: PUSH
63828: EMPTY
63829: LIST
63830: LIST
63831: PUSH
63832: LD_INT 2
63834: PUSH
63835: LD_INT 30
63837: PUSH
63838: LD_INT 2
63840: PUSH
63841: EMPTY
63842: LIST
63843: LIST
63844: PUSH
63845: LD_INT 30
63847: PUSH
63848: LD_INT 3
63850: PUSH
63851: EMPTY
63852: LIST
63853: LIST
63854: PUSH
63855: EMPTY
63856: LIST
63857: LIST
63858: LIST
63859: PUSH
63860: EMPTY
63861: LIST
63862: LIST
63863: PPUSH
63864: CALL_OW 72
63868: ST_TO_ADDR
63869: GO 63953
63871: LD_INT 4
63873: DOUBLE
63874: EQUAL
63875: IFTRUE 63879
63877: GO 63952
63879: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
63880: LD_ADDR_VAR 0 12
63884: PUSH
63885: LD_VAR 0 18
63889: PPUSH
63890: LD_INT 22
63892: PUSH
63893: LD_VAR 0 16
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PUSH
63902: LD_INT 2
63904: PUSH
63905: LD_INT 30
63907: PUSH
63908: LD_INT 6
63910: PUSH
63911: EMPTY
63912: LIST
63913: LIST
63914: PUSH
63915: LD_INT 30
63917: PUSH
63918: LD_INT 7
63920: PUSH
63921: EMPTY
63922: LIST
63923: LIST
63924: PUSH
63925: LD_INT 30
63927: PUSH
63928: LD_INT 8
63930: PUSH
63931: EMPTY
63932: LIST
63933: LIST
63934: PUSH
63935: EMPTY
63936: LIST
63937: LIST
63938: LIST
63939: LIST
63940: PUSH
63941: EMPTY
63942: LIST
63943: LIST
63944: PPUSH
63945: CALL_OW 72
63949: ST_TO_ADDR
63950: GO 63953
63952: POP
// if i = 1 then
63953: LD_VAR 0 8
63957: PUSH
63958: LD_INT 1
63960: EQUAL
63961: IFFALSE 64072
// begin tmp := [ ] ;
63963: LD_ADDR_VAR 0 19
63967: PUSH
63968: EMPTY
63969: ST_TO_ADDR
// for j in f do
63970: LD_ADDR_VAR 0 9
63974: PUSH
63975: LD_VAR 0 12
63979: PUSH
63980: FOR_IN
63981: IFFALSE 64054
// if GetBType ( j ) = b_bunker then
63983: LD_VAR 0 9
63987: PPUSH
63988: CALL_OW 266
63992: PUSH
63993: LD_INT 32
63995: EQUAL
63996: IFFALSE 64023
// tmp := Insert ( tmp , 1 , j ) else
63998: LD_ADDR_VAR 0 19
64002: PUSH
64003: LD_VAR 0 19
64007: PPUSH
64008: LD_INT 1
64010: PPUSH
64011: LD_VAR 0 9
64015: PPUSH
64016: CALL_OW 2
64020: ST_TO_ADDR
64021: GO 64052
// tmp := Insert ( tmp , tmp + 1 , j ) ;
64023: LD_ADDR_VAR 0 19
64027: PUSH
64028: LD_VAR 0 19
64032: PPUSH
64033: LD_VAR 0 19
64037: PUSH
64038: LD_INT 1
64040: PLUS
64041: PPUSH
64042: LD_VAR 0 9
64046: PPUSH
64047: CALL_OW 2
64051: ST_TO_ADDR
64052: GO 63980
64054: POP
64055: POP
// if tmp then
64056: LD_VAR 0 19
64060: IFFALSE 64072
// f := tmp ;
64062: LD_ADDR_VAR 0 12
64066: PUSH
64067: LD_VAR 0 19
64071: ST_TO_ADDR
// end ; x := personel [ i ] ;
64072: LD_ADDR_VAR 0 13
64076: PUSH
64077: LD_VAR 0 6
64081: PUSH
64082: LD_VAR 0 8
64086: ARRAY
64087: ST_TO_ADDR
// if x = - 1 then
64088: LD_VAR 0 13
64092: PUSH
64093: LD_INT 1
64095: NEG
64096: EQUAL
64097: IFFALSE 64306
// begin for j in f do
64099: LD_ADDR_VAR 0 9
64103: PUSH
64104: LD_VAR 0 12
64108: PUSH
64109: FOR_IN
64110: IFFALSE 64302
// repeat InitHc ;
64112: CALL_OW 19
// if GetBType ( j ) = b_barracks then
64116: LD_VAR 0 9
64120: PPUSH
64121: CALL_OW 266
64125: PUSH
64126: LD_INT 5
64128: EQUAL
64129: IFFALSE 64199
// begin if UnitsInside ( j ) < 3 then
64131: LD_VAR 0 9
64135: PPUSH
64136: CALL_OW 313
64140: PUSH
64141: LD_INT 3
64143: LESS
64144: IFFALSE 64180
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
64146: LD_INT 0
64148: PPUSH
64149: LD_INT 5
64151: PUSH
64152: LD_INT 8
64154: PUSH
64155: LD_INT 9
64157: PUSH
64158: EMPTY
64159: LIST
64160: LIST
64161: LIST
64162: PUSH
64163: LD_VAR 0 17
64167: ARRAY
64168: PPUSH
64169: LD_VAR 0 4
64173: PPUSH
64174: CALL_OW 380
64178: GO 64197
// PrepareHuman ( false , i , skill ) ;
64180: LD_INT 0
64182: PPUSH
64183: LD_VAR 0 8
64187: PPUSH
64188: LD_VAR 0 4
64192: PPUSH
64193: CALL_OW 380
// end else
64197: GO 64216
// PrepareHuman ( false , i , skill ) ;
64199: LD_INT 0
64201: PPUSH
64202: LD_VAR 0 8
64206: PPUSH
64207: LD_VAR 0 4
64211: PPUSH
64212: CALL_OW 380
// un := CreateHuman ;
64216: LD_ADDR_VAR 0 14
64220: PUSH
64221: CALL_OW 44
64225: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
64226: LD_ADDR_VAR 0 7
64230: PUSH
64231: LD_VAR 0 7
64235: PPUSH
64236: LD_INT 1
64238: PPUSH
64239: LD_VAR 0 14
64243: PPUSH
64244: CALL_OW 2
64248: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
64249: LD_VAR 0 14
64253: PPUSH
64254: LD_VAR 0 9
64258: PPUSH
64259: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
64263: LD_VAR 0 9
64267: PPUSH
64268: CALL_OW 313
64272: PUSH
64273: LD_INT 6
64275: EQUAL
64276: PUSH
64277: LD_VAR 0 9
64281: PPUSH
64282: CALL_OW 266
64286: PUSH
64287: LD_INT 32
64289: PUSH
64290: LD_INT 31
64292: PUSH
64293: EMPTY
64294: LIST
64295: LIST
64296: IN
64297: OR
64298: IFFALSE 64112
64300: GO 64109
64302: POP
64303: POP
// end else
64304: GO 64686
// for j = 1 to x do
64306: LD_ADDR_VAR 0 9
64310: PUSH
64311: DOUBLE
64312: LD_INT 1
64314: DEC
64315: ST_TO_ADDR
64316: LD_VAR 0 13
64320: PUSH
64321: FOR_TO
64322: IFFALSE 64684
// begin InitHc ;
64324: CALL_OW 19
// if not f then
64328: LD_VAR 0 12
64332: NOT
64333: IFFALSE 64422
// begin PrepareHuman ( false , i , skill ) ;
64335: LD_INT 0
64337: PPUSH
64338: LD_VAR 0 8
64342: PPUSH
64343: LD_VAR 0 4
64347: PPUSH
64348: CALL_OW 380
// un := CreateHuman ;
64352: LD_ADDR_VAR 0 14
64356: PUSH
64357: CALL_OW 44
64361: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
64362: LD_ADDR_VAR 0 7
64366: PUSH
64367: LD_VAR 0 7
64371: PPUSH
64372: LD_INT 1
64374: PPUSH
64375: LD_VAR 0 14
64379: PPUSH
64380: CALL_OW 2
64384: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
64385: LD_VAR 0 14
64389: PPUSH
64390: LD_VAR 0 1
64394: PPUSH
64395: CALL_OW 250
64399: PPUSH
64400: LD_VAR 0 1
64404: PPUSH
64405: CALL_OW 251
64409: PPUSH
64410: LD_INT 10
64412: PPUSH
64413: LD_INT 0
64415: PPUSH
64416: CALL_OW 50
// continue ;
64420: GO 64321
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
64422: LD_VAR 0 12
64426: PUSH
64427: LD_INT 1
64429: ARRAY
64430: PPUSH
64431: CALL_OW 313
64435: PUSH
64436: LD_VAR 0 12
64440: PUSH
64441: LD_INT 1
64443: ARRAY
64444: PPUSH
64445: CALL_OW 266
64449: PUSH
64450: LD_INT 32
64452: PUSH
64453: LD_INT 31
64455: PUSH
64456: EMPTY
64457: LIST
64458: LIST
64459: IN
64460: AND
64461: PUSH
64462: LD_VAR 0 12
64466: PUSH
64467: LD_INT 1
64469: ARRAY
64470: PPUSH
64471: CALL_OW 313
64475: PUSH
64476: LD_INT 6
64478: EQUAL
64479: OR
64480: IFFALSE 64500
// f := Delete ( f , 1 ) ;
64482: LD_ADDR_VAR 0 12
64486: PUSH
64487: LD_VAR 0 12
64491: PPUSH
64492: LD_INT 1
64494: PPUSH
64495: CALL_OW 3
64499: ST_TO_ADDR
// if not f then
64500: LD_VAR 0 12
64504: NOT
64505: IFFALSE 64523
// begin x := x + 2 ;
64507: LD_ADDR_VAR 0 13
64511: PUSH
64512: LD_VAR 0 13
64516: PUSH
64517: LD_INT 2
64519: PLUS
64520: ST_TO_ADDR
// continue ;
64521: GO 64321
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
64523: LD_VAR 0 12
64527: PUSH
64528: LD_INT 1
64530: ARRAY
64531: PPUSH
64532: CALL_OW 266
64536: PUSH
64537: LD_INT 5
64539: EQUAL
64540: IFFALSE 64614
// begin if UnitsInside ( f [ 1 ] ) < 3 then
64542: LD_VAR 0 12
64546: PUSH
64547: LD_INT 1
64549: ARRAY
64550: PPUSH
64551: CALL_OW 313
64555: PUSH
64556: LD_INT 3
64558: LESS
64559: IFFALSE 64595
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
64561: LD_INT 0
64563: PPUSH
64564: LD_INT 5
64566: PUSH
64567: LD_INT 8
64569: PUSH
64570: LD_INT 9
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: LIST
64577: PUSH
64578: LD_VAR 0 17
64582: ARRAY
64583: PPUSH
64584: LD_VAR 0 4
64588: PPUSH
64589: CALL_OW 380
64593: GO 64612
// PrepareHuman ( false , i , skill ) ;
64595: LD_INT 0
64597: PPUSH
64598: LD_VAR 0 8
64602: PPUSH
64603: LD_VAR 0 4
64607: PPUSH
64608: CALL_OW 380
// end else
64612: GO 64631
// PrepareHuman ( false , i , skill ) ;
64614: LD_INT 0
64616: PPUSH
64617: LD_VAR 0 8
64621: PPUSH
64622: LD_VAR 0 4
64626: PPUSH
64627: CALL_OW 380
// un := CreateHuman ;
64631: LD_ADDR_VAR 0 14
64635: PUSH
64636: CALL_OW 44
64640: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
64641: LD_ADDR_VAR 0 7
64645: PUSH
64646: LD_VAR 0 7
64650: PPUSH
64651: LD_INT 1
64653: PPUSH
64654: LD_VAR 0 14
64658: PPUSH
64659: CALL_OW 2
64663: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
64664: LD_VAR 0 14
64668: PPUSH
64669: LD_VAR 0 12
64673: PUSH
64674: LD_INT 1
64676: ARRAY
64677: PPUSH
64678: CALL_OW 52
// end ;
64682: GO 64321
64684: POP
64685: POP
// end ;
64686: GO 63623
64688: POP
64689: POP
// result := result ^ buildings ;
64690: LD_ADDR_VAR 0 7
64694: PUSH
64695: LD_VAR 0 7
64699: PUSH
64700: LD_VAR 0 18
64704: ADD
64705: ST_TO_ADDR
// end else
64706: GO 64849
// begin for i = 1 to personel do
64708: LD_ADDR_VAR 0 8
64712: PUSH
64713: DOUBLE
64714: LD_INT 1
64716: DEC
64717: ST_TO_ADDR
64718: LD_VAR 0 6
64722: PUSH
64723: FOR_TO
64724: IFFALSE 64847
// begin if i > 4 then
64726: LD_VAR 0 8
64730: PUSH
64731: LD_INT 4
64733: GREATER
64734: IFFALSE 64738
// break ;
64736: GO 64847
// x := personel [ i ] ;
64738: LD_ADDR_VAR 0 13
64742: PUSH
64743: LD_VAR 0 6
64747: PUSH
64748: LD_VAR 0 8
64752: ARRAY
64753: ST_TO_ADDR
// if x = - 1 then
64754: LD_VAR 0 13
64758: PUSH
64759: LD_INT 1
64761: NEG
64762: EQUAL
64763: IFFALSE 64767
// continue ;
64765: GO 64723
// PrepareHuman ( false , i , skill ) ;
64767: LD_INT 0
64769: PPUSH
64770: LD_VAR 0 8
64774: PPUSH
64775: LD_VAR 0 4
64779: PPUSH
64780: CALL_OW 380
// un := CreateHuman ;
64784: LD_ADDR_VAR 0 14
64788: PUSH
64789: CALL_OW 44
64793: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
64794: LD_VAR 0 14
64798: PPUSH
64799: LD_VAR 0 1
64803: PPUSH
64804: CALL_OW 250
64808: PPUSH
64809: LD_VAR 0 1
64813: PPUSH
64814: CALL_OW 251
64818: PPUSH
64819: LD_INT 10
64821: PPUSH
64822: LD_INT 0
64824: PPUSH
64825: CALL_OW 50
// result := result ^ un ;
64829: LD_ADDR_VAR 0 7
64833: PUSH
64834: LD_VAR 0 7
64838: PUSH
64839: LD_VAR 0 14
64843: ADD
64844: ST_TO_ADDR
// end ;
64845: GO 64723
64847: POP
64848: POP
// end ; end ;
64849: LD_VAR 0 7
64853: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
64854: LD_INT 0
64856: PPUSH
64857: PPUSH
64858: PPUSH
64859: PPUSH
64860: PPUSH
64861: PPUSH
64862: PPUSH
64863: PPUSH
64864: PPUSH
64865: PPUSH
64866: PPUSH
64867: PPUSH
64868: PPUSH
64869: PPUSH
64870: PPUSH
64871: PPUSH
// result := false ;
64872: LD_ADDR_VAR 0 3
64876: PUSH
64877: LD_INT 0
64879: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
64880: LD_VAR 0 1
64884: NOT
64885: PUSH
64886: LD_VAR 0 1
64890: PPUSH
64891: CALL_OW 266
64895: PUSH
64896: LD_INT 32
64898: PUSH
64899: LD_INT 33
64901: PUSH
64902: EMPTY
64903: LIST
64904: LIST
64905: IN
64906: NOT
64907: OR
64908: IFFALSE 64912
// exit ;
64910: GO 66021
// nat := GetNation ( tower ) ;
64912: LD_ADDR_VAR 0 12
64916: PUSH
64917: LD_VAR 0 1
64921: PPUSH
64922: CALL_OW 248
64926: ST_TO_ADDR
// side := GetSide ( tower ) ;
64927: LD_ADDR_VAR 0 16
64931: PUSH
64932: LD_VAR 0 1
64936: PPUSH
64937: CALL_OW 255
64941: ST_TO_ADDR
// x := GetX ( tower ) ;
64942: LD_ADDR_VAR 0 10
64946: PUSH
64947: LD_VAR 0 1
64951: PPUSH
64952: CALL_OW 250
64956: ST_TO_ADDR
// y := GetY ( tower ) ;
64957: LD_ADDR_VAR 0 11
64961: PUSH
64962: LD_VAR 0 1
64966: PPUSH
64967: CALL_OW 251
64971: ST_TO_ADDR
// if not x or not y then
64972: LD_VAR 0 10
64976: NOT
64977: PUSH
64978: LD_VAR 0 11
64982: NOT
64983: OR
64984: IFFALSE 64988
// exit ;
64986: GO 66021
// weapon := 0 ;
64988: LD_ADDR_VAR 0 18
64992: PUSH
64993: LD_INT 0
64995: ST_TO_ADDR
// fac_list := [ ] ;
64996: LD_ADDR_VAR 0 17
65000: PUSH
65001: EMPTY
65002: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
65003: LD_ADDR_VAR 0 6
65007: PUSH
65008: LD_VAR 0 1
65012: PPUSH
65013: CALL_OW 274
65017: PPUSH
65018: LD_VAR 0 2
65022: PPUSH
65023: LD_INT 0
65025: PPUSH
65026: CALL 62592 0 3
65030: PPUSH
65031: LD_INT 30
65033: PUSH
65034: LD_INT 3
65036: PUSH
65037: EMPTY
65038: LIST
65039: LIST
65040: PPUSH
65041: CALL_OW 72
65045: ST_TO_ADDR
// if not factories then
65046: LD_VAR 0 6
65050: NOT
65051: IFFALSE 65055
// exit ;
65053: GO 66021
// for i in factories do
65055: LD_ADDR_VAR 0 8
65059: PUSH
65060: LD_VAR 0 6
65064: PUSH
65065: FOR_IN
65066: IFFALSE 65091
// fac_list := fac_list union AvailableWeaponList ( i ) ;
65068: LD_ADDR_VAR 0 17
65072: PUSH
65073: LD_VAR 0 17
65077: PUSH
65078: LD_VAR 0 8
65082: PPUSH
65083: CALL_OW 478
65087: UNION
65088: ST_TO_ADDR
65089: GO 65065
65091: POP
65092: POP
// if not fac_list then
65093: LD_VAR 0 17
65097: NOT
65098: IFFALSE 65102
// exit ;
65100: GO 66021
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
65102: LD_ADDR_VAR 0 5
65106: PUSH
65107: LD_INT 4
65109: PUSH
65110: LD_INT 5
65112: PUSH
65113: LD_INT 9
65115: PUSH
65116: LD_INT 10
65118: PUSH
65119: LD_INT 6
65121: PUSH
65122: LD_INT 7
65124: PUSH
65125: LD_INT 11
65127: PUSH
65128: EMPTY
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 27
65139: PUSH
65140: LD_INT 28
65142: PUSH
65143: LD_INT 26
65145: PUSH
65146: LD_INT 30
65148: PUSH
65149: EMPTY
65150: LIST
65151: LIST
65152: LIST
65153: LIST
65154: PUSH
65155: LD_INT 43
65157: PUSH
65158: LD_INT 44
65160: PUSH
65161: LD_INT 46
65163: PUSH
65164: LD_INT 45
65166: PUSH
65167: LD_INT 47
65169: PUSH
65170: LD_INT 49
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: LIST
65179: LIST
65180: PUSH
65181: EMPTY
65182: LIST
65183: LIST
65184: LIST
65185: PUSH
65186: LD_VAR 0 12
65190: ARRAY
65191: ST_TO_ADDR
// list := list isect fac_list ;
65192: LD_ADDR_VAR 0 5
65196: PUSH
65197: LD_VAR 0 5
65201: PUSH
65202: LD_VAR 0 17
65206: ISECT
65207: ST_TO_ADDR
// if not list then
65208: LD_VAR 0 5
65212: NOT
65213: IFFALSE 65217
// exit ;
65215: GO 66021
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
65217: LD_VAR 0 12
65221: PUSH
65222: LD_INT 3
65224: EQUAL
65225: PUSH
65226: LD_INT 49
65228: PUSH
65229: LD_VAR 0 5
65233: IN
65234: AND
65235: PUSH
65236: LD_INT 31
65238: PPUSH
65239: LD_VAR 0 16
65243: PPUSH
65244: CALL_OW 321
65248: PUSH
65249: LD_INT 2
65251: EQUAL
65252: AND
65253: IFFALSE 65313
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
65255: LD_INT 22
65257: PUSH
65258: LD_VAR 0 16
65262: PUSH
65263: EMPTY
65264: LIST
65265: LIST
65266: PUSH
65267: LD_INT 35
65269: PUSH
65270: LD_INT 49
65272: PUSH
65273: EMPTY
65274: LIST
65275: LIST
65276: PUSH
65277: LD_INT 91
65279: PUSH
65280: LD_VAR 0 1
65284: PUSH
65285: LD_INT 10
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: LIST
65292: PUSH
65293: EMPTY
65294: LIST
65295: LIST
65296: LIST
65297: PPUSH
65298: CALL_OW 69
65302: NOT
65303: IFFALSE 65313
// weapon := ru_time_lapser ;
65305: LD_ADDR_VAR 0 18
65309: PUSH
65310: LD_INT 49
65312: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
65313: LD_VAR 0 12
65317: PUSH
65318: LD_INT 1
65320: PUSH
65321: LD_INT 2
65323: PUSH
65324: EMPTY
65325: LIST
65326: LIST
65327: IN
65328: PUSH
65329: LD_INT 11
65331: PUSH
65332: LD_VAR 0 5
65336: IN
65337: PUSH
65338: LD_INT 30
65340: PUSH
65341: LD_VAR 0 5
65345: IN
65346: OR
65347: AND
65348: PUSH
65349: LD_INT 6
65351: PPUSH
65352: LD_VAR 0 16
65356: PPUSH
65357: CALL_OW 321
65361: PUSH
65362: LD_INT 2
65364: EQUAL
65365: AND
65366: IFFALSE 65531
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
65368: LD_INT 22
65370: PUSH
65371: LD_VAR 0 16
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 2
65382: PUSH
65383: LD_INT 35
65385: PUSH
65386: LD_INT 11
65388: PUSH
65389: EMPTY
65390: LIST
65391: LIST
65392: PUSH
65393: LD_INT 35
65395: PUSH
65396: LD_INT 30
65398: PUSH
65399: EMPTY
65400: LIST
65401: LIST
65402: PUSH
65403: EMPTY
65404: LIST
65405: LIST
65406: LIST
65407: PUSH
65408: LD_INT 91
65410: PUSH
65411: LD_VAR 0 1
65415: PUSH
65416: LD_INT 18
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: LIST
65423: PUSH
65424: EMPTY
65425: LIST
65426: LIST
65427: LIST
65428: PPUSH
65429: CALL_OW 69
65433: NOT
65434: PUSH
65435: LD_INT 22
65437: PUSH
65438: LD_VAR 0 16
65442: PUSH
65443: EMPTY
65444: LIST
65445: LIST
65446: PUSH
65447: LD_INT 2
65449: PUSH
65450: LD_INT 30
65452: PUSH
65453: LD_INT 32
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: PUSH
65460: LD_INT 30
65462: PUSH
65463: LD_INT 33
65465: PUSH
65466: EMPTY
65467: LIST
65468: LIST
65469: PUSH
65470: EMPTY
65471: LIST
65472: LIST
65473: LIST
65474: PUSH
65475: LD_INT 91
65477: PUSH
65478: LD_VAR 0 1
65482: PUSH
65483: LD_INT 12
65485: PUSH
65486: EMPTY
65487: LIST
65488: LIST
65489: LIST
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: LIST
65495: PUSH
65496: EMPTY
65497: LIST
65498: PPUSH
65499: CALL_OW 69
65503: PUSH
65504: LD_INT 2
65506: GREATER
65507: AND
65508: IFFALSE 65531
// weapon := [ us_radar , ar_radar ] [ nat ] ;
65510: LD_ADDR_VAR 0 18
65514: PUSH
65515: LD_INT 11
65517: PUSH
65518: LD_INT 30
65520: PUSH
65521: EMPTY
65522: LIST
65523: LIST
65524: PUSH
65525: LD_VAR 0 12
65529: ARRAY
65530: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
65531: LD_VAR 0 18
65535: NOT
65536: PUSH
65537: LD_INT 40
65539: PPUSH
65540: LD_VAR 0 16
65544: PPUSH
65545: CALL_OW 321
65549: PUSH
65550: LD_INT 2
65552: EQUAL
65553: AND
65554: PUSH
65555: LD_INT 7
65557: PUSH
65558: LD_VAR 0 5
65562: IN
65563: PUSH
65564: LD_INT 28
65566: PUSH
65567: LD_VAR 0 5
65571: IN
65572: OR
65573: PUSH
65574: LD_INT 45
65576: PUSH
65577: LD_VAR 0 5
65581: IN
65582: OR
65583: AND
65584: IFFALSE 65838
// begin hex := GetHexInfo ( x , y ) ;
65586: LD_ADDR_VAR 0 4
65590: PUSH
65591: LD_VAR 0 10
65595: PPUSH
65596: LD_VAR 0 11
65600: PPUSH
65601: CALL_OW 546
65605: ST_TO_ADDR
// if hex [ 1 ] then
65606: LD_VAR 0 4
65610: PUSH
65611: LD_INT 1
65613: ARRAY
65614: IFFALSE 65618
// exit ;
65616: GO 66021
// height := hex [ 2 ] ;
65618: LD_ADDR_VAR 0 15
65622: PUSH
65623: LD_VAR 0 4
65627: PUSH
65628: LD_INT 2
65630: ARRAY
65631: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
65632: LD_ADDR_VAR 0 14
65636: PUSH
65637: LD_INT 0
65639: PUSH
65640: LD_INT 2
65642: PUSH
65643: LD_INT 3
65645: PUSH
65646: LD_INT 5
65648: PUSH
65649: EMPTY
65650: LIST
65651: LIST
65652: LIST
65653: LIST
65654: ST_TO_ADDR
// for i in tmp do
65655: LD_ADDR_VAR 0 8
65659: PUSH
65660: LD_VAR 0 14
65664: PUSH
65665: FOR_IN
65666: IFFALSE 65836
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
65668: LD_ADDR_VAR 0 9
65672: PUSH
65673: LD_VAR 0 10
65677: PPUSH
65678: LD_VAR 0 8
65682: PPUSH
65683: LD_INT 5
65685: PPUSH
65686: CALL_OW 272
65690: PUSH
65691: LD_VAR 0 11
65695: PPUSH
65696: LD_VAR 0 8
65700: PPUSH
65701: LD_INT 5
65703: PPUSH
65704: CALL_OW 273
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
65713: LD_VAR 0 9
65717: PUSH
65718: LD_INT 1
65720: ARRAY
65721: PPUSH
65722: LD_VAR 0 9
65726: PUSH
65727: LD_INT 2
65729: ARRAY
65730: PPUSH
65731: CALL_OW 488
65735: IFFALSE 65834
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
65737: LD_ADDR_VAR 0 4
65741: PUSH
65742: LD_VAR 0 9
65746: PUSH
65747: LD_INT 1
65749: ARRAY
65750: PPUSH
65751: LD_VAR 0 9
65755: PUSH
65756: LD_INT 2
65758: ARRAY
65759: PPUSH
65760: CALL_OW 546
65764: ST_TO_ADDR
// if hex [ 1 ] then
65765: LD_VAR 0 4
65769: PUSH
65770: LD_INT 1
65772: ARRAY
65773: IFFALSE 65777
// continue ;
65775: GO 65665
// h := hex [ 2 ] ;
65777: LD_ADDR_VAR 0 13
65781: PUSH
65782: LD_VAR 0 4
65786: PUSH
65787: LD_INT 2
65789: ARRAY
65790: ST_TO_ADDR
// if h + 7 < height then
65791: LD_VAR 0 13
65795: PUSH
65796: LD_INT 7
65798: PLUS
65799: PUSH
65800: LD_VAR 0 15
65804: LESS
65805: IFFALSE 65834
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
65807: LD_ADDR_VAR 0 18
65811: PUSH
65812: LD_INT 7
65814: PUSH
65815: LD_INT 28
65817: PUSH
65818: LD_INT 45
65820: PUSH
65821: EMPTY
65822: LIST
65823: LIST
65824: LIST
65825: PUSH
65826: LD_VAR 0 12
65830: ARRAY
65831: ST_TO_ADDR
// break ;
65832: GO 65836
// end ; end ; end ;
65834: GO 65665
65836: POP
65837: POP
// end ; if not weapon then
65838: LD_VAR 0 18
65842: NOT
65843: IFFALSE 65903
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
65845: LD_ADDR_VAR 0 5
65849: PUSH
65850: LD_VAR 0 5
65854: PUSH
65855: LD_INT 11
65857: PUSH
65858: LD_INT 30
65860: PUSH
65861: LD_INT 49
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: LIST
65868: DIFF
65869: ST_TO_ADDR
// if not list then
65870: LD_VAR 0 5
65874: NOT
65875: IFFALSE 65879
// exit ;
65877: GO 66021
// weapon := list [ rand ( 1 , list ) ] ;
65879: LD_ADDR_VAR 0 18
65883: PUSH
65884: LD_VAR 0 5
65888: PUSH
65889: LD_INT 1
65891: PPUSH
65892: LD_VAR 0 5
65896: PPUSH
65897: CALL_OW 12
65901: ARRAY
65902: ST_TO_ADDR
// end ; if weapon then
65903: LD_VAR 0 18
65907: IFFALSE 66021
// begin tmp := CostOfWeapon ( weapon ) ;
65909: LD_ADDR_VAR 0 14
65913: PUSH
65914: LD_VAR 0 18
65918: PPUSH
65919: CALL_OW 451
65923: ST_TO_ADDR
// j := GetBase ( tower ) ;
65924: LD_ADDR_VAR 0 9
65928: PUSH
65929: LD_VAR 0 1
65933: PPUSH
65934: CALL_OW 274
65938: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
65939: LD_VAR 0 9
65943: PPUSH
65944: LD_INT 1
65946: PPUSH
65947: CALL_OW 275
65951: PUSH
65952: LD_VAR 0 14
65956: PUSH
65957: LD_INT 1
65959: ARRAY
65960: GREATEREQUAL
65961: PUSH
65962: LD_VAR 0 9
65966: PPUSH
65967: LD_INT 2
65969: PPUSH
65970: CALL_OW 275
65974: PUSH
65975: LD_VAR 0 14
65979: PUSH
65980: LD_INT 2
65982: ARRAY
65983: GREATEREQUAL
65984: AND
65985: PUSH
65986: LD_VAR 0 9
65990: PPUSH
65991: LD_INT 3
65993: PPUSH
65994: CALL_OW 275
65998: PUSH
65999: LD_VAR 0 14
66003: PUSH
66004: LD_INT 3
66006: ARRAY
66007: GREATEREQUAL
66008: AND
66009: IFFALSE 66021
// result := weapon ;
66011: LD_ADDR_VAR 0 3
66015: PUSH
66016: LD_VAR 0 18
66020: ST_TO_ADDR
// end ; end ;
66021: LD_VAR 0 3
66025: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
66026: LD_INT 0
66028: PPUSH
66029: PPUSH
// result := true ;
66030: LD_ADDR_VAR 0 3
66034: PUSH
66035: LD_INT 1
66037: ST_TO_ADDR
// if array1 = array2 then
66038: LD_VAR 0 1
66042: PUSH
66043: LD_VAR 0 2
66047: EQUAL
66048: IFFALSE 66108
// begin for i = 1 to array1 do
66050: LD_ADDR_VAR 0 4
66054: PUSH
66055: DOUBLE
66056: LD_INT 1
66058: DEC
66059: ST_TO_ADDR
66060: LD_VAR 0 1
66064: PUSH
66065: FOR_TO
66066: IFFALSE 66104
// if array1 [ i ] <> array2 [ i ] then
66068: LD_VAR 0 1
66072: PUSH
66073: LD_VAR 0 4
66077: ARRAY
66078: PUSH
66079: LD_VAR 0 2
66083: PUSH
66084: LD_VAR 0 4
66088: ARRAY
66089: NONEQUAL
66090: IFFALSE 66102
// begin result := false ;
66092: LD_ADDR_VAR 0 3
66096: PUSH
66097: LD_INT 0
66099: ST_TO_ADDR
// break ;
66100: GO 66104
// end ;
66102: GO 66065
66104: POP
66105: POP
// end else
66106: GO 66116
// result := false ;
66108: LD_ADDR_VAR 0 3
66112: PUSH
66113: LD_INT 0
66115: ST_TO_ADDR
// end ;
66116: LD_VAR 0 3
66120: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
66121: LD_INT 0
66123: PPUSH
66124: PPUSH
// if not array1 or not array2 then
66125: LD_VAR 0 1
66129: NOT
66130: PUSH
66131: LD_VAR 0 2
66135: NOT
66136: OR
66137: IFFALSE 66141
// exit ;
66139: GO 66205
// result := true ;
66141: LD_ADDR_VAR 0 3
66145: PUSH
66146: LD_INT 1
66148: ST_TO_ADDR
// for i = 1 to array1 do
66149: LD_ADDR_VAR 0 4
66153: PUSH
66154: DOUBLE
66155: LD_INT 1
66157: DEC
66158: ST_TO_ADDR
66159: LD_VAR 0 1
66163: PUSH
66164: FOR_TO
66165: IFFALSE 66203
// if array1 [ i ] <> array2 [ i ] then
66167: LD_VAR 0 1
66171: PUSH
66172: LD_VAR 0 4
66176: ARRAY
66177: PUSH
66178: LD_VAR 0 2
66182: PUSH
66183: LD_VAR 0 4
66187: ARRAY
66188: NONEQUAL
66189: IFFALSE 66201
// begin result := false ;
66191: LD_ADDR_VAR 0 3
66195: PUSH
66196: LD_INT 0
66198: ST_TO_ADDR
// break ;
66199: GO 66203
// end ;
66201: GO 66164
66203: POP
66204: POP
// end ;
66205: LD_VAR 0 3
66209: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
66210: LD_INT 0
66212: PPUSH
66213: PPUSH
66214: PPUSH
// pom := GetBase ( fac ) ;
66215: LD_ADDR_VAR 0 5
66219: PUSH
66220: LD_VAR 0 1
66224: PPUSH
66225: CALL_OW 274
66229: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
66230: LD_ADDR_VAR 0 4
66234: PUSH
66235: LD_VAR 0 2
66239: PUSH
66240: LD_INT 1
66242: ARRAY
66243: PPUSH
66244: LD_VAR 0 2
66248: PUSH
66249: LD_INT 2
66251: ARRAY
66252: PPUSH
66253: LD_VAR 0 2
66257: PUSH
66258: LD_INT 3
66260: ARRAY
66261: PPUSH
66262: LD_VAR 0 2
66266: PUSH
66267: LD_INT 4
66269: ARRAY
66270: PPUSH
66271: CALL_OW 449
66275: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
66276: LD_ADDR_VAR 0 3
66280: PUSH
66281: LD_VAR 0 5
66285: PPUSH
66286: LD_INT 1
66288: PPUSH
66289: CALL_OW 275
66293: PUSH
66294: LD_VAR 0 4
66298: PUSH
66299: LD_INT 1
66301: ARRAY
66302: GREATEREQUAL
66303: PUSH
66304: LD_VAR 0 5
66308: PPUSH
66309: LD_INT 2
66311: PPUSH
66312: CALL_OW 275
66316: PUSH
66317: LD_VAR 0 4
66321: PUSH
66322: LD_INT 2
66324: ARRAY
66325: GREATEREQUAL
66326: AND
66327: PUSH
66328: LD_VAR 0 5
66332: PPUSH
66333: LD_INT 3
66335: PPUSH
66336: CALL_OW 275
66340: PUSH
66341: LD_VAR 0 4
66345: PUSH
66346: LD_INT 3
66348: ARRAY
66349: GREATEREQUAL
66350: AND
66351: ST_TO_ADDR
// end ;
66352: LD_VAR 0 3
66356: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
66357: LD_INT 0
66359: PPUSH
66360: PPUSH
66361: PPUSH
66362: PPUSH
// pom := GetBase ( building ) ;
66363: LD_ADDR_VAR 0 3
66367: PUSH
66368: LD_VAR 0 1
66372: PPUSH
66373: CALL_OW 274
66377: ST_TO_ADDR
// if not pom then
66378: LD_VAR 0 3
66382: NOT
66383: IFFALSE 66387
// exit ;
66385: GO 66557
// btype := GetBType ( building ) ;
66387: LD_ADDR_VAR 0 5
66391: PUSH
66392: LD_VAR 0 1
66396: PPUSH
66397: CALL_OW 266
66401: ST_TO_ADDR
// if btype = b_armoury then
66402: LD_VAR 0 5
66406: PUSH
66407: LD_INT 4
66409: EQUAL
66410: IFFALSE 66420
// btype := b_barracks ;
66412: LD_ADDR_VAR 0 5
66416: PUSH
66417: LD_INT 5
66419: ST_TO_ADDR
// if btype = b_depot then
66420: LD_VAR 0 5
66424: PUSH
66425: LD_INT 0
66427: EQUAL
66428: IFFALSE 66438
// btype := b_warehouse ;
66430: LD_ADDR_VAR 0 5
66434: PUSH
66435: LD_INT 1
66437: ST_TO_ADDR
// if btype = b_workshop then
66438: LD_VAR 0 5
66442: PUSH
66443: LD_INT 2
66445: EQUAL
66446: IFFALSE 66456
// btype := b_factory ;
66448: LD_ADDR_VAR 0 5
66452: PUSH
66453: LD_INT 3
66455: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
66456: LD_ADDR_VAR 0 4
66460: PUSH
66461: LD_VAR 0 5
66465: PPUSH
66466: LD_VAR 0 1
66470: PPUSH
66471: CALL_OW 248
66475: PPUSH
66476: CALL_OW 450
66480: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
66481: LD_ADDR_VAR 0 2
66485: PUSH
66486: LD_VAR 0 3
66490: PPUSH
66491: LD_INT 1
66493: PPUSH
66494: CALL_OW 275
66498: PUSH
66499: LD_VAR 0 4
66503: PUSH
66504: LD_INT 1
66506: ARRAY
66507: GREATEREQUAL
66508: PUSH
66509: LD_VAR 0 3
66513: PPUSH
66514: LD_INT 2
66516: PPUSH
66517: CALL_OW 275
66521: PUSH
66522: LD_VAR 0 4
66526: PUSH
66527: LD_INT 2
66529: ARRAY
66530: GREATEREQUAL
66531: AND
66532: PUSH
66533: LD_VAR 0 3
66537: PPUSH
66538: LD_INT 3
66540: PPUSH
66541: CALL_OW 275
66545: PUSH
66546: LD_VAR 0 4
66550: PUSH
66551: LD_INT 3
66553: ARRAY
66554: GREATEREQUAL
66555: AND
66556: ST_TO_ADDR
// end ;
66557: LD_VAR 0 2
66561: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
66562: LD_INT 0
66564: PPUSH
66565: PPUSH
66566: PPUSH
// pom := GetBase ( building ) ;
66567: LD_ADDR_VAR 0 4
66571: PUSH
66572: LD_VAR 0 1
66576: PPUSH
66577: CALL_OW 274
66581: ST_TO_ADDR
// if not pom then
66582: LD_VAR 0 4
66586: NOT
66587: IFFALSE 66591
// exit ;
66589: GO 66692
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
66591: LD_ADDR_VAR 0 5
66595: PUSH
66596: LD_VAR 0 2
66600: PPUSH
66601: LD_VAR 0 1
66605: PPUSH
66606: CALL_OW 248
66610: PPUSH
66611: CALL_OW 450
66615: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
66616: LD_ADDR_VAR 0 3
66620: PUSH
66621: LD_VAR 0 4
66625: PPUSH
66626: LD_INT 1
66628: PPUSH
66629: CALL_OW 275
66633: PUSH
66634: LD_VAR 0 5
66638: PUSH
66639: LD_INT 1
66641: ARRAY
66642: GREATEREQUAL
66643: PUSH
66644: LD_VAR 0 4
66648: PPUSH
66649: LD_INT 2
66651: PPUSH
66652: CALL_OW 275
66656: PUSH
66657: LD_VAR 0 5
66661: PUSH
66662: LD_INT 2
66664: ARRAY
66665: GREATEREQUAL
66666: AND
66667: PUSH
66668: LD_VAR 0 4
66672: PPUSH
66673: LD_INT 3
66675: PPUSH
66676: CALL_OW 275
66680: PUSH
66681: LD_VAR 0 5
66685: PUSH
66686: LD_INT 3
66688: ARRAY
66689: GREATEREQUAL
66690: AND
66691: ST_TO_ADDR
// end ;
66692: LD_VAR 0 3
66696: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
66697: LD_INT 0
66699: PPUSH
66700: PPUSH
66701: PPUSH
66702: PPUSH
66703: PPUSH
66704: PPUSH
66705: PPUSH
66706: PPUSH
66707: PPUSH
66708: PPUSH
66709: PPUSH
// result := false ;
66710: LD_ADDR_VAR 0 8
66714: PUSH
66715: LD_INT 0
66717: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
66718: LD_VAR 0 5
66722: NOT
66723: PUSH
66724: LD_VAR 0 1
66728: NOT
66729: OR
66730: PUSH
66731: LD_VAR 0 2
66735: NOT
66736: OR
66737: PUSH
66738: LD_VAR 0 3
66742: NOT
66743: OR
66744: IFFALSE 66748
// exit ;
66746: GO 67562
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
66748: LD_ADDR_VAR 0 14
66752: PUSH
66753: LD_VAR 0 1
66757: PPUSH
66758: LD_VAR 0 2
66762: PPUSH
66763: LD_VAR 0 3
66767: PPUSH
66768: LD_VAR 0 4
66772: PPUSH
66773: LD_VAR 0 5
66777: PUSH
66778: LD_INT 1
66780: ARRAY
66781: PPUSH
66782: CALL_OW 248
66786: PPUSH
66787: LD_INT 0
66789: PPUSH
66790: CALL 68815 0 6
66794: ST_TO_ADDR
// if not hexes then
66795: LD_VAR 0 14
66799: NOT
66800: IFFALSE 66804
// exit ;
66802: GO 67562
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66804: LD_ADDR_VAR 0 17
66808: PUSH
66809: LD_VAR 0 5
66813: PPUSH
66814: LD_INT 22
66816: PUSH
66817: LD_VAR 0 13
66821: PPUSH
66822: CALL_OW 255
66826: PUSH
66827: EMPTY
66828: LIST
66829: LIST
66830: PUSH
66831: LD_INT 2
66833: PUSH
66834: LD_INT 30
66836: PUSH
66837: LD_INT 0
66839: PUSH
66840: EMPTY
66841: LIST
66842: LIST
66843: PUSH
66844: LD_INT 30
66846: PUSH
66847: LD_INT 1
66849: PUSH
66850: EMPTY
66851: LIST
66852: LIST
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: LIST
66858: PUSH
66859: EMPTY
66860: LIST
66861: LIST
66862: PPUSH
66863: CALL_OW 72
66867: ST_TO_ADDR
// for i = 1 to hexes do
66868: LD_ADDR_VAR 0 9
66872: PUSH
66873: DOUBLE
66874: LD_INT 1
66876: DEC
66877: ST_TO_ADDR
66878: LD_VAR 0 14
66882: PUSH
66883: FOR_TO
66884: IFFALSE 67560
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66886: LD_ADDR_VAR 0 13
66890: PUSH
66891: LD_VAR 0 14
66895: PUSH
66896: LD_VAR 0 9
66900: ARRAY
66901: PUSH
66902: LD_INT 1
66904: ARRAY
66905: PPUSH
66906: LD_VAR 0 14
66910: PUSH
66911: LD_VAR 0 9
66915: ARRAY
66916: PUSH
66917: LD_INT 2
66919: ARRAY
66920: PPUSH
66921: CALL_OW 428
66925: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
66926: LD_VAR 0 14
66930: PUSH
66931: LD_VAR 0 9
66935: ARRAY
66936: PUSH
66937: LD_INT 1
66939: ARRAY
66940: PPUSH
66941: LD_VAR 0 14
66945: PUSH
66946: LD_VAR 0 9
66950: ARRAY
66951: PUSH
66952: LD_INT 2
66954: ARRAY
66955: PPUSH
66956: CALL_OW 351
66960: PUSH
66961: LD_VAR 0 14
66965: PUSH
66966: LD_VAR 0 9
66970: ARRAY
66971: PUSH
66972: LD_INT 1
66974: ARRAY
66975: PPUSH
66976: LD_VAR 0 14
66980: PUSH
66981: LD_VAR 0 9
66985: ARRAY
66986: PUSH
66987: LD_INT 2
66989: ARRAY
66990: PPUSH
66991: CALL_OW 488
66995: NOT
66996: OR
66997: PUSH
66998: LD_VAR 0 13
67002: PPUSH
67003: CALL_OW 247
67007: PUSH
67008: LD_INT 3
67010: EQUAL
67011: OR
67012: IFFALSE 67018
// exit ;
67014: POP
67015: POP
67016: GO 67562
// if not tmp then
67018: LD_VAR 0 13
67022: NOT
67023: IFFALSE 67027
// continue ;
67025: GO 66883
// result := true ;
67027: LD_ADDR_VAR 0 8
67031: PUSH
67032: LD_INT 1
67034: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
67035: LD_VAR 0 6
67039: PUSH
67040: LD_VAR 0 13
67044: PPUSH
67045: CALL_OW 247
67049: PUSH
67050: LD_INT 2
67052: EQUAL
67053: AND
67054: PUSH
67055: LD_VAR 0 13
67059: PPUSH
67060: CALL_OW 263
67064: PUSH
67065: LD_INT 1
67067: EQUAL
67068: AND
67069: IFFALSE 67233
// begin if IsDrivenBy ( tmp ) then
67071: LD_VAR 0 13
67075: PPUSH
67076: CALL_OW 311
67080: IFFALSE 67084
// continue ;
67082: GO 66883
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
67084: LD_VAR 0 6
67088: PPUSH
67089: LD_INT 3
67091: PUSH
67092: LD_INT 60
67094: PUSH
67095: EMPTY
67096: LIST
67097: PUSH
67098: EMPTY
67099: LIST
67100: LIST
67101: PUSH
67102: LD_INT 3
67104: PUSH
67105: LD_INT 55
67107: PUSH
67108: EMPTY
67109: LIST
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: EMPTY
67116: LIST
67117: LIST
67118: PPUSH
67119: CALL_OW 72
67123: IFFALSE 67231
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
67125: LD_ADDR_VAR 0 18
67129: PUSH
67130: LD_VAR 0 6
67134: PPUSH
67135: LD_INT 3
67137: PUSH
67138: LD_INT 60
67140: PUSH
67141: EMPTY
67142: LIST
67143: PUSH
67144: EMPTY
67145: LIST
67146: LIST
67147: PUSH
67148: LD_INT 3
67150: PUSH
67151: LD_INT 55
67153: PUSH
67154: EMPTY
67155: LIST
67156: PUSH
67157: EMPTY
67158: LIST
67159: LIST
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PPUSH
67165: CALL_OW 72
67169: PUSH
67170: LD_INT 1
67172: ARRAY
67173: ST_TO_ADDR
// if IsInUnit ( driver ) then
67174: LD_VAR 0 18
67178: PPUSH
67179: CALL_OW 310
67183: IFFALSE 67194
// ComExit ( driver ) ;
67185: LD_VAR 0 18
67189: PPUSH
67190: CALL 92607 0 1
// AddComEnterUnit ( driver , tmp ) ;
67194: LD_VAR 0 18
67198: PPUSH
67199: LD_VAR 0 13
67203: PPUSH
67204: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
67208: LD_VAR 0 18
67212: PPUSH
67213: LD_VAR 0 7
67217: PPUSH
67218: CALL_OW 173
// AddComExitVehicle ( driver ) ;
67222: LD_VAR 0 18
67226: PPUSH
67227: CALL_OW 181
// end ; continue ;
67231: GO 66883
// end ; if not cleaners or not tmp in cleaners then
67233: LD_VAR 0 6
67237: NOT
67238: PUSH
67239: LD_VAR 0 13
67243: PUSH
67244: LD_VAR 0 6
67248: IN
67249: NOT
67250: OR
67251: IFFALSE 67558
// begin if dep then
67253: LD_VAR 0 17
67257: IFFALSE 67393
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
67259: LD_ADDR_VAR 0 16
67263: PUSH
67264: LD_VAR 0 17
67268: PUSH
67269: LD_INT 1
67271: ARRAY
67272: PPUSH
67273: CALL_OW 250
67277: PPUSH
67278: LD_VAR 0 17
67282: PUSH
67283: LD_INT 1
67285: ARRAY
67286: PPUSH
67287: CALL_OW 254
67291: PPUSH
67292: LD_INT 5
67294: PPUSH
67295: CALL_OW 272
67299: PUSH
67300: LD_VAR 0 17
67304: PUSH
67305: LD_INT 1
67307: ARRAY
67308: PPUSH
67309: CALL_OW 251
67313: PPUSH
67314: LD_VAR 0 17
67318: PUSH
67319: LD_INT 1
67321: ARRAY
67322: PPUSH
67323: CALL_OW 254
67327: PPUSH
67328: LD_INT 5
67330: PPUSH
67331: CALL_OW 273
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
67340: LD_VAR 0 16
67344: PUSH
67345: LD_INT 1
67347: ARRAY
67348: PPUSH
67349: LD_VAR 0 16
67353: PUSH
67354: LD_INT 2
67356: ARRAY
67357: PPUSH
67358: CALL_OW 488
67362: IFFALSE 67393
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
67364: LD_VAR 0 13
67368: PPUSH
67369: LD_VAR 0 16
67373: PUSH
67374: LD_INT 1
67376: ARRAY
67377: PPUSH
67378: LD_VAR 0 16
67382: PUSH
67383: LD_INT 2
67385: ARRAY
67386: PPUSH
67387: CALL_OW 111
// continue ;
67391: GO 66883
// end ; end ; r := GetDir ( tmp ) ;
67393: LD_ADDR_VAR 0 15
67397: PUSH
67398: LD_VAR 0 13
67402: PPUSH
67403: CALL_OW 254
67407: ST_TO_ADDR
// if r = 5 then
67408: LD_VAR 0 15
67412: PUSH
67413: LD_INT 5
67415: EQUAL
67416: IFFALSE 67426
// r := 0 ;
67418: LD_ADDR_VAR 0 15
67422: PUSH
67423: LD_INT 0
67425: ST_TO_ADDR
// for j = r to 5 do
67426: LD_ADDR_VAR 0 10
67430: PUSH
67431: DOUBLE
67432: LD_VAR 0 15
67436: DEC
67437: ST_TO_ADDR
67438: LD_INT 5
67440: PUSH
67441: FOR_TO
67442: IFFALSE 67556
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
67444: LD_ADDR_VAR 0 11
67448: PUSH
67449: LD_VAR 0 13
67453: PPUSH
67454: CALL_OW 250
67458: PPUSH
67459: LD_VAR 0 10
67463: PPUSH
67464: LD_INT 2
67466: PPUSH
67467: CALL_OW 272
67471: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
67472: LD_ADDR_VAR 0 12
67476: PUSH
67477: LD_VAR 0 13
67481: PPUSH
67482: CALL_OW 251
67486: PPUSH
67487: LD_VAR 0 10
67491: PPUSH
67492: LD_INT 2
67494: PPUSH
67495: CALL_OW 273
67499: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
67500: LD_VAR 0 11
67504: PPUSH
67505: LD_VAR 0 12
67509: PPUSH
67510: CALL_OW 488
67514: PUSH
67515: LD_VAR 0 11
67519: PPUSH
67520: LD_VAR 0 12
67524: PPUSH
67525: CALL_OW 428
67529: NOT
67530: AND
67531: IFFALSE 67554
// begin ComMoveXY ( tmp , _x , _y ) ;
67533: LD_VAR 0 13
67537: PPUSH
67538: LD_VAR 0 11
67542: PPUSH
67543: LD_VAR 0 12
67547: PPUSH
67548: CALL_OW 111
// break ;
67552: GO 67556
// end ; end ;
67554: GO 67441
67556: POP
67557: POP
// end ; end ;
67558: GO 66883
67560: POP
67561: POP
// end ;
67562: LD_VAR 0 8
67566: RET
// export function BuildingTechInvented ( side , btype ) ; begin
67567: LD_INT 0
67569: PPUSH
// result := true ;
67570: LD_ADDR_VAR 0 3
67574: PUSH
67575: LD_INT 1
67577: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
67578: LD_VAR 0 2
67582: PUSH
67583: LD_INT 24
67585: DOUBLE
67586: EQUAL
67587: IFTRUE 67597
67589: LD_INT 33
67591: DOUBLE
67592: EQUAL
67593: IFTRUE 67597
67595: GO 67622
67597: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
67598: LD_ADDR_VAR 0 3
67602: PUSH
67603: LD_INT 32
67605: PPUSH
67606: LD_VAR 0 1
67610: PPUSH
67611: CALL_OW 321
67615: PUSH
67616: LD_INT 2
67618: EQUAL
67619: ST_TO_ADDR
67620: GO 67938
67622: LD_INT 20
67624: DOUBLE
67625: EQUAL
67626: IFTRUE 67630
67628: GO 67655
67630: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
67631: LD_ADDR_VAR 0 3
67635: PUSH
67636: LD_INT 6
67638: PPUSH
67639: LD_VAR 0 1
67643: PPUSH
67644: CALL_OW 321
67648: PUSH
67649: LD_INT 2
67651: EQUAL
67652: ST_TO_ADDR
67653: GO 67938
67655: LD_INT 22
67657: DOUBLE
67658: EQUAL
67659: IFTRUE 67669
67661: LD_INT 36
67663: DOUBLE
67664: EQUAL
67665: IFTRUE 67669
67667: GO 67694
67669: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
67670: LD_ADDR_VAR 0 3
67674: PUSH
67675: LD_INT 15
67677: PPUSH
67678: LD_VAR 0 1
67682: PPUSH
67683: CALL_OW 321
67687: PUSH
67688: LD_INT 2
67690: EQUAL
67691: ST_TO_ADDR
67692: GO 67938
67694: LD_INT 30
67696: DOUBLE
67697: EQUAL
67698: IFTRUE 67702
67700: GO 67727
67702: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
67703: LD_ADDR_VAR 0 3
67707: PUSH
67708: LD_INT 20
67710: PPUSH
67711: LD_VAR 0 1
67715: PPUSH
67716: CALL_OW 321
67720: PUSH
67721: LD_INT 2
67723: EQUAL
67724: ST_TO_ADDR
67725: GO 67938
67727: LD_INT 28
67729: DOUBLE
67730: EQUAL
67731: IFTRUE 67741
67733: LD_INT 21
67735: DOUBLE
67736: EQUAL
67737: IFTRUE 67741
67739: GO 67766
67741: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
67742: LD_ADDR_VAR 0 3
67746: PUSH
67747: LD_INT 21
67749: PPUSH
67750: LD_VAR 0 1
67754: PPUSH
67755: CALL_OW 321
67759: PUSH
67760: LD_INT 2
67762: EQUAL
67763: ST_TO_ADDR
67764: GO 67938
67766: LD_INT 16
67768: DOUBLE
67769: EQUAL
67770: IFTRUE 67774
67772: GO 67799
67774: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
67775: LD_ADDR_VAR 0 3
67779: PUSH
67780: LD_INT 84
67782: PPUSH
67783: LD_VAR 0 1
67787: PPUSH
67788: CALL_OW 321
67792: PUSH
67793: LD_INT 2
67795: EQUAL
67796: ST_TO_ADDR
67797: GO 67938
67799: LD_INT 19
67801: DOUBLE
67802: EQUAL
67803: IFTRUE 67813
67805: LD_INT 23
67807: DOUBLE
67808: EQUAL
67809: IFTRUE 67813
67811: GO 67838
67813: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
67814: LD_ADDR_VAR 0 3
67818: PUSH
67819: LD_INT 83
67821: PPUSH
67822: LD_VAR 0 1
67826: PPUSH
67827: CALL_OW 321
67831: PUSH
67832: LD_INT 2
67834: EQUAL
67835: ST_TO_ADDR
67836: GO 67938
67838: LD_INT 17
67840: DOUBLE
67841: EQUAL
67842: IFTRUE 67846
67844: GO 67871
67846: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
67847: LD_ADDR_VAR 0 3
67851: PUSH
67852: LD_INT 39
67854: PPUSH
67855: LD_VAR 0 1
67859: PPUSH
67860: CALL_OW 321
67864: PUSH
67865: LD_INT 2
67867: EQUAL
67868: ST_TO_ADDR
67869: GO 67938
67871: LD_INT 18
67873: DOUBLE
67874: EQUAL
67875: IFTRUE 67879
67877: GO 67904
67879: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
67880: LD_ADDR_VAR 0 3
67884: PUSH
67885: LD_INT 40
67887: PPUSH
67888: LD_VAR 0 1
67892: PPUSH
67893: CALL_OW 321
67897: PUSH
67898: LD_INT 2
67900: EQUAL
67901: ST_TO_ADDR
67902: GO 67938
67904: LD_INT 27
67906: DOUBLE
67907: EQUAL
67908: IFTRUE 67912
67910: GO 67937
67912: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
67913: LD_ADDR_VAR 0 3
67917: PUSH
67918: LD_INT 35
67920: PPUSH
67921: LD_VAR 0 1
67925: PPUSH
67926: CALL_OW 321
67930: PUSH
67931: LD_INT 2
67933: EQUAL
67934: ST_TO_ADDR
67935: GO 67938
67937: POP
// end ;
67938: LD_VAR 0 3
67942: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
67943: LD_INT 0
67945: PPUSH
67946: PPUSH
67947: PPUSH
67948: PPUSH
67949: PPUSH
67950: PPUSH
67951: PPUSH
67952: PPUSH
67953: PPUSH
67954: PPUSH
67955: PPUSH
// result := false ;
67956: LD_ADDR_VAR 0 6
67960: PUSH
67961: LD_INT 0
67963: ST_TO_ADDR
// if btype = b_depot then
67964: LD_VAR 0 2
67968: PUSH
67969: LD_INT 0
67971: EQUAL
67972: IFFALSE 67984
// begin result := true ;
67974: LD_ADDR_VAR 0 6
67978: PUSH
67979: LD_INT 1
67981: ST_TO_ADDR
// exit ;
67982: GO 68810
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
67984: LD_VAR 0 1
67988: NOT
67989: PUSH
67990: LD_VAR 0 1
67994: PPUSH
67995: CALL_OW 266
67999: PUSH
68000: LD_INT 0
68002: PUSH
68003: LD_INT 1
68005: PUSH
68006: EMPTY
68007: LIST
68008: LIST
68009: IN
68010: NOT
68011: OR
68012: PUSH
68013: LD_VAR 0 2
68017: NOT
68018: OR
68019: PUSH
68020: LD_VAR 0 5
68024: PUSH
68025: LD_INT 0
68027: PUSH
68028: LD_INT 1
68030: PUSH
68031: LD_INT 2
68033: PUSH
68034: LD_INT 3
68036: PUSH
68037: LD_INT 4
68039: PUSH
68040: LD_INT 5
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: LIST
68047: LIST
68048: LIST
68049: LIST
68050: IN
68051: NOT
68052: OR
68053: PUSH
68054: LD_VAR 0 3
68058: PPUSH
68059: LD_VAR 0 4
68063: PPUSH
68064: CALL_OW 488
68068: NOT
68069: OR
68070: IFFALSE 68074
// exit ;
68072: GO 68810
// side := GetSide ( depot ) ;
68074: LD_ADDR_VAR 0 9
68078: PUSH
68079: LD_VAR 0 1
68083: PPUSH
68084: CALL_OW 255
68088: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
68089: LD_VAR 0 9
68093: PPUSH
68094: LD_VAR 0 2
68098: PPUSH
68099: CALL 67567 0 2
68103: NOT
68104: IFFALSE 68108
// exit ;
68106: GO 68810
// pom := GetBase ( depot ) ;
68108: LD_ADDR_VAR 0 10
68112: PUSH
68113: LD_VAR 0 1
68117: PPUSH
68118: CALL_OW 274
68122: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68123: LD_ADDR_VAR 0 11
68127: PUSH
68128: LD_VAR 0 2
68132: PPUSH
68133: LD_VAR 0 1
68137: PPUSH
68138: CALL_OW 248
68142: PPUSH
68143: CALL_OW 450
68147: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
68148: LD_VAR 0 10
68152: PPUSH
68153: LD_INT 1
68155: PPUSH
68156: CALL_OW 275
68160: PUSH
68161: LD_VAR 0 11
68165: PUSH
68166: LD_INT 1
68168: ARRAY
68169: GREATEREQUAL
68170: PUSH
68171: LD_VAR 0 10
68175: PPUSH
68176: LD_INT 2
68178: PPUSH
68179: CALL_OW 275
68183: PUSH
68184: LD_VAR 0 11
68188: PUSH
68189: LD_INT 2
68191: ARRAY
68192: GREATEREQUAL
68193: AND
68194: PUSH
68195: LD_VAR 0 10
68199: PPUSH
68200: LD_INT 3
68202: PPUSH
68203: CALL_OW 275
68207: PUSH
68208: LD_VAR 0 11
68212: PUSH
68213: LD_INT 3
68215: ARRAY
68216: GREATEREQUAL
68217: AND
68218: NOT
68219: IFFALSE 68223
// exit ;
68221: GO 68810
// if GetBType ( depot ) = b_depot then
68223: LD_VAR 0 1
68227: PPUSH
68228: CALL_OW 266
68232: PUSH
68233: LD_INT 0
68235: EQUAL
68236: IFFALSE 68248
// dist := 28 else
68238: LD_ADDR_VAR 0 14
68242: PUSH
68243: LD_INT 28
68245: ST_TO_ADDR
68246: GO 68256
// dist := 36 ;
68248: LD_ADDR_VAR 0 14
68252: PUSH
68253: LD_INT 36
68255: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
68256: LD_VAR 0 1
68260: PPUSH
68261: LD_VAR 0 3
68265: PPUSH
68266: LD_VAR 0 4
68270: PPUSH
68271: CALL_OW 297
68275: PUSH
68276: LD_VAR 0 14
68280: GREATER
68281: IFFALSE 68285
// exit ;
68283: GO 68810
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
68285: LD_ADDR_VAR 0 12
68289: PUSH
68290: LD_VAR 0 2
68294: PPUSH
68295: LD_VAR 0 3
68299: PPUSH
68300: LD_VAR 0 4
68304: PPUSH
68305: LD_VAR 0 5
68309: PPUSH
68310: LD_VAR 0 1
68314: PPUSH
68315: CALL_OW 248
68319: PPUSH
68320: LD_INT 0
68322: PPUSH
68323: CALL 68815 0 6
68327: ST_TO_ADDR
// if not hexes then
68328: LD_VAR 0 12
68332: NOT
68333: IFFALSE 68337
// exit ;
68335: GO 68810
// hex := GetHexInfo ( x , y ) ;
68337: LD_ADDR_VAR 0 15
68341: PUSH
68342: LD_VAR 0 3
68346: PPUSH
68347: LD_VAR 0 4
68351: PPUSH
68352: CALL_OW 546
68356: ST_TO_ADDR
// if hex [ 1 ] then
68357: LD_VAR 0 15
68361: PUSH
68362: LD_INT 1
68364: ARRAY
68365: IFFALSE 68369
// exit ;
68367: GO 68810
// height := hex [ 2 ] ;
68369: LD_ADDR_VAR 0 13
68373: PUSH
68374: LD_VAR 0 15
68378: PUSH
68379: LD_INT 2
68381: ARRAY
68382: ST_TO_ADDR
// for i = 1 to hexes do
68383: LD_ADDR_VAR 0 7
68387: PUSH
68388: DOUBLE
68389: LD_INT 1
68391: DEC
68392: ST_TO_ADDR
68393: LD_VAR 0 12
68397: PUSH
68398: FOR_TO
68399: IFFALSE 68729
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
68401: LD_VAR 0 12
68405: PUSH
68406: LD_VAR 0 7
68410: ARRAY
68411: PUSH
68412: LD_INT 1
68414: ARRAY
68415: PPUSH
68416: LD_VAR 0 12
68420: PUSH
68421: LD_VAR 0 7
68425: ARRAY
68426: PUSH
68427: LD_INT 2
68429: ARRAY
68430: PPUSH
68431: CALL_OW 488
68435: NOT
68436: PUSH
68437: LD_VAR 0 12
68441: PUSH
68442: LD_VAR 0 7
68446: ARRAY
68447: PUSH
68448: LD_INT 1
68450: ARRAY
68451: PPUSH
68452: LD_VAR 0 12
68456: PUSH
68457: LD_VAR 0 7
68461: ARRAY
68462: PUSH
68463: LD_INT 2
68465: ARRAY
68466: PPUSH
68467: CALL_OW 428
68471: PUSH
68472: LD_INT 0
68474: GREATER
68475: OR
68476: PUSH
68477: LD_VAR 0 12
68481: PUSH
68482: LD_VAR 0 7
68486: ARRAY
68487: PUSH
68488: LD_INT 1
68490: ARRAY
68491: PPUSH
68492: LD_VAR 0 12
68496: PUSH
68497: LD_VAR 0 7
68501: ARRAY
68502: PUSH
68503: LD_INT 2
68505: ARRAY
68506: PPUSH
68507: CALL_OW 351
68511: OR
68512: IFFALSE 68518
// exit ;
68514: POP
68515: POP
68516: GO 68810
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68518: LD_ADDR_VAR 0 8
68522: PUSH
68523: LD_VAR 0 12
68527: PUSH
68528: LD_VAR 0 7
68532: ARRAY
68533: PUSH
68534: LD_INT 1
68536: ARRAY
68537: PPUSH
68538: LD_VAR 0 12
68542: PUSH
68543: LD_VAR 0 7
68547: ARRAY
68548: PUSH
68549: LD_INT 2
68551: ARRAY
68552: PPUSH
68553: CALL_OW 546
68557: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
68558: LD_VAR 0 8
68562: PUSH
68563: LD_INT 1
68565: ARRAY
68566: PUSH
68567: LD_VAR 0 8
68571: PUSH
68572: LD_INT 2
68574: ARRAY
68575: PUSH
68576: LD_VAR 0 13
68580: PUSH
68581: LD_INT 2
68583: PLUS
68584: GREATER
68585: OR
68586: PUSH
68587: LD_VAR 0 8
68591: PUSH
68592: LD_INT 2
68594: ARRAY
68595: PUSH
68596: LD_VAR 0 13
68600: PUSH
68601: LD_INT 2
68603: MINUS
68604: LESS
68605: OR
68606: PUSH
68607: LD_VAR 0 8
68611: PUSH
68612: LD_INT 3
68614: ARRAY
68615: PUSH
68616: LD_INT 0
68618: PUSH
68619: LD_INT 8
68621: PUSH
68622: LD_INT 9
68624: PUSH
68625: LD_INT 10
68627: PUSH
68628: LD_INT 11
68630: PUSH
68631: LD_INT 12
68633: PUSH
68634: LD_INT 13
68636: PUSH
68637: LD_INT 16
68639: PUSH
68640: LD_INT 17
68642: PUSH
68643: LD_INT 18
68645: PUSH
68646: LD_INT 19
68648: PUSH
68649: LD_INT 20
68651: PUSH
68652: LD_INT 21
68654: PUSH
68655: EMPTY
68656: LIST
68657: LIST
68658: LIST
68659: LIST
68660: LIST
68661: LIST
68662: LIST
68663: LIST
68664: LIST
68665: LIST
68666: LIST
68667: LIST
68668: LIST
68669: IN
68670: NOT
68671: OR
68672: PUSH
68673: LD_VAR 0 8
68677: PUSH
68678: LD_INT 5
68680: ARRAY
68681: NOT
68682: OR
68683: PUSH
68684: LD_VAR 0 8
68688: PUSH
68689: LD_INT 6
68691: ARRAY
68692: PUSH
68693: LD_INT 1
68695: PUSH
68696: LD_INT 2
68698: PUSH
68699: LD_INT 7
68701: PUSH
68702: LD_INT 9
68704: PUSH
68705: LD_INT 10
68707: PUSH
68708: LD_INT 11
68710: PUSH
68711: EMPTY
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: IN
68719: NOT
68720: OR
68721: IFFALSE 68727
// exit ;
68723: POP
68724: POP
68725: GO 68810
// end ;
68727: GO 68398
68729: POP
68730: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
68731: LD_VAR 0 9
68735: PPUSH
68736: LD_VAR 0 3
68740: PPUSH
68741: LD_VAR 0 4
68745: PPUSH
68746: LD_INT 20
68748: PPUSH
68749: CALL 60733 0 4
68753: PUSH
68754: LD_INT 4
68756: ARRAY
68757: IFFALSE 68761
// exit ;
68759: GO 68810
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
68761: LD_VAR 0 2
68765: PUSH
68766: LD_INT 29
68768: PUSH
68769: LD_INT 30
68771: PUSH
68772: EMPTY
68773: LIST
68774: LIST
68775: IN
68776: PUSH
68777: LD_VAR 0 3
68781: PPUSH
68782: LD_VAR 0 4
68786: PPUSH
68787: LD_VAR 0 9
68791: PPUSH
68792: CALL_OW 440
68796: NOT
68797: AND
68798: IFFALSE 68802
// exit ;
68800: GO 68810
// result := true ;
68802: LD_ADDR_VAR 0 6
68806: PUSH
68807: LD_INT 1
68809: ST_TO_ADDR
// end ;
68810: LD_VAR 0 6
68814: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
68815: LD_INT 0
68817: PPUSH
68818: PPUSH
68819: PPUSH
68820: PPUSH
68821: PPUSH
68822: PPUSH
68823: PPUSH
68824: PPUSH
68825: PPUSH
68826: PPUSH
68827: PPUSH
68828: PPUSH
68829: PPUSH
68830: PPUSH
68831: PPUSH
68832: PPUSH
68833: PPUSH
68834: PPUSH
68835: PPUSH
68836: PPUSH
68837: PPUSH
68838: PPUSH
68839: PPUSH
68840: PPUSH
68841: PPUSH
68842: PPUSH
68843: PPUSH
68844: PPUSH
68845: PPUSH
68846: PPUSH
68847: PPUSH
68848: PPUSH
68849: PPUSH
68850: PPUSH
68851: PPUSH
68852: PPUSH
68853: PPUSH
68854: PPUSH
68855: PPUSH
68856: PPUSH
68857: PPUSH
68858: PPUSH
68859: PPUSH
68860: PPUSH
68861: PPUSH
68862: PPUSH
68863: PPUSH
68864: PPUSH
68865: PPUSH
68866: PPUSH
68867: PPUSH
68868: PPUSH
68869: PPUSH
68870: PPUSH
68871: PPUSH
68872: PPUSH
68873: PPUSH
68874: PPUSH
// result = [ ] ;
68875: LD_ADDR_VAR 0 7
68879: PUSH
68880: EMPTY
68881: ST_TO_ADDR
// temp_list = [ ] ;
68882: LD_ADDR_VAR 0 9
68886: PUSH
68887: EMPTY
68888: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
68889: LD_VAR 0 4
68893: PUSH
68894: LD_INT 0
68896: PUSH
68897: LD_INT 1
68899: PUSH
68900: LD_INT 2
68902: PUSH
68903: LD_INT 3
68905: PUSH
68906: LD_INT 4
68908: PUSH
68909: LD_INT 5
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: LIST
68916: LIST
68917: LIST
68918: LIST
68919: IN
68920: NOT
68921: PUSH
68922: LD_VAR 0 1
68926: PUSH
68927: LD_INT 0
68929: PUSH
68930: LD_INT 1
68932: PUSH
68933: EMPTY
68934: LIST
68935: LIST
68936: IN
68937: PUSH
68938: LD_VAR 0 5
68942: PUSH
68943: LD_INT 1
68945: PUSH
68946: LD_INT 2
68948: PUSH
68949: LD_INT 3
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: LIST
68956: IN
68957: NOT
68958: AND
68959: OR
68960: IFFALSE 68964
// exit ;
68962: GO 87355
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
68964: LD_VAR 0 1
68968: PUSH
68969: LD_INT 6
68971: PUSH
68972: LD_INT 7
68974: PUSH
68975: LD_INT 8
68977: PUSH
68978: LD_INT 13
68980: PUSH
68981: LD_INT 12
68983: PUSH
68984: LD_INT 15
68986: PUSH
68987: LD_INT 11
68989: PUSH
68990: LD_INT 14
68992: PUSH
68993: LD_INT 10
68995: PUSH
68996: EMPTY
68997: LIST
68998: LIST
68999: LIST
69000: LIST
69001: LIST
69002: LIST
69003: LIST
69004: LIST
69005: LIST
69006: IN
69007: IFFALSE 69017
// btype = b_lab ;
69009: LD_ADDR_VAR 0 1
69013: PUSH
69014: LD_INT 6
69016: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
69017: LD_VAR 0 6
69021: PUSH
69022: LD_INT 0
69024: PUSH
69025: LD_INT 1
69027: PUSH
69028: LD_INT 2
69030: PUSH
69031: EMPTY
69032: LIST
69033: LIST
69034: LIST
69035: IN
69036: NOT
69037: PUSH
69038: LD_VAR 0 1
69042: PUSH
69043: LD_INT 0
69045: PUSH
69046: LD_INT 1
69048: PUSH
69049: LD_INT 2
69051: PUSH
69052: LD_INT 3
69054: PUSH
69055: LD_INT 6
69057: PUSH
69058: LD_INT 36
69060: PUSH
69061: LD_INT 4
69063: PUSH
69064: LD_INT 5
69066: PUSH
69067: LD_INT 31
69069: PUSH
69070: LD_INT 32
69072: PUSH
69073: LD_INT 33
69075: PUSH
69076: EMPTY
69077: LIST
69078: LIST
69079: LIST
69080: LIST
69081: LIST
69082: LIST
69083: LIST
69084: LIST
69085: LIST
69086: LIST
69087: LIST
69088: IN
69089: NOT
69090: PUSH
69091: LD_VAR 0 6
69095: PUSH
69096: LD_INT 1
69098: EQUAL
69099: AND
69100: OR
69101: PUSH
69102: LD_VAR 0 1
69106: PUSH
69107: LD_INT 2
69109: PUSH
69110: LD_INT 3
69112: PUSH
69113: EMPTY
69114: LIST
69115: LIST
69116: IN
69117: NOT
69118: PUSH
69119: LD_VAR 0 6
69123: PUSH
69124: LD_INT 2
69126: EQUAL
69127: AND
69128: OR
69129: IFFALSE 69139
// mode = 0 ;
69131: LD_ADDR_VAR 0 6
69135: PUSH
69136: LD_INT 0
69138: ST_TO_ADDR
// case mode of 0 :
69139: LD_VAR 0 6
69143: PUSH
69144: LD_INT 0
69146: DOUBLE
69147: EQUAL
69148: IFTRUE 69152
69150: GO 80605
69152: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69153: LD_ADDR_VAR 0 11
69157: PUSH
69158: LD_INT 0
69160: PUSH
69161: LD_INT 0
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 0
69170: PUSH
69171: LD_INT 1
69173: NEG
69174: PUSH
69175: EMPTY
69176: LIST
69177: LIST
69178: PUSH
69179: LD_INT 1
69181: PUSH
69182: LD_INT 0
69184: PUSH
69185: EMPTY
69186: LIST
69187: LIST
69188: PUSH
69189: LD_INT 1
69191: PUSH
69192: LD_INT 1
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 0
69201: PUSH
69202: LD_INT 1
69204: PUSH
69205: EMPTY
69206: LIST
69207: LIST
69208: PUSH
69209: LD_INT 1
69211: NEG
69212: PUSH
69213: LD_INT 0
69215: PUSH
69216: EMPTY
69217: LIST
69218: LIST
69219: PUSH
69220: LD_INT 1
69222: NEG
69223: PUSH
69224: LD_INT 1
69226: NEG
69227: PUSH
69228: EMPTY
69229: LIST
69230: LIST
69231: PUSH
69232: LD_INT 1
69234: NEG
69235: PUSH
69236: LD_INT 2
69238: NEG
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: LD_INT 0
69246: PUSH
69247: LD_INT 2
69249: NEG
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 1
69257: PUSH
69258: LD_INT 1
69260: NEG
69261: PUSH
69262: EMPTY
69263: LIST
69264: LIST
69265: PUSH
69266: LD_INT 1
69268: PUSH
69269: LD_INT 2
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 0
69278: PUSH
69279: LD_INT 2
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 1
69288: NEG
69289: PUSH
69290: LD_INT 1
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: PUSH
69297: LD_INT 1
69299: PUSH
69300: LD_INT 3
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 0
69309: PUSH
69310: LD_INT 3
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 1
69319: NEG
69320: PUSH
69321: LD_INT 2
69323: PUSH
69324: EMPTY
69325: LIST
69326: LIST
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: LIST
69332: LIST
69333: LIST
69334: LIST
69335: LIST
69336: LIST
69337: LIST
69338: LIST
69339: LIST
69340: LIST
69341: LIST
69342: LIST
69343: LIST
69344: LIST
69345: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69346: LD_ADDR_VAR 0 12
69350: PUSH
69351: LD_INT 0
69353: PUSH
69354: LD_INT 0
69356: PUSH
69357: EMPTY
69358: LIST
69359: LIST
69360: PUSH
69361: LD_INT 0
69363: PUSH
69364: LD_INT 1
69366: NEG
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: LD_INT 1
69374: PUSH
69375: LD_INT 0
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 1
69384: PUSH
69385: LD_INT 1
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: LD_INT 0
69394: PUSH
69395: LD_INT 1
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: LD_INT 1
69404: NEG
69405: PUSH
69406: LD_INT 0
69408: PUSH
69409: EMPTY
69410: LIST
69411: LIST
69412: PUSH
69413: LD_INT 1
69415: NEG
69416: PUSH
69417: LD_INT 1
69419: NEG
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: LD_INT 1
69427: PUSH
69428: LD_INT 1
69430: NEG
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 2
69438: PUSH
69439: LD_INT 0
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 2
69448: PUSH
69449: LD_INT 1
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 1
69458: NEG
69459: PUSH
69460: LD_INT 1
69462: PUSH
69463: EMPTY
69464: LIST
69465: LIST
69466: PUSH
69467: LD_INT 2
69469: NEG
69470: PUSH
69471: LD_INT 0
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 2
69480: NEG
69481: PUSH
69482: LD_INT 1
69484: NEG
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 2
69492: NEG
69493: PUSH
69494: LD_INT 1
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 3
69503: NEG
69504: PUSH
69505: LD_INT 0
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: LD_INT 3
69514: NEG
69515: PUSH
69516: LD_INT 1
69518: NEG
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69542: LD_ADDR_VAR 0 13
69546: PUSH
69547: LD_INT 0
69549: PUSH
69550: LD_INT 0
69552: PUSH
69553: EMPTY
69554: LIST
69555: LIST
69556: PUSH
69557: LD_INT 0
69559: PUSH
69560: LD_INT 1
69562: NEG
69563: PUSH
69564: EMPTY
69565: LIST
69566: LIST
69567: PUSH
69568: LD_INT 1
69570: PUSH
69571: LD_INT 0
69573: PUSH
69574: EMPTY
69575: LIST
69576: LIST
69577: PUSH
69578: LD_INT 1
69580: PUSH
69581: LD_INT 1
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 0
69590: PUSH
69591: LD_INT 1
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 1
69600: NEG
69601: PUSH
69602: LD_INT 0
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 1
69611: NEG
69612: PUSH
69613: LD_INT 1
69615: NEG
69616: PUSH
69617: EMPTY
69618: LIST
69619: LIST
69620: PUSH
69621: LD_INT 1
69623: NEG
69624: PUSH
69625: LD_INT 2
69627: NEG
69628: PUSH
69629: EMPTY
69630: LIST
69631: LIST
69632: PUSH
69633: LD_INT 2
69635: PUSH
69636: LD_INT 1
69638: PUSH
69639: EMPTY
69640: LIST
69641: LIST
69642: PUSH
69643: LD_INT 2
69645: PUSH
69646: LD_INT 2
69648: PUSH
69649: EMPTY
69650: LIST
69651: LIST
69652: PUSH
69653: LD_INT 1
69655: PUSH
69656: LD_INT 2
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: LD_INT 2
69665: NEG
69666: PUSH
69667: LD_INT 1
69669: NEG
69670: PUSH
69671: EMPTY
69672: LIST
69673: LIST
69674: PUSH
69675: LD_INT 2
69677: NEG
69678: PUSH
69679: LD_INT 2
69681: NEG
69682: PUSH
69683: EMPTY
69684: LIST
69685: LIST
69686: PUSH
69687: LD_INT 2
69689: NEG
69690: PUSH
69691: LD_INT 3
69693: NEG
69694: PUSH
69695: EMPTY
69696: LIST
69697: LIST
69698: PUSH
69699: LD_INT 3
69701: NEG
69702: PUSH
69703: LD_INT 2
69705: NEG
69706: PUSH
69707: EMPTY
69708: LIST
69709: LIST
69710: PUSH
69711: LD_INT 3
69713: NEG
69714: PUSH
69715: LD_INT 3
69717: NEG
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: LIST
69727: LIST
69728: LIST
69729: LIST
69730: LIST
69731: LIST
69732: LIST
69733: LIST
69734: LIST
69735: LIST
69736: LIST
69737: LIST
69738: LIST
69739: LIST
69740: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69741: LD_ADDR_VAR 0 14
69745: PUSH
69746: LD_INT 0
69748: PUSH
69749: LD_INT 0
69751: PUSH
69752: EMPTY
69753: LIST
69754: LIST
69755: PUSH
69756: LD_INT 0
69758: PUSH
69759: LD_INT 1
69761: NEG
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: LD_INT 1
69769: PUSH
69770: LD_INT 0
69772: PUSH
69773: EMPTY
69774: LIST
69775: LIST
69776: PUSH
69777: LD_INT 1
69779: PUSH
69780: LD_INT 1
69782: PUSH
69783: EMPTY
69784: LIST
69785: LIST
69786: PUSH
69787: LD_INT 0
69789: PUSH
69790: LD_INT 1
69792: PUSH
69793: EMPTY
69794: LIST
69795: LIST
69796: PUSH
69797: LD_INT 1
69799: NEG
69800: PUSH
69801: LD_INT 0
69803: PUSH
69804: EMPTY
69805: LIST
69806: LIST
69807: PUSH
69808: LD_INT 1
69810: NEG
69811: PUSH
69812: LD_INT 1
69814: NEG
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_INT 1
69822: NEG
69823: PUSH
69824: LD_INT 2
69826: NEG
69827: PUSH
69828: EMPTY
69829: LIST
69830: LIST
69831: PUSH
69832: LD_INT 0
69834: PUSH
69835: LD_INT 2
69837: NEG
69838: PUSH
69839: EMPTY
69840: LIST
69841: LIST
69842: PUSH
69843: LD_INT 1
69845: PUSH
69846: LD_INT 1
69848: NEG
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: LD_INT 1
69856: PUSH
69857: LD_INT 2
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 0
69866: PUSH
69867: LD_INT 2
69869: PUSH
69870: EMPTY
69871: LIST
69872: LIST
69873: PUSH
69874: LD_INT 1
69876: NEG
69877: PUSH
69878: LD_INT 1
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 1
69887: NEG
69888: PUSH
69889: LD_INT 3
69891: NEG
69892: PUSH
69893: EMPTY
69894: LIST
69895: LIST
69896: PUSH
69897: LD_INT 0
69899: PUSH
69900: LD_INT 3
69902: NEG
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: LD_INT 1
69910: PUSH
69911: LD_INT 2
69913: NEG
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PUSH
69919: EMPTY
69920: LIST
69921: LIST
69922: LIST
69923: LIST
69924: LIST
69925: LIST
69926: LIST
69927: LIST
69928: LIST
69929: LIST
69930: LIST
69931: LIST
69932: LIST
69933: LIST
69934: LIST
69935: LIST
69936: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
69937: LD_ADDR_VAR 0 15
69941: PUSH
69942: LD_INT 0
69944: PUSH
69945: LD_INT 0
69947: PUSH
69948: EMPTY
69949: LIST
69950: LIST
69951: PUSH
69952: LD_INT 0
69954: PUSH
69955: LD_INT 1
69957: NEG
69958: PUSH
69959: EMPTY
69960: LIST
69961: LIST
69962: PUSH
69963: LD_INT 1
69965: PUSH
69966: LD_INT 0
69968: PUSH
69969: EMPTY
69970: LIST
69971: LIST
69972: PUSH
69973: LD_INT 1
69975: PUSH
69976: LD_INT 1
69978: PUSH
69979: EMPTY
69980: LIST
69981: LIST
69982: PUSH
69983: LD_INT 0
69985: PUSH
69986: LD_INT 1
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 1
69995: NEG
69996: PUSH
69997: LD_INT 0
69999: PUSH
70000: EMPTY
70001: LIST
70002: LIST
70003: PUSH
70004: LD_INT 1
70006: NEG
70007: PUSH
70008: LD_INT 1
70010: NEG
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 1
70018: PUSH
70019: LD_INT 1
70021: NEG
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: LD_INT 2
70029: PUSH
70030: LD_INT 0
70032: PUSH
70033: EMPTY
70034: LIST
70035: LIST
70036: PUSH
70037: LD_INT 2
70039: PUSH
70040: LD_INT 1
70042: PUSH
70043: EMPTY
70044: LIST
70045: LIST
70046: PUSH
70047: LD_INT 1
70049: NEG
70050: PUSH
70051: LD_INT 1
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 2
70060: NEG
70061: PUSH
70062: LD_INT 0
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PUSH
70069: LD_INT 2
70071: NEG
70072: PUSH
70073: LD_INT 1
70075: NEG
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PUSH
70081: LD_INT 2
70083: PUSH
70084: LD_INT 1
70086: NEG
70087: PUSH
70088: EMPTY
70089: LIST
70090: LIST
70091: PUSH
70092: LD_INT 3
70094: PUSH
70095: LD_INT 0
70097: PUSH
70098: EMPTY
70099: LIST
70100: LIST
70101: PUSH
70102: LD_INT 3
70104: PUSH
70105: LD_INT 1
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PUSH
70112: EMPTY
70113: LIST
70114: LIST
70115: LIST
70116: LIST
70117: LIST
70118: LIST
70119: LIST
70120: LIST
70121: LIST
70122: LIST
70123: LIST
70124: LIST
70125: LIST
70126: LIST
70127: LIST
70128: LIST
70129: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70130: LD_ADDR_VAR 0 16
70134: PUSH
70135: LD_INT 0
70137: PUSH
70138: LD_INT 0
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PUSH
70145: LD_INT 0
70147: PUSH
70148: LD_INT 1
70150: NEG
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 1
70158: PUSH
70159: LD_INT 0
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 1
70168: PUSH
70169: LD_INT 1
70171: PUSH
70172: EMPTY
70173: LIST
70174: LIST
70175: PUSH
70176: LD_INT 0
70178: PUSH
70179: LD_INT 1
70181: PUSH
70182: EMPTY
70183: LIST
70184: LIST
70185: PUSH
70186: LD_INT 1
70188: NEG
70189: PUSH
70190: LD_INT 0
70192: PUSH
70193: EMPTY
70194: LIST
70195: LIST
70196: PUSH
70197: LD_INT 1
70199: NEG
70200: PUSH
70201: LD_INT 1
70203: NEG
70204: PUSH
70205: EMPTY
70206: LIST
70207: LIST
70208: PUSH
70209: LD_INT 1
70211: NEG
70212: PUSH
70213: LD_INT 2
70215: NEG
70216: PUSH
70217: EMPTY
70218: LIST
70219: LIST
70220: PUSH
70221: LD_INT 2
70223: PUSH
70224: LD_INT 1
70226: PUSH
70227: EMPTY
70228: LIST
70229: LIST
70230: PUSH
70231: LD_INT 2
70233: PUSH
70234: LD_INT 2
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 1
70243: PUSH
70244: LD_INT 2
70246: PUSH
70247: EMPTY
70248: LIST
70249: LIST
70250: PUSH
70251: LD_INT 2
70253: NEG
70254: PUSH
70255: LD_INT 1
70257: NEG
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 2
70265: NEG
70266: PUSH
70267: LD_INT 2
70269: NEG
70270: PUSH
70271: EMPTY
70272: LIST
70273: LIST
70274: PUSH
70275: LD_INT 3
70277: PUSH
70278: LD_INT 2
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: LD_INT 3
70287: PUSH
70288: LD_INT 3
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: LD_INT 2
70297: PUSH
70298: LD_INT 3
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70323: LD_ADDR_VAR 0 17
70327: PUSH
70328: LD_INT 0
70330: PUSH
70331: LD_INT 0
70333: PUSH
70334: EMPTY
70335: LIST
70336: LIST
70337: PUSH
70338: LD_INT 0
70340: PUSH
70341: LD_INT 1
70343: NEG
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 1
70351: PUSH
70352: LD_INT 0
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: LD_INT 1
70361: PUSH
70362: LD_INT 1
70364: PUSH
70365: EMPTY
70366: LIST
70367: LIST
70368: PUSH
70369: LD_INT 0
70371: PUSH
70372: LD_INT 1
70374: PUSH
70375: EMPTY
70376: LIST
70377: LIST
70378: PUSH
70379: LD_INT 1
70381: NEG
70382: PUSH
70383: LD_INT 0
70385: PUSH
70386: EMPTY
70387: LIST
70388: LIST
70389: PUSH
70390: LD_INT 1
70392: NEG
70393: PUSH
70394: LD_INT 1
70396: NEG
70397: PUSH
70398: EMPTY
70399: LIST
70400: LIST
70401: PUSH
70402: LD_INT 1
70404: NEG
70405: PUSH
70406: LD_INT 2
70408: NEG
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 0
70416: PUSH
70417: LD_INT 2
70419: NEG
70420: PUSH
70421: EMPTY
70422: LIST
70423: LIST
70424: PUSH
70425: LD_INT 1
70427: PUSH
70428: LD_INT 1
70430: NEG
70431: PUSH
70432: EMPTY
70433: LIST
70434: LIST
70435: PUSH
70436: LD_INT 2
70438: PUSH
70439: LD_INT 0
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: PUSH
70446: LD_INT 2
70448: PUSH
70449: LD_INT 1
70451: PUSH
70452: EMPTY
70453: LIST
70454: LIST
70455: PUSH
70456: LD_INT 2
70458: PUSH
70459: LD_INT 2
70461: PUSH
70462: EMPTY
70463: LIST
70464: LIST
70465: PUSH
70466: LD_INT 1
70468: PUSH
70469: LD_INT 2
70471: PUSH
70472: EMPTY
70473: LIST
70474: LIST
70475: PUSH
70476: LD_INT 0
70478: PUSH
70479: LD_INT 2
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: PUSH
70486: LD_INT 1
70488: NEG
70489: PUSH
70490: LD_INT 1
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 2
70499: NEG
70500: PUSH
70501: LD_INT 0
70503: PUSH
70504: EMPTY
70505: LIST
70506: LIST
70507: PUSH
70508: LD_INT 2
70510: NEG
70511: PUSH
70512: LD_INT 1
70514: NEG
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: PUSH
70520: LD_INT 2
70522: NEG
70523: PUSH
70524: LD_INT 2
70526: NEG
70527: PUSH
70528: EMPTY
70529: LIST
70530: LIST
70531: PUSH
70532: EMPTY
70533: LIST
70534: LIST
70535: LIST
70536: LIST
70537: LIST
70538: LIST
70539: LIST
70540: LIST
70541: LIST
70542: LIST
70543: LIST
70544: LIST
70545: LIST
70546: LIST
70547: LIST
70548: LIST
70549: LIST
70550: LIST
70551: LIST
70552: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70553: LD_ADDR_VAR 0 18
70557: PUSH
70558: LD_INT 0
70560: PUSH
70561: LD_INT 0
70563: PUSH
70564: EMPTY
70565: LIST
70566: LIST
70567: PUSH
70568: LD_INT 0
70570: PUSH
70571: LD_INT 1
70573: NEG
70574: PUSH
70575: EMPTY
70576: LIST
70577: LIST
70578: PUSH
70579: LD_INT 1
70581: PUSH
70582: LD_INT 0
70584: PUSH
70585: EMPTY
70586: LIST
70587: LIST
70588: PUSH
70589: LD_INT 1
70591: PUSH
70592: LD_INT 1
70594: PUSH
70595: EMPTY
70596: LIST
70597: LIST
70598: PUSH
70599: LD_INT 0
70601: PUSH
70602: LD_INT 1
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 1
70611: NEG
70612: PUSH
70613: LD_INT 0
70615: PUSH
70616: EMPTY
70617: LIST
70618: LIST
70619: PUSH
70620: LD_INT 1
70622: NEG
70623: PUSH
70624: LD_INT 1
70626: NEG
70627: PUSH
70628: EMPTY
70629: LIST
70630: LIST
70631: PUSH
70632: LD_INT 1
70634: NEG
70635: PUSH
70636: LD_INT 2
70638: NEG
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: PUSH
70644: LD_INT 0
70646: PUSH
70647: LD_INT 2
70649: NEG
70650: PUSH
70651: EMPTY
70652: LIST
70653: LIST
70654: PUSH
70655: LD_INT 1
70657: PUSH
70658: LD_INT 1
70660: NEG
70661: PUSH
70662: EMPTY
70663: LIST
70664: LIST
70665: PUSH
70666: LD_INT 2
70668: PUSH
70669: LD_INT 0
70671: PUSH
70672: EMPTY
70673: LIST
70674: LIST
70675: PUSH
70676: LD_INT 2
70678: PUSH
70679: LD_INT 1
70681: PUSH
70682: EMPTY
70683: LIST
70684: LIST
70685: PUSH
70686: LD_INT 2
70688: PUSH
70689: LD_INT 2
70691: PUSH
70692: EMPTY
70693: LIST
70694: LIST
70695: PUSH
70696: LD_INT 1
70698: PUSH
70699: LD_INT 2
70701: PUSH
70702: EMPTY
70703: LIST
70704: LIST
70705: PUSH
70706: LD_INT 0
70708: PUSH
70709: LD_INT 2
70711: PUSH
70712: EMPTY
70713: LIST
70714: LIST
70715: PUSH
70716: LD_INT 1
70718: NEG
70719: PUSH
70720: LD_INT 1
70722: PUSH
70723: EMPTY
70724: LIST
70725: LIST
70726: PUSH
70727: LD_INT 2
70729: NEG
70730: PUSH
70731: LD_INT 0
70733: PUSH
70734: EMPTY
70735: LIST
70736: LIST
70737: PUSH
70738: LD_INT 2
70740: NEG
70741: PUSH
70742: LD_INT 1
70744: NEG
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: PUSH
70750: LD_INT 2
70752: NEG
70753: PUSH
70754: LD_INT 2
70756: NEG
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: EMPTY
70763: LIST
70764: LIST
70765: LIST
70766: LIST
70767: LIST
70768: LIST
70769: LIST
70770: LIST
70771: LIST
70772: LIST
70773: LIST
70774: LIST
70775: LIST
70776: LIST
70777: LIST
70778: LIST
70779: LIST
70780: LIST
70781: LIST
70782: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70783: LD_ADDR_VAR 0 19
70787: PUSH
70788: LD_INT 0
70790: PUSH
70791: LD_INT 0
70793: PUSH
70794: EMPTY
70795: LIST
70796: LIST
70797: PUSH
70798: LD_INT 0
70800: PUSH
70801: LD_INT 1
70803: NEG
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: LD_INT 1
70811: PUSH
70812: LD_INT 0
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 1
70821: PUSH
70822: LD_INT 1
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: PUSH
70829: LD_INT 0
70831: PUSH
70832: LD_INT 1
70834: PUSH
70835: EMPTY
70836: LIST
70837: LIST
70838: PUSH
70839: LD_INT 1
70841: NEG
70842: PUSH
70843: LD_INT 0
70845: PUSH
70846: EMPTY
70847: LIST
70848: LIST
70849: PUSH
70850: LD_INT 1
70852: NEG
70853: PUSH
70854: LD_INT 1
70856: NEG
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: LD_INT 1
70864: NEG
70865: PUSH
70866: LD_INT 2
70868: NEG
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: LD_INT 0
70876: PUSH
70877: LD_INT 2
70879: NEG
70880: PUSH
70881: EMPTY
70882: LIST
70883: LIST
70884: PUSH
70885: LD_INT 1
70887: PUSH
70888: LD_INT 1
70890: NEG
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 2
70898: PUSH
70899: LD_INT 0
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 2
70908: PUSH
70909: LD_INT 1
70911: PUSH
70912: EMPTY
70913: LIST
70914: LIST
70915: PUSH
70916: LD_INT 2
70918: PUSH
70919: LD_INT 2
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: LD_INT 1
70928: PUSH
70929: LD_INT 2
70931: PUSH
70932: EMPTY
70933: LIST
70934: LIST
70935: PUSH
70936: LD_INT 0
70938: PUSH
70939: LD_INT 2
70941: PUSH
70942: EMPTY
70943: LIST
70944: LIST
70945: PUSH
70946: LD_INT 1
70948: NEG
70949: PUSH
70950: LD_INT 1
70952: PUSH
70953: EMPTY
70954: LIST
70955: LIST
70956: PUSH
70957: LD_INT 2
70959: NEG
70960: PUSH
70961: LD_INT 0
70963: PUSH
70964: EMPTY
70965: LIST
70966: LIST
70967: PUSH
70968: LD_INT 2
70970: NEG
70971: PUSH
70972: LD_INT 1
70974: NEG
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: PUSH
70980: LD_INT 2
70982: NEG
70983: PUSH
70984: LD_INT 2
70986: NEG
70987: PUSH
70988: EMPTY
70989: LIST
70990: LIST
70991: PUSH
70992: EMPTY
70993: LIST
70994: LIST
70995: LIST
70996: LIST
70997: LIST
70998: LIST
70999: LIST
71000: LIST
71001: LIST
71002: LIST
71003: LIST
71004: LIST
71005: LIST
71006: LIST
71007: LIST
71008: LIST
71009: LIST
71010: LIST
71011: LIST
71012: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71013: LD_ADDR_VAR 0 20
71017: PUSH
71018: LD_INT 0
71020: PUSH
71021: LD_INT 0
71023: PUSH
71024: EMPTY
71025: LIST
71026: LIST
71027: PUSH
71028: LD_INT 0
71030: PUSH
71031: LD_INT 1
71033: NEG
71034: PUSH
71035: EMPTY
71036: LIST
71037: LIST
71038: PUSH
71039: LD_INT 1
71041: PUSH
71042: LD_INT 0
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: PUSH
71049: LD_INT 1
71051: PUSH
71052: LD_INT 1
71054: PUSH
71055: EMPTY
71056: LIST
71057: LIST
71058: PUSH
71059: LD_INT 0
71061: PUSH
71062: LD_INT 1
71064: PUSH
71065: EMPTY
71066: LIST
71067: LIST
71068: PUSH
71069: LD_INT 1
71071: NEG
71072: PUSH
71073: LD_INT 0
71075: PUSH
71076: EMPTY
71077: LIST
71078: LIST
71079: PUSH
71080: LD_INT 1
71082: NEG
71083: PUSH
71084: LD_INT 1
71086: NEG
71087: PUSH
71088: EMPTY
71089: LIST
71090: LIST
71091: PUSH
71092: LD_INT 1
71094: NEG
71095: PUSH
71096: LD_INT 2
71098: NEG
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: PUSH
71104: LD_INT 0
71106: PUSH
71107: LD_INT 2
71109: NEG
71110: PUSH
71111: EMPTY
71112: LIST
71113: LIST
71114: PUSH
71115: LD_INT 1
71117: PUSH
71118: LD_INT 1
71120: NEG
71121: PUSH
71122: EMPTY
71123: LIST
71124: LIST
71125: PUSH
71126: LD_INT 2
71128: PUSH
71129: LD_INT 0
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 2
71138: PUSH
71139: LD_INT 1
71141: PUSH
71142: EMPTY
71143: LIST
71144: LIST
71145: PUSH
71146: LD_INT 2
71148: PUSH
71149: LD_INT 2
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: PUSH
71156: LD_INT 1
71158: PUSH
71159: LD_INT 2
71161: PUSH
71162: EMPTY
71163: LIST
71164: LIST
71165: PUSH
71166: LD_INT 0
71168: PUSH
71169: LD_INT 2
71171: PUSH
71172: EMPTY
71173: LIST
71174: LIST
71175: PUSH
71176: LD_INT 1
71178: NEG
71179: PUSH
71180: LD_INT 1
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: LD_INT 2
71189: NEG
71190: PUSH
71191: LD_INT 0
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 2
71200: NEG
71201: PUSH
71202: LD_INT 1
71204: NEG
71205: PUSH
71206: EMPTY
71207: LIST
71208: LIST
71209: PUSH
71210: LD_INT 2
71212: NEG
71213: PUSH
71214: LD_INT 2
71216: NEG
71217: PUSH
71218: EMPTY
71219: LIST
71220: LIST
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: LIST
71226: LIST
71227: LIST
71228: LIST
71229: LIST
71230: LIST
71231: LIST
71232: LIST
71233: LIST
71234: LIST
71235: LIST
71236: LIST
71237: LIST
71238: LIST
71239: LIST
71240: LIST
71241: LIST
71242: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71243: LD_ADDR_VAR 0 21
71247: PUSH
71248: LD_INT 0
71250: PUSH
71251: LD_INT 0
71253: PUSH
71254: EMPTY
71255: LIST
71256: LIST
71257: PUSH
71258: LD_INT 0
71260: PUSH
71261: LD_INT 1
71263: NEG
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: PUSH
71269: LD_INT 1
71271: PUSH
71272: LD_INT 0
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: PUSH
71279: LD_INT 1
71281: PUSH
71282: LD_INT 1
71284: PUSH
71285: EMPTY
71286: LIST
71287: LIST
71288: PUSH
71289: LD_INT 0
71291: PUSH
71292: LD_INT 1
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: LD_INT 1
71301: NEG
71302: PUSH
71303: LD_INT 0
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 1
71312: NEG
71313: PUSH
71314: LD_INT 1
71316: NEG
71317: PUSH
71318: EMPTY
71319: LIST
71320: LIST
71321: PUSH
71322: LD_INT 1
71324: NEG
71325: PUSH
71326: LD_INT 2
71328: NEG
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: PUSH
71334: LD_INT 0
71336: PUSH
71337: LD_INT 2
71339: NEG
71340: PUSH
71341: EMPTY
71342: LIST
71343: LIST
71344: PUSH
71345: LD_INT 1
71347: PUSH
71348: LD_INT 1
71350: NEG
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: LD_INT 2
71358: PUSH
71359: LD_INT 0
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 2
71368: PUSH
71369: LD_INT 1
71371: PUSH
71372: EMPTY
71373: LIST
71374: LIST
71375: PUSH
71376: LD_INT 2
71378: PUSH
71379: LD_INT 2
71381: PUSH
71382: EMPTY
71383: LIST
71384: LIST
71385: PUSH
71386: LD_INT 1
71388: PUSH
71389: LD_INT 2
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PUSH
71396: LD_INT 0
71398: PUSH
71399: LD_INT 2
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: PUSH
71406: LD_INT 1
71408: NEG
71409: PUSH
71410: LD_INT 1
71412: PUSH
71413: EMPTY
71414: LIST
71415: LIST
71416: PUSH
71417: LD_INT 2
71419: NEG
71420: PUSH
71421: LD_INT 0
71423: PUSH
71424: EMPTY
71425: LIST
71426: LIST
71427: PUSH
71428: LD_INT 2
71430: NEG
71431: PUSH
71432: LD_INT 1
71434: NEG
71435: PUSH
71436: EMPTY
71437: LIST
71438: LIST
71439: PUSH
71440: LD_INT 2
71442: NEG
71443: PUSH
71444: LD_INT 2
71446: NEG
71447: PUSH
71448: EMPTY
71449: LIST
71450: LIST
71451: PUSH
71452: EMPTY
71453: LIST
71454: LIST
71455: LIST
71456: LIST
71457: LIST
71458: LIST
71459: LIST
71460: LIST
71461: LIST
71462: LIST
71463: LIST
71464: LIST
71465: LIST
71466: LIST
71467: LIST
71468: LIST
71469: LIST
71470: LIST
71471: LIST
71472: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71473: LD_ADDR_VAR 0 22
71477: PUSH
71478: LD_INT 0
71480: PUSH
71481: LD_INT 0
71483: PUSH
71484: EMPTY
71485: LIST
71486: LIST
71487: PUSH
71488: LD_INT 0
71490: PUSH
71491: LD_INT 1
71493: NEG
71494: PUSH
71495: EMPTY
71496: LIST
71497: LIST
71498: PUSH
71499: LD_INT 1
71501: PUSH
71502: LD_INT 0
71504: PUSH
71505: EMPTY
71506: LIST
71507: LIST
71508: PUSH
71509: LD_INT 1
71511: PUSH
71512: LD_INT 1
71514: PUSH
71515: EMPTY
71516: LIST
71517: LIST
71518: PUSH
71519: LD_INT 0
71521: PUSH
71522: LD_INT 1
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 1
71531: NEG
71532: PUSH
71533: LD_INT 0
71535: PUSH
71536: EMPTY
71537: LIST
71538: LIST
71539: PUSH
71540: LD_INT 1
71542: NEG
71543: PUSH
71544: LD_INT 1
71546: NEG
71547: PUSH
71548: EMPTY
71549: LIST
71550: LIST
71551: PUSH
71552: LD_INT 1
71554: NEG
71555: PUSH
71556: LD_INT 2
71558: NEG
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PUSH
71564: LD_INT 0
71566: PUSH
71567: LD_INT 2
71569: NEG
71570: PUSH
71571: EMPTY
71572: LIST
71573: LIST
71574: PUSH
71575: LD_INT 1
71577: PUSH
71578: LD_INT 1
71580: NEG
71581: PUSH
71582: EMPTY
71583: LIST
71584: LIST
71585: PUSH
71586: LD_INT 2
71588: PUSH
71589: LD_INT 0
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: PUSH
71596: LD_INT 2
71598: PUSH
71599: LD_INT 1
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PUSH
71606: LD_INT 2
71608: PUSH
71609: LD_INT 2
71611: PUSH
71612: EMPTY
71613: LIST
71614: LIST
71615: PUSH
71616: LD_INT 1
71618: PUSH
71619: LD_INT 2
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: PUSH
71626: LD_INT 0
71628: PUSH
71629: LD_INT 2
71631: PUSH
71632: EMPTY
71633: LIST
71634: LIST
71635: PUSH
71636: LD_INT 1
71638: NEG
71639: PUSH
71640: LD_INT 1
71642: PUSH
71643: EMPTY
71644: LIST
71645: LIST
71646: PUSH
71647: LD_INT 2
71649: NEG
71650: PUSH
71651: LD_INT 0
71653: PUSH
71654: EMPTY
71655: LIST
71656: LIST
71657: PUSH
71658: LD_INT 2
71660: NEG
71661: PUSH
71662: LD_INT 1
71664: NEG
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PUSH
71670: LD_INT 2
71672: NEG
71673: PUSH
71674: LD_INT 2
71676: NEG
71677: PUSH
71678: EMPTY
71679: LIST
71680: LIST
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: LIST
71686: LIST
71687: LIST
71688: LIST
71689: LIST
71690: LIST
71691: LIST
71692: LIST
71693: LIST
71694: LIST
71695: LIST
71696: LIST
71697: LIST
71698: LIST
71699: LIST
71700: LIST
71701: LIST
71702: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
71703: LD_ADDR_VAR 0 23
71707: PUSH
71708: LD_INT 0
71710: PUSH
71711: LD_INT 0
71713: PUSH
71714: EMPTY
71715: LIST
71716: LIST
71717: PUSH
71718: LD_INT 0
71720: PUSH
71721: LD_INT 1
71723: NEG
71724: PUSH
71725: EMPTY
71726: LIST
71727: LIST
71728: PUSH
71729: LD_INT 1
71731: PUSH
71732: LD_INT 0
71734: PUSH
71735: EMPTY
71736: LIST
71737: LIST
71738: PUSH
71739: LD_INT 1
71741: PUSH
71742: LD_INT 1
71744: PUSH
71745: EMPTY
71746: LIST
71747: LIST
71748: PUSH
71749: LD_INT 0
71751: PUSH
71752: LD_INT 1
71754: PUSH
71755: EMPTY
71756: LIST
71757: LIST
71758: PUSH
71759: LD_INT 1
71761: NEG
71762: PUSH
71763: LD_INT 0
71765: PUSH
71766: EMPTY
71767: LIST
71768: LIST
71769: PUSH
71770: LD_INT 1
71772: NEG
71773: PUSH
71774: LD_INT 1
71776: NEG
71777: PUSH
71778: EMPTY
71779: LIST
71780: LIST
71781: PUSH
71782: LD_INT 1
71784: NEG
71785: PUSH
71786: LD_INT 2
71788: NEG
71789: PUSH
71790: EMPTY
71791: LIST
71792: LIST
71793: PUSH
71794: LD_INT 0
71796: PUSH
71797: LD_INT 2
71799: NEG
71800: PUSH
71801: EMPTY
71802: LIST
71803: LIST
71804: PUSH
71805: LD_INT 1
71807: PUSH
71808: LD_INT 1
71810: NEG
71811: PUSH
71812: EMPTY
71813: LIST
71814: LIST
71815: PUSH
71816: LD_INT 2
71818: PUSH
71819: LD_INT 0
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: PUSH
71826: LD_INT 2
71828: PUSH
71829: LD_INT 1
71831: PUSH
71832: EMPTY
71833: LIST
71834: LIST
71835: PUSH
71836: LD_INT 2
71838: PUSH
71839: LD_INT 2
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: PUSH
71846: LD_INT 1
71848: PUSH
71849: LD_INT 2
71851: PUSH
71852: EMPTY
71853: LIST
71854: LIST
71855: PUSH
71856: LD_INT 0
71858: PUSH
71859: LD_INT 2
71861: PUSH
71862: EMPTY
71863: LIST
71864: LIST
71865: PUSH
71866: LD_INT 1
71868: NEG
71869: PUSH
71870: LD_INT 1
71872: PUSH
71873: EMPTY
71874: LIST
71875: LIST
71876: PUSH
71877: LD_INT 2
71879: NEG
71880: PUSH
71881: LD_INT 0
71883: PUSH
71884: EMPTY
71885: LIST
71886: LIST
71887: PUSH
71888: LD_INT 2
71890: NEG
71891: PUSH
71892: LD_INT 1
71894: NEG
71895: PUSH
71896: EMPTY
71897: LIST
71898: LIST
71899: PUSH
71900: LD_INT 2
71902: NEG
71903: PUSH
71904: LD_INT 2
71906: NEG
71907: PUSH
71908: EMPTY
71909: LIST
71910: LIST
71911: PUSH
71912: LD_INT 2
71914: NEG
71915: PUSH
71916: LD_INT 3
71918: NEG
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: PUSH
71924: LD_INT 1
71926: NEG
71927: PUSH
71928: LD_INT 3
71930: NEG
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: PUSH
71936: LD_INT 1
71938: PUSH
71939: LD_INT 2
71941: NEG
71942: PUSH
71943: EMPTY
71944: LIST
71945: LIST
71946: PUSH
71947: LD_INT 2
71949: PUSH
71950: LD_INT 1
71952: NEG
71953: PUSH
71954: EMPTY
71955: LIST
71956: LIST
71957: PUSH
71958: EMPTY
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: LIST
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: LIST
71978: LIST
71979: LIST
71980: LIST
71981: LIST
71982: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
71983: LD_ADDR_VAR 0 24
71987: PUSH
71988: LD_INT 0
71990: PUSH
71991: LD_INT 0
71993: PUSH
71994: EMPTY
71995: LIST
71996: LIST
71997: PUSH
71998: LD_INT 0
72000: PUSH
72001: LD_INT 1
72003: NEG
72004: PUSH
72005: EMPTY
72006: LIST
72007: LIST
72008: PUSH
72009: LD_INT 1
72011: PUSH
72012: LD_INT 0
72014: PUSH
72015: EMPTY
72016: LIST
72017: LIST
72018: PUSH
72019: LD_INT 1
72021: PUSH
72022: LD_INT 1
72024: PUSH
72025: EMPTY
72026: LIST
72027: LIST
72028: PUSH
72029: LD_INT 0
72031: PUSH
72032: LD_INT 1
72034: PUSH
72035: EMPTY
72036: LIST
72037: LIST
72038: PUSH
72039: LD_INT 1
72041: NEG
72042: PUSH
72043: LD_INT 0
72045: PUSH
72046: EMPTY
72047: LIST
72048: LIST
72049: PUSH
72050: LD_INT 1
72052: NEG
72053: PUSH
72054: LD_INT 1
72056: NEG
72057: PUSH
72058: EMPTY
72059: LIST
72060: LIST
72061: PUSH
72062: LD_INT 1
72064: NEG
72065: PUSH
72066: LD_INT 2
72068: NEG
72069: PUSH
72070: EMPTY
72071: LIST
72072: LIST
72073: PUSH
72074: LD_INT 0
72076: PUSH
72077: LD_INT 2
72079: NEG
72080: PUSH
72081: EMPTY
72082: LIST
72083: LIST
72084: PUSH
72085: LD_INT 1
72087: PUSH
72088: LD_INT 1
72090: NEG
72091: PUSH
72092: EMPTY
72093: LIST
72094: LIST
72095: PUSH
72096: LD_INT 2
72098: PUSH
72099: LD_INT 0
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: PUSH
72106: LD_INT 2
72108: PUSH
72109: LD_INT 1
72111: PUSH
72112: EMPTY
72113: LIST
72114: LIST
72115: PUSH
72116: LD_INT 2
72118: PUSH
72119: LD_INT 2
72121: PUSH
72122: EMPTY
72123: LIST
72124: LIST
72125: PUSH
72126: LD_INT 1
72128: PUSH
72129: LD_INT 2
72131: PUSH
72132: EMPTY
72133: LIST
72134: LIST
72135: PUSH
72136: LD_INT 0
72138: PUSH
72139: LD_INT 2
72141: PUSH
72142: EMPTY
72143: LIST
72144: LIST
72145: PUSH
72146: LD_INT 1
72148: NEG
72149: PUSH
72150: LD_INT 1
72152: PUSH
72153: EMPTY
72154: LIST
72155: LIST
72156: PUSH
72157: LD_INT 2
72159: NEG
72160: PUSH
72161: LD_INT 0
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: PUSH
72168: LD_INT 2
72170: NEG
72171: PUSH
72172: LD_INT 1
72174: NEG
72175: PUSH
72176: EMPTY
72177: LIST
72178: LIST
72179: PUSH
72180: LD_INT 2
72182: NEG
72183: PUSH
72184: LD_INT 2
72186: NEG
72187: PUSH
72188: EMPTY
72189: LIST
72190: LIST
72191: PUSH
72192: LD_INT 1
72194: PUSH
72195: LD_INT 2
72197: NEG
72198: PUSH
72199: EMPTY
72200: LIST
72201: LIST
72202: PUSH
72203: LD_INT 2
72205: PUSH
72206: LD_INT 1
72208: NEG
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: PUSH
72214: LD_INT 3
72216: PUSH
72217: LD_INT 1
72219: PUSH
72220: EMPTY
72221: LIST
72222: LIST
72223: PUSH
72224: LD_INT 3
72226: PUSH
72227: LD_INT 2
72229: PUSH
72230: EMPTY
72231: LIST
72232: LIST
72233: PUSH
72234: EMPTY
72235: LIST
72236: LIST
72237: LIST
72238: LIST
72239: LIST
72240: LIST
72241: LIST
72242: LIST
72243: LIST
72244: LIST
72245: LIST
72246: LIST
72247: LIST
72248: LIST
72249: LIST
72250: LIST
72251: LIST
72252: LIST
72253: LIST
72254: LIST
72255: LIST
72256: LIST
72257: LIST
72258: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
72259: LD_ADDR_VAR 0 25
72263: PUSH
72264: LD_INT 0
72266: PUSH
72267: LD_INT 0
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: PUSH
72274: LD_INT 0
72276: PUSH
72277: LD_INT 1
72279: NEG
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: PUSH
72285: LD_INT 1
72287: PUSH
72288: LD_INT 0
72290: PUSH
72291: EMPTY
72292: LIST
72293: LIST
72294: PUSH
72295: LD_INT 1
72297: PUSH
72298: LD_INT 1
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: PUSH
72305: LD_INT 0
72307: PUSH
72308: LD_INT 1
72310: PUSH
72311: EMPTY
72312: LIST
72313: LIST
72314: PUSH
72315: LD_INT 1
72317: NEG
72318: PUSH
72319: LD_INT 0
72321: PUSH
72322: EMPTY
72323: LIST
72324: LIST
72325: PUSH
72326: LD_INT 1
72328: NEG
72329: PUSH
72330: LD_INT 1
72332: NEG
72333: PUSH
72334: EMPTY
72335: LIST
72336: LIST
72337: PUSH
72338: LD_INT 1
72340: NEG
72341: PUSH
72342: LD_INT 2
72344: NEG
72345: PUSH
72346: EMPTY
72347: LIST
72348: LIST
72349: PUSH
72350: LD_INT 0
72352: PUSH
72353: LD_INT 2
72355: NEG
72356: PUSH
72357: EMPTY
72358: LIST
72359: LIST
72360: PUSH
72361: LD_INT 1
72363: PUSH
72364: LD_INT 1
72366: NEG
72367: PUSH
72368: EMPTY
72369: LIST
72370: LIST
72371: PUSH
72372: LD_INT 2
72374: PUSH
72375: LD_INT 0
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: PUSH
72382: LD_INT 2
72384: PUSH
72385: LD_INT 1
72387: PUSH
72388: EMPTY
72389: LIST
72390: LIST
72391: PUSH
72392: LD_INT 2
72394: PUSH
72395: LD_INT 2
72397: PUSH
72398: EMPTY
72399: LIST
72400: LIST
72401: PUSH
72402: LD_INT 1
72404: PUSH
72405: LD_INT 2
72407: PUSH
72408: EMPTY
72409: LIST
72410: LIST
72411: PUSH
72412: LD_INT 0
72414: PUSH
72415: LD_INT 2
72417: PUSH
72418: EMPTY
72419: LIST
72420: LIST
72421: PUSH
72422: LD_INT 1
72424: NEG
72425: PUSH
72426: LD_INT 1
72428: PUSH
72429: EMPTY
72430: LIST
72431: LIST
72432: PUSH
72433: LD_INT 2
72435: NEG
72436: PUSH
72437: LD_INT 0
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PUSH
72444: LD_INT 2
72446: NEG
72447: PUSH
72448: LD_INT 1
72450: NEG
72451: PUSH
72452: EMPTY
72453: LIST
72454: LIST
72455: PUSH
72456: LD_INT 2
72458: NEG
72459: PUSH
72460: LD_INT 2
72462: NEG
72463: PUSH
72464: EMPTY
72465: LIST
72466: LIST
72467: PUSH
72468: LD_INT 3
72470: PUSH
72471: LD_INT 1
72473: PUSH
72474: EMPTY
72475: LIST
72476: LIST
72477: PUSH
72478: LD_INT 3
72480: PUSH
72481: LD_INT 2
72483: PUSH
72484: EMPTY
72485: LIST
72486: LIST
72487: PUSH
72488: LD_INT 2
72490: PUSH
72491: LD_INT 3
72493: PUSH
72494: EMPTY
72495: LIST
72496: LIST
72497: PUSH
72498: LD_INT 1
72500: PUSH
72501: LD_INT 3
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: PUSH
72508: EMPTY
72509: LIST
72510: LIST
72511: LIST
72512: LIST
72513: LIST
72514: LIST
72515: LIST
72516: LIST
72517: LIST
72518: LIST
72519: LIST
72520: LIST
72521: LIST
72522: LIST
72523: LIST
72524: LIST
72525: LIST
72526: LIST
72527: LIST
72528: LIST
72529: LIST
72530: LIST
72531: LIST
72532: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
72533: LD_ADDR_VAR 0 26
72537: PUSH
72538: LD_INT 0
72540: PUSH
72541: LD_INT 0
72543: PUSH
72544: EMPTY
72545: LIST
72546: LIST
72547: PUSH
72548: LD_INT 0
72550: PUSH
72551: LD_INT 1
72553: NEG
72554: PUSH
72555: EMPTY
72556: LIST
72557: LIST
72558: PUSH
72559: LD_INT 1
72561: PUSH
72562: LD_INT 0
72564: PUSH
72565: EMPTY
72566: LIST
72567: LIST
72568: PUSH
72569: LD_INT 1
72571: PUSH
72572: LD_INT 1
72574: PUSH
72575: EMPTY
72576: LIST
72577: LIST
72578: PUSH
72579: LD_INT 0
72581: PUSH
72582: LD_INT 1
72584: PUSH
72585: EMPTY
72586: LIST
72587: LIST
72588: PUSH
72589: LD_INT 1
72591: NEG
72592: PUSH
72593: LD_INT 0
72595: PUSH
72596: EMPTY
72597: LIST
72598: LIST
72599: PUSH
72600: LD_INT 1
72602: NEG
72603: PUSH
72604: LD_INT 1
72606: NEG
72607: PUSH
72608: EMPTY
72609: LIST
72610: LIST
72611: PUSH
72612: LD_INT 1
72614: NEG
72615: PUSH
72616: LD_INT 2
72618: NEG
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: PUSH
72624: LD_INT 0
72626: PUSH
72627: LD_INT 2
72629: NEG
72630: PUSH
72631: EMPTY
72632: LIST
72633: LIST
72634: PUSH
72635: LD_INT 1
72637: PUSH
72638: LD_INT 1
72640: NEG
72641: PUSH
72642: EMPTY
72643: LIST
72644: LIST
72645: PUSH
72646: LD_INT 2
72648: PUSH
72649: LD_INT 0
72651: PUSH
72652: EMPTY
72653: LIST
72654: LIST
72655: PUSH
72656: LD_INT 2
72658: PUSH
72659: LD_INT 1
72661: PUSH
72662: EMPTY
72663: LIST
72664: LIST
72665: PUSH
72666: LD_INT 2
72668: PUSH
72669: LD_INT 2
72671: PUSH
72672: EMPTY
72673: LIST
72674: LIST
72675: PUSH
72676: LD_INT 1
72678: PUSH
72679: LD_INT 2
72681: PUSH
72682: EMPTY
72683: LIST
72684: LIST
72685: PUSH
72686: LD_INT 0
72688: PUSH
72689: LD_INT 2
72691: PUSH
72692: EMPTY
72693: LIST
72694: LIST
72695: PUSH
72696: LD_INT 1
72698: NEG
72699: PUSH
72700: LD_INT 1
72702: PUSH
72703: EMPTY
72704: LIST
72705: LIST
72706: PUSH
72707: LD_INT 2
72709: NEG
72710: PUSH
72711: LD_INT 0
72713: PUSH
72714: EMPTY
72715: LIST
72716: LIST
72717: PUSH
72718: LD_INT 2
72720: NEG
72721: PUSH
72722: LD_INT 1
72724: NEG
72725: PUSH
72726: EMPTY
72727: LIST
72728: LIST
72729: PUSH
72730: LD_INT 2
72732: NEG
72733: PUSH
72734: LD_INT 2
72736: NEG
72737: PUSH
72738: EMPTY
72739: LIST
72740: LIST
72741: PUSH
72742: LD_INT 2
72744: PUSH
72745: LD_INT 3
72747: PUSH
72748: EMPTY
72749: LIST
72750: LIST
72751: PUSH
72752: LD_INT 1
72754: PUSH
72755: LD_INT 3
72757: PUSH
72758: EMPTY
72759: LIST
72760: LIST
72761: PUSH
72762: LD_INT 1
72764: NEG
72765: PUSH
72766: LD_INT 2
72768: PUSH
72769: EMPTY
72770: LIST
72771: LIST
72772: PUSH
72773: LD_INT 2
72775: NEG
72776: PUSH
72777: LD_INT 1
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: PUSH
72784: EMPTY
72785: LIST
72786: LIST
72787: LIST
72788: LIST
72789: LIST
72790: LIST
72791: LIST
72792: LIST
72793: LIST
72794: LIST
72795: LIST
72796: LIST
72797: LIST
72798: LIST
72799: LIST
72800: LIST
72801: LIST
72802: LIST
72803: LIST
72804: LIST
72805: LIST
72806: LIST
72807: LIST
72808: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
72809: LD_ADDR_VAR 0 27
72813: PUSH
72814: LD_INT 0
72816: PUSH
72817: LD_INT 0
72819: PUSH
72820: EMPTY
72821: LIST
72822: LIST
72823: PUSH
72824: LD_INT 0
72826: PUSH
72827: LD_INT 1
72829: NEG
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: PUSH
72835: LD_INT 1
72837: PUSH
72838: LD_INT 0
72840: PUSH
72841: EMPTY
72842: LIST
72843: LIST
72844: PUSH
72845: LD_INT 1
72847: PUSH
72848: LD_INT 1
72850: PUSH
72851: EMPTY
72852: LIST
72853: LIST
72854: PUSH
72855: LD_INT 0
72857: PUSH
72858: LD_INT 1
72860: PUSH
72861: EMPTY
72862: LIST
72863: LIST
72864: PUSH
72865: LD_INT 1
72867: NEG
72868: PUSH
72869: LD_INT 0
72871: PUSH
72872: EMPTY
72873: LIST
72874: LIST
72875: PUSH
72876: LD_INT 1
72878: NEG
72879: PUSH
72880: LD_INT 1
72882: NEG
72883: PUSH
72884: EMPTY
72885: LIST
72886: LIST
72887: PUSH
72888: LD_INT 1
72890: NEG
72891: PUSH
72892: LD_INT 2
72894: NEG
72895: PUSH
72896: EMPTY
72897: LIST
72898: LIST
72899: PUSH
72900: LD_INT 0
72902: PUSH
72903: LD_INT 2
72905: NEG
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: PUSH
72911: LD_INT 1
72913: PUSH
72914: LD_INT 1
72916: NEG
72917: PUSH
72918: EMPTY
72919: LIST
72920: LIST
72921: PUSH
72922: LD_INT 2
72924: PUSH
72925: LD_INT 0
72927: PUSH
72928: EMPTY
72929: LIST
72930: LIST
72931: PUSH
72932: LD_INT 2
72934: PUSH
72935: LD_INT 1
72937: PUSH
72938: EMPTY
72939: LIST
72940: LIST
72941: PUSH
72942: LD_INT 2
72944: PUSH
72945: LD_INT 2
72947: PUSH
72948: EMPTY
72949: LIST
72950: LIST
72951: PUSH
72952: LD_INT 1
72954: PUSH
72955: LD_INT 2
72957: PUSH
72958: EMPTY
72959: LIST
72960: LIST
72961: PUSH
72962: LD_INT 0
72964: PUSH
72965: LD_INT 2
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: PUSH
72972: LD_INT 1
72974: NEG
72975: PUSH
72976: LD_INT 1
72978: PUSH
72979: EMPTY
72980: LIST
72981: LIST
72982: PUSH
72983: LD_INT 2
72985: NEG
72986: PUSH
72987: LD_INT 0
72989: PUSH
72990: EMPTY
72991: LIST
72992: LIST
72993: PUSH
72994: LD_INT 2
72996: NEG
72997: PUSH
72998: LD_INT 1
73000: NEG
73001: PUSH
73002: EMPTY
73003: LIST
73004: LIST
73005: PUSH
73006: LD_INT 2
73008: NEG
73009: PUSH
73010: LD_INT 2
73012: NEG
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: LD_INT 1
73020: NEG
73021: PUSH
73022: LD_INT 2
73024: PUSH
73025: EMPTY
73026: LIST
73027: LIST
73028: PUSH
73029: LD_INT 2
73031: NEG
73032: PUSH
73033: LD_INT 1
73035: PUSH
73036: EMPTY
73037: LIST
73038: LIST
73039: PUSH
73040: LD_INT 3
73042: NEG
73043: PUSH
73044: LD_INT 1
73046: NEG
73047: PUSH
73048: EMPTY
73049: LIST
73050: LIST
73051: PUSH
73052: LD_INT 3
73054: NEG
73055: PUSH
73056: LD_INT 2
73058: NEG
73059: PUSH
73060: EMPTY
73061: LIST
73062: LIST
73063: PUSH
73064: EMPTY
73065: LIST
73066: LIST
73067: LIST
73068: LIST
73069: LIST
73070: LIST
73071: LIST
73072: LIST
73073: LIST
73074: LIST
73075: LIST
73076: LIST
73077: LIST
73078: LIST
73079: LIST
73080: LIST
73081: LIST
73082: LIST
73083: LIST
73084: LIST
73085: LIST
73086: LIST
73087: LIST
73088: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
73089: LD_ADDR_VAR 0 28
73093: PUSH
73094: LD_INT 0
73096: PUSH
73097: LD_INT 0
73099: PUSH
73100: EMPTY
73101: LIST
73102: LIST
73103: PUSH
73104: LD_INT 0
73106: PUSH
73107: LD_INT 1
73109: NEG
73110: PUSH
73111: EMPTY
73112: LIST
73113: LIST
73114: PUSH
73115: LD_INT 1
73117: PUSH
73118: LD_INT 0
73120: PUSH
73121: EMPTY
73122: LIST
73123: LIST
73124: PUSH
73125: LD_INT 1
73127: PUSH
73128: LD_INT 1
73130: PUSH
73131: EMPTY
73132: LIST
73133: LIST
73134: PUSH
73135: LD_INT 0
73137: PUSH
73138: LD_INT 1
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: PUSH
73145: LD_INT 1
73147: NEG
73148: PUSH
73149: LD_INT 0
73151: PUSH
73152: EMPTY
73153: LIST
73154: LIST
73155: PUSH
73156: LD_INT 1
73158: NEG
73159: PUSH
73160: LD_INT 1
73162: NEG
73163: PUSH
73164: EMPTY
73165: LIST
73166: LIST
73167: PUSH
73168: LD_INT 1
73170: NEG
73171: PUSH
73172: LD_INT 2
73174: NEG
73175: PUSH
73176: EMPTY
73177: LIST
73178: LIST
73179: PUSH
73180: LD_INT 0
73182: PUSH
73183: LD_INT 2
73185: NEG
73186: PUSH
73187: EMPTY
73188: LIST
73189: LIST
73190: PUSH
73191: LD_INT 1
73193: PUSH
73194: LD_INT 1
73196: NEG
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: PUSH
73202: LD_INT 2
73204: PUSH
73205: LD_INT 0
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PUSH
73212: LD_INT 2
73214: PUSH
73215: LD_INT 1
73217: PUSH
73218: EMPTY
73219: LIST
73220: LIST
73221: PUSH
73222: LD_INT 2
73224: PUSH
73225: LD_INT 2
73227: PUSH
73228: EMPTY
73229: LIST
73230: LIST
73231: PUSH
73232: LD_INT 1
73234: PUSH
73235: LD_INT 2
73237: PUSH
73238: EMPTY
73239: LIST
73240: LIST
73241: PUSH
73242: LD_INT 0
73244: PUSH
73245: LD_INT 2
73247: PUSH
73248: EMPTY
73249: LIST
73250: LIST
73251: PUSH
73252: LD_INT 1
73254: NEG
73255: PUSH
73256: LD_INT 1
73258: PUSH
73259: EMPTY
73260: LIST
73261: LIST
73262: PUSH
73263: LD_INT 2
73265: NEG
73266: PUSH
73267: LD_INT 0
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: PUSH
73274: LD_INT 2
73276: NEG
73277: PUSH
73278: LD_INT 1
73280: NEG
73281: PUSH
73282: EMPTY
73283: LIST
73284: LIST
73285: PUSH
73286: LD_INT 2
73288: NEG
73289: PUSH
73290: LD_INT 2
73292: NEG
73293: PUSH
73294: EMPTY
73295: LIST
73296: LIST
73297: PUSH
73298: LD_INT 2
73300: NEG
73301: PUSH
73302: LD_INT 3
73304: NEG
73305: PUSH
73306: EMPTY
73307: LIST
73308: LIST
73309: PUSH
73310: LD_INT 1
73312: NEG
73313: PUSH
73314: LD_INT 3
73316: NEG
73317: PUSH
73318: EMPTY
73319: LIST
73320: LIST
73321: PUSH
73322: LD_INT 3
73324: NEG
73325: PUSH
73326: LD_INT 1
73328: NEG
73329: PUSH
73330: EMPTY
73331: LIST
73332: LIST
73333: PUSH
73334: LD_INT 3
73336: NEG
73337: PUSH
73338: LD_INT 2
73340: NEG
73341: PUSH
73342: EMPTY
73343: LIST
73344: LIST
73345: PUSH
73346: EMPTY
73347: LIST
73348: LIST
73349: LIST
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: LIST
73355: LIST
73356: LIST
73357: LIST
73358: LIST
73359: LIST
73360: LIST
73361: LIST
73362: LIST
73363: LIST
73364: LIST
73365: LIST
73366: LIST
73367: LIST
73368: LIST
73369: LIST
73370: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
73371: LD_ADDR_VAR 0 29
73375: PUSH
73376: LD_INT 0
73378: PUSH
73379: LD_INT 0
73381: PUSH
73382: EMPTY
73383: LIST
73384: LIST
73385: PUSH
73386: LD_INT 0
73388: PUSH
73389: LD_INT 1
73391: NEG
73392: PUSH
73393: EMPTY
73394: LIST
73395: LIST
73396: PUSH
73397: LD_INT 1
73399: PUSH
73400: LD_INT 0
73402: PUSH
73403: EMPTY
73404: LIST
73405: LIST
73406: PUSH
73407: LD_INT 1
73409: PUSH
73410: LD_INT 1
73412: PUSH
73413: EMPTY
73414: LIST
73415: LIST
73416: PUSH
73417: LD_INT 0
73419: PUSH
73420: LD_INT 1
73422: PUSH
73423: EMPTY
73424: LIST
73425: LIST
73426: PUSH
73427: LD_INT 1
73429: NEG
73430: PUSH
73431: LD_INT 0
73433: PUSH
73434: EMPTY
73435: LIST
73436: LIST
73437: PUSH
73438: LD_INT 1
73440: NEG
73441: PUSH
73442: LD_INT 1
73444: NEG
73445: PUSH
73446: EMPTY
73447: LIST
73448: LIST
73449: PUSH
73450: LD_INT 1
73452: NEG
73453: PUSH
73454: LD_INT 2
73456: NEG
73457: PUSH
73458: EMPTY
73459: LIST
73460: LIST
73461: PUSH
73462: LD_INT 0
73464: PUSH
73465: LD_INT 2
73467: NEG
73468: PUSH
73469: EMPTY
73470: LIST
73471: LIST
73472: PUSH
73473: LD_INT 1
73475: PUSH
73476: LD_INT 1
73478: NEG
73479: PUSH
73480: EMPTY
73481: LIST
73482: LIST
73483: PUSH
73484: LD_INT 2
73486: PUSH
73487: LD_INT 0
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: PUSH
73494: LD_INT 2
73496: PUSH
73497: LD_INT 1
73499: PUSH
73500: EMPTY
73501: LIST
73502: LIST
73503: PUSH
73504: LD_INT 1
73506: PUSH
73507: LD_INT 2
73509: PUSH
73510: EMPTY
73511: LIST
73512: LIST
73513: PUSH
73514: LD_INT 0
73516: PUSH
73517: LD_INT 2
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: PUSH
73524: LD_INT 1
73526: NEG
73527: PUSH
73528: LD_INT 1
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: PUSH
73535: LD_INT 2
73537: NEG
73538: PUSH
73539: LD_INT 1
73541: NEG
73542: PUSH
73543: EMPTY
73544: LIST
73545: LIST
73546: PUSH
73547: LD_INT 2
73549: NEG
73550: PUSH
73551: LD_INT 2
73553: NEG
73554: PUSH
73555: EMPTY
73556: LIST
73557: LIST
73558: PUSH
73559: LD_INT 2
73561: NEG
73562: PUSH
73563: LD_INT 3
73565: NEG
73566: PUSH
73567: EMPTY
73568: LIST
73569: LIST
73570: PUSH
73571: LD_INT 2
73573: PUSH
73574: LD_INT 1
73576: NEG
73577: PUSH
73578: EMPTY
73579: LIST
73580: LIST
73581: PUSH
73582: LD_INT 3
73584: PUSH
73585: LD_INT 1
73587: PUSH
73588: EMPTY
73589: LIST
73590: LIST
73591: PUSH
73592: LD_INT 1
73594: PUSH
73595: LD_INT 3
73597: PUSH
73598: EMPTY
73599: LIST
73600: LIST
73601: PUSH
73602: LD_INT 1
73604: NEG
73605: PUSH
73606: LD_INT 2
73608: PUSH
73609: EMPTY
73610: LIST
73611: LIST
73612: PUSH
73613: LD_INT 3
73615: NEG
73616: PUSH
73617: LD_INT 2
73619: NEG
73620: PUSH
73621: EMPTY
73622: LIST
73623: LIST
73624: PUSH
73625: EMPTY
73626: LIST
73627: LIST
73628: LIST
73629: LIST
73630: LIST
73631: LIST
73632: LIST
73633: LIST
73634: LIST
73635: LIST
73636: LIST
73637: LIST
73638: LIST
73639: LIST
73640: LIST
73641: LIST
73642: LIST
73643: LIST
73644: LIST
73645: LIST
73646: LIST
73647: LIST
73648: LIST
73649: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
73650: LD_ADDR_VAR 0 30
73654: PUSH
73655: LD_INT 0
73657: PUSH
73658: LD_INT 0
73660: PUSH
73661: EMPTY
73662: LIST
73663: LIST
73664: PUSH
73665: LD_INT 0
73667: PUSH
73668: LD_INT 1
73670: NEG
73671: PUSH
73672: EMPTY
73673: LIST
73674: LIST
73675: PUSH
73676: LD_INT 1
73678: PUSH
73679: LD_INT 0
73681: PUSH
73682: EMPTY
73683: LIST
73684: LIST
73685: PUSH
73686: LD_INT 1
73688: PUSH
73689: LD_INT 1
73691: PUSH
73692: EMPTY
73693: LIST
73694: LIST
73695: PUSH
73696: LD_INT 0
73698: PUSH
73699: LD_INT 1
73701: PUSH
73702: EMPTY
73703: LIST
73704: LIST
73705: PUSH
73706: LD_INT 1
73708: NEG
73709: PUSH
73710: LD_INT 0
73712: PUSH
73713: EMPTY
73714: LIST
73715: LIST
73716: PUSH
73717: LD_INT 1
73719: NEG
73720: PUSH
73721: LD_INT 1
73723: NEG
73724: PUSH
73725: EMPTY
73726: LIST
73727: LIST
73728: PUSH
73729: LD_INT 1
73731: NEG
73732: PUSH
73733: LD_INT 2
73735: NEG
73736: PUSH
73737: EMPTY
73738: LIST
73739: LIST
73740: PUSH
73741: LD_INT 0
73743: PUSH
73744: LD_INT 2
73746: NEG
73747: PUSH
73748: EMPTY
73749: LIST
73750: LIST
73751: PUSH
73752: LD_INT 1
73754: PUSH
73755: LD_INT 1
73757: NEG
73758: PUSH
73759: EMPTY
73760: LIST
73761: LIST
73762: PUSH
73763: LD_INT 2
73765: PUSH
73766: LD_INT 0
73768: PUSH
73769: EMPTY
73770: LIST
73771: LIST
73772: PUSH
73773: LD_INT 2
73775: PUSH
73776: LD_INT 1
73778: PUSH
73779: EMPTY
73780: LIST
73781: LIST
73782: PUSH
73783: LD_INT 2
73785: PUSH
73786: LD_INT 2
73788: PUSH
73789: EMPTY
73790: LIST
73791: LIST
73792: PUSH
73793: LD_INT 1
73795: PUSH
73796: LD_INT 2
73798: PUSH
73799: EMPTY
73800: LIST
73801: LIST
73802: PUSH
73803: LD_INT 1
73805: NEG
73806: PUSH
73807: LD_INT 1
73809: PUSH
73810: EMPTY
73811: LIST
73812: LIST
73813: PUSH
73814: LD_INT 2
73816: NEG
73817: PUSH
73818: LD_INT 0
73820: PUSH
73821: EMPTY
73822: LIST
73823: LIST
73824: PUSH
73825: LD_INT 2
73827: NEG
73828: PUSH
73829: LD_INT 1
73831: NEG
73832: PUSH
73833: EMPTY
73834: LIST
73835: LIST
73836: PUSH
73837: LD_INT 1
73839: NEG
73840: PUSH
73841: LD_INT 3
73843: NEG
73844: PUSH
73845: EMPTY
73846: LIST
73847: LIST
73848: PUSH
73849: LD_INT 1
73851: PUSH
73852: LD_INT 2
73854: NEG
73855: PUSH
73856: EMPTY
73857: LIST
73858: LIST
73859: PUSH
73860: LD_INT 3
73862: PUSH
73863: LD_INT 2
73865: PUSH
73866: EMPTY
73867: LIST
73868: LIST
73869: PUSH
73870: LD_INT 2
73872: PUSH
73873: LD_INT 3
73875: PUSH
73876: EMPTY
73877: LIST
73878: LIST
73879: PUSH
73880: LD_INT 2
73882: NEG
73883: PUSH
73884: LD_INT 1
73886: PUSH
73887: EMPTY
73888: LIST
73889: LIST
73890: PUSH
73891: LD_INT 3
73893: NEG
73894: PUSH
73895: LD_INT 1
73897: NEG
73898: PUSH
73899: EMPTY
73900: LIST
73901: LIST
73902: PUSH
73903: EMPTY
73904: LIST
73905: LIST
73906: LIST
73907: LIST
73908: LIST
73909: LIST
73910: LIST
73911: LIST
73912: LIST
73913: LIST
73914: LIST
73915: LIST
73916: LIST
73917: LIST
73918: LIST
73919: LIST
73920: LIST
73921: LIST
73922: LIST
73923: LIST
73924: LIST
73925: LIST
73926: LIST
73927: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
73928: LD_ADDR_VAR 0 31
73932: PUSH
73933: LD_INT 0
73935: PUSH
73936: LD_INT 0
73938: PUSH
73939: EMPTY
73940: LIST
73941: LIST
73942: PUSH
73943: LD_INT 0
73945: PUSH
73946: LD_INT 1
73948: NEG
73949: PUSH
73950: EMPTY
73951: LIST
73952: LIST
73953: PUSH
73954: LD_INT 1
73956: PUSH
73957: LD_INT 0
73959: PUSH
73960: EMPTY
73961: LIST
73962: LIST
73963: PUSH
73964: LD_INT 1
73966: PUSH
73967: LD_INT 1
73969: PUSH
73970: EMPTY
73971: LIST
73972: LIST
73973: PUSH
73974: LD_INT 0
73976: PUSH
73977: LD_INT 1
73979: PUSH
73980: EMPTY
73981: LIST
73982: LIST
73983: PUSH
73984: LD_INT 1
73986: NEG
73987: PUSH
73988: LD_INT 0
73990: PUSH
73991: EMPTY
73992: LIST
73993: LIST
73994: PUSH
73995: LD_INT 1
73997: NEG
73998: PUSH
73999: LD_INT 1
74001: NEG
74002: PUSH
74003: EMPTY
74004: LIST
74005: LIST
74006: PUSH
74007: LD_INT 1
74009: NEG
74010: PUSH
74011: LD_INT 2
74013: NEG
74014: PUSH
74015: EMPTY
74016: LIST
74017: LIST
74018: PUSH
74019: LD_INT 1
74021: PUSH
74022: LD_INT 1
74024: NEG
74025: PUSH
74026: EMPTY
74027: LIST
74028: LIST
74029: PUSH
74030: LD_INT 2
74032: PUSH
74033: LD_INT 0
74035: PUSH
74036: EMPTY
74037: LIST
74038: LIST
74039: PUSH
74040: LD_INT 2
74042: PUSH
74043: LD_INT 1
74045: PUSH
74046: EMPTY
74047: LIST
74048: LIST
74049: PUSH
74050: LD_INT 2
74052: PUSH
74053: LD_INT 2
74055: PUSH
74056: EMPTY
74057: LIST
74058: LIST
74059: PUSH
74060: LD_INT 1
74062: PUSH
74063: LD_INT 2
74065: PUSH
74066: EMPTY
74067: LIST
74068: LIST
74069: PUSH
74070: LD_INT 0
74072: PUSH
74073: LD_INT 2
74075: PUSH
74076: EMPTY
74077: LIST
74078: LIST
74079: PUSH
74080: LD_INT 1
74082: NEG
74083: PUSH
74084: LD_INT 1
74086: PUSH
74087: EMPTY
74088: LIST
74089: LIST
74090: PUSH
74091: LD_INT 2
74093: NEG
74094: PUSH
74095: LD_INT 1
74097: NEG
74098: PUSH
74099: EMPTY
74100: LIST
74101: LIST
74102: PUSH
74103: LD_INT 2
74105: NEG
74106: PUSH
74107: LD_INT 2
74109: NEG
74110: PUSH
74111: EMPTY
74112: LIST
74113: LIST
74114: PUSH
74115: LD_INT 2
74117: NEG
74118: PUSH
74119: LD_INT 3
74121: NEG
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: PUSH
74127: LD_INT 2
74129: PUSH
74130: LD_INT 1
74132: NEG
74133: PUSH
74134: EMPTY
74135: LIST
74136: LIST
74137: PUSH
74138: LD_INT 3
74140: PUSH
74141: LD_INT 1
74143: PUSH
74144: EMPTY
74145: LIST
74146: LIST
74147: PUSH
74148: LD_INT 1
74150: PUSH
74151: LD_INT 3
74153: PUSH
74154: EMPTY
74155: LIST
74156: LIST
74157: PUSH
74158: LD_INT 1
74160: NEG
74161: PUSH
74162: LD_INT 2
74164: PUSH
74165: EMPTY
74166: LIST
74167: LIST
74168: PUSH
74169: LD_INT 3
74171: NEG
74172: PUSH
74173: LD_INT 2
74175: NEG
74176: PUSH
74177: EMPTY
74178: LIST
74179: LIST
74180: PUSH
74181: EMPTY
74182: LIST
74183: LIST
74184: LIST
74185: LIST
74186: LIST
74187: LIST
74188: LIST
74189: LIST
74190: LIST
74191: LIST
74192: LIST
74193: LIST
74194: LIST
74195: LIST
74196: LIST
74197: LIST
74198: LIST
74199: LIST
74200: LIST
74201: LIST
74202: LIST
74203: LIST
74204: LIST
74205: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74206: LD_ADDR_VAR 0 32
74210: PUSH
74211: LD_INT 0
74213: PUSH
74214: LD_INT 0
74216: PUSH
74217: EMPTY
74218: LIST
74219: LIST
74220: PUSH
74221: LD_INT 0
74223: PUSH
74224: LD_INT 1
74226: NEG
74227: PUSH
74228: EMPTY
74229: LIST
74230: LIST
74231: PUSH
74232: LD_INT 1
74234: PUSH
74235: LD_INT 0
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: PUSH
74242: LD_INT 1
74244: PUSH
74245: LD_INT 1
74247: PUSH
74248: EMPTY
74249: LIST
74250: LIST
74251: PUSH
74252: LD_INT 0
74254: PUSH
74255: LD_INT 1
74257: PUSH
74258: EMPTY
74259: LIST
74260: LIST
74261: PUSH
74262: LD_INT 1
74264: NEG
74265: PUSH
74266: LD_INT 0
74268: PUSH
74269: EMPTY
74270: LIST
74271: LIST
74272: PUSH
74273: LD_INT 1
74275: NEG
74276: PUSH
74277: LD_INT 1
74279: NEG
74280: PUSH
74281: EMPTY
74282: LIST
74283: LIST
74284: PUSH
74285: LD_INT 1
74287: NEG
74288: PUSH
74289: LD_INT 2
74291: NEG
74292: PUSH
74293: EMPTY
74294: LIST
74295: LIST
74296: PUSH
74297: LD_INT 0
74299: PUSH
74300: LD_INT 2
74302: NEG
74303: PUSH
74304: EMPTY
74305: LIST
74306: LIST
74307: PUSH
74308: LD_INT 1
74310: PUSH
74311: LD_INT 1
74313: NEG
74314: PUSH
74315: EMPTY
74316: LIST
74317: LIST
74318: PUSH
74319: LD_INT 2
74321: PUSH
74322: LD_INT 1
74324: PUSH
74325: EMPTY
74326: LIST
74327: LIST
74328: PUSH
74329: LD_INT 2
74331: PUSH
74332: LD_INT 2
74334: PUSH
74335: EMPTY
74336: LIST
74337: LIST
74338: PUSH
74339: LD_INT 1
74341: PUSH
74342: LD_INT 2
74344: PUSH
74345: EMPTY
74346: LIST
74347: LIST
74348: PUSH
74349: LD_INT 0
74351: PUSH
74352: LD_INT 2
74354: PUSH
74355: EMPTY
74356: LIST
74357: LIST
74358: PUSH
74359: LD_INT 1
74361: NEG
74362: PUSH
74363: LD_INT 1
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: PUSH
74370: LD_INT 2
74372: NEG
74373: PUSH
74374: LD_INT 0
74376: PUSH
74377: EMPTY
74378: LIST
74379: LIST
74380: PUSH
74381: LD_INT 2
74383: NEG
74384: PUSH
74385: LD_INT 1
74387: NEG
74388: PUSH
74389: EMPTY
74390: LIST
74391: LIST
74392: PUSH
74393: LD_INT 1
74395: NEG
74396: PUSH
74397: LD_INT 3
74399: NEG
74400: PUSH
74401: EMPTY
74402: LIST
74403: LIST
74404: PUSH
74405: LD_INT 1
74407: PUSH
74408: LD_INT 2
74410: NEG
74411: PUSH
74412: EMPTY
74413: LIST
74414: LIST
74415: PUSH
74416: LD_INT 3
74418: PUSH
74419: LD_INT 2
74421: PUSH
74422: EMPTY
74423: LIST
74424: LIST
74425: PUSH
74426: LD_INT 2
74428: PUSH
74429: LD_INT 3
74431: PUSH
74432: EMPTY
74433: LIST
74434: LIST
74435: PUSH
74436: LD_INT 2
74438: NEG
74439: PUSH
74440: LD_INT 1
74442: PUSH
74443: EMPTY
74444: LIST
74445: LIST
74446: PUSH
74447: LD_INT 3
74449: NEG
74450: PUSH
74451: LD_INT 1
74453: NEG
74454: PUSH
74455: EMPTY
74456: LIST
74457: LIST
74458: PUSH
74459: EMPTY
74460: LIST
74461: LIST
74462: LIST
74463: LIST
74464: LIST
74465: LIST
74466: LIST
74467: LIST
74468: LIST
74469: LIST
74470: LIST
74471: LIST
74472: LIST
74473: LIST
74474: LIST
74475: LIST
74476: LIST
74477: LIST
74478: LIST
74479: LIST
74480: LIST
74481: LIST
74482: LIST
74483: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
74484: LD_ADDR_VAR 0 33
74488: PUSH
74489: LD_INT 0
74491: PUSH
74492: LD_INT 0
74494: PUSH
74495: EMPTY
74496: LIST
74497: LIST
74498: PUSH
74499: LD_INT 0
74501: PUSH
74502: LD_INT 1
74504: NEG
74505: PUSH
74506: EMPTY
74507: LIST
74508: LIST
74509: PUSH
74510: LD_INT 1
74512: PUSH
74513: LD_INT 0
74515: PUSH
74516: EMPTY
74517: LIST
74518: LIST
74519: PUSH
74520: LD_INT 1
74522: PUSH
74523: LD_INT 1
74525: PUSH
74526: EMPTY
74527: LIST
74528: LIST
74529: PUSH
74530: LD_INT 0
74532: PUSH
74533: LD_INT 1
74535: PUSH
74536: EMPTY
74537: LIST
74538: LIST
74539: PUSH
74540: LD_INT 1
74542: NEG
74543: PUSH
74544: LD_INT 0
74546: PUSH
74547: EMPTY
74548: LIST
74549: LIST
74550: PUSH
74551: LD_INT 1
74553: NEG
74554: PUSH
74555: LD_INT 1
74557: NEG
74558: PUSH
74559: EMPTY
74560: LIST
74561: LIST
74562: PUSH
74563: LD_INT 1
74565: NEG
74566: PUSH
74567: LD_INT 2
74569: NEG
74570: PUSH
74571: EMPTY
74572: LIST
74573: LIST
74574: PUSH
74575: LD_INT 1
74577: PUSH
74578: LD_INT 1
74580: NEG
74581: PUSH
74582: EMPTY
74583: LIST
74584: LIST
74585: PUSH
74586: LD_INT 2
74588: PUSH
74589: LD_INT 0
74591: PUSH
74592: EMPTY
74593: LIST
74594: LIST
74595: PUSH
74596: LD_INT 2
74598: PUSH
74599: LD_INT 1
74601: PUSH
74602: EMPTY
74603: LIST
74604: LIST
74605: PUSH
74606: LD_INT 1
74608: PUSH
74609: LD_INT 2
74611: PUSH
74612: EMPTY
74613: LIST
74614: LIST
74615: PUSH
74616: LD_INT 0
74618: PUSH
74619: LD_INT 2
74621: PUSH
74622: EMPTY
74623: LIST
74624: LIST
74625: PUSH
74626: LD_INT 1
74628: NEG
74629: PUSH
74630: LD_INT 1
74632: PUSH
74633: EMPTY
74634: LIST
74635: LIST
74636: PUSH
74637: LD_INT 2
74639: NEG
74640: PUSH
74641: LD_INT 0
74643: PUSH
74644: EMPTY
74645: LIST
74646: LIST
74647: PUSH
74648: LD_INT 2
74650: NEG
74651: PUSH
74652: LD_INT 1
74654: NEG
74655: PUSH
74656: EMPTY
74657: LIST
74658: LIST
74659: PUSH
74660: LD_INT 2
74662: NEG
74663: PUSH
74664: LD_INT 2
74666: NEG
74667: PUSH
74668: EMPTY
74669: LIST
74670: LIST
74671: PUSH
74672: LD_INT 2
74674: NEG
74675: PUSH
74676: LD_INT 3
74678: NEG
74679: PUSH
74680: EMPTY
74681: LIST
74682: LIST
74683: PUSH
74684: LD_INT 2
74686: PUSH
74687: LD_INT 1
74689: NEG
74690: PUSH
74691: EMPTY
74692: LIST
74693: LIST
74694: PUSH
74695: LD_INT 3
74697: PUSH
74698: LD_INT 1
74700: PUSH
74701: EMPTY
74702: LIST
74703: LIST
74704: PUSH
74705: LD_INT 1
74707: PUSH
74708: LD_INT 3
74710: PUSH
74711: EMPTY
74712: LIST
74713: LIST
74714: PUSH
74715: LD_INT 1
74717: NEG
74718: PUSH
74719: LD_INT 2
74721: PUSH
74722: EMPTY
74723: LIST
74724: LIST
74725: PUSH
74726: LD_INT 3
74728: NEG
74729: PUSH
74730: LD_INT 2
74732: NEG
74733: PUSH
74734: EMPTY
74735: LIST
74736: LIST
74737: PUSH
74738: EMPTY
74739: LIST
74740: LIST
74741: LIST
74742: LIST
74743: LIST
74744: LIST
74745: LIST
74746: LIST
74747: LIST
74748: LIST
74749: LIST
74750: LIST
74751: LIST
74752: LIST
74753: LIST
74754: LIST
74755: LIST
74756: LIST
74757: LIST
74758: LIST
74759: LIST
74760: LIST
74761: LIST
74762: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74763: LD_ADDR_VAR 0 34
74767: PUSH
74768: LD_INT 0
74770: PUSH
74771: LD_INT 0
74773: PUSH
74774: EMPTY
74775: LIST
74776: LIST
74777: PUSH
74778: LD_INT 0
74780: PUSH
74781: LD_INT 1
74783: NEG
74784: PUSH
74785: EMPTY
74786: LIST
74787: LIST
74788: PUSH
74789: LD_INT 1
74791: PUSH
74792: LD_INT 0
74794: PUSH
74795: EMPTY
74796: LIST
74797: LIST
74798: PUSH
74799: LD_INT 1
74801: PUSH
74802: LD_INT 1
74804: PUSH
74805: EMPTY
74806: LIST
74807: LIST
74808: PUSH
74809: LD_INT 0
74811: PUSH
74812: LD_INT 1
74814: PUSH
74815: EMPTY
74816: LIST
74817: LIST
74818: PUSH
74819: LD_INT 1
74821: NEG
74822: PUSH
74823: LD_INT 0
74825: PUSH
74826: EMPTY
74827: LIST
74828: LIST
74829: PUSH
74830: LD_INT 1
74832: NEG
74833: PUSH
74834: LD_INT 1
74836: NEG
74837: PUSH
74838: EMPTY
74839: LIST
74840: LIST
74841: PUSH
74842: LD_INT 1
74844: NEG
74845: PUSH
74846: LD_INT 2
74848: NEG
74849: PUSH
74850: EMPTY
74851: LIST
74852: LIST
74853: PUSH
74854: LD_INT 0
74856: PUSH
74857: LD_INT 2
74859: NEG
74860: PUSH
74861: EMPTY
74862: LIST
74863: LIST
74864: PUSH
74865: LD_INT 1
74867: PUSH
74868: LD_INT 1
74870: NEG
74871: PUSH
74872: EMPTY
74873: LIST
74874: LIST
74875: PUSH
74876: LD_INT 2
74878: PUSH
74879: LD_INT 1
74881: PUSH
74882: EMPTY
74883: LIST
74884: LIST
74885: PUSH
74886: LD_INT 2
74888: PUSH
74889: LD_INT 2
74891: PUSH
74892: EMPTY
74893: LIST
74894: LIST
74895: PUSH
74896: LD_INT 1
74898: PUSH
74899: LD_INT 2
74901: PUSH
74902: EMPTY
74903: LIST
74904: LIST
74905: PUSH
74906: LD_INT 1
74908: NEG
74909: PUSH
74910: LD_INT 1
74912: PUSH
74913: EMPTY
74914: LIST
74915: LIST
74916: PUSH
74917: LD_INT 2
74919: NEG
74920: PUSH
74921: LD_INT 0
74923: PUSH
74924: EMPTY
74925: LIST
74926: LIST
74927: PUSH
74928: LD_INT 2
74930: NEG
74931: PUSH
74932: LD_INT 1
74934: NEG
74935: PUSH
74936: EMPTY
74937: LIST
74938: LIST
74939: PUSH
74940: LD_INT 2
74942: NEG
74943: PUSH
74944: LD_INT 2
74946: NEG
74947: PUSH
74948: EMPTY
74949: LIST
74950: LIST
74951: PUSH
74952: LD_INT 1
74954: NEG
74955: PUSH
74956: LD_INT 3
74958: NEG
74959: PUSH
74960: EMPTY
74961: LIST
74962: LIST
74963: PUSH
74964: LD_INT 1
74966: PUSH
74967: LD_INT 2
74969: NEG
74970: PUSH
74971: EMPTY
74972: LIST
74973: LIST
74974: PUSH
74975: LD_INT 3
74977: PUSH
74978: LD_INT 2
74980: PUSH
74981: EMPTY
74982: LIST
74983: LIST
74984: PUSH
74985: LD_INT 2
74987: PUSH
74988: LD_INT 3
74990: PUSH
74991: EMPTY
74992: LIST
74993: LIST
74994: PUSH
74995: LD_INT 2
74997: NEG
74998: PUSH
74999: LD_INT 1
75001: PUSH
75002: EMPTY
75003: LIST
75004: LIST
75005: PUSH
75006: LD_INT 3
75008: NEG
75009: PUSH
75010: LD_INT 1
75012: NEG
75013: PUSH
75014: EMPTY
75015: LIST
75016: LIST
75017: PUSH
75018: EMPTY
75019: LIST
75020: LIST
75021: LIST
75022: LIST
75023: LIST
75024: LIST
75025: LIST
75026: LIST
75027: LIST
75028: LIST
75029: LIST
75030: LIST
75031: LIST
75032: LIST
75033: LIST
75034: LIST
75035: LIST
75036: LIST
75037: LIST
75038: LIST
75039: LIST
75040: LIST
75041: LIST
75042: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
75043: LD_ADDR_VAR 0 35
75047: PUSH
75048: LD_INT 0
75050: PUSH
75051: LD_INT 0
75053: PUSH
75054: EMPTY
75055: LIST
75056: LIST
75057: PUSH
75058: LD_INT 0
75060: PUSH
75061: LD_INT 1
75063: NEG
75064: PUSH
75065: EMPTY
75066: LIST
75067: LIST
75068: PUSH
75069: LD_INT 1
75071: PUSH
75072: LD_INT 0
75074: PUSH
75075: EMPTY
75076: LIST
75077: LIST
75078: PUSH
75079: LD_INT 1
75081: PUSH
75082: LD_INT 1
75084: PUSH
75085: EMPTY
75086: LIST
75087: LIST
75088: PUSH
75089: LD_INT 0
75091: PUSH
75092: LD_INT 1
75094: PUSH
75095: EMPTY
75096: LIST
75097: LIST
75098: PUSH
75099: LD_INT 1
75101: NEG
75102: PUSH
75103: LD_INT 0
75105: PUSH
75106: EMPTY
75107: LIST
75108: LIST
75109: PUSH
75110: LD_INT 1
75112: NEG
75113: PUSH
75114: LD_INT 1
75116: NEG
75117: PUSH
75118: EMPTY
75119: LIST
75120: LIST
75121: PUSH
75122: LD_INT 2
75124: PUSH
75125: LD_INT 1
75127: PUSH
75128: EMPTY
75129: LIST
75130: LIST
75131: PUSH
75132: LD_INT 2
75134: NEG
75135: PUSH
75136: LD_INT 1
75138: NEG
75139: PUSH
75140: EMPTY
75141: LIST
75142: LIST
75143: PUSH
75144: EMPTY
75145: LIST
75146: LIST
75147: LIST
75148: LIST
75149: LIST
75150: LIST
75151: LIST
75152: LIST
75153: LIST
75154: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
75155: LD_ADDR_VAR 0 36
75159: PUSH
75160: LD_INT 0
75162: PUSH
75163: LD_INT 0
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: PUSH
75170: LD_INT 0
75172: PUSH
75173: LD_INT 1
75175: NEG
75176: PUSH
75177: EMPTY
75178: LIST
75179: LIST
75180: PUSH
75181: LD_INT 1
75183: PUSH
75184: LD_INT 0
75186: PUSH
75187: EMPTY
75188: LIST
75189: LIST
75190: PUSH
75191: LD_INT 1
75193: PUSH
75194: LD_INT 1
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: PUSH
75201: LD_INT 0
75203: PUSH
75204: LD_INT 1
75206: PUSH
75207: EMPTY
75208: LIST
75209: LIST
75210: PUSH
75211: LD_INT 1
75213: NEG
75214: PUSH
75215: LD_INT 0
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: PUSH
75222: LD_INT 1
75224: NEG
75225: PUSH
75226: LD_INT 1
75228: NEG
75229: PUSH
75230: EMPTY
75231: LIST
75232: LIST
75233: PUSH
75234: LD_INT 1
75236: NEG
75237: PUSH
75238: LD_INT 2
75240: NEG
75241: PUSH
75242: EMPTY
75243: LIST
75244: LIST
75245: PUSH
75246: LD_INT 1
75248: PUSH
75249: LD_INT 2
75251: PUSH
75252: EMPTY
75253: LIST
75254: LIST
75255: PUSH
75256: EMPTY
75257: LIST
75258: LIST
75259: LIST
75260: LIST
75261: LIST
75262: LIST
75263: LIST
75264: LIST
75265: LIST
75266: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
75267: LD_ADDR_VAR 0 37
75271: PUSH
75272: LD_INT 0
75274: PUSH
75275: LD_INT 0
75277: PUSH
75278: EMPTY
75279: LIST
75280: LIST
75281: PUSH
75282: LD_INT 0
75284: PUSH
75285: LD_INT 1
75287: NEG
75288: PUSH
75289: EMPTY
75290: LIST
75291: LIST
75292: PUSH
75293: LD_INT 1
75295: PUSH
75296: LD_INT 0
75298: PUSH
75299: EMPTY
75300: LIST
75301: LIST
75302: PUSH
75303: LD_INT 1
75305: PUSH
75306: LD_INT 1
75308: PUSH
75309: EMPTY
75310: LIST
75311: LIST
75312: PUSH
75313: LD_INT 0
75315: PUSH
75316: LD_INT 1
75318: PUSH
75319: EMPTY
75320: LIST
75321: LIST
75322: PUSH
75323: LD_INT 1
75325: NEG
75326: PUSH
75327: LD_INT 0
75329: PUSH
75330: EMPTY
75331: LIST
75332: LIST
75333: PUSH
75334: LD_INT 1
75336: NEG
75337: PUSH
75338: LD_INT 1
75340: NEG
75341: PUSH
75342: EMPTY
75343: LIST
75344: LIST
75345: PUSH
75346: LD_INT 1
75348: PUSH
75349: LD_INT 1
75351: NEG
75352: PUSH
75353: EMPTY
75354: LIST
75355: LIST
75356: PUSH
75357: LD_INT 1
75359: NEG
75360: PUSH
75361: LD_INT 1
75363: PUSH
75364: EMPTY
75365: LIST
75366: LIST
75367: PUSH
75368: EMPTY
75369: LIST
75370: LIST
75371: LIST
75372: LIST
75373: LIST
75374: LIST
75375: LIST
75376: LIST
75377: LIST
75378: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
75379: LD_ADDR_VAR 0 38
75383: PUSH
75384: LD_INT 0
75386: PUSH
75387: LD_INT 0
75389: PUSH
75390: EMPTY
75391: LIST
75392: LIST
75393: PUSH
75394: LD_INT 0
75396: PUSH
75397: LD_INT 1
75399: NEG
75400: PUSH
75401: EMPTY
75402: LIST
75403: LIST
75404: PUSH
75405: LD_INT 1
75407: PUSH
75408: LD_INT 0
75410: PUSH
75411: EMPTY
75412: LIST
75413: LIST
75414: PUSH
75415: LD_INT 1
75417: PUSH
75418: LD_INT 1
75420: PUSH
75421: EMPTY
75422: LIST
75423: LIST
75424: PUSH
75425: LD_INT 0
75427: PUSH
75428: LD_INT 1
75430: PUSH
75431: EMPTY
75432: LIST
75433: LIST
75434: PUSH
75435: LD_INT 1
75437: NEG
75438: PUSH
75439: LD_INT 0
75441: PUSH
75442: EMPTY
75443: LIST
75444: LIST
75445: PUSH
75446: LD_INT 1
75448: NEG
75449: PUSH
75450: LD_INT 1
75452: NEG
75453: PUSH
75454: EMPTY
75455: LIST
75456: LIST
75457: PUSH
75458: LD_INT 2
75460: PUSH
75461: LD_INT 1
75463: PUSH
75464: EMPTY
75465: LIST
75466: LIST
75467: PUSH
75468: LD_INT 2
75470: NEG
75471: PUSH
75472: LD_INT 1
75474: NEG
75475: PUSH
75476: EMPTY
75477: LIST
75478: LIST
75479: PUSH
75480: EMPTY
75481: LIST
75482: LIST
75483: LIST
75484: LIST
75485: LIST
75486: LIST
75487: LIST
75488: LIST
75489: LIST
75490: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
75491: LD_ADDR_VAR 0 39
75495: PUSH
75496: LD_INT 0
75498: PUSH
75499: LD_INT 0
75501: PUSH
75502: EMPTY
75503: LIST
75504: LIST
75505: PUSH
75506: LD_INT 0
75508: PUSH
75509: LD_INT 1
75511: NEG
75512: PUSH
75513: EMPTY
75514: LIST
75515: LIST
75516: PUSH
75517: LD_INT 1
75519: PUSH
75520: LD_INT 0
75522: PUSH
75523: EMPTY
75524: LIST
75525: LIST
75526: PUSH
75527: LD_INT 1
75529: PUSH
75530: LD_INT 1
75532: PUSH
75533: EMPTY
75534: LIST
75535: LIST
75536: PUSH
75537: LD_INT 0
75539: PUSH
75540: LD_INT 1
75542: PUSH
75543: EMPTY
75544: LIST
75545: LIST
75546: PUSH
75547: LD_INT 1
75549: NEG
75550: PUSH
75551: LD_INT 0
75553: PUSH
75554: EMPTY
75555: LIST
75556: LIST
75557: PUSH
75558: LD_INT 1
75560: NEG
75561: PUSH
75562: LD_INT 1
75564: NEG
75565: PUSH
75566: EMPTY
75567: LIST
75568: LIST
75569: PUSH
75570: LD_INT 1
75572: NEG
75573: PUSH
75574: LD_INT 2
75576: NEG
75577: PUSH
75578: EMPTY
75579: LIST
75580: LIST
75581: PUSH
75582: LD_INT 1
75584: PUSH
75585: LD_INT 2
75587: PUSH
75588: EMPTY
75589: LIST
75590: LIST
75591: PUSH
75592: EMPTY
75593: LIST
75594: LIST
75595: LIST
75596: LIST
75597: LIST
75598: LIST
75599: LIST
75600: LIST
75601: LIST
75602: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
75603: LD_ADDR_VAR 0 40
75607: PUSH
75608: LD_INT 0
75610: PUSH
75611: LD_INT 0
75613: PUSH
75614: EMPTY
75615: LIST
75616: LIST
75617: PUSH
75618: LD_INT 0
75620: PUSH
75621: LD_INT 1
75623: NEG
75624: PUSH
75625: EMPTY
75626: LIST
75627: LIST
75628: PUSH
75629: LD_INT 1
75631: PUSH
75632: LD_INT 0
75634: PUSH
75635: EMPTY
75636: LIST
75637: LIST
75638: PUSH
75639: LD_INT 1
75641: PUSH
75642: LD_INT 1
75644: PUSH
75645: EMPTY
75646: LIST
75647: LIST
75648: PUSH
75649: LD_INT 0
75651: PUSH
75652: LD_INT 1
75654: PUSH
75655: EMPTY
75656: LIST
75657: LIST
75658: PUSH
75659: LD_INT 1
75661: NEG
75662: PUSH
75663: LD_INT 0
75665: PUSH
75666: EMPTY
75667: LIST
75668: LIST
75669: PUSH
75670: LD_INT 1
75672: NEG
75673: PUSH
75674: LD_INT 1
75676: NEG
75677: PUSH
75678: EMPTY
75679: LIST
75680: LIST
75681: PUSH
75682: LD_INT 1
75684: PUSH
75685: LD_INT 1
75687: NEG
75688: PUSH
75689: EMPTY
75690: LIST
75691: LIST
75692: PUSH
75693: LD_INT 1
75695: NEG
75696: PUSH
75697: LD_INT 1
75699: PUSH
75700: EMPTY
75701: LIST
75702: LIST
75703: PUSH
75704: EMPTY
75705: LIST
75706: LIST
75707: LIST
75708: LIST
75709: LIST
75710: LIST
75711: LIST
75712: LIST
75713: LIST
75714: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75715: LD_ADDR_VAR 0 41
75719: PUSH
75720: LD_INT 0
75722: PUSH
75723: LD_INT 0
75725: PUSH
75726: EMPTY
75727: LIST
75728: LIST
75729: PUSH
75730: LD_INT 0
75732: PUSH
75733: LD_INT 1
75735: NEG
75736: PUSH
75737: EMPTY
75738: LIST
75739: LIST
75740: PUSH
75741: LD_INT 1
75743: PUSH
75744: LD_INT 0
75746: PUSH
75747: EMPTY
75748: LIST
75749: LIST
75750: PUSH
75751: LD_INT 1
75753: PUSH
75754: LD_INT 1
75756: PUSH
75757: EMPTY
75758: LIST
75759: LIST
75760: PUSH
75761: LD_INT 0
75763: PUSH
75764: LD_INT 1
75766: PUSH
75767: EMPTY
75768: LIST
75769: LIST
75770: PUSH
75771: LD_INT 1
75773: NEG
75774: PUSH
75775: LD_INT 0
75777: PUSH
75778: EMPTY
75779: LIST
75780: LIST
75781: PUSH
75782: LD_INT 1
75784: NEG
75785: PUSH
75786: LD_INT 1
75788: NEG
75789: PUSH
75790: EMPTY
75791: LIST
75792: LIST
75793: PUSH
75794: LD_INT 1
75796: NEG
75797: PUSH
75798: LD_INT 2
75800: NEG
75801: PUSH
75802: EMPTY
75803: LIST
75804: LIST
75805: PUSH
75806: LD_INT 1
75808: PUSH
75809: LD_INT 1
75811: NEG
75812: PUSH
75813: EMPTY
75814: LIST
75815: LIST
75816: PUSH
75817: LD_INT 2
75819: PUSH
75820: LD_INT 0
75822: PUSH
75823: EMPTY
75824: LIST
75825: LIST
75826: PUSH
75827: LD_INT 2
75829: PUSH
75830: LD_INT 1
75832: PUSH
75833: EMPTY
75834: LIST
75835: LIST
75836: PUSH
75837: LD_INT 2
75839: PUSH
75840: LD_INT 2
75842: PUSH
75843: EMPTY
75844: LIST
75845: LIST
75846: PUSH
75847: LD_INT 1
75849: PUSH
75850: LD_INT 2
75852: PUSH
75853: EMPTY
75854: LIST
75855: LIST
75856: PUSH
75857: LD_INT 1
75859: NEG
75860: PUSH
75861: LD_INT 1
75863: PUSH
75864: EMPTY
75865: LIST
75866: LIST
75867: PUSH
75868: LD_INT 2
75870: NEG
75871: PUSH
75872: LD_INT 0
75874: PUSH
75875: EMPTY
75876: LIST
75877: LIST
75878: PUSH
75879: LD_INT 2
75881: NEG
75882: PUSH
75883: LD_INT 1
75885: NEG
75886: PUSH
75887: EMPTY
75888: LIST
75889: LIST
75890: PUSH
75891: LD_INT 2
75893: NEG
75894: PUSH
75895: LD_INT 2
75897: NEG
75898: PUSH
75899: EMPTY
75900: LIST
75901: LIST
75902: PUSH
75903: LD_INT 2
75905: NEG
75906: PUSH
75907: LD_INT 3
75909: NEG
75910: PUSH
75911: EMPTY
75912: LIST
75913: LIST
75914: PUSH
75915: LD_INT 2
75917: PUSH
75918: LD_INT 1
75920: NEG
75921: PUSH
75922: EMPTY
75923: LIST
75924: LIST
75925: PUSH
75926: LD_INT 3
75928: PUSH
75929: LD_INT 0
75931: PUSH
75932: EMPTY
75933: LIST
75934: LIST
75935: PUSH
75936: LD_INT 3
75938: PUSH
75939: LD_INT 1
75941: PUSH
75942: EMPTY
75943: LIST
75944: LIST
75945: PUSH
75946: LD_INT 3
75948: PUSH
75949: LD_INT 2
75951: PUSH
75952: EMPTY
75953: LIST
75954: LIST
75955: PUSH
75956: LD_INT 3
75958: PUSH
75959: LD_INT 3
75961: PUSH
75962: EMPTY
75963: LIST
75964: LIST
75965: PUSH
75966: LD_INT 2
75968: PUSH
75969: LD_INT 3
75971: PUSH
75972: EMPTY
75973: LIST
75974: LIST
75975: PUSH
75976: LD_INT 2
75978: NEG
75979: PUSH
75980: LD_INT 1
75982: PUSH
75983: EMPTY
75984: LIST
75985: LIST
75986: PUSH
75987: LD_INT 3
75989: NEG
75990: PUSH
75991: LD_INT 0
75993: PUSH
75994: EMPTY
75995: LIST
75996: LIST
75997: PUSH
75998: LD_INT 3
76000: NEG
76001: PUSH
76002: LD_INT 1
76004: NEG
76005: PUSH
76006: EMPTY
76007: LIST
76008: LIST
76009: PUSH
76010: LD_INT 3
76012: NEG
76013: PUSH
76014: LD_INT 2
76016: NEG
76017: PUSH
76018: EMPTY
76019: LIST
76020: LIST
76021: PUSH
76022: LD_INT 3
76024: NEG
76025: PUSH
76026: LD_INT 3
76028: NEG
76029: PUSH
76030: EMPTY
76031: LIST
76032: LIST
76033: PUSH
76034: EMPTY
76035: LIST
76036: LIST
76037: LIST
76038: LIST
76039: LIST
76040: LIST
76041: LIST
76042: LIST
76043: LIST
76044: LIST
76045: LIST
76046: LIST
76047: LIST
76048: LIST
76049: LIST
76050: LIST
76051: LIST
76052: LIST
76053: LIST
76054: LIST
76055: LIST
76056: LIST
76057: LIST
76058: LIST
76059: LIST
76060: LIST
76061: LIST
76062: LIST
76063: LIST
76064: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76065: LD_ADDR_VAR 0 42
76069: PUSH
76070: LD_INT 0
76072: PUSH
76073: LD_INT 0
76075: PUSH
76076: EMPTY
76077: LIST
76078: LIST
76079: PUSH
76080: LD_INT 0
76082: PUSH
76083: LD_INT 1
76085: NEG
76086: PUSH
76087: EMPTY
76088: LIST
76089: LIST
76090: PUSH
76091: LD_INT 1
76093: PUSH
76094: LD_INT 0
76096: PUSH
76097: EMPTY
76098: LIST
76099: LIST
76100: PUSH
76101: LD_INT 1
76103: PUSH
76104: LD_INT 1
76106: PUSH
76107: EMPTY
76108: LIST
76109: LIST
76110: PUSH
76111: LD_INT 0
76113: PUSH
76114: LD_INT 1
76116: PUSH
76117: EMPTY
76118: LIST
76119: LIST
76120: PUSH
76121: LD_INT 1
76123: NEG
76124: PUSH
76125: LD_INT 0
76127: PUSH
76128: EMPTY
76129: LIST
76130: LIST
76131: PUSH
76132: LD_INT 1
76134: NEG
76135: PUSH
76136: LD_INT 1
76138: NEG
76139: PUSH
76140: EMPTY
76141: LIST
76142: LIST
76143: PUSH
76144: LD_INT 1
76146: NEG
76147: PUSH
76148: LD_INT 2
76150: NEG
76151: PUSH
76152: EMPTY
76153: LIST
76154: LIST
76155: PUSH
76156: LD_INT 0
76158: PUSH
76159: LD_INT 2
76161: NEG
76162: PUSH
76163: EMPTY
76164: LIST
76165: LIST
76166: PUSH
76167: LD_INT 1
76169: PUSH
76170: LD_INT 1
76172: NEG
76173: PUSH
76174: EMPTY
76175: LIST
76176: LIST
76177: PUSH
76178: LD_INT 2
76180: PUSH
76181: LD_INT 1
76183: PUSH
76184: EMPTY
76185: LIST
76186: LIST
76187: PUSH
76188: LD_INT 2
76190: PUSH
76191: LD_INT 2
76193: PUSH
76194: EMPTY
76195: LIST
76196: LIST
76197: PUSH
76198: LD_INT 1
76200: PUSH
76201: LD_INT 2
76203: PUSH
76204: EMPTY
76205: LIST
76206: LIST
76207: PUSH
76208: LD_INT 0
76210: PUSH
76211: LD_INT 2
76213: PUSH
76214: EMPTY
76215: LIST
76216: LIST
76217: PUSH
76218: LD_INT 1
76220: NEG
76221: PUSH
76222: LD_INT 1
76224: PUSH
76225: EMPTY
76226: LIST
76227: LIST
76228: PUSH
76229: LD_INT 2
76231: NEG
76232: PUSH
76233: LD_INT 1
76235: NEG
76236: PUSH
76237: EMPTY
76238: LIST
76239: LIST
76240: PUSH
76241: LD_INT 2
76243: NEG
76244: PUSH
76245: LD_INT 2
76247: NEG
76248: PUSH
76249: EMPTY
76250: LIST
76251: LIST
76252: PUSH
76253: LD_INT 2
76255: NEG
76256: PUSH
76257: LD_INT 3
76259: NEG
76260: PUSH
76261: EMPTY
76262: LIST
76263: LIST
76264: PUSH
76265: LD_INT 1
76267: NEG
76268: PUSH
76269: LD_INT 3
76271: NEG
76272: PUSH
76273: EMPTY
76274: LIST
76275: LIST
76276: PUSH
76277: LD_INT 0
76279: PUSH
76280: LD_INT 3
76282: NEG
76283: PUSH
76284: EMPTY
76285: LIST
76286: LIST
76287: PUSH
76288: LD_INT 1
76290: PUSH
76291: LD_INT 2
76293: NEG
76294: PUSH
76295: EMPTY
76296: LIST
76297: LIST
76298: PUSH
76299: LD_INT 3
76301: PUSH
76302: LD_INT 2
76304: PUSH
76305: EMPTY
76306: LIST
76307: LIST
76308: PUSH
76309: LD_INT 3
76311: PUSH
76312: LD_INT 3
76314: PUSH
76315: EMPTY
76316: LIST
76317: LIST
76318: PUSH
76319: LD_INT 2
76321: PUSH
76322: LD_INT 3
76324: PUSH
76325: EMPTY
76326: LIST
76327: LIST
76328: PUSH
76329: LD_INT 1
76331: PUSH
76332: LD_INT 3
76334: PUSH
76335: EMPTY
76336: LIST
76337: LIST
76338: PUSH
76339: LD_INT 0
76341: PUSH
76342: LD_INT 3
76344: PUSH
76345: EMPTY
76346: LIST
76347: LIST
76348: PUSH
76349: LD_INT 1
76351: NEG
76352: PUSH
76353: LD_INT 2
76355: PUSH
76356: EMPTY
76357: LIST
76358: LIST
76359: PUSH
76360: LD_INT 3
76362: NEG
76363: PUSH
76364: LD_INT 2
76366: NEG
76367: PUSH
76368: EMPTY
76369: LIST
76370: LIST
76371: PUSH
76372: LD_INT 3
76374: NEG
76375: PUSH
76376: LD_INT 3
76378: NEG
76379: PUSH
76380: EMPTY
76381: LIST
76382: LIST
76383: PUSH
76384: EMPTY
76385: LIST
76386: LIST
76387: LIST
76388: LIST
76389: LIST
76390: LIST
76391: LIST
76392: LIST
76393: LIST
76394: LIST
76395: LIST
76396: LIST
76397: LIST
76398: LIST
76399: LIST
76400: LIST
76401: LIST
76402: LIST
76403: LIST
76404: LIST
76405: LIST
76406: LIST
76407: LIST
76408: LIST
76409: LIST
76410: LIST
76411: LIST
76412: LIST
76413: LIST
76414: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76415: LD_ADDR_VAR 0 43
76419: PUSH
76420: LD_INT 0
76422: PUSH
76423: LD_INT 0
76425: PUSH
76426: EMPTY
76427: LIST
76428: LIST
76429: PUSH
76430: LD_INT 0
76432: PUSH
76433: LD_INT 1
76435: NEG
76436: PUSH
76437: EMPTY
76438: LIST
76439: LIST
76440: PUSH
76441: LD_INT 1
76443: PUSH
76444: LD_INT 0
76446: PUSH
76447: EMPTY
76448: LIST
76449: LIST
76450: PUSH
76451: LD_INT 1
76453: PUSH
76454: LD_INT 1
76456: PUSH
76457: EMPTY
76458: LIST
76459: LIST
76460: PUSH
76461: LD_INT 0
76463: PUSH
76464: LD_INT 1
76466: PUSH
76467: EMPTY
76468: LIST
76469: LIST
76470: PUSH
76471: LD_INT 1
76473: NEG
76474: PUSH
76475: LD_INT 0
76477: PUSH
76478: EMPTY
76479: LIST
76480: LIST
76481: PUSH
76482: LD_INT 1
76484: NEG
76485: PUSH
76486: LD_INT 1
76488: NEG
76489: PUSH
76490: EMPTY
76491: LIST
76492: LIST
76493: PUSH
76494: LD_INT 1
76496: NEG
76497: PUSH
76498: LD_INT 2
76500: NEG
76501: PUSH
76502: EMPTY
76503: LIST
76504: LIST
76505: PUSH
76506: LD_INT 0
76508: PUSH
76509: LD_INT 2
76511: NEG
76512: PUSH
76513: EMPTY
76514: LIST
76515: LIST
76516: PUSH
76517: LD_INT 1
76519: PUSH
76520: LD_INT 1
76522: NEG
76523: PUSH
76524: EMPTY
76525: LIST
76526: LIST
76527: PUSH
76528: LD_INT 2
76530: PUSH
76531: LD_INT 0
76533: PUSH
76534: EMPTY
76535: LIST
76536: LIST
76537: PUSH
76538: LD_INT 2
76540: PUSH
76541: LD_INT 1
76543: PUSH
76544: EMPTY
76545: LIST
76546: LIST
76547: PUSH
76548: LD_INT 1
76550: PUSH
76551: LD_INT 2
76553: PUSH
76554: EMPTY
76555: LIST
76556: LIST
76557: PUSH
76558: LD_INT 0
76560: PUSH
76561: LD_INT 2
76563: PUSH
76564: EMPTY
76565: LIST
76566: LIST
76567: PUSH
76568: LD_INT 1
76570: NEG
76571: PUSH
76572: LD_INT 1
76574: PUSH
76575: EMPTY
76576: LIST
76577: LIST
76578: PUSH
76579: LD_INT 2
76581: NEG
76582: PUSH
76583: LD_INT 0
76585: PUSH
76586: EMPTY
76587: LIST
76588: LIST
76589: PUSH
76590: LD_INT 2
76592: NEG
76593: PUSH
76594: LD_INT 1
76596: NEG
76597: PUSH
76598: EMPTY
76599: LIST
76600: LIST
76601: PUSH
76602: LD_INT 1
76604: NEG
76605: PUSH
76606: LD_INT 3
76608: NEG
76609: PUSH
76610: EMPTY
76611: LIST
76612: LIST
76613: PUSH
76614: LD_INT 0
76616: PUSH
76617: LD_INT 3
76619: NEG
76620: PUSH
76621: EMPTY
76622: LIST
76623: LIST
76624: PUSH
76625: LD_INT 1
76627: PUSH
76628: LD_INT 2
76630: NEG
76631: PUSH
76632: EMPTY
76633: LIST
76634: LIST
76635: PUSH
76636: LD_INT 2
76638: PUSH
76639: LD_INT 1
76641: NEG
76642: PUSH
76643: EMPTY
76644: LIST
76645: LIST
76646: PUSH
76647: LD_INT 3
76649: PUSH
76650: LD_INT 0
76652: PUSH
76653: EMPTY
76654: LIST
76655: LIST
76656: PUSH
76657: LD_INT 3
76659: PUSH
76660: LD_INT 1
76662: PUSH
76663: EMPTY
76664: LIST
76665: LIST
76666: PUSH
76667: LD_INT 1
76669: PUSH
76670: LD_INT 3
76672: PUSH
76673: EMPTY
76674: LIST
76675: LIST
76676: PUSH
76677: LD_INT 0
76679: PUSH
76680: LD_INT 3
76682: PUSH
76683: EMPTY
76684: LIST
76685: LIST
76686: PUSH
76687: LD_INT 1
76689: NEG
76690: PUSH
76691: LD_INT 2
76693: PUSH
76694: EMPTY
76695: LIST
76696: LIST
76697: PUSH
76698: LD_INT 2
76700: NEG
76701: PUSH
76702: LD_INT 1
76704: PUSH
76705: EMPTY
76706: LIST
76707: LIST
76708: PUSH
76709: LD_INT 3
76711: NEG
76712: PUSH
76713: LD_INT 0
76715: PUSH
76716: EMPTY
76717: LIST
76718: LIST
76719: PUSH
76720: LD_INT 3
76722: NEG
76723: PUSH
76724: LD_INT 1
76726: NEG
76727: PUSH
76728: EMPTY
76729: LIST
76730: LIST
76731: PUSH
76732: EMPTY
76733: LIST
76734: LIST
76735: LIST
76736: LIST
76737: LIST
76738: LIST
76739: LIST
76740: LIST
76741: LIST
76742: LIST
76743: LIST
76744: LIST
76745: LIST
76746: LIST
76747: LIST
76748: LIST
76749: LIST
76750: LIST
76751: LIST
76752: LIST
76753: LIST
76754: LIST
76755: LIST
76756: LIST
76757: LIST
76758: LIST
76759: LIST
76760: LIST
76761: LIST
76762: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76763: LD_ADDR_VAR 0 44
76767: PUSH
76768: LD_INT 0
76770: PUSH
76771: LD_INT 0
76773: PUSH
76774: EMPTY
76775: LIST
76776: LIST
76777: PUSH
76778: LD_INT 0
76780: PUSH
76781: LD_INT 1
76783: NEG
76784: PUSH
76785: EMPTY
76786: LIST
76787: LIST
76788: PUSH
76789: LD_INT 1
76791: PUSH
76792: LD_INT 0
76794: PUSH
76795: EMPTY
76796: LIST
76797: LIST
76798: PUSH
76799: LD_INT 1
76801: PUSH
76802: LD_INT 1
76804: PUSH
76805: EMPTY
76806: LIST
76807: LIST
76808: PUSH
76809: LD_INT 0
76811: PUSH
76812: LD_INT 1
76814: PUSH
76815: EMPTY
76816: LIST
76817: LIST
76818: PUSH
76819: LD_INT 1
76821: NEG
76822: PUSH
76823: LD_INT 0
76825: PUSH
76826: EMPTY
76827: LIST
76828: LIST
76829: PUSH
76830: LD_INT 1
76832: NEG
76833: PUSH
76834: LD_INT 1
76836: NEG
76837: PUSH
76838: EMPTY
76839: LIST
76840: LIST
76841: PUSH
76842: LD_INT 1
76844: NEG
76845: PUSH
76846: LD_INT 2
76848: NEG
76849: PUSH
76850: EMPTY
76851: LIST
76852: LIST
76853: PUSH
76854: LD_INT 1
76856: PUSH
76857: LD_INT 1
76859: NEG
76860: PUSH
76861: EMPTY
76862: LIST
76863: LIST
76864: PUSH
76865: LD_INT 2
76867: PUSH
76868: LD_INT 0
76870: PUSH
76871: EMPTY
76872: LIST
76873: LIST
76874: PUSH
76875: LD_INT 2
76877: PUSH
76878: LD_INT 1
76880: PUSH
76881: EMPTY
76882: LIST
76883: LIST
76884: PUSH
76885: LD_INT 2
76887: PUSH
76888: LD_INT 2
76890: PUSH
76891: EMPTY
76892: LIST
76893: LIST
76894: PUSH
76895: LD_INT 1
76897: PUSH
76898: LD_INT 2
76900: PUSH
76901: EMPTY
76902: LIST
76903: LIST
76904: PUSH
76905: LD_INT 1
76907: NEG
76908: PUSH
76909: LD_INT 1
76911: PUSH
76912: EMPTY
76913: LIST
76914: LIST
76915: PUSH
76916: LD_INT 2
76918: NEG
76919: PUSH
76920: LD_INT 0
76922: PUSH
76923: EMPTY
76924: LIST
76925: LIST
76926: PUSH
76927: LD_INT 2
76929: NEG
76930: PUSH
76931: LD_INT 1
76933: NEG
76934: PUSH
76935: EMPTY
76936: LIST
76937: LIST
76938: PUSH
76939: LD_INT 2
76941: NEG
76942: PUSH
76943: LD_INT 2
76945: NEG
76946: PUSH
76947: EMPTY
76948: LIST
76949: LIST
76950: PUSH
76951: LD_INT 2
76953: NEG
76954: PUSH
76955: LD_INT 3
76957: NEG
76958: PUSH
76959: EMPTY
76960: LIST
76961: LIST
76962: PUSH
76963: LD_INT 2
76965: PUSH
76966: LD_INT 1
76968: NEG
76969: PUSH
76970: EMPTY
76971: LIST
76972: LIST
76973: PUSH
76974: LD_INT 3
76976: PUSH
76977: LD_INT 0
76979: PUSH
76980: EMPTY
76981: LIST
76982: LIST
76983: PUSH
76984: LD_INT 3
76986: PUSH
76987: LD_INT 1
76989: PUSH
76990: EMPTY
76991: LIST
76992: LIST
76993: PUSH
76994: LD_INT 3
76996: PUSH
76997: LD_INT 2
76999: PUSH
77000: EMPTY
77001: LIST
77002: LIST
77003: PUSH
77004: LD_INT 3
77006: PUSH
77007: LD_INT 3
77009: PUSH
77010: EMPTY
77011: LIST
77012: LIST
77013: PUSH
77014: LD_INT 2
77016: PUSH
77017: LD_INT 3
77019: PUSH
77020: EMPTY
77021: LIST
77022: LIST
77023: PUSH
77024: LD_INT 2
77026: NEG
77027: PUSH
77028: LD_INT 1
77030: PUSH
77031: EMPTY
77032: LIST
77033: LIST
77034: PUSH
77035: LD_INT 3
77037: NEG
77038: PUSH
77039: LD_INT 0
77041: PUSH
77042: EMPTY
77043: LIST
77044: LIST
77045: PUSH
77046: LD_INT 3
77048: NEG
77049: PUSH
77050: LD_INT 1
77052: NEG
77053: PUSH
77054: EMPTY
77055: LIST
77056: LIST
77057: PUSH
77058: LD_INT 3
77060: NEG
77061: PUSH
77062: LD_INT 2
77064: NEG
77065: PUSH
77066: EMPTY
77067: LIST
77068: LIST
77069: PUSH
77070: LD_INT 3
77072: NEG
77073: PUSH
77074: LD_INT 3
77076: NEG
77077: PUSH
77078: EMPTY
77079: LIST
77080: LIST
77081: PUSH
77082: EMPTY
77083: LIST
77084: LIST
77085: LIST
77086: LIST
77087: LIST
77088: LIST
77089: LIST
77090: LIST
77091: LIST
77092: LIST
77093: LIST
77094: LIST
77095: LIST
77096: LIST
77097: LIST
77098: LIST
77099: LIST
77100: LIST
77101: LIST
77102: LIST
77103: LIST
77104: LIST
77105: LIST
77106: LIST
77107: LIST
77108: LIST
77109: LIST
77110: LIST
77111: LIST
77112: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77113: LD_ADDR_VAR 0 45
77117: PUSH
77118: LD_INT 0
77120: PUSH
77121: LD_INT 0
77123: PUSH
77124: EMPTY
77125: LIST
77126: LIST
77127: PUSH
77128: LD_INT 0
77130: PUSH
77131: LD_INT 1
77133: NEG
77134: PUSH
77135: EMPTY
77136: LIST
77137: LIST
77138: PUSH
77139: LD_INT 1
77141: PUSH
77142: LD_INT 0
77144: PUSH
77145: EMPTY
77146: LIST
77147: LIST
77148: PUSH
77149: LD_INT 1
77151: PUSH
77152: LD_INT 1
77154: PUSH
77155: EMPTY
77156: LIST
77157: LIST
77158: PUSH
77159: LD_INT 0
77161: PUSH
77162: LD_INT 1
77164: PUSH
77165: EMPTY
77166: LIST
77167: LIST
77168: PUSH
77169: LD_INT 1
77171: NEG
77172: PUSH
77173: LD_INT 0
77175: PUSH
77176: EMPTY
77177: LIST
77178: LIST
77179: PUSH
77180: LD_INT 1
77182: NEG
77183: PUSH
77184: LD_INT 1
77186: NEG
77187: PUSH
77188: EMPTY
77189: LIST
77190: LIST
77191: PUSH
77192: LD_INT 1
77194: NEG
77195: PUSH
77196: LD_INT 2
77198: NEG
77199: PUSH
77200: EMPTY
77201: LIST
77202: LIST
77203: PUSH
77204: LD_INT 0
77206: PUSH
77207: LD_INT 2
77209: NEG
77210: PUSH
77211: EMPTY
77212: LIST
77213: LIST
77214: PUSH
77215: LD_INT 1
77217: PUSH
77218: LD_INT 1
77220: NEG
77221: PUSH
77222: EMPTY
77223: LIST
77224: LIST
77225: PUSH
77226: LD_INT 2
77228: PUSH
77229: LD_INT 1
77231: PUSH
77232: EMPTY
77233: LIST
77234: LIST
77235: PUSH
77236: LD_INT 2
77238: PUSH
77239: LD_INT 2
77241: PUSH
77242: EMPTY
77243: LIST
77244: LIST
77245: PUSH
77246: LD_INT 1
77248: PUSH
77249: LD_INT 2
77251: PUSH
77252: EMPTY
77253: LIST
77254: LIST
77255: PUSH
77256: LD_INT 0
77258: PUSH
77259: LD_INT 2
77261: PUSH
77262: EMPTY
77263: LIST
77264: LIST
77265: PUSH
77266: LD_INT 1
77268: NEG
77269: PUSH
77270: LD_INT 1
77272: PUSH
77273: EMPTY
77274: LIST
77275: LIST
77276: PUSH
77277: LD_INT 2
77279: NEG
77280: PUSH
77281: LD_INT 1
77283: NEG
77284: PUSH
77285: EMPTY
77286: LIST
77287: LIST
77288: PUSH
77289: LD_INT 2
77291: NEG
77292: PUSH
77293: LD_INT 2
77295: NEG
77296: PUSH
77297: EMPTY
77298: LIST
77299: LIST
77300: PUSH
77301: LD_INT 2
77303: NEG
77304: PUSH
77305: LD_INT 3
77307: NEG
77308: PUSH
77309: EMPTY
77310: LIST
77311: LIST
77312: PUSH
77313: LD_INT 1
77315: NEG
77316: PUSH
77317: LD_INT 3
77319: NEG
77320: PUSH
77321: EMPTY
77322: LIST
77323: LIST
77324: PUSH
77325: LD_INT 0
77327: PUSH
77328: LD_INT 3
77330: NEG
77331: PUSH
77332: EMPTY
77333: LIST
77334: LIST
77335: PUSH
77336: LD_INT 1
77338: PUSH
77339: LD_INT 2
77341: NEG
77342: PUSH
77343: EMPTY
77344: LIST
77345: LIST
77346: PUSH
77347: LD_INT 3
77349: PUSH
77350: LD_INT 2
77352: PUSH
77353: EMPTY
77354: LIST
77355: LIST
77356: PUSH
77357: LD_INT 3
77359: PUSH
77360: LD_INT 3
77362: PUSH
77363: EMPTY
77364: LIST
77365: LIST
77366: PUSH
77367: LD_INT 2
77369: PUSH
77370: LD_INT 3
77372: PUSH
77373: EMPTY
77374: LIST
77375: LIST
77376: PUSH
77377: LD_INT 1
77379: PUSH
77380: LD_INT 3
77382: PUSH
77383: EMPTY
77384: LIST
77385: LIST
77386: PUSH
77387: LD_INT 0
77389: PUSH
77390: LD_INT 3
77392: PUSH
77393: EMPTY
77394: LIST
77395: LIST
77396: PUSH
77397: LD_INT 1
77399: NEG
77400: PUSH
77401: LD_INT 2
77403: PUSH
77404: EMPTY
77405: LIST
77406: LIST
77407: PUSH
77408: LD_INT 3
77410: NEG
77411: PUSH
77412: LD_INT 2
77414: NEG
77415: PUSH
77416: EMPTY
77417: LIST
77418: LIST
77419: PUSH
77420: LD_INT 3
77422: NEG
77423: PUSH
77424: LD_INT 3
77426: NEG
77427: PUSH
77428: EMPTY
77429: LIST
77430: LIST
77431: PUSH
77432: EMPTY
77433: LIST
77434: LIST
77435: LIST
77436: LIST
77437: LIST
77438: LIST
77439: LIST
77440: LIST
77441: LIST
77442: LIST
77443: LIST
77444: LIST
77445: LIST
77446: LIST
77447: LIST
77448: LIST
77449: LIST
77450: LIST
77451: LIST
77452: LIST
77453: LIST
77454: LIST
77455: LIST
77456: LIST
77457: LIST
77458: LIST
77459: LIST
77460: LIST
77461: LIST
77462: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
77463: LD_ADDR_VAR 0 46
77467: PUSH
77468: LD_INT 0
77470: PUSH
77471: LD_INT 0
77473: PUSH
77474: EMPTY
77475: LIST
77476: LIST
77477: PUSH
77478: LD_INT 0
77480: PUSH
77481: LD_INT 1
77483: NEG
77484: PUSH
77485: EMPTY
77486: LIST
77487: LIST
77488: PUSH
77489: LD_INT 1
77491: PUSH
77492: LD_INT 0
77494: PUSH
77495: EMPTY
77496: LIST
77497: LIST
77498: PUSH
77499: LD_INT 1
77501: PUSH
77502: LD_INT 1
77504: PUSH
77505: EMPTY
77506: LIST
77507: LIST
77508: PUSH
77509: LD_INT 0
77511: PUSH
77512: LD_INT 1
77514: PUSH
77515: EMPTY
77516: LIST
77517: LIST
77518: PUSH
77519: LD_INT 1
77521: NEG
77522: PUSH
77523: LD_INT 0
77525: PUSH
77526: EMPTY
77527: LIST
77528: LIST
77529: PUSH
77530: LD_INT 1
77532: NEG
77533: PUSH
77534: LD_INT 1
77536: NEG
77537: PUSH
77538: EMPTY
77539: LIST
77540: LIST
77541: PUSH
77542: LD_INT 1
77544: NEG
77545: PUSH
77546: LD_INT 2
77548: NEG
77549: PUSH
77550: EMPTY
77551: LIST
77552: LIST
77553: PUSH
77554: LD_INT 0
77556: PUSH
77557: LD_INT 2
77559: NEG
77560: PUSH
77561: EMPTY
77562: LIST
77563: LIST
77564: PUSH
77565: LD_INT 1
77567: PUSH
77568: LD_INT 1
77570: NEG
77571: PUSH
77572: EMPTY
77573: LIST
77574: LIST
77575: PUSH
77576: LD_INT 2
77578: PUSH
77579: LD_INT 0
77581: PUSH
77582: EMPTY
77583: LIST
77584: LIST
77585: PUSH
77586: LD_INT 2
77588: PUSH
77589: LD_INT 1
77591: PUSH
77592: EMPTY
77593: LIST
77594: LIST
77595: PUSH
77596: LD_INT 1
77598: PUSH
77599: LD_INT 2
77601: PUSH
77602: EMPTY
77603: LIST
77604: LIST
77605: PUSH
77606: LD_INT 0
77608: PUSH
77609: LD_INT 2
77611: PUSH
77612: EMPTY
77613: LIST
77614: LIST
77615: PUSH
77616: LD_INT 1
77618: NEG
77619: PUSH
77620: LD_INT 1
77622: PUSH
77623: EMPTY
77624: LIST
77625: LIST
77626: PUSH
77627: LD_INT 2
77629: NEG
77630: PUSH
77631: LD_INT 0
77633: PUSH
77634: EMPTY
77635: LIST
77636: LIST
77637: PUSH
77638: LD_INT 2
77640: NEG
77641: PUSH
77642: LD_INT 1
77644: NEG
77645: PUSH
77646: EMPTY
77647: LIST
77648: LIST
77649: PUSH
77650: LD_INT 1
77652: NEG
77653: PUSH
77654: LD_INT 3
77656: NEG
77657: PUSH
77658: EMPTY
77659: LIST
77660: LIST
77661: PUSH
77662: LD_INT 0
77664: PUSH
77665: LD_INT 3
77667: NEG
77668: PUSH
77669: EMPTY
77670: LIST
77671: LIST
77672: PUSH
77673: LD_INT 1
77675: PUSH
77676: LD_INT 2
77678: NEG
77679: PUSH
77680: EMPTY
77681: LIST
77682: LIST
77683: PUSH
77684: LD_INT 2
77686: PUSH
77687: LD_INT 1
77689: NEG
77690: PUSH
77691: EMPTY
77692: LIST
77693: LIST
77694: PUSH
77695: LD_INT 3
77697: PUSH
77698: LD_INT 0
77700: PUSH
77701: EMPTY
77702: LIST
77703: LIST
77704: PUSH
77705: LD_INT 3
77707: PUSH
77708: LD_INT 1
77710: PUSH
77711: EMPTY
77712: LIST
77713: LIST
77714: PUSH
77715: LD_INT 1
77717: PUSH
77718: LD_INT 3
77720: PUSH
77721: EMPTY
77722: LIST
77723: LIST
77724: PUSH
77725: LD_INT 0
77727: PUSH
77728: LD_INT 3
77730: PUSH
77731: EMPTY
77732: LIST
77733: LIST
77734: PUSH
77735: LD_INT 1
77737: NEG
77738: PUSH
77739: LD_INT 2
77741: PUSH
77742: EMPTY
77743: LIST
77744: LIST
77745: PUSH
77746: LD_INT 2
77748: NEG
77749: PUSH
77750: LD_INT 1
77752: PUSH
77753: EMPTY
77754: LIST
77755: LIST
77756: PUSH
77757: LD_INT 3
77759: NEG
77760: PUSH
77761: LD_INT 0
77763: PUSH
77764: EMPTY
77765: LIST
77766: LIST
77767: PUSH
77768: LD_INT 3
77770: NEG
77771: PUSH
77772: LD_INT 1
77774: NEG
77775: PUSH
77776: EMPTY
77777: LIST
77778: LIST
77779: PUSH
77780: EMPTY
77781: LIST
77782: LIST
77783: LIST
77784: LIST
77785: LIST
77786: LIST
77787: LIST
77788: LIST
77789: LIST
77790: LIST
77791: LIST
77792: LIST
77793: LIST
77794: LIST
77795: LIST
77796: LIST
77797: LIST
77798: LIST
77799: LIST
77800: LIST
77801: LIST
77802: LIST
77803: LIST
77804: LIST
77805: LIST
77806: LIST
77807: LIST
77808: LIST
77809: LIST
77810: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
77811: LD_ADDR_VAR 0 47
77815: PUSH
77816: LD_INT 0
77818: PUSH
77819: LD_INT 0
77821: PUSH
77822: EMPTY
77823: LIST
77824: LIST
77825: PUSH
77826: LD_INT 0
77828: PUSH
77829: LD_INT 1
77831: NEG
77832: PUSH
77833: EMPTY
77834: LIST
77835: LIST
77836: PUSH
77837: LD_INT 1
77839: PUSH
77840: LD_INT 0
77842: PUSH
77843: EMPTY
77844: LIST
77845: LIST
77846: PUSH
77847: LD_INT 1
77849: PUSH
77850: LD_INT 1
77852: PUSH
77853: EMPTY
77854: LIST
77855: LIST
77856: PUSH
77857: LD_INT 0
77859: PUSH
77860: LD_INT 1
77862: PUSH
77863: EMPTY
77864: LIST
77865: LIST
77866: PUSH
77867: LD_INT 1
77869: NEG
77870: PUSH
77871: LD_INT 0
77873: PUSH
77874: EMPTY
77875: LIST
77876: LIST
77877: PUSH
77878: LD_INT 1
77880: NEG
77881: PUSH
77882: LD_INT 1
77884: NEG
77885: PUSH
77886: EMPTY
77887: LIST
77888: LIST
77889: PUSH
77890: LD_INT 1
77892: NEG
77893: PUSH
77894: LD_INT 2
77896: NEG
77897: PUSH
77898: EMPTY
77899: LIST
77900: LIST
77901: PUSH
77902: LD_INT 0
77904: PUSH
77905: LD_INT 2
77907: NEG
77908: PUSH
77909: EMPTY
77910: LIST
77911: LIST
77912: PUSH
77913: LD_INT 1
77915: PUSH
77916: LD_INT 1
77918: NEG
77919: PUSH
77920: EMPTY
77921: LIST
77922: LIST
77923: PUSH
77924: LD_INT 2
77926: NEG
77927: PUSH
77928: LD_INT 1
77930: NEG
77931: PUSH
77932: EMPTY
77933: LIST
77934: LIST
77935: PUSH
77936: LD_INT 2
77938: NEG
77939: PUSH
77940: LD_INT 2
77942: NEG
77943: PUSH
77944: EMPTY
77945: LIST
77946: LIST
77947: PUSH
77948: EMPTY
77949: LIST
77950: LIST
77951: LIST
77952: LIST
77953: LIST
77954: LIST
77955: LIST
77956: LIST
77957: LIST
77958: LIST
77959: LIST
77960: LIST
77961: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
77962: LD_ADDR_VAR 0 48
77966: PUSH
77967: LD_INT 0
77969: PUSH
77970: LD_INT 0
77972: PUSH
77973: EMPTY
77974: LIST
77975: LIST
77976: PUSH
77977: LD_INT 0
77979: PUSH
77980: LD_INT 1
77982: NEG
77983: PUSH
77984: EMPTY
77985: LIST
77986: LIST
77987: PUSH
77988: LD_INT 1
77990: PUSH
77991: LD_INT 0
77993: PUSH
77994: EMPTY
77995: LIST
77996: LIST
77997: PUSH
77998: LD_INT 1
78000: PUSH
78001: LD_INT 1
78003: PUSH
78004: EMPTY
78005: LIST
78006: LIST
78007: PUSH
78008: LD_INT 0
78010: PUSH
78011: LD_INT 1
78013: PUSH
78014: EMPTY
78015: LIST
78016: LIST
78017: PUSH
78018: LD_INT 1
78020: NEG
78021: PUSH
78022: LD_INT 0
78024: PUSH
78025: EMPTY
78026: LIST
78027: LIST
78028: PUSH
78029: LD_INT 1
78031: NEG
78032: PUSH
78033: LD_INT 1
78035: NEG
78036: PUSH
78037: EMPTY
78038: LIST
78039: LIST
78040: PUSH
78041: LD_INT 1
78043: NEG
78044: PUSH
78045: LD_INT 2
78047: NEG
78048: PUSH
78049: EMPTY
78050: LIST
78051: LIST
78052: PUSH
78053: LD_INT 0
78055: PUSH
78056: LD_INT 2
78058: NEG
78059: PUSH
78060: EMPTY
78061: LIST
78062: LIST
78063: PUSH
78064: LD_INT 1
78066: PUSH
78067: LD_INT 1
78069: NEG
78070: PUSH
78071: EMPTY
78072: LIST
78073: LIST
78074: PUSH
78075: LD_INT 2
78077: PUSH
78078: LD_INT 0
78080: PUSH
78081: EMPTY
78082: LIST
78083: LIST
78084: PUSH
78085: LD_INT 2
78087: PUSH
78088: LD_INT 1
78090: PUSH
78091: EMPTY
78092: LIST
78093: LIST
78094: PUSH
78095: EMPTY
78096: LIST
78097: LIST
78098: LIST
78099: LIST
78100: LIST
78101: LIST
78102: LIST
78103: LIST
78104: LIST
78105: LIST
78106: LIST
78107: LIST
78108: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
78109: LD_ADDR_VAR 0 49
78113: PUSH
78114: LD_INT 0
78116: PUSH
78117: LD_INT 0
78119: PUSH
78120: EMPTY
78121: LIST
78122: LIST
78123: PUSH
78124: LD_INT 0
78126: PUSH
78127: LD_INT 1
78129: NEG
78130: PUSH
78131: EMPTY
78132: LIST
78133: LIST
78134: PUSH
78135: LD_INT 1
78137: PUSH
78138: LD_INT 0
78140: PUSH
78141: EMPTY
78142: LIST
78143: LIST
78144: PUSH
78145: LD_INT 1
78147: PUSH
78148: LD_INT 1
78150: PUSH
78151: EMPTY
78152: LIST
78153: LIST
78154: PUSH
78155: LD_INT 0
78157: PUSH
78158: LD_INT 1
78160: PUSH
78161: EMPTY
78162: LIST
78163: LIST
78164: PUSH
78165: LD_INT 1
78167: NEG
78168: PUSH
78169: LD_INT 0
78171: PUSH
78172: EMPTY
78173: LIST
78174: LIST
78175: PUSH
78176: LD_INT 1
78178: NEG
78179: PUSH
78180: LD_INT 1
78182: NEG
78183: PUSH
78184: EMPTY
78185: LIST
78186: LIST
78187: PUSH
78188: LD_INT 1
78190: PUSH
78191: LD_INT 1
78193: NEG
78194: PUSH
78195: EMPTY
78196: LIST
78197: LIST
78198: PUSH
78199: LD_INT 2
78201: PUSH
78202: LD_INT 0
78204: PUSH
78205: EMPTY
78206: LIST
78207: LIST
78208: PUSH
78209: LD_INT 2
78211: PUSH
78212: LD_INT 1
78214: PUSH
78215: EMPTY
78216: LIST
78217: LIST
78218: PUSH
78219: LD_INT 2
78221: PUSH
78222: LD_INT 2
78224: PUSH
78225: EMPTY
78226: LIST
78227: LIST
78228: PUSH
78229: LD_INT 1
78231: PUSH
78232: LD_INT 2
78234: PUSH
78235: EMPTY
78236: LIST
78237: LIST
78238: PUSH
78239: EMPTY
78240: LIST
78241: LIST
78242: LIST
78243: LIST
78244: LIST
78245: LIST
78246: LIST
78247: LIST
78248: LIST
78249: LIST
78250: LIST
78251: LIST
78252: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
78253: LD_ADDR_VAR 0 50
78257: PUSH
78258: LD_INT 0
78260: PUSH
78261: LD_INT 0
78263: PUSH
78264: EMPTY
78265: LIST
78266: LIST
78267: PUSH
78268: LD_INT 0
78270: PUSH
78271: LD_INT 1
78273: NEG
78274: PUSH
78275: EMPTY
78276: LIST
78277: LIST
78278: PUSH
78279: LD_INT 1
78281: PUSH
78282: LD_INT 0
78284: PUSH
78285: EMPTY
78286: LIST
78287: LIST
78288: PUSH
78289: LD_INT 1
78291: PUSH
78292: LD_INT 1
78294: PUSH
78295: EMPTY
78296: LIST
78297: LIST
78298: PUSH
78299: LD_INT 0
78301: PUSH
78302: LD_INT 1
78304: PUSH
78305: EMPTY
78306: LIST
78307: LIST
78308: PUSH
78309: LD_INT 1
78311: NEG
78312: PUSH
78313: LD_INT 0
78315: PUSH
78316: EMPTY
78317: LIST
78318: LIST
78319: PUSH
78320: LD_INT 1
78322: NEG
78323: PUSH
78324: LD_INT 1
78326: NEG
78327: PUSH
78328: EMPTY
78329: LIST
78330: LIST
78331: PUSH
78332: LD_INT 2
78334: PUSH
78335: LD_INT 1
78337: PUSH
78338: EMPTY
78339: LIST
78340: LIST
78341: PUSH
78342: LD_INT 2
78344: PUSH
78345: LD_INT 2
78347: PUSH
78348: EMPTY
78349: LIST
78350: LIST
78351: PUSH
78352: LD_INT 1
78354: PUSH
78355: LD_INT 2
78357: PUSH
78358: EMPTY
78359: LIST
78360: LIST
78361: PUSH
78362: LD_INT 0
78364: PUSH
78365: LD_INT 2
78367: PUSH
78368: EMPTY
78369: LIST
78370: LIST
78371: PUSH
78372: LD_INT 1
78374: NEG
78375: PUSH
78376: LD_INT 1
78378: PUSH
78379: EMPTY
78380: LIST
78381: LIST
78382: PUSH
78383: EMPTY
78384: LIST
78385: LIST
78386: LIST
78387: LIST
78388: LIST
78389: LIST
78390: LIST
78391: LIST
78392: LIST
78393: LIST
78394: LIST
78395: LIST
78396: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
78397: LD_ADDR_VAR 0 51
78401: PUSH
78402: LD_INT 0
78404: PUSH
78405: LD_INT 0
78407: PUSH
78408: EMPTY
78409: LIST
78410: LIST
78411: PUSH
78412: LD_INT 0
78414: PUSH
78415: LD_INT 1
78417: NEG
78418: PUSH
78419: EMPTY
78420: LIST
78421: LIST
78422: PUSH
78423: LD_INT 1
78425: PUSH
78426: LD_INT 0
78428: PUSH
78429: EMPTY
78430: LIST
78431: LIST
78432: PUSH
78433: LD_INT 1
78435: PUSH
78436: LD_INT 1
78438: PUSH
78439: EMPTY
78440: LIST
78441: LIST
78442: PUSH
78443: LD_INT 0
78445: PUSH
78446: LD_INT 1
78448: PUSH
78449: EMPTY
78450: LIST
78451: LIST
78452: PUSH
78453: LD_INT 1
78455: NEG
78456: PUSH
78457: LD_INT 0
78459: PUSH
78460: EMPTY
78461: LIST
78462: LIST
78463: PUSH
78464: LD_INT 1
78466: NEG
78467: PUSH
78468: LD_INT 1
78470: NEG
78471: PUSH
78472: EMPTY
78473: LIST
78474: LIST
78475: PUSH
78476: LD_INT 1
78478: PUSH
78479: LD_INT 2
78481: PUSH
78482: EMPTY
78483: LIST
78484: LIST
78485: PUSH
78486: LD_INT 0
78488: PUSH
78489: LD_INT 2
78491: PUSH
78492: EMPTY
78493: LIST
78494: LIST
78495: PUSH
78496: LD_INT 1
78498: NEG
78499: PUSH
78500: LD_INT 1
78502: PUSH
78503: EMPTY
78504: LIST
78505: LIST
78506: PUSH
78507: LD_INT 2
78509: NEG
78510: PUSH
78511: LD_INT 0
78513: PUSH
78514: EMPTY
78515: LIST
78516: LIST
78517: PUSH
78518: LD_INT 2
78520: NEG
78521: PUSH
78522: LD_INT 1
78524: NEG
78525: PUSH
78526: EMPTY
78527: LIST
78528: LIST
78529: PUSH
78530: EMPTY
78531: LIST
78532: LIST
78533: LIST
78534: LIST
78535: LIST
78536: LIST
78537: LIST
78538: LIST
78539: LIST
78540: LIST
78541: LIST
78542: LIST
78543: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78544: LD_ADDR_VAR 0 52
78548: PUSH
78549: LD_INT 0
78551: PUSH
78552: LD_INT 0
78554: PUSH
78555: EMPTY
78556: LIST
78557: LIST
78558: PUSH
78559: LD_INT 0
78561: PUSH
78562: LD_INT 1
78564: NEG
78565: PUSH
78566: EMPTY
78567: LIST
78568: LIST
78569: PUSH
78570: LD_INT 1
78572: PUSH
78573: LD_INT 0
78575: PUSH
78576: EMPTY
78577: LIST
78578: LIST
78579: PUSH
78580: LD_INT 1
78582: PUSH
78583: LD_INT 1
78585: PUSH
78586: EMPTY
78587: LIST
78588: LIST
78589: PUSH
78590: LD_INT 0
78592: PUSH
78593: LD_INT 1
78595: PUSH
78596: EMPTY
78597: LIST
78598: LIST
78599: PUSH
78600: LD_INT 1
78602: NEG
78603: PUSH
78604: LD_INT 0
78606: PUSH
78607: EMPTY
78608: LIST
78609: LIST
78610: PUSH
78611: LD_INT 1
78613: NEG
78614: PUSH
78615: LD_INT 1
78617: NEG
78618: PUSH
78619: EMPTY
78620: LIST
78621: LIST
78622: PUSH
78623: LD_INT 1
78625: NEG
78626: PUSH
78627: LD_INT 2
78629: NEG
78630: PUSH
78631: EMPTY
78632: LIST
78633: LIST
78634: PUSH
78635: LD_INT 1
78637: NEG
78638: PUSH
78639: LD_INT 1
78641: PUSH
78642: EMPTY
78643: LIST
78644: LIST
78645: PUSH
78646: LD_INT 2
78648: NEG
78649: PUSH
78650: LD_INT 0
78652: PUSH
78653: EMPTY
78654: LIST
78655: LIST
78656: PUSH
78657: LD_INT 2
78659: NEG
78660: PUSH
78661: LD_INT 1
78663: NEG
78664: PUSH
78665: EMPTY
78666: LIST
78667: LIST
78668: PUSH
78669: LD_INT 2
78671: NEG
78672: PUSH
78673: LD_INT 2
78675: NEG
78676: PUSH
78677: EMPTY
78678: LIST
78679: LIST
78680: PUSH
78681: EMPTY
78682: LIST
78683: LIST
78684: LIST
78685: LIST
78686: LIST
78687: LIST
78688: LIST
78689: LIST
78690: LIST
78691: LIST
78692: LIST
78693: LIST
78694: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78695: LD_ADDR_VAR 0 53
78699: PUSH
78700: LD_INT 0
78702: PUSH
78703: LD_INT 0
78705: PUSH
78706: EMPTY
78707: LIST
78708: LIST
78709: PUSH
78710: LD_INT 0
78712: PUSH
78713: LD_INT 1
78715: NEG
78716: PUSH
78717: EMPTY
78718: LIST
78719: LIST
78720: PUSH
78721: LD_INT 1
78723: PUSH
78724: LD_INT 0
78726: PUSH
78727: EMPTY
78728: LIST
78729: LIST
78730: PUSH
78731: LD_INT 1
78733: PUSH
78734: LD_INT 1
78736: PUSH
78737: EMPTY
78738: LIST
78739: LIST
78740: PUSH
78741: LD_INT 0
78743: PUSH
78744: LD_INT 1
78746: PUSH
78747: EMPTY
78748: LIST
78749: LIST
78750: PUSH
78751: LD_INT 1
78753: NEG
78754: PUSH
78755: LD_INT 0
78757: PUSH
78758: EMPTY
78759: LIST
78760: LIST
78761: PUSH
78762: LD_INT 1
78764: NEG
78765: PUSH
78766: LD_INT 1
78768: NEG
78769: PUSH
78770: EMPTY
78771: LIST
78772: LIST
78773: PUSH
78774: LD_INT 1
78776: NEG
78777: PUSH
78778: LD_INT 2
78780: NEG
78781: PUSH
78782: EMPTY
78783: LIST
78784: LIST
78785: PUSH
78786: LD_INT 0
78788: PUSH
78789: LD_INT 2
78791: NEG
78792: PUSH
78793: EMPTY
78794: LIST
78795: LIST
78796: PUSH
78797: LD_INT 1
78799: PUSH
78800: LD_INT 1
78802: NEG
78803: PUSH
78804: EMPTY
78805: LIST
78806: LIST
78807: PUSH
78808: LD_INT 2
78810: PUSH
78811: LD_INT 0
78813: PUSH
78814: EMPTY
78815: LIST
78816: LIST
78817: PUSH
78818: LD_INT 2
78820: PUSH
78821: LD_INT 1
78823: PUSH
78824: EMPTY
78825: LIST
78826: LIST
78827: PUSH
78828: LD_INT 2
78830: PUSH
78831: LD_INT 2
78833: PUSH
78834: EMPTY
78835: LIST
78836: LIST
78837: PUSH
78838: LD_INT 1
78840: PUSH
78841: LD_INT 2
78843: PUSH
78844: EMPTY
78845: LIST
78846: LIST
78847: PUSH
78848: LD_INT 0
78850: PUSH
78851: LD_INT 2
78853: PUSH
78854: EMPTY
78855: LIST
78856: LIST
78857: PUSH
78858: LD_INT 1
78860: NEG
78861: PUSH
78862: LD_INT 1
78864: PUSH
78865: EMPTY
78866: LIST
78867: LIST
78868: PUSH
78869: LD_INT 2
78871: NEG
78872: PUSH
78873: LD_INT 0
78875: PUSH
78876: EMPTY
78877: LIST
78878: LIST
78879: PUSH
78880: LD_INT 2
78882: NEG
78883: PUSH
78884: LD_INT 1
78886: NEG
78887: PUSH
78888: EMPTY
78889: LIST
78890: LIST
78891: PUSH
78892: LD_INT 2
78894: NEG
78895: PUSH
78896: LD_INT 2
78898: NEG
78899: PUSH
78900: EMPTY
78901: LIST
78902: LIST
78903: PUSH
78904: EMPTY
78905: LIST
78906: LIST
78907: LIST
78908: LIST
78909: LIST
78910: LIST
78911: LIST
78912: LIST
78913: LIST
78914: LIST
78915: LIST
78916: LIST
78917: LIST
78918: LIST
78919: LIST
78920: LIST
78921: LIST
78922: LIST
78923: LIST
78924: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78925: LD_ADDR_VAR 0 54
78929: PUSH
78930: LD_INT 0
78932: PUSH
78933: LD_INT 0
78935: PUSH
78936: EMPTY
78937: LIST
78938: LIST
78939: PUSH
78940: LD_INT 0
78942: PUSH
78943: LD_INT 1
78945: NEG
78946: PUSH
78947: EMPTY
78948: LIST
78949: LIST
78950: PUSH
78951: LD_INT 1
78953: PUSH
78954: LD_INT 0
78956: PUSH
78957: EMPTY
78958: LIST
78959: LIST
78960: PUSH
78961: LD_INT 1
78963: PUSH
78964: LD_INT 1
78966: PUSH
78967: EMPTY
78968: LIST
78969: LIST
78970: PUSH
78971: LD_INT 0
78973: PUSH
78974: LD_INT 1
78976: PUSH
78977: EMPTY
78978: LIST
78979: LIST
78980: PUSH
78981: LD_INT 1
78983: NEG
78984: PUSH
78985: LD_INT 0
78987: PUSH
78988: EMPTY
78989: LIST
78990: LIST
78991: PUSH
78992: LD_INT 1
78994: NEG
78995: PUSH
78996: LD_INT 1
78998: NEG
78999: PUSH
79000: EMPTY
79001: LIST
79002: LIST
79003: PUSH
79004: LD_INT 1
79006: NEG
79007: PUSH
79008: LD_INT 2
79010: NEG
79011: PUSH
79012: EMPTY
79013: LIST
79014: LIST
79015: PUSH
79016: LD_INT 0
79018: PUSH
79019: LD_INT 2
79021: NEG
79022: PUSH
79023: EMPTY
79024: LIST
79025: LIST
79026: PUSH
79027: LD_INT 1
79029: PUSH
79030: LD_INT 1
79032: NEG
79033: PUSH
79034: EMPTY
79035: LIST
79036: LIST
79037: PUSH
79038: LD_INT 2
79040: PUSH
79041: LD_INT 0
79043: PUSH
79044: EMPTY
79045: LIST
79046: LIST
79047: PUSH
79048: LD_INT 2
79050: PUSH
79051: LD_INT 1
79053: PUSH
79054: EMPTY
79055: LIST
79056: LIST
79057: PUSH
79058: LD_INT 2
79060: PUSH
79061: LD_INT 2
79063: PUSH
79064: EMPTY
79065: LIST
79066: LIST
79067: PUSH
79068: LD_INT 1
79070: PUSH
79071: LD_INT 2
79073: PUSH
79074: EMPTY
79075: LIST
79076: LIST
79077: PUSH
79078: LD_INT 0
79080: PUSH
79081: LD_INT 2
79083: PUSH
79084: EMPTY
79085: LIST
79086: LIST
79087: PUSH
79088: LD_INT 1
79090: NEG
79091: PUSH
79092: LD_INT 1
79094: PUSH
79095: EMPTY
79096: LIST
79097: LIST
79098: PUSH
79099: LD_INT 2
79101: NEG
79102: PUSH
79103: LD_INT 0
79105: PUSH
79106: EMPTY
79107: LIST
79108: LIST
79109: PUSH
79110: LD_INT 2
79112: NEG
79113: PUSH
79114: LD_INT 1
79116: NEG
79117: PUSH
79118: EMPTY
79119: LIST
79120: LIST
79121: PUSH
79122: LD_INT 2
79124: NEG
79125: PUSH
79126: LD_INT 2
79128: NEG
79129: PUSH
79130: EMPTY
79131: LIST
79132: LIST
79133: PUSH
79134: EMPTY
79135: LIST
79136: LIST
79137: LIST
79138: LIST
79139: LIST
79140: LIST
79141: LIST
79142: LIST
79143: LIST
79144: LIST
79145: LIST
79146: LIST
79147: LIST
79148: LIST
79149: LIST
79150: LIST
79151: LIST
79152: LIST
79153: LIST
79154: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79155: LD_ADDR_VAR 0 55
79159: PUSH
79160: LD_INT 0
79162: PUSH
79163: LD_INT 0
79165: PUSH
79166: EMPTY
79167: LIST
79168: LIST
79169: PUSH
79170: LD_INT 0
79172: PUSH
79173: LD_INT 1
79175: NEG
79176: PUSH
79177: EMPTY
79178: LIST
79179: LIST
79180: PUSH
79181: LD_INT 1
79183: PUSH
79184: LD_INT 0
79186: PUSH
79187: EMPTY
79188: LIST
79189: LIST
79190: PUSH
79191: LD_INT 1
79193: PUSH
79194: LD_INT 1
79196: PUSH
79197: EMPTY
79198: LIST
79199: LIST
79200: PUSH
79201: LD_INT 0
79203: PUSH
79204: LD_INT 1
79206: PUSH
79207: EMPTY
79208: LIST
79209: LIST
79210: PUSH
79211: LD_INT 1
79213: NEG
79214: PUSH
79215: LD_INT 0
79217: PUSH
79218: EMPTY
79219: LIST
79220: LIST
79221: PUSH
79222: LD_INT 1
79224: NEG
79225: PUSH
79226: LD_INT 1
79228: NEG
79229: PUSH
79230: EMPTY
79231: LIST
79232: LIST
79233: PUSH
79234: LD_INT 1
79236: NEG
79237: PUSH
79238: LD_INT 2
79240: NEG
79241: PUSH
79242: EMPTY
79243: LIST
79244: LIST
79245: PUSH
79246: LD_INT 0
79248: PUSH
79249: LD_INT 2
79251: NEG
79252: PUSH
79253: EMPTY
79254: LIST
79255: LIST
79256: PUSH
79257: LD_INT 1
79259: PUSH
79260: LD_INT 1
79262: NEG
79263: PUSH
79264: EMPTY
79265: LIST
79266: LIST
79267: PUSH
79268: LD_INT 2
79270: PUSH
79271: LD_INT 0
79273: PUSH
79274: EMPTY
79275: LIST
79276: LIST
79277: PUSH
79278: LD_INT 2
79280: PUSH
79281: LD_INT 1
79283: PUSH
79284: EMPTY
79285: LIST
79286: LIST
79287: PUSH
79288: LD_INT 2
79290: PUSH
79291: LD_INT 2
79293: PUSH
79294: EMPTY
79295: LIST
79296: LIST
79297: PUSH
79298: LD_INT 1
79300: PUSH
79301: LD_INT 2
79303: PUSH
79304: EMPTY
79305: LIST
79306: LIST
79307: PUSH
79308: LD_INT 0
79310: PUSH
79311: LD_INT 2
79313: PUSH
79314: EMPTY
79315: LIST
79316: LIST
79317: PUSH
79318: LD_INT 1
79320: NEG
79321: PUSH
79322: LD_INT 1
79324: PUSH
79325: EMPTY
79326: LIST
79327: LIST
79328: PUSH
79329: LD_INT 2
79331: NEG
79332: PUSH
79333: LD_INT 0
79335: PUSH
79336: EMPTY
79337: LIST
79338: LIST
79339: PUSH
79340: LD_INT 2
79342: NEG
79343: PUSH
79344: LD_INT 1
79346: NEG
79347: PUSH
79348: EMPTY
79349: LIST
79350: LIST
79351: PUSH
79352: LD_INT 2
79354: NEG
79355: PUSH
79356: LD_INT 2
79358: NEG
79359: PUSH
79360: EMPTY
79361: LIST
79362: LIST
79363: PUSH
79364: EMPTY
79365: LIST
79366: LIST
79367: LIST
79368: LIST
79369: LIST
79370: LIST
79371: LIST
79372: LIST
79373: LIST
79374: LIST
79375: LIST
79376: LIST
79377: LIST
79378: LIST
79379: LIST
79380: LIST
79381: LIST
79382: LIST
79383: LIST
79384: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79385: LD_ADDR_VAR 0 56
79389: PUSH
79390: LD_INT 0
79392: PUSH
79393: LD_INT 0
79395: PUSH
79396: EMPTY
79397: LIST
79398: LIST
79399: PUSH
79400: LD_INT 0
79402: PUSH
79403: LD_INT 1
79405: NEG
79406: PUSH
79407: EMPTY
79408: LIST
79409: LIST
79410: PUSH
79411: LD_INT 1
79413: PUSH
79414: LD_INT 0
79416: PUSH
79417: EMPTY
79418: LIST
79419: LIST
79420: PUSH
79421: LD_INT 1
79423: PUSH
79424: LD_INT 1
79426: PUSH
79427: EMPTY
79428: LIST
79429: LIST
79430: PUSH
79431: LD_INT 0
79433: PUSH
79434: LD_INT 1
79436: PUSH
79437: EMPTY
79438: LIST
79439: LIST
79440: PUSH
79441: LD_INT 1
79443: NEG
79444: PUSH
79445: LD_INT 0
79447: PUSH
79448: EMPTY
79449: LIST
79450: LIST
79451: PUSH
79452: LD_INT 1
79454: NEG
79455: PUSH
79456: LD_INT 1
79458: NEG
79459: PUSH
79460: EMPTY
79461: LIST
79462: LIST
79463: PUSH
79464: LD_INT 1
79466: NEG
79467: PUSH
79468: LD_INT 2
79470: NEG
79471: PUSH
79472: EMPTY
79473: LIST
79474: LIST
79475: PUSH
79476: LD_INT 0
79478: PUSH
79479: LD_INT 2
79481: NEG
79482: PUSH
79483: EMPTY
79484: LIST
79485: LIST
79486: PUSH
79487: LD_INT 1
79489: PUSH
79490: LD_INT 1
79492: NEG
79493: PUSH
79494: EMPTY
79495: LIST
79496: LIST
79497: PUSH
79498: LD_INT 2
79500: PUSH
79501: LD_INT 0
79503: PUSH
79504: EMPTY
79505: LIST
79506: LIST
79507: PUSH
79508: LD_INT 2
79510: PUSH
79511: LD_INT 1
79513: PUSH
79514: EMPTY
79515: LIST
79516: LIST
79517: PUSH
79518: LD_INT 2
79520: PUSH
79521: LD_INT 2
79523: PUSH
79524: EMPTY
79525: LIST
79526: LIST
79527: PUSH
79528: LD_INT 1
79530: PUSH
79531: LD_INT 2
79533: PUSH
79534: EMPTY
79535: LIST
79536: LIST
79537: PUSH
79538: LD_INT 0
79540: PUSH
79541: LD_INT 2
79543: PUSH
79544: EMPTY
79545: LIST
79546: LIST
79547: PUSH
79548: LD_INT 1
79550: NEG
79551: PUSH
79552: LD_INT 1
79554: PUSH
79555: EMPTY
79556: LIST
79557: LIST
79558: PUSH
79559: LD_INT 2
79561: NEG
79562: PUSH
79563: LD_INT 0
79565: PUSH
79566: EMPTY
79567: LIST
79568: LIST
79569: PUSH
79570: LD_INT 2
79572: NEG
79573: PUSH
79574: LD_INT 1
79576: NEG
79577: PUSH
79578: EMPTY
79579: LIST
79580: LIST
79581: PUSH
79582: LD_INT 2
79584: NEG
79585: PUSH
79586: LD_INT 2
79588: NEG
79589: PUSH
79590: EMPTY
79591: LIST
79592: LIST
79593: PUSH
79594: EMPTY
79595: LIST
79596: LIST
79597: LIST
79598: LIST
79599: LIST
79600: LIST
79601: LIST
79602: LIST
79603: LIST
79604: LIST
79605: LIST
79606: LIST
79607: LIST
79608: LIST
79609: LIST
79610: LIST
79611: LIST
79612: LIST
79613: LIST
79614: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79615: LD_ADDR_VAR 0 57
79619: PUSH
79620: LD_INT 0
79622: PUSH
79623: LD_INT 0
79625: PUSH
79626: EMPTY
79627: LIST
79628: LIST
79629: PUSH
79630: LD_INT 0
79632: PUSH
79633: LD_INT 1
79635: NEG
79636: PUSH
79637: EMPTY
79638: LIST
79639: LIST
79640: PUSH
79641: LD_INT 1
79643: PUSH
79644: LD_INT 0
79646: PUSH
79647: EMPTY
79648: LIST
79649: LIST
79650: PUSH
79651: LD_INT 1
79653: PUSH
79654: LD_INT 1
79656: PUSH
79657: EMPTY
79658: LIST
79659: LIST
79660: PUSH
79661: LD_INT 0
79663: PUSH
79664: LD_INT 1
79666: PUSH
79667: EMPTY
79668: LIST
79669: LIST
79670: PUSH
79671: LD_INT 1
79673: NEG
79674: PUSH
79675: LD_INT 0
79677: PUSH
79678: EMPTY
79679: LIST
79680: LIST
79681: PUSH
79682: LD_INT 1
79684: NEG
79685: PUSH
79686: LD_INT 1
79688: NEG
79689: PUSH
79690: EMPTY
79691: LIST
79692: LIST
79693: PUSH
79694: LD_INT 1
79696: NEG
79697: PUSH
79698: LD_INT 2
79700: NEG
79701: PUSH
79702: EMPTY
79703: LIST
79704: LIST
79705: PUSH
79706: LD_INT 0
79708: PUSH
79709: LD_INT 2
79711: NEG
79712: PUSH
79713: EMPTY
79714: LIST
79715: LIST
79716: PUSH
79717: LD_INT 1
79719: PUSH
79720: LD_INT 1
79722: NEG
79723: PUSH
79724: EMPTY
79725: LIST
79726: LIST
79727: PUSH
79728: LD_INT 2
79730: PUSH
79731: LD_INT 0
79733: PUSH
79734: EMPTY
79735: LIST
79736: LIST
79737: PUSH
79738: LD_INT 2
79740: PUSH
79741: LD_INT 1
79743: PUSH
79744: EMPTY
79745: LIST
79746: LIST
79747: PUSH
79748: LD_INT 2
79750: PUSH
79751: LD_INT 2
79753: PUSH
79754: EMPTY
79755: LIST
79756: LIST
79757: PUSH
79758: LD_INT 1
79760: PUSH
79761: LD_INT 2
79763: PUSH
79764: EMPTY
79765: LIST
79766: LIST
79767: PUSH
79768: LD_INT 0
79770: PUSH
79771: LD_INT 2
79773: PUSH
79774: EMPTY
79775: LIST
79776: LIST
79777: PUSH
79778: LD_INT 1
79780: NEG
79781: PUSH
79782: LD_INT 1
79784: PUSH
79785: EMPTY
79786: LIST
79787: LIST
79788: PUSH
79789: LD_INT 2
79791: NEG
79792: PUSH
79793: LD_INT 0
79795: PUSH
79796: EMPTY
79797: LIST
79798: LIST
79799: PUSH
79800: LD_INT 2
79802: NEG
79803: PUSH
79804: LD_INT 1
79806: NEG
79807: PUSH
79808: EMPTY
79809: LIST
79810: LIST
79811: PUSH
79812: LD_INT 2
79814: NEG
79815: PUSH
79816: LD_INT 2
79818: NEG
79819: PUSH
79820: EMPTY
79821: LIST
79822: LIST
79823: PUSH
79824: EMPTY
79825: LIST
79826: LIST
79827: LIST
79828: LIST
79829: LIST
79830: LIST
79831: LIST
79832: LIST
79833: LIST
79834: LIST
79835: LIST
79836: LIST
79837: LIST
79838: LIST
79839: LIST
79840: LIST
79841: LIST
79842: LIST
79843: LIST
79844: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79845: LD_ADDR_VAR 0 58
79849: PUSH
79850: LD_INT 0
79852: PUSH
79853: LD_INT 0
79855: PUSH
79856: EMPTY
79857: LIST
79858: LIST
79859: PUSH
79860: LD_INT 0
79862: PUSH
79863: LD_INT 1
79865: NEG
79866: PUSH
79867: EMPTY
79868: LIST
79869: LIST
79870: PUSH
79871: LD_INT 1
79873: PUSH
79874: LD_INT 0
79876: PUSH
79877: EMPTY
79878: LIST
79879: LIST
79880: PUSH
79881: LD_INT 1
79883: PUSH
79884: LD_INT 1
79886: PUSH
79887: EMPTY
79888: LIST
79889: LIST
79890: PUSH
79891: LD_INT 0
79893: PUSH
79894: LD_INT 1
79896: PUSH
79897: EMPTY
79898: LIST
79899: LIST
79900: PUSH
79901: LD_INT 1
79903: NEG
79904: PUSH
79905: LD_INT 0
79907: PUSH
79908: EMPTY
79909: LIST
79910: LIST
79911: PUSH
79912: LD_INT 1
79914: NEG
79915: PUSH
79916: LD_INT 1
79918: NEG
79919: PUSH
79920: EMPTY
79921: LIST
79922: LIST
79923: PUSH
79924: LD_INT 1
79926: NEG
79927: PUSH
79928: LD_INT 2
79930: NEG
79931: PUSH
79932: EMPTY
79933: LIST
79934: LIST
79935: PUSH
79936: LD_INT 0
79938: PUSH
79939: LD_INT 2
79941: NEG
79942: PUSH
79943: EMPTY
79944: LIST
79945: LIST
79946: PUSH
79947: LD_INT 1
79949: PUSH
79950: LD_INT 1
79952: NEG
79953: PUSH
79954: EMPTY
79955: LIST
79956: LIST
79957: PUSH
79958: LD_INT 2
79960: PUSH
79961: LD_INT 0
79963: PUSH
79964: EMPTY
79965: LIST
79966: LIST
79967: PUSH
79968: LD_INT 2
79970: PUSH
79971: LD_INT 1
79973: PUSH
79974: EMPTY
79975: LIST
79976: LIST
79977: PUSH
79978: LD_INT 2
79980: PUSH
79981: LD_INT 2
79983: PUSH
79984: EMPTY
79985: LIST
79986: LIST
79987: PUSH
79988: LD_INT 1
79990: PUSH
79991: LD_INT 2
79993: PUSH
79994: EMPTY
79995: LIST
79996: LIST
79997: PUSH
79998: LD_INT 0
80000: PUSH
80001: LD_INT 2
80003: PUSH
80004: EMPTY
80005: LIST
80006: LIST
80007: PUSH
80008: LD_INT 1
80010: NEG
80011: PUSH
80012: LD_INT 1
80014: PUSH
80015: EMPTY
80016: LIST
80017: LIST
80018: PUSH
80019: LD_INT 2
80021: NEG
80022: PUSH
80023: LD_INT 0
80025: PUSH
80026: EMPTY
80027: LIST
80028: LIST
80029: PUSH
80030: LD_INT 2
80032: NEG
80033: PUSH
80034: LD_INT 1
80036: NEG
80037: PUSH
80038: EMPTY
80039: LIST
80040: LIST
80041: PUSH
80042: LD_INT 2
80044: NEG
80045: PUSH
80046: LD_INT 2
80048: NEG
80049: PUSH
80050: EMPTY
80051: LIST
80052: LIST
80053: PUSH
80054: EMPTY
80055: LIST
80056: LIST
80057: LIST
80058: LIST
80059: LIST
80060: LIST
80061: LIST
80062: LIST
80063: LIST
80064: LIST
80065: LIST
80066: LIST
80067: LIST
80068: LIST
80069: LIST
80070: LIST
80071: LIST
80072: LIST
80073: LIST
80074: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80075: LD_ADDR_VAR 0 59
80079: PUSH
80080: LD_INT 0
80082: PUSH
80083: LD_INT 0
80085: PUSH
80086: EMPTY
80087: LIST
80088: LIST
80089: PUSH
80090: LD_INT 0
80092: PUSH
80093: LD_INT 1
80095: NEG
80096: PUSH
80097: EMPTY
80098: LIST
80099: LIST
80100: PUSH
80101: LD_INT 1
80103: PUSH
80104: LD_INT 0
80106: PUSH
80107: EMPTY
80108: LIST
80109: LIST
80110: PUSH
80111: LD_INT 1
80113: PUSH
80114: LD_INT 1
80116: PUSH
80117: EMPTY
80118: LIST
80119: LIST
80120: PUSH
80121: LD_INT 0
80123: PUSH
80124: LD_INT 1
80126: PUSH
80127: EMPTY
80128: LIST
80129: LIST
80130: PUSH
80131: LD_INT 1
80133: NEG
80134: PUSH
80135: LD_INT 0
80137: PUSH
80138: EMPTY
80139: LIST
80140: LIST
80141: PUSH
80142: LD_INT 1
80144: NEG
80145: PUSH
80146: LD_INT 1
80148: NEG
80149: PUSH
80150: EMPTY
80151: LIST
80152: LIST
80153: PUSH
80154: EMPTY
80155: LIST
80156: LIST
80157: LIST
80158: LIST
80159: LIST
80160: LIST
80161: LIST
80162: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80163: LD_ADDR_VAR 0 60
80167: PUSH
80168: LD_INT 0
80170: PUSH
80171: LD_INT 0
80173: PUSH
80174: EMPTY
80175: LIST
80176: LIST
80177: PUSH
80178: LD_INT 0
80180: PUSH
80181: LD_INT 1
80183: NEG
80184: PUSH
80185: EMPTY
80186: LIST
80187: LIST
80188: PUSH
80189: LD_INT 1
80191: PUSH
80192: LD_INT 0
80194: PUSH
80195: EMPTY
80196: LIST
80197: LIST
80198: PUSH
80199: LD_INT 1
80201: PUSH
80202: LD_INT 1
80204: PUSH
80205: EMPTY
80206: LIST
80207: LIST
80208: PUSH
80209: LD_INT 0
80211: PUSH
80212: LD_INT 1
80214: PUSH
80215: EMPTY
80216: LIST
80217: LIST
80218: PUSH
80219: LD_INT 1
80221: NEG
80222: PUSH
80223: LD_INT 0
80225: PUSH
80226: EMPTY
80227: LIST
80228: LIST
80229: PUSH
80230: LD_INT 1
80232: NEG
80233: PUSH
80234: LD_INT 1
80236: NEG
80237: PUSH
80238: EMPTY
80239: LIST
80240: LIST
80241: PUSH
80242: EMPTY
80243: LIST
80244: LIST
80245: LIST
80246: LIST
80247: LIST
80248: LIST
80249: LIST
80250: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80251: LD_ADDR_VAR 0 61
80255: PUSH
80256: LD_INT 0
80258: PUSH
80259: LD_INT 0
80261: PUSH
80262: EMPTY
80263: LIST
80264: LIST
80265: PUSH
80266: LD_INT 0
80268: PUSH
80269: LD_INT 1
80271: NEG
80272: PUSH
80273: EMPTY
80274: LIST
80275: LIST
80276: PUSH
80277: LD_INT 1
80279: PUSH
80280: LD_INT 0
80282: PUSH
80283: EMPTY
80284: LIST
80285: LIST
80286: PUSH
80287: LD_INT 1
80289: PUSH
80290: LD_INT 1
80292: PUSH
80293: EMPTY
80294: LIST
80295: LIST
80296: PUSH
80297: LD_INT 0
80299: PUSH
80300: LD_INT 1
80302: PUSH
80303: EMPTY
80304: LIST
80305: LIST
80306: PUSH
80307: LD_INT 1
80309: NEG
80310: PUSH
80311: LD_INT 0
80313: PUSH
80314: EMPTY
80315: LIST
80316: LIST
80317: PUSH
80318: LD_INT 1
80320: NEG
80321: PUSH
80322: LD_INT 1
80324: NEG
80325: PUSH
80326: EMPTY
80327: LIST
80328: LIST
80329: PUSH
80330: EMPTY
80331: LIST
80332: LIST
80333: LIST
80334: LIST
80335: LIST
80336: LIST
80337: LIST
80338: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80339: LD_ADDR_VAR 0 62
80343: PUSH
80344: LD_INT 0
80346: PUSH
80347: LD_INT 0
80349: PUSH
80350: EMPTY
80351: LIST
80352: LIST
80353: PUSH
80354: LD_INT 0
80356: PUSH
80357: LD_INT 1
80359: NEG
80360: PUSH
80361: EMPTY
80362: LIST
80363: LIST
80364: PUSH
80365: LD_INT 1
80367: PUSH
80368: LD_INT 0
80370: PUSH
80371: EMPTY
80372: LIST
80373: LIST
80374: PUSH
80375: LD_INT 1
80377: PUSH
80378: LD_INT 1
80380: PUSH
80381: EMPTY
80382: LIST
80383: LIST
80384: PUSH
80385: LD_INT 0
80387: PUSH
80388: LD_INT 1
80390: PUSH
80391: EMPTY
80392: LIST
80393: LIST
80394: PUSH
80395: LD_INT 1
80397: NEG
80398: PUSH
80399: LD_INT 0
80401: PUSH
80402: EMPTY
80403: LIST
80404: LIST
80405: PUSH
80406: LD_INT 1
80408: NEG
80409: PUSH
80410: LD_INT 1
80412: NEG
80413: PUSH
80414: EMPTY
80415: LIST
80416: LIST
80417: PUSH
80418: EMPTY
80419: LIST
80420: LIST
80421: LIST
80422: LIST
80423: LIST
80424: LIST
80425: LIST
80426: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80427: LD_ADDR_VAR 0 63
80431: PUSH
80432: LD_INT 0
80434: PUSH
80435: LD_INT 0
80437: PUSH
80438: EMPTY
80439: LIST
80440: LIST
80441: PUSH
80442: LD_INT 0
80444: PUSH
80445: LD_INT 1
80447: NEG
80448: PUSH
80449: EMPTY
80450: LIST
80451: LIST
80452: PUSH
80453: LD_INT 1
80455: PUSH
80456: LD_INT 0
80458: PUSH
80459: EMPTY
80460: LIST
80461: LIST
80462: PUSH
80463: LD_INT 1
80465: PUSH
80466: LD_INT 1
80468: PUSH
80469: EMPTY
80470: LIST
80471: LIST
80472: PUSH
80473: LD_INT 0
80475: PUSH
80476: LD_INT 1
80478: PUSH
80479: EMPTY
80480: LIST
80481: LIST
80482: PUSH
80483: LD_INT 1
80485: NEG
80486: PUSH
80487: LD_INT 0
80489: PUSH
80490: EMPTY
80491: LIST
80492: LIST
80493: PUSH
80494: LD_INT 1
80496: NEG
80497: PUSH
80498: LD_INT 1
80500: NEG
80501: PUSH
80502: EMPTY
80503: LIST
80504: LIST
80505: PUSH
80506: EMPTY
80507: LIST
80508: LIST
80509: LIST
80510: LIST
80511: LIST
80512: LIST
80513: LIST
80514: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80515: LD_ADDR_VAR 0 64
80519: PUSH
80520: LD_INT 0
80522: PUSH
80523: LD_INT 0
80525: PUSH
80526: EMPTY
80527: LIST
80528: LIST
80529: PUSH
80530: LD_INT 0
80532: PUSH
80533: LD_INT 1
80535: NEG
80536: PUSH
80537: EMPTY
80538: LIST
80539: LIST
80540: PUSH
80541: LD_INT 1
80543: PUSH
80544: LD_INT 0
80546: PUSH
80547: EMPTY
80548: LIST
80549: LIST
80550: PUSH
80551: LD_INT 1
80553: PUSH
80554: LD_INT 1
80556: PUSH
80557: EMPTY
80558: LIST
80559: LIST
80560: PUSH
80561: LD_INT 0
80563: PUSH
80564: LD_INT 1
80566: PUSH
80567: EMPTY
80568: LIST
80569: LIST
80570: PUSH
80571: LD_INT 1
80573: NEG
80574: PUSH
80575: LD_INT 0
80577: PUSH
80578: EMPTY
80579: LIST
80580: LIST
80581: PUSH
80582: LD_INT 1
80584: NEG
80585: PUSH
80586: LD_INT 1
80588: NEG
80589: PUSH
80590: EMPTY
80591: LIST
80592: LIST
80593: PUSH
80594: EMPTY
80595: LIST
80596: LIST
80597: LIST
80598: LIST
80599: LIST
80600: LIST
80601: LIST
80602: ST_TO_ADDR
// end ; 1 :
80603: GO 86500
80605: LD_INT 1
80607: DOUBLE
80608: EQUAL
80609: IFTRUE 80613
80611: GO 83236
80613: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
80614: LD_ADDR_VAR 0 11
80618: PUSH
80619: LD_INT 1
80621: NEG
80622: PUSH
80623: LD_INT 3
80625: NEG
80626: PUSH
80627: EMPTY
80628: LIST
80629: LIST
80630: PUSH
80631: LD_INT 0
80633: PUSH
80634: LD_INT 3
80636: NEG
80637: PUSH
80638: EMPTY
80639: LIST
80640: LIST
80641: PUSH
80642: LD_INT 1
80644: PUSH
80645: LD_INT 2
80647: NEG
80648: PUSH
80649: EMPTY
80650: LIST
80651: LIST
80652: PUSH
80653: EMPTY
80654: LIST
80655: LIST
80656: LIST
80657: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
80658: LD_ADDR_VAR 0 12
80662: PUSH
80663: LD_INT 2
80665: PUSH
80666: LD_INT 1
80668: NEG
80669: PUSH
80670: EMPTY
80671: LIST
80672: LIST
80673: PUSH
80674: LD_INT 3
80676: PUSH
80677: LD_INT 0
80679: PUSH
80680: EMPTY
80681: LIST
80682: LIST
80683: PUSH
80684: LD_INT 3
80686: PUSH
80687: LD_INT 1
80689: PUSH
80690: EMPTY
80691: LIST
80692: LIST
80693: PUSH
80694: EMPTY
80695: LIST
80696: LIST
80697: LIST
80698: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
80699: LD_ADDR_VAR 0 13
80703: PUSH
80704: LD_INT 3
80706: PUSH
80707: LD_INT 2
80709: PUSH
80710: EMPTY
80711: LIST
80712: LIST
80713: PUSH
80714: LD_INT 3
80716: PUSH
80717: LD_INT 3
80719: PUSH
80720: EMPTY
80721: LIST
80722: LIST
80723: PUSH
80724: LD_INT 2
80726: PUSH
80727: LD_INT 3
80729: PUSH
80730: EMPTY
80731: LIST
80732: LIST
80733: PUSH
80734: EMPTY
80735: LIST
80736: LIST
80737: LIST
80738: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
80739: LD_ADDR_VAR 0 14
80743: PUSH
80744: LD_INT 1
80746: PUSH
80747: LD_INT 3
80749: PUSH
80750: EMPTY
80751: LIST
80752: LIST
80753: PUSH
80754: LD_INT 0
80756: PUSH
80757: LD_INT 3
80759: PUSH
80760: EMPTY
80761: LIST
80762: LIST
80763: PUSH
80764: LD_INT 1
80766: NEG
80767: PUSH
80768: LD_INT 2
80770: PUSH
80771: EMPTY
80772: LIST
80773: LIST
80774: PUSH
80775: EMPTY
80776: LIST
80777: LIST
80778: LIST
80779: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
80780: LD_ADDR_VAR 0 15
80784: PUSH
80785: LD_INT 2
80787: NEG
80788: PUSH
80789: LD_INT 1
80791: PUSH
80792: EMPTY
80793: LIST
80794: LIST
80795: PUSH
80796: LD_INT 3
80798: NEG
80799: PUSH
80800: LD_INT 0
80802: PUSH
80803: EMPTY
80804: LIST
80805: LIST
80806: PUSH
80807: LD_INT 3
80809: NEG
80810: PUSH
80811: LD_INT 1
80813: NEG
80814: PUSH
80815: EMPTY
80816: LIST
80817: LIST
80818: PUSH
80819: EMPTY
80820: LIST
80821: LIST
80822: LIST
80823: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
80824: LD_ADDR_VAR 0 16
80828: PUSH
80829: LD_INT 2
80831: NEG
80832: PUSH
80833: LD_INT 3
80835: NEG
80836: PUSH
80837: EMPTY
80838: LIST
80839: LIST
80840: PUSH
80841: LD_INT 3
80843: NEG
80844: PUSH
80845: LD_INT 2
80847: NEG
80848: PUSH
80849: EMPTY
80850: LIST
80851: LIST
80852: PUSH
80853: LD_INT 3
80855: NEG
80856: PUSH
80857: LD_INT 3
80859: NEG
80860: PUSH
80861: EMPTY
80862: LIST
80863: LIST
80864: PUSH
80865: EMPTY
80866: LIST
80867: LIST
80868: LIST
80869: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
80870: LD_ADDR_VAR 0 17
80874: PUSH
80875: LD_INT 1
80877: NEG
80878: PUSH
80879: LD_INT 3
80881: NEG
80882: PUSH
80883: EMPTY
80884: LIST
80885: LIST
80886: PUSH
80887: LD_INT 0
80889: PUSH
80890: LD_INT 3
80892: NEG
80893: PUSH
80894: EMPTY
80895: LIST
80896: LIST
80897: PUSH
80898: LD_INT 1
80900: PUSH
80901: LD_INT 2
80903: NEG
80904: PUSH
80905: EMPTY
80906: LIST
80907: LIST
80908: PUSH
80909: EMPTY
80910: LIST
80911: LIST
80912: LIST
80913: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
80914: LD_ADDR_VAR 0 18
80918: PUSH
80919: LD_INT 2
80921: PUSH
80922: LD_INT 1
80924: NEG
80925: PUSH
80926: EMPTY
80927: LIST
80928: LIST
80929: PUSH
80930: LD_INT 3
80932: PUSH
80933: LD_INT 0
80935: PUSH
80936: EMPTY
80937: LIST
80938: LIST
80939: PUSH
80940: LD_INT 3
80942: PUSH
80943: LD_INT 1
80945: PUSH
80946: EMPTY
80947: LIST
80948: LIST
80949: PUSH
80950: EMPTY
80951: LIST
80952: LIST
80953: LIST
80954: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
80955: LD_ADDR_VAR 0 19
80959: PUSH
80960: LD_INT 3
80962: PUSH
80963: LD_INT 2
80965: PUSH
80966: EMPTY
80967: LIST
80968: LIST
80969: PUSH
80970: LD_INT 3
80972: PUSH
80973: LD_INT 3
80975: PUSH
80976: EMPTY
80977: LIST
80978: LIST
80979: PUSH
80980: LD_INT 2
80982: PUSH
80983: LD_INT 3
80985: PUSH
80986: EMPTY
80987: LIST
80988: LIST
80989: PUSH
80990: EMPTY
80991: LIST
80992: LIST
80993: LIST
80994: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
80995: LD_ADDR_VAR 0 20
80999: PUSH
81000: LD_INT 1
81002: PUSH
81003: LD_INT 3
81005: PUSH
81006: EMPTY
81007: LIST
81008: LIST
81009: PUSH
81010: LD_INT 0
81012: PUSH
81013: LD_INT 3
81015: PUSH
81016: EMPTY
81017: LIST
81018: LIST
81019: PUSH
81020: LD_INT 1
81022: NEG
81023: PUSH
81024: LD_INT 2
81026: PUSH
81027: EMPTY
81028: LIST
81029: LIST
81030: PUSH
81031: EMPTY
81032: LIST
81033: LIST
81034: LIST
81035: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
81036: LD_ADDR_VAR 0 21
81040: PUSH
81041: LD_INT 2
81043: NEG
81044: PUSH
81045: LD_INT 1
81047: PUSH
81048: EMPTY
81049: LIST
81050: LIST
81051: PUSH
81052: LD_INT 3
81054: NEG
81055: PUSH
81056: LD_INT 0
81058: PUSH
81059: EMPTY
81060: LIST
81061: LIST
81062: PUSH
81063: LD_INT 3
81065: NEG
81066: PUSH
81067: LD_INT 1
81069: NEG
81070: PUSH
81071: EMPTY
81072: LIST
81073: LIST
81074: PUSH
81075: EMPTY
81076: LIST
81077: LIST
81078: LIST
81079: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
81080: LD_ADDR_VAR 0 22
81084: PUSH
81085: LD_INT 2
81087: NEG
81088: PUSH
81089: LD_INT 3
81091: NEG
81092: PUSH
81093: EMPTY
81094: LIST
81095: LIST
81096: PUSH
81097: LD_INT 3
81099: NEG
81100: PUSH
81101: LD_INT 2
81103: NEG
81104: PUSH
81105: EMPTY
81106: LIST
81107: LIST
81108: PUSH
81109: LD_INT 3
81111: NEG
81112: PUSH
81113: LD_INT 3
81115: NEG
81116: PUSH
81117: EMPTY
81118: LIST
81119: LIST
81120: PUSH
81121: EMPTY
81122: LIST
81123: LIST
81124: LIST
81125: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
81126: LD_ADDR_VAR 0 23
81130: PUSH
81131: LD_INT 0
81133: PUSH
81134: LD_INT 3
81136: NEG
81137: PUSH
81138: EMPTY
81139: LIST
81140: LIST
81141: PUSH
81142: LD_INT 1
81144: NEG
81145: PUSH
81146: LD_INT 4
81148: NEG
81149: PUSH
81150: EMPTY
81151: LIST
81152: LIST
81153: PUSH
81154: LD_INT 1
81156: PUSH
81157: LD_INT 3
81159: NEG
81160: PUSH
81161: EMPTY
81162: LIST
81163: LIST
81164: PUSH
81165: EMPTY
81166: LIST
81167: LIST
81168: LIST
81169: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
81170: LD_ADDR_VAR 0 24
81174: PUSH
81175: LD_INT 3
81177: PUSH
81178: LD_INT 0
81180: PUSH
81181: EMPTY
81182: LIST
81183: LIST
81184: PUSH
81185: LD_INT 3
81187: PUSH
81188: LD_INT 1
81190: NEG
81191: PUSH
81192: EMPTY
81193: LIST
81194: LIST
81195: PUSH
81196: LD_INT 4
81198: PUSH
81199: LD_INT 1
81201: PUSH
81202: EMPTY
81203: LIST
81204: LIST
81205: PUSH
81206: EMPTY
81207: LIST
81208: LIST
81209: LIST
81210: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
81211: LD_ADDR_VAR 0 25
81215: PUSH
81216: LD_INT 3
81218: PUSH
81219: LD_INT 3
81221: PUSH
81222: EMPTY
81223: LIST
81224: LIST
81225: PUSH
81226: LD_INT 4
81228: PUSH
81229: LD_INT 3
81231: PUSH
81232: EMPTY
81233: LIST
81234: LIST
81235: PUSH
81236: LD_INT 3
81238: PUSH
81239: LD_INT 4
81241: PUSH
81242: EMPTY
81243: LIST
81244: LIST
81245: PUSH
81246: EMPTY
81247: LIST
81248: LIST
81249: LIST
81250: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
81251: LD_ADDR_VAR 0 26
81255: PUSH
81256: LD_INT 0
81258: PUSH
81259: LD_INT 3
81261: PUSH
81262: EMPTY
81263: LIST
81264: LIST
81265: PUSH
81266: LD_INT 1
81268: PUSH
81269: LD_INT 4
81271: PUSH
81272: EMPTY
81273: LIST
81274: LIST
81275: PUSH
81276: LD_INT 1
81278: NEG
81279: PUSH
81280: LD_INT 3
81282: PUSH
81283: EMPTY
81284: LIST
81285: LIST
81286: PUSH
81287: EMPTY
81288: LIST
81289: LIST
81290: LIST
81291: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
81292: LD_ADDR_VAR 0 27
81296: PUSH
81297: LD_INT 3
81299: NEG
81300: PUSH
81301: LD_INT 0
81303: PUSH
81304: EMPTY
81305: LIST
81306: LIST
81307: PUSH
81308: LD_INT 3
81310: NEG
81311: PUSH
81312: LD_INT 1
81314: PUSH
81315: EMPTY
81316: LIST
81317: LIST
81318: PUSH
81319: LD_INT 4
81321: NEG
81322: PUSH
81323: LD_INT 1
81325: NEG
81326: PUSH
81327: EMPTY
81328: LIST
81329: LIST
81330: PUSH
81331: EMPTY
81332: LIST
81333: LIST
81334: LIST
81335: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
81336: LD_ADDR_VAR 0 28
81340: PUSH
81341: LD_INT 3
81343: NEG
81344: PUSH
81345: LD_INT 3
81347: NEG
81348: PUSH
81349: EMPTY
81350: LIST
81351: LIST
81352: PUSH
81353: LD_INT 3
81355: NEG
81356: PUSH
81357: LD_INT 4
81359: NEG
81360: PUSH
81361: EMPTY
81362: LIST
81363: LIST
81364: PUSH
81365: LD_INT 4
81367: NEG
81368: PUSH
81369: LD_INT 3
81371: NEG
81372: PUSH
81373: EMPTY
81374: LIST
81375: LIST
81376: PUSH
81377: EMPTY
81378: LIST
81379: LIST
81380: LIST
81381: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
81382: LD_ADDR_VAR 0 29
81386: PUSH
81387: LD_INT 1
81389: NEG
81390: PUSH
81391: LD_INT 3
81393: NEG
81394: PUSH
81395: EMPTY
81396: LIST
81397: LIST
81398: PUSH
81399: LD_INT 0
81401: PUSH
81402: LD_INT 3
81404: NEG
81405: PUSH
81406: EMPTY
81407: LIST
81408: LIST
81409: PUSH
81410: LD_INT 1
81412: PUSH
81413: LD_INT 2
81415: NEG
81416: PUSH
81417: EMPTY
81418: LIST
81419: LIST
81420: PUSH
81421: LD_INT 1
81423: NEG
81424: PUSH
81425: LD_INT 4
81427: NEG
81428: PUSH
81429: EMPTY
81430: LIST
81431: LIST
81432: PUSH
81433: LD_INT 0
81435: PUSH
81436: LD_INT 4
81438: NEG
81439: PUSH
81440: EMPTY
81441: LIST
81442: LIST
81443: PUSH
81444: LD_INT 1
81446: PUSH
81447: LD_INT 3
81449: NEG
81450: PUSH
81451: EMPTY
81452: LIST
81453: LIST
81454: PUSH
81455: LD_INT 1
81457: NEG
81458: PUSH
81459: LD_INT 5
81461: NEG
81462: PUSH
81463: EMPTY
81464: LIST
81465: LIST
81466: PUSH
81467: LD_INT 0
81469: PUSH
81470: LD_INT 5
81472: NEG
81473: PUSH
81474: EMPTY
81475: LIST
81476: LIST
81477: PUSH
81478: LD_INT 1
81480: PUSH
81481: LD_INT 4
81483: NEG
81484: PUSH
81485: EMPTY
81486: LIST
81487: LIST
81488: PUSH
81489: LD_INT 1
81491: NEG
81492: PUSH
81493: LD_INT 6
81495: NEG
81496: PUSH
81497: EMPTY
81498: LIST
81499: LIST
81500: PUSH
81501: LD_INT 0
81503: PUSH
81504: LD_INT 6
81506: NEG
81507: PUSH
81508: EMPTY
81509: LIST
81510: LIST
81511: PUSH
81512: LD_INT 1
81514: PUSH
81515: LD_INT 5
81517: NEG
81518: PUSH
81519: EMPTY
81520: LIST
81521: LIST
81522: PUSH
81523: EMPTY
81524: LIST
81525: LIST
81526: LIST
81527: LIST
81528: LIST
81529: LIST
81530: LIST
81531: LIST
81532: LIST
81533: LIST
81534: LIST
81535: LIST
81536: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
81537: LD_ADDR_VAR 0 30
81541: PUSH
81542: LD_INT 2
81544: PUSH
81545: LD_INT 1
81547: NEG
81548: PUSH
81549: EMPTY
81550: LIST
81551: LIST
81552: PUSH
81553: LD_INT 3
81555: PUSH
81556: LD_INT 0
81558: PUSH
81559: EMPTY
81560: LIST
81561: LIST
81562: PUSH
81563: LD_INT 3
81565: PUSH
81566: LD_INT 1
81568: PUSH
81569: EMPTY
81570: LIST
81571: LIST
81572: PUSH
81573: LD_INT 3
81575: PUSH
81576: LD_INT 1
81578: NEG
81579: PUSH
81580: EMPTY
81581: LIST
81582: LIST
81583: PUSH
81584: LD_INT 4
81586: PUSH
81587: LD_INT 0
81589: PUSH
81590: EMPTY
81591: LIST
81592: LIST
81593: PUSH
81594: LD_INT 4
81596: PUSH
81597: LD_INT 1
81599: PUSH
81600: EMPTY
81601: LIST
81602: LIST
81603: PUSH
81604: LD_INT 4
81606: PUSH
81607: LD_INT 1
81609: NEG
81610: PUSH
81611: EMPTY
81612: LIST
81613: LIST
81614: PUSH
81615: LD_INT 5
81617: PUSH
81618: LD_INT 0
81620: PUSH
81621: EMPTY
81622: LIST
81623: LIST
81624: PUSH
81625: LD_INT 5
81627: PUSH
81628: LD_INT 1
81630: PUSH
81631: EMPTY
81632: LIST
81633: LIST
81634: PUSH
81635: LD_INT 5
81637: PUSH
81638: LD_INT 1
81640: NEG
81641: PUSH
81642: EMPTY
81643: LIST
81644: LIST
81645: PUSH
81646: LD_INT 6
81648: PUSH
81649: LD_INT 0
81651: PUSH
81652: EMPTY
81653: LIST
81654: LIST
81655: PUSH
81656: LD_INT 6
81658: PUSH
81659: LD_INT 1
81661: PUSH
81662: EMPTY
81663: LIST
81664: LIST
81665: PUSH
81666: EMPTY
81667: LIST
81668: LIST
81669: LIST
81670: LIST
81671: LIST
81672: LIST
81673: LIST
81674: LIST
81675: LIST
81676: LIST
81677: LIST
81678: LIST
81679: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
81680: LD_ADDR_VAR 0 31
81684: PUSH
81685: LD_INT 3
81687: PUSH
81688: LD_INT 2
81690: PUSH
81691: EMPTY
81692: LIST
81693: LIST
81694: PUSH
81695: LD_INT 3
81697: PUSH
81698: LD_INT 3
81700: PUSH
81701: EMPTY
81702: LIST
81703: LIST
81704: PUSH
81705: LD_INT 2
81707: PUSH
81708: LD_INT 3
81710: PUSH
81711: EMPTY
81712: LIST
81713: LIST
81714: PUSH
81715: LD_INT 4
81717: PUSH
81718: LD_INT 3
81720: PUSH
81721: EMPTY
81722: LIST
81723: LIST
81724: PUSH
81725: LD_INT 4
81727: PUSH
81728: LD_INT 4
81730: PUSH
81731: EMPTY
81732: LIST
81733: LIST
81734: PUSH
81735: LD_INT 3
81737: PUSH
81738: LD_INT 4
81740: PUSH
81741: EMPTY
81742: LIST
81743: LIST
81744: PUSH
81745: LD_INT 5
81747: PUSH
81748: LD_INT 4
81750: PUSH
81751: EMPTY
81752: LIST
81753: LIST
81754: PUSH
81755: LD_INT 5
81757: PUSH
81758: LD_INT 5
81760: PUSH
81761: EMPTY
81762: LIST
81763: LIST
81764: PUSH
81765: LD_INT 4
81767: PUSH
81768: LD_INT 5
81770: PUSH
81771: EMPTY
81772: LIST
81773: LIST
81774: PUSH
81775: LD_INT 6
81777: PUSH
81778: LD_INT 5
81780: PUSH
81781: EMPTY
81782: LIST
81783: LIST
81784: PUSH
81785: LD_INT 6
81787: PUSH
81788: LD_INT 6
81790: PUSH
81791: EMPTY
81792: LIST
81793: LIST
81794: PUSH
81795: LD_INT 5
81797: PUSH
81798: LD_INT 6
81800: PUSH
81801: EMPTY
81802: LIST
81803: LIST
81804: PUSH
81805: EMPTY
81806: LIST
81807: LIST
81808: LIST
81809: LIST
81810: LIST
81811: LIST
81812: LIST
81813: LIST
81814: LIST
81815: LIST
81816: LIST
81817: LIST
81818: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
81819: LD_ADDR_VAR 0 32
81823: PUSH
81824: LD_INT 1
81826: PUSH
81827: LD_INT 3
81829: PUSH
81830: EMPTY
81831: LIST
81832: LIST
81833: PUSH
81834: LD_INT 0
81836: PUSH
81837: LD_INT 3
81839: PUSH
81840: EMPTY
81841: LIST
81842: LIST
81843: PUSH
81844: LD_INT 1
81846: NEG
81847: PUSH
81848: LD_INT 2
81850: PUSH
81851: EMPTY
81852: LIST
81853: LIST
81854: PUSH
81855: LD_INT 1
81857: PUSH
81858: LD_INT 4
81860: PUSH
81861: EMPTY
81862: LIST
81863: LIST
81864: PUSH
81865: LD_INT 0
81867: PUSH
81868: LD_INT 4
81870: PUSH
81871: EMPTY
81872: LIST
81873: LIST
81874: PUSH
81875: LD_INT 1
81877: NEG
81878: PUSH
81879: LD_INT 3
81881: PUSH
81882: EMPTY
81883: LIST
81884: LIST
81885: PUSH
81886: LD_INT 1
81888: PUSH
81889: LD_INT 5
81891: PUSH
81892: EMPTY
81893: LIST
81894: LIST
81895: PUSH
81896: LD_INT 0
81898: PUSH
81899: LD_INT 5
81901: PUSH
81902: EMPTY
81903: LIST
81904: LIST
81905: PUSH
81906: LD_INT 1
81908: NEG
81909: PUSH
81910: LD_INT 4
81912: PUSH
81913: EMPTY
81914: LIST
81915: LIST
81916: PUSH
81917: LD_INT 1
81919: PUSH
81920: LD_INT 6
81922: PUSH
81923: EMPTY
81924: LIST
81925: LIST
81926: PUSH
81927: LD_INT 0
81929: PUSH
81930: LD_INT 6
81932: PUSH
81933: EMPTY
81934: LIST
81935: LIST
81936: PUSH
81937: LD_INT 1
81939: NEG
81940: PUSH
81941: LD_INT 5
81943: PUSH
81944: EMPTY
81945: LIST
81946: LIST
81947: PUSH
81948: EMPTY
81949: LIST
81950: LIST
81951: LIST
81952: LIST
81953: LIST
81954: LIST
81955: LIST
81956: LIST
81957: LIST
81958: LIST
81959: LIST
81960: LIST
81961: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
81962: LD_ADDR_VAR 0 33
81966: PUSH
81967: LD_INT 2
81969: NEG
81970: PUSH
81971: LD_INT 1
81973: PUSH
81974: EMPTY
81975: LIST
81976: LIST
81977: PUSH
81978: LD_INT 3
81980: NEG
81981: PUSH
81982: LD_INT 0
81984: PUSH
81985: EMPTY
81986: LIST
81987: LIST
81988: PUSH
81989: LD_INT 3
81991: NEG
81992: PUSH
81993: LD_INT 1
81995: NEG
81996: PUSH
81997: EMPTY
81998: LIST
81999: LIST
82000: PUSH
82001: LD_INT 3
82003: NEG
82004: PUSH
82005: LD_INT 1
82007: PUSH
82008: EMPTY
82009: LIST
82010: LIST
82011: PUSH
82012: LD_INT 4
82014: NEG
82015: PUSH
82016: LD_INT 0
82018: PUSH
82019: EMPTY
82020: LIST
82021: LIST
82022: PUSH
82023: LD_INT 4
82025: NEG
82026: PUSH
82027: LD_INT 1
82029: NEG
82030: PUSH
82031: EMPTY
82032: LIST
82033: LIST
82034: PUSH
82035: LD_INT 4
82037: NEG
82038: PUSH
82039: LD_INT 1
82041: PUSH
82042: EMPTY
82043: LIST
82044: LIST
82045: PUSH
82046: LD_INT 5
82048: NEG
82049: PUSH
82050: LD_INT 0
82052: PUSH
82053: EMPTY
82054: LIST
82055: LIST
82056: PUSH
82057: LD_INT 5
82059: NEG
82060: PUSH
82061: LD_INT 1
82063: NEG
82064: PUSH
82065: EMPTY
82066: LIST
82067: LIST
82068: PUSH
82069: LD_INT 5
82071: NEG
82072: PUSH
82073: LD_INT 1
82075: PUSH
82076: EMPTY
82077: LIST
82078: LIST
82079: PUSH
82080: LD_INT 6
82082: NEG
82083: PUSH
82084: LD_INT 0
82086: PUSH
82087: EMPTY
82088: LIST
82089: LIST
82090: PUSH
82091: LD_INT 6
82093: NEG
82094: PUSH
82095: LD_INT 1
82097: NEG
82098: PUSH
82099: EMPTY
82100: LIST
82101: LIST
82102: PUSH
82103: EMPTY
82104: LIST
82105: LIST
82106: LIST
82107: LIST
82108: LIST
82109: LIST
82110: LIST
82111: LIST
82112: LIST
82113: LIST
82114: LIST
82115: LIST
82116: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
82117: LD_ADDR_VAR 0 34
82121: PUSH
82122: LD_INT 2
82124: NEG
82125: PUSH
82126: LD_INT 3
82128: NEG
82129: PUSH
82130: EMPTY
82131: LIST
82132: LIST
82133: PUSH
82134: LD_INT 3
82136: NEG
82137: PUSH
82138: LD_INT 2
82140: NEG
82141: PUSH
82142: EMPTY
82143: LIST
82144: LIST
82145: PUSH
82146: LD_INT 3
82148: NEG
82149: PUSH
82150: LD_INT 3
82152: NEG
82153: PUSH
82154: EMPTY
82155: LIST
82156: LIST
82157: PUSH
82158: LD_INT 3
82160: NEG
82161: PUSH
82162: LD_INT 4
82164: NEG
82165: PUSH
82166: EMPTY
82167: LIST
82168: LIST
82169: PUSH
82170: LD_INT 4
82172: NEG
82173: PUSH
82174: LD_INT 3
82176: NEG
82177: PUSH
82178: EMPTY
82179: LIST
82180: LIST
82181: PUSH
82182: LD_INT 4
82184: NEG
82185: PUSH
82186: LD_INT 4
82188: NEG
82189: PUSH
82190: EMPTY
82191: LIST
82192: LIST
82193: PUSH
82194: LD_INT 4
82196: NEG
82197: PUSH
82198: LD_INT 5
82200: NEG
82201: PUSH
82202: EMPTY
82203: LIST
82204: LIST
82205: PUSH
82206: LD_INT 5
82208: NEG
82209: PUSH
82210: LD_INT 4
82212: NEG
82213: PUSH
82214: EMPTY
82215: LIST
82216: LIST
82217: PUSH
82218: LD_INT 5
82220: NEG
82221: PUSH
82222: LD_INT 5
82224: NEG
82225: PUSH
82226: EMPTY
82227: LIST
82228: LIST
82229: PUSH
82230: LD_INT 5
82232: NEG
82233: PUSH
82234: LD_INT 6
82236: NEG
82237: PUSH
82238: EMPTY
82239: LIST
82240: LIST
82241: PUSH
82242: LD_INT 6
82244: NEG
82245: PUSH
82246: LD_INT 5
82248: NEG
82249: PUSH
82250: EMPTY
82251: LIST
82252: LIST
82253: PUSH
82254: LD_INT 6
82256: NEG
82257: PUSH
82258: LD_INT 6
82260: NEG
82261: PUSH
82262: EMPTY
82263: LIST
82264: LIST
82265: PUSH
82266: EMPTY
82267: LIST
82268: LIST
82269: LIST
82270: LIST
82271: LIST
82272: LIST
82273: LIST
82274: LIST
82275: LIST
82276: LIST
82277: LIST
82278: LIST
82279: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
82280: LD_ADDR_VAR 0 41
82284: PUSH
82285: LD_INT 0
82287: PUSH
82288: LD_INT 2
82290: NEG
82291: PUSH
82292: EMPTY
82293: LIST
82294: LIST
82295: PUSH
82296: LD_INT 1
82298: NEG
82299: PUSH
82300: LD_INT 3
82302: NEG
82303: PUSH
82304: EMPTY
82305: LIST
82306: LIST
82307: PUSH
82308: LD_INT 1
82310: PUSH
82311: LD_INT 2
82313: NEG
82314: PUSH
82315: EMPTY
82316: LIST
82317: LIST
82318: PUSH
82319: EMPTY
82320: LIST
82321: LIST
82322: LIST
82323: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
82324: LD_ADDR_VAR 0 42
82328: PUSH
82329: LD_INT 2
82331: PUSH
82332: LD_INT 0
82334: PUSH
82335: EMPTY
82336: LIST
82337: LIST
82338: PUSH
82339: LD_INT 2
82341: PUSH
82342: LD_INT 1
82344: NEG
82345: PUSH
82346: EMPTY
82347: LIST
82348: LIST
82349: PUSH
82350: LD_INT 3
82352: PUSH
82353: LD_INT 1
82355: PUSH
82356: EMPTY
82357: LIST
82358: LIST
82359: PUSH
82360: EMPTY
82361: LIST
82362: LIST
82363: LIST
82364: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
82365: LD_ADDR_VAR 0 43
82369: PUSH
82370: LD_INT 2
82372: PUSH
82373: LD_INT 2
82375: PUSH
82376: EMPTY
82377: LIST
82378: LIST
82379: PUSH
82380: LD_INT 3
82382: PUSH
82383: LD_INT 2
82385: PUSH
82386: EMPTY
82387: LIST
82388: LIST
82389: PUSH
82390: LD_INT 2
82392: PUSH
82393: LD_INT 3
82395: PUSH
82396: EMPTY
82397: LIST
82398: LIST
82399: PUSH
82400: EMPTY
82401: LIST
82402: LIST
82403: LIST
82404: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
82405: LD_ADDR_VAR 0 44
82409: PUSH
82410: LD_INT 0
82412: PUSH
82413: LD_INT 2
82415: PUSH
82416: EMPTY
82417: LIST
82418: LIST
82419: PUSH
82420: LD_INT 1
82422: PUSH
82423: LD_INT 3
82425: PUSH
82426: EMPTY
82427: LIST
82428: LIST
82429: PUSH
82430: LD_INT 1
82432: NEG
82433: PUSH
82434: LD_INT 2
82436: PUSH
82437: EMPTY
82438: LIST
82439: LIST
82440: PUSH
82441: EMPTY
82442: LIST
82443: LIST
82444: LIST
82445: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
82446: LD_ADDR_VAR 0 45
82450: PUSH
82451: LD_INT 2
82453: NEG
82454: PUSH
82455: LD_INT 0
82457: PUSH
82458: EMPTY
82459: LIST
82460: LIST
82461: PUSH
82462: LD_INT 2
82464: NEG
82465: PUSH
82466: LD_INT 1
82468: PUSH
82469: EMPTY
82470: LIST
82471: LIST
82472: PUSH
82473: LD_INT 3
82475: NEG
82476: PUSH
82477: LD_INT 1
82479: NEG
82480: PUSH
82481: EMPTY
82482: LIST
82483: LIST
82484: PUSH
82485: EMPTY
82486: LIST
82487: LIST
82488: LIST
82489: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
82490: LD_ADDR_VAR 0 46
82494: PUSH
82495: LD_INT 2
82497: NEG
82498: PUSH
82499: LD_INT 2
82501: NEG
82502: PUSH
82503: EMPTY
82504: LIST
82505: LIST
82506: PUSH
82507: LD_INT 2
82509: NEG
82510: PUSH
82511: LD_INT 3
82513: NEG
82514: PUSH
82515: EMPTY
82516: LIST
82517: LIST
82518: PUSH
82519: LD_INT 3
82521: NEG
82522: PUSH
82523: LD_INT 2
82525: NEG
82526: PUSH
82527: EMPTY
82528: LIST
82529: LIST
82530: PUSH
82531: EMPTY
82532: LIST
82533: LIST
82534: LIST
82535: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
82536: LD_ADDR_VAR 0 47
82540: PUSH
82541: LD_INT 2
82543: NEG
82544: PUSH
82545: LD_INT 3
82547: NEG
82548: PUSH
82549: EMPTY
82550: LIST
82551: LIST
82552: PUSH
82553: LD_INT 1
82555: NEG
82556: PUSH
82557: LD_INT 3
82559: NEG
82560: PUSH
82561: EMPTY
82562: LIST
82563: LIST
82564: PUSH
82565: EMPTY
82566: LIST
82567: LIST
82568: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
82569: LD_ADDR_VAR 0 48
82573: PUSH
82574: LD_INT 1
82576: PUSH
82577: LD_INT 2
82579: NEG
82580: PUSH
82581: EMPTY
82582: LIST
82583: LIST
82584: PUSH
82585: LD_INT 2
82587: PUSH
82588: LD_INT 1
82590: NEG
82591: PUSH
82592: EMPTY
82593: LIST
82594: LIST
82595: PUSH
82596: EMPTY
82597: LIST
82598: LIST
82599: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
82600: LD_ADDR_VAR 0 49
82604: PUSH
82605: LD_INT 3
82607: PUSH
82608: LD_INT 1
82610: PUSH
82611: EMPTY
82612: LIST
82613: LIST
82614: PUSH
82615: LD_INT 3
82617: PUSH
82618: LD_INT 2
82620: PUSH
82621: EMPTY
82622: LIST
82623: LIST
82624: PUSH
82625: EMPTY
82626: LIST
82627: LIST
82628: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
82629: LD_ADDR_VAR 0 50
82633: PUSH
82634: LD_INT 2
82636: PUSH
82637: LD_INT 3
82639: PUSH
82640: EMPTY
82641: LIST
82642: LIST
82643: PUSH
82644: LD_INT 1
82646: PUSH
82647: LD_INT 3
82649: PUSH
82650: EMPTY
82651: LIST
82652: LIST
82653: PUSH
82654: EMPTY
82655: LIST
82656: LIST
82657: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
82658: LD_ADDR_VAR 0 51
82662: PUSH
82663: LD_INT 1
82665: NEG
82666: PUSH
82667: LD_INT 2
82669: PUSH
82670: EMPTY
82671: LIST
82672: LIST
82673: PUSH
82674: LD_INT 2
82676: NEG
82677: PUSH
82678: LD_INT 1
82680: PUSH
82681: EMPTY
82682: LIST
82683: LIST
82684: PUSH
82685: EMPTY
82686: LIST
82687: LIST
82688: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
82689: LD_ADDR_VAR 0 52
82693: PUSH
82694: LD_INT 3
82696: NEG
82697: PUSH
82698: LD_INT 1
82700: NEG
82701: PUSH
82702: EMPTY
82703: LIST
82704: LIST
82705: PUSH
82706: LD_INT 3
82708: NEG
82709: PUSH
82710: LD_INT 2
82712: NEG
82713: PUSH
82714: EMPTY
82715: LIST
82716: LIST
82717: PUSH
82718: EMPTY
82719: LIST
82720: LIST
82721: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
82722: LD_ADDR_VAR 0 53
82726: PUSH
82727: LD_INT 1
82729: NEG
82730: PUSH
82731: LD_INT 3
82733: NEG
82734: PUSH
82735: EMPTY
82736: LIST
82737: LIST
82738: PUSH
82739: LD_INT 0
82741: PUSH
82742: LD_INT 3
82744: NEG
82745: PUSH
82746: EMPTY
82747: LIST
82748: LIST
82749: PUSH
82750: LD_INT 1
82752: PUSH
82753: LD_INT 2
82755: NEG
82756: PUSH
82757: EMPTY
82758: LIST
82759: LIST
82760: PUSH
82761: EMPTY
82762: LIST
82763: LIST
82764: LIST
82765: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
82766: LD_ADDR_VAR 0 54
82770: PUSH
82771: LD_INT 2
82773: PUSH
82774: LD_INT 1
82776: NEG
82777: PUSH
82778: EMPTY
82779: LIST
82780: LIST
82781: PUSH
82782: LD_INT 3
82784: PUSH
82785: LD_INT 0
82787: PUSH
82788: EMPTY
82789: LIST
82790: LIST
82791: PUSH
82792: LD_INT 3
82794: PUSH
82795: LD_INT 1
82797: PUSH
82798: EMPTY
82799: LIST
82800: LIST
82801: PUSH
82802: EMPTY
82803: LIST
82804: LIST
82805: LIST
82806: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
82807: LD_ADDR_VAR 0 55
82811: PUSH
82812: LD_INT 3
82814: PUSH
82815: LD_INT 2
82817: PUSH
82818: EMPTY
82819: LIST
82820: LIST
82821: PUSH
82822: LD_INT 3
82824: PUSH
82825: LD_INT 3
82827: PUSH
82828: EMPTY
82829: LIST
82830: LIST
82831: PUSH
82832: LD_INT 2
82834: PUSH
82835: LD_INT 3
82837: PUSH
82838: EMPTY
82839: LIST
82840: LIST
82841: PUSH
82842: EMPTY
82843: LIST
82844: LIST
82845: LIST
82846: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
82847: LD_ADDR_VAR 0 56
82851: PUSH
82852: LD_INT 1
82854: PUSH
82855: LD_INT 3
82857: PUSH
82858: EMPTY
82859: LIST
82860: LIST
82861: PUSH
82862: LD_INT 0
82864: PUSH
82865: LD_INT 3
82867: PUSH
82868: EMPTY
82869: LIST
82870: LIST
82871: PUSH
82872: LD_INT 1
82874: NEG
82875: PUSH
82876: LD_INT 2
82878: PUSH
82879: EMPTY
82880: LIST
82881: LIST
82882: PUSH
82883: EMPTY
82884: LIST
82885: LIST
82886: LIST
82887: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
82888: LD_ADDR_VAR 0 57
82892: PUSH
82893: LD_INT 2
82895: NEG
82896: PUSH
82897: LD_INT 1
82899: PUSH
82900: EMPTY
82901: LIST
82902: LIST
82903: PUSH
82904: LD_INT 3
82906: NEG
82907: PUSH
82908: LD_INT 0
82910: PUSH
82911: EMPTY
82912: LIST
82913: LIST
82914: PUSH
82915: LD_INT 3
82917: NEG
82918: PUSH
82919: LD_INT 1
82921: NEG
82922: PUSH
82923: EMPTY
82924: LIST
82925: LIST
82926: PUSH
82927: EMPTY
82928: LIST
82929: LIST
82930: LIST
82931: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
82932: LD_ADDR_VAR 0 58
82936: PUSH
82937: LD_INT 2
82939: NEG
82940: PUSH
82941: LD_INT 3
82943: NEG
82944: PUSH
82945: EMPTY
82946: LIST
82947: LIST
82948: PUSH
82949: LD_INT 3
82951: NEG
82952: PUSH
82953: LD_INT 2
82955: NEG
82956: PUSH
82957: EMPTY
82958: LIST
82959: LIST
82960: PUSH
82961: LD_INT 3
82963: NEG
82964: PUSH
82965: LD_INT 3
82967: NEG
82968: PUSH
82969: EMPTY
82970: LIST
82971: LIST
82972: PUSH
82973: EMPTY
82974: LIST
82975: LIST
82976: LIST
82977: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
82978: LD_ADDR_VAR 0 59
82982: PUSH
82983: LD_INT 1
82985: NEG
82986: PUSH
82987: LD_INT 2
82989: NEG
82990: PUSH
82991: EMPTY
82992: LIST
82993: LIST
82994: PUSH
82995: LD_INT 0
82997: PUSH
82998: LD_INT 2
83000: NEG
83001: PUSH
83002: EMPTY
83003: LIST
83004: LIST
83005: PUSH
83006: LD_INT 1
83008: PUSH
83009: LD_INT 1
83011: NEG
83012: PUSH
83013: EMPTY
83014: LIST
83015: LIST
83016: PUSH
83017: EMPTY
83018: LIST
83019: LIST
83020: LIST
83021: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
83022: LD_ADDR_VAR 0 60
83026: PUSH
83027: LD_INT 1
83029: PUSH
83030: LD_INT 1
83032: NEG
83033: PUSH
83034: EMPTY
83035: LIST
83036: LIST
83037: PUSH
83038: LD_INT 2
83040: PUSH
83041: LD_INT 0
83043: PUSH
83044: EMPTY
83045: LIST
83046: LIST
83047: PUSH
83048: LD_INT 2
83050: PUSH
83051: LD_INT 1
83053: PUSH
83054: EMPTY
83055: LIST
83056: LIST
83057: PUSH
83058: EMPTY
83059: LIST
83060: LIST
83061: LIST
83062: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
83063: LD_ADDR_VAR 0 61
83067: PUSH
83068: LD_INT 2
83070: PUSH
83071: LD_INT 1
83073: PUSH
83074: EMPTY
83075: LIST
83076: LIST
83077: PUSH
83078: LD_INT 2
83080: PUSH
83081: LD_INT 2
83083: PUSH
83084: EMPTY
83085: LIST
83086: LIST
83087: PUSH
83088: LD_INT 1
83090: PUSH
83091: LD_INT 2
83093: PUSH
83094: EMPTY
83095: LIST
83096: LIST
83097: PUSH
83098: EMPTY
83099: LIST
83100: LIST
83101: LIST
83102: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
83103: LD_ADDR_VAR 0 62
83107: PUSH
83108: LD_INT 1
83110: PUSH
83111: LD_INT 2
83113: PUSH
83114: EMPTY
83115: LIST
83116: LIST
83117: PUSH
83118: LD_INT 0
83120: PUSH
83121: LD_INT 2
83123: PUSH
83124: EMPTY
83125: LIST
83126: LIST
83127: PUSH
83128: LD_INT 1
83130: NEG
83131: PUSH
83132: LD_INT 1
83134: PUSH
83135: EMPTY
83136: LIST
83137: LIST
83138: PUSH
83139: EMPTY
83140: LIST
83141: LIST
83142: LIST
83143: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
83144: LD_ADDR_VAR 0 63
83148: PUSH
83149: LD_INT 1
83151: NEG
83152: PUSH
83153: LD_INT 1
83155: PUSH
83156: EMPTY
83157: LIST
83158: LIST
83159: PUSH
83160: LD_INT 2
83162: NEG
83163: PUSH
83164: LD_INT 0
83166: PUSH
83167: EMPTY
83168: LIST
83169: LIST
83170: PUSH
83171: LD_INT 2
83173: NEG
83174: PUSH
83175: LD_INT 1
83177: NEG
83178: PUSH
83179: EMPTY
83180: LIST
83181: LIST
83182: PUSH
83183: EMPTY
83184: LIST
83185: LIST
83186: LIST
83187: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
83188: LD_ADDR_VAR 0 64
83192: PUSH
83193: LD_INT 1
83195: NEG
83196: PUSH
83197: LD_INT 2
83199: NEG
83200: PUSH
83201: EMPTY
83202: LIST
83203: LIST
83204: PUSH
83205: LD_INT 2
83207: NEG
83208: PUSH
83209: LD_INT 1
83211: NEG
83212: PUSH
83213: EMPTY
83214: LIST
83215: LIST
83216: PUSH
83217: LD_INT 2
83219: NEG
83220: PUSH
83221: LD_INT 2
83223: NEG
83224: PUSH
83225: EMPTY
83226: LIST
83227: LIST
83228: PUSH
83229: EMPTY
83230: LIST
83231: LIST
83232: LIST
83233: ST_TO_ADDR
// end ; 2 :
83234: GO 86500
83236: LD_INT 2
83238: DOUBLE
83239: EQUAL
83240: IFTRUE 83244
83242: GO 86499
83244: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
83245: LD_ADDR_VAR 0 29
83249: PUSH
83250: LD_INT 4
83252: PUSH
83253: LD_INT 0
83255: PUSH
83256: EMPTY
83257: LIST
83258: LIST
83259: PUSH
83260: LD_INT 4
83262: PUSH
83263: LD_INT 1
83265: NEG
83266: PUSH
83267: EMPTY
83268: LIST
83269: LIST
83270: PUSH
83271: LD_INT 5
83273: PUSH
83274: LD_INT 0
83276: PUSH
83277: EMPTY
83278: LIST
83279: LIST
83280: PUSH
83281: LD_INT 5
83283: PUSH
83284: LD_INT 1
83286: PUSH
83287: EMPTY
83288: LIST
83289: LIST
83290: PUSH
83291: LD_INT 4
83293: PUSH
83294: LD_INT 1
83296: PUSH
83297: EMPTY
83298: LIST
83299: LIST
83300: PUSH
83301: LD_INT 3
83303: PUSH
83304: LD_INT 0
83306: PUSH
83307: EMPTY
83308: LIST
83309: LIST
83310: PUSH
83311: LD_INT 3
83313: PUSH
83314: LD_INT 1
83316: NEG
83317: PUSH
83318: EMPTY
83319: LIST
83320: LIST
83321: PUSH
83322: LD_INT 3
83324: PUSH
83325: LD_INT 2
83327: NEG
83328: PUSH
83329: EMPTY
83330: LIST
83331: LIST
83332: PUSH
83333: LD_INT 5
83335: PUSH
83336: LD_INT 2
83338: PUSH
83339: EMPTY
83340: LIST
83341: LIST
83342: PUSH
83343: LD_INT 3
83345: PUSH
83346: LD_INT 3
83348: PUSH
83349: EMPTY
83350: LIST
83351: LIST
83352: PUSH
83353: LD_INT 3
83355: PUSH
83356: LD_INT 2
83358: PUSH
83359: EMPTY
83360: LIST
83361: LIST
83362: PUSH
83363: LD_INT 4
83365: PUSH
83366: LD_INT 3
83368: PUSH
83369: EMPTY
83370: LIST
83371: LIST
83372: PUSH
83373: LD_INT 4
83375: PUSH
83376: LD_INT 4
83378: PUSH
83379: EMPTY
83380: LIST
83381: LIST
83382: PUSH
83383: LD_INT 3
83385: PUSH
83386: LD_INT 4
83388: PUSH
83389: EMPTY
83390: LIST
83391: LIST
83392: PUSH
83393: LD_INT 2
83395: PUSH
83396: LD_INT 3
83398: PUSH
83399: EMPTY
83400: LIST
83401: LIST
83402: PUSH
83403: LD_INT 2
83405: PUSH
83406: LD_INT 2
83408: PUSH
83409: EMPTY
83410: LIST
83411: LIST
83412: PUSH
83413: LD_INT 4
83415: PUSH
83416: LD_INT 2
83418: PUSH
83419: EMPTY
83420: LIST
83421: LIST
83422: PUSH
83423: LD_INT 2
83425: PUSH
83426: LD_INT 4
83428: PUSH
83429: EMPTY
83430: LIST
83431: LIST
83432: PUSH
83433: LD_INT 0
83435: PUSH
83436: LD_INT 4
83438: PUSH
83439: EMPTY
83440: LIST
83441: LIST
83442: PUSH
83443: LD_INT 0
83445: PUSH
83446: LD_INT 3
83448: PUSH
83449: EMPTY
83450: LIST
83451: LIST
83452: PUSH
83453: LD_INT 1
83455: PUSH
83456: LD_INT 4
83458: PUSH
83459: EMPTY
83460: LIST
83461: LIST
83462: PUSH
83463: LD_INT 1
83465: PUSH
83466: LD_INT 5
83468: PUSH
83469: EMPTY
83470: LIST
83471: LIST
83472: PUSH
83473: LD_INT 0
83475: PUSH
83476: LD_INT 5
83478: PUSH
83479: EMPTY
83480: LIST
83481: LIST
83482: PUSH
83483: LD_INT 1
83485: NEG
83486: PUSH
83487: LD_INT 4
83489: PUSH
83490: EMPTY
83491: LIST
83492: LIST
83493: PUSH
83494: LD_INT 1
83496: NEG
83497: PUSH
83498: LD_INT 3
83500: PUSH
83501: EMPTY
83502: LIST
83503: LIST
83504: PUSH
83505: LD_INT 2
83507: PUSH
83508: LD_INT 5
83510: PUSH
83511: EMPTY
83512: LIST
83513: LIST
83514: PUSH
83515: LD_INT 2
83517: NEG
83518: PUSH
83519: LD_INT 3
83521: PUSH
83522: EMPTY
83523: LIST
83524: LIST
83525: PUSH
83526: LD_INT 3
83528: NEG
83529: PUSH
83530: LD_INT 0
83532: PUSH
83533: EMPTY
83534: LIST
83535: LIST
83536: PUSH
83537: LD_INT 3
83539: NEG
83540: PUSH
83541: LD_INT 1
83543: NEG
83544: PUSH
83545: EMPTY
83546: LIST
83547: LIST
83548: PUSH
83549: LD_INT 2
83551: NEG
83552: PUSH
83553: LD_INT 0
83555: PUSH
83556: EMPTY
83557: LIST
83558: LIST
83559: PUSH
83560: LD_INT 2
83562: NEG
83563: PUSH
83564: LD_INT 1
83566: PUSH
83567: EMPTY
83568: LIST
83569: LIST
83570: PUSH
83571: LD_INT 3
83573: NEG
83574: PUSH
83575: LD_INT 1
83577: PUSH
83578: EMPTY
83579: LIST
83580: LIST
83581: PUSH
83582: LD_INT 4
83584: NEG
83585: PUSH
83586: LD_INT 0
83588: PUSH
83589: EMPTY
83590: LIST
83591: LIST
83592: PUSH
83593: LD_INT 4
83595: NEG
83596: PUSH
83597: LD_INT 1
83599: NEG
83600: PUSH
83601: EMPTY
83602: LIST
83603: LIST
83604: PUSH
83605: LD_INT 4
83607: NEG
83608: PUSH
83609: LD_INT 2
83611: NEG
83612: PUSH
83613: EMPTY
83614: LIST
83615: LIST
83616: PUSH
83617: LD_INT 2
83619: NEG
83620: PUSH
83621: LD_INT 2
83623: PUSH
83624: EMPTY
83625: LIST
83626: LIST
83627: PUSH
83628: LD_INT 4
83630: NEG
83631: PUSH
83632: LD_INT 4
83634: NEG
83635: PUSH
83636: EMPTY
83637: LIST
83638: LIST
83639: PUSH
83640: LD_INT 4
83642: NEG
83643: PUSH
83644: LD_INT 5
83646: NEG
83647: PUSH
83648: EMPTY
83649: LIST
83650: LIST
83651: PUSH
83652: LD_INT 3
83654: NEG
83655: PUSH
83656: LD_INT 4
83658: NEG
83659: PUSH
83660: EMPTY
83661: LIST
83662: LIST
83663: PUSH
83664: LD_INT 3
83666: NEG
83667: PUSH
83668: LD_INT 3
83670: NEG
83671: PUSH
83672: EMPTY
83673: LIST
83674: LIST
83675: PUSH
83676: LD_INT 4
83678: NEG
83679: PUSH
83680: LD_INT 3
83682: NEG
83683: PUSH
83684: EMPTY
83685: LIST
83686: LIST
83687: PUSH
83688: LD_INT 5
83690: NEG
83691: PUSH
83692: LD_INT 4
83694: NEG
83695: PUSH
83696: EMPTY
83697: LIST
83698: LIST
83699: PUSH
83700: LD_INT 5
83702: NEG
83703: PUSH
83704: LD_INT 5
83706: NEG
83707: PUSH
83708: EMPTY
83709: LIST
83710: LIST
83711: PUSH
83712: LD_INT 3
83714: NEG
83715: PUSH
83716: LD_INT 5
83718: NEG
83719: PUSH
83720: EMPTY
83721: LIST
83722: LIST
83723: PUSH
83724: LD_INT 5
83726: NEG
83727: PUSH
83728: LD_INT 3
83730: NEG
83731: PUSH
83732: EMPTY
83733: LIST
83734: LIST
83735: PUSH
83736: EMPTY
83737: LIST
83738: LIST
83739: LIST
83740: LIST
83741: LIST
83742: LIST
83743: LIST
83744: LIST
83745: LIST
83746: LIST
83747: LIST
83748: LIST
83749: LIST
83750: LIST
83751: LIST
83752: LIST
83753: LIST
83754: LIST
83755: LIST
83756: LIST
83757: LIST
83758: LIST
83759: LIST
83760: LIST
83761: LIST
83762: LIST
83763: LIST
83764: LIST
83765: LIST
83766: LIST
83767: LIST
83768: LIST
83769: LIST
83770: LIST
83771: LIST
83772: LIST
83773: LIST
83774: LIST
83775: LIST
83776: LIST
83777: LIST
83778: LIST
83779: LIST
83780: LIST
83781: LIST
83782: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
83783: LD_ADDR_VAR 0 30
83787: PUSH
83788: LD_INT 4
83790: PUSH
83791: LD_INT 4
83793: PUSH
83794: EMPTY
83795: LIST
83796: LIST
83797: PUSH
83798: LD_INT 4
83800: PUSH
83801: LD_INT 3
83803: PUSH
83804: EMPTY
83805: LIST
83806: LIST
83807: PUSH
83808: LD_INT 5
83810: PUSH
83811: LD_INT 4
83813: PUSH
83814: EMPTY
83815: LIST
83816: LIST
83817: PUSH
83818: LD_INT 5
83820: PUSH
83821: LD_INT 5
83823: PUSH
83824: EMPTY
83825: LIST
83826: LIST
83827: PUSH
83828: LD_INT 4
83830: PUSH
83831: LD_INT 5
83833: PUSH
83834: EMPTY
83835: LIST
83836: LIST
83837: PUSH
83838: LD_INT 3
83840: PUSH
83841: LD_INT 4
83843: PUSH
83844: EMPTY
83845: LIST
83846: LIST
83847: PUSH
83848: LD_INT 3
83850: PUSH
83851: LD_INT 3
83853: PUSH
83854: EMPTY
83855: LIST
83856: LIST
83857: PUSH
83858: LD_INT 5
83860: PUSH
83861: LD_INT 3
83863: PUSH
83864: EMPTY
83865: LIST
83866: LIST
83867: PUSH
83868: LD_INT 3
83870: PUSH
83871: LD_INT 5
83873: PUSH
83874: EMPTY
83875: LIST
83876: LIST
83877: PUSH
83878: LD_INT 0
83880: PUSH
83881: LD_INT 3
83883: PUSH
83884: EMPTY
83885: LIST
83886: LIST
83887: PUSH
83888: LD_INT 0
83890: PUSH
83891: LD_INT 2
83893: PUSH
83894: EMPTY
83895: LIST
83896: LIST
83897: PUSH
83898: LD_INT 1
83900: PUSH
83901: LD_INT 3
83903: PUSH
83904: EMPTY
83905: LIST
83906: LIST
83907: PUSH
83908: LD_INT 1
83910: PUSH
83911: LD_INT 4
83913: PUSH
83914: EMPTY
83915: LIST
83916: LIST
83917: PUSH
83918: LD_INT 0
83920: PUSH
83921: LD_INT 4
83923: PUSH
83924: EMPTY
83925: LIST
83926: LIST
83927: PUSH
83928: LD_INT 1
83930: NEG
83931: PUSH
83932: LD_INT 3
83934: PUSH
83935: EMPTY
83936: LIST
83937: LIST
83938: PUSH
83939: LD_INT 1
83941: NEG
83942: PUSH
83943: LD_INT 2
83945: PUSH
83946: EMPTY
83947: LIST
83948: LIST
83949: PUSH
83950: LD_INT 2
83952: PUSH
83953: LD_INT 4
83955: PUSH
83956: EMPTY
83957: LIST
83958: LIST
83959: PUSH
83960: LD_INT 2
83962: NEG
83963: PUSH
83964: LD_INT 2
83966: PUSH
83967: EMPTY
83968: LIST
83969: LIST
83970: PUSH
83971: LD_INT 4
83973: NEG
83974: PUSH
83975: LD_INT 0
83977: PUSH
83978: EMPTY
83979: LIST
83980: LIST
83981: PUSH
83982: LD_INT 4
83984: NEG
83985: PUSH
83986: LD_INT 1
83988: NEG
83989: PUSH
83990: EMPTY
83991: LIST
83992: LIST
83993: PUSH
83994: LD_INT 3
83996: NEG
83997: PUSH
83998: LD_INT 0
84000: PUSH
84001: EMPTY
84002: LIST
84003: LIST
84004: PUSH
84005: LD_INT 3
84007: NEG
84008: PUSH
84009: LD_INT 1
84011: PUSH
84012: EMPTY
84013: LIST
84014: LIST
84015: PUSH
84016: LD_INT 4
84018: NEG
84019: PUSH
84020: LD_INT 1
84022: PUSH
84023: EMPTY
84024: LIST
84025: LIST
84026: PUSH
84027: LD_INT 5
84029: NEG
84030: PUSH
84031: LD_INT 0
84033: PUSH
84034: EMPTY
84035: LIST
84036: LIST
84037: PUSH
84038: LD_INT 5
84040: NEG
84041: PUSH
84042: LD_INT 1
84044: NEG
84045: PUSH
84046: EMPTY
84047: LIST
84048: LIST
84049: PUSH
84050: LD_INT 5
84052: NEG
84053: PUSH
84054: LD_INT 2
84056: NEG
84057: PUSH
84058: EMPTY
84059: LIST
84060: LIST
84061: PUSH
84062: LD_INT 3
84064: NEG
84065: PUSH
84066: LD_INT 2
84068: PUSH
84069: EMPTY
84070: LIST
84071: LIST
84072: PUSH
84073: LD_INT 3
84075: NEG
84076: PUSH
84077: LD_INT 3
84079: NEG
84080: PUSH
84081: EMPTY
84082: LIST
84083: LIST
84084: PUSH
84085: LD_INT 3
84087: NEG
84088: PUSH
84089: LD_INT 4
84091: NEG
84092: PUSH
84093: EMPTY
84094: LIST
84095: LIST
84096: PUSH
84097: LD_INT 2
84099: NEG
84100: PUSH
84101: LD_INT 3
84103: NEG
84104: PUSH
84105: EMPTY
84106: LIST
84107: LIST
84108: PUSH
84109: LD_INT 2
84111: NEG
84112: PUSH
84113: LD_INT 2
84115: NEG
84116: PUSH
84117: EMPTY
84118: LIST
84119: LIST
84120: PUSH
84121: LD_INT 3
84123: NEG
84124: PUSH
84125: LD_INT 2
84127: NEG
84128: PUSH
84129: EMPTY
84130: LIST
84131: LIST
84132: PUSH
84133: LD_INT 4
84135: NEG
84136: PUSH
84137: LD_INT 3
84139: NEG
84140: PUSH
84141: EMPTY
84142: LIST
84143: LIST
84144: PUSH
84145: LD_INT 4
84147: NEG
84148: PUSH
84149: LD_INT 4
84151: NEG
84152: PUSH
84153: EMPTY
84154: LIST
84155: LIST
84156: PUSH
84157: LD_INT 2
84159: NEG
84160: PUSH
84161: LD_INT 4
84163: NEG
84164: PUSH
84165: EMPTY
84166: LIST
84167: LIST
84168: PUSH
84169: LD_INT 4
84171: NEG
84172: PUSH
84173: LD_INT 2
84175: NEG
84176: PUSH
84177: EMPTY
84178: LIST
84179: LIST
84180: PUSH
84181: LD_INT 0
84183: PUSH
84184: LD_INT 4
84186: NEG
84187: PUSH
84188: EMPTY
84189: LIST
84190: LIST
84191: PUSH
84192: LD_INT 0
84194: PUSH
84195: LD_INT 5
84197: NEG
84198: PUSH
84199: EMPTY
84200: LIST
84201: LIST
84202: PUSH
84203: LD_INT 1
84205: PUSH
84206: LD_INT 4
84208: NEG
84209: PUSH
84210: EMPTY
84211: LIST
84212: LIST
84213: PUSH
84214: LD_INT 1
84216: PUSH
84217: LD_INT 3
84219: NEG
84220: PUSH
84221: EMPTY
84222: LIST
84223: LIST
84224: PUSH
84225: LD_INT 0
84227: PUSH
84228: LD_INT 3
84230: NEG
84231: PUSH
84232: EMPTY
84233: LIST
84234: LIST
84235: PUSH
84236: LD_INT 1
84238: NEG
84239: PUSH
84240: LD_INT 4
84242: NEG
84243: PUSH
84244: EMPTY
84245: LIST
84246: LIST
84247: PUSH
84248: LD_INT 1
84250: NEG
84251: PUSH
84252: LD_INT 5
84254: NEG
84255: PUSH
84256: EMPTY
84257: LIST
84258: LIST
84259: PUSH
84260: LD_INT 2
84262: PUSH
84263: LD_INT 3
84265: NEG
84266: PUSH
84267: EMPTY
84268: LIST
84269: LIST
84270: PUSH
84271: LD_INT 2
84273: NEG
84274: PUSH
84275: LD_INT 5
84277: NEG
84278: PUSH
84279: EMPTY
84280: LIST
84281: LIST
84282: PUSH
84283: EMPTY
84284: LIST
84285: LIST
84286: LIST
84287: LIST
84288: LIST
84289: LIST
84290: LIST
84291: LIST
84292: LIST
84293: LIST
84294: LIST
84295: LIST
84296: LIST
84297: LIST
84298: LIST
84299: LIST
84300: LIST
84301: LIST
84302: LIST
84303: LIST
84304: LIST
84305: LIST
84306: LIST
84307: LIST
84308: LIST
84309: LIST
84310: LIST
84311: LIST
84312: LIST
84313: LIST
84314: LIST
84315: LIST
84316: LIST
84317: LIST
84318: LIST
84319: LIST
84320: LIST
84321: LIST
84322: LIST
84323: LIST
84324: LIST
84325: LIST
84326: LIST
84327: LIST
84328: LIST
84329: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
84330: LD_ADDR_VAR 0 31
84334: PUSH
84335: LD_INT 0
84337: PUSH
84338: LD_INT 4
84340: PUSH
84341: EMPTY
84342: LIST
84343: LIST
84344: PUSH
84345: LD_INT 0
84347: PUSH
84348: LD_INT 3
84350: PUSH
84351: EMPTY
84352: LIST
84353: LIST
84354: PUSH
84355: LD_INT 1
84357: PUSH
84358: LD_INT 4
84360: PUSH
84361: EMPTY
84362: LIST
84363: LIST
84364: PUSH
84365: LD_INT 1
84367: PUSH
84368: LD_INT 5
84370: PUSH
84371: EMPTY
84372: LIST
84373: LIST
84374: PUSH
84375: LD_INT 0
84377: PUSH
84378: LD_INT 5
84380: PUSH
84381: EMPTY
84382: LIST
84383: LIST
84384: PUSH
84385: LD_INT 1
84387: NEG
84388: PUSH
84389: LD_INT 4
84391: PUSH
84392: EMPTY
84393: LIST
84394: LIST
84395: PUSH
84396: LD_INT 1
84398: NEG
84399: PUSH
84400: LD_INT 3
84402: PUSH
84403: EMPTY
84404: LIST
84405: LIST
84406: PUSH
84407: LD_INT 2
84409: PUSH
84410: LD_INT 5
84412: PUSH
84413: EMPTY
84414: LIST
84415: LIST
84416: PUSH
84417: LD_INT 2
84419: NEG
84420: PUSH
84421: LD_INT 3
84423: PUSH
84424: EMPTY
84425: LIST
84426: LIST
84427: PUSH
84428: LD_INT 3
84430: NEG
84431: PUSH
84432: LD_INT 0
84434: PUSH
84435: EMPTY
84436: LIST
84437: LIST
84438: PUSH
84439: LD_INT 3
84441: NEG
84442: PUSH
84443: LD_INT 1
84445: NEG
84446: PUSH
84447: EMPTY
84448: LIST
84449: LIST
84450: PUSH
84451: LD_INT 2
84453: NEG
84454: PUSH
84455: LD_INT 0
84457: PUSH
84458: EMPTY
84459: LIST
84460: LIST
84461: PUSH
84462: LD_INT 2
84464: NEG
84465: PUSH
84466: LD_INT 1
84468: PUSH
84469: EMPTY
84470: LIST
84471: LIST
84472: PUSH
84473: LD_INT 3
84475: NEG
84476: PUSH
84477: LD_INT 1
84479: PUSH
84480: EMPTY
84481: LIST
84482: LIST
84483: PUSH
84484: LD_INT 4
84486: NEG
84487: PUSH
84488: LD_INT 0
84490: PUSH
84491: EMPTY
84492: LIST
84493: LIST
84494: PUSH
84495: LD_INT 4
84497: NEG
84498: PUSH
84499: LD_INT 1
84501: NEG
84502: PUSH
84503: EMPTY
84504: LIST
84505: LIST
84506: PUSH
84507: LD_INT 4
84509: NEG
84510: PUSH
84511: LD_INT 2
84513: NEG
84514: PUSH
84515: EMPTY
84516: LIST
84517: LIST
84518: PUSH
84519: LD_INT 2
84521: NEG
84522: PUSH
84523: LD_INT 2
84525: PUSH
84526: EMPTY
84527: LIST
84528: LIST
84529: PUSH
84530: LD_INT 4
84532: NEG
84533: PUSH
84534: LD_INT 4
84536: NEG
84537: PUSH
84538: EMPTY
84539: LIST
84540: LIST
84541: PUSH
84542: LD_INT 4
84544: NEG
84545: PUSH
84546: LD_INT 5
84548: NEG
84549: PUSH
84550: EMPTY
84551: LIST
84552: LIST
84553: PUSH
84554: LD_INT 3
84556: NEG
84557: PUSH
84558: LD_INT 4
84560: NEG
84561: PUSH
84562: EMPTY
84563: LIST
84564: LIST
84565: PUSH
84566: LD_INT 3
84568: NEG
84569: PUSH
84570: LD_INT 3
84572: NEG
84573: PUSH
84574: EMPTY
84575: LIST
84576: LIST
84577: PUSH
84578: LD_INT 4
84580: NEG
84581: PUSH
84582: LD_INT 3
84584: NEG
84585: PUSH
84586: EMPTY
84587: LIST
84588: LIST
84589: PUSH
84590: LD_INT 5
84592: NEG
84593: PUSH
84594: LD_INT 4
84596: NEG
84597: PUSH
84598: EMPTY
84599: LIST
84600: LIST
84601: PUSH
84602: LD_INT 5
84604: NEG
84605: PUSH
84606: LD_INT 5
84608: NEG
84609: PUSH
84610: EMPTY
84611: LIST
84612: LIST
84613: PUSH
84614: LD_INT 3
84616: NEG
84617: PUSH
84618: LD_INT 5
84620: NEG
84621: PUSH
84622: EMPTY
84623: LIST
84624: LIST
84625: PUSH
84626: LD_INT 5
84628: NEG
84629: PUSH
84630: LD_INT 3
84632: NEG
84633: PUSH
84634: EMPTY
84635: LIST
84636: LIST
84637: PUSH
84638: LD_INT 0
84640: PUSH
84641: LD_INT 3
84643: NEG
84644: PUSH
84645: EMPTY
84646: LIST
84647: LIST
84648: PUSH
84649: LD_INT 0
84651: PUSH
84652: LD_INT 4
84654: NEG
84655: PUSH
84656: EMPTY
84657: LIST
84658: LIST
84659: PUSH
84660: LD_INT 1
84662: PUSH
84663: LD_INT 3
84665: NEG
84666: PUSH
84667: EMPTY
84668: LIST
84669: LIST
84670: PUSH
84671: LD_INT 1
84673: PUSH
84674: LD_INT 2
84676: NEG
84677: PUSH
84678: EMPTY
84679: LIST
84680: LIST
84681: PUSH
84682: LD_INT 0
84684: PUSH
84685: LD_INT 2
84687: NEG
84688: PUSH
84689: EMPTY
84690: LIST
84691: LIST
84692: PUSH
84693: LD_INT 1
84695: NEG
84696: PUSH
84697: LD_INT 3
84699: NEG
84700: PUSH
84701: EMPTY
84702: LIST
84703: LIST
84704: PUSH
84705: LD_INT 1
84707: NEG
84708: PUSH
84709: LD_INT 4
84711: NEG
84712: PUSH
84713: EMPTY
84714: LIST
84715: LIST
84716: PUSH
84717: LD_INT 2
84719: PUSH
84720: LD_INT 2
84722: NEG
84723: PUSH
84724: EMPTY
84725: LIST
84726: LIST
84727: PUSH
84728: LD_INT 2
84730: NEG
84731: PUSH
84732: LD_INT 4
84734: NEG
84735: PUSH
84736: EMPTY
84737: LIST
84738: LIST
84739: PUSH
84740: LD_INT 4
84742: PUSH
84743: LD_INT 0
84745: PUSH
84746: EMPTY
84747: LIST
84748: LIST
84749: PUSH
84750: LD_INT 4
84752: PUSH
84753: LD_INT 1
84755: NEG
84756: PUSH
84757: EMPTY
84758: LIST
84759: LIST
84760: PUSH
84761: LD_INT 5
84763: PUSH
84764: LD_INT 0
84766: PUSH
84767: EMPTY
84768: LIST
84769: LIST
84770: PUSH
84771: LD_INT 5
84773: PUSH
84774: LD_INT 1
84776: PUSH
84777: EMPTY
84778: LIST
84779: LIST
84780: PUSH
84781: LD_INT 4
84783: PUSH
84784: LD_INT 1
84786: PUSH
84787: EMPTY
84788: LIST
84789: LIST
84790: PUSH
84791: LD_INT 3
84793: PUSH
84794: LD_INT 0
84796: PUSH
84797: EMPTY
84798: LIST
84799: LIST
84800: PUSH
84801: LD_INT 3
84803: PUSH
84804: LD_INT 1
84806: NEG
84807: PUSH
84808: EMPTY
84809: LIST
84810: LIST
84811: PUSH
84812: LD_INT 3
84814: PUSH
84815: LD_INT 2
84817: NEG
84818: PUSH
84819: EMPTY
84820: LIST
84821: LIST
84822: PUSH
84823: LD_INT 5
84825: PUSH
84826: LD_INT 2
84828: PUSH
84829: EMPTY
84830: LIST
84831: LIST
84832: PUSH
84833: EMPTY
84834: LIST
84835: LIST
84836: LIST
84837: LIST
84838: LIST
84839: LIST
84840: LIST
84841: LIST
84842: LIST
84843: LIST
84844: LIST
84845: LIST
84846: LIST
84847: LIST
84848: LIST
84849: LIST
84850: LIST
84851: LIST
84852: LIST
84853: LIST
84854: LIST
84855: LIST
84856: LIST
84857: LIST
84858: LIST
84859: LIST
84860: LIST
84861: LIST
84862: LIST
84863: LIST
84864: LIST
84865: LIST
84866: LIST
84867: LIST
84868: LIST
84869: LIST
84870: LIST
84871: LIST
84872: LIST
84873: LIST
84874: LIST
84875: LIST
84876: LIST
84877: LIST
84878: LIST
84879: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
84880: LD_ADDR_VAR 0 32
84884: PUSH
84885: LD_INT 4
84887: NEG
84888: PUSH
84889: LD_INT 0
84891: PUSH
84892: EMPTY
84893: LIST
84894: LIST
84895: PUSH
84896: LD_INT 4
84898: NEG
84899: PUSH
84900: LD_INT 1
84902: NEG
84903: PUSH
84904: EMPTY
84905: LIST
84906: LIST
84907: PUSH
84908: LD_INT 3
84910: NEG
84911: PUSH
84912: LD_INT 0
84914: PUSH
84915: EMPTY
84916: LIST
84917: LIST
84918: PUSH
84919: LD_INT 3
84921: NEG
84922: PUSH
84923: LD_INT 1
84925: PUSH
84926: EMPTY
84927: LIST
84928: LIST
84929: PUSH
84930: LD_INT 4
84932: NEG
84933: PUSH
84934: LD_INT 1
84936: PUSH
84937: EMPTY
84938: LIST
84939: LIST
84940: PUSH
84941: LD_INT 5
84943: NEG
84944: PUSH
84945: LD_INT 0
84947: PUSH
84948: EMPTY
84949: LIST
84950: LIST
84951: PUSH
84952: LD_INT 5
84954: NEG
84955: PUSH
84956: LD_INT 1
84958: NEG
84959: PUSH
84960: EMPTY
84961: LIST
84962: LIST
84963: PUSH
84964: LD_INT 5
84966: NEG
84967: PUSH
84968: LD_INT 2
84970: NEG
84971: PUSH
84972: EMPTY
84973: LIST
84974: LIST
84975: PUSH
84976: LD_INT 3
84978: NEG
84979: PUSH
84980: LD_INT 2
84982: PUSH
84983: EMPTY
84984: LIST
84985: LIST
84986: PUSH
84987: LD_INT 3
84989: NEG
84990: PUSH
84991: LD_INT 3
84993: NEG
84994: PUSH
84995: EMPTY
84996: LIST
84997: LIST
84998: PUSH
84999: LD_INT 3
85001: NEG
85002: PUSH
85003: LD_INT 4
85005: NEG
85006: PUSH
85007: EMPTY
85008: LIST
85009: LIST
85010: PUSH
85011: LD_INT 2
85013: NEG
85014: PUSH
85015: LD_INT 3
85017: NEG
85018: PUSH
85019: EMPTY
85020: LIST
85021: LIST
85022: PUSH
85023: LD_INT 2
85025: NEG
85026: PUSH
85027: LD_INT 2
85029: NEG
85030: PUSH
85031: EMPTY
85032: LIST
85033: LIST
85034: PUSH
85035: LD_INT 3
85037: NEG
85038: PUSH
85039: LD_INT 2
85041: NEG
85042: PUSH
85043: EMPTY
85044: LIST
85045: LIST
85046: PUSH
85047: LD_INT 4
85049: NEG
85050: PUSH
85051: LD_INT 3
85053: NEG
85054: PUSH
85055: EMPTY
85056: LIST
85057: LIST
85058: PUSH
85059: LD_INT 4
85061: NEG
85062: PUSH
85063: LD_INT 4
85065: NEG
85066: PUSH
85067: EMPTY
85068: LIST
85069: LIST
85070: PUSH
85071: LD_INT 2
85073: NEG
85074: PUSH
85075: LD_INT 4
85077: NEG
85078: PUSH
85079: EMPTY
85080: LIST
85081: LIST
85082: PUSH
85083: LD_INT 4
85085: NEG
85086: PUSH
85087: LD_INT 2
85089: NEG
85090: PUSH
85091: EMPTY
85092: LIST
85093: LIST
85094: PUSH
85095: LD_INT 0
85097: PUSH
85098: LD_INT 4
85100: NEG
85101: PUSH
85102: EMPTY
85103: LIST
85104: LIST
85105: PUSH
85106: LD_INT 0
85108: PUSH
85109: LD_INT 5
85111: NEG
85112: PUSH
85113: EMPTY
85114: LIST
85115: LIST
85116: PUSH
85117: LD_INT 1
85119: PUSH
85120: LD_INT 4
85122: NEG
85123: PUSH
85124: EMPTY
85125: LIST
85126: LIST
85127: PUSH
85128: LD_INT 1
85130: PUSH
85131: LD_INT 3
85133: NEG
85134: PUSH
85135: EMPTY
85136: LIST
85137: LIST
85138: PUSH
85139: LD_INT 0
85141: PUSH
85142: LD_INT 3
85144: NEG
85145: PUSH
85146: EMPTY
85147: LIST
85148: LIST
85149: PUSH
85150: LD_INT 1
85152: NEG
85153: PUSH
85154: LD_INT 4
85156: NEG
85157: PUSH
85158: EMPTY
85159: LIST
85160: LIST
85161: PUSH
85162: LD_INT 1
85164: NEG
85165: PUSH
85166: LD_INT 5
85168: NEG
85169: PUSH
85170: EMPTY
85171: LIST
85172: LIST
85173: PUSH
85174: LD_INT 2
85176: PUSH
85177: LD_INT 3
85179: NEG
85180: PUSH
85181: EMPTY
85182: LIST
85183: LIST
85184: PUSH
85185: LD_INT 2
85187: NEG
85188: PUSH
85189: LD_INT 5
85191: NEG
85192: PUSH
85193: EMPTY
85194: LIST
85195: LIST
85196: PUSH
85197: LD_INT 3
85199: PUSH
85200: LD_INT 0
85202: PUSH
85203: EMPTY
85204: LIST
85205: LIST
85206: PUSH
85207: LD_INT 3
85209: PUSH
85210: LD_INT 1
85212: NEG
85213: PUSH
85214: EMPTY
85215: LIST
85216: LIST
85217: PUSH
85218: LD_INT 4
85220: PUSH
85221: LD_INT 0
85223: PUSH
85224: EMPTY
85225: LIST
85226: LIST
85227: PUSH
85228: LD_INT 4
85230: PUSH
85231: LD_INT 1
85233: PUSH
85234: EMPTY
85235: LIST
85236: LIST
85237: PUSH
85238: LD_INT 3
85240: PUSH
85241: LD_INT 1
85243: PUSH
85244: EMPTY
85245: LIST
85246: LIST
85247: PUSH
85248: LD_INT 2
85250: PUSH
85251: LD_INT 0
85253: PUSH
85254: EMPTY
85255: LIST
85256: LIST
85257: PUSH
85258: LD_INT 2
85260: PUSH
85261: LD_INT 1
85263: NEG
85264: PUSH
85265: EMPTY
85266: LIST
85267: LIST
85268: PUSH
85269: LD_INT 2
85271: PUSH
85272: LD_INT 2
85274: NEG
85275: PUSH
85276: EMPTY
85277: LIST
85278: LIST
85279: PUSH
85280: LD_INT 4
85282: PUSH
85283: LD_INT 2
85285: PUSH
85286: EMPTY
85287: LIST
85288: LIST
85289: PUSH
85290: LD_INT 4
85292: PUSH
85293: LD_INT 4
85295: PUSH
85296: EMPTY
85297: LIST
85298: LIST
85299: PUSH
85300: LD_INT 4
85302: PUSH
85303: LD_INT 3
85305: PUSH
85306: EMPTY
85307: LIST
85308: LIST
85309: PUSH
85310: LD_INT 5
85312: PUSH
85313: LD_INT 4
85315: PUSH
85316: EMPTY
85317: LIST
85318: LIST
85319: PUSH
85320: LD_INT 5
85322: PUSH
85323: LD_INT 5
85325: PUSH
85326: EMPTY
85327: LIST
85328: LIST
85329: PUSH
85330: LD_INT 4
85332: PUSH
85333: LD_INT 5
85335: PUSH
85336: EMPTY
85337: LIST
85338: LIST
85339: PUSH
85340: LD_INT 3
85342: PUSH
85343: LD_INT 4
85345: PUSH
85346: EMPTY
85347: LIST
85348: LIST
85349: PUSH
85350: LD_INT 3
85352: PUSH
85353: LD_INT 3
85355: PUSH
85356: EMPTY
85357: LIST
85358: LIST
85359: PUSH
85360: LD_INT 5
85362: PUSH
85363: LD_INT 3
85365: PUSH
85366: EMPTY
85367: LIST
85368: LIST
85369: PUSH
85370: LD_INT 3
85372: PUSH
85373: LD_INT 5
85375: PUSH
85376: EMPTY
85377: LIST
85378: LIST
85379: PUSH
85380: EMPTY
85381: LIST
85382: LIST
85383: LIST
85384: LIST
85385: LIST
85386: LIST
85387: LIST
85388: LIST
85389: LIST
85390: LIST
85391: LIST
85392: LIST
85393: LIST
85394: LIST
85395: LIST
85396: LIST
85397: LIST
85398: LIST
85399: LIST
85400: LIST
85401: LIST
85402: LIST
85403: LIST
85404: LIST
85405: LIST
85406: LIST
85407: LIST
85408: LIST
85409: LIST
85410: LIST
85411: LIST
85412: LIST
85413: LIST
85414: LIST
85415: LIST
85416: LIST
85417: LIST
85418: LIST
85419: LIST
85420: LIST
85421: LIST
85422: LIST
85423: LIST
85424: LIST
85425: LIST
85426: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
85427: LD_ADDR_VAR 0 33
85431: PUSH
85432: LD_INT 4
85434: NEG
85435: PUSH
85436: LD_INT 4
85438: NEG
85439: PUSH
85440: EMPTY
85441: LIST
85442: LIST
85443: PUSH
85444: LD_INT 4
85446: NEG
85447: PUSH
85448: LD_INT 5
85450: NEG
85451: PUSH
85452: EMPTY
85453: LIST
85454: LIST
85455: PUSH
85456: LD_INT 3
85458: NEG
85459: PUSH
85460: LD_INT 4
85462: NEG
85463: PUSH
85464: EMPTY
85465: LIST
85466: LIST
85467: PUSH
85468: LD_INT 3
85470: NEG
85471: PUSH
85472: LD_INT 3
85474: NEG
85475: PUSH
85476: EMPTY
85477: LIST
85478: LIST
85479: PUSH
85480: LD_INT 4
85482: NEG
85483: PUSH
85484: LD_INT 3
85486: NEG
85487: PUSH
85488: EMPTY
85489: LIST
85490: LIST
85491: PUSH
85492: LD_INT 5
85494: NEG
85495: PUSH
85496: LD_INT 4
85498: NEG
85499: PUSH
85500: EMPTY
85501: LIST
85502: LIST
85503: PUSH
85504: LD_INT 5
85506: NEG
85507: PUSH
85508: LD_INT 5
85510: NEG
85511: PUSH
85512: EMPTY
85513: LIST
85514: LIST
85515: PUSH
85516: LD_INT 3
85518: NEG
85519: PUSH
85520: LD_INT 5
85522: NEG
85523: PUSH
85524: EMPTY
85525: LIST
85526: LIST
85527: PUSH
85528: LD_INT 5
85530: NEG
85531: PUSH
85532: LD_INT 3
85534: NEG
85535: PUSH
85536: EMPTY
85537: LIST
85538: LIST
85539: PUSH
85540: LD_INT 0
85542: PUSH
85543: LD_INT 3
85545: NEG
85546: PUSH
85547: EMPTY
85548: LIST
85549: LIST
85550: PUSH
85551: LD_INT 0
85553: PUSH
85554: LD_INT 4
85556: NEG
85557: PUSH
85558: EMPTY
85559: LIST
85560: LIST
85561: PUSH
85562: LD_INT 1
85564: PUSH
85565: LD_INT 3
85567: NEG
85568: PUSH
85569: EMPTY
85570: LIST
85571: LIST
85572: PUSH
85573: LD_INT 1
85575: PUSH
85576: LD_INT 2
85578: NEG
85579: PUSH
85580: EMPTY
85581: LIST
85582: LIST
85583: PUSH
85584: LD_INT 0
85586: PUSH
85587: LD_INT 2
85589: NEG
85590: PUSH
85591: EMPTY
85592: LIST
85593: LIST
85594: PUSH
85595: LD_INT 1
85597: NEG
85598: PUSH
85599: LD_INT 3
85601: NEG
85602: PUSH
85603: EMPTY
85604: LIST
85605: LIST
85606: PUSH
85607: LD_INT 1
85609: NEG
85610: PUSH
85611: LD_INT 4
85613: NEG
85614: PUSH
85615: EMPTY
85616: LIST
85617: LIST
85618: PUSH
85619: LD_INT 2
85621: PUSH
85622: LD_INT 2
85624: NEG
85625: PUSH
85626: EMPTY
85627: LIST
85628: LIST
85629: PUSH
85630: LD_INT 2
85632: NEG
85633: PUSH
85634: LD_INT 4
85636: NEG
85637: PUSH
85638: EMPTY
85639: LIST
85640: LIST
85641: PUSH
85642: LD_INT 4
85644: PUSH
85645: LD_INT 0
85647: PUSH
85648: EMPTY
85649: LIST
85650: LIST
85651: PUSH
85652: LD_INT 4
85654: PUSH
85655: LD_INT 1
85657: NEG
85658: PUSH
85659: EMPTY
85660: LIST
85661: LIST
85662: PUSH
85663: LD_INT 5
85665: PUSH
85666: LD_INT 0
85668: PUSH
85669: EMPTY
85670: LIST
85671: LIST
85672: PUSH
85673: LD_INT 5
85675: PUSH
85676: LD_INT 1
85678: PUSH
85679: EMPTY
85680: LIST
85681: LIST
85682: PUSH
85683: LD_INT 4
85685: PUSH
85686: LD_INT 1
85688: PUSH
85689: EMPTY
85690: LIST
85691: LIST
85692: PUSH
85693: LD_INT 3
85695: PUSH
85696: LD_INT 0
85698: PUSH
85699: EMPTY
85700: LIST
85701: LIST
85702: PUSH
85703: LD_INT 3
85705: PUSH
85706: LD_INT 1
85708: NEG
85709: PUSH
85710: EMPTY
85711: LIST
85712: LIST
85713: PUSH
85714: LD_INT 3
85716: PUSH
85717: LD_INT 2
85719: NEG
85720: PUSH
85721: EMPTY
85722: LIST
85723: LIST
85724: PUSH
85725: LD_INT 5
85727: PUSH
85728: LD_INT 2
85730: PUSH
85731: EMPTY
85732: LIST
85733: LIST
85734: PUSH
85735: LD_INT 3
85737: PUSH
85738: LD_INT 3
85740: PUSH
85741: EMPTY
85742: LIST
85743: LIST
85744: PUSH
85745: LD_INT 3
85747: PUSH
85748: LD_INT 2
85750: PUSH
85751: EMPTY
85752: LIST
85753: LIST
85754: PUSH
85755: LD_INT 4
85757: PUSH
85758: LD_INT 3
85760: PUSH
85761: EMPTY
85762: LIST
85763: LIST
85764: PUSH
85765: LD_INT 4
85767: PUSH
85768: LD_INT 4
85770: PUSH
85771: EMPTY
85772: LIST
85773: LIST
85774: PUSH
85775: LD_INT 3
85777: PUSH
85778: LD_INT 4
85780: PUSH
85781: EMPTY
85782: LIST
85783: LIST
85784: PUSH
85785: LD_INT 2
85787: PUSH
85788: LD_INT 3
85790: PUSH
85791: EMPTY
85792: LIST
85793: LIST
85794: PUSH
85795: LD_INT 2
85797: PUSH
85798: LD_INT 2
85800: PUSH
85801: EMPTY
85802: LIST
85803: LIST
85804: PUSH
85805: LD_INT 4
85807: PUSH
85808: LD_INT 2
85810: PUSH
85811: EMPTY
85812: LIST
85813: LIST
85814: PUSH
85815: LD_INT 2
85817: PUSH
85818: LD_INT 4
85820: PUSH
85821: EMPTY
85822: LIST
85823: LIST
85824: PUSH
85825: LD_INT 0
85827: PUSH
85828: LD_INT 4
85830: PUSH
85831: EMPTY
85832: LIST
85833: LIST
85834: PUSH
85835: LD_INT 0
85837: PUSH
85838: LD_INT 3
85840: PUSH
85841: EMPTY
85842: LIST
85843: LIST
85844: PUSH
85845: LD_INT 1
85847: PUSH
85848: LD_INT 4
85850: PUSH
85851: EMPTY
85852: LIST
85853: LIST
85854: PUSH
85855: LD_INT 1
85857: PUSH
85858: LD_INT 5
85860: PUSH
85861: EMPTY
85862: LIST
85863: LIST
85864: PUSH
85865: LD_INT 0
85867: PUSH
85868: LD_INT 5
85870: PUSH
85871: EMPTY
85872: LIST
85873: LIST
85874: PUSH
85875: LD_INT 1
85877: NEG
85878: PUSH
85879: LD_INT 4
85881: PUSH
85882: EMPTY
85883: LIST
85884: LIST
85885: PUSH
85886: LD_INT 1
85888: NEG
85889: PUSH
85890: LD_INT 3
85892: PUSH
85893: EMPTY
85894: LIST
85895: LIST
85896: PUSH
85897: LD_INT 2
85899: PUSH
85900: LD_INT 5
85902: PUSH
85903: EMPTY
85904: LIST
85905: LIST
85906: PUSH
85907: LD_INT 2
85909: NEG
85910: PUSH
85911: LD_INT 3
85913: PUSH
85914: EMPTY
85915: LIST
85916: LIST
85917: PUSH
85918: EMPTY
85919: LIST
85920: LIST
85921: LIST
85922: LIST
85923: LIST
85924: LIST
85925: LIST
85926: LIST
85927: LIST
85928: LIST
85929: LIST
85930: LIST
85931: LIST
85932: LIST
85933: LIST
85934: LIST
85935: LIST
85936: LIST
85937: LIST
85938: LIST
85939: LIST
85940: LIST
85941: LIST
85942: LIST
85943: LIST
85944: LIST
85945: LIST
85946: LIST
85947: LIST
85948: LIST
85949: LIST
85950: LIST
85951: LIST
85952: LIST
85953: LIST
85954: LIST
85955: LIST
85956: LIST
85957: LIST
85958: LIST
85959: LIST
85960: LIST
85961: LIST
85962: LIST
85963: LIST
85964: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
85965: LD_ADDR_VAR 0 34
85969: PUSH
85970: LD_INT 0
85972: PUSH
85973: LD_INT 4
85975: NEG
85976: PUSH
85977: EMPTY
85978: LIST
85979: LIST
85980: PUSH
85981: LD_INT 0
85983: PUSH
85984: LD_INT 5
85986: NEG
85987: PUSH
85988: EMPTY
85989: LIST
85990: LIST
85991: PUSH
85992: LD_INT 1
85994: PUSH
85995: LD_INT 4
85997: NEG
85998: PUSH
85999: EMPTY
86000: LIST
86001: LIST
86002: PUSH
86003: LD_INT 1
86005: PUSH
86006: LD_INT 3
86008: NEG
86009: PUSH
86010: EMPTY
86011: LIST
86012: LIST
86013: PUSH
86014: LD_INT 0
86016: PUSH
86017: LD_INT 3
86019: NEG
86020: PUSH
86021: EMPTY
86022: LIST
86023: LIST
86024: PUSH
86025: LD_INT 1
86027: NEG
86028: PUSH
86029: LD_INT 4
86031: NEG
86032: PUSH
86033: EMPTY
86034: LIST
86035: LIST
86036: PUSH
86037: LD_INT 1
86039: NEG
86040: PUSH
86041: LD_INT 5
86043: NEG
86044: PUSH
86045: EMPTY
86046: LIST
86047: LIST
86048: PUSH
86049: LD_INT 2
86051: PUSH
86052: LD_INT 3
86054: NEG
86055: PUSH
86056: EMPTY
86057: LIST
86058: LIST
86059: PUSH
86060: LD_INT 2
86062: NEG
86063: PUSH
86064: LD_INT 5
86066: NEG
86067: PUSH
86068: EMPTY
86069: LIST
86070: LIST
86071: PUSH
86072: LD_INT 3
86074: PUSH
86075: LD_INT 0
86077: PUSH
86078: EMPTY
86079: LIST
86080: LIST
86081: PUSH
86082: LD_INT 3
86084: PUSH
86085: LD_INT 1
86087: NEG
86088: PUSH
86089: EMPTY
86090: LIST
86091: LIST
86092: PUSH
86093: LD_INT 4
86095: PUSH
86096: LD_INT 0
86098: PUSH
86099: EMPTY
86100: LIST
86101: LIST
86102: PUSH
86103: LD_INT 4
86105: PUSH
86106: LD_INT 1
86108: PUSH
86109: EMPTY
86110: LIST
86111: LIST
86112: PUSH
86113: LD_INT 3
86115: PUSH
86116: LD_INT 1
86118: PUSH
86119: EMPTY
86120: LIST
86121: LIST
86122: PUSH
86123: LD_INT 2
86125: PUSH
86126: LD_INT 0
86128: PUSH
86129: EMPTY
86130: LIST
86131: LIST
86132: PUSH
86133: LD_INT 2
86135: PUSH
86136: LD_INT 1
86138: NEG
86139: PUSH
86140: EMPTY
86141: LIST
86142: LIST
86143: PUSH
86144: LD_INT 2
86146: PUSH
86147: LD_INT 2
86149: NEG
86150: PUSH
86151: EMPTY
86152: LIST
86153: LIST
86154: PUSH
86155: LD_INT 4
86157: PUSH
86158: LD_INT 2
86160: PUSH
86161: EMPTY
86162: LIST
86163: LIST
86164: PUSH
86165: LD_INT 4
86167: PUSH
86168: LD_INT 4
86170: PUSH
86171: EMPTY
86172: LIST
86173: LIST
86174: PUSH
86175: LD_INT 4
86177: PUSH
86178: LD_INT 3
86180: PUSH
86181: EMPTY
86182: LIST
86183: LIST
86184: PUSH
86185: LD_INT 5
86187: PUSH
86188: LD_INT 4
86190: PUSH
86191: EMPTY
86192: LIST
86193: LIST
86194: PUSH
86195: LD_INT 5
86197: PUSH
86198: LD_INT 5
86200: PUSH
86201: EMPTY
86202: LIST
86203: LIST
86204: PUSH
86205: LD_INT 4
86207: PUSH
86208: LD_INT 5
86210: PUSH
86211: EMPTY
86212: LIST
86213: LIST
86214: PUSH
86215: LD_INT 3
86217: PUSH
86218: LD_INT 4
86220: PUSH
86221: EMPTY
86222: LIST
86223: LIST
86224: PUSH
86225: LD_INT 3
86227: PUSH
86228: LD_INT 3
86230: PUSH
86231: EMPTY
86232: LIST
86233: LIST
86234: PUSH
86235: LD_INT 5
86237: PUSH
86238: LD_INT 3
86240: PUSH
86241: EMPTY
86242: LIST
86243: LIST
86244: PUSH
86245: LD_INT 3
86247: PUSH
86248: LD_INT 5
86250: PUSH
86251: EMPTY
86252: LIST
86253: LIST
86254: PUSH
86255: LD_INT 0
86257: PUSH
86258: LD_INT 3
86260: PUSH
86261: EMPTY
86262: LIST
86263: LIST
86264: PUSH
86265: LD_INT 0
86267: PUSH
86268: LD_INT 2
86270: PUSH
86271: EMPTY
86272: LIST
86273: LIST
86274: PUSH
86275: LD_INT 1
86277: PUSH
86278: LD_INT 3
86280: PUSH
86281: EMPTY
86282: LIST
86283: LIST
86284: PUSH
86285: LD_INT 1
86287: PUSH
86288: LD_INT 4
86290: PUSH
86291: EMPTY
86292: LIST
86293: LIST
86294: PUSH
86295: LD_INT 0
86297: PUSH
86298: LD_INT 4
86300: PUSH
86301: EMPTY
86302: LIST
86303: LIST
86304: PUSH
86305: LD_INT 1
86307: NEG
86308: PUSH
86309: LD_INT 3
86311: PUSH
86312: EMPTY
86313: LIST
86314: LIST
86315: PUSH
86316: LD_INT 1
86318: NEG
86319: PUSH
86320: LD_INT 2
86322: PUSH
86323: EMPTY
86324: LIST
86325: LIST
86326: PUSH
86327: LD_INT 2
86329: PUSH
86330: LD_INT 4
86332: PUSH
86333: EMPTY
86334: LIST
86335: LIST
86336: PUSH
86337: LD_INT 2
86339: NEG
86340: PUSH
86341: LD_INT 2
86343: PUSH
86344: EMPTY
86345: LIST
86346: LIST
86347: PUSH
86348: LD_INT 4
86350: NEG
86351: PUSH
86352: LD_INT 0
86354: PUSH
86355: EMPTY
86356: LIST
86357: LIST
86358: PUSH
86359: LD_INT 4
86361: NEG
86362: PUSH
86363: LD_INT 1
86365: NEG
86366: PUSH
86367: EMPTY
86368: LIST
86369: LIST
86370: PUSH
86371: LD_INT 3
86373: NEG
86374: PUSH
86375: LD_INT 0
86377: PUSH
86378: EMPTY
86379: LIST
86380: LIST
86381: PUSH
86382: LD_INT 3
86384: NEG
86385: PUSH
86386: LD_INT 1
86388: PUSH
86389: EMPTY
86390: LIST
86391: LIST
86392: PUSH
86393: LD_INT 4
86395: NEG
86396: PUSH
86397: LD_INT 1
86399: PUSH
86400: EMPTY
86401: LIST
86402: LIST
86403: PUSH
86404: LD_INT 5
86406: NEG
86407: PUSH
86408: LD_INT 0
86410: PUSH
86411: EMPTY
86412: LIST
86413: LIST
86414: PUSH
86415: LD_INT 5
86417: NEG
86418: PUSH
86419: LD_INT 1
86421: NEG
86422: PUSH
86423: EMPTY
86424: LIST
86425: LIST
86426: PUSH
86427: LD_INT 5
86429: NEG
86430: PUSH
86431: LD_INT 2
86433: NEG
86434: PUSH
86435: EMPTY
86436: LIST
86437: LIST
86438: PUSH
86439: LD_INT 3
86441: NEG
86442: PUSH
86443: LD_INT 2
86445: PUSH
86446: EMPTY
86447: LIST
86448: LIST
86449: PUSH
86450: EMPTY
86451: LIST
86452: LIST
86453: LIST
86454: LIST
86455: LIST
86456: LIST
86457: LIST
86458: LIST
86459: LIST
86460: LIST
86461: LIST
86462: LIST
86463: LIST
86464: LIST
86465: LIST
86466: LIST
86467: LIST
86468: LIST
86469: LIST
86470: LIST
86471: LIST
86472: LIST
86473: LIST
86474: LIST
86475: LIST
86476: LIST
86477: LIST
86478: LIST
86479: LIST
86480: LIST
86481: LIST
86482: LIST
86483: LIST
86484: LIST
86485: LIST
86486: LIST
86487: LIST
86488: LIST
86489: LIST
86490: LIST
86491: LIST
86492: LIST
86493: LIST
86494: LIST
86495: LIST
86496: ST_TO_ADDR
// end ; end ;
86497: GO 86500
86499: POP
// case btype of b_depot , b_warehouse :
86500: LD_VAR 0 1
86504: PUSH
86505: LD_INT 0
86507: DOUBLE
86508: EQUAL
86509: IFTRUE 86519
86511: LD_INT 1
86513: DOUBLE
86514: EQUAL
86515: IFTRUE 86519
86517: GO 86720
86519: POP
// case nation of nation_american :
86520: LD_VAR 0 5
86524: PUSH
86525: LD_INT 1
86527: DOUBLE
86528: EQUAL
86529: IFTRUE 86533
86531: GO 86589
86533: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
86534: LD_ADDR_VAR 0 9
86538: PUSH
86539: LD_VAR 0 11
86543: PUSH
86544: LD_VAR 0 12
86548: PUSH
86549: LD_VAR 0 13
86553: PUSH
86554: LD_VAR 0 14
86558: PUSH
86559: LD_VAR 0 15
86563: PUSH
86564: LD_VAR 0 16
86568: PUSH
86569: EMPTY
86570: LIST
86571: LIST
86572: LIST
86573: LIST
86574: LIST
86575: LIST
86576: PUSH
86577: LD_VAR 0 4
86581: PUSH
86582: LD_INT 1
86584: PLUS
86585: ARRAY
86586: ST_TO_ADDR
86587: GO 86718
86589: LD_INT 2
86591: DOUBLE
86592: EQUAL
86593: IFTRUE 86597
86595: GO 86653
86597: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
86598: LD_ADDR_VAR 0 9
86602: PUSH
86603: LD_VAR 0 17
86607: PUSH
86608: LD_VAR 0 18
86612: PUSH
86613: LD_VAR 0 19
86617: PUSH
86618: LD_VAR 0 20
86622: PUSH
86623: LD_VAR 0 21
86627: PUSH
86628: LD_VAR 0 22
86632: PUSH
86633: EMPTY
86634: LIST
86635: LIST
86636: LIST
86637: LIST
86638: LIST
86639: LIST
86640: PUSH
86641: LD_VAR 0 4
86645: PUSH
86646: LD_INT 1
86648: PLUS
86649: ARRAY
86650: ST_TO_ADDR
86651: GO 86718
86653: LD_INT 3
86655: DOUBLE
86656: EQUAL
86657: IFTRUE 86661
86659: GO 86717
86661: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
86662: LD_ADDR_VAR 0 9
86666: PUSH
86667: LD_VAR 0 23
86671: PUSH
86672: LD_VAR 0 24
86676: PUSH
86677: LD_VAR 0 25
86681: PUSH
86682: LD_VAR 0 26
86686: PUSH
86687: LD_VAR 0 27
86691: PUSH
86692: LD_VAR 0 28
86696: PUSH
86697: EMPTY
86698: LIST
86699: LIST
86700: LIST
86701: LIST
86702: LIST
86703: LIST
86704: PUSH
86705: LD_VAR 0 4
86709: PUSH
86710: LD_INT 1
86712: PLUS
86713: ARRAY
86714: ST_TO_ADDR
86715: GO 86718
86717: POP
86718: GO 87273
86720: LD_INT 2
86722: DOUBLE
86723: EQUAL
86724: IFTRUE 86734
86726: LD_INT 3
86728: DOUBLE
86729: EQUAL
86730: IFTRUE 86734
86732: GO 86790
86734: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
86735: LD_ADDR_VAR 0 9
86739: PUSH
86740: LD_VAR 0 29
86744: PUSH
86745: LD_VAR 0 30
86749: PUSH
86750: LD_VAR 0 31
86754: PUSH
86755: LD_VAR 0 32
86759: PUSH
86760: LD_VAR 0 33
86764: PUSH
86765: LD_VAR 0 34
86769: PUSH
86770: EMPTY
86771: LIST
86772: LIST
86773: LIST
86774: LIST
86775: LIST
86776: LIST
86777: PUSH
86778: LD_VAR 0 4
86782: PUSH
86783: LD_INT 1
86785: PLUS
86786: ARRAY
86787: ST_TO_ADDR
86788: GO 87273
86790: LD_INT 16
86792: DOUBLE
86793: EQUAL
86794: IFTRUE 86852
86796: LD_INT 17
86798: DOUBLE
86799: EQUAL
86800: IFTRUE 86852
86802: LD_INT 18
86804: DOUBLE
86805: EQUAL
86806: IFTRUE 86852
86808: LD_INT 19
86810: DOUBLE
86811: EQUAL
86812: IFTRUE 86852
86814: LD_INT 22
86816: DOUBLE
86817: EQUAL
86818: IFTRUE 86852
86820: LD_INT 20
86822: DOUBLE
86823: EQUAL
86824: IFTRUE 86852
86826: LD_INT 21
86828: DOUBLE
86829: EQUAL
86830: IFTRUE 86852
86832: LD_INT 23
86834: DOUBLE
86835: EQUAL
86836: IFTRUE 86852
86838: LD_INT 24
86840: DOUBLE
86841: EQUAL
86842: IFTRUE 86852
86844: LD_INT 25
86846: DOUBLE
86847: EQUAL
86848: IFTRUE 86852
86850: GO 86908
86852: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
86853: LD_ADDR_VAR 0 9
86857: PUSH
86858: LD_VAR 0 35
86862: PUSH
86863: LD_VAR 0 36
86867: PUSH
86868: LD_VAR 0 37
86872: PUSH
86873: LD_VAR 0 38
86877: PUSH
86878: LD_VAR 0 39
86882: PUSH
86883: LD_VAR 0 40
86887: PUSH
86888: EMPTY
86889: LIST
86890: LIST
86891: LIST
86892: LIST
86893: LIST
86894: LIST
86895: PUSH
86896: LD_VAR 0 4
86900: PUSH
86901: LD_INT 1
86903: PLUS
86904: ARRAY
86905: ST_TO_ADDR
86906: GO 87273
86908: LD_INT 6
86910: DOUBLE
86911: EQUAL
86912: IFTRUE 86964
86914: LD_INT 7
86916: DOUBLE
86917: EQUAL
86918: IFTRUE 86964
86920: LD_INT 8
86922: DOUBLE
86923: EQUAL
86924: IFTRUE 86964
86926: LD_INT 13
86928: DOUBLE
86929: EQUAL
86930: IFTRUE 86964
86932: LD_INT 12
86934: DOUBLE
86935: EQUAL
86936: IFTRUE 86964
86938: LD_INT 15
86940: DOUBLE
86941: EQUAL
86942: IFTRUE 86964
86944: LD_INT 11
86946: DOUBLE
86947: EQUAL
86948: IFTRUE 86964
86950: LD_INT 14
86952: DOUBLE
86953: EQUAL
86954: IFTRUE 86964
86956: LD_INT 10
86958: DOUBLE
86959: EQUAL
86960: IFTRUE 86964
86962: GO 87020
86964: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
86965: LD_ADDR_VAR 0 9
86969: PUSH
86970: LD_VAR 0 41
86974: PUSH
86975: LD_VAR 0 42
86979: PUSH
86980: LD_VAR 0 43
86984: PUSH
86985: LD_VAR 0 44
86989: PUSH
86990: LD_VAR 0 45
86994: PUSH
86995: LD_VAR 0 46
86999: PUSH
87000: EMPTY
87001: LIST
87002: LIST
87003: LIST
87004: LIST
87005: LIST
87006: LIST
87007: PUSH
87008: LD_VAR 0 4
87012: PUSH
87013: LD_INT 1
87015: PLUS
87016: ARRAY
87017: ST_TO_ADDR
87018: GO 87273
87020: LD_INT 36
87022: DOUBLE
87023: EQUAL
87024: IFTRUE 87028
87026: GO 87084
87028: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
87029: LD_ADDR_VAR 0 9
87033: PUSH
87034: LD_VAR 0 47
87038: PUSH
87039: LD_VAR 0 48
87043: PUSH
87044: LD_VAR 0 49
87048: PUSH
87049: LD_VAR 0 50
87053: PUSH
87054: LD_VAR 0 51
87058: PUSH
87059: LD_VAR 0 52
87063: PUSH
87064: EMPTY
87065: LIST
87066: LIST
87067: LIST
87068: LIST
87069: LIST
87070: LIST
87071: PUSH
87072: LD_VAR 0 4
87076: PUSH
87077: LD_INT 1
87079: PLUS
87080: ARRAY
87081: ST_TO_ADDR
87082: GO 87273
87084: LD_INT 4
87086: DOUBLE
87087: EQUAL
87088: IFTRUE 87110
87090: LD_INT 5
87092: DOUBLE
87093: EQUAL
87094: IFTRUE 87110
87096: LD_INT 34
87098: DOUBLE
87099: EQUAL
87100: IFTRUE 87110
87102: LD_INT 37
87104: DOUBLE
87105: EQUAL
87106: IFTRUE 87110
87108: GO 87166
87110: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
87111: LD_ADDR_VAR 0 9
87115: PUSH
87116: LD_VAR 0 53
87120: PUSH
87121: LD_VAR 0 54
87125: PUSH
87126: LD_VAR 0 55
87130: PUSH
87131: LD_VAR 0 56
87135: PUSH
87136: LD_VAR 0 57
87140: PUSH
87141: LD_VAR 0 58
87145: PUSH
87146: EMPTY
87147: LIST
87148: LIST
87149: LIST
87150: LIST
87151: LIST
87152: LIST
87153: PUSH
87154: LD_VAR 0 4
87158: PUSH
87159: LD_INT 1
87161: PLUS
87162: ARRAY
87163: ST_TO_ADDR
87164: GO 87273
87166: LD_INT 31
87168: DOUBLE
87169: EQUAL
87170: IFTRUE 87216
87172: LD_INT 32
87174: DOUBLE
87175: EQUAL
87176: IFTRUE 87216
87178: LD_INT 33
87180: DOUBLE
87181: EQUAL
87182: IFTRUE 87216
87184: LD_INT 27
87186: DOUBLE
87187: EQUAL
87188: IFTRUE 87216
87190: LD_INT 26
87192: DOUBLE
87193: EQUAL
87194: IFTRUE 87216
87196: LD_INT 28
87198: DOUBLE
87199: EQUAL
87200: IFTRUE 87216
87202: LD_INT 29
87204: DOUBLE
87205: EQUAL
87206: IFTRUE 87216
87208: LD_INT 30
87210: DOUBLE
87211: EQUAL
87212: IFTRUE 87216
87214: GO 87272
87216: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
87217: LD_ADDR_VAR 0 9
87221: PUSH
87222: LD_VAR 0 59
87226: PUSH
87227: LD_VAR 0 60
87231: PUSH
87232: LD_VAR 0 61
87236: PUSH
87237: LD_VAR 0 62
87241: PUSH
87242: LD_VAR 0 63
87246: PUSH
87247: LD_VAR 0 64
87251: PUSH
87252: EMPTY
87253: LIST
87254: LIST
87255: LIST
87256: LIST
87257: LIST
87258: LIST
87259: PUSH
87260: LD_VAR 0 4
87264: PUSH
87265: LD_INT 1
87267: PLUS
87268: ARRAY
87269: ST_TO_ADDR
87270: GO 87273
87272: POP
// temp_list2 = [ ] ;
87273: LD_ADDR_VAR 0 10
87277: PUSH
87278: EMPTY
87279: ST_TO_ADDR
// for i in temp_list do
87280: LD_ADDR_VAR 0 8
87284: PUSH
87285: LD_VAR 0 9
87289: PUSH
87290: FOR_IN
87291: IFFALSE 87343
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
87293: LD_ADDR_VAR 0 10
87297: PUSH
87298: LD_VAR 0 10
87302: PUSH
87303: LD_VAR 0 8
87307: PUSH
87308: LD_INT 1
87310: ARRAY
87311: PUSH
87312: LD_VAR 0 2
87316: PLUS
87317: PUSH
87318: LD_VAR 0 8
87322: PUSH
87323: LD_INT 2
87325: ARRAY
87326: PUSH
87327: LD_VAR 0 3
87331: PLUS
87332: PUSH
87333: EMPTY
87334: LIST
87335: LIST
87336: PUSH
87337: EMPTY
87338: LIST
87339: ADD
87340: ST_TO_ADDR
87341: GO 87290
87343: POP
87344: POP
// result = temp_list2 ;
87345: LD_ADDR_VAR 0 7
87349: PUSH
87350: LD_VAR 0 10
87354: ST_TO_ADDR
// end ;
87355: LD_VAR 0 7
87359: RET
// export function EnemyInRange ( unit , dist ) ; begin
87360: LD_INT 0
87362: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
87363: LD_ADDR_VAR 0 3
87367: PUSH
87368: LD_VAR 0 1
87372: PPUSH
87373: CALL_OW 255
87377: PPUSH
87378: LD_VAR 0 1
87382: PPUSH
87383: CALL_OW 250
87387: PPUSH
87388: LD_VAR 0 1
87392: PPUSH
87393: CALL_OW 251
87397: PPUSH
87398: LD_VAR 0 2
87402: PPUSH
87403: CALL 60733 0 4
87407: PUSH
87408: LD_INT 4
87410: ARRAY
87411: ST_TO_ADDR
// end ;
87412: LD_VAR 0 3
87416: RET
// export function PlayerSeeMe ( unit ) ; begin
87417: LD_INT 0
87419: PPUSH
// result := See ( your_side , unit ) ;
87420: LD_ADDR_VAR 0 2
87424: PUSH
87425: LD_OWVAR 2
87429: PPUSH
87430: LD_VAR 0 1
87434: PPUSH
87435: CALL_OW 292
87439: ST_TO_ADDR
// end ;
87440: LD_VAR 0 2
87444: RET
// export function ReverseDir ( unit ) ; begin
87445: LD_INT 0
87447: PPUSH
// if not unit then
87448: LD_VAR 0 1
87452: NOT
87453: IFFALSE 87457
// exit ;
87455: GO 87480
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
87457: LD_ADDR_VAR 0 2
87461: PUSH
87462: LD_VAR 0 1
87466: PPUSH
87467: CALL_OW 254
87471: PUSH
87472: LD_INT 3
87474: PLUS
87475: PUSH
87476: LD_INT 6
87478: MOD
87479: ST_TO_ADDR
// end ;
87480: LD_VAR 0 2
87484: RET
// export function ReverseArray ( array ) ; var i ; begin
87485: LD_INT 0
87487: PPUSH
87488: PPUSH
// if not array then
87489: LD_VAR 0 1
87493: NOT
87494: IFFALSE 87498
// exit ;
87496: GO 87553
// result := [ ] ;
87498: LD_ADDR_VAR 0 2
87502: PUSH
87503: EMPTY
87504: ST_TO_ADDR
// for i := array downto 1 do
87505: LD_ADDR_VAR 0 3
87509: PUSH
87510: DOUBLE
87511: LD_VAR 0 1
87515: INC
87516: ST_TO_ADDR
87517: LD_INT 1
87519: PUSH
87520: FOR_DOWNTO
87521: IFFALSE 87551
// result := Join ( result , array [ i ] ) ;
87523: LD_ADDR_VAR 0 2
87527: PUSH
87528: LD_VAR 0 2
87532: PPUSH
87533: LD_VAR 0 1
87537: PUSH
87538: LD_VAR 0 3
87542: ARRAY
87543: PPUSH
87544: CALL 92209 0 2
87548: ST_TO_ADDR
87549: GO 87520
87551: POP
87552: POP
// end ;
87553: LD_VAR 0 2
87557: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
87558: LD_INT 0
87560: PPUSH
87561: PPUSH
87562: PPUSH
87563: PPUSH
87564: PPUSH
87565: PPUSH
// if not unit or not hexes then
87566: LD_VAR 0 1
87570: NOT
87571: PUSH
87572: LD_VAR 0 2
87576: NOT
87577: OR
87578: IFFALSE 87582
// exit ;
87580: GO 87705
// dist := 9999 ;
87582: LD_ADDR_VAR 0 5
87586: PUSH
87587: LD_INT 9999
87589: ST_TO_ADDR
// for i = 1 to hexes do
87590: LD_ADDR_VAR 0 4
87594: PUSH
87595: DOUBLE
87596: LD_INT 1
87598: DEC
87599: ST_TO_ADDR
87600: LD_VAR 0 2
87604: PUSH
87605: FOR_TO
87606: IFFALSE 87693
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
87608: LD_ADDR_VAR 0 6
87612: PUSH
87613: LD_VAR 0 1
87617: PPUSH
87618: LD_VAR 0 2
87622: PUSH
87623: LD_VAR 0 4
87627: ARRAY
87628: PUSH
87629: LD_INT 1
87631: ARRAY
87632: PPUSH
87633: LD_VAR 0 2
87637: PUSH
87638: LD_VAR 0 4
87642: ARRAY
87643: PUSH
87644: LD_INT 2
87646: ARRAY
87647: PPUSH
87648: CALL_OW 297
87652: ST_TO_ADDR
// if tdist < dist then
87653: LD_VAR 0 6
87657: PUSH
87658: LD_VAR 0 5
87662: LESS
87663: IFFALSE 87691
// begin hex := hexes [ i ] ;
87665: LD_ADDR_VAR 0 8
87669: PUSH
87670: LD_VAR 0 2
87674: PUSH
87675: LD_VAR 0 4
87679: ARRAY
87680: ST_TO_ADDR
// dist := tdist ;
87681: LD_ADDR_VAR 0 5
87685: PUSH
87686: LD_VAR 0 6
87690: ST_TO_ADDR
// end ; end ;
87691: GO 87605
87693: POP
87694: POP
// result := hex ;
87695: LD_ADDR_VAR 0 3
87699: PUSH
87700: LD_VAR 0 8
87704: ST_TO_ADDR
// end ;
87705: LD_VAR 0 3
87709: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
87710: LD_INT 0
87712: PPUSH
87713: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
87714: LD_VAR 0 1
87718: NOT
87719: PUSH
87720: LD_VAR 0 1
87724: PUSH
87725: LD_INT 21
87727: PUSH
87728: LD_INT 2
87730: PUSH
87731: EMPTY
87732: LIST
87733: LIST
87734: PUSH
87735: LD_INT 23
87737: PUSH
87738: LD_INT 2
87740: PUSH
87741: EMPTY
87742: LIST
87743: LIST
87744: PUSH
87745: EMPTY
87746: LIST
87747: LIST
87748: PPUSH
87749: CALL_OW 69
87753: IN
87754: NOT
87755: OR
87756: IFFALSE 87760
// exit ;
87758: GO 87807
// for i = 1 to 3 do
87760: LD_ADDR_VAR 0 3
87764: PUSH
87765: DOUBLE
87766: LD_INT 1
87768: DEC
87769: ST_TO_ADDR
87770: LD_INT 3
87772: PUSH
87773: FOR_TO
87774: IFFALSE 87805
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
87776: LD_VAR 0 1
87780: PPUSH
87781: CALL_OW 250
87785: PPUSH
87786: LD_VAR 0 1
87790: PPUSH
87791: CALL_OW 251
87795: PPUSH
87796: LD_INT 1
87798: PPUSH
87799: CALL_OW 453
87803: GO 87773
87805: POP
87806: POP
// end ;
87807: LD_VAR 0 2
87811: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
87812: LD_INT 0
87814: PPUSH
87815: PPUSH
87816: PPUSH
87817: PPUSH
87818: PPUSH
87819: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
87820: LD_VAR 0 1
87824: NOT
87825: PUSH
87826: LD_VAR 0 2
87830: NOT
87831: OR
87832: PUSH
87833: LD_VAR 0 1
87837: PPUSH
87838: CALL_OW 314
87842: OR
87843: IFFALSE 87847
// exit ;
87845: GO 88314
// if GetLives ( i ) < 250 then
87847: LD_VAR 0 4
87851: PPUSH
87852: CALL_OW 256
87856: PUSH
87857: LD_INT 250
87859: LESS
87860: IFFALSE 87873
// begin ComAutodestruct ( i ) ;
87862: LD_VAR 0 4
87866: PPUSH
87867: CALL 87710 0 1
// exit ;
87871: GO 88314
// end ; x := GetX ( enemy_unit ) ;
87873: LD_ADDR_VAR 0 7
87877: PUSH
87878: LD_VAR 0 2
87882: PPUSH
87883: CALL_OW 250
87887: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
87888: LD_ADDR_VAR 0 8
87892: PUSH
87893: LD_VAR 0 2
87897: PPUSH
87898: CALL_OW 251
87902: ST_TO_ADDR
// if not x or not y then
87903: LD_VAR 0 7
87907: NOT
87908: PUSH
87909: LD_VAR 0 8
87913: NOT
87914: OR
87915: IFFALSE 87919
// exit ;
87917: GO 88314
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
87919: LD_ADDR_VAR 0 6
87923: PUSH
87924: LD_VAR 0 7
87928: PPUSH
87929: LD_INT 0
87931: PPUSH
87932: LD_INT 4
87934: PPUSH
87935: CALL_OW 272
87939: PUSH
87940: LD_VAR 0 8
87944: PPUSH
87945: LD_INT 0
87947: PPUSH
87948: LD_INT 4
87950: PPUSH
87951: CALL_OW 273
87955: PUSH
87956: EMPTY
87957: LIST
87958: LIST
87959: PUSH
87960: LD_VAR 0 7
87964: PPUSH
87965: LD_INT 1
87967: PPUSH
87968: LD_INT 4
87970: PPUSH
87971: CALL_OW 272
87975: PUSH
87976: LD_VAR 0 8
87980: PPUSH
87981: LD_INT 1
87983: PPUSH
87984: LD_INT 4
87986: PPUSH
87987: CALL_OW 273
87991: PUSH
87992: EMPTY
87993: LIST
87994: LIST
87995: PUSH
87996: LD_VAR 0 7
88000: PPUSH
88001: LD_INT 2
88003: PPUSH
88004: LD_INT 4
88006: PPUSH
88007: CALL_OW 272
88011: PUSH
88012: LD_VAR 0 8
88016: PPUSH
88017: LD_INT 2
88019: PPUSH
88020: LD_INT 4
88022: PPUSH
88023: CALL_OW 273
88027: PUSH
88028: EMPTY
88029: LIST
88030: LIST
88031: PUSH
88032: LD_VAR 0 7
88036: PPUSH
88037: LD_INT 3
88039: PPUSH
88040: LD_INT 4
88042: PPUSH
88043: CALL_OW 272
88047: PUSH
88048: LD_VAR 0 8
88052: PPUSH
88053: LD_INT 3
88055: PPUSH
88056: LD_INT 4
88058: PPUSH
88059: CALL_OW 273
88063: PUSH
88064: EMPTY
88065: LIST
88066: LIST
88067: PUSH
88068: LD_VAR 0 7
88072: PPUSH
88073: LD_INT 4
88075: PPUSH
88076: LD_INT 4
88078: PPUSH
88079: CALL_OW 272
88083: PUSH
88084: LD_VAR 0 8
88088: PPUSH
88089: LD_INT 4
88091: PPUSH
88092: LD_INT 4
88094: PPUSH
88095: CALL_OW 273
88099: PUSH
88100: EMPTY
88101: LIST
88102: LIST
88103: PUSH
88104: LD_VAR 0 7
88108: PPUSH
88109: LD_INT 5
88111: PPUSH
88112: LD_INT 4
88114: PPUSH
88115: CALL_OW 272
88119: PUSH
88120: LD_VAR 0 8
88124: PPUSH
88125: LD_INT 5
88127: PPUSH
88128: LD_INT 4
88130: PPUSH
88131: CALL_OW 273
88135: PUSH
88136: EMPTY
88137: LIST
88138: LIST
88139: PUSH
88140: EMPTY
88141: LIST
88142: LIST
88143: LIST
88144: LIST
88145: LIST
88146: LIST
88147: ST_TO_ADDR
// for i = tmp downto 1 do
88148: LD_ADDR_VAR 0 4
88152: PUSH
88153: DOUBLE
88154: LD_VAR 0 6
88158: INC
88159: ST_TO_ADDR
88160: LD_INT 1
88162: PUSH
88163: FOR_DOWNTO
88164: IFFALSE 88265
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
88166: LD_VAR 0 6
88170: PUSH
88171: LD_VAR 0 4
88175: ARRAY
88176: PUSH
88177: LD_INT 1
88179: ARRAY
88180: PPUSH
88181: LD_VAR 0 6
88185: PUSH
88186: LD_VAR 0 4
88190: ARRAY
88191: PUSH
88192: LD_INT 2
88194: ARRAY
88195: PPUSH
88196: CALL_OW 488
88200: NOT
88201: PUSH
88202: LD_VAR 0 6
88206: PUSH
88207: LD_VAR 0 4
88211: ARRAY
88212: PUSH
88213: LD_INT 1
88215: ARRAY
88216: PPUSH
88217: LD_VAR 0 6
88221: PUSH
88222: LD_VAR 0 4
88226: ARRAY
88227: PUSH
88228: LD_INT 2
88230: ARRAY
88231: PPUSH
88232: CALL_OW 428
88236: PUSH
88237: LD_INT 0
88239: NONEQUAL
88240: OR
88241: IFFALSE 88263
// tmp := Delete ( tmp , i ) ;
88243: LD_ADDR_VAR 0 6
88247: PUSH
88248: LD_VAR 0 6
88252: PPUSH
88253: LD_VAR 0 4
88257: PPUSH
88258: CALL_OW 3
88262: ST_TO_ADDR
88263: GO 88163
88265: POP
88266: POP
// j := GetClosestHex ( unit , tmp ) ;
88267: LD_ADDR_VAR 0 5
88271: PUSH
88272: LD_VAR 0 1
88276: PPUSH
88277: LD_VAR 0 6
88281: PPUSH
88282: CALL 87558 0 2
88286: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
88287: LD_VAR 0 1
88291: PPUSH
88292: LD_VAR 0 5
88296: PUSH
88297: LD_INT 1
88299: ARRAY
88300: PPUSH
88301: LD_VAR 0 5
88305: PUSH
88306: LD_INT 2
88308: ARRAY
88309: PPUSH
88310: CALL_OW 111
// end ;
88314: LD_VAR 0 3
88318: RET
// export function PrepareApemanSoldier ( ) ; begin
88319: LD_INT 0
88321: PPUSH
// uc_nation := 0 ;
88322: LD_ADDR_OWVAR 21
88326: PUSH
88327: LD_INT 0
88329: ST_TO_ADDR
// hc_sex := sex_male ;
88330: LD_ADDR_OWVAR 27
88334: PUSH
88335: LD_INT 1
88337: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
88338: LD_ADDR_OWVAR 28
88342: PUSH
88343: LD_INT 15
88345: ST_TO_ADDR
// hc_gallery :=  ;
88346: LD_ADDR_OWVAR 33
88350: PUSH
88351: LD_STRING 
88353: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
88354: LD_ADDR_OWVAR 31
88358: PUSH
88359: LD_INT 0
88361: PPUSH
88362: LD_INT 3
88364: PPUSH
88365: CALL_OW 12
88369: PUSH
88370: LD_INT 0
88372: PPUSH
88373: LD_INT 3
88375: PPUSH
88376: CALL_OW 12
88380: PUSH
88381: LD_INT 0
88383: PUSH
88384: LD_INT 0
88386: PUSH
88387: EMPTY
88388: LIST
88389: LIST
88390: LIST
88391: LIST
88392: ST_TO_ADDR
// end ;
88393: LD_VAR 0 1
88397: RET
// export function PrepareApemanEngineer ( ) ; begin
88398: LD_INT 0
88400: PPUSH
// uc_nation := 0 ;
88401: LD_ADDR_OWVAR 21
88405: PUSH
88406: LD_INT 0
88408: ST_TO_ADDR
// hc_sex := sex_male ;
88409: LD_ADDR_OWVAR 27
88413: PUSH
88414: LD_INT 1
88416: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
88417: LD_ADDR_OWVAR 28
88421: PUSH
88422: LD_INT 16
88424: ST_TO_ADDR
// hc_gallery :=  ;
88425: LD_ADDR_OWVAR 33
88429: PUSH
88430: LD_STRING 
88432: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
88433: LD_ADDR_OWVAR 31
88437: PUSH
88438: LD_INT 0
88440: PPUSH
88441: LD_INT 3
88443: PPUSH
88444: CALL_OW 12
88448: PUSH
88449: LD_INT 0
88451: PPUSH
88452: LD_INT 3
88454: PPUSH
88455: CALL_OW 12
88459: PUSH
88460: LD_INT 0
88462: PUSH
88463: LD_INT 0
88465: PUSH
88466: EMPTY
88467: LIST
88468: LIST
88469: LIST
88470: LIST
88471: ST_TO_ADDR
// end ;
88472: LD_VAR 0 1
88476: RET
// export function PrepareApeman ( agressivity ) ; begin
88477: LD_INT 0
88479: PPUSH
// uc_side := 0 ;
88480: LD_ADDR_OWVAR 20
88484: PUSH
88485: LD_INT 0
88487: ST_TO_ADDR
// uc_nation := 0 ;
88488: LD_ADDR_OWVAR 21
88492: PUSH
88493: LD_INT 0
88495: ST_TO_ADDR
// hc_sex := sex_male ;
88496: LD_ADDR_OWVAR 27
88500: PUSH
88501: LD_INT 1
88503: ST_TO_ADDR
// hc_class := class_apeman ;
88504: LD_ADDR_OWVAR 28
88508: PUSH
88509: LD_INT 12
88511: ST_TO_ADDR
// hc_gallery :=  ;
88512: LD_ADDR_OWVAR 33
88516: PUSH
88517: LD_STRING 
88519: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
88520: LD_ADDR_OWVAR 35
88524: PUSH
88525: LD_VAR 0 1
88529: NEG
88530: PPUSH
88531: LD_VAR 0 1
88535: PPUSH
88536: CALL_OW 12
88540: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
88541: LD_ADDR_OWVAR 31
88545: PUSH
88546: LD_INT 0
88548: PPUSH
88549: LD_INT 3
88551: PPUSH
88552: CALL_OW 12
88556: PUSH
88557: LD_INT 0
88559: PPUSH
88560: LD_INT 3
88562: PPUSH
88563: CALL_OW 12
88567: PUSH
88568: LD_INT 0
88570: PUSH
88571: LD_INT 0
88573: PUSH
88574: EMPTY
88575: LIST
88576: LIST
88577: LIST
88578: LIST
88579: ST_TO_ADDR
// end ;
88580: LD_VAR 0 2
88584: RET
// export function PrepareTiger ( agressivity ) ; begin
88585: LD_INT 0
88587: PPUSH
// uc_side := 0 ;
88588: LD_ADDR_OWVAR 20
88592: PUSH
88593: LD_INT 0
88595: ST_TO_ADDR
// uc_nation := 0 ;
88596: LD_ADDR_OWVAR 21
88600: PUSH
88601: LD_INT 0
88603: ST_TO_ADDR
// hc_class := class_tiger ;
88604: LD_ADDR_OWVAR 28
88608: PUSH
88609: LD_INT 14
88611: ST_TO_ADDR
// hc_gallery :=  ;
88612: LD_ADDR_OWVAR 33
88616: PUSH
88617: LD_STRING 
88619: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
88620: LD_ADDR_OWVAR 35
88624: PUSH
88625: LD_VAR 0 1
88629: NEG
88630: PPUSH
88631: LD_VAR 0 1
88635: PPUSH
88636: CALL_OW 12
88640: ST_TO_ADDR
// end ;
88641: LD_VAR 0 2
88645: RET
// export function PrepareEnchidna ( ) ; begin
88646: LD_INT 0
88648: PPUSH
// uc_side := 0 ;
88649: LD_ADDR_OWVAR 20
88653: PUSH
88654: LD_INT 0
88656: ST_TO_ADDR
// uc_nation := 0 ;
88657: LD_ADDR_OWVAR 21
88661: PUSH
88662: LD_INT 0
88664: ST_TO_ADDR
// hc_class := class_baggie ;
88665: LD_ADDR_OWVAR 28
88669: PUSH
88670: LD_INT 13
88672: ST_TO_ADDR
// hc_gallery :=  ;
88673: LD_ADDR_OWVAR 33
88677: PUSH
88678: LD_STRING 
88680: ST_TO_ADDR
// end ;
88681: LD_VAR 0 1
88685: RET
// export function PrepareFrog ( ) ; begin
88686: LD_INT 0
88688: PPUSH
// uc_side := 0 ;
88689: LD_ADDR_OWVAR 20
88693: PUSH
88694: LD_INT 0
88696: ST_TO_ADDR
// uc_nation := 0 ;
88697: LD_ADDR_OWVAR 21
88701: PUSH
88702: LD_INT 0
88704: ST_TO_ADDR
// hc_class := class_frog ;
88705: LD_ADDR_OWVAR 28
88709: PUSH
88710: LD_INT 19
88712: ST_TO_ADDR
// hc_gallery :=  ;
88713: LD_ADDR_OWVAR 33
88717: PUSH
88718: LD_STRING 
88720: ST_TO_ADDR
// end ;
88721: LD_VAR 0 1
88725: RET
// export function PrepareFish ( ) ; begin
88726: LD_INT 0
88728: PPUSH
// uc_side := 0 ;
88729: LD_ADDR_OWVAR 20
88733: PUSH
88734: LD_INT 0
88736: ST_TO_ADDR
// uc_nation := 0 ;
88737: LD_ADDR_OWVAR 21
88741: PUSH
88742: LD_INT 0
88744: ST_TO_ADDR
// hc_class := class_fish ;
88745: LD_ADDR_OWVAR 28
88749: PUSH
88750: LD_INT 20
88752: ST_TO_ADDR
// hc_gallery :=  ;
88753: LD_ADDR_OWVAR 33
88757: PUSH
88758: LD_STRING 
88760: ST_TO_ADDR
// end ;
88761: LD_VAR 0 1
88765: RET
// export function PrepareBird ( ) ; begin
88766: LD_INT 0
88768: PPUSH
// uc_side := 0 ;
88769: LD_ADDR_OWVAR 20
88773: PUSH
88774: LD_INT 0
88776: ST_TO_ADDR
// uc_nation := 0 ;
88777: LD_ADDR_OWVAR 21
88781: PUSH
88782: LD_INT 0
88784: ST_TO_ADDR
// hc_class := class_phororhacos ;
88785: LD_ADDR_OWVAR 28
88789: PUSH
88790: LD_INT 18
88792: ST_TO_ADDR
// hc_gallery :=  ;
88793: LD_ADDR_OWVAR 33
88797: PUSH
88798: LD_STRING 
88800: ST_TO_ADDR
// end ;
88801: LD_VAR 0 1
88805: RET
// export function PrepareHorse ( ) ; begin
88806: LD_INT 0
88808: PPUSH
// uc_side := 0 ;
88809: LD_ADDR_OWVAR 20
88813: PUSH
88814: LD_INT 0
88816: ST_TO_ADDR
// uc_nation := 0 ;
88817: LD_ADDR_OWVAR 21
88821: PUSH
88822: LD_INT 0
88824: ST_TO_ADDR
// hc_class := class_horse ;
88825: LD_ADDR_OWVAR 28
88829: PUSH
88830: LD_INT 21
88832: ST_TO_ADDR
// hc_gallery :=  ;
88833: LD_ADDR_OWVAR 33
88837: PUSH
88838: LD_STRING 
88840: ST_TO_ADDR
// end ;
88841: LD_VAR 0 1
88845: RET
// export function PrepareMastodont ( ) ; begin
88846: LD_INT 0
88848: PPUSH
// uc_side := 0 ;
88849: LD_ADDR_OWVAR 20
88853: PUSH
88854: LD_INT 0
88856: ST_TO_ADDR
// uc_nation := 0 ;
88857: LD_ADDR_OWVAR 21
88861: PUSH
88862: LD_INT 0
88864: ST_TO_ADDR
// vc_chassis := class_mastodont ;
88865: LD_ADDR_OWVAR 37
88869: PUSH
88870: LD_INT 31
88872: ST_TO_ADDR
// vc_control := control_rider ;
88873: LD_ADDR_OWVAR 38
88877: PUSH
88878: LD_INT 4
88880: ST_TO_ADDR
// end ;
88881: LD_VAR 0 1
88885: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
88886: LD_INT 0
88888: PPUSH
88889: PPUSH
88890: PPUSH
// uc_side = 0 ;
88891: LD_ADDR_OWVAR 20
88895: PUSH
88896: LD_INT 0
88898: ST_TO_ADDR
// uc_nation = 0 ;
88899: LD_ADDR_OWVAR 21
88903: PUSH
88904: LD_INT 0
88906: ST_TO_ADDR
// InitHc_All ( ) ;
88907: CALL_OW 584
// InitVc ;
88911: CALL_OW 20
// if mastodonts then
88915: LD_VAR 0 6
88919: IFFALSE 88986
// for i = 1 to mastodonts do
88921: LD_ADDR_VAR 0 11
88925: PUSH
88926: DOUBLE
88927: LD_INT 1
88929: DEC
88930: ST_TO_ADDR
88931: LD_VAR 0 6
88935: PUSH
88936: FOR_TO
88937: IFFALSE 88984
// begin vc_chassis := 31 ;
88939: LD_ADDR_OWVAR 37
88943: PUSH
88944: LD_INT 31
88946: ST_TO_ADDR
// vc_control := control_rider ;
88947: LD_ADDR_OWVAR 38
88951: PUSH
88952: LD_INT 4
88954: ST_TO_ADDR
// animal := CreateVehicle ;
88955: LD_ADDR_VAR 0 12
88959: PUSH
88960: CALL_OW 45
88964: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
88965: LD_VAR 0 12
88969: PPUSH
88970: LD_VAR 0 8
88974: PPUSH
88975: LD_INT 0
88977: PPUSH
88978: CALL 91114 0 3
// end ;
88982: GO 88936
88984: POP
88985: POP
// if horses then
88986: LD_VAR 0 5
88990: IFFALSE 89057
// for i = 1 to horses do
88992: LD_ADDR_VAR 0 11
88996: PUSH
88997: DOUBLE
88998: LD_INT 1
89000: DEC
89001: ST_TO_ADDR
89002: LD_VAR 0 5
89006: PUSH
89007: FOR_TO
89008: IFFALSE 89055
// begin hc_class := 21 ;
89010: LD_ADDR_OWVAR 28
89014: PUSH
89015: LD_INT 21
89017: ST_TO_ADDR
// hc_gallery :=  ;
89018: LD_ADDR_OWVAR 33
89022: PUSH
89023: LD_STRING 
89025: ST_TO_ADDR
// animal := CreateHuman ;
89026: LD_ADDR_VAR 0 12
89030: PUSH
89031: CALL_OW 44
89035: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89036: LD_VAR 0 12
89040: PPUSH
89041: LD_VAR 0 8
89045: PPUSH
89046: LD_INT 0
89048: PPUSH
89049: CALL 91114 0 3
// end ;
89053: GO 89007
89055: POP
89056: POP
// if birds then
89057: LD_VAR 0 1
89061: IFFALSE 89128
// for i = 1 to birds do
89063: LD_ADDR_VAR 0 11
89067: PUSH
89068: DOUBLE
89069: LD_INT 1
89071: DEC
89072: ST_TO_ADDR
89073: LD_VAR 0 1
89077: PUSH
89078: FOR_TO
89079: IFFALSE 89126
// begin hc_class := 18 ;
89081: LD_ADDR_OWVAR 28
89085: PUSH
89086: LD_INT 18
89088: ST_TO_ADDR
// hc_gallery =  ;
89089: LD_ADDR_OWVAR 33
89093: PUSH
89094: LD_STRING 
89096: ST_TO_ADDR
// animal := CreateHuman ;
89097: LD_ADDR_VAR 0 12
89101: PUSH
89102: CALL_OW 44
89106: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89107: LD_VAR 0 12
89111: PPUSH
89112: LD_VAR 0 8
89116: PPUSH
89117: LD_INT 0
89119: PPUSH
89120: CALL 91114 0 3
// end ;
89124: GO 89078
89126: POP
89127: POP
// if tigers then
89128: LD_VAR 0 2
89132: IFFALSE 89216
// for i = 1 to tigers do
89134: LD_ADDR_VAR 0 11
89138: PUSH
89139: DOUBLE
89140: LD_INT 1
89142: DEC
89143: ST_TO_ADDR
89144: LD_VAR 0 2
89148: PUSH
89149: FOR_TO
89150: IFFALSE 89214
// begin hc_class = class_tiger ;
89152: LD_ADDR_OWVAR 28
89156: PUSH
89157: LD_INT 14
89159: ST_TO_ADDR
// hc_gallery =  ;
89160: LD_ADDR_OWVAR 33
89164: PUSH
89165: LD_STRING 
89167: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
89168: LD_ADDR_OWVAR 35
89172: PUSH
89173: LD_INT 7
89175: NEG
89176: PPUSH
89177: LD_INT 7
89179: PPUSH
89180: CALL_OW 12
89184: ST_TO_ADDR
// animal := CreateHuman ;
89185: LD_ADDR_VAR 0 12
89189: PUSH
89190: CALL_OW 44
89194: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89195: LD_VAR 0 12
89199: PPUSH
89200: LD_VAR 0 8
89204: PPUSH
89205: LD_INT 0
89207: PPUSH
89208: CALL 91114 0 3
// end ;
89212: GO 89149
89214: POP
89215: POP
// if apemans then
89216: LD_VAR 0 3
89220: IFFALSE 89343
// for i = 1 to apemans do
89222: LD_ADDR_VAR 0 11
89226: PUSH
89227: DOUBLE
89228: LD_INT 1
89230: DEC
89231: ST_TO_ADDR
89232: LD_VAR 0 3
89236: PUSH
89237: FOR_TO
89238: IFFALSE 89341
// begin hc_class = class_apeman ;
89240: LD_ADDR_OWVAR 28
89244: PUSH
89245: LD_INT 12
89247: ST_TO_ADDR
// hc_gallery =  ;
89248: LD_ADDR_OWVAR 33
89252: PUSH
89253: LD_STRING 
89255: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
89256: LD_ADDR_OWVAR 35
89260: PUSH
89261: LD_INT 2
89263: NEG
89264: PPUSH
89265: LD_INT 2
89267: PPUSH
89268: CALL_OW 12
89272: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
89273: LD_ADDR_OWVAR 31
89277: PUSH
89278: LD_INT 1
89280: PPUSH
89281: LD_INT 3
89283: PPUSH
89284: CALL_OW 12
89288: PUSH
89289: LD_INT 1
89291: PPUSH
89292: LD_INT 3
89294: PPUSH
89295: CALL_OW 12
89299: PUSH
89300: LD_INT 0
89302: PUSH
89303: LD_INT 0
89305: PUSH
89306: EMPTY
89307: LIST
89308: LIST
89309: LIST
89310: LIST
89311: ST_TO_ADDR
// animal := CreateHuman ;
89312: LD_ADDR_VAR 0 12
89316: PUSH
89317: CALL_OW 44
89321: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89322: LD_VAR 0 12
89326: PPUSH
89327: LD_VAR 0 8
89331: PPUSH
89332: LD_INT 0
89334: PPUSH
89335: CALL 91114 0 3
// end ;
89339: GO 89237
89341: POP
89342: POP
// if enchidnas then
89343: LD_VAR 0 4
89347: IFFALSE 89414
// for i = 1 to enchidnas do
89349: LD_ADDR_VAR 0 11
89353: PUSH
89354: DOUBLE
89355: LD_INT 1
89357: DEC
89358: ST_TO_ADDR
89359: LD_VAR 0 4
89363: PUSH
89364: FOR_TO
89365: IFFALSE 89412
// begin hc_class = 13 ;
89367: LD_ADDR_OWVAR 28
89371: PUSH
89372: LD_INT 13
89374: ST_TO_ADDR
// hc_gallery =  ;
89375: LD_ADDR_OWVAR 33
89379: PUSH
89380: LD_STRING 
89382: ST_TO_ADDR
// animal := CreateHuman ;
89383: LD_ADDR_VAR 0 12
89387: PUSH
89388: CALL_OW 44
89392: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89393: LD_VAR 0 12
89397: PPUSH
89398: LD_VAR 0 8
89402: PPUSH
89403: LD_INT 0
89405: PPUSH
89406: CALL 91114 0 3
// end ;
89410: GO 89364
89412: POP
89413: POP
// if fishes then
89414: LD_VAR 0 7
89418: IFFALSE 89485
// for i = 1 to fishes do
89420: LD_ADDR_VAR 0 11
89424: PUSH
89425: DOUBLE
89426: LD_INT 1
89428: DEC
89429: ST_TO_ADDR
89430: LD_VAR 0 7
89434: PUSH
89435: FOR_TO
89436: IFFALSE 89483
// begin hc_class = 20 ;
89438: LD_ADDR_OWVAR 28
89442: PUSH
89443: LD_INT 20
89445: ST_TO_ADDR
// hc_gallery =  ;
89446: LD_ADDR_OWVAR 33
89450: PUSH
89451: LD_STRING 
89453: ST_TO_ADDR
// animal := CreateHuman ;
89454: LD_ADDR_VAR 0 12
89458: PUSH
89459: CALL_OW 44
89463: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
89464: LD_VAR 0 12
89468: PPUSH
89469: LD_VAR 0 9
89473: PPUSH
89474: LD_INT 0
89476: PPUSH
89477: CALL 91114 0 3
// end ;
89481: GO 89435
89483: POP
89484: POP
// end ;
89485: LD_VAR 0 10
89489: RET
// export function WantHeal ( sci , unit ) ; begin
89490: LD_INT 0
89492: PPUSH
// if GetTaskList ( sci ) > 0 then
89493: LD_VAR 0 1
89497: PPUSH
89498: CALL_OW 437
89502: PUSH
89503: LD_INT 0
89505: GREATER
89506: IFFALSE 89576
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
89508: LD_VAR 0 1
89512: PPUSH
89513: CALL_OW 437
89517: PUSH
89518: LD_INT 1
89520: ARRAY
89521: PUSH
89522: LD_INT 1
89524: ARRAY
89525: PUSH
89526: LD_STRING l
89528: EQUAL
89529: PUSH
89530: LD_VAR 0 1
89534: PPUSH
89535: CALL_OW 437
89539: PUSH
89540: LD_INT 1
89542: ARRAY
89543: PUSH
89544: LD_INT 4
89546: ARRAY
89547: PUSH
89548: LD_VAR 0 2
89552: EQUAL
89553: AND
89554: IFFALSE 89566
// result := true else
89556: LD_ADDR_VAR 0 3
89560: PUSH
89561: LD_INT 1
89563: ST_TO_ADDR
89564: GO 89574
// result := false ;
89566: LD_ADDR_VAR 0 3
89570: PUSH
89571: LD_INT 0
89573: ST_TO_ADDR
// end else
89574: GO 89584
// result := false ;
89576: LD_ADDR_VAR 0 3
89580: PUSH
89581: LD_INT 0
89583: ST_TO_ADDR
// end ;
89584: LD_VAR 0 3
89588: RET
// export function HealTarget ( sci ) ; begin
89589: LD_INT 0
89591: PPUSH
// if not sci then
89592: LD_VAR 0 1
89596: NOT
89597: IFFALSE 89601
// exit ;
89599: GO 89666
// result := 0 ;
89601: LD_ADDR_VAR 0 2
89605: PUSH
89606: LD_INT 0
89608: ST_TO_ADDR
// if GetTaskList ( sci ) then
89609: LD_VAR 0 1
89613: PPUSH
89614: CALL_OW 437
89618: IFFALSE 89666
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
89620: LD_VAR 0 1
89624: PPUSH
89625: CALL_OW 437
89629: PUSH
89630: LD_INT 1
89632: ARRAY
89633: PUSH
89634: LD_INT 1
89636: ARRAY
89637: PUSH
89638: LD_STRING l
89640: EQUAL
89641: IFFALSE 89666
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
89643: LD_ADDR_VAR 0 2
89647: PUSH
89648: LD_VAR 0 1
89652: PPUSH
89653: CALL_OW 437
89657: PUSH
89658: LD_INT 1
89660: ARRAY
89661: PUSH
89662: LD_INT 4
89664: ARRAY
89665: ST_TO_ADDR
// end ;
89666: LD_VAR 0 2
89670: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
89671: LD_INT 0
89673: PPUSH
89674: PPUSH
89675: PPUSH
89676: PPUSH
// if not base_units then
89677: LD_VAR 0 1
89681: NOT
89682: IFFALSE 89686
// exit ;
89684: GO 89773
// result := false ;
89686: LD_ADDR_VAR 0 2
89690: PUSH
89691: LD_INT 0
89693: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
89694: LD_ADDR_VAR 0 5
89698: PUSH
89699: LD_VAR 0 1
89703: PPUSH
89704: LD_INT 21
89706: PUSH
89707: LD_INT 3
89709: PUSH
89710: EMPTY
89711: LIST
89712: LIST
89713: PPUSH
89714: CALL_OW 72
89718: ST_TO_ADDR
// if not tmp then
89719: LD_VAR 0 5
89723: NOT
89724: IFFALSE 89728
// exit ;
89726: GO 89773
// for i in tmp do
89728: LD_ADDR_VAR 0 3
89732: PUSH
89733: LD_VAR 0 5
89737: PUSH
89738: FOR_IN
89739: IFFALSE 89771
// begin result := EnemyInRange ( i , 22 ) ;
89741: LD_ADDR_VAR 0 2
89745: PUSH
89746: LD_VAR 0 3
89750: PPUSH
89751: LD_INT 22
89753: PPUSH
89754: CALL 87360 0 2
89758: ST_TO_ADDR
// if result then
89759: LD_VAR 0 2
89763: IFFALSE 89769
// exit ;
89765: POP
89766: POP
89767: GO 89773
// end ;
89769: GO 89738
89771: POP
89772: POP
// end ;
89773: LD_VAR 0 2
89777: RET
// export function FilterByTag ( units , tag ) ; begin
89778: LD_INT 0
89780: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
89781: LD_ADDR_VAR 0 3
89785: PUSH
89786: LD_VAR 0 1
89790: PPUSH
89791: LD_INT 120
89793: PUSH
89794: LD_VAR 0 2
89798: PUSH
89799: EMPTY
89800: LIST
89801: LIST
89802: PPUSH
89803: CALL_OW 72
89807: ST_TO_ADDR
// end ;
89808: LD_VAR 0 3
89812: RET
// export function IsDriver ( un ) ; begin
89813: LD_INT 0
89815: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
89816: LD_ADDR_VAR 0 2
89820: PUSH
89821: LD_VAR 0 1
89825: PUSH
89826: LD_INT 55
89828: PUSH
89829: EMPTY
89830: LIST
89831: PPUSH
89832: CALL_OW 69
89836: IN
89837: ST_TO_ADDR
// end ;
89838: LD_VAR 0 2
89842: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
89843: LD_INT 0
89845: PPUSH
89846: PPUSH
// list := [ ] ;
89847: LD_ADDR_VAR 0 5
89851: PUSH
89852: EMPTY
89853: ST_TO_ADDR
// case d of 0 :
89854: LD_VAR 0 3
89858: PUSH
89859: LD_INT 0
89861: DOUBLE
89862: EQUAL
89863: IFTRUE 89867
89865: GO 90000
89867: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
89868: LD_ADDR_VAR 0 5
89872: PUSH
89873: LD_VAR 0 1
89877: PUSH
89878: LD_INT 4
89880: MINUS
89881: PUSH
89882: LD_VAR 0 2
89886: PUSH
89887: LD_INT 4
89889: MINUS
89890: PUSH
89891: LD_INT 2
89893: PUSH
89894: EMPTY
89895: LIST
89896: LIST
89897: LIST
89898: PUSH
89899: LD_VAR 0 1
89903: PUSH
89904: LD_INT 3
89906: MINUS
89907: PUSH
89908: LD_VAR 0 2
89912: PUSH
89913: LD_INT 1
89915: PUSH
89916: EMPTY
89917: LIST
89918: LIST
89919: LIST
89920: PUSH
89921: LD_VAR 0 1
89925: PUSH
89926: LD_INT 4
89928: PLUS
89929: PUSH
89930: LD_VAR 0 2
89934: PUSH
89935: LD_INT 4
89937: PUSH
89938: EMPTY
89939: LIST
89940: LIST
89941: LIST
89942: PUSH
89943: LD_VAR 0 1
89947: PUSH
89948: LD_INT 3
89950: PLUS
89951: PUSH
89952: LD_VAR 0 2
89956: PUSH
89957: LD_INT 3
89959: PLUS
89960: PUSH
89961: LD_INT 5
89963: PUSH
89964: EMPTY
89965: LIST
89966: LIST
89967: LIST
89968: PUSH
89969: LD_VAR 0 1
89973: PUSH
89974: LD_VAR 0 2
89978: PUSH
89979: LD_INT 4
89981: PLUS
89982: PUSH
89983: LD_INT 0
89985: PUSH
89986: EMPTY
89987: LIST
89988: LIST
89989: LIST
89990: PUSH
89991: EMPTY
89992: LIST
89993: LIST
89994: LIST
89995: LIST
89996: LIST
89997: ST_TO_ADDR
// end ; 1 :
89998: GO 90698
90000: LD_INT 1
90002: DOUBLE
90003: EQUAL
90004: IFTRUE 90008
90006: GO 90141
90008: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
90009: LD_ADDR_VAR 0 5
90013: PUSH
90014: LD_VAR 0 1
90018: PUSH
90019: LD_VAR 0 2
90023: PUSH
90024: LD_INT 4
90026: MINUS
90027: PUSH
90028: LD_INT 3
90030: PUSH
90031: EMPTY
90032: LIST
90033: LIST
90034: LIST
90035: PUSH
90036: LD_VAR 0 1
90040: PUSH
90041: LD_INT 3
90043: MINUS
90044: PUSH
90045: LD_VAR 0 2
90049: PUSH
90050: LD_INT 3
90052: MINUS
90053: PUSH
90054: LD_INT 2
90056: PUSH
90057: EMPTY
90058: LIST
90059: LIST
90060: LIST
90061: PUSH
90062: LD_VAR 0 1
90066: PUSH
90067: LD_INT 4
90069: MINUS
90070: PUSH
90071: LD_VAR 0 2
90075: PUSH
90076: LD_INT 1
90078: PUSH
90079: EMPTY
90080: LIST
90081: LIST
90082: LIST
90083: PUSH
90084: LD_VAR 0 1
90088: PUSH
90089: LD_VAR 0 2
90093: PUSH
90094: LD_INT 3
90096: PLUS
90097: PUSH
90098: LD_INT 0
90100: PUSH
90101: EMPTY
90102: LIST
90103: LIST
90104: LIST
90105: PUSH
90106: LD_VAR 0 1
90110: PUSH
90111: LD_INT 4
90113: PLUS
90114: PUSH
90115: LD_VAR 0 2
90119: PUSH
90120: LD_INT 4
90122: PLUS
90123: PUSH
90124: LD_INT 5
90126: PUSH
90127: EMPTY
90128: LIST
90129: LIST
90130: LIST
90131: PUSH
90132: EMPTY
90133: LIST
90134: LIST
90135: LIST
90136: LIST
90137: LIST
90138: ST_TO_ADDR
// end ; 2 :
90139: GO 90698
90141: LD_INT 2
90143: DOUBLE
90144: EQUAL
90145: IFTRUE 90149
90147: GO 90278
90149: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
90150: LD_ADDR_VAR 0 5
90154: PUSH
90155: LD_VAR 0 1
90159: PUSH
90160: LD_VAR 0 2
90164: PUSH
90165: LD_INT 3
90167: MINUS
90168: PUSH
90169: LD_INT 3
90171: PUSH
90172: EMPTY
90173: LIST
90174: LIST
90175: LIST
90176: PUSH
90177: LD_VAR 0 1
90181: PUSH
90182: LD_INT 4
90184: PLUS
90185: PUSH
90186: LD_VAR 0 2
90190: PUSH
90191: LD_INT 4
90193: PUSH
90194: EMPTY
90195: LIST
90196: LIST
90197: LIST
90198: PUSH
90199: LD_VAR 0 1
90203: PUSH
90204: LD_VAR 0 2
90208: PUSH
90209: LD_INT 4
90211: PLUS
90212: PUSH
90213: LD_INT 0
90215: PUSH
90216: EMPTY
90217: LIST
90218: LIST
90219: LIST
90220: PUSH
90221: LD_VAR 0 1
90225: PUSH
90226: LD_INT 3
90228: MINUS
90229: PUSH
90230: LD_VAR 0 2
90234: PUSH
90235: LD_INT 1
90237: PUSH
90238: EMPTY
90239: LIST
90240: LIST
90241: LIST
90242: PUSH
90243: LD_VAR 0 1
90247: PUSH
90248: LD_INT 4
90250: MINUS
90251: PUSH
90252: LD_VAR 0 2
90256: PUSH
90257: LD_INT 4
90259: MINUS
90260: PUSH
90261: LD_INT 2
90263: PUSH
90264: EMPTY
90265: LIST
90266: LIST
90267: LIST
90268: PUSH
90269: EMPTY
90270: LIST
90271: LIST
90272: LIST
90273: LIST
90274: LIST
90275: ST_TO_ADDR
// end ; 3 :
90276: GO 90698
90278: LD_INT 3
90280: DOUBLE
90281: EQUAL
90282: IFTRUE 90286
90284: GO 90419
90286: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
90287: LD_ADDR_VAR 0 5
90291: PUSH
90292: LD_VAR 0 1
90296: PUSH
90297: LD_INT 3
90299: PLUS
90300: PUSH
90301: LD_VAR 0 2
90305: PUSH
90306: LD_INT 4
90308: PUSH
90309: EMPTY
90310: LIST
90311: LIST
90312: LIST
90313: PUSH
90314: LD_VAR 0 1
90318: PUSH
90319: LD_INT 4
90321: PLUS
90322: PUSH
90323: LD_VAR 0 2
90327: PUSH
90328: LD_INT 4
90330: PLUS
90331: PUSH
90332: LD_INT 5
90334: PUSH
90335: EMPTY
90336: LIST
90337: LIST
90338: LIST
90339: PUSH
90340: LD_VAR 0 1
90344: PUSH
90345: LD_INT 4
90347: MINUS
90348: PUSH
90349: LD_VAR 0 2
90353: PUSH
90354: LD_INT 1
90356: PUSH
90357: EMPTY
90358: LIST
90359: LIST
90360: LIST
90361: PUSH
90362: LD_VAR 0 1
90366: PUSH
90367: LD_VAR 0 2
90371: PUSH
90372: LD_INT 4
90374: MINUS
90375: PUSH
90376: LD_INT 3
90378: PUSH
90379: EMPTY
90380: LIST
90381: LIST
90382: LIST
90383: PUSH
90384: LD_VAR 0 1
90388: PUSH
90389: LD_INT 3
90391: MINUS
90392: PUSH
90393: LD_VAR 0 2
90397: PUSH
90398: LD_INT 3
90400: MINUS
90401: PUSH
90402: LD_INT 2
90404: PUSH
90405: EMPTY
90406: LIST
90407: LIST
90408: LIST
90409: PUSH
90410: EMPTY
90411: LIST
90412: LIST
90413: LIST
90414: LIST
90415: LIST
90416: ST_TO_ADDR
// end ; 4 :
90417: GO 90698
90419: LD_INT 4
90421: DOUBLE
90422: EQUAL
90423: IFTRUE 90427
90425: GO 90560
90427: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
90428: LD_ADDR_VAR 0 5
90432: PUSH
90433: LD_VAR 0 1
90437: PUSH
90438: LD_VAR 0 2
90442: PUSH
90443: LD_INT 4
90445: PLUS
90446: PUSH
90447: LD_INT 0
90449: PUSH
90450: EMPTY
90451: LIST
90452: LIST
90453: LIST
90454: PUSH
90455: LD_VAR 0 1
90459: PUSH
90460: LD_INT 3
90462: PLUS
90463: PUSH
90464: LD_VAR 0 2
90468: PUSH
90469: LD_INT 3
90471: PLUS
90472: PUSH
90473: LD_INT 5
90475: PUSH
90476: EMPTY
90477: LIST
90478: LIST
90479: LIST
90480: PUSH
90481: LD_VAR 0 1
90485: PUSH
90486: LD_INT 4
90488: PLUS
90489: PUSH
90490: LD_VAR 0 2
90494: PUSH
90495: LD_INT 4
90497: PUSH
90498: EMPTY
90499: LIST
90500: LIST
90501: LIST
90502: PUSH
90503: LD_VAR 0 1
90507: PUSH
90508: LD_VAR 0 2
90512: PUSH
90513: LD_INT 3
90515: MINUS
90516: PUSH
90517: LD_INT 3
90519: PUSH
90520: EMPTY
90521: LIST
90522: LIST
90523: LIST
90524: PUSH
90525: LD_VAR 0 1
90529: PUSH
90530: LD_INT 4
90532: MINUS
90533: PUSH
90534: LD_VAR 0 2
90538: PUSH
90539: LD_INT 4
90541: MINUS
90542: PUSH
90543: LD_INT 2
90545: PUSH
90546: EMPTY
90547: LIST
90548: LIST
90549: LIST
90550: PUSH
90551: EMPTY
90552: LIST
90553: LIST
90554: LIST
90555: LIST
90556: LIST
90557: ST_TO_ADDR
// end ; 5 :
90558: GO 90698
90560: LD_INT 5
90562: DOUBLE
90563: EQUAL
90564: IFTRUE 90568
90566: GO 90697
90568: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
90569: LD_ADDR_VAR 0 5
90573: PUSH
90574: LD_VAR 0 1
90578: PUSH
90579: LD_INT 4
90581: MINUS
90582: PUSH
90583: LD_VAR 0 2
90587: PUSH
90588: LD_INT 1
90590: PUSH
90591: EMPTY
90592: LIST
90593: LIST
90594: LIST
90595: PUSH
90596: LD_VAR 0 1
90600: PUSH
90601: LD_VAR 0 2
90605: PUSH
90606: LD_INT 4
90608: MINUS
90609: PUSH
90610: LD_INT 3
90612: PUSH
90613: EMPTY
90614: LIST
90615: LIST
90616: LIST
90617: PUSH
90618: LD_VAR 0 1
90622: PUSH
90623: LD_INT 4
90625: PLUS
90626: PUSH
90627: LD_VAR 0 2
90631: PUSH
90632: LD_INT 4
90634: PLUS
90635: PUSH
90636: LD_INT 5
90638: PUSH
90639: EMPTY
90640: LIST
90641: LIST
90642: LIST
90643: PUSH
90644: LD_VAR 0 1
90648: PUSH
90649: LD_INT 3
90651: PLUS
90652: PUSH
90653: LD_VAR 0 2
90657: PUSH
90658: LD_INT 4
90660: PUSH
90661: EMPTY
90662: LIST
90663: LIST
90664: LIST
90665: PUSH
90666: LD_VAR 0 1
90670: PUSH
90671: LD_VAR 0 2
90675: PUSH
90676: LD_INT 3
90678: PLUS
90679: PUSH
90680: LD_INT 0
90682: PUSH
90683: EMPTY
90684: LIST
90685: LIST
90686: LIST
90687: PUSH
90688: EMPTY
90689: LIST
90690: LIST
90691: LIST
90692: LIST
90693: LIST
90694: ST_TO_ADDR
// end ; end ;
90695: GO 90698
90697: POP
// result := list ;
90698: LD_ADDR_VAR 0 4
90702: PUSH
90703: LD_VAR 0 5
90707: ST_TO_ADDR
// end ;
90708: LD_VAR 0 4
90712: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
90713: LD_INT 0
90715: PPUSH
90716: PPUSH
90717: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
90718: LD_VAR 0 1
90722: NOT
90723: PUSH
90724: LD_VAR 0 2
90728: PUSH
90729: LD_INT 1
90731: PUSH
90732: LD_INT 2
90734: PUSH
90735: LD_INT 3
90737: PUSH
90738: LD_INT 4
90740: PUSH
90741: EMPTY
90742: LIST
90743: LIST
90744: LIST
90745: LIST
90746: IN
90747: NOT
90748: OR
90749: IFFALSE 90753
// exit ;
90751: GO 90836
// tmp := [ ] ;
90753: LD_ADDR_VAR 0 5
90757: PUSH
90758: EMPTY
90759: ST_TO_ADDR
// for i in units do
90760: LD_ADDR_VAR 0 4
90764: PUSH
90765: LD_VAR 0 1
90769: PUSH
90770: FOR_IN
90771: IFFALSE 90805
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
90773: LD_ADDR_VAR 0 5
90777: PUSH
90778: LD_VAR 0 5
90782: PPUSH
90783: LD_VAR 0 4
90787: PPUSH
90788: LD_VAR 0 2
90792: PPUSH
90793: CALL_OW 259
90797: PPUSH
90798: CALL 92209 0 2
90802: ST_TO_ADDR
90803: GO 90770
90805: POP
90806: POP
// if not tmp then
90807: LD_VAR 0 5
90811: NOT
90812: IFFALSE 90816
// exit ;
90814: GO 90836
// result := SortListByListDesc ( units , tmp ) ;
90816: LD_ADDR_VAR 0 3
90820: PUSH
90821: LD_VAR 0 1
90825: PPUSH
90826: LD_VAR 0 5
90830: PPUSH
90831: CALL_OW 77
90835: ST_TO_ADDR
// end ;
90836: LD_VAR 0 3
90840: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
90841: LD_INT 0
90843: PPUSH
90844: PPUSH
90845: PPUSH
// result := false ;
90846: LD_ADDR_VAR 0 3
90850: PUSH
90851: LD_INT 0
90853: ST_TO_ADDR
// if not building then
90854: LD_VAR 0 2
90858: NOT
90859: IFFALSE 90863
// exit ;
90861: GO 91001
// x := GetX ( building ) ;
90863: LD_ADDR_VAR 0 4
90867: PUSH
90868: LD_VAR 0 2
90872: PPUSH
90873: CALL_OW 250
90877: ST_TO_ADDR
// y := GetY ( building ) ;
90878: LD_ADDR_VAR 0 5
90882: PUSH
90883: LD_VAR 0 2
90887: PPUSH
90888: CALL_OW 251
90892: ST_TO_ADDR
// if not x or not y then
90893: LD_VAR 0 4
90897: NOT
90898: PUSH
90899: LD_VAR 0 5
90903: NOT
90904: OR
90905: IFFALSE 90909
// exit ;
90907: GO 91001
// if GetTaskList ( unit ) then
90909: LD_VAR 0 1
90913: PPUSH
90914: CALL_OW 437
90918: IFFALSE 91001
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
90920: LD_STRING e
90922: PUSH
90923: LD_VAR 0 1
90927: PPUSH
90928: CALL_OW 437
90932: PUSH
90933: LD_INT 1
90935: ARRAY
90936: PUSH
90937: LD_INT 1
90939: ARRAY
90940: EQUAL
90941: PUSH
90942: LD_VAR 0 4
90946: PUSH
90947: LD_VAR 0 1
90951: PPUSH
90952: CALL_OW 437
90956: PUSH
90957: LD_INT 1
90959: ARRAY
90960: PUSH
90961: LD_INT 2
90963: ARRAY
90964: EQUAL
90965: AND
90966: PUSH
90967: LD_VAR 0 5
90971: PUSH
90972: LD_VAR 0 1
90976: PPUSH
90977: CALL_OW 437
90981: PUSH
90982: LD_INT 1
90984: ARRAY
90985: PUSH
90986: LD_INT 3
90988: ARRAY
90989: EQUAL
90990: AND
90991: IFFALSE 91001
// result := true end ;
90993: LD_ADDR_VAR 0 3
90997: PUSH
90998: LD_INT 1
91000: ST_TO_ADDR
// end ;
91001: LD_VAR 0 3
91005: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
91006: LD_INT 0
91008: PPUSH
// result := false ;
91009: LD_ADDR_VAR 0 4
91013: PUSH
91014: LD_INT 0
91016: ST_TO_ADDR
// if GetTaskList ( unit ) then
91017: LD_VAR 0 1
91021: PPUSH
91022: CALL_OW 437
91026: IFFALSE 91109
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
91028: LD_STRING M
91030: PUSH
91031: LD_VAR 0 1
91035: PPUSH
91036: CALL_OW 437
91040: PUSH
91041: LD_INT 1
91043: ARRAY
91044: PUSH
91045: LD_INT 1
91047: ARRAY
91048: EQUAL
91049: PUSH
91050: LD_VAR 0 2
91054: PUSH
91055: LD_VAR 0 1
91059: PPUSH
91060: CALL_OW 437
91064: PUSH
91065: LD_INT 1
91067: ARRAY
91068: PUSH
91069: LD_INT 2
91071: ARRAY
91072: EQUAL
91073: AND
91074: PUSH
91075: LD_VAR 0 3
91079: PUSH
91080: LD_VAR 0 1
91084: PPUSH
91085: CALL_OW 437
91089: PUSH
91090: LD_INT 1
91092: ARRAY
91093: PUSH
91094: LD_INT 3
91096: ARRAY
91097: EQUAL
91098: AND
91099: IFFALSE 91109
// result := true ;
91101: LD_ADDR_VAR 0 4
91105: PUSH
91106: LD_INT 1
91108: ST_TO_ADDR
// end ; end ;
91109: LD_VAR 0 4
91113: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
91114: LD_INT 0
91116: PPUSH
91117: PPUSH
91118: PPUSH
91119: PPUSH
// if not unit or not area then
91120: LD_VAR 0 1
91124: NOT
91125: PUSH
91126: LD_VAR 0 2
91130: NOT
91131: OR
91132: IFFALSE 91136
// exit ;
91134: GO 91312
// tmp := AreaToList ( area , i ) ;
91136: LD_ADDR_VAR 0 6
91140: PUSH
91141: LD_VAR 0 2
91145: PPUSH
91146: LD_VAR 0 5
91150: PPUSH
91151: CALL_OW 517
91155: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
91156: LD_ADDR_VAR 0 5
91160: PUSH
91161: DOUBLE
91162: LD_INT 1
91164: DEC
91165: ST_TO_ADDR
91166: LD_VAR 0 6
91170: PUSH
91171: LD_INT 1
91173: ARRAY
91174: PUSH
91175: FOR_TO
91176: IFFALSE 91310
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
91178: LD_ADDR_VAR 0 7
91182: PUSH
91183: LD_VAR 0 6
91187: PUSH
91188: LD_INT 1
91190: ARRAY
91191: PUSH
91192: LD_VAR 0 5
91196: ARRAY
91197: PUSH
91198: LD_VAR 0 6
91202: PUSH
91203: LD_INT 2
91205: ARRAY
91206: PUSH
91207: LD_VAR 0 5
91211: ARRAY
91212: PUSH
91213: EMPTY
91214: LIST
91215: LIST
91216: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
91217: LD_INT 92
91219: PUSH
91220: LD_VAR 0 7
91224: PUSH
91225: LD_INT 1
91227: ARRAY
91228: PUSH
91229: LD_VAR 0 7
91233: PUSH
91234: LD_INT 2
91236: ARRAY
91237: PUSH
91238: LD_INT 2
91240: PUSH
91241: EMPTY
91242: LIST
91243: LIST
91244: LIST
91245: LIST
91246: PPUSH
91247: CALL_OW 69
91251: PUSH
91252: LD_INT 0
91254: EQUAL
91255: IFFALSE 91308
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
91257: LD_VAR 0 1
91261: PPUSH
91262: LD_VAR 0 7
91266: PUSH
91267: LD_INT 1
91269: ARRAY
91270: PPUSH
91271: LD_VAR 0 7
91275: PUSH
91276: LD_INT 2
91278: ARRAY
91279: PPUSH
91280: LD_VAR 0 3
91284: PPUSH
91285: CALL_OW 48
// result := IsPlaced ( unit ) ;
91289: LD_ADDR_VAR 0 4
91293: PUSH
91294: LD_VAR 0 1
91298: PPUSH
91299: CALL_OW 305
91303: ST_TO_ADDR
// exit ;
91304: POP
91305: POP
91306: GO 91312
// end ; end ;
91308: GO 91175
91310: POP
91311: POP
// end ;
91312: LD_VAR 0 4
91316: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
91317: LD_INT 0
91319: PPUSH
91320: PPUSH
91321: PPUSH
// if not side or side > 8 then
91322: LD_VAR 0 1
91326: NOT
91327: PUSH
91328: LD_VAR 0 1
91332: PUSH
91333: LD_INT 8
91335: GREATER
91336: OR
91337: IFFALSE 91341
// exit ;
91339: GO 91528
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
91341: LD_ADDR_VAR 0 4
91345: PUSH
91346: LD_INT 22
91348: PUSH
91349: LD_VAR 0 1
91353: PUSH
91354: EMPTY
91355: LIST
91356: LIST
91357: PUSH
91358: LD_INT 21
91360: PUSH
91361: LD_INT 3
91363: PUSH
91364: EMPTY
91365: LIST
91366: LIST
91367: PUSH
91368: EMPTY
91369: LIST
91370: LIST
91371: PPUSH
91372: CALL_OW 69
91376: ST_TO_ADDR
// if not tmp then
91377: LD_VAR 0 4
91381: NOT
91382: IFFALSE 91386
// exit ;
91384: GO 91528
// enable_addtolog := true ;
91386: LD_ADDR_OWVAR 81
91390: PUSH
91391: LD_INT 1
91393: ST_TO_ADDR
// AddToLog ( [ ) ;
91394: LD_STRING [
91396: PPUSH
91397: CALL_OW 561
// for i in tmp do
91401: LD_ADDR_VAR 0 3
91405: PUSH
91406: LD_VAR 0 4
91410: PUSH
91411: FOR_IN
91412: IFFALSE 91519
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
91414: LD_STRING [
91416: PUSH
91417: LD_VAR 0 3
91421: PPUSH
91422: CALL_OW 266
91426: STR
91427: PUSH
91428: LD_STRING , 
91430: STR
91431: PUSH
91432: LD_VAR 0 3
91436: PPUSH
91437: CALL_OW 250
91441: STR
91442: PUSH
91443: LD_STRING , 
91445: STR
91446: PUSH
91447: LD_VAR 0 3
91451: PPUSH
91452: CALL_OW 251
91456: STR
91457: PUSH
91458: LD_STRING , 
91460: STR
91461: PUSH
91462: LD_VAR 0 3
91466: PPUSH
91467: CALL_OW 254
91471: STR
91472: PUSH
91473: LD_STRING , 
91475: STR
91476: PUSH
91477: LD_VAR 0 3
91481: PPUSH
91482: LD_INT 1
91484: PPUSH
91485: CALL_OW 268
91489: STR
91490: PUSH
91491: LD_STRING , 
91493: STR
91494: PUSH
91495: LD_VAR 0 3
91499: PPUSH
91500: LD_INT 2
91502: PPUSH
91503: CALL_OW 268
91507: STR
91508: PUSH
91509: LD_STRING ],
91511: STR
91512: PPUSH
91513: CALL_OW 561
// end ;
91517: GO 91411
91519: POP
91520: POP
// AddToLog ( ]; ) ;
91521: LD_STRING ];
91523: PPUSH
91524: CALL_OW 561
// end ;
91528: LD_VAR 0 2
91532: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
91533: LD_INT 0
91535: PPUSH
91536: PPUSH
91537: PPUSH
91538: PPUSH
91539: PPUSH
// if not area or not rate or not max then
91540: LD_VAR 0 1
91544: NOT
91545: PUSH
91546: LD_VAR 0 2
91550: NOT
91551: OR
91552: PUSH
91553: LD_VAR 0 4
91557: NOT
91558: OR
91559: IFFALSE 91563
// exit ;
91561: GO 91752
// while 1 do
91563: LD_INT 1
91565: IFFALSE 91752
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
91567: LD_ADDR_VAR 0 9
91571: PUSH
91572: LD_VAR 0 1
91576: PPUSH
91577: LD_INT 1
91579: PPUSH
91580: CALL_OW 287
91584: PUSH
91585: LD_INT 10
91587: MUL
91588: ST_TO_ADDR
// r := rate / 10 ;
91589: LD_ADDR_VAR 0 7
91593: PUSH
91594: LD_VAR 0 2
91598: PUSH
91599: LD_INT 10
91601: DIVREAL
91602: ST_TO_ADDR
// time := 1 1$00 ;
91603: LD_ADDR_VAR 0 8
91607: PUSH
91608: LD_INT 2100
91610: ST_TO_ADDR
// if amount < min then
91611: LD_VAR 0 9
91615: PUSH
91616: LD_VAR 0 3
91620: LESS
91621: IFFALSE 91639
// r := r * 2 else
91623: LD_ADDR_VAR 0 7
91627: PUSH
91628: LD_VAR 0 7
91632: PUSH
91633: LD_INT 2
91635: MUL
91636: ST_TO_ADDR
91637: GO 91665
// if amount > max then
91639: LD_VAR 0 9
91643: PUSH
91644: LD_VAR 0 4
91648: GREATER
91649: IFFALSE 91665
// r := r / 2 ;
91651: LD_ADDR_VAR 0 7
91655: PUSH
91656: LD_VAR 0 7
91660: PUSH
91661: LD_INT 2
91663: DIVREAL
91664: ST_TO_ADDR
// time := time / r ;
91665: LD_ADDR_VAR 0 8
91669: PUSH
91670: LD_VAR 0 8
91674: PUSH
91675: LD_VAR 0 7
91679: DIVREAL
91680: ST_TO_ADDR
// if time < 0 then
91681: LD_VAR 0 8
91685: PUSH
91686: LD_INT 0
91688: LESS
91689: IFFALSE 91706
// time := time * - 1 ;
91691: LD_ADDR_VAR 0 8
91695: PUSH
91696: LD_VAR 0 8
91700: PUSH
91701: LD_INT 1
91703: NEG
91704: MUL
91705: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
91706: LD_VAR 0 8
91710: PUSH
91711: LD_INT 35
91713: PPUSH
91714: LD_INT 875
91716: PPUSH
91717: CALL_OW 12
91721: PLUS
91722: PPUSH
91723: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
91727: LD_INT 1
91729: PPUSH
91730: LD_INT 5
91732: PPUSH
91733: CALL_OW 12
91737: PPUSH
91738: LD_VAR 0 1
91742: PPUSH
91743: LD_INT 1
91745: PPUSH
91746: CALL_OW 55
// end ;
91750: GO 91563
// end ;
91752: LD_VAR 0 5
91756: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
91757: LD_INT 0
91759: PPUSH
91760: PPUSH
91761: PPUSH
91762: PPUSH
91763: PPUSH
91764: PPUSH
91765: PPUSH
91766: PPUSH
// if not turrets or not factories then
91767: LD_VAR 0 1
91771: NOT
91772: PUSH
91773: LD_VAR 0 2
91777: NOT
91778: OR
91779: IFFALSE 91783
// exit ;
91781: GO 92090
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
91783: LD_ADDR_VAR 0 10
91787: PUSH
91788: LD_INT 5
91790: PUSH
91791: LD_INT 6
91793: PUSH
91794: EMPTY
91795: LIST
91796: LIST
91797: PUSH
91798: LD_INT 2
91800: PUSH
91801: LD_INT 4
91803: PUSH
91804: EMPTY
91805: LIST
91806: LIST
91807: PUSH
91808: LD_INT 3
91810: PUSH
91811: LD_INT 5
91813: PUSH
91814: EMPTY
91815: LIST
91816: LIST
91817: PUSH
91818: EMPTY
91819: LIST
91820: LIST
91821: LIST
91822: PUSH
91823: LD_INT 24
91825: PUSH
91826: LD_INT 25
91828: PUSH
91829: EMPTY
91830: LIST
91831: LIST
91832: PUSH
91833: LD_INT 23
91835: PUSH
91836: LD_INT 27
91838: PUSH
91839: EMPTY
91840: LIST
91841: LIST
91842: PUSH
91843: EMPTY
91844: LIST
91845: LIST
91846: PUSH
91847: LD_INT 42
91849: PUSH
91850: LD_INT 43
91852: PUSH
91853: EMPTY
91854: LIST
91855: LIST
91856: PUSH
91857: LD_INT 44
91859: PUSH
91860: LD_INT 46
91862: PUSH
91863: EMPTY
91864: LIST
91865: LIST
91866: PUSH
91867: LD_INT 45
91869: PUSH
91870: LD_INT 47
91872: PUSH
91873: EMPTY
91874: LIST
91875: LIST
91876: PUSH
91877: EMPTY
91878: LIST
91879: LIST
91880: LIST
91881: PUSH
91882: EMPTY
91883: LIST
91884: LIST
91885: LIST
91886: ST_TO_ADDR
// result := [ ] ;
91887: LD_ADDR_VAR 0 3
91891: PUSH
91892: EMPTY
91893: ST_TO_ADDR
// for i in turrets do
91894: LD_ADDR_VAR 0 4
91898: PUSH
91899: LD_VAR 0 1
91903: PUSH
91904: FOR_IN
91905: IFFALSE 92088
// begin nat := GetNation ( i ) ;
91907: LD_ADDR_VAR 0 7
91911: PUSH
91912: LD_VAR 0 4
91916: PPUSH
91917: CALL_OW 248
91921: ST_TO_ADDR
// weapon := 0 ;
91922: LD_ADDR_VAR 0 8
91926: PUSH
91927: LD_INT 0
91929: ST_TO_ADDR
// if not nat then
91930: LD_VAR 0 7
91934: NOT
91935: IFFALSE 91939
// continue ;
91937: GO 91904
// for j in list [ nat ] do
91939: LD_ADDR_VAR 0 5
91943: PUSH
91944: LD_VAR 0 10
91948: PUSH
91949: LD_VAR 0 7
91953: ARRAY
91954: PUSH
91955: FOR_IN
91956: IFFALSE 91997
// if GetBWeapon ( i ) = j [ 1 ] then
91958: LD_VAR 0 4
91962: PPUSH
91963: CALL_OW 269
91967: PUSH
91968: LD_VAR 0 5
91972: PUSH
91973: LD_INT 1
91975: ARRAY
91976: EQUAL
91977: IFFALSE 91995
// begin weapon := j [ 2 ] ;
91979: LD_ADDR_VAR 0 8
91983: PUSH
91984: LD_VAR 0 5
91988: PUSH
91989: LD_INT 2
91991: ARRAY
91992: ST_TO_ADDR
// break ;
91993: GO 91997
// end ;
91995: GO 91955
91997: POP
91998: POP
// if not weapon then
91999: LD_VAR 0 8
92003: NOT
92004: IFFALSE 92008
// continue ;
92006: GO 91904
// for k in factories do
92008: LD_ADDR_VAR 0 6
92012: PUSH
92013: LD_VAR 0 2
92017: PUSH
92018: FOR_IN
92019: IFFALSE 92084
// begin weapons := AvailableWeaponList ( k ) ;
92021: LD_ADDR_VAR 0 9
92025: PUSH
92026: LD_VAR 0 6
92030: PPUSH
92031: CALL_OW 478
92035: ST_TO_ADDR
// if not weapons then
92036: LD_VAR 0 9
92040: NOT
92041: IFFALSE 92045
// continue ;
92043: GO 92018
// if weapon in weapons then
92045: LD_VAR 0 8
92049: PUSH
92050: LD_VAR 0 9
92054: IN
92055: IFFALSE 92082
// begin result := [ i , weapon ] ;
92057: LD_ADDR_VAR 0 3
92061: PUSH
92062: LD_VAR 0 4
92066: PUSH
92067: LD_VAR 0 8
92071: PUSH
92072: EMPTY
92073: LIST
92074: LIST
92075: ST_TO_ADDR
// exit ;
92076: POP
92077: POP
92078: POP
92079: POP
92080: GO 92090
// end ; end ;
92082: GO 92018
92084: POP
92085: POP
// end ;
92086: GO 91904
92088: POP
92089: POP
// end ;
92090: LD_VAR 0 3
92094: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
92095: LD_INT 0
92097: PPUSH
// if not side or side > 8 then
92098: LD_VAR 0 3
92102: NOT
92103: PUSH
92104: LD_VAR 0 3
92108: PUSH
92109: LD_INT 8
92111: GREATER
92112: OR
92113: IFFALSE 92117
// exit ;
92115: GO 92176
// if not range then
92117: LD_VAR 0 4
92121: NOT
92122: IFFALSE 92133
// range := - 12 ;
92124: LD_ADDR_VAR 0 4
92128: PUSH
92129: LD_INT 12
92131: NEG
92132: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
92133: LD_VAR 0 1
92137: PPUSH
92138: LD_VAR 0 2
92142: PPUSH
92143: LD_VAR 0 3
92147: PPUSH
92148: LD_VAR 0 4
92152: PPUSH
92153: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
92157: LD_VAR 0 1
92161: PPUSH
92162: LD_VAR 0 2
92166: PPUSH
92167: LD_VAR 0 3
92171: PPUSH
92172: CALL_OW 331
// end ;
92176: LD_VAR 0 5
92180: RET
// export function Video ( mode ) ; begin
92181: LD_INT 0
92183: PPUSH
// ingame_video = mode ;
92184: LD_ADDR_OWVAR 52
92188: PUSH
92189: LD_VAR 0 1
92193: ST_TO_ADDR
// interface_hidden = mode ;
92194: LD_ADDR_OWVAR 54
92198: PUSH
92199: LD_VAR 0 1
92203: ST_TO_ADDR
// end ;
92204: LD_VAR 0 2
92208: RET
// export function Join ( array , element ) ; begin
92209: LD_INT 0
92211: PPUSH
// result := Replace ( array , array + 1 , element ) ;
92212: LD_ADDR_VAR 0 3
92216: PUSH
92217: LD_VAR 0 1
92221: PPUSH
92222: LD_VAR 0 1
92226: PUSH
92227: LD_INT 1
92229: PLUS
92230: PPUSH
92231: LD_VAR 0 2
92235: PPUSH
92236: CALL_OW 1
92240: ST_TO_ADDR
// end ;
92241: LD_VAR 0 3
92245: RET
// export function JoinUnion ( array , element ) ; begin
92246: LD_INT 0
92248: PPUSH
// result := array union element ;
92249: LD_ADDR_VAR 0 3
92253: PUSH
92254: LD_VAR 0 1
92258: PUSH
92259: LD_VAR 0 2
92263: UNION
92264: ST_TO_ADDR
// end ;
92265: LD_VAR 0 3
92269: RET
// export function GetBehemoths ( side ) ; begin
92270: LD_INT 0
92272: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
92273: LD_ADDR_VAR 0 2
92277: PUSH
92278: LD_INT 22
92280: PUSH
92281: LD_VAR 0 1
92285: PUSH
92286: EMPTY
92287: LIST
92288: LIST
92289: PUSH
92290: LD_INT 31
92292: PUSH
92293: LD_INT 25
92295: PUSH
92296: EMPTY
92297: LIST
92298: LIST
92299: PUSH
92300: EMPTY
92301: LIST
92302: LIST
92303: PPUSH
92304: CALL_OW 69
92308: ST_TO_ADDR
// end ;
92309: LD_VAR 0 2
92313: RET
// export function Shuffle ( array ) ; var i , index ; begin
92314: LD_INT 0
92316: PPUSH
92317: PPUSH
92318: PPUSH
// result := [ ] ;
92319: LD_ADDR_VAR 0 2
92323: PUSH
92324: EMPTY
92325: ST_TO_ADDR
// if not array then
92326: LD_VAR 0 1
92330: NOT
92331: IFFALSE 92335
// exit ;
92333: GO 92434
// Randomize ;
92335: CALL_OW 10
// for i = array downto 1 do
92339: LD_ADDR_VAR 0 3
92343: PUSH
92344: DOUBLE
92345: LD_VAR 0 1
92349: INC
92350: ST_TO_ADDR
92351: LD_INT 1
92353: PUSH
92354: FOR_DOWNTO
92355: IFFALSE 92432
// begin index := rand ( 1 , array ) ;
92357: LD_ADDR_VAR 0 4
92361: PUSH
92362: LD_INT 1
92364: PPUSH
92365: LD_VAR 0 1
92369: PPUSH
92370: CALL_OW 12
92374: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
92375: LD_ADDR_VAR 0 2
92379: PUSH
92380: LD_VAR 0 2
92384: PPUSH
92385: LD_VAR 0 2
92389: PUSH
92390: LD_INT 1
92392: PLUS
92393: PPUSH
92394: LD_VAR 0 1
92398: PUSH
92399: LD_VAR 0 4
92403: ARRAY
92404: PPUSH
92405: CALL_OW 2
92409: ST_TO_ADDR
// array := Delete ( array , index ) ;
92410: LD_ADDR_VAR 0 1
92414: PUSH
92415: LD_VAR 0 1
92419: PPUSH
92420: LD_VAR 0 4
92424: PPUSH
92425: CALL_OW 3
92429: ST_TO_ADDR
// end ;
92430: GO 92354
92432: POP
92433: POP
// end ;
92434: LD_VAR 0 2
92438: RET
// export function GetBaseMaterials ( base ) ; begin
92439: LD_INT 0
92441: PPUSH
// result := [ 0 , 0 , 0 ] ;
92442: LD_ADDR_VAR 0 2
92446: PUSH
92447: LD_INT 0
92449: PUSH
92450: LD_INT 0
92452: PUSH
92453: LD_INT 0
92455: PUSH
92456: EMPTY
92457: LIST
92458: LIST
92459: LIST
92460: ST_TO_ADDR
// if not base then
92461: LD_VAR 0 1
92465: NOT
92466: IFFALSE 92470
// exit ;
92468: GO 92519
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
92470: LD_ADDR_VAR 0 2
92474: PUSH
92475: LD_VAR 0 1
92479: PPUSH
92480: LD_INT 1
92482: PPUSH
92483: CALL_OW 275
92487: PUSH
92488: LD_VAR 0 1
92492: PPUSH
92493: LD_INT 2
92495: PPUSH
92496: CALL_OW 275
92500: PUSH
92501: LD_VAR 0 1
92505: PPUSH
92506: LD_INT 3
92508: PPUSH
92509: CALL_OW 275
92513: PUSH
92514: EMPTY
92515: LIST
92516: LIST
92517: LIST
92518: ST_TO_ADDR
// end ;
92519: LD_VAR 0 2
92523: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
92524: LD_INT 0
92526: PPUSH
92527: PPUSH
// result := array ;
92528: LD_ADDR_VAR 0 3
92532: PUSH
92533: LD_VAR 0 1
92537: ST_TO_ADDR
// if size >= result then
92538: LD_VAR 0 2
92542: PUSH
92543: LD_VAR 0 3
92547: GREATEREQUAL
92548: IFFALSE 92552
// exit ;
92550: GO 92602
// if size then
92552: LD_VAR 0 2
92556: IFFALSE 92602
// for i := array downto size do
92558: LD_ADDR_VAR 0 4
92562: PUSH
92563: DOUBLE
92564: LD_VAR 0 1
92568: INC
92569: ST_TO_ADDR
92570: LD_VAR 0 2
92574: PUSH
92575: FOR_DOWNTO
92576: IFFALSE 92600
// result := Delete ( result , result ) ;
92578: LD_ADDR_VAR 0 3
92582: PUSH
92583: LD_VAR 0 3
92587: PPUSH
92588: LD_VAR 0 3
92592: PPUSH
92593: CALL_OW 3
92597: ST_TO_ADDR
92598: GO 92575
92600: POP
92601: POP
// end ;
92602: LD_VAR 0 3
92606: RET
// export function ComExit ( unit ) ; var tmp ; begin
92607: LD_INT 0
92609: PPUSH
92610: PPUSH
// if not IsInUnit ( unit ) then
92611: LD_VAR 0 1
92615: PPUSH
92616: CALL_OW 310
92620: NOT
92621: IFFALSE 92625
// exit ;
92623: GO 92685
// tmp := IsInUnit ( unit ) ;
92625: LD_ADDR_VAR 0 3
92629: PUSH
92630: LD_VAR 0 1
92634: PPUSH
92635: CALL_OW 310
92639: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
92640: LD_VAR 0 3
92644: PPUSH
92645: CALL_OW 247
92649: PUSH
92650: LD_INT 2
92652: EQUAL
92653: IFFALSE 92666
// ComExitVehicle ( unit ) else
92655: LD_VAR 0 1
92659: PPUSH
92660: CALL_OW 121
92664: GO 92675
// ComExitBuilding ( unit ) ;
92666: LD_VAR 0 1
92670: PPUSH
92671: CALL_OW 122
// result := tmp ;
92675: LD_ADDR_VAR 0 2
92679: PUSH
92680: LD_VAR 0 3
92684: ST_TO_ADDR
// end ;
92685: LD_VAR 0 2
92689: RET
// export function ComExitAll ( units ) ; var i ; begin
92690: LD_INT 0
92692: PPUSH
92693: PPUSH
// if not units then
92694: LD_VAR 0 1
92698: NOT
92699: IFFALSE 92703
// exit ;
92701: GO 92729
// for i in units do
92703: LD_ADDR_VAR 0 3
92707: PUSH
92708: LD_VAR 0 1
92712: PUSH
92713: FOR_IN
92714: IFFALSE 92727
// ComExit ( i ) ;
92716: LD_VAR 0 3
92720: PPUSH
92721: CALL 92607 0 1
92725: GO 92713
92727: POP
92728: POP
// end ;
92729: LD_VAR 0 2
92733: RET
// export function ResetHc ; begin
92734: LD_INT 0
92736: PPUSH
// InitHc ;
92737: CALL_OW 19
// hc_importance := 0 ;
92741: LD_ADDR_OWVAR 32
92745: PUSH
92746: LD_INT 0
92748: ST_TO_ADDR
// end ;
92749: LD_VAR 0 1
92753: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
92754: LD_INT 0
92756: PPUSH
92757: PPUSH
92758: PPUSH
// _x := ( x1 + x2 ) div 2 ;
92759: LD_ADDR_VAR 0 6
92763: PUSH
92764: LD_VAR 0 1
92768: PUSH
92769: LD_VAR 0 3
92773: PLUS
92774: PUSH
92775: LD_INT 2
92777: DIV
92778: ST_TO_ADDR
// if _x < 0 then
92779: LD_VAR 0 6
92783: PUSH
92784: LD_INT 0
92786: LESS
92787: IFFALSE 92804
// _x := _x * - 1 ;
92789: LD_ADDR_VAR 0 6
92793: PUSH
92794: LD_VAR 0 6
92798: PUSH
92799: LD_INT 1
92801: NEG
92802: MUL
92803: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
92804: LD_ADDR_VAR 0 7
92808: PUSH
92809: LD_VAR 0 2
92813: PUSH
92814: LD_VAR 0 4
92818: PLUS
92819: PUSH
92820: LD_INT 2
92822: DIV
92823: ST_TO_ADDR
// if _y < 0 then
92824: LD_VAR 0 7
92828: PUSH
92829: LD_INT 0
92831: LESS
92832: IFFALSE 92849
// _y := _y * - 1 ;
92834: LD_ADDR_VAR 0 7
92838: PUSH
92839: LD_VAR 0 7
92843: PUSH
92844: LD_INT 1
92846: NEG
92847: MUL
92848: ST_TO_ADDR
// result := [ _x , _y ] ;
92849: LD_ADDR_VAR 0 5
92853: PUSH
92854: LD_VAR 0 6
92858: PUSH
92859: LD_VAR 0 7
92863: PUSH
92864: EMPTY
92865: LIST
92866: LIST
92867: ST_TO_ADDR
// end ;
92868: LD_VAR 0 5
92872: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
92873: LD_INT 0
92875: PPUSH
92876: PPUSH
92877: PPUSH
92878: PPUSH
// task := GetTaskList ( unit ) ;
92879: LD_ADDR_VAR 0 7
92883: PUSH
92884: LD_VAR 0 1
92888: PPUSH
92889: CALL_OW 437
92893: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
92894: LD_VAR 0 7
92898: NOT
92899: PUSH
92900: LD_VAR 0 1
92904: PPUSH
92905: LD_VAR 0 2
92909: PPUSH
92910: CALL_OW 308
92914: NOT
92915: AND
92916: IFFALSE 92920
// exit ;
92918: GO 93038
// if IsInArea ( unit , area ) then
92920: LD_VAR 0 1
92924: PPUSH
92925: LD_VAR 0 2
92929: PPUSH
92930: CALL_OW 308
92934: IFFALSE 92952
// begin ComMoveToArea ( unit , goAway ) ;
92936: LD_VAR 0 1
92940: PPUSH
92941: LD_VAR 0 3
92945: PPUSH
92946: CALL_OW 113
// exit ;
92950: GO 93038
// end ; if task [ 1 ] [ 1 ] <> M then
92952: LD_VAR 0 7
92956: PUSH
92957: LD_INT 1
92959: ARRAY
92960: PUSH
92961: LD_INT 1
92963: ARRAY
92964: PUSH
92965: LD_STRING M
92967: NONEQUAL
92968: IFFALSE 92972
// exit ;
92970: GO 93038
// x := task [ 1 ] [ 2 ] ;
92972: LD_ADDR_VAR 0 5
92976: PUSH
92977: LD_VAR 0 7
92981: PUSH
92982: LD_INT 1
92984: ARRAY
92985: PUSH
92986: LD_INT 2
92988: ARRAY
92989: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
92990: LD_ADDR_VAR 0 6
92994: PUSH
92995: LD_VAR 0 7
92999: PUSH
93000: LD_INT 1
93002: ARRAY
93003: PUSH
93004: LD_INT 3
93006: ARRAY
93007: ST_TO_ADDR
// if InArea ( x , y , area ) then
93008: LD_VAR 0 5
93012: PPUSH
93013: LD_VAR 0 6
93017: PPUSH
93018: LD_VAR 0 2
93022: PPUSH
93023: CALL_OW 309
93027: IFFALSE 93038
// ComStop ( unit ) ;
93029: LD_VAR 0 1
93033: PPUSH
93034: CALL_OW 141
// end ;
93038: LD_VAR 0 4
93042: RET
// export function Abs ( value ) ; begin
93043: LD_INT 0
93045: PPUSH
// result := value ;
93046: LD_ADDR_VAR 0 2
93050: PUSH
93051: LD_VAR 0 1
93055: ST_TO_ADDR
// if value < 0 then
93056: LD_VAR 0 1
93060: PUSH
93061: LD_INT 0
93063: LESS
93064: IFFALSE 93081
// result := value * - 1 ;
93066: LD_ADDR_VAR 0 2
93070: PUSH
93071: LD_VAR 0 1
93075: PUSH
93076: LD_INT 1
93078: NEG
93079: MUL
93080: ST_TO_ADDR
// end ;
93081: LD_VAR 0 2
93085: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
93086: LD_INT 0
93088: PPUSH
93089: PPUSH
93090: PPUSH
93091: PPUSH
93092: PPUSH
93093: PPUSH
93094: PPUSH
93095: PPUSH
// if not unit or not building then
93096: LD_VAR 0 1
93100: NOT
93101: PUSH
93102: LD_VAR 0 2
93106: NOT
93107: OR
93108: IFFALSE 93112
// exit ;
93110: GO 93338
// x := GetX ( building ) ;
93112: LD_ADDR_VAR 0 4
93116: PUSH
93117: LD_VAR 0 2
93121: PPUSH
93122: CALL_OW 250
93126: ST_TO_ADDR
// y := GetY ( building ) ;
93127: LD_ADDR_VAR 0 6
93131: PUSH
93132: LD_VAR 0 2
93136: PPUSH
93137: CALL_OW 251
93141: ST_TO_ADDR
// d := GetDir ( building ) ;
93142: LD_ADDR_VAR 0 8
93146: PUSH
93147: LD_VAR 0 2
93151: PPUSH
93152: CALL_OW 254
93156: ST_TO_ADDR
// r := 4 ;
93157: LD_ADDR_VAR 0 9
93161: PUSH
93162: LD_INT 4
93164: ST_TO_ADDR
// for i := 1 to 5 do
93165: LD_ADDR_VAR 0 10
93169: PUSH
93170: DOUBLE
93171: LD_INT 1
93173: DEC
93174: ST_TO_ADDR
93175: LD_INT 5
93177: PUSH
93178: FOR_TO
93179: IFFALSE 93336
// begin _x := ShiftX ( x , d , r + i ) ;
93181: LD_ADDR_VAR 0 5
93185: PUSH
93186: LD_VAR 0 4
93190: PPUSH
93191: LD_VAR 0 8
93195: PPUSH
93196: LD_VAR 0 9
93200: PUSH
93201: LD_VAR 0 10
93205: PLUS
93206: PPUSH
93207: CALL_OW 272
93211: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
93212: LD_ADDR_VAR 0 7
93216: PUSH
93217: LD_VAR 0 6
93221: PPUSH
93222: LD_VAR 0 8
93226: PPUSH
93227: LD_VAR 0 9
93231: PUSH
93232: LD_VAR 0 10
93236: PLUS
93237: PPUSH
93238: CALL_OW 273
93242: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
93243: LD_VAR 0 5
93247: PPUSH
93248: LD_VAR 0 7
93252: PPUSH
93253: CALL_OW 488
93257: PUSH
93258: LD_VAR 0 5
93262: PPUSH
93263: LD_VAR 0 7
93267: PPUSH
93268: CALL_OW 428
93272: PPUSH
93273: CALL_OW 247
93277: PUSH
93278: LD_INT 3
93280: PUSH
93281: LD_INT 2
93283: PUSH
93284: EMPTY
93285: LIST
93286: LIST
93287: IN
93288: NOT
93289: AND
93290: IFFALSE 93334
// begin ComMoveXY ( unit , _x , _y ) ;
93292: LD_VAR 0 1
93296: PPUSH
93297: LD_VAR 0 5
93301: PPUSH
93302: LD_VAR 0 7
93306: PPUSH
93307: CALL_OW 111
// result := [ _x , _y ] ;
93311: LD_ADDR_VAR 0 3
93315: PUSH
93316: LD_VAR 0 5
93320: PUSH
93321: LD_VAR 0 7
93325: PUSH
93326: EMPTY
93327: LIST
93328: LIST
93329: ST_TO_ADDR
// exit ;
93330: POP
93331: POP
93332: GO 93338
// end ; end ;
93334: GO 93178
93336: POP
93337: POP
// end ;
93338: LD_VAR 0 3
93342: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
93343: LD_INT 0
93345: PPUSH
93346: PPUSH
93347: PPUSH
// result := 0 ;
93348: LD_ADDR_VAR 0 3
93352: PUSH
93353: LD_INT 0
93355: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
93356: LD_VAR 0 1
93360: PUSH
93361: LD_INT 0
93363: LESS
93364: PUSH
93365: LD_VAR 0 1
93369: PUSH
93370: LD_INT 8
93372: GREATER
93373: OR
93374: PUSH
93375: LD_VAR 0 2
93379: PUSH
93380: LD_INT 0
93382: LESS
93383: OR
93384: PUSH
93385: LD_VAR 0 2
93389: PUSH
93390: LD_INT 8
93392: GREATER
93393: OR
93394: IFFALSE 93398
// exit ;
93396: GO 93473
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
93398: LD_ADDR_VAR 0 4
93402: PUSH
93403: LD_INT 22
93405: PUSH
93406: LD_VAR 0 2
93410: PUSH
93411: EMPTY
93412: LIST
93413: LIST
93414: PPUSH
93415: CALL_OW 69
93419: PUSH
93420: FOR_IN
93421: IFFALSE 93471
// begin un := UnitShoot ( i ) ;
93423: LD_ADDR_VAR 0 5
93427: PUSH
93428: LD_VAR 0 4
93432: PPUSH
93433: CALL_OW 504
93437: ST_TO_ADDR
// if GetSide ( un ) = side1 then
93438: LD_VAR 0 5
93442: PPUSH
93443: CALL_OW 255
93447: PUSH
93448: LD_VAR 0 1
93452: EQUAL
93453: IFFALSE 93469
// begin result := un ;
93455: LD_ADDR_VAR 0 3
93459: PUSH
93460: LD_VAR 0 5
93464: ST_TO_ADDR
// exit ;
93465: POP
93466: POP
93467: GO 93473
// end ; end ;
93469: GO 93420
93471: POP
93472: POP
// end ;
93473: LD_VAR 0 3
93477: RET
// export function GetCargoBay ( units ) ; begin
93478: LD_INT 0
93480: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
93481: LD_ADDR_VAR 0 2
93485: PUSH
93486: LD_VAR 0 1
93490: PPUSH
93491: LD_INT 2
93493: PUSH
93494: LD_INT 34
93496: PUSH
93497: LD_INT 12
93499: PUSH
93500: EMPTY
93501: LIST
93502: LIST
93503: PUSH
93504: LD_INT 34
93506: PUSH
93507: LD_INT 51
93509: PUSH
93510: EMPTY
93511: LIST
93512: LIST
93513: PUSH
93514: LD_INT 34
93516: PUSH
93517: LD_INT 32
93519: PUSH
93520: EMPTY
93521: LIST
93522: LIST
93523: PUSH
93524: LD_INT 34
93526: PUSH
93527: LD_INT 89
93529: PUSH
93530: EMPTY
93531: LIST
93532: LIST
93533: PUSH
93534: EMPTY
93535: LIST
93536: LIST
93537: LIST
93538: LIST
93539: LIST
93540: PPUSH
93541: CALL_OW 72
93545: ST_TO_ADDR
// end ;
93546: LD_VAR 0 2
93550: RET
// export function Negate ( value ) ; begin
93551: LD_INT 0
93553: PPUSH
// result := not value ;
93554: LD_ADDR_VAR 0 2
93558: PUSH
93559: LD_VAR 0 1
93563: NOT
93564: ST_TO_ADDR
// end ;
93565: LD_VAR 0 2
93569: RET
// export function Inc ( value ) ; begin
93570: LD_INT 0
93572: PPUSH
// result := value + 1 ;
93573: LD_ADDR_VAR 0 2
93577: PUSH
93578: LD_VAR 0 1
93582: PUSH
93583: LD_INT 1
93585: PLUS
93586: ST_TO_ADDR
// end ;
93587: LD_VAR 0 2
93591: RET
// export function Dec ( value ) ; begin
93592: LD_INT 0
93594: PPUSH
// result := value - 1 ;
93595: LD_ADDR_VAR 0 2
93599: PUSH
93600: LD_VAR 0 1
93604: PUSH
93605: LD_INT 1
93607: MINUS
93608: ST_TO_ADDR
// end ;
93609: LD_VAR 0 2
93613: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
93614: LD_INT 0
93616: PPUSH
93617: PPUSH
93618: PPUSH
93619: PPUSH
93620: PPUSH
93621: PPUSH
93622: PPUSH
93623: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
93624: LD_VAR 0 1
93628: PPUSH
93629: LD_VAR 0 2
93633: PPUSH
93634: CALL_OW 488
93638: NOT
93639: PUSH
93640: LD_VAR 0 3
93644: PPUSH
93645: LD_VAR 0 4
93649: PPUSH
93650: CALL_OW 488
93654: NOT
93655: OR
93656: IFFALSE 93669
// begin result := - 1 ;
93658: LD_ADDR_VAR 0 5
93662: PUSH
93663: LD_INT 1
93665: NEG
93666: ST_TO_ADDR
// exit ;
93667: GO 93904
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
93669: LD_ADDR_VAR 0 12
93673: PUSH
93674: LD_VAR 0 1
93678: PPUSH
93679: LD_VAR 0 2
93683: PPUSH
93684: LD_VAR 0 3
93688: PPUSH
93689: LD_VAR 0 4
93693: PPUSH
93694: CALL 92754 0 4
93698: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
93699: LD_ADDR_VAR 0 11
93703: PUSH
93704: LD_VAR 0 1
93708: PPUSH
93709: LD_VAR 0 2
93713: PPUSH
93714: LD_VAR 0 12
93718: PUSH
93719: LD_INT 1
93721: ARRAY
93722: PPUSH
93723: LD_VAR 0 12
93727: PUSH
93728: LD_INT 2
93730: ARRAY
93731: PPUSH
93732: CALL_OW 298
93736: ST_TO_ADDR
// distance := 9999 ;
93737: LD_ADDR_VAR 0 10
93741: PUSH
93742: LD_INT 9999
93744: ST_TO_ADDR
// for i := 0 to 5 do
93745: LD_ADDR_VAR 0 6
93749: PUSH
93750: DOUBLE
93751: LD_INT 0
93753: DEC
93754: ST_TO_ADDR
93755: LD_INT 5
93757: PUSH
93758: FOR_TO
93759: IFFALSE 93902
// begin _x := ShiftX ( x1 , i , centerDist ) ;
93761: LD_ADDR_VAR 0 7
93765: PUSH
93766: LD_VAR 0 1
93770: PPUSH
93771: LD_VAR 0 6
93775: PPUSH
93776: LD_VAR 0 11
93780: PPUSH
93781: CALL_OW 272
93785: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
93786: LD_ADDR_VAR 0 8
93790: PUSH
93791: LD_VAR 0 2
93795: PPUSH
93796: LD_VAR 0 6
93800: PPUSH
93801: LD_VAR 0 11
93805: PPUSH
93806: CALL_OW 273
93810: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
93811: LD_VAR 0 7
93815: PPUSH
93816: LD_VAR 0 8
93820: PPUSH
93821: CALL_OW 488
93825: NOT
93826: IFFALSE 93830
// continue ;
93828: GO 93758
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
93830: LD_ADDR_VAR 0 9
93834: PUSH
93835: LD_VAR 0 12
93839: PUSH
93840: LD_INT 1
93842: ARRAY
93843: PPUSH
93844: LD_VAR 0 12
93848: PUSH
93849: LD_INT 2
93851: ARRAY
93852: PPUSH
93853: LD_VAR 0 7
93857: PPUSH
93858: LD_VAR 0 8
93862: PPUSH
93863: CALL_OW 298
93867: ST_TO_ADDR
// if tmp < distance then
93868: LD_VAR 0 9
93872: PUSH
93873: LD_VAR 0 10
93877: LESS
93878: IFFALSE 93900
// begin result := i ;
93880: LD_ADDR_VAR 0 5
93884: PUSH
93885: LD_VAR 0 6
93889: ST_TO_ADDR
// distance := tmp ;
93890: LD_ADDR_VAR 0 10
93894: PUSH
93895: LD_VAR 0 9
93899: ST_TO_ADDR
// end ; end ;
93900: GO 93758
93902: POP
93903: POP
// end ;
93904: LD_VAR 0 5
93908: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
93909: LD_INT 0
93911: PPUSH
93912: PPUSH
// if not driver or not IsInUnit ( driver ) then
93913: LD_VAR 0 1
93917: NOT
93918: PUSH
93919: LD_VAR 0 1
93923: PPUSH
93924: CALL_OW 310
93928: NOT
93929: OR
93930: IFFALSE 93934
// exit ;
93932: GO 94024
// vehicle := IsInUnit ( driver ) ;
93934: LD_ADDR_VAR 0 3
93938: PUSH
93939: LD_VAR 0 1
93943: PPUSH
93944: CALL_OW 310
93948: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
93949: LD_VAR 0 1
93953: PPUSH
93954: LD_STRING \
93956: PUSH
93957: LD_INT 0
93959: PUSH
93960: LD_INT 0
93962: PUSH
93963: LD_INT 0
93965: PUSH
93966: LD_INT 0
93968: PUSH
93969: LD_INT 0
93971: PUSH
93972: LD_INT 0
93974: PUSH
93975: EMPTY
93976: LIST
93977: LIST
93978: LIST
93979: LIST
93980: LIST
93981: LIST
93982: LIST
93983: PUSH
93984: LD_STRING E
93986: PUSH
93987: LD_INT 0
93989: PUSH
93990: LD_INT 0
93992: PUSH
93993: LD_VAR 0 3
93997: PUSH
93998: LD_INT 0
94000: PUSH
94001: LD_INT 0
94003: PUSH
94004: LD_INT 0
94006: PUSH
94007: EMPTY
94008: LIST
94009: LIST
94010: LIST
94011: LIST
94012: LIST
94013: LIST
94014: LIST
94015: PUSH
94016: EMPTY
94017: LIST
94018: LIST
94019: PPUSH
94020: CALL_OW 446
// end ;
94024: LD_VAR 0 2
94028: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
94029: LD_INT 0
94031: PPUSH
94032: PPUSH
// if not driver or not IsInUnit ( driver ) then
94033: LD_VAR 0 1
94037: NOT
94038: PUSH
94039: LD_VAR 0 1
94043: PPUSH
94044: CALL_OW 310
94048: NOT
94049: OR
94050: IFFALSE 94054
// exit ;
94052: GO 94144
// vehicle := IsInUnit ( driver ) ;
94054: LD_ADDR_VAR 0 3
94058: PUSH
94059: LD_VAR 0 1
94063: PPUSH
94064: CALL_OW 310
94068: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
94069: LD_VAR 0 1
94073: PPUSH
94074: LD_STRING \
94076: PUSH
94077: LD_INT 0
94079: PUSH
94080: LD_INT 0
94082: PUSH
94083: LD_INT 0
94085: PUSH
94086: LD_INT 0
94088: PUSH
94089: LD_INT 0
94091: PUSH
94092: LD_INT 0
94094: PUSH
94095: EMPTY
94096: LIST
94097: LIST
94098: LIST
94099: LIST
94100: LIST
94101: LIST
94102: LIST
94103: PUSH
94104: LD_STRING E
94106: PUSH
94107: LD_INT 0
94109: PUSH
94110: LD_INT 0
94112: PUSH
94113: LD_VAR 0 3
94117: PUSH
94118: LD_INT 0
94120: PUSH
94121: LD_INT 0
94123: PUSH
94124: LD_INT 0
94126: PUSH
94127: EMPTY
94128: LIST
94129: LIST
94130: LIST
94131: LIST
94132: LIST
94133: LIST
94134: LIST
94135: PUSH
94136: EMPTY
94137: LIST
94138: LIST
94139: PPUSH
94140: CALL_OW 447
// end ;
94144: LD_VAR 0 2
94148: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
94149: LD_INT 0
94151: PPUSH
94152: PPUSH
94153: PPUSH
// tmp := [ ] ;
94154: LD_ADDR_VAR 0 5
94158: PUSH
94159: EMPTY
94160: ST_TO_ADDR
// for i in units do
94161: LD_ADDR_VAR 0 4
94165: PUSH
94166: LD_VAR 0 1
94170: PUSH
94171: FOR_IN
94172: IFFALSE 94210
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
94174: LD_ADDR_VAR 0 5
94178: PUSH
94179: LD_VAR 0 5
94183: PPUSH
94184: LD_VAR 0 5
94188: PUSH
94189: LD_INT 1
94191: PLUS
94192: PPUSH
94193: LD_VAR 0 4
94197: PPUSH
94198: CALL_OW 256
94202: PPUSH
94203: CALL_OW 2
94207: ST_TO_ADDR
94208: GO 94171
94210: POP
94211: POP
// if not tmp then
94212: LD_VAR 0 5
94216: NOT
94217: IFFALSE 94221
// exit ;
94219: GO 94269
// if asc then
94221: LD_VAR 0 2
94225: IFFALSE 94249
// result := SortListByListAsc ( units , tmp ) else
94227: LD_ADDR_VAR 0 3
94231: PUSH
94232: LD_VAR 0 1
94236: PPUSH
94237: LD_VAR 0 5
94241: PPUSH
94242: CALL_OW 76
94246: ST_TO_ADDR
94247: GO 94269
// result := SortListByListDesc ( units , tmp ) ;
94249: LD_ADDR_VAR 0 3
94253: PUSH
94254: LD_VAR 0 1
94258: PPUSH
94259: LD_VAR 0 5
94263: PPUSH
94264: CALL_OW 77
94268: ST_TO_ADDR
// end ;
94269: LD_VAR 0 3
94273: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
94274: LD_INT 0
94276: PPUSH
94277: PPUSH
// task := GetTaskList ( mech ) ;
94278: LD_ADDR_VAR 0 4
94282: PUSH
94283: LD_VAR 0 1
94287: PPUSH
94288: CALL_OW 437
94292: ST_TO_ADDR
// if not task then
94293: LD_VAR 0 4
94297: NOT
94298: IFFALSE 94302
// exit ;
94300: GO 94344
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
94302: LD_ADDR_VAR 0 3
94306: PUSH
94307: LD_VAR 0 4
94311: PUSH
94312: LD_INT 1
94314: ARRAY
94315: PUSH
94316: LD_INT 1
94318: ARRAY
94319: PUSH
94320: LD_STRING r
94322: EQUAL
94323: PUSH
94324: LD_VAR 0 4
94328: PUSH
94329: LD_INT 1
94331: ARRAY
94332: PUSH
94333: LD_INT 4
94335: ARRAY
94336: PUSH
94337: LD_VAR 0 2
94341: EQUAL
94342: AND
94343: ST_TO_ADDR
// end ;
94344: LD_VAR 0 3
94348: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
94349: LD_INT 0
94351: PPUSH
// SetDir ( unit , d ) ;
94352: LD_VAR 0 1
94356: PPUSH
94357: LD_VAR 0 4
94361: PPUSH
94362: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
94366: LD_VAR 0 1
94370: PPUSH
94371: LD_VAR 0 2
94375: PPUSH
94376: LD_VAR 0 3
94380: PPUSH
94381: LD_VAR 0 5
94385: PPUSH
94386: CALL_OW 48
// end ;
94390: LD_VAR 0 6
94394: RET
// export function ToNaturalNumber ( number ) ; begin
94395: LD_INT 0
94397: PPUSH
// result := number div 1 ;
94398: LD_ADDR_VAR 0 2
94402: PUSH
94403: LD_VAR 0 1
94407: PUSH
94408: LD_INT 1
94410: DIV
94411: ST_TO_ADDR
// if number < 0 then
94412: LD_VAR 0 1
94416: PUSH
94417: LD_INT 0
94419: LESS
94420: IFFALSE 94430
// result := 0 ;
94422: LD_ADDR_VAR 0 2
94426: PUSH
94427: LD_INT 0
94429: ST_TO_ADDR
// end ;
94430: LD_VAR 0 2
94434: RET
// export function SortByClass ( units , class ) ; var un ; begin
94435: LD_INT 0
94437: PPUSH
94438: PPUSH
// if not units or not class then
94439: LD_VAR 0 1
94443: NOT
94444: PUSH
94445: LD_VAR 0 2
94449: NOT
94450: OR
94451: IFFALSE 94455
// exit ;
94453: GO 94550
// result := [ ] ;
94455: LD_ADDR_VAR 0 3
94459: PUSH
94460: EMPTY
94461: ST_TO_ADDR
// for un in units do
94462: LD_ADDR_VAR 0 4
94466: PUSH
94467: LD_VAR 0 1
94471: PUSH
94472: FOR_IN
94473: IFFALSE 94548
// if GetClass ( un ) = class then
94475: LD_VAR 0 4
94479: PPUSH
94480: CALL_OW 257
94484: PUSH
94485: LD_VAR 0 2
94489: EQUAL
94490: IFFALSE 94517
// result := Insert ( result , 1 , un ) else
94492: LD_ADDR_VAR 0 3
94496: PUSH
94497: LD_VAR 0 3
94501: PPUSH
94502: LD_INT 1
94504: PPUSH
94505: LD_VAR 0 4
94509: PPUSH
94510: CALL_OW 2
94514: ST_TO_ADDR
94515: GO 94546
// result := Replace ( result , result + 1 , un ) ;
94517: LD_ADDR_VAR 0 3
94521: PUSH
94522: LD_VAR 0 3
94526: PPUSH
94527: LD_VAR 0 3
94531: PUSH
94532: LD_INT 1
94534: PLUS
94535: PPUSH
94536: LD_VAR 0 4
94540: PPUSH
94541: CALL_OW 1
94545: ST_TO_ADDR
94546: GO 94472
94548: POP
94549: POP
// end ;
94550: LD_VAR 0 3
94554: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
94555: LD_INT 0
94557: PPUSH
94558: PPUSH
94559: PPUSH
94560: PPUSH
94561: PPUSH
94562: PPUSH
94563: PPUSH
// result := [ ] ;
94564: LD_ADDR_VAR 0 4
94568: PUSH
94569: EMPTY
94570: ST_TO_ADDR
// if x - r < 0 then
94571: LD_VAR 0 1
94575: PUSH
94576: LD_VAR 0 3
94580: MINUS
94581: PUSH
94582: LD_INT 0
94584: LESS
94585: IFFALSE 94597
// min_x := 0 else
94587: LD_ADDR_VAR 0 8
94591: PUSH
94592: LD_INT 0
94594: ST_TO_ADDR
94595: GO 94613
// min_x := x - r ;
94597: LD_ADDR_VAR 0 8
94601: PUSH
94602: LD_VAR 0 1
94606: PUSH
94607: LD_VAR 0 3
94611: MINUS
94612: ST_TO_ADDR
// if y - r < 0 then
94613: LD_VAR 0 2
94617: PUSH
94618: LD_VAR 0 3
94622: MINUS
94623: PUSH
94624: LD_INT 0
94626: LESS
94627: IFFALSE 94639
// min_y := 0 else
94629: LD_ADDR_VAR 0 7
94633: PUSH
94634: LD_INT 0
94636: ST_TO_ADDR
94637: GO 94655
// min_y := y - r ;
94639: LD_ADDR_VAR 0 7
94643: PUSH
94644: LD_VAR 0 2
94648: PUSH
94649: LD_VAR 0 3
94653: MINUS
94654: ST_TO_ADDR
// max_x := x + r ;
94655: LD_ADDR_VAR 0 9
94659: PUSH
94660: LD_VAR 0 1
94664: PUSH
94665: LD_VAR 0 3
94669: PLUS
94670: ST_TO_ADDR
// max_y := y + r ;
94671: LD_ADDR_VAR 0 10
94675: PUSH
94676: LD_VAR 0 2
94680: PUSH
94681: LD_VAR 0 3
94685: PLUS
94686: ST_TO_ADDR
// for _x = min_x to max_x do
94687: LD_ADDR_VAR 0 5
94691: PUSH
94692: DOUBLE
94693: LD_VAR 0 8
94697: DEC
94698: ST_TO_ADDR
94699: LD_VAR 0 9
94703: PUSH
94704: FOR_TO
94705: IFFALSE 94806
// for _y = min_y to max_y do
94707: LD_ADDR_VAR 0 6
94711: PUSH
94712: DOUBLE
94713: LD_VAR 0 7
94717: DEC
94718: ST_TO_ADDR
94719: LD_VAR 0 10
94723: PUSH
94724: FOR_TO
94725: IFFALSE 94802
// begin if not ValidHex ( _x , _y ) then
94727: LD_VAR 0 5
94731: PPUSH
94732: LD_VAR 0 6
94736: PPUSH
94737: CALL_OW 488
94741: NOT
94742: IFFALSE 94746
// continue ;
94744: GO 94724
// if GetResourceTypeXY ( _x , _y ) then
94746: LD_VAR 0 5
94750: PPUSH
94751: LD_VAR 0 6
94755: PPUSH
94756: CALL_OW 283
94760: IFFALSE 94800
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
94762: LD_ADDR_VAR 0 4
94766: PUSH
94767: LD_VAR 0 4
94771: PPUSH
94772: LD_VAR 0 4
94776: PUSH
94777: LD_INT 1
94779: PLUS
94780: PPUSH
94781: LD_VAR 0 5
94785: PUSH
94786: LD_VAR 0 6
94790: PUSH
94791: EMPTY
94792: LIST
94793: LIST
94794: PPUSH
94795: CALL_OW 1
94799: ST_TO_ADDR
// end ;
94800: GO 94724
94802: POP
94803: POP
94804: GO 94704
94806: POP
94807: POP
// end ;
94808: LD_VAR 0 4
94812: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
94813: LD_INT 0
94815: PPUSH
94816: PPUSH
94817: PPUSH
94818: PPUSH
94819: PPUSH
94820: PPUSH
94821: PPUSH
94822: PPUSH
// if not units then
94823: LD_VAR 0 1
94827: NOT
94828: IFFALSE 94832
// exit ;
94830: GO 95356
// result := UnitFilter ( units , [ f_ok ] ) ;
94832: LD_ADDR_VAR 0 3
94836: PUSH
94837: LD_VAR 0 1
94841: PPUSH
94842: LD_INT 50
94844: PUSH
94845: EMPTY
94846: LIST
94847: PPUSH
94848: CALL_OW 72
94852: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
94853: LD_ADDR_VAR 0 8
94857: PUSH
94858: LD_VAR 0 1
94862: PUSH
94863: LD_INT 1
94865: ARRAY
94866: PPUSH
94867: CALL_OW 255
94871: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
94872: LD_ADDR_VAR 0 10
94876: PUSH
94877: LD_INT 29
94879: PUSH
94880: LD_INT 91
94882: PUSH
94883: LD_INT 49
94885: PUSH
94886: EMPTY
94887: LIST
94888: LIST
94889: LIST
94890: ST_TO_ADDR
// if not result then
94891: LD_VAR 0 3
94895: NOT
94896: IFFALSE 94900
// exit ;
94898: GO 95356
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
94900: LD_ADDR_VAR 0 5
94904: PUSH
94905: LD_INT 81
94907: PUSH
94908: LD_VAR 0 8
94912: PUSH
94913: EMPTY
94914: LIST
94915: LIST
94916: PPUSH
94917: CALL_OW 69
94921: ST_TO_ADDR
// for i in result do
94922: LD_ADDR_VAR 0 4
94926: PUSH
94927: LD_VAR 0 3
94931: PUSH
94932: FOR_IN
94933: IFFALSE 95354
// begin tag := GetTag ( i ) + 1 ;
94935: LD_ADDR_VAR 0 9
94939: PUSH
94940: LD_VAR 0 4
94944: PPUSH
94945: CALL_OW 110
94949: PUSH
94950: LD_INT 1
94952: PLUS
94953: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
94954: LD_ADDR_VAR 0 7
94958: PUSH
94959: LD_VAR 0 4
94963: PPUSH
94964: CALL_OW 250
94968: PPUSH
94969: LD_VAR 0 4
94973: PPUSH
94974: CALL_OW 251
94978: PPUSH
94979: LD_INT 6
94981: PPUSH
94982: CALL 94555 0 3
94986: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
94987: LD_VAR 0 4
94991: PPUSH
94992: CALL_OW 247
94996: PUSH
94997: LD_INT 2
94999: EQUAL
95000: PUSH
95001: LD_VAR 0 7
95005: AND
95006: PUSH
95007: LD_VAR 0 4
95011: PPUSH
95012: CALL_OW 264
95016: PUSH
95017: LD_VAR 0 10
95021: IN
95022: NOT
95023: AND
95024: IFFALSE 95063
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
95026: LD_VAR 0 4
95030: PPUSH
95031: LD_VAR 0 7
95035: PUSH
95036: LD_INT 1
95038: ARRAY
95039: PUSH
95040: LD_INT 1
95042: ARRAY
95043: PPUSH
95044: LD_VAR 0 7
95048: PUSH
95049: LD_INT 1
95051: ARRAY
95052: PUSH
95053: LD_INT 2
95055: ARRAY
95056: PPUSH
95057: CALL_OW 116
95061: GO 95352
// if path > tag then
95063: LD_VAR 0 2
95067: PUSH
95068: LD_VAR 0 9
95072: GREATER
95073: IFFALSE 95281
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
95075: LD_ADDR_VAR 0 6
95079: PUSH
95080: LD_VAR 0 5
95084: PPUSH
95085: LD_INT 91
95087: PUSH
95088: LD_VAR 0 4
95092: PUSH
95093: LD_INT 8
95095: PUSH
95096: EMPTY
95097: LIST
95098: LIST
95099: LIST
95100: PPUSH
95101: CALL_OW 72
95105: ST_TO_ADDR
// if nearEnemy then
95106: LD_VAR 0 6
95110: IFFALSE 95179
// begin if GetWeapon ( i ) = ru_time_lapser then
95112: LD_VAR 0 4
95116: PPUSH
95117: CALL_OW 264
95121: PUSH
95122: LD_INT 49
95124: EQUAL
95125: IFFALSE 95153
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
95127: LD_VAR 0 4
95131: PPUSH
95132: LD_VAR 0 6
95136: PPUSH
95137: LD_VAR 0 4
95141: PPUSH
95142: CALL_OW 74
95146: PPUSH
95147: CALL_OW 112
95151: GO 95177
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
95153: LD_VAR 0 4
95157: PPUSH
95158: LD_VAR 0 6
95162: PPUSH
95163: LD_VAR 0 4
95167: PPUSH
95168: CALL_OW 74
95172: PPUSH
95173: CALL 96281 0 2
// end else
95177: GO 95279
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
95179: LD_VAR 0 4
95183: PPUSH
95184: LD_VAR 0 2
95188: PUSH
95189: LD_VAR 0 9
95193: ARRAY
95194: PUSH
95195: LD_INT 1
95197: ARRAY
95198: PPUSH
95199: LD_VAR 0 2
95203: PUSH
95204: LD_VAR 0 9
95208: ARRAY
95209: PUSH
95210: LD_INT 2
95212: ARRAY
95213: PPUSH
95214: CALL_OW 297
95218: PUSH
95219: LD_INT 6
95221: GREATER
95222: IFFALSE 95265
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
95224: LD_VAR 0 4
95228: PPUSH
95229: LD_VAR 0 2
95233: PUSH
95234: LD_VAR 0 9
95238: ARRAY
95239: PUSH
95240: LD_INT 1
95242: ARRAY
95243: PPUSH
95244: LD_VAR 0 2
95248: PUSH
95249: LD_VAR 0 9
95253: ARRAY
95254: PUSH
95255: LD_INT 2
95257: ARRAY
95258: PPUSH
95259: CALL_OW 114
95263: GO 95279
// SetTag ( i , tag ) ;
95265: LD_VAR 0 4
95269: PPUSH
95270: LD_VAR 0 9
95274: PPUSH
95275: CALL_OW 109
// end else
95279: GO 95352
// if enemy then
95281: LD_VAR 0 5
95285: IFFALSE 95352
// begin if GetWeapon ( i ) = ru_time_lapser then
95287: LD_VAR 0 4
95291: PPUSH
95292: CALL_OW 264
95296: PUSH
95297: LD_INT 49
95299: EQUAL
95300: IFFALSE 95328
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
95302: LD_VAR 0 4
95306: PPUSH
95307: LD_VAR 0 5
95311: PPUSH
95312: LD_VAR 0 4
95316: PPUSH
95317: CALL_OW 74
95321: PPUSH
95322: CALL_OW 112
95326: GO 95352
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
95328: LD_VAR 0 4
95332: PPUSH
95333: LD_VAR 0 5
95337: PPUSH
95338: LD_VAR 0 4
95342: PPUSH
95343: CALL_OW 74
95347: PPUSH
95348: CALL 96281 0 2
// end ; end ;
95352: GO 94932
95354: POP
95355: POP
// end ;
95356: LD_VAR 0 3
95360: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
95361: LD_INT 0
95363: PPUSH
95364: PPUSH
95365: PPUSH
// if not unit or IsInUnit ( unit ) then
95366: LD_VAR 0 1
95370: NOT
95371: PUSH
95372: LD_VAR 0 1
95376: PPUSH
95377: CALL_OW 310
95381: OR
95382: IFFALSE 95386
// exit ;
95384: GO 95477
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
95386: LD_ADDR_VAR 0 4
95390: PUSH
95391: LD_VAR 0 1
95395: PPUSH
95396: CALL_OW 250
95400: PPUSH
95401: LD_VAR 0 2
95405: PPUSH
95406: LD_INT 1
95408: PPUSH
95409: CALL_OW 272
95413: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
95414: LD_ADDR_VAR 0 5
95418: PUSH
95419: LD_VAR 0 1
95423: PPUSH
95424: CALL_OW 251
95428: PPUSH
95429: LD_VAR 0 2
95433: PPUSH
95434: LD_INT 1
95436: PPUSH
95437: CALL_OW 273
95441: ST_TO_ADDR
// if ValidHex ( x , y ) then
95442: LD_VAR 0 4
95446: PPUSH
95447: LD_VAR 0 5
95451: PPUSH
95452: CALL_OW 488
95456: IFFALSE 95477
// ComTurnXY ( unit , x , y ) ;
95458: LD_VAR 0 1
95462: PPUSH
95463: LD_VAR 0 4
95467: PPUSH
95468: LD_VAR 0 5
95472: PPUSH
95473: CALL_OW 118
// end ;
95477: LD_VAR 0 3
95481: RET
// export function SeeUnits ( side , units ) ; var i ; begin
95482: LD_INT 0
95484: PPUSH
95485: PPUSH
// result := false ;
95486: LD_ADDR_VAR 0 3
95490: PUSH
95491: LD_INT 0
95493: ST_TO_ADDR
// if not units then
95494: LD_VAR 0 2
95498: NOT
95499: IFFALSE 95503
// exit ;
95501: GO 95548
// for i in units do
95503: LD_ADDR_VAR 0 4
95507: PUSH
95508: LD_VAR 0 2
95512: PUSH
95513: FOR_IN
95514: IFFALSE 95546
// if See ( side , i ) then
95516: LD_VAR 0 1
95520: PPUSH
95521: LD_VAR 0 4
95525: PPUSH
95526: CALL_OW 292
95530: IFFALSE 95544
// begin result := true ;
95532: LD_ADDR_VAR 0 3
95536: PUSH
95537: LD_INT 1
95539: ST_TO_ADDR
// exit ;
95540: POP
95541: POP
95542: GO 95548
// end ;
95544: GO 95513
95546: POP
95547: POP
// end ;
95548: LD_VAR 0 3
95552: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
95553: LD_INT 0
95555: PPUSH
95556: PPUSH
95557: PPUSH
95558: PPUSH
// if not unit or not points then
95559: LD_VAR 0 1
95563: NOT
95564: PUSH
95565: LD_VAR 0 2
95569: NOT
95570: OR
95571: IFFALSE 95575
// exit ;
95573: GO 95665
// dist := 99999 ;
95575: LD_ADDR_VAR 0 5
95579: PUSH
95580: LD_INT 99999
95582: ST_TO_ADDR
// for i in points do
95583: LD_ADDR_VAR 0 4
95587: PUSH
95588: LD_VAR 0 2
95592: PUSH
95593: FOR_IN
95594: IFFALSE 95663
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
95596: LD_ADDR_VAR 0 6
95600: PUSH
95601: LD_VAR 0 1
95605: PPUSH
95606: LD_VAR 0 4
95610: PUSH
95611: LD_INT 1
95613: ARRAY
95614: PPUSH
95615: LD_VAR 0 4
95619: PUSH
95620: LD_INT 2
95622: ARRAY
95623: PPUSH
95624: CALL_OW 297
95628: ST_TO_ADDR
// if tmpDist < dist then
95629: LD_VAR 0 6
95633: PUSH
95634: LD_VAR 0 5
95638: LESS
95639: IFFALSE 95661
// begin result := i ;
95641: LD_ADDR_VAR 0 3
95645: PUSH
95646: LD_VAR 0 4
95650: ST_TO_ADDR
// dist := tmpDist ;
95651: LD_ADDR_VAR 0 5
95655: PUSH
95656: LD_VAR 0 6
95660: ST_TO_ADDR
// end ; end ;
95661: GO 95593
95663: POP
95664: POP
// end ;
95665: LD_VAR 0 3
95669: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
95670: LD_INT 0
95672: PPUSH
// uc_side := side ;
95673: LD_ADDR_OWVAR 20
95677: PUSH
95678: LD_VAR 0 1
95682: ST_TO_ADDR
// uc_nation := 3 ;
95683: LD_ADDR_OWVAR 21
95687: PUSH
95688: LD_INT 3
95690: ST_TO_ADDR
// vc_chassis := 25 ;
95691: LD_ADDR_OWVAR 37
95695: PUSH
95696: LD_INT 25
95698: ST_TO_ADDR
// vc_engine := engine_siberite ;
95699: LD_ADDR_OWVAR 39
95703: PUSH
95704: LD_INT 3
95706: ST_TO_ADDR
// vc_control := control_computer ;
95707: LD_ADDR_OWVAR 38
95711: PUSH
95712: LD_INT 3
95714: ST_TO_ADDR
// vc_weapon := 59 ;
95715: LD_ADDR_OWVAR 40
95719: PUSH
95720: LD_INT 59
95722: ST_TO_ADDR
// result := CreateVehicle ;
95723: LD_ADDR_VAR 0 5
95727: PUSH
95728: CALL_OW 45
95732: ST_TO_ADDR
// SetDir ( result , d ) ;
95733: LD_VAR 0 5
95737: PPUSH
95738: LD_VAR 0 4
95742: PPUSH
95743: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
95747: LD_VAR 0 5
95751: PPUSH
95752: LD_VAR 0 2
95756: PPUSH
95757: LD_VAR 0 3
95761: PPUSH
95762: LD_INT 0
95764: PPUSH
95765: CALL_OW 48
// end ;
95769: LD_VAR 0 5
95773: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
95774: LD_INT 0
95776: PPUSH
95777: PPUSH
95778: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
95779: LD_ADDR_VAR 0 2
95783: PUSH
95784: LD_INT 0
95786: PUSH
95787: LD_INT 0
95789: PUSH
95790: LD_INT 0
95792: PUSH
95793: LD_INT 0
95795: PUSH
95796: EMPTY
95797: LIST
95798: LIST
95799: LIST
95800: LIST
95801: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
95802: LD_VAR 0 1
95806: NOT
95807: PUSH
95808: LD_VAR 0 1
95812: PPUSH
95813: CALL_OW 264
95817: PUSH
95818: LD_INT 12
95820: PUSH
95821: LD_INT 51
95823: PUSH
95824: LD_INT 32
95826: PUSH
95827: LD_INT 89
95829: PUSH
95830: EMPTY
95831: LIST
95832: LIST
95833: LIST
95834: LIST
95835: IN
95836: NOT
95837: OR
95838: IFFALSE 95842
// exit ;
95840: GO 95940
// for i := 1 to 3 do
95842: LD_ADDR_VAR 0 3
95846: PUSH
95847: DOUBLE
95848: LD_INT 1
95850: DEC
95851: ST_TO_ADDR
95852: LD_INT 3
95854: PUSH
95855: FOR_TO
95856: IFFALSE 95938
// begin tmp := GetCargo ( cargo , i ) ;
95858: LD_ADDR_VAR 0 4
95862: PUSH
95863: LD_VAR 0 1
95867: PPUSH
95868: LD_VAR 0 3
95872: PPUSH
95873: CALL_OW 289
95877: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
95878: LD_ADDR_VAR 0 2
95882: PUSH
95883: LD_VAR 0 2
95887: PPUSH
95888: LD_VAR 0 3
95892: PPUSH
95893: LD_VAR 0 4
95897: PPUSH
95898: CALL_OW 1
95902: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
95903: LD_ADDR_VAR 0 2
95907: PUSH
95908: LD_VAR 0 2
95912: PPUSH
95913: LD_INT 4
95915: PPUSH
95916: LD_VAR 0 2
95920: PUSH
95921: LD_INT 4
95923: ARRAY
95924: PUSH
95925: LD_VAR 0 4
95929: PLUS
95930: PPUSH
95931: CALL_OW 1
95935: ST_TO_ADDR
// end ;
95936: GO 95855
95938: POP
95939: POP
// end ;
95940: LD_VAR 0 2
95944: RET
// export function Length ( array ) ; begin
95945: LD_INT 0
95947: PPUSH
// result := array + 0 ;
95948: LD_ADDR_VAR 0 2
95952: PUSH
95953: LD_VAR 0 1
95957: PUSH
95958: LD_INT 0
95960: PLUS
95961: ST_TO_ADDR
// end ;
95962: LD_VAR 0 2
95966: RET
// export function PrepareArray ( array ) ; begin
95967: LD_INT 0
95969: PPUSH
// result := array diff 0 ;
95970: LD_ADDR_VAR 0 2
95974: PUSH
95975: LD_VAR 0 1
95979: PUSH
95980: LD_INT 0
95982: DIFF
95983: ST_TO_ADDR
// if not result [ 1 ] then
95984: LD_VAR 0 2
95988: PUSH
95989: LD_INT 1
95991: ARRAY
95992: NOT
95993: IFFALSE 96013
// result := Delete ( result , 1 ) ;
95995: LD_ADDR_VAR 0 2
95999: PUSH
96000: LD_VAR 0 2
96004: PPUSH
96005: LD_INT 1
96007: PPUSH
96008: CALL_OW 3
96012: ST_TO_ADDR
// end ;
96013: LD_VAR 0 2
96017: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
96018: LD_INT 0
96020: PPUSH
96021: PPUSH
96022: PPUSH
96023: PPUSH
// sibRocketRange := 25 ;
96024: LD_ADDR_VAR 0 6
96028: PUSH
96029: LD_INT 25
96031: ST_TO_ADDR
// result := false ;
96032: LD_ADDR_VAR 0 4
96036: PUSH
96037: LD_INT 0
96039: ST_TO_ADDR
// for i := 0 to 5 do
96040: LD_ADDR_VAR 0 5
96044: PUSH
96045: DOUBLE
96046: LD_INT 0
96048: DEC
96049: ST_TO_ADDR
96050: LD_INT 5
96052: PUSH
96053: FOR_TO
96054: IFFALSE 96121
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
96056: LD_VAR 0 1
96060: PPUSH
96061: LD_VAR 0 5
96065: PPUSH
96066: LD_VAR 0 6
96070: PPUSH
96071: CALL_OW 272
96075: PPUSH
96076: LD_VAR 0 2
96080: PPUSH
96081: LD_VAR 0 5
96085: PPUSH
96086: LD_VAR 0 6
96090: PPUSH
96091: CALL_OW 273
96095: PPUSH
96096: LD_VAR 0 3
96100: PPUSH
96101: CALL_OW 309
96105: IFFALSE 96119
// begin result := true ;
96107: LD_ADDR_VAR 0 4
96111: PUSH
96112: LD_INT 1
96114: ST_TO_ADDR
// exit ;
96115: POP
96116: POP
96117: GO 96123
// end ;
96119: GO 96053
96121: POP
96122: POP
// end ;
96123: LD_VAR 0 4
96127: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
96128: LD_INT 0
96130: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
96131: LD_VAR 0 1
96135: PPUSH
96136: LD_VAR 0 2
96140: PPUSH
96141: LD_INT 0
96143: PPUSH
96144: LD_INT 0
96146: PPUSH
96147: LD_INT 1
96149: PPUSH
96150: LD_INT 0
96152: PPUSH
96153: CALL_OW 587
// end ;
96157: LD_VAR 0 3
96161: RET
// export function CenterOnNow ( unit ) ; begin
96162: LD_INT 0
96164: PPUSH
// result := IsInUnit ( unit ) ;
96165: LD_ADDR_VAR 0 2
96169: PUSH
96170: LD_VAR 0 1
96174: PPUSH
96175: CALL_OW 310
96179: ST_TO_ADDR
// if not result then
96180: LD_VAR 0 2
96184: NOT
96185: IFFALSE 96197
// result := unit ;
96187: LD_ADDR_VAR 0 2
96191: PUSH
96192: LD_VAR 0 1
96196: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
96197: LD_VAR 0 1
96201: PPUSH
96202: CALL_OW 87
// end ;
96206: LD_VAR 0 2
96210: RET
// export function ComMoveHex ( unit , hex ) ; begin
96211: LD_INT 0
96213: PPUSH
// if not hex then
96214: LD_VAR 0 2
96218: NOT
96219: IFFALSE 96223
// exit ;
96221: GO 96276
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
96223: LD_VAR 0 2
96227: PUSH
96228: LD_INT 1
96230: ARRAY
96231: PPUSH
96232: LD_VAR 0 2
96236: PUSH
96237: LD_INT 2
96239: ARRAY
96240: PPUSH
96241: CALL_OW 428
96245: IFFALSE 96249
// exit ;
96247: GO 96276
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
96249: LD_VAR 0 1
96253: PPUSH
96254: LD_VAR 0 2
96258: PUSH
96259: LD_INT 1
96261: ARRAY
96262: PPUSH
96263: LD_VAR 0 2
96267: PUSH
96268: LD_INT 2
96270: ARRAY
96271: PPUSH
96272: CALL_OW 111
// end ;
96276: LD_VAR 0 3
96280: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
96281: LD_INT 0
96283: PPUSH
96284: PPUSH
96285: PPUSH
// if not unit or not enemy then
96286: LD_VAR 0 1
96290: NOT
96291: PUSH
96292: LD_VAR 0 2
96296: NOT
96297: OR
96298: IFFALSE 96302
// exit ;
96300: GO 96426
// x := GetX ( enemy ) ;
96302: LD_ADDR_VAR 0 4
96306: PUSH
96307: LD_VAR 0 2
96311: PPUSH
96312: CALL_OW 250
96316: ST_TO_ADDR
// y := GetY ( enemy ) ;
96317: LD_ADDR_VAR 0 5
96321: PUSH
96322: LD_VAR 0 2
96326: PPUSH
96327: CALL_OW 251
96331: ST_TO_ADDR
// if ValidHex ( x , y ) then
96332: LD_VAR 0 4
96336: PPUSH
96337: LD_VAR 0 5
96341: PPUSH
96342: CALL_OW 488
96346: IFFALSE 96426
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
96348: LD_VAR 0 2
96352: PPUSH
96353: CALL_OW 247
96357: PUSH
96358: LD_INT 3
96360: PUSH
96361: LD_INT 2
96363: PUSH
96364: EMPTY
96365: LIST
96366: LIST
96367: IN
96368: PUSH
96369: LD_VAR 0 1
96373: PPUSH
96374: CALL_OW 255
96378: PPUSH
96379: LD_VAR 0 2
96383: PPUSH
96384: CALL_OW 292
96388: AND
96389: IFFALSE 96407
// ComAttackUnit ( unit , enemy ) else
96391: LD_VAR 0 1
96395: PPUSH
96396: LD_VAR 0 2
96400: PPUSH
96401: CALL_OW 115
96405: GO 96426
// ComAgressiveMove ( unit , x , y ) ;
96407: LD_VAR 0 1
96411: PPUSH
96412: LD_VAR 0 4
96416: PPUSH
96417: LD_VAR 0 5
96421: PPUSH
96422: CALL_OW 114
// end ; end_of_file
96426: LD_VAR 0 3
96430: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
96431: LD_VAR 0 1
96435: PUSH
96436: LD_INT 200
96438: DOUBLE
96439: GREATEREQUAL
96440: IFFALSE 96448
96442: LD_INT 299
96444: DOUBLE
96445: LESSEQUAL
96446: IFTRUE 96450
96448: GO 96482
96450: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
96451: LD_VAR 0 1
96455: PPUSH
96456: LD_VAR 0 2
96460: PPUSH
96461: LD_VAR 0 3
96465: PPUSH
96466: LD_VAR 0 4
96470: PPUSH
96471: LD_VAR 0 5
96475: PPUSH
96476: CALL 50155 0 5
96480: GO 96559
96482: LD_INT 300
96484: DOUBLE
96485: GREATEREQUAL
96486: IFFALSE 96494
96488: LD_INT 399
96490: DOUBLE
96491: LESSEQUAL
96492: IFTRUE 96496
96494: GO 96558
96496: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
96497: LD_VAR 0 1
96501: PPUSH
96502: LD_VAR 0 2
96506: PPUSH
96507: LD_VAR 0 3
96511: PPUSH
96512: LD_VAR 0 4
96516: PPUSH
96517: LD_VAR 0 5
96521: PPUSH
96522: LD_VAR 0 6
96526: PPUSH
96527: LD_VAR 0 7
96531: PPUSH
96532: LD_VAR 0 8
96536: PPUSH
96537: LD_VAR 0 9
96541: PPUSH
96542: LD_VAR 0 10
96546: PPUSH
96547: LD_VAR 0 11
96551: PPUSH
96552: CALL 46480 0 11
96556: GO 96559
96558: POP
// end ;
96559: PPOPN 11
96561: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
96562: LD_VAR 0 1
96566: PPUSH
96567: LD_VAR 0 2
96571: PPUSH
96572: LD_VAR 0 3
96576: PPUSH
96577: LD_VAR 0 4
96581: PPUSH
96582: LD_VAR 0 5
96586: PPUSH
96587: CALL 49891 0 5
// end ; end_of_file
96591: PPOPN 5
96593: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
96594: LD_VAR 0 1
96598: PPUSH
96599: LD_VAR 0 2
96603: PPUSH
96604: LD_VAR 0 3
96608: PPUSH
96609: LD_VAR 0 4
96613: PPUSH
96614: LD_VAR 0 5
96618: PPUSH
96619: LD_VAR 0 6
96623: PPUSH
96624: CALL 34132 0 6
// end ;
96628: PPOPN 6
96630: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
96631: LD_INT 0
96633: PPUSH
// begin if not units then
96634: LD_VAR 0 1
96638: NOT
96639: IFFALSE 96643
// exit ;
96641: GO 96643
// end ;
96643: PPOPN 7
96645: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
96646: CALL 34036 0 0
// end ;
96650: PPOPN 1
96652: END
