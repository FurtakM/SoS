// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 115 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// PrepareArabian ;
  33: CALL 3401 0 0
// PrepareAmerican ;
  37: CALL 1011 0 0
// PrepareRussian ;
  41: CALL 8706 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  45: LD_INT 4
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 4
  53: PUSH
  54: LD_INT 5
  56: PUSH
  57: LD_INT 5
  59: PUSH
  60: LD_INT 5
  62: PUSH
  63: EMPTY
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: PUSH
  69: LD_OWVAR 67
  73: ARRAY
  74: PPUSH
  75: LD_INT 2
  77: PPUSH
  78: LD_INT 1
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 2
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: LD_INT 2
  92: PPUSH
  93: CALL 88983 0 9
// Action ;
  97: CALL 25319 0 0
// if debug then
 101: LD_EXP 1
 105: IFFALSE 114
// FogOff ( 1 ) ;
 107: LD_INT 1
 109: PPUSH
 110: CALL_OW 344
// end ;
 114: END
// export debug , mission_prefix , arBaseActive , arabianAttack , khatamStatus , seenRussianTeleport , joinedToEpsilon , arabianDefeated , hasBase , epsilon , escapeKhatam , arabianAttackSpawned , gensherEscaped , ruScriptActive , ruScriptActive2 , firstAttack , dialogRussianSpaceAmmo , russianWaveAttack , spawnedRussians , hasSniper , arabianEscapedCounter , ruActiveAttacks ; function Init ; begin
 115: LD_INT 0
 117: PPUSH
// debug := false ;
 118: LD_ADDR_EXP 1
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// mission_prefix := 08c_ ;
 126: LD_ADDR_EXP 2
 130: PUSH
 131: LD_STRING 08c_
 133: ST_TO_ADDR
// arBaseActive := true ;
 134: LD_ADDR_EXP 3
 138: PUSH
 139: LD_INT 1
 141: ST_TO_ADDR
// arabianAttack := false ;
 142: LD_ADDR_EXP 4
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// khatamStatus := false ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// seenRussianTeleport := false ;
 158: LD_ADDR_EXP 6
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// joinedToEpsilon := false ;
 166: LD_ADDR_EXP 7
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// arabianDefeated := false ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// arabianAttackSpawned := false ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// gensherEscaped := false ;
 190: LD_ADDR_EXP 13
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// hasBase := false ;
 198: LD_ADDR_EXP 9
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// epsilon := 0 ;
 206: LD_ADDR_EXP 10
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// escapeKhatam := false ;
 214: LD_ADDR_EXP 11
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// ruScriptActive := false ;
 222: LD_ADDR_EXP 14
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// ruScriptActive2 := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// firstAttack := false ;
 238: LD_ADDR_EXP 16
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// dialogRussianSpaceAmmo := false ;
 246: LD_ADDR_EXP 17
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// russianWaveAttack := 0 ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// spawnedRussians := false ;
 262: LD_ADDR_EXP 19
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// hasSniper := false ;
 270: LD_ADDR_EXP 20
 274: PUSH
 275: LD_INT 0
 277: ST_TO_ADDR
// arabianEscapedCounter := 0 ;
 278: LD_ADDR_EXP 21
 282: PUSH
 283: LD_INT 0
 285: ST_TO_ADDR
// ruActiveAttacks := false ;
 286: LD_ADDR_EXP 22
 290: PUSH
 291: LD_INT 0
 293: ST_TO_ADDR
// ruTransportDestroyed := false ;
 294: LD_ADDR_EXP 78
 298: PUSH
 299: LD_INT 0
 301: ST_TO_ADDR
// end ;
 302: LD_VAR 0 1
 306: RET
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) do
 307: LD_INT 22
 309: PUSH
 310: LD_INT 1
 312: PUSH
 313: EMPTY
 314: LIST
 315: LIST
 316: PUSH
 317: LD_INT 25
 319: PUSH
 320: LD_INT 5
 322: PUSH
 323: EMPTY
 324: LIST
 325: LIST
 326: PUSH
 327: EMPTY
 328: LIST
 329: LIST
 330: PPUSH
 331: CALL_OW 69
 335: IFFALSE 348
 337: GO 339
 339: DISABLE
// hasSniper := true ;
 340: LD_ADDR_EXP 20
 344: PUSH
 345: LD_INT 1
 347: ST_TO_ADDR
 348: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and not arabianAttack and spawnedRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 349: LD_INT 1
 351: PPUSH
 352: LD_INT 2
 354: PPUSH
 355: CALL_OW 81
 359: PUSH
 360: LD_INT 1
 362: EQUAL
 363: PUSH
 364: LD_EXP 4
 368: NOT
 369: AND
 370: PUSH
 371: LD_EXP 19
 375: AND
 376: PUSH
 377: LD_INT 22
 379: PUSH
 380: LD_INT 3
 382: PUSH
 383: EMPTY
 384: LIST
 385: LIST
 386: PPUSH
 387: CALL_OW 69
 391: PUSH
 392: LD_INT 0
 394: EQUAL
 395: AND
 396: IFFALSE 408
 398: GO 400
 400: DISABLE
// SetAchievement ( ACH_POWER ) ;
 401: LD_STRING ACH_POWER
 403: PPUSH
 404: CALL_OW 543
 408: END
// every 0 0$1 trigger spawnedRussians and not ruBase and not ruBase2 and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 409: LD_EXP 19
 413: PUSH
 414: LD_EXP 68
 418: NOT
 419: AND
 420: PUSH
 421: LD_EXP 69
 425: NOT
 426: AND
 427: PUSH
 428: LD_INT 22
 430: PUSH
 431: LD_INT 3
 433: PUSH
 434: EMPTY
 435: LIST
 436: LIST
 437: PPUSH
 438: CALL_OW 69
 442: PUSH
 443: LD_INT 0
 445: EQUAL
 446: AND
 447: IFFALSE 459
 449: GO 451
 451: DISABLE
// SetAchievement ( ACH_TACT ) ;
 452: LD_STRING ACH_TACT
 454: PPUSH
 455: CALL_OW 543
 459: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 460: LD_INT 22
 462: PUSH
 463: LD_INT 1
 465: PUSH
 466: EMPTY
 467: LIST
 468: LIST
 469: PUSH
 470: LD_INT 30
 472: PUSH
 473: LD_INT 1
 475: PUSH
 476: EMPTY
 477: LIST
 478: LIST
 479: PUSH
 480: EMPTY
 481: LIST
 482: LIST
 483: PPUSH
 484: CALL_OW 69
 488: PUSH
 489: LD_INT 22
 491: PUSH
 492: LD_INT 1
 494: PUSH
 495: EMPTY
 496: LIST
 497: LIST
 498: PUSH
 499: LD_INT 30
 501: PUSH
 502: LD_INT 32
 504: PUSH
 505: EMPTY
 506: LIST
 507: LIST
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PPUSH
 513: CALL_OW 69
 517: AND
 518: PUSH
 519: LD_INT 22
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: LD_INT 30
 531: PUSH
 532: LD_INT 33
 534: PUSH
 535: EMPTY
 536: LIST
 537: LIST
 538: PUSH
 539: EMPTY
 540: LIST
 541: LIST
 542: PPUSH
 543: CALL_OW 69
 547: AND
 548: PUSH
 549: LD_INT 22
 551: PUSH
 552: LD_INT 1
 554: PUSH
 555: EMPTY
 556: LIST
 557: LIST
 558: PUSH
 559: LD_INT 30
 561: PUSH
 562: LD_INT 5
 564: PUSH
 565: EMPTY
 566: LIST
 567: LIST
 568: PUSH
 569: EMPTY
 570: LIST
 571: LIST
 572: PPUSH
 573: CALL_OW 69
 577: AND
 578: PUSH
 579: LD_INT 22
 581: PUSH
 582: LD_INT 1
 584: PUSH
 585: EMPTY
 586: LIST
 587: LIST
 588: PUSH
 589: LD_INT 30
 591: PUSH
 592: LD_INT 3
 594: PUSH
 595: EMPTY
 596: LIST
 597: LIST
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PPUSH
 603: CALL_OW 69
 607: AND
 608: PUSH
 609: LD_INT 22
 611: PUSH
 612: LD_INT 1
 614: PUSH
 615: EMPTY
 616: LIST
 617: LIST
 618: PUSH
 619: LD_INT 30
 621: PUSH
 622: LD_INT 36
 624: PUSH
 625: EMPTY
 626: LIST
 627: LIST
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PPUSH
 633: CALL_OW 69
 637: AND
 638: PUSH
 639: LD_INT 22
 641: PUSH
 642: LD_INT 1
 644: PUSH
 645: EMPTY
 646: LIST
 647: LIST
 648: PUSH
 649: LD_INT 30
 651: PUSH
 652: LD_INT 31
 654: PUSH
 655: EMPTY
 656: LIST
 657: LIST
 658: PUSH
 659: EMPTY
 660: LIST
 661: LIST
 662: PPUSH
 663: CALL_OW 69
 667: AND
 668: PUSH
 669: LD_INT 22
 671: PUSH
 672: LD_INT 1
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: PUSH
 679: LD_INT 30
 681: PUSH
 682: LD_INT 22
 684: PUSH
 685: EMPTY
 686: LIST
 687: LIST
 688: PUSH
 689: EMPTY
 690: LIST
 691: LIST
 692: PPUSH
 693: CALL_OW 69
 697: AND
 698: PUSH
 699: LD_INT 22
 701: PUSH
 702: LD_INT 1
 704: PUSH
 705: EMPTY
 706: LIST
 707: LIST
 708: PUSH
 709: LD_INT 30
 711: PUSH
 712: LD_INT 20
 714: PUSH
 715: EMPTY
 716: LIST
 717: LIST
 718: PUSH
 719: EMPTY
 720: LIST
 721: LIST
 722: PPUSH
 723: CALL_OW 69
 727: AND
 728: PUSH
 729: LD_INT 22
 731: PUSH
 732: LD_INT 1
 734: PUSH
 735: EMPTY
 736: LIST
 737: LIST
 738: PUSH
 739: LD_INT 30
 741: PUSH
 742: LD_INT 19
 744: PUSH
 745: EMPTY
 746: LIST
 747: LIST
 748: PUSH
 749: EMPTY
 750: LIST
 751: LIST
 752: PPUSH
 753: CALL_OW 69
 757: AND
 758: PUSH
 759: LD_INT 22
 761: PUSH
 762: LD_INT 1
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: PUSH
 769: LD_INT 30
 771: PUSH
 772: LD_INT 16
 774: PUSH
 775: EMPTY
 776: LIST
 777: LIST
 778: PUSH
 779: EMPTY
 780: LIST
 781: LIST
 782: PPUSH
 783: CALL_OW 69
 787: AND
 788: PUSH
 789: LD_INT 22
 791: PUSH
 792: LD_INT 1
 794: PUSH
 795: EMPTY
 796: LIST
 797: LIST
 798: PUSH
 799: LD_INT 30
 801: PUSH
 802: LD_INT 17
 804: PUSH
 805: EMPTY
 806: LIST
 807: LIST
 808: PUSH
 809: EMPTY
 810: LIST
 811: LIST
 812: PPUSH
 813: CALL_OW 69
 817: AND
 818: PUSH
 819: LD_INT 22
 821: PUSH
 822: LD_INT 1
 824: PUSH
 825: EMPTY
 826: LIST
 827: LIST
 828: PUSH
 829: LD_INT 30
 831: PUSH
 832: LD_INT 21
 834: PUSH
 835: EMPTY
 836: LIST
 837: LIST
 838: PUSH
 839: EMPTY
 840: LIST
 841: LIST
 842: PPUSH
 843: CALL_OW 69
 847: AND
 848: PUSH
 849: LD_INT 22
 851: PUSH
 852: LD_INT 1
 854: PUSH
 855: EMPTY
 856: LIST
 857: LIST
 858: PUSH
 859: LD_INT 30
 861: PUSH
 862: LD_INT 29
 864: PUSH
 865: EMPTY
 866: LIST
 867: LIST
 868: PUSH
 869: EMPTY
 870: LIST
 871: LIST
 872: PPUSH
 873: CALL_OW 69
 877: AND
 878: PUSH
 879: LD_INT 22
 881: PUSH
 882: LD_INT 1
 884: PUSH
 885: EMPTY
 886: LIST
 887: LIST
 888: PUSH
 889: LD_INT 30
 891: PUSH
 892: LD_INT 30
 894: PUSH
 895: EMPTY
 896: LIST
 897: LIST
 898: PUSH
 899: EMPTY
 900: LIST
 901: LIST
 902: PPUSH
 903: CALL_OW 69
 907: AND
 908: PUSH
 909: LD_INT 22
 911: PUSH
 912: LD_INT 1
 914: PUSH
 915: EMPTY
 916: LIST
 917: LIST
 918: PUSH
 919: LD_INT 30
 921: PUSH
 922: LD_INT 27
 924: PUSH
 925: EMPTY
 926: LIST
 927: LIST
 928: PUSH
 929: EMPTY
 930: LIST
 931: LIST
 932: PPUSH
 933: CALL_OW 69
 937: AND
 938: PUSH
 939: LD_INT 22
 941: PUSH
 942: LD_INT 1
 944: PUSH
 945: EMPTY
 946: LIST
 947: LIST
 948: PUSH
 949: LD_INT 30
 951: PUSH
 952: LD_INT 26
 954: PUSH
 955: EMPTY
 956: LIST
 957: LIST
 958: PUSH
 959: EMPTY
 960: LIST
 961: LIST
 962: PPUSH
 963: CALL_OW 69
 967: AND
 968: PUSH
 969: LD_INT 22
 971: PUSH
 972: LD_INT 1
 974: PUSH
 975: EMPTY
 976: LIST
 977: LIST
 978: PUSH
 979: LD_INT 30
 981: PUSH
 982: LD_INT 28
 984: PUSH
 985: EMPTY
 986: LIST
 987: LIST
 988: PUSH
 989: EMPTY
 990: LIST
 991: LIST
 992: PPUSH
 993: CALL_OW 69
 997: AND
 998: IFFALSE 1010
1000: GO 1002
1002: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1003: LD_STRING ACH_ARCH
1005: PPUSH
1006: CALL_OW 543
1010: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Mike ; export Cornell , Truman , Powell ; export JMMSquad , others , others09 , ape09 ; export function PrepareAmerican ; var i , j , veh , vehs , sibRes , tmp , amount ; begin
1011: LD_INT 0
1013: PPUSH
1014: PPUSH
1015: PPUSH
1016: PPUSH
1017: PPUSH
1018: PPUSH
1019: PPUSH
1020: PPUSH
// uc_nation := nation_american ;
1021: LD_ADDR_OWVAR 21
1025: PUSH
1026: LD_INT 1
1028: ST_TO_ADDR
// uc_side := 4 ;
1029: LD_ADDR_OWVAR 20
1033: PUSH
1034: LD_INT 4
1036: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
1037: LD_ADDR_EXP 44
1041: PUSH
1042: LD_STRING Powell
1044: PPUSH
1045: LD_INT 0
1047: PPUSH
1048: LD_STRING 
1050: PPUSH
1051: CALL 54615 0 3
1055: ST_TO_ADDR
// uc_side := 1 ;
1056: LD_ADDR_OWVAR 20
1060: PUSH
1061: LD_INT 1
1063: ST_TO_ADDR
// JMMSquad := [ ] ;
1064: LD_ADDR_EXP 45
1068: PUSH
1069: EMPTY
1070: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 10_ ) ;
1071: LD_ADDR_EXP 23
1075: PUSH
1076: LD_STRING JMM
1078: PPUSH
1079: LD_EXP 1
1083: NOT
1084: PPUSH
1085: LD_STRING 10_
1087: PPUSH
1088: CALL 54615 0 3
1092: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 10_ ) ;
1093: LD_ADDR_EXP 32
1097: PUSH
1098: LD_STRING Gary
1100: PPUSH
1101: LD_EXP 1
1105: NOT
1106: PPUSH
1107: LD_STRING 10_
1109: PPUSH
1110: CALL 54615 0 3
1114: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 10_ ) ;
1115: LD_ADDR_EXP 27
1119: PUSH
1120: LD_STRING Cyrus
1122: PPUSH
1123: LD_EXP 1
1127: NOT
1128: PPUSH
1129: LD_STRING 10_
1131: PPUSH
1132: CALL 54615 0 3
1136: ST_TO_ADDR
// if Cyrus then
1137: LD_EXP 27
1141: IFFALSE 1159
// JMMSquad := JMMSquad ^ Cyrus ;
1143: LD_ADDR_EXP 45
1147: PUSH
1148: LD_EXP 45
1152: PUSH
1153: LD_EXP 27
1157: ADD
1158: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 10_ ) ;
1159: LD_ADDR_EXP 26
1163: PUSH
1164: LD_STRING Bobby
1166: PPUSH
1167: LD_EXP 1
1171: NOT
1172: PPUSH
1173: LD_STRING 10_
1175: PPUSH
1176: CALL 54615 0 3
1180: ST_TO_ADDR
// if Bobby then
1181: LD_EXP 26
1185: IFFALSE 1203
// JMMSquad := JMMSquad ^ Bobby ;
1187: LD_ADDR_EXP 45
1191: PUSH
1192: LD_EXP 45
1196: PUSH
1197: LD_EXP 26
1201: ADD
1202: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 10_ ) ;
1203: LD_ADDR_EXP 28
1207: PUSH
1208: LD_STRING Lisa
1210: PPUSH
1211: LD_EXP 1
1215: NOT
1216: PPUSH
1217: LD_STRING 10_
1219: PPUSH
1220: CALL 54615 0 3
1224: ST_TO_ADDR
// if Lisa then
1225: LD_EXP 28
1229: IFFALSE 1247
// JMMSquad := JMMSquad ^ Lisa ;
1231: LD_ADDR_EXP 45
1235: PUSH
1236: LD_EXP 45
1240: PUSH
1241: LD_EXP 28
1245: ADD
1246: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 10_ ) ;
1247: LD_ADDR_EXP 24
1251: PUSH
1252: LD_STRING Brown
1254: PPUSH
1255: LD_EXP 1
1259: NOT
1260: PPUSH
1261: LD_STRING 10_
1263: PPUSH
1264: CALL 54615 0 3
1268: ST_TO_ADDR
// if Brown then
1269: LD_EXP 24
1273: IFFALSE 1291
// JMMSquad := JMMSquad ^ Brown ;
1275: LD_ADDR_EXP 45
1279: PUSH
1280: LD_EXP 45
1284: PUSH
1285: LD_EXP 24
1289: ADD
1290: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 10_ ) ;
1291: LD_ADDR_EXP 25
1295: PUSH
1296: LD_STRING Donaldson
1298: PPUSH
1299: LD_EXP 1
1303: NOT
1304: PPUSH
1305: LD_STRING 10_
1307: PPUSH
1308: CALL 54615 0 3
1312: ST_TO_ADDR
// if Donaldson then
1313: LD_EXP 25
1317: IFFALSE 1335
// JMMSquad := JMMSquad ^ Donaldson ;
1319: LD_ADDR_EXP 45
1323: PUSH
1324: LD_EXP 45
1328: PUSH
1329: LD_EXP 25
1333: ADD
1334: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 10_ ) ;
1335: LD_ADDR_EXP 29
1339: PUSH
1340: LD_STRING Frank
1342: PPUSH
1343: LD_EXP 1
1347: NOT
1348: PPUSH
1349: LD_STRING 10_
1351: PPUSH
1352: CALL 54615 0 3
1356: ST_TO_ADDR
// if Frank then
1357: LD_EXP 29
1361: IFFALSE 1379
// JMMSquad := JMMSquad ^ Frank ;
1363: LD_ADDR_EXP 45
1367: PUSH
1368: LD_EXP 45
1372: PUSH
1373: LD_EXP 29
1377: ADD
1378: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 10_ ) ;
1379: LD_ADDR_EXP 31
1383: PUSH
1384: LD_STRING Houten
1386: PPUSH
1387: LD_EXP 1
1391: NOT
1392: PPUSH
1393: LD_STRING 10_
1395: PPUSH
1396: CALL 54615 0 3
1400: ST_TO_ADDR
// if Houten then
1401: LD_EXP 31
1405: IFFALSE 1423
// JMMSquad := JMMSquad ^ Houten ;
1407: LD_ADDR_EXP 45
1411: PUSH
1412: LD_EXP 45
1416: PUSH
1417: LD_EXP 31
1421: ADD
1422: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn10 ) ;
1423: LD_ADDR_EXP 46
1427: PUSH
1428: LD_STRING OthersIn10
1430: PPUSH
1431: CALL_OW 31
1435: ST_TO_ADDR
// if Count ( JMMSquad ) + Count ( others ) < 9 then
1436: LD_EXP 45
1440: PPUSH
1441: CALL 56717 0 1
1445: PUSH
1446: LD_EXP 46
1450: PPUSH
1451: CALL 56717 0 1
1455: PLUS
1456: PUSH
1457: LD_INT 9
1459: LESS
1460: IFFALSE 1547
// begin InitHC_All ( ) ;
1462: CALL_OW 584
// for i := 9 downto Count ( JMMSquad ) + Count ( others ) do
1466: LD_ADDR_VAR 0 2
1470: PUSH
1471: DOUBLE
1472: LD_INT 9
1474: INC
1475: ST_TO_ADDR
1476: LD_EXP 45
1480: PPUSH
1481: CALL 56717 0 1
1485: PUSH
1486: LD_EXP 46
1490: PPUSH
1491: CALL 56717 0 1
1495: PLUS
1496: PUSH
1497: FOR_DOWNTO
1498: IFFALSE 1545
// begin PrepareHuman ( false , i mod 4 + 1 , 5 ) ;
1500: LD_INT 0
1502: PPUSH
1503: LD_VAR 0 2
1507: PUSH
1508: LD_INT 4
1510: MOD
1511: PUSH
1512: LD_INT 1
1514: PLUS
1515: PPUSH
1516: LD_INT 5
1518: PPUSH
1519: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1523: LD_ADDR_EXP 46
1527: PUSH
1528: LD_EXP 46
1532: PPUSH
1533: CALL_OW 44
1537: PPUSH
1538: CALL 92306 0 2
1542: ST_TO_ADDR
// end ;
1543: GO 1497
1545: POP
1546: POP
// end ; if debug then
1547: LD_EXP 1
1551: IFFALSE 1592
// result := [ Cyrus , Bobby , Lisa , Donaldson , Brown ] else
1553: LD_ADDR_VAR 0 1
1557: PUSH
1558: LD_EXP 27
1562: PUSH
1563: LD_EXP 26
1567: PUSH
1568: LD_EXP 28
1572: PUSH
1573: LD_EXP 25
1577: PUSH
1578: LD_EXP 24
1582: PUSH
1583: EMPTY
1584: LIST
1585: LIST
1586: LIST
1587: LIST
1588: LIST
1589: ST_TO_ADDR
1590: GO 1755
// result := CharacterSelection ( 1 , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ sel_not_changeable , sel_hired , sel_change_class ] ^ JMM ^ Gary ^ [ sel_not_hired , sel_changeable , sel_change_class ] ^ JMMSquad ^ others ^ [ sel_not_changeable , sel_not_hired ] ^ Powell , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , class_scientistic ] ) ;
1592: LD_ADDR_VAR 0 1
1596: PUSH
1597: LD_STRING 1
1599: PPUSH
1600: LD_INT 6
1602: PUSH
1603: LD_INT 5
1605: PUSH
1606: LD_INT 4
1608: PUSH
1609: LD_INT 4
1611: PUSH
1612: EMPTY
1613: LIST
1614: LIST
1615: LIST
1616: LIST
1617: PUSH
1618: LD_OWVAR 67
1622: ARRAY
1623: PPUSH
1624: LD_INT 6
1626: PUSH
1627: LD_INT 5
1629: PUSH
1630: LD_INT 4
1632: PUSH
1633: LD_INT 4
1635: PUSH
1636: EMPTY
1637: LIST
1638: LIST
1639: LIST
1640: LIST
1641: PUSH
1642: LD_OWVAR 67
1646: ARRAY
1647: PPUSH
1648: LD_INT -4
1650: PUSH
1651: LD_INT -1
1653: PUSH
1654: LD_INT -5
1656: PUSH
1657: EMPTY
1658: LIST
1659: LIST
1660: LIST
1661: PUSH
1662: LD_EXP 23
1666: ADD
1667: PUSH
1668: LD_EXP 32
1672: ADD
1673: PUSH
1674: LD_INT -2
1676: PUSH
1677: LD_INT -3
1679: PUSH
1680: LD_INT -5
1682: PUSH
1683: EMPTY
1684: LIST
1685: LIST
1686: LIST
1687: ADD
1688: PUSH
1689: LD_EXP 45
1693: ADD
1694: PUSH
1695: LD_EXP 46
1699: ADD
1700: PUSH
1701: LD_INT -4
1703: PUSH
1704: LD_INT -2
1706: PUSH
1707: EMPTY
1708: LIST
1709: LIST
1710: ADD
1711: PUSH
1712: LD_EXP 44
1716: ADD
1717: PPUSH
1718: LD_INT 1
1720: PUSH
1721: LD_INT 3
1723: PUSH
1724: LD_INT 1
1726: PUSH
1727: EMPTY
1728: LIST
1729: LIST
1730: PUSH
1731: LD_INT 2
1733: PUSH
1734: LD_INT 1
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: PUSH
1741: LD_INT 4
1743: PUSH
1744: EMPTY
1745: LIST
1746: LIST
1747: LIST
1748: LIST
1749: PPUSH
1750: CALL_OW 42
1754: ST_TO_ADDR
// result := JoinUnion ( result , JMM ) ;
1755: LD_ADDR_VAR 0 1
1759: PUSH
1760: LD_VAR 0 1
1764: PPUSH
1765: LD_EXP 23
1769: PPUSH
1770: CALL 92343 0 2
1774: ST_TO_ADDR
// if Gary then
1775: LD_EXP 32
1779: IFFALSE 1801
// result := JoinUnion ( result , Gary ) ;
1781: LD_ADDR_VAR 0 1
1785: PUSH
1786: LD_VAR 0 1
1790: PPUSH
1791: LD_EXP 32
1795: PPUSH
1796: CALL 92343 0 2
1800: ST_TO_ADDR
// if Count ( others ) then
1801: LD_EXP 46
1805: PPUSH
1806: CALL 56717 0 1
1810: IFFALSE 1828
// others := others diff result ;
1812: LD_ADDR_EXP 46
1816: PUSH
1817: LD_EXP 46
1821: PUSH
1822: LD_VAR 0 1
1826: DIFF
1827: ST_TO_ADDR
// vehs := [ ] ;
1828: LD_ADDR_VAR 0 5
1832: PUSH
1833: EMPTY
1834: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1835: LD_INT 2
1837: PPUSH
1838: LD_INT 1
1840: PPUSH
1841: LD_INT 1
1843: PPUSH
1844: LD_INT 12
1846: PPUSH
1847: LD_INT 50
1849: PPUSH
1850: CALL 59455 0 5
// veh := CreateVehicle ;
1854: LD_ADDR_VAR 0 4
1858: PUSH
1859: CALL_OW 45
1863: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1864: LD_ADDR_VAR 0 5
1868: PUSH
1869: LD_VAR 0 5
1873: PPUSH
1874: LD_VAR 0 4
1878: PPUSH
1879: CALL 92306 0 2
1883: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1884: LD_VAR 0 4
1888: PPUSH
1889: LD_INT 1
1891: PPUSH
1892: CALL_OW 233
// sibRes := LoadVariable ( 09_sibRes , 100 ) - 20 ;
1896: LD_ADDR_VAR 0 6
1900: PUSH
1901: LD_STRING 09_sibRes
1903: PPUSH
1904: LD_INT 100
1906: PPUSH
1907: CALL_OW 30
1911: PUSH
1912: LD_INT 20
1914: MINUS
1915: ST_TO_ADDR
// if sibRes >= 100 then
1916: LD_VAR 0 6
1920: PUSH
1921: LD_INT 100
1923: GREATEREQUAL
1924: IFFALSE 1943
// SetCargo ( veh , mat_siberit , 100 ) else
1926: LD_VAR 0 4
1930: PPUSH
1931: LD_INT 3
1933: PPUSH
1934: LD_INT 100
1936: PPUSH
1937: CALL_OW 290
1941: GO 1960
// SetCargo ( veh , mat_siberit , sibRes ) ;
1943: LD_VAR 0 4
1947: PPUSH
1948: LD_INT 3
1950: PPUSH
1951: LD_VAR 0 6
1955: PPUSH
1956: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1960: LD_INT 2
1962: PPUSH
1963: LD_INT 1
1965: PPUSH
1966: LD_INT 1
1968: PPUSH
1969: LD_INT 12
1971: PPUSH
1972: LD_INT 50
1974: PPUSH
1975: CALL 59455 0 5
// veh := CreateVehicle ;
1979: LD_ADDR_VAR 0 4
1983: PUSH
1984: CALL_OW 45
1988: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1989: LD_ADDR_VAR 0 5
1993: PUSH
1994: LD_VAR 0 5
1998: PPUSH
1999: LD_VAR 0 4
2003: PPUSH
2004: CALL 92306 0 2
2008: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2009: LD_VAR 0 4
2013: PPUSH
2014: LD_INT 1
2016: PPUSH
2017: CALL_OW 233
// SetCargo ( veh , mat_cans , 100 ) ;
2021: LD_VAR 0 4
2025: PPUSH
2026: LD_INT 1
2028: PPUSH
2029: LD_INT 100
2031: PPUSH
2032: CALL_OW 290
// for i := 1 to Count ( result ) - 2 do
2036: LD_ADDR_VAR 0 2
2040: PUSH
2041: DOUBLE
2042: LD_INT 1
2044: DEC
2045: ST_TO_ADDR
2046: LD_VAR 0 1
2050: PPUSH
2051: CALL 56717 0 1
2055: PUSH
2056: LD_INT 2
2058: MINUS
2059: PUSH
2060: FOR_TO
2061: IFFALSE 2167
// begin PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , [ us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun ] [ i mod 5 + 1 ] , rand ( 45 , 55 ) ) ;
2063: LD_INT 2
2065: PPUSH
2066: LD_INT 1
2068: PPUSH
2069: LD_INT 1
2071: PPUSH
2072: LD_INT 3
2074: PUSH
2075: LD_INT 4
2077: PUSH
2078: LD_INT 5
2080: PUSH
2081: LD_INT 11
2083: PUSH
2084: LD_INT 3
2086: PUSH
2087: EMPTY
2088: LIST
2089: LIST
2090: LIST
2091: LIST
2092: LIST
2093: PUSH
2094: LD_VAR 0 2
2098: PUSH
2099: LD_INT 5
2101: MOD
2102: PUSH
2103: LD_INT 1
2105: PLUS
2106: ARRAY
2107: PPUSH
2108: LD_INT 45
2110: PPUSH
2111: LD_INT 55
2113: PPUSH
2114: CALL_OW 12
2118: PPUSH
2119: CALL 59455 0 5
// veh := CreateVehicle ;
2123: LD_ADDR_VAR 0 4
2127: PUSH
2128: CALL_OW 45
2132: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
2133: LD_ADDR_VAR 0 5
2137: PUSH
2138: LD_VAR 0 5
2142: PPUSH
2143: LD_VAR 0 4
2147: PPUSH
2148: CALL 92306 0 2
2152: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2153: LD_VAR 0 4
2157: PPUSH
2158: LD_INT 1
2160: PPUSH
2161: CALL_OW 233
// end ;
2165: GO 2060
2167: POP
2168: POP
// for i in vehs do
2169: LD_ADDR_VAR 0 2
2173: PUSH
2174: LD_VAR 0 5
2178: PUSH
2179: FOR_IN
2180: IFFALSE 2235
// begin PlaceUnitArea ( i , startArea , false ) ;
2182: LD_VAR 0 2
2186: PPUSH
2187: LD_INT 3
2189: PPUSH
2190: LD_INT 0
2192: PPUSH
2193: CALL_OW 49
// PlaceHumanInUnit ( result [ 1 ] , i ) ;
2197: LD_VAR 0 1
2201: PUSH
2202: LD_INT 1
2204: ARRAY
2205: PPUSH
2206: LD_VAR 0 2
2210: PPUSH
2211: CALL_OW 52
// result := Delete ( result , 1 ) ;
2215: LD_ADDR_VAR 0 1
2219: PUSH
2220: LD_VAR 0 1
2224: PPUSH
2225: LD_INT 1
2227: PPUSH
2228: CALL_OW 3
2232: ST_TO_ADDR
// end ;
2233: GO 2179
2235: POP
2236: POP
// uc_side := 4 ;
2237: LD_ADDR_OWVAR 20
2241: PUSH
2242: LD_INT 4
2244: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , debug ) then
2245: LD_STRING 08_SikorskiStatus
2247: PPUSH
2248: LD_EXP 1
2252: PPUSH
2253: CALL_OW 30
2257: IFFALSE 2278
// Truman := PrepareUnit ( Truman , false ,  ) ;
2259: LD_ADDR_EXP 43
2263: PUSH
2264: LD_STRING Truman
2266: PPUSH
2267: LD_INT 0
2269: PPUSH
2270: LD_STRING 
2272: PPUSH
2273: CALL 54615 0 3
2277: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , false ,  ) ;
2278: LD_ADDR_EXP 33
2282: PUSH
2283: LD_STRING Simms
2285: PPUSH
2286: LD_INT 0
2288: PPUSH
2289: LD_STRING 
2291: PPUSH
2292: CALL 54615 0 3
2296: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 08_ ) ;
2297: LD_ADDR_EXP 34
2301: PUSH
2302: LD_STRING Denis
2304: PPUSH
2305: LD_EXP 1
2309: NOT
2310: PPUSH
2311: LD_STRING 08_
2313: PPUSH
2314: CALL 54615 0 3
2318: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 08_ ) ;
2319: LD_ADDR_EXP 35
2323: PUSH
2324: LD_STRING Joan
2326: PPUSH
2327: LD_EXP 1
2331: NOT
2332: PPUSH
2333: LD_STRING 08_
2335: PPUSH
2336: CALL 54615 0 3
2340: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 08_ ) ;
2341: LD_ADDR_EXP 41
2345: PUSH
2346: LD_STRING Mike
2348: PPUSH
2349: LD_EXP 1
2353: NOT
2354: PPUSH
2355: LD_STRING 08_
2357: PPUSH
2358: CALL 54615 0 3
2362: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2363: LD_STRING 08_Khatam
2365: PPUSH
2366: CALL_OW 28
2370: IFFALSE 2393
// Khatam := PrepareUnit ( Khatam , true , 08_ ) else
2372: LD_ADDR_EXP 36
2376: PUSH
2377: LD_STRING Khatam
2379: PPUSH
2380: LD_INT 1
2382: PPUSH
2383: LD_STRING 08_
2385: PPUSH
2386: CALL 54615 0 3
2390: ST_TO_ADDR
2391: GO 2421
// if TestCharacters ( 03_Khatam ) then
2393: LD_STRING 03_Khatam
2395: PPUSH
2396: CALL_OW 28
2400: IFFALSE 2421
// Khatam := PrepareUnit ( Khatam , true , 03_ ) ;
2402: LD_ADDR_EXP 36
2406: PUSH
2407: LD_STRING Khatam
2409: PPUSH
2410: LD_INT 1
2412: PPUSH
2413: LD_STRING 03_
2415: PPUSH
2416: CALL 54615 0 3
2420: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 08_ ) ;
2421: LD_ADDR_EXP 37
2425: PUSH
2426: LD_STRING Gladstone
2428: PPUSH
2429: LD_EXP 1
2433: NOT
2434: PPUSH
2435: LD_STRING 08_
2437: PPUSH
2438: CALL 54615 0 3
2442: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) ,  ) ;
2443: LD_ADDR_EXP 39
2447: PUSH
2448: LD_STRING DeltaDoctor
2450: PPUSH
2451: LD_EXP 1
2455: NOT
2456: PPUSH
2457: LD_STRING 
2459: PPUSH
2460: CALL 54615 0 3
2464: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 08_ ) ;
2465: LD_ADDR_EXP 29
2469: PUSH
2470: LD_STRING Frank
2472: PPUSH
2473: LD_EXP 1
2477: NOT
2478: PPUSH
2479: LD_STRING 08_
2481: PPUSH
2482: CALL 54615 0 3
2486: ST_TO_ADDR
// if Frank then
2487: LD_EXP 29
2491: IFFALSE 2514
// Kikuchi := PrepareUnit ( Yamoko , false ,  ) else
2493: LD_ADDR_EXP 30
2497: PUSH
2498: LD_STRING Yamoko
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: LD_STRING 
2506: PPUSH
2507: CALL 54615 0 3
2511: ST_TO_ADDR
2512: GO 2536
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 08_ ) ;
2514: LD_ADDR_EXP 30
2518: PUSH
2519: LD_STRING Kikuchi
2521: PPUSH
2522: LD_EXP 1
2526: NOT
2527: PPUSH
2528: LD_STRING 08_
2530: PPUSH
2531: CALL 54615 0 3
2535: ST_TO_ADDR
// others09 := CreateCharacterSet ( 09_others ) ;
2536: LD_ADDR_EXP 47
2540: PUSH
2541: LD_STRING 09_others
2543: PPUSH
2544: CALL_OW 31
2548: ST_TO_ADDR
// ape09 := CreateCharacterSet ( 09_apes ) ;
2549: LD_ADDR_EXP 48
2553: PUSH
2554: LD_STRING 09_apes
2556: PPUSH
2557: CALL_OW 31
2561: ST_TO_ADDR
// if Truman then
2562: LD_EXP 43
2566: IFFALSE 2583
// PlaceUnitArea ( Truman , epsilonSpawnArea , false ) ;
2568: LD_EXP 43
2572: PPUSH
2573: LD_INT 4
2575: PPUSH
2576: LD_INT 0
2578: PPUSH
2579: CALL_OW 49
// if Mike then
2583: LD_EXP 41
2587: IFFALSE 2604
// PlaceUnitArea ( Mike , epsilonSpawnArea , false ) ;
2589: LD_EXP 41
2593: PPUSH
2594: LD_INT 4
2596: PPUSH
2597: LD_INT 0
2599: PPUSH
2600: CALL_OW 49
// if Simms then
2604: LD_EXP 33
2608: IFFALSE 2625
// PlaceUnitArea ( Simms , epsilonSpawnArea , false ) ;
2610: LD_EXP 33
2614: PPUSH
2615: LD_INT 4
2617: PPUSH
2618: LD_INT 0
2620: PPUSH
2621: CALL_OW 49
// if Denis then
2625: LD_EXP 34
2629: IFFALSE 2646
// PlaceUnitArea ( Denis , epsilonSpawnArea , false ) ;
2631: LD_EXP 34
2635: PPUSH
2636: LD_INT 4
2638: PPUSH
2639: LD_INT 0
2641: PPUSH
2642: CALL_OW 49
// if Joan then
2646: LD_EXP 35
2650: IFFALSE 2667
// PlaceUnitArea ( Joan , epsilonSpawnArea , false ) ;
2652: LD_EXP 35
2656: PPUSH
2657: LD_INT 4
2659: PPUSH
2660: LD_INT 0
2662: PPUSH
2663: CALL_OW 49
// if Khatam then
2667: LD_EXP 36
2671: IFFALSE 2688
// PlaceUnitArea ( Khatam , epsilonSpawnArea , false ) ;
2673: LD_EXP 36
2677: PPUSH
2678: LD_INT 4
2680: PPUSH
2681: LD_INT 0
2683: PPUSH
2684: CALL_OW 49
// if Gladstone then
2688: LD_EXP 37
2692: IFFALSE 2709
// PlaceUnitArea ( Gladstone , epsilonSpawnArea , false ) ;
2694: LD_EXP 37
2698: PPUSH
2699: LD_INT 4
2701: PPUSH
2702: LD_INT 0
2704: PPUSH
2705: CALL_OW 49
// if DeltaDoctor then
2709: LD_EXP 39
2713: IFFALSE 2730
// PlaceUnitArea ( DeltaDoctor , epsilonSpawnArea , false ) ;
2715: LD_EXP 39
2719: PPUSH
2720: LD_INT 4
2722: PPUSH
2723: LD_INT 0
2725: PPUSH
2726: CALL_OW 49
// if Kikuchi then
2730: LD_EXP 30
2734: IFFALSE 2751
// PlaceUnitArea ( Kikuchi , epsilonSpawnArea , false ) ;
2736: LD_EXP 30
2740: PPUSH
2741: LD_INT 4
2743: PPUSH
2744: LD_INT 0
2746: PPUSH
2747: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , class_scientistic ) ;
2751: LD_EXP 33
2755: PUSH
2756: LD_EXP 36
2760: PUSH
2761: LD_EXP 34
2765: PUSH
2766: LD_EXP 37
2770: PUSH
2771: LD_EXP 39
2775: PUSH
2776: LD_EXP 35
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: LIST
2788: PPUSH
2789: LD_INT 4
2791: PPUSH
2792: CALL_OW 336
// amount := Count ( others09 ) ;
2796: LD_ADDR_VAR 0 8
2800: PUSH
2801: LD_EXP 47
2805: PPUSH
2806: CALL 56717 0 1
2810: ST_TO_ADDR
// if amount then
2811: LD_VAR 0 8
2815: IFFALSE 2963
// begin if amount > [ 6 , 5 , 4 , 4 ] [ Difficulty ] then
2817: LD_VAR 0 8
2821: PUSH
2822: LD_INT 6
2824: PUSH
2825: LD_INT 5
2827: PUSH
2828: LD_INT 4
2830: PUSH
2831: LD_INT 4
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: PUSH
2840: LD_OWVAR 67
2844: ARRAY
2845: GREATER
2846: IFFALSE 2877
// amount := [ 6 , 5 , 4 , 4 ] [ Difficulty ] ;
2848: LD_ADDR_VAR 0 8
2852: PUSH
2853: LD_INT 6
2855: PUSH
2856: LD_INT 5
2858: PUSH
2859: LD_INT 4
2861: PUSH
2862: LD_INT 4
2864: PUSH
2865: EMPTY
2866: LIST
2867: LIST
2868: LIST
2869: LIST
2870: PUSH
2871: LD_OWVAR 67
2875: ARRAY
2876: ST_TO_ADDR
// for i := 1 to amount do
2877: LD_ADDR_VAR 0 2
2881: PUSH
2882: DOUBLE
2883: LD_INT 1
2885: DEC
2886: ST_TO_ADDR
2887: LD_VAR 0 8
2891: PUSH
2892: FOR_TO
2893: IFFALSE 2934
// begin PlaceUnitArea ( others09 [ 1 ] , epsilonSpawnArea , false ) ;
2895: LD_EXP 47
2899: PUSH
2900: LD_INT 1
2902: ARRAY
2903: PPUSH
2904: LD_INT 4
2906: PPUSH
2907: LD_INT 0
2909: PPUSH
2910: CALL_OW 49
// others09 := Delete ( others09 , 1 ) ;
2914: LD_ADDR_EXP 47
2918: PUSH
2919: LD_EXP 47
2923: PPUSH
2924: LD_INT 1
2926: PPUSH
2927: CALL_OW 3
2931: ST_TO_ADDR
// end ;
2932: GO 2892
2934: POP
2935: POP
// if Count ( others09 ) then
2936: LD_EXP 47
2940: PPUSH
2941: CALL 56717 0 1
2945: IFFALSE 2963
// others := others union others09 ;
2947: LD_ADDR_EXP 46
2951: PUSH
2952: LD_EXP 46
2956: PUSH
2957: LD_EXP 47
2961: UNION
2962: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) = 0 then
2963: LD_INT 22
2965: PUSH
2966: LD_INT 4
2968: PUSH
2969: EMPTY
2970: LIST
2971: LIST
2972: PUSH
2973: LD_INT 50
2975: PUSH
2976: EMPTY
2977: LIST
2978: PUSH
2979: LD_INT 25
2981: PUSH
2982: LD_INT 2
2984: PUSH
2985: EMPTY
2986: LIST
2987: LIST
2988: PUSH
2989: EMPTY
2990: LIST
2991: LIST
2992: LIST
2993: PPUSH
2994: CALL_OW 69
2998: PUSH
2999: LD_INT 0
3001: EQUAL
3002: IFFALSE 3141
// begin tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3004: LD_ADDR_VAR 0 7
3008: PUSH
3009: LD_INT 22
3011: PUSH
3012: LD_INT 4
3014: PUSH
3015: EMPTY
3016: LIST
3017: LIST
3018: PUSH
3019: LD_INT 50
3021: PUSH
3022: EMPTY
3023: LIST
3024: PUSH
3025: LD_INT 25
3027: PUSH
3028: LD_INT 2
3030: PUSH
3031: EMPTY
3032: LIST
3033: LIST
3034: PUSH
3035: EMPTY
3036: LIST
3037: LIST
3038: LIST
3039: PPUSH
3040: CALL_OW 69
3044: PUSH
3045: LD_EXP 33
3049: PUSH
3050: LD_EXP 36
3054: PUSH
3055: LD_EXP 34
3059: PUSH
3060: LD_EXP 37
3064: PUSH
3065: LD_EXP 39
3069: PUSH
3070: LD_EXP 35
3074: PUSH
3075: EMPTY
3076: LIST
3077: LIST
3078: LIST
3079: LIST
3080: LIST
3081: LIST
3082: DIFF
3083: ST_TO_ADDR
// if not tmp then
3084: LD_VAR 0 7
3088: NOT
3089: IFFALSE 3125
// begin if Denis then
3091: LD_EXP 34
3095: IFFALSE 3111
// SetClass ( Denis , class_engineer ) else
3097: LD_EXP 34
3101: PPUSH
3102: LD_INT 2
3104: PPUSH
3105: CALL_OW 336
3109: GO 3123
// SetClass ( DeltaDoctor , class_engineer ) ;
3111: LD_EXP 39
3115: PPUSH
3116: LD_INT 2
3118: PPUSH
3119: CALL_OW 336
// end else
3123: GO 3141
// SetClass ( tmp [ 1 ] , class_engineer ) ;
3125: LD_VAR 0 7
3129: PUSH
3130: LD_INT 1
3132: ARRAY
3133: PPUSH
3134: LD_INT 2
3136: PPUSH
3137: CALL_OW 336
// end ; for i in ape09 do
3141: LD_ADDR_VAR 0 2
3145: PUSH
3146: LD_EXP 48
3150: PUSH
3151: FOR_IN
3152: IFFALSE 3171
// PlaceUnitArea ( i , epsilonSpawnArea , false ) ;
3154: LD_VAR 0 2
3158: PPUSH
3159: LD_INT 4
3161: PPUSH
3162: LD_INT 0
3164: PPUSH
3165: CALL_OW 49
3169: GO 3151
3171: POP
3172: POP
// PrepareSoldier ( sex_female , 6 ) ;
3173: LD_INT 2
3175: PPUSH
3176: LD_INT 6
3178: PPUSH
3179: CALL_OW 381
// AmScout := CreateHuman ;
3183: LD_ADDR_EXP 40
3187: PUSH
3188: CALL_OW 44
3192: ST_TO_ADDR
// end ;
3193: LD_VAR 0 1
3197: RET
// export function PrepareCornell ; begin
3198: LD_INT 0
3200: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3201: LD_INT 4
3203: PPUSH
3204: LD_INT 4
3206: PPUSH
3207: CALL_OW 343
// uc_side := 4 ;
3211: LD_ADDR_OWVAR 20
3215: PUSH
3216: LD_INT 4
3218: ST_TO_ADDR
// uc_nation := nation_american ;
3219: LD_ADDR_OWVAR 21
3223: PUSH
3224: LD_INT 1
3226: ST_TO_ADDR
// Cornell := PrepareUnit ( Cornel , ( not debug ) , 03_ ) ;
3227: LD_ADDR_EXP 42
3231: PUSH
3232: LD_STRING Cornel
3234: PPUSH
3235: LD_EXP 1
3239: NOT
3240: PPUSH
3241: LD_STRING 03_
3243: PPUSH
3244: CALL 54615 0 3
3248: ST_TO_ADDR
// if not Cornell then
3249: LD_EXP 42
3253: NOT
3254: IFFALSE 3258
// exit ;
3256: GO 3396
// PlaceUnitArea ( Cornell , cornelSpawnArea , false ) ;
3258: LD_EXP 42
3262: PPUSH
3263: LD_INT 12
3265: PPUSH
3266: LD_INT 0
3268: PPUSH
3269: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3273: LD_EXP 42
3277: PPUSH
3278: LD_INT 350
3280: PPUSH
3281: CALL_OW 234
// ComMoveXY ( Cornell , 125 , 17 ) ;
3285: LD_EXP 42
3289: PPUSH
3290: LD_INT 125
3292: PPUSH
3293: LD_INT 17
3295: PPUSH
3296: CALL_OW 111
// AddComMoveXY ( Cornell , 112 , 19 ) ;
3300: LD_EXP 42
3304: PPUSH
3305: LD_INT 112
3307: PPUSH
3308: LD_INT 19
3310: PPUSH
3311: CALL_OW 171
// if IsInUnit ( JMM ) then
3315: LD_EXP 23
3319: PPUSH
3320: CALL_OW 310
3324: IFFALSE 3367
// AddComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3326: LD_EXP 42
3330: PPUSH
3331: LD_EXP 23
3335: PPUSH
3336: CALL_OW 310
3340: PPUSH
3341: CALL_OW 250
3345: PPUSH
3346: LD_EXP 23
3350: PPUSH
3351: CALL_OW 310
3355: PPUSH
3356: CALL_OW 251
3360: PPUSH
3361: CALL_OW 171
3365: GO 3396
// AddComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3367: LD_EXP 42
3371: PPUSH
3372: LD_EXP 23
3376: PPUSH
3377: CALL_OW 250
3381: PPUSH
3382: LD_EXP 23
3386: PPUSH
3387: CALL_OW 251
3391: PPUSH
3392: CALL_OW 171
// end ; end_of_file
3396: LD_VAR 0 1
3400: RET
// export arForces , Dietrich , Ahmed ; export arTech , arBuildings , arMines , arCameras , arEscapist ; export function PrepareArabian ; var i , j , un , tmp , skill ; begin
3401: LD_INT 0
3403: PPUSH
3404: PPUSH
3405: PPUSH
3406: PPUSH
3407: PPUSH
3408: PPUSH
// uc_side := 2 ;
3409: LD_ADDR_OWVAR 20
3413: PUSH
3414: LD_INT 2
3416: ST_TO_ADDR
// uc_nation := nation_arabian ;
3417: LD_ADDR_OWVAR 21
3421: PUSH
3422: LD_INT 2
3424: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
3425: LD_ADDR_VAR 0 6
3429: PUSH
3430: LD_INT 4
3432: PUSH
3433: LD_INT 5
3435: PUSH
3436: LD_INT 6
3438: PUSH
3439: LD_INT 7
3441: PUSH
3442: EMPTY
3443: LIST
3444: LIST
3445: LIST
3446: LIST
3447: PUSH
3448: LD_OWVAR 67
3452: ARRAY
3453: ST_TO_ADDR
// arForces := [ ] ;
3454: LD_ADDR_EXP 49
3458: PUSH
3459: EMPTY
3460: ST_TO_ADDR
// arTech := [ ] ;
3461: LD_ADDR_EXP 52
3465: PUSH
3466: EMPTY
3467: ST_TO_ADDR
// arBuildings := [ ] ;
3468: LD_ADDR_EXP 53
3472: PUSH
3473: EMPTY
3474: ST_TO_ADDR
// arCameras := [ [ 94 , 19 ] , [ 92 , 34 ] , [ 109 , 67 ] , [ 120 , 38 ] , [ 116 , 30 ] , [ 102 , 20 ] ] ;
3475: LD_ADDR_EXP 55
3479: PUSH
3480: LD_INT 94
3482: PUSH
3483: LD_INT 19
3485: PUSH
3486: EMPTY
3487: LIST
3488: LIST
3489: PUSH
3490: LD_INT 92
3492: PUSH
3493: LD_INT 34
3495: PUSH
3496: EMPTY
3497: LIST
3498: LIST
3499: PUSH
3500: LD_INT 109
3502: PUSH
3503: LD_INT 67
3505: PUSH
3506: EMPTY
3507: LIST
3508: LIST
3509: PUSH
3510: LD_INT 120
3512: PUSH
3513: LD_INT 38
3515: PUSH
3516: EMPTY
3517: LIST
3518: LIST
3519: PUSH
3520: LD_INT 116
3522: PUSH
3523: LD_INT 30
3525: PUSH
3526: EMPTY
3527: LIST
3528: LIST
3529: PUSH
3530: LD_INT 102
3532: PUSH
3533: LD_INT 20
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: LIST
3544: LIST
3545: LIST
3546: LIST
3547: ST_TO_ADDR
// arMines := [ [ 73 , 36 ] , [ 76 , 38 ] , [ 79 , 39 ] ] ;
3548: LD_ADDR_EXP 54
3552: PUSH
3553: LD_INT 73
3555: PUSH
3556: LD_INT 36
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: PUSH
3563: LD_INT 76
3565: PUSH
3566: LD_INT 38
3568: PUSH
3569: EMPTY
3570: LIST
3571: LIST
3572: PUSH
3573: LD_INT 79
3575: PUSH
3576: LD_INT 39
3578: PUSH
3579: EMPTY
3580: LIST
3581: LIST
3582: PUSH
3583: EMPTY
3584: LIST
3585: LIST
3586: LIST
3587: ST_TO_ADDR
// arEscapist := [ ] ;
3588: LD_ADDR_EXP 56
3592: PUSH
3593: EMPTY
3594: ST_TO_ADDR
// SetResourceType ( GetBase ( arDep ) , mat_cans , 150 ) ;
3595: LD_INT 35
3597: PPUSH
3598: CALL_OW 274
3602: PPUSH
3603: LD_INT 1
3605: PPUSH
3606: LD_INT 150
3608: PPUSH
3609: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_oil , 60 ) ;
3613: LD_INT 35
3615: PPUSH
3616: CALL_OW 274
3620: PPUSH
3621: LD_INT 2
3623: PPUSH
3624: LD_INT 60
3626: PPUSH
3627: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_siberit , 10 ) ;
3631: LD_INT 35
3633: PPUSH
3634: CALL_OW 274
3638: PPUSH
3639: LD_INT 3
3641: PPUSH
3642: LD_INT 10
3644: PPUSH
3645: CALL_OW 277
// HiddenCamera ( 36 , 22 , 2 ) ;
3649: LD_INT 36
3651: PPUSH
3652: LD_INT 22
3654: PPUSH
3655: LD_INT 2
3657: PPUSH
3658: CALL_OW 244
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
3662: LD_ADDR_VAR 0 2
3666: PUSH
3667: LD_INT 22
3669: PUSH
3670: LD_INT 2
3672: PUSH
3673: EMPTY
3674: LIST
3675: LIST
3676: PUSH
3677: LD_INT 21
3679: PUSH
3680: LD_INT 3
3682: PUSH
3683: EMPTY
3684: LIST
3685: LIST
3686: PUSH
3687: EMPTY
3688: LIST
3689: LIST
3690: PPUSH
3691: CALL_OW 69
3695: PUSH
3696: FOR_IN
3697: IFFALSE 3713
// SetBLevel ( i , 6 ) ;
3699: LD_VAR 0 2
3703: PPUSH
3704: LD_INT 6
3706: PPUSH
3707: CALL_OW 241
3711: GO 3696
3713: POP
3714: POP
// Dietrich := NewCharacter ( Dietrich ) ;
3715: LD_ADDR_EXP 50
3719: PUSH
3720: LD_STRING Dietrich
3722: PPUSH
3723: CALL_OW 25
3727: ST_TO_ADDR
// PlaceHumanInUnit ( Dietrich , arDep ) ;
3728: LD_EXP 50
3732: PPUSH
3733: LD_INT 35
3735: PPUSH
3736: CALL_OW 52
// InitHC_All ( ) ;
3740: CALL_OW 584
// for i := 1 to 3 do
3744: LD_ADDR_VAR 0 2
3748: PUSH
3749: DOUBLE
3750: LD_INT 1
3752: DEC
3753: ST_TO_ADDR
3754: LD_INT 3
3756: PUSH
3757: FOR_TO
3758: IFFALSE 3864
// begin PrepareEngineer ( sex_male , skill ) ;
3760: LD_INT 1
3762: PPUSH
3763: LD_VAR 0 6
3767: PPUSH
3768: CALL_OW 382
// if i = 1 then
3772: LD_VAR 0 2
3776: PUSH
3777: LD_INT 1
3779: EQUAL
3780: IFFALSE 3792
// hc_name := Ahmed Abbasid else
3782: LD_ADDR_OWVAR 26
3786: PUSH
3787: LD_STRING Ahmed Abbasid
3789: ST_TO_ADDR
3790: GO 3800
// hc_name :=  ;
3792: LD_ADDR_OWVAR 26
3796: PUSH
3797: LD_STRING 
3799: ST_TO_ADDR
// un := CreateHuman ;
3800: LD_ADDR_VAR 0 4
3804: PUSH
3805: CALL_OW 44
3809: ST_TO_ADDR
// if i = 1 then
3810: LD_VAR 0 2
3814: PUSH
3815: LD_INT 1
3817: EQUAL
3818: IFFALSE 3830
// Ahmed := un ;
3820: LD_ADDR_EXP 51
3824: PUSH
3825: LD_VAR 0 4
3829: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
3830: LD_ADDR_EXP 49
3834: PUSH
3835: LD_EXP 49
3839: PPUSH
3840: LD_VAR 0 4
3844: PPUSH
3845: CALL 92306 0 2
3849: ST_TO_ADDR
// PlaceHumanInUnit ( un , arDep ) ;
3850: LD_VAR 0 4
3854: PPUSH
3855: LD_INT 35
3857: PPUSH
3858: CALL_OW 52
// end ;
3862: GO 3757
3864: POP
3865: POP
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
3866: LD_ADDR_VAR 0 2
3870: PUSH
3871: DOUBLE
3872: LD_INT 1
3874: DEC
3875: ST_TO_ADDR
3876: LD_INT 2
3878: PUSH
3879: LD_INT 3
3881: PUSH
3882: LD_INT 4
3884: PUSH
3885: LD_INT 5
3887: PUSH
3888: EMPTY
3889: LIST
3890: LIST
3891: LIST
3892: LIST
3893: PUSH
3894: LD_OWVAR 67
3898: ARRAY
3899: PUSH
3900: FOR_TO
3901: IFFALSE 3976
// begin PrepareScientist ( false , skill ) ;
3903: LD_INT 0
3905: PPUSH
3906: LD_VAR 0 6
3910: PPUSH
3911: CALL_OW 384
// un := CreateHuman ;
3915: LD_ADDR_VAR 0 4
3919: PUSH
3920: CALL_OW 44
3924: ST_TO_ADDR
// SetSkill ( un , skill_combat , skill ) ;
3925: LD_VAR 0 4
3929: PPUSH
3930: LD_INT 1
3932: PPUSH
3933: LD_VAR 0 6
3937: PPUSH
3938: CALL_OW 237
// arForces := Join ( arForces , un ) ;
3942: LD_ADDR_EXP 49
3946: PUSH
3947: LD_EXP 49
3951: PPUSH
3952: LD_VAR 0 4
3956: PPUSH
3957: CALL 92306 0 2
3961: ST_TO_ADDR
// PlaceHumanInUnit ( un , arLab ) ;
3962: LD_VAR 0 4
3966: PPUSH
3967: LD_INT 36
3969: PPUSH
3970: CALL_OW 52
// end ;
3974: GO 3900
3976: POP
3977: POP
// for j in [ arBar1 , arBar2 ] do
3978: LD_ADDR_VAR 0 3
3982: PUSH
3983: LD_INT 37
3985: PUSH
3986: LD_INT 38
3988: PUSH
3989: EMPTY
3990: LIST
3991: LIST
3992: PUSH
3993: FOR_IN
3994: IFFALSE 4074
// for i := 1 to 4 do
3996: LD_ADDR_VAR 0 2
4000: PUSH
4001: DOUBLE
4002: LD_INT 1
4004: DEC
4005: ST_TO_ADDR
4006: LD_INT 4
4008: PUSH
4009: FOR_TO
4010: IFFALSE 4070
// begin PrepareSoldier ( false , skill ) ;
4012: LD_INT 0
4014: PPUSH
4015: LD_VAR 0 6
4019: PPUSH
4020: CALL_OW 381
// un := CreateHuman ;
4024: LD_ADDR_VAR 0 4
4028: PUSH
4029: CALL_OW 44
4033: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
4034: LD_ADDR_EXP 49
4038: PUSH
4039: LD_EXP 49
4043: PPUSH
4044: LD_VAR 0 4
4048: PPUSH
4049: CALL 92306 0 2
4053: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
4054: LD_VAR 0 4
4058: PPUSH
4059: LD_VAR 0 3
4063: PPUSH
4064: CALL_OW 52
// end ;
4068: GO 4009
4070: POP
4071: POP
4072: GO 3993
4074: POP
4075: POP
// for i := 1 to 3 do
4076: LD_ADDR_VAR 0 2
4080: PUSH
4081: DOUBLE
4082: LD_INT 1
4084: DEC
4085: ST_TO_ADDR
4086: LD_INT 3
4088: PUSH
4089: FOR_TO
4090: IFFALSE 4169
// begin un := arForces [ arForces - i ] ;
4092: LD_ADDR_VAR 0 4
4096: PUSH
4097: LD_EXP 49
4101: PUSH
4102: LD_EXP 49
4106: PUSH
4107: LD_VAR 0 2
4111: MINUS
4112: ARRAY
4113: ST_TO_ADDR
// ComExitBuilding ( un ) ;
4114: LD_VAR 0 4
4118: PPUSH
4119: CALL_OW 122
// AddComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4123: LD_VAR 0 4
4127: PPUSH
4128: LD_INT 22
4130: PUSH
4131: LD_INT 2
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: PUSH
4138: LD_INT 30
4140: PUSH
4141: LD_INT 31
4143: PUSH
4144: EMPTY
4145: LIST
4146: LIST
4147: PUSH
4148: EMPTY
4149: LIST
4150: LIST
4151: PPUSH
4152: CALL_OW 69
4156: PUSH
4157: LD_VAR 0 2
4161: ARRAY
4162: PPUSH
4163: CALL_OW 180
// end ;
4167: GO 4089
4169: POP
4170: POP
// for i := 1 to 3 do
4171: LD_ADDR_VAR 0 2
4175: PUSH
4176: DOUBLE
4177: LD_INT 1
4179: DEC
4180: ST_TO_ADDR
4181: LD_INT 3
4183: PUSH
4184: FOR_TO
4185: IFFALSE 4270
// begin tmp := UnitFilter ( arForces , [ [ f_class , class_soldier ] , [ f_not , [ f_tag , tMine ] ] ] ) ;
4187: LD_ADDR_VAR 0 5
4191: PUSH
4192: LD_EXP 49
4196: PPUSH
4197: LD_INT 25
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: EMPTY
4204: LIST
4205: LIST
4206: PUSH
4207: LD_INT 3
4209: PUSH
4210: LD_INT 120
4212: PUSH
4213: LD_INT 6
4215: PUSH
4216: EMPTY
4217: LIST
4218: LIST
4219: PUSH
4220: EMPTY
4221: LIST
4222: LIST
4223: PUSH
4224: EMPTY
4225: LIST
4226: LIST
4227: PPUSH
4228: CALL_OW 72
4232: ST_TO_ADDR
// if not tmp then
4233: LD_VAR 0 5
4237: NOT
4238: IFFALSE 4242
// continue ;
4240: GO 4184
// un := tmp [ 1 ] ;
4242: LD_ADDR_VAR 0 4
4246: PUSH
4247: LD_VAR 0 5
4251: PUSH
4252: LD_INT 1
4254: ARRAY
4255: ST_TO_ADDR
// SetTag ( un , tMine ) ;
4256: LD_VAR 0 4
4260: PPUSH
4261: LD_INT 6
4263: PPUSH
4264: CALL_OW 109
// end ;
4268: GO 4184
4270: POP
4271: POP
// for i in UnitsInside ( arBar2 ) do
4272: LD_ADDR_VAR 0 2
4276: PUSH
4277: LD_INT 38
4279: PPUSH
4280: CALL_OW 313
4284: PUSH
4285: FOR_IN
4286: IFFALSE 4302
// SetClass ( i , class_mortar ) ;
4288: LD_VAR 0 2
4292: PPUSH
4293: LD_INT 8
4295: PPUSH
4296: CALL_OW 336
4300: GO 4285
4302: POP
4303: POP
// end ;
4304: LD_VAR 0 1
4308: RET
// every 0 0$2 trigger joinedToEpsilon do var i , eng ;
4309: LD_EXP 7
4313: IFFALSE 4726
4315: GO 4317
4317: DISABLE
4318: LD_INT 0
4320: PPUSH
4321: PPUSH
// begin ComUpgradeLab ( arLab , b_lab_siberium ) ;
4322: LD_INT 36
4324: PPUSH
4325: LD_INT 11
4327: PPUSH
4328: CALL_OW 147
// wait ( 0 0$10 ) ;
4332: LD_INT 350
4334: PPUSH
4335: CALL_OW 67
// arBuildings := [ [ b_solar_power , 69 , 4 , 2 ] , [ b_solar_power , 67 , 6 , 3 ] ] ;
4339: LD_ADDR_EXP 53
4343: PUSH
4344: LD_INT 27
4346: PUSH
4347: LD_INT 69
4349: PUSH
4350: LD_INT 4
4352: PUSH
4353: LD_INT 2
4355: PUSH
4356: EMPTY
4357: LIST
4358: LIST
4359: LIST
4360: LIST
4361: PUSH
4362: LD_INT 27
4364: PUSH
4365: LD_INT 67
4367: PUSH
4368: LD_INT 6
4370: PUSH
4371: LD_INT 3
4373: PUSH
4374: EMPTY
4375: LIST
4376: LIST
4377: LIST
4378: LIST
4379: PUSH
4380: EMPTY
4381: LIST
4382: LIST
4383: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4384: LD_INT 35
4386: PPUSH
4387: CALL_OW 67
// until not arBuildings ;
4391: LD_EXP 53
4395: NOT
4396: IFFALSE 4384
// eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
4398: LD_ADDR_VAR 0 2
4402: PUSH
4403: LD_EXP 49
4407: PPUSH
4408: LD_INT 25
4410: PUSH
4411: LD_INT 2
4413: PUSH
4414: EMPTY
4415: LIST
4416: LIST
4417: PPUSH
4418: CALL_OW 72
4422: ST_TO_ADDR
// if eng then
4423: LD_VAR 0 2
4427: IFFALSE 4564
// begin eng := eng [ 1 ] ;
4429: LD_ADDR_VAR 0 2
4433: PUSH
4434: LD_VAR 0 2
4438: PUSH
4439: LD_INT 1
4441: ARRAY
4442: ST_TO_ADDR
// SetTag ( eng , tCamera ) ;
4443: LD_VAR 0 2
4447: PPUSH
4448: LD_INT 4
4450: PPUSH
4451: CALL_OW 109
// for i in arCameras do
4455: LD_ADDR_VAR 0 1
4459: PUSH
4460: LD_EXP 55
4464: PUSH
4465: FOR_IN
4466: IFFALSE 4497
// AddComHiddenCamera ( eng , i [ 1 ] , i [ 2 ] ) ;
4468: LD_VAR 0 2
4472: PPUSH
4473: LD_VAR 0 1
4477: PUSH
4478: LD_INT 1
4480: ARRAY
4481: PPUSH
4482: LD_VAR 0 1
4486: PUSH
4487: LD_INT 2
4489: ARRAY
4490: PPUSH
4491: CALL_OW 217
4495: GO 4465
4497: POP
4498: POP
// repeat wait ( 0 0$1 ) ;
4499: LD_INT 35
4501: PPUSH
4502: CALL_OW 67
// until not HasTask ( eng ) or IsDead ( eng ) ;
4506: LD_VAR 0 2
4510: PPUSH
4511: CALL_OW 314
4515: NOT
4516: PUSH
4517: LD_VAR 0 2
4521: PPUSH
4522: CALL_OW 301
4526: OR
4527: IFFALSE 4499
// if IsOk ( eng ) then
4529: LD_VAR 0 2
4533: PPUSH
4534: CALL_OW 302
4538: IFFALSE 4564
// begin SetTag ( eng , 0 ) ;
4540: LD_VAR 0 2
4544: PPUSH
4545: LD_INT 0
4547: PPUSH
4548: CALL_OW 109
// ComEnterUnit ( eng , arDep ) ;
4552: LD_VAR 0 2
4556: PPUSH
4557: LD_INT 35
4559: PPUSH
4560: CALL_OW 120
// end ; end ; repeat wait ( 0 0$1 ) ;
4564: LD_INT 35
4566: PPUSH
4567: CALL_OW 67
// if tick mod 4200 = 0 and GetListOfCratesInArea ( arCratesArea ) < 3 then
4571: LD_OWVAR 1
4575: PUSH
4576: LD_INT 4200
4578: MOD
4579: PUSH
4580: LD_INT 0
4582: EQUAL
4583: PUSH
4584: LD_INT 9
4586: PPUSH
4587: CALL_OW 435
4591: PUSH
4592: LD_INT 3
4594: LESS
4595: AND
4596: IFFALSE 4619
// CreateCratesArea ( rand ( 1 , 5 ) , arCratesArea , true ) ;
4598: LD_INT 1
4600: PPUSH
4601: LD_INT 5
4603: PPUSH
4604: CALL_OW 12
4608: PPUSH
4609: LD_INT 9
4611: PPUSH
4612: LD_INT 1
4614: PPUSH
4615: CALL_OW 55
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) ;
4619: LD_INT 22
4621: PUSH
4622: LD_INT 1
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: PUSH
4629: LD_INT 3
4631: PUSH
4632: LD_INT 57
4634: PUSH
4635: EMPTY
4636: LIST
4637: PUSH
4638: EMPTY
4639: LIST
4640: LIST
4641: PUSH
4642: LD_INT 63
4644: PUSH
4645: LD_INT 11
4647: PUSH
4648: EMPTY
4649: LIST
4650: LIST
4651: PUSH
4652: EMPTY
4653: LIST
4654: LIST
4655: LIST
4656: PPUSH
4657: CALL_OW 69
4661: IFFALSE 4564
// wait ( 0 0$10 ) ;
4663: LD_INT 350
4665: PPUSH
4666: CALL_OW 67
// arTech := [ tech_sibPow , tech_sibEng , tech_sib1 ] ;
4670: LD_ADDR_EXP 52
4674: PUSH
4675: LD_INT 21
4677: PUSH
4678: LD_INT 22
4680: PUSH
4681: LD_INT 54
4683: PUSH
4684: EMPTY
4685: LIST
4686: LIST
4687: LIST
4688: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4689: LD_INT 35
4691: PPUSH
4692: CALL_OW 67
// until not arTech ;
4696: LD_EXP 52
4700: NOT
4701: IFFALSE 4689
// wait ( 0 0$30 ) ;
4703: LD_INT 1050
4705: PPUSH
4706: CALL_OW 67
// arabianAttack := true ;
4710: LD_ADDR_EXP 4
4714: PUSH
4715: LD_INT 1
4717: ST_TO_ADDR
// arBaseActive := false ;
4718: LD_ADDR_EXP 3
4722: PUSH
4723: LD_INT 0
4725: ST_TO_ADDR
// end ;
4726: PPOPN 2
4728: END
// every 3 trigger arBaseActive and arMines and FilterUnitsInArea ( arMinesArea , [ f_enemy , 2 ] ) do var i , e ;
4729: LD_EXP 3
4733: PUSH
4734: LD_EXP 54
4738: AND
4739: PUSH
4740: LD_INT 8
4742: PPUSH
4743: LD_INT 81
4745: PUSH
4746: LD_INT 2
4748: PUSH
4749: EMPTY
4750: LIST
4751: LIST
4752: PPUSH
4753: CALL_OW 70
4757: AND
4758: IFFALSE 4869
4760: GO 4762
4762: DISABLE
4763: LD_INT 0
4765: PPUSH
4766: PPUSH
// begin enable ;
4767: ENABLE
// for i in arMines do
4768: LD_ADDR_VAR 0 1
4772: PUSH
4773: LD_EXP 54
4777: PUSH
4778: FOR_IN
4779: IFFALSE 4867
// begin e := HexInfo ( i [ 1 ] , i [ 2 ] ) ;
4781: LD_ADDR_VAR 0 2
4785: PUSH
4786: LD_VAR 0 1
4790: PUSH
4791: LD_INT 1
4793: ARRAY
4794: PPUSH
4795: LD_VAR 0 1
4799: PUSH
4800: LD_INT 2
4802: ARRAY
4803: PPUSH
4804: CALL_OW 428
4808: ST_TO_ADDR
// if not e then
4809: LD_VAR 0 2
4813: NOT
4814: IFFALSE 4818
// continue ;
4816: GO 4778
// if GetSide ( e ) in [ 3 , 6 ] then
4818: LD_VAR 0 2
4822: PPUSH
4823: CALL_OW 255
4827: PUSH
4828: LD_INT 3
4830: PUSH
4831: LD_INT 6
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: IN
4838: IFFALSE 4865
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 2 ) ;
4840: LD_VAR 0 1
4844: PUSH
4845: LD_INT 1
4847: ARRAY
4848: PPUSH
4849: LD_VAR 0 1
4853: PUSH
4854: LD_INT 2
4856: ARRAY
4857: PPUSH
4858: LD_INT 2
4860: PPUSH
4861: CALL_OW 456
// end ;
4865: GO 4778
4867: POP
4868: POP
// end ;
4869: PPOPN 2
4871: END
// every 0 0$2 trigger arBaseActive do var i , un , b , side , tmp , lab , eng , tag , cr , tw , sci , sol , hurtUnits , enemyInBase , empty , fac ;
4872: LD_EXP 3
4876: IFFALSE 7064
4878: GO 4880
4880: DISABLE
4881: LD_INT 0
4883: PPUSH
4884: PPUSH
4885: PPUSH
4886: PPUSH
4887: PPUSH
4888: PPUSH
4889: PPUSH
4890: PPUSH
4891: PPUSH
4892: PPUSH
4893: PPUSH
4894: PPUSH
4895: PPUSH
4896: PPUSH
4897: PPUSH
4898: PPUSH
// begin enable ;
4899: ENABLE
// side := 2 ;
4900: LD_ADDR_VAR 0 4
4904: PUSH
4905: LD_INT 2
4907: ST_TO_ADDR
// if arTech then
4908: LD_EXP 52
4912: IFFALSE 5068
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4914: LD_ADDR_VAR 0 6
4918: PUSH
4919: LD_INT 22
4921: PUSH
4922: LD_VAR 0 4
4926: PUSH
4927: EMPTY
4928: LIST
4929: LIST
4930: PUSH
4931: LD_INT 50
4933: PUSH
4934: EMPTY
4935: LIST
4936: PUSH
4937: LD_INT 2
4939: PUSH
4940: LD_INT 30
4942: PUSH
4943: LD_INT 6
4945: PUSH
4946: EMPTY
4947: LIST
4948: LIST
4949: PUSH
4950: LD_INT 30
4952: PUSH
4953: LD_INT 7
4955: PUSH
4956: EMPTY
4957: LIST
4958: LIST
4959: PUSH
4960: LD_INT 30
4962: PUSH
4963: LD_INT 8
4965: PUSH
4966: EMPTY
4967: LIST
4968: LIST
4969: PUSH
4970: EMPTY
4971: LIST
4972: LIST
4973: LIST
4974: LIST
4975: PUSH
4976: EMPTY
4977: LIST
4978: LIST
4979: LIST
4980: PPUSH
4981: CALL_OW 69
4985: ST_TO_ADDR
// if lab then
4986: LD_VAR 0 6
4990: IFFALSE 5068
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
4992: LD_VAR 0 6
4996: PUSH
4997: LD_INT 1
4999: ARRAY
5000: PPUSH
5001: CALL_OW 461
5005: PUSH
5006: LD_INT 2
5008: EQUAL
5009: IFFALSE 5068
// begin for i in arTech do
5011: LD_ADDR_VAR 0 1
5015: PUSH
5016: LD_EXP 52
5020: PUSH
5021: FOR_IN
5022: IFFALSE 5066
// if CanBeResearched ( lab [ 1 ] , i ) then
5024: LD_VAR 0 6
5028: PUSH
5029: LD_INT 1
5031: ARRAY
5032: PPUSH
5033: LD_VAR 0 1
5037: PPUSH
5038: CALL_OW 430
5042: IFFALSE 5064
// begin ComResearch ( lab [ 1 ] , i ) ;
5044: LD_VAR 0 6
5048: PUSH
5049: LD_INT 1
5051: ARRAY
5052: PPUSH
5053: LD_VAR 0 1
5057: PPUSH
5058: CALL_OW 124
// break ;
5062: GO 5066
// end ;
5064: GO 5021
5066: POP
5067: POP
// end ; end ; end ; tmp := FilterUnitsInArea ( arBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
5068: LD_ADDR_VAR 0 5
5072: PUSH
5073: LD_INT 5
5075: PPUSH
5076: LD_INT 21
5078: PUSH
5079: LD_INT 3
5081: PUSH
5082: EMPTY
5083: LIST
5084: LIST
5085: PUSH
5086: LD_INT 3
5088: PUSH
5089: LD_INT 24
5091: PUSH
5092: LD_INT 1000
5094: PUSH
5095: EMPTY
5096: LIST
5097: LIST
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: PUSH
5103: EMPTY
5104: LIST
5105: LIST
5106: PPUSH
5107: CALL_OW 70
5111: ST_TO_ADDR
// cr := GetListOfCratesInArea ( arCratesArea ) ;
5112: LD_ADDR_VAR 0 9
5116: PUSH
5117: LD_INT 9
5119: PPUSH
5120: CALL_OW 435
5124: ST_TO_ADDR
// sci := UnitFilter ( arForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
5125: LD_ADDR_VAR 0 11
5129: PUSH
5130: LD_EXP 49
5134: PPUSH
5135: LD_INT 25
5137: PUSH
5138: LD_INT 4
5140: PUSH
5141: EMPTY
5142: LIST
5143: LIST
5144: PUSH
5145: LD_INT 50
5147: PUSH
5148: EMPTY
5149: LIST
5150: PUSH
5151: EMPTY
5152: LIST
5153: LIST
5154: PPUSH
5155: CALL_OW 72
5159: ST_TO_ADDR
// if sci then
5160: LD_VAR 0 11
5164: IFFALSE 5528
// begin hurtUnits := UnitFilter ( arForces , [ [ f_inarea , arBaseArea ] , [ f_not , [ f_inside ] ] , [ f_tag , tHeal ] ] ) ;
5166: LD_ADDR_VAR 0 13
5170: PUSH
5171: LD_EXP 49
5175: PPUSH
5176: LD_INT 95
5178: PUSH
5179: LD_INT 5
5181: PUSH
5182: EMPTY
5183: LIST
5184: LIST
5185: PUSH
5186: LD_INT 3
5188: PUSH
5189: LD_INT 54
5191: PUSH
5192: EMPTY
5193: LIST
5194: PUSH
5195: EMPTY
5196: LIST
5197: LIST
5198: PUSH
5199: LD_INT 120
5201: PUSH
5202: LD_INT 1
5204: PUSH
5205: EMPTY
5206: LIST
5207: LIST
5208: PUSH
5209: EMPTY
5210: LIST
5211: LIST
5212: LIST
5213: PPUSH
5214: CALL_OW 72
5218: ST_TO_ADDR
// lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
5219: LD_ADDR_VAR 0 6
5223: PUSH
5224: LD_INT 22
5226: PUSH
5227: LD_VAR 0 4
5231: PUSH
5232: EMPTY
5233: LIST
5234: LIST
5235: PUSH
5236: LD_INT 50
5238: PUSH
5239: EMPTY
5240: LIST
5241: PUSH
5242: LD_INT 2
5244: PUSH
5245: LD_INT 30
5247: PUSH
5248: LD_INT 6
5250: PUSH
5251: EMPTY
5252: LIST
5253: LIST
5254: PUSH
5255: LD_INT 30
5257: PUSH
5258: LD_INT 7
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PUSH
5265: LD_INT 30
5267: PUSH
5268: LD_INT 8
5270: PUSH
5271: EMPTY
5272: LIST
5273: LIST
5274: PUSH
5275: EMPTY
5276: LIST
5277: LIST
5278: LIST
5279: LIST
5280: PUSH
5281: EMPTY
5282: LIST
5283: LIST
5284: LIST
5285: PPUSH
5286: CALL_OW 69
5290: ST_TO_ADDR
// tag := GetTag ( i ) ;
5291: LD_ADDR_VAR 0 8
5295: PUSH
5296: LD_VAR 0 1
5300: PPUSH
5301: CALL_OW 110
5305: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
5306: LD_VAR 0 1
5310: PPUSH
5311: CALL_OW 256
5315: PUSH
5316: LD_INT 800
5318: LESS
5319: PUSH
5320: LD_VAR 0 8
5324: PUSH
5325: LD_INT 1
5327: NONEQUAL
5328: AND
5329: IFFALSE 5358
// begin ComMoveXY ( i , 72 , 15 ) ;
5331: LD_VAR 0 1
5335: PPUSH
5336: LD_INT 72
5338: PPUSH
5339: LD_INT 15
5341: PPUSH
5342: CALL_OW 111
// SetTag ( i , tHeal ) ;
5346: LD_VAR 0 1
5350: PPUSH
5351: LD_INT 1
5353: PPUSH
5354: CALL_OW 109
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
5358: LD_VAR 0 1
5362: PPUSH
5363: CALL_OW 256
5367: PUSH
5368: LD_INT 1000
5370: EQUAL
5371: PUSH
5372: LD_VAR 0 8
5376: PUSH
5377: LD_INT 1
5379: EQUAL
5380: AND
5381: IFFALSE 5395
// begin SetTag ( i , 0 ) ;
5383: LD_VAR 0 1
5387: PPUSH
5388: LD_INT 0
5390: PPUSH
5391: CALL_OW 109
// end ; if hurtUnits then
5395: LD_VAR 0 13
5399: IFFALSE 5460
// begin for i in sci do
5401: LD_ADDR_VAR 0 1
5405: PUSH
5406: LD_VAR 0 11
5410: PUSH
5411: FOR_IN
5412: IFFALSE 5456
// if IsInUnit ( i ) then
5414: LD_VAR 0 1
5418: PPUSH
5419: CALL_OW 310
5423: IFFALSE 5436
// ComExitBuilding ( i ) else
5425: LD_VAR 0 1
5429: PPUSH
5430: CALL_OW 122
5434: GO 5454
// ComHeal ( i , hurtUnits [ 1 ] ) ;
5436: LD_VAR 0 1
5440: PPUSH
5441: LD_VAR 0 13
5445: PUSH
5446: LD_INT 1
5448: ARRAY
5449: PPUSH
5450: CALL_OW 128
5454: GO 5411
5456: POP
5457: POP
// end else
5458: GO 5528
// if lab then
5460: LD_VAR 0 6
5464: IFFALSE 5528
// begin for i in sci do
5466: LD_ADDR_VAR 0 1
5470: PUSH
5471: LD_VAR 0 11
5475: PUSH
5476: FOR_IN
5477: IFFALSE 5526
// if not IsInUnit ( i ) and GetTag ( i ) <> tHeal then
5479: LD_VAR 0 1
5483: PPUSH
5484: CALL_OW 310
5488: NOT
5489: PUSH
5490: LD_VAR 0 1
5494: PPUSH
5495: CALL_OW 110
5499: PUSH
5500: LD_INT 1
5502: NONEQUAL
5503: AND
5504: IFFALSE 5524
// ComEnterUnit ( i , lab [ 1 ] ) ;
5506: LD_VAR 0 1
5510: PPUSH
5511: LD_VAR 0 6
5515: PUSH
5516: LD_INT 1
5518: ARRAY
5519: PPUSH
5520: CALL_OW 120
5524: GO 5476
5526: POP
5527: POP
// end ; end ; eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
5528: LD_ADDR_VAR 0 7
5532: PUSH
5533: LD_EXP 49
5537: PPUSH
5538: LD_INT 25
5540: PUSH
5541: LD_INT 2
5543: PUSH
5544: EMPTY
5545: LIST
5546: LIST
5547: PPUSH
5548: CALL_OW 72
5552: ST_TO_ADDR
// if eng then
5553: LD_VAR 0 7
5557: IFFALSE 6226
// begin for i in eng do
5559: LD_ADDR_VAR 0 1
5563: PUSH
5564: LD_VAR 0 7
5568: PUSH
5569: FOR_IN
5570: IFFALSE 6224
// begin tag := GetTag ( i ) ;
5572: LD_ADDR_VAR 0 8
5576: PUSH
5577: LD_VAR 0 1
5581: PPUSH
5582: CALL_OW 110
5586: ST_TO_ADDR
// if tag = tCamera then
5587: LD_VAR 0 8
5591: PUSH
5592: LD_INT 4
5594: EQUAL
5595: IFFALSE 5599
// continue ;
5597: GO 5569
// if GetLives ( i ) < 600 and tag <> tHeal then
5599: LD_VAR 0 1
5603: PPUSH
5604: CALL_OW 256
5608: PUSH
5609: LD_INT 600
5611: LESS
5612: PUSH
5613: LD_VAR 0 8
5617: PUSH
5618: LD_INT 1
5620: NONEQUAL
5621: AND
5622: IFFALSE 5660
// begin SetTag ( i , tHeal ) ;
5624: LD_VAR 0 1
5628: PPUSH
5629: LD_INT 1
5631: PPUSH
5632: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
5636: LD_VAR 0 1
5640: PPUSH
5641: LD_INT 72
5643: PPUSH
5644: LD_INT 15
5646: PPUSH
5647: CALL_OW 111
// AddComHold ( i ) ;
5651: LD_VAR 0 1
5655: PPUSH
5656: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
5660: LD_VAR 0 8
5664: PUSH
5665: LD_INT 1
5667: EQUAL
5668: PUSH
5669: LD_VAR 0 1
5673: PPUSH
5674: CALL_OW 256
5678: PUSH
5679: LD_INT 1000
5681: EQUAL
5682: AND
5683: IFFALSE 5697
// SetTag ( i , 0 ) ;
5685: LD_VAR 0 1
5689: PPUSH
5690: LD_INT 0
5692: PPUSH
5693: CALL_OW 109
// if not tag then
5697: LD_VAR 0 8
5701: NOT
5702: IFFALSE 5848
// begin if cr or tmp or Count ( arBuildings ) then
5704: LD_VAR 0 9
5708: PUSH
5709: LD_VAR 0 5
5713: OR
5714: PUSH
5715: LD_EXP 53
5719: PPUSH
5720: CALL 56717 0 1
5724: OR
5725: IFFALSE 5812
// begin if IsInUnit ( i ) then
5727: LD_VAR 0 1
5731: PPUSH
5732: CALL_OW 310
5736: IFFALSE 5747
// ComExitBuilding ( i ) ;
5738: LD_VAR 0 1
5742: PPUSH
5743: CALL_OW 122
// if tmp then
5747: LD_VAR 0 5
5751: IFFALSE 5767
// SetTag ( i , tRepair ) else
5753: LD_VAR 0 1
5757: PPUSH
5758: LD_INT 3
5760: PPUSH
5761: CALL_OW 109
5765: GO 5810
// if cr then
5767: LD_VAR 0 9
5771: IFFALSE 5787
// SetTag ( i , tCrates ) else
5773: LD_VAR 0 1
5777: PPUSH
5778: LD_INT 2
5780: PPUSH
5781: CALL_OW 109
5785: GO 5810
// if Count ( arBuildings ) then
5787: LD_EXP 53
5791: PPUSH
5792: CALL 56717 0 1
5796: IFFALSE 5810
// SetTag ( i , tBuild ) ;
5798: LD_VAR 0 1
5802: PPUSH
5803: LD_INT 5
5805: PPUSH
5806: CALL_OW 109
// end else
5810: GO 5848
// if not IsInUnit ( i ) then
5812: LD_VAR 0 1
5816: PPUSH
5817: CALL_OW 310
5821: NOT
5822: IFFALSE 5848
// begin SetTag ( i , 0 ) ;
5824: LD_VAR 0 1
5828: PPUSH
5829: LD_INT 0
5831: PPUSH
5832: CALL_OW 109
// ComEnterUnit ( i , arDep ) ;
5836: LD_VAR 0 1
5840: PPUSH
5841: LD_INT 35
5843: PPUSH
5844: CALL_OW 120
// end ; end ; if tag = tRepair then
5848: LD_VAR 0 8
5852: PUSH
5853: LD_INT 3
5855: EQUAL
5856: IFFALSE 5958
// begin if IsInUnit ( i ) then
5858: LD_VAR 0 1
5862: PPUSH
5863: CALL_OW 310
5867: IFFALSE 5880
// begin ComExitBuilding ( i ) ;
5869: LD_VAR 0 1
5873: PPUSH
5874: CALL_OW 122
// continue ;
5878: GO 5569
// end ; if not tmp then
5880: LD_VAR 0 5
5884: NOT
5885: IFFALSE 5901
// begin SetTag ( i , 0 ) ;
5887: LD_VAR 0 1
5891: PPUSH
5892: LD_INT 0
5894: PPUSH
5895: CALL_OW 109
// continue ;
5899: GO 5569
// end ; if not HasTask ( i ) then
5901: LD_VAR 0 1
5905: PPUSH
5906: CALL_OW 314
5910: NOT
5911: IFFALSE 5931
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
5913: LD_VAR 0 1
5917: PPUSH
5918: LD_VAR 0 5
5922: PUSH
5923: LD_INT 1
5925: ARRAY
5926: PPUSH
5927: CALL_OW 130
// if not IsInArea ( i , arBaseArea ) then
5931: LD_VAR 0 1
5935: PPUSH
5936: LD_INT 5
5938: PPUSH
5939: CALL_OW 308
5943: NOT
5944: IFFALSE 5958
// ComMoveToArea ( i , arBaseArea ) ;
5946: LD_VAR 0 1
5950: PPUSH
5951: LD_INT 5
5953: PPUSH
5954: CALL_OW 113
// end ; if tag = tBuild then
5958: LD_VAR 0 8
5962: PUSH
5963: LD_INT 5
5965: EQUAL
5966: IFFALSE 6077
// begin if IsInUnit ( i ) then
5968: LD_VAR 0 1
5972: PPUSH
5973: CALL_OW 310
5977: IFFALSE 5990
// begin ComExitBuilding ( i ) ;
5979: LD_VAR 0 1
5983: PPUSH
5984: CALL_OW 122
// continue ;
5988: GO 5569
// end ; if not Count ( arBuildings ) then
5990: LD_EXP 53
5994: PPUSH
5995: CALL 56717 0 1
5999: NOT
6000: IFFALSE 6016
// begin SetTag ( i , 0 ) ;
6002: LD_VAR 0 1
6006: PPUSH
6007: LD_INT 0
6009: PPUSH
6010: CALL_OW 109
// continue ;
6014: GO 5569
// end ; ComBuild ( i , arBuildings [ 1 ] [ 1 ] , arBuildings [ 1 ] [ 2 ] , arBuildings [ 1 ] [ 3 ] , arBuildings [ 1 ] [ 4 ] ) ;
6016: LD_VAR 0 1
6020: PPUSH
6021: LD_EXP 53
6025: PUSH
6026: LD_INT 1
6028: ARRAY
6029: PUSH
6030: LD_INT 1
6032: ARRAY
6033: PPUSH
6034: LD_EXP 53
6038: PUSH
6039: LD_INT 1
6041: ARRAY
6042: PUSH
6043: LD_INT 2
6045: ARRAY
6046: PPUSH
6047: LD_EXP 53
6051: PUSH
6052: LD_INT 1
6054: ARRAY
6055: PUSH
6056: LD_INT 3
6058: ARRAY
6059: PPUSH
6060: LD_EXP 53
6064: PUSH
6065: LD_INT 1
6067: ARRAY
6068: PUSH
6069: LD_INT 4
6071: ARRAY
6072: PPUSH
6073: CALL_OW 145
// end ; if tag = tCrates then
6077: LD_VAR 0 8
6081: PUSH
6082: LD_INT 2
6084: EQUAL
6085: IFFALSE 6222
// begin if IsInUnit ( i ) then
6087: LD_VAR 0 1
6091: PPUSH
6092: CALL_OW 310
6096: IFFALSE 6109
// begin ComExitBuilding ( i ) ;
6098: LD_VAR 0 1
6102: PPUSH
6103: CALL_OW 122
// continue ;
6107: GO 5569
// end ; if not cr then
6109: LD_VAR 0 9
6113: NOT
6114: IFFALSE 6130
// begin SetTag ( i , 0 ) ;
6116: LD_VAR 0 1
6120: PPUSH
6121: LD_INT 0
6123: PPUSH
6124: CALL_OW 109
// continue ;
6128: GO 5569
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
6130: LD_VAR 0 1
6134: PPUSH
6135: CALL_OW 314
6139: NOT
6140: PUSH
6141: LD_INT 81
6143: PUSH
6144: LD_VAR 0 4
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: PUSH
6153: LD_INT 92
6155: PUSH
6156: LD_VAR 0 9
6160: PUSH
6161: LD_INT 1
6163: ARRAY
6164: PUSH
6165: LD_VAR 0 9
6169: PUSH
6170: LD_INT 2
6172: ARRAY
6173: PUSH
6174: LD_INT 12
6176: PUSH
6177: EMPTY
6178: LIST
6179: LIST
6180: LIST
6181: LIST
6182: PUSH
6183: EMPTY
6184: LIST
6185: LIST
6186: PPUSH
6187: CALL_OW 69
6191: NOT
6192: AND
6193: IFFALSE 6222
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
6195: LD_VAR 0 1
6199: PPUSH
6200: LD_VAR 0 9
6204: PUSH
6205: LD_INT 1
6207: ARRAY
6208: PPUSH
6209: LD_VAR 0 9
6213: PUSH
6214: LD_INT 2
6216: ARRAY
6217: PPUSH
6218: CALL_OW 117
// end ; end ;
6222: GO 5569
6224: POP
6225: POP
// end ; sol := UnitFilter ( arForces , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
6226: LD_ADDR_VAR 0 12
6230: PUSH
6231: LD_EXP 49
6235: PPUSH
6236: LD_INT 25
6238: PUSH
6239: LD_INT 1
6241: PUSH
6242: EMPTY
6243: LIST
6244: LIST
6245: PUSH
6246: LD_INT 50
6248: PUSH
6249: EMPTY
6250: LIST
6251: PUSH
6252: EMPTY
6253: LIST
6254: LIST
6255: PPUSH
6256: CALL_OW 72
6260: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( arBaseArea , [ f_enemy , side ] ) ;
6261: LD_ADDR_VAR 0 14
6265: PUSH
6266: LD_INT 5
6268: PPUSH
6269: LD_INT 81
6271: PUSH
6272: LD_VAR 0 4
6276: PUSH
6277: EMPTY
6278: LIST
6279: LIST
6280: PPUSH
6281: CALL_OW 70
6285: ST_TO_ADDR
// if sol then
6286: LD_VAR 0 12
6290: IFFALSE 7064
// begin tmp := UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ;
6292: LD_ADDR_VAR 0 5
6296: PUSH
6297: LD_VAR 0 12
6301: PPUSH
6302: LD_INT 50
6304: PUSH
6305: EMPTY
6306: LIST
6307: PUSH
6308: LD_INT 120
6310: PUSH
6311: LD_INT 6
6313: PUSH
6314: EMPTY
6315: LIST
6316: LIST
6317: PUSH
6318: EMPTY
6319: LIST
6320: LIST
6321: PPUSH
6322: CALL_OW 72
6326: ST_TO_ADDR
// if tmp and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , 76 , 38 , 12 ] ] ) then
6327: LD_VAR 0 5
6331: PUSH
6332: LD_INT 81
6334: PUSH
6335: LD_VAR 0 4
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PUSH
6344: LD_INT 92
6346: PUSH
6347: LD_INT 76
6349: PUSH
6350: LD_INT 38
6352: PUSH
6353: LD_INT 12
6355: PUSH
6356: EMPTY
6357: LIST
6358: LIST
6359: LIST
6360: LIST
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: PPUSH
6366: CALL_OW 69
6370: NOT
6371: AND
6372: IFFALSE 6542
// for i := 1 to Count ( tmp ) do
6374: LD_ADDR_VAR 0 1
6378: PUSH
6379: DOUBLE
6380: LD_INT 1
6382: DEC
6383: ST_TO_ADDR
6384: LD_VAR 0 5
6388: PPUSH
6389: CALL 56717 0 1
6393: PUSH
6394: FOR_TO
6395: IFFALSE 6540
// begin un := tmp [ i ] ;
6397: LD_ADDR_VAR 0 2
6401: PUSH
6402: LD_VAR 0 5
6406: PUSH
6407: LD_VAR 0 1
6411: ARRAY
6412: ST_TO_ADDR
// b := IsInUnit ( un ) ;
6413: LD_ADDR_VAR 0 3
6417: PUSH
6418: LD_VAR 0 2
6422: PPUSH
6423: CALL_OW 310
6427: ST_TO_ADDR
// if not MineOfUnit ( un ) then
6428: LD_VAR 0 2
6432: PPUSH
6433: CALL_OW 459
6437: NOT
6438: IFFALSE 6507
// begin ComExitBuilding ( un ) ;
6440: LD_VAR 0 2
6444: PPUSH
6445: CALL_OW 122
// AddComPlaceRemoteCharge ( un , arMines [ i ] [ 1 ] , arMines [ i ] [ 2 ] , 0 ) ;
6449: LD_VAR 0 2
6453: PPUSH
6454: LD_EXP 54
6458: PUSH
6459: LD_VAR 0 1
6463: ARRAY
6464: PUSH
6465: LD_INT 1
6467: ARRAY
6468: PPUSH
6469: LD_EXP 54
6473: PUSH
6474: LD_VAR 0 1
6478: ARRAY
6479: PUSH
6480: LD_INT 2
6482: ARRAY
6483: PPUSH
6484: LD_INT 0
6486: PPUSH
6487: CALL_OW 193
// AddComEnterUnit ( un , b ) ;
6491: LD_VAR 0 2
6495: PPUSH
6496: LD_VAR 0 3
6500: PPUSH
6501: CALL_OW 180
// end else
6505: GO 6538
// if not b and not HasTask ( un ) then
6507: LD_VAR 0 3
6511: NOT
6512: PUSH
6513: LD_VAR 0 2
6517: PPUSH
6518: CALL_OW 314
6522: NOT
6523: AND
6524: IFFALSE 6538
// ComEnterUnit ( un , arBar1 ) ;
6526: LD_VAR 0 2
6530: PPUSH
6531: LD_INT 37
6533: PPUSH
6534: CALL_OW 120
// end ;
6538: GO 6394
6540: POP
6541: POP
// if enemyInBase then
6542: LD_VAR 0 14
6546: IFFALSE 6691
// begin for i in sol do
6548: LD_ADDR_VAR 0 1
6552: PUSH
6553: LD_VAR 0 12
6557: PUSH
6558: FOR_IN
6559: IFFALSE 6687
// begin tw := IsInUnit ( i ) ;
6561: LD_ADDR_VAR 0 10
6565: PUSH
6566: LD_VAR 0 1
6570: PPUSH
6571: CALL_OW 310
6575: ST_TO_ADDR
// if tw then
6576: LD_VAR 0 10
6580: IFFALSE 6661
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
6582: LD_VAR 0 10
6586: PUSH
6587: LD_INT 22
6589: PUSH
6590: LD_VAR 0 4
6594: PUSH
6595: EMPTY
6596: LIST
6597: LIST
6598: PUSH
6599: LD_INT 101
6601: PUSH
6602: LD_INT 2
6604: PUSH
6605: EMPTY
6606: LIST
6607: LIST
6608: PUSH
6609: LD_INT 2
6611: PUSH
6612: LD_INT 30
6614: PUSH
6615: LD_INT 32
6617: PUSH
6618: EMPTY
6619: LIST
6620: LIST
6621: PUSH
6622: LD_INT 30
6624: PUSH
6625: LD_INT 31
6627: PUSH
6628: EMPTY
6629: LIST
6630: LIST
6631: PUSH
6632: EMPTY
6633: LIST
6634: LIST
6635: LIST
6636: PUSH
6637: EMPTY
6638: LIST
6639: LIST
6640: LIST
6641: PPUSH
6642: CALL_OW 69
6646: IN
6647: NOT
6648: IFFALSE 6659
// ComExitBuilding ( i ) ;
6650: LD_VAR 0 1
6654: PPUSH
6655: CALL_OW 122
// end else
6659: GO 6685
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
6661: LD_VAR 0 1
6665: PPUSH
6666: LD_VAR 0 14
6670: PPUSH
6671: LD_VAR 0 1
6675: PPUSH
6676: CALL_OW 74
6680: PPUSH
6681: CALL_OW 115
// end ;
6685: GO 6558
6687: POP
6688: POP
// end else
6689: GO 7064
// begin empty := FilterUnitsInArea ( arBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
6691: LD_ADDR_VAR 0 15
6695: PUSH
6696: LD_INT 5
6698: PPUSH
6699: LD_INT 3
6701: PUSH
6702: LD_INT 62
6704: PUSH
6705: EMPTY
6706: LIST
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: PUSH
6712: LD_INT 2
6714: PUSH
6715: LD_INT 30
6717: PUSH
6718: LD_INT 32
6720: PUSH
6721: EMPTY
6722: LIST
6723: LIST
6724: PUSH
6725: LD_INT 30
6727: PUSH
6728: LD_INT 4
6730: PUSH
6731: EMPTY
6732: LIST
6733: LIST
6734: PUSH
6735: LD_INT 30
6737: PUSH
6738: LD_INT 5
6740: PUSH
6741: EMPTY
6742: LIST
6743: LIST
6744: PUSH
6745: LD_INT 30
6747: PUSH
6748: LD_INT 31
6750: PUSH
6751: EMPTY
6752: LIST
6753: LIST
6754: PUSH
6755: EMPTY
6756: LIST
6757: LIST
6758: LIST
6759: LIST
6760: LIST
6761: PUSH
6762: EMPTY
6763: LIST
6764: LIST
6765: PPUSH
6766: CALL_OW 70
6770: ST_TO_ADDR
// if empty then
6771: LD_VAR 0 15
6775: IFFALSE 6792
// empty := ReverseArray ( empty ) ;
6777: LD_ADDR_VAR 0 15
6781: PUSH
6782: LD_VAR 0 15
6786: PPUSH
6787: CALL 87593 0 1
6791: ST_TO_ADDR
// for i in sol do
6792: LD_ADDR_VAR 0 1
6796: PUSH
6797: LD_VAR 0 12
6801: PUSH
6802: FOR_IN
6803: IFFALSE 7062
// begin tag := GetTag ( i ) ;
6805: LD_ADDR_VAR 0 8
6809: PUSH
6810: LD_VAR 0 1
6814: PPUSH
6815: CALL_OW 110
6819: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
6820: LD_VAR 0 1
6824: PPUSH
6825: CALL_OW 256
6829: PUSH
6830: LD_INT 1000
6832: LESS
6833: PUSH
6834: LD_VAR 0 8
6838: PUSH
6839: LD_INT 1
6841: NONEQUAL
6842: AND
6843: IFFALSE 6883
// begin SetTag ( i , tHeal ) ;
6845: LD_VAR 0 1
6849: PPUSH
6850: LD_INT 1
6852: PPUSH
6853: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
6857: LD_VAR 0 1
6861: PPUSH
6862: LD_INT 72
6864: PPUSH
6865: LD_INT 15
6867: PPUSH
6868: CALL_OW 111
// AddComHold ( i ) ;
6872: LD_VAR 0 1
6876: PPUSH
6877: CALL_OW 200
// continue ;
6881: GO 6802
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
6883: LD_VAR 0 1
6887: PPUSH
6888: CALL_OW 256
6892: PUSH
6893: LD_INT 1000
6895: EQUAL
6896: PUSH
6897: LD_VAR 0 8
6901: PUSH
6902: LD_INT 1
6904: EQUAL
6905: AND
6906: IFFALSE 6987
// begin if MineOfUnit ( i ) or Count ( UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ) < 3 then
6908: LD_VAR 0 1
6912: PPUSH
6913: CALL_OW 459
6917: PUSH
6918: LD_VAR 0 12
6922: PPUSH
6923: LD_INT 50
6925: PUSH
6926: EMPTY
6927: LIST
6928: PUSH
6929: LD_INT 120
6931: PUSH
6932: LD_INT 6
6934: PUSH
6935: EMPTY
6936: LIST
6937: LIST
6938: PUSH
6939: EMPTY
6940: LIST
6941: LIST
6942: PPUSH
6943: CALL_OW 72
6947: PPUSH
6948: CALL 56717 0 1
6952: PUSH
6953: LD_INT 3
6955: LESS
6956: OR
6957: IFFALSE 6973
// SetTag ( i , tMine ) else
6959: LD_VAR 0 1
6963: PPUSH
6964: LD_INT 6
6966: PPUSH
6967: CALL_OW 109
6971: GO 6985
// SetTag ( i , 0 ) ;
6973: LD_VAR 0 1
6977: PPUSH
6978: LD_INT 0
6980: PPUSH
6981: CALL_OW 109
// continue ;
6985: GO 6802
// end ; if tag = tMine then
6987: LD_VAR 0 8
6991: PUSH
6992: LD_INT 6
6994: EQUAL
6995: IFFALSE 6999
// continue ;
6997: GO 6802
// if not IsInUnit ( i ) and not tag and empty then
6999: LD_VAR 0 1
7003: PPUSH
7004: CALL_OW 310
7008: NOT
7009: PUSH
7010: LD_VAR 0 8
7014: NOT
7015: AND
7016: PUSH
7017: LD_VAR 0 15
7021: AND
7022: IFFALSE 7060
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
7024: LD_VAR 0 1
7028: PPUSH
7029: LD_VAR 0 15
7033: PUSH
7034: LD_INT 1
7036: ARRAY
7037: PPUSH
7038: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
7042: LD_ADDR_VAR 0 15
7046: PUSH
7047: LD_VAR 0 15
7051: PPUSH
7052: LD_INT 1
7054: PPUSH
7055: CALL_OW 3
7059: ST_TO_ADDR
// end ; end ;
7060: GO 6802
7062: POP
7063: POP
// end ; end ; end ;
7064: PPOPN 16
7066: END
// every 0 0$1 trigger Count ( arEscapist ) do var i ;
7067: LD_EXP 56
7071: PPUSH
7072: CALL 56717 0 1
7076: IFFALSE 7221
7078: GO 7080
7080: DISABLE
7081: LD_INT 0
7083: PPUSH
// begin enable ;
7084: ENABLE
// for i in UnitFilter ( arEscapist , [ f_ok ] ) do
7085: LD_ADDR_VAR 0 1
7089: PUSH
7090: LD_EXP 56
7094: PPUSH
7095: LD_INT 50
7097: PUSH
7098: EMPTY
7099: LIST
7100: PPUSH
7101: CALL_OW 72
7105: PUSH
7106: FOR_IN
7107: IFFALSE 7219
// begin if not HasTask ( i ) then
7109: LD_VAR 0 1
7113: PPUSH
7114: CALL_OW 314
7118: NOT
7119: IFFALSE 7133
// AddComMoveToArea ( i , khatamArea ) ;
7121: LD_VAR 0 1
7125: PPUSH
7126: LD_INT 11
7128: PPUSH
7129: CALL_OW 173
// if IsInArea ( i , khatamArea ) then
7133: LD_VAR 0 1
7137: PPUSH
7138: LD_INT 11
7140: PPUSH
7141: CALL_OW 308
7145: IFFALSE 7217
// begin RemoveUnit ( i ) ;
7147: LD_VAR 0 1
7151: PPUSH
7152: CALL_OW 64
// arEscapist := arEscapist diff i ;
7156: LD_ADDR_EXP 56
7160: PUSH
7161: LD_EXP 56
7165: PUSH
7166: LD_VAR 0 1
7170: DIFF
7171: ST_TO_ADDR
// arabianEscapedCounter := Inc ( arabianEscapedCounter ) ;
7172: LD_ADDR_EXP 21
7176: PUSH
7177: LD_EXP 21
7181: PPUSH
7182: CALL 93667 0 1
7186: ST_TO_ADDR
// if i = Dietrich then
7187: LD_VAR 0 1
7191: PUSH
7192: LD_EXP 50
7196: EQUAL
7197: IFFALSE 7217
// begin gensherEscaped := true ;
7199: LD_ADDR_EXP 13
7203: PUSH
7204: LD_INT 1
7206: ST_TO_ADDR
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
7207: LD_INT 1
7209: PPUSH
7210: LD_STRING 10_GensherEscape_1
7212: PPUSH
7213: CALL_OW 39
// end ; end ; end ;
7217: GO 7106
7219: POP
7220: POP
// end ;
7221: PPOPN 1
7223: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ; var i , skill , un , veh ; begin
7224: LD_INT 0
7226: PPUSH
7227: PPUSH
7228: PPUSH
7229: PPUSH
7230: PPUSH
// uc_side := 5 ;
7231: LD_ADDR_OWVAR 20
7235: PUSH
7236: LD_INT 5
7238: ST_TO_ADDR
// uc_nation := nation_arabian ;
7239: LD_ADDR_OWVAR 21
7243: PUSH
7244: LD_INT 2
7246: ST_TO_ADDR
// skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
7247: LD_ADDR_VAR 0 3
7251: PUSH
7252: LD_INT 5
7254: PUSH
7255: LD_INT 6
7257: PUSH
7258: LD_INT 7
7260: PUSH
7261: LD_INT 8
7263: PUSH
7264: EMPTY
7265: LIST
7266: LIST
7267: LIST
7268: LIST
7269: PUSH
7270: LD_OWVAR 67
7274: ARRAY
7275: ST_TO_ADDR
// arAttackersInf := [ ] ;
7276: LD_ADDR_EXP 57
7280: PUSH
7281: EMPTY
7282: ST_TO_ADDR
// arAttackersVeh := [ ] ;
7283: LD_ADDR_EXP 58
7287: PUSH
7288: EMPTY
7289: ST_TO_ADDR
// InitHC_All ( ) ;
7290: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
7294: LD_ADDR_VAR 0 2
7298: PUSH
7299: DOUBLE
7300: LD_INT 1
7302: DEC
7303: ST_TO_ADDR
7304: LD_INT 3
7306: PUSH
7307: LD_INT 4
7309: PUSH
7310: LD_INT 5
7312: PUSH
7313: LD_INT 6
7315: PUSH
7316: EMPTY
7317: LIST
7318: LIST
7319: LIST
7320: LIST
7321: PUSH
7322: LD_OWVAR 67
7326: ARRAY
7327: PUSH
7328: FOR_TO
7329: IFFALSE 7431
// begin PrepareSoldier ( false , skill ) ;
7331: LD_INT 0
7333: PPUSH
7334: LD_VAR 0 3
7338: PPUSH
7339: CALL_OW 381
// un := CreateHuman ;
7343: LD_ADDR_VAR 0 4
7347: PUSH
7348: CALL_OW 44
7352: ST_TO_ADDR
// if i mod 2 = 0 then
7353: LD_VAR 0 2
7357: PUSH
7358: LD_INT 2
7360: MOD
7361: PUSH
7362: LD_INT 0
7364: EQUAL
7365: IFFALSE 7379
// SetClass ( un , class_mortar ) ;
7367: LD_VAR 0 4
7371: PPUSH
7372: LD_INT 8
7374: PPUSH
7375: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
7379: LD_VAR 0 4
7383: PPUSH
7384: LD_INT 19
7386: PPUSH
7387: LD_INT 0
7389: PPUSH
7390: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
7394: LD_ADDR_EXP 57
7398: PUSH
7399: LD_EXP 57
7403: PPUSH
7404: LD_VAR 0 4
7408: PPUSH
7409: CALL 92306 0 2
7413: ST_TO_ADDR
// ComAgressiveMove ( un , 104 , 60 ) ;
7414: LD_VAR 0 4
7418: PPUSH
7419: LD_INT 104
7421: PPUSH
7422: LD_INT 60
7424: PPUSH
7425: CALL_OW 114
// end ;
7429: GO 7328
7431: POP
7432: POP
// for i := 1 to 3 do
7433: LD_ADDR_VAR 0 2
7437: PUSH
7438: DOUBLE
7439: LD_INT 1
7441: DEC
7442: ST_TO_ADDR
7443: LD_INT 3
7445: PUSH
7446: FOR_TO
7447: IFFALSE 7599
// begin PrepareMechanic ( false , skill ) ;
7449: LD_INT 0
7451: PPUSH
7452: LD_VAR 0 3
7456: PPUSH
7457: CALL_OW 383
// un := CreateHuman ;
7461: LD_ADDR_VAR 0 4
7465: PUSH
7466: CALL_OW 44
7470: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
7471: LD_INT 14
7473: PPUSH
7474: LD_INT 1
7476: PPUSH
7477: LD_INT 1
7479: PPUSH
7480: LD_INT 27
7482: PUSH
7483: LD_INT 25
7485: PUSH
7486: EMPTY
7487: LIST
7488: LIST
7489: PUSH
7490: LD_VAR 0 2
7494: PUSH
7495: LD_INT 2
7497: MOD
7498: PUSH
7499: LD_INT 1
7501: PLUS
7502: ARRAY
7503: PPUSH
7504: LD_INT 80
7506: PPUSH
7507: CALL 59455 0 5
// veh := CreateVehicle ;
7511: LD_ADDR_VAR 0 5
7515: PUSH
7516: CALL_OW 45
7520: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7521: LD_VAR 0 5
7525: PPUSH
7526: LD_INT 4
7528: PPUSH
7529: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7533: LD_VAR 0 5
7537: PPUSH
7538: LD_INT 18
7540: PPUSH
7541: LD_INT 0
7543: PPUSH
7544: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7548: LD_VAR 0 4
7552: PPUSH
7553: LD_VAR 0 5
7557: PPUSH
7558: CALL_OW 52
// ComMoveXY ( un , 129 , 20 ) ;
7562: LD_VAR 0 4
7566: PPUSH
7567: LD_INT 129
7569: PPUSH
7570: LD_INT 20
7572: PPUSH
7573: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7577: LD_ADDR_EXP 58
7581: PUSH
7582: LD_EXP 58
7586: PPUSH
7587: LD_VAR 0 5
7591: PPUSH
7592: CALL 92306 0 2
7596: ST_TO_ADDR
// end ;
7597: GO 7446
7599: POP
7600: POP
// wait ( 0 0$2 ) ;
7601: LD_INT 70
7603: PPUSH
7604: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
7608: LD_ADDR_VAR 0 2
7612: PUSH
7613: DOUBLE
7614: LD_INT 1
7616: DEC
7617: ST_TO_ADDR
7618: LD_INT 1
7620: PUSH
7621: LD_INT 2
7623: PUSH
7624: LD_INT 2
7626: PUSH
7627: LD_INT 3
7629: PUSH
7630: EMPTY
7631: LIST
7632: LIST
7633: LIST
7634: LIST
7635: PUSH
7636: LD_OWVAR 67
7640: ARRAY
7641: PUSH
7642: FOR_TO
7643: IFFALSE 7774
// begin PrepareMechanic ( false , skill ) ;
7645: LD_INT 0
7647: PPUSH
7648: LD_VAR 0 3
7652: PPUSH
7653: CALL_OW 383
// un := CreateHuman ;
7657: LD_ADDR_VAR 0 4
7661: PUSH
7662: CALL_OW 44
7666: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
7667: LD_INT 14
7669: PPUSH
7670: LD_INT 1
7672: PPUSH
7673: LD_INT 1
7675: PPUSH
7676: LD_INT 26
7678: PPUSH
7679: LD_INT 80
7681: PPUSH
7682: CALL 59455 0 5
// veh := CreateVehicle ;
7686: LD_ADDR_VAR 0 5
7690: PUSH
7691: CALL_OW 45
7695: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7696: LD_VAR 0 5
7700: PPUSH
7701: LD_INT 4
7703: PPUSH
7704: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7708: LD_VAR 0 5
7712: PPUSH
7713: LD_INT 18
7715: PPUSH
7716: LD_INT 0
7718: PPUSH
7719: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7723: LD_VAR 0 4
7727: PPUSH
7728: LD_VAR 0 5
7732: PPUSH
7733: CALL_OW 52
// ComMoveXY ( un , 133 , 40 ) ;
7737: LD_VAR 0 4
7741: PPUSH
7742: LD_INT 133
7744: PPUSH
7745: LD_INT 40
7747: PPUSH
7748: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7752: LD_ADDR_EXP 58
7756: PUSH
7757: LD_EXP 58
7761: PPUSH
7762: LD_VAR 0 5
7766: PPUSH
7767: CALL 92306 0 2
7771: ST_TO_ADDR
// end ;
7772: GO 7642
7774: POP
7775: POP
// wait ( 0 0$2 ) ;
7776: LD_INT 70
7778: PPUSH
7779: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
7783: LD_ADDR_VAR 0 2
7787: PUSH
7788: DOUBLE
7789: LD_INT 1
7791: DEC
7792: ST_TO_ADDR
7793: LD_INT 1
7795: PUSH
7796: LD_INT 2
7798: PUSH
7799: LD_INT 3
7801: PUSH
7802: LD_INT 4
7804: PUSH
7805: EMPTY
7806: LIST
7807: LIST
7808: LIST
7809: LIST
7810: PUSH
7811: LD_OWVAR 67
7815: ARRAY
7816: PUSH
7817: FOR_TO
7818: IFFALSE 7980
// begin PrepareMechanic ( false , skill ) ;
7820: LD_INT 0
7822: PPUSH
7823: LD_VAR 0 3
7827: PPUSH
7828: CALL_OW 383
// un := CreateHuman ;
7832: LD_ADDR_VAR 0 4
7836: PUSH
7837: CALL_OW 44
7841: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
7842: LD_INT 14
7844: PPUSH
7845: LD_INT 1
7847: PPUSH
7848: LD_INT 1
7850: PPUSH
7851: LD_INT 28
7853: PPUSH
7854: LD_INT 80
7856: PPUSH
7857: CALL 59455 0 5
// veh := CreateVehicle ;
7861: LD_ADDR_VAR 0 5
7865: PUSH
7866: CALL_OW 45
7870: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7871: LD_VAR 0 5
7875: PPUSH
7876: LD_INT 4
7878: PPUSH
7879: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7883: LD_VAR 0 5
7887: PPUSH
7888: LD_INT 18
7890: PPUSH
7891: LD_INT 0
7893: PPUSH
7894: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7898: LD_VAR 0 4
7902: PPUSH
7903: LD_VAR 0 5
7907: PPUSH
7908: CALL_OW 52
// if i mod 2 = 0 then
7912: LD_VAR 0 2
7916: PUSH
7917: LD_INT 2
7919: MOD
7920: PUSH
7921: LD_INT 0
7923: EQUAL
7924: IFFALSE 7943
// ComMoveXY ( un , 136 , 61 ) else
7926: LD_VAR 0 4
7930: PPUSH
7931: LD_INT 136
7933: PPUSH
7934: LD_INT 61
7936: PPUSH
7937: CALL_OW 111
7941: GO 7958
// ComMoveXY ( un , 137 , 41 ) ;
7943: LD_VAR 0 4
7947: PPUSH
7948: LD_INT 137
7950: PPUSH
7951: LD_INT 41
7953: PPUSH
7954: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , veh ) ;
7958: LD_ADDR_EXP 58
7962: PUSH
7963: LD_EXP 58
7967: PPUSH
7968: LD_VAR 0 5
7972: PPUSH
7973: CALL 92306 0 2
7977: ST_TO_ADDR
// end ;
7978: GO 7817
7980: POP
7981: POP
// arabianAttackSpawned := true ;
7982: LD_ADDR_EXP 12
7986: PUSH
7987: LD_INT 1
7989: ST_TO_ADDR
// end ;
7990: LD_VAR 0 1
7994: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest ;
7995: LD_EXP 57
7999: IFFALSE 8412
8001: GO 8003
8003: DISABLE
8004: LD_INT 0
8006: PPUSH
8007: PPUSH
8008: PPUSH
// begin wait ( 0 0$10 ) ;
8009: LD_INT 350
8011: PPUSH
8012: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
8016: LD_ADDR_VAR 0 2
8020: PUSH
8021: LD_EXP 57
8025: PPUSH
8026: LD_INT 25
8028: PUSH
8029: LD_INT 1
8031: PUSH
8032: EMPTY
8033: LIST
8034: LIST
8035: PUSH
8036: LD_INT 50
8038: PUSH
8039: EMPTY
8040: LIST
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: PPUSH
8046: CALL_OW 72
8050: ST_TO_ADDR
// for i in tmp do
8051: LD_ADDR_VAR 0 1
8055: PUSH
8056: LD_VAR 0 2
8060: PUSH
8061: FOR_IN
8062: IFFALSE 8187
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
8064: LD_ADDR_VAR 0 3
8068: PUSH
8069: LD_INT 22
8071: PUSH
8072: LD_INT 1
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: PUSH
8079: LD_INT 3
8081: PUSH
8082: LD_INT 120
8084: PUSH
8085: LD_INT 11
8087: PUSH
8088: EMPTY
8089: LIST
8090: LIST
8091: PUSH
8092: EMPTY
8093: LIST
8094: LIST
8095: PUSH
8096: LD_INT 2
8098: PUSH
8099: LD_INT 21
8101: PUSH
8102: LD_INT 2
8104: PUSH
8105: EMPTY
8106: LIST
8107: LIST
8108: PUSH
8109: LD_INT 21
8111: PUSH
8112: LD_INT 3
8114: PUSH
8115: EMPTY
8116: LIST
8117: LIST
8118: PUSH
8119: EMPTY
8120: LIST
8121: LIST
8122: LIST
8123: PUSH
8124: EMPTY
8125: LIST
8126: LIST
8127: LIST
8128: PPUSH
8129: CALL_OW 69
8133: PPUSH
8134: LD_VAR 0 1
8138: PPUSH
8139: CALL_OW 74
8143: ST_TO_ADDR
// if not nearest then
8144: LD_VAR 0 3
8148: NOT
8149: IFFALSE 8153
// break ;
8151: GO 8187
// SetTag ( nearest , tMined ) ;
8153: LD_VAR 0 3
8157: PPUSH
8158: LD_INT 11
8160: PPUSH
8161: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
8165: LD_VAR 0 1
8169: PPUSH
8170: LD_INT 0
8172: PPUSH
8173: LD_INT 0
8175: PPUSH
8176: LD_VAR 0 3
8180: PPUSH
8181: CALL_OW 132
// end ;
8185: GO 8061
8187: POP
8188: POP
// if hasBase and epsilon then
8189: LD_EXP 9
8193: PUSH
8194: LD_EXP 10
8198: AND
8199: IFFALSE 8223
// AddComPlaceDelayedCharge ( tmp , 0 , 0 , epsilon ) else
8201: LD_VAR 0 2
8205: PPUSH
8206: LD_INT 0
8208: PPUSH
8209: LD_INT 0
8211: PPUSH
8212: LD_EXP 10
8216: PPUSH
8217: CALL_OW 192
8221: GO 8238
// AddComMoveXY ( tmp , 107 , 59 ) ;
8223: LD_VAR 0 2
8227: PPUSH
8228: LD_INT 107
8230: PPUSH
8231: LD_INT 59
8233: PPUSH
8234: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
8238: LD_INT 35
8240: PPUSH
8241: CALL_OW 67
// until IsDead ( Dietrich ) or gensherEscaped ;
8245: LD_EXP 50
8249: PPUSH
8250: CALL_OW 301
8254: PUSH
8255: LD_EXP 13
8259: OR
8260: IFFALSE 8238
// if not gensherEscaped then
8262: LD_EXP 13
8266: NOT
8267: IFFALSE 8276
// wait ( 1 1$20 ) ;
8269: LD_INT 2800
8271: PPUSH
8272: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
8276: LD_ADDR_VAR 0 2
8280: PUSH
8281: LD_EXP 57
8285: PPUSH
8286: LD_INT 50
8288: PUSH
8289: EMPTY
8290: LIST
8291: PPUSH
8292: CALL_OW 72
8296: ST_TO_ADDR
// ComMoveXY ( tmp , 143 , 117 ) ;
8297: LD_VAR 0 2
8301: PPUSH
8302: LD_INT 143
8304: PPUSH
8305: LD_INT 117
8307: PPUSH
8308: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
8312: LD_INT 35
8314: PPUSH
8315: CALL_OW 67
// for i in tmp do
8319: LD_ADDR_VAR 0 1
8323: PUSH
8324: LD_VAR 0 2
8328: PUSH
8329: FOR_IN
8330: IFFALSE 8403
// if IsInArea ( i , arAttackSpawn2Area ) then
8332: LD_VAR 0 1
8336: PPUSH
8337: LD_INT 19
8339: PPUSH
8340: CALL_OW 308
8344: IFFALSE 8389
// begin tmp := tmp diff i ;
8346: LD_ADDR_VAR 0 2
8350: PUSH
8351: LD_VAR 0 2
8355: PUSH
8356: LD_VAR 0 1
8360: DIFF
8361: ST_TO_ADDR
// arAttackersInf := arAttackersInf diff i ;
8362: LD_ADDR_EXP 57
8366: PUSH
8367: LD_EXP 57
8371: PUSH
8372: LD_VAR 0 1
8376: DIFF
8377: ST_TO_ADDR
// RemoveUnit ( i ) ;
8378: LD_VAR 0 1
8382: PPUSH
8383: CALL_OW 64
// end else
8387: GO 8401
// ComMoveToArea ( i , arAttackSpawn2Area ) ;
8389: LD_VAR 0 1
8393: PPUSH
8394: LD_INT 19
8396: PPUSH
8397: CALL_OW 113
8401: GO 8329
8403: POP
8404: POP
// until not tmp ;
8405: LD_VAR 0 2
8409: NOT
8410: IFFALSE 8312
// end ;
8412: PPOPN 3
8414: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp , p ;
8415: LD_EXP 58
8419: IFFALSE 8703
8421: GO 8423
8423: DISABLE
8424: LD_INT 0
8426: PPUSH
8427: PPUSH
8428: PPUSH
// begin p := 0 ;
8429: LD_ADDR_VAR 0 3
8433: PUSH
8434: LD_INT 0
8436: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
8437: LD_INT 35
8439: PPUSH
8440: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8444: LD_ADDR_VAR 0 2
8448: PUSH
8449: LD_EXP 58
8453: PPUSH
8454: LD_INT 50
8456: PUSH
8457: EMPTY
8458: LIST
8459: PPUSH
8460: CALL_OW 72
8464: ST_TO_ADDR
// for i in tmp do
8465: LD_ADDR_VAR 0 1
8469: PUSH
8470: LD_VAR 0 2
8474: PUSH
8475: FOR_IN
8476: IFFALSE 8513
// AgressiveMove ( i , [ [ 143 , 38 ] , [ 111 , 31 ] ] ) ;
8478: LD_VAR 0 1
8482: PPUSH
8483: LD_INT 143
8485: PUSH
8486: LD_INT 38
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: PUSH
8493: LD_INT 111
8495: PUSH
8496: LD_INT 31
8498: PUSH
8499: EMPTY
8500: LIST
8501: LIST
8502: PUSH
8503: EMPTY
8504: LIST
8505: LIST
8506: PPUSH
8507: CALL 94910 0 2
8511: GO 8475
8513: POP
8514: POP
// if IsDead ( Dietrich ) then
8515: LD_EXP 50
8519: PPUSH
8520: CALL_OW 301
8524: IFFALSE 8541
// p := Inc ( p ) ;
8526: LD_ADDR_VAR 0 3
8530: PUSH
8531: LD_VAR 0 3
8535: PPUSH
8536: CALL 93667 0 1
8540: ST_TO_ADDR
// until not tmp or gensherEscaped or p > 40 ;
8541: LD_VAR 0 2
8545: NOT
8546: PUSH
8547: LD_EXP 13
8551: OR
8552: PUSH
8553: LD_VAR 0 3
8557: PUSH
8558: LD_INT 40
8560: GREATER
8561: OR
8562: IFFALSE 8437
// if not arAttackersVeh then
8564: LD_EXP 58
8568: NOT
8569: IFFALSE 8573
// exit ;
8571: GO 8703
// repeat wait ( 0 0$1 ) ;
8573: LD_INT 35
8575: PPUSH
8576: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
8580: LD_ADDR_VAR 0 2
8584: PUSH
8585: LD_EXP 58
8589: PPUSH
8590: LD_INT 50
8592: PUSH
8593: EMPTY
8594: LIST
8595: PPUSH
8596: CALL_OW 72
8600: ST_TO_ADDR
// for i in tmp do
8601: LD_ADDR_VAR 0 1
8605: PUSH
8606: LD_VAR 0 2
8610: PUSH
8611: FOR_IN
8612: IFFALSE 8694
// if IsInArea ( i , arAttackSpawnArea ) then
8614: LD_VAR 0 1
8618: PPUSH
8619: LD_INT 18
8621: PPUSH
8622: CALL_OW 308
8626: IFFALSE 8680
// begin if IsInUnit ( i ) then
8628: LD_VAR 0 1
8632: PPUSH
8633: CALL_OW 310
8637: IFFALSE 8653
// RemoveUnit ( IsInUnit ( i ) ) ;
8639: LD_VAR 0 1
8643: PPUSH
8644: CALL_OW 310
8648: PPUSH
8649: CALL_OW 64
// RemoveUnit ( i ) ;
8653: LD_VAR 0 1
8657: PPUSH
8658: CALL_OW 64
// arAttackersVeh := arAttackersVeh diff i ;
8662: LD_ADDR_EXP 58
8666: PUSH
8667: LD_EXP 58
8671: PUSH
8672: LD_VAR 0 1
8676: DIFF
8677: ST_TO_ADDR
// end else
8678: GO 8692
// ComMoveToArea ( i , arAttackSpawnArea ) ;
8680: LD_VAR 0 1
8684: PPUSH
8685: LD_INT 18
8687: PPUSH
8688: CALL_OW 113
8692: GO 8611
8694: POP
8695: POP
// until not tmp ;
8696: LD_VAR 0 2
8700: NOT
8701: IFFALSE 8573
// end ; end_of_file
8703: PPOPN 3
8705: END
// export ruForces , ruForces2 , ruCommander , ruCommander2 , ruMech , ruMech2 ; export ruTech , ruBaseArea , ruBaseArea2 , ruBase , ruBase2 , ruConstructList , ruConstructList2 , ruCratesArea , ruCratesArea2 , ruHealPoint , ruHealPoint2 , ruBuildings , ruBuildings2 , ruTransportDestroyed , ruTanks , ruTanks2 , ruExtraTanks , ruParkingArea , ruParkingArea2 , ruCratesSpawnArea , ruCratesSpawnArea2 ; export function PrepareRussian ; var i , j , un , skill , sources ; begin
8706: LD_INT 0
8708: PPUSH
8709: PPUSH
8710: PPUSH
8711: PPUSH
8712: PPUSH
8713: PPUSH
// uc_side := 3 ;
8714: LD_ADDR_OWVAR 20
8718: PUSH
8719: LD_INT 3
8721: ST_TO_ADDR
// uc_nation := nation_russian ;
8722: LD_ADDR_OWVAR 21
8726: PUSH
8727: LD_INT 3
8729: ST_TO_ADDR
// ruForces := [ ] ;
8730: LD_ADDR_EXP 59
8734: PUSH
8735: EMPTY
8736: ST_TO_ADDR
// ruForces2 := [ ] ;
8737: LD_ADDR_EXP 60
8741: PUSH
8742: EMPTY
8743: ST_TO_ADDR
// ruMech := [ ] ;
8744: LD_ADDR_EXP 63
8748: PUSH
8749: EMPTY
8750: ST_TO_ADDR
// ruMech2 := [ ] ;
8751: LD_ADDR_EXP 64
8755: PUSH
8756: EMPTY
8757: ST_TO_ADDR
// ruTech := [ tech_LimTeleport , tech_ST1 , tech_Weap2 , tech_Sib1 ] ;
8758: LD_ADDR_EXP 65
8762: PUSH
8763: LD_INT 37
8765: PUSH
8766: LD_INT 63
8768: PUSH
8769: LD_INT 52
8771: PUSH
8772: LD_INT 54
8774: PUSH
8775: EMPTY
8776: LIST
8777: LIST
8778: LIST
8779: LIST
8780: ST_TO_ADDR
// ruBaseArea := 0 ;
8781: LD_ADDR_EXP 66
8785: PUSH
8786: LD_INT 0
8788: ST_TO_ADDR
// ruBaseArea2 := 0 ;
8789: LD_ADDR_EXP 67
8793: PUSH
8794: LD_INT 0
8796: ST_TO_ADDR
// ruBase := 0 ;
8797: LD_ADDR_EXP 68
8801: PUSH
8802: LD_INT 0
8804: ST_TO_ADDR
// ruBase2 := 0 ;
8805: LD_ADDR_EXP 69
8809: PUSH
8810: LD_INT 0
8812: ST_TO_ADDR
// ruConstructList := [ ] ;
8813: LD_ADDR_EXP 70
8817: PUSH
8818: EMPTY
8819: ST_TO_ADDR
// ruConstructList2 := [ [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ] ;
8820: LD_ADDR_EXP 71
8824: PUSH
8825: LD_INT 22
8827: PUSH
8828: LD_INT 3
8830: PUSH
8831: LD_INT 1
8833: PUSH
8834: LD_INT 43
8836: PUSH
8837: LD_INT 44
8839: PUSH
8840: LD_INT 45
8842: PUSH
8843: EMPTY
8844: LIST
8845: LIST
8846: LIST
8847: PUSH
8848: LD_INT 1
8850: PPUSH
8851: LD_INT 3
8853: PPUSH
8854: CALL_OW 12
8858: ARRAY
8859: PUSH
8860: EMPTY
8861: LIST
8862: LIST
8863: LIST
8864: LIST
8865: PUSH
8866: LD_INT 22
8868: PUSH
8869: LD_INT 3
8871: PUSH
8872: LD_INT 1
8874: PUSH
8875: LD_INT 43
8877: PUSH
8878: LD_INT 44
8880: PUSH
8881: LD_INT 45
8883: PUSH
8884: EMPTY
8885: LIST
8886: LIST
8887: LIST
8888: PUSH
8889: LD_INT 1
8891: PPUSH
8892: LD_INT 3
8894: PPUSH
8895: CALL_OW 12
8899: ARRAY
8900: PUSH
8901: EMPTY
8902: LIST
8903: LIST
8904: LIST
8905: LIST
8906: PUSH
8907: LD_INT 22
8909: PUSH
8910: LD_INT 3
8912: PUSH
8913: LD_INT 1
8915: PUSH
8916: LD_INT 43
8918: PUSH
8919: LD_INT 44
8921: PUSH
8922: LD_INT 45
8924: PUSH
8925: EMPTY
8926: LIST
8927: LIST
8928: LIST
8929: PUSH
8930: LD_INT 1
8932: PPUSH
8933: LD_INT 3
8935: PPUSH
8936: CALL_OW 12
8940: ARRAY
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: LIST
8946: LIST
8947: PUSH
8948: EMPTY
8949: LIST
8950: LIST
8951: LIST
8952: ST_TO_ADDR
// ruCratesArea := 0 ;
8953: LD_ADDR_EXP 72
8957: PUSH
8958: LD_INT 0
8960: ST_TO_ADDR
// ruCratesArea2 := 0 ;
8961: LD_ADDR_EXP 73
8965: PUSH
8966: LD_INT 0
8968: ST_TO_ADDR
// ruHealPoint := [ ] ;
8969: LD_ADDR_EXP 74
8973: PUSH
8974: EMPTY
8975: ST_TO_ADDR
// ruHealPoint2 := [ ] ;
8976: LD_ADDR_EXP 75
8980: PUSH
8981: EMPTY
8982: ST_TO_ADDR
// ruBuildings := [ ] ;
8983: LD_ADDR_EXP 76
8987: PUSH
8988: EMPTY
8989: ST_TO_ADDR
// ruBuildings2 := [ ] ;
8990: LD_ADDR_EXP 77
8994: PUSH
8995: EMPTY
8996: ST_TO_ADDR
// ruTanks := [ ] ;
8997: LD_ADDR_EXP 79
9001: PUSH
9002: EMPTY
9003: ST_TO_ADDR
// ruTanks2 := [ ] ;
9004: LD_ADDR_EXP 80
9008: PUSH
9009: EMPTY
9010: ST_TO_ADDR
// ruParkingArea := 0 ;
9011: LD_ADDR_EXP 82
9015: PUSH
9016: LD_INT 0
9018: ST_TO_ADDR
// ruParkingArea2 := 0 ;
9019: LD_ADDR_EXP 83
9023: PUSH
9024: LD_INT 0
9026: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
9027: LD_ADDR_VAR 0 2
9031: PUSH
9032: DOUBLE
9033: LD_INT 1
9035: DEC
9036: ST_TO_ADDR
9037: LD_INT 2
9039: PUSH
9040: LD_INT 3
9042: PUSH
9043: LD_INT 4
9045: PUSH
9046: LD_INT 4
9048: PUSH
9049: EMPTY
9050: LIST
9051: LIST
9052: LIST
9053: LIST
9054: PUSH
9055: LD_OWVAR 67
9059: ARRAY
9060: PUSH
9061: FOR_TO
9062: IFFALSE 9122
// ruConstructList := Join ( ruConstructList , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
9064: LD_ADDR_EXP 70
9068: PUSH
9069: LD_EXP 70
9073: PPUSH
9074: LD_INT 22
9076: PUSH
9077: LD_INT 3
9079: PUSH
9080: LD_INT 1
9082: PUSH
9083: LD_INT 43
9085: PUSH
9086: LD_INT 44
9088: PUSH
9089: LD_INT 45
9091: PUSH
9092: EMPTY
9093: LIST
9094: LIST
9095: LIST
9096: PUSH
9097: LD_INT 1
9099: PPUSH
9100: LD_INT 3
9102: PPUSH
9103: CALL_OW 12
9107: ARRAY
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: PPUSH
9115: CALL 92306 0 2
9119: ST_TO_ADDR
9120: GO 9061
9122: POP
9123: POP
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
9124: LD_ADDR_VAR 0 6
9128: PUSH
9129: LD_INT 43
9131: PUSH
9132: LD_INT 68
9134: PUSH
9135: EMPTY
9136: LIST
9137: LIST
9138: PUSH
9139: LD_INT 43
9141: PUSH
9142: LD_INT 79
9144: PUSH
9145: EMPTY
9146: LIST
9147: LIST
9148: PUSH
9149: LD_INT 99
9151: PUSH
9152: LD_INT 114
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: LD_INT 103
9161: PUSH
9162: LD_INT 114
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: PUSH
9169: LD_INT 156
9171: PUSH
9172: LD_INT 92
9174: PUSH
9175: EMPTY
9176: LIST
9177: LIST
9178: PUSH
9179: LD_INT 152
9181: PUSH
9182: LD_INT 85
9184: PUSH
9185: EMPTY
9186: LIST
9187: LIST
9188: PUSH
9189: EMPTY
9190: LIST
9191: LIST
9192: LIST
9193: LIST
9194: LIST
9195: LIST
9196: ST_TO_ADDR
// for i in sources do
9197: LD_ADDR_VAR 0 2
9201: PUSH
9202: LD_VAR 0 6
9206: PUSH
9207: FOR_IN
9208: IFFALSE 9237
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
9210: LD_VAR 0 2
9214: PUSH
9215: LD_INT 1
9217: ARRAY
9218: PPUSH
9219: LD_VAR 0 2
9223: PUSH
9224: LD_INT 2
9226: ARRAY
9227: PPUSH
9228: LD_INT 3
9230: PPUSH
9231: CALL_OW 441
9235: GO 9207
9237: POP
9238: POP
// if Difficulty > 2 then
9239: LD_OWVAR 67
9243: PUSH
9244: LD_INT 2
9246: GREATER
9247: IFFALSE 9275
// begin SetTech ( tech_weap2 , 6 , state_researched ) ;
9249: LD_INT 52
9251: PPUSH
9252: LD_INT 6
9254: PPUSH
9255: LD_INT 2
9257: PPUSH
9258: CALL_OW 322
// SetTech ( tech_comp2 , 6 , state_researched ) ;
9262: LD_INT 58
9264: PPUSH
9265: LD_INT 6
9267: PPUSH
9268: LD_INT 2
9270: PPUSH
9271: CALL_OW 322
// end ; skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
9275: LD_ADDR_VAR 0 5
9279: PUSH
9280: LD_INT 5
9282: PUSH
9283: LD_INT 6
9285: PUSH
9286: LD_INT 7
9288: PUSH
9289: LD_INT 8
9291: PUSH
9292: EMPTY
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: PUSH
9298: LD_OWVAR 67
9302: ARRAY
9303: ST_TO_ADDR
// ruCommander := PrepareUnit ( Tsaritsyn , false ,  ) ;
9304: LD_ADDR_EXP 61
9308: PUSH
9309: LD_STRING Tsaritsyn
9311: PPUSH
9312: LD_INT 0
9314: PPUSH
9315: LD_STRING 
9317: PPUSH
9318: CALL 54615 0 3
9322: ST_TO_ADDR
// for i := 1 to 4 do
9323: LD_ADDR_VAR 0 2
9327: PUSH
9328: DOUBLE
9329: LD_INT 1
9331: DEC
9332: ST_TO_ADDR
9333: LD_INT 4
9335: PUSH
9336: FOR_TO
9337: IFFALSE 9555
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9339: LD_ADDR_VAR 0 3
9343: PUSH
9344: DOUBLE
9345: LD_INT 1
9347: DEC
9348: ST_TO_ADDR
9349: LD_INT 5
9351: PUSH
9352: LD_INT 6
9354: PUSH
9355: LD_INT 8
9357: PUSH
9358: LD_INT 9
9360: PUSH
9361: EMPTY
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: PUSH
9367: LD_OWVAR 67
9371: ARRAY
9372: PUSH
9373: LD_INT 3
9375: PUSH
9376: LD_INT 4
9378: PUSH
9379: LD_INT 5
9381: PUSH
9382: LD_INT 6
9384: PUSH
9385: EMPTY
9386: LIST
9387: LIST
9388: LIST
9389: LIST
9390: PUSH
9391: LD_OWVAR 67
9395: ARRAY
9396: PUSH
9397: LD_INT 3
9399: PUSH
9400: LD_INT 4
9402: PUSH
9403: LD_INT 5
9405: PUSH
9406: LD_INT 6
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: PUSH
9415: LD_OWVAR 67
9419: ARRAY
9420: PUSH
9421: LD_INT 2
9423: PUSH
9424: LD_INT 3
9426: PUSH
9427: LD_INT 3
9429: PUSH
9430: LD_INT 3
9432: PUSH
9433: EMPTY
9434: LIST
9435: LIST
9436: LIST
9437: LIST
9438: PUSH
9439: LD_OWVAR 67
9443: ARRAY
9444: PUSH
9445: EMPTY
9446: LIST
9447: LIST
9448: LIST
9449: LIST
9450: PUSH
9451: LD_VAR 0 2
9455: ARRAY
9456: PUSH
9457: FOR_TO
9458: IFFALSE 9551
// begin PrepareHuman ( false , i , skill ) ;
9460: LD_INT 0
9462: PPUSH
9463: LD_VAR 0 2
9467: PPUSH
9468: LD_VAR 0 5
9472: PPUSH
9473: CALL_OW 380
// un := CreateHuman ;
9477: LD_ADDR_VAR 0 4
9481: PUSH
9482: CALL_OW 44
9486: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
9487: LD_ADDR_EXP 59
9491: PUSH
9492: LD_EXP 59
9496: PPUSH
9497: LD_VAR 0 4
9501: PPUSH
9502: CALL 92306 0 2
9506: ST_TO_ADDR
// if i = 3 then
9507: LD_VAR 0 2
9511: PUSH
9512: LD_INT 3
9514: EQUAL
9515: IFFALSE 9549
// begin ruMech := Join ( ruMech , un ) ;
9517: LD_ADDR_EXP 63
9521: PUSH
9522: LD_EXP 63
9526: PPUSH
9527: LD_VAR 0 4
9531: PPUSH
9532: CALL 92306 0 2
9536: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9537: LD_VAR 0 4
9541: PPUSH
9542: LD_INT 1
9544: PPUSH
9545: CALL_OW 336
// end ; end ;
9549: GO 9457
9551: POP
9552: POP
9553: GO 9336
9555: POP
9556: POP
// if Difficulty < 4 then
9557: LD_OWVAR 67
9561: PUSH
9562: LD_INT 4
9564: LESS
9565: IFFALSE 9569
// exit ;
9567: GO 9841
// PrepareSoldier ( sex_male , skill + 1 ) ;
9569: LD_INT 1
9571: PPUSH
9572: LD_VAR 0 5
9576: PUSH
9577: LD_INT 1
9579: PLUS
9580: PPUSH
9581: CALL_OW 381
// hc_importance := 100 ;
9585: LD_ADDR_OWVAR 32
9589: PUSH
9590: LD_INT 100
9592: ST_TO_ADDR
// ruCommander2 := CreateHuman ;
9593: LD_ADDR_EXP 62
9597: PUSH
9598: CALL_OW 44
9602: ST_TO_ADDR
// InitHc_All ( ) ;
9603: CALL_OW 584
// for i := 1 to 4 do
9607: LD_ADDR_VAR 0 2
9611: PUSH
9612: DOUBLE
9613: LD_INT 1
9615: DEC
9616: ST_TO_ADDR
9617: LD_INT 4
9619: PUSH
9620: FOR_TO
9621: IFFALSE 9839
// for j := 1 to [ [ 5 , 6 , 8 , 9 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 3 , 4 , 5 , 6 ] [ Difficulty ] , [ 2 , 3 , 3 , 3 ] [ Difficulty ] ] [ i ] do
9623: LD_ADDR_VAR 0 3
9627: PUSH
9628: DOUBLE
9629: LD_INT 1
9631: DEC
9632: ST_TO_ADDR
9633: LD_INT 5
9635: PUSH
9636: LD_INT 6
9638: PUSH
9639: LD_INT 8
9641: PUSH
9642: LD_INT 9
9644: PUSH
9645: EMPTY
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: PUSH
9651: LD_OWVAR 67
9655: ARRAY
9656: PUSH
9657: LD_INT 3
9659: PUSH
9660: LD_INT 4
9662: PUSH
9663: LD_INT 5
9665: PUSH
9666: LD_INT 6
9668: PUSH
9669: EMPTY
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: PUSH
9675: LD_OWVAR 67
9679: ARRAY
9680: PUSH
9681: LD_INT 3
9683: PUSH
9684: LD_INT 4
9686: PUSH
9687: LD_INT 5
9689: PUSH
9690: LD_INT 6
9692: PUSH
9693: EMPTY
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: PUSH
9699: LD_OWVAR 67
9703: ARRAY
9704: PUSH
9705: LD_INT 2
9707: PUSH
9708: LD_INT 3
9710: PUSH
9711: LD_INT 3
9713: PUSH
9714: LD_INT 3
9716: PUSH
9717: EMPTY
9718: LIST
9719: LIST
9720: LIST
9721: LIST
9722: PUSH
9723: LD_OWVAR 67
9727: ARRAY
9728: PUSH
9729: EMPTY
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: PUSH
9735: LD_VAR 0 2
9739: ARRAY
9740: PUSH
9741: FOR_TO
9742: IFFALSE 9835
// begin PrepareHuman ( false , i , skill ) ;
9744: LD_INT 0
9746: PPUSH
9747: LD_VAR 0 2
9751: PPUSH
9752: LD_VAR 0 5
9756: PPUSH
9757: CALL_OW 380
// un := CreateHuman ;
9761: LD_ADDR_VAR 0 4
9765: PUSH
9766: CALL_OW 44
9770: ST_TO_ADDR
// ruForces2 := Join ( ruForces2 , un ) ;
9771: LD_ADDR_EXP 60
9775: PUSH
9776: LD_EXP 60
9780: PPUSH
9781: LD_VAR 0 4
9785: PPUSH
9786: CALL 92306 0 2
9790: ST_TO_ADDR
// if i = 3 then
9791: LD_VAR 0 2
9795: PUSH
9796: LD_INT 3
9798: EQUAL
9799: IFFALSE 9833
// begin ruMech2 := Join ( ruMech2 , un ) ;
9801: LD_ADDR_EXP 64
9805: PUSH
9806: LD_EXP 64
9810: PPUSH
9811: LD_VAR 0 4
9815: PPUSH
9816: CALL 92306 0 2
9820: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
9821: LD_VAR 0 4
9825: PPUSH
9826: LD_INT 1
9828: PPUSH
9829: CALL_OW 336
// end ; end ;
9833: GO 9741
9835: POP
9836: POP
9837: GO 9620
9839: POP
9840: POP
// end ;
9841: LD_VAR 0 1
9845: RET
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings ) < 3 do var i ;
9846: LD_EXP 66
9850: PPUSH
9851: LD_INT 30
9853: PUSH
9854: LD_INT 3
9856: PUSH
9857: EMPTY
9858: LIST
9859: LIST
9860: PUSH
9861: LD_INT 50
9863: PUSH
9864: EMPTY
9865: LIST
9866: PUSH
9867: EMPTY
9868: LIST
9869: LIST
9870: PPUSH
9871: CALL_OW 70
9875: PUSH
9876: LD_EXP 76
9880: PPUSH
9881: CALL 56717 0 1
9885: PUSH
9886: LD_INT 3
9888: LESS
9889: AND
9890: IFFALSE 10154
9892: GO 9894
9894: DISABLE
9895: LD_INT 0
9897: PPUSH
// begin enable ;
9898: ENABLE
// ruConstructList := ruConstructList ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
9899: LD_ADDR_EXP 70
9903: PUSH
9904: LD_EXP 70
9908: PUSH
9909: LD_INT 22
9911: PUSH
9912: LD_INT 22
9914: PUSH
9915: LD_INT 24
9917: PUSH
9918: LD_INT 24
9920: PUSH
9921: EMPTY
9922: LIST
9923: LIST
9924: LIST
9925: LIST
9926: PUSH
9927: LD_OWVAR 67
9931: ARRAY
9932: PUSH
9933: LD_INT 1
9935: PUSH
9936: LD_INT 3
9938: PUSH
9939: LD_INT 44
9941: PUSH
9942: LD_INT 45
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 1
9951: PPUSH
9952: LD_INT 2
9954: PPUSH
9955: CALL_OW 12
9959: ARRAY
9960: PUSH
9961: EMPTY
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: PUSH
9967: LD_INT 22
9969: PUSH
9970: LD_INT 22
9972: PUSH
9973: LD_INT 24
9975: PUSH
9976: LD_INT 24
9978: PUSH
9979: EMPTY
9980: LIST
9981: LIST
9982: LIST
9983: LIST
9984: PUSH
9985: LD_OWVAR 67
9989: ARRAY
9990: PUSH
9991: LD_INT 1
9993: PUSH
9994: LD_INT 3
9996: PUSH
9997: LD_INT 45
9999: PUSH
10000: EMPTY
10001: LIST
10002: LIST
10003: LIST
10004: LIST
10005: PUSH
10006: LD_INT 22
10008: PUSH
10009: LD_INT 22
10011: PUSH
10012: LD_INT 24
10014: PUSH
10015: LD_INT 24
10017: PUSH
10018: EMPTY
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: PUSH
10024: LD_OWVAR 67
10028: ARRAY
10029: PUSH
10030: LD_INT 1
10032: PUSH
10033: LD_INT 3
10035: PUSH
10036: LD_INT 45
10038: PUSH
10039: EMPTY
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: PUSH
10045: EMPTY
10046: LIST
10047: LIST
10048: LIST
10049: ADD
10050: ST_TO_ADDR
// for i := Difficulty downto 1 do
10051: LD_ADDR_VAR 0 1
10055: PUSH
10056: DOUBLE
10057: LD_OWVAR 67
10061: INC
10062: ST_TO_ADDR
10063: LD_INT 1
10065: PUSH
10066: FOR_DOWNTO
10067: IFFALSE 10152
// ruConstructList := Join ( ruConstructList , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 4 ) ] ] ) ;
10069: LD_ADDR_EXP 70
10073: PUSH
10074: LD_EXP 70
10078: PPUSH
10079: LD_INT 22
10081: PUSH
10082: LD_INT 22
10084: PUSH
10085: LD_INT 24
10087: PUSH
10088: LD_INT 24
10090: PUSH
10091: EMPTY
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: PUSH
10097: LD_OWVAR 67
10101: ARRAY
10102: PUSH
10103: LD_INT 1
10105: PUSH
10106: LD_INT 3
10108: PUSH
10109: LD_INT 44
10111: PUSH
10112: LD_INT 45
10114: PUSH
10115: LD_INT 45
10117: PUSH
10118: LD_INT 43
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: PUSH
10127: LD_INT 1
10129: PPUSH
10130: LD_INT 4
10132: PPUSH
10133: CALL_OW 12
10137: ARRAY
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: PPUSH
10145: CALL 92306 0 2
10149: ST_TO_ADDR
10150: GO 10066
10152: POP
10153: POP
// end ;
10154: PPOPN 1
10156: END
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea2 , [ [ f_btype , b_factory ] , [ f_ok ] ] ) and Count ( ruBuildings2 ) < 3 do
10157: LD_EXP 67
10161: PPUSH
10162: LD_INT 30
10164: PUSH
10165: LD_INT 3
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 50
10174: PUSH
10175: EMPTY
10176: LIST
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PPUSH
10182: CALL_OW 70
10186: PUSH
10187: LD_EXP 77
10191: PPUSH
10192: CALL 56717 0 1
10196: PUSH
10197: LD_INT 3
10199: LESS
10200: AND
10201: IFFALSE 10396
10203: GO 10205
10205: DISABLE
// begin enable ;
10206: ENABLE
// ruConstructList2 := ruConstructList2 ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] ] ;
10207: LD_ADDR_EXP 71
10211: PUSH
10212: LD_EXP 71
10216: PUSH
10217: LD_INT 22
10219: PUSH
10220: LD_INT 22
10222: PUSH
10223: LD_INT 24
10225: PUSH
10226: LD_INT 24
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: PUSH
10235: LD_INT 1
10237: PPUSH
10238: LD_INT 4
10240: PPUSH
10241: CALL_OW 12
10245: ARRAY
10246: PUSH
10247: LD_INT 1
10249: PUSH
10250: LD_INT 3
10252: PUSH
10253: LD_INT 44
10255: PUSH
10256: LD_INT 45
10258: PUSH
10259: EMPTY
10260: LIST
10261: LIST
10262: PUSH
10263: LD_INT 1
10265: PPUSH
10266: LD_INT 2
10268: PPUSH
10269: CALL_OW 12
10273: ARRAY
10274: PUSH
10275: EMPTY
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: PUSH
10281: LD_INT 22
10283: PUSH
10284: LD_INT 22
10286: PUSH
10287: LD_INT 24
10289: PUSH
10290: LD_INT 24
10292: PUSH
10293: EMPTY
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: PUSH
10299: LD_INT 1
10301: PPUSH
10302: LD_INT 4
10304: PPUSH
10305: CALL_OW 12
10309: ARRAY
10310: PUSH
10311: LD_INT 1
10313: PUSH
10314: LD_INT 3
10316: PUSH
10317: LD_INT 45
10319: PUSH
10320: EMPTY
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: PUSH
10326: LD_INT 22
10328: PUSH
10329: LD_INT 22
10331: PUSH
10332: LD_INT 24
10334: PUSH
10335: LD_INT 24
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: LIST
10342: LIST
10343: PUSH
10344: LD_INT 1
10346: PPUSH
10347: LD_INT 4
10349: PPUSH
10350: CALL_OW 12
10354: ARRAY
10355: PUSH
10356: LD_INT 1
10358: PUSH
10359: LD_INT 3
10361: PUSH
10362: LD_INT 45
10364: PUSH
10365: EMPTY
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: PUSH
10371: LD_INT 22
10373: PUSH
10374: LD_INT 1
10376: PUSH
10377: LD_INT 3
10379: PUSH
10380: LD_INT 43
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: LIST
10393: LIST
10394: ADD
10395: ST_TO_ADDR
// end ;
10396: END
// export function SpawnConvoy ; var i , tmp , spawn , area , path , place , point ; begin
10397: LD_INT 0
10399: PPUSH
10400: PPUSH
10401: PPUSH
10402: PPUSH
10403: PPUSH
10404: PPUSH
10405: PPUSH
10406: PPUSH
// case Difficulty of 1 :
10407: LD_OWVAR 67
10411: PUSH
10412: LD_INT 1
10414: DOUBLE
10415: EQUAL
10416: IFTRUE 10420
10418: GO 10439
10420: POP
// spawn := rand ( 1 , 2 ) ; 2 :
10421: LD_ADDR_VAR 0 4
10425: PUSH
10426: LD_INT 1
10428: PPUSH
10429: LD_INT 2
10431: PPUSH
10432: CALL_OW 12
10436: ST_TO_ADDR
10437: GO 10513
10439: LD_INT 2
10441: DOUBLE
10442: EQUAL
10443: IFTRUE 10447
10445: GO 10466
10447: POP
// spawn := rand ( 1 , 3 ) ; 3 :
10448: LD_ADDR_VAR 0 4
10452: PUSH
10453: LD_INT 1
10455: PPUSH
10456: LD_INT 3
10458: PPUSH
10459: CALL_OW 12
10463: ST_TO_ADDR
10464: GO 10513
10466: LD_INT 3
10468: DOUBLE
10469: EQUAL
10470: IFTRUE 10474
10472: GO 10493
10474: POP
// spawn := rand ( 2 , 3 ) ; 4 :
10475: LD_ADDR_VAR 0 4
10479: PUSH
10480: LD_INT 2
10482: PPUSH
10483: LD_INT 3
10485: PPUSH
10486: CALL_OW 12
10490: ST_TO_ADDR
10491: GO 10513
10493: LD_INT 4
10495: DOUBLE
10496: EQUAL
10497: IFTRUE 10501
10499: GO 10512
10501: POP
// spawn := 3 ; end ;
10502: LD_ADDR_VAR 0 4
10506: PUSH
10507: LD_INT 3
10509: ST_TO_ADDR
10510: GO 10513
10512: POP
// path := [ centerPathArea , westPathArea , eastPathArea ] [ spawn ] ;
10513: LD_ADDR_VAR 0 6
10517: PUSH
10518: LD_INT 24
10520: PUSH
10521: LD_INT 25
10523: PUSH
10524: LD_INT 23
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: LIST
10531: PUSH
10532: LD_VAR 0 4
10536: ARRAY
10537: ST_TO_ADDR
// area := [ ruSpawnCenterArea , ruSpawnWestArea , ruSpawnEastArea ] [ spawn ] ;
10538: LD_ADDR_VAR 0 5
10542: PUSH
10543: LD_INT 21
10545: PUSH
10546: LD_INT 22
10548: PUSH
10549: LD_INT 20
10551: PUSH
10552: EMPTY
10553: LIST
10554: LIST
10555: LIST
10556: PUSH
10557: LD_VAR 0 4
10561: ARRAY
10562: ST_TO_ADDR
// point := [ [ 96 , 102 ] , [ 54 , 85 ] , [ 146 , 67 ] ] [ spawn ] ;
10563: LD_ADDR_VAR 0 8
10567: PUSH
10568: LD_INT 96
10570: PUSH
10571: LD_INT 102
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: LD_INT 54
10580: PUSH
10581: LD_INT 85
10583: PUSH
10584: EMPTY
10585: LIST
10586: LIST
10587: PUSH
10588: LD_INT 146
10590: PUSH
10591: LD_INT 67
10593: PUSH
10594: EMPTY
10595: LIST
10596: LIST
10597: PUSH
10598: EMPTY
10599: LIST
10600: LIST
10601: LIST
10602: PUSH
10603: LD_VAR 0 4
10607: ARRAY
10608: ST_TO_ADDR
// for i in ruForces union ruCommander do
10609: LD_ADDR_VAR 0 2
10613: PUSH
10614: LD_EXP 59
10618: PUSH
10619: LD_EXP 61
10623: UNION
10624: PUSH
10625: FOR_IN
10626: IFFALSE 10681
// begin PlaceUnitArea ( i , area , false ) ;
10628: LD_VAR 0 2
10632: PPUSH
10633: LD_VAR 0 5
10637: PPUSH
10638: LD_INT 0
10640: PPUSH
10641: CALL_OW 49
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
10645: LD_VAR 0 2
10649: PPUSH
10650: LD_VAR 0 8
10654: PUSH
10655: LD_INT 1
10657: ARRAY
10658: PPUSH
10659: LD_VAR 0 8
10663: PUSH
10664: LD_INT 2
10666: ARRAY
10667: PPUSH
10668: CALL_OW 111
// wait ( 0 0$0.4 ) ;
10672: LD_INT 14
10674: PPUSH
10675: CALL_OW 67
// end ;
10679: GO 10625
10681: POP
10682: POP
// DRussianConvoy ;
10683: CALL 28498 0 0
// spawnedRussians := true ;
10687: LD_ADDR_EXP 19
10691: PUSH
10692: LD_INT 1
10694: ST_TO_ADDR
// RevealFogArea ( 1 , path ) ;
10695: LD_INT 1
10697: PPUSH
10698: LD_VAR 0 6
10702: PPUSH
10703: CALL_OW 332
// case spawn of 1 :
10707: LD_VAR 0 4
10711: PUSH
10712: LD_INT 1
10714: DOUBLE
10715: EQUAL
10716: IFTRUE 10720
10718: GO 10730
10720: POP
// RaiseSailEvent ( ERussianBaseC ) ; 2 :
10721: LD_INT 102
10723: PPUSH
10724: CALL_OW 427
10728: GO 10767
10730: LD_INT 2
10732: DOUBLE
10733: EQUAL
10734: IFTRUE 10738
10736: GO 10748
10738: POP
// RaiseSailEvent ( ERussianBaseW ) ; 3 :
10739: LD_INT 103
10741: PPUSH
10742: CALL_OW 427
10746: GO 10767
10748: LD_INT 3
10750: DOUBLE
10751: EQUAL
10752: IFTRUE 10756
10754: GO 10766
10756: POP
// RaiseSailEvent ( ERussianBaseE ) ; end ;
10757: LD_INT 104
10759: PPUSH
10760: CALL_OW 427
10764: GO 10767
10766: POP
// if Difficulty < 4 then
10767: LD_OWVAR 67
10771: PUSH
10772: LD_INT 4
10774: LESS
10775: IFFALSE 10779
// exit ;
10777: GO 10856
// RevealFogArea ( 1 , ruSpawnWestArea ) ;
10779: LD_INT 1
10781: PPUSH
10782: LD_INT 22
10784: PPUSH
10785: CALL_OW 332
// for i in ruForces2 union ruCommander2 do
10789: LD_ADDR_VAR 0 2
10793: PUSH
10794: LD_EXP 60
10798: PUSH
10799: LD_EXP 62
10803: UNION
10804: PUSH
10805: FOR_IN
10806: IFFALSE 10847
// begin PlaceUnitArea ( i , ruSpawnWestArea , false ) ;
10808: LD_VAR 0 2
10812: PPUSH
10813: LD_INT 22
10815: PPUSH
10816: LD_INT 0
10818: PPUSH
10819: CALL_OW 49
// ComAgressiveMove ( i , 54 , 85 ) ;
10823: LD_VAR 0 2
10827: PPUSH
10828: LD_INT 54
10830: PPUSH
10831: LD_INT 85
10833: PPUSH
10834: CALL_OW 114
// wait ( 0 0$0.8 ) ;
10838: LD_INT 28
10840: PPUSH
10841: CALL_OW 67
// end ;
10845: GO 10805
10847: POP
10848: POP
// RaiseSailEvent ( ERussianBaseW2 ) ;
10849: LD_INT 105
10851: PPUSH
10852: CALL_OW 427
// end ;
10856: LD_VAR 0 1
10860: RET
// export function RussianBase ( group , option ) ; begin
10861: LD_INT 0
10863: PPUSH
// case option of 1 :
10864: LD_VAR 0 2
10868: PUSH
10869: LD_INT 1
10871: DOUBLE
10872: EQUAL
10873: IFTRUE 10877
10875: GO 11333
10877: POP
// begin ruBaseArea := ruBaseCenterArea ;
10878: LD_ADDR_EXP 66
10882: PUSH
10883: LD_INT 26
10885: ST_TO_ADDR
// ruCratesArea := ruBaseCenterArea ;
10886: LD_ADDR_EXP 72
10890: PUSH
10891: LD_INT 26
10893: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
10894: LD_ADDR_EXP 76
10898: PUSH
10899: LD_INT 0
10901: PUSH
10902: LD_INT 104
10904: PUSH
10905: LD_INT 110
10907: PUSH
10908: LD_INT 5
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 4
10919: PUSH
10920: LD_INT 98
10922: PUSH
10923: LD_INT 90
10925: PUSH
10926: LD_INT 3
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 29
10937: PUSH
10938: LD_INT 103
10940: PUSH
10941: LD_INT 114
10943: PUSH
10944: LD_INT 2
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 30
10955: PUSH
10956: LD_INT 99
10958: PUSH
10959: LD_INT 114
10961: PUSH
10962: LD_INT 3
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 28
10973: PUSH
10974: LD_INT 100
10976: PUSH
10977: LD_INT 112
10979: PUSH
10980: LD_INT 1
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 2
10991: PUSH
10992: LD_INT 92
10994: PUSH
10995: LD_INT 101
10997: PUSH
10998: LD_INT 0
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 26
11009: PUSH
11010: LD_INT 97
11012: PUSH
11013: LD_INT 116
11015: PUSH
11016: LD_INT 5
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: PUSH
11025: LD_INT 17
11027: PUSH
11028: LD_INT 96
11030: PUSH
11031: LD_INT 101
11033: PUSH
11034: LD_INT 4
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 18
11045: PUSH
11046: LD_INT 88
11048: PUSH
11049: LD_INT 97
11051: PUSH
11052: LD_INT 2
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: PUSH
11061: LD_INT 26
11063: PUSH
11064: LD_INT 106
11066: PUSH
11067: LD_INT 92
11069: PUSH
11070: LD_INT 2
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: PUSH
11079: LD_INT 6
11081: PUSH
11082: LD_INT 93
11084: PUSH
11085: LD_INT 110
11087: PUSH
11088: LD_INT 0
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 21
11099: PUSH
11100: LD_INT 89
11102: PUSH
11103: LD_INT 101
11105: PUSH
11106: LD_INT 1
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: PUSH
11115: LD_INT 16
11117: PUSH
11118: LD_INT 95
11120: PUSH
11121: LD_INT 104
11123: PUSH
11124: LD_INT 4
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: PUSH
11133: LD_INT 24
11135: PUSH
11136: LD_INT 92
11138: PUSH
11139: LD_INT 105
11141: PUSH
11142: LD_INT 0
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 33
11153: PUSH
11154: LD_INT 88
11156: PUSH
11157: LD_INT 89
11159: PUSH
11160: LD_INT 2
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 33
11171: PUSH
11172: LD_INT 86
11174: PUSH
11175: LD_INT 90
11177: PUSH
11178: LD_INT 2
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: PUSH
11187: LD_INT 33
11189: PUSH
11190: LD_INT 85
11192: PUSH
11193: LD_INT 99
11195: PUSH
11196: LD_INT 2
11198: PUSH
11199: EMPTY
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: PUSH
11205: LD_INT 33
11207: PUSH
11208: LD_INT 85
11210: PUSH
11211: LD_INT 107
11213: PUSH
11214: LD_INT 1
11216: PUSH
11217: EMPTY
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: PUSH
11223: LD_INT 33
11225: PUSH
11226: LD_INT 105
11228: PUSH
11229: LD_INT 99
11231: PUSH
11232: LD_INT 1
11234: PUSH
11235: EMPTY
11236: LIST
11237: LIST
11238: LIST
11239: LIST
11240: PUSH
11241: LD_INT 33
11243: PUSH
11244: LD_INT 102
11246: PUSH
11247: LD_INT 92
11249: PUSH
11250: LD_INT 3
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: PUSH
11259: LD_INT 33
11261: PUSH
11262: LD_INT 105
11264: PUSH
11265: LD_INT 92
11267: PUSH
11268: LD_INT 2
11270: PUSH
11271: EMPTY
11272: LIST
11273: LIST
11274: LIST
11275: LIST
11276: PUSH
11277: EMPTY
11278: LIST
11279: LIST
11280: LIST
11281: LIST
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: ST_TO_ADDR
// ruHealPoint := [ 98 , 107 ] ;
11300: LD_ADDR_EXP 74
11304: PUSH
11305: LD_INT 98
11307: PUSH
11308: LD_INT 107
11310: PUSH
11311: EMPTY
11312: LIST
11313: LIST
11314: ST_TO_ADDR
// ruParkingArea := ruParkingCenterArea ;
11315: LD_ADDR_EXP 82
11319: PUSH
11320: LD_INT 30
11322: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnCenterArea ;
11323: LD_ADDR_EXP 84
11327: PUSH
11328: LD_INT 36
11330: ST_TO_ADDR
// end ; 2 :
11331: GO 12357
11333: LD_INT 2
11335: DOUBLE
11336: EQUAL
11337: IFTRUE 11341
11339: GO 11835
11341: POP
// begin ruBaseArea := ruBaseWestArea ;
11342: LD_ADDR_EXP 66
11346: PUSH
11347: LD_INT 28
11349: ST_TO_ADDR
// ruCratesArea := ruBaseWestArea ;
11350: LD_ADDR_EXP 72
11354: PUSH
11355: LD_INT 28
11357: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
11358: LD_ADDR_EXP 76
11362: PUSH
11363: LD_INT 0
11365: PUSH
11366: LD_INT 49
11368: PUSH
11369: LD_INT 74
11371: PUSH
11372: LD_INT 3
11374: PUSH
11375: EMPTY
11376: LIST
11377: LIST
11378: LIST
11379: LIST
11380: PUSH
11381: LD_INT 4
11383: PUSH
11384: LD_INT 73
11386: PUSH
11387: LD_INT 88
11389: PUSH
11390: LD_INT 5
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: LIST
11397: LIST
11398: PUSH
11399: LD_INT 4
11401: PUSH
11402: LD_INT 56
11404: PUSH
11405: LD_INT 62
11407: PUSH
11408: LD_INT 3
11410: PUSH
11411: EMPTY
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: PUSH
11417: LD_INT 29
11419: PUSH
11420: LD_INT 43
11422: PUSH
11423: LD_INT 68
11425: PUSH
11426: LD_INT 2
11428: PUSH
11429: EMPTY
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: PUSH
11435: LD_INT 30
11437: PUSH
11438: LD_INT 43
11440: PUSH
11441: LD_INT 79
11443: PUSH
11444: LD_INT 5
11446: PUSH
11447: EMPTY
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: PUSH
11453: LD_INT 28
11455: PUSH
11456: LD_INT 60
11458: PUSH
11459: LD_INT 75
11461: PUSH
11462: LD_INT 1
11464: PUSH
11465: EMPTY
11466: LIST
11467: LIST
11468: LIST
11469: LIST
11470: PUSH
11471: LD_INT 2
11473: PUSH
11474: LD_INT 50
11476: PUSH
11477: LD_INT 87
11479: PUSH
11480: LD_INT 1
11482: PUSH
11483: EMPTY
11484: LIST
11485: LIST
11486: LIST
11487: LIST
11488: PUSH
11489: LD_INT 26
11491: PUSH
11492: LD_INT 45
11494: PUSH
11495: LD_INT 67
11497: PUSH
11498: LD_INT 2
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: PUSH
11507: LD_INT 17
11509: PUSH
11510: LD_INT 47
11512: PUSH
11513: LD_INT 84
11515: PUSH
11516: LD_INT 2
11518: PUSH
11519: EMPTY
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: PUSH
11525: LD_INT 18
11527: PUSH
11528: LD_INT 46
11530: PUSH
11531: LD_INT 87
11533: PUSH
11534: LD_INT 1
11536: PUSH
11537: EMPTY
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: PUSH
11543: LD_INT 26
11545: PUSH
11546: LD_INT 41
11548: PUSH
11549: LD_INT 64
11551: PUSH
11552: LD_INT 5
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: PUSH
11561: LD_INT 6
11563: PUSH
11564: LD_INT 42
11566: PUSH
11567: LD_INT 74
11569: PUSH
11570: LD_INT 1
11572: PUSH
11573: EMPTY
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: PUSH
11579: LD_INT 21
11581: PUSH
11582: LD_INT 54
11584: PUSH
11585: LD_INT 91
11587: PUSH
11588: LD_INT 5
11590: PUSH
11591: EMPTY
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: PUSH
11597: LD_INT 16
11599: PUSH
11600: LD_INT 50
11602: PUSH
11603: LD_INT 83
11605: PUSH
11606: LD_INT 3
11608: PUSH
11609: EMPTY
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: PUSH
11615: LD_INT 24
11617: PUSH
11618: LD_INT 50
11620: PUSH
11621: LD_INT 90
11623: PUSH
11624: LD_INT 0
11626: PUSH
11627: EMPTY
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: PUSH
11633: LD_INT 33
11635: PUSH
11636: LD_INT 51
11638: PUSH
11639: LD_INT 61
11641: PUSH
11642: LD_INT 3
11644: PUSH
11645: EMPTY
11646: LIST
11647: LIST
11648: LIST
11649: LIST
11650: PUSH
11651: LD_INT 33
11653: PUSH
11654: LD_INT 42
11656: PUSH
11657: LD_INT 60
11659: PUSH
11660: LD_INT 3
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: PUSH
11669: LD_INT 33
11671: PUSH
11672: LD_INT 36
11674: PUSH
11675: LD_INT 58
11677: PUSH
11678: LD_INT 3
11680: PUSH
11681: EMPTY
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: PUSH
11687: LD_INT 33
11689: PUSH
11690: LD_INT 39
11692: PUSH
11693: LD_INT 59
11695: PUSH
11696: LD_INT 3
11698: PUSH
11699: EMPTY
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: PUSH
11705: LD_INT 33
11707: PUSH
11708: LD_INT 61
11710: PUSH
11711: LD_INT 64
11713: PUSH
11714: LD_INT 3
11716: PUSH
11717: EMPTY
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: PUSH
11723: LD_INT 33
11725: PUSH
11726: LD_INT 63
11728: PUSH
11729: LD_INT 90
11731: PUSH
11732: LD_INT 5
11734: PUSH
11735: EMPTY
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: PUSH
11741: LD_INT 33
11743: PUSH
11744: LD_INT 64
11746: PUSH
11747: LD_INT 88
11749: PUSH
11750: LD_INT 5
11752: PUSH
11753: EMPTY
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: PUSH
11759: LD_INT 33
11761: PUSH
11762: LD_INT 72
11764: PUSH
11765: LD_INT 82
11767: PUSH
11768: LD_INT 5
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: PUSH
11777: EMPTY
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
11802: LD_ADDR_EXP 74
11806: PUSH
11807: LD_INT 45
11809: PUSH
11810: LD_INT 75
11812: PUSH
11813: EMPTY
11814: LIST
11815: LIST
11816: ST_TO_ADDR
// ruParkingArea := ruParkingWestArea ;
11817: LD_ADDR_EXP 82
11821: PUSH
11822: LD_INT 31
11824: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnWestArea ;
11825: LD_ADDR_EXP 84
11829: PUSH
11830: LD_INT 37
11832: ST_TO_ADDR
// end ; 3 :
11833: GO 12357
11835: LD_INT 3
11837: DOUBLE
11838: EQUAL
11839: IFTRUE 11843
11841: GO 12356
11843: POP
// begin ruBaseArea := ruBaseEastArea ;
11844: LD_ADDR_EXP 66
11848: PUSH
11849: LD_INT 27
11851: ST_TO_ADDR
// ruCratesArea := ruBaseEastArea ;
11852: LD_ADDR_EXP 72
11856: PUSH
11857: LD_INT 27
11859: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] , [ b_turret , 158 , 65 , 3 ] , [ b_turret , 144 , 53 , 2 ] , [ b_turret , 150 , 81 , 1 ] ] ;
11860: LD_ADDR_EXP 76
11864: PUSH
11865: LD_INT 0
11867: PUSH
11868: LD_INT 152
11870: PUSH
11871: LD_INT 72
11873: PUSH
11874: LD_INT 4
11876: PUSH
11877: EMPTY
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: PUSH
11883: LD_INT 4
11885: PUSH
11886: LD_INT 139
11888: PUSH
11889: LD_INT 69
11891: PUSH
11892: LD_INT 1
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: PUSH
11901: LD_INT 4
11903: PUSH
11904: LD_INT 142
11906: PUSH
11907: LD_INT 56
11909: PUSH
11910: LD_INT 2
11912: PUSH
11913: EMPTY
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: PUSH
11919: LD_INT 29
11921: PUSH
11922: LD_INT 152
11924: PUSH
11925: LD_INT 85
11927: PUSH
11928: LD_INT 3
11930: PUSH
11931: EMPTY
11932: LIST
11933: LIST
11934: LIST
11935: LIST
11936: PUSH
11937: LD_INT 30
11939: PUSH
11940: LD_INT 156
11942: PUSH
11943: LD_INT 92
11945: PUSH
11946: LD_INT 3
11948: PUSH
11949: EMPTY
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: PUSH
11955: LD_INT 28
11957: PUSH
11958: LD_INT 157
11960: PUSH
11961: LD_INT 96
11963: PUSH
11964: LD_INT 4
11966: PUSH
11967: EMPTY
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: PUSH
11973: LD_INT 2
11975: PUSH
11976: LD_INT 161
11978: PUSH
11979: LD_INT 74
11981: PUSH
11982: LD_INT 5
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: LIST
11989: LIST
11990: PUSH
11991: LD_INT 21
11993: PUSH
11994: LD_INT 157
11996: PUSH
11997: LD_INT 74
11999: PUSH
12000: LD_INT 1
12002: PUSH
12003: EMPTY
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: PUSH
12009: LD_INT 16
12011: PUSH
12012: LD_INT 161
12014: PUSH
12015: LD_INT 77
12017: PUSH
12018: LD_INT 0
12020: PUSH
12021: EMPTY
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: PUSH
12027: LD_INT 24
12029: PUSH
12030: LD_INT 165
12032: PUSH
12033: LD_INT 78
12035: PUSH
12036: LD_INT 5
12038: PUSH
12039: EMPTY
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: PUSH
12045: LD_INT 17
12047: PUSH
12048: LD_INT 164
12050: PUSH
12051: LD_INT 74
12053: PUSH
12054: LD_INT 4
12056: PUSH
12057: EMPTY
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: PUSH
12063: LD_INT 6
12065: PUSH
12066: LD_INT 164
12068: PUSH
12069: LD_INT 95
12071: PUSH
12072: LD_INT 5
12074: PUSH
12075: EMPTY
12076: LIST
12077: LIST
12078: LIST
12079: LIST
12080: PUSH
12081: LD_INT 18
12083: PUSH
12084: LD_INT 161
12086: PUSH
12087: LD_INT 70
12089: PUSH
12090: LD_INT 3
12092: PUSH
12093: EMPTY
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: PUSH
12099: LD_INT 26
12101: PUSH
12102: LD_INT 155
12104: PUSH
12105: LD_INT 87
12107: PUSH
12108: LD_INT 0
12110: PUSH
12111: EMPTY
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: PUSH
12117: LD_INT 26
12119: PUSH
12120: LD_INT 159
12122: PUSH
12123: LD_INT 95
12125: PUSH
12126: LD_INT 3
12128: PUSH
12129: EMPTY
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: PUSH
12135: LD_INT 26
12137: PUSH
12138: LD_INT 167
12140: PUSH
12141: LD_INT 98
12143: PUSH
12144: LD_INT 1
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: LIST
12151: LIST
12152: PUSH
12153: LD_INT 33
12155: PUSH
12156: LD_INT 152
12158: PUSH
12159: LD_INT 89
12161: PUSH
12162: LD_INT 1
12164: PUSH
12165: EMPTY
12166: LIST
12167: LIST
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 33
12173: PUSH
12174: LD_INT 134
12176: PUSH
12177: LD_INT 61
12179: PUSH
12180: LD_INT 2
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: PUSH
12189: LD_INT 33
12191: PUSH
12192: LD_INT 156
12194: PUSH
12195: LD_INT 62
12197: PUSH
12198: LD_INT 3
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: PUSH
12207: LD_INT 33
12209: PUSH
12210: LD_INT 171
12212: PUSH
12213: LD_INT 97
12215: PUSH
12216: LD_INT 5
12218: PUSH
12219: EMPTY
12220: LIST
12221: LIST
12222: LIST
12223: LIST
12224: PUSH
12225: LD_INT 33
12227: PUSH
12228: LD_INT 169
12230: PUSH
12231: LD_INT 103
12233: PUSH
12234: LD_INT 5
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: PUSH
12243: LD_INT 33
12245: PUSH
12246: LD_INT 158
12248: PUSH
12249: LD_INT 65
12251: PUSH
12252: LD_INT 3
12254: PUSH
12255: EMPTY
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: PUSH
12261: LD_INT 33
12263: PUSH
12264: LD_INT 144
12266: PUSH
12267: LD_INT 53
12269: PUSH
12270: LD_INT 2
12272: PUSH
12273: EMPTY
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: PUSH
12279: LD_INT 33
12281: PUSH
12282: LD_INT 150
12284: PUSH
12285: LD_INT 81
12287: PUSH
12288: LD_INT 1
12290: PUSH
12291: EMPTY
12292: LIST
12293: LIST
12294: LIST
12295: LIST
12296: PUSH
12297: EMPTY
12298: LIST
12299: LIST
12300: LIST
12301: LIST
12302: LIST
12303: LIST
12304: LIST
12305: LIST
12306: LIST
12307: LIST
12308: LIST
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: LIST
12314: LIST
12315: LIST
12316: LIST
12317: LIST
12318: LIST
12319: LIST
12320: LIST
12321: LIST
12322: ST_TO_ADDR
// ruHealPoint := [ 145 , 71 ] ;
12323: LD_ADDR_EXP 74
12327: PUSH
12328: LD_INT 145
12330: PUSH
12331: LD_INT 71
12333: PUSH
12334: EMPTY
12335: LIST
12336: LIST
12337: ST_TO_ADDR
// ruParkingArea := ruParkingEastArea ;
12338: LD_ADDR_EXP 82
12342: PUSH
12343: LD_INT 29
12345: ST_TO_ADDR
// ruCratesSpawnArea := ruCratesSpawnEastArea ;
12346: LD_ADDR_EXP 84
12350: PUSH
12351: LD_INT 35
12353: ST_TO_ADDR
// end ; end ;
12354: GO 12357
12356: POP
// ruScriptActive := true ;
12357: LD_ADDR_EXP 14
12361: PUSH
12362: LD_INT 1
12364: ST_TO_ADDR
// end ;
12365: LD_VAR 0 3
12369: RET
// export function RussianBase2 ( group , option ) ; begin
12370: LD_INT 0
12372: PPUSH
// case option of 1 :
12373: LD_VAR 0 2
12377: PUSH
12378: LD_INT 1
12380: DOUBLE
12381: EQUAL
12382: IFTRUE 12386
12384: GO 12842
12386: POP
// begin ruBaseArea2 := ruBaseCenterArea ;
12387: LD_ADDR_EXP 67
12391: PUSH
12392: LD_INT 26
12394: ST_TO_ADDR
// ruCratesArea2 := ruBaseCenterArea ;
12395: LD_ADDR_EXP 73
12399: PUSH
12400: LD_INT 26
12402: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
12403: LD_ADDR_EXP 77
12407: PUSH
12408: LD_INT 0
12410: PUSH
12411: LD_INT 104
12413: PUSH
12414: LD_INT 110
12416: PUSH
12417: LD_INT 5
12419: PUSH
12420: EMPTY
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: PUSH
12426: LD_INT 4
12428: PUSH
12429: LD_INT 98
12431: PUSH
12432: LD_INT 90
12434: PUSH
12435: LD_INT 3
12437: PUSH
12438: EMPTY
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: PUSH
12444: LD_INT 29
12446: PUSH
12447: LD_INT 103
12449: PUSH
12450: LD_INT 114
12452: PUSH
12453: LD_INT 2
12455: PUSH
12456: EMPTY
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 30
12464: PUSH
12465: LD_INT 99
12467: PUSH
12468: LD_INT 114
12470: PUSH
12471: LD_INT 3
12473: PUSH
12474: EMPTY
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: PUSH
12480: LD_INT 28
12482: PUSH
12483: LD_INT 100
12485: PUSH
12486: LD_INT 112
12488: PUSH
12489: LD_INT 1
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: LIST
12496: LIST
12497: PUSH
12498: LD_INT 2
12500: PUSH
12501: LD_INT 92
12503: PUSH
12504: LD_INT 101
12506: PUSH
12507: LD_INT 0
12509: PUSH
12510: EMPTY
12511: LIST
12512: LIST
12513: LIST
12514: LIST
12515: PUSH
12516: LD_INT 26
12518: PUSH
12519: LD_INT 97
12521: PUSH
12522: LD_INT 116
12524: PUSH
12525: LD_INT 5
12527: PUSH
12528: EMPTY
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: PUSH
12534: LD_INT 17
12536: PUSH
12537: LD_INT 96
12539: PUSH
12540: LD_INT 101
12542: PUSH
12543: LD_INT 4
12545: PUSH
12546: EMPTY
12547: LIST
12548: LIST
12549: LIST
12550: LIST
12551: PUSH
12552: LD_INT 18
12554: PUSH
12555: LD_INT 88
12557: PUSH
12558: LD_INT 97
12560: PUSH
12561: LD_INT 2
12563: PUSH
12564: EMPTY
12565: LIST
12566: LIST
12567: LIST
12568: LIST
12569: PUSH
12570: LD_INT 26
12572: PUSH
12573: LD_INT 106
12575: PUSH
12576: LD_INT 92
12578: PUSH
12579: LD_INT 2
12581: PUSH
12582: EMPTY
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: PUSH
12588: LD_INT 6
12590: PUSH
12591: LD_INT 93
12593: PUSH
12594: LD_INT 110
12596: PUSH
12597: LD_INT 0
12599: PUSH
12600: EMPTY
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: PUSH
12606: LD_INT 21
12608: PUSH
12609: LD_INT 89
12611: PUSH
12612: LD_INT 101
12614: PUSH
12615: LD_INT 1
12617: PUSH
12618: EMPTY
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: PUSH
12624: LD_INT 16
12626: PUSH
12627: LD_INT 95
12629: PUSH
12630: LD_INT 104
12632: PUSH
12633: LD_INT 4
12635: PUSH
12636: EMPTY
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: PUSH
12642: LD_INT 24
12644: PUSH
12645: LD_INT 92
12647: PUSH
12648: LD_INT 105
12650: PUSH
12651: LD_INT 0
12653: PUSH
12654: EMPTY
12655: LIST
12656: LIST
12657: LIST
12658: LIST
12659: PUSH
12660: LD_INT 33
12662: PUSH
12663: LD_INT 88
12665: PUSH
12666: LD_INT 89
12668: PUSH
12669: LD_INT 2
12671: PUSH
12672: EMPTY
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: PUSH
12678: LD_INT 33
12680: PUSH
12681: LD_INT 86
12683: PUSH
12684: LD_INT 90
12686: PUSH
12687: LD_INT 2
12689: PUSH
12690: EMPTY
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: PUSH
12696: LD_INT 33
12698: PUSH
12699: LD_INT 85
12701: PUSH
12702: LD_INT 99
12704: PUSH
12705: LD_INT 2
12707: PUSH
12708: EMPTY
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 33
12716: PUSH
12717: LD_INT 85
12719: PUSH
12720: LD_INT 107
12722: PUSH
12723: LD_INT 1
12725: PUSH
12726: EMPTY
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: PUSH
12732: LD_INT 33
12734: PUSH
12735: LD_INT 105
12737: PUSH
12738: LD_INT 99
12740: PUSH
12741: LD_INT 1
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: PUSH
12750: LD_INT 33
12752: PUSH
12753: LD_INT 102
12755: PUSH
12756: LD_INT 92
12758: PUSH
12759: LD_INT 3
12761: PUSH
12762: EMPTY
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: PUSH
12768: LD_INT 33
12770: PUSH
12771: LD_INT 105
12773: PUSH
12774: LD_INT 92
12776: PUSH
12777: LD_INT 2
12779: PUSH
12780: EMPTY
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: PUSH
12786: EMPTY
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: LIST
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: ST_TO_ADDR
// ruHealPoint2 := [ 98 , 107 ] ;
12809: LD_ADDR_EXP 75
12813: PUSH
12814: LD_INT 98
12816: PUSH
12817: LD_INT 107
12819: PUSH
12820: EMPTY
12821: LIST
12822: LIST
12823: ST_TO_ADDR
// ruParkingArea2 := ruParkingCenterArea ;
12824: LD_ADDR_EXP 83
12828: PUSH
12829: LD_INT 30
12831: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnCenterArea ;
12832: LD_ADDR_EXP 85
12836: PUSH
12837: LD_INT 36
12839: ST_TO_ADDR
// end ; 2 :
12840: GO 13809
12842: LD_INT 2
12844: DOUBLE
12845: EQUAL
12846: IFTRUE 12850
12848: GO 13344
12850: POP
// begin ruBaseArea2 := ruBaseWestArea ;
12851: LD_ADDR_EXP 67
12855: PUSH
12856: LD_INT 28
12858: ST_TO_ADDR
// ruCratesArea2 := ruBaseWestArea ;
12859: LD_ADDR_EXP 73
12863: PUSH
12864: LD_INT 28
12866: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
12867: LD_ADDR_EXP 77
12871: PUSH
12872: LD_INT 0
12874: PUSH
12875: LD_INT 49
12877: PUSH
12878: LD_INT 74
12880: PUSH
12881: LD_INT 3
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 4
12892: PUSH
12893: LD_INT 73
12895: PUSH
12896: LD_INT 88
12898: PUSH
12899: LD_INT 5
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 4
12910: PUSH
12911: LD_INT 56
12913: PUSH
12914: LD_INT 62
12916: PUSH
12917: LD_INT 3
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 29
12928: PUSH
12929: LD_INT 43
12931: PUSH
12932: LD_INT 68
12934: PUSH
12935: LD_INT 2
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 30
12946: PUSH
12947: LD_INT 43
12949: PUSH
12950: LD_INT 79
12952: PUSH
12953: LD_INT 5
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 28
12964: PUSH
12965: LD_INT 60
12967: PUSH
12968: LD_INT 75
12970: PUSH
12971: LD_INT 1
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 2
12982: PUSH
12983: LD_INT 50
12985: PUSH
12986: LD_INT 87
12988: PUSH
12989: LD_INT 1
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 26
13000: PUSH
13001: LD_INT 45
13003: PUSH
13004: LD_INT 67
13006: PUSH
13007: LD_INT 2
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: PUSH
13016: LD_INT 17
13018: PUSH
13019: LD_INT 47
13021: PUSH
13022: LD_INT 84
13024: PUSH
13025: LD_INT 2
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: PUSH
13034: LD_INT 18
13036: PUSH
13037: LD_INT 46
13039: PUSH
13040: LD_INT 87
13042: PUSH
13043: LD_INT 1
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: LIST
13050: LIST
13051: PUSH
13052: LD_INT 26
13054: PUSH
13055: LD_INT 41
13057: PUSH
13058: LD_INT 64
13060: PUSH
13061: LD_INT 5
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: PUSH
13070: LD_INT 6
13072: PUSH
13073: LD_INT 42
13075: PUSH
13076: LD_INT 74
13078: PUSH
13079: LD_INT 1
13081: PUSH
13082: EMPTY
13083: LIST
13084: LIST
13085: LIST
13086: LIST
13087: PUSH
13088: LD_INT 21
13090: PUSH
13091: LD_INT 54
13093: PUSH
13094: LD_INT 91
13096: PUSH
13097: LD_INT 5
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: PUSH
13106: LD_INT 16
13108: PUSH
13109: LD_INT 50
13111: PUSH
13112: LD_INT 83
13114: PUSH
13115: LD_INT 3
13117: PUSH
13118: EMPTY
13119: LIST
13120: LIST
13121: LIST
13122: LIST
13123: PUSH
13124: LD_INT 24
13126: PUSH
13127: LD_INT 50
13129: PUSH
13130: LD_INT 90
13132: PUSH
13133: LD_INT 0
13135: PUSH
13136: EMPTY
13137: LIST
13138: LIST
13139: LIST
13140: LIST
13141: PUSH
13142: LD_INT 33
13144: PUSH
13145: LD_INT 51
13147: PUSH
13148: LD_INT 61
13150: PUSH
13151: LD_INT 3
13153: PUSH
13154: EMPTY
13155: LIST
13156: LIST
13157: LIST
13158: LIST
13159: PUSH
13160: LD_INT 33
13162: PUSH
13163: LD_INT 42
13165: PUSH
13166: LD_INT 60
13168: PUSH
13169: LD_INT 3
13171: PUSH
13172: EMPTY
13173: LIST
13174: LIST
13175: LIST
13176: LIST
13177: PUSH
13178: LD_INT 33
13180: PUSH
13181: LD_INT 36
13183: PUSH
13184: LD_INT 58
13186: PUSH
13187: LD_INT 3
13189: PUSH
13190: EMPTY
13191: LIST
13192: LIST
13193: LIST
13194: LIST
13195: PUSH
13196: LD_INT 33
13198: PUSH
13199: LD_INT 39
13201: PUSH
13202: LD_INT 59
13204: PUSH
13205: LD_INT 3
13207: PUSH
13208: EMPTY
13209: LIST
13210: LIST
13211: LIST
13212: LIST
13213: PUSH
13214: LD_INT 33
13216: PUSH
13217: LD_INT 61
13219: PUSH
13220: LD_INT 64
13222: PUSH
13223: LD_INT 3
13225: PUSH
13226: EMPTY
13227: LIST
13228: LIST
13229: LIST
13230: LIST
13231: PUSH
13232: LD_INT 33
13234: PUSH
13235: LD_INT 63
13237: PUSH
13238: LD_INT 90
13240: PUSH
13241: LD_INT 5
13243: PUSH
13244: EMPTY
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: PUSH
13250: LD_INT 33
13252: PUSH
13253: LD_INT 64
13255: PUSH
13256: LD_INT 88
13258: PUSH
13259: LD_INT 5
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 33
13270: PUSH
13271: LD_INT 72
13273: PUSH
13274: LD_INT 82
13276: PUSH
13277: LD_INT 5
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: LIST
13290: LIST
13291: LIST
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: LIST
13304: LIST
13305: LIST
13306: LIST
13307: LIST
13308: LIST
13309: LIST
13310: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
13311: LD_ADDR_EXP 74
13315: PUSH
13316: LD_INT 45
13318: PUSH
13319: LD_INT 75
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: ST_TO_ADDR
// ruParkingArea2 := ruParkingWestArea ;
13326: LD_ADDR_EXP 83
13330: PUSH
13331: LD_INT 31
13333: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnWestArea ;
13334: LD_ADDR_EXP 85
13338: PUSH
13339: LD_INT 37
13341: ST_TO_ADDR
// end ; 3 :
13342: GO 13809
13344: LD_INT 3
13346: DOUBLE
13347: EQUAL
13348: IFTRUE 13352
13350: GO 13808
13352: POP
// begin ruBaseArea2 := ruBaseEastArea ;
13353: LD_ADDR_EXP 67
13357: PUSH
13358: LD_INT 27
13360: ST_TO_ADDR
// ruCratesArea2 := ruBaseEastArea ;
13361: LD_ADDR_EXP 73
13365: PUSH
13366: LD_INT 27
13368: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] ] ;
13369: LD_ADDR_EXP 77
13373: PUSH
13374: LD_INT 0
13376: PUSH
13377: LD_INT 152
13379: PUSH
13380: LD_INT 72
13382: PUSH
13383: LD_INT 4
13385: PUSH
13386: EMPTY
13387: LIST
13388: LIST
13389: LIST
13390: LIST
13391: PUSH
13392: LD_INT 4
13394: PUSH
13395: LD_INT 139
13397: PUSH
13398: LD_INT 69
13400: PUSH
13401: LD_INT 1
13403: PUSH
13404: EMPTY
13405: LIST
13406: LIST
13407: LIST
13408: LIST
13409: PUSH
13410: LD_INT 4
13412: PUSH
13413: LD_INT 142
13415: PUSH
13416: LD_INT 56
13418: PUSH
13419: LD_INT 2
13421: PUSH
13422: EMPTY
13423: LIST
13424: LIST
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 29
13430: PUSH
13431: LD_INT 152
13433: PUSH
13434: LD_INT 85
13436: PUSH
13437: LD_INT 3
13439: PUSH
13440: EMPTY
13441: LIST
13442: LIST
13443: LIST
13444: LIST
13445: PUSH
13446: LD_INT 30
13448: PUSH
13449: LD_INT 156
13451: PUSH
13452: LD_INT 92
13454: PUSH
13455: LD_INT 3
13457: PUSH
13458: EMPTY
13459: LIST
13460: LIST
13461: LIST
13462: LIST
13463: PUSH
13464: LD_INT 28
13466: PUSH
13467: LD_INT 157
13469: PUSH
13470: LD_INT 96
13472: PUSH
13473: LD_INT 4
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: PUSH
13482: LD_INT 2
13484: PUSH
13485: LD_INT 161
13487: PUSH
13488: LD_INT 74
13490: PUSH
13491: LD_INT 5
13493: PUSH
13494: EMPTY
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: PUSH
13500: LD_INT 21
13502: PUSH
13503: LD_INT 157
13505: PUSH
13506: LD_INT 74
13508: PUSH
13509: LD_INT 1
13511: PUSH
13512: EMPTY
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: PUSH
13518: LD_INT 16
13520: PUSH
13521: LD_INT 161
13523: PUSH
13524: LD_INT 77
13526: PUSH
13527: LD_INT 0
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: LIST
13534: LIST
13535: PUSH
13536: LD_INT 24
13538: PUSH
13539: LD_INT 165
13541: PUSH
13542: LD_INT 78
13544: PUSH
13545: LD_INT 5
13547: PUSH
13548: EMPTY
13549: LIST
13550: LIST
13551: LIST
13552: LIST
13553: PUSH
13554: LD_INT 17
13556: PUSH
13557: LD_INT 164
13559: PUSH
13560: LD_INT 74
13562: PUSH
13563: LD_INT 4
13565: PUSH
13566: EMPTY
13567: LIST
13568: LIST
13569: LIST
13570: LIST
13571: PUSH
13572: LD_INT 6
13574: PUSH
13575: LD_INT 164
13577: PUSH
13578: LD_INT 95
13580: PUSH
13581: LD_INT 5
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 18
13592: PUSH
13593: LD_INT 161
13595: PUSH
13596: LD_INT 70
13598: PUSH
13599: LD_INT 3
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: PUSH
13608: LD_INT 26
13610: PUSH
13611: LD_INT 155
13613: PUSH
13614: LD_INT 87
13616: PUSH
13617: LD_INT 0
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 26
13628: PUSH
13629: LD_INT 159
13631: PUSH
13632: LD_INT 95
13634: PUSH
13635: LD_INT 3
13637: PUSH
13638: EMPTY
13639: LIST
13640: LIST
13641: LIST
13642: LIST
13643: PUSH
13644: LD_INT 26
13646: PUSH
13647: LD_INT 167
13649: PUSH
13650: LD_INT 98
13652: PUSH
13653: LD_INT 1
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: PUSH
13662: LD_INT 33
13664: PUSH
13665: LD_INT 152
13667: PUSH
13668: LD_INT 89
13670: PUSH
13671: LD_INT 1
13673: PUSH
13674: EMPTY
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: PUSH
13680: LD_INT 33
13682: PUSH
13683: LD_INT 134
13685: PUSH
13686: LD_INT 61
13688: PUSH
13689: LD_INT 2
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: PUSH
13698: LD_INT 33
13700: PUSH
13701: LD_INT 156
13703: PUSH
13704: LD_INT 62
13706: PUSH
13707: LD_INT 3
13709: PUSH
13710: EMPTY
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: PUSH
13716: LD_INT 33
13718: PUSH
13719: LD_INT 171
13721: PUSH
13722: LD_INT 97
13724: PUSH
13725: LD_INT 5
13727: PUSH
13728: EMPTY
13729: LIST
13730: LIST
13731: LIST
13732: LIST
13733: PUSH
13734: LD_INT 33
13736: PUSH
13737: LD_INT 169
13739: PUSH
13740: LD_INT 103
13742: PUSH
13743: LD_INT 5
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: LIST
13750: LIST
13751: PUSH
13752: EMPTY
13753: LIST
13754: LIST
13755: LIST
13756: LIST
13757: LIST
13758: LIST
13759: LIST
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: LIST
13765: LIST
13766: LIST
13767: LIST
13768: LIST
13769: LIST
13770: LIST
13771: LIST
13772: LIST
13773: LIST
13774: ST_TO_ADDR
// ruHealPoint2 := [ 145 , 71 ] ;
13775: LD_ADDR_EXP 75
13779: PUSH
13780: LD_INT 145
13782: PUSH
13783: LD_INT 71
13785: PUSH
13786: EMPTY
13787: LIST
13788: LIST
13789: ST_TO_ADDR
// ruParkingArea2 := ruParkingEastArea ;
13790: LD_ADDR_EXP 83
13794: PUSH
13795: LD_INT 29
13797: ST_TO_ADDR
// ruCratesSpawnArea2 := ruCratesSpawnEastArea ;
13798: LD_ADDR_EXP 85
13802: PUSH
13803: LD_INT 35
13805: ST_TO_ADDR
// end ; end ;
13806: GO 13809
13808: POP
// ruScriptActive2 := true ;
13809: LD_ADDR_EXP 15
13813: PUSH
13814: LD_INT 1
13816: ST_TO_ADDR
// end ;
13817: LD_VAR 0 3
13821: RET
// every 0 0$2 trigger ruScriptActive and Count ( ruForces ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
13822: LD_EXP 14
13826: PUSH
13827: LD_EXP 59
13831: PPUSH
13832: CALL 56717 0 1
13836: AND
13837: IFFALSE 16419
13839: GO 13841
13841: DISABLE
13842: LD_INT 0
13844: PPUSH
13845: PPUSH
13846: PPUSH
13847: PPUSH
13848: PPUSH
13849: PPUSH
13850: PPUSH
13851: PPUSH
13852: PPUSH
13853: PPUSH
13854: PPUSH
13855: PPUSH
13856: PPUSH
13857: PPUSH
13858: PPUSH
13859: PPUSH
// begin enable ;
13860: ENABLE
// if ruTech then
13861: LD_EXP 65
13865: IFFALSE 14019
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
13867: LD_ADDR_VAR 0 4
13871: PUSH
13872: LD_INT 22
13874: PUSH
13875: LD_INT 3
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: PUSH
13882: LD_INT 50
13884: PUSH
13885: EMPTY
13886: LIST
13887: PUSH
13888: LD_INT 2
13890: PUSH
13891: LD_INT 30
13893: PUSH
13894: LD_INT 6
13896: PUSH
13897: EMPTY
13898: LIST
13899: LIST
13900: PUSH
13901: LD_INT 30
13903: PUSH
13904: LD_INT 7
13906: PUSH
13907: EMPTY
13908: LIST
13909: LIST
13910: PUSH
13911: LD_INT 30
13913: PUSH
13914: LD_INT 8
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: LIST
13931: PPUSH
13932: CALL_OW 69
13936: ST_TO_ADDR
// if lab then
13937: LD_VAR 0 4
13941: IFFALSE 14019
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
13943: LD_VAR 0 4
13947: PUSH
13948: LD_INT 1
13950: ARRAY
13951: PPUSH
13952: CALL_OW 461
13956: PUSH
13957: LD_INT 2
13959: EQUAL
13960: IFFALSE 14019
// begin for i in ruTech do
13962: LD_ADDR_VAR 0 1
13966: PUSH
13967: LD_EXP 65
13971: PUSH
13972: FOR_IN
13973: IFFALSE 14017
// if CanBeResearched ( lab [ 1 ] , i ) then
13975: LD_VAR 0 4
13979: PUSH
13980: LD_INT 1
13982: ARRAY
13983: PPUSH
13984: LD_VAR 0 1
13988: PPUSH
13989: CALL_OW 430
13993: IFFALSE 14015
// begin ComResearch ( lab [ 1 ] , i ) ;
13995: LD_VAR 0 4
13999: PUSH
14000: LD_INT 1
14002: ARRAY
14003: PPUSH
14004: LD_VAR 0 1
14008: PPUSH
14009: CALL_OW 124
// break ;
14013: GO 14017
// end ;
14015: GO 13972
14017: POP
14018: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
14019: LD_ADDR_VAR 0 14
14023: PUSH
14024: LD_EXP 66
14028: PPUSH
14029: LD_INT 22
14031: PUSH
14032: LD_INT 3
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: LD_INT 30
14041: PUSH
14042: LD_INT 3
14044: PUSH
14045: EMPTY
14046: LIST
14047: LIST
14048: PUSH
14049: LD_INT 50
14051: PUSH
14052: EMPTY
14053: LIST
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: LIST
14059: PPUSH
14060: CALL_OW 70
14064: ST_TO_ADDR
// if fac then
14065: LD_VAR 0 14
14069: IFFALSE 14664
// begin if UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
14071: LD_EXP 63
14075: PPUSH
14076: LD_INT 3
14078: PUSH
14079: LD_INT 60
14081: PUSH
14082: EMPTY
14083: LIST
14084: PUSH
14085: EMPTY
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 3
14091: PUSH
14092: LD_INT 25
14094: PUSH
14095: LD_INT 3
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PUSH
14106: EMPTY
14107: LIST
14108: LIST
14109: PPUSH
14110: CALL_OW 72
14114: IFFALSE 14255
// begin for i in UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
14116: LD_ADDR_VAR 0 1
14120: PUSH
14121: LD_EXP 63
14125: PPUSH
14126: LD_INT 3
14128: PUSH
14129: LD_INT 60
14131: PUSH
14132: EMPTY
14133: LIST
14134: PUSH
14135: EMPTY
14136: LIST
14137: LIST
14138: PUSH
14139: LD_INT 3
14141: PUSH
14142: LD_INT 25
14144: PUSH
14145: LD_INT 3
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PUSH
14152: EMPTY
14153: LIST
14154: LIST
14155: PUSH
14156: EMPTY
14157: LIST
14158: LIST
14159: PPUSH
14160: CALL_OW 72
14164: PUSH
14165: FOR_IN
14166: IFFALSE 14253
// begin SetTag ( i , tMech ) ;
14168: LD_VAR 0 1
14172: PPUSH
14173: LD_INT 7
14175: PPUSH
14176: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
14180: LD_VAR 0 1
14184: PPUSH
14185: CALL_OW 310
14189: PUSH
14190: LD_VAR 0 1
14194: PPUSH
14195: CALL_OW 310
14199: PUSH
14200: LD_VAR 0 14
14204: PUSH
14205: LD_INT 1
14207: ARRAY
14208: NONEQUAL
14209: AND
14210: IFFALSE 14221
// ComExitBuilding ( i ) ;
14212: LD_VAR 0 1
14216: PPUSH
14217: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
14221: LD_VAR 0 1
14225: PPUSH
14226: LD_VAR 0 14
14230: PUSH
14231: LD_INT 1
14233: ARRAY
14234: PPUSH
14235: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
14239: LD_VAR 0 1
14243: PPUSH
14244: LD_INT 3
14246: PPUSH
14247: CALL_OW 183
// end ;
14251: GO 14165
14253: POP
14254: POP
// end ; if UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
14255: LD_EXP 63
14259: PPUSH
14260: LD_INT 25
14262: PUSH
14263: LD_INT 3
14265: PUSH
14266: EMPTY
14267: LIST
14268: LIST
14269: PUSH
14270: LD_INT 3
14272: PUSH
14273: LD_INT 54
14275: PUSH
14276: EMPTY
14277: LIST
14278: PUSH
14279: EMPTY
14280: LIST
14281: LIST
14282: PUSH
14283: LD_INT 120
14285: PUSH
14286: LD_INT 7
14288: PUSH
14289: EMPTY
14290: LIST
14291: LIST
14292: PUSH
14293: LD_INT 50
14295: PUSH
14296: EMPTY
14297: LIST
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: PPUSH
14305: CALL_OW 72
14309: IFFALSE 14396
// begin for i in UnitFilter ( ruMech , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
14311: LD_ADDR_VAR 0 1
14315: PUSH
14316: LD_EXP 63
14320: PPUSH
14321: LD_INT 25
14323: PUSH
14324: LD_INT 3
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PUSH
14331: LD_INT 3
14333: PUSH
14334: LD_INT 54
14336: PUSH
14337: EMPTY
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: LD_INT 120
14346: PUSH
14347: LD_INT 7
14349: PUSH
14350: EMPTY
14351: LIST
14352: LIST
14353: PUSH
14354: LD_INT 50
14356: PUSH
14357: EMPTY
14358: LIST
14359: PUSH
14360: EMPTY
14361: LIST
14362: LIST
14363: LIST
14364: LIST
14365: PPUSH
14366: CALL_OW 72
14370: PUSH
14371: FOR_IN
14372: IFFALSE 14394
// ComEnterUnit ( i , fac [ 1 ] ) ;
14374: LD_VAR 0 1
14378: PPUSH
14379: LD_VAR 0 14
14383: PUSH
14384: LD_INT 1
14386: ARRAY
14387: PPUSH
14388: CALL_OW 120
14392: GO 14371
14394: POP
14395: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
14396: LD_VAR 0 14
14400: PUSH
14401: LD_INT 1
14403: ARRAY
14404: PPUSH
14405: CALL_OW 461
14409: PUSH
14410: LD_INT 2
14412: EQUAL
14413: IFFALSE 14664
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
14415: LD_ADDR_VAR 0 15
14419: PUSH
14420: LD_EXP 66
14424: PPUSH
14425: LD_INT 2
14427: PUSH
14428: LD_INT 30
14430: PUSH
14431: LD_INT 32
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: LD_INT 30
14440: PUSH
14441: LD_INT 33
14443: PUSH
14444: EMPTY
14445: LIST
14446: LIST
14447: PUSH
14448: EMPTY
14449: LIST
14450: LIST
14451: LIST
14452: PUSH
14453: LD_INT 35
14455: PUSH
14456: LD_INT 0
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: PPUSH
14467: CALL_OW 70
14471: ST_TO_ADDR
// if emptyTowers then
14472: LD_VAR 0 15
14476: IFFALSE 14526
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea ) ;
14478: LD_ADDR_VAR 0 16
14482: PUSH
14483: LD_VAR 0 15
14487: PUSH
14488: LD_INT 1
14490: ARRAY
14491: PPUSH
14492: LD_EXP 66
14496: PPUSH
14497: CALL 64962 0 2
14501: ST_TO_ADDR
// if weapon then
14502: LD_VAR 0 16
14506: IFFALSE 14526
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
14508: LD_VAR 0 15
14512: PUSH
14513: LD_INT 1
14515: ARRAY
14516: PPUSH
14517: LD_VAR 0 16
14521: PPUSH
14522: CALL_OW 148
// end ; if ruConstructList then
14526: LD_EXP 70
14530: IFFALSE 14664
// if CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
14532: LD_VAR 0 14
14536: PUSH
14537: LD_INT 1
14539: ARRAY
14540: PPUSH
14541: LD_EXP 70
14545: PUSH
14546: LD_INT 1
14548: ARRAY
14549: PUSH
14550: LD_INT 1
14552: ARRAY
14553: PPUSH
14554: LD_EXP 70
14558: PUSH
14559: LD_INT 1
14561: ARRAY
14562: PUSH
14563: LD_INT 2
14565: ARRAY
14566: PPUSH
14567: LD_EXP 70
14571: PUSH
14572: LD_INT 1
14574: ARRAY
14575: PUSH
14576: LD_INT 3
14578: ARRAY
14579: PPUSH
14580: LD_EXP 70
14584: PUSH
14585: LD_INT 1
14587: ARRAY
14588: PUSH
14589: LD_INT 4
14591: ARRAY
14592: PPUSH
14593: CALL_OW 448
14597: IFFALSE 14664
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
14599: LD_VAR 0 14
14603: PUSH
14604: LD_INT 1
14606: ARRAY
14607: PPUSH
14608: LD_EXP 70
14612: PUSH
14613: LD_INT 1
14615: ARRAY
14616: PUSH
14617: LD_INT 1
14619: ARRAY
14620: PPUSH
14621: LD_EXP 70
14625: PUSH
14626: LD_INT 1
14628: ARRAY
14629: PUSH
14630: LD_INT 2
14632: ARRAY
14633: PPUSH
14634: LD_EXP 70
14638: PUSH
14639: LD_INT 1
14641: ARRAY
14642: PUSH
14643: LD_INT 3
14645: ARRAY
14646: PPUSH
14647: LD_EXP 70
14651: PUSH
14652: LD_INT 1
14654: ARRAY
14655: PUSH
14656: LD_INT 4
14658: ARRAY
14659: PPUSH
14660: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
14664: LD_ADDR_VAR 0 2
14668: PUSH
14669: LD_EXP 66
14673: PPUSH
14674: LD_INT 21
14676: PUSH
14677: LD_INT 3
14679: PUSH
14680: EMPTY
14681: LIST
14682: LIST
14683: PUSH
14684: LD_INT 3
14686: PUSH
14687: LD_INT 57
14689: PUSH
14690: EMPTY
14691: LIST
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 3
14699: PUSH
14700: LD_INT 24
14702: PUSH
14703: LD_INT 1000
14705: PUSH
14706: EMPTY
14707: LIST
14708: LIST
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: PUSH
14714: EMPTY
14715: LIST
14716: LIST
14717: LIST
14718: PPUSH
14719: CALL_OW 70
14723: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea ) ;
14724: LD_ADDR_VAR 0 8
14728: PUSH
14729: LD_EXP 72
14733: PPUSH
14734: CALL_OW 435
14738: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
14739: LD_ADDR_VAR 0 9
14743: PUSH
14744: LD_EXP 59
14748: PPUSH
14749: LD_INT 25
14751: PUSH
14752: LD_INT 4
14754: PUSH
14755: EMPTY
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 50
14761: PUSH
14762: EMPTY
14763: LIST
14764: PUSH
14765: EMPTY
14766: LIST
14767: LIST
14768: PPUSH
14769: CALL_OW 72
14773: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
14774: LD_ADDR_VAR 0 4
14778: PUSH
14779: LD_EXP 66
14783: PPUSH
14784: LD_INT 2
14786: PUSH
14787: LD_INT 30
14789: PUSH
14790: LD_INT 6
14792: PUSH
14793: EMPTY
14794: LIST
14795: LIST
14796: PUSH
14797: LD_INT 30
14799: PUSH
14800: LD_INT 7
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PUSH
14807: LD_INT 30
14809: PUSH
14810: LD_INT 8
14812: PUSH
14813: EMPTY
14814: LIST
14815: LIST
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: LIST
14821: LIST
14822: PPUSH
14823: CALL_OW 70
14827: ST_TO_ADDR
// if sci then
14828: LD_VAR 0 9
14832: IFFALSE 14993
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
14834: LD_ADDR_VAR 0 11
14838: PUSH
14839: LD_EXP 59
14843: PPUSH
14844: LD_INT 95
14846: PUSH
14847: LD_EXP 66
14851: PUSH
14852: EMPTY
14853: LIST
14854: LIST
14855: PUSH
14856: LD_INT 120
14858: PUSH
14859: LD_INT 1
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PPUSH
14870: CALL_OW 72
14874: ST_TO_ADDR
// if hurtUnits then
14875: LD_VAR 0 11
14879: IFFALSE 14940
// begin for i in sci do
14881: LD_ADDR_VAR 0 1
14885: PUSH
14886: LD_VAR 0 9
14890: PUSH
14891: FOR_IN
14892: IFFALSE 14936
// if IsInUnit ( i ) then
14894: LD_VAR 0 1
14898: PPUSH
14899: CALL_OW 310
14903: IFFALSE 14916
// ComExitBuilding ( i ) else
14905: LD_VAR 0 1
14909: PPUSH
14910: CALL_OW 122
14914: GO 14934
// ComHeal ( i , hurtUnits [ 1 ] ) ;
14916: LD_VAR 0 1
14920: PPUSH
14921: LD_VAR 0 11
14925: PUSH
14926: LD_INT 1
14928: ARRAY
14929: PPUSH
14930: CALL_OW 128
14934: GO 14891
14936: POP
14937: POP
// end else
14938: GO 14993
// if lab then
14940: LD_VAR 0 4
14944: IFFALSE 14993
// begin for i in sci do
14946: LD_ADDR_VAR 0 1
14950: PUSH
14951: LD_VAR 0 9
14955: PUSH
14956: FOR_IN
14957: IFFALSE 14991
// if not IsInUnit ( i ) then
14959: LD_VAR 0 1
14963: PPUSH
14964: CALL_OW 310
14968: NOT
14969: IFFALSE 14989
// ComEnterUnit ( i , lab [ 1 ] ) ;
14971: LD_VAR 0 1
14975: PPUSH
14976: LD_VAR 0 4
14980: PUSH
14981: LD_INT 1
14983: ARRAY
14984: PPUSH
14985: CALL_OW 120
14989: GO 14956
14991: POP
14992: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
14993: LD_ADDR_VAR 0 5
14997: PUSH
14998: LD_EXP 59
15002: PPUSH
15003: LD_INT 25
15005: PUSH
15006: LD_INT 2
15008: PUSH
15009: EMPTY
15010: LIST
15011: LIST
15012: PPUSH
15013: CALL_OW 72
15017: ST_TO_ADDR
// if eng then
15018: LD_VAR 0 5
15022: IFFALSE 15807
// begin for i in eng do
15024: LD_ADDR_VAR 0 1
15028: PUSH
15029: LD_VAR 0 5
15033: PUSH
15034: FOR_IN
15035: IFFALSE 15805
// begin tag := GetTag ( i ) ;
15037: LD_ADDR_VAR 0 6
15041: PUSH
15042: LD_VAR 0 1
15046: PPUSH
15047: CALL_OW 110
15051: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
15052: LD_VAR 0 1
15056: PPUSH
15057: CALL_OW 256
15061: PUSH
15062: LD_INT 800
15064: LESS
15065: PUSH
15066: LD_VAR 0 6
15070: PUSH
15071: LD_INT 1
15073: NONEQUAL
15074: AND
15075: IFFALSE 15125
// begin SetTag ( i , tHeal ) ;
15077: LD_VAR 0 1
15081: PPUSH
15082: LD_INT 1
15084: PPUSH
15085: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
15089: LD_VAR 0 1
15093: PPUSH
15094: LD_EXP 74
15098: PUSH
15099: LD_INT 1
15101: ARRAY
15102: PPUSH
15103: LD_EXP 74
15107: PUSH
15108: LD_INT 2
15110: ARRAY
15111: PPUSH
15112: CALL_OW 111
// AddComHold ( i ) ;
15116: LD_VAR 0 1
15120: PPUSH
15121: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
15125: LD_VAR 0 6
15129: PUSH
15130: LD_INT 1
15132: EQUAL
15133: PUSH
15134: LD_VAR 0 1
15138: PPUSH
15139: CALL_OW 256
15143: PUSH
15144: LD_INT 1000
15146: EQUAL
15147: AND
15148: IFFALSE 15162
// SetTag ( i , 0 ) ;
15150: LD_VAR 0 1
15154: PPUSH
15155: LD_INT 0
15157: PPUSH
15158: CALL_OW 109
// if not tag then
15162: LD_VAR 0 6
15166: NOT
15167: IFFALSE 15339
// begin undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15169: LD_ADDR_VAR 0 3
15173: PUSH
15174: LD_EXP 66
15178: PPUSH
15179: LD_INT 57
15181: PUSH
15182: EMPTY
15183: LIST
15184: PPUSH
15185: CALL_OW 70
15189: ST_TO_ADDR
// if undone then
15190: LD_VAR 0 3
15194: IFFALSE 15216
// begin ComComplete ( i , undone [ 1 ] ) ;
15196: LD_VAR 0 1
15200: PPUSH
15201: LD_VAR 0 3
15205: PUSH
15206: LD_INT 1
15208: ARRAY
15209: PPUSH
15210: CALL 62815 0 2
// continue ;
15214: GO 15034
// end ; if cr or tmp or Count ( ruBuildings ) then
15216: LD_VAR 0 8
15220: PUSH
15221: LD_VAR 0 2
15225: OR
15226: PUSH
15227: LD_EXP 76
15231: PPUSH
15232: CALL 56717 0 1
15236: OR
15237: IFFALSE 15313
// begin if IsInUnit ( i ) then
15239: LD_VAR 0 1
15243: PPUSH
15244: CALL_OW 310
15248: IFFALSE 15259
// ComExitBuilding ( i ) ;
15250: LD_VAR 0 1
15254: PPUSH
15255: CALL_OW 122
// if tmp then
15259: LD_VAR 0 2
15263: IFFALSE 15279
// SetTag ( i , tRepair ) else
15265: LD_VAR 0 1
15269: PPUSH
15270: LD_INT 3
15272: PPUSH
15273: CALL_OW 109
15277: GO 15311
// if cr then
15279: LD_VAR 0 8
15283: IFFALSE 15299
// SetTag ( i , tCrates ) else
15285: LD_VAR 0 1
15289: PPUSH
15290: LD_INT 2
15292: PPUSH
15293: CALL_OW 109
15297: GO 15311
// SetTag ( i , tBuild ) ;
15299: LD_VAR 0 1
15303: PPUSH
15304: LD_INT 5
15306: PPUSH
15307: CALL_OW 109
// end else
15311: GO 15339
// if not IsInUnit ( i ) then
15313: LD_VAR 0 1
15317: PPUSH
15318: CALL_OW 310
15322: NOT
15323: IFFALSE 15339
// ComEnterUnit ( i , ruBase ) ;
15325: LD_VAR 0 1
15329: PPUSH
15330: LD_EXP 68
15334: PPUSH
15335: CALL_OW 120
// end ; if tag = tRepair then
15339: LD_VAR 0 6
15343: PUSH
15344: LD_INT 3
15346: EQUAL
15347: IFFALSE 15453
// begin if IsInUnit ( i ) then
15349: LD_VAR 0 1
15353: PPUSH
15354: CALL_OW 310
15358: IFFALSE 15371
// begin ComExitBuilding ( i ) ;
15360: LD_VAR 0 1
15364: PPUSH
15365: CALL_OW 122
// continue ;
15369: GO 15034
// end ; if not tmp then
15371: LD_VAR 0 2
15375: NOT
15376: IFFALSE 15392
// begin SetTag ( i , 0 ) ;
15378: LD_VAR 0 1
15382: PPUSH
15383: LD_INT 0
15385: PPUSH
15386: CALL_OW 109
// continue ;
15390: GO 15034
// end ; if not HasTask ( i ) then
15392: LD_VAR 0 1
15396: PPUSH
15397: CALL_OW 314
15401: NOT
15402: IFFALSE 15422
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
15404: LD_VAR 0 1
15408: PPUSH
15409: LD_VAR 0 2
15413: PUSH
15414: LD_INT 1
15416: ARRAY
15417: PPUSH
15418: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
15422: LD_VAR 0 1
15426: PPUSH
15427: LD_EXP 66
15431: PPUSH
15432: CALL_OW 308
15436: NOT
15437: IFFALSE 15453
// ComMoveToArea ( i , ruBaseArea ) ;
15439: LD_VAR 0 1
15443: PPUSH
15444: LD_EXP 66
15448: PPUSH
15449: CALL_OW 113
// end ; if tag = tBuild then
15453: LD_VAR 0 6
15457: PUSH
15458: LD_INT 5
15460: EQUAL
15461: IFFALSE 15660
// begin if IsInUnit ( i ) then
15463: LD_VAR 0 1
15467: PPUSH
15468: CALL_OW 310
15472: IFFALSE 15485
// begin ComExitBuilding ( i ) ;
15474: LD_VAR 0 1
15478: PPUSH
15479: CALL_OW 122
// continue ;
15483: GO 15034
// end ; if not Count ( ruBuildings ) then
15485: LD_EXP 76
15489: PPUSH
15490: CALL 56717 0 1
15494: NOT
15495: IFFALSE 15513
// begin SetTag ( i , 0 ) ;
15497: LD_VAR 0 1
15501: PPUSH
15502: LD_INT 0
15504: PPUSH
15505: CALL_OW 109
// continue ;
15509: GO 15034
// end else
15511: GO 15552
// if not CanBeBuiltOnlyResources ( ruBase , ruBuildings [ 1 ] [ 1 ] ) then
15513: LD_EXP 68
15517: PPUSH
15518: LD_EXP 76
15522: PUSH
15523: LD_INT 1
15525: ARRAY
15526: PUSH
15527: LD_INT 1
15529: ARRAY
15530: PPUSH
15531: CALL 96225 0 2
15535: NOT
15536: IFFALSE 15552
// begin SetTag ( i , 0 ) ;
15538: LD_VAR 0 1
15542: PPUSH
15543: LD_INT 0
15545: PPUSH
15546: CALL_OW 109
// continue ;
15550: GO 15034
// end ; undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
15552: LD_ADDR_VAR 0 3
15556: PUSH
15557: LD_EXP 66
15561: PPUSH
15562: LD_INT 57
15564: PUSH
15565: EMPTY
15566: LIST
15567: PPUSH
15568: CALL_OW 70
15572: ST_TO_ADDR
// if undone then
15573: LD_VAR 0 3
15577: IFFALSE 15599
// begin ComComplete ( i , undone [ 1 ] ) ;
15579: LD_VAR 0 1
15583: PPUSH
15584: LD_VAR 0 3
15588: PUSH
15589: LD_INT 1
15591: ARRAY
15592: PPUSH
15593: CALL 62815 0 2
// continue ;
15597: GO 15034
// end ; ComBuild ( i , ruBuildings [ 1 ] [ 1 ] , ruBuildings [ 1 ] [ 2 ] , ruBuildings [ 1 ] [ 3 ] , ruBuildings [ 1 ] [ 4 ] ) ;
15599: LD_VAR 0 1
15603: PPUSH
15604: LD_EXP 76
15608: PUSH
15609: LD_INT 1
15611: ARRAY
15612: PUSH
15613: LD_INT 1
15615: ARRAY
15616: PPUSH
15617: LD_EXP 76
15621: PUSH
15622: LD_INT 1
15624: ARRAY
15625: PUSH
15626: LD_INT 2
15628: ARRAY
15629: PPUSH
15630: LD_EXP 76
15634: PUSH
15635: LD_INT 1
15637: ARRAY
15638: PUSH
15639: LD_INT 3
15641: ARRAY
15642: PPUSH
15643: LD_EXP 76
15647: PUSH
15648: LD_INT 1
15650: ARRAY
15651: PUSH
15652: LD_INT 4
15654: ARRAY
15655: PPUSH
15656: CALL_OW 145
// end ; if tag = tCrates then
15660: LD_VAR 0 6
15664: PUSH
15665: LD_INT 2
15667: EQUAL
15668: IFFALSE 15803
// begin if IsInUnit ( i ) then
15670: LD_VAR 0 1
15674: PPUSH
15675: CALL_OW 310
15679: IFFALSE 15692
// begin ComExitBuilding ( i ) ;
15681: LD_VAR 0 1
15685: PPUSH
15686: CALL_OW 122
// continue ;
15690: GO 15034
// end ; if not cr then
15692: LD_VAR 0 8
15696: NOT
15697: IFFALSE 15713
// begin SetTag ( i , 0 ) ;
15699: LD_VAR 0 1
15703: PPUSH
15704: LD_INT 0
15706: PPUSH
15707: CALL_OW 109
// continue ;
15711: GO 15034
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
15713: LD_VAR 0 1
15717: PPUSH
15718: CALL_OW 314
15722: NOT
15723: PUSH
15724: LD_INT 81
15726: PUSH
15727: LD_INT 3
15729: PUSH
15730: EMPTY
15731: LIST
15732: LIST
15733: PUSH
15734: LD_INT 92
15736: PUSH
15737: LD_VAR 0 8
15741: PUSH
15742: LD_INT 1
15744: ARRAY
15745: PUSH
15746: LD_VAR 0 8
15750: PUSH
15751: LD_INT 2
15753: ARRAY
15754: PUSH
15755: LD_INT 12
15757: PUSH
15758: EMPTY
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: PUSH
15764: EMPTY
15765: LIST
15766: LIST
15767: PPUSH
15768: CALL_OW 69
15772: NOT
15773: AND
15774: IFFALSE 15803
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
15776: LD_VAR 0 1
15780: PPUSH
15781: LD_VAR 0 8
15785: PUSH
15786: LD_INT 1
15788: ARRAY
15789: PPUSH
15790: LD_VAR 0 8
15794: PUSH
15795: LD_INT 2
15797: ARRAY
15798: PPUSH
15799: CALL_OW 117
// end ; end ;
15803: GO 15034
15805: POP
15806: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander ;
15807: LD_ADDR_VAR 0 10
15811: PUSH
15812: LD_EXP 59
15816: PPUSH
15817: LD_INT 2
15819: PUSH
15820: LD_INT 25
15822: PUSH
15823: LD_INT 1
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: PUSH
15830: LD_INT 25
15832: PUSH
15833: LD_INT 9
15835: PUSH
15836: EMPTY
15837: LIST
15838: LIST
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: LIST
15844: PUSH
15845: LD_INT 50
15847: PUSH
15848: EMPTY
15849: LIST
15850: PUSH
15851: EMPTY
15852: LIST
15853: LIST
15854: PPUSH
15855: CALL_OW 72
15859: PUSH
15860: LD_EXP 61
15864: UNION
15865: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
15866: LD_ADDR_VAR 0 12
15870: PUSH
15871: LD_EXP 66
15875: PPUSH
15876: LD_INT 81
15878: PUSH
15879: LD_INT 3
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PPUSH
15886: CALL_OW 70
15890: ST_TO_ADDR
// if sol then
15891: LD_VAR 0 10
15895: IFFALSE 16419
// begin if enemyInBase then
15897: LD_VAR 0 12
15901: IFFALSE 16044
// begin for i in sol do
15903: LD_ADDR_VAR 0 1
15907: PUSH
15908: LD_VAR 0 10
15912: PUSH
15913: FOR_IN
15914: IFFALSE 16040
// begin tw := IsInUnit ( i ) ;
15916: LD_ADDR_VAR 0 7
15920: PUSH
15921: LD_VAR 0 1
15925: PPUSH
15926: CALL_OW 310
15930: ST_TO_ADDR
// if tw then
15931: LD_VAR 0 7
15935: IFFALSE 16014
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
15937: LD_VAR 0 7
15941: PUSH
15942: LD_INT 22
15944: PUSH
15945: LD_INT 3
15947: PUSH
15948: EMPTY
15949: LIST
15950: LIST
15951: PUSH
15952: LD_INT 101
15954: PUSH
15955: LD_INT 1
15957: PUSH
15958: EMPTY
15959: LIST
15960: LIST
15961: PUSH
15962: LD_INT 2
15964: PUSH
15965: LD_INT 30
15967: PUSH
15968: LD_INT 32
15970: PUSH
15971: EMPTY
15972: LIST
15973: LIST
15974: PUSH
15975: LD_INT 30
15977: PUSH
15978: LD_INT 31
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: PUSH
15985: EMPTY
15986: LIST
15987: LIST
15988: LIST
15989: PUSH
15990: EMPTY
15991: LIST
15992: LIST
15993: LIST
15994: PPUSH
15995: CALL_OW 69
15999: IN
16000: NOT
16001: IFFALSE 16012
// ComExitBuilding ( i ) ;
16003: LD_VAR 0 1
16007: PPUSH
16008: CALL_OW 122
// end else
16012: GO 16038
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
16014: LD_VAR 0 1
16018: PPUSH
16019: LD_VAR 0 12
16023: PPUSH
16024: LD_VAR 0 1
16028: PPUSH
16029: CALL_OW 74
16033: PPUSH
16034: CALL_OW 115
// end ;
16038: GO 15913
16040: POP
16041: POP
// end else
16042: GO 16419
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
16044: LD_ADDR_VAR 0 13
16048: PUSH
16049: LD_EXP 66
16053: PPUSH
16054: LD_INT 3
16056: PUSH
16057: LD_INT 62
16059: PUSH
16060: EMPTY
16061: LIST
16062: PUSH
16063: EMPTY
16064: LIST
16065: LIST
16066: PUSH
16067: LD_INT 2
16069: PUSH
16070: LD_INT 30
16072: PUSH
16073: LD_INT 32
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: LD_INT 30
16082: PUSH
16083: LD_INT 4
16085: PUSH
16086: EMPTY
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 30
16092: PUSH
16093: LD_INT 5
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: PUSH
16100: LD_INT 30
16102: PUSH
16103: LD_INT 31
16105: PUSH
16106: EMPTY
16107: LIST
16108: LIST
16109: PUSH
16110: EMPTY
16111: LIST
16112: LIST
16113: LIST
16114: LIST
16115: LIST
16116: PUSH
16117: EMPTY
16118: LIST
16119: LIST
16120: PPUSH
16121: CALL_OW 70
16125: ST_TO_ADDR
// if empty then
16126: LD_VAR 0 13
16130: IFFALSE 16147
// empty := ReverseArray ( empty ) ;
16132: LD_ADDR_VAR 0 13
16136: PUSH
16137: LD_VAR 0 13
16141: PPUSH
16142: CALL 87593 0 1
16146: ST_TO_ADDR
// for i in sol do
16147: LD_ADDR_VAR 0 1
16151: PUSH
16152: LD_VAR 0 10
16156: PUSH
16157: FOR_IN
16158: IFFALSE 16417
// begin tag := GetTag ( i ) ;
16160: LD_ADDR_VAR 0 6
16164: PUSH
16165: LD_VAR 0 1
16169: PPUSH
16170: CALL_OW 110
16174: ST_TO_ADDR
// if tag = tMech then
16175: LD_VAR 0 6
16179: PUSH
16180: LD_INT 7
16182: EQUAL
16183: IFFALSE 16187
// continue ;
16185: GO 16157
// if GetLives ( i ) < 1000 and tag <> tHeal then
16187: LD_VAR 0 1
16191: PPUSH
16192: CALL_OW 256
16196: PUSH
16197: LD_INT 1000
16199: LESS
16200: PUSH
16201: LD_VAR 0 6
16205: PUSH
16206: LD_INT 1
16208: NONEQUAL
16209: AND
16210: IFFALSE 16262
// begin SetTag ( i , tHeal ) ;
16212: LD_VAR 0 1
16216: PPUSH
16217: LD_INT 1
16219: PPUSH
16220: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
16224: LD_VAR 0 1
16228: PPUSH
16229: LD_EXP 74
16233: PUSH
16234: LD_INT 1
16236: ARRAY
16237: PPUSH
16238: LD_EXP 74
16242: PUSH
16243: LD_INT 2
16245: ARRAY
16246: PPUSH
16247: CALL_OW 111
// AddComHold ( i ) ;
16251: LD_VAR 0 1
16255: PPUSH
16256: CALL_OW 200
// continue ;
16260: GO 16157
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
16262: LD_VAR 0 1
16266: PPUSH
16267: CALL_OW 256
16271: PUSH
16272: LD_INT 1000
16274: EQUAL
16275: PUSH
16276: LD_VAR 0 6
16280: PUSH
16281: LD_INT 1
16283: EQUAL
16284: AND
16285: IFFALSE 16301
// begin SetTag ( i , 0 ) ;
16287: LD_VAR 0 1
16291: PPUSH
16292: LD_INT 0
16294: PPUSH
16295: CALL_OW 109
// continue ;
16299: GO 16157
// end ; if HasTask ( i ) then
16301: LD_VAR 0 1
16305: PPUSH
16306: CALL_OW 314
16310: IFFALSE 16314
// continue ;
16312: GO 16157
// if not IsInUnit ( i ) and not tag and empty then
16314: LD_VAR 0 1
16318: PPUSH
16319: CALL_OW 310
16323: NOT
16324: PUSH
16325: LD_VAR 0 6
16329: NOT
16330: AND
16331: PUSH
16332: LD_VAR 0 13
16336: AND
16337: IFFALSE 16415
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
16339: LD_VAR 0 1
16343: PPUSH
16344: LD_VAR 0 13
16348: PUSH
16349: LD_INT 1
16351: ARRAY
16352: PPUSH
16353: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
16357: LD_VAR 0 13
16361: PUSH
16362: LD_INT 1
16364: ARRAY
16365: PPUSH
16366: CALL_OW 266
16370: PUSH
16371: LD_INT 5
16373: EQUAL
16374: PUSH
16375: LD_INT 50
16377: PPUSH
16378: CALL_OW 13
16382: AND
16383: IFFALSE 16397
// AddComChangeProfession ( i , class_bazooker ) ;
16385: LD_VAR 0 1
16389: PPUSH
16390: LD_INT 9
16392: PPUSH
16393: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
16397: LD_ADDR_VAR 0 13
16401: PUSH
16402: LD_VAR 0 13
16406: PPUSH
16407: LD_INT 1
16409: PPUSH
16410: CALL_OW 3
16414: ST_TO_ADDR
// end ; end ;
16415: GO 16157
16417: POP
16418: POP
// end ; end ; end ;
16419: PPOPN 16
16421: END
// every 0 0$2 trigger ruScriptActive2 and Count ( ruForces2 ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
16422: LD_EXP 15
16426: PUSH
16427: LD_EXP 60
16431: PPUSH
16432: CALL 56717 0 1
16436: AND
16437: IFFALSE 19019
16439: GO 16441
16441: DISABLE
16442: LD_INT 0
16444: PPUSH
16445: PPUSH
16446: PPUSH
16447: PPUSH
16448: PPUSH
16449: PPUSH
16450: PPUSH
16451: PPUSH
16452: PPUSH
16453: PPUSH
16454: PPUSH
16455: PPUSH
16456: PPUSH
16457: PPUSH
16458: PPUSH
16459: PPUSH
// begin enable ;
16460: ENABLE
// if ruTech then
16461: LD_EXP 65
16465: IFFALSE 16619
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
16467: LD_ADDR_VAR 0 4
16471: PUSH
16472: LD_INT 22
16474: PUSH
16475: LD_INT 3
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: LD_INT 50
16484: PUSH
16485: EMPTY
16486: LIST
16487: PUSH
16488: LD_INT 2
16490: PUSH
16491: LD_INT 30
16493: PUSH
16494: LD_INT 6
16496: PUSH
16497: EMPTY
16498: LIST
16499: LIST
16500: PUSH
16501: LD_INT 30
16503: PUSH
16504: LD_INT 7
16506: PUSH
16507: EMPTY
16508: LIST
16509: LIST
16510: PUSH
16511: LD_INT 30
16513: PUSH
16514: LD_INT 8
16516: PUSH
16517: EMPTY
16518: LIST
16519: LIST
16520: PUSH
16521: EMPTY
16522: LIST
16523: LIST
16524: LIST
16525: LIST
16526: PUSH
16527: EMPTY
16528: LIST
16529: LIST
16530: LIST
16531: PPUSH
16532: CALL_OW 69
16536: ST_TO_ADDR
// if lab then
16537: LD_VAR 0 4
16541: IFFALSE 16619
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
16543: LD_VAR 0 4
16547: PUSH
16548: LD_INT 1
16550: ARRAY
16551: PPUSH
16552: CALL_OW 461
16556: PUSH
16557: LD_INT 2
16559: EQUAL
16560: IFFALSE 16619
// begin for i in ruTech do
16562: LD_ADDR_VAR 0 1
16566: PUSH
16567: LD_EXP 65
16571: PUSH
16572: FOR_IN
16573: IFFALSE 16617
// if CanBeResearched ( lab [ 1 ] , i ) then
16575: LD_VAR 0 4
16579: PUSH
16580: LD_INT 1
16582: ARRAY
16583: PPUSH
16584: LD_VAR 0 1
16588: PPUSH
16589: CALL_OW 430
16593: IFFALSE 16615
// begin ComResearch ( lab [ 1 ] , i ) ;
16595: LD_VAR 0 4
16599: PUSH
16600: LD_INT 1
16602: ARRAY
16603: PPUSH
16604: LD_VAR 0 1
16608: PPUSH
16609: CALL_OW 124
// break ;
16613: GO 16617
// end ;
16615: GO 16572
16617: POP
16618: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
16619: LD_ADDR_VAR 0 14
16623: PUSH
16624: LD_EXP 67
16628: PPUSH
16629: LD_INT 22
16631: PUSH
16632: LD_INT 3
16634: PUSH
16635: EMPTY
16636: LIST
16637: LIST
16638: PUSH
16639: LD_INT 30
16641: PUSH
16642: LD_INT 3
16644: PUSH
16645: EMPTY
16646: LIST
16647: LIST
16648: PUSH
16649: LD_INT 50
16651: PUSH
16652: EMPTY
16653: LIST
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: LIST
16659: PPUSH
16660: CALL_OW 70
16664: ST_TO_ADDR
// if fac then
16665: LD_VAR 0 14
16669: IFFALSE 17264
// begin if UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
16671: LD_EXP 64
16675: PPUSH
16676: LD_INT 3
16678: PUSH
16679: LD_INT 60
16681: PUSH
16682: EMPTY
16683: LIST
16684: PUSH
16685: EMPTY
16686: LIST
16687: LIST
16688: PUSH
16689: LD_INT 3
16691: PUSH
16692: LD_INT 25
16694: PUSH
16695: LD_INT 3
16697: PUSH
16698: EMPTY
16699: LIST
16700: LIST
16701: PUSH
16702: EMPTY
16703: LIST
16704: LIST
16705: PUSH
16706: EMPTY
16707: LIST
16708: LIST
16709: PPUSH
16710: CALL_OW 72
16714: IFFALSE 16855
// begin for i in UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
16716: LD_ADDR_VAR 0 1
16720: PUSH
16721: LD_EXP 64
16725: PPUSH
16726: LD_INT 3
16728: PUSH
16729: LD_INT 60
16731: PUSH
16732: EMPTY
16733: LIST
16734: PUSH
16735: EMPTY
16736: LIST
16737: LIST
16738: PUSH
16739: LD_INT 3
16741: PUSH
16742: LD_INT 25
16744: PUSH
16745: LD_INT 3
16747: PUSH
16748: EMPTY
16749: LIST
16750: LIST
16751: PUSH
16752: EMPTY
16753: LIST
16754: LIST
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PPUSH
16760: CALL_OW 72
16764: PUSH
16765: FOR_IN
16766: IFFALSE 16853
// begin SetTag ( i , tMech ) ;
16768: LD_VAR 0 1
16772: PPUSH
16773: LD_INT 7
16775: PPUSH
16776: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
16780: LD_VAR 0 1
16784: PPUSH
16785: CALL_OW 310
16789: PUSH
16790: LD_VAR 0 1
16794: PPUSH
16795: CALL_OW 310
16799: PUSH
16800: LD_VAR 0 14
16804: PUSH
16805: LD_INT 1
16807: ARRAY
16808: NONEQUAL
16809: AND
16810: IFFALSE 16821
// ComExitBuilding ( i ) ;
16812: LD_VAR 0 1
16816: PPUSH
16817: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
16821: LD_VAR 0 1
16825: PPUSH
16826: LD_VAR 0 14
16830: PUSH
16831: LD_INT 1
16833: ARRAY
16834: PPUSH
16835: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
16839: LD_VAR 0 1
16843: PPUSH
16844: LD_INT 3
16846: PPUSH
16847: CALL_OW 183
// end ;
16851: GO 16765
16853: POP
16854: POP
// end ; if UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) then
16855: LD_EXP 64
16859: PPUSH
16860: LD_INT 25
16862: PUSH
16863: LD_INT 3
16865: PUSH
16866: EMPTY
16867: LIST
16868: LIST
16869: PUSH
16870: LD_INT 3
16872: PUSH
16873: LD_INT 54
16875: PUSH
16876: EMPTY
16877: LIST
16878: PUSH
16879: EMPTY
16880: LIST
16881: LIST
16882: PUSH
16883: LD_INT 120
16885: PUSH
16886: LD_INT 7
16888: PUSH
16889: EMPTY
16890: LIST
16891: LIST
16892: PUSH
16893: LD_INT 50
16895: PUSH
16896: EMPTY
16897: LIST
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: PPUSH
16905: CALL_OW 72
16909: IFFALSE 16996
// begin for i in UnitFilter ( ruMech2 , [ [ f_class , class_mechanic ] , [ f_not , [ f_inside ] ] , [ f_tag , tMech ] , [ f_ok ] ] ) do
16911: LD_ADDR_VAR 0 1
16915: PUSH
16916: LD_EXP 64
16920: PPUSH
16921: LD_INT 25
16923: PUSH
16924: LD_INT 3
16926: PUSH
16927: EMPTY
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 3
16933: PUSH
16934: LD_INT 54
16936: PUSH
16937: EMPTY
16938: LIST
16939: PUSH
16940: EMPTY
16941: LIST
16942: LIST
16943: PUSH
16944: LD_INT 120
16946: PUSH
16947: LD_INT 7
16949: PUSH
16950: EMPTY
16951: LIST
16952: LIST
16953: PUSH
16954: LD_INT 50
16956: PUSH
16957: EMPTY
16958: LIST
16959: PUSH
16960: EMPTY
16961: LIST
16962: LIST
16963: LIST
16964: LIST
16965: PPUSH
16966: CALL_OW 72
16970: PUSH
16971: FOR_IN
16972: IFFALSE 16994
// ComEnterUnit ( i , fac [ 1 ] ) ;
16974: LD_VAR 0 1
16978: PPUSH
16979: LD_VAR 0 14
16983: PUSH
16984: LD_INT 1
16986: ARRAY
16987: PPUSH
16988: CALL_OW 120
16992: GO 16971
16994: POP
16995: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
16996: LD_VAR 0 14
17000: PUSH
17001: LD_INT 1
17003: ARRAY
17004: PPUSH
17005: CALL_OW 461
17009: PUSH
17010: LD_INT 2
17012: EQUAL
17013: IFFALSE 17264
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea2 , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
17015: LD_ADDR_VAR 0 15
17019: PUSH
17020: LD_EXP 67
17024: PPUSH
17025: LD_INT 2
17027: PUSH
17028: LD_INT 30
17030: PUSH
17031: LD_INT 32
17033: PUSH
17034: EMPTY
17035: LIST
17036: LIST
17037: PUSH
17038: LD_INT 30
17040: PUSH
17041: LD_INT 33
17043: PUSH
17044: EMPTY
17045: LIST
17046: LIST
17047: PUSH
17048: EMPTY
17049: LIST
17050: LIST
17051: LIST
17052: PUSH
17053: LD_INT 35
17055: PUSH
17056: LD_INT 0
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PPUSH
17067: CALL_OW 70
17071: ST_TO_ADDR
// if emptyTowers then
17072: LD_VAR 0 15
17076: IFFALSE 17126
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea2 ) ;
17078: LD_ADDR_VAR 0 16
17082: PUSH
17083: LD_VAR 0 15
17087: PUSH
17088: LD_INT 1
17090: ARRAY
17091: PPUSH
17092: LD_EXP 67
17096: PPUSH
17097: CALL 64962 0 2
17101: ST_TO_ADDR
// if weapon then
17102: LD_VAR 0 16
17106: IFFALSE 17126
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
17108: LD_VAR 0 15
17112: PUSH
17113: LD_INT 1
17115: ARRAY
17116: PPUSH
17117: LD_VAR 0 16
17121: PPUSH
17122: CALL_OW 148
// end ; if ruConstructList2 then
17126: LD_EXP 71
17130: IFFALSE 17264
// if CanBeConstructed ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) then
17132: LD_VAR 0 14
17136: PUSH
17137: LD_INT 1
17139: ARRAY
17140: PPUSH
17141: LD_EXP 71
17145: PUSH
17146: LD_INT 1
17148: ARRAY
17149: PUSH
17150: LD_INT 1
17152: ARRAY
17153: PPUSH
17154: LD_EXP 71
17158: PUSH
17159: LD_INT 1
17161: ARRAY
17162: PUSH
17163: LD_INT 2
17165: ARRAY
17166: PPUSH
17167: LD_EXP 71
17171: PUSH
17172: LD_INT 1
17174: ARRAY
17175: PUSH
17176: LD_INT 3
17178: ARRAY
17179: PPUSH
17180: LD_EXP 71
17184: PUSH
17185: LD_INT 1
17187: ARRAY
17188: PUSH
17189: LD_INT 4
17191: ARRAY
17192: PPUSH
17193: CALL_OW 448
17197: IFFALSE 17264
// ComConstruct ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) ;
17199: LD_VAR 0 14
17203: PUSH
17204: LD_INT 1
17206: ARRAY
17207: PPUSH
17208: LD_EXP 71
17212: PUSH
17213: LD_INT 1
17215: ARRAY
17216: PUSH
17217: LD_INT 1
17219: ARRAY
17220: PPUSH
17221: LD_EXP 71
17225: PUSH
17226: LD_INT 1
17228: ARRAY
17229: PUSH
17230: LD_INT 2
17232: ARRAY
17233: PPUSH
17234: LD_EXP 71
17238: PUSH
17239: LD_INT 1
17241: ARRAY
17242: PUSH
17243: LD_INT 3
17245: ARRAY
17246: PPUSH
17247: LD_EXP 71
17251: PUSH
17252: LD_INT 1
17254: ARRAY
17255: PUSH
17256: LD_INT 4
17258: ARRAY
17259: PPUSH
17260: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea2 , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17264: LD_ADDR_VAR 0 2
17268: PUSH
17269: LD_EXP 67
17273: PPUSH
17274: LD_INT 21
17276: PUSH
17277: LD_INT 3
17279: PUSH
17280: EMPTY
17281: LIST
17282: LIST
17283: PUSH
17284: LD_INT 3
17286: PUSH
17287: LD_INT 57
17289: PUSH
17290: EMPTY
17291: LIST
17292: PUSH
17293: EMPTY
17294: LIST
17295: LIST
17296: PUSH
17297: LD_INT 3
17299: PUSH
17300: LD_INT 24
17302: PUSH
17303: LD_INT 1000
17305: PUSH
17306: EMPTY
17307: LIST
17308: LIST
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: LIST
17318: PPUSH
17319: CALL_OW 70
17323: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea2 ) ;
17324: LD_ADDR_VAR 0 8
17328: PUSH
17329: LD_EXP 73
17333: PPUSH
17334: CALL_OW 435
17338: ST_TO_ADDR
// sci := UnitFilter ( ruForces2 , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
17339: LD_ADDR_VAR 0 9
17343: PUSH
17344: LD_EXP 60
17348: PPUSH
17349: LD_INT 25
17351: PUSH
17352: LD_INT 4
17354: PUSH
17355: EMPTY
17356: LIST
17357: LIST
17358: PUSH
17359: LD_INT 50
17361: PUSH
17362: EMPTY
17363: LIST
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PPUSH
17369: CALL_OW 72
17373: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea2 , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
17374: LD_ADDR_VAR 0 4
17378: PUSH
17379: LD_EXP 67
17383: PPUSH
17384: LD_INT 2
17386: PUSH
17387: LD_INT 30
17389: PUSH
17390: LD_INT 6
17392: PUSH
17393: EMPTY
17394: LIST
17395: LIST
17396: PUSH
17397: LD_INT 30
17399: PUSH
17400: LD_INT 7
17402: PUSH
17403: EMPTY
17404: LIST
17405: LIST
17406: PUSH
17407: LD_INT 30
17409: PUSH
17410: LD_INT 8
17412: PUSH
17413: EMPTY
17414: LIST
17415: LIST
17416: PUSH
17417: EMPTY
17418: LIST
17419: LIST
17420: LIST
17421: LIST
17422: PPUSH
17423: CALL_OW 70
17427: ST_TO_ADDR
// if sci then
17428: LD_VAR 0 9
17432: IFFALSE 17593
// begin hurtUnits := UnitFilter ( ruForces2 , [ [ f_inarea , ruBaseArea2 ] , [ f_tag , tHeal ] ] ) ;
17434: LD_ADDR_VAR 0 11
17438: PUSH
17439: LD_EXP 60
17443: PPUSH
17444: LD_INT 95
17446: PUSH
17447: LD_EXP 67
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 120
17458: PUSH
17459: LD_INT 1
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: PPUSH
17470: CALL_OW 72
17474: ST_TO_ADDR
// if hurtUnits then
17475: LD_VAR 0 11
17479: IFFALSE 17540
// begin for i in sci do
17481: LD_ADDR_VAR 0 1
17485: PUSH
17486: LD_VAR 0 9
17490: PUSH
17491: FOR_IN
17492: IFFALSE 17536
// if IsInUnit ( i ) then
17494: LD_VAR 0 1
17498: PPUSH
17499: CALL_OW 310
17503: IFFALSE 17516
// ComExitBuilding ( i ) else
17505: LD_VAR 0 1
17509: PPUSH
17510: CALL_OW 122
17514: GO 17534
// ComHeal ( i , hurtUnits [ 1 ] ) ;
17516: LD_VAR 0 1
17520: PPUSH
17521: LD_VAR 0 11
17525: PUSH
17526: LD_INT 1
17528: ARRAY
17529: PPUSH
17530: CALL_OW 128
17534: GO 17491
17536: POP
17537: POP
// end else
17538: GO 17593
// if lab then
17540: LD_VAR 0 4
17544: IFFALSE 17593
// begin for i in sci do
17546: LD_ADDR_VAR 0 1
17550: PUSH
17551: LD_VAR 0 9
17555: PUSH
17556: FOR_IN
17557: IFFALSE 17591
// if not IsInUnit ( i ) then
17559: LD_VAR 0 1
17563: PPUSH
17564: CALL_OW 310
17568: NOT
17569: IFFALSE 17589
// ComEnterUnit ( i , lab [ 1 ] ) ;
17571: LD_VAR 0 1
17575: PPUSH
17576: LD_VAR 0 4
17580: PUSH
17581: LD_INT 1
17583: ARRAY
17584: PPUSH
17585: CALL_OW 120
17589: GO 17556
17591: POP
17592: POP
// end ; end ; eng := UnitFilter ( ruForces2 , [ f_class , 2 ] ) ;
17593: LD_ADDR_VAR 0 5
17597: PUSH
17598: LD_EXP 60
17602: PPUSH
17603: LD_INT 25
17605: PUSH
17606: LD_INT 2
17608: PUSH
17609: EMPTY
17610: LIST
17611: LIST
17612: PPUSH
17613: CALL_OW 72
17617: ST_TO_ADDR
// if eng then
17618: LD_VAR 0 5
17622: IFFALSE 18407
// begin for i in eng do
17624: LD_ADDR_VAR 0 1
17628: PUSH
17629: LD_VAR 0 5
17633: PUSH
17634: FOR_IN
17635: IFFALSE 18405
// begin tag := GetTag ( i ) ;
17637: LD_ADDR_VAR 0 6
17641: PUSH
17642: LD_VAR 0 1
17646: PPUSH
17647: CALL_OW 110
17651: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
17652: LD_VAR 0 1
17656: PPUSH
17657: CALL_OW 256
17661: PUSH
17662: LD_INT 800
17664: LESS
17665: PUSH
17666: LD_VAR 0 6
17670: PUSH
17671: LD_INT 1
17673: NONEQUAL
17674: AND
17675: IFFALSE 17725
// begin SetTag ( i , tHeal ) ;
17677: LD_VAR 0 1
17681: PPUSH
17682: LD_INT 1
17684: PPUSH
17685: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
17689: LD_VAR 0 1
17693: PPUSH
17694: LD_EXP 75
17698: PUSH
17699: LD_INT 1
17701: ARRAY
17702: PPUSH
17703: LD_EXP 75
17707: PUSH
17708: LD_INT 2
17710: ARRAY
17711: PPUSH
17712: CALL_OW 111
// AddComHold ( i ) ;
17716: LD_VAR 0 1
17720: PPUSH
17721: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
17725: LD_VAR 0 6
17729: PUSH
17730: LD_INT 1
17732: EQUAL
17733: PUSH
17734: LD_VAR 0 1
17738: PPUSH
17739: CALL_OW 256
17743: PUSH
17744: LD_INT 1000
17746: EQUAL
17747: AND
17748: IFFALSE 17762
// SetTag ( i , 0 ) ;
17750: LD_VAR 0 1
17754: PPUSH
17755: LD_INT 0
17757: PPUSH
17758: CALL_OW 109
// if not tag then
17762: LD_VAR 0 6
17766: NOT
17767: IFFALSE 17939
// begin undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
17769: LD_ADDR_VAR 0 3
17773: PUSH
17774: LD_EXP 67
17778: PPUSH
17779: LD_INT 57
17781: PUSH
17782: EMPTY
17783: LIST
17784: PPUSH
17785: CALL_OW 70
17789: ST_TO_ADDR
// if undone then
17790: LD_VAR 0 3
17794: IFFALSE 17816
// begin ComComplete ( i , undone [ 1 ] ) ;
17796: LD_VAR 0 1
17800: PPUSH
17801: LD_VAR 0 3
17805: PUSH
17806: LD_INT 1
17808: ARRAY
17809: PPUSH
17810: CALL 62815 0 2
// continue ;
17814: GO 17634
// end ; if cr or tmp or Count ( ruBuildings2 ) then
17816: LD_VAR 0 8
17820: PUSH
17821: LD_VAR 0 2
17825: OR
17826: PUSH
17827: LD_EXP 77
17831: PPUSH
17832: CALL 56717 0 1
17836: OR
17837: IFFALSE 17913
// begin if IsInUnit ( i ) then
17839: LD_VAR 0 1
17843: PPUSH
17844: CALL_OW 310
17848: IFFALSE 17859
// ComExitBuilding ( i ) ;
17850: LD_VAR 0 1
17854: PPUSH
17855: CALL_OW 122
// if tmp then
17859: LD_VAR 0 2
17863: IFFALSE 17879
// SetTag ( i , tRepair ) else
17865: LD_VAR 0 1
17869: PPUSH
17870: LD_INT 3
17872: PPUSH
17873: CALL_OW 109
17877: GO 17911
// if cr then
17879: LD_VAR 0 8
17883: IFFALSE 17899
// SetTag ( i , tCrates ) else
17885: LD_VAR 0 1
17889: PPUSH
17890: LD_INT 2
17892: PPUSH
17893: CALL_OW 109
17897: GO 17911
// SetTag ( i , tBuild ) ;
17899: LD_VAR 0 1
17903: PPUSH
17904: LD_INT 5
17906: PPUSH
17907: CALL_OW 109
// end else
17911: GO 17939
// if not IsInUnit ( i ) then
17913: LD_VAR 0 1
17917: PPUSH
17918: CALL_OW 310
17922: NOT
17923: IFFALSE 17939
// ComEnterUnit ( i , ruBase2 ) ;
17925: LD_VAR 0 1
17929: PPUSH
17930: LD_EXP 69
17934: PPUSH
17935: CALL_OW 120
// end ; if tag = tRepair then
17939: LD_VAR 0 6
17943: PUSH
17944: LD_INT 3
17946: EQUAL
17947: IFFALSE 18053
// begin if IsInUnit ( i ) then
17949: LD_VAR 0 1
17953: PPUSH
17954: CALL_OW 310
17958: IFFALSE 17971
// begin ComExitBuilding ( i ) ;
17960: LD_VAR 0 1
17964: PPUSH
17965: CALL_OW 122
// continue ;
17969: GO 17634
// end ; if not tmp then
17971: LD_VAR 0 2
17975: NOT
17976: IFFALSE 17992
// begin SetTag ( i , 0 ) ;
17978: LD_VAR 0 1
17982: PPUSH
17983: LD_INT 0
17985: PPUSH
17986: CALL_OW 109
// continue ;
17990: GO 17634
// end ; if not HasTask ( i ) then
17992: LD_VAR 0 1
17996: PPUSH
17997: CALL_OW 314
18001: NOT
18002: IFFALSE 18022
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
18004: LD_VAR 0 1
18008: PPUSH
18009: LD_VAR 0 2
18013: PUSH
18014: LD_INT 1
18016: ARRAY
18017: PPUSH
18018: CALL_OW 130
// if not IsInArea ( i , ruBaseArea2 ) then
18022: LD_VAR 0 1
18026: PPUSH
18027: LD_EXP 67
18031: PPUSH
18032: CALL_OW 308
18036: NOT
18037: IFFALSE 18053
// ComMoveToArea ( i , ruBaseArea2 ) ;
18039: LD_VAR 0 1
18043: PPUSH
18044: LD_EXP 67
18048: PPUSH
18049: CALL_OW 113
// end ; if tag = tBuild then
18053: LD_VAR 0 6
18057: PUSH
18058: LD_INT 5
18060: EQUAL
18061: IFFALSE 18260
// begin if IsInUnit ( i ) then
18063: LD_VAR 0 1
18067: PPUSH
18068: CALL_OW 310
18072: IFFALSE 18085
// begin ComExitBuilding ( i ) ;
18074: LD_VAR 0 1
18078: PPUSH
18079: CALL_OW 122
// continue ;
18083: GO 17634
// end ; if not Count ( ruBuildings2 ) then
18085: LD_EXP 77
18089: PPUSH
18090: CALL 56717 0 1
18094: NOT
18095: IFFALSE 18113
// begin SetTag ( i , 0 ) ;
18097: LD_VAR 0 1
18101: PPUSH
18102: LD_INT 0
18104: PPUSH
18105: CALL_OW 109
// continue ;
18109: GO 17634
// end else
18111: GO 18152
// if not CanBeBuiltOnlyResources ( ruBase2 , ruBuildings2 [ 1 ] [ 1 ] ) then
18113: LD_EXP 69
18117: PPUSH
18118: LD_EXP 77
18122: PUSH
18123: LD_INT 1
18125: ARRAY
18126: PUSH
18127: LD_INT 1
18129: ARRAY
18130: PPUSH
18131: CALL 96225 0 2
18135: NOT
18136: IFFALSE 18152
// begin SetTag ( i , 0 ) ;
18138: LD_VAR 0 1
18142: PPUSH
18143: LD_INT 0
18145: PPUSH
18146: CALL_OW 109
// continue ;
18150: GO 17634
// end ; undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
18152: LD_ADDR_VAR 0 3
18156: PUSH
18157: LD_EXP 67
18161: PPUSH
18162: LD_INT 57
18164: PUSH
18165: EMPTY
18166: LIST
18167: PPUSH
18168: CALL_OW 70
18172: ST_TO_ADDR
// if undone then
18173: LD_VAR 0 3
18177: IFFALSE 18199
// begin ComComplete ( i , undone [ 1 ] ) ;
18179: LD_VAR 0 1
18183: PPUSH
18184: LD_VAR 0 3
18188: PUSH
18189: LD_INT 1
18191: ARRAY
18192: PPUSH
18193: CALL 62815 0 2
// continue ;
18197: GO 17634
// end ; ComBuild ( i , ruBuildings2 [ 1 ] [ 1 ] , ruBuildings2 [ 1 ] [ 2 ] , ruBuildings2 [ 1 ] [ 3 ] , ruBuildings2 [ 1 ] [ 4 ] ) ;
18199: LD_VAR 0 1
18203: PPUSH
18204: LD_EXP 77
18208: PUSH
18209: LD_INT 1
18211: ARRAY
18212: PUSH
18213: LD_INT 1
18215: ARRAY
18216: PPUSH
18217: LD_EXP 77
18221: PUSH
18222: LD_INT 1
18224: ARRAY
18225: PUSH
18226: LD_INT 2
18228: ARRAY
18229: PPUSH
18230: LD_EXP 77
18234: PUSH
18235: LD_INT 1
18237: ARRAY
18238: PUSH
18239: LD_INT 3
18241: ARRAY
18242: PPUSH
18243: LD_EXP 77
18247: PUSH
18248: LD_INT 1
18250: ARRAY
18251: PUSH
18252: LD_INT 4
18254: ARRAY
18255: PPUSH
18256: CALL_OW 145
// end ; if tag = tCrates then
18260: LD_VAR 0 6
18264: PUSH
18265: LD_INT 2
18267: EQUAL
18268: IFFALSE 18403
// begin if IsInUnit ( i ) then
18270: LD_VAR 0 1
18274: PPUSH
18275: CALL_OW 310
18279: IFFALSE 18292
// begin ComExitBuilding ( i ) ;
18281: LD_VAR 0 1
18285: PPUSH
18286: CALL_OW 122
// continue ;
18290: GO 17634
// end ; if not cr then
18292: LD_VAR 0 8
18296: NOT
18297: IFFALSE 18313
// begin SetTag ( i , 0 ) ;
18299: LD_VAR 0 1
18303: PPUSH
18304: LD_INT 0
18306: PPUSH
18307: CALL_OW 109
// continue ;
18311: GO 17634
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
18313: LD_VAR 0 1
18317: PPUSH
18318: CALL_OW 314
18322: NOT
18323: PUSH
18324: LD_INT 81
18326: PUSH
18327: LD_INT 3
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 92
18336: PUSH
18337: LD_VAR 0 8
18341: PUSH
18342: LD_INT 1
18344: ARRAY
18345: PUSH
18346: LD_VAR 0 8
18350: PUSH
18351: LD_INT 2
18353: ARRAY
18354: PUSH
18355: LD_INT 12
18357: PUSH
18358: EMPTY
18359: LIST
18360: LIST
18361: LIST
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PPUSH
18368: CALL_OW 69
18372: NOT
18373: AND
18374: IFFALSE 18403
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
18376: LD_VAR 0 1
18380: PPUSH
18381: LD_VAR 0 8
18385: PUSH
18386: LD_INT 1
18388: ARRAY
18389: PPUSH
18390: LD_VAR 0 8
18394: PUSH
18395: LD_INT 2
18397: ARRAY
18398: PPUSH
18399: CALL_OW 117
// end ; end ;
18403: GO 17634
18405: POP
18406: POP
// end ; sol := UnitFilter ( ruForces2 , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander2 ;
18407: LD_ADDR_VAR 0 10
18411: PUSH
18412: LD_EXP 60
18416: PPUSH
18417: LD_INT 2
18419: PUSH
18420: LD_INT 25
18422: PUSH
18423: LD_INT 1
18425: PUSH
18426: EMPTY
18427: LIST
18428: LIST
18429: PUSH
18430: LD_INT 25
18432: PUSH
18433: LD_INT 9
18435: PUSH
18436: EMPTY
18437: LIST
18438: LIST
18439: PUSH
18440: EMPTY
18441: LIST
18442: LIST
18443: LIST
18444: PUSH
18445: LD_INT 50
18447: PUSH
18448: EMPTY
18449: LIST
18450: PUSH
18451: EMPTY
18452: LIST
18453: LIST
18454: PPUSH
18455: CALL_OW 72
18459: PUSH
18460: LD_EXP 62
18464: UNION
18465: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
18466: LD_ADDR_VAR 0 12
18470: PUSH
18471: LD_EXP 67
18475: PPUSH
18476: LD_INT 81
18478: PUSH
18479: LD_INT 3
18481: PUSH
18482: EMPTY
18483: LIST
18484: LIST
18485: PPUSH
18486: CALL_OW 70
18490: ST_TO_ADDR
// if sol then
18491: LD_VAR 0 10
18495: IFFALSE 19019
// begin if enemyInBase then
18497: LD_VAR 0 12
18501: IFFALSE 18644
// begin for i in sol do
18503: LD_ADDR_VAR 0 1
18507: PUSH
18508: LD_VAR 0 10
18512: PUSH
18513: FOR_IN
18514: IFFALSE 18640
// begin tw := IsInUnit ( i ) ;
18516: LD_ADDR_VAR 0 7
18520: PUSH
18521: LD_VAR 0 1
18525: PPUSH
18526: CALL_OW 310
18530: ST_TO_ADDR
// if tw then
18531: LD_VAR 0 7
18535: IFFALSE 18614
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
18537: LD_VAR 0 7
18541: PUSH
18542: LD_INT 22
18544: PUSH
18545: LD_INT 3
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: LD_INT 101
18554: PUSH
18555: LD_INT 1
18557: PUSH
18558: EMPTY
18559: LIST
18560: LIST
18561: PUSH
18562: LD_INT 2
18564: PUSH
18565: LD_INT 30
18567: PUSH
18568: LD_INT 32
18570: PUSH
18571: EMPTY
18572: LIST
18573: LIST
18574: PUSH
18575: LD_INT 30
18577: PUSH
18578: LD_INT 31
18580: PUSH
18581: EMPTY
18582: LIST
18583: LIST
18584: PUSH
18585: EMPTY
18586: LIST
18587: LIST
18588: LIST
18589: PUSH
18590: EMPTY
18591: LIST
18592: LIST
18593: LIST
18594: PPUSH
18595: CALL_OW 69
18599: IN
18600: NOT
18601: IFFALSE 18612
// ComExitBuilding ( i ) ;
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 122
// end else
18612: GO 18638
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
18614: LD_VAR 0 1
18618: PPUSH
18619: LD_VAR 0 12
18623: PPUSH
18624: LD_VAR 0 1
18628: PPUSH
18629: CALL_OW 74
18633: PPUSH
18634: CALL_OW 115
// end ;
18638: GO 18513
18640: POP
18641: POP
// end else
18642: GO 19019
// begin empty := FilterUnitsInArea ( ruBaseArea2 , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
18644: LD_ADDR_VAR 0 13
18648: PUSH
18649: LD_EXP 67
18653: PPUSH
18654: LD_INT 3
18656: PUSH
18657: LD_INT 62
18659: PUSH
18660: EMPTY
18661: LIST
18662: PUSH
18663: EMPTY
18664: LIST
18665: LIST
18666: PUSH
18667: LD_INT 2
18669: PUSH
18670: LD_INT 30
18672: PUSH
18673: LD_INT 32
18675: PUSH
18676: EMPTY
18677: LIST
18678: LIST
18679: PUSH
18680: LD_INT 30
18682: PUSH
18683: LD_INT 4
18685: PUSH
18686: EMPTY
18687: LIST
18688: LIST
18689: PUSH
18690: LD_INT 30
18692: PUSH
18693: LD_INT 5
18695: PUSH
18696: EMPTY
18697: LIST
18698: LIST
18699: PUSH
18700: LD_INT 30
18702: PUSH
18703: LD_INT 31
18705: PUSH
18706: EMPTY
18707: LIST
18708: LIST
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: LIST
18716: PUSH
18717: EMPTY
18718: LIST
18719: LIST
18720: PPUSH
18721: CALL_OW 70
18725: ST_TO_ADDR
// if empty then
18726: LD_VAR 0 13
18730: IFFALSE 18747
// empty := ReverseArray ( empty ) ;
18732: LD_ADDR_VAR 0 13
18736: PUSH
18737: LD_VAR 0 13
18741: PPUSH
18742: CALL 87593 0 1
18746: ST_TO_ADDR
// for i in sol do
18747: LD_ADDR_VAR 0 1
18751: PUSH
18752: LD_VAR 0 10
18756: PUSH
18757: FOR_IN
18758: IFFALSE 19017
// begin tag := GetTag ( i ) ;
18760: LD_ADDR_VAR 0 6
18764: PUSH
18765: LD_VAR 0 1
18769: PPUSH
18770: CALL_OW 110
18774: ST_TO_ADDR
// if tag = tMech then
18775: LD_VAR 0 6
18779: PUSH
18780: LD_INT 7
18782: EQUAL
18783: IFFALSE 18787
// continue ;
18785: GO 18757
// if GetLives ( i ) < 1000 and tag <> tHeal then
18787: LD_VAR 0 1
18791: PPUSH
18792: CALL_OW 256
18796: PUSH
18797: LD_INT 1000
18799: LESS
18800: PUSH
18801: LD_VAR 0 6
18805: PUSH
18806: LD_INT 1
18808: NONEQUAL
18809: AND
18810: IFFALSE 18862
// begin SetTag ( i , tHeal ) ;
18812: LD_VAR 0 1
18816: PPUSH
18817: LD_INT 1
18819: PPUSH
18820: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
18824: LD_VAR 0 1
18828: PPUSH
18829: LD_EXP 75
18833: PUSH
18834: LD_INT 1
18836: ARRAY
18837: PPUSH
18838: LD_EXP 75
18842: PUSH
18843: LD_INT 2
18845: ARRAY
18846: PPUSH
18847: CALL_OW 111
// AddComHold ( i ) ;
18851: LD_VAR 0 1
18855: PPUSH
18856: CALL_OW 200
// continue ;
18860: GO 18757
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
18862: LD_VAR 0 1
18866: PPUSH
18867: CALL_OW 256
18871: PUSH
18872: LD_INT 1000
18874: EQUAL
18875: PUSH
18876: LD_VAR 0 6
18880: PUSH
18881: LD_INT 1
18883: EQUAL
18884: AND
18885: IFFALSE 18901
// begin SetTag ( i , 0 ) ;
18887: LD_VAR 0 1
18891: PPUSH
18892: LD_INT 0
18894: PPUSH
18895: CALL_OW 109
// continue ;
18899: GO 18757
// end ; if HasTask ( i ) then
18901: LD_VAR 0 1
18905: PPUSH
18906: CALL_OW 314
18910: IFFALSE 18914
// continue ;
18912: GO 18757
// if not IsInUnit ( i ) and not tag and empty then
18914: LD_VAR 0 1
18918: PPUSH
18919: CALL_OW 310
18923: NOT
18924: PUSH
18925: LD_VAR 0 6
18929: NOT
18930: AND
18931: PUSH
18932: LD_VAR 0 13
18936: AND
18937: IFFALSE 19015
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
18939: LD_VAR 0 1
18943: PPUSH
18944: LD_VAR 0 13
18948: PUSH
18949: LD_INT 1
18951: ARRAY
18952: PPUSH
18953: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
18957: LD_VAR 0 13
18961: PUSH
18962: LD_INT 1
18964: ARRAY
18965: PPUSH
18966: CALL_OW 266
18970: PUSH
18971: LD_INT 5
18973: EQUAL
18974: PUSH
18975: LD_INT 50
18977: PPUSH
18978: CALL_OW 13
18982: AND
18983: IFFALSE 18997
// AddComChangeProfession ( i , class_bazooker ) ;
18985: LD_VAR 0 1
18989: PPUSH
18990: LD_INT 9
18992: PPUSH
18993: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
18997: LD_ADDR_VAR 0 13
19001: PUSH
19002: LD_VAR 0 13
19006: PPUSH
19007: LD_INT 1
19009: PPUSH
19010: CALL_OW 3
19014: ST_TO_ADDR
// end ; end ;
19015: GO 18757
19017: POP
19018: POP
// end ; end ; end ;
19019: PPOPN 16
19021: END
// every 0 0$1 trigger ruTanks and ruActiveAttacks do var i , mech , enemy ;
19022: LD_EXP 79
19026: PUSH
19027: LD_EXP 22
19031: AND
19032: IFFALSE 19599
19034: GO 19036
19036: DISABLE
19037: LD_INT 0
19039: PPUSH
19040: PPUSH
19041: PPUSH
// begin enable ;
19042: ENABLE
// if not ruTanks then
19043: LD_EXP 79
19047: NOT
19048: IFFALSE 19052
// exit ;
19050: GO 19599
// for i in ruTanks do
19052: LD_ADDR_VAR 0 1
19056: PUSH
19057: LD_EXP 79
19061: PUSH
19062: FOR_IN
19063: IFFALSE 19597
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19065: LD_VAR 0 1
19069: PPUSH
19070: CALL_OW 302
19074: NOT
19075: PUSH
19076: LD_VAR 0 1
19080: PPUSH
19081: CALL_OW 255
19085: PUSH
19086: LD_INT 3
19088: NONEQUAL
19089: OR
19090: IFFALSE 19110
// begin ruTanks := ruTanks diff i ;
19092: LD_ADDR_EXP 79
19096: PUSH
19097: LD_EXP 79
19101: PUSH
19102: LD_VAR 0 1
19106: DIFF
19107: ST_TO_ADDR
// continue ;
19108: GO 19062
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19110: LD_VAR 0 1
19114: PPUSH
19115: CALL_OW 110
19119: NOT
19120: PUSH
19121: LD_VAR 0 1
19125: PPUSH
19126: CALL_OW 110
19130: PUSH
19131: LD_INT 0
19133: EQUAL
19134: OR
19135: IFFALSE 19308
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase ) then
19137: LD_VAR 0 1
19141: PPUSH
19142: CALL_OW 262
19146: PUSH
19147: LD_INT 1
19149: EQUAL
19150: PUSH
19151: LD_VAR 0 1
19155: PPUSH
19156: CALL_OW 261
19160: PUSH
19161: LD_INT 50
19163: LESS
19164: AND
19165: PUSH
19166: LD_EXP 68
19170: PPUSH
19171: CALL_OW 302
19175: AND
19176: IFFALSE 19263
// begin ComMoveXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) ;
19178: LD_VAR 0 1
19182: PPUSH
19183: LD_EXP 68
19187: PPUSH
19188: CALL_OW 250
19192: PPUSH
19193: LD_EXP 68
19197: PPUSH
19198: CALL_OW 251
19202: PPUSH
19203: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19207: LD_INT 35
19209: PPUSH
19210: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) < 6 ;
19214: LD_VAR 0 1
19218: PPUSH
19219: LD_EXP 68
19223: PPUSH
19224: CALL_OW 250
19228: PPUSH
19229: LD_EXP 68
19233: PPUSH
19234: CALL_OW 251
19238: PPUSH
19239: CALL_OW 297
19243: PUSH
19244: LD_INT 6
19246: LESS
19247: IFFALSE 19207
// SetFuel ( i , 100 ) ;
19249: LD_VAR 0 1
19253: PPUSH
19254: LD_INT 100
19256: PPUSH
19257: CALL_OW 240
// end else
19261: GO 19308
// if not IsInArea ( i , ruParkingArea ) then
19263: LD_VAR 0 1
19267: PPUSH
19268: LD_EXP 82
19272: PPUSH
19273: CALL_OW 308
19277: NOT
19278: IFFALSE 19296
// ComMoveToArea ( i , ruParkingArea ) else
19280: LD_VAR 0 1
19284: PPUSH
19285: LD_EXP 82
19289: PPUSH
19290: CALL_OW 113
19294: GO 19308
// SetTag ( i , tParking ) ;
19296: LD_VAR 0 1
19300: PPUSH
19301: LD_INT 12
19303: PPUSH
19304: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19308: LD_VAR 0 1
19312: PPUSH
19313: CALL_OW 110
19317: PUSH
19318: LD_INT 12
19320: EQUAL
19321: IFFALSE 19451
// begin if GetLives ( i ) < 650 then
19323: LD_VAR 0 1
19327: PPUSH
19328: CALL_OW 256
19332: PUSH
19333: LD_INT 650
19335: LESS
19336: IFFALSE 19428
// begin if not IsDrivenBy ( i ) then
19338: LD_VAR 0 1
19342: PPUSH
19343: CALL_OW 311
19347: NOT
19348: IFFALSE 19352
// continue ;
19350: GO 19062
// mech := IsDrivenBy ( i ) ;
19352: LD_ADDR_VAR 0 2
19356: PUSH
19357: LD_VAR 0 1
19361: PPUSH
19362: CALL_OW 311
19366: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19367: LD_VAR 0 2
19371: PPUSH
19372: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19376: LD_VAR 0 2
19380: PPUSH
19381: LD_VAR 0 1
19385: PPUSH
19386: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19390: LD_INT 35
19392: PPUSH
19393: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19397: LD_VAR 0 1
19401: PPUSH
19402: CALL_OW 256
19406: PUSH
19407: LD_INT 1000
19409: EQUAL
19410: IFFALSE 19390
// ComEnterUnit ( mech , i ) ;
19412: LD_VAR 0 2
19416: PPUSH
19417: LD_VAR 0 1
19421: PPUSH
19422: CALL_OW 120
// end else
19426: GO 19451
// if IsDrivenBy ( i ) then
19428: LD_VAR 0 1
19432: PPUSH
19433: CALL_OW 311
19437: IFFALSE 19451
// SetTag ( i , tAttack ) ;
19439: LD_VAR 0 1
19443: PPUSH
19444: LD_INT 13
19446: PPUSH
19447: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
19451: LD_VAR 0 1
19455: PPUSH
19456: CALL_OW 110
19460: PUSH
19461: LD_INT 13
19463: EQUAL
19464: IFFALSE 19595
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
19466: LD_ADDR_VAR 0 3
19470: PUSH
19471: LD_EXP 66
19475: PPUSH
19476: LD_INT 81
19478: PUSH
19479: LD_INT 3
19481: PUSH
19482: EMPTY
19483: LIST
19484: LIST
19485: PPUSH
19486: CALL_OW 70
19490: ST_TO_ADDR
// if GetLives ( i ) < 650 then
19491: LD_VAR 0 1
19495: PPUSH
19496: CALL_OW 256
19500: PUSH
19501: LD_INT 650
19503: LESS
19504: IFFALSE 19529
// begin ComStop ( i ) ;
19506: LD_VAR 0 1
19510: PPUSH
19511: CALL_OW 141
// SetTag ( i , 0 ) ;
19515: LD_VAR 0 1
19519: PPUSH
19520: LD_INT 0
19522: PPUSH
19523: CALL_OW 109
// continue ;
19527: GO 19062
// end ; if enemy then
19529: LD_VAR 0 3
19533: IFFALSE 19573
// begin if not HasTask ( i ) then
19535: LD_VAR 0 1
19539: PPUSH
19540: CALL_OW 314
19544: NOT
19545: IFFALSE 19571
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
19547: LD_VAR 0 1
19551: PPUSH
19552: LD_VAR 0 3
19556: PPUSH
19557: LD_VAR 0 1
19561: PPUSH
19562: CALL_OW 74
19566: PPUSH
19567: CALL_OW 115
// end else
19571: GO 19595
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
19573: LD_VAR 0 1
19577: PPUSH
19578: LD_INT 105
19580: PUSH
19581: LD_INT 35
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: EMPTY
19589: LIST
19590: PPUSH
19591: CALL 94910 0 2
// end ; end ;
19595: GO 19062
19597: POP
19598: POP
// end ;
19599: PPOPN 3
19601: END
// every 0 0$1 trigger ruTanks2 and ruActiveAttacks do var i , mech , enemy ;
19602: LD_EXP 80
19606: PUSH
19607: LD_EXP 22
19611: AND
19612: IFFALSE 20179
19614: GO 19616
19616: DISABLE
19617: LD_INT 0
19619: PPUSH
19620: PPUSH
19621: PPUSH
// begin enable ;
19622: ENABLE
// if not ruTanks2 then
19623: LD_EXP 80
19627: NOT
19628: IFFALSE 19632
// exit ;
19630: GO 20179
// for i in ruTanks2 do
19632: LD_ADDR_VAR 0 1
19636: PUSH
19637: LD_EXP 80
19641: PUSH
19642: FOR_IN
19643: IFFALSE 20177
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
19645: LD_VAR 0 1
19649: PPUSH
19650: CALL_OW 302
19654: NOT
19655: PUSH
19656: LD_VAR 0 1
19660: PPUSH
19661: CALL_OW 255
19665: PUSH
19666: LD_INT 3
19668: NONEQUAL
19669: OR
19670: IFFALSE 19690
// begin ruTanks := ruTanks diff i ;
19672: LD_ADDR_EXP 79
19676: PUSH
19677: LD_EXP 79
19681: PUSH
19682: LD_VAR 0 1
19686: DIFF
19687: ST_TO_ADDR
// continue ;
19688: GO 19642
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
19690: LD_VAR 0 1
19694: PPUSH
19695: CALL_OW 110
19699: NOT
19700: PUSH
19701: LD_VAR 0 1
19705: PPUSH
19706: CALL_OW 110
19710: PUSH
19711: LD_INT 0
19713: EQUAL
19714: OR
19715: IFFALSE 19888
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase2 ) then
19717: LD_VAR 0 1
19721: PPUSH
19722: CALL_OW 262
19726: PUSH
19727: LD_INT 1
19729: EQUAL
19730: PUSH
19731: LD_VAR 0 1
19735: PPUSH
19736: CALL_OW 261
19740: PUSH
19741: LD_INT 50
19743: LESS
19744: AND
19745: PUSH
19746: LD_EXP 69
19750: PPUSH
19751: CALL_OW 302
19755: AND
19756: IFFALSE 19843
// begin ComMoveXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) ;
19758: LD_VAR 0 1
19762: PPUSH
19763: LD_EXP 69
19767: PPUSH
19768: CALL_OW 250
19772: PPUSH
19773: LD_EXP 69
19777: PPUSH
19778: CALL_OW 251
19782: PPUSH
19783: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
19787: LD_INT 35
19789: PPUSH
19790: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) < 6 ;
19794: LD_VAR 0 1
19798: PPUSH
19799: LD_EXP 69
19803: PPUSH
19804: CALL_OW 250
19808: PPUSH
19809: LD_EXP 69
19813: PPUSH
19814: CALL_OW 251
19818: PPUSH
19819: CALL_OW 297
19823: PUSH
19824: LD_INT 6
19826: LESS
19827: IFFALSE 19787
// SetFuel ( i , 100 ) ;
19829: LD_VAR 0 1
19833: PPUSH
19834: LD_INT 100
19836: PPUSH
19837: CALL_OW 240
// end else
19841: GO 19888
// if not IsInArea ( i , ruParkingArea2 ) then
19843: LD_VAR 0 1
19847: PPUSH
19848: LD_EXP 83
19852: PPUSH
19853: CALL_OW 308
19857: NOT
19858: IFFALSE 19876
// ComMoveToArea ( i , ruParkingArea2 ) else
19860: LD_VAR 0 1
19864: PPUSH
19865: LD_EXP 83
19869: PPUSH
19870: CALL_OW 113
19874: GO 19888
// SetTag ( i , tParking ) ;
19876: LD_VAR 0 1
19880: PPUSH
19881: LD_INT 12
19883: PPUSH
19884: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
19888: LD_VAR 0 1
19892: PPUSH
19893: CALL_OW 110
19897: PUSH
19898: LD_INT 12
19900: EQUAL
19901: IFFALSE 20031
// begin if GetLives ( i ) < 650 then
19903: LD_VAR 0 1
19907: PPUSH
19908: CALL_OW 256
19912: PUSH
19913: LD_INT 650
19915: LESS
19916: IFFALSE 20008
// begin if not IsDrivenBy ( i ) then
19918: LD_VAR 0 1
19922: PPUSH
19923: CALL_OW 311
19927: NOT
19928: IFFALSE 19932
// continue ;
19930: GO 19642
// mech := IsDrivenBy ( i ) ;
19932: LD_ADDR_VAR 0 2
19936: PUSH
19937: LD_VAR 0 1
19941: PPUSH
19942: CALL_OW 311
19946: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
19947: LD_VAR 0 2
19951: PPUSH
19952: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
19956: LD_VAR 0 2
19960: PPUSH
19961: LD_VAR 0 1
19965: PPUSH
19966: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
19970: LD_INT 35
19972: PPUSH
19973: CALL_OW 67
// until GetLives ( i ) = 1000 ;
19977: LD_VAR 0 1
19981: PPUSH
19982: CALL_OW 256
19986: PUSH
19987: LD_INT 1000
19989: EQUAL
19990: IFFALSE 19970
// ComEnterUnit ( mech , i ) ;
19992: LD_VAR 0 2
19996: PPUSH
19997: LD_VAR 0 1
20001: PPUSH
20002: CALL_OW 120
// end else
20006: GO 20031
// if IsDrivenBy ( i ) then
20008: LD_VAR 0 1
20012: PPUSH
20013: CALL_OW 311
20017: IFFALSE 20031
// SetTag ( i , tAttack ) ;
20019: LD_VAR 0 1
20023: PPUSH
20024: LD_INT 13
20026: PPUSH
20027: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
20031: LD_VAR 0 1
20035: PPUSH
20036: CALL_OW 110
20040: PUSH
20041: LD_INT 13
20043: EQUAL
20044: IFFALSE 20175
// begin enemy := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
20046: LD_ADDR_VAR 0 3
20050: PUSH
20051: LD_EXP 67
20055: PPUSH
20056: LD_INT 81
20058: PUSH
20059: LD_INT 3
20061: PUSH
20062: EMPTY
20063: LIST
20064: LIST
20065: PPUSH
20066: CALL_OW 70
20070: ST_TO_ADDR
// if GetLives ( i ) < 650 then
20071: LD_VAR 0 1
20075: PPUSH
20076: CALL_OW 256
20080: PUSH
20081: LD_INT 650
20083: LESS
20084: IFFALSE 20109
// begin ComStop ( i ) ;
20086: LD_VAR 0 1
20090: PPUSH
20091: CALL_OW 141
// SetTag ( i , 0 ) ;
20095: LD_VAR 0 1
20099: PPUSH
20100: LD_INT 0
20102: PPUSH
20103: CALL_OW 109
// continue ;
20107: GO 19642
// end ; if enemy then
20109: LD_VAR 0 3
20113: IFFALSE 20153
// begin if not HasTask ( i ) then
20115: LD_VAR 0 1
20119: PPUSH
20120: CALL_OW 314
20124: NOT
20125: IFFALSE 20151
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20127: LD_VAR 0 1
20131: PPUSH
20132: LD_VAR 0 3
20136: PPUSH
20137: LD_VAR 0 1
20141: PPUSH
20142: CALL_OW 74
20146: PPUSH
20147: CALL_OW 115
// end else
20151: GO 20175
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20153: LD_VAR 0 1
20157: PPUSH
20158: LD_INT 105
20160: PUSH
20161: LD_INT 35
20163: PUSH
20164: EMPTY
20165: LIST
20166: LIST
20167: PUSH
20168: EMPTY
20169: LIST
20170: PPUSH
20171: CALL 94910 0 2
// end ; end ;
20175: GO 19642
20177: POP
20178: POP
// end ;
20179: PPOPN 3
20181: END
// every 5 5$00 trigger Count ( ruExtraTanks ) do
20182: LD_EXP 81
20186: PPUSH
20187: CALL 56717 0 1
20191: IFFALSE 20204
20193: GO 20195
20195: DISABLE
// begin enable ;
20196: ENABLE
// RaiseSailEvent ( EExtraAttack ) ;
20197: LD_INT 106
20199: PPUSH
20200: CALL_OW 427
// end ;
20204: END
// export function RussianExtraAttack ; var i , tmp ; begin
20205: LD_INT 0
20207: PPUSH
20208: PPUSH
20209: PPUSH
// tmp := UnitFilter ( ruExtraTanks , [ f_ok ] ) ;
20210: LD_ADDR_VAR 0 3
20214: PUSH
20215: LD_EXP 81
20219: PPUSH
20220: LD_INT 50
20222: PUSH
20223: EMPTY
20224: LIST
20225: PPUSH
20226: CALL_OW 72
20230: ST_TO_ADDR
// ruExtraTanks := ruExtraTanks diff tmp ;
20231: LD_ADDR_EXP 81
20235: PUSH
20236: LD_EXP 81
20240: PUSH
20241: LD_VAR 0 3
20245: DIFF
20246: ST_TO_ADDR
// ComAgressiveMove ( tmp , 105 , 35 ) ;
20247: LD_VAR 0 3
20251: PPUSH
20252: LD_INT 105
20254: PPUSH
20255: LD_INT 35
20257: PPUSH
20258: CALL_OW 114
// wait ( 0 0$5 ) ;
20262: LD_INT 175
20264: PPUSH
20265: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
20269: LD_INT 35
20271: PPUSH
20272: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
20276: LD_ADDR_VAR 0 3
20280: PUSH
20281: LD_VAR 0 3
20285: PPUSH
20286: LD_INT 50
20288: PUSH
20289: EMPTY
20290: LIST
20291: PPUSH
20292: CALL_OW 72
20296: ST_TO_ADDR
// for i in tmp do
20297: LD_ADDR_VAR 0 2
20301: PUSH
20302: LD_VAR 0 3
20306: PUSH
20307: FOR_IN
20308: IFFALSE 20334
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
20310: LD_VAR 0 2
20314: PPUSH
20315: LD_INT 105
20317: PUSH
20318: LD_INT 35
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: PUSH
20325: EMPTY
20326: LIST
20327: PPUSH
20328: CALL 94910 0 2
20332: GO 20307
20334: POP
20335: POP
// until not tmp ;
20336: LD_VAR 0 3
20340: NOT
20341: IFFALSE 20269
// end ;
20343: LD_VAR 0 1
20347: RET
// export function PrepareRussianAttack ( strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
20348: LD_INT 0
20350: PPUSH
20351: PPUSH
20352: PPUSH
20353: PPUSH
20354: PPUSH
20355: PPUSH
20356: PPUSH
20357: PPUSH
20358: PPUSH
20359: PPUSH
// result := [ ] ;
20360: LD_ADDR_VAR 0 2
20364: PUSH
20365: EMPTY
20366: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
20367: LD_ADDR_VAR 0 7
20371: PUSH
20372: LD_INT 4
20374: PUSH
20375: LD_INT 5
20377: PUSH
20378: LD_INT 6
20380: PUSH
20381: LD_INT 7
20383: PUSH
20384: EMPTY
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: PUSH
20390: LD_OWVAR 67
20394: ARRAY
20395: ST_TO_ADDR
// area := arAttackSpawn2Area ;
20396: LD_ADDR_VAR 0 8
20400: PUSH
20401: LD_INT 19
20403: ST_TO_ADDR
// parking := ruGatPointArea ;
20404: LD_ADDR_VAR 0 9
20408: PUSH
20409: LD_INT 32
20411: ST_TO_ADDR
// dir := 5 ;
20412: LD_ADDR_VAR 0 10
20416: PUSH
20417: LD_INT 5
20419: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) then
20420: LD_VAR 0 8
20424: PPUSH
20425: LD_INT 2
20427: PUSH
20428: LD_INT 22
20430: PUSH
20431: LD_INT 0
20433: PUSH
20434: EMPTY
20435: LIST
20436: LIST
20437: PUSH
20438: LD_INT 22
20440: PUSH
20441: LD_INT 6
20443: PUSH
20444: EMPTY
20445: LIST
20446: LIST
20447: PUSH
20448: EMPTY
20449: LIST
20450: LIST
20451: LIST
20452: PPUSH
20453: CALL_OW 70
20457: IFFALSE 20518
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) do
20459: LD_ADDR_VAR 0 3
20463: PUSH
20464: LD_VAR 0 8
20468: PPUSH
20469: LD_INT 2
20471: PUSH
20472: LD_INT 22
20474: PUSH
20475: LD_INT 0
20477: PUSH
20478: EMPTY
20479: LIST
20480: LIST
20481: PUSH
20482: LD_INT 22
20484: PUSH
20485: LD_INT 6
20487: PUSH
20488: EMPTY
20489: LIST
20490: LIST
20491: PUSH
20492: EMPTY
20493: LIST
20494: LIST
20495: LIST
20496: PPUSH
20497: CALL_OW 70
20501: PUSH
20502: FOR_IN
20503: IFFALSE 20516
// RemoveUnit ( i ) ;
20505: LD_VAR 0 3
20509: PPUSH
20510: CALL_OW 64
20514: GO 20502
20516: POP
20517: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) then
20518: LD_VAR 0 8
20522: PPUSH
20523: LD_INT 3
20525: PUSH
20526: LD_INT 21
20528: PUSH
20529: LD_INT 1
20531: PUSH
20532: EMPTY
20533: LIST
20534: LIST
20535: PUSH
20536: EMPTY
20537: LIST
20538: LIST
20539: PUSH
20540: LD_INT 22
20542: PUSH
20543: LD_INT 1
20545: PUSH
20546: EMPTY
20547: LIST
20548: LIST
20549: PUSH
20550: EMPTY
20551: LIST
20552: LIST
20553: PPUSH
20554: CALL_OW 70
20558: IFFALSE 20622
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) do
20560: LD_ADDR_VAR 0 3
20564: PUSH
20565: LD_VAR 0 8
20569: PPUSH
20570: LD_INT 3
20572: PUSH
20573: LD_INT 21
20575: PUSH
20576: LD_INT 1
20578: PUSH
20579: EMPTY
20580: LIST
20581: LIST
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: PUSH
20587: LD_INT 22
20589: PUSH
20590: LD_INT 1
20592: PUSH
20593: EMPTY
20594: LIST
20595: LIST
20596: PUSH
20597: EMPTY
20598: LIST
20599: LIST
20600: PPUSH
20601: CALL_OW 70
20605: PUSH
20606: FOR_IN
20607: IFFALSE 20620
// KillUnit ( i ) ;
20609: LD_VAR 0 3
20613: PPUSH
20614: CALL_OW 66
20618: GO 20606
20620: POP
20621: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) then
20622: LD_VAR 0 8
20626: PPUSH
20627: LD_INT 21
20629: PUSH
20630: LD_INT 1
20632: PUSH
20633: EMPTY
20634: LIST
20635: LIST
20636: PUSH
20637: LD_INT 22
20639: PUSH
20640: LD_INT 1
20642: PUSH
20643: EMPTY
20644: LIST
20645: LIST
20646: PUSH
20647: EMPTY
20648: LIST
20649: LIST
20650: PPUSH
20651: CALL_OW 70
20655: IFFALSE 20718
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) do
20657: LD_ADDR_VAR 0 3
20661: PUSH
20662: LD_VAR 0 8
20666: PPUSH
20667: LD_INT 21
20669: PUSH
20670: LD_INT 1
20672: PUSH
20673: EMPTY
20674: LIST
20675: LIST
20676: PUSH
20677: LD_INT 22
20679: PUSH
20680: LD_INT 1
20682: PUSH
20683: EMPTY
20684: LIST
20685: LIST
20686: PUSH
20687: EMPTY
20688: LIST
20689: LIST
20690: PPUSH
20691: CALL_OW 70
20695: PUSH
20696: FOR_IN
20697: IFFALSE 20716
// ComMoveXY ( i , 92 , 92 ) ;
20699: LD_VAR 0 3
20703: PPUSH
20704: LD_INT 92
20706: PPUSH
20707: LD_INT 92
20709: PPUSH
20710: CALL_OW 111
20714: GO 20696
20716: POP
20717: POP
// repeat wait ( 0 0$1 ) ;
20718: LD_INT 35
20720: PPUSH
20721: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
20725: LD_VAR 0 8
20729: PPUSH
20730: LD_INT 50
20732: PUSH
20733: EMPTY
20734: LIST
20735: PPUSH
20736: CALL_OW 70
20740: NOT
20741: IFFALSE 20718
// InitHC_All ( ) ;
20743: CALL_OW 584
// InitVc ;
20747: CALL_OW 20
// for i := 1 to [ 3 , 4 , 4 , 5 ] [ Difficulty ] + strength do
20751: LD_ADDR_VAR 0 3
20755: PUSH
20756: DOUBLE
20757: LD_INT 1
20759: DEC
20760: ST_TO_ADDR
20761: LD_INT 3
20763: PUSH
20764: LD_INT 4
20766: PUSH
20767: LD_INT 4
20769: PUSH
20770: LD_INT 5
20772: PUSH
20773: EMPTY
20774: LIST
20775: LIST
20776: LIST
20777: LIST
20778: PUSH
20779: LD_OWVAR 67
20783: ARRAY
20784: PUSH
20785: LD_VAR 0 1
20789: PLUS
20790: PUSH
20791: FOR_TO
20792: IFFALSE 21099
// begin uc_side := 6 ;
20794: LD_ADDR_OWVAR 20
20798: PUSH
20799: LD_INT 6
20801: ST_TO_ADDR
// uc_nation := nation_russian ;
20802: LD_ADDR_OWVAR 21
20806: PUSH
20807: LD_INT 3
20809: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
20810: LD_ADDR_VAR 0 11
20814: PUSH
20815: LD_INT 1
20817: PUSH
20818: LD_INT 3
20820: PUSH
20821: LD_INT 3
20823: PUSH
20824: LD_INT 3
20826: PUSH
20827: EMPTY
20828: LIST
20829: LIST
20830: LIST
20831: LIST
20832: PUSH
20833: LD_INT 1
20835: PPUSH
20836: LD_INT 4
20838: PPUSH
20839: CALL_OW 12
20843: ARRAY
20844: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
20845: LD_INT 22
20847: PUSH
20848: LD_INT 24
20850: PUSH
20851: LD_INT 23
20853: PUSH
20854: EMPTY
20855: LIST
20856: LIST
20857: LIST
20858: PUSH
20859: LD_VAR 0 3
20863: PUSH
20864: LD_INT 3
20866: MOD
20867: PUSH
20868: LD_INT 1
20870: PLUS
20871: ARRAY
20872: PPUSH
20873: LD_INT 3
20875: PUSH
20876: LD_INT 1
20878: PUSH
20879: EMPTY
20880: LIST
20881: LIST
20882: PUSH
20883: LD_INT 1
20885: PPUSH
20886: LD_INT 2
20888: PPUSH
20889: CALL_OW 12
20893: ARRAY
20894: PPUSH
20895: LD_VAR 0 11
20899: PPUSH
20900: LD_INT 45
20902: PUSH
20903: LD_INT 46
20905: PUSH
20906: LD_INT 43
20908: PUSH
20909: EMPTY
20910: LIST
20911: LIST
20912: LIST
20913: PUSH
20914: LD_VAR 0 3
20918: PUSH
20919: LD_INT 3
20921: MOD
20922: PUSH
20923: LD_INT 1
20925: PLUS
20926: ARRAY
20927: PPUSH
20928: LD_INT 100
20930: PPUSH
20931: CALL 59455 0 5
// veh := CreateVehicle ;
20935: LD_ADDR_VAR 0 6
20939: PUSH
20940: CALL_OW 45
20944: ST_TO_ADDR
// SetDir ( veh , dir ) ;
20945: LD_VAR 0 6
20949: PPUSH
20950: LD_VAR 0 10
20954: PPUSH
20955: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
20959: LD_VAR 0 6
20963: PPUSH
20964: LD_VAR 0 8
20968: PPUSH
20969: LD_INT 0
20971: PPUSH
20972: CALL_OW 49
// if control = control_manual then
20976: LD_VAR 0 11
20980: PUSH
20981: LD_INT 1
20983: EQUAL
20984: IFFALSE 21038
// begin uc_side := 6 ;
20986: LD_ADDR_OWVAR 20
20990: PUSH
20991: LD_INT 6
20993: ST_TO_ADDR
// uc_nation := nation_russian ;
20994: LD_ADDR_OWVAR 21
20998: PUSH
20999: LD_INT 3
21001: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
21002: LD_INT 0
21004: PPUSH
21005: LD_VAR 0 7
21009: PPUSH
21010: CALL_OW 383
// un := CreateHuman ;
21014: LD_ADDR_VAR 0 5
21018: PUSH
21019: CALL_OW 44
21023: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
21024: LD_VAR 0 5
21028: PPUSH
21029: LD_VAR 0 6
21033: PPUSH
21034: CALL_OW 52
// end ; repeat ComMoveToArea ( veh , parking ) ;
21038: LD_VAR 0 6
21042: PPUSH
21043: LD_VAR 0 9
21047: PPUSH
21048: CALL_OW 113
// wait ( 0 0$3 ) ;
21052: LD_INT 105
21054: PPUSH
21055: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
21059: LD_VAR 0 8
21063: PPUSH
21064: LD_INT 50
21066: PUSH
21067: EMPTY
21068: LIST
21069: PPUSH
21070: CALL_OW 70
21074: NOT
21075: IFFALSE 21038
// result := Join ( result , veh ) ;
21077: LD_ADDR_VAR 0 2
21081: PUSH
21082: LD_VAR 0 2
21086: PPUSH
21087: LD_VAR 0 6
21091: PPUSH
21092: CALL 92306 0 2
21096: ST_TO_ADDR
// end ;
21097: GO 20791
21099: POP
21100: POP
// for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
21101: LD_ADDR_VAR 0 3
21105: PUSH
21106: DOUBLE
21107: LD_INT 1
21109: DEC
21110: ST_TO_ADDR
21111: LD_INT 2
21113: PUSH
21114: LD_INT 2
21116: PUSH
21117: LD_INT 3
21119: PUSH
21120: LD_INT 4
21122: PUSH
21123: EMPTY
21124: LIST
21125: LIST
21126: LIST
21127: LIST
21128: PUSH
21129: LD_OWVAR 67
21133: ARRAY
21134: PUSH
21135: FOR_TO
21136: IFFALSE 21292
// begin uc_side := 6 ;
21138: LD_ADDR_OWVAR 20
21142: PUSH
21143: LD_INT 6
21145: ST_TO_ADDR
// uc_nation := nation_russian ;
21146: LD_ADDR_OWVAR 21
21150: PUSH
21151: LD_INT 3
21153: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
21154: LD_INT 0
21156: PPUSH
21157: LD_VAR 0 7
21161: PPUSH
21162: CALL_OW 381
// un := CreateHuman ;
21166: LD_ADDR_VAR 0 5
21170: PUSH
21171: CALL_OW 44
21175: ST_TO_ADDR
// if Prob ( [ 35 , 60 , 70 , 80 ] [ Difficulty ] ) then
21176: LD_INT 35
21178: PUSH
21179: LD_INT 60
21181: PUSH
21182: LD_INT 70
21184: PUSH
21185: LD_INT 80
21187: PUSH
21188: EMPTY
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: PUSH
21194: LD_OWVAR 67
21198: ARRAY
21199: PPUSH
21200: CALL_OW 13
21204: IFFALSE 21218
// SetClass ( un , class_bazooker ) ;
21206: LD_VAR 0 5
21210: PPUSH
21211: LD_INT 9
21213: PPUSH
21214: CALL_OW 336
// SetDir ( un , dir ) ;
21218: LD_VAR 0 5
21222: PPUSH
21223: LD_VAR 0 10
21227: PPUSH
21228: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
21232: LD_VAR 0 5
21236: PPUSH
21237: LD_VAR 0 8
21241: PPUSH
21242: LD_INT 0
21244: PPUSH
21245: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
21249: LD_VAR 0 5
21253: PPUSH
21254: LD_VAR 0 9
21258: PPUSH
21259: CALL_OW 113
// wait ( 0 0$1 ) ;
21263: LD_INT 35
21265: PPUSH
21266: CALL_OW 67
// result := Join ( result , un ) ;
21270: LD_ADDR_VAR 0 2
21274: PUSH
21275: LD_VAR 0 2
21279: PPUSH
21280: LD_VAR 0 5
21284: PPUSH
21285: CALL 92306 0 2
21289: ST_TO_ADDR
// end ;
21290: GO 21135
21292: POP
21293: POP
// end ;
21294: LD_VAR 0 2
21298: RET
// export function SendRussianAttack ( wave ) ; var path , attackers , e , i , enemy ; begin
21299: LD_INT 0
21301: PPUSH
21302: PPUSH
21303: PPUSH
21304: PPUSH
21305: PPUSH
21306: PPUSH
// russianWaveAttack := Inc ( russianWaveAttack ) ;
21307: LD_ADDR_EXP 18
21311: PUSH
21312: LD_EXP 18
21316: PPUSH
21317: CALL 93667 0 1
21321: ST_TO_ADDR
// path := [ [ 99 , 91 ] , [ 78 , 50 ] , [ 91 , 45 ] ] ;
21322: LD_ADDR_VAR 0 3
21326: PUSH
21327: LD_INT 99
21329: PUSH
21330: LD_INT 91
21332: PUSH
21333: EMPTY
21334: LIST
21335: LIST
21336: PUSH
21337: LD_INT 78
21339: PUSH
21340: LD_INT 50
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 91
21349: PUSH
21350: LD_INT 45
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: LIST
21361: ST_TO_ADDR
// attackers := PrepareRussianAttack ( wave ) ;
21362: LD_ADDR_VAR 0 4
21366: PUSH
21367: LD_VAR 0 1
21371: PPUSH
21372: CALL 20348 0 1
21376: ST_TO_ADDR
// ComAgressiveMove ( UnitFilter ( attackers , [ f_type , unit_human ] ) , 108 , 60 ) ;
21377: LD_VAR 0 4
21381: PPUSH
21382: LD_INT 21
21384: PUSH
21385: LD_INT 1
21387: PUSH
21388: EMPTY
21389: LIST
21390: LIST
21391: PPUSH
21392: CALL_OW 72
21396: PPUSH
21397: LD_INT 108
21399: PPUSH
21400: LD_INT 60
21402: PPUSH
21403: CALL_OW 114
// DRussianNextAttack ;
21407: CALL 28478 0 0
// repeat wait ( 0 0$2 ) ;
21411: LD_INT 70
21413: PPUSH
21414: CALL_OW 67
// enemy := FilterAllUnits ( [ f_enemy , 6 ] ) ;
21418: LD_ADDR_VAR 0 7
21422: PUSH
21423: LD_INT 81
21425: PUSH
21426: LD_INT 6
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PPUSH
21433: CALL_OW 69
21437: ST_TO_ADDR
// attackers := UnitFilter ( attackers , [ f_ok ] ) ;
21438: LD_ADDR_VAR 0 4
21442: PUSH
21443: LD_VAR 0 4
21447: PPUSH
21448: LD_INT 50
21450: PUSH
21451: EMPTY
21452: LIST
21453: PPUSH
21454: CALL_OW 72
21458: ST_TO_ADDR
// for i in attackers do
21459: LD_ADDR_VAR 0 6
21463: PUSH
21464: LD_VAR 0 4
21468: PUSH
21469: FOR_IN
21470: IFFALSE 21846
// begin if not IsOk ( i ) then
21472: LD_VAR 0 6
21476: PPUSH
21477: CALL_OW 302
21481: NOT
21482: IFFALSE 21502
// begin attackers := attackers diff i ;
21484: LD_ADDR_VAR 0 4
21488: PUSH
21489: LD_VAR 0 4
21493: PUSH
21494: LD_VAR 0 6
21498: DIFF
21499: ST_TO_ADDR
// continue ;
21500: GO 21469
// end ; if GetType ( i ) = unit_vehicle then
21502: LD_VAR 0 6
21506: PPUSH
21507: CALL_OW 247
21511: PUSH
21512: LD_INT 2
21514: EQUAL
21515: IFFALSE 21533
// AgressiveMove ( i , path ) else
21517: LD_VAR 0 6
21521: PPUSH
21522: LD_VAR 0 3
21526: PPUSH
21527: CALL 94910 0 2
21531: GO 21844
// begin if GetClass ( i ) = class_bazooker then
21533: LD_VAR 0 6
21537: PPUSH
21538: CALL_OW 257
21542: PUSH
21543: LD_INT 9
21545: EQUAL
21546: IFFALSE 21820
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 12 then
21548: LD_VAR 0 6
21552: PPUSH
21553: LD_VAR 0 7
21557: PPUSH
21558: LD_VAR 0 6
21562: PPUSH
21563: CALL_OW 74
21567: PPUSH
21568: CALL_OW 296
21572: PUSH
21573: LD_INT 12
21575: GREATER
21576: IFFALSE 21604
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21578: LD_VAR 0 6
21582: PPUSH
21583: LD_VAR 0 7
21587: PPUSH
21588: LD_VAR 0 6
21592: PPUSH
21593: CALL_OW 74
21597: PPUSH
21598: CALL 96524 0 2
21602: GO 21818
// begin e := NearestUnitToUnit ( enemy , i ) ;
21604: LD_ADDR_VAR 0 5
21608: PUSH
21609: LD_VAR 0 7
21613: PPUSH
21614: LD_VAR 0 6
21618: PPUSH
21619: CALL_OW 74
21623: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
21624: LD_INT 1
21626: PPUSH
21627: LD_INT 3
21629: PPUSH
21630: CALL_OW 12
21634: PUSH
21635: LD_INT 1
21637: DOUBLE
21638: EQUAL
21639: IFTRUE 21643
21641: GO 21660
21643: POP
// ComAttackUnit ( i , e ) ; 2 :
21644: LD_VAR 0 6
21648: PPUSH
21649: LD_VAR 0 5
21653: PPUSH
21654: CALL_OW 115
21658: GO 21818
21660: LD_INT 2
21662: DOUBLE
21663: EQUAL
21664: IFTRUE 21668
21666: GO 21746
21668: POP
// begin ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ;
21669: LD_VAR 0 6
21673: PPUSH
21674: LD_VAR 0 5
21678: PPUSH
21679: CALL_OW 250
21683: PPUSH
21684: LD_VAR 0 5
21688: PPUSH
21689: CALL_OW 251
21693: PPUSH
21694: CALL_OW 153
// if GetType ( e ) <> unit_building and not dialogRussianSpaceAmmo then
21698: LD_VAR 0 5
21702: PPUSH
21703: CALL_OW 247
21707: PUSH
21708: LD_INT 3
21710: NONEQUAL
21711: PUSH
21712: LD_EXP 17
21716: NOT
21717: AND
21718: IFFALSE 21744
// begin dialogRussianSpaceAmmo := true ;
21720: LD_ADDR_EXP 17
21724: PUSH
21725: LD_INT 1
21727: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21728: LD_INT 210
21730: PPUSH
21731: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21735: LD_VAR 0 5
21739: PPUSH
21740: CALL 28525 0 1
// end ; end ; 3 :
21744: GO 21818
21746: LD_INT 3
21748: DOUBLE
21749: EQUAL
21750: IFTRUE 21754
21752: GO 21817
21754: POP
// begin ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ;
21755: LD_VAR 0 6
21759: PPUSH
21760: LD_VAR 0 5
21764: PPUSH
21765: CALL_OW 250
21769: PPUSH
21770: LD_VAR 0 5
21774: PPUSH
21775: CALL_OW 251
21779: PPUSH
21780: CALL_OW 154
// if not dialogRussianSpaceAmmo then
21784: LD_EXP 17
21788: NOT
21789: IFFALSE 21815
// begin dialogRussianSpaceAmmo := true ;
21791: LD_ADDR_EXP 17
21795: PUSH
21796: LD_INT 1
21798: ST_TO_ADDR
// wait ( 0 0$6 ) ;
21799: LD_INT 210
21801: PPUSH
21802: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
21806: LD_VAR 0 5
21810: PPUSH
21811: CALL 28525 0 1
// end ; end ; end ;
21815: GO 21818
21817: POP
// end ; end else
21818: GO 21844
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
21820: LD_VAR 0 6
21824: PPUSH
21825: LD_VAR 0 7
21829: PPUSH
21830: LD_VAR 0 6
21834: PPUSH
21835: CALL_OW 74
21839: PPUSH
21840: CALL 96524 0 2
// end ; end ;
21844: GO 21469
21846: POP
21847: POP
// until not attackers ;
21848: LD_VAR 0 4
21852: NOT
21853: IFFALSE 21411
// end ;
21855: LD_VAR 0 2
21859: RET
// every 6 6$30 trigger epsilon and firstAttack do var i , un , tmp ;
21860: LD_EXP 10
21864: PUSH
21865: LD_EXP 16
21869: AND
21870: IFFALSE 21982
21872: GO 21874
21874: DISABLE
21875: LD_INT 0
21877: PPUSH
21878: PPUSH
21879: PPUSH
// begin InitHC_All ( ) ;
21880: CALL_OW 584
// for i := 1 to 3 do
21884: LD_ADDR_VAR 0 1
21888: PUSH
21889: DOUBLE
21890: LD_INT 1
21892: DEC
21893: ST_TO_ADDR
21894: LD_INT 3
21896: PUSH
21897: FOR_TO
21898: IFFALSE 21980
// begin uc_side := 6 ;
21900: LD_ADDR_OWVAR 20
21904: PUSH
21905: LD_INT 6
21907: ST_TO_ADDR
// uc_nation := nation_russian ;
21908: LD_ADDR_OWVAR 21
21912: PUSH
21913: LD_INT 3
21915: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
21916: LD_INT 0
21918: PPUSH
21919: LD_INT 3
21921: PPUSH
21922: CALL_OW 381
// un := CreateHuman ;
21926: LD_ADDR_VAR 0 2
21930: PUSH
21931: CALL_OW 44
21935: ST_TO_ADDR
// SetDir ( un , 2 ) ;
21936: LD_VAR 0 2
21940: PPUSH
21941: LD_INT 2
21943: PPUSH
21944: CALL_OW 233
// PlaceUnitArea ( un , ruNorthSpawnArea , false ) ;
21948: LD_VAR 0 2
21952: PPUSH
21953: LD_INT 33
21955: PPUSH
21956: LD_INT 0
21958: PPUSH
21959: CALL_OW 49
// ComAgressiveMove ( un , 52 , 16 ) ;
21963: LD_VAR 0 2
21967: PPUSH
21968: LD_INT 52
21970: PPUSH
21971: LD_INT 16
21973: PPUSH
21974: CALL_OW 114
// end ;
21978: GO 21897
21980: POP
21981: POP
// end ;
21982: PPOPN 3
21984: END
// every 5 5$00 trigger IsOk ( ruBase ) and not ruTransportDestroyed do var cargo ;
21985: LD_EXP 68
21989: PPUSH
21990: CALL_OW 302
21994: PUSH
21995: LD_EXP 78
21999: NOT
22000: AND
22001: IFFALSE 22238
22003: GO 22005
22005: DISABLE
22006: LD_INT 0
22008: PPUSH
// begin enable ;
22009: ENABLE
// uc_side := 3 ;
22010: LD_ADDR_OWVAR 20
22014: PUSH
22015: LD_INT 3
22017: ST_TO_ADDR
// uc_nation := nation_russian ;
22018: LD_ADDR_OWVAR 21
22022: PUSH
22023: LD_INT 3
22025: ST_TO_ADDR
// PrepareVehicle ( ru_medium_tracked , engine_siberite , control_computer , ru_cargo_bay , 100 ) ;
22026: LD_INT 22
22028: PPUSH
22029: LD_INT 3
22031: PPUSH
22032: LD_INT 3
22034: PPUSH
22035: LD_INT 51
22037: PPUSH
22038: LD_INT 100
22040: PPUSH
22041: CALL 59455 0 5
// cargo := CreateVehicle ;
22045: LD_ADDR_VAR 0 1
22049: PUSH
22050: CALL_OW 45
22054: ST_TO_ADDR
// SetDir ( cargo , 5 ) ;
22055: LD_VAR 0 1
22059: PPUSH
22060: LD_INT 5
22062: PPUSH
22063: CALL_OW 233
// PlaceUnitXY ( cargo , 187 , 117 , false ) ;
22067: LD_VAR 0 1
22071: PPUSH
22072: LD_INT 187
22074: PPUSH
22075: LD_INT 117
22077: PPUSH
22078: LD_INT 0
22080: PPUSH
22081: CALL_OW 48
// SetCargo ( cargo , mat_cans , 100 ) ;
22085: LD_VAR 0 1
22089: PPUSH
22090: LD_INT 1
22092: PPUSH
22093: LD_INT 100
22095: PPUSH
22096: CALL_OW 290
// ComMoveUnit ( cargo , ruBase ) ;
22100: LD_VAR 0 1
22104: PPUSH
22105: LD_EXP 68
22109: PPUSH
22110: CALL_OW 112
// AddComGive ( cargo , ruBase ) ;
22114: LD_VAR 0 1
22118: PPUSH
22119: LD_EXP 68
22123: PPUSH
22124: CALL_OW 221
// AddComMoveXY ( cargo , 187 , 117 ) ;
22128: LD_VAR 0 1
22132: PPUSH
22133: LD_INT 187
22135: PPUSH
22136: LD_INT 117
22138: PPUSH
22139: CALL_OW 171
// wait ( 0 0$10 ) ;
22143: LD_INT 350
22145: PPUSH
22146: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
22150: LD_INT 35
22152: PPUSH
22153: CALL_OW 67
// if not HasTask ( cargo ) then
22157: LD_VAR 0 1
22161: PPUSH
22162: CALL_OW 314
22166: NOT
22167: IFFALSE 22184
// ComMoveXY ( cargo , 187 , 117 ) ;
22169: LD_VAR 0 1
22173: PPUSH
22174: LD_INT 187
22176: PPUSH
22177: LD_INT 117
22179: PPUSH
22180: CALL_OW 111
// until IsDead ( cargo ) or IsAt ( cargo , 187 , 117 ) ;
22184: LD_VAR 0 1
22188: PPUSH
22189: CALL_OW 301
22193: PUSH
22194: LD_VAR 0 1
22198: PPUSH
22199: LD_INT 187
22201: PPUSH
22202: LD_INT 117
22204: PPUSH
22205: CALL_OW 307
22209: OR
22210: IFFALSE 22150
// if IsAt ( cargo , 187 , 117 ) then
22212: LD_VAR 0 1
22216: PPUSH
22217: LD_INT 187
22219: PPUSH
22220: LD_INT 117
22222: PPUSH
22223: CALL_OW 307
22227: IFFALSE 22238
// RemoveUnit ( cargo ) ;
22229: LD_VAR 0 1
22233: PPUSH
22234: CALL_OW 64
// end ; end_of_file
22238: PPOPN 1
22240: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
22241: LD_VAR 0 1
22245: PPUSH
22246: CALL 49721 0 1
// if unit = Dietrich and not arabianAttack then
22250: LD_VAR 0 1
22254: PUSH
22255: LD_EXP 50
22259: EQUAL
22260: PUSH
22261: LD_EXP 4
22265: NOT
22266: AND
22267: IFFALSE 22276
// YouLost ( ArabDefeated ) ;
22269: LD_STRING ArabDefeated
22271: PPUSH
22272: CALL_OW 104
// if unit in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) and not arabianAttack then
22276: LD_VAR 0 1
22280: PUSH
22281: LD_INT 22
22283: PUSH
22284: LD_INT 2
22286: PUSH
22287: EMPTY
22288: LIST
22289: LIST
22290: PUSH
22291: LD_INT 25
22293: PUSH
22294: LD_INT 4
22296: PUSH
22297: EMPTY
22298: LIST
22299: LIST
22300: PUSH
22301: EMPTY
22302: LIST
22303: LIST
22304: PPUSH
22305: CALL_OW 69
22309: IN
22310: PUSH
22311: LD_EXP 4
22315: NOT
22316: AND
22317: IFFALSE 22326
// YouLost ( ArabDefeated ) ;
22319: LD_STRING ArabDefeated
22321: PPUSH
22322: CALL_OW 104
// if unit in JMMSquad then
22326: LD_VAR 0 1
22330: PUSH
22331: LD_EXP 45
22335: IN
22336: IFFALSE 22354
// JMMSquad := JMMSquad diff unit ;
22338: LD_ADDR_EXP 45
22342: PUSH
22343: LD_EXP 45
22347: PUSH
22348: LD_VAR 0 1
22352: DIFF
22353: ST_TO_ADDR
// if unit = Truman then
22354: LD_VAR 0 1
22358: PUSH
22359: LD_EXP 43
22363: EQUAL
22364: IFFALSE 22373
// YouLost ( Powell ) ;
22366: LD_STRING Powell
22368: PPUSH
22369: CALL_OW 104
// if unit = JMM then
22373: LD_VAR 0 1
22377: PUSH
22378: LD_EXP 23
22382: EQUAL
22383: IFFALSE 22392
// YouLost ( JMM ) ;
22385: LD_STRING JMM
22387: PPUSH
22388: CALL_OW 104
// if unit in arEscapist then
22392: LD_VAR 0 1
22396: PUSH
22397: LD_EXP 56
22401: IN
22402: IFFALSE 22420
// arEscapist := arEscapist diff unit ;
22404: LD_ADDR_EXP 56
22408: PUSH
22409: LD_EXP 56
22413: PUSH
22414: LD_VAR 0 1
22418: DIFF
22419: ST_TO_ADDR
// if unit in arAttackersInf then
22420: LD_VAR 0 1
22424: PUSH
22425: LD_EXP 57
22429: IN
22430: IFFALSE 22448
// arAttackersInf := arAttackersInf diff unit ;
22432: LD_ADDR_EXP 57
22436: PUSH
22437: LD_EXP 57
22441: PUSH
22442: LD_VAR 0 1
22446: DIFF
22447: ST_TO_ADDR
// if unit in arAttackersVeh then
22448: LD_VAR 0 1
22452: PUSH
22453: LD_EXP 58
22457: IN
22458: IFFALSE 22476
// arAttackersVeh := arAttackersVeh diff unit ;
22460: LD_ADDR_EXP 58
22464: PUSH
22465: LD_EXP 58
22469: PUSH
22470: LD_VAR 0 1
22474: DIFF
22475: ST_TO_ADDR
// if unit = Khatam then
22476: LD_VAR 0 1
22480: PUSH
22481: LD_EXP 36
22485: EQUAL
22486: IFFALSE 22496
// khatamStatus := false ;
22488: LD_ADDR_EXP 5
22492: PUSH
22493: LD_INT 0
22495: ST_TO_ADDR
// if unit = epsilon then
22496: LD_VAR 0 1
22500: PUSH
22501: LD_EXP 10
22505: EQUAL
22506: IFFALSE 22537
// begin hasBase := false ;
22508: LD_ADDR_EXP 9
22512: PUSH
22513: LD_INT 0
22515: ST_TO_ADDR
// epsilon := 0 ;
22516: LD_ADDR_EXP 10
22520: PUSH
22521: LD_INT 0
22523: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
22524: LD_INT 0
22526: PPUSH
22527: LD_INT 1
22529: PPUSH
22530: LD_INT 1
22532: PPUSH
22533: CALL_OW 324
// end ; if unit = Khatam then
22537: LD_VAR 0 1
22541: PUSH
22542: LD_EXP 36
22546: EQUAL
22547: IFFALSE 22559
// SaveVariable ( 0 , 10_KhatamStatus_1 ) ;
22549: LD_INT 0
22551: PPUSH
22552: LD_STRING 10_KhatamStatus_1
22554: PPUSH
22555: CALL_OW 39
// if unit in ruForces then
22559: LD_VAR 0 1
22563: PUSH
22564: LD_EXP 59
22568: IN
22569: IFFALSE 22587
// ruForces := ruForces diff unit ;
22571: LD_ADDR_EXP 59
22575: PUSH
22576: LD_EXP 59
22580: PUSH
22581: LD_VAR 0 1
22585: DIFF
22586: ST_TO_ADDR
// if unit in ruForces2 then
22587: LD_VAR 0 1
22591: PUSH
22592: LD_EXP 60
22596: IN
22597: IFFALSE 22615
// ruForces2 := ruForces2 diff unit ;
22599: LD_ADDR_EXP 60
22603: PUSH
22604: LD_EXP 60
22608: PUSH
22609: LD_VAR 0 1
22613: DIFF
22614: ST_TO_ADDR
// if unit in ruTanks then
22615: LD_VAR 0 1
22619: PUSH
22620: LD_EXP 79
22624: IN
22625: IFFALSE 22643
// ruTanks := ruTanks diff unit ;
22627: LD_ADDR_EXP 79
22631: PUSH
22632: LD_EXP 79
22636: PUSH
22637: LD_VAR 0 1
22641: DIFF
22642: ST_TO_ADDR
// if unit in ruTanks2 then
22643: LD_VAR 0 1
22647: PUSH
22648: LD_EXP 80
22652: IN
22653: IFFALSE 22671
// ruTanks2 := ruTanks2 diff unit ;
22655: LD_ADDR_EXP 80
22659: PUSH
22660: LD_EXP 80
22664: PUSH
22665: LD_VAR 0 1
22669: DIFF
22670: ST_TO_ADDR
// if unit in ruExtraTanks then
22671: LD_VAR 0 1
22675: PUSH
22676: LD_EXP 81
22680: IN
22681: IFFALSE 22699
// ruExtraTanks := ruExtraTanks diff unit ;
22683: LD_ADDR_EXP 81
22687: PUSH
22688: LD_EXP 81
22692: PUSH
22693: LD_VAR 0 1
22697: DIFF
22698: ST_TO_ADDR
// if unit in ruMech then
22699: LD_VAR 0 1
22703: PUSH
22704: LD_EXP 63
22708: IN
22709: IFFALSE 22727
// ruMech := ruMech diff unit ;
22711: LD_ADDR_EXP 63
22715: PUSH
22716: LD_EXP 63
22720: PUSH
22721: LD_VAR 0 1
22725: DIFF
22726: ST_TO_ADDR
// if unit in ruMech2 then
22727: LD_VAR 0 1
22731: PUSH
22732: LD_EXP 64
22736: IN
22737: IFFALSE 22755
// ruMech2 := ruMech2 diff unit ;
22739: LD_ADDR_EXP 64
22743: PUSH
22744: LD_EXP 64
22748: PUSH
22749: LD_VAR 0 1
22753: DIFF
22754: ST_TO_ADDR
// if GetBType ( unit ) in [ b_bunker , b_turret ] and GetSide ( unit ) = 3 then
22755: LD_VAR 0 1
22759: PPUSH
22760: CALL_OW 266
22764: PUSH
22765: LD_INT 32
22767: PUSH
22768: LD_INT 33
22770: PUSH
22771: EMPTY
22772: LIST
22773: LIST
22774: IN
22775: PUSH
22776: LD_VAR 0 1
22780: PPUSH
22781: CALL_OW 255
22785: PUSH
22786: LD_INT 3
22788: EQUAL
22789: AND
22790: IFFALSE 22946
// begin if IsInArea ( unit , ruBaseArea ) then
22792: LD_VAR 0 1
22796: PPUSH
22797: LD_EXP 66
22801: PPUSH
22802: CALL_OW 308
22806: IFFALSE 22869
// ruBuildings := Join ( ruBuildings , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
22808: LD_ADDR_EXP 76
22812: PUSH
22813: LD_EXP 76
22817: PPUSH
22818: LD_VAR 0 1
22822: PPUSH
22823: CALL_OW 266
22827: PUSH
22828: LD_VAR 0 1
22832: PPUSH
22833: CALL_OW 250
22837: PUSH
22838: LD_VAR 0 1
22842: PPUSH
22843: CALL_OW 251
22847: PUSH
22848: LD_VAR 0 1
22852: PPUSH
22853: CALL_OW 254
22857: PUSH
22858: EMPTY
22859: LIST
22860: LIST
22861: LIST
22862: LIST
22863: PPUSH
22864: CALL 92306 0 2
22868: ST_TO_ADDR
// if IsInArea ( unit , ruBaseArea2 ) then
22869: LD_VAR 0 1
22873: PPUSH
22874: LD_EXP 67
22878: PPUSH
22879: CALL_OW 308
22883: IFFALSE 22946
// ruBuildings2 := Join ( ruBuildings2 , [ GetBType ( unit ) , GetX ( unit ) , GetY ( unit ) , GetDir ( unit ) ] ) ;
22885: LD_ADDR_EXP 77
22889: PUSH
22890: LD_EXP 77
22894: PPUSH
22895: LD_VAR 0 1
22899: PPUSH
22900: CALL_OW 266
22904: PUSH
22905: LD_VAR 0 1
22909: PPUSH
22910: CALL_OW 250
22914: PUSH
22915: LD_VAR 0 1
22919: PPUSH
22920: CALL_OW 251
22924: PUSH
22925: LD_VAR 0 1
22929: PPUSH
22930: CALL_OW 254
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: LIST
22939: LIST
22940: PPUSH
22941: CALL 92306 0 2
22945: ST_TO_ADDR
// end ; if unit in FilterAllUnits ( [ [ f_side , 6 ] , [ f_weapon , ru_cargo_bay ] ] ) then
22946: LD_VAR 0 1
22950: PUSH
22951: LD_INT 22
22953: PUSH
22954: LD_INT 6
22956: PUSH
22957: EMPTY
22958: LIST
22959: LIST
22960: PUSH
22961: LD_INT 34
22963: PUSH
22964: LD_INT 51
22966: PUSH
22967: EMPTY
22968: LIST
22969: LIST
22970: PUSH
22971: EMPTY
22972: LIST
22973: LIST
22974: PPUSH
22975: CALL_OW 69
22979: IN
22980: IFFALSE 22990
// ruTransportDestroyed := true ;
22982: LD_ADDR_EXP 78
22986: PUSH
22987: LD_INT 1
22989: ST_TO_ADDR
// end ;
22990: PPOPN 1
22992: END
// on ClassChanged ( un , oldClass , newClass ) do begin if GetTag ( un ) = tMech then
22993: LD_VAR 0 1
22997: PPUSH
22998: CALL_OW 110
23002: PUSH
23003: LD_INT 7
23005: EQUAL
23006: IFFALSE 23020
// SetTag ( un , 0 ) ;
23008: LD_VAR 0 1
23012: PPUSH
23013: LD_INT 0
23015: PPUSH
23016: CALL_OW 109
// end ;
23020: PPOPN 3
23022: END
// on EnterBuilding ( b , un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , class_mechanic ] ] ) and GetBType ( b ) = b_factory and GetLives ( un ) < 1000 then
23023: LD_VAR 0 2
23027: PUSH
23028: LD_INT 22
23030: PUSH
23031: LD_INT 3
23033: PUSH
23034: EMPTY
23035: LIST
23036: LIST
23037: PUSH
23038: LD_INT 25
23040: PUSH
23041: LD_INT 3
23043: PUSH
23044: EMPTY
23045: LIST
23046: LIST
23047: PUSH
23048: EMPTY
23049: LIST
23050: LIST
23051: PPUSH
23052: CALL_OW 69
23056: IN
23057: PUSH
23058: LD_VAR 0 1
23062: PPUSH
23063: CALL_OW 266
23067: PUSH
23068: LD_INT 3
23070: EQUAL
23071: AND
23072: PUSH
23073: LD_VAR 0 2
23077: PPUSH
23078: CALL_OW 256
23082: PUSH
23083: LD_INT 1000
23085: LESS
23086: AND
23087: IFFALSE 23113
// begin SetTag ( un , 0 ) ;
23089: LD_VAR 0 2
23093: PPUSH
23094: LD_INT 0
23096: PPUSH
23097: CALL_OW 109
// SetLives ( un , 1000 ) ;
23101: LD_VAR 0 2
23105: PPUSH
23106: LD_INT 1000
23108: PPUSH
23109: CALL_OW 234
// end ; end ;
23113: PPOPN 2
23115: END
// on UnitGoesToRed ( un ) do var i ;
23116: LD_INT 0
23118: PPUSH
// begin if un = Khatam and GetSide ( Khatam ) = 8 then
23119: LD_VAR 0 1
23123: PUSH
23124: LD_EXP 36
23128: EQUAL
23129: PUSH
23130: LD_EXP 36
23134: PPUSH
23135: CALL_OW 255
23139: PUSH
23140: LD_INT 8
23142: EQUAL
23143: AND
23144: IFFALSE 23155
// KillUnit ( Khatam ) ;
23146: LD_EXP 36
23150: PPUSH
23151: CALL_OW 66
// end ;
23155: PPOPN 2
23157: END
// on SpontaneousTeleported ( un ) do begin if not seenRussianTeleport then
23158: LD_EXP 6
23162: NOT
23163: IFFALSE 23197
// begin seenRussianTeleport := true ;
23165: LD_ADDR_EXP 6
23169: PUSH
23170: LD_INT 1
23172: ST_TO_ADDR
// DTankTeleport ( GetX ( un ) , GetY ( un ) ) ;
23173: LD_VAR 0 1
23177: PPUSH
23178: CALL_OW 250
23182: PPUSH
23183: LD_VAR 0 1
23187: PPUSH
23188: CALL_OW 251
23192: PPUSH
23193: CALL 26535 0 2
// end ; end ;
23197: PPOPN 1
23199: END
// on BuildingCaptured ( captured , oldSide , unit ) do var i , x , y ;
23200: LD_INT 0
23202: PPUSH
23203: PPUSH
23204: PPUSH
// begin if oldSide = 2 and GetBType ( captured ) in [ b_lab_half , b_lab , b_depot , b_barracks ] then
23205: LD_VAR 0 2
23209: PUSH
23210: LD_INT 2
23212: EQUAL
23213: PUSH
23214: LD_VAR 0 1
23218: PPUSH
23219: CALL_OW 266
23223: PUSH
23224: LD_INT 7
23226: PUSH
23227: LD_INT 6
23229: PUSH
23230: LD_INT 0
23232: PUSH
23233: LD_INT 5
23235: PUSH
23236: EMPTY
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: IN
23242: AND
23243: IFFALSE 23362
// begin for i := 1 to rand ( 2 , 4 ) do
23245: LD_ADDR_VAR 0 4
23249: PUSH
23250: DOUBLE
23251: LD_INT 1
23253: DEC
23254: ST_TO_ADDR
23255: LD_INT 2
23257: PPUSH
23258: LD_INT 4
23260: PPUSH
23261: CALL_OW 12
23265: PUSH
23266: FOR_TO
23267: IFFALSE 23360
// begin x := GetX ( captured ) - rand ( - 2 , 2 ) ;
23269: LD_ADDR_VAR 0 5
23273: PUSH
23274: LD_VAR 0 1
23278: PPUSH
23279: CALL_OW 250
23283: PUSH
23284: LD_INT 2
23286: NEG
23287: PPUSH
23288: LD_INT 2
23290: PPUSH
23291: CALL_OW 12
23295: MINUS
23296: ST_TO_ADDR
// y := GetY ( captured ) + rand ( - 2 , 2 ) ;
23297: LD_ADDR_VAR 0 6
23301: PUSH
23302: LD_VAR 0 1
23306: PPUSH
23307: CALL_OW 251
23311: PUSH
23312: LD_INT 2
23314: NEG
23315: PPUSH
23316: LD_INT 2
23318: PPUSH
23319: CALL_OW 12
23323: PLUS
23324: ST_TO_ADDR
// if ValidHex ( x , y ) then
23325: LD_VAR 0 5
23329: PPUSH
23330: LD_VAR 0 6
23334: PPUSH
23335: CALL_OW 488
23339: IFFALSE 23358
// MineExplosion ( x , y , 10 ) ;
23341: LD_VAR 0 5
23345: PPUSH
23346: LD_VAR 0 6
23350: PPUSH
23351: LD_INT 10
23353: PPUSH
23354: CALL_OW 453
// end ;
23358: GO 23266
23360: POP
23361: POP
// end ; end ;
23362: PPOPN 6
23364: END
// on VehicleConstructed ( veh , fac ) do var side ;
23365: LD_INT 0
23367: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
23368: LD_VAR 0 1
23372: PPUSH
23373: LD_VAR 0 2
23377: PPUSH
23378: CALL 49841 0 2
// side := GetSide ( fac ) ;
23382: LD_ADDR_VAR 0 3
23386: PUSH
23387: LD_VAR 0 2
23391: PPUSH
23392: CALL_OW 255
23396: ST_TO_ADDR
// if side = 3 then
23397: LD_VAR 0 3
23401: PUSH
23402: LD_INT 3
23404: EQUAL
23405: IFFALSE 23589
// begin if IsInArea ( fac , ruBaseArea ) then
23407: LD_VAR 0 2
23411: PPUSH
23412: LD_EXP 66
23416: PPUSH
23417: CALL_OW 308
23421: IFFALSE 23498
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
23423: LD_ADDR_EXP 70
23427: PUSH
23428: LD_EXP 70
23432: PPUSH
23433: LD_INT 1
23435: PPUSH
23436: CALL_OW 3
23440: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23441: LD_VAR 0 1
23445: PPUSH
23446: CALL_OW 263
23450: PUSH
23451: LD_INT 1
23453: EQUAL
23454: IFFALSE 23478
// ruTanks := Join ( ruTanks , veh ) else
23456: LD_ADDR_EXP 79
23460: PUSH
23461: LD_EXP 79
23465: PPUSH
23466: LD_VAR 0 1
23470: PPUSH
23471: CALL 92306 0 2
23475: ST_TO_ADDR
23476: GO 23498
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23478: LD_ADDR_EXP 81
23482: PUSH
23483: LD_EXP 81
23487: PPUSH
23488: LD_VAR 0 1
23492: PPUSH
23493: CALL 92306 0 2
23497: ST_TO_ADDR
// end ; if IsInArea ( fac , ruBaseArea2 ) then
23498: LD_VAR 0 2
23502: PPUSH
23503: LD_EXP 67
23507: PPUSH
23508: CALL_OW 308
23512: IFFALSE 23589
// begin ruConstructList2 := Delete ( ruConstructList2 , 1 ) ;
23514: LD_ADDR_EXP 71
23518: PUSH
23519: LD_EXP 71
23523: PPUSH
23524: LD_INT 1
23526: PPUSH
23527: CALL_OW 3
23531: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
23532: LD_VAR 0 1
23536: PPUSH
23537: CALL_OW 263
23541: PUSH
23542: LD_INT 1
23544: EQUAL
23545: IFFALSE 23569
// ruTanks2 := Join ( ruTanks2 , veh ) else
23547: LD_ADDR_EXP 80
23551: PUSH
23552: LD_EXP 80
23556: PPUSH
23557: LD_VAR 0 1
23561: PPUSH
23562: CALL 92306 0 2
23566: ST_TO_ADDR
23567: GO 23589
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
23569: LD_ADDR_EXP 81
23573: PUSH
23574: LD_EXP 81
23578: PPUSH
23579: LD_VAR 0 1
23583: PPUSH
23584: CALL 92306 0 2
23588: ST_TO_ADDR
// end ; end ; end ;
23589: PPOPN 3
23591: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
23592: LD_INT 0
23594: PPUSH
23595: PPUSH
23596: PPUSH
// begin side := GetSide ( driver ) ;
23597: LD_ADDR_VAR 0 7
23601: PUSH
23602: LD_VAR 0 1
23606: PPUSH
23607: CALL_OW 255
23611: ST_TO_ADDR
// if side = 5 then
23612: LD_VAR 0 7
23616: PUSH
23617: LD_INT 5
23619: EQUAL
23620: IFFALSE 23700
// begin arAttackersVeh := arAttackersVeh diff driver ;
23622: LD_ADDR_EXP 58
23626: PUSH
23627: LD_EXP 58
23631: PUSH
23632: LD_VAR 0 1
23636: DIFF
23637: ST_TO_ADDR
// ComMoveXY ( driver , 189 , 80 ) ;
23638: LD_VAR 0 1
23642: PPUSH
23643: LD_INT 189
23645: PPUSH
23646: LD_INT 80
23648: PPUSH
23649: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
23653: LD_INT 35
23655: PPUSH
23656: CALL_OW 67
// if not IsOk ( driver ) then
23660: LD_VAR 0 1
23664: PPUSH
23665: CALL_OW 302
23669: NOT
23670: IFFALSE 23674
// exit ;
23672: GO 24224
// until IsAt ( driver , 189 , 80 ) ;
23674: LD_VAR 0 1
23678: PPUSH
23679: LD_INT 189
23681: PPUSH
23682: LD_INT 80
23684: PPUSH
23685: CALL_OW 307
23689: IFFALSE 23653
// RemoveUnit ( driver ) ;
23691: LD_VAR 0 1
23695: PPUSH
23696: CALL_OW 64
// end ; if side = 6 then
23700: LD_VAR 0 7
23704: PUSH
23705: LD_INT 6
23707: EQUAL
23708: IFFALSE 23766
// begin repeat ComMoveToArea ( driver , arAttackSpawn2Area ) ;
23710: LD_VAR 0 1
23714: PPUSH
23715: LD_INT 19
23717: PPUSH
23718: CALL_OW 113
// wait ( 0 0$3 ) ;
23722: LD_INT 105
23724: PPUSH
23725: CALL_OW 67
// if not IsOk ( driver ) then
23729: LD_VAR 0 1
23733: PPUSH
23734: CALL_OW 302
23738: NOT
23739: IFFALSE 23743
// exit ;
23741: GO 24224
// until IsInArea ( driver , arAttackSpawn2Area ) ;
23743: LD_VAR 0 1
23747: PPUSH
23748: LD_INT 19
23750: PPUSH
23751: CALL_OW 308
23755: IFFALSE 23710
// RemoveUnit ( driver ) ;
23757: LD_VAR 0 1
23761: PPUSH
23762: CALL_OW 64
// end ; if side = 3 then
23766: LD_VAR 0 7
23770: PUSH
23771: LD_INT 3
23773: EQUAL
23774: IFFALSE 24224
// begin if driver in ruMech then
23776: LD_VAR 0 1
23780: PUSH
23781: LD_EXP 63
23785: IN
23786: IFFALSE 24000
// begin ComMoveToArea ( driver , ruBaseArea ) ;
23788: LD_VAR 0 1
23792: PPUSH
23793: LD_EXP 66
23797: PPUSH
23798: CALL_OW 113
// SetTag ( driver , tMech ) ;
23802: LD_VAR 0 1
23806: PPUSH
23807: LD_INT 7
23809: PPUSH
23810: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
23814: LD_ADDR_VAR 0 6
23818: PUSH
23819: LD_EXP 66
23823: PPUSH
23824: LD_INT 22
23826: PUSH
23827: LD_INT 3
23829: PUSH
23830: EMPTY
23831: LIST
23832: LIST
23833: PUSH
23834: LD_INT 30
23836: PUSH
23837: LD_INT 3
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 50
23846: PUSH
23847: EMPTY
23848: LIST
23849: PUSH
23850: EMPTY
23851: LIST
23852: LIST
23853: LIST
23854: PPUSH
23855: CALL_OW 70
23859: ST_TO_ADDR
// if fac then
23860: LD_VAR 0 6
23864: IFFALSE 23886
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
23866: LD_VAR 0 1
23870: PPUSH
23871: LD_VAR 0 6
23875: PUSH
23876: LD_INT 1
23878: ARRAY
23879: PPUSH
23880: CALL_OW 180
// exit ;
23884: GO 24224
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
23886: LD_ADDR_VAR 0 5
23890: PUSH
23891: LD_EXP 66
23895: PPUSH
23896: LD_INT 22
23898: PUSH
23899: LD_INT 3
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 2
23908: PUSH
23909: LD_INT 30
23911: PUSH
23912: LD_INT 4
23914: PUSH
23915: EMPTY
23916: LIST
23917: LIST
23918: PUSH
23919: LD_INT 30
23921: PUSH
23922: LD_INT 5
23924: PUSH
23925: EMPTY
23926: LIST
23927: LIST
23928: PUSH
23929: EMPTY
23930: LIST
23931: LIST
23932: LIST
23933: PUSH
23934: LD_INT 3
23936: PUSH
23937: LD_INT 62
23939: PUSH
23940: EMPTY
23941: LIST
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: LD_INT 50
23949: PUSH
23950: EMPTY
23951: LIST
23952: PUSH
23953: EMPTY
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: PPUSH
23959: CALL_OW 70
23963: ST_TO_ADDR
// if arm then
23964: LD_VAR 0 5
23968: IFFALSE 24000
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
23970: LD_VAR 0 1
23974: PPUSH
23975: LD_VAR 0 5
23979: PUSH
23980: LD_INT 1
23982: ARRAY
23983: PPUSH
23984: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
23988: LD_VAR 0 1
23992: PPUSH
23993: LD_INT 1
23995: PPUSH
23996: CALL_OW 183
// end ; end ; if driver in ruMech2 then
24000: LD_VAR 0 1
24004: PUSH
24005: LD_EXP 64
24009: IN
24010: IFFALSE 24224
// begin ComMoveToArea ( driver , ruBaseArea2 ) ;
24012: LD_VAR 0 1
24016: PPUSH
24017: LD_EXP 67
24021: PPUSH
24022: CALL_OW 113
// SetTag ( driver , tMech ) ;
24026: LD_VAR 0 1
24030: PPUSH
24031: LD_INT 7
24033: PPUSH
24034: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
24038: LD_ADDR_VAR 0 6
24042: PUSH
24043: LD_EXP 67
24047: PPUSH
24048: LD_INT 22
24050: PUSH
24051: LD_INT 3
24053: PUSH
24054: EMPTY
24055: LIST
24056: LIST
24057: PUSH
24058: LD_INT 30
24060: PUSH
24061: LD_INT 3
24063: PUSH
24064: EMPTY
24065: LIST
24066: LIST
24067: PUSH
24068: LD_INT 50
24070: PUSH
24071: EMPTY
24072: LIST
24073: PUSH
24074: EMPTY
24075: LIST
24076: LIST
24077: LIST
24078: PPUSH
24079: CALL_OW 70
24083: ST_TO_ADDR
// if fac then
24084: LD_VAR 0 6
24088: IFFALSE 24110
// begin AddComEnterUnit ( driver , fac [ 1 ] ) ;
24090: LD_VAR 0 1
24094: PPUSH
24095: LD_VAR 0 6
24099: PUSH
24100: LD_INT 1
24102: ARRAY
24103: PPUSH
24104: CALL_OW 180
// exit ;
24108: GO 24224
// end ; arm := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
24110: LD_ADDR_VAR 0 5
24114: PUSH
24115: LD_EXP 67
24119: PPUSH
24120: LD_INT 22
24122: PUSH
24123: LD_INT 3
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: PUSH
24130: LD_INT 2
24132: PUSH
24133: LD_INT 30
24135: PUSH
24136: LD_INT 4
24138: PUSH
24139: EMPTY
24140: LIST
24141: LIST
24142: PUSH
24143: LD_INT 30
24145: PUSH
24146: LD_INT 5
24148: PUSH
24149: EMPTY
24150: LIST
24151: LIST
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: LIST
24157: PUSH
24158: LD_INT 3
24160: PUSH
24161: LD_INT 62
24163: PUSH
24164: EMPTY
24165: LIST
24166: PUSH
24167: EMPTY
24168: LIST
24169: LIST
24170: PUSH
24171: LD_INT 50
24173: PUSH
24174: EMPTY
24175: LIST
24176: PUSH
24177: EMPTY
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: PPUSH
24183: CALL_OW 70
24187: ST_TO_ADDR
// if arm then
24188: LD_VAR 0 5
24192: IFFALSE 24224
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
24194: LD_VAR 0 1
24198: PPUSH
24199: LD_VAR 0 5
24203: PUSH
24204: LD_INT 1
24206: ARRAY
24207: PPUSH
24208: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
24212: LD_VAR 0 1
24216: PPUSH
24217: LD_INT 1
24219: PPUSH
24220: CALL_OW 183
// end ; end ; end ; end ;
24224: PPOPN 7
24226: END
// on EndTheMissionRaised ( ev ) do begin if end_the_mission_allowed then
24227: LD_OWVAR 57
24231: IFFALSE 24245
// begin end_the_mission_allowed := false ;
24233: LD_ADDR_OWVAR 57
24237: PUSH
24238: LD_INT 0
24240: ST_TO_ADDR
// FinishMission ;
24241: CALL 31983 0 0
// end ; end ;
24245: PPOPN 1
24247: END
// on BuildingComplete ( b ) do var side , type ;
24248: LD_INT 0
24250: PPUSH
24251: PPUSH
// begin side := GetSide ( b ) ;
24252: LD_ADDR_VAR 0 2
24256: PUSH
24257: LD_VAR 0 1
24261: PPUSH
24262: CALL_OW 255
24266: ST_TO_ADDR
// type := GetBType ( b ) ;
24267: LD_ADDR_VAR 0 3
24271: PUSH
24272: LD_VAR 0 1
24276: PPUSH
24277: CALL_OW 266
24281: ST_TO_ADDR
// if side = 2 then
24282: LD_VAR 0 2
24286: PUSH
24287: LD_INT 2
24289: EQUAL
24290: IFFALSE 24310
// arBuildings := Delete ( arBuildings , 1 ) ;
24292: LD_ADDR_EXP 53
24296: PUSH
24297: LD_EXP 53
24301: PPUSH
24302: LD_INT 1
24304: PPUSH
24305: CALL_OW 3
24309: ST_TO_ADDR
// if side = 1 then
24310: LD_VAR 0 2
24314: PUSH
24315: LD_INT 1
24317: EQUAL
24318: IFFALSE 24380
// if type = b_depot and not hasBase then
24320: LD_VAR 0 3
24324: PUSH
24325: LD_INT 0
24327: EQUAL
24328: PUSH
24329: LD_EXP 9
24333: NOT
24334: AND
24335: IFFALSE 24380
// begin hasBase := true ;
24337: LD_ADDR_EXP 9
24341: PUSH
24342: LD_INT 1
24344: ST_TO_ADDR
// epsilon := b ;
24345: LD_ADDR_EXP 10
24349: PUSH
24350: LD_VAR 0 1
24354: ST_TO_ADDR
// SetBName ( b , epsilon ) ;
24355: LD_VAR 0 1
24359: PPUSH
24360: LD_STRING epsilon
24362: PPUSH
24363: CALL_OW 500
// SetRestrict ( b_depot , 1 , false ) ;
24367: LD_INT 0
24369: PPUSH
24370: LD_INT 1
24372: PPUSH
24373: LD_INT 0
24375: PPUSH
24376: CALL_OW 324
// end ; if side = 3 then
24380: LD_VAR 0 2
24384: PUSH
24385: LD_INT 3
24387: EQUAL
24388: IFFALSE 24674
// begin if IsInArea ( b , ruBaseArea ) then
24390: LD_VAR 0 1
24394: PPUSH
24395: LD_EXP 66
24399: PPUSH
24400: CALL_OW 308
24404: IFFALSE 24424
// ruBuildings := Delete ( ruBuildings , 1 ) ;
24406: LD_ADDR_EXP 76
24410: PUSH
24411: LD_EXP 76
24415: PPUSH
24416: LD_INT 1
24418: PPUSH
24419: CALL_OW 3
24423: ST_TO_ADDR
// if IsInArea ( b , ruBaseArea2 ) then
24424: LD_VAR 0 1
24428: PPUSH
24429: LD_EXP 67
24433: PPUSH
24434: CALL_OW 308
24438: IFFALSE 24458
// ruBuildings2 := Delete ( ruBuildings2 , 1 ) ;
24440: LD_ADDR_EXP 77
24444: PUSH
24445: LD_EXP 77
24449: PPUSH
24450: LD_INT 1
24452: PPUSH
24453: CALL_OW 3
24457: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
24458: LD_VAR 0 3
24462: PUSH
24463: LD_INT 0
24465: PUSH
24466: LD_INT 4
24468: PUSH
24469: LD_INT 2
24471: PUSH
24472: EMPTY
24473: LIST
24474: LIST
24475: LIST
24476: IN
24477: IFFALSE 24488
// ComUpgrade ( b ) ;
24479: LD_VAR 0 1
24483: PPUSH
24484: CALL_OW 146
// if type = b_lab then
24488: LD_VAR 0 3
24492: PUSH
24493: LD_INT 6
24495: EQUAL
24496: IFFALSE 24540
// if IsInArea ( b , ruBaseArea ) then
24498: LD_VAR 0 1
24502: PPUSH
24503: LD_EXP 66
24507: PPUSH
24508: CALL_OW 308
24512: IFFALSE 24528
// ComUpgradeLab ( b , b_lab_weapon ) else
24514: LD_VAR 0 1
24518: PPUSH
24519: LD_INT 10
24521: PPUSH
24522: CALL_OW 147
24526: GO 24540
// ComUpgradeLab ( b , b_lab_computer ) ;
24528: LD_VAR 0 1
24532: PPUSH
24533: LD_INT 12
24535: PPUSH
24536: CALL_OW 147
// if type = b_depot then
24540: LD_VAR 0 3
24544: PUSH
24545: LD_INT 0
24547: EQUAL
24548: IFFALSE 24674
// begin SetResourceType ( GetBase ( b ) , mat_cans , 2550 ) ;
24550: LD_VAR 0 1
24554: PPUSH
24555: CALL_OW 274
24559: PPUSH
24560: LD_INT 1
24562: PPUSH
24563: LD_INT 2550
24565: PPUSH
24566: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 250 ) ;
24570: LD_VAR 0 1
24574: PPUSH
24575: CALL_OW 274
24579: PPUSH
24580: LD_INT 2
24582: PPUSH
24583: LD_INT 250
24585: PPUSH
24586: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 200 ) ;
24590: LD_VAR 0 1
24594: PPUSH
24595: CALL_OW 274
24599: PPUSH
24600: LD_INT 3
24602: PPUSH
24603: LD_INT 200
24605: PPUSH
24606: CALL_OW 277
// if IsInArea ( b , ruBaseArea ) then
24610: LD_VAR 0 1
24614: PPUSH
24615: LD_EXP 66
24619: PPUSH
24620: CALL_OW 308
24624: IFFALSE 24648
// begin ruBase := b ;
24626: LD_ADDR_EXP 68
24630: PUSH
24631: LD_VAR 0 1
24635: ST_TO_ADDR
// SetBName ( b , chuikov ) ;
24636: LD_VAR 0 1
24640: PPUSH
24641: LD_STRING chuikov
24643: PPUSH
24644: CALL_OW 500
// end ; if IsInArea ( b , ruBaseArea2 ) then
24648: LD_VAR 0 1
24652: PPUSH
24653: LD_EXP 67
24657: PPUSH
24658: CALL_OW 308
24662: IFFALSE 24674
// begin ruBase2 := b ;
24664: LD_ADDR_EXP 69
24668: PUSH
24669: LD_VAR 0 1
24673: ST_TO_ADDR
// end ; end ; end ; end ;
24674: PPOPN 3
24676: END
// on UpgradeComplete ( b ) do var side , type ;
24677: LD_INT 0
24679: PPUSH
24680: PPUSH
// begin side := GetSide ( b ) ;
24681: LD_ADDR_VAR 0 2
24685: PUSH
24686: LD_VAR 0 1
24690: PPUSH
24691: CALL_OW 255
24695: ST_TO_ADDR
// type := GetBType ( b ) ;
24696: LD_ADDR_VAR 0 3
24700: PUSH
24701: LD_VAR 0 1
24705: PPUSH
24706: CALL_OW 266
24710: ST_TO_ADDR
// if side = 3 then
24711: LD_VAR 0 2
24715: PUSH
24716: LD_INT 3
24718: EQUAL
24719: IFFALSE 24773
// if type = b_lab_half then
24721: LD_VAR 0 3
24725: PUSH
24726: LD_INT 7
24728: EQUAL
24729: IFFALSE 24773
// if IsInArea ( b , ruBaseArea ) then
24731: LD_VAR 0 1
24735: PPUSH
24736: LD_EXP 66
24740: PPUSH
24741: CALL_OW 308
24745: IFFALSE 24761
// ComUpgradeLab ( b , b_lab_spacetime ) else
24747: LD_VAR 0 1
24751: PPUSH
24752: LD_INT 14
24754: PPUSH
24755: CALL_OW 147
24759: GO 24773
// ComUpgradeLab ( b , b_lab_siberium ) ;
24761: LD_VAR 0 1
24765: PPUSH
24766: LD_INT 11
24768: PPUSH
24769: CALL_OW 147
// end ;
24773: PPOPN 3
24775: END
// on ResearchComplete ( tech , lab ) do var side ;
24776: LD_INT 0
24778: PPUSH
// begin side := GetSide ( lab ) ;
24779: LD_ADDR_VAR 0 3
24783: PUSH
24784: LD_VAR 0 2
24788: PPUSH
24789: CALL_OW 255
24793: ST_TO_ADDR
// if side = 2 then
24794: LD_VAR 0 3
24798: PUSH
24799: LD_INT 2
24801: EQUAL
24802: IFFALSE 24850
// begin arTech := Delete ( arTech , 1 ) ;
24804: LD_ADDR_EXP 52
24808: PUSH
24809: LD_EXP 52
24813: PPUSH
24814: LD_INT 1
24816: PPUSH
24817: CALL_OW 3
24821: ST_TO_ADDR
// if tech = tech_sibPow then
24822: LD_VAR 0 1
24826: PUSH
24827: LD_INT 21
24829: EQUAL
24830: IFFALSE 24836
// DArabTrait1 ;
24832: CALL 28897 0 0
// if tech = tech_sibEng then
24836: LD_VAR 0 1
24840: PUSH
24841: LD_INT 22
24843: EQUAL
24844: IFFALSE 24850
// DArabTrait2 ;
24846: CALL 29228 0 0
// end ; end ;
24850: PPOPN 3
24852: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
24853: LD_VAR 0 1
24857: PPUSH
24858: CALL 49825 0 1
// end ;
24862: PPOPN 1
24864: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
24865: LD_VAR 0 1
24869: PUSH
24870: LD_INT 1
24872: EQUAL
24873: PUSH
24874: LD_VAR 0 2
24878: PUSH
24879: LD_INT 2
24881: EQUAL
24882: AND
24883: PUSH
24884: LD_INT 1
24886: PPUSH
24887: LD_INT 2
24889: PPUSH
24890: CALL_OW 81
24894: PUSH
24895: LD_INT 1
24897: EQUAL
24898: AND
24899: IFFALSE 24905
// DAttackOnAlly ;
24901: CALL 26613 0 0
// end ;
24905: PPOPN 2
24907: END
// on SailEvent ( event ) do begin case event of EArabAttack :
24908: LD_VAR 0 1
24912: PUSH
24913: LD_INT 101
24915: DOUBLE
24916: EQUAL
24917: IFTRUE 24921
24919: GO 24928
24921: POP
// ArabAttack ; ERussianBaseC :
24922: CALL 7224 0 0
24926: GO 25080
24928: LD_INT 102
24930: DOUBLE
24931: EQUAL
24932: IFTRUE 24936
24934: GO 24957
24936: POP
// RussianBase ( ruForces union ruCommander , 1 ) ; ERussianBaseW :
24937: LD_EXP 59
24941: PUSH
24942: LD_EXP 61
24946: UNION
24947: PPUSH
24948: LD_INT 1
24950: PPUSH
24951: CALL 10861 0 2
24955: GO 25080
24957: LD_INT 103
24959: DOUBLE
24960: EQUAL
24961: IFTRUE 24965
24963: GO 24986
24965: POP
// RussianBase ( ruForces union ruCommander , 2 ) ; ERussianBaseE :
24966: LD_EXP 59
24970: PUSH
24971: LD_EXP 61
24975: UNION
24976: PPUSH
24977: LD_INT 2
24979: PPUSH
24980: CALL 10861 0 2
24984: GO 25080
24986: LD_INT 104
24988: DOUBLE
24989: EQUAL
24990: IFTRUE 24994
24992: GO 25015
24994: POP
// RussianBase ( ruForces union ruCommander , 3 ) ; ERussianBaseW2 :
24995: LD_EXP 59
24999: PUSH
25000: LD_EXP 61
25004: UNION
25005: PPUSH
25006: LD_INT 3
25008: PPUSH
25009: CALL 10861 0 2
25013: GO 25080
25015: LD_INT 105
25017: DOUBLE
25018: EQUAL
25019: IFTRUE 25023
25021: GO 25044
25023: POP
// RussianBase2 ( ruForces2 union ruCommander2 , 2 ) ; EExtraAttack :
25024: LD_EXP 60
25028: PUSH
25029: LD_EXP 62
25033: UNION
25034: PPUSH
25035: LD_INT 2
25037: PPUSH
25038: CALL 12370 0 2
25042: GO 25080
25044: LD_INT 106
25046: DOUBLE
25047: EQUAL
25048: IFTRUE 25052
25050: GO 25059
25052: POP
// RussianExtraAttack ; ESendRussianAttack :
25053: CALL 20205 0 0
25057: GO 25080
25059: LD_INT 107
25061: DOUBLE
25062: EQUAL
25063: IFTRUE 25067
25065: GO 25079
25067: POP
// SendRussianAttack ( russianWaveAttack ) ; end ;
25068: LD_EXP 18
25072: PPUSH
25073: CALL 21299 0 1
25077: GO 25080
25079: POP
// end ; end_of_file
25080: PPOPN 1
25082: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
25083: LD_INT 0
25085: PPUSH
25086: PPUSH
25087: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
25088: LD_ADDR_VAR 0 1
25092: PUSH
25093: LD_VAR 0 1
25097: PUSH
25098: LD_EXP 23
25102: PUSH
25103: LD_EXP 24
25107: PUSH
25108: LD_EXP 25
25112: PUSH
25113: LD_EXP 26
25117: PUSH
25118: LD_EXP 27
25122: PUSH
25123: LD_EXP 28
25127: PUSH
25128: LD_EXP 29
25132: PUSH
25133: LD_EXP 30
25137: PUSH
25138: LD_EXP 31
25142: PUSH
25143: LD_EXP 32
25147: PUSH
25148: LD_EXP 33
25152: PUSH
25153: LD_EXP 34
25157: PUSH
25158: LD_EXP 35
25162: PUSH
25163: LD_EXP 36
25167: PUSH
25168: LD_EXP 37
25172: PUSH
25173: LD_EXP 38
25177: PUSH
25178: LD_EXP 39
25182: PUSH
25183: LD_EXP 40
25187: PUSH
25188: LD_EXP 42
25192: PUSH
25193: LD_EXP 44
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: LIST
25209: LIST
25210: LIST
25211: LIST
25212: LIST
25213: LIST
25214: LIST
25215: LIST
25216: LIST
25217: LIST
25218: LIST
25219: DIFF
25220: ST_TO_ADDR
// if not characters then
25221: LD_VAR 0 1
25225: NOT
25226: IFFALSE 25230
// exit ;
25228: GO 25314
// speaker := characters [ rand ( 1 , Count ( characters ) ) ] ;
25230: LD_ADDR_VAR 0 6
25234: PUSH
25235: LD_VAR 0 1
25239: PUSH
25240: LD_INT 1
25242: PPUSH
25243: LD_VAR 0 1
25247: PPUSH
25248: CALL 56717 0 1
25252: PPUSH
25253: CALL_OW 12
25257: ARRAY
25258: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
25259: LD_VAR 0 6
25263: PPUSH
25264: CALL_OW 258
25268: PUSH
25269: LD_INT 1
25271: EQUAL
25272: IFFALSE 25290
// Say ( speaker , dialogMID ) else
25274: LD_VAR 0 6
25278: PPUSH
25279: LD_VAR 0 2
25283: PPUSH
25284: CALL_OW 88
25288: GO 25304
// Say ( speaker , dialogFID ) ;
25290: LD_VAR 0 6
25294: PPUSH
25295: LD_VAR 0 3
25299: PPUSH
25300: CALL_OW 88
// result := speaker ;
25304: LD_ADDR_VAR 0 4
25308: PUSH
25309: LD_VAR 0 6
25313: ST_TO_ADDR
// end ; end_of_file
25314: LD_VAR 0 4
25318: RET
// export function Action ; begin
25319: LD_INT 0
25321: PPUSH
// InGameOn ;
25322: CALL_OW 8
// CenterNowOnXY ( 25 , 35 ) ;
25326: LD_INT 25
25328: PPUSH
25329: LD_INT 35
25331: PPUSH
25332: CALL_OW 86
// RevealFogArea ( 1 , arBaseArea ) ;
25336: LD_INT 1
25338: PPUSH
25339: LD_INT 5
25341: PPUSH
25342: CALL_OW 332
// RevealFogArea ( 1 , epsilonSpawnArea ) ;
25346: LD_INT 1
25348: PPUSH
25349: LD_INT 4
25351: PPUSH
25352: CALL_OW 332
// wait ( 0 0$1.5 ) ;
25356: LD_INT 52
25358: PPUSH
25359: CALL_OW 67
// CenterNowOnUnits ( Simms ) ;
25363: LD_EXP 33
25367: PPUSH
25368: CALL_OW 87
// wait ( 0 0$3 ) ;
25372: LD_INT 105
25374: PPUSH
25375: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
25379: LD_EXP 23
25383: PPUSH
25384: CALL_OW 310
25388: PPUSH
25389: CALL_OW 85
// wait ( 0 0$1 ) ;
25393: LD_INT 35
25395: PPUSH
25396: CALL_OW 67
// if IsOk ( Gary ) then
25400: LD_EXP 32
25404: PPUSH
25405: CALL_OW 302
25409: IFFALSE 25447
// begin Say ( Gary , D2-Gary-1 ) ;
25411: LD_EXP 32
25415: PPUSH
25416: LD_STRING D2-Gary-1
25418: PPUSH
25419: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
25423: LD_EXP 23
25427: PPUSH
25428: LD_STRING D2-JMM-1
25430: PPUSH
25431: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
25435: LD_EXP 32
25439: PPUSH
25440: LD_STRING D2-Gary-2
25442: PPUSH
25443: CALL_OW 88
// end ; InGameOff ;
25447: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
25451: LD_STRING M1
25453: PPUSH
25454: CALL_OW 337
// SaveForQuickRestart ;
25458: CALL_OW 22
// end ;
25462: LD_VAR 0 1
25466: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var i , p ;
25467: LD_EXP 23
25471: PPUSH
25472: LD_EXP 33
25476: PPUSH
25477: CALL_OW 296
25481: PUSH
25482: LD_INT 15
25484: LESS
25485: IFFALSE 26445
25487: GO 25489
25489: DISABLE
25490: LD_INT 0
25492: PPUSH
25493: PPUSH
// begin wait ( 0 0$3 ) ;
25494: LD_INT 105
25496: PPUSH
25497: CALL_OW 67
// Video ( true ) ;
25501: LD_INT 1
25503: PPUSH
25504: CALL 92278 0 1
// ComExitVehicle ( JMM ) ;
25508: LD_EXP 23
25512: PPUSH
25513: CALL_OW 121
// AddComMoveUnit ( JMM , Simms ) ;
25517: LD_EXP 23
25521: PPUSH
25522: LD_EXP 33
25526: PPUSH
25527: CALL_OW 172
// CenterNowOnUnits ( JMM ) ;
25531: LD_EXP 23
25535: PPUSH
25536: CALL_OW 87
// if Truman then
25540: LD_EXP 43
25544: IFFALSE 25681
// begin ComMoveUnit ( Truman , JMM ) ;
25546: LD_EXP 43
25550: PPUSH
25551: LD_EXP 23
25555: PPUSH
25556: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
25560: LD_INT 35
25562: PPUSH
25563: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
25567: LD_EXP 43
25571: PPUSH
25572: LD_EXP 23
25576: PPUSH
25577: CALL_OW 296
25581: PUSH
25582: LD_INT 6
25584: LESS
25585: IFFALSE 25560
// ComTurnUnit ( Truman , JMM ) ;
25587: LD_EXP 43
25591: PPUSH
25592: LD_EXP 23
25596: PPUSH
25597: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
25601: LD_EXP 23
25605: PPUSH
25606: LD_EXP 43
25610: PPUSH
25611: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
25615: LD_EXP 43
25619: PPUSH
25620: LD_STRING D2-Tru-1
25622: PPUSH
25623: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
25627: LD_EXP 23
25631: PPUSH
25632: LD_STRING D2-JMM-Tru-1
25634: PPUSH
25635: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
25639: LD_EXP 43
25643: PPUSH
25644: LD_STRING D2-Tru-2
25646: PPUSH
25647: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
25651: LD_EXP 43
25655: PPUSH
25656: LD_INT 79
25658: PPUSH
25659: LD_INT 41
25661: PPUSH
25662: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
25666: LD_EXP 43
25670: PPUSH
25671: LD_INT 17
25673: PPUSH
25674: LD_INT 31
25676: PPUSH
25677: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
25681: LD_EXP 23
25685: PPUSH
25686: LD_EXP 33
25690: PPUSH
25691: CALL_OW 179
// p := 15 ;
25695: LD_ADDR_VAR 0 2
25699: PUSH
25700: LD_INT 15
25702: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
25703: LD_INT 35
25705: PPUSH
25706: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25710: LD_EXP 33
25714: PUSH
25715: LD_EXP 35
25719: PUSH
25720: LD_EXP 34
25724: PUSH
25725: LD_EXP 36
25729: PUSH
25730: LD_EXP 30
25734: PUSH
25735: EMPTY
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: PPUSH
25742: LD_EXP 23
25746: PPUSH
25747: CALL_OW 112
// p := p - 1 ;
25751: LD_ADDR_VAR 0 2
25755: PUSH
25756: LD_VAR 0 2
25760: PUSH
25761: LD_INT 1
25763: MINUS
25764: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
25765: LD_EXP 23
25769: PPUSH
25770: LD_EXP 33
25774: PPUSH
25775: CALL_OW 296
25779: PUSH
25780: LD_INT 5
25782: LESS
25783: PUSH
25784: LD_VAR 0 2
25788: PUSH
25789: LD_INT 0
25791: LESSEQUAL
25792: OR
25793: IFFALSE 25703
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
25795: LD_EXP 33
25799: PUSH
25800: LD_EXP 35
25804: PUSH
25805: LD_EXP 34
25809: PUSH
25810: LD_EXP 36
25814: PUSH
25815: LD_EXP 30
25819: PUSH
25820: EMPTY
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: PPUSH
25827: LD_EXP 23
25831: PPUSH
25832: CALL_OW 119
// if not IsInUnit ( JMM ) then
25836: LD_EXP 23
25840: PPUSH
25841: CALL_OW 310
25845: NOT
25846: IFFALSE 25862
// ComTurnUnit ( JMM , Simms ) ;
25848: LD_EXP 23
25852: PPUSH
25853: LD_EXP 33
25857: PPUSH
25858: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
25862: LD_EXP 33
25866: PUSH
25867: LD_EXP 35
25871: PUSH
25872: LD_EXP 34
25876: PUSH
25877: LD_EXP 36
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: PPUSH
25888: LD_EXP 23
25892: PPUSH
25893: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
25897: LD_EXP 23
25901: PUSH
25902: LD_EXP 33
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PPUSH
25911: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
25915: LD_EXP 33
25919: PPUSH
25920: LD_STRING D2a-Sim-1
25922: PPUSH
25923: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
25927: LD_EXP 23
25931: PPUSH
25932: LD_STRING D2a-JMM-1
25934: PPUSH
25935: CALL_OW 88
// if IsOk ( Joan ) then
25939: LD_EXP 35
25943: PPUSH
25944: CALL_OW 302
25948: IFFALSE 26026
// begin if not IsInUnit ( JMM ) then
25950: LD_EXP 23
25954: PPUSH
25955: CALL_OW 310
25959: NOT
25960: IFFALSE 25976
// ComTurnUnit ( JMM , Joan ) ;
25962: LD_EXP 23
25966: PPUSH
25967: LD_EXP 35
25971: PPUSH
25972: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
25976: LD_EXP 35
25980: PPUSH
25981: LD_EXP 23
25985: PPUSH
25986: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
25990: LD_EXP 35
25994: PPUSH
25995: LD_STRING D2b-Joan-1
25997: PPUSH
25998: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
26002: LD_EXP 23
26006: PPUSH
26007: LD_STRING D2b-JMM-1
26009: PPUSH
26010: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
26014: LD_EXP 35
26018: PPUSH
26019: LD_STRING D2b-Joan-2
26021: PPUSH
26022: CALL_OW 88
// end ; if IsOk ( Denis ) then
26026: LD_EXP 34
26030: PPUSH
26031: CALL_OW 302
26035: IFFALSE 26089
// begin if not IsInUnit ( JMM ) then
26037: LD_EXP 23
26041: PPUSH
26042: CALL_OW 310
26046: NOT
26047: IFFALSE 26063
// ComTurnUnit ( JMM , Denis ) ;
26049: LD_EXP 23
26053: PPUSH
26054: LD_EXP 34
26058: PPUSH
26059: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
26063: LD_EXP 34
26067: PPUSH
26068: LD_EXP 23
26072: PPUSH
26073: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
26077: LD_EXP 34
26081: PPUSH
26082: LD_STRING D2c-Den-1
26084: PPUSH
26085: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
26089: LD_EXP 30
26093: PPUSH
26094: CALL_OW 302
26098: PUSH
26099: LD_STRING 08_Kikuchi
26101: PPUSH
26102: CALL_OW 28
26106: NOT
26107: AND
26108: IFFALSE 26203
// begin repeat wait ( 0 0$1 ) ;
26110: LD_INT 35
26112: PPUSH
26113: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
26117: LD_EXP 30
26121: PPUSH
26122: LD_EXP 23
26126: PPUSH
26127: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
26131: LD_EXP 23
26135: PPUSH
26136: LD_EXP 30
26140: PPUSH
26141: CALL_OW 296
26145: PUSH
26146: LD_INT 5
26148: LESS
26149: IFFALSE 26110
// ComTurnUnit ( Kikuchi , JMM ) ;
26151: LD_EXP 30
26155: PPUSH
26156: LD_EXP 23
26160: PPUSH
26161: CALL_OW 119
// if not IsInUnit ( JMM ) then
26165: LD_EXP 23
26169: PPUSH
26170: CALL_OW 310
26174: NOT
26175: IFFALSE 26191
// ComTurnUnit ( JMM , Kikuchi ) ;
26177: LD_EXP 23
26181: PPUSH
26182: LD_EXP 30
26186: PPUSH
26187: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
26191: LD_EXP 30
26195: PPUSH
26196: LD_STRING D3b-Yam-1
26198: PPUSH
26199: CALL_OW 88
// end ; if IsOk ( Khatam ) then
26203: LD_EXP 36
26207: PPUSH
26208: CALL_OW 302
26212: IFFALSE 26278
// begin if not IsInUnit ( JMM ) then
26214: LD_EXP 23
26218: PPUSH
26219: CALL_OW 310
26223: NOT
26224: IFFALSE 26240
// ComTurnUnit ( JMM , Khatam ) ;
26226: LD_EXP 23
26230: PPUSH
26231: LD_EXP 36
26235: PPUSH
26236: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
26240: LD_EXP 36
26244: PPUSH
26245: LD_EXP 23
26249: PPUSH
26250: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
26254: LD_EXP 23
26258: PPUSH
26259: LD_STRING D2c-JMM-1
26261: PPUSH
26262: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
26266: LD_EXP 36
26270: PPUSH
26271: LD_STRING D2c-Khat-1
26273: PPUSH
26274: CALL_OW 88
// end ; Video ( false ) ;
26278: LD_INT 0
26280: PPUSH
26281: CALL 92278 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
26285: LD_INT 22
26287: PUSH
26288: LD_INT 4
26290: PUSH
26291: EMPTY
26292: LIST
26293: LIST
26294: PPUSH
26295: CALL_OW 69
26299: PUSH
26300: LD_EXP 43
26304: DIFF
26305: PPUSH
26306: LD_INT 1
26308: PPUSH
26309: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
26313: LD_STRING M1a
26315: PPUSH
26316: CALL_OW 337
// SetRestrict ( b_depot , 1 , true ) ;
26320: LD_INT 0
26322: PPUSH
26323: LD_INT 1
26325: PPUSH
26326: LD_INT 1
26328: PPUSH
26329: CALL_OW 324
// joinedToEpsilon := true ;
26333: LD_ADDR_EXP 7
26337: PUSH
26338: LD_INT 1
26340: ST_TO_ADDR
// wait ( 0 0$30 ) ;
26341: LD_INT 1050
26343: PPUSH
26344: CALL_OW 67
// SpawnConvoy ;
26348: CALL 10397 0 0
// wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26352: LD_INT 25200
26354: PUSH
26355: LD_INT 2100
26357: PUSH
26358: LD_OWVAR 67
26362: MUL
26363: MINUS
26364: PPUSH
26365: CALL_OW 67
// firstAttack := true ;
26369: LD_ADDR_EXP 16
26373: PUSH
26374: LD_INT 1
26376: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26377: LD_INT 107
26379: PPUSH
26380: CALL_OW 427
// for i := 1 to Difficulty do
26384: LD_ADDR_VAR 0 1
26388: PUSH
26389: DOUBLE
26390: LD_INT 1
26392: DEC
26393: ST_TO_ADDR
26394: LD_OWVAR 67
26398: PUSH
26399: FOR_TO
26400: IFFALSE 26443
// begin wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
26402: LD_INT 25200
26404: PUSH
26405: LD_INT 2100
26407: PUSH
26408: LD_OWVAR 67
26412: MUL
26413: MINUS
26414: PPUSH
26415: CALL_OW 67
// if not ruActiveAttacks then
26419: LD_EXP 22
26423: NOT
26424: IFFALSE 26434
// ruActiveAttacks := true ;
26426: LD_ADDR_EXP 22
26430: PUSH
26431: LD_INT 1
26433: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
26434: LD_INT 107
26436: PPUSH
26437: CALL_OW 427
// end ;
26441: GO 26399
26443: POP
26444: POP
// end ;
26445: PPOPN 2
26447: END
// every 0 0$1 trigger IsOk ( Truman ) and joinedToEpsilon do
26448: LD_EXP 43
26452: PPUSH
26453: CALL_OW 302
26457: PUSH
26458: LD_EXP 7
26462: AND
26463: IFFALSE 26534
26465: GO 26467
26467: DISABLE
// begin enable ;
26468: ENABLE
// if not HasTask ( Truman ) then
26469: LD_EXP 43
26473: PPUSH
26474: CALL_OW 314
26478: NOT
26479: IFFALSE 26493
// ComMoveToArea ( Truman , removeArea ) ;
26481: LD_EXP 43
26485: PPUSH
26486: LD_INT 10
26488: PPUSH
26489: CALL_OW 113
// if IsAt ( Truman , 17 , 32 ) or IsInArea ( Truman , removeArea ) then
26493: LD_EXP 43
26497: PPUSH
26498: LD_INT 17
26500: PPUSH
26501: LD_INT 32
26503: PPUSH
26504: CALL_OW 307
26508: PUSH
26509: LD_EXP 43
26513: PPUSH
26514: LD_INT 10
26516: PPUSH
26517: CALL_OW 308
26521: OR
26522: IFFALSE 26534
// begin RemoveUnit ( Truman ) ;
26524: LD_EXP 43
26528: PPUSH
26529: CALL_OW 64
// disable ;
26533: DISABLE
// end ; end ;
26534: END
// export function DTankTeleport ( x , y ) ; begin
26535: LD_INT 0
26537: PPUSH
// DialogueOn ;
26538: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
26542: LD_VAR 0 1
26546: PPUSH
26547: LD_VAR 0 2
26551: PPUSH
26552: CALL_OW 86
// if IsOk ( Cyrus ) then
26556: LD_EXP 27
26560: PPUSH
26561: CALL_OW 302
26565: IFFALSE 26581
// Say ( Cyrus , D10-Cyrus-1 ) else
26567: LD_EXP 27
26571: PPUSH
26572: LD_STRING D10-Cyrus-1
26574: PPUSH
26575: CALL_OW 88
26579: GO 26604
// if IsOk ( JMM ) then
26581: LD_EXP 23
26585: PPUSH
26586: CALL_OW 302
26590: IFFALSE 26604
// Say ( JMM , D10-JMM-1 ) ;
26592: LD_EXP 23
26596: PPUSH
26597: LD_STRING D10-JMM-1
26599: PPUSH
26600: CALL_OW 88
// DialogueOff ;
26604: CALL_OW 7
// end ;
26608: LD_VAR 0 3
26612: RET
// export function DAttackOnAlly ; begin
26613: LD_INT 0
26615: PPUSH
// DialogueOn ;
26616: CALL_OW 6
// dwait ( 0 0$0.3 ) ;
26620: LD_INT 10
26622: PPUSH
26623: CALL_OW 68
// SayRadio ( Powell , D6b-Pow-1 ) ;
26627: LD_EXP 44
26631: PPUSH
26632: LD_STRING D6b-Pow-1
26634: PPUSH
26635: CALL_OW 94
// YouLost ( Powell ) ;
26639: LD_STRING Powell
26641: PPUSH
26642: CALL_OW 104
// DialogueOff ;
26646: CALL_OW 7
// end ;
26650: LD_VAR 0 1
26654: RET
// every 0 0$5 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
26655: LD_INT 5
26657: PPUSH
26658: LD_INT 22
26660: PUSH
26661: LD_INT 1
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: PUSH
26668: LD_INT 21
26670: PUSH
26671: LD_INT 3
26673: PUSH
26674: EMPTY
26675: LIST
26676: LIST
26677: PUSH
26678: EMPTY
26679: LIST
26680: LIST
26681: PPUSH
26682: CALL_OW 70
26686: PUSH
26687: LD_INT 5
26689: PPUSH
26690: LD_INT 22
26692: PUSH
26693: LD_INT 1
26695: PUSH
26696: EMPTY
26697: LIST
26698: LIST
26699: PUSH
26700: LD_INT 21
26702: PUSH
26703: LD_INT 2
26705: PUSH
26706: EMPTY
26707: LIST
26708: LIST
26709: PUSH
26710: EMPTY
26711: LIST
26712: LIST
26713: PPUSH
26714: CALL_OW 70
26718: OR
26719: PUSH
26720: LD_INT 1
26722: PPUSH
26723: LD_INT 2
26725: PPUSH
26726: CALL_OW 81
26730: PUSH
26731: LD_INT 1
26733: EQUAL
26734: AND
26735: IFFALSE 26970
26737: GO 26739
26739: DISABLE
// begin if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26740: LD_INT 5
26742: PPUSH
26743: LD_INT 22
26745: PUSH
26746: LD_INT 1
26748: PUSH
26749: EMPTY
26750: LIST
26751: LIST
26752: PUSH
26753: LD_INT 21
26755: PUSH
26756: LD_INT 3
26758: PUSH
26759: EMPTY
26760: LIST
26761: LIST
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: PPUSH
26767: CALL_OW 70
26771: PUSH
26772: LD_INT 5
26774: PPUSH
26775: LD_INT 22
26777: PUSH
26778: LD_INT 1
26780: PUSH
26781: EMPTY
26782: LIST
26783: LIST
26784: PUSH
26785: LD_INT 21
26787: PUSH
26788: LD_INT 2
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: EMPTY
26796: LIST
26797: LIST
26798: PPUSH
26799: CALL_OW 70
26803: OR
26804: PUSH
26805: LD_INT 1
26807: PPUSH
26808: LD_INT 2
26810: PPUSH
26811: CALL_OW 81
26815: PUSH
26816: LD_INT 1
26818: EQUAL
26819: AND
26820: IFFALSE 26829
// Query ( QAttack ) ;
26822: LD_STRING QAttack
26824: PPUSH
26825: CALL_OW 97
// wait ( 0 0$20 ) ;
26829: LD_INT 700
26831: PPUSH
26832: CALL_OW 67
// repeat wait ( 0 0$10 ) ;
26836: LD_INT 350
26838: PPUSH
26839: CALL_OW 67
// if arabianAttack then
26843: LD_EXP 4
26847: IFFALSE 26851
// exit ;
26849: GO 26970
// until ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend ;
26851: LD_INT 5
26853: PPUSH
26854: LD_INT 22
26856: PUSH
26857: LD_INT 1
26859: PUSH
26860: EMPTY
26861: LIST
26862: LIST
26863: PUSH
26864: LD_INT 21
26866: PUSH
26867: LD_INT 3
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: PPUSH
26878: CALL_OW 70
26882: PUSH
26883: LD_INT 5
26885: PPUSH
26886: LD_INT 22
26888: PUSH
26889: LD_INT 1
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: PUSH
26896: LD_INT 21
26898: PUSH
26899: LD_INT 2
26901: PUSH
26902: EMPTY
26903: LIST
26904: LIST
26905: PUSH
26906: EMPTY
26907: LIST
26908: LIST
26909: PPUSH
26910: CALL_OW 70
26914: OR
26915: PUSH
26916: LD_INT 1
26918: PPUSH
26919: LD_INT 2
26921: PPUSH
26922: CALL_OW 81
26926: PUSH
26927: LD_INT 1
26929: EQUAL
26930: AND
26931: IFFALSE 26836
// InGameOn ;
26933: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
26937: LD_INT 73
26939: PPUSH
26940: LD_INT 18
26942: PPUSH
26943: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
26947: LD_EXP 44
26951: PPUSH
26952: LD_STRING D6b-Pow-1
26954: PPUSH
26955: CALL_OW 94
// YouLost ( Powell ) ;
26959: LD_STRING Powell
26961: PPUSH
26962: CALL_OW 104
// InGameOff ;
26966: CALL_OW 9
// end ;
26970: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
26971: LD_INT 12
26973: PPUSH
26974: LD_INT 1
26976: PPUSH
26977: CALL_OW 321
26981: PUSH
26982: LD_INT 2
26984: EQUAL
26985: IFFALSE 26997
26987: GO 26989
26989: DISABLE
// ChangeMissionObjectives ( M2b ) ;
26990: LD_STRING M2b
26992: PPUSH
26993: CALL_OW 337
26997: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
26998: LD_INT 32
27000: PPUSH
27001: LD_INT 1
27003: PPUSH
27004: CALL_OW 321
27008: PUSH
27009: LD_INT 2
27011: EQUAL
27012: IFFALSE 27024
27014: GO 27016
27016: DISABLE
// ChangeMissionObjectives ( M2c ) ;
27017: LD_STRING M2c
27019: PPUSH
27020: CALL_OW 337
27024: END
// every 0 0$1 trigger arabianAttack and arabianAttackSpawned and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and UnitFilter ( arAttackersVeh , [ f_ok ] ) = 0 and UnitFilter ( arAttackersInf , [ f_ok ] ) = 0 do
27025: LD_EXP 4
27029: PUSH
27030: LD_EXP 12
27034: AND
27035: PUSH
27036: LD_INT 22
27038: PUSH
27039: LD_INT 2
27041: PUSH
27042: EMPTY
27043: LIST
27044: LIST
27045: PUSH
27046: LD_INT 21
27048: PUSH
27049: LD_INT 1
27051: PUSH
27052: EMPTY
27053: LIST
27054: LIST
27055: PUSH
27056: EMPTY
27057: LIST
27058: LIST
27059: PPUSH
27060: CALL_OW 69
27064: PUSH
27065: LD_INT 0
27067: EQUAL
27068: AND
27069: PUSH
27070: LD_EXP 58
27074: PPUSH
27075: LD_INT 50
27077: PUSH
27078: EMPTY
27079: LIST
27080: PPUSH
27081: CALL_OW 72
27085: PUSH
27086: LD_INT 0
27088: EQUAL
27089: AND
27090: PUSH
27091: LD_EXP 57
27095: PPUSH
27096: LD_INT 50
27098: PUSH
27099: EMPTY
27100: LIST
27101: PPUSH
27102: CALL_OW 72
27106: PUSH
27107: LD_INT 0
27109: EQUAL
27110: AND
27111: IFFALSE 27131
27113: GO 27115
27115: DISABLE
// begin arabianDefeated := true ;
27116: LD_ADDR_EXP 8
27120: PUSH
27121: LD_INT 1
27123: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
27124: LD_STRING M4a
27126: PPUSH
27127: CALL_OW 337
// end ;
27131: END
// every 0 0$1 trigger GetTech ( tech_Sib1 , 1 ) = state_researched and GetTech ( tech_Sib2 , 1 ) = state_researched and GetTech ( tech_SibPow , 1 ) = state_researched and GetTech ( tech_SibEng , 1 ) = state_researched do
27132: LD_INT 54
27134: PPUSH
27135: LD_INT 1
27137: PPUSH
27138: CALL_OW 321
27142: PUSH
27143: LD_INT 2
27145: EQUAL
27146: PUSH
27147: LD_INT 55
27149: PPUSH
27150: LD_INT 1
27152: PPUSH
27153: CALL_OW 321
27157: PUSH
27158: LD_INT 2
27160: EQUAL
27161: AND
27162: PUSH
27163: LD_INT 21
27165: PPUSH
27166: LD_INT 1
27168: PPUSH
27169: CALL_OW 321
27173: PUSH
27174: LD_INT 2
27176: EQUAL
27177: AND
27178: PUSH
27179: LD_INT 22
27181: PPUSH
27182: LD_INT 1
27184: PPUSH
27185: CALL_OW 321
27189: PUSH
27190: LD_INT 2
27192: EQUAL
27193: AND
27194: IFFALSE 27206
27196: GO 27198
27198: DISABLE
// ChangeMissionObjectives ( M2a ) ;
27199: LD_STRING M2a
27201: PPUSH
27202: CALL_OW 337
27206: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_constructed ] ] , [ f_lab , b_lab_siberium ] ] ) do var garySpeaker , deltaSpeaker , tmp1 , tmp2 , tmp3 ;
27207: LD_INT 22
27209: PUSH
27210: LD_INT 1
27212: PUSH
27213: EMPTY
27214: LIST
27215: LIST
27216: PUSH
27217: LD_INT 3
27219: PUSH
27220: LD_INT 57
27222: PUSH
27223: EMPTY
27224: LIST
27225: PUSH
27226: EMPTY
27227: LIST
27228: LIST
27229: PUSH
27230: LD_INT 63
27232: PUSH
27233: LD_INT 11
27235: PUSH
27236: EMPTY
27237: LIST
27238: LIST
27239: PUSH
27240: EMPTY
27241: LIST
27242: LIST
27243: LIST
27244: PPUSH
27245: CALL_OW 69
27249: IFFALSE 28475
27251: GO 27253
27253: DISABLE
27254: LD_INT 0
27256: PPUSH
27257: PPUSH
27258: PPUSH
27259: PPUSH
27260: PPUSH
// begin garySpeaker := IsOk ( Gary ) ;
27261: LD_ADDR_VAR 0 1
27265: PUSH
27266: LD_EXP 32
27270: PPUSH
27271: CALL_OW 302
27275: ST_TO_ADDR
// deltaSpeaker := IsOk ( DeltaDoctor ) ;
27276: LD_ADDR_VAR 0 2
27280: PUSH
27281: LD_EXP 39
27285: PPUSH
27286: CALL_OW 302
27290: ST_TO_ADDR
// tmp1 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27291: LD_ADDR_VAR 0 3
27295: PUSH
27296: LD_INT 22
27298: PUSH
27299: LD_INT 1
27301: PUSH
27302: EMPTY
27303: LIST
27304: LIST
27305: PUSH
27306: LD_INT 50
27308: PUSH
27309: EMPTY
27310: LIST
27311: PUSH
27312: LD_INT 25
27314: PUSH
27315: LD_INT 4
27317: PUSH
27318: EMPTY
27319: LIST
27320: LIST
27321: PUSH
27322: LD_INT 26
27324: PUSH
27325: LD_INT 1
27327: PUSH
27328: EMPTY
27329: LIST
27330: LIST
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: PPUSH
27338: CALL_OW 69
27342: PUSH
27343: LD_EXP 23
27347: PUSH
27348: LD_EXP 24
27352: PUSH
27353: LD_EXP 25
27357: PUSH
27358: LD_EXP 26
27362: PUSH
27363: LD_EXP 27
27367: PUSH
27368: LD_EXP 28
27372: PUSH
27373: LD_EXP 29
27377: PUSH
27378: LD_EXP 30
27382: PUSH
27383: LD_EXP 31
27387: PUSH
27388: LD_EXP 32
27392: PUSH
27393: LD_EXP 33
27397: PUSH
27398: LD_EXP 34
27402: PUSH
27403: LD_EXP 35
27407: PUSH
27408: LD_EXP 36
27412: PUSH
27413: LD_EXP 37
27417: PUSH
27418: LD_EXP 38
27422: PUSH
27423: LD_EXP 39
27427: PUSH
27428: LD_EXP 40
27432: PUSH
27433: LD_EXP 42
27437: PUSH
27438: LD_EXP 44
27442: PUSH
27443: EMPTY
27444: LIST
27445: LIST
27446: LIST
27447: LIST
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: LIST
27453: LIST
27454: LIST
27455: LIST
27456: LIST
27457: LIST
27458: LIST
27459: LIST
27460: LIST
27461: LIST
27462: LIST
27463: LIST
27464: DIFF
27465: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
27466: LD_ADDR_VAR 0 4
27470: PUSH
27471: LD_INT 22
27473: PUSH
27474: LD_INT 1
27476: PUSH
27477: EMPTY
27478: LIST
27479: LIST
27480: PUSH
27481: LD_INT 50
27483: PUSH
27484: EMPTY
27485: LIST
27486: PUSH
27487: LD_INT 26
27489: PUSH
27490: LD_INT 1
27492: PUSH
27493: EMPTY
27494: LIST
27495: LIST
27496: PUSH
27497: LD_INT 2
27499: PUSH
27500: LD_INT 25
27502: PUSH
27503: LD_INT 1
27505: PUSH
27506: EMPTY
27507: LIST
27508: LIST
27509: PUSH
27510: LD_INT 25
27512: PUSH
27513: LD_INT 2
27515: PUSH
27516: EMPTY
27517: LIST
27518: LIST
27519: PUSH
27520: LD_INT 25
27522: PUSH
27523: LD_INT 3
27525: PUSH
27526: EMPTY
27527: LIST
27528: LIST
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: LIST
27534: LIST
27535: PUSH
27536: EMPTY
27537: LIST
27538: LIST
27539: LIST
27540: LIST
27541: PPUSH
27542: CALL_OW 69
27546: PUSH
27547: LD_EXP 23
27551: PUSH
27552: LD_EXP 24
27556: PUSH
27557: LD_EXP 25
27561: PUSH
27562: LD_EXP 26
27566: PUSH
27567: LD_EXP 27
27571: PUSH
27572: LD_EXP 28
27576: PUSH
27577: LD_EXP 29
27581: PUSH
27582: LD_EXP 30
27586: PUSH
27587: LD_EXP 31
27591: PUSH
27592: LD_EXP 32
27596: PUSH
27597: LD_EXP 33
27601: PUSH
27602: LD_EXP 34
27606: PUSH
27607: LD_EXP 35
27611: PUSH
27612: LD_EXP 36
27616: PUSH
27617: LD_EXP 37
27621: PUSH
27622: LD_EXP 38
27626: PUSH
27627: LD_EXP 39
27631: PUSH
27632: LD_EXP 40
27636: PUSH
27637: LD_EXP 42
27641: PUSH
27642: LD_EXP 44
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: LIST
27651: LIST
27652: LIST
27653: LIST
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: DIFF
27669: ST_TO_ADDR
// if tmp1 then
27670: LD_VAR 0 3
27674: IFFALSE 27690
// tmp1 := tmp1 [ 1 ] ;
27676: LD_ADDR_VAR 0 3
27680: PUSH
27681: LD_VAR 0 3
27685: PUSH
27686: LD_INT 1
27688: ARRAY
27689: ST_TO_ADDR
// if tmp2 then
27690: LD_VAR 0 4
27694: IFFALSE 27710
// tmp2 := tmp2 [ 1 ] ;
27696: LD_ADDR_VAR 0 4
27700: PUSH
27701: LD_VAR 0 4
27705: PUSH
27706: LD_INT 1
27708: ARRAY
27709: ST_TO_ADDR
// if ( garySpeaker or tmp2 ) and ( deltaSpeaker or tmp1 ) then
27710: LD_VAR 0 1
27714: PUSH
27715: LD_VAR 0 4
27719: OR
27720: PUSH
27721: LD_VAR 0 2
27725: PUSH
27726: LD_VAR 0 3
27730: OR
27731: AND
27732: IFFALSE 27926
// begin DialogueOn ;
27734: CALL_OW 6
// if deltaSpeaker then
27738: LD_VAR 0 2
27742: IFFALSE 27758
// Say ( DeltaDoctor , D3-Sci1-1 ) else
27744: LD_EXP 39
27748: PPUSH
27749: LD_STRING D3-Sci1-1
27751: PPUSH
27752: CALL_OW 88
27756: GO 27770
// Say ( tmp1 , D3-Sci1-1 ) ;
27758: LD_VAR 0 3
27762: PPUSH
27763: LD_STRING D3-Sci1-1
27765: PPUSH
27766: CALL_OW 88
// if garySpeaker then
27770: LD_VAR 0 1
27774: IFFALSE 27790
// Say ( Gary , D3-Gary-1 ) else
27776: LD_EXP 32
27780: PPUSH
27781: LD_STRING D3-Gary-1
27783: PPUSH
27784: CALL_OW 88
27788: GO 27802
// Say ( tmp2 , D3-Gary-1 ) ;
27790: LD_VAR 0 4
27794: PPUSH
27795: LD_STRING D3-Gary-1
27797: PPUSH
27798: CALL_OW 88
// if deltaSpeaker then
27802: LD_VAR 0 2
27806: IFFALSE 27822
// Say ( DeltaDoctor , D3-Sci1-2 ) else
27808: LD_EXP 39
27812: PPUSH
27813: LD_STRING D3-Sci1-2
27815: PPUSH
27816: CALL_OW 88
27820: GO 27834
// Say ( tmp1 , D3-Sci1-2 ) ;
27822: LD_VAR 0 3
27826: PPUSH
27827: LD_STRING D3-Sci1-2
27829: PPUSH
27830: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
27834: LD_EXP 23
27838: PPUSH
27839: LD_STRING D3-JMM-2
27841: PPUSH
27842: CALL_OW 88
// if deltaSpeaker then
27846: LD_VAR 0 2
27850: IFFALSE 27866
// Say ( DeltaDoctor , D3-Sci1-3 ) else
27852: LD_EXP 39
27856: PPUSH
27857: LD_STRING D3-Sci1-3
27859: PPUSH
27860: CALL_OW 88
27864: GO 27878
// Say ( tmp1 , D3-Sci1-3 ) ;
27866: LD_VAR 0 3
27870: PPUSH
27871: LD_STRING D3-Sci1-3
27873: PPUSH
27874: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
27878: LD_EXP 23
27882: PPUSH
27883: LD_STRING D3-JMM-3
27885: PPUSH
27886: CALL_OW 88
// if deltaSpeaker then
27890: LD_VAR 0 2
27894: IFFALSE 27910
// Say ( DeltaDoctor , D3-Sci1-4 ) else
27896: LD_EXP 39
27900: PPUSH
27901: LD_STRING D3-Sci1-4
27903: PPUSH
27904: CALL_OW 88
27908: GO 27922
// Say ( tmp1 , D3-Sci1-4 ) ;
27910: LD_VAR 0 3
27914: PPUSH
27915: LD_STRING D3-Sci1-4
27917: PPUSH
27918: CALL_OW 88
// DialogueOff ;
27922: CALL_OW 7
// end ; SetTech ( tech_LasSight , 1 , state_enabled ) ;
27926: LD_INT 12
27928: PPUSH
27929: LD_INT 1
27931: PPUSH
27932: LD_INT 1
27934: PPUSH
27935: CALL_OW 322
// SetTech ( tech_Rocket , 1 , state_enabled ) ;
27939: LD_INT 40
27941: PPUSH
27942: LD_INT 1
27944: PPUSH
27945: LD_INT 1
27947: PPUSH
27948: CALL_OW 322
// SetTech ( tech_AI , 1 , state_enabled ) ;
27952: LD_INT 32
27954: PPUSH
27955: LD_INT 1
27957: PPUSH
27958: LD_INT 1
27960: PPUSH
27961: CALL_OW 322
// SetRestrict ( b_turret , 1 , true ) ;
27965: LD_INT 33
27967: PPUSH
27968: LD_INT 1
27970: PPUSH
27971: LD_INT 1
27973: PPUSH
27974: CALL_OW 324
// SetRestrict ( b_lab_computer , 1 , true ) ;
27978: LD_INT 12
27980: PPUSH
27981: LD_INT 1
27983: PPUSH
27984: LD_INT 1
27986: PPUSH
27987: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
27991: LD_STRING M2
27993: PPUSH
27994: CALL_OW 337
// wait ( 3 3$0 ) ;
27998: LD_INT 6300
28000: PPUSH
28001: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
28005: LD_INT 35
28007: PPUSH
28008: CALL_OW 67
// until not InBattle ( 1 ) ;
28012: LD_INT 1
28014: PPUSH
28015: CALL_OW 463
28019: NOT
28020: IFFALSE 28005
// if IsOk ( Simms ) and deltaSpeaker then
28022: LD_EXP 33
28026: PPUSH
28027: CALL_OW 302
28031: PUSH
28032: LD_VAR 0 2
28036: AND
28037: IFFALSE 28206
// begin DialogueOn ;
28039: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28043: LD_EXP 33
28047: PPUSH
28048: LD_STRING D3a-Sim-1
28050: PPUSH
28051: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
28055: LD_EXP 39
28059: PPUSH
28060: LD_STRING D3a-Sci1-1
28062: PPUSH
28063: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28067: LD_EXP 33
28071: PPUSH
28072: LD_STRING D3a-Sim-2
28074: PPUSH
28075: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
28079: LD_EXP 39
28083: PPUSH
28084: LD_STRING D3a-Sci1-2
28086: PPUSH
28087: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28091: LD_EXP 33
28095: PPUSH
28096: LD_STRING D3a-Sim-3
28098: PPUSH
28099: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
28103: LD_EXP 39
28107: PPUSH
28108: LD_STRING D3a-Sci1-3
28110: PPUSH
28111: CALL_OW 88
// if IsOK ( Joan ) then
28115: LD_EXP 35
28119: PPUSH
28120: CALL_OW 302
28124: IFFALSE 28140
// Say ( Simms , D3a-Sim-4 ) else
28126: LD_EXP 33
28130: PPUSH
28131: LD_STRING D3a-Sim-4
28133: PPUSH
28134: CALL_OW 88
28138: GO 28152
// Say ( Simms , D3a-Sim-4a ) ;
28140: LD_EXP 33
28144: PPUSH
28145: LD_STRING D3a-Sim-4a
28147: PPUSH
28148: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
28152: LD_EXP 39
28156: PPUSH
28157: LD_STRING D3a-Sci1-4
28159: PPUSH
28160: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28164: LD_EXP 33
28168: PPUSH
28169: LD_STRING D3a-Sim-5
28171: PPUSH
28172: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
28176: LD_EXP 39
28180: PPUSH
28181: LD_STRING D3a-Sci1-5
28183: PPUSH
28184: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28188: LD_EXP 33
28192: PPUSH
28193: LD_STRING D3a-Sim-6
28195: PPUSH
28196: CALL_OW 88
// DialogueOff ;
28200: CALL_OW 7
// end else
28204: GO 28475
// begin tmp3 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
28206: LD_ADDR_VAR 0 5
28210: PUSH
28211: LD_INT 22
28213: PUSH
28214: LD_INT 1
28216: PUSH
28217: EMPTY
28218: LIST
28219: LIST
28220: PUSH
28221: LD_INT 26
28223: PUSH
28224: LD_INT 1
28226: PUSH
28227: EMPTY
28228: LIST
28229: LIST
28230: PUSH
28231: LD_INT 25
28233: PUSH
28234: LD_INT 4
28236: PUSH
28237: EMPTY
28238: LIST
28239: LIST
28240: PUSH
28241: EMPTY
28242: LIST
28243: LIST
28244: LIST
28245: PPUSH
28246: CALL_OW 69
28250: PUSH
28251: LD_EXP 23
28255: PUSH
28256: LD_EXP 29
28260: PUSH
28261: LD_EXP 28
28265: PUSH
28266: LD_EXP 33
28270: PUSH
28271: LD_EXP 36
28275: PUSH
28276: EMPTY
28277: LIST
28278: LIST
28279: LIST
28280: LIST
28281: LIST
28282: DIFF
28283: ST_TO_ADDR
// if tmp3 then
28284: LD_VAR 0 5
28288: IFFALSE 28475
// begin DialogueOn ;
28290: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
28294: LD_EXP 33
28298: PPUSH
28299: LD_STRING D3a-Sim-1
28301: PPUSH
28302: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
28306: LD_VAR 0 5
28310: PUSH
28311: LD_INT 1
28313: ARRAY
28314: PPUSH
28315: LD_STRING D3a-Sci1-1
28317: PPUSH
28318: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
28322: LD_EXP 33
28326: PPUSH
28327: LD_STRING D3a-Sim-2
28329: PPUSH
28330: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
28334: LD_VAR 0 5
28338: PUSH
28339: LD_INT 1
28341: ARRAY
28342: PPUSH
28343: LD_STRING D3a-Sci1-2
28345: PPUSH
28346: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
28350: LD_EXP 33
28354: PPUSH
28355: LD_STRING D3a-Sim-3
28357: PPUSH
28358: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
28362: LD_VAR 0 5
28366: PUSH
28367: LD_INT 1
28369: ARRAY
28370: PPUSH
28371: LD_STRING D3a-Sci1-3
28373: PPUSH
28374: CALL_OW 88
// if IsOK ( Joan ) then
28378: LD_EXP 35
28382: PPUSH
28383: CALL_OW 302
28387: IFFALSE 28403
// Say ( Simms , D3a-Sim-4 ) else
28389: LD_EXP 33
28393: PPUSH
28394: LD_STRING D3a-Sim-4
28396: PPUSH
28397: CALL_OW 88
28401: GO 28415
// Say ( Simms , D3a-Sim-4a ) ;
28403: LD_EXP 33
28407: PPUSH
28408: LD_STRING D3a-Sim-4a
28410: PPUSH
28411: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
28415: LD_VAR 0 5
28419: PUSH
28420: LD_INT 1
28422: ARRAY
28423: PPUSH
28424: LD_STRING D3a-Sci1-4
28426: PPUSH
28427: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
28431: LD_EXP 33
28435: PPUSH
28436: LD_STRING D3a-Sim-5
28438: PPUSH
28439: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
28443: LD_VAR 0 5
28447: PUSH
28448: LD_INT 1
28450: ARRAY
28451: PPUSH
28452: LD_STRING D3a-Sci1-5
28454: PPUSH
28455: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
28459: LD_EXP 33
28463: PPUSH
28464: LD_STRING D3a-Sim-6
28466: PPUSH
28467: CALL_OW 88
// DialogueOff ;
28471: CALL_OW 7
// end ; end ; end ;
28475: PPOPN 5
28477: END
// export function DRussianNextAttack ; begin
28478: LD_INT 0
28480: PPUSH
// SayRadio ( AmScout , D4-FSol1-2 ) ;
28481: LD_EXP 40
28485: PPUSH
28486: LD_STRING D4-FSol1-2
28488: PPUSH
28489: CALL_OW 94
// end ;
28493: LD_VAR 0 1
28497: RET
// export function DRussianConvoy ; begin
28498: LD_INT 0
28500: PPUSH
// SayRadio ( AmScout , D4-FSol1-1 ) ;
28501: LD_EXP 40
28505: PPUSH
28506: LD_STRING D4-FSol1-1
28508: PPUSH
28509: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
28513: LD_STRING M3
28515: PPUSH
28516: CALL_OW 337
// end ;
28520: LD_VAR 0 1
28524: RET
// export function DRussianSpaceAmmo ( unit ) ; begin
28525: LD_INT 0
28527: PPUSH
// CenterNowOnUnits ( unit ) ;
28528: LD_VAR 0 1
28532: PPUSH
28533: CALL_OW 87
// DialogueOn ;
28537: CALL_OW 6
// if IsOK ( Cyrus ) then
28541: LD_EXP 27
28545: PPUSH
28546: CALL_OW 302
28550: IFFALSE 28566
// Say ( Cyrus , D9a-Cyrus-1 ) else
28552: LD_EXP 27
28556: PPUSH
28557: LD_STRING D9a-Cyrus-1
28559: PPUSH
28560: CALL_OW 88
28564: GO 28688
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
28566: LD_INT 22
28568: PUSH
28569: LD_INT 1
28571: PUSH
28572: EMPTY
28573: LIST
28574: LIST
28575: PUSH
28576: LD_INT 26
28578: PUSH
28579: LD_INT 1
28581: PUSH
28582: EMPTY
28583: LIST
28584: LIST
28585: PUSH
28586: LD_INT 2
28588: PUSH
28589: LD_INT 25
28591: PUSH
28592: LD_INT 1
28594: PUSH
28595: EMPTY
28596: LIST
28597: LIST
28598: PUSH
28599: LD_INT 25
28601: PUSH
28602: LD_INT 2
28604: PUSH
28605: EMPTY
28606: LIST
28607: LIST
28608: PUSH
28609: LD_INT 25
28611: PUSH
28612: LD_INT 3
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 25
28621: PUSH
28622: LD_INT 4
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 25
28631: PUSH
28632: LD_INT 5
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: EMPTY
28640: LIST
28641: LIST
28642: LIST
28643: LIST
28644: LIST
28645: LIST
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: LIST
28651: PPUSH
28652: CALL_OW 69
28656: PUSH
28657: LD_EXP 23
28661: PUSH
28662: LD_EXP 36
28666: PUSH
28667: LD_EXP 27
28671: PUSH
28672: EMPTY
28673: LIST
28674: LIST
28675: LIST
28676: DIFF
28677: PPUSH
28678: LD_STRING D9a-Sol1-1
28680: PPUSH
28681: LD_STRING D9a-Sol1-1
28683: PPUSH
28684: CALL 25083 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
28688: LD_INT 22
28690: PUSH
28691: LD_INT 1
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PUSH
28698: LD_INT 26
28700: PUSH
28701: LD_INT 1
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 2
28710: PUSH
28711: LD_INT 25
28713: PUSH
28714: LD_INT 1
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 25
28723: PUSH
28724: LD_INT 2
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 25
28733: PUSH
28734: LD_INT 3
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: LD_INT 25
28743: PUSH
28744: LD_INT 4
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: PUSH
28751: LD_INT 25
28753: PUSH
28754: LD_INT 5
28756: PUSH
28757: EMPTY
28758: LIST
28759: LIST
28760: PUSH
28761: EMPTY
28762: LIST
28763: LIST
28764: LIST
28765: LIST
28766: LIST
28767: LIST
28768: PUSH
28769: EMPTY
28770: LIST
28771: LIST
28772: LIST
28773: PPUSH
28774: CALL_OW 69
28778: PUSH
28779: LD_EXP 23
28783: PUSH
28784: LD_EXP 36
28788: PUSH
28789: LD_EXP 27
28793: PUSH
28794: EMPTY
28795: LIST
28796: LIST
28797: LIST
28798: DIFF
28799: PPUSH
28800: LD_STRING D9b-Sol1-1
28802: PPUSH
28803: LD_STRING D9b-Sol1-1
28805: PPUSH
28806: CALL 25083 0 3
// if LoadVariable ( 09_arInfo , 0 ) then
28810: LD_STRING 09_arInfo
28812: PPUSH
28813: LD_INT 0
28815: PPUSH
28816: CALL_OW 30
28820: IFFALSE 28834
// Say ( JMM , D9a-JMM-1 ) ;
28822: LD_EXP 23
28826: PPUSH
28827: LD_STRING D9a-JMM-1
28829: PPUSH
28830: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
28834: LD_EXP 23
28838: PPUSH
28839: LD_STRING D9c-JMM-1
28841: PPUSH
28842: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) then
28846: LD_INT 22
28848: PUSH
28849: LD_INT 1
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PUSH
28856: LD_INT 25
28858: PUSH
28859: LD_INT 5
28861: PUSH
28862: EMPTY
28863: LIST
28864: LIST
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PPUSH
28870: CALL_OW 69
28874: IFFALSE 28888
// Say ( JMM , D9c-JMM-1a ) ;
28876: LD_EXP 23
28880: PPUSH
28881: LD_STRING D9c-JMM-1a
28883: PPUSH
28884: CALL_OW 88
// DialogueOff ;
28888: CALL_OW 7
// end ;
28892: LD_VAR 0 2
28896: RET
// export function DArabTrait1 ; var tmp ; begin
28897: LD_INT 0
28899: PPUSH
28900: PPUSH
// if IsOk ( DeltaDoctor ) then
28901: LD_EXP 39
28905: PPUSH
28906: CALL_OW 302
28910: IFFALSE 28924
// tmp := DeltaDoctor else
28912: LD_ADDR_VAR 0 2
28916: PUSH
28917: LD_EXP 39
28921: ST_TO_ADDR
28922: GO 29122
// if IsOk ( Denis ) then
28924: LD_EXP 34
28928: PPUSH
28929: CALL_OW 302
28933: IFFALSE 28947
// tmp := Denis else
28935: LD_ADDR_VAR 0 2
28939: PUSH
28940: LD_EXP 34
28944: ST_TO_ADDR
28945: GO 29122
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
28947: LD_ADDR_VAR 0 2
28951: PUSH
28952: LD_INT 22
28954: PUSH
28955: LD_INT 1
28957: PUSH
28958: EMPTY
28959: LIST
28960: LIST
28961: PUSH
28962: LD_INT 50
28964: PUSH
28965: EMPTY
28966: LIST
28967: PUSH
28968: LD_INT 25
28970: PUSH
28971: LD_INT 4
28973: PUSH
28974: EMPTY
28975: LIST
28976: LIST
28977: PUSH
28978: LD_INT 26
28980: PUSH
28981: LD_INT 1
28983: PUSH
28984: EMPTY
28985: LIST
28986: LIST
28987: PUSH
28988: EMPTY
28989: LIST
28990: LIST
28991: LIST
28992: LIST
28993: PPUSH
28994: CALL_OW 69
28998: PUSH
28999: LD_EXP 23
29003: PUSH
29004: LD_EXP 24
29008: PUSH
29009: LD_EXP 25
29013: PUSH
29014: LD_EXP 26
29018: PUSH
29019: LD_EXP 27
29023: PUSH
29024: LD_EXP 28
29028: PUSH
29029: LD_EXP 29
29033: PUSH
29034: LD_EXP 30
29038: PUSH
29039: LD_EXP 31
29043: PUSH
29044: LD_EXP 32
29048: PUSH
29049: LD_EXP 33
29053: PUSH
29054: LD_EXP 34
29058: PUSH
29059: LD_EXP 35
29063: PUSH
29064: LD_EXP 36
29068: PUSH
29069: LD_EXP 37
29073: PUSH
29074: LD_EXP 38
29078: PUSH
29079: LD_EXP 39
29083: PUSH
29084: LD_EXP 40
29088: PUSH
29089: LD_EXP 42
29093: PUSH
29094: LD_EXP 44
29098: PUSH
29099: EMPTY
29100: LIST
29101: LIST
29102: LIST
29103: LIST
29104: LIST
29105: LIST
29106: LIST
29107: LIST
29108: LIST
29109: LIST
29110: LIST
29111: LIST
29112: LIST
29113: LIST
29114: LIST
29115: LIST
29116: LIST
29117: LIST
29118: LIST
29119: LIST
29120: DIFF
29121: ST_TO_ADDR
// if not tmp then
29122: LD_VAR 0 2
29126: NOT
29127: IFFALSE 29131
// exit ;
29129: GO 29223
// DialogueOn ;
29131: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
29135: LD_EXP 23
29139: PPUSH
29140: LD_STRING D6-JMM-1
29142: PPUSH
29143: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
29147: LD_VAR 0 2
29151: PPUSH
29152: LD_STRING D6-Sci1-1
29154: PPUSH
29155: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
29159: LD_EXP 23
29163: PPUSH
29164: LD_STRING D6-JMM-2
29166: PPUSH
29167: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
29171: LD_VAR 0 2
29175: PPUSH
29176: LD_STRING D6-Sci1-2
29178: PPUSH
29179: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
29183: LD_EXP 23
29187: PPUSH
29188: LD_STRING D6-JMM-3
29190: PPUSH
29191: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
29195: LD_VAR 0 2
29199: PPUSH
29200: LD_STRING D6-Sci1-3
29202: PPUSH
29203: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
29207: LD_EXP 23
29211: PPUSH
29212: LD_STRING D6-JMM-4
29214: PPUSH
29215: CALL_OW 88
// DialogueOff ;
29219: CALL_OW 7
// end ;
29223: LD_VAR 0 1
29227: RET
// export function DArabTrait2 ; begin
29228: LD_INT 0
29230: PPUSH
// if not IsPlaced ( Khatam ) or not IsOk ( Ahmed ) or not IsOk ( Dietrich ) then
29231: LD_EXP 36
29235: PPUSH
29236: CALL_OW 305
29240: NOT
29241: PUSH
29242: LD_EXP 51
29246: PPUSH
29247: CALL_OW 302
29251: NOT
29252: OR
29253: PUSH
29254: LD_EXP 50
29258: PPUSH
29259: CALL_OW 302
29263: NOT
29264: OR
29265: IFFALSE 29269
// exit ;
29267: GO 29325
// DialogueOn ;
29269: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
29273: LD_EXP 51
29277: PPUSH
29278: LD_STRING D5-Ar1-1
29280: PPUSH
29281: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
29285: LD_EXP 50
29289: PPUSH
29290: LD_STRING D5-Diet-1
29292: PPUSH
29293: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
29297: LD_EXP 51
29301: PPUSH
29302: LD_STRING D5-Ar1-2
29304: PPUSH
29305: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
29309: LD_EXP 50
29313: PPUSH
29314: LD_STRING D5-Diet-2
29316: PPUSH
29317: CALL_OW 88
// DialogueOff ;
29321: CALL_OW 7
// end ;
29325: LD_VAR 0 1
29329: RET
// every 0 0$2 trigger arabianAttack do var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding , speaker ;
29330: LD_EXP 4
29334: IFFALSE 31047
29336: GO 29338
29338: DISABLE
29339: LD_INT 0
29341: PPUSH
29342: PPUSH
29343: PPUSH
29344: PPUSH
29345: PPUSH
29346: PPUSH
29347: PPUSH
29348: PPUSH
// begin SetAttitude ( 2 , 3 , att_friend , true ) ;
29349: LD_INT 2
29351: PPUSH
29352: LD_INT 3
29354: PPUSH
29355: LD_INT 1
29357: PPUSH
29358: LD_INT 1
29360: PPUSH
29361: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
29365: LD_INT 2
29367: PPUSH
29368: LD_INT 6
29370: PPUSH
29371: LD_INT 1
29373: PPUSH
29374: LD_INT 1
29376: PPUSH
29377: CALL_OW 80
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
29381: LD_ADDR_VAR 0 5
29385: PUSH
29386: LD_INT 22
29388: PUSH
29389: LD_INT 2
29391: PUSH
29392: EMPTY
29393: LIST
29394: LIST
29395: PUSH
29396: LD_INT 2
29398: PUSH
29399: LD_INT 25
29401: PUSH
29402: LD_INT 4
29404: PUSH
29405: EMPTY
29406: LIST
29407: LIST
29408: PUSH
29409: LD_INT 25
29411: PUSH
29412: LD_INT 2
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 25
29421: PUSH
29422: LD_INT 3
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: EMPTY
29430: LIST
29431: LIST
29432: LIST
29433: LIST
29434: PUSH
29435: EMPTY
29436: LIST
29437: LIST
29438: PPUSH
29439: CALL_OW 69
29443: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff Dietrich ;
29444: LD_ADDR_VAR 0 4
29448: PUSH
29449: LD_INT 22
29451: PUSH
29452: LD_INT 2
29454: PUSH
29455: EMPTY
29456: LIST
29457: LIST
29458: PUSH
29459: LD_INT 21
29461: PUSH
29462: LD_INT 1
29464: PUSH
29465: EMPTY
29466: LIST
29467: LIST
29468: PUSH
29469: LD_INT 2
29471: PUSH
29472: LD_INT 25
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: PUSH
29482: LD_INT 25
29484: PUSH
29485: LD_INT 8
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 25
29494: PUSH
29495: LD_INT 15
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: LIST
29506: LIST
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: LIST
29512: PPUSH
29513: CALL_OW 69
29517: PUSH
29518: LD_EXP 50
29522: DIFF
29523: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
29524: LD_ADDR_VAR 0 6
29528: PUSH
29529: LD_INT 22
29531: PUSH
29532: LD_INT 2
29534: PUSH
29535: EMPTY
29536: LIST
29537: LIST
29538: PUSH
29539: LD_INT 30
29541: PUSH
29542: LD_INT 5
29544: PUSH
29545: EMPTY
29546: LIST
29547: LIST
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PPUSH
29553: CALL_OW 69
29557: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
29558: LD_VAR 0 5
29562: PPUSH
29563: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
29567: LD_VAR 0 4
29571: PPUSH
29572: CALL_OW 122
// RaiseSailEvent ( EArabAttack ) ;
29576: LD_INT 101
29578: PPUSH
29579: CALL_OW 427
// SayRadio ( AmScout , D4-FSol1-3 ) ;
29583: LD_EXP 40
29587: PPUSH
29588: LD_STRING D4-FSol1-3
29590: PPUSH
29591: CALL_OW 94
// for i in arCivilian do
29595: LD_ADDR_VAR 0 1
29599: PUSH
29600: LD_VAR 0 5
29604: PUSH
29605: FOR_IN
29606: IFFALSE 29685
// begin AddComEnterUnit ( i , barracks [ i mod 2 + 1 ] ) ;
29608: LD_VAR 0 1
29612: PPUSH
29613: LD_VAR 0 6
29617: PUSH
29618: LD_VAR 0 1
29622: PUSH
29623: LD_INT 2
29625: MOD
29626: PUSH
29627: LD_INT 1
29629: PLUS
29630: ARRAY
29631: PPUSH
29632: CALL_OW 180
// AddComChangeProfession ( i , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
29636: LD_VAR 0 1
29640: PPUSH
29641: LD_INT 1
29643: PUSH
29644: LD_INT 8
29646: PUSH
29647: EMPTY
29648: LIST
29649: LIST
29650: PUSH
29651: LD_INT 1
29653: PPUSH
29654: LD_INT 2
29656: PPUSH
29657: CALL_OW 12
29661: ARRAY
29662: PPUSH
29663: CALL_OW 183
// AddComExitBuilding ( i ) ;
29667: LD_VAR 0 1
29671: PPUSH
29672: CALL_OW 182
// wait ( 0 0$0.5 ) ;
29676: LD_INT 18
29678: PPUSH
29679: CALL_OW 67
// end ;
29683: GO 29605
29685: POP
29686: POP
// wait ( 0 0$5 ) ;
29687: LD_INT 175
29689: PPUSH
29690: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
29694: LD_INT 76
29696: PPUSH
29697: LD_INT 19
29699: PPUSH
29700: CALL_OW 84
// DialogueOn ;
29704: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29708: LD_INT 22
29710: PUSH
29711: LD_INT 1
29713: PUSH
29714: EMPTY
29715: LIST
29716: LIST
29717: PUSH
29718: LD_INT 26
29720: PUSH
29721: LD_INT 1
29723: PUSH
29724: EMPTY
29725: LIST
29726: LIST
29727: PUSH
29728: LD_INT 2
29730: PUSH
29731: LD_INT 25
29733: PUSH
29734: LD_INT 1
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: PUSH
29741: LD_INT 25
29743: PUSH
29744: LD_INT 2
29746: PUSH
29747: EMPTY
29748: LIST
29749: LIST
29750: PUSH
29751: LD_INT 25
29753: PUSH
29754: LD_INT 3
29756: PUSH
29757: EMPTY
29758: LIST
29759: LIST
29760: PUSH
29761: LD_INT 25
29763: PUSH
29764: LD_INT 4
29766: PUSH
29767: EMPTY
29768: LIST
29769: LIST
29770: PUSH
29771: LD_INT 25
29773: PUSH
29774: LD_INT 5
29776: PUSH
29777: EMPTY
29778: LIST
29779: LIST
29780: PUSH
29781: EMPTY
29782: LIST
29783: LIST
29784: LIST
29785: LIST
29786: LIST
29787: LIST
29788: PUSH
29789: EMPTY
29790: LIST
29791: LIST
29792: LIST
29793: PPUSH
29794: CALL_OW 69
29798: PPUSH
29799: LD_STRING D8-Sol1-1
29801: PPUSH
29802: LD_STRING D8-Sol1-1
29804: PPUSH
29805: CALL 25083 0 3
// if IsOk ( DeltaDoctor ) then
29809: LD_EXP 39
29813: PPUSH
29814: CALL_OW 302
29818: IFFALSE 29834
// Say ( DeltaDoctor , D8-Sci1-1 ) else
29820: LD_EXP 39
29824: PPUSH
29825: LD_STRING D8-Sci1-1
29827: PPUSH
29828: CALL_OW 88
29832: GO 29935
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
29834: LD_INT 22
29836: PUSH
29837: LD_INT 1
29839: PUSH
29840: EMPTY
29841: LIST
29842: LIST
29843: PUSH
29844: LD_INT 26
29846: PUSH
29847: LD_INT 1
29849: PUSH
29850: EMPTY
29851: LIST
29852: LIST
29853: PUSH
29854: LD_INT 2
29856: PUSH
29857: LD_INT 25
29859: PUSH
29860: LD_INT 1
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: PUSH
29867: LD_INT 25
29869: PUSH
29870: LD_INT 2
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: PUSH
29877: LD_INT 25
29879: PUSH
29880: LD_INT 3
29882: PUSH
29883: EMPTY
29884: LIST
29885: LIST
29886: PUSH
29887: LD_INT 25
29889: PUSH
29890: LD_INT 4
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: PUSH
29897: LD_INT 25
29899: PUSH
29900: LD_INT 5
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: EMPTY
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: LIST
29914: PUSH
29915: EMPTY
29916: LIST
29917: LIST
29918: LIST
29919: PPUSH
29920: CALL_OW 69
29924: PPUSH
29925: LD_STRING D8-Sol1-1
29927: PPUSH
29928: LD_STRING D8-Sol1-1
29930: PPUSH
29931: CALL 25083 0 3
// Say ( JMM , D8-JMM-1 ) ;
29935: LD_EXP 23
29939: PPUSH
29940: LD_STRING D8-JMM-1
29942: PPUSH
29943: CALL_OW 88
// DialogueOff ;
29947: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
29951: LD_INT 2
29953: PPUSH
29954: LD_INT 2
29956: PPUSH
29957: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
29961: LD_INT 1
29963: PPUSH
29964: LD_INT 2
29966: PPUSH
29967: LD_INT 2
29969: PPUSH
29970: LD_INT 1
29972: PPUSH
29973: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
29977: LD_INT 3
29979: PPUSH
29980: LD_INT 2
29982: PPUSH
29983: LD_INT 1
29985: PPUSH
29986: LD_INT 1
29988: PPUSH
29989: CALL_OW 80
// SetAttitude ( 6 , 2 , att_friend , true ) ;
29993: LD_INT 6
29995: PPUSH
29996: LD_INT 2
29998: PPUSH
29999: LD_INT 1
30001: PPUSH
30002: LD_INT 1
30004: PPUSH
30005: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
30009: LD_STRING M4
30011: PPUSH
30012: CALL_OW 337
// wait ( 0 0$1 ) ;
30016: LD_INT 35
30018: PPUSH
30019: CALL_OW 67
// if IsLive ( Khatam ) then
30023: LD_EXP 36
30027: PPUSH
30028: CALL_OW 300
30032: IFFALSE 30046
// DoNotAttack ( 2 , Khatam ) ;
30034: LD_INT 2
30036: PPUSH
30037: LD_EXP 36
30041: PPUSH
30042: CALL_OW 471
// wait ( 0 0$1 ) ;
30046: LD_INT 35
30048: PPUSH
30049: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
30053: LD_ADDR_VAR 0 7
30057: PUSH
30058: LD_INT 22
30060: PUSH
30061: LD_INT 1
30063: PUSH
30064: EMPTY
30065: LIST
30066: LIST
30067: PUSH
30068: LD_INT 21
30070: PUSH
30071: LD_INT 3
30073: PUSH
30074: EMPTY
30075: LIST
30076: LIST
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PPUSH
30082: CALL_OW 69
30086: PPUSH
30087: LD_VAR 0 4
30091: PUSH
30092: LD_INT 1
30094: ARRAY
30095: PPUSH
30096: CALL_OW 74
30100: ST_TO_ADDR
// for i := 1 to 3 do
30101: LD_ADDR_VAR 0 1
30105: PUSH
30106: DOUBLE
30107: LD_INT 1
30109: DEC
30110: ST_TO_ADDR
30111: LD_INT 3
30113: PUSH
30114: FOR_TO
30115: IFFALSE 30174
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ i ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
30117: LD_VAR 0 4
30121: PPUSH
30122: LD_INT 25
30124: PUSH
30125: LD_INT 1
30127: PUSH
30128: EMPTY
30129: LIST
30130: LIST
30131: PPUSH
30132: CALL_OW 72
30136: PUSH
30137: LD_VAR 0 1
30141: ARRAY
30142: PPUSH
30143: LD_VAR 0 7
30147: PPUSH
30148: CALL_OW 250
30152: PPUSH
30153: LD_VAR 0 7
30157: PPUSH
30158: CALL_OW 251
30162: PPUSH
30163: LD_VAR 0 7
30167: PPUSH
30168: CALL_OW 192
30172: GO 30114
30174: POP
30175: POP
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
30176: LD_VAR 0 4
30180: PPUSH
30181: LD_INT 84
30183: PPUSH
30184: LD_INT 22
30186: PPUSH
30187: CALL_OW 174
// AddComMoveXY ( arSoldiers , 95 , 12 ) ;
30191: LD_VAR 0 4
30195: PPUSH
30196: LD_INT 95
30198: PPUSH
30199: LD_INT 12
30201: PPUSH
30202: CALL_OW 171
// AddComMoveXY ( arSoldiers , 102 , 11 ) ;
30206: LD_VAR 0 4
30210: PPUSH
30211: LD_INT 102
30213: PPUSH
30214: LD_INT 11
30216: PPUSH
30217: CALL_OW 171
// AddComMoveXY ( arSoldiers , 116 , 15 ) ;
30221: LD_VAR 0 4
30225: PPUSH
30226: LD_INT 116
30228: PPUSH
30229: LD_INT 15
30231: PPUSH
30232: CALL_OW 171
// AddComMoveXY ( arSoldiers , 140 , 25 ) ;
30236: LD_VAR 0 4
30240: PPUSH
30241: LD_INT 140
30243: PPUSH
30244: LD_INT 25
30246: PPUSH
30247: CALL_OW 171
// arSoldiers := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff Dietrich ;
30251: LD_ADDR_VAR 0 4
30255: PUSH
30256: LD_INT 22
30258: PUSH
30259: LD_INT 2
30261: PUSH
30262: EMPTY
30263: LIST
30264: LIST
30265: PUSH
30266: LD_INT 21
30268: PUSH
30269: LD_INT 1
30271: PUSH
30272: EMPTY
30273: LIST
30274: LIST
30275: PUSH
30276: LD_INT 2
30278: PUSH
30279: LD_INT 25
30281: PUSH
30282: LD_INT 1
30284: PUSH
30285: EMPTY
30286: LIST
30287: LIST
30288: PUSH
30289: LD_INT 25
30291: PUSH
30292: LD_INT 8
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: PUSH
30299: LD_INT 25
30301: PUSH
30302: LD_INT 15
30304: PUSH
30305: EMPTY
30306: LIST
30307: LIST
30308: PUSH
30309: EMPTY
30310: LIST
30311: LIST
30312: LIST
30313: LIST
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: LIST
30319: PPUSH
30320: CALL_OW 69
30324: PUSH
30325: LD_EXP 50
30329: DIFF
30330: ST_TO_ADDR
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
30331: LD_ADDR_VAR 0 5
30335: PUSH
30336: LD_INT 22
30338: PUSH
30339: LD_INT 2
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: PUSH
30346: LD_INT 21
30348: PUSH
30349: LD_INT 1
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: PUSH
30356: LD_INT 2
30358: PUSH
30359: LD_INT 25
30361: PUSH
30362: LD_INT 2
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 25
30371: PUSH
30372: LD_INT 3
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 25
30381: PUSH
30382: LD_INT 4
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 25
30391: PUSH
30392: LD_INT 12
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 25
30401: PUSH
30402: LD_INT 16
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: LIST
30415: LIST
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: LIST
30421: PPUSH
30422: CALL_OW 69
30426: ST_TO_ADDR
// arCivilian := arCivilian ^ Dietrich ;
30427: LD_ADDR_VAR 0 5
30431: PUSH
30432: LD_VAR 0 5
30436: PUSH
30437: LD_EXP 50
30441: ADD
30442: ST_TO_ADDR
// AddComMoveXY ( arCivilian , 81 , 12 ) ;
30443: LD_VAR 0 5
30447: PPUSH
30448: LD_INT 81
30450: PPUSH
30451: LD_INT 12
30453: PPUSH
30454: CALL_OW 171
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
30458: LD_VAR 0 5
30462: PPUSH
30463: LD_INT 88
30465: PPUSH
30466: LD_INT 8
30468: PPUSH
30469: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
30473: LD_VAR 0 5
30477: PPUSH
30478: LD_INT 102
30480: PPUSH
30481: LD_INT 10
30483: PPUSH
30484: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
30488: LD_VAR 0 5
30492: PPUSH
30493: LD_INT 116
30495: PPUSH
30496: LD_INT 15
30498: PPUSH
30499: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
30503: LD_VAR 0 5
30507: PPUSH
30508: LD_INT 140
30510: PPUSH
30511: LD_INT 25
30513: PPUSH
30514: CALL_OW 171
// wait ( 3 ) ;
30518: LD_INT 3
30520: PPUSH
30521: CALL_OW 67
// arEscapist := arCivilian union arSoldiers ;
30525: LD_ADDR_EXP 56
30529: PUSH
30530: LD_VAR 0 5
30534: PUSH
30535: LD_VAR 0 4
30539: UNION
30540: ST_TO_ADDR
// if IsOk ( Gary ) then
30541: LD_EXP 32
30545: PPUSH
30546: CALL_OW 302
30550: IFFALSE 30564
// Say ( Gary , D8a-Gary-1 ) ;
30552: LD_EXP 32
30556: PPUSH
30557: LD_STRING D8a-Gary-1
30559: PPUSH
30560: CALL_OW 88
// wait ( 0 0$5 ) ;
30564: LD_INT 175
30566: PPUSH
30567: CALL_OW 67
// if IsOK ( Khatam ) then
30571: LD_EXP 36
30575: PPUSH
30576: CALL_OW 302
30580: IFFALSE 31047
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
30582: LD_ADDR_VAR 0 2
30586: PUSH
30587: LD_INT 22
30589: PUSH
30590: LD_INT 1
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: PUSH
30597: LD_INT 2
30599: PUSH
30600: LD_INT 25
30602: PUSH
30603: LD_INT 1
30605: PUSH
30606: EMPTY
30607: LIST
30608: LIST
30609: PUSH
30610: LD_INT 25
30612: PUSH
30613: LD_INT 2
30615: PUSH
30616: EMPTY
30617: LIST
30618: LIST
30619: PUSH
30620: LD_INT 25
30622: PUSH
30623: LD_INT 3
30625: PUSH
30626: EMPTY
30627: LIST
30628: LIST
30629: PUSH
30630: LD_INT 25
30632: PUSH
30633: LD_INT 4
30635: PUSH
30636: EMPTY
30637: LIST
30638: LIST
30639: PUSH
30640: LD_INT 25
30642: PUSH
30643: LD_INT 5
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: PUSH
30650: LD_INT 25
30652: PUSH
30653: LD_INT 8
30655: PUSH
30656: EMPTY
30657: LIST
30658: LIST
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: PUSH
30669: EMPTY
30670: LIST
30671: LIST
30672: PPUSH
30673: CALL_OW 69
30677: PUSH
30678: LD_EXP 23
30682: PUSH
30683: LD_EXP 24
30687: PUSH
30688: LD_EXP 25
30692: PUSH
30693: LD_EXP 26
30697: PUSH
30698: LD_EXP 27
30702: PUSH
30703: LD_EXP 28
30707: PUSH
30708: LD_EXP 29
30712: PUSH
30713: LD_EXP 30
30717: PUSH
30718: LD_EXP 31
30722: PUSH
30723: LD_EXP 32
30727: PUSH
30728: LD_EXP 33
30732: PUSH
30733: LD_EXP 34
30737: PUSH
30738: LD_EXP 35
30742: PUSH
30743: LD_EXP 36
30747: PUSH
30748: LD_EXP 37
30752: PUSH
30753: LD_EXP 38
30757: PUSH
30758: LD_EXP 39
30762: PUSH
30763: LD_EXP 42
30767: PUSH
30768: LD_EXP 44
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: LIST
30777: LIST
30778: LIST
30779: LIST
30780: LIST
30781: LIST
30782: LIST
30783: LIST
30784: LIST
30785: LIST
30786: LIST
30787: LIST
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: DIFF
30794: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
30795: LD_EXP 36
30799: PPUSH
30800: LD_INT 8
30802: PPUSH
30803: CALL_OW 235
// ComExit ( Khatam ) ;
30807: LD_EXP 36
30811: PPUSH
30812: CALL 92704 0 1
// wait ( 0 0$1 ) ;
30816: LD_INT 35
30818: PPUSH
30819: CALL_OW 67
// ComMoveToArea ( Khatam , khatamArea ) ;
30823: LD_EXP 36
30827: PPUSH
30828: LD_INT 11
30830: PPUSH
30831: CALL_OW 113
// escapeKhatam := true ;
30835: LD_ADDR_EXP 11
30839: PUSH
30840: LD_INT 1
30842: ST_TO_ADDR
// if not tmp then
30843: LD_VAR 0 2
30847: NOT
30848: IFFALSE 30852
// exit ;
30850: GO 31047
// wait ( 0 0$2 ) ;
30852: LD_INT 70
30854: PPUSH
30855: CALL_OW 67
// DialogueOn ;
30859: CALL_OW 6
// speaker := DialogRandom ( tmp , D8b-Sol1-1 , D8b-FSol1-1 ) ;
30863: LD_ADDR_VAR 0 8
30867: PUSH
30868: LD_VAR 0 2
30872: PPUSH
30873: LD_STRING D8b-Sol1-1
30875: PPUSH
30876: LD_STRING D8b-FSol1-1
30878: PPUSH
30879: CALL 25083 0 3
30883: ST_TO_ADDR
// Say ( Khatam , D8b-Khat-1 ) ;
30884: LD_EXP 36
30888: PPUSH
30889: LD_STRING D8b-Khat-1
30891: PPUSH
30892: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
30896: LD_VAR 0 8
30900: PPUSH
30901: CALL_OW 258
30905: PUSH
30906: LD_INT 1
30908: EQUAL
30909: IFFALSE 30925
// Say ( speaker , D8b-Sol1-2 ) else
30911: LD_VAR 0 8
30915: PPUSH
30916: LD_STRING D8b-Sol1-2
30918: PPUSH
30919: CALL_OW 88
30923: GO 30937
// Say ( speaker , D8b-FSol1-2 ) ;
30925: LD_VAR 0 8
30929: PPUSH
30930: LD_STRING D8b-FSol1-2
30932: PPUSH
30933: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
30937: LD_EXP 36
30941: PPUSH
30942: LD_STRING D8b-Khat-2
30944: PPUSH
30945: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
30949: LD_VAR 0 8
30953: PPUSH
30954: CALL_OW 258
30958: PUSH
30959: LD_INT 1
30961: EQUAL
30962: IFFALSE 30978
// Say ( speaker , D8b-Sol1-3 ) else
30964: LD_VAR 0 8
30968: PPUSH
30969: LD_STRING D8b-Sol1-3
30971: PPUSH
30972: CALL_OW 88
30976: GO 30990
// Say ( speaker , D8b-FSol1-3 ) ;
30978: LD_VAR 0 8
30982: PPUSH
30983: LD_STRING D8b-FSol1-3
30985: PPUSH
30986: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
30990: LD_EXP 36
30994: PPUSH
30995: LD_STRING D8b-Khat-3
30997: PPUSH
30998: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
31002: LD_VAR 0 8
31006: PPUSH
31007: CALL_OW 258
31011: PUSH
31012: LD_INT 1
31014: EQUAL
31015: IFFALSE 31031
// Say ( speaker , D8b-Sol1-4 ) else
31017: LD_VAR 0 8
31021: PPUSH
31022: LD_STRING D8b-Sol1-4
31024: PPUSH
31025: CALL_OW 88
31029: GO 31043
// Say ( speaker , D8b-FSol1-4 ) ;
31031: LD_VAR 0 8
31035: PPUSH
31036: LD_STRING D8b-FSol1-4
31038: PPUSH
31039: CALL_OW 88
// DialogueOff ;
31043: CALL_OW 7
// end ; end ;
31047: PPOPN 8
31049: END
// every 0 0$1 trigger escapeKhatam and IsOk ( Khatam ) do
31050: LD_EXP 11
31054: PUSH
31055: LD_EXP 36
31059: PPUSH
31060: CALL_OW 302
31064: AND
31065: IFFALSE 31140
31067: GO 31069
31069: DISABLE
// begin enable ;
31070: ENABLE
// if IsOk ( Khatam ) and not HasTask ( Khatam ) then
31071: LD_EXP 36
31075: PPUSH
31076: CALL_OW 302
31080: PUSH
31081: LD_EXP 36
31085: PPUSH
31086: CALL_OW 314
31090: NOT
31091: AND
31092: IFFALSE 31106
// ComMoveToArea ( Khatam , khatamArea ) ;
31094: LD_EXP 36
31098: PPUSH
31099: LD_INT 11
31101: PPUSH
31102: CALL_OW 113
// if IsInArea ( Khatam , khatamArea ) then
31106: LD_EXP 36
31110: PPUSH
31111: LD_INT 11
31113: PPUSH
31114: CALL_OW 308
31118: IFFALSE 31140
// begin SaveVariable ( 1 , 10_KhatamStatus_1 ) ;
31120: LD_INT 1
31122: PPUSH
31123: LD_STRING 10_KhatamStatus_1
31125: PPUSH
31126: CALL_OW 39
// RemoveUnit ( Khatam ) ;
31130: LD_EXP 36
31134: PPUSH
31135: CALL_OW 64
// disable ;
31139: DISABLE
// end ; end ;
31140: END
// every 0 0$30 trigger joinedToEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) and FilterAllUnits ( [ [ f_side , 5 ] , [ f_ok ] ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_ok ] , [ f_type , unit_human ] ] ) = 0 or not arabianAttack ) do
31141: LD_EXP 7
31145: PUSH
31146: LD_STRING 02_mikhailStatus_1
31148: PPUSH
31149: LD_INT 0
31151: PPUSH
31152: CALL_OW 30
31156: AND
31157: PUSH
31158: LD_INT 22
31160: PUSH
31161: LD_INT 5
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 50
31170: PUSH
31171: EMPTY
31172: LIST
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: PPUSH
31178: CALL_OW 69
31182: PUSH
31183: LD_INT 0
31185: EQUAL
31186: AND
31187: PUSH
31188: LD_INT 22
31190: PUSH
31191: LD_INT 2
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 50
31200: PUSH
31201: EMPTY
31202: LIST
31203: PUSH
31204: LD_INT 21
31206: PUSH
31207: LD_INT 1
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: EMPTY
31215: LIST
31216: LIST
31217: LIST
31218: PPUSH
31219: CALL_OW 69
31223: PUSH
31224: LD_INT 0
31226: EQUAL
31227: PUSH
31228: LD_EXP 4
31232: NOT
31233: OR
31234: AND
31235: IFFALSE 31257
31237: GO 31239
31239: DISABLE
// begin wait ( 2 2$00 * Difficulty ) ;
31240: LD_INT 4200
31242: PUSH
31243: LD_OWVAR 67
31247: MUL
31248: PPUSH
31249: CALL_OW 67
// PrepareCornell ;
31253: CALL 3198 0 0
// end ;
31257: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 and IsOk ( Cornell ) do
31258: LD_INT 22
31260: PUSH
31261: LD_INT 1
31263: PUSH
31264: EMPTY
31265: LIST
31266: LIST
31267: PPUSH
31268: CALL_OW 69
31272: PPUSH
31273: LD_EXP 42
31277: PPUSH
31278: CALL_OW 74
31282: PPUSH
31283: LD_EXP 42
31287: PPUSH
31288: CALL_OW 296
31292: PUSH
31293: LD_INT 9
31295: LESS
31296: PUSH
31297: LD_EXP 42
31301: PPUSH
31302: CALL_OW 302
31306: AND
31307: IFFALSE 31751
31309: GO 31311
31311: DISABLE
// begin InGameOn ;
31312: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
31316: LD_EXP 42
31320: PPUSH
31321: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
31325: LD_EXP 42
31329: PPUSH
31330: LD_STRING D7-Corn-1
31332: PPUSH
31333: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
31337: LD_INT 22
31339: PUSH
31340: LD_INT 1
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: PUSH
31347: LD_INT 2
31349: PUSH
31350: LD_INT 25
31352: PUSH
31353: LD_INT 1
31355: PUSH
31356: EMPTY
31357: LIST
31358: LIST
31359: PUSH
31360: LD_INT 25
31362: PUSH
31363: LD_INT 2
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: PUSH
31370: LD_INT 25
31372: PUSH
31373: LD_INT 3
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: PUSH
31380: LD_INT 25
31382: PUSH
31383: LD_INT 4
31385: PUSH
31386: EMPTY
31387: LIST
31388: LIST
31389: PUSH
31390: LD_INT 25
31392: PUSH
31393: LD_INT 5
31395: PUSH
31396: EMPTY
31397: LIST
31398: LIST
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: LIST
31404: LIST
31405: LIST
31406: LIST
31407: PUSH
31408: EMPTY
31409: LIST
31410: LIST
31411: PPUSH
31412: CALL_OW 69
31416: PPUSH
31417: LD_STRING D7-Sol1-1
31419: PPUSH
31420: LD_STRING D7-FSol1-1
31422: PPUSH
31423: CALL 25083 0 3
// CenterNowOnUnits ( Cornell ) ;
31427: LD_EXP 42
31431: PPUSH
31432: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
31436: LD_EXP 42
31440: PPUSH
31441: LD_STRING D7-Corn-2
31443: PPUSH
31444: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
31448: LD_EXP 23
31452: PPUSH
31453: LD_STRING D7-JMM-2
31455: PPUSH
31456: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
31460: LD_EXP 42
31464: PPUSH
31465: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
31469: LD_EXP 42
31473: PPUSH
31474: LD_STRING D7-Corn-3
31476: PPUSH
31477: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
31481: LD_EXP 42
31485: PPUSH
31486: LD_INT 250
31488: PPUSH
31489: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
31493: LD_EXP 42
31497: PPUSH
31498: LD_INT 1
31500: PPUSH
31501: CALL_OW 235
// wait ( 0 0$1 ) ;
31505: LD_INT 35
31507: PPUSH
31508: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
31512: LD_EXP 23
31516: PPUSH
31517: LD_STRING D7-JMM-3
31519: PPUSH
31520: CALL_OW 88
// InGameOff ;
31524: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
31528: LD_INT 35
31530: PPUSH
31531: CALL_OW 67
// if IsDead ( Cornell ) then
31535: LD_EXP 42
31539: PPUSH
31540: CALL_OW 301
31544: IFFALSE 31548
// exit ;
31546: GO 31751
// until GetLives ( Cornell ) > 350 ;
31548: LD_EXP 42
31552: PPUSH
31553: CALL_OW 256
31557: PUSH
31558: LD_INT 350
31560: GREATER
31561: IFFALSE 31528
// DialogueOn ;
31563: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
31567: LD_EXP 23
31571: PPUSH
31572: LD_STRING D7a-JMM-1
31574: PPUSH
31575: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
31579: LD_EXP 42
31583: PPUSH
31584: LD_STRING D7a-Corn-1
31586: PPUSH
31587: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
31591: LD_EXP 23
31595: PPUSH
31596: LD_STRING D7a-JMM-2
31598: PPUSH
31599: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
31603: LD_EXP 42
31607: PPUSH
31608: LD_STRING D7a-Corn-2
31610: PPUSH
31611: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
31615: LD_EXP 23
31619: PPUSH
31620: LD_STRING D7a-JMM-3
31622: PPUSH
31623: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
31627: LD_EXP 42
31631: PPUSH
31632: LD_STRING D7a-Corn-3
31634: PPUSH
31635: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
31639: LD_EXP 23
31643: PPUSH
31644: LD_STRING D7a-JMM-4
31646: PPUSH
31647: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
31651: LD_EXP 42
31655: PPUSH
31656: LD_STRING D7a-Corn-4
31658: PPUSH
31659: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
31663: LD_EXP 23
31667: PPUSH
31668: LD_STRING D7a-JMM-5
31670: PPUSH
31671: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
31675: LD_EXP 42
31679: PPUSH
31680: LD_STRING D7a-Corn-5
31682: PPUSH
31683: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
31687: LD_EXP 23
31691: PPUSH
31692: LD_STRING D7a-JMM-6
31694: PPUSH
31695: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
31699: LD_EXP 42
31703: PPUSH
31704: LD_STRING D7a-Corn-6
31706: PPUSH
31707: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
31711: LD_EXP 23
31715: PPUSH
31716: LD_STRING D7a-JMM-7
31718: PPUSH
31719: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
31723: LD_EXP 42
31727: PPUSH
31728: LD_STRING D7a-Corn-7
31730: PPUSH
31731: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
31735: LD_EXP 23
31739: PPUSH
31740: LD_STRING D7a-JMM-8
31742: PPUSH
31743: CALL_OW 88
// DialogueOff ;
31747: CALL_OW 7
// end ;
31751: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
31752: LD_INT 54
31754: PPUSH
31755: LD_INT 1
31757: PPUSH
31758: CALL_OW 321
31762: PUSH
31763: LD_INT 2
31765: EQUAL
31766: PUSH
31767: LD_INT 55
31769: PPUSH
31770: LD_INT 1
31772: PPUSH
31773: CALL_OW 321
31777: PUSH
31778: LD_INT 2
31780: EQUAL
31781: AND
31782: PUSH
31783: LD_INT 21
31785: PPUSH
31786: LD_INT 1
31788: PPUSH
31789: CALL_OW 321
31793: PUSH
31794: LD_INT 2
31796: EQUAL
31797: AND
31798: PUSH
31799: LD_INT 22
31801: PPUSH
31802: LD_INT 1
31804: PPUSH
31805: CALL_OW 321
31809: PUSH
31810: LD_INT 2
31812: EQUAL
31813: AND
31814: PUSH
31815: LD_INT 12
31817: PPUSH
31818: LD_INT 1
31820: PPUSH
31821: CALL_OW 321
31825: PUSH
31826: LD_INT 1
31828: EQUAL
31829: PUSH
31830: LD_INT 32
31832: PPUSH
31833: LD_INT 1
31835: PPUSH
31836: CALL_OW 321
31840: PUSH
31841: LD_INT 1
31843: EQUAL
31844: OR
31845: PUSH
31846: EMPTY
31847: LIST
31848: AND
31849: PUSH
31850: LD_EXP 8
31854: AND
31855: PUSH
31856: LD_INT 22
31858: PUSH
31859: LD_INT 3
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 21
31868: PUSH
31869: LD_INT 1
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: EMPTY
31877: LIST
31878: LIST
31879: PPUSH
31880: CALL_OW 69
31884: PUSH
31885: LD_INT 0
31887: EQUAL
31888: AND
31889: IFFALSE 31937
31891: GO 31893
31893: DISABLE
// begin case Query ( QEndMission ) of 1 :
31894: LD_STRING QEndMission
31896: PPUSH
31897: CALL_OW 97
31901: PUSH
31902: LD_INT 1
31904: DOUBLE
31905: EQUAL
31906: IFTRUE 31910
31908: GO 31921
31910: POP
// end_the_mission_allowed = true ; 2 :
31911: LD_ADDR_OWVAR 57
31915: PUSH
31916: LD_INT 1
31918: ST_TO_ADDR
31919: GO 31937
31921: LD_INT 2
31923: DOUBLE
31924: EQUAL
31925: IFTRUE 31929
31927: GO 31936
31929: POP
// FinishMission ; end ;
31930: CALL 31983 0 0
31934: GO 31937
31936: POP
// end ;
31937: END
// function EnchancedSaveCharacters ( unit , id ) ; begin
31938: LD_INT 0
31940: PPUSH
// if IsLive ( unit ) or unit in JMMSquad then
31941: LD_VAR 0 1
31945: PPUSH
31946: CALL_OW 300
31950: PUSH
31951: LD_VAR 0 1
31955: PUSH
31956: LD_EXP 45
31960: IN
31961: OR
31962: IFFALSE 31978
// SaveCharacters ( unit , id ) ;
31964: LD_VAR 0 1
31968: PPUSH
31969: LD_VAR 0 2
31973: PPUSH
31974: CALL_OW 38
// end ;
31978: LD_VAR 0 3
31982: RET
// export function FinishMission ; var m1 , m2 , m3 , prefix ; begin
31983: LD_INT 0
31985: PPUSH
31986: PPUSH
31987: PPUSH
31988: PPUSH
31989: PPUSH
// if Count ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] , [ f_nation , 1 ] , [ f_ok ] ] ) ) < 5 then
31990: LD_INT 22
31992: PUSH
31993: LD_INT 1
31995: PUSH
31996: EMPTY
31997: LIST
31998: LIST
31999: PUSH
32000: LD_INT 21
32002: PUSH
32003: LD_INT 1
32005: PUSH
32006: EMPTY
32007: LIST
32008: LIST
32009: PUSH
32010: LD_INT 23
32012: PUSH
32013: LD_INT 1
32015: PUSH
32016: EMPTY
32017: LIST
32018: LIST
32019: PUSH
32020: LD_INT 50
32022: PUSH
32023: EMPTY
32024: LIST
32025: PUSH
32026: EMPTY
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: PPUSH
32032: CALL_OW 69
32036: PPUSH
32037: CALL 56717 0 1
32041: PUSH
32042: LD_INT 5
32044: LESS
32045: IFFALSE 32056
// begin YouLost ( Troops ) ;
32047: LD_STRING Troops
32049: PPUSH
32050: CALL_OW 104
// exit ;
32054: GO 33076
// end ; if not hasSniper then
32056: LD_EXP 20
32060: NOT
32061: IFFALSE 32070
// SetAchievement ( ACH_SNIPER ) ;
32063: LD_STRING ACH_SNIPER
32065: PPUSH
32066: CALL_OW 543
// m1 := false ;
32070: LD_ADDR_VAR 0 2
32074: PUSH
32075: LD_INT 0
32077: ST_TO_ADDR
// m2 := false ;
32078: LD_ADDR_VAR 0 3
32082: PUSH
32083: LD_INT 0
32085: ST_TO_ADDR
// m3 := false ;
32086: LD_ADDR_VAR 0 4
32090: PUSH
32091: LD_INT 0
32093: ST_TO_ADDR
// if GetTech ( tech_LasSight , 1 ) = state_researched then
32094: LD_INT 12
32096: PPUSH
32097: LD_INT 1
32099: PPUSH
32100: CALL_OW 321
32104: PUSH
32105: LD_INT 2
32107: EQUAL
32108: IFFALSE 32130
// begin AddMedal ( sights , 1 ) ;
32110: LD_STRING sights
32112: PPUSH
32113: LD_INT 1
32115: PPUSH
32116: CALL_OW 101
// m1 := true ;
32120: LD_ADDR_VAR 0 2
32124: PUSH
32125: LD_INT 1
32127: ST_TO_ADDR
// end else
32128: GO 32141
// AddMedal ( sights , - 1 ) ;
32130: LD_STRING sights
32132: PPUSH
32133: LD_INT 1
32135: NEG
32136: PPUSH
32137: CALL_OW 101
// if GetTech ( tech_AI , 1 ) = state_researched then
32141: LD_INT 32
32143: PPUSH
32144: LD_INT 1
32146: PPUSH
32147: CALL_OW 321
32151: PUSH
32152: LD_INT 2
32154: EQUAL
32155: IFFALSE 32177
// begin AddMedal ( computers , 1 ) ;
32157: LD_STRING computers
32159: PPUSH
32160: LD_INT 1
32162: PPUSH
32163: CALL_OW 101
// m2 := true ;
32167: LD_ADDR_VAR 0 3
32171: PUSH
32172: LD_INT 1
32174: ST_TO_ADDR
// end else
32175: GO 32188
// AddMedal ( computers , - 1 ) ;
32177: LD_STRING computers
32179: PPUSH
32180: LD_INT 1
32182: NEG
32183: PPUSH
32184: CALL_OW 101
// if arabianEscapedCounter = 0 then
32188: LD_EXP 21
32192: PUSH
32193: LD_INT 0
32195: EQUAL
32196: IFFALSE 32228
// begin AddMedal ( renegades , 2 ) ;
32198: LD_STRING renegades
32200: PPUSH
32201: LD_INT 2
32203: PPUSH
32204: CALL_OW 101
// m3 := true ;
32208: LD_ADDR_VAR 0 4
32212: PUSH
32213: LD_INT 1
32215: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
32216: LD_INT 0
32218: PPUSH
32219: LD_STRING 10_ScientistsEscape_1
32221: PPUSH
32222: CALL_OW 39
// end else
32226: GO 32239
// AddMedal ( renegades , - 1 ) ;
32228: LD_STRING renegades
32230: PPUSH
32231: LD_INT 1
32233: NEG
32234: PPUSH
32235: CALL_OW 101
// SaveEpsilonBase ;
32239: CALL 33081 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
32243: LD_VAR 0 2
32247: PUSH
32248: LD_VAR 0 3
32252: AND
32253: PUSH
32254: LD_VAR 0 4
32258: AND
32259: PUSH
32260: LD_OWVAR 67
32264: PUSH
32265: LD_INT 3
32267: GREATEREQUAL
32268: AND
32269: IFFALSE 32281
// SetAchievementEX ( ACH_AMER , 10 ) ;
32271: LD_STRING ACH_AMER
32273: PPUSH
32274: LD_INT 10
32276: PPUSH
32277: CALL_OW 564
// if tick <= 40 40$00 then
32281: LD_OWVAR 1
32285: PUSH
32286: LD_INT 84000
32288: LESSEQUAL
32289: IFFALSE 32305
// begin wait ( 3 ) ;
32291: LD_INT 3
32293: PPUSH
32294: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
32298: LD_STRING ACH_ASPEED_10
32300: PPUSH
32301: CALL_OW 543
// end ; GiveMedals ( Main ) ;
32305: LD_STRING Main
32307: PPUSH
32308: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
32312: LD_INT 22
32314: PUSH
32315: LD_INT 1
32317: PUSH
32318: EMPTY
32319: LIST
32320: LIST
32321: PUSH
32322: LD_INT 23
32324: PUSH
32325: LD_INT 1
32327: PUSH
32328: EMPTY
32329: LIST
32330: LIST
32331: PUSH
32332: LD_INT 21
32334: PUSH
32335: LD_INT 1
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: PUSH
32342: LD_INT 2
32344: PUSH
32345: LD_INT 25
32347: PUSH
32348: LD_INT 1
32350: PUSH
32351: EMPTY
32352: LIST
32353: LIST
32354: PUSH
32355: LD_INT 25
32357: PUSH
32358: LD_INT 2
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 25
32367: PUSH
32368: LD_INT 3
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: LD_INT 25
32377: PUSH
32378: LD_INT 4
32380: PUSH
32381: EMPTY
32382: LIST
32383: LIST
32384: PUSH
32385: LD_INT 25
32387: PUSH
32388: LD_INT 5
32390: PUSH
32391: EMPTY
32392: LIST
32393: LIST
32394: PUSH
32395: LD_INT 25
32397: PUSH
32398: LD_INT 8
32400: PUSH
32401: EMPTY
32402: LIST
32403: LIST
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: PUSH
32414: EMPTY
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: PPUSH
32420: CALL_OW 69
32424: PPUSH
32425: CALL_OW 43
// prefix := 10c_ ;
32429: LD_ADDR_VAR 0 5
32433: PUSH
32434: LD_STRING 10c_
32436: ST_TO_ADDR
// SaveCharacters ( JMM , prefix & JMM ) ;
32437: LD_EXP 23
32441: PPUSH
32442: LD_VAR 0 5
32446: PUSH
32447: LD_STRING JMM
32449: STR
32450: PPUSH
32451: CALL_OW 38
// EnchancedSaveCharacters ( Brown , prefix & Brown ) ;
32455: LD_EXP 24
32459: PPUSH
32460: LD_VAR 0 5
32464: PUSH
32465: LD_STRING Brown
32467: STR
32468: PPUSH
32469: CALL 31938 0 2
// EnchancedSaveCharacters ( Donaldson , prefix & Donaldson ) ;
32473: LD_EXP 25
32477: PPUSH
32478: LD_VAR 0 5
32482: PUSH
32483: LD_STRING Donaldson
32485: STR
32486: PPUSH
32487: CALL 31938 0 2
// EnchancedSaveCharacters ( Bobby , prefix & Bobby ) ;
32491: LD_EXP 26
32495: PPUSH
32496: LD_VAR 0 5
32500: PUSH
32501: LD_STRING Bobby
32503: STR
32504: PPUSH
32505: CALL 31938 0 2
// EnchancedSaveCharacters ( Cyrus , prefix & Cyrus ) ;
32509: LD_EXP 27
32513: PPUSH
32514: LD_VAR 0 5
32518: PUSH
32519: LD_STRING Cyrus
32521: STR
32522: PPUSH
32523: CALL 31938 0 2
// EnchancedSaveCharacters ( Lisa , prefix & Lisa ) ;
32527: LD_EXP 28
32531: PPUSH
32532: LD_VAR 0 5
32536: PUSH
32537: LD_STRING Lisa
32539: STR
32540: PPUSH
32541: CALL 31938 0 2
// EnchancedSaveCharacters ( Frank , prefix & Frank ) ;
32545: LD_EXP 29
32549: PPUSH
32550: LD_VAR 0 5
32554: PUSH
32555: LD_STRING Frank
32557: STR
32558: PPUSH
32559: CALL 31938 0 2
// if Kikuchi then
32563: LD_EXP 30
32567: IFFALSE 32594
// begin ToLua ( enableBioCharacter(BIO_YAMO) ) ;
32569: LD_STRING enableBioCharacter(BIO_YAMO)
32571: PPUSH
32572: CALL_OW 559
// EnchancedSaveCharacters ( Kikuchi , prefix & Kikuchi ) ;
32576: LD_EXP 30
32580: PPUSH
32581: LD_VAR 0 5
32585: PUSH
32586: LD_STRING Kikuchi
32588: STR
32589: PPUSH
32590: CALL 31938 0 2
// end ; EnchancedSaveCharacters ( Houten , prefix & Houten ) ;
32594: LD_EXP 31
32598: PPUSH
32599: LD_VAR 0 5
32603: PUSH
32604: LD_STRING Houten
32606: STR
32607: PPUSH
32608: CALL 31938 0 2
// EnchancedSaveCharacters ( Gary , prefix & Gary ) ;
32612: LD_EXP 32
32616: PPUSH
32617: LD_VAR 0 5
32621: PUSH
32622: LD_STRING Gary
32624: STR
32625: PPUSH
32626: CALL 31938 0 2
// EnchancedSaveCharacters ( Cornell , prefix & Cornell ) ;
32630: LD_EXP 42
32634: PPUSH
32635: LD_VAR 0 5
32639: PUSH
32640: LD_STRING Cornell
32642: STR
32643: PPUSH
32644: CALL 31938 0 2
// EnchancedSaveCharacters ( Simms , prefix & Simms ) ;
32648: LD_EXP 33
32652: PPUSH
32653: LD_VAR 0 5
32657: PUSH
32658: LD_STRING Simms
32660: STR
32661: PPUSH
32662: CALL 31938 0 2
// EnchancedSaveCharacters ( Denis , prefix & Denis ) ;
32666: LD_EXP 34
32670: PPUSH
32671: LD_VAR 0 5
32675: PUSH
32676: LD_STRING Denis
32678: STR
32679: PPUSH
32680: CALL 31938 0 2
// EnchancedSaveCharacters ( Joan , prefix & Joan ) ;
32684: LD_EXP 35
32688: PPUSH
32689: LD_VAR 0 5
32693: PUSH
32694: LD_STRING Joan
32696: STR
32697: PPUSH
32698: CALL 31938 0 2
// EnchancedSaveCharacters ( Gladstone , prefix & Gladstone ) ;
32702: LD_EXP 37
32706: PPUSH
32707: LD_VAR 0 5
32711: PUSH
32712: LD_STRING Gladstone
32714: STR
32715: PPUSH
32716: CALL 31938 0 2
// EnchancedSaveCharacters ( DeltaDoctor , prefix & DeltaDoctor ) ;
32720: LD_EXP 39
32724: PPUSH
32725: LD_VAR 0 5
32729: PUSH
32730: LD_STRING DeltaDoctor
32732: STR
32733: PPUSH
32734: CALL 31938 0 2
// if IsLive ( Mike ) then
32738: LD_EXP 41
32742: PPUSH
32743: CALL_OW 300
32747: IFFALSE 32767
// SaveCharacters ( Mike , prefix & Mike ) ;
32749: LD_EXP 41
32753: PPUSH
32754: LD_VAR 0 5
32758: PUSH
32759: LD_STRING Mike
32761: STR
32762: PPUSH
32763: CALL_OW 38
// SaveCharacters ( others , 10c_lock ) ;
32767: LD_EXP 46
32771: PPUSH
32772: LD_STRING 10c_lock
32774: PPUSH
32775: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
32779: LD_INT 50
32781: PUSH
32782: EMPTY
32783: LIST
32784: PUSH
32785: LD_INT 22
32787: PUSH
32788: LD_INT 1
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 21
32797: PUSH
32798: LD_INT 1
32800: PUSH
32801: EMPTY
32802: LIST
32803: LIST
32804: PUSH
32805: LD_INT 2
32807: PUSH
32808: LD_INT 25
32810: PUSH
32811: LD_INT 1
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 25
32820: PUSH
32821: LD_INT 2
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: LD_INT 25
32830: PUSH
32831: LD_INT 3
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: PUSH
32838: LD_INT 25
32840: PUSH
32841: LD_INT 4
32843: PUSH
32844: EMPTY
32845: LIST
32846: LIST
32847: PUSH
32848: LD_INT 25
32850: PUSH
32851: LD_INT 5
32853: PUSH
32854: EMPTY
32855: LIST
32856: LIST
32857: PUSH
32858: LD_INT 25
32860: PUSH
32861: LD_INT 8
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: EMPTY
32869: LIST
32870: LIST
32871: LIST
32872: LIST
32873: LIST
32874: LIST
32875: LIST
32876: PUSH
32877: EMPTY
32878: LIST
32879: LIST
32880: LIST
32881: LIST
32882: PPUSH
32883: CALL_OW 69
32887: PUSH
32888: LD_EXP 23
32892: PUSH
32893: LD_EXP 24
32897: PUSH
32898: LD_EXP 25
32902: PUSH
32903: LD_EXP 26
32907: PUSH
32908: LD_EXP 27
32912: PUSH
32913: LD_EXP 28
32917: PUSH
32918: LD_EXP 29
32922: PUSH
32923: LD_EXP 37
32927: PUSH
32928: LD_EXP 30
32932: PUSH
32933: LD_EXP 34
32937: PUSH
32938: LD_EXP 35
32942: PUSH
32943: LD_EXP 31
32947: PUSH
32948: LD_EXP 33
32952: PUSH
32953: LD_EXP 32
32957: PUSH
32958: LD_EXP 39
32962: PUSH
32963: LD_EXP 42
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: DIFF
32986: PPUSH
32987: LD_STRING 10_other_survivors
32989: PPUSH
32990: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) diff Mike , 10_ape ) ;
32994: LD_INT 50
32996: PUSH
32997: EMPTY
32998: LIST
32999: PUSH
33000: LD_INT 22
33002: PUSH
33003: LD_INT 1
33005: PUSH
33006: EMPTY
33007: LIST
33008: LIST
33009: PUSH
33010: LD_INT 21
33012: PUSH
33013: LD_INT 1
33015: PUSH
33016: EMPTY
33017: LIST
33018: LIST
33019: PUSH
33020: LD_INT 2
33022: PUSH
33023: LD_INT 25
33025: PUSH
33026: LD_INT 16
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 25
33035: PUSH
33036: LD_INT 12
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: EMPTY
33044: LIST
33045: LIST
33046: LIST
33047: PUSH
33048: EMPTY
33049: LIST
33050: LIST
33051: LIST
33052: LIST
33053: PPUSH
33054: CALL_OW 69
33058: PUSH
33059: LD_EXP 41
33063: DIFF
33064: PPUSH
33065: LD_STRING 10_ape
33067: PPUSH
33068: CALL_OW 38
// YouWin ;
33072: CALL_OW 103
// end ;
33076: LD_VAR 0 1
33080: RET
// function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
33081: LD_INT 0
33083: PPUSH
33084: PPUSH
33085: PPUSH
33086: PPUSH
// epsilonBase := [ ] ;
33087: LD_ADDR_VAR 0 2
33091: PUSH
33092: EMPTY
33093: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
33094: LD_ADDR_VAR 0 3
33098: PUSH
33099: LD_INT 22
33101: PUSH
33102: LD_INT 1
33104: PUSH
33105: EMPTY
33106: LIST
33107: LIST
33108: PUSH
33109: LD_INT 21
33111: PUSH
33112: LD_INT 3
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: LD_INT 50
33121: PUSH
33122: EMPTY
33123: LIST
33124: PUSH
33125: EMPTY
33126: LIST
33127: LIST
33128: LIST
33129: PPUSH
33130: CALL_OW 69
33134: ST_TO_ADDR
// for i in buildings do
33135: LD_ADDR_VAR 0 4
33139: PUSH
33140: LD_VAR 0 3
33144: PUSH
33145: FOR_IN
33146: IFFALSE 33598
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
33148: LD_VAR 0 4
33152: PPUSH
33153: CALL_OW 266
33157: PUSH
33158: LD_INT 6
33160: PUSH
33161: LD_INT 7
33163: PUSH
33164: LD_INT 8
33166: PUSH
33167: EMPTY
33168: LIST
33169: LIST
33170: LIST
33171: IN
33172: IFFALSE 33286
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
33174: LD_ADDR_VAR 0 2
33178: PUSH
33179: LD_VAR 0 2
33183: PUSH
33184: LD_VAR 0 4
33188: PPUSH
33189: CALL_OW 266
33193: PUSH
33194: LD_VAR 0 4
33198: PPUSH
33199: CALL_OW 250
33203: PUSH
33204: LD_VAR 0 4
33208: PPUSH
33209: CALL_OW 251
33213: PUSH
33214: LD_VAR 0 4
33218: PPUSH
33219: CALL_OW 254
33223: PUSH
33224: LD_VAR 0 4
33228: PPUSH
33229: CALL_OW 267
33233: PUSH
33234: LD_VAR 0 4
33238: PPUSH
33239: CALL_OW 248
33243: PUSH
33244: LD_VAR 0 4
33248: PPUSH
33249: LD_INT 1
33251: PPUSH
33252: CALL_OW 268
33256: PUSH
33257: LD_VAR 0 4
33261: PPUSH
33262: LD_INT 2
33264: PPUSH
33265: CALL_OW 268
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: PUSH
33280: EMPTY
33281: LIST
33282: ADD
33283: ST_TO_ADDR
33284: GO 33596
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
33286: LD_VAR 0 4
33290: PPUSH
33291: CALL_OW 266
33295: PUSH
33296: LD_INT 32
33298: EQUAL
33299: PUSH
33300: LD_VAR 0 4
33304: PPUSH
33305: CALL_OW 266
33309: PUSH
33310: LD_INT 33
33312: EQUAL
33313: OR
33314: IFFALSE 33411
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
33316: LD_ADDR_VAR 0 2
33320: PUSH
33321: LD_VAR 0 2
33325: PUSH
33326: LD_VAR 0 4
33330: PPUSH
33331: CALL_OW 266
33335: PUSH
33336: LD_VAR 0 4
33340: PPUSH
33341: CALL_OW 250
33345: PUSH
33346: LD_VAR 0 4
33350: PPUSH
33351: CALL_OW 251
33355: PUSH
33356: LD_VAR 0 4
33360: PPUSH
33361: CALL_OW 254
33365: PUSH
33366: LD_VAR 0 4
33370: PPUSH
33371: CALL_OW 267
33375: PUSH
33376: LD_VAR 0 4
33380: PPUSH
33381: CALL_OW 248
33385: PUSH
33386: LD_VAR 0 4
33390: PPUSH
33391: CALL_OW 269
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: PUSH
33405: EMPTY
33406: LIST
33407: ADD
33408: ST_TO_ADDR
33409: GO 33596
// if GetBType ( i ) = b_factory then
33411: LD_VAR 0 4
33415: PPUSH
33416: CALL_OW 266
33420: PUSH
33421: LD_INT 3
33423: EQUAL
33424: IFFALSE 33514
// epsilonBase := Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
33426: LD_ADDR_VAR 0 2
33430: PUSH
33431: LD_VAR 0 2
33435: PPUSH
33436: LD_INT 1
33438: PPUSH
33439: LD_VAR 0 4
33443: PPUSH
33444: CALL_OW 266
33448: PUSH
33449: LD_VAR 0 4
33453: PPUSH
33454: CALL_OW 250
33458: PUSH
33459: LD_VAR 0 4
33463: PPUSH
33464: CALL_OW 251
33468: PUSH
33469: LD_VAR 0 4
33473: PPUSH
33474: CALL_OW 254
33478: PUSH
33479: LD_VAR 0 4
33483: PPUSH
33484: CALL_OW 267
33488: PUSH
33489: LD_VAR 0 4
33493: PPUSH
33494: CALL_OW 248
33498: PUSH
33499: EMPTY
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: PPUSH
33507: CALL_OW 2
33511: ST_TO_ADDR
33512: GO 33596
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
33514: LD_ADDR_VAR 0 2
33518: PUSH
33519: LD_VAR 0 2
33523: PUSH
33524: LD_VAR 0 4
33528: PPUSH
33529: CALL_OW 266
33533: PUSH
33534: LD_VAR 0 4
33538: PPUSH
33539: CALL_OW 250
33543: PUSH
33544: LD_VAR 0 4
33548: PPUSH
33549: CALL_OW 251
33553: PUSH
33554: LD_VAR 0 4
33558: PPUSH
33559: CALL_OW 254
33563: PUSH
33564: LD_VAR 0 4
33568: PPUSH
33569: CALL_OW 267
33573: PUSH
33574: LD_VAR 0 4
33578: PPUSH
33579: CALL_OW 248
33583: PUSH
33584: EMPTY
33585: LIST
33586: LIST
33587: LIST
33588: LIST
33589: LIST
33590: LIST
33591: PUSH
33592: EMPTY
33593: LIST
33594: ADD
33595: ST_TO_ADDR
// end ;
33596: GO 33145
33598: POP
33599: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
33600: LD_VAR 0 2
33604: PPUSH
33605: LD_STRING 10_EpsilonBase
33607: PPUSH
33608: CALL_OW 39
// SaveVariable ( ListEnvironmentArea ( epsilonBaseArea ) , 10_EpsilonEnv ) ;
33612: LD_INT 34
33614: PPUSH
33615: CALL_OW 353
33619: PPUSH
33620: LD_STRING 10_EpsilonEnv
33622: PPUSH
33623: CALL_OW 39
// end ; end_of_file
33627: LD_VAR 0 1
33631: RET
// every 1 1$05 + 0 0$20 trigger joinedToEpsilon do var i , tmp ;
33632: LD_EXP 7
33636: IFFALSE 33759
33638: GO 33640
33640: DISABLE
33641: LD_INT 0
33643: PPUSH
33644: PPUSH
// begin enable ;
33645: ENABLE
// wait ( rand ( 0 0$1 , 0 0$11 ) ) ;
33646: LD_INT 35
33648: PPUSH
33649: LD_INT 385
33651: PPUSH
33652: CALL_OW 12
33656: PPUSH
33657: CALL_OW 67
// tmp := [ cratesSpawn1Area , cratesSpawn2Area , cratesSpawn3Area , cratesSpawn4Area , cratesSpawn5Area , cratesSpawn6Area ] ;
33661: LD_ADDR_VAR 0 2
33665: PUSH
33666: LD_INT 13
33668: PUSH
33669: LD_INT 14
33671: PUSH
33672: LD_INT 15
33674: PUSH
33675: LD_INT 16
33677: PUSH
33678: LD_INT 17
33680: PUSH
33681: LD_INT 38
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
33692: LD_ADDR_VAR 0 1
33696: PUSH
33697: LD_VAR 0 2
33701: PUSH
33702: LD_INT 1
33704: PPUSH
33705: LD_VAR 0 2
33709: PPUSH
33710: CALL 56717 0 1
33714: PPUSH
33715: CALL_OW 12
33719: ARRAY
33720: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 8 then
33721: LD_VAR 0 1
33725: PPUSH
33726: CALL_OW 435
33730: PUSH
33731: LD_INT 8
33733: LESS
33734: IFFALSE 33759
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
33736: LD_INT 1
33738: PPUSH
33739: LD_INT 5
33741: PPUSH
33742: CALL_OW 12
33746: PPUSH
33747: LD_VAR 0 1
33751: PPUSH
33752: LD_INT 1
33754: PPUSH
33755: CALL_OW 55
// end ;
33759: PPOPN 2
33761: END
// every 0 0$20 trigger tick < 5 5$00 and hasBase do
33762: LD_OWVAR 1
33766: PUSH
33767: LD_INT 10500
33769: LESS
33770: PUSH
33771: LD_EXP 9
33775: AND
33776: IFFALSE 33803
33778: GO 33780
33780: DISABLE
// begin enable ;
33781: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSpawn3Area , true ) ;
33782: LD_INT 1
33784: PPUSH
33785: LD_INT 5
33787: PPUSH
33788: CALL_OW 12
33792: PPUSH
33793: LD_INT 15
33795: PPUSH
33796: LD_INT 1
33798: PPUSH
33799: CALL_OW 55
// end ;
33803: END
// every 0 0$55 trigger ruBase do
33804: LD_EXP 68
33808: IFFALSE 33852
33810: GO 33812
33812: DISABLE
// begin enable ;
33813: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea ) < 3 then
33814: LD_EXP 84
33818: PPUSH
33819: CALL_OW 435
33823: PUSH
33824: LD_INT 3
33826: LESS
33827: IFFALSE 33852
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea , true ) ;
33829: LD_INT 1
33831: PPUSH
33832: LD_INT 5
33834: PPUSH
33835: CALL_OW 12
33839: PPUSH
33840: LD_EXP 84
33844: PPUSH
33845: LD_INT 1
33847: PPUSH
33848: CALL_OW 55
// end ;
33852: END
// every 1 1$05 trigger ruBase2 do
33853: LD_EXP 69
33857: IFFALSE 33901
33859: GO 33861
33861: DISABLE
// begin enable ;
33862: ENABLE
// if GetListOfCratesInArea ( ruCratesSpawnArea2 ) < 3 then
33863: LD_EXP 85
33867: PPUSH
33868: CALL_OW 435
33872: PUSH
33873: LD_INT 3
33875: LESS
33876: IFFALSE 33901
// CreateCratesArea ( rand ( 1 , 5 ) , ruCratesSpawnArea2 , true ) ;
33878: LD_INT 1
33880: PPUSH
33881: LD_INT 5
33883: PPUSH
33884: CALL_OW 12
33888: PPUSH
33889: LD_EXP 85
33893: PPUSH
33894: LD_INT 1
33896: PPUSH
33897: CALL_OW 55
// end ; end_of_file end_of_file
33901: END
// export globalGameSaveCounter ; every 0 0$1 do
33902: GO 33904
33904: DISABLE
// begin enable ;
33905: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
33906: LD_STRING updateTimer(
33908: PUSH
33909: LD_OWVAR 1
33913: STR
33914: PUSH
33915: LD_STRING );
33917: STR
33918: PPUSH
33919: CALL_OW 559
// end ;
33923: END
// every 0 0$1 do
33924: GO 33926
33926: DISABLE
// begin globalGameSaveCounter := 0 ;
33927: LD_ADDR_EXP 86
33931: PUSH
33932: LD_INT 0
33934: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
33935: LD_STRING setGameSaveCounter(0)
33937: PPUSH
33938: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
33942: LD_STRING initStreamRollete();
33944: PPUSH
33945: CALL_OW 559
// InitStreamMode ;
33949: CALL 35292 0 0
// DefineStreamItems ( false ) ;
33953: LD_INT 0
33955: PPUSH
33956: CALL 35756 0 1
// end ;
33960: END
// export function SOS_MapStart ( ) ; begin
33961: LD_INT 0
33963: PPUSH
// if streamModeActive then
33964: LD_EXP 87
33968: IFFALSE 33977
// DefineStreamItems ( true ) ;
33970: LD_INT 1
33972: PPUSH
33973: CALL 35756 0 1
// UpdateLuaVariables ( ) ;
33977: CALL 33994 0 0
// UpdateFactoryWaypoints ( ) ;
33981: CALL 48625 0 0
// UpdateWarehouseGatheringPoints ( ) ;
33985: CALL 48882 0 0
// end ;
33989: LD_VAR 0 1
33993: RET
// function UpdateLuaVariables ( ) ; begin
33994: LD_INT 0
33996: PPUSH
// if globalGameSaveCounter then
33997: LD_EXP 86
34001: IFFALSE 34035
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
34003: LD_ADDR_EXP 86
34007: PUSH
34008: LD_EXP 86
34012: PPUSH
34013: CALL 93667 0 1
34017: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
34018: LD_STRING setGameSaveCounter(
34020: PUSH
34021: LD_EXP 86
34025: STR
34026: PUSH
34027: LD_STRING )
34029: STR
34030: PPUSH
34031: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
34035: LD_STRING setGameDifficulty(
34037: PUSH
34038: LD_OWVAR 67
34042: STR
34043: PUSH
34044: LD_STRING )
34046: STR
34047: PPUSH
34048: CALL_OW 559
// ToLua ( displayDifficulty( & Difficulty & ) ) ;
34052: LD_STRING displayDifficulty(
34054: PUSH
34055: LD_OWVAR 67
34059: STR
34060: PUSH
34061: LD_STRING )
34063: STR
34064: PPUSH
34065: CALL_OW 559
// end ;
34069: LD_VAR 0 1
34073: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
34074: LD_INT 0
34076: PPUSH
// if p2 = stream_mode then
34077: LD_VAR 0 2
34081: PUSH
34082: LD_INT 100
34084: EQUAL
34085: IFFALSE 35088
// begin if not StreamModeActive then
34087: LD_EXP 87
34091: NOT
34092: IFFALSE 34102
// StreamModeActive := true ;
34094: LD_ADDR_EXP 87
34098: PUSH
34099: LD_INT 1
34101: ST_TO_ADDR
// if p3 = 0 then
34102: LD_VAR 0 3
34106: PUSH
34107: LD_INT 0
34109: EQUAL
34110: IFFALSE 34116
// InitStreamMode ;
34112: CALL 35292 0 0
// if p3 = 1 then
34116: LD_VAR 0 3
34120: PUSH
34121: LD_INT 1
34123: EQUAL
34124: IFFALSE 34134
// sRocket := true ;
34126: LD_ADDR_EXP 92
34130: PUSH
34131: LD_INT 1
34133: ST_TO_ADDR
// if p3 = 2 then
34134: LD_VAR 0 3
34138: PUSH
34139: LD_INT 2
34141: EQUAL
34142: IFFALSE 34152
// sSpeed := true ;
34144: LD_ADDR_EXP 91
34148: PUSH
34149: LD_INT 1
34151: ST_TO_ADDR
// if p3 = 3 then
34152: LD_VAR 0 3
34156: PUSH
34157: LD_INT 3
34159: EQUAL
34160: IFFALSE 34170
// sEngine := true ;
34162: LD_ADDR_EXP 93
34166: PUSH
34167: LD_INT 1
34169: ST_TO_ADDR
// if p3 = 4 then
34170: LD_VAR 0 3
34174: PUSH
34175: LD_INT 4
34177: EQUAL
34178: IFFALSE 34188
// sSpec := true ;
34180: LD_ADDR_EXP 90
34184: PUSH
34185: LD_INT 1
34187: ST_TO_ADDR
// if p3 = 5 then
34188: LD_VAR 0 3
34192: PUSH
34193: LD_INT 5
34195: EQUAL
34196: IFFALSE 34206
// sLevel := true ;
34198: LD_ADDR_EXP 94
34202: PUSH
34203: LD_INT 1
34205: ST_TO_ADDR
// if p3 = 6 then
34206: LD_VAR 0 3
34210: PUSH
34211: LD_INT 6
34213: EQUAL
34214: IFFALSE 34224
// sArmoury := true ;
34216: LD_ADDR_EXP 95
34220: PUSH
34221: LD_INT 1
34223: ST_TO_ADDR
// if p3 = 7 then
34224: LD_VAR 0 3
34228: PUSH
34229: LD_INT 7
34231: EQUAL
34232: IFFALSE 34242
// sRadar := true ;
34234: LD_ADDR_EXP 96
34238: PUSH
34239: LD_INT 1
34241: ST_TO_ADDR
// if p3 = 8 then
34242: LD_VAR 0 3
34246: PUSH
34247: LD_INT 8
34249: EQUAL
34250: IFFALSE 34260
// sBunker := true ;
34252: LD_ADDR_EXP 97
34256: PUSH
34257: LD_INT 1
34259: ST_TO_ADDR
// if p3 = 9 then
34260: LD_VAR 0 3
34264: PUSH
34265: LD_INT 9
34267: EQUAL
34268: IFFALSE 34278
// sHack := true ;
34270: LD_ADDR_EXP 98
34274: PUSH
34275: LD_INT 1
34277: ST_TO_ADDR
// if p3 = 10 then
34278: LD_VAR 0 3
34282: PUSH
34283: LD_INT 10
34285: EQUAL
34286: IFFALSE 34296
// sFire := true ;
34288: LD_ADDR_EXP 99
34292: PUSH
34293: LD_INT 1
34295: ST_TO_ADDR
// if p3 = 11 then
34296: LD_VAR 0 3
34300: PUSH
34301: LD_INT 11
34303: EQUAL
34304: IFFALSE 34314
// sRefresh := true ;
34306: LD_ADDR_EXP 100
34310: PUSH
34311: LD_INT 1
34313: ST_TO_ADDR
// if p3 = 12 then
34314: LD_VAR 0 3
34318: PUSH
34319: LD_INT 12
34321: EQUAL
34322: IFFALSE 34332
// sExp := true ;
34324: LD_ADDR_EXP 101
34328: PUSH
34329: LD_INT 1
34331: ST_TO_ADDR
// if p3 = 13 then
34332: LD_VAR 0 3
34336: PUSH
34337: LD_INT 13
34339: EQUAL
34340: IFFALSE 34350
// sDepot := true ;
34342: LD_ADDR_EXP 102
34346: PUSH
34347: LD_INT 1
34349: ST_TO_ADDR
// if p3 = 14 then
34350: LD_VAR 0 3
34354: PUSH
34355: LD_INT 14
34357: EQUAL
34358: IFFALSE 34368
// sFlag := true ;
34360: LD_ADDR_EXP 103
34364: PUSH
34365: LD_INT 1
34367: ST_TO_ADDR
// if p3 = 15 then
34368: LD_VAR 0 3
34372: PUSH
34373: LD_INT 15
34375: EQUAL
34376: IFFALSE 34386
// sKamikadze := true ;
34378: LD_ADDR_EXP 111
34382: PUSH
34383: LD_INT 1
34385: ST_TO_ADDR
// if p3 = 16 then
34386: LD_VAR 0 3
34390: PUSH
34391: LD_INT 16
34393: EQUAL
34394: IFFALSE 34404
// sTroll := true ;
34396: LD_ADDR_EXP 112
34400: PUSH
34401: LD_INT 1
34403: ST_TO_ADDR
// if p3 = 17 then
34404: LD_VAR 0 3
34408: PUSH
34409: LD_INT 17
34411: EQUAL
34412: IFFALSE 34422
// sSlow := true ;
34414: LD_ADDR_EXP 113
34418: PUSH
34419: LD_INT 1
34421: ST_TO_ADDR
// if p3 = 18 then
34422: LD_VAR 0 3
34426: PUSH
34427: LD_INT 18
34429: EQUAL
34430: IFFALSE 34440
// sLack := true ;
34432: LD_ADDR_EXP 114
34436: PUSH
34437: LD_INT 1
34439: ST_TO_ADDR
// if p3 = 19 then
34440: LD_VAR 0 3
34444: PUSH
34445: LD_INT 19
34447: EQUAL
34448: IFFALSE 34458
// sTank := true ;
34450: LD_ADDR_EXP 116
34454: PUSH
34455: LD_INT 1
34457: ST_TO_ADDR
// if p3 = 20 then
34458: LD_VAR 0 3
34462: PUSH
34463: LD_INT 20
34465: EQUAL
34466: IFFALSE 34476
// sRemote := true ;
34468: LD_ADDR_EXP 117
34472: PUSH
34473: LD_INT 1
34475: ST_TO_ADDR
// if p3 = 21 then
34476: LD_VAR 0 3
34480: PUSH
34481: LD_INT 21
34483: EQUAL
34484: IFFALSE 34494
// sPowell := true ;
34486: LD_ADDR_EXP 118
34490: PUSH
34491: LD_INT 1
34493: ST_TO_ADDR
// if p3 = 22 then
34494: LD_VAR 0 3
34498: PUSH
34499: LD_INT 22
34501: EQUAL
34502: IFFALSE 34512
// sTeleport := true ;
34504: LD_ADDR_EXP 121
34508: PUSH
34509: LD_INT 1
34511: ST_TO_ADDR
// if p3 = 23 then
34512: LD_VAR 0 3
34516: PUSH
34517: LD_INT 23
34519: EQUAL
34520: IFFALSE 34530
// sOilTower := true ;
34522: LD_ADDR_EXP 123
34526: PUSH
34527: LD_INT 1
34529: ST_TO_ADDR
// if p3 = 24 then
34530: LD_VAR 0 3
34534: PUSH
34535: LD_INT 24
34537: EQUAL
34538: IFFALSE 34548
// sShovel := true ;
34540: LD_ADDR_EXP 124
34544: PUSH
34545: LD_INT 1
34547: ST_TO_ADDR
// if p3 = 25 then
34548: LD_VAR 0 3
34552: PUSH
34553: LD_INT 25
34555: EQUAL
34556: IFFALSE 34566
// sSheik := true ;
34558: LD_ADDR_EXP 125
34562: PUSH
34563: LD_INT 1
34565: ST_TO_ADDR
// if p3 = 26 then
34566: LD_VAR 0 3
34570: PUSH
34571: LD_INT 26
34573: EQUAL
34574: IFFALSE 34584
// sEarthquake := true ;
34576: LD_ADDR_EXP 127
34580: PUSH
34581: LD_INT 1
34583: ST_TO_ADDR
// if p3 = 27 then
34584: LD_VAR 0 3
34588: PUSH
34589: LD_INT 27
34591: EQUAL
34592: IFFALSE 34602
// sAI := true ;
34594: LD_ADDR_EXP 128
34598: PUSH
34599: LD_INT 1
34601: ST_TO_ADDR
// if p3 = 28 then
34602: LD_VAR 0 3
34606: PUSH
34607: LD_INT 28
34609: EQUAL
34610: IFFALSE 34620
// sCargo := true ;
34612: LD_ADDR_EXP 131
34616: PUSH
34617: LD_INT 1
34619: ST_TO_ADDR
// if p3 = 29 then
34620: LD_VAR 0 3
34624: PUSH
34625: LD_INT 29
34627: EQUAL
34628: IFFALSE 34638
// sDLaser := true ;
34630: LD_ADDR_EXP 132
34634: PUSH
34635: LD_INT 1
34637: ST_TO_ADDR
// if p3 = 30 then
34638: LD_VAR 0 3
34642: PUSH
34643: LD_INT 30
34645: EQUAL
34646: IFFALSE 34656
// sExchange := true ;
34648: LD_ADDR_EXP 133
34652: PUSH
34653: LD_INT 1
34655: ST_TO_ADDR
// if p3 = 31 then
34656: LD_VAR 0 3
34660: PUSH
34661: LD_INT 31
34663: EQUAL
34664: IFFALSE 34674
// sFac := true ;
34666: LD_ADDR_EXP 134
34670: PUSH
34671: LD_INT 1
34673: ST_TO_ADDR
// if p3 = 32 then
34674: LD_VAR 0 3
34678: PUSH
34679: LD_INT 32
34681: EQUAL
34682: IFFALSE 34692
// sPower := true ;
34684: LD_ADDR_EXP 135
34688: PUSH
34689: LD_INT 1
34691: ST_TO_ADDR
// if p3 = 33 then
34692: LD_VAR 0 3
34696: PUSH
34697: LD_INT 33
34699: EQUAL
34700: IFFALSE 34710
// sRandom := true ;
34702: LD_ADDR_EXP 136
34706: PUSH
34707: LD_INT 1
34709: ST_TO_ADDR
// if p3 = 34 then
34710: LD_VAR 0 3
34714: PUSH
34715: LD_INT 34
34717: EQUAL
34718: IFFALSE 34728
// sShield := true ;
34720: LD_ADDR_EXP 137
34724: PUSH
34725: LD_INT 1
34727: ST_TO_ADDR
// if p3 = 35 then
34728: LD_VAR 0 3
34732: PUSH
34733: LD_INT 35
34735: EQUAL
34736: IFFALSE 34746
// sTime := true ;
34738: LD_ADDR_EXP 138
34742: PUSH
34743: LD_INT 1
34745: ST_TO_ADDR
// if p3 = 36 then
34746: LD_VAR 0 3
34750: PUSH
34751: LD_INT 36
34753: EQUAL
34754: IFFALSE 34764
// sTools := true ;
34756: LD_ADDR_EXP 139
34760: PUSH
34761: LD_INT 1
34763: ST_TO_ADDR
// if p3 = 101 then
34764: LD_VAR 0 3
34768: PUSH
34769: LD_INT 101
34771: EQUAL
34772: IFFALSE 34782
// sSold := true ;
34774: LD_ADDR_EXP 104
34778: PUSH
34779: LD_INT 1
34781: ST_TO_ADDR
// if p3 = 102 then
34782: LD_VAR 0 3
34786: PUSH
34787: LD_INT 102
34789: EQUAL
34790: IFFALSE 34800
// sDiff := true ;
34792: LD_ADDR_EXP 105
34796: PUSH
34797: LD_INT 1
34799: ST_TO_ADDR
// if p3 = 103 then
34800: LD_VAR 0 3
34804: PUSH
34805: LD_INT 103
34807: EQUAL
34808: IFFALSE 34818
// sFog := true ;
34810: LD_ADDR_EXP 108
34814: PUSH
34815: LD_INT 1
34817: ST_TO_ADDR
// if p3 = 104 then
34818: LD_VAR 0 3
34822: PUSH
34823: LD_INT 104
34825: EQUAL
34826: IFFALSE 34836
// sReset := true ;
34828: LD_ADDR_EXP 109
34832: PUSH
34833: LD_INT 1
34835: ST_TO_ADDR
// if p3 = 105 then
34836: LD_VAR 0 3
34840: PUSH
34841: LD_INT 105
34843: EQUAL
34844: IFFALSE 34854
// sSun := true ;
34846: LD_ADDR_EXP 110
34850: PUSH
34851: LD_INT 1
34853: ST_TO_ADDR
// if p3 = 106 then
34854: LD_VAR 0 3
34858: PUSH
34859: LD_INT 106
34861: EQUAL
34862: IFFALSE 34872
// sTiger := true ;
34864: LD_ADDR_EXP 106
34868: PUSH
34869: LD_INT 1
34871: ST_TO_ADDR
// if p3 = 107 then
34872: LD_VAR 0 3
34876: PUSH
34877: LD_INT 107
34879: EQUAL
34880: IFFALSE 34890
// sBomb := true ;
34882: LD_ADDR_EXP 107
34886: PUSH
34887: LD_INT 1
34889: ST_TO_ADDR
// if p3 = 108 then
34890: LD_VAR 0 3
34894: PUSH
34895: LD_INT 108
34897: EQUAL
34898: IFFALSE 34908
// sWound := true ;
34900: LD_ADDR_EXP 115
34904: PUSH
34905: LD_INT 1
34907: ST_TO_ADDR
// if p3 = 109 then
34908: LD_VAR 0 3
34912: PUSH
34913: LD_INT 109
34915: EQUAL
34916: IFFALSE 34926
// sBetray := true ;
34918: LD_ADDR_EXP 119
34922: PUSH
34923: LD_INT 1
34925: ST_TO_ADDR
// if p3 = 110 then
34926: LD_VAR 0 3
34930: PUSH
34931: LD_INT 110
34933: EQUAL
34934: IFFALSE 34944
// sContamin := true ;
34936: LD_ADDR_EXP 120
34940: PUSH
34941: LD_INT 1
34943: ST_TO_ADDR
// if p3 = 111 then
34944: LD_VAR 0 3
34948: PUSH
34949: LD_INT 111
34951: EQUAL
34952: IFFALSE 34962
// sOil := true ;
34954: LD_ADDR_EXP 122
34958: PUSH
34959: LD_INT 1
34961: ST_TO_ADDR
// if p3 = 112 then
34962: LD_VAR 0 3
34966: PUSH
34967: LD_INT 112
34969: EQUAL
34970: IFFALSE 34980
// sStu := true ;
34972: LD_ADDR_EXP 126
34976: PUSH
34977: LD_INT 1
34979: ST_TO_ADDR
// if p3 = 113 then
34980: LD_VAR 0 3
34984: PUSH
34985: LD_INT 113
34987: EQUAL
34988: IFFALSE 34998
// sBazooka := true ;
34990: LD_ADDR_EXP 129
34994: PUSH
34995: LD_INT 1
34997: ST_TO_ADDR
// if p3 = 114 then
34998: LD_VAR 0 3
35002: PUSH
35003: LD_INT 114
35005: EQUAL
35006: IFFALSE 35016
// sMortar := true ;
35008: LD_ADDR_EXP 130
35012: PUSH
35013: LD_INT 1
35015: ST_TO_ADDR
// if p3 = 115 then
35016: LD_VAR 0 3
35020: PUSH
35021: LD_INT 115
35023: EQUAL
35024: IFFALSE 35034
// sRanger := true ;
35026: LD_ADDR_EXP 140
35030: PUSH
35031: LD_INT 1
35033: ST_TO_ADDR
// if p3 = 116 then
35034: LD_VAR 0 3
35038: PUSH
35039: LD_INT 116
35041: EQUAL
35042: IFFALSE 35052
// sComputer := true ;
35044: LD_ADDR_EXP 141
35048: PUSH
35049: LD_INT 1
35051: ST_TO_ADDR
// if p3 = 117 then
35052: LD_VAR 0 3
35056: PUSH
35057: LD_INT 117
35059: EQUAL
35060: IFFALSE 35070
// s30 := true ;
35062: LD_ADDR_EXP 142
35066: PUSH
35067: LD_INT 1
35069: ST_TO_ADDR
// if p3 = 118 then
35070: LD_VAR 0 3
35074: PUSH
35075: LD_INT 118
35077: EQUAL
35078: IFFALSE 35088
// s60 := true ;
35080: LD_ADDR_EXP 143
35084: PUSH
35085: LD_INT 1
35087: ST_TO_ADDR
// end ; if p2 = hack_mode then
35088: LD_VAR 0 2
35092: PUSH
35093: LD_INT 101
35095: EQUAL
35096: IFFALSE 35224
// begin case p3 of 1 :
35098: LD_VAR 0 3
35102: PUSH
35103: LD_INT 1
35105: DOUBLE
35106: EQUAL
35107: IFTRUE 35111
35109: GO 35118
35111: POP
// hHackUnlimitedResources ; 2 :
35112: CALL 47371 0 0
35116: GO 35224
35118: LD_INT 2
35120: DOUBLE
35121: EQUAL
35122: IFTRUE 35126
35124: GO 35133
35126: POP
// hHackSetLevel10 ; 3 :
35127: CALL 47504 0 0
35131: GO 35224
35133: LD_INT 3
35135: DOUBLE
35136: EQUAL
35137: IFTRUE 35141
35139: GO 35148
35141: POP
// hHackSetLevel10YourUnits ; 4 :
35142: CALL 47589 0 0
35146: GO 35224
35148: LD_INT 4
35150: DOUBLE
35151: EQUAL
35152: IFTRUE 35156
35154: GO 35163
35156: POP
// hHackInvincible ; 5 :
35157: CALL 48037 0 0
35161: GO 35224
35163: LD_INT 5
35165: DOUBLE
35166: EQUAL
35167: IFTRUE 35171
35169: GO 35178
35171: POP
// hHackInvisible ; 6 :
35172: CALL 48148 0 0
35176: GO 35224
35178: LD_INT 6
35180: DOUBLE
35181: EQUAL
35182: IFTRUE 35186
35184: GO 35193
35186: POP
// hHackChangeYourSide ; 7 :
35187: CALL 48205 0 0
35191: GO 35224
35193: LD_INT 7
35195: DOUBLE
35196: EQUAL
35197: IFTRUE 35201
35199: GO 35208
35201: POP
// hHackChangeUnitSide ; 8 :
35202: CALL 48247 0 0
35206: GO 35224
35208: LD_INT 8
35210: DOUBLE
35211: EQUAL
35212: IFTRUE 35216
35214: GO 35223
35216: POP
// hHackFog ; end ;
35217: CALL 48348 0 0
35221: GO 35224
35223: POP
// end ; if p2 = game_save_mode then
35224: LD_VAR 0 2
35228: PUSH
35229: LD_INT 102
35231: EQUAL
35232: IFFALSE 35287
// begin if p3 = 1 then
35234: LD_VAR 0 3
35238: PUSH
35239: LD_INT 1
35241: EQUAL
35242: IFFALSE 35254
// globalGameSaveCounter := p4 ;
35244: LD_ADDR_EXP 86
35248: PUSH
35249: LD_VAR 0 4
35253: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
35254: LD_VAR 0 3
35258: PUSH
35259: LD_INT 2
35261: EQUAL
35262: PUSH
35263: LD_EXP 86
35267: AND
35268: IFFALSE 35287
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
35270: LD_STRING setGameSaveCounter(
35272: PUSH
35273: LD_EXP 86
35277: STR
35278: PUSH
35279: LD_STRING )
35281: STR
35282: PPUSH
35283: CALL_OW 559
// end ; end ;
35287: LD_VAR 0 7
35291: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
35292: LD_INT 0
35294: PPUSH
// streamModeActive := false ;
35295: LD_ADDR_EXP 87
35299: PUSH
35300: LD_INT 0
35302: ST_TO_ADDR
// normalCounter := 36 ;
35303: LD_ADDR_EXP 88
35307: PUSH
35308: LD_INT 36
35310: ST_TO_ADDR
// hardcoreCounter := 18 ;
35311: LD_ADDR_EXP 89
35315: PUSH
35316: LD_INT 18
35318: ST_TO_ADDR
// sRocket := false ;
35319: LD_ADDR_EXP 92
35323: PUSH
35324: LD_INT 0
35326: ST_TO_ADDR
// sSpeed := false ;
35327: LD_ADDR_EXP 91
35331: PUSH
35332: LD_INT 0
35334: ST_TO_ADDR
// sEngine := false ;
35335: LD_ADDR_EXP 93
35339: PUSH
35340: LD_INT 0
35342: ST_TO_ADDR
// sSpec := false ;
35343: LD_ADDR_EXP 90
35347: PUSH
35348: LD_INT 0
35350: ST_TO_ADDR
// sLevel := false ;
35351: LD_ADDR_EXP 94
35355: PUSH
35356: LD_INT 0
35358: ST_TO_ADDR
// sArmoury := false ;
35359: LD_ADDR_EXP 95
35363: PUSH
35364: LD_INT 0
35366: ST_TO_ADDR
// sRadar := false ;
35367: LD_ADDR_EXP 96
35371: PUSH
35372: LD_INT 0
35374: ST_TO_ADDR
// sBunker := false ;
35375: LD_ADDR_EXP 97
35379: PUSH
35380: LD_INT 0
35382: ST_TO_ADDR
// sHack := false ;
35383: LD_ADDR_EXP 98
35387: PUSH
35388: LD_INT 0
35390: ST_TO_ADDR
// sFire := false ;
35391: LD_ADDR_EXP 99
35395: PUSH
35396: LD_INT 0
35398: ST_TO_ADDR
// sRefresh := false ;
35399: LD_ADDR_EXP 100
35403: PUSH
35404: LD_INT 0
35406: ST_TO_ADDR
// sExp := false ;
35407: LD_ADDR_EXP 101
35411: PUSH
35412: LD_INT 0
35414: ST_TO_ADDR
// sDepot := false ;
35415: LD_ADDR_EXP 102
35419: PUSH
35420: LD_INT 0
35422: ST_TO_ADDR
// sFlag := false ;
35423: LD_ADDR_EXP 103
35427: PUSH
35428: LD_INT 0
35430: ST_TO_ADDR
// sKamikadze := false ;
35431: LD_ADDR_EXP 111
35435: PUSH
35436: LD_INT 0
35438: ST_TO_ADDR
// sTroll := false ;
35439: LD_ADDR_EXP 112
35443: PUSH
35444: LD_INT 0
35446: ST_TO_ADDR
// sSlow := false ;
35447: LD_ADDR_EXP 113
35451: PUSH
35452: LD_INT 0
35454: ST_TO_ADDR
// sLack := false ;
35455: LD_ADDR_EXP 114
35459: PUSH
35460: LD_INT 0
35462: ST_TO_ADDR
// sTank := false ;
35463: LD_ADDR_EXP 116
35467: PUSH
35468: LD_INT 0
35470: ST_TO_ADDR
// sRemote := false ;
35471: LD_ADDR_EXP 117
35475: PUSH
35476: LD_INT 0
35478: ST_TO_ADDR
// sPowell := false ;
35479: LD_ADDR_EXP 118
35483: PUSH
35484: LD_INT 0
35486: ST_TO_ADDR
// sTeleport := false ;
35487: LD_ADDR_EXP 121
35491: PUSH
35492: LD_INT 0
35494: ST_TO_ADDR
// sOilTower := false ;
35495: LD_ADDR_EXP 123
35499: PUSH
35500: LD_INT 0
35502: ST_TO_ADDR
// sShovel := false ;
35503: LD_ADDR_EXP 124
35507: PUSH
35508: LD_INT 0
35510: ST_TO_ADDR
// sSheik := false ;
35511: LD_ADDR_EXP 125
35515: PUSH
35516: LD_INT 0
35518: ST_TO_ADDR
// sEarthquake := false ;
35519: LD_ADDR_EXP 127
35523: PUSH
35524: LD_INT 0
35526: ST_TO_ADDR
// sAI := false ;
35527: LD_ADDR_EXP 128
35531: PUSH
35532: LD_INT 0
35534: ST_TO_ADDR
// sCargo := false ;
35535: LD_ADDR_EXP 131
35539: PUSH
35540: LD_INT 0
35542: ST_TO_ADDR
// sDLaser := false ;
35543: LD_ADDR_EXP 132
35547: PUSH
35548: LD_INT 0
35550: ST_TO_ADDR
// sExchange := false ;
35551: LD_ADDR_EXP 133
35555: PUSH
35556: LD_INT 0
35558: ST_TO_ADDR
// sFac := false ;
35559: LD_ADDR_EXP 134
35563: PUSH
35564: LD_INT 0
35566: ST_TO_ADDR
// sPower := false ;
35567: LD_ADDR_EXP 135
35571: PUSH
35572: LD_INT 0
35574: ST_TO_ADDR
// sRandom := false ;
35575: LD_ADDR_EXP 136
35579: PUSH
35580: LD_INT 0
35582: ST_TO_ADDR
// sShield := false ;
35583: LD_ADDR_EXP 137
35587: PUSH
35588: LD_INT 0
35590: ST_TO_ADDR
// sTime := false ;
35591: LD_ADDR_EXP 138
35595: PUSH
35596: LD_INT 0
35598: ST_TO_ADDR
// sTools := false ;
35599: LD_ADDR_EXP 139
35603: PUSH
35604: LD_INT 0
35606: ST_TO_ADDR
// sSold := false ;
35607: LD_ADDR_EXP 104
35611: PUSH
35612: LD_INT 0
35614: ST_TO_ADDR
// sDiff := false ;
35615: LD_ADDR_EXP 105
35619: PUSH
35620: LD_INT 0
35622: ST_TO_ADDR
// sFog := false ;
35623: LD_ADDR_EXP 108
35627: PUSH
35628: LD_INT 0
35630: ST_TO_ADDR
// sReset := false ;
35631: LD_ADDR_EXP 109
35635: PUSH
35636: LD_INT 0
35638: ST_TO_ADDR
// sSun := false ;
35639: LD_ADDR_EXP 110
35643: PUSH
35644: LD_INT 0
35646: ST_TO_ADDR
// sTiger := false ;
35647: LD_ADDR_EXP 106
35651: PUSH
35652: LD_INT 0
35654: ST_TO_ADDR
// sBomb := false ;
35655: LD_ADDR_EXP 107
35659: PUSH
35660: LD_INT 0
35662: ST_TO_ADDR
// sWound := false ;
35663: LD_ADDR_EXP 115
35667: PUSH
35668: LD_INT 0
35670: ST_TO_ADDR
// sBetray := false ;
35671: LD_ADDR_EXP 119
35675: PUSH
35676: LD_INT 0
35678: ST_TO_ADDR
// sContamin := false ;
35679: LD_ADDR_EXP 120
35683: PUSH
35684: LD_INT 0
35686: ST_TO_ADDR
// sOil := false ;
35687: LD_ADDR_EXP 122
35691: PUSH
35692: LD_INT 0
35694: ST_TO_ADDR
// sStu := false ;
35695: LD_ADDR_EXP 126
35699: PUSH
35700: LD_INT 0
35702: ST_TO_ADDR
// sBazooka := false ;
35703: LD_ADDR_EXP 129
35707: PUSH
35708: LD_INT 0
35710: ST_TO_ADDR
// sMortar := false ;
35711: LD_ADDR_EXP 130
35715: PUSH
35716: LD_INT 0
35718: ST_TO_ADDR
// sRanger := false ;
35719: LD_ADDR_EXP 140
35723: PUSH
35724: LD_INT 0
35726: ST_TO_ADDR
// sComputer := false ;
35727: LD_ADDR_EXP 141
35731: PUSH
35732: LD_INT 0
35734: ST_TO_ADDR
// s30 := false ;
35735: LD_ADDR_EXP 142
35739: PUSH
35740: LD_INT 0
35742: ST_TO_ADDR
// s60 := false ;
35743: LD_ADDR_EXP 143
35747: PUSH
35748: LD_INT 0
35750: ST_TO_ADDR
// end ;
35751: LD_VAR 0 1
35755: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
35756: LD_INT 0
35758: PPUSH
35759: PPUSH
35760: PPUSH
35761: PPUSH
35762: PPUSH
35763: PPUSH
35764: PPUSH
// result := [ ] ;
35765: LD_ADDR_VAR 0 2
35769: PUSH
35770: EMPTY
35771: ST_TO_ADDR
// if campaign_id = 1 then
35772: LD_OWVAR 69
35776: PUSH
35777: LD_INT 1
35779: EQUAL
35780: IFFALSE 38946
// begin case mission_number of 1 :
35782: LD_OWVAR 70
35786: PUSH
35787: LD_INT 1
35789: DOUBLE
35790: EQUAL
35791: IFTRUE 35795
35793: GO 35871
35795: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
35796: LD_ADDR_VAR 0 2
35800: PUSH
35801: LD_INT 2
35803: PUSH
35804: LD_INT 4
35806: PUSH
35807: LD_INT 11
35809: PUSH
35810: LD_INT 12
35812: PUSH
35813: LD_INT 15
35815: PUSH
35816: LD_INT 16
35818: PUSH
35819: LD_INT 22
35821: PUSH
35822: LD_INT 23
35824: PUSH
35825: LD_INT 26
35827: PUSH
35828: EMPTY
35829: LIST
35830: LIST
35831: LIST
35832: LIST
35833: LIST
35834: LIST
35835: LIST
35836: LIST
35837: LIST
35838: PUSH
35839: LD_INT 101
35841: PUSH
35842: LD_INT 102
35844: PUSH
35845: LD_INT 106
35847: PUSH
35848: LD_INT 116
35850: PUSH
35851: LD_INT 117
35853: PUSH
35854: LD_INT 118
35856: PUSH
35857: EMPTY
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: PUSH
35865: EMPTY
35866: LIST
35867: LIST
35868: ST_TO_ADDR
35869: GO 38944
35871: LD_INT 2
35873: DOUBLE
35874: EQUAL
35875: IFTRUE 35879
35877: GO 35963
35879: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
35880: LD_ADDR_VAR 0 2
35884: PUSH
35885: LD_INT 2
35887: PUSH
35888: LD_INT 4
35890: PUSH
35891: LD_INT 11
35893: PUSH
35894: LD_INT 12
35896: PUSH
35897: LD_INT 15
35899: PUSH
35900: LD_INT 16
35902: PUSH
35903: LD_INT 22
35905: PUSH
35906: LD_INT 23
35908: PUSH
35909: LD_INT 26
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: PUSH
35923: LD_INT 101
35925: PUSH
35926: LD_INT 102
35928: PUSH
35929: LD_INT 105
35931: PUSH
35932: LD_INT 106
35934: PUSH
35935: LD_INT 108
35937: PUSH
35938: LD_INT 116
35940: PUSH
35941: LD_INT 117
35943: PUSH
35944: LD_INT 118
35946: PUSH
35947: EMPTY
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: PUSH
35957: EMPTY
35958: LIST
35959: LIST
35960: ST_TO_ADDR
35961: GO 38944
35963: LD_INT 3
35965: DOUBLE
35966: EQUAL
35967: IFTRUE 35971
35969: GO 36059
35971: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
35972: LD_ADDR_VAR 0 2
35976: PUSH
35977: LD_INT 2
35979: PUSH
35980: LD_INT 4
35982: PUSH
35983: LD_INT 5
35985: PUSH
35986: LD_INT 11
35988: PUSH
35989: LD_INT 12
35991: PUSH
35992: LD_INT 15
35994: PUSH
35995: LD_INT 16
35997: PUSH
35998: LD_INT 22
36000: PUSH
36001: LD_INT 26
36003: PUSH
36004: LD_INT 36
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: PUSH
36019: LD_INT 101
36021: PUSH
36022: LD_INT 102
36024: PUSH
36025: LD_INT 105
36027: PUSH
36028: LD_INT 106
36030: PUSH
36031: LD_INT 108
36033: PUSH
36034: LD_INT 116
36036: PUSH
36037: LD_INT 117
36039: PUSH
36040: LD_INT 118
36042: PUSH
36043: EMPTY
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: PUSH
36053: EMPTY
36054: LIST
36055: LIST
36056: ST_TO_ADDR
36057: GO 38944
36059: LD_INT 4
36061: DOUBLE
36062: EQUAL
36063: IFTRUE 36067
36065: GO 36163
36067: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
36068: LD_ADDR_VAR 0 2
36072: PUSH
36073: LD_INT 2
36075: PUSH
36076: LD_INT 4
36078: PUSH
36079: LD_INT 5
36081: PUSH
36082: LD_INT 8
36084: PUSH
36085: LD_INT 11
36087: PUSH
36088: LD_INT 12
36090: PUSH
36091: LD_INT 15
36093: PUSH
36094: LD_INT 16
36096: PUSH
36097: LD_INT 22
36099: PUSH
36100: LD_INT 23
36102: PUSH
36103: LD_INT 26
36105: PUSH
36106: LD_INT 36
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: LIST
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 101
36125: PUSH
36126: LD_INT 102
36128: PUSH
36129: LD_INT 105
36131: PUSH
36132: LD_INT 106
36134: PUSH
36135: LD_INT 108
36137: PUSH
36138: LD_INT 116
36140: PUSH
36141: LD_INT 117
36143: PUSH
36144: LD_INT 118
36146: PUSH
36147: EMPTY
36148: LIST
36149: LIST
36150: LIST
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: ST_TO_ADDR
36161: GO 38944
36163: LD_INT 5
36165: DOUBLE
36166: EQUAL
36167: IFTRUE 36171
36169: GO 36283
36171: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
36172: LD_ADDR_VAR 0 2
36176: PUSH
36177: LD_INT 2
36179: PUSH
36180: LD_INT 4
36182: PUSH
36183: LD_INT 5
36185: PUSH
36186: LD_INT 6
36188: PUSH
36189: LD_INT 8
36191: PUSH
36192: LD_INT 11
36194: PUSH
36195: LD_INT 12
36197: PUSH
36198: LD_INT 15
36200: PUSH
36201: LD_INT 16
36203: PUSH
36204: LD_INT 22
36206: PUSH
36207: LD_INT 23
36209: PUSH
36210: LD_INT 25
36212: PUSH
36213: LD_INT 26
36215: PUSH
36216: LD_INT 36
36218: PUSH
36219: EMPTY
36220: LIST
36221: LIST
36222: LIST
36223: LIST
36224: LIST
36225: LIST
36226: LIST
36227: LIST
36228: LIST
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 101
36237: PUSH
36238: LD_INT 102
36240: PUSH
36241: LD_INT 105
36243: PUSH
36244: LD_INT 106
36246: PUSH
36247: LD_INT 108
36249: PUSH
36250: LD_INT 109
36252: PUSH
36253: LD_INT 112
36255: PUSH
36256: LD_INT 116
36258: PUSH
36259: LD_INT 117
36261: PUSH
36262: LD_INT 118
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: LIST
36269: LIST
36270: LIST
36271: LIST
36272: LIST
36273: LIST
36274: LIST
36275: LIST
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: ST_TO_ADDR
36281: GO 38944
36283: LD_INT 6
36285: DOUBLE
36286: EQUAL
36287: IFTRUE 36291
36289: GO 36423
36291: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
36292: LD_ADDR_VAR 0 2
36296: PUSH
36297: LD_INT 2
36299: PUSH
36300: LD_INT 4
36302: PUSH
36303: LD_INT 5
36305: PUSH
36306: LD_INT 6
36308: PUSH
36309: LD_INT 8
36311: PUSH
36312: LD_INT 11
36314: PUSH
36315: LD_INT 12
36317: PUSH
36318: LD_INT 15
36320: PUSH
36321: LD_INT 16
36323: PUSH
36324: LD_INT 20
36326: PUSH
36327: LD_INT 21
36329: PUSH
36330: LD_INT 22
36332: PUSH
36333: LD_INT 23
36335: PUSH
36336: LD_INT 25
36338: PUSH
36339: LD_INT 26
36341: PUSH
36342: LD_INT 30
36344: PUSH
36345: LD_INT 31
36347: PUSH
36348: LD_INT 32
36350: PUSH
36351: LD_INT 36
36353: PUSH
36354: EMPTY
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 101
36377: PUSH
36378: LD_INT 102
36380: PUSH
36381: LD_INT 105
36383: PUSH
36384: LD_INT 106
36386: PUSH
36387: LD_INT 108
36389: PUSH
36390: LD_INT 109
36392: PUSH
36393: LD_INT 112
36395: PUSH
36396: LD_INT 116
36398: PUSH
36399: LD_INT 117
36401: PUSH
36402: LD_INT 118
36404: PUSH
36405: EMPTY
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: ST_TO_ADDR
36421: GO 38944
36423: LD_INT 7
36425: DOUBLE
36426: EQUAL
36427: IFTRUE 36431
36429: GO 36543
36431: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
36432: LD_ADDR_VAR 0 2
36436: PUSH
36437: LD_INT 2
36439: PUSH
36440: LD_INT 4
36442: PUSH
36443: LD_INT 5
36445: PUSH
36446: LD_INT 7
36448: PUSH
36449: LD_INT 11
36451: PUSH
36452: LD_INT 12
36454: PUSH
36455: LD_INT 15
36457: PUSH
36458: LD_INT 16
36460: PUSH
36461: LD_INT 20
36463: PUSH
36464: LD_INT 21
36466: PUSH
36467: LD_INT 22
36469: PUSH
36470: LD_INT 23
36472: PUSH
36473: LD_INT 25
36475: PUSH
36476: LD_INT 26
36478: PUSH
36479: EMPTY
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 101
36497: PUSH
36498: LD_INT 102
36500: PUSH
36501: LD_INT 103
36503: PUSH
36504: LD_INT 105
36506: PUSH
36507: LD_INT 106
36509: PUSH
36510: LD_INT 108
36512: PUSH
36513: LD_INT 112
36515: PUSH
36516: LD_INT 116
36518: PUSH
36519: LD_INT 117
36521: PUSH
36522: LD_INT 118
36524: PUSH
36525: EMPTY
36526: LIST
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: ST_TO_ADDR
36541: GO 38944
36543: LD_INT 8
36545: DOUBLE
36546: EQUAL
36547: IFTRUE 36551
36549: GO 36691
36551: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
36552: LD_ADDR_VAR 0 2
36556: PUSH
36557: LD_INT 2
36559: PUSH
36560: LD_INT 4
36562: PUSH
36563: LD_INT 5
36565: PUSH
36566: LD_INT 6
36568: PUSH
36569: LD_INT 7
36571: PUSH
36572: LD_INT 8
36574: PUSH
36575: LD_INT 11
36577: PUSH
36578: LD_INT 12
36580: PUSH
36581: LD_INT 15
36583: PUSH
36584: LD_INT 16
36586: PUSH
36587: LD_INT 20
36589: PUSH
36590: LD_INT 21
36592: PUSH
36593: LD_INT 22
36595: PUSH
36596: LD_INT 23
36598: PUSH
36599: LD_INT 25
36601: PUSH
36602: LD_INT 26
36604: PUSH
36605: LD_INT 30
36607: PUSH
36608: LD_INT 31
36610: PUSH
36611: LD_INT 32
36613: PUSH
36614: LD_INT 36
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: PUSH
36639: LD_INT 101
36641: PUSH
36642: LD_INT 102
36644: PUSH
36645: LD_INT 103
36647: PUSH
36648: LD_INT 105
36650: PUSH
36651: LD_INT 106
36653: PUSH
36654: LD_INT 108
36656: PUSH
36657: LD_INT 109
36659: PUSH
36660: LD_INT 112
36662: PUSH
36663: LD_INT 116
36665: PUSH
36666: LD_INT 117
36668: PUSH
36669: LD_INT 118
36671: PUSH
36672: EMPTY
36673: LIST
36674: LIST
36675: LIST
36676: LIST
36677: LIST
36678: LIST
36679: LIST
36680: LIST
36681: LIST
36682: LIST
36683: LIST
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: ST_TO_ADDR
36689: GO 38944
36691: LD_INT 9
36693: DOUBLE
36694: EQUAL
36695: IFTRUE 36699
36697: GO 36847
36699: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
36700: LD_ADDR_VAR 0 2
36704: PUSH
36705: LD_INT 2
36707: PUSH
36708: LD_INT 4
36710: PUSH
36711: LD_INT 5
36713: PUSH
36714: LD_INT 6
36716: PUSH
36717: LD_INT 7
36719: PUSH
36720: LD_INT 8
36722: PUSH
36723: LD_INT 11
36725: PUSH
36726: LD_INT 12
36728: PUSH
36729: LD_INT 15
36731: PUSH
36732: LD_INT 16
36734: PUSH
36735: LD_INT 20
36737: PUSH
36738: LD_INT 21
36740: PUSH
36741: LD_INT 22
36743: PUSH
36744: LD_INT 23
36746: PUSH
36747: LD_INT 25
36749: PUSH
36750: LD_INT 26
36752: PUSH
36753: LD_INT 28
36755: PUSH
36756: LD_INT 30
36758: PUSH
36759: LD_INT 31
36761: PUSH
36762: LD_INT 32
36764: PUSH
36765: LD_INT 36
36767: PUSH
36768: EMPTY
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: LIST
36784: LIST
36785: LIST
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 101
36793: PUSH
36794: LD_INT 102
36796: PUSH
36797: LD_INT 103
36799: PUSH
36800: LD_INT 105
36802: PUSH
36803: LD_INT 106
36805: PUSH
36806: LD_INT 108
36808: PUSH
36809: LD_INT 109
36811: PUSH
36812: LD_INT 112
36814: PUSH
36815: LD_INT 114
36817: PUSH
36818: LD_INT 116
36820: PUSH
36821: LD_INT 117
36823: PUSH
36824: LD_INT 118
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: LIST
36834: LIST
36835: LIST
36836: LIST
36837: LIST
36838: LIST
36839: LIST
36840: PUSH
36841: EMPTY
36842: LIST
36843: LIST
36844: ST_TO_ADDR
36845: GO 38944
36847: LD_INT 10
36849: DOUBLE
36850: EQUAL
36851: IFTRUE 36855
36853: GO 37051
36855: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
36856: LD_ADDR_VAR 0 2
36860: PUSH
36861: LD_INT 2
36863: PUSH
36864: LD_INT 4
36866: PUSH
36867: LD_INT 5
36869: PUSH
36870: LD_INT 6
36872: PUSH
36873: LD_INT 7
36875: PUSH
36876: LD_INT 8
36878: PUSH
36879: LD_INT 9
36881: PUSH
36882: LD_INT 10
36884: PUSH
36885: LD_INT 11
36887: PUSH
36888: LD_INT 12
36890: PUSH
36891: LD_INT 13
36893: PUSH
36894: LD_INT 14
36896: PUSH
36897: LD_INT 15
36899: PUSH
36900: LD_INT 16
36902: PUSH
36903: LD_INT 17
36905: PUSH
36906: LD_INT 18
36908: PUSH
36909: LD_INT 19
36911: PUSH
36912: LD_INT 20
36914: PUSH
36915: LD_INT 21
36917: PUSH
36918: LD_INT 22
36920: PUSH
36921: LD_INT 23
36923: PUSH
36924: LD_INT 24
36926: PUSH
36927: LD_INT 25
36929: PUSH
36930: LD_INT 26
36932: PUSH
36933: LD_INT 28
36935: PUSH
36936: LD_INT 30
36938: PUSH
36939: LD_INT 31
36941: PUSH
36942: LD_INT 32
36944: PUSH
36945: LD_INT 36
36947: PUSH
36948: EMPTY
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: LIST
36960: LIST
36961: LIST
36962: LIST
36963: LIST
36964: LIST
36965: LIST
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 101
36981: PUSH
36982: LD_INT 102
36984: PUSH
36985: LD_INT 103
36987: PUSH
36988: LD_INT 104
36990: PUSH
36991: LD_INT 105
36993: PUSH
36994: LD_INT 106
36996: PUSH
36997: LD_INT 107
36999: PUSH
37000: LD_INT 108
37002: PUSH
37003: LD_INT 109
37005: PUSH
37006: LD_INT 110
37008: PUSH
37009: LD_INT 111
37011: PUSH
37012: LD_INT 112
37014: PUSH
37015: LD_INT 114
37017: PUSH
37018: LD_INT 116
37020: PUSH
37021: LD_INT 117
37023: PUSH
37024: LD_INT 118
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: LIST
37033: LIST
37034: LIST
37035: LIST
37036: LIST
37037: LIST
37038: LIST
37039: LIST
37040: LIST
37041: LIST
37042: LIST
37043: LIST
37044: PUSH
37045: EMPTY
37046: LIST
37047: LIST
37048: ST_TO_ADDR
37049: GO 38944
37051: LD_INT 11
37053: DOUBLE
37054: EQUAL
37055: IFTRUE 37059
37057: GO 37263
37059: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
37060: LD_ADDR_VAR 0 2
37064: PUSH
37065: LD_INT 2
37067: PUSH
37068: LD_INT 3
37070: PUSH
37071: LD_INT 4
37073: PUSH
37074: LD_INT 5
37076: PUSH
37077: LD_INT 6
37079: PUSH
37080: LD_INT 7
37082: PUSH
37083: LD_INT 8
37085: PUSH
37086: LD_INT 9
37088: PUSH
37089: LD_INT 10
37091: PUSH
37092: LD_INT 11
37094: PUSH
37095: LD_INT 12
37097: PUSH
37098: LD_INT 13
37100: PUSH
37101: LD_INT 14
37103: PUSH
37104: LD_INT 15
37106: PUSH
37107: LD_INT 16
37109: PUSH
37110: LD_INT 17
37112: PUSH
37113: LD_INT 18
37115: PUSH
37116: LD_INT 19
37118: PUSH
37119: LD_INT 20
37121: PUSH
37122: LD_INT 21
37124: PUSH
37125: LD_INT 22
37127: PUSH
37128: LD_INT 23
37130: PUSH
37131: LD_INT 24
37133: PUSH
37134: LD_INT 25
37136: PUSH
37137: LD_INT 26
37139: PUSH
37140: LD_INT 28
37142: PUSH
37143: LD_INT 30
37145: PUSH
37146: LD_INT 31
37148: PUSH
37149: LD_INT 32
37151: PUSH
37152: LD_INT 34
37154: PUSH
37155: LD_INT 36
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: LIST
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: LIST
37179: LIST
37180: LIST
37181: LIST
37182: LIST
37183: LIST
37184: LIST
37185: LIST
37186: LIST
37187: LIST
37188: LIST
37189: LIST
37190: PUSH
37191: LD_INT 101
37193: PUSH
37194: LD_INT 102
37196: PUSH
37197: LD_INT 103
37199: PUSH
37200: LD_INT 104
37202: PUSH
37203: LD_INT 105
37205: PUSH
37206: LD_INT 106
37208: PUSH
37209: LD_INT 107
37211: PUSH
37212: LD_INT 108
37214: PUSH
37215: LD_INT 109
37217: PUSH
37218: LD_INT 110
37220: PUSH
37221: LD_INT 111
37223: PUSH
37224: LD_INT 112
37226: PUSH
37227: LD_INT 114
37229: PUSH
37230: LD_INT 116
37232: PUSH
37233: LD_INT 117
37235: PUSH
37236: LD_INT 118
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: ST_TO_ADDR
37261: GO 38944
37263: LD_INT 12
37265: DOUBLE
37266: EQUAL
37267: IFTRUE 37271
37269: GO 37491
37271: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
37272: LD_ADDR_VAR 0 2
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: LD_INT 2
37282: PUSH
37283: LD_INT 3
37285: PUSH
37286: LD_INT 4
37288: PUSH
37289: LD_INT 5
37291: PUSH
37292: LD_INT 6
37294: PUSH
37295: LD_INT 7
37297: PUSH
37298: LD_INT 8
37300: PUSH
37301: LD_INT 9
37303: PUSH
37304: LD_INT 10
37306: PUSH
37307: LD_INT 11
37309: PUSH
37310: LD_INT 12
37312: PUSH
37313: LD_INT 13
37315: PUSH
37316: LD_INT 14
37318: PUSH
37319: LD_INT 15
37321: PUSH
37322: LD_INT 16
37324: PUSH
37325: LD_INT 17
37327: PUSH
37328: LD_INT 18
37330: PUSH
37331: LD_INT 19
37333: PUSH
37334: LD_INT 20
37336: PUSH
37337: LD_INT 21
37339: PUSH
37340: LD_INT 22
37342: PUSH
37343: LD_INT 23
37345: PUSH
37346: LD_INT 24
37348: PUSH
37349: LD_INT 25
37351: PUSH
37352: LD_INT 26
37354: PUSH
37355: LD_INT 27
37357: PUSH
37358: LD_INT 28
37360: PUSH
37361: LD_INT 30
37363: PUSH
37364: LD_INT 31
37366: PUSH
37367: LD_INT 32
37369: PUSH
37370: LD_INT 33
37372: PUSH
37373: LD_INT 34
37375: PUSH
37376: LD_INT 36
37378: PUSH
37379: EMPTY
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: LIST
37403: LIST
37404: LIST
37405: LIST
37406: LIST
37407: LIST
37408: LIST
37409: LIST
37410: LIST
37411: LIST
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 101
37417: PUSH
37418: LD_INT 102
37420: PUSH
37421: LD_INT 103
37423: PUSH
37424: LD_INT 104
37426: PUSH
37427: LD_INT 105
37429: PUSH
37430: LD_INT 106
37432: PUSH
37433: LD_INT 107
37435: PUSH
37436: LD_INT 108
37438: PUSH
37439: LD_INT 109
37441: PUSH
37442: LD_INT 110
37444: PUSH
37445: LD_INT 111
37447: PUSH
37448: LD_INT 112
37450: PUSH
37451: LD_INT 113
37453: PUSH
37454: LD_INT 114
37456: PUSH
37457: LD_INT 116
37459: PUSH
37460: LD_INT 117
37462: PUSH
37463: LD_INT 118
37465: PUSH
37466: EMPTY
37467: LIST
37468: LIST
37469: LIST
37470: LIST
37471: LIST
37472: LIST
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: PUSH
37485: EMPTY
37486: LIST
37487: LIST
37488: ST_TO_ADDR
37489: GO 38944
37491: LD_INT 13
37493: DOUBLE
37494: EQUAL
37495: IFTRUE 37499
37497: GO 37707
37499: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
37500: LD_ADDR_VAR 0 2
37504: PUSH
37505: LD_INT 1
37507: PUSH
37508: LD_INT 2
37510: PUSH
37511: LD_INT 3
37513: PUSH
37514: LD_INT 4
37516: PUSH
37517: LD_INT 5
37519: PUSH
37520: LD_INT 8
37522: PUSH
37523: LD_INT 9
37525: PUSH
37526: LD_INT 10
37528: PUSH
37529: LD_INT 11
37531: PUSH
37532: LD_INT 12
37534: PUSH
37535: LD_INT 14
37537: PUSH
37538: LD_INT 15
37540: PUSH
37541: LD_INT 16
37543: PUSH
37544: LD_INT 17
37546: PUSH
37547: LD_INT 18
37549: PUSH
37550: LD_INT 19
37552: PUSH
37553: LD_INT 20
37555: PUSH
37556: LD_INT 21
37558: PUSH
37559: LD_INT 22
37561: PUSH
37562: LD_INT 23
37564: PUSH
37565: LD_INT 24
37567: PUSH
37568: LD_INT 25
37570: PUSH
37571: LD_INT 26
37573: PUSH
37574: LD_INT 27
37576: PUSH
37577: LD_INT 28
37579: PUSH
37580: LD_INT 30
37582: PUSH
37583: LD_INT 31
37585: PUSH
37586: LD_INT 32
37588: PUSH
37589: LD_INT 33
37591: PUSH
37592: LD_INT 34
37594: PUSH
37595: LD_INT 36
37597: PUSH
37598: EMPTY
37599: LIST
37600: LIST
37601: LIST
37602: LIST
37603: LIST
37604: LIST
37605: LIST
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: LIST
37611: LIST
37612: LIST
37613: LIST
37614: LIST
37615: LIST
37616: LIST
37617: LIST
37618: LIST
37619: LIST
37620: LIST
37621: LIST
37622: LIST
37623: LIST
37624: LIST
37625: LIST
37626: LIST
37627: LIST
37628: LIST
37629: LIST
37630: PUSH
37631: LD_INT 101
37633: PUSH
37634: LD_INT 102
37636: PUSH
37637: LD_INT 103
37639: PUSH
37640: LD_INT 104
37642: PUSH
37643: LD_INT 105
37645: PUSH
37646: LD_INT 106
37648: PUSH
37649: LD_INT 107
37651: PUSH
37652: LD_INT 108
37654: PUSH
37655: LD_INT 109
37657: PUSH
37658: LD_INT 110
37660: PUSH
37661: LD_INT 111
37663: PUSH
37664: LD_INT 112
37666: PUSH
37667: LD_INT 113
37669: PUSH
37670: LD_INT 114
37672: PUSH
37673: LD_INT 116
37675: PUSH
37676: LD_INT 117
37678: PUSH
37679: LD_INT 118
37681: PUSH
37682: EMPTY
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: PUSH
37701: EMPTY
37702: LIST
37703: LIST
37704: ST_TO_ADDR
37705: GO 38944
37707: LD_INT 14
37709: DOUBLE
37710: EQUAL
37711: IFTRUE 37715
37713: GO 37939
37715: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
37716: LD_ADDR_VAR 0 2
37720: PUSH
37721: LD_INT 1
37723: PUSH
37724: LD_INT 2
37726: PUSH
37727: LD_INT 3
37729: PUSH
37730: LD_INT 4
37732: PUSH
37733: LD_INT 5
37735: PUSH
37736: LD_INT 6
37738: PUSH
37739: LD_INT 7
37741: PUSH
37742: LD_INT 8
37744: PUSH
37745: LD_INT 9
37747: PUSH
37748: LD_INT 10
37750: PUSH
37751: LD_INT 11
37753: PUSH
37754: LD_INT 12
37756: PUSH
37757: LD_INT 13
37759: PUSH
37760: LD_INT 14
37762: PUSH
37763: LD_INT 15
37765: PUSH
37766: LD_INT 16
37768: PUSH
37769: LD_INT 17
37771: PUSH
37772: LD_INT 18
37774: PUSH
37775: LD_INT 19
37777: PUSH
37778: LD_INT 20
37780: PUSH
37781: LD_INT 21
37783: PUSH
37784: LD_INT 22
37786: PUSH
37787: LD_INT 23
37789: PUSH
37790: LD_INT 24
37792: PUSH
37793: LD_INT 25
37795: PUSH
37796: LD_INT 26
37798: PUSH
37799: LD_INT 27
37801: PUSH
37802: LD_INT 28
37804: PUSH
37805: LD_INT 29
37807: PUSH
37808: LD_INT 30
37810: PUSH
37811: LD_INT 31
37813: PUSH
37814: LD_INT 32
37816: PUSH
37817: LD_INT 33
37819: PUSH
37820: LD_INT 34
37822: PUSH
37823: LD_INT 36
37825: PUSH
37826: EMPTY
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: LIST
37838: LIST
37839: LIST
37840: LIST
37841: LIST
37842: LIST
37843: LIST
37844: LIST
37845: LIST
37846: LIST
37847: LIST
37848: LIST
37849: LIST
37850: LIST
37851: LIST
37852: LIST
37853: LIST
37854: LIST
37855: LIST
37856: LIST
37857: LIST
37858: LIST
37859: LIST
37860: LIST
37861: LIST
37862: PUSH
37863: LD_INT 101
37865: PUSH
37866: LD_INT 102
37868: PUSH
37869: LD_INT 103
37871: PUSH
37872: LD_INT 104
37874: PUSH
37875: LD_INT 105
37877: PUSH
37878: LD_INT 106
37880: PUSH
37881: LD_INT 107
37883: PUSH
37884: LD_INT 108
37886: PUSH
37887: LD_INT 109
37889: PUSH
37890: LD_INT 110
37892: PUSH
37893: LD_INT 111
37895: PUSH
37896: LD_INT 112
37898: PUSH
37899: LD_INT 113
37901: PUSH
37902: LD_INT 114
37904: PUSH
37905: LD_INT 116
37907: PUSH
37908: LD_INT 117
37910: PUSH
37911: LD_INT 118
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: ST_TO_ADDR
37937: GO 38944
37939: LD_INT 15
37941: DOUBLE
37942: EQUAL
37943: IFTRUE 37947
37945: GO 38171
37947: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
37948: LD_ADDR_VAR 0 2
37952: PUSH
37953: LD_INT 1
37955: PUSH
37956: LD_INT 2
37958: PUSH
37959: LD_INT 3
37961: PUSH
37962: LD_INT 4
37964: PUSH
37965: LD_INT 5
37967: PUSH
37968: LD_INT 6
37970: PUSH
37971: LD_INT 7
37973: PUSH
37974: LD_INT 8
37976: PUSH
37977: LD_INT 9
37979: PUSH
37980: LD_INT 10
37982: PUSH
37983: LD_INT 11
37985: PUSH
37986: LD_INT 12
37988: PUSH
37989: LD_INT 13
37991: PUSH
37992: LD_INT 14
37994: PUSH
37995: LD_INT 15
37997: PUSH
37998: LD_INT 16
38000: PUSH
38001: LD_INT 17
38003: PUSH
38004: LD_INT 18
38006: PUSH
38007: LD_INT 19
38009: PUSH
38010: LD_INT 20
38012: PUSH
38013: LD_INT 21
38015: PUSH
38016: LD_INT 22
38018: PUSH
38019: LD_INT 23
38021: PUSH
38022: LD_INT 24
38024: PUSH
38025: LD_INT 25
38027: PUSH
38028: LD_INT 26
38030: PUSH
38031: LD_INT 27
38033: PUSH
38034: LD_INT 28
38036: PUSH
38037: LD_INT 29
38039: PUSH
38040: LD_INT 30
38042: PUSH
38043: LD_INT 31
38045: PUSH
38046: LD_INT 32
38048: PUSH
38049: LD_INT 33
38051: PUSH
38052: LD_INT 34
38054: PUSH
38055: LD_INT 36
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 101
38097: PUSH
38098: LD_INT 102
38100: PUSH
38101: LD_INT 103
38103: PUSH
38104: LD_INT 104
38106: PUSH
38107: LD_INT 105
38109: PUSH
38110: LD_INT 106
38112: PUSH
38113: LD_INT 107
38115: PUSH
38116: LD_INT 108
38118: PUSH
38119: LD_INT 109
38121: PUSH
38122: LD_INT 110
38124: PUSH
38125: LD_INT 111
38127: PUSH
38128: LD_INT 112
38130: PUSH
38131: LD_INT 113
38133: PUSH
38134: LD_INT 114
38136: PUSH
38137: LD_INT 116
38139: PUSH
38140: LD_INT 117
38142: PUSH
38143: LD_INT 118
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: ST_TO_ADDR
38169: GO 38944
38171: LD_INT 16
38173: DOUBLE
38174: EQUAL
38175: IFTRUE 38179
38177: GO 38315
38179: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
38180: LD_ADDR_VAR 0 2
38184: PUSH
38185: LD_INT 2
38187: PUSH
38188: LD_INT 4
38190: PUSH
38191: LD_INT 5
38193: PUSH
38194: LD_INT 7
38196: PUSH
38197: LD_INT 11
38199: PUSH
38200: LD_INT 12
38202: PUSH
38203: LD_INT 15
38205: PUSH
38206: LD_INT 16
38208: PUSH
38209: LD_INT 20
38211: PUSH
38212: LD_INT 21
38214: PUSH
38215: LD_INT 22
38217: PUSH
38218: LD_INT 23
38220: PUSH
38221: LD_INT 25
38223: PUSH
38224: LD_INT 26
38226: PUSH
38227: LD_INT 30
38229: PUSH
38230: LD_INT 31
38232: PUSH
38233: LD_INT 32
38235: PUSH
38236: LD_INT 33
38238: PUSH
38239: LD_INT 34
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: LIST
38246: LIST
38247: LIST
38248: LIST
38249: LIST
38250: LIST
38251: LIST
38252: LIST
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 101
38265: PUSH
38266: LD_INT 102
38268: PUSH
38269: LD_INT 103
38271: PUSH
38272: LD_INT 106
38274: PUSH
38275: LD_INT 108
38277: PUSH
38278: LD_INT 112
38280: PUSH
38281: LD_INT 113
38283: PUSH
38284: LD_INT 114
38286: PUSH
38287: LD_INT 116
38289: PUSH
38290: LD_INT 117
38292: PUSH
38293: LD_INT 118
38295: PUSH
38296: EMPTY
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: ST_TO_ADDR
38313: GO 38944
38315: LD_INT 17
38317: DOUBLE
38318: EQUAL
38319: IFTRUE 38323
38321: GO 38547
38323: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
38324: LD_ADDR_VAR 0 2
38328: PUSH
38329: LD_INT 1
38331: PUSH
38332: LD_INT 2
38334: PUSH
38335: LD_INT 3
38337: PUSH
38338: LD_INT 4
38340: PUSH
38341: LD_INT 5
38343: PUSH
38344: LD_INT 6
38346: PUSH
38347: LD_INT 7
38349: PUSH
38350: LD_INT 8
38352: PUSH
38353: LD_INT 9
38355: PUSH
38356: LD_INT 10
38358: PUSH
38359: LD_INT 11
38361: PUSH
38362: LD_INT 12
38364: PUSH
38365: LD_INT 13
38367: PUSH
38368: LD_INT 14
38370: PUSH
38371: LD_INT 15
38373: PUSH
38374: LD_INT 16
38376: PUSH
38377: LD_INT 17
38379: PUSH
38380: LD_INT 18
38382: PUSH
38383: LD_INT 19
38385: PUSH
38386: LD_INT 20
38388: PUSH
38389: LD_INT 21
38391: PUSH
38392: LD_INT 22
38394: PUSH
38395: LD_INT 23
38397: PUSH
38398: LD_INT 24
38400: PUSH
38401: LD_INT 25
38403: PUSH
38404: LD_INT 26
38406: PUSH
38407: LD_INT 27
38409: PUSH
38410: LD_INT 28
38412: PUSH
38413: LD_INT 29
38415: PUSH
38416: LD_INT 30
38418: PUSH
38419: LD_INT 31
38421: PUSH
38422: LD_INT 32
38424: PUSH
38425: LD_INT 33
38427: PUSH
38428: LD_INT 34
38430: PUSH
38431: LD_INT 36
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: PUSH
38471: LD_INT 101
38473: PUSH
38474: LD_INT 102
38476: PUSH
38477: LD_INT 103
38479: PUSH
38480: LD_INT 104
38482: PUSH
38483: LD_INT 105
38485: PUSH
38486: LD_INT 106
38488: PUSH
38489: LD_INT 107
38491: PUSH
38492: LD_INT 108
38494: PUSH
38495: LD_INT 109
38497: PUSH
38498: LD_INT 110
38500: PUSH
38501: LD_INT 111
38503: PUSH
38504: LD_INT 112
38506: PUSH
38507: LD_INT 113
38509: PUSH
38510: LD_INT 114
38512: PUSH
38513: LD_INT 116
38515: PUSH
38516: LD_INT 117
38518: PUSH
38519: LD_INT 118
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: LIST
38526: LIST
38527: LIST
38528: LIST
38529: LIST
38530: LIST
38531: LIST
38532: LIST
38533: LIST
38534: LIST
38535: LIST
38536: LIST
38537: LIST
38538: LIST
38539: LIST
38540: PUSH
38541: EMPTY
38542: LIST
38543: LIST
38544: ST_TO_ADDR
38545: GO 38944
38547: LD_INT 18
38549: DOUBLE
38550: EQUAL
38551: IFTRUE 38555
38553: GO 38703
38555: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
38556: LD_ADDR_VAR 0 2
38560: PUSH
38561: LD_INT 2
38563: PUSH
38564: LD_INT 4
38566: PUSH
38567: LD_INT 5
38569: PUSH
38570: LD_INT 7
38572: PUSH
38573: LD_INT 11
38575: PUSH
38576: LD_INT 12
38578: PUSH
38579: LD_INT 15
38581: PUSH
38582: LD_INT 16
38584: PUSH
38585: LD_INT 20
38587: PUSH
38588: LD_INT 21
38590: PUSH
38591: LD_INT 22
38593: PUSH
38594: LD_INT 23
38596: PUSH
38597: LD_INT 25
38599: PUSH
38600: LD_INT 26
38602: PUSH
38603: LD_INT 30
38605: PUSH
38606: LD_INT 31
38608: PUSH
38609: LD_INT 32
38611: PUSH
38612: LD_INT 33
38614: PUSH
38615: LD_INT 34
38617: PUSH
38618: LD_INT 35
38620: PUSH
38621: LD_INT 36
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: LIST
38628: LIST
38629: LIST
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: PUSH
38647: LD_INT 101
38649: PUSH
38650: LD_INT 102
38652: PUSH
38653: LD_INT 103
38655: PUSH
38656: LD_INT 106
38658: PUSH
38659: LD_INT 108
38661: PUSH
38662: LD_INT 112
38664: PUSH
38665: LD_INT 113
38667: PUSH
38668: LD_INT 114
38670: PUSH
38671: LD_INT 115
38673: PUSH
38674: LD_INT 116
38676: PUSH
38677: LD_INT 117
38679: PUSH
38680: LD_INT 118
38682: PUSH
38683: EMPTY
38684: LIST
38685: LIST
38686: LIST
38687: LIST
38688: LIST
38689: LIST
38690: LIST
38691: LIST
38692: LIST
38693: LIST
38694: LIST
38695: LIST
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: ST_TO_ADDR
38701: GO 38944
38703: LD_INT 19
38705: DOUBLE
38706: EQUAL
38707: IFTRUE 38711
38709: GO 38943
38711: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
38712: LD_ADDR_VAR 0 2
38716: PUSH
38717: LD_INT 1
38719: PUSH
38720: LD_INT 2
38722: PUSH
38723: LD_INT 3
38725: PUSH
38726: LD_INT 4
38728: PUSH
38729: LD_INT 5
38731: PUSH
38732: LD_INT 6
38734: PUSH
38735: LD_INT 7
38737: PUSH
38738: LD_INT 8
38740: PUSH
38741: LD_INT 9
38743: PUSH
38744: LD_INT 10
38746: PUSH
38747: LD_INT 11
38749: PUSH
38750: LD_INT 12
38752: PUSH
38753: LD_INT 13
38755: PUSH
38756: LD_INT 14
38758: PUSH
38759: LD_INT 15
38761: PUSH
38762: LD_INT 16
38764: PUSH
38765: LD_INT 17
38767: PUSH
38768: LD_INT 18
38770: PUSH
38771: LD_INT 19
38773: PUSH
38774: LD_INT 20
38776: PUSH
38777: LD_INT 21
38779: PUSH
38780: LD_INT 22
38782: PUSH
38783: LD_INT 23
38785: PUSH
38786: LD_INT 24
38788: PUSH
38789: LD_INT 25
38791: PUSH
38792: LD_INT 26
38794: PUSH
38795: LD_INT 27
38797: PUSH
38798: LD_INT 28
38800: PUSH
38801: LD_INT 29
38803: PUSH
38804: LD_INT 30
38806: PUSH
38807: LD_INT 31
38809: PUSH
38810: LD_INT 32
38812: PUSH
38813: LD_INT 33
38815: PUSH
38816: LD_INT 34
38818: PUSH
38819: LD_INT 35
38821: PUSH
38822: LD_INT 36
38824: PUSH
38825: EMPTY
38826: LIST
38827: LIST
38828: LIST
38829: LIST
38830: LIST
38831: LIST
38832: LIST
38833: LIST
38834: LIST
38835: LIST
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: PUSH
38863: LD_INT 101
38865: PUSH
38866: LD_INT 102
38868: PUSH
38869: LD_INT 103
38871: PUSH
38872: LD_INT 104
38874: PUSH
38875: LD_INT 105
38877: PUSH
38878: LD_INT 106
38880: PUSH
38881: LD_INT 107
38883: PUSH
38884: LD_INT 108
38886: PUSH
38887: LD_INT 109
38889: PUSH
38890: LD_INT 110
38892: PUSH
38893: LD_INT 111
38895: PUSH
38896: LD_INT 112
38898: PUSH
38899: LD_INT 113
38901: PUSH
38902: LD_INT 114
38904: PUSH
38905: LD_INT 115
38907: PUSH
38908: LD_INT 116
38910: PUSH
38911: LD_INT 117
38913: PUSH
38914: LD_INT 118
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: PUSH
38937: EMPTY
38938: LIST
38939: LIST
38940: ST_TO_ADDR
38941: GO 38944
38943: POP
// end else
38944: GO 39175
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
38946: LD_ADDR_VAR 0 2
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: LD_INT 2
38956: PUSH
38957: LD_INT 3
38959: PUSH
38960: LD_INT 4
38962: PUSH
38963: LD_INT 5
38965: PUSH
38966: LD_INT 6
38968: PUSH
38969: LD_INT 7
38971: PUSH
38972: LD_INT 8
38974: PUSH
38975: LD_INT 9
38977: PUSH
38978: LD_INT 10
38980: PUSH
38981: LD_INT 11
38983: PUSH
38984: LD_INT 12
38986: PUSH
38987: LD_INT 13
38989: PUSH
38990: LD_INT 14
38992: PUSH
38993: LD_INT 15
38995: PUSH
38996: LD_INT 16
38998: PUSH
38999: LD_INT 17
39001: PUSH
39002: LD_INT 18
39004: PUSH
39005: LD_INT 19
39007: PUSH
39008: LD_INT 20
39010: PUSH
39011: LD_INT 21
39013: PUSH
39014: LD_INT 22
39016: PUSH
39017: LD_INT 23
39019: PUSH
39020: LD_INT 24
39022: PUSH
39023: LD_INT 25
39025: PUSH
39026: LD_INT 26
39028: PUSH
39029: LD_INT 27
39031: PUSH
39032: LD_INT 28
39034: PUSH
39035: LD_INT 29
39037: PUSH
39038: LD_INT 30
39040: PUSH
39041: LD_INT 31
39043: PUSH
39044: LD_INT 32
39046: PUSH
39047: LD_INT 33
39049: PUSH
39050: LD_INT 34
39052: PUSH
39053: LD_INT 35
39055: PUSH
39056: LD_INT 36
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: LIST
39063: LIST
39064: LIST
39065: LIST
39066: LIST
39067: LIST
39068: LIST
39069: LIST
39070: LIST
39071: LIST
39072: LIST
39073: LIST
39074: LIST
39075: LIST
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: LIST
39089: LIST
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 101
39099: PUSH
39100: LD_INT 102
39102: PUSH
39103: LD_INT 103
39105: PUSH
39106: LD_INT 104
39108: PUSH
39109: LD_INT 105
39111: PUSH
39112: LD_INT 106
39114: PUSH
39115: LD_INT 107
39117: PUSH
39118: LD_INT 108
39120: PUSH
39121: LD_INT 109
39123: PUSH
39124: LD_INT 110
39126: PUSH
39127: LD_INT 111
39129: PUSH
39130: LD_INT 112
39132: PUSH
39133: LD_INT 113
39135: PUSH
39136: LD_INT 114
39138: PUSH
39139: LD_INT 115
39141: PUSH
39142: LD_INT 116
39144: PUSH
39145: LD_INT 117
39147: PUSH
39148: LD_INT 118
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: LIST
39155: LIST
39156: LIST
39157: LIST
39158: LIST
39159: LIST
39160: LIST
39161: LIST
39162: LIST
39163: LIST
39164: LIST
39165: LIST
39166: LIST
39167: LIST
39168: LIST
39169: LIST
39170: PUSH
39171: EMPTY
39172: LIST
39173: LIST
39174: ST_TO_ADDR
// if result then
39175: LD_VAR 0 2
39179: IFFALSE 39965
// begin normal :=  ;
39181: LD_ADDR_VAR 0 5
39185: PUSH
39186: LD_STRING 
39188: ST_TO_ADDR
// hardcore :=  ;
39189: LD_ADDR_VAR 0 6
39193: PUSH
39194: LD_STRING 
39196: ST_TO_ADDR
// active :=  ;
39197: LD_ADDR_VAR 0 7
39201: PUSH
39202: LD_STRING 
39204: ST_TO_ADDR
// for i = 1 to normalCounter do
39205: LD_ADDR_VAR 0 8
39209: PUSH
39210: DOUBLE
39211: LD_INT 1
39213: DEC
39214: ST_TO_ADDR
39215: LD_EXP 88
39219: PUSH
39220: FOR_TO
39221: IFFALSE 39322
// begin tmp := 0 ;
39223: LD_ADDR_VAR 0 3
39227: PUSH
39228: LD_STRING 0
39230: ST_TO_ADDR
// if result [ 1 ] then
39231: LD_VAR 0 2
39235: PUSH
39236: LD_INT 1
39238: ARRAY
39239: IFFALSE 39304
// if result [ 1 ] [ 1 ] = i then
39241: LD_VAR 0 2
39245: PUSH
39246: LD_INT 1
39248: ARRAY
39249: PUSH
39250: LD_INT 1
39252: ARRAY
39253: PUSH
39254: LD_VAR 0 8
39258: EQUAL
39259: IFFALSE 39304
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
39261: LD_ADDR_VAR 0 2
39265: PUSH
39266: LD_VAR 0 2
39270: PPUSH
39271: LD_INT 1
39273: PPUSH
39274: LD_VAR 0 2
39278: PUSH
39279: LD_INT 1
39281: ARRAY
39282: PPUSH
39283: LD_INT 1
39285: PPUSH
39286: CALL_OW 3
39290: PPUSH
39291: CALL_OW 1
39295: ST_TO_ADDR
// tmp := 1 ;
39296: LD_ADDR_VAR 0 3
39300: PUSH
39301: LD_STRING 1
39303: ST_TO_ADDR
// end ; normal := normal & tmp ;
39304: LD_ADDR_VAR 0 5
39308: PUSH
39309: LD_VAR 0 5
39313: PUSH
39314: LD_VAR 0 3
39318: STR
39319: ST_TO_ADDR
// end ;
39320: GO 39220
39322: POP
39323: POP
// for i = 1 to hardcoreCounter do
39324: LD_ADDR_VAR 0 8
39328: PUSH
39329: DOUBLE
39330: LD_INT 1
39332: DEC
39333: ST_TO_ADDR
39334: LD_EXP 89
39338: PUSH
39339: FOR_TO
39340: IFFALSE 39445
// begin tmp := 0 ;
39342: LD_ADDR_VAR 0 3
39346: PUSH
39347: LD_STRING 0
39349: ST_TO_ADDR
// if result [ 2 ] then
39350: LD_VAR 0 2
39354: PUSH
39355: LD_INT 2
39357: ARRAY
39358: IFFALSE 39427
// if result [ 2 ] [ 1 ] = 100 + i then
39360: LD_VAR 0 2
39364: PUSH
39365: LD_INT 2
39367: ARRAY
39368: PUSH
39369: LD_INT 1
39371: ARRAY
39372: PUSH
39373: LD_INT 100
39375: PUSH
39376: LD_VAR 0 8
39380: PLUS
39381: EQUAL
39382: IFFALSE 39427
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
39384: LD_ADDR_VAR 0 2
39388: PUSH
39389: LD_VAR 0 2
39393: PPUSH
39394: LD_INT 2
39396: PPUSH
39397: LD_VAR 0 2
39401: PUSH
39402: LD_INT 2
39404: ARRAY
39405: PPUSH
39406: LD_INT 1
39408: PPUSH
39409: CALL_OW 3
39413: PPUSH
39414: CALL_OW 1
39418: ST_TO_ADDR
// tmp := 1 ;
39419: LD_ADDR_VAR 0 3
39423: PUSH
39424: LD_STRING 1
39426: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
39427: LD_ADDR_VAR 0 6
39431: PUSH
39432: LD_VAR 0 6
39436: PUSH
39437: LD_VAR 0 3
39441: STR
39442: ST_TO_ADDR
// end ;
39443: GO 39339
39445: POP
39446: POP
// if isGameLoad then
39447: LD_VAR 0 1
39451: IFFALSE 39926
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
39453: LD_ADDR_VAR 0 4
39457: PUSH
39458: LD_EXP 92
39462: PUSH
39463: LD_EXP 91
39467: PUSH
39468: LD_EXP 93
39472: PUSH
39473: LD_EXP 90
39477: PUSH
39478: LD_EXP 94
39482: PUSH
39483: LD_EXP 95
39487: PUSH
39488: LD_EXP 96
39492: PUSH
39493: LD_EXP 97
39497: PUSH
39498: LD_EXP 98
39502: PUSH
39503: LD_EXP 99
39507: PUSH
39508: LD_EXP 100
39512: PUSH
39513: LD_EXP 101
39517: PUSH
39518: LD_EXP 102
39522: PUSH
39523: LD_EXP 103
39527: PUSH
39528: LD_EXP 111
39532: PUSH
39533: LD_EXP 112
39537: PUSH
39538: LD_EXP 113
39542: PUSH
39543: LD_EXP 114
39547: PUSH
39548: LD_EXP 116
39552: PUSH
39553: LD_EXP 117
39557: PUSH
39558: LD_EXP 118
39562: PUSH
39563: LD_EXP 121
39567: PUSH
39568: LD_EXP 123
39572: PUSH
39573: LD_EXP 124
39577: PUSH
39578: LD_EXP 125
39582: PUSH
39583: LD_EXP 127
39587: PUSH
39588: LD_EXP 128
39592: PUSH
39593: LD_EXP 131
39597: PUSH
39598: LD_EXP 132
39602: PUSH
39603: LD_EXP 133
39607: PUSH
39608: LD_EXP 134
39612: PUSH
39613: LD_EXP 135
39617: PUSH
39618: LD_EXP 136
39622: PUSH
39623: LD_EXP 137
39627: PUSH
39628: LD_EXP 138
39632: PUSH
39633: LD_EXP 139
39637: PUSH
39638: LD_EXP 104
39642: PUSH
39643: LD_EXP 105
39647: PUSH
39648: LD_EXP 108
39652: PUSH
39653: LD_EXP 109
39657: PUSH
39658: LD_EXP 110
39662: PUSH
39663: LD_EXP 106
39667: PUSH
39668: LD_EXP 107
39672: PUSH
39673: LD_EXP 115
39677: PUSH
39678: LD_EXP 119
39682: PUSH
39683: LD_EXP 120
39687: PUSH
39688: LD_EXP 122
39692: PUSH
39693: LD_EXP 126
39697: PUSH
39698: LD_EXP 129
39702: PUSH
39703: LD_EXP 130
39707: PUSH
39708: LD_EXP 140
39712: PUSH
39713: LD_EXP 141
39717: PUSH
39718: LD_EXP 142
39722: PUSH
39723: LD_EXP 143
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: LIST
39746: LIST
39747: LIST
39748: LIST
39749: LIST
39750: LIST
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: LIST
39783: ST_TO_ADDR
// tmp :=  ;
39784: LD_ADDR_VAR 0 3
39788: PUSH
39789: LD_STRING 
39791: ST_TO_ADDR
// for i = 1 to normalCounter do
39792: LD_ADDR_VAR 0 8
39796: PUSH
39797: DOUBLE
39798: LD_INT 1
39800: DEC
39801: ST_TO_ADDR
39802: LD_EXP 88
39806: PUSH
39807: FOR_TO
39808: IFFALSE 39844
// begin if flags [ i ] then
39810: LD_VAR 0 4
39814: PUSH
39815: LD_VAR 0 8
39819: ARRAY
39820: IFFALSE 39842
// tmp := tmp & i & ; ;
39822: LD_ADDR_VAR 0 3
39826: PUSH
39827: LD_VAR 0 3
39831: PUSH
39832: LD_VAR 0 8
39836: STR
39837: PUSH
39838: LD_STRING ;
39840: STR
39841: ST_TO_ADDR
// end ;
39842: GO 39807
39844: POP
39845: POP
// for i = 1 to hardcoreCounter do
39846: LD_ADDR_VAR 0 8
39850: PUSH
39851: DOUBLE
39852: LD_INT 1
39854: DEC
39855: ST_TO_ADDR
39856: LD_EXP 89
39860: PUSH
39861: FOR_TO
39862: IFFALSE 39908
// begin if flags [ normalCounter + i ] then
39864: LD_VAR 0 4
39868: PUSH
39869: LD_EXP 88
39873: PUSH
39874: LD_VAR 0 8
39878: PLUS
39879: ARRAY
39880: IFFALSE 39906
// tmp := tmp & ( 100 + i ) & ; ;
39882: LD_ADDR_VAR 0 3
39886: PUSH
39887: LD_VAR 0 3
39891: PUSH
39892: LD_INT 100
39894: PUSH
39895: LD_VAR 0 8
39899: PLUS
39900: STR
39901: PUSH
39902: LD_STRING ;
39904: STR
39905: ST_TO_ADDR
// end ;
39906: GO 39861
39908: POP
39909: POP
// if tmp then
39910: LD_VAR 0 3
39914: IFFALSE 39926
// active := tmp ;
39916: LD_ADDR_VAR 0 7
39920: PUSH
39921: LD_VAR 0 3
39925: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
39926: LD_STRING getStreamItemsFromMission("
39928: PUSH
39929: LD_VAR 0 5
39933: STR
39934: PUSH
39935: LD_STRING ","
39937: STR
39938: PUSH
39939: LD_VAR 0 6
39943: STR
39944: PUSH
39945: LD_STRING ","
39947: STR
39948: PUSH
39949: LD_VAR 0 7
39953: STR
39954: PUSH
39955: LD_STRING ")
39957: STR
39958: PPUSH
39959: CALL_OW 559
// end else
39963: GO 39972
// ToLua ( getStreamItemsFromMission("","","") ) ;
39965: LD_STRING getStreamItemsFromMission("","","")
39967: PPUSH
39968: CALL_OW 559
// end ;
39972: LD_VAR 0 2
39976: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
39977: LD_EXP 87
39981: PUSH
39982: LD_EXP 92
39986: AND
39987: IFFALSE 40111
39989: GO 39991
39991: DISABLE
39992: LD_INT 0
39994: PPUSH
39995: PPUSH
// begin enable ;
39996: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
39997: LD_ADDR_VAR 0 2
40001: PUSH
40002: LD_INT 22
40004: PUSH
40005: LD_OWVAR 2
40009: PUSH
40010: EMPTY
40011: LIST
40012: LIST
40013: PUSH
40014: LD_INT 2
40016: PUSH
40017: LD_INT 34
40019: PUSH
40020: LD_INT 7
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 34
40029: PUSH
40030: LD_INT 45
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 34
40039: PUSH
40040: LD_INT 28
40042: PUSH
40043: EMPTY
40044: LIST
40045: LIST
40046: PUSH
40047: LD_INT 34
40049: PUSH
40050: LD_INT 47
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: EMPTY
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: LIST
40063: PUSH
40064: EMPTY
40065: LIST
40066: LIST
40067: PPUSH
40068: CALL_OW 69
40072: ST_TO_ADDR
// if not tmp then
40073: LD_VAR 0 2
40077: NOT
40078: IFFALSE 40082
// exit ;
40080: GO 40111
// for i in tmp do
40082: LD_ADDR_VAR 0 1
40086: PUSH
40087: LD_VAR 0 2
40091: PUSH
40092: FOR_IN
40093: IFFALSE 40109
// begin SetLives ( i , 0 ) ;
40095: LD_VAR 0 1
40099: PPUSH
40100: LD_INT 0
40102: PPUSH
40103: CALL_OW 234
// end ;
40107: GO 40092
40109: POP
40110: POP
// end ;
40111: PPOPN 2
40113: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
40114: LD_EXP 87
40118: PUSH
40119: LD_EXP 93
40123: AND
40124: IFFALSE 40208
40126: GO 40128
40128: DISABLE
40129: LD_INT 0
40131: PPUSH
40132: PPUSH
// begin enable ;
40133: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
40134: LD_ADDR_VAR 0 2
40138: PUSH
40139: LD_INT 22
40141: PUSH
40142: LD_OWVAR 2
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 32
40153: PUSH
40154: LD_INT 3
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PPUSH
40165: CALL_OW 69
40169: ST_TO_ADDR
// if not tmp then
40170: LD_VAR 0 2
40174: NOT
40175: IFFALSE 40179
// exit ;
40177: GO 40208
// for i in tmp do
40179: LD_ADDR_VAR 0 1
40183: PUSH
40184: LD_VAR 0 2
40188: PUSH
40189: FOR_IN
40190: IFFALSE 40206
// begin SetLives ( i , 0 ) ;
40192: LD_VAR 0 1
40196: PPUSH
40197: LD_INT 0
40199: PPUSH
40200: CALL_OW 234
// end ;
40204: GO 40189
40206: POP
40207: POP
// end ;
40208: PPOPN 2
40210: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
40211: LD_EXP 87
40215: PUSH
40216: LD_EXP 90
40220: AND
40221: IFFALSE 40314
40223: GO 40225
40225: DISABLE
40226: LD_INT 0
40228: PPUSH
// begin enable ;
40229: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
40230: LD_ADDR_VAR 0 1
40234: PUSH
40235: LD_INT 22
40237: PUSH
40238: LD_OWVAR 2
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 2
40249: PUSH
40250: LD_INT 25
40252: PUSH
40253: LD_INT 5
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 25
40262: PUSH
40263: LD_INT 9
40265: PUSH
40266: EMPTY
40267: LIST
40268: LIST
40269: PUSH
40270: LD_INT 25
40272: PUSH
40273: LD_INT 8
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: EMPTY
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: PUSH
40286: EMPTY
40287: LIST
40288: LIST
40289: PPUSH
40290: CALL_OW 69
40294: PUSH
40295: FOR_IN
40296: IFFALSE 40312
// begin SetClass ( i , 1 ) ;
40298: LD_VAR 0 1
40302: PPUSH
40303: LD_INT 1
40305: PPUSH
40306: CALL_OW 336
// end ;
40310: GO 40295
40312: POP
40313: POP
// end ;
40314: PPOPN 1
40316: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
40317: LD_EXP 87
40321: PUSH
40322: LD_EXP 91
40326: AND
40327: PUSH
40328: LD_OWVAR 65
40332: PUSH
40333: LD_INT 7
40335: LESS
40336: AND
40337: IFFALSE 40351
40339: GO 40341
40341: DISABLE
// begin enable ;
40342: ENABLE
// game_speed := 7 ;
40343: LD_ADDR_OWVAR 65
40347: PUSH
40348: LD_INT 7
40350: ST_TO_ADDR
// end ;
40351: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
40352: LD_EXP 87
40356: PUSH
40357: LD_EXP 94
40361: AND
40362: IFFALSE 40564
40364: GO 40366
40366: DISABLE
40367: LD_INT 0
40369: PPUSH
40370: PPUSH
40371: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
40372: LD_ADDR_VAR 0 3
40376: PUSH
40377: LD_INT 81
40379: PUSH
40380: LD_OWVAR 2
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 21
40391: PUSH
40392: LD_INT 1
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PPUSH
40403: CALL_OW 69
40407: ST_TO_ADDR
// if not tmp then
40408: LD_VAR 0 3
40412: NOT
40413: IFFALSE 40417
// exit ;
40415: GO 40564
// if tmp > 5 then
40417: LD_VAR 0 3
40421: PUSH
40422: LD_INT 5
40424: GREATER
40425: IFFALSE 40437
// k := 5 else
40427: LD_ADDR_VAR 0 2
40431: PUSH
40432: LD_INT 5
40434: ST_TO_ADDR
40435: GO 40447
// k := tmp ;
40437: LD_ADDR_VAR 0 2
40441: PUSH
40442: LD_VAR 0 3
40446: ST_TO_ADDR
// for i := 1 to k do
40447: LD_ADDR_VAR 0 1
40451: PUSH
40452: DOUBLE
40453: LD_INT 1
40455: DEC
40456: ST_TO_ADDR
40457: LD_VAR 0 2
40461: PUSH
40462: FOR_TO
40463: IFFALSE 40562
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
40465: LD_VAR 0 3
40469: PUSH
40470: LD_VAR 0 1
40474: ARRAY
40475: PPUSH
40476: LD_VAR 0 1
40480: PUSH
40481: LD_INT 4
40483: MOD
40484: PUSH
40485: LD_INT 1
40487: PLUS
40488: PPUSH
40489: CALL_OW 259
40493: PUSH
40494: LD_INT 10
40496: LESS
40497: IFFALSE 40560
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
40499: LD_VAR 0 3
40503: PUSH
40504: LD_VAR 0 1
40508: ARRAY
40509: PPUSH
40510: LD_VAR 0 1
40514: PUSH
40515: LD_INT 4
40517: MOD
40518: PUSH
40519: LD_INT 1
40521: PLUS
40522: PPUSH
40523: LD_VAR 0 3
40527: PUSH
40528: LD_VAR 0 1
40532: ARRAY
40533: PPUSH
40534: LD_VAR 0 1
40538: PUSH
40539: LD_INT 4
40541: MOD
40542: PUSH
40543: LD_INT 1
40545: PLUS
40546: PPUSH
40547: CALL_OW 259
40551: PUSH
40552: LD_INT 1
40554: PLUS
40555: PPUSH
40556: CALL_OW 237
40560: GO 40462
40562: POP
40563: POP
// end ;
40564: PPOPN 3
40566: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
40567: LD_EXP 87
40571: PUSH
40572: LD_EXP 95
40576: AND
40577: IFFALSE 40597
40579: GO 40581
40581: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
40582: LD_INT 4
40584: PPUSH
40585: LD_OWVAR 2
40589: PPUSH
40590: LD_INT 0
40592: PPUSH
40593: CALL_OW 324
40597: END
// every 0 0$1 trigger StreamModeActive and sShovel do
40598: LD_EXP 87
40602: PUSH
40603: LD_EXP 124
40607: AND
40608: IFFALSE 40628
40610: GO 40612
40612: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
40613: LD_INT 19
40615: PPUSH
40616: LD_OWVAR 2
40620: PPUSH
40621: LD_INT 0
40623: PPUSH
40624: CALL_OW 324
40628: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
40629: LD_EXP 87
40633: PUSH
40634: LD_EXP 96
40638: AND
40639: IFFALSE 40741
40641: GO 40643
40643: DISABLE
40644: LD_INT 0
40646: PPUSH
40647: PPUSH
// begin enable ;
40648: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
40649: LD_ADDR_VAR 0 2
40653: PUSH
40654: LD_INT 22
40656: PUSH
40657: LD_OWVAR 2
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 2
40668: PUSH
40669: LD_INT 34
40671: PUSH
40672: LD_INT 11
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 34
40681: PUSH
40682: LD_INT 30
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: LIST
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PPUSH
40698: CALL_OW 69
40702: ST_TO_ADDR
// if not tmp then
40703: LD_VAR 0 2
40707: NOT
40708: IFFALSE 40712
// exit ;
40710: GO 40741
// for i in tmp do
40712: LD_ADDR_VAR 0 1
40716: PUSH
40717: LD_VAR 0 2
40721: PUSH
40722: FOR_IN
40723: IFFALSE 40739
// begin SetLives ( i , 0 ) ;
40725: LD_VAR 0 1
40729: PPUSH
40730: LD_INT 0
40732: PPUSH
40733: CALL_OW 234
// end ;
40737: GO 40722
40739: POP
40740: POP
// end ;
40741: PPOPN 2
40743: END
// every 0 0$1 trigger StreamModeActive and sBunker do
40744: LD_EXP 87
40748: PUSH
40749: LD_EXP 97
40753: AND
40754: IFFALSE 40774
40756: GO 40758
40758: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
40759: LD_INT 32
40761: PPUSH
40762: LD_OWVAR 2
40766: PPUSH
40767: LD_INT 0
40769: PPUSH
40770: CALL_OW 324
40774: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
40775: LD_EXP 87
40779: PUSH
40780: LD_EXP 98
40784: AND
40785: IFFALSE 40966
40787: GO 40789
40789: DISABLE
40790: LD_INT 0
40792: PPUSH
40793: PPUSH
40794: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
40795: LD_ADDR_VAR 0 2
40799: PUSH
40800: LD_INT 22
40802: PUSH
40803: LD_OWVAR 2
40807: PUSH
40808: EMPTY
40809: LIST
40810: LIST
40811: PUSH
40812: LD_INT 33
40814: PUSH
40815: LD_INT 3
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PPUSH
40826: CALL_OW 69
40830: ST_TO_ADDR
// if not tmp then
40831: LD_VAR 0 2
40835: NOT
40836: IFFALSE 40840
// exit ;
40838: GO 40966
// side := 0 ;
40840: LD_ADDR_VAR 0 3
40844: PUSH
40845: LD_INT 0
40847: ST_TO_ADDR
// for i := 1 to 8 do
40848: LD_ADDR_VAR 0 1
40852: PUSH
40853: DOUBLE
40854: LD_INT 1
40856: DEC
40857: ST_TO_ADDR
40858: LD_INT 8
40860: PUSH
40861: FOR_TO
40862: IFFALSE 40910
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
40864: LD_OWVAR 2
40868: PUSH
40869: LD_VAR 0 1
40873: NONEQUAL
40874: PUSH
40875: LD_OWVAR 2
40879: PPUSH
40880: LD_VAR 0 1
40884: PPUSH
40885: CALL_OW 81
40889: PUSH
40890: LD_INT 2
40892: EQUAL
40893: AND
40894: IFFALSE 40908
// begin side := i ;
40896: LD_ADDR_VAR 0 3
40900: PUSH
40901: LD_VAR 0 1
40905: ST_TO_ADDR
// break ;
40906: GO 40910
// end ;
40908: GO 40861
40910: POP
40911: POP
// if not side then
40912: LD_VAR 0 3
40916: NOT
40917: IFFALSE 40921
// exit ;
40919: GO 40966
// for i := 1 to tmp do
40921: LD_ADDR_VAR 0 1
40925: PUSH
40926: DOUBLE
40927: LD_INT 1
40929: DEC
40930: ST_TO_ADDR
40931: LD_VAR 0 2
40935: PUSH
40936: FOR_TO
40937: IFFALSE 40964
// if Prob ( 60 ) then
40939: LD_INT 60
40941: PPUSH
40942: CALL_OW 13
40946: IFFALSE 40962
// SetSide ( i , side ) ;
40948: LD_VAR 0 1
40952: PPUSH
40953: LD_VAR 0 3
40957: PPUSH
40958: CALL_OW 235
40962: GO 40936
40964: POP
40965: POP
// end ;
40966: PPOPN 3
40968: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
40969: LD_EXP 87
40973: PUSH
40974: LD_EXP 100
40978: AND
40979: IFFALSE 41098
40981: GO 40983
40983: DISABLE
40984: LD_INT 0
40986: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
40987: LD_ADDR_VAR 0 1
40991: PUSH
40992: LD_INT 22
40994: PUSH
40995: LD_OWVAR 2
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 21
41006: PUSH
41007: LD_INT 1
41009: PUSH
41010: EMPTY
41011: LIST
41012: LIST
41013: PUSH
41014: LD_INT 3
41016: PUSH
41017: LD_INT 23
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: EMPTY
41032: LIST
41033: LIST
41034: LIST
41035: PPUSH
41036: CALL_OW 69
41040: PUSH
41041: FOR_IN
41042: IFFALSE 41096
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
41044: LD_VAR 0 1
41048: PPUSH
41049: CALL_OW 257
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: LD_INT 2
41059: PUSH
41060: LD_INT 3
41062: PUSH
41063: LD_INT 4
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: IN
41072: IFFALSE 41094
// SetClass ( un , rand ( 1 , 4 ) ) ;
41074: LD_VAR 0 1
41078: PPUSH
41079: LD_INT 1
41081: PPUSH
41082: LD_INT 4
41084: PPUSH
41085: CALL_OW 12
41089: PPUSH
41090: CALL_OW 336
41094: GO 41041
41096: POP
41097: POP
// end ;
41098: PPOPN 1
41100: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
41101: LD_EXP 87
41105: PUSH
41106: LD_EXP 99
41110: AND
41111: IFFALSE 41190
41113: GO 41115
41115: DISABLE
41116: LD_INT 0
41118: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41119: LD_ADDR_VAR 0 1
41123: PUSH
41124: LD_INT 22
41126: PUSH
41127: LD_OWVAR 2
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 21
41138: PUSH
41139: LD_INT 3
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PPUSH
41150: CALL_OW 69
41154: ST_TO_ADDR
// if not tmp then
41155: LD_VAR 0 1
41159: NOT
41160: IFFALSE 41164
// exit ;
41162: GO 41190
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
41164: LD_VAR 0 1
41168: PUSH
41169: LD_INT 1
41171: PPUSH
41172: LD_VAR 0 1
41176: PPUSH
41177: CALL_OW 12
41181: ARRAY
41182: PPUSH
41183: LD_INT 100
41185: PPUSH
41186: CALL_OW 234
// end ;
41190: PPOPN 1
41192: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
41193: LD_EXP 87
41197: PUSH
41198: LD_EXP 101
41202: AND
41203: IFFALSE 41301
41205: GO 41207
41207: DISABLE
41208: LD_INT 0
41210: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
41211: LD_ADDR_VAR 0 1
41215: PUSH
41216: LD_INT 22
41218: PUSH
41219: LD_OWVAR 2
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 21
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PPUSH
41242: CALL_OW 69
41246: ST_TO_ADDR
// if not tmp then
41247: LD_VAR 0 1
41251: NOT
41252: IFFALSE 41256
// exit ;
41254: GO 41301
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
41256: LD_VAR 0 1
41260: PUSH
41261: LD_INT 1
41263: PPUSH
41264: LD_VAR 0 1
41268: PPUSH
41269: CALL_OW 12
41273: ARRAY
41274: PPUSH
41275: LD_INT 1
41277: PPUSH
41278: LD_INT 4
41280: PPUSH
41281: CALL_OW 12
41285: PPUSH
41286: LD_INT 3000
41288: PPUSH
41289: LD_INT 9000
41291: PPUSH
41292: CALL_OW 12
41296: PPUSH
41297: CALL_OW 492
// end ;
41301: PPOPN 1
41303: END
// every 0 0$1 trigger StreamModeActive and sDepot do
41304: LD_EXP 87
41308: PUSH
41309: LD_EXP 102
41313: AND
41314: IFFALSE 41334
41316: GO 41318
41318: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
41319: LD_INT 1
41321: PPUSH
41322: LD_OWVAR 2
41326: PPUSH
41327: LD_INT 0
41329: PPUSH
41330: CALL_OW 324
41334: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
41335: LD_EXP 87
41339: PUSH
41340: LD_EXP 103
41344: AND
41345: IFFALSE 41428
41347: GO 41349
41349: DISABLE
41350: LD_INT 0
41352: PPUSH
41353: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
41354: LD_ADDR_VAR 0 2
41358: PUSH
41359: LD_INT 22
41361: PUSH
41362: LD_OWVAR 2
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 21
41373: PUSH
41374: LD_INT 3
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PPUSH
41385: CALL_OW 69
41389: ST_TO_ADDR
// if not tmp then
41390: LD_VAR 0 2
41394: NOT
41395: IFFALSE 41399
// exit ;
41397: GO 41428
// for i in tmp do
41399: LD_ADDR_VAR 0 1
41403: PUSH
41404: LD_VAR 0 2
41408: PUSH
41409: FOR_IN
41410: IFFALSE 41426
// SetBLevel ( i , 10 ) ;
41412: LD_VAR 0 1
41416: PPUSH
41417: LD_INT 10
41419: PPUSH
41420: CALL_OW 241
41424: GO 41409
41426: POP
41427: POP
// end ;
41428: PPOPN 2
41430: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
41431: LD_EXP 87
41435: PUSH
41436: LD_EXP 104
41440: AND
41441: IFFALSE 41552
41443: GO 41445
41445: DISABLE
41446: LD_INT 0
41448: PPUSH
41449: PPUSH
41450: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41451: LD_ADDR_VAR 0 3
41455: PUSH
41456: LD_INT 22
41458: PUSH
41459: LD_OWVAR 2
41463: PUSH
41464: EMPTY
41465: LIST
41466: LIST
41467: PUSH
41468: LD_INT 25
41470: PUSH
41471: LD_INT 1
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PPUSH
41482: CALL_OW 69
41486: ST_TO_ADDR
// if not tmp then
41487: LD_VAR 0 3
41491: NOT
41492: IFFALSE 41496
// exit ;
41494: GO 41552
// un := tmp [ rand ( 1 , tmp ) ] ;
41496: LD_ADDR_VAR 0 2
41500: PUSH
41501: LD_VAR 0 3
41505: PUSH
41506: LD_INT 1
41508: PPUSH
41509: LD_VAR 0 3
41513: PPUSH
41514: CALL_OW 12
41518: ARRAY
41519: ST_TO_ADDR
// if Crawls ( un ) then
41520: LD_VAR 0 2
41524: PPUSH
41525: CALL_OW 318
41529: IFFALSE 41540
// ComWalk ( un ) ;
41531: LD_VAR 0 2
41535: PPUSH
41536: CALL_OW 138
// SetClass ( un , class_sniper ) ;
41540: LD_VAR 0 2
41544: PPUSH
41545: LD_INT 5
41547: PPUSH
41548: CALL_OW 336
// end ;
41552: PPOPN 3
41554: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
41555: LD_EXP 87
41559: PUSH
41560: LD_EXP 105
41564: AND
41565: PUSH
41566: LD_OWVAR 67
41570: PUSH
41571: LD_INT 4
41573: LESS
41574: AND
41575: IFFALSE 41594
41577: GO 41579
41579: DISABLE
// begin Difficulty := Difficulty + 1 ;
41580: LD_ADDR_OWVAR 67
41584: PUSH
41585: LD_OWVAR 67
41589: PUSH
41590: LD_INT 1
41592: PLUS
41593: ST_TO_ADDR
// end ;
41594: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
41595: LD_EXP 87
41599: PUSH
41600: LD_EXP 106
41604: AND
41605: IFFALSE 41708
41607: GO 41609
41609: DISABLE
41610: LD_INT 0
41612: PPUSH
// begin for i := 1 to 5 do
41613: LD_ADDR_VAR 0 1
41617: PUSH
41618: DOUBLE
41619: LD_INT 1
41621: DEC
41622: ST_TO_ADDR
41623: LD_INT 5
41625: PUSH
41626: FOR_TO
41627: IFFALSE 41706
// begin uc_nation := nation_nature ;
41629: LD_ADDR_OWVAR 21
41633: PUSH
41634: LD_INT 0
41636: ST_TO_ADDR
// uc_side := 0 ;
41637: LD_ADDR_OWVAR 20
41641: PUSH
41642: LD_INT 0
41644: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
41645: LD_ADDR_OWVAR 29
41649: PUSH
41650: LD_INT 12
41652: PUSH
41653: LD_INT 12
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: ST_TO_ADDR
// hc_agressivity := 20 ;
41660: LD_ADDR_OWVAR 35
41664: PUSH
41665: LD_INT 20
41667: ST_TO_ADDR
// hc_class := class_tiger ;
41668: LD_ADDR_OWVAR 28
41672: PUSH
41673: LD_INT 14
41675: ST_TO_ADDR
// hc_gallery :=  ;
41676: LD_ADDR_OWVAR 33
41680: PUSH
41681: LD_STRING 
41683: ST_TO_ADDR
// hc_name :=  ;
41684: LD_ADDR_OWVAR 26
41688: PUSH
41689: LD_STRING 
41691: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
41692: CALL_OW 44
41696: PPUSH
41697: LD_INT 0
41699: PPUSH
41700: CALL_OW 51
// end ;
41704: GO 41626
41706: POP
41707: POP
// end ;
41708: PPOPN 1
41710: END
// every 0 0$1 trigger StreamModeActive and sBomb do
41711: LD_EXP 87
41715: PUSH
41716: LD_EXP 107
41720: AND
41721: IFFALSE 41730
41723: GO 41725
41725: DISABLE
// StreamSibBomb ;
41726: CALL 41731 0 0
41730: END
// export function StreamSibBomb ; var i , x , y ; begin
41731: LD_INT 0
41733: PPUSH
41734: PPUSH
41735: PPUSH
41736: PPUSH
// result := false ;
41737: LD_ADDR_VAR 0 1
41741: PUSH
41742: LD_INT 0
41744: ST_TO_ADDR
// for i := 1 to 16 do
41745: LD_ADDR_VAR 0 2
41749: PUSH
41750: DOUBLE
41751: LD_INT 1
41753: DEC
41754: ST_TO_ADDR
41755: LD_INT 16
41757: PUSH
41758: FOR_TO
41759: IFFALSE 41958
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
41761: LD_ADDR_VAR 0 3
41765: PUSH
41766: LD_INT 10
41768: PUSH
41769: LD_INT 20
41771: PUSH
41772: LD_INT 30
41774: PUSH
41775: LD_INT 40
41777: PUSH
41778: LD_INT 50
41780: PUSH
41781: LD_INT 60
41783: PUSH
41784: LD_INT 70
41786: PUSH
41787: LD_INT 80
41789: PUSH
41790: LD_INT 90
41792: PUSH
41793: LD_INT 100
41795: PUSH
41796: LD_INT 110
41798: PUSH
41799: LD_INT 120
41801: PUSH
41802: LD_INT 130
41804: PUSH
41805: LD_INT 140
41807: PUSH
41808: LD_INT 150
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: PUSH
41828: LD_INT 1
41830: PPUSH
41831: LD_INT 15
41833: PPUSH
41834: CALL_OW 12
41838: ARRAY
41839: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
41840: LD_ADDR_VAR 0 4
41844: PUSH
41845: LD_INT 10
41847: PUSH
41848: LD_INT 20
41850: PUSH
41851: LD_INT 30
41853: PUSH
41854: LD_INT 40
41856: PUSH
41857: LD_INT 50
41859: PUSH
41860: LD_INT 60
41862: PUSH
41863: LD_INT 70
41865: PUSH
41866: LD_INT 80
41868: PUSH
41869: LD_INT 90
41871: PUSH
41872: LD_INT 100
41874: PUSH
41875: LD_INT 110
41877: PUSH
41878: LD_INT 120
41880: PUSH
41881: LD_INT 130
41883: PUSH
41884: LD_INT 140
41886: PUSH
41887: LD_INT 150
41889: PUSH
41890: EMPTY
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 1
41909: PPUSH
41910: LD_INT 15
41912: PPUSH
41913: CALL_OW 12
41917: ARRAY
41918: ST_TO_ADDR
// if ValidHex ( x , y ) then
41919: LD_VAR 0 3
41923: PPUSH
41924: LD_VAR 0 4
41928: PPUSH
41929: CALL_OW 488
41933: IFFALSE 41956
// begin result := [ x , y ] ;
41935: LD_ADDR_VAR 0 1
41939: PUSH
41940: LD_VAR 0 3
41944: PUSH
41945: LD_VAR 0 4
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: ST_TO_ADDR
// break ;
41954: GO 41958
// end ; end ;
41956: GO 41758
41958: POP
41959: POP
// if result then
41960: LD_VAR 0 1
41964: IFFALSE 42024
// begin ToLua ( playSibBomb() ) ;
41966: LD_STRING playSibBomb()
41968: PPUSH
41969: CALL_OW 559
// wait ( 0 0$14 ) ;
41973: LD_INT 490
41975: PPUSH
41976: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
41980: LD_VAR 0 1
41984: PUSH
41985: LD_INT 1
41987: ARRAY
41988: PPUSH
41989: LD_VAR 0 1
41993: PUSH
41994: LD_INT 2
41996: ARRAY
41997: PPUSH
41998: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
42002: LD_VAR 0 1
42006: PUSH
42007: LD_INT 1
42009: ARRAY
42010: PPUSH
42011: LD_VAR 0 1
42015: PUSH
42016: LD_INT 2
42018: ARRAY
42019: PPUSH
42020: CALL_OW 429
// end ; end ;
42024: LD_VAR 0 1
42028: RET
// every 0 0$1 trigger StreamModeActive and sReset do
42029: LD_EXP 87
42033: PUSH
42034: LD_EXP 109
42038: AND
42039: IFFALSE 42051
42041: GO 42043
42043: DISABLE
// YouLost (  ) ;
42044: LD_STRING 
42046: PPUSH
42047: CALL_OW 104
42051: END
// every 0 0$1 trigger StreamModeActive and sFog do
42052: LD_EXP 87
42056: PUSH
42057: LD_EXP 108
42061: AND
42062: IFFALSE 42076
42064: GO 42066
42066: DISABLE
// FogOff ( your_side ) ;
42067: LD_OWVAR 2
42071: PPUSH
42072: CALL_OW 344
42076: END
// every 0 0$1 trigger StreamModeActive and sSun do
42077: LD_EXP 87
42081: PUSH
42082: LD_EXP 110
42086: AND
42087: IFFALSE 42115
42089: GO 42091
42091: DISABLE
// begin solar_recharge_percent := 0 ;
42092: LD_ADDR_OWVAR 79
42096: PUSH
42097: LD_INT 0
42099: ST_TO_ADDR
// wait ( 5 5$00 ) ;
42100: LD_INT 10500
42102: PPUSH
42103: CALL_OW 67
// solar_recharge_percent := 100 ;
42107: LD_ADDR_OWVAR 79
42111: PUSH
42112: LD_INT 100
42114: ST_TO_ADDR
// end ;
42115: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
42116: LD_EXP 87
42120: PUSH
42121: LD_EXP 111
42125: AND
42126: IFFALSE 42365
42128: GO 42130
42130: DISABLE
42131: LD_INT 0
42133: PPUSH
42134: PPUSH
42135: PPUSH
// begin tmp := [ ] ;
42136: LD_ADDR_VAR 0 3
42140: PUSH
42141: EMPTY
42142: ST_TO_ADDR
// for i := 1 to 6 do
42143: LD_ADDR_VAR 0 1
42147: PUSH
42148: DOUBLE
42149: LD_INT 1
42151: DEC
42152: ST_TO_ADDR
42153: LD_INT 6
42155: PUSH
42156: FOR_TO
42157: IFFALSE 42262
// begin uc_nation := nation_nature ;
42159: LD_ADDR_OWVAR 21
42163: PUSH
42164: LD_INT 0
42166: ST_TO_ADDR
// uc_side := 0 ;
42167: LD_ADDR_OWVAR 20
42171: PUSH
42172: LD_INT 0
42174: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
42175: LD_ADDR_OWVAR 29
42179: PUSH
42180: LD_INT 12
42182: PUSH
42183: LD_INT 12
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: ST_TO_ADDR
// hc_agressivity := 20 ;
42190: LD_ADDR_OWVAR 35
42194: PUSH
42195: LD_INT 20
42197: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
42198: LD_ADDR_OWVAR 28
42202: PUSH
42203: LD_INT 17
42205: ST_TO_ADDR
// hc_gallery :=  ;
42206: LD_ADDR_OWVAR 33
42210: PUSH
42211: LD_STRING 
42213: ST_TO_ADDR
// hc_name :=  ;
42214: LD_ADDR_OWVAR 26
42218: PUSH
42219: LD_STRING 
42221: ST_TO_ADDR
// un := CreateHuman ;
42222: LD_ADDR_VAR 0 2
42226: PUSH
42227: CALL_OW 44
42231: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
42232: LD_VAR 0 2
42236: PPUSH
42237: LD_INT 1
42239: PPUSH
42240: CALL_OW 51
// tmp := tmp ^ un ;
42244: LD_ADDR_VAR 0 3
42248: PUSH
42249: LD_VAR 0 3
42253: PUSH
42254: LD_VAR 0 2
42258: ADD
42259: ST_TO_ADDR
// end ;
42260: GO 42156
42262: POP
42263: POP
// repeat wait ( 0 0$1 ) ;
42264: LD_INT 35
42266: PPUSH
42267: CALL_OW 67
// for un in tmp do
42271: LD_ADDR_VAR 0 2
42275: PUSH
42276: LD_VAR 0 3
42280: PUSH
42281: FOR_IN
42282: IFFALSE 42356
// begin if IsDead ( un ) then
42284: LD_VAR 0 2
42288: PPUSH
42289: CALL_OW 301
42293: IFFALSE 42313
// begin tmp := tmp diff un ;
42295: LD_ADDR_VAR 0 3
42299: PUSH
42300: LD_VAR 0 3
42304: PUSH
42305: LD_VAR 0 2
42309: DIFF
42310: ST_TO_ADDR
// continue ;
42311: GO 42281
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
42313: LD_VAR 0 2
42317: PPUSH
42318: LD_INT 3
42320: PUSH
42321: LD_INT 22
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PPUSH
42335: CALL_OW 69
42339: PPUSH
42340: LD_VAR 0 2
42344: PPUSH
42345: CALL_OW 74
42349: PPUSH
42350: CALL_OW 115
// end ;
42354: GO 42281
42356: POP
42357: POP
// until not tmp ;
42358: LD_VAR 0 3
42362: NOT
42363: IFFALSE 42264
// end ;
42365: PPOPN 3
42367: END
// every 0 0$1 trigger StreamModeActive and sTroll do
42368: LD_EXP 87
42372: PUSH
42373: LD_EXP 112
42377: AND
42378: IFFALSE 42432
42380: GO 42382
42382: DISABLE
// begin ToLua ( displayTroll(); ) ;
42383: LD_STRING displayTroll();
42385: PPUSH
42386: CALL_OW 559
// wait ( 3 3$00 ) ;
42390: LD_INT 6300
42392: PPUSH
42393: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42397: LD_STRING hideTroll();
42399: PPUSH
42400: CALL_OW 559
// wait ( 1 1$00 ) ;
42404: LD_INT 2100
42406: PPUSH
42407: CALL_OW 67
// ToLua ( displayTroll(); ) ;
42411: LD_STRING displayTroll();
42413: PPUSH
42414: CALL_OW 559
// wait ( 1 1$00 ) ;
42418: LD_INT 2100
42420: PPUSH
42421: CALL_OW 67
// ToLua ( hideTroll(); ) ;
42425: LD_STRING hideTroll();
42427: PPUSH
42428: CALL_OW 559
// end ;
42432: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
42433: LD_EXP 87
42437: PUSH
42438: LD_EXP 113
42442: AND
42443: IFFALSE 42506
42445: GO 42447
42447: DISABLE
42448: LD_INT 0
42450: PPUSH
// begin p := 0 ;
42451: LD_ADDR_VAR 0 1
42455: PUSH
42456: LD_INT 0
42458: ST_TO_ADDR
// repeat game_speed := 1 ;
42459: LD_ADDR_OWVAR 65
42463: PUSH
42464: LD_INT 1
42466: ST_TO_ADDR
// wait ( 0 0$1 ) ;
42467: LD_INT 35
42469: PPUSH
42470: CALL_OW 67
// p := p + 1 ;
42474: LD_ADDR_VAR 0 1
42478: PUSH
42479: LD_VAR 0 1
42483: PUSH
42484: LD_INT 1
42486: PLUS
42487: ST_TO_ADDR
// until p >= 60 ;
42488: LD_VAR 0 1
42492: PUSH
42493: LD_INT 60
42495: GREATEREQUAL
42496: IFFALSE 42459
// game_speed := 4 ;
42498: LD_ADDR_OWVAR 65
42502: PUSH
42503: LD_INT 4
42505: ST_TO_ADDR
// end ;
42506: PPOPN 1
42508: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
42509: LD_EXP 87
42513: PUSH
42514: LD_EXP 114
42518: AND
42519: IFFALSE 42665
42521: GO 42523
42523: DISABLE
42524: LD_INT 0
42526: PPUSH
42527: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
42528: LD_ADDR_VAR 0 1
42532: PUSH
42533: LD_INT 22
42535: PUSH
42536: LD_OWVAR 2
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 2
42547: PUSH
42548: LD_INT 30
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 30
42560: PUSH
42561: LD_INT 1
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: EMPTY
42569: LIST
42570: LIST
42571: LIST
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PPUSH
42577: CALL_OW 69
42581: ST_TO_ADDR
// if not depot then
42582: LD_VAR 0 1
42586: NOT
42587: IFFALSE 42591
// exit ;
42589: GO 42665
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
42591: LD_ADDR_VAR 0 2
42595: PUSH
42596: LD_VAR 0 1
42600: PUSH
42601: LD_INT 1
42603: PPUSH
42604: LD_VAR 0 1
42608: PPUSH
42609: CALL_OW 12
42613: ARRAY
42614: PPUSH
42615: CALL_OW 274
42619: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
42620: LD_VAR 0 2
42624: PPUSH
42625: LD_INT 1
42627: PPUSH
42628: LD_INT 0
42630: PPUSH
42631: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
42635: LD_VAR 0 2
42639: PPUSH
42640: LD_INT 2
42642: PPUSH
42643: LD_INT 0
42645: PPUSH
42646: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
42650: LD_VAR 0 2
42654: PPUSH
42655: LD_INT 3
42657: PPUSH
42658: LD_INT 0
42660: PPUSH
42661: CALL_OW 277
// end ;
42665: PPOPN 2
42667: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
42668: LD_EXP 87
42672: PUSH
42673: LD_EXP 115
42677: AND
42678: IFFALSE 42775
42680: GO 42682
42682: DISABLE
42683: LD_INT 0
42685: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
42686: LD_ADDR_VAR 0 1
42690: PUSH
42691: LD_INT 22
42693: PUSH
42694: LD_OWVAR 2
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 21
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: EMPTY
42710: LIST
42711: LIST
42712: PUSH
42713: LD_INT 3
42715: PUSH
42716: LD_INT 23
42718: PUSH
42719: LD_INT 0
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: EMPTY
42731: LIST
42732: LIST
42733: LIST
42734: PPUSH
42735: CALL_OW 69
42739: ST_TO_ADDR
// if not tmp then
42740: LD_VAR 0 1
42744: NOT
42745: IFFALSE 42749
// exit ;
42747: GO 42775
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
42749: LD_VAR 0 1
42753: PUSH
42754: LD_INT 1
42756: PPUSH
42757: LD_VAR 0 1
42761: PPUSH
42762: CALL_OW 12
42766: ARRAY
42767: PPUSH
42768: LD_INT 200
42770: PPUSH
42771: CALL_OW 234
// end ;
42775: PPOPN 1
42777: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
42778: LD_EXP 87
42782: PUSH
42783: LD_EXP 116
42787: AND
42788: IFFALSE 42867
42790: GO 42792
42792: DISABLE
42793: LD_INT 0
42795: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
42796: LD_ADDR_VAR 0 1
42800: PUSH
42801: LD_INT 22
42803: PUSH
42804: LD_OWVAR 2
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 21
42815: PUSH
42816: LD_INT 2
42818: PUSH
42819: EMPTY
42820: LIST
42821: LIST
42822: PUSH
42823: EMPTY
42824: LIST
42825: LIST
42826: PPUSH
42827: CALL_OW 69
42831: ST_TO_ADDR
// if not tmp then
42832: LD_VAR 0 1
42836: NOT
42837: IFFALSE 42841
// exit ;
42839: GO 42867
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
42841: LD_VAR 0 1
42845: PUSH
42846: LD_INT 1
42848: PPUSH
42849: LD_VAR 0 1
42853: PPUSH
42854: CALL_OW 12
42858: ARRAY
42859: PPUSH
42860: LD_INT 60
42862: PPUSH
42863: CALL_OW 234
// end ;
42867: PPOPN 1
42869: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
42870: LD_EXP 87
42874: PUSH
42875: LD_EXP 117
42879: AND
42880: IFFALSE 42979
42882: GO 42884
42884: DISABLE
42885: LD_INT 0
42887: PPUSH
42888: PPUSH
// begin enable ;
42889: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
42890: LD_ADDR_VAR 0 1
42894: PUSH
42895: LD_INT 22
42897: PUSH
42898: LD_OWVAR 2
42902: PUSH
42903: EMPTY
42904: LIST
42905: LIST
42906: PUSH
42907: LD_INT 61
42909: PUSH
42910: EMPTY
42911: LIST
42912: PUSH
42913: LD_INT 33
42915: PUSH
42916: LD_INT 2
42918: PUSH
42919: EMPTY
42920: LIST
42921: LIST
42922: PUSH
42923: EMPTY
42924: LIST
42925: LIST
42926: LIST
42927: PPUSH
42928: CALL_OW 69
42932: ST_TO_ADDR
// if not tmp then
42933: LD_VAR 0 1
42937: NOT
42938: IFFALSE 42942
// exit ;
42940: GO 42979
// for i in tmp do
42942: LD_ADDR_VAR 0 2
42946: PUSH
42947: LD_VAR 0 1
42951: PUSH
42952: FOR_IN
42953: IFFALSE 42977
// if IsControledBy ( i ) then
42955: LD_VAR 0 2
42959: PPUSH
42960: CALL_OW 312
42964: IFFALSE 42975
// ComUnlink ( i ) ;
42966: LD_VAR 0 2
42970: PPUSH
42971: CALL_OW 136
42975: GO 42952
42977: POP
42978: POP
// end ;
42979: PPOPN 2
42981: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
42982: LD_EXP 87
42986: PUSH
42987: LD_EXP 118
42991: AND
42992: IFFALSE 43132
42994: GO 42996
42996: DISABLE
42997: LD_INT 0
42999: PPUSH
43000: PPUSH
// begin ToLua ( displayPowell(); ) ;
43001: LD_STRING displayPowell();
43003: PPUSH
43004: CALL_OW 559
// uc_side := 0 ;
43008: LD_ADDR_OWVAR 20
43012: PUSH
43013: LD_INT 0
43015: ST_TO_ADDR
// uc_nation := 2 ;
43016: LD_ADDR_OWVAR 21
43020: PUSH
43021: LD_INT 2
43023: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
43024: LD_ADDR_OWVAR 37
43028: PUSH
43029: LD_INT 14
43031: ST_TO_ADDR
// vc_engine := engine_siberite ;
43032: LD_ADDR_OWVAR 39
43036: PUSH
43037: LD_INT 3
43039: ST_TO_ADDR
// vc_control := control_apeman ;
43040: LD_ADDR_OWVAR 38
43044: PUSH
43045: LD_INT 5
43047: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
43048: LD_ADDR_OWVAR 40
43052: PUSH
43053: LD_INT 29
43055: ST_TO_ADDR
// un := CreateVehicle ;
43056: LD_ADDR_VAR 0 2
43060: PUSH
43061: CALL_OW 45
43065: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43066: LD_VAR 0 2
43070: PPUSH
43071: LD_INT 1
43073: PPUSH
43074: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43078: LD_INT 35
43080: PPUSH
43081: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43085: LD_VAR 0 2
43089: PPUSH
43090: LD_INT 22
43092: PUSH
43093: LD_OWVAR 2
43097: PUSH
43098: EMPTY
43099: LIST
43100: LIST
43101: PPUSH
43102: CALL_OW 69
43106: PPUSH
43107: LD_VAR 0 2
43111: PPUSH
43112: CALL_OW 74
43116: PPUSH
43117: CALL_OW 115
// until IsDead ( un ) ;
43121: LD_VAR 0 2
43125: PPUSH
43126: CALL_OW 301
43130: IFFALSE 43078
// end ;
43132: PPOPN 2
43134: END
// every 0 0$1 trigger StreamModeActive and sStu do
43135: LD_EXP 87
43139: PUSH
43140: LD_EXP 126
43144: AND
43145: IFFALSE 43161
43147: GO 43149
43149: DISABLE
// begin ToLua ( displayStucuk(); ) ;
43150: LD_STRING displayStucuk();
43152: PPUSH
43153: CALL_OW 559
// ResetFog ;
43157: CALL_OW 335
// end ;
43161: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
43162: LD_EXP 87
43166: PUSH
43167: LD_EXP 119
43171: AND
43172: IFFALSE 43313
43174: GO 43176
43176: DISABLE
43177: LD_INT 0
43179: PPUSH
43180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43181: LD_ADDR_VAR 0 2
43185: PUSH
43186: LD_INT 22
43188: PUSH
43189: LD_OWVAR 2
43193: PUSH
43194: EMPTY
43195: LIST
43196: LIST
43197: PUSH
43198: LD_INT 21
43200: PUSH
43201: LD_INT 1
43203: PUSH
43204: EMPTY
43205: LIST
43206: LIST
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PPUSH
43212: CALL_OW 69
43216: ST_TO_ADDR
// if not tmp then
43217: LD_VAR 0 2
43221: NOT
43222: IFFALSE 43226
// exit ;
43224: GO 43313
// un := tmp [ rand ( 1 , tmp ) ] ;
43226: LD_ADDR_VAR 0 1
43230: PUSH
43231: LD_VAR 0 2
43235: PUSH
43236: LD_INT 1
43238: PPUSH
43239: LD_VAR 0 2
43243: PPUSH
43244: CALL_OW 12
43248: ARRAY
43249: ST_TO_ADDR
// SetSide ( un , 0 ) ;
43250: LD_VAR 0 1
43254: PPUSH
43255: LD_INT 0
43257: PPUSH
43258: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
43262: LD_VAR 0 1
43266: PPUSH
43267: LD_OWVAR 3
43271: PUSH
43272: LD_VAR 0 1
43276: DIFF
43277: PPUSH
43278: LD_VAR 0 1
43282: PPUSH
43283: CALL_OW 74
43287: PPUSH
43288: CALL_OW 115
// wait ( 0 0$20 ) ;
43292: LD_INT 700
43294: PPUSH
43295: CALL_OW 67
// SetSide ( un , your_side ) ;
43299: LD_VAR 0 1
43303: PPUSH
43304: LD_OWVAR 2
43308: PPUSH
43309: CALL_OW 235
// end ;
43313: PPOPN 2
43315: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
43316: LD_EXP 87
43320: PUSH
43321: LD_EXP 120
43325: AND
43326: IFFALSE 43432
43328: GO 43330
43330: DISABLE
43331: LD_INT 0
43333: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43334: LD_ADDR_VAR 0 1
43338: PUSH
43339: LD_INT 22
43341: PUSH
43342: LD_OWVAR 2
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 2
43353: PUSH
43354: LD_INT 30
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 30
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: LIST
43378: PUSH
43379: EMPTY
43380: LIST
43381: LIST
43382: PPUSH
43383: CALL_OW 69
43387: ST_TO_ADDR
// if not depot then
43388: LD_VAR 0 1
43392: NOT
43393: IFFALSE 43397
// exit ;
43395: GO 43432
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
43397: LD_VAR 0 1
43401: PUSH
43402: LD_INT 1
43404: ARRAY
43405: PPUSH
43406: CALL_OW 250
43410: PPUSH
43411: LD_VAR 0 1
43415: PUSH
43416: LD_INT 1
43418: ARRAY
43419: PPUSH
43420: CALL_OW 251
43424: PPUSH
43425: LD_INT 70
43427: PPUSH
43428: CALL_OW 495
// end ;
43432: PPOPN 1
43434: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
43435: LD_EXP 87
43439: PUSH
43440: LD_EXP 121
43444: AND
43445: IFFALSE 43656
43447: GO 43449
43449: DISABLE
43450: LD_INT 0
43452: PPUSH
43453: PPUSH
43454: PPUSH
43455: PPUSH
43456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
43457: LD_ADDR_VAR 0 5
43461: PUSH
43462: LD_INT 22
43464: PUSH
43465: LD_OWVAR 2
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 21
43476: PUSH
43477: LD_INT 1
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PPUSH
43488: CALL_OW 69
43492: ST_TO_ADDR
// if not tmp then
43493: LD_VAR 0 5
43497: NOT
43498: IFFALSE 43502
// exit ;
43500: GO 43656
// for i in tmp do
43502: LD_ADDR_VAR 0 1
43506: PUSH
43507: LD_VAR 0 5
43511: PUSH
43512: FOR_IN
43513: IFFALSE 43654
// begin d := rand ( 0 , 5 ) ;
43515: LD_ADDR_VAR 0 4
43519: PUSH
43520: LD_INT 0
43522: PPUSH
43523: LD_INT 5
43525: PPUSH
43526: CALL_OW 12
43530: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
43531: LD_ADDR_VAR 0 2
43535: PUSH
43536: LD_VAR 0 1
43540: PPUSH
43541: CALL_OW 250
43545: PPUSH
43546: LD_VAR 0 4
43550: PPUSH
43551: LD_INT 3
43553: PPUSH
43554: LD_INT 12
43556: PPUSH
43557: CALL_OW 12
43561: PPUSH
43562: CALL_OW 272
43566: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
43567: LD_ADDR_VAR 0 3
43571: PUSH
43572: LD_VAR 0 1
43576: PPUSH
43577: CALL_OW 251
43581: PPUSH
43582: LD_VAR 0 4
43586: PPUSH
43587: LD_INT 3
43589: PPUSH
43590: LD_INT 12
43592: PPUSH
43593: CALL_OW 12
43597: PPUSH
43598: CALL_OW 273
43602: ST_TO_ADDR
// if ValidHex ( x , y ) then
43603: LD_VAR 0 2
43607: PPUSH
43608: LD_VAR 0 3
43612: PPUSH
43613: CALL_OW 488
43617: IFFALSE 43652
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
43619: LD_VAR 0 1
43623: PPUSH
43624: LD_VAR 0 2
43628: PPUSH
43629: LD_VAR 0 3
43633: PPUSH
43634: LD_INT 3
43636: PPUSH
43637: LD_INT 6
43639: PPUSH
43640: CALL_OW 12
43644: PPUSH
43645: LD_INT 1
43647: PPUSH
43648: CALL_OW 483
// end ;
43652: GO 43512
43654: POP
43655: POP
// end ;
43656: PPOPN 5
43658: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
43659: LD_EXP 87
43663: PUSH
43664: LD_EXP 122
43668: AND
43669: IFFALSE 43763
43671: GO 43673
43673: DISABLE
43674: LD_INT 0
43676: PPUSH
43677: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
43678: LD_ADDR_VAR 0 2
43682: PUSH
43683: LD_INT 22
43685: PUSH
43686: LD_OWVAR 2
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 32
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 21
43707: PUSH
43708: LD_INT 2
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: EMPTY
43716: LIST
43717: LIST
43718: LIST
43719: PPUSH
43720: CALL_OW 69
43724: ST_TO_ADDR
// if not tmp then
43725: LD_VAR 0 2
43729: NOT
43730: IFFALSE 43734
// exit ;
43732: GO 43763
// for i in tmp do
43734: LD_ADDR_VAR 0 1
43738: PUSH
43739: LD_VAR 0 2
43743: PUSH
43744: FOR_IN
43745: IFFALSE 43761
// SetFuel ( i , 0 ) ;
43747: LD_VAR 0 1
43751: PPUSH
43752: LD_INT 0
43754: PPUSH
43755: CALL_OW 240
43759: GO 43744
43761: POP
43762: POP
// end ;
43763: PPOPN 2
43765: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
43766: LD_EXP 87
43770: PUSH
43771: LD_EXP 123
43775: AND
43776: IFFALSE 43842
43778: GO 43780
43780: DISABLE
43781: LD_INT 0
43783: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
43784: LD_ADDR_VAR 0 1
43788: PUSH
43789: LD_INT 22
43791: PUSH
43792: LD_OWVAR 2
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 30
43803: PUSH
43804: LD_INT 29
43806: PUSH
43807: EMPTY
43808: LIST
43809: LIST
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PPUSH
43815: CALL_OW 69
43819: ST_TO_ADDR
// if not tmp then
43820: LD_VAR 0 1
43824: NOT
43825: IFFALSE 43829
// exit ;
43827: GO 43842
// DestroyUnit ( tmp [ 1 ] ) ;
43829: LD_VAR 0 1
43833: PUSH
43834: LD_INT 1
43836: ARRAY
43837: PPUSH
43838: CALL_OW 65
// end ;
43842: PPOPN 1
43844: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
43845: LD_EXP 87
43849: PUSH
43850: LD_EXP 125
43854: AND
43855: IFFALSE 43984
43857: GO 43859
43859: DISABLE
43860: LD_INT 0
43862: PPUSH
// begin uc_side := 0 ;
43863: LD_ADDR_OWVAR 20
43867: PUSH
43868: LD_INT 0
43870: ST_TO_ADDR
// uc_nation := nation_arabian ;
43871: LD_ADDR_OWVAR 21
43875: PUSH
43876: LD_INT 2
43878: ST_TO_ADDR
// hc_gallery :=  ;
43879: LD_ADDR_OWVAR 33
43883: PUSH
43884: LD_STRING 
43886: ST_TO_ADDR
// hc_name :=  ;
43887: LD_ADDR_OWVAR 26
43891: PUSH
43892: LD_STRING 
43894: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
43895: LD_INT 1
43897: PPUSH
43898: LD_INT 11
43900: PPUSH
43901: LD_INT 10
43903: PPUSH
43904: CALL_OW 380
// un := CreateHuman ;
43908: LD_ADDR_VAR 0 1
43912: PUSH
43913: CALL_OW 44
43917: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43918: LD_VAR 0 1
43922: PPUSH
43923: LD_INT 1
43925: PPUSH
43926: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
43930: LD_INT 35
43932: PPUSH
43933: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
43937: LD_VAR 0 1
43941: PPUSH
43942: LD_INT 22
43944: PUSH
43945: LD_OWVAR 2
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: PPUSH
43954: CALL_OW 69
43958: PPUSH
43959: LD_VAR 0 1
43963: PPUSH
43964: CALL_OW 74
43968: PPUSH
43969: CALL_OW 115
// until IsDead ( un ) ;
43973: LD_VAR 0 1
43977: PPUSH
43978: CALL_OW 301
43982: IFFALSE 43930
// end ;
43984: PPOPN 1
43986: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
43987: LD_EXP 87
43991: PUSH
43992: LD_EXP 127
43996: AND
43997: IFFALSE 44009
43999: GO 44001
44001: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
44002: LD_STRING earthquake(getX(game), 0, 32)
44004: PPUSH
44005: CALL_OW 559
44009: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
44010: LD_EXP 87
44014: PUSH
44015: LD_EXP 128
44019: AND
44020: IFFALSE 44111
44022: GO 44024
44024: DISABLE
44025: LD_INT 0
44027: PPUSH
// begin enable ;
44028: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
44029: LD_ADDR_VAR 0 1
44033: PUSH
44034: LD_INT 22
44036: PUSH
44037: LD_OWVAR 2
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 21
44048: PUSH
44049: LD_INT 2
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 33
44058: PUSH
44059: LD_INT 3
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: LIST
44070: PPUSH
44071: CALL_OW 69
44075: ST_TO_ADDR
// if not tmp then
44076: LD_VAR 0 1
44080: NOT
44081: IFFALSE 44085
// exit ;
44083: GO 44111
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
44085: LD_VAR 0 1
44089: PUSH
44090: LD_INT 1
44092: PPUSH
44093: LD_VAR 0 1
44097: PPUSH
44098: CALL_OW 12
44102: ARRAY
44103: PPUSH
44104: LD_INT 1
44106: PPUSH
44107: CALL_OW 234
// end ;
44111: PPOPN 1
44113: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
44114: LD_EXP 87
44118: PUSH
44119: LD_EXP 129
44123: AND
44124: IFFALSE 44265
44126: GO 44128
44128: DISABLE
44129: LD_INT 0
44131: PPUSH
44132: PPUSH
44133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44134: LD_ADDR_VAR 0 3
44138: PUSH
44139: LD_INT 22
44141: PUSH
44142: LD_OWVAR 2
44146: PUSH
44147: EMPTY
44148: LIST
44149: LIST
44150: PUSH
44151: LD_INT 25
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: EMPTY
44158: LIST
44159: LIST
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PPUSH
44165: CALL_OW 69
44169: ST_TO_ADDR
// if not tmp then
44170: LD_VAR 0 3
44174: NOT
44175: IFFALSE 44179
// exit ;
44177: GO 44265
// un := tmp [ rand ( 1 , tmp ) ] ;
44179: LD_ADDR_VAR 0 2
44183: PUSH
44184: LD_VAR 0 3
44188: PUSH
44189: LD_INT 1
44191: PPUSH
44192: LD_VAR 0 3
44196: PPUSH
44197: CALL_OW 12
44201: ARRAY
44202: ST_TO_ADDR
// if Crawls ( un ) then
44203: LD_VAR 0 2
44207: PPUSH
44208: CALL_OW 318
44212: IFFALSE 44223
// ComWalk ( un ) ;
44214: LD_VAR 0 2
44218: PPUSH
44219: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
44223: LD_VAR 0 2
44227: PPUSH
44228: LD_INT 9
44230: PPUSH
44231: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
44235: LD_INT 28
44237: PPUSH
44238: LD_OWVAR 2
44242: PPUSH
44243: LD_INT 2
44245: PPUSH
44246: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
44250: LD_INT 29
44252: PPUSH
44253: LD_OWVAR 2
44257: PPUSH
44258: LD_INT 2
44260: PPUSH
44261: CALL_OW 322
// end ;
44265: PPOPN 3
44267: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
44268: LD_EXP 87
44272: PUSH
44273: LD_EXP 130
44277: AND
44278: IFFALSE 44389
44280: GO 44282
44282: DISABLE
44283: LD_INT 0
44285: PPUSH
44286: PPUSH
44287: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
44288: LD_ADDR_VAR 0 3
44292: PUSH
44293: LD_INT 22
44295: PUSH
44296: LD_OWVAR 2
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 25
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PPUSH
44319: CALL_OW 69
44323: ST_TO_ADDR
// if not tmp then
44324: LD_VAR 0 3
44328: NOT
44329: IFFALSE 44333
// exit ;
44331: GO 44389
// un := tmp [ rand ( 1 , tmp ) ] ;
44333: LD_ADDR_VAR 0 2
44337: PUSH
44338: LD_VAR 0 3
44342: PUSH
44343: LD_INT 1
44345: PPUSH
44346: LD_VAR 0 3
44350: PPUSH
44351: CALL_OW 12
44355: ARRAY
44356: ST_TO_ADDR
// if Crawls ( un ) then
44357: LD_VAR 0 2
44361: PPUSH
44362: CALL_OW 318
44366: IFFALSE 44377
// ComWalk ( un ) ;
44368: LD_VAR 0 2
44372: PPUSH
44373: CALL_OW 138
// SetClass ( un , class_mortar ) ;
44377: LD_VAR 0 2
44381: PPUSH
44382: LD_INT 8
44384: PPUSH
44385: CALL_OW 336
// end ;
44389: PPOPN 3
44391: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
44392: LD_EXP 87
44396: PUSH
44397: LD_EXP 131
44401: AND
44402: IFFALSE 44546
44404: GO 44406
44406: DISABLE
44407: LD_INT 0
44409: PPUSH
44410: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
44411: LD_ADDR_VAR 0 2
44415: PUSH
44416: LD_INT 22
44418: PUSH
44419: LD_OWVAR 2
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: LD_INT 21
44430: PUSH
44431: LD_INT 2
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 2
44440: PUSH
44441: LD_INT 34
44443: PUSH
44444: LD_INT 12
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 34
44453: PUSH
44454: LD_INT 51
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: PUSH
44461: LD_INT 34
44463: PUSH
44464: LD_INT 32
44466: PUSH
44467: EMPTY
44468: LIST
44469: LIST
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: LIST
44475: LIST
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: LIST
44481: PPUSH
44482: CALL_OW 69
44486: ST_TO_ADDR
// if not tmp then
44487: LD_VAR 0 2
44491: NOT
44492: IFFALSE 44496
// exit ;
44494: GO 44546
// for i in tmp do
44496: LD_ADDR_VAR 0 1
44500: PUSH
44501: LD_VAR 0 2
44505: PUSH
44506: FOR_IN
44507: IFFALSE 44544
// if GetCargo ( i , mat_artifact ) = 0 then
44509: LD_VAR 0 1
44513: PPUSH
44514: LD_INT 4
44516: PPUSH
44517: CALL_OW 289
44521: PUSH
44522: LD_INT 0
44524: EQUAL
44525: IFFALSE 44542
// SetCargo ( i , mat_siberit , 100 ) ;
44527: LD_VAR 0 1
44531: PPUSH
44532: LD_INT 3
44534: PPUSH
44535: LD_INT 100
44537: PPUSH
44538: CALL_OW 290
44542: GO 44506
44544: POP
44545: POP
// end ;
44546: PPOPN 2
44548: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
44549: LD_EXP 87
44553: PUSH
44554: LD_EXP 132
44558: AND
44559: IFFALSE 44742
44561: GO 44563
44563: DISABLE
44564: LD_INT 0
44566: PPUSH
44567: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
44568: LD_ADDR_VAR 0 2
44572: PUSH
44573: LD_INT 22
44575: PUSH
44576: LD_OWVAR 2
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PPUSH
44585: CALL_OW 69
44589: ST_TO_ADDR
// if not tmp then
44590: LD_VAR 0 2
44594: NOT
44595: IFFALSE 44599
// exit ;
44597: GO 44742
// for i := 1 to 2 do
44599: LD_ADDR_VAR 0 1
44603: PUSH
44604: DOUBLE
44605: LD_INT 1
44607: DEC
44608: ST_TO_ADDR
44609: LD_INT 2
44611: PUSH
44612: FOR_TO
44613: IFFALSE 44740
// begin uc_side := your_side ;
44615: LD_ADDR_OWVAR 20
44619: PUSH
44620: LD_OWVAR 2
44624: ST_TO_ADDR
// uc_nation := nation_american ;
44625: LD_ADDR_OWVAR 21
44629: PUSH
44630: LD_INT 1
44632: ST_TO_ADDR
// vc_chassis := us_morphling ;
44633: LD_ADDR_OWVAR 37
44637: PUSH
44638: LD_INT 5
44640: ST_TO_ADDR
// vc_engine := engine_siberite ;
44641: LD_ADDR_OWVAR 39
44645: PUSH
44646: LD_INT 3
44648: ST_TO_ADDR
// vc_control := control_computer ;
44649: LD_ADDR_OWVAR 38
44653: PUSH
44654: LD_INT 3
44656: ST_TO_ADDR
// vc_weapon := us_double_laser ;
44657: LD_ADDR_OWVAR 40
44661: PUSH
44662: LD_INT 10
44664: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
44665: LD_VAR 0 2
44669: PUSH
44670: LD_INT 1
44672: ARRAY
44673: PPUSH
44674: CALL_OW 310
44678: NOT
44679: IFFALSE 44726
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
44681: CALL_OW 45
44685: PPUSH
44686: LD_VAR 0 2
44690: PUSH
44691: LD_INT 1
44693: ARRAY
44694: PPUSH
44695: CALL_OW 250
44699: PPUSH
44700: LD_VAR 0 2
44704: PUSH
44705: LD_INT 1
44707: ARRAY
44708: PPUSH
44709: CALL_OW 251
44713: PPUSH
44714: LD_INT 12
44716: PPUSH
44717: LD_INT 1
44719: PPUSH
44720: CALL_OW 50
44724: GO 44738
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
44726: CALL_OW 45
44730: PPUSH
44731: LD_INT 1
44733: PPUSH
44734: CALL_OW 51
// end ;
44738: GO 44612
44740: POP
44741: POP
// end ;
44742: PPOPN 2
44744: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
44745: LD_EXP 87
44749: PUSH
44750: LD_EXP 133
44754: AND
44755: IFFALSE 44977
44757: GO 44759
44759: DISABLE
44760: LD_INT 0
44762: PPUSH
44763: PPUSH
44764: PPUSH
44765: PPUSH
44766: PPUSH
44767: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
44768: LD_ADDR_VAR 0 6
44772: PUSH
44773: LD_INT 22
44775: PUSH
44776: LD_OWVAR 2
44780: PUSH
44781: EMPTY
44782: LIST
44783: LIST
44784: PUSH
44785: LD_INT 21
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 3
44797: PUSH
44798: LD_INT 23
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: LIST
44816: PPUSH
44817: CALL_OW 69
44821: ST_TO_ADDR
// if not tmp then
44822: LD_VAR 0 6
44826: NOT
44827: IFFALSE 44831
// exit ;
44829: GO 44977
// s1 := rand ( 1 , 4 ) ;
44831: LD_ADDR_VAR 0 2
44835: PUSH
44836: LD_INT 1
44838: PPUSH
44839: LD_INT 4
44841: PPUSH
44842: CALL_OW 12
44846: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
44847: LD_ADDR_VAR 0 4
44851: PUSH
44852: LD_VAR 0 6
44856: PUSH
44857: LD_INT 1
44859: ARRAY
44860: PPUSH
44861: LD_VAR 0 2
44865: PPUSH
44866: CALL_OW 259
44870: ST_TO_ADDR
// if s1 = 1 then
44871: LD_VAR 0 2
44875: PUSH
44876: LD_INT 1
44878: EQUAL
44879: IFFALSE 44899
// s2 := rand ( 2 , 4 ) else
44881: LD_ADDR_VAR 0 3
44885: PUSH
44886: LD_INT 2
44888: PPUSH
44889: LD_INT 4
44891: PPUSH
44892: CALL_OW 12
44896: ST_TO_ADDR
44897: GO 44907
// s2 := 1 ;
44899: LD_ADDR_VAR 0 3
44903: PUSH
44904: LD_INT 1
44906: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
44907: LD_ADDR_VAR 0 5
44911: PUSH
44912: LD_VAR 0 6
44916: PUSH
44917: LD_INT 1
44919: ARRAY
44920: PPUSH
44921: LD_VAR 0 3
44925: PPUSH
44926: CALL_OW 259
44930: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
44931: LD_VAR 0 6
44935: PUSH
44936: LD_INT 1
44938: ARRAY
44939: PPUSH
44940: LD_VAR 0 2
44944: PPUSH
44945: LD_VAR 0 5
44949: PPUSH
44950: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
44954: LD_VAR 0 6
44958: PUSH
44959: LD_INT 1
44961: ARRAY
44962: PPUSH
44963: LD_VAR 0 3
44967: PPUSH
44968: LD_VAR 0 4
44972: PPUSH
44973: CALL_OW 237
// end ;
44977: PPOPN 6
44979: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
44980: LD_EXP 87
44984: PUSH
44985: LD_EXP 134
44989: AND
44990: IFFALSE 45069
44992: GO 44994
44994: DISABLE
44995: LD_INT 0
44997: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
44998: LD_ADDR_VAR 0 1
45002: PUSH
45003: LD_INT 22
45005: PUSH
45006: LD_OWVAR 2
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 30
45017: PUSH
45018: LD_INT 3
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PPUSH
45029: CALL_OW 69
45033: ST_TO_ADDR
// if not tmp then
45034: LD_VAR 0 1
45038: NOT
45039: IFFALSE 45043
// exit ;
45041: GO 45069
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
45043: LD_VAR 0 1
45047: PUSH
45048: LD_INT 1
45050: PPUSH
45051: LD_VAR 0 1
45055: PPUSH
45056: CALL_OW 12
45060: ARRAY
45061: PPUSH
45062: LD_INT 1
45064: PPUSH
45065: CALL_OW 234
// end ;
45069: PPOPN 1
45071: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
45072: LD_EXP 87
45076: PUSH
45077: LD_EXP 135
45081: AND
45082: IFFALSE 45194
45084: GO 45086
45086: DISABLE
45087: LD_INT 0
45089: PPUSH
45090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
45091: LD_ADDR_VAR 0 2
45095: PUSH
45096: LD_INT 22
45098: PUSH
45099: LD_OWVAR 2
45103: PUSH
45104: EMPTY
45105: LIST
45106: LIST
45107: PUSH
45108: LD_INT 2
45110: PUSH
45111: LD_INT 30
45113: PUSH
45114: LD_INT 27
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 30
45123: PUSH
45124: LD_INT 26
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 30
45133: PUSH
45134: LD_INT 28
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: EMPTY
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PPUSH
45151: CALL_OW 69
45155: ST_TO_ADDR
// if not tmp then
45156: LD_VAR 0 2
45160: NOT
45161: IFFALSE 45165
// exit ;
45163: GO 45194
// for i in tmp do
45165: LD_ADDR_VAR 0 1
45169: PUSH
45170: LD_VAR 0 2
45174: PUSH
45175: FOR_IN
45176: IFFALSE 45192
// SetLives ( i , 1 ) ;
45178: LD_VAR 0 1
45182: PPUSH
45183: LD_INT 1
45185: PPUSH
45186: CALL_OW 234
45190: GO 45175
45192: POP
45193: POP
// end ;
45194: PPOPN 2
45196: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
45197: LD_EXP 87
45201: PUSH
45202: LD_EXP 136
45206: AND
45207: IFFALSE 45494
45209: GO 45211
45211: DISABLE
45212: LD_INT 0
45214: PPUSH
45215: PPUSH
45216: PPUSH
// begin i := rand ( 1 , 7 ) ;
45217: LD_ADDR_VAR 0 1
45221: PUSH
45222: LD_INT 1
45224: PPUSH
45225: LD_INT 7
45227: PPUSH
45228: CALL_OW 12
45232: ST_TO_ADDR
// case i of 1 :
45233: LD_VAR 0 1
45237: PUSH
45238: LD_INT 1
45240: DOUBLE
45241: EQUAL
45242: IFTRUE 45246
45244: GO 45256
45246: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
45247: LD_STRING earthquake(getX(game), 0, 32)
45249: PPUSH
45250: CALL_OW 559
45254: GO 45494
45256: LD_INT 2
45258: DOUBLE
45259: EQUAL
45260: IFTRUE 45264
45262: GO 45278
45264: POP
// begin ToLua ( displayStucuk(); ) ;
45265: LD_STRING displayStucuk();
45267: PPUSH
45268: CALL_OW 559
// ResetFog ;
45272: CALL_OW 335
// end ; 3 :
45276: GO 45494
45278: LD_INT 3
45280: DOUBLE
45281: EQUAL
45282: IFTRUE 45286
45284: GO 45390
45286: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
45287: LD_ADDR_VAR 0 2
45291: PUSH
45292: LD_INT 22
45294: PUSH
45295: LD_OWVAR 2
45299: PUSH
45300: EMPTY
45301: LIST
45302: LIST
45303: PUSH
45304: LD_INT 25
45306: PUSH
45307: LD_INT 1
45309: PUSH
45310: EMPTY
45311: LIST
45312: LIST
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PPUSH
45318: CALL_OW 69
45322: ST_TO_ADDR
// if not tmp then
45323: LD_VAR 0 2
45327: NOT
45328: IFFALSE 45332
// exit ;
45330: GO 45494
// un := tmp [ rand ( 1 , tmp ) ] ;
45332: LD_ADDR_VAR 0 3
45336: PUSH
45337: LD_VAR 0 2
45341: PUSH
45342: LD_INT 1
45344: PPUSH
45345: LD_VAR 0 2
45349: PPUSH
45350: CALL_OW 12
45354: ARRAY
45355: ST_TO_ADDR
// if Crawls ( un ) then
45356: LD_VAR 0 3
45360: PPUSH
45361: CALL_OW 318
45365: IFFALSE 45376
// ComWalk ( un ) ;
45367: LD_VAR 0 3
45371: PPUSH
45372: CALL_OW 138
// SetClass ( un , class_mortar ) ;
45376: LD_VAR 0 3
45380: PPUSH
45381: LD_INT 8
45383: PPUSH
45384: CALL_OW 336
// end ; 4 :
45388: GO 45494
45390: LD_INT 4
45392: DOUBLE
45393: EQUAL
45394: IFTRUE 45398
45396: GO 45472
45398: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
45399: LD_ADDR_VAR 0 2
45403: PUSH
45404: LD_INT 22
45406: PUSH
45407: LD_OWVAR 2
45411: PUSH
45412: EMPTY
45413: LIST
45414: LIST
45415: PUSH
45416: LD_INT 30
45418: PUSH
45419: LD_INT 29
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PPUSH
45430: CALL_OW 69
45434: ST_TO_ADDR
// if not tmp then
45435: LD_VAR 0 2
45439: NOT
45440: IFFALSE 45444
// exit ;
45442: GO 45494
// CenterNowOnUnits ( tmp [ 1 ] ) ;
45444: LD_VAR 0 2
45448: PUSH
45449: LD_INT 1
45451: ARRAY
45452: PPUSH
45453: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
45457: LD_VAR 0 2
45461: PUSH
45462: LD_INT 1
45464: ARRAY
45465: PPUSH
45466: CALL_OW 65
// end ; 5 .. 7 :
45470: GO 45494
45472: LD_INT 5
45474: DOUBLE
45475: GREATEREQUAL
45476: IFFALSE 45484
45478: LD_INT 7
45480: DOUBLE
45481: LESSEQUAL
45482: IFTRUE 45486
45484: GO 45493
45486: POP
// StreamSibBomb ; end ;
45487: CALL 41731 0 0
45491: GO 45494
45493: POP
// end ;
45494: PPOPN 3
45496: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
45497: LD_EXP 87
45501: PUSH
45502: LD_EXP 137
45506: AND
45507: IFFALSE 45663
45509: GO 45511
45511: DISABLE
45512: LD_INT 0
45514: PPUSH
45515: PPUSH
45516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
45517: LD_ADDR_VAR 0 2
45521: PUSH
45522: LD_INT 81
45524: PUSH
45525: LD_OWVAR 2
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 2
45536: PUSH
45537: LD_INT 21
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 21
45549: PUSH
45550: LD_INT 2
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: LIST
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PPUSH
45566: CALL_OW 69
45570: ST_TO_ADDR
// if not tmp then
45571: LD_VAR 0 2
45575: NOT
45576: IFFALSE 45580
// exit ;
45578: GO 45663
// p := 0 ;
45580: LD_ADDR_VAR 0 3
45584: PUSH
45585: LD_INT 0
45587: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
45588: LD_INT 35
45590: PPUSH
45591: CALL_OW 67
// p := p + 1 ;
45595: LD_ADDR_VAR 0 3
45599: PUSH
45600: LD_VAR 0 3
45604: PUSH
45605: LD_INT 1
45607: PLUS
45608: ST_TO_ADDR
// for i in tmp do
45609: LD_ADDR_VAR 0 1
45613: PUSH
45614: LD_VAR 0 2
45618: PUSH
45619: FOR_IN
45620: IFFALSE 45651
// if GetLives ( i ) < 1000 then
45622: LD_VAR 0 1
45626: PPUSH
45627: CALL_OW 256
45631: PUSH
45632: LD_INT 1000
45634: LESS
45635: IFFALSE 45649
// SetLives ( i , 1000 ) ;
45637: LD_VAR 0 1
45641: PPUSH
45642: LD_INT 1000
45644: PPUSH
45645: CALL_OW 234
45649: GO 45619
45651: POP
45652: POP
// until p > 20 ;
45653: LD_VAR 0 3
45657: PUSH
45658: LD_INT 20
45660: GREATER
45661: IFFALSE 45588
// end ;
45663: PPOPN 3
45665: END
// every 0 0$1 trigger StreamModeActive and sTime do
45666: LD_EXP 87
45670: PUSH
45671: LD_EXP 138
45675: AND
45676: IFFALSE 45711
45678: GO 45680
45680: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
45681: LD_INT 28
45683: PPUSH
45684: LD_OWVAR 2
45688: PPUSH
45689: LD_INT 2
45691: PPUSH
45692: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
45696: LD_INT 30
45698: PPUSH
45699: LD_OWVAR 2
45703: PPUSH
45704: LD_INT 2
45706: PPUSH
45707: CALL_OW 322
// end ;
45711: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
45712: LD_EXP 87
45716: PUSH
45717: LD_EXP 139
45721: AND
45722: IFFALSE 45843
45724: GO 45726
45726: DISABLE
45727: LD_INT 0
45729: PPUSH
45730: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
45731: LD_ADDR_VAR 0 2
45735: PUSH
45736: LD_INT 22
45738: PUSH
45739: LD_OWVAR 2
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 21
45750: PUSH
45751: LD_INT 1
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 3
45760: PUSH
45761: LD_INT 23
45763: PUSH
45764: LD_INT 0
45766: PUSH
45767: EMPTY
45768: LIST
45769: LIST
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: LIST
45779: PPUSH
45780: CALL_OW 69
45784: ST_TO_ADDR
// if not tmp then
45785: LD_VAR 0 2
45789: NOT
45790: IFFALSE 45794
// exit ;
45792: GO 45843
// for i in tmp do
45794: LD_ADDR_VAR 0 1
45798: PUSH
45799: LD_VAR 0 2
45803: PUSH
45804: FOR_IN
45805: IFFALSE 45841
// begin if Crawls ( i ) then
45807: LD_VAR 0 1
45811: PPUSH
45812: CALL_OW 318
45816: IFFALSE 45827
// ComWalk ( i ) ;
45818: LD_VAR 0 1
45822: PPUSH
45823: CALL_OW 138
// SetClass ( i , 2 ) ;
45827: LD_VAR 0 1
45831: PPUSH
45832: LD_INT 2
45834: PPUSH
45835: CALL_OW 336
// end ;
45839: GO 45804
45841: POP
45842: POP
// end ;
45843: PPOPN 2
45845: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
45846: LD_EXP 87
45850: PUSH
45851: LD_EXP 140
45855: AND
45856: IFFALSE 46144
45858: GO 45860
45860: DISABLE
45861: LD_INT 0
45863: PPUSH
45864: PPUSH
45865: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
45866: LD_OWVAR 2
45870: PPUSH
45871: LD_INT 9
45873: PPUSH
45874: LD_INT 1
45876: PPUSH
45877: LD_INT 1
45879: PPUSH
45880: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
45884: LD_INT 9
45886: PPUSH
45887: LD_OWVAR 2
45891: PPUSH
45892: CALL_OW 343
// uc_side := 9 ;
45896: LD_ADDR_OWVAR 20
45900: PUSH
45901: LD_INT 9
45903: ST_TO_ADDR
// uc_nation := 2 ;
45904: LD_ADDR_OWVAR 21
45908: PUSH
45909: LD_INT 2
45911: ST_TO_ADDR
// hc_name := Dark Warrior ;
45912: LD_ADDR_OWVAR 26
45916: PUSH
45917: LD_STRING Dark Warrior
45919: ST_TO_ADDR
// hc_gallery :=  ;
45920: LD_ADDR_OWVAR 33
45924: PUSH
45925: LD_STRING 
45927: ST_TO_ADDR
// hc_noskilllimit := true ;
45928: LD_ADDR_OWVAR 76
45932: PUSH
45933: LD_INT 1
45935: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
45936: LD_ADDR_OWVAR 31
45940: PUSH
45941: LD_INT 30
45943: PUSH
45944: LD_INT 30
45946: PUSH
45947: LD_INT 30
45949: PUSH
45950: LD_INT 30
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: ST_TO_ADDR
// un := CreateHuman ;
45959: LD_ADDR_VAR 0 3
45963: PUSH
45964: CALL_OW 44
45968: ST_TO_ADDR
// hc_noskilllimit := false ;
45969: LD_ADDR_OWVAR 76
45973: PUSH
45974: LD_INT 0
45976: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
45977: LD_VAR 0 3
45981: PPUSH
45982: LD_INT 1
45984: PPUSH
45985: CALL_OW 51
// ToLua ( playRanger() ) ;
45989: LD_STRING playRanger()
45991: PPUSH
45992: CALL_OW 559
// p := 0 ;
45996: LD_ADDR_VAR 0 2
46000: PUSH
46001: LD_INT 0
46003: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
46004: LD_INT 35
46006: PPUSH
46007: CALL_OW 67
// p := p + 1 ;
46011: LD_ADDR_VAR 0 2
46015: PUSH
46016: LD_VAR 0 2
46020: PUSH
46021: LD_INT 1
46023: PLUS
46024: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
46025: LD_VAR 0 3
46029: PPUSH
46030: CALL_OW 256
46034: PUSH
46035: LD_INT 1000
46037: LESS
46038: IFFALSE 46052
// SetLives ( un , 1000 ) ;
46040: LD_VAR 0 3
46044: PPUSH
46045: LD_INT 1000
46047: PPUSH
46048: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
46052: LD_VAR 0 3
46056: PPUSH
46057: LD_INT 81
46059: PUSH
46060: LD_OWVAR 2
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 91
46071: PUSH
46072: LD_VAR 0 3
46076: PUSH
46077: LD_INT 30
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: LIST
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PPUSH
46089: CALL_OW 69
46093: PPUSH
46094: LD_VAR 0 3
46098: PPUSH
46099: CALL_OW 74
46103: PPUSH
46104: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
46108: LD_VAR 0 2
46112: PUSH
46113: LD_INT 80
46115: GREATER
46116: PUSH
46117: LD_VAR 0 3
46121: PPUSH
46122: CALL_OW 301
46126: OR
46127: IFFALSE 46004
// if un then
46129: LD_VAR 0 3
46133: IFFALSE 46144
// RemoveUnit ( un ) ;
46135: LD_VAR 0 3
46139: PPUSH
46140: CALL_OW 64
// end ;
46144: PPOPN 3
46146: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
46147: LD_EXP 141
46151: IFFALSE 46267
46153: GO 46155
46155: DISABLE
46156: LD_INT 0
46158: PPUSH
46159: PPUSH
46160: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
46161: LD_ADDR_VAR 0 2
46165: PUSH
46166: LD_INT 81
46168: PUSH
46169: LD_OWVAR 2
46173: PUSH
46174: EMPTY
46175: LIST
46176: LIST
46177: PUSH
46178: LD_INT 21
46180: PUSH
46181: LD_INT 1
46183: PUSH
46184: EMPTY
46185: LIST
46186: LIST
46187: PUSH
46188: EMPTY
46189: LIST
46190: LIST
46191: PPUSH
46192: CALL_OW 69
46196: ST_TO_ADDR
// ToLua ( playComputer() ) ;
46197: LD_STRING playComputer()
46199: PPUSH
46200: CALL_OW 559
// if not tmp then
46204: LD_VAR 0 2
46208: NOT
46209: IFFALSE 46213
// exit ;
46211: GO 46267
// for i in tmp do
46213: LD_ADDR_VAR 0 1
46217: PUSH
46218: LD_VAR 0 2
46222: PUSH
46223: FOR_IN
46224: IFFALSE 46265
// for j := 1 to 4 do
46226: LD_ADDR_VAR 0 3
46230: PUSH
46231: DOUBLE
46232: LD_INT 1
46234: DEC
46235: ST_TO_ADDR
46236: LD_INT 4
46238: PUSH
46239: FOR_TO
46240: IFFALSE 46261
// SetSkill ( i , j , 10 ) ;
46242: LD_VAR 0 1
46246: PPUSH
46247: LD_VAR 0 3
46251: PPUSH
46252: LD_INT 10
46254: PPUSH
46255: CALL_OW 237
46259: GO 46239
46261: POP
46262: POP
46263: GO 46223
46265: POP
46266: POP
// end ;
46267: PPOPN 3
46269: END
// every 0 0$1 trigger s30 do var i , tmp ;
46270: LD_EXP 142
46274: IFFALSE 46343
46276: GO 46278
46278: DISABLE
46279: LD_INT 0
46281: PPUSH
46282: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46283: LD_ADDR_VAR 0 2
46287: PUSH
46288: LD_INT 22
46290: PUSH
46291: LD_OWVAR 2
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PPUSH
46300: CALL_OW 69
46304: ST_TO_ADDR
// if not tmp then
46305: LD_VAR 0 2
46309: NOT
46310: IFFALSE 46314
// exit ;
46312: GO 46343
// for i in tmp do
46314: LD_ADDR_VAR 0 1
46318: PUSH
46319: LD_VAR 0 2
46323: PUSH
46324: FOR_IN
46325: IFFALSE 46341
// SetLives ( i , 300 ) ;
46327: LD_VAR 0 1
46331: PPUSH
46332: LD_INT 300
46334: PPUSH
46335: CALL_OW 234
46339: GO 46324
46341: POP
46342: POP
// end ;
46343: PPOPN 2
46345: END
// every 0 0$1 trigger s60 do var i , tmp ;
46346: LD_EXP 143
46350: IFFALSE 46419
46352: GO 46354
46354: DISABLE
46355: LD_INT 0
46357: PPUSH
46358: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
46359: LD_ADDR_VAR 0 2
46363: PUSH
46364: LD_INT 22
46366: PUSH
46367: LD_OWVAR 2
46371: PUSH
46372: EMPTY
46373: LIST
46374: LIST
46375: PPUSH
46376: CALL_OW 69
46380: ST_TO_ADDR
// if not tmp then
46381: LD_VAR 0 2
46385: NOT
46386: IFFALSE 46390
// exit ;
46388: GO 46419
// for i in tmp do
46390: LD_ADDR_VAR 0 1
46394: PUSH
46395: LD_VAR 0 2
46399: PUSH
46400: FOR_IN
46401: IFFALSE 46417
// SetLives ( i , 600 ) ;
46403: LD_VAR 0 1
46407: PPUSH
46408: LD_INT 600
46410: PPUSH
46411: CALL_OW 234
46415: GO 46400
46417: POP
46418: POP
// end ;
46419: PPOPN 2
46421: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
46422: LD_INT 0
46424: PPUSH
// case cmd of 301 :
46425: LD_VAR 0 1
46429: PUSH
46430: LD_INT 301
46432: DOUBLE
46433: EQUAL
46434: IFTRUE 46438
46436: GO 46470
46438: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
46439: LD_VAR 0 6
46443: PPUSH
46444: LD_VAR 0 7
46448: PPUSH
46449: LD_VAR 0 8
46453: PPUSH
46454: LD_VAR 0 4
46458: PPUSH
46459: LD_VAR 0 5
46463: PPUSH
46464: CALL 47679 0 5
46468: GO 46591
46470: LD_INT 302
46472: DOUBLE
46473: EQUAL
46474: IFTRUE 46478
46476: GO 46515
46478: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
46479: LD_VAR 0 6
46483: PPUSH
46484: LD_VAR 0 7
46488: PPUSH
46489: LD_VAR 0 8
46493: PPUSH
46494: LD_VAR 0 9
46498: PPUSH
46499: LD_VAR 0 4
46503: PPUSH
46504: LD_VAR 0 5
46508: PPUSH
46509: CALL 47770 0 6
46513: GO 46591
46515: LD_INT 303
46517: DOUBLE
46518: EQUAL
46519: IFTRUE 46523
46521: GO 46560
46523: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
46524: LD_VAR 0 6
46528: PPUSH
46529: LD_VAR 0 7
46533: PPUSH
46534: LD_VAR 0 8
46538: PPUSH
46539: LD_VAR 0 9
46543: PPUSH
46544: LD_VAR 0 4
46548: PPUSH
46549: LD_VAR 0 5
46553: PPUSH
46554: CALL 46596 0 6
46558: GO 46591
46560: LD_INT 304
46562: DOUBLE
46563: EQUAL
46564: IFTRUE 46568
46566: GO 46590
46568: POP
// hHackTeleport ( unit , x , y ) ; end ;
46569: LD_VAR 0 2
46573: PPUSH
46574: LD_VAR 0 4
46578: PPUSH
46579: LD_VAR 0 5
46583: PPUSH
46584: CALL 48363 0 3
46588: GO 46591
46590: POP
// end ;
46591: LD_VAR 0 12
46595: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
46596: LD_INT 0
46598: PPUSH
46599: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
46600: LD_VAR 0 1
46604: PUSH
46605: LD_INT 1
46607: LESS
46608: PUSH
46609: LD_VAR 0 1
46613: PUSH
46614: LD_INT 3
46616: GREATER
46617: OR
46618: PUSH
46619: LD_VAR 0 5
46623: PPUSH
46624: LD_VAR 0 6
46628: PPUSH
46629: CALL_OW 428
46633: OR
46634: IFFALSE 46638
// exit ;
46636: GO 47366
// uc_side := your_side ;
46638: LD_ADDR_OWVAR 20
46642: PUSH
46643: LD_OWVAR 2
46647: ST_TO_ADDR
// uc_nation := nation ;
46648: LD_ADDR_OWVAR 21
46652: PUSH
46653: LD_VAR 0 1
46657: ST_TO_ADDR
// bc_level = 1 ;
46658: LD_ADDR_OWVAR 43
46662: PUSH
46663: LD_INT 1
46665: ST_TO_ADDR
// case btype of 1 :
46666: LD_VAR 0 2
46670: PUSH
46671: LD_INT 1
46673: DOUBLE
46674: EQUAL
46675: IFTRUE 46679
46677: GO 46690
46679: POP
// bc_type := b_depot ; 2 :
46680: LD_ADDR_OWVAR 42
46684: PUSH
46685: LD_INT 0
46687: ST_TO_ADDR
46688: GO 47310
46690: LD_INT 2
46692: DOUBLE
46693: EQUAL
46694: IFTRUE 46698
46696: GO 46709
46698: POP
// bc_type := b_warehouse ; 3 :
46699: LD_ADDR_OWVAR 42
46703: PUSH
46704: LD_INT 1
46706: ST_TO_ADDR
46707: GO 47310
46709: LD_INT 3
46711: DOUBLE
46712: EQUAL
46713: IFTRUE 46717
46715: GO 46728
46717: POP
// bc_type := b_lab ; 4 .. 9 :
46718: LD_ADDR_OWVAR 42
46722: PUSH
46723: LD_INT 6
46725: ST_TO_ADDR
46726: GO 47310
46728: LD_INT 4
46730: DOUBLE
46731: GREATEREQUAL
46732: IFFALSE 46740
46734: LD_INT 9
46736: DOUBLE
46737: LESSEQUAL
46738: IFTRUE 46742
46740: GO 46802
46742: POP
// begin bc_type := b_lab_half ;
46743: LD_ADDR_OWVAR 42
46747: PUSH
46748: LD_INT 7
46750: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
46751: LD_ADDR_OWVAR 44
46755: PUSH
46756: LD_INT 10
46758: PUSH
46759: LD_INT 11
46761: PUSH
46762: LD_INT 12
46764: PUSH
46765: LD_INT 15
46767: PUSH
46768: LD_INT 14
46770: PUSH
46771: LD_INT 13
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: PUSH
46782: LD_VAR 0 2
46786: PUSH
46787: LD_INT 3
46789: MINUS
46790: ARRAY
46791: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
46792: LD_ADDR_OWVAR 45
46796: PUSH
46797: LD_INT 9
46799: ST_TO_ADDR
// end ; 10 .. 13 :
46800: GO 47310
46802: LD_INT 10
46804: DOUBLE
46805: GREATEREQUAL
46806: IFFALSE 46814
46808: LD_INT 13
46810: DOUBLE
46811: LESSEQUAL
46812: IFTRUE 46816
46814: GO 46893
46816: POP
// begin bc_type := b_lab_full ;
46817: LD_ADDR_OWVAR 42
46821: PUSH
46822: LD_INT 8
46824: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
46825: LD_ADDR_OWVAR 44
46829: PUSH
46830: LD_INT 10
46832: PUSH
46833: LD_INT 12
46835: PUSH
46836: LD_INT 14
46838: PUSH
46839: LD_INT 13
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: PUSH
46848: LD_VAR 0 2
46852: PUSH
46853: LD_INT 9
46855: MINUS
46856: ARRAY
46857: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
46858: LD_ADDR_OWVAR 45
46862: PUSH
46863: LD_INT 11
46865: PUSH
46866: LD_INT 15
46868: PUSH
46869: LD_INT 12
46871: PUSH
46872: LD_INT 15
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: LIST
46879: LIST
46880: PUSH
46881: LD_VAR 0 2
46885: PUSH
46886: LD_INT 9
46888: MINUS
46889: ARRAY
46890: ST_TO_ADDR
// end ; 14 :
46891: GO 47310
46893: LD_INT 14
46895: DOUBLE
46896: EQUAL
46897: IFTRUE 46901
46899: GO 46912
46901: POP
// bc_type := b_workshop ; 15 :
46902: LD_ADDR_OWVAR 42
46906: PUSH
46907: LD_INT 2
46909: ST_TO_ADDR
46910: GO 47310
46912: LD_INT 15
46914: DOUBLE
46915: EQUAL
46916: IFTRUE 46920
46918: GO 46931
46920: POP
// bc_type := b_factory ; 16 :
46921: LD_ADDR_OWVAR 42
46925: PUSH
46926: LD_INT 3
46928: ST_TO_ADDR
46929: GO 47310
46931: LD_INT 16
46933: DOUBLE
46934: EQUAL
46935: IFTRUE 46939
46937: GO 46950
46939: POP
// bc_type := b_ext_gun ; 17 :
46940: LD_ADDR_OWVAR 42
46944: PUSH
46945: LD_INT 17
46947: ST_TO_ADDR
46948: GO 47310
46950: LD_INT 17
46952: DOUBLE
46953: EQUAL
46954: IFTRUE 46958
46956: GO 46986
46958: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
46959: LD_ADDR_OWVAR 42
46963: PUSH
46964: LD_INT 19
46966: PUSH
46967: LD_INT 23
46969: PUSH
46970: LD_INT 19
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: LIST
46977: PUSH
46978: LD_VAR 0 1
46982: ARRAY
46983: ST_TO_ADDR
46984: GO 47310
46986: LD_INT 18
46988: DOUBLE
46989: EQUAL
46990: IFTRUE 46994
46992: GO 47005
46994: POP
// bc_type := b_ext_radar ; 19 :
46995: LD_ADDR_OWVAR 42
46999: PUSH
47000: LD_INT 20
47002: ST_TO_ADDR
47003: GO 47310
47005: LD_INT 19
47007: DOUBLE
47008: EQUAL
47009: IFTRUE 47013
47011: GO 47024
47013: POP
// bc_type := b_ext_radio ; 20 :
47014: LD_ADDR_OWVAR 42
47018: PUSH
47019: LD_INT 22
47021: ST_TO_ADDR
47022: GO 47310
47024: LD_INT 20
47026: DOUBLE
47027: EQUAL
47028: IFTRUE 47032
47030: GO 47043
47032: POP
// bc_type := b_ext_siberium ; 21 :
47033: LD_ADDR_OWVAR 42
47037: PUSH
47038: LD_INT 21
47040: ST_TO_ADDR
47041: GO 47310
47043: LD_INT 21
47045: DOUBLE
47046: EQUAL
47047: IFTRUE 47051
47049: GO 47062
47051: POP
// bc_type := b_ext_computer ; 22 :
47052: LD_ADDR_OWVAR 42
47056: PUSH
47057: LD_INT 24
47059: ST_TO_ADDR
47060: GO 47310
47062: LD_INT 22
47064: DOUBLE
47065: EQUAL
47066: IFTRUE 47070
47068: GO 47081
47070: POP
// bc_type := b_ext_track ; 23 :
47071: LD_ADDR_OWVAR 42
47075: PUSH
47076: LD_INT 16
47078: ST_TO_ADDR
47079: GO 47310
47081: LD_INT 23
47083: DOUBLE
47084: EQUAL
47085: IFTRUE 47089
47087: GO 47100
47089: POP
// bc_type := b_ext_laser ; 24 :
47090: LD_ADDR_OWVAR 42
47094: PUSH
47095: LD_INT 25
47097: ST_TO_ADDR
47098: GO 47310
47100: LD_INT 24
47102: DOUBLE
47103: EQUAL
47104: IFTRUE 47108
47106: GO 47119
47108: POP
// bc_type := b_control_tower ; 25 :
47109: LD_ADDR_OWVAR 42
47113: PUSH
47114: LD_INT 36
47116: ST_TO_ADDR
47117: GO 47310
47119: LD_INT 25
47121: DOUBLE
47122: EQUAL
47123: IFTRUE 47127
47125: GO 47138
47127: POP
// bc_type := b_breastwork ; 26 :
47128: LD_ADDR_OWVAR 42
47132: PUSH
47133: LD_INT 31
47135: ST_TO_ADDR
47136: GO 47310
47138: LD_INT 26
47140: DOUBLE
47141: EQUAL
47142: IFTRUE 47146
47144: GO 47157
47146: POP
// bc_type := b_bunker ; 27 :
47147: LD_ADDR_OWVAR 42
47151: PUSH
47152: LD_INT 32
47154: ST_TO_ADDR
47155: GO 47310
47157: LD_INT 27
47159: DOUBLE
47160: EQUAL
47161: IFTRUE 47165
47163: GO 47176
47165: POP
// bc_type := b_turret ; 28 :
47166: LD_ADDR_OWVAR 42
47170: PUSH
47171: LD_INT 33
47173: ST_TO_ADDR
47174: GO 47310
47176: LD_INT 28
47178: DOUBLE
47179: EQUAL
47180: IFTRUE 47184
47182: GO 47195
47184: POP
// bc_type := b_armoury ; 29 :
47185: LD_ADDR_OWVAR 42
47189: PUSH
47190: LD_INT 4
47192: ST_TO_ADDR
47193: GO 47310
47195: LD_INT 29
47197: DOUBLE
47198: EQUAL
47199: IFTRUE 47203
47201: GO 47214
47203: POP
// bc_type := b_barracks ; 30 :
47204: LD_ADDR_OWVAR 42
47208: PUSH
47209: LD_INT 5
47211: ST_TO_ADDR
47212: GO 47310
47214: LD_INT 30
47216: DOUBLE
47217: EQUAL
47218: IFTRUE 47222
47220: GO 47233
47222: POP
// bc_type := b_solar_power ; 31 :
47223: LD_ADDR_OWVAR 42
47227: PUSH
47228: LD_INT 27
47230: ST_TO_ADDR
47231: GO 47310
47233: LD_INT 31
47235: DOUBLE
47236: EQUAL
47237: IFTRUE 47241
47239: GO 47252
47241: POP
// bc_type := b_oil_power ; 32 :
47242: LD_ADDR_OWVAR 42
47246: PUSH
47247: LD_INT 26
47249: ST_TO_ADDR
47250: GO 47310
47252: LD_INT 32
47254: DOUBLE
47255: EQUAL
47256: IFTRUE 47260
47258: GO 47271
47260: POP
// bc_type := b_siberite_power ; 33 :
47261: LD_ADDR_OWVAR 42
47265: PUSH
47266: LD_INT 28
47268: ST_TO_ADDR
47269: GO 47310
47271: LD_INT 33
47273: DOUBLE
47274: EQUAL
47275: IFTRUE 47279
47277: GO 47290
47279: POP
// bc_type := b_oil_mine ; 34 :
47280: LD_ADDR_OWVAR 42
47284: PUSH
47285: LD_INT 29
47287: ST_TO_ADDR
47288: GO 47310
47290: LD_INT 34
47292: DOUBLE
47293: EQUAL
47294: IFTRUE 47298
47296: GO 47309
47298: POP
// bc_type := b_siberite_mine ; end ;
47299: LD_ADDR_OWVAR 42
47303: PUSH
47304: LD_INT 30
47306: ST_TO_ADDR
47307: GO 47310
47309: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
47310: LD_ADDR_VAR 0 8
47314: PUSH
47315: LD_VAR 0 5
47319: PPUSH
47320: LD_VAR 0 6
47324: PPUSH
47325: LD_VAR 0 3
47329: PPUSH
47330: CALL_OW 47
47334: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
47335: LD_OWVAR 42
47339: PUSH
47340: LD_INT 32
47342: PUSH
47343: LD_INT 33
47345: PUSH
47346: EMPTY
47347: LIST
47348: LIST
47349: IN
47350: IFFALSE 47366
// PlaceWeaponTurret ( b , weapon ) ;
47352: LD_VAR 0 8
47356: PPUSH
47357: LD_VAR 0 4
47361: PPUSH
47362: CALL_OW 431
// end ;
47366: LD_VAR 0 7
47370: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
47371: LD_INT 0
47373: PPUSH
47374: PPUSH
47375: PPUSH
47376: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
47377: LD_ADDR_VAR 0 4
47381: PUSH
47382: LD_INT 22
47384: PUSH
47385: LD_OWVAR 2
47389: PUSH
47390: EMPTY
47391: LIST
47392: LIST
47393: PUSH
47394: LD_INT 2
47396: PUSH
47397: LD_INT 30
47399: PUSH
47400: LD_INT 0
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 30
47409: PUSH
47410: LD_INT 1
47412: PUSH
47413: EMPTY
47414: LIST
47415: LIST
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: LIST
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PPUSH
47426: CALL_OW 69
47430: ST_TO_ADDR
// if not tmp then
47431: LD_VAR 0 4
47435: NOT
47436: IFFALSE 47440
// exit ;
47438: GO 47499
// for i in tmp do
47440: LD_ADDR_VAR 0 2
47444: PUSH
47445: LD_VAR 0 4
47449: PUSH
47450: FOR_IN
47451: IFFALSE 47497
// for j = 1 to 3 do
47453: LD_ADDR_VAR 0 3
47457: PUSH
47458: DOUBLE
47459: LD_INT 1
47461: DEC
47462: ST_TO_ADDR
47463: LD_INT 3
47465: PUSH
47466: FOR_TO
47467: IFFALSE 47493
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
47469: LD_VAR 0 2
47473: PPUSH
47474: CALL_OW 274
47478: PPUSH
47479: LD_VAR 0 3
47483: PPUSH
47484: LD_INT 99999
47486: PPUSH
47487: CALL_OW 277
47491: GO 47466
47493: POP
47494: POP
47495: GO 47450
47497: POP
47498: POP
// end ;
47499: LD_VAR 0 1
47503: RET
// export function hHackSetLevel10 ; var i , j ; begin
47504: LD_INT 0
47506: PPUSH
47507: PPUSH
47508: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
47509: LD_ADDR_VAR 0 2
47513: PUSH
47514: LD_INT 21
47516: PUSH
47517: LD_INT 1
47519: PUSH
47520: EMPTY
47521: LIST
47522: LIST
47523: PPUSH
47524: CALL_OW 69
47528: PUSH
47529: FOR_IN
47530: IFFALSE 47582
// if IsSelected ( i ) then
47532: LD_VAR 0 2
47536: PPUSH
47537: CALL_OW 306
47541: IFFALSE 47580
// begin for j := 1 to 4 do
47543: LD_ADDR_VAR 0 3
47547: PUSH
47548: DOUBLE
47549: LD_INT 1
47551: DEC
47552: ST_TO_ADDR
47553: LD_INT 4
47555: PUSH
47556: FOR_TO
47557: IFFALSE 47578
// SetSkill ( i , j , 10 ) ;
47559: LD_VAR 0 2
47563: PPUSH
47564: LD_VAR 0 3
47568: PPUSH
47569: LD_INT 10
47571: PPUSH
47572: CALL_OW 237
47576: GO 47556
47578: POP
47579: POP
// end ;
47580: GO 47529
47582: POP
47583: POP
// end ;
47584: LD_VAR 0 1
47588: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
47589: LD_INT 0
47591: PPUSH
47592: PPUSH
47593: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
47594: LD_ADDR_VAR 0 2
47598: PUSH
47599: LD_INT 22
47601: PUSH
47602: LD_OWVAR 2
47606: PUSH
47607: EMPTY
47608: LIST
47609: LIST
47610: PUSH
47611: LD_INT 21
47613: PUSH
47614: LD_INT 1
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PPUSH
47625: CALL_OW 69
47629: PUSH
47630: FOR_IN
47631: IFFALSE 47672
// begin for j := 1 to 4 do
47633: LD_ADDR_VAR 0 3
47637: PUSH
47638: DOUBLE
47639: LD_INT 1
47641: DEC
47642: ST_TO_ADDR
47643: LD_INT 4
47645: PUSH
47646: FOR_TO
47647: IFFALSE 47668
// SetSkill ( i , j , 10 ) ;
47649: LD_VAR 0 2
47653: PPUSH
47654: LD_VAR 0 3
47658: PPUSH
47659: LD_INT 10
47661: PPUSH
47662: CALL_OW 237
47666: GO 47646
47668: POP
47669: POP
// end ;
47670: GO 47630
47672: POP
47673: POP
// end ;
47674: LD_VAR 0 1
47678: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
47679: LD_INT 0
47681: PPUSH
// uc_side := your_side ;
47682: LD_ADDR_OWVAR 20
47686: PUSH
47687: LD_OWVAR 2
47691: ST_TO_ADDR
// uc_nation := nation ;
47692: LD_ADDR_OWVAR 21
47696: PUSH
47697: LD_VAR 0 1
47701: ST_TO_ADDR
// InitHc ;
47702: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
47706: LD_INT 0
47708: PPUSH
47709: LD_VAR 0 2
47713: PPUSH
47714: LD_VAR 0 3
47718: PPUSH
47719: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
47723: LD_VAR 0 4
47727: PPUSH
47728: LD_VAR 0 5
47732: PPUSH
47733: CALL_OW 428
47737: PUSH
47738: LD_INT 0
47740: EQUAL
47741: IFFALSE 47765
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
47743: CALL_OW 44
47747: PPUSH
47748: LD_VAR 0 4
47752: PPUSH
47753: LD_VAR 0 5
47757: PPUSH
47758: LD_INT 1
47760: PPUSH
47761: CALL_OW 48
// end ;
47765: LD_VAR 0 6
47769: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
47770: LD_INT 0
47772: PPUSH
47773: PPUSH
// uc_side := your_side ;
47774: LD_ADDR_OWVAR 20
47778: PUSH
47779: LD_OWVAR 2
47783: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
47784: LD_VAR 0 1
47788: PUSH
47789: LD_INT 1
47791: PUSH
47792: LD_INT 2
47794: PUSH
47795: LD_INT 3
47797: PUSH
47798: LD_INT 4
47800: PUSH
47801: LD_INT 5
47803: PUSH
47804: EMPTY
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: IN
47811: IFFALSE 47823
// uc_nation := nation_american else
47813: LD_ADDR_OWVAR 21
47817: PUSH
47818: LD_INT 1
47820: ST_TO_ADDR
47821: GO 47866
// if chassis in [ 11 , 12 , 13 , 14 ] then
47823: LD_VAR 0 1
47827: PUSH
47828: LD_INT 11
47830: PUSH
47831: LD_INT 12
47833: PUSH
47834: LD_INT 13
47836: PUSH
47837: LD_INT 14
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: LIST
47844: LIST
47845: IN
47846: IFFALSE 47858
// uc_nation := nation_arabian else
47848: LD_ADDR_OWVAR 21
47852: PUSH
47853: LD_INT 2
47855: ST_TO_ADDR
47856: GO 47866
// uc_nation := nation_russian ;
47858: LD_ADDR_OWVAR 21
47862: PUSH
47863: LD_INT 3
47865: ST_TO_ADDR
// vc_chassis := chassis ;
47866: LD_ADDR_OWVAR 37
47870: PUSH
47871: LD_VAR 0 1
47875: ST_TO_ADDR
// vc_engine := engine ;
47876: LD_ADDR_OWVAR 39
47880: PUSH
47881: LD_VAR 0 2
47885: ST_TO_ADDR
// vc_control := control ;
47886: LD_ADDR_OWVAR 38
47890: PUSH
47891: LD_VAR 0 3
47895: ST_TO_ADDR
// vc_weapon := weapon ;
47896: LD_ADDR_OWVAR 40
47900: PUSH
47901: LD_VAR 0 4
47905: ST_TO_ADDR
// un := CreateVehicle ;
47906: LD_ADDR_VAR 0 8
47910: PUSH
47911: CALL_OW 45
47915: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
47916: LD_VAR 0 8
47920: PPUSH
47921: LD_INT 0
47923: PPUSH
47924: LD_INT 5
47926: PPUSH
47927: CALL_OW 12
47931: PPUSH
47932: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
47936: LD_VAR 0 8
47940: PPUSH
47941: LD_VAR 0 5
47945: PPUSH
47946: LD_VAR 0 6
47950: PPUSH
47951: LD_INT 1
47953: PPUSH
47954: CALL_OW 48
// end ;
47958: LD_VAR 0 7
47962: RET
// export hInvincible ; every 1 do
47963: GO 47965
47965: DISABLE
// hInvincible := [ ] ;
47966: LD_ADDR_EXP 144
47970: PUSH
47971: EMPTY
47972: ST_TO_ADDR
47973: END
// every 10 do var i ;
47974: GO 47976
47976: DISABLE
47977: LD_INT 0
47979: PPUSH
// begin enable ;
47980: ENABLE
// if not hInvincible then
47981: LD_EXP 144
47985: NOT
47986: IFFALSE 47990
// exit ;
47988: GO 48034
// for i in hInvincible do
47990: LD_ADDR_VAR 0 1
47994: PUSH
47995: LD_EXP 144
47999: PUSH
48000: FOR_IN
48001: IFFALSE 48032
// if GetLives ( i ) < 1000 then
48003: LD_VAR 0 1
48007: PPUSH
48008: CALL_OW 256
48012: PUSH
48013: LD_INT 1000
48015: LESS
48016: IFFALSE 48030
// SetLives ( i , 1000 ) ;
48018: LD_VAR 0 1
48022: PPUSH
48023: LD_INT 1000
48025: PPUSH
48026: CALL_OW 234
48030: GO 48000
48032: POP
48033: POP
// end ;
48034: PPOPN 1
48036: END
// export function hHackInvincible ; var i ; begin
48037: LD_INT 0
48039: PPUSH
48040: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
48041: LD_ADDR_VAR 0 2
48045: PUSH
48046: LD_INT 2
48048: PUSH
48049: LD_INT 21
48051: PUSH
48052: LD_INT 1
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 21
48061: PUSH
48062: LD_INT 2
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: LIST
48073: PPUSH
48074: CALL_OW 69
48078: PUSH
48079: FOR_IN
48080: IFFALSE 48141
// if IsSelected ( i ) then
48082: LD_VAR 0 2
48086: PPUSH
48087: CALL_OW 306
48091: IFFALSE 48139
// begin if i in hInvincible then
48093: LD_VAR 0 2
48097: PUSH
48098: LD_EXP 144
48102: IN
48103: IFFALSE 48123
// hInvincible := hInvincible diff i else
48105: LD_ADDR_EXP 144
48109: PUSH
48110: LD_EXP 144
48114: PUSH
48115: LD_VAR 0 2
48119: DIFF
48120: ST_TO_ADDR
48121: GO 48139
// hInvincible := hInvincible union i ;
48123: LD_ADDR_EXP 144
48127: PUSH
48128: LD_EXP 144
48132: PUSH
48133: LD_VAR 0 2
48137: UNION
48138: ST_TO_ADDR
// end ;
48139: GO 48079
48141: POP
48142: POP
// end ;
48143: LD_VAR 0 1
48147: RET
// export function hHackInvisible ; var i , j ; begin
48148: LD_INT 0
48150: PPUSH
48151: PPUSH
48152: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
48153: LD_ADDR_VAR 0 2
48157: PUSH
48158: LD_INT 21
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: EMPTY
48165: LIST
48166: LIST
48167: PPUSH
48168: CALL_OW 69
48172: PUSH
48173: FOR_IN
48174: IFFALSE 48198
// if IsSelected ( i ) then
48176: LD_VAR 0 2
48180: PPUSH
48181: CALL_OW 306
48185: IFFALSE 48196
// ComForceInvisible ( i ) ;
48187: LD_VAR 0 2
48191: PPUSH
48192: CALL_OW 496
48196: GO 48173
48198: POP
48199: POP
// end ;
48200: LD_VAR 0 1
48204: RET
// export function hHackChangeYourSide ; begin
48205: LD_INT 0
48207: PPUSH
// if your_side = 8 then
48208: LD_OWVAR 2
48212: PUSH
48213: LD_INT 8
48215: EQUAL
48216: IFFALSE 48228
// your_side := 0 else
48218: LD_ADDR_OWVAR 2
48222: PUSH
48223: LD_INT 0
48225: ST_TO_ADDR
48226: GO 48242
// your_side := your_side + 1 ;
48228: LD_ADDR_OWVAR 2
48232: PUSH
48233: LD_OWVAR 2
48237: PUSH
48238: LD_INT 1
48240: PLUS
48241: ST_TO_ADDR
// end ;
48242: LD_VAR 0 1
48246: RET
// export function hHackChangeUnitSide ; var i , j ; begin
48247: LD_INT 0
48249: PPUSH
48250: PPUSH
48251: PPUSH
// for i in all_units do
48252: LD_ADDR_VAR 0 2
48256: PUSH
48257: LD_OWVAR 3
48261: PUSH
48262: FOR_IN
48263: IFFALSE 48341
// if IsSelected ( i ) then
48265: LD_VAR 0 2
48269: PPUSH
48270: CALL_OW 306
48274: IFFALSE 48339
// begin j := GetSide ( i ) ;
48276: LD_ADDR_VAR 0 3
48280: PUSH
48281: LD_VAR 0 2
48285: PPUSH
48286: CALL_OW 255
48290: ST_TO_ADDR
// if j = 8 then
48291: LD_VAR 0 3
48295: PUSH
48296: LD_INT 8
48298: EQUAL
48299: IFFALSE 48311
// j := 0 else
48301: LD_ADDR_VAR 0 3
48305: PUSH
48306: LD_INT 0
48308: ST_TO_ADDR
48309: GO 48325
// j := j + 1 ;
48311: LD_ADDR_VAR 0 3
48315: PUSH
48316: LD_VAR 0 3
48320: PUSH
48321: LD_INT 1
48323: PLUS
48324: ST_TO_ADDR
// SetSide ( i , j ) ;
48325: LD_VAR 0 2
48329: PPUSH
48330: LD_VAR 0 3
48334: PPUSH
48335: CALL_OW 235
// end ;
48339: GO 48262
48341: POP
48342: POP
// end ;
48343: LD_VAR 0 1
48347: RET
// export function hHackFog ; begin
48348: LD_INT 0
48350: PPUSH
// FogOff ( true ) ;
48351: LD_INT 1
48353: PPUSH
48354: CALL_OW 344
// end ;
48358: LD_VAR 0 1
48362: RET
// export function hHackTeleport ( unit , x , y ) ; begin
48363: LD_INT 0
48365: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
48366: LD_VAR 0 1
48370: PPUSH
48371: LD_VAR 0 2
48375: PPUSH
48376: LD_VAR 0 3
48380: PPUSH
48381: LD_INT 1
48383: PPUSH
48384: LD_INT 1
48386: PPUSH
48387: CALL_OW 483
// CenterOnXY ( x , y ) ;
48391: LD_VAR 0 2
48395: PPUSH
48396: LD_VAR 0 3
48400: PPUSH
48401: CALL_OW 84
// end ;
48405: LD_VAR 0 4
48409: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
48410: LD_INT 0
48412: PPUSH
48413: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
48414: LD_VAR 0 1
48418: NOT
48419: PUSH
48420: LD_VAR 0 2
48424: PPUSH
48425: LD_VAR 0 3
48429: PPUSH
48430: CALL_OW 488
48434: NOT
48435: OR
48436: PUSH
48437: LD_VAR 0 1
48441: PPUSH
48442: CALL_OW 266
48446: PUSH
48447: LD_INT 3
48449: NONEQUAL
48450: PUSH
48451: LD_VAR 0 1
48455: PPUSH
48456: CALL_OW 247
48460: PUSH
48461: LD_INT 1
48463: EQUAL
48464: NOT
48465: AND
48466: OR
48467: IFFALSE 48471
// exit ;
48469: GO 48620
// if GetType ( factory ) = unit_human then
48471: LD_VAR 0 1
48475: PPUSH
48476: CALL_OW 247
48480: PUSH
48481: LD_INT 1
48483: EQUAL
48484: IFFALSE 48501
// factory := IsInUnit ( factory ) ;
48486: LD_ADDR_VAR 0 1
48490: PUSH
48491: LD_VAR 0 1
48495: PPUSH
48496: CALL_OW 310
48500: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
48501: LD_VAR 0 1
48505: PPUSH
48506: CALL_OW 266
48510: PUSH
48511: LD_INT 3
48513: NONEQUAL
48514: IFFALSE 48518
// exit ;
48516: GO 48620
// if HexInfo ( x , y ) = factory then
48518: LD_VAR 0 2
48522: PPUSH
48523: LD_VAR 0 3
48527: PPUSH
48528: CALL_OW 428
48532: PUSH
48533: LD_VAR 0 1
48537: EQUAL
48538: IFFALSE 48565
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
48540: LD_ADDR_EXP 145
48544: PUSH
48545: LD_EXP 145
48549: PPUSH
48550: LD_VAR 0 1
48554: PPUSH
48555: LD_INT 0
48557: PPUSH
48558: CALL_OW 1
48562: ST_TO_ADDR
48563: GO 48616
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
48565: LD_ADDR_EXP 145
48569: PUSH
48570: LD_EXP 145
48574: PPUSH
48575: LD_VAR 0 1
48579: PPUSH
48580: LD_VAR 0 1
48584: PPUSH
48585: CALL_OW 255
48589: PUSH
48590: LD_VAR 0 1
48594: PUSH
48595: LD_VAR 0 2
48599: PUSH
48600: LD_VAR 0 3
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: PPUSH
48611: CALL_OW 1
48615: ST_TO_ADDR
// UpdateFactoryWaypoints ;
48616: CALL 48625 0 0
// end ;
48620: LD_VAR 0 4
48624: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
48625: LD_INT 0
48627: PPUSH
48628: PPUSH
48629: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
48630: LD_STRING resetFactoryWaypoint();
48632: PPUSH
48633: CALL_OW 559
// if factoryWaypoints then
48637: LD_EXP 145
48641: IFFALSE 48767
// begin list := PrepareArray ( factoryWaypoints ) ;
48643: LD_ADDR_VAR 0 3
48647: PUSH
48648: LD_EXP 145
48652: PPUSH
48653: CALL 96064 0 1
48657: ST_TO_ADDR
// for i := 1 to list do
48658: LD_ADDR_VAR 0 2
48662: PUSH
48663: DOUBLE
48664: LD_INT 1
48666: DEC
48667: ST_TO_ADDR
48668: LD_VAR 0 3
48672: PUSH
48673: FOR_TO
48674: IFFALSE 48765
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
48676: LD_STRING setFactoryWaypointXY(
48678: PUSH
48679: LD_VAR 0 3
48683: PUSH
48684: LD_VAR 0 2
48688: ARRAY
48689: PUSH
48690: LD_INT 1
48692: ARRAY
48693: STR
48694: PUSH
48695: LD_STRING ,
48697: STR
48698: PUSH
48699: LD_VAR 0 3
48703: PUSH
48704: LD_VAR 0 2
48708: ARRAY
48709: PUSH
48710: LD_INT 2
48712: ARRAY
48713: STR
48714: PUSH
48715: LD_STRING ,
48717: STR
48718: PUSH
48719: LD_VAR 0 3
48723: PUSH
48724: LD_VAR 0 2
48728: ARRAY
48729: PUSH
48730: LD_INT 3
48732: ARRAY
48733: STR
48734: PUSH
48735: LD_STRING ,
48737: STR
48738: PUSH
48739: LD_VAR 0 3
48743: PUSH
48744: LD_VAR 0 2
48748: ARRAY
48749: PUSH
48750: LD_INT 4
48752: ARRAY
48753: STR
48754: PUSH
48755: LD_STRING )
48757: STR
48758: PPUSH
48759: CALL_OW 559
48763: GO 48673
48765: POP
48766: POP
// end ; end ;
48767: LD_VAR 0 1
48771: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
48772: LD_INT 0
48774: PPUSH
// if HexInfo ( x , y ) = warehouse then
48775: LD_VAR 0 2
48779: PPUSH
48780: LD_VAR 0 3
48784: PPUSH
48785: CALL_OW 428
48789: PUSH
48790: LD_VAR 0 1
48794: EQUAL
48795: IFFALSE 48822
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
48797: LD_ADDR_EXP 146
48801: PUSH
48802: LD_EXP 146
48806: PPUSH
48807: LD_VAR 0 1
48811: PPUSH
48812: LD_INT 0
48814: PPUSH
48815: CALL_OW 1
48819: ST_TO_ADDR
48820: GO 48873
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
48822: LD_ADDR_EXP 146
48826: PUSH
48827: LD_EXP 146
48831: PPUSH
48832: LD_VAR 0 1
48836: PPUSH
48837: LD_VAR 0 1
48841: PPUSH
48842: CALL_OW 255
48846: PUSH
48847: LD_VAR 0 1
48851: PUSH
48852: LD_VAR 0 2
48856: PUSH
48857: LD_VAR 0 3
48861: PUSH
48862: EMPTY
48863: LIST
48864: LIST
48865: LIST
48866: LIST
48867: PPUSH
48868: CALL_OW 1
48872: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
48873: CALL 48882 0 0
// end ;
48877: LD_VAR 0 4
48881: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
48882: LD_INT 0
48884: PPUSH
48885: PPUSH
48886: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
48887: LD_STRING resetWarehouseGatheringPoints();
48889: PPUSH
48890: CALL_OW 559
// if warehouseGatheringPoints then
48894: LD_EXP 146
48898: IFFALSE 49024
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
48900: LD_ADDR_VAR 0 3
48904: PUSH
48905: LD_EXP 146
48909: PPUSH
48910: CALL 96064 0 1
48914: ST_TO_ADDR
// for i := 1 to list do
48915: LD_ADDR_VAR 0 2
48919: PUSH
48920: DOUBLE
48921: LD_INT 1
48923: DEC
48924: ST_TO_ADDR
48925: LD_VAR 0 3
48929: PUSH
48930: FOR_TO
48931: IFFALSE 49022
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
48933: LD_STRING setWarehouseGatheringPointXY(
48935: PUSH
48936: LD_VAR 0 3
48940: PUSH
48941: LD_VAR 0 2
48945: ARRAY
48946: PUSH
48947: LD_INT 1
48949: ARRAY
48950: STR
48951: PUSH
48952: LD_STRING ,
48954: STR
48955: PUSH
48956: LD_VAR 0 3
48960: PUSH
48961: LD_VAR 0 2
48965: ARRAY
48966: PUSH
48967: LD_INT 2
48969: ARRAY
48970: STR
48971: PUSH
48972: LD_STRING ,
48974: STR
48975: PUSH
48976: LD_VAR 0 3
48980: PUSH
48981: LD_VAR 0 2
48985: ARRAY
48986: PUSH
48987: LD_INT 3
48989: ARRAY
48990: STR
48991: PUSH
48992: LD_STRING ,
48994: STR
48995: PUSH
48996: LD_VAR 0 3
49000: PUSH
49001: LD_VAR 0 2
49005: ARRAY
49006: PUSH
49007: LD_INT 4
49009: ARRAY
49010: STR
49011: PUSH
49012: LD_STRING )
49014: STR
49015: PPUSH
49016: CALL_OW 559
49020: GO 48930
49022: POP
49023: POP
// end ; end ;
49024: LD_VAR 0 1
49028: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
49029: LD_EXP 146
49033: IFFALSE 49718
49035: GO 49037
49037: DISABLE
49038: LD_INT 0
49040: PPUSH
49041: PPUSH
49042: PPUSH
49043: PPUSH
49044: PPUSH
49045: PPUSH
49046: PPUSH
49047: PPUSH
49048: PPUSH
// begin enable ;
49049: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
49050: LD_ADDR_VAR 0 3
49054: PUSH
49055: LD_EXP 146
49059: PPUSH
49060: CALL 96064 0 1
49064: ST_TO_ADDR
// if not list then
49065: LD_VAR 0 3
49069: NOT
49070: IFFALSE 49074
// exit ;
49072: GO 49718
// for i := 1 to list do
49074: LD_ADDR_VAR 0 1
49078: PUSH
49079: DOUBLE
49080: LD_INT 1
49082: DEC
49083: ST_TO_ADDR
49084: LD_VAR 0 3
49088: PUSH
49089: FOR_TO
49090: IFFALSE 49716
// begin depot := list [ i ] [ 2 ] ;
49092: LD_ADDR_VAR 0 8
49096: PUSH
49097: LD_VAR 0 3
49101: PUSH
49102: LD_VAR 0 1
49106: ARRAY
49107: PUSH
49108: LD_INT 2
49110: ARRAY
49111: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
49112: LD_ADDR_VAR 0 5
49116: PUSH
49117: LD_VAR 0 3
49121: PUSH
49122: LD_VAR 0 1
49126: ARRAY
49127: PUSH
49128: LD_INT 1
49130: ARRAY
49131: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
49132: LD_VAR 0 8
49136: PPUSH
49137: CALL_OW 301
49141: PUSH
49142: LD_VAR 0 5
49146: PUSH
49147: LD_VAR 0 8
49151: PPUSH
49152: CALL_OW 255
49156: NONEQUAL
49157: OR
49158: IFFALSE 49187
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
49160: LD_ADDR_EXP 146
49164: PUSH
49165: LD_EXP 146
49169: PPUSH
49170: LD_VAR 0 8
49174: PPUSH
49175: LD_INT 0
49177: PPUSH
49178: CALL_OW 1
49182: ST_TO_ADDR
// exit ;
49183: POP
49184: POP
49185: GO 49718
// end ; x := list [ i ] [ 3 ] ;
49187: LD_ADDR_VAR 0 6
49191: PUSH
49192: LD_VAR 0 3
49196: PUSH
49197: LD_VAR 0 1
49201: ARRAY
49202: PUSH
49203: LD_INT 3
49205: ARRAY
49206: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
49207: LD_ADDR_VAR 0 7
49211: PUSH
49212: LD_VAR 0 3
49216: PUSH
49217: LD_VAR 0 1
49221: ARRAY
49222: PUSH
49223: LD_INT 4
49225: ARRAY
49226: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
49227: LD_ADDR_VAR 0 9
49231: PUSH
49232: LD_VAR 0 6
49236: PPUSH
49237: LD_VAR 0 7
49241: PPUSH
49242: LD_INT 16
49244: PPUSH
49245: CALL 94652 0 3
49249: ST_TO_ADDR
// if not cratesNearbyPoint then
49250: LD_VAR 0 9
49254: NOT
49255: IFFALSE 49261
// exit ;
49257: POP
49258: POP
49259: GO 49718
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
49261: LD_ADDR_VAR 0 4
49265: PUSH
49266: LD_INT 22
49268: PUSH
49269: LD_VAR 0 5
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 3
49280: PUSH
49281: LD_INT 60
49283: PUSH
49284: EMPTY
49285: LIST
49286: PUSH
49287: EMPTY
49288: LIST
49289: LIST
49290: PUSH
49291: LD_INT 91
49293: PUSH
49294: LD_VAR 0 8
49298: PUSH
49299: LD_INT 6
49301: PUSH
49302: EMPTY
49303: LIST
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: LD_INT 25
49312: PUSH
49313: LD_INT 2
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 25
49322: PUSH
49323: LD_INT 16
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: EMPTY
49331: LIST
49332: LIST
49333: LIST
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: PPUSH
49341: CALL_OW 69
49345: PUSH
49346: LD_VAR 0 8
49350: PPUSH
49351: CALL_OW 313
49355: PPUSH
49356: LD_INT 3
49358: PUSH
49359: LD_INT 60
49361: PUSH
49362: EMPTY
49363: LIST
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: PUSH
49369: LD_INT 2
49371: PUSH
49372: LD_INT 25
49374: PUSH
49375: LD_INT 2
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 25
49384: PUSH
49385: LD_INT 16
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: LIST
49396: PUSH
49397: EMPTY
49398: LIST
49399: LIST
49400: PPUSH
49401: CALL_OW 72
49405: UNION
49406: ST_TO_ADDR
// if tmp then
49407: LD_VAR 0 4
49411: IFFALSE 49491
// begin tmp := ShrinkArray ( tmp , 3 ) ;
49413: LD_ADDR_VAR 0 4
49417: PUSH
49418: LD_VAR 0 4
49422: PPUSH
49423: LD_INT 3
49425: PPUSH
49426: CALL 92621 0 2
49430: ST_TO_ADDR
// for j in tmp do
49431: LD_ADDR_VAR 0 2
49435: PUSH
49436: LD_VAR 0 4
49440: PUSH
49441: FOR_IN
49442: IFFALSE 49485
// begin if IsInUnit ( j ) then
49444: LD_VAR 0 2
49448: PPUSH
49449: CALL_OW 310
49453: IFFALSE 49464
// ComExit ( j ) ;
49455: LD_VAR 0 2
49459: PPUSH
49460: CALL 92704 0 1
// AddComCollect ( j , x , y ) ;
49464: LD_VAR 0 2
49468: PPUSH
49469: LD_VAR 0 6
49473: PPUSH
49474: LD_VAR 0 7
49478: PPUSH
49479: CALL_OW 177
// end ;
49483: GO 49441
49485: POP
49486: POP
// exit ;
49487: POP
49488: POP
49489: GO 49718
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
49491: LD_ADDR_VAR 0 4
49495: PUSH
49496: LD_INT 22
49498: PUSH
49499: LD_VAR 0 5
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 91
49510: PUSH
49511: LD_VAR 0 8
49515: PUSH
49516: LD_INT 8
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 2
49526: PUSH
49527: LD_INT 34
49529: PUSH
49530: LD_INT 12
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: PUSH
49537: LD_INT 34
49539: PUSH
49540: LD_INT 51
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: LD_INT 34
49549: PUSH
49550: LD_INT 32
49552: PUSH
49553: EMPTY
49554: LIST
49555: LIST
49556: PUSH
49557: LD_INT 34
49559: PUSH
49560: LD_INT 89
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: EMPTY
49568: LIST
49569: LIST
49570: LIST
49571: LIST
49572: LIST
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: LIST
49578: PPUSH
49579: CALL_OW 69
49583: ST_TO_ADDR
// if tmp then
49584: LD_VAR 0 4
49588: IFFALSE 49714
// begin for j in tmp do
49590: LD_ADDR_VAR 0 2
49594: PUSH
49595: LD_VAR 0 4
49599: PUSH
49600: FOR_IN
49601: IFFALSE 49712
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
49603: LD_VAR 0 2
49607: PPUSH
49608: CALL_OW 262
49612: PUSH
49613: LD_INT 3
49615: EQUAL
49616: PUSH
49617: LD_VAR 0 2
49621: PPUSH
49622: CALL_OW 261
49626: PUSH
49627: LD_INT 20
49629: GREATER
49630: OR
49631: PUSH
49632: LD_VAR 0 2
49636: PPUSH
49637: CALL_OW 314
49641: NOT
49642: AND
49643: PUSH
49644: LD_VAR 0 2
49648: PPUSH
49649: CALL_OW 263
49653: PUSH
49654: LD_INT 1
49656: NONEQUAL
49657: PUSH
49658: LD_VAR 0 2
49662: PPUSH
49663: CALL_OW 311
49667: OR
49668: AND
49669: IFFALSE 49710
// begin ComCollect ( j , x , y ) ;
49671: LD_VAR 0 2
49675: PPUSH
49676: LD_VAR 0 6
49680: PPUSH
49681: LD_VAR 0 7
49685: PPUSH
49686: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
49690: LD_VAR 0 2
49694: PPUSH
49695: LD_VAR 0 8
49699: PPUSH
49700: CALL_OW 172
// exit ;
49704: POP
49705: POP
49706: POP
49707: POP
49708: GO 49718
// end ;
49710: GO 49600
49712: POP
49713: POP
// end ; end ;
49714: GO 49089
49716: POP
49717: POP
// end ; end_of_file
49718: PPOPN 9
49720: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
49721: LD_INT 0
49723: PPUSH
49724: PPUSH
49725: PPUSH
49726: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
49727: LD_VAR 0 1
49731: PPUSH
49732: CALL_OW 264
49736: PUSH
49737: LD_INT 91
49739: EQUAL
49740: IFFALSE 49812
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
49742: LD_INT 68
49744: PPUSH
49745: LD_VAR 0 1
49749: PPUSH
49750: CALL_OW 255
49754: PPUSH
49755: CALL_OW 321
49759: PUSH
49760: LD_INT 2
49762: EQUAL
49763: IFFALSE 49775
// eff := 70 else
49765: LD_ADDR_VAR 0 4
49769: PUSH
49770: LD_INT 70
49772: ST_TO_ADDR
49773: GO 49783
// eff := 30 ;
49775: LD_ADDR_VAR 0 4
49779: PUSH
49780: LD_INT 30
49782: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
49783: LD_VAR 0 1
49787: PPUSH
49788: CALL_OW 250
49792: PPUSH
49793: LD_VAR 0 1
49797: PPUSH
49798: CALL_OW 251
49802: PPUSH
49803: LD_VAR 0 4
49807: PPUSH
49808: CALL_OW 495
// end ; end ;
49812: LD_VAR 0 2
49816: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
49817: LD_INT 0
49819: PPUSH
// end ;
49820: LD_VAR 0 4
49824: RET
// export function SOS_Command ( cmd ) ; begin
49825: LD_INT 0
49827: PPUSH
// end ;
49828: LD_VAR 0 2
49832: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
49833: LD_INT 0
49835: PPUSH
// end ;
49836: LD_VAR 0 6
49840: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
49841: LD_INT 0
49843: PPUSH
49844: PPUSH
// if not vehicle or not factory then
49845: LD_VAR 0 1
49849: NOT
49850: PUSH
49851: LD_VAR 0 2
49855: NOT
49856: OR
49857: IFFALSE 49861
// exit ;
49859: GO 50092
// if factoryWaypoints >= factory then
49861: LD_EXP 145
49865: PUSH
49866: LD_VAR 0 2
49870: GREATEREQUAL
49871: IFFALSE 50092
// if factoryWaypoints [ factory ] then
49873: LD_EXP 145
49877: PUSH
49878: LD_VAR 0 2
49882: ARRAY
49883: IFFALSE 50092
// begin if GetControl ( vehicle ) = control_manual then
49885: LD_VAR 0 1
49889: PPUSH
49890: CALL_OW 263
49894: PUSH
49895: LD_INT 1
49897: EQUAL
49898: IFFALSE 49979
// begin driver := IsDrivenBy ( vehicle ) ;
49900: LD_ADDR_VAR 0 4
49904: PUSH
49905: LD_VAR 0 1
49909: PPUSH
49910: CALL_OW 311
49914: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
49915: LD_VAR 0 4
49919: PPUSH
49920: LD_EXP 145
49924: PUSH
49925: LD_VAR 0 2
49929: ARRAY
49930: PUSH
49931: LD_INT 3
49933: ARRAY
49934: PPUSH
49935: LD_EXP 145
49939: PUSH
49940: LD_VAR 0 2
49944: ARRAY
49945: PUSH
49946: LD_INT 4
49948: ARRAY
49949: PPUSH
49950: CALL_OW 171
// AddComExitVehicle ( driver ) ;
49954: LD_VAR 0 4
49958: PPUSH
49959: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
49963: LD_VAR 0 4
49967: PPUSH
49968: LD_VAR 0 2
49972: PPUSH
49973: CALL_OW 180
// end else
49977: GO 50092
// if GetControl ( vehicle ) = control_remote then
49979: LD_VAR 0 1
49983: PPUSH
49984: CALL_OW 263
49988: PUSH
49989: LD_INT 2
49991: EQUAL
49992: IFFALSE 50053
// begin wait ( 0 0$2 ) ;
49994: LD_INT 70
49996: PPUSH
49997: CALL_OW 67
// if Connect ( vehicle ) then
50001: LD_VAR 0 1
50005: PPUSH
50006: CALL 62923 0 1
50010: IFFALSE 50051
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
50012: LD_VAR 0 1
50016: PPUSH
50017: LD_EXP 145
50021: PUSH
50022: LD_VAR 0 2
50026: ARRAY
50027: PUSH
50028: LD_INT 3
50030: ARRAY
50031: PPUSH
50032: LD_EXP 145
50036: PUSH
50037: LD_VAR 0 2
50041: ARRAY
50042: PUSH
50043: LD_INT 4
50045: ARRAY
50046: PPUSH
50047: CALL_OW 171
// end else
50051: GO 50092
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
50053: LD_VAR 0 1
50057: PPUSH
50058: LD_EXP 145
50062: PUSH
50063: LD_VAR 0 2
50067: ARRAY
50068: PUSH
50069: LD_INT 3
50071: ARRAY
50072: PPUSH
50073: LD_EXP 145
50077: PUSH
50078: LD_VAR 0 2
50082: ARRAY
50083: PUSH
50084: LD_INT 4
50086: ARRAY
50087: PPUSH
50088: CALL_OW 171
// end ; end ;
50092: LD_VAR 0 3
50096: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
50097: LD_INT 0
50099: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
50100: LD_VAR 0 1
50104: PUSH
50105: LD_INT 250
50107: EQUAL
50108: PUSH
50109: LD_VAR 0 2
50113: PPUSH
50114: CALL_OW 264
50118: PUSH
50119: LD_INT 81
50121: EQUAL
50122: AND
50123: IFFALSE 50144
// MinerPlaceMine ( unit , x , y ) ;
50125: LD_VAR 0 2
50129: PPUSH
50130: LD_VAR 0 4
50134: PPUSH
50135: LD_VAR 0 5
50139: PPUSH
50140: CALL 53134 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
50144: LD_VAR 0 1
50148: PUSH
50149: LD_INT 251
50151: EQUAL
50152: PUSH
50153: LD_VAR 0 2
50157: PPUSH
50158: CALL_OW 264
50162: PUSH
50163: LD_INT 81
50165: EQUAL
50166: AND
50167: IFFALSE 50188
// MinerDetonateMine ( unit , x , y ) ;
50169: LD_VAR 0 2
50173: PPUSH
50174: LD_VAR 0 4
50178: PPUSH
50179: LD_VAR 0 5
50183: PPUSH
50184: CALL 53409 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
50188: LD_VAR 0 1
50192: PUSH
50193: LD_INT 252
50195: EQUAL
50196: PUSH
50197: LD_VAR 0 2
50201: PPUSH
50202: CALL_OW 264
50206: PUSH
50207: LD_INT 81
50209: EQUAL
50210: AND
50211: IFFALSE 50232
// MinerCreateMinefield ( unit , x , y ) ;
50213: LD_VAR 0 2
50217: PPUSH
50218: LD_VAR 0 4
50222: PPUSH
50223: LD_VAR 0 5
50227: PPUSH
50228: CALL 53826 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
50232: LD_VAR 0 1
50236: PUSH
50237: LD_INT 253
50239: EQUAL
50240: PUSH
50241: LD_VAR 0 2
50245: PPUSH
50246: CALL_OW 257
50250: PUSH
50251: LD_INT 5
50253: EQUAL
50254: AND
50255: IFFALSE 50276
// ComBinocular ( unit , x , y ) ;
50257: LD_VAR 0 2
50261: PPUSH
50262: LD_VAR 0 4
50266: PPUSH
50267: LD_VAR 0 5
50271: PPUSH
50272: CALL 54195 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
50276: LD_VAR 0 1
50280: PUSH
50281: LD_INT 254
50283: EQUAL
50284: PUSH
50285: LD_VAR 0 2
50289: PPUSH
50290: CALL_OW 264
50294: PUSH
50295: LD_INT 99
50297: EQUAL
50298: AND
50299: PUSH
50300: LD_VAR 0 3
50304: PPUSH
50305: CALL_OW 263
50309: PUSH
50310: LD_INT 3
50312: EQUAL
50313: AND
50314: IFFALSE 50330
// HackDestroyVehicle ( unit , selectedUnit ) ;
50316: LD_VAR 0 2
50320: PPUSH
50321: LD_VAR 0 3
50325: PPUSH
50326: CALL 52498 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
50330: LD_VAR 0 1
50334: PUSH
50335: LD_INT 255
50337: EQUAL
50338: PUSH
50339: LD_VAR 0 2
50343: PPUSH
50344: CALL_OW 264
50348: PUSH
50349: LD_INT 14
50351: PUSH
50352: LD_INT 53
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: IN
50359: AND
50360: PUSH
50361: LD_VAR 0 4
50365: PPUSH
50366: LD_VAR 0 5
50370: PPUSH
50371: CALL_OW 488
50375: AND
50376: IFFALSE 50400
// CutTreeXYR ( unit , x , y , 12 ) ;
50378: LD_VAR 0 2
50382: PPUSH
50383: LD_VAR 0 4
50387: PPUSH
50388: LD_VAR 0 5
50392: PPUSH
50393: LD_INT 12
50395: PPUSH
50396: CALL 50495 0 4
// if cmd = 256 then
50400: LD_VAR 0 1
50404: PUSH
50405: LD_INT 256
50407: EQUAL
50408: IFFALSE 50429
// SetFactoryWaypoint ( unit , x , y ) ;
50410: LD_VAR 0 2
50414: PPUSH
50415: LD_VAR 0 4
50419: PPUSH
50420: LD_VAR 0 5
50424: PPUSH
50425: CALL 48410 0 3
// if cmd = 257 then
50429: LD_VAR 0 1
50433: PUSH
50434: LD_INT 257
50436: EQUAL
50437: IFFALSE 50458
// SetWarehouseGatheringPoint ( unit , x , y ) ;
50439: LD_VAR 0 2
50443: PPUSH
50444: LD_VAR 0 4
50448: PPUSH
50449: LD_VAR 0 5
50453: PPUSH
50454: CALL 48772 0 3
// if cmd = 258 then
50458: LD_VAR 0 1
50462: PUSH
50463: LD_INT 258
50465: EQUAL
50466: IFFALSE 50490
// BurnTreeXYR ( unit , x , y , 8 ) ;
50468: LD_VAR 0 2
50472: PPUSH
50473: LD_VAR 0 4
50477: PPUSH
50478: LD_VAR 0 5
50482: PPUSH
50483: LD_INT 8
50485: PPUSH
50486: CALL 50889 0 4
// end ;
50490: LD_VAR 0 6
50494: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
50495: LD_INT 0
50497: PPUSH
50498: PPUSH
50499: PPUSH
50500: PPUSH
50501: PPUSH
50502: PPUSH
50503: PPUSH
50504: PPUSH
50505: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
50506: LD_VAR 0 1
50510: PPUSH
50511: CALL_OW 302
50515: NOT
50516: PUSH
50517: LD_VAR 0 2
50521: PPUSH
50522: LD_VAR 0 3
50526: PPUSH
50527: CALL_OW 488
50531: NOT
50532: OR
50533: PUSH
50534: LD_VAR 0 4
50538: NOT
50539: OR
50540: IFFALSE 50544
// exit ;
50542: GO 50884
// list := [ ] ;
50544: LD_ADDR_VAR 0 13
50548: PUSH
50549: EMPTY
50550: ST_TO_ADDR
// if x - r < 0 then
50551: LD_VAR 0 2
50555: PUSH
50556: LD_VAR 0 4
50560: MINUS
50561: PUSH
50562: LD_INT 0
50564: LESS
50565: IFFALSE 50577
// min_x := 0 else
50567: LD_ADDR_VAR 0 7
50571: PUSH
50572: LD_INT 0
50574: ST_TO_ADDR
50575: GO 50593
// min_x := x - r ;
50577: LD_ADDR_VAR 0 7
50581: PUSH
50582: LD_VAR 0 2
50586: PUSH
50587: LD_VAR 0 4
50591: MINUS
50592: ST_TO_ADDR
// if y - r < 0 then
50593: LD_VAR 0 3
50597: PUSH
50598: LD_VAR 0 4
50602: MINUS
50603: PUSH
50604: LD_INT 0
50606: LESS
50607: IFFALSE 50619
// min_y := 0 else
50609: LD_ADDR_VAR 0 8
50613: PUSH
50614: LD_INT 0
50616: ST_TO_ADDR
50617: GO 50635
// min_y := y - r ;
50619: LD_ADDR_VAR 0 8
50623: PUSH
50624: LD_VAR 0 3
50628: PUSH
50629: LD_VAR 0 4
50633: MINUS
50634: ST_TO_ADDR
// max_x := x + r ;
50635: LD_ADDR_VAR 0 9
50639: PUSH
50640: LD_VAR 0 2
50644: PUSH
50645: LD_VAR 0 4
50649: PLUS
50650: ST_TO_ADDR
// max_y := y + r ;
50651: LD_ADDR_VAR 0 10
50655: PUSH
50656: LD_VAR 0 3
50660: PUSH
50661: LD_VAR 0 4
50665: PLUS
50666: ST_TO_ADDR
// for _x = min_x to max_x do
50667: LD_ADDR_VAR 0 11
50671: PUSH
50672: DOUBLE
50673: LD_VAR 0 7
50677: DEC
50678: ST_TO_ADDR
50679: LD_VAR 0 9
50683: PUSH
50684: FOR_TO
50685: IFFALSE 50802
// for _y = min_y to max_y do
50687: LD_ADDR_VAR 0 12
50691: PUSH
50692: DOUBLE
50693: LD_VAR 0 8
50697: DEC
50698: ST_TO_ADDR
50699: LD_VAR 0 10
50703: PUSH
50704: FOR_TO
50705: IFFALSE 50798
// begin if not ValidHex ( _x , _y ) then
50707: LD_VAR 0 11
50711: PPUSH
50712: LD_VAR 0 12
50716: PPUSH
50717: CALL_OW 488
50721: NOT
50722: IFFALSE 50726
// continue ;
50724: GO 50704
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
50726: LD_VAR 0 11
50730: PPUSH
50731: LD_VAR 0 12
50735: PPUSH
50736: CALL_OW 351
50740: PUSH
50741: LD_VAR 0 11
50745: PPUSH
50746: LD_VAR 0 12
50750: PPUSH
50751: CALL_OW 554
50755: AND
50756: IFFALSE 50796
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
50758: LD_ADDR_VAR 0 13
50762: PUSH
50763: LD_VAR 0 13
50767: PPUSH
50768: LD_VAR 0 13
50772: PUSH
50773: LD_INT 1
50775: PLUS
50776: PPUSH
50777: LD_VAR 0 11
50781: PUSH
50782: LD_VAR 0 12
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PPUSH
50791: CALL_OW 2
50795: ST_TO_ADDR
// end ;
50796: GO 50704
50798: POP
50799: POP
50800: GO 50684
50802: POP
50803: POP
// if not list then
50804: LD_VAR 0 13
50808: NOT
50809: IFFALSE 50813
// exit ;
50811: GO 50884
// for i in list do
50813: LD_ADDR_VAR 0 6
50817: PUSH
50818: LD_VAR 0 13
50822: PUSH
50823: FOR_IN
50824: IFFALSE 50882
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
50826: LD_VAR 0 1
50830: PPUSH
50831: LD_STRING M
50833: PUSH
50834: LD_VAR 0 6
50838: PUSH
50839: LD_INT 1
50841: ARRAY
50842: PUSH
50843: LD_VAR 0 6
50847: PUSH
50848: LD_INT 2
50850: ARRAY
50851: PUSH
50852: LD_INT 0
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 0
50860: PUSH
50861: LD_INT 0
50863: PUSH
50864: EMPTY
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: LIST
50870: LIST
50871: LIST
50872: PUSH
50873: EMPTY
50874: LIST
50875: PPUSH
50876: CALL_OW 447
50880: GO 50823
50882: POP
50883: POP
// end ;
50884: LD_VAR 0 5
50888: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list , task ; begin
50889: LD_INT 0
50891: PPUSH
50892: PPUSH
50893: PPUSH
50894: PPUSH
50895: PPUSH
50896: PPUSH
50897: PPUSH
50898: PPUSH
50899: PPUSH
50900: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
50901: LD_VAR 0 1
50905: PPUSH
50906: CALL_OW 302
50910: NOT
50911: PUSH
50912: LD_VAR 0 2
50916: PPUSH
50917: LD_VAR 0 3
50921: PPUSH
50922: CALL_OW 488
50926: NOT
50927: OR
50928: PUSH
50929: LD_VAR 0 4
50933: NOT
50934: OR
50935: IFFALSE 50939
// exit ;
50937: GO 51452
// list := [ ] ;
50939: LD_ADDR_VAR 0 13
50943: PUSH
50944: EMPTY
50945: ST_TO_ADDR
// if x - r < 0 then
50946: LD_VAR 0 2
50950: PUSH
50951: LD_VAR 0 4
50955: MINUS
50956: PUSH
50957: LD_INT 0
50959: LESS
50960: IFFALSE 50972
// min_x := 0 else
50962: LD_ADDR_VAR 0 7
50966: PUSH
50967: LD_INT 0
50969: ST_TO_ADDR
50970: GO 50988
// min_x := x - r ;
50972: LD_ADDR_VAR 0 7
50976: PUSH
50977: LD_VAR 0 2
50981: PUSH
50982: LD_VAR 0 4
50986: MINUS
50987: ST_TO_ADDR
// if y - r < 0 then
50988: LD_VAR 0 3
50992: PUSH
50993: LD_VAR 0 4
50997: MINUS
50998: PUSH
50999: LD_INT 0
51001: LESS
51002: IFFALSE 51014
// min_y := 0 else
51004: LD_ADDR_VAR 0 8
51008: PUSH
51009: LD_INT 0
51011: ST_TO_ADDR
51012: GO 51030
// min_y := y - r ;
51014: LD_ADDR_VAR 0 8
51018: PUSH
51019: LD_VAR 0 3
51023: PUSH
51024: LD_VAR 0 4
51028: MINUS
51029: ST_TO_ADDR
// max_x := x + r ;
51030: LD_ADDR_VAR 0 9
51034: PUSH
51035: LD_VAR 0 2
51039: PUSH
51040: LD_VAR 0 4
51044: PLUS
51045: ST_TO_ADDR
// max_y := y + r ;
51046: LD_ADDR_VAR 0 10
51050: PUSH
51051: LD_VAR 0 3
51055: PUSH
51056: LD_VAR 0 4
51060: PLUS
51061: ST_TO_ADDR
// for _x = min_x to max_x do
51062: LD_ADDR_VAR 0 11
51066: PUSH
51067: DOUBLE
51068: LD_VAR 0 7
51072: DEC
51073: ST_TO_ADDR
51074: LD_VAR 0 9
51078: PUSH
51079: FOR_TO
51080: IFFALSE 51197
// for _y = min_y to max_y do
51082: LD_ADDR_VAR 0 12
51086: PUSH
51087: DOUBLE
51088: LD_VAR 0 8
51092: DEC
51093: ST_TO_ADDR
51094: LD_VAR 0 10
51098: PUSH
51099: FOR_TO
51100: IFFALSE 51193
// begin if not ValidHex ( _x , _y ) then
51102: LD_VAR 0 11
51106: PPUSH
51107: LD_VAR 0 12
51111: PPUSH
51112: CALL_OW 488
51116: NOT
51117: IFFALSE 51121
// continue ;
51119: GO 51099
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
51121: LD_VAR 0 11
51125: PPUSH
51126: LD_VAR 0 12
51130: PPUSH
51131: CALL_OW 351
51135: PUSH
51136: LD_VAR 0 11
51140: PPUSH
51141: LD_VAR 0 12
51145: PPUSH
51146: CALL_OW 554
51150: AND
51151: IFFALSE 51191
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
51153: LD_ADDR_VAR 0 13
51157: PUSH
51158: LD_VAR 0 13
51162: PPUSH
51163: LD_VAR 0 13
51167: PUSH
51168: LD_INT 1
51170: PLUS
51171: PPUSH
51172: LD_VAR 0 11
51176: PUSH
51177: LD_VAR 0 12
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PPUSH
51186: CALL_OW 2
51190: ST_TO_ADDR
// end ;
51191: GO 51099
51193: POP
51194: POP
51195: GO 51079
51197: POP
51198: POP
// if not list then
51199: LD_VAR 0 13
51203: NOT
51204: IFFALSE 51208
// exit ;
51206: GO 51452
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
51208: LD_ADDR_VAR 0 13
51212: PUSH
51213: LD_VAR 0 1
51217: PPUSH
51218: LD_VAR 0 13
51222: PPUSH
51223: LD_INT 1
51225: PPUSH
51226: LD_INT 1
51228: PPUSH
51229: CALL 60065 0 4
51233: ST_TO_ADDR
// ComStop ( flame ) ;
51234: LD_VAR 0 1
51238: PPUSH
51239: CALL_OW 141
// for i in list do
51243: LD_ADDR_VAR 0 6
51247: PUSH
51248: LD_VAR 0 13
51252: PUSH
51253: FOR_IN
51254: IFFALSE 51285
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
51256: LD_VAR 0 1
51260: PPUSH
51261: LD_VAR 0 6
51265: PUSH
51266: LD_INT 1
51268: ARRAY
51269: PPUSH
51270: LD_VAR 0 6
51274: PUSH
51275: LD_INT 2
51277: ARRAY
51278: PPUSH
51279: CALL_OW 176
51283: GO 51253
51285: POP
51286: POP
// repeat wait ( 0 0$1 ) ;
51287: LD_INT 35
51289: PPUSH
51290: CALL_OW 67
// task := GetTaskList ( flame ) ;
51294: LD_ADDR_VAR 0 14
51298: PUSH
51299: LD_VAR 0 1
51303: PPUSH
51304: CALL_OW 437
51308: ST_TO_ADDR
// if not task then
51309: LD_VAR 0 14
51313: NOT
51314: IFFALSE 51318
// exit ;
51316: GO 51452
// if task [ 1 ] [ 1 ] <> | then
51318: LD_VAR 0 14
51322: PUSH
51323: LD_INT 1
51325: ARRAY
51326: PUSH
51327: LD_INT 1
51329: ARRAY
51330: PUSH
51331: LD_STRING |
51333: NONEQUAL
51334: IFFALSE 51338
// exit ;
51336: GO 51452
// _x := task [ 1 ] [ 2 ] ;
51338: LD_ADDR_VAR 0 11
51342: PUSH
51343: LD_VAR 0 14
51347: PUSH
51348: LD_INT 1
51350: ARRAY
51351: PUSH
51352: LD_INT 2
51354: ARRAY
51355: ST_TO_ADDR
// _y := task [ 1 ] [ 3 ] ;
51356: LD_ADDR_VAR 0 12
51360: PUSH
51361: LD_VAR 0 14
51365: PUSH
51366: LD_INT 1
51368: ARRAY
51369: PUSH
51370: LD_INT 3
51372: ARRAY
51373: ST_TO_ADDR
// if not IsEnvironment ( _x , _y ) or not IsEnvironmentDestroyable ( _x , _y ) then
51374: LD_VAR 0 11
51378: PPUSH
51379: LD_VAR 0 12
51383: PPUSH
51384: CALL_OW 351
51388: NOT
51389: PUSH
51390: LD_VAR 0 11
51394: PPUSH
51395: LD_VAR 0 12
51399: PPUSH
51400: CALL_OW 554
51404: NOT
51405: OR
51406: IFFALSE 51440
// begin task := Delete ( task , 1 ) ;
51408: LD_ADDR_VAR 0 14
51412: PUSH
51413: LD_VAR 0 14
51417: PPUSH
51418: LD_INT 1
51420: PPUSH
51421: CALL_OW 3
51425: ST_TO_ADDR
// SetTaskList ( flame , task ) ;
51426: LD_VAR 0 1
51430: PPUSH
51431: LD_VAR 0 14
51435: PPUSH
51436: CALL_OW 446
// end ; until not HasTask ( flame ) ;
51440: LD_VAR 0 1
51444: PPUSH
51445: CALL_OW 314
51449: NOT
51450: IFFALSE 51287
// end ;
51452: LD_VAR 0 5
51456: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
51457: LD_EXP 148
51461: NOT
51462: IFFALSE 51512
51464: GO 51466
51466: DISABLE
// begin initHack := true ;
51467: LD_ADDR_EXP 148
51471: PUSH
51472: LD_INT 1
51474: ST_TO_ADDR
// hackTanks := [ ] ;
51475: LD_ADDR_EXP 149
51479: PUSH
51480: EMPTY
51481: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
51482: LD_ADDR_EXP 150
51486: PUSH
51487: EMPTY
51488: ST_TO_ADDR
// hackLimit := 3 ;
51489: LD_ADDR_EXP 151
51493: PUSH
51494: LD_INT 3
51496: ST_TO_ADDR
// hackDist := 12 ;
51497: LD_ADDR_EXP 152
51501: PUSH
51502: LD_INT 12
51504: ST_TO_ADDR
// hackCounter := [ ] ;
51505: LD_ADDR_EXP 153
51509: PUSH
51510: EMPTY
51511: ST_TO_ADDR
// end ;
51512: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
51513: LD_EXP 148
51517: PUSH
51518: LD_INT 34
51520: PUSH
51521: LD_INT 99
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PPUSH
51528: CALL_OW 69
51532: AND
51533: IFFALSE 51786
51535: GO 51537
51537: DISABLE
51538: LD_INT 0
51540: PPUSH
51541: PPUSH
// begin enable ;
51542: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
51543: LD_ADDR_VAR 0 1
51547: PUSH
51548: LD_INT 34
51550: PUSH
51551: LD_INT 99
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PPUSH
51558: CALL_OW 69
51562: PUSH
51563: FOR_IN
51564: IFFALSE 51784
// begin if not i in hackTanks then
51566: LD_VAR 0 1
51570: PUSH
51571: LD_EXP 149
51575: IN
51576: NOT
51577: IFFALSE 51660
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
51579: LD_ADDR_EXP 149
51583: PUSH
51584: LD_EXP 149
51588: PPUSH
51589: LD_EXP 149
51593: PUSH
51594: LD_INT 1
51596: PLUS
51597: PPUSH
51598: LD_VAR 0 1
51602: PPUSH
51603: CALL_OW 1
51607: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
51608: LD_ADDR_EXP 150
51612: PUSH
51613: LD_EXP 150
51617: PPUSH
51618: LD_EXP 150
51622: PUSH
51623: LD_INT 1
51625: PLUS
51626: PPUSH
51627: EMPTY
51628: PPUSH
51629: CALL_OW 1
51633: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
51634: LD_ADDR_EXP 153
51638: PUSH
51639: LD_EXP 153
51643: PPUSH
51644: LD_EXP 153
51648: PUSH
51649: LD_INT 1
51651: PLUS
51652: PPUSH
51653: EMPTY
51654: PPUSH
51655: CALL_OW 1
51659: ST_TO_ADDR
// end ; if not IsOk ( i ) then
51660: LD_VAR 0 1
51664: PPUSH
51665: CALL_OW 302
51669: NOT
51670: IFFALSE 51683
// begin HackUnlinkAll ( i ) ;
51672: LD_VAR 0 1
51676: PPUSH
51677: CALL 51789 0 1
// continue ;
51681: GO 51563
// end ; HackCheckCapturedStatus ( i ) ;
51683: LD_VAR 0 1
51687: PPUSH
51688: CALL 52232 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
51692: LD_ADDR_VAR 0 2
51696: PUSH
51697: LD_INT 81
51699: PUSH
51700: LD_VAR 0 1
51704: PPUSH
51705: CALL_OW 255
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 33
51716: PUSH
51717: LD_INT 3
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 91
51726: PUSH
51727: LD_VAR 0 1
51731: PUSH
51732: LD_EXP 152
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: LIST
51741: PUSH
51742: LD_INT 50
51744: PUSH
51745: EMPTY
51746: LIST
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: LIST
51752: LIST
51753: PPUSH
51754: CALL_OW 69
51758: ST_TO_ADDR
// if not tmp then
51759: LD_VAR 0 2
51763: NOT
51764: IFFALSE 51768
// continue ;
51766: GO 51563
// HackLink ( i , tmp ) ;
51768: LD_VAR 0 1
51772: PPUSH
51773: LD_VAR 0 2
51777: PPUSH
51778: CALL 51925 0 2
// end ;
51782: GO 51563
51784: POP
51785: POP
// end ;
51786: PPOPN 2
51788: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
51789: LD_INT 0
51791: PPUSH
51792: PPUSH
51793: PPUSH
// if not hack in hackTanks then
51794: LD_VAR 0 1
51798: PUSH
51799: LD_EXP 149
51803: IN
51804: NOT
51805: IFFALSE 51809
// exit ;
51807: GO 51920
// index := GetElementIndex ( hackTanks , hack ) ;
51809: LD_ADDR_VAR 0 4
51813: PUSH
51814: LD_EXP 149
51818: PPUSH
51819: LD_VAR 0 1
51823: PPUSH
51824: CALL 59362 0 2
51828: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
51829: LD_EXP 150
51833: PUSH
51834: LD_VAR 0 4
51838: ARRAY
51839: IFFALSE 51920
// begin for i in hackTanksCaptured [ index ] do
51841: LD_ADDR_VAR 0 3
51845: PUSH
51846: LD_EXP 150
51850: PUSH
51851: LD_VAR 0 4
51855: ARRAY
51856: PUSH
51857: FOR_IN
51858: IFFALSE 51884
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
51860: LD_VAR 0 3
51864: PUSH
51865: LD_INT 1
51867: ARRAY
51868: PPUSH
51869: LD_VAR 0 3
51873: PUSH
51874: LD_INT 2
51876: ARRAY
51877: PPUSH
51878: CALL_OW 235
51882: GO 51857
51884: POP
51885: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
51886: LD_ADDR_EXP 150
51890: PUSH
51891: LD_EXP 150
51895: PPUSH
51896: LD_VAR 0 4
51900: PPUSH
51901: EMPTY
51902: PPUSH
51903: CALL_OW 1
51907: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
51908: LD_VAR 0 1
51912: PPUSH
51913: LD_INT 0
51915: PPUSH
51916: CALL_OW 505
// end ; end ;
51920: LD_VAR 0 2
51924: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
51925: LD_INT 0
51927: PPUSH
51928: PPUSH
51929: PPUSH
// if not hack in hackTanks or not vehicles then
51930: LD_VAR 0 1
51934: PUSH
51935: LD_EXP 149
51939: IN
51940: NOT
51941: PUSH
51942: LD_VAR 0 2
51946: NOT
51947: OR
51948: IFFALSE 51952
// exit ;
51950: GO 52227
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
51952: LD_ADDR_VAR 0 2
51956: PUSH
51957: LD_VAR 0 1
51961: PPUSH
51962: LD_VAR 0 2
51966: PPUSH
51967: LD_INT 1
51969: PPUSH
51970: LD_INT 1
51972: PPUSH
51973: CALL 60012 0 4
51977: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
51978: LD_ADDR_VAR 0 5
51982: PUSH
51983: LD_EXP 149
51987: PPUSH
51988: LD_VAR 0 1
51992: PPUSH
51993: CALL 59362 0 2
51997: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
51998: LD_EXP 150
52002: PUSH
52003: LD_VAR 0 5
52007: ARRAY
52008: PUSH
52009: LD_EXP 151
52013: LESS
52014: IFFALSE 52203
// begin for i := 1 to vehicles do
52016: LD_ADDR_VAR 0 4
52020: PUSH
52021: DOUBLE
52022: LD_INT 1
52024: DEC
52025: ST_TO_ADDR
52026: LD_VAR 0 2
52030: PUSH
52031: FOR_TO
52032: IFFALSE 52201
// begin if hackTanksCaptured [ index ] = hackLimit then
52034: LD_EXP 150
52038: PUSH
52039: LD_VAR 0 5
52043: ARRAY
52044: PUSH
52045: LD_EXP 151
52049: EQUAL
52050: IFFALSE 52054
// break ;
52052: GO 52201
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
52054: LD_ADDR_EXP 153
52058: PUSH
52059: LD_EXP 153
52063: PPUSH
52064: LD_VAR 0 5
52068: PPUSH
52069: LD_EXP 153
52073: PUSH
52074: LD_VAR 0 5
52078: ARRAY
52079: PUSH
52080: LD_INT 1
52082: PLUS
52083: PPUSH
52084: CALL_OW 1
52088: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
52089: LD_ADDR_EXP 150
52093: PUSH
52094: LD_EXP 150
52098: PPUSH
52099: LD_VAR 0 5
52103: PUSH
52104: LD_EXP 150
52108: PUSH
52109: LD_VAR 0 5
52113: ARRAY
52114: PUSH
52115: LD_INT 1
52117: PLUS
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PPUSH
52123: LD_VAR 0 2
52127: PUSH
52128: LD_VAR 0 4
52132: ARRAY
52133: PUSH
52134: LD_VAR 0 2
52138: PUSH
52139: LD_VAR 0 4
52143: ARRAY
52144: PPUSH
52145: CALL_OW 255
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PPUSH
52154: CALL 59577 0 3
52158: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
52159: LD_VAR 0 2
52163: PUSH
52164: LD_VAR 0 4
52168: ARRAY
52169: PPUSH
52170: LD_VAR 0 1
52174: PPUSH
52175: CALL_OW 255
52179: PPUSH
52180: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
52184: LD_VAR 0 2
52188: PUSH
52189: LD_VAR 0 4
52193: ARRAY
52194: PPUSH
52195: CALL_OW 141
// end ;
52199: GO 52031
52201: POP
52202: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
52203: LD_VAR 0 1
52207: PPUSH
52208: LD_EXP 150
52212: PUSH
52213: LD_VAR 0 5
52217: ARRAY
52218: PUSH
52219: LD_INT 0
52221: PLUS
52222: PPUSH
52223: CALL_OW 505
// end ;
52227: LD_VAR 0 3
52231: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
52232: LD_INT 0
52234: PPUSH
52235: PPUSH
52236: PPUSH
52237: PPUSH
// if not hack in hackTanks then
52238: LD_VAR 0 1
52242: PUSH
52243: LD_EXP 149
52247: IN
52248: NOT
52249: IFFALSE 52253
// exit ;
52251: GO 52493
// index := GetElementIndex ( hackTanks , hack ) ;
52253: LD_ADDR_VAR 0 4
52257: PUSH
52258: LD_EXP 149
52262: PPUSH
52263: LD_VAR 0 1
52267: PPUSH
52268: CALL 59362 0 2
52272: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
52273: LD_ADDR_VAR 0 3
52277: PUSH
52278: DOUBLE
52279: LD_EXP 150
52283: PUSH
52284: LD_VAR 0 4
52288: ARRAY
52289: INC
52290: ST_TO_ADDR
52291: LD_INT 1
52293: PUSH
52294: FOR_DOWNTO
52295: IFFALSE 52467
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
52297: LD_ADDR_VAR 0 5
52301: PUSH
52302: LD_EXP 150
52306: PUSH
52307: LD_VAR 0 4
52311: ARRAY
52312: PUSH
52313: LD_VAR 0 3
52317: ARRAY
52318: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
52319: LD_VAR 0 5
52323: PUSH
52324: LD_INT 1
52326: ARRAY
52327: PPUSH
52328: CALL_OW 302
52332: NOT
52333: PUSH
52334: LD_VAR 0 5
52338: PUSH
52339: LD_INT 1
52341: ARRAY
52342: PPUSH
52343: CALL_OW 255
52347: PUSH
52348: LD_VAR 0 1
52352: PPUSH
52353: CALL_OW 255
52357: NONEQUAL
52358: OR
52359: IFFALSE 52465
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
52361: LD_VAR 0 5
52365: PUSH
52366: LD_INT 1
52368: ARRAY
52369: PPUSH
52370: CALL_OW 305
52374: PUSH
52375: LD_VAR 0 5
52379: PUSH
52380: LD_INT 1
52382: ARRAY
52383: PPUSH
52384: CALL_OW 255
52388: PUSH
52389: LD_VAR 0 1
52393: PPUSH
52394: CALL_OW 255
52398: EQUAL
52399: AND
52400: IFFALSE 52424
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
52402: LD_VAR 0 5
52406: PUSH
52407: LD_INT 1
52409: ARRAY
52410: PPUSH
52411: LD_VAR 0 5
52415: PUSH
52416: LD_INT 2
52418: ARRAY
52419: PPUSH
52420: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
52424: LD_ADDR_EXP 150
52428: PUSH
52429: LD_EXP 150
52433: PPUSH
52434: LD_VAR 0 4
52438: PPUSH
52439: LD_EXP 150
52443: PUSH
52444: LD_VAR 0 4
52448: ARRAY
52449: PPUSH
52450: LD_VAR 0 3
52454: PPUSH
52455: CALL_OW 3
52459: PPUSH
52460: CALL_OW 1
52464: ST_TO_ADDR
// end ; end ;
52465: GO 52294
52467: POP
52468: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
52469: LD_VAR 0 1
52473: PPUSH
52474: LD_EXP 150
52478: PUSH
52479: LD_VAR 0 4
52483: ARRAY
52484: PUSH
52485: LD_INT 0
52487: PLUS
52488: PPUSH
52489: CALL_OW 505
// end ;
52493: LD_VAR 0 2
52497: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
52498: LD_INT 0
52500: PPUSH
52501: PPUSH
52502: PPUSH
52503: PPUSH
// if not hack in hackTanks then
52504: LD_VAR 0 1
52508: PUSH
52509: LD_EXP 149
52513: IN
52514: NOT
52515: IFFALSE 52519
// exit ;
52517: GO 52604
// index := GetElementIndex ( hackTanks , hack ) ;
52519: LD_ADDR_VAR 0 5
52523: PUSH
52524: LD_EXP 149
52528: PPUSH
52529: LD_VAR 0 1
52533: PPUSH
52534: CALL 59362 0 2
52538: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
52539: LD_ADDR_VAR 0 4
52543: PUSH
52544: DOUBLE
52545: LD_INT 1
52547: DEC
52548: ST_TO_ADDR
52549: LD_EXP 150
52553: PUSH
52554: LD_VAR 0 5
52558: ARRAY
52559: PUSH
52560: FOR_TO
52561: IFFALSE 52602
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
52563: LD_EXP 150
52567: PUSH
52568: LD_VAR 0 5
52572: ARRAY
52573: PUSH
52574: LD_VAR 0 4
52578: ARRAY
52579: PUSH
52580: LD_INT 1
52582: ARRAY
52583: PUSH
52584: LD_VAR 0 2
52588: EQUAL
52589: IFFALSE 52600
// KillUnit ( vehicle ) ;
52591: LD_VAR 0 2
52595: PPUSH
52596: CALL_OW 66
52600: GO 52560
52602: POP
52603: POP
// end ;
52604: LD_VAR 0 3
52608: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
52609: LD_EXP 154
52613: NOT
52614: IFFALSE 52649
52616: GO 52618
52618: DISABLE
// begin initMiner := true ;
52619: LD_ADDR_EXP 154
52623: PUSH
52624: LD_INT 1
52626: ST_TO_ADDR
// minersList := [ ] ;
52627: LD_ADDR_EXP 155
52631: PUSH
52632: EMPTY
52633: ST_TO_ADDR
// minerMinesList := [ ] ;
52634: LD_ADDR_EXP 156
52638: PUSH
52639: EMPTY
52640: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
52641: LD_ADDR_EXP 157
52645: PUSH
52646: LD_INT 5
52648: ST_TO_ADDR
// end ;
52649: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
52650: LD_EXP 154
52654: PUSH
52655: LD_INT 34
52657: PUSH
52658: LD_INT 81
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PPUSH
52665: CALL_OW 69
52669: AND
52670: IFFALSE 53131
52672: GO 52674
52674: DISABLE
52675: LD_INT 0
52677: PPUSH
52678: PPUSH
52679: PPUSH
52680: PPUSH
// begin enable ;
52681: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
52682: LD_ADDR_VAR 0 1
52686: PUSH
52687: LD_INT 34
52689: PUSH
52690: LD_INT 81
52692: PUSH
52693: EMPTY
52694: LIST
52695: LIST
52696: PPUSH
52697: CALL_OW 69
52701: PUSH
52702: FOR_IN
52703: IFFALSE 52775
// begin if not i in minersList then
52705: LD_VAR 0 1
52709: PUSH
52710: LD_EXP 155
52714: IN
52715: NOT
52716: IFFALSE 52773
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
52718: LD_ADDR_EXP 155
52722: PUSH
52723: LD_EXP 155
52727: PPUSH
52728: LD_EXP 155
52732: PUSH
52733: LD_INT 1
52735: PLUS
52736: PPUSH
52737: LD_VAR 0 1
52741: PPUSH
52742: CALL_OW 1
52746: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
52747: LD_ADDR_EXP 156
52751: PUSH
52752: LD_EXP 156
52756: PPUSH
52757: LD_EXP 156
52761: PUSH
52762: LD_INT 1
52764: PLUS
52765: PPUSH
52766: EMPTY
52767: PPUSH
52768: CALL_OW 1
52772: ST_TO_ADDR
// end end ;
52773: GO 52702
52775: POP
52776: POP
// for i := minerMinesList downto 1 do
52777: LD_ADDR_VAR 0 1
52781: PUSH
52782: DOUBLE
52783: LD_EXP 156
52787: INC
52788: ST_TO_ADDR
52789: LD_INT 1
52791: PUSH
52792: FOR_DOWNTO
52793: IFFALSE 53129
// begin if IsLive ( minersList [ i ] ) then
52795: LD_EXP 155
52799: PUSH
52800: LD_VAR 0 1
52804: ARRAY
52805: PPUSH
52806: CALL_OW 300
52810: IFFALSE 52838
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
52812: LD_EXP 155
52816: PUSH
52817: LD_VAR 0 1
52821: ARRAY
52822: PPUSH
52823: LD_EXP 156
52827: PUSH
52828: LD_VAR 0 1
52832: ARRAY
52833: PPUSH
52834: CALL_OW 505
// if not minerMinesList [ i ] then
52838: LD_EXP 156
52842: PUSH
52843: LD_VAR 0 1
52847: ARRAY
52848: NOT
52849: IFFALSE 52853
// continue ;
52851: GO 52792
// for j := minerMinesList [ i ] downto 1 do
52853: LD_ADDR_VAR 0 2
52857: PUSH
52858: DOUBLE
52859: LD_EXP 156
52863: PUSH
52864: LD_VAR 0 1
52868: ARRAY
52869: INC
52870: ST_TO_ADDR
52871: LD_INT 1
52873: PUSH
52874: FOR_DOWNTO
52875: IFFALSE 53125
// begin side := GetSide ( minersList [ i ] ) ;
52877: LD_ADDR_VAR 0 3
52881: PUSH
52882: LD_EXP 155
52886: PUSH
52887: LD_VAR 0 1
52891: ARRAY
52892: PPUSH
52893: CALL_OW 255
52897: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
52898: LD_ADDR_VAR 0 4
52902: PUSH
52903: LD_EXP 156
52907: PUSH
52908: LD_VAR 0 1
52912: ARRAY
52913: PUSH
52914: LD_VAR 0 2
52918: ARRAY
52919: PUSH
52920: LD_INT 1
52922: ARRAY
52923: PPUSH
52924: LD_EXP 156
52928: PUSH
52929: LD_VAR 0 1
52933: ARRAY
52934: PUSH
52935: LD_VAR 0 2
52939: ARRAY
52940: PUSH
52941: LD_INT 2
52943: ARRAY
52944: PPUSH
52945: CALL_OW 428
52949: ST_TO_ADDR
// if not tmp then
52950: LD_VAR 0 4
52954: NOT
52955: IFFALSE 52959
// continue ;
52957: GO 52874
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
52959: LD_VAR 0 4
52963: PUSH
52964: LD_INT 81
52966: PUSH
52967: LD_VAR 0 3
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PPUSH
52976: CALL_OW 69
52980: IN
52981: PUSH
52982: LD_EXP 156
52986: PUSH
52987: LD_VAR 0 1
52991: ARRAY
52992: PUSH
52993: LD_VAR 0 2
52997: ARRAY
52998: PUSH
52999: LD_INT 1
53001: ARRAY
53002: PPUSH
53003: LD_EXP 156
53007: PUSH
53008: LD_VAR 0 1
53012: ARRAY
53013: PUSH
53014: LD_VAR 0 2
53018: ARRAY
53019: PUSH
53020: LD_INT 2
53022: ARRAY
53023: PPUSH
53024: CALL_OW 458
53028: AND
53029: IFFALSE 53123
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
53031: LD_EXP 156
53035: PUSH
53036: LD_VAR 0 1
53040: ARRAY
53041: PUSH
53042: LD_VAR 0 2
53046: ARRAY
53047: PUSH
53048: LD_INT 1
53050: ARRAY
53051: PPUSH
53052: LD_EXP 156
53056: PUSH
53057: LD_VAR 0 1
53061: ARRAY
53062: PUSH
53063: LD_VAR 0 2
53067: ARRAY
53068: PUSH
53069: LD_INT 2
53071: ARRAY
53072: PPUSH
53073: LD_VAR 0 3
53077: PPUSH
53078: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
53082: LD_ADDR_EXP 156
53086: PUSH
53087: LD_EXP 156
53091: PPUSH
53092: LD_VAR 0 1
53096: PPUSH
53097: LD_EXP 156
53101: PUSH
53102: LD_VAR 0 1
53106: ARRAY
53107: PPUSH
53108: LD_VAR 0 2
53112: PPUSH
53113: CALL_OW 3
53117: PPUSH
53118: CALL_OW 1
53122: ST_TO_ADDR
// end ; end ;
53123: GO 52874
53125: POP
53126: POP
// end ;
53127: GO 52792
53129: POP
53130: POP
// end ;
53131: PPOPN 4
53133: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
53134: LD_INT 0
53136: PPUSH
53137: PPUSH
// result := false ;
53138: LD_ADDR_VAR 0 4
53142: PUSH
53143: LD_INT 0
53145: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
53146: LD_VAR 0 1
53150: PPUSH
53151: CALL_OW 264
53155: PUSH
53156: LD_INT 81
53158: EQUAL
53159: NOT
53160: IFFALSE 53164
// exit ;
53162: GO 53404
// index := GetElementIndex ( minersList , unit ) ;
53164: LD_ADDR_VAR 0 5
53168: PUSH
53169: LD_EXP 155
53173: PPUSH
53174: LD_VAR 0 1
53178: PPUSH
53179: CALL 59362 0 2
53183: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
53184: LD_EXP 156
53188: PUSH
53189: LD_VAR 0 5
53193: ARRAY
53194: PUSH
53195: LD_EXP 157
53199: GREATEREQUAL
53200: IFFALSE 53204
// exit ;
53202: GO 53404
// ComMoveXY ( unit , x , y ) ;
53204: LD_VAR 0 1
53208: PPUSH
53209: LD_VAR 0 2
53213: PPUSH
53214: LD_VAR 0 3
53218: PPUSH
53219: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
53223: LD_INT 35
53225: PPUSH
53226: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
53230: LD_VAR 0 1
53234: PPUSH
53235: LD_VAR 0 2
53239: PPUSH
53240: LD_VAR 0 3
53244: PPUSH
53245: CALL 91103 0 3
53249: NOT
53250: PUSH
53251: LD_VAR 0 1
53255: PPUSH
53256: CALL_OW 314
53260: AND
53261: IFFALSE 53265
// exit ;
53263: GO 53404
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
53265: LD_VAR 0 2
53269: PPUSH
53270: LD_VAR 0 3
53274: PPUSH
53275: CALL_OW 428
53279: PUSH
53280: LD_VAR 0 1
53284: EQUAL
53285: PUSH
53286: LD_VAR 0 1
53290: PPUSH
53291: CALL_OW 314
53295: NOT
53296: AND
53297: IFFALSE 53223
// PlaySoundXY ( x , y , PlantMine ) ;
53299: LD_VAR 0 2
53303: PPUSH
53304: LD_VAR 0 3
53308: PPUSH
53309: LD_STRING PlantMine
53311: PPUSH
53312: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
53316: LD_VAR 0 2
53320: PPUSH
53321: LD_VAR 0 3
53325: PPUSH
53326: LD_VAR 0 1
53330: PPUSH
53331: CALL_OW 255
53335: PPUSH
53336: LD_INT 0
53338: PPUSH
53339: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
53343: LD_ADDR_EXP 156
53347: PUSH
53348: LD_EXP 156
53352: PPUSH
53353: LD_VAR 0 5
53357: PUSH
53358: LD_EXP 156
53362: PUSH
53363: LD_VAR 0 5
53367: ARRAY
53368: PUSH
53369: LD_INT 1
53371: PLUS
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PPUSH
53377: LD_VAR 0 2
53381: PUSH
53382: LD_VAR 0 3
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PPUSH
53391: CALL 59577 0 3
53395: ST_TO_ADDR
// result := true ;
53396: LD_ADDR_VAR 0 4
53400: PUSH
53401: LD_INT 1
53403: ST_TO_ADDR
// end ;
53404: LD_VAR 0 4
53408: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
53409: LD_INT 0
53411: PPUSH
53412: PPUSH
53413: PPUSH
// if not unit in minersList then
53414: LD_VAR 0 1
53418: PUSH
53419: LD_EXP 155
53423: IN
53424: NOT
53425: IFFALSE 53429
// exit ;
53427: GO 53821
// index := GetElementIndex ( minersList , unit ) ;
53429: LD_ADDR_VAR 0 6
53433: PUSH
53434: LD_EXP 155
53438: PPUSH
53439: LD_VAR 0 1
53443: PPUSH
53444: CALL 59362 0 2
53448: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
53449: LD_ADDR_VAR 0 5
53453: PUSH
53454: DOUBLE
53455: LD_EXP 156
53459: PUSH
53460: LD_VAR 0 6
53464: ARRAY
53465: INC
53466: ST_TO_ADDR
53467: LD_INT 1
53469: PUSH
53470: FOR_DOWNTO
53471: IFFALSE 53632
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
53473: LD_EXP 156
53477: PUSH
53478: LD_VAR 0 6
53482: ARRAY
53483: PUSH
53484: LD_VAR 0 5
53488: ARRAY
53489: PUSH
53490: LD_INT 1
53492: ARRAY
53493: PUSH
53494: LD_VAR 0 2
53498: EQUAL
53499: PUSH
53500: LD_EXP 156
53504: PUSH
53505: LD_VAR 0 6
53509: ARRAY
53510: PUSH
53511: LD_VAR 0 5
53515: ARRAY
53516: PUSH
53517: LD_INT 2
53519: ARRAY
53520: PUSH
53521: LD_VAR 0 3
53525: EQUAL
53526: AND
53527: IFFALSE 53630
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
53529: LD_EXP 156
53533: PUSH
53534: LD_VAR 0 6
53538: ARRAY
53539: PUSH
53540: LD_VAR 0 5
53544: ARRAY
53545: PUSH
53546: LD_INT 1
53548: ARRAY
53549: PPUSH
53550: LD_EXP 156
53554: PUSH
53555: LD_VAR 0 6
53559: ARRAY
53560: PUSH
53561: LD_VAR 0 5
53565: ARRAY
53566: PUSH
53567: LD_INT 2
53569: ARRAY
53570: PPUSH
53571: LD_VAR 0 1
53575: PPUSH
53576: CALL_OW 255
53580: PPUSH
53581: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
53585: LD_ADDR_EXP 156
53589: PUSH
53590: LD_EXP 156
53594: PPUSH
53595: LD_VAR 0 6
53599: PPUSH
53600: LD_EXP 156
53604: PUSH
53605: LD_VAR 0 6
53609: ARRAY
53610: PPUSH
53611: LD_VAR 0 5
53615: PPUSH
53616: CALL_OW 3
53620: PPUSH
53621: CALL_OW 1
53625: ST_TO_ADDR
// exit ;
53626: POP
53627: POP
53628: GO 53821
// end ; end ;
53630: GO 53470
53632: POP
53633: POP
// for i := minerMinesList [ index ] downto 1 do
53634: LD_ADDR_VAR 0 5
53638: PUSH
53639: DOUBLE
53640: LD_EXP 156
53644: PUSH
53645: LD_VAR 0 6
53649: ARRAY
53650: INC
53651: ST_TO_ADDR
53652: LD_INT 1
53654: PUSH
53655: FOR_DOWNTO
53656: IFFALSE 53819
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
53658: LD_EXP 156
53662: PUSH
53663: LD_VAR 0 6
53667: ARRAY
53668: PUSH
53669: LD_VAR 0 5
53673: ARRAY
53674: PUSH
53675: LD_INT 1
53677: ARRAY
53678: PPUSH
53679: LD_EXP 156
53683: PUSH
53684: LD_VAR 0 6
53688: ARRAY
53689: PUSH
53690: LD_VAR 0 5
53694: ARRAY
53695: PUSH
53696: LD_INT 2
53698: ARRAY
53699: PPUSH
53700: LD_VAR 0 2
53704: PPUSH
53705: LD_VAR 0 3
53709: PPUSH
53710: CALL_OW 298
53714: PUSH
53715: LD_INT 6
53717: LESS
53718: IFFALSE 53817
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
53720: LD_EXP 156
53724: PUSH
53725: LD_VAR 0 6
53729: ARRAY
53730: PUSH
53731: LD_VAR 0 5
53735: ARRAY
53736: PUSH
53737: LD_INT 1
53739: ARRAY
53740: PPUSH
53741: LD_EXP 156
53745: PUSH
53746: LD_VAR 0 6
53750: ARRAY
53751: PUSH
53752: LD_VAR 0 5
53756: ARRAY
53757: PUSH
53758: LD_INT 2
53760: ARRAY
53761: PPUSH
53762: LD_VAR 0 1
53766: PPUSH
53767: CALL_OW 255
53771: PPUSH
53772: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
53776: LD_ADDR_EXP 156
53780: PUSH
53781: LD_EXP 156
53785: PPUSH
53786: LD_VAR 0 6
53790: PPUSH
53791: LD_EXP 156
53795: PUSH
53796: LD_VAR 0 6
53800: ARRAY
53801: PPUSH
53802: LD_VAR 0 5
53806: PPUSH
53807: CALL_OW 3
53811: PPUSH
53812: CALL_OW 1
53816: ST_TO_ADDR
// end ; end ;
53817: GO 53655
53819: POP
53820: POP
// end ;
53821: LD_VAR 0 4
53825: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
53826: LD_INT 0
53828: PPUSH
53829: PPUSH
53830: PPUSH
53831: PPUSH
53832: PPUSH
53833: PPUSH
53834: PPUSH
53835: PPUSH
53836: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
53837: LD_VAR 0 1
53841: PPUSH
53842: CALL_OW 264
53846: PUSH
53847: LD_INT 81
53849: EQUAL
53850: NOT
53851: PUSH
53852: LD_VAR 0 1
53856: PUSH
53857: LD_EXP 155
53861: IN
53862: NOT
53863: OR
53864: IFFALSE 53868
// exit ;
53866: GO 54190
// index := GetElementIndex ( minersList , unit ) ;
53868: LD_ADDR_VAR 0 6
53872: PUSH
53873: LD_EXP 155
53877: PPUSH
53878: LD_VAR 0 1
53882: PPUSH
53883: CALL 59362 0 2
53887: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
53888: LD_ADDR_VAR 0 8
53892: PUSH
53893: LD_EXP 157
53897: PUSH
53898: LD_EXP 156
53902: PUSH
53903: LD_VAR 0 6
53907: ARRAY
53908: MINUS
53909: ST_TO_ADDR
// if not minesFreeAmount then
53910: LD_VAR 0 8
53914: NOT
53915: IFFALSE 53919
// exit ;
53917: GO 54190
// tmp := [ ] ;
53919: LD_ADDR_VAR 0 7
53923: PUSH
53924: EMPTY
53925: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
53926: LD_ADDR_VAR 0 5
53930: PUSH
53931: DOUBLE
53932: LD_INT 1
53934: DEC
53935: ST_TO_ADDR
53936: LD_VAR 0 8
53940: PUSH
53941: FOR_TO
53942: IFFALSE 54137
// begin _d := rand ( 0 , 5 ) ;
53944: LD_ADDR_VAR 0 11
53948: PUSH
53949: LD_INT 0
53951: PPUSH
53952: LD_INT 5
53954: PPUSH
53955: CALL_OW 12
53959: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
53960: LD_ADDR_VAR 0 12
53964: PUSH
53965: LD_INT 2
53967: PPUSH
53968: LD_INT 6
53970: PPUSH
53971: CALL_OW 12
53975: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
53976: LD_ADDR_VAR 0 9
53980: PUSH
53981: LD_VAR 0 2
53985: PPUSH
53986: LD_VAR 0 11
53990: PPUSH
53991: LD_VAR 0 12
53995: PPUSH
53996: CALL_OW 272
54000: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
54001: LD_ADDR_VAR 0 10
54005: PUSH
54006: LD_VAR 0 3
54010: PPUSH
54011: LD_VAR 0 11
54015: PPUSH
54016: LD_VAR 0 12
54020: PPUSH
54021: CALL_OW 273
54025: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
54026: LD_VAR 0 9
54030: PPUSH
54031: LD_VAR 0 10
54035: PPUSH
54036: CALL_OW 488
54040: PUSH
54041: LD_VAR 0 9
54045: PUSH
54046: LD_VAR 0 10
54050: PUSH
54051: EMPTY
54052: LIST
54053: LIST
54054: PUSH
54055: LD_VAR 0 7
54059: IN
54060: NOT
54061: AND
54062: PUSH
54063: LD_VAR 0 9
54067: PPUSH
54068: LD_VAR 0 10
54072: PPUSH
54073: CALL_OW 458
54077: NOT
54078: AND
54079: IFFALSE 54121
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
54081: LD_ADDR_VAR 0 7
54085: PUSH
54086: LD_VAR 0 7
54090: PPUSH
54091: LD_VAR 0 7
54095: PUSH
54096: LD_INT 1
54098: PLUS
54099: PPUSH
54100: LD_VAR 0 9
54104: PUSH
54105: LD_VAR 0 10
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PPUSH
54114: CALL_OW 1
54118: ST_TO_ADDR
54119: GO 54135
// i := i - 1 ;
54121: LD_ADDR_VAR 0 5
54125: PUSH
54126: LD_VAR 0 5
54130: PUSH
54131: LD_INT 1
54133: MINUS
54134: ST_TO_ADDR
// end ;
54135: GO 53941
54137: POP
54138: POP
// for i in tmp do
54139: LD_ADDR_VAR 0 5
54143: PUSH
54144: LD_VAR 0 7
54148: PUSH
54149: FOR_IN
54150: IFFALSE 54188
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
54152: LD_VAR 0 1
54156: PPUSH
54157: LD_VAR 0 5
54161: PUSH
54162: LD_INT 1
54164: ARRAY
54165: PPUSH
54166: LD_VAR 0 5
54170: PUSH
54171: LD_INT 2
54173: ARRAY
54174: PPUSH
54175: CALL 53134 0 3
54179: NOT
54180: IFFALSE 54186
// exit ;
54182: POP
54183: POP
54184: GO 54190
54186: GO 54149
54188: POP
54189: POP
// end ;
54190: LD_VAR 0 4
54194: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
54195: LD_INT 0
54197: PPUSH
54198: PPUSH
54199: PPUSH
54200: PPUSH
54201: PPUSH
54202: PPUSH
54203: PPUSH
// if not GetClass ( unit ) = class_sniper then
54204: LD_VAR 0 1
54208: PPUSH
54209: CALL_OW 257
54213: PUSH
54214: LD_INT 5
54216: EQUAL
54217: NOT
54218: IFFALSE 54222
// exit ;
54220: GO 54610
// dist := 8 ;
54222: LD_ADDR_VAR 0 5
54226: PUSH
54227: LD_INT 8
54229: ST_TO_ADDR
// viewRange := 12 ;
54230: LD_ADDR_VAR 0 7
54234: PUSH
54235: LD_INT 12
54237: ST_TO_ADDR
// side := GetSide ( unit ) ;
54238: LD_ADDR_VAR 0 6
54242: PUSH
54243: LD_VAR 0 1
54247: PPUSH
54248: CALL_OW 255
54252: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
54253: LD_INT 61
54255: PPUSH
54256: LD_VAR 0 6
54260: PPUSH
54261: CALL_OW 321
54265: PUSH
54266: LD_INT 2
54268: EQUAL
54269: IFFALSE 54279
// viewRange := 16 ;
54271: LD_ADDR_VAR 0 7
54275: PUSH
54276: LD_INT 16
54278: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
54279: LD_VAR 0 1
54283: PPUSH
54284: LD_VAR 0 2
54288: PPUSH
54289: LD_VAR 0 3
54293: PPUSH
54294: CALL_OW 297
54298: PUSH
54299: LD_VAR 0 5
54303: GREATER
54304: IFFALSE 54383
// begin ComMoveXY ( unit , x , y ) ;
54306: LD_VAR 0 1
54310: PPUSH
54311: LD_VAR 0 2
54315: PPUSH
54316: LD_VAR 0 3
54320: PPUSH
54321: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
54325: LD_INT 35
54327: PPUSH
54328: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
54332: LD_VAR 0 1
54336: PPUSH
54337: LD_VAR 0 2
54341: PPUSH
54342: LD_VAR 0 3
54346: PPUSH
54347: CALL 91103 0 3
54351: NOT
54352: IFFALSE 54356
// exit ;
54354: GO 54610
// until GetDistUnitXY ( unit , x , y ) < dist ;
54356: LD_VAR 0 1
54360: PPUSH
54361: LD_VAR 0 2
54365: PPUSH
54366: LD_VAR 0 3
54370: PPUSH
54371: CALL_OW 297
54375: PUSH
54376: LD_VAR 0 5
54380: LESS
54381: IFFALSE 54325
// end ; ComTurnXY ( unit , x , y ) ;
54383: LD_VAR 0 1
54387: PPUSH
54388: LD_VAR 0 2
54392: PPUSH
54393: LD_VAR 0 3
54397: PPUSH
54398: CALL_OW 118
// wait ( 5 ) ;
54402: LD_INT 5
54404: PPUSH
54405: CALL_OW 67
// _d := GetDir ( unit ) ;
54409: LD_ADDR_VAR 0 10
54413: PUSH
54414: LD_VAR 0 1
54418: PPUSH
54419: CALL_OW 254
54423: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
54424: LD_ADDR_VAR 0 8
54428: PUSH
54429: LD_VAR 0 1
54433: PPUSH
54434: CALL_OW 250
54438: PPUSH
54439: LD_VAR 0 10
54443: PPUSH
54444: LD_VAR 0 5
54448: PPUSH
54449: CALL_OW 272
54453: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
54454: LD_ADDR_VAR 0 9
54458: PUSH
54459: LD_VAR 0 1
54463: PPUSH
54464: CALL_OW 251
54468: PPUSH
54469: LD_VAR 0 10
54473: PPUSH
54474: LD_VAR 0 5
54478: PPUSH
54479: CALL_OW 273
54483: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
54484: LD_VAR 0 8
54488: PPUSH
54489: LD_VAR 0 9
54493: PPUSH
54494: CALL_OW 488
54498: NOT
54499: IFFALSE 54503
// exit ;
54501: GO 54610
// ComAnimCustom ( unit , 1 ) ;
54503: LD_VAR 0 1
54507: PPUSH
54508: LD_INT 1
54510: PPUSH
54511: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
54515: LD_VAR 0 8
54519: PPUSH
54520: LD_VAR 0 9
54524: PPUSH
54525: LD_VAR 0 6
54529: PPUSH
54530: LD_VAR 0 7
54534: PPUSH
54535: CALL_OW 330
// repeat wait ( 1 ) ;
54539: LD_INT 1
54541: PPUSH
54542: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
54546: LD_VAR 0 1
54550: PPUSH
54551: CALL_OW 316
54555: PUSH
54556: LD_VAR 0 1
54560: PPUSH
54561: CALL_OW 314
54565: OR
54566: PUSH
54567: LD_VAR 0 1
54571: PPUSH
54572: CALL_OW 302
54576: NOT
54577: OR
54578: PUSH
54579: LD_VAR 0 1
54583: PPUSH
54584: CALL_OW 301
54588: OR
54589: IFFALSE 54539
// RemoveSeeing ( _x , _y , side ) ;
54591: LD_VAR 0 8
54595: PPUSH
54596: LD_VAR 0 9
54600: PPUSH
54601: LD_VAR 0 6
54605: PPUSH
54606: CALL_OW 331
// end ; end_of_file
54610: LD_VAR 0 4
54614: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
54615: LD_INT 0
54617: PPUSH
54618: PPUSH
// if exist_mode then
54619: LD_VAR 0 2
54623: IFFALSE 54648
// unit := CreateCharacter ( prefix & ident ) else
54625: LD_ADDR_VAR 0 5
54629: PUSH
54630: LD_VAR 0 3
54634: PUSH
54635: LD_VAR 0 1
54639: STR
54640: PPUSH
54641: CALL_OW 34
54645: ST_TO_ADDR
54646: GO 54663
// unit := NewCharacter ( ident ) ;
54648: LD_ADDR_VAR 0 5
54652: PUSH
54653: LD_VAR 0 1
54657: PPUSH
54658: CALL_OW 25
54662: ST_TO_ADDR
// result := unit ;
54663: LD_ADDR_VAR 0 4
54667: PUSH
54668: LD_VAR 0 5
54672: ST_TO_ADDR
// end ;
54673: LD_VAR 0 4
54677: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
54678: LD_INT 0
54680: PPUSH
54681: PPUSH
// if not side or not nation then
54682: LD_VAR 0 1
54686: NOT
54687: PUSH
54688: LD_VAR 0 2
54692: NOT
54693: OR
54694: IFFALSE 54698
// exit ;
54696: GO 55466
// case nation of nation_american :
54698: LD_VAR 0 2
54702: PUSH
54703: LD_INT 1
54705: DOUBLE
54706: EQUAL
54707: IFTRUE 54711
54709: GO 54925
54711: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
54712: LD_ADDR_VAR 0 4
54716: PUSH
54717: LD_INT 35
54719: PUSH
54720: LD_INT 45
54722: PUSH
54723: LD_INT 46
54725: PUSH
54726: LD_INT 47
54728: PUSH
54729: LD_INT 82
54731: PUSH
54732: LD_INT 83
54734: PUSH
54735: LD_INT 84
54737: PUSH
54738: LD_INT 85
54740: PUSH
54741: LD_INT 86
54743: PUSH
54744: LD_INT 1
54746: PUSH
54747: LD_INT 2
54749: PUSH
54750: LD_INT 6
54752: PUSH
54753: LD_INT 15
54755: PUSH
54756: LD_INT 16
54758: PUSH
54759: LD_INT 7
54761: PUSH
54762: LD_INT 12
54764: PUSH
54765: LD_INT 13
54767: PUSH
54768: LD_INT 10
54770: PUSH
54771: LD_INT 14
54773: PUSH
54774: LD_INT 20
54776: PUSH
54777: LD_INT 21
54779: PUSH
54780: LD_INT 22
54782: PUSH
54783: LD_INT 25
54785: PUSH
54786: LD_INT 32
54788: PUSH
54789: LD_INT 27
54791: PUSH
54792: LD_INT 36
54794: PUSH
54795: LD_INT 69
54797: PUSH
54798: LD_INT 39
54800: PUSH
54801: LD_INT 34
54803: PUSH
54804: LD_INT 40
54806: PUSH
54807: LD_INT 48
54809: PUSH
54810: LD_INT 49
54812: PUSH
54813: LD_INT 50
54815: PUSH
54816: LD_INT 51
54818: PUSH
54819: LD_INT 52
54821: PUSH
54822: LD_INT 53
54824: PUSH
54825: LD_INT 54
54827: PUSH
54828: LD_INT 55
54830: PUSH
54831: LD_INT 56
54833: PUSH
54834: LD_INT 57
54836: PUSH
54837: LD_INT 58
54839: PUSH
54840: LD_INT 59
54842: PUSH
54843: LD_INT 60
54845: PUSH
54846: LD_INT 61
54848: PUSH
54849: LD_INT 62
54851: PUSH
54852: LD_INT 80
54854: PUSH
54855: LD_INT 82
54857: PUSH
54858: LD_INT 83
54860: PUSH
54861: LD_INT 84
54863: PUSH
54864: LD_INT 85
54866: PUSH
54867: LD_INT 86
54869: PUSH
54870: EMPTY
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: LIST
54882: LIST
54883: LIST
54884: LIST
54885: LIST
54886: LIST
54887: LIST
54888: LIST
54889: LIST
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: LIST
54897: LIST
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: LIST
54903: LIST
54904: LIST
54905: LIST
54906: LIST
54907: LIST
54908: LIST
54909: LIST
54910: LIST
54911: LIST
54912: LIST
54913: LIST
54914: LIST
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: LIST
54921: LIST
54922: ST_TO_ADDR
54923: GO 55390
54925: LD_INT 2
54927: DOUBLE
54928: EQUAL
54929: IFTRUE 54933
54931: GO 55159
54933: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
54934: LD_ADDR_VAR 0 4
54938: PUSH
54939: LD_INT 35
54941: PUSH
54942: LD_INT 45
54944: PUSH
54945: LD_INT 46
54947: PUSH
54948: LD_INT 47
54950: PUSH
54951: LD_INT 82
54953: PUSH
54954: LD_INT 83
54956: PUSH
54957: LD_INT 84
54959: PUSH
54960: LD_INT 85
54962: PUSH
54963: LD_INT 87
54965: PUSH
54966: LD_INT 70
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: LD_INT 11
54974: PUSH
54975: LD_INT 3
54977: PUSH
54978: LD_INT 4
54980: PUSH
54981: LD_INT 5
54983: PUSH
54984: LD_INT 6
54986: PUSH
54987: LD_INT 15
54989: PUSH
54990: LD_INT 18
54992: PUSH
54993: LD_INT 7
54995: PUSH
54996: LD_INT 17
54998: PUSH
54999: LD_INT 8
55001: PUSH
55002: LD_INT 20
55004: PUSH
55005: LD_INT 21
55007: PUSH
55008: LD_INT 22
55010: PUSH
55011: LD_INT 72
55013: PUSH
55014: LD_INT 26
55016: PUSH
55017: LD_INT 69
55019: PUSH
55020: LD_INT 39
55022: PUSH
55023: LD_INT 40
55025: PUSH
55026: LD_INT 41
55028: PUSH
55029: LD_INT 42
55031: PUSH
55032: LD_INT 43
55034: PUSH
55035: LD_INT 48
55037: PUSH
55038: LD_INT 49
55040: PUSH
55041: LD_INT 50
55043: PUSH
55044: LD_INT 51
55046: PUSH
55047: LD_INT 52
55049: PUSH
55050: LD_INT 53
55052: PUSH
55053: LD_INT 54
55055: PUSH
55056: LD_INT 55
55058: PUSH
55059: LD_INT 56
55061: PUSH
55062: LD_INT 60
55064: PUSH
55065: LD_INT 61
55067: PUSH
55068: LD_INT 62
55070: PUSH
55071: LD_INT 66
55073: PUSH
55074: LD_INT 67
55076: PUSH
55077: LD_INT 68
55079: PUSH
55080: LD_INT 81
55082: PUSH
55083: LD_INT 82
55085: PUSH
55086: LD_INT 83
55088: PUSH
55089: LD_INT 84
55091: PUSH
55092: LD_INT 85
55094: PUSH
55095: LD_INT 87
55097: PUSH
55098: LD_INT 88
55100: PUSH
55101: EMPTY
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: LIST
55110: LIST
55111: LIST
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: LIST
55121: LIST
55122: LIST
55123: LIST
55124: LIST
55125: LIST
55126: LIST
55127: LIST
55128: LIST
55129: LIST
55130: LIST
55131: LIST
55132: LIST
55133: LIST
55134: LIST
55135: LIST
55136: LIST
55137: LIST
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: LIST
55143: LIST
55144: LIST
55145: LIST
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: LIST
55151: LIST
55152: LIST
55153: LIST
55154: LIST
55155: LIST
55156: ST_TO_ADDR
55157: GO 55390
55159: LD_INT 3
55161: DOUBLE
55162: EQUAL
55163: IFTRUE 55167
55165: GO 55389
55167: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
55168: LD_ADDR_VAR 0 4
55172: PUSH
55173: LD_INT 46
55175: PUSH
55176: LD_INT 47
55178: PUSH
55179: LD_INT 1
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: LD_INT 82
55187: PUSH
55188: LD_INT 83
55190: PUSH
55191: LD_INT 84
55193: PUSH
55194: LD_INT 85
55196: PUSH
55197: LD_INT 86
55199: PUSH
55200: LD_INT 11
55202: PUSH
55203: LD_INT 9
55205: PUSH
55206: LD_INT 20
55208: PUSH
55209: LD_INT 19
55211: PUSH
55212: LD_INT 21
55214: PUSH
55215: LD_INT 24
55217: PUSH
55218: LD_INT 22
55220: PUSH
55221: LD_INT 25
55223: PUSH
55224: LD_INT 28
55226: PUSH
55227: LD_INT 29
55229: PUSH
55230: LD_INT 30
55232: PUSH
55233: LD_INT 31
55235: PUSH
55236: LD_INT 37
55238: PUSH
55239: LD_INT 38
55241: PUSH
55242: LD_INT 32
55244: PUSH
55245: LD_INT 27
55247: PUSH
55248: LD_INT 33
55250: PUSH
55251: LD_INT 69
55253: PUSH
55254: LD_INT 39
55256: PUSH
55257: LD_INT 34
55259: PUSH
55260: LD_INT 40
55262: PUSH
55263: LD_INT 71
55265: PUSH
55266: LD_INT 23
55268: PUSH
55269: LD_INT 44
55271: PUSH
55272: LD_INT 48
55274: PUSH
55275: LD_INT 49
55277: PUSH
55278: LD_INT 50
55280: PUSH
55281: LD_INT 51
55283: PUSH
55284: LD_INT 52
55286: PUSH
55287: LD_INT 53
55289: PUSH
55290: LD_INT 54
55292: PUSH
55293: LD_INT 55
55295: PUSH
55296: LD_INT 56
55298: PUSH
55299: LD_INT 57
55301: PUSH
55302: LD_INT 58
55304: PUSH
55305: LD_INT 59
55307: PUSH
55308: LD_INT 63
55310: PUSH
55311: LD_INT 64
55313: PUSH
55314: LD_INT 65
55316: PUSH
55317: LD_INT 82
55319: PUSH
55320: LD_INT 83
55322: PUSH
55323: LD_INT 84
55325: PUSH
55326: LD_INT 85
55328: PUSH
55329: LD_INT 86
55331: PUSH
55332: EMPTY
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: LIST
55374: LIST
55375: LIST
55376: LIST
55377: LIST
55378: LIST
55379: LIST
55380: LIST
55381: LIST
55382: LIST
55383: LIST
55384: LIST
55385: LIST
55386: ST_TO_ADDR
55387: GO 55390
55389: POP
// if state > - 1 and state < 3 then
55390: LD_VAR 0 3
55394: PUSH
55395: LD_INT 1
55397: NEG
55398: GREATER
55399: PUSH
55400: LD_VAR 0 3
55404: PUSH
55405: LD_INT 3
55407: LESS
55408: AND
55409: IFFALSE 55466
// for i in result do
55411: LD_ADDR_VAR 0 5
55415: PUSH
55416: LD_VAR 0 4
55420: PUSH
55421: FOR_IN
55422: IFFALSE 55464
// if GetTech ( i , side ) <> state then
55424: LD_VAR 0 5
55428: PPUSH
55429: LD_VAR 0 1
55433: PPUSH
55434: CALL_OW 321
55438: PUSH
55439: LD_VAR 0 3
55443: NONEQUAL
55444: IFFALSE 55462
// result := result diff i ;
55446: LD_ADDR_VAR 0 4
55450: PUSH
55451: LD_VAR 0 4
55455: PUSH
55456: LD_VAR 0 5
55460: DIFF
55461: ST_TO_ADDR
55462: GO 55421
55464: POP
55465: POP
// end ;
55466: LD_VAR 0 4
55470: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
55471: LD_INT 0
55473: PPUSH
55474: PPUSH
55475: PPUSH
// result := true ;
55476: LD_ADDR_VAR 0 3
55480: PUSH
55481: LD_INT 1
55483: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
55484: LD_ADDR_VAR 0 5
55488: PUSH
55489: LD_VAR 0 2
55493: PPUSH
55494: CALL_OW 480
55498: ST_TO_ADDR
// if not tmp then
55499: LD_VAR 0 5
55503: NOT
55504: IFFALSE 55508
// exit ;
55506: GO 55557
// for i in tmp do
55508: LD_ADDR_VAR 0 4
55512: PUSH
55513: LD_VAR 0 5
55517: PUSH
55518: FOR_IN
55519: IFFALSE 55555
// if GetTech ( i , side ) <> state_researched then
55521: LD_VAR 0 4
55525: PPUSH
55526: LD_VAR 0 1
55530: PPUSH
55531: CALL_OW 321
55535: PUSH
55536: LD_INT 2
55538: NONEQUAL
55539: IFFALSE 55553
// begin result := false ;
55541: LD_ADDR_VAR 0 3
55545: PUSH
55546: LD_INT 0
55548: ST_TO_ADDR
// exit ;
55549: POP
55550: POP
55551: GO 55557
// end ;
55553: GO 55518
55555: POP
55556: POP
// end ;
55557: LD_VAR 0 3
55561: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
55562: LD_INT 0
55564: PPUSH
55565: PPUSH
55566: PPUSH
55567: PPUSH
55568: PPUSH
55569: PPUSH
55570: PPUSH
55571: PPUSH
55572: PPUSH
55573: PPUSH
55574: PPUSH
55575: PPUSH
55576: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
55577: LD_VAR 0 1
55581: NOT
55582: PUSH
55583: LD_VAR 0 1
55587: PPUSH
55588: CALL_OW 257
55592: PUSH
55593: LD_INT 9
55595: NONEQUAL
55596: OR
55597: IFFALSE 55601
// exit ;
55599: GO 56174
// side := GetSide ( unit ) ;
55601: LD_ADDR_VAR 0 9
55605: PUSH
55606: LD_VAR 0 1
55610: PPUSH
55611: CALL_OW 255
55615: ST_TO_ADDR
// tech_space := tech_spacanom ;
55616: LD_ADDR_VAR 0 12
55620: PUSH
55621: LD_INT 29
55623: ST_TO_ADDR
// tech_time := tech_taurad ;
55624: LD_ADDR_VAR 0 13
55628: PUSH
55629: LD_INT 28
55631: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
55632: LD_ADDR_VAR 0 11
55636: PUSH
55637: LD_VAR 0 1
55641: PPUSH
55642: CALL_OW 310
55646: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
55647: LD_VAR 0 11
55651: PPUSH
55652: CALL_OW 247
55656: PUSH
55657: LD_INT 2
55659: EQUAL
55660: IFFALSE 55664
// exit ;
55662: GO 56174
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
55664: LD_ADDR_VAR 0 8
55668: PUSH
55669: LD_INT 81
55671: PUSH
55672: LD_VAR 0 9
55676: PUSH
55677: EMPTY
55678: LIST
55679: LIST
55680: PUSH
55681: LD_INT 3
55683: PUSH
55684: LD_INT 21
55686: PUSH
55687: LD_INT 3
55689: PUSH
55690: EMPTY
55691: LIST
55692: LIST
55693: PUSH
55694: EMPTY
55695: LIST
55696: LIST
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PPUSH
55702: CALL_OW 69
55706: ST_TO_ADDR
// if not tmp then
55707: LD_VAR 0 8
55711: NOT
55712: IFFALSE 55716
// exit ;
55714: GO 56174
// if in_unit then
55716: LD_VAR 0 11
55720: IFFALSE 55744
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
55722: LD_ADDR_VAR 0 10
55726: PUSH
55727: LD_VAR 0 8
55731: PPUSH
55732: LD_VAR 0 11
55736: PPUSH
55737: CALL_OW 74
55741: ST_TO_ADDR
55742: GO 55764
// enemy := NearestUnitToUnit ( tmp , unit ) ;
55744: LD_ADDR_VAR 0 10
55748: PUSH
55749: LD_VAR 0 8
55753: PPUSH
55754: LD_VAR 0 1
55758: PPUSH
55759: CALL_OW 74
55763: ST_TO_ADDR
// if not enemy then
55764: LD_VAR 0 10
55768: NOT
55769: IFFALSE 55773
// exit ;
55771: GO 56174
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
55773: LD_VAR 0 11
55777: PUSH
55778: LD_VAR 0 11
55782: PPUSH
55783: LD_VAR 0 10
55787: PPUSH
55788: CALL_OW 296
55792: PUSH
55793: LD_INT 13
55795: GREATER
55796: AND
55797: PUSH
55798: LD_VAR 0 1
55802: PPUSH
55803: LD_VAR 0 10
55807: PPUSH
55808: CALL_OW 296
55812: PUSH
55813: LD_INT 12
55815: GREATER
55816: OR
55817: IFFALSE 55821
// exit ;
55819: GO 56174
// missile := [ 1 ] ;
55821: LD_ADDR_VAR 0 14
55825: PUSH
55826: LD_INT 1
55828: PUSH
55829: EMPTY
55830: LIST
55831: ST_TO_ADDR
// if Researched ( side , tech_space ) then
55832: LD_VAR 0 9
55836: PPUSH
55837: LD_VAR 0 12
55841: PPUSH
55842: CALL_OW 325
55846: IFFALSE 55875
// missile := Replace ( missile , missile + 1 , 2 ) ;
55848: LD_ADDR_VAR 0 14
55852: PUSH
55853: LD_VAR 0 14
55857: PPUSH
55858: LD_VAR 0 14
55862: PUSH
55863: LD_INT 1
55865: PLUS
55866: PPUSH
55867: LD_INT 2
55869: PPUSH
55870: CALL_OW 1
55874: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
55875: LD_VAR 0 9
55879: PPUSH
55880: LD_VAR 0 13
55884: PPUSH
55885: CALL_OW 325
55889: PUSH
55890: LD_VAR 0 10
55894: PPUSH
55895: CALL_OW 255
55899: PPUSH
55900: LD_VAR 0 13
55904: PPUSH
55905: CALL_OW 325
55909: NOT
55910: AND
55911: IFFALSE 55940
// missile := Replace ( missile , missile + 1 , 3 ) ;
55913: LD_ADDR_VAR 0 14
55917: PUSH
55918: LD_VAR 0 14
55922: PPUSH
55923: LD_VAR 0 14
55927: PUSH
55928: LD_INT 1
55930: PLUS
55931: PPUSH
55932: LD_INT 3
55934: PPUSH
55935: CALL_OW 1
55939: ST_TO_ADDR
// if missile < 2 then
55940: LD_VAR 0 14
55944: PUSH
55945: LD_INT 2
55947: LESS
55948: IFFALSE 55952
// exit ;
55950: GO 56174
// x := GetX ( enemy ) ;
55952: LD_ADDR_VAR 0 4
55956: PUSH
55957: LD_VAR 0 10
55961: PPUSH
55962: CALL_OW 250
55966: ST_TO_ADDR
// y := GetY ( enemy ) ;
55967: LD_ADDR_VAR 0 5
55971: PUSH
55972: LD_VAR 0 10
55976: PPUSH
55977: CALL_OW 251
55981: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
55982: LD_ADDR_VAR 0 6
55986: PUSH
55987: LD_VAR 0 4
55991: PUSH
55992: LD_INT 1
55994: NEG
55995: PPUSH
55996: LD_INT 1
55998: PPUSH
55999: CALL_OW 12
56003: PLUS
56004: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
56005: LD_ADDR_VAR 0 7
56009: PUSH
56010: LD_VAR 0 5
56014: PUSH
56015: LD_INT 1
56017: NEG
56018: PPUSH
56019: LD_INT 1
56021: PPUSH
56022: CALL_OW 12
56026: PLUS
56027: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56028: LD_VAR 0 6
56032: PPUSH
56033: LD_VAR 0 7
56037: PPUSH
56038: CALL_OW 488
56042: NOT
56043: IFFALSE 56065
// begin _x := x ;
56045: LD_ADDR_VAR 0 6
56049: PUSH
56050: LD_VAR 0 4
56054: ST_TO_ADDR
// _y := y ;
56055: LD_ADDR_VAR 0 7
56059: PUSH
56060: LD_VAR 0 5
56064: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
56065: LD_ADDR_VAR 0 3
56069: PUSH
56070: LD_INT 1
56072: PPUSH
56073: LD_VAR 0 14
56077: PPUSH
56078: CALL_OW 12
56082: ST_TO_ADDR
// case i of 1 :
56083: LD_VAR 0 3
56087: PUSH
56088: LD_INT 1
56090: DOUBLE
56091: EQUAL
56092: IFTRUE 56096
56094: GO 56113
56096: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
56097: LD_VAR 0 1
56101: PPUSH
56102: LD_VAR 0 10
56106: PPUSH
56107: CALL_OW 115
56111: GO 56174
56113: LD_INT 2
56115: DOUBLE
56116: EQUAL
56117: IFTRUE 56121
56119: GO 56143
56121: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
56122: LD_VAR 0 1
56126: PPUSH
56127: LD_VAR 0 6
56131: PPUSH
56132: LD_VAR 0 7
56136: PPUSH
56137: CALL_OW 153
56141: GO 56174
56143: LD_INT 3
56145: DOUBLE
56146: EQUAL
56147: IFTRUE 56151
56149: GO 56173
56151: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
56152: LD_VAR 0 1
56156: PPUSH
56157: LD_VAR 0 6
56161: PPUSH
56162: LD_VAR 0 7
56166: PPUSH
56167: CALL_OW 154
56171: GO 56174
56173: POP
// end ;
56174: LD_VAR 0 2
56178: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
56179: LD_INT 0
56181: PPUSH
56182: PPUSH
56183: PPUSH
56184: PPUSH
56185: PPUSH
56186: PPUSH
// if not unit or not building then
56187: LD_VAR 0 1
56191: NOT
56192: PUSH
56193: LD_VAR 0 2
56197: NOT
56198: OR
56199: IFFALSE 56203
// exit ;
56201: GO 56361
// x := GetX ( building ) ;
56203: LD_ADDR_VAR 0 5
56207: PUSH
56208: LD_VAR 0 2
56212: PPUSH
56213: CALL_OW 250
56217: ST_TO_ADDR
// y := GetY ( building ) ;
56218: LD_ADDR_VAR 0 6
56222: PUSH
56223: LD_VAR 0 2
56227: PPUSH
56228: CALL_OW 251
56232: ST_TO_ADDR
// for i = 0 to 5 do
56233: LD_ADDR_VAR 0 4
56237: PUSH
56238: DOUBLE
56239: LD_INT 0
56241: DEC
56242: ST_TO_ADDR
56243: LD_INT 5
56245: PUSH
56246: FOR_TO
56247: IFFALSE 56359
// begin _x := ShiftX ( x , i , 3 ) ;
56249: LD_ADDR_VAR 0 7
56253: PUSH
56254: LD_VAR 0 5
56258: PPUSH
56259: LD_VAR 0 4
56263: PPUSH
56264: LD_INT 3
56266: PPUSH
56267: CALL_OW 272
56271: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
56272: LD_ADDR_VAR 0 8
56276: PUSH
56277: LD_VAR 0 6
56281: PPUSH
56282: LD_VAR 0 4
56286: PPUSH
56287: LD_INT 3
56289: PPUSH
56290: CALL_OW 273
56294: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
56295: LD_VAR 0 7
56299: PPUSH
56300: LD_VAR 0 8
56304: PPUSH
56305: CALL_OW 488
56309: NOT
56310: IFFALSE 56314
// continue ;
56312: GO 56246
// if HexInfo ( _x , _y ) = 0 then
56314: LD_VAR 0 7
56318: PPUSH
56319: LD_VAR 0 8
56323: PPUSH
56324: CALL_OW 428
56328: PUSH
56329: LD_INT 0
56331: EQUAL
56332: IFFALSE 56357
// begin ComMoveXY ( unit , _x , _y ) ;
56334: LD_VAR 0 1
56338: PPUSH
56339: LD_VAR 0 7
56343: PPUSH
56344: LD_VAR 0 8
56348: PPUSH
56349: CALL_OW 111
// exit ;
56353: POP
56354: POP
56355: GO 56361
// end ; end ;
56357: GO 56246
56359: POP
56360: POP
// end ;
56361: LD_VAR 0 3
56365: RET
// export function ScanBase ( side , base_area ) ; begin
56366: LD_INT 0
56368: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
56369: LD_ADDR_VAR 0 3
56373: PUSH
56374: LD_VAR 0 2
56378: PPUSH
56379: LD_INT 81
56381: PUSH
56382: LD_VAR 0 1
56386: PUSH
56387: EMPTY
56388: LIST
56389: LIST
56390: PPUSH
56391: CALL_OW 70
56395: ST_TO_ADDR
// end ;
56396: LD_VAR 0 3
56400: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
56401: LD_INT 0
56403: PPUSH
56404: PPUSH
56405: PPUSH
56406: PPUSH
// result := false ;
56407: LD_ADDR_VAR 0 2
56411: PUSH
56412: LD_INT 0
56414: ST_TO_ADDR
// side := GetSide ( unit ) ;
56415: LD_ADDR_VAR 0 3
56419: PUSH
56420: LD_VAR 0 1
56424: PPUSH
56425: CALL_OW 255
56429: ST_TO_ADDR
// nat := GetNation ( unit ) ;
56430: LD_ADDR_VAR 0 4
56434: PUSH
56435: LD_VAR 0 1
56439: PPUSH
56440: CALL_OW 248
56444: ST_TO_ADDR
// case nat of 1 :
56445: LD_VAR 0 4
56449: PUSH
56450: LD_INT 1
56452: DOUBLE
56453: EQUAL
56454: IFTRUE 56458
56456: GO 56469
56458: POP
// tech := tech_lassight ; 2 :
56459: LD_ADDR_VAR 0 5
56463: PUSH
56464: LD_INT 12
56466: ST_TO_ADDR
56467: GO 56508
56469: LD_INT 2
56471: DOUBLE
56472: EQUAL
56473: IFTRUE 56477
56475: GO 56488
56477: POP
// tech := tech_mortar ; 3 :
56478: LD_ADDR_VAR 0 5
56482: PUSH
56483: LD_INT 41
56485: ST_TO_ADDR
56486: GO 56508
56488: LD_INT 3
56490: DOUBLE
56491: EQUAL
56492: IFTRUE 56496
56494: GO 56507
56496: POP
// tech := tech_bazooka ; end ;
56497: LD_ADDR_VAR 0 5
56501: PUSH
56502: LD_INT 44
56504: ST_TO_ADDR
56505: GO 56508
56507: POP
// if Researched ( side , tech ) then
56508: LD_VAR 0 3
56512: PPUSH
56513: LD_VAR 0 5
56517: PPUSH
56518: CALL_OW 325
56522: IFFALSE 56549
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
56524: LD_ADDR_VAR 0 2
56528: PUSH
56529: LD_INT 5
56531: PUSH
56532: LD_INT 8
56534: PUSH
56535: LD_INT 9
56537: PUSH
56538: EMPTY
56539: LIST
56540: LIST
56541: LIST
56542: PUSH
56543: LD_VAR 0 4
56547: ARRAY
56548: ST_TO_ADDR
// end ;
56549: LD_VAR 0 2
56553: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
56554: LD_INT 0
56556: PPUSH
56557: PPUSH
56558: PPUSH
// if not mines then
56559: LD_VAR 0 2
56563: NOT
56564: IFFALSE 56568
// exit ;
56566: GO 56712
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
56568: LD_ADDR_VAR 0 5
56572: PUSH
56573: LD_INT 81
56575: PUSH
56576: LD_VAR 0 1
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: PUSH
56585: LD_INT 3
56587: PUSH
56588: LD_INT 21
56590: PUSH
56591: LD_INT 3
56593: PUSH
56594: EMPTY
56595: LIST
56596: LIST
56597: PUSH
56598: EMPTY
56599: LIST
56600: LIST
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: PPUSH
56606: CALL_OW 69
56610: ST_TO_ADDR
// for i in mines do
56611: LD_ADDR_VAR 0 4
56615: PUSH
56616: LD_VAR 0 2
56620: PUSH
56621: FOR_IN
56622: IFFALSE 56710
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
56624: LD_VAR 0 4
56628: PUSH
56629: LD_INT 1
56631: ARRAY
56632: PPUSH
56633: LD_VAR 0 4
56637: PUSH
56638: LD_INT 2
56640: ARRAY
56641: PPUSH
56642: CALL_OW 458
56646: NOT
56647: IFFALSE 56651
// continue ;
56649: GO 56621
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
56651: LD_VAR 0 4
56655: PUSH
56656: LD_INT 1
56658: ARRAY
56659: PPUSH
56660: LD_VAR 0 4
56664: PUSH
56665: LD_INT 2
56667: ARRAY
56668: PPUSH
56669: CALL_OW 428
56673: PUSH
56674: LD_VAR 0 5
56678: IN
56679: IFFALSE 56708
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
56681: LD_VAR 0 4
56685: PUSH
56686: LD_INT 1
56688: ARRAY
56689: PPUSH
56690: LD_VAR 0 4
56694: PUSH
56695: LD_INT 2
56697: ARRAY
56698: PPUSH
56699: LD_VAR 0 1
56703: PPUSH
56704: CALL_OW 456
// end ;
56708: GO 56621
56710: POP
56711: POP
// end ;
56712: LD_VAR 0 3
56716: RET
// export function Count ( array ) ; begin
56717: LD_INT 0
56719: PPUSH
// result := array + 0 ;
56720: LD_ADDR_VAR 0 2
56724: PUSH
56725: LD_VAR 0 1
56729: PUSH
56730: LD_INT 0
56732: PLUS
56733: ST_TO_ADDR
// end ;
56734: LD_VAR 0 2
56738: RET
// export function IsEmpty ( building ) ; begin
56739: LD_INT 0
56741: PPUSH
// if not building then
56742: LD_VAR 0 1
56746: NOT
56747: IFFALSE 56751
// exit ;
56749: GO 56794
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
56751: LD_ADDR_VAR 0 2
56755: PUSH
56756: LD_VAR 0 1
56760: PUSH
56761: LD_INT 22
56763: PUSH
56764: LD_VAR 0 1
56768: PPUSH
56769: CALL_OW 255
56773: PUSH
56774: EMPTY
56775: LIST
56776: LIST
56777: PUSH
56778: LD_INT 58
56780: PUSH
56781: EMPTY
56782: LIST
56783: PUSH
56784: EMPTY
56785: LIST
56786: LIST
56787: PPUSH
56788: CALL_OW 69
56792: IN
56793: ST_TO_ADDR
// end ;
56794: LD_VAR 0 2
56798: RET
// export function IsNotFull ( building ) ; var places ; begin
56799: LD_INT 0
56801: PPUSH
56802: PPUSH
// if not building then
56803: LD_VAR 0 1
56807: NOT
56808: IFFALSE 56812
// exit ;
56810: GO 56840
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
56812: LD_ADDR_VAR 0 2
56816: PUSH
56817: LD_VAR 0 1
56821: PPUSH
56822: LD_INT 3
56824: PUSH
56825: LD_INT 62
56827: PUSH
56828: EMPTY
56829: LIST
56830: PUSH
56831: EMPTY
56832: LIST
56833: LIST
56834: PPUSH
56835: CALL_OW 72
56839: ST_TO_ADDR
// end ;
56840: LD_VAR 0 2
56844: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
56845: LD_INT 0
56847: PPUSH
56848: PPUSH
56849: PPUSH
56850: PPUSH
// tmp := [ ] ;
56851: LD_ADDR_VAR 0 3
56855: PUSH
56856: EMPTY
56857: ST_TO_ADDR
// list := [ ] ;
56858: LD_ADDR_VAR 0 5
56862: PUSH
56863: EMPTY
56864: ST_TO_ADDR
// for i = 16 to 25 do
56865: LD_ADDR_VAR 0 4
56869: PUSH
56870: DOUBLE
56871: LD_INT 16
56873: DEC
56874: ST_TO_ADDR
56875: LD_INT 25
56877: PUSH
56878: FOR_TO
56879: IFFALSE 56952
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
56881: LD_ADDR_VAR 0 3
56885: PUSH
56886: LD_VAR 0 3
56890: PUSH
56891: LD_INT 22
56893: PUSH
56894: LD_VAR 0 1
56898: PPUSH
56899: CALL_OW 255
56903: PUSH
56904: EMPTY
56905: LIST
56906: LIST
56907: PUSH
56908: LD_INT 91
56910: PUSH
56911: LD_VAR 0 1
56915: PUSH
56916: LD_INT 6
56918: PUSH
56919: EMPTY
56920: LIST
56921: LIST
56922: LIST
56923: PUSH
56924: LD_INT 30
56926: PUSH
56927: LD_VAR 0 4
56931: PUSH
56932: EMPTY
56933: LIST
56934: LIST
56935: PUSH
56936: EMPTY
56937: LIST
56938: LIST
56939: LIST
56940: PUSH
56941: EMPTY
56942: LIST
56943: PPUSH
56944: CALL_OW 69
56948: ADD
56949: ST_TO_ADDR
56950: GO 56878
56952: POP
56953: POP
// for i = 1 to tmp do
56954: LD_ADDR_VAR 0 4
56958: PUSH
56959: DOUBLE
56960: LD_INT 1
56962: DEC
56963: ST_TO_ADDR
56964: LD_VAR 0 3
56968: PUSH
56969: FOR_TO
56970: IFFALSE 57058
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
56972: LD_ADDR_VAR 0 5
56976: PUSH
56977: LD_VAR 0 5
56981: PUSH
56982: LD_VAR 0 3
56986: PUSH
56987: LD_VAR 0 4
56991: ARRAY
56992: PPUSH
56993: CALL_OW 266
56997: PUSH
56998: LD_VAR 0 3
57002: PUSH
57003: LD_VAR 0 4
57007: ARRAY
57008: PPUSH
57009: CALL_OW 250
57013: PUSH
57014: LD_VAR 0 3
57018: PUSH
57019: LD_VAR 0 4
57023: ARRAY
57024: PPUSH
57025: CALL_OW 251
57029: PUSH
57030: LD_VAR 0 3
57034: PUSH
57035: LD_VAR 0 4
57039: ARRAY
57040: PPUSH
57041: CALL_OW 254
57045: PUSH
57046: EMPTY
57047: LIST
57048: LIST
57049: LIST
57050: LIST
57051: PUSH
57052: EMPTY
57053: LIST
57054: ADD
57055: ST_TO_ADDR
57056: GO 56969
57058: POP
57059: POP
// result := list ;
57060: LD_ADDR_VAR 0 2
57064: PUSH
57065: LD_VAR 0 5
57069: ST_TO_ADDR
// end ;
57070: LD_VAR 0 2
57074: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
57075: LD_INT 0
57077: PPUSH
57078: PPUSH
57079: PPUSH
57080: PPUSH
57081: PPUSH
57082: PPUSH
57083: PPUSH
// if not factory then
57084: LD_VAR 0 1
57088: NOT
57089: IFFALSE 57093
// exit ;
57091: GO 57686
// if control = control_apeman then
57093: LD_VAR 0 4
57097: PUSH
57098: LD_INT 5
57100: EQUAL
57101: IFFALSE 57210
// begin tmp := UnitsInside ( factory ) ;
57103: LD_ADDR_VAR 0 8
57107: PUSH
57108: LD_VAR 0 1
57112: PPUSH
57113: CALL_OW 313
57117: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
57118: LD_VAR 0 8
57122: PPUSH
57123: LD_INT 25
57125: PUSH
57126: LD_INT 12
57128: PUSH
57129: EMPTY
57130: LIST
57131: LIST
57132: PPUSH
57133: CALL_OW 72
57137: NOT
57138: IFFALSE 57148
// control := control_manual ;
57140: LD_ADDR_VAR 0 4
57144: PUSH
57145: LD_INT 1
57147: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
57148: LD_ADDR_VAR 0 8
57152: PUSH
57153: LD_VAR 0 1
57157: PPUSH
57158: CALL 56845 0 1
57162: ST_TO_ADDR
// if tmp then
57163: LD_VAR 0 8
57167: IFFALSE 57210
// begin for i in tmp do
57169: LD_ADDR_VAR 0 7
57173: PUSH
57174: LD_VAR 0 8
57178: PUSH
57179: FOR_IN
57180: IFFALSE 57208
// if i [ 1 ] = b_ext_radio then
57182: LD_VAR 0 7
57186: PUSH
57187: LD_INT 1
57189: ARRAY
57190: PUSH
57191: LD_INT 22
57193: EQUAL
57194: IFFALSE 57206
// begin control := control_remote ;
57196: LD_ADDR_VAR 0 4
57200: PUSH
57201: LD_INT 2
57203: ST_TO_ADDR
// break ;
57204: GO 57208
// end ;
57206: GO 57179
57208: POP
57209: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
57210: LD_VAR 0 1
57214: PPUSH
57215: LD_VAR 0 2
57219: PPUSH
57220: LD_VAR 0 3
57224: PPUSH
57225: LD_VAR 0 4
57229: PPUSH
57230: LD_VAR 0 5
57234: PPUSH
57235: CALL_OW 448
57239: IFFALSE 57274
// begin result := [ chassis , engine , control , weapon ] ;
57241: LD_ADDR_VAR 0 6
57245: PUSH
57246: LD_VAR 0 2
57250: PUSH
57251: LD_VAR 0 3
57255: PUSH
57256: LD_VAR 0 4
57260: PUSH
57261: LD_VAR 0 5
57265: PUSH
57266: EMPTY
57267: LIST
57268: LIST
57269: LIST
57270: LIST
57271: ST_TO_ADDR
// exit ;
57272: GO 57686
// end ; _chassis := AvailableChassisList ( factory ) ;
57274: LD_ADDR_VAR 0 9
57278: PUSH
57279: LD_VAR 0 1
57283: PPUSH
57284: CALL_OW 475
57288: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
57289: LD_ADDR_VAR 0 11
57293: PUSH
57294: LD_VAR 0 1
57298: PPUSH
57299: CALL_OW 476
57303: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
57304: LD_ADDR_VAR 0 12
57308: PUSH
57309: LD_VAR 0 1
57313: PPUSH
57314: CALL_OW 477
57318: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
57319: LD_ADDR_VAR 0 10
57323: PUSH
57324: LD_VAR 0 1
57328: PPUSH
57329: CALL_OW 478
57333: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
57334: LD_VAR 0 9
57338: NOT
57339: PUSH
57340: LD_VAR 0 11
57344: NOT
57345: OR
57346: PUSH
57347: LD_VAR 0 12
57351: NOT
57352: OR
57353: PUSH
57354: LD_VAR 0 10
57358: NOT
57359: OR
57360: IFFALSE 57395
// begin result := [ chassis , engine , control , weapon ] ;
57362: LD_ADDR_VAR 0 6
57366: PUSH
57367: LD_VAR 0 2
57371: PUSH
57372: LD_VAR 0 3
57376: PUSH
57377: LD_VAR 0 4
57381: PUSH
57382: LD_VAR 0 5
57386: PUSH
57387: EMPTY
57388: LIST
57389: LIST
57390: LIST
57391: LIST
57392: ST_TO_ADDR
// exit ;
57393: GO 57686
// end ; if not chassis in _chassis then
57395: LD_VAR 0 2
57399: PUSH
57400: LD_VAR 0 9
57404: IN
57405: NOT
57406: IFFALSE 57432
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
57408: LD_ADDR_VAR 0 2
57412: PUSH
57413: LD_VAR 0 9
57417: PUSH
57418: LD_INT 1
57420: PPUSH
57421: LD_VAR 0 9
57425: PPUSH
57426: CALL_OW 12
57430: ARRAY
57431: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
57432: LD_VAR 0 2
57436: PPUSH
57437: LD_VAR 0 3
57441: PPUSH
57442: CALL 57691 0 2
57446: NOT
57447: IFFALSE 57506
// repeat engine := _engine [ 1 ] ;
57449: LD_ADDR_VAR 0 3
57453: PUSH
57454: LD_VAR 0 11
57458: PUSH
57459: LD_INT 1
57461: ARRAY
57462: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
57463: LD_ADDR_VAR 0 11
57467: PUSH
57468: LD_VAR 0 11
57472: PPUSH
57473: LD_INT 1
57475: PPUSH
57476: CALL_OW 3
57480: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
57481: LD_VAR 0 2
57485: PPUSH
57486: LD_VAR 0 3
57490: PPUSH
57491: CALL 57691 0 2
57495: PUSH
57496: LD_VAR 0 11
57500: PUSH
57501: EMPTY
57502: EQUAL
57503: OR
57504: IFFALSE 57449
// if not control in _control then
57506: LD_VAR 0 4
57510: PUSH
57511: LD_VAR 0 12
57515: IN
57516: NOT
57517: IFFALSE 57543
// control := _control [ rand ( 1 , _control ) ] ;
57519: LD_ADDR_VAR 0 4
57523: PUSH
57524: LD_VAR 0 12
57528: PUSH
57529: LD_INT 1
57531: PPUSH
57532: LD_VAR 0 12
57536: PPUSH
57537: CALL_OW 12
57541: ARRAY
57542: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
57543: LD_VAR 0 2
57547: PPUSH
57548: LD_VAR 0 5
57552: PPUSH
57553: CALL 57911 0 2
57557: NOT
57558: IFFALSE 57617
// repeat weapon := _weapon [ 1 ] ;
57560: LD_ADDR_VAR 0 5
57564: PUSH
57565: LD_VAR 0 10
57569: PUSH
57570: LD_INT 1
57572: ARRAY
57573: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
57574: LD_ADDR_VAR 0 10
57578: PUSH
57579: LD_VAR 0 10
57583: PPUSH
57584: LD_INT 1
57586: PPUSH
57587: CALL_OW 3
57591: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
57592: LD_VAR 0 2
57596: PPUSH
57597: LD_VAR 0 5
57601: PPUSH
57602: CALL 57911 0 2
57606: PUSH
57607: LD_VAR 0 10
57611: PUSH
57612: EMPTY
57613: EQUAL
57614: OR
57615: IFFALSE 57560
// result := [ ] ;
57617: LD_ADDR_VAR 0 6
57621: PUSH
57622: EMPTY
57623: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
57624: LD_VAR 0 1
57628: PPUSH
57629: LD_VAR 0 2
57633: PPUSH
57634: LD_VAR 0 3
57638: PPUSH
57639: LD_VAR 0 4
57643: PPUSH
57644: LD_VAR 0 5
57648: PPUSH
57649: CALL_OW 448
57653: IFFALSE 57686
// result := [ chassis , engine , control , weapon ] ;
57655: LD_ADDR_VAR 0 6
57659: PUSH
57660: LD_VAR 0 2
57664: PUSH
57665: LD_VAR 0 3
57669: PUSH
57670: LD_VAR 0 4
57674: PUSH
57675: LD_VAR 0 5
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: LIST
57684: LIST
57685: ST_TO_ADDR
// end ;
57686: LD_VAR 0 6
57690: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
57691: LD_INT 0
57693: PPUSH
// if not chassis or not engine then
57694: LD_VAR 0 1
57698: NOT
57699: PUSH
57700: LD_VAR 0 2
57704: NOT
57705: OR
57706: IFFALSE 57710
// exit ;
57708: GO 57906
// case engine of engine_solar :
57710: LD_VAR 0 2
57714: PUSH
57715: LD_INT 2
57717: DOUBLE
57718: EQUAL
57719: IFTRUE 57723
57721: GO 57761
57723: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
57724: LD_ADDR_VAR 0 3
57728: PUSH
57729: LD_INT 11
57731: PUSH
57732: LD_INT 12
57734: PUSH
57735: LD_INT 13
57737: PUSH
57738: LD_INT 14
57740: PUSH
57741: LD_INT 1
57743: PUSH
57744: LD_INT 2
57746: PUSH
57747: LD_INT 3
57749: PUSH
57750: EMPTY
57751: LIST
57752: LIST
57753: LIST
57754: LIST
57755: LIST
57756: LIST
57757: LIST
57758: ST_TO_ADDR
57759: GO 57890
57761: LD_INT 1
57763: DOUBLE
57764: EQUAL
57765: IFTRUE 57769
57767: GO 57831
57769: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
57770: LD_ADDR_VAR 0 3
57774: PUSH
57775: LD_INT 11
57777: PUSH
57778: LD_INT 12
57780: PUSH
57781: LD_INT 13
57783: PUSH
57784: LD_INT 14
57786: PUSH
57787: LD_INT 1
57789: PUSH
57790: LD_INT 2
57792: PUSH
57793: LD_INT 3
57795: PUSH
57796: LD_INT 4
57798: PUSH
57799: LD_INT 5
57801: PUSH
57802: LD_INT 21
57804: PUSH
57805: LD_INT 23
57807: PUSH
57808: LD_INT 22
57810: PUSH
57811: LD_INT 24
57813: PUSH
57814: EMPTY
57815: LIST
57816: LIST
57817: LIST
57818: LIST
57819: LIST
57820: LIST
57821: LIST
57822: LIST
57823: LIST
57824: LIST
57825: LIST
57826: LIST
57827: LIST
57828: ST_TO_ADDR
57829: GO 57890
57831: LD_INT 3
57833: DOUBLE
57834: EQUAL
57835: IFTRUE 57839
57837: GO 57889
57839: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
57840: LD_ADDR_VAR 0 3
57844: PUSH
57845: LD_INT 13
57847: PUSH
57848: LD_INT 14
57850: PUSH
57851: LD_INT 2
57853: PUSH
57854: LD_INT 3
57856: PUSH
57857: LD_INT 4
57859: PUSH
57860: LD_INT 5
57862: PUSH
57863: LD_INT 21
57865: PUSH
57866: LD_INT 22
57868: PUSH
57869: LD_INT 23
57871: PUSH
57872: LD_INT 24
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: LIST
57879: LIST
57880: LIST
57881: LIST
57882: LIST
57883: LIST
57884: LIST
57885: LIST
57886: ST_TO_ADDR
57887: GO 57890
57889: POP
// result := ( chassis in result ) ;
57890: LD_ADDR_VAR 0 3
57894: PUSH
57895: LD_VAR 0 1
57899: PUSH
57900: LD_VAR 0 3
57904: IN
57905: ST_TO_ADDR
// end ;
57906: LD_VAR 0 3
57910: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
57911: LD_INT 0
57913: PPUSH
// if not chassis or not weapon then
57914: LD_VAR 0 1
57918: NOT
57919: PUSH
57920: LD_VAR 0 2
57924: NOT
57925: OR
57926: IFFALSE 57930
// exit ;
57928: GO 58990
// case weapon of us_machine_gun :
57930: LD_VAR 0 2
57934: PUSH
57935: LD_INT 2
57937: DOUBLE
57938: EQUAL
57939: IFTRUE 57943
57941: GO 57973
57943: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
57944: LD_ADDR_VAR 0 3
57948: PUSH
57949: LD_INT 1
57951: PUSH
57952: LD_INT 2
57954: PUSH
57955: LD_INT 3
57957: PUSH
57958: LD_INT 4
57960: PUSH
57961: LD_INT 5
57963: PUSH
57964: EMPTY
57965: LIST
57966: LIST
57967: LIST
57968: LIST
57969: LIST
57970: ST_TO_ADDR
57971: GO 58974
57973: LD_INT 3
57975: DOUBLE
57976: EQUAL
57977: IFTRUE 57981
57979: GO 58011
57981: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
57982: LD_ADDR_VAR 0 3
57986: PUSH
57987: LD_INT 1
57989: PUSH
57990: LD_INT 2
57992: PUSH
57993: LD_INT 3
57995: PUSH
57996: LD_INT 4
57998: PUSH
57999: LD_INT 5
58001: PUSH
58002: EMPTY
58003: LIST
58004: LIST
58005: LIST
58006: LIST
58007: LIST
58008: ST_TO_ADDR
58009: GO 58974
58011: LD_INT 11
58013: DOUBLE
58014: EQUAL
58015: IFTRUE 58019
58017: GO 58049
58019: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
58020: LD_ADDR_VAR 0 3
58024: PUSH
58025: LD_INT 1
58027: PUSH
58028: LD_INT 2
58030: PUSH
58031: LD_INT 3
58033: PUSH
58034: LD_INT 4
58036: PUSH
58037: LD_INT 5
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: LIST
58044: LIST
58045: LIST
58046: ST_TO_ADDR
58047: GO 58974
58049: LD_INT 4
58051: DOUBLE
58052: EQUAL
58053: IFTRUE 58057
58055: GO 58083
58057: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
58058: LD_ADDR_VAR 0 3
58062: PUSH
58063: LD_INT 2
58065: PUSH
58066: LD_INT 3
58068: PUSH
58069: LD_INT 4
58071: PUSH
58072: LD_INT 5
58074: PUSH
58075: EMPTY
58076: LIST
58077: LIST
58078: LIST
58079: LIST
58080: ST_TO_ADDR
58081: GO 58974
58083: LD_INT 5
58085: DOUBLE
58086: EQUAL
58087: IFTRUE 58091
58089: GO 58117
58091: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
58092: LD_ADDR_VAR 0 3
58096: PUSH
58097: LD_INT 2
58099: PUSH
58100: LD_INT 3
58102: PUSH
58103: LD_INT 4
58105: PUSH
58106: LD_INT 5
58108: PUSH
58109: EMPTY
58110: LIST
58111: LIST
58112: LIST
58113: LIST
58114: ST_TO_ADDR
58115: GO 58974
58117: LD_INT 9
58119: DOUBLE
58120: EQUAL
58121: IFTRUE 58125
58123: GO 58151
58125: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
58126: LD_ADDR_VAR 0 3
58130: PUSH
58131: LD_INT 2
58133: PUSH
58134: LD_INT 3
58136: PUSH
58137: LD_INT 4
58139: PUSH
58140: LD_INT 5
58142: PUSH
58143: EMPTY
58144: LIST
58145: LIST
58146: LIST
58147: LIST
58148: ST_TO_ADDR
58149: GO 58974
58151: LD_INT 7
58153: DOUBLE
58154: EQUAL
58155: IFTRUE 58159
58157: GO 58185
58159: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
58160: LD_ADDR_VAR 0 3
58164: PUSH
58165: LD_INT 2
58167: PUSH
58168: LD_INT 3
58170: PUSH
58171: LD_INT 4
58173: PUSH
58174: LD_INT 5
58176: PUSH
58177: EMPTY
58178: LIST
58179: LIST
58180: LIST
58181: LIST
58182: ST_TO_ADDR
58183: GO 58974
58185: LD_INT 12
58187: DOUBLE
58188: EQUAL
58189: IFTRUE 58193
58191: GO 58219
58193: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
58194: LD_ADDR_VAR 0 3
58198: PUSH
58199: LD_INT 2
58201: PUSH
58202: LD_INT 3
58204: PUSH
58205: LD_INT 4
58207: PUSH
58208: LD_INT 5
58210: PUSH
58211: EMPTY
58212: LIST
58213: LIST
58214: LIST
58215: LIST
58216: ST_TO_ADDR
58217: GO 58974
58219: LD_INT 13
58221: DOUBLE
58222: EQUAL
58223: IFTRUE 58227
58225: GO 58253
58227: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
58228: LD_ADDR_VAR 0 3
58232: PUSH
58233: LD_INT 2
58235: PUSH
58236: LD_INT 3
58238: PUSH
58239: LD_INT 4
58241: PUSH
58242: LD_INT 5
58244: PUSH
58245: EMPTY
58246: LIST
58247: LIST
58248: LIST
58249: LIST
58250: ST_TO_ADDR
58251: GO 58974
58253: LD_INT 14
58255: DOUBLE
58256: EQUAL
58257: IFTRUE 58261
58259: GO 58279
58261: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
58262: LD_ADDR_VAR 0 3
58266: PUSH
58267: LD_INT 4
58269: PUSH
58270: LD_INT 5
58272: PUSH
58273: EMPTY
58274: LIST
58275: LIST
58276: ST_TO_ADDR
58277: GO 58974
58279: LD_INT 6
58281: DOUBLE
58282: EQUAL
58283: IFTRUE 58287
58285: GO 58305
58287: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
58288: LD_ADDR_VAR 0 3
58292: PUSH
58293: LD_INT 4
58295: PUSH
58296: LD_INT 5
58298: PUSH
58299: EMPTY
58300: LIST
58301: LIST
58302: ST_TO_ADDR
58303: GO 58974
58305: LD_INT 10
58307: DOUBLE
58308: EQUAL
58309: IFTRUE 58313
58311: GO 58331
58313: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
58314: LD_ADDR_VAR 0 3
58318: PUSH
58319: LD_INT 4
58321: PUSH
58322: LD_INT 5
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: ST_TO_ADDR
58329: GO 58974
58331: LD_INT 22
58333: DOUBLE
58334: EQUAL
58335: IFTRUE 58339
58337: GO 58365
58339: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
58340: LD_ADDR_VAR 0 3
58344: PUSH
58345: LD_INT 11
58347: PUSH
58348: LD_INT 12
58350: PUSH
58351: LD_INT 13
58353: PUSH
58354: LD_INT 14
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: ST_TO_ADDR
58363: GO 58974
58365: LD_INT 23
58367: DOUBLE
58368: EQUAL
58369: IFTRUE 58373
58371: GO 58399
58373: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
58374: LD_ADDR_VAR 0 3
58378: PUSH
58379: LD_INT 11
58381: PUSH
58382: LD_INT 12
58384: PUSH
58385: LD_INT 13
58387: PUSH
58388: LD_INT 14
58390: PUSH
58391: EMPTY
58392: LIST
58393: LIST
58394: LIST
58395: LIST
58396: ST_TO_ADDR
58397: GO 58974
58399: LD_INT 24
58401: DOUBLE
58402: EQUAL
58403: IFTRUE 58407
58405: GO 58433
58407: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
58408: LD_ADDR_VAR 0 3
58412: PUSH
58413: LD_INT 11
58415: PUSH
58416: LD_INT 12
58418: PUSH
58419: LD_INT 13
58421: PUSH
58422: LD_INT 14
58424: PUSH
58425: EMPTY
58426: LIST
58427: LIST
58428: LIST
58429: LIST
58430: ST_TO_ADDR
58431: GO 58974
58433: LD_INT 30
58435: DOUBLE
58436: EQUAL
58437: IFTRUE 58441
58439: GO 58467
58441: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
58442: LD_ADDR_VAR 0 3
58446: PUSH
58447: LD_INT 11
58449: PUSH
58450: LD_INT 12
58452: PUSH
58453: LD_INT 13
58455: PUSH
58456: LD_INT 14
58458: PUSH
58459: EMPTY
58460: LIST
58461: LIST
58462: LIST
58463: LIST
58464: ST_TO_ADDR
58465: GO 58974
58467: LD_INT 25
58469: DOUBLE
58470: EQUAL
58471: IFTRUE 58475
58473: GO 58493
58475: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
58476: LD_ADDR_VAR 0 3
58480: PUSH
58481: LD_INT 13
58483: PUSH
58484: LD_INT 14
58486: PUSH
58487: EMPTY
58488: LIST
58489: LIST
58490: ST_TO_ADDR
58491: GO 58974
58493: LD_INT 27
58495: DOUBLE
58496: EQUAL
58497: IFTRUE 58501
58499: GO 58519
58501: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
58502: LD_ADDR_VAR 0 3
58506: PUSH
58507: LD_INT 13
58509: PUSH
58510: LD_INT 14
58512: PUSH
58513: EMPTY
58514: LIST
58515: LIST
58516: ST_TO_ADDR
58517: GO 58974
58519: LD_INT 92
58521: DOUBLE
58522: EQUAL
58523: IFTRUE 58527
58525: GO 58553
58527: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
58528: LD_ADDR_VAR 0 3
58532: PUSH
58533: LD_INT 11
58535: PUSH
58536: LD_INT 12
58538: PUSH
58539: LD_INT 13
58541: PUSH
58542: LD_INT 14
58544: PUSH
58545: EMPTY
58546: LIST
58547: LIST
58548: LIST
58549: LIST
58550: ST_TO_ADDR
58551: GO 58974
58553: LD_INT 28
58555: DOUBLE
58556: EQUAL
58557: IFTRUE 58561
58559: GO 58579
58561: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
58562: LD_ADDR_VAR 0 3
58566: PUSH
58567: LD_INT 13
58569: PUSH
58570: LD_INT 14
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: ST_TO_ADDR
58577: GO 58974
58579: LD_INT 29
58581: DOUBLE
58582: EQUAL
58583: IFTRUE 58587
58585: GO 58605
58587: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
58588: LD_ADDR_VAR 0 3
58592: PUSH
58593: LD_INT 13
58595: PUSH
58596: LD_INT 14
58598: PUSH
58599: EMPTY
58600: LIST
58601: LIST
58602: ST_TO_ADDR
58603: GO 58974
58605: LD_INT 31
58607: DOUBLE
58608: EQUAL
58609: IFTRUE 58613
58611: GO 58631
58613: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
58614: LD_ADDR_VAR 0 3
58618: PUSH
58619: LD_INT 13
58621: PUSH
58622: LD_INT 14
58624: PUSH
58625: EMPTY
58626: LIST
58627: LIST
58628: ST_TO_ADDR
58629: GO 58974
58631: LD_INT 26
58633: DOUBLE
58634: EQUAL
58635: IFTRUE 58639
58637: GO 58657
58639: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
58640: LD_ADDR_VAR 0 3
58644: PUSH
58645: LD_INT 13
58647: PUSH
58648: LD_INT 14
58650: PUSH
58651: EMPTY
58652: LIST
58653: LIST
58654: ST_TO_ADDR
58655: GO 58974
58657: LD_INT 42
58659: DOUBLE
58660: EQUAL
58661: IFTRUE 58665
58663: GO 58691
58665: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
58666: LD_ADDR_VAR 0 3
58670: PUSH
58671: LD_INT 21
58673: PUSH
58674: LD_INT 22
58676: PUSH
58677: LD_INT 23
58679: PUSH
58680: LD_INT 24
58682: PUSH
58683: EMPTY
58684: LIST
58685: LIST
58686: LIST
58687: LIST
58688: ST_TO_ADDR
58689: GO 58974
58691: LD_INT 43
58693: DOUBLE
58694: EQUAL
58695: IFTRUE 58699
58697: GO 58725
58699: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
58700: LD_ADDR_VAR 0 3
58704: PUSH
58705: LD_INT 21
58707: PUSH
58708: LD_INT 22
58710: PUSH
58711: LD_INT 23
58713: PUSH
58714: LD_INT 24
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: LIST
58721: LIST
58722: ST_TO_ADDR
58723: GO 58974
58725: LD_INT 44
58727: DOUBLE
58728: EQUAL
58729: IFTRUE 58733
58731: GO 58759
58733: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
58734: LD_ADDR_VAR 0 3
58738: PUSH
58739: LD_INT 21
58741: PUSH
58742: LD_INT 22
58744: PUSH
58745: LD_INT 23
58747: PUSH
58748: LD_INT 24
58750: PUSH
58751: EMPTY
58752: LIST
58753: LIST
58754: LIST
58755: LIST
58756: ST_TO_ADDR
58757: GO 58974
58759: LD_INT 45
58761: DOUBLE
58762: EQUAL
58763: IFTRUE 58767
58765: GO 58793
58767: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
58768: LD_ADDR_VAR 0 3
58772: PUSH
58773: LD_INT 21
58775: PUSH
58776: LD_INT 22
58778: PUSH
58779: LD_INT 23
58781: PUSH
58782: LD_INT 24
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: LIST
58789: LIST
58790: ST_TO_ADDR
58791: GO 58974
58793: LD_INT 49
58795: DOUBLE
58796: EQUAL
58797: IFTRUE 58801
58799: GO 58827
58801: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
58802: LD_ADDR_VAR 0 3
58806: PUSH
58807: LD_INT 21
58809: PUSH
58810: LD_INT 22
58812: PUSH
58813: LD_INT 23
58815: PUSH
58816: LD_INT 24
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: LIST
58823: LIST
58824: ST_TO_ADDR
58825: GO 58974
58827: LD_INT 51
58829: DOUBLE
58830: EQUAL
58831: IFTRUE 58835
58833: GO 58861
58835: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
58836: LD_ADDR_VAR 0 3
58840: PUSH
58841: LD_INT 21
58843: PUSH
58844: LD_INT 22
58846: PUSH
58847: LD_INT 23
58849: PUSH
58850: LD_INT 24
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: LIST
58857: LIST
58858: ST_TO_ADDR
58859: GO 58974
58861: LD_INT 52
58863: DOUBLE
58864: EQUAL
58865: IFTRUE 58869
58867: GO 58895
58869: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
58870: LD_ADDR_VAR 0 3
58874: PUSH
58875: LD_INT 21
58877: PUSH
58878: LD_INT 22
58880: PUSH
58881: LD_INT 23
58883: PUSH
58884: LD_INT 24
58886: PUSH
58887: EMPTY
58888: LIST
58889: LIST
58890: LIST
58891: LIST
58892: ST_TO_ADDR
58893: GO 58974
58895: LD_INT 53
58897: DOUBLE
58898: EQUAL
58899: IFTRUE 58903
58901: GO 58921
58903: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
58904: LD_ADDR_VAR 0 3
58908: PUSH
58909: LD_INT 23
58911: PUSH
58912: LD_INT 24
58914: PUSH
58915: EMPTY
58916: LIST
58917: LIST
58918: ST_TO_ADDR
58919: GO 58974
58921: LD_INT 46
58923: DOUBLE
58924: EQUAL
58925: IFTRUE 58929
58927: GO 58947
58929: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
58930: LD_ADDR_VAR 0 3
58934: PUSH
58935: LD_INT 23
58937: PUSH
58938: LD_INT 24
58940: PUSH
58941: EMPTY
58942: LIST
58943: LIST
58944: ST_TO_ADDR
58945: GO 58974
58947: LD_INT 47
58949: DOUBLE
58950: EQUAL
58951: IFTRUE 58955
58953: GO 58973
58955: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
58956: LD_ADDR_VAR 0 3
58960: PUSH
58961: LD_INT 23
58963: PUSH
58964: LD_INT 24
58966: PUSH
58967: EMPTY
58968: LIST
58969: LIST
58970: ST_TO_ADDR
58971: GO 58974
58973: POP
// result := ( chassis in result ) ;
58974: LD_ADDR_VAR 0 3
58978: PUSH
58979: LD_VAR 0 1
58983: PUSH
58984: LD_VAR 0 3
58988: IN
58989: ST_TO_ADDR
// end ;
58990: LD_VAR 0 3
58994: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
58995: LD_INT 0
58997: PPUSH
58998: PPUSH
58999: PPUSH
59000: PPUSH
59001: PPUSH
59002: PPUSH
59003: PPUSH
// result := array ;
59004: LD_ADDR_VAR 0 5
59008: PUSH
59009: LD_VAR 0 1
59013: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
59014: LD_VAR 0 1
59018: NOT
59019: PUSH
59020: LD_VAR 0 2
59024: NOT
59025: OR
59026: PUSH
59027: LD_VAR 0 3
59031: NOT
59032: OR
59033: PUSH
59034: LD_VAR 0 2
59038: PUSH
59039: LD_VAR 0 1
59043: GREATER
59044: OR
59045: PUSH
59046: LD_VAR 0 3
59050: PUSH
59051: LD_VAR 0 1
59055: GREATER
59056: OR
59057: IFFALSE 59061
// exit ;
59059: GO 59357
// if direction then
59061: LD_VAR 0 4
59065: IFFALSE 59129
// begin d := 1 ;
59067: LD_ADDR_VAR 0 9
59071: PUSH
59072: LD_INT 1
59074: ST_TO_ADDR
// if i_from > i_to then
59075: LD_VAR 0 2
59079: PUSH
59080: LD_VAR 0 3
59084: GREATER
59085: IFFALSE 59111
// length := ( array - i_from ) + i_to else
59087: LD_ADDR_VAR 0 11
59091: PUSH
59092: LD_VAR 0 1
59096: PUSH
59097: LD_VAR 0 2
59101: MINUS
59102: PUSH
59103: LD_VAR 0 3
59107: PLUS
59108: ST_TO_ADDR
59109: GO 59127
// length := i_to - i_from ;
59111: LD_ADDR_VAR 0 11
59115: PUSH
59116: LD_VAR 0 3
59120: PUSH
59121: LD_VAR 0 2
59125: MINUS
59126: ST_TO_ADDR
// end else
59127: GO 59190
// begin d := - 1 ;
59129: LD_ADDR_VAR 0 9
59133: PUSH
59134: LD_INT 1
59136: NEG
59137: ST_TO_ADDR
// if i_from > i_to then
59138: LD_VAR 0 2
59142: PUSH
59143: LD_VAR 0 3
59147: GREATER
59148: IFFALSE 59168
// length := i_from - i_to else
59150: LD_ADDR_VAR 0 11
59154: PUSH
59155: LD_VAR 0 2
59159: PUSH
59160: LD_VAR 0 3
59164: MINUS
59165: ST_TO_ADDR
59166: GO 59190
// length := ( array - i_to ) + i_from ;
59168: LD_ADDR_VAR 0 11
59172: PUSH
59173: LD_VAR 0 1
59177: PUSH
59178: LD_VAR 0 3
59182: MINUS
59183: PUSH
59184: LD_VAR 0 2
59188: PLUS
59189: ST_TO_ADDR
// end ; if not length then
59190: LD_VAR 0 11
59194: NOT
59195: IFFALSE 59199
// exit ;
59197: GO 59357
// tmp := array ;
59199: LD_ADDR_VAR 0 10
59203: PUSH
59204: LD_VAR 0 1
59208: ST_TO_ADDR
// for i = 1 to length do
59209: LD_ADDR_VAR 0 6
59213: PUSH
59214: DOUBLE
59215: LD_INT 1
59217: DEC
59218: ST_TO_ADDR
59219: LD_VAR 0 11
59223: PUSH
59224: FOR_TO
59225: IFFALSE 59345
// begin for j = 1 to array do
59227: LD_ADDR_VAR 0 7
59231: PUSH
59232: DOUBLE
59233: LD_INT 1
59235: DEC
59236: ST_TO_ADDR
59237: LD_VAR 0 1
59241: PUSH
59242: FOR_TO
59243: IFFALSE 59331
// begin k := j + d ;
59245: LD_ADDR_VAR 0 8
59249: PUSH
59250: LD_VAR 0 7
59254: PUSH
59255: LD_VAR 0 9
59259: PLUS
59260: ST_TO_ADDR
// if k > array then
59261: LD_VAR 0 8
59265: PUSH
59266: LD_VAR 0 1
59270: GREATER
59271: IFFALSE 59281
// k := 1 ;
59273: LD_ADDR_VAR 0 8
59277: PUSH
59278: LD_INT 1
59280: ST_TO_ADDR
// if not k then
59281: LD_VAR 0 8
59285: NOT
59286: IFFALSE 59298
// k := array ;
59288: LD_ADDR_VAR 0 8
59292: PUSH
59293: LD_VAR 0 1
59297: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
59298: LD_ADDR_VAR 0 10
59302: PUSH
59303: LD_VAR 0 10
59307: PPUSH
59308: LD_VAR 0 8
59312: PPUSH
59313: LD_VAR 0 1
59317: PUSH
59318: LD_VAR 0 7
59322: ARRAY
59323: PPUSH
59324: CALL_OW 1
59328: ST_TO_ADDR
// end ;
59329: GO 59242
59331: POP
59332: POP
// array := tmp ;
59333: LD_ADDR_VAR 0 1
59337: PUSH
59338: LD_VAR 0 10
59342: ST_TO_ADDR
// end ;
59343: GO 59224
59345: POP
59346: POP
// result := array ;
59347: LD_ADDR_VAR 0 5
59351: PUSH
59352: LD_VAR 0 1
59356: ST_TO_ADDR
// end ;
59357: LD_VAR 0 5
59361: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
59362: LD_INT 0
59364: PPUSH
59365: PPUSH
// result := 0 ;
59366: LD_ADDR_VAR 0 3
59370: PUSH
59371: LD_INT 0
59373: ST_TO_ADDR
// if not array or not value in array then
59374: LD_VAR 0 1
59378: NOT
59379: PUSH
59380: LD_VAR 0 2
59384: PUSH
59385: LD_VAR 0 1
59389: IN
59390: NOT
59391: OR
59392: IFFALSE 59396
// exit ;
59394: GO 59450
// for i = 1 to array do
59396: LD_ADDR_VAR 0 4
59400: PUSH
59401: DOUBLE
59402: LD_INT 1
59404: DEC
59405: ST_TO_ADDR
59406: LD_VAR 0 1
59410: PUSH
59411: FOR_TO
59412: IFFALSE 59448
// if value = array [ i ] then
59414: LD_VAR 0 2
59418: PUSH
59419: LD_VAR 0 1
59423: PUSH
59424: LD_VAR 0 4
59428: ARRAY
59429: EQUAL
59430: IFFALSE 59446
// begin result := i ;
59432: LD_ADDR_VAR 0 3
59436: PUSH
59437: LD_VAR 0 4
59441: ST_TO_ADDR
// exit ;
59442: POP
59443: POP
59444: GO 59450
// end ;
59446: GO 59411
59448: POP
59449: POP
// end ;
59450: LD_VAR 0 3
59454: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
59455: LD_INT 0
59457: PPUSH
// vc_chassis := chassis ;
59458: LD_ADDR_OWVAR 37
59462: PUSH
59463: LD_VAR 0 1
59467: ST_TO_ADDR
// vc_engine := engine ;
59468: LD_ADDR_OWVAR 39
59472: PUSH
59473: LD_VAR 0 2
59477: ST_TO_ADDR
// vc_control := control ;
59478: LD_ADDR_OWVAR 38
59482: PUSH
59483: LD_VAR 0 3
59487: ST_TO_ADDR
// vc_weapon := weapon ;
59488: LD_ADDR_OWVAR 40
59492: PUSH
59493: LD_VAR 0 4
59497: ST_TO_ADDR
// vc_fuel_battery := fuel ;
59498: LD_ADDR_OWVAR 41
59502: PUSH
59503: LD_VAR 0 5
59507: ST_TO_ADDR
// end ;
59508: LD_VAR 0 6
59512: RET
// export function WantPlant ( unit ) ; var task ; begin
59513: LD_INT 0
59515: PPUSH
59516: PPUSH
// result := false ;
59517: LD_ADDR_VAR 0 2
59521: PUSH
59522: LD_INT 0
59524: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
59525: LD_ADDR_VAR 0 3
59529: PUSH
59530: LD_VAR 0 1
59534: PPUSH
59535: CALL_OW 437
59539: ST_TO_ADDR
// if task then
59540: LD_VAR 0 3
59544: IFFALSE 59572
// if task [ 1 ] [ 1 ] = p then
59546: LD_VAR 0 3
59550: PUSH
59551: LD_INT 1
59553: ARRAY
59554: PUSH
59555: LD_INT 1
59557: ARRAY
59558: PUSH
59559: LD_STRING p
59561: EQUAL
59562: IFFALSE 59572
// result := true ;
59564: LD_ADDR_VAR 0 2
59568: PUSH
59569: LD_INT 1
59571: ST_TO_ADDR
// end ;
59572: LD_VAR 0 2
59576: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
59577: LD_INT 0
59579: PPUSH
59580: PPUSH
59581: PPUSH
59582: PPUSH
// if pos < 1 then
59583: LD_VAR 0 2
59587: PUSH
59588: LD_INT 1
59590: LESS
59591: IFFALSE 59595
// exit ;
59593: GO 59898
// if pos = 1 then
59595: LD_VAR 0 2
59599: PUSH
59600: LD_INT 1
59602: EQUAL
59603: IFFALSE 59636
// result := Replace ( arr , pos [ 1 ] , value ) else
59605: LD_ADDR_VAR 0 4
59609: PUSH
59610: LD_VAR 0 1
59614: PPUSH
59615: LD_VAR 0 2
59619: PUSH
59620: LD_INT 1
59622: ARRAY
59623: PPUSH
59624: LD_VAR 0 3
59628: PPUSH
59629: CALL_OW 1
59633: ST_TO_ADDR
59634: GO 59898
// begin tmp := arr ;
59636: LD_ADDR_VAR 0 6
59640: PUSH
59641: LD_VAR 0 1
59645: ST_TO_ADDR
// s_arr := [ tmp ] ;
59646: LD_ADDR_VAR 0 7
59650: PUSH
59651: LD_VAR 0 6
59655: PUSH
59656: EMPTY
59657: LIST
59658: ST_TO_ADDR
// for i = 1 to pos - 1 do
59659: LD_ADDR_VAR 0 5
59663: PUSH
59664: DOUBLE
59665: LD_INT 1
59667: DEC
59668: ST_TO_ADDR
59669: LD_VAR 0 2
59673: PUSH
59674: LD_INT 1
59676: MINUS
59677: PUSH
59678: FOR_TO
59679: IFFALSE 59724
// begin tmp := tmp [ pos [ i ] ] ;
59681: LD_ADDR_VAR 0 6
59685: PUSH
59686: LD_VAR 0 6
59690: PUSH
59691: LD_VAR 0 2
59695: PUSH
59696: LD_VAR 0 5
59700: ARRAY
59701: ARRAY
59702: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
59703: LD_ADDR_VAR 0 7
59707: PUSH
59708: LD_VAR 0 7
59712: PUSH
59713: LD_VAR 0 6
59717: PUSH
59718: EMPTY
59719: LIST
59720: ADD
59721: ST_TO_ADDR
// end ;
59722: GO 59678
59724: POP
59725: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
59726: LD_ADDR_VAR 0 6
59730: PUSH
59731: LD_VAR 0 6
59735: PPUSH
59736: LD_VAR 0 2
59740: PUSH
59741: LD_VAR 0 2
59745: ARRAY
59746: PPUSH
59747: LD_VAR 0 3
59751: PPUSH
59752: CALL_OW 1
59756: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
59757: LD_ADDR_VAR 0 7
59761: PUSH
59762: LD_VAR 0 7
59766: PPUSH
59767: LD_VAR 0 7
59771: PPUSH
59772: LD_VAR 0 6
59776: PPUSH
59777: CALL_OW 1
59781: ST_TO_ADDR
// for i = s_arr downto 2 do
59782: LD_ADDR_VAR 0 5
59786: PUSH
59787: DOUBLE
59788: LD_VAR 0 7
59792: INC
59793: ST_TO_ADDR
59794: LD_INT 2
59796: PUSH
59797: FOR_DOWNTO
59798: IFFALSE 59882
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
59800: LD_ADDR_VAR 0 6
59804: PUSH
59805: LD_VAR 0 7
59809: PUSH
59810: LD_VAR 0 5
59814: PUSH
59815: LD_INT 1
59817: MINUS
59818: ARRAY
59819: PPUSH
59820: LD_VAR 0 2
59824: PUSH
59825: LD_VAR 0 5
59829: PUSH
59830: LD_INT 1
59832: MINUS
59833: ARRAY
59834: PPUSH
59835: LD_VAR 0 7
59839: PUSH
59840: LD_VAR 0 5
59844: ARRAY
59845: PPUSH
59846: CALL_OW 1
59850: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
59851: LD_ADDR_VAR 0 7
59855: PUSH
59856: LD_VAR 0 7
59860: PPUSH
59861: LD_VAR 0 5
59865: PUSH
59866: LD_INT 1
59868: MINUS
59869: PPUSH
59870: LD_VAR 0 6
59874: PPUSH
59875: CALL_OW 1
59879: ST_TO_ADDR
// end ;
59880: GO 59797
59882: POP
59883: POP
// result := s_arr [ 1 ] ;
59884: LD_ADDR_VAR 0 4
59888: PUSH
59889: LD_VAR 0 7
59893: PUSH
59894: LD_INT 1
59896: ARRAY
59897: ST_TO_ADDR
// end ; end ;
59898: LD_VAR 0 4
59902: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
59903: LD_INT 0
59905: PPUSH
59906: PPUSH
// if not list then
59907: LD_VAR 0 1
59911: NOT
59912: IFFALSE 59916
// exit ;
59914: GO 60007
// i := list [ pos1 ] ;
59916: LD_ADDR_VAR 0 5
59920: PUSH
59921: LD_VAR 0 1
59925: PUSH
59926: LD_VAR 0 2
59930: ARRAY
59931: ST_TO_ADDR
// if not i then
59932: LD_VAR 0 5
59936: NOT
59937: IFFALSE 59941
// exit ;
59939: GO 60007
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
59941: LD_ADDR_VAR 0 1
59945: PUSH
59946: LD_VAR 0 1
59950: PPUSH
59951: LD_VAR 0 2
59955: PPUSH
59956: LD_VAR 0 1
59960: PUSH
59961: LD_VAR 0 3
59965: ARRAY
59966: PPUSH
59967: CALL_OW 1
59971: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
59972: LD_ADDR_VAR 0 1
59976: PUSH
59977: LD_VAR 0 1
59981: PPUSH
59982: LD_VAR 0 3
59986: PPUSH
59987: LD_VAR 0 5
59991: PPUSH
59992: CALL_OW 1
59996: ST_TO_ADDR
// result := list ;
59997: LD_ADDR_VAR 0 4
60001: PUSH
60002: LD_VAR 0 1
60006: ST_TO_ADDR
// end ;
60007: LD_VAR 0 4
60011: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
60012: LD_INT 0
60014: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
60015: LD_ADDR_VAR 0 5
60019: PUSH
60020: LD_VAR 0 1
60024: PPUSH
60025: CALL_OW 250
60029: PPUSH
60030: LD_VAR 0 1
60034: PPUSH
60035: CALL_OW 251
60039: PPUSH
60040: LD_VAR 0 2
60044: PPUSH
60045: LD_VAR 0 3
60049: PPUSH
60050: LD_VAR 0 4
60054: PPUSH
60055: CALL 60433 0 5
60059: ST_TO_ADDR
// end ;
60060: LD_VAR 0 5
60064: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
60065: LD_INT 0
60067: PPUSH
60068: PPUSH
60069: PPUSH
60070: PPUSH
// if not list or not unit then
60071: LD_VAR 0 2
60075: NOT
60076: PUSH
60077: LD_VAR 0 1
60081: NOT
60082: OR
60083: IFFALSE 60087
// exit ;
60085: GO 60428
// result := [ ] ;
60087: LD_ADDR_VAR 0 5
60091: PUSH
60092: EMPTY
60093: ST_TO_ADDR
// for i in list do
60094: LD_ADDR_VAR 0 6
60098: PUSH
60099: LD_VAR 0 2
60103: PUSH
60104: FOR_IN
60105: IFFALSE 60323
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
60107: LD_ADDR_VAR 0 8
60111: PUSH
60112: LD_VAR 0 1
60116: PPUSH
60117: LD_VAR 0 6
60121: PUSH
60122: LD_INT 1
60124: ARRAY
60125: PPUSH
60126: LD_VAR 0 6
60130: PUSH
60131: LD_INT 2
60133: ARRAY
60134: PPUSH
60135: CALL_OW 297
60139: ST_TO_ADDR
// if not Count ( result ) then
60140: LD_VAR 0 5
60144: PPUSH
60145: CALL 56717 0 1
60149: NOT
60150: IFFALSE 60183
// begin result := Join ( result , [ i , tmp ] ) ;
60152: LD_ADDR_VAR 0 5
60156: PUSH
60157: LD_VAR 0 5
60161: PPUSH
60162: LD_VAR 0 6
60166: PUSH
60167: LD_VAR 0 8
60171: PUSH
60172: EMPTY
60173: LIST
60174: LIST
60175: PPUSH
60176: CALL 92306 0 2
60180: ST_TO_ADDR
// continue ;
60181: GO 60104
// end ; if result [ result ] [ 2 ] <= tmp then
60183: LD_VAR 0 5
60187: PUSH
60188: LD_VAR 0 5
60192: ARRAY
60193: PUSH
60194: LD_INT 2
60196: ARRAY
60197: PUSH
60198: LD_VAR 0 8
60202: LESSEQUAL
60203: IFFALSE 60236
// result := Join ( result , [ i , tmp ] ) else
60205: LD_ADDR_VAR 0 5
60209: PUSH
60210: LD_VAR 0 5
60214: PPUSH
60215: LD_VAR 0 6
60219: PUSH
60220: LD_VAR 0 8
60224: PUSH
60225: EMPTY
60226: LIST
60227: LIST
60228: PPUSH
60229: CALL 92306 0 2
60233: ST_TO_ADDR
60234: GO 60321
// begin for j := 1 to Count ( result ) do
60236: LD_ADDR_VAR 0 7
60240: PUSH
60241: DOUBLE
60242: LD_INT 1
60244: DEC
60245: ST_TO_ADDR
60246: LD_VAR 0 5
60250: PPUSH
60251: CALL 56717 0 1
60255: PUSH
60256: FOR_TO
60257: IFFALSE 60319
// begin if tmp < result [ j ] [ 2 ] then
60259: LD_VAR 0 8
60263: PUSH
60264: LD_VAR 0 5
60268: PUSH
60269: LD_VAR 0 7
60273: ARRAY
60274: PUSH
60275: LD_INT 2
60277: ARRAY
60278: LESS
60279: IFFALSE 60317
// begin result := Insert ( result , j , [ i , tmp ] ) ;
60281: LD_ADDR_VAR 0 5
60285: PUSH
60286: LD_VAR 0 5
60290: PPUSH
60291: LD_VAR 0 7
60295: PPUSH
60296: LD_VAR 0 6
60300: PUSH
60301: LD_VAR 0 8
60305: PUSH
60306: EMPTY
60307: LIST
60308: LIST
60309: PPUSH
60310: CALL_OW 2
60314: ST_TO_ADDR
// break ;
60315: GO 60319
// end ; end ;
60317: GO 60256
60319: POP
60320: POP
// end ; end ;
60321: GO 60104
60323: POP
60324: POP
// if result and not asc then
60325: LD_VAR 0 5
60329: PUSH
60330: LD_VAR 0 3
60334: NOT
60335: AND
60336: IFFALSE 60353
// result := ReverseArray ( result ) ;
60338: LD_ADDR_VAR 0 5
60342: PUSH
60343: LD_VAR 0 5
60347: PPUSH
60348: CALL 87593 0 1
60352: ST_TO_ADDR
// tmp := [ ] ;
60353: LD_ADDR_VAR 0 8
60357: PUSH
60358: EMPTY
60359: ST_TO_ADDR
// if mode then
60360: LD_VAR 0 4
60364: IFFALSE 60428
// begin for i := 1 to result do
60366: LD_ADDR_VAR 0 6
60370: PUSH
60371: DOUBLE
60372: LD_INT 1
60374: DEC
60375: ST_TO_ADDR
60376: LD_VAR 0 5
60380: PUSH
60381: FOR_TO
60382: IFFALSE 60416
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
60384: LD_ADDR_VAR 0 8
60388: PUSH
60389: LD_VAR 0 8
60393: PPUSH
60394: LD_VAR 0 5
60398: PUSH
60399: LD_VAR 0 6
60403: ARRAY
60404: PUSH
60405: LD_INT 1
60407: ARRAY
60408: PPUSH
60409: CALL 92306 0 2
60413: ST_TO_ADDR
60414: GO 60381
60416: POP
60417: POP
// result := tmp ;
60418: LD_ADDR_VAR 0 5
60422: PUSH
60423: LD_VAR 0 8
60427: ST_TO_ADDR
// end ; end ;
60428: LD_VAR 0 5
60432: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
60433: LD_INT 0
60435: PPUSH
60436: PPUSH
60437: PPUSH
60438: PPUSH
// if not list then
60439: LD_VAR 0 3
60443: NOT
60444: IFFALSE 60448
// exit ;
60446: GO 60836
// result := [ ] ;
60448: LD_ADDR_VAR 0 6
60452: PUSH
60453: EMPTY
60454: ST_TO_ADDR
// for i in list do
60455: LD_ADDR_VAR 0 7
60459: PUSH
60460: LD_VAR 0 3
60464: PUSH
60465: FOR_IN
60466: IFFALSE 60668
// begin tmp := GetDistUnitXY ( i , x , y ) ;
60468: LD_ADDR_VAR 0 9
60472: PUSH
60473: LD_VAR 0 7
60477: PPUSH
60478: LD_VAR 0 1
60482: PPUSH
60483: LD_VAR 0 2
60487: PPUSH
60488: CALL_OW 297
60492: ST_TO_ADDR
// if not result then
60493: LD_VAR 0 6
60497: NOT
60498: IFFALSE 60524
// result := [ [ i , tmp ] ] else
60500: LD_ADDR_VAR 0 6
60504: PUSH
60505: LD_VAR 0 7
60509: PUSH
60510: LD_VAR 0 9
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: EMPTY
60520: LIST
60521: ST_TO_ADDR
60522: GO 60666
// begin if result [ result ] [ 2 ] < tmp then
60524: LD_VAR 0 6
60528: PUSH
60529: LD_VAR 0 6
60533: ARRAY
60534: PUSH
60535: LD_INT 2
60537: ARRAY
60538: PUSH
60539: LD_VAR 0 9
60543: LESS
60544: IFFALSE 60586
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
60546: LD_ADDR_VAR 0 6
60550: PUSH
60551: LD_VAR 0 6
60555: PPUSH
60556: LD_VAR 0 6
60560: PUSH
60561: LD_INT 1
60563: PLUS
60564: PPUSH
60565: LD_VAR 0 7
60569: PUSH
60570: LD_VAR 0 9
60574: PUSH
60575: EMPTY
60576: LIST
60577: LIST
60578: PPUSH
60579: CALL_OW 2
60583: ST_TO_ADDR
60584: GO 60666
// for j = 1 to result do
60586: LD_ADDR_VAR 0 8
60590: PUSH
60591: DOUBLE
60592: LD_INT 1
60594: DEC
60595: ST_TO_ADDR
60596: LD_VAR 0 6
60600: PUSH
60601: FOR_TO
60602: IFFALSE 60664
// begin if tmp < result [ j ] [ 2 ] then
60604: LD_VAR 0 9
60608: PUSH
60609: LD_VAR 0 6
60613: PUSH
60614: LD_VAR 0 8
60618: ARRAY
60619: PUSH
60620: LD_INT 2
60622: ARRAY
60623: LESS
60624: IFFALSE 60662
// begin result := Insert ( result , j , [ i , tmp ] ) ;
60626: LD_ADDR_VAR 0 6
60630: PUSH
60631: LD_VAR 0 6
60635: PPUSH
60636: LD_VAR 0 8
60640: PPUSH
60641: LD_VAR 0 7
60645: PUSH
60646: LD_VAR 0 9
60650: PUSH
60651: EMPTY
60652: LIST
60653: LIST
60654: PPUSH
60655: CALL_OW 2
60659: ST_TO_ADDR
// break ;
60660: GO 60664
// end ; end ;
60662: GO 60601
60664: POP
60665: POP
// end ; end ;
60666: GO 60465
60668: POP
60669: POP
// if result and not asc then
60670: LD_VAR 0 6
60674: PUSH
60675: LD_VAR 0 4
60679: NOT
60680: AND
60681: IFFALSE 60756
// begin tmp := result ;
60683: LD_ADDR_VAR 0 9
60687: PUSH
60688: LD_VAR 0 6
60692: ST_TO_ADDR
// for i = tmp downto 1 do
60693: LD_ADDR_VAR 0 7
60697: PUSH
60698: DOUBLE
60699: LD_VAR 0 9
60703: INC
60704: ST_TO_ADDR
60705: LD_INT 1
60707: PUSH
60708: FOR_DOWNTO
60709: IFFALSE 60754
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
60711: LD_ADDR_VAR 0 6
60715: PUSH
60716: LD_VAR 0 6
60720: PPUSH
60721: LD_VAR 0 9
60725: PUSH
60726: LD_VAR 0 7
60730: MINUS
60731: PUSH
60732: LD_INT 1
60734: PLUS
60735: PPUSH
60736: LD_VAR 0 9
60740: PUSH
60741: LD_VAR 0 7
60745: ARRAY
60746: PPUSH
60747: CALL_OW 1
60751: ST_TO_ADDR
60752: GO 60708
60754: POP
60755: POP
// end ; tmp := [ ] ;
60756: LD_ADDR_VAR 0 9
60760: PUSH
60761: EMPTY
60762: ST_TO_ADDR
// if mode then
60763: LD_VAR 0 5
60767: IFFALSE 60836
// begin for i = 1 to result do
60769: LD_ADDR_VAR 0 7
60773: PUSH
60774: DOUBLE
60775: LD_INT 1
60777: DEC
60778: ST_TO_ADDR
60779: LD_VAR 0 6
60783: PUSH
60784: FOR_TO
60785: IFFALSE 60824
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
60787: LD_ADDR_VAR 0 9
60791: PUSH
60792: LD_VAR 0 9
60796: PPUSH
60797: LD_VAR 0 7
60801: PPUSH
60802: LD_VAR 0 6
60806: PUSH
60807: LD_VAR 0 7
60811: ARRAY
60812: PUSH
60813: LD_INT 1
60815: ARRAY
60816: PPUSH
60817: CALL_OW 1
60821: ST_TO_ADDR
60822: GO 60784
60824: POP
60825: POP
// result := tmp ;
60826: LD_ADDR_VAR 0 6
60830: PUSH
60831: LD_VAR 0 9
60835: ST_TO_ADDR
// end ; end ;
60836: LD_VAR 0 6
60840: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
60841: LD_INT 0
60843: PPUSH
60844: PPUSH
60845: PPUSH
60846: PPUSH
60847: PPUSH
60848: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
60849: LD_ADDR_VAR 0 5
60853: PUSH
60854: LD_INT 0
60856: PUSH
60857: LD_INT 0
60859: PUSH
60860: LD_INT 0
60862: PUSH
60863: EMPTY
60864: PUSH
60865: EMPTY
60866: LIST
60867: LIST
60868: LIST
60869: LIST
60870: ST_TO_ADDR
// if not x or not y then
60871: LD_VAR 0 2
60875: NOT
60876: PUSH
60877: LD_VAR 0 3
60881: NOT
60882: OR
60883: IFFALSE 60887
// exit ;
60885: GO 62537
// if not range then
60887: LD_VAR 0 4
60891: NOT
60892: IFFALSE 60902
// range := 10 ;
60894: LD_ADDR_VAR 0 4
60898: PUSH
60899: LD_INT 10
60901: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
60902: LD_ADDR_VAR 0 8
60906: PUSH
60907: LD_INT 81
60909: PUSH
60910: LD_VAR 0 1
60914: PUSH
60915: EMPTY
60916: LIST
60917: LIST
60918: PUSH
60919: LD_INT 92
60921: PUSH
60922: LD_VAR 0 2
60926: PUSH
60927: LD_VAR 0 3
60931: PUSH
60932: LD_VAR 0 4
60936: PUSH
60937: EMPTY
60938: LIST
60939: LIST
60940: LIST
60941: LIST
60942: PUSH
60943: LD_INT 3
60945: PUSH
60946: LD_INT 21
60948: PUSH
60949: LD_INT 3
60951: PUSH
60952: EMPTY
60953: LIST
60954: LIST
60955: PUSH
60956: EMPTY
60957: LIST
60958: LIST
60959: PUSH
60960: EMPTY
60961: LIST
60962: LIST
60963: LIST
60964: PPUSH
60965: CALL_OW 69
60969: ST_TO_ADDR
// if not tmp then
60970: LD_VAR 0 8
60974: NOT
60975: IFFALSE 60979
// exit ;
60977: GO 62537
// for i in tmp do
60979: LD_ADDR_VAR 0 6
60983: PUSH
60984: LD_VAR 0 8
60988: PUSH
60989: FOR_IN
60990: IFFALSE 62512
// begin points := [ 0 , 0 , 0 ] ;
60992: LD_ADDR_VAR 0 9
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: LIST
61010: ST_TO_ADDR
// bpoints := 1 ;
61011: LD_ADDR_VAR 0 10
61015: PUSH
61016: LD_INT 1
61018: ST_TO_ADDR
// case GetType ( i ) of unit_human :
61019: LD_VAR 0 6
61023: PPUSH
61024: CALL_OW 247
61028: PUSH
61029: LD_INT 1
61031: DOUBLE
61032: EQUAL
61033: IFTRUE 61037
61035: GO 61615
61037: POP
// begin if GetClass ( i ) = 1 then
61038: LD_VAR 0 6
61042: PPUSH
61043: CALL_OW 257
61047: PUSH
61048: LD_INT 1
61050: EQUAL
61051: IFFALSE 61072
// points := [ 10 , 5 , 3 ] ;
61053: LD_ADDR_VAR 0 9
61057: PUSH
61058: LD_INT 10
61060: PUSH
61061: LD_INT 5
61063: PUSH
61064: LD_INT 3
61066: PUSH
61067: EMPTY
61068: LIST
61069: LIST
61070: LIST
61071: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
61072: LD_VAR 0 6
61076: PPUSH
61077: CALL_OW 257
61081: PUSH
61082: LD_INT 2
61084: PUSH
61085: LD_INT 3
61087: PUSH
61088: LD_INT 4
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: LIST
61095: IN
61096: IFFALSE 61117
// points := [ 3 , 2 , 1 ] ;
61098: LD_ADDR_VAR 0 9
61102: PUSH
61103: LD_INT 3
61105: PUSH
61106: LD_INT 2
61108: PUSH
61109: LD_INT 1
61111: PUSH
61112: EMPTY
61113: LIST
61114: LIST
61115: LIST
61116: ST_TO_ADDR
// if GetClass ( i ) = 5 then
61117: LD_VAR 0 6
61121: PPUSH
61122: CALL_OW 257
61126: PUSH
61127: LD_INT 5
61129: EQUAL
61130: IFFALSE 61151
// points := [ 130 , 5 , 2 ] ;
61132: LD_ADDR_VAR 0 9
61136: PUSH
61137: LD_INT 130
61139: PUSH
61140: LD_INT 5
61142: PUSH
61143: LD_INT 2
61145: PUSH
61146: EMPTY
61147: LIST
61148: LIST
61149: LIST
61150: ST_TO_ADDR
// if GetClass ( i ) = 8 then
61151: LD_VAR 0 6
61155: PPUSH
61156: CALL_OW 257
61160: PUSH
61161: LD_INT 8
61163: EQUAL
61164: IFFALSE 61185
// points := [ 35 , 35 , 30 ] ;
61166: LD_ADDR_VAR 0 9
61170: PUSH
61171: LD_INT 35
61173: PUSH
61174: LD_INT 35
61176: PUSH
61177: LD_INT 30
61179: PUSH
61180: EMPTY
61181: LIST
61182: LIST
61183: LIST
61184: ST_TO_ADDR
// if GetClass ( i ) = 9 then
61185: LD_VAR 0 6
61189: PPUSH
61190: CALL_OW 257
61194: PUSH
61195: LD_INT 9
61197: EQUAL
61198: IFFALSE 61219
// points := [ 20 , 55 , 40 ] ;
61200: LD_ADDR_VAR 0 9
61204: PUSH
61205: LD_INT 20
61207: PUSH
61208: LD_INT 55
61210: PUSH
61211: LD_INT 40
61213: PUSH
61214: EMPTY
61215: LIST
61216: LIST
61217: LIST
61218: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
61219: LD_VAR 0 6
61223: PPUSH
61224: CALL_OW 257
61228: PUSH
61229: LD_INT 12
61231: PUSH
61232: LD_INT 16
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: IN
61239: IFFALSE 61260
// points := [ 5 , 3 , 2 ] ;
61241: LD_ADDR_VAR 0 9
61245: PUSH
61246: LD_INT 5
61248: PUSH
61249: LD_INT 3
61251: PUSH
61252: LD_INT 2
61254: PUSH
61255: EMPTY
61256: LIST
61257: LIST
61258: LIST
61259: ST_TO_ADDR
// if GetClass ( i ) = 17 then
61260: LD_VAR 0 6
61264: PPUSH
61265: CALL_OW 257
61269: PUSH
61270: LD_INT 17
61272: EQUAL
61273: IFFALSE 61294
// points := [ 100 , 50 , 75 ] ;
61275: LD_ADDR_VAR 0 9
61279: PUSH
61280: LD_INT 100
61282: PUSH
61283: LD_INT 50
61285: PUSH
61286: LD_INT 75
61288: PUSH
61289: EMPTY
61290: LIST
61291: LIST
61292: LIST
61293: ST_TO_ADDR
// if GetClass ( i ) = 15 then
61294: LD_VAR 0 6
61298: PPUSH
61299: CALL_OW 257
61303: PUSH
61304: LD_INT 15
61306: EQUAL
61307: IFFALSE 61328
// points := [ 10 , 5 , 3 ] ;
61309: LD_ADDR_VAR 0 9
61313: PUSH
61314: LD_INT 10
61316: PUSH
61317: LD_INT 5
61319: PUSH
61320: LD_INT 3
61322: PUSH
61323: EMPTY
61324: LIST
61325: LIST
61326: LIST
61327: ST_TO_ADDR
// if GetClass ( i ) = 14 then
61328: LD_VAR 0 6
61332: PPUSH
61333: CALL_OW 257
61337: PUSH
61338: LD_INT 14
61340: EQUAL
61341: IFFALSE 61362
// points := [ 10 , 0 , 0 ] ;
61343: LD_ADDR_VAR 0 9
61347: PUSH
61348: LD_INT 10
61350: PUSH
61351: LD_INT 0
61353: PUSH
61354: LD_INT 0
61356: PUSH
61357: EMPTY
61358: LIST
61359: LIST
61360: LIST
61361: ST_TO_ADDR
// if GetClass ( i ) = 11 then
61362: LD_VAR 0 6
61366: PPUSH
61367: CALL_OW 257
61371: PUSH
61372: LD_INT 11
61374: EQUAL
61375: IFFALSE 61396
// points := [ 30 , 10 , 5 ] ;
61377: LD_ADDR_VAR 0 9
61381: PUSH
61382: LD_INT 30
61384: PUSH
61385: LD_INT 10
61387: PUSH
61388: LD_INT 5
61390: PUSH
61391: EMPTY
61392: LIST
61393: LIST
61394: LIST
61395: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
61396: LD_VAR 0 1
61400: PPUSH
61401: LD_INT 5
61403: PPUSH
61404: CALL_OW 321
61408: PUSH
61409: LD_INT 2
61411: EQUAL
61412: IFFALSE 61429
// bpoints := bpoints * 1.8 ;
61414: LD_ADDR_VAR 0 10
61418: PUSH
61419: LD_VAR 0 10
61423: PUSH
61424: LD_REAL  1.80000000000000E+0000
61427: MUL
61428: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
61429: LD_VAR 0 6
61433: PPUSH
61434: CALL_OW 257
61438: PUSH
61439: LD_INT 1
61441: PUSH
61442: LD_INT 2
61444: PUSH
61445: LD_INT 3
61447: PUSH
61448: LD_INT 4
61450: PUSH
61451: EMPTY
61452: LIST
61453: LIST
61454: LIST
61455: LIST
61456: IN
61457: PUSH
61458: LD_VAR 0 1
61462: PPUSH
61463: LD_INT 51
61465: PPUSH
61466: CALL_OW 321
61470: PUSH
61471: LD_INT 2
61473: EQUAL
61474: AND
61475: IFFALSE 61492
// bpoints := bpoints * 1.2 ;
61477: LD_ADDR_VAR 0 10
61481: PUSH
61482: LD_VAR 0 10
61486: PUSH
61487: LD_REAL  1.20000000000000E+0000
61490: MUL
61491: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
61492: LD_VAR 0 6
61496: PPUSH
61497: CALL_OW 257
61501: PUSH
61502: LD_INT 5
61504: PUSH
61505: LD_INT 7
61507: PUSH
61508: LD_INT 9
61510: PUSH
61511: EMPTY
61512: LIST
61513: LIST
61514: LIST
61515: IN
61516: PUSH
61517: LD_VAR 0 1
61521: PPUSH
61522: LD_INT 52
61524: PPUSH
61525: CALL_OW 321
61529: PUSH
61530: LD_INT 2
61532: EQUAL
61533: AND
61534: IFFALSE 61551
// bpoints := bpoints * 1.5 ;
61536: LD_ADDR_VAR 0 10
61540: PUSH
61541: LD_VAR 0 10
61545: PUSH
61546: LD_REAL  1.50000000000000E+0000
61549: MUL
61550: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
61551: LD_VAR 0 1
61555: PPUSH
61556: LD_INT 66
61558: PPUSH
61559: CALL_OW 321
61563: PUSH
61564: LD_INT 2
61566: EQUAL
61567: IFFALSE 61584
// bpoints := bpoints * 1.1 ;
61569: LD_ADDR_VAR 0 10
61573: PUSH
61574: LD_VAR 0 10
61578: PUSH
61579: LD_REAL  1.10000000000000E+0000
61582: MUL
61583: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
61584: LD_ADDR_VAR 0 10
61588: PUSH
61589: LD_VAR 0 10
61593: PUSH
61594: LD_VAR 0 6
61598: PPUSH
61599: LD_INT 1
61601: PPUSH
61602: CALL_OW 259
61606: PUSH
61607: LD_REAL  1.15000000000000E+0000
61610: MUL
61611: MUL
61612: ST_TO_ADDR
// end ; unit_vehicle :
61613: GO 62441
61615: LD_INT 2
61617: DOUBLE
61618: EQUAL
61619: IFTRUE 61623
61621: GO 62429
61623: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
61624: LD_VAR 0 6
61628: PPUSH
61629: CALL_OW 264
61633: PUSH
61634: LD_INT 2
61636: PUSH
61637: LD_INT 42
61639: PUSH
61640: LD_INT 24
61642: PUSH
61643: EMPTY
61644: LIST
61645: LIST
61646: LIST
61647: IN
61648: IFFALSE 61669
// points := [ 25 , 5 , 3 ] ;
61650: LD_ADDR_VAR 0 9
61654: PUSH
61655: LD_INT 25
61657: PUSH
61658: LD_INT 5
61660: PUSH
61661: LD_INT 3
61663: PUSH
61664: EMPTY
61665: LIST
61666: LIST
61667: LIST
61668: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
61669: LD_VAR 0 6
61673: PPUSH
61674: CALL_OW 264
61678: PUSH
61679: LD_INT 4
61681: PUSH
61682: LD_INT 43
61684: PUSH
61685: LD_INT 25
61687: PUSH
61688: EMPTY
61689: LIST
61690: LIST
61691: LIST
61692: IN
61693: IFFALSE 61714
// points := [ 40 , 15 , 5 ] ;
61695: LD_ADDR_VAR 0 9
61699: PUSH
61700: LD_INT 40
61702: PUSH
61703: LD_INT 15
61705: PUSH
61706: LD_INT 5
61708: PUSH
61709: EMPTY
61710: LIST
61711: LIST
61712: LIST
61713: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
61714: LD_VAR 0 6
61718: PPUSH
61719: CALL_OW 264
61723: PUSH
61724: LD_INT 3
61726: PUSH
61727: LD_INT 23
61729: PUSH
61730: EMPTY
61731: LIST
61732: LIST
61733: IN
61734: IFFALSE 61755
// points := [ 7 , 25 , 8 ] ;
61736: LD_ADDR_VAR 0 9
61740: PUSH
61741: LD_INT 7
61743: PUSH
61744: LD_INT 25
61746: PUSH
61747: LD_INT 8
61749: PUSH
61750: EMPTY
61751: LIST
61752: LIST
61753: LIST
61754: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
61755: LD_VAR 0 6
61759: PPUSH
61760: CALL_OW 264
61764: PUSH
61765: LD_INT 5
61767: PUSH
61768: LD_INT 27
61770: PUSH
61771: LD_INT 44
61773: PUSH
61774: EMPTY
61775: LIST
61776: LIST
61777: LIST
61778: IN
61779: IFFALSE 61800
// points := [ 14 , 50 , 16 ] ;
61781: LD_ADDR_VAR 0 9
61785: PUSH
61786: LD_INT 14
61788: PUSH
61789: LD_INT 50
61791: PUSH
61792: LD_INT 16
61794: PUSH
61795: EMPTY
61796: LIST
61797: LIST
61798: LIST
61799: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
61800: LD_VAR 0 6
61804: PPUSH
61805: CALL_OW 264
61809: PUSH
61810: LD_INT 6
61812: PUSH
61813: LD_INT 46
61815: PUSH
61816: EMPTY
61817: LIST
61818: LIST
61819: IN
61820: IFFALSE 61841
// points := [ 32 , 120 , 70 ] ;
61822: LD_ADDR_VAR 0 9
61826: PUSH
61827: LD_INT 32
61829: PUSH
61830: LD_INT 120
61832: PUSH
61833: LD_INT 70
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: LIST
61840: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
61841: LD_VAR 0 6
61845: PPUSH
61846: CALL_OW 264
61850: PUSH
61851: LD_INT 7
61853: PUSH
61854: LD_INT 28
61856: PUSH
61857: LD_INT 45
61859: PUSH
61860: LD_INT 92
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: LIST
61867: LIST
61868: IN
61869: IFFALSE 61890
// points := [ 35 , 20 , 45 ] ;
61871: LD_ADDR_VAR 0 9
61875: PUSH
61876: LD_INT 35
61878: PUSH
61879: LD_INT 20
61881: PUSH
61882: LD_INT 45
61884: PUSH
61885: EMPTY
61886: LIST
61887: LIST
61888: LIST
61889: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
61890: LD_VAR 0 6
61894: PPUSH
61895: CALL_OW 264
61899: PUSH
61900: LD_INT 47
61902: PUSH
61903: EMPTY
61904: LIST
61905: IN
61906: IFFALSE 61927
// points := [ 67 , 45 , 75 ] ;
61908: LD_ADDR_VAR 0 9
61912: PUSH
61913: LD_INT 67
61915: PUSH
61916: LD_INT 45
61918: PUSH
61919: LD_INT 75
61921: PUSH
61922: EMPTY
61923: LIST
61924: LIST
61925: LIST
61926: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
61927: LD_VAR 0 6
61931: PPUSH
61932: CALL_OW 264
61936: PUSH
61937: LD_INT 26
61939: PUSH
61940: EMPTY
61941: LIST
61942: IN
61943: IFFALSE 61964
// points := [ 120 , 30 , 80 ] ;
61945: LD_ADDR_VAR 0 9
61949: PUSH
61950: LD_INT 120
61952: PUSH
61953: LD_INT 30
61955: PUSH
61956: LD_INT 80
61958: PUSH
61959: EMPTY
61960: LIST
61961: LIST
61962: LIST
61963: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
61964: LD_VAR 0 6
61968: PPUSH
61969: CALL_OW 264
61973: PUSH
61974: LD_INT 22
61976: PUSH
61977: EMPTY
61978: LIST
61979: IN
61980: IFFALSE 62001
// points := [ 40 , 1 , 1 ] ;
61982: LD_ADDR_VAR 0 9
61986: PUSH
61987: LD_INT 40
61989: PUSH
61990: LD_INT 1
61992: PUSH
61993: LD_INT 1
61995: PUSH
61996: EMPTY
61997: LIST
61998: LIST
61999: LIST
62000: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
62001: LD_VAR 0 6
62005: PPUSH
62006: CALL_OW 264
62010: PUSH
62011: LD_INT 29
62013: PUSH
62014: EMPTY
62015: LIST
62016: IN
62017: IFFALSE 62038
// points := [ 70 , 200 , 400 ] ;
62019: LD_ADDR_VAR 0 9
62023: PUSH
62024: LD_INT 70
62026: PUSH
62027: LD_INT 200
62029: PUSH
62030: LD_INT 400
62032: PUSH
62033: EMPTY
62034: LIST
62035: LIST
62036: LIST
62037: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
62038: LD_VAR 0 6
62042: PPUSH
62043: CALL_OW 264
62047: PUSH
62048: LD_INT 14
62050: PUSH
62051: LD_INT 53
62053: PUSH
62054: EMPTY
62055: LIST
62056: LIST
62057: IN
62058: IFFALSE 62079
// points := [ 40 , 10 , 20 ] ;
62060: LD_ADDR_VAR 0 9
62064: PUSH
62065: LD_INT 40
62067: PUSH
62068: LD_INT 10
62070: PUSH
62071: LD_INT 20
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: LIST
62078: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
62079: LD_VAR 0 6
62083: PPUSH
62084: CALL_OW 264
62088: PUSH
62089: LD_INT 9
62091: PUSH
62092: EMPTY
62093: LIST
62094: IN
62095: IFFALSE 62116
// points := [ 5 , 70 , 20 ] ;
62097: LD_ADDR_VAR 0 9
62101: PUSH
62102: LD_INT 5
62104: PUSH
62105: LD_INT 70
62107: PUSH
62108: LD_INT 20
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: LIST
62115: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
62116: LD_VAR 0 6
62120: PPUSH
62121: CALL_OW 264
62125: PUSH
62126: LD_INT 10
62128: PUSH
62129: EMPTY
62130: LIST
62131: IN
62132: IFFALSE 62153
// points := [ 35 , 110 , 70 ] ;
62134: LD_ADDR_VAR 0 9
62138: PUSH
62139: LD_INT 35
62141: PUSH
62142: LD_INT 110
62144: PUSH
62145: LD_INT 70
62147: PUSH
62148: EMPTY
62149: LIST
62150: LIST
62151: LIST
62152: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
62153: LD_VAR 0 6
62157: PPUSH
62158: CALL_OW 265
62162: PUSH
62163: LD_INT 25
62165: EQUAL
62166: IFFALSE 62187
// points := [ 80 , 65 , 100 ] ;
62168: LD_ADDR_VAR 0 9
62172: PUSH
62173: LD_INT 80
62175: PUSH
62176: LD_INT 65
62178: PUSH
62179: LD_INT 100
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: LIST
62186: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
62187: LD_VAR 0 6
62191: PPUSH
62192: CALL_OW 263
62196: PUSH
62197: LD_INT 1
62199: EQUAL
62200: IFFALSE 62235
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
62202: LD_ADDR_VAR 0 10
62206: PUSH
62207: LD_VAR 0 10
62211: PUSH
62212: LD_VAR 0 6
62216: PPUSH
62217: CALL_OW 311
62221: PPUSH
62222: LD_INT 3
62224: PPUSH
62225: CALL_OW 259
62229: PUSH
62230: LD_INT 4
62232: MUL
62233: MUL
62234: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
62235: LD_VAR 0 6
62239: PPUSH
62240: CALL_OW 263
62244: PUSH
62245: LD_INT 2
62247: EQUAL
62248: IFFALSE 62299
// begin j := IsControledBy ( i ) ;
62250: LD_ADDR_VAR 0 7
62254: PUSH
62255: LD_VAR 0 6
62259: PPUSH
62260: CALL_OW 312
62264: ST_TO_ADDR
// if j then
62265: LD_VAR 0 7
62269: IFFALSE 62299
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
62271: LD_ADDR_VAR 0 10
62275: PUSH
62276: LD_VAR 0 10
62280: PUSH
62281: LD_VAR 0 7
62285: PPUSH
62286: LD_INT 3
62288: PPUSH
62289: CALL_OW 259
62293: PUSH
62294: LD_INT 3
62296: MUL
62297: MUL
62298: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
62299: LD_VAR 0 6
62303: PPUSH
62304: CALL_OW 264
62308: PUSH
62309: LD_INT 5
62311: PUSH
62312: LD_INT 6
62314: PUSH
62315: LD_INT 46
62317: PUSH
62318: LD_INT 44
62320: PUSH
62321: LD_INT 47
62323: PUSH
62324: LD_INT 45
62326: PUSH
62327: LD_INT 28
62329: PUSH
62330: LD_INT 7
62332: PUSH
62333: LD_INT 27
62335: PUSH
62336: LD_INT 29
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: LIST
62343: LIST
62344: LIST
62345: LIST
62346: LIST
62347: LIST
62348: LIST
62349: LIST
62350: IN
62351: PUSH
62352: LD_VAR 0 1
62356: PPUSH
62357: LD_INT 52
62359: PPUSH
62360: CALL_OW 321
62364: PUSH
62365: LD_INT 2
62367: EQUAL
62368: AND
62369: IFFALSE 62386
// bpoints := bpoints * 1.2 ;
62371: LD_ADDR_VAR 0 10
62375: PUSH
62376: LD_VAR 0 10
62380: PUSH
62381: LD_REAL  1.20000000000000E+0000
62384: MUL
62385: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
62386: LD_VAR 0 6
62390: PPUSH
62391: CALL_OW 264
62395: PUSH
62396: LD_INT 6
62398: PUSH
62399: LD_INT 46
62401: PUSH
62402: LD_INT 47
62404: PUSH
62405: EMPTY
62406: LIST
62407: LIST
62408: LIST
62409: IN
62410: IFFALSE 62427
// bpoints := bpoints * 1.2 ;
62412: LD_ADDR_VAR 0 10
62416: PUSH
62417: LD_VAR 0 10
62421: PUSH
62422: LD_REAL  1.20000000000000E+0000
62425: MUL
62426: ST_TO_ADDR
// end ; unit_building :
62427: GO 62441
62429: LD_INT 3
62431: DOUBLE
62432: EQUAL
62433: IFTRUE 62437
62435: GO 62440
62437: POP
// ; end ;
62438: GO 62441
62440: POP
// for j = 1 to 3 do
62441: LD_ADDR_VAR 0 7
62445: PUSH
62446: DOUBLE
62447: LD_INT 1
62449: DEC
62450: ST_TO_ADDR
62451: LD_INT 3
62453: PUSH
62454: FOR_TO
62455: IFFALSE 62508
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
62457: LD_ADDR_VAR 0 5
62461: PUSH
62462: LD_VAR 0 5
62466: PPUSH
62467: LD_VAR 0 7
62471: PPUSH
62472: LD_VAR 0 5
62476: PUSH
62477: LD_VAR 0 7
62481: ARRAY
62482: PUSH
62483: LD_VAR 0 9
62487: PUSH
62488: LD_VAR 0 7
62492: ARRAY
62493: PUSH
62494: LD_VAR 0 10
62498: MUL
62499: PLUS
62500: PPUSH
62501: CALL_OW 1
62505: ST_TO_ADDR
62506: GO 62454
62508: POP
62509: POP
// end ;
62510: GO 60989
62512: POP
62513: POP
// result := Replace ( result , 4 , tmp ) ;
62514: LD_ADDR_VAR 0 5
62518: PUSH
62519: LD_VAR 0 5
62523: PPUSH
62524: LD_INT 4
62526: PPUSH
62527: LD_VAR 0 8
62531: PPUSH
62532: CALL_OW 1
62536: ST_TO_ADDR
// end ;
62537: LD_VAR 0 5
62541: RET
// export function DangerAtRange ( unit , range ) ; begin
62542: LD_INT 0
62544: PPUSH
// if not unit then
62545: LD_VAR 0 1
62549: NOT
62550: IFFALSE 62554
// exit ;
62552: GO 62599
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
62554: LD_ADDR_VAR 0 3
62558: PUSH
62559: LD_VAR 0 1
62563: PPUSH
62564: CALL_OW 255
62568: PPUSH
62569: LD_VAR 0 1
62573: PPUSH
62574: CALL_OW 250
62578: PPUSH
62579: LD_VAR 0 1
62583: PPUSH
62584: CALL_OW 251
62588: PPUSH
62589: LD_VAR 0 2
62593: PPUSH
62594: CALL 60841 0 4
62598: ST_TO_ADDR
// end ;
62599: LD_VAR 0 3
62603: RET
// export function DangerInArea ( side , area ) ; begin
62604: LD_INT 0
62606: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
62607: LD_ADDR_VAR 0 3
62611: PUSH
62612: LD_VAR 0 2
62616: PPUSH
62617: LD_INT 81
62619: PUSH
62620: LD_VAR 0 1
62624: PUSH
62625: EMPTY
62626: LIST
62627: LIST
62628: PPUSH
62629: CALL_OW 70
62633: ST_TO_ADDR
// end ;
62634: LD_VAR 0 3
62638: RET
// export function IsExtension ( b ) ; begin
62639: LD_INT 0
62641: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
62642: LD_ADDR_VAR 0 2
62646: PUSH
62647: LD_VAR 0 1
62651: PUSH
62652: LD_INT 23
62654: PUSH
62655: LD_INT 20
62657: PUSH
62658: LD_INT 22
62660: PUSH
62661: LD_INT 17
62663: PUSH
62664: LD_INT 24
62666: PUSH
62667: LD_INT 21
62669: PUSH
62670: LD_INT 19
62672: PUSH
62673: LD_INT 16
62675: PUSH
62676: LD_INT 25
62678: PUSH
62679: LD_INT 18
62681: PUSH
62682: EMPTY
62683: LIST
62684: LIST
62685: LIST
62686: LIST
62687: LIST
62688: LIST
62689: LIST
62690: LIST
62691: LIST
62692: LIST
62693: IN
62694: ST_TO_ADDR
// end ;
62695: LD_VAR 0 2
62699: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
62700: LD_INT 0
62702: PPUSH
62703: PPUSH
62704: PPUSH
// result := [ ] ;
62705: LD_ADDR_VAR 0 4
62709: PUSH
62710: EMPTY
62711: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
62712: LD_ADDR_VAR 0 5
62716: PUSH
62717: LD_VAR 0 2
62721: PPUSH
62722: LD_INT 21
62724: PUSH
62725: LD_INT 3
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: PPUSH
62732: CALL_OW 70
62736: ST_TO_ADDR
// if not tmp then
62737: LD_VAR 0 5
62741: NOT
62742: IFFALSE 62746
// exit ;
62744: GO 62810
// if checkLink then
62746: LD_VAR 0 3
62750: IFFALSE 62800
// begin for i in tmp do
62752: LD_ADDR_VAR 0 6
62756: PUSH
62757: LD_VAR 0 5
62761: PUSH
62762: FOR_IN
62763: IFFALSE 62798
// if GetBase ( i ) <> base then
62765: LD_VAR 0 6
62769: PPUSH
62770: CALL_OW 274
62774: PUSH
62775: LD_VAR 0 1
62779: NONEQUAL
62780: IFFALSE 62796
// ComLinkToBase ( base , i ) ;
62782: LD_VAR 0 1
62786: PPUSH
62787: LD_VAR 0 6
62791: PPUSH
62792: CALL_OW 169
62796: GO 62762
62798: POP
62799: POP
// end ; result := tmp ;
62800: LD_ADDR_VAR 0 4
62804: PUSH
62805: LD_VAR 0 5
62809: ST_TO_ADDR
// end ;
62810: LD_VAR 0 4
62814: RET
// export function ComComplete ( units , b ) ; var i ; begin
62815: LD_INT 0
62817: PPUSH
62818: PPUSH
// if not units then
62819: LD_VAR 0 1
62823: NOT
62824: IFFALSE 62828
// exit ;
62826: GO 62918
// for i in units do
62828: LD_ADDR_VAR 0 4
62832: PUSH
62833: LD_VAR 0 1
62837: PUSH
62838: FOR_IN
62839: IFFALSE 62916
// if BuildingStatus ( b ) = bs_build then
62841: LD_VAR 0 2
62845: PPUSH
62846: CALL_OW 461
62850: PUSH
62851: LD_INT 1
62853: EQUAL
62854: IFFALSE 62914
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
62856: LD_VAR 0 4
62860: PPUSH
62861: LD_STRING h
62863: PUSH
62864: LD_VAR 0 2
62868: PPUSH
62869: CALL_OW 250
62873: PUSH
62874: LD_VAR 0 2
62878: PPUSH
62879: CALL_OW 251
62883: PUSH
62884: LD_VAR 0 2
62888: PUSH
62889: LD_INT 0
62891: PUSH
62892: LD_INT 0
62894: PUSH
62895: LD_INT 0
62897: PUSH
62898: EMPTY
62899: LIST
62900: LIST
62901: LIST
62902: LIST
62903: LIST
62904: LIST
62905: LIST
62906: PUSH
62907: EMPTY
62908: LIST
62909: PPUSH
62910: CALL_OW 446
62914: GO 62838
62916: POP
62917: POP
// end ;
62918: LD_VAR 0 3
62922: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
62923: LD_INT 0
62925: PPUSH
62926: PPUSH
62927: PPUSH
62928: PPUSH
62929: PPUSH
62930: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
62931: LD_VAR 0 1
62935: NOT
62936: PUSH
62937: LD_VAR 0 1
62941: PPUSH
62942: CALL_OW 263
62946: PUSH
62947: LD_INT 2
62949: NONEQUAL
62950: OR
62951: IFFALSE 62955
// exit ;
62953: GO 63271
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
62955: LD_ADDR_VAR 0 6
62959: PUSH
62960: LD_INT 22
62962: PUSH
62963: LD_VAR 0 1
62967: PPUSH
62968: CALL_OW 255
62972: PUSH
62973: EMPTY
62974: LIST
62975: LIST
62976: PUSH
62977: LD_INT 2
62979: PUSH
62980: LD_INT 30
62982: PUSH
62983: LD_INT 36
62985: PUSH
62986: EMPTY
62987: LIST
62988: LIST
62989: PUSH
62990: LD_INT 34
62992: PUSH
62993: LD_INT 31
62995: PUSH
62996: EMPTY
62997: LIST
62998: LIST
62999: PUSH
63000: EMPTY
63001: LIST
63002: LIST
63003: LIST
63004: PUSH
63005: EMPTY
63006: LIST
63007: LIST
63008: PPUSH
63009: CALL_OW 69
63013: ST_TO_ADDR
// if not tmp then
63014: LD_VAR 0 6
63018: NOT
63019: IFFALSE 63023
// exit ;
63021: GO 63271
// result := [ ] ;
63023: LD_ADDR_VAR 0 2
63027: PUSH
63028: EMPTY
63029: ST_TO_ADDR
// for i in tmp do
63030: LD_ADDR_VAR 0 3
63034: PUSH
63035: LD_VAR 0 6
63039: PUSH
63040: FOR_IN
63041: IFFALSE 63112
// begin t := UnitsInside ( i ) ;
63043: LD_ADDR_VAR 0 4
63047: PUSH
63048: LD_VAR 0 3
63052: PPUSH
63053: CALL_OW 313
63057: ST_TO_ADDR
// if t then
63058: LD_VAR 0 4
63062: IFFALSE 63110
// for j in t do
63064: LD_ADDR_VAR 0 7
63068: PUSH
63069: LD_VAR 0 4
63073: PUSH
63074: FOR_IN
63075: IFFALSE 63108
// result := Replace ( result , result + 1 , j ) ;
63077: LD_ADDR_VAR 0 2
63081: PUSH
63082: LD_VAR 0 2
63086: PPUSH
63087: LD_VAR 0 2
63091: PUSH
63092: LD_INT 1
63094: PLUS
63095: PPUSH
63096: LD_VAR 0 7
63100: PPUSH
63101: CALL_OW 1
63105: ST_TO_ADDR
63106: GO 63074
63108: POP
63109: POP
// end ;
63110: GO 63040
63112: POP
63113: POP
// if not result then
63114: LD_VAR 0 2
63118: NOT
63119: IFFALSE 63123
// exit ;
63121: GO 63271
// mech := result [ 1 ] ;
63123: LD_ADDR_VAR 0 5
63127: PUSH
63128: LD_VAR 0 2
63132: PUSH
63133: LD_INT 1
63135: ARRAY
63136: ST_TO_ADDR
// if result > 1 then
63137: LD_VAR 0 2
63141: PUSH
63142: LD_INT 1
63144: GREATER
63145: IFFALSE 63257
// begin for i = 2 to result do
63147: LD_ADDR_VAR 0 3
63151: PUSH
63152: DOUBLE
63153: LD_INT 2
63155: DEC
63156: ST_TO_ADDR
63157: LD_VAR 0 2
63161: PUSH
63162: FOR_TO
63163: IFFALSE 63255
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
63165: LD_ADDR_VAR 0 4
63169: PUSH
63170: LD_VAR 0 2
63174: PUSH
63175: LD_VAR 0 3
63179: ARRAY
63180: PPUSH
63181: LD_INT 3
63183: PPUSH
63184: CALL_OW 259
63188: PUSH
63189: LD_VAR 0 2
63193: PUSH
63194: LD_VAR 0 3
63198: ARRAY
63199: PPUSH
63200: CALL_OW 432
63204: MINUS
63205: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
63206: LD_VAR 0 4
63210: PUSH
63211: LD_VAR 0 5
63215: PPUSH
63216: LD_INT 3
63218: PPUSH
63219: CALL_OW 259
63223: PUSH
63224: LD_VAR 0 5
63228: PPUSH
63229: CALL_OW 432
63233: MINUS
63234: GREATEREQUAL
63235: IFFALSE 63253
// mech := result [ i ] ;
63237: LD_ADDR_VAR 0 5
63241: PUSH
63242: LD_VAR 0 2
63246: PUSH
63247: LD_VAR 0 3
63251: ARRAY
63252: ST_TO_ADDR
// end ;
63253: GO 63162
63255: POP
63256: POP
// end ; ComLinkTo ( vehicle , mech ) ;
63257: LD_VAR 0 1
63261: PPUSH
63262: LD_VAR 0 5
63266: PPUSH
63267: CALL_OW 135
// end ;
63271: LD_VAR 0 2
63275: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
63276: LD_INT 0
63278: PPUSH
63279: PPUSH
63280: PPUSH
63281: PPUSH
63282: PPUSH
63283: PPUSH
63284: PPUSH
63285: PPUSH
63286: PPUSH
63287: PPUSH
63288: PPUSH
63289: PPUSH
63290: PPUSH
// result := [ ] ;
63291: LD_ADDR_VAR 0 7
63295: PUSH
63296: EMPTY
63297: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
63298: LD_VAR 0 1
63302: PPUSH
63303: CALL_OW 266
63307: PUSH
63308: LD_INT 0
63310: PUSH
63311: LD_INT 1
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: IN
63318: NOT
63319: IFFALSE 63323
// exit ;
63321: GO 64957
// if name then
63323: LD_VAR 0 3
63327: IFFALSE 63343
// SetBName ( base_dep , name ) ;
63329: LD_VAR 0 1
63333: PPUSH
63334: LD_VAR 0 3
63338: PPUSH
63339: CALL_OW 500
// base := GetBase ( base_dep ) ;
63343: LD_ADDR_VAR 0 15
63347: PUSH
63348: LD_VAR 0 1
63352: PPUSH
63353: CALL_OW 274
63357: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
63358: LD_ADDR_VAR 0 16
63362: PUSH
63363: LD_VAR 0 1
63367: PPUSH
63368: CALL_OW 255
63372: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
63373: LD_ADDR_VAR 0 17
63377: PUSH
63378: LD_VAR 0 1
63382: PPUSH
63383: CALL_OW 248
63387: ST_TO_ADDR
// if sources then
63388: LD_VAR 0 5
63392: IFFALSE 63439
// for i = 1 to 3 do
63394: LD_ADDR_VAR 0 8
63398: PUSH
63399: DOUBLE
63400: LD_INT 1
63402: DEC
63403: ST_TO_ADDR
63404: LD_INT 3
63406: PUSH
63407: FOR_TO
63408: IFFALSE 63437
// AddResourceType ( base , i , sources [ i ] ) ;
63410: LD_VAR 0 15
63414: PPUSH
63415: LD_VAR 0 8
63419: PPUSH
63420: LD_VAR 0 5
63424: PUSH
63425: LD_VAR 0 8
63429: ARRAY
63430: PPUSH
63431: CALL_OW 276
63435: GO 63407
63437: POP
63438: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
63439: LD_ADDR_VAR 0 18
63443: PUSH
63444: LD_VAR 0 15
63448: PPUSH
63449: LD_VAR 0 2
63453: PPUSH
63454: LD_INT 1
63456: PPUSH
63457: CALL 62700 0 3
63461: ST_TO_ADDR
// InitHc ;
63462: CALL_OW 19
// InitUc ;
63466: CALL_OW 18
// uc_side := side ;
63470: LD_ADDR_OWVAR 20
63474: PUSH
63475: LD_VAR 0 16
63479: ST_TO_ADDR
// uc_nation := nation ;
63480: LD_ADDR_OWVAR 21
63484: PUSH
63485: LD_VAR 0 17
63489: ST_TO_ADDR
// if buildings then
63490: LD_VAR 0 18
63494: IFFALSE 64816
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
63496: LD_ADDR_VAR 0 19
63500: PUSH
63501: LD_VAR 0 18
63505: PPUSH
63506: LD_INT 2
63508: PUSH
63509: LD_INT 30
63511: PUSH
63512: LD_INT 29
63514: PUSH
63515: EMPTY
63516: LIST
63517: LIST
63518: PUSH
63519: LD_INT 30
63521: PUSH
63522: LD_INT 30
63524: PUSH
63525: EMPTY
63526: LIST
63527: LIST
63528: PUSH
63529: EMPTY
63530: LIST
63531: LIST
63532: LIST
63533: PPUSH
63534: CALL_OW 72
63538: ST_TO_ADDR
// if tmp then
63539: LD_VAR 0 19
63543: IFFALSE 63591
// for i in tmp do
63545: LD_ADDR_VAR 0 8
63549: PUSH
63550: LD_VAR 0 19
63554: PUSH
63555: FOR_IN
63556: IFFALSE 63589
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
63558: LD_VAR 0 8
63562: PPUSH
63563: CALL_OW 250
63567: PPUSH
63568: LD_VAR 0 8
63572: PPUSH
63573: CALL_OW 251
63577: PPUSH
63578: LD_VAR 0 16
63582: PPUSH
63583: CALL_OW 441
63587: GO 63555
63589: POP
63590: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
63591: LD_VAR 0 18
63595: PPUSH
63596: LD_INT 2
63598: PUSH
63599: LD_INT 30
63601: PUSH
63602: LD_INT 32
63604: PUSH
63605: EMPTY
63606: LIST
63607: LIST
63608: PUSH
63609: LD_INT 30
63611: PUSH
63612: LD_INT 33
63614: PUSH
63615: EMPTY
63616: LIST
63617: LIST
63618: PUSH
63619: EMPTY
63620: LIST
63621: LIST
63622: LIST
63623: PPUSH
63624: CALL_OW 72
63628: IFFALSE 63716
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
63630: LD_ADDR_VAR 0 8
63634: PUSH
63635: LD_VAR 0 18
63639: PPUSH
63640: LD_INT 2
63642: PUSH
63643: LD_INT 30
63645: PUSH
63646: LD_INT 32
63648: PUSH
63649: EMPTY
63650: LIST
63651: LIST
63652: PUSH
63653: LD_INT 30
63655: PUSH
63656: LD_INT 33
63658: PUSH
63659: EMPTY
63660: LIST
63661: LIST
63662: PUSH
63663: EMPTY
63664: LIST
63665: LIST
63666: LIST
63667: PPUSH
63668: CALL_OW 72
63672: PUSH
63673: FOR_IN
63674: IFFALSE 63714
// begin if not GetBWeapon ( i ) then
63676: LD_VAR 0 8
63680: PPUSH
63681: CALL_OW 269
63685: NOT
63686: IFFALSE 63712
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
63688: LD_VAR 0 8
63692: PPUSH
63693: LD_VAR 0 8
63697: PPUSH
63698: LD_VAR 0 2
63702: PPUSH
63703: CALL 64962 0 2
63707: PPUSH
63708: CALL_OW 431
// end ;
63712: GO 63673
63714: POP
63715: POP
// end ; for i = 1 to personel do
63716: LD_ADDR_VAR 0 8
63720: PUSH
63721: DOUBLE
63722: LD_INT 1
63724: DEC
63725: ST_TO_ADDR
63726: LD_VAR 0 6
63730: PUSH
63731: FOR_TO
63732: IFFALSE 64796
// begin if i > 4 then
63734: LD_VAR 0 8
63738: PUSH
63739: LD_INT 4
63741: GREATER
63742: IFFALSE 63746
// break ;
63744: GO 64796
// case i of 1 :
63746: LD_VAR 0 8
63750: PUSH
63751: LD_INT 1
63753: DOUBLE
63754: EQUAL
63755: IFTRUE 63759
63757: GO 63839
63759: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
63760: LD_ADDR_VAR 0 12
63764: PUSH
63765: LD_VAR 0 18
63769: PPUSH
63770: LD_INT 22
63772: PUSH
63773: LD_VAR 0 16
63777: PUSH
63778: EMPTY
63779: LIST
63780: LIST
63781: PUSH
63782: LD_INT 58
63784: PUSH
63785: EMPTY
63786: LIST
63787: PUSH
63788: LD_INT 2
63790: PUSH
63791: LD_INT 30
63793: PUSH
63794: LD_INT 32
63796: PUSH
63797: EMPTY
63798: LIST
63799: LIST
63800: PUSH
63801: LD_INT 30
63803: PUSH
63804: LD_INT 4
63806: PUSH
63807: EMPTY
63808: LIST
63809: LIST
63810: PUSH
63811: LD_INT 30
63813: PUSH
63814: LD_INT 5
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: PUSH
63821: EMPTY
63822: LIST
63823: LIST
63824: LIST
63825: LIST
63826: PUSH
63827: EMPTY
63828: LIST
63829: LIST
63830: LIST
63831: PPUSH
63832: CALL_OW 72
63836: ST_TO_ADDR
63837: GO 64061
63839: LD_INT 2
63841: DOUBLE
63842: EQUAL
63843: IFTRUE 63847
63845: GO 63909
63847: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
63848: LD_ADDR_VAR 0 12
63852: PUSH
63853: LD_VAR 0 18
63857: PPUSH
63858: LD_INT 22
63860: PUSH
63861: LD_VAR 0 16
63865: PUSH
63866: EMPTY
63867: LIST
63868: LIST
63869: PUSH
63870: LD_INT 2
63872: PUSH
63873: LD_INT 30
63875: PUSH
63876: LD_INT 0
63878: PUSH
63879: EMPTY
63880: LIST
63881: LIST
63882: PUSH
63883: LD_INT 30
63885: PUSH
63886: LD_INT 1
63888: PUSH
63889: EMPTY
63890: LIST
63891: LIST
63892: PUSH
63893: EMPTY
63894: LIST
63895: LIST
63896: LIST
63897: PUSH
63898: EMPTY
63899: LIST
63900: LIST
63901: PPUSH
63902: CALL_OW 72
63906: ST_TO_ADDR
63907: GO 64061
63909: LD_INT 3
63911: DOUBLE
63912: EQUAL
63913: IFTRUE 63917
63915: GO 63979
63917: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
63918: LD_ADDR_VAR 0 12
63922: PUSH
63923: LD_VAR 0 18
63927: PPUSH
63928: LD_INT 22
63930: PUSH
63931: LD_VAR 0 16
63935: PUSH
63936: EMPTY
63937: LIST
63938: LIST
63939: PUSH
63940: LD_INT 2
63942: PUSH
63943: LD_INT 30
63945: PUSH
63946: LD_INT 2
63948: PUSH
63949: EMPTY
63950: LIST
63951: LIST
63952: PUSH
63953: LD_INT 30
63955: PUSH
63956: LD_INT 3
63958: PUSH
63959: EMPTY
63960: LIST
63961: LIST
63962: PUSH
63963: EMPTY
63964: LIST
63965: LIST
63966: LIST
63967: PUSH
63968: EMPTY
63969: LIST
63970: LIST
63971: PPUSH
63972: CALL_OW 72
63976: ST_TO_ADDR
63977: GO 64061
63979: LD_INT 4
63981: DOUBLE
63982: EQUAL
63983: IFTRUE 63987
63985: GO 64060
63987: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
63988: LD_ADDR_VAR 0 12
63992: PUSH
63993: LD_VAR 0 18
63997: PPUSH
63998: LD_INT 22
64000: PUSH
64001: LD_VAR 0 16
64005: PUSH
64006: EMPTY
64007: LIST
64008: LIST
64009: PUSH
64010: LD_INT 2
64012: PUSH
64013: LD_INT 30
64015: PUSH
64016: LD_INT 6
64018: PUSH
64019: EMPTY
64020: LIST
64021: LIST
64022: PUSH
64023: LD_INT 30
64025: PUSH
64026: LD_INT 7
64028: PUSH
64029: EMPTY
64030: LIST
64031: LIST
64032: PUSH
64033: LD_INT 30
64035: PUSH
64036: LD_INT 8
64038: PUSH
64039: EMPTY
64040: LIST
64041: LIST
64042: PUSH
64043: EMPTY
64044: LIST
64045: LIST
64046: LIST
64047: LIST
64048: PUSH
64049: EMPTY
64050: LIST
64051: LIST
64052: PPUSH
64053: CALL_OW 72
64057: ST_TO_ADDR
64058: GO 64061
64060: POP
// if i = 1 then
64061: LD_VAR 0 8
64065: PUSH
64066: LD_INT 1
64068: EQUAL
64069: IFFALSE 64180
// begin tmp := [ ] ;
64071: LD_ADDR_VAR 0 19
64075: PUSH
64076: EMPTY
64077: ST_TO_ADDR
// for j in f do
64078: LD_ADDR_VAR 0 9
64082: PUSH
64083: LD_VAR 0 12
64087: PUSH
64088: FOR_IN
64089: IFFALSE 64162
// if GetBType ( j ) = b_bunker then
64091: LD_VAR 0 9
64095: PPUSH
64096: CALL_OW 266
64100: PUSH
64101: LD_INT 32
64103: EQUAL
64104: IFFALSE 64131
// tmp := Insert ( tmp , 1 , j ) else
64106: LD_ADDR_VAR 0 19
64110: PUSH
64111: LD_VAR 0 19
64115: PPUSH
64116: LD_INT 1
64118: PPUSH
64119: LD_VAR 0 9
64123: PPUSH
64124: CALL_OW 2
64128: ST_TO_ADDR
64129: GO 64160
// tmp := Insert ( tmp , tmp + 1 , j ) ;
64131: LD_ADDR_VAR 0 19
64135: PUSH
64136: LD_VAR 0 19
64140: PPUSH
64141: LD_VAR 0 19
64145: PUSH
64146: LD_INT 1
64148: PLUS
64149: PPUSH
64150: LD_VAR 0 9
64154: PPUSH
64155: CALL_OW 2
64159: ST_TO_ADDR
64160: GO 64088
64162: POP
64163: POP
// if tmp then
64164: LD_VAR 0 19
64168: IFFALSE 64180
// f := tmp ;
64170: LD_ADDR_VAR 0 12
64174: PUSH
64175: LD_VAR 0 19
64179: ST_TO_ADDR
// end ; x := personel [ i ] ;
64180: LD_ADDR_VAR 0 13
64184: PUSH
64185: LD_VAR 0 6
64189: PUSH
64190: LD_VAR 0 8
64194: ARRAY
64195: ST_TO_ADDR
// if x = - 1 then
64196: LD_VAR 0 13
64200: PUSH
64201: LD_INT 1
64203: NEG
64204: EQUAL
64205: IFFALSE 64414
// begin for j in f do
64207: LD_ADDR_VAR 0 9
64211: PUSH
64212: LD_VAR 0 12
64216: PUSH
64217: FOR_IN
64218: IFFALSE 64410
// repeat InitHc ;
64220: CALL_OW 19
// if GetBType ( j ) = b_barracks then
64224: LD_VAR 0 9
64228: PPUSH
64229: CALL_OW 266
64233: PUSH
64234: LD_INT 5
64236: EQUAL
64237: IFFALSE 64307
// begin if UnitsInside ( j ) < 3 then
64239: LD_VAR 0 9
64243: PPUSH
64244: CALL_OW 313
64248: PUSH
64249: LD_INT 3
64251: LESS
64252: IFFALSE 64288
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
64254: LD_INT 0
64256: PPUSH
64257: LD_INT 5
64259: PUSH
64260: LD_INT 8
64262: PUSH
64263: LD_INT 9
64265: PUSH
64266: EMPTY
64267: LIST
64268: LIST
64269: LIST
64270: PUSH
64271: LD_VAR 0 17
64275: ARRAY
64276: PPUSH
64277: LD_VAR 0 4
64281: PPUSH
64282: CALL_OW 380
64286: GO 64305
// PrepareHuman ( false , i , skill ) ;
64288: LD_INT 0
64290: PPUSH
64291: LD_VAR 0 8
64295: PPUSH
64296: LD_VAR 0 4
64300: PPUSH
64301: CALL_OW 380
// end else
64305: GO 64324
// PrepareHuman ( false , i , skill ) ;
64307: LD_INT 0
64309: PPUSH
64310: LD_VAR 0 8
64314: PPUSH
64315: LD_VAR 0 4
64319: PPUSH
64320: CALL_OW 380
// un := CreateHuman ;
64324: LD_ADDR_VAR 0 14
64328: PUSH
64329: CALL_OW 44
64333: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
64334: LD_ADDR_VAR 0 7
64338: PUSH
64339: LD_VAR 0 7
64343: PPUSH
64344: LD_INT 1
64346: PPUSH
64347: LD_VAR 0 14
64351: PPUSH
64352: CALL_OW 2
64356: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
64357: LD_VAR 0 14
64361: PPUSH
64362: LD_VAR 0 9
64366: PPUSH
64367: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
64371: LD_VAR 0 9
64375: PPUSH
64376: CALL_OW 313
64380: PUSH
64381: LD_INT 6
64383: EQUAL
64384: PUSH
64385: LD_VAR 0 9
64389: PPUSH
64390: CALL_OW 266
64394: PUSH
64395: LD_INT 32
64397: PUSH
64398: LD_INT 31
64400: PUSH
64401: EMPTY
64402: LIST
64403: LIST
64404: IN
64405: OR
64406: IFFALSE 64220
64408: GO 64217
64410: POP
64411: POP
// end else
64412: GO 64794
// for j = 1 to x do
64414: LD_ADDR_VAR 0 9
64418: PUSH
64419: DOUBLE
64420: LD_INT 1
64422: DEC
64423: ST_TO_ADDR
64424: LD_VAR 0 13
64428: PUSH
64429: FOR_TO
64430: IFFALSE 64792
// begin InitHc ;
64432: CALL_OW 19
// if not f then
64436: LD_VAR 0 12
64440: NOT
64441: IFFALSE 64530
// begin PrepareHuman ( false , i , skill ) ;
64443: LD_INT 0
64445: PPUSH
64446: LD_VAR 0 8
64450: PPUSH
64451: LD_VAR 0 4
64455: PPUSH
64456: CALL_OW 380
// un := CreateHuman ;
64460: LD_ADDR_VAR 0 14
64464: PUSH
64465: CALL_OW 44
64469: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
64470: LD_ADDR_VAR 0 7
64474: PUSH
64475: LD_VAR 0 7
64479: PPUSH
64480: LD_INT 1
64482: PPUSH
64483: LD_VAR 0 14
64487: PPUSH
64488: CALL_OW 2
64492: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
64493: LD_VAR 0 14
64497: PPUSH
64498: LD_VAR 0 1
64502: PPUSH
64503: CALL_OW 250
64507: PPUSH
64508: LD_VAR 0 1
64512: PPUSH
64513: CALL_OW 251
64517: PPUSH
64518: LD_INT 10
64520: PPUSH
64521: LD_INT 0
64523: PPUSH
64524: CALL_OW 50
// continue ;
64528: GO 64429
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
64530: LD_VAR 0 12
64534: PUSH
64535: LD_INT 1
64537: ARRAY
64538: PPUSH
64539: CALL_OW 313
64543: PUSH
64544: LD_VAR 0 12
64548: PUSH
64549: LD_INT 1
64551: ARRAY
64552: PPUSH
64553: CALL_OW 266
64557: PUSH
64558: LD_INT 32
64560: PUSH
64561: LD_INT 31
64563: PUSH
64564: EMPTY
64565: LIST
64566: LIST
64567: IN
64568: AND
64569: PUSH
64570: LD_VAR 0 12
64574: PUSH
64575: LD_INT 1
64577: ARRAY
64578: PPUSH
64579: CALL_OW 313
64583: PUSH
64584: LD_INT 6
64586: EQUAL
64587: OR
64588: IFFALSE 64608
// f := Delete ( f , 1 ) ;
64590: LD_ADDR_VAR 0 12
64594: PUSH
64595: LD_VAR 0 12
64599: PPUSH
64600: LD_INT 1
64602: PPUSH
64603: CALL_OW 3
64607: ST_TO_ADDR
// if not f then
64608: LD_VAR 0 12
64612: NOT
64613: IFFALSE 64631
// begin x := x + 2 ;
64615: LD_ADDR_VAR 0 13
64619: PUSH
64620: LD_VAR 0 13
64624: PUSH
64625: LD_INT 2
64627: PLUS
64628: ST_TO_ADDR
// continue ;
64629: GO 64429
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
64631: LD_VAR 0 12
64635: PUSH
64636: LD_INT 1
64638: ARRAY
64639: PPUSH
64640: CALL_OW 266
64644: PUSH
64645: LD_INT 5
64647: EQUAL
64648: IFFALSE 64722
// begin if UnitsInside ( f [ 1 ] ) < 3 then
64650: LD_VAR 0 12
64654: PUSH
64655: LD_INT 1
64657: ARRAY
64658: PPUSH
64659: CALL_OW 313
64663: PUSH
64664: LD_INT 3
64666: LESS
64667: IFFALSE 64703
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
64669: LD_INT 0
64671: PPUSH
64672: LD_INT 5
64674: PUSH
64675: LD_INT 8
64677: PUSH
64678: LD_INT 9
64680: PUSH
64681: EMPTY
64682: LIST
64683: LIST
64684: LIST
64685: PUSH
64686: LD_VAR 0 17
64690: ARRAY
64691: PPUSH
64692: LD_VAR 0 4
64696: PPUSH
64697: CALL_OW 380
64701: GO 64720
// PrepareHuman ( false , i , skill ) ;
64703: LD_INT 0
64705: PPUSH
64706: LD_VAR 0 8
64710: PPUSH
64711: LD_VAR 0 4
64715: PPUSH
64716: CALL_OW 380
// end else
64720: GO 64739
// PrepareHuman ( false , i , skill ) ;
64722: LD_INT 0
64724: PPUSH
64725: LD_VAR 0 8
64729: PPUSH
64730: LD_VAR 0 4
64734: PPUSH
64735: CALL_OW 380
// un := CreateHuman ;
64739: LD_ADDR_VAR 0 14
64743: PUSH
64744: CALL_OW 44
64748: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
64749: LD_ADDR_VAR 0 7
64753: PUSH
64754: LD_VAR 0 7
64758: PPUSH
64759: LD_INT 1
64761: PPUSH
64762: LD_VAR 0 14
64766: PPUSH
64767: CALL_OW 2
64771: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
64772: LD_VAR 0 14
64776: PPUSH
64777: LD_VAR 0 12
64781: PUSH
64782: LD_INT 1
64784: ARRAY
64785: PPUSH
64786: CALL_OW 52
// end ;
64790: GO 64429
64792: POP
64793: POP
// end ;
64794: GO 63731
64796: POP
64797: POP
// result := result ^ buildings ;
64798: LD_ADDR_VAR 0 7
64802: PUSH
64803: LD_VAR 0 7
64807: PUSH
64808: LD_VAR 0 18
64812: ADD
64813: ST_TO_ADDR
// end else
64814: GO 64957
// begin for i = 1 to personel do
64816: LD_ADDR_VAR 0 8
64820: PUSH
64821: DOUBLE
64822: LD_INT 1
64824: DEC
64825: ST_TO_ADDR
64826: LD_VAR 0 6
64830: PUSH
64831: FOR_TO
64832: IFFALSE 64955
// begin if i > 4 then
64834: LD_VAR 0 8
64838: PUSH
64839: LD_INT 4
64841: GREATER
64842: IFFALSE 64846
// break ;
64844: GO 64955
// x := personel [ i ] ;
64846: LD_ADDR_VAR 0 13
64850: PUSH
64851: LD_VAR 0 6
64855: PUSH
64856: LD_VAR 0 8
64860: ARRAY
64861: ST_TO_ADDR
// if x = - 1 then
64862: LD_VAR 0 13
64866: PUSH
64867: LD_INT 1
64869: NEG
64870: EQUAL
64871: IFFALSE 64875
// continue ;
64873: GO 64831
// PrepareHuman ( false , i , skill ) ;
64875: LD_INT 0
64877: PPUSH
64878: LD_VAR 0 8
64882: PPUSH
64883: LD_VAR 0 4
64887: PPUSH
64888: CALL_OW 380
// un := CreateHuman ;
64892: LD_ADDR_VAR 0 14
64896: PUSH
64897: CALL_OW 44
64901: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
64902: LD_VAR 0 14
64906: PPUSH
64907: LD_VAR 0 1
64911: PPUSH
64912: CALL_OW 250
64916: PPUSH
64917: LD_VAR 0 1
64921: PPUSH
64922: CALL_OW 251
64926: PPUSH
64927: LD_INT 10
64929: PPUSH
64930: LD_INT 0
64932: PPUSH
64933: CALL_OW 50
// result := result ^ un ;
64937: LD_ADDR_VAR 0 7
64941: PUSH
64942: LD_VAR 0 7
64946: PUSH
64947: LD_VAR 0 14
64951: ADD
64952: ST_TO_ADDR
// end ;
64953: GO 64831
64955: POP
64956: POP
// end ; end ;
64957: LD_VAR 0 7
64961: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
64962: LD_INT 0
64964: PPUSH
64965: PPUSH
64966: PPUSH
64967: PPUSH
64968: PPUSH
64969: PPUSH
64970: PPUSH
64971: PPUSH
64972: PPUSH
64973: PPUSH
64974: PPUSH
64975: PPUSH
64976: PPUSH
64977: PPUSH
64978: PPUSH
64979: PPUSH
// result := false ;
64980: LD_ADDR_VAR 0 3
64984: PUSH
64985: LD_INT 0
64987: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
64988: LD_VAR 0 1
64992: NOT
64993: PUSH
64994: LD_VAR 0 1
64998: PPUSH
64999: CALL_OW 266
65003: PUSH
65004: LD_INT 32
65006: PUSH
65007: LD_INT 33
65009: PUSH
65010: EMPTY
65011: LIST
65012: LIST
65013: IN
65014: NOT
65015: OR
65016: IFFALSE 65020
// exit ;
65018: GO 66129
// nat := GetNation ( tower ) ;
65020: LD_ADDR_VAR 0 12
65024: PUSH
65025: LD_VAR 0 1
65029: PPUSH
65030: CALL_OW 248
65034: ST_TO_ADDR
// side := GetSide ( tower ) ;
65035: LD_ADDR_VAR 0 16
65039: PUSH
65040: LD_VAR 0 1
65044: PPUSH
65045: CALL_OW 255
65049: ST_TO_ADDR
// x := GetX ( tower ) ;
65050: LD_ADDR_VAR 0 10
65054: PUSH
65055: LD_VAR 0 1
65059: PPUSH
65060: CALL_OW 250
65064: ST_TO_ADDR
// y := GetY ( tower ) ;
65065: LD_ADDR_VAR 0 11
65069: PUSH
65070: LD_VAR 0 1
65074: PPUSH
65075: CALL_OW 251
65079: ST_TO_ADDR
// if not x or not y then
65080: LD_VAR 0 10
65084: NOT
65085: PUSH
65086: LD_VAR 0 11
65090: NOT
65091: OR
65092: IFFALSE 65096
// exit ;
65094: GO 66129
// weapon := 0 ;
65096: LD_ADDR_VAR 0 18
65100: PUSH
65101: LD_INT 0
65103: ST_TO_ADDR
// fac_list := [ ] ;
65104: LD_ADDR_VAR 0 17
65108: PUSH
65109: EMPTY
65110: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
65111: LD_ADDR_VAR 0 6
65115: PUSH
65116: LD_VAR 0 1
65120: PPUSH
65121: CALL_OW 274
65125: PPUSH
65126: LD_VAR 0 2
65130: PPUSH
65131: LD_INT 0
65133: PPUSH
65134: CALL 62700 0 3
65138: PPUSH
65139: LD_INT 30
65141: PUSH
65142: LD_INT 3
65144: PUSH
65145: EMPTY
65146: LIST
65147: LIST
65148: PPUSH
65149: CALL_OW 72
65153: ST_TO_ADDR
// if not factories then
65154: LD_VAR 0 6
65158: NOT
65159: IFFALSE 65163
// exit ;
65161: GO 66129
// for i in factories do
65163: LD_ADDR_VAR 0 8
65167: PUSH
65168: LD_VAR 0 6
65172: PUSH
65173: FOR_IN
65174: IFFALSE 65199
// fac_list := fac_list union AvailableWeaponList ( i ) ;
65176: LD_ADDR_VAR 0 17
65180: PUSH
65181: LD_VAR 0 17
65185: PUSH
65186: LD_VAR 0 8
65190: PPUSH
65191: CALL_OW 478
65195: UNION
65196: ST_TO_ADDR
65197: GO 65173
65199: POP
65200: POP
// if not fac_list then
65201: LD_VAR 0 17
65205: NOT
65206: IFFALSE 65210
// exit ;
65208: GO 66129
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
65210: LD_ADDR_VAR 0 5
65214: PUSH
65215: LD_INT 4
65217: PUSH
65218: LD_INT 5
65220: PUSH
65221: LD_INT 9
65223: PUSH
65224: LD_INT 10
65226: PUSH
65227: LD_INT 6
65229: PUSH
65230: LD_INT 7
65232: PUSH
65233: LD_INT 11
65235: PUSH
65236: EMPTY
65237: LIST
65238: LIST
65239: LIST
65240: LIST
65241: LIST
65242: LIST
65243: LIST
65244: PUSH
65245: LD_INT 27
65247: PUSH
65248: LD_INT 28
65250: PUSH
65251: LD_INT 26
65253: PUSH
65254: LD_INT 30
65256: PUSH
65257: EMPTY
65258: LIST
65259: LIST
65260: LIST
65261: LIST
65262: PUSH
65263: LD_INT 43
65265: PUSH
65266: LD_INT 44
65268: PUSH
65269: LD_INT 46
65271: PUSH
65272: LD_INT 45
65274: PUSH
65275: LD_INT 47
65277: PUSH
65278: LD_INT 49
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: LIST
65285: LIST
65286: LIST
65287: LIST
65288: PUSH
65289: EMPTY
65290: LIST
65291: LIST
65292: LIST
65293: PUSH
65294: LD_VAR 0 12
65298: ARRAY
65299: ST_TO_ADDR
// list := list isect fac_list ;
65300: LD_ADDR_VAR 0 5
65304: PUSH
65305: LD_VAR 0 5
65309: PUSH
65310: LD_VAR 0 17
65314: ISECT
65315: ST_TO_ADDR
// if not list then
65316: LD_VAR 0 5
65320: NOT
65321: IFFALSE 65325
// exit ;
65323: GO 66129
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
65325: LD_VAR 0 12
65329: PUSH
65330: LD_INT 3
65332: EQUAL
65333: PUSH
65334: LD_INT 49
65336: PUSH
65337: LD_VAR 0 5
65341: IN
65342: AND
65343: PUSH
65344: LD_INT 31
65346: PPUSH
65347: LD_VAR 0 16
65351: PPUSH
65352: CALL_OW 321
65356: PUSH
65357: LD_INT 2
65359: EQUAL
65360: AND
65361: IFFALSE 65421
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
65363: LD_INT 22
65365: PUSH
65366: LD_VAR 0 16
65370: PUSH
65371: EMPTY
65372: LIST
65373: LIST
65374: PUSH
65375: LD_INT 35
65377: PUSH
65378: LD_INT 49
65380: PUSH
65381: EMPTY
65382: LIST
65383: LIST
65384: PUSH
65385: LD_INT 91
65387: PUSH
65388: LD_VAR 0 1
65392: PUSH
65393: LD_INT 10
65395: PUSH
65396: EMPTY
65397: LIST
65398: LIST
65399: LIST
65400: PUSH
65401: EMPTY
65402: LIST
65403: LIST
65404: LIST
65405: PPUSH
65406: CALL_OW 69
65410: NOT
65411: IFFALSE 65421
// weapon := ru_time_lapser ;
65413: LD_ADDR_VAR 0 18
65417: PUSH
65418: LD_INT 49
65420: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
65421: LD_VAR 0 12
65425: PUSH
65426: LD_INT 1
65428: PUSH
65429: LD_INT 2
65431: PUSH
65432: EMPTY
65433: LIST
65434: LIST
65435: IN
65436: PUSH
65437: LD_INT 11
65439: PUSH
65440: LD_VAR 0 5
65444: IN
65445: PUSH
65446: LD_INT 30
65448: PUSH
65449: LD_VAR 0 5
65453: IN
65454: OR
65455: AND
65456: PUSH
65457: LD_INT 6
65459: PPUSH
65460: LD_VAR 0 16
65464: PPUSH
65465: CALL_OW 321
65469: PUSH
65470: LD_INT 2
65472: EQUAL
65473: AND
65474: IFFALSE 65639
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
65476: LD_INT 22
65478: PUSH
65479: LD_VAR 0 16
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: LD_INT 2
65490: PUSH
65491: LD_INT 35
65493: PUSH
65494: LD_INT 11
65496: PUSH
65497: EMPTY
65498: LIST
65499: LIST
65500: PUSH
65501: LD_INT 35
65503: PUSH
65504: LD_INT 30
65506: PUSH
65507: EMPTY
65508: LIST
65509: LIST
65510: PUSH
65511: EMPTY
65512: LIST
65513: LIST
65514: LIST
65515: PUSH
65516: LD_INT 91
65518: PUSH
65519: LD_VAR 0 1
65523: PUSH
65524: LD_INT 18
65526: PUSH
65527: EMPTY
65528: LIST
65529: LIST
65530: LIST
65531: PUSH
65532: EMPTY
65533: LIST
65534: LIST
65535: LIST
65536: PPUSH
65537: CALL_OW 69
65541: NOT
65542: PUSH
65543: LD_INT 22
65545: PUSH
65546: LD_VAR 0 16
65550: PUSH
65551: EMPTY
65552: LIST
65553: LIST
65554: PUSH
65555: LD_INT 2
65557: PUSH
65558: LD_INT 30
65560: PUSH
65561: LD_INT 32
65563: PUSH
65564: EMPTY
65565: LIST
65566: LIST
65567: PUSH
65568: LD_INT 30
65570: PUSH
65571: LD_INT 33
65573: PUSH
65574: EMPTY
65575: LIST
65576: LIST
65577: PUSH
65578: EMPTY
65579: LIST
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 91
65585: PUSH
65586: LD_VAR 0 1
65590: PUSH
65591: LD_INT 12
65593: PUSH
65594: EMPTY
65595: LIST
65596: LIST
65597: LIST
65598: PUSH
65599: EMPTY
65600: LIST
65601: LIST
65602: LIST
65603: PUSH
65604: EMPTY
65605: LIST
65606: PPUSH
65607: CALL_OW 69
65611: PUSH
65612: LD_INT 2
65614: GREATER
65615: AND
65616: IFFALSE 65639
// weapon := [ us_radar , ar_radar ] [ nat ] ;
65618: LD_ADDR_VAR 0 18
65622: PUSH
65623: LD_INT 11
65625: PUSH
65626: LD_INT 30
65628: PUSH
65629: EMPTY
65630: LIST
65631: LIST
65632: PUSH
65633: LD_VAR 0 12
65637: ARRAY
65638: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
65639: LD_VAR 0 18
65643: NOT
65644: PUSH
65645: LD_INT 40
65647: PPUSH
65648: LD_VAR 0 16
65652: PPUSH
65653: CALL_OW 321
65657: PUSH
65658: LD_INT 2
65660: EQUAL
65661: AND
65662: PUSH
65663: LD_INT 7
65665: PUSH
65666: LD_VAR 0 5
65670: IN
65671: PUSH
65672: LD_INT 28
65674: PUSH
65675: LD_VAR 0 5
65679: IN
65680: OR
65681: PUSH
65682: LD_INT 45
65684: PUSH
65685: LD_VAR 0 5
65689: IN
65690: OR
65691: AND
65692: IFFALSE 65946
// begin hex := GetHexInfo ( x , y ) ;
65694: LD_ADDR_VAR 0 4
65698: PUSH
65699: LD_VAR 0 10
65703: PPUSH
65704: LD_VAR 0 11
65708: PPUSH
65709: CALL_OW 546
65713: ST_TO_ADDR
// if hex [ 1 ] then
65714: LD_VAR 0 4
65718: PUSH
65719: LD_INT 1
65721: ARRAY
65722: IFFALSE 65726
// exit ;
65724: GO 66129
// height := hex [ 2 ] ;
65726: LD_ADDR_VAR 0 15
65730: PUSH
65731: LD_VAR 0 4
65735: PUSH
65736: LD_INT 2
65738: ARRAY
65739: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
65740: LD_ADDR_VAR 0 14
65744: PUSH
65745: LD_INT 0
65747: PUSH
65748: LD_INT 2
65750: PUSH
65751: LD_INT 3
65753: PUSH
65754: LD_INT 5
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: LIST
65761: LIST
65762: ST_TO_ADDR
// for i in tmp do
65763: LD_ADDR_VAR 0 8
65767: PUSH
65768: LD_VAR 0 14
65772: PUSH
65773: FOR_IN
65774: IFFALSE 65944
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
65776: LD_ADDR_VAR 0 9
65780: PUSH
65781: LD_VAR 0 10
65785: PPUSH
65786: LD_VAR 0 8
65790: PPUSH
65791: LD_INT 5
65793: PPUSH
65794: CALL_OW 272
65798: PUSH
65799: LD_VAR 0 11
65803: PPUSH
65804: LD_VAR 0 8
65808: PPUSH
65809: LD_INT 5
65811: PPUSH
65812: CALL_OW 273
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
65821: LD_VAR 0 9
65825: PUSH
65826: LD_INT 1
65828: ARRAY
65829: PPUSH
65830: LD_VAR 0 9
65834: PUSH
65835: LD_INT 2
65837: ARRAY
65838: PPUSH
65839: CALL_OW 488
65843: IFFALSE 65942
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
65845: LD_ADDR_VAR 0 4
65849: PUSH
65850: LD_VAR 0 9
65854: PUSH
65855: LD_INT 1
65857: ARRAY
65858: PPUSH
65859: LD_VAR 0 9
65863: PUSH
65864: LD_INT 2
65866: ARRAY
65867: PPUSH
65868: CALL_OW 546
65872: ST_TO_ADDR
// if hex [ 1 ] then
65873: LD_VAR 0 4
65877: PUSH
65878: LD_INT 1
65880: ARRAY
65881: IFFALSE 65885
// continue ;
65883: GO 65773
// h := hex [ 2 ] ;
65885: LD_ADDR_VAR 0 13
65889: PUSH
65890: LD_VAR 0 4
65894: PUSH
65895: LD_INT 2
65897: ARRAY
65898: ST_TO_ADDR
// if h + 7 < height then
65899: LD_VAR 0 13
65903: PUSH
65904: LD_INT 7
65906: PLUS
65907: PUSH
65908: LD_VAR 0 15
65912: LESS
65913: IFFALSE 65942
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
65915: LD_ADDR_VAR 0 18
65919: PUSH
65920: LD_INT 7
65922: PUSH
65923: LD_INT 28
65925: PUSH
65926: LD_INT 45
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: LIST
65933: PUSH
65934: LD_VAR 0 12
65938: ARRAY
65939: ST_TO_ADDR
// break ;
65940: GO 65944
// end ; end ; end ;
65942: GO 65773
65944: POP
65945: POP
// end ; if not weapon then
65946: LD_VAR 0 18
65950: NOT
65951: IFFALSE 66011
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
65953: LD_ADDR_VAR 0 5
65957: PUSH
65958: LD_VAR 0 5
65962: PUSH
65963: LD_INT 11
65965: PUSH
65966: LD_INT 30
65968: PUSH
65969: LD_INT 49
65971: PUSH
65972: EMPTY
65973: LIST
65974: LIST
65975: LIST
65976: DIFF
65977: ST_TO_ADDR
// if not list then
65978: LD_VAR 0 5
65982: NOT
65983: IFFALSE 65987
// exit ;
65985: GO 66129
// weapon := list [ rand ( 1 , list ) ] ;
65987: LD_ADDR_VAR 0 18
65991: PUSH
65992: LD_VAR 0 5
65996: PUSH
65997: LD_INT 1
65999: PPUSH
66000: LD_VAR 0 5
66004: PPUSH
66005: CALL_OW 12
66009: ARRAY
66010: ST_TO_ADDR
// end ; if weapon then
66011: LD_VAR 0 18
66015: IFFALSE 66129
// begin tmp := CostOfWeapon ( weapon ) ;
66017: LD_ADDR_VAR 0 14
66021: PUSH
66022: LD_VAR 0 18
66026: PPUSH
66027: CALL_OW 451
66031: ST_TO_ADDR
// j := GetBase ( tower ) ;
66032: LD_ADDR_VAR 0 9
66036: PUSH
66037: LD_VAR 0 1
66041: PPUSH
66042: CALL_OW 274
66046: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
66047: LD_VAR 0 9
66051: PPUSH
66052: LD_INT 1
66054: PPUSH
66055: CALL_OW 275
66059: PUSH
66060: LD_VAR 0 14
66064: PUSH
66065: LD_INT 1
66067: ARRAY
66068: GREATEREQUAL
66069: PUSH
66070: LD_VAR 0 9
66074: PPUSH
66075: LD_INT 2
66077: PPUSH
66078: CALL_OW 275
66082: PUSH
66083: LD_VAR 0 14
66087: PUSH
66088: LD_INT 2
66090: ARRAY
66091: GREATEREQUAL
66092: AND
66093: PUSH
66094: LD_VAR 0 9
66098: PPUSH
66099: LD_INT 3
66101: PPUSH
66102: CALL_OW 275
66106: PUSH
66107: LD_VAR 0 14
66111: PUSH
66112: LD_INT 3
66114: ARRAY
66115: GREATEREQUAL
66116: AND
66117: IFFALSE 66129
// result := weapon ;
66119: LD_ADDR_VAR 0 3
66123: PUSH
66124: LD_VAR 0 18
66128: ST_TO_ADDR
// end ; end ;
66129: LD_VAR 0 3
66133: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
66134: LD_INT 0
66136: PPUSH
66137: PPUSH
// result := true ;
66138: LD_ADDR_VAR 0 3
66142: PUSH
66143: LD_INT 1
66145: ST_TO_ADDR
// if array1 = array2 then
66146: LD_VAR 0 1
66150: PUSH
66151: LD_VAR 0 2
66155: EQUAL
66156: IFFALSE 66216
// begin for i = 1 to array1 do
66158: LD_ADDR_VAR 0 4
66162: PUSH
66163: DOUBLE
66164: LD_INT 1
66166: DEC
66167: ST_TO_ADDR
66168: LD_VAR 0 1
66172: PUSH
66173: FOR_TO
66174: IFFALSE 66212
// if array1 [ i ] <> array2 [ i ] then
66176: LD_VAR 0 1
66180: PUSH
66181: LD_VAR 0 4
66185: ARRAY
66186: PUSH
66187: LD_VAR 0 2
66191: PUSH
66192: LD_VAR 0 4
66196: ARRAY
66197: NONEQUAL
66198: IFFALSE 66210
// begin result := false ;
66200: LD_ADDR_VAR 0 3
66204: PUSH
66205: LD_INT 0
66207: ST_TO_ADDR
// break ;
66208: GO 66212
// end ;
66210: GO 66173
66212: POP
66213: POP
// end else
66214: GO 66224
// result := false ;
66216: LD_ADDR_VAR 0 3
66220: PUSH
66221: LD_INT 0
66223: ST_TO_ADDR
// end ;
66224: LD_VAR 0 3
66228: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
66229: LD_INT 0
66231: PPUSH
66232: PPUSH
// if not array1 or not array2 then
66233: LD_VAR 0 1
66237: NOT
66238: PUSH
66239: LD_VAR 0 2
66243: NOT
66244: OR
66245: IFFALSE 66249
// exit ;
66247: GO 66313
// result := true ;
66249: LD_ADDR_VAR 0 3
66253: PUSH
66254: LD_INT 1
66256: ST_TO_ADDR
// for i = 1 to array1 do
66257: LD_ADDR_VAR 0 4
66261: PUSH
66262: DOUBLE
66263: LD_INT 1
66265: DEC
66266: ST_TO_ADDR
66267: LD_VAR 0 1
66271: PUSH
66272: FOR_TO
66273: IFFALSE 66311
// if array1 [ i ] <> array2 [ i ] then
66275: LD_VAR 0 1
66279: PUSH
66280: LD_VAR 0 4
66284: ARRAY
66285: PUSH
66286: LD_VAR 0 2
66290: PUSH
66291: LD_VAR 0 4
66295: ARRAY
66296: NONEQUAL
66297: IFFALSE 66309
// begin result := false ;
66299: LD_ADDR_VAR 0 3
66303: PUSH
66304: LD_INT 0
66306: ST_TO_ADDR
// break ;
66307: GO 66311
// end ;
66309: GO 66272
66311: POP
66312: POP
// end ;
66313: LD_VAR 0 3
66317: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
66318: LD_INT 0
66320: PPUSH
66321: PPUSH
66322: PPUSH
// pom := GetBase ( fac ) ;
66323: LD_ADDR_VAR 0 5
66327: PUSH
66328: LD_VAR 0 1
66332: PPUSH
66333: CALL_OW 274
66337: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
66338: LD_ADDR_VAR 0 4
66342: PUSH
66343: LD_VAR 0 2
66347: PUSH
66348: LD_INT 1
66350: ARRAY
66351: PPUSH
66352: LD_VAR 0 2
66356: PUSH
66357: LD_INT 2
66359: ARRAY
66360: PPUSH
66361: LD_VAR 0 2
66365: PUSH
66366: LD_INT 3
66368: ARRAY
66369: PPUSH
66370: LD_VAR 0 2
66374: PUSH
66375: LD_INT 4
66377: ARRAY
66378: PPUSH
66379: CALL_OW 449
66383: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
66384: LD_ADDR_VAR 0 3
66388: PUSH
66389: LD_VAR 0 5
66393: PPUSH
66394: LD_INT 1
66396: PPUSH
66397: CALL_OW 275
66401: PUSH
66402: LD_VAR 0 4
66406: PUSH
66407: LD_INT 1
66409: ARRAY
66410: GREATEREQUAL
66411: PUSH
66412: LD_VAR 0 5
66416: PPUSH
66417: LD_INT 2
66419: PPUSH
66420: CALL_OW 275
66424: PUSH
66425: LD_VAR 0 4
66429: PUSH
66430: LD_INT 2
66432: ARRAY
66433: GREATEREQUAL
66434: AND
66435: PUSH
66436: LD_VAR 0 5
66440: PPUSH
66441: LD_INT 3
66443: PPUSH
66444: CALL_OW 275
66448: PUSH
66449: LD_VAR 0 4
66453: PUSH
66454: LD_INT 3
66456: ARRAY
66457: GREATEREQUAL
66458: AND
66459: ST_TO_ADDR
// end ;
66460: LD_VAR 0 3
66464: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
66465: LD_INT 0
66467: PPUSH
66468: PPUSH
66469: PPUSH
66470: PPUSH
// pom := GetBase ( building ) ;
66471: LD_ADDR_VAR 0 3
66475: PUSH
66476: LD_VAR 0 1
66480: PPUSH
66481: CALL_OW 274
66485: ST_TO_ADDR
// if not pom then
66486: LD_VAR 0 3
66490: NOT
66491: IFFALSE 66495
// exit ;
66493: GO 66665
// btype := GetBType ( building ) ;
66495: LD_ADDR_VAR 0 5
66499: PUSH
66500: LD_VAR 0 1
66504: PPUSH
66505: CALL_OW 266
66509: ST_TO_ADDR
// if btype = b_armoury then
66510: LD_VAR 0 5
66514: PUSH
66515: LD_INT 4
66517: EQUAL
66518: IFFALSE 66528
// btype := b_barracks ;
66520: LD_ADDR_VAR 0 5
66524: PUSH
66525: LD_INT 5
66527: ST_TO_ADDR
// if btype = b_depot then
66528: LD_VAR 0 5
66532: PUSH
66533: LD_INT 0
66535: EQUAL
66536: IFFALSE 66546
// btype := b_warehouse ;
66538: LD_ADDR_VAR 0 5
66542: PUSH
66543: LD_INT 1
66545: ST_TO_ADDR
// if btype = b_workshop then
66546: LD_VAR 0 5
66550: PUSH
66551: LD_INT 2
66553: EQUAL
66554: IFFALSE 66564
// btype := b_factory ;
66556: LD_ADDR_VAR 0 5
66560: PUSH
66561: LD_INT 3
66563: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
66564: LD_ADDR_VAR 0 4
66568: PUSH
66569: LD_VAR 0 5
66573: PPUSH
66574: LD_VAR 0 1
66578: PPUSH
66579: CALL_OW 248
66583: PPUSH
66584: CALL_OW 450
66588: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
66589: LD_ADDR_VAR 0 2
66593: PUSH
66594: LD_VAR 0 3
66598: PPUSH
66599: LD_INT 1
66601: PPUSH
66602: CALL_OW 275
66606: PUSH
66607: LD_VAR 0 4
66611: PUSH
66612: LD_INT 1
66614: ARRAY
66615: GREATEREQUAL
66616: PUSH
66617: LD_VAR 0 3
66621: PPUSH
66622: LD_INT 2
66624: PPUSH
66625: CALL_OW 275
66629: PUSH
66630: LD_VAR 0 4
66634: PUSH
66635: LD_INT 2
66637: ARRAY
66638: GREATEREQUAL
66639: AND
66640: PUSH
66641: LD_VAR 0 3
66645: PPUSH
66646: LD_INT 3
66648: PPUSH
66649: CALL_OW 275
66653: PUSH
66654: LD_VAR 0 4
66658: PUSH
66659: LD_INT 3
66661: ARRAY
66662: GREATEREQUAL
66663: AND
66664: ST_TO_ADDR
// end ;
66665: LD_VAR 0 2
66669: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
66670: LD_INT 0
66672: PPUSH
66673: PPUSH
66674: PPUSH
// pom := GetBase ( building ) ;
66675: LD_ADDR_VAR 0 4
66679: PUSH
66680: LD_VAR 0 1
66684: PPUSH
66685: CALL_OW 274
66689: ST_TO_ADDR
// if not pom then
66690: LD_VAR 0 4
66694: NOT
66695: IFFALSE 66699
// exit ;
66697: GO 66800
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
66699: LD_ADDR_VAR 0 5
66703: PUSH
66704: LD_VAR 0 2
66708: PPUSH
66709: LD_VAR 0 1
66713: PPUSH
66714: CALL_OW 248
66718: PPUSH
66719: CALL_OW 450
66723: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
66724: LD_ADDR_VAR 0 3
66728: PUSH
66729: LD_VAR 0 4
66733: PPUSH
66734: LD_INT 1
66736: PPUSH
66737: CALL_OW 275
66741: PUSH
66742: LD_VAR 0 5
66746: PUSH
66747: LD_INT 1
66749: ARRAY
66750: GREATEREQUAL
66751: PUSH
66752: LD_VAR 0 4
66756: PPUSH
66757: LD_INT 2
66759: PPUSH
66760: CALL_OW 275
66764: PUSH
66765: LD_VAR 0 5
66769: PUSH
66770: LD_INT 2
66772: ARRAY
66773: GREATEREQUAL
66774: AND
66775: PUSH
66776: LD_VAR 0 4
66780: PPUSH
66781: LD_INT 3
66783: PPUSH
66784: CALL_OW 275
66788: PUSH
66789: LD_VAR 0 5
66793: PUSH
66794: LD_INT 3
66796: ARRAY
66797: GREATEREQUAL
66798: AND
66799: ST_TO_ADDR
// end ;
66800: LD_VAR 0 3
66804: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
66805: LD_INT 0
66807: PPUSH
66808: PPUSH
66809: PPUSH
66810: PPUSH
66811: PPUSH
66812: PPUSH
66813: PPUSH
66814: PPUSH
66815: PPUSH
66816: PPUSH
66817: PPUSH
// result := false ;
66818: LD_ADDR_VAR 0 8
66822: PUSH
66823: LD_INT 0
66825: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
66826: LD_VAR 0 5
66830: NOT
66831: PUSH
66832: LD_VAR 0 1
66836: NOT
66837: OR
66838: PUSH
66839: LD_VAR 0 2
66843: NOT
66844: OR
66845: PUSH
66846: LD_VAR 0 3
66850: NOT
66851: OR
66852: IFFALSE 66856
// exit ;
66854: GO 67670
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
66856: LD_ADDR_VAR 0 14
66860: PUSH
66861: LD_VAR 0 1
66865: PPUSH
66866: LD_VAR 0 2
66870: PPUSH
66871: LD_VAR 0 3
66875: PPUSH
66876: LD_VAR 0 4
66880: PPUSH
66881: LD_VAR 0 5
66885: PUSH
66886: LD_INT 1
66888: ARRAY
66889: PPUSH
66890: CALL_OW 248
66894: PPUSH
66895: LD_INT 0
66897: PPUSH
66898: CALL 68923 0 6
66902: ST_TO_ADDR
// if not hexes then
66903: LD_VAR 0 14
66907: NOT
66908: IFFALSE 66912
// exit ;
66910: GO 67670
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
66912: LD_ADDR_VAR 0 17
66916: PUSH
66917: LD_VAR 0 5
66921: PPUSH
66922: LD_INT 22
66924: PUSH
66925: LD_VAR 0 13
66929: PPUSH
66930: CALL_OW 255
66934: PUSH
66935: EMPTY
66936: LIST
66937: LIST
66938: PUSH
66939: LD_INT 2
66941: PUSH
66942: LD_INT 30
66944: PUSH
66945: LD_INT 0
66947: PUSH
66948: EMPTY
66949: LIST
66950: LIST
66951: PUSH
66952: LD_INT 30
66954: PUSH
66955: LD_INT 1
66957: PUSH
66958: EMPTY
66959: LIST
66960: LIST
66961: PUSH
66962: EMPTY
66963: LIST
66964: LIST
66965: LIST
66966: PUSH
66967: EMPTY
66968: LIST
66969: LIST
66970: PPUSH
66971: CALL_OW 72
66975: ST_TO_ADDR
// for i = 1 to hexes do
66976: LD_ADDR_VAR 0 9
66980: PUSH
66981: DOUBLE
66982: LD_INT 1
66984: DEC
66985: ST_TO_ADDR
66986: LD_VAR 0 14
66990: PUSH
66991: FOR_TO
66992: IFFALSE 67668
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
66994: LD_ADDR_VAR 0 13
66998: PUSH
66999: LD_VAR 0 14
67003: PUSH
67004: LD_VAR 0 9
67008: ARRAY
67009: PUSH
67010: LD_INT 1
67012: ARRAY
67013: PPUSH
67014: LD_VAR 0 14
67018: PUSH
67019: LD_VAR 0 9
67023: ARRAY
67024: PUSH
67025: LD_INT 2
67027: ARRAY
67028: PPUSH
67029: CALL_OW 428
67033: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
67034: LD_VAR 0 14
67038: PUSH
67039: LD_VAR 0 9
67043: ARRAY
67044: PUSH
67045: LD_INT 1
67047: ARRAY
67048: PPUSH
67049: LD_VAR 0 14
67053: PUSH
67054: LD_VAR 0 9
67058: ARRAY
67059: PUSH
67060: LD_INT 2
67062: ARRAY
67063: PPUSH
67064: CALL_OW 351
67068: PUSH
67069: LD_VAR 0 14
67073: PUSH
67074: LD_VAR 0 9
67078: ARRAY
67079: PUSH
67080: LD_INT 1
67082: ARRAY
67083: PPUSH
67084: LD_VAR 0 14
67088: PUSH
67089: LD_VAR 0 9
67093: ARRAY
67094: PUSH
67095: LD_INT 2
67097: ARRAY
67098: PPUSH
67099: CALL_OW 488
67103: NOT
67104: OR
67105: PUSH
67106: LD_VAR 0 13
67110: PPUSH
67111: CALL_OW 247
67115: PUSH
67116: LD_INT 3
67118: EQUAL
67119: OR
67120: IFFALSE 67126
// exit ;
67122: POP
67123: POP
67124: GO 67670
// if not tmp then
67126: LD_VAR 0 13
67130: NOT
67131: IFFALSE 67135
// continue ;
67133: GO 66991
// result := true ;
67135: LD_ADDR_VAR 0 8
67139: PUSH
67140: LD_INT 1
67142: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
67143: LD_VAR 0 6
67147: PUSH
67148: LD_VAR 0 13
67152: PPUSH
67153: CALL_OW 247
67157: PUSH
67158: LD_INT 2
67160: EQUAL
67161: AND
67162: PUSH
67163: LD_VAR 0 13
67167: PPUSH
67168: CALL_OW 263
67172: PUSH
67173: LD_INT 1
67175: EQUAL
67176: AND
67177: IFFALSE 67341
// begin if IsDrivenBy ( tmp ) then
67179: LD_VAR 0 13
67183: PPUSH
67184: CALL_OW 311
67188: IFFALSE 67192
// continue ;
67190: GO 66991
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
67192: LD_VAR 0 6
67196: PPUSH
67197: LD_INT 3
67199: PUSH
67200: LD_INT 60
67202: PUSH
67203: EMPTY
67204: LIST
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 3
67212: PUSH
67213: LD_INT 55
67215: PUSH
67216: EMPTY
67217: LIST
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PPUSH
67227: CALL_OW 72
67231: IFFALSE 67339
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
67233: LD_ADDR_VAR 0 18
67237: PUSH
67238: LD_VAR 0 6
67242: PPUSH
67243: LD_INT 3
67245: PUSH
67246: LD_INT 60
67248: PUSH
67249: EMPTY
67250: LIST
67251: PUSH
67252: EMPTY
67253: LIST
67254: LIST
67255: PUSH
67256: LD_INT 3
67258: PUSH
67259: LD_INT 55
67261: PUSH
67262: EMPTY
67263: LIST
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PPUSH
67273: CALL_OW 72
67277: PUSH
67278: LD_INT 1
67280: ARRAY
67281: ST_TO_ADDR
// if IsInUnit ( driver ) then
67282: LD_VAR 0 18
67286: PPUSH
67287: CALL_OW 310
67291: IFFALSE 67302
// ComExit ( driver ) ;
67293: LD_VAR 0 18
67297: PPUSH
67298: CALL 92704 0 1
// AddComEnterUnit ( driver , tmp ) ;
67302: LD_VAR 0 18
67306: PPUSH
67307: LD_VAR 0 13
67311: PPUSH
67312: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
67316: LD_VAR 0 18
67320: PPUSH
67321: LD_VAR 0 7
67325: PPUSH
67326: CALL_OW 173
// AddComExitVehicle ( driver ) ;
67330: LD_VAR 0 18
67334: PPUSH
67335: CALL_OW 181
// end ; continue ;
67339: GO 66991
// end ; if not cleaners or not tmp in cleaners then
67341: LD_VAR 0 6
67345: NOT
67346: PUSH
67347: LD_VAR 0 13
67351: PUSH
67352: LD_VAR 0 6
67356: IN
67357: NOT
67358: OR
67359: IFFALSE 67666
// begin if dep then
67361: LD_VAR 0 17
67365: IFFALSE 67501
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
67367: LD_ADDR_VAR 0 16
67371: PUSH
67372: LD_VAR 0 17
67376: PUSH
67377: LD_INT 1
67379: ARRAY
67380: PPUSH
67381: CALL_OW 250
67385: PPUSH
67386: LD_VAR 0 17
67390: PUSH
67391: LD_INT 1
67393: ARRAY
67394: PPUSH
67395: CALL_OW 254
67399: PPUSH
67400: LD_INT 5
67402: PPUSH
67403: CALL_OW 272
67407: PUSH
67408: LD_VAR 0 17
67412: PUSH
67413: LD_INT 1
67415: ARRAY
67416: PPUSH
67417: CALL_OW 251
67421: PPUSH
67422: LD_VAR 0 17
67426: PUSH
67427: LD_INT 1
67429: ARRAY
67430: PPUSH
67431: CALL_OW 254
67435: PPUSH
67436: LD_INT 5
67438: PPUSH
67439: CALL_OW 273
67443: PUSH
67444: EMPTY
67445: LIST
67446: LIST
67447: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
67448: LD_VAR 0 16
67452: PUSH
67453: LD_INT 1
67455: ARRAY
67456: PPUSH
67457: LD_VAR 0 16
67461: PUSH
67462: LD_INT 2
67464: ARRAY
67465: PPUSH
67466: CALL_OW 488
67470: IFFALSE 67501
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
67472: LD_VAR 0 13
67476: PPUSH
67477: LD_VAR 0 16
67481: PUSH
67482: LD_INT 1
67484: ARRAY
67485: PPUSH
67486: LD_VAR 0 16
67490: PUSH
67491: LD_INT 2
67493: ARRAY
67494: PPUSH
67495: CALL_OW 111
// continue ;
67499: GO 66991
// end ; end ; r := GetDir ( tmp ) ;
67501: LD_ADDR_VAR 0 15
67505: PUSH
67506: LD_VAR 0 13
67510: PPUSH
67511: CALL_OW 254
67515: ST_TO_ADDR
// if r = 5 then
67516: LD_VAR 0 15
67520: PUSH
67521: LD_INT 5
67523: EQUAL
67524: IFFALSE 67534
// r := 0 ;
67526: LD_ADDR_VAR 0 15
67530: PUSH
67531: LD_INT 0
67533: ST_TO_ADDR
// for j = r to 5 do
67534: LD_ADDR_VAR 0 10
67538: PUSH
67539: DOUBLE
67540: LD_VAR 0 15
67544: DEC
67545: ST_TO_ADDR
67546: LD_INT 5
67548: PUSH
67549: FOR_TO
67550: IFFALSE 67664
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
67552: LD_ADDR_VAR 0 11
67556: PUSH
67557: LD_VAR 0 13
67561: PPUSH
67562: CALL_OW 250
67566: PPUSH
67567: LD_VAR 0 10
67571: PPUSH
67572: LD_INT 2
67574: PPUSH
67575: CALL_OW 272
67579: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
67580: LD_ADDR_VAR 0 12
67584: PUSH
67585: LD_VAR 0 13
67589: PPUSH
67590: CALL_OW 251
67594: PPUSH
67595: LD_VAR 0 10
67599: PPUSH
67600: LD_INT 2
67602: PPUSH
67603: CALL_OW 273
67607: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
67608: LD_VAR 0 11
67612: PPUSH
67613: LD_VAR 0 12
67617: PPUSH
67618: CALL_OW 488
67622: PUSH
67623: LD_VAR 0 11
67627: PPUSH
67628: LD_VAR 0 12
67632: PPUSH
67633: CALL_OW 428
67637: NOT
67638: AND
67639: IFFALSE 67662
// begin ComMoveXY ( tmp , _x , _y ) ;
67641: LD_VAR 0 13
67645: PPUSH
67646: LD_VAR 0 11
67650: PPUSH
67651: LD_VAR 0 12
67655: PPUSH
67656: CALL_OW 111
// break ;
67660: GO 67664
// end ; end ;
67662: GO 67549
67664: POP
67665: POP
// end ; end ;
67666: GO 66991
67668: POP
67669: POP
// end ;
67670: LD_VAR 0 8
67674: RET
// export function BuildingTechInvented ( side , btype ) ; begin
67675: LD_INT 0
67677: PPUSH
// result := true ;
67678: LD_ADDR_VAR 0 3
67682: PUSH
67683: LD_INT 1
67685: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
67686: LD_VAR 0 2
67690: PUSH
67691: LD_INT 24
67693: DOUBLE
67694: EQUAL
67695: IFTRUE 67705
67697: LD_INT 33
67699: DOUBLE
67700: EQUAL
67701: IFTRUE 67705
67703: GO 67730
67705: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
67706: LD_ADDR_VAR 0 3
67710: PUSH
67711: LD_INT 32
67713: PPUSH
67714: LD_VAR 0 1
67718: PPUSH
67719: CALL_OW 321
67723: PUSH
67724: LD_INT 2
67726: EQUAL
67727: ST_TO_ADDR
67728: GO 68046
67730: LD_INT 20
67732: DOUBLE
67733: EQUAL
67734: IFTRUE 67738
67736: GO 67763
67738: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
67739: LD_ADDR_VAR 0 3
67743: PUSH
67744: LD_INT 6
67746: PPUSH
67747: LD_VAR 0 1
67751: PPUSH
67752: CALL_OW 321
67756: PUSH
67757: LD_INT 2
67759: EQUAL
67760: ST_TO_ADDR
67761: GO 68046
67763: LD_INT 22
67765: DOUBLE
67766: EQUAL
67767: IFTRUE 67777
67769: LD_INT 36
67771: DOUBLE
67772: EQUAL
67773: IFTRUE 67777
67775: GO 67802
67777: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
67778: LD_ADDR_VAR 0 3
67782: PUSH
67783: LD_INT 15
67785: PPUSH
67786: LD_VAR 0 1
67790: PPUSH
67791: CALL_OW 321
67795: PUSH
67796: LD_INT 2
67798: EQUAL
67799: ST_TO_ADDR
67800: GO 68046
67802: LD_INT 30
67804: DOUBLE
67805: EQUAL
67806: IFTRUE 67810
67808: GO 67835
67810: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
67811: LD_ADDR_VAR 0 3
67815: PUSH
67816: LD_INT 20
67818: PPUSH
67819: LD_VAR 0 1
67823: PPUSH
67824: CALL_OW 321
67828: PUSH
67829: LD_INT 2
67831: EQUAL
67832: ST_TO_ADDR
67833: GO 68046
67835: LD_INT 28
67837: DOUBLE
67838: EQUAL
67839: IFTRUE 67849
67841: LD_INT 21
67843: DOUBLE
67844: EQUAL
67845: IFTRUE 67849
67847: GO 67874
67849: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
67850: LD_ADDR_VAR 0 3
67854: PUSH
67855: LD_INT 21
67857: PPUSH
67858: LD_VAR 0 1
67862: PPUSH
67863: CALL_OW 321
67867: PUSH
67868: LD_INT 2
67870: EQUAL
67871: ST_TO_ADDR
67872: GO 68046
67874: LD_INT 16
67876: DOUBLE
67877: EQUAL
67878: IFTRUE 67882
67880: GO 67907
67882: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
67883: LD_ADDR_VAR 0 3
67887: PUSH
67888: LD_INT 84
67890: PPUSH
67891: LD_VAR 0 1
67895: PPUSH
67896: CALL_OW 321
67900: PUSH
67901: LD_INT 2
67903: EQUAL
67904: ST_TO_ADDR
67905: GO 68046
67907: LD_INT 19
67909: DOUBLE
67910: EQUAL
67911: IFTRUE 67921
67913: LD_INT 23
67915: DOUBLE
67916: EQUAL
67917: IFTRUE 67921
67919: GO 67946
67921: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
67922: LD_ADDR_VAR 0 3
67926: PUSH
67927: LD_INT 83
67929: PPUSH
67930: LD_VAR 0 1
67934: PPUSH
67935: CALL_OW 321
67939: PUSH
67940: LD_INT 2
67942: EQUAL
67943: ST_TO_ADDR
67944: GO 68046
67946: LD_INT 17
67948: DOUBLE
67949: EQUAL
67950: IFTRUE 67954
67952: GO 67979
67954: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
67955: LD_ADDR_VAR 0 3
67959: PUSH
67960: LD_INT 39
67962: PPUSH
67963: LD_VAR 0 1
67967: PPUSH
67968: CALL_OW 321
67972: PUSH
67973: LD_INT 2
67975: EQUAL
67976: ST_TO_ADDR
67977: GO 68046
67979: LD_INT 18
67981: DOUBLE
67982: EQUAL
67983: IFTRUE 67987
67985: GO 68012
67987: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
67988: LD_ADDR_VAR 0 3
67992: PUSH
67993: LD_INT 40
67995: PPUSH
67996: LD_VAR 0 1
68000: PPUSH
68001: CALL_OW 321
68005: PUSH
68006: LD_INT 2
68008: EQUAL
68009: ST_TO_ADDR
68010: GO 68046
68012: LD_INT 27
68014: DOUBLE
68015: EQUAL
68016: IFTRUE 68020
68018: GO 68045
68020: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
68021: LD_ADDR_VAR 0 3
68025: PUSH
68026: LD_INT 35
68028: PPUSH
68029: LD_VAR 0 1
68033: PPUSH
68034: CALL_OW 321
68038: PUSH
68039: LD_INT 2
68041: EQUAL
68042: ST_TO_ADDR
68043: GO 68046
68045: POP
// end ;
68046: LD_VAR 0 3
68050: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
68051: LD_INT 0
68053: PPUSH
68054: PPUSH
68055: PPUSH
68056: PPUSH
68057: PPUSH
68058: PPUSH
68059: PPUSH
68060: PPUSH
68061: PPUSH
68062: PPUSH
68063: PPUSH
// result := false ;
68064: LD_ADDR_VAR 0 6
68068: PUSH
68069: LD_INT 0
68071: ST_TO_ADDR
// if btype = b_depot then
68072: LD_VAR 0 2
68076: PUSH
68077: LD_INT 0
68079: EQUAL
68080: IFFALSE 68092
// begin result := true ;
68082: LD_ADDR_VAR 0 6
68086: PUSH
68087: LD_INT 1
68089: ST_TO_ADDR
// exit ;
68090: GO 68918
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
68092: LD_VAR 0 1
68096: NOT
68097: PUSH
68098: LD_VAR 0 1
68102: PPUSH
68103: CALL_OW 266
68107: PUSH
68108: LD_INT 0
68110: PUSH
68111: LD_INT 1
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: IN
68118: NOT
68119: OR
68120: PUSH
68121: LD_VAR 0 2
68125: NOT
68126: OR
68127: PUSH
68128: LD_VAR 0 5
68132: PUSH
68133: LD_INT 0
68135: PUSH
68136: LD_INT 1
68138: PUSH
68139: LD_INT 2
68141: PUSH
68142: LD_INT 3
68144: PUSH
68145: LD_INT 4
68147: PUSH
68148: LD_INT 5
68150: PUSH
68151: EMPTY
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: IN
68159: NOT
68160: OR
68161: PUSH
68162: LD_VAR 0 3
68166: PPUSH
68167: LD_VAR 0 4
68171: PPUSH
68172: CALL_OW 488
68176: NOT
68177: OR
68178: IFFALSE 68182
// exit ;
68180: GO 68918
// side := GetSide ( depot ) ;
68182: LD_ADDR_VAR 0 9
68186: PUSH
68187: LD_VAR 0 1
68191: PPUSH
68192: CALL_OW 255
68196: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
68197: LD_VAR 0 9
68201: PPUSH
68202: LD_VAR 0 2
68206: PPUSH
68207: CALL 67675 0 2
68211: NOT
68212: IFFALSE 68216
// exit ;
68214: GO 68918
// pom := GetBase ( depot ) ;
68216: LD_ADDR_VAR 0 10
68220: PUSH
68221: LD_VAR 0 1
68225: PPUSH
68226: CALL_OW 274
68230: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
68231: LD_ADDR_VAR 0 11
68235: PUSH
68236: LD_VAR 0 2
68240: PPUSH
68241: LD_VAR 0 1
68245: PPUSH
68246: CALL_OW 248
68250: PPUSH
68251: CALL_OW 450
68255: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
68256: LD_VAR 0 10
68260: PPUSH
68261: LD_INT 1
68263: PPUSH
68264: CALL_OW 275
68268: PUSH
68269: LD_VAR 0 11
68273: PUSH
68274: LD_INT 1
68276: ARRAY
68277: GREATEREQUAL
68278: PUSH
68279: LD_VAR 0 10
68283: PPUSH
68284: LD_INT 2
68286: PPUSH
68287: CALL_OW 275
68291: PUSH
68292: LD_VAR 0 11
68296: PUSH
68297: LD_INT 2
68299: ARRAY
68300: GREATEREQUAL
68301: AND
68302: PUSH
68303: LD_VAR 0 10
68307: PPUSH
68308: LD_INT 3
68310: PPUSH
68311: CALL_OW 275
68315: PUSH
68316: LD_VAR 0 11
68320: PUSH
68321: LD_INT 3
68323: ARRAY
68324: GREATEREQUAL
68325: AND
68326: NOT
68327: IFFALSE 68331
// exit ;
68329: GO 68918
// if GetBType ( depot ) = b_depot then
68331: LD_VAR 0 1
68335: PPUSH
68336: CALL_OW 266
68340: PUSH
68341: LD_INT 0
68343: EQUAL
68344: IFFALSE 68356
// dist := 28 else
68346: LD_ADDR_VAR 0 14
68350: PUSH
68351: LD_INT 28
68353: ST_TO_ADDR
68354: GO 68364
// dist := 36 ;
68356: LD_ADDR_VAR 0 14
68360: PUSH
68361: LD_INT 36
68363: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
68364: LD_VAR 0 1
68368: PPUSH
68369: LD_VAR 0 3
68373: PPUSH
68374: LD_VAR 0 4
68378: PPUSH
68379: CALL_OW 297
68383: PUSH
68384: LD_VAR 0 14
68388: GREATER
68389: IFFALSE 68393
// exit ;
68391: GO 68918
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
68393: LD_ADDR_VAR 0 12
68397: PUSH
68398: LD_VAR 0 2
68402: PPUSH
68403: LD_VAR 0 3
68407: PPUSH
68408: LD_VAR 0 4
68412: PPUSH
68413: LD_VAR 0 5
68417: PPUSH
68418: LD_VAR 0 1
68422: PPUSH
68423: CALL_OW 248
68427: PPUSH
68428: LD_INT 0
68430: PPUSH
68431: CALL 68923 0 6
68435: ST_TO_ADDR
// if not hexes then
68436: LD_VAR 0 12
68440: NOT
68441: IFFALSE 68445
// exit ;
68443: GO 68918
// hex := GetHexInfo ( x , y ) ;
68445: LD_ADDR_VAR 0 15
68449: PUSH
68450: LD_VAR 0 3
68454: PPUSH
68455: LD_VAR 0 4
68459: PPUSH
68460: CALL_OW 546
68464: ST_TO_ADDR
// if hex [ 1 ] then
68465: LD_VAR 0 15
68469: PUSH
68470: LD_INT 1
68472: ARRAY
68473: IFFALSE 68477
// exit ;
68475: GO 68918
// height := hex [ 2 ] ;
68477: LD_ADDR_VAR 0 13
68481: PUSH
68482: LD_VAR 0 15
68486: PUSH
68487: LD_INT 2
68489: ARRAY
68490: ST_TO_ADDR
// for i = 1 to hexes do
68491: LD_ADDR_VAR 0 7
68495: PUSH
68496: DOUBLE
68497: LD_INT 1
68499: DEC
68500: ST_TO_ADDR
68501: LD_VAR 0 12
68505: PUSH
68506: FOR_TO
68507: IFFALSE 68837
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
68509: LD_VAR 0 12
68513: PUSH
68514: LD_VAR 0 7
68518: ARRAY
68519: PUSH
68520: LD_INT 1
68522: ARRAY
68523: PPUSH
68524: LD_VAR 0 12
68528: PUSH
68529: LD_VAR 0 7
68533: ARRAY
68534: PUSH
68535: LD_INT 2
68537: ARRAY
68538: PPUSH
68539: CALL_OW 488
68543: NOT
68544: PUSH
68545: LD_VAR 0 12
68549: PUSH
68550: LD_VAR 0 7
68554: ARRAY
68555: PUSH
68556: LD_INT 1
68558: ARRAY
68559: PPUSH
68560: LD_VAR 0 12
68564: PUSH
68565: LD_VAR 0 7
68569: ARRAY
68570: PUSH
68571: LD_INT 2
68573: ARRAY
68574: PPUSH
68575: CALL_OW 428
68579: PUSH
68580: LD_INT 0
68582: GREATER
68583: OR
68584: PUSH
68585: LD_VAR 0 12
68589: PUSH
68590: LD_VAR 0 7
68594: ARRAY
68595: PUSH
68596: LD_INT 1
68598: ARRAY
68599: PPUSH
68600: LD_VAR 0 12
68604: PUSH
68605: LD_VAR 0 7
68609: ARRAY
68610: PUSH
68611: LD_INT 2
68613: ARRAY
68614: PPUSH
68615: CALL_OW 351
68619: OR
68620: IFFALSE 68626
// exit ;
68622: POP
68623: POP
68624: GO 68918
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
68626: LD_ADDR_VAR 0 8
68630: PUSH
68631: LD_VAR 0 12
68635: PUSH
68636: LD_VAR 0 7
68640: ARRAY
68641: PUSH
68642: LD_INT 1
68644: ARRAY
68645: PPUSH
68646: LD_VAR 0 12
68650: PUSH
68651: LD_VAR 0 7
68655: ARRAY
68656: PUSH
68657: LD_INT 2
68659: ARRAY
68660: PPUSH
68661: CALL_OW 546
68665: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
68666: LD_VAR 0 8
68670: PUSH
68671: LD_INT 1
68673: ARRAY
68674: PUSH
68675: LD_VAR 0 8
68679: PUSH
68680: LD_INT 2
68682: ARRAY
68683: PUSH
68684: LD_VAR 0 13
68688: PUSH
68689: LD_INT 2
68691: PLUS
68692: GREATER
68693: OR
68694: PUSH
68695: LD_VAR 0 8
68699: PUSH
68700: LD_INT 2
68702: ARRAY
68703: PUSH
68704: LD_VAR 0 13
68708: PUSH
68709: LD_INT 2
68711: MINUS
68712: LESS
68713: OR
68714: PUSH
68715: LD_VAR 0 8
68719: PUSH
68720: LD_INT 3
68722: ARRAY
68723: PUSH
68724: LD_INT 0
68726: PUSH
68727: LD_INT 8
68729: PUSH
68730: LD_INT 9
68732: PUSH
68733: LD_INT 10
68735: PUSH
68736: LD_INT 11
68738: PUSH
68739: LD_INT 12
68741: PUSH
68742: LD_INT 13
68744: PUSH
68745: LD_INT 16
68747: PUSH
68748: LD_INT 17
68750: PUSH
68751: LD_INT 18
68753: PUSH
68754: LD_INT 19
68756: PUSH
68757: LD_INT 20
68759: PUSH
68760: LD_INT 21
68762: PUSH
68763: EMPTY
68764: LIST
68765: LIST
68766: LIST
68767: LIST
68768: LIST
68769: LIST
68770: LIST
68771: LIST
68772: LIST
68773: LIST
68774: LIST
68775: LIST
68776: LIST
68777: IN
68778: NOT
68779: OR
68780: PUSH
68781: LD_VAR 0 8
68785: PUSH
68786: LD_INT 5
68788: ARRAY
68789: NOT
68790: OR
68791: PUSH
68792: LD_VAR 0 8
68796: PUSH
68797: LD_INT 6
68799: ARRAY
68800: PUSH
68801: LD_INT 1
68803: PUSH
68804: LD_INT 2
68806: PUSH
68807: LD_INT 7
68809: PUSH
68810: LD_INT 9
68812: PUSH
68813: LD_INT 10
68815: PUSH
68816: LD_INT 11
68818: PUSH
68819: EMPTY
68820: LIST
68821: LIST
68822: LIST
68823: LIST
68824: LIST
68825: LIST
68826: IN
68827: NOT
68828: OR
68829: IFFALSE 68835
// exit ;
68831: POP
68832: POP
68833: GO 68918
// end ;
68835: GO 68506
68837: POP
68838: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
68839: LD_VAR 0 9
68843: PPUSH
68844: LD_VAR 0 3
68848: PPUSH
68849: LD_VAR 0 4
68853: PPUSH
68854: LD_INT 20
68856: PPUSH
68857: CALL 60841 0 4
68861: PUSH
68862: LD_INT 4
68864: ARRAY
68865: IFFALSE 68869
// exit ;
68867: GO 68918
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
68869: LD_VAR 0 2
68873: PUSH
68874: LD_INT 29
68876: PUSH
68877: LD_INT 30
68879: PUSH
68880: EMPTY
68881: LIST
68882: LIST
68883: IN
68884: PUSH
68885: LD_VAR 0 3
68889: PPUSH
68890: LD_VAR 0 4
68894: PPUSH
68895: LD_VAR 0 9
68899: PPUSH
68900: CALL_OW 440
68904: NOT
68905: AND
68906: IFFALSE 68910
// exit ;
68908: GO 68918
// result := true ;
68910: LD_ADDR_VAR 0 6
68914: PUSH
68915: LD_INT 1
68917: ST_TO_ADDR
// end ;
68918: LD_VAR 0 6
68922: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
68923: LD_INT 0
68925: PPUSH
68926: PPUSH
68927: PPUSH
68928: PPUSH
68929: PPUSH
68930: PPUSH
68931: PPUSH
68932: PPUSH
68933: PPUSH
68934: PPUSH
68935: PPUSH
68936: PPUSH
68937: PPUSH
68938: PPUSH
68939: PPUSH
68940: PPUSH
68941: PPUSH
68942: PPUSH
68943: PPUSH
68944: PPUSH
68945: PPUSH
68946: PPUSH
68947: PPUSH
68948: PPUSH
68949: PPUSH
68950: PPUSH
68951: PPUSH
68952: PPUSH
68953: PPUSH
68954: PPUSH
68955: PPUSH
68956: PPUSH
68957: PPUSH
68958: PPUSH
68959: PPUSH
68960: PPUSH
68961: PPUSH
68962: PPUSH
68963: PPUSH
68964: PPUSH
68965: PPUSH
68966: PPUSH
68967: PPUSH
68968: PPUSH
68969: PPUSH
68970: PPUSH
68971: PPUSH
68972: PPUSH
68973: PPUSH
68974: PPUSH
68975: PPUSH
68976: PPUSH
68977: PPUSH
68978: PPUSH
68979: PPUSH
68980: PPUSH
68981: PPUSH
68982: PPUSH
// result = [ ] ;
68983: LD_ADDR_VAR 0 7
68987: PUSH
68988: EMPTY
68989: ST_TO_ADDR
// temp_list = [ ] ;
68990: LD_ADDR_VAR 0 9
68994: PUSH
68995: EMPTY
68996: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
68997: LD_VAR 0 4
69001: PUSH
69002: LD_INT 0
69004: PUSH
69005: LD_INT 1
69007: PUSH
69008: LD_INT 2
69010: PUSH
69011: LD_INT 3
69013: PUSH
69014: LD_INT 4
69016: PUSH
69017: LD_INT 5
69019: PUSH
69020: EMPTY
69021: LIST
69022: LIST
69023: LIST
69024: LIST
69025: LIST
69026: LIST
69027: IN
69028: NOT
69029: PUSH
69030: LD_VAR 0 1
69034: PUSH
69035: LD_INT 0
69037: PUSH
69038: LD_INT 1
69040: PUSH
69041: EMPTY
69042: LIST
69043: LIST
69044: IN
69045: PUSH
69046: LD_VAR 0 5
69050: PUSH
69051: LD_INT 1
69053: PUSH
69054: LD_INT 2
69056: PUSH
69057: LD_INT 3
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: LIST
69064: IN
69065: NOT
69066: AND
69067: OR
69068: IFFALSE 69072
// exit ;
69070: GO 87463
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
69072: LD_VAR 0 1
69076: PUSH
69077: LD_INT 6
69079: PUSH
69080: LD_INT 7
69082: PUSH
69083: LD_INT 8
69085: PUSH
69086: LD_INT 13
69088: PUSH
69089: LD_INT 12
69091: PUSH
69092: LD_INT 15
69094: PUSH
69095: LD_INT 11
69097: PUSH
69098: LD_INT 14
69100: PUSH
69101: LD_INT 10
69103: PUSH
69104: EMPTY
69105: LIST
69106: LIST
69107: LIST
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: IN
69115: IFFALSE 69125
// btype = b_lab ;
69117: LD_ADDR_VAR 0 1
69121: PUSH
69122: LD_INT 6
69124: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
69125: LD_VAR 0 6
69129: PUSH
69130: LD_INT 0
69132: PUSH
69133: LD_INT 1
69135: PUSH
69136: LD_INT 2
69138: PUSH
69139: EMPTY
69140: LIST
69141: LIST
69142: LIST
69143: IN
69144: NOT
69145: PUSH
69146: LD_VAR 0 1
69150: PUSH
69151: LD_INT 0
69153: PUSH
69154: LD_INT 1
69156: PUSH
69157: LD_INT 2
69159: PUSH
69160: LD_INT 3
69162: PUSH
69163: LD_INT 6
69165: PUSH
69166: LD_INT 36
69168: PUSH
69169: LD_INT 4
69171: PUSH
69172: LD_INT 5
69174: PUSH
69175: LD_INT 31
69177: PUSH
69178: LD_INT 32
69180: PUSH
69181: LD_INT 33
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: LIST
69188: LIST
69189: LIST
69190: LIST
69191: LIST
69192: LIST
69193: LIST
69194: LIST
69195: LIST
69196: IN
69197: NOT
69198: PUSH
69199: LD_VAR 0 6
69203: PUSH
69204: LD_INT 1
69206: EQUAL
69207: AND
69208: OR
69209: PUSH
69210: LD_VAR 0 1
69214: PUSH
69215: LD_INT 2
69217: PUSH
69218: LD_INT 3
69220: PUSH
69221: EMPTY
69222: LIST
69223: LIST
69224: IN
69225: NOT
69226: PUSH
69227: LD_VAR 0 6
69231: PUSH
69232: LD_INT 2
69234: EQUAL
69235: AND
69236: OR
69237: IFFALSE 69247
// mode = 0 ;
69239: LD_ADDR_VAR 0 6
69243: PUSH
69244: LD_INT 0
69246: ST_TO_ADDR
// case mode of 0 :
69247: LD_VAR 0 6
69251: PUSH
69252: LD_INT 0
69254: DOUBLE
69255: EQUAL
69256: IFTRUE 69260
69258: GO 80713
69260: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
69261: LD_ADDR_VAR 0 11
69265: PUSH
69266: LD_INT 0
69268: PUSH
69269: LD_INT 0
69271: PUSH
69272: EMPTY
69273: LIST
69274: LIST
69275: PUSH
69276: LD_INT 0
69278: PUSH
69279: LD_INT 1
69281: NEG
69282: PUSH
69283: EMPTY
69284: LIST
69285: LIST
69286: PUSH
69287: LD_INT 1
69289: PUSH
69290: LD_INT 0
69292: PUSH
69293: EMPTY
69294: LIST
69295: LIST
69296: PUSH
69297: LD_INT 1
69299: PUSH
69300: LD_INT 1
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 0
69309: PUSH
69310: LD_INT 1
69312: PUSH
69313: EMPTY
69314: LIST
69315: LIST
69316: PUSH
69317: LD_INT 1
69319: NEG
69320: PUSH
69321: LD_INT 0
69323: PUSH
69324: EMPTY
69325: LIST
69326: LIST
69327: PUSH
69328: LD_INT 1
69330: NEG
69331: PUSH
69332: LD_INT 1
69334: NEG
69335: PUSH
69336: EMPTY
69337: LIST
69338: LIST
69339: PUSH
69340: LD_INT 1
69342: NEG
69343: PUSH
69344: LD_INT 2
69346: NEG
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: PUSH
69352: LD_INT 0
69354: PUSH
69355: LD_INT 2
69357: NEG
69358: PUSH
69359: EMPTY
69360: LIST
69361: LIST
69362: PUSH
69363: LD_INT 1
69365: PUSH
69366: LD_INT 1
69368: NEG
69369: PUSH
69370: EMPTY
69371: LIST
69372: LIST
69373: PUSH
69374: LD_INT 1
69376: PUSH
69377: LD_INT 2
69379: PUSH
69380: EMPTY
69381: LIST
69382: LIST
69383: PUSH
69384: LD_INT 0
69386: PUSH
69387: LD_INT 2
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 1
69396: NEG
69397: PUSH
69398: LD_INT 1
69400: PUSH
69401: EMPTY
69402: LIST
69403: LIST
69404: PUSH
69405: LD_INT 1
69407: PUSH
69408: LD_INT 3
69410: PUSH
69411: EMPTY
69412: LIST
69413: LIST
69414: PUSH
69415: LD_INT 0
69417: PUSH
69418: LD_INT 3
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: LD_INT 1
69427: NEG
69428: PUSH
69429: LD_INT 2
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: EMPTY
69437: LIST
69438: LIST
69439: LIST
69440: LIST
69441: LIST
69442: LIST
69443: LIST
69444: LIST
69445: LIST
69446: LIST
69447: LIST
69448: LIST
69449: LIST
69450: LIST
69451: LIST
69452: LIST
69453: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
69454: LD_ADDR_VAR 0 12
69458: PUSH
69459: LD_INT 0
69461: PUSH
69462: LD_INT 0
69464: PUSH
69465: EMPTY
69466: LIST
69467: LIST
69468: PUSH
69469: LD_INT 0
69471: PUSH
69472: LD_INT 1
69474: NEG
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: PUSH
69480: LD_INT 1
69482: PUSH
69483: LD_INT 0
69485: PUSH
69486: EMPTY
69487: LIST
69488: LIST
69489: PUSH
69490: LD_INT 1
69492: PUSH
69493: LD_INT 1
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 0
69502: PUSH
69503: LD_INT 1
69505: PUSH
69506: EMPTY
69507: LIST
69508: LIST
69509: PUSH
69510: LD_INT 1
69512: NEG
69513: PUSH
69514: LD_INT 0
69516: PUSH
69517: EMPTY
69518: LIST
69519: LIST
69520: PUSH
69521: LD_INT 1
69523: NEG
69524: PUSH
69525: LD_INT 1
69527: NEG
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 1
69535: PUSH
69536: LD_INT 1
69538: NEG
69539: PUSH
69540: EMPTY
69541: LIST
69542: LIST
69543: PUSH
69544: LD_INT 2
69546: PUSH
69547: LD_INT 0
69549: PUSH
69550: EMPTY
69551: LIST
69552: LIST
69553: PUSH
69554: LD_INT 2
69556: PUSH
69557: LD_INT 1
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: LD_INT 1
69566: NEG
69567: PUSH
69568: LD_INT 1
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_INT 2
69577: NEG
69578: PUSH
69579: LD_INT 0
69581: PUSH
69582: EMPTY
69583: LIST
69584: LIST
69585: PUSH
69586: LD_INT 2
69588: NEG
69589: PUSH
69590: LD_INT 1
69592: NEG
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: PUSH
69598: LD_INT 2
69600: NEG
69601: PUSH
69602: LD_INT 1
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 3
69611: NEG
69612: PUSH
69613: LD_INT 0
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 3
69622: NEG
69623: PUSH
69624: LD_INT 1
69626: NEG
69627: PUSH
69628: EMPTY
69629: LIST
69630: LIST
69631: PUSH
69632: EMPTY
69633: LIST
69634: LIST
69635: LIST
69636: LIST
69637: LIST
69638: LIST
69639: LIST
69640: LIST
69641: LIST
69642: LIST
69643: LIST
69644: LIST
69645: LIST
69646: LIST
69647: LIST
69648: LIST
69649: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
69650: LD_ADDR_VAR 0 13
69654: PUSH
69655: LD_INT 0
69657: PUSH
69658: LD_INT 0
69660: PUSH
69661: EMPTY
69662: LIST
69663: LIST
69664: PUSH
69665: LD_INT 0
69667: PUSH
69668: LD_INT 1
69670: NEG
69671: PUSH
69672: EMPTY
69673: LIST
69674: LIST
69675: PUSH
69676: LD_INT 1
69678: PUSH
69679: LD_INT 0
69681: PUSH
69682: EMPTY
69683: LIST
69684: LIST
69685: PUSH
69686: LD_INT 1
69688: PUSH
69689: LD_INT 1
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 0
69698: PUSH
69699: LD_INT 1
69701: PUSH
69702: EMPTY
69703: LIST
69704: LIST
69705: PUSH
69706: LD_INT 1
69708: NEG
69709: PUSH
69710: LD_INT 0
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 1
69719: NEG
69720: PUSH
69721: LD_INT 1
69723: NEG
69724: PUSH
69725: EMPTY
69726: LIST
69727: LIST
69728: PUSH
69729: LD_INT 1
69731: NEG
69732: PUSH
69733: LD_INT 2
69735: NEG
69736: PUSH
69737: EMPTY
69738: LIST
69739: LIST
69740: PUSH
69741: LD_INT 2
69743: PUSH
69744: LD_INT 1
69746: PUSH
69747: EMPTY
69748: LIST
69749: LIST
69750: PUSH
69751: LD_INT 2
69753: PUSH
69754: LD_INT 2
69756: PUSH
69757: EMPTY
69758: LIST
69759: LIST
69760: PUSH
69761: LD_INT 1
69763: PUSH
69764: LD_INT 2
69766: PUSH
69767: EMPTY
69768: LIST
69769: LIST
69770: PUSH
69771: LD_INT 2
69773: NEG
69774: PUSH
69775: LD_INT 1
69777: NEG
69778: PUSH
69779: EMPTY
69780: LIST
69781: LIST
69782: PUSH
69783: LD_INT 2
69785: NEG
69786: PUSH
69787: LD_INT 2
69789: NEG
69790: PUSH
69791: EMPTY
69792: LIST
69793: LIST
69794: PUSH
69795: LD_INT 2
69797: NEG
69798: PUSH
69799: LD_INT 3
69801: NEG
69802: PUSH
69803: EMPTY
69804: LIST
69805: LIST
69806: PUSH
69807: LD_INT 3
69809: NEG
69810: PUSH
69811: LD_INT 2
69813: NEG
69814: PUSH
69815: EMPTY
69816: LIST
69817: LIST
69818: PUSH
69819: LD_INT 3
69821: NEG
69822: PUSH
69823: LD_INT 3
69825: NEG
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: EMPTY
69832: LIST
69833: LIST
69834: LIST
69835: LIST
69836: LIST
69837: LIST
69838: LIST
69839: LIST
69840: LIST
69841: LIST
69842: LIST
69843: LIST
69844: LIST
69845: LIST
69846: LIST
69847: LIST
69848: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
69849: LD_ADDR_VAR 0 14
69853: PUSH
69854: LD_INT 0
69856: PUSH
69857: LD_INT 0
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 0
69866: PUSH
69867: LD_INT 1
69869: NEG
69870: PUSH
69871: EMPTY
69872: LIST
69873: LIST
69874: PUSH
69875: LD_INT 1
69877: PUSH
69878: LD_INT 0
69880: PUSH
69881: EMPTY
69882: LIST
69883: LIST
69884: PUSH
69885: LD_INT 1
69887: PUSH
69888: LD_INT 1
69890: PUSH
69891: EMPTY
69892: LIST
69893: LIST
69894: PUSH
69895: LD_INT 0
69897: PUSH
69898: LD_INT 1
69900: PUSH
69901: EMPTY
69902: LIST
69903: LIST
69904: PUSH
69905: LD_INT 1
69907: NEG
69908: PUSH
69909: LD_INT 0
69911: PUSH
69912: EMPTY
69913: LIST
69914: LIST
69915: PUSH
69916: LD_INT 1
69918: NEG
69919: PUSH
69920: LD_INT 1
69922: NEG
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 1
69930: NEG
69931: PUSH
69932: LD_INT 2
69934: NEG
69935: PUSH
69936: EMPTY
69937: LIST
69938: LIST
69939: PUSH
69940: LD_INT 0
69942: PUSH
69943: LD_INT 2
69945: NEG
69946: PUSH
69947: EMPTY
69948: LIST
69949: LIST
69950: PUSH
69951: LD_INT 1
69953: PUSH
69954: LD_INT 1
69956: NEG
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: LD_INT 1
69964: PUSH
69965: LD_INT 2
69967: PUSH
69968: EMPTY
69969: LIST
69970: LIST
69971: PUSH
69972: LD_INT 0
69974: PUSH
69975: LD_INT 2
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 1
69984: NEG
69985: PUSH
69986: LD_INT 1
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 1
69995: NEG
69996: PUSH
69997: LD_INT 3
69999: NEG
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: PUSH
70005: LD_INT 0
70007: PUSH
70008: LD_INT 3
70010: NEG
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 1
70018: PUSH
70019: LD_INT 2
70021: NEG
70022: PUSH
70023: EMPTY
70024: LIST
70025: LIST
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
70045: LD_ADDR_VAR 0 15
70049: PUSH
70050: LD_INT 0
70052: PUSH
70053: LD_INT 0
70055: PUSH
70056: EMPTY
70057: LIST
70058: LIST
70059: PUSH
70060: LD_INT 0
70062: PUSH
70063: LD_INT 1
70065: NEG
70066: PUSH
70067: EMPTY
70068: LIST
70069: LIST
70070: PUSH
70071: LD_INT 1
70073: PUSH
70074: LD_INT 0
70076: PUSH
70077: EMPTY
70078: LIST
70079: LIST
70080: PUSH
70081: LD_INT 1
70083: PUSH
70084: LD_INT 1
70086: PUSH
70087: EMPTY
70088: LIST
70089: LIST
70090: PUSH
70091: LD_INT 0
70093: PUSH
70094: LD_INT 1
70096: PUSH
70097: EMPTY
70098: LIST
70099: LIST
70100: PUSH
70101: LD_INT 1
70103: NEG
70104: PUSH
70105: LD_INT 0
70107: PUSH
70108: EMPTY
70109: LIST
70110: LIST
70111: PUSH
70112: LD_INT 1
70114: NEG
70115: PUSH
70116: LD_INT 1
70118: NEG
70119: PUSH
70120: EMPTY
70121: LIST
70122: LIST
70123: PUSH
70124: LD_INT 1
70126: PUSH
70127: LD_INT 1
70129: NEG
70130: PUSH
70131: EMPTY
70132: LIST
70133: LIST
70134: PUSH
70135: LD_INT 2
70137: PUSH
70138: LD_INT 0
70140: PUSH
70141: EMPTY
70142: LIST
70143: LIST
70144: PUSH
70145: LD_INT 2
70147: PUSH
70148: LD_INT 1
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: PUSH
70155: LD_INT 1
70157: NEG
70158: PUSH
70159: LD_INT 1
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 2
70168: NEG
70169: PUSH
70170: LD_INT 0
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 2
70179: NEG
70180: PUSH
70181: LD_INT 1
70183: NEG
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 2
70191: PUSH
70192: LD_INT 1
70194: NEG
70195: PUSH
70196: EMPTY
70197: LIST
70198: LIST
70199: PUSH
70200: LD_INT 3
70202: PUSH
70203: LD_INT 0
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 3
70212: PUSH
70213: LD_INT 1
70215: PUSH
70216: EMPTY
70217: LIST
70218: LIST
70219: PUSH
70220: EMPTY
70221: LIST
70222: LIST
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
70238: LD_ADDR_VAR 0 16
70242: PUSH
70243: LD_INT 0
70245: PUSH
70246: LD_INT 0
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 0
70255: PUSH
70256: LD_INT 1
70258: NEG
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: PUSH
70264: LD_INT 1
70266: PUSH
70267: LD_INT 0
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: LD_INT 1
70276: PUSH
70277: LD_INT 1
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 0
70286: PUSH
70287: LD_INT 1
70289: PUSH
70290: EMPTY
70291: LIST
70292: LIST
70293: PUSH
70294: LD_INT 1
70296: NEG
70297: PUSH
70298: LD_INT 0
70300: PUSH
70301: EMPTY
70302: LIST
70303: LIST
70304: PUSH
70305: LD_INT 1
70307: NEG
70308: PUSH
70309: LD_INT 1
70311: NEG
70312: PUSH
70313: EMPTY
70314: LIST
70315: LIST
70316: PUSH
70317: LD_INT 1
70319: NEG
70320: PUSH
70321: LD_INT 2
70323: NEG
70324: PUSH
70325: EMPTY
70326: LIST
70327: LIST
70328: PUSH
70329: LD_INT 2
70331: PUSH
70332: LD_INT 1
70334: PUSH
70335: EMPTY
70336: LIST
70337: LIST
70338: PUSH
70339: LD_INT 2
70341: PUSH
70342: LD_INT 2
70344: PUSH
70345: EMPTY
70346: LIST
70347: LIST
70348: PUSH
70349: LD_INT 1
70351: PUSH
70352: LD_INT 2
70354: PUSH
70355: EMPTY
70356: LIST
70357: LIST
70358: PUSH
70359: LD_INT 2
70361: NEG
70362: PUSH
70363: LD_INT 1
70365: NEG
70366: PUSH
70367: EMPTY
70368: LIST
70369: LIST
70370: PUSH
70371: LD_INT 2
70373: NEG
70374: PUSH
70375: LD_INT 2
70377: NEG
70378: PUSH
70379: EMPTY
70380: LIST
70381: LIST
70382: PUSH
70383: LD_INT 3
70385: PUSH
70386: LD_INT 2
70388: PUSH
70389: EMPTY
70390: LIST
70391: LIST
70392: PUSH
70393: LD_INT 3
70395: PUSH
70396: LD_INT 3
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 2
70405: PUSH
70406: LD_INT 3
70408: PUSH
70409: EMPTY
70410: LIST
70411: LIST
70412: PUSH
70413: EMPTY
70414: LIST
70415: LIST
70416: LIST
70417: LIST
70418: LIST
70419: LIST
70420: LIST
70421: LIST
70422: LIST
70423: LIST
70424: LIST
70425: LIST
70426: LIST
70427: LIST
70428: LIST
70429: LIST
70430: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70431: LD_ADDR_VAR 0 17
70435: PUSH
70436: LD_INT 0
70438: PUSH
70439: LD_INT 0
70441: PUSH
70442: EMPTY
70443: LIST
70444: LIST
70445: PUSH
70446: LD_INT 0
70448: PUSH
70449: LD_INT 1
70451: NEG
70452: PUSH
70453: EMPTY
70454: LIST
70455: LIST
70456: PUSH
70457: LD_INT 1
70459: PUSH
70460: LD_INT 0
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 1
70469: PUSH
70470: LD_INT 1
70472: PUSH
70473: EMPTY
70474: LIST
70475: LIST
70476: PUSH
70477: LD_INT 0
70479: PUSH
70480: LD_INT 1
70482: PUSH
70483: EMPTY
70484: LIST
70485: LIST
70486: PUSH
70487: LD_INT 1
70489: NEG
70490: PUSH
70491: LD_INT 0
70493: PUSH
70494: EMPTY
70495: LIST
70496: LIST
70497: PUSH
70498: LD_INT 1
70500: NEG
70501: PUSH
70502: LD_INT 1
70504: NEG
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 1
70512: NEG
70513: PUSH
70514: LD_INT 2
70516: NEG
70517: PUSH
70518: EMPTY
70519: LIST
70520: LIST
70521: PUSH
70522: LD_INT 0
70524: PUSH
70525: LD_INT 2
70527: NEG
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 1
70535: PUSH
70536: LD_INT 1
70538: NEG
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 2
70546: PUSH
70547: LD_INT 0
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: PUSH
70554: LD_INT 2
70556: PUSH
70557: LD_INT 1
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 2
70566: PUSH
70567: LD_INT 2
70569: PUSH
70570: EMPTY
70571: LIST
70572: LIST
70573: PUSH
70574: LD_INT 1
70576: PUSH
70577: LD_INT 2
70579: PUSH
70580: EMPTY
70581: LIST
70582: LIST
70583: PUSH
70584: LD_INT 0
70586: PUSH
70587: LD_INT 2
70589: PUSH
70590: EMPTY
70591: LIST
70592: LIST
70593: PUSH
70594: LD_INT 1
70596: NEG
70597: PUSH
70598: LD_INT 1
70600: PUSH
70601: EMPTY
70602: LIST
70603: LIST
70604: PUSH
70605: LD_INT 2
70607: NEG
70608: PUSH
70609: LD_INT 0
70611: PUSH
70612: EMPTY
70613: LIST
70614: LIST
70615: PUSH
70616: LD_INT 2
70618: NEG
70619: PUSH
70620: LD_INT 1
70622: NEG
70623: PUSH
70624: EMPTY
70625: LIST
70626: LIST
70627: PUSH
70628: LD_INT 2
70630: NEG
70631: PUSH
70632: LD_INT 2
70634: NEG
70635: PUSH
70636: EMPTY
70637: LIST
70638: LIST
70639: PUSH
70640: EMPTY
70641: LIST
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70661: LD_ADDR_VAR 0 18
70665: PUSH
70666: LD_INT 0
70668: PUSH
70669: LD_INT 0
70671: PUSH
70672: EMPTY
70673: LIST
70674: LIST
70675: PUSH
70676: LD_INT 0
70678: PUSH
70679: LD_INT 1
70681: NEG
70682: PUSH
70683: EMPTY
70684: LIST
70685: LIST
70686: PUSH
70687: LD_INT 1
70689: PUSH
70690: LD_INT 0
70692: PUSH
70693: EMPTY
70694: LIST
70695: LIST
70696: PUSH
70697: LD_INT 1
70699: PUSH
70700: LD_INT 1
70702: PUSH
70703: EMPTY
70704: LIST
70705: LIST
70706: PUSH
70707: LD_INT 0
70709: PUSH
70710: LD_INT 1
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: PUSH
70717: LD_INT 1
70719: NEG
70720: PUSH
70721: LD_INT 0
70723: PUSH
70724: EMPTY
70725: LIST
70726: LIST
70727: PUSH
70728: LD_INT 1
70730: NEG
70731: PUSH
70732: LD_INT 1
70734: NEG
70735: PUSH
70736: EMPTY
70737: LIST
70738: LIST
70739: PUSH
70740: LD_INT 1
70742: NEG
70743: PUSH
70744: LD_INT 2
70746: NEG
70747: PUSH
70748: EMPTY
70749: LIST
70750: LIST
70751: PUSH
70752: LD_INT 0
70754: PUSH
70755: LD_INT 2
70757: NEG
70758: PUSH
70759: EMPTY
70760: LIST
70761: LIST
70762: PUSH
70763: LD_INT 1
70765: PUSH
70766: LD_INT 1
70768: NEG
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 2
70776: PUSH
70777: LD_INT 0
70779: PUSH
70780: EMPTY
70781: LIST
70782: LIST
70783: PUSH
70784: LD_INT 2
70786: PUSH
70787: LD_INT 1
70789: PUSH
70790: EMPTY
70791: LIST
70792: LIST
70793: PUSH
70794: LD_INT 2
70796: PUSH
70797: LD_INT 2
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PUSH
70804: LD_INT 1
70806: PUSH
70807: LD_INT 2
70809: PUSH
70810: EMPTY
70811: LIST
70812: LIST
70813: PUSH
70814: LD_INT 0
70816: PUSH
70817: LD_INT 2
70819: PUSH
70820: EMPTY
70821: LIST
70822: LIST
70823: PUSH
70824: LD_INT 1
70826: NEG
70827: PUSH
70828: LD_INT 1
70830: PUSH
70831: EMPTY
70832: LIST
70833: LIST
70834: PUSH
70835: LD_INT 2
70837: NEG
70838: PUSH
70839: LD_INT 0
70841: PUSH
70842: EMPTY
70843: LIST
70844: LIST
70845: PUSH
70846: LD_INT 2
70848: NEG
70849: PUSH
70850: LD_INT 1
70852: NEG
70853: PUSH
70854: EMPTY
70855: LIST
70856: LIST
70857: PUSH
70858: LD_INT 2
70860: NEG
70861: PUSH
70862: LD_INT 2
70864: NEG
70865: PUSH
70866: EMPTY
70867: LIST
70868: LIST
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: LIST
70874: LIST
70875: LIST
70876: LIST
70877: LIST
70878: LIST
70879: LIST
70880: LIST
70881: LIST
70882: LIST
70883: LIST
70884: LIST
70885: LIST
70886: LIST
70887: LIST
70888: LIST
70889: LIST
70890: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
70891: LD_ADDR_VAR 0 19
70895: PUSH
70896: LD_INT 0
70898: PUSH
70899: LD_INT 0
70901: PUSH
70902: EMPTY
70903: LIST
70904: LIST
70905: PUSH
70906: LD_INT 0
70908: PUSH
70909: LD_INT 1
70911: NEG
70912: PUSH
70913: EMPTY
70914: LIST
70915: LIST
70916: PUSH
70917: LD_INT 1
70919: PUSH
70920: LD_INT 0
70922: PUSH
70923: EMPTY
70924: LIST
70925: LIST
70926: PUSH
70927: LD_INT 1
70929: PUSH
70930: LD_INT 1
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: PUSH
70937: LD_INT 0
70939: PUSH
70940: LD_INT 1
70942: PUSH
70943: EMPTY
70944: LIST
70945: LIST
70946: PUSH
70947: LD_INT 1
70949: NEG
70950: PUSH
70951: LD_INT 0
70953: PUSH
70954: EMPTY
70955: LIST
70956: LIST
70957: PUSH
70958: LD_INT 1
70960: NEG
70961: PUSH
70962: LD_INT 1
70964: NEG
70965: PUSH
70966: EMPTY
70967: LIST
70968: LIST
70969: PUSH
70970: LD_INT 1
70972: NEG
70973: PUSH
70974: LD_INT 2
70976: NEG
70977: PUSH
70978: EMPTY
70979: LIST
70980: LIST
70981: PUSH
70982: LD_INT 0
70984: PUSH
70985: LD_INT 2
70987: NEG
70988: PUSH
70989: EMPTY
70990: LIST
70991: LIST
70992: PUSH
70993: LD_INT 1
70995: PUSH
70996: LD_INT 1
70998: NEG
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PUSH
71004: LD_INT 2
71006: PUSH
71007: LD_INT 0
71009: PUSH
71010: EMPTY
71011: LIST
71012: LIST
71013: PUSH
71014: LD_INT 2
71016: PUSH
71017: LD_INT 1
71019: PUSH
71020: EMPTY
71021: LIST
71022: LIST
71023: PUSH
71024: LD_INT 2
71026: PUSH
71027: LD_INT 2
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: LD_INT 1
71036: PUSH
71037: LD_INT 2
71039: PUSH
71040: EMPTY
71041: LIST
71042: LIST
71043: PUSH
71044: LD_INT 0
71046: PUSH
71047: LD_INT 2
71049: PUSH
71050: EMPTY
71051: LIST
71052: LIST
71053: PUSH
71054: LD_INT 1
71056: NEG
71057: PUSH
71058: LD_INT 1
71060: PUSH
71061: EMPTY
71062: LIST
71063: LIST
71064: PUSH
71065: LD_INT 2
71067: NEG
71068: PUSH
71069: LD_INT 0
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: PUSH
71076: LD_INT 2
71078: NEG
71079: PUSH
71080: LD_INT 1
71082: NEG
71083: PUSH
71084: EMPTY
71085: LIST
71086: LIST
71087: PUSH
71088: LD_INT 2
71090: NEG
71091: PUSH
71092: LD_INT 2
71094: NEG
71095: PUSH
71096: EMPTY
71097: LIST
71098: LIST
71099: PUSH
71100: EMPTY
71101: LIST
71102: LIST
71103: LIST
71104: LIST
71105: LIST
71106: LIST
71107: LIST
71108: LIST
71109: LIST
71110: LIST
71111: LIST
71112: LIST
71113: LIST
71114: LIST
71115: LIST
71116: LIST
71117: LIST
71118: LIST
71119: LIST
71120: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71121: LD_ADDR_VAR 0 20
71125: PUSH
71126: LD_INT 0
71128: PUSH
71129: LD_INT 0
71131: PUSH
71132: EMPTY
71133: LIST
71134: LIST
71135: PUSH
71136: LD_INT 0
71138: PUSH
71139: LD_INT 1
71141: NEG
71142: PUSH
71143: EMPTY
71144: LIST
71145: LIST
71146: PUSH
71147: LD_INT 1
71149: PUSH
71150: LD_INT 0
71152: PUSH
71153: EMPTY
71154: LIST
71155: LIST
71156: PUSH
71157: LD_INT 1
71159: PUSH
71160: LD_INT 1
71162: PUSH
71163: EMPTY
71164: LIST
71165: LIST
71166: PUSH
71167: LD_INT 0
71169: PUSH
71170: LD_INT 1
71172: PUSH
71173: EMPTY
71174: LIST
71175: LIST
71176: PUSH
71177: LD_INT 1
71179: NEG
71180: PUSH
71181: LD_INT 0
71183: PUSH
71184: EMPTY
71185: LIST
71186: LIST
71187: PUSH
71188: LD_INT 1
71190: NEG
71191: PUSH
71192: LD_INT 1
71194: NEG
71195: PUSH
71196: EMPTY
71197: LIST
71198: LIST
71199: PUSH
71200: LD_INT 1
71202: NEG
71203: PUSH
71204: LD_INT 2
71206: NEG
71207: PUSH
71208: EMPTY
71209: LIST
71210: LIST
71211: PUSH
71212: LD_INT 0
71214: PUSH
71215: LD_INT 2
71217: NEG
71218: PUSH
71219: EMPTY
71220: LIST
71221: LIST
71222: PUSH
71223: LD_INT 1
71225: PUSH
71226: LD_INT 1
71228: NEG
71229: PUSH
71230: EMPTY
71231: LIST
71232: LIST
71233: PUSH
71234: LD_INT 2
71236: PUSH
71237: LD_INT 0
71239: PUSH
71240: EMPTY
71241: LIST
71242: LIST
71243: PUSH
71244: LD_INT 2
71246: PUSH
71247: LD_INT 1
71249: PUSH
71250: EMPTY
71251: LIST
71252: LIST
71253: PUSH
71254: LD_INT 2
71256: PUSH
71257: LD_INT 2
71259: PUSH
71260: EMPTY
71261: LIST
71262: LIST
71263: PUSH
71264: LD_INT 1
71266: PUSH
71267: LD_INT 2
71269: PUSH
71270: EMPTY
71271: LIST
71272: LIST
71273: PUSH
71274: LD_INT 0
71276: PUSH
71277: LD_INT 2
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: PUSH
71284: LD_INT 1
71286: NEG
71287: PUSH
71288: LD_INT 1
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: LD_INT 2
71297: NEG
71298: PUSH
71299: LD_INT 0
71301: PUSH
71302: EMPTY
71303: LIST
71304: LIST
71305: PUSH
71306: LD_INT 2
71308: NEG
71309: PUSH
71310: LD_INT 1
71312: NEG
71313: PUSH
71314: EMPTY
71315: LIST
71316: LIST
71317: PUSH
71318: LD_INT 2
71320: NEG
71321: PUSH
71322: LD_INT 2
71324: NEG
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: LIST
71334: LIST
71335: LIST
71336: LIST
71337: LIST
71338: LIST
71339: LIST
71340: LIST
71341: LIST
71342: LIST
71343: LIST
71344: LIST
71345: LIST
71346: LIST
71347: LIST
71348: LIST
71349: LIST
71350: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71351: LD_ADDR_VAR 0 21
71355: PUSH
71356: LD_INT 0
71358: PUSH
71359: LD_INT 0
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 0
71368: PUSH
71369: LD_INT 1
71371: NEG
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 1
71379: PUSH
71380: LD_INT 0
71382: PUSH
71383: EMPTY
71384: LIST
71385: LIST
71386: PUSH
71387: LD_INT 1
71389: PUSH
71390: LD_INT 1
71392: PUSH
71393: EMPTY
71394: LIST
71395: LIST
71396: PUSH
71397: LD_INT 0
71399: PUSH
71400: LD_INT 1
71402: PUSH
71403: EMPTY
71404: LIST
71405: LIST
71406: PUSH
71407: LD_INT 1
71409: NEG
71410: PUSH
71411: LD_INT 0
71413: PUSH
71414: EMPTY
71415: LIST
71416: LIST
71417: PUSH
71418: LD_INT 1
71420: NEG
71421: PUSH
71422: LD_INT 1
71424: NEG
71425: PUSH
71426: EMPTY
71427: LIST
71428: LIST
71429: PUSH
71430: LD_INT 1
71432: NEG
71433: PUSH
71434: LD_INT 2
71436: NEG
71437: PUSH
71438: EMPTY
71439: LIST
71440: LIST
71441: PUSH
71442: LD_INT 0
71444: PUSH
71445: LD_INT 2
71447: NEG
71448: PUSH
71449: EMPTY
71450: LIST
71451: LIST
71452: PUSH
71453: LD_INT 1
71455: PUSH
71456: LD_INT 1
71458: NEG
71459: PUSH
71460: EMPTY
71461: LIST
71462: LIST
71463: PUSH
71464: LD_INT 2
71466: PUSH
71467: LD_INT 0
71469: PUSH
71470: EMPTY
71471: LIST
71472: LIST
71473: PUSH
71474: LD_INT 2
71476: PUSH
71477: LD_INT 1
71479: PUSH
71480: EMPTY
71481: LIST
71482: LIST
71483: PUSH
71484: LD_INT 2
71486: PUSH
71487: LD_INT 2
71489: PUSH
71490: EMPTY
71491: LIST
71492: LIST
71493: PUSH
71494: LD_INT 1
71496: PUSH
71497: LD_INT 2
71499: PUSH
71500: EMPTY
71501: LIST
71502: LIST
71503: PUSH
71504: LD_INT 0
71506: PUSH
71507: LD_INT 2
71509: PUSH
71510: EMPTY
71511: LIST
71512: LIST
71513: PUSH
71514: LD_INT 1
71516: NEG
71517: PUSH
71518: LD_INT 1
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: PUSH
71525: LD_INT 2
71527: NEG
71528: PUSH
71529: LD_INT 0
71531: PUSH
71532: EMPTY
71533: LIST
71534: LIST
71535: PUSH
71536: LD_INT 2
71538: NEG
71539: PUSH
71540: LD_INT 1
71542: NEG
71543: PUSH
71544: EMPTY
71545: LIST
71546: LIST
71547: PUSH
71548: LD_INT 2
71550: NEG
71551: PUSH
71552: LD_INT 2
71554: NEG
71555: PUSH
71556: EMPTY
71557: LIST
71558: LIST
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: LIST
71564: LIST
71565: LIST
71566: LIST
71567: LIST
71568: LIST
71569: LIST
71570: LIST
71571: LIST
71572: LIST
71573: LIST
71574: LIST
71575: LIST
71576: LIST
71577: LIST
71578: LIST
71579: LIST
71580: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
71581: LD_ADDR_VAR 0 22
71585: PUSH
71586: LD_INT 0
71588: PUSH
71589: LD_INT 0
71591: PUSH
71592: EMPTY
71593: LIST
71594: LIST
71595: PUSH
71596: LD_INT 0
71598: PUSH
71599: LD_INT 1
71601: NEG
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: PUSH
71607: LD_INT 1
71609: PUSH
71610: LD_INT 0
71612: PUSH
71613: EMPTY
71614: LIST
71615: LIST
71616: PUSH
71617: LD_INT 1
71619: PUSH
71620: LD_INT 1
71622: PUSH
71623: EMPTY
71624: LIST
71625: LIST
71626: PUSH
71627: LD_INT 0
71629: PUSH
71630: LD_INT 1
71632: PUSH
71633: EMPTY
71634: LIST
71635: LIST
71636: PUSH
71637: LD_INT 1
71639: NEG
71640: PUSH
71641: LD_INT 0
71643: PUSH
71644: EMPTY
71645: LIST
71646: LIST
71647: PUSH
71648: LD_INT 1
71650: NEG
71651: PUSH
71652: LD_INT 1
71654: NEG
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: LD_INT 1
71662: NEG
71663: PUSH
71664: LD_INT 2
71666: NEG
71667: PUSH
71668: EMPTY
71669: LIST
71670: LIST
71671: PUSH
71672: LD_INT 0
71674: PUSH
71675: LD_INT 2
71677: NEG
71678: PUSH
71679: EMPTY
71680: LIST
71681: LIST
71682: PUSH
71683: LD_INT 1
71685: PUSH
71686: LD_INT 1
71688: NEG
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: PUSH
71694: LD_INT 2
71696: PUSH
71697: LD_INT 0
71699: PUSH
71700: EMPTY
71701: LIST
71702: LIST
71703: PUSH
71704: LD_INT 2
71706: PUSH
71707: LD_INT 1
71709: PUSH
71710: EMPTY
71711: LIST
71712: LIST
71713: PUSH
71714: LD_INT 2
71716: PUSH
71717: LD_INT 2
71719: PUSH
71720: EMPTY
71721: LIST
71722: LIST
71723: PUSH
71724: LD_INT 1
71726: PUSH
71727: LD_INT 2
71729: PUSH
71730: EMPTY
71731: LIST
71732: LIST
71733: PUSH
71734: LD_INT 0
71736: PUSH
71737: LD_INT 2
71739: PUSH
71740: EMPTY
71741: LIST
71742: LIST
71743: PUSH
71744: LD_INT 1
71746: NEG
71747: PUSH
71748: LD_INT 1
71750: PUSH
71751: EMPTY
71752: LIST
71753: LIST
71754: PUSH
71755: LD_INT 2
71757: NEG
71758: PUSH
71759: LD_INT 0
71761: PUSH
71762: EMPTY
71763: LIST
71764: LIST
71765: PUSH
71766: LD_INT 2
71768: NEG
71769: PUSH
71770: LD_INT 1
71772: NEG
71773: PUSH
71774: EMPTY
71775: LIST
71776: LIST
71777: PUSH
71778: LD_INT 2
71780: NEG
71781: PUSH
71782: LD_INT 2
71784: NEG
71785: PUSH
71786: EMPTY
71787: LIST
71788: LIST
71789: PUSH
71790: EMPTY
71791: LIST
71792: LIST
71793: LIST
71794: LIST
71795: LIST
71796: LIST
71797: LIST
71798: LIST
71799: LIST
71800: LIST
71801: LIST
71802: LIST
71803: LIST
71804: LIST
71805: LIST
71806: LIST
71807: LIST
71808: LIST
71809: LIST
71810: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
71811: LD_ADDR_VAR 0 23
71815: PUSH
71816: LD_INT 0
71818: PUSH
71819: LD_INT 0
71821: PUSH
71822: EMPTY
71823: LIST
71824: LIST
71825: PUSH
71826: LD_INT 0
71828: PUSH
71829: LD_INT 1
71831: NEG
71832: PUSH
71833: EMPTY
71834: LIST
71835: LIST
71836: PUSH
71837: LD_INT 1
71839: PUSH
71840: LD_INT 0
71842: PUSH
71843: EMPTY
71844: LIST
71845: LIST
71846: PUSH
71847: LD_INT 1
71849: PUSH
71850: LD_INT 1
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: PUSH
71857: LD_INT 0
71859: PUSH
71860: LD_INT 1
71862: PUSH
71863: EMPTY
71864: LIST
71865: LIST
71866: PUSH
71867: LD_INT 1
71869: NEG
71870: PUSH
71871: LD_INT 0
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: PUSH
71878: LD_INT 1
71880: NEG
71881: PUSH
71882: LD_INT 1
71884: NEG
71885: PUSH
71886: EMPTY
71887: LIST
71888: LIST
71889: PUSH
71890: LD_INT 1
71892: NEG
71893: PUSH
71894: LD_INT 2
71896: NEG
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: PUSH
71902: LD_INT 0
71904: PUSH
71905: LD_INT 2
71907: NEG
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: PUSH
71913: LD_INT 1
71915: PUSH
71916: LD_INT 1
71918: NEG
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: PUSH
71924: LD_INT 2
71926: PUSH
71927: LD_INT 0
71929: PUSH
71930: EMPTY
71931: LIST
71932: LIST
71933: PUSH
71934: LD_INT 2
71936: PUSH
71937: LD_INT 1
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: PUSH
71944: LD_INT 2
71946: PUSH
71947: LD_INT 2
71949: PUSH
71950: EMPTY
71951: LIST
71952: LIST
71953: PUSH
71954: LD_INT 1
71956: PUSH
71957: LD_INT 2
71959: PUSH
71960: EMPTY
71961: LIST
71962: LIST
71963: PUSH
71964: LD_INT 0
71966: PUSH
71967: LD_INT 2
71969: PUSH
71970: EMPTY
71971: LIST
71972: LIST
71973: PUSH
71974: LD_INT 1
71976: NEG
71977: PUSH
71978: LD_INT 1
71980: PUSH
71981: EMPTY
71982: LIST
71983: LIST
71984: PUSH
71985: LD_INT 2
71987: NEG
71988: PUSH
71989: LD_INT 0
71991: PUSH
71992: EMPTY
71993: LIST
71994: LIST
71995: PUSH
71996: LD_INT 2
71998: NEG
71999: PUSH
72000: LD_INT 1
72002: NEG
72003: PUSH
72004: EMPTY
72005: LIST
72006: LIST
72007: PUSH
72008: LD_INT 2
72010: NEG
72011: PUSH
72012: LD_INT 2
72014: NEG
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: LD_INT 2
72022: NEG
72023: PUSH
72024: LD_INT 3
72026: NEG
72027: PUSH
72028: EMPTY
72029: LIST
72030: LIST
72031: PUSH
72032: LD_INT 1
72034: NEG
72035: PUSH
72036: LD_INT 3
72038: NEG
72039: PUSH
72040: EMPTY
72041: LIST
72042: LIST
72043: PUSH
72044: LD_INT 1
72046: PUSH
72047: LD_INT 2
72049: NEG
72050: PUSH
72051: EMPTY
72052: LIST
72053: LIST
72054: PUSH
72055: LD_INT 2
72057: PUSH
72058: LD_INT 1
72060: NEG
72061: PUSH
72062: EMPTY
72063: LIST
72064: LIST
72065: PUSH
72066: EMPTY
72067: LIST
72068: LIST
72069: LIST
72070: LIST
72071: LIST
72072: LIST
72073: LIST
72074: LIST
72075: LIST
72076: LIST
72077: LIST
72078: LIST
72079: LIST
72080: LIST
72081: LIST
72082: LIST
72083: LIST
72084: LIST
72085: LIST
72086: LIST
72087: LIST
72088: LIST
72089: LIST
72090: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
72091: LD_ADDR_VAR 0 24
72095: PUSH
72096: LD_INT 0
72098: PUSH
72099: LD_INT 0
72101: PUSH
72102: EMPTY
72103: LIST
72104: LIST
72105: PUSH
72106: LD_INT 0
72108: PUSH
72109: LD_INT 1
72111: NEG
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: PUSH
72117: LD_INT 1
72119: PUSH
72120: LD_INT 0
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: PUSH
72127: LD_INT 1
72129: PUSH
72130: LD_INT 1
72132: PUSH
72133: EMPTY
72134: LIST
72135: LIST
72136: PUSH
72137: LD_INT 0
72139: PUSH
72140: LD_INT 1
72142: PUSH
72143: EMPTY
72144: LIST
72145: LIST
72146: PUSH
72147: LD_INT 1
72149: NEG
72150: PUSH
72151: LD_INT 0
72153: PUSH
72154: EMPTY
72155: LIST
72156: LIST
72157: PUSH
72158: LD_INT 1
72160: NEG
72161: PUSH
72162: LD_INT 1
72164: NEG
72165: PUSH
72166: EMPTY
72167: LIST
72168: LIST
72169: PUSH
72170: LD_INT 1
72172: NEG
72173: PUSH
72174: LD_INT 2
72176: NEG
72177: PUSH
72178: EMPTY
72179: LIST
72180: LIST
72181: PUSH
72182: LD_INT 0
72184: PUSH
72185: LD_INT 2
72187: NEG
72188: PUSH
72189: EMPTY
72190: LIST
72191: LIST
72192: PUSH
72193: LD_INT 1
72195: PUSH
72196: LD_INT 1
72198: NEG
72199: PUSH
72200: EMPTY
72201: LIST
72202: LIST
72203: PUSH
72204: LD_INT 2
72206: PUSH
72207: LD_INT 0
72209: PUSH
72210: EMPTY
72211: LIST
72212: LIST
72213: PUSH
72214: LD_INT 2
72216: PUSH
72217: LD_INT 1
72219: PUSH
72220: EMPTY
72221: LIST
72222: LIST
72223: PUSH
72224: LD_INT 2
72226: PUSH
72227: LD_INT 2
72229: PUSH
72230: EMPTY
72231: LIST
72232: LIST
72233: PUSH
72234: LD_INT 1
72236: PUSH
72237: LD_INT 2
72239: PUSH
72240: EMPTY
72241: LIST
72242: LIST
72243: PUSH
72244: LD_INT 0
72246: PUSH
72247: LD_INT 2
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: PUSH
72254: LD_INT 1
72256: NEG
72257: PUSH
72258: LD_INT 1
72260: PUSH
72261: EMPTY
72262: LIST
72263: LIST
72264: PUSH
72265: LD_INT 2
72267: NEG
72268: PUSH
72269: LD_INT 0
72271: PUSH
72272: EMPTY
72273: LIST
72274: LIST
72275: PUSH
72276: LD_INT 2
72278: NEG
72279: PUSH
72280: LD_INT 1
72282: NEG
72283: PUSH
72284: EMPTY
72285: LIST
72286: LIST
72287: PUSH
72288: LD_INT 2
72290: NEG
72291: PUSH
72292: LD_INT 2
72294: NEG
72295: PUSH
72296: EMPTY
72297: LIST
72298: LIST
72299: PUSH
72300: LD_INT 1
72302: PUSH
72303: LD_INT 2
72305: NEG
72306: PUSH
72307: EMPTY
72308: LIST
72309: LIST
72310: PUSH
72311: LD_INT 2
72313: PUSH
72314: LD_INT 1
72316: NEG
72317: PUSH
72318: EMPTY
72319: LIST
72320: LIST
72321: PUSH
72322: LD_INT 3
72324: PUSH
72325: LD_INT 1
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: PUSH
72332: LD_INT 3
72334: PUSH
72335: LD_INT 2
72337: PUSH
72338: EMPTY
72339: LIST
72340: LIST
72341: PUSH
72342: EMPTY
72343: LIST
72344: LIST
72345: LIST
72346: LIST
72347: LIST
72348: LIST
72349: LIST
72350: LIST
72351: LIST
72352: LIST
72353: LIST
72354: LIST
72355: LIST
72356: LIST
72357: LIST
72358: LIST
72359: LIST
72360: LIST
72361: LIST
72362: LIST
72363: LIST
72364: LIST
72365: LIST
72366: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
72367: LD_ADDR_VAR 0 25
72371: PUSH
72372: LD_INT 0
72374: PUSH
72375: LD_INT 0
72377: PUSH
72378: EMPTY
72379: LIST
72380: LIST
72381: PUSH
72382: LD_INT 0
72384: PUSH
72385: LD_INT 1
72387: NEG
72388: PUSH
72389: EMPTY
72390: LIST
72391: LIST
72392: PUSH
72393: LD_INT 1
72395: PUSH
72396: LD_INT 0
72398: PUSH
72399: EMPTY
72400: LIST
72401: LIST
72402: PUSH
72403: LD_INT 1
72405: PUSH
72406: LD_INT 1
72408: PUSH
72409: EMPTY
72410: LIST
72411: LIST
72412: PUSH
72413: LD_INT 0
72415: PUSH
72416: LD_INT 1
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: PUSH
72423: LD_INT 1
72425: NEG
72426: PUSH
72427: LD_INT 0
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: PUSH
72434: LD_INT 1
72436: NEG
72437: PUSH
72438: LD_INT 1
72440: NEG
72441: PUSH
72442: EMPTY
72443: LIST
72444: LIST
72445: PUSH
72446: LD_INT 1
72448: NEG
72449: PUSH
72450: LD_INT 2
72452: NEG
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: PUSH
72458: LD_INT 0
72460: PUSH
72461: LD_INT 2
72463: NEG
72464: PUSH
72465: EMPTY
72466: LIST
72467: LIST
72468: PUSH
72469: LD_INT 1
72471: PUSH
72472: LD_INT 1
72474: NEG
72475: PUSH
72476: EMPTY
72477: LIST
72478: LIST
72479: PUSH
72480: LD_INT 2
72482: PUSH
72483: LD_INT 0
72485: PUSH
72486: EMPTY
72487: LIST
72488: LIST
72489: PUSH
72490: LD_INT 2
72492: PUSH
72493: LD_INT 1
72495: PUSH
72496: EMPTY
72497: LIST
72498: LIST
72499: PUSH
72500: LD_INT 2
72502: PUSH
72503: LD_INT 2
72505: PUSH
72506: EMPTY
72507: LIST
72508: LIST
72509: PUSH
72510: LD_INT 1
72512: PUSH
72513: LD_INT 2
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: PUSH
72520: LD_INT 0
72522: PUSH
72523: LD_INT 2
72525: PUSH
72526: EMPTY
72527: LIST
72528: LIST
72529: PUSH
72530: LD_INT 1
72532: NEG
72533: PUSH
72534: LD_INT 1
72536: PUSH
72537: EMPTY
72538: LIST
72539: LIST
72540: PUSH
72541: LD_INT 2
72543: NEG
72544: PUSH
72545: LD_INT 0
72547: PUSH
72548: EMPTY
72549: LIST
72550: LIST
72551: PUSH
72552: LD_INT 2
72554: NEG
72555: PUSH
72556: LD_INT 1
72558: NEG
72559: PUSH
72560: EMPTY
72561: LIST
72562: LIST
72563: PUSH
72564: LD_INT 2
72566: NEG
72567: PUSH
72568: LD_INT 2
72570: NEG
72571: PUSH
72572: EMPTY
72573: LIST
72574: LIST
72575: PUSH
72576: LD_INT 3
72578: PUSH
72579: LD_INT 1
72581: PUSH
72582: EMPTY
72583: LIST
72584: LIST
72585: PUSH
72586: LD_INT 3
72588: PUSH
72589: LD_INT 2
72591: PUSH
72592: EMPTY
72593: LIST
72594: LIST
72595: PUSH
72596: LD_INT 2
72598: PUSH
72599: LD_INT 3
72601: PUSH
72602: EMPTY
72603: LIST
72604: LIST
72605: PUSH
72606: LD_INT 1
72608: PUSH
72609: LD_INT 3
72611: PUSH
72612: EMPTY
72613: LIST
72614: LIST
72615: PUSH
72616: EMPTY
72617: LIST
72618: LIST
72619: LIST
72620: LIST
72621: LIST
72622: LIST
72623: LIST
72624: LIST
72625: LIST
72626: LIST
72627: LIST
72628: LIST
72629: LIST
72630: LIST
72631: LIST
72632: LIST
72633: LIST
72634: LIST
72635: LIST
72636: LIST
72637: LIST
72638: LIST
72639: LIST
72640: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
72641: LD_ADDR_VAR 0 26
72645: PUSH
72646: LD_INT 0
72648: PUSH
72649: LD_INT 0
72651: PUSH
72652: EMPTY
72653: LIST
72654: LIST
72655: PUSH
72656: LD_INT 0
72658: PUSH
72659: LD_INT 1
72661: NEG
72662: PUSH
72663: EMPTY
72664: LIST
72665: LIST
72666: PUSH
72667: LD_INT 1
72669: PUSH
72670: LD_INT 0
72672: PUSH
72673: EMPTY
72674: LIST
72675: LIST
72676: PUSH
72677: LD_INT 1
72679: PUSH
72680: LD_INT 1
72682: PUSH
72683: EMPTY
72684: LIST
72685: LIST
72686: PUSH
72687: LD_INT 0
72689: PUSH
72690: LD_INT 1
72692: PUSH
72693: EMPTY
72694: LIST
72695: LIST
72696: PUSH
72697: LD_INT 1
72699: NEG
72700: PUSH
72701: LD_INT 0
72703: PUSH
72704: EMPTY
72705: LIST
72706: LIST
72707: PUSH
72708: LD_INT 1
72710: NEG
72711: PUSH
72712: LD_INT 1
72714: NEG
72715: PUSH
72716: EMPTY
72717: LIST
72718: LIST
72719: PUSH
72720: LD_INT 1
72722: NEG
72723: PUSH
72724: LD_INT 2
72726: NEG
72727: PUSH
72728: EMPTY
72729: LIST
72730: LIST
72731: PUSH
72732: LD_INT 0
72734: PUSH
72735: LD_INT 2
72737: NEG
72738: PUSH
72739: EMPTY
72740: LIST
72741: LIST
72742: PUSH
72743: LD_INT 1
72745: PUSH
72746: LD_INT 1
72748: NEG
72749: PUSH
72750: EMPTY
72751: LIST
72752: LIST
72753: PUSH
72754: LD_INT 2
72756: PUSH
72757: LD_INT 0
72759: PUSH
72760: EMPTY
72761: LIST
72762: LIST
72763: PUSH
72764: LD_INT 2
72766: PUSH
72767: LD_INT 1
72769: PUSH
72770: EMPTY
72771: LIST
72772: LIST
72773: PUSH
72774: LD_INT 2
72776: PUSH
72777: LD_INT 2
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: PUSH
72784: LD_INT 1
72786: PUSH
72787: LD_INT 2
72789: PUSH
72790: EMPTY
72791: LIST
72792: LIST
72793: PUSH
72794: LD_INT 0
72796: PUSH
72797: LD_INT 2
72799: PUSH
72800: EMPTY
72801: LIST
72802: LIST
72803: PUSH
72804: LD_INT 1
72806: NEG
72807: PUSH
72808: LD_INT 1
72810: PUSH
72811: EMPTY
72812: LIST
72813: LIST
72814: PUSH
72815: LD_INT 2
72817: NEG
72818: PUSH
72819: LD_INT 0
72821: PUSH
72822: EMPTY
72823: LIST
72824: LIST
72825: PUSH
72826: LD_INT 2
72828: NEG
72829: PUSH
72830: LD_INT 1
72832: NEG
72833: PUSH
72834: EMPTY
72835: LIST
72836: LIST
72837: PUSH
72838: LD_INT 2
72840: NEG
72841: PUSH
72842: LD_INT 2
72844: NEG
72845: PUSH
72846: EMPTY
72847: LIST
72848: LIST
72849: PUSH
72850: LD_INT 2
72852: PUSH
72853: LD_INT 3
72855: PUSH
72856: EMPTY
72857: LIST
72858: LIST
72859: PUSH
72860: LD_INT 1
72862: PUSH
72863: LD_INT 3
72865: PUSH
72866: EMPTY
72867: LIST
72868: LIST
72869: PUSH
72870: LD_INT 1
72872: NEG
72873: PUSH
72874: LD_INT 2
72876: PUSH
72877: EMPTY
72878: LIST
72879: LIST
72880: PUSH
72881: LD_INT 2
72883: NEG
72884: PUSH
72885: LD_INT 1
72887: PUSH
72888: EMPTY
72889: LIST
72890: LIST
72891: PUSH
72892: EMPTY
72893: LIST
72894: LIST
72895: LIST
72896: LIST
72897: LIST
72898: LIST
72899: LIST
72900: LIST
72901: LIST
72902: LIST
72903: LIST
72904: LIST
72905: LIST
72906: LIST
72907: LIST
72908: LIST
72909: LIST
72910: LIST
72911: LIST
72912: LIST
72913: LIST
72914: LIST
72915: LIST
72916: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
72917: LD_ADDR_VAR 0 27
72921: PUSH
72922: LD_INT 0
72924: PUSH
72925: LD_INT 0
72927: PUSH
72928: EMPTY
72929: LIST
72930: LIST
72931: PUSH
72932: LD_INT 0
72934: PUSH
72935: LD_INT 1
72937: NEG
72938: PUSH
72939: EMPTY
72940: LIST
72941: LIST
72942: PUSH
72943: LD_INT 1
72945: PUSH
72946: LD_INT 0
72948: PUSH
72949: EMPTY
72950: LIST
72951: LIST
72952: PUSH
72953: LD_INT 1
72955: PUSH
72956: LD_INT 1
72958: PUSH
72959: EMPTY
72960: LIST
72961: LIST
72962: PUSH
72963: LD_INT 0
72965: PUSH
72966: LD_INT 1
72968: PUSH
72969: EMPTY
72970: LIST
72971: LIST
72972: PUSH
72973: LD_INT 1
72975: NEG
72976: PUSH
72977: LD_INT 0
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: PUSH
72984: LD_INT 1
72986: NEG
72987: PUSH
72988: LD_INT 1
72990: NEG
72991: PUSH
72992: EMPTY
72993: LIST
72994: LIST
72995: PUSH
72996: LD_INT 1
72998: NEG
72999: PUSH
73000: LD_INT 2
73002: NEG
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: PUSH
73008: LD_INT 0
73010: PUSH
73011: LD_INT 2
73013: NEG
73014: PUSH
73015: EMPTY
73016: LIST
73017: LIST
73018: PUSH
73019: LD_INT 1
73021: PUSH
73022: LD_INT 1
73024: NEG
73025: PUSH
73026: EMPTY
73027: LIST
73028: LIST
73029: PUSH
73030: LD_INT 2
73032: PUSH
73033: LD_INT 0
73035: PUSH
73036: EMPTY
73037: LIST
73038: LIST
73039: PUSH
73040: LD_INT 2
73042: PUSH
73043: LD_INT 1
73045: PUSH
73046: EMPTY
73047: LIST
73048: LIST
73049: PUSH
73050: LD_INT 2
73052: PUSH
73053: LD_INT 2
73055: PUSH
73056: EMPTY
73057: LIST
73058: LIST
73059: PUSH
73060: LD_INT 1
73062: PUSH
73063: LD_INT 2
73065: PUSH
73066: EMPTY
73067: LIST
73068: LIST
73069: PUSH
73070: LD_INT 0
73072: PUSH
73073: LD_INT 2
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: PUSH
73080: LD_INT 1
73082: NEG
73083: PUSH
73084: LD_INT 1
73086: PUSH
73087: EMPTY
73088: LIST
73089: LIST
73090: PUSH
73091: LD_INT 2
73093: NEG
73094: PUSH
73095: LD_INT 0
73097: PUSH
73098: EMPTY
73099: LIST
73100: LIST
73101: PUSH
73102: LD_INT 2
73104: NEG
73105: PUSH
73106: LD_INT 1
73108: NEG
73109: PUSH
73110: EMPTY
73111: LIST
73112: LIST
73113: PUSH
73114: LD_INT 2
73116: NEG
73117: PUSH
73118: LD_INT 2
73120: NEG
73121: PUSH
73122: EMPTY
73123: LIST
73124: LIST
73125: PUSH
73126: LD_INT 1
73128: NEG
73129: PUSH
73130: LD_INT 2
73132: PUSH
73133: EMPTY
73134: LIST
73135: LIST
73136: PUSH
73137: LD_INT 2
73139: NEG
73140: PUSH
73141: LD_INT 1
73143: PUSH
73144: EMPTY
73145: LIST
73146: LIST
73147: PUSH
73148: LD_INT 3
73150: NEG
73151: PUSH
73152: LD_INT 1
73154: NEG
73155: PUSH
73156: EMPTY
73157: LIST
73158: LIST
73159: PUSH
73160: LD_INT 3
73162: NEG
73163: PUSH
73164: LD_INT 2
73166: NEG
73167: PUSH
73168: EMPTY
73169: LIST
73170: LIST
73171: PUSH
73172: EMPTY
73173: LIST
73174: LIST
73175: LIST
73176: LIST
73177: LIST
73178: LIST
73179: LIST
73180: LIST
73181: LIST
73182: LIST
73183: LIST
73184: LIST
73185: LIST
73186: LIST
73187: LIST
73188: LIST
73189: LIST
73190: LIST
73191: LIST
73192: LIST
73193: LIST
73194: LIST
73195: LIST
73196: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
73197: LD_ADDR_VAR 0 28
73201: PUSH
73202: LD_INT 0
73204: PUSH
73205: LD_INT 0
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PUSH
73212: LD_INT 0
73214: PUSH
73215: LD_INT 1
73217: NEG
73218: PUSH
73219: EMPTY
73220: LIST
73221: LIST
73222: PUSH
73223: LD_INT 1
73225: PUSH
73226: LD_INT 0
73228: PUSH
73229: EMPTY
73230: LIST
73231: LIST
73232: PUSH
73233: LD_INT 1
73235: PUSH
73236: LD_INT 1
73238: PUSH
73239: EMPTY
73240: LIST
73241: LIST
73242: PUSH
73243: LD_INT 0
73245: PUSH
73246: LD_INT 1
73248: PUSH
73249: EMPTY
73250: LIST
73251: LIST
73252: PUSH
73253: LD_INT 1
73255: NEG
73256: PUSH
73257: LD_INT 0
73259: PUSH
73260: EMPTY
73261: LIST
73262: LIST
73263: PUSH
73264: LD_INT 1
73266: NEG
73267: PUSH
73268: LD_INT 1
73270: NEG
73271: PUSH
73272: EMPTY
73273: LIST
73274: LIST
73275: PUSH
73276: LD_INT 1
73278: NEG
73279: PUSH
73280: LD_INT 2
73282: NEG
73283: PUSH
73284: EMPTY
73285: LIST
73286: LIST
73287: PUSH
73288: LD_INT 0
73290: PUSH
73291: LD_INT 2
73293: NEG
73294: PUSH
73295: EMPTY
73296: LIST
73297: LIST
73298: PUSH
73299: LD_INT 1
73301: PUSH
73302: LD_INT 1
73304: NEG
73305: PUSH
73306: EMPTY
73307: LIST
73308: LIST
73309: PUSH
73310: LD_INT 2
73312: PUSH
73313: LD_INT 0
73315: PUSH
73316: EMPTY
73317: LIST
73318: LIST
73319: PUSH
73320: LD_INT 2
73322: PUSH
73323: LD_INT 1
73325: PUSH
73326: EMPTY
73327: LIST
73328: LIST
73329: PUSH
73330: LD_INT 2
73332: PUSH
73333: LD_INT 2
73335: PUSH
73336: EMPTY
73337: LIST
73338: LIST
73339: PUSH
73340: LD_INT 1
73342: PUSH
73343: LD_INT 2
73345: PUSH
73346: EMPTY
73347: LIST
73348: LIST
73349: PUSH
73350: LD_INT 0
73352: PUSH
73353: LD_INT 2
73355: PUSH
73356: EMPTY
73357: LIST
73358: LIST
73359: PUSH
73360: LD_INT 1
73362: NEG
73363: PUSH
73364: LD_INT 1
73366: PUSH
73367: EMPTY
73368: LIST
73369: LIST
73370: PUSH
73371: LD_INT 2
73373: NEG
73374: PUSH
73375: LD_INT 0
73377: PUSH
73378: EMPTY
73379: LIST
73380: LIST
73381: PUSH
73382: LD_INT 2
73384: NEG
73385: PUSH
73386: LD_INT 1
73388: NEG
73389: PUSH
73390: EMPTY
73391: LIST
73392: LIST
73393: PUSH
73394: LD_INT 2
73396: NEG
73397: PUSH
73398: LD_INT 2
73400: NEG
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: PUSH
73406: LD_INT 2
73408: NEG
73409: PUSH
73410: LD_INT 3
73412: NEG
73413: PUSH
73414: EMPTY
73415: LIST
73416: LIST
73417: PUSH
73418: LD_INT 1
73420: NEG
73421: PUSH
73422: LD_INT 3
73424: NEG
73425: PUSH
73426: EMPTY
73427: LIST
73428: LIST
73429: PUSH
73430: LD_INT 3
73432: NEG
73433: PUSH
73434: LD_INT 1
73436: NEG
73437: PUSH
73438: EMPTY
73439: LIST
73440: LIST
73441: PUSH
73442: LD_INT 3
73444: NEG
73445: PUSH
73446: LD_INT 2
73448: NEG
73449: PUSH
73450: EMPTY
73451: LIST
73452: LIST
73453: PUSH
73454: EMPTY
73455: LIST
73456: LIST
73457: LIST
73458: LIST
73459: LIST
73460: LIST
73461: LIST
73462: LIST
73463: LIST
73464: LIST
73465: LIST
73466: LIST
73467: LIST
73468: LIST
73469: LIST
73470: LIST
73471: LIST
73472: LIST
73473: LIST
73474: LIST
73475: LIST
73476: LIST
73477: LIST
73478: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
73479: LD_ADDR_VAR 0 29
73483: PUSH
73484: LD_INT 0
73486: PUSH
73487: LD_INT 0
73489: PUSH
73490: EMPTY
73491: LIST
73492: LIST
73493: PUSH
73494: LD_INT 0
73496: PUSH
73497: LD_INT 1
73499: NEG
73500: PUSH
73501: EMPTY
73502: LIST
73503: LIST
73504: PUSH
73505: LD_INT 1
73507: PUSH
73508: LD_INT 0
73510: PUSH
73511: EMPTY
73512: LIST
73513: LIST
73514: PUSH
73515: LD_INT 1
73517: PUSH
73518: LD_INT 1
73520: PUSH
73521: EMPTY
73522: LIST
73523: LIST
73524: PUSH
73525: LD_INT 0
73527: PUSH
73528: LD_INT 1
73530: PUSH
73531: EMPTY
73532: LIST
73533: LIST
73534: PUSH
73535: LD_INT 1
73537: NEG
73538: PUSH
73539: LD_INT 0
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: PUSH
73546: LD_INT 1
73548: NEG
73549: PUSH
73550: LD_INT 1
73552: NEG
73553: PUSH
73554: EMPTY
73555: LIST
73556: LIST
73557: PUSH
73558: LD_INT 1
73560: NEG
73561: PUSH
73562: LD_INT 2
73564: NEG
73565: PUSH
73566: EMPTY
73567: LIST
73568: LIST
73569: PUSH
73570: LD_INT 0
73572: PUSH
73573: LD_INT 2
73575: NEG
73576: PUSH
73577: EMPTY
73578: LIST
73579: LIST
73580: PUSH
73581: LD_INT 1
73583: PUSH
73584: LD_INT 1
73586: NEG
73587: PUSH
73588: EMPTY
73589: LIST
73590: LIST
73591: PUSH
73592: LD_INT 2
73594: PUSH
73595: LD_INT 0
73597: PUSH
73598: EMPTY
73599: LIST
73600: LIST
73601: PUSH
73602: LD_INT 2
73604: PUSH
73605: LD_INT 1
73607: PUSH
73608: EMPTY
73609: LIST
73610: LIST
73611: PUSH
73612: LD_INT 1
73614: PUSH
73615: LD_INT 2
73617: PUSH
73618: EMPTY
73619: LIST
73620: LIST
73621: PUSH
73622: LD_INT 0
73624: PUSH
73625: LD_INT 2
73627: PUSH
73628: EMPTY
73629: LIST
73630: LIST
73631: PUSH
73632: LD_INT 1
73634: NEG
73635: PUSH
73636: LD_INT 1
73638: PUSH
73639: EMPTY
73640: LIST
73641: LIST
73642: PUSH
73643: LD_INT 2
73645: NEG
73646: PUSH
73647: LD_INT 1
73649: NEG
73650: PUSH
73651: EMPTY
73652: LIST
73653: LIST
73654: PUSH
73655: LD_INT 2
73657: NEG
73658: PUSH
73659: LD_INT 2
73661: NEG
73662: PUSH
73663: EMPTY
73664: LIST
73665: LIST
73666: PUSH
73667: LD_INT 2
73669: NEG
73670: PUSH
73671: LD_INT 3
73673: NEG
73674: PUSH
73675: EMPTY
73676: LIST
73677: LIST
73678: PUSH
73679: LD_INT 2
73681: PUSH
73682: LD_INT 1
73684: NEG
73685: PUSH
73686: EMPTY
73687: LIST
73688: LIST
73689: PUSH
73690: LD_INT 3
73692: PUSH
73693: LD_INT 1
73695: PUSH
73696: EMPTY
73697: LIST
73698: LIST
73699: PUSH
73700: LD_INT 1
73702: PUSH
73703: LD_INT 3
73705: PUSH
73706: EMPTY
73707: LIST
73708: LIST
73709: PUSH
73710: LD_INT 1
73712: NEG
73713: PUSH
73714: LD_INT 2
73716: PUSH
73717: EMPTY
73718: LIST
73719: LIST
73720: PUSH
73721: LD_INT 3
73723: NEG
73724: PUSH
73725: LD_INT 2
73727: NEG
73728: PUSH
73729: EMPTY
73730: LIST
73731: LIST
73732: PUSH
73733: EMPTY
73734: LIST
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: LIST
73740: LIST
73741: LIST
73742: LIST
73743: LIST
73744: LIST
73745: LIST
73746: LIST
73747: LIST
73748: LIST
73749: LIST
73750: LIST
73751: LIST
73752: LIST
73753: LIST
73754: LIST
73755: LIST
73756: LIST
73757: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
73758: LD_ADDR_VAR 0 30
73762: PUSH
73763: LD_INT 0
73765: PUSH
73766: LD_INT 0
73768: PUSH
73769: EMPTY
73770: LIST
73771: LIST
73772: PUSH
73773: LD_INT 0
73775: PUSH
73776: LD_INT 1
73778: NEG
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: PUSH
73784: LD_INT 1
73786: PUSH
73787: LD_INT 0
73789: PUSH
73790: EMPTY
73791: LIST
73792: LIST
73793: PUSH
73794: LD_INT 1
73796: PUSH
73797: LD_INT 1
73799: PUSH
73800: EMPTY
73801: LIST
73802: LIST
73803: PUSH
73804: LD_INT 0
73806: PUSH
73807: LD_INT 1
73809: PUSH
73810: EMPTY
73811: LIST
73812: LIST
73813: PUSH
73814: LD_INT 1
73816: NEG
73817: PUSH
73818: LD_INT 0
73820: PUSH
73821: EMPTY
73822: LIST
73823: LIST
73824: PUSH
73825: LD_INT 1
73827: NEG
73828: PUSH
73829: LD_INT 1
73831: NEG
73832: PUSH
73833: EMPTY
73834: LIST
73835: LIST
73836: PUSH
73837: LD_INT 1
73839: NEG
73840: PUSH
73841: LD_INT 2
73843: NEG
73844: PUSH
73845: EMPTY
73846: LIST
73847: LIST
73848: PUSH
73849: LD_INT 0
73851: PUSH
73852: LD_INT 2
73854: NEG
73855: PUSH
73856: EMPTY
73857: LIST
73858: LIST
73859: PUSH
73860: LD_INT 1
73862: PUSH
73863: LD_INT 1
73865: NEG
73866: PUSH
73867: EMPTY
73868: LIST
73869: LIST
73870: PUSH
73871: LD_INT 2
73873: PUSH
73874: LD_INT 0
73876: PUSH
73877: EMPTY
73878: LIST
73879: LIST
73880: PUSH
73881: LD_INT 2
73883: PUSH
73884: LD_INT 1
73886: PUSH
73887: EMPTY
73888: LIST
73889: LIST
73890: PUSH
73891: LD_INT 2
73893: PUSH
73894: LD_INT 2
73896: PUSH
73897: EMPTY
73898: LIST
73899: LIST
73900: PUSH
73901: LD_INT 1
73903: PUSH
73904: LD_INT 2
73906: PUSH
73907: EMPTY
73908: LIST
73909: LIST
73910: PUSH
73911: LD_INT 1
73913: NEG
73914: PUSH
73915: LD_INT 1
73917: PUSH
73918: EMPTY
73919: LIST
73920: LIST
73921: PUSH
73922: LD_INT 2
73924: NEG
73925: PUSH
73926: LD_INT 0
73928: PUSH
73929: EMPTY
73930: LIST
73931: LIST
73932: PUSH
73933: LD_INT 2
73935: NEG
73936: PUSH
73937: LD_INT 1
73939: NEG
73940: PUSH
73941: EMPTY
73942: LIST
73943: LIST
73944: PUSH
73945: LD_INT 1
73947: NEG
73948: PUSH
73949: LD_INT 3
73951: NEG
73952: PUSH
73953: EMPTY
73954: LIST
73955: LIST
73956: PUSH
73957: LD_INT 1
73959: PUSH
73960: LD_INT 2
73962: NEG
73963: PUSH
73964: EMPTY
73965: LIST
73966: LIST
73967: PUSH
73968: LD_INT 3
73970: PUSH
73971: LD_INT 2
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: PUSH
73978: LD_INT 2
73980: PUSH
73981: LD_INT 3
73983: PUSH
73984: EMPTY
73985: LIST
73986: LIST
73987: PUSH
73988: LD_INT 2
73990: NEG
73991: PUSH
73992: LD_INT 1
73994: PUSH
73995: EMPTY
73996: LIST
73997: LIST
73998: PUSH
73999: LD_INT 3
74001: NEG
74002: PUSH
74003: LD_INT 1
74005: NEG
74006: PUSH
74007: EMPTY
74008: LIST
74009: LIST
74010: PUSH
74011: EMPTY
74012: LIST
74013: LIST
74014: LIST
74015: LIST
74016: LIST
74017: LIST
74018: LIST
74019: LIST
74020: LIST
74021: LIST
74022: LIST
74023: LIST
74024: LIST
74025: LIST
74026: LIST
74027: LIST
74028: LIST
74029: LIST
74030: LIST
74031: LIST
74032: LIST
74033: LIST
74034: LIST
74035: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
74036: LD_ADDR_VAR 0 31
74040: PUSH
74041: LD_INT 0
74043: PUSH
74044: LD_INT 0
74046: PUSH
74047: EMPTY
74048: LIST
74049: LIST
74050: PUSH
74051: LD_INT 0
74053: PUSH
74054: LD_INT 1
74056: NEG
74057: PUSH
74058: EMPTY
74059: LIST
74060: LIST
74061: PUSH
74062: LD_INT 1
74064: PUSH
74065: LD_INT 0
74067: PUSH
74068: EMPTY
74069: LIST
74070: LIST
74071: PUSH
74072: LD_INT 1
74074: PUSH
74075: LD_INT 1
74077: PUSH
74078: EMPTY
74079: LIST
74080: LIST
74081: PUSH
74082: LD_INT 0
74084: PUSH
74085: LD_INT 1
74087: PUSH
74088: EMPTY
74089: LIST
74090: LIST
74091: PUSH
74092: LD_INT 1
74094: NEG
74095: PUSH
74096: LD_INT 0
74098: PUSH
74099: EMPTY
74100: LIST
74101: LIST
74102: PUSH
74103: LD_INT 1
74105: NEG
74106: PUSH
74107: LD_INT 1
74109: NEG
74110: PUSH
74111: EMPTY
74112: LIST
74113: LIST
74114: PUSH
74115: LD_INT 1
74117: NEG
74118: PUSH
74119: LD_INT 2
74121: NEG
74122: PUSH
74123: EMPTY
74124: LIST
74125: LIST
74126: PUSH
74127: LD_INT 1
74129: PUSH
74130: LD_INT 1
74132: NEG
74133: PUSH
74134: EMPTY
74135: LIST
74136: LIST
74137: PUSH
74138: LD_INT 2
74140: PUSH
74141: LD_INT 0
74143: PUSH
74144: EMPTY
74145: LIST
74146: LIST
74147: PUSH
74148: LD_INT 2
74150: PUSH
74151: LD_INT 1
74153: PUSH
74154: EMPTY
74155: LIST
74156: LIST
74157: PUSH
74158: LD_INT 2
74160: PUSH
74161: LD_INT 2
74163: PUSH
74164: EMPTY
74165: LIST
74166: LIST
74167: PUSH
74168: LD_INT 1
74170: PUSH
74171: LD_INT 2
74173: PUSH
74174: EMPTY
74175: LIST
74176: LIST
74177: PUSH
74178: LD_INT 0
74180: PUSH
74181: LD_INT 2
74183: PUSH
74184: EMPTY
74185: LIST
74186: LIST
74187: PUSH
74188: LD_INT 1
74190: NEG
74191: PUSH
74192: LD_INT 1
74194: PUSH
74195: EMPTY
74196: LIST
74197: LIST
74198: PUSH
74199: LD_INT 2
74201: NEG
74202: PUSH
74203: LD_INT 1
74205: NEG
74206: PUSH
74207: EMPTY
74208: LIST
74209: LIST
74210: PUSH
74211: LD_INT 2
74213: NEG
74214: PUSH
74215: LD_INT 2
74217: NEG
74218: PUSH
74219: EMPTY
74220: LIST
74221: LIST
74222: PUSH
74223: LD_INT 2
74225: NEG
74226: PUSH
74227: LD_INT 3
74229: NEG
74230: PUSH
74231: EMPTY
74232: LIST
74233: LIST
74234: PUSH
74235: LD_INT 2
74237: PUSH
74238: LD_INT 1
74240: NEG
74241: PUSH
74242: EMPTY
74243: LIST
74244: LIST
74245: PUSH
74246: LD_INT 3
74248: PUSH
74249: LD_INT 1
74251: PUSH
74252: EMPTY
74253: LIST
74254: LIST
74255: PUSH
74256: LD_INT 1
74258: PUSH
74259: LD_INT 3
74261: PUSH
74262: EMPTY
74263: LIST
74264: LIST
74265: PUSH
74266: LD_INT 1
74268: NEG
74269: PUSH
74270: LD_INT 2
74272: PUSH
74273: EMPTY
74274: LIST
74275: LIST
74276: PUSH
74277: LD_INT 3
74279: NEG
74280: PUSH
74281: LD_INT 2
74283: NEG
74284: PUSH
74285: EMPTY
74286: LIST
74287: LIST
74288: PUSH
74289: EMPTY
74290: LIST
74291: LIST
74292: LIST
74293: LIST
74294: LIST
74295: LIST
74296: LIST
74297: LIST
74298: LIST
74299: LIST
74300: LIST
74301: LIST
74302: LIST
74303: LIST
74304: LIST
74305: LIST
74306: LIST
74307: LIST
74308: LIST
74309: LIST
74310: LIST
74311: LIST
74312: LIST
74313: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74314: LD_ADDR_VAR 0 32
74318: PUSH
74319: LD_INT 0
74321: PUSH
74322: LD_INT 0
74324: PUSH
74325: EMPTY
74326: LIST
74327: LIST
74328: PUSH
74329: LD_INT 0
74331: PUSH
74332: LD_INT 1
74334: NEG
74335: PUSH
74336: EMPTY
74337: LIST
74338: LIST
74339: PUSH
74340: LD_INT 1
74342: PUSH
74343: LD_INT 0
74345: PUSH
74346: EMPTY
74347: LIST
74348: LIST
74349: PUSH
74350: LD_INT 1
74352: PUSH
74353: LD_INT 1
74355: PUSH
74356: EMPTY
74357: LIST
74358: LIST
74359: PUSH
74360: LD_INT 0
74362: PUSH
74363: LD_INT 1
74365: PUSH
74366: EMPTY
74367: LIST
74368: LIST
74369: PUSH
74370: LD_INT 1
74372: NEG
74373: PUSH
74374: LD_INT 0
74376: PUSH
74377: EMPTY
74378: LIST
74379: LIST
74380: PUSH
74381: LD_INT 1
74383: NEG
74384: PUSH
74385: LD_INT 1
74387: NEG
74388: PUSH
74389: EMPTY
74390: LIST
74391: LIST
74392: PUSH
74393: LD_INT 1
74395: NEG
74396: PUSH
74397: LD_INT 2
74399: NEG
74400: PUSH
74401: EMPTY
74402: LIST
74403: LIST
74404: PUSH
74405: LD_INT 0
74407: PUSH
74408: LD_INT 2
74410: NEG
74411: PUSH
74412: EMPTY
74413: LIST
74414: LIST
74415: PUSH
74416: LD_INT 1
74418: PUSH
74419: LD_INT 1
74421: NEG
74422: PUSH
74423: EMPTY
74424: LIST
74425: LIST
74426: PUSH
74427: LD_INT 2
74429: PUSH
74430: LD_INT 1
74432: PUSH
74433: EMPTY
74434: LIST
74435: LIST
74436: PUSH
74437: LD_INT 2
74439: PUSH
74440: LD_INT 2
74442: PUSH
74443: EMPTY
74444: LIST
74445: LIST
74446: PUSH
74447: LD_INT 1
74449: PUSH
74450: LD_INT 2
74452: PUSH
74453: EMPTY
74454: LIST
74455: LIST
74456: PUSH
74457: LD_INT 0
74459: PUSH
74460: LD_INT 2
74462: PUSH
74463: EMPTY
74464: LIST
74465: LIST
74466: PUSH
74467: LD_INT 1
74469: NEG
74470: PUSH
74471: LD_INT 1
74473: PUSH
74474: EMPTY
74475: LIST
74476: LIST
74477: PUSH
74478: LD_INT 2
74480: NEG
74481: PUSH
74482: LD_INT 0
74484: PUSH
74485: EMPTY
74486: LIST
74487: LIST
74488: PUSH
74489: LD_INT 2
74491: NEG
74492: PUSH
74493: LD_INT 1
74495: NEG
74496: PUSH
74497: EMPTY
74498: LIST
74499: LIST
74500: PUSH
74501: LD_INT 1
74503: NEG
74504: PUSH
74505: LD_INT 3
74507: NEG
74508: PUSH
74509: EMPTY
74510: LIST
74511: LIST
74512: PUSH
74513: LD_INT 1
74515: PUSH
74516: LD_INT 2
74518: NEG
74519: PUSH
74520: EMPTY
74521: LIST
74522: LIST
74523: PUSH
74524: LD_INT 3
74526: PUSH
74527: LD_INT 2
74529: PUSH
74530: EMPTY
74531: LIST
74532: LIST
74533: PUSH
74534: LD_INT 2
74536: PUSH
74537: LD_INT 3
74539: PUSH
74540: EMPTY
74541: LIST
74542: LIST
74543: PUSH
74544: LD_INT 2
74546: NEG
74547: PUSH
74548: LD_INT 1
74550: PUSH
74551: EMPTY
74552: LIST
74553: LIST
74554: PUSH
74555: LD_INT 3
74557: NEG
74558: PUSH
74559: LD_INT 1
74561: NEG
74562: PUSH
74563: EMPTY
74564: LIST
74565: LIST
74566: PUSH
74567: EMPTY
74568: LIST
74569: LIST
74570: LIST
74571: LIST
74572: LIST
74573: LIST
74574: LIST
74575: LIST
74576: LIST
74577: LIST
74578: LIST
74579: LIST
74580: LIST
74581: LIST
74582: LIST
74583: LIST
74584: LIST
74585: LIST
74586: LIST
74587: LIST
74588: LIST
74589: LIST
74590: LIST
74591: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
74592: LD_ADDR_VAR 0 33
74596: PUSH
74597: LD_INT 0
74599: PUSH
74600: LD_INT 0
74602: PUSH
74603: EMPTY
74604: LIST
74605: LIST
74606: PUSH
74607: LD_INT 0
74609: PUSH
74610: LD_INT 1
74612: NEG
74613: PUSH
74614: EMPTY
74615: LIST
74616: LIST
74617: PUSH
74618: LD_INT 1
74620: PUSH
74621: LD_INT 0
74623: PUSH
74624: EMPTY
74625: LIST
74626: LIST
74627: PUSH
74628: LD_INT 1
74630: PUSH
74631: LD_INT 1
74633: PUSH
74634: EMPTY
74635: LIST
74636: LIST
74637: PUSH
74638: LD_INT 0
74640: PUSH
74641: LD_INT 1
74643: PUSH
74644: EMPTY
74645: LIST
74646: LIST
74647: PUSH
74648: LD_INT 1
74650: NEG
74651: PUSH
74652: LD_INT 0
74654: PUSH
74655: EMPTY
74656: LIST
74657: LIST
74658: PUSH
74659: LD_INT 1
74661: NEG
74662: PUSH
74663: LD_INT 1
74665: NEG
74666: PUSH
74667: EMPTY
74668: LIST
74669: LIST
74670: PUSH
74671: LD_INT 1
74673: NEG
74674: PUSH
74675: LD_INT 2
74677: NEG
74678: PUSH
74679: EMPTY
74680: LIST
74681: LIST
74682: PUSH
74683: LD_INT 1
74685: PUSH
74686: LD_INT 1
74688: NEG
74689: PUSH
74690: EMPTY
74691: LIST
74692: LIST
74693: PUSH
74694: LD_INT 2
74696: PUSH
74697: LD_INT 0
74699: PUSH
74700: EMPTY
74701: LIST
74702: LIST
74703: PUSH
74704: LD_INT 2
74706: PUSH
74707: LD_INT 1
74709: PUSH
74710: EMPTY
74711: LIST
74712: LIST
74713: PUSH
74714: LD_INT 1
74716: PUSH
74717: LD_INT 2
74719: PUSH
74720: EMPTY
74721: LIST
74722: LIST
74723: PUSH
74724: LD_INT 0
74726: PUSH
74727: LD_INT 2
74729: PUSH
74730: EMPTY
74731: LIST
74732: LIST
74733: PUSH
74734: LD_INT 1
74736: NEG
74737: PUSH
74738: LD_INT 1
74740: PUSH
74741: EMPTY
74742: LIST
74743: LIST
74744: PUSH
74745: LD_INT 2
74747: NEG
74748: PUSH
74749: LD_INT 0
74751: PUSH
74752: EMPTY
74753: LIST
74754: LIST
74755: PUSH
74756: LD_INT 2
74758: NEG
74759: PUSH
74760: LD_INT 1
74762: NEG
74763: PUSH
74764: EMPTY
74765: LIST
74766: LIST
74767: PUSH
74768: LD_INT 2
74770: NEG
74771: PUSH
74772: LD_INT 2
74774: NEG
74775: PUSH
74776: EMPTY
74777: LIST
74778: LIST
74779: PUSH
74780: LD_INT 2
74782: NEG
74783: PUSH
74784: LD_INT 3
74786: NEG
74787: PUSH
74788: EMPTY
74789: LIST
74790: LIST
74791: PUSH
74792: LD_INT 2
74794: PUSH
74795: LD_INT 1
74797: NEG
74798: PUSH
74799: EMPTY
74800: LIST
74801: LIST
74802: PUSH
74803: LD_INT 3
74805: PUSH
74806: LD_INT 1
74808: PUSH
74809: EMPTY
74810: LIST
74811: LIST
74812: PUSH
74813: LD_INT 1
74815: PUSH
74816: LD_INT 3
74818: PUSH
74819: EMPTY
74820: LIST
74821: LIST
74822: PUSH
74823: LD_INT 1
74825: NEG
74826: PUSH
74827: LD_INT 2
74829: PUSH
74830: EMPTY
74831: LIST
74832: LIST
74833: PUSH
74834: LD_INT 3
74836: NEG
74837: PUSH
74838: LD_INT 2
74840: NEG
74841: PUSH
74842: EMPTY
74843: LIST
74844: LIST
74845: PUSH
74846: EMPTY
74847: LIST
74848: LIST
74849: LIST
74850: LIST
74851: LIST
74852: LIST
74853: LIST
74854: LIST
74855: LIST
74856: LIST
74857: LIST
74858: LIST
74859: LIST
74860: LIST
74861: LIST
74862: LIST
74863: LIST
74864: LIST
74865: LIST
74866: LIST
74867: LIST
74868: LIST
74869: LIST
74870: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
74871: LD_ADDR_VAR 0 34
74875: PUSH
74876: LD_INT 0
74878: PUSH
74879: LD_INT 0
74881: PUSH
74882: EMPTY
74883: LIST
74884: LIST
74885: PUSH
74886: LD_INT 0
74888: PUSH
74889: LD_INT 1
74891: NEG
74892: PUSH
74893: EMPTY
74894: LIST
74895: LIST
74896: PUSH
74897: LD_INT 1
74899: PUSH
74900: LD_INT 0
74902: PUSH
74903: EMPTY
74904: LIST
74905: LIST
74906: PUSH
74907: LD_INT 1
74909: PUSH
74910: LD_INT 1
74912: PUSH
74913: EMPTY
74914: LIST
74915: LIST
74916: PUSH
74917: LD_INT 0
74919: PUSH
74920: LD_INT 1
74922: PUSH
74923: EMPTY
74924: LIST
74925: LIST
74926: PUSH
74927: LD_INT 1
74929: NEG
74930: PUSH
74931: LD_INT 0
74933: PUSH
74934: EMPTY
74935: LIST
74936: LIST
74937: PUSH
74938: LD_INT 1
74940: NEG
74941: PUSH
74942: LD_INT 1
74944: NEG
74945: PUSH
74946: EMPTY
74947: LIST
74948: LIST
74949: PUSH
74950: LD_INT 1
74952: NEG
74953: PUSH
74954: LD_INT 2
74956: NEG
74957: PUSH
74958: EMPTY
74959: LIST
74960: LIST
74961: PUSH
74962: LD_INT 0
74964: PUSH
74965: LD_INT 2
74967: NEG
74968: PUSH
74969: EMPTY
74970: LIST
74971: LIST
74972: PUSH
74973: LD_INT 1
74975: PUSH
74976: LD_INT 1
74978: NEG
74979: PUSH
74980: EMPTY
74981: LIST
74982: LIST
74983: PUSH
74984: LD_INT 2
74986: PUSH
74987: LD_INT 1
74989: PUSH
74990: EMPTY
74991: LIST
74992: LIST
74993: PUSH
74994: LD_INT 2
74996: PUSH
74997: LD_INT 2
74999: PUSH
75000: EMPTY
75001: LIST
75002: LIST
75003: PUSH
75004: LD_INT 1
75006: PUSH
75007: LD_INT 2
75009: PUSH
75010: EMPTY
75011: LIST
75012: LIST
75013: PUSH
75014: LD_INT 1
75016: NEG
75017: PUSH
75018: LD_INT 1
75020: PUSH
75021: EMPTY
75022: LIST
75023: LIST
75024: PUSH
75025: LD_INT 2
75027: NEG
75028: PUSH
75029: LD_INT 0
75031: PUSH
75032: EMPTY
75033: LIST
75034: LIST
75035: PUSH
75036: LD_INT 2
75038: NEG
75039: PUSH
75040: LD_INT 1
75042: NEG
75043: PUSH
75044: EMPTY
75045: LIST
75046: LIST
75047: PUSH
75048: LD_INT 2
75050: NEG
75051: PUSH
75052: LD_INT 2
75054: NEG
75055: PUSH
75056: EMPTY
75057: LIST
75058: LIST
75059: PUSH
75060: LD_INT 1
75062: NEG
75063: PUSH
75064: LD_INT 3
75066: NEG
75067: PUSH
75068: EMPTY
75069: LIST
75070: LIST
75071: PUSH
75072: LD_INT 1
75074: PUSH
75075: LD_INT 2
75077: NEG
75078: PUSH
75079: EMPTY
75080: LIST
75081: LIST
75082: PUSH
75083: LD_INT 3
75085: PUSH
75086: LD_INT 2
75088: PUSH
75089: EMPTY
75090: LIST
75091: LIST
75092: PUSH
75093: LD_INT 2
75095: PUSH
75096: LD_INT 3
75098: PUSH
75099: EMPTY
75100: LIST
75101: LIST
75102: PUSH
75103: LD_INT 2
75105: NEG
75106: PUSH
75107: LD_INT 1
75109: PUSH
75110: EMPTY
75111: LIST
75112: LIST
75113: PUSH
75114: LD_INT 3
75116: NEG
75117: PUSH
75118: LD_INT 1
75120: NEG
75121: PUSH
75122: EMPTY
75123: LIST
75124: LIST
75125: PUSH
75126: EMPTY
75127: LIST
75128: LIST
75129: LIST
75130: LIST
75131: LIST
75132: LIST
75133: LIST
75134: LIST
75135: LIST
75136: LIST
75137: LIST
75138: LIST
75139: LIST
75140: LIST
75141: LIST
75142: LIST
75143: LIST
75144: LIST
75145: LIST
75146: LIST
75147: LIST
75148: LIST
75149: LIST
75150: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
75151: LD_ADDR_VAR 0 35
75155: PUSH
75156: LD_INT 0
75158: PUSH
75159: LD_INT 0
75161: PUSH
75162: EMPTY
75163: LIST
75164: LIST
75165: PUSH
75166: LD_INT 0
75168: PUSH
75169: LD_INT 1
75171: NEG
75172: PUSH
75173: EMPTY
75174: LIST
75175: LIST
75176: PUSH
75177: LD_INT 1
75179: PUSH
75180: LD_INT 0
75182: PUSH
75183: EMPTY
75184: LIST
75185: LIST
75186: PUSH
75187: LD_INT 1
75189: PUSH
75190: LD_INT 1
75192: PUSH
75193: EMPTY
75194: LIST
75195: LIST
75196: PUSH
75197: LD_INT 0
75199: PUSH
75200: LD_INT 1
75202: PUSH
75203: EMPTY
75204: LIST
75205: LIST
75206: PUSH
75207: LD_INT 1
75209: NEG
75210: PUSH
75211: LD_INT 0
75213: PUSH
75214: EMPTY
75215: LIST
75216: LIST
75217: PUSH
75218: LD_INT 1
75220: NEG
75221: PUSH
75222: LD_INT 1
75224: NEG
75225: PUSH
75226: EMPTY
75227: LIST
75228: LIST
75229: PUSH
75230: LD_INT 2
75232: PUSH
75233: LD_INT 1
75235: PUSH
75236: EMPTY
75237: LIST
75238: LIST
75239: PUSH
75240: LD_INT 2
75242: NEG
75243: PUSH
75244: LD_INT 1
75246: NEG
75247: PUSH
75248: EMPTY
75249: LIST
75250: LIST
75251: PUSH
75252: EMPTY
75253: LIST
75254: LIST
75255: LIST
75256: LIST
75257: LIST
75258: LIST
75259: LIST
75260: LIST
75261: LIST
75262: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
75263: LD_ADDR_VAR 0 36
75267: PUSH
75268: LD_INT 0
75270: PUSH
75271: LD_INT 0
75273: PUSH
75274: EMPTY
75275: LIST
75276: LIST
75277: PUSH
75278: LD_INT 0
75280: PUSH
75281: LD_INT 1
75283: NEG
75284: PUSH
75285: EMPTY
75286: LIST
75287: LIST
75288: PUSH
75289: LD_INT 1
75291: PUSH
75292: LD_INT 0
75294: PUSH
75295: EMPTY
75296: LIST
75297: LIST
75298: PUSH
75299: LD_INT 1
75301: PUSH
75302: LD_INT 1
75304: PUSH
75305: EMPTY
75306: LIST
75307: LIST
75308: PUSH
75309: LD_INT 0
75311: PUSH
75312: LD_INT 1
75314: PUSH
75315: EMPTY
75316: LIST
75317: LIST
75318: PUSH
75319: LD_INT 1
75321: NEG
75322: PUSH
75323: LD_INT 0
75325: PUSH
75326: EMPTY
75327: LIST
75328: LIST
75329: PUSH
75330: LD_INT 1
75332: NEG
75333: PUSH
75334: LD_INT 1
75336: NEG
75337: PUSH
75338: EMPTY
75339: LIST
75340: LIST
75341: PUSH
75342: LD_INT 1
75344: NEG
75345: PUSH
75346: LD_INT 2
75348: NEG
75349: PUSH
75350: EMPTY
75351: LIST
75352: LIST
75353: PUSH
75354: LD_INT 1
75356: PUSH
75357: LD_INT 2
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: PUSH
75364: EMPTY
75365: LIST
75366: LIST
75367: LIST
75368: LIST
75369: LIST
75370: LIST
75371: LIST
75372: LIST
75373: LIST
75374: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
75375: LD_ADDR_VAR 0 37
75379: PUSH
75380: LD_INT 0
75382: PUSH
75383: LD_INT 0
75385: PUSH
75386: EMPTY
75387: LIST
75388: LIST
75389: PUSH
75390: LD_INT 0
75392: PUSH
75393: LD_INT 1
75395: NEG
75396: PUSH
75397: EMPTY
75398: LIST
75399: LIST
75400: PUSH
75401: LD_INT 1
75403: PUSH
75404: LD_INT 0
75406: PUSH
75407: EMPTY
75408: LIST
75409: LIST
75410: PUSH
75411: LD_INT 1
75413: PUSH
75414: LD_INT 1
75416: PUSH
75417: EMPTY
75418: LIST
75419: LIST
75420: PUSH
75421: LD_INT 0
75423: PUSH
75424: LD_INT 1
75426: PUSH
75427: EMPTY
75428: LIST
75429: LIST
75430: PUSH
75431: LD_INT 1
75433: NEG
75434: PUSH
75435: LD_INT 0
75437: PUSH
75438: EMPTY
75439: LIST
75440: LIST
75441: PUSH
75442: LD_INT 1
75444: NEG
75445: PUSH
75446: LD_INT 1
75448: NEG
75449: PUSH
75450: EMPTY
75451: LIST
75452: LIST
75453: PUSH
75454: LD_INT 1
75456: PUSH
75457: LD_INT 1
75459: NEG
75460: PUSH
75461: EMPTY
75462: LIST
75463: LIST
75464: PUSH
75465: LD_INT 1
75467: NEG
75468: PUSH
75469: LD_INT 1
75471: PUSH
75472: EMPTY
75473: LIST
75474: LIST
75475: PUSH
75476: EMPTY
75477: LIST
75478: LIST
75479: LIST
75480: LIST
75481: LIST
75482: LIST
75483: LIST
75484: LIST
75485: LIST
75486: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
75487: LD_ADDR_VAR 0 38
75491: PUSH
75492: LD_INT 0
75494: PUSH
75495: LD_INT 0
75497: PUSH
75498: EMPTY
75499: LIST
75500: LIST
75501: PUSH
75502: LD_INT 0
75504: PUSH
75505: LD_INT 1
75507: NEG
75508: PUSH
75509: EMPTY
75510: LIST
75511: LIST
75512: PUSH
75513: LD_INT 1
75515: PUSH
75516: LD_INT 0
75518: PUSH
75519: EMPTY
75520: LIST
75521: LIST
75522: PUSH
75523: LD_INT 1
75525: PUSH
75526: LD_INT 1
75528: PUSH
75529: EMPTY
75530: LIST
75531: LIST
75532: PUSH
75533: LD_INT 0
75535: PUSH
75536: LD_INT 1
75538: PUSH
75539: EMPTY
75540: LIST
75541: LIST
75542: PUSH
75543: LD_INT 1
75545: NEG
75546: PUSH
75547: LD_INT 0
75549: PUSH
75550: EMPTY
75551: LIST
75552: LIST
75553: PUSH
75554: LD_INT 1
75556: NEG
75557: PUSH
75558: LD_INT 1
75560: NEG
75561: PUSH
75562: EMPTY
75563: LIST
75564: LIST
75565: PUSH
75566: LD_INT 2
75568: PUSH
75569: LD_INT 1
75571: PUSH
75572: EMPTY
75573: LIST
75574: LIST
75575: PUSH
75576: LD_INT 2
75578: NEG
75579: PUSH
75580: LD_INT 1
75582: NEG
75583: PUSH
75584: EMPTY
75585: LIST
75586: LIST
75587: PUSH
75588: EMPTY
75589: LIST
75590: LIST
75591: LIST
75592: LIST
75593: LIST
75594: LIST
75595: LIST
75596: LIST
75597: LIST
75598: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
75599: LD_ADDR_VAR 0 39
75603: PUSH
75604: LD_INT 0
75606: PUSH
75607: LD_INT 0
75609: PUSH
75610: EMPTY
75611: LIST
75612: LIST
75613: PUSH
75614: LD_INT 0
75616: PUSH
75617: LD_INT 1
75619: NEG
75620: PUSH
75621: EMPTY
75622: LIST
75623: LIST
75624: PUSH
75625: LD_INT 1
75627: PUSH
75628: LD_INT 0
75630: PUSH
75631: EMPTY
75632: LIST
75633: LIST
75634: PUSH
75635: LD_INT 1
75637: PUSH
75638: LD_INT 1
75640: PUSH
75641: EMPTY
75642: LIST
75643: LIST
75644: PUSH
75645: LD_INT 0
75647: PUSH
75648: LD_INT 1
75650: PUSH
75651: EMPTY
75652: LIST
75653: LIST
75654: PUSH
75655: LD_INT 1
75657: NEG
75658: PUSH
75659: LD_INT 0
75661: PUSH
75662: EMPTY
75663: LIST
75664: LIST
75665: PUSH
75666: LD_INT 1
75668: NEG
75669: PUSH
75670: LD_INT 1
75672: NEG
75673: PUSH
75674: EMPTY
75675: LIST
75676: LIST
75677: PUSH
75678: LD_INT 1
75680: NEG
75681: PUSH
75682: LD_INT 2
75684: NEG
75685: PUSH
75686: EMPTY
75687: LIST
75688: LIST
75689: PUSH
75690: LD_INT 1
75692: PUSH
75693: LD_INT 2
75695: PUSH
75696: EMPTY
75697: LIST
75698: LIST
75699: PUSH
75700: EMPTY
75701: LIST
75702: LIST
75703: LIST
75704: LIST
75705: LIST
75706: LIST
75707: LIST
75708: LIST
75709: LIST
75710: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
75711: LD_ADDR_VAR 0 40
75715: PUSH
75716: LD_INT 0
75718: PUSH
75719: LD_INT 0
75721: PUSH
75722: EMPTY
75723: LIST
75724: LIST
75725: PUSH
75726: LD_INT 0
75728: PUSH
75729: LD_INT 1
75731: NEG
75732: PUSH
75733: EMPTY
75734: LIST
75735: LIST
75736: PUSH
75737: LD_INT 1
75739: PUSH
75740: LD_INT 0
75742: PUSH
75743: EMPTY
75744: LIST
75745: LIST
75746: PUSH
75747: LD_INT 1
75749: PUSH
75750: LD_INT 1
75752: PUSH
75753: EMPTY
75754: LIST
75755: LIST
75756: PUSH
75757: LD_INT 0
75759: PUSH
75760: LD_INT 1
75762: PUSH
75763: EMPTY
75764: LIST
75765: LIST
75766: PUSH
75767: LD_INT 1
75769: NEG
75770: PUSH
75771: LD_INT 0
75773: PUSH
75774: EMPTY
75775: LIST
75776: LIST
75777: PUSH
75778: LD_INT 1
75780: NEG
75781: PUSH
75782: LD_INT 1
75784: NEG
75785: PUSH
75786: EMPTY
75787: LIST
75788: LIST
75789: PUSH
75790: LD_INT 1
75792: PUSH
75793: LD_INT 1
75795: NEG
75796: PUSH
75797: EMPTY
75798: LIST
75799: LIST
75800: PUSH
75801: LD_INT 1
75803: NEG
75804: PUSH
75805: LD_INT 1
75807: PUSH
75808: EMPTY
75809: LIST
75810: LIST
75811: PUSH
75812: EMPTY
75813: LIST
75814: LIST
75815: LIST
75816: LIST
75817: LIST
75818: LIST
75819: LIST
75820: LIST
75821: LIST
75822: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
75823: LD_ADDR_VAR 0 41
75827: PUSH
75828: LD_INT 0
75830: PUSH
75831: LD_INT 0
75833: PUSH
75834: EMPTY
75835: LIST
75836: LIST
75837: PUSH
75838: LD_INT 0
75840: PUSH
75841: LD_INT 1
75843: NEG
75844: PUSH
75845: EMPTY
75846: LIST
75847: LIST
75848: PUSH
75849: LD_INT 1
75851: PUSH
75852: LD_INT 0
75854: PUSH
75855: EMPTY
75856: LIST
75857: LIST
75858: PUSH
75859: LD_INT 1
75861: PUSH
75862: LD_INT 1
75864: PUSH
75865: EMPTY
75866: LIST
75867: LIST
75868: PUSH
75869: LD_INT 0
75871: PUSH
75872: LD_INT 1
75874: PUSH
75875: EMPTY
75876: LIST
75877: LIST
75878: PUSH
75879: LD_INT 1
75881: NEG
75882: PUSH
75883: LD_INT 0
75885: PUSH
75886: EMPTY
75887: LIST
75888: LIST
75889: PUSH
75890: LD_INT 1
75892: NEG
75893: PUSH
75894: LD_INT 1
75896: NEG
75897: PUSH
75898: EMPTY
75899: LIST
75900: LIST
75901: PUSH
75902: LD_INT 1
75904: NEG
75905: PUSH
75906: LD_INT 2
75908: NEG
75909: PUSH
75910: EMPTY
75911: LIST
75912: LIST
75913: PUSH
75914: LD_INT 1
75916: PUSH
75917: LD_INT 1
75919: NEG
75920: PUSH
75921: EMPTY
75922: LIST
75923: LIST
75924: PUSH
75925: LD_INT 2
75927: PUSH
75928: LD_INT 0
75930: PUSH
75931: EMPTY
75932: LIST
75933: LIST
75934: PUSH
75935: LD_INT 2
75937: PUSH
75938: LD_INT 1
75940: PUSH
75941: EMPTY
75942: LIST
75943: LIST
75944: PUSH
75945: LD_INT 2
75947: PUSH
75948: LD_INT 2
75950: PUSH
75951: EMPTY
75952: LIST
75953: LIST
75954: PUSH
75955: LD_INT 1
75957: PUSH
75958: LD_INT 2
75960: PUSH
75961: EMPTY
75962: LIST
75963: LIST
75964: PUSH
75965: LD_INT 1
75967: NEG
75968: PUSH
75969: LD_INT 1
75971: PUSH
75972: EMPTY
75973: LIST
75974: LIST
75975: PUSH
75976: LD_INT 2
75978: NEG
75979: PUSH
75980: LD_INT 0
75982: PUSH
75983: EMPTY
75984: LIST
75985: LIST
75986: PUSH
75987: LD_INT 2
75989: NEG
75990: PUSH
75991: LD_INT 1
75993: NEG
75994: PUSH
75995: EMPTY
75996: LIST
75997: LIST
75998: PUSH
75999: LD_INT 2
76001: NEG
76002: PUSH
76003: LD_INT 2
76005: NEG
76006: PUSH
76007: EMPTY
76008: LIST
76009: LIST
76010: PUSH
76011: LD_INT 2
76013: NEG
76014: PUSH
76015: LD_INT 3
76017: NEG
76018: PUSH
76019: EMPTY
76020: LIST
76021: LIST
76022: PUSH
76023: LD_INT 2
76025: PUSH
76026: LD_INT 1
76028: NEG
76029: PUSH
76030: EMPTY
76031: LIST
76032: LIST
76033: PUSH
76034: LD_INT 3
76036: PUSH
76037: LD_INT 0
76039: PUSH
76040: EMPTY
76041: LIST
76042: LIST
76043: PUSH
76044: LD_INT 3
76046: PUSH
76047: LD_INT 1
76049: PUSH
76050: EMPTY
76051: LIST
76052: LIST
76053: PUSH
76054: LD_INT 3
76056: PUSH
76057: LD_INT 2
76059: PUSH
76060: EMPTY
76061: LIST
76062: LIST
76063: PUSH
76064: LD_INT 3
76066: PUSH
76067: LD_INT 3
76069: PUSH
76070: EMPTY
76071: LIST
76072: LIST
76073: PUSH
76074: LD_INT 2
76076: PUSH
76077: LD_INT 3
76079: PUSH
76080: EMPTY
76081: LIST
76082: LIST
76083: PUSH
76084: LD_INT 2
76086: NEG
76087: PUSH
76088: LD_INT 1
76090: PUSH
76091: EMPTY
76092: LIST
76093: LIST
76094: PUSH
76095: LD_INT 3
76097: NEG
76098: PUSH
76099: LD_INT 0
76101: PUSH
76102: EMPTY
76103: LIST
76104: LIST
76105: PUSH
76106: LD_INT 3
76108: NEG
76109: PUSH
76110: LD_INT 1
76112: NEG
76113: PUSH
76114: EMPTY
76115: LIST
76116: LIST
76117: PUSH
76118: LD_INT 3
76120: NEG
76121: PUSH
76122: LD_INT 2
76124: NEG
76125: PUSH
76126: EMPTY
76127: LIST
76128: LIST
76129: PUSH
76130: LD_INT 3
76132: NEG
76133: PUSH
76134: LD_INT 3
76136: NEG
76137: PUSH
76138: EMPTY
76139: LIST
76140: LIST
76141: PUSH
76142: EMPTY
76143: LIST
76144: LIST
76145: LIST
76146: LIST
76147: LIST
76148: LIST
76149: LIST
76150: LIST
76151: LIST
76152: LIST
76153: LIST
76154: LIST
76155: LIST
76156: LIST
76157: LIST
76158: LIST
76159: LIST
76160: LIST
76161: LIST
76162: LIST
76163: LIST
76164: LIST
76165: LIST
76166: LIST
76167: LIST
76168: LIST
76169: LIST
76170: LIST
76171: LIST
76172: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76173: LD_ADDR_VAR 0 42
76177: PUSH
76178: LD_INT 0
76180: PUSH
76181: LD_INT 0
76183: PUSH
76184: EMPTY
76185: LIST
76186: LIST
76187: PUSH
76188: LD_INT 0
76190: PUSH
76191: LD_INT 1
76193: NEG
76194: PUSH
76195: EMPTY
76196: LIST
76197: LIST
76198: PUSH
76199: LD_INT 1
76201: PUSH
76202: LD_INT 0
76204: PUSH
76205: EMPTY
76206: LIST
76207: LIST
76208: PUSH
76209: LD_INT 1
76211: PUSH
76212: LD_INT 1
76214: PUSH
76215: EMPTY
76216: LIST
76217: LIST
76218: PUSH
76219: LD_INT 0
76221: PUSH
76222: LD_INT 1
76224: PUSH
76225: EMPTY
76226: LIST
76227: LIST
76228: PUSH
76229: LD_INT 1
76231: NEG
76232: PUSH
76233: LD_INT 0
76235: PUSH
76236: EMPTY
76237: LIST
76238: LIST
76239: PUSH
76240: LD_INT 1
76242: NEG
76243: PUSH
76244: LD_INT 1
76246: NEG
76247: PUSH
76248: EMPTY
76249: LIST
76250: LIST
76251: PUSH
76252: LD_INT 1
76254: NEG
76255: PUSH
76256: LD_INT 2
76258: NEG
76259: PUSH
76260: EMPTY
76261: LIST
76262: LIST
76263: PUSH
76264: LD_INT 0
76266: PUSH
76267: LD_INT 2
76269: NEG
76270: PUSH
76271: EMPTY
76272: LIST
76273: LIST
76274: PUSH
76275: LD_INT 1
76277: PUSH
76278: LD_INT 1
76280: NEG
76281: PUSH
76282: EMPTY
76283: LIST
76284: LIST
76285: PUSH
76286: LD_INT 2
76288: PUSH
76289: LD_INT 1
76291: PUSH
76292: EMPTY
76293: LIST
76294: LIST
76295: PUSH
76296: LD_INT 2
76298: PUSH
76299: LD_INT 2
76301: PUSH
76302: EMPTY
76303: LIST
76304: LIST
76305: PUSH
76306: LD_INT 1
76308: PUSH
76309: LD_INT 2
76311: PUSH
76312: EMPTY
76313: LIST
76314: LIST
76315: PUSH
76316: LD_INT 0
76318: PUSH
76319: LD_INT 2
76321: PUSH
76322: EMPTY
76323: LIST
76324: LIST
76325: PUSH
76326: LD_INT 1
76328: NEG
76329: PUSH
76330: LD_INT 1
76332: PUSH
76333: EMPTY
76334: LIST
76335: LIST
76336: PUSH
76337: LD_INT 2
76339: NEG
76340: PUSH
76341: LD_INT 1
76343: NEG
76344: PUSH
76345: EMPTY
76346: LIST
76347: LIST
76348: PUSH
76349: LD_INT 2
76351: NEG
76352: PUSH
76353: LD_INT 2
76355: NEG
76356: PUSH
76357: EMPTY
76358: LIST
76359: LIST
76360: PUSH
76361: LD_INT 2
76363: NEG
76364: PUSH
76365: LD_INT 3
76367: NEG
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: PUSH
76373: LD_INT 1
76375: NEG
76376: PUSH
76377: LD_INT 3
76379: NEG
76380: PUSH
76381: EMPTY
76382: LIST
76383: LIST
76384: PUSH
76385: LD_INT 0
76387: PUSH
76388: LD_INT 3
76390: NEG
76391: PUSH
76392: EMPTY
76393: LIST
76394: LIST
76395: PUSH
76396: LD_INT 1
76398: PUSH
76399: LD_INT 2
76401: NEG
76402: PUSH
76403: EMPTY
76404: LIST
76405: LIST
76406: PUSH
76407: LD_INT 3
76409: PUSH
76410: LD_INT 2
76412: PUSH
76413: EMPTY
76414: LIST
76415: LIST
76416: PUSH
76417: LD_INT 3
76419: PUSH
76420: LD_INT 3
76422: PUSH
76423: EMPTY
76424: LIST
76425: LIST
76426: PUSH
76427: LD_INT 2
76429: PUSH
76430: LD_INT 3
76432: PUSH
76433: EMPTY
76434: LIST
76435: LIST
76436: PUSH
76437: LD_INT 1
76439: PUSH
76440: LD_INT 3
76442: PUSH
76443: EMPTY
76444: LIST
76445: LIST
76446: PUSH
76447: LD_INT 0
76449: PUSH
76450: LD_INT 3
76452: PUSH
76453: EMPTY
76454: LIST
76455: LIST
76456: PUSH
76457: LD_INT 1
76459: NEG
76460: PUSH
76461: LD_INT 2
76463: PUSH
76464: EMPTY
76465: LIST
76466: LIST
76467: PUSH
76468: LD_INT 3
76470: NEG
76471: PUSH
76472: LD_INT 2
76474: NEG
76475: PUSH
76476: EMPTY
76477: LIST
76478: LIST
76479: PUSH
76480: LD_INT 3
76482: NEG
76483: PUSH
76484: LD_INT 3
76486: NEG
76487: PUSH
76488: EMPTY
76489: LIST
76490: LIST
76491: PUSH
76492: EMPTY
76493: LIST
76494: LIST
76495: LIST
76496: LIST
76497: LIST
76498: LIST
76499: LIST
76500: LIST
76501: LIST
76502: LIST
76503: LIST
76504: LIST
76505: LIST
76506: LIST
76507: LIST
76508: LIST
76509: LIST
76510: LIST
76511: LIST
76512: LIST
76513: LIST
76514: LIST
76515: LIST
76516: LIST
76517: LIST
76518: LIST
76519: LIST
76520: LIST
76521: LIST
76522: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76523: LD_ADDR_VAR 0 43
76527: PUSH
76528: LD_INT 0
76530: PUSH
76531: LD_INT 0
76533: PUSH
76534: EMPTY
76535: LIST
76536: LIST
76537: PUSH
76538: LD_INT 0
76540: PUSH
76541: LD_INT 1
76543: NEG
76544: PUSH
76545: EMPTY
76546: LIST
76547: LIST
76548: PUSH
76549: LD_INT 1
76551: PUSH
76552: LD_INT 0
76554: PUSH
76555: EMPTY
76556: LIST
76557: LIST
76558: PUSH
76559: LD_INT 1
76561: PUSH
76562: LD_INT 1
76564: PUSH
76565: EMPTY
76566: LIST
76567: LIST
76568: PUSH
76569: LD_INT 0
76571: PUSH
76572: LD_INT 1
76574: PUSH
76575: EMPTY
76576: LIST
76577: LIST
76578: PUSH
76579: LD_INT 1
76581: NEG
76582: PUSH
76583: LD_INT 0
76585: PUSH
76586: EMPTY
76587: LIST
76588: LIST
76589: PUSH
76590: LD_INT 1
76592: NEG
76593: PUSH
76594: LD_INT 1
76596: NEG
76597: PUSH
76598: EMPTY
76599: LIST
76600: LIST
76601: PUSH
76602: LD_INT 1
76604: NEG
76605: PUSH
76606: LD_INT 2
76608: NEG
76609: PUSH
76610: EMPTY
76611: LIST
76612: LIST
76613: PUSH
76614: LD_INT 0
76616: PUSH
76617: LD_INT 2
76619: NEG
76620: PUSH
76621: EMPTY
76622: LIST
76623: LIST
76624: PUSH
76625: LD_INT 1
76627: PUSH
76628: LD_INT 1
76630: NEG
76631: PUSH
76632: EMPTY
76633: LIST
76634: LIST
76635: PUSH
76636: LD_INT 2
76638: PUSH
76639: LD_INT 0
76641: PUSH
76642: EMPTY
76643: LIST
76644: LIST
76645: PUSH
76646: LD_INT 2
76648: PUSH
76649: LD_INT 1
76651: PUSH
76652: EMPTY
76653: LIST
76654: LIST
76655: PUSH
76656: LD_INT 1
76658: PUSH
76659: LD_INT 2
76661: PUSH
76662: EMPTY
76663: LIST
76664: LIST
76665: PUSH
76666: LD_INT 0
76668: PUSH
76669: LD_INT 2
76671: PUSH
76672: EMPTY
76673: LIST
76674: LIST
76675: PUSH
76676: LD_INT 1
76678: NEG
76679: PUSH
76680: LD_INT 1
76682: PUSH
76683: EMPTY
76684: LIST
76685: LIST
76686: PUSH
76687: LD_INT 2
76689: NEG
76690: PUSH
76691: LD_INT 0
76693: PUSH
76694: EMPTY
76695: LIST
76696: LIST
76697: PUSH
76698: LD_INT 2
76700: NEG
76701: PUSH
76702: LD_INT 1
76704: NEG
76705: PUSH
76706: EMPTY
76707: LIST
76708: LIST
76709: PUSH
76710: LD_INT 1
76712: NEG
76713: PUSH
76714: LD_INT 3
76716: NEG
76717: PUSH
76718: EMPTY
76719: LIST
76720: LIST
76721: PUSH
76722: LD_INT 0
76724: PUSH
76725: LD_INT 3
76727: NEG
76728: PUSH
76729: EMPTY
76730: LIST
76731: LIST
76732: PUSH
76733: LD_INT 1
76735: PUSH
76736: LD_INT 2
76738: NEG
76739: PUSH
76740: EMPTY
76741: LIST
76742: LIST
76743: PUSH
76744: LD_INT 2
76746: PUSH
76747: LD_INT 1
76749: NEG
76750: PUSH
76751: EMPTY
76752: LIST
76753: LIST
76754: PUSH
76755: LD_INT 3
76757: PUSH
76758: LD_INT 0
76760: PUSH
76761: EMPTY
76762: LIST
76763: LIST
76764: PUSH
76765: LD_INT 3
76767: PUSH
76768: LD_INT 1
76770: PUSH
76771: EMPTY
76772: LIST
76773: LIST
76774: PUSH
76775: LD_INT 1
76777: PUSH
76778: LD_INT 3
76780: PUSH
76781: EMPTY
76782: LIST
76783: LIST
76784: PUSH
76785: LD_INT 0
76787: PUSH
76788: LD_INT 3
76790: PUSH
76791: EMPTY
76792: LIST
76793: LIST
76794: PUSH
76795: LD_INT 1
76797: NEG
76798: PUSH
76799: LD_INT 2
76801: PUSH
76802: EMPTY
76803: LIST
76804: LIST
76805: PUSH
76806: LD_INT 2
76808: NEG
76809: PUSH
76810: LD_INT 1
76812: PUSH
76813: EMPTY
76814: LIST
76815: LIST
76816: PUSH
76817: LD_INT 3
76819: NEG
76820: PUSH
76821: LD_INT 0
76823: PUSH
76824: EMPTY
76825: LIST
76826: LIST
76827: PUSH
76828: LD_INT 3
76830: NEG
76831: PUSH
76832: LD_INT 1
76834: NEG
76835: PUSH
76836: EMPTY
76837: LIST
76838: LIST
76839: PUSH
76840: EMPTY
76841: LIST
76842: LIST
76843: LIST
76844: LIST
76845: LIST
76846: LIST
76847: LIST
76848: LIST
76849: LIST
76850: LIST
76851: LIST
76852: LIST
76853: LIST
76854: LIST
76855: LIST
76856: LIST
76857: LIST
76858: LIST
76859: LIST
76860: LIST
76861: LIST
76862: LIST
76863: LIST
76864: LIST
76865: LIST
76866: LIST
76867: LIST
76868: LIST
76869: LIST
76870: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76871: LD_ADDR_VAR 0 44
76875: PUSH
76876: LD_INT 0
76878: PUSH
76879: LD_INT 0
76881: PUSH
76882: EMPTY
76883: LIST
76884: LIST
76885: PUSH
76886: LD_INT 0
76888: PUSH
76889: LD_INT 1
76891: NEG
76892: PUSH
76893: EMPTY
76894: LIST
76895: LIST
76896: PUSH
76897: LD_INT 1
76899: PUSH
76900: LD_INT 0
76902: PUSH
76903: EMPTY
76904: LIST
76905: LIST
76906: PUSH
76907: LD_INT 1
76909: PUSH
76910: LD_INT 1
76912: PUSH
76913: EMPTY
76914: LIST
76915: LIST
76916: PUSH
76917: LD_INT 0
76919: PUSH
76920: LD_INT 1
76922: PUSH
76923: EMPTY
76924: LIST
76925: LIST
76926: PUSH
76927: LD_INT 1
76929: NEG
76930: PUSH
76931: LD_INT 0
76933: PUSH
76934: EMPTY
76935: LIST
76936: LIST
76937: PUSH
76938: LD_INT 1
76940: NEG
76941: PUSH
76942: LD_INT 1
76944: NEG
76945: PUSH
76946: EMPTY
76947: LIST
76948: LIST
76949: PUSH
76950: LD_INT 1
76952: NEG
76953: PUSH
76954: LD_INT 2
76956: NEG
76957: PUSH
76958: EMPTY
76959: LIST
76960: LIST
76961: PUSH
76962: LD_INT 1
76964: PUSH
76965: LD_INT 1
76967: NEG
76968: PUSH
76969: EMPTY
76970: LIST
76971: LIST
76972: PUSH
76973: LD_INT 2
76975: PUSH
76976: LD_INT 0
76978: PUSH
76979: EMPTY
76980: LIST
76981: LIST
76982: PUSH
76983: LD_INT 2
76985: PUSH
76986: LD_INT 1
76988: PUSH
76989: EMPTY
76990: LIST
76991: LIST
76992: PUSH
76993: LD_INT 2
76995: PUSH
76996: LD_INT 2
76998: PUSH
76999: EMPTY
77000: LIST
77001: LIST
77002: PUSH
77003: LD_INT 1
77005: PUSH
77006: LD_INT 2
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: PUSH
77013: LD_INT 1
77015: NEG
77016: PUSH
77017: LD_INT 1
77019: PUSH
77020: EMPTY
77021: LIST
77022: LIST
77023: PUSH
77024: LD_INT 2
77026: NEG
77027: PUSH
77028: LD_INT 0
77030: PUSH
77031: EMPTY
77032: LIST
77033: LIST
77034: PUSH
77035: LD_INT 2
77037: NEG
77038: PUSH
77039: LD_INT 1
77041: NEG
77042: PUSH
77043: EMPTY
77044: LIST
77045: LIST
77046: PUSH
77047: LD_INT 2
77049: NEG
77050: PUSH
77051: LD_INT 2
77053: NEG
77054: PUSH
77055: EMPTY
77056: LIST
77057: LIST
77058: PUSH
77059: LD_INT 2
77061: NEG
77062: PUSH
77063: LD_INT 3
77065: NEG
77066: PUSH
77067: EMPTY
77068: LIST
77069: LIST
77070: PUSH
77071: LD_INT 2
77073: PUSH
77074: LD_INT 1
77076: NEG
77077: PUSH
77078: EMPTY
77079: LIST
77080: LIST
77081: PUSH
77082: LD_INT 3
77084: PUSH
77085: LD_INT 0
77087: PUSH
77088: EMPTY
77089: LIST
77090: LIST
77091: PUSH
77092: LD_INT 3
77094: PUSH
77095: LD_INT 1
77097: PUSH
77098: EMPTY
77099: LIST
77100: LIST
77101: PUSH
77102: LD_INT 3
77104: PUSH
77105: LD_INT 2
77107: PUSH
77108: EMPTY
77109: LIST
77110: LIST
77111: PUSH
77112: LD_INT 3
77114: PUSH
77115: LD_INT 3
77117: PUSH
77118: EMPTY
77119: LIST
77120: LIST
77121: PUSH
77122: LD_INT 2
77124: PUSH
77125: LD_INT 3
77127: PUSH
77128: EMPTY
77129: LIST
77130: LIST
77131: PUSH
77132: LD_INT 2
77134: NEG
77135: PUSH
77136: LD_INT 1
77138: PUSH
77139: EMPTY
77140: LIST
77141: LIST
77142: PUSH
77143: LD_INT 3
77145: NEG
77146: PUSH
77147: LD_INT 0
77149: PUSH
77150: EMPTY
77151: LIST
77152: LIST
77153: PUSH
77154: LD_INT 3
77156: NEG
77157: PUSH
77158: LD_INT 1
77160: NEG
77161: PUSH
77162: EMPTY
77163: LIST
77164: LIST
77165: PUSH
77166: LD_INT 3
77168: NEG
77169: PUSH
77170: LD_INT 2
77172: NEG
77173: PUSH
77174: EMPTY
77175: LIST
77176: LIST
77177: PUSH
77178: LD_INT 3
77180: NEG
77181: PUSH
77182: LD_INT 3
77184: NEG
77185: PUSH
77186: EMPTY
77187: LIST
77188: LIST
77189: PUSH
77190: EMPTY
77191: LIST
77192: LIST
77193: LIST
77194: LIST
77195: LIST
77196: LIST
77197: LIST
77198: LIST
77199: LIST
77200: LIST
77201: LIST
77202: LIST
77203: LIST
77204: LIST
77205: LIST
77206: LIST
77207: LIST
77208: LIST
77209: LIST
77210: LIST
77211: LIST
77212: LIST
77213: LIST
77214: LIST
77215: LIST
77216: LIST
77217: LIST
77218: LIST
77219: LIST
77220: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77221: LD_ADDR_VAR 0 45
77225: PUSH
77226: LD_INT 0
77228: PUSH
77229: LD_INT 0
77231: PUSH
77232: EMPTY
77233: LIST
77234: LIST
77235: PUSH
77236: LD_INT 0
77238: PUSH
77239: LD_INT 1
77241: NEG
77242: PUSH
77243: EMPTY
77244: LIST
77245: LIST
77246: PUSH
77247: LD_INT 1
77249: PUSH
77250: LD_INT 0
77252: PUSH
77253: EMPTY
77254: LIST
77255: LIST
77256: PUSH
77257: LD_INT 1
77259: PUSH
77260: LD_INT 1
77262: PUSH
77263: EMPTY
77264: LIST
77265: LIST
77266: PUSH
77267: LD_INT 0
77269: PUSH
77270: LD_INT 1
77272: PUSH
77273: EMPTY
77274: LIST
77275: LIST
77276: PUSH
77277: LD_INT 1
77279: NEG
77280: PUSH
77281: LD_INT 0
77283: PUSH
77284: EMPTY
77285: LIST
77286: LIST
77287: PUSH
77288: LD_INT 1
77290: NEG
77291: PUSH
77292: LD_INT 1
77294: NEG
77295: PUSH
77296: EMPTY
77297: LIST
77298: LIST
77299: PUSH
77300: LD_INT 1
77302: NEG
77303: PUSH
77304: LD_INT 2
77306: NEG
77307: PUSH
77308: EMPTY
77309: LIST
77310: LIST
77311: PUSH
77312: LD_INT 0
77314: PUSH
77315: LD_INT 2
77317: NEG
77318: PUSH
77319: EMPTY
77320: LIST
77321: LIST
77322: PUSH
77323: LD_INT 1
77325: PUSH
77326: LD_INT 1
77328: NEG
77329: PUSH
77330: EMPTY
77331: LIST
77332: LIST
77333: PUSH
77334: LD_INT 2
77336: PUSH
77337: LD_INT 1
77339: PUSH
77340: EMPTY
77341: LIST
77342: LIST
77343: PUSH
77344: LD_INT 2
77346: PUSH
77347: LD_INT 2
77349: PUSH
77350: EMPTY
77351: LIST
77352: LIST
77353: PUSH
77354: LD_INT 1
77356: PUSH
77357: LD_INT 2
77359: PUSH
77360: EMPTY
77361: LIST
77362: LIST
77363: PUSH
77364: LD_INT 0
77366: PUSH
77367: LD_INT 2
77369: PUSH
77370: EMPTY
77371: LIST
77372: LIST
77373: PUSH
77374: LD_INT 1
77376: NEG
77377: PUSH
77378: LD_INT 1
77380: PUSH
77381: EMPTY
77382: LIST
77383: LIST
77384: PUSH
77385: LD_INT 2
77387: NEG
77388: PUSH
77389: LD_INT 1
77391: NEG
77392: PUSH
77393: EMPTY
77394: LIST
77395: LIST
77396: PUSH
77397: LD_INT 2
77399: NEG
77400: PUSH
77401: LD_INT 2
77403: NEG
77404: PUSH
77405: EMPTY
77406: LIST
77407: LIST
77408: PUSH
77409: LD_INT 2
77411: NEG
77412: PUSH
77413: LD_INT 3
77415: NEG
77416: PUSH
77417: EMPTY
77418: LIST
77419: LIST
77420: PUSH
77421: LD_INT 1
77423: NEG
77424: PUSH
77425: LD_INT 3
77427: NEG
77428: PUSH
77429: EMPTY
77430: LIST
77431: LIST
77432: PUSH
77433: LD_INT 0
77435: PUSH
77436: LD_INT 3
77438: NEG
77439: PUSH
77440: EMPTY
77441: LIST
77442: LIST
77443: PUSH
77444: LD_INT 1
77446: PUSH
77447: LD_INT 2
77449: NEG
77450: PUSH
77451: EMPTY
77452: LIST
77453: LIST
77454: PUSH
77455: LD_INT 3
77457: PUSH
77458: LD_INT 2
77460: PUSH
77461: EMPTY
77462: LIST
77463: LIST
77464: PUSH
77465: LD_INT 3
77467: PUSH
77468: LD_INT 3
77470: PUSH
77471: EMPTY
77472: LIST
77473: LIST
77474: PUSH
77475: LD_INT 2
77477: PUSH
77478: LD_INT 3
77480: PUSH
77481: EMPTY
77482: LIST
77483: LIST
77484: PUSH
77485: LD_INT 1
77487: PUSH
77488: LD_INT 3
77490: PUSH
77491: EMPTY
77492: LIST
77493: LIST
77494: PUSH
77495: LD_INT 0
77497: PUSH
77498: LD_INT 3
77500: PUSH
77501: EMPTY
77502: LIST
77503: LIST
77504: PUSH
77505: LD_INT 1
77507: NEG
77508: PUSH
77509: LD_INT 2
77511: PUSH
77512: EMPTY
77513: LIST
77514: LIST
77515: PUSH
77516: LD_INT 3
77518: NEG
77519: PUSH
77520: LD_INT 2
77522: NEG
77523: PUSH
77524: EMPTY
77525: LIST
77526: LIST
77527: PUSH
77528: LD_INT 3
77530: NEG
77531: PUSH
77532: LD_INT 3
77534: NEG
77535: PUSH
77536: EMPTY
77537: LIST
77538: LIST
77539: PUSH
77540: EMPTY
77541: LIST
77542: LIST
77543: LIST
77544: LIST
77545: LIST
77546: LIST
77547: LIST
77548: LIST
77549: LIST
77550: LIST
77551: LIST
77552: LIST
77553: LIST
77554: LIST
77555: LIST
77556: LIST
77557: LIST
77558: LIST
77559: LIST
77560: LIST
77561: LIST
77562: LIST
77563: LIST
77564: LIST
77565: LIST
77566: LIST
77567: LIST
77568: LIST
77569: LIST
77570: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
77571: LD_ADDR_VAR 0 46
77575: PUSH
77576: LD_INT 0
77578: PUSH
77579: LD_INT 0
77581: PUSH
77582: EMPTY
77583: LIST
77584: LIST
77585: PUSH
77586: LD_INT 0
77588: PUSH
77589: LD_INT 1
77591: NEG
77592: PUSH
77593: EMPTY
77594: LIST
77595: LIST
77596: PUSH
77597: LD_INT 1
77599: PUSH
77600: LD_INT 0
77602: PUSH
77603: EMPTY
77604: LIST
77605: LIST
77606: PUSH
77607: LD_INT 1
77609: PUSH
77610: LD_INT 1
77612: PUSH
77613: EMPTY
77614: LIST
77615: LIST
77616: PUSH
77617: LD_INT 0
77619: PUSH
77620: LD_INT 1
77622: PUSH
77623: EMPTY
77624: LIST
77625: LIST
77626: PUSH
77627: LD_INT 1
77629: NEG
77630: PUSH
77631: LD_INT 0
77633: PUSH
77634: EMPTY
77635: LIST
77636: LIST
77637: PUSH
77638: LD_INT 1
77640: NEG
77641: PUSH
77642: LD_INT 1
77644: NEG
77645: PUSH
77646: EMPTY
77647: LIST
77648: LIST
77649: PUSH
77650: LD_INT 1
77652: NEG
77653: PUSH
77654: LD_INT 2
77656: NEG
77657: PUSH
77658: EMPTY
77659: LIST
77660: LIST
77661: PUSH
77662: LD_INT 0
77664: PUSH
77665: LD_INT 2
77667: NEG
77668: PUSH
77669: EMPTY
77670: LIST
77671: LIST
77672: PUSH
77673: LD_INT 1
77675: PUSH
77676: LD_INT 1
77678: NEG
77679: PUSH
77680: EMPTY
77681: LIST
77682: LIST
77683: PUSH
77684: LD_INT 2
77686: PUSH
77687: LD_INT 0
77689: PUSH
77690: EMPTY
77691: LIST
77692: LIST
77693: PUSH
77694: LD_INT 2
77696: PUSH
77697: LD_INT 1
77699: PUSH
77700: EMPTY
77701: LIST
77702: LIST
77703: PUSH
77704: LD_INT 1
77706: PUSH
77707: LD_INT 2
77709: PUSH
77710: EMPTY
77711: LIST
77712: LIST
77713: PUSH
77714: LD_INT 0
77716: PUSH
77717: LD_INT 2
77719: PUSH
77720: EMPTY
77721: LIST
77722: LIST
77723: PUSH
77724: LD_INT 1
77726: NEG
77727: PUSH
77728: LD_INT 1
77730: PUSH
77731: EMPTY
77732: LIST
77733: LIST
77734: PUSH
77735: LD_INT 2
77737: NEG
77738: PUSH
77739: LD_INT 0
77741: PUSH
77742: EMPTY
77743: LIST
77744: LIST
77745: PUSH
77746: LD_INT 2
77748: NEG
77749: PUSH
77750: LD_INT 1
77752: NEG
77753: PUSH
77754: EMPTY
77755: LIST
77756: LIST
77757: PUSH
77758: LD_INT 1
77760: NEG
77761: PUSH
77762: LD_INT 3
77764: NEG
77765: PUSH
77766: EMPTY
77767: LIST
77768: LIST
77769: PUSH
77770: LD_INT 0
77772: PUSH
77773: LD_INT 3
77775: NEG
77776: PUSH
77777: EMPTY
77778: LIST
77779: LIST
77780: PUSH
77781: LD_INT 1
77783: PUSH
77784: LD_INT 2
77786: NEG
77787: PUSH
77788: EMPTY
77789: LIST
77790: LIST
77791: PUSH
77792: LD_INT 2
77794: PUSH
77795: LD_INT 1
77797: NEG
77798: PUSH
77799: EMPTY
77800: LIST
77801: LIST
77802: PUSH
77803: LD_INT 3
77805: PUSH
77806: LD_INT 0
77808: PUSH
77809: EMPTY
77810: LIST
77811: LIST
77812: PUSH
77813: LD_INT 3
77815: PUSH
77816: LD_INT 1
77818: PUSH
77819: EMPTY
77820: LIST
77821: LIST
77822: PUSH
77823: LD_INT 1
77825: PUSH
77826: LD_INT 3
77828: PUSH
77829: EMPTY
77830: LIST
77831: LIST
77832: PUSH
77833: LD_INT 0
77835: PUSH
77836: LD_INT 3
77838: PUSH
77839: EMPTY
77840: LIST
77841: LIST
77842: PUSH
77843: LD_INT 1
77845: NEG
77846: PUSH
77847: LD_INT 2
77849: PUSH
77850: EMPTY
77851: LIST
77852: LIST
77853: PUSH
77854: LD_INT 2
77856: NEG
77857: PUSH
77858: LD_INT 1
77860: PUSH
77861: EMPTY
77862: LIST
77863: LIST
77864: PUSH
77865: LD_INT 3
77867: NEG
77868: PUSH
77869: LD_INT 0
77871: PUSH
77872: EMPTY
77873: LIST
77874: LIST
77875: PUSH
77876: LD_INT 3
77878: NEG
77879: PUSH
77880: LD_INT 1
77882: NEG
77883: PUSH
77884: EMPTY
77885: LIST
77886: LIST
77887: PUSH
77888: EMPTY
77889: LIST
77890: LIST
77891: LIST
77892: LIST
77893: LIST
77894: LIST
77895: LIST
77896: LIST
77897: LIST
77898: LIST
77899: LIST
77900: LIST
77901: LIST
77902: LIST
77903: LIST
77904: LIST
77905: LIST
77906: LIST
77907: LIST
77908: LIST
77909: LIST
77910: LIST
77911: LIST
77912: LIST
77913: LIST
77914: LIST
77915: LIST
77916: LIST
77917: LIST
77918: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
77919: LD_ADDR_VAR 0 47
77923: PUSH
77924: LD_INT 0
77926: PUSH
77927: LD_INT 0
77929: PUSH
77930: EMPTY
77931: LIST
77932: LIST
77933: PUSH
77934: LD_INT 0
77936: PUSH
77937: LD_INT 1
77939: NEG
77940: PUSH
77941: EMPTY
77942: LIST
77943: LIST
77944: PUSH
77945: LD_INT 1
77947: PUSH
77948: LD_INT 0
77950: PUSH
77951: EMPTY
77952: LIST
77953: LIST
77954: PUSH
77955: LD_INT 1
77957: PUSH
77958: LD_INT 1
77960: PUSH
77961: EMPTY
77962: LIST
77963: LIST
77964: PUSH
77965: LD_INT 0
77967: PUSH
77968: LD_INT 1
77970: PUSH
77971: EMPTY
77972: LIST
77973: LIST
77974: PUSH
77975: LD_INT 1
77977: NEG
77978: PUSH
77979: LD_INT 0
77981: PUSH
77982: EMPTY
77983: LIST
77984: LIST
77985: PUSH
77986: LD_INT 1
77988: NEG
77989: PUSH
77990: LD_INT 1
77992: NEG
77993: PUSH
77994: EMPTY
77995: LIST
77996: LIST
77997: PUSH
77998: LD_INT 1
78000: NEG
78001: PUSH
78002: LD_INT 2
78004: NEG
78005: PUSH
78006: EMPTY
78007: LIST
78008: LIST
78009: PUSH
78010: LD_INT 0
78012: PUSH
78013: LD_INT 2
78015: NEG
78016: PUSH
78017: EMPTY
78018: LIST
78019: LIST
78020: PUSH
78021: LD_INT 1
78023: PUSH
78024: LD_INT 1
78026: NEG
78027: PUSH
78028: EMPTY
78029: LIST
78030: LIST
78031: PUSH
78032: LD_INT 2
78034: NEG
78035: PUSH
78036: LD_INT 1
78038: NEG
78039: PUSH
78040: EMPTY
78041: LIST
78042: LIST
78043: PUSH
78044: LD_INT 2
78046: NEG
78047: PUSH
78048: LD_INT 2
78050: NEG
78051: PUSH
78052: EMPTY
78053: LIST
78054: LIST
78055: PUSH
78056: EMPTY
78057: LIST
78058: LIST
78059: LIST
78060: LIST
78061: LIST
78062: LIST
78063: LIST
78064: LIST
78065: LIST
78066: LIST
78067: LIST
78068: LIST
78069: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
78070: LD_ADDR_VAR 0 48
78074: PUSH
78075: LD_INT 0
78077: PUSH
78078: LD_INT 0
78080: PUSH
78081: EMPTY
78082: LIST
78083: LIST
78084: PUSH
78085: LD_INT 0
78087: PUSH
78088: LD_INT 1
78090: NEG
78091: PUSH
78092: EMPTY
78093: LIST
78094: LIST
78095: PUSH
78096: LD_INT 1
78098: PUSH
78099: LD_INT 0
78101: PUSH
78102: EMPTY
78103: LIST
78104: LIST
78105: PUSH
78106: LD_INT 1
78108: PUSH
78109: LD_INT 1
78111: PUSH
78112: EMPTY
78113: LIST
78114: LIST
78115: PUSH
78116: LD_INT 0
78118: PUSH
78119: LD_INT 1
78121: PUSH
78122: EMPTY
78123: LIST
78124: LIST
78125: PUSH
78126: LD_INT 1
78128: NEG
78129: PUSH
78130: LD_INT 0
78132: PUSH
78133: EMPTY
78134: LIST
78135: LIST
78136: PUSH
78137: LD_INT 1
78139: NEG
78140: PUSH
78141: LD_INT 1
78143: NEG
78144: PUSH
78145: EMPTY
78146: LIST
78147: LIST
78148: PUSH
78149: LD_INT 1
78151: NEG
78152: PUSH
78153: LD_INT 2
78155: NEG
78156: PUSH
78157: EMPTY
78158: LIST
78159: LIST
78160: PUSH
78161: LD_INT 0
78163: PUSH
78164: LD_INT 2
78166: NEG
78167: PUSH
78168: EMPTY
78169: LIST
78170: LIST
78171: PUSH
78172: LD_INT 1
78174: PUSH
78175: LD_INT 1
78177: NEG
78178: PUSH
78179: EMPTY
78180: LIST
78181: LIST
78182: PUSH
78183: LD_INT 2
78185: PUSH
78186: LD_INT 0
78188: PUSH
78189: EMPTY
78190: LIST
78191: LIST
78192: PUSH
78193: LD_INT 2
78195: PUSH
78196: LD_INT 1
78198: PUSH
78199: EMPTY
78200: LIST
78201: LIST
78202: PUSH
78203: EMPTY
78204: LIST
78205: LIST
78206: LIST
78207: LIST
78208: LIST
78209: LIST
78210: LIST
78211: LIST
78212: LIST
78213: LIST
78214: LIST
78215: LIST
78216: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
78217: LD_ADDR_VAR 0 49
78221: PUSH
78222: LD_INT 0
78224: PUSH
78225: LD_INT 0
78227: PUSH
78228: EMPTY
78229: LIST
78230: LIST
78231: PUSH
78232: LD_INT 0
78234: PUSH
78235: LD_INT 1
78237: NEG
78238: PUSH
78239: EMPTY
78240: LIST
78241: LIST
78242: PUSH
78243: LD_INT 1
78245: PUSH
78246: LD_INT 0
78248: PUSH
78249: EMPTY
78250: LIST
78251: LIST
78252: PUSH
78253: LD_INT 1
78255: PUSH
78256: LD_INT 1
78258: PUSH
78259: EMPTY
78260: LIST
78261: LIST
78262: PUSH
78263: LD_INT 0
78265: PUSH
78266: LD_INT 1
78268: PUSH
78269: EMPTY
78270: LIST
78271: LIST
78272: PUSH
78273: LD_INT 1
78275: NEG
78276: PUSH
78277: LD_INT 0
78279: PUSH
78280: EMPTY
78281: LIST
78282: LIST
78283: PUSH
78284: LD_INT 1
78286: NEG
78287: PUSH
78288: LD_INT 1
78290: NEG
78291: PUSH
78292: EMPTY
78293: LIST
78294: LIST
78295: PUSH
78296: LD_INT 1
78298: PUSH
78299: LD_INT 1
78301: NEG
78302: PUSH
78303: EMPTY
78304: LIST
78305: LIST
78306: PUSH
78307: LD_INT 2
78309: PUSH
78310: LD_INT 0
78312: PUSH
78313: EMPTY
78314: LIST
78315: LIST
78316: PUSH
78317: LD_INT 2
78319: PUSH
78320: LD_INT 1
78322: PUSH
78323: EMPTY
78324: LIST
78325: LIST
78326: PUSH
78327: LD_INT 2
78329: PUSH
78330: LD_INT 2
78332: PUSH
78333: EMPTY
78334: LIST
78335: LIST
78336: PUSH
78337: LD_INT 1
78339: PUSH
78340: LD_INT 2
78342: PUSH
78343: EMPTY
78344: LIST
78345: LIST
78346: PUSH
78347: EMPTY
78348: LIST
78349: LIST
78350: LIST
78351: LIST
78352: LIST
78353: LIST
78354: LIST
78355: LIST
78356: LIST
78357: LIST
78358: LIST
78359: LIST
78360: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
78361: LD_ADDR_VAR 0 50
78365: PUSH
78366: LD_INT 0
78368: PUSH
78369: LD_INT 0
78371: PUSH
78372: EMPTY
78373: LIST
78374: LIST
78375: PUSH
78376: LD_INT 0
78378: PUSH
78379: LD_INT 1
78381: NEG
78382: PUSH
78383: EMPTY
78384: LIST
78385: LIST
78386: PUSH
78387: LD_INT 1
78389: PUSH
78390: LD_INT 0
78392: PUSH
78393: EMPTY
78394: LIST
78395: LIST
78396: PUSH
78397: LD_INT 1
78399: PUSH
78400: LD_INT 1
78402: PUSH
78403: EMPTY
78404: LIST
78405: LIST
78406: PUSH
78407: LD_INT 0
78409: PUSH
78410: LD_INT 1
78412: PUSH
78413: EMPTY
78414: LIST
78415: LIST
78416: PUSH
78417: LD_INT 1
78419: NEG
78420: PUSH
78421: LD_INT 0
78423: PUSH
78424: EMPTY
78425: LIST
78426: LIST
78427: PUSH
78428: LD_INT 1
78430: NEG
78431: PUSH
78432: LD_INT 1
78434: NEG
78435: PUSH
78436: EMPTY
78437: LIST
78438: LIST
78439: PUSH
78440: LD_INT 2
78442: PUSH
78443: LD_INT 1
78445: PUSH
78446: EMPTY
78447: LIST
78448: LIST
78449: PUSH
78450: LD_INT 2
78452: PUSH
78453: LD_INT 2
78455: PUSH
78456: EMPTY
78457: LIST
78458: LIST
78459: PUSH
78460: LD_INT 1
78462: PUSH
78463: LD_INT 2
78465: PUSH
78466: EMPTY
78467: LIST
78468: LIST
78469: PUSH
78470: LD_INT 0
78472: PUSH
78473: LD_INT 2
78475: PUSH
78476: EMPTY
78477: LIST
78478: LIST
78479: PUSH
78480: LD_INT 1
78482: NEG
78483: PUSH
78484: LD_INT 1
78486: PUSH
78487: EMPTY
78488: LIST
78489: LIST
78490: PUSH
78491: EMPTY
78492: LIST
78493: LIST
78494: LIST
78495: LIST
78496: LIST
78497: LIST
78498: LIST
78499: LIST
78500: LIST
78501: LIST
78502: LIST
78503: LIST
78504: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
78505: LD_ADDR_VAR 0 51
78509: PUSH
78510: LD_INT 0
78512: PUSH
78513: LD_INT 0
78515: PUSH
78516: EMPTY
78517: LIST
78518: LIST
78519: PUSH
78520: LD_INT 0
78522: PUSH
78523: LD_INT 1
78525: NEG
78526: PUSH
78527: EMPTY
78528: LIST
78529: LIST
78530: PUSH
78531: LD_INT 1
78533: PUSH
78534: LD_INT 0
78536: PUSH
78537: EMPTY
78538: LIST
78539: LIST
78540: PUSH
78541: LD_INT 1
78543: PUSH
78544: LD_INT 1
78546: PUSH
78547: EMPTY
78548: LIST
78549: LIST
78550: PUSH
78551: LD_INT 0
78553: PUSH
78554: LD_INT 1
78556: PUSH
78557: EMPTY
78558: LIST
78559: LIST
78560: PUSH
78561: LD_INT 1
78563: NEG
78564: PUSH
78565: LD_INT 0
78567: PUSH
78568: EMPTY
78569: LIST
78570: LIST
78571: PUSH
78572: LD_INT 1
78574: NEG
78575: PUSH
78576: LD_INT 1
78578: NEG
78579: PUSH
78580: EMPTY
78581: LIST
78582: LIST
78583: PUSH
78584: LD_INT 1
78586: PUSH
78587: LD_INT 2
78589: PUSH
78590: EMPTY
78591: LIST
78592: LIST
78593: PUSH
78594: LD_INT 0
78596: PUSH
78597: LD_INT 2
78599: PUSH
78600: EMPTY
78601: LIST
78602: LIST
78603: PUSH
78604: LD_INT 1
78606: NEG
78607: PUSH
78608: LD_INT 1
78610: PUSH
78611: EMPTY
78612: LIST
78613: LIST
78614: PUSH
78615: LD_INT 2
78617: NEG
78618: PUSH
78619: LD_INT 0
78621: PUSH
78622: EMPTY
78623: LIST
78624: LIST
78625: PUSH
78626: LD_INT 2
78628: NEG
78629: PUSH
78630: LD_INT 1
78632: NEG
78633: PUSH
78634: EMPTY
78635: LIST
78636: LIST
78637: PUSH
78638: EMPTY
78639: LIST
78640: LIST
78641: LIST
78642: LIST
78643: LIST
78644: LIST
78645: LIST
78646: LIST
78647: LIST
78648: LIST
78649: LIST
78650: LIST
78651: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78652: LD_ADDR_VAR 0 52
78656: PUSH
78657: LD_INT 0
78659: PUSH
78660: LD_INT 0
78662: PUSH
78663: EMPTY
78664: LIST
78665: LIST
78666: PUSH
78667: LD_INT 0
78669: PUSH
78670: LD_INT 1
78672: NEG
78673: PUSH
78674: EMPTY
78675: LIST
78676: LIST
78677: PUSH
78678: LD_INT 1
78680: PUSH
78681: LD_INT 0
78683: PUSH
78684: EMPTY
78685: LIST
78686: LIST
78687: PUSH
78688: LD_INT 1
78690: PUSH
78691: LD_INT 1
78693: PUSH
78694: EMPTY
78695: LIST
78696: LIST
78697: PUSH
78698: LD_INT 0
78700: PUSH
78701: LD_INT 1
78703: PUSH
78704: EMPTY
78705: LIST
78706: LIST
78707: PUSH
78708: LD_INT 1
78710: NEG
78711: PUSH
78712: LD_INT 0
78714: PUSH
78715: EMPTY
78716: LIST
78717: LIST
78718: PUSH
78719: LD_INT 1
78721: NEG
78722: PUSH
78723: LD_INT 1
78725: NEG
78726: PUSH
78727: EMPTY
78728: LIST
78729: LIST
78730: PUSH
78731: LD_INT 1
78733: NEG
78734: PUSH
78735: LD_INT 2
78737: NEG
78738: PUSH
78739: EMPTY
78740: LIST
78741: LIST
78742: PUSH
78743: LD_INT 1
78745: NEG
78746: PUSH
78747: LD_INT 1
78749: PUSH
78750: EMPTY
78751: LIST
78752: LIST
78753: PUSH
78754: LD_INT 2
78756: NEG
78757: PUSH
78758: LD_INT 0
78760: PUSH
78761: EMPTY
78762: LIST
78763: LIST
78764: PUSH
78765: LD_INT 2
78767: NEG
78768: PUSH
78769: LD_INT 1
78771: NEG
78772: PUSH
78773: EMPTY
78774: LIST
78775: LIST
78776: PUSH
78777: LD_INT 2
78779: NEG
78780: PUSH
78781: LD_INT 2
78783: NEG
78784: PUSH
78785: EMPTY
78786: LIST
78787: LIST
78788: PUSH
78789: EMPTY
78790: LIST
78791: LIST
78792: LIST
78793: LIST
78794: LIST
78795: LIST
78796: LIST
78797: LIST
78798: LIST
78799: LIST
78800: LIST
78801: LIST
78802: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78803: LD_ADDR_VAR 0 53
78807: PUSH
78808: LD_INT 0
78810: PUSH
78811: LD_INT 0
78813: PUSH
78814: EMPTY
78815: LIST
78816: LIST
78817: PUSH
78818: LD_INT 0
78820: PUSH
78821: LD_INT 1
78823: NEG
78824: PUSH
78825: EMPTY
78826: LIST
78827: LIST
78828: PUSH
78829: LD_INT 1
78831: PUSH
78832: LD_INT 0
78834: PUSH
78835: EMPTY
78836: LIST
78837: LIST
78838: PUSH
78839: LD_INT 1
78841: PUSH
78842: LD_INT 1
78844: PUSH
78845: EMPTY
78846: LIST
78847: LIST
78848: PUSH
78849: LD_INT 0
78851: PUSH
78852: LD_INT 1
78854: PUSH
78855: EMPTY
78856: LIST
78857: LIST
78858: PUSH
78859: LD_INT 1
78861: NEG
78862: PUSH
78863: LD_INT 0
78865: PUSH
78866: EMPTY
78867: LIST
78868: LIST
78869: PUSH
78870: LD_INT 1
78872: NEG
78873: PUSH
78874: LD_INT 1
78876: NEG
78877: PUSH
78878: EMPTY
78879: LIST
78880: LIST
78881: PUSH
78882: LD_INT 1
78884: NEG
78885: PUSH
78886: LD_INT 2
78888: NEG
78889: PUSH
78890: EMPTY
78891: LIST
78892: LIST
78893: PUSH
78894: LD_INT 0
78896: PUSH
78897: LD_INT 2
78899: NEG
78900: PUSH
78901: EMPTY
78902: LIST
78903: LIST
78904: PUSH
78905: LD_INT 1
78907: PUSH
78908: LD_INT 1
78910: NEG
78911: PUSH
78912: EMPTY
78913: LIST
78914: LIST
78915: PUSH
78916: LD_INT 2
78918: PUSH
78919: LD_INT 0
78921: PUSH
78922: EMPTY
78923: LIST
78924: LIST
78925: PUSH
78926: LD_INT 2
78928: PUSH
78929: LD_INT 1
78931: PUSH
78932: EMPTY
78933: LIST
78934: LIST
78935: PUSH
78936: LD_INT 2
78938: PUSH
78939: LD_INT 2
78941: PUSH
78942: EMPTY
78943: LIST
78944: LIST
78945: PUSH
78946: LD_INT 1
78948: PUSH
78949: LD_INT 2
78951: PUSH
78952: EMPTY
78953: LIST
78954: LIST
78955: PUSH
78956: LD_INT 0
78958: PUSH
78959: LD_INT 2
78961: PUSH
78962: EMPTY
78963: LIST
78964: LIST
78965: PUSH
78966: LD_INT 1
78968: NEG
78969: PUSH
78970: LD_INT 1
78972: PUSH
78973: EMPTY
78974: LIST
78975: LIST
78976: PUSH
78977: LD_INT 2
78979: NEG
78980: PUSH
78981: LD_INT 0
78983: PUSH
78984: EMPTY
78985: LIST
78986: LIST
78987: PUSH
78988: LD_INT 2
78990: NEG
78991: PUSH
78992: LD_INT 1
78994: NEG
78995: PUSH
78996: EMPTY
78997: LIST
78998: LIST
78999: PUSH
79000: LD_INT 2
79002: NEG
79003: PUSH
79004: LD_INT 2
79006: NEG
79007: PUSH
79008: EMPTY
79009: LIST
79010: LIST
79011: PUSH
79012: EMPTY
79013: LIST
79014: LIST
79015: LIST
79016: LIST
79017: LIST
79018: LIST
79019: LIST
79020: LIST
79021: LIST
79022: LIST
79023: LIST
79024: LIST
79025: LIST
79026: LIST
79027: LIST
79028: LIST
79029: LIST
79030: LIST
79031: LIST
79032: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79033: LD_ADDR_VAR 0 54
79037: PUSH
79038: LD_INT 0
79040: PUSH
79041: LD_INT 0
79043: PUSH
79044: EMPTY
79045: LIST
79046: LIST
79047: PUSH
79048: LD_INT 0
79050: PUSH
79051: LD_INT 1
79053: NEG
79054: PUSH
79055: EMPTY
79056: LIST
79057: LIST
79058: PUSH
79059: LD_INT 1
79061: PUSH
79062: LD_INT 0
79064: PUSH
79065: EMPTY
79066: LIST
79067: LIST
79068: PUSH
79069: LD_INT 1
79071: PUSH
79072: LD_INT 1
79074: PUSH
79075: EMPTY
79076: LIST
79077: LIST
79078: PUSH
79079: LD_INT 0
79081: PUSH
79082: LD_INT 1
79084: PUSH
79085: EMPTY
79086: LIST
79087: LIST
79088: PUSH
79089: LD_INT 1
79091: NEG
79092: PUSH
79093: LD_INT 0
79095: PUSH
79096: EMPTY
79097: LIST
79098: LIST
79099: PUSH
79100: LD_INT 1
79102: NEG
79103: PUSH
79104: LD_INT 1
79106: NEG
79107: PUSH
79108: EMPTY
79109: LIST
79110: LIST
79111: PUSH
79112: LD_INT 1
79114: NEG
79115: PUSH
79116: LD_INT 2
79118: NEG
79119: PUSH
79120: EMPTY
79121: LIST
79122: LIST
79123: PUSH
79124: LD_INT 0
79126: PUSH
79127: LD_INT 2
79129: NEG
79130: PUSH
79131: EMPTY
79132: LIST
79133: LIST
79134: PUSH
79135: LD_INT 1
79137: PUSH
79138: LD_INT 1
79140: NEG
79141: PUSH
79142: EMPTY
79143: LIST
79144: LIST
79145: PUSH
79146: LD_INT 2
79148: PUSH
79149: LD_INT 0
79151: PUSH
79152: EMPTY
79153: LIST
79154: LIST
79155: PUSH
79156: LD_INT 2
79158: PUSH
79159: LD_INT 1
79161: PUSH
79162: EMPTY
79163: LIST
79164: LIST
79165: PUSH
79166: LD_INT 2
79168: PUSH
79169: LD_INT 2
79171: PUSH
79172: EMPTY
79173: LIST
79174: LIST
79175: PUSH
79176: LD_INT 1
79178: PUSH
79179: LD_INT 2
79181: PUSH
79182: EMPTY
79183: LIST
79184: LIST
79185: PUSH
79186: LD_INT 0
79188: PUSH
79189: LD_INT 2
79191: PUSH
79192: EMPTY
79193: LIST
79194: LIST
79195: PUSH
79196: LD_INT 1
79198: NEG
79199: PUSH
79200: LD_INT 1
79202: PUSH
79203: EMPTY
79204: LIST
79205: LIST
79206: PUSH
79207: LD_INT 2
79209: NEG
79210: PUSH
79211: LD_INT 0
79213: PUSH
79214: EMPTY
79215: LIST
79216: LIST
79217: PUSH
79218: LD_INT 2
79220: NEG
79221: PUSH
79222: LD_INT 1
79224: NEG
79225: PUSH
79226: EMPTY
79227: LIST
79228: LIST
79229: PUSH
79230: LD_INT 2
79232: NEG
79233: PUSH
79234: LD_INT 2
79236: NEG
79237: PUSH
79238: EMPTY
79239: LIST
79240: LIST
79241: PUSH
79242: EMPTY
79243: LIST
79244: LIST
79245: LIST
79246: LIST
79247: LIST
79248: LIST
79249: LIST
79250: LIST
79251: LIST
79252: LIST
79253: LIST
79254: LIST
79255: LIST
79256: LIST
79257: LIST
79258: LIST
79259: LIST
79260: LIST
79261: LIST
79262: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79263: LD_ADDR_VAR 0 55
79267: PUSH
79268: LD_INT 0
79270: PUSH
79271: LD_INT 0
79273: PUSH
79274: EMPTY
79275: LIST
79276: LIST
79277: PUSH
79278: LD_INT 0
79280: PUSH
79281: LD_INT 1
79283: NEG
79284: PUSH
79285: EMPTY
79286: LIST
79287: LIST
79288: PUSH
79289: LD_INT 1
79291: PUSH
79292: LD_INT 0
79294: PUSH
79295: EMPTY
79296: LIST
79297: LIST
79298: PUSH
79299: LD_INT 1
79301: PUSH
79302: LD_INT 1
79304: PUSH
79305: EMPTY
79306: LIST
79307: LIST
79308: PUSH
79309: LD_INT 0
79311: PUSH
79312: LD_INT 1
79314: PUSH
79315: EMPTY
79316: LIST
79317: LIST
79318: PUSH
79319: LD_INT 1
79321: NEG
79322: PUSH
79323: LD_INT 0
79325: PUSH
79326: EMPTY
79327: LIST
79328: LIST
79329: PUSH
79330: LD_INT 1
79332: NEG
79333: PUSH
79334: LD_INT 1
79336: NEG
79337: PUSH
79338: EMPTY
79339: LIST
79340: LIST
79341: PUSH
79342: LD_INT 1
79344: NEG
79345: PUSH
79346: LD_INT 2
79348: NEG
79349: PUSH
79350: EMPTY
79351: LIST
79352: LIST
79353: PUSH
79354: LD_INT 0
79356: PUSH
79357: LD_INT 2
79359: NEG
79360: PUSH
79361: EMPTY
79362: LIST
79363: LIST
79364: PUSH
79365: LD_INT 1
79367: PUSH
79368: LD_INT 1
79370: NEG
79371: PUSH
79372: EMPTY
79373: LIST
79374: LIST
79375: PUSH
79376: LD_INT 2
79378: PUSH
79379: LD_INT 0
79381: PUSH
79382: EMPTY
79383: LIST
79384: LIST
79385: PUSH
79386: LD_INT 2
79388: PUSH
79389: LD_INT 1
79391: PUSH
79392: EMPTY
79393: LIST
79394: LIST
79395: PUSH
79396: LD_INT 2
79398: PUSH
79399: LD_INT 2
79401: PUSH
79402: EMPTY
79403: LIST
79404: LIST
79405: PUSH
79406: LD_INT 1
79408: PUSH
79409: LD_INT 2
79411: PUSH
79412: EMPTY
79413: LIST
79414: LIST
79415: PUSH
79416: LD_INT 0
79418: PUSH
79419: LD_INT 2
79421: PUSH
79422: EMPTY
79423: LIST
79424: LIST
79425: PUSH
79426: LD_INT 1
79428: NEG
79429: PUSH
79430: LD_INT 1
79432: PUSH
79433: EMPTY
79434: LIST
79435: LIST
79436: PUSH
79437: LD_INT 2
79439: NEG
79440: PUSH
79441: LD_INT 0
79443: PUSH
79444: EMPTY
79445: LIST
79446: LIST
79447: PUSH
79448: LD_INT 2
79450: NEG
79451: PUSH
79452: LD_INT 1
79454: NEG
79455: PUSH
79456: EMPTY
79457: LIST
79458: LIST
79459: PUSH
79460: LD_INT 2
79462: NEG
79463: PUSH
79464: LD_INT 2
79466: NEG
79467: PUSH
79468: EMPTY
79469: LIST
79470: LIST
79471: PUSH
79472: EMPTY
79473: LIST
79474: LIST
79475: LIST
79476: LIST
79477: LIST
79478: LIST
79479: LIST
79480: LIST
79481: LIST
79482: LIST
79483: LIST
79484: LIST
79485: LIST
79486: LIST
79487: LIST
79488: LIST
79489: LIST
79490: LIST
79491: LIST
79492: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79493: LD_ADDR_VAR 0 56
79497: PUSH
79498: LD_INT 0
79500: PUSH
79501: LD_INT 0
79503: PUSH
79504: EMPTY
79505: LIST
79506: LIST
79507: PUSH
79508: LD_INT 0
79510: PUSH
79511: LD_INT 1
79513: NEG
79514: PUSH
79515: EMPTY
79516: LIST
79517: LIST
79518: PUSH
79519: LD_INT 1
79521: PUSH
79522: LD_INT 0
79524: PUSH
79525: EMPTY
79526: LIST
79527: LIST
79528: PUSH
79529: LD_INT 1
79531: PUSH
79532: LD_INT 1
79534: PUSH
79535: EMPTY
79536: LIST
79537: LIST
79538: PUSH
79539: LD_INT 0
79541: PUSH
79542: LD_INT 1
79544: PUSH
79545: EMPTY
79546: LIST
79547: LIST
79548: PUSH
79549: LD_INT 1
79551: NEG
79552: PUSH
79553: LD_INT 0
79555: PUSH
79556: EMPTY
79557: LIST
79558: LIST
79559: PUSH
79560: LD_INT 1
79562: NEG
79563: PUSH
79564: LD_INT 1
79566: NEG
79567: PUSH
79568: EMPTY
79569: LIST
79570: LIST
79571: PUSH
79572: LD_INT 1
79574: NEG
79575: PUSH
79576: LD_INT 2
79578: NEG
79579: PUSH
79580: EMPTY
79581: LIST
79582: LIST
79583: PUSH
79584: LD_INT 0
79586: PUSH
79587: LD_INT 2
79589: NEG
79590: PUSH
79591: EMPTY
79592: LIST
79593: LIST
79594: PUSH
79595: LD_INT 1
79597: PUSH
79598: LD_INT 1
79600: NEG
79601: PUSH
79602: EMPTY
79603: LIST
79604: LIST
79605: PUSH
79606: LD_INT 2
79608: PUSH
79609: LD_INT 0
79611: PUSH
79612: EMPTY
79613: LIST
79614: LIST
79615: PUSH
79616: LD_INT 2
79618: PUSH
79619: LD_INT 1
79621: PUSH
79622: EMPTY
79623: LIST
79624: LIST
79625: PUSH
79626: LD_INT 2
79628: PUSH
79629: LD_INT 2
79631: PUSH
79632: EMPTY
79633: LIST
79634: LIST
79635: PUSH
79636: LD_INT 1
79638: PUSH
79639: LD_INT 2
79641: PUSH
79642: EMPTY
79643: LIST
79644: LIST
79645: PUSH
79646: LD_INT 0
79648: PUSH
79649: LD_INT 2
79651: PUSH
79652: EMPTY
79653: LIST
79654: LIST
79655: PUSH
79656: LD_INT 1
79658: NEG
79659: PUSH
79660: LD_INT 1
79662: PUSH
79663: EMPTY
79664: LIST
79665: LIST
79666: PUSH
79667: LD_INT 2
79669: NEG
79670: PUSH
79671: LD_INT 0
79673: PUSH
79674: EMPTY
79675: LIST
79676: LIST
79677: PUSH
79678: LD_INT 2
79680: NEG
79681: PUSH
79682: LD_INT 1
79684: NEG
79685: PUSH
79686: EMPTY
79687: LIST
79688: LIST
79689: PUSH
79690: LD_INT 2
79692: NEG
79693: PUSH
79694: LD_INT 2
79696: NEG
79697: PUSH
79698: EMPTY
79699: LIST
79700: LIST
79701: PUSH
79702: EMPTY
79703: LIST
79704: LIST
79705: LIST
79706: LIST
79707: LIST
79708: LIST
79709: LIST
79710: LIST
79711: LIST
79712: LIST
79713: LIST
79714: LIST
79715: LIST
79716: LIST
79717: LIST
79718: LIST
79719: LIST
79720: LIST
79721: LIST
79722: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79723: LD_ADDR_VAR 0 57
79727: PUSH
79728: LD_INT 0
79730: PUSH
79731: LD_INT 0
79733: PUSH
79734: EMPTY
79735: LIST
79736: LIST
79737: PUSH
79738: LD_INT 0
79740: PUSH
79741: LD_INT 1
79743: NEG
79744: PUSH
79745: EMPTY
79746: LIST
79747: LIST
79748: PUSH
79749: LD_INT 1
79751: PUSH
79752: LD_INT 0
79754: PUSH
79755: EMPTY
79756: LIST
79757: LIST
79758: PUSH
79759: LD_INT 1
79761: PUSH
79762: LD_INT 1
79764: PUSH
79765: EMPTY
79766: LIST
79767: LIST
79768: PUSH
79769: LD_INT 0
79771: PUSH
79772: LD_INT 1
79774: PUSH
79775: EMPTY
79776: LIST
79777: LIST
79778: PUSH
79779: LD_INT 1
79781: NEG
79782: PUSH
79783: LD_INT 0
79785: PUSH
79786: EMPTY
79787: LIST
79788: LIST
79789: PUSH
79790: LD_INT 1
79792: NEG
79793: PUSH
79794: LD_INT 1
79796: NEG
79797: PUSH
79798: EMPTY
79799: LIST
79800: LIST
79801: PUSH
79802: LD_INT 1
79804: NEG
79805: PUSH
79806: LD_INT 2
79808: NEG
79809: PUSH
79810: EMPTY
79811: LIST
79812: LIST
79813: PUSH
79814: LD_INT 0
79816: PUSH
79817: LD_INT 2
79819: NEG
79820: PUSH
79821: EMPTY
79822: LIST
79823: LIST
79824: PUSH
79825: LD_INT 1
79827: PUSH
79828: LD_INT 1
79830: NEG
79831: PUSH
79832: EMPTY
79833: LIST
79834: LIST
79835: PUSH
79836: LD_INT 2
79838: PUSH
79839: LD_INT 0
79841: PUSH
79842: EMPTY
79843: LIST
79844: LIST
79845: PUSH
79846: LD_INT 2
79848: PUSH
79849: LD_INT 1
79851: PUSH
79852: EMPTY
79853: LIST
79854: LIST
79855: PUSH
79856: LD_INT 2
79858: PUSH
79859: LD_INT 2
79861: PUSH
79862: EMPTY
79863: LIST
79864: LIST
79865: PUSH
79866: LD_INT 1
79868: PUSH
79869: LD_INT 2
79871: PUSH
79872: EMPTY
79873: LIST
79874: LIST
79875: PUSH
79876: LD_INT 0
79878: PUSH
79879: LD_INT 2
79881: PUSH
79882: EMPTY
79883: LIST
79884: LIST
79885: PUSH
79886: LD_INT 1
79888: NEG
79889: PUSH
79890: LD_INT 1
79892: PUSH
79893: EMPTY
79894: LIST
79895: LIST
79896: PUSH
79897: LD_INT 2
79899: NEG
79900: PUSH
79901: LD_INT 0
79903: PUSH
79904: EMPTY
79905: LIST
79906: LIST
79907: PUSH
79908: LD_INT 2
79910: NEG
79911: PUSH
79912: LD_INT 1
79914: NEG
79915: PUSH
79916: EMPTY
79917: LIST
79918: LIST
79919: PUSH
79920: LD_INT 2
79922: NEG
79923: PUSH
79924: LD_INT 2
79926: NEG
79927: PUSH
79928: EMPTY
79929: LIST
79930: LIST
79931: PUSH
79932: EMPTY
79933: LIST
79934: LIST
79935: LIST
79936: LIST
79937: LIST
79938: LIST
79939: LIST
79940: LIST
79941: LIST
79942: LIST
79943: LIST
79944: LIST
79945: LIST
79946: LIST
79947: LIST
79948: LIST
79949: LIST
79950: LIST
79951: LIST
79952: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79953: LD_ADDR_VAR 0 58
79957: PUSH
79958: LD_INT 0
79960: PUSH
79961: LD_INT 0
79963: PUSH
79964: EMPTY
79965: LIST
79966: LIST
79967: PUSH
79968: LD_INT 0
79970: PUSH
79971: LD_INT 1
79973: NEG
79974: PUSH
79975: EMPTY
79976: LIST
79977: LIST
79978: PUSH
79979: LD_INT 1
79981: PUSH
79982: LD_INT 0
79984: PUSH
79985: EMPTY
79986: LIST
79987: LIST
79988: PUSH
79989: LD_INT 1
79991: PUSH
79992: LD_INT 1
79994: PUSH
79995: EMPTY
79996: LIST
79997: LIST
79998: PUSH
79999: LD_INT 0
80001: PUSH
80002: LD_INT 1
80004: PUSH
80005: EMPTY
80006: LIST
80007: LIST
80008: PUSH
80009: LD_INT 1
80011: NEG
80012: PUSH
80013: LD_INT 0
80015: PUSH
80016: EMPTY
80017: LIST
80018: LIST
80019: PUSH
80020: LD_INT 1
80022: NEG
80023: PUSH
80024: LD_INT 1
80026: NEG
80027: PUSH
80028: EMPTY
80029: LIST
80030: LIST
80031: PUSH
80032: LD_INT 1
80034: NEG
80035: PUSH
80036: LD_INT 2
80038: NEG
80039: PUSH
80040: EMPTY
80041: LIST
80042: LIST
80043: PUSH
80044: LD_INT 0
80046: PUSH
80047: LD_INT 2
80049: NEG
80050: PUSH
80051: EMPTY
80052: LIST
80053: LIST
80054: PUSH
80055: LD_INT 1
80057: PUSH
80058: LD_INT 1
80060: NEG
80061: PUSH
80062: EMPTY
80063: LIST
80064: LIST
80065: PUSH
80066: LD_INT 2
80068: PUSH
80069: LD_INT 0
80071: PUSH
80072: EMPTY
80073: LIST
80074: LIST
80075: PUSH
80076: LD_INT 2
80078: PUSH
80079: LD_INT 1
80081: PUSH
80082: EMPTY
80083: LIST
80084: LIST
80085: PUSH
80086: LD_INT 2
80088: PUSH
80089: LD_INT 2
80091: PUSH
80092: EMPTY
80093: LIST
80094: LIST
80095: PUSH
80096: LD_INT 1
80098: PUSH
80099: LD_INT 2
80101: PUSH
80102: EMPTY
80103: LIST
80104: LIST
80105: PUSH
80106: LD_INT 0
80108: PUSH
80109: LD_INT 2
80111: PUSH
80112: EMPTY
80113: LIST
80114: LIST
80115: PUSH
80116: LD_INT 1
80118: NEG
80119: PUSH
80120: LD_INT 1
80122: PUSH
80123: EMPTY
80124: LIST
80125: LIST
80126: PUSH
80127: LD_INT 2
80129: NEG
80130: PUSH
80131: LD_INT 0
80133: PUSH
80134: EMPTY
80135: LIST
80136: LIST
80137: PUSH
80138: LD_INT 2
80140: NEG
80141: PUSH
80142: LD_INT 1
80144: NEG
80145: PUSH
80146: EMPTY
80147: LIST
80148: LIST
80149: PUSH
80150: LD_INT 2
80152: NEG
80153: PUSH
80154: LD_INT 2
80156: NEG
80157: PUSH
80158: EMPTY
80159: LIST
80160: LIST
80161: PUSH
80162: EMPTY
80163: LIST
80164: LIST
80165: LIST
80166: LIST
80167: LIST
80168: LIST
80169: LIST
80170: LIST
80171: LIST
80172: LIST
80173: LIST
80174: LIST
80175: LIST
80176: LIST
80177: LIST
80178: LIST
80179: LIST
80180: LIST
80181: LIST
80182: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80183: LD_ADDR_VAR 0 59
80187: PUSH
80188: LD_INT 0
80190: PUSH
80191: LD_INT 0
80193: PUSH
80194: EMPTY
80195: LIST
80196: LIST
80197: PUSH
80198: LD_INT 0
80200: PUSH
80201: LD_INT 1
80203: NEG
80204: PUSH
80205: EMPTY
80206: LIST
80207: LIST
80208: PUSH
80209: LD_INT 1
80211: PUSH
80212: LD_INT 0
80214: PUSH
80215: EMPTY
80216: LIST
80217: LIST
80218: PUSH
80219: LD_INT 1
80221: PUSH
80222: LD_INT 1
80224: PUSH
80225: EMPTY
80226: LIST
80227: LIST
80228: PUSH
80229: LD_INT 0
80231: PUSH
80232: LD_INT 1
80234: PUSH
80235: EMPTY
80236: LIST
80237: LIST
80238: PUSH
80239: LD_INT 1
80241: NEG
80242: PUSH
80243: LD_INT 0
80245: PUSH
80246: EMPTY
80247: LIST
80248: LIST
80249: PUSH
80250: LD_INT 1
80252: NEG
80253: PUSH
80254: LD_INT 1
80256: NEG
80257: PUSH
80258: EMPTY
80259: LIST
80260: LIST
80261: PUSH
80262: EMPTY
80263: LIST
80264: LIST
80265: LIST
80266: LIST
80267: LIST
80268: LIST
80269: LIST
80270: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80271: LD_ADDR_VAR 0 60
80275: PUSH
80276: LD_INT 0
80278: PUSH
80279: LD_INT 0
80281: PUSH
80282: EMPTY
80283: LIST
80284: LIST
80285: PUSH
80286: LD_INT 0
80288: PUSH
80289: LD_INT 1
80291: NEG
80292: PUSH
80293: EMPTY
80294: LIST
80295: LIST
80296: PUSH
80297: LD_INT 1
80299: PUSH
80300: LD_INT 0
80302: PUSH
80303: EMPTY
80304: LIST
80305: LIST
80306: PUSH
80307: LD_INT 1
80309: PUSH
80310: LD_INT 1
80312: PUSH
80313: EMPTY
80314: LIST
80315: LIST
80316: PUSH
80317: LD_INT 0
80319: PUSH
80320: LD_INT 1
80322: PUSH
80323: EMPTY
80324: LIST
80325: LIST
80326: PUSH
80327: LD_INT 1
80329: NEG
80330: PUSH
80331: LD_INT 0
80333: PUSH
80334: EMPTY
80335: LIST
80336: LIST
80337: PUSH
80338: LD_INT 1
80340: NEG
80341: PUSH
80342: LD_INT 1
80344: NEG
80345: PUSH
80346: EMPTY
80347: LIST
80348: LIST
80349: PUSH
80350: EMPTY
80351: LIST
80352: LIST
80353: LIST
80354: LIST
80355: LIST
80356: LIST
80357: LIST
80358: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80359: LD_ADDR_VAR 0 61
80363: PUSH
80364: LD_INT 0
80366: PUSH
80367: LD_INT 0
80369: PUSH
80370: EMPTY
80371: LIST
80372: LIST
80373: PUSH
80374: LD_INT 0
80376: PUSH
80377: LD_INT 1
80379: NEG
80380: PUSH
80381: EMPTY
80382: LIST
80383: LIST
80384: PUSH
80385: LD_INT 1
80387: PUSH
80388: LD_INT 0
80390: PUSH
80391: EMPTY
80392: LIST
80393: LIST
80394: PUSH
80395: LD_INT 1
80397: PUSH
80398: LD_INT 1
80400: PUSH
80401: EMPTY
80402: LIST
80403: LIST
80404: PUSH
80405: LD_INT 0
80407: PUSH
80408: LD_INT 1
80410: PUSH
80411: EMPTY
80412: LIST
80413: LIST
80414: PUSH
80415: LD_INT 1
80417: NEG
80418: PUSH
80419: LD_INT 0
80421: PUSH
80422: EMPTY
80423: LIST
80424: LIST
80425: PUSH
80426: LD_INT 1
80428: NEG
80429: PUSH
80430: LD_INT 1
80432: NEG
80433: PUSH
80434: EMPTY
80435: LIST
80436: LIST
80437: PUSH
80438: EMPTY
80439: LIST
80440: LIST
80441: LIST
80442: LIST
80443: LIST
80444: LIST
80445: LIST
80446: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80447: LD_ADDR_VAR 0 62
80451: PUSH
80452: LD_INT 0
80454: PUSH
80455: LD_INT 0
80457: PUSH
80458: EMPTY
80459: LIST
80460: LIST
80461: PUSH
80462: LD_INT 0
80464: PUSH
80465: LD_INT 1
80467: NEG
80468: PUSH
80469: EMPTY
80470: LIST
80471: LIST
80472: PUSH
80473: LD_INT 1
80475: PUSH
80476: LD_INT 0
80478: PUSH
80479: EMPTY
80480: LIST
80481: LIST
80482: PUSH
80483: LD_INT 1
80485: PUSH
80486: LD_INT 1
80488: PUSH
80489: EMPTY
80490: LIST
80491: LIST
80492: PUSH
80493: LD_INT 0
80495: PUSH
80496: LD_INT 1
80498: PUSH
80499: EMPTY
80500: LIST
80501: LIST
80502: PUSH
80503: LD_INT 1
80505: NEG
80506: PUSH
80507: LD_INT 0
80509: PUSH
80510: EMPTY
80511: LIST
80512: LIST
80513: PUSH
80514: LD_INT 1
80516: NEG
80517: PUSH
80518: LD_INT 1
80520: NEG
80521: PUSH
80522: EMPTY
80523: LIST
80524: LIST
80525: PUSH
80526: EMPTY
80527: LIST
80528: LIST
80529: LIST
80530: LIST
80531: LIST
80532: LIST
80533: LIST
80534: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80535: LD_ADDR_VAR 0 63
80539: PUSH
80540: LD_INT 0
80542: PUSH
80543: LD_INT 0
80545: PUSH
80546: EMPTY
80547: LIST
80548: LIST
80549: PUSH
80550: LD_INT 0
80552: PUSH
80553: LD_INT 1
80555: NEG
80556: PUSH
80557: EMPTY
80558: LIST
80559: LIST
80560: PUSH
80561: LD_INT 1
80563: PUSH
80564: LD_INT 0
80566: PUSH
80567: EMPTY
80568: LIST
80569: LIST
80570: PUSH
80571: LD_INT 1
80573: PUSH
80574: LD_INT 1
80576: PUSH
80577: EMPTY
80578: LIST
80579: LIST
80580: PUSH
80581: LD_INT 0
80583: PUSH
80584: LD_INT 1
80586: PUSH
80587: EMPTY
80588: LIST
80589: LIST
80590: PUSH
80591: LD_INT 1
80593: NEG
80594: PUSH
80595: LD_INT 0
80597: PUSH
80598: EMPTY
80599: LIST
80600: LIST
80601: PUSH
80602: LD_INT 1
80604: NEG
80605: PUSH
80606: LD_INT 1
80608: NEG
80609: PUSH
80610: EMPTY
80611: LIST
80612: LIST
80613: PUSH
80614: EMPTY
80615: LIST
80616: LIST
80617: LIST
80618: LIST
80619: LIST
80620: LIST
80621: LIST
80622: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
80623: LD_ADDR_VAR 0 64
80627: PUSH
80628: LD_INT 0
80630: PUSH
80631: LD_INT 0
80633: PUSH
80634: EMPTY
80635: LIST
80636: LIST
80637: PUSH
80638: LD_INT 0
80640: PUSH
80641: LD_INT 1
80643: NEG
80644: PUSH
80645: EMPTY
80646: LIST
80647: LIST
80648: PUSH
80649: LD_INT 1
80651: PUSH
80652: LD_INT 0
80654: PUSH
80655: EMPTY
80656: LIST
80657: LIST
80658: PUSH
80659: LD_INT 1
80661: PUSH
80662: LD_INT 1
80664: PUSH
80665: EMPTY
80666: LIST
80667: LIST
80668: PUSH
80669: LD_INT 0
80671: PUSH
80672: LD_INT 1
80674: PUSH
80675: EMPTY
80676: LIST
80677: LIST
80678: PUSH
80679: LD_INT 1
80681: NEG
80682: PUSH
80683: LD_INT 0
80685: PUSH
80686: EMPTY
80687: LIST
80688: LIST
80689: PUSH
80690: LD_INT 1
80692: NEG
80693: PUSH
80694: LD_INT 1
80696: NEG
80697: PUSH
80698: EMPTY
80699: LIST
80700: LIST
80701: PUSH
80702: EMPTY
80703: LIST
80704: LIST
80705: LIST
80706: LIST
80707: LIST
80708: LIST
80709: LIST
80710: ST_TO_ADDR
// end ; 1 :
80711: GO 86608
80713: LD_INT 1
80715: DOUBLE
80716: EQUAL
80717: IFTRUE 80721
80719: GO 83344
80721: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
80722: LD_ADDR_VAR 0 11
80726: PUSH
80727: LD_INT 1
80729: NEG
80730: PUSH
80731: LD_INT 3
80733: NEG
80734: PUSH
80735: EMPTY
80736: LIST
80737: LIST
80738: PUSH
80739: LD_INT 0
80741: PUSH
80742: LD_INT 3
80744: NEG
80745: PUSH
80746: EMPTY
80747: LIST
80748: LIST
80749: PUSH
80750: LD_INT 1
80752: PUSH
80753: LD_INT 2
80755: NEG
80756: PUSH
80757: EMPTY
80758: LIST
80759: LIST
80760: PUSH
80761: EMPTY
80762: LIST
80763: LIST
80764: LIST
80765: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
80766: LD_ADDR_VAR 0 12
80770: PUSH
80771: LD_INT 2
80773: PUSH
80774: LD_INT 1
80776: NEG
80777: PUSH
80778: EMPTY
80779: LIST
80780: LIST
80781: PUSH
80782: LD_INT 3
80784: PUSH
80785: LD_INT 0
80787: PUSH
80788: EMPTY
80789: LIST
80790: LIST
80791: PUSH
80792: LD_INT 3
80794: PUSH
80795: LD_INT 1
80797: PUSH
80798: EMPTY
80799: LIST
80800: LIST
80801: PUSH
80802: EMPTY
80803: LIST
80804: LIST
80805: LIST
80806: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
80807: LD_ADDR_VAR 0 13
80811: PUSH
80812: LD_INT 3
80814: PUSH
80815: LD_INT 2
80817: PUSH
80818: EMPTY
80819: LIST
80820: LIST
80821: PUSH
80822: LD_INT 3
80824: PUSH
80825: LD_INT 3
80827: PUSH
80828: EMPTY
80829: LIST
80830: LIST
80831: PUSH
80832: LD_INT 2
80834: PUSH
80835: LD_INT 3
80837: PUSH
80838: EMPTY
80839: LIST
80840: LIST
80841: PUSH
80842: EMPTY
80843: LIST
80844: LIST
80845: LIST
80846: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
80847: LD_ADDR_VAR 0 14
80851: PUSH
80852: LD_INT 1
80854: PUSH
80855: LD_INT 3
80857: PUSH
80858: EMPTY
80859: LIST
80860: LIST
80861: PUSH
80862: LD_INT 0
80864: PUSH
80865: LD_INT 3
80867: PUSH
80868: EMPTY
80869: LIST
80870: LIST
80871: PUSH
80872: LD_INT 1
80874: NEG
80875: PUSH
80876: LD_INT 2
80878: PUSH
80879: EMPTY
80880: LIST
80881: LIST
80882: PUSH
80883: EMPTY
80884: LIST
80885: LIST
80886: LIST
80887: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
80888: LD_ADDR_VAR 0 15
80892: PUSH
80893: LD_INT 2
80895: NEG
80896: PUSH
80897: LD_INT 1
80899: PUSH
80900: EMPTY
80901: LIST
80902: LIST
80903: PUSH
80904: LD_INT 3
80906: NEG
80907: PUSH
80908: LD_INT 0
80910: PUSH
80911: EMPTY
80912: LIST
80913: LIST
80914: PUSH
80915: LD_INT 3
80917: NEG
80918: PUSH
80919: LD_INT 1
80921: NEG
80922: PUSH
80923: EMPTY
80924: LIST
80925: LIST
80926: PUSH
80927: EMPTY
80928: LIST
80929: LIST
80930: LIST
80931: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
80932: LD_ADDR_VAR 0 16
80936: PUSH
80937: LD_INT 2
80939: NEG
80940: PUSH
80941: LD_INT 3
80943: NEG
80944: PUSH
80945: EMPTY
80946: LIST
80947: LIST
80948: PUSH
80949: LD_INT 3
80951: NEG
80952: PUSH
80953: LD_INT 2
80955: NEG
80956: PUSH
80957: EMPTY
80958: LIST
80959: LIST
80960: PUSH
80961: LD_INT 3
80963: NEG
80964: PUSH
80965: LD_INT 3
80967: NEG
80968: PUSH
80969: EMPTY
80970: LIST
80971: LIST
80972: PUSH
80973: EMPTY
80974: LIST
80975: LIST
80976: LIST
80977: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
80978: LD_ADDR_VAR 0 17
80982: PUSH
80983: LD_INT 1
80985: NEG
80986: PUSH
80987: LD_INT 3
80989: NEG
80990: PUSH
80991: EMPTY
80992: LIST
80993: LIST
80994: PUSH
80995: LD_INT 0
80997: PUSH
80998: LD_INT 3
81000: NEG
81001: PUSH
81002: EMPTY
81003: LIST
81004: LIST
81005: PUSH
81006: LD_INT 1
81008: PUSH
81009: LD_INT 2
81011: NEG
81012: PUSH
81013: EMPTY
81014: LIST
81015: LIST
81016: PUSH
81017: EMPTY
81018: LIST
81019: LIST
81020: LIST
81021: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
81022: LD_ADDR_VAR 0 18
81026: PUSH
81027: LD_INT 2
81029: PUSH
81030: LD_INT 1
81032: NEG
81033: PUSH
81034: EMPTY
81035: LIST
81036: LIST
81037: PUSH
81038: LD_INT 3
81040: PUSH
81041: LD_INT 0
81043: PUSH
81044: EMPTY
81045: LIST
81046: LIST
81047: PUSH
81048: LD_INT 3
81050: PUSH
81051: LD_INT 1
81053: PUSH
81054: EMPTY
81055: LIST
81056: LIST
81057: PUSH
81058: EMPTY
81059: LIST
81060: LIST
81061: LIST
81062: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
81063: LD_ADDR_VAR 0 19
81067: PUSH
81068: LD_INT 3
81070: PUSH
81071: LD_INT 2
81073: PUSH
81074: EMPTY
81075: LIST
81076: LIST
81077: PUSH
81078: LD_INT 3
81080: PUSH
81081: LD_INT 3
81083: PUSH
81084: EMPTY
81085: LIST
81086: LIST
81087: PUSH
81088: LD_INT 2
81090: PUSH
81091: LD_INT 3
81093: PUSH
81094: EMPTY
81095: LIST
81096: LIST
81097: PUSH
81098: EMPTY
81099: LIST
81100: LIST
81101: LIST
81102: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
81103: LD_ADDR_VAR 0 20
81107: PUSH
81108: LD_INT 1
81110: PUSH
81111: LD_INT 3
81113: PUSH
81114: EMPTY
81115: LIST
81116: LIST
81117: PUSH
81118: LD_INT 0
81120: PUSH
81121: LD_INT 3
81123: PUSH
81124: EMPTY
81125: LIST
81126: LIST
81127: PUSH
81128: LD_INT 1
81130: NEG
81131: PUSH
81132: LD_INT 2
81134: PUSH
81135: EMPTY
81136: LIST
81137: LIST
81138: PUSH
81139: EMPTY
81140: LIST
81141: LIST
81142: LIST
81143: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
81144: LD_ADDR_VAR 0 21
81148: PUSH
81149: LD_INT 2
81151: NEG
81152: PUSH
81153: LD_INT 1
81155: PUSH
81156: EMPTY
81157: LIST
81158: LIST
81159: PUSH
81160: LD_INT 3
81162: NEG
81163: PUSH
81164: LD_INT 0
81166: PUSH
81167: EMPTY
81168: LIST
81169: LIST
81170: PUSH
81171: LD_INT 3
81173: NEG
81174: PUSH
81175: LD_INT 1
81177: NEG
81178: PUSH
81179: EMPTY
81180: LIST
81181: LIST
81182: PUSH
81183: EMPTY
81184: LIST
81185: LIST
81186: LIST
81187: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
81188: LD_ADDR_VAR 0 22
81192: PUSH
81193: LD_INT 2
81195: NEG
81196: PUSH
81197: LD_INT 3
81199: NEG
81200: PUSH
81201: EMPTY
81202: LIST
81203: LIST
81204: PUSH
81205: LD_INT 3
81207: NEG
81208: PUSH
81209: LD_INT 2
81211: NEG
81212: PUSH
81213: EMPTY
81214: LIST
81215: LIST
81216: PUSH
81217: LD_INT 3
81219: NEG
81220: PUSH
81221: LD_INT 3
81223: NEG
81224: PUSH
81225: EMPTY
81226: LIST
81227: LIST
81228: PUSH
81229: EMPTY
81230: LIST
81231: LIST
81232: LIST
81233: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
81234: LD_ADDR_VAR 0 23
81238: PUSH
81239: LD_INT 0
81241: PUSH
81242: LD_INT 3
81244: NEG
81245: PUSH
81246: EMPTY
81247: LIST
81248: LIST
81249: PUSH
81250: LD_INT 1
81252: NEG
81253: PUSH
81254: LD_INT 4
81256: NEG
81257: PUSH
81258: EMPTY
81259: LIST
81260: LIST
81261: PUSH
81262: LD_INT 1
81264: PUSH
81265: LD_INT 3
81267: NEG
81268: PUSH
81269: EMPTY
81270: LIST
81271: LIST
81272: PUSH
81273: EMPTY
81274: LIST
81275: LIST
81276: LIST
81277: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
81278: LD_ADDR_VAR 0 24
81282: PUSH
81283: LD_INT 3
81285: PUSH
81286: LD_INT 0
81288: PUSH
81289: EMPTY
81290: LIST
81291: LIST
81292: PUSH
81293: LD_INT 3
81295: PUSH
81296: LD_INT 1
81298: NEG
81299: PUSH
81300: EMPTY
81301: LIST
81302: LIST
81303: PUSH
81304: LD_INT 4
81306: PUSH
81307: LD_INT 1
81309: PUSH
81310: EMPTY
81311: LIST
81312: LIST
81313: PUSH
81314: EMPTY
81315: LIST
81316: LIST
81317: LIST
81318: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
81319: LD_ADDR_VAR 0 25
81323: PUSH
81324: LD_INT 3
81326: PUSH
81327: LD_INT 3
81329: PUSH
81330: EMPTY
81331: LIST
81332: LIST
81333: PUSH
81334: LD_INT 4
81336: PUSH
81337: LD_INT 3
81339: PUSH
81340: EMPTY
81341: LIST
81342: LIST
81343: PUSH
81344: LD_INT 3
81346: PUSH
81347: LD_INT 4
81349: PUSH
81350: EMPTY
81351: LIST
81352: LIST
81353: PUSH
81354: EMPTY
81355: LIST
81356: LIST
81357: LIST
81358: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
81359: LD_ADDR_VAR 0 26
81363: PUSH
81364: LD_INT 0
81366: PUSH
81367: LD_INT 3
81369: PUSH
81370: EMPTY
81371: LIST
81372: LIST
81373: PUSH
81374: LD_INT 1
81376: PUSH
81377: LD_INT 4
81379: PUSH
81380: EMPTY
81381: LIST
81382: LIST
81383: PUSH
81384: LD_INT 1
81386: NEG
81387: PUSH
81388: LD_INT 3
81390: PUSH
81391: EMPTY
81392: LIST
81393: LIST
81394: PUSH
81395: EMPTY
81396: LIST
81397: LIST
81398: LIST
81399: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
81400: LD_ADDR_VAR 0 27
81404: PUSH
81405: LD_INT 3
81407: NEG
81408: PUSH
81409: LD_INT 0
81411: PUSH
81412: EMPTY
81413: LIST
81414: LIST
81415: PUSH
81416: LD_INT 3
81418: NEG
81419: PUSH
81420: LD_INT 1
81422: PUSH
81423: EMPTY
81424: LIST
81425: LIST
81426: PUSH
81427: LD_INT 4
81429: NEG
81430: PUSH
81431: LD_INT 1
81433: NEG
81434: PUSH
81435: EMPTY
81436: LIST
81437: LIST
81438: PUSH
81439: EMPTY
81440: LIST
81441: LIST
81442: LIST
81443: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
81444: LD_ADDR_VAR 0 28
81448: PUSH
81449: LD_INT 3
81451: NEG
81452: PUSH
81453: LD_INT 3
81455: NEG
81456: PUSH
81457: EMPTY
81458: LIST
81459: LIST
81460: PUSH
81461: LD_INT 3
81463: NEG
81464: PUSH
81465: LD_INT 4
81467: NEG
81468: PUSH
81469: EMPTY
81470: LIST
81471: LIST
81472: PUSH
81473: LD_INT 4
81475: NEG
81476: PUSH
81477: LD_INT 3
81479: NEG
81480: PUSH
81481: EMPTY
81482: LIST
81483: LIST
81484: PUSH
81485: EMPTY
81486: LIST
81487: LIST
81488: LIST
81489: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
81490: LD_ADDR_VAR 0 29
81494: PUSH
81495: LD_INT 1
81497: NEG
81498: PUSH
81499: LD_INT 3
81501: NEG
81502: PUSH
81503: EMPTY
81504: LIST
81505: LIST
81506: PUSH
81507: LD_INT 0
81509: PUSH
81510: LD_INT 3
81512: NEG
81513: PUSH
81514: EMPTY
81515: LIST
81516: LIST
81517: PUSH
81518: LD_INT 1
81520: PUSH
81521: LD_INT 2
81523: NEG
81524: PUSH
81525: EMPTY
81526: LIST
81527: LIST
81528: PUSH
81529: LD_INT 1
81531: NEG
81532: PUSH
81533: LD_INT 4
81535: NEG
81536: PUSH
81537: EMPTY
81538: LIST
81539: LIST
81540: PUSH
81541: LD_INT 0
81543: PUSH
81544: LD_INT 4
81546: NEG
81547: PUSH
81548: EMPTY
81549: LIST
81550: LIST
81551: PUSH
81552: LD_INT 1
81554: PUSH
81555: LD_INT 3
81557: NEG
81558: PUSH
81559: EMPTY
81560: LIST
81561: LIST
81562: PUSH
81563: LD_INT 1
81565: NEG
81566: PUSH
81567: LD_INT 5
81569: NEG
81570: PUSH
81571: EMPTY
81572: LIST
81573: LIST
81574: PUSH
81575: LD_INT 0
81577: PUSH
81578: LD_INT 5
81580: NEG
81581: PUSH
81582: EMPTY
81583: LIST
81584: LIST
81585: PUSH
81586: LD_INT 1
81588: PUSH
81589: LD_INT 4
81591: NEG
81592: PUSH
81593: EMPTY
81594: LIST
81595: LIST
81596: PUSH
81597: LD_INT 1
81599: NEG
81600: PUSH
81601: LD_INT 6
81603: NEG
81604: PUSH
81605: EMPTY
81606: LIST
81607: LIST
81608: PUSH
81609: LD_INT 0
81611: PUSH
81612: LD_INT 6
81614: NEG
81615: PUSH
81616: EMPTY
81617: LIST
81618: LIST
81619: PUSH
81620: LD_INT 1
81622: PUSH
81623: LD_INT 5
81625: NEG
81626: PUSH
81627: EMPTY
81628: LIST
81629: LIST
81630: PUSH
81631: EMPTY
81632: LIST
81633: LIST
81634: LIST
81635: LIST
81636: LIST
81637: LIST
81638: LIST
81639: LIST
81640: LIST
81641: LIST
81642: LIST
81643: LIST
81644: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
81645: LD_ADDR_VAR 0 30
81649: PUSH
81650: LD_INT 2
81652: PUSH
81653: LD_INT 1
81655: NEG
81656: PUSH
81657: EMPTY
81658: LIST
81659: LIST
81660: PUSH
81661: LD_INT 3
81663: PUSH
81664: LD_INT 0
81666: PUSH
81667: EMPTY
81668: LIST
81669: LIST
81670: PUSH
81671: LD_INT 3
81673: PUSH
81674: LD_INT 1
81676: PUSH
81677: EMPTY
81678: LIST
81679: LIST
81680: PUSH
81681: LD_INT 3
81683: PUSH
81684: LD_INT 1
81686: NEG
81687: PUSH
81688: EMPTY
81689: LIST
81690: LIST
81691: PUSH
81692: LD_INT 4
81694: PUSH
81695: LD_INT 0
81697: PUSH
81698: EMPTY
81699: LIST
81700: LIST
81701: PUSH
81702: LD_INT 4
81704: PUSH
81705: LD_INT 1
81707: PUSH
81708: EMPTY
81709: LIST
81710: LIST
81711: PUSH
81712: LD_INT 4
81714: PUSH
81715: LD_INT 1
81717: NEG
81718: PUSH
81719: EMPTY
81720: LIST
81721: LIST
81722: PUSH
81723: LD_INT 5
81725: PUSH
81726: LD_INT 0
81728: PUSH
81729: EMPTY
81730: LIST
81731: LIST
81732: PUSH
81733: LD_INT 5
81735: PUSH
81736: LD_INT 1
81738: PUSH
81739: EMPTY
81740: LIST
81741: LIST
81742: PUSH
81743: LD_INT 5
81745: PUSH
81746: LD_INT 1
81748: NEG
81749: PUSH
81750: EMPTY
81751: LIST
81752: LIST
81753: PUSH
81754: LD_INT 6
81756: PUSH
81757: LD_INT 0
81759: PUSH
81760: EMPTY
81761: LIST
81762: LIST
81763: PUSH
81764: LD_INT 6
81766: PUSH
81767: LD_INT 1
81769: PUSH
81770: EMPTY
81771: LIST
81772: LIST
81773: PUSH
81774: EMPTY
81775: LIST
81776: LIST
81777: LIST
81778: LIST
81779: LIST
81780: LIST
81781: LIST
81782: LIST
81783: LIST
81784: LIST
81785: LIST
81786: LIST
81787: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
81788: LD_ADDR_VAR 0 31
81792: PUSH
81793: LD_INT 3
81795: PUSH
81796: LD_INT 2
81798: PUSH
81799: EMPTY
81800: LIST
81801: LIST
81802: PUSH
81803: LD_INT 3
81805: PUSH
81806: LD_INT 3
81808: PUSH
81809: EMPTY
81810: LIST
81811: LIST
81812: PUSH
81813: LD_INT 2
81815: PUSH
81816: LD_INT 3
81818: PUSH
81819: EMPTY
81820: LIST
81821: LIST
81822: PUSH
81823: LD_INT 4
81825: PUSH
81826: LD_INT 3
81828: PUSH
81829: EMPTY
81830: LIST
81831: LIST
81832: PUSH
81833: LD_INT 4
81835: PUSH
81836: LD_INT 4
81838: PUSH
81839: EMPTY
81840: LIST
81841: LIST
81842: PUSH
81843: LD_INT 3
81845: PUSH
81846: LD_INT 4
81848: PUSH
81849: EMPTY
81850: LIST
81851: LIST
81852: PUSH
81853: LD_INT 5
81855: PUSH
81856: LD_INT 4
81858: PUSH
81859: EMPTY
81860: LIST
81861: LIST
81862: PUSH
81863: LD_INT 5
81865: PUSH
81866: LD_INT 5
81868: PUSH
81869: EMPTY
81870: LIST
81871: LIST
81872: PUSH
81873: LD_INT 4
81875: PUSH
81876: LD_INT 5
81878: PUSH
81879: EMPTY
81880: LIST
81881: LIST
81882: PUSH
81883: LD_INT 6
81885: PUSH
81886: LD_INT 5
81888: PUSH
81889: EMPTY
81890: LIST
81891: LIST
81892: PUSH
81893: LD_INT 6
81895: PUSH
81896: LD_INT 6
81898: PUSH
81899: EMPTY
81900: LIST
81901: LIST
81902: PUSH
81903: LD_INT 5
81905: PUSH
81906: LD_INT 6
81908: PUSH
81909: EMPTY
81910: LIST
81911: LIST
81912: PUSH
81913: EMPTY
81914: LIST
81915: LIST
81916: LIST
81917: LIST
81918: LIST
81919: LIST
81920: LIST
81921: LIST
81922: LIST
81923: LIST
81924: LIST
81925: LIST
81926: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
81927: LD_ADDR_VAR 0 32
81931: PUSH
81932: LD_INT 1
81934: PUSH
81935: LD_INT 3
81937: PUSH
81938: EMPTY
81939: LIST
81940: LIST
81941: PUSH
81942: LD_INT 0
81944: PUSH
81945: LD_INT 3
81947: PUSH
81948: EMPTY
81949: LIST
81950: LIST
81951: PUSH
81952: LD_INT 1
81954: NEG
81955: PUSH
81956: LD_INT 2
81958: PUSH
81959: EMPTY
81960: LIST
81961: LIST
81962: PUSH
81963: LD_INT 1
81965: PUSH
81966: LD_INT 4
81968: PUSH
81969: EMPTY
81970: LIST
81971: LIST
81972: PUSH
81973: LD_INT 0
81975: PUSH
81976: LD_INT 4
81978: PUSH
81979: EMPTY
81980: LIST
81981: LIST
81982: PUSH
81983: LD_INT 1
81985: NEG
81986: PUSH
81987: LD_INT 3
81989: PUSH
81990: EMPTY
81991: LIST
81992: LIST
81993: PUSH
81994: LD_INT 1
81996: PUSH
81997: LD_INT 5
81999: PUSH
82000: EMPTY
82001: LIST
82002: LIST
82003: PUSH
82004: LD_INT 0
82006: PUSH
82007: LD_INT 5
82009: PUSH
82010: EMPTY
82011: LIST
82012: LIST
82013: PUSH
82014: LD_INT 1
82016: NEG
82017: PUSH
82018: LD_INT 4
82020: PUSH
82021: EMPTY
82022: LIST
82023: LIST
82024: PUSH
82025: LD_INT 1
82027: PUSH
82028: LD_INT 6
82030: PUSH
82031: EMPTY
82032: LIST
82033: LIST
82034: PUSH
82035: LD_INT 0
82037: PUSH
82038: LD_INT 6
82040: PUSH
82041: EMPTY
82042: LIST
82043: LIST
82044: PUSH
82045: LD_INT 1
82047: NEG
82048: PUSH
82049: LD_INT 5
82051: PUSH
82052: EMPTY
82053: LIST
82054: LIST
82055: PUSH
82056: EMPTY
82057: LIST
82058: LIST
82059: LIST
82060: LIST
82061: LIST
82062: LIST
82063: LIST
82064: LIST
82065: LIST
82066: LIST
82067: LIST
82068: LIST
82069: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
82070: LD_ADDR_VAR 0 33
82074: PUSH
82075: LD_INT 2
82077: NEG
82078: PUSH
82079: LD_INT 1
82081: PUSH
82082: EMPTY
82083: LIST
82084: LIST
82085: PUSH
82086: LD_INT 3
82088: NEG
82089: PUSH
82090: LD_INT 0
82092: PUSH
82093: EMPTY
82094: LIST
82095: LIST
82096: PUSH
82097: LD_INT 3
82099: NEG
82100: PUSH
82101: LD_INT 1
82103: NEG
82104: PUSH
82105: EMPTY
82106: LIST
82107: LIST
82108: PUSH
82109: LD_INT 3
82111: NEG
82112: PUSH
82113: LD_INT 1
82115: PUSH
82116: EMPTY
82117: LIST
82118: LIST
82119: PUSH
82120: LD_INT 4
82122: NEG
82123: PUSH
82124: LD_INT 0
82126: PUSH
82127: EMPTY
82128: LIST
82129: LIST
82130: PUSH
82131: LD_INT 4
82133: NEG
82134: PUSH
82135: LD_INT 1
82137: NEG
82138: PUSH
82139: EMPTY
82140: LIST
82141: LIST
82142: PUSH
82143: LD_INT 4
82145: NEG
82146: PUSH
82147: LD_INT 1
82149: PUSH
82150: EMPTY
82151: LIST
82152: LIST
82153: PUSH
82154: LD_INT 5
82156: NEG
82157: PUSH
82158: LD_INT 0
82160: PUSH
82161: EMPTY
82162: LIST
82163: LIST
82164: PUSH
82165: LD_INT 5
82167: NEG
82168: PUSH
82169: LD_INT 1
82171: NEG
82172: PUSH
82173: EMPTY
82174: LIST
82175: LIST
82176: PUSH
82177: LD_INT 5
82179: NEG
82180: PUSH
82181: LD_INT 1
82183: PUSH
82184: EMPTY
82185: LIST
82186: LIST
82187: PUSH
82188: LD_INT 6
82190: NEG
82191: PUSH
82192: LD_INT 0
82194: PUSH
82195: EMPTY
82196: LIST
82197: LIST
82198: PUSH
82199: LD_INT 6
82201: NEG
82202: PUSH
82203: LD_INT 1
82205: NEG
82206: PUSH
82207: EMPTY
82208: LIST
82209: LIST
82210: PUSH
82211: EMPTY
82212: LIST
82213: LIST
82214: LIST
82215: LIST
82216: LIST
82217: LIST
82218: LIST
82219: LIST
82220: LIST
82221: LIST
82222: LIST
82223: LIST
82224: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
82225: LD_ADDR_VAR 0 34
82229: PUSH
82230: LD_INT 2
82232: NEG
82233: PUSH
82234: LD_INT 3
82236: NEG
82237: PUSH
82238: EMPTY
82239: LIST
82240: LIST
82241: PUSH
82242: LD_INT 3
82244: NEG
82245: PUSH
82246: LD_INT 2
82248: NEG
82249: PUSH
82250: EMPTY
82251: LIST
82252: LIST
82253: PUSH
82254: LD_INT 3
82256: NEG
82257: PUSH
82258: LD_INT 3
82260: NEG
82261: PUSH
82262: EMPTY
82263: LIST
82264: LIST
82265: PUSH
82266: LD_INT 3
82268: NEG
82269: PUSH
82270: LD_INT 4
82272: NEG
82273: PUSH
82274: EMPTY
82275: LIST
82276: LIST
82277: PUSH
82278: LD_INT 4
82280: NEG
82281: PUSH
82282: LD_INT 3
82284: NEG
82285: PUSH
82286: EMPTY
82287: LIST
82288: LIST
82289: PUSH
82290: LD_INT 4
82292: NEG
82293: PUSH
82294: LD_INT 4
82296: NEG
82297: PUSH
82298: EMPTY
82299: LIST
82300: LIST
82301: PUSH
82302: LD_INT 4
82304: NEG
82305: PUSH
82306: LD_INT 5
82308: NEG
82309: PUSH
82310: EMPTY
82311: LIST
82312: LIST
82313: PUSH
82314: LD_INT 5
82316: NEG
82317: PUSH
82318: LD_INT 4
82320: NEG
82321: PUSH
82322: EMPTY
82323: LIST
82324: LIST
82325: PUSH
82326: LD_INT 5
82328: NEG
82329: PUSH
82330: LD_INT 5
82332: NEG
82333: PUSH
82334: EMPTY
82335: LIST
82336: LIST
82337: PUSH
82338: LD_INT 5
82340: NEG
82341: PUSH
82342: LD_INT 6
82344: NEG
82345: PUSH
82346: EMPTY
82347: LIST
82348: LIST
82349: PUSH
82350: LD_INT 6
82352: NEG
82353: PUSH
82354: LD_INT 5
82356: NEG
82357: PUSH
82358: EMPTY
82359: LIST
82360: LIST
82361: PUSH
82362: LD_INT 6
82364: NEG
82365: PUSH
82366: LD_INT 6
82368: NEG
82369: PUSH
82370: EMPTY
82371: LIST
82372: LIST
82373: PUSH
82374: EMPTY
82375: LIST
82376: LIST
82377: LIST
82378: LIST
82379: LIST
82380: LIST
82381: LIST
82382: LIST
82383: LIST
82384: LIST
82385: LIST
82386: LIST
82387: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
82388: LD_ADDR_VAR 0 41
82392: PUSH
82393: LD_INT 0
82395: PUSH
82396: LD_INT 2
82398: NEG
82399: PUSH
82400: EMPTY
82401: LIST
82402: LIST
82403: PUSH
82404: LD_INT 1
82406: NEG
82407: PUSH
82408: LD_INT 3
82410: NEG
82411: PUSH
82412: EMPTY
82413: LIST
82414: LIST
82415: PUSH
82416: LD_INT 1
82418: PUSH
82419: LD_INT 2
82421: NEG
82422: PUSH
82423: EMPTY
82424: LIST
82425: LIST
82426: PUSH
82427: EMPTY
82428: LIST
82429: LIST
82430: LIST
82431: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
82432: LD_ADDR_VAR 0 42
82436: PUSH
82437: LD_INT 2
82439: PUSH
82440: LD_INT 0
82442: PUSH
82443: EMPTY
82444: LIST
82445: LIST
82446: PUSH
82447: LD_INT 2
82449: PUSH
82450: LD_INT 1
82452: NEG
82453: PUSH
82454: EMPTY
82455: LIST
82456: LIST
82457: PUSH
82458: LD_INT 3
82460: PUSH
82461: LD_INT 1
82463: PUSH
82464: EMPTY
82465: LIST
82466: LIST
82467: PUSH
82468: EMPTY
82469: LIST
82470: LIST
82471: LIST
82472: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
82473: LD_ADDR_VAR 0 43
82477: PUSH
82478: LD_INT 2
82480: PUSH
82481: LD_INT 2
82483: PUSH
82484: EMPTY
82485: LIST
82486: LIST
82487: PUSH
82488: LD_INT 3
82490: PUSH
82491: LD_INT 2
82493: PUSH
82494: EMPTY
82495: LIST
82496: LIST
82497: PUSH
82498: LD_INT 2
82500: PUSH
82501: LD_INT 3
82503: PUSH
82504: EMPTY
82505: LIST
82506: LIST
82507: PUSH
82508: EMPTY
82509: LIST
82510: LIST
82511: LIST
82512: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
82513: LD_ADDR_VAR 0 44
82517: PUSH
82518: LD_INT 0
82520: PUSH
82521: LD_INT 2
82523: PUSH
82524: EMPTY
82525: LIST
82526: LIST
82527: PUSH
82528: LD_INT 1
82530: PUSH
82531: LD_INT 3
82533: PUSH
82534: EMPTY
82535: LIST
82536: LIST
82537: PUSH
82538: LD_INT 1
82540: NEG
82541: PUSH
82542: LD_INT 2
82544: PUSH
82545: EMPTY
82546: LIST
82547: LIST
82548: PUSH
82549: EMPTY
82550: LIST
82551: LIST
82552: LIST
82553: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
82554: LD_ADDR_VAR 0 45
82558: PUSH
82559: LD_INT 2
82561: NEG
82562: PUSH
82563: LD_INT 0
82565: PUSH
82566: EMPTY
82567: LIST
82568: LIST
82569: PUSH
82570: LD_INT 2
82572: NEG
82573: PUSH
82574: LD_INT 1
82576: PUSH
82577: EMPTY
82578: LIST
82579: LIST
82580: PUSH
82581: LD_INT 3
82583: NEG
82584: PUSH
82585: LD_INT 1
82587: NEG
82588: PUSH
82589: EMPTY
82590: LIST
82591: LIST
82592: PUSH
82593: EMPTY
82594: LIST
82595: LIST
82596: LIST
82597: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
82598: LD_ADDR_VAR 0 46
82602: PUSH
82603: LD_INT 2
82605: NEG
82606: PUSH
82607: LD_INT 2
82609: NEG
82610: PUSH
82611: EMPTY
82612: LIST
82613: LIST
82614: PUSH
82615: LD_INT 2
82617: NEG
82618: PUSH
82619: LD_INT 3
82621: NEG
82622: PUSH
82623: EMPTY
82624: LIST
82625: LIST
82626: PUSH
82627: LD_INT 3
82629: NEG
82630: PUSH
82631: LD_INT 2
82633: NEG
82634: PUSH
82635: EMPTY
82636: LIST
82637: LIST
82638: PUSH
82639: EMPTY
82640: LIST
82641: LIST
82642: LIST
82643: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
82644: LD_ADDR_VAR 0 47
82648: PUSH
82649: LD_INT 2
82651: NEG
82652: PUSH
82653: LD_INT 3
82655: NEG
82656: PUSH
82657: EMPTY
82658: LIST
82659: LIST
82660: PUSH
82661: LD_INT 1
82663: NEG
82664: PUSH
82665: LD_INT 3
82667: NEG
82668: PUSH
82669: EMPTY
82670: LIST
82671: LIST
82672: PUSH
82673: EMPTY
82674: LIST
82675: LIST
82676: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
82677: LD_ADDR_VAR 0 48
82681: PUSH
82682: LD_INT 1
82684: PUSH
82685: LD_INT 2
82687: NEG
82688: PUSH
82689: EMPTY
82690: LIST
82691: LIST
82692: PUSH
82693: LD_INT 2
82695: PUSH
82696: LD_INT 1
82698: NEG
82699: PUSH
82700: EMPTY
82701: LIST
82702: LIST
82703: PUSH
82704: EMPTY
82705: LIST
82706: LIST
82707: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
82708: LD_ADDR_VAR 0 49
82712: PUSH
82713: LD_INT 3
82715: PUSH
82716: LD_INT 1
82718: PUSH
82719: EMPTY
82720: LIST
82721: LIST
82722: PUSH
82723: LD_INT 3
82725: PUSH
82726: LD_INT 2
82728: PUSH
82729: EMPTY
82730: LIST
82731: LIST
82732: PUSH
82733: EMPTY
82734: LIST
82735: LIST
82736: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
82737: LD_ADDR_VAR 0 50
82741: PUSH
82742: LD_INT 2
82744: PUSH
82745: LD_INT 3
82747: PUSH
82748: EMPTY
82749: LIST
82750: LIST
82751: PUSH
82752: LD_INT 1
82754: PUSH
82755: LD_INT 3
82757: PUSH
82758: EMPTY
82759: LIST
82760: LIST
82761: PUSH
82762: EMPTY
82763: LIST
82764: LIST
82765: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
82766: LD_ADDR_VAR 0 51
82770: PUSH
82771: LD_INT 1
82773: NEG
82774: PUSH
82775: LD_INT 2
82777: PUSH
82778: EMPTY
82779: LIST
82780: LIST
82781: PUSH
82782: LD_INT 2
82784: NEG
82785: PUSH
82786: LD_INT 1
82788: PUSH
82789: EMPTY
82790: LIST
82791: LIST
82792: PUSH
82793: EMPTY
82794: LIST
82795: LIST
82796: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
82797: LD_ADDR_VAR 0 52
82801: PUSH
82802: LD_INT 3
82804: NEG
82805: PUSH
82806: LD_INT 1
82808: NEG
82809: PUSH
82810: EMPTY
82811: LIST
82812: LIST
82813: PUSH
82814: LD_INT 3
82816: NEG
82817: PUSH
82818: LD_INT 2
82820: NEG
82821: PUSH
82822: EMPTY
82823: LIST
82824: LIST
82825: PUSH
82826: EMPTY
82827: LIST
82828: LIST
82829: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
82830: LD_ADDR_VAR 0 53
82834: PUSH
82835: LD_INT 1
82837: NEG
82838: PUSH
82839: LD_INT 3
82841: NEG
82842: PUSH
82843: EMPTY
82844: LIST
82845: LIST
82846: PUSH
82847: LD_INT 0
82849: PUSH
82850: LD_INT 3
82852: NEG
82853: PUSH
82854: EMPTY
82855: LIST
82856: LIST
82857: PUSH
82858: LD_INT 1
82860: PUSH
82861: LD_INT 2
82863: NEG
82864: PUSH
82865: EMPTY
82866: LIST
82867: LIST
82868: PUSH
82869: EMPTY
82870: LIST
82871: LIST
82872: LIST
82873: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
82874: LD_ADDR_VAR 0 54
82878: PUSH
82879: LD_INT 2
82881: PUSH
82882: LD_INT 1
82884: NEG
82885: PUSH
82886: EMPTY
82887: LIST
82888: LIST
82889: PUSH
82890: LD_INT 3
82892: PUSH
82893: LD_INT 0
82895: PUSH
82896: EMPTY
82897: LIST
82898: LIST
82899: PUSH
82900: LD_INT 3
82902: PUSH
82903: LD_INT 1
82905: PUSH
82906: EMPTY
82907: LIST
82908: LIST
82909: PUSH
82910: EMPTY
82911: LIST
82912: LIST
82913: LIST
82914: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
82915: LD_ADDR_VAR 0 55
82919: PUSH
82920: LD_INT 3
82922: PUSH
82923: LD_INT 2
82925: PUSH
82926: EMPTY
82927: LIST
82928: LIST
82929: PUSH
82930: LD_INT 3
82932: PUSH
82933: LD_INT 3
82935: PUSH
82936: EMPTY
82937: LIST
82938: LIST
82939: PUSH
82940: LD_INT 2
82942: PUSH
82943: LD_INT 3
82945: PUSH
82946: EMPTY
82947: LIST
82948: LIST
82949: PUSH
82950: EMPTY
82951: LIST
82952: LIST
82953: LIST
82954: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
82955: LD_ADDR_VAR 0 56
82959: PUSH
82960: LD_INT 1
82962: PUSH
82963: LD_INT 3
82965: PUSH
82966: EMPTY
82967: LIST
82968: LIST
82969: PUSH
82970: LD_INT 0
82972: PUSH
82973: LD_INT 3
82975: PUSH
82976: EMPTY
82977: LIST
82978: LIST
82979: PUSH
82980: LD_INT 1
82982: NEG
82983: PUSH
82984: LD_INT 2
82986: PUSH
82987: EMPTY
82988: LIST
82989: LIST
82990: PUSH
82991: EMPTY
82992: LIST
82993: LIST
82994: LIST
82995: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
82996: LD_ADDR_VAR 0 57
83000: PUSH
83001: LD_INT 2
83003: NEG
83004: PUSH
83005: LD_INT 1
83007: PUSH
83008: EMPTY
83009: LIST
83010: LIST
83011: PUSH
83012: LD_INT 3
83014: NEG
83015: PUSH
83016: LD_INT 0
83018: PUSH
83019: EMPTY
83020: LIST
83021: LIST
83022: PUSH
83023: LD_INT 3
83025: NEG
83026: PUSH
83027: LD_INT 1
83029: NEG
83030: PUSH
83031: EMPTY
83032: LIST
83033: LIST
83034: PUSH
83035: EMPTY
83036: LIST
83037: LIST
83038: LIST
83039: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
83040: LD_ADDR_VAR 0 58
83044: PUSH
83045: LD_INT 2
83047: NEG
83048: PUSH
83049: LD_INT 3
83051: NEG
83052: PUSH
83053: EMPTY
83054: LIST
83055: LIST
83056: PUSH
83057: LD_INT 3
83059: NEG
83060: PUSH
83061: LD_INT 2
83063: NEG
83064: PUSH
83065: EMPTY
83066: LIST
83067: LIST
83068: PUSH
83069: LD_INT 3
83071: NEG
83072: PUSH
83073: LD_INT 3
83075: NEG
83076: PUSH
83077: EMPTY
83078: LIST
83079: LIST
83080: PUSH
83081: EMPTY
83082: LIST
83083: LIST
83084: LIST
83085: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
83086: LD_ADDR_VAR 0 59
83090: PUSH
83091: LD_INT 1
83093: NEG
83094: PUSH
83095: LD_INT 2
83097: NEG
83098: PUSH
83099: EMPTY
83100: LIST
83101: LIST
83102: PUSH
83103: LD_INT 0
83105: PUSH
83106: LD_INT 2
83108: NEG
83109: PUSH
83110: EMPTY
83111: LIST
83112: LIST
83113: PUSH
83114: LD_INT 1
83116: PUSH
83117: LD_INT 1
83119: NEG
83120: PUSH
83121: EMPTY
83122: LIST
83123: LIST
83124: PUSH
83125: EMPTY
83126: LIST
83127: LIST
83128: LIST
83129: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
83130: LD_ADDR_VAR 0 60
83134: PUSH
83135: LD_INT 1
83137: PUSH
83138: LD_INT 1
83140: NEG
83141: PUSH
83142: EMPTY
83143: LIST
83144: LIST
83145: PUSH
83146: LD_INT 2
83148: PUSH
83149: LD_INT 0
83151: PUSH
83152: EMPTY
83153: LIST
83154: LIST
83155: PUSH
83156: LD_INT 2
83158: PUSH
83159: LD_INT 1
83161: PUSH
83162: EMPTY
83163: LIST
83164: LIST
83165: PUSH
83166: EMPTY
83167: LIST
83168: LIST
83169: LIST
83170: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
83171: LD_ADDR_VAR 0 61
83175: PUSH
83176: LD_INT 2
83178: PUSH
83179: LD_INT 1
83181: PUSH
83182: EMPTY
83183: LIST
83184: LIST
83185: PUSH
83186: LD_INT 2
83188: PUSH
83189: LD_INT 2
83191: PUSH
83192: EMPTY
83193: LIST
83194: LIST
83195: PUSH
83196: LD_INT 1
83198: PUSH
83199: LD_INT 2
83201: PUSH
83202: EMPTY
83203: LIST
83204: LIST
83205: PUSH
83206: EMPTY
83207: LIST
83208: LIST
83209: LIST
83210: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
83211: LD_ADDR_VAR 0 62
83215: PUSH
83216: LD_INT 1
83218: PUSH
83219: LD_INT 2
83221: PUSH
83222: EMPTY
83223: LIST
83224: LIST
83225: PUSH
83226: LD_INT 0
83228: PUSH
83229: LD_INT 2
83231: PUSH
83232: EMPTY
83233: LIST
83234: LIST
83235: PUSH
83236: LD_INT 1
83238: NEG
83239: PUSH
83240: LD_INT 1
83242: PUSH
83243: EMPTY
83244: LIST
83245: LIST
83246: PUSH
83247: EMPTY
83248: LIST
83249: LIST
83250: LIST
83251: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
83252: LD_ADDR_VAR 0 63
83256: PUSH
83257: LD_INT 1
83259: NEG
83260: PUSH
83261: LD_INT 1
83263: PUSH
83264: EMPTY
83265: LIST
83266: LIST
83267: PUSH
83268: LD_INT 2
83270: NEG
83271: PUSH
83272: LD_INT 0
83274: PUSH
83275: EMPTY
83276: LIST
83277: LIST
83278: PUSH
83279: LD_INT 2
83281: NEG
83282: PUSH
83283: LD_INT 1
83285: NEG
83286: PUSH
83287: EMPTY
83288: LIST
83289: LIST
83290: PUSH
83291: EMPTY
83292: LIST
83293: LIST
83294: LIST
83295: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
83296: LD_ADDR_VAR 0 64
83300: PUSH
83301: LD_INT 1
83303: NEG
83304: PUSH
83305: LD_INT 2
83307: NEG
83308: PUSH
83309: EMPTY
83310: LIST
83311: LIST
83312: PUSH
83313: LD_INT 2
83315: NEG
83316: PUSH
83317: LD_INT 1
83319: NEG
83320: PUSH
83321: EMPTY
83322: LIST
83323: LIST
83324: PUSH
83325: LD_INT 2
83327: NEG
83328: PUSH
83329: LD_INT 2
83331: NEG
83332: PUSH
83333: EMPTY
83334: LIST
83335: LIST
83336: PUSH
83337: EMPTY
83338: LIST
83339: LIST
83340: LIST
83341: ST_TO_ADDR
// end ; 2 :
83342: GO 86608
83344: LD_INT 2
83346: DOUBLE
83347: EQUAL
83348: IFTRUE 83352
83350: GO 86607
83352: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
83353: LD_ADDR_VAR 0 29
83357: PUSH
83358: LD_INT 4
83360: PUSH
83361: LD_INT 0
83363: PUSH
83364: EMPTY
83365: LIST
83366: LIST
83367: PUSH
83368: LD_INT 4
83370: PUSH
83371: LD_INT 1
83373: NEG
83374: PUSH
83375: EMPTY
83376: LIST
83377: LIST
83378: PUSH
83379: LD_INT 5
83381: PUSH
83382: LD_INT 0
83384: PUSH
83385: EMPTY
83386: LIST
83387: LIST
83388: PUSH
83389: LD_INT 5
83391: PUSH
83392: LD_INT 1
83394: PUSH
83395: EMPTY
83396: LIST
83397: LIST
83398: PUSH
83399: LD_INT 4
83401: PUSH
83402: LD_INT 1
83404: PUSH
83405: EMPTY
83406: LIST
83407: LIST
83408: PUSH
83409: LD_INT 3
83411: PUSH
83412: LD_INT 0
83414: PUSH
83415: EMPTY
83416: LIST
83417: LIST
83418: PUSH
83419: LD_INT 3
83421: PUSH
83422: LD_INT 1
83424: NEG
83425: PUSH
83426: EMPTY
83427: LIST
83428: LIST
83429: PUSH
83430: LD_INT 3
83432: PUSH
83433: LD_INT 2
83435: NEG
83436: PUSH
83437: EMPTY
83438: LIST
83439: LIST
83440: PUSH
83441: LD_INT 5
83443: PUSH
83444: LD_INT 2
83446: PUSH
83447: EMPTY
83448: LIST
83449: LIST
83450: PUSH
83451: LD_INT 3
83453: PUSH
83454: LD_INT 3
83456: PUSH
83457: EMPTY
83458: LIST
83459: LIST
83460: PUSH
83461: LD_INT 3
83463: PUSH
83464: LD_INT 2
83466: PUSH
83467: EMPTY
83468: LIST
83469: LIST
83470: PUSH
83471: LD_INT 4
83473: PUSH
83474: LD_INT 3
83476: PUSH
83477: EMPTY
83478: LIST
83479: LIST
83480: PUSH
83481: LD_INT 4
83483: PUSH
83484: LD_INT 4
83486: PUSH
83487: EMPTY
83488: LIST
83489: LIST
83490: PUSH
83491: LD_INT 3
83493: PUSH
83494: LD_INT 4
83496: PUSH
83497: EMPTY
83498: LIST
83499: LIST
83500: PUSH
83501: LD_INT 2
83503: PUSH
83504: LD_INT 3
83506: PUSH
83507: EMPTY
83508: LIST
83509: LIST
83510: PUSH
83511: LD_INT 2
83513: PUSH
83514: LD_INT 2
83516: PUSH
83517: EMPTY
83518: LIST
83519: LIST
83520: PUSH
83521: LD_INT 4
83523: PUSH
83524: LD_INT 2
83526: PUSH
83527: EMPTY
83528: LIST
83529: LIST
83530: PUSH
83531: LD_INT 2
83533: PUSH
83534: LD_INT 4
83536: PUSH
83537: EMPTY
83538: LIST
83539: LIST
83540: PUSH
83541: LD_INT 0
83543: PUSH
83544: LD_INT 4
83546: PUSH
83547: EMPTY
83548: LIST
83549: LIST
83550: PUSH
83551: LD_INT 0
83553: PUSH
83554: LD_INT 3
83556: PUSH
83557: EMPTY
83558: LIST
83559: LIST
83560: PUSH
83561: LD_INT 1
83563: PUSH
83564: LD_INT 4
83566: PUSH
83567: EMPTY
83568: LIST
83569: LIST
83570: PUSH
83571: LD_INT 1
83573: PUSH
83574: LD_INT 5
83576: PUSH
83577: EMPTY
83578: LIST
83579: LIST
83580: PUSH
83581: LD_INT 0
83583: PUSH
83584: LD_INT 5
83586: PUSH
83587: EMPTY
83588: LIST
83589: LIST
83590: PUSH
83591: LD_INT 1
83593: NEG
83594: PUSH
83595: LD_INT 4
83597: PUSH
83598: EMPTY
83599: LIST
83600: LIST
83601: PUSH
83602: LD_INT 1
83604: NEG
83605: PUSH
83606: LD_INT 3
83608: PUSH
83609: EMPTY
83610: LIST
83611: LIST
83612: PUSH
83613: LD_INT 2
83615: PUSH
83616: LD_INT 5
83618: PUSH
83619: EMPTY
83620: LIST
83621: LIST
83622: PUSH
83623: LD_INT 2
83625: NEG
83626: PUSH
83627: LD_INT 3
83629: PUSH
83630: EMPTY
83631: LIST
83632: LIST
83633: PUSH
83634: LD_INT 3
83636: NEG
83637: PUSH
83638: LD_INT 0
83640: PUSH
83641: EMPTY
83642: LIST
83643: LIST
83644: PUSH
83645: LD_INT 3
83647: NEG
83648: PUSH
83649: LD_INT 1
83651: NEG
83652: PUSH
83653: EMPTY
83654: LIST
83655: LIST
83656: PUSH
83657: LD_INT 2
83659: NEG
83660: PUSH
83661: LD_INT 0
83663: PUSH
83664: EMPTY
83665: LIST
83666: LIST
83667: PUSH
83668: LD_INT 2
83670: NEG
83671: PUSH
83672: LD_INT 1
83674: PUSH
83675: EMPTY
83676: LIST
83677: LIST
83678: PUSH
83679: LD_INT 3
83681: NEG
83682: PUSH
83683: LD_INT 1
83685: PUSH
83686: EMPTY
83687: LIST
83688: LIST
83689: PUSH
83690: LD_INT 4
83692: NEG
83693: PUSH
83694: LD_INT 0
83696: PUSH
83697: EMPTY
83698: LIST
83699: LIST
83700: PUSH
83701: LD_INT 4
83703: NEG
83704: PUSH
83705: LD_INT 1
83707: NEG
83708: PUSH
83709: EMPTY
83710: LIST
83711: LIST
83712: PUSH
83713: LD_INT 4
83715: NEG
83716: PUSH
83717: LD_INT 2
83719: NEG
83720: PUSH
83721: EMPTY
83722: LIST
83723: LIST
83724: PUSH
83725: LD_INT 2
83727: NEG
83728: PUSH
83729: LD_INT 2
83731: PUSH
83732: EMPTY
83733: LIST
83734: LIST
83735: PUSH
83736: LD_INT 4
83738: NEG
83739: PUSH
83740: LD_INT 4
83742: NEG
83743: PUSH
83744: EMPTY
83745: LIST
83746: LIST
83747: PUSH
83748: LD_INT 4
83750: NEG
83751: PUSH
83752: LD_INT 5
83754: NEG
83755: PUSH
83756: EMPTY
83757: LIST
83758: LIST
83759: PUSH
83760: LD_INT 3
83762: NEG
83763: PUSH
83764: LD_INT 4
83766: NEG
83767: PUSH
83768: EMPTY
83769: LIST
83770: LIST
83771: PUSH
83772: LD_INT 3
83774: NEG
83775: PUSH
83776: LD_INT 3
83778: NEG
83779: PUSH
83780: EMPTY
83781: LIST
83782: LIST
83783: PUSH
83784: LD_INT 4
83786: NEG
83787: PUSH
83788: LD_INT 3
83790: NEG
83791: PUSH
83792: EMPTY
83793: LIST
83794: LIST
83795: PUSH
83796: LD_INT 5
83798: NEG
83799: PUSH
83800: LD_INT 4
83802: NEG
83803: PUSH
83804: EMPTY
83805: LIST
83806: LIST
83807: PUSH
83808: LD_INT 5
83810: NEG
83811: PUSH
83812: LD_INT 5
83814: NEG
83815: PUSH
83816: EMPTY
83817: LIST
83818: LIST
83819: PUSH
83820: LD_INT 3
83822: NEG
83823: PUSH
83824: LD_INT 5
83826: NEG
83827: PUSH
83828: EMPTY
83829: LIST
83830: LIST
83831: PUSH
83832: LD_INT 5
83834: NEG
83835: PUSH
83836: LD_INT 3
83838: NEG
83839: PUSH
83840: EMPTY
83841: LIST
83842: LIST
83843: PUSH
83844: EMPTY
83845: LIST
83846: LIST
83847: LIST
83848: LIST
83849: LIST
83850: LIST
83851: LIST
83852: LIST
83853: LIST
83854: LIST
83855: LIST
83856: LIST
83857: LIST
83858: LIST
83859: LIST
83860: LIST
83861: LIST
83862: LIST
83863: LIST
83864: LIST
83865: LIST
83866: LIST
83867: LIST
83868: LIST
83869: LIST
83870: LIST
83871: LIST
83872: LIST
83873: LIST
83874: LIST
83875: LIST
83876: LIST
83877: LIST
83878: LIST
83879: LIST
83880: LIST
83881: LIST
83882: LIST
83883: LIST
83884: LIST
83885: LIST
83886: LIST
83887: LIST
83888: LIST
83889: LIST
83890: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
83891: LD_ADDR_VAR 0 30
83895: PUSH
83896: LD_INT 4
83898: PUSH
83899: LD_INT 4
83901: PUSH
83902: EMPTY
83903: LIST
83904: LIST
83905: PUSH
83906: LD_INT 4
83908: PUSH
83909: LD_INT 3
83911: PUSH
83912: EMPTY
83913: LIST
83914: LIST
83915: PUSH
83916: LD_INT 5
83918: PUSH
83919: LD_INT 4
83921: PUSH
83922: EMPTY
83923: LIST
83924: LIST
83925: PUSH
83926: LD_INT 5
83928: PUSH
83929: LD_INT 5
83931: PUSH
83932: EMPTY
83933: LIST
83934: LIST
83935: PUSH
83936: LD_INT 4
83938: PUSH
83939: LD_INT 5
83941: PUSH
83942: EMPTY
83943: LIST
83944: LIST
83945: PUSH
83946: LD_INT 3
83948: PUSH
83949: LD_INT 4
83951: PUSH
83952: EMPTY
83953: LIST
83954: LIST
83955: PUSH
83956: LD_INT 3
83958: PUSH
83959: LD_INT 3
83961: PUSH
83962: EMPTY
83963: LIST
83964: LIST
83965: PUSH
83966: LD_INT 5
83968: PUSH
83969: LD_INT 3
83971: PUSH
83972: EMPTY
83973: LIST
83974: LIST
83975: PUSH
83976: LD_INT 3
83978: PUSH
83979: LD_INT 5
83981: PUSH
83982: EMPTY
83983: LIST
83984: LIST
83985: PUSH
83986: LD_INT 0
83988: PUSH
83989: LD_INT 3
83991: PUSH
83992: EMPTY
83993: LIST
83994: LIST
83995: PUSH
83996: LD_INT 0
83998: PUSH
83999: LD_INT 2
84001: PUSH
84002: EMPTY
84003: LIST
84004: LIST
84005: PUSH
84006: LD_INT 1
84008: PUSH
84009: LD_INT 3
84011: PUSH
84012: EMPTY
84013: LIST
84014: LIST
84015: PUSH
84016: LD_INT 1
84018: PUSH
84019: LD_INT 4
84021: PUSH
84022: EMPTY
84023: LIST
84024: LIST
84025: PUSH
84026: LD_INT 0
84028: PUSH
84029: LD_INT 4
84031: PUSH
84032: EMPTY
84033: LIST
84034: LIST
84035: PUSH
84036: LD_INT 1
84038: NEG
84039: PUSH
84040: LD_INT 3
84042: PUSH
84043: EMPTY
84044: LIST
84045: LIST
84046: PUSH
84047: LD_INT 1
84049: NEG
84050: PUSH
84051: LD_INT 2
84053: PUSH
84054: EMPTY
84055: LIST
84056: LIST
84057: PUSH
84058: LD_INT 2
84060: PUSH
84061: LD_INT 4
84063: PUSH
84064: EMPTY
84065: LIST
84066: LIST
84067: PUSH
84068: LD_INT 2
84070: NEG
84071: PUSH
84072: LD_INT 2
84074: PUSH
84075: EMPTY
84076: LIST
84077: LIST
84078: PUSH
84079: LD_INT 4
84081: NEG
84082: PUSH
84083: LD_INT 0
84085: PUSH
84086: EMPTY
84087: LIST
84088: LIST
84089: PUSH
84090: LD_INT 4
84092: NEG
84093: PUSH
84094: LD_INT 1
84096: NEG
84097: PUSH
84098: EMPTY
84099: LIST
84100: LIST
84101: PUSH
84102: LD_INT 3
84104: NEG
84105: PUSH
84106: LD_INT 0
84108: PUSH
84109: EMPTY
84110: LIST
84111: LIST
84112: PUSH
84113: LD_INT 3
84115: NEG
84116: PUSH
84117: LD_INT 1
84119: PUSH
84120: EMPTY
84121: LIST
84122: LIST
84123: PUSH
84124: LD_INT 4
84126: NEG
84127: PUSH
84128: LD_INT 1
84130: PUSH
84131: EMPTY
84132: LIST
84133: LIST
84134: PUSH
84135: LD_INT 5
84137: NEG
84138: PUSH
84139: LD_INT 0
84141: PUSH
84142: EMPTY
84143: LIST
84144: LIST
84145: PUSH
84146: LD_INT 5
84148: NEG
84149: PUSH
84150: LD_INT 1
84152: NEG
84153: PUSH
84154: EMPTY
84155: LIST
84156: LIST
84157: PUSH
84158: LD_INT 5
84160: NEG
84161: PUSH
84162: LD_INT 2
84164: NEG
84165: PUSH
84166: EMPTY
84167: LIST
84168: LIST
84169: PUSH
84170: LD_INT 3
84172: NEG
84173: PUSH
84174: LD_INT 2
84176: PUSH
84177: EMPTY
84178: LIST
84179: LIST
84180: PUSH
84181: LD_INT 3
84183: NEG
84184: PUSH
84185: LD_INT 3
84187: NEG
84188: PUSH
84189: EMPTY
84190: LIST
84191: LIST
84192: PUSH
84193: LD_INT 3
84195: NEG
84196: PUSH
84197: LD_INT 4
84199: NEG
84200: PUSH
84201: EMPTY
84202: LIST
84203: LIST
84204: PUSH
84205: LD_INT 2
84207: NEG
84208: PUSH
84209: LD_INT 3
84211: NEG
84212: PUSH
84213: EMPTY
84214: LIST
84215: LIST
84216: PUSH
84217: LD_INT 2
84219: NEG
84220: PUSH
84221: LD_INT 2
84223: NEG
84224: PUSH
84225: EMPTY
84226: LIST
84227: LIST
84228: PUSH
84229: LD_INT 3
84231: NEG
84232: PUSH
84233: LD_INT 2
84235: NEG
84236: PUSH
84237: EMPTY
84238: LIST
84239: LIST
84240: PUSH
84241: LD_INT 4
84243: NEG
84244: PUSH
84245: LD_INT 3
84247: NEG
84248: PUSH
84249: EMPTY
84250: LIST
84251: LIST
84252: PUSH
84253: LD_INT 4
84255: NEG
84256: PUSH
84257: LD_INT 4
84259: NEG
84260: PUSH
84261: EMPTY
84262: LIST
84263: LIST
84264: PUSH
84265: LD_INT 2
84267: NEG
84268: PUSH
84269: LD_INT 4
84271: NEG
84272: PUSH
84273: EMPTY
84274: LIST
84275: LIST
84276: PUSH
84277: LD_INT 4
84279: NEG
84280: PUSH
84281: LD_INT 2
84283: NEG
84284: PUSH
84285: EMPTY
84286: LIST
84287: LIST
84288: PUSH
84289: LD_INT 0
84291: PUSH
84292: LD_INT 4
84294: NEG
84295: PUSH
84296: EMPTY
84297: LIST
84298: LIST
84299: PUSH
84300: LD_INT 0
84302: PUSH
84303: LD_INT 5
84305: NEG
84306: PUSH
84307: EMPTY
84308: LIST
84309: LIST
84310: PUSH
84311: LD_INT 1
84313: PUSH
84314: LD_INT 4
84316: NEG
84317: PUSH
84318: EMPTY
84319: LIST
84320: LIST
84321: PUSH
84322: LD_INT 1
84324: PUSH
84325: LD_INT 3
84327: NEG
84328: PUSH
84329: EMPTY
84330: LIST
84331: LIST
84332: PUSH
84333: LD_INT 0
84335: PUSH
84336: LD_INT 3
84338: NEG
84339: PUSH
84340: EMPTY
84341: LIST
84342: LIST
84343: PUSH
84344: LD_INT 1
84346: NEG
84347: PUSH
84348: LD_INT 4
84350: NEG
84351: PUSH
84352: EMPTY
84353: LIST
84354: LIST
84355: PUSH
84356: LD_INT 1
84358: NEG
84359: PUSH
84360: LD_INT 5
84362: NEG
84363: PUSH
84364: EMPTY
84365: LIST
84366: LIST
84367: PUSH
84368: LD_INT 2
84370: PUSH
84371: LD_INT 3
84373: NEG
84374: PUSH
84375: EMPTY
84376: LIST
84377: LIST
84378: PUSH
84379: LD_INT 2
84381: NEG
84382: PUSH
84383: LD_INT 5
84385: NEG
84386: PUSH
84387: EMPTY
84388: LIST
84389: LIST
84390: PUSH
84391: EMPTY
84392: LIST
84393: LIST
84394: LIST
84395: LIST
84396: LIST
84397: LIST
84398: LIST
84399: LIST
84400: LIST
84401: LIST
84402: LIST
84403: LIST
84404: LIST
84405: LIST
84406: LIST
84407: LIST
84408: LIST
84409: LIST
84410: LIST
84411: LIST
84412: LIST
84413: LIST
84414: LIST
84415: LIST
84416: LIST
84417: LIST
84418: LIST
84419: LIST
84420: LIST
84421: LIST
84422: LIST
84423: LIST
84424: LIST
84425: LIST
84426: LIST
84427: LIST
84428: LIST
84429: LIST
84430: LIST
84431: LIST
84432: LIST
84433: LIST
84434: LIST
84435: LIST
84436: LIST
84437: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
84438: LD_ADDR_VAR 0 31
84442: PUSH
84443: LD_INT 0
84445: PUSH
84446: LD_INT 4
84448: PUSH
84449: EMPTY
84450: LIST
84451: LIST
84452: PUSH
84453: LD_INT 0
84455: PUSH
84456: LD_INT 3
84458: PUSH
84459: EMPTY
84460: LIST
84461: LIST
84462: PUSH
84463: LD_INT 1
84465: PUSH
84466: LD_INT 4
84468: PUSH
84469: EMPTY
84470: LIST
84471: LIST
84472: PUSH
84473: LD_INT 1
84475: PUSH
84476: LD_INT 5
84478: PUSH
84479: EMPTY
84480: LIST
84481: LIST
84482: PUSH
84483: LD_INT 0
84485: PUSH
84486: LD_INT 5
84488: PUSH
84489: EMPTY
84490: LIST
84491: LIST
84492: PUSH
84493: LD_INT 1
84495: NEG
84496: PUSH
84497: LD_INT 4
84499: PUSH
84500: EMPTY
84501: LIST
84502: LIST
84503: PUSH
84504: LD_INT 1
84506: NEG
84507: PUSH
84508: LD_INT 3
84510: PUSH
84511: EMPTY
84512: LIST
84513: LIST
84514: PUSH
84515: LD_INT 2
84517: PUSH
84518: LD_INT 5
84520: PUSH
84521: EMPTY
84522: LIST
84523: LIST
84524: PUSH
84525: LD_INT 2
84527: NEG
84528: PUSH
84529: LD_INT 3
84531: PUSH
84532: EMPTY
84533: LIST
84534: LIST
84535: PUSH
84536: LD_INT 3
84538: NEG
84539: PUSH
84540: LD_INT 0
84542: PUSH
84543: EMPTY
84544: LIST
84545: LIST
84546: PUSH
84547: LD_INT 3
84549: NEG
84550: PUSH
84551: LD_INT 1
84553: NEG
84554: PUSH
84555: EMPTY
84556: LIST
84557: LIST
84558: PUSH
84559: LD_INT 2
84561: NEG
84562: PUSH
84563: LD_INT 0
84565: PUSH
84566: EMPTY
84567: LIST
84568: LIST
84569: PUSH
84570: LD_INT 2
84572: NEG
84573: PUSH
84574: LD_INT 1
84576: PUSH
84577: EMPTY
84578: LIST
84579: LIST
84580: PUSH
84581: LD_INT 3
84583: NEG
84584: PUSH
84585: LD_INT 1
84587: PUSH
84588: EMPTY
84589: LIST
84590: LIST
84591: PUSH
84592: LD_INT 4
84594: NEG
84595: PUSH
84596: LD_INT 0
84598: PUSH
84599: EMPTY
84600: LIST
84601: LIST
84602: PUSH
84603: LD_INT 4
84605: NEG
84606: PUSH
84607: LD_INT 1
84609: NEG
84610: PUSH
84611: EMPTY
84612: LIST
84613: LIST
84614: PUSH
84615: LD_INT 4
84617: NEG
84618: PUSH
84619: LD_INT 2
84621: NEG
84622: PUSH
84623: EMPTY
84624: LIST
84625: LIST
84626: PUSH
84627: LD_INT 2
84629: NEG
84630: PUSH
84631: LD_INT 2
84633: PUSH
84634: EMPTY
84635: LIST
84636: LIST
84637: PUSH
84638: LD_INT 4
84640: NEG
84641: PUSH
84642: LD_INT 4
84644: NEG
84645: PUSH
84646: EMPTY
84647: LIST
84648: LIST
84649: PUSH
84650: LD_INT 4
84652: NEG
84653: PUSH
84654: LD_INT 5
84656: NEG
84657: PUSH
84658: EMPTY
84659: LIST
84660: LIST
84661: PUSH
84662: LD_INT 3
84664: NEG
84665: PUSH
84666: LD_INT 4
84668: NEG
84669: PUSH
84670: EMPTY
84671: LIST
84672: LIST
84673: PUSH
84674: LD_INT 3
84676: NEG
84677: PUSH
84678: LD_INT 3
84680: NEG
84681: PUSH
84682: EMPTY
84683: LIST
84684: LIST
84685: PUSH
84686: LD_INT 4
84688: NEG
84689: PUSH
84690: LD_INT 3
84692: NEG
84693: PUSH
84694: EMPTY
84695: LIST
84696: LIST
84697: PUSH
84698: LD_INT 5
84700: NEG
84701: PUSH
84702: LD_INT 4
84704: NEG
84705: PUSH
84706: EMPTY
84707: LIST
84708: LIST
84709: PUSH
84710: LD_INT 5
84712: NEG
84713: PUSH
84714: LD_INT 5
84716: NEG
84717: PUSH
84718: EMPTY
84719: LIST
84720: LIST
84721: PUSH
84722: LD_INT 3
84724: NEG
84725: PUSH
84726: LD_INT 5
84728: NEG
84729: PUSH
84730: EMPTY
84731: LIST
84732: LIST
84733: PUSH
84734: LD_INT 5
84736: NEG
84737: PUSH
84738: LD_INT 3
84740: NEG
84741: PUSH
84742: EMPTY
84743: LIST
84744: LIST
84745: PUSH
84746: LD_INT 0
84748: PUSH
84749: LD_INT 3
84751: NEG
84752: PUSH
84753: EMPTY
84754: LIST
84755: LIST
84756: PUSH
84757: LD_INT 0
84759: PUSH
84760: LD_INT 4
84762: NEG
84763: PUSH
84764: EMPTY
84765: LIST
84766: LIST
84767: PUSH
84768: LD_INT 1
84770: PUSH
84771: LD_INT 3
84773: NEG
84774: PUSH
84775: EMPTY
84776: LIST
84777: LIST
84778: PUSH
84779: LD_INT 1
84781: PUSH
84782: LD_INT 2
84784: NEG
84785: PUSH
84786: EMPTY
84787: LIST
84788: LIST
84789: PUSH
84790: LD_INT 0
84792: PUSH
84793: LD_INT 2
84795: NEG
84796: PUSH
84797: EMPTY
84798: LIST
84799: LIST
84800: PUSH
84801: LD_INT 1
84803: NEG
84804: PUSH
84805: LD_INT 3
84807: NEG
84808: PUSH
84809: EMPTY
84810: LIST
84811: LIST
84812: PUSH
84813: LD_INT 1
84815: NEG
84816: PUSH
84817: LD_INT 4
84819: NEG
84820: PUSH
84821: EMPTY
84822: LIST
84823: LIST
84824: PUSH
84825: LD_INT 2
84827: PUSH
84828: LD_INT 2
84830: NEG
84831: PUSH
84832: EMPTY
84833: LIST
84834: LIST
84835: PUSH
84836: LD_INT 2
84838: NEG
84839: PUSH
84840: LD_INT 4
84842: NEG
84843: PUSH
84844: EMPTY
84845: LIST
84846: LIST
84847: PUSH
84848: LD_INT 4
84850: PUSH
84851: LD_INT 0
84853: PUSH
84854: EMPTY
84855: LIST
84856: LIST
84857: PUSH
84858: LD_INT 4
84860: PUSH
84861: LD_INT 1
84863: NEG
84864: PUSH
84865: EMPTY
84866: LIST
84867: LIST
84868: PUSH
84869: LD_INT 5
84871: PUSH
84872: LD_INT 0
84874: PUSH
84875: EMPTY
84876: LIST
84877: LIST
84878: PUSH
84879: LD_INT 5
84881: PUSH
84882: LD_INT 1
84884: PUSH
84885: EMPTY
84886: LIST
84887: LIST
84888: PUSH
84889: LD_INT 4
84891: PUSH
84892: LD_INT 1
84894: PUSH
84895: EMPTY
84896: LIST
84897: LIST
84898: PUSH
84899: LD_INT 3
84901: PUSH
84902: LD_INT 0
84904: PUSH
84905: EMPTY
84906: LIST
84907: LIST
84908: PUSH
84909: LD_INT 3
84911: PUSH
84912: LD_INT 1
84914: NEG
84915: PUSH
84916: EMPTY
84917: LIST
84918: LIST
84919: PUSH
84920: LD_INT 3
84922: PUSH
84923: LD_INT 2
84925: NEG
84926: PUSH
84927: EMPTY
84928: LIST
84929: LIST
84930: PUSH
84931: LD_INT 5
84933: PUSH
84934: LD_INT 2
84936: PUSH
84937: EMPTY
84938: LIST
84939: LIST
84940: PUSH
84941: EMPTY
84942: LIST
84943: LIST
84944: LIST
84945: LIST
84946: LIST
84947: LIST
84948: LIST
84949: LIST
84950: LIST
84951: LIST
84952: LIST
84953: LIST
84954: LIST
84955: LIST
84956: LIST
84957: LIST
84958: LIST
84959: LIST
84960: LIST
84961: LIST
84962: LIST
84963: LIST
84964: LIST
84965: LIST
84966: LIST
84967: LIST
84968: LIST
84969: LIST
84970: LIST
84971: LIST
84972: LIST
84973: LIST
84974: LIST
84975: LIST
84976: LIST
84977: LIST
84978: LIST
84979: LIST
84980: LIST
84981: LIST
84982: LIST
84983: LIST
84984: LIST
84985: LIST
84986: LIST
84987: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
84988: LD_ADDR_VAR 0 32
84992: PUSH
84993: LD_INT 4
84995: NEG
84996: PUSH
84997: LD_INT 0
84999: PUSH
85000: EMPTY
85001: LIST
85002: LIST
85003: PUSH
85004: LD_INT 4
85006: NEG
85007: PUSH
85008: LD_INT 1
85010: NEG
85011: PUSH
85012: EMPTY
85013: LIST
85014: LIST
85015: PUSH
85016: LD_INT 3
85018: NEG
85019: PUSH
85020: LD_INT 0
85022: PUSH
85023: EMPTY
85024: LIST
85025: LIST
85026: PUSH
85027: LD_INT 3
85029: NEG
85030: PUSH
85031: LD_INT 1
85033: PUSH
85034: EMPTY
85035: LIST
85036: LIST
85037: PUSH
85038: LD_INT 4
85040: NEG
85041: PUSH
85042: LD_INT 1
85044: PUSH
85045: EMPTY
85046: LIST
85047: LIST
85048: PUSH
85049: LD_INT 5
85051: NEG
85052: PUSH
85053: LD_INT 0
85055: PUSH
85056: EMPTY
85057: LIST
85058: LIST
85059: PUSH
85060: LD_INT 5
85062: NEG
85063: PUSH
85064: LD_INT 1
85066: NEG
85067: PUSH
85068: EMPTY
85069: LIST
85070: LIST
85071: PUSH
85072: LD_INT 5
85074: NEG
85075: PUSH
85076: LD_INT 2
85078: NEG
85079: PUSH
85080: EMPTY
85081: LIST
85082: LIST
85083: PUSH
85084: LD_INT 3
85086: NEG
85087: PUSH
85088: LD_INT 2
85090: PUSH
85091: EMPTY
85092: LIST
85093: LIST
85094: PUSH
85095: LD_INT 3
85097: NEG
85098: PUSH
85099: LD_INT 3
85101: NEG
85102: PUSH
85103: EMPTY
85104: LIST
85105: LIST
85106: PUSH
85107: LD_INT 3
85109: NEG
85110: PUSH
85111: LD_INT 4
85113: NEG
85114: PUSH
85115: EMPTY
85116: LIST
85117: LIST
85118: PUSH
85119: LD_INT 2
85121: NEG
85122: PUSH
85123: LD_INT 3
85125: NEG
85126: PUSH
85127: EMPTY
85128: LIST
85129: LIST
85130: PUSH
85131: LD_INT 2
85133: NEG
85134: PUSH
85135: LD_INT 2
85137: NEG
85138: PUSH
85139: EMPTY
85140: LIST
85141: LIST
85142: PUSH
85143: LD_INT 3
85145: NEG
85146: PUSH
85147: LD_INT 2
85149: NEG
85150: PUSH
85151: EMPTY
85152: LIST
85153: LIST
85154: PUSH
85155: LD_INT 4
85157: NEG
85158: PUSH
85159: LD_INT 3
85161: NEG
85162: PUSH
85163: EMPTY
85164: LIST
85165: LIST
85166: PUSH
85167: LD_INT 4
85169: NEG
85170: PUSH
85171: LD_INT 4
85173: NEG
85174: PUSH
85175: EMPTY
85176: LIST
85177: LIST
85178: PUSH
85179: LD_INT 2
85181: NEG
85182: PUSH
85183: LD_INT 4
85185: NEG
85186: PUSH
85187: EMPTY
85188: LIST
85189: LIST
85190: PUSH
85191: LD_INT 4
85193: NEG
85194: PUSH
85195: LD_INT 2
85197: NEG
85198: PUSH
85199: EMPTY
85200: LIST
85201: LIST
85202: PUSH
85203: LD_INT 0
85205: PUSH
85206: LD_INT 4
85208: NEG
85209: PUSH
85210: EMPTY
85211: LIST
85212: LIST
85213: PUSH
85214: LD_INT 0
85216: PUSH
85217: LD_INT 5
85219: NEG
85220: PUSH
85221: EMPTY
85222: LIST
85223: LIST
85224: PUSH
85225: LD_INT 1
85227: PUSH
85228: LD_INT 4
85230: NEG
85231: PUSH
85232: EMPTY
85233: LIST
85234: LIST
85235: PUSH
85236: LD_INT 1
85238: PUSH
85239: LD_INT 3
85241: NEG
85242: PUSH
85243: EMPTY
85244: LIST
85245: LIST
85246: PUSH
85247: LD_INT 0
85249: PUSH
85250: LD_INT 3
85252: NEG
85253: PUSH
85254: EMPTY
85255: LIST
85256: LIST
85257: PUSH
85258: LD_INT 1
85260: NEG
85261: PUSH
85262: LD_INT 4
85264: NEG
85265: PUSH
85266: EMPTY
85267: LIST
85268: LIST
85269: PUSH
85270: LD_INT 1
85272: NEG
85273: PUSH
85274: LD_INT 5
85276: NEG
85277: PUSH
85278: EMPTY
85279: LIST
85280: LIST
85281: PUSH
85282: LD_INT 2
85284: PUSH
85285: LD_INT 3
85287: NEG
85288: PUSH
85289: EMPTY
85290: LIST
85291: LIST
85292: PUSH
85293: LD_INT 2
85295: NEG
85296: PUSH
85297: LD_INT 5
85299: NEG
85300: PUSH
85301: EMPTY
85302: LIST
85303: LIST
85304: PUSH
85305: LD_INT 3
85307: PUSH
85308: LD_INT 0
85310: PUSH
85311: EMPTY
85312: LIST
85313: LIST
85314: PUSH
85315: LD_INT 3
85317: PUSH
85318: LD_INT 1
85320: NEG
85321: PUSH
85322: EMPTY
85323: LIST
85324: LIST
85325: PUSH
85326: LD_INT 4
85328: PUSH
85329: LD_INT 0
85331: PUSH
85332: EMPTY
85333: LIST
85334: LIST
85335: PUSH
85336: LD_INT 4
85338: PUSH
85339: LD_INT 1
85341: PUSH
85342: EMPTY
85343: LIST
85344: LIST
85345: PUSH
85346: LD_INT 3
85348: PUSH
85349: LD_INT 1
85351: PUSH
85352: EMPTY
85353: LIST
85354: LIST
85355: PUSH
85356: LD_INT 2
85358: PUSH
85359: LD_INT 0
85361: PUSH
85362: EMPTY
85363: LIST
85364: LIST
85365: PUSH
85366: LD_INT 2
85368: PUSH
85369: LD_INT 1
85371: NEG
85372: PUSH
85373: EMPTY
85374: LIST
85375: LIST
85376: PUSH
85377: LD_INT 2
85379: PUSH
85380: LD_INT 2
85382: NEG
85383: PUSH
85384: EMPTY
85385: LIST
85386: LIST
85387: PUSH
85388: LD_INT 4
85390: PUSH
85391: LD_INT 2
85393: PUSH
85394: EMPTY
85395: LIST
85396: LIST
85397: PUSH
85398: LD_INT 4
85400: PUSH
85401: LD_INT 4
85403: PUSH
85404: EMPTY
85405: LIST
85406: LIST
85407: PUSH
85408: LD_INT 4
85410: PUSH
85411: LD_INT 3
85413: PUSH
85414: EMPTY
85415: LIST
85416: LIST
85417: PUSH
85418: LD_INT 5
85420: PUSH
85421: LD_INT 4
85423: PUSH
85424: EMPTY
85425: LIST
85426: LIST
85427: PUSH
85428: LD_INT 5
85430: PUSH
85431: LD_INT 5
85433: PUSH
85434: EMPTY
85435: LIST
85436: LIST
85437: PUSH
85438: LD_INT 4
85440: PUSH
85441: LD_INT 5
85443: PUSH
85444: EMPTY
85445: LIST
85446: LIST
85447: PUSH
85448: LD_INT 3
85450: PUSH
85451: LD_INT 4
85453: PUSH
85454: EMPTY
85455: LIST
85456: LIST
85457: PUSH
85458: LD_INT 3
85460: PUSH
85461: LD_INT 3
85463: PUSH
85464: EMPTY
85465: LIST
85466: LIST
85467: PUSH
85468: LD_INT 5
85470: PUSH
85471: LD_INT 3
85473: PUSH
85474: EMPTY
85475: LIST
85476: LIST
85477: PUSH
85478: LD_INT 3
85480: PUSH
85481: LD_INT 5
85483: PUSH
85484: EMPTY
85485: LIST
85486: LIST
85487: PUSH
85488: EMPTY
85489: LIST
85490: LIST
85491: LIST
85492: LIST
85493: LIST
85494: LIST
85495: LIST
85496: LIST
85497: LIST
85498: LIST
85499: LIST
85500: LIST
85501: LIST
85502: LIST
85503: LIST
85504: LIST
85505: LIST
85506: LIST
85507: LIST
85508: LIST
85509: LIST
85510: LIST
85511: LIST
85512: LIST
85513: LIST
85514: LIST
85515: LIST
85516: LIST
85517: LIST
85518: LIST
85519: LIST
85520: LIST
85521: LIST
85522: LIST
85523: LIST
85524: LIST
85525: LIST
85526: LIST
85527: LIST
85528: LIST
85529: LIST
85530: LIST
85531: LIST
85532: LIST
85533: LIST
85534: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
85535: LD_ADDR_VAR 0 33
85539: PUSH
85540: LD_INT 4
85542: NEG
85543: PUSH
85544: LD_INT 4
85546: NEG
85547: PUSH
85548: EMPTY
85549: LIST
85550: LIST
85551: PUSH
85552: LD_INT 4
85554: NEG
85555: PUSH
85556: LD_INT 5
85558: NEG
85559: PUSH
85560: EMPTY
85561: LIST
85562: LIST
85563: PUSH
85564: LD_INT 3
85566: NEG
85567: PUSH
85568: LD_INT 4
85570: NEG
85571: PUSH
85572: EMPTY
85573: LIST
85574: LIST
85575: PUSH
85576: LD_INT 3
85578: NEG
85579: PUSH
85580: LD_INT 3
85582: NEG
85583: PUSH
85584: EMPTY
85585: LIST
85586: LIST
85587: PUSH
85588: LD_INT 4
85590: NEG
85591: PUSH
85592: LD_INT 3
85594: NEG
85595: PUSH
85596: EMPTY
85597: LIST
85598: LIST
85599: PUSH
85600: LD_INT 5
85602: NEG
85603: PUSH
85604: LD_INT 4
85606: NEG
85607: PUSH
85608: EMPTY
85609: LIST
85610: LIST
85611: PUSH
85612: LD_INT 5
85614: NEG
85615: PUSH
85616: LD_INT 5
85618: NEG
85619: PUSH
85620: EMPTY
85621: LIST
85622: LIST
85623: PUSH
85624: LD_INT 3
85626: NEG
85627: PUSH
85628: LD_INT 5
85630: NEG
85631: PUSH
85632: EMPTY
85633: LIST
85634: LIST
85635: PUSH
85636: LD_INT 5
85638: NEG
85639: PUSH
85640: LD_INT 3
85642: NEG
85643: PUSH
85644: EMPTY
85645: LIST
85646: LIST
85647: PUSH
85648: LD_INT 0
85650: PUSH
85651: LD_INT 3
85653: NEG
85654: PUSH
85655: EMPTY
85656: LIST
85657: LIST
85658: PUSH
85659: LD_INT 0
85661: PUSH
85662: LD_INT 4
85664: NEG
85665: PUSH
85666: EMPTY
85667: LIST
85668: LIST
85669: PUSH
85670: LD_INT 1
85672: PUSH
85673: LD_INT 3
85675: NEG
85676: PUSH
85677: EMPTY
85678: LIST
85679: LIST
85680: PUSH
85681: LD_INT 1
85683: PUSH
85684: LD_INT 2
85686: NEG
85687: PUSH
85688: EMPTY
85689: LIST
85690: LIST
85691: PUSH
85692: LD_INT 0
85694: PUSH
85695: LD_INT 2
85697: NEG
85698: PUSH
85699: EMPTY
85700: LIST
85701: LIST
85702: PUSH
85703: LD_INT 1
85705: NEG
85706: PUSH
85707: LD_INT 3
85709: NEG
85710: PUSH
85711: EMPTY
85712: LIST
85713: LIST
85714: PUSH
85715: LD_INT 1
85717: NEG
85718: PUSH
85719: LD_INT 4
85721: NEG
85722: PUSH
85723: EMPTY
85724: LIST
85725: LIST
85726: PUSH
85727: LD_INT 2
85729: PUSH
85730: LD_INT 2
85732: NEG
85733: PUSH
85734: EMPTY
85735: LIST
85736: LIST
85737: PUSH
85738: LD_INT 2
85740: NEG
85741: PUSH
85742: LD_INT 4
85744: NEG
85745: PUSH
85746: EMPTY
85747: LIST
85748: LIST
85749: PUSH
85750: LD_INT 4
85752: PUSH
85753: LD_INT 0
85755: PUSH
85756: EMPTY
85757: LIST
85758: LIST
85759: PUSH
85760: LD_INT 4
85762: PUSH
85763: LD_INT 1
85765: NEG
85766: PUSH
85767: EMPTY
85768: LIST
85769: LIST
85770: PUSH
85771: LD_INT 5
85773: PUSH
85774: LD_INT 0
85776: PUSH
85777: EMPTY
85778: LIST
85779: LIST
85780: PUSH
85781: LD_INT 5
85783: PUSH
85784: LD_INT 1
85786: PUSH
85787: EMPTY
85788: LIST
85789: LIST
85790: PUSH
85791: LD_INT 4
85793: PUSH
85794: LD_INT 1
85796: PUSH
85797: EMPTY
85798: LIST
85799: LIST
85800: PUSH
85801: LD_INT 3
85803: PUSH
85804: LD_INT 0
85806: PUSH
85807: EMPTY
85808: LIST
85809: LIST
85810: PUSH
85811: LD_INT 3
85813: PUSH
85814: LD_INT 1
85816: NEG
85817: PUSH
85818: EMPTY
85819: LIST
85820: LIST
85821: PUSH
85822: LD_INT 3
85824: PUSH
85825: LD_INT 2
85827: NEG
85828: PUSH
85829: EMPTY
85830: LIST
85831: LIST
85832: PUSH
85833: LD_INT 5
85835: PUSH
85836: LD_INT 2
85838: PUSH
85839: EMPTY
85840: LIST
85841: LIST
85842: PUSH
85843: LD_INT 3
85845: PUSH
85846: LD_INT 3
85848: PUSH
85849: EMPTY
85850: LIST
85851: LIST
85852: PUSH
85853: LD_INT 3
85855: PUSH
85856: LD_INT 2
85858: PUSH
85859: EMPTY
85860: LIST
85861: LIST
85862: PUSH
85863: LD_INT 4
85865: PUSH
85866: LD_INT 3
85868: PUSH
85869: EMPTY
85870: LIST
85871: LIST
85872: PUSH
85873: LD_INT 4
85875: PUSH
85876: LD_INT 4
85878: PUSH
85879: EMPTY
85880: LIST
85881: LIST
85882: PUSH
85883: LD_INT 3
85885: PUSH
85886: LD_INT 4
85888: PUSH
85889: EMPTY
85890: LIST
85891: LIST
85892: PUSH
85893: LD_INT 2
85895: PUSH
85896: LD_INT 3
85898: PUSH
85899: EMPTY
85900: LIST
85901: LIST
85902: PUSH
85903: LD_INT 2
85905: PUSH
85906: LD_INT 2
85908: PUSH
85909: EMPTY
85910: LIST
85911: LIST
85912: PUSH
85913: LD_INT 4
85915: PUSH
85916: LD_INT 2
85918: PUSH
85919: EMPTY
85920: LIST
85921: LIST
85922: PUSH
85923: LD_INT 2
85925: PUSH
85926: LD_INT 4
85928: PUSH
85929: EMPTY
85930: LIST
85931: LIST
85932: PUSH
85933: LD_INT 0
85935: PUSH
85936: LD_INT 4
85938: PUSH
85939: EMPTY
85940: LIST
85941: LIST
85942: PUSH
85943: LD_INT 0
85945: PUSH
85946: LD_INT 3
85948: PUSH
85949: EMPTY
85950: LIST
85951: LIST
85952: PUSH
85953: LD_INT 1
85955: PUSH
85956: LD_INT 4
85958: PUSH
85959: EMPTY
85960: LIST
85961: LIST
85962: PUSH
85963: LD_INT 1
85965: PUSH
85966: LD_INT 5
85968: PUSH
85969: EMPTY
85970: LIST
85971: LIST
85972: PUSH
85973: LD_INT 0
85975: PUSH
85976: LD_INT 5
85978: PUSH
85979: EMPTY
85980: LIST
85981: LIST
85982: PUSH
85983: LD_INT 1
85985: NEG
85986: PUSH
85987: LD_INT 4
85989: PUSH
85990: EMPTY
85991: LIST
85992: LIST
85993: PUSH
85994: LD_INT 1
85996: NEG
85997: PUSH
85998: LD_INT 3
86000: PUSH
86001: EMPTY
86002: LIST
86003: LIST
86004: PUSH
86005: LD_INT 2
86007: PUSH
86008: LD_INT 5
86010: PUSH
86011: EMPTY
86012: LIST
86013: LIST
86014: PUSH
86015: LD_INT 2
86017: NEG
86018: PUSH
86019: LD_INT 3
86021: PUSH
86022: EMPTY
86023: LIST
86024: LIST
86025: PUSH
86026: EMPTY
86027: LIST
86028: LIST
86029: LIST
86030: LIST
86031: LIST
86032: LIST
86033: LIST
86034: LIST
86035: LIST
86036: LIST
86037: LIST
86038: LIST
86039: LIST
86040: LIST
86041: LIST
86042: LIST
86043: LIST
86044: LIST
86045: LIST
86046: LIST
86047: LIST
86048: LIST
86049: LIST
86050: LIST
86051: LIST
86052: LIST
86053: LIST
86054: LIST
86055: LIST
86056: LIST
86057: LIST
86058: LIST
86059: LIST
86060: LIST
86061: LIST
86062: LIST
86063: LIST
86064: LIST
86065: LIST
86066: LIST
86067: LIST
86068: LIST
86069: LIST
86070: LIST
86071: LIST
86072: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
86073: LD_ADDR_VAR 0 34
86077: PUSH
86078: LD_INT 0
86080: PUSH
86081: LD_INT 4
86083: NEG
86084: PUSH
86085: EMPTY
86086: LIST
86087: LIST
86088: PUSH
86089: LD_INT 0
86091: PUSH
86092: LD_INT 5
86094: NEG
86095: PUSH
86096: EMPTY
86097: LIST
86098: LIST
86099: PUSH
86100: LD_INT 1
86102: PUSH
86103: LD_INT 4
86105: NEG
86106: PUSH
86107: EMPTY
86108: LIST
86109: LIST
86110: PUSH
86111: LD_INT 1
86113: PUSH
86114: LD_INT 3
86116: NEG
86117: PUSH
86118: EMPTY
86119: LIST
86120: LIST
86121: PUSH
86122: LD_INT 0
86124: PUSH
86125: LD_INT 3
86127: NEG
86128: PUSH
86129: EMPTY
86130: LIST
86131: LIST
86132: PUSH
86133: LD_INT 1
86135: NEG
86136: PUSH
86137: LD_INT 4
86139: NEG
86140: PUSH
86141: EMPTY
86142: LIST
86143: LIST
86144: PUSH
86145: LD_INT 1
86147: NEG
86148: PUSH
86149: LD_INT 5
86151: NEG
86152: PUSH
86153: EMPTY
86154: LIST
86155: LIST
86156: PUSH
86157: LD_INT 2
86159: PUSH
86160: LD_INT 3
86162: NEG
86163: PUSH
86164: EMPTY
86165: LIST
86166: LIST
86167: PUSH
86168: LD_INT 2
86170: NEG
86171: PUSH
86172: LD_INT 5
86174: NEG
86175: PUSH
86176: EMPTY
86177: LIST
86178: LIST
86179: PUSH
86180: LD_INT 3
86182: PUSH
86183: LD_INT 0
86185: PUSH
86186: EMPTY
86187: LIST
86188: LIST
86189: PUSH
86190: LD_INT 3
86192: PUSH
86193: LD_INT 1
86195: NEG
86196: PUSH
86197: EMPTY
86198: LIST
86199: LIST
86200: PUSH
86201: LD_INT 4
86203: PUSH
86204: LD_INT 0
86206: PUSH
86207: EMPTY
86208: LIST
86209: LIST
86210: PUSH
86211: LD_INT 4
86213: PUSH
86214: LD_INT 1
86216: PUSH
86217: EMPTY
86218: LIST
86219: LIST
86220: PUSH
86221: LD_INT 3
86223: PUSH
86224: LD_INT 1
86226: PUSH
86227: EMPTY
86228: LIST
86229: LIST
86230: PUSH
86231: LD_INT 2
86233: PUSH
86234: LD_INT 0
86236: PUSH
86237: EMPTY
86238: LIST
86239: LIST
86240: PUSH
86241: LD_INT 2
86243: PUSH
86244: LD_INT 1
86246: NEG
86247: PUSH
86248: EMPTY
86249: LIST
86250: LIST
86251: PUSH
86252: LD_INT 2
86254: PUSH
86255: LD_INT 2
86257: NEG
86258: PUSH
86259: EMPTY
86260: LIST
86261: LIST
86262: PUSH
86263: LD_INT 4
86265: PUSH
86266: LD_INT 2
86268: PUSH
86269: EMPTY
86270: LIST
86271: LIST
86272: PUSH
86273: LD_INT 4
86275: PUSH
86276: LD_INT 4
86278: PUSH
86279: EMPTY
86280: LIST
86281: LIST
86282: PUSH
86283: LD_INT 4
86285: PUSH
86286: LD_INT 3
86288: PUSH
86289: EMPTY
86290: LIST
86291: LIST
86292: PUSH
86293: LD_INT 5
86295: PUSH
86296: LD_INT 4
86298: PUSH
86299: EMPTY
86300: LIST
86301: LIST
86302: PUSH
86303: LD_INT 5
86305: PUSH
86306: LD_INT 5
86308: PUSH
86309: EMPTY
86310: LIST
86311: LIST
86312: PUSH
86313: LD_INT 4
86315: PUSH
86316: LD_INT 5
86318: PUSH
86319: EMPTY
86320: LIST
86321: LIST
86322: PUSH
86323: LD_INT 3
86325: PUSH
86326: LD_INT 4
86328: PUSH
86329: EMPTY
86330: LIST
86331: LIST
86332: PUSH
86333: LD_INT 3
86335: PUSH
86336: LD_INT 3
86338: PUSH
86339: EMPTY
86340: LIST
86341: LIST
86342: PUSH
86343: LD_INT 5
86345: PUSH
86346: LD_INT 3
86348: PUSH
86349: EMPTY
86350: LIST
86351: LIST
86352: PUSH
86353: LD_INT 3
86355: PUSH
86356: LD_INT 5
86358: PUSH
86359: EMPTY
86360: LIST
86361: LIST
86362: PUSH
86363: LD_INT 0
86365: PUSH
86366: LD_INT 3
86368: PUSH
86369: EMPTY
86370: LIST
86371: LIST
86372: PUSH
86373: LD_INT 0
86375: PUSH
86376: LD_INT 2
86378: PUSH
86379: EMPTY
86380: LIST
86381: LIST
86382: PUSH
86383: LD_INT 1
86385: PUSH
86386: LD_INT 3
86388: PUSH
86389: EMPTY
86390: LIST
86391: LIST
86392: PUSH
86393: LD_INT 1
86395: PUSH
86396: LD_INT 4
86398: PUSH
86399: EMPTY
86400: LIST
86401: LIST
86402: PUSH
86403: LD_INT 0
86405: PUSH
86406: LD_INT 4
86408: PUSH
86409: EMPTY
86410: LIST
86411: LIST
86412: PUSH
86413: LD_INT 1
86415: NEG
86416: PUSH
86417: LD_INT 3
86419: PUSH
86420: EMPTY
86421: LIST
86422: LIST
86423: PUSH
86424: LD_INT 1
86426: NEG
86427: PUSH
86428: LD_INT 2
86430: PUSH
86431: EMPTY
86432: LIST
86433: LIST
86434: PUSH
86435: LD_INT 2
86437: PUSH
86438: LD_INT 4
86440: PUSH
86441: EMPTY
86442: LIST
86443: LIST
86444: PUSH
86445: LD_INT 2
86447: NEG
86448: PUSH
86449: LD_INT 2
86451: PUSH
86452: EMPTY
86453: LIST
86454: LIST
86455: PUSH
86456: LD_INT 4
86458: NEG
86459: PUSH
86460: LD_INT 0
86462: PUSH
86463: EMPTY
86464: LIST
86465: LIST
86466: PUSH
86467: LD_INT 4
86469: NEG
86470: PUSH
86471: LD_INT 1
86473: NEG
86474: PUSH
86475: EMPTY
86476: LIST
86477: LIST
86478: PUSH
86479: LD_INT 3
86481: NEG
86482: PUSH
86483: LD_INT 0
86485: PUSH
86486: EMPTY
86487: LIST
86488: LIST
86489: PUSH
86490: LD_INT 3
86492: NEG
86493: PUSH
86494: LD_INT 1
86496: PUSH
86497: EMPTY
86498: LIST
86499: LIST
86500: PUSH
86501: LD_INT 4
86503: NEG
86504: PUSH
86505: LD_INT 1
86507: PUSH
86508: EMPTY
86509: LIST
86510: LIST
86511: PUSH
86512: LD_INT 5
86514: NEG
86515: PUSH
86516: LD_INT 0
86518: PUSH
86519: EMPTY
86520: LIST
86521: LIST
86522: PUSH
86523: LD_INT 5
86525: NEG
86526: PUSH
86527: LD_INT 1
86529: NEG
86530: PUSH
86531: EMPTY
86532: LIST
86533: LIST
86534: PUSH
86535: LD_INT 5
86537: NEG
86538: PUSH
86539: LD_INT 2
86541: NEG
86542: PUSH
86543: EMPTY
86544: LIST
86545: LIST
86546: PUSH
86547: LD_INT 3
86549: NEG
86550: PUSH
86551: LD_INT 2
86553: PUSH
86554: EMPTY
86555: LIST
86556: LIST
86557: PUSH
86558: EMPTY
86559: LIST
86560: LIST
86561: LIST
86562: LIST
86563: LIST
86564: LIST
86565: LIST
86566: LIST
86567: LIST
86568: LIST
86569: LIST
86570: LIST
86571: LIST
86572: LIST
86573: LIST
86574: LIST
86575: LIST
86576: LIST
86577: LIST
86578: LIST
86579: LIST
86580: LIST
86581: LIST
86582: LIST
86583: LIST
86584: LIST
86585: LIST
86586: LIST
86587: LIST
86588: LIST
86589: LIST
86590: LIST
86591: LIST
86592: LIST
86593: LIST
86594: LIST
86595: LIST
86596: LIST
86597: LIST
86598: LIST
86599: LIST
86600: LIST
86601: LIST
86602: LIST
86603: LIST
86604: ST_TO_ADDR
// end ; end ;
86605: GO 86608
86607: POP
// case btype of b_depot , b_warehouse :
86608: LD_VAR 0 1
86612: PUSH
86613: LD_INT 0
86615: DOUBLE
86616: EQUAL
86617: IFTRUE 86627
86619: LD_INT 1
86621: DOUBLE
86622: EQUAL
86623: IFTRUE 86627
86625: GO 86828
86627: POP
// case nation of nation_american :
86628: LD_VAR 0 5
86632: PUSH
86633: LD_INT 1
86635: DOUBLE
86636: EQUAL
86637: IFTRUE 86641
86639: GO 86697
86641: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
86642: LD_ADDR_VAR 0 9
86646: PUSH
86647: LD_VAR 0 11
86651: PUSH
86652: LD_VAR 0 12
86656: PUSH
86657: LD_VAR 0 13
86661: PUSH
86662: LD_VAR 0 14
86666: PUSH
86667: LD_VAR 0 15
86671: PUSH
86672: LD_VAR 0 16
86676: PUSH
86677: EMPTY
86678: LIST
86679: LIST
86680: LIST
86681: LIST
86682: LIST
86683: LIST
86684: PUSH
86685: LD_VAR 0 4
86689: PUSH
86690: LD_INT 1
86692: PLUS
86693: ARRAY
86694: ST_TO_ADDR
86695: GO 86826
86697: LD_INT 2
86699: DOUBLE
86700: EQUAL
86701: IFTRUE 86705
86703: GO 86761
86705: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
86706: LD_ADDR_VAR 0 9
86710: PUSH
86711: LD_VAR 0 17
86715: PUSH
86716: LD_VAR 0 18
86720: PUSH
86721: LD_VAR 0 19
86725: PUSH
86726: LD_VAR 0 20
86730: PUSH
86731: LD_VAR 0 21
86735: PUSH
86736: LD_VAR 0 22
86740: PUSH
86741: EMPTY
86742: LIST
86743: LIST
86744: LIST
86745: LIST
86746: LIST
86747: LIST
86748: PUSH
86749: LD_VAR 0 4
86753: PUSH
86754: LD_INT 1
86756: PLUS
86757: ARRAY
86758: ST_TO_ADDR
86759: GO 86826
86761: LD_INT 3
86763: DOUBLE
86764: EQUAL
86765: IFTRUE 86769
86767: GO 86825
86769: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
86770: LD_ADDR_VAR 0 9
86774: PUSH
86775: LD_VAR 0 23
86779: PUSH
86780: LD_VAR 0 24
86784: PUSH
86785: LD_VAR 0 25
86789: PUSH
86790: LD_VAR 0 26
86794: PUSH
86795: LD_VAR 0 27
86799: PUSH
86800: LD_VAR 0 28
86804: PUSH
86805: EMPTY
86806: LIST
86807: LIST
86808: LIST
86809: LIST
86810: LIST
86811: LIST
86812: PUSH
86813: LD_VAR 0 4
86817: PUSH
86818: LD_INT 1
86820: PLUS
86821: ARRAY
86822: ST_TO_ADDR
86823: GO 86826
86825: POP
86826: GO 87381
86828: LD_INT 2
86830: DOUBLE
86831: EQUAL
86832: IFTRUE 86842
86834: LD_INT 3
86836: DOUBLE
86837: EQUAL
86838: IFTRUE 86842
86840: GO 86898
86842: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
86843: LD_ADDR_VAR 0 9
86847: PUSH
86848: LD_VAR 0 29
86852: PUSH
86853: LD_VAR 0 30
86857: PUSH
86858: LD_VAR 0 31
86862: PUSH
86863: LD_VAR 0 32
86867: PUSH
86868: LD_VAR 0 33
86872: PUSH
86873: LD_VAR 0 34
86877: PUSH
86878: EMPTY
86879: LIST
86880: LIST
86881: LIST
86882: LIST
86883: LIST
86884: LIST
86885: PUSH
86886: LD_VAR 0 4
86890: PUSH
86891: LD_INT 1
86893: PLUS
86894: ARRAY
86895: ST_TO_ADDR
86896: GO 87381
86898: LD_INT 16
86900: DOUBLE
86901: EQUAL
86902: IFTRUE 86960
86904: LD_INT 17
86906: DOUBLE
86907: EQUAL
86908: IFTRUE 86960
86910: LD_INT 18
86912: DOUBLE
86913: EQUAL
86914: IFTRUE 86960
86916: LD_INT 19
86918: DOUBLE
86919: EQUAL
86920: IFTRUE 86960
86922: LD_INT 22
86924: DOUBLE
86925: EQUAL
86926: IFTRUE 86960
86928: LD_INT 20
86930: DOUBLE
86931: EQUAL
86932: IFTRUE 86960
86934: LD_INT 21
86936: DOUBLE
86937: EQUAL
86938: IFTRUE 86960
86940: LD_INT 23
86942: DOUBLE
86943: EQUAL
86944: IFTRUE 86960
86946: LD_INT 24
86948: DOUBLE
86949: EQUAL
86950: IFTRUE 86960
86952: LD_INT 25
86954: DOUBLE
86955: EQUAL
86956: IFTRUE 86960
86958: GO 87016
86960: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
86961: LD_ADDR_VAR 0 9
86965: PUSH
86966: LD_VAR 0 35
86970: PUSH
86971: LD_VAR 0 36
86975: PUSH
86976: LD_VAR 0 37
86980: PUSH
86981: LD_VAR 0 38
86985: PUSH
86986: LD_VAR 0 39
86990: PUSH
86991: LD_VAR 0 40
86995: PUSH
86996: EMPTY
86997: LIST
86998: LIST
86999: LIST
87000: LIST
87001: LIST
87002: LIST
87003: PUSH
87004: LD_VAR 0 4
87008: PUSH
87009: LD_INT 1
87011: PLUS
87012: ARRAY
87013: ST_TO_ADDR
87014: GO 87381
87016: LD_INT 6
87018: DOUBLE
87019: EQUAL
87020: IFTRUE 87072
87022: LD_INT 7
87024: DOUBLE
87025: EQUAL
87026: IFTRUE 87072
87028: LD_INT 8
87030: DOUBLE
87031: EQUAL
87032: IFTRUE 87072
87034: LD_INT 13
87036: DOUBLE
87037: EQUAL
87038: IFTRUE 87072
87040: LD_INT 12
87042: DOUBLE
87043: EQUAL
87044: IFTRUE 87072
87046: LD_INT 15
87048: DOUBLE
87049: EQUAL
87050: IFTRUE 87072
87052: LD_INT 11
87054: DOUBLE
87055: EQUAL
87056: IFTRUE 87072
87058: LD_INT 14
87060: DOUBLE
87061: EQUAL
87062: IFTRUE 87072
87064: LD_INT 10
87066: DOUBLE
87067: EQUAL
87068: IFTRUE 87072
87070: GO 87128
87072: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
87073: LD_ADDR_VAR 0 9
87077: PUSH
87078: LD_VAR 0 41
87082: PUSH
87083: LD_VAR 0 42
87087: PUSH
87088: LD_VAR 0 43
87092: PUSH
87093: LD_VAR 0 44
87097: PUSH
87098: LD_VAR 0 45
87102: PUSH
87103: LD_VAR 0 46
87107: PUSH
87108: EMPTY
87109: LIST
87110: LIST
87111: LIST
87112: LIST
87113: LIST
87114: LIST
87115: PUSH
87116: LD_VAR 0 4
87120: PUSH
87121: LD_INT 1
87123: PLUS
87124: ARRAY
87125: ST_TO_ADDR
87126: GO 87381
87128: LD_INT 36
87130: DOUBLE
87131: EQUAL
87132: IFTRUE 87136
87134: GO 87192
87136: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
87137: LD_ADDR_VAR 0 9
87141: PUSH
87142: LD_VAR 0 47
87146: PUSH
87147: LD_VAR 0 48
87151: PUSH
87152: LD_VAR 0 49
87156: PUSH
87157: LD_VAR 0 50
87161: PUSH
87162: LD_VAR 0 51
87166: PUSH
87167: LD_VAR 0 52
87171: PUSH
87172: EMPTY
87173: LIST
87174: LIST
87175: LIST
87176: LIST
87177: LIST
87178: LIST
87179: PUSH
87180: LD_VAR 0 4
87184: PUSH
87185: LD_INT 1
87187: PLUS
87188: ARRAY
87189: ST_TO_ADDR
87190: GO 87381
87192: LD_INT 4
87194: DOUBLE
87195: EQUAL
87196: IFTRUE 87218
87198: LD_INT 5
87200: DOUBLE
87201: EQUAL
87202: IFTRUE 87218
87204: LD_INT 34
87206: DOUBLE
87207: EQUAL
87208: IFTRUE 87218
87210: LD_INT 37
87212: DOUBLE
87213: EQUAL
87214: IFTRUE 87218
87216: GO 87274
87218: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
87219: LD_ADDR_VAR 0 9
87223: PUSH
87224: LD_VAR 0 53
87228: PUSH
87229: LD_VAR 0 54
87233: PUSH
87234: LD_VAR 0 55
87238: PUSH
87239: LD_VAR 0 56
87243: PUSH
87244: LD_VAR 0 57
87248: PUSH
87249: LD_VAR 0 58
87253: PUSH
87254: EMPTY
87255: LIST
87256: LIST
87257: LIST
87258: LIST
87259: LIST
87260: LIST
87261: PUSH
87262: LD_VAR 0 4
87266: PUSH
87267: LD_INT 1
87269: PLUS
87270: ARRAY
87271: ST_TO_ADDR
87272: GO 87381
87274: LD_INT 31
87276: DOUBLE
87277: EQUAL
87278: IFTRUE 87324
87280: LD_INT 32
87282: DOUBLE
87283: EQUAL
87284: IFTRUE 87324
87286: LD_INT 33
87288: DOUBLE
87289: EQUAL
87290: IFTRUE 87324
87292: LD_INT 27
87294: DOUBLE
87295: EQUAL
87296: IFTRUE 87324
87298: LD_INT 26
87300: DOUBLE
87301: EQUAL
87302: IFTRUE 87324
87304: LD_INT 28
87306: DOUBLE
87307: EQUAL
87308: IFTRUE 87324
87310: LD_INT 29
87312: DOUBLE
87313: EQUAL
87314: IFTRUE 87324
87316: LD_INT 30
87318: DOUBLE
87319: EQUAL
87320: IFTRUE 87324
87322: GO 87380
87324: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
87325: LD_ADDR_VAR 0 9
87329: PUSH
87330: LD_VAR 0 59
87334: PUSH
87335: LD_VAR 0 60
87339: PUSH
87340: LD_VAR 0 61
87344: PUSH
87345: LD_VAR 0 62
87349: PUSH
87350: LD_VAR 0 63
87354: PUSH
87355: LD_VAR 0 64
87359: PUSH
87360: EMPTY
87361: LIST
87362: LIST
87363: LIST
87364: LIST
87365: LIST
87366: LIST
87367: PUSH
87368: LD_VAR 0 4
87372: PUSH
87373: LD_INT 1
87375: PLUS
87376: ARRAY
87377: ST_TO_ADDR
87378: GO 87381
87380: POP
// temp_list2 = [ ] ;
87381: LD_ADDR_VAR 0 10
87385: PUSH
87386: EMPTY
87387: ST_TO_ADDR
// for i in temp_list do
87388: LD_ADDR_VAR 0 8
87392: PUSH
87393: LD_VAR 0 9
87397: PUSH
87398: FOR_IN
87399: IFFALSE 87451
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
87401: LD_ADDR_VAR 0 10
87405: PUSH
87406: LD_VAR 0 10
87410: PUSH
87411: LD_VAR 0 8
87415: PUSH
87416: LD_INT 1
87418: ARRAY
87419: PUSH
87420: LD_VAR 0 2
87424: PLUS
87425: PUSH
87426: LD_VAR 0 8
87430: PUSH
87431: LD_INT 2
87433: ARRAY
87434: PUSH
87435: LD_VAR 0 3
87439: PLUS
87440: PUSH
87441: EMPTY
87442: LIST
87443: LIST
87444: PUSH
87445: EMPTY
87446: LIST
87447: ADD
87448: ST_TO_ADDR
87449: GO 87398
87451: POP
87452: POP
// result = temp_list2 ;
87453: LD_ADDR_VAR 0 7
87457: PUSH
87458: LD_VAR 0 10
87462: ST_TO_ADDR
// end ;
87463: LD_VAR 0 7
87467: RET
// export function EnemyInRange ( unit , dist ) ; begin
87468: LD_INT 0
87470: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
87471: LD_ADDR_VAR 0 3
87475: PUSH
87476: LD_VAR 0 1
87480: PPUSH
87481: CALL_OW 255
87485: PPUSH
87486: LD_VAR 0 1
87490: PPUSH
87491: CALL_OW 250
87495: PPUSH
87496: LD_VAR 0 1
87500: PPUSH
87501: CALL_OW 251
87505: PPUSH
87506: LD_VAR 0 2
87510: PPUSH
87511: CALL 60841 0 4
87515: PUSH
87516: LD_INT 4
87518: ARRAY
87519: ST_TO_ADDR
// end ;
87520: LD_VAR 0 3
87524: RET
// export function PlayerSeeMe ( unit ) ; begin
87525: LD_INT 0
87527: PPUSH
// result := See ( your_side , unit ) ;
87528: LD_ADDR_VAR 0 2
87532: PUSH
87533: LD_OWVAR 2
87537: PPUSH
87538: LD_VAR 0 1
87542: PPUSH
87543: CALL_OW 292
87547: ST_TO_ADDR
// end ;
87548: LD_VAR 0 2
87552: RET
// export function ReverseDir ( unit ) ; begin
87553: LD_INT 0
87555: PPUSH
// if not unit then
87556: LD_VAR 0 1
87560: NOT
87561: IFFALSE 87565
// exit ;
87563: GO 87588
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
87565: LD_ADDR_VAR 0 2
87569: PUSH
87570: LD_VAR 0 1
87574: PPUSH
87575: CALL_OW 254
87579: PUSH
87580: LD_INT 3
87582: PLUS
87583: PUSH
87584: LD_INT 6
87586: MOD
87587: ST_TO_ADDR
// end ;
87588: LD_VAR 0 2
87592: RET
// export function ReverseArray ( array ) ; var i ; begin
87593: LD_INT 0
87595: PPUSH
87596: PPUSH
// if not array then
87597: LD_VAR 0 1
87601: NOT
87602: IFFALSE 87606
// exit ;
87604: GO 87661
// result := [ ] ;
87606: LD_ADDR_VAR 0 2
87610: PUSH
87611: EMPTY
87612: ST_TO_ADDR
// for i := array downto 1 do
87613: LD_ADDR_VAR 0 3
87617: PUSH
87618: DOUBLE
87619: LD_VAR 0 1
87623: INC
87624: ST_TO_ADDR
87625: LD_INT 1
87627: PUSH
87628: FOR_DOWNTO
87629: IFFALSE 87659
// result := Join ( result , array [ i ] ) ;
87631: LD_ADDR_VAR 0 2
87635: PUSH
87636: LD_VAR 0 2
87640: PPUSH
87641: LD_VAR 0 1
87645: PUSH
87646: LD_VAR 0 3
87650: ARRAY
87651: PPUSH
87652: CALL 92306 0 2
87656: ST_TO_ADDR
87657: GO 87628
87659: POP
87660: POP
// end ;
87661: LD_VAR 0 2
87665: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
87666: LD_INT 0
87668: PPUSH
87669: PPUSH
87670: PPUSH
87671: PPUSH
87672: PPUSH
87673: PPUSH
// if not unit or not hexes then
87674: LD_VAR 0 1
87678: NOT
87679: PUSH
87680: LD_VAR 0 2
87684: NOT
87685: OR
87686: IFFALSE 87690
// exit ;
87688: GO 87813
// dist := 9999 ;
87690: LD_ADDR_VAR 0 5
87694: PUSH
87695: LD_INT 9999
87697: ST_TO_ADDR
// for i = 1 to hexes do
87698: LD_ADDR_VAR 0 4
87702: PUSH
87703: DOUBLE
87704: LD_INT 1
87706: DEC
87707: ST_TO_ADDR
87708: LD_VAR 0 2
87712: PUSH
87713: FOR_TO
87714: IFFALSE 87801
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
87716: LD_ADDR_VAR 0 6
87720: PUSH
87721: LD_VAR 0 1
87725: PPUSH
87726: LD_VAR 0 2
87730: PUSH
87731: LD_VAR 0 4
87735: ARRAY
87736: PUSH
87737: LD_INT 1
87739: ARRAY
87740: PPUSH
87741: LD_VAR 0 2
87745: PUSH
87746: LD_VAR 0 4
87750: ARRAY
87751: PUSH
87752: LD_INT 2
87754: ARRAY
87755: PPUSH
87756: CALL_OW 297
87760: ST_TO_ADDR
// if tdist < dist then
87761: LD_VAR 0 6
87765: PUSH
87766: LD_VAR 0 5
87770: LESS
87771: IFFALSE 87799
// begin hex := hexes [ i ] ;
87773: LD_ADDR_VAR 0 8
87777: PUSH
87778: LD_VAR 0 2
87782: PUSH
87783: LD_VAR 0 4
87787: ARRAY
87788: ST_TO_ADDR
// dist := tdist ;
87789: LD_ADDR_VAR 0 5
87793: PUSH
87794: LD_VAR 0 6
87798: ST_TO_ADDR
// end ; end ;
87799: GO 87713
87801: POP
87802: POP
// result := hex ;
87803: LD_ADDR_VAR 0 3
87807: PUSH
87808: LD_VAR 0 8
87812: ST_TO_ADDR
// end ;
87813: LD_VAR 0 3
87817: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
87818: LD_INT 0
87820: PPUSH
87821: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
87822: LD_VAR 0 1
87826: NOT
87827: PUSH
87828: LD_VAR 0 1
87832: PUSH
87833: LD_INT 21
87835: PUSH
87836: LD_INT 2
87838: PUSH
87839: EMPTY
87840: LIST
87841: LIST
87842: PUSH
87843: LD_INT 23
87845: PUSH
87846: LD_INT 2
87848: PUSH
87849: EMPTY
87850: LIST
87851: LIST
87852: PUSH
87853: EMPTY
87854: LIST
87855: LIST
87856: PPUSH
87857: CALL_OW 69
87861: IN
87862: NOT
87863: OR
87864: IFFALSE 87868
// exit ;
87866: GO 87915
// for i = 1 to 3 do
87868: LD_ADDR_VAR 0 3
87872: PUSH
87873: DOUBLE
87874: LD_INT 1
87876: DEC
87877: ST_TO_ADDR
87878: LD_INT 3
87880: PUSH
87881: FOR_TO
87882: IFFALSE 87913
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
87884: LD_VAR 0 1
87888: PPUSH
87889: CALL_OW 250
87893: PPUSH
87894: LD_VAR 0 1
87898: PPUSH
87899: CALL_OW 251
87903: PPUSH
87904: LD_INT 1
87906: PPUSH
87907: CALL_OW 453
87911: GO 87881
87913: POP
87914: POP
// end ;
87915: LD_VAR 0 2
87919: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
87920: LD_INT 0
87922: PPUSH
87923: PPUSH
87924: PPUSH
87925: PPUSH
87926: PPUSH
87927: PPUSH
// if not unit or not enemy_unit then
87928: LD_VAR 0 1
87932: NOT
87933: PUSH
87934: LD_VAR 0 2
87938: NOT
87939: OR
87940: IFFALSE 87944
// exit ;
87942: GO 88411
// if GetLives ( i ) < 250 then
87944: LD_VAR 0 4
87948: PPUSH
87949: CALL_OW 256
87953: PUSH
87954: LD_INT 250
87956: LESS
87957: IFFALSE 87970
// begin ComAutodestruct ( i ) ;
87959: LD_VAR 0 4
87963: PPUSH
87964: CALL 87818 0 1
// exit ;
87968: GO 88411
// end ; x := GetX ( enemy_unit ) ;
87970: LD_ADDR_VAR 0 7
87974: PUSH
87975: LD_VAR 0 2
87979: PPUSH
87980: CALL_OW 250
87984: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
87985: LD_ADDR_VAR 0 8
87989: PUSH
87990: LD_VAR 0 2
87994: PPUSH
87995: CALL_OW 251
87999: ST_TO_ADDR
// if not x or not y then
88000: LD_VAR 0 7
88004: NOT
88005: PUSH
88006: LD_VAR 0 8
88010: NOT
88011: OR
88012: IFFALSE 88016
// exit ;
88014: GO 88411
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
88016: LD_ADDR_VAR 0 6
88020: PUSH
88021: LD_VAR 0 7
88025: PPUSH
88026: LD_INT 0
88028: PPUSH
88029: LD_INT 4
88031: PPUSH
88032: CALL_OW 272
88036: PUSH
88037: LD_VAR 0 8
88041: PPUSH
88042: LD_INT 0
88044: PPUSH
88045: LD_INT 4
88047: PPUSH
88048: CALL_OW 273
88052: PUSH
88053: EMPTY
88054: LIST
88055: LIST
88056: PUSH
88057: LD_VAR 0 7
88061: PPUSH
88062: LD_INT 1
88064: PPUSH
88065: LD_INT 4
88067: PPUSH
88068: CALL_OW 272
88072: PUSH
88073: LD_VAR 0 8
88077: PPUSH
88078: LD_INT 1
88080: PPUSH
88081: LD_INT 4
88083: PPUSH
88084: CALL_OW 273
88088: PUSH
88089: EMPTY
88090: LIST
88091: LIST
88092: PUSH
88093: LD_VAR 0 7
88097: PPUSH
88098: LD_INT 2
88100: PPUSH
88101: LD_INT 4
88103: PPUSH
88104: CALL_OW 272
88108: PUSH
88109: LD_VAR 0 8
88113: PPUSH
88114: LD_INT 2
88116: PPUSH
88117: LD_INT 4
88119: PPUSH
88120: CALL_OW 273
88124: PUSH
88125: EMPTY
88126: LIST
88127: LIST
88128: PUSH
88129: LD_VAR 0 7
88133: PPUSH
88134: LD_INT 3
88136: PPUSH
88137: LD_INT 4
88139: PPUSH
88140: CALL_OW 272
88144: PUSH
88145: LD_VAR 0 8
88149: PPUSH
88150: LD_INT 3
88152: PPUSH
88153: LD_INT 4
88155: PPUSH
88156: CALL_OW 273
88160: PUSH
88161: EMPTY
88162: LIST
88163: LIST
88164: PUSH
88165: LD_VAR 0 7
88169: PPUSH
88170: LD_INT 4
88172: PPUSH
88173: LD_INT 4
88175: PPUSH
88176: CALL_OW 272
88180: PUSH
88181: LD_VAR 0 8
88185: PPUSH
88186: LD_INT 4
88188: PPUSH
88189: LD_INT 4
88191: PPUSH
88192: CALL_OW 273
88196: PUSH
88197: EMPTY
88198: LIST
88199: LIST
88200: PUSH
88201: LD_VAR 0 7
88205: PPUSH
88206: LD_INT 5
88208: PPUSH
88209: LD_INT 4
88211: PPUSH
88212: CALL_OW 272
88216: PUSH
88217: LD_VAR 0 8
88221: PPUSH
88222: LD_INT 5
88224: PPUSH
88225: LD_INT 4
88227: PPUSH
88228: CALL_OW 273
88232: PUSH
88233: EMPTY
88234: LIST
88235: LIST
88236: PUSH
88237: EMPTY
88238: LIST
88239: LIST
88240: LIST
88241: LIST
88242: LIST
88243: LIST
88244: ST_TO_ADDR
// for i = tmp downto 1 do
88245: LD_ADDR_VAR 0 4
88249: PUSH
88250: DOUBLE
88251: LD_VAR 0 6
88255: INC
88256: ST_TO_ADDR
88257: LD_INT 1
88259: PUSH
88260: FOR_DOWNTO
88261: IFFALSE 88362
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
88263: LD_VAR 0 6
88267: PUSH
88268: LD_VAR 0 4
88272: ARRAY
88273: PUSH
88274: LD_INT 1
88276: ARRAY
88277: PPUSH
88278: LD_VAR 0 6
88282: PUSH
88283: LD_VAR 0 4
88287: ARRAY
88288: PUSH
88289: LD_INT 2
88291: ARRAY
88292: PPUSH
88293: CALL_OW 488
88297: NOT
88298: PUSH
88299: LD_VAR 0 6
88303: PUSH
88304: LD_VAR 0 4
88308: ARRAY
88309: PUSH
88310: LD_INT 1
88312: ARRAY
88313: PPUSH
88314: LD_VAR 0 6
88318: PUSH
88319: LD_VAR 0 4
88323: ARRAY
88324: PUSH
88325: LD_INT 2
88327: ARRAY
88328: PPUSH
88329: CALL_OW 428
88333: PUSH
88334: LD_INT 0
88336: NONEQUAL
88337: OR
88338: IFFALSE 88360
// tmp := Delete ( tmp , i ) ;
88340: LD_ADDR_VAR 0 6
88344: PUSH
88345: LD_VAR 0 6
88349: PPUSH
88350: LD_VAR 0 4
88354: PPUSH
88355: CALL_OW 3
88359: ST_TO_ADDR
88360: GO 88260
88362: POP
88363: POP
// j := GetClosestHex ( unit , tmp ) ;
88364: LD_ADDR_VAR 0 5
88368: PUSH
88369: LD_VAR 0 1
88373: PPUSH
88374: LD_VAR 0 6
88378: PPUSH
88379: CALL 87666 0 2
88383: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
88384: LD_VAR 0 1
88388: PPUSH
88389: LD_VAR 0 5
88393: PUSH
88394: LD_INT 1
88396: ARRAY
88397: PPUSH
88398: LD_VAR 0 5
88402: PUSH
88403: LD_INT 2
88405: ARRAY
88406: PPUSH
88407: CALL_OW 111
// end ;
88411: LD_VAR 0 3
88415: RET
// export function PrepareApemanSoldier ( ) ; begin
88416: LD_INT 0
88418: PPUSH
// uc_nation := 0 ;
88419: LD_ADDR_OWVAR 21
88423: PUSH
88424: LD_INT 0
88426: ST_TO_ADDR
// hc_sex := sex_male ;
88427: LD_ADDR_OWVAR 27
88431: PUSH
88432: LD_INT 1
88434: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
88435: LD_ADDR_OWVAR 28
88439: PUSH
88440: LD_INT 15
88442: ST_TO_ADDR
// hc_gallery :=  ;
88443: LD_ADDR_OWVAR 33
88447: PUSH
88448: LD_STRING 
88450: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
88451: LD_ADDR_OWVAR 31
88455: PUSH
88456: LD_INT 0
88458: PPUSH
88459: LD_INT 3
88461: PPUSH
88462: CALL_OW 12
88466: PUSH
88467: LD_INT 0
88469: PPUSH
88470: LD_INT 3
88472: PPUSH
88473: CALL_OW 12
88477: PUSH
88478: LD_INT 0
88480: PUSH
88481: LD_INT 0
88483: PUSH
88484: EMPTY
88485: LIST
88486: LIST
88487: LIST
88488: LIST
88489: ST_TO_ADDR
// end ;
88490: LD_VAR 0 1
88494: RET
// export function PrepareApemanEngineer ( ) ; begin
88495: LD_INT 0
88497: PPUSH
// uc_nation := 0 ;
88498: LD_ADDR_OWVAR 21
88502: PUSH
88503: LD_INT 0
88505: ST_TO_ADDR
// hc_sex := sex_male ;
88506: LD_ADDR_OWVAR 27
88510: PUSH
88511: LD_INT 1
88513: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
88514: LD_ADDR_OWVAR 28
88518: PUSH
88519: LD_INT 16
88521: ST_TO_ADDR
// hc_gallery :=  ;
88522: LD_ADDR_OWVAR 33
88526: PUSH
88527: LD_STRING 
88529: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
88530: LD_ADDR_OWVAR 31
88534: PUSH
88535: LD_INT 0
88537: PPUSH
88538: LD_INT 3
88540: PPUSH
88541: CALL_OW 12
88545: PUSH
88546: LD_INT 0
88548: PPUSH
88549: LD_INT 3
88551: PPUSH
88552: CALL_OW 12
88556: PUSH
88557: LD_INT 0
88559: PUSH
88560: LD_INT 0
88562: PUSH
88563: EMPTY
88564: LIST
88565: LIST
88566: LIST
88567: LIST
88568: ST_TO_ADDR
// end ;
88569: LD_VAR 0 1
88573: RET
// export function PrepareApeman ( agressivity ) ; begin
88574: LD_INT 0
88576: PPUSH
// uc_side := 0 ;
88577: LD_ADDR_OWVAR 20
88581: PUSH
88582: LD_INT 0
88584: ST_TO_ADDR
// uc_nation := 0 ;
88585: LD_ADDR_OWVAR 21
88589: PUSH
88590: LD_INT 0
88592: ST_TO_ADDR
// hc_sex := sex_male ;
88593: LD_ADDR_OWVAR 27
88597: PUSH
88598: LD_INT 1
88600: ST_TO_ADDR
// hc_class := class_apeman ;
88601: LD_ADDR_OWVAR 28
88605: PUSH
88606: LD_INT 12
88608: ST_TO_ADDR
// hc_gallery :=  ;
88609: LD_ADDR_OWVAR 33
88613: PUSH
88614: LD_STRING 
88616: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
88617: LD_ADDR_OWVAR 35
88621: PUSH
88622: LD_VAR 0 1
88626: NEG
88627: PPUSH
88628: LD_VAR 0 1
88632: PPUSH
88633: CALL_OW 12
88637: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
88638: LD_ADDR_OWVAR 31
88642: PUSH
88643: LD_INT 0
88645: PPUSH
88646: LD_INT 3
88648: PPUSH
88649: CALL_OW 12
88653: PUSH
88654: LD_INT 0
88656: PPUSH
88657: LD_INT 3
88659: PPUSH
88660: CALL_OW 12
88664: PUSH
88665: LD_INT 0
88667: PUSH
88668: LD_INT 0
88670: PUSH
88671: EMPTY
88672: LIST
88673: LIST
88674: LIST
88675: LIST
88676: ST_TO_ADDR
// end ;
88677: LD_VAR 0 2
88681: RET
// export function PrepareTiger ( agressivity ) ; begin
88682: LD_INT 0
88684: PPUSH
// uc_side := 0 ;
88685: LD_ADDR_OWVAR 20
88689: PUSH
88690: LD_INT 0
88692: ST_TO_ADDR
// uc_nation := 0 ;
88693: LD_ADDR_OWVAR 21
88697: PUSH
88698: LD_INT 0
88700: ST_TO_ADDR
// hc_class := class_tiger ;
88701: LD_ADDR_OWVAR 28
88705: PUSH
88706: LD_INT 14
88708: ST_TO_ADDR
// hc_gallery :=  ;
88709: LD_ADDR_OWVAR 33
88713: PUSH
88714: LD_STRING 
88716: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
88717: LD_ADDR_OWVAR 35
88721: PUSH
88722: LD_VAR 0 1
88726: NEG
88727: PPUSH
88728: LD_VAR 0 1
88732: PPUSH
88733: CALL_OW 12
88737: ST_TO_ADDR
// end ;
88738: LD_VAR 0 2
88742: RET
// export function PrepareEnchidna ( ) ; begin
88743: LD_INT 0
88745: PPUSH
// uc_side := 0 ;
88746: LD_ADDR_OWVAR 20
88750: PUSH
88751: LD_INT 0
88753: ST_TO_ADDR
// uc_nation := 0 ;
88754: LD_ADDR_OWVAR 21
88758: PUSH
88759: LD_INT 0
88761: ST_TO_ADDR
// hc_class := class_baggie ;
88762: LD_ADDR_OWVAR 28
88766: PUSH
88767: LD_INT 13
88769: ST_TO_ADDR
// hc_gallery :=  ;
88770: LD_ADDR_OWVAR 33
88774: PUSH
88775: LD_STRING 
88777: ST_TO_ADDR
// end ;
88778: LD_VAR 0 1
88782: RET
// export function PrepareFrog ( ) ; begin
88783: LD_INT 0
88785: PPUSH
// uc_side := 0 ;
88786: LD_ADDR_OWVAR 20
88790: PUSH
88791: LD_INT 0
88793: ST_TO_ADDR
// uc_nation := 0 ;
88794: LD_ADDR_OWVAR 21
88798: PUSH
88799: LD_INT 0
88801: ST_TO_ADDR
// hc_class := class_frog ;
88802: LD_ADDR_OWVAR 28
88806: PUSH
88807: LD_INT 19
88809: ST_TO_ADDR
// hc_gallery :=  ;
88810: LD_ADDR_OWVAR 33
88814: PUSH
88815: LD_STRING 
88817: ST_TO_ADDR
// end ;
88818: LD_VAR 0 1
88822: RET
// export function PrepareFish ( ) ; begin
88823: LD_INT 0
88825: PPUSH
// uc_side := 0 ;
88826: LD_ADDR_OWVAR 20
88830: PUSH
88831: LD_INT 0
88833: ST_TO_ADDR
// uc_nation := 0 ;
88834: LD_ADDR_OWVAR 21
88838: PUSH
88839: LD_INT 0
88841: ST_TO_ADDR
// hc_class := class_fish ;
88842: LD_ADDR_OWVAR 28
88846: PUSH
88847: LD_INT 20
88849: ST_TO_ADDR
// hc_gallery :=  ;
88850: LD_ADDR_OWVAR 33
88854: PUSH
88855: LD_STRING 
88857: ST_TO_ADDR
// end ;
88858: LD_VAR 0 1
88862: RET
// export function PrepareBird ( ) ; begin
88863: LD_INT 0
88865: PPUSH
// uc_side := 0 ;
88866: LD_ADDR_OWVAR 20
88870: PUSH
88871: LD_INT 0
88873: ST_TO_ADDR
// uc_nation := 0 ;
88874: LD_ADDR_OWVAR 21
88878: PUSH
88879: LD_INT 0
88881: ST_TO_ADDR
// hc_class := class_phororhacos ;
88882: LD_ADDR_OWVAR 28
88886: PUSH
88887: LD_INT 18
88889: ST_TO_ADDR
// hc_gallery :=  ;
88890: LD_ADDR_OWVAR 33
88894: PUSH
88895: LD_STRING 
88897: ST_TO_ADDR
// end ;
88898: LD_VAR 0 1
88902: RET
// export function PrepareHorse ( ) ; begin
88903: LD_INT 0
88905: PPUSH
// uc_side := 0 ;
88906: LD_ADDR_OWVAR 20
88910: PUSH
88911: LD_INT 0
88913: ST_TO_ADDR
// uc_nation := 0 ;
88914: LD_ADDR_OWVAR 21
88918: PUSH
88919: LD_INT 0
88921: ST_TO_ADDR
// hc_class := class_horse ;
88922: LD_ADDR_OWVAR 28
88926: PUSH
88927: LD_INT 21
88929: ST_TO_ADDR
// hc_gallery :=  ;
88930: LD_ADDR_OWVAR 33
88934: PUSH
88935: LD_STRING 
88937: ST_TO_ADDR
// end ;
88938: LD_VAR 0 1
88942: RET
// export function PrepareMastodont ( ) ; begin
88943: LD_INT 0
88945: PPUSH
// uc_side := 0 ;
88946: LD_ADDR_OWVAR 20
88950: PUSH
88951: LD_INT 0
88953: ST_TO_ADDR
// uc_nation := 0 ;
88954: LD_ADDR_OWVAR 21
88958: PUSH
88959: LD_INT 0
88961: ST_TO_ADDR
// vc_chassis := class_mastodont ;
88962: LD_ADDR_OWVAR 37
88966: PUSH
88967: LD_INT 31
88969: ST_TO_ADDR
// vc_control := control_rider ;
88970: LD_ADDR_OWVAR 38
88974: PUSH
88975: LD_INT 4
88977: ST_TO_ADDR
// end ;
88978: LD_VAR 0 1
88982: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
88983: LD_INT 0
88985: PPUSH
88986: PPUSH
88987: PPUSH
// uc_side = 0 ;
88988: LD_ADDR_OWVAR 20
88992: PUSH
88993: LD_INT 0
88995: ST_TO_ADDR
// uc_nation = 0 ;
88996: LD_ADDR_OWVAR 21
89000: PUSH
89001: LD_INT 0
89003: ST_TO_ADDR
// InitHc_All ( ) ;
89004: CALL_OW 584
// InitVc ;
89008: CALL_OW 20
// if mastodonts then
89012: LD_VAR 0 6
89016: IFFALSE 89083
// for i = 1 to mastodonts do
89018: LD_ADDR_VAR 0 11
89022: PUSH
89023: DOUBLE
89024: LD_INT 1
89026: DEC
89027: ST_TO_ADDR
89028: LD_VAR 0 6
89032: PUSH
89033: FOR_TO
89034: IFFALSE 89081
// begin vc_chassis := 31 ;
89036: LD_ADDR_OWVAR 37
89040: PUSH
89041: LD_INT 31
89043: ST_TO_ADDR
// vc_control := control_rider ;
89044: LD_ADDR_OWVAR 38
89048: PUSH
89049: LD_INT 4
89051: ST_TO_ADDR
// animal := CreateVehicle ;
89052: LD_ADDR_VAR 0 12
89056: PUSH
89057: CALL_OW 45
89061: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89062: LD_VAR 0 12
89066: PPUSH
89067: LD_VAR 0 8
89071: PPUSH
89072: LD_INT 0
89074: PPUSH
89075: CALL 91211 0 3
// end ;
89079: GO 89033
89081: POP
89082: POP
// if horses then
89083: LD_VAR 0 5
89087: IFFALSE 89154
// for i = 1 to horses do
89089: LD_ADDR_VAR 0 11
89093: PUSH
89094: DOUBLE
89095: LD_INT 1
89097: DEC
89098: ST_TO_ADDR
89099: LD_VAR 0 5
89103: PUSH
89104: FOR_TO
89105: IFFALSE 89152
// begin hc_class := 21 ;
89107: LD_ADDR_OWVAR 28
89111: PUSH
89112: LD_INT 21
89114: ST_TO_ADDR
// hc_gallery :=  ;
89115: LD_ADDR_OWVAR 33
89119: PUSH
89120: LD_STRING 
89122: ST_TO_ADDR
// animal := CreateHuman ;
89123: LD_ADDR_VAR 0 12
89127: PUSH
89128: CALL_OW 44
89132: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89133: LD_VAR 0 12
89137: PPUSH
89138: LD_VAR 0 8
89142: PPUSH
89143: LD_INT 0
89145: PPUSH
89146: CALL 91211 0 3
// end ;
89150: GO 89104
89152: POP
89153: POP
// if birds then
89154: LD_VAR 0 1
89158: IFFALSE 89225
// for i = 1 to birds do
89160: LD_ADDR_VAR 0 11
89164: PUSH
89165: DOUBLE
89166: LD_INT 1
89168: DEC
89169: ST_TO_ADDR
89170: LD_VAR 0 1
89174: PUSH
89175: FOR_TO
89176: IFFALSE 89223
// begin hc_class := 18 ;
89178: LD_ADDR_OWVAR 28
89182: PUSH
89183: LD_INT 18
89185: ST_TO_ADDR
// hc_gallery =  ;
89186: LD_ADDR_OWVAR 33
89190: PUSH
89191: LD_STRING 
89193: ST_TO_ADDR
// animal := CreateHuman ;
89194: LD_ADDR_VAR 0 12
89198: PUSH
89199: CALL_OW 44
89203: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89204: LD_VAR 0 12
89208: PPUSH
89209: LD_VAR 0 8
89213: PPUSH
89214: LD_INT 0
89216: PPUSH
89217: CALL 91211 0 3
// end ;
89221: GO 89175
89223: POP
89224: POP
// if tigers then
89225: LD_VAR 0 2
89229: IFFALSE 89313
// for i = 1 to tigers do
89231: LD_ADDR_VAR 0 11
89235: PUSH
89236: DOUBLE
89237: LD_INT 1
89239: DEC
89240: ST_TO_ADDR
89241: LD_VAR 0 2
89245: PUSH
89246: FOR_TO
89247: IFFALSE 89311
// begin hc_class = class_tiger ;
89249: LD_ADDR_OWVAR 28
89253: PUSH
89254: LD_INT 14
89256: ST_TO_ADDR
// hc_gallery =  ;
89257: LD_ADDR_OWVAR 33
89261: PUSH
89262: LD_STRING 
89264: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
89265: LD_ADDR_OWVAR 35
89269: PUSH
89270: LD_INT 7
89272: NEG
89273: PPUSH
89274: LD_INT 7
89276: PPUSH
89277: CALL_OW 12
89281: ST_TO_ADDR
// animal := CreateHuman ;
89282: LD_ADDR_VAR 0 12
89286: PUSH
89287: CALL_OW 44
89291: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89292: LD_VAR 0 12
89296: PPUSH
89297: LD_VAR 0 8
89301: PPUSH
89302: LD_INT 0
89304: PPUSH
89305: CALL 91211 0 3
// end ;
89309: GO 89246
89311: POP
89312: POP
// if apemans then
89313: LD_VAR 0 3
89317: IFFALSE 89440
// for i = 1 to apemans do
89319: LD_ADDR_VAR 0 11
89323: PUSH
89324: DOUBLE
89325: LD_INT 1
89327: DEC
89328: ST_TO_ADDR
89329: LD_VAR 0 3
89333: PUSH
89334: FOR_TO
89335: IFFALSE 89438
// begin hc_class = class_apeman ;
89337: LD_ADDR_OWVAR 28
89341: PUSH
89342: LD_INT 12
89344: ST_TO_ADDR
// hc_gallery =  ;
89345: LD_ADDR_OWVAR 33
89349: PUSH
89350: LD_STRING 
89352: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
89353: LD_ADDR_OWVAR 35
89357: PUSH
89358: LD_INT 2
89360: NEG
89361: PPUSH
89362: LD_INT 2
89364: PPUSH
89365: CALL_OW 12
89369: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
89370: LD_ADDR_OWVAR 31
89374: PUSH
89375: LD_INT 1
89377: PPUSH
89378: LD_INT 3
89380: PPUSH
89381: CALL_OW 12
89385: PUSH
89386: LD_INT 1
89388: PPUSH
89389: LD_INT 3
89391: PPUSH
89392: CALL_OW 12
89396: PUSH
89397: LD_INT 0
89399: PUSH
89400: LD_INT 0
89402: PUSH
89403: EMPTY
89404: LIST
89405: LIST
89406: LIST
89407: LIST
89408: ST_TO_ADDR
// animal := CreateHuman ;
89409: LD_ADDR_VAR 0 12
89413: PUSH
89414: CALL_OW 44
89418: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89419: LD_VAR 0 12
89423: PPUSH
89424: LD_VAR 0 8
89428: PPUSH
89429: LD_INT 0
89431: PPUSH
89432: CALL 91211 0 3
// end ;
89436: GO 89334
89438: POP
89439: POP
// if enchidnas then
89440: LD_VAR 0 4
89444: IFFALSE 89511
// for i = 1 to enchidnas do
89446: LD_ADDR_VAR 0 11
89450: PUSH
89451: DOUBLE
89452: LD_INT 1
89454: DEC
89455: ST_TO_ADDR
89456: LD_VAR 0 4
89460: PUSH
89461: FOR_TO
89462: IFFALSE 89509
// begin hc_class = 13 ;
89464: LD_ADDR_OWVAR 28
89468: PUSH
89469: LD_INT 13
89471: ST_TO_ADDR
// hc_gallery =  ;
89472: LD_ADDR_OWVAR 33
89476: PUSH
89477: LD_STRING 
89479: ST_TO_ADDR
// animal := CreateHuman ;
89480: LD_ADDR_VAR 0 12
89484: PUSH
89485: CALL_OW 44
89489: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
89490: LD_VAR 0 12
89494: PPUSH
89495: LD_VAR 0 8
89499: PPUSH
89500: LD_INT 0
89502: PPUSH
89503: CALL 91211 0 3
// end ;
89507: GO 89461
89509: POP
89510: POP
// if fishes then
89511: LD_VAR 0 7
89515: IFFALSE 89582
// for i = 1 to fishes do
89517: LD_ADDR_VAR 0 11
89521: PUSH
89522: DOUBLE
89523: LD_INT 1
89525: DEC
89526: ST_TO_ADDR
89527: LD_VAR 0 7
89531: PUSH
89532: FOR_TO
89533: IFFALSE 89580
// begin hc_class = 20 ;
89535: LD_ADDR_OWVAR 28
89539: PUSH
89540: LD_INT 20
89542: ST_TO_ADDR
// hc_gallery =  ;
89543: LD_ADDR_OWVAR 33
89547: PUSH
89548: LD_STRING 
89550: ST_TO_ADDR
// animal := CreateHuman ;
89551: LD_ADDR_VAR 0 12
89555: PUSH
89556: CALL_OW 44
89560: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
89561: LD_VAR 0 12
89565: PPUSH
89566: LD_VAR 0 9
89570: PPUSH
89571: LD_INT 0
89573: PPUSH
89574: CALL 91211 0 3
// end ;
89578: GO 89532
89580: POP
89581: POP
// end ;
89582: LD_VAR 0 10
89586: RET
// export function WantHeal ( sci , unit ) ; begin
89587: LD_INT 0
89589: PPUSH
// if GetTaskList ( sci ) > 0 then
89590: LD_VAR 0 1
89594: PPUSH
89595: CALL_OW 437
89599: PUSH
89600: LD_INT 0
89602: GREATER
89603: IFFALSE 89673
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
89605: LD_VAR 0 1
89609: PPUSH
89610: CALL_OW 437
89614: PUSH
89615: LD_INT 1
89617: ARRAY
89618: PUSH
89619: LD_INT 1
89621: ARRAY
89622: PUSH
89623: LD_STRING l
89625: EQUAL
89626: PUSH
89627: LD_VAR 0 1
89631: PPUSH
89632: CALL_OW 437
89636: PUSH
89637: LD_INT 1
89639: ARRAY
89640: PUSH
89641: LD_INT 4
89643: ARRAY
89644: PUSH
89645: LD_VAR 0 2
89649: EQUAL
89650: AND
89651: IFFALSE 89663
// result := true else
89653: LD_ADDR_VAR 0 3
89657: PUSH
89658: LD_INT 1
89660: ST_TO_ADDR
89661: GO 89671
// result := false ;
89663: LD_ADDR_VAR 0 3
89667: PUSH
89668: LD_INT 0
89670: ST_TO_ADDR
// end else
89671: GO 89681
// result := false ;
89673: LD_ADDR_VAR 0 3
89677: PUSH
89678: LD_INT 0
89680: ST_TO_ADDR
// end ;
89681: LD_VAR 0 3
89685: RET
// export function HealTarget ( sci ) ; begin
89686: LD_INT 0
89688: PPUSH
// if not sci then
89689: LD_VAR 0 1
89693: NOT
89694: IFFALSE 89698
// exit ;
89696: GO 89763
// result := 0 ;
89698: LD_ADDR_VAR 0 2
89702: PUSH
89703: LD_INT 0
89705: ST_TO_ADDR
// if GetTaskList ( sci ) then
89706: LD_VAR 0 1
89710: PPUSH
89711: CALL_OW 437
89715: IFFALSE 89763
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
89717: LD_VAR 0 1
89721: PPUSH
89722: CALL_OW 437
89726: PUSH
89727: LD_INT 1
89729: ARRAY
89730: PUSH
89731: LD_INT 1
89733: ARRAY
89734: PUSH
89735: LD_STRING l
89737: EQUAL
89738: IFFALSE 89763
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
89740: LD_ADDR_VAR 0 2
89744: PUSH
89745: LD_VAR 0 1
89749: PPUSH
89750: CALL_OW 437
89754: PUSH
89755: LD_INT 1
89757: ARRAY
89758: PUSH
89759: LD_INT 4
89761: ARRAY
89762: ST_TO_ADDR
// end ;
89763: LD_VAR 0 2
89767: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
89768: LD_INT 0
89770: PPUSH
89771: PPUSH
89772: PPUSH
89773: PPUSH
// if not base_units then
89774: LD_VAR 0 1
89778: NOT
89779: IFFALSE 89783
// exit ;
89781: GO 89870
// result := false ;
89783: LD_ADDR_VAR 0 2
89787: PUSH
89788: LD_INT 0
89790: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
89791: LD_ADDR_VAR 0 5
89795: PUSH
89796: LD_VAR 0 1
89800: PPUSH
89801: LD_INT 21
89803: PUSH
89804: LD_INT 3
89806: PUSH
89807: EMPTY
89808: LIST
89809: LIST
89810: PPUSH
89811: CALL_OW 72
89815: ST_TO_ADDR
// if not tmp then
89816: LD_VAR 0 5
89820: NOT
89821: IFFALSE 89825
// exit ;
89823: GO 89870
// for i in tmp do
89825: LD_ADDR_VAR 0 3
89829: PUSH
89830: LD_VAR 0 5
89834: PUSH
89835: FOR_IN
89836: IFFALSE 89868
// begin result := EnemyInRange ( i , 22 ) ;
89838: LD_ADDR_VAR 0 2
89842: PUSH
89843: LD_VAR 0 3
89847: PPUSH
89848: LD_INT 22
89850: PPUSH
89851: CALL 87468 0 2
89855: ST_TO_ADDR
// if result then
89856: LD_VAR 0 2
89860: IFFALSE 89866
// exit ;
89862: POP
89863: POP
89864: GO 89870
// end ;
89866: GO 89835
89868: POP
89869: POP
// end ;
89870: LD_VAR 0 2
89874: RET
// export function FilterByTag ( units , tag ) ; begin
89875: LD_INT 0
89877: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
89878: LD_ADDR_VAR 0 3
89882: PUSH
89883: LD_VAR 0 1
89887: PPUSH
89888: LD_INT 120
89890: PUSH
89891: LD_VAR 0 2
89895: PUSH
89896: EMPTY
89897: LIST
89898: LIST
89899: PPUSH
89900: CALL_OW 72
89904: ST_TO_ADDR
// end ;
89905: LD_VAR 0 3
89909: RET
// export function IsDriver ( un ) ; begin
89910: LD_INT 0
89912: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
89913: LD_ADDR_VAR 0 2
89917: PUSH
89918: LD_VAR 0 1
89922: PUSH
89923: LD_INT 55
89925: PUSH
89926: EMPTY
89927: LIST
89928: PPUSH
89929: CALL_OW 69
89933: IN
89934: ST_TO_ADDR
// end ;
89935: LD_VAR 0 2
89939: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
89940: LD_INT 0
89942: PPUSH
89943: PPUSH
// list := [ ] ;
89944: LD_ADDR_VAR 0 5
89948: PUSH
89949: EMPTY
89950: ST_TO_ADDR
// case d of 0 :
89951: LD_VAR 0 3
89955: PUSH
89956: LD_INT 0
89958: DOUBLE
89959: EQUAL
89960: IFTRUE 89964
89962: GO 90097
89964: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
89965: LD_ADDR_VAR 0 5
89969: PUSH
89970: LD_VAR 0 1
89974: PUSH
89975: LD_INT 4
89977: MINUS
89978: PUSH
89979: LD_VAR 0 2
89983: PUSH
89984: LD_INT 4
89986: MINUS
89987: PUSH
89988: LD_INT 2
89990: PUSH
89991: EMPTY
89992: LIST
89993: LIST
89994: LIST
89995: PUSH
89996: LD_VAR 0 1
90000: PUSH
90001: LD_INT 3
90003: MINUS
90004: PUSH
90005: LD_VAR 0 2
90009: PUSH
90010: LD_INT 1
90012: PUSH
90013: EMPTY
90014: LIST
90015: LIST
90016: LIST
90017: PUSH
90018: LD_VAR 0 1
90022: PUSH
90023: LD_INT 4
90025: PLUS
90026: PUSH
90027: LD_VAR 0 2
90031: PUSH
90032: LD_INT 4
90034: PUSH
90035: EMPTY
90036: LIST
90037: LIST
90038: LIST
90039: PUSH
90040: LD_VAR 0 1
90044: PUSH
90045: LD_INT 3
90047: PLUS
90048: PUSH
90049: LD_VAR 0 2
90053: PUSH
90054: LD_INT 3
90056: PLUS
90057: PUSH
90058: LD_INT 5
90060: PUSH
90061: EMPTY
90062: LIST
90063: LIST
90064: LIST
90065: PUSH
90066: LD_VAR 0 1
90070: PUSH
90071: LD_VAR 0 2
90075: PUSH
90076: LD_INT 4
90078: PLUS
90079: PUSH
90080: LD_INT 0
90082: PUSH
90083: EMPTY
90084: LIST
90085: LIST
90086: LIST
90087: PUSH
90088: EMPTY
90089: LIST
90090: LIST
90091: LIST
90092: LIST
90093: LIST
90094: ST_TO_ADDR
// end ; 1 :
90095: GO 90795
90097: LD_INT 1
90099: DOUBLE
90100: EQUAL
90101: IFTRUE 90105
90103: GO 90238
90105: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
90106: LD_ADDR_VAR 0 5
90110: PUSH
90111: LD_VAR 0 1
90115: PUSH
90116: LD_VAR 0 2
90120: PUSH
90121: LD_INT 4
90123: MINUS
90124: PUSH
90125: LD_INT 3
90127: PUSH
90128: EMPTY
90129: LIST
90130: LIST
90131: LIST
90132: PUSH
90133: LD_VAR 0 1
90137: PUSH
90138: LD_INT 3
90140: MINUS
90141: PUSH
90142: LD_VAR 0 2
90146: PUSH
90147: LD_INT 3
90149: MINUS
90150: PUSH
90151: LD_INT 2
90153: PUSH
90154: EMPTY
90155: LIST
90156: LIST
90157: LIST
90158: PUSH
90159: LD_VAR 0 1
90163: PUSH
90164: LD_INT 4
90166: MINUS
90167: PUSH
90168: LD_VAR 0 2
90172: PUSH
90173: LD_INT 1
90175: PUSH
90176: EMPTY
90177: LIST
90178: LIST
90179: LIST
90180: PUSH
90181: LD_VAR 0 1
90185: PUSH
90186: LD_VAR 0 2
90190: PUSH
90191: LD_INT 3
90193: PLUS
90194: PUSH
90195: LD_INT 0
90197: PUSH
90198: EMPTY
90199: LIST
90200: LIST
90201: LIST
90202: PUSH
90203: LD_VAR 0 1
90207: PUSH
90208: LD_INT 4
90210: PLUS
90211: PUSH
90212: LD_VAR 0 2
90216: PUSH
90217: LD_INT 4
90219: PLUS
90220: PUSH
90221: LD_INT 5
90223: PUSH
90224: EMPTY
90225: LIST
90226: LIST
90227: LIST
90228: PUSH
90229: EMPTY
90230: LIST
90231: LIST
90232: LIST
90233: LIST
90234: LIST
90235: ST_TO_ADDR
// end ; 2 :
90236: GO 90795
90238: LD_INT 2
90240: DOUBLE
90241: EQUAL
90242: IFTRUE 90246
90244: GO 90375
90246: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
90247: LD_ADDR_VAR 0 5
90251: PUSH
90252: LD_VAR 0 1
90256: PUSH
90257: LD_VAR 0 2
90261: PUSH
90262: LD_INT 3
90264: MINUS
90265: PUSH
90266: LD_INT 3
90268: PUSH
90269: EMPTY
90270: LIST
90271: LIST
90272: LIST
90273: PUSH
90274: LD_VAR 0 1
90278: PUSH
90279: LD_INT 4
90281: PLUS
90282: PUSH
90283: LD_VAR 0 2
90287: PUSH
90288: LD_INT 4
90290: PUSH
90291: EMPTY
90292: LIST
90293: LIST
90294: LIST
90295: PUSH
90296: LD_VAR 0 1
90300: PUSH
90301: LD_VAR 0 2
90305: PUSH
90306: LD_INT 4
90308: PLUS
90309: PUSH
90310: LD_INT 0
90312: PUSH
90313: EMPTY
90314: LIST
90315: LIST
90316: LIST
90317: PUSH
90318: LD_VAR 0 1
90322: PUSH
90323: LD_INT 3
90325: MINUS
90326: PUSH
90327: LD_VAR 0 2
90331: PUSH
90332: LD_INT 1
90334: PUSH
90335: EMPTY
90336: LIST
90337: LIST
90338: LIST
90339: PUSH
90340: LD_VAR 0 1
90344: PUSH
90345: LD_INT 4
90347: MINUS
90348: PUSH
90349: LD_VAR 0 2
90353: PUSH
90354: LD_INT 4
90356: MINUS
90357: PUSH
90358: LD_INT 2
90360: PUSH
90361: EMPTY
90362: LIST
90363: LIST
90364: LIST
90365: PUSH
90366: EMPTY
90367: LIST
90368: LIST
90369: LIST
90370: LIST
90371: LIST
90372: ST_TO_ADDR
// end ; 3 :
90373: GO 90795
90375: LD_INT 3
90377: DOUBLE
90378: EQUAL
90379: IFTRUE 90383
90381: GO 90516
90383: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
90384: LD_ADDR_VAR 0 5
90388: PUSH
90389: LD_VAR 0 1
90393: PUSH
90394: LD_INT 3
90396: PLUS
90397: PUSH
90398: LD_VAR 0 2
90402: PUSH
90403: LD_INT 4
90405: PUSH
90406: EMPTY
90407: LIST
90408: LIST
90409: LIST
90410: PUSH
90411: LD_VAR 0 1
90415: PUSH
90416: LD_INT 4
90418: PLUS
90419: PUSH
90420: LD_VAR 0 2
90424: PUSH
90425: LD_INT 4
90427: PLUS
90428: PUSH
90429: LD_INT 5
90431: PUSH
90432: EMPTY
90433: LIST
90434: LIST
90435: LIST
90436: PUSH
90437: LD_VAR 0 1
90441: PUSH
90442: LD_INT 4
90444: MINUS
90445: PUSH
90446: LD_VAR 0 2
90450: PUSH
90451: LD_INT 1
90453: PUSH
90454: EMPTY
90455: LIST
90456: LIST
90457: LIST
90458: PUSH
90459: LD_VAR 0 1
90463: PUSH
90464: LD_VAR 0 2
90468: PUSH
90469: LD_INT 4
90471: MINUS
90472: PUSH
90473: LD_INT 3
90475: PUSH
90476: EMPTY
90477: LIST
90478: LIST
90479: LIST
90480: PUSH
90481: LD_VAR 0 1
90485: PUSH
90486: LD_INT 3
90488: MINUS
90489: PUSH
90490: LD_VAR 0 2
90494: PUSH
90495: LD_INT 3
90497: MINUS
90498: PUSH
90499: LD_INT 2
90501: PUSH
90502: EMPTY
90503: LIST
90504: LIST
90505: LIST
90506: PUSH
90507: EMPTY
90508: LIST
90509: LIST
90510: LIST
90511: LIST
90512: LIST
90513: ST_TO_ADDR
// end ; 4 :
90514: GO 90795
90516: LD_INT 4
90518: DOUBLE
90519: EQUAL
90520: IFTRUE 90524
90522: GO 90657
90524: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
90525: LD_ADDR_VAR 0 5
90529: PUSH
90530: LD_VAR 0 1
90534: PUSH
90535: LD_VAR 0 2
90539: PUSH
90540: LD_INT 4
90542: PLUS
90543: PUSH
90544: LD_INT 0
90546: PUSH
90547: EMPTY
90548: LIST
90549: LIST
90550: LIST
90551: PUSH
90552: LD_VAR 0 1
90556: PUSH
90557: LD_INT 3
90559: PLUS
90560: PUSH
90561: LD_VAR 0 2
90565: PUSH
90566: LD_INT 3
90568: PLUS
90569: PUSH
90570: LD_INT 5
90572: PUSH
90573: EMPTY
90574: LIST
90575: LIST
90576: LIST
90577: PUSH
90578: LD_VAR 0 1
90582: PUSH
90583: LD_INT 4
90585: PLUS
90586: PUSH
90587: LD_VAR 0 2
90591: PUSH
90592: LD_INT 4
90594: PUSH
90595: EMPTY
90596: LIST
90597: LIST
90598: LIST
90599: PUSH
90600: LD_VAR 0 1
90604: PUSH
90605: LD_VAR 0 2
90609: PUSH
90610: LD_INT 3
90612: MINUS
90613: PUSH
90614: LD_INT 3
90616: PUSH
90617: EMPTY
90618: LIST
90619: LIST
90620: LIST
90621: PUSH
90622: LD_VAR 0 1
90626: PUSH
90627: LD_INT 4
90629: MINUS
90630: PUSH
90631: LD_VAR 0 2
90635: PUSH
90636: LD_INT 4
90638: MINUS
90639: PUSH
90640: LD_INT 2
90642: PUSH
90643: EMPTY
90644: LIST
90645: LIST
90646: LIST
90647: PUSH
90648: EMPTY
90649: LIST
90650: LIST
90651: LIST
90652: LIST
90653: LIST
90654: ST_TO_ADDR
// end ; 5 :
90655: GO 90795
90657: LD_INT 5
90659: DOUBLE
90660: EQUAL
90661: IFTRUE 90665
90663: GO 90794
90665: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
90666: LD_ADDR_VAR 0 5
90670: PUSH
90671: LD_VAR 0 1
90675: PUSH
90676: LD_INT 4
90678: MINUS
90679: PUSH
90680: LD_VAR 0 2
90684: PUSH
90685: LD_INT 1
90687: PUSH
90688: EMPTY
90689: LIST
90690: LIST
90691: LIST
90692: PUSH
90693: LD_VAR 0 1
90697: PUSH
90698: LD_VAR 0 2
90702: PUSH
90703: LD_INT 4
90705: MINUS
90706: PUSH
90707: LD_INT 3
90709: PUSH
90710: EMPTY
90711: LIST
90712: LIST
90713: LIST
90714: PUSH
90715: LD_VAR 0 1
90719: PUSH
90720: LD_INT 4
90722: PLUS
90723: PUSH
90724: LD_VAR 0 2
90728: PUSH
90729: LD_INT 4
90731: PLUS
90732: PUSH
90733: LD_INT 5
90735: PUSH
90736: EMPTY
90737: LIST
90738: LIST
90739: LIST
90740: PUSH
90741: LD_VAR 0 1
90745: PUSH
90746: LD_INT 3
90748: PLUS
90749: PUSH
90750: LD_VAR 0 2
90754: PUSH
90755: LD_INT 4
90757: PUSH
90758: EMPTY
90759: LIST
90760: LIST
90761: LIST
90762: PUSH
90763: LD_VAR 0 1
90767: PUSH
90768: LD_VAR 0 2
90772: PUSH
90773: LD_INT 3
90775: PLUS
90776: PUSH
90777: LD_INT 0
90779: PUSH
90780: EMPTY
90781: LIST
90782: LIST
90783: LIST
90784: PUSH
90785: EMPTY
90786: LIST
90787: LIST
90788: LIST
90789: LIST
90790: LIST
90791: ST_TO_ADDR
// end ; end ;
90792: GO 90795
90794: POP
// result := list ;
90795: LD_ADDR_VAR 0 4
90799: PUSH
90800: LD_VAR 0 5
90804: ST_TO_ADDR
// end ;
90805: LD_VAR 0 4
90809: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
90810: LD_INT 0
90812: PPUSH
90813: PPUSH
90814: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
90815: LD_VAR 0 1
90819: NOT
90820: PUSH
90821: LD_VAR 0 2
90825: PUSH
90826: LD_INT 1
90828: PUSH
90829: LD_INT 2
90831: PUSH
90832: LD_INT 3
90834: PUSH
90835: LD_INT 4
90837: PUSH
90838: EMPTY
90839: LIST
90840: LIST
90841: LIST
90842: LIST
90843: IN
90844: NOT
90845: OR
90846: IFFALSE 90850
// exit ;
90848: GO 90933
// tmp := [ ] ;
90850: LD_ADDR_VAR 0 5
90854: PUSH
90855: EMPTY
90856: ST_TO_ADDR
// for i in units do
90857: LD_ADDR_VAR 0 4
90861: PUSH
90862: LD_VAR 0 1
90866: PUSH
90867: FOR_IN
90868: IFFALSE 90902
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
90870: LD_ADDR_VAR 0 5
90874: PUSH
90875: LD_VAR 0 5
90879: PPUSH
90880: LD_VAR 0 4
90884: PPUSH
90885: LD_VAR 0 2
90889: PPUSH
90890: CALL_OW 259
90894: PPUSH
90895: CALL 92306 0 2
90899: ST_TO_ADDR
90900: GO 90867
90902: POP
90903: POP
// if not tmp then
90904: LD_VAR 0 5
90908: NOT
90909: IFFALSE 90913
// exit ;
90911: GO 90933
// result := SortListByListDesc ( units , tmp ) ;
90913: LD_ADDR_VAR 0 3
90917: PUSH
90918: LD_VAR 0 1
90922: PPUSH
90923: LD_VAR 0 5
90927: PPUSH
90928: CALL_OW 77
90932: ST_TO_ADDR
// end ;
90933: LD_VAR 0 3
90937: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
90938: LD_INT 0
90940: PPUSH
90941: PPUSH
90942: PPUSH
// result := false ;
90943: LD_ADDR_VAR 0 3
90947: PUSH
90948: LD_INT 0
90950: ST_TO_ADDR
// if not building then
90951: LD_VAR 0 2
90955: NOT
90956: IFFALSE 90960
// exit ;
90958: GO 91098
// x := GetX ( building ) ;
90960: LD_ADDR_VAR 0 4
90964: PUSH
90965: LD_VAR 0 2
90969: PPUSH
90970: CALL_OW 250
90974: ST_TO_ADDR
// y := GetY ( building ) ;
90975: LD_ADDR_VAR 0 5
90979: PUSH
90980: LD_VAR 0 2
90984: PPUSH
90985: CALL_OW 251
90989: ST_TO_ADDR
// if not x or not y then
90990: LD_VAR 0 4
90994: NOT
90995: PUSH
90996: LD_VAR 0 5
91000: NOT
91001: OR
91002: IFFALSE 91006
// exit ;
91004: GO 91098
// if GetTaskList ( unit ) then
91006: LD_VAR 0 1
91010: PPUSH
91011: CALL_OW 437
91015: IFFALSE 91098
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
91017: LD_STRING e
91019: PUSH
91020: LD_VAR 0 1
91024: PPUSH
91025: CALL_OW 437
91029: PUSH
91030: LD_INT 1
91032: ARRAY
91033: PUSH
91034: LD_INT 1
91036: ARRAY
91037: EQUAL
91038: PUSH
91039: LD_VAR 0 4
91043: PUSH
91044: LD_VAR 0 1
91048: PPUSH
91049: CALL_OW 437
91053: PUSH
91054: LD_INT 1
91056: ARRAY
91057: PUSH
91058: LD_INT 2
91060: ARRAY
91061: EQUAL
91062: AND
91063: PUSH
91064: LD_VAR 0 5
91068: PUSH
91069: LD_VAR 0 1
91073: PPUSH
91074: CALL_OW 437
91078: PUSH
91079: LD_INT 1
91081: ARRAY
91082: PUSH
91083: LD_INT 3
91085: ARRAY
91086: EQUAL
91087: AND
91088: IFFALSE 91098
// result := true end ;
91090: LD_ADDR_VAR 0 3
91094: PUSH
91095: LD_INT 1
91097: ST_TO_ADDR
// end ;
91098: LD_VAR 0 3
91102: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
91103: LD_INT 0
91105: PPUSH
// result := false ;
91106: LD_ADDR_VAR 0 4
91110: PUSH
91111: LD_INT 0
91113: ST_TO_ADDR
// if GetTaskList ( unit ) then
91114: LD_VAR 0 1
91118: PPUSH
91119: CALL_OW 437
91123: IFFALSE 91206
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
91125: LD_STRING M
91127: PUSH
91128: LD_VAR 0 1
91132: PPUSH
91133: CALL_OW 437
91137: PUSH
91138: LD_INT 1
91140: ARRAY
91141: PUSH
91142: LD_INT 1
91144: ARRAY
91145: EQUAL
91146: PUSH
91147: LD_VAR 0 2
91151: PUSH
91152: LD_VAR 0 1
91156: PPUSH
91157: CALL_OW 437
91161: PUSH
91162: LD_INT 1
91164: ARRAY
91165: PUSH
91166: LD_INT 2
91168: ARRAY
91169: EQUAL
91170: AND
91171: PUSH
91172: LD_VAR 0 3
91176: PUSH
91177: LD_VAR 0 1
91181: PPUSH
91182: CALL_OW 437
91186: PUSH
91187: LD_INT 1
91189: ARRAY
91190: PUSH
91191: LD_INT 3
91193: ARRAY
91194: EQUAL
91195: AND
91196: IFFALSE 91206
// result := true ;
91198: LD_ADDR_VAR 0 4
91202: PUSH
91203: LD_INT 1
91205: ST_TO_ADDR
// end ; end ;
91206: LD_VAR 0 4
91210: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
91211: LD_INT 0
91213: PPUSH
91214: PPUSH
91215: PPUSH
91216: PPUSH
// if not unit or not area then
91217: LD_VAR 0 1
91221: NOT
91222: PUSH
91223: LD_VAR 0 2
91227: NOT
91228: OR
91229: IFFALSE 91233
// exit ;
91231: GO 91409
// tmp := AreaToList ( area , i ) ;
91233: LD_ADDR_VAR 0 6
91237: PUSH
91238: LD_VAR 0 2
91242: PPUSH
91243: LD_VAR 0 5
91247: PPUSH
91248: CALL_OW 517
91252: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
91253: LD_ADDR_VAR 0 5
91257: PUSH
91258: DOUBLE
91259: LD_INT 1
91261: DEC
91262: ST_TO_ADDR
91263: LD_VAR 0 6
91267: PUSH
91268: LD_INT 1
91270: ARRAY
91271: PUSH
91272: FOR_TO
91273: IFFALSE 91407
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
91275: LD_ADDR_VAR 0 7
91279: PUSH
91280: LD_VAR 0 6
91284: PUSH
91285: LD_INT 1
91287: ARRAY
91288: PUSH
91289: LD_VAR 0 5
91293: ARRAY
91294: PUSH
91295: LD_VAR 0 6
91299: PUSH
91300: LD_INT 2
91302: ARRAY
91303: PUSH
91304: LD_VAR 0 5
91308: ARRAY
91309: PUSH
91310: EMPTY
91311: LIST
91312: LIST
91313: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
91314: LD_INT 92
91316: PUSH
91317: LD_VAR 0 7
91321: PUSH
91322: LD_INT 1
91324: ARRAY
91325: PUSH
91326: LD_VAR 0 7
91330: PUSH
91331: LD_INT 2
91333: ARRAY
91334: PUSH
91335: LD_INT 2
91337: PUSH
91338: EMPTY
91339: LIST
91340: LIST
91341: LIST
91342: LIST
91343: PPUSH
91344: CALL_OW 69
91348: PUSH
91349: LD_INT 0
91351: EQUAL
91352: IFFALSE 91405
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
91354: LD_VAR 0 1
91358: PPUSH
91359: LD_VAR 0 7
91363: PUSH
91364: LD_INT 1
91366: ARRAY
91367: PPUSH
91368: LD_VAR 0 7
91372: PUSH
91373: LD_INT 2
91375: ARRAY
91376: PPUSH
91377: LD_VAR 0 3
91381: PPUSH
91382: CALL_OW 48
// result := IsPlaced ( unit ) ;
91386: LD_ADDR_VAR 0 4
91390: PUSH
91391: LD_VAR 0 1
91395: PPUSH
91396: CALL_OW 305
91400: ST_TO_ADDR
// exit ;
91401: POP
91402: POP
91403: GO 91409
// end ; end ;
91405: GO 91272
91407: POP
91408: POP
// end ;
91409: LD_VAR 0 4
91413: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
91414: LD_INT 0
91416: PPUSH
91417: PPUSH
91418: PPUSH
// if not side or side > 8 then
91419: LD_VAR 0 1
91423: NOT
91424: PUSH
91425: LD_VAR 0 1
91429: PUSH
91430: LD_INT 8
91432: GREATER
91433: OR
91434: IFFALSE 91438
// exit ;
91436: GO 91625
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
91438: LD_ADDR_VAR 0 4
91442: PUSH
91443: LD_INT 22
91445: PUSH
91446: LD_VAR 0 1
91450: PUSH
91451: EMPTY
91452: LIST
91453: LIST
91454: PUSH
91455: LD_INT 21
91457: PUSH
91458: LD_INT 3
91460: PUSH
91461: EMPTY
91462: LIST
91463: LIST
91464: PUSH
91465: EMPTY
91466: LIST
91467: LIST
91468: PPUSH
91469: CALL_OW 69
91473: ST_TO_ADDR
// if not tmp then
91474: LD_VAR 0 4
91478: NOT
91479: IFFALSE 91483
// exit ;
91481: GO 91625
// enable_addtolog := true ;
91483: LD_ADDR_OWVAR 81
91487: PUSH
91488: LD_INT 1
91490: ST_TO_ADDR
// AddToLog ( [ ) ;
91491: LD_STRING [
91493: PPUSH
91494: CALL_OW 561
// for i in tmp do
91498: LD_ADDR_VAR 0 3
91502: PUSH
91503: LD_VAR 0 4
91507: PUSH
91508: FOR_IN
91509: IFFALSE 91616
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
91511: LD_STRING [
91513: PUSH
91514: LD_VAR 0 3
91518: PPUSH
91519: CALL_OW 266
91523: STR
91524: PUSH
91525: LD_STRING , 
91527: STR
91528: PUSH
91529: LD_VAR 0 3
91533: PPUSH
91534: CALL_OW 250
91538: STR
91539: PUSH
91540: LD_STRING , 
91542: STR
91543: PUSH
91544: LD_VAR 0 3
91548: PPUSH
91549: CALL_OW 251
91553: STR
91554: PUSH
91555: LD_STRING , 
91557: STR
91558: PUSH
91559: LD_VAR 0 3
91563: PPUSH
91564: CALL_OW 254
91568: STR
91569: PUSH
91570: LD_STRING , 
91572: STR
91573: PUSH
91574: LD_VAR 0 3
91578: PPUSH
91579: LD_INT 1
91581: PPUSH
91582: CALL_OW 268
91586: STR
91587: PUSH
91588: LD_STRING , 
91590: STR
91591: PUSH
91592: LD_VAR 0 3
91596: PPUSH
91597: LD_INT 2
91599: PPUSH
91600: CALL_OW 268
91604: STR
91605: PUSH
91606: LD_STRING ],
91608: STR
91609: PPUSH
91610: CALL_OW 561
// end ;
91614: GO 91508
91616: POP
91617: POP
// AddToLog ( ]; ) ;
91618: LD_STRING ];
91620: PPUSH
91621: CALL_OW 561
// end ;
91625: LD_VAR 0 2
91629: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
91630: LD_INT 0
91632: PPUSH
91633: PPUSH
91634: PPUSH
91635: PPUSH
91636: PPUSH
// if not area or not rate or not max then
91637: LD_VAR 0 1
91641: NOT
91642: PUSH
91643: LD_VAR 0 2
91647: NOT
91648: OR
91649: PUSH
91650: LD_VAR 0 4
91654: NOT
91655: OR
91656: IFFALSE 91660
// exit ;
91658: GO 91849
// while 1 do
91660: LD_INT 1
91662: IFFALSE 91849
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
91664: LD_ADDR_VAR 0 9
91668: PUSH
91669: LD_VAR 0 1
91673: PPUSH
91674: LD_INT 1
91676: PPUSH
91677: CALL_OW 287
91681: PUSH
91682: LD_INT 10
91684: MUL
91685: ST_TO_ADDR
// r := rate / 10 ;
91686: LD_ADDR_VAR 0 7
91690: PUSH
91691: LD_VAR 0 2
91695: PUSH
91696: LD_INT 10
91698: DIVREAL
91699: ST_TO_ADDR
// time := 1 1$00 ;
91700: LD_ADDR_VAR 0 8
91704: PUSH
91705: LD_INT 2100
91707: ST_TO_ADDR
// if amount < min then
91708: LD_VAR 0 9
91712: PUSH
91713: LD_VAR 0 3
91717: LESS
91718: IFFALSE 91736
// r := r * 2 else
91720: LD_ADDR_VAR 0 7
91724: PUSH
91725: LD_VAR 0 7
91729: PUSH
91730: LD_INT 2
91732: MUL
91733: ST_TO_ADDR
91734: GO 91762
// if amount > max then
91736: LD_VAR 0 9
91740: PUSH
91741: LD_VAR 0 4
91745: GREATER
91746: IFFALSE 91762
// r := r / 2 ;
91748: LD_ADDR_VAR 0 7
91752: PUSH
91753: LD_VAR 0 7
91757: PUSH
91758: LD_INT 2
91760: DIVREAL
91761: ST_TO_ADDR
// time := time / r ;
91762: LD_ADDR_VAR 0 8
91766: PUSH
91767: LD_VAR 0 8
91771: PUSH
91772: LD_VAR 0 7
91776: DIVREAL
91777: ST_TO_ADDR
// if time < 0 then
91778: LD_VAR 0 8
91782: PUSH
91783: LD_INT 0
91785: LESS
91786: IFFALSE 91803
// time := time * - 1 ;
91788: LD_ADDR_VAR 0 8
91792: PUSH
91793: LD_VAR 0 8
91797: PUSH
91798: LD_INT 1
91800: NEG
91801: MUL
91802: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
91803: LD_VAR 0 8
91807: PUSH
91808: LD_INT 35
91810: PPUSH
91811: LD_INT 875
91813: PPUSH
91814: CALL_OW 12
91818: PLUS
91819: PPUSH
91820: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
91824: LD_INT 1
91826: PPUSH
91827: LD_INT 5
91829: PPUSH
91830: CALL_OW 12
91834: PPUSH
91835: LD_VAR 0 1
91839: PPUSH
91840: LD_INT 1
91842: PPUSH
91843: CALL_OW 55
// end ;
91847: GO 91660
// end ;
91849: LD_VAR 0 5
91853: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
91854: LD_INT 0
91856: PPUSH
91857: PPUSH
91858: PPUSH
91859: PPUSH
91860: PPUSH
91861: PPUSH
91862: PPUSH
91863: PPUSH
// if not turrets or not factories then
91864: LD_VAR 0 1
91868: NOT
91869: PUSH
91870: LD_VAR 0 2
91874: NOT
91875: OR
91876: IFFALSE 91880
// exit ;
91878: GO 92187
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
91880: LD_ADDR_VAR 0 10
91884: PUSH
91885: LD_INT 5
91887: PUSH
91888: LD_INT 6
91890: PUSH
91891: EMPTY
91892: LIST
91893: LIST
91894: PUSH
91895: LD_INT 2
91897: PUSH
91898: LD_INT 4
91900: PUSH
91901: EMPTY
91902: LIST
91903: LIST
91904: PUSH
91905: LD_INT 3
91907: PUSH
91908: LD_INT 5
91910: PUSH
91911: EMPTY
91912: LIST
91913: LIST
91914: PUSH
91915: EMPTY
91916: LIST
91917: LIST
91918: LIST
91919: PUSH
91920: LD_INT 24
91922: PUSH
91923: LD_INT 25
91925: PUSH
91926: EMPTY
91927: LIST
91928: LIST
91929: PUSH
91930: LD_INT 23
91932: PUSH
91933: LD_INT 27
91935: PUSH
91936: EMPTY
91937: LIST
91938: LIST
91939: PUSH
91940: EMPTY
91941: LIST
91942: LIST
91943: PUSH
91944: LD_INT 42
91946: PUSH
91947: LD_INT 43
91949: PUSH
91950: EMPTY
91951: LIST
91952: LIST
91953: PUSH
91954: LD_INT 44
91956: PUSH
91957: LD_INT 46
91959: PUSH
91960: EMPTY
91961: LIST
91962: LIST
91963: PUSH
91964: LD_INT 45
91966: PUSH
91967: LD_INT 47
91969: PUSH
91970: EMPTY
91971: LIST
91972: LIST
91973: PUSH
91974: EMPTY
91975: LIST
91976: LIST
91977: LIST
91978: PUSH
91979: EMPTY
91980: LIST
91981: LIST
91982: LIST
91983: ST_TO_ADDR
// result := [ ] ;
91984: LD_ADDR_VAR 0 3
91988: PUSH
91989: EMPTY
91990: ST_TO_ADDR
// for i in turrets do
91991: LD_ADDR_VAR 0 4
91995: PUSH
91996: LD_VAR 0 1
92000: PUSH
92001: FOR_IN
92002: IFFALSE 92185
// begin nat := GetNation ( i ) ;
92004: LD_ADDR_VAR 0 7
92008: PUSH
92009: LD_VAR 0 4
92013: PPUSH
92014: CALL_OW 248
92018: ST_TO_ADDR
// weapon := 0 ;
92019: LD_ADDR_VAR 0 8
92023: PUSH
92024: LD_INT 0
92026: ST_TO_ADDR
// if not nat then
92027: LD_VAR 0 7
92031: NOT
92032: IFFALSE 92036
// continue ;
92034: GO 92001
// for j in list [ nat ] do
92036: LD_ADDR_VAR 0 5
92040: PUSH
92041: LD_VAR 0 10
92045: PUSH
92046: LD_VAR 0 7
92050: ARRAY
92051: PUSH
92052: FOR_IN
92053: IFFALSE 92094
// if GetBWeapon ( i ) = j [ 1 ] then
92055: LD_VAR 0 4
92059: PPUSH
92060: CALL_OW 269
92064: PUSH
92065: LD_VAR 0 5
92069: PUSH
92070: LD_INT 1
92072: ARRAY
92073: EQUAL
92074: IFFALSE 92092
// begin weapon := j [ 2 ] ;
92076: LD_ADDR_VAR 0 8
92080: PUSH
92081: LD_VAR 0 5
92085: PUSH
92086: LD_INT 2
92088: ARRAY
92089: ST_TO_ADDR
// break ;
92090: GO 92094
// end ;
92092: GO 92052
92094: POP
92095: POP
// if not weapon then
92096: LD_VAR 0 8
92100: NOT
92101: IFFALSE 92105
// continue ;
92103: GO 92001
// for k in factories do
92105: LD_ADDR_VAR 0 6
92109: PUSH
92110: LD_VAR 0 2
92114: PUSH
92115: FOR_IN
92116: IFFALSE 92181
// begin weapons := AvailableWeaponList ( k ) ;
92118: LD_ADDR_VAR 0 9
92122: PUSH
92123: LD_VAR 0 6
92127: PPUSH
92128: CALL_OW 478
92132: ST_TO_ADDR
// if not weapons then
92133: LD_VAR 0 9
92137: NOT
92138: IFFALSE 92142
// continue ;
92140: GO 92115
// if weapon in weapons then
92142: LD_VAR 0 8
92146: PUSH
92147: LD_VAR 0 9
92151: IN
92152: IFFALSE 92179
// begin result := [ i , weapon ] ;
92154: LD_ADDR_VAR 0 3
92158: PUSH
92159: LD_VAR 0 4
92163: PUSH
92164: LD_VAR 0 8
92168: PUSH
92169: EMPTY
92170: LIST
92171: LIST
92172: ST_TO_ADDR
// exit ;
92173: POP
92174: POP
92175: POP
92176: POP
92177: GO 92187
// end ; end ;
92179: GO 92115
92181: POP
92182: POP
// end ;
92183: GO 92001
92185: POP
92186: POP
// end ;
92187: LD_VAR 0 3
92191: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
92192: LD_INT 0
92194: PPUSH
// if not side or side > 8 then
92195: LD_VAR 0 3
92199: NOT
92200: PUSH
92201: LD_VAR 0 3
92205: PUSH
92206: LD_INT 8
92208: GREATER
92209: OR
92210: IFFALSE 92214
// exit ;
92212: GO 92273
// if not range then
92214: LD_VAR 0 4
92218: NOT
92219: IFFALSE 92230
// range := - 12 ;
92221: LD_ADDR_VAR 0 4
92225: PUSH
92226: LD_INT 12
92228: NEG
92229: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
92230: LD_VAR 0 1
92234: PPUSH
92235: LD_VAR 0 2
92239: PPUSH
92240: LD_VAR 0 3
92244: PPUSH
92245: LD_VAR 0 4
92249: PPUSH
92250: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
92254: LD_VAR 0 1
92258: PPUSH
92259: LD_VAR 0 2
92263: PPUSH
92264: LD_VAR 0 3
92268: PPUSH
92269: CALL_OW 331
// end ;
92273: LD_VAR 0 5
92277: RET
// export function Video ( mode ) ; begin
92278: LD_INT 0
92280: PPUSH
// ingame_video = mode ;
92281: LD_ADDR_OWVAR 52
92285: PUSH
92286: LD_VAR 0 1
92290: ST_TO_ADDR
// interface_hidden = mode ;
92291: LD_ADDR_OWVAR 54
92295: PUSH
92296: LD_VAR 0 1
92300: ST_TO_ADDR
// end ;
92301: LD_VAR 0 2
92305: RET
// export function Join ( array , element ) ; begin
92306: LD_INT 0
92308: PPUSH
// result := Replace ( array , array + 1 , element ) ;
92309: LD_ADDR_VAR 0 3
92313: PUSH
92314: LD_VAR 0 1
92318: PPUSH
92319: LD_VAR 0 1
92323: PUSH
92324: LD_INT 1
92326: PLUS
92327: PPUSH
92328: LD_VAR 0 2
92332: PPUSH
92333: CALL_OW 1
92337: ST_TO_ADDR
// end ;
92338: LD_VAR 0 3
92342: RET
// export function JoinUnion ( array , element ) ; begin
92343: LD_INT 0
92345: PPUSH
// result := array union element ;
92346: LD_ADDR_VAR 0 3
92350: PUSH
92351: LD_VAR 0 1
92355: PUSH
92356: LD_VAR 0 2
92360: UNION
92361: ST_TO_ADDR
// end ;
92362: LD_VAR 0 3
92366: RET
// export function GetBehemoths ( side ) ; begin
92367: LD_INT 0
92369: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
92370: LD_ADDR_VAR 0 2
92374: PUSH
92375: LD_INT 22
92377: PUSH
92378: LD_VAR 0 1
92382: PUSH
92383: EMPTY
92384: LIST
92385: LIST
92386: PUSH
92387: LD_INT 31
92389: PUSH
92390: LD_INT 25
92392: PUSH
92393: EMPTY
92394: LIST
92395: LIST
92396: PUSH
92397: EMPTY
92398: LIST
92399: LIST
92400: PPUSH
92401: CALL_OW 69
92405: ST_TO_ADDR
// end ;
92406: LD_VAR 0 2
92410: RET
// export function Shuffle ( array ) ; var i , index ; begin
92411: LD_INT 0
92413: PPUSH
92414: PPUSH
92415: PPUSH
// result := [ ] ;
92416: LD_ADDR_VAR 0 2
92420: PUSH
92421: EMPTY
92422: ST_TO_ADDR
// if not array then
92423: LD_VAR 0 1
92427: NOT
92428: IFFALSE 92432
// exit ;
92430: GO 92531
// Randomize ;
92432: CALL_OW 10
// for i = array downto 1 do
92436: LD_ADDR_VAR 0 3
92440: PUSH
92441: DOUBLE
92442: LD_VAR 0 1
92446: INC
92447: ST_TO_ADDR
92448: LD_INT 1
92450: PUSH
92451: FOR_DOWNTO
92452: IFFALSE 92529
// begin index := rand ( 1 , array ) ;
92454: LD_ADDR_VAR 0 4
92458: PUSH
92459: LD_INT 1
92461: PPUSH
92462: LD_VAR 0 1
92466: PPUSH
92467: CALL_OW 12
92471: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
92472: LD_ADDR_VAR 0 2
92476: PUSH
92477: LD_VAR 0 2
92481: PPUSH
92482: LD_VAR 0 2
92486: PUSH
92487: LD_INT 1
92489: PLUS
92490: PPUSH
92491: LD_VAR 0 1
92495: PUSH
92496: LD_VAR 0 4
92500: ARRAY
92501: PPUSH
92502: CALL_OW 2
92506: ST_TO_ADDR
// array := Delete ( array , index ) ;
92507: LD_ADDR_VAR 0 1
92511: PUSH
92512: LD_VAR 0 1
92516: PPUSH
92517: LD_VAR 0 4
92521: PPUSH
92522: CALL_OW 3
92526: ST_TO_ADDR
// end ;
92527: GO 92451
92529: POP
92530: POP
// end ;
92531: LD_VAR 0 2
92535: RET
// export function GetBaseMaterials ( base ) ; begin
92536: LD_INT 0
92538: PPUSH
// result := [ 0 , 0 , 0 ] ;
92539: LD_ADDR_VAR 0 2
92543: PUSH
92544: LD_INT 0
92546: PUSH
92547: LD_INT 0
92549: PUSH
92550: LD_INT 0
92552: PUSH
92553: EMPTY
92554: LIST
92555: LIST
92556: LIST
92557: ST_TO_ADDR
// if not base then
92558: LD_VAR 0 1
92562: NOT
92563: IFFALSE 92567
// exit ;
92565: GO 92616
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
92567: LD_ADDR_VAR 0 2
92571: PUSH
92572: LD_VAR 0 1
92576: PPUSH
92577: LD_INT 1
92579: PPUSH
92580: CALL_OW 275
92584: PUSH
92585: LD_VAR 0 1
92589: PPUSH
92590: LD_INT 2
92592: PPUSH
92593: CALL_OW 275
92597: PUSH
92598: LD_VAR 0 1
92602: PPUSH
92603: LD_INT 3
92605: PPUSH
92606: CALL_OW 275
92610: PUSH
92611: EMPTY
92612: LIST
92613: LIST
92614: LIST
92615: ST_TO_ADDR
// end ;
92616: LD_VAR 0 2
92620: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
92621: LD_INT 0
92623: PPUSH
92624: PPUSH
// result := array ;
92625: LD_ADDR_VAR 0 3
92629: PUSH
92630: LD_VAR 0 1
92634: ST_TO_ADDR
// if size >= result then
92635: LD_VAR 0 2
92639: PUSH
92640: LD_VAR 0 3
92644: GREATEREQUAL
92645: IFFALSE 92649
// exit ;
92647: GO 92699
// if size then
92649: LD_VAR 0 2
92653: IFFALSE 92699
// for i := array downto size do
92655: LD_ADDR_VAR 0 4
92659: PUSH
92660: DOUBLE
92661: LD_VAR 0 1
92665: INC
92666: ST_TO_ADDR
92667: LD_VAR 0 2
92671: PUSH
92672: FOR_DOWNTO
92673: IFFALSE 92697
// result := Delete ( result , result ) ;
92675: LD_ADDR_VAR 0 3
92679: PUSH
92680: LD_VAR 0 3
92684: PPUSH
92685: LD_VAR 0 3
92689: PPUSH
92690: CALL_OW 3
92694: ST_TO_ADDR
92695: GO 92672
92697: POP
92698: POP
// end ;
92699: LD_VAR 0 3
92703: RET
// export function ComExit ( unit ) ; var tmp ; begin
92704: LD_INT 0
92706: PPUSH
92707: PPUSH
// if not IsInUnit ( unit ) then
92708: LD_VAR 0 1
92712: PPUSH
92713: CALL_OW 310
92717: NOT
92718: IFFALSE 92722
// exit ;
92720: GO 92782
// tmp := IsInUnit ( unit ) ;
92722: LD_ADDR_VAR 0 3
92726: PUSH
92727: LD_VAR 0 1
92731: PPUSH
92732: CALL_OW 310
92736: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
92737: LD_VAR 0 3
92741: PPUSH
92742: CALL_OW 247
92746: PUSH
92747: LD_INT 2
92749: EQUAL
92750: IFFALSE 92763
// ComExitVehicle ( unit ) else
92752: LD_VAR 0 1
92756: PPUSH
92757: CALL_OW 121
92761: GO 92772
// ComExitBuilding ( unit ) ;
92763: LD_VAR 0 1
92767: PPUSH
92768: CALL_OW 122
// result := tmp ;
92772: LD_ADDR_VAR 0 2
92776: PUSH
92777: LD_VAR 0 3
92781: ST_TO_ADDR
// end ;
92782: LD_VAR 0 2
92786: RET
// export function ComExitAll ( units ) ; var i ; begin
92787: LD_INT 0
92789: PPUSH
92790: PPUSH
// if not units then
92791: LD_VAR 0 1
92795: NOT
92796: IFFALSE 92800
// exit ;
92798: GO 92826
// for i in units do
92800: LD_ADDR_VAR 0 3
92804: PUSH
92805: LD_VAR 0 1
92809: PUSH
92810: FOR_IN
92811: IFFALSE 92824
// ComExit ( i ) ;
92813: LD_VAR 0 3
92817: PPUSH
92818: CALL 92704 0 1
92822: GO 92810
92824: POP
92825: POP
// end ;
92826: LD_VAR 0 2
92830: RET
// export function ResetHc ; begin
92831: LD_INT 0
92833: PPUSH
// InitHc ;
92834: CALL_OW 19
// hc_importance := 0 ;
92838: LD_ADDR_OWVAR 32
92842: PUSH
92843: LD_INT 0
92845: ST_TO_ADDR
// end ;
92846: LD_VAR 0 1
92850: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
92851: LD_INT 0
92853: PPUSH
92854: PPUSH
92855: PPUSH
// _x := ( x1 + x2 ) div 2 ;
92856: LD_ADDR_VAR 0 6
92860: PUSH
92861: LD_VAR 0 1
92865: PUSH
92866: LD_VAR 0 3
92870: PLUS
92871: PUSH
92872: LD_INT 2
92874: DIV
92875: ST_TO_ADDR
// if _x < 0 then
92876: LD_VAR 0 6
92880: PUSH
92881: LD_INT 0
92883: LESS
92884: IFFALSE 92901
// _x := _x * - 1 ;
92886: LD_ADDR_VAR 0 6
92890: PUSH
92891: LD_VAR 0 6
92895: PUSH
92896: LD_INT 1
92898: NEG
92899: MUL
92900: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
92901: LD_ADDR_VAR 0 7
92905: PUSH
92906: LD_VAR 0 2
92910: PUSH
92911: LD_VAR 0 4
92915: PLUS
92916: PUSH
92917: LD_INT 2
92919: DIV
92920: ST_TO_ADDR
// if _y < 0 then
92921: LD_VAR 0 7
92925: PUSH
92926: LD_INT 0
92928: LESS
92929: IFFALSE 92946
// _y := _y * - 1 ;
92931: LD_ADDR_VAR 0 7
92935: PUSH
92936: LD_VAR 0 7
92940: PUSH
92941: LD_INT 1
92943: NEG
92944: MUL
92945: ST_TO_ADDR
// result := [ _x , _y ] ;
92946: LD_ADDR_VAR 0 5
92950: PUSH
92951: LD_VAR 0 6
92955: PUSH
92956: LD_VAR 0 7
92960: PUSH
92961: EMPTY
92962: LIST
92963: LIST
92964: ST_TO_ADDR
// end ;
92965: LD_VAR 0 5
92969: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
92970: LD_INT 0
92972: PPUSH
92973: PPUSH
92974: PPUSH
92975: PPUSH
// task := GetTaskList ( unit ) ;
92976: LD_ADDR_VAR 0 7
92980: PUSH
92981: LD_VAR 0 1
92985: PPUSH
92986: CALL_OW 437
92990: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
92991: LD_VAR 0 7
92995: NOT
92996: PUSH
92997: LD_VAR 0 1
93001: PPUSH
93002: LD_VAR 0 2
93006: PPUSH
93007: CALL_OW 308
93011: NOT
93012: AND
93013: IFFALSE 93017
// exit ;
93015: GO 93135
// if IsInArea ( unit , area ) then
93017: LD_VAR 0 1
93021: PPUSH
93022: LD_VAR 0 2
93026: PPUSH
93027: CALL_OW 308
93031: IFFALSE 93049
// begin ComMoveToArea ( unit , goAway ) ;
93033: LD_VAR 0 1
93037: PPUSH
93038: LD_VAR 0 3
93042: PPUSH
93043: CALL_OW 113
// exit ;
93047: GO 93135
// end ; if task [ 1 ] [ 1 ] <> M then
93049: LD_VAR 0 7
93053: PUSH
93054: LD_INT 1
93056: ARRAY
93057: PUSH
93058: LD_INT 1
93060: ARRAY
93061: PUSH
93062: LD_STRING M
93064: NONEQUAL
93065: IFFALSE 93069
// exit ;
93067: GO 93135
// x := task [ 1 ] [ 2 ] ;
93069: LD_ADDR_VAR 0 5
93073: PUSH
93074: LD_VAR 0 7
93078: PUSH
93079: LD_INT 1
93081: ARRAY
93082: PUSH
93083: LD_INT 2
93085: ARRAY
93086: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
93087: LD_ADDR_VAR 0 6
93091: PUSH
93092: LD_VAR 0 7
93096: PUSH
93097: LD_INT 1
93099: ARRAY
93100: PUSH
93101: LD_INT 3
93103: ARRAY
93104: ST_TO_ADDR
// if InArea ( x , y , area ) then
93105: LD_VAR 0 5
93109: PPUSH
93110: LD_VAR 0 6
93114: PPUSH
93115: LD_VAR 0 2
93119: PPUSH
93120: CALL_OW 309
93124: IFFALSE 93135
// ComStop ( unit ) ;
93126: LD_VAR 0 1
93130: PPUSH
93131: CALL_OW 141
// end ;
93135: LD_VAR 0 4
93139: RET
// export function Abs ( value ) ; begin
93140: LD_INT 0
93142: PPUSH
// result := value ;
93143: LD_ADDR_VAR 0 2
93147: PUSH
93148: LD_VAR 0 1
93152: ST_TO_ADDR
// if value < 0 then
93153: LD_VAR 0 1
93157: PUSH
93158: LD_INT 0
93160: LESS
93161: IFFALSE 93178
// result := value * - 1 ;
93163: LD_ADDR_VAR 0 2
93167: PUSH
93168: LD_VAR 0 1
93172: PUSH
93173: LD_INT 1
93175: NEG
93176: MUL
93177: ST_TO_ADDR
// end ;
93178: LD_VAR 0 2
93182: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
93183: LD_INT 0
93185: PPUSH
93186: PPUSH
93187: PPUSH
93188: PPUSH
93189: PPUSH
93190: PPUSH
93191: PPUSH
93192: PPUSH
// if not unit or not building then
93193: LD_VAR 0 1
93197: NOT
93198: PUSH
93199: LD_VAR 0 2
93203: NOT
93204: OR
93205: IFFALSE 93209
// exit ;
93207: GO 93435
// x := GetX ( building ) ;
93209: LD_ADDR_VAR 0 4
93213: PUSH
93214: LD_VAR 0 2
93218: PPUSH
93219: CALL_OW 250
93223: ST_TO_ADDR
// y := GetY ( building ) ;
93224: LD_ADDR_VAR 0 6
93228: PUSH
93229: LD_VAR 0 2
93233: PPUSH
93234: CALL_OW 251
93238: ST_TO_ADDR
// d := GetDir ( building ) ;
93239: LD_ADDR_VAR 0 8
93243: PUSH
93244: LD_VAR 0 2
93248: PPUSH
93249: CALL_OW 254
93253: ST_TO_ADDR
// r := 4 ;
93254: LD_ADDR_VAR 0 9
93258: PUSH
93259: LD_INT 4
93261: ST_TO_ADDR
// for i := 1 to 5 do
93262: LD_ADDR_VAR 0 10
93266: PUSH
93267: DOUBLE
93268: LD_INT 1
93270: DEC
93271: ST_TO_ADDR
93272: LD_INT 5
93274: PUSH
93275: FOR_TO
93276: IFFALSE 93433
// begin _x := ShiftX ( x , d , r + i ) ;
93278: LD_ADDR_VAR 0 5
93282: PUSH
93283: LD_VAR 0 4
93287: PPUSH
93288: LD_VAR 0 8
93292: PPUSH
93293: LD_VAR 0 9
93297: PUSH
93298: LD_VAR 0 10
93302: PLUS
93303: PPUSH
93304: CALL_OW 272
93308: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
93309: LD_ADDR_VAR 0 7
93313: PUSH
93314: LD_VAR 0 6
93318: PPUSH
93319: LD_VAR 0 8
93323: PPUSH
93324: LD_VAR 0 9
93328: PUSH
93329: LD_VAR 0 10
93333: PLUS
93334: PPUSH
93335: CALL_OW 273
93339: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
93340: LD_VAR 0 5
93344: PPUSH
93345: LD_VAR 0 7
93349: PPUSH
93350: CALL_OW 488
93354: PUSH
93355: LD_VAR 0 5
93359: PPUSH
93360: LD_VAR 0 7
93364: PPUSH
93365: CALL_OW 428
93369: PPUSH
93370: CALL_OW 247
93374: PUSH
93375: LD_INT 3
93377: PUSH
93378: LD_INT 2
93380: PUSH
93381: EMPTY
93382: LIST
93383: LIST
93384: IN
93385: NOT
93386: AND
93387: IFFALSE 93431
// begin ComMoveXY ( unit , _x , _y ) ;
93389: LD_VAR 0 1
93393: PPUSH
93394: LD_VAR 0 5
93398: PPUSH
93399: LD_VAR 0 7
93403: PPUSH
93404: CALL_OW 111
// result := [ _x , _y ] ;
93408: LD_ADDR_VAR 0 3
93412: PUSH
93413: LD_VAR 0 5
93417: PUSH
93418: LD_VAR 0 7
93422: PUSH
93423: EMPTY
93424: LIST
93425: LIST
93426: ST_TO_ADDR
// exit ;
93427: POP
93428: POP
93429: GO 93435
// end ; end ;
93431: GO 93275
93433: POP
93434: POP
// end ;
93435: LD_VAR 0 3
93439: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
93440: LD_INT 0
93442: PPUSH
93443: PPUSH
93444: PPUSH
// result := 0 ;
93445: LD_ADDR_VAR 0 3
93449: PUSH
93450: LD_INT 0
93452: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
93453: LD_VAR 0 1
93457: PUSH
93458: LD_INT 0
93460: LESS
93461: PUSH
93462: LD_VAR 0 1
93466: PUSH
93467: LD_INT 8
93469: GREATER
93470: OR
93471: PUSH
93472: LD_VAR 0 2
93476: PUSH
93477: LD_INT 0
93479: LESS
93480: OR
93481: PUSH
93482: LD_VAR 0 2
93486: PUSH
93487: LD_INT 8
93489: GREATER
93490: OR
93491: IFFALSE 93495
// exit ;
93493: GO 93570
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
93495: LD_ADDR_VAR 0 4
93499: PUSH
93500: LD_INT 22
93502: PUSH
93503: LD_VAR 0 2
93507: PUSH
93508: EMPTY
93509: LIST
93510: LIST
93511: PPUSH
93512: CALL_OW 69
93516: PUSH
93517: FOR_IN
93518: IFFALSE 93568
// begin un := UnitShoot ( i ) ;
93520: LD_ADDR_VAR 0 5
93524: PUSH
93525: LD_VAR 0 4
93529: PPUSH
93530: CALL_OW 504
93534: ST_TO_ADDR
// if GetSide ( un ) = side1 then
93535: LD_VAR 0 5
93539: PPUSH
93540: CALL_OW 255
93544: PUSH
93545: LD_VAR 0 1
93549: EQUAL
93550: IFFALSE 93566
// begin result := un ;
93552: LD_ADDR_VAR 0 3
93556: PUSH
93557: LD_VAR 0 5
93561: ST_TO_ADDR
// exit ;
93562: POP
93563: POP
93564: GO 93570
// end ; end ;
93566: GO 93517
93568: POP
93569: POP
// end ;
93570: LD_VAR 0 3
93574: RET
// export function GetCargoBay ( units ) ; begin
93575: LD_INT 0
93577: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
93578: LD_ADDR_VAR 0 2
93582: PUSH
93583: LD_VAR 0 1
93587: PPUSH
93588: LD_INT 2
93590: PUSH
93591: LD_INT 34
93593: PUSH
93594: LD_INT 12
93596: PUSH
93597: EMPTY
93598: LIST
93599: LIST
93600: PUSH
93601: LD_INT 34
93603: PUSH
93604: LD_INT 51
93606: PUSH
93607: EMPTY
93608: LIST
93609: LIST
93610: PUSH
93611: LD_INT 34
93613: PUSH
93614: LD_INT 32
93616: PUSH
93617: EMPTY
93618: LIST
93619: LIST
93620: PUSH
93621: LD_INT 34
93623: PUSH
93624: LD_INT 89
93626: PUSH
93627: EMPTY
93628: LIST
93629: LIST
93630: PUSH
93631: EMPTY
93632: LIST
93633: LIST
93634: LIST
93635: LIST
93636: LIST
93637: PPUSH
93638: CALL_OW 72
93642: ST_TO_ADDR
// end ;
93643: LD_VAR 0 2
93647: RET
// export function Negate ( value ) ; begin
93648: LD_INT 0
93650: PPUSH
// result := not value ;
93651: LD_ADDR_VAR 0 2
93655: PUSH
93656: LD_VAR 0 1
93660: NOT
93661: ST_TO_ADDR
// end ;
93662: LD_VAR 0 2
93666: RET
// export function Inc ( value ) ; begin
93667: LD_INT 0
93669: PPUSH
// result := value + 1 ;
93670: LD_ADDR_VAR 0 2
93674: PUSH
93675: LD_VAR 0 1
93679: PUSH
93680: LD_INT 1
93682: PLUS
93683: ST_TO_ADDR
// end ;
93684: LD_VAR 0 2
93688: RET
// export function Dec ( value ) ; begin
93689: LD_INT 0
93691: PPUSH
// result := value - 1 ;
93692: LD_ADDR_VAR 0 2
93696: PUSH
93697: LD_VAR 0 1
93701: PUSH
93702: LD_INT 1
93704: MINUS
93705: ST_TO_ADDR
// end ;
93706: LD_VAR 0 2
93710: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
93711: LD_INT 0
93713: PPUSH
93714: PPUSH
93715: PPUSH
93716: PPUSH
93717: PPUSH
93718: PPUSH
93719: PPUSH
93720: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
93721: LD_VAR 0 1
93725: PPUSH
93726: LD_VAR 0 2
93730: PPUSH
93731: CALL_OW 488
93735: NOT
93736: PUSH
93737: LD_VAR 0 3
93741: PPUSH
93742: LD_VAR 0 4
93746: PPUSH
93747: CALL_OW 488
93751: NOT
93752: OR
93753: IFFALSE 93766
// begin result := - 1 ;
93755: LD_ADDR_VAR 0 5
93759: PUSH
93760: LD_INT 1
93762: NEG
93763: ST_TO_ADDR
// exit ;
93764: GO 94001
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
93766: LD_ADDR_VAR 0 12
93770: PUSH
93771: LD_VAR 0 1
93775: PPUSH
93776: LD_VAR 0 2
93780: PPUSH
93781: LD_VAR 0 3
93785: PPUSH
93786: LD_VAR 0 4
93790: PPUSH
93791: CALL 92851 0 4
93795: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
93796: LD_ADDR_VAR 0 11
93800: PUSH
93801: LD_VAR 0 1
93805: PPUSH
93806: LD_VAR 0 2
93810: PPUSH
93811: LD_VAR 0 12
93815: PUSH
93816: LD_INT 1
93818: ARRAY
93819: PPUSH
93820: LD_VAR 0 12
93824: PUSH
93825: LD_INT 2
93827: ARRAY
93828: PPUSH
93829: CALL_OW 298
93833: ST_TO_ADDR
// distance := 9999 ;
93834: LD_ADDR_VAR 0 10
93838: PUSH
93839: LD_INT 9999
93841: ST_TO_ADDR
// for i := 0 to 5 do
93842: LD_ADDR_VAR 0 6
93846: PUSH
93847: DOUBLE
93848: LD_INT 0
93850: DEC
93851: ST_TO_ADDR
93852: LD_INT 5
93854: PUSH
93855: FOR_TO
93856: IFFALSE 93999
// begin _x := ShiftX ( x1 , i , centerDist ) ;
93858: LD_ADDR_VAR 0 7
93862: PUSH
93863: LD_VAR 0 1
93867: PPUSH
93868: LD_VAR 0 6
93872: PPUSH
93873: LD_VAR 0 11
93877: PPUSH
93878: CALL_OW 272
93882: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
93883: LD_ADDR_VAR 0 8
93887: PUSH
93888: LD_VAR 0 2
93892: PPUSH
93893: LD_VAR 0 6
93897: PPUSH
93898: LD_VAR 0 11
93902: PPUSH
93903: CALL_OW 273
93907: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
93908: LD_VAR 0 7
93912: PPUSH
93913: LD_VAR 0 8
93917: PPUSH
93918: CALL_OW 488
93922: NOT
93923: IFFALSE 93927
// continue ;
93925: GO 93855
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
93927: LD_ADDR_VAR 0 9
93931: PUSH
93932: LD_VAR 0 12
93936: PUSH
93937: LD_INT 1
93939: ARRAY
93940: PPUSH
93941: LD_VAR 0 12
93945: PUSH
93946: LD_INT 2
93948: ARRAY
93949: PPUSH
93950: LD_VAR 0 7
93954: PPUSH
93955: LD_VAR 0 8
93959: PPUSH
93960: CALL_OW 298
93964: ST_TO_ADDR
// if tmp < distance then
93965: LD_VAR 0 9
93969: PUSH
93970: LD_VAR 0 10
93974: LESS
93975: IFFALSE 93997
// begin result := i ;
93977: LD_ADDR_VAR 0 5
93981: PUSH
93982: LD_VAR 0 6
93986: ST_TO_ADDR
// distance := tmp ;
93987: LD_ADDR_VAR 0 10
93991: PUSH
93992: LD_VAR 0 9
93996: ST_TO_ADDR
// end ; end ;
93997: GO 93855
93999: POP
94000: POP
// end ;
94001: LD_VAR 0 5
94005: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
94006: LD_INT 0
94008: PPUSH
94009: PPUSH
// if not driver or not IsInUnit ( driver ) then
94010: LD_VAR 0 1
94014: NOT
94015: PUSH
94016: LD_VAR 0 1
94020: PPUSH
94021: CALL_OW 310
94025: NOT
94026: OR
94027: IFFALSE 94031
// exit ;
94029: GO 94121
// vehicle := IsInUnit ( driver ) ;
94031: LD_ADDR_VAR 0 3
94035: PUSH
94036: LD_VAR 0 1
94040: PPUSH
94041: CALL_OW 310
94045: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
94046: LD_VAR 0 1
94050: PPUSH
94051: LD_STRING \
94053: PUSH
94054: LD_INT 0
94056: PUSH
94057: LD_INT 0
94059: PUSH
94060: LD_INT 0
94062: PUSH
94063: LD_INT 0
94065: PUSH
94066: LD_INT 0
94068: PUSH
94069: LD_INT 0
94071: PUSH
94072: EMPTY
94073: LIST
94074: LIST
94075: LIST
94076: LIST
94077: LIST
94078: LIST
94079: LIST
94080: PUSH
94081: LD_STRING E
94083: PUSH
94084: LD_INT 0
94086: PUSH
94087: LD_INT 0
94089: PUSH
94090: LD_VAR 0 3
94094: PUSH
94095: LD_INT 0
94097: PUSH
94098: LD_INT 0
94100: PUSH
94101: LD_INT 0
94103: PUSH
94104: EMPTY
94105: LIST
94106: LIST
94107: LIST
94108: LIST
94109: LIST
94110: LIST
94111: LIST
94112: PUSH
94113: EMPTY
94114: LIST
94115: LIST
94116: PPUSH
94117: CALL_OW 446
// end ;
94121: LD_VAR 0 2
94125: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
94126: LD_INT 0
94128: PPUSH
94129: PPUSH
// if not driver or not IsInUnit ( driver ) then
94130: LD_VAR 0 1
94134: NOT
94135: PUSH
94136: LD_VAR 0 1
94140: PPUSH
94141: CALL_OW 310
94145: NOT
94146: OR
94147: IFFALSE 94151
// exit ;
94149: GO 94241
// vehicle := IsInUnit ( driver ) ;
94151: LD_ADDR_VAR 0 3
94155: PUSH
94156: LD_VAR 0 1
94160: PPUSH
94161: CALL_OW 310
94165: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
94166: LD_VAR 0 1
94170: PPUSH
94171: LD_STRING \
94173: PUSH
94174: LD_INT 0
94176: PUSH
94177: LD_INT 0
94179: PUSH
94180: LD_INT 0
94182: PUSH
94183: LD_INT 0
94185: PUSH
94186: LD_INT 0
94188: PUSH
94189: LD_INT 0
94191: PUSH
94192: EMPTY
94193: LIST
94194: LIST
94195: LIST
94196: LIST
94197: LIST
94198: LIST
94199: LIST
94200: PUSH
94201: LD_STRING E
94203: PUSH
94204: LD_INT 0
94206: PUSH
94207: LD_INT 0
94209: PUSH
94210: LD_VAR 0 3
94214: PUSH
94215: LD_INT 0
94217: PUSH
94218: LD_INT 0
94220: PUSH
94221: LD_INT 0
94223: PUSH
94224: EMPTY
94225: LIST
94226: LIST
94227: LIST
94228: LIST
94229: LIST
94230: LIST
94231: LIST
94232: PUSH
94233: EMPTY
94234: LIST
94235: LIST
94236: PPUSH
94237: CALL_OW 447
// end ;
94241: LD_VAR 0 2
94245: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
94246: LD_INT 0
94248: PPUSH
94249: PPUSH
94250: PPUSH
// tmp := [ ] ;
94251: LD_ADDR_VAR 0 5
94255: PUSH
94256: EMPTY
94257: ST_TO_ADDR
// for i in units do
94258: LD_ADDR_VAR 0 4
94262: PUSH
94263: LD_VAR 0 1
94267: PUSH
94268: FOR_IN
94269: IFFALSE 94307
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
94271: LD_ADDR_VAR 0 5
94275: PUSH
94276: LD_VAR 0 5
94280: PPUSH
94281: LD_VAR 0 5
94285: PUSH
94286: LD_INT 1
94288: PLUS
94289: PPUSH
94290: LD_VAR 0 4
94294: PPUSH
94295: CALL_OW 256
94299: PPUSH
94300: CALL_OW 2
94304: ST_TO_ADDR
94305: GO 94268
94307: POP
94308: POP
// if not tmp then
94309: LD_VAR 0 5
94313: NOT
94314: IFFALSE 94318
// exit ;
94316: GO 94366
// if asc then
94318: LD_VAR 0 2
94322: IFFALSE 94346
// result := SortListByListAsc ( units , tmp ) else
94324: LD_ADDR_VAR 0 3
94328: PUSH
94329: LD_VAR 0 1
94333: PPUSH
94334: LD_VAR 0 5
94338: PPUSH
94339: CALL_OW 76
94343: ST_TO_ADDR
94344: GO 94366
// result := SortListByListDesc ( units , tmp ) ;
94346: LD_ADDR_VAR 0 3
94350: PUSH
94351: LD_VAR 0 1
94355: PPUSH
94356: LD_VAR 0 5
94360: PPUSH
94361: CALL_OW 77
94365: ST_TO_ADDR
// end ;
94366: LD_VAR 0 3
94370: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
94371: LD_INT 0
94373: PPUSH
94374: PPUSH
// task := GetTaskList ( mech ) ;
94375: LD_ADDR_VAR 0 4
94379: PUSH
94380: LD_VAR 0 1
94384: PPUSH
94385: CALL_OW 437
94389: ST_TO_ADDR
// if not task then
94390: LD_VAR 0 4
94394: NOT
94395: IFFALSE 94399
// exit ;
94397: GO 94441
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
94399: LD_ADDR_VAR 0 3
94403: PUSH
94404: LD_VAR 0 4
94408: PUSH
94409: LD_INT 1
94411: ARRAY
94412: PUSH
94413: LD_INT 1
94415: ARRAY
94416: PUSH
94417: LD_STRING r
94419: EQUAL
94420: PUSH
94421: LD_VAR 0 4
94425: PUSH
94426: LD_INT 1
94428: ARRAY
94429: PUSH
94430: LD_INT 4
94432: ARRAY
94433: PUSH
94434: LD_VAR 0 2
94438: EQUAL
94439: AND
94440: ST_TO_ADDR
// end ;
94441: LD_VAR 0 3
94445: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
94446: LD_INT 0
94448: PPUSH
// SetDir ( unit , d ) ;
94449: LD_VAR 0 1
94453: PPUSH
94454: LD_VAR 0 4
94458: PPUSH
94459: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
94463: LD_VAR 0 1
94467: PPUSH
94468: LD_VAR 0 2
94472: PPUSH
94473: LD_VAR 0 3
94477: PPUSH
94478: LD_VAR 0 5
94482: PPUSH
94483: CALL_OW 48
// end ;
94487: LD_VAR 0 6
94491: RET
// export function ToNaturalNumber ( number ) ; begin
94492: LD_INT 0
94494: PPUSH
// result := number div 1 ;
94495: LD_ADDR_VAR 0 2
94499: PUSH
94500: LD_VAR 0 1
94504: PUSH
94505: LD_INT 1
94507: DIV
94508: ST_TO_ADDR
// if number < 0 then
94509: LD_VAR 0 1
94513: PUSH
94514: LD_INT 0
94516: LESS
94517: IFFALSE 94527
// result := 0 ;
94519: LD_ADDR_VAR 0 2
94523: PUSH
94524: LD_INT 0
94526: ST_TO_ADDR
// end ;
94527: LD_VAR 0 2
94531: RET
// export function SortByClass ( units , class ) ; var un ; begin
94532: LD_INT 0
94534: PPUSH
94535: PPUSH
// if not units or not class then
94536: LD_VAR 0 1
94540: NOT
94541: PUSH
94542: LD_VAR 0 2
94546: NOT
94547: OR
94548: IFFALSE 94552
// exit ;
94550: GO 94647
// result := [ ] ;
94552: LD_ADDR_VAR 0 3
94556: PUSH
94557: EMPTY
94558: ST_TO_ADDR
// for un in units do
94559: LD_ADDR_VAR 0 4
94563: PUSH
94564: LD_VAR 0 1
94568: PUSH
94569: FOR_IN
94570: IFFALSE 94645
// if GetClass ( un ) = class then
94572: LD_VAR 0 4
94576: PPUSH
94577: CALL_OW 257
94581: PUSH
94582: LD_VAR 0 2
94586: EQUAL
94587: IFFALSE 94614
// result := Insert ( result , 1 , un ) else
94589: LD_ADDR_VAR 0 3
94593: PUSH
94594: LD_VAR 0 3
94598: PPUSH
94599: LD_INT 1
94601: PPUSH
94602: LD_VAR 0 4
94606: PPUSH
94607: CALL_OW 2
94611: ST_TO_ADDR
94612: GO 94643
// result := Replace ( result , result + 1 , un ) ;
94614: LD_ADDR_VAR 0 3
94618: PUSH
94619: LD_VAR 0 3
94623: PPUSH
94624: LD_VAR 0 3
94628: PUSH
94629: LD_INT 1
94631: PLUS
94632: PPUSH
94633: LD_VAR 0 4
94637: PPUSH
94638: CALL_OW 1
94642: ST_TO_ADDR
94643: GO 94569
94645: POP
94646: POP
// end ;
94647: LD_VAR 0 3
94651: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
94652: LD_INT 0
94654: PPUSH
94655: PPUSH
94656: PPUSH
94657: PPUSH
94658: PPUSH
94659: PPUSH
94660: PPUSH
// result := [ ] ;
94661: LD_ADDR_VAR 0 4
94665: PUSH
94666: EMPTY
94667: ST_TO_ADDR
// if x - r < 0 then
94668: LD_VAR 0 1
94672: PUSH
94673: LD_VAR 0 3
94677: MINUS
94678: PUSH
94679: LD_INT 0
94681: LESS
94682: IFFALSE 94694
// min_x := 0 else
94684: LD_ADDR_VAR 0 8
94688: PUSH
94689: LD_INT 0
94691: ST_TO_ADDR
94692: GO 94710
// min_x := x - r ;
94694: LD_ADDR_VAR 0 8
94698: PUSH
94699: LD_VAR 0 1
94703: PUSH
94704: LD_VAR 0 3
94708: MINUS
94709: ST_TO_ADDR
// if y - r < 0 then
94710: LD_VAR 0 2
94714: PUSH
94715: LD_VAR 0 3
94719: MINUS
94720: PUSH
94721: LD_INT 0
94723: LESS
94724: IFFALSE 94736
// min_y := 0 else
94726: LD_ADDR_VAR 0 7
94730: PUSH
94731: LD_INT 0
94733: ST_TO_ADDR
94734: GO 94752
// min_y := y - r ;
94736: LD_ADDR_VAR 0 7
94740: PUSH
94741: LD_VAR 0 2
94745: PUSH
94746: LD_VAR 0 3
94750: MINUS
94751: ST_TO_ADDR
// max_x := x + r ;
94752: LD_ADDR_VAR 0 9
94756: PUSH
94757: LD_VAR 0 1
94761: PUSH
94762: LD_VAR 0 3
94766: PLUS
94767: ST_TO_ADDR
// max_y := y + r ;
94768: LD_ADDR_VAR 0 10
94772: PUSH
94773: LD_VAR 0 2
94777: PUSH
94778: LD_VAR 0 3
94782: PLUS
94783: ST_TO_ADDR
// for _x = min_x to max_x do
94784: LD_ADDR_VAR 0 5
94788: PUSH
94789: DOUBLE
94790: LD_VAR 0 8
94794: DEC
94795: ST_TO_ADDR
94796: LD_VAR 0 9
94800: PUSH
94801: FOR_TO
94802: IFFALSE 94903
// for _y = min_y to max_y do
94804: LD_ADDR_VAR 0 6
94808: PUSH
94809: DOUBLE
94810: LD_VAR 0 7
94814: DEC
94815: ST_TO_ADDR
94816: LD_VAR 0 10
94820: PUSH
94821: FOR_TO
94822: IFFALSE 94899
// begin if not ValidHex ( _x , _y ) then
94824: LD_VAR 0 5
94828: PPUSH
94829: LD_VAR 0 6
94833: PPUSH
94834: CALL_OW 488
94838: NOT
94839: IFFALSE 94843
// continue ;
94841: GO 94821
// if GetResourceTypeXY ( _x , _y ) then
94843: LD_VAR 0 5
94847: PPUSH
94848: LD_VAR 0 6
94852: PPUSH
94853: CALL_OW 283
94857: IFFALSE 94897
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
94859: LD_ADDR_VAR 0 4
94863: PUSH
94864: LD_VAR 0 4
94868: PPUSH
94869: LD_VAR 0 4
94873: PUSH
94874: LD_INT 1
94876: PLUS
94877: PPUSH
94878: LD_VAR 0 5
94882: PUSH
94883: LD_VAR 0 6
94887: PUSH
94888: EMPTY
94889: LIST
94890: LIST
94891: PPUSH
94892: CALL_OW 1
94896: ST_TO_ADDR
// end ;
94897: GO 94821
94899: POP
94900: POP
94901: GO 94801
94903: POP
94904: POP
// end ;
94905: LD_VAR 0 4
94909: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
94910: LD_INT 0
94912: PPUSH
94913: PPUSH
94914: PPUSH
94915: PPUSH
94916: PPUSH
94917: PPUSH
94918: PPUSH
94919: PPUSH
// if not units then
94920: LD_VAR 0 1
94924: NOT
94925: IFFALSE 94929
// exit ;
94927: GO 95453
// result := UnitFilter ( units , [ f_ok ] ) ;
94929: LD_ADDR_VAR 0 3
94933: PUSH
94934: LD_VAR 0 1
94938: PPUSH
94939: LD_INT 50
94941: PUSH
94942: EMPTY
94943: LIST
94944: PPUSH
94945: CALL_OW 72
94949: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
94950: LD_ADDR_VAR 0 8
94954: PUSH
94955: LD_VAR 0 1
94959: PUSH
94960: LD_INT 1
94962: ARRAY
94963: PPUSH
94964: CALL_OW 255
94968: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
94969: LD_ADDR_VAR 0 10
94973: PUSH
94974: LD_INT 29
94976: PUSH
94977: LD_INT 91
94979: PUSH
94980: LD_INT 49
94982: PUSH
94983: EMPTY
94984: LIST
94985: LIST
94986: LIST
94987: ST_TO_ADDR
// if not result then
94988: LD_VAR 0 3
94992: NOT
94993: IFFALSE 94997
// exit ;
94995: GO 95453
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
94997: LD_ADDR_VAR 0 5
95001: PUSH
95002: LD_INT 81
95004: PUSH
95005: LD_VAR 0 8
95009: PUSH
95010: EMPTY
95011: LIST
95012: LIST
95013: PPUSH
95014: CALL_OW 69
95018: ST_TO_ADDR
// for i in result do
95019: LD_ADDR_VAR 0 4
95023: PUSH
95024: LD_VAR 0 3
95028: PUSH
95029: FOR_IN
95030: IFFALSE 95451
// begin tag := GetTag ( i ) + 1 ;
95032: LD_ADDR_VAR 0 9
95036: PUSH
95037: LD_VAR 0 4
95041: PPUSH
95042: CALL_OW 110
95046: PUSH
95047: LD_INT 1
95049: PLUS
95050: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
95051: LD_ADDR_VAR 0 7
95055: PUSH
95056: LD_VAR 0 4
95060: PPUSH
95061: CALL_OW 250
95065: PPUSH
95066: LD_VAR 0 4
95070: PPUSH
95071: CALL_OW 251
95075: PPUSH
95076: LD_INT 6
95078: PPUSH
95079: CALL 94652 0 3
95083: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
95084: LD_VAR 0 4
95088: PPUSH
95089: CALL_OW 247
95093: PUSH
95094: LD_INT 2
95096: EQUAL
95097: PUSH
95098: LD_VAR 0 7
95102: AND
95103: PUSH
95104: LD_VAR 0 4
95108: PPUSH
95109: CALL_OW 264
95113: PUSH
95114: LD_VAR 0 10
95118: IN
95119: NOT
95120: AND
95121: IFFALSE 95160
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
95123: LD_VAR 0 4
95127: PPUSH
95128: LD_VAR 0 7
95132: PUSH
95133: LD_INT 1
95135: ARRAY
95136: PUSH
95137: LD_INT 1
95139: ARRAY
95140: PPUSH
95141: LD_VAR 0 7
95145: PUSH
95146: LD_INT 1
95148: ARRAY
95149: PUSH
95150: LD_INT 2
95152: ARRAY
95153: PPUSH
95154: CALL_OW 116
95158: GO 95449
// if path > tag then
95160: LD_VAR 0 2
95164: PUSH
95165: LD_VAR 0 9
95169: GREATER
95170: IFFALSE 95378
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
95172: LD_ADDR_VAR 0 6
95176: PUSH
95177: LD_VAR 0 5
95181: PPUSH
95182: LD_INT 91
95184: PUSH
95185: LD_VAR 0 4
95189: PUSH
95190: LD_INT 8
95192: PUSH
95193: EMPTY
95194: LIST
95195: LIST
95196: LIST
95197: PPUSH
95198: CALL_OW 72
95202: ST_TO_ADDR
// if nearEnemy then
95203: LD_VAR 0 6
95207: IFFALSE 95276
// begin if GetWeapon ( i ) = ru_time_lapser then
95209: LD_VAR 0 4
95213: PPUSH
95214: CALL_OW 264
95218: PUSH
95219: LD_INT 49
95221: EQUAL
95222: IFFALSE 95250
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
95224: LD_VAR 0 4
95228: PPUSH
95229: LD_VAR 0 6
95233: PPUSH
95234: LD_VAR 0 4
95238: PPUSH
95239: CALL_OW 74
95243: PPUSH
95244: CALL_OW 112
95248: GO 95274
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
95250: LD_VAR 0 4
95254: PPUSH
95255: LD_VAR 0 6
95259: PPUSH
95260: LD_VAR 0 4
95264: PPUSH
95265: CALL_OW 74
95269: PPUSH
95270: CALL 96524 0 2
// end else
95274: GO 95376
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
95276: LD_VAR 0 4
95280: PPUSH
95281: LD_VAR 0 2
95285: PUSH
95286: LD_VAR 0 9
95290: ARRAY
95291: PUSH
95292: LD_INT 1
95294: ARRAY
95295: PPUSH
95296: LD_VAR 0 2
95300: PUSH
95301: LD_VAR 0 9
95305: ARRAY
95306: PUSH
95307: LD_INT 2
95309: ARRAY
95310: PPUSH
95311: CALL_OW 297
95315: PUSH
95316: LD_INT 6
95318: GREATER
95319: IFFALSE 95362
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
95321: LD_VAR 0 4
95325: PPUSH
95326: LD_VAR 0 2
95330: PUSH
95331: LD_VAR 0 9
95335: ARRAY
95336: PUSH
95337: LD_INT 1
95339: ARRAY
95340: PPUSH
95341: LD_VAR 0 2
95345: PUSH
95346: LD_VAR 0 9
95350: ARRAY
95351: PUSH
95352: LD_INT 2
95354: ARRAY
95355: PPUSH
95356: CALL_OW 114
95360: GO 95376
// SetTag ( i , tag ) ;
95362: LD_VAR 0 4
95366: PPUSH
95367: LD_VAR 0 9
95371: PPUSH
95372: CALL_OW 109
// end else
95376: GO 95449
// if enemy then
95378: LD_VAR 0 5
95382: IFFALSE 95449
// begin if GetWeapon ( i ) = ru_time_lapser then
95384: LD_VAR 0 4
95388: PPUSH
95389: CALL_OW 264
95393: PUSH
95394: LD_INT 49
95396: EQUAL
95397: IFFALSE 95425
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
95399: LD_VAR 0 4
95403: PPUSH
95404: LD_VAR 0 5
95408: PPUSH
95409: LD_VAR 0 4
95413: PPUSH
95414: CALL_OW 74
95418: PPUSH
95419: CALL_OW 112
95423: GO 95449
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
95425: LD_VAR 0 4
95429: PPUSH
95430: LD_VAR 0 5
95434: PPUSH
95435: LD_VAR 0 4
95439: PPUSH
95440: CALL_OW 74
95444: PPUSH
95445: CALL 96524 0 2
// end ; end ;
95449: GO 95029
95451: POP
95452: POP
// end ;
95453: LD_VAR 0 3
95457: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
95458: LD_INT 0
95460: PPUSH
95461: PPUSH
95462: PPUSH
// if not unit or IsInUnit ( unit ) then
95463: LD_VAR 0 1
95467: NOT
95468: PUSH
95469: LD_VAR 0 1
95473: PPUSH
95474: CALL_OW 310
95478: OR
95479: IFFALSE 95483
// exit ;
95481: GO 95574
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
95483: LD_ADDR_VAR 0 4
95487: PUSH
95488: LD_VAR 0 1
95492: PPUSH
95493: CALL_OW 250
95497: PPUSH
95498: LD_VAR 0 2
95502: PPUSH
95503: LD_INT 1
95505: PPUSH
95506: CALL_OW 272
95510: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
95511: LD_ADDR_VAR 0 5
95515: PUSH
95516: LD_VAR 0 1
95520: PPUSH
95521: CALL_OW 251
95525: PPUSH
95526: LD_VAR 0 2
95530: PPUSH
95531: LD_INT 1
95533: PPUSH
95534: CALL_OW 273
95538: ST_TO_ADDR
// if ValidHex ( x , y ) then
95539: LD_VAR 0 4
95543: PPUSH
95544: LD_VAR 0 5
95548: PPUSH
95549: CALL_OW 488
95553: IFFALSE 95574
// ComTurnXY ( unit , x , y ) ;
95555: LD_VAR 0 1
95559: PPUSH
95560: LD_VAR 0 4
95564: PPUSH
95565: LD_VAR 0 5
95569: PPUSH
95570: CALL_OW 118
// end ;
95574: LD_VAR 0 3
95578: RET
// export function SeeUnits ( side , units ) ; var i ; begin
95579: LD_INT 0
95581: PPUSH
95582: PPUSH
// result := false ;
95583: LD_ADDR_VAR 0 3
95587: PUSH
95588: LD_INT 0
95590: ST_TO_ADDR
// if not units then
95591: LD_VAR 0 2
95595: NOT
95596: IFFALSE 95600
// exit ;
95598: GO 95645
// for i in units do
95600: LD_ADDR_VAR 0 4
95604: PUSH
95605: LD_VAR 0 2
95609: PUSH
95610: FOR_IN
95611: IFFALSE 95643
// if See ( side , i ) then
95613: LD_VAR 0 1
95617: PPUSH
95618: LD_VAR 0 4
95622: PPUSH
95623: CALL_OW 292
95627: IFFALSE 95641
// begin result := true ;
95629: LD_ADDR_VAR 0 3
95633: PUSH
95634: LD_INT 1
95636: ST_TO_ADDR
// exit ;
95637: POP
95638: POP
95639: GO 95645
// end ;
95641: GO 95610
95643: POP
95644: POP
// end ;
95645: LD_VAR 0 3
95649: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
95650: LD_INT 0
95652: PPUSH
95653: PPUSH
95654: PPUSH
95655: PPUSH
// if not unit or not points then
95656: LD_VAR 0 1
95660: NOT
95661: PUSH
95662: LD_VAR 0 2
95666: NOT
95667: OR
95668: IFFALSE 95672
// exit ;
95670: GO 95762
// dist := 99999 ;
95672: LD_ADDR_VAR 0 5
95676: PUSH
95677: LD_INT 99999
95679: ST_TO_ADDR
// for i in points do
95680: LD_ADDR_VAR 0 4
95684: PUSH
95685: LD_VAR 0 2
95689: PUSH
95690: FOR_IN
95691: IFFALSE 95760
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
95693: LD_ADDR_VAR 0 6
95697: PUSH
95698: LD_VAR 0 1
95702: PPUSH
95703: LD_VAR 0 4
95707: PUSH
95708: LD_INT 1
95710: ARRAY
95711: PPUSH
95712: LD_VAR 0 4
95716: PUSH
95717: LD_INT 2
95719: ARRAY
95720: PPUSH
95721: CALL_OW 297
95725: ST_TO_ADDR
// if tmpDist < dist then
95726: LD_VAR 0 6
95730: PUSH
95731: LD_VAR 0 5
95735: LESS
95736: IFFALSE 95758
// begin result := i ;
95738: LD_ADDR_VAR 0 3
95742: PUSH
95743: LD_VAR 0 4
95747: ST_TO_ADDR
// dist := tmpDist ;
95748: LD_ADDR_VAR 0 5
95752: PUSH
95753: LD_VAR 0 6
95757: ST_TO_ADDR
// end ; end ;
95758: GO 95690
95760: POP
95761: POP
// end ;
95762: LD_VAR 0 3
95766: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
95767: LD_INT 0
95769: PPUSH
// uc_side := side ;
95770: LD_ADDR_OWVAR 20
95774: PUSH
95775: LD_VAR 0 1
95779: ST_TO_ADDR
// uc_nation := 3 ;
95780: LD_ADDR_OWVAR 21
95784: PUSH
95785: LD_INT 3
95787: ST_TO_ADDR
// vc_chassis := 25 ;
95788: LD_ADDR_OWVAR 37
95792: PUSH
95793: LD_INT 25
95795: ST_TO_ADDR
// vc_engine := engine_siberite ;
95796: LD_ADDR_OWVAR 39
95800: PUSH
95801: LD_INT 3
95803: ST_TO_ADDR
// vc_control := control_computer ;
95804: LD_ADDR_OWVAR 38
95808: PUSH
95809: LD_INT 3
95811: ST_TO_ADDR
// vc_weapon := 59 ;
95812: LD_ADDR_OWVAR 40
95816: PUSH
95817: LD_INT 59
95819: ST_TO_ADDR
// result := CreateVehicle ;
95820: LD_ADDR_VAR 0 5
95824: PUSH
95825: CALL_OW 45
95829: ST_TO_ADDR
// SetDir ( result , d ) ;
95830: LD_VAR 0 5
95834: PPUSH
95835: LD_VAR 0 4
95839: PPUSH
95840: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
95844: LD_VAR 0 5
95848: PPUSH
95849: LD_VAR 0 2
95853: PPUSH
95854: LD_VAR 0 3
95858: PPUSH
95859: LD_INT 0
95861: PPUSH
95862: CALL_OW 48
// end ;
95866: LD_VAR 0 5
95870: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
95871: LD_INT 0
95873: PPUSH
95874: PPUSH
95875: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
95876: LD_ADDR_VAR 0 2
95880: PUSH
95881: LD_INT 0
95883: PUSH
95884: LD_INT 0
95886: PUSH
95887: LD_INT 0
95889: PUSH
95890: LD_INT 0
95892: PUSH
95893: EMPTY
95894: LIST
95895: LIST
95896: LIST
95897: LIST
95898: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
95899: LD_VAR 0 1
95903: NOT
95904: PUSH
95905: LD_VAR 0 1
95909: PPUSH
95910: CALL_OW 264
95914: PUSH
95915: LD_INT 12
95917: PUSH
95918: LD_INT 51
95920: PUSH
95921: LD_INT 32
95923: PUSH
95924: LD_INT 89
95926: PUSH
95927: EMPTY
95928: LIST
95929: LIST
95930: LIST
95931: LIST
95932: IN
95933: NOT
95934: OR
95935: IFFALSE 95939
// exit ;
95937: GO 96037
// for i := 1 to 3 do
95939: LD_ADDR_VAR 0 3
95943: PUSH
95944: DOUBLE
95945: LD_INT 1
95947: DEC
95948: ST_TO_ADDR
95949: LD_INT 3
95951: PUSH
95952: FOR_TO
95953: IFFALSE 96035
// begin tmp := GetCargo ( cargo , i ) ;
95955: LD_ADDR_VAR 0 4
95959: PUSH
95960: LD_VAR 0 1
95964: PPUSH
95965: LD_VAR 0 3
95969: PPUSH
95970: CALL_OW 289
95974: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
95975: LD_ADDR_VAR 0 2
95979: PUSH
95980: LD_VAR 0 2
95984: PPUSH
95985: LD_VAR 0 3
95989: PPUSH
95990: LD_VAR 0 4
95994: PPUSH
95995: CALL_OW 1
95999: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
96000: LD_ADDR_VAR 0 2
96004: PUSH
96005: LD_VAR 0 2
96009: PPUSH
96010: LD_INT 4
96012: PPUSH
96013: LD_VAR 0 2
96017: PUSH
96018: LD_INT 4
96020: ARRAY
96021: PUSH
96022: LD_VAR 0 4
96026: PLUS
96027: PPUSH
96028: CALL_OW 1
96032: ST_TO_ADDR
// end ;
96033: GO 95952
96035: POP
96036: POP
// end ;
96037: LD_VAR 0 2
96041: RET
// export function Length ( array ) ; begin
96042: LD_INT 0
96044: PPUSH
// result := array + 0 ;
96045: LD_ADDR_VAR 0 2
96049: PUSH
96050: LD_VAR 0 1
96054: PUSH
96055: LD_INT 0
96057: PLUS
96058: ST_TO_ADDR
// end ;
96059: LD_VAR 0 2
96063: RET
// export function PrepareArray ( array ) ; begin
96064: LD_INT 0
96066: PPUSH
// result := array diff 0 ;
96067: LD_ADDR_VAR 0 2
96071: PUSH
96072: LD_VAR 0 1
96076: PUSH
96077: LD_INT 0
96079: DIFF
96080: ST_TO_ADDR
// if not result [ 1 ] then
96081: LD_VAR 0 2
96085: PUSH
96086: LD_INT 1
96088: ARRAY
96089: NOT
96090: IFFALSE 96110
// result := Delete ( result , 1 ) ;
96092: LD_ADDR_VAR 0 2
96096: PUSH
96097: LD_VAR 0 2
96101: PPUSH
96102: LD_INT 1
96104: PPUSH
96105: CALL_OW 3
96109: ST_TO_ADDR
// end ;
96110: LD_VAR 0 2
96114: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
96115: LD_INT 0
96117: PPUSH
96118: PPUSH
96119: PPUSH
96120: PPUSH
// sibRocketRange := 25 ;
96121: LD_ADDR_VAR 0 6
96125: PUSH
96126: LD_INT 25
96128: ST_TO_ADDR
// result := false ;
96129: LD_ADDR_VAR 0 4
96133: PUSH
96134: LD_INT 0
96136: ST_TO_ADDR
// for i := 0 to 5 do
96137: LD_ADDR_VAR 0 5
96141: PUSH
96142: DOUBLE
96143: LD_INT 0
96145: DEC
96146: ST_TO_ADDR
96147: LD_INT 5
96149: PUSH
96150: FOR_TO
96151: IFFALSE 96218
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
96153: LD_VAR 0 1
96157: PPUSH
96158: LD_VAR 0 5
96162: PPUSH
96163: LD_VAR 0 6
96167: PPUSH
96168: CALL_OW 272
96172: PPUSH
96173: LD_VAR 0 2
96177: PPUSH
96178: LD_VAR 0 5
96182: PPUSH
96183: LD_VAR 0 6
96187: PPUSH
96188: CALL_OW 273
96192: PPUSH
96193: LD_VAR 0 3
96197: PPUSH
96198: CALL_OW 309
96202: IFFALSE 96216
// begin result := true ;
96204: LD_ADDR_VAR 0 4
96208: PUSH
96209: LD_INT 1
96211: ST_TO_ADDR
// exit ;
96212: POP
96213: POP
96214: GO 96220
// end ;
96216: GO 96150
96218: POP
96219: POP
// end ;
96220: LD_VAR 0 4
96224: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
96225: LD_INT 0
96227: PPUSH
96228: PPUSH
96229: PPUSH
// if btype = b_depot then
96230: LD_VAR 0 2
96234: PUSH
96235: LD_INT 0
96237: EQUAL
96238: IFFALSE 96250
// begin result := true ;
96240: LD_ADDR_VAR 0 3
96244: PUSH
96245: LD_INT 1
96247: ST_TO_ADDR
// exit ;
96248: GO 96366
// end ; pom := GetBase ( depot ) ;
96250: LD_ADDR_VAR 0 4
96254: PUSH
96255: LD_VAR 0 1
96259: PPUSH
96260: CALL_OW 274
96264: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
96265: LD_ADDR_VAR 0 5
96269: PUSH
96270: LD_VAR 0 2
96274: PPUSH
96275: LD_VAR 0 1
96279: PPUSH
96280: CALL_OW 248
96284: PPUSH
96285: CALL_OW 450
96289: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
96290: LD_ADDR_VAR 0 3
96294: PUSH
96295: LD_VAR 0 4
96299: PPUSH
96300: LD_INT 1
96302: PPUSH
96303: CALL_OW 275
96307: PUSH
96308: LD_VAR 0 5
96312: PUSH
96313: LD_INT 1
96315: ARRAY
96316: GREATEREQUAL
96317: PUSH
96318: LD_VAR 0 4
96322: PPUSH
96323: LD_INT 2
96325: PPUSH
96326: CALL_OW 275
96330: PUSH
96331: LD_VAR 0 5
96335: PUSH
96336: LD_INT 2
96338: ARRAY
96339: GREATEREQUAL
96340: AND
96341: PUSH
96342: LD_VAR 0 4
96346: PPUSH
96347: LD_INT 3
96349: PPUSH
96350: CALL_OW 275
96354: PUSH
96355: LD_VAR 0 5
96359: PUSH
96360: LD_INT 3
96362: ARRAY
96363: GREATEREQUAL
96364: AND
96365: ST_TO_ADDR
// end ;
96366: LD_VAR 0 3
96370: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
96371: LD_INT 0
96373: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
96374: LD_VAR 0 1
96378: PPUSH
96379: LD_VAR 0 2
96383: PPUSH
96384: LD_INT 0
96386: PPUSH
96387: LD_INT 0
96389: PPUSH
96390: LD_INT 1
96392: PPUSH
96393: LD_INT 0
96395: PPUSH
96396: CALL_OW 587
// end ;
96400: LD_VAR 0 3
96404: RET
// export function CenterOnNow ( unit ) ; begin
96405: LD_INT 0
96407: PPUSH
// result := IsInUnit ( unit ) ;
96408: LD_ADDR_VAR 0 2
96412: PUSH
96413: LD_VAR 0 1
96417: PPUSH
96418: CALL_OW 310
96422: ST_TO_ADDR
// if not result then
96423: LD_VAR 0 2
96427: NOT
96428: IFFALSE 96440
// result := unit ;
96430: LD_ADDR_VAR 0 2
96434: PUSH
96435: LD_VAR 0 1
96439: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
96440: LD_VAR 0 1
96444: PPUSH
96445: CALL_OW 87
// end ;
96449: LD_VAR 0 2
96453: RET
// export function ComMoveHex ( unit , hex ) ; begin
96454: LD_INT 0
96456: PPUSH
// if not hex then
96457: LD_VAR 0 2
96461: NOT
96462: IFFALSE 96466
// exit ;
96464: GO 96519
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
96466: LD_VAR 0 2
96470: PUSH
96471: LD_INT 1
96473: ARRAY
96474: PPUSH
96475: LD_VAR 0 2
96479: PUSH
96480: LD_INT 2
96482: ARRAY
96483: PPUSH
96484: CALL_OW 428
96488: IFFALSE 96492
// exit ;
96490: GO 96519
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
96492: LD_VAR 0 1
96496: PPUSH
96497: LD_VAR 0 2
96501: PUSH
96502: LD_INT 1
96504: ARRAY
96505: PPUSH
96506: LD_VAR 0 2
96510: PUSH
96511: LD_INT 2
96513: ARRAY
96514: PPUSH
96515: CALL_OW 111
// end ;
96519: LD_VAR 0 3
96523: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
96524: LD_INT 0
96526: PPUSH
96527: PPUSH
96528: PPUSH
// if not unit or not enemy then
96529: LD_VAR 0 1
96533: NOT
96534: PUSH
96535: LD_VAR 0 2
96539: NOT
96540: OR
96541: IFFALSE 96545
// exit ;
96543: GO 96669
// x := GetX ( enemy ) ;
96545: LD_ADDR_VAR 0 4
96549: PUSH
96550: LD_VAR 0 2
96554: PPUSH
96555: CALL_OW 250
96559: ST_TO_ADDR
// y := GetY ( enemy ) ;
96560: LD_ADDR_VAR 0 5
96564: PUSH
96565: LD_VAR 0 2
96569: PPUSH
96570: CALL_OW 251
96574: ST_TO_ADDR
// if ValidHex ( x , y ) then
96575: LD_VAR 0 4
96579: PPUSH
96580: LD_VAR 0 5
96584: PPUSH
96585: CALL_OW 488
96589: IFFALSE 96669
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] or See ( GetSide ( unit ) , enemy ) then
96591: LD_VAR 0 2
96595: PPUSH
96596: CALL_OW 247
96600: PUSH
96601: LD_INT 3
96603: PUSH
96604: LD_INT 2
96606: PUSH
96607: EMPTY
96608: LIST
96609: LIST
96610: IN
96611: PUSH
96612: LD_VAR 0 1
96616: PPUSH
96617: CALL_OW 255
96621: PPUSH
96622: LD_VAR 0 2
96626: PPUSH
96627: CALL_OW 292
96631: OR
96632: IFFALSE 96650
// ComAttackUnit ( unit , enemy ) else
96634: LD_VAR 0 1
96638: PPUSH
96639: LD_VAR 0 2
96643: PPUSH
96644: CALL_OW 115
96648: GO 96669
// ComAgressiveMove ( unit , x , y ) ;
96650: LD_VAR 0 1
96654: PPUSH
96655: LD_VAR 0 4
96659: PPUSH
96660: LD_VAR 0 5
96664: PPUSH
96665: CALL_OW 114
// end ;
96669: LD_VAR 0 3
96673: RET
// export function GetSourcesFromArea ( area , all ) ; var i , list ; begin
96674: LD_INT 0
96676: PPUSH
96677: PPUSH
96678: PPUSH
// list := AreaToList ( area , 0 ) ;
96679: LD_ADDR_VAR 0 5
96683: PUSH
96684: LD_VAR 0 1
96688: PPUSH
96689: LD_INT 0
96691: PPUSH
96692: CALL_OW 517
96696: ST_TO_ADDR
// if not list then
96697: LD_VAR 0 5
96701: NOT
96702: IFFALSE 96706
// exit ;
96704: GO 96836
// if all then
96706: LD_VAR 0 2
96710: IFFALSE 96798
// begin for i := 1 to list [ 1 ] do
96712: LD_ADDR_VAR 0 4
96716: PUSH
96717: DOUBLE
96718: LD_INT 1
96720: DEC
96721: ST_TO_ADDR
96722: LD_VAR 0 5
96726: PUSH
96727: LD_INT 1
96729: ARRAY
96730: PUSH
96731: FOR_TO
96732: IFFALSE 96794
// result := Replace ( result , result + 1 , [ list [ 1 ] [ i ] , list [ 2 ] [ i ] ] ) ;
96734: LD_ADDR_VAR 0 3
96738: PUSH
96739: LD_VAR 0 3
96743: PPUSH
96744: LD_VAR 0 3
96748: PUSH
96749: LD_INT 1
96751: PLUS
96752: PPUSH
96753: LD_VAR 0 5
96757: PUSH
96758: LD_INT 1
96760: ARRAY
96761: PUSH
96762: LD_VAR 0 4
96766: ARRAY
96767: PUSH
96768: LD_VAR 0 5
96772: PUSH
96773: LD_INT 2
96775: ARRAY
96776: PUSH
96777: LD_VAR 0 4
96781: ARRAY
96782: PUSH
96783: EMPTY
96784: LIST
96785: LIST
96786: PPUSH
96787: CALL_OW 1
96791: ST_TO_ADDR
96792: GO 96731
96794: POP
96795: POP
// exit ;
96796: GO 96836
// end ; result := [ [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] ] ] ;
96798: LD_ADDR_VAR 0 3
96802: PUSH
96803: LD_VAR 0 5
96807: PUSH
96808: LD_INT 1
96810: ARRAY
96811: PUSH
96812: LD_INT 1
96814: ARRAY
96815: PUSH
96816: LD_VAR 0 5
96820: PUSH
96821: LD_INT 2
96823: ARRAY
96824: PUSH
96825: LD_INT 1
96827: ARRAY
96828: PUSH
96829: EMPTY
96830: LIST
96831: LIST
96832: PUSH
96833: EMPTY
96834: LIST
96835: ST_TO_ADDR
// end ;
96836: LD_VAR 0 3
96840: RET
// export function GetBuildingFromArea ( area , direction ) ; var list ; begin
96841: LD_INT 0
96843: PPUSH
96844: PPUSH
// list := AreaToList ( area , 0 ) ;
96845: LD_ADDR_VAR 0 4
96849: PUSH
96850: LD_VAR 0 1
96854: PPUSH
96855: LD_INT 0
96857: PPUSH
96858: CALL_OW 517
96862: ST_TO_ADDR
// if not list then
96863: LD_VAR 0 4
96867: NOT
96868: IFFALSE 96872
// exit ;
96870: GO 96913
// result := [ list [ 1 ] [ 1 ] , list [ 2 ] [ 1 ] , direction ] ;
96872: LD_ADDR_VAR 0 3
96876: PUSH
96877: LD_VAR 0 4
96881: PUSH
96882: LD_INT 1
96884: ARRAY
96885: PUSH
96886: LD_INT 1
96888: ARRAY
96889: PUSH
96890: LD_VAR 0 4
96894: PUSH
96895: LD_INT 2
96897: ARRAY
96898: PUSH
96899: LD_INT 1
96901: ARRAY
96902: PUSH
96903: LD_VAR 0 2
96907: PUSH
96908: EMPTY
96909: LIST
96910: LIST
96911: LIST
96912: ST_TO_ADDR
// end ;
96913: LD_VAR 0 3
96917: RET
// export function First ( array ) ; begin
96918: LD_INT 0
96920: PPUSH
// if not array then
96921: LD_VAR 0 1
96925: NOT
96926: IFFALSE 96930
// exit ;
96928: GO 96944
// result := array [ 1 ] ;
96930: LD_ADDR_VAR 0 2
96934: PUSH
96935: LD_VAR 0 1
96939: PUSH
96940: LD_INT 1
96942: ARRAY
96943: ST_TO_ADDR
// end ;
96944: LD_VAR 0 2
96948: RET
// export function Last ( array ) ; begin
96949: LD_INT 0
96951: PPUSH
// if not array then
96952: LD_VAR 0 1
96956: NOT
96957: IFFALSE 96961
// exit ;
96959: GO 96977
// result := array [ array ] ;
96961: LD_ADDR_VAR 0 2
96965: PUSH
96966: LD_VAR 0 1
96970: PUSH
96971: LD_VAR 0 1
96975: ARRAY
96976: ST_TO_ADDR
// end ;
96977: LD_VAR 0 2
96981: RET
// export function CheckByIndex ( array , index , value , indexColumn ) ; var i ; begin
96982: LD_INT 0
96984: PPUSH
96985: PPUSH
// result := [ ] ;
96986: LD_ADDR_VAR 0 5
96990: PUSH
96991: EMPTY
96992: ST_TO_ADDR
// if not array then
96993: LD_VAR 0 1
96997: NOT
96998: IFFALSE 97002
// exit ;
97000: GO 97114
// for i := 1 to array do
97002: LD_ADDR_VAR 0 6
97006: PUSH
97007: DOUBLE
97008: LD_INT 1
97010: DEC
97011: ST_TO_ADDR
97012: LD_VAR 0 1
97016: PUSH
97017: FOR_TO
97018: IFFALSE 97112
// if array [ i ] [ index ] = value then
97020: LD_VAR 0 1
97024: PUSH
97025: LD_VAR 0 6
97029: ARRAY
97030: PUSH
97031: LD_VAR 0 2
97035: ARRAY
97036: PUSH
97037: LD_VAR 0 3
97041: EQUAL
97042: IFFALSE 97110
// begin if indexColumn then
97044: LD_VAR 0 4
97048: IFFALSE 97084
// result := Join ( result , array [ i ] [ indexColumn ] ) else
97050: LD_ADDR_VAR 0 5
97054: PUSH
97055: LD_VAR 0 5
97059: PPUSH
97060: LD_VAR 0 1
97064: PUSH
97065: LD_VAR 0 6
97069: ARRAY
97070: PUSH
97071: LD_VAR 0 4
97075: ARRAY
97076: PPUSH
97077: CALL 92306 0 2
97081: ST_TO_ADDR
97082: GO 97110
// result := Join ( result , array [ i ] ) ;
97084: LD_ADDR_VAR 0 5
97088: PUSH
97089: LD_VAR 0 5
97093: PPUSH
97094: LD_VAR 0 1
97098: PUSH
97099: LD_VAR 0 6
97103: ARRAY
97104: PPUSH
97105: CALL 92306 0 2
97109: ST_TO_ADDR
// end ;
97110: GO 97017
97112: POP
97113: POP
// end ;
97114: LD_VAR 0 5
97118: RET
// export function ComBackOnParking ( vehicles , parkingPoint ) ; begin
97119: LD_INT 0
97121: PPUSH
// if not vehicles or not parkingPoint then
97122: LD_VAR 0 1
97126: NOT
97127: PUSH
97128: LD_VAR 0 2
97132: NOT
97133: OR
97134: IFFALSE 97138
// exit ;
97136: GO 97236
// vehicles := UnitFilter ( vehicles , [ [ f_ok ] , [ f_not , [ f_distxy , parkingPoint [ 1 ] , parkingPoint [ 2 ] , 8 ] ] ] ) ;
97138: LD_ADDR_VAR 0 1
97142: PUSH
97143: LD_VAR 0 1
97147: PPUSH
97148: LD_INT 50
97150: PUSH
97151: EMPTY
97152: LIST
97153: PUSH
97154: LD_INT 3
97156: PUSH
97157: LD_INT 92
97159: PUSH
97160: LD_VAR 0 2
97164: PUSH
97165: LD_INT 1
97167: ARRAY
97168: PUSH
97169: LD_VAR 0 2
97173: PUSH
97174: LD_INT 2
97176: ARRAY
97177: PUSH
97178: LD_INT 8
97180: PUSH
97181: EMPTY
97182: LIST
97183: LIST
97184: LIST
97185: LIST
97186: PUSH
97187: EMPTY
97188: LIST
97189: LIST
97190: PUSH
97191: EMPTY
97192: LIST
97193: LIST
97194: PPUSH
97195: CALL_OW 72
97199: ST_TO_ADDR
// if not vehicles then
97200: LD_VAR 0 1
97204: NOT
97205: IFFALSE 97209
// exit ;
97207: GO 97236
// ComMoveXY ( vehicles , parkingPoint [ 1 ] , parkingPoint [ 2 ] ) ;
97209: LD_VAR 0 1
97213: PPUSH
97214: LD_VAR 0 2
97218: PUSH
97219: LD_INT 1
97221: ARRAY
97222: PPUSH
97223: LD_VAR 0 2
97227: PUSH
97228: LD_INT 2
97230: ARRAY
97231: PPUSH
97232: CALL_OW 111
// end ;
97236: LD_VAR 0 3
97240: RET
// export function PlaceHiddenCamerasInArea ( side , area ) ; var i , tmp ; begin
97241: LD_INT 0
97243: PPUSH
97244: PPUSH
97245: PPUSH
// if not side or not area then
97246: LD_VAR 0 1
97250: NOT
97251: PUSH
97252: LD_VAR 0 2
97256: NOT
97257: OR
97258: IFFALSE 97262
// exit ;
97260: GO 97381
// tmp := AreaToList ( area , 0 ) ;
97262: LD_ADDR_VAR 0 5
97266: PUSH
97267: LD_VAR 0 2
97271: PPUSH
97272: LD_INT 0
97274: PPUSH
97275: CALL_OW 517
97279: ST_TO_ADDR
// for i := 1 to tmp [ 1 ] do
97280: LD_ADDR_VAR 0 4
97284: PUSH
97285: DOUBLE
97286: LD_INT 1
97288: DEC
97289: ST_TO_ADDR
97290: LD_VAR 0 5
97294: PUSH
97295: LD_INT 1
97297: ARRAY
97298: PUSH
97299: FOR_TO
97300: IFFALSE 97379
// begin if IsEnvironment ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ) then
97302: LD_VAR 0 5
97306: PUSH
97307: LD_INT 1
97309: ARRAY
97310: PUSH
97311: LD_VAR 0 4
97315: ARRAY
97316: PPUSH
97317: LD_VAR 0 5
97321: PUSH
97322: LD_INT 2
97324: ARRAY
97325: PUSH
97326: LD_VAR 0 4
97330: ARRAY
97331: PPUSH
97332: CALL_OW 351
97336: IFFALSE 97377
// HiddenCamera ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side ) ;
97338: LD_VAR 0 5
97342: PUSH
97343: LD_INT 1
97345: ARRAY
97346: PUSH
97347: LD_VAR 0 4
97351: ARRAY
97352: PPUSH
97353: LD_VAR 0 5
97357: PUSH
97358: LD_INT 2
97360: ARRAY
97361: PUSH
97362: LD_VAR 0 4
97366: ARRAY
97367: PPUSH
97368: LD_VAR 0 1
97372: PPUSH
97373: CALL_OW 244
// end ;
97377: GO 97299
97379: POP
97380: POP
// end ; end_of_file
97381: LD_VAR 0 3
97385: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
97386: LD_VAR 0 1
97390: PUSH
97391: LD_INT 200
97393: DOUBLE
97394: GREATEREQUAL
97395: IFFALSE 97403
97397: LD_INT 299
97399: DOUBLE
97400: LESSEQUAL
97401: IFTRUE 97405
97403: GO 97437
97405: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
97406: LD_VAR 0 1
97410: PPUSH
97411: LD_VAR 0 2
97415: PPUSH
97416: LD_VAR 0 3
97420: PPUSH
97421: LD_VAR 0 4
97425: PPUSH
97426: LD_VAR 0 5
97430: PPUSH
97431: CALL 50097 0 5
97435: GO 97514
97437: LD_INT 300
97439: DOUBLE
97440: GREATEREQUAL
97441: IFFALSE 97449
97443: LD_INT 399
97445: DOUBLE
97446: LESSEQUAL
97447: IFTRUE 97451
97449: GO 97513
97451: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
97452: LD_VAR 0 1
97456: PPUSH
97457: LD_VAR 0 2
97461: PPUSH
97462: LD_VAR 0 3
97466: PPUSH
97467: LD_VAR 0 4
97471: PPUSH
97472: LD_VAR 0 5
97476: PPUSH
97477: LD_VAR 0 6
97481: PPUSH
97482: LD_VAR 0 7
97486: PPUSH
97487: LD_VAR 0 8
97491: PPUSH
97492: LD_VAR 0 9
97496: PPUSH
97497: LD_VAR 0 10
97501: PPUSH
97502: LD_VAR 0 11
97506: PPUSH
97507: CALL 46422 0 11
97511: GO 97514
97513: POP
// end ;
97514: PPOPN 11
97516: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
97517: LD_VAR 0 1
97521: PPUSH
97522: LD_VAR 0 2
97526: PPUSH
97527: LD_VAR 0 3
97531: PPUSH
97532: LD_VAR 0 4
97536: PPUSH
97537: LD_VAR 0 5
97541: PPUSH
97542: CALL 49833 0 5
// end ; end_of_file
97546: PPOPN 5
97548: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
97549: LD_VAR 0 1
97553: PPUSH
97554: LD_VAR 0 2
97558: PPUSH
97559: LD_VAR 0 3
97563: PPUSH
97564: LD_VAR 0 4
97568: PPUSH
97569: LD_VAR 0 5
97573: PPUSH
97574: LD_VAR 0 6
97578: PPUSH
97579: CALL 34074 0 6
// end ;
97583: PPOPN 6
97585: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
97586: LD_INT 0
97588: PPUSH
// begin if not units then
97589: LD_VAR 0 1
97593: NOT
97594: IFFALSE 97598
// exit ;
97596: GO 97598
// end ;
97598: PPOPN 7
97600: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
97601: CALL 33961 0 0
// end ;
97605: PPOPN 1
97607: END
