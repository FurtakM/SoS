// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export Truman ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned , ruDepotConstructed , spawnRussians ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 29
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 21
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 30
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 39
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 40
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 41
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 42
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 43
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 51
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 48
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 47
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 49
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 50
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 62
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 52
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: LD_INT 6
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: PUSH
 146: LD_OWVAR 67
 150: ARRAY
 151: ST_TO_ADDR
// eventVar1 = 0 ;
 152: LD_ADDR_EXP 66
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// eventVar2 = 0 ;
 160: LD_ADDR_EXP 67
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// fastEnd = 0 ;
 168: LD_ADDR_EXP 64
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// KhatamStatus = 0 ;
 176: LD_ADDR_EXP 54
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// GensherStatus = 0 ;
 184: LD_ADDR_EXP 53
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// cratesSpawned = 0 ;
 192: LD_ADDR_EXP 57
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 , 2 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 60
 204: PUSH
 205: LD_INT 1
 207: PUSH
 208: LD_INT 2
 210: PUSH
 211: LD_INT 2
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 , 4 ] [ Difficulty ] ;
 229: LD_ADDR_EXP 61
 233: PUSH
 234: LD_INT 2
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: LD_INT 4
 242: PUSH
 243: LD_INT 4
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_OWVAR 67
 256: ARRAY
 257: ST_TO_ADDR
// snipersTrained := false ;
 258: LD_ADDR_EXP 63
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// ruDepotConstructed := false ;
 266: LD_ADDR_EXP 58
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// spawnRussians := false ;
 274: LD_ADDR_EXP 59
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// attackAvalaible = 1 ;
 282: LD_ADDR_EXP 65
 286: PUSH
 287: LD_INT 1
 289: ST_TO_ADDR
// mission_prefix := 10c_ ;
 290: LD_ADDR_EXP 55
 294: PUSH
 295: LD_STRING 10c_
 297: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 298: LD_ADDR_EXP 56
 302: PUSH
 303: LD_STRING 10_
 305: ST_TO_ADDR
// debugMode = 0 ;
 306: LD_ADDR_EXP 68
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// Video ( true ) ;
 314: LD_INT 1
 316: PPUSH
 317: CALL 87281 0 1
// CreateNature ;
 321: CALL 27123 0 0
// PrepareDifficulty ;
 325: CALL 11747 0 0
// PrepareJMMTeam ;
 329: CALL 1363 0 0
// PrepareCathyTeam ;
 333: CALL 2599 0 0
// PlaceMines ( MineField1 , 1 + Difficulty ) ;
 337: LD_INT 24
 339: PPUSH
 340: LD_INT 1
 342: PUSH
 343: LD_OWVAR 67
 347: PLUS
 348: PPUSH
 349: CALL 21607 0 2
// if Difficulty > 1 then
 353: LD_OWVAR 67
 357: PUSH
 358: LD_INT 1
 360: GREATER
 361: IFFALSE 375
// PlaceMines ( MineField2 , Difficulty ) ;
 363: LD_INT 25
 365: PPUSH
 366: LD_OWVAR 67
 370: PPUSH
 371: CALL 21607 0 2
// if Difficulty > 2 then
 375: LD_OWVAR 67
 379: PUSH
 380: LD_INT 2
 382: GREATER
 383: IFFALSE 397
// PlaceMines ( MineField3 , Difficulty ) ;
 385: LD_INT 26
 387: PPUSH
 388: LD_OWVAR 67
 392: PPUSH
 393: CALL 21607 0 2
// PrepareArabianCommander ;
 397: CALL 4218 0 0
// PrepareArabian ;
 401: CALL 4270 0 0
// BuildArabianBase ;
 405: CALL 14562 0 0
// TameApemans ;
 409: CALL 20412 0 0
// end ;
 413: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 414: LD_EXP 68
 418: PUSH
 419: LD_INT 1
 421: EQUAL
 422: IFFALSE 728
 424: GO 426
 426: DISABLE
 427: LD_INT 0
 429: PPUSH
// begin enable ;
 430: ENABLE
// fogoff ( true ) ;
 431: LD_INT 1
 433: PPUSH
 434: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 438: LD_ADDR_VAR 0 1
 442: PUSH
 443: LD_INT 22
 445: PUSH
 446: LD_INT 1
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PUSH
 453: LD_INT 21
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PPUSH
 467: CALL_OW 69
 471: PUSH
 472: FOR_IN
 473: IFFALSE 489
// SetLives ( i , 1000 ) ;
 475: LD_VAR 0 1
 479: PPUSH
 480: LD_INT 1000
 482: PPUSH
 483: CALL_OW 234
 487: GO 472
 489: POP
 490: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 491: LD_ADDR_VAR 0 1
 495: PUSH
 496: LD_INT 22
 498: PUSH
 499: LD_INT 1
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: PUSH
 506: LD_INT 2
 508: PUSH
 509: LD_INT 30
 511: PUSH
 512: LD_INT 0
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 30
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PPUSH
 538: CALL_OW 69
 542: PUSH
 543: FOR_IN
 544: IFFALSE 568
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 546: LD_VAR 0 1
 550: PPUSH
 551: CALL_OW 274
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: LD_INT 9999
 561: PPUSH
 562: CALL_OW 277
 566: GO 543
 568: POP
 569: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 570: LD_ADDR_VAR 0 1
 574: PUSH
 575: LD_INT 22
 577: PUSH
 578: LD_INT 1
 580: PUSH
 581: EMPTY
 582: LIST
 583: LIST
 584: PUSH
 585: LD_INT 2
 587: PUSH
 588: LD_INT 30
 590: PUSH
 591: LD_INT 0
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: PUSH
 598: LD_INT 30
 600: PUSH
 601: LD_INT 1
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: PUSH
 608: EMPTY
 609: LIST
 610: LIST
 611: LIST
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PPUSH
 617: CALL_OW 69
 621: PUSH
 622: FOR_IN
 623: IFFALSE 647
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 625: LD_VAR 0 1
 629: PPUSH
 630: CALL_OW 274
 634: PPUSH
 635: LD_INT 2
 637: PPUSH
 638: LD_INT 9999
 640: PPUSH
 641: CALL_OW 277
 645: GO 622
 647: POP
 648: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 649: LD_ADDR_VAR 0 1
 653: PUSH
 654: LD_INT 22
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 30
 669: PUSH
 670: LD_INT 0
 672: PUSH
 673: EMPTY
 674: LIST
 675: LIST
 676: PUSH
 677: LD_INT 30
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: PPUSH
 696: CALL_OW 69
 700: PUSH
 701: FOR_IN
 702: IFFALSE 726
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 704: LD_VAR 0 1
 708: PPUSH
 709: CALL_OW 274
 713: PPUSH
 714: LD_INT 3
 716: PPUSH
 717: LD_INT 9999
 719: PPUSH
 720: CALL_OW 277
 724: GO 701
 726: POP
 727: POP
// end ;
 728: PPOPN 1
 730: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 731: LD_INT 25
 733: PUSH
 734: LD_INT 5
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PPUSH
 741: CALL_OW 69
 745: IFFALSE 758
 747: GO 749
 749: DISABLE
// snipersTrained := true ;
 750: LD_ADDR_EXP 63
 754: PUSH
 755: LD_INT 1
 757: ST_TO_ADDR
 758: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and spawnRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 759: LD_INT 1
 761: PPUSH
 762: LD_INT 2
 764: PPUSH
 765: CALL_OW 81
 769: PUSH
 770: LD_INT 1
 772: EQUAL
 773: PUSH
 774: LD_EXP 59
 778: AND
 779: PUSH
 780: LD_INT 22
 782: PUSH
 783: LD_INT 3
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PPUSH
 790: CALL_OW 69
 794: PUSH
 795: LD_INT 0
 797: EQUAL
 798: AND
 799: IFFALSE 811
 801: GO 803
 803: DISABLE
// SetAchievement ( ACH_POWER ) ;
 804: LD_STRING ACH_POWER
 806: PPUSH
 807: CALL_OW 543
 811: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 812: LD_INT 22
 814: PUSH
 815: LD_INT 1
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 30
 824: PUSH
 825: LD_INT 1
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: PPUSH
 836: CALL_OW 69
 840: PUSH
 841: LD_INT 22
 843: PUSH
 844: LD_INT 1
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: LD_INT 30
 853: PUSH
 854: LD_INT 32
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PPUSH
 865: CALL_OW 69
 869: AND
 870: PUSH
 871: LD_INT 22
 873: PUSH
 874: LD_INT 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 30
 883: PUSH
 884: LD_INT 33
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: PUSH
 891: EMPTY
 892: LIST
 893: LIST
 894: PPUSH
 895: CALL_OW 69
 899: AND
 900: PUSH
 901: LD_INT 22
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PUSH
 911: LD_INT 30
 913: PUSH
 914: LD_INT 5
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PPUSH
 925: CALL_OW 69
 929: AND
 930: PUSH
 931: LD_INT 22
 933: PUSH
 934: LD_INT 1
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 30
 943: PUSH
 944: LD_INT 3
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: PPUSH
 955: CALL_OW 69
 959: AND
 960: PUSH
 961: LD_INT 22
 963: PUSH
 964: LD_INT 1
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 30
 973: PUSH
 974: LD_INT 36
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 69
 989: AND
 990: PUSH
 991: LD_INT 22
 993: PUSH
 994: LD_INT 1
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: PUSH
1001: LD_INT 30
1003: PUSH
1004: LD_INT 31
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: PPUSH
1015: CALL_OW 69
1019: AND
1020: PUSH
1021: LD_INT 22
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: PUSH
1031: LD_INT 30
1033: PUSH
1034: LD_INT 22
1036: PUSH
1037: EMPTY
1038: LIST
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PPUSH
1045: CALL_OW 69
1049: AND
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 1
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 20
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: AND
1080: PUSH
1081: LD_INT 22
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 30
1093: PUSH
1094: LD_INT 19
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: PPUSH
1105: CALL_OW 69
1109: AND
1110: PUSH
1111: LD_INT 22
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PUSH
1121: LD_INT 30
1123: PUSH
1124: LD_INT 16
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: PPUSH
1135: CALL_OW 69
1139: AND
1140: PUSH
1141: LD_INT 22
1143: PUSH
1144: LD_INT 1
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: PUSH
1151: LD_INT 30
1153: PUSH
1154: LD_INT 17
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PPUSH
1165: CALL_OW 69
1169: AND
1170: PUSH
1171: LD_INT 22
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 30
1183: PUSH
1184: LD_INT 21
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PPUSH
1195: CALL_OW 69
1199: AND
1200: PUSH
1201: LD_INT 22
1203: PUSH
1204: LD_INT 1
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: PUSH
1211: LD_INT 30
1213: PUSH
1214: LD_INT 29
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 69
1229: AND
1230: PUSH
1231: LD_INT 22
1233: PUSH
1234: LD_INT 1
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: LD_INT 30
1243: PUSH
1244: LD_INT 30
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: PPUSH
1255: CALL_OW 69
1259: AND
1260: PUSH
1261: LD_INT 22
1263: PUSH
1264: LD_INT 1
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 30
1273: PUSH
1274: LD_INT 27
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PPUSH
1285: CALL_OW 69
1289: AND
1290: PUSH
1291: LD_INT 22
1293: PUSH
1294: LD_INT 1
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PUSH
1301: LD_INT 30
1303: PUSH
1304: LD_INT 26
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PPUSH
1315: CALL_OW 69
1319: AND
1320: PUSH
1321: LD_INT 22
1323: PUSH
1324: LD_INT 1
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: PUSH
1331: LD_INT 30
1333: PUSH
1334: LD_INT 28
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: PPUSH
1345: CALL_OW 69
1349: AND
1350: IFFALSE 1362
1352: GO 1354
1354: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1355: LD_STRING ACH_ARCH
1357: PPUSH
1358: CALL_OW 543
1362: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1363: LD_INT 0
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
1370: PPUSH
// uc_side = 1 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 1
1378: ST_TO_ADDR
// uc_nation = 1 ;
1379: LD_ADDR_OWVAR 21
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// count = 0 ;
1387: LD_ADDR_VAR 0 6
1391: PUSH
1392: LD_INT 0
1394: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 10_ ) ;
1395: LD_ADDR_EXP 1
1399: PUSH
1400: LD_STRING JMM
1402: PPUSH
1403: LD_INT 1
1405: PPUSH
1406: LD_STRING 10_
1408: PPUSH
1409: CALL 49933 0 3
1413: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1414: LD_ADDR_EXP 21
1418: PUSH
1419: LD_EXP 21
1423: PUSH
1424: LD_EXP 1
1428: ADD
1429: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 10_ ) ;
1430: LD_ADDR_EXP 10
1434: PUSH
1435: LD_STRING Gary
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_STRING 10_
1443: PPUSH
1444: CALL 49933 0 3
1448: ST_TO_ADDR
// if Gary then
1449: LD_EXP 10
1453: IFFALSE 1471
// JMMSquad = JMMSquad ^ Gary ;
1455: LD_ADDR_EXP 21
1459: PUSH
1460: LD_EXP 21
1464: PUSH
1465: LD_EXP 10
1469: ADD
1470: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 10_ ) ;
1471: LD_ADDR_EXP 5
1475: PUSH
1476: LD_STRING Cyrus
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_STRING 10_
1484: PPUSH
1485: CALL 49933 0 3
1489: ST_TO_ADDR
// if Cyrus then
1490: LD_EXP 5
1494: IFFALSE 1512
// JMMSquad = JMMSquad ^ Cyrus ;
1496: LD_ADDR_EXP 21
1500: PUSH
1501: LD_EXP 21
1505: PUSH
1506: LD_EXP 5
1510: ADD
1511: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 10_ ) ;
1512: LD_ADDR_EXP 4
1516: PUSH
1517: LD_STRING Bobby
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_STRING 10_
1525: PPUSH
1526: CALL 49933 0 3
1530: ST_TO_ADDR
// if Bobby then
1531: LD_EXP 4
1535: IFFALSE 1553
// JMMSquad = JMMSquad ^ Bobby ;
1537: LD_ADDR_EXP 21
1541: PUSH
1542: LD_EXP 21
1546: PUSH
1547: LD_EXP 4
1551: ADD
1552: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 10_ ) ;
1553: LD_ADDR_EXP 6
1557: PUSH
1558: LD_STRING Lisa
1560: PPUSH
1561: LD_INT 1
1563: PPUSH
1564: LD_STRING 10_
1566: PPUSH
1567: CALL 49933 0 3
1571: ST_TO_ADDR
// if Lisa then
1572: LD_EXP 6
1576: IFFALSE 1594
// JMMSquad = JMMSquad ^ Lisa ;
1578: LD_ADDR_EXP 21
1582: PUSH
1583: LD_EXP 21
1587: PUSH
1588: LD_EXP 6
1592: ADD
1593: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 10_ ) ;
1594: LD_ADDR_EXP 2
1598: PUSH
1599: LD_STRING Brown
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: LD_STRING 10_
1607: PPUSH
1608: CALL 49933 0 3
1612: ST_TO_ADDR
// if Brown then
1613: LD_EXP 2
1617: IFFALSE 1635
// JMMSquad = JMMSquad ^ Brown ;
1619: LD_ADDR_EXP 21
1623: PUSH
1624: LD_EXP 21
1628: PUSH
1629: LD_EXP 2
1633: ADD
1634: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 10_ ) ;
1635: LD_ADDR_EXP 3
1639: PUSH
1640: LD_STRING Donaldson
1642: PPUSH
1643: LD_INT 1
1645: PPUSH
1646: LD_STRING 10_
1648: PPUSH
1649: CALL 49933 0 3
1653: ST_TO_ADDR
// if Donaldson then
1654: LD_EXP 3
1658: IFFALSE 1676
// JMMSquad = JMMSquad ^ Donaldson ;
1660: LD_ADDR_EXP 21
1664: PUSH
1665: LD_EXP 21
1669: PUSH
1670: LD_EXP 3
1674: ADD
1675: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 10_ ) ;
1676: LD_ADDR_EXP 7
1680: PUSH
1681: LD_STRING Frank
1683: PPUSH
1684: LD_INT 1
1686: PPUSH
1687: LD_STRING 10_
1689: PPUSH
1690: CALL 49933 0 3
1694: ST_TO_ADDR
// if Frank then
1695: LD_EXP 7
1699: IFFALSE 1717
// JMMSquad = JMMSquad ^ Frank ;
1701: LD_ADDR_EXP 21
1705: PUSH
1706: LD_EXP 21
1710: PUSH
1711: LD_EXP 7
1715: ADD
1716: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 10_ ) ;
1717: LD_ADDR_EXP 9
1721: PUSH
1722: LD_STRING Houten
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: LD_STRING 10_
1730: PPUSH
1731: CALL 49933 0 3
1735: ST_TO_ADDR
// if Houten then
1736: LD_EXP 9
1740: IFFALSE 1758
// JMMSquad = JMMSquad ^ Houten ;
1742: LD_ADDR_EXP 21
1746: PUSH
1747: LD_EXP 21
1751: PUSH
1752: LD_EXP 9
1756: ADD
1757: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1758: LD_ADDR_EXP 22
1762: PUSH
1763: LD_STRING OthersIn10
1765: PPUSH
1766: CALL_OW 31
1770: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
1771: LD_ADDR_EXP 25
1775: PUSH
1776: LD_STRING Powell
1778: PPUSH
1779: LD_INT 0
1781: PPUSH
1782: LD_STRING 
1784: PPUSH
1785: CALL 49933 0 3
1789: ST_TO_ADDR
// for i in JMMSquad do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_EXP 21
1799: PUSH
1800: FOR_IN
1801: IFFALSE 2081
// begin if count < 3 then
1803: LD_VAR 0 6
1807: PUSH
1808: LD_INT 3
1810: LESS
1811: IFFALSE 1928
// begin vc_engine = 1 ;
1813: LD_ADDR_OWVAR 39
1817: PUSH
1818: LD_INT 1
1820: ST_TO_ADDR
// vc_control = 1 ;
1821: LD_ADDR_OWVAR 38
1825: PUSH
1826: LD_INT 1
1828: ST_TO_ADDR
// vc_weapon = 12 ;
1829: LD_ADDR_OWVAR 40
1833: PUSH
1834: LD_INT 12
1836: ST_TO_ADDR
// vc_chassis = 3 ;
1837: LD_ADDR_OWVAR 37
1841: PUSH
1842: LD_INT 3
1844: ST_TO_ADDR
// veh = CreateVehicle ;
1845: LD_ADDR_VAR 0 4
1849: PUSH
1850: CALL_OW 45
1854: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1855: LD_VAR 0 4
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1867: LD_VAR 0 4
1871: PPUSH
1872: LD_INT 2
1874: PPUSH
1875: LD_INT 0
1877: PPUSH
1878: CALL_OW 49
// if count mod 2 = 0 then
1882: LD_VAR 0 6
1886: PUSH
1887: LD_INT 2
1889: MOD
1890: PUSH
1891: LD_INT 0
1893: EQUAL
1894: IFFALSE 1913
// AddCargo ( veh , 1 , 100 ) else
1896: LD_VAR 0 4
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: LD_INT 100
1906: PPUSH
1907: CALL_OW 291
1911: GO 1928
// AddCargo ( veh , 3 , 100 ) end ;
1913: LD_VAR 0 4
1917: PPUSH
1918: LD_INT 3
1920: PPUSH
1921: LD_INT 100
1923: PPUSH
1924: CALL_OW 291
// if count >= 3 then
1928: LD_VAR 0 6
1932: PUSH
1933: LD_INT 3
1935: GREATEREQUAL
1936: IFFALSE 2051
// begin vc_engine = 1 ;
1938: LD_ADDR_OWVAR 39
1942: PUSH
1943: LD_INT 1
1945: ST_TO_ADDR
// vc_control = 1 ;
1946: LD_ADDR_OWVAR 38
1950: PUSH
1951: LD_INT 1
1953: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1954: LD_ADDR_OWVAR 40
1958: PUSH
1959: LD_INT 3
1961: PUSH
1962: LD_INT 4
1964: PUSH
1965: LD_INT 5
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_INT 1
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: CALL_OW 12
1983: ARRAY
1984: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
1985: LD_ADDR_OWVAR 37
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: LD_INT 3
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: LD_VAR 0 2
2004: PUSH
2005: LD_INT 2
2007: MOD
2008: PUSH
2009: LD_INT 1
2011: PLUS
2012: ARRAY
2013: ST_TO_ADDR
// veh = CreateVehicle ;
2014: LD_ADDR_VAR 0 4
2018: PUSH
2019: CALL_OW 45
2023: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2024: LD_VAR 0 4
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2036: LD_VAR 0 4
2040: PPUSH
2041: LD_INT 2
2043: PPUSH
2044: LD_INT 0
2046: PPUSH
2047: CALL_OW 49
// end ; count = count + 1 ;
2051: LD_ADDR_VAR 0 6
2055: PUSH
2056: LD_VAR 0 6
2060: PUSH
2061: LD_INT 1
2063: PLUS
2064: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2065: LD_VAR 0 2
2069: PPUSH
2070: LD_VAR 0 4
2074: PPUSH
2075: CALL_OW 52
// end ;
2079: GO 1800
2081: POP
2082: POP
// for i := 1 to others10 do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 1
2091: DEC
2092: ST_TO_ADDR
2093: LD_EXP 22
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2330
// begin if i < [ 5 , 4 , 3 , 3 ] [ Difficulty ] then
2101: LD_VAR 0 2
2105: PUSH
2106: LD_INT 5
2108: PUSH
2109: LD_INT 4
2111: PUSH
2112: LD_INT 3
2114: PUSH
2115: LD_INT 3
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: PUSH
2124: LD_OWVAR 67
2128: ARRAY
2129: LESS
2130: IFFALSE 2283
// begin vc_engine = 1 ;
2132: LD_ADDR_OWVAR 39
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// vc_control = 1 ;
2140: LD_ADDR_OWVAR 38
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2148: LD_ADDR_OWVAR 40
2152: PUSH
2153: LD_INT 3
2155: PUSH
2156: LD_INT 4
2158: PUSH
2159: LD_INT 5
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_INT 3
2172: PPUSH
2173: CALL_OW 12
2177: ARRAY
2178: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
2179: LD_ADDR_OWVAR 37
2183: PUSH
2184: LD_INT 2
2186: PUSH
2187: LD_INT 3
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_VAR 0 2
2198: PUSH
2199: LD_INT 2
2201: MOD
2202: PUSH
2203: LD_INT 1
2205: PLUS
2206: ARRAY
2207: ST_TO_ADDR
// veh = CreateVehicle ;
2208: LD_ADDR_VAR 0 4
2212: PUSH
2213: CALL_OW 45
2217: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2218: LD_VAR 0 4
2222: PPUSH
2223: LD_INT 1
2225: PPUSH
2226: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2230: LD_VAR 0 4
2234: PPUSH
2235: LD_INT 2
2237: PPUSH
2238: LD_INT 0
2240: PPUSH
2241: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2245: LD_ADDR_EXP 29
2249: PUSH
2250: LD_EXP 29
2254: PUSH
2255: LD_VAR 0 4
2259: ADD
2260: ST_TO_ADDR
// PlaceHumanInUnit ( others10 [ i ] , veh ) ;
2261: LD_EXP 22
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PPUSH
2272: LD_VAR 0 4
2276: PPUSH
2277: CALL_OW 52
// end else
2281: GO 2328
// begin PlaceUnitXYR ( others10 [ i ] , 106 , 33 , 6 , false ) ;
2283: LD_EXP 22
2287: PUSH
2288: LD_VAR 0 2
2292: ARRAY
2293: PPUSH
2294: LD_INT 106
2296: PPUSH
2297: LD_INT 33
2299: PPUSH
2300: LD_INT 6
2302: PPUSH
2303: LD_INT 0
2305: PPUSH
2306: CALL_OW 50
// SetSide ( others10 [ i ] , 4 ) ;
2310: LD_EXP 22
2314: PUSH
2315: LD_VAR 0 2
2319: ARRAY
2320: PPUSH
2321: LD_INT 4
2323: PPUSH
2324: CALL_OW 235
// end ; end ;
2328: GO 2098
2330: POP
2331: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2332: LD_INT 22
2334: PUSH
2335: LD_INT 1
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PUSH
2342: LD_INT 21
2344: PUSH
2345: LD_INT 1
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PPUSH
2361: LD_INT 1
2363: PPUSH
2364: CALL_OW 336
// end ;
2368: LD_VAR 0 1
2372: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2373: LD_INT 0
2375: PPUSH
2376: PPUSH
2377: PPUSH
2378: PPUSH
2379: PPUSH
// uc_side = 1 ;
2380: LD_ADDR_OWVAR 20
2384: PUSH
2385: LD_INT 1
2387: ST_TO_ADDR
// uc_nation = 1 ;
2388: LD_ADDR_OWVAR 21
2392: PUSH
2393: LD_INT 1
2395: ST_TO_ADDR
// for i := 1 to 10 do
2396: LD_ADDR_VAR 0 2
2400: PUSH
2401: DOUBLE
2402: LD_INT 1
2404: DEC
2405: ST_TO_ADDR
2406: LD_INT 10
2408: PUSH
2409: FOR_TO
2410: IFFALSE 2592
// begin vc_engine = 1 ;
2412: LD_ADDR_OWVAR 39
2416: PUSH
2417: LD_INT 1
2419: ST_TO_ADDR
// vc_control = 1 ;
2420: LD_ADDR_OWVAR 38
2424: PUSH
2425: LD_INT 1
2427: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2428: LD_ADDR_OWVAR 40
2432: PUSH
2433: LD_INT 3
2435: PUSH
2436: LD_INT 4
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: LD_INT 12
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 4
2456: PPUSH
2457: CALL_OW 12
2461: ARRAY
2462: ST_TO_ADDR
// vc_chassis = 3 ;
2463: LD_ADDR_OWVAR 37
2467: PUSH
2468: LD_INT 3
2470: ST_TO_ADDR
// veh = CreateVehicle ;
2471: LD_ADDR_VAR 0 3
2475: PUSH
2476: CALL_OW 45
2480: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2481: LD_VAR 0 3
2485: PPUSH
2486: LD_INT 1
2488: PPUSH
2489: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2493: LD_VAR 0 3
2497: PPUSH
2498: LD_INT 2
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2508: LD_ADDR_EXP 29
2512: PUSH
2513: LD_EXP 29
2517: PUSH
2518: LD_VAR 0 3
2522: ADD
2523: ST_TO_ADDR
// if vc_weapon = 12 then
2524: LD_OWVAR 40
2528: PUSH
2529: LD_INT 12
2531: EQUAL
2532: IFFALSE 2590
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2534: LD_ADDR_VAR 0 4
2538: PUSH
2539: LD_INT 5
2541: PPUSH
2542: LD_INT 10
2544: PPUSH
2545: CALL_OW 12
2549: PUSH
2550: LD_INT 10
2552: MUL
2553: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2554: LD_VAR 0 3
2558: PPUSH
2559: LD_INT 1
2561: PUSH
2562: LD_INT 3
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_INT 2
2574: PPUSH
2575: CALL_OW 12
2579: ARRAY
2580: PPUSH
2581: LD_VAR 0 4
2585: PPUSH
2586: CALL_OW 291
// end ; end ;
2590: GO 2409
2592: POP
2593: POP
// end ;
2594: LD_VAR 0 1
2598: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2599: LD_INT 0
2601: PPUSH
2602: PPUSH
2603: PPUSH
// uc_side = 4 ;
2604: LD_ADDR_OWVAR 20
2608: PUSH
2609: LD_INT 4
2611: ST_TO_ADDR
// uc_nation = 1 ;
2612: LD_ADDR_OWVAR 21
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , debugMode ) then
2620: LD_STRING 08_SikorskiStatus
2622: PPUSH
2623: LD_EXP 68
2627: PPUSH
2628: CALL_OW 30
2632: IFFALSE 2653
// Truman := PrepareUnit ( Truman , false ,  ) ;
2634: LD_ADDR_EXP 20
2638: PUSH
2639: LD_STRING Truman
2641: PPUSH
2642: LD_INT 0
2644: PPUSH
2645: LD_STRING 
2647: PPUSH
2648: CALL 49933 0 3
2652: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ,  ) ;
2653: LD_ADDR_EXP 11
2657: PUSH
2658: LD_STRING Simms
2660: PPUSH
2661: LD_INT 0
2663: PPUSH
2664: LD_STRING 
2666: PPUSH
2667: CALL 49933 0 3
2671: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 08_ ) ;
2672: LD_ADDR_EXP 12
2676: PUSH
2677: LD_STRING Denis
2679: PPUSH
2680: LD_INT 1
2682: PPUSH
2683: LD_STRING 08_
2685: PPUSH
2686: CALL 49933 0 3
2690: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 08_ ) ;
2691: LD_ADDR_EXP 13
2695: PUSH
2696: LD_STRING Joan
2698: PPUSH
2699: LD_INT 1
2701: PPUSH
2702: LD_STRING 08_
2704: PPUSH
2705: CALL 49933 0 3
2709: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2710: LD_STRING 08_Khatam
2712: PPUSH
2713: CALL_OW 28
2717: IFFALSE 2740
// Khatam = PrepareUnit ( Khatam , true , 08_ ) else
2719: LD_ADDR_EXP 14
2723: PUSH
2724: LD_STRING Khatam
2726: PPUSH
2727: LD_INT 1
2729: PPUSH
2730: LD_STRING 08_
2732: PPUSH
2733: CALL 49933 0 3
2737: ST_TO_ADDR
2738: GO 2768
// if TestCharacters ( 03_Khatam ) then
2740: LD_STRING 03_Khatam
2742: PPUSH
2743: CALL_OW 28
2747: IFFALSE 2768
// Khatam = PrepareUnit ( Khatam , true , 03_ ) ;
2749: LD_ADDR_EXP 14
2753: PUSH
2754: LD_STRING Khatam
2756: PPUSH
2757: LD_INT 1
2759: PPUSH
2760: LD_STRING 03_
2762: PPUSH
2763: CALL 49933 0 3
2767: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 08_ ) ;
2768: LD_ADDR_EXP 15
2772: PUSH
2773: LD_STRING Gladstone
2775: PPUSH
2776: LD_INT 1
2778: PPUSH
2779: LD_STRING 08_
2781: PPUSH
2782: CALL 49933 0 3
2786: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ,  ) ;
2787: LD_ADDR_EXP 17
2791: PUSH
2792: LD_STRING DeltaDoctor
2794: PPUSH
2795: LD_INT 1
2797: PPUSH
2798: LD_STRING 
2800: PPUSH
2801: CALL 49933 0 3
2805: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 08_ ) ;
2806: LD_ADDR_EXP 7
2810: PUSH
2811: LD_STRING Frank
2813: PPUSH
2814: LD_INT 1
2816: PPUSH
2817: LD_STRING 08_
2819: PPUSH
2820: CALL 49933 0 3
2824: ST_TO_ADDR
// if Frank then
2825: LD_EXP 7
2829: IFFALSE 2852
// Kikuchi = PrepareUnit ( Yamoko , false ,  ) else
2831: LD_ADDR_EXP 8
2835: PUSH
2836: LD_STRING Yamoko
2838: PPUSH
2839: LD_INT 0
2841: PPUSH
2842: LD_STRING 
2844: PPUSH
2845: CALL 49933 0 3
2849: ST_TO_ADDR
2850: GO 2871
// Kikuchi = PrepareUnit ( Kikuchi , true , 08_ ) ;
2852: LD_ADDR_EXP 8
2856: PUSH
2857: LD_STRING Kikuchi
2859: PPUSH
2860: LD_INT 1
2862: PPUSH
2863: LD_STRING 08_
2865: PPUSH
2866: CALL 49933 0 3
2870: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2871: LD_ADDR_EXP 23
2875: PUSH
2876: LD_STRING 09_others
2878: PPUSH
2879: CALL_OW 31
2883: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2884: LD_ADDR_EXP 24
2888: PUSH
2889: LD_STRING 09_apes
2891: PPUSH
2892: CALL_OW 31
2896: ST_TO_ADDR
// if Truman then
2897: LD_EXP 20
2901: IFFALSE 2918
// PlaceUnitArea ( Truman , CathyTeamSpawn , false ) ;
2903: LD_EXP 20
2907: PPUSH
2908: LD_INT 1
2910: PPUSH
2911: LD_INT 0
2913: PPUSH
2914: CALL_OW 49
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2918: LD_EXP 11
2922: PPUSH
2923: LD_INT 1
2925: PPUSH
2926: LD_INT 0
2928: PPUSH
2929: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2933: LD_EXP 12
2937: PPUSH
2938: LD_INT 1
2940: PPUSH
2941: LD_INT 0
2943: PPUSH
2944: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2948: LD_EXP 13
2952: PPUSH
2953: LD_INT 1
2955: PPUSH
2956: LD_INT 0
2958: PPUSH
2959: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2963: LD_EXP 14
2967: PPUSH
2968: LD_INT 1
2970: PPUSH
2971: LD_INT 0
2973: PPUSH
2974: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2978: LD_EXP 15
2982: PPUSH
2983: LD_INT 1
2985: PPUSH
2986: LD_INT 0
2988: PPUSH
2989: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2993: LD_EXP 17
2997: PPUSH
2998: LD_INT 1
3000: PPUSH
3001: LD_INT 0
3003: PPUSH
3004: CALL_OW 49
// if Kikuchi then
3008: LD_EXP 8
3012: IFFALSE 3029
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
3014: LD_EXP 8
3018: PPUSH
3019: LD_INT 1
3021: PPUSH
3022: LD_INT 0
3024: PPUSH
3025: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
3029: LD_EXP 11
3033: PUSH
3034: LD_EXP 14
3038: PUSH
3039: LD_EXP 12
3043: PUSH
3044: LD_EXP 15
3048: PUSH
3049: LD_EXP 17
3053: PUSH
3054: LD_EXP 13
3058: PUSH
3059: EMPTY
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: PPUSH
3067: LD_INT 4
3069: PPUSH
3070: CALL_OW 336
// if others09 > 2 then
3074: LD_EXP 23
3078: PUSH
3079: LD_INT 2
3081: GREATER
3082: IFFALSE 3163
// begin for i := 1 to 3 do
3084: LD_ADDR_VAR 0 2
3088: PUSH
3089: DOUBLE
3090: LD_INT 1
3092: DEC
3093: ST_TO_ADDR
3094: LD_INT 3
3096: PUSH
3097: FOR_TO
3098: IFFALSE 3159
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
3100: LD_EXP 23
3104: PUSH
3105: LD_VAR 0 2
3109: ARRAY
3110: PPUSH
3111: LD_INT 1
3113: PPUSH
3114: LD_INT 0
3116: PPUSH
3117: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
3121: LD_ADDR_EXP 23
3125: PUSH
3126: LD_EXP 23
3130: PPUSH
3131: LD_INT 1
3133: PPUSH
3134: CALL_OW 3
3138: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
3139: LD_EXP 23
3143: PUSH
3144: LD_VAR 0 2
3148: ARRAY
3149: PPUSH
3150: LD_INT 2
3152: PPUSH
3153: CALL_OW 336
// end ;
3157: GO 3097
3159: POP
3160: POP
// end else
3161: GO 3223
// begin for i in others09 do
3163: LD_ADDR_VAR 0 2
3167: PUSH
3168: LD_EXP 23
3172: PUSH
3173: FOR_IN
3174: IFFALSE 3221
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3176: LD_VAR 0 2
3180: PPUSH
3181: LD_INT 1
3183: PPUSH
3184: LD_INT 0
3186: PPUSH
3187: CALL_OW 49
// others09 = others09 diff i ;
3191: LD_ADDR_EXP 23
3195: PUSH
3196: LD_EXP 23
3200: PUSH
3201: LD_VAR 0 2
3205: DIFF
3206: ST_TO_ADDR
// SetClass ( i , 2 ) ;
3207: LD_VAR 0 2
3211: PPUSH
3212: LD_INT 2
3214: PPUSH
3215: CALL_OW 336
// end ;
3219: GO 3173
3221: POP
3222: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
3223: LD_INT 22
3225: PUSH
3226: LD_INT 4
3228: PUSH
3229: EMPTY
3230: LIST
3231: LIST
3232: PUSH
3233: LD_INT 25
3235: PUSH
3236: LD_INT 2
3238: PUSH
3239: EMPTY
3240: LIST
3241: LIST
3242: PUSH
3243: EMPTY
3244: LIST
3245: LIST
3246: PPUSH
3247: CALL_OW 69
3251: PUSH
3252: LD_INT 0
3254: EQUAL
3255: IFFALSE 3387
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3257: LD_ADDR_VAR 0 3
3261: PUSH
3262: LD_INT 22
3264: PUSH
3265: LD_INT 4
3267: PUSH
3268: EMPTY
3269: LIST
3270: LIST
3271: PUSH
3272: LD_INT 25
3274: PUSH
3275: LD_INT 2
3277: PUSH
3278: EMPTY
3279: LIST
3280: LIST
3281: PUSH
3282: EMPTY
3283: LIST
3284: LIST
3285: PPUSH
3286: CALL_OW 69
3290: PUSH
3291: LD_EXP 11
3295: PUSH
3296: LD_EXP 14
3300: PUSH
3301: LD_EXP 12
3305: PUSH
3306: LD_EXP 15
3310: PUSH
3311: LD_EXP 17
3315: PUSH
3316: LD_EXP 13
3320: PUSH
3321: EMPTY
3322: LIST
3323: LIST
3324: LIST
3325: LIST
3326: LIST
3327: LIST
3328: DIFF
3329: ST_TO_ADDR
// if not tmp then
3330: LD_VAR 0 3
3334: NOT
3335: IFFALSE 3371
// begin if Denis then
3337: LD_EXP 12
3341: IFFALSE 3357
// SetClass ( Denis , 2 ) else
3343: LD_EXP 12
3347: PPUSH
3348: LD_INT 2
3350: PPUSH
3351: CALL_OW 336
3355: GO 3369
// SetClass ( DeltaDoctor , 2 ) ;
3357: LD_EXP 17
3361: PPUSH
3362: LD_INT 2
3364: PPUSH
3365: CALL_OW 336
// end else
3369: GO 3387
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3371: LD_VAR 0 3
3375: PUSH
3376: LD_INT 1
3378: ARRAY
3379: PPUSH
3380: LD_INT 2
3382: PPUSH
3383: CALL_OW 336
// end ; end ; for i in ape09 do
3387: LD_ADDR_VAR 0 2
3391: PUSH
3392: LD_EXP 24
3396: PUSH
3397: FOR_IN
3398: IFFALSE 3417
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3400: LD_VAR 0 2
3404: PPUSH
3405: LD_INT 1
3407: PPUSH
3408: LD_INT 0
3410: PPUSH
3411: CALL_OW 49
3415: GO 3397
3417: POP
3418: POP
// uc_side = 4 ;
3419: LD_ADDR_OWVAR 20
3423: PUSH
3424: LD_INT 4
3426: ST_TO_ADDR
// hc_class := 1 ;
3427: LD_ADDR_OWVAR 28
3431: PUSH
3432: LD_INT 1
3434: ST_TO_ADDR
// hc_sex := sex_female ;
3435: LD_ADDR_OWVAR 27
3439: PUSH
3440: LD_INT 2
3442: ST_TO_ADDR
// hc_gallery :=  ;
3443: LD_ADDR_OWVAR 33
3447: PUSH
3448: LD_STRING 
3450: ST_TO_ADDR
// hc_name :=  ;
3451: LD_ADDR_OWVAR 26
3455: PUSH
3456: LD_STRING 
3458: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3459: LD_ADDR_OWVAR 31
3463: PUSH
3464: LD_INT 1
3466: PUSH
3467: LD_INT 7
3469: PUSH
3470: LD_INT 1
3472: PUSH
3473: LD_INT 0
3475: PUSH
3476: EMPTY
3477: LIST
3478: LIST
3479: LIST
3480: LIST
3481: ST_TO_ADDR
// AmScout = CreateHuman ;
3482: LD_ADDR_EXP 18
3486: PUSH
3487: CALL_OW 44
3491: ST_TO_ADDR
// end ;
3492: LD_VAR 0 1
3496: RET
// export function PrepareCornell ; begin
3497: LD_INT 0
3499: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3500: LD_INT 4
3502: PPUSH
3503: LD_INT 4
3505: PPUSH
3506: CALL_OW 343
// uc_side = 4 ;
3510: LD_ADDR_OWVAR 20
3514: PUSH
3515: LD_INT 4
3517: ST_TO_ADDR
// uc_nation = 1 ;
3518: LD_ADDR_OWVAR 21
3522: PUSH
3523: LD_INT 1
3525: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornel , true , 03_ ) ;
3526: LD_ADDR_EXP 19
3530: PUSH
3531: LD_STRING Cornel
3533: PPUSH
3534: LD_INT 1
3536: PPUSH
3537: LD_STRING 03_
3539: PPUSH
3540: CALL 49933 0 3
3544: ST_TO_ADDR
// if not Cornell then
3545: LD_EXP 19
3549: NOT
3550: IFFALSE 3554
// exit ;
3552: GO 3662
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3554: LD_EXP 19
3558: PPUSH
3559: LD_INT 8
3561: PPUSH
3562: LD_INT 0
3564: PPUSH
3565: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3569: LD_EXP 19
3573: PPUSH
3574: LD_INT 350
3576: PPUSH
3577: CALL_OW 234
// if IsInUnit ( JMM ) then
3581: LD_EXP 1
3585: PPUSH
3586: CALL_OW 310
3590: IFFALSE 3633
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3592: LD_EXP 19
3596: PPUSH
3597: LD_EXP 1
3601: PPUSH
3602: CALL_OW 310
3606: PPUSH
3607: CALL_OW 250
3611: PPUSH
3612: LD_EXP 1
3616: PPUSH
3617: CALL_OW 310
3621: PPUSH
3622: CALL_OW 251
3626: PPUSH
3627: CALL_OW 111
3631: GO 3662
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3633: LD_EXP 19
3637: PPUSH
3638: LD_EXP 1
3642: PPUSH
3643: CALL_OW 250
3647: PPUSH
3648: LD_EXP 1
3652: PPUSH
3653: CALL_OW 251
3657: PPUSH
3658: CALL_OW 111
// end ;
3662: LD_VAR 0 1
3666: RET
// every 0 0$1 trigger IsAt ( Truman , 17 , 31 ) do
3667: LD_EXP 20
3671: PPUSH
3672: LD_INT 17
3674: PPUSH
3675: LD_INT 31
3677: PPUSH
3678: CALL_OW 307
3682: IFFALSE 3696
3684: GO 3686
3686: DISABLE
// RemoveUnit ( Truman ) ;
3687: LD_EXP 20
3691: PPUSH
3692: CALL_OW 64
3696: END
// every 0 0$2 trigger joinEpsilon = 1 and IsOk ( Truman ) and not HasTask ( Truman ) do
3697: LD_EXP 30
3701: PUSH
3702: LD_INT 1
3704: EQUAL
3705: PUSH
3706: LD_EXP 20
3710: PPUSH
3711: CALL_OW 302
3715: AND
3716: PUSH
3717: LD_EXP 20
3721: PPUSH
3722: CALL_OW 314
3726: NOT
3727: AND
3728: IFFALSE 3749
3730: GO 3732
3732: DISABLE
// begin enable ;
3733: ENABLE
// ComMoveXY ( Truman , 17 , 31 ) ;
3734: LD_EXP 20
3738: PPUSH
3739: LD_INT 17
3741: PPUSH
3742: LD_INT 31
3744: PPUSH
3745: CALL_OW 111
// end ; end_of_file
3749: END
// export function PrepareRussians ; var i , un ; begin
3750: LD_INT 0
3752: PPUSH
3753: PPUSH
3754: PPUSH
// uc_side = 3 ;
3755: LD_ADDR_OWVAR 20
3759: PUSH
3760: LD_INT 3
3762: ST_TO_ADDR
// uc_nation = 3 ;
3763: LD_ADDR_OWVAR 21
3767: PUSH
3768: LD_INT 3
3770: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ,  ) ;
3771: LD_ADDR_EXP 26
3775: PUSH
3776: LD_STRING Tsaritsyn
3778: PPUSH
3779: LD_INT 0
3781: PPUSH
3782: LD_STRING 
3784: PPUSH
3785: CALL 49933 0 3
3789: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3790: LD_EXP 26
3794: PPUSH
3795: LD_INT 3
3797: PPUSH
3798: LD_INT 0
3800: PPUSH
3801: CALL_OW 49
// for i = 1 to 14 do
3805: LD_ADDR_VAR 0 2
3809: PUSH
3810: DOUBLE
3811: LD_INT 1
3813: DEC
3814: ST_TO_ADDR
3815: LD_INT 14
3817: PUSH
3818: FOR_TO
3819: IFFALSE 3905
// begin uc_side = 3 ;
3821: LD_ADDR_OWVAR 20
3825: PUSH
3826: LD_INT 3
3828: ST_TO_ADDR
// uc_nation = 3 ;
3829: LD_ADDR_OWVAR 21
3833: PUSH
3834: LD_INT 3
3836: ST_TO_ADDR
// hc_gallery =  ;
3837: LD_ADDR_OWVAR 33
3841: PUSH
3842: LD_STRING 
3844: ST_TO_ADDR
// hc_name =  ;
3845: LD_ADDR_OWVAR 26
3849: PUSH
3850: LD_STRING 
3852: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3853: LD_INT 0
3855: PPUSH
3856: LD_INT 1
3858: PPUSH
3859: LD_EXP 37
3863: PPUSH
3864: LD_EXP 38
3868: PPUSH
3869: CALL_OW 12
3873: PPUSH
3874: CALL_OW 380
// un = CreateHuman ;
3878: LD_ADDR_VAR 0 3
3882: PUSH
3883: CALL_OW 44
3887: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3888: LD_VAR 0 3
3892: PPUSH
3893: LD_INT 3
3895: PPUSH
3896: LD_INT 0
3898: PPUSH
3899: CALL_OW 49
// end ;
3903: GO 3818
3905: POP
3906: POP
// for i = 1 to 6 do
3907: LD_ADDR_VAR 0 2
3911: PUSH
3912: DOUBLE
3913: LD_INT 1
3915: DEC
3916: ST_TO_ADDR
3917: LD_INT 6
3919: PUSH
3920: FOR_TO
3921: IFFALSE 4007
// begin uc_side = 3 ;
3923: LD_ADDR_OWVAR 20
3927: PUSH
3928: LD_INT 3
3930: ST_TO_ADDR
// uc_nation = 3 ;
3931: LD_ADDR_OWVAR 21
3935: PUSH
3936: LD_INT 3
3938: ST_TO_ADDR
// hc_gallery =  ;
3939: LD_ADDR_OWVAR 33
3943: PUSH
3944: LD_STRING 
3946: ST_TO_ADDR
// hc_name =  ;
3947: LD_ADDR_OWVAR 26
3951: PUSH
3952: LD_STRING 
3954: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3955: LD_INT 0
3957: PPUSH
3958: LD_INT 2
3960: PPUSH
3961: LD_EXP 37
3965: PPUSH
3966: LD_EXP 38
3970: PPUSH
3971: CALL_OW 12
3975: PPUSH
3976: CALL_OW 380
// un = CreateHuman ;
3980: LD_ADDR_VAR 0 3
3984: PUSH
3985: CALL_OW 44
3989: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3990: LD_VAR 0 3
3994: PPUSH
3995: LD_INT 3
3997: PPUSH
3998: LD_INT 0
4000: PPUSH
4001: CALL_OW 49
// end ;
4005: GO 3920
4007: POP
4008: POP
// for i = 1 to 6 do
4009: LD_ADDR_VAR 0 2
4013: PUSH
4014: DOUBLE
4015: LD_INT 1
4017: DEC
4018: ST_TO_ADDR
4019: LD_INT 6
4021: PUSH
4022: FOR_TO
4023: IFFALSE 4109
// begin uc_side = 3 ;
4025: LD_ADDR_OWVAR 20
4029: PUSH
4030: LD_INT 3
4032: ST_TO_ADDR
// uc_nation = 3 ;
4033: LD_ADDR_OWVAR 21
4037: PUSH
4038: LD_INT 3
4040: ST_TO_ADDR
// hc_gallery =  ;
4041: LD_ADDR_OWVAR 33
4045: PUSH
4046: LD_STRING 
4048: ST_TO_ADDR
// hc_name =  ;
4049: LD_ADDR_OWVAR 26
4053: PUSH
4054: LD_STRING 
4056: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4057: LD_INT 0
4059: PPUSH
4060: LD_INT 3
4062: PPUSH
4063: LD_EXP 37
4067: PPUSH
4068: LD_EXP 38
4072: PPUSH
4073: CALL_OW 12
4077: PPUSH
4078: CALL_OW 380
// un = CreateHuman ;
4082: LD_ADDR_VAR 0 3
4086: PUSH
4087: CALL_OW 44
4091: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4092: LD_VAR 0 3
4096: PPUSH
4097: LD_INT 3
4099: PPUSH
4100: LD_INT 0
4102: PPUSH
4103: CALL_OW 49
// end ;
4107: GO 4022
4109: POP
4110: POP
// for i = 1 to 4 do
4111: LD_ADDR_VAR 0 2
4115: PUSH
4116: DOUBLE
4117: LD_INT 1
4119: DEC
4120: ST_TO_ADDR
4121: LD_INT 4
4123: PUSH
4124: FOR_TO
4125: IFFALSE 4211
// begin uc_side = 3 ;
4127: LD_ADDR_OWVAR 20
4131: PUSH
4132: LD_INT 3
4134: ST_TO_ADDR
// uc_nation = 3 ;
4135: LD_ADDR_OWVAR 21
4139: PUSH
4140: LD_INT 3
4142: ST_TO_ADDR
// hc_gallery =  ;
4143: LD_ADDR_OWVAR 33
4147: PUSH
4148: LD_STRING 
4150: ST_TO_ADDR
// hc_name =  ;
4151: LD_ADDR_OWVAR 26
4155: PUSH
4156: LD_STRING 
4158: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4159: LD_INT 0
4161: PPUSH
4162: LD_INT 4
4164: PPUSH
4165: LD_EXP 37
4169: PPUSH
4170: LD_EXP 38
4174: PPUSH
4175: CALL_OW 12
4179: PPUSH
4180: CALL_OW 380
// un = CreateHuman ;
4184: LD_ADDR_VAR 0 3
4188: PUSH
4189: CALL_OW 44
4193: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4194: LD_VAR 0 3
4198: PPUSH
4199: LD_INT 3
4201: PPUSH
4202: LD_INT 0
4204: PPUSH
4205: CALL_OW 49
// end ;
4209: GO 4124
4211: POP
4212: POP
// end ; end_of_file
4213: LD_VAR 0 1
4217: RET
// export function PrepareArabianCommander ; begin
4218: LD_INT 0
4220: PPUSH
// uc_side = 2 ;
4221: LD_ADDR_OWVAR 20
4225: PUSH
4226: LD_INT 2
4228: ST_TO_ADDR
// uc_nation = 2 ;
4229: LD_ADDR_OWVAR 21
4233: PUSH
4234: LD_INT 2
4236: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
4237: LD_ADDR_EXP 27
4241: PUSH
4242: LD_STRING Dietrich
4244: PPUSH
4245: CALL_OW 25
4249: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
4250: LD_EXP 27
4254: PPUSH
4255: LD_INT 4
4257: PPUSH
4258: LD_INT 0
4260: PPUSH
4261: CALL_OW 49
// end ;
4265: LD_VAR 0 1
4269: RET
// export function PrepareArabian ; var i , un , veh ; begin
4270: LD_INT 0
4272: PPUSH
4273: PPUSH
4274: PPUSH
4275: PPUSH
// uc_side := 2 ;
4276: LD_ADDR_OWVAR 20
4280: PUSH
4281: LD_INT 2
4283: ST_TO_ADDR
// uc_nation := 2 ;
4284: LD_ADDR_OWVAR 21
4288: PUSH
4289: LD_INT 2
4291: ST_TO_ADDR
// if not Ahmed then
4292: LD_EXP 28
4296: NOT
4297: IFFALSE 4365
// begin InitHc ;
4299: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
4303: LD_INT 1
4305: PPUSH
4306: LD_INT 1
4308: PPUSH
4309: LD_EXP 37
4313: PPUSH
4314: LD_EXP 38
4318: PUSH
4319: LD_INT 1
4321: PLUS
4322: PPUSH
4323: CALL_OW 12
4327: PPUSH
4328: CALL_OW 380
// hc_name := Ahmed Abbasid ;
4332: LD_ADDR_OWVAR 26
4336: PUSH
4337: LD_STRING Ahmed Abbasid
4339: ST_TO_ADDR
// Ahmed := CreateHuman ;
4340: LD_ADDR_EXP 28
4344: PUSH
4345: CALL_OW 44
4349: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
4350: LD_EXP 28
4354: PPUSH
4355: LD_INT 4
4357: PPUSH
4358: LD_INT 0
4360: PPUSH
4361: CALL_OW 49
// end ; for i = 1 to 4 do
4365: LD_ADDR_VAR 0 2
4369: PUSH
4370: DOUBLE
4371: LD_INT 1
4373: DEC
4374: ST_TO_ADDR
4375: LD_INT 4
4377: PUSH
4378: FOR_TO
4379: IFFALSE 4465
// begin uc_side = 2 ;
4381: LD_ADDR_OWVAR 20
4385: PUSH
4386: LD_INT 2
4388: ST_TO_ADDR
// uc_nation = 2 ;
4389: LD_ADDR_OWVAR 21
4393: PUSH
4394: LD_INT 2
4396: ST_TO_ADDR
// hc_gallery =  ;
4397: LD_ADDR_OWVAR 33
4401: PUSH
4402: LD_STRING 
4404: ST_TO_ADDR
// hc_name =  ;
4405: LD_ADDR_OWVAR 26
4409: PUSH
4410: LD_STRING 
4412: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4413: LD_INT 0
4415: PPUSH
4416: LD_INT 2
4418: PPUSH
4419: LD_EXP 37
4423: PPUSH
4424: LD_EXP 38
4428: PPUSH
4429: CALL_OW 12
4433: PPUSH
4434: CALL_OW 380
// un = CreateHuman ;
4438: LD_ADDR_VAR 0 3
4442: PUSH
4443: CALL_OW 44
4447: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4448: LD_VAR 0 3
4452: PPUSH
4453: LD_INT 4
4455: PPUSH
4456: LD_INT 0
4458: PPUSH
4459: CALL_OW 49
// end ;
4463: GO 4378
4465: POP
4466: POP
// for i = 1 to 5 do
4467: LD_ADDR_VAR 0 2
4471: PUSH
4472: DOUBLE
4473: LD_INT 1
4475: DEC
4476: ST_TO_ADDR
4477: LD_INT 5
4479: PUSH
4480: FOR_TO
4481: IFFALSE 4567
// begin uc_side = 2 ;
4483: LD_ADDR_OWVAR 20
4487: PUSH
4488: LD_INT 2
4490: ST_TO_ADDR
// uc_nation = 2 ;
4491: LD_ADDR_OWVAR 21
4495: PUSH
4496: LD_INT 2
4498: ST_TO_ADDR
// hc_gallery =  ;
4499: LD_ADDR_OWVAR 33
4503: PUSH
4504: LD_STRING 
4506: ST_TO_ADDR
// hc_name =  ;
4507: LD_ADDR_OWVAR 26
4511: PUSH
4512: LD_STRING 
4514: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4515: LD_INT 0
4517: PPUSH
4518: LD_INT 1
4520: PPUSH
4521: LD_EXP 37
4525: PPUSH
4526: LD_EXP 38
4530: PPUSH
4531: CALL_OW 12
4535: PPUSH
4536: CALL_OW 380
// un = CreateHuman ;
4540: LD_ADDR_VAR 0 3
4544: PUSH
4545: CALL_OW 44
4549: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4550: LD_VAR 0 3
4554: PPUSH
4555: LD_INT 4
4557: PPUSH
4558: LD_INT 0
4560: PPUSH
4561: CALL_OW 49
// end ;
4565: GO 4480
4567: POP
4568: POP
// for i = 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
4569: LD_ADDR_VAR 0 2
4573: PUSH
4574: DOUBLE
4575: LD_INT 1
4577: DEC
4578: ST_TO_ADDR
4579: LD_INT 3
4581: PUSH
4582: LD_INT 4
4584: PUSH
4585: LD_INT 4
4587: PUSH
4588: LD_INT 4
4590: PUSH
4591: EMPTY
4592: LIST
4593: LIST
4594: LIST
4595: LIST
4596: PUSH
4597: LD_OWVAR 67
4601: ARRAY
4602: PUSH
4603: FOR_TO
4604: IFFALSE 4690
// begin uc_side = 2 ;
4606: LD_ADDR_OWVAR 20
4610: PUSH
4611: LD_INT 2
4613: ST_TO_ADDR
// uc_nation = 2 ;
4614: LD_ADDR_OWVAR 21
4618: PUSH
4619: LD_INT 2
4621: ST_TO_ADDR
// hc_gallery =  ;
4622: LD_ADDR_OWVAR 33
4626: PUSH
4627: LD_STRING 
4629: ST_TO_ADDR
// hc_name =  ;
4630: LD_ADDR_OWVAR 26
4634: PUSH
4635: LD_STRING 
4637: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4638: LD_INT 0
4640: PPUSH
4641: LD_INT 4
4643: PPUSH
4644: LD_EXP 37
4648: PPUSH
4649: LD_EXP 38
4653: PPUSH
4654: CALL_OW 12
4658: PPUSH
4659: CALL_OW 380
// un = CreateHuman ;
4663: LD_ADDR_VAR 0 3
4667: PUSH
4668: CALL_OW 44
4672: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4673: LD_VAR 0 3
4677: PPUSH
4678: LD_INT 4
4680: PPUSH
4681: LD_INT 0
4683: PPUSH
4684: CALL_OW 49
// end ;
4688: GO 4603
4690: POP
4691: POP
// for i = 1 to 2 do
4692: LD_ADDR_VAR 0 2
4696: PUSH
4697: DOUBLE
4698: LD_INT 1
4700: DEC
4701: ST_TO_ADDR
4702: LD_INT 2
4704: PUSH
4705: FOR_TO
4706: IFFALSE 4836
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4708: LD_ADDR_VAR 0 4
4712: PUSH
4713: LD_INT 22
4715: PUSH
4716: LD_INT 2
4718: PUSH
4719: EMPTY
4720: LIST
4721: LIST
4722: PUSH
4723: LD_INT 21
4725: PUSH
4726: LD_INT 2
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: PUSH
4733: LD_INT 58
4735: PUSH
4736: EMPTY
4737: LIST
4738: PUSH
4739: EMPTY
4740: LIST
4741: LIST
4742: LIST
4743: PPUSH
4744: CALL_OW 69
4748: ST_TO_ADDR
// uc_side = 2 ;
4749: LD_ADDR_OWVAR 20
4753: PUSH
4754: LD_INT 2
4756: ST_TO_ADDR
// uc_nation = 2 ;
4757: LD_ADDR_OWVAR 21
4761: PUSH
4762: LD_INT 2
4764: ST_TO_ADDR
// hc_gallery =  ;
4765: LD_ADDR_OWVAR 33
4769: PUSH
4770: LD_STRING 
4772: ST_TO_ADDR
// hc_name =  ;
4773: LD_ADDR_OWVAR 26
4777: PUSH
4778: LD_STRING 
4780: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4781: LD_INT 0
4783: PPUSH
4784: LD_INT 3
4786: PPUSH
4787: LD_EXP 37
4791: PPUSH
4792: LD_EXP 38
4796: PPUSH
4797: CALL_OW 12
4801: PPUSH
4802: CALL_OW 380
// un = CreateHuman ;
4806: LD_ADDR_VAR 0 3
4810: PUSH
4811: CALL_OW 44
4815: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4816: LD_VAR 0 3
4820: PPUSH
4821: LD_VAR 0 4
4825: PUSH
4826: LD_INT 1
4828: ARRAY
4829: PPUSH
4830: CALL_OW 52
// end ;
4834: GO 4705
4836: POP
4837: POP
// end ;
4838: LD_VAR 0 1
4842: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4843: LD_INT 0
4845: PPUSH
4846: PPUSH
4847: PPUSH
4848: PPUSH
4849: PPUSH
4850: PPUSH
// for i := 1 to 2 do
4851: LD_ADDR_VAR 0 2
4855: PUSH
4856: DOUBLE
4857: LD_INT 1
4859: DEC
4860: ST_TO_ADDR
4861: LD_INT 2
4863: PUSH
4864: FOR_TO
4865: IFFALSE 4991
// begin uc_side = 5 ;
4867: LD_ADDR_OWVAR 20
4871: PUSH
4872: LD_INT 5
4874: ST_TO_ADDR
// uc_nation = 2 ;
4875: LD_ADDR_OWVAR 21
4879: PUSH
4880: LD_INT 2
4882: ST_TO_ADDR
// vc_chassis := 31 ;
4883: LD_ADDR_OWVAR 37
4887: PUSH
4888: LD_INT 31
4890: ST_TO_ADDR
// vc_control := control_rider ;
4891: LD_ADDR_OWVAR 38
4895: PUSH
4896: LD_INT 4
4898: ST_TO_ADDR
// animal := CreateVehicle ;
4899: LD_ADDR_VAR 0 3
4903: PUSH
4904: CALL_OW 45
4908: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4909: LD_VAR 0 3
4913: PPUSH
4914: LD_INT 7
4916: PPUSH
4917: LD_INT 0
4919: PPUSH
4920: CALL_OW 49
// hc_gallery =  ;
4924: LD_ADDR_OWVAR 33
4928: PUSH
4929: LD_STRING 
4931: ST_TO_ADDR
// hc_name =  ;
4932: LD_ADDR_OWVAR 26
4936: PUSH
4937: LD_STRING 
4939: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4940: LD_INT 0
4942: PPUSH
4943: LD_INT 11
4945: PPUSH
4946: LD_EXP 37
4950: PPUSH
4951: LD_EXP 38
4955: PPUSH
4956: CALL_OW 12
4960: PPUSH
4961: CALL_OW 380
// un = CreateHuman ;
4965: LD_ADDR_VAR 0 4
4969: PUSH
4970: CALL_OW 44
4974: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
4975: LD_VAR 0 4
4979: PPUSH
4980: LD_VAR 0 3
4984: PPUSH
4985: CALL_OW 52
// end ;
4989: GO 4864
4991: POP
4992: POP
// repeat wait ( 0 0$1 ) ;
4993: LD_INT 35
4995: PPUSH
4996: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
5000: LD_ADDR_VAR 0 5
5004: PUSH
5005: LD_INT 22
5007: PUSH
5008: LD_INT 1
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: PPUSH
5015: CALL_OW 69
5019: PPUSH
5020: LD_VAR 0 2
5024: PPUSH
5025: CALL_OW 74
5029: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5030: LD_ADDR_VAR 0 6
5034: PUSH
5035: LD_INT 22
5037: PUSH
5038: LD_INT 1
5040: PUSH
5041: EMPTY
5042: LIST
5043: LIST
5044: PUSH
5045: LD_INT 2
5047: PUSH
5048: LD_INT 59
5050: PUSH
5051: EMPTY
5052: LIST
5053: PUSH
5054: LD_INT 21
5056: PUSH
5057: LD_INT 1
5059: PUSH
5060: EMPTY
5061: LIST
5062: LIST
5063: PUSH
5064: LD_INT 21
5066: PUSH
5067: LD_INT 2
5069: PUSH
5070: EMPTY
5071: LIST
5072: LIST
5073: PUSH
5074: EMPTY
5075: LIST
5076: LIST
5077: LIST
5078: LIST
5079: PUSH
5080: EMPTY
5081: LIST
5082: LIST
5083: PUSH
5084: EMPTY
5085: LIST
5086: PPUSH
5087: CALL_OW 69
5091: PPUSH
5092: LD_VAR 0 2
5096: PPUSH
5097: CALL_OW 74
5101: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
5102: LD_ADDR_VAR 0 2
5106: PUSH
5107: LD_INT 22
5109: PUSH
5110: LD_INT 5
5112: PUSH
5113: EMPTY
5114: LIST
5115: LIST
5116: PUSH
5117: LD_INT 25
5119: PUSH
5120: LD_INT 11
5122: PUSH
5123: EMPTY
5124: LIST
5125: LIST
5126: PUSH
5127: EMPTY
5128: LIST
5129: LIST
5130: PPUSH
5131: CALL_OW 69
5135: PUSH
5136: FOR_IN
5137: IFFALSE 5207
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5139: LD_VAR 0 2
5143: PPUSH
5144: LD_VAR 0 5
5148: PPUSH
5149: CALL_OW 296
5153: PUSH
5154: LD_INT 8
5156: PLUS
5157: PUSH
5158: LD_VAR 0 2
5162: PPUSH
5163: LD_VAR 0 6
5167: PPUSH
5168: CALL_OW 296
5172: LESS
5173: IFFALSE 5191
// ComAttackUnit ( i , target1 ) else
5175: LD_VAR 0 2
5179: PPUSH
5180: LD_VAR 0 5
5184: PPUSH
5185: CALL_OW 115
5189: GO 5205
// ComAttackUnit ( i , target2 ) ;
5191: LD_VAR 0 2
5195: PPUSH
5196: LD_VAR 0 6
5200: PPUSH
5201: CALL_OW 115
// end ;
5205: GO 5136
5207: POP
5208: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
5209: LD_INT 22
5211: PUSH
5212: LD_INT 5
5214: PUSH
5215: EMPTY
5216: LIST
5217: LIST
5218: PUSH
5219: LD_INT 25
5221: PUSH
5222: LD_INT 11
5224: PUSH
5225: EMPTY
5226: LIST
5227: LIST
5228: PUSH
5229: EMPTY
5230: LIST
5231: LIST
5232: PPUSH
5233: CALL_OW 69
5237: PUSH
5238: LD_INT 0
5240: EQUAL
5241: PUSH
5242: LD_INT 22
5244: PUSH
5245: LD_INT 1
5247: PUSH
5248: EMPTY
5249: LIST
5250: LIST
5251: PPUSH
5252: CALL_OW 69
5256: PUSH
5257: LD_INT 0
5259: EQUAL
5260: OR
5261: IFFALSE 4993
// end ; end_of_file
5263: LD_VAR 0 1
5267: RET
// every 0 0$1 do
5268: GO 5270
5270: DISABLE
// begin RevealFogArea ( 1 , EpsilonTerrain ) ;
5271: LD_INT 1
5273: PPUSH
5274: LD_INT 19
5276: PPUSH
5277: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
5281: LD_EXP 11
5285: PPUSH
5286: CALL_OW 87
// wait ( 0 0$3 ) ;
5290: LD_INT 105
5292: PPUSH
5293: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
5297: LD_EXP 1
5301: PPUSH
5302: CALL_OW 310
5306: PPUSH
5307: CALL_OW 85
// Wait ( 0 0$1 ) ;
5311: LD_INT 35
5313: PPUSH
5314: CALL_OW 67
// if IsOk ( Gary ) then
5318: LD_EXP 10
5322: PPUSH
5323: CALL_OW 302
5327: IFFALSE 5365
// begin Say ( Gary , D2-Gary-1 ) ;
5329: LD_EXP 10
5333: PPUSH
5334: LD_STRING D2-Gary-1
5336: PPUSH
5337: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
5341: LD_EXP 1
5345: PPUSH
5346: LD_STRING D2-JMM-1
5348: PPUSH
5349: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
5353: LD_EXP 10
5357: PPUSH
5358: LD_STRING D2-Gary-2
5360: PPUSH
5361: CALL_OW 88
// end ; Video ( false ) ;
5365: LD_INT 0
5367: PPUSH
5368: CALL 87281 0 1
// ChangeMissionObjectives ( M1 ) ;
5372: LD_STRING M1
5374: PPUSH
5375: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5379: LD_INT 38
5381: PPUSH
5382: LD_INT 1
5384: PPUSH
5385: LD_INT 100
5387: PPUSH
5388: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5392: LD_INT 47
5394: PPUSH
5395: LD_INT 1
5397: PPUSH
5398: LD_INT 50
5400: PPUSH
5401: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5405: LD_INT 47
5407: PPUSH
5408: LD_INT 3
5410: PPUSH
5411: LD_INT 50
5413: PPUSH
5414: CALL_OW 291
// SaveForQuickRestart ;
5418: CALL_OW 22
// end ;
5422: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5423: LD_EXP 1
5427: PPUSH
5428: LD_EXP 11
5432: PPUSH
5433: CALL_OW 296
5437: PUSH
5438: LD_INT 15
5440: LESS
5441: IFFALSE 6269
5443: GO 5445
5445: DISABLE
5446: LD_INT 0
5448: PPUSH
// begin wait ( 0 0$3 ) ;
5449: LD_INT 105
5451: PPUSH
5452: CALL_OW 67
// Video ( true ) ;
5456: LD_INT 1
5458: PPUSH
5459: CALL 87281 0 1
// ComExitVehicle ( JMM ) ;
5463: LD_EXP 1
5467: PPUSH
5468: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5472: LD_EXP 1
5476: PPUSH
5477: CALL_OW 87
// if Truman then
5481: LD_EXP 20
5485: IFFALSE 5622
// begin ComMoveUnit ( Truman , JMM ) ;
5487: LD_EXP 20
5491: PPUSH
5492: LD_EXP 1
5496: PPUSH
5497: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5501: LD_INT 35
5503: PPUSH
5504: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
5508: LD_EXP 20
5512: PPUSH
5513: LD_EXP 1
5517: PPUSH
5518: CALL_OW 296
5522: PUSH
5523: LD_INT 6
5525: LESS
5526: IFFALSE 5501
// ComTurnUnit ( Truman , JMM ) ;
5528: LD_EXP 20
5532: PPUSH
5533: LD_EXP 1
5537: PPUSH
5538: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
5542: LD_EXP 1
5546: PPUSH
5547: LD_EXP 20
5551: PPUSH
5552: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
5556: LD_EXP 20
5560: PPUSH
5561: LD_STRING D2-Tru-1
5563: PPUSH
5564: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
5568: LD_EXP 1
5572: PPUSH
5573: LD_STRING D2-JMM-Tru-1
5575: PPUSH
5576: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
5580: LD_EXP 20
5584: PPUSH
5585: LD_STRING D2-Tru-2
5587: PPUSH
5588: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
5592: LD_EXP 20
5596: PPUSH
5597: LD_INT 79
5599: PPUSH
5600: LD_INT 41
5602: PPUSH
5603: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
5607: LD_EXP 20
5611: PPUSH
5612: LD_INT 17
5614: PPUSH
5615: LD_INT 31
5617: PPUSH
5618: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
5622: LD_EXP 1
5626: PPUSH
5627: LD_EXP 11
5631: PPUSH
5632: CALL_OW 179
// p := 15 ;
5636: LD_ADDR_VAR 0 1
5640: PUSH
5641: LD_INT 15
5643: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5644: LD_INT 35
5646: PPUSH
5647: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5651: LD_EXP 11
5655: PUSH
5656: LD_EXP 13
5660: PUSH
5661: LD_EXP 12
5665: PUSH
5666: LD_EXP 14
5670: PUSH
5671: LD_EXP 8
5675: PUSH
5676: EMPTY
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: PPUSH
5683: LD_EXP 1
5687: PPUSH
5688: CALL_OW 112
// p := p - 1 ;
5692: LD_ADDR_VAR 0 1
5696: PUSH
5697: LD_VAR 0 1
5701: PUSH
5702: LD_INT 1
5704: MINUS
5705: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5706: LD_EXP 1
5710: PPUSH
5711: LD_EXP 11
5715: PPUSH
5716: CALL_OW 296
5720: PUSH
5721: LD_INT 5
5723: LESS
5724: PUSH
5725: LD_VAR 0 1
5729: PUSH
5730: LD_INT 0
5732: LESSEQUAL
5733: OR
5734: IFFALSE 5644
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5736: LD_EXP 11
5740: PUSH
5741: LD_EXP 13
5745: PUSH
5746: LD_EXP 12
5750: PUSH
5751: LD_EXP 14
5755: PUSH
5756: LD_EXP 8
5760: PUSH
5761: EMPTY
5762: LIST
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: PPUSH
5768: LD_EXP 1
5772: PPUSH
5773: CALL_OW 119
// if not IsInUnit ( JMM ) then
5777: LD_EXP 1
5781: PPUSH
5782: CALL_OW 310
5786: NOT
5787: IFFALSE 5803
// ComTurnUnit ( JMM , Simms ) ;
5789: LD_EXP 1
5793: PPUSH
5794: LD_EXP 11
5798: PPUSH
5799: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5803: LD_EXP 11
5807: PUSH
5808: LD_EXP 13
5812: PUSH
5813: LD_EXP 12
5817: PUSH
5818: LD_EXP 14
5822: PUSH
5823: EMPTY
5824: LIST
5825: LIST
5826: LIST
5827: LIST
5828: PPUSH
5829: LD_EXP 1
5833: PPUSH
5834: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5838: LD_EXP 1
5842: PUSH
5843: LD_EXP 11
5847: PUSH
5848: EMPTY
5849: LIST
5850: LIST
5851: PPUSH
5852: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5856: LD_EXP 11
5860: PPUSH
5861: LD_STRING D2a-Sim-1
5863: PPUSH
5864: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5868: LD_EXP 1
5872: PPUSH
5873: LD_STRING D2a-JMM-1
5875: PPUSH
5876: CALL_OW 88
// if IsOk ( Joan ) then
5880: LD_EXP 13
5884: PPUSH
5885: CALL_OW 302
5889: IFFALSE 5967
// begin if not IsInUnit ( JMM ) then
5891: LD_EXP 1
5895: PPUSH
5896: CALL_OW 310
5900: NOT
5901: IFFALSE 5917
// ComTurnUnit ( JMM , Joan ) ;
5903: LD_EXP 1
5907: PPUSH
5908: LD_EXP 13
5912: PPUSH
5913: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
5917: LD_EXP 13
5921: PPUSH
5922: LD_EXP 1
5926: PPUSH
5927: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5931: LD_EXP 13
5935: PPUSH
5936: LD_STRING D2b-Joan-1
5938: PPUSH
5939: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5943: LD_EXP 1
5947: PPUSH
5948: LD_STRING D2b-JMM-1
5950: PPUSH
5951: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5955: LD_EXP 13
5959: PPUSH
5960: LD_STRING D2b-Joan-2
5962: PPUSH
5963: CALL_OW 88
// end ; if IsOk ( Denis ) then
5967: LD_EXP 12
5971: PPUSH
5972: CALL_OW 302
5976: IFFALSE 6030
// begin if not IsInUnit ( JMM ) then
5978: LD_EXP 1
5982: PPUSH
5983: CALL_OW 310
5987: NOT
5988: IFFALSE 6004
// ComTurnUnit ( JMM , Denis ) ;
5990: LD_EXP 1
5994: PPUSH
5995: LD_EXP 12
5999: PPUSH
6000: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
6004: LD_EXP 12
6008: PPUSH
6009: LD_EXP 1
6013: PPUSH
6014: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
6018: LD_EXP 12
6022: PPUSH
6023: LD_STRING D2c-Den-1
6025: PPUSH
6026: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
6030: LD_EXP 8
6034: PPUSH
6035: CALL_OW 302
6039: PUSH
6040: LD_STRING 08_Kikuchi
6042: PPUSH
6043: CALL_OW 28
6047: NOT
6048: AND
6049: IFFALSE 6144
// begin repeat wait ( 0 0$1 ) ;
6051: LD_INT 35
6053: PPUSH
6054: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
6058: LD_EXP 8
6062: PPUSH
6063: LD_EXP 1
6067: PPUSH
6068: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
6072: LD_EXP 1
6076: PPUSH
6077: LD_EXP 8
6081: PPUSH
6082: CALL_OW 296
6086: PUSH
6087: LD_INT 5
6089: LESS
6090: IFFALSE 6051
// ComTurnUnit ( Kikuchi , JMM ) ;
6092: LD_EXP 8
6096: PPUSH
6097: LD_EXP 1
6101: PPUSH
6102: CALL_OW 119
// if not IsInUnit ( JMM ) then
6106: LD_EXP 1
6110: PPUSH
6111: CALL_OW 310
6115: NOT
6116: IFFALSE 6132
// ComTurnUnit ( JMM , Kikuchi ) ;
6118: LD_EXP 1
6122: PPUSH
6123: LD_EXP 8
6127: PPUSH
6128: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
6132: LD_EXP 8
6136: PPUSH
6137: LD_STRING D3b-Yam-1
6139: PPUSH
6140: CALL_OW 88
// end ; if IsOk ( Khatam ) then
6144: LD_EXP 14
6148: PPUSH
6149: CALL_OW 302
6153: IFFALSE 6219
// begin if not IsInUnit ( JMM ) then
6155: LD_EXP 1
6159: PPUSH
6160: CALL_OW 310
6164: NOT
6165: IFFALSE 6181
// ComTurnUnit ( JMM , Khatam ) ;
6167: LD_EXP 1
6171: PPUSH
6172: LD_EXP 14
6176: PPUSH
6177: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
6181: LD_EXP 14
6185: PPUSH
6186: LD_EXP 1
6190: PPUSH
6191: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
6195: LD_EXP 1
6199: PPUSH
6200: LD_STRING D2c-JMM-1
6202: PPUSH
6203: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
6207: LD_EXP 14
6211: PPUSH
6212: LD_STRING D2c-Khat-1
6214: PPUSH
6215: CALL_OW 88
// end ; Video ( false ) ;
6219: LD_INT 0
6221: PPUSH
6222: CALL 87281 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
6226: LD_INT 22
6228: PUSH
6229: LD_INT 4
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: PPUSH
6236: CALL_OW 69
6240: PUSH
6241: LD_EXP 20
6245: DIFF
6246: PPUSH
6247: LD_INT 1
6249: PPUSH
6250: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
6254: LD_STRING M1a
6256: PPUSH
6257: CALL_OW 337
// joinEpsilon := 1 ;
6261: LD_ADDR_EXP 30
6265: PUSH
6266: LD_INT 1
6268: ST_TO_ADDR
// end ;
6269: PPOPN 1
6271: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do var p ;
6272: LD_INT 38
6274: PPUSH
6275: LD_INT 1
6277: PPUSH
6278: CALL_OW 289
6282: PUSH
6283: LD_INT 0
6285: EQUAL
6286: PUSH
6287: LD_INT 47
6289: PPUSH
6290: LD_INT 1
6292: PPUSH
6293: CALL_OW 289
6297: PUSH
6298: LD_INT 0
6300: EQUAL
6301: AND
6302: PUSH
6303: LD_INT 47
6305: PPUSH
6306: LD_INT 2
6308: PPUSH
6309: CALL_OW 289
6313: PUSH
6314: LD_INT 0
6316: EQUAL
6317: AND
6318: IFFALSE 6443
6320: GO 6322
6322: DISABLE
6323: LD_INT 0
6325: PPUSH
// begin p := 0 ;
6326: LD_ADDR_VAR 0 1
6330: PUSH
6331: LD_INT 0
6333: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6334: LD_INT 38
6336: PUSH
6337: LD_INT 47
6339: PUSH
6340: EMPTY
6341: LIST
6342: LIST
6343: PPUSH
6344: LD_INT 56
6346: PPUSH
6347: LD_INT 0
6349: PPUSH
6350: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6354: LD_INT 35
6356: PPUSH
6357: CALL_OW 67
// p := p + 1 ;
6361: LD_ADDR_VAR 0 1
6365: PUSH
6366: LD_VAR 0 1
6370: PUSH
6371: LD_INT 1
6373: PLUS
6374: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6375: LD_INT 38
6377: PUSH
6378: LD_INT 47
6380: PUSH
6381: EMPTY
6382: LIST
6383: LIST
6384: PPUSH
6385: LD_INT 56
6387: PPUSH
6388: LD_INT 0
6390: PPUSH
6391: CALL_OW 111
// if IsInArea ( cargo1 , RemArea ) then
6395: LD_INT 38
6397: PPUSH
6398: LD_INT 27
6400: PPUSH
6401: CALL_OW 308
6405: IFFALSE 6414
// RemoveUnit ( cargo1 ) ;
6407: LD_INT 38
6409: PPUSH
6410: CALL_OW 64
// if IsInArea ( cargo2 , RemArea ) then
6414: LD_INT 47
6416: PPUSH
6417: LD_INT 27
6419: PPUSH
6420: CALL_OW 308
6424: IFFALSE 6433
// RemoveUnit ( cargo2 ) ;
6426: LD_INT 47
6428: PPUSH
6429: CALL_OW 64
// until p > 30 ;
6433: LD_VAR 0 1
6437: PUSH
6438: LD_INT 30
6440: GREATER
6441: IFFALSE 6354
// end ;
6443: PPOPN 1
6445: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
6446: LD_EXP 66
6450: PUSH
6451: LD_INT 1
6453: EQUAL
6454: IFFALSE 7615
6456: GO 6458
6458: DISABLE
6459: LD_INT 0
6461: PPUSH
6462: PPUSH
6463: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6464: LD_ADDR_VAR 0 1
6468: PUSH
6469: LD_INT 22
6471: PUSH
6472: LD_INT 1
6474: PUSH
6475: EMPTY
6476: LIST
6477: LIST
6478: PUSH
6479: LD_INT 25
6481: PUSH
6482: LD_INT 4
6484: PUSH
6485: EMPTY
6486: LIST
6487: LIST
6488: PUSH
6489: LD_INT 26
6491: PUSH
6492: LD_INT 1
6494: PUSH
6495: EMPTY
6496: LIST
6497: LIST
6498: PUSH
6499: EMPTY
6500: LIST
6501: LIST
6502: LIST
6503: PPUSH
6504: CALL_OW 69
6508: PUSH
6509: LD_EXP 1
6513: PUSH
6514: LD_EXP 2
6518: PUSH
6519: LD_EXP 3
6523: PUSH
6524: LD_EXP 4
6528: PUSH
6529: LD_EXP 5
6533: PUSH
6534: LD_EXP 6
6538: PUSH
6539: LD_EXP 7
6543: PUSH
6544: LD_EXP 8
6548: PUSH
6549: LD_EXP 9
6553: PUSH
6554: LD_EXP 10
6558: PUSH
6559: LD_EXP 11
6563: PUSH
6564: LD_EXP 12
6568: PUSH
6569: LD_EXP 13
6573: PUSH
6574: LD_EXP 14
6578: PUSH
6579: LD_EXP 15
6583: PUSH
6584: LD_EXP 16
6588: PUSH
6589: LD_EXP 17
6593: PUSH
6594: LD_EXP 18
6598: PUSH
6599: LD_EXP 19
6603: PUSH
6604: LD_EXP 25
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: LIST
6615: LIST
6616: LIST
6617: LIST
6618: LIST
6619: LIST
6620: LIST
6621: LIST
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: DIFF
6631: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6632: LD_ADDR_VAR 0 2
6636: PUSH
6637: LD_INT 22
6639: PUSH
6640: LD_INT 1
6642: PUSH
6643: EMPTY
6644: LIST
6645: LIST
6646: PUSH
6647: LD_INT 26
6649: PUSH
6650: LD_INT 1
6652: PUSH
6653: EMPTY
6654: LIST
6655: LIST
6656: PUSH
6657: LD_INT 2
6659: PUSH
6660: LD_INT 25
6662: PUSH
6663: LD_INT 1
6665: PUSH
6666: EMPTY
6667: LIST
6668: LIST
6669: PUSH
6670: LD_INT 25
6672: PUSH
6673: LD_INT 2
6675: PUSH
6676: EMPTY
6677: LIST
6678: LIST
6679: PUSH
6680: LD_INT 25
6682: PUSH
6683: LD_INT 3
6685: PUSH
6686: EMPTY
6687: LIST
6688: LIST
6689: PUSH
6690: EMPTY
6691: LIST
6692: LIST
6693: LIST
6694: LIST
6695: PUSH
6696: EMPTY
6697: LIST
6698: LIST
6699: LIST
6700: PPUSH
6701: CALL_OW 69
6705: PUSH
6706: LD_EXP 1
6710: PUSH
6711: LD_EXP 2
6715: PUSH
6716: LD_EXP 3
6720: PUSH
6721: LD_EXP 4
6725: PUSH
6726: LD_EXP 5
6730: PUSH
6731: LD_EXP 6
6735: PUSH
6736: LD_EXP 7
6740: PUSH
6741: LD_EXP 8
6745: PUSH
6746: LD_EXP 9
6750: PUSH
6751: LD_EXP 10
6755: PUSH
6756: LD_EXP 11
6760: PUSH
6761: LD_EXP 12
6765: PUSH
6766: LD_EXP 13
6770: PUSH
6771: LD_EXP 14
6775: PUSH
6776: LD_EXP 15
6780: PUSH
6781: LD_EXP 16
6785: PUSH
6786: LD_EXP 17
6790: PUSH
6791: LD_EXP 18
6795: PUSH
6796: LD_EXP 19
6800: PUSH
6801: LD_EXP 25
6805: PUSH
6806: EMPTY
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: LIST
6814: LIST
6815: LIST
6816: LIST
6817: LIST
6818: LIST
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: DIFF
6828: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6829: LD_EXP 10
6833: PUSH
6834: LD_VAR 0 2
6838: OR
6839: PUSH
6840: LD_EXP 17
6844: PUSH
6845: LD_VAR 0 1
6849: OR
6850: AND
6851: IFFALSE 7070
// begin DialogueOn ;
6853: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6857: LD_EXP 17
6861: PPUSH
6862: CALL_OW 302
6866: IFFALSE 6882
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6868: LD_EXP 17
6872: PPUSH
6873: LD_STRING D3-Sci1-1
6875: PPUSH
6876: CALL_OW 88
6880: GO 6894
// Say ( tmp1 , D3-Sci1-1 ) ;
6882: LD_VAR 0 1
6886: PPUSH
6887: LD_STRING D3-Sci1-1
6889: PPUSH
6890: CALL_OW 88
// if IsOk ( Gary ) then
6894: LD_EXP 10
6898: PPUSH
6899: CALL_OW 302
6903: IFFALSE 6919
// Say ( Gary , D3-Gary-1 ) else
6905: LD_EXP 10
6909: PPUSH
6910: LD_STRING D3-Gary-1
6912: PPUSH
6913: CALL_OW 88
6917: GO 6931
// Say ( tmp2 , D3-Gary-1 ) ;
6919: LD_VAR 0 2
6923: PPUSH
6924: LD_STRING D3-Gary-1
6926: PPUSH
6927: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6931: LD_EXP 17
6935: PPUSH
6936: CALL_OW 302
6940: IFFALSE 6956
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6942: LD_EXP 17
6946: PPUSH
6947: LD_STRING D3-Sci1-2
6949: PPUSH
6950: CALL_OW 88
6954: GO 6968
// Say ( tmp1 , D3-Sci1-2 ) ;
6956: LD_VAR 0 1
6960: PPUSH
6961: LD_STRING D3-Sci1-2
6963: PPUSH
6964: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6968: LD_EXP 1
6972: PPUSH
6973: LD_STRING D3-JMM-2
6975: PPUSH
6976: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6980: LD_EXP 17
6984: PPUSH
6985: CALL_OW 302
6989: IFFALSE 7005
// Say ( DeltaDoctor , D3-Sci1-3 ) else
6991: LD_EXP 17
6995: PPUSH
6996: LD_STRING D3-Sci1-3
6998: PPUSH
6999: CALL_OW 88
7003: GO 7017
// Say ( tmp1 , D3-Sci1-3 ) ;
7005: LD_VAR 0 1
7009: PPUSH
7010: LD_STRING D3-Sci1-3
7012: PPUSH
7013: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7017: LD_EXP 1
7021: PPUSH
7022: LD_STRING D3-JMM-3
7024: PPUSH
7025: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
7029: LD_EXP 17
7033: PPUSH
7034: CALL_OW 302
7038: IFFALSE 7054
// Say ( DeltaDoctor , D3-Sci1-4 ) else
7040: LD_EXP 17
7044: PPUSH
7045: LD_STRING D3-Sci1-4
7047: PPUSH
7048: CALL_OW 88
7052: GO 7066
// Say ( tmp1 , D3-Sci1-4 ) ;
7054: LD_VAR 0 1
7058: PPUSH
7059: LD_STRING D3-Sci1-4
7061: PPUSH
7062: CALL_OW 88
// DialogueOff ;
7066: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
7070: LD_INT 12
7072: PPUSH
7073: LD_INT 1
7075: PPUSH
7076: LD_INT 1
7078: PPUSH
7079: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
7083: LD_INT 32
7085: PPUSH
7086: LD_INT 1
7088: PPUSH
7089: LD_INT 1
7091: PPUSH
7092: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
7096: LD_INT 12
7098: PPUSH
7099: LD_INT 1
7101: PPUSH
7102: LD_INT 1
7104: PPUSH
7105: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
7109: LD_INT 33
7111: PPUSH
7112: LD_INT 1
7114: PPUSH
7115: LD_INT 1
7117: PPUSH
7118: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
7122: LD_STRING M2
7124: PPUSH
7125: CALL_OW 337
// wait ( 3 3$0 ) ;
7129: LD_INT 6300
7131: PPUSH
7132: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7136: LD_INT 35
7138: PPUSH
7139: CALL_OW 67
// until not InBattle ( 1 ) ;
7143: LD_INT 1
7145: PPUSH
7146: CALL_OW 463
7150: NOT
7151: IFFALSE 7136
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
7153: LD_EXP 11
7157: PPUSH
7158: CALL_OW 302
7162: PUSH
7163: LD_EXP 17
7167: PPUSH
7168: CALL_OW 302
7172: AND
7173: IFFALSE 7342
// begin DialogueOn ;
7175: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7179: LD_EXP 11
7183: PPUSH
7184: LD_STRING D3a-Sim-1
7186: PPUSH
7187: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
7191: LD_EXP 17
7195: PPUSH
7196: LD_STRING D3a-Sci1-1
7198: PPUSH
7199: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7203: LD_EXP 11
7207: PPUSH
7208: LD_STRING D3a-Sim-2
7210: PPUSH
7211: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
7215: LD_EXP 17
7219: PPUSH
7220: LD_STRING D3a-Sci1-2
7222: PPUSH
7223: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7227: LD_EXP 11
7231: PPUSH
7232: LD_STRING D3a-Sim-3
7234: PPUSH
7235: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
7239: LD_EXP 17
7243: PPUSH
7244: LD_STRING D3a-Sci1-3
7246: PPUSH
7247: CALL_OW 88
// if IsOK ( Joan ) then
7251: LD_EXP 13
7255: PPUSH
7256: CALL_OW 302
7260: IFFALSE 7276
// Say ( Simms , D3a-Sim-4 ) else
7262: LD_EXP 11
7266: PPUSH
7267: LD_STRING D3a-Sim-4
7269: PPUSH
7270: CALL_OW 88
7274: GO 7288
// Say ( Simms , D3a-Sim-4a ) ;
7276: LD_EXP 11
7280: PPUSH
7281: LD_STRING D3a-Sim-4a
7283: PPUSH
7284: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
7288: LD_EXP 17
7292: PPUSH
7293: LD_STRING D3a-Sci1-4
7295: PPUSH
7296: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7300: LD_EXP 11
7304: PPUSH
7305: LD_STRING D3a-Sim-5
7307: PPUSH
7308: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
7312: LD_EXP 17
7316: PPUSH
7317: LD_STRING D3a-Sci1-5
7319: PPUSH
7320: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7324: LD_EXP 11
7328: PPUSH
7329: LD_STRING D3a-Sim-6
7331: PPUSH
7332: CALL_OW 88
// DialogueOff ;
7336: CALL_OW 7
// end else
7340: GO 7615
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
7342: LD_ADDR_VAR 0 3
7346: PUSH
7347: LD_INT 22
7349: PUSH
7350: LD_INT 1
7352: PUSH
7353: EMPTY
7354: LIST
7355: LIST
7356: PUSH
7357: LD_INT 26
7359: PUSH
7360: LD_INT 1
7362: PUSH
7363: EMPTY
7364: LIST
7365: LIST
7366: PUSH
7367: LD_INT 25
7369: PUSH
7370: LD_INT 4
7372: PUSH
7373: EMPTY
7374: LIST
7375: LIST
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: PPUSH
7382: CALL_OW 69
7386: PUSH
7387: LD_EXP 1
7391: PUSH
7392: LD_EXP 7
7396: PUSH
7397: LD_EXP 6
7401: PUSH
7402: LD_EXP 11
7406: PUSH
7407: LD_EXP 14
7411: PUSH
7412: EMPTY
7413: LIST
7414: LIST
7415: LIST
7416: LIST
7417: LIST
7418: DIFF
7419: ST_TO_ADDR
// if tmp3 > 0 then
7420: LD_VAR 0 3
7424: PUSH
7425: LD_INT 0
7427: GREATER
7428: IFFALSE 7615
// begin DialogueOn ;
7430: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7434: LD_EXP 11
7438: PPUSH
7439: LD_STRING D3a-Sim-1
7441: PPUSH
7442: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
7446: LD_VAR 0 3
7450: PUSH
7451: LD_INT 1
7453: ARRAY
7454: PPUSH
7455: LD_STRING D3a-Sci1-1
7457: PPUSH
7458: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7462: LD_EXP 11
7466: PPUSH
7467: LD_STRING D3a-Sim-2
7469: PPUSH
7470: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
7474: LD_VAR 0 3
7478: PUSH
7479: LD_INT 1
7481: ARRAY
7482: PPUSH
7483: LD_STRING D3a-Sci1-2
7485: PPUSH
7486: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7490: LD_EXP 11
7494: PPUSH
7495: LD_STRING D3a-Sim-3
7497: PPUSH
7498: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
7502: LD_VAR 0 3
7506: PUSH
7507: LD_INT 1
7509: ARRAY
7510: PPUSH
7511: LD_STRING D3a-Sci1-3
7513: PPUSH
7514: CALL_OW 88
// if IsOK ( Joan ) then
7518: LD_EXP 13
7522: PPUSH
7523: CALL_OW 302
7527: IFFALSE 7543
// Say ( Simms , D3a-Sim-4 ) else
7529: LD_EXP 11
7533: PPUSH
7534: LD_STRING D3a-Sim-4
7536: PPUSH
7537: CALL_OW 88
7541: GO 7555
// Say ( Simms , D3a-Sim-4a ) ;
7543: LD_EXP 11
7547: PPUSH
7548: LD_STRING D3a-Sim-4a
7550: PPUSH
7551: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
7555: LD_VAR 0 3
7559: PUSH
7560: LD_INT 1
7562: ARRAY
7563: PPUSH
7564: LD_STRING D3a-Sci1-4
7566: PPUSH
7567: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7571: LD_EXP 11
7575: PPUSH
7576: LD_STRING D3a-Sim-5
7578: PPUSH
7579: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
7583: LD_VAR 0 3
7587: PUSH
7588: LD_INT 1
7590: ARRAY
7591: PPUSH
7592: LD_STRING D3a-Sci1-5
7594: PPUSH
7595: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7599: LD_EXP 11
7603: PPUSH
7604: LD_STRING D3a-Sim-6
7606: PPUSH
7607: CALL_OW 88
// DialogueOff ;
7611: CALL_OW 7
// end ; end ; end ;
7615: PPOPN 3
7617: END
// every 0 0$2 trigger joinEpsilon = 1 do var rnd ;
7618: LD_EXP 30
7622: PUSH
7623: LD_INT 1
7625: EQUAL
7626: IFFALSE 7961
7628: GO 7630
7630: DISABLE
7631: LD_INT 0
7633: PPUSH
// begin wait ( 2 2$00 ) ;
7634: LD_INT 4200
7636: PPUSH
7637: CALL_OW 67
// SayRadio ( AmScout , D4-FSol1-1 ) ;
7641: LD_EXP 18
7645: PPUSH
7646: LD_STRING D4-FSol1-1
7648: PPUSH
7649: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
7653: LD_STRING M3
7655: PPUSH
7656: CALL_OW 337
// PrepareRussians ;
7660: CALL 3750 0 0
// spawnRussians := true ;
7664: LD_ADDR_EXP 59
7668: PUSH
7669: LD_INT 1
7671: ST_TO_ADDR
// rnd = Rand ( 1 , 100 ) ;
7672: LD_ADDR_VAR 0 1
7676: PUSH
7677: LD_INT 1
7679: PPUSH
7680: LD_INT 100
7682: PPUSH
7683: CALL_OW 12
7687: ST_TO_ADDR
// if difficulty = 1 then
7688: LD_OWVAR 67
7692: PUSH
7693: LD_INT 1
7695: EQUAL
7696: IFFALSE 7779
// begin if rnd > 0 and rnd < 51 then
7698: LD_VAR 0 1
7702: PUSH
7703: LD_INT 0
7705: GREATER
7706: PUSH
7707: LD_VAR 0 1
7711: PUSH
7712: LD_INT 51
7714: LESS
7715: AND
7716: IFFALSE 7725
// BuildRussianBase ( 2 ) ;
7718: LD_INT 2
7720: PPUSH
7721: CALL 12067 0 1
// if rnd > 50 and rnd < 81 then
7725: LD_VAR 0 1
7729: PUSH
7730: LD_INT 50
7732: GREATER
7733: PUSH
7734: LD_VAR 0 1
7738: PUSH
7739: LD_INT 81
7741: LESS
7742: AND
7743: IFFALSE 7752
// BuildRussianBase ( 1 ) ;
7745: LD_INT 1
7747: PPUSH
7748: CALL 12067 0 1
// if rnd > 80 and rnd < 101 then
7752: LD_VAR 0 1
7756: PUSH
7757: LD_INT 80
7759: GREATER
7760: PUSH
7761: LD_VAR 0 1
7765: PUSH
7766: LD_INT 101
7768: LESS
7769: AND
7770: IFFALSE 7779
// BuildRussianBase ( 3 ) ;
7772: LD_INT 3
7774: PPUSH
7775: CALL 12067 0 1
// end ; if difficulty = 2 then
7779: LD_OWVAR 67
7783: PUSH
7784: LD_INT 2
7786: EQUAL
7787: IFFALSE 7870
// begin if rnd > 0 and rnd < 61 then
7789: LD_VAR 0 1
7793: PUSH
7794: LD_INT 0
7796: GREATER
7797: PUSH
7798: LD_VAR 0 1
7802: PUSH
7803: LD_INT 61
7805: LESS
7806: AND
7807: IFFALSE 7816
// BuildRussianBase ( 2 ) ;
7809: LD_INT 2
7811: PPUSH
7812: CALL 12067 0 1
// if rnd > 60 and rnd < 81 then
7816: LD_VAR 0 1
7820: PUSH
7821: LD_INT 60
7823: GREATER
7824: PUSH
7825: LD_VAR 0 1
7829: PUSH
7830: LD_INT 81
7832: LESS
7833: AND
7834: IFFALSE 7843
// BuildRussianBase ( 1 ) ;
7836: LD_INT 1
7838: PPUSH
7839: CALL 12067 0 1
// if rnd > 80 and rnd < 101 then
7843: LD_VAR 0 1
7847: PUSH
7848: LD_INT 80
7850: GREATER
7851: PUSH
7852: LD_VAR 0 1
7856: PUSH
7857: LD_INT 101
7859: LESS
7860: AND
7861: IFFALSE 7870
// BuildRussianBase ( 3 ) ;
7863: LD_INT 3
7865: PPUSH
7866: CALL 12067 0 1
// end ; if difficulty >= 3 then
7870: LD_OWVAR 67
7874: PUSH
7875: LD_INT 3
7877: GREATEREQUAL
7878: IFFALSE 7961
// begin if rnd > 0 and rnd < 71 then
7880: LD_VAR 0 1
7884: PUSH
7885: LD_INT 0
7887: GREATER
7888: PUSH
7889: LD_VAR 0 1
7893: PUSH
7894: LD_INT 71
7896: LESS
7897: AND
7898: IFFALSE 7907
// BuildRussianBase ( 3 ) ;
7900: LD_INT 3
7902: PPUSH
7903: CALL 12067 0 1
// if rnd > 70 and rnd < 81 then
7907: LD_VAR 0 1
7911: PUSH
7912: LD_INT 70
7914: GREATER
7915: PUSH
7916: LD_VAR 0 1
7920: PUSH
7921: LD_INT 81
7923: LESS
7924: AND
7925: IFFALSE 7934
// BuildRussianBase ( 2 ) ;
7927: LD_INT 2
7929: PPUSH
7930: CALL 12067 0 1
// if rnd > 80 and rnd < 101 then
7934: LD_VAR 0 1
7938: PUSH
7939: LD_INT 80
7941: GREATER
7942: PUSH
7943: LD_VAR 0 1
7947: PUSH
7948: LD_INT 101
7950: LESS
7951: AND
7952: IFFALSE 7961
// BuildRussianBase ( 1 ) ;
7954: LD_INT 1
7956: PPUSH
7957: CALL 12067 0 1
// end ; end ;
7961: PPOPN 1
7963: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7964: LD_INT 54
7966: PPUSH
7967: LD_INT 1
7969: PPUSH
7970: CALL_OW 321
7974: PUSH
7975: LD_INT 2
7977: EQUAL
7978: PUSH
7979: LD_INT 21
7981: PPUSH
7982: LD_INT 1
7984: PPUSH
7985: CALL_OW 321
7989: PUSH
7990: LD_INT 2
7992: EQUAL
7993: OR
7994: PUSH
7995: LD_INT 22
7997: PPUSH
7998: LD_INT 1
8000: PPUSH
8001: CALL_OW 321
8005: PUSH
8006: LD_INT 2
8008: EQUAL
8009: OR
8010: IFFALSE 8312
8012: GO 8014
8014: DISABLE
8015: LD_INT 0
8017: PPUSH
8018: PPUSH
// begin if IsOk ( DeltaDoctor ) then
8019: LD_EXP 17
8023: PPUSH
8024: CALL_OW 302
8028: IFFALSE 8042
// tmp := DeltaDoctor else
8030: LD_ADDR_VAR 0 2
8034: PUSH
8035: LD_EXP 17
8039: ST_TO_ADDR
8040: GO 8052
// tmp := Denis ;
8042: LD_ADDR_VAR 0 2
8046: PUSH
8047: LD_EXP 12
8051: ST_TO_ADDR
// if tmp then
8052: LD_VAR 0 2
8056: IFFALSE 8150
// begin DialogueOn ;
8058: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
8062: LD_EXP 1
8066: PPUSH
8067: LD_STRING D6-JMM-1
8069: PPUSH
8070: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
8074: LD_VAR 0 2
8078: PPUSH
8079: LD_STRING D6-Sci1-1
8081: PPUSH
8082: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
8086: LD_EXP 1
8090: PPUSH
8091: LD_STRING D6-JMM-2
8093: PPUSH
8094: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
8098: LD_VAR 0 2
8102: PPUSH
8103: LD_STRING D6-Sci1-2
8105: PPUSH
8106: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
8110: LD_EXP 1
8114: PPUSH
8115: LD_STRING D6-JMM-3
8117: PPUSH
8118: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
8122: LD_VAR 0 2
8126: PPUSH
8127: LD_STRING D6-Sci1-3
8129: PPUSH
8130: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
8134: LD_EXP 1
8138: PPUSH
8139: LD_STRING D6-JMM-4
8141: PPUSH
8142: CALL_OW 88
// DialogueOff ;
8146: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
8150: LD_INT 1050
8152: PPUSH
8153: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
8157: LD_EXP 50
8161: PUSH
8162: LD_INT 0
8164: EQUAL
8165: PUSH
8166: LD_EXP 14
8170: PPUSH
8171: CALL_OW 302
8175: AND
8176: IFFALSE 8234
// begin DialogueOn ;
8178: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
8182: LD_EXP 28
8186: PPUSH
8187: LD_STRING D5-Ar1-1
8189: PPUSH
8190: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
8194: LD_EXP 27
8198: PPUSH
8199: LD_STRING D5-Diet-1
8201: PPUSH
8202: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
8206: LD_EXP 28
8210: PPUSH
8211: LD_STRING D5-Ar1-2
8213: PPUSH
8214: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
8218: LD_EXP 27
8222: PPUSH
8223: LD_STRING D5-Diet-2
8225: PPUSH
8226: CALL_OW 88
// DialogueOff ;
8230: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
8234: LD_INT 35
8236: PPUSH
8237: CALL_OW 67
// until tick > 10 10$00 ;
8241: LD_OWVAR 1
8245: PUSH
8246: LD_INT 21000
8248: GREATER
8249: IFFALSE 8234
// wait ( 1 1$30 ) ;
8251: LD_INT 3150
8253: PPUSH
8254: CALL_OW 67
// if arabianTrait = 0 then
8258: LD_EXP 50
8262: PUSH
8263: LD_INT 0
8265: EQUAL
8266: IFFALSE 8312
// begin arabianTrait = 1 ;
8268: LD_ADDR_EXP 50
8272: PUSH
8273: LD_INT 1
8275: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
8276: LD_INT 2
8278: PPUSH
8279: LD_INT 3
8281: PPUSH
8282: LD_INT 1
8284: PPUSH
8285: LD_INT 1
8287: PPUSH
8288: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
8292: LD_INT 2
8294: PPUSH
8295: LD_INT 6
8297: PPUSH
8298: LD_INT 1
8300: PPUSH
8301: LD_INT 1
8303: PPUSH
8304: CALL_OW 80
// PrepareArabianTrait ;
8308: CALL 8315 0 0
// end ; end ;
8312: PPOPN 2
8314: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding ; begin
8315: LD_INT 0
8317: PPUSH
8318: PPUSH
8319: PPUSH
8320: PPUSH
8321: PPUSH
8322: PPUSH
8323: PPUSH
8324: PPUSH
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
8325: LD_ADDR_VAR 0 6
8329: PUSH
8330: LD_INT 22
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: EMPTY
8337: LIST
8338: LIST
8339: PUSH
8340: LD_INT 2
8342: PUSH
8343: LD_INT 25
8345: PUSH
8346: LD_INT 4
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: PUSH
8353: LD_INT 25
8355: PUSH
8356: LD_INT 2
8358: PUSH
8359: EMPTY
8360: LIST
8361: LIST
8362: PUSH
8363: LD_INT 25
8365: PUSH
8366: LD_INT 3
8368: PUSH
8369: EMPTY
8370: LIST
8371: LIST
8372: PUSH
8373: EMPTY
8374: LIST
8375: LIST
8376: LIST
8377: LIST
8378: PUSH
8379: EMPTY
8380: LIST
8381: LIST
8382: PPUSH
8383: CALL_OW 69
8387: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8388: LD_ADDR_VAR 0 5
8392: PUSH
8393: LD_INT 22
8395: PUSH
8396: LD_INT 2
8398: PUSH
8399: EMPTY
8400: LIST
8401: LIST
8402: PUSH
8403: LD_INT 21
8405: PUSH
8406: LD_INT 1
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: PUSH
8413: LD_INT 2
8415: PUSH
8416: LD_INT 25
8418: PUSH
8419: LD_INT 1
8421: PUSH
8422: EMPTY
8423: LIST
8424: LIST
8425: PUSH
8426: LD_INT 25
8428: PUSH
8429: LD_INT 8
8431: PUSH
8432: EMPTY
8433: LIST
8434: LIST
8435: PUSH
8436: LD_INT 25
8438: PUSH
8439: LD_INT 15
8441: PUSH
8442: EMPTY
8443: LIST
8444: LIST
8445: PUSH
8446: EMPTY
8447: LIST
8448: LIST
8449: LIST
8450: LIST
8451: PUSH
8452: EMPTY
8453: LIST
8454: LIST
8455: LIST
8456: PPUSH
8457: CALL_OW 69
8461: PUSH
8462: LD_EXP 27
8466: PUSH
8467: EMPTY
8468: LIST
8469: DIFF
8470: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
8471: LD_ADDR_VAR 0 7
8475: PUSH
8476: LD_INT 22
8478: PUSH
8479: LD_INT 2
8481: PUSH
8482: EMPTY
8483: LIST
8484: LIST
8485: PUSH
8486: LD_INT 30
8488: PUSH
8489: LD_INT 5
8491: PUSH
8492: EMPTY
8493: LIST
8494: LIST
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: PPUSH
8500: CALL_OW 69
8504: PUSH
8505: LD_INT 1
8507: ARRAY
8508: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
8509: LD_VAR 0 6
8513: PPUSH
8514: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
8518: LD_VAR 0 5
8522: PPUSH
8523: CALL_OW 122
// wait ( 0 0$3 ) ;
8527: LD_INT 105
8529: PPUSH
8530: CALL_OW 67
// AddComEnterUnit ( arCivilian , barracks ) ;
8534: LD_VAR 0 6
8538: PPUSH
8539: LD_VAR 0 7
8543: PPUSH
8544: CALL_OW 180
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
8548: LD_VAR 0 6
8552: PPUSH
8553: LD_INT 1
8555: PUSH
8556: LD_INT 8
8558: PUSH
8559: EMPTY
8560: LIST
8561: LIST
8562: PUSH
8563: LD_INT 1
8565: PPUSH
8566: LD_INT 2
8568: PPUSH
8569: CALL_OW 12
8573: ARRAY
8574: PPUSH
8575: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
8579: LD_VAR 0 6
8583: PPUSH
8584: CALL_OW 182
// wait ( 0 0$1 ) ;
8588: LD_INT 35
8590: PPUSH
8591: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
8595: LD_INT 76
8597: PPUSH
8598: LD_INT 19
8600: PPUSH
8601: CALL_OW 84
// DialogueOn ;
8605: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8609: LD_INT 22
8611: PUSH
8612: LD_INT 1
8614: PUSH
8615: EMPTY
8616: LIST
8617: LIST
8618: PUSH
8619: LD_INT 26
8621: PUSH
8622: LD_INT 1
8624: PUSH
8625: EMPTY
8626: LIST
8627: LIST
8628: PUSH
8629: LD_INT 2
8631: PUSH
8632: LD_INT 25
8634: PUSH
8635: LD_INT 1
8637: PUSH
8638: EMPTY
8639: LIST
8640: LIST
8641: PUSH
8642: LD_INT 25
8644: PUSH
8645: LD_INT 2
8647: PUSH
8648: EMPTY
8649: LIST
8650: LIST
8651: PUSH
8652: LD_INT 25
8654: PUSH
8655: LD_INT 3
8657: PUSH
8658: EMPTY
8659: LIST
8660: LIST
8661: PUSH
8662: LD_INT 25
8664: PUSH
8665: LD_INT 4
8667: PUSH
8668: EMPTY
8669: LIST
8670: LIST
8671: PUSH
8672: LD_INT 25
8674: PUSH
8675: LD_INT 5
8677: PUSH
8678: EMPTY
8679: LIST
8680: LIST
8681: PUSH
8682: EMPTY
8683: LIST
8684: LIST
8685: LIST
8686: LIST
8687: LIST
8688: LIST
8689: PUSH
8690: EMPTY
8691: LIST
8692: LIST
8693: LIST
8694: PPUSH
8695: CALL_OW 69
8699: PPUSH
8700: LD_STRING D8-Sol1-1
8702: PPUSH
8703: LD_STRING D8-Sol1-1
8705: PPUSH
8706: CALL 11409 0 3
// if IsOK ( DeltaDoctor ) then
8710: LD_EXP 17
8714: PPUSH
8715: CALL_OW 302
8719: IFFALSE 8735
// Say ( DeltaDoctor , D8-Sci1-1 ) else
8721: LD_EXP 17
8725: PPUSH
8726: LD_STRING D8-Sci1-1
8728: PPUSH
8729: CALL_OW 88
8733: GO 8836
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8735: LD_INT 22
8737: PUSH
8738: LD_INT 1
8740: PUSH
8741: EMPTY
8742: LIST
8743: LIST
8744: PUSH
8745: LD_INT 26
8747: PUSH
8748: LD_INT 1
8750: PUSH
8751: EMPTY
8752: LIST
8753: LIST
8754: PUSH
8755: LD_INT 2
8757: PUSH
8758: LD_INT 25
8760: PUSH
8761: LD_INT 1
8763: PUSH
8764: EMPTY
8765: LIST
8766: LIST
8767: PUSH
8768: LD_INT 25
8770: PUSH
8771: LD_INT 2
8773: PUSH
8774: EMPTY
8775: LIST
8776: LIST
8777: PUSH
8778: LD_INT 25
8780: PUSH
8781: LD_INT 3
8783: PUSH
8784: EMPTY
8785: LIST
8786: LIST
8787: PUSH
8788: LD_INT 25
8790: PUSH
8791: LD_INT 4
8793: PUSH
8794: EMPTY
8795: LIST
8796: LIST
8797: PUSH
8798: LD_INT 25
8800: PUSH
8801: LD_INT 5
8803: PUSH
8804: EMPTY
8805: LIST
8806: LIST
8807: PUSH
8808: EMPTY
8809: LIST
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: LIST
8815: PUSH
8816: EMPTY
8817: LIST
8818: LIST
8819: LIST
8820: PPUSH
8821: CALL_OW 69
8825: PPUSH
8826: LD_STRING D8-Sol1-1
8828: PPUSH
8829: LD_STRING D8-Sol1-1
8831: PPUSH
8832: CALL 11409 0 3
// Say ( JMM , D8-JMM-1 ) ;
8836: LD_EXP 1
8840: PPUSH
8841: LD_STRING D8-JMM-1
8843: PPUSH
8844: CALL_OW 88
// DialogueOff ;
8848: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
8852: LD_INT 2
8854: PPUSH
8855: LD_INT 2
8857: PPUSH
8858: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8862: LD_INT 1
8864: PPUSH
8865: LD_INT 2
8867: PPUSH
8868: LD_INT 2
8870: PPUSH
8871: LD_INT 1
8873: PPUSH
8874: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
8878: LD_INT 3
8880: PPUSH
8881: LD_INT 2
8883: PPUSH
8884: LD_INT 1
8886: PPUSH
8887: LD_INT 1
8889: PPUSH
8890: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
8894: LD_STRING M4
8896: PPUSH
8897: CALL_OW 337
// wait ( 0 0$1 ) ;
8901: LD_INT 35
8903: PPUSH
8904: CALL_OW 67
// if IsLive ( Khatam ) then
8908: LD_EXP 14
8912: PPUSH
8913: CALL_OW 300
8917: IFFALSE 8931
// DoNotAttack ( 2 , Khatam ) ;
8919: LD_INT 2
8921: PPUSH
8922: LD_EXP 14
8926: PPUSH
8927: CALL_OW 471
// wait ( 0 0$1 ) ;
8931: LD_INT 35
8933: PPUSH
8934: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
8938: LD_ADDR_VAR 0 8
8942: PUSH
8943: LD_INT 22
8945: PUSH
8946: LD_INT 1
8948: PUSH
8949: EMPTY
8950: LIST
8951: LIST
8952: PUSH
8953: LD_INT 21
8955: PUSH
8956: LD_INT 3
8958: PUSH
8959: EMPTY
8960: LIST
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PPUSH
8967: CALL_OW 69
8971: PPUSH
8972: LD_VAR 0 5
8976: PUSH
8977: LD_INT 1
8979: ARRAY
8980: PPUSH
8981: CALL_OW 74
8985: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
8986: LD_VAR 0 5
8990: PPUSH
8991: LD_INT 25
8993: PUSH
8994: LD_INT 1
8996: PUSH
8997: EMPTY
8998: LIST
8999: LIST
9000: PPUSH
9001: CALL_OW 72
9005: PUSH
9006: LD_INT 1
9008: ARRAY
9009: PPUSH
9010: LD_VAR 0 8
9014: PPUSH
9015: CALL_OW 250
9019: PPUSH
9020: LD_VAR 0 8
9024: PPUSH
9025: CALL_OW 251
9029: PPUSH
9030: LD_VAR 0 8
9034: PPUSH
9035: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
9039: LD_VAR 0 5
9043: PPUSH
9044: LD_INT 84
9046: PPUSH
9047: LD_INT 22
9049: PPUSH
9050: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
9054: LD_VAR 0 5
9058: PPUSH
9059: LD_INT 82
9061: PPUSH
9062: LD_INT 5
9064: PPUSH
9065: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
9069: LD_VAR 0 5
9073: PPUSH
9074: LD_INT 95
9076: PPUSH
9077: LD_INT 12
9079: PPUSH
9080: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
9084: LD_VAR 0 5
9088: PPUSH
9089: LD_INT 102
9091: PPUSH
9092: LD_INT 11
9094: PPUSH
9095: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
9099: LD_VAR 0 5
9103: PPUSH
9104: LD_INT 116
9106: PPUSH
9107: LD_INT 15
9109: PPUSH
9110: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
9114: LD_VAR 0 5
9118: PPUSH
9119: LD_INT 140
9121: PPUSH
9122: LD_INT 25
9124: PPUSH
9125: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
9129: LD_VAR 0 5
9133: PPUSH
9134: LD_INT 160
9136: PPUSH
9137: LD_INT 56
9139: PPUSH
9140: CALL_OW 174
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
9144: LD_ADDR_VAR 0 5
9148: PUSH
9149: LD_INT 22
9151: PUSH
9152: LD_INT 2
9154: PUSH
9155: EMPTY
9156: LIST
9157: LIST
9158: PUSH
9159: LD_INT 21
9161: PUSH
9162: LD_INT 1
9164: PUSH
9165: EMPTY
9166: LIST
9167: LIST
9168: PUSH
9169: LD_INT 2
9171: PUSH
9172: LD_INT 25
9174: PUSH
9175: LD_INT 1
9177: PUSH
9178: EMPTY
9179: LIST
9180: LIST
9181: PUSH
9182: LD_INT 25
9184: PUSH
9185: LD_INT 8
9187: PUSH
9188: EMPTY
9189: LIST
9190: LIST
9191: PUSH
9192: LD_INT 25
9194: PUSH
9195: LD_INT 15
9197: PUSH
9198: EMPTY
9199: LIST
9200: LIST
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: LIST
9212: PPUSH
9213: CALL_OW 69
9217: PUSH
9218: LD_EXP 27
9222: PUSH
9223: EMPTY
9224: LIST
9225: DIFF
9226: ST_TO_ADDR
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
9227: LD_ADDR_VAR 0 6
9231: PUSH
9232: LD_INT 22
9234: PUSH
9235: LD_INT 2
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: PUSH
9242: LD_INT 21
9244: PUSH
9245: LD_INT 1
9247: PUSH
9248: EMPTY
9249: LIST
9250: LIST
9251: PUSH
9252: LD_INT 2
9254: PUSH
9255: LD_INT 25
9257: PUSH
9258: LD_INT 2
9260: PUSH
9261: EMPTY
9262: LIST
9263: LIST
9264: PUSH
9265: LD_INT 25
9267: PUSH
9268: LD_INT 3
9270: PUSH
9271: EMPTY
9272: LIST
9273: LIST
9274: PUSH
9275: LD_INT 25
9277: PUSH
9278: LD_INT 4
9280: PUSH
9281: EMPTY
9282: LIST
9283: LIST
9284: PUSH
9285: LD_INT 25
9287: PUSH
9288: LD_INT 12
9290: PUSH
9291: EMPTY
9292: LIST
9293: LIST
9294: PUSH
9295: LD_INT 25
9297: PUSH
9298: LD_INT 16
9300: PUSH
9301: EMPTY
9302: LIST
9303: LIST
9304: PUSH
9305: EMPTY
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: LIST
9312: PUSH
9313: EMPTY
9314: LIST
9315: LIST
9316: LIST
9317: PPUSH
9318: CALL_OW 69
9322: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
9323: LD_ADDR_VAR 0 6
9327: PUSH
9328: LD_VAR 0 6
9332: PUSH
9333: LD_EXP 27
9337: ADD
9338: ST_TO_ADDR
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
9339: LD_VAR 0 5
9343: PPUSH
9344: LD_INT 189
9346: PPUSH
9347: LD_INT 79
9349: PPUSH
9350: CALL_OW 174
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
9354: LD_VAR 0 5
9358: PPUSH
9359: LD_INT 25
9361: PUSH
9362: LD_INT 15
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: PPUSH
9369: CALL_OW 72
9373: IFFALSE 9414
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
9375: LD_VAR 0 5
9379: PPUSH
9380: LD_INT 25
9382: PUSH
9383: LD_INT 15
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: PPUSH
9390: CALL_OW 72
9394: PUSH
9395: LD_INT 1
9397: ARRAY
9398: PPUSH
9399: LD_INT 84
9401: PPUSH
9402: LD_INT 21
9404: PPUSH
9405: CALL_OW 428
9409: PPUSH
9410: CALL_OW 120
// wait ( 0 0$4 ) ;
9414: LD_INT 140
9416: PPUSH
9417: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
9421: LD_VAR 0 6
9425: PPUSH
9426: LD_INT 88
9428: PPUSH
9429: LD_INT 8
9431: PPUSH
9432: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
9436: LD_VAR 0 6
9440: PPUSH
9441: LD_INT 102
9443: PPUSH
9444: LD_INT 10
9446: PPUSH
9447: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
9451: LD_VAR 0 6
9455: PPUSH
9456: LD_INT 116
9458: PPUSH
9459: LD_INT 15
9461: PPUSH
9462: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
9466: LD_VAR 0 6
9470: PPUSH
9471: LD_INT 140
9473: PPUSH
9474: LD_INT 25
9476: PPUSH
9477: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
9481: LD_VAR 0 6
9485: PPUSH
9486: LD_INT 160
9488: PPUSH
9489: LD_INT 56
9491: PPUSH
9492: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
9496: LD_VAR 0 6
9500: PPUSH
9501: LD_INT 189
9503: PPUSH
9504: LD_INT 79
9506: PPUSH
9507: CALL_OW 171
// arabianAttackersAI = 1 ;
9511: LD_ADDR_EXP 47
9515: PUSH
9516: LD_INT 1
9518: ST_TO_ADDR
// if IsOk ( Gary ) then
9519: LD_EXP 10
9523: PPUSH
9524: CALL_OW 302
9528: IFFALSE 9542
// Say ( Gary , D8a-Gary-1 ) ;
9530: LD_EXP 10
9534: PPUSH
9535: LD_STRING D8a-Gary-1
9537: PPUSH
9538: CALL_OW 88
// wait ( 0 0$5 ) ;
9542: LD_INT 175
9544: PPUSH
9545: CALL_OW 67
// if IsOK ( Khatam ) then
9549: LD_EXP 14
9553: PPUSH
9554: CALL_OW 302
9558: IFFALSE 10094
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
9560: LD_ADDR_VAR 0 3
9564: PUSH
9565: LD_INT 22
9567: PUSH
9568: LD_INT 1
9570: PUSH
9571: EMPTY
9572: LIST
9573: LIST
9574: PUSH
9575: LD_INT 2
9577: PUSH
9578: LD_INT 25
9580: PUSH
9581: LD_INT 1
9583: PUSH
9584: EMPTY
9585: LIST
9586: LIST
9587: PUSH
9588: LD_INT 25
9590: PUSH
9591: LD_INT 2
9593: PUSH
9594: EMPTY
9595: LIST
9596: LIST
9597: PUSH
9598: LD_INT 25
9600: PUSH
9601: LD_INT 3
9603: PUSH
9604: EMPTY
9605: LIST
9606: LIST
9607: PUSH
9608: LD_INT 25
9610: PUSH
9611: LD_INT 4
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: PUSH
9618: LD_INT 25
9620: PUSH
9621: LD_INT 5
9623: PUSH
9624: EMPTY
9625: LIST
9626: LIST
9627: PUSH
9628: LD_INT 25
9630: PUSH
9631: LD_INT 8
9633: PUSH
9634: EMPTY
9635: LIST
9636: LIST
9637: PUSH
9638: EMPTY
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: PUSH
9647: EMPTY
9648: LIST
9649: LIST
9650: PPUSH
9651: CALL_OW 69
9655: PUSH
9656: LD_EXP 1
9660: PUSH
9661: LD_EXP 2
9665: PUSH
9666: LD_EXP 3
9670: PUSH
9671: LD_EXP 4
9675: PUSH
9676: LD_EXP 5
9680: PUSH
9681: LD_EXP 6
9685: PUSH
9686: LD_EXP 7
9690: PUSH
9691: LD_EXP 8
9695: PUSH
9696: LD_EXP 9
9700: PUSH
9701: LD_EXP 10
9705: PUSH
9706: LD_EXP 11
9710: PUSH
9711: LD_EXP 12
9715: PUSH
9716: LD_EXP 13
9720: PUSH
9721: LD_EXP 14
9725: PUSH
9726: LD_EXP 15
9730: PUSH
9731: LD_EXP 16
9735: PUSH
9736: LD_EXP 17
9740: PUSH
9741: LD_EXP 19
9745: PUSH
9746: LD_EXP 25
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: DIFF
9772: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
9773: LD_EXP 14
9777: PPUSH
9778: LD_INT 8
9780: PPUSH
9781: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
9785: LD_EXP 14
9789: PPUSH
9790: CALL_OW 122
// wait ( 0 0$1 ) ;
9794: LD_INT 35
9796: PPUSH
9797: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
9801: LD_EXP 14
9805: PPUSH
9806: CALL_OW 121
// wait ( 0 0$1 ) ;
9810: LD_INT 35
9812: PPUSH
9813: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
9817: LD_EXP 14
9821: PPUSH
9822: LD_INT 7
9824: PPUSH
9825: CALL_OW 113
// if not tmp then
9829: LD_VAR 0 3
9833: NOT
9834: IFFALSE 9838
// exit ;
9836: GO 10094
// DialogueOn ;
9838: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
9842: LD_VAR 0 3
9846: PUSH
9847: LD_INT 1
9849: ARRAY
9850: PPUSH
9851: CALL_OW 258
9855: PUSH
9856: LD_INT 1
9858: EQUAL
9859: IFFALSE 9879
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
9861: LD_VAR 0 3
9865: PUSH
9866: LD_INT 1
9868: ARRAY
9869: PPUSH
9870: LD_STRING D8b-Sol1-1
9872: PPUSH
9873: CALL_OW 88
9877: GO 9895
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
9879: LD_VAR 0 3
9883: PUSH
9884: LD_INT 1
9886: ARRAY
9887: PPUSH
9888: LD_STRING D8b-FSol1-1
9890: PPUSH
9891: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
9895: LD_EXP 14
9899: PPUSH
9900: LD_STRING D8b-Khat-1
9902: PPUSH
9903: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9907: LD_VAR 0 3
9911: PUSH
9912: LD_INT 1
9914: ARRAY
9915: PPUSH
9916: CALL_OW 258
9920: PUSH
9921: LD_INT 1
9923: EQUAL
9924: IFFALSE 9944
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
9926: LD_VAR 0 3
9930: PUSH
9931: LD_INT 1
9933: ARRAY
9934: PPUSH
9935: LD_STRING D8b-Sol1-2
9937: PPUSH
9938: CALL_OW 88
9942: GO 9960
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
9944: LD_VAR 0 3
9948: PUSH
9949: LD_INT 1
9951: ARRAY
9952: PPUSH
9953: LD_STRING D8b-FSol1-2
9955: PPUSH
9956: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
9960: LD_EXP 14
9964: PPUSH
9965: LD_STRING D8b-Khat-2
9967: PPUSH
9968: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9972: LD_VAR 0 3
9976: PUSH
9977: LD_INT 1
9979: ARRAY
9980: PPUSH
9981: CALL_OW 258
9985: PUSH
9986: LD_INT 1
9988: EQUAL
9989: IFFALSE 10009
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
9991: LD_VAR 0 3
9995: PUSH
9996: LD_INT 1
9998: ARRAY
9999: PPUSH
10000: LD_STRING D8b-Sol1-3
10002: PPUSH
10003: CALL_OW 88
10007: GO 10025
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
10009: LD_VAR 0 3
10013: PUSH
10014: LD_INT 1
10016: ARRAY
10017: PPUSH
10018: LD_STRING D8b-FSol1-3
10020: PPUSH
10021: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
10025: LD_EXP 14
10029: PPUSH
10030: LD_STRING D8b-Khat-3
10032: PPUSH
10033: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
10037: LD_VAR 0 3
10041: PUSH
10042: LD_INT 1
10044: ARRAY
10045: PPUSH
10046: CALL_OW 258
10050: PUSH
10051: LD_INT 1
10053: EQUAL
10054: IFFALSE 10074
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
10056: LD_VAR 0 3
10060: PUSH
10061: LD_INT 1
10063: ARRAY
10064: PPUSH
10065: LD_STRING D8b-Sol1-4
10067: PPUSH
10068: CALL_OW 88
10072: GO 10090
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
10074: LD_VAR 0 3
10078: PUSH
10079: LD_INT 1
10081: ARRAY
10082: PPUSH
10083: LD_STRING D8b-FSol1-4
10085: PPUSH
10086: CALL_OW 88
// DialogueOff ;
10090: CALL_OW 7
// end ; end ;
10094: LD_VAR 0 1
10098: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
10099: LD_INT 7
10101: PPUSH
10102: LD_INT 22
10104: PUSH
10105: LD_INT 2
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: PPUSH
10112: CALL_OW 70
10116: PUSH
10117: LD_INT 0
10119: GREATER
10120: PUSH
10121: LD_EXP 14
10125: PPUSH
10126: LD_INT 7
10128: PPUSH
10129: CALL_OW 308
10133: OR
10134: IFFALSE 10341
10136: GO 10138
10138: DISABLE
10139: LD_INT 0
10141: PPUSH
// begin enable ;
10142: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
10143: LD_ADDR_VAR 0 1
10147: PUSH
10148: LD_INT 7
10150: PPUSH
10151: LD_INT 22
10153: PUSH
10154: LD_INT 2
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: PPUSH
10161: CALL_OW 70
10165: PUSH
10166: FOR_IN
10167: IFFALSE 10308
// begin if GetClass ( i ) = 4 then
10169: LD_VAR 0 1
10173: PPUSH
10174: CALL_OW 257
10178: PUSH
10179: LD_INT 4
10181: EQUAL
10182: IFFALSE 10194
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
10184: LD_INT 1
10186: PPUSH
10187: LD_STRING 10_ScientistsEscape_1
10189: PPUSH
10190: CALL_OW 39
// if i = Dietrich then
10194: LD_VAR 0 1
10198: PUSH
10199: LD_EXP 27
10203: EQUAL
10204: IFFALSE 10214
// GensherStatus = 1 ;
10206: LD_ADDR_EXP 53
10210: PUSH
10211: LD_INT 1
10213: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
10214: LD_VAR 0 1
10218: PPUSH
10219: CALL_OW 257
10223: PUSH
10224: LD_INT 1
10226: EQUAL
10227: PUSH
10228: LD_VAR 0 1
10232: PPUSH
10233: CALL_OW 257
10237: PUSH
10238: LD_INT 2
10240: EQUAL
10241: OR
10242: PUSH
10243: LD_VAR 0 1
10247: PPUSH
10248: CALL_OW 257
10252: PUSH
10253: LD_INT 3
10255: EQUAL
10256: OR
10257: PUSH
10258: LD_VAR 0 1
10262: PPUSH
10263: CALL_OW 257
10267: PUSH
10268: LD_INT 4
10270: EQUAL
10271: OR
10272: PUSH
10273: LD_VAR 0 1
10277: PPUSH
10278: CALL_OW 257
10282: PUSH
10283: LD_INT 8
10285: EQUAL
10286: OR
10287: IFFALSE 10297
// arabianEscape = 1 ;
10289: LD_ADDR_EXP 48
10293: PUSH
10294: LD_INT 1
10296: ST_TO_ADDR
// RemoveUnit ( i ) ;
10297: LD_VAR 0 1
10301: PPUSH
10302: CALL_OW 64
// end ;
10306: GO 10166
10308: POP
10309: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
10310: LD_EXP 14
10314: PPUSH
10315: LD_INT 7
10317: PPUSH
10318: CALL_OW 308
10322: IFFALSE 10341
// begin KhatamStatus = 1 ;
10324: LD_ADDR_EXP 54
10328: PUSH
10329: LD_INT 1
10331: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
10332: LD_EXP 14
10336: PPUSH
10337: CALL_OW 64
// end ; end ;
10341: PPOPN 1
10343: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
10344: LD_INT 22
10346: PUSH
10347: LD_INT 2
10349: PUSH
10350: EMPTY
10351: LIST
10352: LIST
10353: PUSH
10354: LD_INT 21
10356: PUSH
10357: LD_INT 1
10359: PUSH
10360: EMPTY
10361: LIST
10362: LIST
10363: PUSH
10364: EMPTY
10365: LIST
10366: LIST
10367: PPUSH
10368: CALL_OW 69
10372: PUSH
10373: LD_INT 0
10375: EQUAL
10376: PUSH
10377: LD_INT 22
10379: PUSH
10380: LD_INT 4
10382: PUSH
10383: EMPTY
10384: LIST
10385: LIST
10386: PUSH
10387: LD_INT 21
10389: PUSH
10390: LD_INT 1
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PUSH
10397: EMPTY
10398: LIST
10399: LIST
10400: PPUSH
10401: CALL_OW 69
10405: PUSH
10406: LD_INT 0
10408: EQUAL
10409: AND
10410: IFFALSE 10423
10412: GO 10414
10414: DISABLE
// arabianDefeated = 1 ;
10415: LD_ADDR_EXP 49
10419: PUSH
10420: LD_INT 1
10422: ST_TO_ADDR
10423: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
10424: LD_INT 54
10426: PPUSH
10427: LD_INT 1
10429: PPUSH
10430: CALL_OW 321
10434: PUSH
10435: LD_INT 2
10437: EQUAL
10438: PUSH
10439: LD_INT 55
10441: PPUSH
10442: LD_INT 1
10444: PPUSH
10445: CALL_OW 321
10449: PUSH
10450: LD_INT 2
10452: EQUAL
10453: AND
10454: PUSH
10455: LD_INT 21
10457: PPUSH
10458: LD_INT 1
10460: PPUSH
10461: CALL_OW 321
10465: PUSH
10466: LD_INT 2
10468: EQUAL
10469: AND
10470: PUSH
10471: LD_INT 22
10473: PPUSH
10474: LD_INT 1
10476: PPUSH
10477: CALL_OW 321
10481: PUSH
10482: LD_INT 2
10484: EQUAL
10485: AND
10486: PUSH
10487: LD_INT 12
10489: PPUSH
10490: LD_INT 1
10492: PPUSH
10493: CALL_OW 321
10497: PUSH
10498: LD_INT 2
10500: EQUAL
10501: AND
10502: PUSH
10503: LD_INT 32
10505: PPUSH
10506: LD_INT 1
10508: PPUSH
10509: CALL_OW 321
10513: PUSH
10514: LD_INT 2
10516: EQUAL
10517: AND
10518: PUSH
10519: LD_EXP 64
10523: PUSH
10524: LD_INT 0
10526: EQUAL
10527: AND
10528: PUSH
10529: LD_EXP 50
10533: PUSH
10534: LD_INT 0
10536: EQUAL
10537: AND
10538: PUSH
10539: LD_OWVAR 1
10543: PUSH
10544: LD_INT 31500
10546: GREATEREQUAL
10547: AND
10548: IFFALSE 10565
10550: GO 10552
10552: DISABLE
// begin arabianTrait = 1 ;
10553: LD_ADDR_EXP 50
10557: PUSH
10558: LD_INT 1
10560: ST_TO_ADDR
// PrepareArabianTrait ;
10561: CALL 8315 0 0
// end ;
10565: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
10566: LD_EXP 30
10570: PUSH
10571: LD_STRING 02_mikhailStatus_1
10573: PPUSH
10574: LD_INT 0
10576: PPUSH
10577: CALL_OW 30
10581: PUSH
10582: LD_INT 1
10584: EQUAL
10585: AND
10586: PUSH
10587: LD_INT 22
10589: PUSH
10590: LD_INT 5
10592: PUSH
10593: EMPTY
10594: LIST
10595: LIST
10596: PPUSH
10597: CALL_OW 69
10601: PUSH
10602: LD_INT 0
10604: EQUAL
10605: AND
10606: PUSH
10607: LD_INT 22
10609: PUSH
10610: LD_INT 2
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: PUSH
10617: LD_INT 21
10619: PUSH
10620: LD_INT 1
10622: PUSH
10623: EMPTY
10624: LIST
10625: LIST
10626: PUSH
10627: EMPTY
10628: LIST
10629: LIST
10630: PPUSH
10631: CALL_OW 69
10635: PUSH
10636: LD_INT 0
10638: EQUAL
10639: PUSH
10640: LD_EXP 50
10644: PUSH
10645: LD_INT 0
10647: EQUAL
10648: OR
10649: AND
10650: IFFALSE 10659
10652: GO 10654
10654: DISABLE
// PrepareCornell ;
10655: CALL 3497 0 0
10659: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
10660: LD_INT 22
10662: PUSH
10663: LD_INT 1
10665: PUSH
10666: EMPTY
10667: LIST
10668: LIST
10669: PPUSH
10670: CALL_OW 69
10674: PPUSH
10675: LD_EXP 19
10679: PPUSH
10680: CALL_OW 74
10684: PPUSH
10685: LD_EXP 19
10689: PPUSH
10690: CALL_OW 296
10694: PUSH
10695: LD_INT 9
10697: LESS
10698: IFFALSE 10919
10700: GO 10702
10702: DISABLE
// begin InGameOn ;
10703: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
10707: LD_EXP 19
10711: PPUSH
10712: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
10716: LD_EXP 19
10720: PPUSH
10721: LD_STRING D7-Corn-1
10723: PPUSH
10724: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
10728: LD_INT 22
10730: PUSH
10731: LD_INT 1
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PUSH
10738: LD_INT 2
10740: PUSH
10741: LD_INT 25
10743: PUSH
10744: LD_INT 1
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: PUSH
10751: LD_INT 25
10753: PUSH
10754: LD_INT 2
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: PUSH
10761: LD_INT 25
10763: PUSH
10764: LD_INT 3
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: PUSH
10771: LD_INT 25
10773: PUSH
10774: LD_INT 4
10776: PUSH
10777: EMPTY
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 25
10783: PUSH
10784: LD_INT 5
10786: PUSH
10787: EMPTY
10788: LIST
10789: LIST
10790: PUSH
10791: EMPTY
10792: LIST
10793: LIST
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: PUSH
10799: EMPTY
10800: LIST
10801: LIST
10802: PPUSH
10803: CALL_OW 69
10807: PPUSH
10808: LD_STRING D7-Sol1-1
10810: PPUSH
10811: LD_STRING D7-FSol1-1
10813: PPUSH
10814: CALL 11409 0 3
// CenterNowOnUnits ( Cornell ) ;
10818: LD_EXP 19
10822: PPUSH
10823: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
10827: LD_EXP 19
10831: PPUSH
10832: LD_STRING D7-Corn-2
10834: PPUSH
10835: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10839: LD_EXP 1
10843: PPUSH
10844: LD_STRING D7-JMM-2
10846: PPUSH
10847: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
10851: LD_EXP 19
10855: PPUSH
10856: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
10860: LD_EXP 19
10864: PPUSH
10865: LD_STRING D7-Corn-3
10867: PPUSH
10868: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
10872: LD_EXP 19
10876: PPUSH
10877: LD_INT 250
10879: PPUSH
10880: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
10884: LD_EXP 19
10888: PPUSH
10889: LD_INT 1
10891: PPUSH
10892: CALL_OW 235
// wait ( 0 0$1 ) ;
10896: LD_INT 35
10898: PPUSH
10899: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
10903: LD_EXP 1
10907: PPUSH
10908: LD_STRING D7-JMM-3
10910: PPUSH
10911: CALL_OW 88
// InGameOff ;
10915: CALL_OW 9
// end ;
10919: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
10920: LD_EXP 19
10924: PPUSH
10925: CALL_OW 255
10929: PUSH
10930: LD_INT 1
10932: EQUAL
10933: PUSH
10934: LD_EXP 19
10938: PPUSH
10939: CALL_OW 256
10943: PUSH
10944: LD_INT 350
10946: GREATER
10947: AND
10948: IFFALSE 11141
10950: GO 10952
10952: DISABLE
// begin DialogueOn ;
10953: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
10957: LD_EXP 1
10961: PPUSH
10962: LD_STRING D7a-JMM-1
10964: PPUSH
10965: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
10969: LD_EXP 19
10973: PPUSH
10974: LD_STRING D7a-Corn-1
10976: PPUSH
10977: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
10981: LD_EXP 1
10985: PPUSH
10986: LD_STRING D7a-JMM-2
10988: PPUSH
10989: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
10993: LD_EXP 19
10997: PPUSH
10998: LD_STRING D7a-Corn-2
11000: PPUSH
11001: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
11005: LD_EXP 1
11009: PPUSH
11010: LD_STRING D7a-JMM-3
11012: PPUSH
11013: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
11017: LD_EXP 19
11021: PPUSH
11022: LD_STRING D7a-Corn-3
11024: PPUSH
11025: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
11029: LD_EXP 1
11033: PPUSH
11034: LD_STRING D7a-JMM-4
11036: PPUSH
11037: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
11041: LD_EXP 19
11045: PPUSH
11046: LD_STRING D7a-Corn-4
11048: PPUSH
11049: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
11053: LD_EXP 1
11057: PPUSH
11058: LD_STRING D7a-JMM-5
11060: PPUSH
11061: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
11065: LD_EXP 19
11069: PPUSH
11070: LD_STRING D7a-Corn-5
11072: PPUSH
11073: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
11077: LD_EXP 1
11081: PPUSH
11082: LD_STRING D7a-JMM-6
11084: PPUSH
11085: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
11089: LD_EXP 19
11093: PPUSH
11094: LD_STRING D7a-Corn-6
11096: PPUSH
11097: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
11101: LD_EXP 1
11105: PPUSH
11106: LD_STRING D7a-JMM-7
11108: PPUSH
11109: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
11113: LD_EXP 19
11117: PPUSH
11118: LD_STRING D7a-Corn-7
11120: PPUSH
11121: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
11125: LD_EXP 1
11129: PPUSH
11130: LD_STRING D7a-JMM-8
11132: PPUSH
11133: CALL_OW 88
// DialogueOff ;
11137: CALL_OW 7
// end ;
11141: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
11142: LD_EXP 62
11146: PUSH
11147: LD_EXP 1
11151: PPUSH
11152: CALL_OW 302
11156: PUSH
11157: LD_EXP 5
11161: PPUSH
11162: CALL_OW 302
11166: OR
11167: AND
11168: IFFALSE 11258
11170: GO 11172
11172: DISABLE
// begin Wait ( 0 0$2 ) ;
11173: LD_INT 70
11175: PPUSH
11176: CALL_OW 67
// DialogueOn ;
11180: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
11184: LD_EXP 62
11188: PUSH
11189: LD_INT 1
11191: ARRAY
11192: PPUSH
11193: LD_EXP 62
11197: PUSH
11198: LD_INT 2
11200: ARRAY
11201: PPUSH
11202: CALL_OW 86
// if IsOk ( Cyrus ) then
11206: LD_EXP 5
11210: PPUSH
11211: CALL_OW 302
11215: IFFALSE 11231
// Say ( Cyrus , D10-Cyrus-1 ) else
11217: LD_EXP 5
11221: PPUSH
11222: LD_STRING D10-Cyrus-1
11224: PPUSH
11225: CALL_OW 88
11229: GO 11254
// if IsOk ( JMM ) then
11231: LD_EXP 1
11235: PPUSH
11236: CALL_OW 302
11240: IFFALSE 11254
// Say ( JMM , D10-JMM-1 ) ;
11242: LD_EXP 1
11246: PPUSH
11247: LD_STRING D10-JMM-1
11249: PPUSH
11250: CALL_OW 88
// DialogueOff ;
11254: CALL_OW 7
// end ;
11258: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
11259: LD_INT 12
11261: PPUSH
11262: LD_INT 1
11264: PPUSH
11265: CALL_OW 321
11269: PUSH
11270: LD_INT 2
11272: EQUAL
11273: IFFALSE 11285
11275: GO 11277
11277: DISABLE
// ChangeMissionObjectives ( M2b ) ;
11278: LD_STRING M2b
11280: PPUSH
11281: CALL_OW 337
11285: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
11286: LD_INT 32
11288: PPUSH
11289: LD_INT 1
11291: PPUSH
11292: CALL_OW 321
11296: PUSH
11297: LD_INT 2
11299: EQUAL
11300: IFFALSE 11312
11302: GO 11304
11304: DISABLE
// ChangeMissionObjectives ( M2c ) ;
11305: LD_STRING M2c
11307: PPUSH
11308: CALL_OW 337
11312: END
// every 0 0$1 trigger arabianDefeated = 1 do
11313: LD_EXP 49
11317: PUSH
11318: LD_INT 1
11320: EQUAL
11321: IFFALSE 11333
11323: GO 11325
11325: DISABLE
// ChangeMissionObjectives ( M4a ) ;
11326: LD_STRING M4a
11328: PPUSH
11329: CALL_OW 337
11333: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
11334: LD_INT 54
11336: PPUSH
11337: LD_INT 1
11339: PPUSH
11340: CALL_OW 321
11344: PUSH
11345: LD_INT 2
11347: EQUAL
11348: PUSH
11349: LD_INT 55
11351: PPUSH
11352: LD_INT 1
11354: PPUSH
11355: CALL_OW 321
11359: PUSH
11360: LD_INT 2
11362: EQUAL
11363: AND
11364: PUSH
11365: LD_INT 21
11367: PPUSH
11368: LD_INT 1
11370: PPUSH
11371: CALL_OW 321
11375: PUSH
11376: LD_INT 2
11378: EQUAL
11379: AND
11380: PUSH
11381: LD_INT 22
11383: PPUSH
11384: LD_INT 1
11386: PPUSH
11387: CALL_OW 321
11391: PUSH
11392: LD_INT 2
11394: EQUAL
11395: AND
11396: IFFALSE 11408
11398: GO 11400
11400: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
11401: LD_STRING M2a
11403: PPUSH
11404: CALL_OW 337
11408: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
11409: LD_INT 0
11411: PPUSH
11412: PPUSH
11413: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
11414: LD_ADDR_VAR 0 1
11418: PUSH
11419: LD_VAR 0 1
11423: PUSH
11424: LD_EXP 1
11428: PUSH
11429: LD_EXP 2
11433: PUSH
11434: LD_EXP 3
11438: PUSH
11439: LD_EXP 4
11443: PUSH
11444: LD_EXP 5
11448: PUSH
11449: LD_EXP 6
11453: PUSH
11454: LD_EXP 7
11458: PUSH
11459: LD_EXP 8
11463: PUSH
11464: LD_EXP 9
11468: PUSH
11469: LD_EXP 10
11473: PUSH
11474: LD_EXP 11
11478: PUSH
11479: LD_EXP 12
11483: PUSH
11484: LD_EXP 13
11488: PUSH
11489: LD_EXP 14
11493: PUSH
11494: LD_EXP 15
11498: PUSH
11499: LD_EXP 16
11503: PUSH
11504: LD_EXP 17
11508: PUSH
11509: LD_EXP 18
11513: PUSH
11514: LD_EXP 19
11518: PUSH
11519: LD_EXP 25
11523: PUSH
11524: EMPTY
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: DIFF
11546: ST_TO_ADDR
// if not characters then
11547: LD_VAR 0 1
11551: NOT
11552: IFFALSE 11556
// exit ;
11554: GO 11702
// rnd = rand ( 1 , characters ) ;
11556: LD_ADDR_VAR 0 6
11560: PUSH
11561: LD_INT 1
11563: PPUSH
11564: LD_VAR 0 1
11568: PPUSH
11569: CALL_OW 12
11573: ST_TO_ADDR
// for i = 1 to characters do
11574: LD_ADDR_VAR 0 5
11578: PUSH
11579: DOUBLE
11580: LD_INT 1
11582: DEC
11583: ST_TO_ADDR
11584: LD_VAR 0 1
11588: PUSH
11589: FOR_TO
11590: IFFALSE 11700
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11592: LD_VAR 0 5
11596: PUSH
11597: LD_VAR 0 6
11601: EQUAL
11602: PUSH
11603: LD_VAR 0 1
11607: PUSH
11608: LD_VAR 0 5
11612: ARRAY
11613: PPUSH
11614: CALL_OW 258
11618: PUSH
11619: LD_INT 1
11621: EQUAL
11622: AND
11623: IFFALSE 11645
// Say ( characters [ i ] , dialogMID ) ;
11625: LD_VAR 0 1
11629: PUSH
11630: LD_VAR 0 5
11634: ARRAY
11635: PPUSH
11636: LD_VAR 0 2
11640: PPUSH
11641: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11645: LD_VAR 0 5
11649: PUSH
11650: LD_VAR 0 6
11654: EQUAL
11655: PUSH
11656: LD_VAR 0 1
11660: PUSH
11661: LD_VAR 0 5
11665: ARRAY
11666: PPUSH
11667: CALL_OW 258
11671: PUSH
11672: LD_INT 2
11674: EQUAL
11675: AND
11676: IFFALSE 11698
// Say ( characters [ i ] , dialogFID ) ;
11678: LD_VAR 0 1
11682: PUSH
11683: LD_VAR 0 5
11687: ARRAY
11688: PPUSH
11689: LD_VAR 0 3
11693: PPUSH
11694: CALL_OW 88
// end ;
11698: GO 11589
11700: POP
11701: POP
// end ;
11702: LD_VAR 0 4
11706: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11707: LD_INT 0
11709: PPUSH
11710: PPUSH
// for i in charactersList do
11711: LD_ADDR_VAR 0 4
11715: PUSH
11716: LD_VAR 0 1
11720: PUSH
11721: FOR_IN
11722: IFFALSE 11740
// SaveCharacters ( i , ident ) ;
11724: LD_VAR 0 4
11728: PPUSH
11729: LD_VAR 0 2
11733: PPUSH
11734: CALL_OW 38
11738: GO 11721
11740: POP
11741: POP
// end ;
11742: LD_VAR 0 3
11746: RET
// export function PrepareDifficulty ; begin
11747: LD_INT 0
11749: PPUSH
// if difficulty = 1 then
11750: LD_OWVAR 67
11754: PUSH
11755: LD_INT 1
11757: EQUAL
11758: IFFALSE 11802
// begin RuSolMinLevel = 3 ;
11760: LD_ADDR_EXP 37
11764: PUSH
11765: LD_INT 3
11767: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11768: LD_ADDR_EXP 38
11772: PUSH
11773: LD_INT 5
11775: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11776: LD_INT 51
11778: PPUSH
11779: LD_INT 6
11781: PPUSH
11782: LD_INT 2
11784: PPUSH
11785: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11789: LD_INT 51
11791: PPUSH
11792: LD_INT 5
11794: PPUSH
11795: LD_INT 2
11797: PPUSH
11798: CALL_OW 322
// end ; if difficulty = 2 then
11802: LD_OWVAR 67
11806: PUSH
11807: LD_INT 2
11809: EQUAL
11810: IFFALSE 11906
// begin RuSolMinLevel = 5 ;
11812: LD_ADDR_EXP 37
11816: PUSH
11817: LD_INT 5
11819: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
11820: LD_ADDR_EXP 38
11824: PUSH
11825: LD_INT 7
11827: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11828: LD_INT 51
11830: PPUSH
11831: LD_INT 6
11833: PPUSH
11834: LD_INT 2
11836: PPUSH
11837: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11841: LD_INT 57
11843: PPUSH
11844: LD_INT 6
11846: PPUSH
11847: LD_INT 2
11849: PPUSH
11850: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11854: LD_INT 63
11856: PPUSH
11857: LD_INT 6
11859: PPUSH
11860: LD_INT 2
11862: PPUSH
11863: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11867: LD_INT 51
11869: PPUSH
11870: LD_INT 5
11872: PPUSH
11873: LD_INT 2
11875: PPUSH
11876: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
11880: LD_INT 5
11882: PPUSH
11883: LD_INT 2
11885: PPUSH
11886: LD_INT 2
11888: PPUSH
11889: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
11893: LD_INT 5
11895: PPUSH
11896: LD_INT 5
11898: PPUSH
11899: LD_INT 2
11901: PPUSH
11902: CALL_OW 322
// end ; if difficulty >= 3 then
11906: LD_OWVAR 67
11910: PUSH
11911: LD_INT 3
11913: GREATEREQUAL
11914: IFFALSE 12062
// begin RuSolMinLevel = 6 ;
11916: LD_ADDR_EXP 37
11920: PUSH
11921: LD_INT 6
11923: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
11924: LD_ADDR_EXP 38
11928: PUSH
11929: LD_INT 8
11931: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11932: LD_INT 51
11934: PPUSH
11935: LD_INT 6
11937: PPUSH
11938: LD_INT 2
11940: PPUSH
11941: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11945: LD_INT 57
11947: PPUSH
11948: LD_INT 6
11950: PPUSH
11951: LD_INT 2
11953: PPUSH
11954: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
11958: LD_INT 52
11960: PPUSH
11961: LD_INT 6
11963: PPUSH
11964: LD_INT 2
11966: PPUSH
11967: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
11971: LD_INT 58
11973: PPUSH
11974: LD_INT 6
11976: PPUSH
11977: LD_INT 2
11979: PPUSH
11980: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11984: LD_INT 63
11986: PPUSH
11987: LD_INT 6
11989: PPUSH
11990: LD_INT 2
11992: PPUSH
11993: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
11997: LD_INT 64
11999: PPUSH
12000: LD_INT 6
12002: PPUSH
12003: LD_INT 2
12005: PPUSH
12006: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
12010: LD_INT 51
12012: PPUSH
12013: LD_INT 5
12015: PPUSH
12016: LD_INT 2
12018: PPUSH
12019: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
12023: LD_INT 52
12025: PPUSH
12026: LD_INT 5
12028: PPUSH
12029: LD_INT 2
12031: PPUSH
12032: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
12036: LD_INT 66
12038: PPUSH
12039: LD_INT 2
12041: PPUSH
12042: LD_INT 2
12044: PPUSH
12045: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
12049: LD_INT 66
12051: PPUSH
12052: LD_INT 5
12054: PPUSH
12055: LD_INT 2
12057: PPUSH
12058: CALL_OW 322
// end ; end ;
12062: LD_VAR 0 1
12066: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
12067: LD_INT 0
12069: PPUSH
12070: PPUSH
12071: PPUSH
12072: PPUSH
12073: PPUSH
12074: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
12075: LD_ADDR_VAR 0 7
12079: PUSH
12080: LD_INT 43
12082: PUSH
12083: LD_INT 68
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: PUSH
12090: LD_INT 43
12092: PUSH
12093: LD_INT 79
12095: PUSH
12096: EMPTY
12097: LIST
12098: LIST
12099: PUSH
12100: LD_INT 99
12102: PUSH
12103: LD_INT 114
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: PUSH
12110: LD_INT 103
12112: PUSH
12113: LD_INT 114
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: PUSH
12120: LD_INT 156
12122: PUSH
12123: LD_INT 92
12125: PUSH
12126: EMPTY
12127: LIST
12128: LIST
12129: PUSH
12130: LD_INT 152
12132: PUSH
12133: LD_INT 85
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: LIST
12144: LIST
12145: LIST
12146: LIST
12147: ST_TO_ADDR
// for i in sources do
12148: LD_ADDR_VAR 0 3
12152: PUSH
12153: LD_VAR 0 7
12157: PUSH
12158: FOR_IN
12159: IFFALSE 12188
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
12161: LD_VAR 0 3
12165: PUSH
12166: LD_INT 1
12168: ARRAY
12169: PPUSH
12170: LD_VAR 0 3
12174: PUSH
12175: LD_INT 2
12177: ARRAY
12178: PPUSH
12179: LD_INT 3
12181: PPUSH
12182: CALL_OW 441
12186: GO 12158
12188: POP
12189: POP
// case position of 1 :
12190: LD_VAR 0 1
12194: PUSH
12195: LD_INT 1
12197: DOUBLE
12198: EQUAL
12199: IFTRUE 12203
12201: GO 12214
12203: POP
// area := westConv ; 2 :
12204: LD_ADDR_VAR 0 6
12208: PUSH
12209: LD_INT 20
12211: ST_TO_ADDR
12212: GO 12253
12214: LD_INT 2
12216: DOUBLE
12217: EQUAL
12218: IFTRUE 12222
12220: GO 12233
12222: POP
// area := midConv ; 3 :
12223: LD_ADDR_VAR 0 6
12227: PUSH
12228: LD_INT 21
12230: ST_TO_ADDR
12231: GO 12253
12233: LD_INT 3
12235: DOUBLE
12236: EQUAL
12237: IFTRUE 12241
12239: GO 12252
12241: POP
// area := eastConv ; end ;
12242: LD_ADDR_VAR 0 6
12246: PUSH
12247: LD_INT 22
12249: ST_TO_ADDR
12250: GO 12253
12252: POP
// area := AreaToList ( area , 0 ) ;
12253: LD_ADDR_VAR 0 6
12257: PUSH
12258: LD_VAR 0 6
12262: PPUSH
12263: LD_INT 0
12265: PPUSH
12266: CALL_OW 517
12270: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
12271: LD_ADDR_VAR 0 3
12275: PUSH
12276: DOUBLE
12277: LD_INT 1
12279: DEC
12280: ST_TO_ADDR
12281: LD_VAR 0 6
12285: PUSH
12286: LD_INT 1
12288: ARRAY
12289: PUSH
12290: FOR_TO
12291: IFFALSE 12372
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
12293: LD_VAR 0 6
12297: PUSH
12298: LD_INT 1
12300: ARRAY
12301: PUSH
12302: LD_VAR 0 3
12306: ARRAY
12307: PPUSH
12308: LD_VAR 0 6
12312: PUSH
12313: LD_INT 2
12315: ARRAY
12316: PUSH
12317: LD_VAR 0 3
12321: ARRAY
12322: PPUSH
12323: LD_INT 1
12325: PPUSH
12326: LD_INT 1
12328: PPUSH
12329: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
12333: LD_VAR 0 6
12337: PUSH
12338: LD_INT 1
12340: ARRAY
12341: PUSH
12342: LD_VAR 0 3
12346: ARRAY
12347: PPUSH
12348: LD_VAR 0 6
12352: PUSH
12353: LD_INT 2
12355: ARRAY
12356: PUSH
12357: LD_VAR 0 3
12361: ARRAY
12362: PPUSH
12363: LD_INT 1
12365: PPUSH
12366: CALL_OW 331
// end ;
12370: GO 12290
12372: POP
12373: POP
// ruPossition = position ;
12374: LD_ADDR_EXP 42
12378: PUSH
12379: LD_VAR 0 1
12383: ST_TO_ADDR
// if position = 1 then
12384: LD_VAR 0 1
12388: PUSH
12389: LD_INT 1
12391: EQUAL
12392: IFFALSE 13140
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12394: LD_ADDR_VAR 0 4
12398: PUSH
12399: LD_INT 22
12401: PUSH
12402: LD_INT 3
12404: PUSH
12405: EMPTY
12406: LIST
12407: LIST
12408: PUSH
12409: LD_INT 25
12411: PUSH
12412: LD_INT 2
12414: PUSH
12415: EMPTY
12416: LIST
12417: LIST
12418: PUSH
12419: EMPTY
12420: LIST
12421: LIST
12422: PPUSH
12423: CALL_OW 69
12427: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
12428: LD_ADDR_VAR 0 5
12432: PUSH
12433: LD_INT 0
12435: PUSH
12436: LD_INT 49
12438: PUSH
12439: LD_INT 74
12441: PUSH
12442: LD_INT 3
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: PUSH
12451: LD_INT 4
12453: PUSH
12454: LD_INT 73
12456: PUSH
12457: LD_INT 88
12459: PUSH
12460: LD_INT 5
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: PUSH
12469: LD_INT 4
12471: PUSH
12472: LD_INT 56
12474: PUSH
12475: LD_INT 62
12477: PUSH
12478: LD_INT 3
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: PUSH
12487: LD_INT 29
12489: PUSH
12490: LD_INT 43
12492: PUSH
12493: LD_INT 68
12495: PUSH
12496: LD_INT 2
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: PUSH
12505: LD_INT 30
12507: PUSH
12508: LD_INT 43
12510: PUSH
12511: LD_INT 79
12513: PUSH
12514: LD_INT 5
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: PUSH
12523: LD_INT 28
12525: PUSH
12526: LD_INT 60
12528: PUSH
12529: LD_INT 75
12531: PUSH
12532: LD_INT 1
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 2
12543: PUSH
12544: LD_INT 50
12546: PUSH
12547: LD_INT 87
12549: PUSH
12550: LD_INT 1
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: PUSH
12559: LD_INT 28
12561: PUSH
12562: LD_INT 45
12564: PUSH
12565: LD_INT 67
12567: PUSH
12568: LD_INT 2
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: PUSH
12577: LD_INT 17
12579: PUSH
12580: LD_INT 47
12582: PUSH
12583: LD_INT 84
12585: PUSH
12586: LD_INT 2
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: PUSH
12595: LD_INT 18
12597: PUSH
12598: LD_INT 46
12600: PUSH
12601: LD_INT 87
12603: PUSH
12604: LD_INT 1
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: PUSH
12613: LD_INT 28
12615: PUSH
12616: LD_INT 41
12618: PUSH
12619: LD_INT 64
12621: PUSH
12622: LD_INT 5
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 32
12633: PUSH
12634: LD_INT 75
12636: PUSH
12637: LD_INT 76
12639: PUSH
12640: LD_INT 5
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: PUSH
12649: LD_INT 32
12651: PUSH
12652: LD_INT 77
12654: PUSH
12655: LD_INT 75
12657: PUSH
12658: LD_INT 5
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: PUSH
12667: LD_INT 32
12669: PUSH
12670: LD_INT 69
12672: PUSH
12673: LD_INT 68
12675: PUSH
12676: LD_INT 3
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 32
12687: PUSH
12688: LD_INT 59
12690: PUSH
12691: LD_INT 96
12693: PUSH
12694: LD_INT 5
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: PUSH
12703: LD_INT 32
12705: PUSH
12706: LD_INT 56
12708: PUSH
12709: LD_INT 96
12711: PUSH
12712: LD_INT 0
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: PUSH
12721: LD_INT 32
12723: PUSH
12724: LD_INT 51
12726: PUSH
12727: LD_INT 61
12729: PUSH
12730: LD_INT 3
12732: PUSH
12733: EMPTY
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: PUSH
12739: LD_INT 32
12741: PUSH
12742: LD_INT 42
12744: PUSH
12745: LD_INT 60
12747: PUSH
12748: LD_INT 3
12750: PUSH
12751: EMPTY
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: PUSH
12757: LD_INT 32
12759: PUSH
12760: LD_INT 36
12762: PUSH
12763: LD_INT 58
12765: PUSH
12766: LD_INT 3
12768: PUSH
12769: EMPTY
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: PUSH
12775: LD_INT 32
12777: PUSH
12778: LD_INT 39
12780: PUSH
12781: LD_INT 59
12783: PUSH
12784: LD_INT 3
12786: PUSH
12787: EMPTY
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: PUSH
12793: LD_INT 32
12795: PUSH
12796: LD_INT 61
12798: PUSH
12799: LD_INT 64
12801: PUSH
12802: LD_INT 3
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 33
12813: PUSH
12814: LD_INT 63
12816: PUSH
12817: LD_INT 90
12819: PUSH
12820: LD_INT 5
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: PUSH
12829: LD_INT 33
12831: PUSH
12832: LD_INT 64
12834: PUSH
12835: LD_INT 88
12837: PUSH
12838: LD_INT 5
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: PUSH
12847: LD_INT 33
12849: PUSH
12850: LD_INT 72
12852: PUSH
12853: LD_INT 82
12855: PUSH
12856: LD_INT 5
12858: PUSH
12859: EMPTY
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: PUSH
12865: LD_INT 6
12867: PUSH
12868: LD_INT 42
12870: PUSH
12871: LD_INT 74
12873: PUSH
12874: LD_INT 1
12876: PUSH
12877: EMPTY
12878: LIST
12879: LIST
12880: LIST
12881: LIST
12882: PUSH
12883: LD_INT 6
12885: PUSH
12886: LD_INT 56
12888: PUSH
12889: LD_INT 77
12891: PUSH
12892: LD_INT 2
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: PUSH
12901: LD_INT 21
12903: PUSH
12904: LD_INT 54
12906: PUSH
12907: LD_INT 91
12909: PUSH
12910: LD_INT 5
12912: PUSH
12913: EMPTY
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: PUSH
12919: LD_INT 16
12921: PUSH
12922: LD_INT 50
12924: PUSH
12925: LD_INT 83
12927: PUSH
12928: LD_INT 3
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: LIST
12935: LIST
12936: PUSH
12937: LD_INT 24
12939: PUSH
12940: LD_INT 50
12942: PUSH
12943: LD_INT 90
12945: PUSH
12946: LD_INT 0
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: PUSH
12955: EMPTY
12956: LIST
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: LIST
12962: LIST
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: LIST
12968: LIST
12969: LIST
12970: LIST
12971: LIST
12972: LIST
12973: LIST
12974: LIST
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: LIST
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12986: LD_ADDR_VAR 0 3
12990: PUSH
12991: LD_INT 22
12993: PUSH
12994: LD_INT 3
12996: PUSH
12997: EMPTY
12998: LIST
12999: LIST
13000: PUSH
13001: LD_INT 3
13003: PUSH
13004: LD_INT 25
13006: PUSH
13007: LD_INT 2
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PUSH
13014: EMPTY
13015: LIST
13016: LIST
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PPUSH
13022: CALL_OW 69
13026: PUSH
13027: FOR_IN
13028: IFFALSE 13047
// AddComAgressiveMove ( i , 53 , 82 ) ;
13030: LD_VAR 0 3
13034: PPUSH
13035: LD_INT 53
13037: PPUSH
13038: LD_INT 82
13040: PPUSH
13041: CALL_OW 174
13045: GO 13027
13047: POP
13048: POP
// for i := 1 to buildingsTab do
13049: LD_ADDR_VAR 0 3
13053: PUSH
13054: DOUBLE
13055: LD_INT 1
13057: DEC
13058: ST_TO_ADDR
13059: LD_VAR 0 5
13063: PUSH
13064: FOR_TO
13065: IFFALSE 13138
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13067: LD_VAR 0 4
13071: PPUSH
13072: LD_VAR 0 5
13076: PUSH
13077: LD_VAR 0 3
13081: ARRAY
13082: PUSH
13083: LD_INT 1
13085: ARRAY
13086: PPUSH
13087: LD_VAR 0 5
13091: PUSH
13092: LD_VAR 0 3
13096: ARRAY
13097: PUSH
13098: LD_INT 2
13100: ARRAY
13101: PPUSH
13102: LD_VAR 0 5
13106: PUSH
13107: LD_VAR 0 3
13111: ARRAY
13112: PUSH
13113: LD_INT 3
13115: ARRAY
13116: PPUSH
13117: LD_VAR 0 5
13121: PUSH
13122: LD_VAR 0 3
13126: ARRAY
13127: PUSH
13128: LD_INT 4
13130: ARRAY
13131: PPUSH
13132: CALL_OW 205
13136: GO 13064
13138: POP
13139: POP
// end ; if position = 2 then
13140: LD_VAR 0 1
13144: PUSH
13145: LD_INT 2
13147: EQUAL
13148: IFFALSE 13763
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13150: LD_ADDR_VAR 0 4
13154: PUSH
13155: LD_INT 22
13157: PUSH
13158: LD_INT 3
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: LD_INT 25
13167: PUSH
13168: LD_INT 2
13170: PUSH
13171: EMPTY
13172: LIST
13173: LIST
13174: PUSH
13175: EMPTY
13176: LIST
13177: LIST
13178: PPUSH
13179: CALL_OW 69
13183: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
13184: LD_ADDR_VAR 0 5
13188: PUSH
13189: LD_INT 0
13191: PUSH
13192: LD_INT 104
13194: PUSH
13195: LD_INT 110
13197: PUSH
13198: LD_INT 5
13200: PUSH
13201: EMPTY
13202: LIST
13203: LIST
13204: LIST
13205: LIST
13206: PUSH
13207: LD_INT 4
13209: PUSH
13210: LD_INT 98
13212: PUSH
13213: LD_INT 90
13215: PUSH
13216: LD_INT 3
13218: PUSH
13219: EMPTY
13220: LIST
13221: LIST
13222: LIST
13223: LIST
13224: PUSH
13225: LD_INT 29
13227: PUSH
13228: LD_INT 103
13230: PUSH
13231: LD_INT 114
13233: PUSH
13234: LD_INT 2
13236: PUSH
13237: EMPTY
13238: LIST
13239: LIST
13240: LIST
13241: LIST
13242: PUSH
13243: LD_INT 30
13245: PUSH
13246: LD_INT 99
13248: PUSH
13249: LD_INT 114
13251: PUSH
13252: LD_INT 3
13254: PUSH
13255: EMPTY
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: PUSH
13261: LD_INT 28
13263: PUSH
13264: LD_INT 100
13266: PUSH
13267: LD_INT 112
13269: PUSH
13270: LD_INT 1
13272: PUSH
13273: EMPTY
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: PUSH
13279: LD_INT 2
13281: PUSH
13282: LD_INT 92
13284: PUSH
13285: LD_INT 101
13287: PUSH
13288: LD_INT 0
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: LIST
13295: LIST
13296: PUSH
13297: LD_INT 28
13299: PUSH
13300: LD_INT 97
13302: PUSH
13303: LD_INT 116
13305: PUSH
13306: LD_INT 5
13308: PUSH
13309: EMPTY
13310: LIST
13311: LIST
13312: LIST
13313: LIST
13314: PUSH
13315: LD_INT 17
13317: PUSH
13318: LD_INT 96
13320: PUSH
13321: LD_INT 101
13323: PUSH
13324: LD_INT 4
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: PUSH
13333: LD_INT 18
13335: PUSH
13336: LD_INT 88
13338: PUSH
13339: LD_INT 97
13341: PUSH
13342: LD_INT 2
13344: PUSH
13345: EMPTY
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: PUSH
13351: LD_INT 28
13353: PUSH
13354: LD_INT 106
13356: PUSH
13357: LD_INT 92
13359: PUSH
13360: LD_INT 2
13362: PUSH
13363: EMPTY
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: PUSH
13369: LD_INT 32
13371: PUSH
13372: LD_INT 88
13374: PUSH
13375: LD_INT 89
13377: PUSH
13378: LD_INT 2
13380: PUSH
13381: EMPTY
13382: LIST
13383: LIST
13384: LIST
13385: LIST
13386: PUSH
13387: LD_INT 32
13389: PUSH
13390: LD_INT 86
13392: PUSH
13393: LD_INT 90
13395: PUSH
13396: LD_INT 2
13398: PUSH
13399: EMPTY
13400: LIST
13401: LIST
13402: LIST
13403: LIST
13404: PUSH
13405: LD_INT 32
13407: PUSH
13408: LD_INT 85
13410: PUSH
13411: LD_INT 99
13413: PUSH
13414: LD_INT 2
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: PUSH
13423: LD_INT 32
13425: PUSH
13426: LD_INT 85
13428: PUSH
13429: LD_INT 107
13431: PUSH
13432: LD_INT 1
13434: PUSH
13435: EMPTY
13436: LIST
13437: LIST
13438: LIST
13439: LIST
13440: PUSH
13441: LD_INT 33
13443: PUSH
13444: LD_INT 105
13446: PUSH
13447: LD_INT 99
13449: PUSH
13450: LD_INT 1
13452: PUSH
13453: EMPTY
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: PUSH
13459: LD_INT 33
13461: PUSH
13462: LD_INT 102
13464: PUSH
13465: LD_INT 92
13467: PUSH
13468: LD_INT 3
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: LIST
13475: LIST
13476: PUSH
13477: LD_INT 33
13479: PUSH
13480: LD_INT 105
13482: PUSH
13483: LD_INT 92
13485: PUSH
13486: LD_INT 2
13488: PUSH
13489: EMPTY
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: PUSH
13495: LD_INT 6
13497: PUSH
13498: LD_INT 92
13500: PUSH
13501: LD_INT 110
13503: PUSH
13504: LD_INT 0
13506: PUSH
13507: EMPTY
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: PUSH
13513: LD_INT 6
13515: PUSH
13516: LD_INT 103
13518: PUSH
13519: LD_INT 103
13521: PUSH
13522: LD_INT 5
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: PUSH
13531: LD_INT 21
13533: PUSH
13534: LD_INT 89
13536: PUSH
13537: LD_INT 101
13539: PUSH
13540: LD_INT 1
13542: PUSH
13543: EMPTY
13544: LIST
13545: LIST
13546: LIST
13547: LIST
13548: PUSH
13549: LD_INT 16
13551: PUSH
13552: LD_INT 95
13554: PUSH
13555: LD_INT 104
13557: PUSH
13558: LD_INT 4
13560: PUSH
13561: EMPTY
13562: LIST
13563: LIST
13564: LIST
13565: LIST
13566: PUSH
13567: LD_INT 24
13569: PUSH
13570: LD_INT 92
13572: PUSH
13573: LD_INT 105
13575: PUSH
13576: LD_INT 0
13578: PUSH
13579: EMPTY
13580: LIST
13581: LIST
13582: LIST
13583: LIST
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: LIST
13599: LIST
13600: LIST
13601: LIST
13602: LIST
13603: LIST
13604: LIST
13605: LIST
13606: LIST
13607: LIST
13608: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13609: LD_ADDR_VAR 0 3
13613: PUSH
13614: LD_INT 22
13616: PUSH
13617: LD_INT 3
13619: PUSH
13620: EMPTY
13621: LIST
13622: LIST
13623: PUSH
13624: LD_INT 3
13626: PUSH
13627: LD_INT 25
13629: PUSH
13630: LD_INT 2
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: PUSH
13641: EMPTY
13642: LIST
13643: LIST
13644: PPUSH
13645: CALL_OW 69
13649: PUSH
13650: FOR_IN
13651: IFFALSE 13670
// AddComAgressiveMove ( i , 96 , 99 ) ;
13653: LD_VAR 0 3
13657: PPUSH
13658: LD_INT 96
13660: PPUSH
13661: LD_INT 99
13663: PPUSH
13664: CALL_OW 174
13668: GO 13650
13670: POP
13671: POP
// for i := 1 to buildingsTab do
13672: LD_ADDR_VAR 0 3
13676: PUSH
13677: DOUBLE
13678: LD_INT 1
13680: DEC
13681: ST_TO_ADDR
13682: LD_VAR 0 5
13686: PUSH
13687: FOR_TO
13688: IFFALSE 13761
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13690: LD_VAR 0 4
13694: PPUSH
13695: LD_VAR 0 5
13699: PUSH
13700: LD_VAR 0 3
13704: ARRAY
13705: PUSH
13706: LD_INT 1
13708: ARRAY
13709: PPUSH
13710: LD_VAR 0 5
13714: PUSH
13715: LD_VAR 0 3
13719: ARRAY
13720: PUSH
13721: LD_INT 2
13723: ARRAY
13724: PPUSH
13725: LD_VAR 0 5
13729: PUSH
13730: LD_VAR 0 3
13734: ARRAY
13735: PUSH
13736: LD_INT 3
13738: ARRAY
13739: PPUSH
13740: LD_VAR 0 5
13744: PUSH
13745: LD_VAR 0 3
13749: ARRAY
13750: PUSH
13751: LD_INT 4
13753: ARRAY
13754: PPUSH
13755: CALL_OW 205
13759: GO 13687
13761: POP
13762: POP
// end ; if position = 3 then
13763: LD_VAR 0 1
13767: PUSH
13768: LD_INT 3
13770: EQUAL
13771: IFFALSE 14557
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13773: LD_ADDR_VAR 0 4
13777: PUSH
13778: LD_INT 22
13780: PUSH
13781: LD_INT 3
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: LD_INT 25
13790: PUSH
13791: LD_INT 2
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: EMPTY
13799: LIST
13800: LIST
13801: PPUSH
13802: CALL_OW 69
13806: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
13807: LD_ADDR_VAR 0 5
13811: PUSH
13812: LD_INT 0
13814: PUSH
13815: LD_INT 151
13817: PUSH
13818: LD_INT 71
13820: PUSH
13821: LD_INT 4
13823: PUSH
13824: EMPTY
13825: LIST
13826: LIST
13827: LIST
13828: LIST
13829: PUSH
13830: LD_INT 4
13832: PUSH
13833: LD_INT 145
13835: PUSH
13836: LD_INT 53
13838: PUSH
13839: LD_INT 3
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: LIST
13846: LIST
13847: PUSH
13848: LD_INT 4
13850: PUSH
13851: LD_INT 172
13853: PUSH
13854: LD_INT 102
13856: PUSH
13857: LD_INT 5
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: LIST
13864: LIST
13865: PUSH
13866: LD_INT 29
13868: PUSH
13869: LD_INT 152
13871: PUSH
13872: LD_INT 85
13874: PUSH
13875: LD_INT 3
13877: PUSH
13878: EMPTY
13879: LIST
13880: LIST
13881: LIST
13882: LIST
13883: PUSH
13884: LD_INT 30
13886: PUSH
13887: LD_INT 156
13889: PUSH
13890: LD_INT 92
13892: PUSH
13893: LD_INT 3
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: LIST
13900: LIST
13901: PUSH
13902: LD_INT 28
13904: PUSH
13905: LD_INT 151
13907: PUSH
13908: LD_INT 66
13910: PUSH
13911: LD_INT 4
13913: PUSH
13914: EMPTY
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 2
13922: PUSH
13923: LD_INT 163
13925: PUSH
13926: LD_INT 95
13928: PUSH
13929: LD_INT 5
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: PUSH
13938: LD_INT 28
13940: PUSH
13941: LD_INT 149
13943: PUSH
13944: LD_INT 63
13946: PUSH
13947: LD_INT 4
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: PUSH
13956: LD_INT 17
13958: PUSH
13959: LD_INT 167
13961: PUSH
13962: LD_INT 99
13964: PUSH
13965: LD_INT 5
13967: PUSH
13968: EMPTY
13969: LIST
13970: LIST
13971: LIST
13972: LIST
13973: PUSH
13974: LD_INT 18
13976: PUSH
13977: LD_INT 163
13979: PUSH
13980: LD_INT 98
13982: PUSH
13983: LD_INT 0
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: LIST
13990: LIST
13991: PUSH
13992: LD_INT 28
13994: PUSH
13995: LD_INT 154
13997: PUSH
13998: LD_INT 70
14000: PUSH
14001: LD_INT 4
14003: PUSH
14004: EMPTY
14005: LIST
14006: LIST
14007: LIST
14008: LIST
14009: PUSH
14010: LD_INT 32
14012: PUSH
14013: LD_INT 155
14015: PUSH
14016: LD_INT 62
14018: PUSH
14019: LD_INT 4
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: LIST
14026: LIST
14027: PUSH
14028: LD_INT 32
14030: PUSH
14031: LD_INT 161
14033: PUSH
14034: LD_INT 69
14036: PUSH
14037: LD_INT 4
14039: PUSH
14040: EMPTY
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: PUSH
14046: LD_INT 32
14048: PUSH
14049: LD_INT 168
14051: PUSH
14052: LD_INT 78
14054: PUSH
14055: LD_INT 4
14057: PUSH
14058: EMPTY
14059: LIST
14060: LIST
14061: LIST
14062: LIST
14063: PUSH
14064: LD_INT 32
14066: PUSH
14067: LD_INT 163
14069: PUSH
14070: LD_INT 80
14072: PUSH
14073: LD_INT 5
14075: PUSH
14076: EMPTY
14077: LIST
14078: LIST
14079: LIST
14080: LIST
14081: PUSH
14082: LD_INT 32
14084: PUSH
14085: LD_INT 136
14087: PUSH
14088: LD_INT 73
14090: PUSH
14091: LD_INT 0
14093: PUSH
14094: EMPTY
14095: LIST
14096: LIST
14097: LIST
14098: LIST
14099: PUSH
14100: LD_INT 32
14102: PUSH
14103: LD_INT 157
14105: PUSH
14106: LD_INT 98
14108: PUSH
14109: LD_INT 0
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: LIST
14116: LIST
14117: PUSH
14118: LD_INT 32
14120: PUSH
14121: LD_INT 150
14123: PUSH
14124: LD_INT 87
14126: PUSH
14127: LD_INT 1
14129: PUSH
14130: EMPTY
14131: LIST
14132: LIST
14133: LIST
14134: LIST
14135: PUSH
14136: LD_INT 33
14138: PUSH
14139: LD_INT 171
14141: PUSH
14142: LD_INT 97
14144: PUSH
14145: LD_INT 4
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: LIST
14152: LIST
14153: PUSH
14154: LD_INT 33
14156: PUSH
14157: LD_INT 168
14159: PUSH
14160: LD_INT 92
14162: PUSH
14163: LD_INT 4
14165: PUSH
14166: EMPTY
14167: LIST
14168: LIST
14169: LIST
14170: LIST
14171: PUSH
14172: LD_INT 33
14174: PUSH
14175: LD_INT 166
14177: PUSH
14178: LD_INT 80
14180: PUSH
14181: LD_INT 5
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: LIST
14188: LIST
14189: PUSH
14190: LD_INT 33
14192: PUSH
14193: LD_INT 141
14195: PUSH
14196: LD_INT 54
14198: PUSH
14199: LD_INT 2
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: PUSH
14208: LD_INT 33
14210: PUSH
14211: LD_INT 133
14213: PUSH
14214: LD_INT 57
14216: PUSH
14217: LD_INT 2
14219: PUSH
14220: EMPTY
14221: LIST
14222: LIST
14223: LIST
14224: LIST
14225: PUSH
14226: LD_INT 33
14228: PUSH
14229: LD_INT 132
14231: PUSH
14232: LD_INT 61
14234: PUSH
14235: LD_INT 2
14237: PUSH
14238: EMPTY
14239: LIST
14240: LIST
14241: LIST
14242: LIST
14243: PUSH
14244: LD_INT 33
14246: PUSH
14247: LD_INT 150
14249: PUSH
14250: LD_INT 82
14252: PUSH
14253: LD_INT 0
14255: PUSH
14256: EMPTY
14257: LIST
14258: LIST
14259: LIST
14260: LIST
14261: PUSH
14262: LD_INT 33
14264: PUSH
14265: LD_INT 132
14267: PUSH
14268: LD_INT 72
14270: PUSH
14271: LD_INT 0
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: PUSH
14280: LD_INT 6
14282: PUSH
14283: LD_INT 146
14285: PUSH
14286: LD_INT 64
14288: PUSH
14289: LD_INT 4
14291: PUSH
14292: EMPTY
14293: LIST
14294: LIST
14295: LIST
14296: LIST
14297: PUSH
14298: LD_INT 6
14300: PUSH
14301: LD_INT 159
14303: PUSH
14304: LD_INT 85
14306: PUSH
14307: LD_INT 4
14309: PUSH
14310: EMPTY
14311: LIST
14312: LIST
14313: LIST
14314: LIST
14315: PUSH
14316: LD_INT 21
14318: PUSH
14319: LD_INT 163
14321: PUSH
14322: LD_INT 91
14324: PUSH
14325: LD_INT 3
14327: PUSH
14328: EMPTY
14329: LIST
14330: LIST
14331: LIST
14332: LIST
14333: PUSH
14334: LD_INT 16
14336: PUSH
14337: LD_INT 166
14339: PUSH
14340: LD_INT 95
14342: PUSH
14343: LD_INT 4
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: PUSH
14352: LD_INT 24
14354: PUSH
14355: LD_INT 159
14357: PUSH
14358: LD_INT 95
14360: PUSH
14361: LD_INT 1
14363: PUSH
14364: EMPTY
14365: LIST
14366: LIST
14367: LIST
14368: LIST
14369: PUSH
14370: EMPTY
14371: LIST
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: LIST
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: LIST
14383: LIST
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: LIST
14389: LIST
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: LIST
14395: LIST
14396: LIST
14397: LIST
14398: LIST
14399: LIST
14400: LIST
14401: LIST
14402: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
14403: LD_ADDR_VAR 0 3
14407: PUSH
14408: LD_INT 22
14410: PUSH
14411: LD_INT 3
14413: PUSH
14414: EMPTY
14415: LIST
14416: LIST
14417: PUSH
14418: LD_INT 3
14420: PUSH
14421: LD_INT 25
14423: PUSH
14424: LD_INT 2
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: PUSH
14435: EMPTY
14436: LIST
14437: LIST
14438: PPUSH
14439: CALL_OW 69
14443: PUSH
14444: FOR_IN
14445: IFFALSE 14464
// AddComAgressiveMove ( i , 141 , 65 ) ;
14447: LD_VAR 0 3
14451: PPUSH
14452: LD_INT 141
14454: PPUSH
14455: LD_INT 65
14457: PPUSH
14458: CALL_OW 174
14462: GO 14444
14464: POP
14465: POP
// for i := 1 to buildingsTab do
14466: LD_ADDR_VAR 0 3
14470: PUSH
14471: DOUBLE
14472: LD_INT 1
14474: DEC
14475: ST_TO_ADDR
14476: LD_VAR 0 5
14480: PUSH
14481: FOR_TO
14482: IFFALSE 14555
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
14484: LD_VAR 0 4
14488: PPUSH
14489: LD_VAR 0 5
14493: PUSH
14494: LD_VAR 0 3
14498: ARRAY
14499: PUSH
14500: LD_INT 1
14502: ARRAY
14503: PPUSH
14504: LD_VAR 0 5
14508: PUSH
14509: LD_VAR 0 3
14513: ARRAY
14514: PUSH
14515: LD_INT 2
14517: ARRAY
14518: PPUSH
14519: LD_VAR 0 5
14523: PUSH
14524: LD_VAR 0 3
14528: ARRAY
14529: PUSH
14530: LD_INT 3
14532: ARRAY
14533: PPUSH
14534: LD_VAR 0 5
14538: PUSH
14539: LD_VAR 0 3
14543: ARRAY
14544: PUSH
14545: LD_INT 4
14547: ARRAY
14548: PPUSH
14549: CALL_OW 205
14553: GO 14481
14555: POP
14556: POP
// end ; end ;
14557: LD_VAR 0 2
14561: RET
// export arBuildingsTab ; export function BuildArabianBase ; var i , engineers ; begin
14562: LD_INT 0
14564: PPUSH
14565: PPUSH
14566: PPUSH
// arBuildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 72 , 24 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
14567: LD_ADDR_EXP 69
14571: PUSH
14572: LD_INT 0
14574: PUSH
14575: LD_INT 71
14577: PUSH
14578: LD_INT 15
14580: PUSH
14581: LD_INT 3
14583: PUSH
14584: EMPTY
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: PUSH
14590: LD_INT 6
14592: PUSH
14593: LD_INT 77
14595: PUSH
14596: LD_INT 18
14598: PUSH
14599: LD_INT 3
14601: PUSH
14602: EMPTY
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: PUSH
14608: LD_INT 4
14610: PUSH
14611: LD_INT 77
14613: PUSH
14614: LD_INT 26
14616: PUSH
14617: LD_INT 0
14619: PUSH
14620: EMPTY
14621: LIST
14622: LIST
14623: LIST
14624: LIST
14625: PUSH
14626: LD_INT 31
14628: PUSH
14629: LD_INT 72
14631: PUSH
14632: LD_INT 24
14634: PUSH
14635: LD_INT 0
14637: PUSH
14638: EMPTY
14639: LIST
14640: LIST
14641: LIST
14642: LIST
14643: PUSH
14644: LD_INT 31
14646: PUSH
14647: LD_INT 82
14649: PUSH
14650: LD_INT 28
14652: PUSH
14653: LD_INT 0
14655: PUSH
14656: EMPTY
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: PUSH
14662: LD_INT 31
14664: PUSH
14665: LD_INT 84
14667: PUSH
14668: LD_INT 21
14670: PUSH
14671: LD_INT 3
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: PUSH
14680: LD_INT 31
14682: PUSH
14683: LD_INT 66
14685: PUSH
14686: LD_INT 14
14688: PUSH
14689: LD_INT 2
14691: PUSH
14692: EMPTY
14693: LIST
14694: LIST
14695: LIST
14696: LIST
14697: PUSH
14698: LD_INT 27
14700: PUSH
14701: LD_INT 67
14703: PUSH
14704: LD_INT 18
14706: PUSH
14707: LD_INT 5
14709: PUSH
14710: EMPTY
14711: LIST
14712: LIST
14713: LIST
14714: LIST
14715: PUSH
14716: LD_INT 27
14718: PUSH
14719: LD_INT 69
14721: PUSH
14722: LD_INT 23
14724: PUSH
14725: LD_INT 2
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: LIST
14741: LIST
14742: LIST
14743: LIST
14744: ST_TO_ADDR
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
14745: LD_ADDR_VAR 0 3
14749: PUSH
14750: LD_INT 22
14752: PUSH
14753: LD_INT 2
14755: PUSH
14756: EMPTY
14757: LIST
14758: LIST
14759: PUSH
14760: LD_INT 25
14762: PUSH
14763: LD_INT 2
14765: PUSH
14766: EMPTY
14767: LIST
14768: LIST
14769: PUSH
14770: EMPTY
14771: LIST
14772: LIST
14773: PPUSH
14774: CALL_OW 69
14778: ST_TO_ADDR
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
14779: LD_VAR 0 3
14783: PPUSH
14784: LD_EXP 69
14788: PUSH
14789: LD_INT 1
14791: ARRAY
14792: PUSH
14793: LD_INT 1
14795: ARRAY
14796: PPUSH
14797: LD_EXP 69
14801: PUSH
14802: LD_INT 1
14804: ARRAY
14805: PUSH
14806: LD_INT 2
14808: ARRAY
14809: PPUSH
14810: LD_EXP 69
14814: PUSH
14815: LD_INT 1
14817: ARRAY
14818: PUSH
14819: LD_INT 3
14821: ARRAY
14822: PPUSH
14823: LD_EXP 69
14827: PUSH
14828: LD_INT 1
14830: ARRAY
14831: PUSH
14832: LD_INT 4
14834: ARRAY
14835: PPUSH
14836: CALL_OW 205
// end ;
14840: LD_VAR 0 1
14844: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
14845: LD_INT 0
14847: PPUSH
14848: PPUSH
14849: PPUSH
14850: PPUSH
14851: PPUSH
14852: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14853: LD_ADDR_VAR 0 7
14857: PUSH
14858: LD_INT 22
14860: PUSH
14861: LD_VAR 0 1
14865: PUSH
14866: EMPTY
14867: LIST
14868: LIST
14869: PUSH
14870: LD_INT 25
14872: PUSH
14873: LD_INT 9
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: EMPTY
14881: LIST
14882: LIST
14883: PPUSH
14884: CALL_OW 69
14888: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14889: LD_ADDR_VAR 0 8
14893: PUSH
14894: LD_INT 22
14896: PUSH
14897: LD_VAR 0 2
14901: PUSH
14902: EMPTY
14903: LIST
14904: LIST
14905: PUSH
14906: LD_INT 3
14908: PUSH
14909: LD_INT 21
14911: PUSH
14912: LD_INT 3
14914: PUSH
14915: EMPTY
14916: LIST
14917: LIST
14918: PUSH
14919: EMPTY
14920: LIST
14921: LIST
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PPUSH
14927: CALL_OW 69
14931: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14932: LD_ADDR_VAR 0 5
14936: PUSH
14937: LD_INT 1
14939: PPUSH
14940: LD_INT 3
14942: PPUSH
14943: CALL_OW 12
14947: ST_TO_ADDR
// for i = 1 to list do
14948: LD_ADDR_VAR 0 6
14952: PUSH
14953: DOUBLE
14954: LD_INT 1
14956: DEC
14957: ST_TO_ADDR
14958: LD_VAR 0 7
14962: PUSH
14963: FOR_TO
14964: IFFALSE 15954
// for ta in filter do
14966: LD_ADDR_VAR 0 4
14970: PUSH
14971: LD_VAR 0 8
14975: PUSH
14976: FOR_IN
14977: IFFALSE 15950
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
14979: LD_VAR 0 7
14983: PUSH
14984: LD_VAR 0 6
14988: ARRAY
14989: PPUSH
14990: LD_VAR 0 4
14994: PPUSH
14995: CALL_OW 296
14999: PUSH
15000: LD_INT 15
15002: LESSEQUAL
15003: IFFALSE 15948
// begin case c of 1 :
15005: LD_VAR 0 5
15009: PUSH
15010: LD_INT 1
15012: DOUBLE
15013: EQUAL
15014: IFTRUE 15018
15016: GO 15450
15018: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
15019: LD_VAR 0 7
15023: PUSH
15024: LD_VAR 0 6
15028: ARRAY
15029: PPUSH
15030: LD_VAR 0 4
15034: PPUSH
15035: CALL_OW 250
15039: PPUSH
15040: LD_VAR 0 4
15044: PPUSH
15045: CALL_OW 251
15049: PPUSH
15050: CALL_OW 154
// if eventVar2 = 0 then
15054: LD_EXP 67
15058: PUSH
15059: LD_INT 0
15061: EQUAL
15062: IFFALSE 15448
// begin eventVar2 = 1 ;
15064: LD_ADDR_EXP 67
15068: PUSH
15069: LD_INT 1
15071: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15072: LD_INT 245
15074: PPUSH
15075: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15079: LD_VAR 0 4
15083: PPUSH
15084: CALL_OW 250
15088: PPUSH
15089: LD_VAR 0 4
15093: PPUSH
15094: CALL_OW 251
15098: PPUSH
15099: CALL_OW 84
// DialogueOn ;
15103: CALL_OW 6
// if IsOK ( Cyrus ) then
15107: LD_EXP 5
15111: PPUSH
15112: CALL_OW 302
15116: IFFALSE 15132
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15118: LD_EXP 5
15122: PPUSH
15123: LD_STRING D9a-Cyrus-1
15125: PPUSH
15126: CALL_OW 88
// end else
15130: GO 15254
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15132: LD_INT 22
15134: PUSH
15135: LD_INT 1
15137: PUSH
15138: EMPTY
15139: LIST
15140: LIST
15141: PUSH
15142: LD_INT 26
15144: PUSH
15145: LD_INT 1
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PUSH
15152: LD_INT 2
15154: PUSH
15155: LD_INT 25
15157: PUSH
15158: LD_INT 1
15160: PUSH
15161: EMPTY
15162: LIST
15163: LIST
15164: PUSH
15165: LD_INT 25
15167: PUSH
15168: LD_INT 2
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: PUSH
15175: LD_INT 25
15177: PUSH
15178: LD_INT 3
15180: PUSH
15181: EMPTY
15182: LIST
15183: LIST
15184: PUSH
15185: LD_INT 25
15187: PUSH
15188: LD_INT 4
15190: PUSH
15191: EMPTY
15192: LIST
15193: LIST
15194: PUSH
15195: LD_INT 25
15197: PUSH
15198: LD_INT 5
15200: PUSH
15201: EMPTY
15202: LIST
15203: LIST
15204: PUSH
15205: EMPTY
15206: LIST
15207: LIST
15208: LIST
15209: LIST
15210: LIST
15211: LIST
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: LIST
15217: PPUSH
15218: CALL_OW 69
15222: PUSH
15223: LD_EXP 1
15227: PUSH
15228: LD_EXP 14
15232: PUSH
15233: LD_EXP 5
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: LIST
15242: DIFF
15243: PPUSH
15244: LD_STRING D9a-Sol1-1
15246: PPUSH
15247: LD_STRING D9a-Sol1-1
15249: PPUSH
15250: CALL 11409 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15254: LD_INT 22
15256: PUSH
15257: LD_INT 1
15259: PUSH
15260: EMPTY
15261: LIST
15262: LIST
15263: PUSH
15264: LD_INT 26
15266: PUSH
15267: LD_INT 1
15269: PUSH
15270: EMPTY
15271: LIST
15272: LIST
15273: PUSH
15274: LD_INT 2
15276: PUSH
15277: LD_INT 25
15279: PUSH
15280: LD_INT 1
15282: PUSH
15283: EMPTY
15284: LIST
15285: LIST
15286: PUSH
15287: LD_INT 25
15289: PUSH
15290: LD_INT 2
15292: PUSH
15293: EMPTY
15294: LIST
15295: LIST
15296: PUSH
15297: LD_INT 25
15299: PUSH
15300: LD_INT 3
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: LD_INT 25
15309: PUSH
15310: LD_INT 4
15312: PUSH
15313: EMPTY
15314: LIST
15315: LIST
15316: PUSH
15317: LD_INT 25
15319: PUSH
15320: LD_INT 5
15322: PUSH
15323: EMPTY
15324: LIST
15325: LIST
15326: PUSH
15327: EMPTY
15328: LIST
15329: LIST
15330: LIST
15331: LIST
15332: LIST
15333: LIST
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: LIST
15339: PPUSH
15340: CALL_OW 69
15344: PUSH
15345: LD_EXP 1
15349: PUSH
15350: LD_EXP 14
15354: PUSH
15355: LD_EXP 5
15359: PUSH
15360: EMPTY
15361: LIST
15362: LIST
15363: LIST
15364: DIFF
15365: PPUSH
15366: LD_STRING D9b-Sol1-1
15368: PPUSH
15369: LD_STRING D9b-Sol1-1
15371: PPUSH
15372: CALL 11409 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15376: LD_STRING 09_arInfo
15378: PPUSH
15379: LD_INT 0
15381: PPUSH
15382: CALL_OW 30
15386: PUSH
15387: LD_INT 1
15389: EQUAL
15390: IFFALSE 15404
// Say ( JMM , D9a-JMM-1 ) ;
15392: LD_EXP 1
15396: PPUSH
15397: LD_STRING D9a-JMM-1
15399: PPUSH
15400: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15404: LD_EXP 1
15408: PPUSH
15409: LD_STRING D9c-JMM-1
15411: PPUSH
15412: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15416: LD_INT 12
15418: PPUSH
15419: LD_INT 1
15421: PPUSH
15422: CALL_OW 321
15426: PUSH
15427: LD_INT 2
15429: EQUAL
15430: IFFALSE 15444
// Say ( JMM , D9c-JMM-1a ) ;
15432: LD_EXP 1
15436: PPUSH
15437: LD_STRING D9c-JMM-1a
15439: PPUSH
15440: CALL_OW 88
// DialogueOff ;
15444: CALL_OW 7
// end ; end ; 2 :
15448: GO 15948
15450: LD_INT 2
15452: DOUBLE
15453: EQUAL
15454: IFTRUE 15458
15456: GO 15916
15458: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
15459: LD_VAR 0 7
15463: PUSH
15464: LD_VAR 0 6
15468: ARRAY
15469: PPUSH
15470: LD_VAR 0 4
15474: PPUSH
15475: CALL_OW 250
15479: PUSH
15480: LD_INT 1
15482: NEG
15483: PPUSH
15484: LD_INT 1
15486: PPUSH
15487: CALL_OW 12
15491: PLUS
15492: PPUSH
15493: LD_VAR 0 4
15497: PPUSH
15498: CALL_OW 251
15502: PUSH
15503: LD_INT 1
15505: NEG
15506: PPUSH
15507: LD_INT 1
15509: PPUSH
15510: CALL_OW 12
15514: PLUS
15515: PPUSH
15516: CALL_OW 153
// if eventVar2 = 0 then
15520: LD_EXP 67
15524: PUSH
15525: LD_INT 0
15527: EQUAL
15528: IFFALSE 15914
// begin eventVar2 = 1 ;
15530: LD_ADDR_EXP 67
15534: PUSH
15535: LD_INT 1
15537: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15538: LD_INT 245
15540: PPUSH
15541: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15545: LD_VAR 0 4
15549: PPUSH
15550: CALL_OW 250
15554: PPUSH
15555: LD_VAR 0 4
15559: PPUSH
15560: CALL_OW 251
15564: PPUSH
15565: CALL_OW 84
// DialogueOn ;
15569: CALL_OW 6
// if IsOK ( Cyrus ) then
15573: LD_EXP 5
15577: PPUSH
15578: CALL_OW 302
15582: IFFALSE 15598
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15584: LD_EXP 5
15588: PPUSH
15589: LD_STRING D9a-Cyrus-1
15591: PPUSH
15592: CALL_OW 88
// end else
15596: GO 15720
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15598: LD_INT 22
15600: PUSH
15601: LD_INT 1
15603: PUSH
15604: EMPTY
15605: LIST
15606: LIST
15607: PUSH
15608: LD_INT 26
15610: PUSH
15611: LD_INT 1
15613: PUSH
15614: EMPTY
15615: LIST
15616: LIST
15617: PUSH
15618: LD_INT 2
15620: PUSH
15621: LD_INT 25
15623: PUSH
15624: LD_INT 1
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: PUSH
15631: LD_INT 25
15633: PUSH
15634: LD_INT 2
15636: PUSH
15637: EMPTY
15638: LIST
15639: LIST
15640: PUSH
15641: LD_INT 25
15643: PUSH
15644: LD_INT 3
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 25
15653: PUSH
15654: LD_INT 4
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: LD_INT 25
15663: PUSH
15664: LD_INT 5
15666: PUSH
15667: EMPTY
15668: LIST
15669: LIST
15670: PUSH
15671: EMPTY
15672: LIST
15673: LIST
15674: LIST
15675: LIST
15676: LIST
15677: LIST
15678: PUSH
15679: EMPTY
15680: LIST
15681: LIST
15682: LIST
15683: PPUSH
15684: CALL_OW 69
15688: PUSH
15689: LD_EXP 1
15693: PUSH
15694: LD_EXP 14
15698: PUSH
15699: LD_EXP 5
15703: PUSH
15704: EMPTY
15705: LIST
15706: LIST
15707: LIST
15708: DIFF
15709: PPUSH
15710: LD_STRING D9a-Sol1-1
15712: PPUSH
15713: LD_STRING D9a-Sol1-1
15715: PPUSH
15716: CALL 11409 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15720: LD_INT 22
15722: PUSH
15723: LD_INT 1
15725: PUSH
15726: EMPTY
15727: LIST
15728: LIST
15729: PUSH
15730: LD_INT 26
15732: PUSH
15733: LD_INT 1
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: PUSH
15740: LD_INT 2
15742: PUSH
15743: LD_INT 25
15745: PUSH
15746: LD_INT 1
15748: PUSH
15749: EMPTY
15750: LIST
15751: LIST
15752: PUSH
15753: LD_INT 25
15755: PUSH
15756: LD_INT 2
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: PUSH
15763: LD_INT 25
15765: PUSH
15766: LD_INT 3
15768: PUSH
15769: EMPTY
15770: LIST
15771: LIST
15772: PUSH
15773: LD_INT 25
15775: PUSH
15776: LD_INT 4
15778: PUSH
15779: EMPTY
15780: LIST
15781: LIST
15782: PUSH
15783: LD_INT 25
15785: PUSH
15786: LD_INT 5
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: LIST
15797: LIST
15798: LIST
15799: LIST
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: LIST
15805: PPUSH
15806: CALL_OW 69
15810: PUSH
15811: LD_EXP 1
15815: PUSH
15816: LD_EXP 14
15820: PUSH
15821: LD_EXP 5
15825: PUSH
15826: EMPTY
15827: LIST
15828: LIST
15829: LIST
15830: DIFF
15831: PPUSH
15832: LD_STRING D9b-Sol1-1
15834: PPUSH
15835: LD_STRING D9b-Sol1-1
15837: PPUSH
15838: CALL 11409 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15842: LD_STRING 09_arInfo
15844: PPUSH
15845: LD_INT 0
15847: PPUSH
15848: CALL_OW 30
15852: PUSH
15853: LD_INT 1
15855: EQUAL
15856: IFFALSE 15870
// Say ( JMM , D9a-JMM-1 ) ;
15858: LD_EXP 1
15862: PPUSH
15863: LD_STRING D9a-JMM-1
15865: PPUSH
15866: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15870: LD_EXP 1
15874: PPUSH
15875: LD_STRING D9c-JMM-1
15877: PPUSH
15878: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15882: LD_INT 12
15884: PPUSH
15885: LD_INT 1
15887: PPUSH
15888: CALL_OW 321
15892: PUSH
15893: LD_INT 2
15895: EQUAL
15896: IFFALSE 15910
// Say ( JMM , D9c-JMM-1a ) ;
15898: LD_EXP 1
15902: PPUSH
15903: LD_STRING D9c-JMM-1a
15905: PPUSH
15906: CALL_OW 88
// DialogueOff ;
15910: CALL_OW 7
// end ; end ; 3 :
15914: GO 15948
15916: LD_INT 3
15918: DOUBLE
15919: EQUAL
15920: IFTRUE 15924
15922: GO 15947
15924: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15925: LD_VAR 0 7
15929: PUSH
15930: LD_VAR 0 6
15934: ARRAY
15935: PPUSH
15936: LD_VAR 0 4
15940: PPUSH
15941: CALL_OW 115
15945: GO 15948
15947: POP
// end ; end ;
15948: GO 14976
15950: POP
15951: POP
15952: GO 14963
15954: POP
15955: POP
// end ;
15956: LD_VAR 0 3
15960: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
15961: LD_INT 0
15963: PPUSH
15964: PPUSH
15965: PPUSH
15966: PPUSH
// for i = 1 to 72 do
15967: LD_ADDR_VAR 0 5
15971: PUSH
15972: DOUBLE
15973: LD_INT 1
15975: DEC
15976: ST_TO_ADDR
15977: LD_INT 72
15979: PUSH
15980: FOR_TO
15981: IFFALSE 16039
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
15983: LD_VAR 0 5
15987: PPUSH
15988: LD_VAR 0 1
15992: PPUSH
15993: CALL_OW 321
15997: PUSH
15998: LD_INT 1
16000: EQUAL
16001: PUSH
16002: LD_VAR 0 5
16006: PPUSH
16007: LD_VAR 0 3
16011: PPUSH
16012: CALL_OW 482
16016: PUSH
16017: LD_INT 1
16019: EQUAL
16020: AND
16021: IFFALSE 16037
// AddComResearch ( lab , i ) ;
16023: LD_VAR 0 2
16027: PPUSH
16028: LD_VAR 0 5
16032: PPUSH
16033: CALL_OW 184
16037: GO 15980
16039: POP
16040: POP
// end ;
16041: LD_VAR 0 4
16045: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
16046: LD_INT 0
16048: PPUSH
16049: PPUSH
16050: PPUSH
16051: PPUSH
16052: PPUSH
16053: PPUSH
16054: PPUSH
16055: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
16056: LD_ADDR_VAR 0 6
16060: PUSH
16061: LD_INT 22
16063: PUSH
16064: LD_VAR 0 1
16068: PUSH
16069: EMPTY
16070: LIST
16071: LIST
16072: PUSH
16073: LD_INT 56
16075: PUSH
16076: EMPTY
16077: LIST
16078: PUSH
16079: LD_INT 24
16081: PUSH
16082: LD_INT 700
16084: PUSH
16085: EMPTY
16086: LIST
16087: LIST
16088: PUSH
16089: LD_INT 3
16091: PUSH
16092: LD_INT 60
16094: PUSH
16095: EMPTY
16096: LIST
16097: PUSH
16098: EMPTY
16099: LIST
16100: LIST
16101: PUSH
16102: LD_INT 2
16104: PUSH
16105: LD_INT 25
16107: PUSH
16108: LD_INT 1
16110: PUSH
16111: EMPTY
16112: LIST
16113: LIST
16114: PUSH
16115: LD_INT 25
16117: PUSH
16118: LD_INT 9
16120: PUSH
16121: EMPTY
16122: LIST
16123: LIST
16124: PUSH
16125: EMPTY
16126: LIST
16127: LIST
16128: LIST
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: LIST
16134: LIST
16135: LIST
16136: PPUSH
16137: CALL_OW 69
16141: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
16142: LD_ADDR_VAR 0 7
16146: PUSH
16147: LD_INT 22
16149: PUSH
16150: LD_VAR 0 1
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 30
16161: PUSH
16162: LD_INT 32
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: LD_INT 58
16171: PUSH
16172: EMPTY
16173: LIST
16174: PUSH
16175: LD_INT 24
16177: PUSH
16178: LD_INT 251
16180: PUSH
16181: EMPTY
16182: LIST
16183: LIST
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: LIST
16189: LIST
16190: PPUSH
16191: CALL_OW 69
16195: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
16196: LD_ADDR_VAR 0 9
16200: PUSH
16201: LD_INT 22
16203: PUSH
16204: LD_VAR 0 1
16208: PUSH
16209: EMPTY
16210: LIST
16211: LIST
16212: PUSH
16213: LD_INT 2
16215: PUSH
16216: LD_INT 30
16218: PUSH
16219: LD_INT 4
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PUSH
16226: LD_INT 30
16228: PUSH
16229: LD_INT 5
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: EMPTY
16237: LIST
16238: LIST
16239: LIST
16240: PUSH
16241: LD_INT 24
16243: PUSH
16244: LD_INT 251
16246: PUSH
16247: EMPTY
16248: LIST
16249: LIST
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: LIST
16255: PPUSH
16256: CALL_OW 69
16260: ST_TO_ADDR
// if barrackList > 0 then
16261: LD_VAR 0 9
16265: PUSH
16266: LD_INT 0
16268: GREATER
16269: IFFALSE 16404
// begin if turretList = 0 then
16271: LD_VAR 0 7
16275: PUSH
16276: LD_INT 0
16278: EQUAL
16279: IFFALSE 16328
// begin for i in soldiers_list do
16281: LD_ADDR_VAR 0 4
16285: PUSH
16286: LD_VAR 0 6
16290: PUSH
16291: FOR_IN
16292: IFFALSE 16324
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
16294: LD_VAR 0 4
16298: PPUSH
16299: LD_VAR 0 9
16303: PUSH
16304: LD_INT 1
16306: PPUSH
16307: LD_VAR 0 9
16311: PPUSH
16312: CALL_OW 12
16316: ARRAY
16317: PPUSH
16318: CALL_OW 120
16322: GO 16291
16324: POP
16325: POP
// end else
16326: GO 16404
// begin for i in barrackList do
16328: LD_ADDR_VAR 0 4
16332: PUSH
16333: LD_VAR 0 9
16337: PUSH
16338: FOR_IN
16339: IFFALSE 16402
// begin insideUnits = UnitsInside ( i ) ;
16341: LD_ADDR_VAR 0 10
16345: PUSH
16346: LD_VAR 0 4
16350: PPUSH
16351: CALL_OW 313
16355: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
16356: LD_VAR 0 10
16360: PUSH
16361: LD_INT 1
16363: ARRAY
16364: PPUSH
16365: LD_VAR 0 7
16369: PUSH
16370: LD_INT 1
16372: ARRAY
16373: PPUSH
16374: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
16378: LD_VAR 0 6
16382: PUSH
16383: LD_INT 1
16385: ARRAY
16386: PPUSH
16387: LD_VAR 0 7
16391: PUSH
16392: LD_INT 1
16394: ARRAY
16395: PPUSH
16396: CALL_OW 120
// end ;
16400: GO 16338
16402: POP
16403: POP
// end ; end ; end ;
16404: LD_VAR 0 3
16408: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
16409: LD_INT 0
16411: PPUSH
16412: PPUSH
16413: PPUSH
16414: PPUSH
16415: PPUSH
16416: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
16417: LD_ADDR_VAR 0 6
16421: PUSH
16422: LD_VAR 0 2
16426: PPUSH
16427: CALL_OW 313
16431: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
16432: LD_ADDR_VAR 0 7
16436: PUSH
16437: LD_INT 22
16439: PUSH
16440: LD_VAR 0 1
16444: PUSH
16445: EMPTY
16446: LIST
16447: LIST
16448: PUSH
16449: LD_INT 25
16451: PUSH
16452: LD_INT 2
16454: PUSH
16455: EMPTY
16456: LIST
16457: LIST
16458: PUSH
16459: LD_INT 24
16461: PUSH
16462: LD_INT 1000
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: PUSH
16469: LD_INT 3
16471: PUSH
16472: LD_INT 54
16474: PUSH
16475: EMPTY
16476: LIST
16477: PUSH
16478: EMPTY
16479: LIST
16480: LIST
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: LIST
16486: LIST
16487: PPUSH
16488: CALL_OW 69
16492: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
16493: LD_ADDR_VAR 0 4
16497: PUSH
16498: LD_INT 22
16500: PUSH
16501: LD_VAR 0 1
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 21
16512: PUSH
16513: LD_INT 3
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 3
16522: PUSH
16523: LD_INT 24
16525: PUSH
16526: LD_INT 1000
16528: PUSH
16529: EMPTY
16530: LIST
16531: LIST
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: PUSH
16537: EMPTY
16538: LIST
16539: LIST
16540: LIST
16541: PUSH
16542: EMPTY
16543: LIST
16544: PPUSH
16545: CALL_OW 69
16549: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
16550: LD_VAR 0 4
16554: NOT
16555: PUSH
16556: LD_VAR 0 7
16560: NOT
16561: AND
16562: PUSH
16563: LD_EXP 43
16567: NOT
16568: AND
16569: IFFALSE 16573
// exit ;
16571: GO 16764
// if buildings_list > 0 and engineerOkInside then
16573: LD_VAR 0 4
16577: PUSH
16578: LD_INT 0
16580: GREATER
16581: PUSH
16582: LD_VAR 0 6
16586: AND
16587: IFFALSE 16641
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16589: LD_ADDR_VAR 0 5
16593: PUSH
16594: LD_INT 22
16596: PUSH
16597: LD_VAR 0 1
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: LD_INT 25
16608: PUSH
16609: LD_INT 2
16611: PUSH
16612: EMPTY
16613: LIST
16614: LIST
16615: PUSH
16616: EMPTY
16617: LIST
16618: LIST
16619: PPUSH
16620: CALL_OW 69
16624: PUSH
16625: FOR_IN
16626: IFFALSE 16639
// ComExitBuilding ( i ) ;
16628: LD_VAR 0 5
16632: PPUSH
16633: CALL_OW 122
16637: GO 16625
16639: POP
16640: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
16641: LD_VAR 0 4
16645: PUSH
16646: LD_INT 0
16648: GREATER
16649: PUSH
16650: LD_VAR 0 7
16654: PUSH
16655: LD_INT 0
16657: GREATER
16658: AND
16659: IFFALSE 16713
// begin for i in engineerOkOutside do
16661: LD_ADDR_VAR 0 5
16665: PUSH
16666: LD_VAR 0 7
16670: PUSH
16671: FOR_IN
16672: IFFALSE 16711
// for j in buildings_list do
16674: LD_ADDR_VAR 0 8
16678: PUSH
16679: LD_VAR 0 4
16683: PUSH
16684: FOR_IN
16685: IFFALSE 16707
// ComRepairBuilding ( i , j [ 1 ] ) ;
16687: LD_VAR 0 5
16691: PPUSH
16692: LD_VAR 0 8
16696: PUSH
16697: LD_INT 1
16699: ARRAY
16700: PPUSH
16701: CALL_OW 130
16705: GO 16684
16707: POP
16708: POP
16709: GO 16671
16711: POP
16712: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
16713: LD_VAR 0 4
16717: PUSH
16718: LD_INT 0
16720: EQUAL
16721: PUSH
16722: LD_VAR 0 7
16726: PUSH
16727: LD_INT 0
16729: GREATER
16730: AND
16731: IFFALSE 16764
// for i in engineerOkOutside do
16733: LD_ADDR_VAR 0 5
16737: PUSH
16738: LD_VAR 0 7
16742: PUSH
16743: FOR_IN
16744: IFFALSE 16762
// ComEnterUnit ( i , building ) ;
16746: LD_VAR 0 5
16750: PPUSH
16751: LD_VAR 0 2
16755: PPUSH
16756: CALL_OW 120
16760: GO 16743
16762: POP
16763: POP
// end ;
16764: LD_VAR 0 3
16768: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
16769: LD_INT 0
16771: PPUSH
16772: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
16773: LD_INT 22
16775: PUSH
16776: LD_VAR 0 1
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PUSH
16785: LD_INT 25
16787: PUSH
16788: LD_INT 2
16790: PUSH
16791: EMPTY
16792: LIST
16793: LIST
16794: PUSH
16795: EMPTY
16796: LIST
16797: LIST
16798: PPUSH
16799: CALL_OW 69
16803: PUSH
16804: LD_INT 0
16806: GREATER
16807: PUSH
16808: LD_INT 22
16810: PUSH
16811: LD_VAR 0 1
16815: PUSH
16816: EMPTY
16817: LIST
16818: LIST
16819: PUSH
16820: LD_INT 21
16822: PUSH
16823: LD_INT 3
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 3
16832: PUSH
16833: LD_INT 24
16835: PUSH
16836: LD_INT 1000
16838: PUSH
16839: EMPTY
16840: LIST
16841: LIST
16842: PUSH
16843: EMPTY
16844: LIST
16845: LIST
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: LIST
16851: PPUSH
16852: CALL_OW 69
16856: PUSH
16857: LD_INT 0
16859: EQUAL
16860: AND
16861: PUSH
16862: LD_VAR 0 2
16866: PUSH
16867: LD_INT 0
16869: GREATER
16870: AND
16871: IFFALSE 16970
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16873: LD_ADDR_VAR 0 4
16877: PUSH
16878: LD_INT 22
16880: PUSH
16881: LD_VAR 0 1
16885: PUSH
16886: EMPTY
16887: LIST
16888: LIST
16889: PUSH
16890: LD_INT 25
16892: PUSH
16893: LD_INT 2
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PPUSH
16904: CALL_OW 69
16908: PUSH
16909: FOR_IN
16910: IFFALSE 16968
// begin AddComExitBuilding ( i ) ;
16912: LD_VAR 0 4
16916: PPUSH
16917: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
16921: LD_VAR 0 4
16925: PPUSH
16926: LD_VAR 0 2
16930: PUSH
16931: LD_INT 1
16933: ARRAY
16934: PPUSH
16935: LD_VAR 0 2
16939: PUSH
16940: LD_INT 2
16942: ARRAY
16943: PPUSH
16944: LD_VAR 0 2
16948: PUSH
16949: LD_INT 3
16951: ARRAY
16952: PPUSH
16953: LD_VAR 0 2
16957: PUSH
16958: LD_INT 4
16960: ARRAY
16961: PPUSH
16962: CALL_OW 205
// end ;
16966: GO 16909
16968: POP
16969: POP
// end ; end ;
16970: LD_VAR 0 3
16974: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
16975: LD_INT 0
16977: PPUSH
16978: PPUSH
16979: PPUSH
16980: PPUSH
16981: PPUSH
16982: PPUSH
16983: PPUSH
16984: PPUSH
16985: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
16986: LD_ADDR_VAR 0 6
16990: PUSH
16991: LD_INT 22
16993: PUSH
16994: LD_VAR 0 1
16998: PUSH
16999: EMPTY
17000: LIST
17001: LIST
17002: PUSH
17003: LD_INT 25
17005: PUSH
17006: LD_INT 4
17008: PUSH
17009: EMPTY
17010: LIST
17011: LIST
17012: PUSH
17013: LD_INT 24
17015: PUSH
17016: LD_INT 251
17018: PUSH
17019: EMPTY
17020: LIST
17021: LIST
17022: PUSH
17023: EMPTY
17024: LIST
17025: LIST
17026: LIST
17027: PPUSH
17028: CALL_OW 69
17032: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
17033: LD_ADDR_VAR 0 7
17037: PUSH
17038: LD_VAR 0 3
17042: PPUSH
17043: LD_INT 22
17045: PUSH
17046: LD_VAR 0 1
17050: PUSH
17051: EMPTY
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 25
17057: PUSH
17058: LD_INT 4
17060: PUSH
17061: EMPTY
17062: LIST
17063: LIST
17064: PUSH
17065: LD_INT 50
17067: PUSH
17068: EMPTY
17069: LIST
17070: PUSH
17071: EMPTY
17072: LIST
17073: LIST
17074: LIST
17075: PPUSH
17076: CALL_OW 70
17080: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
17081: LD_ADDR_VAR 0 10
17085: PUSH
17086: LD_VAR 0 3
17090: PPUSH
17091: LD_INT 22
17093: PUSH
17094: LD_VAR 0 1
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PUSH
17103: LD_INT 21
17105: PUSH
17106: LD_INT 1
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: LD_INT 3
17115: PUSH
17116: LD_INT 25
17118: PUSH
17119: LD_INT 3
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PUSH
17126: EMPTY
17127: LIST
17128: LIST
17129: PUSH
17130: LD_INT 3
17132: PUSH
17133: LD_INT 24
17135: PUSH
17136: LD_INT 750
17138: PUSH
17139: EMPTY
17140: LIST
17141: LIST
17142: PUSH
17143: EMPTY
17144: LIST
17145: LIST
17146: PUSH
17147: EMPTY
17148: LIST
17149: LIST
17150: LIST
17151: LIST
17152: PPUSH
17153: CALL_OW 70
17157: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17158: LD_ADDR_VAR 0 11
17162: PUSH
17163: LD_VAR 0 2
17167: PPUSH
17168: LD_INT 22
17170: PUSH
17171: LD_VAR 0 1
17175: PUSH
17176: EMPTY
17177: LIST
17178: LIST
17179: PUSH
17180: LD_INT 21
17182: PUSH
17183: LD_INT 1
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: LD_INT 3
17192: PUSH
17193: LD_INT 25
17195: PUSH
17196: LD_INT 3
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: EMPTY
17204: LIST
17205: LIST
17206: PUSH
17207: LD_INT 3
17209: PUSH
17210: LD_INT 24
17212: PUSH
17213: LD_INT 1000
17215: PUSH
17216: EMPTY
17217: LIST
17218: LIST
17219: PUSH
17220: EMPTY
17221: LIST
17222: LIST
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: LIST
17228: LIST
17229: PPUSH
17230: CALL_OW 70
17234: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
17235: LD_VAR 0 10
17239: NOT
17240: PUSH
17241: LD_VAR 0 7
17245: NOT
17246: AND
17247: PUSH
17248: LD_VAR 0 11
17252: NOT
17253: AND
17254: IFFALSE 17258
// exit ;
17256: GO 17518
// if damageUnits > 0 and sci_list > 0 then
17258: LD_VAR 0 10
17262: PUSH
17263: LD_INT 0
17265: GREATER
17266: PUSH
17267: LD_VAR 0 6
17271: PUSH
17272: LD_INT 0
17274: GREATER
17275: AND
17276: IFFALSE 17309
// for i in damageUnits do
17278: LD_ADDR_VAR 0 8
17282: PUSH
17283: LD_VAR 0 10
17287: PUSH
17288: FOR_IN
17289: IFFALSE 17307
// ComMoveToArea ( i , healArea ) ;
17291: LD_VAR 0 8
17295: PPUSH
17296: LD_VAR 0 2
17300: PPUSH
17301: CALL_OW 113
17305: GO 17288
17307: POP
17308: POP
// if unitsToHeal > 0 and sci_list > 0 then
17309: LD_VAR 0 11
17313: PUSH
17314: LD_INT 0
17316: GREATER
17317: PUSH
17318: LD_VAR 0 6
17322: PUSH
17323: LD_INT 0
17325: GREATER
17326: AND
17327: IFFALSE 17386
// begin for i in sci_list do
17329: LD_ADDR_VAR 0 8
17333: PUSH
17334: LD_VAR 0 6
17338: PUSH
17339: FOR_IN
17340: IFFALSE 17384
// begin ComExitBuilding ( i ) ;
17342: LD_VAR 0 8
17346: PPUSH
17347: CALL_OW 122
// for j in unitsToHeal do
17351: LD_ADDR_VAR 0 9
17355: PUSH
17356: LD_VAR 0 11
17360: PUSH
17361: FOR_IN
17362: IFFALSE 17380
// AddComHeal ( i , j ) ;
17364: LD_VAR 0 8
17368: PPUSH
17369: LD_VAR 0 9
17373: PPUSH
17374: CALL_OW 188
17378: GO 17361
17380: POP
17381: POP
// end ;
17382: GO 17339
17384: POP
17385: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
17386: LD_VAR 0 10
17390: PUSH
17391: LD_INT 0
17393: EQUAL
17394: PUSH
17395: LD_VAR 0 11
17399: PUSH
17400: LD_INT 0
17402: EQUAL
17403: AND
17404: PUSH
17405: LD_VAR 0 7
17409: PUSH
17410: LD_INT 0
17412: GREATER
17413: AND
17414: IFFALSE 17518
// for i in sci_listOutside do
17416: LD_ADDR_VAR 0 8
17420: PUSH
17421: LD_VAR 0 7
17425: PUSH
17426: FOR_IN
17427: IFFALSE 17516
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
17429: LD_ADDR_VAR 0 12
17433: PUSH
17434: LD_INT 22
17436: PUSH
17437: LD_VAR 0 1
17441: PUSH
17442: EMPTY
17443: LIST
17444: LIST
17445: PUSH
17446: LD_INT 21
17448: PUSH
17449: LD_INT 3
17451: PUSH
17452: EMPTY
17453: LIST
17454: LIST
17455: PUSH
17456: LD_INT 30
17458: PUSH
17459: LD_INT 8
17461: PUSH
17462: EMPTY
17463: LIST
17464: LIST
17465: PUSH
17466: EMPTY
17467: LIST
17468: LIST
17469: LIST
17470: PPUSH
17471: CALL_OW 69
17475: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
17476: LD_ADDR_VAR 0 13
17480: PUSH
17481: LD_INT 1
17483: PPUSH
17484: LD_VAR 0 12
17488: PPUSH
17489: CALL_OW 12
17493: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
17494: LD_VAR 0 8
17498: PPUSH
17499: LD_VAR 0 12
17503: PUSH
17504: LD_VAR 0 13
17508: ARRAY
17509: PPUSH
17510: CALL_OW 120
// end ;
17514: GO 17426
17516: POP
17517: POP
// end ;
17518: LD_VAR 0 5
17522: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
17523: LD_INT 0
17525: PPUSH
17526: PPUSH
17527: PPUSH
17528: PPUSH
17529: PPUSH
17530: PPUSH
17531: PPUSH
17532: PPUSH
17533: PPUSH
17534: PPUSH
17535: PPUSH
// amChassisTab = [ ] ;
17536: LD_ADDR_VAR 0 19
17540: PUSH
17541: EMPTY
17542: ST_TO_ADDR
// arChassisTab = [ ] ;
17543: LD_ADDR_VAR 0 18
17547: PUSH
17548: EMPTY
17549: ST_TO_ADDR
// ruChassisTab = [ ] ;
17550: LD_ADDR_VAR 0 17
17554: PUSH
17555: EMPTY
17556: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
17557: LD_INT 35
17559: PPUSH
17560: CALL_OW 67
// if nation = 1 then
17564: LD_VAR 0 5
17568: PUSH
17569: LD_INT 1
17571: EQUAL
17572: IFFALSE 18077
// begin uc_side = side ;
17574: LD_ADDR_OWVAR 20
17578: PUSH
17579: LD_VAR 0 2
17583: ST_TO_ADDR
// uc_nation = nation ;
17584: LD_ADDR_OWVAR 21
17588: PUSH
17589: LD_VAR 0 5
17593: ST_TO_ADDR
// vc_engine = vehengine ;
17594: LD_ADDR_OWVAR 39
17598: PUSH
17599: LD_VAR 0 6
17603: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17604: LD_ADDR_OWVAR 38
17608: PUSH
17609: LD_VAR 0 7
17613: PUSH
17614: LD_INT 1
17616: PPUSH
17617: LD_VAR 0 7
17621: PPUSH
17622: CALL_OW 12
17626: ARRAY
17627: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
17628: LD_ADDR_OWVAR 40
17632: PUSH
17633: LD_VAR 0 10
17637: PUSH
17638: LD_INT 1
17640: PPUSH
17641: LD_VAR 0 10
17645: PPUSH
17646: CALL_OW 12
17650: ARRAY
17651: ST_TO_ADDR
// for j = 1 to AMWeapon do
17652: LD_ADDR_VAR 0 14
17656: PUSH
17657: DOUBLE
17658: LD_INT 1
17660: DEC
17661: ST_TO_ADDR
17662: LD_VAR 0 10
17666: PUSH
17667: FOR_TO
17668: IFFALSE 17969
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
17670: LD_VAR 0 10
17674: PUSH
17675: LD_VAR 0 14
17679: ARRAY
17680: PUSH
17681: LD_INT 2
17683: EQUAL
17684: PUSH
17685: LD_VAR 0 10
17689: PUSH
17690: LD_VAR 0 14
17694: ARRAY
17695: PUSH
17696: LD_INT 3
17698: EQUAL
17699: OR
17700: IFFALSE 17753
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
17702: LD_ADDR_VAR 0 19
17706: PUSH
17707: LD_INT 1
17709: PUSH
17710: LD_INT 2
17712: PUSH
17713: LD_INT 3
17715: PUSH
17716: LD_INT 4
17718: PUSH
17719: LD_INT 5
17721: PUSH
17722: EMPTY
17723: LIST
17724: LIST
17725: LIST
17726: LIST
17727: LIST
17728: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17729: LD_ADDR_OWVAR 37
17733: PUSH
17734: LD_VAR 0 19
17738: PUSH
17739: LD_INT 1
17741: PPUSH
17742: LD_VAR 0 19
17746: PPUSH
17747: CALL_OW 12
17751: ARRAY
17752: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
17753: LD_VAR 0 10
17757: PUSH
17758: LD_VAR 0 14
17762: ARRAY
17763: PUSH
17764: LD_INT 4
17766: EQUAL
17767: PUSH
17768: LD_VAR 0 10
17772: PUSH
17773: LD_VAR 0 14
17777: ARRAY
17778: PUSH
17779: LD_INT 5
17781: EQUAL
17782: OR
17783: PUSH
17784: LD_VAR 0 10
17788: PUSH
17789: LD_VAR 0 14
17793: ARRAY
17794: PUSH
17795: LD_INT 9
17797: EQUAL
17798: OR
17799: PUSH
17800: LD_VAR 0 10
17804: PUSH
17805: LD_VAR 0 14
17809: ARRAY
17810: PUSH
17811: LD_INT 11
17813: EQUAL
17814: OR
17815: PUSH
17816: LD_VAR 0 10
17820: PUSH
17821: LD_VAR 0 14
17825: ARRAY
17826: PUSH
17827: LD_INT 7
17829: EQUAL
17830: OR
17831: IFFALSE 17880
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
17833: LD_ADDR_VAR 0 19
17837: PUSH
17838: LD_INT 2
17840: PUSH
17841: LD_INT 3
17843: PUSH
17844: LD_INT 4
17846: PUSH
17847: LD_INT 5
17849: PUSH
17850: EMPTY
17851: LIST
17852: LIST
17853: LIST
17854: LIST
17855: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17856: LD_ADDR_OWVAR 37
17860: PUSH
17861: LD_VAR 0 19
17865: PUSH
17866: LD_INT 1
17868: PPUSH
17869: LD_VAR 0 19
17873: PPUSH
17874: CALL_OW 12
17878: ARRAY
17879: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
17880: LD_VAR 0 10
17884: PUSH
17885: LD_VAR 0 14
17889: ARRAY
17890: PUSH
17891: LD_INT 8
17893: EQUAL
17894: PUSH
17895: LD_VAR 0 10
17899: PUSH
17900: LD_VAR 0 14
17904: ARRAY
17905: PUSH
17906: LD_INT 6
17908: EQUAL
17909: OR
17910: PUSH
17911: LD_VAR 0 10
17915: PUSH
17916: LD_VAR 0 14
17920: ARRAY
17921: PUSH
17922: LD_INT 10
17924: EQUAL
17925: OR
17926: IFFALSE 17967
// begin amChassisTab = [ 4 , 5 ] ;
17928: LD_ADDR_VAR 0 19
17932: PUSH
17933: LD_INT 4
17935: PUSH
17936: LD_INT 5
17938: PUSH
17939: EMPTY
17940: LIST
17941: LIST
17942: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17943: LD_ADDR_OWVAR 37
17947: PUSH
17948: LD_VAR 0 19
17952: PUSH
17953: LD_INT 1
17955: PPUSH
17956: LD_VAR 0 19
17960: PPUSH
17961: CALL_OW 12
17965: ARRAY
17966: ST_TO_ADDR
// end ; end ;
17967: GO 17667
17969: POP
17970: POP
// veh = CreateVehicle ;
17971: LD_ADDR_VAR 0 16
17975: PUSH
17976: CALL_OW 45
17980: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17981: LD_VAR 0 16
17985: PPUSH
17986: LD_VAR 0 1
17990: PPUSH
17991: LD_INT 0
17993: PPUSH
17994: CALL_OW 49
// if vc_control = 1 then
17998: LD_OWVAR 38
18002: PUSH
18003: LD_INT 1
18005: EQUAL
18006: IFFALSE 18063
// begin hc_gallery =  ;
18008: LD_ADDR_OWVAR 33
18012: PUSH
18013: LD_STRING 
18015: ST_TO_ADDR
// hc_name =  ;
18016: LD_ADDR_OWVAR 26
18020: PUSH
18021: LD_STRING 
18023: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18024: LD_INT 0
18026: PPUSH
18027: LD_INT 3
18029: PPUSH
18030: LD_VAR 0 4
18034: PPUSH
18035: CALL_OW 380
// un = CreateHuman ;
18039: LD_ADDR_VAR 0 15
18043: PUSH
18044: CALL_OW 44
18048: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18049: LD_VAR 0 15
18053: PPUSH
18054: LD_VAR 0 16
18058: PPUSH
18059: CALL_OW 52
// end ; i = i + 1 ;
18063: LD_ADDR_VAR 0 13
18067: PUSH
18068: LD_VAR 0 13
18072: PUSH
18073: LD_INT 1
18075: PLUS
18076: ST_TO_ADDR
// end ; if nation = 2 then
18077: LD_VAR 0 5
18081: PUSH
18082: LD_INT 2
18084: EQUAL
18085: IFFALSE 18507
// begin uc_side = side ;
18087: LD_ADDR_OWVAR 20
18091: PUSH
18092: LD_VAR 0 2
18096: ST_TO_ADDR
// uc_nation = nation ;
18097: LD_ADDR_OWVAR 21
18101: PUSH
18102: LD_VAR 0 5
18106: ST_TO_ADDR
// vc_engine = vehengine ;
18107: LD_ADDR_OWVAR 39
18111: PUSH
18112: LD_VAR 0 6
18116: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18117: LD_ADDR_OWVAR 38
18121: PUSH
18122: LD_VAR 0 7
18126: PUSH
18127: LD_INT 1
18129: PPUSH
18130: LD_VAR 0 7
18134: PPUSH
18135: CALL_OW 12
18139: ARRAY
18140: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
18141: LD_ADDR_OWVAR 40
18145: PUSH
18146: LD_VAR 0 9
18150: PUSH
18151: LD_INT 1
18153: PPUSH
18154: LD_VAR 0 9
18158: PPUSH
18159: CALL_OW 12
18163: ARRAY
18164: ST_TO_ADDR
// for j = 1 to ARWeapons do
18165: LD_ADDR_VAR 0 14
18169: PUSH
18170: DOUBLE
18171: LD_INT 1
18173: DEC
18174: ST_TO_ADDR
18175: LD_VAR 0 9
18179: PUSH
18180: FOR_TO
18181: IFFALSE 18399
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
18183: LD_VAR 0 9
18187: PUSH
18188: LD_VAR 0 14
18192: ARRAY
18193: PUSH
18194: LD_INT 24
18196: EQUAL
18197: PUSH
18198: LD_VAR 0 9
18202: PUSH
18203: LD_VAR 0 14
18207: ARRAY
18208: PUSH
18209: LD_INT 22
18211: EQUAL
18212: OR
18213: PUSH
18214: LD_VAR 0 9
18218: PUSH
18219: LD_VAR 0 14
18223: ARRAY
18224: PUSH
18225: LD_INT 23
18227: EQUAL
18228: OR
18229: PUSH
18230: LD_VAR 0 9
18234: PUSH
18235: LD_VAR 0 14
18239: ARRAY
18240: PUSH
18241: LD_INT 30
18243: EQUAL
18244: OR
18245: IFFALSE 18282
// begin arChassisTab = [ 14 ] ;
18247: LD_ADDR_VAR 0 18
18251: PUSH
18252: LD_INT 14
18254: PUSH
18255: EMPTY
18256: LIST
18257: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18258: LD_ADDR_OWVAR 37
18262: PUSH
18263: LD_VAR 0 18
18267: PUSH
18268: LD_INT 1
18270: PPUSH
18271: LD_VAR 0 18
18275: PPUSH
18276: CALL_OW 12
18280: ARRAY
18281: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
18282: LD_VAR 0 9
18286: PUSH
18287: LD_VAR 0 14
18291: ARRAY
18292: PUSH
18293: LD_INT 29
18295: EQUAL
18296: PUSH
18297: LD_VAR 0 9
18301: PUSH
18302: LD_VAR 0 14
18306: ARRAY
18307: PUSH
18308: LD_INT 28
18310: EQUAL
18311: OR
18312: PUSH
18313: LD_VAR 0 9
18317: PUSH
18318: LD_VAR 0 14
18322: ARRAY
18323: PUSH
18324: LD_INT 27
18326: EQUAL
18327: OR
18328: PUSH
18329: LD_VAR 0 9
18333: PUSH
18334: LD_VAR 0 14
18338: ARRAY
18339: PUSH
18340: LD_INT 26
18342: EQUAL
18343: OR
18344: PUSH
18345: LD_VAR 0 9
18349: PUSH
18350: LD_VAR 0 14
18354: ARRAY
18355: PUSH
18356: LD_INT 25
18358: EQUAL
18359: OR
18360: IFFALSE 18397
// begin arChassisTab = [ 14 ] ;
18362: LD_ADDR_VAR 0 18
18366: PUSH
18367: LD_INT 14
18369: PUSH
18370: EMPTY
18371: LIST
18372: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18373: LD_ADDR_OWVAR 37
18377: PUSH
18378: LD_VAR 0 18
18382: PUSH
18383: LD_INT 1
18385: PPUSH
18386: LD_VAR 0 18
18390: PPUSH
18391: CALL_OW 12
18395: ARRAY
18396: ST_TO_ADDR
// end ; end ;
18397: GO 18180
18399: POP
18400: POP
// veh = CreateVehicle ;
18401: LD_ADDR_VAR 0 16
18405: PUSH
18406: CALL_OW 45
18410: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18411: LD_VAR 0 16
18415: PPUSH
18416: LD_VAR 0 1
18420: PPUSH
18421: LD_INT 0
18423: PPUSH
18424: CALL_OW 49
// if vc_control = 1 then
18428: LD_OWVAR 38
18432: PUSH
18433: LD_INT 1
18435: EQUAL
18436: IFFALSE 18493
// begin hc_gallery =  ;
18438: LD_ADDR_OWVAR 33
18442: PUSH
18443: LD_STRING 
18445: ST_TO_ADDR
// hc_name =  ;
18446: LD_ADDR_OWVAR 26
18450: PUSH
18451: LD_STRING 
18453: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18454: LD_INT 0
18456: PPUSH
18457: LD_INT 3
18459: PPUSH
18460: LD_VAR 0 4
18464: PPUSH
18465: CALL_OW 380
// un = CreateHuman ;
18469: LD_ADDR_VAR 0 15
18473: PUSH
18474: CALL_OW 44
18478: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18479: LD_VAR 0 15
18483: PPUSH
18484: LD_VAR 0 16
18488: PPUSH
18489: CALL_OW 52
// end ; i = i + 1 ;
18493: LD_ADDR_VAR 0 13
18497: PUSH
18498: LD_VAR 0 13
18502: PUSH
18503: LD_INT 1
18505: PLUS
18506: ST_TO_ADDR
// end ; if nation = 3 then
18507: LD_VAR 0 5
18511: PUSH
18512: LD_INT 3
18514: EQUAL
18515: IFFALSE 18921
// begin uc_side = side ;
18517: LD_ADDR_OWVAR 20
18521: PUSH
18522: LD_VAR 0 2
18526: ST_TO_ADDR
// uc_nation = nation ;
18527: LD_ADDR_OWVAR 21
18531: PUSH
18532: LD_VAR 0 5
18536: ST_TO_ADDR
// vc_engine = vehengine ;
18537: LD_ADDR_OWVAR 39
18541: PUSH
18542: LD_VAR 0 6
18546: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18547: LD_ADDR_OWVAR 38
18551: PUSH
18552: LD_VAR 0 7
18556: PUSH
18557: LD_INT 1
18559: PPUSH
18560: LD_VAR 0 7
18564: PPUSH
18565: CALL_OW 12
18569: ARRAY
18570: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
18571: LD_ADDR_OWVAR 40
18575: PUSH
18576: LD_VAR 0 8
18580: PUSH
18581: LD_INT 1
18583: PPUSH
18584: LD_VAR 0 8
18588: PPUSH
18589: CALL_OW 12
18593: ARRAY
18594: ST_TO_ADDR
// for j = 1 to RuWeapons do
18595: LD_ADDR_VAR 0 14
18599: PUSH
18600: DOUBLE
18601: LD_INT 1
18603: DEC
18604: ST_TO_ADDR
18605: LD_VAR 0 8
18609: PUSH
18610: FOR_TO
18611: IFFALSE 18813
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
18613: LD_VAR 0 8
18617: PUSH
18618: LD_VAR 0 14
18622: ARRAY
18623: PUSH
18624: LD_INT 42
18626: EQUAL
18627: PUSH
18628: LD_VAR 0 8
18632: PUSH
18633: LD_VAR 0 14
18637: ARRAY
18638: PUSH
18639: LD_INT 43
18641: EQUAL
18642: OR
18643: PUSH
18644: LD_VAR 0 8
18648: PUSH
18649: LD_VAR 0 14
18653: ARRAY
18654: PUSH
18655: LD_INT 44
18657: EQUAL
18658: OR
18659: PUSH
18660: LD_VAR 0 8
18664: PUSH
18665: LD_VAR 0 14
18669: ARRAY
18670: PUSH
18671: LD_INT 45
18673: EQUAL
18674: OR
18675: PUSH
18676: LD_VAR 0 8
18680: PUSH
18681: LD_VAR 0 14
18685: ARRAY
18686: PUSH
18687: LD_INT 49
18689: EQUAL
18690: OR
18691: IFFALSE 18740
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
18693: LD_ADDR_VAR 0 17
18697: PUSH
18698: LD_INT 21
18700: PUSH
18701: LD_INT 22
18703: PUSH
18704: LD_INT 23
18706: PUSH
18707: LD_INT 24
18709: PUSH
18710: EMPTY
18711: LIST
18712: LIST
18713: LIST
18714: LIST
18715: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18716: LD_ADDR_OWVAR 37
18720: PUSH
18721: LD_VAR 0 17
18725: PUSH
18726: LD_INT 1
18728: PPUSH
18729: LD_VAR 0 17
18733: PPUSH
18734: CALL_OW 12
18738: ARRAY
18739: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
18740: LD_VAR 0 8
18744: PUSH
18745: LD_VAR 0 14
18749: ARRAY
18750: PUSH
18751: LD_INT 46
18753: EQUAL
18754: PUSH
18755: LD_VAR 0 8
18759: PUSH
18760: LD_VAR 0 14
18764: ARRAY
18765: PUSH
18766: LD_INT 47
18768: EQUAL
18769: OR
18770: IFFALSE 18811
// begin ruChassisTab = [ 23 , 24 ] ;
18772: LD_ADDR_VAR 0 17
18776: PUSH
18777: LD_INT 23
18779: PUSH
18780: LD_INT 24
18782: PUSH
18783: EMPTY
18784: LIST
18785: LIST
18786: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18787: LD_ADDR_OWVAR 37
18791: PUSH
18792: LD_VAR 0 17
18796: PUSH
18797: LD_INT 1
18799: PPUSH
18800: LD_VAR 0 17
18804: PPUSH
18805: CALL_OW 12
18809: ARRAY
18810: ST_TO_ADDR
// end ; end ;
18811: GO 18610
18813: POP
18814: POP
// veh = CreateVehicle ;
18815: LD_ADDR_VAR 0 16
18819: PUSH
18820: CALL_OW 45
18824: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18825: LD_VAR 0 16
18829: PPUSH
18830: LD_VAR 0 1
18834: PPUSH
18835: LD_INT 0
18837: PPUSH
18838: CALL_OW 49
// if vc_control = 1 then
18842: LD_OWVAR 38
18846: PUSH
18847: LD_INT 1
18849: EQUAL
18850: IFFALSE 18907
// begin hc_gallery =  ;
18852: LD_ADDR_OWVAR 33
18856: PUSH
18857: LD_STRING 
18859: ST_TO_ADDR
// hc_name =  ;
18860: LD_ADDR_OWVAR 26
18864: PUSH
18865: LD_STRING 
18867: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18868: LD_INT 0
18870: PPUSH
18871: LD_INT 3
18873: PPUSH
18874: LD_VAR 0 4
18878: PPUSH
18879: CALL_OW 380
// un = CreateHuman ;
18883: LD_ADDR_VAR 0 15
18887: PUSH
18888: CALL_OW 44
18892: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18893: LD_VAR 0 15
18897: PPUSH
18898: LD_VAR 0 16
18902: PPUSH
18903: CALL_OW 52
// end ; i = i + 1 ;
18907: LD_ADDR_VAR 0 13
18911: PUSH
18912: LD_VAR 0 13
18916: PUSH
18917: LD_INT 1
18919: PLUS
18920: ST_TO_ADDR
// end ; until i = vehCount ;
18921: LD_VAR 0 13
18925: PUSH
18926: LD_VAR 0 3
18930: EQUAL
18931: IFFALSE 17557
// repeat wait ( 0 0$1 ) ;
18933: LD_INT 35
18935: PPUSH
18936: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
18940: LD_ADDR_VAR 0 20
18944: PUSH
18945: LD_INT 22
18947: PUSH
18948: LD_VAR 0 2
18952: PUSH
18953: EMPTY
18954: LIST
18955: LIST
18956: PUSH
18957: LD_INT 21
18959: PUSH
18960: LD_INT 2
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 24
18969: PUSH
18970: LD_INT 650
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: LIST
18981: PPUSH
18982: CALL_OW 69
18986: ST_TO_ADDR
// if vehicleOK_list > 0 then
18987: LD_VAR 0 20
18991: PUSH
18992: LD_INT 0
18994: GREATER
18995: IFFALSE 19186
// begin for i in vehicleOK_list do
18997: LD_ADDR_VAR 0 13
19001: PUSH
19002: LD_VAR 0 20
19006: PUSH
19007: FOR_IN
19008: IFFALSE 19184
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19010: LD_ADDR_VAR 0 21
19014: PUSH
19015: LD_INT 22
19017: PUSH
19018: LD_VAR 0 11
19022: PUSH
19023: EMPTY
19024: LIST
19025: LIST
19026: PPUSH
19027: CALL_OW 69
19031: PPUSH
19032: LD_VAR 0 13
19036: PPUSH
19037: CALL_OW 74
19041: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19042: LD_ADDR_VAR 0 22
19046: PUSH
19047: LD_INT 22
19049: PUSH
19050: LD_VAR 0 11
19054: PUSH
19055: EMPTY
19056: LIST
19057: LIST
19058: PUSH
19059: LD_INT 2
19061: PUSH
19062: LD_INT 59
19064: PUSH
19065: EMPTY
19066: LIST
19067: PUSH
19068: LD_INT 21
19070: PUSH
19071: LD_INT 1
19073: PUSH
19074: EMPTY
19075: LIST
19076: LIST
19077: PUSH
19078: LD_INT 21
19080: PUSH
19081: LD_INT 2
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: LIST
19092: LIST
19093: PUSH
19094: EMPTY
19095: LIST
19096: LIST
19097: PUSH
19098: EMPTY
19099: LIST
19100: PPUSH
19101: CALL_OW 69
19105: PPUSH
19106: LD_VAR 0 13
19110: PPUSH
19111: CALL_OW 74
19115: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19116: LD_VAR 0 13
19120: PPUSH
19121: LD_VAR 0 21
19125: PPUSH
19126: CALL_OW 296
19130: PUSH
19131: LD_INT 8
19133: PLUS
19134: PUSH
19135: LD_VAR 0 13
19139: PPUSH
19140: LD_VAR 0 22
19144: PPUSH
19145: CALL_OW 296
19149: LESS
19150: IFFALSE 19168
// begin ComAttackUnit ( i , target1 ) ;
19152: LD_VAR 0 13
19156: PPUSH
19157: LD_VAR 0 21
19161: PPUSH
19162: CALL_OW 115
// end else
19166: GO 19182
// begin ComAttackUnit ( i , target2 ) ;
19168: LD_VAR 0 13
19172: PPUSH
19173: LD_VAR 0 22
19177: PPUSH
19178: CALL_OW 115
// end ; end ;
19182: GO 19007
19184: POP
19185: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
19186: LD_INT 22
19188: PUSH
19189: LD_VAR 0 2
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 21
19200: PUSH
19201: LD_INT 2
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PPUSH
19212: CALL_OW 69
19216: PUSH
19217: LD_INT 0
19219: EQUAL
19220: IFFALSE 18933
// end ;
19222: LD_VAR 0 12
19226: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
19227: LD_INT 0
19229: PPUSH
19230: PPUSH
19231: PPUSH
19232: PPUSH
19233: PPUSH
19234: PPUSH
19235: PPUSH
19236: PPUSH
19237: PPUSH
19238: PPUSH
19239: PPUSH
// for i = 1 to soldierCount do
19240: LD_ADDR_VAR 0 13
19244: PUSH
19245: DOUBLE
19246: LD_INT 1
19248: DEC
19249: ST_TO_ADDR
19250: LD_VAR 0 3
19254: PUSH
19255: FOR_TO
19256: IFFALSE 19338
// begin uc_side = side ;
19258: LD_ADDR_OWVAR 20
19262: PUSH
19263: LD_VAR 0 1
19267: ST_TO_ADDR
// uc_nation = nation ;
19268: LD_ADDR_OWVAR 21
19272: PUSH
19273: LD_VAR 0 2
19277: ST_TO_ADDR
// hc_name =  ;
19278: LD_ADDR_OWVAR 26
19282: PUSH
19283: LD_STRING 
19285: ST_TO_ADDR
// hc_gallery =  ;
19286: LD_ADDR_OWVAR 33
19290: PUSH
19291: LD_STRING 
19293: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
19294: LD_INT 0
19296: PPUSH
19297: LD_INT 1
19299: PPUSH
19300: LD_VAR 0 8
19304: PPUSH
19305: CALL_OW 380
// un = CreateHuman ;
19309: LD_ADDR_VAR 0 15
19313: PUSH
19314: CALL_OW 44
19318: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19319: LD_VAR 0 15
19323: PPUSH
19324: LD_VAR 0 9
19328: PPUSH
19329: LD_INT 0
19331: PPUSH
19332: CALL_OW 49
// end ;
19336: GO 19255
19338: POP
19339: POP
// for i = 1 to sniperCount do
19340: LD_ADDR_VAR 0 13
19344: PUSH
19345: DOUBLE
19346: LD_INT 1
19348: DEC
19349: ST_TO_ADDR
19350: LD_VAR 0 4
19354: PUSH
19355: FOR_TO
19356: IFFALSE 19438
// begin uc_side = side ;
19358: LD_ADDR_OWVAR 20
19362: PUSH
19363: LD_VAR 0 1
19367: ST_TO_ADDR
// uc_nation = nation ;
19368: LD_ADDR_OWVAR 21
19372: PUSH
19373: LD_VAR 0 2
19377: ST_TO_ADDR
// hc_name =  ;
19378: LD_ADDR_OWVAR 26
19382: PUSH
19383: LD_STRING 
19385: ST_TO_ADDR
// hc_gallery =  ;
19386: LD_ADDR_OWVAR 33
19390: PUSH
19391: LD_STRING 
19393: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
19394: LD_INT 0
19396: PPUSH
19397: LD_INT 5
19399: PPUSH
19400: LD_VAR 0 8
19404: PPUSH
19405: CALL_OW 380
// un = CreateHuman ;
19409: LD_ADDR_VAR 0 15
19413: PUSH
19414: CALL_OW 44
19418: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19419: LD_VAR 0 15
19423: PPUSH
19424: LD_VAR 0 9
19428: PPUSH
19429: LD_INT 0
19431: PPUSH
19432: CALL_OW 49
// end ;
19436: GO 19355
19438: POP
19439: POP
// for i = 1 to bazookCount do
19440: LD_ADDR_VAR 0 13
19444: PUSH
19445: DOUBLE
19446: LD_INT 1
19448: DEC
19449: ST_TO_ADDR
19450: LD_VAR 0 5
19454: PUSH
19455: FOR_TO
19456: IFFALSE 19538
// begin uc_side = side ;
19458: LD_ADDR_OWVAR 20
19462: PUSH
19463: LD_VAR 0 1
19467: ST_TO_ADDR
// uc_nation = nation ;
19468: LD_ADDR_OWVAR 21
19472: PUSH
19473: LD_VAR 0 2
19477: ST_TO_ADDR
// hc_name =  ;
19478: LD_ADDR_OWVAR 26
19482: PUSH
19483: LD_STRING 
19485: ST_TO_ADDR
// hc_gallery =  ;
19486: LD_ADDR_OWVAR 33
19490: PUSH
19491: LD_STRING 
19493: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
19494: LD_INT 0
19496: PPUSH
19497: LD_INT 9
19499: PPUSH
19500: LD_VAR 0 8
19504: PPUSH
19505: CALL_OW 380
// un = CreateHuman ;
19509: LD_ADDR_VAR 0 15
19513: PUSH
19514: CALL_OW 44
19518: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19519: LD_VAR 0 15
19523: PPUSH
19524: LD_VAR 0 9
19528: PPUSH
19529: LD_INT 0
19531: PPUSH
19532: CALL_OW 49
// end ;
19536: GO 19455
19538: POP
19539: POP
// for i = 1 to mortalCount do
19540: LD_ADDR_VAR 0 13
19544: PUSH
19545: DOUBLE
19546: LD_INT 1
19548: DEC
19549: ST_TO_ADDR
19550: LD_VAR 0 6
19554: PUSH
19555: FOR_TO
19556: IFFALSE 19638
// begin uc_side = side ;
19558: LD_ADDR_OWVAR 20
19562: PUSH
19563: LD_VAR 0 1
19567: ST_TO_ADDR
// uc_nation = nation ;
19568: LD_ADDR_OWVAR 21
19572: PUSH
19573: LD_VAR 0 2
19577: ST_TO_ADDR
// hc_name =  ;
19578: LD_ADDR_OWVAR 26
19582: PUSH
19583: LD_STRING 
19585: ST_TO_ADDR
// hc_gallery =  ;
19586: LD_ADDR_OWVAR 33
19590: PUSH
19591: LD_STRING 
19593: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
19594: LD_INT 0
19596: PPUSH
19597: LD_INT 8
19599: PPUSH
19600: LD_VAR 0 8
19604: PPUSH
19605: CALL_OW 380
// un = CreateHuman ;
19609: LD_ADDR_VAR 0 15
19613: PUSH
19614: CALL_OW 44
19618: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19619: LD_VAR 0 15
19623: PPUSH
19624: LD_VAR 0 9
19628: PPUSH
19629: LD_INT 0
19631: PPUSH
19632: CALL_OW 49
// end ;
19636: GO 19555
19638: POP
19639: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
19640: LD_ADDR_VAR 0 18
19644: PUSH
19645: LD_INT 22
19647: PUSH
19648: LD_VAR 0 1
19652: PUSH
19653: EMPTY
19654: LIST
19655: LIST
19656: PUSH
19657: LD_INT 2
19659: PUSH
19660: LD_INT 25
19662: PUSH
19663: LD_INT 1
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PUSH
19670: LD_INT 25
19672: PUSH
19673: LD_INT 5
19675: PUSH
19676: EMPTY
19677: LIST
19678: LIST
19679: PUSH
19680: LD_INT 25
19682: PUSH
19683: LD_INT 8
19685: PUSH
19686: EMPTY
19687: LIST
19688: LIST
19689: PUSH
19690: LD_INT 25
19692: PUSH
19693: LD_INT 9
19695: PUSH
19696: EMPTY
19697: LIST
19698: LIST
19699: PUSH
19700: EMPTY
19701: LIST
19702: LIST
19703: LIST
19704: LIST
19705: LIST
19706: PUSH
19707: EMPTY
19708: LIST
19709: LIST
19710: PPUSH
19711: CALL_OW 69
19715: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
19716: LD_ADDR_VAR 0 17
19720: PUSH
19721: LD_INT 22
19723: PUSH
19724: LD_VAR 0 1
19728: PUSH
19729: EMPTY
19730: LIST
19731: LIST
19732: PUSH
19733: LD_INT 25
19735: PUSH
19736: LD_INT 4
19738: PUSH
19739: EMPTY
19740: LIST
19741: LIST
19742: PUSH
19743: EMPTY
19744: LIST
19745: LIST
19746: PPUSH
19747: CALL_OW 69
19751: ST_TO_ADDR
// for i in medic_list do
19752: LD_ADDR_VAR 0 13
19756: PUSH
19757: LD_VAR 0 17
19761: PUSH
19762: FOR_IN
19763: IFFALSE 19781
// ComMoveToArea ( i , healArea ) ;
19765: LD_VAR 0 13
19769: PPUSH
19770: LD_VAR 0 10
19774: PPUSH
19775: CALL_OW 113
19779: GO 19762
19781: POP
19782: POP
// repeat wait ( 0 0$1 ) ;
19783: LD_INT 35
19785: PPUSH
19786: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
19790: LD_ADDR_VAR 0 16
19794: PUSH
19795: LD_INT 22
19797: PUSH
19798: LD_VAR 0 1
19802: PUSH
19803: EMPTY
19804: LIST
19805: LIST
19806: PUSH
19807: LD_INT 1
19809: PUSH
19810: LD_INT 3
19812: PUSH
19813: LD_INT 24
19815: PUSH
19816: LD_INT 550
19818: PUSH
19819: EMPTY
19820: LIST
19821: LIST
19822: PUSH
19823: EMPTY
19824: LIST
19825: LIST
19826: PUSH
19827: LD_INT 24
19829: PUSH
19830: LD_INT 250
19832: PUSH
19833: EMPTY
19834: LIST
19835: LIST
19836: PUSH
19837: EMPTY
19838: LIST
19839: LIST
19840: LIST
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: PPUSH
19846: CALL_OW 69
19850: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
19851: LD_ADDR_VAR 0 18
19855: PUSH
19856: LD_INT 22
19858: PUSH
19859: LD_VAR 0 1
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 2
19870: PUSH
19871: LD_INT 25
19873: PUSH
19874: LD_INT 1
19876: PUSH
19877: EMPTY
19878: LIST
19879: LIST
19880: PUSH
19881: LD_INT 25
19883: PUSH
19884: LD_INT 5
19886: PUSH
19887: EMPTY
19888: LIST
19889: LIST
19890: PUSH
19891: LD_INT 25
19893: PUSH
19894: LD_INT 8
19896: PUSH
19897: EMPTY
19898: LIST
19899: LIST
19900: PUSH
19901: LD_INT 25
19903: PUSH
19904: LD_INT 9
19906: PUSH
19907: EMPTY
19908: LIST
19909: LIST
19910: PUSH
19911: EMPTY
19912: LIST
19913: LIST
19914: LIST
19915: LIST
19916: LIST
19917: PUSH
19918: LD_INT 24
19920: PUSH
19921: LD_INT 1000
19923: PUSH
19924: EMPTY
19925: LIST
19926: LIST
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: LIST
19932: PPUSH
19933: CALL_OW 69
19937: ST_TO_ADDR
// if medicCount > 0 then
19938: LD_VAR 0 7
19942: PUSH
19943: LD_INT 0
19945: GREATER
19946: IFFALSE 20020
// begin if damageUnit_list > 0 then
19948: LD_VAR 0 16
19952: PUSH
19953: LD_INT 0
19955: GREATER
19956: IFFALSE 20020
// begin for i in damageUnit_list do
19958: LD_ADDR_VAR 0 13
19962: PUSH
19963: LD_VAR 0 16
19967: PUSH
19968: FOR_IN
19969: IFFALSE 20018
// begin ComMoveToArea ( i , healArea ) ;
19971: LD_VAR 0 13
19975: PPUSH
19976: LD_VAR 0 10
19980: PPUSH
19981: CALL_OW 113
// for j in medic_list do
19985: LD_ADDR_VAR 0 14
19989: PUSH
19990: LD_VAR 0 17
19994: PUSH
19995: FOR_IN
19996: IFFALSE 20014
// AddComHeal ( j , i ) ;
19998: LD_VAR 0 14
20002: PPUSH
20003: LD_VAR 0 13
20007: PPUSH
20008: CALL_OW 188
20012: GO 19995
20014: POP
20015: POP
// end ;
20016: GO 19968
20018: POP
20019: POP
// end ; end ; for i in soldiersOK_list do
20020: LD_ADDR_VAR 0 13
20024: PUSH
20025: LD_VAR 0 18
20029: PUSH
20030: FOR_IN
20031: IFFALSE 20207
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20033: LD_ADDR_VAR 0 21
20037: PUSH
20038: LD_INT 22
20040: PUSH
20041: LD_VAR 0 11
20045: PUSH
20046: EMPTY
20047: LIST
20048: LIST
20049: PPUSH
20050: CALL_OW 69
20054: PPUSH
20055: LD_VAR 0 13
20059: PPUSH
20060: CALL_OW 74
20064: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20065: LD_ADDR_VAR 0 22
20069: PUSH
20070: LD_INT 22
20072: PUSH
20073: LD_VAR 0 11
20077: PUSH
20078: EMPTY
20079: LIST
20080: LIST
20081: PUSH
20082: LD_INT 2
20084: PUSH
20085: LD_INT 59
20087: PUSH
20088: EMPTY
20089: LIST
20090: PUSH
20091: LD_INT 21
20093: PUSH
20094: LD_INT 1
20096: PUSH
20097: EMPTY
20098: LIST
20099: LIST
20100: PUSH
20101: LD_INT 21
20103: PUSH
20104: LD_INT 2
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PUSH
20111: EMPTY
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: PUSH
20117: EMPTY
20118: LIST
20119: LIST
20120: PUSH
20121: EMPTY
20122: LIST
20123: PPUSH
20124: CALL_OW 69
20128: PPUSH
20129: LD_VAR 0 13
20133: PPUSH
20134: CALL_OW 74
20138: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20139: LD_VAR 0 13
20143: PPUSH
20144: LD_VAR 0 21
20148: PPUSH
20149: CALL_OW 296
20153: PUSH
20154: LD_INT 8
20156: PLUS
20157: PUSH
20158: LD_VAR 0 13
20162: PPUSH
20163: LD_VAR 0 22
20167: PPUSH
20168: CALL_OW 296
20172: LESS
20173: IFFALSE 20191
// begin ComAttackUnit ( i , target1 ) ;
20175: LD_VAR 0 13
20179: PPUSH
20180: LD_VAR 0 21
20184: PPUSH
20185: CALL_OW 115
// end else
20189: GO 20205
// begin ComAttackUnit ( i , target2 ) ;
20191: LD_VAR 0 13
20195: PPUSH
20196: LD_VAR 0 22
20200: PPUSH
20201: CALL_OW 115
// end ; end ;
20205: GO 20030
20207: POP
20208: POP
// for i in soldiersOK_list do
20209: LD_ADDR_VAR 0 13
20213: PUSH
20214: LD_VAR 0 18
20218: PUSH
20219: FOR_IN
20220: IFFALSE 20396
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20222: LD_ADDR_VAR 0 21
20226: PUSH
20227: LD_INT 22
20229: PUSH
20230: LD_VAR 0 11
20234: PUSH
20235: EMPTY
20236: LIST
20237: LIST
20238: PPUSH
20239: CALL_OW 69
20243: PPUSH
20244: LD_VAR 0 13
20248: PPUSH
20249: CALL_OW 74
20253: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20254: LD_ADDR_VAR 0 22
20258: PUSH
20259: LD_INT 22
20261: PUSH
20262: LD_VAR 0 11
20266: PUSH
20267: EMPTY
20268: LIST
20269: LIST
20270: PUSH
20271: LD_INT 2
20273: PUSH
20274: LD_INT 59
20276: PUSH
20277: EMPTY
20278: LIST
20279: PUSH
20280: LD_INT 21
20282: PUSH
20283: LD_INT 1
20285: PUSH
20286: EMPTY
20287: LIST
20288: LIST
20289: PUSH
20290: LD_INT 21
20292: PUSH
20293: LD_INT 2
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PUSH
20300: EMPTY
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: PUSH
20306: EMPTY
20307: LIST
20308: LIST
20309: PUSH
20310: EMPTY
20311: LIST
20312: PPUSH
20313: CALL_OW 69
20317: PPUSH
20318: LD_VAR 0 13
20322: PPUSH
20323: CALL_OW 74
20327: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20328: LD_VAR 0 13
20332: PPUSH
20333: LD_VAR 0 21
20337: PPUSH
20338: CALL_OW 296
20342: PUSH
20343: LD_INT 8
20345: PLUS
20346: PUSH
20347: LD_VAR 0 13
20351: PPUSH
20352: LD_VAR 0 22
20356: PPUSH
20357: CALL_OW 296
20361: LESS
20362: IFFALSE 20380
// begin ComAttackUnit ( i , target1 ) ;
20364: LD_VAR 0 13
20368: PPUSH
20369: LD_VAR 0 21
20373: PPUSH
20374: CALL_OW 115
// end else
20378: GO 20394
// begin ComAttackUnit ( i , target2 ) ;
20380: LD_VAR 0 13
20384: PPUSH
20385: LD_VAR 0 22
20389: PPUSH
20390: CALL_OW 115
// end ; end ;
20394: GO 20219
20396: POP
20397: POP
// until soldiersOK_list = [ ] ;
20398: LD_VAR 0 18
20402: PUSH
20403: EMPTY
20404: EQUAL
20405: IFFALSE 19783
// end ;
20407: LD_VAR 0 12
20411: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
20412: LD_INT 0
20414: PPUSH
20415: PPUSH
20416: PPUSH
20417: PPUSH
20418: PPUSH
20419: PPUSH
20420: PPUSH
// repeat wait ( 0 0$1 ) ;
20421: LD_INT 35
20423: PPUSH
20424: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
20428: LD_ADDR_VAR 0 7
20432: PUSH
20433: LD_INT 22
20435: PUSH
20436: LD_INT 2
20438: PUSH
20439: EMPTY
20440: LIST
20441: LIST
20442: PUSH
20443: LD_INT 25
20445: PUSH
20446: LD_INT 4
20448: PUSH
20449: EMPTY
20450: LIST
20451: LIST
20452: PUSH
20453: LD_INT 3
20455: PUSH
20456: LD_INT 60
20458: PUSH
20459: EMPTY
20460: LIST
20461: PUSH
20462: EMPTY
20463: LIST
20464: LIST
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: LIST
20470: PPUSH
20471: CALL_OW 69
20475: ST_TO_ADDR
// if not tmp then
20476: LD_VAR 0 7
20480: NOT
20481: IFFALSE 20485
// continue ;
20483: GO 20421
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20485: LD_ADDR_VAR 0 3
20489: PUSH
20490: LD_INT 5
20492: PPUSH
20493: LD_INT 22
20495: PUSH
20496: LD_INT 0
20498: PUSH
20499: EMPTY
20500: LIST
20501: LIST
20502: PUSH
20503: LD_INT 25
20505: PUSH
20506: LD_INT 12
20508: PUSH
20509: EMPTY
20510: LIST
20511: LIST
20512: PUSH
20513: EMPTY
20514: LIST
20515: LIST
20516: PPUSH
20517: CALL_OW 70
20521: PUSH
20522: FOR_IN
20523: IFFALSE 20556
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
20525: LD_VAR 0 7
20529: PPUSH
20530: LD_VAR 0 3
20534: PPUSH
20535: CALL_OW 250
20539: PPUSH
20540: LD_VAR 0 3
20544: PPUSH
20545: CALL_OW 251
20549: PPUSH
20550: CALL_OW 131
20554: GO 20522
20556: POP
20557: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
20558: LD_INT 22
20560: PUSH
20561: LD_INT 2
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: PUSH
20568: LD_INT 25
20570: PUSH
20571: LD_INT 4
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: PPUSH
20582: CALL_OW 69
20586: PUSH
20587: LD_INT 0
20589: EQUAL
20590: PUSH
20591: LD_INT 5
20593: PPUSH
20594: LD_INT 22
20596: PUSH
20597: LD_INT 0
20599: PUSH
20600: EMPTY
20601: LIST
20602: LIST
20603: PUSH
20604: LD_INT 25
20606: PUSH
20607: LD_INT 12
20609: PUSH
20610: EMPTY
20611: LIST
20612: LIST
20613: PUSH
20614: EMPTY
20615: LIST
20616: LIST
20617: PPUSH
20618: CALL_OW 70
20622: PUSH
20623: LD_INT 2
20625: LESS
20626: OR
20627: PUSH
20628: LD_OWVAR 1
20632: PUSH
20633: LD_INT 7000
20635: GREATEREQUAL
20636: OR
20637: IFFALSE 20421
// repeat wait ( 0 0$1 ) ;
20639: LD_INT 35
20641: PPUSH
20642: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
20646: LD_ADDR_VAR 0 5
20650: PUSH
20651: LD_INT 22
20653: PUSH
20654: LD_INT 2
20656: PUSH
20657: EMPTY
20658: LIST
20659: LIST
20660: PUSH
20661: LD_INT 30
20663: PUSH
20664: LD_INT 5
20666: PUSH
20667: EMPTY
20668: LIST
20669: LIST
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PPUSH
20675: CALL_OW 69
20679: ST_TO_ADDR
// until arm ;
20680: LD_VAR 0 5
20684: IFFALSE 20639
// wait ( 0 0$25 ) ;
20686: LD_INT 875
20688: PPUSH
20689: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20693: LD_ADDR_VAR 0 6
20697: PUSH
20698: LD_INT 22
20700: PUSH
20701: LD_INT 2
20703: PUSH
20704: EMPTY
20705: LIST
20706: LIST
20707: PUSH
20708: LD_INT 2
20710: PUSH
20711: LD_INT 30
20713: PUSH
20714: LD_INT 0
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: PUSH
20721: LD_INT 30
20723: PUSH
20724: LD_INT 1
20726: PUSH
20727: EMPTY
20728: LIST
20729: LIST
20730: PUSH
20731: EMPTY
20732: LIST
20733: LIST
20734: LIST
20735: PUSH
20736: EMPTY
20737: LIST
20738: LIST
20739: PPUSH
20740: CALL_OW 69
20744: ST_TO_ADDR
// j := 0 ;
20745: LD_ADDR_VAR 0 3
20749: PUSH
20750: LD_INT 0
20752: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
20753: LD_ADDR_VAR 0 2
20757: PUSH
20758: LD_INT 22
20760: PUSH
20761: LD_INT 2
20763: PUSH
20764: EMPTY
20765: LIST
20766: LIST
20767: PUSH
20768: LD_INT 25
20770: PUSH
20771: LD_INT 12
20773: PUSH
20774: EMPTY
20775: LIST
20776: LIST
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PPUSH
20782: CALL_OW 69
20786: PUSH
20787: FOR_IN
20788: IFFALSE 20875
// begin ComMoveXY ( i , 63 , 16 ) ;
20790: LD_VAR 0 2
20794: PPUSH
20795: LD_INT 63
20797: PPUSH
20798: LD_INT 16
20800: PPUSH
20801: CALL_OW 111
// j := j + 1 ;
20805: LD_ADDR_VAR 0 3
20809: PUSH
20810: LD_VAR 0 3
20814: PUSH
20815: LD_INT 1
20817: PLUS
20818: ST_TO_ADDR
// if j < 5 then
20819: LD_VAR 0 3
20823: PUSH
20824: LD_INT 5
20826: LESS
20827: IFFALSE 20845
// b := arm [ 1 ] else
20829: LD_ADDR_VAR 0 4
20833: PUSH
20834: LD_VAR 0 5
20838: PUSH
20839: LD_INT 1
20841: ARRAY
20842: ST_TO_ADDR
20843: GO 20859
// b := dep [ 1 ] ;
20845: LD_ADDR_VAR 0 4
20849: PUSH
20850: LD_VAR 0 6
20854: PUSH
20855: LD_INT 1
20857: ARRAY
20858: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
20859: LD_VAR 0 2
20863: PPUSH
20864: LD_VAR 0 4
20868: PPUSH
20869: CALL_OW 180
// end ;
20873: GO 20787
20875: POP
20876: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
20877: LD_ADDR_VAR 0 2
20881: PUSH
20882: LD_INT 22
20884: PUSH
20885: LD_INT 2
20887: PUSH
20888: EMPTY
20889: LIST
20890: LIST
20891: PUSH
20892: LD_INT 25
20894: PUSH
20895: LD_INT 4
20897: PUSH
20898: EMPTY
20899: LIST
20900: LIST
20901: PUSH
20902: EMPTY
20903: LIST
20904: LIST
20905: PPUSH
20906: CALL_OW 69
20910: PUSH
20911: FOR_IN
20912: IFFALSE 20958
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20914: LD_VAR 0 2
20918: PPUSH
20919: LD_INT 22
20921: PUSH
20922: LD_INT 2
20924: PUSH
20925: EMPTY
20926: LIST
20927: LIST
20928: PUSH
20929: LD_INT 30
20931: PUSH
20932: LD_INT 8
20934: PUSH
20935: EMPTY
20936: LIST
20937: LIST
20938: PUSH
20939: EMPTY
20940: LIST
20941: LIST
20942: PPUSH
20943: CALL_OW 69
20947: PUSH
20948: LD_INT 1
20950: ARRAY
20951: PPUSH
20952: CALL_OW 120
20956: GO 20911
20958: POP
20959: POP
// end ;
20960: LD_VAR 0 1
20964: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
20965: LD_INT 0
20967: PPUSH
20968: PPUSH
20969: PPUSH
20970: PPUSH
20971: PPUSH
20972: PPUSH
20973: PPUSH
20974: PPUSH
20975: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
20976: LD_INT 22
20978: PUSH
20979: LD_VAR 0 1
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: PUSH
20988: LD_INT 21
20990: PUSH
20991: LD_INT 2
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: EMPTY
20999: LIST
21000: LIST
21001: PPUSH
21002: CALL_OW 69
21006: PUSH
21007: LD_VAR 0 3
21011: LESSEQUAL
21012: IFFALSE 21156
// for i = 1 to vehCount do
21014: LD_ADDR_VAR 0 10
21018: PUSH
21019: DOUBLE
21020: LD_INT 1
21022: DEC
21023: ST_TO_ADDR
21024: LD_VAR 0 3
21028: PUSH
21029: FOR_TO
21030: IFFALSE 21154
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
21032: LD_ADDR_VAR 0 12
21036: PUSH
21037: LD_VAR 0 5
21041: PUSH
21042: LD_INT 1
21044: PPUSH
21045: LD_VAR 0 5
21049: PPUSH
21050: CALL_OW 12
21054: ARRAY
21055: ST_TO_ADDR
// if randWeapon = 46 then
21056: LD_VAR 0 12
21060: PUSH
21061: LD_INT 46
21063: EQUAL
21064: IFFALSE 21109
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
21066: LD_VAR 0 2
21070: PPUSH
21071: LD_INT 24
21073: PPUSH
21074: LD_VAR 0 6
21078: PPUSH
21079: LD_VAR 0 7
21083: PUSH
21084: LD_INT 1
21086: PPUSH
21087: LD_VAR 0 7
21091: PPUSH
21092: CALL_OW 12
21096: ARRAY
21097: PPUSH
21098: LD_VAR 0 12
21102: PPUSH
21103: CALL_OW 185
21107: GO 21152
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
21109: LD_VAR 0 2
21113: PPUSH
21114: LD_VAR 0 8
21118: PPUSH
21119: LD_VAR 0 6
21123: PPUSH
21124: LD_VAR 0 7
21128: PUSH
21129: LD_INT 1
21131: PPUSH
21132: LD_VAR 0 7
21136: PPUSH
21137: CALL_OW 12
21141: ARRAY
21142: PPUSH
21143: LD_VAR 0 12
21147: PPUSH
21148: CALL_OW 185
// end ;
21152: GO 21029
21154: POP
21155: POP
// repeat wait ( 0 0$1 ) ;
21156: LD_INT 35
21158: PPUSH
21159: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
21163: LD_INT 22
21165: PUSH
21166: LD_VAR 0 1
21170: PUSH
21171: EMPTY
21172: LIST
21173: LIST
21174: PUSH
21175: LD_INT 21
21177: PUSH
21178: LD_INT 2
21180: PUSH
21181: EMPTY
21182: LIST
21183: LIST
21184: PUSH
21185: LD_INT 24
21187: PUSH
21188: LD_INT 250
21190: PUSH
21191: EMPTY
21192: LIST
21193: LIST
21194: PUSH
21195: EMPTY
21196: LIST
21197: LIST
21198: LIST
21199: PPUSH
21200: CALL_OW 69
21204: PUSH
21205: LD_VAR 0 3
21209: GREATEREQUAL
21210: IFFALSE 21156
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
21212: LD_INT 22
21214: PUSH
21215: LD_VAR 0 1
21219: PUSH
21220: EMPTY
21221: LIST
21222: LIST
21223: PUSH
21224: LD_INT 21
21226: PUSH
21227: LD_INT 2
21229: PUSH
21230: EMPTY
21231: LIST
21232: LIST
21233: PUSH
21234: LD_INT 24
21236: PUSH
21237: LD_INT 250
21239: PUSH
21240: EMPTY
21241: LIST
21242: LIST
21243: PUSH
21244: EMPTY
21245: LIST
21246: LIST
21247: LIST
21248: PPUSH
21249: CALL_OW 69
21253: PUSH
21254: LD_VAR 0 3
21258: GREATEREQUAL
21259: IFFALSE 21602
// begin repeat begin wait ( 0 0$1 ) ;
21261: LD_INT 35
21263: PPUSH
21264: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
21268: LD_INT 22
21270: PUSH
21271: LD_VAR 0 1
21275: PUSH
21276: EMPTY
21277: LIST
21278: LIST
21279: PUSH
21280: LD_INT 21
21282: PUSH
21283: LD_INT 2
21285: PUSH
21286: EMPTY
21287: LIST
21288: LIST
21289: PUSH
21290: LD_INT 24
21292: PUSH
21293: LD_INT 651
21295: PUSH
21296: EMPTY
21297: LIST
21298: LIST
21299: PUSH
21300: EMPTY
21301: LIST
21302: LIST
21303: LIST
21304: PPUSH
21305: CALL_OW 69
21309: PUSH
21310: LD_INT 0
21312: GREATER
21313: IFFALSE 21541
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
21315: LD_ADDR_VAR 0 10
21319: PUSH
21320: LD_INT 22
21322: PUSH
21323: LD_VAR 0 1
21327: PUSH
21328: EMPTY
21329: LIST
21330: LIST
21331: PUSH
21332: LD_INT 21
21334: PUSH
21335: LD_INT 2
21337: PUSH
21338: EMPTY
21339: LIST
21340: LIST
21341: PUSH
21342: LD_INT 24
21344: PUSH
21345: LD_INT 651
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: EMPTY
21353: LIST
21354: LIST
21355: LIST
21356: PPUSH
21357: CALL_OW 69
21361: PUSH
21362: FOR_IN
21363: IFFALSE 21539
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
21365: LD_ADDR_VAR 0 16
21369: PUSH
21370: LD_INT 22
21372: PUSH
21373: LD_VAR 0 4
21377: PUSH
21378: EMPTY
21379: LIST
21380: LIST
21381: PPUSH
21382: CALL_OW 69
21386: PPUSH
21387: LD_VAR 0 10
21391: PPUSH
21392: CALL_OW 74
21396: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
21397: LD_ADDR_VAR 0 17
21401: PUSH
21402: LD_INT 22
21404: PUSH
21405: LD_VAR 0 4
21409: PUSH
21410: EMPTY
21411: LIST
21412: LIST
21413: PUSH
21414: LD_INT 2
21416: PUSH
21417: LD_INT 59
21419: PUSH
21420: EMPTY
21421: LIST
21422: PUSH
21423: LD_INT 21
21425: PUSH
21426: LD_INT 1
21428: PUSH
21429: EMPTY
21430: LIST
21431: LIST
21432: PUSH
21433: LD_INT 21
21435: PUSH
21436: LD_INT 2
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: PUSH
21449: EMPTY
21450: LIST
21451: LIST
21452: PUSH
21453: EMPTY
21454: LIST
21455: PPUSH
21456: CALL_OW 69
21460: PPUSH
21461: LD_VAR 0 10
21465: PPUSH
21466: CALL_OW 74
21470: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
21471: LD_VAR 0 10
21475: PPUSH
21476: LD_VAR 0 16
21480: PPUSH
21481: CALL_OW 296
21485: PUSH
21486: LD_INT 8
21488: PLUS
21489: PUSH
21490: LD_VAR 0 10
21494: PPUSH
21495: LD_VAR 0 17
21499: PPUSH
21500: CALL_OW 296
21504: LESS
21505: IFFALSE 21523
// begin ComAttackUnit ( i , target1 ) ;
21507: LD_VAR 0 10
21511: PPUSH
21512: LD_VAR 0 16
21516: PPUSH
21517: CALL_OW 115
// end else
21521: GO 21537
// begin ComAttackUnit ( i , target2 ) ;
21523: LD_VAR 0 10
21527: PPUSH
21528: LD_VAR 0 17
21532: PPUSH
21533: CALL_OW 115
// end ; end ;
21537: GO 21362
21539: POP
21540: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
21541: LD_INT 22
21543: PUSH
21544: LD_VAR 0 1
21548: PUSH
21549: EMPTY
21550: LIST
21551: LIST
21552: PUSH
21553: LD_INT 21
21555: PUSH
21556: LD_INT 2
21558: PUSH
21559: EMPTY
21560: LIST
21561: LIST
21562: PUSH
21563: EMPTY
21564: LIST
21565: LIST
21566: PPUSH
21567: CALL_OW 69
21571: PUSH
21572: LD_INT 0
21574: EQUAL
21575: PUSH
21576: LD_INT 22
21578: PUSH
21579: LD_VAR 0 4
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: PUSH
21588: EMPTY
21589: LIST
21590: PPUSH
21591: CALL_OW 69
21595: PUSH
21596: LD_INT 0
21598: EQUAL
21599: OR
21600: IFFALSE 21261
// end ; end ;
21602: LD_VAR 0 9
21606: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
21607: LD_INT 0
21609: PPUSH
21610: PPUSH
21611: PPUSH
21612: PPUSH
// r := 100 ;
21613: LD_ADDR_VAR 0 5
21617: PUSH
21618: LD_INT 100
21620: ST_TO_ADDR
// x := 0 ;
21621: LD_ADDR_VAR 0 6
21625: PUSH
21626: LD_INT 0
21628: ST_TO_ADDR
// while ( x < n ) do
21629: LD_VAR 0 6
21633: PUSH
21634: LD_VAR 0 2
21638: LESS
21639: IFFALSE 21926
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
21641: LD_ADDR_VAR 0 4
21645: PUSH
21646: DOUBLE
21647: LD_INT 1
21649: DEC
21650: ST_TO_ADDR
21651: LD_VAR 0 1
21655: PPUSH
21656: LD_INT 0
21658: PPUSH
21659: CALL_OW 517
21663: PUSH
21664: LD_INT 1
21666: ARRAY
21667: PUSH
21668: FOR_TO
21669: IFFALSE 21922
// begin if r > 50 then
21671: LD_VAR 0 5
21675: PUSH
21676: LD_INT 50
21678: GREATER
21679: IFFALSE 21898
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
21681: LD_VAR 0 1
21685: PPUSH
21686: LD_INT 0
21688: PPUSH
21689: CALL_OW 517
21693: PUSH
21694: LD_INT 1
21696: ARRAY
21697: PUSH
21698: LD_VAR 0 4
21702: ARRAY
21703: PPUSH
21704: LD_VAR 0 1
21708: PPUSH
21709: LD_INT 0
21711: PPUSH
21712: CALL_OW 517
21716: PUSH
21717: LD_INT 2
21719: ARRAY
21720: PUSH
21721: LD_VAR 0 4
21725: ARRAY
21726: PPUSH
21727: CALL_OW 458
21731: NOT
21732: IFFALSE 21882
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
21734: LD_VAR 0 1
21738: PPUSH
21739: LD_INT 0
21741: PPUSH
21742: CALL_OW 517
21746: PUSH
21747: LD_INT 1
21749: ARRAY
21750: PUSH
21751: LD_VAR 0 4
21755: ARRAY
21756: PPUSH
21757: LD_VAR 0 1
21761: PPUSH
21762: LD_INT 0
21764: PPUSH
21765: CALL_OW 517
21769: PUSH
21770: LD_INT 2
21772: ARRAY
21773: PUSH
21774: LD_VAR 0 4
21778: ARRAY
21779: PPUSH
21780: LD_INT 5
21782: PPUSH
21783: LD_INT 0
21785: PPUSH
21786: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
21790: LD_ADDR_EXP 51
21794: PUSH
21795: LD_EXP 51
21799: PPUSH
21800: LD_INT 1
21802: PPUSH
21803: LD_VAR 0 1
21807: PPUSH
21808: LD_INT 0
21810: PPUSH
21811: CALL_OW 517
21815: PUSH
21816: LD_INT 1
21818: ARRAY
21819: PUSH
21820: LD_VAR 0 4
21824: ARRAY
21825: PUSH
21826: LD_VAR 0 1
21830: PPUSH
21831: LD_INT 0
21833: PPUSH
21834: CALL_OW 517
21838: PUSH
21839: LD_INT 2
21841: ARRAY
21842: PUSH
21843: LD_VAR 0 4
21847: ARRAY
21848: PUSH
21849: EMPTY
21850: LIST
21851: LIST
21852: PPUSH
21853: CALL_OW 2
21857: ST_TO_ADDR
// r := 0 ;
21858: LD_ADDR_VAR 0 5
21862: PUSH
21863: LD_INT 0
21865: ST_TO_ADDR
// x := x + 1 ;
21866: LD_ADDR_VAR 0 6
21870: PUSH
21871: LD_VAR 0 6
21875: PUSH
21876: LD_INT 1
21878: PLUS
21879: ST_TO_ADDR
// end else
21880: GO 21896
// r := r + 35 ;
21882: LD_ADDR_VAR 0 5
21886: PUSH
21887: LD_VAR 0 5
21891: PUSH
21892: LD_INT 35
21894: PLUS
21895: ST_TO_ADDR
// end else
21896: GO 21920
// r := r + rand ( 10 , 25 ) ;
21898: LD_ADDR_VAR 0 5
21902: PUSH
21903: LD_VAR 0 5
21907: PUSH
21908: LD_INT 10
21910: PPUSH
21911: LD_INT 25
21913: PPUSH
21914: CALL_OW 12
21918: PLUS
21919: ST_TO_ADDR
// end ;
21920: GO 21668
21922: POP
21923: POP
21924: GO 21629
// end ; end_of_file
21926: LD_VAR 0 3
21930: RET
// every 0 0$1 trigger russianAI = 1 do
21931: LD_EXP 40
21935: PUSH
21936: LD_INT 1
21938: EQUAL
21939: IFFALSE 22158
21941: GO 21943
21943: DISABLE
// begin enable ;
21944: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
21945: LD_INT 3
21947: PPUSH
21948: LD_EXP 31
21952: PPUSH
21953: CALL 16409 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
21957: LD_INT 3
21959: PPUSH
21960: LD_EXP 43
21964: PPUSH
21965: CALL 16769 0 2
// if ruPossition = 1 then
21969: LD_EXP 42
21973: PUSH
21974: LD_INT 1
21976: EQUAL
21977: IFFALSE 22032
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
21979: LD_INT 3
21981: PPUSH
21982: LD_INT 13
21984: PPUSH
21985: LD_INT 10
21987: PPUSH
21988: LD_INT 22
21990: PUSH
21991: LD_INT 3
21993: PUSH
21994: EMPTY
21995: LIST
21996: LIST
21997: PUSH
21998: LD_INT 21
22000: PUSH
22001: LD_INT 3
22003: PUSH
22004: EMPTY
22005: LIST
22006: LIST
22007: PUSH
22008: LD_INT 30
22010: PUSH
22011: LD_INT 8
22013: PUSH
22014: EMPTY
22015: LIST
22016: LIST
22017: PUSH
22018: EMPTY
22019: LIST
22020: LIST
22021: LIST
22022: PPUSH
22023: CALL_OW 69
22027: PPUSH
22028: CALL 16975 0 4
// if ruPossition = 2 then
22032: LD_EXP 42
22036: PUSH
22037: LD_INT 2
22039: EQUAL
22040: IFFALSE 22095
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22042: LD_INT 3
22044: PPUSH
22045: LD_INT 14
22047: PPUSH
22048: LD_INT 11
22050: PPUSH
22051: LD_INT 22
22053: PUSH
22054: LD_INT 3
22056: PUSH
22057: EMPTY
22058: LIST
22059: LIST
22060: PUSH
22061: LD_INT 21
22063: PUSH
22064: LD_INT 3
22066: PUSH
22067: EMPTY
22068: LIST
22069: LIST
22070: PUSH
22071: LD_INT 30
22073: PUSH
22074: LD_INT 8
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: EMPTY
22082: LIST
22083: LIST
22084: LIST
22085: PPUSH
22086: CALL_OW 69
22090: PPUSH
22091: CALL 16975 0 4
// if ruPossition = 3 then
22095: LD_EXP 42
22099: PUSH
22100: LD_INT 3
22102: EQUAL
22103: IFFALSE 22158
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22105: LD_INT 3
22107: PPUSH
22108: LD_INT 15
22110: PPUSH
22111: LD_INT 12
22113: PPUSH
22114: LD_INT 22
22116: PUSH
22117: LD_INT 3
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: LD_INT 21
22126: PUSH
22127: LD_INT 3
22129: PUSH
22130: EMPTY
22131: LIST
22132: LIST
22133: PUSH
22134: LD_INT 30
22136: PUSH
22137: LD_INT 8
22139: PUSH
22140: EMPTY
22141: LIST
22142: LIST
22143: PUSH
22144: EMPTY
22145: LIST
22146: LIST
22147: LIST
22148: PPUSH
22149: CALL_OW 69
22153: PPUSH
22154: CALL 16975 0 4
// end ;
22158: END
// every 0 0$1 do
22159: GO 22161
22161: DISABLE
// begin enable ;
22162: ENABLE
// if ruPossition = 1 then
22163: LD_EXP 42
22167: PUSH
22168: LD_INT 1
22170: EQUAL
22171: IFFALSE 22183
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
22173: LD_INT 3
22175: PPUSH
22176: LD_INT 10
22178: PPUSH
22179: CALL 16046 0 2
// if ruPossition = 2 then
22183: LD_EXP 42
22187: PUSH
22188: LD_INT 2
22190: EQUAL
22191: IFFALSE 22203
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
22193: LD_INT 3
22195: PPUSH
22196: LD_INT 11
22198: PPUSH
22199: CALL 16046 0 2
// if ruPossition = 3 then
22203: LD_EXP 42
22207: PUSH
22208: LD_INT 3
22210: EQUAL
22211: IFFALSE 22223
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
22213: LD_INT 3
22215: PPUSH
22216: LD_INT 12
22218: PPUSH
22219: CALL 16046 0 2
// IntBazooka ( 3 , 1 ) ;
22223: LD_INT 3
22225: PPUSH
22226: LD_INT 1
22228: PPUSH
22229: CALL 14845 0 2
// IntBazooka ( 6 , 1 ) ;
22233: LD_INT 6
22235: PPUSH
22236: LD_INT 1
22238: PPUSH
22239: CALL 14845 0 2
// end ;
22243: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
22244: LD_EXP 40
22248: PUSH
22249: LD_INT 1
22251: EQUAL
22252: PUSH
22253: LD_EXP 36
22257: PPUSH
22258: CALL_OW 302
22262: AND
22263: PUSH
22264: LD_EXP 36
22268: PPUSH
22269: CALL_OW 255
22273: PUSH
22274: LD_INT 3
22276: EQUAL
22277: AND
22278: PUSH
22279: LD_INT 22
22281: PUSH
22282: LD_INT 3
22284: PUSH
22285: EMPTY
22286: LIST
22287: LIST
22288: PUSH
22289: LD_INT 21
22291: PUSH
22292: LD_INT 2
22294: PUSH
22295: EMPTY
22296: LIST
22297: LIST
22298: PUSH
22299: LD_INT 33
22301: PUSH
22302: LD_INT 3
22304: PUSH
22305: EMPTY
22306: LIST
22307: LIST
22308: PUSH
22309: EMPTY
22310: LIST
22311: LIST
22312: LIST
22313: PPUSH
22314: CALL_OW 69
22318: PUSH
22319: LD_INT 0
22321: EQUAL
22322: AND
22323: IFFALSE 22531
22325: GO 22327
22327: DISABLE
// begin enable ;
22328: ENABLE
// if Difficulty = 1 then
22329: LD_OWVAR 67
22333: PUSH
22334: LD_INT 1
22336: EQUAL
22337: IFFALSE 22399
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22339: LD_INT 3
22341: PPUSH
22342: LD_EXP 36
22346: PPUSH
22347: LD_INT 5
22349: PPUSH
22350: LD_INT 8
22352: PPUSH
22353: CALL_OW 12
22357: PPUSH
22358: LD_INT 1
22360: PPUSH
22361: LD_INT 43
22363: PUSH
22364: LD_INT 44
22366: PUSH
22367: LD_INT 45
22369: PUSH
22370: LD_INT 46
22372: PUSH
22373: EMPTY
22374: LIST
22375: LIST
22376: LIST
22377: LIST
22378: PPUSH
22379: LD_INT 1
22381: PPUSH
22382: LD_INT 3
22384: PUSH
22385: LD_INT 3
22387: PUSH
22388: EMPTY
22389: LIST
22390: LIST
22391: PPUSH
22392: LD_INT 22
22394: PPUSH
22395: CALL 20965 0 8
// if Difficulty = 2 then
22399: LD_OWVAR 67
22403: PUSH
22404: LD_INT 2
22406: EQUAL
22407: IFFALSE 22465
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22409: LD_INT 3
22411: PPUSH
22412: LD_EXP 36
22416: PPUSH
22417: LD_INT 6
22419: PPUSH
22420: LD_INT 8
22422: PPUSH
22423: CALL_OW 12
22427: PPUSH
22428: LD_INT 1
22430: PPUSH
22431: LD_INT 44
22433: PUSH
22434: LD_INT 45
22436: PUSH
22437: LD_INT 46
22439: PUSH
22440: EMPTY
22441: LIST
22442: LIST
22443: LIST
22444: PPUSH
22445: LD_INT 1
22447: PPUSH
22448: LD_INT 3
22450: PUSH
22451: LD_INT 3
22453: PUSH
22454: EMPTY
22455: LIST
22456: LIST
22457: PPUSH
22458: LD_INT 22
22460: PPUSH
22461: CALL 20965 0 8
// if Difficulty >= 3 then
22465: LD_OWVAR 67
22469: PUSH
22470: LD_INT 3
22472: GREATEREQUAL
22473: IFFALSE 22531
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22475: LD_INT 3
22477: PPUSH
22478: LD_EXP 36
22482: PPUSH
22483: LD_INT 7
22485: PPUSH
22486: LD_INT 8
22488: PPUSH
22489: CALL_OW 12
22493: PPUSH
22494: LD_INT 1
22496: PPUSH
22497: LD_INT 44
22499: PUSH
22500: LD_INT 45
22502: PUSH
22503: LD_INT 46
22505: PUSH
22506: EMPTY
22507: LIST
22508: LIST
22509: LIST
22510: PPUSH
22511: LD_INT 1
22513: PPUSH
22514: LD_INT 3
22516: PUSH
22517: LD_INT 3
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PPUSH
22524: LD_INT 22
22526: PPUSH
22527: CALL 20965 0 8
// end ;
22531: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
22532: LD_EXP 51
22536: PUSH
22537: LD_EXP 50
22541: AND
22542: IFFALSE 22663
22544: GO 22546
22546: DISABLE
22547: LD_INT 0
22549: PPUSH
// begin enable ;
22550: ENABLE
// for i in arabianMines do
22551: LD_ADDR_VAR 0 1
22555: PUSH
22556: LD_EXP 51
22560: PUSH
22561: FOR_IN
22562: IFFALSE 22661
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
22564: LD_INT 22
22566: PUSH
22567: LD_INT 1
22569: PUSH
22570: EMPTY
22571: LIST
22572: LIST
22573: PUSH
22574: LD_INT 92
22576: PUSH
22577: LD_VAR 0 1
22581: PUSH
22582: LD_INT 1
22584: ARRAY
22585: PUSH
22586: LD_VAR 0 1
22590: PUSH
22591: LD_INT 2
22593: ARRAY
22594: PUSH
22595: LD_INT 3
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: PUSH
22604: EMPTY
22605: LIST
22606: LIST
22607: PPUSH
22608: CALL_OW 69
22612: IFFALSE 22659
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
22614: LD_VAR 0 1
22618: PUSH
22619: LD_INT 1
22621: ARRAY
22622: PPUSH
22623: LD_VAR 0 1
22627: PUSH
22628: LD_INT 2
22630: ARRAY
22631: PPUSH
22632: LD_INT 5
22634: PPUSH
22635: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
22639: LD_ADDR_EXP 51
22643: PUSH
22644: LD_EXP 51
22648: PPUSH
22649: LD_VAR 0 1
22653: PPUSH
22654: CALL_OW 3
22658: ST_TO_ADDR
// end ; end ;
22659: GO 22561
22661: POP
22662: POP
// end ; end_of_file
22663: PPOPN 1
22665: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
22666: LD_VAR 0 1
22670: PPUSH
22671: CALL_OW 255
22675: PUSH
22676: LD_INT 4
22678: EQUAL
22679: IFFALSE 22693
// SetBName ( building , epsilon ) ;
22681: LD_VAR 0 1
22685: PPUSH
22686: LD_STRING epsilon
22688: PPUSH
22689: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
22693: LD_VAR 0 1
22697: PPUSH
22698: CALL_OW 255
22702: PUSH
22703: LD_INT 1
22705: EQUAL
22706: PUSH
22707: LD_VAR 0 1
22711: PPUSH
22712: CALL_OW 266
22716: PUSH
22717: LD_INT 0
22719: EQUAL
22720: AND
22721: IFFALSE 22735
// SetBName ( building , epsilon ) ;
22723: LD_VAR 0 1
22727: PPUSH
22728: LD_STRING epsilon
22730: PPUSH
22731: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
22735: LD_VAR 0 1
22739: PPUSH
22740: CALL_OW 255
22744: PUSH
22745: LD_INT 3
22747: EQUAL
22748: PUSH
22749: LD_VAR 0 1
22753: PPUSH
22754: CALL_OW 266
22758: PUSH
22759: LD_INT 0
22761: EQUAL
22762: AND
22763: IFFALSE 22777
// SetBName ( building , chuikov ) ;
22765: LD_VAR 0 1
22769: PPUSH
22770: LD_STRING chuikov
22772: PPUSH
22773: CALL_OW 500
// if GetSide ( building ) = 2 then
22777: LD_VAR 0 1
22781: PPUSH
22782: CALL_OW 255
22786: PUSH
22787: LD_INT 2
22789: EQUAL
22790: IFFALSE 22846
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22792: LD_VAR 0 1
22796: PPUSH
22797: CALL_OW 266
22801: PUSH
22802: LD_INT 6
22804: EQUAL
22805: PUSH
22806: LD_VAR 0 1
22810: PPUSH
22811: CALL_OW 266
22815: PUSH
22816: LD_INT 9
22818: EQUAL
22819: OR
22820: IFFALSE 22846
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22822: LD_VAR 0 1
22826: PPUSH
22827: LD_INT 10
22829: PPUSH
22830: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22834: LD_VAR 0 1
22838: PPUSH
22839: LD_INT 11
22841: PPUSH
22842: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
22846: LD_VAR 0 1
22850: PPUSH
22851: CALL_OW 255
22855: PUSH
22856: LD_INT 3
22858: EQUAL
22859: IFFALSE 22893
// begin ruDepotConstructed := true ;
22861: LD_ADDR_EXP 58
22865: PUSH
22866: LD_INT 1
22868: ST_TO_ADDR
// if GetBType ( building ) = 2 then
22869: LD_VAR 0 1
22873: PPUSH
22874: CALL_OW 266
22878: PUSH
22879: LD_INT 2
22881: EQUAL
22882: IFFALSE 22893
// AddComUpgrade ( building ) ;
22884: LD_VAR 0 1
22888: PPUSH
22889: CALL_OW 206
// end ; end ;
22893: PPOPN 2
22895: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
22896: LD_INT 0
22898: PPUSH
22899: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
22900: LD_VAR 0 1
22904: PUSH
22905: LD_INT 22
22907: PUSH
22908: LD_INT 3
22910: PUSH
22911: EMPTY
22912: LIST
22913: LIST
22914: PUSH
22915: LD_INT 23
22917: PUSH
22918: LD_INT 3
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: PUSH
22925: LD_INT 21
22927: PUSH
22928: LD_INT 2
22930: PUSH
22931: EMPTY
22932: LIST
22933: LIST
22934: PUSH
22935: EMPTY
22936: LIST
22937: LIST
22938: LIST
22939: PPUSH
22940: CALL_OW 69
22944: IN
22945: PUSH
22946: LD_EXP 62
22950: NOT
22951: AND
22952: IFFALSE 22983
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
22954: LD_ADDR_EXP 62
22958: PUSH
22959: LD_VAR 0 1
22963: PPUSH
22964: CALL_OW 250
22968: PUSH
22969: LD_VAR 0 1
22973: PPUSH
22974: CALL_OW 251
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: ST_TO_ADDR
// end ;
22983: PPOPN 3
22985: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
22986: LD_VAR 0 2
22990: PPUSH
22991: CALL_OW 255
22995: PUSH
22996: LD_INT 3
22998: EQUAL
22999: PUSH
23000: LD_EXP 36
23004: PPUSH
23005: CALL_OW 255
23009: PUSH
23010: LD_INT 3
23012: EQUAL
23013: AND
23014: PUSH
23015: LD_EXP 36
23019: PPUSH
23020: CALL_OW 302
23024: AND
23025: IFFALSE 23041
// ComEnterUnit ( human , ruFab ) ;
23027: LD_VAR 0 2
23031: PPUSH
23032: LD_EXP 36
23036: PPUSH
23037: CALL_OW 120
// end ;
23041: PPOPN 2
23043: END
// on BuildingComplete ( building ) do var i , engineers , sol , tmp ;
23044: LD_INT 0
23046: PPUSH
23047: PPUSH
23048: PPUSH
23049: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
23050: LD_VAR 0 1
23054: PPUSH
23055: CALL_OW 255
23059: PUSH
23060: LD_INT 1
23062: EQUAL
23063: PUSH
23064: LD_EXP 66
23068: PUSH
23069: LD_INT 0
23071: EQUAL
23072: AND
23073: IFFALSE 23275
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
23075: LD_VAR 0 1
23079: PPUSH
23080: CALL_OW 266
23084: PUSH
23085: LD_INT 26
23087: EQUAL
23088: PUSH
23089: LD_VAR 0 1
23093: PPUSH
23094: CALL_OW 266
23098: PUSH
23099: LD_INT 27
23101: EQUAL
23102: OR
23103: PUSH
23104: LD_VAR 0 1
23108: PPUSH
23109: CALL_OW 266
23113: PUSH
23114: LD_INT 28
23116: EQUAL
23117: OR
23118: IFFALSE 23275
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
23120: LD_INT 22
23122: PUSH
23123: LD_INT 1
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PUSH
23130: LD_INT 2
23132: PUSH
23133: LD_INT 30
23135: PUSH
23136: LD_INT 7
23138: PUSH
23139: EMPTY
23140: LIST
23141: LIST
23142: PUSH
23143: LD_INT 30
23145: PUSH
23146: LD_INT 8
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: EMPTY
23154: LIST
23155: LIST
23156: LIST
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: PPUSH
23162: CALL_OW 69
23166: PUSH
23167: LD_INT 0
23169: GREATER
23170: IFFALSE 23275
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
23172: LD_ADDR_VAR 0 2
23176: PUSH
23177: LD_INT 22
23179: PUSH
23180: LD_INT 1
23182: PUSH
23183: EMPTY
23184: LIST
23185: LIST
23186: PUSH
23187: LD_INT 2
23189: PUSH
23190: LD_INT 30
23192: PUSH
23193: LD_INT 7
23195: PUSH
23196: EMPTY
23197: LIST
23198: LIST
23199: PUSH
23200: LD_INT 30
23202: PUSH
23203: LD_INT 8
23205: PUSH
23206: EMPTY
23207: LIST
23208: LIST
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: LIST
23214: PUSH
23215: EMPTY
23216: LIST
23217: LIST
23218: PPUSH
23219: CALL_OW 69
23223: PUSH
23224: FOR_IN
23225: IFFALSE 23273
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
23227: LD_VAR 0 2
23231: PPUSH
23232: LD_INT 1
23234: PPUSH
23235: CALL_OW 268
23239: PUSH
23240: LD_INT 11
23242: EQUAL
23243: PUSH
23244: LD_VAR 0 2
23248: PPUSH
23249: LD_INT 2
23251: PPUSH
23252: CALL_OW 268
23256: PUSH
23257: LD_INT 11
23259: EQUAL
23260: OR
23261: IFFALSE 23271
// eventVar1 = 1 ;
23263: LD_ADDR_EXP 66
23267: PUSH
23268: LD_INT 1
23270: ST_TO_ADDR
23271: GO 23224
23273: POP
23274: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
23275: LD_VAR 0 1
23279: PPUSH
23280: CALL_OW 255
23284: PUSH
23285: LD_INT 3
23287: EQUAL
23288: IFFALSE 23768
// begin if GetBType ( building ) = b_depot then
23290: LD_VAR 0 1
23294: PPUSH
23295: CALL_OW 266
23299: PUSH
23300: LD_INT 0
23302: EQUAL
23303: IFFALSE 23375
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
23305: LD_VAR 0 1
23309: PPUSH
23310: CALL_OW 274
23314: PPUSH
23315: LD_INT 1
23317: PPUSH
23318: LD_INT 5000
23320: PPUSH
23321: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
23325: LD_VAR 0 1
23329: PPUSH
23330: CALL_OW 274
23334: PPUSH
23335: LD_INT 2
23337: PPUSH
23338: LD_INT 300
23340: PPUSH
23341: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
23345: LD_VAR 0 1
23349: PPUSH
23350: CALL_OW 274
23354: PPUSH
23355: LD_INT 3
23357: PPUSH
23358: LD_INT 100
23360: PPUSH
23361: CALL_OW 277
// ruDepot = building ;
23365: LD_ADDR_EXP 31
23369: PUSH
23370: LD_VAR 0 1
23374: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23375: LD_VAR 0 1
23379: PPUSH
23380: CALL_OW 266
23384: PUSH
23385: LD_INT 0
23387: EQUAL
23388: PUSH
23389: LD_VAR 0 1
23393: PPUSH
23394: CALL_OW 266
23398: PUSH
23399: LD_INT 2
23401: EQUAL
23402: OR
23403: PUSH
23404: LD_VAR 0 1
23408: PPUSH
23409: CALL_OW 266
23413: PUSH
23414: LD_INT 4
23416: EQUAL
23417: OR
23418: IFFALSE 23429
// ComUpgrade ( building ) ;
23420: LD_VAR 0 1
23424: PPUSH
23425: CALL_OW 146
// if GetBType ( building ) = b_lab then
23429: LD_VAR 0 1
23433: PPUSH
23434: CALL_OW 266
23438: PUSH
23439: LD_INT 6
23441: EQUAL
23442: IFFALSE 23645
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
23444: LD_INT 22
23446: PUSH
23447: LD_INT 3
23449: PUSH
23450: EMPTY
23451: LIST
23452: LIST
23453: PUSH
23454: LD_INT 30
23456: PUSH
23457: LD_INT 8
23459: PUSH
23460: EMPTY
23461: LIST
23462: LIST
23463: PUSH
23464: EMPTY
23465: LIST
23466: LIST
23467: PPUSH
23468: CALL_OW 69
23472: PUSH
23473: LD_INT 0
23475: EQUAL
23476: IFFALSE 23514
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23478: LD_VAR 0 1
23482: PPUSH
23483: LD_INT 10
23485: PPUSH
23486: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
23490: LD_VAR 0 1
23494: PPUSH
23495: LD_INT 12
23497: PPUSH
23498: CALL_OW 207
// ruLab1 = building ;
23502: LD_ADDR_EXP 32
23506: PUSH
23507: LD_VAR 0 1
23511: ST_TO_ADDR
// end else
23512: GO 23548
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
23514: LD_VAR 0 1
23518: PPUSH
23519: LD_INT 11
23521: PPUSH
23522: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
23526: LD_VAR 0 1
23530: PPUSH
23531: LD_INT 14
23533: PPUSH
23534: CALL_OW 207
// ruLab2 = building ;
23538: LD_ADDR_EXP 33
23542: PUSH
23543: LD_VAR 0 1
23547: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
23548: LD_INT 3
23550: PPUSH
23551: LD_VAR 0 1
23555: PPUSH
23556: LD_INT 3
23558: PPUSH
23559: CALL 15961 0 3
// if ruDestroyedBuildings > 0 then
23563: LD_EXP 43
23567: PUSH
23568: LD_INT 0
23570: GREATER
23571: IFFALSE 23645
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23573: LD_ADDR_EXP 43
23577: PUSH
23578: LD_EXP 43
23582: PPUSH
23583: LD_INT 1
23585: PPUSH
23586: CALL_OW 3
23590: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23591: LD_ADDR_EXP 43
23595: PUSH
23596: LD_EXP 43
23600: PPUSH
23601: LD_INT 1
23603: PPUSH
23604: CALL_OW 3
23608: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23609: LD_ADDR_EXP 43
23613: PUSH
23614: LD_EXP 43
23618: PPUSH
23619: LD_INT 1
23621: PPUSH
23622: CALL_OW 3
23626: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23627: LD_ADDR_EXP 43
23631: PUSH
23632: LD_EXP 43
23636: PPUSH
23637: LD_INT 1
23639: PPUSH
23640: CALL_OW 3
23644: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
23645: LD_VAR 0 1
23649: PPUSH
23650: CALL_OW 266
23654: PUSH
23655: LD_INT 32
23657: EQUAL
23658: IFFALSE 23695
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23660: LD_VAR 0 1
23664: PPUSH
23665: LD_INT 44
23667: PUSH
23668: LD_INT 45
23670: PUSH
23671: LD_INT 46
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: LIST
23678: PUSH
23679: LD_INT 1
23681: PPUSH
23682: LD_INT 3
23684: PPUSH
23685: CALL_OW 12
23689: ARRAY
23690: PPUSH
23691: CALL_OW 208
// if GetBType ( building ) = b_turret then
23695: LD_VAR 0 1
23699: PPUSH
23700: CALL_OW 266
23704: PUSH
23705: LD_INT 33
23707: EQUAL
23708: IFFALSE 23745
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23710: LD_VAR 0 1
23714: PPUSH
23715: LD_INT 44
23717: PUSH
23718: LD_INT 45
23720: PUSH
23721: LD_INT 46
23723: PUSH
23724: EMPTY
23725: LIST
23726: LIST
23727: LIST
23728: PUSH
23729: LD_INT 1
23731: PPUSH
23732: LD_INT 3
23734: PPUSH
23735: CALL_OW 12
23739: ARRAY
23740: PPUSH
23741: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
23745: LD_VAR 0 1
23749: PPUSH
23750: CALL_OW 266
23754: PUSH
23755: LD_INT 24
23757: EQUAL
23758: IFFALSE 23768
// russianAI = 1 ;
23760: LD_ADDR_EXP 40
23764: PUSH
23765: LD_INT 1
23767: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
23768: LD_VAR 0 1
23772: PPUSH
23773: CALL_OW 255
23777: PUSH
23778: LD_INT 2
23780: EQUAL
23781: IFFALSE 24660
// begin if GetBType ( building ) = arBuildingsTab [ 1 ] [ 1 ] then
23783: LD_VAR 0 1
23787: PPUSH
23788: CALL_OW 266
23792: PUSH
23793: LD_EXP 69
23797: PUSH
23798: LD_INT 1
23800: ARRAY
23801: PUSH
23802: LD_INT 1
23804: ARRAY
23805: EQUAL
23806: IFFALSE 23933
// begin arBuildingsTab := Delete ( arBuildingsTab , 1 ) ;
23808: LD_ADDR_EXP 69
23812: PUSH
23813: LD_EXP 69
23817: PPUSH
23818: LD_INT 1
23820: PPUSH
23821: CALL_OW 3
23825: ST_TO_ADDR
// if arBuildingsTab then
23826: LD_EXP 69
23830: IFFALSE 23933
// begin engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
23832: LD_ADDR_VAR 0 3
23836: PUSH
23837: LD_INT 22
23839: PUSH
23840: LD_INT 2
23842: PUSH
23843: EMPTY
23844: LIST
23845: LIST
23846: PUSH
23847: LD_INT 25
23849: PUSH
23850: LD_INT 2
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: PUSH
23857: EMPTY
23858: LIST
23859: LIST
23860: PPUSH
23861: CALL_OW 69
23865: ST_TO_ADDR
// if engineers then
23866: LD_VAR 0 3
23870: IFFALSE 23933
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
23872: LD_VAR 0 3
23876: PPUSH
23877: LD_EXP 69
23881: PUSH
23882: LD_INT 1
23884: ARRAY
23885: PUSH
23886: LD_INT 1
23888: ARRAY
23889: PPUSH
23890: LD_EXP 69
23894: PUSH
23895: LD_INT 1
23897: ARRAY
23898: PUSH
23899: LD_INT 2
23901: ARRAY
23902: PPUSH
23903: LD_EXP 69
23907: PUSH
23908: LD_INT 1
23910: ARRAY
23911: PUSH
23912: LD_INT 3
23914: ARRAY
23915: PPUSH
23916: LD_EXP 69
23920: PUSH
23921: LD_INT 1
23923: ARRAY
23924: PUSH
23925: LD_INT 4
23927: ARRAY
23928: PPUSH
23929: CALL_OW 205
// end ; end ; if GetBType ( building ) = b_breastwork then
23933: LD_VAR 0 1
23937: PPUSH
23938: CALL_OW 266
23942: PUSH
23943: LD_INT 31
23945: EQUAL
23946: IFFALSE 24092
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
23948: LD_ADDR_VAR 0 4
23952: PUSH
23953: LD_INT 22
23955: PUSH
23956: LD_INT 2
23958: PUSH
23959: EMPTY
23960: LIST
23961: LIST
23962: PUSH
23963: LD_INT 2
23965: PUSH
23966: LD_INT 25
23968: PUSH
23969: LD_INT 1
23971: PUSH
23972: EMPTY
23973: LIST
23974: LIST
23975: PUSH
23976: LD_INT 25
23978: PUSH
23979: LD_INT 8
23981: PUSH
23982: EMPTY
23983: LIST
23984: LIST
23985: PUSH
23986: EMPTY
23987: LIST
23988: LIST
23989: LIST
23990: PUSH
23991: EMPTY
23992: LIST
23993: LIST
23994: PPUSH
23995: CALL_OW 69
23999: PUSH
24000: LD_EXP 27
24004: DIFF
24005: ST_TO_ADDR
// if not sol then
24006: LD_VAR 0 4
24010: NOT
24011: IFFALSE 24015
// exit ;
24013: GO 24660
// for i in sol do
24015: LD_ADDR_VAR 0 2
24019: PUSH
24020: LD_VAR 0 4
24024: PUSH
24025: FOR_IN
24026: IFFALSE 24090
// if not GetTag ( i ) then
24028: LD_VAR 0 2
24032: PPUSH
24033: CALL_OW 110
24037: NOT
24038: IFFALSE 24088
// begin if IsInUnit ( i ) then
24040: LD_VAR 0 2
24044: PPUSH
24045: CALL_OW 310
24049: IFFALSE 24060
// ComExitBuilding ( i ) ;
24051: LD_VAR 0 2
24055: PPUSH
24056: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
24060: LD_VAR 0 2
24064: PPUSH
24065: LD_VAR 0 1
24069: PPUSH
24070: CALL_OW 180
// SetTag ( i , 11 ) ;
24074: LD_VAR 0 2
24078: PPUSH
24079: LD_INT 11
24081: PPUSH
24082: CALL_OW 109
// break ;
24086: GO 24090
// end ;
24088: GO 24025
24090: POP
24091: POP
// end ; if GetBType ( building ) = b_depot then
24092: LD_VAR 0 1
24096: PPUSH
24097: CALL_OW 266
24101: PUSH
24102: LD_INT 0
24104: EQUAL
24105: IFFALSE 24191
// begin arDepot = building ;
24107: LD_ADDR_EXP 44
24111: PUSH
24112: LD_VAR 0 1
24116: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
24117: LD_INT 38
24119: PUSH
24120: LD_INT 47
24122: PUSH
24123: EMPTY
24124: LIST
24125: LIST
24126: PPUSH
24127: LD_INT 71
24129: PPUSH
24130: LD_INT 19
24132: PPUSH
24133: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
24137: LD_VAR 0 1
24141: PPUSH
24142: CALL_OW 274
24146: PPUSH
24147: LD_INT 1
24149: PPUSH
24150: LD_INT 500
24152: PPUSH
24153: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
24157: LD_VAR 0 1
24161: PPUSH
24162: CALL_OW 274
24166: PPUSH
24167: LD_INT 3
24169: PPUSH
24170: LD_INT 30
24172: PPUSH
24173: CALL_OW 277
// ComEnterUnit ( Dietrich , building ) ;
24177: LD_EXP 27
24181: PPUSH
24182: LD_VAR 0 1
24186: PPUSH
24187: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
24191: LD_VAR 0 1
24195: PPUSH
24196: CALL_OW 266
24200: PUSH
24201: LD_INT 6
24203: EQUAL
24204: PUSH
24205: LD_VAR 0 1
24209: PPUSH
24210: CALL_OW 266
24214: PUSH
24215: LD_INT 9
24217: EQUAL
24218: OR
24219: IFFALSE 24270
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
24221: LD_VAR 0 1
24225: PPUSH
24226: LD_INT 10
24228: PPUSH
24229: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
24233: LD_VAR 0 1
24237: PPUSH
24238: LD_INT 11
24240: PPUSH
24241: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
24245: LD_INT 2
24247: PPUSH
24248: LD_VAR 0 1
24252: PPUSH
24253: LD_INT 2
24255: PPUSH
24256: CALL 15961 0 3
// arLab = building ;
24260: LD_ADDR_EXP 45
24264: PUSH
24265: LD_VAR 0 1
24269: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
24270: LD_VAR 0 1
24274: PPUSH
24275: CALL_OW 266
24279: PUSH
24280: LD_INT 2
24282: EQUAL
24283: PUSH
24284: LD_VAR 0 1
24288: PPUSH
24289: CALL_OW 266
24293: PUSH
24294: LD_INT 4
24296: EQUAL
24297: OR
24298: IFFALSE 24369
// begin ComUpgrade ( building ) ;
24300: LD_VAR 0 1
24304: PPUSH
24305: CALL_OW 146
// if GetBType ( building ) = b_armoury then
24309: LD_VAR 0 1
24313: PPUSH
24314: CALL_OW 266
24318: PUSH
24319: LD_INT 4
24321: EQUAL
24322: IFFALSE 24369
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Dietrich , 75 , 21 ) ;
24324: LD_INT 22
24326: PUSH
24327: LD_INT 2
24329: PUSH
24330: EMPTY
24331: LIST
24332: LIST
24333: PUSH
24334: LD_INT 25
24336: PUSH
24337: LD_INT 1
24339: PUSH
24340: EMPTY
24341: LIST
24342: LIST
24343: PUSH
24344: EMPTY
24345: LIST
24346: LIST
24347: PPUSH
24348: CALL_OW 69
24352: PUSH
24353: LD_EXP 27
24357: DIFF
24358: PPUSH
24359: LD_INT 75
24361: PPUSH
24362: LD_INT 21
24364: PPUSH
24365: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
24369: LD_VAR 0 1
24373: PPUSH
24374: CALL_OW 266
24378: PUSH
24379: LD_INT 27
24381: EQUAL
24382: IFFALSE 24660
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
24384: LD_INT 22
24386: PUSH
24387: LD_INT 2
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: PUSH
24394: LD_INT 30
24396: PUSH
24397: LD_INT 27
24399: PUSH
24400: EMPTY
24401: LIST
24402: LIST
24403: PUSH
24404: EMPTY
24405: LIST
24406: LIST
24407: PPUSH
24408: CALL_OW 69
24412: PUSH
24413: LD_INT 2
24415: EQUAL
24416: IFFALSE 24660
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
24418: LD_ADDR_VAR 0 2
24422: PUSH
24423: LD_INT 22
24425: PUSH
24426: LD_INT 2
24428: PUSH
24429: EMPTY
24430: LIST
24431: LIST
24432: PUSH
24433: LD_INT 21
24435: PUSH
24436: LD_INT 1
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 25
24445: PUSH
24446: LD_INT 2
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: EMPTY
24454: LIST
24455: LIST
24456: LIST
24457: PPUSH
24458: CALL_OW 69
24462: PUSH
24463: LD_INT 1
24465: ARRAY
24466: ST_TO_ADDR
// if not i then
24467: LD_VAR 0 2
24471: NOT
24472: IFFALSE 24476
// exit ;
24474: GO 24660
// AddComMoveXY ( i , 92 , 34 ) ;
24476: LD_VAR 0 2
24480: PPUSH
24481: LD_INT 92
24483: PPUSH
24484: LD_INT 34
24486: PPUSH
24487: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24491: LD_VAR 0 2
24495: PPUSH
24496: LD_INT 35
24498: PPUSH
24499: CALL_OW 202
// AddComMoveXY ( i , 101 , 20 ) ;
24503: LD_VAR 0 2
24507: PPUSH
24508: LD_INT 101
24510: PPUSH
24511: LD_INT 20
24513: PPUSH
24514: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24518: LD_VAR 0 2
24522: PPUSH
24523: LD_INT 35
24525: PPUSH
24526: CALL_OW 202
// AddComMoveXY ( i , 115 , 30 ) ;
24530: LD_VAR 0 2
24534: PPUSH
24535: LD_INT 115
24537: PPUSH
24538: LD_INT 30
24540: PPUSH
24541: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24545: LD_VAR 0 2
24549: PPUSH
24550: LD_INT 35
24552: PPUSH
24553: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
24557: LD_VAR 0 2
24561: PPUSH
24562: LD_INT 82
24564: PPUSH
24565: LD_INT 57
24567: PPUSH
24568: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24572: LD_VAR 0 2
24576: PPUSH
24577: LD_INT 35
24579: PPUSH
24580: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
24584: LD_VAR 0 2
24588: PPUSH
24589: LD_INT 36
24591: PPUSH
24592: LD_INT 28
24594: PPUSH
24595: CALL_OW 171
// AddComWait ( i , 0 0$2 ) ;
24599: LD_VAR 0 2
24603: PPUSH
24604: LD_INT 70
24606: PPUSH
24607: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
24611: LD_INT 22
24613: PUSH
24614: LD_INT 2
24616: PUSH
24617: EMPTY
24618: LIST
24619: LIST
24620: PUSH
24621: LD_INT 21
24623: PUSH
24624: LD_INT 1
24626: PUSH
24627: EMPTY
24628: LIST
24629: LIST
24630: PUSH
24631: LD_INT 25
24633: PUSH
24634: LD_INT 2
24636: PUSH
24637: EMPTY
24638: LIST
24639: LIST
24640: PUSH
24641: EMPTY
24642: LIST
24643: LIST
24644: LIST
24645: PPUSH
24646: CALL_OW 69
24650: PPUSH
24651: LD_EXP 44
24655: PPUSH
24656: CALL_OW 180
// end ; end ; end ;
24660: PPOPN 5
24662: END
// on UpgradeComplete ( building ) do var i ;
24663: LD_INT 0
24665: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
24666: LD_VAR 0 1
24670: PPUSH
24671: CALL_OW 255
24675: PUSH
24676: LD_INT 1
24678: EQUAL
24679: PUSH
24680: LD_EXP 66
24684: PUSH
24685: LD_INT 0
24687: EQUAL
24688: AND
24689: IFFALSE 24887
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
24691: LD_VAR 0 1
24695: PPUSH
24696: CALL_OW 266
24700: PUSH
24701: LD_INT 7
24703: EQUAL
24704: PUSH
24705: LD_VAR 0 1
24709: PPUSH
24710: CALL_OW 266
24714: PUSH
24715: LD_INT 8
24717: EQUAL
24718: OR
24719: IFFALSE 24887
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
24721: LD_INT 22
24723: PUSH
24724: LD_INT 1
24726: PUSH
24727: EMPTY
24728: LIST
24729: LIST
24730: PUSH
24731: LD_INT 2
24733: PUSH
24734: LD_INT 30
24736: PUSH
24737: LD_INT 26
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: PUSH
24744: LD_INT 30
24746: PUSH
24747: LD_INT 27
24749: PUSH
24750: EMPTY
24751: LIST
24752: LIST
24753: PUSH
24754: LD_INT 30
24756: PUSH
24757: LD_INT 28
24759: PUSH
24760: EMPTY
24761: LIST
24762: LIST
24763: PUSH
24764: EMPTY
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PPUSH
24774: CALL_OW 69
24778: PUSH
24779: LD_INT 0
24781: GREATER
24782: IFFALSE 24887
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
24784: LD_ADDR_VAR 0 2
24788: PUSH
24789: LD_INT 22
24791: PUSH
24792: LD_INT 1
24794: PUSH
24795: EMPTY
24796: LIST
24797: LIST
24798: PUSH
24799: LD_INT 2
24801: PUSH
24802: LD_INT 30
24804: PUSH
24805: LD_INT 7
24807: PUSH
24808: EMPTY
24809: LIST
24810: LIST
24811: PUSH
24812: LD_INT 30
24814: PUSH
24815: LD_INT 8
24817: PUSH
24818: EMPTY
24819: LIST
24820: LIST
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: LIST
24826: PUSH
24827: EMPTY
24828: LIST
24829: LIST
24830: PPUSH
24831: CALL_OW 69
24835: PUSH
24836: FOR_IN
24837: IFFALSE 24885
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
24839: LD_VAR 0 2
24843: PPUSH
24844: LD_INT 1
24846: PPUSH
24847: CALL_OW 268
24851: PUSH
24852: LD_INT 11
24854: EQUAL
24855: PUSH
24856: LD_VAR 0 2
24860: PPUSH
24861: LD_INT 2
24863: PPUSH
24864: CALL_OW 268
24868: PUSH
24869: LD_INT 11
24871: EQUAL
24872: OR
24873: IFFALSE 24883
// eventVar1 = 1 ;
24875: LD_ADDR_EXP 66
24879: PUSH
24880: LD_INT 1
24882: ST_TO_ADDR
24883: GO 24836
24885: POP
24886: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
24887: LD_VAR 0 1
24891: PPUSH
24892: CALL_OW 255
24896: PUSH
24897: LD_INT 2
24899: EQUAL
24900: IFFALSE 25005
// begin if GetBType ( building ) = b_barracks then
24902: LD_VAR 0 1
24906: PPUSH
24907: CALL_OW 266
24911: PUSH
24912: LD_INT 5
24914: EQUAL
24915: IFFALSE 25005
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
24917: LD_ADDR_VAR 0 2
24921: PUSH
24922: LD_INT 22
24924: PUSH
24925: LD_INT 2
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 25
24934: PUSH
24935: LD_INT 1
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: LD_INT 3
24944: PUSH
24945: LD_INT 54
24947: PUSH
24948: EMPTY
24949: LIST
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: LIST
24959: PPUSH
24960: CALL_OW 69
24964: PUSH
24965: LD_EXP 27
24969: PUSH
24970: EMPTY
24971: LIST
24972: DIFF
24973: PUSH
24974: FOR_IN
24975: IFFALSE 24993
// ComEnterUnit ( i , building ) ;
24977: LD_VAR 0 2
24981: PPUSH
24982: LD_VAR 0 1
24986: PPUSH
24987: CALL_OW 120
24991: GO 24974
24993: POP
24994: POP
// arArm = building ;
24995: LD_ADDR_EXP 46
24999: PUSH
25000: LD_VAR 0 1
25004: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
25005: LD_VAR 0 1
25009: PPUSH
25010: CALL_OW 255
25014: PUSH
25015: LD_INT 3
25017: EQUAL
25018: IFFALSE 25491
// begin if GetBType ( building ) = b_factory then
25020: LD_VAR 0 1
25024: PPUSH
25025: CALL_OW 266
25029: PUSH
25030: LD_INT 3
25032: EQUAL
25033: IFFALSE 25100
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
25035: LD_ADDR_VAR 0 2
25039: PUSH
25040: LD_INT 22
25042: PUSH
25043: LD_INT 3
25045: PUSH
25046: EMPTY
25047: LIST
25048: LIST
25049: PUSH
25050: LD_INT 25
25052: PUSH
25053: LD_INT 3
25055: PUSH
25056: EMPTY
25057: LIST
25058: LIST
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: PPUSH
25064: CALL_OW 69
25068: PUSH
25069: FOR_IN
25070: IFFALSE 25088
// ComEnterUnit ( i , building ) ;
25072: LD_VAR 0 2
25076: PPUSH
25077: LD_VAR 0 1
25081: PPUSH
25082: CALL_OW 120
25086: GO 25069
25088: POP
25089: POP
// ruFab = building ;
25090: LD_ADDR_EXP 36
25094: PUSH
25095: LD_VAR 0 1
25099: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
25100: LD_INT 22
25102: PUSH
25103: LD_INT 3
25105: PUSH
25106: EMPTY
25107: LIST
25108: LIST
25109: PUSH
25110: LD_INT 21
25112: PUSH
25113: LD_INT 3
25115: PUSH
25116: EMPTY
25117: LIST
25118: LIST
25119: PUSH
25120: LD_INT 30
25122: PUSH
25123: LD_INT 8
25125: PUSH
25126: EMPTY
25127: LIST
25128: LIST
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: LIST
25134: PPUSH
25135: CALL_OW 69
25139: PUSH
25140: LD_INT 2
25142: EQUAL
25143: IFFALSE 25351
// begin for i = 1 to 2 do
25145: LD_ADDR_VAR 0 2
25149: PUSH
25150: DOUBLE
25151: LD_INT 1
25153: DEC
25154: ST_TO_ADDR
25155: LD_INT 2
25157: PUSH
25158: FOR_TO
25159: IFFALSE 25246
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
25161: LD_INT 22
25163: PUSH
25164: LD_INT 3
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 25
25173: PUSH
25174: LD_INT 4
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PPUSH
25185: CALL_OW 69
25189: PUSH
25190: LD_VAR 0 2
25194: ARRAY
25195: PPUSH
25196: LD_INT 22
25198: PUSH
25199: LD_INT 3
25201: PUSH
25202: EMPTY
25203: LIST
25204: LIST
25205: PUSH
25206: LD_INT 21
25208: PUSH
25209: LD_INT 3
25211: PUSH
25212: EMPTY
25213: LIST
25214: LIST
25215: PUSH
25216: LD_INT 30
25218: PUSH
25219: LD_INT 8
25221: PUSH
25222: EMPTY
25223: LIST
25224: LIST
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: LIST
25230: PPUSH
25231: CALL_OW 69
25235: PUSH
25236: LD_INT 1
25238: ARRAY
25239: PPUSH
25240: CALL_OW 120
25244: GO 25158
25246: POP
25247: POP
// for i = 3 to 4 do
25248: LD_ADDR_VAR 0 2
25252: PUSH
25253: DOUBLE
25254: LD_INT 3
25256: DEC
25257: ST_TO_ADDR
25258: LD_INT 4
25260: PUSH
25261: FOR_TO
25262: IFFALSE 25349
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
25264: LD_INT 22
25266: PUSH
25267: LD_INT 3
25269: PUSH
25270: EMPTY
25271: LIST
25272: LIST
25273: PUSH
25274: LD_INT 25
25276: PUSH
25277: LD_INT 4
25279: PUSH
25280: EMPTY
25281: LIST
25282: LIST
25283: PUSH
25284: EMPTY
25285: LIST
25286: LIST
25287: PPUSH
25288: CALL_OW 69
25292: PUSH
25293: LD_VAR 0 2
25297: ARRAY
25298: PPUSH
25299: LD_INT 22
25301: PUSH
25302: LD_INT 3
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: PUSH
25309: LD_INT 21
25311: PUSH
25312: LD_INT 3
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 30
25321: PUSH
25322: LD_INT 8
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: EMPTY
25330: LIST
25331: LIST
25332: LIST
25333: PPUSH
25334: CALL_OW 69
25338: PUSH
25339: LD_INT 2
25341: ARRAY
25342: PPUSH
25343: CALL_OW 120
25347: GO 25261
25349: POP
25350: POP
// end ; if GetBType ( building ) = b_barracks then
25351: LD_VAR 0 1
25355: PPUSH
25356: CALL_OW 266
25360: PUSH
25361: LD_INT 5
25363: EQUAL
25364: IFFALSE 25491
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
25366: LD_ADDR_VAR 0 2
25370: PUSH
25371: LD_INT 22
25373: PUSH
25374: LD_INT 3
25376: PUSH
25377: EMPTY
25378: LIST
25379: LIST
25380: PUSH
25381: LD_INT 25
25383: PUSH
25384: LD_INT 1
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 3
25393: PUSH
25394: LD_INT 54
25396: PUSH
25397: EMPTY
25398: LIST
25399: PUSH
25400: EMPTY
25401: LIST
25402: LIST
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: LIST
25408: PPUSH
25409: CALL_OW 69
25413: PUSH
25414: FOR_IN
25415: IFFALSE 25433
// ComEnterUnit ( i , building ) ;
25417: LD_VAR 0 2
25421: PPUSH
25422: LD_VAR 0 1
25426: PPUSH
25427: CALL_OW 120
25431: GO 25414
25433: POP
25434: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
25435: LD_INT 22
25437: PUSH
25438: LD_INT 3
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: LD_INT 30
25447: PUSH
25448: LD_INT 5
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: PUSH
25455: EMPTY
25456: LIST
25457: LIST
25458: PPUSH
25459: CALL_OW 69
25463: PUSH
25464: LD_INT 0
25466: EQUAL
25467: IFFALSE 25481
// ruArm1 = building else
25469: LD_ADDR_EXP 34
25473: PUSH
25474: LD_VAR 0 1
25478: ST_TO_ADDR
25479: GO 25491
// ruArm2 = building ;
25481: LD_ADDR_EXP 35
25485: PUSH
25486: LD_VAR 0 1
25490: ST_TO_ADDR
// end ; end ; end ;
25491: PPOPN 2
25493: END
// on EnterBuilding ( building , human ) do var rnd ;
25494: LD_INT 0
25496: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
25497: LD_VAR 0 2
25501: PPUSH
25502: CALL_OW 255
25506: PUSH
25507: LD_INT 2
25509: EQUAL
25510: PUSH
25511: LD_VAR 0 2
25515: PPUSH
25516: CALL_OW 257
25520: PUSH
25521: LD_INT 1
25523: EQUAL
25524: AND
25525: PUSH
25526: LD_VAR 0 1
25530: PUSH
25531: LD_EXP 46
25535: EQUAL
25536: AND
25537: IFFALSE 25584
// begin wait ( 0 0$1 ) ;
25539: LD_INT 35
25541: PPUSH
25542: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
25546: LD_ADDR_VAR 0 3
25550: PUSH
25551: LD_INT 1
25553: PPUSH
25554: LD_INT 100
25556: PPUSH
25557: CALL_OW 12
25561: ST_TO_ADDR
// if rnd > 50 then
25562: LD_VAR 0 3
25566: PUSH
25567: LD_INT 50
25569: GREATER
25570: IFFALSE 25584
// SetClass ( human , class_mortar ) ;
25572: LD_VAR 0 2
25576: PPUSH
25577: LD_INT 8
25579: PPUSH
25580: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
25584: LD_VAR 0 2
25588: PUSH
25589: LD_INT 22
25591: PUSH
25592: LD_INT 2
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 25
25601: PUSH
25602: LD_INT 12
25604: PUSH
25605: EMPTY
25606: LIST
25607: LIST
25608: PUSH
25609: EMPTY
25610: LIST
25611: LIST
25612: PPUSH
25613: CALL_OW 69
25617: IN
25618: IFFALSE 25668
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
25620: LD_VAR 0 1
25624: PPUSH
25625: CALL_OW 266
25629: PUSH
25630: LD_INT 0
25632: PUSH
25633: LD_INT 1
25635: PUSH
25636: EMPTY
25637: LIST
25638: LIST
25639: IN
25640: IFFALSE 25656
// SetClass ( human , class_apeman_engineer ) else
25642: LD_VAR 0 2
25646: PPUSH
25647: LD_INT 16
25649: PPUSH
25650: CALL_OW 336
25654: GO 25668
// SetClass ( human , class_apeman_soldier ) ;
25656: LD_VAR 0 2
25660: PPUSH
25661: LD_INT 15
25663: PPUSH
25664: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
25668: LD_VAR 0 2
25672: PPUSH
25673: CALL_OW 255
25677: PUSH
25678: LD_INT 3
25680: EQUAL
25681: PUSH
25682: LD_VAR 0 2
25686: PPUSH
25687: CALL_OW 257
25691: PUSH
25692: LD_INT 1
25694: EQUAL
25695: AND
25696: PUSH
25697: LD_VAR 0 1
25701: PUSH
25702: LD_EXP 34
25706: EQUAL
25707: PUSH
25708: LD_VAR 0 1
25712: PUSH
25713: LD_EXP 35
25717: EQUAL
25718: OR
25719: PUSH
25720: EMPTY
25721: LIST
25722: AND
25723: IFFALSE 25744
// begin wait ( 0 0$1 ) ;
25725: LD_INT 35
25727: PPUSH
25728: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
25732: LD_VAR 0 2
25736: PPUSH
25737: LD_INT 9
25739: PPUSH
25740: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
25744: LD_VAR 0 2
25748: PPUSH
25749: CALL_OW 255
25753: PUSH
25754: LD_INT 3
25756: EQUAL
25757: PUSH
25758: LD_VAR 0 2
25762: PPUSH
25763: CALL_OW 257
25767: PUSH
25768: LD_INT 9
25770: EQUAL
25771: AND
25772: PUSH
25773: LD_VAR 0 1
25777: PPUSH
25778: CALL_OW 266
25782: PUSH
25783: LD_INT 32
25785: EQUAL
25786: AND
25787: IFFALSE 25808
// begin wait ( 0 0$1 ) ;
25789: LD_INT 35
25791: PPUSH
25792: CALL_OW 67
// SetClass ( human , 1 ) ;
25796: LD_VAR 0 2
25800: PPUSH
25801: LD_INT 1
25803: PPUSH
25804: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
25808: LD_VAR 0 2
25812: PPUSH
25813: CALL_OW 255
25817: PUSH
25818: LD_INT 3
25820: EQUAL
25821: PUSH
25822: LD_VAR 0 2
25826: PPUSH
25827: CALL_OW 257
25831: PUSH
25832: LD_INT 3
25834: EQUAL
25835: AND
25836: PUSH
25837: LD_VAR 0 1
25841: PUSH
25842: LD_EXP 36
25846: EQUAL
25847: AND
25848: IFFALSE 25862
// SetLives ( human , 1000 ) ;
25850: LD_VAR 0 2
25854: PPUSH
25855: LD_INT 1000
25857: PPUSH
25858: CALL_OW 234
// end ;
25862: PPOPN 3
25864: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25865: LD_VAR 0 1
25869: PUSH
25870: LD_INT 1
25872: EQUAL
25873: PUSH
25874: LD_VAR 0 2
25878: PUSH
25879: LD_INT 2
25881: EQUAL
25882: AND
25883: PUSH
25884: LD_INT 1
25886: PPUSH
25887: LD_INT 2
25889: PPUSH
25890: CALL_OW 81
25894: PUSH
25895: LD_INT 1
25897: EQUAL
25898: AND
25899: IFFALSE 25920
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
25901: LD_EXP 25
25905: PPUSH
25906: LD_STRING D6b-Pow-1
25908: PPUSH
25909: CALL_OW 94
// YouLost ( Powell ) ;
25913: LD_STRING Powell
25915: PPUSH
25916: CALL_OW 104
// end ; end ;
25920: PPOPN 2
25922: END
// every 0 0$10 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
25923: LD_INT 23
25925: PPUSH
25926: LD_INT 22
25928: PUSH
25929: LD_INT 1
25931: PUSH
25932: EMPTY
25933: LIST
25934: LIST
25935: PUSH
25936: LD_INT 21
25938: PUSH
25939: LD_INT 3
25941: PUSH
25942: EMPTY
25943: LIST
25944: LIST
25945: PUSH
25946: EMPTY
25947: LIST
25948: LIST
25949: PPUSH
25950: CALL_OW 70
25954: PUSH
25955: LD_INT 23
25957: PPUSH
25958: LD_INT 22
25960: PUSH
25961: LD_INT 1
25963: PUSH
25964: EMPTY
25965: LIST
25966: LIST
25967: PUSH
25968: LD_INT 21
25970: PUSH
25971: LD_INT 2
25973: PUSH
25974: EMPTY
25975: LIST
25976: LIST
25977: PUSH
25978: EMPTY
25979: LIST
25980: LIST
25981: PPUSH
25982: CALL_OW 70
25986: OR
25987: PUSH
25988: LD_INT 1
25990: PPUSH
25991: LD_INT 2
25993: PPUSH
25994: CALL_OW 81
25998: PUSH
25999: LD_INT 1
26001: EQUAL
26002: AND
26003: IFFALSE 26136
26005: GO 26007
26007: DISABLE
// begin enable ;
26008: ENABLE
// wait ( 0 0$10 ) ;
26009: LD_INT 350
26011: PPUSH
26012: CALL_OW 67
// if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26016: LD_INT 23
26018: PPUSH
26019: LD_INT 22
26021: PUSH
26022: LD_INT 1
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 21
26031: PUSH
26032: LD_INT 3
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PPUSH
26043: CALL_OW 70
26047: PUSH
26048: LD_INT 23
26050: PPUSH
26051: LD_INT 22
26053: PUSH
26054: LD_INT 1
26056: PUSH
26057: EMPTY
26058: LIST
26059: LIST
26060: PUSH
26061: LD_INT 21
26063: PUSH
26064: LD_INT 2
26066: PUSH
26067: EMPTY
26068: LIST
26069: LIST
26070: PUSH
26071: EMPTY
26072: LIST
26073: LIST
26074: PPUSH
26075: CALL_OW 70
26079: OR
26080: PUSH
26081: LD_INT 1
26083: PPUSH
26084: LD_INT 2
26086: PPUSH
26087: CALL_OW 81
26091: PUSH
26092: LD_INT 1
26094: EQUAL
26095: AND
26096: IFFALSE 26136
// begin disable ;
26098: DISABLE
// InGameOn ;
26099: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
26103: LD_INT 73
26105: PPUSH
26106: LD_INT 18
26108: PPUSH
26109: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
26113: LD_EXP 25
26117: PPUSH
26118: LD_STRING D6b-Pow-1
26120: PPUSH
26121: CALL_OW 94
// YouLost ( Powell ) ;
26125: LD_STRING Powell
26127: PPUSH
26128: CALL_OW 104
// InGameOff ;
26132: CALL_OW 9
// end ; end ;
26136: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
26137: LD_VAR 0 1
26141: PPUSH
26142: CALL 45644 0 1
// if unit = Truman then
26146: LD_VAR 0 1
26150: PUSH
26151: LD_EXP 20
26155: EQUAL
26156: IFFALSE 26165
// YouLost ( Powell ) ;
26158: LD_STRING Powell
26160: PPUSH
26161: CALL_OW 104
// if unit = JMM then
26165: LD_VAR 0 1
26169: PUSH
26170: LD_EXP 1
26174: EQUAL
26175: IFFALSE 26184
// YouLost ( JMM ) ;
26177: LD_STRING JMM
26179: PPUSH
26180: CALL_OW 104
// if unit = Khatam then
26184: LD_VAR 0 1
26188: PUSH
26189: LD_EXP 14
26193: EQUAL
26194: IFFALSE 26204
// KhatamStatus = 0 ;
26196: LD_ADDR_EXP 54
26200: PUSH
26201: LD_INT 0
26203: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
26204: LD_VAR 0 1
26208: PPUSH
26209: CALL_OW 255
26213: PUSH
26214: LD_INT 3
26216: EQUAL
26217: PUSH
26218: LD_VAR 0 1
26222: PPUSH
26223: CALL_OW 247
26227: PUSH
26228: LD_INT 3
26230: EQUAL
26231: AND
26232: IFFALSE 26924
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
26234: LD_VAR 0 1
26238: PPUSH
26239: CALL_OW 266
26243: PUSH
26244: LD_INT 31
26246: EQUAL
26247: PUSH
26248: LD_VAR 0 1
26252: PPUSH
26253: CALL_OW 266
26257: PUSH
26258: LD_INT 32
26260: EQUAL
26261: OR
26262: PUSH
26263: LD_VAR 0 1
26267: PPUSH
26268: CALL_OW 266
26272: PUSH
26273: LD_INT 36
26275: EQUAL
26276: OR
26277: PUSH
26278: LD_VAR 0 1
26282: PPUSH
26283: CALL_OW 266
26287: PUSH
26288: LD_INT 0
26290: EQUAL
26291: OR
26292: PUSH
26293: LD_VAR 0 1
26297: PPUSH
26298: CALL_OW 266
26302: PUSH
26303: LD_INT 24
26305: EQUAL
26306: OR
26307: PUSH
26308: LD_VAR 0 1
26312: PPUSH
26313: CALL_OW 266
26317: PUSH
26318: LD_INT 17
26320: EQUAL
26321: OR
26322: PUSH
26323: LD_VAR 0 1
26327: PPUSH
26328: CALL_OW 266
26332: PUSH
26333: LD_INT 25
26335: EQUAL
26336: OR
26337: PUSH
26338: LD_VAR 0 1
26342: PPUSH
26343: CALL_OW 266
26347: PUSH
26348: LD_INT 19
26350: EQUAL
26351: OR
26352: PUSH
26353: LD_VAR 0 1
26357: PPUSH
26358: CALL_OW 266
26362: PUSH
26363: LD_INT 20
26365: EQUAL
26366: OR
26367: PUSH
26368: LD_VAR 0 1
26372: PPUSH
26373: CALL_OW 266
26377: PUSH
26378: LD_INT 18
26380: EQUAL
26381: OR
26382: PUSH
26383: LD_VAR 0 1
26387: PPUSH
26388: CALL_OW 266
26392: PUSH
26393: LD_INT 21
26395: EQUAL
26396: OR
26397: PUSH
26398: LD_VAR 0 1
26402: PPUSH
26403: CALL_OW 266
26407: PUSH
26408: LD_INT 23
26410: EQUAL
26411: OR
26412: PUSH
26413: LD_VAR 0 1
26417: PPUSH
26418: CALL_OW 266
26422: PUSH
26423: LD_INT 16
26425: EQUAL
26426: OR
26427: PUSH
26428: LD_VAR 0 1
26432: PPUSH
26433: CALL_OW 266
26437: PUSH
26438: LD_INT 6
26440: EQUAL
26441: OR
26442: PUSH
26443: LD_VAR 0 1
26447: PPUSH
26448: CALL_OW 266
26452: PUSH
26453: LD_INT 29
26455: EQUAL
26456: OR
26457: PUSH
26458: LD_VAR 0 1
26462: PPUSH
26463: CALL_OW 266
26467: PUSH
26468: LD_INT 26
26470: EQUAL
26471: OR
26472: PUSH
26473: LD_VAR 0 1
26477: PPUSH
26478: CALL_OW 266
26482: PUSH
26483: LD_INT 30
26485: EQUAL
26486: OR
26487: PUSH
26488: LD_VAR 0 1
26492: PPUSH
26493: CALL_OW 266
26497: PUSH
26498: LD_INT 28
26500: EQUAL
26501: OR
26502: PUSH
26503: LD_VAR 0 1
26507: PPUSH
26508: CALL_OW 266
26512: PUSH
26513: LD_INT 27
26515: EQUAL
26516: OR
26517: PUSH
26518: LD_VAR 0 1
26522: PPUSH
26523: CALL_OW 266
26527: PUSH
26528: LD_INT 33
26530: EQUAL
26531: OR
26532: PUSH
26533: LD_VAR 0 1
26537: PPUSH
26538: CALL_OW 266
26542: PUSH
26543: LD_INT 2
26545: EQUAL
26546: OR
26547: PUSH
26548: LD_VAR 0 1
26552: PPUSH
26553: CALL_OW 266
26557: PUSH
26558: LD_INT 4
26560: EQUAL
26561: OR
26562: IFFALSE 26648
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
26564: LD_ADDR_EXP 43
26568: PUSH
26569: LD_EXP 43
26573: PUSH
26574: LD_VAR 0 1
26578: PPUSH
26579: CALL_OW 266
26583: ADD
26584: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26585: LD_ADDR_EXP 43
26589: PUSH
26590: LD_EXP 43
26594: PUSH
26595: LD_VAR 0 1
26599: PPUSH
26600: CALL_OW 250
26604: ADD
26605: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26606: LD_ADDR_EXP 43
26610: PUSH
26611: LD_EXP 43
26615: PUSH
26616: LD_VAR 0 1
26620: PPUSH
26621: CALL_OW 251
26625: ADD
26626: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26627: LD_ADDR_EXP 43
26631: PUSH
26632: LD_EXP 43
26636: PUSH
26637: LD_VAR 0 1
26641: PPUSH
26642: CALL_OW 254
26646: ADD
26647: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
26648: LD_VAR 0 1
26652: PPUSH
26653: CALL_OW 266
26657: PUSH
26658: LD_INT 1
26660: EQUAL
26661: IFFALSE 26740
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
26663: LD_ADDR_EXP 43
26667: PUSH
26668: LD_EXP 43
26672: PUSH
26673: LD_INT 0
26675: ADD
26676: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26677: LD_ADDR_EXP 43
26681: PUSH
26682: LD_EXP 43
26686: PUSH
26687: LD_VAR 0 1
26691: PPUSH
26692: CALL_OW 250
26696: ADD
26697: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26698: LD_ADDR_EXP 43
26702: PUSH
26703: LD_EXP 43
26707: PUSH
26708: LD_VAR 0 1
26712: PPUSH
26713: CALL_OW 251
26717: ADD
26718: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26719: LD_ADDR_EXP 43
26723: PUSH
26724: LD_EXP 43
26728: PUSH
26729: LD_VAR 0 1
26733: PPUSH
26734: CALL_OW 254
26738: ADD
26739: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
26740: LD_VAR 0 1
26744: PPUSH
26745: CALL_OW 266
26749: PUSH
26750: LD_INT 3
26752: EQUAL
26753: IFFALSE 26832
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
26755: LD_ADDR_EXP 43
26759: PUSH
26760: LD_EXP 43
26764: PUSH
26765: LD_INT 2
26767: ADD
26768: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26769: LD_ADDR_EXP 43
26773: PUSH
26774: LD_EXP 43
26778: PUSH
26779: LD_VAR 0 1
26783: PPUSH
26784: CALL_OW 250
26788: ADD
26789: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26790: LD_ADDR_EXP 43
26794: PUSH
26795: LD_EXP 43
26799: PUSH
26800: LD_VAR 0 1
26804: PPUSH
26805: CALL_OW 251
26809: ADD
26810: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26811: LD_ADDR_EXP 43
26815: PUSH
26816: LD_EXP 43
26820: PUSH
26821: LD_VAR 0 1
26825: PPUSH
26826: CALL_OW 254
26830: ADD
26831: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
26832: LD_VAR 0 1
26836: PPUSH
26837: CALL_OW 266
26841: PUSH
26842: LD_INT 5
26844: EQUAL
26845: IFFALSE 26924
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
26847: LD_ADDR_EXP 43
26851: PUSH
26852: LD_EXP 43
26856: PUSH
26857: LD_INT 4
26859: ADD
26860: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26861: LD_ADDR_EXP 43
26865: PUSH
26866: LD_EXP 43
26870: PUSH
26871: LD_VAR 0 1
26875: PPUSH
26876: CALL_OW 250
26880: ADD
26881: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26882: LD_ADDR_EXP 43
26886: PUSH
26887: LD_EXP 43
26891: PUSH
26892: LD_VAR 0 1
26896: PPUSH
26897: CALL_OW 251
26901: ADD
26902: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26903: LD_ADDR_EXP 43
26907: PUSH
26908: LD_EXP 43
26912: PUSH
26913: LD_VAR 0 1
26917: PPUSH
26918: CALL_OW 254
26922: ADD
26923: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
26924: LD_EXP 52
26928: PUSH
26929: LD_VAR 0 1
26933: PPUSH
26934: CALL_OW 257
26938: PUSH
26939: LD_INT 3
26941: EQUAL
26942: AND
26943: PUSH
26944: LD_VAR 0 1
26948: PPUSH
26949: CALL_OW 255
26953: PUSH
26954: LD_INT 3
26956: EQUAL
26957: AND
26958: PUSH
26959: LD_EXP 36
26963: PPUSH
26964: CALL_OW 302
26968: AND
26969: PUSH
26970: LD_EXP 36
26974: PPUSH
26975: CALL_OW 255
26979: PUSH
26980: LD_INT 3
26982: EQUAL
26983: AND
26984: IFFALSE 27068
// begin ruMech := ruMech - 1 ;
26986: LD_ADDR_EXP 52
26990: PUSH
26991: LD_EXP 52
26995: PUSH
26996: LD_INT 1
26998: MINUS
26999: ST_TO_ADDR
// uc_side = 3 ;
27000: LD_ADDR_OWVAR 20
27004: PUSH
27005: LD_INT 3
27007: ST_TO_ADDR
// uc_nation = 3 ;
27008: LD_ADDR_OWVAR 21
27012: PUSH
27013: LD_INT 3
27015: ST_TO_ADDR
// hc_gallery :=  ;
27016: LD_ADDR_OWVAR 33
27020: PUSH
27021: LD_STRING 
27023: ST_TO_ADDR
// hc_name :=  ;
27024: LD_ADDR_OWVAR 26
27028: PUSH
27029: LD_STRING 
27031: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
27032: LD_INT 0
27034: PPUSH
27035: LD_EXP 37
27039: PPUSH
27040: LD_EXP 38
27044: PPUSH
27045: CALL_OW 12
27049: PPUSH
27050: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
27054: CALL_OW 44
27058: PPUSH
27059: LD_EXP 36
27063: PPUSH
27064: CALL_OW 52
// end ; end ;
27068: PPOPN 1
27070: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
27071: LD_VAR 0 1
27075: PPUSH
27076: LD_VAR 0 2
27080: PPUSH
27081: CALL 45764 0 2
// end ;
27085: PPOPN 2
27087: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
27088: LD_ADDR_OWVAR 57
27092: PUSH
27093: LD_INT 0
27095: ST_TO_ADDR
// fastEnd = 1 ;
27096: LD_ADDR_EXP 64
27100: PUSH
27101: LD_INT 1
27103: ST_TO_ADDR
// FinishMission ;
27104: CALL 28272 0 0
// end ;
27108: PPOPN 1
27110: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
27111: LD_VAR 0 1
27115: PPUSH
27116: CALL 45748 0 1
// end ; end_of_file
27120: PPOPN 1
27122: END
// export function CreateNature ; var i , un ; begin
27123: LD_INT 0
27125: PPUSH
27126: PPUSH
27127: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
27128: LD_ADDR_VAR 0 2
27132: PUSH
27133: DOUBLE
27134: LD_INT 1
27136: DEC
27137: ST_TO_ADDR
27138: LD_OWVAR 67
27142: PUSH
27143: LD_INT 1
27145: PPUSH
27146: LD_INT 5
27148: PPUSH
27149: CALL_OW 12
27153: PLUS
27154: PUSH
27155: FOR_TO
27156: IFFALSE 27301
// begin hc_sex = sex_male ;
27158: LD_ADDR_OWVAR 27
27162: PUSH
27163: LD_INT 1
27165: ST_TO_ADDR
// uc_side = 0 ;
27166: LD_ADDR_OWVAR 20
27170: PUSH
27171: LD_INT 0
27173: ST_TO_ADDR
// uc_nation = nation_nature ;
27174: LD_ADDR_OWVAR 21
27178: PUSH
27179: LD_INT 0
27181: ST_TO_ADDR
// hc_class = class_apeman ;
27182: LD_ADDR_OWVAR 28
27186: PUSH
27187: LD_INT 12
27189: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
27190: LD_ADDR_OWVAR 31
27194: PUSH
27195: LD_INT 2
27197: PPUSH
27198: LD_INT 7
27200: PPUSH
27201: CALL_OW 12
27205: PUSH
27206: LD_OWVAR 67
27210: PLUS
27211: PUSH
27212: LD_INT 2
27214: PPUSH
27215: LD_INT 10
27217: PPUSH
27218: CALL_OW 12
27222: PUSH
27223: LD_INT 2
27225: PPUSH
27226: LD_INT 10
27228: PPUSH
27229: CALL_OW 12
27233: PUSH
27234: LD_INT 2
27236: PPUSH
27237: LD_INT 10
27239: PPUSH
27240: CALL_OW 12
27244: PUSH
27245: EMPTY
27246: LIST
27247: LIST
27248: LIST
27249: LIST
27250: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27251: LD_ADDR_OWVAR 35
27255: PUSH
27256: LD_INT 5
27258: NEG
27259: PPUSH
27260: LD_INT 5
27262: PPUSH
27263: CALL_OW 12
27267: PUSH
27268: LD_OWVAR 67
27272: MUL
27273: ST_TO_ADDR
// un = CreateHuman ;
27274: LD_ADDR_VAR 0 3
27278: PUSH
27279: CALL_OW 44
27283: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
27284: LD_VAR 0 3
27288: PPUSH
27289: LD_INT 5
27291: PPUSH
27292: LD_INT 0
27294: PPUSH
27295: CALL_OW 49
// end ;
27299: GO 27155
27301: POP
27302: POP
// for i = 1 to Difficulty + 2 do
27303: LD_ADDR_VAR 0 2
27307: PUSH
27308: DOUBLE
27309: LD_INT 1
27311: DEC
27312: ST_TO_ADDR
27313: LD_OWVAR 67
27317: PUSH
27318: LD_INT 2
27320: PLUS
27321: PUSH
27322: FOR_TO
27323: IFFALSE 27432
// begin hc_sex = sex_male ;
27325: LD_ADDR_OWVAR 27
27329: PUSH
27330: LD_INT 1
27332: ST_TO_ADDR
// uc_side = 0 ;
27333: LD_ADDR_OWVAR 20
27337: PUSH
27338: LD_INT 0
27340: ST_TO_ADDR
// uc_nation = nation_nature ;
27341: LD_ADDR_OWVAR 21
27345: PUSH
27346: LD_INT 0
27348: ST_TO_ADDR
// hc_class = class_tiger ;
27349: LD_ADDR_OWVAR 28
27353: PUSH
27354: LD_INT 14
27356: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27357: LD_ADDR_OWVAR 31
27361: PUSH
27362: LD_EXP 38
27366: PUSH
27367: LD_INT 0
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: LD_INT 0
27375: PUSH
27376: EMPTY
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27382: LD_ADDR_OWVAR 35
27386: PUSH
27387: LD_INT 5
27389: NEG
27390: PPUSH
27391: LD_INT 5
27393: PPUSH
27394: CALL_OW 12
27398: PUSH
27399: LD_OWVAR 67
27403: MUL
27404: ST_TO_ADDR
// un = CreateHuman ;
27405: LD_ADDR_VAR 0 3
27409: PUSH
27410: CALL_OW 44
27414: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27415: LD_VAR 0 3
27419: PPUSH
27420: LD_INT 6
27422: PPUSH
27423: LD_INT 0
27425: PPUSH
27426: CALL_OW 49
// end ;
27430: GO 27322
27432: POP
27433: POP
// for i = 1 to rand ( 3 , 4 ) do
27434: LD_ADDR_VAR 0 2
27438: PUSH
27439: DOUBLE
27440: LD_INT 1
27442: DEC
27443: ST_TO_ADDR
27444: LD_INT 3
27446: PPUSH
27447: LD_INT 4
27449: PPUSH
27450: CALL_OW 12
27454: PUSH
27455: FOR_TO
27456: IFFALSE 27550
// begin hc_sex = sex_male ;
27458: LD_ADDR_OWVAR 27
27462: PUSH
27463: LD_INT 1
27465: ST_TO_ADDR
// uc_side = 0 ;
27466: LD_ADDR_OWVAR 20
27470: PUSH
27471: LD_INT 0
27473: ST_TO_ADDR
// uc_nation = nation_nature ;
27474: LD_ADDR_OWVAR 21
27478: PUSH
27479: LD_INT 0
27481: ST_TO_ADDR
// hc_class = 18 ;
27482: LD_ADDR_OWVAR 28
27486: PUSH
27487: LD_INT 18
27489: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27490: LD_ADDR_OWVAR 31
27494: PUSH
27495: LD_EXP 38
27499: PUSH
27500: LD_INT 0
27502: PUSH
27503: LD_INT 0
27505: PUSH
27506: LD_INT 0
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: LIST
27513: LIST
27514: ST_TO_ADDR
// hc_agressivity = 0 ;
27515: LD_ADDR_OWVAR 35
27519: PUSH
27520: LD_INT 0
27522: ST_TO_ADDR
// un = CreateHuman ;
27523: LD_ADDR_VAR 0 3
27527: PUSH
27528: CALL_OW 44
27532: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27533: LD_VAR 0 3
27537: PPUSH
27538: LD_INT 6
27540: PPUSH
27541: LD_INT 0
27543: PPUSH
27544: CALL_OW 49
// end ;
27548: GO 27455
27550: POP
27551: POP
// end ; end_of_file
27552: LD_VAR 0 1
27556: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
27557: LD_EXP 47
27561: PUSH
27562: LD_INT 1
27564: EQUAL
27565: IFFALSE 27653
27567: GO 27569
27569: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
27570: LD_INT 7
27572: PPUSH
27573: LD_INT 5
27575: PPUSH
27576: LD_INT 4
27578: PUSH
27579: LD_INT 5
27581: PUSH
27582: LD_INT 6
27584: PUSH
27585: LD_INT 6
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: LIST
27592: LIST
27593: PUSH
27594: LD_OWVAR 67
27598: ARRAY
27599: PPUSH
27600: LD_EXP 37
27604: PPUSH
27605: LD_EXP 38
27609: PPUSH
27610: CALL_OW 12
27614: PPUSH
27615: LD_INT 2
27617: PPUSH
27618: LD_INT 1
27620: PPUSH
27621: LD_INT 1
27623: PPUSH
27624: EMPTY
27625: PPUSH
27626: LD_INT 25
27628: PUSH
27629: LD_INT 26
27631: PUSH
27632: LD_INT 27
27634: PUSH
27635: LD_INT 28
27637: PUSH
27638: EMPTY
27639: LIST
27640: LIST
27641: LIST
27642: LIST
27643: PPUSH
27644: EMPTY
27645: PPUSH
27646: LD_INT 1
27648: PPUSH
27649: CALL 17523 0 11
27653: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27654: LD_EXP 47
27658: PUSH
27659: LD_INT 1
27661: EQUAL
27662: IFFALSE 27754
27664: GO 27666
27666: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
27667: LD_INT 5
27669: PPUSH
27670: LD_INT 2
27672: PPUSH
27673: LD_INT 5
27675: PUSH
27676: LD_INT 6
27678: PUSH
27679: LD_INT 8
27681: PUSH
27682: LD_INT 9
27684: PUSH
27685: EMPTY
27686: LIST
27687: LIST
27688: LIST
27689: LIST
27690: PUSH
27691: LD_OWVAR 67
27695: ARRAY
27696: PPUSH
27697: LD_INT 0
27699: PPUSH
27700: LD_INT 0
27702: PPUSH
27703: LD_INT 2
27705: PUSH
27706: LD_INT 4
27708: PUSH
27709: LD_INT 5
27711: PUSH
27712: EMPTY
27713: LIST
27714: LIST
27715: LIST
27716: PUSH
27717: LD_OWVAR 67
27721: ARRAY
27722: PPUSH
27723: LD_INT 0
27725: PPUSH
27726: LD_EXP 37
27730: PPUSH
27731: LD_EXP 38
27735: PPUSH
27736: CALL_OW 12
27740: PPUSH
27741: LD_INT 7
27743: PPUSH
27744: LD_INT 9
27746: PPUSH
27747: LD_INT 1
27749: PPUSH
27750: CALL 19227 0 11
27754: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27755: LD_EXP 47
27759: PUSH
27760: LD_INT 1
27762: EQUAL
27763: IFFALSE 27772
27765: GO 27767
27767: DISABLE
// PrepareArabianSheik ;
27768: CALL 4843 0 0
27772: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27773: LD_EXP 30
27777: PUSH
27778: LD_EXP 65
27782: PUSH
27783: LD_INT 1
27785: EQUAL
27786: AND
27787: IFFALSE 27856
27789: GO 27791
27791: DISABLE
// begin enable ;
27792: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
27793: LD_INT 6
27795: PPUSH
27796: LD_INT 3
27798: PPUSH
27799: LD_EXP 61
27803: PPUSH
27804: LD_INT 0
27806: PPUSH
27807: LD_OWVAR 67
27811: PPUSH
27812: LD_INT 0
27814: PPUSH
27815: LD_EXP 61
27819: PUSH
27820: LD_INT 3
27822: DIV
27823: PUSH
27824: LD_INT 1
27826: PLUS
27827: PPUSH
27828: LD_EXP 37
27832: PPUSH
27833: LD_EXP 38
27837: PPUSH
27838: CALL_OW 12
27842: PPUSH
27843: LD_INT 17
27845: PPUSH
27846: LD_INT 18
27848: PPUSH
27849: LD_INT 1
27851: PPUSH
27852: CALL 19227 0 11
// end ;
27856: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27857: LD_EXP 30
27861: PUSH
27862: LD_EXP 65
27866: PUSH
27867: LD_INT 1
27869: EQUAL
27870: AND
27871: IFFALSE 27948
27873: GO 27875
27875: DISABLE
// begin enable ;
27876: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
27877: LD_INT 17
27879: PPUSH
27880: LD_INT 6
27882: PPUSH
27883: LD_EXP 60
27887: PPUSH
27888: LD_EXP 37
27892: PPUSH
27893: LD_EXP 38
27897: PPUSH
27898: CALL_OW 12
27902: PPUSH
27903: LD_INT 3
27905: PPUSH
27906: LD_INT 1
27908: PPUSH
27909: LD_INT 3
27911: PUSH
27912: LD_INT 3
27914: PUSH
27915: EMPTY
27916: LIST
27917: LIST
27918: PPUSH
27919: LD_INT 43
27921: PUSH
27922: LD_INT 44
27924: PUSH
27925: LD_INT 45
27927: PUSH
27928: LD_INT 46
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: LIST
27935: LIST
27936: PPUSH
27937: EMPTY
27938: PPUSH
27939: EMPTY
27940: PPUSH
27941: LD_INT 1
27943: PPUSH
27944: CALL 17523 0 11
// end ;
27948: END
// every 10 10$00 trigger joinEpsilon do
27949: LD_EXP 30
27953: IFFALSE 28007
27955: GO 27957
27957: DISABLE
// begin enable ;
27958: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
27959: LD_ADDR_EXP 60
27963: PUSH
27964: LD_EXP 60
27968: PUSH
27969: LD_INT 1
27971: PPUSH
27972: LD_OWVAR 67
27976: PPUSH
27977: CALL_OW 12
27981: PLUS
27982: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
27983: LD_ADDR_EXP 61
27987: PUSH
27988: LD_EXP 61
27992: PUSH
27993: LD_INT 1
27995: PPUSH
27996: LD_OWVAR 67
28000: PPUSH
28001: CALL_OW 12
28005: PLUS
28006: ST_TO_ADDR
// end ;
28007: END
// every 21 21$0 trigger attackAvalaible = 1 do
28008: LD_EXP 65
28012: PUSH
28013: LD_INT 1
28015: EQUAL
28016: IFFALSE 28029
28018: GO 28020
28020: DISABLE
// attackAvalaible = 0 ; end_of_file
28021: LD_ADDR_EXP 65
28025: PUSH
28026: LD_INT 0
28028: ST_TO_ADDR
28029: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
28030: LD_INT 54
28032: PPUSH
28033: LD_INT 1
28035: PPUSH
28036: CALL_OW 321
28040: PUSH
28041: LD_INT 2
28043: EQUAL
28044: PUSH
28045: LD_INT 55
28047: PPUSH
28048: LD_INT 1
28050: PPUSH
28051: CALL_OW 321
28055: PUSH
28056: LD_INT 2
28058: EQUAL
28059: AND
28060: PUSH
28061: LD_INT 21
28063: PPUSH
28064: LD_INT 1
28066: PPUSH
28067: CALL_OW 321
28071: PUSH
28072: LD_INT 2
28074: EQUAL
28075: AND
28076: PUSH
28077: LD_INT 22
28079: PPUSH
28080: LD_INT 1
28082: PPUSH
28083: CALL_OW 321
28087: PUSH
28088: LD_INT 2
28090: EQUAL
28091: AND
28092: PUSH
28093: LD_INT 12
28095: PPUSH
28096: LD_INT 1
28098: PPUSH
28099: CALL_OW 321
28103: PUSH
28104: LD_INT 1
28106: EQUAL
28107: PUSH
28108: LD_INT 32
28110: PPUSH
28111: LD_INT 1
28113: PPUSH
28114: CALL_OW 321
28118: PUSH
28119: LD_INT 1
28121: EQUAL
28122: OR
28123: PUSH
28124: EMPTY
28125: LIST
28126: AND
28127: PUSH
28128: LD_EXP 49
28132: PUSH
28133: LD_INT 1
28135: EQUAL
28136: AND
28137: PUSH
28138: LD_INT 22
28140: PUSH
28141: LD_INT 3
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 21
28150: PUSH
28151: LD_INT 1
28153: PUSH
28154: EMPTY
28155: LIST
28156: LIST
28157: PUSH
28158: EMPTY
28159: LIST
28160: LIST
28161: PPUSH
28162: CALL_OW 69
28166: PUSH
28167: LD_INT 0
28169: EQUAL
28170: AND
28171: IFFALSE 28227
28173: GO 28175
28175: DISABLE
// begin case query ( QEndMission ) of 1 :
28176: LD_STRING QEndMission
28178: PPUSH
28179: CALL_OW 97
28183: PUSH
28184: LD_INT 1
28186: DOUBLE
28187: EQUAL
28188: IFTRUE 28192
28190: GO 28203
28192: POP
// begin end_the_mission_allowed = true ;
28193: LD_ADDR_OWVAR 57
28197: PUSH
28198: LD_INT 1
28200: ST_TO_ADDR
// end ; 2 :
28201: GO 28227
28203: LD_INT 2
28205: DOUBLE
28206: EQUAL
28207: IFTRUE 28211
28209: GO 28226
28211: POP
// begin fastEnd = 1 ;
28212: LD_ADDR_EXP 64
28216: PUSH
28217: LD_INT 1
28219: ST_TO_ADDR
// FinishMission ;
28220: CALL 28272 0 0
// end ; end ;
28224: GO 28227
28226: POP
// end ;
28227: END
// every 0 0$1 trigger spawnRussians and not ruDepotConstructed and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
28228: LD_EXP 59
28232: PUSH
28233: LD_EXP 58
28237: NOT
28238: AND
28239: PUSH
28240: LD_INT 22
28242: PUSH
28243: LD_INT 3
28245: PUSH
28246: EMPTY
28247: LIST
28248: LIST
28249: PPUSH
28250: CALL_OW 69
28254: PUSH
28255: LD_INT 0
28257: EQUAL
28258: AND
28259: IFFALSE 28271
28261: GO 28263
28263: DISABLE
// SetAchievement ( ACH_TACT ) ;
28264: LD_STRING ACH_TACT
28266: PPUSH
28267: CALL_OW 543
28271: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
28272: LD_INT 0
28274: PPUSH
28275: PPUSH
28276: PPUSH
28277: PPUSH
// if not snipersTrained then
28278: LD_EXP 63
28282: NOT
28283: IFFALSE 28292
// SetAchievement ( ACH_SNIPER ) ;
28285: LD_STRING ACH_SNIPER
28287: PPUSH
28288: CALL_OW 543
// m1 := false ;
28292: LD_ADDR_VAR 0 2
28296: PUSH
28297: LD_INT 0
28299: ST_TO_ADDR
// m2 := false ;
28300: LD_ADDR_VAR 0 3
28304: PUSH
28305: LD_INT 0
28307: ST_TO_ADDR
// m3 := false ;
28308: LD_ADDR_VAR 0 4
28312: PUSH
28313: LD_INT 0
28315: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
28316: LD_EXP 54
28320: PPUSH
28321: LD_STRING 10_KhatamStatus_1
28323: PPUSH
28324: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
28328: LD_EXP 53
28332: PPUSH
28333: LD_STRING 10_GensherEscape_1
28335: PPUSH
28336: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
28340: LD_INT 12
28342: PPUSH
28343: LD_INT 1
28345: PPUSH
28346: CALL_OW 321
28350: PUSH
28351: LD_INT 2
28353: EQUAL
28354: IFFALSE 28376
// begin AddMedal ( sights , 1 ) ;
28356: LD_STRING sights
28358: PPUSH
28359: LD_INT 1
28361: PPUSH
28362: CALL_OW 101
// m1 := true ;
28366: LD_ADDR_VAR 0 2
28370: PUSH
28371: LD_INT 1
28373: ST_TO_ADDR
// end else
28374: GO 28387
// begin AddMedal ( sights , - 1 ) ;
28376: LD_STRING sights
28378: PPUSH
28379: LD_INT 1
28381: NEG
28382: PPUSH
28383: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
28387: LD_INT 32
28389: PPUSH
28390: LD_INT 1
28392: PPUSH
28393: CALL_OW 321
28397: PUSH
28398: LD_INT 2
28400: EQUAL
28401: IFFALSE 28423
// begin AddMedal ( computers , 1 ) ;
28403: LD_STRING computers
28405: PPUSH
28406: LD_INT 1
28408: PPUSH
28409: CALL_OW 101
// m2 := true ;
28413: LD_ADDR_VAR 0 3
28417: PUSH
28418: LD_INT 1
28420: ST_TO_ADDR
// end else
28421: GO 28434
// begin AddMedal ( computers , - 1 ) ;
28423: LD_STRING computers
28425: PPUSH
28426: LD_INT 1
28428: NEG
28429: PPUSH
28430: CALL_OW 101
// end ; if arabianEscape = 0 then
28434: LD_EXP 48
28438: PUSH
28439: LD_INT 0
28441: EQUAL
28442: IFFALSE 28474
// begin AddMedal ( renegades , 2 ) ;
28444: LD_STRING renegades
28446: PPUSH
28447: LD_INT 2
28449: PPUSH
28450: CALL_OW 101
// m3 := true ;
28454: LD_ADDR_VAR 0 4
28458: PUSH
28459: LD_INT 1
28461: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
28462: LD_INT 0
28464: PPUSH
28465: LD_STRING 10_ScientistsEscape_1
28467: PPUSH
28468: CALL_OW 39
// end else
28472: GO 28485
// begin AddMedal ( renegades , - 1 ) ;
28474: LD_STRING renegades
28476: PPUSH
28477: LD_INT 1
28479: NEG
28480: PPUSH
28481: CALL_OW 101
// end ; SaveEpsilonBase ;
28485: CALL 29271 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
28489: LD_VAR 0 2
28493: PUSH
28494: LD_VAR 0 3
28498: AND
28499: PUSH
28500: LD_VAR 0 4
28504: AND
28505: PUSH
28506: LD_OWVAR 67
28510: PUSH
28511: LD_INT 3
28513: GREATEREQUAL
28514: AND
28515: IFFALSE 28527
// SetAchievementEX ( ACH_AMER , 10 ) ;
28517: LD_STRING ACH_AMER
28519: PPUSH
28520: LD_INT 10
28522: PPUSH
28523: CALL_OW 564
// if tick <= 40 40$00 then
28527: LD_OWVAR 1
28531: PUSH
28532: LD_INT 84000
28534: LESSEQUAL
28535: IFFALSE 28551
// begin wait ( 3 ) ;
28537: LD_INT 3
28539: PPUSH
28540: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
28544: LD_STRING ACH_ASPEED_10
28546: PPUSH
28547: CALL_OW 543
// end ; GiveMedals ( Main ) ;
28551: LD_STRING Main
28553: PPUSH
28554: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
28558: LD_INT 22
28560: PUSH
28561: LD_INT 1
28563: PUSH
28564: EMPTY
28565: LIST
28566: LIST
28567: PUSH
28568: LD_INT 23
28570: PUSH
28571: LD_INT 1
28573: PUSH
28574: EMPTY
28575: LIST
28576: LIST
28577: PUSH
28578: LD_INT 21
28580: PUSH
28581: LD_INT 1
28583: PUSH
28584: EMPTY
28585: LIST
28586: LIST
28587: PUSH
28588: LD_INT 2
28590: PUSH
28591: LD_INT 25
28593: PUSH
28594: LD_INT 1
28596: PUSH
28597: EMPTY
28598: LIST
28599: LIST
28600: PUSH
28601: LD_INT 25
28603: PUSH
28604: LD_INT 2
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: PUSH
28611: LD_INT 25
28613: PUSH
28614: LD_INT 3
28616: PUSH
28617: EMPTY
28618: LIST
28619: LIST
28620: PUSH
28621: LD_INT 25
28623: PUSH
28624: LD_INT 4
28626: PUSH
28627: EMPTY
28628: LIST
28629: LIST
28630: PUSH
28631: LD_INT 25
28633: PUSH
28634: LD_INT 5
28636: PUSH
28637: EMPTY
28638: LIST
28639: LIST
28640: PUSH
28641: LD_INT 25
28643: PUSH
28644: LD_INT 8
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: LIST
28655: LIST
28656: LIST
28657: LIST
28658: LIST
28659: PUSH
28660: EMPTY
28661: LIST
28662: LIST
28663: LIST
28664: LIST
28665: PPUSH
28666: CALL_OW 69
28670: PPUSH
28671: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
28675: LD_EXP 1
28679: PPUSH
28680: LD_EXP 55
28684: PUSH
28685: LD_STRING JMM
28687: STR
28688: PPUSH
28689: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
28693: LD_EXP 2
28697: PPUSH
28698: LD_EXP 55
28702: PUSH
28703: LD_STRING Brown
28705: STR
28706: PPUSH
28707: CALL 11707 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
28711: LD_EXP 3
28715: PPUSH
28716: LD_EXP 55
28720: PUSH
28721: LD_STRING Donaldson
28723: STR
28724: PPUSH
28725: CALL 11707 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
28729: LD_EXP 4
28733: PPUSH
28734: LD_EXP 55
28738: PUSH
28739: LD_STRING Bobby
28741: STR
28742: PPUSH
28743: CALL 11707 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
28747: LD_EXP 5
28751: PPUSH
28752: LD_EXP 55
28756: PUSH
28757: LD_STRING Cyrus
28759: STR
28760: PPUSH
28761: CALL 11707 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
28765: LD_EXP 6
28769: PPUSH
28770: LD_EXP 55
28774: PUSH
28775: LD_STRING Lisa
28777: STR
28778: PPUSH
28779: CALL 11707 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
28783: LD_EXP 7
28787: PPUSH
28788: LD_EXP 55
28792: PUSH
28793: LD_STRING Frank
28795: STR
28796: PPUSH
28797: CALL 11707 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
28801: LD_EXP 8
28805: PPUSH
28806: LD_EXP 55
28810: PUSH
28811: LD_STRING Kikuchi
28813: STR
28814: PPUSH
28815: CALL 11707 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
28819: LD_EXP 9
28823: PPUSH
28824: LD_EXP 55
28828: PUSH
28829: LD_STRING Houten
28831: STR
28832: PPUSH
28833: CALL 11707 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
28837: LD_EXP 10
28841: PPUSH
28842: LD_EXP 55
28846: PUSH
28847: LD_STRING Gary
28849: STR
28850: PPUSH
28851: CALL 11707 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
28855: LD_EXP 19
28859: PPUSH
28860: LD_EXP 55
28864: PUSH
28865: LD_STRING Cornell
28867: STR
28868: PPUSH
28869: CALL 11707 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
28873: LD_EXP 11
28877: PPUSH
28878: LD_EXP 55
28882: PUSH
28883: LD_STRING Simms
28885: STR
28886: PPUSH
28887: CALL 11707 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
28891: LD_EXP 12
28895: PPUSH
28896: LD_EXP 55
28900: PUSH
28901: LD_STRING Denis
28903: STR
28904: PPUSH
28905: CALL 11707 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
28909: LD_EXP 13
28913: PPUSH
28914: LD_EXP 55
28918: PUSH
28919: LD_STRING Joan
28921: STR
28922: PPUSH
28923: CALL 11707 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
28927: LD_EXP 15
28931: PPUSH
28932: LD_EXP 55
28936: PUSH
28937: LD_STRING Gladstone
28939: STR
28940: PPUSH
28941: CALL 11707 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
28945: LD_EXP 17
28949: PPUSH
28950: LD_EXP 55
28954: PUSH
28955: LD_STRING DeltaDoctor
28957: STR
28958: PPUSH
28959: CALL 11707 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
28963: LD_EXP 23
28967: PPUSH
28968: LD_STRING 10c_lock
28970: PPUSH
28971: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
28975: LD_INT 50
28977: PUSH
28978: EMPTY
28979: LIST
28980: PUSH
28981: LD_INT 22
28983: PUSH
28984: LD_INT 1
28986: PUSH
28987: EMPTY
28988: LIST
28989: LIST
28990: PUSH
28991: LD_INT 21
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: LD_INT 2
29003: PUSH
29004: LD_INT 25
29006: PUSH
29007: LD_INT 1
29009: PUSH
29010: EMPTY
29011: LIST
29012: LIST
29013: PUSH
29014: LD_INT 25
29016: PUSH
29017: LD_INT 2
29019: PUSH
29020: EMPTY
29021: LIST
29022: LIST
29023: PUSH
29024: LD_INT 25
29026: PUSH
29027: LD_INT 3
29029: PUSH
29030: EMPTY
29031: LIST
29032: LIST
29033: PUSH
29034: LD_INT 25
29036: PUSH
29037: LD_INT 4
29039: PUSH
29040: EMPTY
29041: LIST
29042: LIST
29043: PUSH
29044: LD_INT 25
29046: PUSH
29047: LD_INT 5
29049: PUSH
29050: EMPTY
29051: LIST
29052: LIST
29053: PUSH
29054: LD_INT 25
29056: PUSH
29057: LD_INT 8
29059: PUSH
29060: EMPTY
29061: LIST
29062: LIST
29063: PUSH
29064: EMPTY
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: PPUSH
29079: CALL_OW 69
29083: PUSH
29084: LD_EXP 1
29088: PUSH
29089: LD_EXP 2
29093: PUSH
29094: LD_EXP 3
29098: PUSH
29099: LD_EXP 4
29103: PUSH
29104: LD_EXP 5
29108: PUSH
29109: LD_EXP 6
29113: PUSH
29114: LD_EXP 7
29118: PUSH
29119: LD_EXP 15
29123: PUSH
29124: LD_EXP 8
29128: PUSH
29129: LD_EXP 12
29133: PUSH
29134: LD_EXP 13
29138: PUSH
29139: LD_EXP 9
29143: PUSH
29144: LD_EXP 11
29148: PUSH
29149: LD_EXP 10
29153: PUSH
29154: LD_EXP 17
29158: PUSH
29159: LD_EXP 19
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: DIFF
29182: PPUSH
29183: LD_STRING 10_other_survivors
29185: PPUSH
29186: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
29190: LD_INT 50
29192: PUSH
29193: EMPTY
29194: LIST
29195: PUSH
29196: LD_INT 22
29198: PUSH
29199: LD_INT 1
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 21
29208: PUSH
29209: LD_INT 1
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 2
29218: PUSH
29219: LD_INT 25
29221: PUSH
29222: LD_INT 16
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 25
29231: PUSH
29232: LD_INT 12
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: EMPTY
29240: LIST
29241: LIST
29242: LIST
29243: PUSH
29244: EMPTY
29245: LIST
29246: LIST
29247: LIST
29248: LIST
29249: PPUSH
29250: CALL_OW 69
29254: PPUSH
29255: LD_STRING 10_ape
29257: PPUSH
29258: CALL_OW 38
// YouWin ;
29262: CALL_OW 103
// end ;
29266: LD_VAR 0 1
29270: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
29271: LD_INT 0
29273: PPUSH
29274: PPUSH
29275: PPUSH
29276: PPUSH
// epsilonBase = [ ] ;
29277: LD_ADDR_VAR 0 2
29281: PUSH
29282: EMPTY
29283: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
29284: LD_ADDR_VAR 0 3
29288: PUSH
29289: LD_INT 22
29291: PUSH
29292: LD_INT 1
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 21
29301: PUSH
29302: LD_INT 3
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 50
29311: PUSH
29312: EMPTY
29313: LIST
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: LIST
29319: PPUSH
29320: CALL_OW 69
29324: ST_TO_ADDR
// for i in buildings do
29325: LD_ADDR_VAR 0 4
29329: PUSH
29330: LD_VAR 0 3
29334: PUSH
29335: FOR_IN
29336: IFFALSE 29788
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
29338: LD_VAR 0 4
29342: PPUSH
29343: CALL_OW 266
29347: PUSH
29348: LD_INT 6
29350: PUSH
29351: LD_INT 7
29353: PUSH
29354: LD_INT 8
29356: PUSH
29357: EMPTY
29358: LIST
29359: LIST
29360: LIST
29361: IN
29362: IFFALSE 29476
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
29364: LD_ADDR_VAR 0 2
29368: PUSH
29369: LD_VAR 0 2
29373: PUSH
29374: LD_VAR 0 4
29378: PPUSH
29379: CALL_OW 266
29383: PUSH
29384: LD_VAR 0 4
29388: PPUSH
29389: CALL_OW 250
29393: PUSH
29394: LD_VAR 0 4
29398: PPUSH
29399: CALL_OW 251
29403: PUSH
29404: LD_VAR 0 4
29408: PPUSH
29409: CALL_OW 254
29413: PUSH
29414: LD_VAR 0 4
29418: PPUSH
29419: CALL_OW 267
29423: PUSH
29424: LD_VAR 0 4
29428: PPUSH
29429: CALL_OW 248
29433: PUSH
29434: LD_VAR 0 4
29438: PPUSH
29439: LD_INT 1
29441: PPUSH
29442: CALL_OW 268
29446: PUSH
29447: LD_VAR 0 4
29451: PPUSH
29452: LD_INT 2
29454: PPUSH
29455: CALL_OW 268
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: LIST
29466: LIST
29467: LIST
29468: LIST
29469: PUSH
29470: EMPTY
29471: LIST
29472: ADD
29473: ST_TO_ADDR
29474: GO 29786
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
29476: LD_VAR 0 4
29480: PPUSH
29481: CALL_OW 266
29485: PUSH
29486: LD_INT 32
29488: EQUAL
29489: PUSH
29490: LD_VAR 0 4
29494: PPUSH
29495: CALL_OW 266
29499: PUSH
29500: LD_INT 33
29502: EQUAL
29503: OR
29504: IFFALSE 29601
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
29506: LD_ADDR_VAR 0 2
29510: PUSH
29511: LD_VAR 0 2
29515: PUSH
29516: LD_VAR 0 4
29520: PPUSH
29521: CALL_OW 266
29525: PUSH
29526: LD_VAR 0 4
29530: PPUSH
29531: CALL_OW 250
29535: PUSH
29536: LD_VAR 0 4
29540: PPUSH
29541: CALL_OW 251
29545: PUSH
29546: LD_VAR 0 4
29550: PPUSH
29551: CALL_OW 254
29555: PUSH
29556: LD_VAR 0 4
29560: PPUSH
29561: CALL_OW 267
29565: PUSH
29566: LD_VAR 0 4
29570: PPUSH
29571: CALL_OW 248
29575: PUSH
29576: LD_VAR 0 4
29580: PPUSH
29581: CALL_OW 269
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: LIST
29592: LIST
29593: LIST
29594: PUSH
29595: EMPTY
29596: LIST
29597: ADD
29598: ST_TO_ADDR
29599: GO 29786
// if GetBType ( i ) = b_factory then
29601: LD_VAR 0 4
29605: PPUSH
29606: CALL_OW 266
29610: PUSH
29611: LD_INT 3
29613: EQUAL
29614: IFFALSE 29704
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
29616: LD_ADDR_VAR 0 2
29620: PUSH
29621: LD_VAR 0 2
29625: PPUSH
29626: LD_INT 1
29628: PPUSH
29629: LD_VAR 0 4
29633: PPUSH
29634: CALL_OW 266
29638: PUSH
29639: LD_VAR 0 4
29643: PPUSH
29644: CALL_OW 250
29648: PUSH
29649: LD_VAR 0 4
29653: PPUSH
29654: CALL_OW 251
29658: PUSH
29659: LD_VAR 0 4
29663: PPUSH
29664: CALL_OW 254
29668: PUSH
29669: LD_VAR 0 4
29673: PPUSH
29674: CALL_OW 267
29678: PUSH
29679: LD_VAR 0 4
29683: PPUSH
29684: CALL_OW 248
29688: PUSH
29689: EMPTY
29690: LIST
29691: LIST
29692: LIST
29693: LIST
29694: LIST
29695: LIST
29696: PPUSH
29697: CALL_OW 2
29701: ST_TO_ADDR
29702: GO 29786
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
29704: LD_ADDR_VAR 0 2
29708: PUSH
29709: LD_VAR 0 2
29713: PUSH
29714: LD_VAR 0 4
29718: PPUSH
29719: CALL_OW 266
29723: PUSH
29724: LD_VAR 0 4
29728: PPUSH
29729: CALL_OW 250
29733: PUSH
29734: LD_VAR 0 4
29738: PPUSH
29739: CALL_OW 251
29743: PUSH
29744: LD_VAR 0 4
29748: PPUSH
29749: CALL_OW 254
29753: PUSH
29754: LD_VAR 0 4
29758: PPUSH
29759: CALL_OW 267
29763: PUSH
29764: LD_VAR 0 4
29768: PPUSH
29769: CALL_OW 248
29773: PUSH
29774: EMPTY
29775: LIST
29776: LIST
29777: LIST
29778: LIST
29779: LIST
29780: LIST
29781: PUSH
29782: EMPTY
29783: LIST
29784: ADD
29785: ST_TO_ADDR
// end ;
29786: GO 29335
29788: POP
29789: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
29790: LD_VAR 0 2
29794: PPUSH
29795: LD_STRING 10_EpsilonBase
29797: PPUSH
29798: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
29802: LD_INT 19
29804: PPUSH
29805: LD_STRING 10_EpsilonEnv
29807: PPUSH
29808: CALL 29817 0 2
// end ;
29812: LD_VAR 0 1
29816: RET
// export function SaveEnvironment ( area , saveId ) ; begin
29817: LD_INT 0
29819: PPUSH
// result := ListEnvironmentArea ( area ) ;
29820: LD_ADDR_VAR 0 3
29824: PUSH
29825: LD_VAR 0 1
29829: PPUSH
29830: CALL_OW 353
29834: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
29835: LD_VAR 0 3
29839: PPUSH
29840: LD_VAR 0 2
29844: PPUSH
29845: CALL_OW 39
// end ; end_of_file
29849: LD_VAR 0 3
29853: RET
// every 0 0$01 do var timer ;
29854: GO 29856
29856: DISABLE
29857: LD_INT 0
29859: PPUSH
// begin timer := 0 0$20 ;
29860: LD_ADDR_VAR 0 1
29864: PUSH
29865: LD_INT 700
29867: ST_TO_ADDR
// repeat wait ( timer ) ;
29868: LD_VAR 0 1
29872: PPUSH
29873: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 14 then
29877: LD_EXP 57
29881: PUSH
29882: LD_INT 6
29884: GREATEREQUAL
29885: PUSH
29886: LD_EXP 57
29890: PUSH
29891: LD_INT 14
29893: LESS
29894: AND
29895: IFFALSE 29911
// timer := timer + 0 0$3 ;
29897: LD_ADDR_VAR 0 1
29901: PUSH
29902: LD_VAR 0 1
29906: PUSH
29907: LD_INT 105
29909: PLUS
29910: ST_TO_ADDR
// if cratesSpawned >= 14 then
29911: LD_EXP 57
29915: PUSH
29916: LD_INT 14
29918: GREATEREQUAL
29919: IFFALSE 29935
// timer := timer + 0 0$6 ;
29921: LD_ADDR_VAR 0 1
29925: PUSH
29926: LD_VAR 0 1
29930: PUSH
29931: LD_INT 210
29933: PLUS
29934: ST_TO_ADDR
// if timer > 2 2$00 then
29935: LD_VAR 0 1
29939: PUSH
29940: LD_INT 4200
29942: GREATER
29943: IFFALSE 29953
// timer := 0 0$45 ;
29945: LD_ADDR_VAR 0 1
29949: PUSH
29950: LD_INT 1575
29952: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
29953: LD_INT 1
29955: PPUSH
29956: LD_INT 5
29958: PPUSH
29959: CALL_OW 12
29963: PPUSH
29964: LD_INT 16
29966: PPUSH
29967: LD_INT 1
29969: PPUSH
29970: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
29974: LD_ADDR_EXP 57
29978: PUSH
29979: LD_EXP 57
29983: PUSH
29984: LD_INT 1
29986: PLUS
29987: ST_TO_ADDR
// until false ;
29988: LD_INT 0
29990: IFFALSE 29868
// end ; end_of_file end_of_file
29992: PPOPN 1
29994: END
// every 0 0$1 do
29995: GO 29997
29997: DISABLE
// begin enable ;
29998: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
29999: LD_STRING updateTimer(
30001: PUSH
30002: LD_OWVAR 1
30006: STR
30007: PUSH
30008: LD_STRING );
30010: STR
30011: PPUSH
30012: CALL_OW 559
// end ;
30016: END
// export function SOS_MapStart ( ) ; begin
30017: LD_INT 0
30019: PPUSH
// if streamModeActive then
30020: LD_EXP 70
30024: IFFALSE 30033
// DefineStreamItems ( true ) ;
30026: LD_INT 1
30028: PPUSH
30029: CALL 31687 0 1
// UpdateFactoryWaypoints ( ) ;
30033: CALL 44548 0 0
// UpdateWarehouseGatheringPoints ( ) ;
30037: CALL 44805 0 0
// end ;
30041: LD_VAR 0 1
30045: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30046: LD_INT 0
30048: PPUSH
// if p2 = 100 then
30049: LD_VAR 0 2
30053: PUSH
30054: LD_INT 100
30056: EQUAL
30057: IFFALSE 31060
// begin if not StreamModeActive then
30059: LD_EXP 70
30063: NOT
30064: IFFALSE 30074
// StreamModeActive := true ;
30066: LD_ADDR_EXP 70
30070: PUSH
30071: LD_INT 1
30073: ST_TO_ADDR
// if p3 = 0 then
30074: LD_VAR 0 3
30078: PUSH
30079: LD_INT 0
30081: EQUAL
30082: IFFALSE 30088
// InitStreamMode ;
30084: CALL 31223 0 0
// if p3 = 1 then
30088: LD_VAR 0 3
30092: PUSH
30093: LD_INT 1
30095: EQUAL
30096: IFFALSE 30106
// sRocket := true ;
30098: LD_ADDR_EXP 75
30102: PUSH
30103: LD_INT 1
30105: ST_TO_ADDR
// if p3 = 2 then
30106: LD_VAR 0 3
30110: PUSH
30111: LD_INT 2
30113: EQUAL
30114: IFFALSE 30124
// sSpeed := true ;
30116: LD_ADDR_EXP 74
30120: PUSH
30121: LD_INT 1
30123: ST_TO_ADDR
// if p3 = 3 then
30124: LD_VAR 0 3
30128: PUSH
30129: LD_INT 3
30131: EQUAL
30132: IFFALSE 30142
// sEngine := true ;
30134: LD_ADDR_EXP 76
30138: PUSH
30139: LD_INT 1
30141: ST_TO_ADDR
// if p3 = 4 then
30142: LD_VAR 0 3
30146: PUSH
30147: LD_INT 4
30149: EQUAL
30150: IFFALSE 30160
// sSpec := true ;
30152: LD_ADDR_EXP 73
30156: PUSH
30157: LD_INT 1
30159: ST_TO_ADDR
// if p3 = 5 then
30160: LD_VAR 0 3
30164: PUSH
30165: LD_INT 5
30167: EQUAL
30168: IFFALSE 30178
// sLevel := true ;
30170: LD_ADDR_EXP 77
30174: PUSH
30175: LD_INT 1
30177: ST_TO_ADDR
// if p3 = 6 then
30178: LD_VAR 0 3
30182: PUSH
30183: LD_INT 6
30185: EQUAL
30186: IFFALSE 30196
// sArmoury := true ;
30188: LD_ADDR_EXP 78
30192: PUSH
30193: LD_INT 1
30195: ST_TO_ADDR
// if p3 = 7 then
30196: LD_VAR 0 3
30200: PUSH
30201: LD_INT 7
30203: EQUAL
30204: IFFALSE 30214
// sRadar := true ;
30206: LD_ADDR_EXP 79
30210: PUSH
30211: LD_INT 1
30213: ST_TO_ADDR
// if p3 = 8 then
30214: LD_VAR 0 3
30218: PUSH
30219: LD_INT 8
30221: EQUAL
30222: IFFALSE 30232
// sBunker := true ;
30224: LD_ADDR_EXP 80
30228: PUSH
30229: LD_INT 1
30231: ST_TO_ADDR
// if p3 = 9 then
30232: LD_VAR 0 3
30236: PUSH
30237: LD_INT 9
30239: EQUAL
30240: IFFALSE 30250
// sHack := true ;
30242: LD_ADDR_EXP 81
30246: PUSH
30247: LD_INT 1
30249: ST_TO_ADDR
// if p3 = 10 then
30250: LD_VAR 0 3
30254: PUSH
30255: LD_INT 10
30257: EQUAL
30258: IFFALSE 30268
// sFire := true ;
30260: LD_ADDR_EXP 82
30264: PUSH
30265: LD_INT 1
30267: ST_TO_ADDR
// if p3 = 11 then
30268: LD_VAR 0 3
30272: PUSH
30273: LD_INT 11
30275: EQUAL
30276: IFFALSE 30286
// sRefresh := true ;
30278: LD_ADDR_EXP 83
30282: PUSH
30283: LD_INT 1
30285: ST_TO_ADDR
// if p3 = 12 then
30286: LD_VAR 0 3
30290: PUSH
30291: LD_INT 12
30293: EQUAL
30294: IFFALSE 30304
// sExp := true ;
30296: LD_ADDR_EXP 84
30300: PUSH
30301: LD_INT 1
30303: ST_TO_ADDR
// if p3 = 13 then
30304: LD_VAR 0 3
30308: PUSH
30309: LD_INT 13
30311: EQUAL
30312: IFFALSE 30322
// sDepot := true ;
30314: LD_ADDR_EXP 85
30318: PUSH
30319: LD_INT 1
30321: ST_TO_ADDR
// if p3 = 14 then
30322: LD_VAR 0 3
30326: PUSH
30327: LD_INT 14
30329: EQUAL
30330: IFFALSE 30340
// sFlag := true ;
30332: LD_ADDR_EXP 86
30336: PUSH
30337: LD_INT 1
30339: ST_TO_ADDR
// if p3 = 15 then
30340: LD_VAR 0 3
30344: PUSH
30345: LD_INT 15
30347: EQUAL
30348: IFFALSE 30358
// sKamikadze := true ;
30350: LD_ADDR_EXP 94
30354: PUSH
30355: LD_INT 1
30357: ST_TO_ADDR
// if p3 = 16 then
30358: LD_VAR 0 3
30362: PUSH
30363: LD_INT 16
30365: EQUAL
30366: IFFALSE 30376
// sTroll := true ;
30368: LD_ADDR_EXP 95
30372: PUSH
30373: LD_INT 1
30375: ST_TO_ADDR
// if p3 = 17 then
30376: LD_VAR 0 3
30380: PUSH
30381: LD_INT 17
30383: EQUAL
30384: IFFALSE 30394
// sSlow := true ;
30386: LD_ADDR_EXP 96
30390: PUSH
30391: LD_INT 1
30393: ST_TO_ADDR
// if p3 = 18 then
30394: LD_VAR 0 3
30398: PUSH
30399: LD_INT 18
30401: EQUAL
30402: IFFALSE 30412
// sLack := true ;
30404: LD_ADDR_EXP 97
30408: PUSH
30409: LD_INT 1
30411: ST_TO_ADDR
// if p3 = 19 then
30412: LD_VAR 0 3
30416: PUSH
30417: LD_INT 19
30419: EQUAL
30420: IFFALSE 30430
// sTank := true ;
30422: LD_ADDR_EXP 99
30426: PUSH
30427: LD_INT 1
30429: ST_TO_ADDR
// if p3 = 20 then
30430: LD_VAR 0 3
30434: PUSH
30435: LD_INT 20
30437: EQUAL
30438: IFFALSE 30448
// sRemote := true ;
30440: LD_ADDR_EXP 100
30444: PUSH
30445: LD_INT 1
30447: ST_TO_ADDR
// if p3 = 21 then
30448: LD_VAR 0 3
30452: PUSH
30453: LD_INT 21
30455: EQUAL
30456: IFFALSE 30466
// sPowell := true ;
30458: LD_ADDR_EXP 101
30462: PUSH
30463: LD_INT 1
30465: ST_TO_ADDR
// if p3 = 22 then
30466: LD_VAR 0 3
30470: PUSH
30471: LD_INT 22
30473: EQUAL
30474: IFFALSE 30484
// sTeleport := true ;
30476: LD_ADDR_EXP 104
30480: PUSH
30481: LD_INT 1
30483: ST_TO_ADDR
// if p3 = 23 then
30484: LD_VAR 0 3
30488: PUSH
30489: LD_INT 23
30491: EQUAL
30492: IFFALSE 30502
// sOilTower := true ;
30494: LD_ADDR_EXP 106
30498: PUSH
30499: LD_INT 1
30501: ST_TO_ADDR
// if p3 = 24 then
30502: LD_VAR 0 3
30506: PUSH
30507: LD_INT 24
30509: EQUAL
30510: IFFALSE 30520
// sShovel := true ;
30512: LD_ADDR_EXP 107
30516: PUSH
30517: LD_INT 1
30519: ST_TO_ADDR
// if p3 = 25 then
30520: LD_VAR 0 3
30524: PUSH
30525: LD_INT 25
30527: EQUAL
30528: IFFALSE 30538
// sSheik := true ;
30530: LD_ADDR_EXP 108
30534: PUSH
30535: LD_INT 1
30537: ST_TO_ADDR
// if p3 = 26 then
30538: LD_VAR 0 3
30542: PUSH
30543: LD_INT 26
30545: EQUAL
30546: IFFALSE 30556
// sEarthquake := true ;
30548: LD_ADDR_EXP 110
30552: PUSH
30553: LD_INT 1
30555: ST_TO_ADDR
// if p3 = 27 then
30556: LD_VAR 0 3
30560: PUSH
30561: LD_INT 27
30563: EQUAL
30564: IFFALSE 30574
// sAI := true ;
30566: LD_ADDR_EXP 111
30570: PUSH
30571: LD_INT 1
30573: ST_TO_ADDR
// if p3 = 28 then
30574: LD_VAR 0 3
30578: PUSH
30579: LD_INT 28
30581: EQUAL
30582: IFFALSE 30592
// sCargo := true ;
30584: LD_ADDR_EXP 114
30588: PUSH
30589: LD_INT 1
30591: ST_TO_ADDR
// if p3 = 29 then
30592: LD_VAR 0 3
30596: PUSH
30597: LD_INT 29
30599: EQUAL
30600: IFFALSE 30610
// sDLaser := true ;
30602: LD_ADDR_EXP 115
30606: PUSH
30607: LD_INT 1
30609: ST_TO_ADDR
// if p3 = 30 then
30610: LD_VAR 0 3
30614: PUSH
30615: LD_INT 30
30617: EQUAL
30618: IFFALSE 30628
// sExchange := true ;
30620: LD_ADDR_EXP 116
30624: PUSH
30625: LD_INT 1
30627: ST_TO_ADDR
// if p3 = 31 then
30628: LD_VAR 0 3
30632: PUSH
30633: LD_INT 31
30635: EQUAL
30636: IFFALSE 30646
// sFac := true ;
30638: LD_ADDR_EXP 117
30642: PUSH
30643: LD_INT 1
30645: ST_TO_ADDR
// if p3 = 32 then
30646: LD_VAR 0 3
30650: PUSH
30651: LD_INT 32
30653: EQUAL
30654: IFFALSE 30664
// sPower := true ;
30656: LD_ADDR_EXP 118
30660: PUSH
30661: LD_INT 1
30663: ST_TO_ADDR
// if p3 = 33 then
30664: LD_VAR 0 3
30668: PUSH
30669: LD_INT 33
30671: EQUAL
30672: IFFALSE 30682
// sRandom := true ;
30674: LD_ADDR_EXP 119
30678: PUSH
30679: LD_INT 1
30681: ST_TO_ADDR
// if p3 = 34 then
30682: LD_VAR 0 3
30686: PUSH
30687: LD_INT 34
30689: EQUAL
30690: IFFALSE 30700
// sShield := true ;
30692: LD_ADDR_EXP 120
30696: PUSH
30697: LD_INT 1
30699: ST_TO_ADDR
// if p3 = 35 then
30700: LD_VAR 0 3
30704: PUSH
30705: LD_INT 35
30707: EQUAL
30708: IFFALSE 30718
// sTime := true ;
30710: LD_ADDR_EXP 121
30714: PUSH
30715: LD_INT 1
30717: ST_TO_ADDR
// if p3 = 36 then
30718: LD_VAR 0 3
30722: PUSH
30723: LD_INT 36
30725: EQUAL
30726: IFFALSE 30736
// sTools := true ;
30728: LD_ADDR_EXP 122
30732: PUSH
30733: LD_INT 1
30735: ST_TO_ADDR
// if p3 = 101 then
30736: LD_VAR 0 3
30740: PUSH
30741: LD_INT 101
30743: EQUAL
30744: IFFALSE 30754
// sSold := true ;
30746: LD_ADDR_EXP 87
30750: PUSH
30751: LD_INT 1
30753: ST_TO_ADDR
// if p3 = 102 then
30754: LD_VAR 0 3
30758: PUSH
30759: LD_INT 102
30761: EQUAL
30762: IFFALSE 30772
// sDiff := true ;
30764: LD_ADDR_EXP 88
30768: PUSH
30769: LD_INT 1
30771: ST_TO_ADDR
// if p3 = 103 then
30772: LD_VAR 0 3
30776: PUSH
30777: LD_INT 103
30779: EQUAL
30780: IFFALSE 30790
// sFog := true ;
30782: LD_ADDR_EXP 91
30786: PUSH
30787: LD_INT 1
30789: ST_TO_ADDR
// if p3 = 104 then
30790: LD_VAR 0 3
30794: PUSH
30795: LD_INT 104
30797: EQUAL
30798: IFFALSE 30808
// sReset := true ;
30800: LD_ADDR_EXP 92
30804: PUSH
30805: LD_INT 1
30807: ST_TO_ADDR
// if p3 = 105 then
30808: LD_VAR 0 3
30812: PUSH
30813: LD_INT 105
30815: EQUAL
30816: IFFALSE 30826
// sSun := true ;
30818: LD_ADDR_EXP 93
30822: PUSH
30823: LD_INT 1
30825: ST_TO_ADDR
// if p3 = 106 then
30826: LD_VAR 0 3
30830: PUSH
30831: LD_INT 106
30833: EQUAL
30834: IFFALSE 30844
// sTiger := true ;
30836: LD_ADDR_EXP 89
30840: PUSH
30841: LD_INT 1
30843: ST_TO_ADDR
// if p3 = 107 then
30844: LD_VAR 0 3
30848: PUSH
30849: LD_INT 107
30851: EQUAL
30852: IFFALSE 30862
// sBomb := true ;
30854: LD_ADDR_EXP 90
30858: PUSH
30859: LD_INT 1
30861: ST_TO_ADDR
// if p3 = 108 then
30862: LD_VAR 0 3
30866: PUSH
30867: LD_INT 108
30869: EQUAL
30870: IFFALSE 30880
// sWound := true ;
30872: LD_ADDR_EXP 98
30876: PUSH
30877: LD_INT 1
30879: ST_TO_ADDR
// if p3 = 109 then
30880: LD_VAR 0 3
30884: PUSH
30885: LD_INT 109
30887: EQUAL
30888: IFFALSE 30898
// sBetray := true ;
30890: LD_ADDR_EXP 102
30894: PUSH
30895: LD_INT 1
30897: ST_TO_ADDR
// if p3 = 110 then
30898: LD_VAR 0 3
30902: PUSH
30903: LD_INT 110
30905: EQUAL
30906: IFFALSE 30916
// sContamin := true ;
30908: LD_ADDR_EXP 103
30912: PUSH
30913: LD_INT 1
30915: ST_TO_ADDR
// if p3 = 111 then
30916: LD_VAR 0 3
30920: PUSH
30921: LD_INT 111
30923: EQUAL
30924: IFFALSE 30934
// sOil := true ;
30926: LD_ADDR_EXP 105
30930: PUSH
30931: LD_INT 1
30933: ST_TO_ADDR
// if p3 = 112 then
30934: LD_VAR 0 3
30938: PUSH
30939: LD_INT 112
30941: EQUAL
30942: IFFALSE 30952
// sStu := true ;
30944: LD_ADDR_EXP 109
30948: PUSH
30949: LD_INT 1
30951: ST_TO_ADDR
// if p3 = 113 then
30952: LD_VAR 0 3
30956: PUSH
30957: LD_INT 113
30959: EQUAL
30960: IFFALSE 30970
// sBazooka := true ;
30962: LD_ADDR_EXP 112
30966: PUSH
30967: LD_INT 1
30969: ST_TO_ADDR
// if p3 = 114 then
30970: LD_VAR 0 3
30974: PUSH
30975: LD_INT 114
30977: EQUAL
30978: IFFALSE 30988
// sMortar := true ;
30980: LD_ADDR_EXP 113
30984: PUSH
30985: LD_INT 1
30987: ST_TO_ADDR
// if p3 = 115 then
30988: LD_VAR 0 3
30992: PUSH
30993: LD_INT 115
30995: EQUAL
30996: IFFALSE 31006
// sRanger := true ;
30998: LD_ADDR_EXP 123
31002: PUSH
31003: LD_INT 1
31005: ST_TO_ADDR
// if p3 = 116 then
31006: LD_VAR 0 3
31010: PUSH
31011: LD_INT 116
31013: EQUAL
31014: IFFALSE 31024
// sComputer := true ;
31016: LD_ADDR_EXP 124
31020: PUSH
31021: LD_INT 1
31023: ST_TO_ADDR
// if p3 = 117 then
31024: LD_VAR 0 3
31028: PUSH
31029: LD_INT 117
31031: EQUAL
31032: IFFALSE 31042
// s30 := true ;
31034: LD_ADDR_EXP 125
31038: PUSH
31039: LD_INT 1
31041: ST_TO_ADDR
// if p3 = 118 then
31042: LD_VAR 0 3
31046: PUSH
31047: LD_INT 118
31049: EQUAL
31050: IFFALSE 31060
// s60 := true ;
31052: LD_ADDR_EXP 126
31056: PUSH
31057: LD_INT 1
31059: ST_TO_ADDR
// end ; if p2 = 101 then
31060: LD_VAR 0 2
31064: PUSH
31065: LD_INT 101
31067: EQUAL
31068: IFFALSE 31196
// begin case p3 of 1 :
31070: LD_VAR 0 3
31074: PUSH
31075: LD_INT 1
31077: DOUBLE
31078: EQUAL
31079: IFTRUE 31083
31081: GO 31090
31083: POP
// hHackUnlimitedResources ; 2 :
31084: CALL 43294 0 0
31088: GO 31196
31090: LD_INT 2
31092: DOUBLE
31093: EQUAL
31094: IFTRUE 31098
31096: GO 31105
31098: POP
// hHackSetLevel10 ; 3 :
31099: CALL 43427 0 0
31103: GO 31196
31105: LD_INT 3
31107: DOUBLE
31108: EQUAL
31109: IFTRUE 31113
31111: GO 31120
31113: POP
// hHackSetLevel10YourUnits ; 4 :
31114: CALL 43512 0 0
31118: GO 31196
31120: LD_INT 4
31122: DOUBLE
31123: EQUAL
31124: IFTRUE 31128
31126: GO 31135
31128: POP
// hHackInvincible ; 5 :
31129: CALL 43960 0 0
31133: GO 31196
31135: LD_INT 5
31137: DOUBLE
31138: EQUAL
31139: IFTRUE 31143
31141: GO 31150
31143: POP
// hHackInvisible ; 6 :
31144: CALL 44071 0 0
31148: GO 31196
31150: LD_INT 6
31152: DOUBLE
31153: EQUAL
31154: IFTRUE 31158
31156: GO 31165
31158: POP
// hHackChangeYourSide ; 7 :
31159: CALL 44128 0 0
31163: GO 31196
31165: LD_INT 7
31167: DOUBLE
31168: EQUAL
31169: IFTRUE 31173
31171: GO 31180
31173: POP
// hHackChangeUnitSide ; 8 :
31174: CALL 44170 0 0
31178: GO 31196
31180: LD_INT 8
31182: DOUBLE
31183: EQUAL
31184: IFTRUE 31188
31186: GO 31195
31188: POP
// hHackFog ; end ;
31189: CALL 44271 0 0
31193: GO 31196
31195: POP
// end ; end ;
31196: LD_VAR 0 7
31200: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
31201: GO 31203
31203: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
31204: LD_STRING initStreamRollete();
31206: PPUSH
31207: CALL_OW 559
// InitStreamMode ;
31211: CALL 31223 0 0
// DefineStreamItems ( false ) ;
31215: LD_INT 0
31217: PPUSH
31218: CALL 31687 0 1
// end ;
31222: END
// function InitStreamMode ; begin
31223: LD_INT 0
31225: PPUSH
// streamModeActive := false ;
31226: LD_ADDR_EXP 70
31230: PUSH
31231: LD_INT 0
31233: ST_TO_ADDR
// normalCounter := 36 ;
31234: LD_ADDR_EXP 71
31238: PUSH
31239: LD_INT 36
31241: ST_TO_ADDR
// hardcoreCounter := 18 ;
31242: LD_ADDR_EXP 72
31246: PUSH
31247: LD_INT 18
31249: ST_TO_ADDR
// sRocket := false ;
31250: LD_ADDR_EXP 75
31254: PUSH
31255: LD_INT 0
31257: ST_TO_ADDR
// sSpeed := false ;
31258: LD_ADDR_EXP 74
31262: PUSH
31263: LD_INT 0
31265: ST_TO_ADDR
// sEngine := false ;
31266: LD_ADDR_EXP 76
31270: PUSH
31271: LD_INT 0
31273: ST_TO_ADDR
// sSpec := false ;
31274: LD_ADDR_EXP 73
31278: PUSH
31279: LD_INT 0
31281: ST_TO_ADDR
// sLevel := false ;
31282: LD_ADDR_EXP 77
31286: PUSH
31287: LD_INT 0
31289: ST_TO_ADDR
// sArmoury := false ;
31290: LD_ADDR_EXP 78
31294: PUSH
31295: LD_INT 0
31297: ST_TO_ADDR
// sRadar := false ;
31298: LD_ADDR_EXP 79
31302: PUSH
31303: LD_INT 0
31305: ST_TO_ADDR
// sBunker := false ;
31306: LD_ADDR_EXP 80
31310: PUSH
31311: LD_INT 0
31313: ST_TO_ADDR
// sHack := false ;
31314: LD_ADDR_EXP 81
31318: PUSH
31319: LD_INT 0
31321: ST_TO_ADDR
// sFire := false ;
31322: LD_ADDR_EXP 82
31326: PUSH
31327: LD_INT 0
31329: ST_TO_ADDR
// sRefresh := false ;
31330: LD_ADDR_EXP 83
31334: PUSH
31335: LD_INT 0
31337: ST_TO_ADDR
// sExp := false ;
31338: LD_ADDR_EXP 84
31342: PUSH
31343: LD_INT 0
31345: ST_TO_ADDR
// sDepot := false ;
31346: LD_ADDR_EXP 85
31350: PUSH
31351: LD_INT 0
31353: ST_TO_ADDR
// sFlag := false ;
31354: LD_ADDR_EXP 86
31358: PUSH
31359: LD_INT 0
31361: ST_TO_ADDR
// sKamikadze := false ;
31362: LD_ADDR_EXP 94
31366: PUSH
31367: LD_INT 0
31369: ST_TO_ADDR
// sTroll := false ;
31370: LD_ADDR_EXP 95
31374: PUSH
31375: LD_INT 0
31377: ST_TO_ADDR
// sSlow := false ;
31378: LD_ADDR_EXP 96
31382: PUSH
31383: LD_INT 0
31385: ST_TO_ADDR
// sLack := false ;
31386: LD_ADDR_EXP 97
31390: PUSH
31391: LD_INT 0
31393: ST_TO_ADDR
// sTank := false ;
31394: LD_ADDR_EXP 99
31398: PUSH
31399: LD_INT 0
31401: ST_TO_ADDR
// sRemote := false ;
31402: LD_ADDR_EXP 100
31406: PUSH
31407: LD_INT 0
31409: ST_TO_ADDR
// sPowell := false ;
31410: LD_ADDR_EXP 101
31414: PUSH
31415: LD_INT 0
31417: ST_TO_ADDR
// sTeleport := false ;
31418: LD_ADDR_EXP 104
31422: PUSH
31423: LD_INT 0
31425: ST_TO_ADDR
// sOilTower := false ;
31426: LD_ADDR_EXP 106
31430: PUSH
31431: LD_INT 0
31433: ST_TO_ADDR
// sShovel := false ;
31434: LD_ADDR_EXP 107
31438: PUSH
31439: LD_INT 0
31441: ST_TO_ADDR
// sSheik := false ;
31442: LD_ADDR_EXP 108
31446: PUSH
31447: LD_INT 0
31449: ST_TO_ADDR
// sEarthquake := false ;
31450: LD_ADDR_EXP 110
31454: PUSH
31455: LD_INT 0
31457: ST_TO_ADDR
// sAI := false ;
31458: LD_ADDR_EXP 111
31462: PUSH
31463: LD_INT 0
31465: ST_TO_ADDR
// sCargo := false ;
31466: LD_ADDR_EXP 114
31470: PUSH
31471: LD_INT 0
31473: ST_TO_ADDR
// sDLaser := false ;
31474: LD_ADDR_EXP 115
31478: PUSH
31479: LD_INT 0
31481: ST_TO_ADDR
// sExchange := false ;
31482: LD_ADDR_EXP 116
31486: PUSH
31487: LD_INT 0
31489: ST_TO_ADDR
// sFac := false ;
31490: LD_ADDR_EXP 117
31494: PUSH
31495: LD_INT 0
31497: ST_TO_ADDR
// sPower := false ;
31498: LD_ADDR_EXP 118
31502: PUSH
31503: LD_INT 0
31505: ST_TO_ADDR
// sRandom := false ;
31506: LD_ADDR_EXP 119
31510: PUSH
31511: LD_INT 0
31513: ST_TO_ADDR
// sShield := false ;
31514: LD_ADDR_EXP 120
31518: PUSH
31519: LD_INT 0
31521: ST_TO_ADDR
// sTime := false ;
31522: LD_ADDR_EXP 121
31526: PUSH
31527: LD_INT 0
31529: ST_TO_ADDR
// sTools := false ;
31530: LD_ADDR_EXP 122
31534: PUSH
31535: LD_INT 0
31537: ST_TO_ADDR
// sSold := false ;
31538: LD_ADDR_EXP 87
31542: PUSH
31543: LD_INT 0
31545: ST_TO_ADDR
// sDiff := false ;
31546: LD_ADDR_EXP 88
31550: PUSH
31551: LD_INT 0
31553: ST_TO_ADDR
// sFog := false ;
31554: LD_ADDR_EXP 91
31558: PUSH
31559: LD_INT 0
31561: ST_TO_ADDR
// sReset := false ;
31562: LD_ADDR_EXP 92
31566: PUSH
31567: LD_INT 0
31569: ST_TO_ADDR
// sSun := false ;
31570: LD_ADDR_EXP 93
31574: PUSH
31575: LD_INT 0
31577: ST_TO_ADDR
// sTiger := false ;
31578: LD_ADDR_EXP 89
31582: PUSH
31583: LD_INT 0
31585: ST_TO_ADDR
// sBomb := false ;
31586: LD_ADDR_EXP 90
31590: PUSH
31591: LD_INT 0
31593: ST_TO_ADDR
// sWound := false ;
31594: LD_ADDR_EXP 98
31598: PUSH
31599: LD_INT 0
31601: ST_TO_ADDR
// sBetray := false ;
31602: LD_ADDR_EXP 102
31606: PUSH
31607: LD_INT 0
31609: ST_TO_ADDR
// sContamin := false ;
31610: LD_ADDR_EXP 103
31614: PUSH
31615: LD_INT 0
31617: ST_TO_ADDR
// sOil := false ;
31618: LD_ADDR_EXP 105
31622: PUSH
31623: LD_INT 0
31625: ST_TO_ADDR
// sStu := false ;
31626: LD_ADDR_EXP 109
31630: PUSH
31631: LD_INT 0
31633: ST_TO_ADDR
// sBazooka := false ;
31634: LD_ADDR_EXP 112
31638: PUSH
31639: LD_INT 0
31641: ST_TO_ADDR
// sMortar := false ;
31642: LD_ADDR_EXP 113
31646: PUSH
31647: LD_INT 0
31649: ST_TO_ADDR
// sRanger := false ;
31650: LD_ADDR_EXP 123
31654: PUSH
31655: LD_INT 0
31657: ST_TO_ADDR
// sComputer := false ;
31658: LD_ADDR_EXP 124
31662: PUSH
31663: LD_INT 0
31665: ST_TO_ADDR
// s30 := false ;
31666: LD_ADDR_EXP 125
31670: PUSH
31671: LD_INT 0
31673: ST_TO_ADDR
// s60 := false ;
31674: LD_ADDR_EXP 126
31678: PUSH
31679: LD_INT 0
31681: ST_TO_ADDR
// end ;
31682: LD_VAR 0 1
31686: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
31687: LD_INT 0
31689: PPUSH
31690: PPUSH
31691: PPUSH
31692: PPUSH
31693: PPUSH
31694: PPUSH
31695: PPUSH
// result := [ ] ;
31696: LD_ADDR_VAR 0 2
31700: PUSH
31701: EMPTY
31702: ST_TO_ADDR
// if campaign_id = 1 then
31703: LD_OWVAR 69
31707: PUSH
31708: LD_INT 1
31710: EQUAL
31711: IFFALSE 34877
// begin case mission_number of 1 :
31713: LD_OWVAR 70
31717: PUSH
31718: LD_INT 1
31720: DOUBLE
31721: EQUAL
31722: IFTRUE 31726
31724: GO 31802
31726: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
31727: LD_ADDR_VAR 0 2
31731: PUSH
31732: LD_INT 2
31734: PUSH
31735: LD_INT 4
31737: PUSH
31738: LD_INT 11
31740: PUSH
31741: LD_INT 12
31743: PUSH
31744: LD_INT 15
31746: PUSH
31747: LD_INT 16
31749: PUSH
31750: LD_INT 22
31752: PUSH
31753: LD_INT 23
31755: PUSH
31756: LD_INT 26
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: LIST
31763: LIST
31764: LIST
31765: LIST
31766: LIST
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 101
31772: PUSH
31773: LD_INT 102
31775: PUSH
31776: LD_INT 106
31778: PUSH
31779: LD_INT 116
31781: PUSH
31782: LD_INT 117
31784: PUSH
31785: LD_INT 118
31787: PUSH
31788: EMPTY
31789: LIST
31790: LIST
31791: LIST
31792: LIST
31793: LIST
31794: LIST
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: ST_TO_ADDR
31800: GO 34875
31802: LD_INT 2
31804: DOUBLE
31805: EQUAL
31806: IFTRUE 31810
31808: GO 31894
31810: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
31811: LD_ADDR_VAR 0 2
31815: PUSH
31816: LD_INT 2
31818: PUSH
31819: LD_INT 4
31821: PUSH
31822: LD_INT 11
31824: PUSH
31825: LD_INT 12
31827: PUSH
31828: LD_INT 15
31830: PUSH
31831: LD_INT 16
31833: PUSH
31834: LD_INT 22
31836: PUSH
31837: LD_INT 23
31839: PUSH
31840: LD_INT 26
31842: PUSH
31843: EMPTY
31844: LIST
31845: LIST
31846: LIST
31847: LIST
31848: LIST
31849: LIST
31850: LIST
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 101
31856: PUSH
31857: LD_INT 102
31859: PUSH
31860: LD_INT 105
31862: PUSH
31863: LD_INT 106
31865: PUSH
31866: LD_INT 108
31868: PUSH
31869: LD_INT 116
31871: PUSH
31872: LD_INT 117
31874: PUSH
31875: LD_INT 118
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: LIST
31887: PUSH
31888: EMPTY
31889: LIST
31890: LIST
31891: ST_TO_ADDR
31892: GO 34875
31894: LD_INT 3
31896: DOUBLE
31897: EQUAL
31898: IFTRUE 31902
31900: GO 31990
31902: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
31903: LD_ADDR_VAR 0 2
31907: PUSH
31908: LD_INT 2
31910: PUSH
31911: LD_INT 4
31913: PUSH
31914: LD_INT 5
31916: PUSH
31917: LD_INT 11
31919: PUSH
31920: LD_INT 12
31922: PUSH
31923: LD_INT 15
31925: PUSH
31926: LD_INT 16
31928: PUSH
31929: LD_INT 22
31931: PUSH
31932: LD_INT 26
31934: PUSH
31935: LD_INT 36
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: LIST
31942: LIST
31943: LIST
31944: LIST
31945: LIST
31946: LIST
31947: LIST
31948: LIST
31949: PUSH
31950: LD_INT 101
31952: PUSH
31953: LD_INT 102
31955: PUSH
31956: LD_INT 105
31958: PUSH
31959: LD_INT 106
31961: PUSH
31962: LD_INT 108
31964: PUSH
31965: LD_INT 116
31967: PUSH
31968: LD_INT 117
31970: PUSH
31971: LD_INT 118
31973: PUSH
31974: EMPTY
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: LIST
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: ST_TO_ADDR
31988: GO 34875
31990: LD_INT 4
31992: DOUBLE
31993: EQUAL
31994: IFTRUE 31998
31996: GO 32094
31998: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
31999: LD_ADDR_VAR 0 2
32003: PUSH
32004: LD_INT 2
32006: PUSH
32007: LD_INT 4
32009: PUSH
32010: LD_INT 5
32012: PUSH
32013: LD_INT 8
32015: PUSH
32016: LD_INT 11
32018: PUSH
32019: LD_INT 12
32021: PUSH
32022: LD_INT 15
32024: PUSH
32025: LD_INT 16
32027: PUSH
32028: LD_INT 22
32030: PUSH
32031: LD_INT 23
32033: PUSH
32034: LD_INT 26
32036: PUSH
32037: LD_INT 36
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 101
32056: PUSH
32057: LD_INT 102
32059: PUSH
32060: LD_INT 105
32062: PUSH
32063: LD_INT 106
32065: PUSH
32066: LD_INT 108
32068: PUSH
32069: LD_INT 116
32071: PUSH
32072: LD_INT 117
32074: PUSH
32075: LD_INT 118
32077: PUSH
32078: EMPTY
32079: LIST
32080: LIST
32081: LIST
32082: LIST
32083: LIST
32084: LIST
32085: LIST
32086: LIST
32087: PUSH
32088: EMPTY
32089: LIST
32090: LIST
32091: ST_TO_ADDR
32092: GO 34875
32094: LD_INT 5
32096: DOUBLE
32097: EQUAL
32098: IFTRUE 32102
32100: GO 32214
32102: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
32103: LD_ADDR_VAR 0 2
32107: PUSH
32108: LD_INT 2
32110: PUSH
32111: LD_INT 4
32113: PUSH
32114: LD_INT 5
32116: PUSH
32117: LD_INT 6
32119: PUSH
32120: LD_INT 8
32122: PUSH
32123: LD_INT 11
32125: PUSH
32126: LD_INT 12
32128: PUSH
32129: LD_INT 15
32131: PUSH
32132: LD_INT 16
32134: PUSH
32135: LD_INT 22
32137: PUSH
32138: LD_INT 23
32140: PUSH
32141: LD_INT 25
32143: PUSH
32144: LD_INT 26
32146: PUSH
32147: LD_INT 36
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: LIST
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: LIST
32161: LIST
32162: LIST
32163: LIST
32164: LIST
32165: PUSH
32166: LD_INT 101
32168: PUSH
32169: LD_INT 102
32171: PUSH
32172: LD_INT 105
32174: PUSH
32175: LD_INT 106
32177: PUSH
32178: LD_INT 108
32180: PUSH
32181: LD_INT 109
32183: PUSH
32184: LD_INT 112
32186: PUSH
32187: LD_INT 116
32189: PUSH
32190: LD_INT 117
32192: PUSH
32193: LD_INT 118
32195: PUSH
32196: EMPTY
32197: LIST
32198: LIST
32199: LIST
32200: LIST
32201: LIST
32202: LIST
32203: LIST
32204: LIST
32205: LIST
32206: LIST
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: ST_TO_ADDR
32212: GO 34875
32214: LD_INT 6
32216: DOUBLE
32217: EQUAL
32218: IFTRUE 32222
32220: GO 32354
32222: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
32223: LD_ADDR_VAR 0 2
32227: PUSH
32228: LD_INT 2
32230: PUSH
32231: LD_INT 4
32233: PUSH
32234: LD_INT 5
32236: PUSH
32237: LD_INT 6
32239: PUSH
32240: LD_INT 8
32242: PUSH
32243: LD_INT 11
32245: PUSH
32246: LD_INT 12
32248: PUSH
32249: LD_INT 15
32251: PUSH
32252: LD_INT 16
32254: PUSH
32255: LD_INT 20
32257: PUSH
32258: LD_INT 21
32260: PUSH
32261: LD_INT 22
32263: PUSH
32264: LD_INT 23
32266: PUSH
32267: LD_INT 25
32269: PUSH
32270: LD_INT 26
32272: PUSH
32273: LD_INT 30
32275: PUSH
32276: LD_INT 31
32278: PUSH
32279: LD_INT 32
32281: PUSH
32282: LD_INT 36
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: LIST
32289: LIST
32290: LIST
32291: LIST
32292: LIST
32293: LIST
32294: LIST
32295: LIST
32296: LIST
32297: LIST
32298: LIST
32299: LIST
32300: LIST
32301: LIST
32302: LIST
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 101
32308: PUSH
32309: LD_INT 102
32311: PUSH
32312: LD_INT 105
32314: PUSH
32315: LD_INT 106
32317: PUSH
32318: LD_INT 108
32320: PUSH
32321: LD_INT 109
32323: PUSH
32324: LD_INT 112
32326: PUSH
32327: LD_INT 116
32329: PUSH
32330: LD_INT 117
32332: PUSH
32333: LD_INT 118
32335: PUSH
32336: EMPTY
32337: LIST
32338: LIST
32339: LIST
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: ST_TO_ADDR
32352: GO 34875
32354: LD_INT 7
32356: DOUBLE
32357: EQUAL
32358: IFTRUE 32362
32360: GO 32474
32362: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
32363: LD_ADDR_VAR 0 2
32367: PUSH
32368: LD_INT 2
32370: PUSH
32371: LD_INT 4
32373: PUSH
32374: LD_INT 5
32376: PUSH
32377: LD_INT 7
32379: PUSH
32380: LD_INT 11
32382: PUSH
32383: LD_INT 12
32385: PUSH
32386: LD_INT 15
32388: PUSH
32389: LD_INT 16
32391: PUSH
32392: LD_INT 20
32394: PUSH
32395: LD_INT 21
32397: PUSH
32398: LD_INT 22
32400: PUSH
32401: LD_INT 23
32403: PUSH
32404: LD_INT 25
32406: PUSH
32407: LD_INT 26
32409: PUSH
32410: EMPTY
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: LIST
32419: LIST
32420: LIST
32421: LIST
32422: LIST
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 101
32428: PUSH
32429: LD_INT 102
32431: PUSH
32432: LD_INT 103
32434: PUSH
32435: LD_INT 105
32437: PUSH
32438: LD_INT 106
32440: PUSH
32441: LD_INT 108
32443: PUSH
32444: LD_INT 112
32446: PUSH
32447: LD_INT 116
32449: PUSH
32450: LD_INT 117
32452: PUSH
32453: LD_INT 118
32455: PUSH
32456: EMPTY
32457: LIST
32458: LIST
32459: LIST
32460: LIST
32461: LIST
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: LIST
32467: PUSH
32468: EMPTY
32469: LIST
32470: LIST
32471: ST_TO_ADDR
32472: GO 34875
32474: LD_INT 8
32476: DOUBLE
32477: EQUAL
32478: IFTRUE 32482
32480: GO 32622
32482: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
32483: LD_ADDR_VAR 0 2
32487: PUSH
32488: LD_INT 2
32490: PUSH
32491: LD_INT 4
32493: PUSH
32494: LD_INT 5
32496: PUSH
32497: LD_INT 6
32499: PUSH
32500: LD_INT 7
32502: PUSH
32503: LD_INT 8
32505: PUSH
32506: LD_INT 11
32508: PUSH
32509: LD_INT 12
32511: PUSH
32512: LD_INT 15
32514: PUSH
32515: LD_INT 16
32517: PUSH
32518: LD_INT 20
32520: PUSH
32521: LD_INT 21
32523: PUSH
32524: LD_INT 22
32526: PUSH
32527: LD_INT 23
32529: PUSH
32530: LD_INT 25
32532: PUSH
32533: LD_INT 26
32535: PUSH
32536: LD_INT 30
32538: PUSH
32539: LD_INT 31
32541: PUSH
32542: LD_INT 32
32544: PUSH
32545: LD_INT 36
32547: PUSH
32548: EMPTY
32549: LIST
32550: LIST
32551: LIST
32552: LIST
32553: LIST
32554: LIST
32555: LIST
32556: LIST
32557: LIST
32558: LIST
32559: LIST
32560: LIST
32561: LIST
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: PUSH
32570: LD_INT 101
32572: PUSH
32573: LD_INT 102
32575: PUSH
32576: LD_INT 103
32578: PUSH
32579: LD_INT 105
32581: PUSH
32582: LD_INT 106
32584: PUSH
32585: LD_INT 108
32587: PUSH
32588: LD_INT 109
32590: PUSH
32591: LD_INT 112
32593: PUSH
32594: LD_INT 116
32596: PUSH
32597: LD_INT 117
32599: PUSH
32600: LD_INT 118
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: LIST
32607: LIST
32608: LIST
32609: LIST
32610: LIST
32611: LIST
32612: LIST
32613: LIST
32614: LIST
32615: PUSH
32616: EMPTY
32617: LIST
32618: LIST
32619: ST_TO_ADDR
32620: GO 34875
32622: LD_INT 9
32624: DOUBLE
32625: EQUAL
32626: IFTRUE 32630
32628: GO 32778
32630: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
32631: LD_ADDR_VAR 0 2
32635: PUSH
32636: LD_INT 2
32638: PUSH
32639: LD_INT 4
32641: PUSH
32642: LD_INT 5
32644: PUSH
32645: LD_INT 6
32647: PUSH
32648: LD_INT 7
32650: PUSH
32651: LD_INT 8
32653: PUSH
32654: LD_INT 11
32656: PUSH
32657: LD_INT 12
32659: PUSH
32660: LD_INT 15
32662: PUSH
32663: LD_INT 16
32665: PUSH
32666: LD_INT 20
32668: PUSH
32669: LD_INT 21
32671: PUSH
32672: LD_INT 22
32674: PUSH
32675: LD_INT 23
32677: PUSH
32678: LD_INT 25
32680: PUSH
32681: LD_INT 26
32683: PUSH
32684: LD_INT 28
32686: PUSH
32687: LD_INT 30
32689: PUSH
32690: LD_INT 31
32692: PUSH
32693: LD_INT 32
32695: PUSH
32696: LD_INT 36
32698: PUSH
32699: EMPTY
32700: LIST
32701: LIST
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: LIST
32713: LIST
32714: LIST
32715: LIST
32716: LIST
32717: LIST
32718: LIST
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 101
32724: PUSH
32725: LD_INT 102
32727: PUSH
32728: LD_INT 103
32730: PUSH
32731: LD_INT 105
32733: PUSH
32734: LD_INT 106
32736: PUSH
32737: LD_INT 108
32739: PUSH
32740: LD_INT 109
32742: PUSH
32743: LD_INT 112
32745: PUSH
32746: LD_INT 114
32748: PUSH
32749: LD_INT 116
32751: PUSH
32752: LD_INT 117
32754: PUSH
32755: LD_INT 118
32757: PUSH
32758: EMPTY
32759: LIST
32760: LIST
32761: LIST
32762: LIST
32763: LIST
32764: LIST
32765: LIST
32766: LIST
32767: LIST
32768: LIST
32769: LIST
32770: LIST
32771: PUSH
32772: EMPTY
32773: LIST
32774: LIST
32775: ST_TO_ADDR
32776: GO 34875
32778: LD_INT 10
32780: DOUBLE
32781: EQUAL
32782: IFTRUE 32786
32784: GO 32982
32786: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
32787: LD_ADDR_VAR 0 2
32791: PUSH
32792: LD_INT 2
32794: PUSH
32795: LD_INT 4
32797: PUSH
32798: LD_INT 5
32800: PUSH
32801: LD_INT 6
32803: PUSH
32804: LD_INT 7
32806: PUSH
32807: LD_INT 8
32809: PUSH
32810: LD_INT 9
32812: PUSH
32813: LD_INT 10
32815: PUSH
32816: LD_INT 11
32818: PUSH
32819: LD_INT 12
32821: PUSH
32822: LD_INT 13
32824: PUSH
32825: LD_INT 14
32827: PUSH
32828: LD_INT 15
32830: PUSH
32831: LD_INT 16
32833: PUSH
32834: LD_INT 17
32836: PUSH
32837: LD_INT 18
32839: PUSH
32840: LD_INT 19
32842: PUSH
32843: LD_INT 20
32845: PUSH
32846: LD_INT 21
32848: PUSH
32849: LD_INT 22
32851: PUSH
32852: LD_INT 23
32854: PUSH
32855: LD_INT 24
32857: PUSH
32858: LD_INT 25
32860: PUSH
32861: LD_INT 26
32863: PUSH
32864: LD_INT 28
32866: PUSH
32867: LD_INT 30
32869: PUSH
32870: LD_INT 31
32872: PUSH
32873: LD_INT 32
32875: PUSH
32876: LD_INT 36
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: LIST
32883: LIST
32884: LIST
32885: LIST
32886: LIST
32887: LIST
32888: LIST
32889: LIST
32890: LIST
32891: LIST
32892: LIST
32893: LIST
32894: LIST
32895: LIST
32896: LIST
32897: LIST
32898: LIST
32899: LIST
32900: LIST
32901: LIST
32902: LIST
32903: LIST
32904: LIST
32905: LIST
32906: LIST
32907: LIST
32908: LIST
32909: PUSH
32910: LD_INT 101
32912: PUSH
32913: LD_INT 102
32915: PUSH
32916: LD_INT 103
32918: PUSH
32919: LD_INT 104
32921: PUSH
32922: LD_INT 105
32924: PUSH
32925: LD_INT 106
32927: PUSH
32928: LD_INT 107
32930: PUSH
32931: LD_INT 108
32933: PUSH
32934: LD_INT 109
32936: PUSH
32937: LD_INT 110
32939: PUSH
32940: LD_INT 111
32942: PUSH
32943: LD_INT 112
32945: PUSH
32946: LD_INT 114
32948: PUSH
32949: LD_INT 116
32951: PUSH
32952: LD_INT 117
32954: PUSH
32955: LD_INT 118
32957: PUSH
32958: EMPTY
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: LIST
32967: LIST
32968: LIST
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: PUSH
32976: EMPTY
32977: LIST
32978: LIST
32979: ST_TO_ADDR
32980: GO 34875
32982: LD_INT 11
32984: DOUBLE
32985: EQUAL
32986: IFTRUE 32990
32988: GO 33194
32990: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
32991: LD_ADDR_VAR 0 2
32995: PUSH
32996: LD_INT 2
32998: PUSH
32999: LD_INT 3
33001: PUSH
33002: LD_INT 4
33004: PUSH
33005: LD_INT 5
33007: PUSH
33008: LD_INT 6
33010: PUSH
33011: LD_INT 7
33013: PUSH
33014: LD_INT 8
33016: PUSH
33017: LD_INT 9
33019: PUSH
33020: LD_INT 10
33022: PUSH
33023: LD_INT 11
33025: PUSH
33026: LD_INT 12
33028: PUSH
33029: LD_INT 13
33031: PUSH
33032: LD_INT 14
33034: PUSH
33035: LD_INT 15
33037: PUSH
33038: LD_INT 16
33040: PUSH
33041: LD_INT 17
33043: PUSH
33044: LD_INT 18
33046: PUSH
33047: LD_INT 19
33049: PUSH
33050: LD_INT 20
33052: PUSH
33053: LD_INT 21
33055: PUSH
33056: LD_INT 22
33058: PUSH
33059: LD_INT 23
33061: PUSH
33062: LD_INT 24
33064: PUSH
33065: LD_INT 25
33067: PUSH
33068: LD_INT 26
33070: PUSH
33071: LD_INT 28
33073: PUSH
33074: LD_INT 30
33076: PUSH
33077: LD_INT 31
33079: PUSH
33080: LD_INT 32
33082: PUSH
33083: LD_INT 34
33085: PUSH
33086: LD_INT 36
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: LIST
33093: LIST
33094: LIST
33095: LIST
33096: LIST
33097: LIST
33098: LIST
33099: LIST
33100: LIST
33101: LIST
33102: LIST
33103: LIST
33104: LIST
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: LIST
33118: LIST
33119: LIST
33120: LIST
33121: PUSH
33122: LD_INT 101
33124: PUSH
33125: LD_INT 102
33127: PUSH
33128: LD_INT 103
33130: PUSH
33131: LD_INT 104
33133: PUSH
33134: LD_INT 105
33136: PUSH
33137: LD_INT 106
33139: PUSH
33140: LD_INT 107
33142: PUSH
33143: LD_INT 108
33145: PUSH
33146: LD_INT 109
33148: PUSH
33149: LD_INT 110
33151: PUSH
33152: LD_INT 111
33154: PUSH
33155: LD_INT 112
33157: PUSH
33158: LD_INT 114
33160: PUSH
33161: LD_INT 116
33163: PUSH
33164: LD_INT 117
33166: PUSH
33167: LD_INT 118
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: LIST
33174: LIST
33175: LIST
33176: LIST
33177: LIST
33178: LIST
33179: LIST
33180: LIST
33181: LIST
33182: LIST
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: PUSH
33188: EMPTY
33189: LIST
33190: LIST
33191: ST_TO_ADDR
33192: GO 34875
33194: LD_INT 12
33196: DOUBLE
33197: EQUAL
33198: IFTRUE 33202
33200: GO 33422
33202: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
33203: LD_ADDR_VAR 0 2
33207: PUSH
33208: LD_INT 1
33210: PUSH
33211: LD_INT 2
33213: PUSH
33214: LD_INT 3
33216: PUSH
33217: LD_INT 4
33219: PUSH
33220: LD_INT 5
33222: PUSH
33223: LD_INT 6
33225: PUSH
33226: LD_INT 7
33228: PUSH
33229: LD_INT 8
33231: PUSH
33232: LD_INT 9
33234: PUSH
33235: LD_INT 10
33237: PUSH
33238: LD_INT 11
33240: PUSH
33241: LD_INT 12
33243: PUSH
33244: LD_INT 13
33246: PUSH
33247: LD_INT 14
33249: PUSH
33250: LD_INT 15
33252: PUSH
33253: LD_INT 16
33255: PUSH
33256: LD_INT 17
33258: PUSH
33259: LD_INT 18
33261: PUSH
33262: LD_INT 19
33264: PUSH
33265: LD_INT 20
33267: PUSH
33268: LD_INT 21
33270: PUSH
33271: LD_INT 22
33273: PUSH
33274: LD_INT 23
33276: PUSH
33277: LD_INT 24
33279: PUSH
33280: LD_INT 25
33282: PUSH
33283: LD_INT 26
33285: PUSH
33286: LD_INT 27
33288: PUSH
33289: LD_INT 28
33291: PUSH
33292: LD_INT 30
33294: PUSH
33295: LD_INT 31
33297: PUSH
33298: LD_INT 32
33300: PUSH
33301: LD_INT 33
33303: PUSH
33304: LD_INT 34
33306: PUSH
33307: LD_INT 36
33309: PUSH
33310: EMPTY
33311: LIST
33312: LIST
33313: LIST
33314: LIST
33315: LIST
33316: LIST
33317: LIST
33318: LIST
33319: LIST
33320: LIST
33321: LIST
33322: LIST
33323: LIST
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: PUSH
33346: LD_INT 101
33348: PUSH
33349: LD_INT 102
33351: PUSH
33352: LD_INT 103
33354: PUSH
33355: LD_INT 104
33357: PUSH
33358: LD_INT 105
33360: PUSH
33361: LD_INT 106
33363: PUSH
33364: LD_INT 107
33366: PUSH
33367: LD_INT 108
33369: PUSH
33370: LD_INT 109
33372: PUSH
33373: LD_INT 110
33375: PUSH
33376: LD_INT 111
33378: PUSH
33379: LD_INT 112
33381: PUSH
33382: LD_INT 113
33384: PUSH
33385: LD_INT 114
33387: PUSH
33388: LD_INT 116
33390: PUSH
33391: LD_INT 117
33393: PUSH
33394: LD_INT 118
33396: PUSH
33397: EMPTY
33398: LIST
33399: LIST
33400: LIST
33401: LIST
33402: LIST
33403: LIST
33404: LIST
33405: LIST
33406: LIST
33407: LIST
33408: LIST
33409: LIST
33410: LIST
33411: LIST
33412: LIST
33413: LIST
33414: LIST
33415: PUSH
33416: EMPTY
33417: LIST
33418: LIST
33419: ST_TO_ADDR
33420: GO 34875
33422: LD_INT 13
33424: DOUBLE
33425: EQUAL
33426: IFTRUE 33430
33428: GO 33638
33430: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
33431: LD_ADDR_VAR 0 2
33435: PUSH
33436: LD_INT 1
33438: PUSH
33439: LD_INT 2
33441: PUSH
33442: LD_INT 3
33444: PUSH
33445: LD_INT 4
33447: PUSH
33448: LD_INT 5
33450: PUSH
33451: LD_INT 8
33453: PUSH
33454: LD_INT 9
33456: PUSH
33457: LD_INT 10
33459: PUSH
33460: LD_INT 11
33462: PUSH
33463: LD_INT 12
33465: PUSH
33466: LD_INT 14
33468: PUSH
33469: LD_INT 15
33471: PUSH
33472: LD_INT 16
33474: PUSH
33475: LD_INT 17
33477: PUSH
33478: LD_INT 18
33480: PUSH
33481: LD_INT 19
33483: PUSH
33484: LD_INT 20
33486: PUSH
33487: LD_INT 21
33489: PUSH
33490: LD_INT 22
33492: PUSH
33493: LD_INT 23
33495: PUSH
33496: LD_INT 24
33498: PUSH
33499: LD_INT 25
33501: PUSH
33502: LD_INT 26
33504: PUSH
33505: LD_INT 27
33507: PUSH
33508: LD_INT 28
33510: PUSH
33511: LD_INT 30
33513: PUSH
33514: LD_INT 31
33516: PUSH
33517: LD_INT 32
33519: PUSH
33520: LD_INT 33
33522: PUSH
33523: LD_INT 34
33525: PUSH
33526: LD_INT 36
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: LIST
33533: LIST
33534: LIST
33535: LIST
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: LIST
33560: LIST
33561: PUSH
33562: LD_INT 101
33564: PUSH
33565: LD_INT 102
33567: PUSH
33568: LD_INT 103
33570: PUSH
33571: LD_INT 104
33573: PUSH
33574: LD_INT 105
33576: PUSH
33577: LD_INT 106
33579: PUSH
33580: LD_INT 107
33582: PUSH
33583: LD_INT 108
33585: PUSH
33586: LD_INT 109
33588: PUSH
33589: LD_INT 110
33591: PUSH
33592: LD_INT 111
33594: PUSH
33595: LD_INT 112
33597: PUSH
33598: LD_INT 113
33600: PUSH
33601: LD_INT 114
33603: PUSH
33604: LD_INT 116
33606: PUSH
33607: LD_INT 117
33609: PUSH
33610: LD_INT 118
33612: PUSH
33613: EMPTY
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: PUSH
33632: EMPTY
33633: LIST
33634: LIST
33635: ST_TO_ADDR
33636: GO 34875
33638: LD_INT 14
33640: DOUBLE
33641: EQUAL
33642: IFTRUE 33646
33644: GO 33870
33646: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
33647: LD_ADDR_VAR 0 2
33651: PUSH
33652: LD_INT 1
33654: PUSH
33655: LD_INT 2
33657: PUSH
33658: LD_INT 3
33660: PUSH
33661: LD_INT 4
33663: PUSH
33664: LD_INT 5
33666: PUSH
33667: LD_INT 6
33669: PUSH
33670: LD_INT 7
33672: PUSH
33673: LD_INT 8
33675: PUSH
33676: LD_INT 9
33678: PUSH
33679: LD_INT 10
33681: PUSH
33682: LD_INT 11
33684: PUSH
33685: LD_INT 12
33687: PUSH
33688: LD_INT 13
33690: PUSH
33691: LD_INT 14
33693: PUSH
33694: LD_INT 15
33696: PUSH
33697: LD_INT 16
33699: PUSH
33700: LD_INT 17
33702: PUSH
33703: LD_INT 18
33705: PUSH
33706: LD_INT 19
33708: PUSH
33709: LD_INT 20
33711: PUSH
33712: LD_INT 21
33714: PUSH
33715: LD_INT 22
33717: PUSH
33718: LD_INT 23
33720: PUSH
33721: LD_INT 24
33723: PUSH
33724: LD_INT 25
33726: PUSH
33727: LD_INT 26
33729: PUSH
33730: LD_INT 27
33732: PUSH
33733: LD_INT 28
33735: PUSH
33736: LD_INT 29
33738: PUSH
33739: LD_INT 30
33741: PUSH
33742: LD_INT 31
33744: PUSH
33745: LD_INT 32
33747: PUSH
33748: LD_INT 33
33750: PUSH
33751: LD_INT 34
33753: PUSH
33754: LD_INT 36
33756: PUSH
33757: EMPTY
33758: LIST
33759: LIST
33760: LIST
33761: LIST
33762: LIST
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: LIST
33784: LIST
33785: LIST
33786: LIST
33787: LIST
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: PUSH
33794: LD_INT 101
33796: PUSH
33797: LD_INT 102
33799: PUSH
33800: LD_INT 103
33802: PUSH
33803: LD_INT 104
33805: PUSH
33806: LD_INT 105
33808: PUSH
33809: LD_INT 106
33811: PUSH
33812: LD_INT 107
33814: PUSH
33815: LD_INT 108
33817: PUSH
33818: LD_INT 109
33820: PUSH
33821: LD_INT 110
33823: PUSH
33824: LD_INT 111
33826: PUSH
33827: LD_INT 112
33829: PUSH
33830: LD_INT 113
33832: PUSH
33833: LD_INT 114
33835: PUSH
33836: LD_INT 116
33838: PUSH
33839: LD_INT 117
33841: PUSH
33842: LD_INT 118
33844: PUSH
33845: EMPTY
33846: LIST
33847: LIST
33848: LIST
33849: LIST
33850: LIST
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: LIST
33862: LIST
33863: PUSH
33864: EMPTY
33865: LIST
33866: LIST
33867: ST_TO_ADDR
33868: GO 34875
33870: LD_INT 15
33872: DOUBLE
33873: EQUAL
33874: IFTRUE 33878
33876: GO 34102
33878: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
33879: LD_ADDR_VAR 0 2
33883: PUSH
33884: LD_INT 1
33886: PUSH
33887: LD_INT 2
33889: PUSH
33890: LD_INT 3
33892: PUSH
33893: LD_INT 4
33895: PUSH
33896: LD_INT 5
33898: PUSH
33899: LD_INT 6
33901: PUSH
33902: LD_INT 7
33904: PUSH
33905: LD_INT 8
33907: PUSH
33908: LD_INT 9
33910: PUSH
33911: LD_INT 10
33913: PUSH
33914: LD_INT 11
33916: PUSH
33917: LD_INT 12
33919: PUSH
33920: LD_INT 13
33922: PUSH
33923: LD_INT 14
33925: PUSH
33926: LD_INT 15
33928: PUSH
33929: LD_INT 16
33931: PUSH
33932: LD_INT 17
33934: PUSH
33935: LD_INT 18
33937: PUSH
33938: LD_INT 19
33940: PUSH
33941: LD_INT 20
33943: PUSH
33944: LD_INT 21
33946: PUSH
33947: LD_INT 22
33949: PUSH
33950: LD_INT 23
33952: PUSH
33953: LD_INT 24
33955: PUSH
33956: LD_INT 25
33958: PUSH
33959: LD_INT 26
33961: PUSH
33962: LD_INT 27
33964: PUSH
33965: LD_INT 28
33967: PUSH
33968: LD_INT 29
33970: PUSH
33971: LD_INT 30
33973: PUSH
33974: LD_INT 31
33976: PUSH
33977: LD_INT 32
33979: PUSH
33980: LD_INT 33
33982: PUSH
33983: LD_INT 34
33985: PUSH
33986: LD_INT 36
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: LIST
33997: LIST
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: PUSH
34026: LD_INT 101
34028: PUSH
34029: LD_INT 102
34031: PUSH
34032: LD_INT 103
34034: PUSH
34035: LD_INT 104
34037: PUSH
34038: LD_INT 105
34040: PUSH
34041: LD_INT 106
34043: PUSH
34044: LD_INT 107
34046: PUSH
34047: LD_INT 108
34049: PUSH
34050: LD_INT 109
34052: PUSH
34053: LD_INT 110
34055: PUSH
34056: LD_INT 111
34058: PUSH
34059: LD_INT 112
34061: PUSH
34062: LD_INT 113
34064: PUSH
34065: LD_INT 114
34067: PUSH
34068: LD_INT 116
34070: PUSH
34071: LD_INT 117
34073: PUSH
34074: LD_INT 118
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: LIST
34081: LIST
34082: LIST
34083: LIST
34084: LIST
34085: LIST
34086: LIST
34087: LIST
34088: LIST
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: PUSH
34096: EMPTY
34097: LIST
34098: LIST
34099: ST_TO_ADDR
34100: GO 34875
34102: LD_INT 16
34104: DOUBLE
34105: EQUAL
34106: IFTRUE 34110
34108: GO 34246
34110: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
34111: LD_ADDR_VAR 0 2
34115: PUSH
34116: LD_INT 2
34118: PUSH
34119: LD_INT 4
34121: PUSH
34122: LD_INT 5
34124: PUSH
34125: LD_INT 7
34127: PUSH
34128: LD_INT 11
34130: PUSH
34131: LD_INT 12
34133: PUSH
34134: LD_INT 15
34136: PUSH
34137: LD_INT 16
34139: PUSH
34140: LD_INT 20
34142: PUSH
34143: LD_INT 21
34145: PUSH
34146: LD_INT 22
34148: PUSH
34149: LD_INT 23
34151: PUSH
34152: LD_INT 25
34154: PUSH
34155: LD_INT 26
34157: PUSH
34158: LD_INT 30
34160: PUSH
34161: LD_INT 31
34163: PUSH
34164: LD_INT 32
34166: PUSH
34167: LD_INT 33
34169: PUSH
34170: LD_INT 34
34172: PUSH
34173: EMPTY
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: PUSH
34194: LD_INT 101
34196: PUSH
34197: LD_INT 102
34199: PUSH
34200: LD_INT 103
34202: PUSH
34203: LD_INT 106
34205: PUSH
34206: LD_INT 108
34208: PUSH
34209: LD_INT 112
34211: PUSH
34212: LD_INT 113
34214: PUSH
34215: LD_INT 114
34217: PUSH
34218: LD_INT 116
34220: PUSH
34221: LD_INT 117
34223: PUSH
34224: LD_INT 118
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: LIST
34231: LIST
34232: LIST
34233: LIST
34234: LIST
34235: LIST
34236: LIST
34237: LIST
34238: LIST
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: ST_TO_ADDR
34244: GO 34875
34246: LD_INT 17
34248: DOUBLE
34249: EQUAL
34250: IFTRUE 34254
34252: GO 34478
34254: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
34255: LD_ADDR_VAR 0 2
34259: PUSH
34260: LD_INT 1
34262: PUSH
34263: LD_INT 2
34265: PUSH
34266: LD_INT 3
34268: PUSH
34269: LD_INT 4
34271: PUSH
34272: LD_INT 5
34274: PUSH
34275: LD_INT 6
34277: PUSH
34278: LD_INT 7
34280: PUSH
34281: LD_INT 8
34283: PUSH
34284: LD_INT 9
34286: PUSH
34287: LD_INT 10
34289: PUSH
34290: LD_INT 11
34292: PUSH
34293: LD_INT 12
34295: PUSH
34296: LD_INT 13
34298: PUSH
34299: LD_INT 14
34301: PUSH
34302: LD_INT 15
34304: PUSH
34305: LD_INT 16
34307: PUSH
34308: LD_INT 17
34310: PUSH
34311: LD_INT 18
34313: PUSH
34314: LD_INT 19
34316: PUSH
34317: LD_INT 20
34319: PUSH
34320: LD_INT 21
34322: PUSH
34323: LD_INT 22
34325: PUSH
34326: LD_INT 23
34328: PUSH
34329: LD_INT 24
34331: PUSH
34332: LD_INT 25
34334: PUSH
34335: LD_INT 26
34337: PUSH
34338: LD_INT 27
34340: PUSH
34341: LD_INT 28
34343: PUSH
34344: LD_INT 29
34346: PUSH
34347: LD_INT 30
34349: PUSH
34350: LD_INT 31
34352: PUSH
34353: LD_INT 32
34355: PUSH
34356: LD_INT 33
34358: PUSH
34359: LD_INT 34
34361: PUSH
34362: LD_INT 36
34364: PUSH
34365: EMPTY
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: LIST
34391: LIST
34392: LIST
34393: LIST
34394: LIST
34395: LIST
34396: LIST
34397: LIST
34398: LIST
34399: LIST
34400: LIST
34401: PUSH
34402: LD_INT 101
34404: PUSH
34405: LD_INT 102
34407: PUSH
34408: LD_INT 103
34410: PUSH
34411: LD_INT 104
34413: PUSH
34414: LD_INT 105
34416: PUSH
34417: LD_INT 106
34419: PUSH
34420: LD_INT 107
34422: PUSH
34423: LD_INT 108
34425: PUSH
34426: LD_INT 109
34428: PUSH
34429: LD_INT 110
34431: PUSH
34432: LD_INT 111
34434: PUSH
34435: LD_INT 112
34437: PUSH
34438: LD_INT 113
34440: PUSH
34441: LD_INT 114
34443: PUSH
34444: LD_INT 116
34446: PUSH
34447: LD_INT 117
34449: PUSH
34450: LD_INT 118
34452: PUSH
34453: EMPTY
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: PUSH
34472: EMPTY
34473: LIST
34474: LIST
34475: ST_TO_ADDR
34476: GO 34875
34478: LD_INT 18
34480: DOUBLE
34481: EQUAL
34482: IFTRUE 34486
34484: GO 34634
34486: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
34487: LD_ADDR_VAR 0 2
34491: PUSH
34492: LD_INT 2
34494: PUSH
34495: LD_INT 4
34497: PUSH
34498: LD_INT 5
34500: PUSH
34501: LD_INT 7
34503: PUSH
34504: LD_INT 11
34506: PUSH
34507: LD_INT 12
34509: PUSH
34510: LD_INT 15
34512: PUSH
34513: LD_INT 16
34515: PUSH
34516: LD_INT 20
34518: PUSH
34519: LD_INT 21
34521: PUSH
34522: LD_INT 22
34524: PUSH
34525: LD_INT 23
34527: PUSH
34528: LD_INT 25
34530: PUSH
34531: LD_INT 26
34533: PUSH
34534: LD_INT 30
34536: PUSH
34537: LD_INT 31
34539: PUSH
34540: LD_INT 32
34542: PUSH
34543: LD_INT 33
34545: PUSH
34546: LD_INT 34
34548: PUSH
34549: LD_INT 35
34551: PUSH
34552: LD_INT 36
34554: PUSH
34555: EMPTY
34556: LIST
34557: LIST
34558: LIST
34559: LIST
34560: LIST
34561: LIST
34562: LIST
34563: LIST
34564: LIST
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: PUSH
34578: LD_INT 101
34580: PUSH
34581: LD_INT 102
34583: PUSH
34584: LD_INT 103
34586: PUSH
34587: LD_INT 106
34589: PUSH
34590: LD_INT 108
34592: PUSH
34593: LD_INT 112
34595: PUSH
34596: LD_INT 113
34598: PUSH
34599: LD_INT 114
34601: PUSH
34602: LD_INT 115
34604: PUSH
34605: LD_INT 116
34607: PUSH
34608: LD_INT 117
34610: PUSH
34611: LD_INT 118
34613: PUSH
34614: EMPTY
34615: LIST
34616: LIST
34617: LIST
34618: LIST
34619: LIST
34620: LIST
34621: LIST
34622: LIST
34623: LIST
34624: LIST
34625: LIST
34626: LIST
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: ST_TO_ADDR
34632: GO 34875
34634: LD_INT 19
34636: DOUBLE
34637: EQUAL
34638: IFTRUE 34642
34640: GO 34874
34642: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
34643: LD_ADDR_VAR 0 2
34647: PUSH
34648: LD_INT 1
34650: PUSH
34651: LD_INT 2
34653: PUSH
34654: LD_INT 3
34656: PUSH
34657: LD_INT 4
34659: PUSH
34660: LD_INT 5
34662: PUSH
34663: LD_INT 6
34665: PUSH
34666: LD_INT 7
34668: PUSH
34669: LD_INT 8
34671: PUSH
34672: LD_INT 9
34674: PUSH
34675: LD_INT 10
34677: PUSH
34678: LD_INT 11
34680: PUSH
34681: LD_INT 12
34683: PUSH
34684: LD_INT 13
34686: PUSH
34687: LD_INT 14
34689: PUSH
34690: LD_INT 15
34692: PUSH
34693: LD_INT 16
34695: PUSH
34696: LD_INT 17
34698: PUSH
34699: LD_INT 18
34701: PUSH
34702: LD_INT 19
34704: PUSH
34705: LD_INT 20
34707: PUSH
34708: LD_INT 21
34710: PUSH
34711: LD_INT 22
34713: PUSH
34714: LD_INT 23
34716: PUSH
34717: LD_INT 24
34719: PUSH
34720: LD_INT 25
34722: PUSH
34723: LD_INT 26
34725: PUSH
34726: LD_INT 27
34728: PUSH
34729: LD_INT 28
34731: PUSH
34732: LD_INT 29
34734: PUSH
34735: LD_INT 30
34737: PUSH
34738: LD_INT 31
34740: PUSH
34741: LD_INT 32
34743: PUSH
34744: LD_INT 33
34746: PUSH
34747: LD_INT 34
34749: PUSH
34750: LD_INT 35
34752: PUSH
34753: LD_INT 36
34755: PUSH
34756: EMPTY
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: LIST
34767: LIST
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: LIST
34775: LIST
34776: LIST
34777: LIST
34778: LIST
34779: LIST
34780: LIST
34781: LIST
34782: LIST
34783: LIST
34784: LIST
34785: LIST
34786: LIST
34787: LIST
34788: LIST
34789: LIST
34790: LIST
34791: LIST
34792: LIST
34793: PUSH
34794: LD_INT 101
34796: PUSH
34797: LD_INT 102
34799: PUSH
34800: LD_INT 103
34802: PUSH
34803: LD_INT 104
34805: PUSH
34806: LD_INT 105
34808: PUSH
34809: LD_INT 106
34811: PUSH
34812: LD_INT 107
34814: PUSH
34815: LD_INT 108
34817: PUSH
34818: LD_INT 109
34820: PUSH
34821: LD_INT 110
34823: PUSH
34824: LD_INT 111
34826: PUSH
34827: LD_INT 112
34829: PUSH
34830: LD_INT 113
34832: PUSH
34833: LD_INT 114
34835: PUSH
34836: LD_INT 115
34838: PUSH
34839: LD_INT 116
34841: PUSH
34842: LD_INT 117
34844: PUSH
34845: LD_INT 118
34847: PUSH
34848: EMPTY
34849: LIST
34850: LIST
34851: LIST
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: LIST
34862: LIST
34863: LIST
34864: LIST
34865: LIST
34866: LIST
34867: PUSH
34868: EMPTY
34869: LIST
34870: LIST
34871: ST_TO_ADDR
34872: GO 34875
34874: POP
// end else
34875: GO 35106
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
34877: LD_ADDR_VAR 0 2
34881: PUSH
34882: LD_INT 1
34884: PUSH
34885: LD_INT 2
34887: PUSH
34888: LD_INT 3
34890: PUSH
34891: LD_INT 4
34893: PUSH
34894: LD_INT 5
34896: PUSH
34897: LD_INT 6
34899: PUSH
34900: LD_INT 7
34902: PUSH
34903: LD_INT 8
34905: PUSH
34906: LD_INT 9
34908: PUSH
34909: LD_INT 10
34911: PUSH
34912: LD_INT 11
34914: PUSH
34915: LD_INT 12
34917: PUSH
34918: LD_INT 13
34920: PUSH
34921: LD_INT 14
34923: PUSH
34924: LD_INT 15
34926: PUSH
34927: LD_INT 16
34929: PUSH
34930: LD_INT 17
34932: PUSH
34933: LD_INT 18
34935: PUSH
34936: LD_INT 19
34938: PUSH
34939: LD_INT 20
34941: PUSH
34942: LD_INT 21
34944: PUSH
34945: LD_INT 22
34947: PUSH
34948: LD_INT 23
34950: PUSH
34951: LD_INT 24
34953: PUSH
34954: LD_INT 25
34956: PUSH
34957: LD_INT 26
34959: PUSH
34960: LD_INT 27
34962: PUSH
34963: LD_INT 28
34965: PUSH
34966: LD_INT 29
34968: PUSH
34969: LD_INT 30
34971: PUSH
34972: LD_INT 31
34974: PUSH
34975: LD_INT 32
34977: PUSH
34978: LD_INT 33
34980: PUSH
34981: LD_INT 34
34983: PUSH
34984: LD_INT 35
34986: PUSH
34987: LD_INT 36
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: LIST
34994: LIST
34995: LIST
34996: LIST
34997: LIST
34998: LIST
34999: LIST
35000: LIST
35001: LIST
35002: LIST
35003: LIST
35004: LIST
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 101
35030: PUSH
35031: LD_INT 102
35033: PUSH
35034: LD_INT 103
35036: PUSH
35037: LD_INT 104
35039: PUSH
35040: LD_INT 105
35042: PUSH
35043: LD_INT 106
35045: PUSH
35046: LD_INT 107
35048: PUSH
35049: LD_INT 108
35051: PUSH
35052: LD_INT 109
35054: PUSH
35055: LD_INT 110
35057: PUSH
35058: LD_INT 111
35060: PUSH
35061: LD_INT 112
35063: PUSH
35064: LD_INT 113
35066: PUSH
35067: LD_INT 114
35069: PUSH
35070: LD_INT 115
35072: PUSH
35073: LD_INT 116
35075: PUSH
35076: LD_INT 117
35078: PUSH
35079: LD_INT 118
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: LIST
35086: LIST
35087: LIST
35088: LIST
35089: LIST
35090: LIST
35091: LIST
35092: LIST
35093: LIST
35094: LIST
35095: LIST
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: PUSH
35102: EMPTY
35103: LIST
35104: LIST
35105: ST_TO_ADDR
// if result then
35106: LD_VAR 0 2
35110: IFFALSE 35896
// begin normal :=  ;
35112: LD_ADDR_VAR 0 5
35116: PUSH
35117: LD_STRING 
35119: ST_TO_ADDR
// hardcore :=  ;
35120: LD_ADDR_VAR 0 6
35124: PUSH
35125: LD_STRING 
35127: ST_TO_ADDR
// active :=  ;
35128: LD_ADDR_VAR 0 7
35132: PUSH
35133: LD_STRING 
35135: ST_TO_ADDR
// for i = 1 to normalCounter do
35136: LD_ADDR_VAR 0 8
35140: PUSH
35141: DOUBLE
35142: LD_INT 1
35144: DEC
35145: ST_TO_ADDR
35146: LD_EXP 71
35150: PUSH
35151: FOR_TO
35152: IFFALSE 35253
// begin tmp := 0 ;
35154: LD_ADDR_VAR 0 3
35158: PUSH
35159: LD_STRING 0
35161: ST_TO_ADDR
// if result [ 1 ] then
35162: LD_VAR 0 2
35166: PUSH
35167: LD_INT 1
35169: ARRAY
35170: IFFALSE 35235
// if result [ 1 ] [ 1 ] = i then
35172: LD_VAR 0 2
35176: PUSH
35177: LD_INT 1
35179: ARRAY
35180: PUSH
35181: LD_INT 1
35183: ARRAY
35184: PUSH
35185: LD_VAR 0 8
35189: EQUAL
35190: IFFALSE 35235
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
35192: LD_ADDR_VAR 0 2
35196: PUSH
35197: LD_VAR 0 2
35201: PPUSH
35202: LD_INT 1
35204: PPUSH
35205: LD_VAR 0 2
35209: PUSH
35210: LD_INT 1
35212: ARRAY
35213: PPUSH
35214: LD_INT 1
35216: PPUSH
35217: CALL_OW 3
35221: PPUSH
35222: CALL_OW 1
35226: ST_TO_ADDR
// tmp := 1 ;
35227: LD_ADDR_VAR 0 3
35231: PUSH
35232: LD_STRING 1
35234: ST_TO_ADDR
// end ; normal := normal & tmp ;
35235: LD_ADDR_VAR 0 5
35239: PUSH
35240: LD_VAR 0 5
35244: PUSH
35245: LD_VAR 0 3
35249: STR
35250: ST_TO_ADDR
// end ;
35251: GO 35151
35253: POP
35254: POP
// for i = 1 to hardcoreCounter do
35255: LD_ADDR_VAR 0 8
35259: PUSH
35260: DOUBLE
35261: LD_INT 1
35263: DEC
35264: ST_TO_ADDR
35265: LD_EXP 72
35269: PUSH
35270: FOR_TO
35271: IFFALSE 35376
// begin tmp := 0 ;
35273: LD_ADDR_VAR 0 3
35277: PUSH
35278: LD_STRING 0
35280: ST_TO_ADDR
// if result [ 2 ] then
35281: LD_VAR 0 2
35285: PUSH
35286: LD_INT 2
35288: ARRAY
35289: IFFALSE 35358
// if result [ 2 ] [ 1 ] = 100 + i then
35291: LD_VAR 0 2
35295: PUSH
35296: LD_INT 2
35298: ARRAY
35299: PUSH
35300: LD_INT 1
35302: ARRAY
35303: PUSH
35304: LD_INT 100
35306: PUSH
35307: LD_VAR 0 8
35311: PLUS
35312: EQUAL
35313: IFFALSE 35358
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
35315: LD_ADDR_VAR 0 2
35319: PUSH
35320: LD_VAR 0 2
35324: PPUSH
35325: LD_INT 2
35327: PPUSH
35328: LD_VAR 0 2
35332: PUSH
35333: LD_INT 2
35335: ARRAY
35336: PPUSH
35337: LD_INT 1
35339: PPUSH
35340: CALL_OW 3
35344: PPUSH
35345: CALL_OW 1
35349: ST_TO_ADDR
// tmp := 1 ;
35350: LD_ADDR_VAR 0 3
35354: PUSH
35355: LD_STRING 1
35357: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
35358: LD_ADDR_VAR 0 6
35362: PUSH
35363: LD_VAR 0 6
35367: PUSH
35368: LD_VAR 0 3
35372: STR
35373: ST_TO_ADDR
// end ;
35374: GO 35270
35376: POP
35377: POP
// if isGameLoad then
35378: LD_VAR 0 1
35382: IFFALSE 35857
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
35384: LD_ADDR_VAR 0 4
35388: PUSH
35389: LD_EXP 75
35393: PUSH
35394: LD_EXP 74
35398: PUSH
35399: LD_EXP 76
35403: PUSH
35404: LD_EXP 73
35408: PUSH
35409: LD_EXP 77
35413: PUSH
35414: LD_EXP 78
35418: PUSH
35419: LD_EXP 79
35423: PUSH
35424: LD_EXP 80
35428: PUSH
35429: LD_EXP 81
35433: PUSH
35434: LD_EXP 82
35438: PUSH
35439: LD_EXP 83
35443: PUSH
35444: LD_EXP 84
35448: PUSH
35449: LD_EXP 85
35453: PUSH
35454: LD_EXP 86
35458: PUSH
35459: LD_EXP 94
35463: PUSH
35464: LD_EXP 95
35468: PUSH
35469: LD_EXP 96
35473: PUSH
35474: LD_EXP 97
35478: PUSH
35479: LD_EXP 99
35483: PUSH
35484: LD_EXP 100
35488: PUSH
35489: LD_EXP 101
35493: PUSH
35494: LD_EXP 104
35498: PUSH
35499: LD_EXP 106
35503: PUSH
35504: LD_EXP 107
35508: PUSH
35509: LD_EXP 108
35513: PUSH
35514: LD_EXP 110
35518: PUSH
35519: LD_EXP 111
35523: PUSH
35524: LD_EXP 114
35528: PUSH
35529: LD_EXP 115
35533: PUSH
35534: LD_EXP 116
35538: PUSH
35539: LD_EXP 117
35543: PUSH
35544: LD_EXP 118
35548: PUSH
35549: LD_EXP 119
35553: PUSH
35554: LD_EXP 120
35558: PUSH
35559: LD_EXP 121
35563: PUSH
35564: LD_EXP 122
35568: PUSH
35569: LD_EXP 87
35573: PUSH
35574: LD_EXP 88
35578: PUSH
35579: LD_EXP 91
35583: PUSH
35584: LD_EXP 92
35588: PUSH
35589: LD_EXP 93
35593: PUSH
35594: LD_EXP 89
35598: PUSH
35599: LD_EXP 90
35603: PUSH
35604: LD_EXP 98
35608: PUSH
35609: LD_EXP 102
35613: PUSH
35614: LD_EXP 103
35618: PUSH
35619: LD_EXP 105
35623: PUSH
35624: LD_EXP 109
35628: PUSH
35629: LD_EXP 112
35633: PUSH
35634: LD_EXP 113
35638: PUSH
35639: LD_EXP 123
35643: PUSH
35644: LD_EXP 124
35648: PUSH
35649: LD_EXP 125
35653: PUSH
35654: LD_EXP 126
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: LIST
35663: LIST
35664: LIST
35665: LIST
35666: LIST
35667: LIST
35668: LIST
35669: LIST
35670: LIST
35671: LIST
35672: LIST
35673: LIST
35674: LIST
35675: LIST
35676: LIST
35677: LIST
35678: LIST
35679: LIST
35680: LIST
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: LIST
35688: LIST
35689: LIST
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: LIST
35700: LIST
35701: LIST
35702: LIST
35703: LIST
35704: LIST
35705: LIST
35706: LIST
35707: LIST
35708: LIST
35709: LIST
35710: LIST
35711: LIST
35712: LIST
35713: LIST
35714: ST_TO_ADDR
// tmp :=  ;
35715: LD_ADDR_VAR 0 3
35719: PUSH
35720: LD_STRING 
35722: ST_TO_ADDR
// for i = 1 to normalCounter do
35723: LD_ADDR_VAR 0 8
35727: PUSH
35728: DOUBLE
35729: LD_INT 1
35731: DEC
35732: ST_TO_ADDR
35733: LD_EXP 71
35737: PUSH
35738: FOR_TO
35739: IFFALSE 35775
// begin if flags [ i ] then
35741: LD_VAR 0 4
35745: PUSH
35746: LD_VAR 0 8
35750: ARRAY
35751: IFFALSE 35773
// tmp := tmp & i & ; ;
35753: LD_ADDR_VAR 0 3
35757: PUSH
35758: LD_VAR 0 3
35762: PUSH
35763: LD_VAR 0 8
35767: STR
35768: PUSH
35769: LD_STRING ;
35771: STR
35772: ST_TO_ADDR
// end ;
35773: GO 35738
35775: POP
35776: POP
// for i = 1 to hardcoreCounter do
35777: LD_ADDR_VAR 0 8
35781: PUSH
35782: DOUBLE
35783: LD_INT 1
35785: DEC
35786: ST_TO_ADDR
35787: LD_EXP 72
35791: PUSH
35792: FOR_TO
35793: IFFALSE 35839
// begin if flags [ normalCounter + i ] then
35795: LD_VAR 0 4
35799: PUSH
35800: LD_EXP 71
35804: PUSH
35805: LD_VAR 0 8
35809: PLUS
35810: ARRAY
35811: IFFALSE 35837
// tmp := tmp & ( 100 + i ) & ; ;
35813: LD_ADDR_VAR 0 3
35817: PUSH
35818: LD_VAR 0 3
35822: PUSH
35823: LD_INT 100
35825: PUSH
35826: LD_VAR 0 8
35830: PLUS
35831: STR
35832: PUSH
35833: LD_STRING ;
35835: STR
35836: ST_TO_ADDR
// end ;
35837: GO 35792
35839: POP
35840: POP
// if tmp then
35841: LD_VAR 0 3
35845: IFFALSE 35857
// active := tmp ;
35847: LD_ADDR_VAR 0 7
35851: PUSH
35852: LD_VAR 0 3
35856: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
35857: LD_STRING getStreamItemsFromMission("
35859: PUSH
35860: LD_VAR 0 5
35864: STR
35865: PUSH
35866: LD_STRING ","
35868: STR
35869: PUSH
35870: LD_VAR 0 6
35874: STR
35875: PUSH
35876: LD_STRING ","
35878: STR
35879: PUSH
35880: LD_VAR 0 7
35884: STR
35885: PUSH
35886: LD_STRING ")
35888: STR
35889: PPUSH
35890: CALL_OW 559
// end else
35894: GO 35903
// ToLua ( getStreamItemsFromMission("","","") ) ;
35896: LD_STRING getStreamItemsFromMission("","","")
35898: PPUSH
35899: CALL_OW 559
// end ;
35903: LD_VAR 0 2
35907: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
35908: LD_EXP 70
35912: PUSH
35913: LD_EXP 75
35917: AND
35918: IFFALSE 36042
35920: GO 35922
35922: DISABLE
35923: LD_INT 0
35925: PPUSH
35926: PPUSH
// begin enable ;
35927: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
35928: LD_ADDR_VAR 0 2
35932: PUSH
35933: LD_INT 22
35935: PUSH
35936: LD_OWVAR 2
35940: PUSH
35941: EMPTY
35942: LIST
35943: LIST
35944: PUSH
35945: LD_INT 2
35947: PUSH
35948: LD_INT 34
35950: PUSH
35951: LD_INT 7
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 34
35960: PUSH
35961: LD_INT 45
35963: PUSH
35964: EMPTY
35965: LIST
35966: LIST
35967: PUSH
35968: LD_INT 34
35970: PUSH
35971: LD_INT 28
35973: PUSH
35974: EMPTY
35975: LIST
35976: LIST
35977: PUSH
35978: LD_INT 34
35980: PUSH
35981: LD_INT 47
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PPUSH
35999: CALL_OW 69
36003: ST_TO_ADDR
// if not tmp then
36004: LD_VAR 0 2
36008: NOT
36009: IFFALSE 36013
// exit ;
36011: GO 36042
// for i in tmp do
36013: LD_ADDR_VAR 0 1
36017: PUSH
36018: LD_VAR 0 2
36022: PUSH
36023: FOR_IN
36024: IFFALSE 36040
// begin SetLives ( i , 0 ) ;
36026: LD_VAR 0 1
36030: PPUSH
36031: LD_INT 0
36033: PPUSH
36034: CALL_OW 234
// end ;
36038: GO 36023
36040: POP
36041: POP
// end ;
36042: PPOPN 2
36044: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
36045: LD_EXP 70
36049: PUSH
36050: LD_EXP 76
36054: AND
36055: IFFALSE 36139
36057: GO 36059
36059: DISABLE
36060: LD_INT 0
36062: PPUSH
36063: PPUSH
// begin enable ;
36064: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
36065: LD_ADDR_VAR 0 2
36069: PUSH
36070: LD_INT 22
36072: PUSH
36073: LD_OWVAR 2
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 32
36084: PUSH
36085: LD_INT 3
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PPUSH
36096: CALL_OW 69
36100: ST_TO_ADDR
// if not tmp then
36101: LD_VAR 0 2
36105: NOT
36106: IFFALSE 36110
// exit ;
36108: GO 36139
// for i in tmp do
36110: LD_ADDR_VAR 0 1
36114: PUSH
36115: LD_VAR 0 2
36119: PUSH
36120: FOR_IN
36121: IFFALSE 36137
// begin SetLives ( i , 0 ) ;
36123: LD_VAR 0 1
36127: PPUSH
36128: LD_INT 0
36130: PPUSH
36131: CALL_OW 234
// end ;
36135: GO 36120
36137: POP
36138: POP
// end ;
36139: PPOPN 2
36141: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
36142: LD_EXP 70
36146: PUSH
36147: LD_EXP 73
36151: AND
36152: IFFALSE 36245
36154: GO 36156
36156: DISABLE
36157: LD_INT 0
36159: PPUSH
// begin enable ;
36160: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
36161: LD_ADDR_VAR 0 1
36165: PUSH
36166: LD_INT 22
36168: PUSH
36169: LD_OWVAR 2
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 2
36180: PUSH
36181: LD_INT 25
36183: PUSH
36184: LD_INT 5
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 25
36193: PUSH
36194: LD_INT 9
36196: PUSH
36197: EMPTY
36198: LIST
36199: LIST
36200: PUSH
36201: LD_INT 25
36203: PUSH
36204: LD_INT 8
36206: PUSH
36207: EMPTY
36208: LIST
36209: LIST
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: PUSH
36217: EMPTY
36218: LIST
36219: LIST
36220: PPUSH
36221: CALL_OW 69
36225: PUSH
36226: FOR_IN
36227: IFFALSE 36243
// begin SetClass ( i , 1 ) ;
36229: LD_VAR 0 1
36233: PPUSH
36234: LD_INT 1
36236: PPUSH
36237: CALL_OW 336
// end ;
36241: GO 36226
36243: POP
36244: POP
// end ;
36245: PPOPN 1
36247: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
36248: LD_EXP 70
36252: PUSH
36253: LD_EXP 74
36257: AND
36258: PUSH
36259: LD_OWVAR 65
36263: PUSH
36264: LD_INT 7
36266: LESS
36267: AND
36268: IFFALSE 36282
36270: GO 36272
36272: DISABLE
// begin enable ;
36273: ENABLE
// game_speed := 7 ;
36274: LD_ADDR_OWVAR 65
36278: PUSH
36279: LD_INT 7
36281: ST_TO_ADDR
// end ;
36282: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
36283: LD_EXP 70
36287: PUSH
36288: LD_EXP 77
36292: AND
36293: IFFALSE 36495
36295: GO 36297
36297: DISABLE
36298: LD_INT 0
36300: PPUSH
36301: PPUSH
36302: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
36303: LD_ADDR_VAR 0 3
36307: PUSH
36308: LD_INT 81
36310: PUSH
36311: LD_OWVAR 2
36315: PUSH
36316: EMPTY
36317: LIST
36318: LIST
36319: PUSH
36320: LD_INT 21
36322: PUSH
36323: LD_INT 1
36325: PUSH
36326: EMPTY
36327: LIST
36328: LIST
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PPUSH
36334: CALL_OW 69
36338: ST_TO_ADDR
// if not tmp then
36339: LD_VAR 0 3
36343: NOT
36344: IFFALSE 36348
// exit ;
36346: GO 36495
// if tmp > 5 then
36348: LD_VAR 0 3
36352: PUSH
36353: LD_INT 5
36355: GREATER
36356: IFFALSE 36368
// k := 5 else
36358: LD_ADDR_VAR 0 2
36362: PUSH
36363: LD_INT 5
36365: ST_TO_ADDR
36366: GO 36378
// k := tmp ;
36368: LD_ADDR_VAR 0 2
36372: PUSH
36373: LD_VAR 0 3
36377: ST_TO_ADDR
// for i := 1 to k do
36378: LD_ADDR_VAR 0 1
36382: PUSH
36383: DOUBLE
36384: LD_INT 1
36386: DEC
36387: ST_TO_ADDR
36388: LD_VAR 0 2
36392: PUSH
36393: FOR_TO
36394: IFFALSE 36493
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
36396: LD_VAR 0 3
36400: PUSH
36401: LD_VAR 0 1
36405: ARRAY
36406: PPUSH
36407: LD_VAR 0 1
36411: PUSH
36412: LD_INT 4
36414: MOD
36415: PUSH
36416: LD_INT 1
36418: PLUS
36419: PPUSH
36420: CALL_OW 259
36424: PUSH
36425: LD_INT 10
36427: LESS
36428: IFFALSE 36491
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
36430: LD_VAR 0 3
36434: PUSH
36435: LD_VAR 0 1
36439: ARRAY
36440: PPUSH
36441: LD_VAR 0 1
36445: PUSH
36446: LD_INT 4
36448: MOD
36449: PUSH
36450: LD_INT 1
36452: PLUS
36453: PPUSH
36454: LD_VAR 0 3
36458: PUSH
36459: LD_VAR 0 1
36463: ARRAY
36464: PPUSH
36465: LD_VAR 0 1
36469: PUSH
36470: LD_INT 4
36472: MOD
36473: PUSH
36474: LD_INT 1
36476: PLUS
36477: PPUSH
36478: CALL_OW 259
36482: PUSH
36483: LD_INT 1
36485: PLUS
36486: PPUSH
36487: CALL_OW 237
36491: GO 36393
36493: POP
36494: POP
// end ;
36495: PPOPN 3
36497: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
36498: LD_EXP 70
36502: PUSH
36503: LD_EXP 78
36507: AND
36508: IFFALSE 36528
36510: GO 36512
36512: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
36513: LD_INT 4
36515: PPUSH
36516: LD_OWVAR 2
36520: PPUSH
36521: LD_INT 0
36523: PPUSH
36524: CALL_OW 324
36528: END
// every 0 0$1 trigger StreamModeActive and sShovel do
36529: LD_EXP 70
36533: PUSH
36534: LD_EXP 107
36538: AND
36539: IFFALSE 36559
36541: GO 36543
36543: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
36544: LD_INT 19
36546: PPUSH
36547: LD_OWVAR 2
36551: PPUSH
36552: LD_INT 0
36554: PPUSH
36555: CALL_OW 324
36559: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
36560: LD_EXP 70
36564: PUSH
36565: LD_EXP 79
36569: AND
36570: IFFALSE 36672
36572: GO 36574
36574: DISABLE
36575: LD_INT 0
36577: PPUSH
36578: PPUSH
// begin enable ;
36579: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
36580: LD_ADDR_VAR 0 2
36584: PUSH
36585: LD_INT 22
36587: PUSH
36588: LD_OWVAR 2
36592: PUSH
36593: EMPTY
36594: LIST
36595: LIST
36596: PUSH
36597: LD_INT 2
36599: PUSH
36600: LD_INT 34
36602: PUSH
36603: LD_INT 11
36605: PUSH
36606: EMPTY
36607: LIST
36608: LIST
36609: PUSH
36610: LD_INT 34
36612: PUSH
36613: LD_INT 30
36615: PUSH
36616: EMPTY
36617: LIST
36618: LIST
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: LIST
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PPUSH
36629: CALL_OW 69
36633: ST_TO_ADDR
// if not tmp then
36634: LD_VAR 0 2
36638: NOT
36639: IFFALSE 36643
// exit ;
36641: GO 36672
// for i in tmp do
36643: LD_ADDR_VAR 0 1
36647: PUSH
36648: LD_VAR 0 2
36652: PUSH
36653: FOR_IN
36654: IFFALSE 36670
// begin SetLives ( i , 0 ) ;
36656: LD_VAR 0 1
36660: PPUSH
36661: LD_INT 0
36663: PPUSH
36664: CALL_OW 234
// end ;
36668: GO 36653
36670: POP
36671: POP
// end ;
36672: PPOPN 2
36674: END
// every 0 0$1 trigger StreamModeActive and sBunker do
36675: LD_EXP 70
36679: PUSH
36680: LD_EXP 80
36684: AND
36685: IFFALSE 36705
36687: GO 36689
36689: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
36690: LD_INT 32
36692: PPUSH
36693: LD_OWVAR 2
36697: PPUSH
36698: LD_INT 0
36700: PPUSH
36701: CALL_OW 324
36705: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
36706: LD_EXP 70
36710: PUSH
36711: LD_EXP 81
36715: AND
36716: IFFALSE 36897
36718: GO 36720
36720: DISABLE
36721: LD_INT 0
36723: PPUSH
36724: PPUSH
36725: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
36726: LD_ADDR_VAR 0 2
36730: PUSH
36731: LD_INT 22
36733: PUSH
36734: LD_OWVAR 2
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 33
36745: PUSH
36746: LD_INT 3
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PPUSH
36757: CALL_OW 69
36761: ST_TO_ADDR
// if not tmp then
36762: LD_VAR 0 2
36766: NOT
36767: IFFALSE 36771
// exit ;
36769: GO 36897
// side := 0 ;
36771: LD_ADDR_VAR 0 3
36775: PUSH
36776: LD_INT 0
36778: ST_TO_ADDR
// for i := 1 to 8 do
36779: LD_ADDR_VAR 0 1
36783: PUSH
36784: DOUBLE
36785: LD_INT 1
36787: DEC
36788: ST_TO_ADDR
36789: LD_INT 8
36791: PUSH
36792: FOR_TO
36793: IFFALSE 36841
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
36795: LD_OWVAR 2
36799: PUSH
36800: LD_VAR 0 1
36804: NONEQUAL
36805: PUSH
36806: LD_OWVAR 2
36810: PPUSH
36811: LD_VAR 0 1
36815: PPUSH
36816: CALL_OW 81
36820: PUSH
36821: LD_INT 2
36823: EQUAL
36824: AND
36825: IFFALSE 36839
// begin side := i ;
36827: LD_ADDR_VAR 0 3
36831: PUSH
36832: LD_VAR 0 1
36836: ST_TO_ADDR
// break ;
36837: GO 36841
// end ;
36839: GO 36792
36841: POP
36842: POP
// if not side then
36843: LD_VAR 0 3
36847: NOT
36848: IFFALSE 36852
// exit ;
36850: GO 36897
// for i := 1 to tmp do
36852: LD_ADDR_VAR 0 1
36856: PUSH
36857: DOUBLE
36858: LD_INT 1
36860: DEC
36861: ST_TO_ADDR
36862: LD_VAR 0 2
36866: PUSH
36867: FOR_TO
36868: IFFALSE 36895
// if Prob ( 60 ) then
36870: LD_INT 60
36872: PPUSH
36873: CALL_OW 13
36877: IFFALSE 36893
// SetSide ( i , side ) ;
36879: LD_VAR 0 1
36883: PPUSH
36884: LD_VAR 0 3
36888: PPUSH
36889: CALL_OW 235
36893: GO 36867
36895: POP
36896: POP
// end ;
36897: PPOPN 3
36899: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
36900: LD_EXP 70
36904: PUSH
36905: LD_EXP 83
36909: AND
36910: IFFALSE 37029
36912: GO 36914
36914: DISABLE
36915: LD_INT 0
36917: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
36918: LD_ADDR_VAR 0 1
36922: PUSH
36923: LD_INT 22
36925: PUSH
36926: LD_OWVAR 2
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 21
36937: PUSH
36938: LD_INT 1
36940: PUSH
36941: EMPTY
36942: LIST
36943: LIST
36944: PUSH
36945: LD_INT 3
36947: PUSH
36948: LD_INT 23
36950: PUSH
36951: LD_INT 0
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: LIST
36966: PPUSH
36967: CALL_OW 69
36971: PUSH
36972: FOR_IN
36973: IFFALSE 37027
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
36975: LD_VAR 0 1
36979: PPUSH
36980: CALL_OW 257
36984: PUSH
36985: LD_INT 1
36987: PUSH
36988: LD_INT 2
36990: PUSH
36991: LD_INT 3
36993: PUSH
36994: LD_INT 4
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: IN
37003: IFFALSE 37025
// SetClass ( un , rand ( 1 , 4 ) ) ;
37005: LD_VAR 0 1
37009: PPUSH
37010: LD_INT 1
37012: PPUSH
37013: LD_INT 4
37015: PPUSH
37016: CALL_OW 12
37020: PPUSH
37021: CALL_OW 336
37025: GO 36972
37027: POP
37028: POP
// end ;
37029: PPOPN 1
37031: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
37032: LD_EXP 70
37036: PUSH
37037: LD_EXP 82
37041: AND
37042: IFFALSE 37121
37044: GO 37046
37046: DISABLE
37047: LD_INT 0
37049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37050: LD_ADDR_VAR 0 1
37054: PUSH
37055: LD_INT 22
37057: PUSH
37058: LD_OWVAR 2
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 21
37069: PUSH
37070: LD_INT 3
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PPUSH
37081: CALL_OW 69
37085: ST_TO_ADDR
// if not tmp then
37086: LD_VAR 0 1
37090: NOT
37091: IFFALSE 37095
// exit ;
37093: GO 37121
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
37095: LD_VAR 0 1
37099: PUSH
37100: LD_INT 1
37102: PPUSH
37103: LD_VAR 0 1
37107: PPUSH
37108: CALL_OW 12
37112: ARRAY
37113: PPUSH
37114: LD_INT 100
37116: PPUSH
37117: CALL_OW 234
// end ;
37121: PPOPN 1
37123: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
37124: LD_EXP 70
37128: PUSH
37129: LD_EXP 84
37133: AND
37134: IFFALSE 37232
37136: GO 37138
37138: DISABLE
37139: LD_INT 0
37141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37142: LD_ADDR_VAR 0 1
37146: PUSH
37147: LD_INT 22
37149: PUSH
37150: LD_OWVAR 2
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 21
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PPUSH
37173: CALL_OW 69
37177: ST_TO_ADDR
// if not tmp then
37178: LD_VAR 0 1
37182: NOT
37183: IFFALSE 37187
// exit ;
37185: GO 37232
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
37187: LD_VAR 0 1
37191: PUSH
37192: LD_INT 1
37194: PPUSH
37195: LD_VAR 0 1
37199: PPUSH
37200: CALL_OW 12
37204: ARRAY
37205: PPUSH
37206: LD_INT 1
37208: PPUSH
37209: LD_INT 4
37211: PPUSH
37212: CALL_OW 12
37216: PPUSH
37217: LD_INT 3000
37219: PPUSH
37220: LD_INT 9000
37222: PPUSH
37223: CALL_OW 12
37227: PPUSH
37228: CALL_OW 492
// end ;
37232: PPOPN 1
37234: END
// every 0 0$1 trigger StreamModeActive and sDepot do
37235: LD_EXP 70
37239: PUSH
37240: LD_EXP 85
37244: AND
37245: IFFALSE 37265
37247: GO 37249
37249: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
37250: LD_INT 1
37252: PPUSH
37253: LD_OWVAR 2
37257: PPUSH
37258: LD_INT 0
37260: PPUSH
37261: CALL_OW 324
37265: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
37266: LD_EXP 70
37270: PUSH
37271: LD_EXP 86
37275: AND
37276: IFFALSE 37359
37278: GO 37280
37280: DISABLE
37281: LD_INT 0
37283: PPUSH
37284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37285: LD_ADDR_VAR 0 2
37289: PUSH
37290: LD_INT 22
37292: PUSH
37293: LD_OWVAR 2
37297: PUSH
37298: EMPTY
37299: LIST
37300: LIST
37301: PUSH
37302: LD_INT 21
37304: PUSH
37305: LD_INT 3
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: EMPTY
37313: LIST
37314: LIST
37315: PPUSH
37316: CALL_OW 69
37320: ST_TO_ADDR
// if not tmp then
37321: LD_VAR 0 2
37325: NOT
37326: IFFALSE 37330
// exit ;
37328: GO 37359
// for i in tmp do
37330: LD_ADDR_VAR 0 1
37334: PUSH
37335: LD_VAR 0 2
37339: PUSH
37340: FOR_IN
37341: IFFALSE 37357
// SetBLevel ( i , 10 ) ;
37343: LD_VAR 0 1
37347: PPUSH
37348: LD_INT 10
37350: PPUSH
37351: CALL_OW 241
37355: GO 37340
37357: POP
37358: POP
// end ;
37359: PPOPN 2
37361: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
37362: LD_EXP 70
37366: PUSH
37367: LD_EXP 87
37371: AND
37372: IFFALSE 37483
37374: GO 37376
37376: DISABLE
37377: LD_INT 0
37379: PPUSH
37380: PPUSH
37381: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37382: LD_ADDR_VAR 0 3
37386: PUSH
37387: LD_INT 22
37389: PUSH
37390: LD_OWVAR 2
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 25
37401: PUSH
37402: LD_INT 1
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: EMPTY
37410: LIST
37411: LIST
37412: PPUSH
37413: CALL_OW 69
37417: ST_TO_ADDR
// if not tmp then
37418: LD_VAR 0 3
37422: NOT
37423: IFFALSE 37427
// exit ;
37425: GO 37483
// un := tmp [ rand ( 1 , tmp ) ] ;
37427: LD_ADDR_VAR 0 2
37431: PUSH
37432: LD_VAR 0 3
37436: PUSH
37437: LD_INT 1
37439: PPUSH
37440: LD_VAR 0 3
37444: PPUSH
37445: CALL_OW 12
37449: ARRAY
37450: ST_TO_ADDR
// if Crawls ( un ) then
37451: LD_VAR 0 2
37455: PPUSH
37456: CALL_OW 318
37460: IFFALSE 37471
// ComWalk ( un ) ;
37462: LD_VAR 0 2
37466: PPUSH
37467: CALL_OW 138
// SetClass ( un , class_sniper ) ;
37471: LD_VAR 0 2
37475: PPUSH
37476: LD_INT 5
37478: PPUSH
37479: CALL_OW 336
// end ;
37483: PPOPN 3
37485: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
37486: LD_EXP 70
37490: PUSH
37491: LD_EXP 88
37495: AND
37496: PUSH
37497: LD_OWVAR 67
37501: PUSH
37502: LD_INT 4
37504: LESS
37505: AND
37506: IFFALSE 37525
37508: GO 37510
37510: DISABLE
// begin Difficulty := Difficulty + 1 ;
37511: LD_ADDR_OWVAR 67
37515: PUSH
37516: LD_OWVAR 67
37520: PUSH
37521: LD_INT 1
37523: PLUS
37524: ST_TO_ADDR
// end ;
37525: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
37526: LD_EXP 70
37530: PUSH
37531: LD_EXP 89
37535: AND
37536: IFFALSE 37639
37538: GO 37540
37540: DISABLE
37541: LD_INT 0
37543: PPUSH
// begin for i := 1 to 5 do
37544: LD_ADDR_VAR 0 1
37548: PUSH
37549: DOUBLE
37550: LD_INT 1
37552: DEC
37553: ST_TO_ADDR
37554: LD_INT 5
37556: PUSH
37557: FOR_TO
37558: IFFALSE 37637
// begin uc_nation := nation_nature ;
37560: LD_ADDR_OWVAR 21
37564: PUSH
37565: LD_INT 0
37567: ST_TO_ADDR
// uc_side := 0 ;
37568: LD_ADDR_OWVAR 20
37572: PUSH
37573: LD_INT 0
37575: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37576: LD_ADDR_OWVAR 29
37580: PUSH
37581: LD_INT 12
37583: PUSH
37584: LD_INT 12
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: ST_TO_ADDR
// hc_agressivity := 20 ;
37591: LD_ADDR_OWVAR 35
37595: PUSH
37596: LD_INT 20
37598: ST_TO_ADDR
// hc_class := class_tiger ;
37599: LD_ADDR_OWVAR 28
37603: PUSH
37604: LD_INT 14
37606: ST_TO_ADDR
// hc_gallery :=  ;
37607: LD_ADDR_OWVAR 33
37611: PUSH
37612: LD_STRING 
37614: ST_TO_ADDR
// hc_name :=  ;
37615: LD_ADDR_OWVAR 26
37619: PUSH
37620: LD_STRING 
37622: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
37623: CALL_OW 44
37627: PPUSH
37628: LD_INT 0
37630: PPUSH
37631: CALL_OW 51
// end ;
37635: GO 37557
37637: POP
37638: POP
// end ;
37639: PPOPN 1
37641: END
// every 0 0$1 trigger StreamModeActive and sBomb do
37642: LD_EXP 70
37646: PUSH
37647: LD_EXP 90
37651: AND
37652: IFFALSE 37661
37654: GO 37656
37656: DISABLE
// StreamSibBomb ;
37657: CALL 37662 0 0
37661: END
// export function StreamSibBomb ; var i , x , y ; begin
37662: LD_INT 0
37664: PPUSH
37665: PPUSH
37666: PPUSH
37667: PPUSH
// result := false ;
37668: LD_ADDR_VAR 0 1
37672: PUSH
37673: LD_INT 0
37675: ST_TO_ADDR
// for i := 1 to 16 do
37676: LD_ADDR_VAR 0 2
37680: PUSH
37681: DOUBLE
37682: LD_INT 1
37684: DEC
37685: ST_TO_ADDR
37686: LD_INT 16
37688: PUSH
37689: FOR_TO
37690: IFFALSE 37889
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
37692: LD_ADDR_VAR 0 3
37696: PUSH
37697: LD_INT 10
37699: PUSH
37700: LD_INT 20
37702: PUSH
37703: LD_INT 30
37705: PUSH
37706: LD_INT 40
37708: PUSH
37709: LD_INT 50
37711: PUSH
37712: LD_INT 60
37714: PUSH
37715: LD_INT 70
37717: PUSH
37718: LD_INT 80
37720: PUSH
37721: LD_INT 90
37723: PUSH
37724: LD_INT 100
37726: PUSH
37727: LD_INT 110
37729: PUSH
37730: LD_INT 120
37732: PUSH
37733: LD_INT 130
37735: PUSH
37736: LD_INT 140
37738: PUSH
37739: LD_INT 150
37741: PUSH
37742: EMPTY
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 1
37761: PPUSH
37762: LD_INT 15
37764: PPUSH
37765: CALL_OW 12
37769: ARRAY
37770: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
37771: LD_ADDR_VAR 0 4
37775: PUSH
37776: LD_INT 10
37778: PUSH
37779: LD_INT 20
37781: PUSH
37782: LD_INT 30
37784: PUSH
37785: LD_INT 40
37787: PUSH
37788: LD_INT 50
37790: PUSH
37791: LD_INT 60
37793: PUSH
37794: LD_INT 70
37796: PUSH
37797: LD_INT 80
37799: PUSH
37800: LD_INT 90
37802: PUSH
37803: LD_INT 100
37805: PUSH
37806: LD_INT 110
37808: PUSH
37809: LD_INT 120
37811: PUSH
37812: LD_INT 130
37814: PUSH
37815: LD_INT 140
37817: PUSH
37818: LD_INT 150
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 1
37840: PPUSH
37841: LD_INT 15
37843: PPUSH
37844: CALL_OW 12
37848: ARRAY
37849: ST_TO_ADDR
// if ValidHex ( x , y ) then
37850: LD_VAR 0 3
37854: PPUSH
37855: LD_VAR 0 4
37859: PPUSH
37860: CALL_OW 488
37864: IFFALSE 37887
// begin result := [ x , y ] ;
37866: LD_ADDR_VAR 0 1
37870: PUSH
37871: LD_VAR 0 3
37875: PUSH
37876: LD_VAR 0 4
37880: PUSH
37881: EMPTY
37882: LIST
37883: LIST
37884: ST_TO_ADDR
// break ;
37885: GO 37889
// end ; end ;
37887: GO 37689
37889: POP
37890: POP
// if result then
37891: LD_VAR 0 1
37895: IFFALSE 37955
// begin ToLua ( playSibBomb() ) ;
37897: LD_STRING playSibBomb()
37899: PPUSH
37900: CALL_OW 559
// wait ( 0 0$14 ) ;
37904: LD_INT 490
37906: PPUSH
37907: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
37911: LD_VAR 0 1
37915: PUSH
37916: LD_INT 1
37918: ARRAY
37919: PPUSH
37920: LD_VAR 0 1
37924: PUSH
37925: LD_INT 2
37927: ARRAY
37928: PPUSH
37929: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
37933: LD_VAR 0 1
37937: PUSH
37938: LD_INT 1
37940: ARRAY
37941: PPUSH
37942: LD_VAR 0 1
37946: PUSH
37947: LD_INT 2
37949: ARRAY
37950: PPUSH
37951: CALL_OW 429
// end ; end ;
37955: LD_VAR 0 1
37959: RET
// every 0 0$1 trigger StreamModeActive and sReset do
37960: LD_EXP 70
37964: PUSH
37965: LD_EXP 92
37969: AND
37970: IFFALSE 37982
37972: GO 37974
37974: DISABLE
// YouLost (  ) ;
37975: LD_STRING 
37977: PPUSH
37978: CALL_OW 104
37982: END
// every 0 0$1 trigger StreamModeActive and sFog do
37983: LD_EXP 70
37987: PUSH
37988: LD_EXP 91
37992: AND
37993: IFFALSE 38007
37995: GO 37997
37997: DISABLE
// FogOff ( your_side ) ;
37998: LD_OWVAR 2
38002: PPUSH
38003: CALL_OW 344
38007: END
// every 0 0$1 trigger StreamModeActive and sSun do
38008: LD_EXP 70
38012: PUSH
38013: LD_EXP 93
38017: AND
38018: IFFALSE 38046
38020: GO 38022
38022: DISABLE
// begin solar_recharge_percent := 0 ;
38023: LD_ADDR_OWVAR 79
38027: PUSH
38028: LD_INT 0
38030: ST_TO_ADDR
// wait ( 5 5$00 ) ;
38031: LD_INT 10500
38033: PPUSH
38034: CALL_OW 67
// solar_recharge_percent := 100 ;
38038: LD_ADDR_OWVAR 79
38042: PUSH
38043: LD_INT 100
38045: ST_TO_ADDR
// end ;
38046: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
38047: LD_EXP 70
38051: PUSH
38052: LD_EXP 94
38056: AND
38057: IFFALSE 38296
38059: GO 38061
38061: DISABLE
38062: LD_INT 0
38064: PPUSH
38065: PPUSH
38066: PPUSH
// begin tmp := [ ] ;
38067: LD_ADDR_VAR 0 3
38071: PUSH
38072: EMPTY
38073: ST_TO_ADDR
// for i := 1 to 6 do
38074: LD_ADDR_VAR 0 1
38078: PUSH
38079: DOUBLE
38080: LD_INT 1
38082: DEC
38083: ST_TO_ADDR
38084: LD_INT 6
38086: PUSH
38087: FOR_TO
38088: IFFALSE 38193
// begin uc_nation := nation_nature ;
38090: LD_ADDR_OWVAR 21
38094: PUSH
38095: LD_INT 0
38097: ST_TO_ADDR
// uc_side := 0 ;
38098: LD_ADDR_OWVAR 20
38102: PUSH
38103: LD_INT 0
38105: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
38106: LD_ADDR_OWVAR 29
38110: PUSH
38111: LD_INT 12
38113: PUSH
38114: LD_INT 12
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: ST_TO_ADDR
// hc_agressivity := 20 ;
38121: LD_ADDR_OWVAR 35
38125: PUSH
38126: LD_INT 20
38128: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
38129: LD_ADDR_OWVAR 28
38133: PUSH
38134: LD_INT 17
38136: ST_TO_ADDR
// hc_gallery :=  ;
38137: LD_ADDR_OWVAR 33
38141: PUSH
38142: LD_STRING 
38144: ST_TO_ADDR
// hc_name :=  ;
38145: LD_ADDR_OWVAR 26
38149: PUSH
38150: LD_STRING 
38152: ST_TO_ADDR
// un := CreateHuman ;
38153: LD_ADDR_VAR 0 2
38157: PUSH
38158: CALL_OW 44
38162: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
38163: LD_VAR 0 2
38167: PPUSH
38168: LD_INT 1
38170: PPUSH
38171: CALL_OW 51
// tmp := tmp ^ un ;
38175: LD_ADDR_VAR 0 3
38179: PUSH
38180: LD_VAR 0 3
38184: PUSH
38185: LD_VAR 0 2
38189: ADD
38190: ST_TO_ADDR
// end ;
38191: GO 38087
38193: POP
38194: POP
// repeat wait ( 0 0$1 ) ;
38195: LD_INT 35
38197: PPUSH
38198: CALL_OW 67
// for un in tmp do
38202: LD_ADDR_VAR 0 2
38206: PUSH
38207: LD_VAR 0 3
38211: PUSH
38212: FOR_IN
38213: IFFALSE 38287
// begin if IsDead ( un ) then
38215: LD_VAR 0 2
38219: PPUSH
38220: CALL_OW 301
38224: IFFALSE 38244
// begin tmp := tmp diff un ;
38226: LD_ADDR_VAR 0 3
38230: PUSH
38231: LD_VAR 0 3
38235: PUSH
38236: LD_VAR 0 2
38240: DIFF
38241: ST_TO_ADDR
// continue ;
38242: GO 38212
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
38244: LD_VAR 0 2
38248: PPUSH
38249: LD_INT 3
38251: PUSH
38252: LD_INT 22
38254: PUSH
38255: LD_INT 0
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PPUSH
38266: CALL_OW 69
38270: PPUSH
38271: LD_VAR 0 2
38275: PPUSH
38276: CALL_OW 74
38280: PPUSH
38281: CALL_OW 115
// end ;
38285: GO 38212
38287: POP
38288: POP
// until not tmp ;
38289: LD_VAR 0 3
38293: NOT
38294: IFFALSE 38195
// end ;
38296: PPOPN 3
38298: END
// every 0 0$1 trigger StreamModeActive and sTroll do
38299: LD_EXP 70
38303: PUSH
38304: LD_EXP 95
38308: AND
38309: IFFALSE 38363
38311: GO 38313
38313: DISABLE
// begin ToLua ( displayTroll(); ) ;
38314: LD_STRING displayTroll();
38316: PPUSH
38317: CALL_OW 559
// wait ( 3 3$00 ) ;
38321: LD_INT 6300
38323: PPUSH
38324: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38328: LD_STRING hideTroll();
38330: PPUSH
38331: CALL_OW 559
// wait ( 1 1$00 ) ;
38335: LD_INT 2100
38337: PPUSH
38338: CALL_OW 67
// ToLua ( displayTroll(); ) ;
38342: LD_STRING displayTroll();
38344: PPUSH
38345: CALL_OW 559
// wait ( 1 1$00 ) ;
38349: LD_INT 2100
38351: PPUSH
38352: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38356: LD_STRING hideTroll();
38358: PPUSH
38359: CALL_OW 559
// end ;
38363: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
38364: LD_EXP 70
38368: PUSH
38369: LD_EXP 96
38373: AND
38374: IFFALSE 38437
38376: GO 38378
38378: DISABLE
38379: LD_INT 0
38381: PPUSH
// begin p := 0 ;
38382: LD_ADDR_VAR 0 1
38386: PUSH
38387: LD_INT 0
38389: ST_TO_ADDR
// repeat game_speed := 1 ;
38390: LD_ADDR_OWVAR 65
38394: PUSH
38395: LD_INT 1
38397: ST_TO_ADDR
// wait ( 0 0$1 ) ;
38398: LD_INT 35
38400: PPUSH
38401: CALL_OW 67
// p := p + 1 ;
38405: LD_ADDR_VAR 0 1
38409: PUSH
38410: LD_VAR 0 1
38414: PUSH
38415: LD_INT 1
38417: PLUS
38418: ST_TO_ADDR
// until p >= 60 ;
38419: LD_VAR 0 1
38423: PUSH
38424: LD_INT 60
38426: GREATEREQUAL
38427: IFFALSE 38390
// game_speed := 4 ;
38429: LD_ADDR_OWVAR 65
38433: PUSH
38434: LD_INT 4
38436: ST_TO_ADDR
// end ;
38437: PPOPN 1
38439: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
38440: LD_EXP 70
38444: PUSH
38445: LD_EXP 97
38449: AND
38450: IFFALSE 38596
38452: GO 38454
38454: DISABLE
38455: LD_INT 0
38457: PPUSH
38458: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38459: LD_ADDR_VAR 0 1
38463: PUSH
38464: LD_INT 22
38466: PUSH
38467: LD_OWVAR 2
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 2
38478: PUSH
38479: LD_INT 30
38481: PUSH
38482: LD_INT 0
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 30
38491: PUSH
38492: LD_INT 1
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: EMPTY
38500: LIST
38501: LIST
38502: LIST
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PPUSH
38508: CALL_OW 69
38512: ST_TO_ADDR
// if not depot then
38513: LD_VAR 0 1
38517: NOT
38518: IFFALSE 38522
// exit ;
38520: GO 38596
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
38522: LD_ADDR_VAR 0 2
38526: PUSH
38527: LD_VAR 0 1
38531: PUSH
38532: LD_INT 1
38534: PPUSH
38535: LD_VAR 0 1
38539: PPUSH
38540: CALL_OW 12
38544: ARRAY
38545: PPUSH
38546: CALL_OW 274
38550: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
38551: LD_VAR 0 2
38555: PPUSH
38556: LD_INT 1
38558: PPUSH
38559: LD_INT 0
38561: PPUSH
38562: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
38566: LD_VAR 0 2
38570: PPUSH
38571: LD_INT 2
38573: PPUSH
38574: LD_INT 0
38576: PPUSH
38577: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
38581: LD_VAR 0 2
38585: PPUSH
38586: LD_INT 3
38588: PPUSH
38589: LD_INT 0
38591: PPUSH
38592: CALL_OW 277
// end ;
38596: PPOPN 2
38598: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
38599: LD_EXP 70
38603: PUSH
38604: LD_EXP 98
38608: AND
38609: IFFALSE 38706
38611: GO 38613
38613: DISABLE
38614: LD_INT 0
38616: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38617: LD_ADDR_VAR 0 1
38621: PUSH
38622: LD_INT 22
38624: PUSH
38625: LD_OWVAR 2
38629: PUSH
38630: EMPTY
38631: LIST
38632: LIST
38633: PUSH
38634: LD_INT 21
38636: PUSH
38637: LD_INT 1
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: PUSH
38644: LD_INT 3
38646: PUSH
38647: LD_INT 23
38649: PUSH
38650: LD_INT 0
38652: PUSH
38653: EMPTY
38654: LIST
38655: LIST
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: LIST
38665: PPUSH
38666: CALL_OW 69
38670: ST_TO_ADDR
// if not tmp then
38671: LD_VAR 0 1
38675: NOT
38676: IFFALSE 38680
// exit ;
38678: GO 38706
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
38680: LD_VAR 0 1
38684: PUSH
38685: LD_INT 1
38687: PPUSH
38688: LD_VAR 0 1
38692: PPUSH
38693: CALL_OW 12
38697: ARRAY
38698: PPUSH
38699: LD_INT 200
38701: PPUSH
38702: CALL_OW 234
// end ;
38706: PPOPN 1
38708: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
38709: LD_EXP 70
38713: PUSH
38714: LD_EXP 99
38718: AND
38719: IFFALSE 38798
38721: GO 38723
38723: DISABLE
38724: LD_INT 0
38726: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
38727: LD_ADDR_VAR 0 1
38731: PUSH
38732: LD_INT 22
38734: PUSH
38735: LD_OWVAR 2
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 21
38746: PUSH
38747: LD_INT 2
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PPUSH
38758: CALL_OW 69
38762: ST_TO_ADDR
// if not tmp then
38763: LD_VAR 0 1
38767: NOT
38768: IFFALSE 38772
// exit ;
38770: GO 38798
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
38772: LD_VAR 0 1
38776: PUSH
38777: LD_INT 1
38779: PPUSH
38780: LD_VAR 0 1
38784: PPUSH
38785: CALL_OW 12
38789: ARRAY
38790: PPUSH
38791: LD_INT 60
38793: PPUSH
38794: CALL_OW 234
// end ;
38798: PPOPN 1
38800: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
38801: LD_EXP 70
38805: PUSH
38806: LD_EXP 100
38810: AND
38811: IFFALSE 38910
38813: GO 38815
38815: DISABLE
38816: LD_INT 0
38818: PPUSH
38819: PPUSH
// begin enable ;
38820: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
38821: LD_ADDR_VAR 0 1
38825: PUSH
38826: LD_INT 22
38828: PUSH
38829: LD_OWVAR 2
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 61
38840: PUSH
38841: EMPTY
38842: LIST
38843: PUSH
38844: LD_INT 33
38846: PUSH
38847: LD_INT 2
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: LIST
38858: PPUSH
38859: CALL_OW 69
38863: ST_TO_ADDR
// if not tmp then
38864: LD_VAR 0 1
38868: NOT
38869: IFFALSE 38873
// exit ;
38871: GO 38910
// for i in tmp do
38873: LD_ADDR_VAR 0 2
38877: PUSH
38878: LD_VAR 0 1
38882: PUSH
38883: FOR_IN
38884: IFFALSE 38908
// if IsControledBy ( i ) then
38886: LD_VAR 0 2
38890: PPUSH
38891: CALL_OW 312
38895: IFFALSE 38906
// ComUnlink ( i ) ;
38897: LD_VAR 0 2
38901: PPUSH
38902: CALL_OW 136
38906: GO 38883
38908: POP
38909: POP
// end ;
38910: PPOPN 2
38912: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
38913: LD_EXP 70
38917: PUSH
38918: LD_EXP 101
38922: AND
38923: IFFALSE 39063
38925: GO 38927
38927: DISABLE
38928: LD_INT 0
38930: PPUSH
38931: PPUSH
// begin ToLua ( displayPowell(); ) ;
38932: LD_STRING displayPowell();
38934: PPUSH
38935: CALL_OW 559
// uc_side := 0 ;
38939: LD_ADDR_OWVAR 20
38943: PUSH
38944: LD_INT 0
38946: ST_TO_ADDR
// uc_nation := 2 ;
38947: LD_ADDR_OWVAR 21
38951: PUSH
38952: LD_INT 2
38954: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
38955: LD_ADDR_OWVAR 37
38959: PUSH
38960: LD_INT 14
38962: ST_TO_ADDR
// vc_engine := engine_siberite ;
38963: LD_ADDR_OWVAR 39
38967: PUSH
38968: LD_INT 3
38970: ST_TO_ADDR
// vc_control := control_apeman ;
38971: LD_ADDR_OWVAR 38
38975: PUSH
38976: LD_INT 5
38978: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
38979: LD_ADDR_OWVAR 40
38983: PUSH
38984: LD_INT 29
38986: ST_TO_ADDR
// un := CreateVehicle ;
38987: LD_ADDR_VAR 0 2
38991: PUSH
38992: CALL_OW 45
38996: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
38997: LD_VAR 0 2
39001: PPUSH
39002: LD_INT 1
39004: PPUSH
39005: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
39009: LD_INT 35
39011: PPUSH
39012: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
39016: LD_VAR 0 2
39020: PPUSH
39021: LD_INT 22
39023: PUSH
39024: LD_OWVAR 2
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PPUSH
39033: CALL_OW 69
39037: PPUSH
39038: LD_VAR 0 2
39042: PPUSH
39043: CALL_OW 74
39047: PPUSH
39048: CALL_OW 115
// until IsDead ( un ) ;
39052: LD_VAR 0 2
39056: PPUSH
39057: CALL_OW 301
39061: IFFALSE 39009
// end ;
39063: PPOPN 2
39065: END
// every 0 0$1 trigger StreamModeActive and sStu do
39066: LD_EXP 70
39070: PUSH
39071: LD_EXP 109
39075: AND
39076: IFFALSE 39092
39078: GO 39080
39080: DISABLE
// begin ToLua ( displayStucuk(); ) ;
39081: LD_STRING displayStucuk();
39083: PPUSH
39084: CALL_OW 559
// ResetFog ;
39088: CALL_OW 335
// end ;
39092: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
39093: LD_EXP 70
39097: PUSH
39098: LD_EXP 102
39102: AND
39103: IFFALSE 39244
39105: GO 39107
39107: DISABLE
39108: LD_INT 0
39110: PPUSH
39111: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
39112: LD_ADDR_VAR 0 2
39116: PUSH
39117: LD_INT 22
39119: PUSH
39120: LD_OWVAR 2
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 21
39131: PUSH
39132: LD_INT 1
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PPUSH
39143: CALL_OW 69
39147: ST_TO_ADDR
// if not tmp then
39148: LD_VAR 0 2
39152: NOT
39153: IFFALSE 39157
// exit ;
39155: GO 39244
// un := tmp [ rand ( 1 , tmp ) ] ;
39157: LD_ADDR_VAR 0 1
39161: PUSH
39162: LD_VAR 0 2
39166: PUSH
39167: LD_INT 1
39169: PPUSH
39170: LD_VAR 0 2
39174: PPUSH
39175: CALL_OW 12
39179: ARRAY
39180: ST_TO_ADDR
// SetSide ( un , 0 ) ;
39181: LD_VAR 0 1
39185: PPUSH
39186: LD_INT 0
39188: PPUSH
39189: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
39193: LD_VAR 0 1
39197: PPUSH
39198: LD_OWVAR 3
39202: PUSH
39203: LD_VAR 0 1
39207: DIFF
39208: PPUSH
39209: LD_VAR 0 1
39213: PPUSH
39214: CALL_OW 74
39218: PPUSH
39219: CALL_OW 115
// wait ( 0 0$20 ) ;
39223: LD_INT 700
39225: PPUSH
39226: CALL_OW 67
// SetSide ( un , your_side ) ;
39230: LD_VAR 0 1
39234: PPUSH
39235: LD_OWVAR 2
39239: PPUSH
39240: CALL_OW 235
// end ;
39244: PPOPN 2
39246: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
39247: LD_EXP 70
39251: PUSH
39252: LD_EXP 103
39256: AND
39257: IFFALSE 39363
39259: GO 39261
39261: DISABLE
39262: LD_INT 0
39264: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39265: LD_ADDR_VAR 0 1
39269: PUSH
39270: LD_INT 22
39272: PUSH
39273: LD_OWVAR 2
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 2
39284: PUSH
39285: LD_INT 30
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 30
39297: PUSH
39298: LD_INT 1
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: LIST
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PPUSH
39314: CALL_OW 69
39318: ST_TO_ADDR
// if not depot then
39319: LD_VAR 0 1
39323: NOT
39324: IFFALSE 39328
// exit ;
39326: GO 39363
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
39328: LD_VAR 0 1
39332: PUSH
39333: LD_INT 1
39335: ARRAY
39336: PPUSH
39337: CALL_OW 250
39341: PPUSH
39342: LD_VAR 0 1
39346: PUSH
39347: LD_INT 1
39349: ARRAY
39350: PPUSH
39351: CALL_OW 251
39355: PPUSH
39356: LD_INT 70
39358: PPUSH
39359: CALL_OW 495
// end ;
39363: PPOPN 1
39365: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
39366: LD_EXP 70
39370: PUSH
39371: LD_EXP 104
39375: AND
39376: IFFALSE 39587
39378: GO 39380
39380: DISABLE
39381: LD_INT 0
39383: PPUSH
39384: PPUSH
39385: PPUSH
39386: PPUSH
39387: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
39388: LD_ADDR_VAR 0 5
39392: PUSH
39393: LD_INT 22
39395: PUSH
39396: LD_OWVAR 2
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 21
39407: PUSH
39408: LD_INT 1
39410: PUSH
39411: EMPTY
39412: LIST
39413: LIST
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PPUSH
39419: CALL_OW 69
39423: ST_TO_ADDR
// if not tmp then
39424: LD_VAR 0 5
39428: NOT
39429: IFFALSE 39433
// exit ;
39431: GO 39587
// for i in tmp do
39433: LD_ADDR_VAR 0 1
39437: PUSH
39438: LD_VAR 0 5
39442: PUSH
39443: FOR_IN
39444: IFFALSE 39585
// begin d := rand ( 0 , 5 ) ;
39446: LD_ADDR_VAR 0 4
39450: PUSH
39451: LD_INT 0
39453: PPUSH
39454: LD_INT 5
39456: PPUSH
39457: CALL_OW 12
39461: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
39462: LD_ADDR_VAR 0 2
39466: PUSH
39467: LD_VAR 0 1
39471: PPUSH
39472: CALL_OW 250
39476: PPUSH
39477: LD_VAR 0 4
39481: PPUSH
39482: LD_INT 3
39484: PPUSH
39485: LD_INT 12
39487: PPUSH
39488: CALL_OW 12
39492: PPUSH
39493: CALL_OW 272
39497: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
39498: LD_ADDR_VAR 0 3
39502: PUSH
39503: LD_VAR 0 1
39507: PPUSH
39508: CALL_OW 251
39512: PPUSH
39513: LD_VAR 0 4
39517: PPUSH
39518: LD_INT 3
39520: PPUSH
39521: LD_INT 12
39523: PPUSH
39524: CALL_OW 12
39528: PPUSH
39529: CALL_OW 273
39533: ST_TO_ADDR
// if ValidHex ( x , y ) then
39534: LD_VAR 0 2
39538: PPUSH
39539: LD_VAR 0 3
39543: PPUSH
39544: CALL_OW 488
39548: IFFALSE 39583
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
39550: LD_VAR 0 1
39554: PPUSH
39555: LD_VAR 0 2
39559: PPUSH
39560: LD_VAR 0 3
39564: PPUSH
39565: LD_INT 3
39567: PPUSH
39568: LD_INT 6
39570: PPUSH
39571: CALL_OW 12
39575: PPUSH
39576: LD_INT 1
39578: PPUSH
39579: CALL_OW 483
// end ;
39583: GO 39443
39585: POP
39586: POP
// end ;
39587: PPOPN 5
39589: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
39590: LD_EXP 70
39594: PUSH
39595: LD_EXP 105
39599: AND
39600: IFFALSE 39694
39602: GO 39604
39604: DISABLE
39605: LD_INT 0
39607: PPUSH
39608: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
39609: LD_ADDR_VAR 0 2
39613: PUSH
39614: LD_INT 22
39616: PUSH
39617: LD_OWVAR 2
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 32
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 21
39638: PUSH
39639: LD_INT 2
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: EMPTY
39647: LIST
39648: LIST
39649: LIST
39650: PPUSH
39651: CALL_OW 69
39655: ST_TO_ADDR
// if not tmp then
39656: LD_VAR 0 2
39660: NOT
39661: IFFALSE 39665
// exit ;
39663: GO 39694
// for i in tmp do
39665: LD_ADDR_VAR 0 1
39669: PUSH
39670: LD_VAR 0 2
39674: PUSH
39675: FOR_IN
39676: IFFALSE 39692
// SetFuel ( i , 0 ) ;
39678: LD_VAR 0 1
39682: PPUSH
39683: LD_INT 0
39685: PPUSH
39686: CALL_OW 240
39690: GO 39675
39692: POP
39693: POP
// end ;
39694: PPOPN 2
39696: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
39697: LD_EXP 70
39701: PUSH
39702: LD_EXP 106
39706: AND
39707: IFFALSE 39773
39709: GO 39711
39711: DISABLE
39712: LD_INT 0
39714: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
39715: LD_ADDR_VAR 0 1
39719: PUSH
39720: LD_INT 22
39722: PUSH
39723: LD_OWVAR 2
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 30
39734: PUSH
39735: LD_INT 29
39737: PUSH
39738: EMPTY
39739: LIST
39740: LIST
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PPUSH
39746: CALL_OW 69
39750: ST_TO_ADDR
// if not tmp then
39751: LD_VAR 0 1
39755: NOT
39756: IFFALSE 39760
// exit ;
39758: GO 39773
// DestroyUnit ( tmp [ 1 ] ) ;
39760: LD_VAR 0 1
39764: PUSH
39765: LD_INT 1
39767: ARRAY
39768: PPUSH
39769: CALL_OW 65
// end ;
39773: PPOPN 1
39775: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
39776: LD_EXP 70
39780: PUSH
39781: LD_EXP 108
39785: AND
39786: IFFALSE 39915
39788: GO 39790
39790: DISABLE
39791: LD_INT 0
39793: PPUSH
// begin uc_side := 0 ;
39794: LD_ADDR_OWVAR 20
39798: PUSH
39799: LD_INT 0
39801: ST_TO_ADDR
// uc_nation := nation_arabian ;
39802: LD_ADDR_OWVAR 21
39806: PUSH
39807: LD_INT 2
39809: ST_TO_ADDR
// hc_gallery :=  ;
39810: LD_ADDR_OWVAR 33
39814: PUSH
39815: LD_STRING 
39817: ST_TO_ADDR
// hc_name :=  ;
39818: LD_ADDR_OWVAR 26
39822: PUSH
39823: LD_STRING 
39825: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
39826: LD_INT 1
39828: PPUSH
39829: LD_INT 11
39831: PPUSH
39832: LD_INT 10
39834: PPUSH
39835: CALL_OW 380
// un := CreateHuman ;
39839: LD_ADDR_VAR 0 1
39843: PUSH
39844: CALL_OW 44
39848: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39849: LD_VAR 0 1
39853: PPUSH
39854: LD_INT 1
39856: PPUSH
39857: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
39861: LD_INT 35
39863: PPUSH
39864: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
39868: LD_VAR 0 1
39872: PPUSH
39873: LD_INT 22
39875: PUSH
39876: LD_OWVAR 2
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PPUSH
39885: CALL_OW 69
39889: PPUSH
39890: LD_VAR 0 1
39894: PPUSH
39895: CALL_OW 74
39899: PPUSH
39900: CALL_OW 115
// until IsDead ( un ) ;
39904: LD_VAR 0 1
39908: PPUSH
39909: CALL_OW 301
39913: IFFALSE 39861
// end ;
39915: PPOPN 1
39917: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
39918: LD_EXP 70
39922: PUSH
39923: LD_EXP 110
39927: AND
39928: IFFALSE 39940
39930: GO 39932
39932: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
39933: LD_STRING earthquake(getX(game), 0, 32)
39935: PPUSH
39936: CALL_OW 559
39940: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
39941: LD_EXP 70
39945: PUSH
39946: LD_EXP 111
39950: AND
39951: IFFALSE 40042
39953: GO 39955
39955: DISABLE
39956: LD_INT 0
39958: PPUSH
// begin enable ;
39959: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
39960: LD_ADDR_VAR 0 1
39964: PUSH
39965: LD_INT 22
39967: PUSH
39968: LD_OWVAR 2
39972: PUSH
39973: EMPTY
39974: LIST
39975: LIST
39976: PUSH
39977: LD_INT 21
39979: PUSH
39980: LD_INT 2
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 33
39989: PUSH
39990: LD_INT 3
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: LIST
40001: PPUSH
40002: CALL_OW 69
40006: ST_TO_ADDR
// if not tmp then
40007: LD_VAR 0 1
40011: NOT
40012: IFFALSE 40016
// exit ;
40014: GO 40042
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
40016: LD_VAR 0 1
40020: PUSH
40021: LD_INT 1
40023: PPUSH
40024: LD_VAR 0 1
40028: PPUSH
40029: CALL_OW 12
40033: ARRAY
40034: PPUSH
40035: LD_INT 1
40037: PPUSH
40038: CALL_OW 234
// end ;
40042: PPOPN 1
40044: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
40045: LD_EXP 70
40049: PUSH
40050: LD_EXP 112
40054: AND
40055: IFFALSE 40196
40057: GO 40059
40059: DISABLE
40060: LD_INT 0
40062: PPUSH
40063: PPUSH
40064: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40065: LD_ADDR_VAR 0 3
40069: PUSH
40070: LD_INT 22
40072: PUSH
40073: LD_OWVAR 2
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 25
40084: PUSH
40085: LD_INT 1
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PPUSH
40096: CALL_OW 69
40100: ST_TO_ADDR
// if not tmp then
40101: LD_VAR 0 3
40105: NOT
40106: IFFALSE 40110
// exit ;
40108: GO 40196
// un := tmp [ rand ( 1 , tmp ) ] ;
40110: LD_ADDR_VAR 0 2
40114: PUSH
40115: LD_VAR 0 3
40119: PUSH
40120: LD_INT 1
40122: PPUSH
40123: LD_VAR 0 3
40127: PPUSH
40128: CALL_OW 12
40132: ARRAY
40133: ST_TO_ADDR
// if Crawls ( un ) then
40134: LD_VAR 0 2
40138: PPUSH
40139: CALL_OW 318
40143: IFFALSE 40154
// ComWalk ( un ) ;
40145: LD_VAR 0 2
40149: PPUSH
40150: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
40154: LD_VAR 0 2
40158: PPUSH
40159: LD_INT 9
40161: PPUSH
40162: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
40166: LD_INT 28
40168: PPUSH
40169: LD_OWVAR 2
40173: PPUSH
40174: LD_INT 2
40176: PPUSH
40177: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
40181: LD_INT 29
40183: PPUSH
40184: LD_OWVAR 2
40188: PPUSH
40189: LD_INT 2
40191: PPUSH
40192: CALL_OW 322
// end ;
40196: PPOPN 3
40198: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
40199: LD_EXP 70
40203: PUSH
40204: LD_EXP 113
40208: AND
40209: IFFALSE 40320
40211: GO 40213
40213: DISABLE
40214: LD_INT 0
40216: PPUSH
40217: PPUSH
40218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40219: LD_ADDR_VAR 0 3
40223: PUSH
40224: LD_INT 22
40226: PUSH
40227: LD_OWVAR 2
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 25
40238: PUSH
40239: LD_INT 1
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PPUSH
40250: CALL_OW 69
40254: ST_TO_ADDR
// if not tmp then
40255: LD_VAR 0 3
40259: NOT
40260: IFFALSE 40264
// exit ;
40262: GO 40320
// un := tmp [ rand ( 1 , tmp ) ] ;
40264: LD_ADDR_VAR 0 2
40268: PUSH
40269: LD_VAR 0 3
40273: PUSH
40274: LD_INT 1
40276: PPUSH
40277: LD_VAR 0 3
40281: PPUSH
40282: CALL_OW 12
40286: ARRAY
40287: ST_TO_ADDR
// if Crawls ( un ) then
40288: LD_VAR 0 2
40292: PPUSH
40293: CALL_OW 318
40297: IFFALSE 40308
// ComWalk ( un ) ;
40299: LD_VAR 0 2
40303: PPUSH
40304: CALL_OW 138
// SetClass ( un , class_mortar ) ;
40308: LD_VAR 0 2
40312: PPUSH
40313: LD_INT 8
40315: PPUSH
40316: CALL_OW 336
// end ;
40320: PPOPN 3
40322: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
40323: LD_EXP 70
40327: PUSH
40328: LD_EXP 114
40332: AND
40333: IFFALSE 40477
40335: GO 40337
40337: DISABLE
40338: LD_INT 0
40340: PPUSH
40341: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
40342: LD_ADDR_VAR 0 2
40346: PUSH
40347: LD_INT 22
40349: PUSH
40350: LD_OWVAR 2
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 21
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 2
40371: PUSH
40372: LD_INT 34
40374: PUSH
40375: LD_INT 12
40377: PUSH
40378: EMPTY
40379: LIST
40380: LIST
40381: PUSH
40382: LD_INT 34
40384: PUSH
40385: LD_INT 51
40387: PUSH
40388: EMPTY
40389: LIST
40390: LIST
40391: PUSH
40392: LD_INT 34
40394: PUSH
40395: LD_INT 32
40397: PUSH
40398: EMPTY
40399: LIST
40400: LIST
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: LIST
40412: PPUSH
40413: CALL_OW 69
40417: ST_TO_ADDR
// if not tmp then
40418: LD_VAR 0 2
40422: NOT
40423: IFFALSE 40427
// exit ;
40425: GO 40477
// for i in tmp do
40427: LD_ADDR_VAR 0 1
40431: PUSH
40432: LD_VAR 0 2
40436: PUSH
40437: FOR_IN
40438: IFFALSE 40475
// if GetCargo ( i , mat_artifact ) = 0 then
40440: LD_VAR 0 1
40444: PPUSH
40445: LD_INT 4
40447: PPUSH
40448: CALL_OW 289
40452: PUSH
40453: LD_INT 0
40455: EQUAL
40456: IFFALSE 40473
// SetCargo ( i , mat_siberit , 100 ) ;
40458: LD_VAR 0 1
40462: PPUSH
40463: LD_INT 3
40465: PPUSH
40466: LD_INT 100
40468: PPUSH
40469: CALL_OW 290
40473: GO 40437
40475: POP
40476: POP
// end ;
40477: PPOPN 2
40479: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
40480: LD_EXP 70
40484: PUSH
40485: LD_EXP 115
40489: AND
40490: IFFALSE 40673
40492: GO 40494
40494: DISABLE
40495: LD_INT 0
40497: PPUSH
40498: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
40499: LD_ADDR_VAR 0 2
40503: PUSH
40504: LD_INT 22
40506: PUSH
40507: LD_OWVAR 2
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PPUSH
40516: CALL_OW 69
40520: ST_TO_ADDR
// if not tmp then
40521: LD_VAR 0 2
40525: NOT
40526: IFFALSE 40530
// exit ;
40528: GO 40673
// for i := 1 to 2 do
40530: LD_ADDR_VAR 0 1
40534: PUSH
40535: DOUBLE
40536: LD_INT 1
40538: DEC
40539: ST_TO_ADDR
40540: LD_INT 2
40542: PUSH
40543: FOR_TO
40544: IFFALSE 40671
// begin uc_side := your_side ;
40546: LD_ADDR_OWVAR 20
40550: PUSH
40551: LD_OWVAR 2
40555: ST_TO_ADDR
// uc_nation := nation_american ;
40556: LD_ADDR_OWVAR 21
40560: PUSH
40561: LD_INT 1
40563: ST_TO_ADDR
// vc_chassis := us_morphling ;
40564: LD_ADDR_OWVAR 37
40568: PUSH
40569: LD_INT 5
40571: ST_TO_ADDR
// vc_engine := engine_siberite ;
40572: LD_ADDR_OWVAR 39
40576: PUSH
40577: LD_INT 3
40579: ST_TO_ADDR
// vc_control := control_computer ;
40580: LD_ADDR_OWVAR 38
40584: PUSH
40585: LD_INT 3
40587: ST_TO_ADDR
// vc_weapon := us_double_laser ;
40588: LD_ADDR_OWVAR 40
40592: PUSH
40593: LD_INT 10
40595: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
40596: LD_VAR 0 2
40600: PUSH
40601: LD_INT 1
40603: ARRAY
40604: PPUSH
40605: CALL_OW 310
40609: NOT
40610: IFFALSE 40657
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
40612: CALL_OW 45
40616: PPUSH
40617: LD_VAR 0 2
40621: PUSH
40622: LD_INT 1
40624: ARRAY
40625: PPUSH
40626: CALL_OW 250
40630: PPUSH
40631: LD_VAR 0 2
40635: PUSH
40636: LD_INT 1
40638: ARRAY
40639: PPUSH
40640: CALL_OW 251
40644: PPUSH
40645: LD_INT 12
40647: PPUSH
40648: LD_INT 1
40650: PPUSH
40651: CALL_OW 50
40655: GO 40669
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
40657: CALL_OW 45
40661: PPUSH
40662: LD_INT 1
40664: PPUSH
40665: CALL_OW 51
// end ;
40669: GO 40543
40671: POP
40672: POP
// end ;
40673: PPOPN 2
40675: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
40676: LD_EXP 70
40680: PUSH
40681: LD_EXP 116
40685: AND
40686: IFFALSE 40908
40688: GO 40690
40690: DISABLE
40691: LD_INT 0
40693: PPUSH
40694: PPUSH
40695: PPUSH
40696: PPUSH
40697: PPUSH
40698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
40699: LD_ADDR_VAR 0 6
40703: PUSH
40704: LD_INT 22
40706: PUSH
40707: LD_OWVAR 2
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 21
40718: PUSH
40719: LD_INT 1
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 3
40728: PUSH
40729: LD_INT 23
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: LIST
40747: PPUSH
40748: CALL_OW 69
40752: ST_TO_ADDR
// if not tmp then
40753: LD_VAR 0 6
40757: NOT
40758: IFFALSE 40762
// exit ;
40760: GO 40908
// s1 := rand ( 1 , 4 ) ;
40762: LD_ADDR_VAR 0 2
40766: PUSH
40767: LD_INT 1
40769: PPUSH
40770: LD_INT 4
40772: PPUSH
40773: CALL_OW 12
40777: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
40778: LD_ADDR_VAR 0 4
40782: PUSH
40783: LD_VAR 0 6
40787: PUSH
40788: LD_INT 1
40790: ARRAY
40791: PPUSH
40792: LD_VAR 0 2
40796: PPUSH
40797: CALL_OW 259
40801: ST_TO_ADDR
// if s1 = 1 then
40802: LD_VAR 0 2
40806: PUSH
40807: LD_INT 1
40809: EQUAL
40810: IFFALSE 40830
// s2 := rand ( 2 , 4 ) else
40812: LD_ADDR_VAR 0 3
40816: PUSH
40817: LD_INT 2
40819: PPUSH
40820: LD_INT 4
40822: PPUSH
40823: CALL_OW 12
40827: ST_TO_ADDR
40828: GO 40838
// s2 := 1 ;
40830: LD_ADDR_VAR 0 3
40834: PUSH
40835: LD_INT 1
40837: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
40838: LD_ADDR_VAR 0 5
40842: PUSH
40843: LD_VAR 0 6
40847: PUSH
40848: LD_INT 1
40850: ARRAY
40851: PPUSH
40852: LD_VAR 0 3
40856: PPUSH
40857: CALL_OW 259
40861: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
40862: LD_VAR 0 6
40866: PUSH
40867: LD_INT 1
40869: ARRAY
40870: PPUSH
40871: LD_VAR 0 2
40875: PPUSH
40876: LD_VAR 0 5
40880: PPUSH
40881: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
40885: LD_VAR 0 6
40889: PUSH
40890: LD_INT 1
40892: ARRAY
40893: PPUSH
40894: LD_VAR 0 3
40898: PPUSH
40899: LD_VAR 0 4
40903: PPUSH
40904: CALL_OW 237
// end ;
40908: PPOPN 6
40910: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
40911: LD_EXP 70
40915: PUSH
40916: LD_EXP 117
40920: AND
40921: IFFALSE 41000
40923: GO 40925
40925: DISABLE
40926: LD_INT 0
40928: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
40929: LD_ADDR_VAR 0 1
40933: PUSH
40934: LD_INT 22
40936: PUSH
40937: LD_OWVAR 2
40941: PUSH
40942: EMPTY
40943: LIST
40944: LIST
40945: PUSH
40946: LD_INT 30
40948: PUSH
40949: LD_INT 3
40951: PUSH
40952: EMPTY
40953: LIST
40954: LIST
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PPUSH
40960: CALL_OW 69
40964: ST_TO_ADDR
// if not tmp then
40965: LD_VAR 0 1
40969: NOT
40970: IFFALSE 40974
// exit ;
40972: GO 41000
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
40974: LD_VAR 0 1
40978: PUSH
40979: LD_INT 1
40981: PPUSH
40982: LD_VAR 0 1
40986: PPUSH
40987: CALL_OW 12
40991: ARRAY
40992: PPUSH
40993: LD_INT 1
40995: PPUSH
40996: CALL_OW 234
// end ;
41000: PPOPN 1
41002: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
41003: LD_EXP 70
41007: PUSH
41008: LD_EXP 118
41012: AND
41013: IFFALSE 41125
41015: GO 41017
41017: DISABLE
41018: LD_INT 0
41020: PPUSH
41021: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
41022: LD_ADDR_VAR 0 2
41026: PUSH
41027: LD_INT 22
41029: PUSH
41030: LD_OWVAR 2
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 2
41041: PUSH
41042: LD_INT 30
41044: PUSH
41045: LD_INT 27
41047: PUSH
41048: EMPTY
41049: LIST
41050: LIST
41051: PUSH
41052: LD_INT 30
41054: PUSH
41055: LD_INT 26
41057: PUSH
41058: EMPTY
41059: LIST
41060: LIST
41061: PUSH
41062: LD_INT 30
41064: PUSH
41065: LD_INT 28
41067: PUSH
41068: EMPTY
41069: LIST
41070: LIST
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: PUSH
41078: EMPTY
41079: LIST
41080: LIST
41081: PPUSH
41082: CALL_OW 69
41086: ST_TO_ADDR
// if not tmp then
41087: LD_VAR 0 2
41091: NOT
41092: IFFALSE 41096
// exit ;
41094: GO 41125
// for i in tmp do
41096: LD_ADDR_VAR 0 1
41100: PUSH
41101: LD_VAR 0 2
41105: PUSH
41106: FOR_IN
41107: IFFALSE 41123
// SetLives ( i , 1 ) ;
41109: LD_VAR 0 1
41113: PPUSH
41114: LD_INT 1
41116: PPUSH
41117: CALL_OW 234
41121: GO 41106
41123: POP
41124: POP
// end ;
41125: PPOPN 2
41127: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
41128: LD_EXP 70
41132: PUSH
41133: LD_EXP 119
41137: AND
41138: IFFALSE 41425
41140: GO 41142
41142: DISABLE
41143: LD_INT 0
41145: PPUSH
41146: PPUSH
41147: PPUSH
// begin i := rand ( 1 , 7 ) ;
41148: LD_ADDR_VAR 0 1
41152: PUSH
41153: LD_INT 1
41155: PPUSH
41156: LD_INT 7
41158: PPUSH
41159: CALL_OW 12
41163: ST_TO_ADDR
// case i of 1 :
41164: LD_VAR 0 1
41168: PUSH
41169: LD_INT 1
41171: DOUBLE
41172: EQUAL
41173: IFTRUE 41177
41175: GO 41187
41177: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
41178: LD_STRING earthquake(getX(game), 0, 32)
41180: PPUSH
41181: CALL_OW 559
41185: GO 41425
41187: LD_INT 2
41189: DOUBLE
41190: EQUAL
41191: IFTRUE 41195
41193: GO 41209
41195: POP
// begin ToLua ( displayStucuk(); ) ;
41196: LD_STRING displayStucuk();
41198: PPUSH
41199: CALL_OW 559
// ResetFog ;
41203: CALL_OW 335
// end ; 3 :
41207: GO 41425
41209: LD_INT 3
41211: DOUBLE
41212: EQUAL
41213: IFTRUE 41217
41215: GO 41321
41217: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41218: LD_ADDR_VAR 0 2
41222: PUSH
41223: LD_INT 22
41225: PUSH
41226: LD_OWVAR 2
41230: PUSH
41231: EMPTY
41232: LIST
41233: LIST
41234: PUSH
41235: LD_INT 25
41237: PUSH
41238: LD_INT 1
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PPUSH
41249: CALL_OW 69
41253: ST_TO_ADDR
// if not tmp then
41254: LD_VAR 0 2
41258: NOT
41259: IFFALSE 41263
// exit ;
41261: GO 41425
// un := tmp [ rand ( 1 , tmp ) ] ;
41263: LD_ADDR_VAR 0 3
41267: PUSH
41268: LD_VAR 0 2
41272: PUSH
41273: LD_INT 1
41275: PPUSH
41276: LD_VAR 0 2
41280: PPUSH
41281: CALL_OW 12
41285: ARRAY
41286: ST_TO_ADDR
// if Crawls ( un ) then
41287: LD_VAR 0 3
41291: PPUSH
41292: CALL_OW 318
41296: IFFALSE 41307
// ComWalk ( un ) ;
41298: LD_VAR 0 3
41302: PPUSH
41303: CALL_OW 138
// SetClass ( un , class_mortar ) ;
41307: LD_VAR 0 3
41311: PPUSH
41312: LD_INT 8
41314: PPUSH
41315: CALL_OW 336
// end ; 4 :
41319: GO 41425
41321: LD_INT 4
41323: DOUBLE
41324: EQUAL
41325: IFTRUE 41329
41327: GO 41403
41329: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
41330: LD_ADDR_VAR 0 2
41334: PUSH
41335: LD_INT 22
41337: PUSH
41338: LD_OWVAR 2
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 30
41349: PUSH
41350: LD_INT 29
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PPUSH
41361: CALL_OW 69
41365: ST_TO_ADDR
// if not tmp then
41366: LD_VAR 0 2
41370: NOT
41371: IFFALSE 41375
// exit ;
41373: GO 41425
// CenterNowOnUnits ( tmp [ 1 ] ) ;
41375: LD_VAR 0 2
41379: PUSH
41380: LD_INT 1
41382: ARRAY
41383: PPUSH
41384: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
41388: LD_VAR 0 2
41392: PUSH
41393: LD_INT 1
41395: ARRAY
41396: PPUSH
41397: CALL_OW 65
// end ; 5 .. 7 :
41401: GO 41425
41403: LD_INT 5
41405: DOUBLE
41406: GREATEREQUAL
41407: IFFALSE 41415
41409: LD_INT 7
41411: DOUBLE
41412: LESSEQUAL
41413: IFTRUE 41417
41415: GO 41424
41417: POP
// StreamSibBomb ; end ;
41418: CALL 37662 0 0
41422: GO 41425
41424: POP
// end ;
41425: PPOPN 3
41427: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
41428: LD_EXP 70
41432: PUSH
41433: LD_EXP 120
41437: AND
41438: IFFALSE 41594
41440: GO 41442
41442: DISABLE
41443: LD_INT 0
41445: PPUSH
41446: PPUSH
41447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
41448: LD_ADDR_VAR 0 2
41452: PUSH
41453: LD_INT 81
41455: PUSH
41456: LD_OWVAR 2
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 2
41467: PUSH
41468: LD_INT 21
41470: PUSH
41471: LD_INT 1
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 21
41480: PUSH
41481: LD_INT 2
41483: PUSH
41484: EMPTY
41485: LIST
41486: LIST
41487: PUSH
41488: EMPTY
41489: LIST
41490: LIST
41491: LIST
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PPUSH
41497: CALL_OW 69
41501: ST_TO_ADDR
// if not tmp then
41502: LD_VAR 0 2
41506: NOT
41507: IFFALSE 41511
// exit ;
41509: GO 41594
// p := 0 ;
41511: LD_ADDR_VAR 0 3
41515: PUSH
41516: LD_INT 0
41518: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
41519: LD_INT 35
41521: PPUSH
41522: CALL_OW 67
// p := p + 1 ;
41526: LD_ADDR_VAR 0 3
41530: PUSH
41531: LD_VAR 0 3
41535: PUSH
41536: LD_INT 1
41538: PLUS
41539: ST_TO_ADDR
// for i in tmp do
41540: LD_ADDR_VAR 0 1
41544: PUSH
41545: LD_VAR 0 2
41549: PUSH
41550: FOR_IN
41551: IFFALSE 41582
// if GetLives ( i ) < 1000 then
41553: LD_VAR 0 1
41557: PPUSH
41558: CALL_OW 256
41562: PUSH
41563: LD_INT 1000
41565: LESS
41566: IFFALSE 41580
// SetLives ( i , 1000 ) ;
41568: LD_VAR 0 1
41572: PPUSH
41573: LD_INT 1000
41575: PPUSH
41576: CALL_OW 234
41580: GO 41550
41582: POP
41583: POP
// until p > 20 ;
41584: LD_VAR 0 3
41588: PUSH
41589: LD_INT 20
41591: GREATER
41592: IFFALSE 41519
// end ;
41594: PPOPN 3
41596: END
// every 0 0$1 trigger StreamModeActive and sTime do
41597: LD_EXP 70
41601: PUSH
41602: LD_EXP 121
41606: AND
41607: IFFALSE 41642
41609: GO 41611
41611: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
41612: LD_INT 28
41614: PPUSH
41615: LD_OWVAR 2
41619: PPUSH
41620: LD_INT 2
41622: PPUSH
41623: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
41627: LD_INT 30
41629: PPUSH
41630: LD_OWVAR 2
41634: PPUSH
41635: LD_INT 2
41637: PPUSH
41638: CALL_OW 322
// end ;
41642: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
41643: LD_EXP 70
41647: PUSH
41648: LD_EXP 122
41652: AND
41653: IFFALSE 41774
41655: GO 41657
41657: DISABLE
41658: LD_INT 0
41660: PPUSH
41661: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
41662: LD_ADDR_VAR 0 2
41666: PUSH
41667: LD_INT 22
41669: PUSH
41670: LD_OWVAR 2
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 21
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 3
41691: PUSH
41692: LD_INT 23
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: EMPTY
41703: LIST
41704: LIST
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: LIST
41710: PPUSH
41711: CALL_OW 69
41715: ST_TO_ADDR
// if not tmp then
41716: LD_VAR 0 2
41720: NOT
41721: IFFALSE 41725
// exit ;
41723: GO 41774
// for i in tmp do
41725: LD_ADDR_VAR 0 1
41729: PUSH
41730: LD_VAR 0 2
41734: PUSH
41735: FOR_IN
41736: IFFALSE 41772
// begin if Crawls ( i ) then
41738: LD_VAR 0 1
41742: PPUSH
41743: CALL_OW 318
41747: IFFALSE 41758
// ComWalk ( i ) ;
41749: LD_VAR 0 1
41753: PPUSH
41754: CALL_OW 138
// SetClass ( i , 2 ) ;
41758: LD_VAR 0 1
41762: PPUSH
41763: LD_INT 2
41765: PPUSH
41766: CALL_OW 336
// end ;
41770: GO 41735
41772: POP
41773: POP
// end ;
41774: PPOPN 2
41776: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
41777: LD_EXP 70
41781: PUSH
41782: LD_EXP 123
41786: AND
41787: IFFALSE 42075
41789: GO 41791
41791: DISABLE
41792: LD_INT 0
41794: PPUSH
41795: PPUSH
41796: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
41797: LD_OWVAR 2
41801: PPUSH
41802: LD_INT 9
41804: PPUSH
41805: LD_INT 1
41807: PPUSH
41808: LD_INT 1
41810: PPUSH
41811: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
41815: LD_INT 9
41817: PPUSH
41818: LD_OWVAR 2
41822: PPUSH
41823: CALL_OW 343
// uc_side := 9 ;
41827: LD_ADDR_OWVAR 20
41831: PUSH
41832: LD_INT 9
41834: ST_TO_ADDR
// uc_nation := 2 ;
41835: LD_ADDR_OWVAR 21
41839: PUSH
41840: LD_INT 2
41842: ST_TO_ADDR
// hc_name := Dark Warrior ;
41843: LD_ADDR_OWVAR 26
41847: PUSH
41848: LD_STRING Dark Warrior
41850: ST_TO_ADDR
// hc_gallery :=  ;
41851: LD_ADDR_OWVAR 33
41855: PUSH
41856: LD_STRING 
41858: ST_TO_ADDR
// hc_noskilllimit := true ;
41859: LD_ADDR_OWVAR 76
41863: PUSH
41864: LD_INT 1
41866: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
41867: LD_ADDR_OWVAR 31
41871: PUSH
41872: LD_INT 30
41874: PUSH
41875: LD_INT 30
41877: PUSH
41878: LD_INT 30
41880: PUSH
41881: LD_INT 30
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: LIST
41888: LIST
41889: ST_TO_ADDR
// un := CreateHuman ;
41890: LD_ADDR_VAR 0 3
41894: PUSH
41895: CALL_OW 44
41899: ST_TO_ADDR
// hc_noskilllimit := false ;
41900: LD_ADDR_OWVAR 76
41904: PUSH
41905: LD_INT 0
41907: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
41908: LD_VAR 0 3
41912: PPUSH
41913: LD_INT 1
41915: PPUSH
41916: CALL_OW 51
// ToLua ( playRanger() ) ;
41920: LD_STRING playRanger()
41922: PPUSH
41923: CALL_OW 559
// p := 0 ;
41927: LD_ADDR_VAR 0 2
41931: PUSH
41932: LD_INT 0
41934: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
41935: LD_INT 35
41937: PPUSH
41938: CALL_OW 67
// p := p + 1 ;
41942: LD_ADDR_VAR 0 2
41946: PUSH
41947: LD_VAR 0 2
41951: PUSH
41952: LD_INT 1
41954: PLUS
41955: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
41956: LD_VAR 0 3
41960: PPUSH
41961: CALL_OW 256
41965: PUSH
41966: LD_INT 1000
41968: LESS
41969: IFFALSE 41983
// SetLives ( un , 1000 ) ;
41971: LD_VAR 0 3
41975: PPUSH
41976: LD_INT 1000
41978: PPUSH
41979: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
41983: LD_VAR 0 3
41987: PPUSH
41988: LD_INT 81
41990: PUSH
41991: LD_OWVAR 2
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 91
42002: PUSH
42003: LD_VAR 0 3
42007: PUSH
42008: LD_INT 30
42010: PUSH
42011: EMPTY
42012: LIST
42013: LIST
42014: LIST
42015: PUSH
42016: EMPTY
42017: LIST
42018: LIST
42019: PPUSH
42020: CALL_OW 69
42024: PPUSH
42025: LD_VAR 0 3
42029: PPUSH
42030: CALL_OW 74
42034: PPUSH
42035: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
42039: LD_VAR 0 2
42043: PUSH
42044: LD_INT 80
42046: GREATER
42047: PUSH
42048: LD_VAR 0 3
42052: PPUSH
42053: CALL_OW 301
42057: OR
42058: IFFALSE 41935
// if un then
42060: LD_VAR 0 3
42064: IFFALSE 42075
// RemoveUnit ( un ) ;
42066: LD_VAR 0 3
42070: PPUSH
42071: CALL_OW 64
// end ;
42075: PPOPN 3
42077: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
42078: LD_EXP 124
42082: IFFALSE 42198
42084: GO 42086
42086: DISABLE
42087: LD_INT 0
42089: PPUSH
42090: PPUSH
42091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
42092: LD_ADDR_VAR 0 2
42096: PUSH
42097: LD_INT 81
42099: PUSH
42100: LD_OWVAR 2
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 21
42111: PUSH
42112: LD_INT 1
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: EMPTY
42120: LIST
42121: LIST
42122: PPUSH
42123: CALL_OW 69
42127: ST_TO_ADDR
// ToLua ( playComputer() ) ;
42128: LD_STRING playComputer()
42130: PPUSH
42131: CALL_OW 559
// if not tmp then
42135: LD_VAR 0 2
42139: NOT
42140: IFFALSE 42144
// exit ;
42142: GO 42198
// for i in tmp do
42144: LD_ADDR_VAR 0 1
42148: PUSH
42149: LD_VAR 0 2
42153: PUSH
42154: FOR_IN
42155: IFFALSE 42196
// for j := 1 to 4 do
42157: LD_ADDR_VAR 0 3
42161: PUSH
42162: DOUBLE
42163: LD_INT 1
42165: DEC
42166: ST_TO_ADDR
42167: LD_INT 4
42169: PUSH
42170: FOR_TO
42171: IFFALSE 42192
// SetSkill ( i , j , 10 ) ;
42173: LD_VAR 0 1
42177: PPUSH
42178: LD_VAR 0 3
42182: PPUSH
42183: LD_INT 10
42185: PPUSH
42186: CALL_OW 237
42190: GO 42170
42192: POP
42193: POP
42194: GO 42154
42196: POP
42197: POP
// end ;
42198: PPOPN 3
42200: END
// every 0 0$1 trigger s30 do var i , tmp ;
42201: LD_EXP 125
42205: IFFALSE 42274
42207: GO 42209
42209: DISABLE
42210: LD_INT 0
42212: PPUSH
42213: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42214: LD_ADDR_VAR 0 2
42218: PUSH
42219: LD_INT 22
42221: PUSH
42222: LD_OWVAR 2
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PPUSH
42231: CALL_OW 69
42235: ST_TO_ADDR
// if not tmp then
42236: LD_VAR 0 2
42240: NOT
42241: IFFALSE 42245
// exit ;
42243: GO 42274
// for i in tmp do
42245: LD_ADDR_VAR 0 1
42249: PUSH
42250: LD_VAR 0 2
42254: PUSH
42255: FOR_IN
42256: IFFALSE 42272
// SetLives ( i , 300 ) ;
42258: LD_VAR 0 1
42262: PPUSH
42263: LD_INT 300
42265: PPUSH
42266: CALL_OW 234
42270: GO 42255
42272: POP
42273: POP
// end ;
42274: PPOPN 2
42276: END
// every 0 0$1 trigger s60 do var i , tmp ;
42277: LD_EXP 126
42281: IFFALSE 42350
42283: GO 42285
42285: DISABLE
42286: LD_INT 0
42288: PPUSH
42289: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42290: LD_ADDR_VAR 0 2
42294: PUSH
42295: LD_INT 22
42297: PUSH
42298: LD_OWVAR 2
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PPUSH
42307: CALL_OW 69
42311: ST_TO_ADDR
// if not tmp then
42312: LD_VAR 0 2
42316: NOT
42317: IFFALSE 42321
// exit ;
42319: GO 42350
// for i in tmp do
42321: LD_ADDR_VAR 0 1
42325: PUSH
42326: LD_VAR 0 2
42330: PUSH
42331: FOR_IN
42332: IFFALSE 42348
// SetLives ( i , 600 ) ;
42334: LD_VAR 0 1
42338: PPUSH
42339: LD_INT 600
42341: PPUSH
42342: CALL_OW 234
42346: GO 42331
42348: POP
42349: POP
// end ;
42350: PPOPN 2
42352: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
42353: LD_INT 0
42355: PPUSH
// case cmd of 301 :
42356: LD_VAR 0 1
42360: PUSH
42361: LD_INT 301
42363: DOUBLE
42364: EQUAL
42365: IFTRUE 42369
42367: GO 42401
42369: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
42370: LD_VAR 0 6
42374: PPUSH
42375: LD_VAR 0 7
42379: PPUSH
42380: LD_VAR 0 8
42384: PPUSH
42385: LD_VAR 0 4
42389: PPUSH
42390: LD_VAR 0 5
42394: PPUSH
42395: CALL 43602 0 5
42399: GO 42522
42401: LD_INT 302
42403: DOUBLE
42404: EQUAL
42405: IFTRUE 42409
42407: GO 42446
42409: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
42410: LD_VAR 0 6
42414: PPUSH
42415: LD_VAR 0 7
42419: PPUSH
42420: LD_VAR 0 8
42424: PPUSH
42425: LD_VAR 0 9
42429: PPUSH
42430: LD_VAR 0 4
42434: PPUSH
42435: LD_VAR 0 5
42439: PPUSH
42440: CALL 43693 0 6
42444: GO 42522
42446: LD_INT 303
42448: DOUBLE
42449: EQUAL
42450: IFTRUE 42454
42452: GO 42491
42454: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
42455: LD_VAR 0 6
42459: PPUSH
42460: LD_VAR 0 7
42464: PPUSH
42465: LD_VAR 0 8
42469: PPUSH
42470: LD_VAR 0 9
42474: PPUSH
42475: LD_VAR 0 4
42479: PPUSH
42480: LD_VAR 0 5
42484: PPUSH
42485: CALL 42527 0 6
42489: GO 42522
42491: LD_INT 304
42493: DOUBLE
42494: EQUAL
42495: IFTRUE 42499
42497: GO 42521
42499: POP
// hHackTeleport ( unit , x , y ) ; end ;
42500: LD_VAR 0 2
42504: PPUSH
42505: LD_VAR 0 4
42509: PPUSH
42510: LD_VAR 0 5
42514: PPUSH
42515: CALL 44286 0 3
42519: GO 42522
42521: POP
// end ;
42522: LD_VAR 0 12
42526: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
42527: LD_INT 0
42529: PPUSH
42530: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
42531: LD_VAR 0 1
42535: PUSH
42536: LD_INT 1
42538: LESS
42539: PUSH
42540: LD_VAR 0 1
42544: PUSH
42545: LD_INT 3
42547: GREATER
42548: OR
42549: PUSH
42550: LD_VAR 0 5
42554: PPUSH
42555: LD_VAR 0 6
42559: PPUSH
42560: CALL_OW 428
42564: OR
42565: IFFALSE 42569
// exit ;
42567: GO 43289
// uc_side := your_side ;
42569: LD_ADDR_OWVAR 20
42573: PUSH
42574: LD_OWVAR 2
42578: ST_TO_ADDR
// uc_nation := nation ;
42579: LD_ADDR_OWVAR 21
42583: PUSH
42584: LD_VAR 0 1
42588: ST_TO_ADDR
// bc_level = 1 ;
42589: LD_ADDR_OWVAR 43
42593: PUSH
42594: LD_INT 1
42596: ST_TO_ADDR
// case btype of 1 :
42597: LD_VAR 0 2
42601: PUSH
42602: LD_INT 1
42604: DOUBLE
42605: EQUAL
42606: IFTRUE 42610
42608: GO 42621
42610: POP
// bc_type := b_depot ; 2 :
42611: LD_ADDR_OWVAR 42
42615: PUSH
42616: LD_INT 0
42618: ST_TO_ADDR
42619: GO 43233
42621: LD_INT 2
42623: DOUBLE
42624: EQUAL
42625: IFTRUE 42629
42627: GO 42640
42629: POP
// bc_type := b_warehouse ; 3 :
42630: LD_ADDR_OWVAR 42
42634: PUSH
42635: LD_INT 1
42637: ST_TO_ADDR
42638: GO 43233
42640: LD_INT 3
42642: DOUBLE
42643: EQUAL
42644: IFTRUE 42648
42646: GO 42659
42648: POP
// bc_type := b_lab ; 4 .. 9 :
42649: LD_ADDR_OWVAR 42
42653: PUSH
42654: LD_INT 6
42656: ST_TO_ADDR
42657: GO 43233
42659: LD_INT 4
42661: DOUBLE
42662: GREATEREQUAL
42663: IFFALSE 42671
42665: LD_INT 9
42667: DOUBLE
42668: LESSEQUAL
42669: IFTRUE 42673
42671: GO 42725
42673: POP
// begin bc_type := b_lab_half ;
42674: LD_ADDR_OWVAR 42
42678: PUSH
42679: LD_INT 7
42681: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
42682: LD_ADDR_OWVAR 44
42686: PUSH
42687: LD_INT 10
42689: PUSH
42690: LD_INT 11
42692: PUSH
42693: LD_INT 12
42695: PUSH
42696: LD_INT 15
42698: PUSH
42699: LD_INT 14
42701: PUSH
42702: LD_INT 13
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: LIST
42709: LIST
42710: LIST
42711: LIST
42712: PUSH
42713: LD_VAR 0 2
42717: PUSH
42718: LD_INT 3
42720: MINUS
42721: ARRAY
42722: ST_TO_ADDR
// end ; 10 .. 13 :
42723: GO 43233
42725: LD_INT 10
42727: DOUBLE
42728: GREATEREQUAL
42729: IFFALSE 42737
42731: LD_INT 13
42733: DOUBLE
42734: LESSEQUAL
42735: IFTRUE 42739
42737: GO 42816
42739: POP
// begin bc_type := b_lab_full ;
42740: LD_ADDR_OWVAR 42
42744: PUSH
42745: LD_INT 8
42747: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
42748: LD_ADDR_OWVAR 44
42752: PUSH
42753: LD_INT 10
42755: PUSH
42756: LD_INT 12
42758: PUSH
42759: LD_INT 14
42761: PUSH
42762: LD_INT 13
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: PUSH
42771: LD_VAR 0 2
42775: PUSH
42776: LD_INT 9
42778: MINUS
42779: ARRAY
42780: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
42781: LD_ADDR_OWVAR 45
42785: PUSH
42786: LD_INT 11
42788: PUSH
42789: LD_INT 15
42791: PUSH
42792: LD_INT 12
42794: PUSH
42795: LD_INT 15
42797: PUSH
42798: EMPTY
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: PUSH
42804: LD_VAR 0 2
42808: PUSH
42809: LD_INT 9
42811: MINUS
42812: ARRAY
42813: ST_TO_ADDR
// end ; 14 :
42814: GO 43233
42816: LD_INT 14
42818: DOUBLE
42819: EQUAL
42820: IFTRUE 42824
42822: GO 42835
42824: POP
// bc_type := b_workshop ; 15 :
42825: LD_ADDR_OWVAR 42
42829: PUSH
42830: LD_INT 2
42832: ST_TO_ADDR
42833: GO 43233
42835: LD_INT 15
42837: DOUBLE
42838: EQUAL
42839: IFTRUE 42843
42841: GO 42854
42843: POP
// bc_type := b_factory ; 16 :
42844: LD_ADDR_OWVAR 42
42848: PUSH
42849: LD_INT 3
42851: ST_TO_ADDR
42852: GO 43233
42854: LD_INT 16
42856: DOUBLE
42857: EQUAL
42858: IFTRUE 42862
42860: GO 42873
42862: POP
// bc_type := b_ext_gun ; 17 :
42863: LD_ADDR_OWVAR 42
42867: PUSH
42868: LD_INT 17
42870: ST_TO_ADDR
42871: GO 43233
42873: LD_INT 17
42875: DOUBLE
42876: EQUAL
42877: IFTRUE 42881
42879: GO 42909
42881: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
42882: LD_ADDR_OWVAR 42
42886: PUSH
42887: LD_INT 19
42889: PUSH
42890: LD_INT 23
42892: PUSH
42893: LD_INT 19
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: LIST
42900: PUSH
42901: LD_VAR 0 1
42905: ARRAY
42906: ST_TO_ADDR
42907: GO 43233
42909: LD_INT 18
42911: DOUBLE
42912: EQUAL
42913: IFTRUE 42917
42915: GO 42928
42917: POP
// bc_type := b_ext_radar ; 19 :
42918: LD_ADDR_OWVAR 42
42922: PUSH
42923: LD_INT 20
42925: ST_TO_ADDR
42926: GO 43233
42928: LD_INT 19
42930: DOUBLE
42931: EQUAL
42932: IFTRUE 42936
42934: GO 42947
42936: POP
// bc_type := b_ext_radio ; 20 :
42937: LD_ADDR_OWVAR 42
42941: PUSH
42942: LD_INT 22
42944: ST_TO_ADDR
42945: GO 43233
42947: LD_INT 20
42949: DOUBLE
42950: EQUAL
42951: IFTRUE 42955
42953: GO 42966
42955: POP
// bc_type := b_ext_siberium ; 21 :
42956: LD_ADDR_OWVAR 42
42960: PUSH
42961: LD_INT 21
42963: ST_TO_ADDR
42964: GO 43233
42966: LD_INT 21
42968: DOUBLE
42969: EQUAL
42970: IFTRUE 42974
42972: GO 42985
42974: POP
// bc_type := b_ext_computer ; 22 :
42975: LD_ADDR_OWVAR 42
42979: PUSH
42980: LD_INT 24
42982: ST_TO_ADDR
42983: GO 43233
42985: LD_INT 22
42987: DOUBLE
42988: EQUAL
42989: IFTRUE 42993
42991: GO 43004
42993: POP
// bc_type := b_ext_track ; 23 :
42994: LD_ADDR_OWVAR 42
42998: PUSH
42999: LD_INT 16
43001: ST_TO_ADDR
43002: GO 43233
43004: LD_INT 23
43006: DOUBLE
43007: EQUAL
43008: IFTRUE 43012
43010: GO 43023
43012: POP
// bc_type := b_ext_laser ; 24 :
43013: LD_ADDR_OWVAR 42
43017: PUSH
43018: LD_INT 25
43020: ST_TO_ADDR
43021: GO 43233
43023: LD_INT 24
43025: DOUBLE
43026: EQUAL
43027: IFTRUE 43031
43029: GO 43042
43031: POP
// bc_type := b_control_tower ; 25 :
43032: LD_ADDR_OWVAR 42
43036: PUSH
43037: LD_INT 36
43039: ST_TO_ADDR
43040: GO 43233
43042: LD_INT 25
43044: DOUBLE
43045: EQUAL
43046: IFTRUE 43050
43048: GO 43061
43050: POP
// bc_type := b_breastwork ; 26 :
43051: LD_ADDR_OWVAR 42
43055: PUSH
43056: LD_INT 31
43058: ST_TO_ADDR
43059: GO 43233
43061: LD_INT 26
43063: DOUBLE
43064: EQUAL
43065: IFTRUE 43069
43067: GO 43080
43069: POP
// bc_type := b_bunker ; 27 :
43070: LD_ADDR_OWVAR 42
43074: PUSH
43075: LD_INT 32
43077: ST_TO_ADDR
43078: GO 43233
43080: LD_INT 27
43082: DOUBLE
43083: EQUAL
43084: IFTRUE 43088
43086: GO 43099
43088: POP
// bc_type := b_turret ; 28 :
43089: LD_ADDR_OWVAR 42
43093: PUSH
43094: LD_INT 33
43096: ST_TO_ADDR
43097: GO 43233
43099: LD_INT 28
43101: DOUBLE
43102: EQUAL
43103: IFTRUE 43107
43105: GO 43118
43107: POP
// bc_type := b_armoury ; 29 :
43108: LD_ADDR_OWVAR 42
43112: PUSH
43113: LD_INT 4
43115: ST_TO_ADDR
43116: GO 43233
43118: LD_INT 29
43120: DOUBLE
43121: EQUAL
43122: IFTRUE 43126
43124: GO 43137
43126: POP
// bc_type := b_barracks ; 30 :
43127: LD_ADDR_OWVAR 42
43131: PUSH
43132: LD_INT 5
43134: ST_TO_ADDR
43135: GO 43233
43137: LD_INT 30
43139: DOUBLE
43140: EQUAL
43141: IFTRUE 43145
43143: GO 43156
43145: POP
// bc_type := b_solar_power ; 31 :
43146: LD_ADDR_OWVAR 42
43150: PUSH
43151: LD_INT 27
43153: ST_TO_ADDR
43154: GO 43233
43156: LD_INT 31
43158: DOUBLE
43159: EQUAL
43160: IFTRUE 43164
43162: GO 43175
43164: POP
// bc_type := b_oil_power ; 32 :
43165: LD_ADDR_OWVAR 42
43169: PUSH
43170: LD_INT 26
43172: ST_TO_ADDR
43173: GO 43233
43175: LD_INT 32
43177: DOUBLE
43178: EQUAL
43179: IFTRUE 43183
43181: GO 43194
43183: POP
// bc_type := b_siberite_power ; 33 :
43184: LD_ADDR_OWVAR 42
43188: PUSH
43189: LD_INT 28
43191: ST_TO_ADDR
43192: GO 43233
43194: LD_INT 33
43196: DOUBLE
43197: EQUAL
43198: IFTRUE 43202
43200: GO 43213
43202: POP
// bc_type := b_oil_mine ; 34 :
43203: LD_ADDR_OWVAR 42
43207: PUSH
43208: LD_INT 29
43210: ST_TO_ADDR
43211: GO 43233
43213: LD_INT 34
43215: DOUBLE
43216: EQUAL
43217: IFTRUE 43221
43219: GO 43232
43221: POP
// bc_type := b_siberite_mine ; end ;
43222: LD_ADDR_OWVAR 42
43226: PUSH
43227: LD_INT 30
43229: ST_TO_ADDR
43230: GO 43233
43232: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
43233: LD_ADDR_VAR 0 8
43237: PUSH
43238: LD_VAR 0 5
43242: PPUSH
43243: LD_VAR 0 6
43247: PPUSH
43248: LD_VAR 0 3
43252: PPUSH
43253: CALL_OW 47
43257: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
43258: LD_OWVAR 42
43262: PUSH
43263: LD_INT 32
43265: PUSH
43266: LD_INT 33
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: IN
43273: IFFALSE 43289
// PlaceWeaponTurret ( b , weapon ) ;
43275: LD_VAR 0 8
43279: PPUSH
43280: LD_VAR 0 4
43284: PPUSH
43285: CALL_OW 431
// end ;
43289: LD_VAR 0 7
43293: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
43294: LD_INT 0
43296: PPUSH
43297: PPUSH
43298: PPUSH
43299: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43300: LD_ADDR_VAR 0 4
43304: PUSH
43305: LD_INT 22
43307: PUSH
43308: LD_OWVAR 2
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 2
43319: PUSH
43320: LD_INT 30
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 30
43332: PUSH
43333: LD_INT 1
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: LIST
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PPUSH
43349: CALL_OW 69
43353: ST_TO_ADDR
// if not tmp then
43354: LD_VAR 0 4
43358: NOT
43359: IFFALSE 43363
// exit ;
43361: GO 43422
// for i in tmp do
43363: LD_ADDR_VAR 0 2
43367: PUSH
43368: LD_VAR 0 4
43372: PUSH
43373: FOR_IN
43374: IFFALSE 43420
// for j = 1 to 3 do
43376: LD_ADDR_VAR 0 3
43380: PUSH
43381: DOUBLE
43382: LD_INT 1
43384: DEC
43385: ST_TO_ADDR
43386: LD_INT 3
43388: PUSH
43389: FOR_TO
43390: IFFALSE 43416
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
43392: LD_VAR 0 2
43396: PPUSH
43397: CALL_OW 274
43401: PPUSH
43402: LD_VAR 0 3
43406: PPUSH
43407: LD_INT 99999
43409: PPUSH
43410: CALL_OW 277
43414: GO 43389
43416: POP
43417: POP
43418: GO 43373
43420: POP
43421: POP
// end ;
43422: LD_VAR 0 1
43426: RET
// export function hHackSetLevel10 ; var i , j ; begin
43427: LD_INT 0
43429: PPUSH
43430: PPUSH
43431: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
43432: LD_ADDR_VAR 0 2
43436: PUSH
43437: LD_INT 21
43439: PUSH
43440: LD_INT 1
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PPUSH
43447: CALL_OW 69
43451: PUSH
43452: FOR_IN
43453: IFFALSE 43505
// if IsSelected ( i ) then
43455: LD_VAR 0 2
43459: PPUSH
43460: CALL_OW 306
43464: IFFALSE 43503
// begin for j := 1 to 4 do
43466: LD_ADDR_VAR 0 3
43470: PUSH
43471: DOUBLE
43472: LD_INT 1
43474: DEC
43475: ST_TO_ADDR
43476: LD_INT 4
43478: PUSH
43479: FOR_TO
43480: IFFALSE 43501
// SetSkill ( i , j , 10 ) ;
43482: LD_VAR 0 2
43486: PPUSH
43487: LD_VAR 0 3
43491: PPUSH
43492: LD_INT 10
43494: PPUSH
43495: CALL_OW 237
43499: GO 43479
43501: POP
43502: POP
// end ;
43503: GO 43452
43505: POP
43506: POP
// end ;
43507: LD_VAR 0 1
43511: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
43512: LD_INT 0
43514: PPUSH
43515: PPUSH
43516: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
43517: LD_ADDR_VAR 0 2
43521: PUSH
43522: LD_INT 22
43524: PUSH
43525: LD_OWVAR 2
43529: PUSH
43530: EMPTY
43531: LIST
43532: LIST
43533: PUSH
43534: LD_INT 21
43536: PUSH
43537: LD_INT 1
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: PUSH
43544: EMPTY
43545: LIST
43546: LIST
43547: PPUSH
43548: CALL_OW 69
43552: PUSH
43553: FOR_IN
43554: IFFALSE 43595
// begin for j := 1 to 4 do
43556: LD_ADDR_VAR 0 3
43560: PUSH
43561: DOUBLE
43562: LD_INT 1
43564: DEC
43565: ST_TO_ADDR
43566: LD_INT 4
43568: PUSH
43569: FOR_TO
43570: IFFALSE 43591
// SetSkill ( i , j , 10 ) ;
43572: LD_VAR 0 2
43576: PPUSH
43577: LD_VAR 0 3
43581: PPUSH
43582: LD_INT 10
43584: PPUSH
43585: CALL_OW 237
43589: GO 43569
43591: POP
43592: POP
// end ;
43593: GO 43553
43595: POP
43596: POP
// end ;
43597: LD_VAR 0 1
43601: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
43602: LD_INT 0
43604: PPUSH
// uc_side := your_side ;
43605: LD_ADDR_OWVAR 20
43609: PUSH
43610: LD_OWVAR 2
43614: ST_TO_ADDR
// uc_nation := nation ;
43615: LD_ADDR_OWVAR 21
43619: PUSH
43620: LD_VAR 0 1
43624: ST_TO_ADDR
// InitHc ;
43625: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
43629: LD_INT 0
43631: PPUSH
43632: LD_VAR 0 2
43636: PPUSH
43637: LD_VAR 0 3
43641: PPUSH
43642: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
43646: LD_VAR 0 4
43650: PPUSH
43651: LD_VAR 0 5
43655: PPUSH
43656: CALL_OW 428
43660: PUSH
43661: LD_INT 0
43663: EQUAL
43664: IFFALSE 43688
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
43666: CALL_OW 44
43670: PPUSH
43671: LD_VAR 0 4
43675: PPUSH
43676: LD_VAR 0 5
43680: PPUSH
43681: LD_INT 1
43683: PPUSH
43684: CALL_OW 48
// end ;
43688: LD_VAR 0 6
43692: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
43693: LD_INT 0
43695: PPUSH
43696: PPUSH
// uc_side := your_side ;
43697: LD_ADDR_OWVAR 20
43701: PUSH
43702: LD_OWVAR 2
43706: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
43707: LD_VAR 0 1
43711: PUSH
43712: LD_INT 1
43714: PUSH
43715: LD_INT 2
43717: PUSH
43718: LD_INT 3
43720: PUSH
43721: LD_INT 4
43723: PUSH
43724: LD_INT 5
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: IN
43734: IFFALSE 43746
// uc_nation := nation_american else
43736: LD_ADDR_OWVAR 21
43740: PUSH
43741: LD_INT 1
43743: ST_TO_ADDR
43744: GO 43789
// if chassis in [ 11 , 12 , 13 , 14 ] then
43746: LD_VAR 0 1
43750: PUSH
43751: LD_INT 11
43753: PUSH
43754: LD_INT 12
43756: PUSH
43757: LD_INT 13
43759: PUSH
43760: LD_INT 14
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: IN
43769: IFFALSE 43781
// uc_nation := nation_arabian else
43771: LD_ADDR_OWVAR 21
43775: PUSH
43776: LD_INT 2
43778: ST_TO_ADDR
43779: GO 43789
// uc_nation := nation_russian ;
43781: LD_ADDR_OWVAR 21
43785: PUSH
43786: LD_INT 3
43788: ST_TO_ADDR
// vc_chassis := chassis ;
43789: LD_ADDR_OWVAR 37
43793: PUSH
43794: LD_VAR 0 1
43798: ST_TO_ADDR
// vc_engine := engine ;
43799: LD_ADDR_OWVAR 39
43803: PUSH
43804: LD_VAR 0 2
43808: ST_TO_ADDR
// vc_control := control ;
43809: LD_ADDR_OWVAR 38
43813: PUSH
43814: LD_VAR 0 3
43818: ST_TO_ADDR
// vc_weapon := weapon ;
43819: LD_ADDR_OWVAR 40
43823: PUSH
43824: LD_VAR 0 4
43828: ST_TO_ADDR
// un := CreateVehicle ;
43829: LD_ADDR_VAR 0 8
43833: PUSH
43834: CALL_OW 45
43838: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
43839: LD_VAR 0 8
43843: PPUSH
43844: LD_INT 0
43846: PPUSH
43847: LD_INT 5
43849: PPUSH
43850: CALL_OW 12
43854: PPUSH
43855: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
43859: LD_VAR 0 8
43863: PPUSH
43864: LD_VAR 0 5
43868: PPUSH
43869: LD_VAR 0 6
43873: PPUSH
43874: LD_INT 1
43876: PPUSH
43877: CALL_OW 48
// end ;
43881: LD_VAR 0 7
43885: RET
// export hInvincible ; every 1 do
43886: GO 43888
43888: DISABLE
// hInvincible := [ ] ;
43889: LD_ADDR_EXP 127
43893: PUSH
43894: EMPTY
43895: ST_TO_ADDR
43896: END
// every 10 do var i ;
43897: GO 43899
43899: DISABLE
43900: LD_INT 0
43902: PPUSH
// begin enable ;
43903: ENABLE
// if not hInvincible then
43904: LD_EXP 127
43908: NOT
43909: IFFALSE 43913
// exit ;
43911: GO 43957
// for i in hInvincible do
43913: LD_ADDR_VAR 0 1
43917: PUSH
43918: LD_EXP 127
43922: PUSH
43923: FOR_IN
43924: IFFALSE 43955
// if GetLives ( i ) < 1000 then
43926: LD_VAR 0 1
43930: PPUSH
43931: CALL_OW 256
43935: PUSH
43936: LD_INT 1000
43938: LESS
43939: IFFALSE 43953
// SetLives ( i , 1000 ) ;
43941: LD_VAR 0 1
43945: PPUSH
43946: LD_INT 1000
43948: PPUSH
43949: CALL_OW 234
43953: GO 43923
43955: POP
43956: POP
// end ;
43957: PPOPN 1
43959: END
// export function hHackInvincible ; var i ; begin
43960: LD_INT 0
43962: PPUSH
43963: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
43964: LD_ADDR_VAR 0 2
43968: PUSH
43969: LD_INT 2
43971: PUSH
43972: LD_INT 21
43974: PUSH
43975: LD_INT 1
43977: PUSH
43978: EMPTY
43979: LIST
43980: LIST
43981: PUSH
43982: LD_INT 21
43984: PUSH
43985: LD_INT 2
43987: PUSH
43988: EMPTY
43989: LIST
43990: LIST
43991: PUSH
43992: EMPTY
43993: LIST
43994: LIST
43995: LIST
43996: PPUSH
43997: CALL_OW 69
44001: PUSH
44002: FOR_IN
44003: IFFALSE 44064
// if IsSelected ( i ) then
44005: LD_VAR 0 2
44009: PPUSH
44010: CALL_OW 306
44014: IFFALSE 44062
// begin if i in hInvincible then
44016: LD_VAR 0 2
44020: PUSH
44021: LD_EXP 127
44025: IN
44026: IFFALSE 44046
// hInvincible := hInvincible diff i else
44028: LD_ADDR_EXP 127
44032: PUSH
44033: LD_EXP 127
44037: PUSH
44038: LD_VAR 0 2
44042: DIFF
44043: ST_TO_ADDR
44044: GO 44062
// hInvincible := hInvincible union i ;
44046: LD_ADDR_EXP 127
44050: PUSH
44051: LD_EXP 127
44055: PUSH
44056: LD_VAR 0 2
44060: UNION
44061: ST_TO_ADDR
// end ;
44062: GO 44002
44064: POP
44065: POP
// end ;
44066: LD_VAR 0 1
44070: RET
// export function hHackInvisible ; var i , j ; begin
44071: LD_INT 0
44073: PPUSH
44074: PPUSH
44075: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
44076: LD_ADDR_VAR 0 2
44080: PUSH
44081: LD_INT 21
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: EMPTY
44088: LIST
44089: LIST
44090: PPUSH
44091: CALL_OW 69
44095: PUSH
44096: FOR_IN
44097: IFFALSE 44121
// if IsSelected ( i ) then
44099: LD_VAR 0 2
44103: PPUSH
44104: CALL_OW 306
44108: IFFALSE 44119
// ComForceInvisible ( i ) ;
44110: LD_VAR 0 2
44114: PPUSH
44115: CALL_OW 496
44119: GO 44096
44121: POP
44122: POP
// end ;
44123: LD_VAR 0 1
44127: RET
// export function hHackChangeYourSide ; begin
44128: LD_INT 0
44130: PPUSH
// if your_side = 8 then
44131: LD_OWVAR 2
44135: PUSH
44136: LD_INT 8
44138: EQUAL
44139: IFFALSE 44151
// your_side := 0 else
44141: LD_ADDR_OWVAR 2
44145: PUSH
44146: LD_INT 0
44148: ST_TO_ADDR
44149: GO 44165
// your_side := your_side + 1 ;
44151: LD_ADDR_OWVAR 2
44155: PUSH
44156: LD_OWVAR 2
44160: PUSH
44161: LD_INT 1
44163: PLUS
44164: ST_TO_ADDR
// end ;
44165: LD_VAR 0 1
44169: RET
// export function hHackChangeUnitSide ; var i , j ; begin
44170: LD_INT 0
44172: PPUSH
44173: PPUSH
44174: PPUSH
// for i in all_units do
44175: LD_ADDR_VAR 0 2
44179: PUSH
44180: LD_OWVAR 3
44184: PUSH
44185: FOR_IN
44186: IFFALSE 44264
// if IsSelected ( i ) then
44188: LD_VAR 0 2
44192: PPUSH
44193: CALL_OW 306
44197: IFFALSE 44262
// begin j := GetSide ( i ) ;
44199: LD_ADDR_VAR 0 3
44203: PUSH
44204: LD_VAR 0 2
44208: PPUSH
44209: CALL_OW 255
44213: ST_TO_ADDR
// if j = 8 then
44214: LD_VAR 0 3
44218: PUSH
44219: LD_INT 8
44221: EQUAL
44222: IFFALSE 44234
// j := 0 else
44224: LD_ADDR_VAR 0 3
44228: PUSH
44229: LD_INT 0
44231: ST_TO_ADDR
44232: GO 44248
// j := j + 1 ;
44234: LD_ADDR_VAR 0 3
44238: PUSH
44239: LD_VAR 0 3
44243: PUSH
44244: LD_INT 1
44246: PLUS
44247: ST_TO_ADDR
// SetSide ( i , j ) ;
44248: LD_VAR 0 2
44252: PPUSH
44253: LD_VAR 0 3
44257: PPUSH
44258: CALL_OW 235
// end ;
44262: GO 44185
44264: POP
44265: POP
// end ;
44266: LD_VAR 0 1
44270: RET
// export function hHackFog ; begin
44271: LD_INT 0
44273: PPUSH
// FogOff ( true ) ;
44274: LD_INT 1
44276: PPUSH
44277: CALL_OW 344
// end ;
44281: LD_VAR 0 1
44285: RET
// export function hHackTeleport ( unit , x , y ) ; begin
44286: LD_INT 0
44288: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
44289: LD_VAR 0 1
44293: PPUSH
44294: LD_VAR 0 2
44298: PPUSH
44299: LD_VAR 0 3
44303: PPUSH
44304: LD_INT 1
44306: PPUSH
44307: LD_INT 1
44309: PPUSH
44310: CALL_OW 483
// CenterOnXY ( x , y ) ;
44314: LD_VAR 0 2
44318: PPUSH
44319: LD_VAR 0 3
44323: PPUSH
44324: CALL_OW 84
// end ;
44328: LD_VAR 0 4
44332: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
44333: LD_INT 0
44335: PPUSH
44336: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
44337: LD_VAR 0 1
44341: NOT
44342: PUSH
44343: LD_VAR 0 2
44347: PPUSH
44348: LD_VAR 0 3
44352: PPUSH
44353: CALL_OW 488
44357: NOT
44358: OR
44359: PUSH
44360: LD_VAR 0 1
44364: PPUSH
44365: CALL_OW 266
44369: PUSH
44370: LD_INT 3
44372: NONEQUAL
44373: PUSH
44374: LD_VAR 0 1
44378: PPUSH
44379: CALL_OW 247
44383: PUSH
44384: LD_INT 1
44386: EQUAL
44387: NOT
44388: AND
44389: OR
44390: IFFALSE 44394
// exit ;
44392: GO 44543
// if GetType ( factory ) = unit_human then
44394: LD_VAR 0 1
44398: PPUSH
44399: CALL_OW 247
44403: PUSH
44404: LD_INT 1
44406: EQUAL
44407: IFFALSE 44424
// factory := IsInUnit ( factory ) ;
44409: LD_ADDR_VAR 0 1
44413: PUSH
44414: LD_VAR 0 1
44418: PPUSH
44419: CALL_OW 310
44423: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
44424: LD_VAR 0 1
44428: PPUSH
44429: CALL_OW 266
44433: PUSH
44434: LD_INT 3
44436: NONEQUAL
44437: IFFALSE 44441
// exit ;
44439: GO 44543
// if HexInfo ( x , y ) = factory then
44441: LD_VAR 0 2
44445: PPUSH
44446: LD_VAR 0 3
44450: PPUSH
44451: CALL_OW 428
44455: PUSH
44456: LD_VAR 0 1
44460: EQUAL
44461: IFFALSE 44488
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
44463: LD_ADDR_EXP 128
44467: PUSH
44468: LD_EXP 128
44472: PPUSH
44473: LD_VAR 0 1
44477: PPUSH
44478: LD_INT 0
44480: PPUSH
44481: CALL_OW 1
44485: ST_TO_ADDR
44486: GO 44539
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
44488: LD_ADDR_EXP 128
44492: PUSH
44493: LD_EXP 128
44497: PPUSH
44498: LD_VAR 0 1
44502: PPUSH
44503: LD_VAR 0 1
44507: PPUSH
44508: CALL_OW 255
44512: PUSH
44513: LD_VAR 0 1
44517: PUSH
44518: LD_VAR 0 2
44522: PUSH
44523: LD_VAR 0 3
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: LIST
44532: LIST
44533: PPUSH
44534: CALL_OW 1
44538: ST_TO_ADDR
// UpdateFactoryWaypoints ;
44539: CALL 44548 0 0
// end ;
44543: LD_VAR 0 4
44547: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
44548: LD_INT 0
44550: PPUSH
44551: PPUSH
44552: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
44553: LD_STRING resetFactoryWaypoint();
44555: PPUSH
44556: CALL_OW 559
// if factoryWaypoints then
44560: LD_EXP 128
44564: IFFALSE 44690
// begin list := PrepareArray ( factoryWaypoints ) ;
44566: LD_ADDR_VAR 0 3
44570: PUSH
44571: LD_EXP 128
44575: PPUSH
44576: CALL 91067 0 1
44580: ST_TO_ADDR
// for i := 1 to list do
44581: LD_ADDR_VAR 0 2
44585: PUSH
44586: DOUBLE
44587: LD_INT 1
44589: DEC
44590: ST_TO_ADDR
44591: LD_VAR 0 3
44595: PUSH
44596: FOR_TO
44597: IFFALSE 44688
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
44599: LD_STRING setFactoryWaypointXY(
44601: PUSH
44602: LD_VAR 0 3
44606: PUSH
44607: LD_VAR 0 2
44611: ARRAY
44612: PUSH
44613: LD_INT 1
44615: ARRAY
44616: STR
44617: PUSH
44618: LD_STRING ,
44620: STR
44621: PUSH
44622: LD_VAR 0 3
44626: PUSH
44627: LD_VAR 0 2
44631: ARRAY
44632: PUSH
44633: LD_INT 2
44635: ARRAY
44636: STR
44637: PUSH
44638: LD_STRING ,
44640: STR
44641: PUSH
44642: LD_VAR 0 3
44646: PUSH
44647: LD_VAR 0 2
44651: ARRAY
44652: PUSH
44653: LD_INT 3
44655: ARRAY
44656: STR
44657: PUSH
44658: LD_STRING ,
44660: STR
44661: PUSH
44662: LD_VAR 0 3
44666: PUSH
44667: LD_VAR 0 2
44671: ARRAY
44672: PUSH
44673: LD_INT 4
44675: ARRAY
44676: STR
44677: PUSH
44678: LD_STRING )
44680: STR
44681: PPUSH
44682: CALL_OW 559
44686: GO 44596
44688: POP
44689: POP
// end ; end ;
44690: LD_VAR 0 1
44694: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
44695: LD_INT 0
44697: PPUSH
// if HexInfo ( x , y ) = warehouse then
44698: LD_VAR 0 2
44702: PPUSH
44703: LD_VAR 0 3
44707: PPUSH
44708: CALL_OW 428
44712: PUSH
44713: LD_VAR 0 1
44717: EQUAL
44718: IFFALSE 44745
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
44720: LD_ADDR_EXP 129
44724: PUSH
44725: LD_EXP 129
44729: PPUSH
44730: LD_VAR 0 1
44734: PPUSH
44735: LD_INT 0
44737: PPUSH
44738: CALL_OW 1
44742: ST_TO_ADDR
44743: GO 44796
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
44745: LD_ADDR_EXP 129
44749: PUSH
44750: LD_EXP 129
44754: PPUSH
44755: LD_VAR 0 1
44759: PPUSH
44760: LD_VAR 0 1
44764: PPUSH
44765: CALL_OW 255
44769: PUSH
44770: LD_VAR 0 1
44774: PUSH
44775: LD_VAR 0 2
44779: PUSH
44780: LD_VAR 0 3
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: PPUSH
44791: CALL_OW 1
44795: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
44796: CALL 44805 0 0
// end ;
44800: LD_VAR 0 4
44804: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
44805: LD_INT 0
44807: PPUSH
44808: PPUSH
44809: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
44810: LD_STRING resetWarehouseGatheringPoints();
44812: PPUSH
44813: CALL_OW 559
// if warehouseGatheringPoints then
44817: LD_EXP 129
44821: IFFALSE 44947
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
44823: LD_ADDR_VAR 0 3
44827: PUSH
44828: LD_EXP 129
44832: PPUSH
44833: CALL 91067 0 1
44837: ST_TO_ADDR
// for i := 1 to list do
44838: LD_ADDR_VAR 0 2
44842: PUSH
44843: DOUBLE
44844: LD_INT 1
44846: DEC
44847: ST_TO_ADDR
44848: LD_VAR 0 3
44852: PUSH
44853: FOR_TO
44854: IFFALSE 44945
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
44856: LD_STRING setWarehouseGatheringPointXY(
44858: PUSH
44859: LD_VAR 0 3
44863: PUSH
44864: LD_VAR 0 2
44868: ARRAY
44869: PUSH
44870: LD_INT 1
44872: ARRAY
44873: STR
44874: PUSH
44875: LD_STRING ,
44877: STR
44878: PUSH
44879: LD_VAR 0 3
44883: PUSH
44884: LD_VAR 0 2
44888: ARRAY
44889: PUSH
44890: LD_INT 2
44892: ARRAY
44893: STR
44894: PUSH
44895: LD_STRING ,
44897: STR
44898: PUSH
44899: LD_VAR 0 3
44903: PUSH
44904: LD_VAR 0 2
44908: ARRAY
44909: PUSH
44910: LD_INT 3
44912: ARRAY
44913: STR
44914: PUSH
44915: LD_STRING ,
44917: STR
44918: PUSH
44919: LD_VAR 0 3
44923: PUSH
44924: LD_VAR 0 2
44928: ARRAY
44929: PUSH
44930: LD_INT 4
44932: ARRAY
44933: STR
44934: PUSH
44935: LD_STRING )
44937: STR
44938: PPUSH
44939: CALL_OW 559
44943: GO 44853
44945: POP
44946: POP
// end ; end ;
44947: LD_VAR 0 1
44951: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
44952: LD_EXP 129
44956: IFFALSE 45641
44958: GO 44960
44960: DISABLE
44961: LD_INT 0
44963: PPUSH
44964: PPUSH
44965: PPUSH
44966: PPUSH
44967: PPUSH
44968: PPUSH
44969: PPUSH
44970: PPUSH
44971: PPUSH
// begin enable ;
44972: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
44973: LD_ADDR_VAR 0 3
44977: PUSH
44978: LD_EXP 129
44982: PPUSH
44983: CALL 91067 0 1
44987: ST_TO_ADDR
// if not list then
44988: LD_VAR 0 3
44992: NOT
44993: IFFALSE 44997
// exit ;
44995: GO 45641
// for i := 1 to list do
44997: LD_ADDR_VAR 0 1
45001: PUSH
45002: DOUBLE
45003: LD_INT 1
45005: DEC
45006: ST_TO_ADDR
45007: LD_VAR 0 3
45011: PUSH
45012: FOR_TO
45013: IFFALSE 45639
// begin depot := list [ i ] [ 2 ] ;
45015: LD_ADDR_VAR 0 8
45019: PUSH
45020: LD_VAR 0 3
45024: PUSH
45025: LD_VAR 0 1
45029: ARRAY
45030: PUSH
45031: LD_INT 2
45033: ARRAY
45034: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
45035: LD_ADDR_VAR 0 5
45039: PUSH
45040: LD_VAR 0 3
45044: PUSH
45045: LD_VAR 0 1
45049: ARRAY
45050: PUSH
45051: LD_INT 1
45053: ARRAY
45054: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
45055: LD_VAR 0 8
45059: PPUSH
45060: CALL_OW 301
45064: PUSH
45065: LD_VAR 0 5
45069: PUSH
45070: LD_VAR 0 8
45074: PPUSH
45075: CALL_OW 255
45079: NONEQUAL
45080: OR
45081: IFFALSE 45110
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
45083: LD_ADDR_EXP 129
45087: PUSH
45088: LD_EXP 129
45092: PPUSH
45093: LD_VAR 0 8
45097: PPUSH
45098: LD_INT 0
45100: PPUSH
45101: CALL_OW 1
45105: ST_TO_ADDR
// exit ;
45106: POP
45107: POP
45108: GO 45641
// end ; x := list [ i ] [ 3 ] ;
45110: LD_ADDR_VAR 0 6
45114: PUSH
45115: LD_VAR 0 3
45119: PUSH
45120: LD_VAR 0 1
45124: ARRAY
45125: PUSH
45126: LD_INT 3
45128: ARRAY
45129: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
45130: LD_ADDR_VAR 0 7
45134: PUSH
45135: LD_VAR 0 3
45139: PUSH
45140: LD_VAR 0 1
45144: ARRAY
45145: PUSH
45146: LD_INT 4
45148: ARRAY
45149: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
45150: LD_ADDR_VAR 0 9
45154: PUSH
45155: LD_VAR 0 6
45159: PPUSH
45160: LD_VAR 0 7
45164: PPUSH
45165: LD_INT 16
45167: PPUSH
45168: CALL 89655 0 3
45172: ST_TO_ADDR
// if not cratesNearbyPoint then
45173: LD_VAR 0 9
45177: NOT
45178: IFFALSE 45184
// exit ;
45180: POP
45181: POP
45182: GO 45641
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
45184: LD_ADDR_VAR 0 4
45188: PUSH
45189: LD_INT 22
45191: PUSH
45192: LD_VAR 0 5
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 3
45203: PUSH
45204: LD_INT 60
45206: PUSH
45207: EMPTY
45208: LIST
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 91
45216: PUSH
45217: LD_VAR 0 8
45221: PUSH
45222: LD_INT 6
45224: PUSH
45225: EMPTY
45226: LIST
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 2
45232: PUSH
45233: LD_INT 25
45235: PUSH
45236: LD_INT 2
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 25
45245: PUSH
45246: LD_INT 16
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: LIST
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: LIST
45262: LIST
45263: PPUSH
45264: CALL_OW 69
45268: PUSH
45269: LD_VAR 0 8
45273: PPUSH
45274: CALL_OW 313
45278: PPUSH
45279: LD_INT 3
45281: PUSH
45282: LD_INT 60
45284: PUSH
45285: EMPTY
45286: LIST
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 2
45294: PUSH
45295: LD_INT 25
45297: PUSH
45298: LD_INT 2
45300: PUSH
45301: EMPTY
45302: LIST
45303: LIST
45304: PUSH
45305: LD_INT 25
45307: PUSH
45308: LD_INT 16
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: LIST
45319: PUSH
45320: EMPTY
45321: LIST
45322: LIST
45323: PPUSH
45324: CALL_OW 72
45328: UNION
45329: ST_TO_ADDR
// if tmp then
45330: LD_VAR 0 4
45334: IFFALSE 45414
// begin tmp := ShrinkArray ( tmp , 3 ) ;
45336: LD_ADDR_VAR 0 4
45340: PUSH
45341: LD_VAR 0 4
45345: PPUSH
45346: LD_INT 3
45348: PPUSH
45349: CALL 87624 0 2
45353: ST_TO_ADDR
// for j in tmp do
45354: LD_ADDR_VAR 0 2
45358: PUSH
45359: LD_VAR 0 4
45363: PUSH
45364: FOR_IN
45365: IFFALSE 45408
// begin if IsInUnit ( j ) then
45367: LD_VAR 0 2
45371: PPUSH
45372: CALL_OW 310
45376: IFFALSE 45387
// ComExit ( j ) ;
45378: LD_VAR 0 2
45382: PPUSH
45383: CALL 87707 0 1
// AddComCollect ( j , x , y ) ;
45387: LD_VAR 0 2
45391: PPUSH
45392: LD_VAR 0 6
45396: PPUSH
45397: LD_VAR 0 7
45401: PPUSH
45402: CALL_OW 177
// end ;
45406: GO 45364
45408: POP
45409: POP
// exit ;
45410: POP
45411: POP
45412: GO 45641
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
45414: LD_ADDR_VAR 0 4
45418: PUSH
45419: LD_INT 22
45421: PUSH
45422: LD_VAR 0 5
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 91
45433: PUSH
45434: LD_VAR 0 8
45438: PUSH
45439: LD_INT 8
45441: PUSH
45442: EMPTY
45443: LIST
45444: LIST
45445: LIST
45446: PUSH
45447: LD_INT 2
45449: PUSH
45450: LD_INT 34
45452: PUSH
45453: LD_INT 12
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: LD_INT 34
45462: PUSH
45463: LD_INT 51
45465: PUSH
45466: EMPTY
45467: LIST
45468: LIST
45469: PUSH
45470: LD_INT 34
45472: PUSH
45473: LD_INT 32
45475: PUSH
45476: EMPTY
45477: LIST
45478: LIST
45479: PUSH
45480: LD_INT 34
45482: PUSH
45483: LD_INT 89
45485: PUSH
45486: EMPTY
45487: LIST
45488: LIST
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: LIST
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: LIST
45501: PPUSH
45502: CALL_OW 69
45506: ST_TO_ADDR
// if tmp then
45507: LD_VAR 0 4
45511: IFFALSE 45637
// begin for j in tmp do
45513: LD_ADDR_VAR 0 2
45517: PUSH
45518: LD_VAR 0 4
45522: PUSH
45523: FOR_IN
45524: IFFALSE 45635
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
45526: LD_VAR 0 2
45530: PPUSH
45531: CALL_OW 262
45535: PUSH
45536: LD_INT 3
45538: EQUAL
45539: PUSH
45540: LD_VAR 0 2
45544: PPUSH
45545: CALL_OW 261
45549: PUSH
45550: LD_INT 20
45552: GREATER
45553: OR
45554: PUSH
45555: LD_VAR 0 2
45559: PPUSH
45560: CALL_OW 314
45564: NOT
45565: AND
45566: PUSH
45567: LD_VAR 0 2
45571: PPUSH
45572: CALL_OW 263
45576: PUSH
45577: LD_INT 1
45579: NONEQUAL
45580: PUSH
45581: LD_VAR 0 2
45585: PPUSH
45586: CALL_OW 311
45590: OR
45591: AND
45592: IFFALSE 45633
// begin ComCollect ( j , x , y ) ;
45594: LD_VAR 0 2
45598: PPUSH
45599: LD_VAR 0 6
45603: PPUSH
45604: LD_VAR 0 7
45608: PPUSH
45609: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
45613: LD_VAR 0 2
45617: PPUSH
45618: LD_VAR 0 8
45622: PPUSH
45623: CALL_OW 172
// exit ;
45627: POP
45628: POP
45629: POP
45630: POP
45631: GO 45641
// end ;
45633: GO 45523
45635: POP
45636: POP
// end ; end ;
45637: GO 45012
45639: POP
45640: POP
// end ; end_of_file
45641: PPOPN 9
45643: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
45644: LD_INT 0
45646: PPUSH
45647: PPUSH
45648: PPUSH
45649: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
45650: LD_VAR 0 1
45654: PPUSH
45655: CALL_OW 264
45659: PUSH
45660: LD_INT 91
45662: EQUAL
45663: IFFALSE 45735
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
45665: LD_INT 68
45667: PPUSH
45668: LD_VAR 0 1
45672: PPUSH
45673: CALL_OW 255
45677: PPUSH
45678: CALL_OW 321
45682: PUSH
45683: LD_INT 2
45685: EQUAL
45686: IFFALSE 45698
// eff := 70 else
45688: LD_ADDR_VAR 0 4
45692: PUSH
45693: LD_INT 70
45695: ST_TO_ADDR
45696: GO 45706
// eff := 30 ;
45698: LD_ADDR_VAR 0 4
45702: PUSH
45703: LD_INT 30
45705: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
45706: LD_VAR 0 1
45710: PPUSH
45711: CALL_OW 250
45715: PPUSH
45716: LD_VAR 0 1
45720: PPUSH
45721: CALL_OW 251
45725: PPUSH
45726: LD_VAR 0 4
45730: PPUSH
45731: CALL_OW 495
// end ; end ;
45735: LD_VAR 0 2
45739: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
45740: LD_INT 0
45742: PPUSH
// end ;
45743: LD_VAR 0 4
45747: RET
// export function SOS_Command ( cmd ) ; begin
45748: LD_INT 0
45750: PPUSH
// end ;
45751: LD_VAR 0 2
45755: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
45756: LD_INT 0
45758: PPUSH
// end ;
45759: LD_VAR 0 6
45763: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
45764: LD_INT 0
45766: PPUSH
45767: PPUSH
// if not vehicle or not factory then
45768: LD_VAR 0 1
45772: NOT
45773: PUSH
45774: LD_VAR 0 2
45778: NOT
45779: OR
45780: IFFALSE 45784
// exit ;
45782: GO 46015
// if factoryWaypoints >= factory then
45784: LD_EXP 128
45788: PUSH
45789: LD_VAR 0 2
45793: GREATEREQUAL
45794: IFFALSE 46015
// if factoryWaypoints [ factory ] then
45796: LD_EXP 128
45800: PUSH
45801: LD_VAR 0 2
45805: ARRAY
45806: IFFALSE 46015
// begin if GetControl ( vehicle ) = control_manual then
45808: LD_VAR 0 1
45812: PPUSH
45813: CALL_OW 263
45817: PUSH
45818: LD_INT 1
45820: EQUAL
45821: IFFALSE 45902
// begin driver := IsDrivenBy ( vehicle ) ;
45823: LD_ADDR_VAR 0 4
45827: PUSH
45828: LD_VAR 0 1
45832: PPUSH
45833: CALL_OW 311
45837: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
45838: LD_VAR 0 4
45842: PPUSH
45843: LD_EXP 128
45847: PUSH
45848: LD_VAR 0 2
45852: ARRAY
45853: PUSH
45854: LD_INT 3
45856: ARRAY
45857: PPUSH
45858: LD_EXP 128
45862: PUSH
45863: LD_VAR 0 2
45867: ARRAY
45868: PUSH
45869: LD_INT 4
45871: ARRAY
45872: PPUSH
45873: CALL_OW 171
// AddComExitVehicle ( driver ) ;
45877: LD_VAR 0 4
45881: PPUSH
45882: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
45886: LD_VAR 0 4
45890: PPUSH
45891: LD_VAR 0 2
45895: PPUSH
45896: CALL_OW 180
// end else
45900: GO 46015
// if GetControl ( vehicle ) = control_remote then
45902: LD_VAR 0 1
45906: PPUSH
45907: CALL_OW 263
45911: PUSH
45912: LD_INT 2
45914: EQUAL
45915: IFFALSE 45976
// begin wait ( 0 0$2 ) ;
45917: LD_INT 70
45919: PPUSH
45920: CALL_OW 67
// if Connect ( vehicle ) then
45924: LD_VAR 0 1
45928: PPUSH
45929: CALL 58039 0 1
45933: IFFALSE 45974
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
45935: LD_VAR 0 1
45939: PPUSH
45940: LD_EXP 128
45944: PUSH
45945: LD_VAR 0 2
45949: ARRAY
45950: PUSH
45951: LD_INT 3
45953: ARRAY
45954: PPUSH
45955: LD_EXP 128
45959: PUSH
45960: LD_VAR 0 2
45964: ARRAY
45965: PUSH
45966: LD_INT 4
45968: ARRAY
45969: PPUSH
45970: CALL_OW 171
// end else
45974: GO 46015
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
45976: LD_VAR 0 1
45980: PPUSH
45981: LD_EXP 128
45985: PUSH
45986: LD_VAR 0 2
45990: ARRAY
45991: PUSH
45992: LD_INT 3
45994: ARRAY
45995: PPUSH
45996: LD_EXP 128
46000: PUSH
46001: LD_VAR 0 2
46005: ARRAY
46006: PUSH
46007: LD_INT 4
46009: ARRAY
46010: PPUSH
46011: CALL_OW 171
// end ; end ;
46015: LD_VAR 0 3
46019: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
46020: LD_INT 0
46022: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
46023: LD_VAR 0 1
46027: PUSH
46028: LD_INT 250
46030: EQUAL
46031: PUSH
46032: LD_VAR 0 2
46036: PPUSH
46037: CALL_OW 264
46041: PUSH
46042: LD_INT 81
46044: EQUAL
46045: AND
46046: IFFALSE 46067
// MinerPlaceMine ( unit , x , y ) ;
46048: LD_VAR 0 2
46052: PPUSH
46053: LD_VAR 0 4
46057: PPUSH
46058: LD_VAR 0 5
46062: PPUSH
46063: CALL 48452 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
46067: LD_VAR 0 1
46071: PUSH
46072: LD_INT 251
46074: EQUAL
46075: PUSH
46076: LD_VAR 0 2
46080: PPUSH
46081: CALL_OW 264
46085: PUSH
46086: LD_INT 81
46088: EQUAL
46089: AND
46090: IFFALSE 46111
// MinerDetonateMine ( unit , x , y ) ;
46092: LD_VAR 0 2
46096: PPUSH
46097: LD_VAR 0 4
46101: PPUSH
46102: LD_VAR 0 5
46106: PPUSH
46107: CALL 48727 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
46111: LD_VAR 0 1
46115: PUSH
46116: LD_INT 252
46118: EQUAL
46119: PUSH
46120: LD_VAR 0 2
46124: PPUSH
46125: CALL_OW 264
46129: PUSH
46130: LD_INT 81
46132: EQUAL
46133: AND
46134: IFFALSE 46155
// MinerCreateMinefield ( unit , x , y ) ;
46136: LD_VAR 0 2
46140: PPUSH
46141: LD_VAR 0 4
46145: PPUSH
46146: LD_VAR 0 5
46150: PPUSH
46151: CALL 49144 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
46155: LD_VAR 0 1
46159: PUSH
46160: LD_INT 253
46162: EQUAL
46163: PUSH
46164: LD_VAR 0 2
46168: PPUSH
46169: CALL_OW 257
46173: PUSH
46174: LD_INT 5
46176: EQUAL
46177: AND
46178: IFFALSE 46199
// ComBinocular ( unit , x , y ) ;
46180: LD_VAR 0 2
46184: PPUSH
46185: LD_VAR 0 4
46189: PPUSH
46190: LD_VAR 0 5
46194: PPUSH
46195: CALL 49513 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
46199: LD_VAR 0 1
46203: PUSH
46204: LD_INT 254
46206: EQUAL
46207: PUSH
46208: LD_VAR 0 2
46212: PPUSH
46213: CALL_OW 264
46217: PUSH
46218: LD_INT 99
46220: EQUAL
46221: AND
46222: PUSH
46223: LD_VAR 0 3
46227: PPUSH
46228: CALL_OW 263
46232: PUSH
46233: LD_INT 3
46235: EQUAL
46236: AND
46237: IFFALSE 46253
// HackDestroyVehicle ( unit , selectedUnit ) ;
46239: LD_VAR 0 2
46243: PPUSH
46244: LD_VAR 0 3
46248: PPUSH
46249: CALL 47816 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
46253: LD_VAR 0 1
46257: PUSH
46258: LD_INT 255
46260: EQUAL
46261: PUSH
46262: LD_VAR 0 2
46266: PPUSH
46267: CALL_OW 264
46271: PUSH
46272: LD_INT 14
46274: PUSH
46275: LD_INT 53
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: IN
46282: AND
46283: PUSH
46284: LD_VAR 0 4
46288: PPUSH
46289: LD_VAR 0 5
46293: PPUSH
46294: CALL_OW 488
46298: AND
46299: IFFALSE 46323
// CutTreeXYR ( unit , x , y , 12 ) ;
46301: LD_VAR 0 2
46305: PPUSH
46306: LD_VAR 0 4
46310: PPUSH
46311: LD_VAR 0 5
46315: PPUSH
46316: LD_INT 12
46318: PPUSH
46319: CALL 46386 0 4
// if cmd = 256 then
46323: LD_VAR 0 1
46327: PUSH
46328: LD_INT 256
46330: EQUAL
46331: IFFALSE 46352
// SetFactoryWaypoint ( unit , x , y ) ;
46333: LD_VAR 0 2
46337: PPUSH
46338: LD_VAR 0 4
46342: PPUSH
46343: LD_VAR 0 5
46347: PPUSH
46348: CALL 44333 0 3
// if cmd = 257 then
46352: LD_VAR 0 1
46356: PUSH
46357: LD_INT 257
46359: EQUAL
46360: IFFALSE 46381
// SetWarehouseGatheringPoint ( unit , x , y ) ;
46362: LD_VAR 0 2
46366: PPUSH
46367: LD_VAR 0 4
46371: PPUSH
46372: LD_VAR 0 5
46376: PPUSH
46377: CALL 44695 0 3
// end ;
46381: LD_VAR 0 6
46385: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
46386: LD_INT 0
46388: PPUSH
46389: PPUSH
46390: PPUSH
46391: PPUSH
46392: PPUSH
46393: PPUSH
46394: PPUSH
46395: PPUSH
46396: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
46397: LD_VAR 0 1
46401: NOT
46402: PUSH
46403: LD_VAR 0 2
46407: PPUSH
46408: LD_VAR 0 3
46412: PPUSH
46413: CALL_OW 488
46417: NOT
46418: OR
46419: PUSH
46420: LD_VAR 0 4
46424: NOT
46425: OR
46426: IFFALSE 46430
// exit ;
46428: GO 46770
// list := [ ] ;
46430: LD_ADDR_VAR 0 13
46434: PUSH
46435: EMPTY
46436: ST_TO_ADDR
// if x - r < 0 then
46437: LD_VAR 0 2
46441: PUSH
46442: LD_VAR 0 4
46446: MINUS
46447: PUSH
46448: LD_INT 0
46450: LESS
46451: IFFALSE 46463
// min_x := 0 else
46453: LD_ADDR_VAR 0 7
46457: PUSH
46458: LD_INT 0
46460: ST_TO_ADDR
46461: GO 46479
// min_x := x - r ;
46463: LD_ADDR_VAR 0 7
46467: PUSH
46468: LD_VAR 0 2
46472: PUSH
46473: LD_VAR 0 4
46477: MINUS
46478: ST_TO_ADDR
// if y - r < 0 then
46479: LD_VAR 0 3
46483: PUSH
46484: LD_VAR 0 4
46488: MINUS
46489: PUSH
46490: LD_INT 0
46492: LESS
46493: IFFALSE 46505
// min_y := 0 else
46495: LD_ADDR_VAR 0 8
46499: PUSH
46500: LD_INT 0
46502: ST_TO_ADDR
46503: GO 46521
// min_y := y - r ;
46505: LD_ADDR_VAR 0 8
46509: PUSH
46510: LD_VAR 0 3
46514: PUSH
46515: LD_VAR 0 4
46519: MINUS
46520: ST_TO_ADDR
// max_x := x + r ;
46521: LD_ADDR_VAR 0 9
46525: PUSH
46526: LD_VAR 0 2
46530: PUSH
46531: LD_VAR 0 4
46535: PLUS
46536: ST_TO_ADDR
// max_y := y + r ;
46537: LD_ADDR_VAR 0 10
46541: PUSH
46542: LD_VAR 0 3
46546: PUSH
46547: LD_VAR 0 4
46551: PLUS
46552: ST_TO_ADDR
// for _x = min_x to max_x do
46553: LD_ADDR_VAR 0 11
46557: PUSH
46558: DOUBLE
46559: LD_VAR 0 7
46563: DEC
46564: ST_TO_ADDR
46565: LD_VAR 0 9
46569: PUSH
46570: FOR_TO
46571: IFFALSE 46688
// for _y = min_y to max_y do
46573: LD_ADDR_VAR 0 12
46577: PUSH
46578: DOUBLE
46579: LD_VAR 0 8
46583: DEC
46584: ST_TO_ADDR
46585: LD_VAR 0 10
46589: PUSH
46590: FOR_TO
46591: IFFALSE 46684
// begin if not ValidHex ( _x , _y ) then
46593: LD_VAR 0 11
46597: PPUSH
46598: LD_VAR 0 12
46602: PPUSH
46603: CALL_OW 488
46607: NOT
46608: IFFALSE 46612
// continue ;
46610: GO 46590
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
46612: LD_VAR 0 11
46616: PPUSH
46617: LD_VAR 0 12
46621: PPUSH
46622: CALL_OW 351
46626: PUSH
46627: LD_VAR 0 11
46631: PPUSH
46632: LD_VAR 0 12
46636: PPUSH
46637: CALL_OW 554
46641: AND
46642: IFFALSE 46682
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
46644: LD_ADDR_VAR 0 13
46648: PUSH
46649: LD_VAR 0 13
46653: PPUSH
46654: LD_VAR 0 13
46658: PUSH
46659: LD_INT 1
46661: PLUS
46662: PPUSH
46663: LD_VAR 0 11
46667: PUSH
46668: LD_VAR 0 12
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PPUSH
46677: CALL_OW 2
46681: ST_TO_ADDR
// end ;
46682: GO 46590
46684: POP
46685: POP
46686: GO 46570
46688: POP
46689: POP
// if not list then
46690: LD_VAR 0 13
46694: NOT
46695: IFFALSE 46699
// exit ;
46697: GO 46770
// for i in list do
46699: LD_ADDR_VAR 0 6
46703: PUSH
46704: LD_VAR 0 13
46708: PUSH
46709: FOR_IN
46710: IFFALSE 46768
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
46712: LD_VAR 0 1
46716: PPUSH
46717: LD_STRING M
46719: PUSH
46720: LD_VAR 0 6
46724: PUSH
46725: LD_INT 1
46727: ARRAY
46728: PUSH
46729: LD_VAR 0 6
46733: PUSH
46734: LD_INT 2
46736: ARRAY
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 0
46746: PUSH
46747: LD_INT 0
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: LIST
46754: LIST
46755: LIST
46756: LIST
46757: LIST
46758: PUSH
46759: EMPTY
46760: LIST
46761: PPUSH
46762: CALL_OW 447
46766: GO 46709
46768: POP
46769: POP
// end ;
46770: LD_VAR 0 5
46774: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
46775: LD_EXP 131
46779: NOT
46780: IFFALSE 46830
46782: GO 46784
46784: DISABLE
// begin initHack := true ;
46785: LD_ADDR_EXP 131
46789: PUSH
46790: LD_INT 1
46792: ST_TO_ADDR
// hackTanks := [ ] ;
46793: LD_ADDR_EXP 132
46797: PUSH
46798: EMPTY
46799: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
46800: LD_ADDR_EXP 133
46804: PUSH
46805: EMPTY
46806: ST_TO_ADDR
// hackLimit := 3 ;
46807: LD_ADDR_EXP 134
46811: PUSH
46812: LD_INT 3
46814: ST_TO_ADDR
// hackDist := 12 ;
46815: LD_ADDR_EXP 135
46819: PUSH
46820: LD_INT 12
46822: ST_TO_ADDR
// hackCounter := [ ] ;
46823: LD_ADDR_EXP 136
46827: PUSH
46828: EMPTY
46829: ST_TO_ADDR
// end ;
46830: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
46831: LD_EXP 131
46835: PUSH
46836: LD_INT 34
46838: PUSH
46839: LD_INT 99
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PPUSH
46846: CALL_OW 69
46850: AND
46851: IFFALSE 47104
46853: GO 46855
46855: DISABLE
46856: LD_INT 0
46858: PPUSH
46859: PPUSH
// begin enable ;
46860: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
46861: LD_ADDR_VAR 0 1
46865: PUSH
46866: LD_INT 34
46868: PUSH
46869: LD_INT 99
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PPUSH
46876: CALL_OW 69
46880: PUSH
46881: FOR_IN
46882: IFFALSE 47102
// begin if not i in hackTanks then
46884: LD_VAR 0 1
46888: PUSH
46889: LD_EXP 132
46893: IN
46894: NOT
46895: IFFALSE 46978
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
46897: LD_ADDR_EXP 132
46901: PUSH
46902: LD_EXP 132
46906: PPUSH
46907: LD_EXP 132
46911: PUSH
46912: LD_INT 1
46914: PLUS
46915: PPUSH
46916: LD_VAR 0 1
46920: PPUSH
46921: CALL_OW 1
46925: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
46926: LD_ADDR_EXP 133
46930: PUSH
46931: LD_EXP 133
46935: PPUSH
46936: LD_EXP 133
46940: PUSH
46941: LD_INT 1
46943: PLUS
46944: PPUSH
46945: EMPTY
46946: PPUSH
46947: CALL_OW 1
46951: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
46952: LD_ADDR_EXP 136
46956: PUSH
46957: LD_EXP 136
46961: PPUSH
46962: LD_EXP 136
46966: PUSH
46967: LD_INT 1
46969: PLUS
46970: PPUSH
46971: EMPTY
46972: PPUSH
46973: CALL_OW 1
46977: ST_TO_ADDR
// end ; if not IsOk ( i ) then
46978: LD_VAR 0 1
46982: PPUSH
46983: CALL_OW 302
46987: NOT
46988: IFFALSE 47001
// begin HackUnlinkAll ( i ) ;
46990: LD_VAR 0 1
46994: PPUSH
46995: CALL 47107 0 1
// continue ;
46999: GO 46881
// end ; HackCheckCapturedStatus ( i ) ;
47001: LD_VAR 0 1
47005: PPUSH
47006: CALL 47550 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
47010: LD_ADDR_VAR 0 2
47014: PUSH
47015: LD_INT 81
47017: PUSH
47018: LD_VAR 0 1
47022: PPUSH
47023: CALL_OW 255
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 33
47034: PUSH
47035: LD_INT 3
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 91
47044: PUSH
47045: LD_VAR 0 1
47049: PUSH
47050: LD_EXP 135
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 50
47062: PUSH
47063: EMPTY
47064: LIST
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: LIST
47070: LIST
47071: PPUSH
47072: CALL_OW 69
47076: ST_TO_ADDR
// if not tmp then
47077: LD_VAR 0 2
47081: NOT
47082: IFFALSE 47086
// continue ;
47084: GO 46881
// HackLink ( i , tmp ) ;
47086: LD_VAR 0 1
47090: PPUSH
47091: LD_VAR 0 2
47095: PPUSH
47096: CALL 47243 0 2
// end ;
47100: GO 46881
47102: POP
47103: POP
// end ;
47104: PPOPN 2
47106: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
47107: LD_INT 0
47109: PPUSH
47110: PPUSH
47111: PPUSH
// if not hack in hackTanks then
47112: LD_VAR 0 1
47116: PUSH
47117: LD_EXP 132
47121: IN
47122: NOT
47123: IFFALSE 47127
// exit ;
47125: GO 47238
// index := GetElementIndex ( hackTanks , hack ) ;
47127: LD_ADDR_VAR 0 4
47131: PUSH
47132: LD_EXP 132
47136: PPUSH
47137: LD_VAR 0 1
47141: PPUSH
47142: CALL 54855 0 2
47146: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
47147: LD_EXP 133
47151: PUSH
47152: LD_VAR 0 4
47156: ARRAY
47157: IFFALSE 47238
// begin for i in hackTanksCaptured [ index ] do
47159: LD_ADDR_VAR 0 3
47163: PUSH
47164: LD_EXP 133
47168: PUSH
47169: LD_VAR 0 4
47173: ARRAY
47174: PUSH
47175: FOR_IN
47176: IFFALSE 47202
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
47178: LD_VAR 0 3
47182: PUSH
47183: LD_INT 1
47185: ARRAY
47186: PPUSH
47187: LD_VAR 0 3
47191: PUSH
47192: LD_INT 2
47194: ARRAY
47195: PPUSH
47196: CALL_OW 235
47200: GO 47175
47202: POP
47203: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
47204: LD_ADDR_EXP 133
47208: PUSH
47209: LD_EXP 133
47213: PPUSH
47214: LD_VAR 0 4
47218: PPUSH
47219: EMPTY
47220: PPUSH
47221: CALL_OW 1
47225: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
47226: LD_VAR 0 1
47230: PPUSH
47231: LD_INT 0
47233: PPUSH
47234: CALL_OW 505
// end ; end ;
47238: LD_VAR 0 2
47242: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
47243: LD_INT 0
47245: PPUSH
47246: PPUSH
47247: PPUSH
// if not hack in hackTanks or not vehicles then
47248: LD_VAR 0 1
47252: PUSH
47253: LD_EXP 132
47257: IN
47258: NOT
47259: PUSH
47260: LD_VAR 0 2
47264: NOT
47265: OR
47266: IFFALSE 47270
// exit ;
47268: GO 47545
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
47270: LD_ADDR_VAR 0 2
47274: PUSH
47275: LD_VAR 0 1
47279: PPUSH
47280: LD_VAR 0 2
47284: PPUSH
47285: LD_INT 1
47287: PPUSH
47288: LD_INT 1
47290: PPUSH
47291: CALL 55505 0 4
47295: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
47296: LD_ADDR_VAR 0 5
47300: PUSH
47301: LD_EXP 132
47305: PPUSH
47306: LD_VAR 0 1
47310: PPUSH
47311: CALL 54855 0 2
47315: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
47316: LD_EXP 133
47320: PUSH
47321: LD_VAR 0 5
47325: ARRAY
47326: PUSH
47327: LD_EXP 134
47331: LESS
47332: IFFALSE 47521
// begin for i := 1 to vehicles do
47334: LD_ADDR_VAR 0 4
47338: PUSH
47339: DOUBLE
47340: LD_INT 1
47342: DEC
47343: ST_TO_ADDR
47344: LD_VAR 0 2
47348: PUSH
47349: FOR_TO
47350: IFFALSE 47519
// begin if hackTanksCaptured [ index ] = hackLimit then
47352: LD_EXP 133
47356: PUSH
47357: LD_VAR 0 5
47361: ARRAY
47362: PUSH
47363: LD_EXP 134
47367: EQUAL
47368: IFFALSE 47372
// break ;
47370: GO 47519
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
47372: LD_ADDR_EXP 136
47376: PUSH
47377: LD_EXP 136
47381: PPUSH
47382: LD_VAR 0 5
47386: PPUSH
47387: LD_EXP 136
47391: PUSH
47392: LD_VAR 0 5
47396: ARRAY
47397: PUSH
47398: LD_INT 1
47400: PLUS
47401: PPUSH
47402: CALL_OW 1
47406: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
47407: LD_ADDR_EXP 133
47411: PUSH
47412: LD_EXP 133
47416: PPUSH
47417: LD_VAR 0 5
47421: PUSH
47422: LD_EXP 133
47426: PUSH
47427: LD_VAR 0 5
47431: ARRAY
47432: PUSH
47433: LD_INT 1
47435: PLUS
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PPUSH
47441: LD_VAR 0 2
47445: PUSH
47446: LD_VAR 0 4
47450: ARRAY
47451: PUSH
47452: LD_VAR 0 2
47456: PUSH
47457: LD_VAR 0 4
47461: ARRAY
47462: PPUSH
47463: CALL_OW 255
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PPUSH
47472: CALL 55070 0 3
47476: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
47477: LD_VAR 0 2
47481: PUSH
47482: LD_VAR 0 4
47486: ARRAY
47487: PPUSH
47488: LD_VAR 0 1
47492: PPUSH
47493: CALL_OW 255
47497: PPUSH
47498: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
47502: LD_VAR 0 2
47506: PUSH
47507: LD_VAR 0 4
47511: ARRAY
47512: PPUSH
47513: CALL_OW 141
// end ;
47517: GO 47349
47519: POP
47520: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
47521: LD_VAR 0 1
47525: PPUSH
47526: LD_EXP 133
47530: PUSH
47531: LD_VAR 0 5
47535: ARRAY
47536: PUSH
47537: LD_INT 0
47539: PLUS
47540: PPUSH
47541: CALL_OW 505
// end ;
47545: LD_VAR 0 3
47549: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
47550: LD_INT 0
47552: PPUSH
47553: PPUSH
47554: PPUSH
47555: PPUSH
// if not hack in hackTanks then
47556: LD_VAR 0 1
47560: PUSH
47561: LD_EXP 132
47565: IN
47566: NOT
47567: IFFALSE 47571
// exit ;
47569: GO 47811
// index := GetElementIndex ( hackTanks , hack ) ;
47571: LD_ADDR_VAR 0 4
47575: PUSH
47576: LD_EXP 132
47580: PPUSH
47581: LD_VAR 0 1
47585: PPUSH
47586: CALL 54855 0 2
47590: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
47591: LD_ADDR_VAR 0 3
47595: PUSH
47596: DOUBLE
47597: LD_EXP 133
47601: PUSH
47602: LD_VAR 0 4
47606: ARRAY
47607: INC
47608: ST_TO_ADDR
47609: LD_INT 1
47611: PUSH
47612: FOR_DOWNTO
47613: IFFALSE 47785
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
47615: LD_ADDR_VAR 0 5
47619: PUSH
47620: LD_EXP 133
47624: PUSH
47625: LD_VAR 0 4
47629: ARRAY
47630: PUSH
47631: LD_VAR 0 3
47635: ARRAY
47636: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
47637: LD_VAR 0 5
47641: PUSH
47642: LD_INT 1
47644: ARRAY
47645: PPUSH
47646: CALL_OW 302
47650: NOT
47651: PUSH
47652: LD_VAR 0 5
47656: PUSH
47657: LD_INT 1
47659: ARRAY
47660: PPUSH
47661: CALL_OW 255
47665: PUSH
47666: LD_VAR 0 1
47670: PPUSH
47671: CALL_OW 255
47675: NONEQUAL
47676: OR
47677: IFFALSE 47783
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
47679: LD_VAR 0 5
47683: PUSH
47684: LD_INT 1
47686: ARRAY
47687: PPUSH
47688: CALL_OW 305
47692: PUSH
47693: LD_VAR 0 5
47697: PUSH
47698: LD_INT 1
47700: ARRAY
47701: PPUSH
47702: CALL_OW 255
47706: PUSH
47707: LD_VAR 0 1
47711: PPUSH
47712: CALL_OW 255
47716: EQUAL
47717: AND
47718: IFFALSE 47742
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
47720: LD_VAR 0 5
47724: PUSH
47725: LD_INT 1
47727: ARRAY
47728: PPUSH
47729: LD_VAR 0 5
47733: PUSH
47734: LD_INT 2
47736: ARRAY
47737: PPUSH
47738: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
47742: LD_ADDR_EXP 133
47746: PUSH
47747: LD_EXP 133
47751: PPUSH
47752: LD_VAR 0 4
47756: PPUSH
47757: LD_EXP 133
47761: PUSH
47762: LD_VAR 0 4
47766: ARRAY
47767: PPUSH
47768: LD_VAR 0 3
47772: PPUSH
47773: CALL_OW 3
47777: PPUSH
47778: CALL_OW 1
47782: ST_TO_ADDR
// end ; end ;
47783: GO 47612
47785: POP
47786: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
47787: LD_VAR 0 1
47791: PPUSH
47792: LD_EXP 133
47796: PUSH
47797: LD_VAR 0 4
47801: ARRAY
47802: PUSH
47803: LD_INT 0
47805: PLUS
47806: PPUSH
47807: CALL_OW 505
// end ;
47811: LD_VAR 0 2
47815: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
47816: LD_INT 0
47818: PPUSH
47819: PPUSH
47820: PPUSH
47821: PPUSH
// if not hack in hackTanks then
47822: LD_VAR 0 1
47826: PUSH
47827: LD_EXP 132
47831: IN
47832: NOT
47833: IFFALSE 47837
// exit ;
47835: GO 47922
// index := GetElementIndex ( hackTanks , hack ) ;
47837: LD_ADDR_VAR 0 5
47841: PUSH
47842: LD_EXP 132
47846: PPUSH
47847: LD_VAR 0 1
47851: PPUSH
47852: CALL 54855 0 2
47856: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
47857: LD_ADDR_VAR 0 4
47861: PUSH
47862: DOUBLE
47863: LD_INT 1
47865: DEC
47866: ST_TO_ADDR
47867: LD_EXP 133
47871: PUSH
47872: LD_VAR 0 5
47876: ARRAY
47877: PUSH
47878: FOR_TO
47879: IFFALSE 47920
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
47881: LD_EXP 133
47885: PUSH
47886: LD_VAR 0 5
47890: ARRAY
47891: PUSH
47892: LD_VAR 0 4
47896: ARRAY
47897: PUSH
47898: LD_INT 1
47900: ARRAY
47901: PUSH
47902: LD_VAR 0 2
47906: EQUAL
47907: IFFALSE 47918
// KillUnit ( vehicle ) ;
47909: LD_VAR 0 2
47913: PPUSH
47914: CALL_OW 66
47918: GO 47878
47920: POP
47921: POP
// end ;
47922: LD_VAR 0 3
47926: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
47927: LD_EXP 137
47931: NOT
47932: IFFALSE 47967
47934: GO 47936
47936: DISABLE
// begin initMiner := true ;
47937: LD_ADDR_EXP 137
47941: PUSH
47942: LD_INT 1
47944: ST_TO_ADDR
// minersList := [ ] ;
47945: LD_ADDR_EXP 138
47949: PUSH
47950: EMPTY
47951: ST_TO_ADDR
// minerMinesList := [ ] ;
47952: LD_ADDR_EXP 139
47956: PUSH
47957: EMPTY
47958: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
47959: LD_ADDR_EXP 140
47963: PUSH
47964: LD_INT 5
47966: ST_TO_ADDR
// end ;
47967: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
47968: LD_EXP 137
47972: PUSH
47973: LD_INT 34
47975: PUSH
47976: LD_INT 81
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PPUSH
47983: CALL_OW 69
47987: AND
47988: IFFALSE 48449
47990: GO 47992
47992: DISABLE
47993: LD_INT 0
47995: PPUSH
47996: PPUSH
47997: PPUSH
47998: PPUSH
// begin enable ;
47999: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
48000: LD_ADDR_VAR 0 1
48004: PUSH
48005: LD_INT 34
48007: PUSH
48008: LD_INT 81
48010: PUSH
48011: EMPTY
48012: LIST
48013: LIST
48014: PPUSH
48015: CALL_OW 69
48019: PUSH
48020: FOR_IN
48021: IFFALSE 48093
// begin if not i in minersList then
48023: LD_VAR 0 1
48027: PUSH
48028: LD_EXP 138
48032: IN
48033: NOT
48034: IFFALSE 48091
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
48036: LD_ADDR_EXP 138
48040: PUSH
48041: LD_EXP 138
48045: PPUSH
48046: LD_EXP 138
48050: PUSH
48051: LD_INT 1
48053: PLUS
48054: PPUSH
48055: LD_VAR 0 1
48059: PPUSH
48060: CALL_OW 1
48064: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
48065: LD_ADDR_EXP 139
48069: PUSH
48070: LD_EXP 139
48074: PPUSH
48075: LD_EXP 139
48079: PUSH
48080: LD_INT 1
48082: PLUS
48083: PPUSH
48084: EMPTY
48085: PPUSH
48086: CALL_OW 1
48090: ST_TO_ADDR
// end end ;
48091: GO 48020
48093: POP
48094: POP
// for i := minerMinesList downto 1 do
48095: LD_ADDR_VAR 0 1
48099: PUSH
48100: DOUBLE
48101: LD_EXP 139
48105: INC
48106: ST_TO_ADDR
48107: LD_INT 1
48109: PUSH
48110: FOR_DOWNTO
48111: IFFALSE 48447
// begin if IsLive ( minersList [ i ] ) then
48113: LD_EXP 138
48117: PUSH
48118: LD_VAR 0 1
48122: ARRAY
48123: PPUSH
48124: CALL_OW 300
48128: IFFALSE 48156
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
48130: LD_EXP 138
48134: PUSH
48135: LD_VAR 0 1
48139: ARRAY
48140: PPUSH
48141: LD_EXP 139
48145: PUSH
48146: LD_VAR 0 1
48150: ARRAY
48151: PPUSH
48152: CALL_OW 505
// if not minerMinesList [ i ] then
48156: LD_EXP 139
48160: PUSH
48161: LD_VAR 0 1
48165: ARRAY
48166: NOT
48167: IFFALSE 48171
// continue ;
48169: GO 48110
// for j := minerMinesList [ i ] downto 1 do
48171: LD_ADDR_VAR 0 2
48175: PUSH
48176: DOUBLE
48177: LD_EXP 139
48181: PUSH
48182: LD_VAR 0 1
48186: ARRAY
48187: INC
48188: ST_TO_ADDR
48189: LD_INT 1
48191: PUSH
48192: FOR_DOWNTO
48193: IFFALSE 48443
// begin side := GetSide ( minersList [ i ] ) ;
48195: LD_ADDR_VAR 0 3
48199: PUSH
48200: LD_EXP 138
48204: PUSH
48205: LD_VAR 0 1
48209: ARRAY
48210: PPUSH
48211: CALL_OW 255
48215: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
48216: LD_ADDR_VAR 0 4
48220: PUSH
48221: LD_EXP 139
48225: PUSH
48226: LD_VAR 0 1
48230: ARRAY
48231: PUSH
48232: LD_VAR 0 2
48236: ARRAY
48237: PUSH
48238: LD_INT 1
48240: ARRAY
48241: PPUSH
48242: LD_EXP 139
48246: PUSH
48247: LD_VAR 0 1
48251: ARRAY
48252: PUSH
48253: LD_VAR 0 2
48257: ARRAY
48258: PUSH
48259: LD_INT 2
48261: ARRAY
48262: PPUSH
48263: CALL_OW 428
48267: ST_TO_ADDR
// if not tmp then
48268: LD_VAR 0 4
48272: NOT
48273: IFFALSE 48277
// continue ;
48275: GO 48192
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
48277: LD_VAR 0 4
48281: PUSH
48282: LD_INT 81
48284: PUSH
48285: LD_VAR 0 3
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PPUSH
48294: CALL_OW 69
48298: IN
48299: PUSH
48300: LD_EXP 139
48304: PUSH
48305: LD_VAR 0 1
48309: ARRAY
48310: PUSH
48311: LD_VAR 0 2
48315: ARRAY
48316: PUSH
48317: LD_INT 1
48319: ARRAY
48320: PPUSH
48321: LD_EXP 139
48325: PUSH
48326: LD_VAR 0 1
48330: ARRAY
48331: PUSH
48332: LD_VAR 0 2
48336: ARRAY
48337: PUSH
48338: LD_INT 2
48340: ARRAY
48341: PPUSH
48342: CALL_OW 458
48346: AND
48347: IFFALSE 48441
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
48349: LD_EXP 139
48353: PUSH
48354: LD_VAR 0 1
48358: ARRAY
48359: PUSH
48360: LD_VAR 0 2
48364: ARRAY
48365: PUSH
48366: LD_INT 1
48368: ARRAY
48369: PPUSH
48370: LD_EXP 139
48374: PUSH
48375: LD_VAR 0 1
48379: ARRAY
48380: PUSH
48381: LD_VAR 0 2
48385: ARRAY
48386: PUSH
48387: LD_INT 2
48389: ARRAY
48390: PPUSH
48391: LD_VAR 0 3
48395: PPUSH
48396: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
48400: LD_ADDR_EXP 139
48404: PUSH
48405: LD_EXP 139
48409: PPUSH
48410: LD_VAR 0 1
48414: PPUSH
48415: LD_EXP 139
48419: PUSH
48420: LD_VAR 0 1
48424: ARRAY
48425: PPUSH
48426: LD_VAR 0 2
48430: PPUSH
48431: CALL_OW 3
48435: PPUSH
48436: CALL_OW 1
48440: ST_TO_ADDR
// end ; end ;
48441: GO 48192
48443: POP
48444: POP
// end ;
48445: GO 48110
48447: POP
48448: POP
// end ;
48449: PPOPN 4
48451: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
48452: LD_INT 0
48454: PPUSH
48455: PPUSH
// result := false ;
48456: LD_ADDR_VAR 0 4
48460: PUSH
48461: LD_INT 0
48463: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
48464: LD_VAR 0 1
48468: PPUSH
48469: CALL_OW 264
48473: PUSH
48474: LD_INT 81
48476: EQUAL
48477: NOT
48478: IFFALSE 48482
// exit ;
48480: GO 48722
// index := GetElementIndex ( minersList , unit ) ;
48482: LD_ADDR_VAR 0 5
48486: PUSH
48487: LD_EXP 138
48491: PPUSH
48492: LD_VAR 0 1
48496: PPUSH
48497: CALL 54855 0 2
48501: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
48502: LD_EXP 139
48506: PUSH
48507: LD_VAR 0 5
48511: ARRAY
48512: PUSH
48513: LD_EXP 140
48517: GREATEREQUAL
48518: IFFALSE 48522
// exit ;
48520: GO 48722
// ComMoveXY ( unit , x , y ) ;
48522: LD_VAR 0 1
48526: PPUSH
48527: LD_VAR 0 2
48531: PPUSH
48532: LD_VAR 0 3
48536: PPUSH
48537: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
48541: LD_INT 35
48543: PPUSH
48544: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
48548: LD_VAR 0 1
48552: PPUSH
48553: LD_VAR 0 2
48557: PPUSH
48558: LD_VAR 0 3
48562: PPUSH
48563: CALL 86118 0 3
48567: NOT
48568: PUSH
48569: LD_VAR 0 1
48573: PPUSH
48574: CALL_OW 314
48578: AND
48579: IFFALSE 48583
// exit ;
48581: GO 48722
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
48583: LD_VAR 0 2
48587: PPUSH
48588: LD_VAR 0 3
48592: PPUSH
48593: CALL_OW 428
48597: PUSH
48598: LD_VAR 0 1
48602: EQUAL
48603: PUSH
48604: LD_VAR 0 1
48608: PPUSH
48609: CALL_OW 314
48613: NOT
48614: AND
48615: IFFALSE 48541
// PlaySoundXY ( x , y , PlantMine ) ;
48617: LD_VAR 0 2
48621: PPUSH
48622: LD_VAR 0 3
48626: PPUSH
48627: LD_STRING PlantMine
48629: PPUSH
48630: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
48634: LD_VAR 0 2
48638: PPUSH
48639: LD_VAR 0 3
48643: PPUSH
48644: LD_VAR 0 1
48648: PPUSH
48649: CALL_OW 255
48653: PPUSH
48654: LD_INT 0
48656: PPUSH
48657: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
48661: LD_ADDR_EXP 139
48665: PUSH
48666: LD_EXP 139
48670: PPUSH
48671: LD_VAR 0 5
48675: PUSH
48676: LD_EXP 139
48680: PUSH
48681: LD_VAR 0 5
48685: ARRAY
48686: PUSH
48687: LD_INT 1
48689: PLUS
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PPUSH
48695: LD_VAR 0 2
48699: PUSH
48700: LD_VAR 0 3
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: PPUSH
48709: CALL 55070 0 3
48713: ST_TO_ADDR
// result := true ;
48714: LD_ADDR_VAR 0 4
48718: PUSH
48719: LD_INT 1
48721: ST_TO_ADDR
// end ;
48722: LD_VAR 0 4
48726: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
48727: LD_INT 0
48729: PPUSH
48730: PPUSH
48731: PPUSH
// if not unit in minersList then
48732: LD_VAR 0 1
48736: PUSH
48737: LD_EXP 138
48741: IN
48742: NOT
48743: IFFALSE 48747
// exit ;
48745: GO 49139
// index := GetElementIndex ( minersList , unit ) ;
48747: LD_ADDR_VAR 0 6
48751: PUSH
48752: LD_EXP 138
48756: PPUSH
48757: LD_VAR 0 1
48761: PPUSH
48762: CALL 54855 0 2
48766: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
48767: LD_ADDR_VAR 0 5
48771: PUSH
48772: DOUBLE
48773: LD_EXP 139
48777: PUSH
48778: LD_VAR 0 6
48782: ARRAY
48783: INC
48784: ST_TO_ADDR
48785: LD_INT 1
48787: PUSH
48788: FOR_DOWNTO
48789: IFFALSE 48950
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
48791: LD_EXP 139
48795: PUSH
48796: LD_VAR 0 6
48800: ARRAY
48801: PUSH
48802: LD_VAR 0 5
48806: ARRAY
48807: PUSH
48808: LD_INT 1
48810: ARRAY
48811: PUSH
48812: LD_VAR 0 2
48816: EQUAL
48817: PUSH
48818: LD_EXP 139
48822: PUSH
48823: LD_VAR 0 6
48827: ARRAY
48828: PUSH
48829: LD_VAR 0 5
48833: ARRAY
48834: PUSH
48835: LD_INT 2
48837: ARRAY
48838: PUSH
48839: LD_VAR 0 3
48843: EQUAL
48844: AND
48845: IFFALSE 48948
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
48847: LD_EXP 139
48851: PUSH
48852: LD_VAR 0 6
48856: ARRAY
48857: PUSH
48858: LD_VAR 0 5
48862: ARRAY
48863: PUSH
48864: LD_INT 1
48866: ARRAY
48867: PPUSH
48868: LD_EXP 139
48872: PUSH
48873: LD_VAR 0 6
48877: ARRAY
48878: PUSH
48879: LD_VAR 0 5
48883: ARRAY
48884: PUSH
48885: LD_INT 2
48887: ARRAY
48888: PPUSH
48889: LD_VAR 0 1
48893: PPUSH
48894: CALL_OW 255
48898: PPUSH
48899: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
48903: LD_ADDR_EXP 139
48907: PUSH
48908: LD_EXP 139
48912: PPUSH
48913: LD_VAR 0 6
48917: PPUSH
48918: LD_EXP 139
48922: PUSH
48923: LD_VAR 0 6
48927: ARRAY
48928: PPUSH
48929: LD_VAR 0 5
48933: PPUSH
48934: CALL_OW 3
48938: PPUSH
48939: CALL_OW 1
48943: ST_TO_ADDR
// exit ;
48944: POP
48945: POP
48946: GO 49139
// end ; end ;
48948: GO 48788
48950: POP
48951: POP
// for i := minerMinesList [ index ] downto 1 do
48952: LD_ADDR_VAR 0 5
48956: PUSH
48957: DOUBLE
48958: LD_EXP 139
48962: PUSH
48963: LD_VAR 0 6
48967: ARRAY
48968: INC
48969: ST_TO_ADDR
48970: LD_INT 1
48972: PUSH
48973: FOR_DOWNTO
48974: IFFALSE 49137
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
48976: LD_EXP 139
48980: PUSH
48981: LD_VAR 0 6
48985: ARRAY
48986: PUSH
48987: LD_VAR 0 5
48991: ARRAY
48992: PUSH
48993: LD_INT 1
48995: ARRAY
48996: PPUSH
48997: LD_EXP 139
49001: PUSH
49002: LD_VAR 0 6
49006: ARRAY
49007: PUSH
49008: LD_VAR 0 5
49012: ARRAY
49013: PUSH
49014: LD_INT 2
49016: ARRAY
49017: PPUSH
49018: LD_VAR 0 2
49022: PPUSH
49023: LD_VAR 0 3
49027: PPUSH
49028: CALL_OW 298
49032: PUSH
49033: LD_INT 6
49035: LESS
49036: IFFALSE 49135
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
49038: LD_EXP 139
49042: PUSH
49043: LD_VAR 0 6
49047: ARRAY
49048: PUSH
49049: LD_VAR 0 5
49053: ARRAY
49054: PUSH
49055: LD_INT 1
49057: ARRAY
49058: PPUSH
49059: LD_EXP 139
49063: PUSH
49064: LD_VAR 0 6
49068: ARRAY
49069: PUSH
49070: LD_VAR 0 5
49074: ARRAY
49075: PUSH
49076: LD_INT 2
49078: ARRAY
49079: PPUSH
49080: LD_VAR 0 1
49084: PPUSH
49085: CALL_OW 255
49089: PPUSH
49090: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
49094: LD_ADDR_EXP 139
49098: PUSH
49099: LD_EXP 139
49103: PPUSH
49104: LD_VAR 0 6
49108: PPUSH
49109: LD_EXP 139
49113: PUSH
49114: LD_VAR 0 6
49118: ARRAY
49119: PPUSH
49120: LD_VAR 0 5
49124: PPUSH
49125: CALL_OW 3
49129: PPUSH
49130: CALL_OW 1
49134: ST_TO_ADDR
// end ; end ;
49135: GO 48973
49137: POP
49138: POP
// end ;
49139: LD_VAR 0 4
49143: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
49144: LD_INT 0
49146: PPUSH
49147: PPUSH
49148: PPUSH
49149: PPUSH
49150: PPUSH
49151: PPUSH
49152: PPUSH
49153: PPUSH
49154: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
49155: LD_VAR 0 1
49159: PPUSH
49160: CALL_OW 264
49164: PUSH
49165: LD_INT 81
49167: EQUAL
49168: NOT
49169: PUSH
49170: LD_VAR 0 1
49174: PUSH
49175: LD_EXP 138
49179: IN
49180: NOT
49181: OR
49182: IFFALSE 49186
// exit ;
49184: GO 49508
// index := GetElementIndex ( minersList , unit ) ;
49186: LD_ADDR_VAR 0 6
49190: PUSH
49191: LD_EXP 138
49195: PPUSH
49196: LD_VAR 0 1
49200: PPUSH
49201: CALL 54855 0 2
49205: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
49206: LD_ADDR_VAR 0 8
49210: PUSH
49211: LD_EXP 140
49215: PUSH
49216: LD_EXP 139
49220: PUSH
49221: LD_VAR 0 6
49225: ARRAY
49226: MINUS
49227: ST_TO_ADDR
// if not minesFreeAmount then
49228: LD_VAR 0 8
49232: NOT
49233: IFFALSE 49237
// exit ;
49235: GO 49508
// tmp := [ ] ;
49237: LD_ADDR_VAR 0 7
49241: PUSH
49242: EMPTY
49243: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
49244: LD_ADDR_VAR 0 5
49248: PUSH
49249: DOUBLE
49250: LD_INT 1
49252: DEC
49253: ST_TO_ADDR
49254: LD_VAR 0 8
49258: PUSH
49259: FOR_TO
49260: IFFALSE 49455
// begin _d := rand ( 0 , 5 ) ;
49262: LD_ADDR_VAR 0 11
49266: PUSH
49267: LD_INT 0
49269: PPUSH
49270: LD_INT 5
49272: PPUSH
49273: CALL_OW 12
49277: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
49278: LD_ADDR_VAR 0 12
49282: PUSH
49283: LD_INT 2
49285: PPUSH
49286: LD_INT 6
49288: PPUSH
49289: CALL_OW 12
49293: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
49294: LD_ADDR_VAR 0 9
49298: PUSH
49299: LD_VAR 0 2
49303: PPUSH
49304: LD_VAR 0 11
49308: PPUSH
49309: LD_VAR 0 12
49313: PPUSH
49314: CALL_OW 272
49318: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
49319: LD_ADDR_VAR 0 10
49323: PUSH
49324: LD_VAR 0 3
49328: PPUSH
49329: LD_VAR 0 11
49333: PPUSH
49334: LD_VAR 0 12
49338: PPUSH
49339: CALL_OW 273
49343: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
49344: LD_VAR 0 9
49348: PPUSH
49349: LD_VAR 0 10
49353: PPUSH
49354: CALL_OW 488
49358: PUSH
49359: LD_VAR 0 9
49363: PUSH
49364: LD_VAR 0 10
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_VAR 0 7
49377: IN
49378: NOT
49379: AND
49380: PUSH
49381: LD_VAR 0 9
49385: PPUSH
49386: LD_VAR 0 10
49390: PPUSH
49391: CALL_OW 458
49395: NOT
49396: AND
49397: IFFALSE 49439
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
49399: LD_ADDR_VAR 0 7
49403: PUSH
49404: LD_VAR 0 7
49408: PPUSH
49409: LD_VAR 0 7
49413: PUSH
49414: LD_INT 1
49416: PLUS
49417: PPUSH
49418: LD_VAR 0 9
49422: PUSH
49423: LD_VAR 0 10
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PPUSH
49432: CALL_OW 1
49436: ST_TO_ADDR
49437: GO 49453
// i := i - 1 ;
49439: LD_ADDR_VAR 0 5
49443: PUSH
49444: LD_VAR 0 5
49448: PUSH
49449: LD_INT 1
49451: MINUS
49452: ST_TO_ADDR
// end ;
49453: GO 49259
49455: POP
49456: POP
// for i in tmp do
49457: LD_ADDR_VAR 0 5
49461: PUSH
49462: LD_VAR 0 7
49466: PUSH
49467: FOR_IN
49468: IFFALSE 49506
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
49470: LD_VAR 0 1
49474: PPUSH
49475: LD_VAR 0 5
49479: PUSH
49480: LD_INT 1
49482: ARRAY
49483: PPUSH
49484: LD_VAR 0 5
49488: PUSH
49489: LD_INT 2
49491: ARRAY
49492: PPUSH
49493: CALL 48452 0 3
49497: NOT
49498: IFFALSE 49504
// exit ;
49500: POP
49501: POP
49502: GO 49508
49504: GO 49467
49506: POP
49507: POP
// end ;
49508: LD_VAR 0 4
49512: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
49513: LD_INT 0
49515: PPUSH
49516: PPUSH
49517: PPUSH
49518: PPUSH
49519: PPUSH
49520: PPUSH
49521: PPUSH
// if not GetClass ( unit ) = class_sniper then
49522: LD_VAR 0 1
49526: PPUSH
49527: CALL_OW 257
49531: PUSH
49532: LD_INT 5
49534: EQUAL
49535: NOT
49536: IFFALSE 49540
// exit ;
49538: GO 49928
// dist := 8 ;
49540: LD_ADDR_VAR 0 5
49544: PUSH
49545: LD_INT 8
49547: ST_TO_ADDR
// viewRange := 12 ;
49548: LD_ADDR_VAR 0 7
49552: PUSH
49553: LD_INT 12
49555: ST_TO_ADDR
// side := GetSide ( unit ) ;
49556: LD_ADDR_VAR 0 6
49560: PUSH
49561: LD_VAR 0 1
49565: PPUSH
49566: CALL_OW 255
49570: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
49571: LD_INT 61
49573: PPUSH
49574: LD_VAR 0 6
49578: PPUSH
49579: CALL_OW 321
49583: PUSH
49584: LD_INT 2
49586: EQUAL
49587: IFFALSE 49597
// viewRange := 16 ;
49589: LD_ADDR_VAR 0 7
49593: PUSH
49594: LD_INT 16
49596: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
49597: LD_VAR 0 1
49601: PPUSH
49602: LD_VAR 0 2
49606: PPUSH
49607: LD_VAR 0 3
49611: PPUSH
49612: CALL_OW 297
49616: PUSH
49617: LD_VAR 0 5
49621: GREATER
49622: IFFALSE 49701
// begin ComMoveXY ( unit , x , y ) ;
49624: LD_VAR 0 1
49628: PPUSH
49629: LD_VAR 0 2
49633: PPUSH
49634: LD_VAR 0 3
49638: PPUSH
49639: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
49643: LD_INT 35
49645: PPUSH
49646: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
49650: LD_VAR 0 1
49654: PPUSH
49655: LD_VAR 0 2
49659: PPUSH
49660: LD_VAR 0 3
49664: PPUSH
49665: CALL 86118 0 3
49669: NOT
49670: IFFALSE 49674
// exit ;
49672: GO 49928
// until GetDistUnitXY ( unit , x , y ) < dist ;
49674: LD_VAR 0 1
49678: PPUSH
49679: LD_VAR 0 2
49683: PPUSH
49684: LD_VAR 0 3
49688: PPUSH
49689: CALL_OW 297
49693: PUSH
49694: LD_VAR 0 5
49698: LESS
49699: IFFALSE 49643
// end ; ComTurnXY ( unit , x , y ) ;
49701: LD_VAR 0 1
49705: PPUSH
49706: LD_VAR 0 2
49710: PPUSH
49711: LD_VAR 0 3
49715: PPUSH
49716: CALL_OW 118
// wait ( 5 ) ;
49720: LD_INT 5
49722: PPUSH
49723: CALL_OW 67
// _d := GetDir ( unit ) ;
49727: LD_ADDR_VAR 0 10
49731: PUSH
49732: LD_VAR 0 1
49736: PPUSH
49737: CALL_OW 254
49741: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
49742: LD_ADDR_VAR 0 8
49746: PUSH
49747: LD_VAR 0 1
49751: PPUSH
49752: CALL_OW 250
49756: PPUSH
49757: LD_VAR 0 10
49761: PPUSH
49762: LD_VAR 0 5
49766: PPUSH
49767: CALL_OW 272
49771: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
49772: LD_ADDR_VAR 0 9
49776: PUSH
49777: LD_VAR 0 1
49781: PPUSH
49782: CALL_OW 251
49786: PPUSH
49787: LD_VAR 0 10
49791: PPUSH
49792: LD_VAR 0 5
49796: PPUSH
49797: CALL_OW 273
49801: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
49802: LD_VAR 0 8
49806: PPUSH
49807: LD_VAR 0 9
49811: PPUSH
49812: CALL_OW 488
49816: NOT
49817: IFFALSE 49821
// exit ;
49819: GO 49928
// ComAnimCustom ( unit , 1 ) ;
49821: LD_VAR 0 1
49825: PPUSH
49826: LD_INT 1
49828: PPUSH
49829: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
49833: LD_VAR 0 8
49837: PPUSH
49838: LD_VAR 0 9
49842: PPUSH
49843: LD_VAR 0 6
49847: PPUSH
49848: LD_VAR 0 7
49852: PPUSH
49853: CALL_OW 330
// repeat wait ( 1 ) ;
49857: LD_INT 1
49859: PPUSH
49860: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
49864: LD_VAR 0 1
49868: PPUSH
49869: CALL_OW 316
49873: PUSH
49874: LD_VAR 0 1
49878: PPUSH
49879: CALL_OW 314
49883: OR
49884: PUSH
49885: LD_VAR 0 1
49889: PPUSH
49890: CALL_OW 302
49894: NOT
49895: OR
49896: PUSH
49897: LD_VAR 0 1
49901: PPUSH
49902: CALL_OW 301
49906: OR
49907: IFFALSE 49857
// RemoveSeeing ( _x , _y , side ) ;
49909: LD_VAR 0 8
49913: PPUSH
49914: LD_VAR 0 9
49918: PPUSH
49919: LD_VAR 0 6
49923: PPUSH
49924: CALL_OW 331
// end ; end_of_file
49928: LD_VAR 0 4
49932: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
49933: LD_INT 0
49935: PPUSH
49936: PPUSH
// if exist_mode then
49937: LD_VAR 0 2
49941: IFFALSE 49966
// unit := CreateCharacter ( prefix & ident ) else
49943: LD_ADDR_VAR 0 5
49947: PUSH
49948: LD_VAR 0 3
49952: PUSH
49953: LD_VAR 0 1
49957: STR
49958: PPUSH
49959: CALL_OW 34
49963: ST_TO_ADDR
49964: GO 49981
// unit := NewCharacter ( ident ) ;
49966: LD_ADDR_VAR 0 5
49970: PUSH
49971: LD_VAR 0 1
49975: PPUSH
49976: CALL_OW 25
49980: ST_TO_ADDR
// result := unit ;
49981: LD_ADDR_VAR 0 4
49985: PUSH
49986: LD_VAR 0 5
49990: ST_TO_ADDR
// end ;
49991: LD_VAR 0 4
49995: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
49996: LD_INT 0
49998: PPUSH
49999: PPUSH
// if not side or not nation then
50000: LD_VAR 0 1
50004: NOT
50005: PUSH
50006: LD_VAR 0 2
50010: NOT
50011: OR
50012: IFFALSE 50016
// exit ;
50014: GO 50784
// case nation of nation_american :
50016: LD_VAR 0 2
50020: PUSH
50021: LD_INT 1
50023: DOUBLE
50024: EQUAL
50025: IFTRUE 50029
50027: GO 50243
50029: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
50030: LD_ADDR_VAR 0 4
50034: PUSH
50035: LD_INT 35
50037: PUSH
50038: LD_INT 45
50040: PUSH
50041: LD_INT 46
50043: PUSH
50044: LD_INT 47
50046: PUSH
50047: LD_INT 82
50049: PUSH
50050: LD_INT 83
50052: PUSH
50053: LD_INT 84
50055: PUSH
50056: LD_INT 85
50058: PUSH
50059: LD_INT 86
50061: PUSH
50062: LD_INT 1
50064: PUSH
50065: LD_INT 2
50067: PUSH
50068: LD_INT 6
50070: PUSH
50071: LD_INT 15
50073: PUSH
50074: LD_INT 16
50076: PUSH
50077: LD_INT 7
50079: PUSH
50080: LD_INT 12
50082: PUSH
50083: LD_INT 13
50085: PUSH
50086: LD_INT 10
50088: PUSH
50089: LD_INT 14
50091: PUSH
50092: LD_INT 20
50094: PUSH
50095: LD_INT 21
50097: PUSH
50098: LD_INT 22
50100: PUSH
50101: LD_INT 25
50103: PUSH
50104: LD_INT 32
50106: PUSH
50107: LD_INT 27
50109: PUSH
50110: LD_INT 36
50112: PUSH
50113: LD_INT 69
50115: PUSH
50116: LD_INT 39
50118: PUSH
50119: LD_INT 34
50121: PUSH
50122: LD_INT 40
50124: PUSH
50125: LD_INT 48
50127: PUSH
50128: LD_INT 49
50130: PUSH
50131: LD_INT 50
50133: PUSH
50134: LD_INT 51
50136: PUSH
50137: LD_INT 52
50139: PUSH
50140: LD_INT 53
50142: PUSH
50143: LD_INT 54
50145: PUSH
50146: LD_INT 55
50148: PUSH
50149: LD_INT 56
50151: PUSH
50152: LD_INT 57
50154: PUSH
50155: LD_INT 58
50157: PUSH
50158: LD_INT 59
50160: PUSH
50161: LD_INT 60
50163: PUSH
50164: LD_INT 61
50166: PUSH
50167: LD_INT 62
50169: PUSH
50170: LD_INT 80
50172: PUSH
50173: LD_INT 82
50175: PUSH
50176: LD_INT 83
50178: PUSH
50179: LD_INT 84
50181: PUSH
50182: LD_INT 85
50184: PUSH
50185: LD_INT 86
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: LIST
50192: LIST
50193: LIST
50194: LIST
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: ST_TO_ADDR
50241: GO 50708
50243: LD_INT 2
50245: DOUBLE
50246: EQUAL
50247: IFTRUE 50251
50249: GO 50477
50251: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
50252: LD_ADDR_VAR 0 4
50256: PUSH
50257: LD_INT 35
50259: PUSH
50260: LD_INT 45
50262: PUSH
50263: LD_INT 46
50265: PUSH
50266: LD_INT 47
50268: PUSH
50269: LD_INT 82
50271: PUSH
50272: LD_INT 83
50274: PUSH
50275: LD_INT 84
50277: PUSH
50278: LD_INT 85
50280: PUSH
50281: LD_INT 87
50283: PUSH
50284: LD_INT 70
50286: PUSH
50287: LD_INT 1
50289: PUSH
50290: LD_INT 11
50292: PUSH
50293: LD_INT 3
50295: PUSH
50296: LD_INT 4
50298: PUSH
50299: LD_INT 5
50301: PUSH
50302: LD_INT 6
50304: PUSH
50305: LD_INT 15
50307: PUSH
50308: LD_INT 18
50310: PUSH
50311: LD_INT 7
50313: PUSH
50314: LD_INT 17
50316: PUSH
50317: LD_INT 8
50319: PUSH
50320: LD_INT 20
50322: PUSH
50323: LD_INT 21
50325: PUSH
50326: LD_INT 22
50328: PUSH
50329: LD_INT 72
50331: PUSH
50332: LD_INT 26
50334: PUSH
50335: LD_INT 69
50337: PUSH
50338: LD_INT 39
50340: PUSH
50341: LD_INT 40
50343: PUSH
50344: LD_INT 41
50346: PUSH
50347: LD_INT 42
50349: PUSH
50350: LD_INT 43
50352: PUSH
50353: LD_INT 48
50355: PUSH
50356: LD_INT 49
50358: PUSH
50359: LD_INT 50
50361: PUSH
50362: LD_INT 51
50364: PUSH
50365: LD_INT 52
50367: PUSH
50368: LD_INT 53
50370: PUSH
50371: LD_INT 54
50373: PUSH
50374: LD_INT 55
50376: PUSH
50377: LD_INT 56
50379: PUSH
50380: LD_INT 60
50382: PUSH
50383: LD_INT 61
50385: PUSH
50386: LD_INT 62
50388: PUSH
50389: LD_INT 66
50391: PUSH
50392: LD_INT 67
50394: PUSH
50395: LD_INT 68
50397: PUSH
50398: LD_INT 81
50400: PUSH
50401: LD_INT 82
50403: PUSH
50404: LD_INT 83
50406: PUSH
50407: LD_INT 84
50409: PUSH
50410: LD_INT 85
50412: PUSH
50413: LD_INT 87
50415: PUSH
50416: LD_INT 88
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: LIST
50439: LIST
50440: LIST
50441: LIST
50442: LIST
50443: LIST
50444: LIST
50445: LIST
50446: LIST
50447: LIST
50448: LIST
50449: LIST
50450: LIST
50451: LIST
50452: LIST
50453: LIST
50454: LIST
50455: LIST
50456: LIST
50457: LIST
50458: LIST
50459: LIST
50460: LIST
50461: LIST
50462: LIST
50463: LIST
50464: LIST
50465: LIST
50466: LIST
50467: LIST
50468: LIST
50469: LIST
50470: LIST
50471: LIST
50472: LIST
50473: LIST
50474: ST_TO_ADDR
50475: GO 50708
50477: LD_INT 3
50479: DOUBLE
50480: EQUAL
50481: IFTRUE 50485
50483: GO 50707
50485: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
50486: LD_ADDR_VAR 0 4
50490: PUSH
50491: LD_INT 46
50493: PUSH
50494: LD_INT 47
50496: PUSH
50497: LD_INT 1
50499: PUSH
50500: LD_INT 2
50502: PUSH
50503: LD_INT 82
50505: PUSH
50506: LD_INT 83
50508: PUSH
50509: LD_INT 84
50511: PUSH
50512: LD_INT 85
50514: PUSH
50515: LD_INT 86
50517: PUSH
50518: LD_INT 11
50520: PUSH
50521: LD_INT 9
50523: PUSH
50524: LD_INT 20
50526: PUSH
50527: LD_INT 19
50529: PUSH
50530: LD_INT 21
50532: PUSH
50533: LD_INT 24
50535: PUSH
50536: LD_INT 22
50538: PUSH
50539: LD_INT 25
50541: PUSH
50542: LD_INT 28
50544: PUSH
50545: LD_INT 29
50547: PUSH
50548: LD_INT 30
50550: PUSH
50551: LD_INT 31
50553: PUSH
50554: LD_INT 37
50556: PUSH
50557: LD_INT 38
50559: PUSH
50560: LD_INT 32
50562: PUSH
50563: LD_INT 27
50565: PUSH
50566: LD_INT 33
50568: PUSH
50569: LD_INT 69
50571: PUSH
50572: LD_INT 39
50574: PUSH
50575: LD_INT 34
50577: PUSH
50578: LD_INT 40
50580: PUSH
50581: LD_INT 71
50583: PUSH
50584: LD_INT 23
50586: PUSH
50587: LD_INT 44
50589: PUSH
50590: LD_INT 48
50592: PUSH
50593: LD_INT 49
50595: PUSH
50596: LD_INT 50
50598: PUSH
50599: LD_INT 51
50601: PUSH
50602: LD_INT 52
50604: PUSH
50605: LD_INT 53
50607: PUSH
50608: LD_INT 54
50610: PUSH
50611: LD_INT 55
50613: PUSH
50614: LD_INT 56
50616: PUSH
50617: LD_INT 57
50619: PUSH
50620: LD_INT 58
50622: PUSH
50623: LD_INT 59
50625: PUSH
50626: LD_INT 63
50628: PUSH
50629: LD_INT 64
50631: PUSH
50632: LD_INT 65
50634: PUSH
50635: LD_INT 82
50637: PUSH
50638: LD_INT 83
50640: PUSH
50641: LD_INT 84
50643: PUSH
50644: LD_INT 85
50646: PUSH
50647: LD_INT 86
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: LIST
50654: LIST
50655: LIST
50656: LIST
50657: LIST
50658: LIST
50659: LIST
50660: LIST
50661: LIST
50662: LIST
50663: LIST
50664: LIST
50665: LIST
50666: LIST
50667: LIST
50668: LIST
50669: LIST
50670: LIST
50671: LIST
50672: LIST
50673: LIST
50674: LIST
50675: LIST
50676: LIST
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: ST_TO_ADDR
50705: GO 50708
50707: POP
// if state > - 1 and state < 3 then
50708: LD_VAR 0 3
50712: PUSH
50713: LD_INT 1
50715: NEG
50716: GREATER
50717: PUSH
50718: LD_VAR 0 3
50722: PUSH
50723: LD_INT 3
50725: LESS
50726: AND
50727: IFFALSE 50784
// for i in result do
50729: LD_ADDR_VAR 0 5
50733: PUSH
50734: LD_VAR 0 4
50738: PUSH
50739: FOR_IN
50740: IFFALSE 50782
// if GetTech ( i , side ) <> state then
50742: LD_VAR 0 5
50746: PPUSH
50747: LD_VAR 0 1
50751: PPUSH
50752: CALL_OW 321
50756: PUSH
50757: LD_VAR 0 3
50761: NONEQUAL
50762: IFFALSE 50780
// result := result diff i ;
50764: LD_ADDR_VAR 0 4
50768: PUSH
50769: LD_VAR 0 4
50773: PUSH
50774: LD_VAR 0 5
50778: DIFF
50779: ST_TO_ADDR
50780: GO 50739
50782: POP
50783: POP
// end ;
50784: LD_VAR 0 4
50788: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
50789: LD_INT 0
50791: PPUSH
50792: PPUSH
50793: PPUSH
// result := true ;
50794: LD_ADDR_VAR 0 3
50798: PUSH
50799: LD_INT 1
50801: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
50802: LD_ADDR_VAR 0 5
50806: PUSH
50807: LD_VAR 0 2
50811: PPUSH
50812: CALL_OW 480
50816: ST_TO_ADDR
// if not tmp then
50817: LD_VAR 0 5
50821: NOT
50822: IFFALSE 50826
// exit ;
50824: GO 50875
// for i in tmp do
50826: LD_ADDR_VAR 0 4
50830: PUSH
50831: LD_VAR 0 5
50835: PUSH
50836: FOR_IN
50837: IFFALSE 50873
// if GetTech ( i , side ) <> state_researched then
50839: LD_VAR 0 4
50843: PPUSH
50844: LD_VAR 0 1
50848: PPUSH
50849: CALL_OW 321
50853: PUSH
50854: LD_INT 2
50856: NONEQUAL
50857: IFFALSE 50871
// begin result := false ;
50859: LD_ADDR_VAR 0 3
50863: PUSH
50864: LD_INT 0
50866: ST_TO_ADDR
// exit ;
50867: POP
50868: POP
50869: GO 50875
// end ;
50871: GO 50836
50873: POP
50874: POP
// end ;
50875: LD_VAR 0 3
50879: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
50880: LD_INT 0
50882: PPUSH
50883: PPUSH
50884: PPUSH
50885: PPUSH
50886: PPUSH
50887: PPUSH
50888: PPUSH
50889: PPUSH
50890: PPUSH
50891: PPUSH
50892: PPUSH
50893: PPUSH
50894: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
50895: LD_VAR 0 1
50899: NOT
50900: PUSH
50901: LD_VAR 0 1
50905: PPUSH
50906: CALL_OW 257
50910: PUSH
50911: LD_INT 9
50913: NONEQUAL
50914: OR
50915: IFFALSE 50919
// exit ;
50917: GO 51492
// side := GetSide ( unit ) ;
50919: LD_ADDR_VAR 0 9
50923: PUSH
50924: LD_VAR 0 1
50928: PPUSH
50929: CALL_OW 255
50933: ST_TO_ADDR
// tech_space := tech_spacanom ;
50934: LD_ADDR_VAR 0 12
50938: PUSH
50939: LD_INT 29
50941: ST_TO_ADDR
// tech_time := tech_taurad ;
50942: LD_ADDR_VAR 0 13
50946: PUSH
50947: LD_INT 28
50949: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
50950: LD_ADDR_VAR 0 11
50954: PUSH
50955: LD_VAR 0 1
50959: PPUSH
50960: CALL_OW 310
50964: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
50965: LD_VAR 0 11
50969: PPUSH
50970: CALL_OW 247
50974: PUSH
50975: LD_INT 2
50977: EQUAL
50978: IFFALSE 50982
// exit ;
50980: GO 51492
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
50982: LD_ADDR_VAR 0 8
50986: PUSH
50987: LD_INT 81
50989: PUSH
50990: LD_VAR 0 9
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 3
51001: PUSH
51002: LD_INT 21
51004: PUSH
51005: LD_INT 3
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: EMPTY
51013: LIST
51014: LIST
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PPUSH
51020: CALL_OW 69
51024: ST_TO_ADDR
// if not tmp then
51025: LD_VAR 0 8
51029: NOT
51030: IFFALSE 51034
// exit ;
51032: GO 51492
// if in_unit then
51034: LD_VAR 0 11
51038: IFFALSE 51062
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
51040: LD_ADDR_VAR 0 10
51044: PUSH
51045: LD_VAR 0 8
51049: PPUSH
51050: LD_VAR 0 11
51054: PPUSH
51055: CALL_OW 74
51059: ST_TO_ADDR
51060: GO 51082
// enemy := NearestUnitToUnit ( tmp , unit ) ;
51062: LD_ADDR_VAR 0 10
51066: PUSH
51067: LD_VAR 0 8
51071: PPUSH
51072: LD_VAR 0 1
51076: PPUSH
51077: CALL_OW 74
51081: ST_TO_ADDR
// if not enemy then
51082: LD_VAR 0 10
51086: NOT
51087: IFFALSE 51091
// exit ;
51089: GO 51492
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
51091: LD_VAR 0 11
51095: PUSH
51096: LD_VAR 0 11
51100: PPUSH
51101: LD_VAR 0 10
51105: PPUSH
51106: CALL_OW 296
51110: PUSH
51111: LD_INT 13
51113: GREATER
51114: AND
51115: PUSH
51116: LD_VAR 0 1
51120: PPUSH
51121: LD_VAR 0 10
51125: PPUSH
51126: CALL_OW 296
51130: PUSH
51131: LD_INT 12
51133: GREATER
51134: OR
51135: IFFALSE 51139
// exit ;
51137: GO 51492
// missile := [ 1 ] ;
51139: LD_ADDR_VAR 0 14
51143: PUSH
51144: LD_INT 1
51146: PUSH
51147: EMPTY
51148: LIST
51149: ST_TO_ADDR
// if Researched ( side , tech_space ) then
51150: LD_VAR 0 9
51154: PPUSH
51155: LD_VAR 0 12
51159: PPUSH
51160: CALL_OW 325
51164: IFFALSE 51193
// missile := Replace ( missile , missile + 1 , 2 ) ;
51166: LD_ADDR_VAR 0 14
51170: PUSH
51171: LD_VAR 0 14
51175: PPUSH
51176: LD_VAR 0 14
51180: PUSH
51181: LD_INT 1
51183: PLUS
51184: PPUSH
51185: LD_INT 2
51187: PPUSH
51188: CALL_OW 1
51192: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
51193: LD_VAR 0 9
51197: PPUSH
51198: LD_VAR 0 13
51202: PPUSH
51203: CALL_OW 325
51207: PUSH
51208: LD_VAR 0 10
51212: PPUSH
51213: CALL_OW 255
51217: PPUSH
51218: LD_VAR 0 13
51222: PPUSH
51223: CALL_OW 325
51227: NOT
51228: AND
51229: IFFALSE 51258
// missile := Replace ( missile , missile + 1 , 3 ) ;
51231: LD_ADDR_VAR 0 14
51235: PUSH
51236: LD_VAR 0 14
51240: PPUSH
51241: LD_VAR 0 14
51245: PUSH
51246: LD_INT 1
51248: PLUS
51249: PPUSH
51250: LD_INT 3
51252: PPUSH
51253: CALL_OW 1
51257: ST_TO_ADDR
// if missile < 2 then
51258: LD_VAR 0 14
51262: PUSH
51263: LD_INT 2
51265: LESS
51266: IFFALSE 51270
// exit ;
51268: GO 51492
// x := GetX ( enemy ) ;
51270: LD_ADDR_VAR 0 4
51274: PUSH
51275: LD_VAR 0 10
51279: PPUSH
51280: CALL_OW 250
51284: ST_TO_ADDR
// y := GetY ( enemy ) ;
51285: LD_ADDR_VAR 0 5
51289: PUSH
51290: LD_VAR 0 10
51294: PPUSH
51295: CALL_OW 251
51299: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
51300: LD_ADDR_VAR 0 6
51304: PUSH
51305: LD_VAR 0 4
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PPUSH
51314: LD_INT 1
51316: PPUSH
51317: CALL_OW 12
51321: PLUS
51322: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
51323: LD_ADDR_VAR 0 7
51327: PUSH
51328: LD_VAR 0 5
51332: PUSH
51333: LD_INT 1
51335: NEG
51336: PPUSH
51337: LD_INT 1
51339: PPUSH
51340: CALL_OW 12
51344: PLUS
51345: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51346: LD_VAR 0 6
51350: PPUSH
51351: LD_VAR 0 7
51355: PPUSH
51356: CALL_OW 488
51360: NOT
51361: IFFALSE 51383
// begin _x := x ;
51363: LD_ADDR_VAR 0 6
51367: PUSH
51368: LD_VAR 0 4
51372: ST_TO_ADDR
// _y := y ;
51373: LD_ADDR_VAR 0 7
51377: PUSH
51378: LD_VAR 0 5
51382: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
51383: LD_ADDR_VAR 0 3
51387: PUSH
51388: LD_INT 1
51390: PPUSH
51391: LD_VAR 0 14
51395: PPUSH
51396: CALL_OW 12
51400: ST_TO_ADDR
// case i of 1 :
51401: LD_VAR 0 3
51405: PUSH
51406: LD_INT 1
51408: DOUBLE
51409: EQUAL
51410: IFTRUE 51414
51412: GO 51431
51414: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
51415: LD_VAR 0 1
51419: PPUSH
51420: LD_VAR 0 10
51424: PPUSH
51425: CALL_OW 115
51429: GO 51492
51431: LD_INT 2
51433: DOUBLE
51434: EQUAL
51435: IFTRUE 51439
51437: GO 51461
51439: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
51440: LD_VAR 0 1
51444: PPUSH
51445: LD_VAR 0 6
51449: PPUSH
51450: LD_VAR 0 7
51454: PPUSH
51455: CALL_OW 153
51459: GO 51492
51461: LD_INT 3
51463: DOUBLE
51464: EQUAL
51465: IFTRUE 51469
51467: GO 51491
51469: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
51470: LD_VAR 0 1
51474: PPUSH
51475: LD_VAR 0 6
51479: PPUSH
51480: LD_VAR 0 7
51484: PPUSH
51485: CALL_OW 154
51489: GO 51492
51491: POP
// end ;
51492: LD_VAR 0 2
51496: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
51497: LD_INT 0
51499: PPUSH
51500: PPUSH
51501: PPUSH
51502: PPUSH
51503: PPUSH
51504: PPUSH
// if not unit or not building then
51505: LD_VAR 0 1
51509: NOT
51510: PUSH
51511: LD_VAR 0 2
51515: NOT
51516: OR
51517: IFFALSE 51521
// exit ;
51519: GO 51679
// x := GetX ( building ) ;
51521: LD_ADDR_VAR 0 5
51525: PUSH
51526: LD_VAR 0 2
51530: PPUSH
51531: CALL_OW 250
51535: ST_TO_ADDR
// y := GetY ( building ) ;
51536: LD_ADDR_VAR 0 6
51540: PUSH
51541: LD_VAR 0 2
51545: PPUSH
51546: CALL_OW 251
51550: ST_TO_ADDR
// for i = 0 to 5 do
51551: LD_ADDR_VAR 0 4
51555: PUSH
51556: DOUBLE
51557: LD_INT 0
51559: DEC
51560: ST_TO_ADDR
51561: LD_INT 5
51563: PUSH
51564: FOR_TO
51565: IFFALSE 51677
// begin _x := ShiftX ( x , i , 3 ) ;
51567: LD_ADDR_VAR 0 7
51571: PUSH
51572: LD_VAR 0 5
51576: PPUSH
51577: LD_VAR 0 4
51581: PPUSH
51582: LD_INT 3
51584: PPUSH
51585: CALL_OW 272
51589: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
51590: LD_ADDR_VAR 0 8
51594: PUSH
51595: LD_VAR 0 6
51599: PPUSH
51600: LD_VAR 0 4
51604: PPUSH
51605: LD_INT 3
51607: PPUSH
51608: CALL_OW 273
51612: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51613: LD_VAR 0 7
51617: PPUSH
51618: LD_VAR 0 8
51622: PPUSH
51623: CALL_OW 488
51627: NOT
51628: IFFALSE 51632
// continue ;
51630: GO 51564
// if HexInfo ( _x , _y ) = 0 then
51632: LD_VAR 0 7
51636: PPUSH
51637: LD_VAR 0 8
51641: PPUSH
51642: CALL_OW 428
51646: PUSH
51647: LD_INT 0
51649: EQUAL
51650: IFFALSE 51675
// begin ComMoveXY ( unit , _x , _y ) ;
51652: LD_VAR 0 1
51656: PPUSH
51657: LD_VAR 0 7
51661: PPUSH
51662: LD_VAR 0 8
51666: PPUSH
51667: CALL_OW 111
// exit ;
51671: POP
51672: POP
51673: GO 51679
// end ; end ;
51675: GO 51564
51677: POP
51678: POP
// end ;
51679: LD_VAR 0 3
51683: RET
// export function ScanBase ( side , base_area ) ; begin
51684: LD_INT 0
51686: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
51687: LD_ADDR_VAR 0 3
51691: PUSH
51692: LD_VAR 0 2
51696: PPUSH
51697: LD_INT 81
51699: PUSH
51700: LD_VAR 0 1
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: PPUSH
51709: CALL_OW 70
51713: ST_TO_ADDR
// end ;
51714: LD_VAR 0 3
51718: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
51719: LD_INT 0
51721: PPUSH
51722: PPUSH
51723: PPUSH
51724: PPUSH
// result := false ;
51725: LD_ADDR_VAR 0 2
51729: PUSH
51730: LD_INT 0
51732: ST_TO_ADDR
// side := GetSide ( unit ) ;
51733: LD_ADDR_VAR 0 3
51737: PUSH
51738: LD_VAR 0 1
51742: PPUSH
51743: CALL_OW 255
51747: ST_TO_ADDR
// nat := GetNation ( unit ) ;
51748: LD_ADDR_VAR 0 4
51752: PUSH
51753: LD_VAR 0 1
51757: PPUSH
51758: CALL_OW 248
51762: ST_TO_ADDR
// case nat of 1 :
51763: LD_VAR 0 4
51767: PUSH
51768: LD_INT 1
51770: DOUBLE
51771: EQUAL
51772: IFTRUE 51776
51774: GO 51787
51776: POP
// tech := tech_lassight ; 2 :
51777: LD_ADDR_VAR 0 5
51781: PUSH
51782: LD_INT 12
51784: ST_TO_ADDR
51785: GO 51826
51787: LD_INT 2
51789: DOUBLE
51790: EQUAL
51791: IFTRUE 51795
51793: GO 51806
51795: POP
// tech := tech_mortar ; 3 :
51796: LD_ADDR_VAR 0 5
51800: PUSH
51801: LD_INT 41
51803: ST_TO_ADDR
51804: GO 51826
51806: LD_INT 3
51808: DOUBLE
51809: EQUAL
51810: IFTRUE 51814
51812: GO 51825
51814: POP
// tech := tech_bazooka ; end ;
51815: LD_ADDR_VAR 0 5
51819: PUSH
51820: LD_INT 44
51822: ST_TO_ADDR
51823: GO 51826
51825: POP
// if Researched ( side , tech ) then
51826: LD_VAR 0 3
51830: PPUSH
51831: LD_VAR 0 5
51835: PPUSH
51836: CALL_OW 325
51840: IFFALSE 51867
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
51842: LD_ADDR_VAR 0 2
51846: PUSH
51847: LD_INT 5
51849: PUSH
51850: LD_INT 8
51852: PUSH
51853: LD_INT 9
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: LIST
51860: PUSH
51861: LD_VAR 0 4
51865: ARRAY
51866: ST_TO_ADDR
// end ;
51867: LD_VAR 0 2
51871: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
51872: LD_INT 0
51874: PPUSH
51875: PPUSH
51876: PPUSH
// if not mines then
51877: LD_VAR 0 2
51881: NOT
51882: IFFALSE 51886
// exit ;
51884: GO 52030
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51886: LD_ADDR_VAR 0 5
51890: PUSH
51891: LD_INT 81
51893: PUSH
51894: LD_VAR 0 1
51898: PUSH
51899: EMPTY
51900: LIST
51901: LIST
51902: PUSH
51903: LD_INT 3
51905: PUSH
51906: LD_INT 21
51908: PUSH
51909: LD_INT 3
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PPUSH
51924: CALL_OW 69
51928: ST_TO_ADDR
// for i in mines do
51929: LD_ADDR_VAR 0 4
51933: PUSH
51934: LD_VAR 0 2
51938: PUSH
51939: FOR_IN
51940: IFFALSE 52028
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
51942: LD_VAR 0 4
51946: PUSH
51947: LD_INT 1
51949: ARRAY
51950: PPUSH
51951: LD_VAR 0 4
51955: PUSH
51956: LD_INT 2
51958: ARRAY
51959: PPUSH
51960: CALL_OW 458
51964: NOT
51965: IFFALSE 51969
// continue ;
51967: GO 51939
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
51969: LD_VAR 0 4
51973: PUSH
51974: LD_INT 1
51976: ARRAY
51977: PPUSH
51978: LD_VAR 0 4
51982: PUSH
51983: LD_INT 2
51985: ARRAY
51986: PPUSH
51987: CALL_OW 428
51991: PUSH
51992: LD_VAR 0 5
51996: IN
51997: IFFALSE 52026
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
51999: LD_VAR 0 4
52003: PUSH
52004: LD_INT 1
52006: ARRAY
52007: PPUSH
52008: LD_VAR 0 4
52012: PUSH
52013: LD_INT 2
52015: ARRAY
52016: PPUSH
52017: LD_VAR 0 1
52021: PPUSH
52022: CALL_OW 456
// end ;
52026: GO 51939
52028: POP
52029: POP
// end ;
52030: LD_VAR 0 3
52034: RET
// export function Count ( array ) ; var i ; begin
52035: LD_INT 0
52037: PPUSH
52038: PPUSH
// result := 0 ;
52039: LD_ADDR_VAR 0 2
52043: PUSH
52044: LD_INT 0
52046: ST_TO_ADDR
// for i in array do
52047: LD_ADDR_VAR 0 3
52051: PUSH
52052: LD_VAR 0 1
52056: PUSH
52057: FOR_IN
52058: IFFALSE 52082
// if i then
52060: LD_VAR 0 3
52064: IFFALSE 52080
// result := result + 1 ;
52066: LD_ADDR_VAR 0 2
52070: PUSH
52071: LD_VAR 0 2
52075: PUSH
52076: LD_INT 1
52078: PLUS
52079: ST_TO_ADDR
52080: GO 52057
52082: POP
52083: POP
// end ;
52084: LD_VAR 0 2
52088: RET
// export function IsEmpty ( building ) ; begin
52089: LD_INT 0
52091: PPUSH
// if not building then
52092: LD_VAR 0 1
52096: NOT
52097: IFFALSE 52101
// exit ;
52099: GO 52144
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
52101: LD_ADDR_VAR 0 2
52105: PUSH
52106: LD_VAR 0 1
52110: PUSH
52111: LD_INT 22
52113: PUSH
52114: LD_VAR 0 1
52118: PPUSH
52119: CALL_OW 255
52123: PUSH
52124: EMPTY
52125: LIST
52126: LIST
52127: PUSH
52128: LD_INT 58
52130: PUSH
52131: EMPTY
52132: LIST
52133: PUSH
52134: EMPTY
52135: LIST
52136: LIST
52137: PPUSH
52138: CALL_OW 69
52142: IN
52143: ST_TO_ADDR
// end ;
52144: LD_VAR 0 2
52148: RET
// export function IsNotFull ( building ) ; var places ; begin
52149: LD_INT 0
52151: PPUSH
52152: PPUSH
// if not building then
52153: LD_VAR 0 1
52157: NOT
52158: IFFALSE 52162
// exit ;
52160: GO 52333
// result := false ;
52162: LD_ADDR_VAR 0 2
52166: PUSH
52167: LD_INT 0
52169: ST_TO_ADDR
// places := 0 ;
52170: LD_ADDR_VAR 0 3
52174: PUSH
52175: LD_INT 0
52177: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
52178: LD_VAR 0 1
52182: PPUSH
52183: CALL_OW 266
52187: PUSH
52188: LD_INT 0
52190: DOUBLE
52191: EQUAL
52192: IFTRUE 52250
52194: LD_INT 1
52196: DOUBLE
52197: EQUAL
52198: IFTRUE 52250
52200: LD_INT 6
52202: DOUBLE
52203: EQUAL
52204: IFTRUE 52250
52206: LD_INT 7
52208: DOUBLE
52209: EQUAL
52210: IFTRUE 52250
52212: LD_INT 8
52214: DOUBLE
52215: EQUAL
52216: IFTRUE 52250
52218: LD_INT 4
52220: DOUBLE
52221: EQUAL
52222: IFTRUE 52250
52224: LD_INT 5
52226: DOUBLE
52227: EQUAL
52228: IFTRUE 52250
52230: LD_INT 2
52232: DOUBLE
52233: EQUAL
52234: IFTRUE 52250
52236: LD_INT 3
52238: DOUBLE
52239: EQUAL
52240: IFTRUE 52250
52242: LD_INT 35
52244: DOUBLE
52245: EQUAL
52246: IFTRUE 52250
52248: GO 52261
52250: POP
// places := 6 ; b_bunker , b_breastwork :
52251: LD_ADDR_VAR 0 3
52255: PUSH
52256: LD_INT 6
52258: ST_TO_ADDR
52259: GO 52306
52261: LD_INT 32
52263: DOUBLE
52264: EQUAL
52265: IFTRUE 52275
52267: LD_INT 31
52269: DOUBLE
52270: EQUAL
52271: IFTRUE 52275
52273: GO 52286
52275: POP
// places := 1 ; b_control_tower :
52276: LD_ADDR_VAR 0 3
52280: PUSH
52281: LD_INT 1
52283: ST_TO_ADDR
52284: GO 52306
52286: LD_INT 36
52288: DOUBLE
52289: EQUAL
52290: IFTRUE 52294
52292: GO 52305
52294: POP
// places := 3 ; end ;
52295: LD_ADDR_VAR 0 3
52299: PUSH
52300: LD_INT 3
52302: ST_TO_ADDR
52303: GO 52306
52305: POP
// if places then
52306: LD_VAR 0 3
52310: IFFALSE 52333
// result := UnitsInside ( building ) < places ;
52312: LD_ADDR_VAR 0 2
52316: PUSH
52317: LD_VAR 0 1
52321: PPUSH
52322: CALL_OW 313
52326: PUSH
52327: LD_VAR 0 3
52331: LESS
52332: ST_TO_ADDR
// end ;
52333: LD_VAR 0 2
52337: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
52338: LD_INT 0
52340: PPUSH
52341: PPUSH
52342: PPUSH
52343: PPUSH
// tmp := [ ] ;
52344: LD_ADDR_VAR 0 3
52348: PUSH
52349: EMPTY
52350: ST_TO_ADDR
// list := [ ] ;
52351: LD_ADDR_VAR 0 5
52355: PUSH
52356: EMPTY
52357: ST_TO_ADDR
// for i = 16 to 25 do
52358: LD_ADDR_VAR 0 4
52362: PUSH
52363: DOUBLE
52364: LD_INT 16
52366: DEC
52367: ST_TO_ADDR
52368: LD_INT 25
52370: PUSH
52371: FOR_TO
52372: IFFALSE 52445
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
52374: LD_ADDR_VAR 0 3
52378: PUSH
52379: LD_VAR 0 3
52383: PUSH
52384: LD_INT 22
52386: PUSH
52387: LD_VAR 0 1
52391: PPUSH
52392: CALL_OW 255
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 91
52403: PUSH
52404: LD_VAR 0 1
52408: PUSH
52409: LD_INT 6
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: LIST
52416: PUSH
52417: LD_INT 30
52419: PUSH
52420: LD_VAR 0 4
52424: PUSH
52425: EMPTY
52426: LIST
52427: LIST
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: LIST
52433: PUSH
52434: EMPTY
52435: LIST
52436: PPUSH
52437: CALL_OW 69
52441: ADD
52442: ST_TO_ADDR
52443: GO 52371
52445: POP
52446: POP
// for i = 1 to tmp do
52447: LD_ADDR_VAR 0 4
52451: PUSH
52452: DOUBLE
52453: LD_INT 1
52455: DEC
52456: ST_TO_ADDR
52457: LD_VAR 0 3
52461: PUSH
52462: FOR_TO
52463: IFFALSE 52551
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
52465: LD_ADDR_VAR 0 5
52469: PUSH
52470: LD_VAR 0 5
52474: PUSH
52475: LD_VAR 0 3
52479: PUSH
52480: LD_VAR 0 4
52484: ARRAY
52485: PPUSH
52486: CALL_OW 266
52490: PUSH
52491: LD_VAR 0 3
52495: PUSH
52496: LD_VAR 0 4
52500: ARRAY
52501: PPUSH
52502: CALL_OW 250
52506: PUSH
52507: LD_VAR 0 3
52511: PUSH
52512: LD_VAR 0 4
52516: ARRAY
52517: PPUSH
52518: CALL_OW 251
52522: PUSH
52523: LD_VAR 0 3
52527: PUSH
52528: LD_VAR 0 4
52532: ARRAY
52533: PPUSH
52534: CALL_OW 254
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: PUSH
52545: EMPTY
52546: LIST
52547: ADD
52548: ST_TO_ADDR
52549: GO 52462
52551: POP
52552: POP
// result := list ;
52553: LD_ADDR_VAR 0 2
52557: PUSH
52558: LD_VAR 0 5
52562: ST_TO_ADDR
// end ;
52563: LD_VAR 0 2
52567: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
52568: LD_INT 0
52570: PPUSH
52571: PPUSH
52572: PPUSH
52573: PPUSH
52574: PPUSH
52575: PPUSH
52576: PPUSH
// if not factory then
52577: LD_VAR 0 1
52581: NOT
52582: IFFALSE 52586
// exit ;
52584: GO 53179
// if control = control_apeman then
52586: LD_VAR 0 4
52590: PUSH
52591: LD_INT 5
52593: EQUAL
52594: IFFALSE 52703
// begin tmp := UnitsInside ( factory ) ;
52596: LD_ADDR_VAR 0 8
52600: PUSH
52601: LD_VAR 0 1
52605: PPUSH
52606: CALL_OW 313
52610: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
52611: LD_VAR 0 8
52615: PPUSH
52616: LD_INT 25
52618: PUSH
52619: LD_INT 12
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PPUSH
52626: CALL_OW 72
52630: NOT
52631: IFFALSE 52641
// control := control_manual ;
52633: LD_ADDR_VAR 0 4
52637: PUSH
52638: LD_INT 1
52640: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
52641: LD_ADDR_VAR 0 8
52645: PUSH
52646: LD_VAR 0 1
52650: PPUSH
52651: CALL 52338 0 1
52655: ST_TO_ADDR
// if tmp then
52656: LD_VAR 0 8
52660: IFFALSE 52703
// begin for i in tmp do
52662: LD_ADDR_VAR 0 7
52666: PUSH
52667: LD_VAR 0 8
52671: PUSH
52672: FOR_IN
52673: IFFALSE 52701
// if i [ 1 ] = b_ext_radio then
52675: LD_VAR 0 7
52679: PUSH
52680: LD_INT 1
52682: ARRAY
52683: PUSH
52684: LD_INT 22
52686: EQUAL
52687: IFFALSE 52699
// begin control := control_remote ;
52689: LD_ADDR_VAR 0 4
52693: PUSH
52694: LD_INT 2
52696: ST_TO_ADDR
// break ;
52697: GO 52701
// end ;
52699: GO 52672
52701: POP
52702: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
52703: LD_VAR 0 1
52707: PPUSH
52708: LD_VAR 0 2
52712: PPUSH
52713: LD_VAR 0 3
52717: PPUSH
52718: LD_VAR 0 4
52722: PPUSH
52723: LD_VAR 0 5
52727: PPUSH
52728: CALL_OW 448
52732: IFFALSE 52767
// begin result := [ chassis , engine , control , weapon ] ;
52734: LD_ADDR_VAR 0 6
52738: PUSH
52739: LD_VAR 0 2
52743: PUSH
52744: LD_VAR 0 3
52748: PUSH
52749: LD_VAR 0 4
52753: PUSH
52754: LD_VAR 0 5
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: LIST
52763: LIST
52764: ST_TO_ADDR
// exit ;
52765: GO 53179
// end ; _chassis := AvailableChassisList ( factory ) ;
52767: LD_ADDR_VAR 0 9
52771: PUSH
52772: LD_VAR 0 1
52776: PPUSH
52777: CALL_OW 475
52781: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
52782: LD_ADDR_VAR 0 11
52786: PUSH
52787: LD_VAR 0 1
52791: PPUSH
52792: CALL_OW 476
52796: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
52797: LD_ADDR_VAR 0 12
52801: PUSH
52802: LD_VAR 0 1
52806: PPUSH
52807: CALL_OW 477
52811: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
52812: LD_ADDR_VAR 0 10
52816: PUSH
52817: LD_VAR 0 1
52821: PPUSH
52822: CALL_OW 478
52826: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
52827: LD_VAR 0 9
52831: NOT
52832: PUSH
52833: LD_VAR 0 11
52837: NOT
52838: OR
52839: PUSH
52840: LD_VAR 0 12
52844: NOT
52845: OR
52846: PUSH
52847: LD_VAR 0 10
52851: NOT
52852: OR
52853: IFFALSE 52888
// begin result := [ chassis , engine , control , weapon ] ;
52855: LD_ADDR_VAR 0 6
52859: PUSH
52860: LD_VAR 0 2
52864: PUSH
52865: LD_VAR 0 3
52869: PUSH
52870: LD_VAR 0 4
52874: PUSH
52875: LD_VAR 0 5
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: ST_TO_ADDR
// exit ;
52886: GO 53179
// end ; if not chassis in _chassis then
52888: LD_VAR 0 2
52892: PUSH
52893: LD_VAR 0 9
52897: IN
52898: NOT
52899: IFFALSE 52925
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
52901: LD_ADDR_VAR 0 2
52905: PUSH
52906: LD_VAR 0 9
52910: PUSH
52911: LD_INT 1
52913: PPUSH
52914: LD_VAR 0 9
52918: PPUSH
52919: CALL_OW 12
52923: ARRAY
52924: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
52925: LD_VAR 0 2
52929: PPUSH
52930: LD_VAR 0 3
52934: PPUSH
52935: CALL 53184 0 2
52939: NOT
52940: IFFALSE 52999
// repeat engine := _engine [ 1 ] ;
52942: LD_ADDR_VAR 0 3
52946: PUSH
52947: LD_VAR 0 11
52951: PUSH
52952: LD_INT 1
52954: ARRAY
52955: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
52956: LD_ADDR_VAR 0 11
52960: PUSH
52961: LD_VAR 0 11
52965: PPUSH
52966: LD_INT 1
52968: PPUSH
52969: CALL_OW 3
52973: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
52974: LD_VAR 0 2
52978: PPUSH
52979: LD_VAR 0 3
52983: PPUSH
52984: CALL 53184 0 2
52988: PUSH
52989: LD_VAR 0 11
52993: PUSH
52994: EMPTY
52995: EQUAL
52996: OR
52997: IFFALSE 52942
// if not control in _control then
52999: LD_VAR 0 4
53003: PUSH
53004: LD_VAR 0 12
53008: IN
53009: NOT
53010: IFFALSE 53036
// control := _control [ rand ( 1 , _control ) ] ;
53012: LD_ADDR_VAR 0 4
53016: PUSH
53017: LD_VAR 0 12
53021: PUSH
53022: LD_INT 1
53024: PPUSH
53025: LD_VAR 0 12
53029: PPUSH
53030: CALL_OW 12
53034: ARRAY
53035: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
53036: LD_VAR 0 2
53040: PPUSH
53041: LD_VAR 0 5
53045: PPUSH
53046: CALL 53404 0 2
53050: NOT
53051: IFFALSE 53110
// repeat weapon := _weapon [ 1 ] ;
53053: LD_ADDR_VAR 0 5
53057: PUSH
53058: LD_VAR 0 10
53062: PUSH
53063: LD_INT 1
53065: ARRAY
53066: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
53067: LD_ADDR_VAR 0 10
53071: PUSH
53072: LD_VAR 0 10
53076: PPUSH
53077: LD_INT 1
53079: PPUSH
53080: CALL_OW 3
53084: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
53085: LD_VAR 0 2
53089: PPUSH
53090: LD_VAR 0 5
53094: PPUSH
53095: CALL 53404 0 2
53099: PUSH
53100: LD_VAR 0 10
53104: PUSH
53105: EMPTY
53106: EQUAL
53107: OR
53108: IFFALSE 53053
// result := [ ] ;
53110: LD_ADDR_VAR 0 6
53114: PUSH
53115: EMPTY
53116: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
53117: LD_VAR 0 1
53121: PPUSH
53122: LD_VAR 0 2
53126: PPUSH
53127: LD_VAR 0 3
53131: PPUSH
53132: LD_VAR 0 4
53136: PPUSH
53137: LD_VAR 0 5
53141: PPUSH
53142: CALL_OW 448
53146: IFFALSE 53179
// result := [ chassis , engine , control , weapon ] ;
53148: LD_ADDR_VAR 0 6
53152: PUSH
53153: LD_VAR 0 2
53157: PUSH
53158: LD_VAR 0 3
53162: PUSH
53163: LD_VAR 0 4
53167: PUSH
53168: LD_VAR 0 5
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: ST_TO_ADDR
// end ;
53179: LD_VAR 0 6
53183: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
53184: LD_INT 0
53186: PPUSH
// if not chassis or not engine then
53187: LD_VAR 0 1
53191: NOT
53192: PUSH
53193: LD_VAR 0 2
53197: NOT
53198: OR
53199: IFFALSE 53203
// exit ;
53201: GO 53399
// case engine of engine_solar :
53203: LD_VAR 0 2
53207: PUSH
53208: LD_INT 2
53210: DOUBLE
53211: EQUAL
53212: IFTRUE 53216
53214: GO 53254
53216: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
53217: LD_ADDR_VAR 0 3
53221: PUSH
53222: LD_INT 11
53224: PUSH
53225: LD_INT 12
53227: PUSH
53228: LD_INT 13
53230: PUSH
53231: LD_INT 14
53233: PUSH
53234: LD_INT 1
53236: PUSH
53237: LD_INT 2
53239: PUSH
53240: LD_INT 3
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: ST_TO_ADDR
53252: GO 53383
53254: LD_INT 1
53256: DOUBLE
53257: EQUAL
53258: IFTRUE 53262
53260: GO 53324
53262: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
53263: LD_ADDR_VAR 0 3
53267: PUSH
53268: LD_INT 11
53270: PUSH
53271: LD_INT 12
53273: PUSH
53274: LD_INT 13
53276: PUSH
53277: LD_INT 14
53279: PUSH
53280: LD_INT 1
53282: PUSH
53283: LD_INT 2
53285: PUSH
53286: LD_INT 3
53288: PUSH
53289: LD_INT 4
53291: PUSH
53292: LD_INT 5
53294: PUSH
53295: LD_INT 21
53297: PUSH
53298: LD_INT 23
53300: PUSH
53301: LD_INT 22
53303: PUSH
53304: LD_INT 24
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: LIST
53311: LIST
53312: LIST
53313: LIST
53314: LIST
53315: LIST
53316: LIST
53317: LIST
53318: LIST
53319: LIST
53320: LIST
53321: ST_TO_ADDR
53322: GO 53383
53324: LD_INT 3
53326: DOUBLE
53327: EQUAL
53328: IFTRUE 53332
53330: GO 53382
53332: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
53333: LD_ADDR_VAR 0 3
53337: PUSH
53338: LD_INT 13
53340: PUSH
53341: LD_INT 14
53343: PUSH
53344: LD_INT 2
53346: PUSH
53347: LD_INT 3
53349: PUSH
53350: LD_INT 4
53352: PUSH
53353: LD_INT 5
53355: PUSH
53356: LD_INT 21
53358: PUSH
53359: LD_INT 22
53361: PUSH
53362: LD_INT 23
53364: PUSH
53365: LD_INT 24
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: ST_TO_ADDR
53380: GO 53383
53382: POP
// result := ( chassis in result ) ;
53383: LD_ADDR_VAR 0 3
53387: PUSH
53388: LD_VAR 0 1
53392: PUSH
53393: LD_VAR 0 3
53397: IN
53398: ST_TO_ADDR
// end ;
53399: LD_VAR 0 3
53403: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
53404: LD_INT 0
53406: PPUSH
// if not chassis or not weapon then
53407: LD_VAR 0 1
53411: NOT
53412: PUSH
53413: LD_VAR 0 2
53417: NOT
53418: OR
53419: IFFALSE 53423
// exit ;
53421: GO 54483
// case weapon of us_machine_gun :
53423: LD_VAR 0 2
53427: PUSH
53428: LD_INT 2
53430: DOUBLE
53431: EQUAL
53432: IFTRUE 53436
53434: GO 53466
53436: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
53437: LD_ADDR_VAR 0 3
53441: PUSH
53442: LD_INT 1
53444: PUSH
53445: LD_INT 2
53447: PUSH
53448: LD_INT 3
53450: PUSH
53451: LD_INT 4
53453: PUSH
53454: LD_INT 5
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: ST_TO_ADDR
53464: GO 54467
53466: LD_INT 3
53468: DOUBLE
53469: EQUAL
53470: IFTRUE 53474
53472: GO 53504
53474: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
53475: LD_ADDR_VAR 0 3
53479: PUSH
53480: LD_INT 1
53482: PUSH
53483: LD_INT 2
53485: PUSH
53486: LD_INT 3
53488: PUSH
53489: LD_INT 4
53491: PUSH
53492: LD_INT 5
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: LIST
53499: LIST
53500: LIST
53501: ST_TO_ADDR
53502: GO 54467
53504: LD_INT 11
53506: DOUBLE
53507: EQUAL
53508: IFTRUE 53512
53510: GO 53542
53512: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
53513: LD_ADDR_VAR 0 3
53517: PUSH
53518: LD_INT 1
53520: PUSH
53521: LD_INT 2
53523: PUSH
53524: LD_INT 3
53526: PUSH
53527: LD_INT 4
53529: PUSH
53530: LD_INT 5
53532: PUSH
53533: EMPTY
53534: LIST
53535: LIST
53536: LIST
53537: LIST
53538: LIST
53539: ST_TO_ADDR
53540: GO 54467
53542: LD_INT 4
53544: DOUBLE
53545: EQUAL
53546: IFTRUE 53550
53548: GO 53576
53550: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
53551: LD_ADDR_VAR 0 3
53555: PUSH
53556: LD_INT 2
53558: PUSH
53559: LD_INT 3
53561: PUSH
53562: LD_INT 4
53564: PUSH
53565: LD_INT 5
53567: PUSH
53568: EMPTY
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: ST_TO_ADDR
53574: GO 54467
53576: LD_INT 5
53578: DOUBLE
53579: EQUAL
53580: IFTRUE 53584
53582: GO 53610
53584: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
53585: LD_ADDR_VAR 0 3
53589: PUSH
53590: LD_INT 2
53592: PUSH
53593: LD_INT 3
53595: PUSH
53596: LD_INT 4
53598: PUSH
53599: LD_INT 5
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: ST_TO_ADDR
53608: GO 54467
53610: LD_INT 9
53612: DOUBLE
53613: EQUAL
53614: IFTRUE 53618
53616: GO 53644
53618: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
53619: LD_ADDR_VAR 0 3
53623: PUSH
53624: LD_INT 2
53626: PUSH
53627: LD_INT 3
53629: PUSH
53630: LD_INT 4
53632: PUSH
53633: LD_INT 5
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: LIST
53640: LIST
53641: ST_TO_ADDR
53642: GO 54467
53644: LD_INT 7
53646: DOUBLE
53647: EQUAL
53648: IFTRUE 53652
53650: GO 53678
53652: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
53653: LD_ADDR_VAR 0 3
53657: PUSH
53658: LD_INT 2
53660: PUSH
53661: LD_INT 3
53663: PUSH
53664: LD_INT 4
53666: PUSH
53667: LD_INT 5
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: LIST
53674: LIST
53675: ST_TO_ADDR
53676: GO 54467
53678: LD_INT 12
53680: DOUBLE
53681: EQUAL
53682: IFTRUE 53686
53684: GO 53712
53686: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
53687: LD_ADDR_VAR 0 3
53691: PUSH
53692: LD_INT 2
53694: PUSH
53695: LD_INT 3
53697: PUSH
53698: LD_INT 4
53700: PUSH
53701: LD_INT 5
53703: PUSH
53704: EMPTY
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: ST_TO_ADDR
53710: GO 54467
53712: LD_INT 13
53714: DOUBLE
53715: EQUAL
53716: IFTRUE 53720
53718: GO 53746
53720: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
53721: LD_ADDR_VAR 0 3
53725: PUSH
53726: LD_INT 2
53728: PUSH
53729: LD_INT 3
53731: PUSH
53732: LD_INT 4
53734: PUSH
53735: LD_INT 5
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: ST_TO_ADDR
53744: GO 54467
53746: LD_INT 14
53748: DOUBLE
53749: EQUAL
53750: IFTRUE 53754
53752: GO 53772
53754: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
53755: LD_ADDR_VAR 0 3
53759: PUSH
53760: LD_INT 4
53762: PUSH
53763: LD_INT 5
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: ST_TO_ADDR
53770: GO 54467
53772: LD_INT 6
53774: DOUBLE
53775: EQUAL
53776: IFTRUE 53780
53778: GO 53798
53780: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
53781: LD_ADDR_VAR 0 3
53785: PUSH
53786: LD_INT 4
53788: PUSH
53789: LD_INT 5
53791: PUSH
53792: EMPTY
53793: LIST
53794: LIST
53795: ST_TO_ADDR
53796: GO 54467
53798: LD_INT 10
53800: DOUBLE
53801: EQUAL
53802: IFTRUE 53806
53804: GO 53824
53806: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
53807: LD_ADDR_VAR 0 3
53811: PUSH
53812: LD_INT 4
53814: PUSH
53815: LD_INT 5
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: ST_TO_ADDR
53822: GO 54467
53824: LD_INT 22
53826: DOUBLE
53827: EQUAL
53828: IFTRUE 53832
53830: GO 53858
53832: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
53833: LD_ADDR_VAR 0 3
53837: PUSH
53838: LD_INT 11
53840: PUSH
53841: LD_INT 12
53843: PUSH
53844: LD_INT 13
53846: PUSH
53847: LD_INT 14
53849: PUSH
53850: EMPTY
53851: LIST
53852: LIST
53853: LIST
53854: LIST
53855: ST_TO_ADDR
53856: GO 54467
53858: LD_INT 23
53860: DOUBLE
53861: EQUAL
53862: IFTRUE 53866
53864: GO 53892
53866: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
53867: LD_ADDR_VAR 0 3
53871: PUSH
53872: LD_INT 11
53874: PUSH
53875: LD_INT 12
53877: PUSH
53878: LD_INT 13
53880: PUSH
53881: LD_INT 14
53883: PUSH
53884: EMPTY
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: ST_TO_ADDR
53890: GO 54467
53892: LD_INT 24
53894: DOUBLE
53895: EQUAL
53896: IFTRUE 53900
53898: GO 53926
53900: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
53901: LD_ADDR_VAR 0 3
53905: PUSH
53906: LD_INT 11
53908: PUSH
53909: LD_INT 12
53911: PUSH
53912: LD_INT 13
53914: PUSH
53915: LD_INT 14
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: LIST
53922: LIST
53923: ST_TO_ADDR
53924: GO 54467
53926: LD_INT 30
53928: DOUBLE
53929: EQUAL
53930: IFTRUE 53934
53932: GO 53960
53934: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
53935: LD_ADDR_VAR 0 3
53939: PUSH
53940: LD_INT 11
53942: PUSH
53943: LD_INT 12
53945: PUSH
53946: LD_INT 13
53948: PUSH
53949: LD_INT 14
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: LIST
53956: LIST
53957: ST_TO_ADDR
53958: GO 54467
53960: LD_INT 25
53962: DOUBLE
53963: EQUAL
53964: IFTRUE 53968
53966: GO 53986
53968: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
53969: LD_ADDR_VAR 0 3
53973: PUSH
53974: LD_INT 13
53976: PUSH
53977: LD_INT 14
53979: PUSH
53980: EMPTY
53981: LIST
53982: LIST
53983: ST_TO_ADDR
53984: GO 54467
53986: LD_INT 27
53988: DOUBLE
53989: EQUAL
53990: IFTRUE 53994
53992: GO 54012
53994: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
53995: LD_ADDR_VAR 0 3
53999: PUSH
54000: LD_INT 13
54002: PUSH
54003: LD_INT 14
54005: PUSH
54006: EMPTY
54007: LIST
54008: LIST
54009: ST_TO_ADDR
54010: GO 54467
54012: LD_INT 92
54014: DOUBLE
54015: EQUAL
54016: IFTRUE 54020
54018: GO 54046
54020: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
54021: LD_ADDR_VAR 0 3
54025: PUSH
54026: LD_INT 11
54028: PUSH
54029: LD_INT 12
54031: PUSH
54032: LD_INT 13
54034: PUSH
54035: LD_INT 14
54037: PUSH
54038: EMPTY
54039: LIST
54040: LIST
54041: LIST
54042: LIST
54043: ST_TO_ADDR
54044: GO 54467
54046: LD_INT 28
54048: DOUBLE
54049: EQUAL
54050: IFTRUE 54054
54052: GO 54072
54054: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
54055: LD_ADDR_VAR 0 3
54059: PUSH
54060: LD_INT 13
54062: PUSH
54063: LD_INT 14
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: ST_TO_ADDR
54070: GO 54467
54072: LD_INT 29
54074: DOUBLE
54075: EQUAL
54076: IFTRUE 54080
54078: GO 54098
54080: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
54081: LD_ADDR_VAR 0 3
54085: PUSH
54086: LD_INT 13
54088: PUSH
54089: LD_INT 14
54091: PUSH
54092: EMPTY
54093: LIST
54094: LIST
54095: ST_TO_ADDR
54096: GO 54467
54098: LD_INT 31
54100: DOUBLE
54101: EQUAL
54102: IFTRUE 54106
54104: GO 54124
54106: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
54107: LD_ADDR_VAR 0 3
54111: PUSH
54112: LD_INT 13
54114: PUSH
54115: LD_INT 14
54117: PUSH
54118: EMPTY
54119: LIST
54120: LIST
54121: ST_TO_ADDR
54122: GO 54467
54124: LD_INT 26
54126: DOUBLE
54127: EQUAL
54128: IFTRUE 54132
54130: GO 54150
54132: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
54133: LD_ADDR_VAR 0 3
54137: PUSH
54138: LD_INT 13
54140: PUSH
54141: LD_INT 14
54143: PUSH
54144: EMPTY
54145: LIST
54146: LIST
54147: ST_TO_ADDR
54148: GO 54467
54150: LD_INT 42
54152: DOUBLE
54153: EQUAL
54154: IFTRUE 54158
54156: GO 54184
54158: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
54159: LD_ADDR_VAR 0 3
54163: PUSH
54164: LD_INT 21
54166: PUSH
54167: LD_INT 22
54169: PUSH
54170: LD_INT 23
54172: PUSH
54173: LD_INT 24
54175: PUSH
54176: EMPTY
54177: LIST
54178: LIST
54179: LIST
54180: LIST
54181: ST_TO_ADDR
54182: GO 54467
54184: LD_INT 43
54186: DOUBLE
54187: EQUAL
54188: IFTRUE 54192
54190: GO 54218
54192: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
54193: LD_ADDR_VAR 0 3
54197: PUSH
54198: LD_INT 21
54200: PUSH
54201: LD_INT 22
54203: PUSH
54204: LD_INT 23
54206: PUSH
54207: LD_INT 24
54209: PUSH
54210: EMPTY
54211: LIST
54212: LIST
54213: LIST
54214: LIST
54215: ST_TO_ADDR
54216: GO 54467
54218: LD_INT 44
54220: DOUBLE
54221: EQUAL
54222: IFTRUE 54226
54224: GO 54252
54226: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
54227: LD_ADDR_VAR 0 3
54231: PUSH
54232: LD_INT 21
54234: PUSH
54235: LD_INT 22
54237: PUSH
54238: LD_INT 23
54240: PUSH
54241: LD_INT 24
54243: PUSH
54244: EMPTY
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: ST_TO_ADDR
54250: GO 54467
54252: LD_INT 45
54254: DOUBLE
54255: EQUAL
54256: IFTRUE 54260
54258: GO 54286
54260: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
54261: LD_ADDR_VAR 0 3
54265: PUSH
54266: LD_INT 21
54268: PUSH
54269: LD_INT 22
54271: PUSH
54272: LD_INT 23
54274: PUSH
54275: LD_INT 24
54277: PUSH
54278: EMPTY
54279: LIST
54280: LIST
54281: LIST
54282: LIST
54283: ST_TO_ADDR
54284: GO 54467
54286: LD_INT 49
54288: DOUBLE
54289: EQUAL
54290: IFTRUE 54294
54292: GO 54320
54294: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
54295: LD_ADDR_VAR 0 3
54299: PUSH
54300: LD_INT 21
54302: PUSH
54303: LD_INT 22
54305: PUSH
54306: LD_INT 23
54308: PUSH
54309: LD_INT 24
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: LIST
54316: LIST
54317: ST_TO_ADDR
54318: GO 54467
54320: LD_INT 51
54322: DOUBLE
54323: EQUAL
54324: IFTRUE 54328
54326: GO 54354
54328: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
54329: LD_ADDR_VAR 0 3
54333: PUSH
54334: LD_INT 21
54336: PUSH
54337: LD_INT 22
54339: PUSH
54340: LD_INT 23
54342: PUSH
54343: LD_INT 24
54345: PUSH
54346: EMPTY
54347: LIST
54348: LIST
54349: LIST
54350: LIST
54351: ST_TO_ADDR
54352: GO 54467
54354: LD_INT 52
54356: DOUBLE
54357: EQUAL
54358: IFTRUE 54362
54360: GO 54388
54362: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
54363: LD_ADDR_VAR 0 3
54367: PUSH
54368: LD_INT 21
54370: PUSH
54371: LD_INT 22
54373: PUSH
54374: LD_INT 23
54376: PUSH
54377: LD_INT 24
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: LIST
54384: LIST
54385: ST_TO_ADDR
54386: GO 54467
54388: LD_INT 53
54390: DOUBLE
54391: EQUAL
54392: IFTRUE 54396
54394: GO 54414
54396: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
54397: LD_ADDR_VAR 0 3
54401: PUSH
54402: LD_INT 23
54404: PUSH
54405: LD_INT 24
54407: PUSH
54408: EMPTY
54409: LIST
54410: LIST
54411: ST_TO_ADDR
54412: GO 54467
54414: LD_INT 46
54416: DOUBLE
54417: EQUAL
54418: IFTRUE 54422
54420: GO 54440
54422: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
54423: LD_ADDR_VAR 0 3
54427: PUSH
54428: LD_INT 23
54430: PUSH
54431: LD_INT 24
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: ST_TO_ADDR
54438: GO 54467
54440: LD_INT 47
54442: DOUBLE
54443: EQUAL
54444: IFTRUE 54448
54446: GO 54466
54448: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
54449: LD_ADDR_VAR 0 3
54453: PUSH
54454: LD_INT 23
54456: PUSH
54457: LD_INT 24
54459: PUSH
54460: EMPTY
54461: LIST
54462: LIST
54463: ST_TO_ADDR
54464: GO 54467
54466: POP
// result := ( chassis in result ) ;
54467: LD_ADDR_VAR 0 3
54471: PUSH
54472: LD_VAR 0 1
54476: PUSH
54477: LD_VAR 0 3
54481: IN
54482: ST_TO_ADDR
// end ;
54483: LD_VAR 0 3
54487: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
54488: LD_INT 0
54490: PPUSH
54491: PPUSH
54492: PPUSH
54493: PPUSH
54494: PPUSH
54495: PPUSH
54496: PPUSH
// result := array ;
54497: LD_ADDR_VAR 0 5
54501: PUSH
54502: LD_VAR 0 1
54506: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
54507: LD_VAR 0 1
54511: NOT
54512: PUSH
54513: LD_VAR 0 2
54517: NOT
54518: OR
54519: PUSH
54520: LD_VAR 0 3
54524: NOT
54525: OR
54526: PUSH
54527: LD_VAR 0 2
54531: PUSH
54532: LD_VAR 0 1
54536: GREATER
54537: OR
54538: PUSH
54539: LD_VAR 0 3
54543: PUSH
54544: LD_VAR 0 1
54548: GREATER
54549: OR
54550: IFFALSE 54554
// exit ;
54552: GO 54850
// if direction then
54554: LD_VAR 0 4
54558: IFFALSE 54622
// begin d := 1 ;
54560: LD_ADDR_VAR 0 9
54564: PUSH
54565: LD_INT 1
54567: ST_TO_ADDR
// if i_from > i_to then
54568: LD_VAR 0 2
54572: PUSH
54573: LD_VAR 0 3
54577: GREATER
54578: IFFALSE 54604
// length := ( array - i_from ) + i_to else
54580: LD_ADDR_VAR 0 11
54584: PUSH
54585: LD_VAR 0 1
54589: PUSH
54590: LD_VAR 0 2
54594: MINUS
54595: PUSH
54596: LD_VAR 0 3
54600: PLUS
54601: ST_TO_ADDR
54602: GO 54620
// length := i_to - i_from ;
54604: LD_ADDR_VAR 0 11
54608: PUSH
54609: LD_VAR 0 3
54613: PUSH
54614: LD_VAR 0 2
54618: MINUS
54619: ST_TO_ADDR
// end else
54620: GO 54683
// begin d := - 1 ;
54622: LD_ADDR_VAR 0 9
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: ST_TO_ADDR
// if i_from > i_to then
54631: LD_VAR 0 2
54635: PUSH
54636: LD_VAR 0 3
54640: GREATER
54641: IFFALSE 54661
// length := i_from - i_to else
54643: LD_ADDR_VAR 0 11
54647: PUSH
54648: LD_VAR 0 2
54652: PUSH
54653: LD_VAR 0 3
54657: MINUS
54658: ST_TO_ADDR
54659: GO 54683
// length := ( array - i_to ) + i_from ;
54661: LD_ADDR_VAR 0 11
54665: PUSH
54666: LD_VAR 0 1
54670: PUSH
54671: LD_VAR 0 3
54675: MINUS
54676: PUSH
54677: LD_VAR 0 2
54681: PLUS
54682: ST_TO_ADDR
// end ; if not length then
54683: LD_VAR 0 11
54687: NOT
54688: IFFALSE 54692
// exit ;
54690: GO 54850
// tmp := array ;
54692: LD_ADDR_VAR 0 10
54696: PUSH
54697: LD_VAR 0 1
54701: ST_TO_ADDR
// for i = 1 to length do
54702: LD_ADDR_VAR 0 6
54706: PUSH
54707: DOUBLE
54708: LD_INT 1
54710: DEC
54711: ST_TO_ADDR
54712: LD_VAR 0 11
54716: PUSH
54717: FOR_TO
54718: IFFALSE 54838
// begin for j = 1 to array do
54720: LD_ADDR_VAR 0 7
54724: PUSH
54725: DOUBLE
54726: LD_INT 1
54728: DEC
54729: ST_TO_ADDR
54730: LD_VAR 0 1
54734: PUSH
54735: FOR_TO
54736: IFFALSE 54824
// begin k := j + d ;
54738: LD_ADDR_VAR 0 8
54742: PUSH
54743: LD_VAR 0 7
54747: PUSH
54748: LD_VAR 0 9
54752: PLUS
54753: ST_TO_ADDR
// if k > array then
54754: LD_VAR 0 8
54758: PUSH
54759: LD_VAR 0 1
54763: GREATER
54764: IFFALSE 54774
// k := 1 ;
54766: LD_ADDR_VAR 0 8
54770: PUSH
54771: LD_INT 1
54773: ST_TO_ADDR
// if not k then
54774: LD_VAR 0 8
54778: NOT
54779: IFFALSE 54791
// k := array ;
54781: LD_ADDR_VAR 0 8
54785: PUSH
54786: LD_VAR 0 1
54790: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
54791: LD_ADDR_VAR 0 10
54795: PUSH
54796: LD_VAR 0 10
54800: PPUSH
54801: LD_VAR 0 8
54805: PPUSH
54806: LD_VAR 0 1
54810: PUSH
54811: LD_VAR 0 7
54815: ARRAY
54816: PPUSH
54817: CALL_OW 1
54821: ST_TO_ADDR
// end ;
54822: GO 54735
54824: POP
54825: POP
// array := tmp ;
54826: LD_ADDR_VAR 0 1
54830: PUSH
54831: LD_VAR 0 10
54835: ST_TO_ADDR
// end ;
54836: GO 54717
54838: POP
54839: POP
// result := array ;
54840: LD_ADDR_VAR 0 5
54844: PUSH
54845: LD_VAR 0 1
54849: ST_TO_ADDR
// end ;
54850: LD_VAR 0 5
54854: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
54855: LD_INT 0
54857: PPUSH
54858: PPUSH
// result := 0 ;
54859: LD_ADDR_VAR 0 3
54863: PUSH
54864: LD_INT 0
54866: ST_TO_ADDR
// if not array or not value in array then
54867: LD_VAR 0 1
54871: NOT
54872: PUSH
54873: LD_VAR 0 2
54877: PUSH
54878: LD_VAR 0 1
54882: IN
54883: NOT
54884: OR
54885: IFFALSE 54889
// exit ;
54887: GO 54943
// for i = 1 to array do
54889: LD_ADDR_VAR 0 4
54893: PUSH
54894: DOUBLE
54895: LD_INT 1
54897: DEC
54898: ST_TO_ADDR
54899: LD_VAR 0 1
54903: PUSH
54904: FOR_TO
54905: IFFALSE 54941
// if value = array [ i ] then
54907: LD_VAR 0 2
54911: PUSH
54912: LD_VAR 0 1
54916: PUSH
54917: LD_VAR 0 4
54921: ARRAY
54922: EQUAL
54923: IFFALSE 54939
// begin result := i ;
54925: LD_ADDR_VAR 0 3
54929: PUSH
54930: LD_VAR 0 4
54934: ST_TO_ADDR
// exit ;
54935: POP
54936: POP
54937: GO 54943
// end ;
54939: GO 54904
54941: POP
54942: POP
// end ;
54943: LD_VAR 0 3
54947: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
54948: LD_INT 0
54950: PPUSH
// vc_chassis := chassis ;
54951: LD_ADDR_OWVAR 37
54955: PUSH
54956: LD_VAR 0 1
54960: ST_TO_ADDR
// vc_engine := engine ;
54961: LD_ADDR_OWVAR 39
54965: PUSH
54966: LD_VAR 0 2
54970: ST_TO_ADDR
// vc_control := control ;
54971: LD_ADDR_OWVAR 38
54975: PUSH
54976: LD_VAR 0 3
54980: ST_TO_ADDR
// vc_weapon := weapon ;
54981: LD_ADDR_OWVAR 40
54985: PUSH
54986: LD_VAR 0 4
54990: ST_TO_ADDR
// vc_fuel_battery := fuel ;
54991: LD_ADDR_OWVAR 41
54995: PUSH
54996: LD_VAR 0 5
55000: ST_TO_ADDR
// end ;
55001: LD_VAR 0 6
55005: RET
// export function WantPlant ( unit ) ; var task ; begin
55006: LD_INT 0
55008: PPUSH
55009: PPUSH
// result := false ;
55010: LD_ADDR_VAR 0 2
55014: PUSH
55015: LD_INT 0
55017: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
55018: LD_ADDR_VAR 0 3
55022: PUSH
55023: LD_VAR 0 1
55027: PPUSH
55028: CALL_OW 437
55032: ST_TO_ADDR
// if task then
55033: LD_VAR 0 3
55037: IFFALSE 55065
// if task [ 1 ] [ 1 ] = p then
55039: LD_VAR 0 3
55043: PUSH
55044: LD_INT 1
55046: ARRAY
55047: PUSH
55048: LD_INT 1
55050: ARRAY
55051: PUSH
55052: LD_STRING p
55054: EQUAL
55055: IFFALSE 55065
// result := true ;
55057: LD_ADDR_VAR 0 2
55061: PUSH
55062: LD_INT 1
55064: ST_TO_ADDR
// end ;
55065: LD_VAR 0 2
55069: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
55070: LD_INT 0
55072: PPUSH
55073: PPUSH
55074: PPUSH
55075: PPUSH
// if pos < 1 then
55076: LD_VAR 0 2
55080: PUSH
55081: LD_INT 1
55083: LESS
55084: IFFALSE 55088
// exit ;
55086: GO 55391
// if pos = 1 then
55088: LD_VAR 0 2
55092: PUSH
55093: LD_INT 1
55095: EQUAL
55096: IFFALSE 55129
// result := Replace ( arr , pos [ 1 ] , value ) else
55098: LD_ADDR_VAR 0 4
55102: PUSH
55103: LD_VAR 0 1
55107: PPUSH
55108: LD_VAR 0 2
55112: PUSH
55113: LD_INT 1
55115: ARRAY
55116: PPUSH
55117: LD_VAR 0 3
55121: PPUSH
55122: CALL_OW 1
55126: ST_TO_ADDR
55127: GO 55391
// begin tmp := arr ;
55129: LD_ADDR_VAR 0 6
55133: PUSH
55134: LD_VAR 0 1
55138: ST_TO_ADDR
// s_arr := [ tmp ] ;
55139: LD_ADDR_VAR 0 7
55143: PUSH
55144: LD_VAR 0 6
55148: PUSH
55149: EMPTY
55150: LIST
55151: ST_TO_ADDR
// for i = 1 to pos - 1 do
55152: LD_ADDR_VAR 0 5
55156: PUSH
55157: DOUBLE
55158: LD_INT 1
55160: DEC
55161: ST_TO_ADDR
55162: LD_VAR 0 2
55166: PUSH
55167: LD_INT 1
55169: MINUS
55170: PUSH
55171: FOR_TO
55172: IFFALSE 55217
// begin tmp := tmp [ pos [ i ] ] ;
55174: LD_ADDR_VAR 0 6
55178: PUSH
55179: LD_VAR 0 6
55183: PUSH
55184: LD_VAR 0 2
55188: PUSH
55189: LD_VAR 0 5
55193: ARRAY
55194: ARRAY
55195: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
55196: LD_ADDR_VAR 0 7
55200: PUSH
55201: LD_VAR 0 7
55205: PUSH
55206: LD_VAR 0 6
55210: PUSH
55211: EMPTY
55212: LIST
55213: ADD
55214: ST_TO_ADDR
// end ;
55215: GO 55171
55217: POP
55218: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
55219: LD_ADDR_VAR 0 6
55223: PUSH
55224: LD_VAR 0 6
55228: PPUSH
55229: LD_VAR 0 2
55233: PUSH
55234: LD_VAR 0 2
55238: ARRAY
55239: PPUSH
55240: LD_VAR 0 3
55244: PPUSH
55245: CALL_OW 1
55249: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
55250: LD_ADDR_VAR 0 7
55254: PUSH
55255: LD_VAR 0 7
55259: PPUSH
55260: LD_VAR 0 7
55264: PPUSH
55265: LD_VAR 0 6
55269: PPUSH
55270: CALL_OW 1
55274: ST_TO_ADDR
// for i = s_arr downto 2 do
55275: LD_ADDR_VAR 0 5
55279: PUSH
55280: DOUBLE
55281: LD_VAR 0 7
55285: INC
55286: ST_TO_ADDR
55287: LD_INT 2
55289: PUSH
55290: FOR_DOWNTO
55291: IFFALSE 55375
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
55293: LD_ADDR_VAR 0 6
55297: PUSH
55298: LD_VAR 0 7
55302: PUSH
55303: LD_VAR 0 5
55307: PUSH
55308: LD_INT 1
55310: MINUS
55311: ARRAY
55312: PPUSH
55313: LD_VAR 0 2
55317: PUSH
55318: LD_VAR 0 5
55322: PUSH
55323: LD_INT 1
55325: MINUS
55326: ARRAY
55327: PPUSH
55328: LD_VAR 0 7
55332: PUSH
55333: LD_VAR 0 5
55337: ARRAY
55338: PPUSH
55339: CALL_OW 1
55343: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
55344: LD_ADDR_VAR 0 7
55348: PUSH
55349: LD_VAR 0 7
55353: PPUSH
55354: LD_VAR 0 5
55358: PUSH
55359: LD_INT 1
55361: MINUS
55362: PPUSH
55363: LD_VAR 0 6
55367: PPUSH
55368: CALL_OW 1
55372: ST_TO_ADDR
// end ;
55373: GO 55290
55375: POP
55376: POP
// result := s_arr [ 1 ] ;
55377: LD_ADDR_VAR 0 4
55381: PUSH
55382: LD_VAR 0 7
55386: PUSH
55387: LD_INT 1
55389: ARRAY
55390: ST_TO_ADDR
// end ; end ;
55391: LD_VAR 0 4
55395: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
55396: LD_INT 0
55398: PPUSH
55399: PPUSH
// if not list then
55400: LD_VAR 0 1
55404: NOT
55405: IFFALSE 55409
// exit ;
55407: GO 55500
// i := list [ pos1 ] ;
55409: LD_ADDR_VAR 0 5
55413: PUSH
55414: LD_VAR 0 1
55418: PUSH
55419: LD_VAR 0 2
55423: ARRAY
55424: ST_TO_ADDR
// if not i then
55425: LD_VAR 0 5
55429: NOT
55430: IFFALSE 55434
// exit ;
55432: GO 55500
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
55434: LD_ADDR_VAR 0 1
55438: PUSH
55439: LD_VAR 0 1
55443: PPUSH
55444: LD_VAR 0 2
55448: PPUSH
55449: LD_VAR 0 1
55453: PUSH
55454: LD_VAR 0 3
55458: ARRAY
55459: PPUSH
55460: CALL_OW 1
55464: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
55465: LD_ADDR_VAR 0 1
55469: PUSH
55470: LD_VAR 0 1
55474: PPUSH
55475: LD_VAR 0 3
55479: PPUSH
55480: LD_VAR 0 5
55484: PPUSH
55485: CALL_OW 1
55489: ST_TO_ADDR
// result := list ;
55490: LD_ADDR_VAR 0 4
55494: PUSH
55495: LD_VAR 0 1
55499: ST_TO_ADDR
// end ;
55500: LD_VAR 0 4
55504: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
55505: LD_INT 0
55507: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
55508: LD_ADDR_VAR 0 5
55512: PUSH
55513: LD_VAR 0 1
55517: PPUSH
55518: CALL_OW 250
55522: PPUSH
55523: LD_VAR 0 1
55527: PPUSH
55528: CALL_OW 251
55532: PPUSH
55533: LD_VAR 0 2
55537: PPUSH
55538: LD_VAR 0 3
55542: PPUSH
55543: LD_VAR 0 4
55547: PPUSH
55548: CALL 55558 0 5
55552: ST_TO_ADDR
// end ;
55553: LD_VAR 0 5
55557: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
55558: LD_INT 0
55560: PPUSH
55561: PPUSH
55562: PPUSH
55563: PPUSH
// if not list then
55564: LD_VAR 0 3
55568: NOT
55569: IFFALSE 55573
// exit ;
55571: GO 55961
// result := [ ] ;
55573: LD_ADDR_VAR 0 6
55577: PUSH
55578: EMPTY
55579: ST_TO_ADDR
// for i in list do
55580: LD_ADDR_VAR 0 7
55584: PUSH
55585: LD_VAR 0 3
55589: PUSH
55590: FOR_IN
55591: IFFALSE 55793
// begin tmp := GetDistUnitXY ( i , x , y ) ;
55593: LD_ADDR_VAR 0 9
55597: PUSH
55598: LD_VAR 0 7
55602: PPUSH
55603: LD_VAR 0 1
55607: PPUSH
55608: LD_VAR 0 2
55612: PPUSH
55613: CALL_OW 297
55617: ST_TO_ADDR
// if not result then
55618: LD_VAR 0 6
55622: NOT
55623: IFFALSE 55649
// result := [ [ i , tmp ] ] else
55625: LD_ADDR_VAR 0 6
55629: PUSH
55630: LD_VAR 0 7
55634: PUSH
55635: LD_VAR 0 9
55639: PUSH
55640: EMPTY
55641: LIST
55642: LIST
55643: PUSH
55644: EMPTY
55645: LIST
55646: ST_TO_ADDR
55647: GO 55791
// begin if result [ result ] [ 2 ] < tmp then
55649: LD_VAR 0 6
55653: PUSH
55654: LD_VAR 0 6
55658: ARRAY
55659: PUSH
55660: LD_INT 2
55662: ARRAY
55663: PUSH
55664: LD_VAR 0 9
55668: LESS
55669: IFFALSE 55711
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
55671: LD_ADDR_VAR 0 6
55675: PUSH
55676: LD_VAR 0 6
55680: PPUSH
55681: LD_VAR 0 6
55685: PUSH
55686: LD_INT 1
55688: PLUS
55689: PPUSH
55690: LD_VAR 0 7
55694: PUSH
55695: LD_VAR 0 9
55699: PUSH
55700: EMPTY
55701: LIST
55702: LIST
55703: PPUSH
55704: CALL_OW 2
55708: ST_TO_ADDR
55709: GO 55791
// for j = 1 to result do
55711: LD_ADDR_VAR 0 8
55715: PUSH
55716: DOUBLE
55717: LD_INT 1
55719: DEC
55720: ST_TO_ADDR
55721: LD_VAR 0 6
55725: PUSH
55726: FOR_TO
55727: IFFALSE 55789
// begin if tmp < result [ j ] [ 2 ] then
55729: LD_VAR 0 9
55733: PUSH
55734: LD_VAR 0 6
55738: PUSH
55739: LD_VAR 0 8
55743: ARRAY
55744: PUSH
55745: LD_INT 2
55747: ARRAY
55748: LESS
55749: IFFALSE 55787
// begin result := Insert ( result , j , [ i , tmp ] ) ;
55751: LD_ADDR_VAR 0 6
55755: PUSH
55756: LD_VAR 0 6
55760: PPUSH
55761: LD_VAR 0 8
55765: PPUSH
55766: LD_VAR 0 7
55770: PUSH
55771: LD_VAR 0 9
55775: PUSH
55776: EMPTY
55777: LIST
55778: LIST
55779: PPUSH
55780: CALL_OW 2
55784: ST_TO_ADDR
// break ;
55785: GO 55789
// end ; end ;
55787: GO 55726
55789: POP
55790: POP
// end ; end ;
55791: GO 55590
55793: POP
55794: POP
// if result and not asc then
55795: LD_VAR 0 6
55799: PUSH
55800: LD_VAR 0 4
55804: NOT
55805: AND
55806: IFFALSE 55881
// begin tmp := result ;
55808: LD_ADDR_VAR 0 9
55812: PUSH
55813: LD_VAR 0 6
55817: ST_TO_ADDR
// for i = tmp downto 1 do
55818: LD_ADDR_VAR 0 7
55822: PUSH
55823: DOUBLE
55824: LD_VAR 0 9
55828: INC
55829: ST_TO_ADDR
55830: LD_INT 1
55832: PUSH
55833: FOR_DOWNTO
55834: IFFALSE 55879
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
55836: LD_ADDR_VAR 0 6
55840: PUSH
55841: LD_VAR 0 6
55845: PPUSH
55846: LD_VAR 0 9
55850: PUSH
55851: LD_VAR 0 7
55855: MINUS
55856: PUSH
55857: LD_INT 1
55859: PLUS
55860: PPUSH
55861: LD_VAR 0 9
55865: PUSH
55866: LD_VAR 0 7
55870: ARRAY
55871: PPUSH
55872: CALL_OW 1
55876: ST_TO_ADDR
55877: GO 55833
55879: POP
55880: POP
// end ; tmp := [ ] ;
55881: LD_ADDR_VAR 0 9
55885: PUSH
55886: EMPTY
55887: ST_TO_ADDR
// if mode then
55888: LD_VAR 0 5
55892: IFFALSE 55961
// begin for i = 1 to result do
55894: LD_ADDR_VAR 0 7
55898: PUSH
55899: DOUBLE
55900: LD_INT 1
55902: DEC
55903: ST_TO_ADDR
55904: LD_VAR 0 6
55908: PUSH
55909: FOR_TO
55910: IFFALSE 55949
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
55912: LD_ADDR_VAR 0 9
55916: PUSH
55917: LD_VAR 0 9
55921: PPUSH
55922: LD_VAR 0 7
55926: PPUSH
55927: LD_VAR 0 6
55931: PUSH
55932: LD_VAR 0 7
55936: ARRAY
55937: PUSH
55938: LD_INT 1
55940: ARRAY
55941: PPUSH
55942: CALL_OW 1
55946: ST_TO_ADDR
55947: GO 55909
55949: POP
55950: POP
// result := tmp ;
55951: LD_ADDR_VAR 0 6
55955: PUSH
55956: LD_VAR 0 9
55960: ST_TO_ADDR
// end ; end ;
55961: LD_VAR 0 6
55965: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
55966: LD_INT 0
55968: PPUSH
55969: PPUSH
55970: PPUSH
55971: PPUSH
55972: PPUSH
55973: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
55974: LD_ADDR_VAR 0 5
55978: PUSH
55979: LD_INT 0
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: LD_INT 0
55987: PUSH
55988: EMPTY
55989: PUSH
55990: EMPTY
55991: LIST
55992: LIST
55993: LIST
55994: LIST
55995: ST_TO_ADDR
// if not x or not y then
55996: LD_VAR 0 2
56000: NOT
56001: PUSH
56002: LD_VAR 0 3
56006: NOT
56007: OR
56008: IFFALSE 56012
// exit ;
56010: GO 57662
// if not range then
56012: LD_VAR 0 4
56016: NOT
56017: IFFALSE 56027
// range := 10 ;
56019: LD_ADDR_VAR 0 4
56023: PUSH
56024: LD_INT 10
56026: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
56027: LD_ADDR_VAR 0 8
56031: PUSH
56032: LD_INT 81
56034: PUSH
56035: LD_VAR 0 1
56039: PUSH
56040: EMPTY
56041: LIST
56042: LIST
56043: PUSH
56044: LD_INT 92
56046: PUSH
56047: LD_VAR 0 2
56051: PUSH
56052: LD_VAR 0 3
56056: PUSH
56057: LD_VAR 0 4
56061: PUSH
56062: EMPTY
56063: LIST
56064: LIST
56065: LIST
56066: LIST
56067: PUSH
56068: LD_INT 3
56070: PUSH
56071: LD_INT 21
56073: PUSH
56074: LD_INT 3
56076: PUSH
56077: EMPTY
56078: LIST
56079: LIST
56080: PUSH
56081: EMPTY
56082: LIST
56083: LIST
56084: PUSH
56085: EMPTY
56086: LIST
56087: LIST
56088: LIST
56089: PPUSH
56090: CALL_OW 69
56094: ST_TO_ADDR
// if not tmp then
56095: LD_VAR 0 8
56099: NOT
56100: IFFALSE 56104
// exit ;
56102: GO 57662
// for i in tmp do
56104: LD_ADDR_VAR 0 6
56108: PUSH
56109: LD_VAR 0 8
56113: PUSH
56114: FOR_IN
56115: IFFALSE 57637
// begin points := [ 0 , 0 , 0 ] ;
56117: LD_ADDR_VAR 0 9
56121: PUSH
56122: LD_INT 0
56124: PUSH
56125: LD_INT 0
56127: PUSH
56128: LD_INT 0
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: LIST
56135: ST_TO_ADDR
// bpoints := 1 ;
56136: LD_ADDR_VAR 0 10
56140: PUSH
56141: LD_INT 1
56143: ST_TO_ADDR
// case GetType ( i ) of unit_human :
56144: LD_VAR 0 6
56148: PPUSH
56149: CALL_OW 247
56153: PUSH
56154: LD_INT 1
56156: DOUBLE
56157: EQUAL
56158: IFTRUE 56162
56160: GO 56740
56162: POP
// begin if GetClass ( i ) = 1 then
56163: LD_VAR 0 6
56167: PPUSH
56168: CALL_OW 257
56172: PUSH
56173: LD_INT 1
56175: EQUAL
56176: IFFALSE 56197
// points := [ 10 , 5 , 3 ] ;
56178: LD_ADDR_VAR 0 9
56182: PUSH
56183: LD_INT 10
56185: PUSH
56186: LD_INT 5
56188: PUSH
56189: LD_INT 3
56191: PUSH
56192: EMPTY
56193: LIST
56194: LIST
56195: LIST
56196: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
56197: LD_VAR 0 6
56201: PPUSH
56202: CALL_OW 257
56206: PUSH
56207: LD_INT 2
56209: PUSH
56210: LD_INT 3
56212: PUSH
56213: LD_INT 4
56215: PUSH
56216: EMPTY
56217: LIST
56218: LIST
56219: LIST
56220: IN
56221: IFFALSE 56242
// points := [ 3 , 2 , 1 ] ;
56223: LD_ADDR_VAR 0 9
56227: PUSH
56228: LD_INT 3
56230: PUSH
56231: LD_INT 2
56233: PUSH
56234: LD_INT 1
56236: PUSH
56237: EMPTY
56238: LIST
56239: LIST
56240: LIST
56241: ST_TO_ADDR
// if GetClass ( i ) = 5 then
56242: LD_VAR 0 6
56246: PPUSH
56247: CALL_OW 257
56251: PUSH
56252: LD_INT 5
56254: EQUAL
56255: IFFALSE 56276
// points := [ 130 , 5 , 2 ] ;
56257: LD_ADDR_VAR 0 9
56261: PUSH
56262: LD_INT 130
56264: PUSH
56265: LD_INT 5
56267: PUSH
56268: LD_INT 2
56270: PUSH
56271: EMPTY
56272: LIST
56273: LIST
56274: LIST
56275: ST_TO_ADDR
// if GetClass ( i ) = 8 then
56276: LD_VAR 0 6
56280: PPUSH
56281: CALL_OW 257
56285: PUSH
56286: LD_INT 8
56288: EQUAL
56289: IFFALSE 56310
// points := [ 35 , 35 , 30 ] ;
56291: LD_ADDR_VAR 0 9
56295: PUSH
56296: LD_INT 35
56298: PUSH
56299: LD_INT 35
56301: PUSH
56302: LD_INT 30
56304: PUSH
56305: EMPTY
56306: LIST
56307: LIST
56308: LIST
56309: ST_TO_ADDR
// if GetClass ( i ) = 9 then
56310: LD_VAR 0 6
56314: PPUSH
56315: CALL_OW 257
56319: PUSH
56320: LD_INT 9
56322: EQUAL
56323: IFFALSE 56344
// points := [ 20 , 55 , 40 ] ;
56325: LD_ADDR_VAR 0 9
56329: PUSH
56330: LD_INT 20
56332: PUSH
56333: LD_INT 55
56335: PUSH
56336: LD_INT 40
56338: PUSH
56339: EMPTY
56340: LIST
56341: LIST
56342: LIST
56343: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
56344: LD_VAR 0 6
56348: PPUSH
56349: CALL_OW 257
56353: PUSH
56354: LD_INT 12
56356: PUSH
56357: LD_INT 16
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: IN
56364: IFFALSE 56385
// points := [ 5 , 3 , 2 ] ;
56366: LD_ADDR_VAR 0 9
56370: PUSH
56371: LD_INT 5
56373: PUSH
56374: LD_INT 3
56376: PUSH
56377: LD_INT 2
56379: PUSH
56380: EMPTY
56381: LIST
56382: LIST
56383: LIST
56384: ST_TO_ADDR
// if GetClass ( i ) = 17 then
56385: LD_VAR 0 6
56389: PPUSH
56390: CALL_OW 257
56394: PUSH
56395: LD_INT 17
56397: EQUAL
56398: IFFALSE 56419
// points := [ 100 , 50 , 75 ] ;
56400: LD_ADDR_VAR 0 9
56404: PUSH
56405: LD_INT 100
56407: PUSH
56408: LD_INT 50
56410: PUSH
56411: LD_INT 75
56413: PUSH
56414: EMPTY
56415: LIST
56416: LIST
56417: LIST
56418: ST_TO_ADDR
// if GetClass ( i ) = 15 then
56419: LD_VAR 0 6
56423: PPUSH
56424: CALL_OW 257
56428: PUSH
56429: LD_INT 15
56431: EQUAL
56432: IFFALSE 56453
// points := [ 10 , 5 , 3 ] ;
56434: LD_ADDR_VAR 0 9
56438: PUSH
56439: LD_INT 10
56441: PUSH
56442: LD_INT 5
56444: PUSH
56445: LD_INT 3
56447: PUSH
56448: EMPTY
56449: LIST
56450: LIST
56451: LIST
56452: ST_TO_ADDR
// if GetClass ( i ) = 14 then
56453: LD_VAR 0 6
56457: PPUSH
56458: CALL_OW 257
56462: PUSH
56463: LD_INT 14
56465: EQUAL
56466: IFFALSE 56487
// points := [ 10 , 0 , 0 ] ;
56468: LD_ADDR_VAR 0 9
56472: PUSH
56473: LD_INT 10
56475: PUSH
56476: LD_INT 0
56478: PUSH
56479: LD_INT 0
56481: PUSH
56482: EMPTY
56483: LIST
56484: LIST
56485: LIST
56486: ST_TO_ADDR
// if GetClass ( i ) = 11 then
56487: LD_VAR 0 6
56491: PPUSH
56492: CALL_OW 257
56496: PUSH
56497: LD_INT 11
56499: EQUAL
56500: IFFALSE 56521
// points := [ 30 , 10 , 5 ] ;
56502: LD_ADDR_VAR 0 9
56506: PUSH
56507: LD_INT 30
56509: PUSH
56510: LD_INT 10
56512: PUSH
56513: LD_INT 5
56515: PUSH
56516: EMPTY
56517: LIST
56518: LIST
56519: LIST
56520: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
56521: LD_VAR 0 1
56525: PPUSH
56526: LD_INT 5
56528: PPUSH
56529: CALL_OW 321
56533: PUSH
56534: LD_INT 2
56536: EQUAL
56537: IFFALSE 56554
// bpoints := bpoints * 1.8 ;
56539: LD_ADDR_VAR 0 10
56543: PUSH
56544: LD_VAR 0 10
56548: PUSH
56549: LD_REAL  1.80000000000000E+0000
56552: MUL
56553: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
56554: LD_VAR 0 6
56558: PPUSH
56559: CALL_OW 257
56563: PUSH
56564: LD_INT 1
56566: PUSH
56567: LD_INT 2
56569: PUSH
56570: LD_INT 3
56572: PUSH
56573: LD_INT 4
56575: PUSH
56576: EMPTY
56577: LIST
56578: LIST
56579: LIST
56580: LIST
56581: IN
56582: PUSH
56583: LD_VAR 0 1
56587: PPUSH
56588: LD_INT 51
56590: PPUSH
56591: CALL_OW 321
56595: PUSH
56596: LD_INT 2
56598: EQUAL
56599: AND
56600: IFFALSE 56617
// bpoints := bpoints * 1.2 ;
56602: LD_ADDR_VAR 0 10
56606: PUSH
56607: LD_VAR 0 10
56611: PUSH
56612: LD_REAL  1.20000000000000E+0000
56615: MUL
56616: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
56617: LD_VAR 0 6
56621: PPUSH
56622: CALL_OW 257
56626: PUSH
56627: LD_INT 5
56629: PUSH
56630: LD_INT 7
56632: PUSH
56633: LD_INT 9
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: LIST
56640: IN
56641: PUSH
56642: LD_VAR 0 1
56646: PPUSH
56647: LD_INT 52
56649: PPUSH
56650: CALL_OW 321
56654: PUSH
56655: LD_INT 2
56657: EQUAL
56658: AND
56659: IFFALSE 56676
// bpoints := bpoints * 1.5 ;
56661: LD_ADDR_VAR 0 10
56665: PUSH
56666: LD_VAR 0 10
56670: PUSH
56671: LD_REAL  1.50000000000000E+0000
56674: MUL
56675: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
56676: LD_VAR 0 1
56680: PPUSH
56681: LD_INT 66
56683: PPUSH
56684: CALL_OW 321
56688: PUSH
56689: LD_INT 2
56691: EQUAL
56692: IFFALSE 56709
// bpoints := bpoints * 1.1 ;
56694: LD_ADDR_VAR 0 10
56698: PUSH
56699: LD_VAR 0 10
56703: PUSH
56704: LD_REAL  1.10000000000000E+0000
56707: MUL
56708: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
56709: LD_ADDR_VAR 0 10
56713: PUSH
56714: LD_VAR 0 10
56718: PUSH
56719: LD_VAR 0 6
56723: PPUSH
56724: LD_INT 1
56726: PPUSH
56727: CALL_OW 259
56731: PUSH
56732: LD_REAL  1.15000000000000E+0000
56735: MUL
56736: MUL
56737: ST_TO_ADDR
// end ; unit_vehicle :
56738: GO 57566
56740: LD_INT 2
56742: DOUBLE
56743: EQUAL
56744: IFTRUE 56748
56746: GO 57554
56748: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
56749: LD_VAR 0 6
56753: PPUSH
56754: CALL_OW 264
56758: PUSH
56759: LD_INT 2
56761: PUSH
56762: LD_INT 42
56764: PUSH
56765: LD_INT 24
56767: PUSH
56768: EMPTY
56769: LIST
56770: LIST
56771: LIST
56772: IN
56773: IFFALSE 56794
// points := [ 25 , 5 , 3 ] ;
56775: LD_ADDR_VAR 0 9
56779: PUSH
56780: LD_INT 25
56782: PUSH
56783: LD_INT 5
56785: PUSH
56786: LD_INT 3
56788: PUSH
56789: EMPTY
56790: LIST
56791: LIST
56792: LIST
56793: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
56794: LD_VAR 0 6
56798: PPUSH
56799: CALL_OW 264
56803: PUSH
56804: LD_INT 4
56806: PUSH
56807: LD_INT 43
56809: PUSH
56810: LD_INT 25
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: LIST
56817: IN
56818: IFFALSE 56839
// points := [ 40 , 15 , 5 ] ;
56820: LD_ADDR_VAR 0 9
56824: PUSH
56825: LD_INT 40
56827: PUSH
56828: LD_INT 15
56830: PUSH
56831: LD_INT 5
56833: PUSH
56834: EMPTY
56835: LIST
56836: LIST
56837: LIST
56838: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
56839: LD_VAR 0 6
56843: PPUSH
56844: CALL_OW 264
56848: PUSH
56849: LD_INT 3
56851: PUSH
56852: LD_INT 23
56854: PUSH
56855: EMPTY
56856: LIST
56857: LIST
56858: IN
56859: IFFALSE 56880
// points := [ 7 , 25 , 8 ] ;
56861: LD_ADDR_VAR 0 9
56865: PUSH
56866: LD_INT 7
56868: PUSH
56869: LD_INT 25
56871: PUSH
56872: LD_INT 8
56874: PUSH
56875: EMPTY
56876: LIST
56877: LIST
56878: LIST
56879: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
56880: LD_VAR 0 6
56884: PPUSH
56885: CALL_OW 264
56889: PUSH
56890: LD_INT 5
56892: PUSH
56893: LD_INT 27
56895: PUSH
56896: LD_INT 44
56898: PUSH
56899: EMPTY
56900: LIST
56901: LIST
56902: LIST
56903: IN
56904: IFFALSE 56925
// points := [ 14 , 50 , 16 ] ;
56906: LD_ADDR_VAR 0 9
56910: PUSH
56911: LD_INT 14
56913: PUSH
56914: LD_INT 50
56916: PUSH
56917: LD_INT 16
56919: PUSH
56920: EMPTY
56921: LIST
56922: LIST
56923: LIST
56924: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
56925: LD_VAR 0 6
56929: PPUSH
56930: CALL_OW 264
56934: PUSH
56935: LD_INT 6
56937: PUSH
56938: LD_INT 46
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: IN
56945: IFFALSE 56966
// points := [ 32 , 120 , 70 ] ;
56947: LD_ADDR_VAR 0 9
56951: PUSH
56952: LD_INT 32
56954: PUSH
56955: LD_INT 120
56957: PUSH
56958: LD_INT 70
56960: PUSH
56961: EMPTY
56962: LIST
56963: LIST
56964: LIST
56965: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
56966: LD_VAR 0 6
56970: PPUSH
56971: CALL_OW 264
56975: PUSH
56976: LD_INT 7
56978: PUSH
56979: LD_INT 28
56981: PUSH
56982: LD_INT 45
56984: PUSH
56985: LD_INT 92
56987: PUSH
56988: EMPTY
56989: LIST
56990: LIST
56991: LIST
56992: LIST
56993: IN
56994: IFFALSE 57015
// points := [ 35 , 20 , 45 ] ;
56996: LD_ADDR_VAR 0 9
57000: PUSH
57001: LD_INT 35
57003: PUSH
57004: LD_INT 20
57006: PUSH
57007: LD_INT 45
57009: PUSH
57010: EMPTY
57011: LIST
57012: LIST
57013: LIST
57014: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
57015: LD_VAR 0 6
57019: PPUSH
57020: CALL_OW 264
57024: PUSH
57025: LD_INT 47
57027: PUSH
57028: EMPTY
57029: LIST
57030: IN
57031: IFFALSE 57052
// points := [ 67 , 45 , 75 ] ;
57033: LD_ADDR_VAR 0 9
57037: PUSH
57038: LD_INT 67
57040: PUSH
57041: LD_INT 45
57043: PUSH
57044: LD_INT 75
57046: PUSH
57047: EMPTY
57048: LIST
57049: LIST
57050: LIST
57051: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
57052: LD_VAR 0 6
57056: PPUSH
57057: CALL_OW 264
57061: PUSH
57062: LD_INT 26
57064: PUSH
57065: EMPTY
57066: LIST
57067: IN
57068: IFFALSE 57089
// points := [ 120 , 30 , 80 ] ;
57070: LD_ADDR_VAR 0 9
57074: PUSH
57075: LD_INT 120
57077: PUSH
57078: LD_INT 30
57080: PUSH
57081: LD_INT 80
57083: PUSH
57084: EMPTY
57085: LIST
57086: LIST
57087: LIST
57088: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
57089: LD_VAR 0 6
57093: PPUSH
57094: CALL_OW 264
57098: PUSH
57099: LD_INT 22
57101: PUSH
57102: EMPTY
57103: LIST
57104: IN
57105: IFFALSE 57126
// points := [ 40 , 1 , 1 ] ;
57107: LD_ADDR_VAR 0 9
57111: PUSH
57112: LD_INT 40
57114: PUSH
57115: LD_INT 1
57117: PUSH
57118: LD_INT 1
57120: PUSH
57121: EMPTY
57122: LIST
57123: LIST
57124: LIST
57125: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
57126: LD_VAR 0 6
57130: PPUSH
57131: CALL_OW 264
57135: PUSH
57136: LD_INT 29
57138: PUSH
57139: EMPTY
57140: LIST
57141: IN
57142: IFFALSE 57163
// points := [ 70 , 200 , 400 ] ;
57144: LD_ADDR_VAR 0 9
57148: PUSH
57149: LD_INT 70
57151: PUSH
57152: LD_INT 200
57154: PUSH
57155: LD_INT 400
57157: PUSH
57158: EMPTY
57159: LIST
57160: LIST
57161: LIST
57162: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
57163: LD_VAR 0 6
57167: PPUSH
57168: CALL_OW 264
57172: PUSH
57173: LD_INT 14
57175: PUSH
57176: LD_INT 53
57178: PUSH
57179: EMPTY
57180: LIST
57181: LIST
57182: IN
57183: IFFALSE 57204
// points := [ 40 , 10 , 20 ] ;
57185: LD_ADDR_VAR 0 9
57189: PUSH
57190: LD_INT 40
57192: PUSH
57193: LD_INT 10
57195: PUSH
57196: LD_INT 20
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: LIST
57203: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
57204: LD_VAR 0 6
57208: PPUSH
57209: CALL_OW 264
57213: PUSH
57214: LD_INT 9
57216: PUSH
57217: EMPTY
57218: LIST
57219: IN
57220: IFFALSE 57241
// points := [ 5 , 70 , 20 ] ;
57222: LD_ADDR_VAR 0 9
57226: PUSH
57227: LD_INT 5
57229: PUSH
57230: LD_INT 70
57232: PUSH
57233: LD_INT 20
57235: PUSH
57236: EMPTY
57237: LIST
57238: LIST
57239: LIST
57240: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
57241: LD_VAR 0 6
57245: PPUSH
57246: CALL_OW 264
57250: PUSH
57251: LD_INT 10
57253: PUSH
57254: EMPTY
57255: LIST
57256: IN
57257: IFFALSE 57278
// points := [ 35 , 110 , 70 ] ;
57259: LD_ADDR_VAR 0 9
57263: PUSH
57264: LD_INT 35
57266: PUSH
57267: LD_INT 110
57269: PUSH
57270: LD_INT 70
57272: PUSH
57273: EMPTY
57274: LIST
57275: LIST
57276: LIST
57277: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
57278: LD_VAR 0 6
57282: PPUSH
57283: CALL_OW 265
57287: PUSH
57288: LD_INT 25
57290: EQUAL
57291: IFFALSE 57312
// points := [ 80 , 65 , 100 ] ;
57293: LD_ADDR_VAR 0 9
57297: PUSH
57298: LD_INT 80
57300: PUSH
57301: LD_INT 65
57303: PUSH
57304: LD_INT 100
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: LIST
57311: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
57312: LD_VAR 0 6
57316: PPUSH
57317: CALL_OW 263
57321: PUSH
57322: LD_INT 1
57324: EQUAL
57325: IFFALSE 57360
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
57327: LD_ADDR_VAR 0 10
57331: PUSH
57332: LD_VAR 0 10
57336: PUSH
57337: LD_VAR 0 6
57341: PPUSH
57342: CALL_OW 311
57346: PPUSH
57347: LD_INT 3
57349: PPUSH
57350: CALL_OW 259
57354: PUSH
57355: LD_INT 4
57357: MUL
57358: MUL
57359: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
57360: LD_VAR 0 6
57364: PPUSH
57365: CALL_OW 263
57369: PUSH
57370: LD_INT 2
57372: EQUAL
57373: IFFALSE 57424
// begin j := IsControledBy ( i ) ;
57375: LD_ADDR_VAR 0 7
57379: PUSH
57380: LD_VAR 0 6
57384: PPUSH
57385: CALL_OW 312
57389: ST_TO_ADDR
// if j then
57390: LD_VAR 0 7
57394: IFFALSE 57424
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
57396: LD_ADDR_VAR 0 10
57400: PUSH
57401: LD_VAR 0 10
57405: PUSH
57406: LD_VAR 0 7
57410: PPUSH
57411: LD_INT 3
57413: PPUSH
57414: CALL_OW 259
57418: PUSH
57419: LD_INT 3
57421: MUL
57422: MUL
57423: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
57424: LD_VAR 0 6
57428: PPUSH
57429: CALL_OW 264
57433: PUSH
57434: LD_INT 5
57436: PUSH
57437: LD_INT 6
57439: PUSH
57440: LD_INT 46
57442: PUSH
57443: LD_INT 44
57445: PUSH
57446: LD_INT 47
57448: PUSH
57449: LD_INT 45
57451: PUSH
57452: LD_INT 28
57454: PUSH
57455: LD_INT 7
57457: PUSH
57458: LD_INT 27
57460: PUSH
57461: LD_INT 29
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: LIST
57468: LIST
57469: LIST
57470: LIST
57471: LIST
57472: LIST
57473: LIST
57474: LIST
57475: IN
57476: PUSH
57477: LD_VAR 0 1
57481: PPUSH
57482: LD_INT 52
57484: PPUSH
57485: CALL_OW 321
57489: PUSH
57490: LD_INT 2
57492: EQUAL
57493: AND
57494: IFFALSE 57511
// bpoints := bpoints * 1.2 ;
57496: LD_ADDR_VAR 0 10
57500: PUSH
57501: LD_VAR 0 10
57505: PUSH
57506: LD_REAL  1.20000000000000E+0000
57509: MUL
57510: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
57511: LD_VAR 0 6
57515: PPUSH
57516: CALL_OW 264
57520: PUSH
57521: LD_INT 6
57523: PUSH
57524: LD_INT 46
57526: PUSH
57527: LD_INT 47
57529: PUSH
57530: EMPTY
57531: LIST
57532: LIST
57533: LIST
57534: IN
57535: IFFALSE 57552
// bpoints := bpoints * 1.2 ;
57537: LD_ADDR_VAR 0 10
57541: PUSH
57542: LD_VAR 0 10
57546: PUSH
57547: LD_REAL  1.20000000000000E+0000
57550: MUL
57551: ST_TO_ADDR
// end ; unit_building :
57552: GO 57566
57554: LD_INT 3
57556: DOUBLE
57557: EQUAL
57558: IFTRUE 57562
57560: GO 57565
57562: POP
// ; end ;
57563: GO 57566
57565: POP
// for j = 1 to 3 do
57566: LD_ADDR_VAR 0 7
57570: PUSH
57571: DOUBLE
57572: LD_INT 1
57574: DEC
57575: ST_TO_ADDR
57576: LD_INT 3
57578: PUSH
57579: FOR_TO
57580: IFFALSE 57633
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
57582: LD_ADDR_VAR 0 5
57586: PUSH
57587: LD_VAR 0 5
57591: PPUSH
57592: LD_VAR 0 7
57596: PPUSH
57597: LD_VAR 0 5
57601: PUSH
57602: LD_VAR 0 7
57606: ARRAY
57607: PUSH
57608: LD_VAR 0 9
57612: PUSH
57613: LD_VAR 0 7
57617: ARRAY
57618: PUSH
57619: LD_VAR 0 10
57623: MUL
57624: PLUS
57625: PPUSH
57626: CALL_OW 1
57630: ST_TO_ADDR
57631: GO 57579
57633: POP
57634: POP
// end ;
57635: GO 56114
57637: POP
57638: POP
// result := Replace ( result , 4 , tmp ) ;
57639: LD_ADDR_VAR 0 5
57643: PUSH
57644: LD_VAR 0 5
57648: PPUSH
57649: LD_INT 4
57651: PPUSH
57652: LD_VAR 0 8
57656: PPUSH
57657: CALL_OW 1
57661: ST_TO_ADDR
// end ;
57662: LD_VAR 0 5
57666: RET
// export function DangerAtRange ( unit , range ) ; begin
57667: LD_INT 0
57669: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
57670: LD_ADDR_VAR 0 3
57674: PUSH
57675: LD_VAR 0 1
57679: PPUSH
57680: CALL_OW 255
57684: PPUSH
57685: LD_VAR 0 1
57689: PPUSH
57690: CALL_OW 250
57694: PPUSH
57695: LD_VAR 0 1
57699: PPUSH
57700: CALL_OW 251
57704: PPUSH
57705: LD_VAR 0 2
57709: PPUSH
57710: CALL 55966 0 4
57714: ST_TO_ADDR
// end ;
57715: LD_VAR 0 3
57719: RET
// export function DangerInArea ( side , area ) ; begin
57720: LD_INT 0
57722: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
57723: LD_ADDR_VAR 0 3
57727: PUSH
57728: LD_VAR 0 2
57732: PPUSH
57733: LD_INT 81
57735: PUSH
57736: LD_VAR 0 1
57740: PUSH
57741: EMPTY
57742: LIST
57743: LIST
57744: PPUSH
57745: CALL_OW 70
57749: ST_TO_ADDR
// end ;
57750: LD_VAR 0 3
57754: RET
// export function IsExtension ( b ) ; begin
57755: LD_INT 0
57757: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
57758: LD_ADDR_VAR 0 2
57762: PUSH
57763: LD_VAR 0 1
57767: PUSH
57768: LD_INT 23
57770: PUSH
57771: LD_INT 20
57773: PUSH
57774: LD_INT 22
57776: PUSH
57777: LD_INT 17
57779: PUSH
57780: LD_INT 24
57782: PUSH
57783: LD_INT 21
57785: PUSH
57786: LD_INT 19
57788: PUSH
57789: LD_INT 16
57791: PUSH
57792: LD_INT 25
57794: PUSH
57795: LD_INT 18
57797: PUSH
57798: EMPTY
57799: LIST
57800: LIST
57801: LIST
57802: LIST
57803: LIST
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: LIST
57809: IN
57810: ST_TO_ADDR
// end ;
57811: LD_VAR 0 2
57815: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
57816: LD_INT 0
57818: PPUSH
57819: PPUSH
57820: PPUSH
// result := [ ] ;
57821: LD_ADDR_VAR 0 4
57825: PUSH
57826: EMPTY
57827: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
57828: LD_ADDR_VAR 0 5
57832: PUSH
57833: LD_VAR 0 2
57837: PPUSH
57838: LD_INT 21
57840: PUSH
57841: LD_INT 3
57843: PUSH
57844: EMPTY
57845: LIST
57846: LIST
57847: PPUSH
57848: CALL_OW 70
57852: ST_TO_ADDR
// if not tmp then
57853: LD_VAR 0 5
57857: NOT
57858: IFFALSE 57862
// exit ;
57860: GO 57926
// if checkLink then
57862: LD_VAR 0 3
57866: IFFALSE 57916
// begin for i in tmp do
57868: LD_ADDR_VAR 0 6
57872: PUSH
57873: LD_VAR 0 5
57877: PUSH
57878: FOR_IN
57879: IFFALSE 57914
// if GetBase ( i ) <> base then
57881: LD_VAR 0 6
57885: PPUSH
57886: CALL_OW 274
57890: PUSH
57891: LD_VAR 0 1
57895: NONEQUAL
57896: IFFALSE 57912
// ComLinkToBase ( base , i ) ;
57898: LD_VAR 0 1
57902: PPUSH
57903: LD_VAR 0 6
57907: PPUSH
57908: CALL_OW 169
57912: GO 57878
57914: POP
57915: POP
// end ; result := tmp ;
57916: LD_ADDR_VAR 0 4
57920: PUSH
57921: LD_VAR 0 5
57925: ST_TO_ADDR
// end ;
57926: LD_VAR 0 4
57930: RET
// export function ComComplete ( units , b ) ; var i ; begin
57931: LD_INT 0
57933: PPUSH
57934: PPUSH
// if not units then
57935: LD_VAR 0 1
57939: NOT
57940: IFFALSE 57944
// exit ;
57942: GO 58034
// for i in units do
57944: LD_ADDR_VAR 0 4
57948: PUSH
57949: LD_VAR 0 1
57953: PUSH
57954: FOR_IN
57955: IFFALSE 58032
// if BuildingStatus ( b ) = bs_build then
57957: LD_VAR 0 2
57961: PPUSH
57962: CALL_OW 461
57966: PUSH
57967: LD_INT 1
57969: EQUAL
57970: IFFALSE 58030
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
57972: LD_VAR 0 4
57976: PPUSH
57977: LD_STRING h
57979: PUSH
57980: LD_VAR 0 2
57984: PPUSH
57985: CALL_OW 250
57989: PUSH
57990: LD_VAR 0 2
57994: PPUSH
57995: CALL_OW 251
57999: PUSH
58000: LD_VAR 0 2
58004: PUSH
58005: LD_INT 0
58007: PUSH
58008: LD_INT 0
58010: PUSH
58011: LD_INT 0
58013: PUSH
58014: EMPTY
58015: LIST
58016: LIST
58017: LIST
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: PUSH
58023: EMPTY
58024: LIST
58025: PPUSH
58026: CALL_OW 446
58030: GO 57954
58032: POP
58033: POP
// end ;
58034: LD_VAR 0 3
58038: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
58039: LD_INT 0
58041: PPUSH
58042: PPUSH
58043: PPUSH
58044: PPUSH
58045: PPUSH
58046: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
58047: LD_VAR 0 1
58051: NOT
58052: PUSH
58053: LD_VAR 0 1
58057: PPUSH
58058: CALL_OW 263
58062: PUSH
58063: LD_INT 2
58065: NONEQUAL
58066: OR
58067: IFFALSE 58071
// exit ;
58069: GO 58387
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
58071: LD_ADDR_VAR 0 6
58075: PUSH
58076: LD_INT 22
58078: PUSH
58079: LD_VAR 0 1
58083: PPUSH
58084: CALL_OW 255
58088: PUSH
58089: EMPTY
58090: LIST
58091: LIST
58092: PUSH
58093: LD_INT 2
58095: PUSH
58096: LD_INT 30
58098: PUSH
58099: LD_INT 36
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: PUSH
58106: LD_INT 34
58108: PUSH
58109: LD_INT 31
58111: PUSH
58112: EMPTY
58113: LIST
58114: LIST
58115: PUSH
58116: EMPTY
58117: LIST
58118: LIST
58119: LIST
58120: PUSH
58121: EMPTY
58122: LIST
58123: LIST
58124: PPUSH
58125: CALL_OW 69
58129: ST_TO_ADDR
// if not tmp then
58130: LD_VAR 0 6
58134: NOT
58135: IFFALSE 58139
// exit ;
58137: GO 58387
// result := [ ] ;
58139: LD_ADDR_VAR 0 2
58143: PUSH
58144: EMPTY
58145: ST_TO_ADDR
// for i in tmp do
58146: LD_ADDR_VAR 0 3
58150: PUSH
58151: LD_VAR 0 6
58155: PUSH
58156: FOR_IN
58157: IFFALSE 58228
// begin t := UnitsInside ( i ) ;
58159: LD_ADDR_VAR 0 4
58163: PUSH
58164: LD_VAR 0 3
58168: PPUSH
58169: CALL_OW 313
58173: ST_TO_ADDR
// if t then
58174: LD_VAR 0 4
58178: IFFALSE 58226
// for j in t do
58180: LD_ADDR_VAR 0 7
58184: PUSH
58185: LD_VAR 0 4
58189: PUSH
58190: FOR_IN
58191: IFFALSE 58224
// result := Replace ( result , result + 1 , j ) ;
58193: LD_ADDR_VAR 0 2
58197: PUSH
58198: LD_VAR 0 2
58202: PPUSH
58203: LD_VAR 0 2
58207: PUSH
58208: LD_INT 1
58210: PLUS
58211: PPUSH
58212: LD_VAR 0 7
58216: PPUSH
58217: CALL_OW 1
58221: ST_TO_ADDR
58222: GO 58190
58224: POP
58225: POP
// end ;
58226: GO 58156
58228: POP
58229: POP
// if not result then
58230: LD_VAR 0 2
58234: NOT
58235: IFFALSE 58239
// exit ;
58237: GO 58387
// mech := result [ 1 ] ;
58239: LD_ADDR_VAR 0 5
58243: PUSH
58244: LD_VAR 0 2
58248: PUSH
58249: LD_INT 1
58251: ARRAY
58252: ST_TO_ADDR
// if result > 1 then
58253: LD_VAR 0 2
58257: PUSH
58258: LD_INT 1
58260: GREATER
58261: IFFALSE 58373
// begin for i = 2 to result do
58263: LD_ADDR_VAR 0 3
58267: PUSH
58268: DOUBLE
58269: LD_INT 2
58271: DEC
58272: ST_TO_ADDR
58273: LD_VAR 0 2
58277: PUSH
58278: FOR_TO
58279: IFFALSE 58371
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
58281: LD_ADDR_VAR 0 4
58285: PUSH
58286: LD_VAR 0 2
58290: PUSH
58291: LD_VAR 0 3
58295: ARRAY
58296: PPUSH
58297: LD_INT 3
58299: PPUSH
58300: CALL_OW 259
58304: PUSH
58305: LD_VAR 0 2
58309: PUSH
58310: LD_VAR 0 3
58314: ARRAY
58315: PPUSH
58316: CALL_OW 432
58320: MINUS
58321: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
58322: LD_VAR 0 4
58326: PUSH
58327: LD_VAR 0 5
58331: PPUSH
58332: LD_INT 3
58334: PPUSH
58335: CALL_OW 259
58339: PUSH
58340: LD_VAR 0 5
58344: PPUSH
58345: CALL_OW 432
58349: MINUS
58350: GREATEREQUAL
58351: IFFALSE 58369
// mech := result [ i ] ;
58353: LD_ADDR_VAR 0 5
58357: PUSH
58358: LD_VAR 0 2
58362: PUSH
58363: LD_VAR 0 3
58367: ARRAY
58368: ST_TO_ADDR
// end ;
58369: GO 58278
58371: POP
58372: POP
// end ; ComLinkTo ( vehicle , mech ) ;
58373: LD_VAR 0 1
58377: PPUSH
58378: LD_VAR 0 5
58382: PPUSH
58383: CALL_OW 135
// end ;
58387: LD_VAR 0 2
58391: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
58392: LD_INT 0
58394: PPUSH
58395: PPUSH
58396: PPUSH
58397: PPUSH
58398: PPUSH
58399: PPUSH
58400: PPUSH
58401: PPUSH
58402: PPUSH
58403: PPUSH
58404: PPUSH
58405: PPUSH
58406: PPUSH
// result := [ ] ;
58407: LD_ADDR_VAR 0 7
58411: PUSH
58412: EMPTY
58413: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
58414: LD_VAR 0 1
58418: PPUSH
58419: CALL_OW 266
58423: PUSH
58424: LD_INT 0
58426: PUSH
58427: LD_INT 1
58429: PUSH
58430: EMPTY
58431: LIST
58432: LIST
58433: IN
58434: NOT
58435: IFFALSE 58439
// exit ;
58437: GO 60073
// if name then
58439: LD_VAR 0 3
58443: IFFALSE 58459
// SetBName ( base_dep , name ) ;
58445: LD_VAR 0 1
58449: PPUSH
58450: LD_VAR 0 3
58454: PPUSH
58455: CALL_OW 500
// base := GetBase ( base_dep ) ;
58459: LD_ADDR_VAR 0 15
58463: PUSH
58464: LD_VAR 0 1
58468: PPUSH
58469: CALL_OW 274
58473: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
58474: LD_ADDR_VAR 0 16
58478: PUSH
58479: LD_VAR 0 1
58483: PPUSH
58484: CALL_OW 255
58488: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
58489: LD_ADDR_VAR 0 17
58493: PUSH
58494: LD_VAR 0 1
58498: PPUSH
58499: CALL_OW 248
58503: ST_TO_ADDR
// if sources then
58504: LD_VAR 0 5
58508: IFFALSE 58555
// for i = 1 to 3 do
58510: LD_ADDR_VAR 0 8
58514: PUSH
58515: DOUBLE
58516: LD_INT 1
58518: DEC
58519: ST_TO_ADDR
58520: LD_INT 3
58522: PUSH
58523: FOR_TO
58524: IFFALSE 58553
// AddResourceType ( base , i , sources [ i ] ) ;
58526: LD_VAR 0 15
58530: PPUSH
58531: LD_VAR 0 8
58535: PPUSH
58536: LD_VAR 0 5
58540: PUSH
58541: LD_VAR 0 8
58545: ARRAY
58546: PPUSH
58547: CALL_OW 276
58551: GO 58523
58553: POP
58554: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
58555: LD_ADDR_VAR 0 18
58559: PUSH
58560: LD_VAR 0 15
58564: PPUSH
58565: LD_VAR 0 2
58569: PPUSH
58570: LD_INT 1
58572: PPUSH
58573: CALL 57816 0 3
58577: ST_TO_ADDR
// InitHc ;
58578: CALL_OW 19
// InitUc ;
58582: CALL_OW 18
// uc_side := side ;
58586: LD_ADDR_OWVAR 20
58590: PUSH
58591: LD_VAR 0 16
58595: ST_TO_ADDR
// uc_nation := nation ;
58596: LD_ADDR_OWVAR 21
58600: PUSH
58601: LD_VAR 0 17
58605: ST_TO_ADDR
// if buildings then
58606: LD_VAR 0 18
58610: IFFALSE 59932
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
58612: LD_ADDR_VAR 0 19
58616: PUSH
58617: LD_VAR 0 18
58621: PPUSH
58622: LD_INT 2
58624: PUSH
58625: LD_INT 30
58627: PUSH
58628: LD_INT 29
58630: PUSH
58631: EMPTY
58632: LIST
58633: LIST
58634: PUSH
58635: LD_INT 30
58637: PUSH
58638: LD_INT 30
58640: PUSH
58641: EMPTY
58642: LIST
58643: LIST
58644: PUSH
58645: EMPTY
58646: LIST
58647: LIST
58648: LIST
58649: PPUSH
58650: CALL_OW 72
58654: ST_TO_ADDR
// if tmp then
58655: LD_VAR 0 19
58659: IFFALSE 58707
// for i in tmp do
58661: LD_ADDR_VAR 0 8
58665: PUSH
58666: LD_VAR 0 19
58670: PUSH
58671: FOR_IN
58672: IFFALSE 58705
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
58674: LD_VAR 0 8
58678: PPUSH
58679: CALL_OW 250
58683: PPUSH
58684: LD_VAR 0 8
58688: PPUSH
58689: CALL_OW 251
58693: PPUSH
58694: LD_VAR 0 16
58698: PPUSH
58699: CALL_OW 441
58703: GO 58671
58705: POP
58706: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
58707: LD_VAR 0 18
58711: PPUSH
58712: LD_INT 2
58714: PUSH
58715: LD_INT 30
58717: PUSH
58718: LD_INT 32
58720: PUSH
58721: EMPTY
58722: LIST
58723: LIST
58724: PUSH
58725: LD_INT 30
58727: PUSH
58728: LD_INT 33
58730: PUSH
58731: EMPTY
58732: LIST
58733: LIST
58734: PUSH
58735: EMPTY
58736: LIST
58737: LIST
58738: LIST
58739: PPUSH
58740: CALL_OW 72
58744: IFFALSE 58832
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
58746: LD_ADDR_VAR 0 8
58750: PUSH
58751: LD_VAR 0 18
58755: PPUSH
58756: LD_INT 2
58758: PUSH
58759: LD_INT 30
58761: PUSH
58762: LD_INT 32
58764: PUSH
58765: EMPTY
58766: LIST
58767: LIST
58768: PUSH
58769: LD_INT 30
58771: PUSH
58772: LD_INT 33
58774: PUSH
58775: EMPTY
58776: LIST
58777: LIST
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: LIST
58783: PPUSH
58784: CALL_OW 72
58788: PUSH
58789: FOR_IN
58790: IFFALSE 58830
// begin if not GetBWeapon ( i ) then
58792: LD_VAR 0 8
58796: PPUSH
58797: CALL_OW 269
58801: NOT
58802: IFFALSE 58828
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
58804: LD_VAR 0 8
58808: PPUSH
58809: LD_VAR 0 8
58813: PPUSH
58814: LD_VAR 0 2
58818: PPUSH
58819: CALL 60078 0 2
58823: PPUSH
58824: CALL_OW 431
// end ;
58828: GO 58789
58830: POP
58831: POP
// end ; for i = 1 to personel do
58832: LD_ADDR_VAR 0 8
58836: PUSH
58837: DOUBLE
58838: LD_INT 1
58840: DEC
58841: ST_TO_ADDR
58842: LD_VAR 0 6
58846: PUSH
58847: FOR_TO
58848: IFFALSE 59912
// begin if i > 4 then
58850: LD_VAR 0 8
58854: PUSH
58855: LD_INT 4
58857: GREATER
58858: IFFALSE 58862
// break ;
58860: GO 59912
// case i of 1 :
58862: LD_VAR 0 8
58866: PUSH
58867: LD_INT 1
58869: DOUBLE
58870: EQUAL
58871: IFTRUE 58875
58873: GO 58955
58875: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
58876: LD_ADDR_VAR 0 12
58880: PUSH
58881: LD_VAR 0 18
58885: PPUSH
58886: LD_INT 22
58888: PUSH
58889: LD_VAR 0 16
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: PUSH
58898: LD_INT 58
58900: PUSH
58901: EMPTY
58902: LIST
58903: PUSH
58904: LD_INT 2
58906: PUSH
58907: LD_INT 30
58909: PUSH
58910: LD_INT 32
58912: PUSH
58913: EMPTY
58914: LIST
58915: LIST
58916: PUSH
58917: LD_INT 30
58919: PUSH
58920: LD_INT 4
58922: PUSH
58923: EMPTY
58924: LIST
58925: LIST
58926: PUSH
58927: LD_INT 30
58929: PUSH
58930: LD_INT 5
58932: PUSH
58933: EMPTY
58934: LIST
58935: LIST
58936: PUSH
58937: EMPTY
58938: LIST
58939: LIST
58940: LIST
58941: LIST
58942: PUSH
58943: EMPTY
58944: LIST
58945: LIST
58946: LIST
58947: PPUSH
58948: CALL_OW 72
58952: ST_TO_ADDR
58953: GO 59177
58955: LD_INT 2
58957: DOUBLE
58958: EQUAL
58959: IFTRUE 58963
58961: GO 59025
58963: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
58964: LD_ADDR_VAR 0 12
58968: PUSH
58969: LD_VAR 0 18
58973: PPUSH
58974: LD_INT 22
58976: PUSH
58977: LD_VAR 0 16
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: PUSH
58986: LD_INT 2
58988: PUSH
58989: LD_INT 30
58991: PUSH
58992: LD_INT 0
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: PUSH
58999: LD_INT 30
59001: PUSH
59002: LD_INT 1
59004: PUSH
59005: EMPTY
59006: LIST
59007: LIST
59008: PUSH
59009: EMPTY
59010: LIST
59011: LIST
59012: LIST
59013: PUSH
59014: EMPTY
59015: LIST
59016: LIST
59017: PPUSH
59018: CALL_OW 72
59022: ST_TO_ADDR
59023: GO 59177
59025: LD_INT 3
59027: DOUBLE
59028: EQUAL
59029: IFTRUE 59033
59031: GO 59095
59033: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
59034: LD_ADDR_VAR 0 12
59038: PUSH
59039: LD_VAR 0 18
59043: PPUSH
59044: LD_INT 22
59046: PUSH
59047: LD_VAR 0 16
59051: PUSH
59052: EMPTY
59053: LIST
59054: LIST
59055: PUSH
59056: LD_INT 2
59058: PUSH
59059: LD_INT 30
59061: PUSH
59062: LD_INT 2
59064: PUSH
59065: EMPTY
59066: LIST
59067: LIST
59068: PUSH
59069: LD_INT 30
59071: PUSH
59072: LD_INT 3
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: PUSH
59079: EMPTY
59080: LIST
59081: LIST
59082: LIST
59083: PUSH
59084: EMPTY
59085: LIST
59086: LIST
59087: PPUSH
59088: CALL_OW 72
59092: ST_TO_ADDR
59093: GO 59177
59095: LD_INT 4
59097: DOUBLE
59098: EQUAL
59099: IFTRUE 59103
59101: GO 59176
59103: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
59104: LD_ADDR_VAR 0 12
59108: PUSH
59109: LD_VAR 0 18
59113: PPUSH
59114: LD_INT 22
59116: PUSH
59117: LD_VAR 0 16
59121: PUSH
59122: EMPTY
59123: LIST
59124: LIST
59125: PUSH
59126: LD_INT 2
59128: PUSH
59129: LD_INT 30
59131: PUSH
59132: LD_INT 6
59134: PUSH
59135: EMPTY
59136: LIST
59137: LIST
59138: PUSH
59139: LD_INT 30
59141: PUSH
59142: LD_INT 7
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: PUSH
59149: LD_INT 30
59151: PUSH
59152: LD_INT 8
59154: PUSH
59155: EMPTY
59156: LIST
59157: LIST
59158: PUSH
59159: EMPTY
59160: LIST
59161: LIST
59162: LIST
59163: LIST
59164: PUSH
59165: EMPTY
59166: LIST
59167: LIST
59168: PPUSH
59169: CALL_OW 72
59173: ST_TO_ADDR
59174: GO 59177
59176: POP
// if i = 1 then
59177: LD_VAR 0 8
59181: PUSH
59182: LD_INT 1
59184: EQUAL
59185: IFFALSE 59296
// begin tmp := [ ] ;
59187: LD_ADDR_VAR 0 19
59191: PUSH
59192: EMPTY
59193: ST_TO_ADDR
// for j in f do
59194: LD_ADDR_VAR 0 9
59198: PUSH
59199: LD_VAR 0 12
59203: PUSH
59204: FOR_IN
59205: IFFALSE 59278
// if GetBType ( j ) = b_bunker then
59207: LD_VAR 0 9
59211: PPUSH
59212: CALL_OW 266
59216: PUSH
59217: LD_INT 32
59219: EQUAL
59220: IFFALSE 59247
// tmp := Insert ( tmp , 1 , j ) else
59222: LD_ADDR_VAR 0 19
59226: PUSH
59227: LD_VAR 0 19
59231: PPUSH
59232: LD_INT 1
59234: PPUSH
59235: LD_VAR 0 9
59239: PPUSH
59240: CALL_OW 2
59244: ST_TO_ADDR
59245: GO 59276
// tmp := Insert ( tmp , tmp + 1 , j ) ;
59247: LD_ADDR_VAR 0 19
59251: PUSH
59252: LD_VAR 0 19
59256: PPUSH
59257: LD_VAR 0 19
59261: PUSH
59262: LD_INT 1
59264: PLUS
59265: PPUSH
59266: LD_VAR 0 9
59270: PPUSH
59271: CALL_OW 2
59275: ST_TO_ADDR
59276: GO 59204
59278: POP
59279: POP
// if tmp then
59280: LD_VAR 0 19
59284: IFFALSE 59296
// f := tmp ;
59286: LD_ADDR_VAR 0 12
59290: PUSH
59291: LD_VAR 0 19
59295: ST_TO_ADDR
// end ; x := personel [ i ] ;
59296: LD_ADDR_VAR 0 13
59300: PUSH
59301: LD_VAR 0 6
59305: PUSH
59306: LD_VAR 0 8
59310: ARRAY
59311: ST_TO_ADDR
// if x = - 1 then
59312: LD_VAR 0 13
59316: PUSH
59317: LD_INT 1
59319: NEG
59320: EQUAL
59321: IFFALSE 59530
// begin for j in f do
59323: LD_ADDR_VAR 0 9
59327: PUSH
59328: LD_VAR 0 12
59332: PUSH
59333: FOR_IN
59334: IFFALSE 59526
// repeat InitHc ;
59336: CALL_OW 19
// if GetBType ( j ) = b_barracks then
59340: LD_VAR 0 9
59344: PPUSH
59345: CALL_OW 266
59349: PUSH
59350: LD_INT 5
59352: EQUAL
59353: IFFALSE 59423
// begin if UnitsInside ( j ) < 3 then
59355: LD_VAR 0 9
59359: PPUSH
59360: CALL_OW 313
59364: PUSH
59365: LD_INT 3
59367: LESS
59368: IFFALSE 59404
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
59370: LD_INT 0
59372: PPUSH
59373: LD_INT 5
59375: PUSH
59376: LD_INT 8
59378: PUSH
59379: LD_INT 9
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: LIST
59386: PUSH
59387: LD_VAR 0 17
59391: ARRAY
59392: PPUSH
59393: LD_VAR 0 4
59397: PPUSH
59398: CALL_OW 380
59402: GO 59421
// PrepareHuman ( false , i , skill ) ;
59404: LD_INT 0
59406: PPUSH
59407: LD_VAR 0 8
59411: PPUSH
59412: LD_VAR 0 4
59416: PPUSH
59417: CALL_OW 380
// end else
59421: GO 59440
// PrepareHuman ( false , i , skill ) ;
59423: LD_INT 0
59425: PPUSH
59426: LD_VAR 0 8
59430: PPUSH
59431: LD_VAR 0 4
59435: PPUSH
59436: CALL_OW 380
// un := CreateHuman ;
59440: LD_ADDR_VAR 0 14
59444: PUSH
59445: CALL_OW 44
59449: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59450: LD_ADDR_VAR 0 7
59454: PUSH
59455: LD_VAR 0 7
59459: PPUSH
59460: LD_INT 1
59462: PPUSH
59463: LD_VAR 0 14
59467: PPUSH
59468: CALL_OW 2
59472: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
59473: LD_VAR 0 14
59477: PPUSH
59478: LD_VAR 0 9
59482: PPUSH
59483: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
59487: LD_VAR 0 9
59491: PPUSH
59492: CALL_OW 313
59496: PUSH
59497: LD_INT 6
59499: EQUAL
59500: PUSH
59501: LD_VAR 0 9
59505: PPUSH
59506: CALL_OW 266
59510: PUSH
59511: LD_INT 32
59513: PUSH
59514: LD_INT 31
59516: PUSH
59517: EMPTY
59518: LIST
59519: LIST
59520: IN
59521: OR
59522: IFFALSE 59336
59524: GO 59333
59526: POP
59527: POP
// end else
59528: GO 59910
// for j = 1 to x do
59530: LD_ADDR_VAR 0 9
59534: PUSH
59535: DOUBLE
59536: LD_INT 1
59538: DEC
59539: ST_TO_ADDR
59540: LD_VAR 0 13
59544: PUSH
59545: FOR_TO
59546: IFFALSE 59908
// begin InitHc ;
59548: CALL_OW 19
// if not f then
59552: LD_VAR 0 12
59556: NOT
59557: IFFALSE 59646
// begin PrepareHuman ( false , i , skill ) ;
59559: LD_INT 0
59561: PPUSH
59562: LD_VAR 0 8
59566: PPUSH
59567: LD_VAR 0 4
59571: PPUSH
59572: CALL_OW 380
// un := CreateHuman ;
59576: LD_ADDR_VAR 0 14
59580: PUSH
59581: CALL_OW 44
59585: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59586: LD_ADDR_VAR 0 7
59590: PUSH
59591: LD_VAR 0 7
59595: PPUSH
59596: LD_INT 1
59598: PPUSH
59599: LD_VAR 0 14
59603: PPUSH
59604: CALL_OW 2
59608: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
59609: LD_VAR 0 14
59613: PPUSH
59614: LD_VAR 0 1
59618: PPUSH
59619: CALL_OW 250
59623: PPUSH
59624: LD_VAR 0 1
59628: PPUSH
59629: CALL_OW 251
59633: PPUSH
59634: LD_INT 10
59636: PPUSH
59637: LD_INT 0
59639: PPUSH
59640: CALL_OW 50
// continue ;
59644: GO 59545
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
59646: LD_VAR 0 12
59650: PUSH
59651: LD_INT 1
59653: ARRAY
59654: PPUSH
59655: CALL_OW 313
59659: PUSH
59660: LD_VAR 0 12
59664: PUSH
59665: LD_INT 1
59667: ARRAY
59668: PPUSH
59669: CALL_OW 266
59673: PUSH
59674: LD_INT 32
59676: PUSH
59677: LD_INT 31
59679: PUSH
59680: EMPTY
59681: LIST
59682: LIST
59683: IN
59684: AND
59685: PUSH
59686: LD_VAR 0 12
59690: PUSH
59691: LD_INT 1
59693: ARRAY
59694: PPUSH
59695: CALL_OW 313
59699: PUSH
59700: LD_INT 6
59702: EQUAL
59703: OR
59704: IFFALSE 59724
// f := Delete ( f , 1 ) ;
59706: LD_ADDR_VAR 0 12
59710: PUSH
59711: LD_VAR 0 12
59715: PPUSH
59716: LD_INT 1
59718: PPUSH
59719: CALL_OW 3
59723: ST_TO_ADDR
// if not f then
59724: LD_VAR 0 12
59728: NOT
59729: IFFALSE 59747
// begin x := x + 2 ;
59731: LD_ADDR_VAR 0 13
59735: PUSH
59736: LD_VAR 0 13
59740: PUSH
59741: LD_INT 2
59743: PLUS
59744: ST_TO_ADDR
// continue ;
59745: GO 59545
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
59747: LD_VAR 0 12
59751: PUSH
59752: LD_INT 1
59754: ARRAY
59755: PPUSH
59756: CALL_OW 266
59760: PUSH
59761: LD_INT 5
59763: EQUAL
59764: IFFALSE 59838
// begin if UnitsInside ( f [ 1 ] ) < 3 then
59766: LD_VAR 0 12
59770: PUSH
59771: LD_INT 1
59773: ARRAY
59774: PPUSH
59775: CALL_OW 313
59779: PUSH
59780: LD_INT 3
59782: LESS
59783: IFFALSE 59819
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
59785: LD_INT 0
59787: PPUSH
59788: LD_INT 5
59790: PUSH
59791: LD_INT 8
59793: PUSH
59794: LD_INT 9
59796: PUSH
59797: EMPTY
59798: LIST
59799: LIST
59800: LIST
59801: PUSH
59802: LD_VAR 0 17
59806: ARRAY
59807: PPUSH
59808: LD_VAR 0 4
59812: PPUSH
59813: CALL_OW 380
59817: GO 59836
// PrepareHuman ( false , i , skill ) ;
59819: LD_INT 0
59821: PPUSH
59822: LD_VAR 0 8
59826: PPUSH
59827: LD_VAR 0 4
59831: PPUSH
59832: CALL_OW 380
// end else
59836: GO 59855
// PrepareHuman ( false , i , skill ) ;
59838: LD_INT 0
59840: PPUSH
59841: LD_VAR 0 8
59845: PPUSH
59846: LD_VAR 0 4
59850: PPUSH
59851: CALL_OW 380
// un := CreateHuman ;
59855: LD_ADDR_VAR 0 14
59859: PUSH
59860: CALL_OW 44
59864: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59865: LD_ADDR_VAR 0 7
59869: PUSH
59870: LD_VAR 0 7
59874: PPUSH
59875: LD_INT 1
59877: PPUSH
59878: LD_VAR 0 14
59882: PPUSH
59883: CALL_OW 2
59887: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
59888: LD_VAR 0 14
59892: PPUSH
59893: LD_VAR 0 12
59897: PUSH
59898: LD_INT 1
59900: ARRAY
59901: PPUSH
59902: CALL_OW 52
// end ;
59906: GO 59545
59908: POP
59909: POP
// end ;
59910: GO 58847
59912: POP
59913: POP
// result := result ^ buildings ;
59914: LD_ADDR_VAR 0 7
59918: PUSH
59919: LD_VAR 0 7
59923: PUSH
59924: LD_VAR 0 18
59928: ADD
59929: ST_TO_ADDR
// end else
59930: GO 60073
// begin for i = 1 to personel do
59932: LD_ADDR_VAR 0 8
59936: PUSH
59937: DOUBLE
59938: LD_INT 1
59940: DEC
59941: ST_TO_ADDR
59942: LD_VAR 0 6
59946: PUSH
59947: FOR_TO
59948: IFFALSE 60071
// begin if i > 4 then
59950: LD_VAR 0 8
59954: PUSH
59955: LD_INT 4
59957: GREATER
59958: IFFALSE 59962
// break ;
59960: GO 60071
// x := personel [ i ] ;
59962: LD_ADDR_VAR 0 13
59966: PUSH
59967: LD_VAR 0 6
59971: PUSH
59972: LD_VAR 0 8
59976: ARRAY
59977: ST_TO_ADDR
// if x = - 1 then
59978: LD_VAR 0 13
59982: PUSH
59983: LD_INT 1
59985: NEG
59986: EQUAL
59987: IFFALSE 59991
// continue ;
59989: GO 59947
// PrepareHuman ( false , i , skill ) ;
59991: LD_INT 0
59993: PPUSH
59994: LD_VAR 0 8
59998: PPUSH
59999: LD_VAR 0 4
60003: PPUSH
60004: CALL_OW 380
// un := CreateHuman ;
60008: LD_ADDR_VAR 0 14
60012: PUSH
60013: CALL_OW 44
60017: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
60018: LD_VAR 0 14
60022: PPUSH
60023: LD_VAR 0 1
60027: PPUSH
60028: CALL_OW 250
60032: PPUSH
60033: LD_VAR 0 1
60037: PPUSH
60038: CALL_OW 251
60042: PPUSH
60043: LD_INT 10
60045: PPUSH
60046: LD_INT 0
60048: PPUSH
60049: CALL_OW 50
// result := result ^ un ;
60053: LD_ADDR_VAR 0 7
60057: PUSH
60058: LD_VAR 0 7
60062: PUSH
60063: LD_VAR 0 14
60067: ADD
60068: ST_TO_ADDR
// end ;
60069: GO 59947
60071: POP
60072: POP
// end ; end ;
60073: LD_VAR 0 7
60077: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
60078: LD_INT 0
60080: PPUSH
60081: PPUSH
60082: PPUSH
60083: PPUSH
60084: PPUSH
60085: PPUSH
60086: PPUSH
60087: PPUSH
60088: PPUSH
60089: PPUSH
60090: PPUSH
60091: PPUSH
60092: PPUSH
60093: PPUSH
60094: PPUSH
60095: PPUSH
// result := false ;
60096: LD_ADDR_VAR 0 3
60100: PUSH
60101: LD_INT 0
60103: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
60104: LD_VAR 0 1
60108: NOT
60109: PUSH
60110: LD_VAR 0 1
60114: PPUSH
60115: CALL_OW 266
60119: PUSH
60120: LD_INT 32
60122: PUSH
60123: LD_INT 33
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: IN
60130: NOT
60131: OR
60132: IFFALSE 60136
// exit ;
60134: GO 61245
// nat := GetNation ( tower ) ;
60136: LD_ADDR_VAR 0 12
60140: PUSH
60141: LD_VAR 0 1
60145: PPUSH
60146: CALL_OW 248
60150: ST_TO_ADDR
// side := GetSide ( tower ) ;
60151: LD_ADDR_VAR 0 16
60155: PUSH
60156: LD_VAR 0 1
60160: PPUSH
60161: CALL_OW 255
60165: ST_TO_ADDR
// x := GetX ( tower ) ;
60166: LD_ADDR_VAR 0 10
60170: PUSH
60171: LD_VAR 0 1
60175: PPUSH
60176: CALL_OW 250
60180: ST_TO_ADDR
// y := GetY ( tower ) ;
60181: LD_ADDR_VAR 0 11
60185: PUSH
60186: LD_VAR 0 1
60190: PPUSH
60191: CALL_OW 251
60195: ST_TO_ADDR
// if not x or not y then
60196: LD_VAR 0 10
60200: NOT
60201: PUSH
60202: LD_VAR 0 11
60206: NOT
60207: OR
60208: IFFALSE 60212
// exit ;
60210: GO 61245
// weapon := 0 ;
60212: LD_ADDR_VAR 0 18
60216: PUSH
60217: LD_INT 0
60219: ST_TO_ADDR
// fac_list := [ ] ;
60220: LD_ADDR_VAR 0 17
60224: PUSH
60225: EMPTY
60226: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
60227: LD_ADDR_VAR 0 6
60231: PUSH
60232: LD_VAR 0 1
60236: PPUSH
60237: CALL_OW 274
60241: PPUSH
60242: LD_VAR 0 2
60246: PPUSH
60247: LD_INT 0
60249: PPUSH
60250: CALL 57816 0 3
60254: PPUSH
60255: LD_INT 30
60257: PUSH
60258: LD_INT 3
60260: PUSH
60261: EMPTY
60262: LIST
60263: LIST
60264: PPUSH
60265: CALL_OW 72
60269: ST_TO_ADDR
// if not factories then
60270: LD_VAR 0 6
60274: NOT
60275: IFFALSE 60279
// exit ;
60277: GO 61245
// for i in factories do
60279: LD_ADDR_VAR 0 8
60283: PUSH
60284: LD_VAR 0 6
60288: PUSH
60289: FOR_IN
60290: IFFALSE 60315
// fac_list := fac_list union AvailableWeaponList ( i ) ;
60292: LD_ADDR_VAR 0 17
60296: PUSH
60297: LD_VAR 0 17
60301: PUSH
60302: LD_VAR 0 8
60306: PPUSH
60307: CALL_OW 478
60311: UNION
60312: ST_TO_ADDR
60313: GO 60289
60315: POP
60316: POP
// if not fac_list then
60317: LD_VAR 0 17
60321: NOT
60322: IFFALSE 60326
// exit ;
60324: GO 61245
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
60326: LD_ADDR_VAR 0 5
60330: PUSH
60331: LD_INT 4
60333: PUSH
60334: LD_INT 5
60336: PUSH
60337: LD_INT 9
60339: PUSH
60340: LD_INT 10
60342: PUSH
60343: LD_INT 6
60345: PUSH
60346: LD_INT 7
60348: PUSH
60349: LD_INT 11
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: LIST
60356: LIST
60357: LIST
60358: LIST
60359: LIST
60360: PUSH
60361: LD_INT 27
60363: PUSH
60364: LD_INT 28
60366: PUSH
60367: LD_INT 26
60369: PUSH
60370: LD_INT 30
60372: PUSH
60373: EMPTY
60374: LIST
60375: LIST
60376: LIST
60377: LIST
60378: PUSH
60379: LD_INT 43
60381: PUSH
60382: LD_INT 44
60384: PUSH
60385: LD_INT 46
60387: PUSH
60388: LD_INT 45
60390: PUSH
60391: LD_INT 47
60393: PUSH
60394: LD_INT 49
60396: PUSH
60397: EMPTY
60398: LIST
60399: LIST
60400: LIST
60401: LIST
60402: LIST
60403: LIST
60404: PUSH
60405: EMPTY
60406: LIST
60407: LIST
60408: LIST
60409: PUSH
60410: LD_VAR 0 12
60414: ARRAY
60415: ST_TO_ADDR
// list := list isect fac_list ;
60416: LD_ADDR_VAR 0 5
60420: PUSH
60421: LD_VAR 0 5
60425: PUSH
60426: LD_VAR 0 17
60430: ISECT
60431: ST_TO_ADDR
// if not list then
60432: LD_VAR 0 5
60436: NOT
60437: IFFALSE 60441
// exit ;
60439: GO 61245
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
60441: LD_VAR 0 12
60445: PUSH
60446: LD_INT 3
60448: EQUAL
60449: PUSH
60450: LD_INT 49
60452: PUSH
60453: LD_VAR 0 5
60457: IN
60458: AND
60459: PUSH
60460: LD_INT 31
60462: PPUSH
60463: LD_VAR 0 16
60467: PPUSH
60468: CALL_OW 321
60472: PUSH
60473: LD_INT 2
60475: EQUAL
60476: AND
60477: IFFALSE 60537
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
60479: LD_INT 22
60481: PUSH
60482: LD_VAR 0 16
60486: PUSH
60487: EMPTY
60488: LIST
60489: LIST
60490: PUSH
60491: LD_INT 35
60493: PUSH
60494: LD_INT 49
60496: PUSH
60497: EMPTY
60498: LIST
60499: LIST
60500: PUSH
60501: LD_INT 91
60503: PUSH
60504: LD_VAR 0 1
60508: PUSH
60509: LD_INT 10
60511: PUSH
60512: EMPTY
60513: LIST
60514: LIST
60515: LIST
60516: PUSH
60517: EMPTY
60518: LIST
60519: LIST
60520: LIST
60521: PPUSH
60522: CALL_OW 69
60526: NOT
60527: IFFALSE 60537
// weapon := ru_time_lapser ;
60529: LD_ADDR_VAR 0 18
60533: PUSH
60534: LD_INT 49
60536: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
60537: LD_VAR 0 12
60541: PUSH
60542: LD_INT 1
60544: PUSH
60545: LD_INT 2
60547: PUSH
60548: EMPTY
60549: LIST
60550: LIST
60551: IN
60552: PUSH
60553: LD_INT 11
60555: PUSH
60556: LD_VAR 0 5
60560: IN
60561: PUSH
60562: LD_INT 30
60564: PUSH
60565: LD_VAR 0 5
60569: IN
60570: OR
60571: AND
60572: PUSH
60573: LD_INT 6
60575: PPUSH
60576: LD_VAR 0 16
60580: PPUSH
60581: CALL_OW 321
60585: PUSH
60586: LD_INT 2
60588: EQUAL
60589: AND
60590: IFFALSE 60755
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
60592: LD_INT 22
60594: PUSH
60595: LD_VAR 0 16
60599: PUSH
60600: EMPTY
60601: LIST
60602: LIST
60603: PUSH
60604: LD_INT 2
60606: PUSH
60607: LD_INT 35
60609: PUSH
60610: LD_INT 11
60612: PUSH
60613: EMPTY
60614: LIST
60615: LIST
60616: PUSH
60617: LD_INT 35
60619: PUSH
60620: LD_INT 30
60622: PUSH
60623: EMPTY
60624: LIST
60625: LIST
60626: PUSH
60627: EMPTY
60628: LIST
60629: LIST
60630: LIST
60631: PUSH
60632: LD_INT 91
60634: PUSH
60635: LD_VAR 0 1
60639: PUSH
60640: LD_INT 18
60642: PUSH
60643: EMPTY
60644: LIST
60645: LIST
60646: LIST
60647: PUSH
60648: EMPTY
60649: LIST
60650: LIST
60651: LIST
60652: PPUSH
60653: CALL_OW 69
60657: NOT
60658: PUSH
60659: LD_INT 22
60661: PUSH
60662: LD_VAR 0 16
60666: PUSH
60667: EMPTY
60668: LIST
60669: LIST
60670: PUSH
60671: LD_INT 2
60673: PUSH
60674: LD_INT 30
60676: PUSH
60677: LD_INT 32
60679: PUSH
60680: EMPTY
60681: LIST
60682: LIST
60683: PUSH
60684: LD_INT 30
60686: PUSH
60687: LD_INT 33
60689: PUSH
60690: EMPTY
60691: LIST
60692: LIST
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: LIST
60698: PUSH
60699: LD_INT 91
60701: PUSH
60702: LD_VAR 0 1
60706: PUSH
60707: LD_INT 12
60709: PUSH
60710: EMPTY
60711: LIST
60712: LIST
60713: LIST
60714: PUSH
60715: EMPTY
60716: LIST
60717: LIST
60718: LIST
60719: PUSH
60720: EMPTY
60721: LIST
60722: PPUSH
60723: CALL_OW 69
60727: PUSH
60728: LD_INT 2
60730: GREATER
60731: AND
60732: IFFALSE 60755
// weapon := [ us_radar , ar_radar ] [ nat ] ;
60734: LD_ADDR_VAR 0 18
60738: PUSH
60739: LD_INT 11
60741: PUSH
60742: LD_INT 30
60744: PUSH
60745: EMPTY
60746: LIST
60747: LIST
60748: PUSH
60749: LD_VAR 0 12
60753: ARRAY
60754: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
60755: LD_VAR 0 18
60759: NOT
60760: PUSH
60761: LD_INT 40
60763: PPUSH
60764: LD_VAR 0 16
60768: PPUSH
60769: CALL_OW 321
60773: PUSH
60774: LD_INT 2
60776: EQUAL
60777: AND
60778: PUSH
60779: LD_INT 7
60781: PUSH
60782: LD_VAR 0 5
60786: IN
60787: PUSH
60788: LD_INT 28
60790: PUSH
60791: LD_VAR 0 5
60795: IN
60796: OR
60797: PUSH
60798: LD_INT 45
60800: PUSH
60801: LD_VAR 0 5
60805: IN
60806: OR
60807: AND
60808: IFFALSE 61062
// begin hex := GetHexInfo ( x , y ) ;
60810: LD_ADDR_VAR 0 4
60814: PUSH
60815: LD_VAR 0 10
60819: PPUSH
60820: LD_VAR 0 11
60824: PPUSH
60825: CALL_OW 546
60829: ST_TO_ADDR
// if hex [ 1 ] then
60830: LD_VAR 0 4
60834: PUSH
60835: LD_INT 1
60837: ARRAY
60838: IFFALSE 60842
// exit ;
60840: GO 61245
// height := hex [ 2 ] ;
60842: LD_ADDR_VAR 0 15
60846: PUSH
60847: LD_VAR 0 4
60851: PUSH
60852: LD_INT 2
60854: ARRAY
60855: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
60856: LD_ADDR_VAR 0 14
60860: PUSH
60861: LD_INT 0
60863: PUSH
60864: LD_INT 2
60866: PUSH
60867: LD_INT 3
60869: PUSH
60870: LD_INT 5
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: LIST
60877: LIST
60878: ST_TO_ADDR
// for i in tmp do
60879: LD_ADDR_VAR 0 8
60883: PUSH
60884: LD_VAR 0 14
60888: PUSH
60889: FOR_IN
60890: IFFALSE 61060
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
60892: LD_ADDR_VAR 0 9
60896: PUSH
60897: LD_VAR 0 10
60901: PPUSH
60902: LD_VAR 0 8
60906: PPUSH
60907: LD_INT 5
60909: PPUSH
60910: CALL_OW 272
60914: PUSH
60915: LD_VAR 0 11
60919: PPUSH
60920: LD_VAR 0 8
60924: PPUSH
60925: LD_INT 5
60927: PPUSH
60928: CALL_OW 273
60932: PUSH
60933: EMPTY
60934: LIST
60935: LIST
60936: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
60937: LD_VAR 0 9
60941: PUSH
60942: LD_INT 1
60944: ARRAY
60945: PPUSH
60946: LD_VAR 0 9
60950: PUSH
60951: LD_INT 2
60953: ARRAY
60954: PPUSH
60955: CALL_OW 488
60959: IFFALSE 61058
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
60961: LD_ADDR_VAR 0 4
60965: PUSH
60966: LD_VAR 0 9
60970: PUSH
60971: LD_INT 1
60973: ARRAY
60974: PPUSH
60975: LD_VAR 0 9
60979: PUSH
60980: LD_INT 2
60982: ARRAY
60983: PPUSH
60984: CALL_OW 546
60988: ST_TO_ADDR
// if hex [ 1 ] then
60989: LD_VAR 0 4
60993: PUSH
60994: LD_INT 1
60996: ARRAY
60997: IFFALSE 61001
// continue ;
60999: GO 60889
// h := hex [ 2 ] ;
61001: LD_ADDR_VAR 0 13
61005: PUSH
61006: LD_VAR 0 4
61010: PUSH
61011: LD_INT 2
61013: ARRAY
61014: ST_TO_ADDR
// if h + 7 < height then
61015: LD_VAR 0 13
61019: PUSH
61020: LD_INT 7
61022: PLUS
61023: PUSH
61024: LD_VAR 0 15
61028: LESS
61029: IFFALSE 61058
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
61031: LD_ADDR_VAR 0 18
61035: PUSH
61036: LD_INT 7
61038: PUSH
61039: LD_INT 28
61041: PUSH
61042: LD_INT 45
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: LIST
61049: PUSH
61050: LD_VAR 0 12
61054: ARRAY
61055: ST_TO_ADDR
// break ;
61056: GO 61060
// end ; end ; end ;
61058: GO 60889
61060: POP
61061: POP
// end ; if not weapon then
61062: LD_VAR 0 18
61066: NOT
61067: IFFALSE 61127
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
61069: LD_ADDR_VAR 0 5
61073: PUSH
61074: LD_VAR 0 5
61078: PUSH
61079: LD_INT 11
61081: PUSH
61082: LD_INT 30
61084: PUSH
61085: LD_INT 49
61087: PUSH
61088: EMPTY
61089: LIST
61090: LIST
61091: LIST
61092: DIFF
61093: ST_TO_ADDR
// if not list then
61094: LD_VAR 0 5
61098: NOT
61099: IFFALSE 61103
// exit ;
61101: GO 61245
// weapon := list [ rand ( 1 , list ) ] ;
61103: LD_ADDR_VAR 0 18
61107: PUSH
61108: LD_VAR 0 5
61112: PUSH
61113: LD_INT 1
61115: PPUSH
61116: LD_VAR 0 5
61120: PPUSH
61121: CALL_OW 12
61125: ARRAY
61126: ST_TO_ADDR
// end ; if weapon then
61127: LD_VAR 0 18
61131: IFFALSE 61245
// begin tmp := CostOfWeapon ( weapon ) ;
61133: LD_ADDR_VAR 0 14
61137: PUSH
61138: LD_VAR 0 18
61142: PPUSH
61143: CALL_OW 451
61147: ST_TO_ADDR
// j := GetBase ( tower ) ;
61148: LD_ADDR_VAR 0 9
61152: PUSH
61153: LD_VAR 0 1
61157: PPUSH
61158: CALL_OW 274
61162: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
61163: LD_VAR 0 9
61167: PPUSH
61168: LD_INT 1
61170: PPUSH
61171: CALL_OW 275
61175: PUSH
61176: LD_VAR 0 14
61180: PUSH
61181: LD_INT 1
61183: ARRAY
61184: GREATEREQUAL
61185: PUSH
61186: LD_VAR 0 9
61190: PPUSH
61191: LD_INT 2
61193: PPUSH
61194: CALL_OW 275
61198: PUSH
61199: LD_VAR 0 14
61203: PUSH
61204: LD_INT 2
61206: ARRAY
61207: GREATEREQUAL
61208: AND
61209: PUSH
61210: LD_VAR 0 9
61214: PPUSH
61215: LD_INT 3
61217: PPUSH
61218: CALL_OW 275
61222: PUSH
61223: LD_VAR 0 14
61227: PUSH
61228: LD_INT 3
61230: ARRAY
61231: GREATEREQUAL
61232: AND
61233: IFFALSE 61245
// result := weapon ;
61235: LD_ADDR_VAR 0 3
61239: PUSH
61240: LD_VAR 0 18
61244: ST_TO_ADDR
// end ; end ;
61245: LD_VAR 0 3
61249: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
61250: LD_INT 0
61252: PPUSH
61253: PPUSH
// result := true ;
61254: LD_ADDR_VAR 0 3
61258: PUSH
61259: LD_INT 1
61261: ST_TO_ADDR
// if array1 = array2 then
61262: LD_VAR 0 1
61266: PUSH
61267: LD_VAR 0 2
61271: EQUAL
61272: IFFALSE 61332
// begin for i = 1 to array1 do
61274: LD_ADDR_VAR 0 4
61278: PUSH
61279: DOUBLE
61280: LD_INT 1
61282: DEC
61283: ST_TO_ADDR
61284: LD_VAR 0 1
61288: PUSH
61289: FOR_TO
61290: IFFALSE 61328
// if array1 [ i ] <> array2 [ i ] then
61292: LD_VAR 0 1
61296: PUSH
61297: LD_VAR 0 4
61301: ARRAY
61302: PUSH
61303: LD_VAR 0 2
61307: PUSH
61308: LD_VAR 0 4
61312: ARRAY
61313: NONEQUAL
61314: IFFALSE 61326
// begin result := false ;
61316: LD_ADDR_VAR 0 3
61320: PUSH
61321: LD_INT 0
61323: ST_TO_ADDR
// break ;
61324: GO 61328
// end ;
61326: GO 61289
61328: POP
61329: POP
// end else
61330: GO 61340
// result := false ;
61332: LD_ADDR_VAR 0 3
61336: PUSH
61337: LD_INT 0
61339: ST_TO_ADDR
// end ;
61340: LD_VAR 0 3
61344: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
61345: LD_INT 0
61347: PPUSH
61348: PPUSH
// if not array1 or not array2 then
61349: LD_VAR 0 1
61353: NOT
61354: PUSH
61355: LD_VAR 0 2
61359: NOT
61360: OR
61361: IFFALSE 61365
// exit ;
61363: GO 61429
// result := true ;
61365: LD_ADDR_VAR 0 3
61369: PUSH
61370: LD_INT 1
61372: ST_TO_ADDR
// for i = 1 to array1 do
61373: LD_ADDR_VAR 0 4
61377: PUSH
61378: DOUBLE
61379: LD_INT 1
61381: DEC
61382: ST_TO_ADDR
61383: LD_VAR 0 1
61387: PUSH
61388: FOR_TO
61389: IFFALSE 61427
// if array1 [ i ] <> array2 [ i ] then
61391: LD_VAR 0 1
61395: PUSH
61396: LD_VAR 0 4
61400: ARRAY
61401: PUSH
61402: LD_VAR 0 2
61406: PUSH
61407: LD_VAR 0 4
61411: ARRAY
61412: NONEQUAL
61413: IFFALSE 61425
// begin result := false ;
61415: LD_ADDR_VAR 0 3
61419: PUSH
61420: LD_INT 0
61422: ST_TO_ADDR
// break ;
61423: GO 61427
// end ;
61425: GO 61388
61427: POP
61428: POP
// end ;
61429: LD_VAR 0 3
61433: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
61434: LD_INT 0
61436: PPUSH
61437: PPUSH
61438: PPUSH
// pom := GetBase ( fac ) ;
61439: LD_ADDR_VAR 0 5
61443: PUSH
61444: LD_VAR 0 1
61448: PPUSH
61449: CALL_OW 274
61453: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
61454: LD_ADDR_VAR 0 4
61458: PUSH
61459: LD_VAR 0 2
61463: PUSH
61464: LD_INT 1
61466: ARRAY
61467: PPUSH
61468: LD_VAR 0 2
61472: PUSH
61473: LD_INT 2
61475: ARRAY
61476: PPUSH
61477: LD_VAR 0 2
61481: PUSH
61482: LD_INT 3
61484: ARRAY
61485: PPUSH
61486: LD_VAR 0 2
61490: PUSH
61491: LD_INT 4
61493: ARRAY
61494: PPUSH
61495: CALL_OW 449
61499: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61500: LD_ADDR_VAR 0 3
61504: PUSH
61505: LD_VAR 0 5
61509: PPUSH
61510: LD_INT 1
61512: PPUSH
61513: CALL_OW 275
61517: PUSH
61518: LD_VAR 0 4
61522: PUSH
61523: LD_INT 1
61525: ARRAY
61526: GREATEREQUAL
61527: PUSH
61528: LD_VAR 0 5
61532: PPUSH
61533: LD_INT 2
61535: PPUSH
61536: CALL_OW 275
61540: PUSH
61541: LD_VAR 0 4
61545: PUSH
61546: LD_INT 2
61548: ARRAY
61549: GREATEREQUAL
61550: AND
61551: PUSH
61552: LD_VAR 0 5
61556: PPUSH
61557: LD_INT 3
61559: PPUSH
61560: CALL_OW 275
61564: PUSH
61565: LD_VAR 0 4
61569: PUSH
61570: LD_INT 3
61572: ARRAY
61573: GREATEREQUAL
61574: AND
61575: ST_TO_ADDR
// end ;
61576: LD_VAR 0 3
61580: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
61581: LD_INT 0
61583: PPUSH
61584: PPUSH
61585: PPUSH
61586: PPUSH
// pom := GetBase ( building ) ;
61587: LD_ADDR_VAR 0 3
61591: PUSH
61592: LD_VAR 0 1
61596: PPUSH
61597: CALL_OW 274
61601: ST_TO_ADDR
// if not pom then
61602: LD_VAR 0 3
61606: NOT
61607: IFFALSE 61611
// exit ;
61609: GO 61781
// btype := GetBType ( building ) ;
61611: LD_ADDR_VAR 0 5
61615: PUSH
61616: LD_VAR 0 1
61620: PPUSH
61621: CALL_OW 266
61625: ST_TO_ADDR
// if btype = b_armoury then
61626: LD_VAR 0 5
61630: PUSH
61631: LD_INT 4
61633: EQUAL
61634: IFFALSE 61644
// btype := b_barracks ;
61636: LD_ADDR_VAR 0 5
61640: PUSH
61641: LD_INT 5
61643: ST_TO_ADDR
// if btype = b_depot then
61644: LD_VAR 0 5
61648: PUSH
61649: LD_INT 0
61651: EQUAL
61652: IFFALSE 61662
// btype := b_warehouse ;
61654: LD_ADDR_VAR 0 5
61658: PUSH
61659: LD_INT 1
61661: ST_TO_ADDR
// if btype = b_workshop then
61662: LD_VAR 0 5
61666: PUSH
61667: LD_INT 2
61669: EQUAL
61670: IFFALSE 61680
// btype := b_factory ;
61672: LD_ADDR_VAR 0 5
61676: PUSH
61677: LD_INT 3
61679: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
61680: LD_ADDR_VAR 0 4
61684: PUSH
61685: LD_VAR 0 5
61689: PPUSH
61690: LD_VAR 0 1
61694: PPUSH
61695: CALL_OW 248
61699: PPUSH
61700: CALL_OW 450
61704: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61705: LD_ADDR_VAR 0 2
61709: PUSH
61710: LD_VAR 0 3
61714: PPUSH
61715: LD_INT 1
61717: PPUSH
61718: CALL_OW 275
61722: PUSH
61723: LD_VAR 0 4
61727: PUSH
61728: LD_INT 1
61730: ARRAY
61731: GREATEREQUAL
61732: PUSH
61733: LD_VAR 0 3
61737: PPUSH
61738: LD_INT 2
61740: PPUSH
61741: CALL_OW 275
61745: PUSH
61746: LD_VAR 0 4
61750: PUSH
61751: LD_INT 2
61753: ARRAY
61754: GREATEREQUAL
61755: AND
61756: PUSH
61757: LD_VAR 0 3
61761: PPUSH
61762: LD_INT 3
61764: PPUSH
61765: CALL_OW 275
61769: PUSH
61770: LD_VAR 0 4
61774: PUSH
61775: LD_INT 3
61777: ARRAY
61778: GREATEREQUAL
61779: AND
61780: ST_TO_ADDR
// end ;
61781: LD_VAR 0 2
61785: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
61786: LD_INT 0
61788: PPUSH
61789: PPUSH
61790: PPUSH
// pom := GetBase ( building ) ;
61791: LD_ADDR_VAR 0 4
61795: PUSH
61796: LD_VAR 0 1
61800: PPUSH
61801: CALL_OW 274
61805: ST_TO_ADDR
// if not pom then
61806: LD_VAR 0 4
61810: NOT
61811: IFFALSE 61815
// exit ;
61813: GO 61916
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
61815: LD_ADDR_VAR 0 5
61819: PUSH
61820: LD_VAR 0 2
61824: PPUSH
61825: LD_VAR 0 1
61829: PPUSH
61830: CALL_OW 248
61834: PPUSH
61835: CALL_OW 450
61839: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61840: LD_ADDR_VAR 0 3
61844: PUSH
61845: LD_VAR 0 4
61849: PPUSH
61850: LD_INT 1
61852: PPUSH
61853: CALL_OW 275
61857: PUSH
61858: LD_VAR 0 5
61862: PUSH
61863: LD_INT 1
61865: ARRAY
61866: GREATEREQUAL
61867: PUSH
61868: LD_VAR 0 4
61872: PPUSH
61873: LD_INT 2
61875: PPUSH
61876: CALL_OW 275
61880: PUSH
61881: LD_VAR 0 5
61885: PUSH
61886: LD_INT 2
61888: ARRAY
61889: GREATEREQUAL
61890: AND
61891: PUSH
61892: LD_VAR 0 4
61896: PPUSH
61897: LD_INT 3
61899: PPUSH
61900: CALL_OW 275
61904: PUSH
61905: LD_VAR 0 5
61909: PUSH
61910: LD_INT 3
61912: ARRAY
61913: GREATEREQUAL
61914: AND
61915: ST_TO_ADDR
// end ;
61916: LD_VAR 0 3
61920: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
61921: LD_INT 0
61923: PPUSH
61924: PPUSH
61925: PPUSH
61926: PPUSH
61927: PPUSH
61928: PPUSH
61929: PPUSH
61930: PPUSH
61931: PPUSH
61932: PPUSH
61933: PPUSH
// result := false ;
61934: LD_ADDR_VAR 0 8
61938: PUSH
61939: LD_INT 0
61941: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
61942: LD_VAR 0 5
61946: NOT
61947: PUSH
61948: LD_VAR 0 1
61952: NOT
61953: OR
61954: PUSH
61955: LD_VAR 0 2
61959: NOT
61960: OR
61961: PUSH
61962: LD_VAR 0 3
61966: NOT
61967: OR
61968: IFFALSE 61972
// exit ;
61970: GO 62786
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
61972: LD_ADDR_VAR 0 14
61976: PUSH
61977: LD_VAR 0 1
61981: PPUSH
61982: LD_VAR 0 2
61986: PPUSH
61987: LD_VAR 0 3
61991: PPUSH
61992: LD_VAR 0 4
61996: PPUSH
61997: LD_VAR 0 5
62001: PUSH
62002: LD_INT 1
62004: ARRAY
62005: PPUSH
62006: CALL_OW 248
62010: PPUSH
62011: LD_INT 0
62013: PPUSH
62014: CALL 64019 0 6
62018: ST_TO_ADDR
// if not hexes then
62019: LD_VAR 0 14
62023: NOT
62024: IFFALSE 62028
// exit ;
62026: GO 62786
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62028: LD_ADDR_VAR 0 17
62032: PUSH
62033: LD_VAR 0 5
62037: PPUSH
62038: LD_INT 22
62040: PUSH
62041: LD_VAR 0 13
62045: PPUSH
62046: CALL_OW 255
62050: PUSH
62051: EMPTY
62052: LIST
62053: LIST
62054: PUSH
62055: LD_INT 2
62057: PUSH
62058: LD_INT 30
62060: PUSH
62061: LD_INT 0
62063: PUSH
62064: EMPTY
62065: LIST
62066: LIST
62067: PUSH
62068: LD_INT 30
62070: PUSH
62071: LD_INT 1
62073: PUSH
62074: EMPTY
62075: LIST
62076: LIST
62077: PUSH
62078: EMPTY
62079: LIST
62080: LIST
62081: LIST
62082: PUSH
62083: EMPTY
62084: LIST
62085: LIST
62086: PPUSH
62087: CALL_OW 72
62091: ST_TO_ADDR
// for i = 1 to hexes do
62092: LD_ADDR_VAR 0 9
62096: PUSH
62097: DOUBLE
62098: LD_INT 1
62100: DEC
62101: ST_TO_ADDR
62102: LD_VAR 0 14
62106: PUSH
62107: FOR_TO
62108: IFFALSE 62784
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62110: LD_ADDR_VAR 0 13
62114: PUSH
62115: LD_VAR 0 14
62119: PUSH
62120: LD_VAR 0 9
62124: ARRAY
62125: PUSH
62126: LD_INT 1
62128: ARRAY
62129: PPUSH
62130: LD_VAR 0 14
62134: PUSH
62135: LD_VAR 0 9
62139: ARRAY
62140: PUSH
62141: LD_INT 2
62143: ARRAY
62144: PPUSH
62145: CALL_OW 428
62149: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
62150: LD_VAR 0 14
62154: PUSH
62155: LD_VAR 0 9
62159: ARRAY
62160: PUSH
62161: LD_INT 1
62163: ARRAY
62164: PPUSH
62165: LD_VAR 0 14
62169: PUSH
62170: LD_VAR 0 9
62174: ARRAY
62175: PUSH
62176: LD_INT 2
62178: ARRAY
62179: PPUSH
62180: CALL_OW 351
62184: PUSH
62185: LD_VAR 0 14
62189: PUSH
62190: LD_VAR 0 9
62194: ARRAY
62195: PUSH
62196: LD_INT 1
62198: ARRAY
62199: PPUSH
62200: LD_VAR 0 14
62204: PUSH
62205: LD_VAR 0 9
62209: ARRAY
62210: PUSH
62211: LD_INT 2
62213: ARRAY
62214: PPUSH
62215: CALL_OW 488
62219: NOT
62220: OR
62221: PUSH
62222: LD_VAR 0 13
62226: PPUSH
62227: CALL_OW 247
62231: PUSH
62232: LD_INT 3
62234: EQUAL
62235: OR
62236: IFFALSE 62242
// exit ;
62238: POP
62239: POP
62240: GO 62786
// if not tmp then
62242: LD_VAR 0 13
62246: NOT
62247: IFFALSE 62251
// continue ;
62249: GO 62107
// result := true ;
62251: LD_ADDR_VAR 0 8
62255: PUSH
62256: LD_INT 1
62258: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
62259: LD_VAR 0 6
62263: PUSH
62264: LD_VAR 0 13
62268: PPUSH
62269: CALL_OW 247
62273: PUSH
62274: LD_INT 2
62276: EQUAL
62277: AND
62278: PUSH
62279: LD_VAR 0 13
62283: PPUSH
62284: CALL_OW 263
62288: PUSH
62289: LD_INT 1
62291: EQUAL
62292: AND
62293: IFFALSE 62457
// begin if IsDrivenBy ( tmp ) then
62295: LD_VAR 0 13
62299: PPUSH
62300: CALL_OW 311
62304: IFFALSE 62308
// continue ;
62306: GO 62107
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
62308: LD_VAR 0 6
62312: PPUSH
62313: LD_INT 3
62315: PUSH
62316: LD_INT 60
62318: PUSH
62319: EMPTY
62320: LIST
62321: PUSH
62322: EMPTY
62323: LIST
62324: LIST
62325: PUSH
62326: LD_INT 3
62328: PUSH
62329: LD_INT 55
62331: PUSH
62332: EMPTY
62333: LIST
62334: PUSH
62335: EMPTY
62336: LIST
62337: LIST
62338: PUSH
62339: EMPTY
62340: LIST
62341: LIST
62342: PPUSH
62343: CALL_OW 72
62347: IFFALSE 62455
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
62349: LD_ADDR_VAR 0 18
62353: PUSH
62354: LD_VAR 0 6
62358: PPUSH
62359: LD_INT 3
62361: PUSH
62362: LD_INT 60
62364: PUSH
62365: EMPTY
62366: LIST
62367: PUSH
62368: EMPTY
62369: LIST
62370: LIST
62371: PUSH
62372: LD_INT 3
62374: PUSH
62375: LD_INT 55
62377: PUSH
62378: EMPTY
62379: LIST
62380: PUSH
62381: EMPTY
62382: LIST
62383: LIST
62384: PUSH
62385: EMPTY
62386: LIST
62387: LIST
62388: PPUSH
62389: CALL_OW 72
62393: PUSH
62394: LD_INT 1
62396: ARRAY
62397: ST_TO_ADDR
// if IsInUnit ( driver ) then
62398: LD_VAR 0 18
62402: PPUSH
62403: CALL_OW 310
62407: IFFALSE 62418
// ComExit ( driver ) ;
62409: LD_VAR 0 18
62413: PPUSH
62414: CALL 87707 0 1
// AddComEnterUnit ( driver , tmp ) ;
62418: LD_VAR 0 18
62422: PPUSH
62423: LD_VAR 0 13
62427: PPUSH
62428: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
62432: LD_VAR 0 18
62436: PPUSH
62437: LD_VAR 0 7
62441: PPUSH
62442: CALL_OW 173
// AddComExitVehicle ( driver ) ;
62446: LD_VAR 0 18
62450: PPUSH
62451: CALL_OW 181
// end ; continue ;
62455: GO 62107
// end ; if not cleaners or not tmp in cleaners then
62457: LD_VAR 0 6
62461: NOT
62462: PUSH
62463: LD_VAR 0 13
62467: PUSH
62468: LD_VAR 0 6
62472: IN
62473: NOT
62474: OR
62475: IFFALSE 62782
// begin if dep then
62477: LD_VAR 0 17
62481: IFFALSE 62617
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
62483: LD_ADDR_VAR 0 16
62487: PUSH
62488: LD_VAR 0 17
62492: PUSH
62493: LD_INT 1
62495: ARRAY
62496: PPUSH
62497: CALL_OW 250
62501: PPUSH
62502: LD_VAR 0 17
62506: PUSH
62507: LD_INT 1
62509: ARRAY
62510: PPUSH
62511: CALL_OW 254
62515: PPUSH
62516: LD_INT 5
62518: PPUSH
62519: CALL_OW 272
62523: PUSH
62524: LD_VAR 0 17
62528: PUSH
62529: LD_INT 1
62531: ARRAY
62532: PPUSH
62533: CALL_OW 251
62537: PPUSH
62538: LD_VAR 0 17
62542: PUSH
62543: LD_INT 1
62545: ARRAY
62546: PPUSH
62547: CALL_OW 254
62551: PPUSH
62552: LD_INT 5
62554: PPUSH
62555: CALL_OW 273
62559: PUSH
62560: EMPTY
62561: LIST
62562: LIST
62563: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
62564: LD_VAR 0 16
62568: PUSH
62569: LD_INT 1
62571: ARRAY
62572: PPUSH
62573: LD_VAR 0 16
62577: PUSH
62578: LD_INT 2
62580: ARRAY
62581: PPUSH
62582: CALL_OW 488
62586: IFFALSE 62617
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
62588: LD_VAR 0 13
62592: PPUSH
62593: LD_VAR 0 16
62597: PUSH
62598: LD_INT 1
62600: ARRAY
62601: PPUSH
62602: LD_VAR 0 16
62606: PUSH
62607: LD_INT 2
62609: ARRAY
62610: PPUSH
62611: CALL_OW 111
// continue ;
62615: GO 62107
// end ; end ; r := GetDir ( tmp ) ;
62617: LD_ADDR_VAR 0 15
62621: PUSH
62622: LD_VAR 0 13
62626: PPUSH
62627: CALL_OW 254
62631: ST_TO_ADDR
// if r = 5 then
62632: LD_VAR 0 15
62636: PUSH
62637: LD_INT 5
62639: EQUAL
62640: IFFALSE 62650
// r := 0 ;
62642: LD_ADDR_VAR 0 15
62646: PUSH
62647: LD_INT 0
62649: ST_TO_ADDR
// for j = r to 5 do
62650: LD_ADDR_VAR 0 10
62654: PUSH
62655: DOUBLE
62656: LD_VAR 0 15
62660: DEC
62661: ST_TO_ADDR
62662: LD_INT 5
62664: PUSH
62665: FOR_TO
62666: IFFALSE 62780
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
62668: LD_ADDR_VAR 0 11
62672: PUSH
62673: LD_VAR 0 13
62677: PPUSH
62678: CALL_OW 250
62682: PPUSH
62683: LD_VAR 0 10
62687: PPUSH
62688: LD_INT 2
62690: PPUSH
62691: CALL_OW 272
62695: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
62696: LD_ADDR_VAR 0 12
62700: PUSH
62701: LD_VAR 0 13
62705: PPUSH
62706: CALL_OW 251
62710: PPUSH
62711: LD_VAR 0 10
62715: PPUSH
62716: LD_INT 2
62718: PPUSH
62719: CALL_OW 273
62723: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
62724: LD_VAR 0 11
62728: PPUSH
62729: LD_VAR 0 12
62733: PPUSH
62734: CALL_OW 488
62738: PUSH
62739: LD_VAR 0 11
62743: PPUSH
62744: LD_VAR 0 12
62748: PPUSH
62749: CALL_OW 428
62753: NOT
62754: AND
62755: IFFALSE 62778
// begin ComMoveXY ( tmp , _x , _y ) ;
62757: LD_VAR 0 13
62761: PPUSH
62762: LD_VAR 0 11
62766: PPUSH
62767: LD_VAR 0 12
62771: PPUSH
62772: CALL_OW 111
// break ;
62776: GO 62780
// end ; end ;
62778: GO 62665
62780: POP
62781: POP
// end ; end ;
62782: GO 62107
62784: POP
62785: POP
// end ;
62786: LD_VAR 0 8
62790: RET
// export function BuildingTechInvented ( side , btype ) ; begin
62791: LD_INT 0
62793: PPUSH
// result := true ;
62794: LD_ADDR_VAR 0 3
62798: PUSH
62799: LD_INT 1
62801: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
62802: LD_VAR 0 2
62806: PUSH
62807: LD_INT 24
62809: DOUBLE
62810: EQUAL
62811: IFTRUE 62821
62813: LD_INT 33
62815: DOUBLE
62816: EQUAL
62817: IFTRUE 62821
62819: GO 62846
62821: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
62822: LD_ADDR_VAR 0 3
62826: PUSH
62827: LD_INT 32
62829: PPUSH
62830: LD_VAR 0 1
62834: PPUSH
62835: CALL_OW 321
62839: PUSH
62840: LD_INT 2
62842: EQUAL
62843: ST_TO_ADDR
62844: GO 63162
62846: LD_INT 20
62848: DOUBLE
62849: EQUAL
62850: IFTRUE 62854
62852: GO 62879
62854: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
62855: LD_ADDR_VAR 0 3
62859: PUSH
62860: LD_INT 6
62862: PPUSH
62863: LD_VAR 0 1
62867: PPUSH
62868: CALL_OW 321
62872: PUSH
62873: LD_INT 2
62875: EQUAL
62876: ST_TO_ADDR
62877: GO 63162
62879: LD_INT 22
62881: DOUBLE
62882: EQUAL
62883: IFTRUE 62893
62885: LD_INT 36
62887: DOUBLE
62888: EQUAL
62889: IFTRUE 62893
62891: GO 62918
62893: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
62894: LD_ADDR_VAR 0 3
62898: PUSH
62899: LD_INT 15
62901: PPUSH
62902: LD_VAR 0 1
62906: PPUSH
62907: CALL_OW 321
62911: PUSH
62912: LD_INT 2
62914: EQUAL
62915: ST_TO_ADDR
62916: GO 63162
62918: LD_INT 30
62920: DOUBLE
62921: EQUAL
62922: IFTRUE 62926
62924: GO 62951
62926: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
62927: LD_ADDR_VAR 0 3
62931: PUSH
62932: LD_INT 20
62934: PPUSH
62935: LD_VAR 0 1
62939: PPUSH
62940: CALL_OW 321
62944: PUSH
62945: LD_INT 2
62947: EQUAL
62948: ST_TO_ADDR
62949: GO 63162
62951: LD_INT 28
62953: DOUBLE
62954: EQUAL
62955: IFTRUE 62965
62957: LD_INT 21
62959: DOUBLE
62960: EQUAL
62961: IFTRUE 62965
62963: GO 62990
62965: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
62966: LD_ADDR_VAR 0 3
62970: PUSH
62971: LD_INT 21
62973: PPUSH
62974: LD_VAR 0 1
62978: PPUSH
62979: CALL_OW 321
62983: PUSH
62984: LD_INT 2
62986: EQUAL
62987: ST_TO_ADDR
62988: GO 63162
62990: LD_INT 16
62992: DOUBLE
62993: EQUAL
62994: IFTRUE 62998
62996: GO 63023
62998: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
62999: LD_ADDR_VAR 0 3
63003: PUSH
63004: LD_INT 84
63006: PPUSH
63007: LD_VAR 0 1
63011: PPUSH
63012: CALL_OW 321
63016: PUSH
63017: LD_INT 2
63019: EQUAL
63020: ST_TO_ADDR
63021: GO 63162
63023: LD_INT 19
63025: DOUBLE
63026: EQUAL
63027: IFTRUE 63037
63029: LD_INT 23
63031: DOUBLE
63032: EQUAL
63033: IFTRUE 63037
63035: GO 63062
63037: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
63038: LD_ADDR_VAR 0 3
63042: PUSH
63043: LD_INT 83
63045: PPUSH
63046: LD_VAR 0 1
63050: PPUSH
63051: CALL_OW 321
63055: PUSH
63056: LD_INT 2
63058: EQUAL
63059: ST_TO_ADDR
63060: GO 63162
63062: LD_INT 17
63064: DOUBLE
63065: EQUAL
63066: IFTRUE 63070
63068: GO 63095
63070: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
63071: LD_ADDR_VAR 0 3
63075: PUSH
63076: LD_INT 39
63078: PPUSH
63079: LD_VAR 0 1
63083: PPUSH
63084: CALL_OW 321
63088: PUSH
63089: LD_INT 2
63091: EQUAL
63092: ST_TO_ADDR
63093: GO 63162
63095: LD_INT 18
63097: DOUBLE
63098: EQUAL
63099: IFTRUE 63103
63101: GO 63128
63103: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
63104: LD_ADDR_VAR 0 3
63108: PUSH
63109: LD_INT 40
63111: PPUSH
63112: LD_VAR 0 1
63116: PPUSH
63117: CALL_OW 321
63121: PUSH
63122: LD_INT 2
63124: EQUAL
63125: ST_TO_ADDR
63126: GO 63162
63128: LD_INT 27
63130: DOUBLE
63131: EQUAL
63132: IFTRUE 63136
63134: GO 63161
63136: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
63137: LD_ADDR_VAR 0 3
63141: PUSH
63142: LD_INT 35
63144: PPUSH
63145: LD_VAR 0 1
63149: PPUSH
63150: CALL_OW 321
63154: PUSH
63155: LD_INT 2
63157: EQUAL
63158: ST_TO_ADDR
63159: GO 63162
63161: POP
// end ;
63162: LD_VAR 0 3
63166: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
63167: LD_INT 0
63169: PPUSH
63170: PPUSH
63171: PPUSH
63172: PPUSH
63173: PPUSH
63174: PPUSH
63175: PPUSH
63176: PPUSH
63177: PPUSH
63178: PPUSH
63179: PPUSH
// result := false ;
63180: LD_ADDR_VAR 0 6
63184: PUSH
63185: LD_INT 0
63187: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
63188: LD_VAR 0 1
63192: NOT
63193: PUSH
63194: LD_VAR 0 1
63198: PPUSH
63199: CALL_OW 266
63203: PUSH
63204: LD_INT 0
63206: PUSH
63207: LD_INT 1
63209: PUSH
63210: EMPTY
63211: LIST
63212: LIST
63213: IN
63214: NOT
63215: OR
63216: PUSH
63217: LD_VAR 0 2
63221: NOT
63222: OR
63223: PUSH
63224: LD_VAR 0 5
63228: PUSH
63229: LD_INT 0
63231: PUSH
63232: LD_INT 1
63234: PUSH
63235: LD_INT 2
63237: PUSH
63238: LD_INT 3
63240: PUSH
63241: LD_INT 4
63243: PUSH
63244: LD_INT 5
63246: PUSH
63247: EMPTY
63248: LIST
63249: LIST
63250: LIST
63251: LIST
63252: LIST
63253: LIST
63254: IN
63255: NOT
63256: OR
63257: PUSH
63258: LD_VAR 0 3
63262: PPUSH
63263: LD_VAR 0 4
63267: PPUSH
63268: CALL_OW 488
63272: NOT
63273: OR
63274: IFFALSE 63278
// exit ;
63276: GO 64014
// side := GetSide ( depot ) ;
63278: LD_ADDR_VAR 0 9
63282: PUSH
63283: LD_VAR 0 1
63287: PPUSH
63288: CALL_OW 255
63292: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
63293: LD_VAR 0 9
63297: PPUSH
63298: LD_VAR 0 2
63302: PPUSH
63303: CALL 62791 0 2
63307: NOT
63308: IFFALSE 63312
// exit ;
63310: GO 64014
// pom := GetBase ( depot ) ;
63312: LD_ADDR_VAR 0 10
63316: PUSH
63317: LD_VAR 0 1
63321: PPUSH
63322: CALL_OW 274
63326: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
63327: LD_ADDR_VAR 0 11
63331: PUSH
63332: LD_VAR 0 2
63336: PPUSH
63337: LD_VAR 0 1
63341: PPUSH
63342: CALL_OW 248
63346: PPUSH
63347: CALL_OW 450
63351: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
63352: LD_VAR 0 10
63356: PPUSH
63357: LD_INT 1
63359: PPUSH
63360: CALL_OW 275
63364: PUSH
63365: LD_VAR 0 11
63369: PUSH
63370: LD_INT 1
63372: ARRAY
63373: GREATEREQUAL
63374: PUSH
63375: LD_VAR 0 10
63379: PPUSH
63380: LD_INT 2
63382: PPUSH
63383: CALL_OW 275
63387: PUSH
63388: LD_VAR 0 11
63392: PUSH
63393: LD_INT 2
63395: ARRAY
63396: GREATEREQUAL
63397: AND
63398: PUSH
63399: LD_VAR 0 10
63403: PPUSH
63404: LD_INT 3
63406: PPUSH
63407: CALL_OW 275
63411: PUSH
63412: LD_VAR 0 11
63416: PUSH
63417: LD_INT 3
63419: ARRAY
63420: GREATEREQUAL
63421: AND
63422: NOT
63423: IFFALSE 63427
// exit ;
63425: GO 64014
// if GetBType ( depot ) = b_depot then
63427: LD_VAR 0 1
63431: PPUSH
63432: CALL_OW 266
63436: PUSH
63437: LD_INT 0
63439: EQUAL
63440: IFFALSE 63452
// dist := 28 else
63442: LD_ADDR_VAR 0 14
63446: PUSH
63447: LD_INT 28
63449: ST_TO_ADDR
63450: GO 63460
// dist := 36 ;
63452: LD_ADDR_VAR 0 14
63456: PUSH
63457: LD_INT 36
63459: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
63460: LD_VAR 0 1
63464: PPUSH
63465: LD_VAR 0 3
63469: PPUSH
63470: LD_VAR 0 4
63474: PPUSH
63475: CALL_OW 297
63479: PUSH
63480: LD_VAR 0 14
63484: GREATER
63485: IFFALSE 63489
// exit ;
63487: GO 64014
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
63489: LD_ADDR_VAR 0 12
63493: PUSH
63494: LD_VAR 0 2
63498: PPUSH
63499: LD_VAR 0 3
63503: PPUSH
63504: LD_VAR 0 4
63508: PPUSH
63509: LD_VAR 0 5
63513: PPUSH
63514: LD_VAR 0 1
63518: PPUSH
63519: CALL_OW 248
63523: PPUSH
63524: LD_INT 0
63526: PPUSH
63527: CALL 64019 0 6
63531: ST_TO_ADDR
// if not hexes then
63532: LD_VAR 0 12
63536: NOT
63537: IFFALSE 63541
// exit ;
63539: GO 64014
// hex := GetHexInfo ( x , y ) ;
63541: LD_ADDR_VAR 0 15
63545: PUSH
63546: LD_VAR 0 3
63550: PPUSH
63551: LD_VAR 0 4
63555: PPUSH
63556: CALL_OW 546
63560: ST_TO_ADDR
// if hex [ 1 ] then
63561: LD_VAR 0 15
63565: PUSH
63566: LD_INT 1
63568: ARRAY
63569: IFFALSE 63573
// exit ;
63571: GO 64014
// height := hex [ 2 ] ;
63573: LD_ADDR_VAR 0 13
63577: PUSH
63578: LD_VAR 0 15
63582: PUSH
63583: LD_INT 2
63585: ARRAY
63586: ST_TO_ADDR
// for i = 1 to hexes do
63587: LD_ADDR_VAR 0 7
63591: PUSH
63592: DOUBLE
63593: LD_INT 1
63595: DEC
63596: ST_TO_ADDR
63597: LD_VAR 0 12
63601: PUSH
63602: FOR_TO
63603: IFFALSE 63933
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
63605: LD_VAR 0 12
63609: PUSH
63610: LD_VAR 0 7
63614: ARRAY
63615: PUSH
63616: LD_INT 1
63618: ARRAY
63619: PPUSH
63620: LD_VAR 0 12
63624: PUSH
63625: LD_VAR 0 7
63629: ARRAY
63630: PUSH
63631: LD_INT 2
63633: ARRAY
63634: PPUSH
63635: CALL_OW 488
63639: NOT
63640: PUSH
63641: LD_VAR 0 12
63645: PUSH
63646: LD_VAR 0 7
63650: ARRAY
63651: PUSH
63652: LD_INT 1
63654: ARRAY
63655: PPUSH
63656: LD_VAR 0 12
63660: PUSH
63661: LD_VAR 0 7
63665: ARRAY
63666: PUSH
63667: LD_INT 2
63669: ARRAY
63670: PPUSH
63671: CALL_OW 428
63675: PUSH
63676: LD_INT 0
63678: GREATER
63679: OR
63680: PUSH
63681: LD_VAR 0 12
63685: PUSH
63686: LD_VAR 0 7
63690: ARRAY
63691: PUSH
63692: LD_INT 1
63694: ARRAY
63695: PPUSH
63696: LD_VAR 0 12
63700: PUSH
63701: LD_VAR 0 7
63705: ARRAY
63706: PUSH
63707: LD_INT 2
63709: ARRAY
63710: PPUSH
63711: CALL_OW 351
63715: OR
63716: IFFALSE 63722
// exit ;
63718: POP
63719: POP
63720: GO 64014
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63722: LD_ADDR_VAR 0 8
63726: PUSH
63727: LD_VAR 0 12
63731: PUSH
63732: LD_VAR 0 7
63736: ARRAY
63737: PUSH
63738: LD_INT 1
63740: ARRAY
63741: PPUSH
63742: LD_VAR 0 12
63746: PUSH
63747: LD_VAR 0 7
63751: ARRAY
63752: PUSH
63753: LD_INT 2
63755: ARRAY
63756: PPUSH
63757: CALL_OW 546
63761: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
63762: LD_VAR 0 8
63766: PUSH
63767: LD_INT 1
63769: ARRAY
63770: PUSH
63771: LD_VAR 0 8
63775: PUSH
63776: LD_INT 2
63778: ARRAY
63779: PUSH
63780: LD_VAR 0 13
63784: PUSH
63785: LD_INT 2
63787: PLUS
63788: GREATER
63789: OR
63790: PUSH
63791: LD_VAR 0 8
63795: PUSH
63796: LD_INT 2
63798: ARRAY
63799: PUSH
63800: LD_VAR 0 13
63804: PUSH
63805: LD_INT 2
63807: MINUS
63808: LESS
63809: OR
63810: PUSH
63811: LD_VAR 0 8
63815: PUSH
63816: LD_INT 3
63818: ARRAY
63819: PUSH
63820: LD_INT 0
63822: PUSH
63823: LD_INT 8
63825: PUSH
63826: LD_INT 9
63828: PUSH
63829: LD_INT 10
63831: PUSH
63832: LD_INT 11
63834: PUSH
63835: LD_INT 12
63837: PUSH
63838: LD_INT 13
63840: PUSH
63841: LD_INT 16
63843: PUSH
63844: LD_INT 17
63846: PUSH
63847: LD_INT 18
63849: PUSH
63850: LD_INT 19
63852: PUSH
63853: LD_INT 20
63855: PUSH
63856: LD_INT 21
63858: PUSH
63859: EMPTY
63860: LIST
63861: LIST
63862: LIST
63863: LIST
63864: LIST
63865: LIST
63866: LIST
63867: LIST
63868: LIST
63869: LIST
63870: LIST
63871: LIST
63872: LIST
63873: IN
63874: NOT
63875: OR
63876: PUSH
63877: LD_VAR 0 8
63881: PUSH
63882: LD_INT 5
63884: ARRAY
63885: NOT
63886: OR
63887: PUSH
63888: LD_VAR 0 8
63892: PUSH
63893: LD_INT 6
63895: ARRAY
63896: PUSH
63897: LD_INT 1
63899: PUSH
63900: LD_INT 2
63902: PUSH
63903: LD_INT 7
63905: PUSH
63906: LD_INT 9
63908: PUSH
63909: LD_INT 10
63911: PUSH
63912: LD_INT 11
63914: PUSH
63915: EMPTY
63916: LIST
63917: LIST
63918: LIST
63919: LIST
63920: LIST
63921: LIST
63922: IN
63923: NOT
63924: OR
63925: IFFALSE 63931
// exit ;
63927: POP
63928: POP
63929: GO 64014
// end ;
63931: GO 63602
63933: POP
63934: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
63935: LD_VAR 0 9
63939: PPUSH
63940: LD_VAR 0 3
63944: PPUSH
63945: LD_VAR 0 4
63949: PPUSH
63950: LD_INT 20
63952: PPUSH
63953: CALL 55966 0 4
63957: PUSH
63958: LD_INT 4
63960: ARRAY
63961: IFFALSE 63965
// exit ;
63963: GO 64014
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
63965: LD_VAR 0 2
63969: PUSH
63970: LD_INT 29
63972: PUSH
63973: LD_INT 30
63975: PUSH
63976: EMPTY
63977: LIST
63978: LIST
63979: IN
63980: PUSH
63981: LD_VAR 0 3
63985: PPUSH
63986: LD_VAR 0 4
63990: PPUSH
63991: LD_VAR 0 9
63995: PPUSH
63996: CALL_OW 440
64000: NOT
64001: AND
64002: IFFALSE 64006
// exit ;
64004: GO 64014
// result := true ;
64006: LD_ADDR_VAR 0 6
64010: PUSH
64011: LD_INT 1
64013: ST_TO_ADDR
// end ;
64014: LD_VAR 0 6
64018: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
64019: LD_INT 0
64021: PPUSH
64022: PPUSH
64023: PPUSH
64024: PPUSH
64025: PPUSH
64026: PPUSH
64027: PPUSH
64028: PPUSH
64029: PPUSH
64030: PPUSH
64031: PPUSH
64032: PPUSH
64033: PPUSH
64034: PPUSH
64035: PPUSH
64036: PPUSH
64037: PPUSH
64038: PPUSH
64039: PPUSH
64040: PPUSH
64041: PPUSH
64042: PPUSH
64043: PPUSH
64044: PPUSH
64045: PPUSH
64046: PPUSH
64047: PPUSH
64048: PPUSH
64049: PPUSH
64050: PPUSH
64051: PPUSH
64052: PPUSH
64053: PPUSH
64054: PPUSH
64055: PPUSH
64056: PPUSH
64057: PPUSH
64058: PPUSH
64059: PPUSH
64060: PPUSH
64061: PPUSH
64062: PPUSH
64063: PPUSH
64064: PPUSH
64065: PPUSH
64066: PPUSH
64067: PPUSH
64068: PPUSH
64069: PPUSH
64070: PPUSH
64071: PPUSH
64072: PPUSH
64073: PPUSH
64074: PPUSH
64075: PPUSH
64076: PPUSH
64077: PPUSH
64078: PPUSH
// result = [ ] ;
64079: LD_ADDR_VAR 0 7
64083: PUSH
64084: EMPTY
64085: ST_TO_ADDR
// temp_list = [ ] ;
64086: LD_ADDR_VAR 0 9
64090: PUSH
64091: EMPTY
64092: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
64093: LD_VAR 0 4
64097: PUSH
64098: LD_INT 0
64100: PUSH
64101: LD_INT 1
64103: PUSH
64104: LD_INT 2
64106: PUSH
64107: LD_INT 3
64109: PUSH
64110: LD_INT 4
64112: PUSH
64113: LD_INT 5
64115: PUSH
64116: EMPTY
64117: LIST
64118: LIST
64119: LIST
64120: LIST
64121: LIST
64122: LIST
64123: IN
64124: NOT
64125: PUSH
64126: LD_VAR 0 1
64130: PUSH
64131: LD_INT 0
64133: PUSH
64134: LD_INT 1
64136: PUSH
64137: EMPTY
64138: LIST
64139: LIST
64140: IN
64141: PUSH
64142: LD_VAR 0 5
64146: PUSH
64147: LD_INT 1
64149: PUSH
64150: LD_INT 2
64152: PUSH
64153: LD_INT 3
64155: PUSH
64156: EMPTY
64157: LIST
64158: LIST
64159: LIST
64160: IN
64161: NOT
64162: AND
64163: OR
64164: IFFALSE 64168
// exit ;
64166: GO 82559
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
64168: LD_VAR 0 1
64172: PUSH
64173: LD_INT 6
64175: PUSH
64176: LD_INT 7
64178: PUSH
64179: LD_INT 8
64181: PUSH
64182: LD_INT 13
64184: PUSH
64185: LD_INT 12
64187: PUSH
64188: LD_INT 15
64190: PUSH
64191: LD_INT 11
64193: PUSH
64194: LD_INT 14
64196: PUSH
64197: LD_INT 10
64199: PUSH
64200: EMPTY
64201: LIST
64202: LIST
64203: LIST
64204: LIST
64205: LIST
64206: LIST
64207: LIST
64208: LIST
64209: LIST
64210: IN
64211: IFFALSE 64221
// btype = b_lab ;
64213: LD_ADDR_VAR 0 1
64217: PUSH
64218: LD_INT 6
64220: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
64221: LD_VAR 0 6
64225: PUSH
64226: LD_INT 0
64228: PUSH
64229: LD_INT 1
64231: PUSH
64232: LD_INT 2
64234: PUSH
64235: EMPTY
64236: LIST
64237: LIST
64238: LIST
64239: IN
64240: NOT
64241: PUSH
64242: LD_VAR 0 1
64246: PUSH
64247: LD_INT 0
64249: PUSH
64250: LD_INT 1
64252: PUSH
64253: LD_INT 2
64255: PUSH
64256: LD_INT 3
64258: PUSH
64259: LD_INT 6
64261: PUSH
64262: LD_INT 36
64264: PUSH
64265: LD_INT 4
64267: PUSH
64268: LD_INT 5
64270: PUSH
64271: LD_INT 31
64273: PUSH
64274: LD_INT 32
64276: PUSH
64277: LD_INT 33
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: LIST
64288: LIST
64289: LIST
64290: LIST
64291: LIST
64292: IN
64293: NOT
64294: PUSH
64295: LD_VAR 0 6
64299: PUSH
64300: LD_INT 1
64302: EQUAL
64303: AND
64304: OR
64305: PUSH
64306: LD_VAR 0 1
64310: PUSH
64311: LD_INT 2
64313: PUSH
64314: LD_INT 3
64316: PUSH
64317: EMPTY
64318: LIST
64319: LIST
64320: IN
64321: NOT
64322: PUSH
64323: LD_VAR 0 6
64327: PUSH
64328: LD_INT 2
64330: EQUAL
64331: AND
64332: OR
64333: IFFALSE 64343
// mode = 0 ;
64335: LD_ADDR_VAR 0 6
64339: PUSH
64340: LD_INT 0
64342: ST_TO_ADDR
// case mode of 0 :
64343: LD_VAR 0 6
64347: PUSH
64348: LD_INT 0
64350: DOUBLE
64351: EQUAL
64352: IFTRUE 64356
64354: GO 75809
64356: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64357: LD_ADDR_VAR 0 11
64361: PUSH
64362: LD_INT 0
64364: PUSH
64365: LD_INT 0
64367: PUSH
64368: EMPTY
64369: LIST
64370: LIST
64371: PUSH
64372: LD_INT 0
64374: PUSH
64375: LD_INT 1
64377: NEG
64378: PUSH
64379: EMPTY
64380: LIST
64381: LIST
64382: PUSH
64383: LD_INT 1
64385: PUSH
64386: LD_INT 0
64388: PUSH
64389: EMPTY
64390: LIST
64391: LIST
64392: PUSH
64393: LD_INT 1
64395: PUSH
64396: LD_INT 1
64398: PUSH
64399: EMPTY
64400: LIST
64401: LIST
64402: PUSH
64403: LD_INT 0
64405: PUSH
64406: LD_INT 1
64408: PUSH
64409: EMPTY
64410: LIST
64411: LIST
64412: PUSH
64413: LD_INT 1
64415: NEG
64416: PUSH
64417: LD_INT 0
64419: PUSH
64420: EMPTY
64421: LIST
64422: LIST
64423: PUSH
64424: LD_INT 1
64426: NEG
64427: PUSH
64428: LD_INT 1
64430: NEG
64431: PUSH
64432: EMPTY
64433: LIST
64434: LIST
64435: PUSH
64436: LD_INT 1
64438: NEG
64439: PUSH
64440: LD_INT 2
64442: NEG
64443: PUSH
64444: EMPTY
64445: LIST
64446: LIST
64447: PUSH
64448: LD_INT 0
64450: PUSH
64451: LD_INT 2
64453: NEG
64454: PUSH
64455: EMPTY
64456: LIST
64457: LIST
64458: PUSH
64459: LD_INT 1
64461: PUSH
64462: LD_INT 1
64464: NEG
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: PUSH
64470: LD_INT 1
64472: PUSH
64473: LD_INT 2
64475: PUSH
64476: EMPTY
64477: LIST
64478: LIST
64479: PUSH
64480: LD_INT 0
64482: PUSH
64483: LD_INT 2
64485: PUSH
64486: EMPTY
64487: LIST
64488: LIST
64489: PUSH
64490: LD_INT 1
64492: NEG
64493: PUSH
64494: LD_INT 1
64496: PUSH
64497: EMPTY
64498: LIST
64499: LIST
64500: PUSH
64501: LD_INT 1
64503: PUSH
64504: LD_INT 3
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: LD_INT 3
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: PUSH
64521: LD_INT 1
64523: NEG
64524: PUSH
64525: LD_INT 2
64527: PUSH
64528: EMPTY
64529: LIST
64530: LIST
64531: PUSH
64532: EMPTY
64533: LIST
64534: LIST
64535: LIST
64536: LIST
64537: LIST
64538: LIST
64539: LIST
64540: LIST
64541: LIST
64542: LIST
64543: LIST
64544: LIST
64545: LIST
64546: LIST
64547: LIST
64548: LIST
64549: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64550: LD_ADDR_VAR 0 12
64554: PUSH
64555: LD_INT 0
64557: PUSH
64558: LD_INT 0
64560: PUSH
64561: EMPTY
64562: LIST
64563: LIST
64564: PUSH
64565: LD_INT 0
64567: PUSH
64568: LD_INT 1
64570: NEG
64571: PUSH
64572: EMPTY
64573: LIST
64574: LIST
64575: PUSH
64576: LD_INT 1
64578: PUSH
64579: LD_INT 0
64581: PUSH
64582: EMPTY
64583: LIST
64584: LIST
64585: PUSH
64586: LD_INT 1
64588: PUSH
64589: LD_INT 1
64591: PUSH
64592: EMPTY
64593: LIST
64594: LIST
64595: PUSH
64596: LD_INT 0
64598: PUSH
64599: LD_INT 1
64601: PUSH
64602: EMPTY
64603: LIST
64604: LIST
64605: PUSH
64606: LD_INT 1
64608: NEG
64609: PUSH
64610: LD_INT 0
64612: PUSH
64613: EMPTY
64614: LIST
64615: LIST
64616: PUSH
64617: LD_INT 1
64619: NEG
64620: PUSH
64621: LD_INT 1
64623: NEG
64624: PUSH
64625: EMPTY
64626: LIST
64627: LIST
64628: PUSH
64629: LD_INT 1
64631: PUSH
64632: LD_INT 1
64634: NEG
64635: PUSH
64636: EMPTY
64637: LIST
64638: LIST
64639: PUSH
64640: LD_INT 2
64642: PUSH
64643: LD_INT 0
64645: PUSH
64646: EMPTY
64647: LIST
64648: LIST
64649: PUSH
64650: LD_INT 2
64652: PUSH
64653: LD_INT 1
64655: PUSH
64656: EMPTY
64657: LIST
64658: LIST
64659: PUSH
64660: LD_INT 1
64662: NEG
64663: PUSH
64664: LD_INT 1
64666: PUSH
64667: EMPTY
64668: LIST
64669: LIST
64670: PUSH
64671: LD_INT 2
64673: NEG
64674: PUSH
64675: LD_INT 0
64677: PUSH
64678: EMPTY
64679: LIST
64680: LIST
64681: PUSH
64682: LD_INT 2
64684: NEG
64685: PUSH
64686: LD_INT 1
64688: NEG
64689: PUSH
64690: EMPTY
64691: LIST
64692: LIST
64693: PUSH
64694: LD_INT 2
64696: NEG
64697: PUSH
64698: LD_INT 1
64700: PUSH
64701: EMPTY
64702: LIST
64703: LIST
64704: PUSH
64705: LD_INT 3
64707: NEG
64708: PUSH
64709: LD_INT 0
64711: PUSH
64712: EMPTY
64713: LIST
64714: LIST
64715: PUSH
64716: LD_INT 3
64718: NEG
64719: PUSH
64720: LD_INT 1
64722: NEG
64723: PUSH
64724: EMPTY
64725: LIST
64726: LIST
64727: PUSH
64728: EMPTY
64729: LIST
64730: LIST
64731: LIST
64732: LIST
64733: LIST
64734: LIST
64735: LIST
64736: LIST
64737: LIST
64738: LIST
64739: LIST
64740: LIST
64741: LIST
64742: LIST
64743: LIST
64744: LIST
64745: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
64746: LD_ADDR_VAR 0 13
64750: PUSH
64751: LD_INT 0
64753: PUSH
64754: LD_INT 0
64756: PUSH
64757: EMPTY
64758: LIST
64759: LIST
64760: PUSH
64761: LD_INT 0
64763: PUSH
64764: LD_INT 1
64766: NEG
64767: PUSH
64768: EMPTY
64769: LIST
64770: LIST
64771: PUSH
64772: LD_INT 1
64774: PUSH
64775: LD_INT 0
64777: PUSH
64778: EMPTY
64779: LIST
64780: LIST
64781: PUSH
64782: LD_INT 1
64784: PUSH
64785: LD_INT 1
64787: PUSH
64788: EMPTY
64789: LIST
64790: LIST
64791: PUSH
64792: LD_INT 0
64794: PUSH
64795: LD_INT 1
64797: PUSH
64798: EMPTY
64799: LIST
64800: LIST
64801: PUSH
64802: LD_INT 1
64804: NEG
64805: PUSH
64806: LD_INT 0
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 1
64815: NEG
64816: PUSH
64817: LD_INT 1
64819: NEG
64820: PUSH
64821: EMPTY
64822: LIST
64823: LIST
64824: PUSH
64825: LD_INT 1
64827: NEG
64828: PUSH
64829: LD_INT 2
64831: NEG
64832: PUSH
64833: EMPTY
64834: LIST
64835: LIST
64836: PUSH
64837: LD_INT 2
64839: PUSH
64840: LD_INT 1
64842: PUSH
64843: EMPTY
64844: LIST
64845: LIST
64846: PUSH
64847: LD_INT 2
64849: PUSH
64850: LD_INT 2
64852: PUSH
64853: EMPTY
64854: LIST
64855: LIST
64856: PUSH
64857: LD_INT 1
64859: PUSH
64860: LD_INT 2
64862: PUSH
64863: EMPTY
64864: LIST
64865: LIST
64866: PUSH
64867: LD_INT 2
64869: NEG
64870: PUSH
64871: LD_INT 1
64873: NEG
64874: PUSH
64875: EMPTY
64876: LIST
64877: LIST
64878: PUSH
64879: LD_INT 2
64881: NEG
64882: PUSH
64883: LD_INT 2
64885: NEG
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: PUSH
64891: LD_INT 2
64893: NEG
64894: PUSH
64895: LD_INT 3
64897: NEG
64898: PUSH
64899: EMPTY
64900: LIST
64901: LIST
64902: PUSH
64903: LD_INT 3
64905: NEG
64906: PUSH
64907: LD_INT 2
64909: NEG
64910: PUSH
64911: EMPTY
64912: LIST
64913: LIST
64914: PUSH
64915: LD_INT 3
64917: NEG
64918: PUSH
64919: LD_INT 3
64921: NEG
64922: PUSH
64923: EMPTY
64924: LIST
64925: LIST
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: LIST
64931: LIST
64932: LIST
64933: LIST
64934: LIST
64935: LIST
64936: LIST
64937: LIST
64938: LIST
64939: LIST
64940: LIST
64941: LIST
64942: LIST
64943: LIST
64944: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
64945: LD_ADDR_VAR 0 14
64949: PUSH
64950: LD_INT 0
64952: PUSH
64953: LD_INT 0
64955: PUSH
64956: EMPTY
64957: LIST
64958: LIST
64959: PUSH
64960: LD_INT 0
64962: PUSH
64963: LD_INT 1
64965: NEG
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 1
64973: PUSH
64974: LD_INT 0
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 1
64983: PUSH
64984: LD_INT 1
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: LD_INT 0
64993: PUSH
64994: LD_INT 1
64996: PUSH
64997: EMPTY
64998: LIST
64999: LIST
65000: PUSH
65001: LD_INT 1
65003: NEG
65004: PUSH
65005: LD_INT 0
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: PUSH
65012: LD_INT 1
65014: NEG
65015: PUSH
65016: LD_INT 1
65018: NEG
65019: PUSH
65020: EMPTY
65021: LIST
65022: LIST
65023: PUSH
65024: LD_INT 1
65026: NEG
65027: PUSH
65028: LD_INT 2
65030: NEG
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 0
65038: PUSH
65039: LD_INT 2
65041: NEG
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 1
65049: PUSH
65050: LD_INT 1
65052: NEG
65053: PUSH
65054: EMPTY
65055: LIST
65056: LIST
65057: PUSH
65058: LD_INT 1
65060: PUSH
65061: LD_INT 2
65063: PUSH
65064: EMPTY
65065: LIST
65066: LIST
65067: PUSH
65068: LD_INT 0
65070: PUSH
65071: LD_INT 2
65073: PUSH
65074: EMPTY
65075: LIST
65076: LIST
65077: PUSH
65078: LD_INT 1
65080: NEG
65081: PUSH
65082: LD_INT 1
65084: PUSH
65085: EMPTY
65086: LIST
65087: LIST
65088: PUSH
65089: LD_INT 1
65091: NEG
65092: PUSH
65093: LD_INT 3
65095: NEG
65096: PUSH
65097: EMPTY
65098: LIST
65099: LIST
65100: PUSH
65101: LD_INT 0
65103: PUSH
65104: LD_INT 3
65106: NEG
65107: PUSH
65108: EMPTY
65109: LIST
65110: LIST
65111: PUSH
65112: LD_INT 1
65114: PUSH
65115: LD_INT 2
65117: NEG
65118: PUSH
65119: EMPTY
65120: LIST
65121: LIST
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: LIST
65134: LIST
65135: LIST
65136: LIST
65137: LIST
65138: LIST
65139: LIST
65140: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65141: LD_ADDR_VAR 0 15
65145: PUSH
65146: LD_INT 0
65148: PUSH
65149: LD_INT 0
65151: PUSH
65152: EMPTY
65153: LIST
65154: LIST
65155: PUSH
65156: LD_INT 0
65158: PUSH
65159: LD_INT 1
65161: NEG
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 1
65169: PUSH
65170: LD_INT 0
65172: PUSH
65173: EMPTY
65174: LIST
65175: LIST
65176: PUSH
65177: LD_INT 1
65179: PUSH
65180: LD_INT 1
65182: PUSH
65183: EMPTY
65184: LIST
65185: LIST
65186: PUSH
65187: LD_INT 0
65189: PUSH
65190: LD_INT 1
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: PUSH
65197: LD_INT 1
65199: NEG
65200: PUSH
65201: LD_INT 0
65203: PUSH
65204: EMPTY
65205: LIST
65206: LIST
65207: PUSH
65208: LD_INT 1
65210: NEG
65211: PUSH
65212: LD_INT 1
65214: NEG
65215: PUSH
65216: EMPTY
65217: LIST
65218: LIST
65219: PUSH
65220: LD_INT 1
65222: PUSH
65223: LD_INT 1
65225: NEG
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: PUSH
65231: LD_INT 2
65233: PUSH
65234: LD_INT 0
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PUSH
65241: LD_INT 2
65243: PUSH
65244: LD_INT 1
65246: PUSH
65247: EMPTY
65248: LIST
65249: LIST
65250: PUSH
65251: LD_INT 1
65253: NEG
65254: PUSH
65255: LD_INT 1
65257: PUSH
65258: EMPTY
65259: LIST
65260: LIST
65261: PUSH
65262: LD_INT 2
65264: NEG
65265: PUSH
65266: LD_INT 0
65268: PUSH
65269: EMPTY
65270: LIST
65271: LIST
65272: PUSH
65273: LD_INT 2
65275: NEG
65276: PUSH
65277: LD_INT 1
65279: NEG
65280: PUSH
65281: EMPTY
65282: LIST
65283: LIST
65284: PUSH
65285: LD_INT 2
65287: PUSH
65288: LD_INT 1
65290: NEG
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: PUSH
65296: LD_INT 3
65298: PUSH
65299: LD_INT 0
65301: PUSH
65302: EMPTY
65303: LIST
65304: LIST
65305: PUSH
65306: LD_INT 3
65308: PUSH
65309: LD_INT 1
65311: PUSH
65312: EMPTY
65313: LIST
65314: LIST
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: LIST
65320: LIST
65321: LIST
65322: LIST
65323: LIST
65324: LIST
65325: LIST
65326: LIST
65327: LIST
65328: LIST
65329: LIST
65330: LIST
65331: LIST
65332: LIST
65333: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65334: LD_ADDR_VAR 0 16
65338: PUSH
65339: LD_INT 0
65341: PUSH
65342: LD_INT 0
65344: PUSH
65345: EMPTY
65346: LIST
65347: LIST
65348: PUSH
65349: LD_INT 0
65351: PUSH
65352: LD_INT 1
65354: NEG
65355: PUSH
65356: EMPTY
65357: LIST
65358: LIST
65359: PUSH
65360: LD_INT 1
65362: PUSH
65363: LD_INT 0
65365: PUSH
65366: EMPTY
65367: LIST
65368: LIST
65369: PUSH
65370: LD_INT 1
65372: PUSH
65373: LD_INT 1
65375: PUSH
65376: EMPTY
65377: LIST
65378: LIST
65379: PUSH
65380: LD_INT 0
65382: PUSH
65383: LD_INT 1
65385: PUSH
65386: EMPTY
65387: LIST
65388: LIST
65389: PUSH
65390: LD_INT 1
65392: NEG
65393: PUSH
65394: LD_INT 0
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 1
65403: NEG
65404: PUSH
65405: LD_INT 1
65407: NEG
65408: PUSH
65409: EMPTY
65410: LIST
65411: LIST
65412: PUSH
65413: LD_INT 1
65415: NEG
65416: PUSH
65417: LD_INT 2
65419: NEG
65420: PUSH
65421: EMPTY
65422: LIST
65423: LIST
65424: PUSH
65425: LD_INT 2
65427: PUSH
65428: LD_INT 1
65430: PUSH
65431: EMPTY
65432: LIST
65433: LIST
65434: PUSH
65435: LD_INT 2
65437: PUSH
65438: LD_INT 2
65440: PUSH
65441: EMPTY
65442: LIST
65443: LIST
65444: PUSH
65445: LD_INT 1
65447: PUSH
65448: LD_INT 2
65450: PUSH
65451: EMPTY
65452: LIST
65453: LIST
65454: PUSH
65455: LD_INT 2
65457: NEG
65458: PUSH
65459: LD_INT 1
65461: NEG
65462: PUSH
65463: EMPTY
65464: LIST
65465: LIST
65466: PUSH
65467: LD_INT 2
65469: NEG
65470: PUSH
65471: LD_INT 2
65473: NEG
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 3
65481: PUSH
65482: LD_INT 2
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: LD_INT 3
65491: PUSH
65492: LD_INT 3
65494: PUSH
65495: EMPTY
65496: LIST
65497: LIST
65498: PUSH
65499: LD_INT 2
65501: PUSH
65502: LD_INT 3
65504: PUSH
65505: EMPTY
65506: LIST
65507: LIST
65508: PUSH
65509: EMPTY
65510: LIST
65511: LIST
65512: LIST
65513: LIST
65514: LIST
65515: LIST
65516: LIST
65517: LIST
65518: LIST
65519: LIST
65520: LIST
65521: LIST
65522: LIST
65523: LIST
65524: LIST
65525: LIST
65526: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65527: LD_ADDR_VAR 0 17
65531: PUSH
65532: LD_INT 0
65534: PUSH
65535: LD_INT 0
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 0
65544: PUSH
65545: LD_INT 1
65547: NEG
65548: PUSH
65549: EMPTY
65550: LIST
65551: LIST
65552: PUSH
65553: LD_INT 1
65555: PUSH
65556: LD_INT 0
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 1
65565: PUSH
65566: LD_INT 1
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 0
65575: PUSH
65576: LD_INT 1
65578: PUSH
65579: EMPTY
65580: LIST
65581: LIST
65582: PUSH
65583: LD_INT 1
65585: NEG
65586: PUSH
65587: LD_INT 0
65589: PUSH
65590: EMPTY
65591: LIST
65592: LIST
65593: PUSH
65594: LD_INT 1
65596: NEG
65597: PUSH
65598: LD_INT 1
65600: NEG
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 1
65608: NEG
65609: PUSH
65610: LD_INT 2
65612: NEG
65613: PUSH
65614: EMPTY
65615: LIST
65616: LIST
65617: PUSH
65618: LD_INT 0
65620: PUSH
65621: LD_INT 2
65623: NEG
65624: PUSH
65625: EMPTY
65626: LIST
65627: LIST
65628: PUSH
65629: LD_INT 1
65631: PUSH
65632: LD_INT 1
65634: NEG
65635: PUSH
65636: EMPTY
65637: LIST
65638: LIST
65639: PUSH
65640: LD_INT 2
65642: PUSH
65643: LD_INT 0
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 2
65652: PUSH
65653: LD_INT 1
65655: PUSH
65656: EMPTY
65657: LIST
65658: LIST
65659: PUSH
65660: LD_INT 2
65662: PUSH
65663: LD_INT 2
65665: PUSH
65666: EMPTY
65667: LIST
65668: LIST
65669: PUSH
65670: LD_INT 1
65672: PUSH
65673: LD_INT 2
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 0
65682: PUSH
65683: LD_INT 2
65685: PUSH
65686: EMPTY
65687: LIST
65688: LIST
65689: PUSH
65690: LD_INT 1
65692: NEG
65693: PUSH
65694: LD_INT 1
65696: PUSH
65697: EMPTY
65698: LIST
65699: LIST
65700: PUSH
65701: LD_INT 2
65703: NEG
65704: PUSH
65705: LD_INT 0
65707: PUSH
65708: EMPTY
65709: LIST
65710: LIST
65711: PUSH
65712: LD_INT 2
65714: NEG
65715: PUSH
65716: LD_INT 1
65718: NEG
65719: PUSH
65720: EMPTY
65721: LIST
65722: LIST
65723: PUSH
65724: LD_INT 2
65726: NEG
65727: PUSH
65728: LD_INT 2
65730: NEG
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: EMPTY
65737: LIST
65738: LIST
65739: LIST
65740: LIST
65741: LIST
65742: LIST
65743: LIST
65744: LIST
65745: LIST
65746: LIST
65747: LIST
65748: LIST
65749: LIST
65750: LIST
65751: LIST
65752: LIST
65753: LIST
65754: LIST
65755: LIST
65756: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65757: LD_ADDR_VAR 0 18
65761: PUSH
65762: LD_INT 0
65764: PUSH
65765: LD_INT 0
65767: PUSH
65768: EMPTY
65769: LIST
65770: LIST
65771: PUSH
65772: LD_INT 0
65774: PUSH
65775: LD_INT 1
65777: NEG
65778: PUSH
65779: EMPTY
65780: LIST
65781: LIST
65782: PUSH
65783: LD_INT 1
65785: PUSH
65786: LD_INT 0
65788: PUSH
65789: EMPTY
65790: LIST
65791: LIST
65792: PUSH
65793: LD_INT 1
65795: PUSH
65796: LD_INT 1
65798: PUSH
65799: EMPTY
65800: LIST
65801: LIST
65802: PUSH
65803: LD_INT 0
65805: PUSH
65806: LD_INT 1
65808: PUSH
65809: EMPTY
65810: LIST
65811: LIST
65812: PUSH
65813: LD_INT 1
65815: NEG
65816: PUSH
65817: LD_INT 0
65819: PUSH
65820: EMPTY
65821: LIST
65822: LIST
65823: PUSH
65824: LD_INT 1
65826: NEG
65827: PUSH
65828: LD_INT 1
65830: NEG
65831: PUSH
65832: EMPTY
65833: LIST
65834: LIST
65835: PUSH
65836: LD_INT 1
65838: NEG
65839: PUSH
65840: LD_INT 2
65842: NEG
65843: PUSH
65844: EMPTY
65845: LIST
65846: LIST
65847: PUSH
65848: LD_INT 0
65850: PUSH
65851: LD_INT 2
65853: NEG
65854: PUSH
65855: EMPTY
65856: LIST
65857: LIST
65858: PUSH
65859: LD_INT 1
65861: PUSH
65862: LD_INT 1
65864: NEG
65865: PUSH
65866: EMPTY
65867: LIST
65868: LIST
65869: PUSH
65870: LD_INT 2
65872: PUSH
65873: LD_INT 0
65875: PUSH
65876: EMPTY
65877: LIST
65878: LIST
65879: PUSH
65880: LD_INT 2
65882: PUSH
65883: LD_INT 1
65885: PUSH
65886: EMPTY
65887: LIST
65888: LIST
65889: PUSH
65890: LD_INT 2
65892: PUSH
65893: LD_INT 2
65895: PUSH
65896: EMPTY
65897: LIST
65898: LIST
65899: PUSH
65900: LD_INT 1
65902: PUSH
65903: LD_INT 2
65905: PUSH
65906: EMPTY
65907: LIST
65908: LIST
65909: PUSH
65910: LD_INT 0
65912: PUSH
65913: LD_INT 2
65915: PUSH
65916: EMPTY
65917: LIST
65918: LIST
65919: PUSH
65920: LD_INT 1
65922: NEG
65923: PUSH
65924: LD_INT 1
65926: PUSH
65927: EMPTY
65928: LIST
65929: LIST
65930: PUSH
65931: LD_INT 2
65933: NEG
65934: PUSH
65935: LD_INT 0
65937: PUSH
65938: EMPTY
65939: LIST
65940: LIST
65941: PUSH
65942: LD_INT 2
65944: NEG
65945: PUSH
65946: LD_INT 1
65948: NEG
65949: PUSH
65950: EMPTY
65951: LIST
65952: LIST
65953: PUSH
65954: LD_INT 2
65956: NEG
65957: PUSH
65958: LD_INT 2
65960: NEG
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PUSH
65966: EMPTY
65967: LIST
65968: LIST
65969: LIST
65970: LIST
65971: LIST
65972: LIST
65973: LIST
65974: LIST
65975: LIST
65976: LIST
65977: LIST
65978: LIST
65979: LIST
65980: LIST
65981: LIST
65982: LIST
65983: LIST
65984: LIST
65985: LIST
65986: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65987: LD_ADDR_VAR 0 19
65991: PUSH
65992: LD_INT 0
65994: PUSH
65995: LD_INT 0
65997: PUSH
65998: EMPTY
65999: LIST
66000: LIST
66001: PUSH
66002: LD_INT 0
66004: PUSH
66005: LD_INT 1
66007: NEG
66008: PUSH
66009: EMPTY
66010: LIST
66011: LIST
66012: PUSH
66013: LD_INT 1
66015: PUSH
66016: LD_INT 0
66018: PUSH
66019: EMPTY
66020: LIST
66021: LIST
66022: PUSH
66023: LD_INT 1
66025: PUSH
66026: LD_INT 1
66028: PUSH
66029: EMPTY
66030: LIST
66031: LIST
66032: PUSH
66033: LD_INT 0
66035: PUSH
66036: LD_INT 1
66038: PUSH
66039: EMPTY
66040: LIST
66041: LIST
66042: PUSH
66043: LD_INT 1
66045: NEG
66046: PUSH
66047: LD_INT 0
66049: PUSH
66050: EMPTY
66051: LIST
66052: LIST
66053: PUSH
66054: LD_INT 1
66056: NEG
66057: PUSH
66058: LD_INT 1
66060: NEG
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 1
66068: NEG
66069: PUSH
66070: LD_INT 2
66072: NEG
66073: PUSH
66074: EMPTY
66075: LIST
66076: LIST
66077: PUSH
66078: LD_INT 0
66080: PUSH
66081: LD_INT 2
66083: NEG
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 1
66091: PUSH
66092: LD_INT 1
66094: NEG
66095: PUSH
66096: EMPTY
66097: LIST
66098: LIST
66099: PUSH
66100: LD_INT 2
66102: PUSH
66103: LD_INT 0
66105: PUSH
66106: EMPTY
66107: LIST
66108: LIST
66109: PUSH
66110: LD_INT 2
66112: PUSH
66113: LD_INT 1
66115: PUSH
66116: EMPTY
66117: LIST
66118: LIST
66119: PUSH
66120: LD_INT 2
66122: PUSH
66123: LD_INT 2
66125: PUSH
66126: EMPTY
66127: LIST
66128: LIST
66129: PUSH
66130: LD_INT 1
66132: PUSH
66133: LD_INT 2
66135: PUSH
66136: EMPTY
66137: LIST
66138: LIST
66139: PUSH
66140: LD_INT 0
66142: PUSH
66143: LD_INT 2
66145: PUSH
66146: EMPTY
66147: LIST
66148: LIST
66149: PUSH
66150: LD_INT 1
66152: NEG
66153: PUSH
66154: LD_INT 1
66156: PUSH
66157: EMPTY
66158: LIST
66159: LIST
66160: PUSH
66161: LD_INT 2
66163: NEG
66164: PUSH
66165: LD_INT 0
66167: PUSH
66168: EMPTY
66169: LIST
66170: LIST
66171: PUSH
66172: LD_INT 2
66174: NEG
66175: PUSH
66176: LD_INT 1
66178: NEG
66179: PUSH
66180: EMPTY
66181: LIST
66182: LIST
66183: PUSH
66184: LD_INT 2
66186: NEG
66187: PUSH
66188: LD_INT 2
66190: NEG
66191: PUSH
66192: EMPTY
66193: LIST
66194: LIST
66195: PUSH
66196: EMPTY
66197: LIST
66198: LIST
66199: LIST
66200: LIST
66201: LIST
66202: LIST
66203: LIST
66204: LIST
66205: LIST
66206: LIST
66207: LIST
66208: LIST
66209: LIST
66210: LIST
66211: LIST
66212: LIST
66213: LIST
66214: LIST
66215: LIST
66216: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66217: LD_ADDR_VAR 0 20
66221: PUSH
66222: LD_INT 0
66224: PUSH
66225: LD_INT 0
66227: PUSH
66228: EMPTY
66229: LIST
66230: LIST
66231: PUSH
66232: LD_INT 0
66234: PUSH
66235: LD_INT 1
66237: NEG
66238: PUSH
66239: EMPTY
66240: LIST
66241: LIST
66242: PUSH
66243: LD_INT 1
66245: PUSH
66246: LD_INT 0
66248: PUSH
66249: EMPTY
66250: LIST
66251: LIST
66252: PUSH
66253: LD_INT 1
66255: PUSH
66256: LD_INT 1
66258: PUSH
66259: EMPTY
66260: LIST
66261: LIST
66262: PUSH
66263: LD_INT 0
66265: PUSH
66266: LD_INT 1
66268: PUSH
66269: EMPTY
66270: LIST
66271: LIST
66272: PUSH
66273: LD_INT 1
66275: NEG
66276: PUSH
66277: LD_INT 0
66279: PUSH
66280: EMPTY
66281: LIST
66282: LIST
66283: PUSH
66284: LD_INT 1
66286: NEG
66287: PUSH
66288: LD_INT 1
66290: NEG
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 1
66298: NEG
66299: PUSH
66300: LD_INT 2
66302: NEG
66303: PUSH
66304: EMPTY
66305: LIST
66306: LIST
66307: PUSH
66308: LD_INT 0
66310: PUSH
66311: LD_INT 2
66313: NEG
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 1
66321: PUSH
66322: LD_INT 1
66324: NEG
66325: PUSH
66326: EMPTY
66327: LIST
66328: LIST
66329: PUSH
66330: LD_INT 2
66332: PUSH
66333: LD_INT 0
66335: PUSH
66336: EMPTY
66337: LIST
66338: LIST
66339: PUSH
66340: LD_INT 2
66342: PUSH
66343: LD_INT 1
66345: PUSH
66346: EMPTY
66347: LIST
66348: LIST
66349: PUSH
66350: LD_INT 2
66352: PUSH
66353: LD_INT 2
66355: PUSH
66356: EMPTY
66357: LIST
66358: LIST
66359: PUSH
66360: LD_INT 1
66362: PUSH
66363: LD_INT 2
66365: PUSH
66366: EMPTY
66367: LIST
66368: LIST
66369: PUSH
66370: LD_INT 0
66372: PUSH
66373: LD_INT 2
66375: PUSH
66376: EMPTY
66377: LIST
66378: LIST
66379: PUSH
66380: LD_INT 1
66382: NEG
66383: PUSH
66384: LD_INT 1
66386: PUSH
66387: EMPTY
66388: LIST
66389: LIST
66390: PUSH
66391: LD_INT 2
66393: NEG
66394: PUSH
66395: LD_INT 0
66397: PUSH
66398: EMPTY
66399: LIST
66400: LIST
66401: PUSH
66402: LD_INT 2
66404: NEG
66405: PUSH
66406: LD_INT 1
66408: NEG
66409: PUSH
66410: EMPTY
66411: LIST
66412: LIST
66413: PUSH
66414: LD_INT 2
66416: NEG
66417: PUSH
66418: LD_INT 2
66420: NEG
66421: PUSH
66422: EMPTY
66423: LIST
66424: LIST
66425: PUSH
66426: EMPTY
66427: LIST
66428: LIST
66429: LIST
66430: LIST
66431: LIST
66432: LIST
66433: LIST
66434: LIST
66435: LIST
66436: LIST
66437: LIST
66438: LIST
66439: LIST
66440: LIST
66441: LIST
66442: LIST
66443: LIST
66444: LIST
66445: LIST
66446: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66447: LD_ADDR_VAR 0 21
66451: PUSH
66452: LD_INT 0
66454: PUSH
66455: LD_INT 0
66457: PUSH
66458: EMPTY
66459: LIST
66460: LIST
66461: PUSH
66462: LD_INT 0
66464: PUSH
66465: LD_INT 1
66467: NEG
66468: PUSH
66469: EMPTY
66470: LIST
66471: LIST
66472: PUSH
66473: LD_INT 1
66475: PUSH
66476: LD_INT 0
66478: PUSH
66479: EMPTY
66480: LIST
66481: LIST
66482: PUSH
66483: LD_INT 1
66485: PUSH
66486: LD_INT 1
66488: PUSH
66489: EMPTY
66490: LIST
66491: LIST
66492: PUSH
66493: LD_INT 0
66495: PUSH
66496: LD_INT 1
66498: PUSH
66499: EMPTY
66500: LIST
66501: LIST
66502: PUSH
66503: LD_INT 1
66505: NEG
66506: PUSH
66507: LD_INT 0
66509: PUSH
66510: EMPTY
66511: LIST
66512: LIST
66513: PUSH
66514: LD_INT 1
66516: NEG
66517: PUSH
66518: LD_INT 1
66520: NEG
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 1
66528: NEG
66529: PUSH
66530: LD_INT 2
66532: NEG
66533: PUSH
66534: EMPTY
66535: LIST
66536: LIST
66537: PUSH
66538: LD_INT 0
66540: PUSH
66541: LD_INT 2
66543: NEG
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 1
66551: PUSH
66552: LD_INT 1
66554: NEG
66555: PUSH
66556: EMPTY
66557: LIST
66558: LIST
66559: PUSH
66560: LD_INT 2
66562: PUSH
66563: LD_INT 0
66565: PUSH
66566: EMPTY
66567: LIST
66568: LIST
66569: PUSH
66570: LD_INT 2
66572: PUSH
66573: LD_INT 1
66575: PUSH
66576: EMPTY
66577: LIST
66578: LIST
66579: PUSH
66580: LD_INT 2
66582: PUSH
66583: LD_INT 2
66585: PUSH
66586: EMPTY
66587: LIST
66588: LIST
66589: PUSH
66590: LD_INT 1
66592: PUSH
66593: LD_INT 2
66595: PUSH
66596: EMPTY
66597: LIST
66598: LIST
66599: PUSH
66600: LD_INT 0
66602: PUSH
66603: LD_INT 2
66605: PUSH
66606: EMPTY
66607: LIST
66608: LIST
66609: PUSH
66610: LD_INT 1
66612: NEG
66613: PUSH
66614: LD_INT 1
66616: PUSH
66617: EMPTY
66618: LIST
66619: LIST
66620: PUSH
66621: LD_INT 2
66623: NEG
66624: PUSH
66625: LD_INT 0
66627: PUSH
66628: EMPTY
66629: LIST
66630: LIST
66631: PUSH
66632: LD_INT 2
66634: NEG
66635: PUSH
66636: LD_INT 1
66638: NEG
66639: PUSH
66640: EMPTY
66641: LIST
66642: LIST
66643: PUSH
66644: LD_INT 2
66646: NEG
66647: PUSH
66648: LD_INT 2
66650: NEG
66651: PUSH
66652: EMPTY
66653: LIST
66654: LIST
66655: PUSH
66656: EMPTY
66657: LIST
66658: LIST
66659: LIST
66660: LIST
66661: LIST
66662: LIST
66663: LIST
66664: LIST
66665: LIST
66666: LIST
66667: LIST
66668: LIST
66669: LIST
66670: LIST
66671: LIST
66672: LIST
66673: LIST
66674: LIST
66675: LIST
66676: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66677: LD_ADDR_VAR 0 22
66681: PUSH
66682: LD_INT 0
66684: PUSH
66685: LD_INT 0
66687: PUSH
66688: EMPTY
66689: LIST
66690: LIST
66691: PUSH
66692: LD_INT 0
66694: PUSH
66695: LD_INT 1
66697: NEG
66698: PUSH
66699: EMPTY
66700: LIST
66701: LIST
66702: PUSH
66703: LD_INT 1
66705: PUSH
66706: LD_INT 0
66708: PUSH
66709: EMPTY
66710: LIST
66711: LIST
66712: PUSH
66713: LD_INT 1
66715: PUSH
66716: LD_INT 1
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 0
66725: PUSH
66726: LD_INT 1
66728: PUSH
66729: EMPTY
66730: LIST
66731: LIST
66732: PUSH
66733: LD_INT 1
66735: NEG
66736: PUSH
66737: LD_INT 0
66739: PUSH
66740: EMPTY
66741: LIST
66742: LIST
66743: PUSH
66744: LD_INT 1
66746: NEG
66747: PUSH
66748: LD_INT 1
66750: NEG
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 1
66758: NEG
66759: PUSH
66760: LD_INT 2
66762: NEG
66763: PUSH
66764: EMPTY
66765: LIST
66766: LIST
66767: PUSH
66768: LD_INT 0
66770: PUSH
66771: LD_INT 2
66773: NEG
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 1
66781: PUSH
66782: LD_INT 1
66784: NEG
66785: PUSH
66786: EMPTY
66787: LIST
66788: LIST
66789: PUSH
66790: LD_INT 2
66792: PUSH
66793: LD_INT 0
66795: PUSH
66796: EMPTY
66797: LIST
66798: LIST
66799: PUSH
66800: LD_INT 2
66802: PUSH
66803: LD_INT 1
66805: PUSH
66806: EMPTY
66807: LIST
66808: LIST
66809: PUSH
66810: LD_INT 2
66812: PUSH
66813: LD_INT 2
66815: PUSH
66816: EMPTY
66817: LIST
66818: LIST
66819: PUSH
66820: LD_INT 1
66822: PUSH
66823: LD_INT 2
66825: PUSH
66826: EMPTY
66827: LIST
66828: LIST
66829: PUSH
66830: LD_INT 0
66832: PUSH
66833: LD_INT 2
66835: PUSH
66836: EMPTY
66837: LIST
66838: LIST
66839: PUSH
66840: LD_INT 1
66842: NEG
66843: PUSH
66844: LD_INT 1
66846: PUSH
66847: EMPTY
66848: LIST
66849: LIST
66850: PUSH
66851: LD_INT 2
66853: NEG
66854: PUSH
66855: LD_INT 0
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 2
66864: NEG
66865: PUSH
66866: LD_INT 1
66868: NEG
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 2
66876: NEG
66877: PUSH
66878: LD_INT 2
66880: NEG
66881: PUSH
66882: EMPTY
66883: LIST
66884: LIST
66885: PUSH
66886: EMPTY
66887: LIST
66888: LIST
66889: LIST
66890: LIST
66891: LIST
66892: LIST
66893: LIST
66894: LIST
66895: LIST
66896: LIST
66897: LIST
66898: LIST
66899: LIST
66900: LIST
66901: LIST
66902: LIST
66903: LIST
66904: LIST
66905: LIST
66906: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
66907: LD_ADDR_VAR 0 23
66911: PUSH
66912: LD_INT 0
66914: PUSH
66915: LD_INT 0
66917: PUSH
66918: EMPTY
66919: LIST
66920: LIST
66921: PUSH
66922: LD_INT 0
66924: PUSH
66925: LD_INT 1
66927: NEG
66928: PUSH
66929: EMPTY
66930: LIST
66931: LIST
66932: PUSH
66933: LD_INT 1
66935: PUSH
66936: LD_INT 0
66938: PUSH
66939: EMPTY
66940: LIST
66941: LIST
66942: PUSH
66943: LD_INT 1
66945: PUSH
66946: LD_INT 1
66948: PUSH
66949: EMPTY
66950: LIST
66951: LIST
66952: PUSH
66953: LD_INT 0
66955: PUSH
66956: LD_INT 1
66958: PUSH
66959: EMPTY
66960: LIST
66961: LIST
66962: PUSH
66963: LD_INT 1
66965: NEG
66966: PUSH
66967: LD_INT 0
66969: PUSH
66970: EMPTY
66971: LIST
66972: LIST
66973: PUSH
66974: LD_INT 1
66976: NEG
66977: PUSH
66978: LD_INT 1
66980: NEG
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 1
66988: NEG
66989: PUSH
66990: LD_INT 2
66992: NEG
66993: PUSH
66994: EMPTY
66995: LIST
66996: LIST
66997: PUSH
66998: LD_INT 0
67000: PUSH
67001: LD_INT 2
67003: NEG
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 1
67011: PUSH
67012: LD_INT 1
67014: NEG
67015: PUSH
67016: EMPTY
67017: LIST
67018: LIST
67019: PUSH
67020: LD_INT 2
67022: PUSH
67023: LD_INT 0
67025: PUSH
67026: EMPTY
67027: LIST
67028: LIST
67029: PUSH
67030: LD_INT 2
67032: PUSH
67033: LD_INT 1
67035: PUSH
67036: EMPTY
67037: LIST
67038: LIST
67039: PUSH
67040: LD_INT 2
67042: PUSH
67043: LD_INT 2
67045: PUSH
67046: EMPTY
67047: LIST
67048: LIST
67049: PUSH
67050: LD_INT 1
67052: PUSH
67053: LD_INT 2
67055: PUSH
67056: EMPTY
67057: LIST
67058: LIST
67059: PUSH
67060: LD_INT 0
67062: PUSH
67063: LD_INT 2
67065: PUSH
67066: EMPTY
67067: LIST
67068: LIST
67069: PUSH
67070: LD_INT 1
67072: NEG
67073: PUSH
67074: LD_INT 1
67076: PUSH
67077: EMPTY
67078: LIST
67079: LIST
67080: PUSH
67081: LD_INT 2
67083: NEG
67084: PUSH
67085: LD_INT 0
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: LD_INT 2
67094: NEG
67095: PUSH
67096: LD_INT 1
67098: NEG
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 2
67106: NEG
67107: PUSH
67108: LD_INT 2
67110: NEG
67111: PUSH
67112: EMPTY
67113: LIST
67114: LIST
67115: PUSH
67116: LD_INT 2
67118: NEG
67119: PUSH
67120: LD_INT 3
67122: NEG
67123: PUSH
67124: EMPTY
67125: LIST
67126: LIST
67127: PUSH
67128: LD_INT 1
67130: NEG
67131: PUSH
67132: LD_INT 3
67134: NEG
67135: PUSH
67136: EMPTY
67137: LIST
67138: LIST
67139: PUSH
67140: LD_INT 1
67142: PUSH
67143: LD_INT 2
67145: NEG
67146: PUSH
67147: EMPTY
67148: LIST
67149: LIST
67150: PUSH
67151: LD_INT 2
67153: PUSH
67154: LD_INT 1
67156: NEG
67157: PUSH
67158: EMPTY
67159: LIST
67160: LIST
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: LIST
67166: LIST
67167: LIST
67168: LIST
67169: LIST
67170: LIST
67171: LIST
67172: LIST
67173: LIST
67174: LIST
67175: LIST
67176: LIST
67177: LIST
67178: LIST
67179: LIST
67180: LIST
67181: LIST
67182: LIST
67183: LIST
67184: LIST
67185: LIST
67186: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
67187: LD_ADDR_VAR 0 24
67191: PUSH
67192: LD_INT 0
67194: PUSH
67195: LD_INT 0
67197: PUSH
67198: EMPTY
67199: LIST
67200: LIST
67201: PUSH
67202: LD_INT 0
67204: PUSH
67205: LD_INT 1
67207: NEG
67208: PUSH
67209: EMPTY
67210: LIST
67211: LIST
67212: PUSH
67213: LD_INT 1
67215: PUSH
67216: LD_INT 0
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: PUSH
67223: LD_INT 1
67225: PUSH
67226: LD_INT 1
67228: PUSH
67229: EMPTY
67230: LIST
67231: LIST
67232: PUSH
67233: LD_INT 0
67235: PUSH
67236: LD_INT 1
67238: PUSH
67239: EMPTY
67240: LIST
67241: LIST
67242: PUSH
67243: LD_INT 1
67245: NEG
67246: PUSH
67247: LD_INT 0
67249: PUSH
67250: EMPTY
67251: LIST
67252: LIST
67253: PUSH
67254: LD_INT 1
67256: NEG
67257: PUSH
67258: LD_INT 1
67260: NEG
67261: PUSH
67262: EMPTY
67263: LIST
67264: LIST
67265: PUSH
67266: LD_INT 1
67268: NEG
67269: PUSH
67270: LD_INT 2
67272: NEG
67273: PUSH
67274: EMPTY
67275: LIST
67276: LIST
67277: PUSH
67278: LD_INT 0
67280: PUSH
67281: LD_INT 2
67283: NEG
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 1
67291: PUSH
67292: LD_INT 1
67294: NEG
67295: PUSH
67296: EMPTY
67297: LIST
67298: LIST
67299: PUSH
67300: LD_INT 2
67302: PUSH
67303: LD_INT 0
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 2
67312: PUSH
67313: LD_INT 1
67315: PUSH
67316: EMPTY
67317: LIST
67318: LIST
67319: PUSH
67320: LD_INT 2
67322: PUSH
67323: LD_INT 2
67325: PUSH
67326: EMPTY
67327: LIST
67328: LIST
67329: PUSH
67330: LD_INT 1
67332: PUSH
67333: LD_INT 2
67335: PUSH
67336: EMPTY
67337: LIST
67338: LIST
67339: PUSH
67340: LD_INT 0
67342: PUSH
67343: LD_INT 2
67345: PUSH
67346: EMPTY
67347: LIST
67348: LIST
67349: PUSH
67350: LD_INT 1
67352: NEG
67353: PUSH
67354: LD_INT 1
67356: PUSH
67357: EMPTY
67358: LIST
67359: LIST
67360: PUSH
67361: LD_INT 2
67363: NEG
67364: PUSH
67365: LD_INT 0
67367: PUSH
67368: EMPTY
67369: LIST
67370: LIST
67371: PUSH
67372: LD_INT 2
67374: NEG
67375: PUSH
67376: LD_INT 1
67378: NEG
67379: PUSH
67380: EMPTY
67381: LIST
67382: LIST
67383: PUSH
67384: LD_INT 2
67386: NEG
67387: PUSH
67388: LD_INT 2
67390: NEG
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 1
67398: PUSH
67399: LD_INT 2
67401: NEG
67402: PUSH
67403: EMPTY
67404: LIST
67405: LIST
67406: PUSH
67407: LD_INT 2
67409: PUSH
67410: LD_INT 1
67412: NEG
67413: PUSH
67414: EMPTY
67415: LIST
67416: LIST
67417: PUSH
67418: LD_INT 3
67420: PUSH
67421: LD_INT 1
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 3
67430: PUSH
67431: LD_INT 2
67433: PUSH
67434: EMPTY
67435: LIST
67436: LIST
67437: PUSH
67438: EMPTY
67439: LIST
67440: LIST
67441: LIST
67442: LIST
67443: LIST
67444: LIST
67445: LIST
67446: LIST
67447: LIST
67448: LIST
67449: LIST
67450: LIST
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
67463: LD_ADDR_VAR 0 25
67467: PUSH
67468: LD_INT 0
67470: PUSH
67471: LD_INT 0
67473: PUSH
67474: EMPTY
67475: LIST
67476: LIST
67477: PUSH
67478: LD_INT 0
67480: PUSH
67481: LD_INT 1
67483: NEG
67484: PUSH
67485: EMPTY
67486: LIST
67487: LIST
67488: PUSH
67489: LD_INT 1
67491: PUSH
67492: LD_INT 0
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 1
67501: PUSH
67502: LD_INT 1
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 0
67511: PUSH
67512: LD_INT 1
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 1
67521: NEG
67522: PUSH
67523: LD_INT 0
67525: PUSH
67526: EMPTY
67527: LIST
67528: LIST
67529: PUSH
67530: LD_INT 1
67532: NEG
67533: PUSH
67534: LD_INT 1
67536: NEG
67537: PUSH
67538: EMPTY
67539: LIST
67540: LIST
67541: PUSH
67542: LD_INT 1
67544: NEG
67545: PUSH
67546: LD_INT 2
67548: NEG
67549: PUSH
67550: EMPTY
67551: LIST
67552: LIST
67553: PUSH
67554: LD_INT 0
67556: PUSH
67557: LD_INT 2
67559: NEG
67560: PUSH
67561: EMPTY
67562: LIST
67563: LIST
67564: PUSH
67565: LD_INT 1
67567: PUSH
67568: LD_INT 1
67570: NEG
67571: PUSH
67572: EMPTY
67573: LIST
67574: LIST
67575: PUSH
67576: LD_INT 2
67578: PUSH
67579: LD_INT 0
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 2
67588: PUSH
67589: LD_INT 1
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 2
67598: PUSH
67599: LD_INT 2
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 1
67608: PUSH
67609: LD_INT 2
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 0
67618: PUSH
67619: LD_INT 2
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 1
67628: NEG
67629: PUSH
67630: LD_INT 1
67632: PUSH
67633: EMPTY
67634: LIST
67635: LIST
67636: PUSH
67637: LD_INT 2
67639: NEG
67640: PUSH
67641: LD_INT 0
67643: PUSH
67644: EMPTY
67645: LIST
67646: LIST
67647: PUSH
67648: LD_INT 2
67650: NEG
67651: PUSH
67652: LD_INT 1
67654: NEG
67655: PUSH
67656: EMPTY
67657: LIST
67658: LIST
67659: PUSH
67660: LD_INT 2
67662: NEG
67663: PUSH
67664: LD_INT 2
67666: NEG
67667: PUSH
67668: EMPTY
67669: LIST
67670: LIST
67671: PUSH
67672: LD_INT 3
67674: PUSH
67675: LD_INT 1
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: LD_INT 3
67684: PUSH
67685: LD_INT 2
67687: PUSH
67688: EMPTY
67689: LIST
67690: LIST
67691: PUSH
67692: LD_INT 2
67694: PUSH
67695: LD_INT 3
67697: PUSH
67698: EMPTY
67699: LIST
67700: LIST
67701: PUSH
67702: LD_INT 1
67704: PUSH
67705: LD_INT 3
67707: PUSH
67708: EMPTY
67709: LIST
67710: LIST
67711: PUSH
67712: EMPTY
67713: LIST
67714: LIST
67715: LIST
67716: LIST
67717: LIST
67718: LIST
67719: LIST
67720: LIST
67721: LIST
67722: LIST
67723: LIST
67724: LIST
67725: LIST
67726: LIST
67727: LIST
67728: LIST
67729: LIST
67730: LIST
67731: LIST
67732: LIST
67733: LIST
67734: LIST
67735: LIST
67736: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
67737: LD_ADDR_VAR 0 26
67741: PUSH
67742: LD_INT 0
67744: PUSH
67745: LD_INT 0
67747: PUSH
67748: EMPTY
67749: LIST
67750: LIST
67751: PUSH
67752: LD_INT 0
67754: PUSH
67755: LD_INT 1
67757: NEG
67758: PUSH
67759: EMPTY
67760: LIST
67761: LIST
67762: PUSH
67763: LD_INT 1
67765: PUSH
67766: LD_INT 0
67768: PUSH
67769: EMPTY
67770: LIST
67771: LIST
67772: PUSH
67773: LD_INT 1
67775: PUSH
67776: LD_INT 1
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 0
67785: PUSH
67786: LD_INT 1
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 1
67795: NEG
67796: PUSH
67797: LD_INT 0
67799: PUSH
67800: EMPTY
67801: LIST
67802: LIST
67803: PUSH
67804: LD_INT 1
67806: NEG
67807: PUSH
67808: LD_INT 1
67810: NEG
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 1
67818: NEG
67819: PUSH
67820: LD_INT 2
67822: NEG
67823: PUSH
67824: EMPTY
67825: LIST
67826: LIST
67827: PUSH
67828: LD_INT 0
67830: PUSH
67831: LD_INT 2
67833: NEG
67834: PUSH
67835: EMPTY
67836: LIST
67837: LIST
67838: PUSH
67839: LD_INT 1
67841: PUSH
67842: LD_INT 1
67844: NEG
67845: PUSH
67846: EMPTY
67847: LIST
67848: LIST
67849: PUSH
67850: LD_INT 2
67852: PUSH
67853: LD_INT 0
67855: PUSH
67856: EMPTY
67857: LIST
67858: LIST
67859: PUSH
67860: LD_INT 2
67862: PUSH
67863: LD_INT 1
67865: PUSH
67866: EMPTY
67867: LIST
67868: LIST
67869: PUSH
67870: LD_INT 2
67872: PUSH
67873: LD_INT 2
67875: PUSH
67876: EMPTY
67877: LIST
67878: LIST
67879: PUSH
67880: LD_INT 1
67882: PUSH
67883: LD_INT 2
67885: PUSH
67886: EMPTY
67887: LIST
67888: LIST
67889: PUSH
67890: LD_INT 0
67892: PUSH
67893: LD_INT 2
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 1
67902: NEG
67903: PUSH
67904: LD_INT 1
67906: PUSH
67907: EMPTY
67908: LIST
67909: LIST
67910: PUSH
67911: LD_INT 2
67913: NEG
67914: PUSH
67915: LD_INT 0
67917: PUSH
67918: EMPTY
67919: LIST
67920: LIST
67921: PUSH
67922: LD_INT 2
67924: NEG
67925: PUSH
67926: LD_INT 1
67928: NEG
67929: PUSH
67930: EMPTY
67931: LIST
67932: LIST
67933: PUSH
67934: LD_INT 2
67936: NEG
67937: PUSH
67938: LD_INT 2
67940: NEG
67941: PUSH
67942: EMPTY
67943: LIST
67944: LIST
67945: PUSH
67946: LD_INT 2
67948: PUSH
67949: LD_INT 3
67951: PUSH
67952: EMPTY
67953: LIST
67954: LIST
67955: PUSH
67956: LD_INT 1
67958: PUSH
67959: LD_INT 3
67961: PUSH
67962: EMPTY
67963: LIST
67964: LIST
67965: PUSH
67966: LD_INT 1
67968: NEG
67969: PUSH
67970: LD_INT 2
67972: PUSH
67973: EMPTY
67974: LIST
67975: LIST
67976: PUSH
67977: LD_INT 2
67979: NEG
67980: PUSH
67981: LD_INT 1
67983: PUSH
67984: EMPTY
67985: LIST
67986: LIST
67987: PUSH
67988: EMPTY
67989: LIST
67990: LIST
67991: LIST
67992: LIST
67993: LIST
67994: LIST
67995: LIST
67996: LIST
67997: LIST
67998: LIST
67999: LIST
68000: LIST
68001: LIST
68002: LIST
68003: LIST
68004: LIST
68005: LIST
68006: LIST
68007: LIST
68008: LIST
68009: LIST
68010: LIST
68011: LIST
68012: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68013: LD_ADDR_VAR 0 27
68017: PUSH
68018: LD_INT 0
68020: PUSH
68021: LD_INT 0
68023: PUSH
68024: EMPTY
68025: LIST
68026: LIST
68027: PUSH
68028: LD_INT 0
68030: PUSH
68031: LD_INT 1
68033: NEG
68034: PUSH
68035: EMPTY
68036: LIST
68037: LIST
68038: PUSH
68039: LD_INT 1
68041: PUSH
68042: LD_INT 0
68044: PUSH
68045: EMPTY
68046: LIST
68047: LIST
68048: PUSH
68049: LD_INT 1
68051: PUSH
68052: LD_INT 1
68054: PUSH
68055: EMPTY
68056: LIST
68057: LIST
68058: PUSH
68059: LD_INT 0
68061: PUSH
68062: LD_INT 1
68064: PUSH
68065: EMPTY
68066: LIST
68067: LIST
68068: PUSH
68069: LD_INT 1
68071: NEG
68072: PUSH
68073: LD_INT 0
68075: PUSH
68076: EMPTY
68077: LIST
68078: LIST
68079: PUSH
68080: LD_INT 1
68082: NEG
68083: PUSH
68084: LD_INT 1
68086: NEG
68087: PUSH
68088: EMPTY
68089: LIST
68090: LIST
68091: PUSH
68092: LD_INT 1
68094: NEG
68095: PUSH
68096: LD_INT 2
68098: NEG
68099: PUSH
68100: EMPTY
68101: LIST
68102: LIST
68103: PUSH
68104: LD_INT 0
68106: PUSH
68107: LD_INT 2
68109: NEG
68110: PUSH
68111: EMPTY
68112: LIST
68113: LIST
68114: PUSH
68115: LD_INT 1
68117: PUSH
68118: LD_INT 1
68120: NEG
68121: PUSH
68122: EMPTY
68123: LIST
68124: LIST
68125: PUSH
68126: LD_INT 2
68128: PUSH
68129: LD_INT 0
68131: PUSH
68132: EMPTY
68133: LIST
68134: LIST
68135: PUSH
68136: LD_INT 2
68138: PUSH
68139: LD_INT 1
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: PUSH
68146: LD_INT 2
68148: PUSH
68149: LD_INT 2
68151: PUSH
68152: EMPTY
68153: LIST
68154: LIST
68155: PUSH
68156: LD_INT 1
68158: PUSH
68159: LD_INT 2
68161: PUSH
68162: EMPTY
68163: LIST
68164: LIST
68165: PUSH
68166: LD_INT 0
68168: PUSH
68169: LD_INT 2
68171: PUSH
68172: EMPTY
68173: LIST
68174: LIST
68175: PUSH
68176: LD_INT 1
68178: NEG
68179: PUSH
68180: LD_INT 1
68182: PUSH
68183: EMPTY
68184: LIST
68185: LIST
68186: PUSH
68187: LD_INT 2
68189: NEG
68190: PUSH
68191: LD_INT 0
68193: PUSH
68194: EMPTY
68195: LIST
68196: LIST
68197: PUSH
68198: LD_INT 2
68200: NEG
68201: PUSH
68202: LD_INT 1
68204: NEG
68205: PUSH
68206: EMPTY
68207: LIST
68208: LIST
68209: PUSH
68210: LD_INT 2
68212: NEG
68213: PUSH
68214: LD_INT 2
68216: NEG
68217: PUSH
68218: EMPTY
68219: LIST
68220: LIST
68221: PUSH
68222: LD_INT 1
68224: NEG
68225: PUSH
68226: LD_INT 2
68228: PUSH
68229: EMPTY
68230: LIST
68231: LIST
68232: PUSH
68233: LD_INT 2
68235: NEG
68236: PUSH
68237: LD_INT 1
68239: PUSH
68240: EMPTY
68241: LIST
68242: LIST
68243: PUSH
68244: LD_INT 3
68246: NEG
68247: PUSH
68248: LD_INT 1
68250: NEG
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: LD_INT 3
68258: NEG
68259: PUSH
68260: LD_INT 2
68262: NEG
68263: PUSH
68264: EMPTY
68265: LIST
68266: LIST
68267: PUSH
68268: EMPTY
68269: LIST
68270: LIST
68271: LIST
68272: LIST
68273: LIST
68274: LIST
68275: LIST
68276: LIST
68277: LIST
68278: LIST
68279: LIST
68280: LIST
68281: LIST
68282: LIST
68283: LIST
68284: LIST
68285: LIST
68286: LIST
68287: LIST
68288: LIST
68289: LIST
68290: LIST
68291: LIST
68292: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68293: LD_ADDR_VAR 0 28
68297: PUSH
68298: LD_INT 0
68300: PUSH
68301: LD_INT 0
68303: PUSH
68304: EMPTY
68305: LIST
68306: LIST
68307: PUSH
68308: LD_INT 0
68310: PUSH
68311: LD_INT 1
68313: NEG
68314: PUSH
68315: EMPTY
68316: LIST
68317: LIST
68318: PUSH
68319: LD_INT 1
68321: PUSH
68322: LD_INT 0
68324: PUSH
68325: EMPTY
68326: LIST
68327: LIST
68328: PUSH
68329: LD_INT 1
68331: PUSH
68332: LD_INT 1
68334: PUSH
68335: EMPTY
68336: LIST
68337: LIST
68338: PUSH
68339: LD_INT 0
68341: PUSH
68342: LD_INT 1
68344: PUSH
68345: EMPTY
68346: LIST
68347: LIST
68348: PUSH
68349: LD_INT 1
68351: NEG
68352: PUSH
68353: LD_INT 0
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 1
68362: NEG
68363: PUSH
68364: LD_INT 1
68366: NEG
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 1
68374: NEG
68375: PUSH
68376: LD_INT 2
68378: NEG
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 0
68386: PUSH
68387: LD_INT 2
68389: NEG
68390: PUSH
68391: EMPTY
68392: LIST
68393: LIST
68394: PUSH
68395: LD_INT 1
68397: PUSH
68398: LD_INT 1
68400: NEG
68401: PUSH
68402: EMPTY
68403: LIST
68404: LIST
68405: PUSH
68406: LD_INT 2
68408: PUSH
68409: LD_INT 0
68411: PUSH
68412: EMPTY
68413: LIST
68414: LIST
68415: PUSH
68416: LD_INT 2
68418: PUSH
68419: LD_INT 1
68421: PUSH
68422: EMPTY
68423: LIST
68424: LIST
68425: PUSH
68426: LD_INT 2
68428: PUSH
68429: LD_INT 2
68431: PUSH
68432: EMPTY
68433: LIST
68434: LIST
68435: PUSH
68436: LD_INT 1
68438: PUSH
68439: LD_INT 2
68441: PUSH
68442: EMPTY
68443: LIST
68444: LIST
68445: PUSH
68446: LD_INT 0
68448: PUSH
68449: LD_INT 2
68451: PUSH
68452: EMPTY
68453: LIST
68454: LIST
68455: PUSH
68456: LD_INT 1
68458: NEG
68459: PUSH
68460: LD_INT 1
68462: PUSH
68463: EMPTY
68464: LIST
68465: LIST
68466: PUSH
68467: LD_INT 2
68469: NEG
68470: PUSH
68471: LD_INT 0
68473: PUSH
68474: EMPTY
68475: LIST
68476: LIST
68477: PUSH
68478: LD_INT 2
68480: NEG
68481: PUSH
68482: LD_INT 1
68484: NEG
68485: PUSH
68486: EMPTY
68487: LIST
68488: LIST
68489: PUSH
68490: LD_INT 2
68492: NEG
68493: PUSH
68494: LD_INT 2
68496: NEG
68497: PUSH
68498: EMPTY
68499: LIST
68500: LIST
68501: PUSH
68502: LD_INT 2
68504: NEG
68505: PUSH
68506: LD_INT 3
68508: NEG
68509: PUSH
68510: EMPTY
68511: LIST
68512: LIST
68513: PUSH
68514: LD_INT 1
68516: NEG
68517: PUSH
68518: LD_INT 3
68520: NEG
68521: PUSH
68522: EMPTY
68523: LIST
68524: LIST
68525: PUSH
68526: LD_INT 3
68528: NEG
68529: PUSH
68530: LD_INT 1
68532: NEG
68533: PUSH
68534: EMPTY
68535: LIST
68536: LIST
68537: PUSH
68538: LD_INT 3
68540: NEG
68541: PUSH
68542: LD_INT 2
68544: NEG
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: EMPTY
68551: LIST
68552: LIST
68553: LIST
68554: LIST
68555: LIST
68556: LIST
68557: LIST
68558: LIST
68559: LIST
68560: LIST
68561: LIST
68562: LIST
68563: LIST
68564: LIST
68565: LIST
68566: LIST
68567: LIST
68568: LIST
68569: LIST
68570: LIST
68571: LIST
68572: LIST
68573: LIST
68574: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68575: LD_ADDR_VAR 0 29
68579: PUSH
68580: LD_INT 0
68582: PUSH
68583: LD_INT 0
68585: PUSH
68586: EMPTY
68587: LIST
68588: LIST
68589: PUSH
68590: LD_INT 0
68592: PUSH
68593: LD_INT 1
68595: NEG
68596: PUSH
68597: EMPTY
68598: LIST
68599: LIST
68600: PUSH
68601: LD_INT 1
68603: PUSH
68604: LD_INT 0
68606: PUSH
68607: EMPTY
68608: LIST
68609: LIST
68610: PUSH
68611: LD_INT 1
68613: PUSH
68614: LD_INT 1
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 0
68623: PUSH
68624: LD_INT 1
68626: PUSH
68627: EMPTY
68628: LIST
68629: LIST
68630: PUSH
68631: LD_INT 1
68633: NEG
68634: PUSH
68635: LD_INT 0
68637: PUSH
68638: EMPTY
68639: LIST
68640: LIST
68641: PUSH
68642: LD_INT 1
68644: NEG
68645: PUSH
68646: LD_INT 1
68648: NEG
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: PUSH
68654: LD_INT 1
68656: NEG
68657: PUSH
68658: LD_INT 2
68660: NEG
68661: PUSH
68662: EMPTY
68663: LIST
68664: LIST
68665: PUSH
68666: LD_INT 0
68668: PUSH
68669: LD_INT 2
68671: NEG
68672: PUSH
68673: EMPTY
68674: LIST
68675: LIST
68676: PUSH
68677: LD_INT 1
68679: PUSH
68680: LD_INT 1
68682: NEG
68683: PUSH
68684: EMPTY
68685: LIST
68686: LIST
68687: PUSH
68688: LD_INT 2
68690: PUSH
68691: LD_INT 0
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: PUSH
68698: LD_INT 2
68700: PUSH
68701: LD_INT 1
68703: PUSH
68704: EMPTY
68705: LIST
68706: LIST
68707: PUSH
68708: LD_INT 1
68710: PUSH
68711: LD_INT 2
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 0
68720: PUSH
68721: LD_INT 2
68723: PUSH
68724: EMPTY
68725: LIST
68726: LIST
68727: PUSH
68728: LD_INT 1
68730: NEG
68731: PUSH
68732: LD_INT 1
68734: PUSH
68735: EMPTY
68736: LIST
68737: LIST
68738: PUSH
68739: LD_INT 2
68741: NEG
68742: PUSH
68743: LD_INT 1
68745: NEG
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: LD_INT 2
68753: NEG
68754: PUSH
68755: LD_INT 2
68757: NEG
68758: PUSH
68759: EMPTY
68760: LIST
68761: LIST
68762: PUSH
68763: LD_INT 2
68765: NEG
68766: PUSH
68767: LD_INT 3
68769: NEG
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 2
68777: PUSH
68778: LD_INT 1
68780: NEG
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 3
68788: PUSH
68789: LD_INT 1
68791: PUSH
68792: EMPTY
68793: LIST
68794: LIST
68795: PUSH
68796: LD_INT 1
68798: PUSH
68799: LD_INT 3
68801: PUSH
68802: EMPTY
68803: LIST
68804: LIST
68805: PUSH
68806: LD_INT 1
68808: NEG
68809: PUSH
68810: LD_INT 2
68812: PUSH
68813: EMPTY
68814: LIST
68815: LIST
68816: PUSH
68817: LD_INT 3
68819: NEG
68820: PUSH
68821: LD_INT 2
68823: NEG
68824: PUSH
68825: EMPTY
68826: LIST
68827: LIST
68828: PUSH
68829: EMPTY
68830: LIST
68831: LIST
68832: LIST
68833: LIST
68834: LIST
68835: LIST
68836: LIST
68837: LIST
68838: LIST
68839: LIST
68840: LIST
68841: LIST
68842: LIST
68843: LIST
68844: LIST
68845: LIST
68846: LIST
68847: LIST
68848: LIST
68849: LIST
68850: LIST
68851: LIST
68852: LIST
68853: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
68854: LD_ADDR_VAR 0 30
68858: PUSH
68859: LD_INT 0
68861: PUSH
68862: LD_INT 0
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: LD_INT 0
68871: PUSH
68872: LD_INT 1
68874: NEG
68875: PUSH
68876: EMPTY
68877: LIST
68878: LIST
68879: PUSH
68880: LD_INT 1
68882: PUSH
68883: LD_INT 0
68885: PUSH
68886: EMPTY
68887: LIST
68888: LIST
68889: PUSH
68890: LD_INT 1
68892: PUSH
68893: LD_INT 1
68895: PUSH
68896: EMPTY
68897: LIST
68898: LIST
68899: PUSH
68900: LD_INT 0
68902: PUSH
68903: LD_INT 1
68905: PUSH
68906: EMPTY
68907: LIST
68908: LIST
68909: PUSH
68910: LD_INT 1
68912: NEG
68913: PUSH
68914: LD_INT 0
68916: PUSH
68917: EMPTY
68918: LIST
68919: LIST
68920: PUSH
68921: LD_INT 1
68923: NEG
68924: PUSH
68925: LD_INT 1
68927: NEG
68928: PUSH
68929: EMPTY
68930: LIST
68931: LIST
68932: PUSH
68933: LD_INT 1
68935: NEG
68936: PUSH
68937: LD_INT 2
68939: NEG
68940: PUSH
68941: EMPTY
68942: LIST
68943: LIST
68944: PUSH
68945: LD_INT 0
68947: PUSH
68948: LD_INT 2
68950: NEG
68951: PUSH
68952: EMPTY
68953: LIST
68954: LIST
68955: PUSH
68956: LD_INT 1
68958: PUSH
68959: LD_INT 1
68961: NEG
68962: PUSH
68963: EMPTY
68964: LIST
68965: LIST
68966: PUSH
68967: LD_INT 2
68969: PUSH
68970: LD_INT 0
68972: PUSH
68973: EMPTY
68974: LIST
68975: LIST
68976: PUSH
68977: LD_INT 2
68979: PUSH
68980: LD_INT 1
68982: PUSH
68983: EMPTY
68984: LIST
68985: LIST
68986: PUSH
68987: LD_INT 2
68989: PUSH
68990: LD_INT 2
68992: PUSH
68993: EMPTY
68994: LIST
68995: LIST
68996: PUSH
68997: LD_INT 1
68999: PUSH
69000: LD_INT 2
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 1
69009: NEG
69010: PUSH
69011: LD_INT 1
69013: PUSH
69014: EMPTY
69015: LIST
69016: LIST
69017: PUSH
69018: LD_INT 2
69020: NEG
69021: PUSH
69022: LD_INT 0
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 2
69031: NEG
69032: PUSH
69033: LD_INT 1
69035: NEG
69036: PUSH
69037: EMPTY
69038: LIST
69039: LIST
69040: PUSH
69041: LD_INT 1
69043: NEG
69044: PUSH
69045: LD_INT 3
69047: NEG
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: LD_INT 1
69055: PUSH
69056: LD_INT 2
69058: NEG
69059: PUSH
69060: EMPTY
69061: LIST
69062: LIST
69063: PUSH
69064: LD_INT 3
69066: PUSH
69067: LD_INT 2
69069: PUSH
69070: EMPTY
69071: LIST
69072: LIST
69073: PUSH
69074: LD_INT 2
69076: PUSH
69077: LD_INT 3
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 2
69086: NEG
69087: PUSH
69088: LD_INT 1
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 3
69097: NEG
69098: PUSH
69099: LD_INT 1
69101: NEG
69102: PUSH
69103: EMPTY
69104: LIST
69105: LIST
69106: PUSH
69107: EMPTY
69108: LIST
69109: LIST
69110: LIST
69111: LIST
69112: LIST
69113: LIST
69114: LIST
69115: LIST
69116: LIST
69117: LIST
69118: LIST
69119: LIST
69120: LIST
69121: LIST
69122: LIST
69123: LIST
69124: LIST
69125: LIST
69126: LIST
69127: LIST
69128: LIST
69129: LIST
69130: LIST
69131: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
69132: LD_ADDR_VAR 0 31
69136: PUSH
69137: LD_INT 0
69139: PUSH
69140: LD_INT 0
69142: PUSH
69143: EMPTY
69144: LIST
69145: LIST
69146: PUSH
69147: LD_INT 0
69149: PUSH
69150: LD_INT 1
69152: NEG
69153: PUSH
69154: EMPTY
69155: LIST
69156: LIST
69157: PUSH
69158: LD_INT 1
69160: PUSH
69161: LD_INT 0
69163: PUSH
69164: EMPTY
69165: LIST
69166: LIST
69167: PUSH
69168: LD_INT 1
69170: PUSH
69171: LD_INT 1
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 0
69180: PUSH
69181: LD_INT 1
69183: PUSH
69184: EMPTY
69185: LIST
69186: LIST
69187: PUSH
69188: LD_INT 1
69190: NEG
69191: PUSH
69192: LD_INT 0
69194: PUSH
69195: EMPTY
69196: LIST
69197: LIST
69198: PUSH
69199: LD_INT 1
69201: NEG
69202: PUSH
69203: LD_INT 1
69205: NEG
69206: PUSH
69207: EMPTY
69208: LIST
69209: LIST
69210: PUSH
69211: LD_INT 1
69213: NEG
69214: PUSH
69215: LD_INT 2
69217: NEG
69218: PUSH
69219: EMPTY
69220: LIST
69221: LIST
69222: PUSH
69223: LD_INT 1
69225: PUSH
69226: LD_INT 1
69228: NEG
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 2
69236: PUSH
69237: LD_INT 0
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: LD_INT 2
69246: PUSH
69247: LD_INT 1
69249: PUSH
69250: EMPTY
69251: LIST
69252: LIST
69253: PUSH
69254: LD_INT 2
69256: PUSH
69257: LD_INT 2
69259: PUSH
69260: EMPTY
69261: LIST
69262: LIST
69263: PUSH
69264: LD_INT 1
69266: PUSH
69267: LD_INT 2
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: LD_INT 0
69276: PUSH
69277: LD_INT 2
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 1
69286: NEG
69287: PUSH
69288: LD_INT 1
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 2
69297: NEG
69298: PUSH
69299: LD_INT 1
69301: NEG
69302: PUSH
69303: EMPTY
69304: LIST
69305: LIST
69306: PUSH
69307: LD_INT 2
69309: NEG
69310: PUSH
69311: LD_INT 2
69313: NEG
69314: PUSH
69315: EMPTY
69316: LIST
69317: LIST
69318: PUSH
69319: LD_INT 2
69321: NEG
69322: PUSH
69323: LD_INT 3
69325: NEG
69326: PUSH
69327: EMPTY
69328: LIST
69329: LIST
69330: PUSH
69331: LD_INT 2
69333: PUSH
69334: LD_INT 1
69336: NEG
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 3
69344: PUSH
69345: LD_INT 1
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: PUSH
69352: LD_INT 1
69354: PUSH
69355: LD_INT 3
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: LD_INT 1
69364: NEG
69365: PUSH
69366: LD_INT 2
69368: PUSH
69369: EMPTY
69370: LIST
69371: LIST
69372: PUSH
69373: LD_INT 3
69375: NEG
69376: PUSH
69377: LD_INT 2
69379: NEG
69380: PUSH
69381: EMPTY
69382: LIST
69383: LIST
69384: PUSH
69385: EMPTY
69386: LIST
69387: LIST
69388: LIST
69389: LIST
69390: LIST
69391: LIST
69392: LIST
69393: LIST
69394: LIST
69395: LIST
69396: LIST
69397: LIST
69398: LIST
69399: LIST
69400: LIST
69401: LIST
69402: LIST
69403: LIST
69404: LIST
69405: LIST
69406: LIST
69407: LIST
69408: LIST
69409: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69410: LD_ADDR_VAR 0 32
69414: PUSH
69415: LD_INT 0
69417: PUSH
69418: LD_INT 0
69420: PUSH
69421: EMPTY
69422: LIST
69423: LIST
69424: PUSH
69425: LD_INT 0
69427: PUSH
69428: LD_INT 1
69430: NEG
69431: PUSH
69432: EMPTY
69433: LIST
69434: LIST
69435: PUSH
69436: LD_INT 1
69438: PUSH
69439: LD_INT 0
69441: PUSH
69442: EMPTY
69443: LIST
69444: LIST
69445: PUSH
69446: LD_INT 1
69448: PUSH
69449: LD_INT 1
69451: PUSH
69452: EMPTY
69453: LIST
69454: LIST
69455: PUSH
69456: LD_INT 0
69458: PUSH
69459: LD_INT 1
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 1
69468: NEG
69469: PUSH
69470: LD_INT 0
69472: PUSH
69473: EMPTY
69474: LIST
69475: LIST
69476: PUSH
69477: LD_INT 1
69479: NEG
69480: PUSH
69481: LD_INT 1
69483: NEG
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 1
69491: NEG
69492: PUSH
69493: LD_INT 2
69495: NEG
69496: PUSH
69497: EMPTY
69498: LIST
69499: LIST
69500: PUSH
69501: LD_INT 0
69503: PUSH
69504: LD_INT 2
69506: NEG
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: LD_INT 1
69514: PUSH
69515: LD_INT 1
69517: NEG
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 2
69525: PUSH
69526: LD_INT 1
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 2
69535: PUSH
69536: LD_INT 2
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 1
69545: PUSH
69546: LD_INT 2
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: LD_INT 0
69555: PUSH
69556: LD_INT 2
69558: PUSH
69559: EMPTY
69560: LIST
69561: LIST
69562: PUSH
69563: LD_INT 1
69565: NEG
69566: PUSH
69567: LD_INT 1
69569: PUSH
69570: EMPTY
69571: LIST
69572: LIST
69573: PUSH
69574: LD_INT 2
69576: NEG
69577: PUSH
69578: LD_INT 0
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 2
69587: NEG
69588: PUSH
69589: LD_INT 1
69591: NEG
69592: PUSH
69593: EMPTY
69594: LIST
69595: LIST
69596: PUSH
69597: LD_INT 1
69599: NEG
69600: PUSH
69601: LD_INT 3
69603: NEG
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 1
69611: PUSH
69612: LD_INT 2
69614: NEG
69615: PUSH
69616: EMPTY
69617: LIST
69618: LIST
69619: PUSH
69620: LD_INT 3
69622: PUSH
69623: LD_INT 2
69625: PUSH
69626: EMPTY
69627: LIST
69628: LIST
69629: PUSH
69630: LD_INT 2
69632: PUSH
69633: LD_INT 3
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 2
69642: NEG
69643: PUSH
69644: LD_INT 1
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 3
69653: NEG
69654: PUSH
69655: LD_INT 1
69657: NEG
69658: PUSH
69659: EMPTY
69660: LIST
69661: LIST
69662: PUSH
69663: EMPTY
69664: LIST
69665: LIST
69666: LIST
69667: LIST
69668: LIST
69669: LIST
69670: LIST
69671: LIST
69672: LIST
69673: LIST
69674: LIST
69675: LIST
69676: LIST
69677: LIST
69678: LIST
69679: LIST
69680: LIST
69681: LIST
69682: LIST
69683: LIST
69684: LIST
69685: LIST
69686: LIST
69687: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
69688: LD_ADDR_VAR 0 33
69692: PUSH
69693: LD_INT 0
69695: PUSH
69696: LD_INT 0
69698: PUSH
69699: EMPTY
69700: LIST
69701: LIST
69702: PUSH
69703: LD_INT 0
69705: PUSH
69706: LD_INT 1
69708: NEG
69709: PUSH
69710: EMPTY
69711: LIST
69712: LIST
69713: PUSH
69714: LD_INT 1
69716: PUSH
69717: LD_INT 0
69719: PUSH
69720: EMPTY
69721: LIST
69722: LIST
69723: PUSH
69724: LD_INT 1
69726: PUSH
69727: LD_INT 1
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: LD_INT 0
69736: PUSH
69737: LD_INT 1
69739: PUSH
69740: EMPTY
69741: LIST
69742: LIST
69743: PUSH
69744: LD_INT 1
69746: NEG
69747: PUSH
69748: LD_INT 0
69750: PUSH
69751: EMPTY
69752: LIST
69753: LIST
69754: PUSH
69755: LD_INT 1
69757: NEG
69758: PUSH
69759: LD_INT 1
69761: NEG
69762: PUSH
69763: EMPTY
69764: LIST
69765: LIST
69766: PUSH
69767: LD_INT 1
69769: NEG
69770: PUSH
69771: LD_INT 2
69773: NEG
69774: PUSH
69775: EMPTY
69776: LIST
69777: LIST
69778: PUSH
69779: LD_INT 1
69781: PUSH
69782: LD_INT 1
69784: NEG
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 2
69792: PUSH
69793: LD_INT 0
69795: PUSH
69796: EMPTY
69797: LIST
69798: LIST
69799: PUSH
69800: LD_INT 2
69802: PUSH
69803: LD_INT 1
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: PUSH
69810: LD_INT 1
69812: PUSH
69813: LD_INT 2
69815: PUSH
69816: EMPTY
69817: LIST
69818: LIST
69819: PUSH
69820: LD_INT 0
69822: PUSH
69823: LD_INT 2
69825: PUSH
69826: EMPTY
69827: LIST
69828: LIST
69829: PUSH
69830: LD_INT 1
69832: NEG
69833: PUSH
69834: LD_INT 1
69836: PUSH
69837: EMPTY
69838: LIST
69839: LIST
69840: PUSH
69841: LD_INT 2
69843: NEG
69844: PUSH
69845: LD_INT 0
69847: PUSH
69848: EMPTY
69849: LIST
69850: LIST
69851: PUSH
69852: LD_INT 2
69854: NEG
69855: PUSH
69856: LD_INT 1
69858: NEG
69859: PUSH
69860: EMPTY
69861: LIST
69862: LIST
69863: PUSH
69864: LD_INT 2
69866: NEG
69867: PUSH
69868: LD_INT 2
69870: NEG
69871: PUSH
69872: EMPTY
69873: LIST
69874: LIST
69875: PUSH
69876: LD_INT 2
69878: NEG
69879: PUSH
69880: LD_INT 3
69882: NEG
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PUSH
69888: LD_INT 2
69890: PUSH
69891: LD_INT 1
69893: NEG
69894: PUSH
69895: EMPTY
69896: LIST
69897: LIST
69898: PUSH
69899: LD_INT 3
69901: PUSH
69902: LD_INT 1
69904: PUSH
69905: EMPTY
69906: LIST
69907: LIST
69908: PUSH
69909: LD_INT 1
69911: PUSH
69912: LD_INT 3
69914: PUSH
69915: EMPTY
69916: LIST
69917: LIST
69918: PUSH
69919: LD_INT 1
69921: NEG
69922: PUSH
69923: LD_INT 2
69925: PUSH
69926: EMPTY
69927: LIST
69928: LIST
69929: PUSH
69930: LD_INT 3
69932: NEG
69933: PUSH
69934: LD_INT 2
69936: NEG
69937: PUSH
69938: EMPTY
69939: LIST
69940: LIST
69941: PUSH
69942: EMPTY
69943: LIST
69944: LIST
69945: LIST
69946: LIST
69947: LIST
69948: LIST
69949: LIST
69950: LIST
69951: LIST
69952: LIST
69953: LIST
69954: LIST
69955: LIST
69956: LIST
69957: LIST
69958: LIST
69959: LIST
69960: LIST
69961: LIST
69962: LIST
69963: LIST
69964: LIST
69965: LIST
69966: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69967: LD_ADDR_VAR 0 34
69971: PUSH
69972: LD_INT 0
69974: PUSH
69975: LD_INT 0
69977: PUSH
69978: EMPTY
69979: LIST
69980: LIST
69981: PUSH
69982: LD_INT 0
69984: PUSH
69985: LD_INT 1
69987: NEG
69988: PUSH
69989: EMPTY
69990: LIST
69991: LIST
69992: PUSH
69993: LD_INT 1
69995: PUSH
69996: LD_INT 0
69998: PUSH
69999: EMPTY
70000: LIST
70001: LIST
70002: PUSH
70003: LD_INT 1
70005: PUSH
70006: LD_INT 1
70008: PUSH
70009: EMPTY
70010: LIST
70011: LIST
70012: PUSH
70013: LD_INT 0
70015: PUSH
70016: LD_INT 1
70018: PUSH
70019: EMPTY
70020: LIST
70021: LIST
70022: PUSH
70023: LD_INT 1
70025: NEG
70026: PUSH
70027: LD_INT 0
70029: PUSH
70030: EMPTY
70031: LIST
70032: LIST
70033: PUSH
70034: LD_INT 1
70036: NEG
70037: PUSH
70038: LD_INT 1
70040: NEG
70041: PUSH
70042: EMPTY
70043: LIST
70044: LIST
70045: PUSH
70046: LD_INT 1
70048: NEG
70049: PUSH
70050: LD_INT 2
70052: NEG
70053: PUSH
70054: EMPTY
70055: LIST
70056: LIST
70057: PUSH
70058: LD_INT 0
70060: PUSH
70061: LD_INT 2
70063: NEG
70064: PUSH
70065: EMPTY
70066: LIST
70067: LIST
70068: PUSH
70069: LD_INT 1
70071: PUSH
70072: LD_INT 1
70074: NEG
70075: PUSH
70076: EMPTY
70077: LIST
70078: LIST
70079: PUSH
70080: LD_INT 2
70082: PUSH
70083: LD_INT 1
70085: PUSH
70086: EMPTY
70087: LIST
70088: LIST
70089: PUSH
70090: LD_INT 2
70092: PUSH
70093: LD_INT 2
70095: PUSH
70096: EMPTY
70097: LIST
70098: LIST
70099: PUSH
70100: LD_INT 1
70102: PUSH
70103: LD_INT 2
70105: PUSH
70106: EMPTY
70107: LIST
70108: LIST
70109: PUSH
70110: LD_INT 1
70112: NEG
70113: PUSH
70114: LD_INT 1
70116: PUSH
70117: EMPTY
70118: LIST
70119: LIST
70120: PUSH
70121: LD_INT 2
70123: NEG
70124: PUSH
70125: LD_INT 0
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 2
70134: NEG
70135: PUSH
70136: LD_INT 1
70138: NEG
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 2
70146: NEG
70147: PUSH
70148: LD_INT 2
70150: NEG
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 1
70158: NEG
70159: PUSH
70160: LD_INT 3
70162: NEG
70163: PUSH
70164: EMPTY
70165: LIST
70166: LIST
70167: PUSH
70168: LD_INT 1
70170: PUSH
70171: LD_INT 2
70173: NEG
70174: PUSH
70175: EMPTY
70176: LIST
70177: LIST
70178: PUSH
70179: LD_INT 3
70181: PUSH
70182: LD_INT 2
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 2
70191: PUSH
70192: LD_INT 3
70194: PUSH
70195: EMPTY
70196: LIST
70197: LIST
70198: PUSH
70199: LD_INT 2
70201: NEG
70202: PUSH
70203: LD_INT 1
70205: PUSH
70206: EMPTY
70207: LIST
70208: LIST
70209: PUSH
70210: LD_INT 3
70212: NEG
70213: PUSH
70214: LD_INT 1
70216: NEG
70217: PUSH
70218: EMPTY
70219: LIST
70220: LIST
70221: PUSH
70222: EMPTY
70223: LIST
70224: LIST
70225: LIST
70226: LIST
70227: LIST
70228: LIST
70229: LIST
70230: LIST
70231: LIST
70232: LIST
70233: LIST
70234: LIST
70235: LIST
70236: LIST
70237: LIST
70238: LIST
70239: LIST
70240: LIST
70241: LIST
70242: LIST
70243: LIST
70244: LIST
70245: LIST
70246: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
70247: LD_ADDR_VAR 0 35
70251: PUSH
70252: LD_INT 0
70254: PUSH
70255: LD_INT 0
70257: PUSH
70258: EMPTY
70259: LIST
70260: LIST
70261: PUSH
70262: LD_INT 0
70264: PUSH
70265: LD_INT 1
70267: NEG
70268: PUSH
70269: EMPTY
70270: LIST
70271: LIST
70272: PUSH
70273: LD_INT 1
70275: PUSH
70276: LD_INT 0
70278: PUSH
70279: EMPTY
70280: LIST
70281: LIST
70282: PUSH
70283: LD_INT 1
70285: PUSH
70286: LD_INT 1
70288: PUSH
70289: EMPTY
70290: LIST
70291: LIST
70292: PUSH
70293: LD_INT 0
70295: PUSH
70296: LD_INT 1
70298: PUSH
70299: EMPTY
70300: LIST
70301: LIST
70302: PUSH
70303: LD_INT 1
70305: NEG
70306: PUSH
70307: LD_INT 0
70309: PUSH
70310: EMPTY
70311: LIST
70312: LIST
70313: PUSH
70314: LD_INT 1
70316: NEG
70317: PUSH
70318: LD_INT 1
70320: NEG
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: PUSH
70326: LD_INT 2
70328: PUSH
70329: LD_INT 1
70331: PUSH
70332: EMPTY
70333: LIST
70334: LIST
70335: PUSH
70336: LD_INT 2
70338: NEG
70339: PUSH
70340: LD_INT 1
70342: NEG
70343: PUSH
70344: EMPTY
70345: LIST
70346: LIST
70347: PUSH
70348: EMPTY
70349: LIST
70350: LIST
70351: LIST
70352: LIST
70353: LIST
70354: LIST
70355: LIST
70356: LIST
70357: LIST
70358: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
70359: LD_ADDR_VAR 0 36
70363: PUSH
70364: LD_INT 0
70366: PUSH
70367: LD_INT 0
70369: PUSH
70370: EMPTY
70371: LIST
70372: LIST
70373: PUSH
70374: LD_INT 0
70376: PUSH
70377: LD_INT 1
70379: NEG
70380: PUSH
70381: EMPTY
70382: LIST
70383: LIST
70384: PUSH
70385: LD_INT 1
70387: PUSH
70388: LD_INT 0
70390: PUSH
70391: EMPTY
70392: LIST
70393: LIST
70394: PUSH
70395: LD_INT 1
70397: PUSH
70398: LD_INT 1
70400: PUSH
70401: EMPTY
70402: LIST
70403: LIST
70404: PUSH
70405: LD_INT 0
70407: PUSH
70408: LD_INT 1
70410: PUSH
70411: EMPTY
70412: LIST
70413: LIST
70414: PUSH
70415: LD_INT 1
70417: NEG
70418: PUSH
70419: LD_INT 0
70421: PUSH
70422: EMPTY
70423: LIST
70424: LIST
70425: PUSH
70426: LD_INT 1
70428: NEG
70429: PUSH
70430: LD_INT 1
70432: NEG
70433: PUSH
70434: EMPTY
70435: LIST
70436: LIST
70437: PUSH
70438: LD_INT 1
70440: NEG
70441: PUSH
70442: LD_INT 2
70444: NEG
70445: PUSH
70446: EMPTY
70447: LIST
70448: LIST
70449: PUSH
70450: LD_INT 1
70452: PUSH
70453: LD_INT 2
70455: PUSH
70456: EMPTY
70457: LIST
70458: LIST
70459: PUSH
70460: EMPTY
70461: LIST
70462: LIST
70463: LIST
70464: LIST
70465: LIST
70466: LIST
70467: LIST
70468: LIST
70469: LIST
70470: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
70471: LD_ADDR_VAR 0 37
70475: PUSH
70476: LD_INT 0
70478: PUSH
70479: LD_INT 0
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: PUSH
70486: LD_INT 0
70488: PUSH
70489: LD_INT 1
70491: NEG
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 1
70499: PUSH
70500: LD_INT 0
70502: PUSH
70503: EMPTY
70504: LIST
70505: LIST
70506: PUSH
70507: LD_INT 1
70509: PUSH
70510: LD_INT 1
70512: PUSH
70513: EMPTY
70514: LIST
70515: LIST
70516: PUSH
70517: LD_INT 0
70519: PUSH
70520: LD_INT 1
70522: PUSH
70523: EMPTY
70524: LIST
70525: LIST
70526: PUSH
70527: LD_INT 1
70529: NEG
70530: PUSH
70531: LD_INT 0
70533: PUSH
70534: EMPTY
70535: LIST
70536: LIST
70537: PUSH
70538: LD_INT 1
70540: NEG
70541: PUSH
70542: LD_INT 1
70544: NEG
70545: PUSH
70546: EMPTY
70547: LIST
70548: LIST
70549: PUSH
70550: LD_INT 1
70552: PUSH
70553: LD_INT 1
70555: NEG
70556: PUSH
70557: EMPTY
70558: LIST
70559: LIST
70560: PUSH
70561: LD_INT 1
70563: NEG
70564: PUSH
70565: LD_INT 1
70567: PUSH
70568: EMPTY
70569: LIST
70570: LIST
70571: PUSH
70572: EMPTY
70573: LIST
70574: LIST
70575: LIST
70576: LIST
70577: LIST
70578: LIST
70579: LIST
70580: LIST
70581: LIST
70582: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
70583: LD_ADDR_VAR 0 38
70587: PUSH
70588: LD_INT 0
70590: PUSH
70591: LD_INT 0
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: PUSH
70598: LD_INT 0
70600: PUSH
70601: LD_INT 1
70603: NEG
70604: PUSH
70605: EMPTY
70606: LIST
70607: LIST
70608: PUSH
70609: LD_INT 1
70611: PUSH
70612: LD_INT 0
70614: PUSH
70615: EMPTY
70616: LIST
70617: LIST
70618: PUSH
70619: LD_INT 1
70621: PUSH
70622: LD_INT 1
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: PUSH
70629: LD_INT 0
70631: PUSH
70632: LD_INT 1
70634: PUSH
70635: EMPTY
70636: LIST
70637: LIST
70638: PUSH
70639: LD_INT 1
70641: NEG
70642: PUSH
70643: LD_INT 0
70645: PUSH
70646: EMPTY
70647: LIST
70648: LIST
70649: PUSH
70650: LD_INT 1
70652: NEG
70653: PUSH
70654: LD_INT 1
70656: NEG
70657: PUSH
70658: EMPTY
70659: LIST
70660: LIST
70661: PUSH
70662: LD_INT 2
70664: PUSH
70665: LD_INT 1
70667: PUSH
70668: EMPTY
70669: LIST
70670: LIST
70671: PUSH
70672: LD_INT 2
70674: NEG
70675: PUSH
70676: LD_INT 1
70678: NEG
70679: PUSH
70680: EMPTY
70681: LIST
70682: LIST
70683: PUSH
70684: EMPTY
70685: LIST
70686: LIST
70687: LIST
70688: LIST
70689: LIST
70690: LIST
70691: LIST
70692: LIST
70693: LIST
70694: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
70695: LD_ADDR_VAR 0 39
70699: PUSH
70700: LD_INT 0
70702: PUSH
70703: LD_INT 0
70705: PUSH
70706: EMPTY
70707: LIST
70708: LIST
70709: PUSH
70710: LD_INT 0
70712: PUSH
70713: LD_INT 1
70715: NEG
70716: PUSH
70717: EMPTY
70718: LIST
70719: LIST
70720: PUSH
70721: LD_INT 1
70723: PUSH
70724: LD_INT 0
70726: PUSH
70727: EMPTY
70728: LIST
70729: LIST
70730: PUSH
70731: LD_INT 1
70733: PUSH
70734: LD_INT 1
70736: PUSH
70737: EMPTY
70738: LIST
70739: LIST
70740: PUSH
70741: LD_INT 0
70743: PUSH
70744: LD_INT 1
70746: PUSH
70747: EMPTY
70748: LIST
70749: LIST
70750: PUSH
70751: LD_INT 1
70753: NEG
70754: PUSH
70755: LD_INT 0
70757: PUSH
70758: EMPTY
70759: LIST
70760: LIST
70761: PUSH
70762: LD_INT 1
70764: NEG
70765: PUSH
70766: LD_INT 1
70768: NEG
70769: PUSH
70770: EMPTY
70771: LIST
70772: LIST
70773: PUSH
70774: LD_INT 1
70776: NEG
70777: PUSH
70778: LD_INT 2
70780: NEG
70781: PUSH
70782: EMPTY
70783: LIST
70784: LIST
70785: PUSH
70786: LD_INT 1
70788: PUSH
70789: LD_INT 2
70791: PUSH
70792: EMPTY
70793: LIST
70794: LIST
70795: PUSH
70796: EMPTY
70797: LIST
70798: LIST
70799: LIST
70800: LIST
70801: LIST
70802: LIST
70803: LIST
70804: LIST
70805: LIST
70806: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
70807: LD_ADDR_VAR 0 40
70811: PUSH
70812: LD_INT 0
70814: PUSH
70815: LD_INT 0
70817: PUSH
70818: EMPTY
70819: LIST
70820: LIST
70821: PUSH
70822: LD_INT 0
70824: PUSH
70825: LD_INT 1
70827: NEG
70828: PUSH
70829: EMPTY
70830: LIST
70831: LIST
70832: PUSH
70833: LD_INT 1
70835: PUSH
70836: LD_INT 0
70838: PUSH
70839: EMPTY
70840: LIST
70841: LIST
70842: PUSH
70843: LD_INT 1
70845: PUSH
70846: LD_INT 1
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PUSH
70853: LD_INT 0
70855: PUSH
70856: LD_INT 1
70858: PUSH
70859: EMPTY
70860: LIST
70861: LIST
70862: PUSH
70863: LD_INT 1
70865: NEG
70866: PUSH
70867: LD_INT 0
70869: PUSH
70870: EMPTY
70871: LIST
70872: LIST
70873: PUSH
70874: LD_INT 1
70876: NEG
70877: PUSH
70878: LD_INT 1
70880: NEG
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: LD_INT 1
70888: PUSH
70889: LD_INT 1
70891: NEG
70892: PUSH
70893: EMPTY
70894: LIST
70895: LIST
70896: PUSH
70897: LD_INT 1
70899: NEG
70900: PUSH
70901: LD_INT 1
70903: PUSH
70904: EMPTY
70905: LIST
70906: LIST
70907: PUSH
70908: EMPTY
70909: LIST
70910: LIST
70911: LIST
70912: LIST
70913: LIST
70914: LIST
70915: LIST
70916: LIST
70917: LIST
70918: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
70919: LD_ADDR_VAR 0 41
70923: PUSH
70924: LD_INT 0
70926: PUSH
70927: LD_INT 0
70929: PUSH
70930: EMPTY
70931: LIST
70932: LIST
70933: PUSH
70934: LD_INT 0
70936: PUSH
70937: LD_INT 1
70939: NEG
70940: PUSH
70941: EMPTY
70942: LIST
70943: LIST
70944: PUSH
70945: LD_INT 1
70947: PUSH
70948: LD_INT 0
70950: PUSH
70951: EMPTY
70952: LIST
70953: LIST
70954: PUSH
70955: LD_INT 1
70957: PUSH
70958: LD_INT 1
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: PUSH
70965: LD_INT 0
70967: PUSH
70968: LD_INT 1
70970: PUSH
70971: EMPTY
70972: LIST
70973: LIST
70974: PUSH
70975: LD_INT 1
70977: NEG
70978: PUSH
70979: LD_INT 0
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: PUSH
70986: LD_INT 1
70988: NEG
70989: PUSH
70990: LD_INT 1
70992: NEG
70993: PUSH
70994: EMPTY
70995: LIST
70996: LIST
70997: PUSH
70998: LD_INT 1
71000: NEG
71001: PUSH
71002: LD_INT 2
71004: NEG
71005: PUSH
71006: EMPTY
71007: LIST
71008: LIST
71009: PUSH
71010: LD_INT 1
71012: PUSH
71013: LD_INT 1
71015: NEG
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 2
71023: PUSH
71024: LD_INT 0
71026: PUSH
71027: EMPTY
71028: LIST
71029: LIST
71030: PUSH
71031: LD_INT 2
71033: PUSH
71034: LD_INT 1
71036: PUSH
71037: EMPTY
71038: LIST
71039: LIST
71040: PUSH
71041: LD_INT 2
71043: PUSH
71044: LD_INT 2
71046: PUSH
71047: EMPTY
71048: LIST
71049: LIST
71050: PUSH
71051: LD_INT 1
71053: PUSH
71054: LD_INT 2
71056: PUSH
71057: EMPTY
71058: LIST
71059: LIST
71060: PUSH
71061: LD_INT 1
71063: NEG
71064: PUSH
71065: LD_INT 1
71067: PUSH
71068: EMPTY
71069: LIST
71070: LIST
71071: PUSH
71072: LD_INT 2
71074: NEG
71075: PUSH
71076: LD_INT 0
71078: PUSH
71079: EMPTY
71080: LIST
71081: LIST
71082: PUSH
71083: LD_INT 2
71085: NEG
71086: PUSH
71087: LD_INT 1
71089: NEG
71090: PUSH
71091: EMPTY
71092: LIST
71093: LIST
71094: PUSH
71095: LD_INT 2
71097: NEG
71098: PUSH
71099: LD_INT 2
71101: NEG
71102: PUSH
71103: EMPTY
71104: LIST
71105: LIST
71106: PUSH
71107: LD_INT 2
71109: NEG
71110: PUSH
71111: LD_INT 3
71113: NEG
71114: PUSH
71115: EMPTY
71116: LIST
71117: LIST
71118: PUSH
71119: LD_INT 2
71121: PUSH
71122: LD_INT 1
71124: NEG
71125: PUSH
71126: EMPTY
71127: LIST
71128: LIST
71129: PUSH
71130: LD_INT 3
71132: PUSH
71133: LD_INT 0
71135: PUSH
71136: EMPTY
71137: LIST
71138: LIST
71139: PUSH
71140: LD_INT 3
71142: PUSH
71143: LD_INT 1
71145: PUSH
71146: EMPTY
71147: LIST
71148: LIST
71149: PUSH
71150: LD_INT 3
71152: PUSH
71153: LD_INT 2
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PUSH
71160: LD_INT 3
71162: PUSH
71163: LD_INT 3
71165: PUSH
71166: EMPTY
71167: LIST
71168: LIST
71169: PUSH
71170: LD_INT 2
71172: PUSH
71173: LD_INT 3
71175: PUSH
71176: EMPTY
71177: LIST
71178: LIST
71179: PUSH
71180: LD_INT 2
71182: NEG
71183: PUSH
71184: LD_INT 1
71186: PUSH
71187: EMPTY
71188: LIST
71189: LIST
71190: PUSH
71191: LD_INT 3
71193: NEG
71194: PUSH
71195: LD_INT 0
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: PUSH
71202: LD_INT 3
71204: NEG
71205: PUSH
71206: LD_INT 1
71208: NEG
71209: PUSH
71210: EMPTY
71211: LIST
71212: LIST
71213: PUSH
71214: LD_INT 3
71216: NEG
71217: PUSH
71218: LD_INT 2
71220: NEG
71221: PUSH
71222: EMPTY
71223: LIST
71224: LIST
71225: PUSH
71226: LD_INT 3
71228: NEG
71229: PUSH
71230: LD_INT 3
71232: NEG
71233: PUSH
71234: EMPTY
71235: LIST
71236: LIST
71237: PUSH
71238: EMPTY
71239: LIST
71240: LIST
71241: LIST
71242: LIST
71243: LIST
71244: LIST
71245: LIST
71246: LIST
71247: LIST
71248: LIST
71249: LIST
71250: LIST
71251: LIST
71252: LIST
71253: LIST
71254: LIST
71255: LIST
71256: LIST
71257: LIST
71258: LIST
71259: LIST
71260: LIST
71261: LIST
71262: LIST
71263: LIST
71264: LIST
71265: LIST
71266: LIST
71267: LIST
71268: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71269: LD_ADDR_VAR 0 42
71273: PUSH
71274: LD_INT 0
71276: PUSH
71277: LD_INT 0
71279: PUSH
71280: EMPTY
71281: LIST
71282: LIST
71283: PUSH
71284: LD_INT 0
71286: PUSH
71287: LD_INT 1
71289: NEG
71290: PUSH
71291: EMPTY
71292: LIST
71293: LIST
71294: PUSH
71295: LD_INT 1
71297: PUSH
71298: LD_INT 0
71300: PUSH
71301: EMPTY
71302: LIST
71303: LIST
71304: PUSH
71305: LD_INT 1
71307: PUSH
71308: LD_INT 1
71310: PUSH
71311: EMPTY
71312: LIST
71313: LIST
71314: PUSH
71315: LD_INT 0
71317: PUSH
71318: LD_INT 1
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: LD_INT 1
71327: NEG
71328: PUSH
71329: LD_INT 0
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PUSH
71336: LD_INT 1
71338: NEG
71339: PUSH
71340: LD_INT 1
71342: NEG
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: PUSH
71348: LD_INT 1
71350: NEG
71351: PUSH
71352: LD_INT 2
71354: NEG
71355: PUSH
71356: EMPTY
71357: LIST
71358: LIST
71359: PUSH
71360: LD_INT 0
71362: PUSH
71363: LD_INT 2
71365: NEG
71366: PUSH
71367: EMPTY
71368: LIST
71369: LIST
71370: PUSH
71371: LD_INT 1
71373: PUSH
71374: LD_INT 1
71376: NEG
71377: PUSH
71378: EMPTY
71379: LIST
71380: LIST
71381: PUSH
71382: LD_INT 2
71384: PUSH
71385: LD_INT 1
71387: PUSH
71388: EMPTY
71389: LIST
71390: LIST
71391: PUSH
71392: LD_INT 2
71394: PUSH
71395: LD_INT 2
71397: PUSH
71398: EMPTY
71399: LIST
71400: LIST
71401: PUSH
71402: LD_INT 1
71404: PUSH
71405: LD_INT 2
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: PUSH
71412: LD_INT 0
71414: PUSH
71415: LD_INT 2
71417: PUSH
71418: EMPTY
71419: LIST
71420: LIST
71421: PUSH
71422: LD_INT 1
71424: NEG
71425: PUSH
71426: LD_INT 1
71428: PUSH
71429: EMPTY
71430: LIST
71431: LIST
71432: PUSH
71433: LD_INT 2
71435: NEG
71436: PUSH
71437: LD_INT 1
71439: NEG
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: PUSH
71445: LD_INT 2
71447: NEG
71448: PUSH
71449: LD_INT 2
71451: NEG
71452: PUSH
71453: EMPTY
71454: LIST
71455: LIST
71456: PUSH
71457: LD_INT 2
71459: NEG
71460: PUSH
71461: LD_INT 3
71463: NEG
71464: PUSH
71465: EMPTY
71466: LIST
71467: LIST
71468: PUSH
71469: LD_INT 1
71471: NEG
71472: PUSH
71473: LD_INT 3
71475: NEG
71476: PUSH
71477: EMPTY
71478: LIST
71479: LIST
71480: PUSH
71481: LD_INT 0
71483: PUSH
71484: LD_INT 3
71486: NEG
71487: PUSH
71488: EMPTY
71489: LIST
71490: LIST
71491: PUSH
71492: LD_INT 1
71494: PUSH
71495: LD_INT 2
71497: NEG
71498: PUSH
71499: EMPTY
71500: LIST
71501: LIST
71502: PUSH
71503: LD_INT 3
71505: PUSH
71506: LD_INT 2
71508: PUSH
71509: EMPTY
71510: LIST
71511: LIST
71512: PUSH
71513: LD_INT 3
71515: PUSH
71516: LD_INT 3
71518: PUSH
71519: EMPTY
71520: LIST
71521: LIST
71522: PUSH
71523: LD_INT 2
71525: PUSH
71526: LD_INT 3
71528: PUSH
71529: EMPTY
71530: LIST
71531: LIST
71532: PUSH
71533: LD_INT 1
71535: PUSH
71536: LD_INT 3
71538: PUSH
71539: EMPTY
71540: LIST
71541: LIST
71542: PUSH
71543: LD_INT 0
71545: PUSH
71546: LD_INT 3
71548: PUSH
71549: EMPTY
71550: LIST
71551: LIST
71552: PUSH
71553: LD_INT 1
71555: NEG
71556: PUSH
71557: LD_INT 2
71559: PUSH
71560: EMPTY
71561: LIST
71562: LIST
71563: PUSH
71564: LD_INT 3
71566: NEG
71567: PUSH
71568: LD_INT 2
71570: NEG
71571: PUSH
71572: EMPTY
71573: LIST
71574: LIST
71575: PUSH
71576: LD_INT 3
71578: NEG
71579: PUSH
71580: LD_INT 3
71582: NEG
71583: PUSH
71584: EMPTY
71585: LIST
71586: LIST
71587: PUSH
71588: EMPTY
71589: LIST
71590: LIST
71591: LIST
71592: LIST
71593: LIST
71594: LIST
71595: LIST
71596: LIST
71597: LIST
71598: LIST
71599: LIST
71600: LIST
71601: LIST
71602: LIST
71603: LIST
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71619: LD_ADDR_VAR 0 43
71623: PUSH
71624: LD_INT 0
71626: PUSH
71627: LD_INT 0
71629: PUSH
71630: EMPTY
71631: LIST
71632: LIST
71633: PUSH
71634: LD_INT 0
71636: PUSH
71637: LD_INT 1
71639: NEG
71640: PUSH
71641: EMPTY
71642: LIST
71643: LIST
71644: PUSH
71645: LD_INT 1
71647: PUSH
71648: LD_INT 0
71650: PUSH
71651: EMPTY
71652: LIST
71653: LIST
71654: PUSH
71655: LD_INT 1
71657: PUSH
71658: LD_INT 1
71660: PUSH
71661: EMPTY
71662: LIST
71663: LIST
71664: PUSH
71665: LD_INT 0
71667: PUSH
71668: LD_INT 1
71670: PUSH
71671: EMPTY
71672: LIST
71673: LIST
71674: PUSH
71675: LD_INT 1
71677: NEG
71678: PUSH
71679: LD_INT 0
71681: PUSH
71682: EMPTY
71683: LIST
71684: LIST
71685: PUSH
71686: LD_INT 1
71688: NEG
71689: PUSH
71690: LD_INT 1
71692: NEG
71693: PUSH
71694: EMPTY
71695: LIST
71696: LIST
71697: PUSH
71698: LD_INT 1
71700: NEG
71701: PUSH
71702: LD_INT 2
71704: NEG
71705: PUSH
71706: EMPTY
71707: LIST
71708: LIST
71709: PUSH
71710: LD_INT 0
71712: PUSH
71713: LD_INT 2
71715: NEG
71716: PUSH
71717: EMPTY
71718: LIST
71719: LIST
71720: PUSH
71721: LD_INT 1
71723: PUSH
71724: LD_INT 1
71726: NEG
71727: PUSH
71728: EMPTY
71729: LIST
71730: LIST
71731: PUSH
71732: LD_INT 2
71734: PUSH
71735: LD_INT 0
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: PUSH
71742: LD_INT 2
71744: PUSH
71745: LD_INT 1
71747: PUSH
71748: EMPTY
71749: LIST
71750: LIST
71751: PUSH
71752: LD_INT 1
71754: PUSH
71755: LD_INT 2
71757: PUSH
71758: EMPTY
71759: LIST
71760: LIST
71761: PUSH
71762: LD_INT 0
71764: PUSH
71765: LD_INT 2
71767: PUSH
71768: EMPTY
71769: LIST
71770: LIST
71771: PUSH
71772: LD_INT 1
71774: NEG
71775: PUSH
71776: LD_INT 1
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: PUSH
71783: LD_INT 2
71785: NEG
71786: PUSH
71787: LD_INT 0
71789: PUSH
71790: EMPTY
71791: LIST
71792: LIST
71793: PUSH
71794: LD_INT 2
71796: NEG
71797: PUSH
71798: LD_INT 1
71800: NEG
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: PUSH
71806: LD_INT 1
71808: NEG
71809: PUSH
71810: LD_INT 3
71812: NEG
71813: PUSH
71814: EMPTY
71815: LIST
71816: LIST
71817: PUSH
71818: LD_INT 0
71820: PUSH
71821: LD_INT 3
71823: NEG
71824: PUSH
71825: EMPTY
71826: LIST
71827: LIST
71828: PUSH
71829: LD_INT 1
71831: PUSH
71832: LD_INT 2
71834: NEG
71835: PUSH
71836: EMPTY
71837: LIST
71838: LIST
71839: PUSH
71840: LD_INT 2
71842: PUSH
71843: LD_INT 1
71845: NEG
71846: PUSH
71847: EMPTY
71848: LIST
71849: LIST
71850: PUSH
71851: LD_INT 3
71853: PUSH
71854: LD_INT 0
71856: PUSH
71857: EMPTY
71858: LIST
71859: LIST
71860: PUSH
71861: LD_INT 3
71863: PUSH
71864: LD_INT 1
71866: PUSH
71867: EMPTY
71868: LIST
71869: LIST
71870: PUSH
71871: LD_INT 1
71873: PUSH
71874: LD_INT 3
71876: PUSH
71877: EMPTY
71878: LIST
71879: LIST
71880: PUSH
71881: LD_INT 0
71883: PUSH
71884: LD_INT 3
71886: PUSH
71887: EMPTY
71888: LIST
71889: LIST
71890: PUSH
71891: LD_INT 1
71893: NEG
71894: PUSH
71895: LD_INT 2
71897: PUSH
71898: EMPTY
71899: LIST
71900: LIST
71901: PUSH
71902: LD_INT 2
71904: NEG
71905: PUSH
71906: LD_INT 1
71908: PUSH
71909: EMPTY
71910: LIST
71911: LIST
71912: PUSH
71913: LD_INT 3
71915: NEG
71916: PUSH
71917: LD_INT 0
71919: PUSH
71920: EMPTY
71921: LIST
71922: LIST
71923: PUSH
71924: LD_INT 3
71926: NEG
71927: PUSH
71928: LD_INT 1
71930: NEG
71931: PUSH
71932: EMPTY
71933: LIST
71934: LIST
71935: PUSH
71936: EMPTY
71937: LIST
71938: LIST
71939: LIST
71940: LIST
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: LIST
71951: LIST
71952: LIST
71953: LIST
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71967: LD_ADDR_VAR 0 44
71971: PUSH
71972: LD_INT 0
71974: PUSH
71975: LD_INT 0
71977: PUSH
71978: EMPTY
71979: LIST
71980: LIST
71981: PUSH
71982: LD_INT 0
71984: PUSH
71985: LD_INT 1
71987: NEG
71988: PUSH
71989: EMPTY
71990: LIST
71991: LIST
71992: PUSH
71993: LD_INT 1
71995: PUSH
71996: LD_INT 0
71998: PUSH
71999: EMPTY
72000: LIST
72001: LIST
72002: PUSH
72003: LD_INT 1
72005: PUSH
72006: LD_INT 1
72008: PUSH
72009: EMPTY
72010: LIST
72011: LIST
72012: PUSH
72013: LD_INT 0
72015: PUSH
72016: LD_INT 1
72018: PUSH
72019: EMPTY
72020: LIST
72021: LIST
72022: PUSH
72023: LD_INT 1
72025: NEG
72026: PUSH
72027: LD_INT 0
72029: PUSH
72030: EMPTY
72031: LIST
72032: LIST
72033: PUSH
72034: LD_INT 1
72036: NEG
72037: PUSH
72038: LD_INT 1
72040: NEG
72041: PUSH
72042: EMPTY
72043: LIST
72044: LIST
72045: PUSH
72046: LD_INT 1
72048: NEG
72049: PUSH
72050: LD_INT 2
72052: NEG
72053: PUSH
72054: EMPTY
72055: LIST
72056: LIST
72057: PUSH
72058: LD_INT 1
72060: PUSH
72061: LD_INT 1
72063: NEG
72064: PUSH
72065: EMPTY
72066: LIST
72067: LIST
72068: PUSH
72069: LD_INT 2
72071: PUSH
72072: LD_INT 0
72074: PUSH
72075: EMPTY
72076: LIST
72077: LIST
72078: PUSH
72079: LD_INT 2
72081: PUSH
72082: LD_INT 1
72084: PUSH
72085: EMPTY
72086: LIST
72087: LIST
72088: PUSH
72089: LD_INT 2
72091: PUSH
72092: LD_INT 2
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: PUSH
72099: LD_INT 1
72101: PUSH
72102: LD_INT 2
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: PUSH
72109: LD_INT 1
72111: NEG
72112: PUSH
72113: LD_INT 1
72115: PUSH
72116: EMPTY
72117: LIST
72118: LIST
72119: PUSH
72120: LD_INT 2
72122: NEG
72123: PUSH
72124: LD_INT 0
72126: PUSH
72127: EMPTY
72128: LIST
72129: LIST
72130: PUSH
72131: LD_INT 2
72133: NEG
72134: PUSH
72135: LD_INT 1
72137: NEG
72138: PUSH
72139: EMPTY
72140: LIST
72141: LIST
72142: PUSH
72143: LD_INT 2
72145: NEG
72146: PUSH
72147: LD_INT 2
72149: NEG
72150: PUSH
72151: EMPTY
72152: LIST
72153: LIST
72154: PUSH
72155: LD_INT 2
72157: NEG
72158: PUSH
72159: LD_INT 3
72161: NEG
72162: PUSH
72163: EMPTY
72164: LIST
72165: LIST
72166: PUSH
72167: LD_INT 2
72169: PUSH
72170: LD_INT 1
72172: NEG
72173: PUSH
72174: EMPTY
72175: LIST
72176: LIST
72177: PUSH
72178: LD_INT 3
72180: PUSH
72181: LD_INT 0
72183: PUSH
72184: EMPTY
72185: LIST
72186: LIST
72187: PUSH
72188: LD_INT 3
72190: PUSH
72191: LD_INT 1
72193: PUSH
72194: EMPTY
72195: LIST
72196: LIST
72197: PUSH
72198: LD_INT 3
72200: PUSH
72201: LD_INT 2
72203: PUSH
72204: EMPTY
72205: LIST
72206: LIST
72207: PUSH
72208: LD_INT 3
72210: PUSH
72211: LD_INT 3
72213: PUSH
72214: EMPTY
72215: LIST
72216: LIST
72217: PUSH
72218: LD_INT 2
72220: PUSH
72221: LD_INT 3
72223: PUSH
72224: EMPTY
72225: LIST
72226: LIST
72227: PUSH
72228: LD_INT 2
72230: NEG
72231: PUSH
72232: LD_INT 1
72234: PUSH
72235: EMPTY
72236: LIST
72237: LIST
72238: PUSH
72239: LD_INT 3
72241: NEG
72242: PUSH
72243: LD_INT 0
72245: PUSH
72246: EMPTY
72247: LIST
72248: LIST
72249: PUSH
72250: LD_INT 3
72252: NEG
72253: PUSH
72254: LD_INT 1
72256: NEG
72257: PUSH
72258: EMPTY
72259: LIST
72260: LIST
72261: PUSH
72262: LD_INT 3
72264: NEG
72265: PUSH
72266: LD_INT 2
72268: NEG
72269: PUSH
72270: EMPTY
72271: LIST
72272: LIST
72273: PUSH
72274: LD_INT 3
72276: NEG
72277: PUSH
72278: LD_INT 3
72280: NEG
72281: PUSH
72282: EMPTY
72283: LIST
72284: LIST
72285: PUSH
72286: EMPTY
72287: LIST
72288: LIST
72289: LIST
72290: LIST
72291: LIST
72292: LIST
72293: LIST
72294: LIST
72295: LIST
72296: LIST
72297: LIST
72298: LIST
72299: LIST
72300: LIST
72301: LIST
72302: LIST
72303: LIST
72304: LIST
72305: LIST
72306: LIST
72307: LIST
72308: LIST
72309: LIST
72310: LIST
72311: LIST
72312: LIST
72313: LIST
72314: LIST
72315: LIST
72316: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72317: LD_ADDR_VAR 0 45
72321: PUSH
72322: LD_INT 0
72324: PUSH
72325: LD_INT 0
72327: PUSH
72328: EMPTY
72329: LIST
72330: LIST
72331: PUSH
72332: LD_INT 0
72334: PUSH
72335: LD_INT 1
72337: NEG
72338: PUSH
72339: EMPTY
72340: LIST
72341: LIST
72342: PUSH
72343: LD_INT 1
72345: PUSH
72346: LD_INT 0
72348: PUSH
72349: EMPTY
72350: LIST
72351: LIST
72352: PUSH
72353: LD_INT 1
72355: PUSH
72356: LD_INT 1
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: PUSH
72363: LD_INT 0
72365: PUSH
72366: LD_INT 1
72368: PUSH
72369: EMPTY
72370: LIST
72371: LIST
72372: PUSH
72373: LD_INT 1
72375: NEG
72376: PUSH
72377: LD_INT 0
72379: PUSH
72380: EMPTY
72381: LIST
72382: LIST
72383: PUSH
72384: LD_INT 1
72386: NEG
72387: PUSH
72388: LD_INT 1
72390: NEG
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: LD_INT 1
72398: NEG
72399: PUSH
72400: LD_INT 2
72402: NEG
72403: PUSH
72404: EMPTY
72405: LIST
72406: LIST
72407: PUSH
72408: LD_INT 0
72410: PUSH
72411: LD_INT 2
72413: NEG
72414: PUSH
72415: EMPTY
72416: LIST
72417: LIST
72418: PUSH
72419: LD_INT 1
72421: PUSH
72422: LD_INT 1
72424: NEG
72425: PUSH
72426: EMPTY
72427: LIST
72428: LIST
72429: PUSH
72430: LD_INT 2
72432: PUSH
72433: LD_INT 1
72435: PUSH
72436: EMPTY
72437: LIST
72438: LIST
72439: PUSH
72440: LD_INT 2
72442: PUSH
72443: LD_INT 2
72445: PUSH
72446: EMPTY
72447: LIST
72448: LIST
72449: PUSH
72450: LD_INT 1
72452: PUSH
72453: LD_INT 2
72455: PUSH
72456: EMPTY
72457: LIST
72458: LIST
72459: PUSH
72460: LD_INT 0
72462: PUSH
72463: LD_INT 2
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: PUSH
72470: LD_INT 1
72472: NEG
72473: PUSH
72474: LD_INT 1
72476: PUSH
72477: EMPTY
72478: LIST
72479: LIST
72480: PUSH
72481: LD_INT 2
72483: NEG
72484: PUSH
72485: LD_INT 1
72487: NEG
72488: PUSH
72489: EMPTY
72490: LIST
72491: LIST
72492: PUSH
72493: LD_INT 2
72495: NEG
72496: PUSH
72497: LD_INT 2
72499: NEG
72500: PUSH
72501: EMPTY
72502: LIST
72503: LIST
72504: PUSH
72505: LD_INT 2
72507: NEG
72508: PUSH
72509: LD_INT 3
72511: NEG
72512: PUSH
72513: EMPTY
72514: LIST
72515: LIST
72516: PUSH
72517: LD_INT 1
72519: NEG
72520: PUSH
72521: LD_INT 3
72523: NEG
72524: PUSH
72525: EMPTY
72526: LIST
72527: LIST
72528: PUSH
72529: LD_INT 0
72531: PUSH
72532: LD_INT 3
72534: NEG
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PUSH
72540: LD_INT 1
72542: PUSH
72543: LD_INT 2
72545: NEG
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: PUSH
72551: LD_INT 3
72553: PUSH
72554: LD_INT 2
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: PUSH
72561: LD_INT 3
72563: PUSH
72564: LD_INT 3
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: PUSH
72571: LD_INT 2
72573: PUSH
72574: LD_INT 3
72576: PUSH
72577: EMPTY
72578: LIST
72579: LIST
72580: PUSH
72581: LD_INT 1
72583: PUSH
72584: LD_INT 3
72586: PUSH
72587: EMPTY
72588: LIST
72589: LIST
72590: PUSH
72591: LD_INT 0
72593: PUSH
72594: LD_INT 3
72596: PUSH
72597: EMPTY
72598: LIST
72599: LIST
72600: PUSH
72601: LD_INT 1
72603: NEG
72604: PUSH
72605: LD_INT 2
72607: PUSH
72608: EMPTY
72609: LIST
72610: LIST
72611: PUSH
72612: LD_INT 3
72614: NEG
72615: PUSH
72616: LD_INT 2
72618: NEG
72619: PUSH
72620: EMPTY
72621: LIST
72622: LIST
72623: PUSH
72624: LD_INT 3
72626: NEG
72627: PUSH
72628: LD_INT 3
72630: NEG
72631: PUSH
72632: EMPTY
72633: LIST
72634: LIST
72635: PUSH
72636: EMPTY
72637: LIST
72638: LIST
72639: LIST
72640: LIST
72641: LIST
72642: LIST
72643: LIST
72644: LIST
72645: LIST
72646: LIST
72647: LIST
72648: LIST
72649: LIST
72650: LIST
72651: LIST
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72667: LD_ADDR_VAR 0 46
72671: PUSH
72672: LD_INT 0
72674: PUSH
72675: LD_INT 0
72677: PUSH
72678: EMPTY
72679: LIST
72680: LIST
72681: PUSH
72682: LD_INT 0
72684: PUSH
72685: LD_INT 1
72687: NEG
72688: PUSH
72689: EMPTY
72690: LIST
72691: LIST
72692: PUSH
72693: LD_INT 1
72695: PUSH
72696: LD_INT 0
72698: PUSH
72699: EMPTY
72700: LIST
72701: LIST
72702: PUSH
72703: LD_INT 1
72705: PUSH
72706: LD_INT 1
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: LD_INT 0
72715: PUSH
72716: LD_INT 1
72718: PUSH
72719: EMPTY
72720: LIST
72721: LIST
72722: PUSH
72723: LD_INT 1
72725: NEG
72726: PUSH
72727: LD_INT 0
72729: PUSH
72730: EMPTY
72731: LIST
72732: LIST
72733: PUSH
72734: LD_INT 1
72736: NEG
72737: PUSH
72738: LD_INT 1
72740: NEG
72741: PUSH
72742: EMPTY
72743: LIST
72744: LIST
72745: PUSH
72746: LD_INT 1
72748: NEG
72749: PUSH
72750: LD_INT 2
72752: NEG
72753: PUSH
72754: EMPTY
72755: LIST
72756: LIST
72757: PUSH
72758: LD_INT 0
72760: PUSH
72761: LD_INT 2
72763: NEG
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: LD_INT 1
72771: PUSH
72772: LD_INT 1
72774: NEG
72775: PUSH
72776: EMPTY
72777: LIST
72778: LIST
72779: PUSH
72780: LD_INT 2
72782: PUSH
72783: LD_INT 0
72785: PUSH
72786: EMPTY
72787: LIST
72788: LIST
72789: PUSH
72790: LD_INT 2
72792: PUSH
72793: LD_INT 1
72795: PUSH
72796: EMPTY
72797: LIST
72798: LIST
72799: PUSH
72800: LD_INT 1
72802: PUSH
72803: LD_INT 2
72805: PUSH
72806: EMPTY
72807: LIST
72808: LIST
72809: PUSH
72810: LD_INT 0
72812: PUSH
72813: LD_INT 2
72815: PUSH
72816: EMPTY
72817: LIST
72818: LIST
72819: PUSH
72820: LD_INT 1
72822: NEG
72823: PUSH
72824: LD_INT 1
72826: PUSH
72827: EMPTY
72828: LIST
72829: LIST
72830: PUSH
72831: LD_INT 2
72833: NEG
72834: PUSH
72835: LD_INT 0
72837: PUSH
72838: EMPTY
72839: LIST
72840: LIST
72841: PUSH
72842: LD_INT 2
72844: NEG
72845: PUSH
72846: LD_INT 1
72848: NEG
72849: PUSH
72850: EMPTY
72851: LIST
72852: LIST
72853: PUSH
72854: LD_INT 1
72856: NEG
72857: PUSH
72858: LD_INT 3
72860: NEG
72861: PUSH
72862: EMPTY
72863: LIST
72864: LIST
72865: PUSH
72866: LD_INT 0
72868: PUSH
72869: LD_INT 3
72871: NEG
72872: PUSH
72873: EMPTY
72874: LIST
72875: LIST
72876: PUSH
72877: LD_INT 1
72879: PUSH
72880: LD_INT 2
72882: NEG
72883: PUSH
72884: EMPTY
72885: LIST
72886: LIST
72887: PUSH
72888: LD_INT 2
72890: PUSH
72891: LD_INT 1
72893: NEG
72894: PUSH
72895: EMPTY
72896: LIST
72897: LIST
72898: PUSH
72899: LD_INT 3
72901: PUSH
72902: LD_INT 0
72904: PUSH
72905: EMPTY
72906: LIST
72907: LIST
72908: PUSH
72909: LD_INT 3
72911: PUSH
72912: LD_INT 1
72914: PUSH
72915: EMPTY
72916: LIST
72917: LIST
72918: PUSH
72919: LD_INT 1
72921: PUSH
72922: LD_INT 3
72924: PUSH
72925: EMPTY
72926: LIST
72927: LIST
72928: PUSH
72929: LD_INT 0
72931: PUSH
72932: LD_INT 3
72934: PUSH
72935: EMPTY
72936: LIST
72937: LIST
72938: PUSH
72939: LD_INT 1
72941: NEG
72942: PUSH
72943: LD_INT 2
72945: PUSH
72946: EMPTY
72947: LIST
72948: LIST
72949: PUSH
72950: LD_INT 2
72952: NEG
72953: PUSH
72954: LD_INT 1
72956: PUSH
72957: EMPTY
72958: LIST
72959: LIST
72960: PUSH
72961: LD_INT 3
72963: NEG
72964: PUSH
72965: LD_INT 0
72967: PUSH
72968: EMPTY
72969: LIST
72970: LIST
72971: PUSH
72972: LD_INT 3
72974: NEG
72975: PUSH
72976: LD_INT 1
72978: NEG
72979: PUSH
72980: EMPTY
72981: LIST
72982: LIST
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: LIST
72988: LIST
72989: LIST
72990: LIST
72991: LIST
72992: LIST
72993: LIST
72994: LIST
72995: LIST
72996: LIST
72997: LIST
72998: LIST
72999: LIST
73000: LIST
73001: LIST
73002: LIST
73003: LIST
73004: LIST
73005: LIST
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73015: LD_ADDR_VAR 0 47
73019: PUSH
73020: LD_INT 0
73022: PUSH
73023: LD_INT 0
73025: PUSH
73026: EMPTY
73027: LIST
73028: LIST
73029: PUSH
73030: LD_INT 0
73032: PUSH
73033: LD_INT 1
73035: NEG
73036: PUSH
73037: EMPTY
73038: LIST
73039: LIST
73040: PUSH
73041: LD_INT 1
73043: PUSH
73044: LD_INT 0
73046: PUSH
73047: EMPTY
73048: LIST
73049: LIST
73050: PUSH
73051: LD_INT 1
73053: PUSH
73054: LD_INT 1
73056: PUSH
73057: EMPTY
73058: LIST
73059: LIST
73060: PUSH
73061: LD_INT 0
73063: PUSH
73064: LD_INT 1
73066: PUSH
73067: EMPTY
73068: LIST
73069: LIST
73070: PUSH
73071: LD_INT 1
73073: NEG
73074: PUSH
73075: LD_INT 0
73077: PUSH
73078: EMPTY
73079: LIST
73080: LIST
73081: PUSH
73082: LD_INT 1
73084: NEG
73085: PUSH
73086: LD_INT 1
73088: NEG
73089: PUSH
73090: EMPTY
73091: LIST
73092: LIST
73093: PUSH
73094: LD_INT 1
73096: NEG
73097: PUSH
73098: LD_INT 2
73100: NEG
73101: PUSH
73102: EMPTY
73103: LIST
73104: LIST
73105: PUSH
73106: LD_INT 0
73108: PUSH
73109: LD_INT 2
73111: NEG
73112: PUSH
73113: EMPTY
73114: LIST
73115: LIST
73116: PUSH
73117: LD_INT 1
73119: PUSH
73120: LD_INT 1
73122: NEG
73123: PUSH
73124: EMPTY
73125: LIST
73126: LIST
73127: PUSH
73128: LD_INT 2
73130: NEG
73131: PUSH
73132: LD_INT 1
73134: NEG
73135: PUSH
73136: EMPTY
73137: LIST
73138: LIST
73139: PUSH
73140: LD_INT 2
73142: NEG
73143: PUSH
73144: LD_INT 2
73146: NEG
73147: PUSH
73148: EMPTY
73149: LIST
73150: LIST
73151: PUSH
73152: EMPTY
73153: LIST
73154: LIST
73155: LIST
73156: LIST
73157: LIST
73158: LIST
73159: LIST
73160: LIST
73161: LIST
73162: LIST
73163: LIST
73164: LIST
73165: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
73166: LD_ADDR_VAR 0 48
73170: PUSH
73171: LD_INT 0
73173: PUSH
73174: LD_INT 0
73176: PUSH
73177: EMPTY
73178: LIST
73179: LIST
73180: PUSH
73181: LD_INT 0
73183: PUSH
73184: LD_INT 1
73186: NEG
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: PUSH
73192: LD_INT 1
73194: PUSH
73195: LD_INT 0
73197: PUSH
73198: EMPTY
73199: LIST
73200: LIST
73201: PUSH
73202: LD_INT 1
73204: PUSH
73205: LD_INT 1
73207: PUSH
73208: EMPTY
73209: LIST
73210: LIST
73211: PUSH
73212: LD_INT 0
73214: PUSH
73215: LD_INT 1
73217: PUSH
73218: EMPTY
73219: LIST
73220: LIST
73221: PUSH
73222: LD_INT 1
73224: NEG
73225: PUSH
73226: LD_INT 0
73228: PUSH
73229: EMPTY
73230: LIST
73231: LIST
73232: PUSH
73233: LD_INT 1
73235: NEG
73236: PUSH
73237: LD_INT 1
73239: NEG
73240: PUSH
73241: EMPTY
73242: LIST
73243: LIST
73244: PUSH
73245: LD_INT 1
73247: NEG
73248: PUSH
73249: LD_INT 2
73251: NEG
73252: PUSH
73253: EMPTY
73254: LIST
73255: LIST
73256: PUSH
73257: LD_INT 0
73259: PUSH
73260: LD_INT 2
73262: NEG
73263: PUSH
73264: EMPTY
73265: LIST
73266: LIST
73267: PUSH
73268: LD_INT 1
73270: PUSH
73271: LD_INT 1
73273: NEG
73274: PUSH
73275: EMPTY
73276: LIST
73277: LIST
73278: PUSH
73279: LD_INT 2
73281: PUSH
73282: LD_INT 0
73284: PUSH
73285: EMPTY
73286: LIST
73287: LIST
73288: PUSH
73289: LD_INT 2
73291: PUSH
73292: LD_INT 1
73294: PUSH
73295: EMPTY
73296: LIST
73297: LIST
73298: PUSH
73299: EMPTY
73300: LIST
73301: LIST
73302: LIST
73303: LIST
73304: LIST
73305: LIST
73306: LIST
73307: LIST
73308: LIST
73309: LIST
73310: LIST
73311: LIST
73312: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
73313: LD_ADDR_VAR 0 49
73317: PUSH
73318: LD_INT 0
73320: PUSH
73321: LD_INT 0
73323: PUSH
73324: EMPTY
73325: LIST
73326: LIST
73327: PUSH
73328: LD_INT 0
73330: PUSH
73331: LD_INT 1
73333: NEG
73334: PUSH
73335: EMPTY
73336: LIST
73337: LIST
73338: PUSH
73339: LD_INT 1
73341: PUSH
73342: LD_INT 0
73344: PUSH
73345: EMPTY
73346: LIST
73347: LIST
73348: PUSH
73349: LD_INT 1
73351: PUSH
73352: LD_INT 1
73354: PUSH
73355: EMPTY
73356: LIST
73357: LIST
73358: PUSH
73359: LD_INT 0
73361: PUSH
73362: LD_INT 1
73364: PUSH
73365: EMPTY
73366: LIST
73367: LIST
73368: PUSH
73369: LD_INT 1
73371: NEG
73372: PUSH
73373: LD_INT 0
73375: PUSH
73376: EMPTY
73377: LIST
73378: LIST
73379: PUSH
73380: LD_INT 1
73382: NEG
73383: PUSH
73384: LD_INT 1
73386: NEG
73387: PUSH
73388: EMPTY
73389: LIST
73390: LIST
73391: PUSH
73392: LD_INT 1
73394: PUSH
73395: LD_INT 1
73397: NEG
73398: PUSH
73399: EMPTY
73400: LIST
73401: LIST
73402: PUSH
73403: LD_INT 2
73405: PUSH
73406: LD_INT 0
73408: PUSH
73409: EMPTY
73410: LIST
73411: LIST
73412: PUSH
73413: LD_INT 2
73415: PUSH
73416: LD_INT 1
73418: PUSH
73419: EMPTY
73420: LIST
73421: LIST
73422: PUSH
73423: LD_INT 2
73425: PUSH
73426: LD_INT 2
73428: PUSH
73429: EMPTY
73430: LIST
73431: LIST
73432: PUSH
73433: LD_INT 1
73435: PUSH
73436: LD_INT 2
73438: PUSH
73439: EMPTY
73440: LIST
73441: LIST
73442: PUSH
73443: EMPTY
73444: LIST
73445: LIST
73446: LIST
73447: LIST
73448: LIST
73449: LIST
73450: LIST
73451: LIST
73452: LIST
73453: LIST
73454: LIST
73455: LIST
73456: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
73457: LD_ADDR_VAR 0 50
73461: PUSH
73462: LD_INT 0
73464: PUSH
73465: LD_INT 0
73467: PUSH
73468: EMPTY
73469: LIST
73470: LIST
73471: PUSH
73472: LD_INT 0
73474: PUSH
73475: LD_INT 1
73477: NEG
73478: PUSH
73479: EMPTY
73480: LIST
73481: LIST
73482: PUSH
73483: LD_INT 1
73485: PUSH
73486: LD_INT 0
73488: PUSH
73489: EMPTY
73490: LIST
73491: LIST
73492: PUSH
73493: LD_INT 1
73495: PUSH
73496: LD_INT 1
73498: PUSH
73499: EMPTY
73500: LIST
73501: LIST
73502: PUSH
73503: LD_INT 0
73505: PUSH
73506: LD_INT 1
73508: PUSH
73509: EMPTY
73510: LIST
73511: LIST
73512: PUSH
73513: LD_INT 1
73515: NEG
73516: PUSH
73517: LD_INT 0
73519: PUSH
73520: EMPTY
73521: LIST
73522: LIST
73523: PUSH
73524: LD_INT 1
73526: NEG
73527: PUSH
73528: LD_INT 1
73530: NEG
73531: PUSH
73532: EMPTY
73533: LIST
73534: LIST
73535: PUSH
73536: LD_INT 2
73538: PUSH
73539: LD_INT 1
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: PUSH
73546: LD_INT 2
73548: PUSH
73549: LD_INT 2
73551: PUSH
73552: EMPTY
73553: LIST
73554: LIST
73555: PUSH
73556: LD_INT 1
73558: PUSH
73559: LD_INT 2
73561: PUSH
73562: EMPTY
73563: LIST
73564: LIST
73565: PUSH
73566: LD_INT 0
73568: PUSH
73569: LD_INT 2
73571: PUSH
73572: EMPTY
73573: LIST
73574: LIST
73575: PUSH
73576: LD_INT 1
73578: NEG
73579: PUSH
73580: LD_INT 1
73582: PUSH
73583: EMPTY
73584: LIST
73585: LIST
73586: PUSH
73587: EMPTY
73588: LIST
73589: LIST
73590: LIST
73591: LIST
73592: LIST
73593: LIST
73594: LIST
73595: LIST
73596: LIST
73597: LIST
73598: LIST
73599: LIST
73600: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
73601: LD_ADDR_VAR 0 51
73605: PUSH
73606: LD_INT 0
73608: PUSH
73609: LD_INT 0
73611: PUSH
73612: EMPTY
73613: LIST
73614: LIST
73615: PUSH
73616: LD_INT 0
73618: PUSH
73619: LD_INT 1
73621: NEG
73622: PUSH
73623: EMPTY
73624: LIST
73625: LIST
73626: PUSH
73627: LD_INT 1
73629: PUSH
73630: LD_INT 0
73632: PUSH
73633: EMPTY
73634: LIST
73635: LIST
73636: PUSH
73637: LD_INT 1
73639: PUSH
73640: LD_INT 1
73642: PUSH
73643: EMPTY
73644: LIST
73645: LIST
73646: PUSH
73647: LD_INT 0
73649: PUSH
73650: LD_INT 1
73652: PUSH
73653: EMPTY
73654: LIST
73655: LIST
73656: PUSH
73657: LD_INT 1
73659: NEG
73660: PUSH
73661: LD_INT 0
73663: PUSH
73664: EMPTY
73665: LIST
73666: LIST
73667: PUSH
73668: LD_INT 1
73670: NEG
73671: PUSH
73672: LD_INT 1
73674: NEG
73675: PUSH
73676: EMPTY
73677: LIST
73678: LIST
73679: PUSH
73680: LD_INT 1
73682: PUSH
73683: LD_INT 2
73685: PUSH
73686: EMPTY
73687: LIST
73688: LIST
73689: PUSH
73690: LD_INT 0
73692: PUSH
73693: LD_INT 2
73695: PUSH
73696: EMPTY
73697: LIST
73698: LIST
73699: PUSH
73700: LD_INT 1
73702: NEG
73703: PUSH
73704: LD_INT 1
73706: PUSH
73707: EMPTY
73708: LIST
73709: LIST
73710: PUSH
73711: LD_INT 2
73713: NEG
73714: PUSH
73715: LD_INT 0
73717: PUSH
73718: EMPTY
73719: LIST
73720: LIST
73721: PUSH
73722: LD_INT 2
73724: NEG
73725: PUSH
73726: LD_INT 1
73728: NEG
73729: PUSH
73730: EMPTY
73731: LIST
73732: LIST
73733: PUSH
73734: EMPTY
73735: LIST
73736: LIST
73737: LIST
73738: LIST
73739: LIST
73740: LIST
73741: LIST
73742: LIST
73743: LIST
73744: LIST
73745: LIST
73746: LIST
73747: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73748: LD_ADDR_VAR 0 52
73752: PUSH
73753: LD_INT 0
73755: PUSH
73756: LD_INT 0
73758: PUSH
73759: EMPTY
73760: LIST
73761: LIST
73762: PUSH
73763: LD_INT 0
73765: PUSH
73766: LD_INT 1
73768: NEG
73769: PUSH
73770: EMPTY
73771: LIST
73772: LIST
73773: PUSH
73774: LD_INT 1
73776: PUSH
73777: LD_INT 0
73779: PUSH
73780: EMPTY
73781: LIST
73782: LIST
73783: PUSH
73784: LD_INT 1
73786: PUSH
73787: LD_INT 1
73789: PUSH
73790: EMPTY
73791: LIST
73792: LIST
73793: PUSH
73794: LD_INT 0
73796: PUSH
73797: LD_INT 1
73799: PUSH
73800: EMPTY
73801: LIST
73802: LIST
73803: PUSH
73804: LD_INT 1
73806: NEG
73807: PUSH
73808: LD_INT 0
73810: PUSH
73811: EMPTY
73812: LIST
73813: LIST
73814: PUSH
73815: LD_INT 1
73817: NEG
73818: PUSH
73819: LD_INT 1
73821: NEG
73822: PUSH
73823: EMPTY
73824: LIST
73825: LIST
73826: PUSH
73827: LD_INT 1
73829: NEG
73830: PUSH
73831: LD_INT 2
73833: NEG
73834: PUSH
73835: EMPTY
73836: LIST
73837: LIST
73838: PUSH
73839: LD_INT 1
73841: NEG
73842: PUSH
73843: LD_INT 1
73845: PUSH
73846: EMPTY
73847: LIST
73848: LIST
73849: PUSH
73850: LD_INT 2
73852: NEG
73853: PUSH
73854: LD_INT 0
73856: PUSH
73857: EMPTY
73858: LIST
73859: LIST
73860: PUSH
73861: LD_INT 2
73863: NEG
73864: PUSH
73865: LD_INT 1
73867: NEG
73868: PUSH
73869: EMPTY
73870: LIST
73871: LIST
73872: PUSH
73873: LD_INT 2
73875: NEG
73876: PUSH
73877: LD_INT 2
73879: NEG
73880: PUSH
73881: EMPTY
73882: LIST
73883: LIST
73884: PUSH
73885: EMPTY
73886: LIST
73887: LIST
73888: LIST
73889: LIST
73890: LIST
73891: LIST
73892: LIST
73893: LIST
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73899: LD_ADDR_VAR 0 53
73903: PUSH
73904: LD_INT 0
73906: PUSH
73907: LD_INT 0
73909: PUSH
73910: EMPTY
73911: LIST
73912: LIST
73913: PUSH
73914: LD_INT 0
73916: PUSH
73917: LD_INT 1
73919: NEG
73920: PUSH
73921: EMPTY
73922: LIST
73923: LIST
73924: PUSH
73925: LD_INT 1
73927: PUSH
73928: LD_INT 0
73930: PUSH
73931: EMPTY
73932: LIST
73933: LIST
73934: PUSH
73935: LD_INT 1
73937: PUSH
73938: LD_INT 1
73940: PUSH
73941: EMPTY
73942: LIST
73943: LIST
73944: PUSH
73945: LD_INT 0
73947: PUSH
73948: LD_INT 1
73950: PUSH
73951: EMPTY
73952: LIST
73953: LIST
73954: PUSH
73955: LD_INT 1
73957: NEG
73958: PUSH
73959: LD_INT 0
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: PUSH
73966: LD_INT 1
73968: NEG
73969: PUSH
73970: LD_INT 1
73972: NEG
73973: PUSH
73974: EMPTY
73975: LIST
73976: LIST
73977: PUSH
73978: LD_INT 1
73980: NEG
73981: PUSH
73982: LD_INT 2
73984: NEG
73985: PUSH
73986: EMPTY
73987: LIST
73988: LIST
73989: PUSH
73990: LD_INT 0
73992: PUSH
73993: LD_INT 2
73995: NEG
73996: PUSH
73997: EMPTY
73998: LIST
73999: LIST
74000: PUSH
74001: LD_INT 1
74003: PUSH
74004: LD_INT 1
74006: NEG
74007: PUSH
74008: EMPTY
74009: LIST
74010: LIST
74011: PUSH
74012: LD_INT 2
74014: PUSH
74015: LD_INT 0
74017: PUSH
74018: EMPTY
74019: LIST
74020: LIST
74021: PUSH
74022: LD_INT 2
74024: PUSH
74025: LD_INT 1
74027: PUSH
74028: EMPTY
74029: LIST
74030: LIST
74031: PUSH
74032: LD_INT 2
74034: PUSH
74035: LD_INT 2
74037: PUSH
74038: EMPTY
74039: LIST
74040: LIST
74041: PUSH
74042: LD_INT 1
74044: PUSH
74045: LD_INT 2
74047: PUSH
74048: EMPTY
74049: LIST
74050: LIST
74051: PUSH
74052: LD_INT 0
74054: PUSH
74055: LD_INT 2
74057: PUSH
74058: EMPTY
74059: LIST
74060: LIST
74061: PUSH
74062: LD_INT 1
74064: NEG
74065: PUSH
74066: LD_INT 1
74068: PUSH
74069: EMPTY
74070: LIST
74071: LIST
74072: PUSH
74073: LD_INT 2
74075: NEG
74076: PUSH
74077: LD_INT 0
74079: PUSH
74080: EMPTY
74081: LIST
74082: LIST
74083: PUSH
74084: LD_INT 2
74086: NEG
74087: PUSH
74088: LD_INT 1
74090: NEG
74091: PUSH
74092: EMPTY
74093: LIST
74094: LIST
74095: PUSH
74096: LD_INT 2
74098: NEG
74099: PUSH
74100: LD_INT 2
74102: NEG
74103: PUSH
74104: EMPTY
74105: LIST
74106: LIST
74107: PUSH
74108: EMPTY
74109: LIST
74110: LIST
74111: LIST
74112: LIST
74113: LIST
74114: LIST
74115: LIST
74116: LIST
74117: LIST
74118: LIST
74119: LIST
74120: LIST
74121: LIST
74122: LIST
74123: LIST
74124: LIST
74125: LIST
74126: LIST
74127: LIST
74128: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74129: LD_ADDR_VAR 0 54
74133: PUSH
74134: LD_INT 0
74136: PUSH
74137: LD_INT 0
74139: PUSH
74140: EMPTY
74141: LIST
74142: LIST
74143: PUSH
74144: LD_INT 0
74146: PUSH
74147: LD_INT 1
74149: NEG
74150: PUSH
74151: EMPTY
74152: LIST
74153: LIST
74154: PUSH
74155: LD_INT 1
74157: PUSH
74158: LD_INT 0
74160: PUSH
74161: EMPTY
74162: LIST
74163: LIST
74164: PUSH
74165: LD_INT 1
74167: PUSH
74168: LD_INT 1
74170: PUSH
74171: EMPTY
74172: LIST
74173: LIST
74174: PUSH
74175: LD_INT 0
74177: PUSH
74178: LD_INT 1
74180: PUSH
74181: EMPTY
74182: LIST
74183: LIST
74184: PUSH
74185: LD_INT 1
74187: NEG
74188: PUSH
74189: LD_INT 0
74191: PUSH
74192: EMPTY
74193: LIST
74194: LIST
74195: PUSH
74196: LD_INT 1
74198: NEG
74199: PUSH
74200: LD_INT 1
74202: NEG
74203: PUSH
74204: EMPTY
74205: LIST
74206: LIST
74207: PUSH
74208: LD_INT 1
74210: NEG
74211: PUSH
74212: LD_INT 2
74214: NEG
74215: PUSH
74216: EMPTY
74217: LIST
74218: LIST
74219: PUSH
74220: LD_INT 0
74222: PUSH
74223: LD_INT 2
74225: NEG
74226: PUSH
74227: EMPTY
74228: LIST
74229: LIST
74230: PUSH
74231: LD_INT 1
74233: PUSH
74234: LD_INT 1
74236: NEG
74237: PUSH
74238: EMPTY
74239: LIST
74240: LIST
74241: PUSH
74242: LD_INT 2
74244: PUSH
74245: LD_INT 0
74247: PUSH
74248: EMPTY
74249: LIST
74250: LIST
74251: PUSH
74252: LD_INT 2
74254: PUSH
74255: LD_INT 1
74257: PUSH
74258: EMPTY
74259: LIST
74260: LIST
74261: PUSH
74262: LD_INT 2
74264: PUSH
74265: LD_INT 2
74267: PUSH
74268: EMPTY
74269: LIST
74270: LIST
74271: PUSH
74272: LD_INT 1
74274: PUSH
74275: LD_INT 2
74277: PUSH
74278: EMPTY
74279: LIST
74280: LIST
74281: PUSH
74282: LD_INT 0
74284: PUSH
74285: LD_INT 2
74287: PUSH
74288: EMPTY
74289: LIST
74290: LIST
74291: PUSH
74292: LD_INT 1
74294: NEG
74295: PUSH
74296: LD_INT 1
74298: PUSH
74299: EMPTY
74300: LIST
74301: LIST
74302: PUSH
74303: LD_INT 2
74305: NEG
74306: PUSH
74307: LD_INT 0
74309: PUSH
74310: EMPTY
74311: LIST
74312: LIST
74313: PUSH
74314: LD_INT 2
74316: NEG
74317: PUSH
74318: LD_INT 1
74320: NEG
74321: PUSH
74322: EMPTY
74323: LIST
74324: LIST
74325: PUSH
74326: LD_INT 2
74328: NEG
74329: PUSH
74330: LD_INT 2
74332: NEG
74333: PUSH
74334: EMPTY
74335: LIST
74336: LIST
74337: PUSH
74338: EMPTY
74339: LIST
74340: LIST
74341: LIST
74342: LIST
74343: LIST
74344: LIST
74345: LIST
74346: LIST
74347: LIST
74348: LIST
74349: LIST
74350: LIST
74351: LIST
74352: LIST
74353: LIST
74354: LIST
74355: LIST
74356: LIST
74357: LIST
74358: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74359: LD_ADDR_VAR 0 55
74363: PUSH
74364: LD_INT 0
74366: PUSH
74367: LD_INT 0
74369: PUSH
74370: EMPTY
74371: LIST
74372: LIST
74373: PUSH
74374: LD_INT 0
74376: PUSH
74377: LD_INT 1
74379: NEG
74380: PUSH
74381: EMPTY
74382: LIST
74383: LIST
74384: PUSH
74385: LD_INT 1
74387: PUSH
74388: LD_INT 0
74390: PUSH
74391: EMPTY
74392: LIST
74393: LIST
74394: PUSH
74395: LD_INT 1
74397: PUSH
74398: LD_INT 1
74400: PUSH
74401: EMPTY
74402: LIST
74403: LIST
74404: PUSH
74405: LD_INT 0
74407: PUSH
74408: LD_INT 1
74410: PUSH
74411: EMPTY
74412: LIST
74413: LIST
74414: PUSH
74415: LD_INT 1
74417: NEG
74418: PUSH
74419: LD_INT 0
74421: PUSH
74422: EMPTY
74423: LIST
74424: LIST
74425: PUSH
74426: LD_INT 1
74428: NEG
74429: PUSH
74430: LD_INT 1
74432: NEG
74433: PUSH
74434: EMPTY
74435: LIST
74436: LIST
74437: PUSH
74438: LD_INT 1
74440: NEG
74441: PUSH
74442: LD_INT 2
74444: NEG
74445: PUSH
74446: EMPTY
74447: LIST
74448: LIST
74449: PUSH
74450: LD_INT 0
74452: PUSH
74453: LD_INT 2
74455: NEG
74456: PUSH
74457: EMPTY
74458: LIST
74459: LIST
74460: PUSH
74461: LD_INT 1
74463: PUSH
74464: LD_INT 1
74466: NEG
74467: PUSH
74468: EMPTY
74469: LIST
74470: LIST
74471: PUSH
74472: LD_INT 2
74474: PUSH
74475: LD_INT 0
74477: PUSH
74478: EMPTY
74479: LIST
74480: LIST
74481: PUSH
74482: LD_INT 2
74484: PUSH
74485: LD_INT 1
74487: PUSH
74488: EMPTY
74489: LIST
74490: LIST
74491: PUSH
74492: LD_INT 2
74494: PUSH
74495: LD_INT 2
74497: PUSH
74498: EMPTY
74499: LIST
74500: LIST
74501: PUSH
74502: LD_INT 1
74504: PUSH
74505: LD_INT 2
74507: PUSH
74508: EMPTY
74509: LIST
74510: LIST
74511: PUSH
74512: LD_INT 0
74514: PUSH
74515: LD_INT 2
74517: PUSH
74518: EMPTY
74519: LIST
74520: LIST
74521: PUSH
74522: LD_INT 1
74524: NEG
74525: PUSH
74526: LD_INT 1
74528: PUSH
74529: EMPTY
74530: LIST
74531: LIST
74532: PUSH
74533: LD_INT 2
74535: NEG
74536: PUSH
74537: LD_INT 0
74539: PUSH
74540: EMPTY
74541: LIST
74542: LIST
74543: PUSH
74544: LD_INT 2
74546: NEG
74547: PUSH
74548: LD_INT 1
74550: NEG
74551: PUSH
74552: EMPTY
74553: LIST
74554: LIST
74555: PUSH
74556: LD_INT 2
74558: NEG
74559: PUSH
74560: LD_INT 2
74562: NEG
74563: PUSH
74564: EMPTY
74565: LIST
74566: LIST
74567: PUSH
74568: EMPTY
74569: LIST
74570: LIST
74571: LIST
74572: LIST
74573: LIST
74574: LIST
74575: LIST
74576: LIST
74577: LIST
74578: LIST
74579: LIST
74580: LIST
74581: LIST
74582: LIST
74583: LIST
74584: LIST
74585: LIST
74586: LIST
74587: LIST
74588: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74589: LD_ADDR_VAR 0 56
74593: PUSH
74594: LD_INT 0
74596: PUSH
74597: LD_INT 0
74599: PUSH
74600: EMPTY
74601: LIST
74602: LIST
74603: PUSH
74604: LD_INT 0
74606: PUSH
74607: LD_INT 1
74609: NEG
74610: PUSH
74611: EMPTY
74612: LIST
74613: LIST
74614: PUSH
74615: LD_INT 1
74617: PUSH
74618: LD_INT 0
74620: PUSH
74621: EMPTY
74622: LIST
74623: LIST
74624: PUSH
74625: LD_INT 1
74627: PUSH
74628: LD_INT 1
74630: PUSH
74631: EMPTY
74632: LIST
74633: LIST
74634: PUSH
74635: LD_INT 0
74637: PUSH
74638: LD_INT 1
74640: PUSH
74641: EMPTY
74642: LIST
74643: LIST
74644: PUSH
74645: LD_INT 1
74647: NEG
74648: PUSH
74649: LD_INT 0
74651: PUSH
74652: EMPTY
74653: LIST
74654: LIST
74655: PUSH
74656: LD_INT 1
74658: NEG
74659: PUSH
74660: LD_INT 1
74662: NEG
74663: PUSH
74664: EMPTY
74665: LIST
74666: LIST
74667: PUSH
74668: LD_INT 1
74670: NEG
74671: PUSH
74672: LD_INT 2
74674: NEG
74675: PUSH
74676: EMPTY
74677: LIST
74678: LIST
74679: PUSH
74680: LD_INT 0
74682: PUSH
74683: LD_INT 2
74685: NEG
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: PUSH
74691: LD_INT 1
74693: PUSH
74694: LD_INT 1
74696: NEG
74697: PUSH
74698: EMPTY
74699: LIST
74700: LIST
74701: PUSH
74702: LD_INT 2
74704: PUSH
74705: LD_INT 0
74707: PUSH
74708: EMPTY
74709: LIST
74710: LIST
74711: PUSH
74712: LD_INT 2
74714: PUSH
74715: LD_INT 1
74717: PUSH
74718: EMPTY
74719: LIST
74720: LIST
74721: PUSH
74722: LD_INT 2
74724: PUSH
74725: LD_INT 2
74727: PUSH
74728: EMPTY
74729: LIST
74730: LIST
74731: PUSH
74732: LD_INT 1
74734: PUSH
74735: LD_INT 2
74737: PUSH
74738: EMPTY
74739: LIST
74740: LIST
74741: PUSH
74742: LD_INT 0
74744: PUSH
74745: LD_INT 2
74747: PUSH
74748: EMPTY
74749: LIST
74750: LIST
74751: PUSH
74752: LD_INT 1
74754: NEG
74755: PUSH
74756: LD_INT 1
74758: PUSH
74759: EMPTY
74760: LIST
74761: LIST
74762: PUSH
74763: LD_INT 2
74765: NEG
74766: PUSH
74767: LD_INT 0
74769: PUSH
74770: EMPTY
74771: LIST
74772: LIST
74773: PUSH
74774: LD_INT 2
74776: NEG
74777: PUSH
74778: LD_INT 1
74780: NEG
74781: PUSH
74782: EMPTY
74783: LIST
74784: LIST
74785: PUSH
74786: LD_INT 2
74788: NEG
74789: PUSH
74790: LD_INT 2
74792: NEG
74793: PUSH
74794: EMPTY
74795: LIST
74796: LIST
74797: PUSH
74798: EMPTY
74799: LIST
74800: LIST
74801: LIST
74802: LIST
74803: LIST
74804: LIST
74805: LIST
74806: LIST
74807: LIST
74808: LIST
74809: LIST
74810: LIST
74811: LIST
74812: LIST
74813: LIST
74814: LIST
74815: LIST
74816: LIST
74817: LIST
74818: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74819: LD_ADDR_VAR 0 57
74823: PUSH
74824: LD_INT 0
74826: PUSH
74827: LD_INT 0
74829: PUSH
74830: EMPTY
74831: LIST
74832: LIST
74833: PUSH
74834: LD_INT 0
74836: PUSH
74837: LD_INT 1
74839: NEG
74840: PUSH
74841: EMPTY
74842: LIST
74843: LIST
74844: PUSH
74845: LD_INT 1
74847: PUSH
74848: LD_INT 0
74850: PUSH
74851: EMPTY
74852: LIST
74853: LIST
74854: PUSH
74855: LD_INT 1
74857: PUSH
74858: LD_INT 1
74860: PUSH
74861: EMPTY
74862: LIST
74863: LIST
74864: PUSH
74865: LD_INT 0
74867: PUSH
74868: LD_INT 1
74870: PUSH
74871: EMPTY
74872: LIST
74873: LIST
74874: PUSH
74875: LD_INT 1
74877: NEG
74878: PUSH
74879: LD_INT 0
74881: PUSH
74882: EMPTY
74883: LIST
74884: LIST
74885: PUSH
74886: LD_INT 1
74888: NEG
74889: PUSH
74890: LD_INT 1
74892: NEG
74893: PUSH
74894: EMPTY
74895: LIST
74896: LIST
74897: PUSH
74898: LD_INT 1
74900: NEG
74901: PUSH
74902: LD_INT 2
74904: NEG
74905: PUSH
74906: EMPTY
74907: LIST
74908: LIST
74909: PUSH
74910: LD_INT 0
74912: PUSH
74913: LD_INT 2
74915: NEG
74916: PUSH
74917: EMPTY
74918: LIST
74919: LIST
74920: PUSH
74921: LD_INT 1
74923: PUSH
74924: LD_INT 1
74926: NEG
74927: PUSH
74928: EMPTY
74929: LIST
74930: LIST
74931: PUSH
74932: LD_INT 2
74934: PUSH
74935: LD_INT 0
74937: PUSH
74938: EMPTY
74939: LIST
74940: LIST
74941: PUSH
74942: LD_INT 2
74944: PUSH
74945: LD_INT 1
74947: PUSH
74948: EMPTY
74949: LIST
74950: LIST
74951: PUSH
74952: LD_INT 2
74954: PUSH
74955: LD_INT 2
74957: PUSH
74958: EMPTY
74959: LIST
74960: LIST
74961: PUSH
74962: LD_INT 1
74964: PUSH
74965: LD_INT 2
74967: PUSH
74968: EMPTY
74969: LIST
74970: LIST
74971: PUSH
74972: LD_INT 0
74974: PUSH
74975: LD_INT 2
74977: PUSH
74978: EMPTY
74979: LIST
74980: LIST
74981: PUSH
74982: LD_INT 1
74984: NEG
74985: PUSH
74986: LD_INT 1
74988: PUSH
74989: EMPTY
74990: LIST
74991: LIST
74992: PUSH
74993: LD_INT 2
74995: NEG
74996: PUSH
74997: LD_INT 0
74999: PUSH
75000: EMPTY
75001: LIST
75002: LIST
75003: PUSH
75004: LD_INT 2
75006: NEG
75007: PUSH
75008: LD_INT 1
75010: NEG
75011: PUSH
75012: EMPTY
75013: LIST
75014: LIST
75015: PUSH
75016: LD_INT 2
75018: NEG
75019: PUSH
75020: LD_INT 2
75022: NEG
75023: PUSH
75024: EMPTY
75025: LIST
75026: LIST
75027: PUSH
75028: EMPTY
75029: LIST
75030: LIST
75031: LIST
75032: LIST
75033: LIST
75034: LIST
75035: LIST
75036: LIST
75037: LIST
75038: LIST
75039: LIST
75040: LIST
75041: LIST
75042: LIST
75043: LIST
75044: LIST
75045: LIST
75046: LIST
75047: LIST
75048: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75049: LD_ADDR_VAR 0 58
75053: PUSH
75054: LD_INT 0
75056: PUSH
75057: LD_INT 0
75059: PUSH
75060: EMPTY
75061: LIST
75062: LIST
75063: PUSH
75064: LD_INT 0
75066: PUSH
75067: LD_INT 1
75069: NEG
75070: PUSH
75071: EMPTY
75072: LIST
75073: LIST
75074: PUSH
75075: LD_INT 1
75077: PUSH
75078: LD_INT 0
75080: PUSH
75081: EMPTY
75082: LIST
75083: LIST
75084: PUSH
75085: LD_INT 1
75087: PUSH
75088: LD_INT 1
75090: PUSH
75091: EMPTY
75092: LIST
75093: LIST
75094: PUSH
75095: LD_INT 0
75097: PUSH
75098: LD_INT 1
75100: PUSH
75101: EMPTY
75102: LIST
75103: LIST
75104: PUSH
75105: LD_INT 1
75107: NEG
75108: PUSH
75109: LD_INT 0
75111: PUSH
75112: EMPTY
75113: LIST
75114: LIST
75115: PUSH
75116: LD_INT 1
75118: NEG
75119: PUSH
75120: LD_INT 1
75122: NEG
75123: PUSH
75124: EMPTY
75125: LIST
75126: LIST
75127: PUSH
75128: LD_INT 1
75130: NEG
75131: PUSH
75132: LD_INT 2
75134: NEG
75135: PUSH
75136: EMPTY
75137: LIST
75138: LIST
75139: PUSH
75140: LD_INT 0
75142: PUSH
75143: LD_INT 2
75145: NEG
75146: PUSH
75147: EMPTY
75148: LIST
75149: LIST
75150: PUSH
75151: LD_INT 1
75153: PUSH
75154: LD_INT 1
75156: NEG
75157: PUSH
75158: EMPTY
75159: LIST
75160: LIST
75161: PUSH
75162: LD_INT 2
75164: PUSH
75165: LD_INT 0
75167: PUSH
75168: EMPTY
75169: LIST
75170: LIST
75171: PUSH
75172: LD_INT 2
75174: PUSH
75175: LD_INT 1
75177: PUSH
75178: EMPTY
75179: LIST
75180: LIST
75181: PUSH
75182: LD_INT 2
75184: PUSH
75185: LD_INT 2
75187: PUSH
75188: EMPTY
75189: LIST
75190: LIST
75191: PUSH
75192: LD_INT 1
75194: PUSH
75195: LD_INT 2
75197: PUSH
75198: EMPTY
75199: LIST
75200: LIST
75201: PUSH
75202: LD_INT 0
75204: PUSH
75205: LD_INT 2
75207: PUSH
75208: EMPTY
75209: LIST
75210: LIST
75211: PUSH
75212: LD_INT 1
75214: NEG
75215: PUSH
75216: LD_INT 1
75218: PUSH
75219: EMPTY
75220: LIST
75221: LIST
75222: PUSH
75223: LD_INT 2
75225: NEG
75226: PUSH
75227: LD_INT 0
75229: PUSH
75230: EMPTY
75231: LIST
75232: LIST
75233: PUSH
75234: LD_INT 2
75236: NEG
75237: PUSH
75238: LD_INT 1
75240: NEG
75241: PUSH
75242: EMPTY
75243: LIST
75244: LIST
75245: PUSH
75246: LD_INT 2
75248: NEG
75249: PUSH
75250: LD_INT 2
75252: NEG
75253: PUSH
75254: EMPTY
75255: LIST
75256: LIST
75257: PUSH
75258: EMPTY
75259: LIST
75260: LIST
75261: LIST
75262: LIST
75263: LIST
75264: LIST
75265: LIST
75266: LIST
75267: LIST
75268: LIST
75269: LIST
75270: LIST
75271: LIST
75272: LIST
75273: LIST
75274: LIST
75275: LIST
75276: LIST
75277: LIST
75278: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75279: LD_ADDR_VAR 0 59
75283: PUSH
75284: LD_INT 0
75286: PUSH
75287: LD_INT 0
75289: PUSH
75290: EMPTY
75291: LIST
75292: LIST
75293: PUSH
75294: LD_INT 0
75296: PUSH
75297: LD_INT 1
75299: NEG
75300: PUSH
75301: EMPTY
75302: LIST
75303: LIST
75304: PUSH
75305: LD_INT 1
75307: PUSH
75308: LD_INT 0
75310: PUSH
75311: EMPTY
75312: LIST
75313: LIST
75314: PUSH
75315: LD_INT 1
75317: PUSH
75318: LD_INT 1
75320: PUSH
75321: EMPTY
75322: LIST
75323: LIST
75324: PUSH
75325: LD_INT 0
75327: PUSH
75328: LD_INT 1
75330: PUSH
75331: EMPTY
75332: LIST
75333: LIST
75334: PUSH
75335: LD_INT 1
75337: NEG
75338: PUSH
75339: LD_INT 0
75341: PUSH
75342: EMPTY
75343: LIST
75344: LIST
75345: PUSH
75346: LD_INT 1
75348: NEG
75349: PUSH
75350: LD_INT 1
75352: NEG
75353: PUSH
75354: EMPTY
75355: LIST
75356: LIST
75357: PUSH
75358: EMPTY
75359: LIST
75360: LIST
75361: LIST
75362: LIST
75363: LIST
75364: LIST
75365: LIST
75366: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75367: LD_ADDR_VAR 0 60
75371: PUSH
75372: LD_INT 0
75374: PUSH
75375: LD_INT 0
75377: PUSH
75378: EMPTY
75379: LIST
75380: LIST
75381: PUSH
75382: LD_INT 0
75384: PUSH
75385: LD_INT 1
75387: NEG
75388: PUSH
75389: EMPTY
75390: LIST
75391: LIST
75392: PUSH
75393: LD_INT 1
75395: PUSH
75396: LD_INT 0
75398: PUSH
75399: EMPTY
75400: LIST
75401: LIST
75402: PUSH
75403: LD_INT 1
75405: PUSH
75406: LD_INT 1
75408: PUSH
75409: EMPTY
75410: LIST
75411: LIST
75412: PUSH
75413: LD_INT 0
75415: PUSH
75416: LD_INT 1
75418: PUSH
75419: EMPTY
75420: LIST
75421: LIST
75422: PUSH
75423: LD_INT 1
75425: NEG
75426: PUSH
75427: LD_INT 0
75429: PUSH
75430: EMPTY
75431: LIST
75432: LIST
75433: PUSH
75434: LD_INT 1
75436: NEG
75437: PUSH
75438: LD_INT 1
75440: NEG
75441: PUSH
75442: EMPTY
75443: LIST
75444: LIST
75445: PUSH
75446: EMPTY
75447: LIST
75448: LIST
75449: LIST
75450: LIST
75451: LIST
75452: LIST
75453: LIST
75454: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75455: LD_ADDR_VAR 0 61
75459: PUSH
75460: LD_INT 0
75462: PUSH
75463: LD_INT 0
75465: PUSH
75466: EMPTY
75467: LIST
75468: LIST
75469: PUSH
75470: LD_INT 0
75472: PUSH
75473: LD_INT 1
75475: NEG
75476: PUSH
75477: EMPTY
75478: LIST
75479: LIST
75480: PUSH
75481: LD_INT 1
75483: PUSH
75484: LD_INT 0
75486: PUSH
75487: EMPTY
75488: LIST
75489: LIST
75490: PUSH
75491: LD_INT 1
75493: PUSH
75494: LD_INT 1
75496: PUSH
75497: EMPTY
75498: LIST
75499: LIST
75500: PUSH
75501: LD_INT 0
75503: PUSH
75504: LD_INT 1
75506: PUSH
75507: EMPTY
75508: LIST
75509: LIST
75510: PUSH
75511: LD_INT 1
75513: NEG
75514: PUSH
75515: LD_INT 0
75517: PUSH
75518: EMPTY
75519: LIST
75520: LIST
75521: PUSH
75522: LD_INT 1
75524: NEG
75525: PUSH
75526: LD_INT 1
75528: NEG
75529: PUSH
75530: EMPTY
75531: LIST
75532: LIST
75533: PUSH
75534: EMPTY
75535: LIST
75536: LIST
75537: LIST
75538: LIST
75539: LIST
75540: LIST
75541: LIST
75542: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75543: LD_ADDR_VAR 0 62
75547: PUSH
75548: LD_INT 0
75550: PUSH
75551: LD_INT 0
75553: PUSH
75554: EMPTY
75555: LIST
75556: LIST
75557: PUSH
75558: LD_INT 0
75560: PUSH
75561: LD_INT 1
75563: NEG
75564: PUSH
75565: EMPTY
75566: LIST
75567: LIST
75568: PUSH
75569: LD_INT 1
75571: PUSH
75572: LD_INT 0
75574: PUSH
75575: EMPTY
75576: LIST
75577: LIST
75578: PUSH
75579: LD_INT 1
75581: PUSH
75582: LD_INT 1
75584: PUSH
75585: EMPTY
75586: LIST
75587: LIST
75588: PUSH
75589: LD_INT 0
75591: PUSH
75592: LD_INT 1
75594: PUSH
75595: EMPTY
75596: LIST
75597: LIST
75598: PUSH
75599: LD_INT 1
75601: NEG
75602: PUSH
75603: LD_INT 0
75605: PUSH
75606: EMPTY
75607: LIST
75608: LIST
75609: PUSH
75610: LD_INT 1
75612: NEG
75613: PUSH
75614: LD_INT 1
75616: NEG
75617: PUSH
75618: EMPTY
75619: LIST
75620: LIST
75621: PUSH
75622: EMPTY
75623: LIST
75624: LIST
75625: LIST
75626: LIST
75627: LIST
75628: LIST
75629: LIST
75630: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75631: LD_ADDR_VAR 0 63
75635: PUSH
75636: LD_INT 0
75638: PUSH
75639: LD_INT 0
75641: PUSH
75642: EMPTY
75643: LIST
75644: LIST
75645: PUSH
75646: LD_INT 0
75648: PUSH
75649: LD_INT 1
75651: NEG
75652: PUSH
75653: EMPTY
75654: LIST
75655: LIST
75656: PUSH
75657: LD_INT 1
75659: PUSH
75660: LD_INT 0
75662: PUSH
75663: EMPTY
75664: LIST
75665: LIST
75666: PUSH
75667: LD_INT 1
75669: PUSH
75670: LD_INT 1
75672: PUSH
75673: EMPTY
75674: LIST
75675: LIST
75676: PUSH
75677: LD_INT 0
75679: PUSH
75680: LD_INT 1
75682: PUSH
75683: EMPTY
75684: LIST
75685: LIST
75686: PUSH
75687: LD_INT 1
75689: NEG
75690: PUSH
75691: LD_INT 0
75693: PUSH
75694: EMPTY
75695: LIST
75696: LIST
75697: PUSH
75698: LD_INT 1
75700: NEG
75701: PUSH
75702: LD_INT 1
75704: NEG
75705: PUSH
75706: EMPTY
75707: LIST
75708: LIST
75709: PUSH
75710: EMPTY
75711: LIST
75712: LIST
75713: LIST
75714: LIST
75715: LIST
75716: LIST
75717: LIST
75718: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75719: LD_ADDR_VAR 0 64
75723: PUSH
75724: LD_INT 0
75726: PUSH
75727: LD_INT 0
75729: PUSH
75730: EMPTY
75731: LIST
75732: LIST
75733: PUSH
75734: LD_INT 0
75736: PUSH
75737: LD_INT 1
75739: NEG
75740: PUSH
75741: EMPTY
75742: LIST
75743: LIST
75744: PUSH
75745: LD_INT 1
75747: PUSH
75748: LD_INT 0
75750: PUSH
75751: EMPTY
75752: LIST
75753: LIST
75754: PUSH
75755: LD_INT 1
75757: PUSH
75758: LD_INT 1
75760: PUSH
75761: EMPTY
75762: LIST
75763: LIST
75764: PUSH
75765: LD_INT 0
75767: PUSH
75768: LD_INT 1
75770: PUSH
75771: EMPTY
75772: LIST
75773: LIST
75774: PUSH
75775: LD_INT 1
75777: NEG
75778: PUSH
75779: LD_INT 0
75781: PUSH
75782: EMPTY
75783: LIST
75784: LIST
75785: PUSH
75786: LD_INT 1
75788: NEG
75789: PUSH
75790: LD_INT 1
75792: NEG
75793: PUSH
75794: EMPTY
75795: LIST
75796: LIST
75797: PUSH
75798: EMPTY
75799: LIST
75800: LIST
75801: LIST
75802: LIST
75803: LIST
75804: LIST
75805: LIST
75806: ST_TO_ADDR
// end ; 1 :
75807: GO 81704
75809: LD_INT 1
75811: DOUBLE
75812: EQUAL
75813: IFTRUE 75817
75815: GO 78440
75817: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
75818: LD_ADDR_VAR 0 11
75822: PUSH
75823: LD_INT 1
75825: NEG
75826: PUSH
75827: LD_INT 3
75829: NEG
75830: PUSH
75831: EMPTY
75832: LIST
75833: LIST
75834: PUSH
75835: LD_INT 0
75837: PUSH
75838: LD_INT 3
75840: NEG
75841: PUSH
75842: EMPTY
75843: LIST
75844: LIST
75845: PUSH
75846: LD_INT 1
75848: PUSH
75849: LD_INT 2
75851: NEG
75852: PUSH
75853: EMPTY
75854: LIST
75855: LIST
75856: PUSH
75857: EMPTY
75858: LIST
75859: LIST
75860: LIST
75861: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
75862: LD_ADDR_VAR 0 12
75866: PUSH
75867: LD_INT 2
75869: PUSH
75870: LD_INT 1
75872: NEG
75873: PUSH
75874: EMPTY
75875: LIST
75876: LIST
75877: PUSH
75878: LD_INT 3
75880: PUSH
75881: LD_INT 0
75883: PUSH
75884: EMPTY
75885: LIST
75886: LIST
75887: PUSH
75888: LD_INT 3
75890: PUSH
75891: LD_INT 1
75893: PUSH
75894: EMPTY
75895: LIST
75896: LIST
75897: PUSH
75898: EMPTY
75899: LIST
75900: LIST
75901: LIST
75902: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
75903: LD_ADDR_VAR 0 13
75907: PUSH
75908: LD_INT 3
75910: PUSH
75911: LD_INT 2
75913: PUSH
75914: EMPTY
75915: LIST
75916: LIST
75917: PUSH
75918: LD_INT 3
75920: PUSH
75921: LD_INT 3
75923: PUSH
75924: EMPTY
75925: LIST
75926: LIST
75927: PUSH
75928: LD_INT 2
75930: PUSH
75931: LD_INT 3
75933: PUSH
75934: EMPTY
75935: LIST
75936: LIST
75937: PUSH
75938: EMPTY
75939: LIST
75940: LIST
75941: LIST
75942: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
75943: LD_ADDR_VAR 0 14
75947: PUSH
75948: LD_INT 1
75950: PUSH
75951: LD_INT 3
75953: PUSH
75954: EMPTY
75955: LIST
75956: LIST
75957: PUSH
75958: LD_INT 0
75960: PUSH
75961: LD_INT 3
75963: PUSH
75964: EMPTY
75965: LIST
75966: LIST
75967: PUSH
75968: LD_INT 1
75970: NEG
75971: PUSH
75972: LD_INT 2
75974: PUSH
75975: EMPTY
75976: LIST
75977: LIST
75978: PUSH
75979: EMPTY
75980: LIST
75981: LIST
75982: LIST
75983: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
75984: LD_ADDR_VAR 0 15
75988: PUSH
75989: LD_INT 2
75991: NEG
75992: PUSH
75993: LD_INT 1
75995: PUSH
75996: EMPTY
75997: LIST
75998: LIST
75999: PUSH
76000: LD_INT 3
76002: NEG
76003: PUSH
76004: LD_INT 0
76006: PUSH
76007: EMPTY
76008: LIST
76009: LIST
76010: PUSH
76011: LD_INT 3
76013: NEG
76014: PUSH
76015: LD_INT 1
76017: NEG
76018: PUSH
76019: EMPTY
76020: LIST
76021: LIST
76022: PUSH
76023: EMPTY
76024: LIST
76025: LIST
76026: LIST
76027: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76028: LD_ADDR_VAR 0 16
76032: PUSH
76033: LD_INT 2
76035: NEG
76036: PUSH
76037: LD_INT 3
76039: NEG
76040: PUSH
76041: EMPTY
76042: LIST
76043: LIST
76044: PUSH
76045: LD_INT 3
76047: NEG
76048: PUSH
76049: LD_INT 2
76051: NEG
76052: PUSH
76053: EMPTY
76054: LIST
76055: LIST
76056: PUSH
76057: LD_INT 3
76059: NEG
76060: PUSH
76061: LD_INT 3
76063: NEG
76064: PUSH
76065: EMPTY
76066: LIST
76067: LIST
76068: PUSH
76069: EMPTY
76070: LIST
76071: LIST
76072: LIST
76073: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
76074: LD_ADDR_VAR 0 17
76078: PUSH
76079: LD_INT 1
76081: NEG
76082: PUSH
76083: LD_INT 3
76085: NEG
76086: PUSH
76087: EMPTY
76088: LIST
76089: LIST
76090: PUSH
76091: LD_INT 0
76093: PUSH
76094: LD_INT 3
76096: NEG
76097: PUSH
76098: EMPTY
76099: LIST
76100: LIST
76101: PUSH
76102: LD_INT 1
76104: PUSH
76105: LD_INT 2
76107: NEG
76108: PUSH
76109: EMPTY
76110: LIST
76111: LIST
76112: PUSH
76113: EMPTY
76114: LIST
76115: LIST
76116: LIST
76117: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
76118: LD_ADDR_VAR 0 18
76122: PUSH
76123: LD_INT 2
76125: PUSH
76126: LD_INT 1
76128: NEG
76129: PUSH
76130: EMPTY
76131: LIST
76132: LIST
76133: PUSH
76134: LD_INT 3
76136: PUSH
76137: LD_INT 0
76139: PUSH
76140: EMPTY
76141: LIST
76142: LIST
76143: PUSH
76144: LD_INT 3
76146: PUSH
76147: LD_INT 1
76149: PUSH
76150: EMPTY
76151: LIST
76152: LIST
76153: PUSH
76154: EMPTY
76155: LIST
76156: LIST
76157: LIST
76158: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
76159: LD_ADDR_VAR 0 19
76163: PUSH
76164: LD_INT 3
76166: PUSH
76167: LD_INT 2
76169: PUSH
76170: EMPTY
76171: LIST
76172: LIST
76173: PUSH
76174: LD_INT 3
76176: PUSH
76177: LD_INT 3
76179: PUSH
76180: EMPTY
76181: LIST
76182: LIST
76183: PUSH
76184: LD_INT 2
76186: PUSH
76187: LD_INT 3
76189: PUSH
76190: EMPTY
76191: LIST
76192: LIST
76193: PUSH
76194: EMPTY
76195: LIST
76196: LIST
76197: LIST
76198: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
76199: LD_ADDR_VAR 0 20
76203: PUSH
76204: LD_INT 1
76206: PUSH
76207: LD_INT 3
76209: PUSH
76210: EMPTY
76211: LIST
76212: LIST
76213: PUSH
76214: LD_INT 0
76216: PUSH
76217: LD_INT 3
76219: PUSH
76220: EMPTY
76221: LIST
76222: LIST
76223: PUSH
76224: LD_INT 1
76226: NEG
76227: PUSH
76228: LD_INT 2
76230: PUSH
76231: EMPTY
76232: LIST
76233: LIST
76234: PUSH
76235: EMPTY
76236: LIST
76237: LIST
76238: LIST
76239: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76240: LD_ADDR_VAR 0 21
76244: PUSH
76245: LD_INT 2
76247: NEG
76248: PUSH
76249: LD_INT 1
76251: PUSH
76252: EMPTY
76253: LIST
76254: LIST
76255: PUSH
76256: LD_INT 3
76258: NEG
76259: PUSH
76260: LD_INT 0
76262: PUSH
76263: EMPTY
76264: LIST
76265: LIST
76266: PUSH
76267: LD_INT 3
76269: NEG
76270: PUSH
76271: LD_INT 1
76273: NEG
76274: PUSH
76275: EMPTY
76276: LIST
76277: LIST
76278: PUSH
76279: EMPTY
76280: LIST
76281: LIST
76282: LIST
76283: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76284: LD_ADDR_VAR 0 22
76288: PUSH
76289: LD_INT 2
76291: NEG
76292: PUSH
76293: LD_INT 3
76295: NEG
76296: PUSH
76297: EMPTY
76298: LIST
76299: LIST
76300: PUSH
76301: LD_INT 3
76303: NEG
76304: PUSH
76305: LD_INT 2
76307: NEG
76308: PUSH
76309: EMPTY
76310: LIST
76311: LIST
76312: PUSH
76313: LD_INT 3
76315: NEG
76316: PUSH
76317: LD_INT 3
76319: NEG
76320: PUSH
76321: EMPTY
76322: LIST
76323: LIST
76324: PUSH
76325: EMPTY
76326: LIST
76327: LIST
76328: LIST
76329: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
76330: LD_ADDR_VAR 0 23
76334: PUSH
76335: LD_INT 0
76337: PUSH
76338: LD_INT 3
76340: NEG
76341: PUSH
76342: EMPTY
76343: LIST
76344: LIST
76345: PUSH
76346: LD_INT 1
76348: NEG
76349: PUSH
76350: LD_INT 4
76352: NEG
76353: PUSH
76354: EMPTY
76355: LIST
76356: LIST
76357: PUSH
76358: LD_INT 1
76360: PUSH
76361: LD_INT 3
76363: NEG
76364: PUSH
76365: EMPTY
76366: LIST
76367: LIST
76368: PUSH
76369: EMPTY
76370: LIST
76371: LIST
76372: LIST
76373: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
76374: LD_ADDR_VAR 0 24
76378: PUSH
76379: LD_INT 3
76381: PUSH
76382: LD_INT 0
76384: PUSH
76385: EMPTY
76386: LIST
76387: LIST
76388: PUSH
76389: LD_INT 3
76391: PUSH
76392: LD_INT 1
76394: NEG
76395: PUSH
76396: EMPTY
76397: LIST
76398: LIST
76399: PUSH
76400: LD_INT 4
76402: PUSH
76403: LD_INT 1
76405: PUSH
76406: EMPTY
76407: LIST
76408: LIST
76409: PUSH
76410: EMPTY
76411: LIST
76412: LIST
76413: LIST
76414: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
76415: LD_ADDR_VAR 0 25
76419: PUSH
76420: LD_INT 3
76422: PUSH
76423: LD_INT 3
76425: PUSH
76426: EMPTY
76427: LIST
76428: LIST
76429: PUSH
76430: LD_INT 4
76432: PUSH
76433: LD_INT 3
76435: PUSH
76436: EMPTY
76437: LIST
76438: LIST
76439: PUSH
76440: LD_INT 3
76442: PUSH
76443: LD_INT 4
76445: PUSH
76446: EMPTY
76447: LIST
76448: LIST
76449: PUSH
76450: EMPTY
76451: LIST
76452: LIST
76453: LIST
76454: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
76455: LD_ADDR_VAR 0 26
76459: PUSH
76460: LD_INT 0
76462: PUSH
76463: LD_INT 3
76465: PUSH
76466: EMPTY
76467: LIST
76468: LIST
76469: PUSH
76470: LD_INT 1
76472: PUSH
76473: LD_INT 4
76475: PUSH
76476: EMPTY
76477: LIST
76478: LIST
76479: PUSH
76480: LD_INT 1
76482: NEG
76483: PUSH
76484: LD_INT 3
76486: PUSH
76487: EMPTY
76488: LIST
76489: LIST
76490: PUSH
76491: EMPTY
76492: LIST
76493: LIST
76494: LIST
76495: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
76496: LD_ADDR_VAR 0 27
76500: PUSH
76501: LD_INT 3
76503: NEG
76504: PUSH
76505: LD_INT 0
76507: PUSH
76508: EMPTY
76509: LIST
76510: LIST
76511: PUSH
76512: LD_INT 3
76514: NEG
76515: PUSH
76516: LD_INT 1
76518: PUSH
76519: EMPTY
76520: LIST
76521: LIST
76522: PUSH
76523: LD_INT 4
76525: NEG
76526: PUSH
76527: LD_INT 1
76529: NEG
76530: PUSH
76531: EMPTY
76532: LIST
76533: LIST
76534: PUSH
76535: EMPTY
76536: LIST
76537: LIST
76538: LIST
76539: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
76540: LD_ADDR_VAR 0 28
76544: PUSH
76545: LD_INT 3
76547: NEG
76548: PUSH
76549: LD_INT 3
76551: NEG
76552: PUSH
76553: EMPTY
76554: LIST
76555: LIST
76556: PUSH
76557: LD_INT 3
76559: NEG
76560: PUSH
76561: LD_INT 4
76563: NEG
76564: PUSH
76565: EMPTY
76566: LIST
76567: LIST
76568: PUSH
76569: LD_INT 4
76571: NEG
76572: PUSH
76573: LD_INT 3
76575: NEG
76576: PUSH
76577: EMPTY
76578: LIST
76579: LIST
76580: PUSH
76581: EMPTY
76582: LIST
76583: LIST
76584: LIST
76585: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
76586: LD_ADDR_VAR 0 29
76590: PUSH
76591: LD_INT 1
76593: NEG
76594: PUSH
76595: LD_INT 3
76597: NEG
76598: PUSH
76599: EMPTY
76600: LIST
76601: LIST
76602: PUSH
76603: LD_INT 0
76605: PUSH
76606: LD_INT 3
76608: NEG
76609: PUSH
76610: EMPTY
76611: LIST
76612: LIST
76613: PUSH
76614: LD_INT 1
76616: PUSH
76617: LD_INT 2
76619: NEG
76620: PUSH
76621: EMPTY
76622: LIST
76623: LIST
76624: PUSH
76625: LD_INT 1
76627: NEG
76628: PUSH
76629: LD_INT 4
76631: NEG
76632: PUSH
76633: EMPTY
76634: LIST
76635: LIST
76636: PUSH
76637: LD_INT 0
76639: PUSH
76640: LD_INT 4
76642: NEG
76643: PUSH
76644: EMPTY
76645: LIST
76646: LIST
76647: PUSH
76648: LD_INT 1
76650: PUSH
76651: LD_INT 3
76653: NEG
76654: PUSH
76655: EMPTY
76656: LIST
76657: LIST
76658: PUSH
76659: LD_INT 1
76661: NEG
76662: PUSH
76663: LD_INT 5
76665: NEG
76666: PUSH
76667: EMPTY
76668: LIST
76669: LIST
76670: PUSH
76671: LD_INT 0
76673: PUSH
76674: LD_INT 5
76676: NEG
76677: PUSH
76678: EMPTY
76679: LIST
76680: LIST
76681: PUSH
76682: LD_INT 1
76684: PUSH
76685: LD_INT 4
76687: NEG
76688: PUSH
76689: EMPTY
76690: LIST
76691: LIST
76692: PUSH
76693: LD_INT 1
76695: NEG
76696: PUSH
76697: LD_INT 6
76699: NEG
76700: PUSH
76701: EMPTY
76702: LIST
76703: LIST
76704: PUSH
76705: LD_INT 0
76707: PUSH
76708: LD_INT 6
76710: NEG
76711: PUSH
76712: EMPTY
76713: LIST
76714: LIST
76715: PUSH
76716: LD_INT 1
76718: PUSH
76719: LD_INT 5
76721: NEG
76722: PUSH
76723: EMPTY
76724: LIST
76725: LIST
76726: PUSH
76727: EMPTY
76728: LIST
76729: LIST
76730: LIST
76731: LIST
76732: LIST
76733: LIST
76734: LIST
76735: LIST
76736: LIST
76737: LIST
76738: LIST
76739: LIST
76740: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
76741: LD_ADDR_VAR 0 30
76745: PUSH
76746: LD_INT 2
76748: PUSH
76749: LD_INT 1
76751: NEG
76752: PUSH
76753: EMPTY
76754: LIST
76755: LIST
76756: PUSH
76757: LD_INT 3
76759: PUSH
76760: LD_INT 0
76762: PUSH
76763: EMPTY
76764: LIST
76765: LIST
76766: PUSH
76767: LD_INT 3
76769: PUSH
76770: LD_INT 1
76772: PUSH
76773: EMPTY
76774: LIST
76775: LIST
76776: PUSH
76777: LD_INT 3
76779: PUSH
76780: LD_INT 1
76782: NEG
76783: PUSH
76784: EMPTY
76785: LIST
76786: LIST
76787: PUSH
76788: LD_INT 4
76790: PUSH
76791: LD_INT 0
76793: PUSH
76794: EMPTY
76795: LIST
76796: LIST
76797: PUSH
76798: LD_INT 4
76800: PUSH
76801: LD_INT 1
76803: PUSH
76804: EMPTY
76805: LIST
76806: LIST
76807: PUSH
76808: LD_INT 4
76810: PUSH
76811: LD_INT 1
76813: NEG
76814: PUSH
76815: EMPTY
76816: LIST
76817: LIST
76818: PUSH
76819: LD_INT 5
76821: PUSH
76822: LD_INT 0
76824: PUSH
76825: EMPTY
76826: LIST
76827: LIST
76828: PUSH
76829: LD_INT 5
76831: PUSH
76832: LD_INT 1
76834: PUSH
76835: EMPTY
76836: LIST
76837: LIST
76838: PUSH
76839: LD_INT 5
76841: PUSH
76842: LD_INT 1
76844: NEG
76845: PUSH
76846: EMPTY
76847: LIST
76848: LIST
76849: PUSH
76850: LD_INT 6
76852: PUSH
76853: LD_INT 0
76855: PUSH
76856: EMPTY
76857: LIST
76858: LIST
76859: PUSH
76860: LD_INT 6
76862: PUSH
76863: LD_INT 1
76865: PUSH
76866: EMPTY
76867: LIST
76868: LIST
76869: PUSH
76870: EMPTY
76871: LIST
76872: LIST
76873: LIST
76874: LIST
76875: LIST
76876: LIST
76877: LIST
76878: LIST
76879: LIST
76880: LIST
76881: LIST
76882: LIST
76883: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
76884: LD_ADDR_VAR 0 31
76888: PUSH
76889: LD_INT 3
76891: PUSH
76892: LD_INT 2
76894: PUSH
76895: EMPTY
76896: LIST
76897: LIST
76898: PUSH
76899: LD_INT 3
76901: PUSH
76902: LD_INT 3
76904: PUSH
76905: EMPTY
76906: LIST
76907: LIST
76908: PUSH
76909: LD_INT 2
76911: PUSH
76912: LD_INT 3
76914: PUSH
76915: EMPTY
76916: LIST
76917: LIST
76918: PUSH
76919: LD_INT 4
76921: PUSH
76922: LD_INT 3
76924: PUSH
76925: EMPTY
76926: LIST
76927: LIST
76928: PUSH
76929: LD_INT 4
76931: PUSH
76932: LD_INT 4
76934: PUSH
76935: EMPTY
76936: LIST
76937: LIST
76938: PUSH
76939: LD_INT 3
76941: PUSH
76942: LD_INT 4
76944: PUSH
76945: EMPTY
76946: LIST
76947: LIST
76948: PUSH
76949: LD_INT 5
76951: PUSH
76952: LD_INT 4
76954: PUSH
76955: EMPTY
76956: LIST
76957: LIST
76958: PUSH
76959: LD_INT 5
76961: PUSH
76962: LD_INT 5
76964: PUSH
76965: EMPTY
76966: LIST
76967: LIST
76968: PUSH
76969: LD_INT 4
76971: PUSH
76972: LD_INT 5
76974: PUSH
76975: EMPTY
76976: LIST
76977: LIST
76978: PUSH
76979: LD_INT 6
76981: PUSH
76982: LD_INT 5
76984: PUSH
76985: EMPTY
76986: LIST
76987: LIST
76988: PUSH
76989: LD_INT 6
76991: PUSH
76992: LD_INT 6
76994: PUSH
76995: EMPTY
76996: LIST
76997: LIST
76998: PUSH
76999: LD_INT 5
77001: PUSH
77002: LD_INT 6
77004: PUSH
77005: EMPTY
77006: LIST
77007: LIST
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: LIST
77013: LIST
77014: LIST
77015: LIST
77016: LIST
77017: LIST
77018: LIST
77019: LIST
77020: LIST
77021: LIST
77022: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
77023: LD_ADDR_VAR 0 32
77027: PUSH
77028: LD_INT 1
77030: PUSH
77031: LD_INT 3
77033: PUSH
77034: EMPTY
77035: LIST
77036: LIST
77037: PUSH
77038: LD_INT 0
77040: PUSH
77041: LD_INT 3
77043: PUSH
77044: EMPTY
77045: LIST
77046: LIST
77047: PUSH
77048: LD_INT 1
77050: NEG
77051: PUSH
77052: LD_INT 2
77054: PUSH
77055: EMPTY
77056: LIST
77057: LIST
77058: PUSH
77059: LD_INT 1
77061: PUSH
77062: LD_INT 4
77064: PUSH
77065: EMPTY
77066: LIST
77067: LIST
77068: PUSH
77069: LD_INT 0
77071: PUSH
77072: LD_INT 4
77074: PUSH
77075: EMPTY
77076: LIST
77077: LIST
77078: PUSH
77079: LD_INT 1
77081: NEG
77082: PUSH
77083: LD_INT 3
77085: PUSH
77086: EMPTY
77087: LIST
77088: LIST
77089: PUSH
77090: LD_INT 1
77092: PUSH
77093: LD_INT 5
77095: PUSH
77096: EMPTY
77097: LIST
77098: LIST
77099: PUSH
77100: LD_INT 0
77102: PUSH
77103: LD_INT 5
77105: PUSH
77106: EMPTY
77107: LIST
77108: LIST
77109: PUSH
77110: LD_INT 1
77112: NEG
77113: PUSH
77114: LD_INT 4
77116: PUSH
77117: EMPTY
77118: LIST
77119: LIST
77120: PUSH
77121: LD_INT 1
77123: PUSH
77124: LD_INT 6
77126: PUSH
77127: EMPTY
77128: LIST
77129: LIST
77130: PUSH
77131: LD_INT 0
77133: PUSH
77134: LD_INT 6
77136: PUSH
77137: EMPTY
77138: LIST
77139: LIST
77140: PUSH
77141: LD_INT 1
77143: NEG
77144: PUSH
77145: LD_INT 5
77147: PUSH
77148: EMPTY
77149: LIST
77150: LIST
77151: PUSH
77152: EMPTY
77153: LIST
77154: LIST
77155: LIST
77156: LIST
77157: LIST
77158: LIST
77159: LIST
77160: LIST
77161: LIST
77162: LIST
77163: LIST
77164: LIST
77165: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
77166: LD_ADDR_VAR 0 33
77170: PUSH
77171: LD_INT 2
77173: NEG
77174: PUSH
77175: LD_INT 1
77177: PUSH
77178: EMPTY
77179: LIST
77180: LIST
77181: PUSH
77182: LD_INT 3
77184: NEG
77185: PUSH
77186: LD_INT 0
77188: PUSH
77189: EMPTY
77190: LIST
77191: LIST
77192: PUSH
77193: LD_INT 3
77195: NEG
77196: PUSH
77197: LD_INT 1
77199: NEG
77200: PUSH
77201: EMPTY
77202: LIST
77203: LIST
77204: PUSH
77205: LD_INT 3
77207: NEG
77208: PUSH
77209: LD_INT 1
77211: PUSH
77212: EMPTY
77213: LIST
77214: LIST
77215: PUSH
77216: LD_INT 4
77218: NEG
77219: PUSH
77220: LD_INT 0
77222: PUSH
77223: EMPTY
77224: LIST
77225: LIST
77226: PUSH
77227: LD_INT 4
77229: NEG
77230: PUSH
77231: LD_INT 1
77233: NEG
77234: PUSH
77235: EMPTY
77236: LIST
77237: LIST
77238: PUSH
77239: LD_INT 4
77241: NEG
77242: PUSH
77243: LD_INT 1
77245: PUSH
77246: EMPTY
77247: LIST
77248: LIST
77249: PUSH
77250: LD_INT 5
77252: NEG
77253: PUSH
77254: LD_INT 0
77256: PUSH
77257: EMPTY
77258: LIST
77259: LIST
77260: PUSH
77261: LD_INT 5
77263: NEG
77264: PUSH
77265: LD_INT 1
77267: NEG
77268: PUSH
77269: EMPTY
77270: LIST
77271: LIST
77272: PUSH
77273: LD_INT 5
77275: NEG
77276: PUSH
77277: LD_INT 1
77279: PUSH
77280: EMPTY
77281: LIST
77282: LIST
77283: PUSH
77284: LD_INT 6
77286: NEG
77287: PUSH
77288: LD_INT 0
77290: PUSH
77291: EMPTY
77292: LIST
77293: LIST
77294: PUSH
77295: LD_INT 6
77297: NEG
77298: PUSH
77299: LD_INT 1
77301: NEG
77302: PUSH
77303: EMPTY
77304: LIST
77305: LIST
77306: PUSH
77307: EMPTY
77308: LIST
77309: LIST
77310: LIST
77311: LIST
77312: LIST
77313: LIST
77314: LIST
77315: LIST
77316: LIST
77317: LIST
77318: LIST
77319: LIST
77320: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
77321: LD_ADDR_VAR 0 34
77325: PUSH
77326: LD_INT 2
77328: NEG
77329: PUSH
77330: LD_INT 3
77332: NEG
77333: PUSH
77334: EMPTY
77335: LIST
77336: LIST
77337: PUSH
77338: LD_INT 3
77340: NEG
77341: PUSH
77342: LD_INT 2
77344: NEG
77345: PUSH
77346: EMPTY
77347: LIST
77348: LIST
77349: PUSH
77350: LD_INT 3
77352: NEG
77353: PUSH
77354: LD_INT 3
77356: NEG
77357: PUSH
77358: EMPTY
77359: LIST
77360: LIST
77361: PUSH
77362: LD_INT 3
77364: NEG
77365: PUSH
77366: LD_INT 4
77368: NEG
77369: PUSH
77370: EMPTY
77371: LIST
77372: LIST
77373: PUSH
77374: LD_INT 4
77376: NEG
77377: PUSH
77378: LD_INT 3
77380: NEG
77381: PUSH
77382: EMPTY
77383: LIST
77384: LIST
77385: PUSH
77386: LD_INT 4
77388: NEG
77389: PUSH
77390: LD_INT 4
77392: NEG
77393: PUSH
77394: EMPTY
77395: LIST
77396: LIST
77397: PUSH
77398: LD_INT 4
77400: NEG
77401: PUSH
77402: LD_INT 5
77404: NEG
77405: PUSH
77406: EMPTY
77407: LIST
77408: LIST
77409: PUSH
77410: LD_INT 5
77412: NEG
77413: PUSH
77414: LD_INT 4
77416: NEG
77417: PUSH
77418: EMPTY
77419: LIST
77420: LIST
77421: PUSH
77422: LD_INT 5
77424: NEG
77425: PUSH
77426: LD_INT 5
77428: NEG
77429: PUSH
77430: EMPTY
77431: LIST
77432: LIST
77433: PUSH
77434: LD_INT 5
77436: NEG
77437: PUSH
77438: LD_INT 6
77440: NEG
77441: PUSH
77442: EMPTY
77443: LIST
77444: LIST
77445: PUSH
77446: LD_INT 6
77448: NEG
77449: PUSH
77450: LD_INT 5
77452: NEG
77453: PUSH
77454: EMPTY
77455: LIST
77456: LIST
77457: PUSH
77458: LD_INT 6
77460: NEG
77461: PUSH
77462: LD_INT 6
77464: NEG
77465: PUSH
77466: EMPTY
77467: LIST
77468: LIST
77469: PUSH
77470: EMPTY
77471: LIST
77472: LIST
77473: LIST
77474: LIST
77475: LIST
77476: LIST
77477: LIST
77478: LIST
77479: LIST
77480: LIST
77481: LIST
77482: LIST
77483: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
77484: LD_ADDR_VAR 0 41
77488: PUSH
77489: LD_INT 0
77491: PUSH
77492: LD_INT 2
77494: NEG
77495: PUSH
77496: EMPTY
77497: LIST
77498: LIST
77499: PUSH
77500: LD_INT 1
77502: NEG
77503: PUSH
77504: LD_INT 3
77506: NEG
77507: PUSH
77508: EMPTY
77509: LIST
77510: LIST
77511: PUSH
77512: LD_INT 1
77514: PUSH
77515: LD_INT 2
77517: NEG
77518: PUSH
77519: EMPTY
77520: LIST
77521: LIST
77522: PUSH
77523: EMPTY
77524: LIST
77525: LIST
77526: LIST
77527: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
77528: LD_ADDR_VAR 0 42
77532: PUSH
77533: LD_INT 2
77535: PUSH
77536: LD_INT 0
77538: PUSH
77539: EMPTY
77540: LIST
77541: LIST
77542: PUSH
77543: LD_INT 2
77545: PUSH
77546: LD_INT 1
77548: NEG
77549: PUSH
77550: EMPTY
77551: LIST
77552: LIST
77553: PUSH
77554: LD_INT 3
77556: PUSH
77557: LD_INT 1
77559: PUSH
77560: EMPTY
77561: LIST
77562: LIST
77563: PUSH
77564: EMPTY
77565: LIST
77566: LIST
77567: LIST
77568: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
77569: LD_ADDR_VAR 0 43
77573: PUSH
77574: LD_INT 2
77576: PUSH
77577: LD_INT 2
77579: PUSH
77580: EMPTY
77581: LIST
77582: LIST
77583: PUSH
77584: LD_INT 3
77586: PUSH
77587: LD_INT 2
77589: PUSH
77590: EMPTY
77591: LIST
77592: LIST
77593: PUSH
77594: LD_INT 2
77596: PUSH
77597: LD_INT 3
77599: PUSH
77600: EMPTY
77601: LIST
77602: LIST
77603: PUSH
77604: EMPTY
77605: LIST
77606: LIST
77607: LIST
77608: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
77609: LD_ADDR_VAR 0 44
77613: PUSH
77614: LD_INT 0
77616: PUSH
77617: LD_INT 2
77619: PUSH
77620: EMPTY
77621: LIST
77622: LIST
77623: PUSH
77624: LD_INT 1
77626: PUSH
77627: LD_INT 3
77629: PUSH
77630: EMPTY
77631: LIST
77632: LIST
77633: PUSH
77634: LD_INT 1
77636: NEG
77637: PUSH
77638: LD_INT 2
77640: PUSH
77641: EMPTY
77642: LIST
77643: LIST
77644: PUSH
77645: EMPTY
77646: LIST
77647: LIST
77648: LIST
77649: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
77650: LD_ADDR_VAR 0 45
77654: PUSH
77655: LD_INT 2
77657: NEG
77658: PUSH
77659: LD_INT 0
77661: PUSH
77662: EMPTY
77663: LIST
77664: LIST
77665: PUSH
77666: LD_INT 2
77668: NEG
77669: PUSH
77670: LD_INT 1
77672: PUSH
77673: EMPTY
77674: LIST
77675: LIST
77676: PUSH
77677: LD_INT 3
77679: NEG
77680: PUSH
77681: LD_INT 1
77683: NEG
77684: PUSH
77685: EMPTY
77686: LIST
77687: LIST
77688: PUSH
77689: EMPTY
77690: LIST
77691: LIST
77692: LIST
77693: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
77694: LD_ADDR_VAR 0 46
77698: PUSH
77699: LD_INT 2
77701: NEG
77702: PUSH
77703: LD_INT 2
77705: NEG
77706: PUSH
77707: EMPTY
77708: LIST
77709: LIST
77710: PUSH
77711: LD_INT 2
77713: NEG
77714: PUSH
77715: LD_INT 3
77717: NEG
77718: PUSH
77719: EMPTY
77720: LIST
77721: LIST
77722: PUSH
77723: LD_INT 3
77725: NEG
77726: PUSH
77727: LD_INT 2
77729: NEG
77730: PUSH
77731: EMPTY
77732: LIST
77733: LIST
77734: PUSH
77735: EMPTY
77736: LIST
77737: LIST
77738: LIST
77739: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
77740: LD_ADDR_VAR 0 47
77744: PUSH
77745: LD_INT 2
77747: NEG
77748: PUSH
77749: LD_INT 3
77751: NEG
77752: PUSH
77753: EMPTY
77754: LIST
77755: LIST
77756: PUSH
77757: LD_INT 1
77759: NEG
77760: PUSH
77761: LD_INT 3
77763: NEG
77764: PUSH
77765: EMPTY
77766: LIST
77767: LIST
77768: PUSH
77769: EMPTY
77770: LIST
77771: LIST
77772: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
77773: LD_ADDR_VAR 0 48
77777: PUSH
77778: LD_INT 1
77780: PUSH
77781: LD_INT 2
77783: NEG
77784: PUSH
77785: EMPTY
77786: LIST
77787: LIST
77788: PUSH
77789: LD_INT 2
77791: PUSH
77792: LD_INT 1
77794: NEG
77795: PUSH
77796: EMPTY
77797: LIST
77798: LIST
77799: PUSH
77800: EMPTY
77801: LIST
77802: LIST
77803: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
77804: LD_ADDR_VAR 0 49
77808: PUSH
77809: LD_INT 3
77811: PUSH
77812: LD_INT 1
77814: PUSH
77815: EMPTY
77816: LIST
77817: LIST
77818: PUSH
77819: LD_INT 3
77821: PUSH
77822: LD_INT 2
77824: PUSH
77825: EMPTY
77826: LIST
77827: LIST
77828: PUSH
77829: EMPTY
77830: LIST
77831: LIST
77832: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
77833: LD_ADDR_VAR 0 50
77837: PUSH
77838: LD_INT 2
77840: PUSH
77841: LD_INT 3
77843: PUSH
77844: EMPTY
77845: LIST
77846: LIST
77847: PUSH
77848: LD_INT 1
77850: PUSH
77851: LD_INT 3
77853: PUSH
77854: EMPTY
77855: LIST
77856: LIST
77857: PUSH
77858: EMPTY
77859: LIST
77860: LIST
77861: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
77862: LD_ADDR_VAR 0 51
77866: PUSH
77867: LD_INT 1
77869: NEG
77870: PUSH
77871: LD_INT 2
77873: PUSH
77874: EMPTY
77875: LIST
77876: LIST
77877: PUSH
77878: LD_INT 2
77880: NEG
77881: PUSH
77882: LD_INT 1
77884: PUSH
77885: EMPTY
77886: LIST
77887: LIST
77888: PUSH
77889: EMPTY
77890: LIST
77891: LIST
77892: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
77893: LD_ADDR_VAR 0 52
77897: PUSH
77898: LD_INT 3
77900: NEG
77901: PUSH
77902: LD_INT 1
77904: NEG
77905: PUSH
77906: EMPTY
77907: LIST
77908: LIST
77909: PUSH
77910: LD_INT 3
77912: NEG
77913: PUSH
77914: LD_INT 2
77916: NEG
77917: PUSH
77918: EMPTY
77919: LIST
77920: LIST
77921: PUSH
77922: EMPTY
77923: LIST
77924: LIST
77925: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
77926: LD_ADDR_VAR 0 53
77930: PUSH
77931: LD_INT 1
77933: NEG
77934: PUSH
77935: LD_INT 3
77937: NEG
77938: PUSH
77939: EMPTY
77940: LIST
77941: LIST
77942: PUSH
77943: LD_INT 0
77945: PUSH
77946: LD_INT 3
77948: NEG
77949: PUSH
77950: EMPTY
77951: LIST
77952: LIST
77953: PUSH
77954: LD_INT 1
77956: PUSH
77957: LD_INT 2
77959: NEG
77960: PUSH
77961: EMPTY
77962: LIST
77963: LIST
77964: PUSH
77965: EMPTY
77966: LIST
77967: LIST
77968: LIST
77969: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
77970: LD_ADDR_VAR 0 54
77974: PUSH
77975: LD_INT 2
77977: PUSH
77978: LD_INT 1
77980: NEG
77981: PUSH
77982: EMPTY
77983: LIST
77984: LIST
77985: PUSH
77986: LD_INT 3
77988: PUSH
77989: LD_INT 0
77991: PUSH
77992: EMPTY
77993: LIST
77994: LIST
77995: PUSH
77996: LD_INT 3
77998: PUSH
77999: LD_INT 1
78001: PUSH
78002: EMPTY
78003: LIST
78004: LIST
78005: PUSH
78006: EMPTY
78007: LIST
78008: LIST
78009: LIST
78010: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
78011: LD_ADDR_VAR 0 55
78015: PUSH
78016: LD_INT 3
78018: PUSH
78019: LD_INT 2
78021: PUSH
78022: EMPTY
78023: LIST
78024: LIST
78025: PUSH
78026: LD_INT 3
78028: PUSH
78029: LD_INT 3
78031: PUSH
78032: EMPTY
78033: LIST
78034: LIST
78035: PUSH
78036: LD_INT 2
78038: PUSH
78039: LD_INT 3
78041: PUSH
78042: EMPTY
78043: LIST
78044: LIST
78045: PUSH
78046: EMPTY
78047: LIST
78048: LIST
78049: LIST
78050: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
78051: LD_ADDR_VAR 0 56
78055: PUSH
78056: LD_INT 1
78058: PUSH
78059: LD_INT 3
78061: PUSH
78062: EMPTY
78063: LIST
78064: LIST
78065: PUSH
78066: LD_INT 0
78068: PUSH
78069: LD_INT 3
78071: PUSH
78072: EMPTY
78073: LIST
78074: LIST
78075: PUSH
78076: LD_INT 1
78078: NEG
78079: PUSH
78080: LD_INT 2
78082: PUSH
78083: EMPTY
78084: LIST
78085: LIST
78086: PUSH
78087: EMPTY
78088: LIST
78089: LIST
78090: LIST
78091: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
78092: LD_ADDR_VAR 0 57
78096: PUSH
78097: LD_INT 2
78099: NEG
78100: PUSH
78101: LD_INT 1
78103: PUSH
78104: EMPTY
78105: LIST
78106: LIST
78107: PUSH
78108: LD_INT 3
78110: NEG
78111: PUSH
78112: LD_INT 0
78114: PUSH
78115: EMPTY
78116: LIST
78117: LIST
78118: PUSH
78119: LD_INT 3
78121: NEG
78122: PUSH
78123: LD_INT 1
78125: NEG
78126: PUSH
78127: EMPTY
78128: LIST
78129: LIST
78130: PUSH
78131: EMPTY
78132: LIST
78133: LIST
78134: LIST
78135: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
78136: LD_ADDR_VAR 0 58
78140: PUSH
78141: LD_INT 2
78143: NEG
78144: PUSH
78145: LD_INT 3
78147: NEG
78148: PUSH
78149: EMPTY
78150: LIST
78151: LIST
78152: PUSH
78153: LD_INT 3
78155: NEG
78156: PUSH
78157: LD_INT 2
78159: NEG
78160: PUSH
78161: EMPTY
78162: LIST
78163: LIST
78164: PUSH
78165: LD_INT 3
78167: NEG
78168: PUSH
78169: LD_INT 3
78171: NEG
78172: PUSH
78173: EMPTY
78174: LIST
78175: LIST
78176: PUSH
78177: EMPTY
78178: LIST
78179: LIST
78180: LIST
78181: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
78182: LD_ADDR_VAR 0 59
78186: PUSH
78187: LD_INT 1
78189: NEG
78190: PUSH
78191: LD_INT 2
78193: NEG
78194: PUSH
78195: EMPTY
78196: LIST
78197: LIST
78198: PUSH
78199: LD_INT 0
78201: PUSH
78202: LD_INT 2
78204: NEG
78205: PUSH
78206: EMPTY
78207: LIST
78208: LIST
78209: PUSH
78210: LD_INT 1
78212: PUSH
78213: LD_INT 1
78215: NEG
78216: PUSH
78217: EMPTY
78218: LIST
78219: LIST
78220: PUSH
78221: EMPTY
78222: LIST
78223: LIST
78224: LIST
78225: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
78226: LD_ADDR_VAR 0 60
78230: PUSH
78231: LD_INT 1
78233: PUSH
78234: LD_INT 1
78236: NEG
78237: PUSH
78238: EMPTY
78239: LIST
78240: LIST
78241: PUSH
78242: LD_INT 2
78244: PUSH
78245: LD_INT 0
78247: PUSH
78248: EMPTY
78249: LIST
78250: LIST
78251: PUSH
78252: LD_INT 2
78254: PUSH
78255: LD_INT 1
78257: PUSH
78258: EMPTY
78259: LIST
78260: LIST
78261: PUSH
78262: EMPTY
78263: LIST
78264: LIST
78265: LIST
78266: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
78267: LD_ADDR_VAR 0 61
78271: PUSH
78272: LD_INT 2
78274: PUSH
78275: LD_INT 1
78277: PUSH
78278: EMPTY
78279: LIST
78280: LIST
78281: PUSH
78282: LD_INT 2
78284: PUSH
78285: LD_INT 2
78287: PUSH
78288: EMPTY
78289: LIST
78290: LIST
78291: PUSH
78292: LD_INT 1
78294: PUSH
78295: LD_INT 2
78297: PUSH
78298: EMPTY
78299: LIST
78300: LIST
78301: PUSH
78302: EMPTY
78303: LIST
78304: LIST
78305: LIST
78306: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
78307: LD_ADDR_VAR 0 62
78311: PUSH
78312: LD_INT 1
78314: PUSH
78315: LD_INT 2
78317: PUSH
78318: EMPTY
78319: LIST
78320: LIST
78321: PUSH
78322: LD_INT 0
78324: PUSH
78325: LD_INT 2
78327: PUSH
78328: EMPTY
78329: LIST
78330: LIST
78331: PUSH
78332: LD_INT 1
78334: NEG
78335: PUSH
78336: LD_INT 1
78338: PUSH
78339: EMPTY
78340: LIST
78341: LIST
78342: PUSH
78343: EMPTY
78344: LIST
78345: LIST
78346: LIST
78347: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
78348: LD_ADDR_VAR 0 63
78352: PUSH
78353: LD_INT 1
78355: NEG
78356: PUSH
78357: LD_INT 1
78359: PUSH
78360: EMPTY
78361: LIST
78362: LIST
78363: PUSH
78364: LD_INT 2
78366: NEG
78367: PUSH
78368: LD_INT 0
78370: PUSH
78371: EMPTY
78372: LIST
78373: LIST
78374: PUSH
78375: LD_INT 2
78377: NEG
78378: PUSH
78379: LD_INT 1
78381: NEG
78382: PUSH
78383: EMPTY
78384: LIST
78385: LIST
78386: PUSH
78387: EMPTY
78388: LIST
78389: LIST
78390: LIST
78391: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78392: LD_ADDR_VAR 0 64
78396: PUSH
78397: LD_INT 1
78399: NEG
78400: PUSH
78401: LD_INT 2
78403: NEG
78404: PUSH
78405: EMPTY
78406: LIST
78407: LIST
78408: PUSH
78409: LD_INT 2
78411: NEG
78412: PUSH
78413: LD_INT 1
78415: NEG
78416: PUSH
78417: EMPTY
78418: LIST
78419: LIST
78420: PUSH
78421: LD_INT 2
78423: NEG
78424: PUSH
78425: LD_INT 2
78427: NEG
78428: PUSH
78429: EMPTY
78430: LIST
78431: LIST
78432: PUSH
78433: EMPTY
78434: LIST
78435: LIST
78436: LIST
78437: ST_TO_ADDR
// end ; 2 :
78438: GO 81704
78440: LD_INT 2
78442: DOUBLE
78443: EQUAL
78444: IFTRUE 78448
78446: GO 81703
78448: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
78449: LD_ADDR_VAR 0 29
78453: PUSH
78454: LD_INT 4
78456: PUSH
78457: LD_INT 0
78459: PUSH
78460: EMPTY
78461: LIST
78462: LIST
78463: PUSH
78464: LD_INT 4
78466: PUSH
78467: LD_INT 1
78469: NEG
78470: PUSH
78471: EMPTY
78472: LIST
78473: LIST
78474: PUSH
78475: LD_INT 5
78477: PUSH
78478: LD_INT 0
78480: PUSH
78481: EMPTY
78482: LIST
78483: LIST
78484: PUSH
78485: LD_INT 5
78487: PUSH
78488: LD_INT 1
78490: PUSH
78491: EMPTY
78492: LIST
78493: LIST
78494: PUSH
78495: LD_INT 4
78497: PUSH
78498: LD_INT 1
78500: PUSH
78501: EMPTY
78502: LIST
78503: LIST
78504: PUSH
78505: LD_INT 3
78507: PUSH
78508: LD_INT 0
78510: PUSH
78511: EMPTY
78512: LIST
78513: LIST
78514: PUSH
78515: LD_INT 3
78517: PUSH
78518: LD_INT 1
78520: NEG
78521: PUSH
78522: EMPTY
78523: LIST
78524: LIST
78525: PUSH
78526: LD_INT 3
78528: PUSH
78529: LD_INT 2
78531: NEG
78532: PUSH
78533: EMPTY
78534: LIST
78535: LIST
78536: PUSH
78537: LD_INT 5
78539: PUSH
78540: LD_INT 2
78542: PUSH
78543: EMPTY
78544: LIST
78545: LIST
78546: PUSH
78547: LD_INT 3
78549: PUSH
78550: LD_INT 3
78552: PUSH
78553: EMPTY
78554: LIST
78555: LIST
78556: PUSH
78557: LD_INT 3
78559: PUSH
78560: LD_INT 2
78562: PUSH
78563: EMPTY
78564: LIST
78565: LIST
78566: PUSH
78567: LD_INT 4
78569: PUSH
78570: LD_INT 3
78572: PUSH
78573: EMPTY
78574: LIST
78575: LIST
78576: PUSH
78577: LD_INT 4
78579: PUSH
78580: LD_INT 4
78582: PUSH
78583: EMPTY
78584: LIST
78585: LIST
78586: PUSH
78587: LD_INT 3
78589: PUSH
78590: LD_INT 4
78592: PUSH
78593: EMPTY
78594: LIST
78595: LIST
78596: PUSH
78597: LD_INT 2
78599: PUSH
78600: LD_INT 3
78602: PUSH
78603: EMPTY
78604: LIST
78605: LIST
78606: PUSH
78607: LD_INT 2
78609: PUSH
78610: LD_INT 2
78612: PUSH
78613: EMPTY
78614: LIST
78615: LIST
78616: PUSH
78617: LD_INT 4
78619: PUSH
78620: LD_INT 2
78622: PUSH
78623: EMPTY
78624: LIST
78625: LIST
78626: PUSH
78627: LD_INT 2
78629: PUSH
78630: LD_INT 4
78632: PUSH
78633: EMPTY
78634: LIST
78635: LIST
78636: PUSH
78637: LD_INT 0
78639: PUSH
78640: LD_INT 4
78642: PUSH
78643: EMPTY
78644: LIST
78645: LIST
78646: PUSH
78647: LD_INT 0
78649: PUSH
78650: LD_INT 3
78652: PUSH
78653: EMPTY
78654: LIST
78655: LIST
78656: PUSH
78657: LD_INT 1
78659: PUSH
78660: LD_INT 4
78662: PUSH
78663: EMPTY
78664: LIST
78665: LIST
78666: PUSH
78667: LD_INT 1
78669: PUSH
78670: LD_INT 5
78672: PUSH
78673: EMPTY
78674: LIST
78675: LIST
78676: PUSH
78677: LD_INT 0
78679: PUSH
78680: LD_INT 5
78682: PUSH
78683: EMPTY
78684: LIST
78685: LIST
78686: PUSH
78687: LD_INT 1
78689: NEG
78690: PUSH
78691: LD_INT 4
78693: PUSH
78694: EMPTY
78695: LIST
78696: LIST
78697: PUSH
78698: LD_INT 1
78700: NEG
78701: PUSH
78702: LD_INT 3
78704: PUSH
78705: EMPTY
78706: LIST
78707: LIST
78708: PUSH
78709: LD_INT 2
78711: PUSH
78712: LD_INT 5
78714: PUSH
78715: EMPTY
78716: LIST
78717: LIST
78718: PUSH
78719: LD_INT 2
78721: NEG
78722: PUSH
78723: LD_INT 3
78725: PUSH
78726: EMPTY
78727: LIST
78728: LIST
78729: PUSH
78730: LD_INT 3
78732: NEG
78733: PUSH
78734: LD_INT 0
78736: PUSH
78737: EMPTY
78738: LIST
78739: LIST
78740: PUSH
78741: LD_INT 3
78743: NEG
78744: PUSH
78745: LD_INT 1
78747: NEG
78748: PUSH
78749: EMPTY
78750: LIST
78751: LIST
78752: PUSH
78753: LD_INT 2
78755: NEG
78756: PUSH
78757: LD_INT 0
78759: PUSH
78760: EMPTY
78761: LIST
78762: LIST
78763: PUSH
78764: LD_INT 2
78766: NEG
78767: PUSH
78768: LD_INT 1
78770: PUSH
78771: EMPTY
78772: LIST
78773: LIST
78774: PUSH
78775: LD_INT 3
78777: NEG
78778: PUSH
78779: LD_INT 1
78781: PUSH
78782: EMPTY
78783: LIST
78784: LIST
78785: PUSH
78786: LD_INT 4
78788: NEG
78789: PUSH
78790: LD_INT 0
78792: PUSH
78793: EMPTY
78794: LIST
78795: LIST
78796: PUSH
78797: LD_INT 4
78799: NEG
78800: PUSH
78801: LD_INT 1
78803: NEG
78804: PUSH
78805: EMPTY
78806: LIST
78807: LIST
78808: PUSH
78809: LD_INT 4
78811: NEG
78812: PUSH
78813: LD_INT 2
78815: NEG
78816: PUSH
78817: EMPTY
78818: LIST
78819: LIST
78820: PUSH
78821: LD_INT 2
78823: NEG
78824: PUSH
78825: LD_INT 2
78827: PUSH
78828: EMPTY
78829: LIST
78830: LIST
78831: PUSH
78832: LD_INT 4
78834: NEG
78835: PUSH
78836: LD_INT 4
78838: NEG
78839: PUSH
78840: EMPTY
78841: LIST
78842: LIST
78843: PUSH
78844: LD_INT 4
78846: NEG
78847: PUSH
78848: LD_INT 5
78850: NEG
78851: PUSH
78852: EMPTY
78853: LIST
78854: LIST
78855: PUSH
78856: LD_INT 3
78858: NEG
78859: PUSH
78860: LD_INT 4
78862: NEG
78863: PUSH
78864: EMPTY
78865: LIST
78866: LIST
78867: PUSH
78868: LD_INT 3
78870: NEG
78871: PUSH
78872: LD_INT 3
78874: NEG
78875: PUSH
78876: EMPTY
78877: LIST
78878: LIST
78879: PUSH
78880: LD_INT 4
78882: NEG
78883: PUSH
78884: LD_INT 3
78886: NEG
78887: PUSH
78888: EMPTY
78889: LIST
78890: LIST
78891: PUSH
78892: LD_INT 5
78894: NEG
78895: PUSH
78896: LD_INT 4
78898: NEG
78899: PUSH
78900: EMPTY
78901: LIST
78902: LIST
78903: PUSH
78904: LD_INT 5
78906: NEG
78907: PUSH
78908: LD_INT 5
78910: NEG
78911: PUSH
78912: EMPTY
78913: LIST
78914: LIST
78915: PUSH
78916: LD_INT 3
78918: NEG
78919: PUSH
78920: LD_INT 5
78922: NEG
78923: PUSH
78924: EMPTY
78925: LIST
78926: LIST
78927: PUSH
78928: LD_INT 5
78930: NEG
78931: PUSH
78932: LD_INT 3
78934: NEG
78935: PUSH
78936: EMPTY
78937: LIST
78938: LIST
78939: PUSH
78940: EMPTY
78941: LIST
78942: LIST
78943: LIST
78944: LIST
78945: LIST
78946: LIST
78947: LIST
78948: LIST
78949: LIST
78950: LIST
78951: LIST
78952: LIST
78953: LIST
78954: LIST
78955: LIST
78956: LIST
78957: LIST
78958: LIST
78959: LIST
78960: LIST
78961: LIST
78962: LIST
78963: LIST
78964: LIST
78965: LIST
78966: LIST
78967: LIST
78968: LIST
78969: LIST
78970: LIST
78971: LIST
78972: LIST
78973: LIST
78974: LIST
78975: LIST
78976: LIST
78977: LIST
78978: LIST
78979: LIST
78980: LIST
78981: LIST
78982: LIST
78983: LIST
78984: LIST
78985: LIST
78986: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
78987: LD_ADDR_VAR 0 30
78991: PUSH
78992: LD_INT 4
78994: PUSH
78995: LD_INT 4
78997: PUSH
78998: EMPTY
78999: LIST
79000: LIST
79001: PUSH
79002: LD_INT 4
79004: PUSH
79005: LD_INT 3
79007: PUSH
79008: EMPTY
79009: LIST
79010: LIST
79011: PUSH
79012: LD_INT 5
79014: PUSH
79015: LD_INT 4
79017: PUSH
79018: EMPTY
79019: LIST
79020: LIST
79021: PUSH
79022: LD_INT 5
79024: PUSH
79025: LD_INT 5
79027: PUSH
79028: EMPTY
79029: LIST
79030: LIST
79031: PUSH
79032: LD_INT 4
79034: PUSH
79035: LD_INT 5
79037: PUSH
79038: EMPTY
79039: LIST
79040: LIST
79041: PUSH
79042: LD_INT 3
79044: PUSH
79045: LD_INT 4
79047: PUSH
79048: EMPTY
79049: LIST
79050: LIST
79051: PUSH
79052: LD_INT 3
79054: PUSH
79055: LD_INT 3
79057: PUSH
79058: EMPTY
79059: LIST
79060: LIST
79061: PUSH
79062: LD_INT 5
79064: PUSH
79065: LD_INT 3
79067: PUSH
79068: EMPTY
79069: LIST
79070: LIST
79071: PUSH
79072: LD_INT 3
79074: PUSH
79075: LD_INT 5
79077: PUSH
79078: EMPTY
79079: LIST
79080: LIST
79081: PUSH
79082: LD_INT 0
79084: PUSH
79085: LD_INT 3
79087: PUSH
79088: EMPTY
79089: LIST
79090: LIST
79091: PUSH
79092: LD_INT 0
79094: PUSH
79095: LD_INT 2
79097: PUSH
79098: EMPTY
79099: LIST
79100: LIST
79101: PUSH
79102: LD_INT 1
79104: PUSH
79105: LD_INT 3
79107: PUSH
79108: EMPTY
79109: LIST
79110: LIST
79111: PUSH
79112: LD_INT 1
79114: PUSH
79115: LD_INT 4
79117: PUSH
79118: EMPTY
79119: LIST
79120: LIST
79121: PUSH
79122: LD_INT 0
79124: PUSH
79125: LD_INT 4
79127: PUSH
79128: EMPTY
79129: LIST
79130: LIST
79131: PUSH
79132: LD_INT 1
79134: NEG
79135: PUSH
79136: LD_INT 3
79138: PUSH
79139: EMPTY
79140: LIST
79141: LIST
79142: PUSH
79143: LD_INT 1
79145: NEG
79146: PUSH
79147: LD_INT 2
79149: PUSH
79150: EMPTY
79151: LIST
79152: LIST
79153: PUSH
79154: LD_INT 2
79156: PUSH
79157: LD_INT 4
79159: PUSH
79160: EMPTY
79161: LIST
79162: LIST
79163: PUSH
79164: LD_INT 2
79166: NEG
79167: PUSH
79168: LD_INT 2
79170: PUSH
79171: EMPTY
79172: LIST
79173: LIST
79174: PUSH
79175: LD_INT 4
79177: NEG
79178: PUSH
79179: LD_INT 0
79181: PUSH
79182: EMPTY
79183: LIST
79184: LIST
79185: PUSH
79186: LD_INT 4
79188: NEG
79189: PUSH
79190: LD_INT 1
79192: NEG
79193: PUSH
79194: EMPTY
79195: LIST
79196: LIST
79197: PUSH
79198: LD_INT 3
79200: NEG
79201: PUSH
79202: LD_INT 0
79204: PUSH
79205: EMPTY
79206: LIST
79207: LIST
79208: PUSH
79209: LD_INT 3
79211: NEG
79212: PUSH
79213: LD_INT 1
79215: PUSH
79216: EMPTY
79217: LIST
79218: LIST
79219: PUSH
79220: LD_INT 4
79222: NEG
79223: PUSH
79224: LD_INT 1
79226: PUSH
79227: EMPTY
79228: LIST
79229: LIST
79230: PUSH
79231: LD_INT 5
79233: NEG
79234: PUSH
79235: LD_INT 0
79237: PUSH
79238: EMPTY
79239: LIST
79240: LIST
79241: PUSH
79242: LD_INT 5
79244: NEG
79245: PUSH
79246: LD_INT 1
79248: NEG
79249: PUSH
79250: EMPTY
79251: LIST
79252: LIST
79253: PUSH
79254: LD_INT 5
79256: NEG
79257: PUSH
79258: LD_INT 2
79260: NEG
79261: PUSH
79262: EMPTY
79263: LIST
79264: LIST
79265: PUSH
79266: LD_INT 3
79268: NEG
79269: PUSH
79270: LD_INT 2
79272: PUSH
79273: EMPTY
79274: LIST
79275: LIST
79276: PUSH
79277: LD_INT 3
79279: NEG
79280: PUSH
79281: LD_INT 3
79283: NEG
79284: PUSH
79285: EMPTY
79286: LIST
79287: LIST
79288: PUSH
79289: LD_INT 3
79291: NEG
79292: PUSH
79293: LD_INT 4
79295: NEG
79296: PUSH
79297: EMPTY
79298: LIST
79299: LIST
79300: PUSH
79301: LD_INT 2
79303: NEG
79304: PUSH
79305: LD_INT 3
79307: NEG
79308: PUSH
79309: EMPTY
79310: LIST
79311: LIST
79312: PUSH
79313: LD_INT 2
79315: NEG
79316: PUSH
79317: LD_INT 2
79319: NEG
79320: PUSH
79321: EMPTY
79322: LIST
79323: LIST
79324: PUSH
79325: LD_INT 3
79327: NEG
79328: PUSH
79329: LD_INT 2
79331: NEG
79332: PUSH
79333: EMPTY
79334: LIST
79335: LIST
79336: PUSH
79337: LD_INT 4
79339: NEG
79340: PUSH
79341: LD_INT 3
79343: NEG
79344: PUSH
79345: EMPTY
79346: LIST
79347: LIST
79348: PUSH
79349: LD_INT 4
79351: NEG
79352: PUSH
79353: LD_INT 4
79355: NEG
79356: PUSH
79357: EMPTY
79358: LIST
79359: LIST
79360: PUSH
79361: LD_INT 2
79363: NEG
79364: PUSH
79365: LD_INT 4
79367: NEG
79368: PUSH
79369: EMPTY
79370: LIST
79371: LIST
79372: PUSH
79373: LD_INT 4
79375: NEG
79376: PUSH
79377: LD_INT 2
79379: NEG
79380: PUSH
79381: EMPTY
79382: LIST
79383: LIST
79384: PUSH
79385: LD_INT 0
79387: PUSH
79388: LD_INT 4
79390: NEG
79391: PUSH
79392: EMPTY
79393: LIST
79394: LIST
79395: PUSH
79396: LD_INT 0
79398: PUSH
79399: LD_INT 5
79401: NEG
79402: PUSH
79403: EMPTY
79404: LIST
79405: LIST
79406: PUSH
79407: LD_INT 1
79409: PUSH
79410: LD_INT 4
79412: NEG
79413: PUSH
79414: EMPTY
79415: LIST
79416: LIST
79417: PUSH
79418: LD_INT 1
79420: PUSH
79421: LD_INT 3
79423: NEG
79424: PUSH
79425: EMPTY
79426: LIST
79427: LIST
79428: PUSH
79429: LD_INT 0
79431: PUSH
79432: LD_INT 3
79434: NEG
79435: PUSH
79436: EMPTY
79437: LIST
79438: LIST
79439: PUSH
79440: LD_INT 1
79442: NEG
79443: PUSH
79444: LD_INT 4
79446: NEG
79447: PUSH
79448: EMPTY
79449: LIST
79450: LIST
79451: PUSH
79452: LD_INT 1
79454: NEG
79455: PUSH
79456: LD_INT 5
79458: NEG
79459: PUSH
79460: EMPTY
79461: LIST
79462: LIST
79463: PUSH
79464: LD_INT 2
79466: PUSH
79467: LD_INT 3
79469: NEG
79470: PUSH
79471: EMPTY
79472: LIST
79473: LIST
79474: PUSH
79475: LD_INT 2
79477: NEG
79478: PUSH
79479: LD_INT 5
79481: NEG
79482: PUSH
79483: EMPTY
79484: LIST
79485: LIST
79486: PUSH
79487: EMPTY
79488: LIST
79489: LIST
79490: LIST
79491: LIST
79492: LIST
79493: LIST
79494: LIST
79495: LIST
79496: LIST
79497: LIST
79498: LIST
79499: LIST
79500: LIST
79501: LIST
79502: LIST
79503: LIST
79504: LIST
79505: LIST
79506: LIST
79507: LIST
79508: LIST
79509: LIST
79510: LIST
79511: LIST
79512: LIST
79513: LIST
79514: LIST
79515: LIST
79516: LIST
79517: LIST
79518: LIST
79519: LIST
79520: LIST
79521: LIST
79522: LIST
79523: LIST
79524: LIST
79525: LIST
79526: LIST
79527: LIST
79528: LIST
79529: LIST
79530: LIST
79531: LIST
79532: LIST
79533: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
79534: LD_ADDR_VAR 0 31
79538: PUSH
79539: LD_INT 0
79541: PUSH
79542: LD_INT 4
79544: PUSH
79545: EMPTY
79546: LIST
79547: LIST
79548: PUSH
79549: LD_INT 0
79551: PUSH
79552: LD_INT 3
79554: PUSH
79555: EMPTY
79556: LIST
79557: LIST
79558: PUSH
79559: LD_INT 1
79561: PUSH
79562: LD_INT 4
79564: PUSH
79565: EMPTY
79566: LIST
79567: LIST
79568: PUSH
79569: LD_INT 1
79571: PUSH
79572: LD_INT 5
79574: PUSH
79575: EMPTY
79576: LIST
79577: LIST
79578: PUSH
79579: LD_INT 0
79581: PUSH
79582: LD_INT 5
79584: PUSH
79585: EMPTY
79586: LIST
79587: LIST
79588: PUSH
79589: LD_INT 1
79591: NEG
79592: PUSH
79593: LD_INT 4
79595: PUSH
79596: EMPTY
79597: LIST
79598: LIST
79599: PUSH
79600: LD_INT 1
79602: NEG
79603: PUSH
79604: LD_INT 3
79606: PUSH
79607: EMPTY
79608: LIST
79609: LIST
79610: PUSH
79611: LD_INT 2
79613: PUSH
79614: LD_INT 5
79616: PUSH
79617: EMPTY
79618: LIST
79619: LIST
79620: PUSH
79621: LD_INT 2
79623: NEG
79624: PUSH
79625: LD_INT 3
79627: PUSH
79628: EMPTY
79629: LIST
79630: LIST
79631: PUSH
79632: LD_INT 3
79634: NEG
79635: PUSH
79636: LD_INT 0
79638: PUSH
79639: EMPTY
79640: LIST
79641: LIST
79642: PUSH
79643: LD_INT 3
79645: NEG
79646: PUSH
79647: LD_INT 1
79649: NEG
79650: PUSH
79651: EMPTY
79652: LIST
79653: LIST
79654: PUSH
79655: LD_INT 2
79657: NEG
79658: PUSH
79659: LD_INT 0
79661: PUSH
79662: EMPTY
79663: LIST
79664: LIST
79665: PUSH
79666: LD_INT 2
79668: NEG
79669: PUSH
79670: LD_INT 1
79672: PUSH
79673: EMPTY
79674: LIST
79675: LIST
79676: PUSH
79677: LD_INT 3
79679: NEG
79680: PUSH
79681: LD_INT 1
79683: PUSH
79684: EMPTY
79685: LIST
79686: LIST
79687: PUSH
79688: LD_INT 4
79690: NEG
79691: PUSH
79692: LD_INT 0
79694: PUSH
79695: EMPTY
79696: LIST
79697: LIST
79698: PUSH
79699: LD_INT 4
79701: NEG
79702: PUSH
79703: LD_INT 1
79705: NEG
79706: PUSH
79707: EMPTY
79708: LIST
79709: LIST
79710: PUSH
79711: LD_INT 4
79713: NEG
79714: PUSH
79715: LD_INT 2
79717: NEG
79718: PUSH
79719: EMPTY
79720: LIST
79721: LIST
79722: PUSH
79723: LD_INT 2
79725: NEG
79726: PUSH
79727: LD_INT 2
79729: PUSH
79730: EMPTY
79731: LIST
79732: LIST
79733: PUSH
79734: LD_INT 4
79736: NEG
79737: PUSH
79738: LD_INT 4
79740: NEG
79741: PUSH
79742: EMPTY
79743: LIST
79744: LIST
79745: PUSH
79746: LD_INT 4
79748: NEG
79749: PUSH
79750: LD_INT 5
79752: NEG
79753: PUSH
79754: EMPTY
79755: LIST
79756: LIST
79757: PUSH
79758: LD_INT 3
79760: NEG
79761: PUSH
79762: LD_INT 4
79764: NEG
79765: PUSH
79766: EMPTY
79767: LIST
79768: LIST
79769: PUSH
79770: LD_INT 3
79772: NEG
79773: PUSH
79774: LD_INT 3
79776: NEG
79777: PUSH
79778: EMPTY
79779: LIST
79780: LIST
79781: PUSH
79782: LD_INT 4
79784: NEG
79785: PUSH
79786: LD_INT 3
79788: NEG
79789: PUSH
79790: EMPTY
79791: LIST
79792: LIST
79793: PUSH
79794: LD_INT 5
79796: NEG
79797: PUSH
79798: LD_INT 4
79800: NEG
79801: PUSH
79802: EMPTY
79803: LIST
79804: LIST
79805: PUSH
79806: LD_INT 5
79808: NEG
79809: PUSH
79810: LD_INT 5
79812: NEG
79813: PUSH
79814: EMPTY
79815: LIST
79816: LIST
79817: PUSH
79818: LD_INT 3
79820: NEG
79821: PUSH
79822: LD_INT 5
79824: NEG
79825: PUSH
79826: EMPTY
79827: LIST
79828: LIST
79829: PUSH
79830: LD_INT 5
79832: NEG
79833: PUSH
79834: LD_INT 3
79836: NEG
79837: PUSH
79838: EMPTY
79839: LIST
79840: LIST
79841: PUSH
79842: LD_INT 0
79844: PUSH
79845: LD_INT 3
79847: NEG
79848: PUSH
79849: EMPTY
79850: LIST
79851: LIST
79852: PUSH
79853: LD_INT 0
79855: PUSH
79856: LD_INT 4
79858: NEG
79859: PUSH
79860: EMPTY
79861: LIST
79862: LIST
79863: PUSH
79864: LD_INT 1
79866: PUSH
79867: LD_INT 3
79869: NEG
79870: PUSH
79871: EMPTY
79872: LIST
79873: LIST
79874: PUSH
79875: LD_INT 1
79877: PUSH
79878: LD_INT 2
79880: NEG
79881: PUSH
79882: EMPTY
79883: LIST
79884: LIST
79885: PUSH
79886: LD_INT 0
79888: PUSH
79889: LD_INT 2
79891: NEG
79892: PUSH
79893: EMPTY
79894: LIST
79895: LIST
79896: PUSH
79897: LD_INT 1
79899: NEG
79900: PUSH
79901: LD_INT 3
79903: NEG
79904: PUSH
79905: EMPTY
79906: LIST
79907: LIST
79908: PUSH
79909: LD_INT 1
79911: NEG
79912: PUSH
79913: LD_INT 4
79915: NEG
79916: PUSH
79917: EMPTY
79918: LIST
79919: LIST
79920: PUSH
79921: LD_INT 2
79923: PUSH
79924: LD_INT 2
79926: NEG
79927: PUSH
79928: EMPTY
79929: LIST
79930: LIST
79931: PUSH
79932: LD_INT 2
79934: NEG
79935: PUSH
79936: LD_INT 4
79938: NEG
79939: PUSH
79940: EMPTY
79941: LIST
79942: LIST
79943: PUSH
79944: LD_INT 4
79946: PUSH
79947: LD_INT 0
79949: PUSH
79950: EMPTY
79951: LIST
79952: LIST
79953: PUSH
79954: LD_INT 4
79956: PUSH
79957: LD_INT 1
79959: NEG
79960: PUSH
79961: EMPTY
79962: LIST
79963: LIST
79964: PUSH
79965: LD_INT 5
79967: PUSH
79968: LD_INT 0
79970: PUSH
79971: EMPTY
79972: LIST
79973: LIST
79974: PUSH
79975: LD_INT 5
79977: PUSH
79978: LD_INT 1
79980: PUSH
79981: EMPTY
79982: LIST
79983: LIST
79984: PUSH
79985: LD_INT 4
79987: PUSH
79988: LD_INT 1
79990: PUSH
79991: EMPTY
79992: LIST
79993: LIST
79994: PUSH
79995: LD_INT 3
79997: PUSH
79998: LD_INT 0
80000: PUSH
80001: EMPTY
80002: LIST
80003: LIST
80004: PUSH
80005: LD_INT 3
80007: PUSH
80008: LD_INT 1
80010: NEG
80011: PUSH
80012: EMPTY
80013: LIST
80014: LIST
80015: PUSH
80016: LD_INT 3
80018: PUSH
80019: LD_INT 2
80021: NEG
80022: PUSH
80023: EMPTY
80024: LIST
80025: LIST
80026: PUSH
80027: LD_INT 5
80029: PUSH
80030: LD_INT 2
80032: PUSH
80033: EMPTY
80034: LIST
80035: LIST
80036: PUSH
80037: EMPTY
80038: LIST
80039: LIST
80040: LIST
80041: LIST
80042: LIST
80043: LIST
80044: LIST
80045: LIST
80046: LIST
80047: LIST
80048: LIST
80049: LIST
80050: LIST
80051: LIST
80052: LIST
80053: LIST
80054: LIST
80055: LIST
80056: LIST
80057: LIST
80058: LIST
80059: LIST
80060: LIST
80061: LIST
80062: LIST
80063: LIST
80064: LIST
80065: LIST
80066: LIST
80067: LIST
80068: LIST
80069: LIST
80070: LIST
80071: LIST
80072: LIST
80073: LIST
80074: LIST
80075: LIST
80076: LIST
80077: LIST
80078: LIST
80079: LIST
80080: LIST
80081: LIST
80082: LIST
80083: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
80084: LD_ADDR_VAR 0 32
80088: PUSH
80089: LD_INT 4
80091: NEG
80092: PUSH
80093: LD_INT 0
80095: PUSH
80096: EMPTY
80097: LIST
80098: LIST
80099: PUSH
80100: LD_INT 4
80102: NEG
80103: PUSH
80104: LD_INT 1
80106: NEG
80107: PUSH
80108: EMPTY
80109: LIST
80110: LIST
80111: PUSH
80112: LD_INT 3
80114: NEG
80115: PUSH
80116: LD_INT 0
80118: PUSH
80119: EMPTY
80120: LIST
80121: LIST
80122: PUSH
80123: LD_INT 3
80125: NEG
80126: PUSH
80127: LD_INT 1
80129: PUSH
80130: EMPTY
80131: LIST
80132: LIST
80133: PUSH
80134: LD_INT 4
80136: NEG
80137: PUSH
80138: LD_INT 1
80140: PUSH
80141: EMPTY
80142: LIST
80143: LIST
80144: PUSH
80145: LD_INT 5
80147: NEG
80148: PUSH
80149: LD_INT 0
80151: PUSH
80152: EMPTY
80153: LIST
80154: LIST
80155: PUSH
80156: LD_INT 5
80158: NEG
80159: PUSH
80160: LD_INT 1
80162: NEG
80163: PUSH
80164: EMPTY
80165: LIST
80166: LIST
80167: PUSH
80168: LD_INT 5
80170: NEG
80171: PUSH
80172: LD_INT 2
80174: NEG
80175: PUSH
80176: EMPTY
80177: LIST
80178: LIST
80179: PUSH
80180: LD_INT 3
80182: NEG
80183: PUSH
80184: LD_INT 2
80186: PUSH
80187: EMPTY
80188: LIST
80189: LIST
80190: PUSH
80191: LD_INT 3
80193: NEG
80194: PUSH
80195: LD_INT 3
80197: NEG
80198: PUSH
80199: EMPTY
80200: LIST
80201: LIST
80202: PUSH
80203: LD_INT 3
80205: NEG
80206: PUSH
80207: LD_INT 4
80209: NEG
80210: PUSH
80211: EMPTY
80212: LIST
80213: LIST
80214: PUSH
80215: LD_INT 2
80217: NEG
80218: PUSH
80219: LD_INT 3
80221: NEG
80222: PUSH
80223: EMPTY
80224: LIST
80225: LIST
80226: PUSH
80227: LD_INT 2
80229: NEG
80230: PUSH
80231: LD_INT 2
80233: NEG
80234: PUSH
80235: EMPTY
80236: LIST
80237: LIST
80238: PUSH
80239: LD_INT 3
80241: NEG
80242: PUSH
80243: LD_INT 2
80245: NEG
80246: PUSH
80247: EMPTY
80248: LIST
80249: LIST
80250: PUSH
80251: LD_INT 4
80253: NEG
80254: PUSH
80255: LD_INT 3
80257: NEG
80258: PUSH
80259: EMPTY
80260: LIST
80261: LIST
80262: PUSH
80263: LD_INT 4
80265: NEG
80266: PUSH
80267: LD_INT 4
80269: NEG
80270: PUSH
80271: EMPTY
80272: LIST
80273: LIST
80274: PUSH
80275: LD_INT 2
80277: NEG
80278: PUSH
80279: LD_INT 4
80281: NEG
80282: PUSH
80283: EMPTY
80284: LIST
80285: LIST
80286: PUSH
80287: LD_INT 4
80289: NEG
80290: PUSH
80291: LD_INT 2
80293: NEG
80294: PUSH
80295: EMPTY
80296: LIST
80297: LIST
80298: PUSH
80299: LD_INT 0
80301: PUSH
80302: LD_INT 4
80304: NEG
80305: PUSH
80306: EMPTY
80307: LIST
80308: LIST
80309: PUSH
80310: LD_INT 0
80312: PUSH
80313: LD_INT 5
80315: NEG
80316: PUSH
80317: EMPTY
80318: LIST
80319: LIST
80320: PUSH
80321: LD_INT 1
80323: PUSH
80324: LD_INT 4
80326: NEG
80327: PUSH
80328: EMPTY
80329: LIST
80330: LIST
80331: PUSH
80332: LD_INT 1
80334: PUSH
80335: LD_INT 3
80337: NEG
80338: PUSH
80339: EMPTY
80340: LIST
80341: LIST
80342: PUSH
80343: LD_INT 0
80345: PUSH
80346: LD_INT 3
80348: NEG
80349: PUSH
80350: EMPTY
80351: LIST
80352: LIST
80353: PUSH
80354: LD_INT 1
80356: NEG
80357: PUSH
80358: LD_INT 4
80360: NEG
80361: PUSH
80362: EMPTY
80363: LIST
80364: LIST
80365: PUSH
80366: LD_INT 1
80368: NEG
80369: PUSH
80370: LD_INT 5
80372: NEG
80373: PUSH
80374: EMPTY
80375: LIST
80376: LIST
80377: PUSH
80378: LD_INT 2
80380: PUSH
80381: LD_INT 3
80383: NEG
80384: PUSH
80385: EMPTY
80386: LIST
80387: LIST
80388: PUSH
80389: LD_INT 2
80391: NEG
80392: PUSH
80393: LD_INT 5
80395: NEG
80396: PUSH
80397: EMPTY
80398: LIST
80399: LIST
80400: PUSH
80401: LD_INT 3
80403: PUSH
80404: LD_INT 0
80406: PUSH
80407: EMPTY
80408: LIST
80409: LIST
80410: PUSH
80411: LD_INT 3
80413: PUSH
80414: LD_INT 1
80416: NEG
80417: PUSH
80418: EMPTY
80419: LIST
80420: LIST
80421: PUSH
80422: LD_INT 4
80424: PUSH
80425: LD_INT 0
80427: PUSH
80428: EMPTY
80429: LIST
80430: LIST
80431: PUSH
80432: LD_INT 4
80434: PUSH
80435: LD_INT 1
80437: PUSH
80438: EMPTY
80439: LIST
80440: LIST
80441: PUSH
80442: LD_INT 3
80444: PUSH
80445: LD_INT 1
80447: PUSH
80448: EMPTY
80449: LIST
80450: LIST
80451: PUSH
80452: LD_INT 2
80454: PUSH
80455: LD_INT 0
80457: PUSH
80458: EMPTY
80459: LIST
80460: LIST
80461: PUSH
80462: LD_INT 2
80464: PUSH
80465: LD_INT 1
80467: NEG
80468: PUSH
80469: EMPTY
80470: LIST
80471: LIST
80472: PUSH
80473: LD_INT 2
80475: PUSH
80476: LD_INT 2
80478: NEG
80479: PUSH
80480: EMPTY
80481: LIST
80482: LIST
80483: PUSH
80484: LD_INT 4
80486: PUSH
80487: LD_INT 2
80489: PUSH
80490: EMPTY
80491: LIST
80492: LIST
80493: PUSH
80494: LD_INT 4
80496: PUSH
80497: LD_INT 4
80499: PUSH
80500: EMPTY
80501: LIST
80502: LIST
80503: PUSH
80504: LD_INT 4
80506: PUSH
80507: LD_INT 3
80509: PUSH
80510: EMPTY
80511: LIST
80512: LIST
80513: PUSH
80514: LD_INT 5
80516: PUSH
80517: LD_INT 4
80519: PUSH
80520: EMPTY
80521: LIST
80522: LIST
80523: PUSH
80524: LD_INT 5
80526: PUSH
80527: LD_INT 5
80529: PUSH
80530: EMPTY
80531: LIST
80532: LIST
80533: PUSH
80534: LD_INT 4
80536: PUSH
80537: LD_INT 5
80539: PUSH
80540: EMPTY
80541: LIST
80542: LIST
80543: PUSH
80544: LD_INT 3
80546: PUSH
80547: LD_INT 4
80549: PUSH
80550: EMPTY
80551: LIST
80552: LIST
80553: PUSH
80554: LD_INT 3
80556: PUSH
80557: LD_INT 3
80559: PUSH
80560: EMPTY
80561: LIST
80562: LIST
80563: PUSH
80564: LD_INT 5
80566: PUSH
80567: LD_INT 3
80569: PUSH
80570: EMPTY
80571: LIST
80572: LIST
80573: PUSH
80574: LD_INT 3
80576: PUSH
80577: LD_INT 5
80579: PUSH
80580: EMPTY
80581: LIST
80582: LIST
80583: PUSH
80584: EMPTY
80585: LIST
80586: LIST
80587: LIST
80588: LIST
80589: LIST
80590: LIST
80591: LIST
80592: LIST
80593: LIST
80594: LIST
80595: LIST
80596: LIST
80597: LIST
80598: LIST
80599: LIST
80600: LIST
80601: LIST
80602: LIST
80603: LIST
80604: LIST
80605: LIST
80606: LIST
80607: LIST
80608: LIST
80609: LIST
80610: LIST
80611: LIST
80612: LIST
80613: LIST
80614: LIST
80615: LIST
80616: LIST
80617: LIST
80618: LIST
80619: LIST
80620: LIST
80621: LIST
80622: LIST
80623: LIST
80624: LIST
80625: LIST
80626: LIST
80627: LIST
80628: LIST
80629: LIST
80630: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
80631: LD_ADDR_VAR 0 33
80635: PUSH
80636: LD_INT 4
80638: NEG
80639: PUSH
80640: LD_INT 4
80642: NEG
80643: PUSH
80644: EMPTY
80645: LIST
80646: LIST
80647: PUSH
80648: LD_INT 4
80650: NEG
80651: PUSH
80652: LD_INT 5
80654: NEG
80655: PUSH
80656: EMPTY
80657: LIST
80658: LIST
80659: PUSH
80660: LD_INT 3
80662: NEG
80663: PUSH
80664: LD_INT 4
80666: NEG
80667: PUSH
80668: EMPTY
80669: LIST
80670: LIST
80671: PUSH
80672: LD_INT 3
80674: NEG
80675: PUSH
80676: LD_INT 3
80678: NEG
80679: PUSH
80680: EMPTY
80681: LIST
80682: LIST
80683: PUSH
80684: LD_INT 4
80686: NEG
80687: PUSH
80688: LD_INT 3
80690: NEG
80691: PUSH
80692: EMPTY
80693: LIST
80694: LIST
80695: PUSH
80696: LD_INT 5
80698: NEG
80699: PUSH
80700: LD_INT 4
80702: NEG
80703: PUSH
80704: EMPTY
80705: LIST
80706: LIST
80707: PUSH
80708: LD_INT 5
80710: NEG
80711: PUSH
80712: LD_INT 5
80714: NEG
80715: PUSH
80716: EMPTY
80717: LIST
80718: LIST
80719: PUSH
80720: LD_INT 3
80722: NEG
80723: PUSH
80724: LD_INT 5
80726: NEG
80727: PUSH
80728: EMPTY
80729: LIST
80730: LIST
80731: PUSH
80732: LD_INT 5
80734: NEG
80735: PUSH
80736: LD_INT 3
80738: NEG
80739: PUSH
80740: EMPTY
80741: LIST
80742: LIST
80743: PUSH
80744: LD_INT 0
80746: PUSH
80747: LD_INT 3
80749: NEG
80750: PUSH
80751: EMPTY
80752: LIST
80753: LIST
80754: PUSH
80755: LD_INT 0
80757: PUSH
80758: LD_INT 4
80760: NEG
80761: PUSH
80762: EMPTY
80763: LIST
80764: LIST
80765: PUSH
80766: LD_INT 1
80768: PUSH
80769: LD_INT 3
80771: NEG
80772: PUSH
80773: EMPTY
80774: LIST
80775: LIST
80776: PUSH
80777: LD_INT 1
80779: PUSH
80780: LD_INT 2
80782: NEG
80783: PUSH
80784: EMPTY
80785: LIST
80786: LIST
80787: PUSH
80788: LD_INT 0
80790: PUSH
80791: LD_INT 2
80793: NEG
80794: PUSH
80795: EMPTY
80796: LIST
80797: LIST
80798: PUSH
80799: LD_INT 1
80801: NEG
80802: PUSH
80803: LD_INT 3
80805: NEG
80806: PUSH
80807: EMPTY
80808: LIST
80809: LIST
80810: PUSH
80811: LD_INT 1
80813: NEG
80814: PUSH
80815: LD_INT 4
80817: NEG
80818: PUSH
80819: EMPTY
80820: LIST
80821: LIST
80822: PUSH
80823: LD_INT 2
80825: PUSH
80826: LD_INT 2
80828: NEG
80829: PUSH
80830: EMPTY
80831: LIST
80832: LIST
80833: PUSH
80834: LD_INT 2
80836: NEG
80837: PUSH
80838: LD_INT 4
80840: NEG
80841: PUSH
80842: EMPTY
80843: LIST
80844: LIST
80845: PUSH
80846: LD_INT 4
80848: PUSH
80849: LD_INT 0
80851: PUSH
80852: EMPTY
80853: LIST
80854: LIST
80855: PUSH
80856: LD_INT 4
80858: PUSH
80859: LD_INT 1
80861: NEG
80862: PUSH
80863: EMPTY
80864: LIST
80865: LIST
80866: PUSH
80867: LD_INT 5
80869: PUSH
80870: LD_INT 0
80872: PUSH
80873: EMPTY
80874: LIST
80875: LIST
80876: PUSH
80877: LD_INT 5
80879: PUSH
80880: LD_INT 1
80882: PUSH
80883: EMPTY
80884: LIST
80885: LIST
80886: PUSH
80887: LD_INT 4
80889: PUSH
80890: LD_INT 1
80892: PUSH
80893: EMPTY
80894: LIST
80895: LIST
80896: PUSH
80897: LD_INT 3
80899: PUSH
80900: LD_INT 0
80902: PUSH
80903: EMPTY
80904: LIST
80905: LIST
80906: PUSH
80907: LD_INT 3
80909: PUSH
80910: LD_INT 1
80912: NEG
80913: PUSH
80914: EMPTY
80915: LIST
80916: LIST
80917: PUSH
80918: LD_INT 3
80920: PUSH
80921: LD_INT 2
80923: NEG
80924: PUSH
80925: EMPTY
80926: LIST
80927: LIST
80928: PUSH
80929: LD_INT 5
80931: PUSH
80932: LD_INT 2
80934: PUSH
80935: EMPTY
80936: LIST
80937: LIST
80938: PUSH
80939: LD_INT 3
80941: PUSH
80942: LD_INT 3
80944: PUSH
80945: EMPTY
80946: LIST
80947: LIST
80948: PUSH
80949: LD_INT 3
80951: PUSH
80952: LD_INT 2
80954: PUSH
80955: EMPTY
80956: LIST
80957: LIST
80958: PUSH
80959: LD_INT 4
80961: PUSH
80962: LD_INT 3
80964: PUSH
80965: EMPTY
80966: LIST
80967: LIST
80968: PUSH
80969: LD_INT 4
80971: PUSH
80972: LD_INT 4
80974: PUSH
80975: EMPTY
80976: LIST
80977: LIST
80978: PUSH
80979: LD_INT 3
80981: PUSH
80982: LD_INT 4
80984: PUSH
80985: EMPTY
80986: LIST
80987: LIST
80988: PUSH
80989: LD_INT 2
80991: PUSH
80992: LD_INT 3
80994: PUSH
80995: EMPTY
80996: LIST
80997: LIST
80998: PUSH
80999: LD_INT 2
81001: PUSH
81002: LD_INT 2
81004: PUSH
81005: EMPTY
81006: LIST
81007: LIST
81008: PUSH
81009: LD_INT 4
81011: PUSH
81012: LD_INT 2
81014: PUSH
81015: EMPTY
81016: LIST
81017: LIST
81018: PUSH
81019: LD_INT 2
81021: PUSH
81022: LD_INT 4
81024: PUSH
81025: EMPTY
81026: LIST
81027: LIST
81028: PUSH
81029: LD_INT 0
81031: PUSH
81032: LD_INT 4
81034: PUSH
81035: EMPTY
81036: LIST
81037: LIST
81038: PUSH
81039: LD_INT 0
81041: PUSH
81042: LD_INT 3
81044: PUSH
81045: EMPTY
81046: LIST
81047: LIST
81048: PUSH
81049: LD_INT 1
81051: PUSH
81052: LD_INT 4
81054: PUSH
81055: EMPTY
81056: LIST
81057: LIST
81058: PUSH
81059: LD_INT 1
81061: PUSH
81062: LD_INT 5
81064: PUSH
81065: EMPTY
81066: LIST
81067: LIST
81068: PUSH
81069: LD_INT 0
81071: PUSH
81072: LD_INT 5
81074: PUSH
81075: EMPTY
81076: LIST
81077: LIST
81078: PUSH
81079: LD_INT 1
81081: NEG
81082: PUSH
81083: LD_INT 4
81085: PUSH
81086: EMPTY
81087: LIST
81088: LIST
81089: PUSH
81090: LD_INT 1
81092: NEG
81093: PUSH
81094: LD_INT 3
81096: PUSH
81097: EMPTY
81098: LIST
81099: LIST
81100: PUSH
81101: LD_INT 2
81103: PUSH
81104: LD_INT 5
81106: PUSH
81107: EMPTY
81108: LIST
81109: LIST
81110: PUSH
81111: LD_INT 2
81113: NEG
81114: PUSH
81115: LD_INT 3
81117: PUSH
81118: EMPTY
81119: LIST
81120: LIST
81121: PUSH
81122: EMPTY
81123: LIST
81124: LIST
81125: LIST
81126: LIST
81127: LIST
81128: LIST
81129: LIST
81130: LIST
81131: LIST
81132: LIST
81133: LIST
81134: LIST
81135: LIST
81136: LIST
81137: LIST
81138: LIST
81139: LIST
81140: LIST
81141: LIST
81142: LIST
81143: LIST
81144: LIST
81145: LIST
81146: LIST
81147: LIST
81148: LIST
81149: LIST
81150: LIST
81151: LIST
81152: LIST
81153: LIST
81154: LIST
81155: LIST
81156: LIST
81157: LIST
81158: LIST
81159: LIST
81160: LIST
81161: LIST
81162: LIST
81163: LIST
81164: LIST
81165: LIST
81166: LIST
81167: LIST
81168: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
81169: LD_ADDR_VAR 0 34
81173: PUSH
81174: LD_INT 0
81176: PUSH
81177: LD_INT 4
81179: NEG
81180: PUSH
81181: EMPTY
81182: LIST
81183: LIST
81184: PUSH
81185: LD_INT 0
81187: PUSH
81188: LD_INT 5
81190: NEG
81191: PUSH
81192: EMPTY
81193: LIST
81194: LIST
81195: PUSH
81196: LD_INT 1
81198: PUSH
81199: LD_INT 4
81201: NEG
81202: PUSH
81203: EMPTY
81204: LIST
81205: LIST
81206: PUSH
81207: LD_INT 1
81209: PUSH
81210: LD_INT 3
81212: NEG
81213: PUSH
81214: EMPTY
81215: LIST
81216: LIST
81217: PUSH
81218: LD_INT 0
81220: PUSH
81221: LD_INT 3
81223: NEG
81224: PUSH
81225: EMPTY
81226: LIST
81227: LIST
81228: PUSH
81229: LD_INT 1
81231: NEG
81232: PUSH
81233: LD_INT 4
81235: NEG
81236: PUSH
81237: EMPTY
81238: LIST
81239: LIST
81240: PUSH
81241: LD_INT 1
81243: NEG
81244: PUSH
81245: LD_INT 5
81247: NEG
81248: PUSH
81249: EMPTY
81250: LIST
81251: LIST
81252: PUSH
81253: LD_INT 2
81255: PUSH
81256: LD_INT 3
81258: NEG
81259: PUSH
81260: EMPTY
81261: LIST
81262: LIST
81263: PUSH
81264: LD_INT 2
81266: NEG
81267: PUSH
81268: LD_INT 5
81270: NEG
81271: PUSH
81272: EMPTY
81273: LIST
81274: LIST
81275: PUSH
81276: LD_INT 3
81278: PUSH
81279: LD_INT 0
81281: PUSH
81282: EMPTY
81283: LIST
81284: LIST
81285: PUSH
81286: LD_INT 3
81288: PUSH
81289: LD_INT 1
81291: NEG
81292: PUSH
81293: EMPTY
81294: LIST
81295: LIST
81296: PUSH
81297: LD_INT 4
81299: PUSH
81300: LD_INT 0
81302: PUSH
81303: EMPTY
81304: LIST
81305: LIST
81306: PUSH
81307: LD_INT 4
81309: PUSH
81310: LD_INT 1
81312: PUSH
81313: EMPTY
81314: LIST
81315: LIST
81316: PUSH
81317: LD_INT 3
81319: PUSH
81320: LD_INT 1
81322: PUSH
81323: EMPTY
81324: LIST
81325: LIST
81326: PUSH
81327: LD_INT 2
81329: PUSH
81330: LD_INT 0
81332: PUSH
81333: EMPTY
81334: LIST
81335: LIST
81336: PUSH
81337: LD_INT 2
81339: PUSH
81340: LD_INT 1
81342: NEG
81343: PUSH
81344: EMPTY
81345: LIST
81346: LIST
81347: PUSH
81348: LD_INT 2
81350: PUSH
81351: LD_INT 2
81353: NEG
81354: PUSH
81355: EMPTY
81356: LIST
81357: LIST
81358: PUSH
81359: LD_INT 4
81361: PUSH
81362: LD_INT 2
81364: PUSH
81365: EMPTY
81366: LIST
81367: LIST
81368: PUSH
81369: LD_INT 4
81371: PUSH
81372: LD_INT 4
81374: PUSH
81375: EMPTY
81376: LIST
81377: LIST
81378: PUSH
81379: LD_INT 4
81381: PUSH
81382: LD_INT 3
81384: PUSH
81385: EMPTY
81386: LIST
81387: LIST
81388: PUSH
81389: LD_INT 5
81391: PUSH
81392: LD_INT 4
81394: PUSH
81395: EMPTY
81396: LIST
81397: LIST
81398: PUSH
81399: LD_INT 5
81401: PUSH
81402: LD_INT 5
81404: PUSH
81405: EMPTY
81406: LIST
81407: LIST
81408: PUSH
81409: LD_INT 4
81411: PUSH
81412: LD_INT 5
81414: PUSH
81415: EMPTY
81416: LIST
81417: LIST
81418: PUSH
81419: LD_INT 3
81421: PUSH
81422: LD_INT 4
81424: PUSH
81425: EMPTY
81426: LIST
81427: LIST
81428: PUSH
81429: LD_INT 3
81431: PUSH
81432: LD_INT 3
81434: PUSH
81435: EMPTY
81436: LIST
81437: LIST
81438: PUSH
81439: LD_INT 5
81441: PUSH
81442: LD_INT 3
81444: PUSH
81445: EMPTY
81446: LIST
81447: LIST
81448: PUSH
81449: LD_INT 3
81451: PUSH
81452: LD_INT 5
81454: PUSH
81455: EMPTY
81456: LIST
81457: LIST
81458: PUSH
81459: LD_INT 0
81461: PUSH
81462: LD_INT 3
81464: PUSH
81465: EMPTY
81466: LIST
81467: LIST
81468: PUSH
81469: LD_INT 0
81471: PUSH
81472: LD_INT 2
81474: PUSH
81475: EMPTY
81476: LIST
81477: LIST
81478: PUSH
81479: LD_INT 1
81481: PUSH
81482: LD_INT 3
81484: PUSH
81485: EMPTY
81486: LIST
81487: LIST
81488: PUSH
81489: LD_INT 1
81491: PUSH
81492: LD_INT 4
81494: PUSH
81495: EMPTY
81496: LIST
81497: LIST
81498: PUSH
81499: LD_INT 0
81501: PUSH
81502: LD_INT 4
81504: PUSH
81505: EMPTY
81506: LIST
81507: LIST
81508: PUSH
81509: LD_INT 1
81511: NEG
81512: PUSH
81513: LD_INT 3
81515: PUSH
81516: EMPTY
81517: LIST
81518: LIST
81519: PUSH
81520: LD_INT 1
81522: NEG
81523: PUSH
81524: LD_INT 2
81526: PUSH
81527: EMPTY
81528: LIST
81529: LIST
81530: PUSH
81531: LD_INT 2
81533: PUSH
81534: LD_INT 4
81536: PUSH
81537: EMPTY
81538: LIST
81539: LIST
81540: PUSH
81541: LD_INT 2
81543: NEG
81544: PUSH
81545: LD_INT 2
81547: PUSH
81548: EMPTY
81549: LIST
81550: LIST
81551: PUSH
81552: LD_INT 4
81554: NEG
81555: PUSH
81556: LD_INT 0
81558: PUSH
81559: EMPTY
81560: LIST
81561: LIST
81562: PUSH
81563: LD_INT 4
81565: NEG
81566: PUSH
81567: LD_INT 1
81569: NEG
81570: PUSH
81571: EMPTY
81572: LIST
81573: LIST
81574: PUSH
81575: LD_INT 3
81577: NEG
81578: PUSH
81579: LD_INT 0
81581: PUSH
81582: EMPTY
81583: LIST
81584: LIST
81585: PUSH
81586: LD_INT 3
81588: NEG
81589: PUSH
81590: LD_INT 1
81592: PUSH
81593: EMPTY
81594: LIST
81595: LIST
81596: PUSH
81597: LD_INT 4
81599: NEG
81600: PUSH
81601: LD_INT 1
81603: PUSH
81604: EMPTY
81605: LIST
81606: LIST
81607: PUSH
81608: LD_INT 5
81610: NEG
81611: PUSH
81612: LD_INT 0
81614: PUSH
81615: EMPTY
81616: LIST
81617: LIST
81618: PUSH
81619: LD_INT 5
81621: NEG
81622: PUSH
81623: LD_INT 1
81625: NEG
81626: PUSH
81627: EMPTY
81628: LIST
81629: LIST
81630: PUSH
81631: LD_INT 5
81633: NEG
81634: PUSH
81635: LD_INT 2
81637: NEG
81638: PUSH
81639: EMPTY
81640: LIST
81641: LIST
81642: PUSH
81643: LD_INT 3
81645: NEG
81646: PUSH
81647: LD_INT 2
81649: PUSH
81650: EMPTY
81651: LIST
81652: LIST
81653: PUSH
81654: EMPTY
81655: LIST
81656: LIST
81657: LIST
81658: LIST
81659: LIST
81660: LIST
81661: LIST
81662: LIST
81663: LIST
81664: LIST
81665: LIST
81666: LIST
81667: LIST
81668: LIST
81669: LIST
81670: LIST
81671: LIST
81672: LIST
81673: LIST
81674: LIST
81675: LIST
81676: LIST
81677: LIST
81678: LIST
81679: LIST
81680: LIST
81681: LIST
81682: LIST
81683: LIST
81684: LIST
81685: LIST
81686: LIST
81687: LIST
81688: LIST
81689: LIST
81690: LIST
81691: LIST
81692: LIST
81693: LIST
81694: LIST
81695: LIST
81696: LIST
81697: LIST
81698: LIST
81699: LIST
81700: ST_TO_ADDR
// end ; end ;
81701: GO 81704
81703: POP
// case btype of b_depot , b_warehouse :
81704: LD_VAR 0 1
81708: PUSH
81709: LD_INT 0
81711: DOUBLE
81712: EQUAL
81713: IFTRUE 81723
81715: LD_INT 1
81717: DOUBLE
81718: EQUAL
81719: IFTRUE 81723
81721: GO 81924
81723: POP
// case nation of nation_american :
81724: LD_VAR 0 5
81728: PUSH
81729: LD_INT 1
81731: DOUBLE
81732: EQUAL
81733: IFTRUE 81737
81735: GO 81793
81737: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
81738: LD_ADDR_VAR 0 9
81742: PUSH
81743: LD_VAR 0 11
81747: PUSH
81748: LD_VAR 0 12
81752: PUSH
81753: LD_VAR 0 13
81757: PUSH
81758: LD_VAR 0 14
81762: PUSH
81763: LD_VAR 0 15
81767: PUSH
81768: LD_VAR 0 16
81772: PUSH
81773: EMPTY
81774: LIST
81775: LIST
81776: LIST
81777: LIST
81778: LIST
81779: LIST
81780: PUSH
81781: LD_VAR 0 4
81785: PUSH
81786: LD_INT 1
81788: PLUS
81789: ARRAY
81790: ST_TO_ADDR
81791: GO 81922
81793: LD_INT 2
81795: DOUBLE
81796: EQUAL
81797: IFTRUE 81801
81799: GO 81857
81801: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
81802: LD_ADDR_VAR 0 9
81806: PUSH
81807: LD_VAR 0 17
81811: PUSH
81812: LD_VAR 0 18
81816: PUSH
81817: LD_VAR 0 19
81821: PUSH
81822: LD_VAR 0 20
81826: PUSH
81827: LD_VAR 0 21
81831: PUSH
81832: LD_VAR 0 22
81836: PUSH
81837: EMPTY
81838: LIST
81839: LIST
81840: LIST
81841: LIST
81842: LIST
81843: LIST
81844: PUSH
81845: LD_VAR 0 4
81849: PUSH
81850: LD_INT 1
81852: PLUS
81853: ARRAY
81854: ST_TO_ADDR
81855: GO 81922
81857: LD_INT 3
81859: DOUBLE
81860: EQUAL
81861: IFTRUE 81865
81863: GO 81921
81865: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
81866: LD_ADDR_VAR 0 9
81870: PUSH
81871: LD_VAR 0 23
81875: PUSH
81876: LD_VAR 0 24
81880: PUSH
81881: LD_VAR 0 25
81885: PUSH
81886: LD_VAR 0 26
81890: PUSH
81891: LD_VAR 0 27
81895: PUSH
81896: LD_VAR 0 28
81900: PUSH
81901: EMPTY
81902: LIST
81903: LIST
81904: LIST
81905: LIST
81906: LIST
81907: LIST
81908: PUSH
81909: LD_VAR 0 4
81913: PUSH
81914: LD_INT 1
81916: PLUS
81917: ARRAY
81918: ST_TO_ADDR
81919: GO 81922
81921: POP
81922: GO 82477
81924: LD_INT 2
81926: DOUBLE
81927: EQUAL
81928: IFTRUE 81938
81930: LD_INT 3
81932: DOUBLE
81933: EQUAL
81934: IFTRUE 81938
81936: GO 81994
81938: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
81939: LD_ADDR_VAR 0 9
81943: PUSH
81944: LD_VAR 0 29
81948: PUSH
81949: LD_VAR 0 30
81953: PUSH
81954: LD_VAR 0 31
81958: PUSH
81959: LD_VAR 0 32
81963: PUSH
81964: LD_VAR 0 33
81968: PUSH
81969: LD_VAR 0 34
81973: PUSH
81974: EMPTY
81975: LIST
81976: LIST
81977: LIST
81978: LIST
81979: LIST
81980: LIST
81981: PUSH
81982: LD_VAR 0 4
81986: PUSH
81987: LD_INT 1
81989: PLUS
81990: ARRAY
81991: ST_TO_ADDR
81992: GO 82477
81994: LD_INT 16
81996: DOUBLE
81997: EQUAL
81998: IFTRUE 82056
82000: LD_INT 17
82002: DOUBLE
82003: EQUAL
82004: IFTRUE 82056
82006: LD_INT 18
82008: DOUBLE
82009: EQUAL
82010: IFTRUE 82056
82012: LD_INT 19
82014: DOUBLE
82015: EQUAL
82016: IFTRUE 82056
82018: LD_INT 22
82020: DOUBLE
82021: EQUAL
82022: IFTRUE 82056
82024: LD_INT 20
82026: DOUBLE
82027: EQUAL
82028: IFTRUE 82056
82030: LD_INT 21
82032: DOUBLE
82033: EQUAL
82034: IFTRUE 82056
82036: LD_INT 23
82038: DOUBLE
82039: EQUAL
82040: IFTRUE 82056
82042: LD_INT 24
82044: DOUBLE
82045: EQUAL
82046: IFTRUE 82056
82048: LD_INT 25
82050: DOUBLE
82051: EQUAL
82052: IFTRUE 82056
82054: GO 82112
82056: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
82057: LD_ADDR_VAR 0 9
82061: PUSH
82062: LD_VAR 0 35
82066: PUSH
82067: LD_VAR 0 36
82071: PUSH
82072: LD_VAR 0 37
82076: PUSH
82077: LD_VAR 0 38
82081: PUSH
82082: LD_VAR 0 39
82086: PUSH
82087: LD_VAR 0 40
82091: PUSH
82092: EMPTY
82093: LIST
82094: LIST
82095: LIST
82096: LIST
82097: LIST
82098: LIST
82099: PUSH
82100: LD_VAR 0 4
82104: PUSH
82105: LD_INT 1
82107: PLUS
82108: ARRAY
82109: ST_TO_ADDR
82110: GO 82477
82112: LD_INT 6
82114: DOUBLE
82115: EQUAL
82116: IFTRUE 82168
82118: LD_INT 7
82120: DOUBLE
82121: EQUAL
82122: IFTRUE 82168
82124: LD_INT 8
82126: DOUBLE
82127: EQUAL
82128: IFTRUE 82168
82130: LD_INT 13
82132: DOUBLE
82133: EQUAL
82134: IFTRUE 82168
82136: LD_INT 12
82138: DOUBLE
82139: EQUAL
82140: IFTRUE 82168
82142: LD_INT 15
82144: DOUBLE
82145: EQUAL
82146: IFTRUE 82168
82148: LD_INT 11
82150: DOUBLE
82151: EQUAL
82152: IFTRUE 82168
82154: LD_INT 14
82156: DOUBLE
82157: EQUAL
82158: IFTRUE 82168
82160: LD_INT 10
82162: DOUBLE
82163: EQUAL
82164: IFTRUE 82168
82166: GO 82224
82168: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
82169: LD_ADDR_VAR 0 9
82173: PUSH
82174: LD_VAR 0 41
82178: PUSH
82179: LD_VAR 0 42
82183: PUSH
82184: LD_VAR 0 43
82188: PUSH
82189: LD_VAR 0 44
82193: PUSH
82194: LD_VAR 0 45
82198: PUSH
82199: LD_VAR 0 46
82203: PUSH
82204: EMPTY
82205: LIST
82206: LIST
82207: LIST
82208: LIST
82209: LIST
82210: LIST
82211: PUSH
82212: LD_VAR 0 4
82216: PUSH
82217: LD_INT 1
82219: PLUS
82220: ARRAY
82221: ST_TO_ADDR
82222: GO 82477
82224: LD_INT 36
82226: DOUBLE
82227: EQUAL
82228: IFTRUE 82232
82230: GO 82288
82232: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
82233: LD_ADDR_VAR 0 9
82237: PUSH
82238: LD_VAR 0 47
82242: PUSH
82243: LD_VAR 0 48
82247: PUSH
82248: LD_VAR 0 49
82252: PUSH
82253: LD_VAR 0 50
82257: PUSH
82258: LD_VAR 0 51
82262: PUSH
82263: LD_VAR 0 52
82267: PUSH
82268: EMPTY
82269: LIST
82270: LIST
82271: LIST
82272: LIST
82273: LIST
82274: LIST
82275: PUSH
82276: LD_VAR 0 4
82280: PUSH
82281: LD_INT 1
82283: PLUS
82284: ARRAY
82285: ST_TO_ADDR
82286: GO 82477
82288: LD_INT 4
82290: DOUBLE
82291: EQUAL
82292: IFTRUE 82314
82294: LD_INT 5
82296: DOUBLE
82297: EQUAL
82298: IFTRUE 82314
82300: LD_INT 34
82302: DOUBLE
82303: EQUAL
82304: IFTRUE 82314
82306: LD_INT 37
82308: DOUBLE
82309: EQUAL
82310: IFTRUE 82314
82312: GO 82370
82314: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
82315: LD_ADDR_VAR 0 9
82319: PUSH
82320: LD_VAR 0 53
82324: PUSH
82325: LD_VAR 0 54
82329: PUSH
82330: LD_VAR 0 55
82334: PUSH
82335: LD_VAR 0 56
82339: PUSH
82340: LD_VAR 0 57
82344: PUSH
82345: LD_VAR 0 58
82349: PUSH
82350: EMPTY
82351: LIST
82352: LIST
82353: LIST
82354: LIST
82355: LIST
82356: LIST
82357: PUSH
82358: LD_VAR 0 4
82362: PUSH
82363: LD_INT 1
82365: PLUS
82366: ARRAY
82367: ST_TO_ADDR
82368: GO 82477
82370: LD_INT 31
82372: DOUBLE
82373: EQUAL
82374: IFTRUE 82420
82376: LD_INT 32
82378: DOUBLE
82379: EQUAL
82380: IFTRUE 82420
82382: LD_INT 33
82384: DOUBLE
82385: EQUAL
82386: IFTRUE 82420
82388: LD_INT 27
82390: DOUBLE
82391: EQUAL
82392: IFTRUE 82420
82394: LD_INT 26
82396: DOUBLE
82397: EQUAL
82398: IFTRUE 82420
82400: LD_INT 28
82402: DOUBLE
82403: EQUAL
82404: IFTRUE 82420
82406: LD_INT 29
82408: DOUBLE
82409: EQUAL
82410: IFTRUE 82420
82412: LD_INT 30
82414: DOUBLE
82415: EQUAL
82416: IFTRUE 82420
82418: GO 82476
82420: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
82421: LD_ADDR_VAR 0 9
82425: PUSH
82426: LD_VAR 0 59
82430: PUSH
82431: LD_VAR 0 60
82435: PUSH
82436: LD_VAR 0 61
82440: PUSH
82441: LD_VAR 0 62
82445: PUSH
82446: LD_VAR 0 63
82450: PUSH
82451: LD_VAR 0 64
82455: PUSH
82456: EMPTY
82457: LIST
82458: LIST
82459: LIST
82460: LIST
82461: LIST
82462: LIST
82463: PUSH
82464: LD_VAR 0 4
82468: PUSH
82469: LD_INT 1
82471: PLUS
82472: ARRAY
82473: ST_TO_ADDR
82474: GO 82477
82476: POP
// temp_list2 = [ ] ;
82477: LD_ADDR_VAR 0 10
82481: PUSH
82482: EMPTY
82483: ST_TO_ADDR
// for i in temp_list do
82484: LD_ADDR_VAR 0 8
82488: PUSH
82489: LD_VAR 0 9
82493: PUSH
82494: FOR_IN
82495: IFFALSE 82547
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
82497: LD_ADDR_VAR 0 10
82501: PUSH
82502: LD_VAR 0 10
82506: PUSH
82507: LD_VAR 0 8
82511: PUSH
82512: LD_INT 1
82514: ARRAY
82515: PUSH
82516: LD_VAR 0 2
82520: PLUS
82521: PUSH
82522: LD_VAR 0 8
82526: PUSH
82527: LD_INT 2
82529: ARRAY
82530: PUSH
82531: LD_VAR 0 3
82535: PLUS
82536: PUSH
82537: EMPTY
82538: LIST
82539: LIST
82540: PUSH
82541: EMPTY
82542: LIST
82543: ADD
82544: ST_TO_ADDR
82545: GO 82494
82547: POP
82548: POP
// result = temp_list2 ;
82549: LD_ADDR_VAR 0 7
82553: PUSH
82554: LD_VAR 0 10
82558: ST_TO_ADDR
// end ;
82559: LD_VAR 0 7
82563: RET
// export function EnemyInRange ( unit , dist ) ; begin
82564: LD_INT 0
82566: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
82567: LD_ADDR_VAR 0 3
82571: PUSH
82572: LD_VAR 0 1
82576: PPUSH
82577: CALL_OW 255
82581: PPUSH
82582: LD_VAR 0 1
82586: PPUSH
82587: CALL_OW 250
82591: PPUSH
82592: LD_VAR 0 1
82596: PPUSH
82597: CALL_OW 251
82601: PPUSH
82602: LD_VAR 0 2
82606: PPUSH
82607: CALL 55966 0 4
82611: PUSH
82612: LD_INT 4
82614: ARRAY
82615: ST_TO_ADDR
// end ;
82616: LD_VAR 0 3
82620: RET
// export function PlayerSeeMe ( unit ) ; begin
82621: LD_INT 0
82623: PPUSH
// result := See ( your_side , unit ) ;
82624: LD_ADDR_VAR 0 2
82628: PUSH
82629: LD_OWVAR 2
82633: PPUSH
82634: LD_VAR 0 1
82638: PPUSH
82639: CALL_OW 292
82643: ST_TO_ADDR
// end ;
82644: LD_VAR 0 2
82648: RET
// export function ReverseDir ( unit ) ; begin
82649: LD_INT 0
82651: PPUSH
// if not unit then
82652: LD_VAR 0 1
82656: NOT
82657: IFFALSE 82661
// exit ;
82659: GO 82684
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
82661: LD_ADDR_VAR 0 2
82665: PUSH
82666: LD_VAR 0 1
82670: PPUSH
82671: CALL_OW 254
82675: PUSH
82676: LD_INT 3
82678: PLUS
82679: PUSH
82680: LD_INT 6
82682: MOD
82683: ST_TO_ADDR
// end ;
82684: LD_VAR 0 2
82688: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
82689: LD_INT 0
82691: PPUSH
82692: PPUSH
82693: PPUSH
82694: PPUSH
82695: PPUSH
82696: PPUSH
// if not unit or not hexes then
82697: LD_VAR 0 1
82701: NOT
82702: PUSH
82703: LD_VAR 0 2
82707: NOT
82708: OR
82709: IFFALSE 82713
// exit ;
82711: GO 82836
// dist := 9999 ;
82713: LD_ADDR_VAR 0 5
82717: PUSH
82718: LD_INT 9999
82720: ST_TO_ADDR
// for i = 1 to hexes do
82721: LD_ADDR_VAR 0 4
82725: PUSH
82726: DOUBLE
82727: LD_INT 1
82729: DEC
82730: ST_TO_ADDR
82731: LD_VAR 0 2
82735: PUSH
82736: FOR_TO
82737: IFFALSE 82824
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
82739: LD_ADDR_VAR 0 6
82743: PUSH
82744: LD_VAR 0 1
82748: PPUSH
82749: LD_VAR 0 2
82753: PUSH
82754: LD_VAR 0 4
82758: ARRAY
82759: PUSH
82760: LD_INT 1
82762: ARRAY
82763: PPUSH
82764: LD_VAR 0 2
82768: PUSH
82769: LD_VAR 0 4
82773: ARRAY
82774: PUSH
82775: LD_INT 2
82777: ARRAY
82778: PPUSH
82779: CALL_OW 297
82783: ST_TO_ADDR
// if tdist < dist then
82784: LD_VAR 0 6
82788: PUSH
82789: LD_VAR 0 5
82793: LESS
82794: IFFALSE 82822
// begin hex := hexes [ i ] ;
82796: LD_ADDR_VAR 0 8
82800: PUSH
82801: LD_VAR 0 2
82805: PUSH
82806: LD_VAR 0 4
82810: ARRAY
82811: ST_TO_ADDR
// dist := tdist ;
82812: LD_ADDR_VAR 0 5
82816: PUSH
82817: LD_VAR 0 6
82821: ST_TO_ADDR
// end ; end ;
82822: GO 82736
82824: POP
82825: POP
// result := hex ;
82826: LD_ADDR_VAR 0 3
82830: PUSH
82831: LD_VAR 0 8
82835: ST_TO_ADDR
// end ;
82836: LD_VAR 0 3
82840: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
82841: LD_INT 0
82843: PPUSH
82844: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
82845: LD_VAR 0 1
82849: NOT
82850: PUSH
82851: LD_VAR 0 1
82855: PUSH
82856: LD_INT 21
82858: PUSH
82859: LD_INT 2
82861: PUSH
82862: EMPTY
82863: LIST
82864: LIST
82865: PUSH
82866: LD_INT 23
82868: PUSH
82869: LD_INT 2
82871: PUSH
82872: EMPTY
82873: LIST
82874: LIST
82875: PUSH
82876: EMPTY
82877: LIST
82878: LIST
82879: PPUSH
82880: CALL_OW 69
82884: IN
82885: NOT
82886: OR
82887: IFFALSE 82891
// exit ;
82889: GO 82938
// for i = 1 to 3 do
82891: LD_ADDR_VAR 0 3
82895: PUSH
82896: DOUBLE
82897: LD_INT 1
82899: DEC
82900: ST_TO_ADDR
82901: LD_INT 3
82903: PUSH
82904: FOR_TO
82905: IFFALSE 82936
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
82907: LD_VAR 0 1
82911: PPUSH
82912: CALL_OW 250
82916: PPUSH
82917: LD_VAR 0 1
82921: PPUSH
82922: CALL_OW 251
82926: PPUSH
82927: LD_INT 1
82929: PPUSH
82930: CALL_OW 453
82934: GO 82904
82936: POP
82937: POP
// end ;
82938: LD_VAR 0 2
82942: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
82943: LD_INT 0
82945: PPUSH
82946: PPUSH
82947: PPUSH
82948: PPUSH
82949: PPUSH
82950: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
82951: LD_VAR 0 1
82955: NOT
82956: PUSH
82957: LD_VAR 0 2
82961: NOT
82962: OR
82963: PUSH
82964: LD_VAR 0 1
82968: PPUSH
82969: CALL_OW 314
82973: OR
82974: IFFALSE 82978
// exit ;
82976: GO 83419
// x := GetX ( enemy_unit ) ;
82978: LD_ADDR_VAR 0 7
82982: PUSH
82983: LD_VAR 0 2
82987: PPUSH
82988: CALL_OW 250
82992: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
82993: LD_ADDR_VAR 0 8
82997: PUSH
82998: LD_VAR 0 2
83002: PPUSH
83003: CALL_OW 251
83007: ST_TO_ADDR
// if not x or not y then
83008: LD_VAR 0 7
83012: NOT
83013: PUSH
83014: LD_VAR 0 8
83018: NOT
83019: OR
83020: IFFALSE 83024
// exit ;
83022: GO 83419
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
83024: LD_ADDR_VAR 0 6
83028: PUSH
83029: LD_VAR 0 7
83033: PPUSH
83034: LD_INT 0
83036: PPUSH
83037: LD_INT 4
83039: PPUSH
83040: CALL_OW 272
83044: PUSH
83045: LD_VAR 0 8
83049: PPUSH
83050: LD_INT 0
83052: PPUSH
83053: LD_INT 4
83055: PPUSH
83056: CALL_OW 273
83060: PUSH
83061: EMPTY
83062: LIST
83063: LIST
83064: PUSH
83065: LD_VAR 0 7
83069: PPUSH
83070: LD_INT 1
83072: PPUSH
83073: LD_INT 4
83075: PPUSH
83076: CALL_OW 272
83080: PUSH
83081: LD_VAR 0 8
83085: PPUSH
83086: LD_INT 1
83088: PPUSH
83089: LD_INT 4
83091: PPUSH
83092: CALL_OW 273
83096: PUSH
83097: EMPTY
83098: LIST
83099: LIST
83100: PUSH
83101: LD_VAR 0 7
83105: PPUSH
83106: LD_INT 2
83108: PPUSH
83109: LD_INT 4
83111: PPUSH
83112: CALL_OW 272
83116: PUSH
83117: LD_VAR 0 8
83121: PPUSH
83122: LD_INT 2
83124: PPUSH
83125: LD_INT 4
83127: PPUSH
83128: CALL_OW 273
83132: PUSH
83133: EMPTY
83134: LIST
83135: LIST
83136: PUSH
83137: LD_VAR 0 7
83141: PPUSH
83142: LD_INT 3
83144: PPUSH
83145: LD_INT 4
83147: PPUSH
83148: CALL_OW 272
83152: PUSH
83153: LD_VAR 0 8
83157: PPUSH
83158: LD_INT 3
83160: PPUSH
83161: LD_INT 4
83163: PPUSH
83164: CALL_OW 273
83168: PUSH
83169: EMPTY
83170: LIST
83171: LIST
83172: PUSH
83173: LD_VAR 0 7
83177: PPUSH
83178: LD_INT 4
83180: PPUSH
83181: LD_INT 4
83183: PPUSH
83184: CALL_OW 272
83188: PUSH
83189: LD_VAR 0 8
83193: PPUSH
83194: LD_INT 4
83196: PPUSH
83197: LD_INT 4
83199: PPUSH
83200: CALL_OW 273
83204: PUSH
83205: EMPTY
83206: LIST
83207: LIST
83208: PUSH
83209: LD_VAR 0 7
83213: PPUSH
83214: LD_INT 5
83216: PPUSH
83217: LD_INT 4
83219: PPUSH
83220: CALL_OW 272
83224: PUSH
83225: LD_VAR 0 8
83229: PPUSH
83230: LD_INT 5
83232: PPUSH
83233: LD_INT 4
83235: PPUSH
83236: CALL_OW 273
83240: PUSH
83241: EMPTY
83242: LIST
83243: LIST
83244: PUSH
83245: EMPTY
83246: LIST
83247: LIST
83248: LIST
83249: LIST
83250: LIST
83251: LIST
83252: ST_TO_ADDR
// for i = tmp downto 1 do
83253: LD_ADDR_VAR 0 4
83257: PUSH
83258: DOUBLE
83259: LD_VAR 0 6
83263: INC
83264: ST_TO_ADDR
83265: LD_INT 1
83267: PUSH
83268: FOR_DOWNTO
83269: IFFALSE 83370
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
83271: LD_VAR 0 6
83275: PUSH
83276: LD_VAR 0 4
83280: ARRAY
83281: PUSH
83282: LD_INT 1
83284: ARRAY
83285: PPUSH
83286: LD_VAR 0 6
83290: PUSH
83291: LD_VAR 0 4
83295: ARRAY
83296: PUSH
83297: LD_INT 2
83299: ARRAY
83300: PPUSH
83301: CALL_OW 488
83305: NOT
83306: PUSH
83307: LD_VAR 0 6
83311: PUSH
83312: LD_VAR 0 4
83316: ARRAY
83317: PUSH
83318: LD_INT 1
83320: ARRAY
83321: PPUSH
83322: LD_VAR 0 6
83326: PUSH
83327: LD_VAR 0 4
83331: ARRAY
83332: PUSH
83333: LD_INT 2
83335: ARRAY
83336: PPUSH
83337: CALL_OW 428
83341: PUSH
83342: LD_INT 0
83344: NONEQUAL
83345: OR
83346: IFFALSE 83368
// tmp := Delete ( tmp , i ) ;
83348: LD_ADDR_VAR 0 6
83352: PUSH
83353: LD_VAR 0 6
83357: PPUSH
83358: LD_VAR 0 4
83362: PPUSH
83363: CALL_OW 3
83367: ST_TO_ADDR
83368: GO 83268
83370: POP
83371: POP
// j := GetClosestHex ( unit , tmp ) ;
83372: LD_ADDR_VAR 0 5
83376: PUSH
83377: LD_VAR 0 1
83381: PPUSH
83382: LD_VAR 0 6
83386: PPUSH
83387: CALL 82689 0 2
83391: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
83392: LD_VAR 0 1
83396: PPUSH
83397: LD_VAR 0 5
83401: PUSH
83402: LD_INT 1
83404: ARRAY
83405: PPUSH
83406: LD_VAR 0 5
83410: PUSH
83411: LD_INT 2
83413: ARRAY
83414: PPUSH
83415: CALL_OW 111
// end ;
83419: LD_VAR 0 3
83423: RET
// export function PrepareApemanSoldier ( ) ; begin
83424: LD_INT 0
83426: PPUSH
// uc_nation := 0 ;
83427: LD_ADDR_OWVAR 21
83431: PUSH
83432: LD_INT 0
83434: ST_TO_ADDR
// hc_sex := sex_male ;
83435: LD_ADDR_OWVAR 27
83439: PUSH
83440: LD_INT 1
83442: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
83443: LD_ADDR_OWVAR 28
83447: PUSH
83448: LD_INT 15
83450: ST_TO_ADDR
// hc_gallery :=  ;
83451: LD_ADDR_OWVAR 33
83455: PUSH
83456: LD_STRING 
83458: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
83459: LD_ADDR_OWVAR 31
83463: PUSH
83464: LD_INT 0
83466: PPUSH
83467: LD_INT 3
83469: PPUSH
83470: CALL_OW 12
83474: PUSH
83475: LD_INT 0
83477: PPUSH
83478: LD_INT 3
83480: PPUSH
83481: CALL_OW 12
83485: PUSH
83486: LD_INT 0
83488: PUSH
83489: LD_INT 0
83491: PUSH
83492: EMPTY
83493: LIST
83494: LIST
83495: LIST
83496: LIST
83497: ST_TO_ADDR
// end ;
83498: LD_VAR 0 1
83502: RET
// export function PrepareApemanEngineer ( ) ; begin
83503: LD_INT 0
83505: PPUSH
// uc_nation := 0 ;
83506: LD_ADDR_OWVAR 21
83510: PUSH
83511: LD_INT 0
83513: ST_TO_ADDR
// hc_sex := sex_male ;
83514: LD_ADDR_OWVAR 27
83518: PUSH
83519: LD_INT 1
83521: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
83522: LD_ADDR_OWVAR 28
83526: PUSH
83527: LD_INT 16
83529: ST_TO_ADDR
// hc_gallery :=  ;
83530: LD_ADDR_OWVAR 33
83534: PUSH
83535: LD_STRING 
83537: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
83538: LD_ADDR_OWVAR 31
83542: PUSH
83543: LD_INT 0
83545: PPUSH
83546: LD_INT 3
83548: PPUSH
83549: CALL_OW 12
83553: PUSH
83554: LD_INT 0
83556: PPUSH
83557: LD_INT 3
83559: PPUSH
83560: CALL_OW 12
83564: PUSH
83565: LD_INT 0
83567: PUSH
83568: LD_INT 0
83570: PUSH
83571: EMPTY
83572: LIST
83573: LIST
83574: LIST
83575: LIST
83576: ST_TO_ADDR
// end ;
83577: LD_VAR 0 1
83581: RET
// export function PrepareApeman ( agressivity ) ; begin
83582: LD_INT 0
83584: PPUSH
// uc_side := 0 ;
83585: LD_ADDR_OWVAR 20
83589: PUSH
83590: LD_INT 0
83592: ST_TO_ADDR
// uc_nation := 0 ;
83593: LD_ADDR_OWVAR 21
83597: PUSH
83598: LD_INT 0
83600: ST_TO_ADDR
// hc_sex := sex_male ;
83601: LD_ADDR_OWVAR 27
83605: PUSH
83606: LD_INT 1
83608: ST_TO_ADDR
// hc_class := class_apeman ;
83609: LD_ADDR_OWVAR 28
83613: PUSH
83614: LD_INT 12
83616: ST_TO_ADDR
// hc_gallery :=  ;
83617: LD_ADDR_OWVAR 33
83621: PUSH
83622: LD_STRING 
83624: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
83625: LD_ADDR_OWVAR 35
83629: PUSH
83630: LD_VAR 0 1
83634: NEG
83635: PPUSH
83636: LD_VAR 0 1
83640: PPUSH
83641: CALL_OW 12
83645: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
83646: LD_ADDR_OWVAR 31
83650: PUSH
83651: LD_INT 0
83653: PPUSH
83654: LD_INT 3
83656: PPUSH
83657: CALL_OW 12
83661: PUSH
83662: LD_INT 0
83664: PPUSH
83665: LD_INT 3
83667: PPUSH
83668: CALL_OW 12
83672: PUSH
83673: LD_INT 0
83675: PUSH
83676: LD_INT 0
83678: PUSH
83679: EMPTY
83680: LIST
83681: LIST
83682: LIST
83683: LIST
83684: ST_TO_ADDR
// end ;
83685: LD_VAR 0 2
83689: RET
// export function PrepareTiger ( agressivity ) ; begin
83690: LD_INT 0
83692: PPUSH
// uc_side := 0 ;
83693: LD_ADDR_OWVAR 20
83697: PUSH
83698: LD_INT 0
83700: ST_TO_ADDR
// uc_nation := 0 ;
83701: LD_ADDR_OWVAR 21
83705: PUSH
83706: LD_INT 0
83708: ST_TO_ADDR
// hc_class := class_tiger ;
83709: LD_ADDR_OWVAR 28
83713: PUSH
83714: LD_INT 14
83716: ST_TO_ADDR
// hc_gallery :=  ;
83717: LD_ADDR_OWVAR 33
83721: PUSH
83722: LD_STRING 
83724: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
83725: LD_ADDR_OWVAR 35
83729: PUSH
83730: LD_VAR 0 1
83734: NEG
83735: PPUSH
83736: LD_VAR 0 1
83740: PPUSH
83741: CALL_OW 12
83745: ST_TO_ADDR
// end ;
83746: LD_VAR 0 2
83750: RET
// export function PrepareEnchidna ( ) ; begin
83751: LD_INT 0
83753: PPUSH
// uc_side := 0 ;
83754: LD_ADDR_OWVAR 20
83758: PUSH
83759: LD_INT 0
83761: ST_TO_ADDR
// uc_nation := 0 ;
83762: LD_ADDR_OWVAR 21
83766: PUSH
83767: LD_INT 0
83769: ST_TO_ADDR
// hc_class := class_baggie ;
83770: LD_ADDR_OWVAR 28
83774: PUSH
83775: LD_INT 13
83777: ST_TO_ADDR
// hc_gallery :=  ;
83778: LD_ADDR_OWVAR 33
83782: PUSH
83783: LD_STRING 
83785: ST_TO_ADDR
// end ;
83786: LD_VAR 0 1
83790: RET
// export function PrepareFrog ( ) ; begin
83791: LD_INT 0
83793: PPUSH
// uc_side := 0 ;
83794: LD_ADDR_OWVAR 20
83798: PUSH
83799: LD_INT 0
83801: ST_TO_ADDR
// uc_nation := 0 ;
83802: LD_ADDR_OWVAR 21
83806: PUSH
83807: LD_INT 0
83809: ST_TO_ADDR
// hc_class := class_frog ;
83810: LD_ADDR_OWVAR 28
83814: PUSH
83815: LD_INT 19
83817: ST_TO_ADDR
// hc_gallery :=  ;
83818: LD_ADDR_OWVAR 33
83822: PUSH
83823: LD_STRING 
83825: ST_TO_ADDR
// end ;
83826: LD_VAR 0 1
83830: RET
// export function PrepareFish ( ) ; begin
83831: LD_INT 0
83833: PPUSH
// uc_side := 0 ;
83834: LD_ADDR_OWVAR 20
83838: PUSH
83839: LD_INT 0
83841: ST_TO_ADDR
// uc_nation := 0 ;
83842: LD_ADDR_OWVAR 21
83846: PUSH
83847: LD_INT 0
83849: ST_TO_ADDR
// hc_class := class_fish ;
83850: LD_ADDR_OWVAR 28
83854: PUSH
83855: LD_INT 20
83857: ST_TO_ADDR
// hc_gallery :=  ;
83858: LD_ADDR_OWVAR 33
83862: PUSH
83863: LD_STRING 
83865: ST_TO_ADDR
// end ;
83866: LD_VAR 0 1
83870: RET
// export function PrepareBird ( ) ; begin
83871: LD_INT 0
83873: PPUSH
// uc_side := 0 ;
83874: LD_ADDR_OWVAR 20
83878: PUSH
83879: LD_INT 0
83881: ST_TO_ADDR
// uc_nation := 0 ;
83882: LD_ADDR_OWVAR 21
83886: PUSH
83887: LD_INT 0
83889: ST_TO_ADDR
// hc_class := class_phororhacos ;
83890: LD_ADDR_OWVAR 28
83894: PUSH
83895: LD_INT 18
83897: ST_TO_ADDR
// hc_gallery :=  ;
83898: LD_ADDR_OWVAR 33
83902: PUSH
83903: LD_STRING 
83905: ST_TO_ADDR
// end ;
83906: LD_VAR 0 1
83910: RET
// export function PrepareHorse ( ) ; begin
83911: LD_INT 0
83913: PPUSH
// uc_side := 0 ;
83914: LD_ADDR_OWVAR 20
83918: PUSH
83919: LD_INT 0
83921: ST_TO_ADDR
// uc_nation := 0 ;
83922: LD_ADDR_OWVAR 21
83926: PUSH
83927: LD_INT 0
83929: ST_TO_ADDR
// hc_class := class_horse ;
83930: LD_ADDR_OWVAR 28
83934: PUSH
83935: LD_INT 21
83937: ST_TO_ADDR
// hc_gallery :=  ;
83938: LD_ADDR_OWVAR 33
83942: PUSH
83943: LD_STRING 
83945: ST_TO_ADDR
// end ;
83946: LD_VAR 0 1
83950: RET
// export function PrepareMastodont ( ) ; begin
83951: LD_INT 0
83953: PPUSH
// uc_side := 0 ;
83954: LD_ADDR_OWVAR 20
83958: PUSH
83959: LD_INT 0
83961: ST_TO_ADDR
// uc_nation := 0 ;
83962: LD_ADDR_OWVAR 21
83966: PUSH
83967: LD_INT 0
83969: ST_TO_ADDR
// vc_chassis := class_mastodont ;
83970: LD_ADDR_OWVAR 37
83974: PUSH
83975: LD_INT 31
83977: ST_TO_ADDR
// vc_control := control_rider ;
83978: LD_ADDR_OWVAR 38
83982: PUSH
83983: LD_INT 4
83985: ST_TO_ADDR
// end ;
83986: LD_VAR 0 1
83990: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
83991: LD_INT 0
83993: PPUSH
83994: PPUSH
83995: PPUSH
// uc_side = 0 ;
83996: LD_ADDR_OWVAR 20
84000: PUSH
84001: LD_INT 0
84003: ST_TO_ADDR
// uc_nation = 0 ;
84004: LD_ADDR_OWVAR 21
84008: PUSH
84009: LD_INT 0
84011: ST_TO_ADDR
// InitHc_All ( ) ;
84012: CALL_OW 584
// InitVc ;
84016: CALL_OW 20
// if mastodonts then
84020: LD_VAR 0 6
84024: IFFALSE 84091
// for i = 1 to mastodonts do
84026: LD_ADDR_VAR 0 11
84030: PUSH
84031: DOUBLE
84032: LD_INT 1
84034: DEC
84035: ST_TO_ADDR
84036: LD_VAR 0 6
84040: PUSH
84041: FOR_TO
84042: IFFALSE 84089
// begin vc_chassis := 31 ;
84044: LD_ADDR_OWVAR 37
84048: PUSH
84049: LD_INT 31
84051: ST_TO_ADDR
// vc_control := control_rider ;
84052: LD_ADDR_OWVAR 38
84056: PUSH
84057: LD_INT 4
84059: ST_TO_ADDR
// animal := CreateVehicle ;
84060: LD_ADDR_VAR 0 12
84064: PUSH
84065: CALL_OW 45
84069: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84070: LD_VAR 0 12
84074: PPUSH
84075: LD_VAR 0 8
84079: PPUSH
84080: LD_INT 0
84082: PPUSH
84083: CALL 86226 0 3
// end ;
84087: GO 84041
84089: POP
84090: POP
// if horses then
84091: LD_VAR 0 5
84095: IFFALSE 84162
// for i = 1 to horses do
84097: LD_ADDR_VAR 0 11
84101: PUSH
84102: DOUBLE
84103: LD_INT 1
84105: DEC
84106: ST_TO_ADDR
84107: LD_VAR 0 5
84111: PUSH
84112: FOR_TO
84113: IFFALSE 84160
// begin hc_class := 21 ;
84115: LD_ADDR_OWVAR 28
84119: PUSH
84120: LD_INT 21
84122: ST_TO_ADDR
// hc_gallery :=  ;
84123: LD_ADDR_OWVAR 33
84127: PUSH
84128: LD_STRING 
84130: ST_TO_ADDR
// animal := CreateHuman ;
84131: LD_ADDR_VAR 0 12
84135: PUSH
84136: CALL_OW 44
84140: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84141: LD_VAR 0 12
84145: PPUSH
84146: LD_VAR 0 8
84150: PPUSH
84151: LD_INT 0
84153: PPUSH
84154: CALL 86226 0 3
// end ;
84158: GO 84112
84160: POP
84161: POP
// if birds then
84162: LD_VAR 0 1
84166: IFFALSE 84233
// for i = 1 to birds do
84168: LD_ADDR_VAR 0 11
84172: PUSH
84173: DOUBLE
84174: LD_INT 1
84176: DEC
84177: ST_TO_ADDR
84178: LD_VAR 0 1
84182: PUSH
84183: FOR_TO
84184: IFFALSE 84231
// begin hc_class = 18 ;
84186: LD_ADDR_OWVAR 28
84190: PUSH
84191: LD_INT 18
84193: ST_TO_ADDR
// hc_gallery =  ;
84194: LD_ADDR_OWVAR 33
84198: PUSH
84199: LD_STRING 
84201: ST_TO_ADDR
// animal := CreateHuman ;
84202: LD_ADDR_VAR 0 12
84206: PUSH
84207: CALL_OW 44
84211: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84212: LD_VAR 0 12
84216: PPUSH
84217: LD_VAR 0 8
84221: PPUSH
84222: LD_INT 0
84224: PPUSH
84225: CALL 86226 0 3
// end ;
84229: GO 84183
84231: POP
84232: POP
// if tigers then
84233: LD_VAR 0 2
84237: IFFALSE 84321
// for i = 1 to tigers do
84239: LD_ADDR_VAR 0 11
84243: PUSH
84244: DOUBLE
84245: LD_INT 1
84247: DEC
84248: ST_TO_ADDR
84249: LD_VAR 0 2
84253: PUSH
84254: FOR_TO
84255: IFFALSE 84319
// begin hc_class = class_tiger ;
84257: LD_ADDR_OWVAR 28
84261: PUSH
84262: LD_INT 14
84264: ST_TO_ADDR
// hc_gallery =  ;
84265: LD_ADDR_OWVAR 33
84269: PUSH
84270: LD_STRING 
84272: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
84273: LD_ADDR_OWVAR 35
84277: PUSH
84278: LD_INT 7
84280: NEG
84281: PPUSH
84282: LD_INT 7
84284: PPUSH
84285: CALL_OW 12
84289: ST_TO_ADDR
// animal := CreateHuman ;
84290: LD_ADDR_VAR 0 12
84294: PUSH
84295: CALL_OW 44
84299: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84300: LD_VAR 0 12
84304: PPUSH
84305: LD_VAR 0 8
84309: PPUSH
84310: LD_INT 0
84312: PPUSH
84313: CALL 86226 0 3
// end ;
84317: GO 84254
84319: POP
84320: POP
// if apemans then
84321: LD_VAR 0 3
84325: IFFALSE 84448
// for i = 1 to apemans do
84327: LD_ADDR_VAR 0 11
84331: PUSH
84332: DOUBLE
84333: LD_INT 1
84335: DEC
84336: ST_TO_ADDR
84337: LD_VAR 0 3
84341: PUSH
84342: FOR_TO
84343: IFFALSE 84446
// begin hc_class = class_apeman ;
84345: LD_ADDR_OWVAR 28
84349: PUSH
84350: LD_INT 12
84352: ST_TO_ADDR
// hc_gallery =  ;
84353: LD_ADDR_OWVAR 33
84357: PUSH
84358: LD_STRING 
84360: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
84361: LD_ADDR_OWVAR 35
84365: PUSH
84366: LD_INT 2
84368: NEG
84369: PPUSH
84370: LD_INT 2
84372: PPUSH
84373: CALL_OW 12
84377: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
84378: LD_ADDR_OWVAR 31
84382: PUSH
84383: LD_INT 1
84385: PPUSH
84386: LD_INT 3
84388: PPUSH
84389: CALL_OW 12
84393: PUSH
84394: LD_INT 1
84396: PPUSH
84397: LD_INT 3
84399: PPUSH
84400: CALL_OW 12
84404: PUSH
84405: LD_INT 0
84407: PUSH
84408: LD_INT 0
84410: PUSH
84411: EMPTY
84412: LIST
84413: LIST
84414: LIST
84415: LIST
84416: ST_TO_ADDR
// animal := CreateHuman ;
84417: LD_ADDR_VAR 0 12
84421: PUSH
84422: CALL_OW 44
84426: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84427: LD_VAR 0 12
84431: PPUSH
84432: LD_VAR 0 8
84436: PPUSH
84437: LD_INT 0
84439: PPUSH
84440: CALL 86226 0 3
// end ;
84444: GO 84342
84446: POP
84447: POP
// if enchidnas then
84448: LD_VAR 0 4
84452: IFFALSE 84519
// for i = 1 to enchidnas do
84454: LD_ADDR_VAR 0 11
84458: PUSH
84459: DOUBLE
84460: LD_INT 1
84462: DEC
84463: ST_TO_ADDR
84464: LD_VAR 0 4
84468: PUSH
84469: FOR_TO
84470: IFFALSE 84517
// begin hc_class = 13 ;
84472: LD_ADDR_OWVAR 28
84476: PUSH
84477: LD_INT 13
84479: ST_TO_ADDR
// hc_gallery =  ;
84480: LD_ADDR_OWVAR 33
84484: PUSH
84485: LD_STRING 
84487: ST_TO_ADDR
// animal := CreateHuman ;
84488: LD_ADDR_VAR 0 12
84492: PUSH
84493: CALL_OW 44
84497: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84498: LD_VAR 0 12
84502: PPUSH
84503: LD_VAR 0 8
84507: PPUSH
84508: LD_INT 0
84510: PPUSH
84511: CALL 86226 0 3
// end ;
84515: GO 84469
84517: POP
84518: POP
// if fishes then
84519: LD_VAR 0 7
84523: IFFALSE 84590
// for i = 1 to fishes do
84525: LD_ADDR_VAR 0 11
84529: PUSH
84530: DOUBLE
84531: LD_INT 1
84533: DEC
84534: ST_TO_ADDR
84535: LD_VAR 0 7
84539: PUSH
84540: FOR_TO
84541: IFFALSE 84588
// begin hc_class = 20 ;
84543: LD_ADDR_OWVAR 28
84547: PUSH
84548: LD_INT 20
84550: ST_TO_ADDR
// hc_gallery =  ;
84551: LD_ADDR_OWVAR 33
84555: PUSH
84556: LD_STRING 
84558: ST_TO_ADDR
// animal := CreateHuman ;
84559: LD_ADDR_VAR 0 12
84563: PUSH
84564: CALL_OW 44
84568: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
84569: LD_VAR 0 12
84573: PPUSH
84574: LD_VAR 0 9
84578: PPUSH
84579: LD_INT 0
84581: PPUSH
84582: CALL 86226 0 3
// end ;
84586: GO 84540
84588: POP
84589: POP
// end ;
84590: LD_VAR 0 10
84594: RET
// export function WantHeal ( sci , unit ) ; begin
84595: LD_INT 0
84597: PPUSH
// if GetTaskList ( sci ) > 0 then
84598: LD_VAR 0 1
84602: PPUSH
84603: CALL_OW 437
84607: PUSH
84608: LD_INT 0
84610: GREATER
84611: IFFALSE 84681
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
84613: LD_VAR 0 1
84617: PPUSH
84618: CALL_OW 437
84622: PUSH
84623: LD_INT 1
84625: ARRAY
84626: PUSH
84627: LD_INT 1
84629: ARRAY
84630: PUSH
84631: LD_STRING l
84633: EQUAL
84634: PUSH
84635: LD_VAR 0 1
84639: PPUSH
84640: CALL_OW 437
84644: PUSH
84645: LD_INT 1
84647: ARRAY
84648: PUSH
84649: LD_INT 4
84651: ARRAY
84652: PUSH
84653: LD_VAR 0 2
84657: EQUAL
84658: AND
84659: IFFALSE 84671
// result := true else
84661: LD_ADDR_VAR 0 3
84665: PUSH
84666: LD_INT 1
84668: ST_TO_ADDR
84669: GO 84679
// result := false ;
84671: LD_ADDR_VAR 0 3
84675: PUSH
84676: LD_INT 0
84678: ST_TO_ADDR
// end else
84679: GO 84689
// result := false ;
84681: LD_ADDR_VAR 0 3
84685: PUSH
84686: LD_INT 0
84688: ST_TO_ADDR
// end ;
84689: LD_VAR 0 3
84693: RET
// export function HealTarget ( sci ) ; begin
84694: LD_INT 0
84696: PPUSH
// if not sci then
84697: LD_VAR 0 1
84701: NOT
84702: IFFALSE 84706
// exit ;
84704: GO 84771
// result := 0 ;
84706: LD_ADDR_VAR 0 2
84710: PUSH
84711: LD_INT 0
84713: ST_TO_ADDR
// if GetTaskList ( sci ) then
84714: LD_VAR 0 1
84718: PPUSH
84719: CALL_OW 437
84723: IFFALSE 84771
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
84725: LD_VAR 0 1
84729: PPUSH
84730: CALL_OW 437
84734: PUSH
84735: LD_INT 1
84737: ARRAY
84738: PUSH
84739: LD_INT 1
84741: ARRAY
84742: PUSH
84743: LD_STRING l
84745: EQUAL
84746: IFFALSE 84771
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
84748: LD_ADDR_VAR 0 2
84752: PUSH
84753: LD_VAR 0 1
84757: PPUSH
84758: CALL_OW 437
84762: PUSH
84763: LD_INT 1
84765: ARRAY
84766: PUSH
84767: LD_INT 4
84769: ARRAY
84770: ST_TO_ADDR
// end ;
84771: LD_VAR 0 2
84775: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
84776: LD_INT 0
84778: PPUSH
84779: PPUSH
84780: PPUSH
84781: PPUSH
// if not base_units then
84782: LD_VAR 0 1
84786: NOT
84787: IFFALSE 84791
// exit ;
84789: GO 84878
// result := false ;
84791: LD_ADDR_VAR 0 2
84795: PUSH
84796: LD_INT 0
84798: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
84799: LD_ADDR_VAR 0 5
84803: PUSH
84804: LD_VAR 0 1
84808: PPUSH
84809: LD_INT 21
84811: PUSH
84812: LD_INT 3
84814: PUSH
84815: EMPTY
84816: LIST
84817: LIST
84818: PPUSH
84819: CALL_OW 72
84823: ST_TO_ADDR
// if not tmp then
84824: LD_VAR 0 5
84828: NOT
84829: IFFALSE 84833
// exit ;
84831: GO 84878
// for i in tmp do
84833: LD_ADDR_VAR 0 3
84837: PUSH
84838: LD_VAR 0 5
84842: PUSH
84843: FOR_IN
84844: IFFALSE 84876
// begin result := EnemyInRange ( i , 22 ) ;
84846: LD_ADDR_VAR 0 2
84850: PUSH
84851: LD_VAR 0 3
84855: PPUSH
84856: LD_INT 22
84858: PPUSH
84859: CALL 82564 0 2
84863: ST_TO_ADDR
// if result then
84864: LD_VAR 0 2
84868: IFFALSE 84874
// exit ;
84870: POP
84871: POP
84872: GO 84878
// end ;
84874: GO 84843
84876: POP
84877: POP
// end ;
84878: LD_VAR 0 2
84882: RET
// export function FilterByTag ( units , tag ) ; begin
84883: LD_INT 0
84885: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
84886: LD_ADDR_VAR 0 3
84890: PUSH
84891: LD_VAR 0 1
84895: PPUSH
84896: LD_INT 120
84898: PUSH
84899: LD_VAR 0 2
84903: PUSH
84904: EMPTY
84905: LIST
84906: LIST
84907: PPUSH
84908: CALL_OW 72
84912: ST_TO_ADDR
// end ;
84913: LD_VAR 0 3
84917: RET
// export function IsDriver ( un ) ; begin
84918: LD_INT 0
84920: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
84921: LD_ADDR_VAR 0 2
84925: PUSH
84926: LD_VAR 0 1
84930: PUSH
84931: LD_INT 55
84933: PUSH
84934: EMPTY
84935: LIST
84936: PPUSH
84937: CALL_OW 69
84941: IN
84942: ST_TO_ADDR
// end ;
84943: LD_VAR 0 2
84947: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
84948: LD_INT 0
84950: PPUSH
84951: PPUSH
// list := [ ] ;
84952: LD_ADDR_VAR 0 5
84956: PUSH
84957: EMPTY
84958: ST_TO_ADDR
// case d of 0 :
84959: LD_VAR 0 3
84963: PUSH
84964: LD_INT 0
84966: DOUBLE
84967: EQUAL
84968: IFTRUE 84972
84970: GO 85105
84972: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
84973: LD_ADDR_VAR 0 5
84977: PUSH
84978: LD_VAR 0 1
84982: PUSH
84983: LD_INT 4
84985: MINUS
84986: PUSH
84987: LD_VAR 0 2
84991: PUSH
84992: LD_INT 4
84994: MINUS
84995: PUSH
84996: LD_INT 2
84998: PUSH
84999: EMPTY
85000: LIST
85001: LIST
85002: LIST
85003: PUSH
85004: LD_VAR 0 1
85008: PUSH
85009: LD_INT 3
85011: MINUS
85012: PUSH
85013: LD_VAR 0 2
85017: PUSH
85018: LD_INT 1
85020: PUSH
85021: EMPTY
85022: LIST
85023: LIST
85024: LIST
85025: PUSH
85026: LD_VAR 0 1
85030: PUSH
85031: LD_INT 4
85033: PLUS
85034: PUSH
85035: LD_VAR 0 2
85039: PUSH
85040: LD_INT 4
85042: PUSH
85043: EMPTY
85044: LIST
85045: LIST
85046: LIST
85047: PUSH
85048: LD_VAR 0 1
85052: PUSH
85053: LD_INT 3
85055: PLUS
85056: PUSH
85057: LD_VAR 0 2
85061: PUSH
85062: LD_INT 3
85064: PLUS
85065: PUSH
85066: LD_INT 5
85068: PUSH
85069: EMPTY
85070: LIST
85071: LIST
85072: LIST
85073: PUSH
85074: LD_VAR 0 1
85078: PUSH
85079: LD_VAR 0 2
85083: PUSH
85084: LD_INT 4
85086: PLUS
85087: PUSH
85088: LD_INT 0
85090: PUSH
85091: EMPTY
85092: LIST
85093: LIST
85094: LIST
85095: PUSH
85096: EMPTY
85097: LIST
85098: LIST
85099: LIST
85100: LIST
85101: LIST
85102: ST_TO_ADDR
// end ; 1 :
85103: GO 85803
85105: LD_INT 1
85107: DOUBLE
85108: EQUAL
85109: IFTRUE 85113
85111: GO 85246
85113: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
85114: LD_ADDR_VAR 0 5
85118: PUSH
85119: LD_VAR 0 1
85123: PUSH
85124: LD_VAR 0 2
85128: PUSH
85129: LD_INT 4
85131: MINUS
85132: PUSH
85133: LD_INT 3
85135: PUSH
85136: EMPTY
85137: LIST
85138: LIST
85139: LIST
85140: PUSH
85141: LD_VAR 0 1
85145: PUSH
85146: LD_INT 3
85148: MINUS
85149: PUSH
85150: LD_VAR 0 2
85154: PUSH
85155: LD_INT 3
85157: MINUS
85158: PUSH
85159: LD_INT 2
85161: PUSH
85162: EMPTY
85163: LIST
85164: LIST
85165: LIST
85166: PUSH
85167: LD_VAR 0 1
85171: PUSH
85172: LD_INT 4
85174: MINUS
85175: PUSH
85176: LD_VAR 0 2
85180: PUSH
85181: LD_INT 1
85183: PUSH
85184: EMPTY
85185: LIST
85186: LIST
85187: LIST
85188: PUSH
85189: LD_VAR 0 1
85193: PUSH
85194: LD_VAR 0 2
85198: PUSH
85199: LD_INT 3
85201: PLUS
85202: PUSH
85203: LD_INT 0
85205: PUSH
85206: EMPTY
85207: LIST
85208: LIST
85209: LIST
85210: PUSH
85211: LD_VAR 0 1
85215: PUSH
85216: LD_INT 4
85218: PLUS
85219: PUSH
85220: LD_VAR 0 2
85224: PUSH
85225: LD_INT 4
85227: PLUS
85228: PUSH
85229: LD_INT 5
85231: PUSH
85232: EMPTY
85233: LIST
85234: LIST
85235: LIST
85236: PUSH
85237: EMPTY
85238: LIST
85239: LIST
85240: LIST
85241: LIST
85242: LIST
85243: ST_TO_ADDR
// end ; 2 :
85244: GO 85803
85246: LD_INT 2
85248: DOUBLE
85249: EQUAL
85250: IFTRUE 85254
85252: GO 85383
85254: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
85255: LD_ADDR_VAR 0 5
85259: PUSH
85260: LD_VAR 0 1
85264: PUSH
85265: LD_VAR 0 2
85269: PUSH
85270: LD_INT 3
85272: MINUS
85273: PUSH
85274: LD_INT 3
85276: PUSH
85277: EMPTY
85278: LIST
85279: LIST
85280: LIST
85281: PUSH
85282: LD_VAR 0 1
85286: PUSH
85287: LD_INT 4
85289: PLUS
85290: PUSH
85291: LD_VAR 0 2
85295: PUSH
85296: LD_INT 4
85298: PUSH
85299: EMPTY
85300: LIST
85301: LIST
85302: LIST
85303: PUSH
85304: LD_VAR 0 1
85308: PUSH
85309: LD_VAR 0 2
85313: PUSH
85314: LD_INT 4
85316: PLUS
85317: PUSH
85318: LD_INT 0
85320: PUSH
85321: EMPTY
85322: LIST
85323: LIST
85324: LIST
85325: PUSH
85326: LD_VAR 0 1
85330: PUSH
85331: LD_INT 3
85333: MINUS
85334: PUSH
85335: LD_VAR 0 2
85339: PUSH
85340: LD_INT 1
85342: PUSH
85343: EMPTY
85344: LIST
85345: LIST
85346: LIST
85347: PUSH
85348: LD_VAR 0 1
85352: PUSH
85353: LD_INT 4
85355: MINUS
85356: PUSH
85357: LD_VAR 0 2
85361: PUSH
85362: LD_INT 4
85364: MINUS
85365: PUSH
85366: LD_INT 2
85368: PUSH
85369: EMPTY
85370: LIST
85371: LIST
85372: LIST
85373: PUSH
85374: EMPTY
85375: LIST
85376: LIST
85377: LIST
85378: LIST
85379: LIST
85380: ST_TO_ADDR
// end ; 3 :
85381: GO 85803
85383: LD_INT 3
85385: DOUBLE
85386: EQUAL
85387: IFTRUE 85391
85389: GO 85524
85391: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
85392: LD_ADDR_VAR 0 5
85396: PUSH
85397: LD_VAR 0 1
85401: PUSH
85402: LD_INT 3
85404: PLUS
85405: PUSH
85406: LD_VAR 0 2
85410: PUSH
85411: LD_INT 4
85413: PUSH
85414: EMPTY
85415: LIST
85416: LIST
85417: LIST
85418: PUSH
85419: LD_VAR 0 1
85423: PUSH
85424: LD_INT 4
85426: PLUS
85427: PUSH
85428: LD_VAR 0 2
85432: PUSH
85433: LD_INT 4
85435: PLUS
85436: PUSH
85437: LD_INT 5
85439: PUSH
85440: EMPTY
85441: LIST
85442: LIST
85443: LIST
85444: PUSH
85445: LD_VAR 0 1
85449: PUSH
85450: LD_INT 4
85452: MINUS
85453: PUSH
85454: LD_VAR 0 2
85458: PUSH
85459: LD_INT 1
85461: PUSH
85462: EMPTY
85463: LIST
85464: LIST
85465: LIST
85466: PUSH
85467: LD_VAR 0 1
85471: PUSH
85472: LD_VAR 0 2
85476: PUSH
85477: LD_INT 4
85479: MINUS
85480: PUSH
85481: LD_INT 3
85483: PUSH
85484: EMPTY
85485: LIST
85486: LIST
85487: LIST
85488: PUSH
85489: LD_VAR 0 1
85493: PUSH
85494: LD_INT 3
85496: MINUS
85497: PUSH
85498: LD_VAR 0 2
85502: PUSH
85503: LD_INT 3
85505: MINUS
85506: PUSH
85507: LD_INT 2
85509: PUSH
85510: EMPTY
85511: LIST
85512: LIST
85513: LIST
85514: PUSH
85515: EMPTY
85516: LIST
85517: LIST
85518: LIST
85519: LIST
85520: LIST
85521: ST_TO_ADDR
// end ; 4 :
85522: GO 85803
85524: LD_INT 4
85526: DOUBLE
85527: EQUAL
85528: IFTRUE 85532
85530: GO 85665
85532: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
85533: LD_ADDR_VAR 0 5
85537: PUSH
85538: LD_VAR 0 1
85542: PUSH
85543: LD_VAR 0 2
85547: PUSH
85548: LD_INT 4
85550: PLUS
85551: PUSH
85552: LD_INT 0
85554: PUSH
85555: EMPTY
85556: LIST
85557: LIST
85558: LIST
85559: PUSH
85560: LD_VAR 0 1
85564: PUSH
85565: LD_INT 3
85567: PLUS
85568: PUSH
85569: LD_VAR 0 2
85573: PUSH
85574: LD_INT 3
85576: PLUS
85577: PUSH
85578: LD_INT 5
85580: PUSH
85581: EMPTY
85582: LIST
85583: LIST
85584: LIST
85585: PUSH
85586: LD_VAR 0 1
85590: PUSH
85591: LD_INT 4
85593: PLUS
85594: PUSH
85595: LD_VAR 0 2
85599: PUSH
85600: LD_INT 4
85602: PUSH
85603: EMPTY
85604: LIST
85605: LIST
85606: LIST
85607: PUSH
85608: LD_VAR 0 1
85612: PUSH
85613: LD_VAR 0 2
85617: PUSH
85618: LD_INT 3
85620: MINUS
85621: PUSH
85622: LD_INT 3
85624: PUSH
85625: EMPTY
85626: LIST
85627: LIST
85628: LIST
85629: PUSH
85630: LD_VAR 0 1
85634: PUSH
85635: LD_INT 4
85637: MINUS
85638: PUSH
85639: LD_VAR 0 2
85643: PUSH
85644: LD_INT 4
85646: MINUS
85647: PUSH
85648: LD_INT 2
85650: PUSH
85651: EMPTY
85652: LIST
85653: LIST
85654: LIST
85655: PUSH
85656: EMPTY
85657: LIST
85658: LIST
85659: LIST
85660: LIST
85661: LIST
85662: ST_TO_ADDR
// end ; 5 :
85663: GO 85803
85665: LD_INT 5
85667: DOUBLE
85668: EQUAL
85669: IFTRUE 85673
85671: GO 85802
85673: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
85674: LD_ADDR_VAR 0 5
85678: PUSH
85679: LD_VAR 0 1
85683: PUSH
85684: LD_INT 4
85686: MINUS
85687: PUSH
85688: LD_VAR 0 2
85692: PUSH
85693: LD_INT 1
85695: PUSH
85696: EMPTY
85697: LIST
85698: LIST
85699: LIST
85700: PUSH
85701: LD_VAR 0 1
85705: PUSH
85706: LD_VAR 0 2
85710: PUSH
85711: LD_INT 4
85713: MINUS
85714: PUSH
85715: LD_INT 3
85717: PUSH
85718: EMPTY
85719: LIST
85720: LIST
85721: LIST
85722: PUSH
85723: LD_VAR 0 1
85727: PUSH
85728: LD_INT 4
85730: PLUS
85731: PUSH
85732: LD_VAR 0 2
85736: PUSH
85737: LD_INT 4
85739: PLUS
85740: PUSH
85741: LD_INT 5
85743: PUSH
85744: EMPTY
85745: LIST
85746: LIST
85747: LIST
85748: PUSH
85749: LD_VAR 0 1
85753: PUSH
85754: LD_INT 3
85756: PLUS
85757: PUSH
85758: LD_VAR 0 2
85762: PUSH
85763: LD_INT 4
85765: PUSH
85766: EMPTY
85767: LIST
85768: LIST
85769: LIST
85770: PUSH
85771: LD_VAR 0 1
85775: PUSH
85776: LD_VAR 0 2
85780: PUSH
85781: LD_INT 3
85783: PLUS
85784: PUSH
85785: LD_INT 0
85787: PUSH
85788: EMPTY
85789: LIST
85790: LIST
85791: LIST
85792: PUSH
85793: EMPTY
85794: LIST
85795: LIST
85796: LIST
85797: LIST
85798: LIST
85799: ST_TO_ADDR
// end ; end ;
85800: GO 85803
85802: POP
// result := list ;
85803: LD_ADDR_VAR 0 4
85807: PUSH
85808: LD_VAR 0 5
85812: ST_TO_ADDR
// end ;
85813: LD_VAR 0 4
85817: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
85818: LD_INT 0
85820: PPUSH
85821: PPUSH
85822: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
85823: LD_VAR 0 1
85827: NOT
85828: PUSH
85829: LD_VAR 0 2
85833: PUSH
85834: LD_INT 1
85836: PUSH
85837: LD_INT 2
85839: PUSH
85840: LD_INT 3
85842: PUSH
85843: LD_INT 4
85845: PUSH
85846: EMPTY
85847: LIST
85848: LIST
85849: LIST
85850: LIST
85851: IN
85852: NOT
85853: OR
85854: IFFALSE 85858
// exit ;
85856: GO 85950
// tmp := [ ] ;
85858: LD_ADDR_VAR 0 5
85862: PUSH
85863: EMPTY
85864: ST_TO_ADDR
// for i in units do
85865: LD_ADDR_VAR 0 4
85869: PUSH
85870: LD_VAR 0 1
85874: PUSH
85875: FOR_IN
85876: IFFALSE 85919
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
85878: LD_ADDR_VAR 0 5
85882: PUSH
85883: LD_VAR 0 5
85887: PPUSH
85888: LD_VAR 0 5
85892: PUSH
85893: LD_INT 1
85895: PLUS
85896: PPUSH
85897: LD_VAR 0 4
85901: PPUSH
85902: LD_VAR 0 2
85906: PPUSH
85907: CALL_OW 259
85911: PPUSH
85912: CALL_OW 2
85916: ST_TO_ADDR
85917: GO 85875
85919: POP
85920: POP
// if not tmp then
85921: LD_VAR 0 5
85925: NOT
85926: IFFALSE 85930
// exit ;
85928: GO 85950
// result := SortListByListDesc ( units , tmp ) ;
85930: LD_ADDR_VAR 0 3
85934: PUSH
85935: LD_VAR 0 1
85939: PPUSH
85940: LD_VAR 0 5
85944: PPUSH
85945: CALL_OW 77
85949: ST_TO_ADDR
// end ;
85950: LD_VAR 0 3
85954: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
85955: LD_INT 0
85957: PPUSH
85958: PPUSH
85959: PPUSH
// result := false ;
85960: LD_ADDR_VAR 0 3
85964: PUSH
85965: LD_INT 0
85967: ST_TO_ADDR
// x := GetX ( building ) ;
85968: LD_ADDR_VAR 0 4
85972: PUSH
85973: LD_VAR 0 2
85977: PPUSH
85978: CALL_OW 250
85982: ST_TO_ADDR
// y := GetY ( building ) ;
85983: LD_ADDR_VAR 0 5
85987: PUSH
85988: LD_VAR 0 2
85992: PPUSH
85993: CALL_OW 251
85997: ST_TO_ADDR
// if not building or not x or not y then
85998: LD_VAR 0 2
86002: NOT
86003: PUSH
86004: LD_VAR 0 4
86008: NOT
86009: OR
86010: PUSH
86011: LD_VAR 0 5
86015: NOT
86016: OR
86017: IFFALSE 86021
// exit ;
86019: GO 86113
// if GetTaskList ( unit ) then
86021: LD_VAR 0 1
86025: PPUSH
86026: CALL_OW 437
86030: IFFALSE 86113
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
86032: LD_STRING e
86034: PUSH
86035: LD_VAR 0 1
86039: PPUSH
86040: CALL_OW 437
86044: PUSH
86045: LD_INT 1
86047: ARRAY
86048: PUSH
86049: LD_INT 1
86051: ARRAY
86052: EQUAL
86053: PUSH
86054: LD_VAR 0 4
86058: PUSH
86059: LD_VAR 0 1
86063: PPUSH
86064: CALL_OW 437
86068: PUSH
86069: LD_INT 1
86071: ARRAY
86072: PUSH
86073: LD_INT 2
86075: ARRAY
86076: EQUAL
86077: AND
86078: PUSH
86079: LD_VAR 0 5
86083: PUSH
86084: LD_VAR 0 1
86088: PPUSH
86089: CALL_OW 437
86093: PUSH
86094: LD_INT 1
86096: ARRAY
86097: PUSH
86098: LD_INT 3
86100: ARRAY
86101: EQUAL
86102: AND
86103: IFFALSE 86113
// result := true end ;
86105: LD_ADDR_VAR 0 3
86109: PUSH
86110: LD_INT 1
86112: ST_TO_ADDR
// end ;
86113: LD_VAR 0 3
86117: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
86118: LD_INT 0
86120: PPUSH
// result := false ;
86121: LD_ADDR_VAR 0 4
86125: PUSH
86126: LD_INT 0
86128: ST_TO_ADDR
// if GetTaskList ( unit ) then
86129: LD_VAR 0 1
86133: PPUSH
86134: CALL_OW 437
86138: IFFALSE 86221
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
86140: LD_STRING M
86142: PUSH
86143: LD_VAR 0 1
86147: PPUSH
86148: CALL_OW 437
86152: PUSH
86153: LD_INT 1
86155: ARRAY
86156: PUSH
86157: LD_INT 1
86159: ARRAY
86160: EQUAL
86161: PUSH
86162: LD_VAR 0 2
86166: PUSH
86167: LD_VAR 0 1
86171: PPUSH
86172: CALL_OW 437
86176: PUSH
86177: LD_INT 1
86179: ARRAY
86180: PUSH
86181: LD_INT 2
86183: ARRAY
86184: EQUAL
86185: AND
86186: PUSH
86187: LD_VAR 0 3
86191: PUSH
86192: LD_VAR 0 1
86196: PPUSH
86197: CALL_OW 437
86201: PUSH
86202: LD_INT 1
86204: ARRAY
86205: PUSH
86206: LD_INT 3
86208: ARRAY
86209: EQUAL
86210: AND
86211: IFFALSE 86221
// result := true ;
86213: LD_ADDR_VAR 0 4
86217: PUSH
86218: LD_INT 1
86220: ST_TO_ADDR
// end ; end ;
86221: LD_VAR 0 4
86225: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
86226: LD_INT 0
86228: PPUSH
86229: PPUSH
86230: PPUSH
86231: PPUSH
// if not unit or not area then
86232: LD_VAR 0 1
86236: NOT
86237: PUSH
86238: LD_VAR 0 2
86242: NOT
86243: OR
86244: IFFALSE 86248
// exit ;
86246: GO 86412
// tmp := AreaToList ( area , i ) ;
86248: LD_ADDR_VAR 0 6
86252: PUSH
86253: LD_VAR 0 2
86257: PPUSH
86258: LD_VAR 0 5
86262: PPUSH
86263: CALL_OW 517
86267: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
86268: LD_ADDR_VAR 0 5
86272: PUSH
86273: DOUBLE
86274: LD_INT 1
86276: DEC
86277: ST_TO_ADDR
86278: LD_VAR 0 6
86282: PUSH
86283: LD_INT 1
86285: ARRAY
86286: PUSH
86287: FOR_TO
86288: IFFALSE 86410
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
86290: LD_ADDR_VAR 0 7
86294: PUSH
86295: LD_VAR 0 6
86299: PUSH
86300: LD_INT 1
86302: ARRAY
86303: PUSH
86304: LD_VAR 0 5
86308: ARRAY
86309: PUSH
86310: LD_VAR 0 6
86314: PUSH
86315: LD_INT 2
86317: ARRAY
86318: PUSH
86319: LD_VAR 0 5
86323: ARRAY
86324: PUSH
86325: EMPTY
86326: LIST
86327: LIST
86328: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
86329: LD_VAR 0 7
86333: PUSH
86334: LD_INT 1
86336: ARRAY
86337: PPUSH
86338: LD_VAR 0 7
86342: PUSH
86343: LD_INT 2
86345: ARRAY
86346: PPUSH
86347: CALL_OW 428
86351: PUSH
86352: LD_INT 0
86354: EQUAL
86355: IFFALSE 86408
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
86357: LD_VAR 0 1
86361: PPUSH
86362: LD_VAR 0 7
86366: PUSH
86367: LD_INT 1
86369: ARRAY
86370: PPUSH
86371: LD_VAR 0 7
86375: PUSH
86376: LD_INT 2
86378: ARRAY
86379: PPUSH
86380: LD_VAR 0 3
86384: PPUSH
86385: CALL_OW 48
// result := IsPlaced ( unit ) ;
86389: LD_ADDR_VAR 0 4
86393: PUSH
86394: LD_VAR 0 1
86398: PPUSH
86399: CALL_OW 305
86403: ST_TO_ADDR
// exit ;
86404: POP
86405: POP
86406: GO 86412
// end ; end ;
86408: GO 86287
86410: POP
86411: POP
// end ;
86412: LD_VAR 0 4
86416: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
86417: LD_INT 0
86419: PPUSH
86420: PPUSH
86421: PPUSH
// if not side or side > 8 then
86422: LD_VAR 0 1
86426: NOT
86427: PUSH
86428: LD_VAR 0 1
86432: PUSH
86433: LD_INT 8
86435: GREATER
86436: OR
86437: IFFALSE 86441
// exit ;
86439: GO 86628
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
86441: LD_ADDR_VAR 0 4
86445: PUSH
86446: LD_INT 22
86448: PUSH
86449: LD_VAR 0 1
86453: PUSH
86454: EMPTY
86455: LIST
86456: LIST
86457: PUSH
86458: LD_INT 21
86460: PUSH
86461: LD_INT 3
86463: PUSH
86464: EMPTY
86465: LIST
86466: LIST
86467: PUSH
86468: EMPTY
86469: LIST
86470: LIST
86471: PPUSH
86472: CALL_OW 69
86476: ST_TO_ADDR
// if not tmp then
86477: LD_VAR 0 4
86481: NOT
86482: IFFALSE 86486
// exit ;
86484: GO 86628
// enable_addtolog := true ;
86486: LD_ADDR_OWVAR 81
86490: PUSH
86491: LD_INT 1
86493: ST_TO_ADDR
// AddToLog ( [ ) ;
86494: LD_STRING [
86496: PPUSH
86497: CALL_OW 561
// for i in tmp do
86501: LD_ADDR_VAR 0 3
86505: PUSH
86506: LD_VAR 0 4
86510: PUSH
86511: FOR_IN
86512: IFFALSE 86619
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
86514: LD_STRING [
86516: PUSH
86517: LD_VAR 0 3
86521: PPUSH
86522: CALL_OW 266
86526: STR
86527: PUSH
86528: LD_STRING , 
86530: STR
86531: PUSH
86532: LD_VAR 0 3
86536: PPUSH
86537: CALL_OW 250
86541: STR
86542: PUSH
86543: LD_STRING , 
86545: STR
86546: PUSH
86547: LD_VAR 0 3
86551: PPUSH
86552: CALL_OW 251
86556: STR
86557: PUSH
86558: LD_STRING , 
86560: STR
86561: PUSH
86562: LD_VAR 0 3
86566: PPUSH
86567: CALL_OW 254
86571: STR
86572: PUSH
86573: LD_STRING , 
86575: STR
86576: PUSH
86577: LD_VAR 0 3
86581: PPUSH
86582: LD_INT 1
86584: PPUSH
86585: CALL_OW 268
86589: STR
86590: PUSH
86591: LD_STRING , 
86593: STR
86594: PUSH
86595: LD_VAR 0 3
86599: PPUSH
86600: LD_INT 2
86602: PPUSH
86603: CALL_OW 268
86607: STR
86608: PUSH
86609: LD_STRING ],
86611: STR
86612: PPUSH
86613: CALL_OW 561
// end ;
86617: GO 86511
86619: POP
86620: POP
// AddToLog ( ]; ) ;
86621: LD_STRING ];
86623: PPUSH
86624: CALL_OW 561
// end ;
86628: LD_VAR 0 2
86632: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
86633: LD_INT 0
86635: PPUSH
86636: PPUSH
86637: PPUSH
86638: PPUSH
86639: PPUSH
// if not area or not rate or not max then
86640: LD_VAR 0 1
86644: NOT
86645: PUSH
86646: LD_VAR 0 2
86650: NOT
86651: OR
86652: PUSH
86653: LD_VAR 0 4
86657: NOT
86658: OR
86659: IFFALSE 86663
// exit ;
86661: GO 86852
// while 1 do
86663: LD_INT 1
86665: IFFALSE 86852
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
86667: LD_ADDR_VAR 0 9
86671: PUSH
86672: LD_VAR 0 1
86676: PPUSH
86677: LD_INT 1
86679: PPUSH
86680: CALL_OW 287
86684: PUSH
86685: LD_INT 10
86687: MUL
86688: ST_TO_ADDR
// r := rate / 10 ;
86689: LD_ADDR_VAR 0 7
86693: PUSH
86694: LD_VAR 0 2
86698: PUSH
86699: LD_INT 10
86701: DIVREAL
86702: ST_TO_ADDR
// time := 1 1$00 ;
86703: LD_ADDR_VAR 0 8
86707: PUSH
86708: LD_INT 2100
86710: ST_TO_ADDR
// if amount < min then
86711: LD_VAR 0 9
86715: PUSH
86716: LD_VAR 0 3
86720: LESS
86721: IFFALSE 86739
// r := r * 2 else
86723: LD_ADDR_VAR 0 7
86727: PUSH
86728: LD_VAR 0 7
86732: PUSH
86733: LD_INT 2
86735: MUL
86736: ST_TO_ADDR
86737: GO 86765
// if amount > max then
86739: LD_VAR 0 9
86743: PUSH
86744: LD_VAR 0 4
86748: GREATER
86749: IFFALSE 86765
// r := r / 2 ;
86751: LD_ADDR_VAR 0 7
86755: PUSH
86756: LD_VAR 0 7
86760: PUSH
86761: LD_INT 2
86763: DIVREAL
86764: ST_TO_ADDR
// time := time / r ;
86765: LD_ADDR_VAR 0 8
86769: PUSH
86770: LD_VAR 0 8
86774: PUSH
86775: LD_VAR 0 7
86779: DIVREAL
86780: ST_TO_ADDR
// if time < 0 then
86781: LD_VAR 0 8
86785: PUSH
86786: LD_INT 0
86788: LESS
86789: IFFALSE 86806
// time := time * - 1 ;
86791: LD_ADDR_VAR 0 8
86795: PUSH
86796: LD_VAR 0 8
86800: PUSH
86801: LD_INT 1
86803: NEG
86804: MUL
86805: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
86806: LD_VAR 0 8
86810: PUSH
86811: LD_INT 35
86813: PPUSH
86814: LD_INT 875
86816: PPUSH
86817: CALL_OW 12
86821: PLUS
86822: PPUSH
86823: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
86827: LD_INT 1
86829: PPUSH
86830: LD_INT 5
86832: PPUSH
86833: CALL_OW 12
86837: PPUSH
86838: LD_VAR 0 1
86842: PPUSH
86843: LD_INT 1
86845: PPUSH
86846: CALL_OW 55
// end ;
86850: GO 86663
// end ;
86852: LD_VAR 0 5
86856: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
86857: LD_INT 0
86859: PPUSH
86860: PPUSH
86861: PPUSH
86862: PPUSH
86863: PPUSH
86864: PPUSH
86865: PPUSH
86866: PPUSH
// if not turrets or not factories then
86867: LD_VAR 0 1
86871: NOT
86872: PUSH
86873: LD_VAR 0 2
86877: NOT
86878: OR
86879: IFFALSE 86883
// exit ;
86881: GO 87190
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
86883: LD_ADDR_VAR 0 10
86887: PUSH
86888: LD_INT 5
86890: PUSH
86891: LD_INT 6
86893: PUSH
86894: EMPTY
86895: LIST
86896: LIST
86897: PUSH
86898: LD_INT 2
86900: PUSH
86901: LD_INT 4
86903: PUSH
86904: EMPTY
86905: LIST
86906: LIST
86907: PUSH
86908: LD_INT 3
86910: PUSH
86911: LD_INT 5
86913: PUSH
86914: EMPTY
86915: LIST
86916: LIST
86917: PUSH
86918: EMPTY
86919: LIST
86920: LIST
86921: LIST
86922: PUSH
86923: LD_INT 24
86925: PUSH
86926: LD_INT 25
86928: PUSH
86929: EMPTY
86930: LIST
86931: LIST
86932: PUSH
86933: LD_INT 23
86935: PUSH
86936: LD_INT 27
86938: PUSH
86939: EMPTY
86940: LIST
86941: LIST
86942: PUSH
86943: EMPTY
86944: LIST
86945: LIST
86946: PUSH
86947: LD_INT 42
86949: PUSH
86950: LD_INT 43
86952: PUSH
86953: EMPTY
86954: LIST
86955: LIST
86956: PUSH
86957: LD_INT 44
86959: PUSH
86960: LD_INT 46
86962: PUSH
86963: EMPTY
86964: LIST
86965: LIST
86966: PUSH
86967: LD_INT 45
86969: PUSH
86970: LD_INT 47
86972: PUSH
86973: EMPTY
86974: LIST
86975: LIST
86976: PUSH
86977: EMPTY
86978: LIST
86979: LIST
86980: LIST
86981: PUSH
86982: EMPTY
86983: LIST
86984: LIST
86985: LIST
86986: ST_TO_ADDR
// result := [ ] ;
86987: LD_ADDR_VAR 0 3
86991: PUSH
86992: EMPTY
86993: ST_TO_ADDR
// for i in turrets do
86994: LD_ADDR_VAR 0 4
86998: PUSH
86999: LD_VAR 0 1
87003: PUSH
87004: FOR_IN
87005: IFFALSE 87188
// begin nat := GetNation ( i ) ;
87007: LD_ADDR_VAR 0 7
87011: PUSH
87012: LD_VAR 0 4
87016: PPUSH
87017: CALL_OW 248
87021: ST_TO_ADDR
// weapon := 0 ;
87022: LD_ADDR_VAR 0 8
87026: PUSH
87027: LD_INT 0
87029: ST_TO_ADDR
// if not nat then
87030: LD_VAR 0 7
87034: NOT
87035: IFFALSE 87039
// continue ;
87037: GO 87004
// for j in list [ nat ] do
87039: LD_ADDR_VAR 0 5
87043: PUSH
87044: LD_VAR 0 10
87048: PUSH
87049: LD_VAR 0 7
87053: ARRAY
87054: PUSH
87055: FOR_IN
87056: IFFALSE 87097
// if GetBWeapon ( i ) = j [ 1 ] then
87058: LD_VAR 0 4
87062: PPUSH
87063: CALL_OW 269
87067: PUSH
87068: LD_VAR 0 5
87072: PUSH
87073: LD_INT 1
87075: ARRAY
87076: EQUAL
87077: IFFALSE 87095
// begin weapon := j [ 2 ] ;
87079: LD_ADDR_VAR 0 8
87083: PUSH
87084: LD_VAR 0 5
87088: PUSH
87089: LD_INT 2
87091: ARRAY
87092: ST_TO_ADDR
// break ;
87093: GO 87097
// end ;
87095: GO 87055
87097: POP
87098: POP
// if not weapon then
87099: LD_VAR 0 8
87103: NOT
87104: IFFALSE 87108
// continue ;
87106: GO 87004
// for k in factories do
87108: LD_ADDR_VAR 0 6
87112: PUSH
87113: LD_VAR 0 2
87117: PUSH
87118: FOR_IN
87119: IFFALSE 87184
// begin weapons := AvailableWeaponList ( k ) ;
87121: LD_ADDR_VAR 0 9
87125: PUSH
87126: LD_VAR 0 6
87130: PPUSH
87131: CALL_OW 478
87135: ST_TO_ADDR
// if not weapons then
87136: LD_VAR 0 9
87140: NOT
87141: IFFALSE 87145
// continue ;
87143: GO 87118
// if weapon in weapons then
87145: LD_VAR 0 8
87149: PUSH
87150: LD_VAR 0 9
87154: IN
87155: IFFALSE 87182
// begin result := [ i , weapon ] ;
87157: LD_ADDR_VAR 0 3
87161: PUSH
87162: LD_VAR 0 4
87166: PUSH
87167: LD_VAR 0 8
87171: PUSH
87172: EMPTY
87173: LIST
87174: LIST
87175: ST_TO_ADDR
// exit ;
87176: POP
87177: POP
87178: POP
87179: POP
87180: GO 87190
// end ; end ;
87182: GO 87118
87184: POP
87185: POP
// end ;
87186: GO 87004
87188: POP
87189: POP
// end ;
87190: LD_VAR 0 3
87194: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
87195: LD_INT 0
87197: PPUSH
// if not side or side > 8 then
87198: LD_VAR 0 3
87202: NOT
87203: PUSH
87204: LD_VAR 0 3
87208: PUSH
87209: LD_INT 8
87211: GREATER
87212: OR
87213: IFFALSE 87217
// exit ;
87215: GO 87276
// if not range then
87217: LD_VAR 0 4
87221: NOT
87222: IFFALSE 87233
// range := - 12 ;
87224: LD_ADDR_VAR 0 4
87228: PUSH
87229: LD_INT 12
87231: NEG
87232: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
87233: LD_VAR 0 1
87237: PPUSH
87238: LD_VAR 0 2
87242: PPUSH
87243: LD_VAR 0 3
87247: PPUSH
87248: LD_VAR 0 4
87252: PPUSH
87253: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
87257: LD_VAR 0 1
87261: PPUSH
87262: LD_VAR 0 2
87266: PPUSH
87267: LD_VAR 0 3
87271: PPUSH
87272: CALL_OW 331
// end ;
87276: LD_VAR 0 5
87280: RET
// export function Video ( mode ) ; begin
87281: LD_INT 0
87283: PPUSH
// ingame_video = mode ;
87284: LD_ADDR_OWVAR 52
87288: PUSH
87289: LD_VAR 0 1
87293: ST_TO_ADDR
// interface_hidden = mode ;
87294: LD_ADDR_OWVAR 54
87298: PUSH
87299: LD_VAR 0 1
87303: ST_TO_ADDR
// end ;
87304: LD_VAR 0 2
87308: RET
// export function Join ( array , element ) ; begin
87309: LD_INT 0
87311: PPUSH
// result := Replace ( array , array + 1 , element ) ;
87312: LD_ADDR_VAR 0 3
87316: PUSH
87317: LD_VAR 0 1
87321: PPUSH
87322: LD_VAR 0 1
87326: PUSH
87327: LD_INT 1
87329: PLUS
87330: PPUSH
87331: LD_VAR 0 2
87335: PPUSH
87336: CALL_OW 1
87340: ST_TO_ADDR
// end ;
87341: LD_VAR 0 3
87345: RET
// export function JoinUnion ( array , element ) ; begin
87346: LD_INT 0
87348: PPUSH
// result := array union element ;
87349: LD_ADDR_VAR 0 3
87353: PUSH
87354: LD_VAR 0 1
87358: PUSH
87359: LD_VAR 0 2
87363: UNION
87364: ST_TO_ADDR
// end ;
87365: LD_VAR 0 3
87369: RET
// export function GetBehemoths ( side ) ; begin
87370: LD_INT 0
87372: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
87373: LD_ADDR_VAR 0 2
87377: PUSH
87378: LD_INT 22
87380: PUSH
87381: LD_VAR 0 1
87385: PUSH
87386: EMPTY
87387: LIST
87388: LIST
87389: PUSH
87390: LD_INT 31
87392: PUSH
87393: LD_INT 25
87395: PUSH
87396: EMPTY
87397: LIST
87398: LIST
87399: PUSH
87400: EMPTY
87401: LIST
87402: LIST
87403: PPUSH
87404: CALL_OW 69
87408: ST_TO_ADDR
// end ;
87409: LD_VAR 0 2
87413: RET
// export function Shuffle ( array ) ; var i , index ; begin
87414: LD_INT 0
87416: PPUSH
87417: PPUSH
87418: PPUSH
// result := [ ] ;
87419: LD_ADDR_VAR 0 2
87423: PUSH
87424: EMPTY
87425: ST_TO_ADDR
// if not array then
87426: LD_VAR 0 1
87430: NOT
87431: IFFALSE 87435
// exit ;
87433: GO 87534
// Randomize ;
87435: CALL_OW 10
// for i = array downto 1 do
87439: LD_ADDR_VAR 0 3
87443: PUSH
87444: DOUBLE
87445: LD_VAR 0 1
87449: INC
87450: ST_TO_ADDR
87451: LD_INT 1
87453: PUSH
87454: FOR_DOWNTO
87455: IFFALSE 87532
// begin index := rand ( 1 , array ) ;
87457: LD_ADDR_VAR 0 4
87461: PUSH
87462: LD_INT 1
87464: PPUSH
87465: LD_VAR 0 1
87469: PPUSH
87470: CALL_OW 12
87474: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
87475: LD_ADDR_VAR 0 2
87479: PUSH
87480: LD_VAR 0 2
87484: PPUSH
87485: LD_VAR 0 2
87489: PUSH
87490: LD_INT 1
87492: PLUS
87493: PPUSH
87494: LD_VAR 0 1
87498: PUSH
87499: LD_VAR 0 4
87503: ARRAY
87504: PPUSH
87505: CALL_OW 2
87509: ST_TO_ADDR
// array := Delete ( array , index ) ;
87510: LD_ADDR_VAR 0 1
87514: PUSH
87515: LD_VAR 0 1
87519: PPUSH
87520: LD_VAR 0 4
87524: PPUSH
87525: CALL_OW 3
87529: ST_TO_ADDR
// end ;
87530: GO 87454
87532: POP
87533: POP
// end ;
87534: LD_VAR 0 2
87538: RET
// export function GetBaseMaterials ( base ) ; begin
87539: LD_INT 0
87541: PPUSH
// result := [ 0 , 0 , 0 ] ;
87542: LD_ADDR_VAR 0 2
87546: PUSH
87547: LD_INT 0
87549: PUSH
87550: LD_INT 0
87552: PUSH
87553: LD_INT 0
87555: PUSH
87556: EMPTY
87557: LIST
87558: LIST
87559: LIST
87560: ST_TO_ADDR
// if not base then
87561: LD_VAR 0 1
87565: NOT
87566: IFFALSE 87570
// exit ;
87568: GO 87619
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
87570: LD_ADDR_VAR 0 2
87574: PUSH
87575: LD_VAR 0 1
87579: PPUSH
87580: LD_INT 1
87582: PPUSH
87583: CALL_OW 275
87587: PUSH
87588: LD_VAR 0 1
87592: PPUSH
87593: LD_INT 2
87595: PPUSH
87596: CALL_OW 275
87600: PUSH
87601: LD_VAR 0 1
87605: PPUSH
87606: LD_INT 3
87608: PPUSH
87609: CALL_OW 275
87613: PUSH
87614: EMPTY
87615: LIST
87616: LIST
87617: LIST
87618: ST_TO_ADDR
// end ;
87619: LD_VAR 0 2
87623: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
87624: LD_INT 0
87626: PPUSH
87627: PPUSH
// result := array ;
87628: LD_ADDR_VAR 0 3
87632: PUSH
87633: LD_VAR 0 1
87637: ST_TO_ADDR
// if size >= result then
87638: LD_VAR 0 2
87642: PUSH
87643: LD_VAR 0 3
87647: GREATEREQUAL
87648: IFFALSE 87652
// exit ;
87650: GO 87702
// if size then
87652: LD_VAR 0 2
87656: IFFALSE 87702
// for i := array downto size do
87658: LD_ADDR_VAR 0 4
87662: PUSH
87663: DOUBLE
87664: LD_VAR 0 1
87668: INC
87669: ST_TO_ADDR
87670: LD_VAR 0 2
87674: PUSH
87675: FOR_DOWNTO
87676: IFFALSE 87700
// result := Delete ( result , result ) ;
87678: LD_ADDR_VAR 0 3
87682: PUSH
87683: LD_VAR 0 3
87687: PPUSH
87688: LD_VAR 0 3
87692: PPUSH
87693: CALL_OW 3
87697: ST_TO_ADDR
87698: GO 87675
87700: POP
87701: POP
// end ;
87702: LD_VAR 0 3
87706: RET
// export function ComExit ( unit ) ; var tmp ; begin
87707: LD_INT 0
87709: PPUSH
87710: PPUSH
// if not IsInUnit ( unit ) then
87711: LD_VAR 0 1
87715: PPUSH
87716: CALL_OW 310
87720: NOT
87721: IFFALSE 87725
// exit ;
87723: GO 87785
// tmp := IsInUnit ( unit ) ;
87725: LD_ADDR_VAR 0 3
87729: PUSH
87730: LD_VAR 0 1
87734: PPUSH
87735: CALL_OW 310
87739: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
87740: LD_VAR 0 3
87744: PPUSH
87745: CALL_OW 247
87749: PUSH
87750: LD_INT 2
87752: EQUAL
87753: IFFALSE 87766
// ComExitVehicle ( unit ) else
87755: LD_VAR 0 1
87759: PPUSH
87760: CALL_OW 121
87764: GO 87775
// ComExitBuilding ( unit ) ;
87766: LD_VAR 0 1
87770: PPUSH
87771: CALL_OW 122
// result := tmp ;
87775: LD_ADDR_VAR 0 2
87779: PUSH
87780: LD_VAR 0 3
87784: ST_TO_ADDR
// end ;
87785: LD_VAR 0 2
87789: RET
// export function ComExitAll ( units ) ; var i ; begin
87790: LD_INT 0
87792: PPUSH
87793: PPUSH
// if not units then
87794: LD_VAR 0 1
87798: NOT
87799: IFFALSE 87803
// exit ;
87801: GO 87829
// for i in units do
87803: LD_ADDR_VAR 0 3
87807: PUSH
87808: LD_VAR 0 1
87812: PUSH
87813: FOR_IN
87814: IFFALSE 87827
// ComExit ( i ) ;
87816: LD_VAR 0 3
87820: PPUSH
87821: CALL 87707 0 1
87825: GO 87813
87827: POP
87828: POP
// end ;
87829: LD_VAR 0 2
87833: RET
// export function ResetHc ; begin
87834: LD_INT 0
87836: PPUSH
// InitHc ;
87837: CALL_OW 19
// hc_importance := 0 ;
87841: LD_ADDR_OWVAR 32
87845: PUSH
87846: LD_INT 0
87848: ST_TO_ADDR
// end ;
87849: LD_VAR 0 1
87853: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
87854: LD_INT 0
87856: PPUSH
87857: PPUSH
87858: PPUSH
// _x := ( x1 + x2 ) div 2 ;
87859: LD_ADDR_VAR 0 6
87863: PUSH
87864: LD_VAR 0 1
87868: PUSH
87869: LD_VAR 0 3
87873: PLUS
87874: PUSH
87875: LD_INT 2
87877: DIV
87878: ST_TO_ADDR
// if _x < 0 then
87879: LD_VAR 0 6
87883: PUSH
87884: LD_INT 0
87886: LESS
87887: IFFALSE 87904
// _x := _x * - 1 ;
87889: LD_ADDR_VAR 0 6
87893: PUSH
87894: LD_VAR 0 6
87898: PUSH
87899: LD_INT 1
87901: NEG
87902: MUL
87903: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
87904: LD_ADDR_VAR 0 7
87908: PUSH
87909: LD_VAR 0 2
87913: PUSH
87914: LD_VAR 0 4
87918: PLUS
87919: PUSH
87920: LD_INT 2
87922: DIV
87923: ST_TO_ADDR
// if _y < 0 then
87924: LD_VAR 0 7
87928: PUSH
87929: LD_INT 0
87931: LESS
87932: IFFALSE 87949
// _y := _y * - 1 ;
87934: LD_ADDR_VAR 0 7
87938: PUSH
87939: LD_VAR 0 7
87943: PUSH
87944: LD_INT 1
87946: NEG
87947: MUL
87948: ST_TO_ADDR
// result := [ _x , _y ] ;
87949: LD_ADDR_VAR 0 5
87953: PUSH
87954: LD_VAR 0 6
87958: PUSH
87959: LD_VAR 0 7
87963: PUSH
87964: EMPTY
87965: LIST
87966: LIST
87967: ST_TO_ADDR
// end ;
87968: LD_VAR 0 5
87972: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
87973: LD_INT 0
87975: PPUSH
87976: PPUSH
87977: PPUSH
87978: PPUSH
// task := GetTaskList ( unit ) ;
87979: LD_ADDR_VAR 0 7
87983: PUSH
87984: LD_VAR 0 1
87988: PPUSH
87989: CALL_OW 437
87993: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
87994: LD_VAR 0 7
87998: NOT
87999: PUSH
88000: LD_VAR 0 1
88004: PPUSH
88005: LD_VAR 0 2
88009: PPUSH
88010: CALL_OW 308
88014: NOT
88015: AND
88016: IFFALSE 88020
// exit ;
88018: GO 88138
// if IsInArea ( unit , area ) then
88020: LD_VAR 0 1
88024: PPUSH
88025: LD_VAR 0 2
88029: PPUSH
88030: CALL_OW 308
88034: IFFALSE 88052
// begin ComMoveToArea ( unit , goAway ) ;
88036: LD_VAR 0 1
88040: PPUSH
88041: LD_VAR 0 3
88045: PPUSH
88046: CALL_OW 113
// exit ;
88050: GO 88138
// end ; if task [ 1 ] [ 1 ] <> M then
88052: LD_VAR 0 7
88056: PUSH
88057: LD_INT 1
88059: ARRAY
88060: PUSH
88061: LD_INT 1
88063: ARRAY
88064: PUSH
88065: LD_STRING M
88067: NONEQUAL
88068: IFFALSE 88072
// exit ;
88070: GO 88138
// x := task [ 1 ] [ 2 ] ;
88072: LD_ADDR_VAR 0 5
88076: PUSH
88077: LD_VAR 0 7
88081: PUSH
88082: LD_INT 1
88084: ARRAY
88085: PUSH
88086: LD_INT 2
88088: ARRAY
88089: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
88090: LD_ADDR_VAR 0 6
88094: PUSH
88095: LD_VAR 0 7
88099: PUSH
88100: LD_INT 1
88102: ARRAY
88103: PUSH
88104: LD_INT 3
88106: ARRAY
88107: ST_TO_ADDR
// if InArea ( x , y , area ) then
88108: LD_VAR 0 5
88112: PPUSH
88113: LD_VAR 0 6
88117: PPUSH
88118: LD_VAR 0 2
88122: PPUSH
88123: CALL_OW 309
88127: IFFALSE 88138
// ComStop ( unit ) ;
88129: LD_VAR 0 1
88133: PPUSH
88134: CALL_OW 141
// end ;
88138: LD_VAR 0 4
88142: RET
// export function Abs ( value ) ; begin
88143: LD_INT 0
88145: PPUSH
// result := value ;
88146: LD_ADDR_VAR 0 2
88150: PUSH
88151: LD_VAR 0 1
88155: ST_TO_ADDR
// if value < 0 then
88156: LD_VAR 0 1
88160: PUSH
88161: LD_INT 0
88163: LESS
88164: IFFALSE 88181
// result := value * - 1 ;
88166: LD_ADDR_VAR 0 2
88170: PUSH
88171: LD_VAR 0 1
88175: PUSH
88176: LD_INT 1
88178: NEG
88179: MUL
88180: ST_TO_ADDR
// end ;
88181: LD_VAR 0 2
88185: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
88186: LD_INT 0
88188: PPUSH
88189: PPUSH
88190: PPUSH
88191: PPUSH
88192: PPUSH
88193: PPUSH
88194: PPUSH
88195: PPUSH
// if not unit or not building then
88196: LD_VAR 0 1
88200: NOT
88201: PUSH
88202: LD_VAR 0 2
88206: NOT
88207: OR
88208: IFFALSE 88212
// exit ;
88210: GO 88438
// x := GetX ( building ) ;
88212: LD_ADDR_VAR 0 4
88216: PUSH
88217: LD_VAR 0 2
88221: PPUSH
88222: CALL_OW 250
88226: ST_TO_ADDR
// y := GetY ( building ) ;
88227: LD_ADDR_VAR 0 6
88231: PUSH
88232: LD_VAR 0 2
88236: PPUSH
88237: CALL_OW 251
88241: ST_TO_ADDR
// d := GetDir ( building ) ;
88242: LD_ADDR_VAR 0 8
88246: PUSH
88247: LD_VAR 0 2
88251: PPUSH
88252: CALL_OW 254
88256: ST_TO_ADDR
// r := 4 ;
88257: LD_ADDR_VAR 0 9
88261: PUSH
88262: LD_INT 4
88264: ST_TO_ADDR
// for i := 1 to 5 do
88265: LD_ADDR_VAR 0 10
88269: PUSH
88270: DOUBLE
88271: LD_INT 1
88273: DEC
88274: ST_TO_ADDR
88275: LD_INT 5
88277: PUSH
88278: FOR_TO
88279: IFFALSE 88436
// begin _x := ShiftX ( x , d , r + i ) ;
88281: LD_ADDR_VAR 0 5
88285: PUSH
88286: LD_VAR 0 4
88290: PPUSH
88291: LD_VAR 0 8
88295: PPUSH
88296: LD_VAR 0 9
88300: PUSH
88301: LD_VAR 0 10
88305: PLUS
88306: PPUSH
88307: CALL_OW 272
88311: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
88312: LD_ADDR_VAR 0 7
88316: PUSH
88317: LD_VAR 0 6
88321: PPUSH
88322: LD_VAR 0 8
88326: PPUSH
88327: LD_VAR 0 9
88331: PUSH
88332: LD_VAR 0 10
88336: PLUS
88337: PPUSH
88338: CALL_OW 273
88342: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
88343: LD_VAR 0 5
88347: PPUSH
88348: LD_VAR 0 7
88352: PPUSH
88353: CALL_OW 488
88357: PUSH
88358: LD_VAR 0 5
88362: PPUSH
88363: LD_VAR 0 7
88367: PPUSH
88368: CALL_OW 428
88372: PPUSH
88373: CALL_OW 247
88377: PUSH
88378: LD_INT 3
88380: PUSH
88381: LD_INT 2
88383: PUSH
88384: EMPTY
88385: LIST
88386: LIST
88387: IN
88388: NOT
88389: AND
88390: IFFALSE 88434
// begin ComMoveXY ( unit , _x , _y ) ;
88392: LD_VAR 0 1
88396: PPUSH
88397: LD_VAR 0 5
88401: PPUSH
88402: LD_VAR 0 7
88406: PPUSH
88407: CALL_OW 111
// result := [ _x , _y ] ;
88411: LD_ADDR_VAR 0 3
88415: PUSH
88416: LD_VAR 0 5
88420: PUSH
88421: LD_VAR 0 7
88425: PUSH
88426: EMPTY
88427: LIST
88428: LIST
88429: ST_TO_ADDR
// exit ;
88430: POP
88431: POP
88432: GO 88438
// end ; end ;
88434: GO 88278
88436: POP
88437: POP
// end ;
88438: LD_VAR 0 3
88442: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
88443: LD_INT 0
88445: PPUSH
88446: PPUSH
88447: PPUSH
// result := 0 ;
88448: LD_ADDR_VAR 0 3
88452: PUSH
88453: LD_INT 0
88455: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
88456: LD_VAR 0 1
88460: PUSH
88461: LD_INT 0
88463: LESS
88464: PUSH
88465: LD_VAR 0 1
88469: PUSH
88470: LD_INT 8
88472: GREATER
88473: OR
88474: PUSH
88475: LD_VAR 0 2
88479: PUSH
88480: LD_INT 0
88482: LESS
88483: OR
88484: PUSH
88485: LD_VAR 0 2
88489: PUSH
88490: LD_INT 8
88492: GREATER
88493: OR
88494: IFFALSE 88498
// exit ;
88496: GO 88573
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
88498: LD_ADDR_VAR 0 4
88502: PUSH
88503: LD_INT 22
88505: PUSH
88506: LD_VAR 0 2
88510: PUSH
88511: EMPTY
88512: LIST
88513: LIST
88514: PPUSH
88515: CALL_OW 69
88519: PUSH
88520: FOR_IN
88521: IFFALSE 88571
// begin un := UnitShoot ( i ) ;
88523: LD_ADDR_VAR 0 5
88527: PUSH
88528: LD_VAR 0 4
88532: PPUSH
88533: CALL_OW 504
88537: ST_TO_ADDR
// if GetSide ( un ) = side1 then
88538: LD_VAR 0 5
88542: PPUSH
88543: CALL_OW 255
88547: PUSH
88548: LD_VAR 0 1
88552: EQUAL
88553: IFFALSE 88569
// begin result := un ;
88555: LD_ADDR_VAR 0 3
88559: PUSH
88560: LD_VAR 0 5
88564: ST_TO_ADDR
// exit ;
88565: POP
88566: POP
88567: GO 88573
// end ; end ;
88569: GO 88520
88571: POP
88572: POP
// end ;
88573: LD_VAR 0 3
88577: RET
// export function GetCargoBay ( units ) ; begin
88578: LD_INT 0
88580: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
88581: LD_ADDR_VAR 0 2
88585: PUSH
88586: LD_VAR 0 1
88590: PPUSH
88591: LD_INT 2
88593: PUSH
88594: LD_INT 34
88596: PUSH
88597: LD_INT 12
88599: PUSH
88600: EMPTY
88601: LIST
88602: LIST
88603: PUSH
88604: LD_INT 34
88606: PUSH
88607: LD_INT 51
88609: PUSH
88610: EMPTY
88611: LIST
88612: LIST
88613: PUSH
88614: LD_INT 34
88616: PUSH
88617: LD_INT 32
88619: PUSH
88620: EMPTY
88621: LIST
88622: LIST
88623: PUSH
88624: LD_INT 34
88626: PUSH
88627: LD_INT 89
88629: PUSH
88630: EMPTY
88631: LIST
88632: LIST
88633: PUSH
88634: EMPTY
88635: LIST
88636: LIST
88637: LIST
88638: LIST
88639: LIST
88640: PPUSH
88641: CALL_OW 72
88645: ST_TO_ADDR
// end ;
88646: LD_VAR 0 2
88650: RET
// export function Negate ( value ) ; begin
88651: LD_INT 0
88653: PPUSH
// result := not value ;
88654: LD_ADDR_VAR 0 2
88658: PUSH
88659: LD_VAR 0 1
88663: NOT
88664: ST_TO_ADDR
// end ;
88665: LD_VAR 0 2
88669: RET
// export function Inc ( value ) ; begin
88670: LD_INT 0
88672: PPUSH
// result := value + 1 ;
88673: LD_ADDR_VAR 0 2
88677: PUSH
88678: LD_VAR 0 1
88682: PUSH
88683: LD_INT 1
88685: PLUS
88686: ST_TO_ADDR
// end ;
88687: LD_VAR 0 2
88691: RET
// export function Dec ( value ) ; begin
88692: LD_INT 0
88694: PPUSH
// result := value - 1 ;
88695: LD_ADDR_VAR 0 2
88699: PUSH
88700: LD_VAR 0 1
88704: PUSH
88705: LD_INT 1
88707: MINUS
88708: ST_TO_ADDR
// end ;
88709: LD_VAR 0 2
88713: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
88714: LD_INT 0
88716: PPUSH
88717: PPUSH
88718: PPUSH
88719: PPUSH
88720: PPUSH
88721: PPUSH
88722: PPUSH
88723: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
88724: LD_VAR 0 1
88728: PPUSH
88729: LD_VAR 0 2
88733: PPUSH
88734: CALL_OW 488
88738: NOT
88739: PUSH
88740: LD_VAR 0 3
88744: PPUSH
88745: LD_VAR 0 4
88749: PPUSH
88750: CALL_OW 488
88754: NOT
88755: OR
88756: IFFALSE 88769
// begin result := - 1 ;
88758: LD_ADDR_VAR 0 5
88762: PUSH
88763: LD_INT 1
88765: NEG
88766: ST_TO_ADDR
// exit ;
88767: GO 89004
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
88769: LD_ADDR_VAR 0 12
88773: PUSH
88774: LD_VAR 0 1
88778: PPUSH
88779: LD_VAR 0 2
88783: PPUSH
88784: LD_VAR 0 3
88788: PPUSH
88789: LD_VAR 0 4
88793: PPUSH
88794: CALL 87854 0 4
88798: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
88799: LD_ADDR_VAR 0 11
88803: PUSH
88804: LD_VAR 0 1
88808: PPUSH
88809: LD_VAR 0 2
88813: PPUSH
88814: LD_VAR 0 12
88818: PUSH
88819: LD_INT 1
88821: ARRAY
88822: PPUSH
88823: LD_VAR 0 12
88827: PUSH
88828: LD_INT 2
88830: ARRAY
88831: PPUSH
88832: CALL_OW 298
88836: ST_TO_ADDR
// distance := 9999 ;
88837: LD_ADDR_VAR 0 10
88841: PUSH
88842: LD_INT 9999
88844: ST_TO_ADDR
// for i := 0 to 5 do
88845: LD_ADDR_VAR 0 6
88849: PUSH
88850: DOUBLE
88851: LD_INT 0
88853: DEC
88854: ST_TO_ADDR
88855: LD_INT 5
88857: PUSH
88858: FOR_TO
88859: IFFALSE 89002
// begin _x := ShiftX ( x1 , i , centerDist ) ;
88861: LD_ADDR_VAR 0 7
88865: PUSH
88866: LD_VAR 0 1
88870: PPUSH
88871: LD_VAR 0 6
88875: PPUSH
88876: LD_VAR 0 11
88880: PPUSH
88881: CALL_OW 272
88885: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
88886: LD_ADDR_VAR 0 8
88890: PUSH
88891: LD_VAR 0 2
88895: PPUSH
88896: LD_VAR 0 6
88900: PPUSH
88901: LD_VAR 0 11
88905: PPUSH
88906: CALL_OW 273
88910: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
88911: LD_VAR 0 7
88915: PPUSH
88916: LD_VAR 0 8
88920: PPUSH
88921: CALL_OW 488
88925: NOT
88926: IFFALSE 88930
// continue ;
88928: GO 88858
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
88930: LD_ADDR_VAR 0 9
88934: PUSH
88935: LD_VAR 0 12
88939: PUSH
88940: LD_INT 1
88942: ARRAY
88943: PPUSH
88944: LD_VAR 0 12
88948: PUSH
88949: LD_INT 2
88951: ARRAY
88952: PPUSH
88953: LD_VAR 0 7
88957: PPUSH
88958: LD_VAR 0 8
88962: PPUSH
88963: CALL_OW 298
88967: ST_TO_ADDR
// if tmp < distance then
88968: LD_VAR 0 9
88972: PUSH
88973: LD_VAR 0 10
88977: LESS
88978: IFFALSE 89000
// begin result := i ;
88980: LD_ADDR_VAR 0 5
88984: PUSH
88985: LD_VAR 0 6
88989: ST_TO_ADDR
// distance := tmp ;
88990: LD_ADDR_VAR 0 10
88994: PUSH
88995: LD_VAR 0 9
88999: ST_TO_ADDR
// end ; end ;
89000: GO 88858
89002: POP
89003: POP
// end ;
89004: LD_VAR 0 5
89008: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
89009: LD_INT 0
89011: PPUSH
89012: PPUSH
// if not driver or not IsInUnit ( driver ) then
89013: LD_VAR 0 1
89017: NOT
89018: PUSH
89019: LD_VAR 0 1
89023: PPUSH
89024: CALL_OW 310
89028: NOT
89029: OR
89030: IFFALSE 89034
// exit ;
89032: GO 89124
// vehicle := IsInUnit ( driver ) ;
89034: LD_ADDR_VAR 0 3
89038: PUSH
89039: LD_VAR 0 1
89043: PPUSH
89044: CALL_OW 310
89048: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
89049: LD_VAR 0 1
89053: PPUSH
89054: LD_STRING \
89056: PUSH
89057: LD_INT 0
89059: PUSH
89060: LD_INT 0
89062: PUSH
89063: LD_INT 0
89065: PUSH
89066: LD_INT 0
89068: PUSH
89069: LD_INT 0
89071: PUSH
89072: LD_INT 0
89074: PUSH
89075: EMPTY
89076: LIST
89077: LIST
89078: LIST
89079: LIST
89080: LIST
89081: LIST
89082: LIST
89083: PUSH
89084: LD_STRING E
89086: PUSH
89087: LD_INT 0
89089: PUSH
89090: LD_INT 0
89092: PUSH
89093: LD_VAR 0 3
89097: PUSH
89098: LD_INT 0
89100: PUSH
89101: LD_INT 0
89103: PUSH
89104: LD_INT 0
89106: PUSH
89107: EMPTY
89108: LIST
89109: LIST
89110: LIST
89111: LIST
89112: LIST
89113: LIST
89114: LIST
89115: PUSH
89116: EMPTY
89117: LIST
89118: LIST
89119: PPUSH
89120: CALL_OW 446
// end ;
89124: LD_VAR 0 2
89128: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
89129: LD_INT 0
89131: PPUSH
89132: PPUSH
// if not driver or not IsInUnit ( driver ) then
89133: LD_VAR 0 1
89137: NOT
89138: PUSH
89139: LD_VAR 0 1
89143: PPUSH
89144: CALL_OW 310
89148: NOT
89149: OR
89150: IFFALSE 89154
// exit ;
89152: GO 89244
// vehicle := IsInUnit ( driver ) ;
89154: LD_ADDR_VAR 0 3
89158: PUSH
89159: LD_VAR 0 1
89163: PPUSH
89164: CALL_OW 310
89168: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
89169: LD_VAR 0 1
89173: PPUSH
89174: LD_STRING \
89176: PUSH
89177: LD_INT 0
89179: PUSH
89180: LD_INT 0
89182: PUSH
89183: LD_INT 0
89185: PUSH
89186: LD_INT 0
89188: PUSH
89189: LD_INT 0
89191: PUSH
89192: LD_INT 0
89194: PUSH
89195: EMPTY
89196: LIST
89197: LIST
89198: LIST
89199: LIST
89200: LIST
89201: LIST
89202: LIST
89203: PUSH
89204: LD_STRING E
89206: PUSH
89207: LD_INT 0
89209: PUSH
89210: LD_INT 0
89212: PUSH
89213: LD_VAR 0 3
89217: PUSH
89218: LD_INT 0
89220: PUSH
89221: LD_INT 0
89223: PUSH
89224: LD_INT 0
89226: PUSH
89227: EMPTY
89228: LIST
89229: LIST
89230: LIST
89231: LIST
89232: LIST
89233: LIST
89234: LIST
89235: PUSH
89236: EMPTY
89237: LIST
89238: LIST
89239: PPUSH
89240: CALL_OW 447
// end ;
89244: LD_VAR 0 2
89248: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
89249: LD_INT 0
89251: PPUSH
89252: PPUSH
89253: PPUSH
// tmp := [ ] ;
89254: LD_ADDR_VAR 0 5
89258: PUSH
89259: EMPTY
89260: ST_TO_ADDR
// for i in units do
89261: LD_ADDR_VAR 0 4
89265: PUSH
89266: LD_VAR 0 1
89270: PUSH
89271: FOR_IN
89272: IFFALSE 89310
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
89274: LD_ADDR_VAR 0 5
89278: PUSH
89279: LD_VAR 0 5
89283: PPUSH
89284: LD_VAR 0 5
89288: PUSH
89289: LD_INT 1
89291: PLUS
89292: PPUSH
89293: LD_VAR 0 4
89297: PPUSH
89298: CALL_OW 256
89302: PPUSH
89303: CALL_OW 2
89307: ST_TO_ADDR
89308: GO 89271
89310: POP
89311: POP
// if not tmp then
89312: LD_VAR 0 5
89316: NOT
89317: IFFALSE 89321
// exit ;
89319: GO 89369
// if asc then
89321: LD_VAR 0 2
89325: IFFALSE 89349
// result := SortListByListAsc ( units , tmp ) else
89327: LD_ADDR_VAR 0 3
89331: PUSH
89332: LD_VAR 0 1
89336: PPUSH
89337: LD_VAR 0 5
89341: PPUSH
89342: CALL_OW 76
89346: ST_TO_ADDR
89347: GO 89369
// result := SortListByListDesc ( units , tmp ) ;
89349: LD_ADDR_VAR 0 3
89353: PUSH
89354: LD_VAR 0 1
89358: PPUSH
89359: LD_VAR 0 5
89363: PPUSH
89364: CALL_OW 77
89368: ST_TO_ADDR
// end ;
89369: LD_VAR 0 3
89373: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
89374: LD_INT 0
89376: PPUSH
89377: PPUSH
// task := GetTaskList ( mech ) ;
89378: LD_ADDR_VAR 0 4
89382: PUSH
89383: LD_VAR 0 1
89387: PPUSH
89388: CALL_OW 437
89392: ST_TO_ADDR
// if not task then
89393: LD_VAR 0 4
89397: NOT
89398: IFFALSE 89402
// exit ;
89400: GO 89444
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
89402: LD_ADDR_VAR 0 3
89406: PUSH
89407: LD_VAR 0 4
89411: PUSH
89412: LD_INT 1
89414: ARRAY
89415: PUSH
89416: LD_INT 1
89418: ARRAY
89419: PUSH
89420: LD_STRING r
89422: EQUAL
89423: PUSH
89424: LD_VAR 0 4
89428: PUSH
89429: LD_INT 1
89431: ARRAY
89432: PUSH
89433: LD_INT 4
89435: ARRAY
89436: PUSH
89437: LD_VAR 0 2
89441: EQUAL
89442: AND
89443: ST_TO_ADDR
// end ;
89444: LD_VAR 0 3
89448: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
89449: LD_INT 0
89451: PPUSH
// SetDir ( unit , d ) ;
89452: LD_VAR 0 1
89456: PPUSH
89457: LD_VAR 0 4
89461: PPUSH
89462: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
89466: LD_VAR 0 1
89470: PPUSH
89471: LD_VAR 0 2
89475: PPUSH
89476: LD_VAR 0 3
89480: PPUSH
89481: LD_VAR 0 5
89485: PPUSH
89486: CALL_OW 48
// end ;
89490: LD_VAR 0 6
89494: RET
// export function ToNaturalNumber ( number ) ; begin
89495: LD_INT 0
89497: PPUSH
// result := number div 1 ;
89498: LD_ADDR_VAR 0 2
89502: PUSH
89503: LD_VAR 0 1
89507: PUSH
89508: LD_INT 1
89510: DIV
89511: ST_TO_ADDR
// if number < 0 then
89512: LD_VAR 0 1
89516: PUSH
89517: LD_INT 0
89519: LESS
89520: IFFALSE 89530
// result := 0 ;
89522: LD_ADDR_VAR 0 2
89526: PUSH
89527: LD_INT 0
89529: ST_TO_ADDR
// end ;
89530: LD_VAR 0 2
89534: RET
// export function SortByClass ( units , class ) ; var un ; begin
89535: LD_INT 0
89537: PPUSH
89538: PPUSH
// if not units or not class then
89539: LD_VAR 0 1
89543: NOT
89544: PUSH
89545: LD_VAR 0 2
89549: NOT
89550: OR
89551: IFFALSE 89555
// exit ;
89553: GO 89650
// result := [ ] ;
89555: LD_ADDR_VAR 0 3
89559: PUSH
89560: EMPTY
89561: ST_TO_ADDR
// for un in units do
89562: LD_ADDR_VAR 0 4
89566: PUSH
89567: LD_VAR 0 1
89571: PUSH
89572: FOR_IN
89573: IFFALSE 89648
// if GetClass ( un ) = class then
89575: LD_VAR 0 4
89579: PPUSH
89580: CALL_OW 257
89584: PUSH
89585: LD_VAR 0 2
89589: EQUAL
89590: IFFALSE 89617
// result := Insert ( result , 1 , un ) else
89592: LD_ADDR_VAR 0 3
89596: PUSH
89597: LD_VAR 0 3
89601: PPUSH
89602: LD_INT 1
89604: PPUSH
89605: LD_VAR 0 4
89609: PPUSH
89610: CALL_OW 2
89614: ST_TO_ADDR
89615: GO 89646
// result := Replace ( result , result + 1 , un ) ;
89617: LD_ADDR_VAR 0 3
89621: PUSH
89622: LD_VAR 0 3
89626: PPUSH
89627: LD_VAR 0 3
89631: PUSH
89632: LD_INT 1
89634: PLUS
89635: PPUSH
89636: LD_VAR 0 4
89640: PPUSH
89641: CALL_OW 1
89645: ST_TO_ADDR
89646: GO 89572
89648: POP
89649: POP
// end ;
89650: LD_VAR 0 3
89654: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
89655: LD_INT 0
89657: PPUSH
89658: PPUSH
89659: PPUSH
89660: PPUSH
89661: PPUSH
89662: PPUSH
89663: PPUSH
// result := [ ] ;
89664: LD_ADDR_VAR 0 4
89668: PUSH
89669: EMPTY
89670: ST_TO_ADDR
// if x - r < 0 then
89671: LD_VAR 0 1
89675: PUSH
89676: LD_VAR 0 3
89680: MINUS
89681: PUSH
89682: LD_INT 0
89684: LESS
89685: IFFALSE 89697
// min_x := 0 else
89687: LD_ADDR_VAR 0 8
89691: PUSH
89692: LD_INT 0
89694: ST_TO_ADDR
89695: GO 89713
// min_x := x - r ;
89697: LD_ADDR_VAR 0 8
89701: PUSH
89702: LD_VAR 0 1
89706: PUSH
89707: LD_VAR 0 3
89711: MINUS
89712: ST_TO_ADDR
// if y - r < 0 then
89713: LD_VAR 0 2
89717: PUSH
89718: LD_VAR 0 3
89722: MINUS
89723: PUSH
89724: LD_INT 0
89726: LESS
89727: IFFALSE 89739
// min_y := 0 else
89729: LD_ADDR_VAR 0 7
89733: PUSH
89734: LD_INT 0
89736: ST_TO_ADDR
89737: GO 89755
// min_y := y - r ;
89739: LD_ADDR_VAR 0 7
89743: PUSH
89744: LD_VAR 0 2
89748: PUSH
89749: LD_VAR 0 3
89753: MINUS
89754: ST_TO_ADDR
// max_x := x + r ;
89755: LD_ADDR_VAR 0 9
89759: PUSH
89760: LD_VAR 0 1
89764: PUSH
89765: LD_VAR 0 3
89769: PLUS
89770: ST_TO_ADDR
// max_y := y + r ;
89771: LD_ADDR_VAR 0 10
89775: PUSH
89776: LD_VAR 0 2
89780: PUSH
89781: LD_VAR 0 3
89785: PLUS
89786: ST_TO_ADDR
// for _x = min_x to max_x do
89787: LD_ADDR_VAR 0 5
89791: PUSH
89792: DOUBLE
89793: LD_VAR 0 8
89797: DEC
89798: ST_TO_ADDR
89799: LD_VAR 0 9
89803: PUSH
89804: FOR_TO
89805: IFFALSE 89906
// for _y = min_y to max_y do
89807: LD_ADDR_VAR 0 6
89811: PUSH
89812: DOUBLE
89813: LD_VAR 0 7
89817: DEC
89818: ST_TO_ADDR
89819: LD_VAR 0 10
89823: PUSH
89824: FOR_TO
89825: IFFALSE 89902
// begin if not ValidHex ( _x , _y ) then
89827: LD_VAR 0 5
89831: PPUSH
89832: LD_VAR 0 6
89836: PPUSH
89837: CALL_OW 488
89841: NOT
89842: IFFALSE 89846
// continue ;
89844: GO 89824
// if GetResourceTypeXY ( _x , _y ) then
89846: LD_VAR 0 5
89850: PPUSH
89851: LD_VAR 0 6
89855: PPUSH
89856: CALL_OW 283
89860: IFFALSE 89900
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
89862: LD_ADDR_VAR 0 4
89866: PUSH
89867: LD_VAR 0 4
89871: PPUSH
89872: LD_VAR 0 4
89876: PUSH
89877: LD_INT 1
89879: PLUS
89880: PPUSH
89881: LD_VAR 0 5
89885: PUSH
89886: LD_VAR 0 6
89890: PUSH
89891: EMPTY
89892: LIST
89893: LIST
89894: PPUSH
89895: CALL_OW 1
89899: ST_TO_ADDR
// end ;
89900: GO 89824
89902: POP
89903: POP
89904: GO 89804
89906: POP
89907: POP
// end ;
89908: LD_VAR 0 4
89912: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
89913: LD_INT 0
89915: PPUSH
89916: PPUSH
89917: PPUSH
89918: PPUSH
89919: PPUSH
89920: PPUSH
89921: PPUSH
89922: PPUSH
// if not units then
89923: LD_VAR 0 1
89927: NOT
89928: IFFALSE 89932
// exit ;
89930: GO 90456
// result := UnitFilter ( units , [ f_ok ] ) ;
89932: LD_ADDR_VAR 0 3
89936: PUSH
89937: LD_VAR 0 1
89941: PPUSH
89942: LD_INT 50
89944: PUSH
89945: EMPTY
89946: LIST
89947: PPUSH
89948: CALL_OW 72
89952: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
89953: LD_ADDR_VAR 0 8
89957: PUSH
89958: LD_VAR 0 1
89962: PUSH
89963: LD_INT 1
89965: ARRAY
89966: PPUSH
89967: CALL_OW 255
89971: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
89972: LD_ADDR_VAR 0 10
89976: PUSH
89977: LD_INT 29
89979: PUSH
89980: LD_INT 91
89982: PUSH
89983: LD_INT 49
89985: PUSH
89986: EMPTY
89987: LIST
89988: LIST
89989: LIST
89990: ST_TO_ADDR
// if not result then
89991: LD_VAR 0 3
89995: NOT
89996: IFFALSE 90000
// exit ;
89998: GO 90456
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
90000: LD_ADDR_VAR 0 5
90004: PUSH
90005: LD_INT 81
90007: PUSH
90008: LD_VAR 0 8
90012: PUSH
90013: EMPTY
90014: LIST
90015: LIST
90016: PPUSH
90017: CALL_OW 69
90021: ST_TO_ADDR
// for i in result do
90022: LD_ADDR_VAR 0 4
90026: PUSH
90027: LD_VAR 0 3
90031: PUSH
90032: FOR_IN
90033: IFFALSE 90454
// begin tag := GetTag ( i ) + 1 ;
90035: LD_ADDR_VAR 0 9
90039: PUSH
90040: LD_VAR 0 4
90044: PPUSH
90045: CALL_OW 110
90049: PUSH
90050: LD_INT 1
90052: PLUS
90053: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
90054: LD_ADDR_VAR 0 7
90058: PUSH
90059: LD_VAR 0 4
90063: PPUSH
90064: CALL_OW 250
90068: PPUSH
90069: LD_VAR 0 4
90073: PPUSH
90074: CALL_OW 251
90078: PPUSH
90079: LD_INT 6
90081: PPUSH
90082: CALL 89655 0 3
90086: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
90087: LD_VAR 0 4
90091: PPUSH
90092: CALL_OW 247
90096: PUSH
90097: LD_INT 2
90099: EQUAL
90100: PUSH
90101: LD_VAR 0 7
90105: AND
90106: PUSH
90107: LD_VAR 0 4
90111: PPUSH
90112: CALL_OW 264
90116: PUSH
90117: LD_VAR 0 10
90121: IN
90122: NOT
90123: AND
90124: IFFALSE 90163
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
90126: LD_VAR 0 4
90130: PPUSH
90131: LD_VAR 0 7
90135: PUSH
90136: LD_INT 1
90138: ARRAY
90139: PUSH
90140: LD_INT 1
90142: ARRAY
90143: PPUSH
90144: LD_VAR 0 7
90148: PUSH
90149: LD_INT 1
90151: ARRAY
90152: PUSH
90153: LD_INT 2
90155: ARRAY
90156: PPUSH
90157: CALL_OW 116
90161: GO 90452
// if path > tag then
90163: LD_VAR 0 2
90167: PUSH
90168: LD_VAR 0 9
90172: GREATER
90173: IFFALSE 90381
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
90175: LD_ADDR_VAR 0 6
90179: PUSH
90180: LD_VAR 0 5
90184: PPUSH
90185: LD_INT 91
90187: PUSH
90188: LD_VAR 0 4
90192: PUSH
90193: LD_INT 8
90195: PUSH
90196: EMPTY
90197: LIST
90198: LIST
90199: LIST
90200: PPUSH
90201: CALL_OW 72
90205: ST_TO_ADDR
// if nearEnemy then
90206: LD_VAR 0 6
90210: IFFALSE 90279
// begin if GetWeapon ( i ) = ru_time_lapser then
90212: LD_VAR 0 4
90216: PPUSH
90217: CALL_OW 264
90221: PUSH
90222: LD_INT 49
90224: EQUAL
90225: IFFALSE 90253
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
90227: LD_VAR 0 4
90231: PPUSH
90232: LD_VAR 0 6
90236: PPUSH
90237: LD_VAR 0 4
90241: PPUSH
90242: CALL_OW 74
90246: PPUSH
90247: CALL_OW 112
90251: GO 90277
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
90253: LD_VAR 0 4
90257: PPUSH
90258: LD_VAR 0 6
90262: PPUSH
90263: LD_VAR 0 4
90267: PPUSH
90268: CALL_OW 74
90272: PPUSH
90273: CALL_OW 115
// end else
90277: GO 90379
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
90279: LD_VAR 0 4
90283: PPUSH
90284: LD_VAR 0 2
90288: PUSH
90289: LD_VAR 0 9
90293: ARRAY
90294: PUSH
90295: LD_INT 1
90297: ARRAY
90298: PPUSH
90299: LD_VAR 0 2
90303: PUSH
90304: LD_VAR 0 9
90308: ARRAY
90309: PUSH
90310: LD_INT 2
90312: ARRAY
90313: PPUSH
90314: CALL_OW 297
90318: PUSH
90319: LD_INT 6
90321: GREATER
90322: IFFALSE 90365
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
90324: LD_VAR 0 4
90328: PPUSH
90329: LD_VAR 0 2
90333: PUSH
90334: LD_VAR 0 9
90338: ARRAY
90339: PUSH
90340: LD_INT 1
90342: ARRAY
90343: PPUSH
90344: LD_VAR 0 2
90348: PUSH
90349: LD_VAR 0 9
90353: ARRAY
90354: PUSH
90355: LD_INT 2
90357: ARRAY
90358: PPUSH
90359: CALL_OW 114
90363: GO 90379
// SetTag ( i , tag ) ;
90365: LD_VAR 0 4
90369: PPUSH
90370: LD_VAR 0 9
90374: PPUSH
90375: CALL_OW 109
// end else
90379: GO 90452
// if enemy then
90381: LD_VAR 0 5
90385: IFFALSE 90452
// begin if GetWeapon ( i ) = ru_time_lapser then
90387: LD_VAR 0 4
90391: PPUSH
90392: CALL_OW 264
90396: PUSH
90397: LD_INT 49
90399: EQUAL
90400: IFFALSE 90428
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
90402: LD_VAR 0 4
90406: PPUSH
90407: LD_VAR 0 5
90411: PPUSH
90412: LD_VAR 0 4
90416: PPUSH
90417: CALL_OW 74
90421: PPUSH
90422: CALL_OW 112
90426: GO 90452
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
90428: LD_VAR 0 4
90432: PPUSH
90433: LD_VAR 0 5
90437: PPUSH
90438: LD_VAR 0 4
90442: PPUSH
90443: CALL_OW 74
90447: PPUSH
90448: CALL_OW 115
// end ; end ;
90452: GO 90032
90454: POP
90455: POP
// end ;
90456: LD_VAR 0 3
90460: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
90461: LD_INT 0
90463: PPUSH
90464: PPUSH
90465: PPUSH
// if not unit or IsInUnit ( unit ) then
90466: LD_VAR 0 1
90470: NOT
90471: PUSH
90472: LD_VAR 0 1
90476: PPUSH
90477: CALL_OW 310
90481: OR
90482: IFFALSE 90486
// exit ;
90484: GO 90577
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
90486: LD_ADDR_VAR 0 4
90490: PUSH
90491: LD_VAR 0 1
90495: PPUSH
90496: CALL_OW 250
90500: PPUSH
90501: LD_VAR 0 2
90505: PPUSH
90506: LD_INT 1
90508: PPUSH
90509: CALL_OW 272
90513: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
90514: LD_ADDR_VAR 0 5
90518: PUSH
90519: LD_VAR 0 1
90523: PPUSH
90524: CALL_OW 251
90528: PPUSH
90529: LD_VAR 0 2
90533: PPUSH
90534: LD_INT 1
90536: PPUSH
90537: CALL_OW 273
90541: ST_TO_ADDR
// if ValidHex ( x , y ) then
90542: LD_VAR 0 4
90546: PPUSH
90547: LD_VAR 0 5
90551: PPUSH
90552: CALL_OW 488
90556: IFFALSE 90577
// ComTurnXY ( unit , x , y ) ;
90558: LD_VAR 0 1
90562: PPUSH
90563: LD_VAR 0 4
90567: PPUSH
90568: LD_VAR 0 5
90572: PPUSH
90573: CALL_OW 118
// end ;
90577: LD_VAR 0 3
90581: RET
// export function SeeUnits ( side , units ) ; var i ; begin
90582: LD_INT 0
90584: PPUSH
90585: PPUSH
// result := false ;
90586: LD_ADDR_VAR 0 3
90590: PUSH
90591: LD_INT 0
90593: ST_TO_ADDR
// if not units then
90594: LD_VAR 0 2
90598: NOT
90599: IFFALSE 90603
// exit ;
90601: GO 90648
// for i in units do
90603: LD_ADDR_VAR 0 4
90607: PUSH
90608: LD_VAR 0 2
90612: PUSH
90613: FOR_IN
90614: IFFALSE 90646
// if See ( side , i ) then
90616: LD_VAR 0 1
90620: PPUSH
90621: LD_VAR 0 4
90625: PPUSH
90626: CALL_OW 292
90630: IFFALSE 90644
// begin result := true ;
90632: LD_ADDR_VAR 0 3
90636: PUSH
90637: LD_INT 1
90639: ST_TO_ADDR
// exit ;
90640: POP
90641: POP
90642: GO 90648
// end ;
90644: GO 90613
90646: POP
90647: POP
// end ;
90648: LD_VAR 0 3
90652: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
90653: LD_INT 0
90655: PPUSH
90656: PPUSH
90657: PPUSH
90658: PPUSH
// if not unit or not points then
90659: LD_VAR 0 1
90663: NOT
90664: PUSH
90665: LD_VAR 0 2
90669: NOT
90670: OR
90671: IFFALSE 90675
// exit ;
90673: GO 90765
// dist := 99999 ;
90675: LD_ADDR_VAR 0 5
90679: PUSH
90680: LD_INT 99999
90682: ST_TO_ADDR
// for i in points do
90683: LD_ADDR_VAR 0 4
90687: PUSH
90688: LD_VAR 0 2
90692: PUSH
90693: FOR_IN
90694: IFFALSE 90763
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
90696: LD_ADDR_VAR 0 6
90700: PUSH
90701: LD_VAR 0 1
90705: PPUSH
90706: LD_VAR 0 4
90710: PUSH
90711: LD_INT 1
90713: ARRAY
90714: PPUSH
90715: LD_VAR 0 4
90719: PUSH
90720: LD_INT 2
90722: ARRAY
90723: PPUSH
90724: CALL_OW 297
90728: ST_TO_ADDR
// if tmpDist < dist then
90729: LD_VAR 0 6
90733: PUSH
90734: LD_VAR 0 5
90738: LESS
90739: IFFALSE 90761
// begin result := i ;
90741: LD_ADDR_VAR 0 3
90745: PUSH
90746: LD_VAR 0 4
90750: ST_TO_ADDR
// dist := tmpDist ;
90751: LD_ADDR_VAR 0 5
90755: PUSH
90756: LD_VAR 0 6
90760: ST_TO_ADDR
// end ; end ;
90761: GO 90693
90763: POP
90764: POP
// end ;
90765: LD_VAR 0 3
90769: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
90770: LD_INT 0
90772: PPUSH
// uc_side := side ;
90773: LD_ADDR_OWVAR 20
90777: PUSH
90778: LD_VAR 0 1
90782: ST_TO_ADDR
// uc_nation := 3 ;
90783: LD_ADDR_OWVAR 21
90787: PUSH
90788: LD_INT 3
90790: ST_TO_ADDR
// vc_chassis := 25 ;
90791: LD_ADDR_OWVAR 37
90795: PUSH
90796: LD_INT 25
90798: ST_TO_ADDR
// vc_engine := engine_siberite ;
90799: LD_ADDR_OWVAR 39
90803: PUSH
90804: LD_INT 3
90806: ST_TO_ADDR
// vc_control := control_computer ;
90807: LD_ADDR_OWVAR 38
90811: PUSH
90812: LD_INT 3
90814: ST_TO_ADDR
// vc_weapon := 59 ;
90815: LD_ADDR_OWVAR 40
90819: PUSH
90820: LD_INT 59
90822: ST_TO_ADDR
// result := CreateVehicle ;
90823: LD_ADDR_VAR 0 5
90827: PUSH
90828: CALL_OW 45
90832: ST_TO_ADDR
// SetDir ( result , d ) ;
90833: LD_VAR 0 5
90837: PPUSH
90838: LD_VAR 0 4
90842: PPUSH
90843: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
90847: LD_VAR 0 5
90851: PPUSH
90852: LD_VAR 0 2
90856: PPUSH
90857: LD_VAR 0 3
90861: PPUSH
90862: LD_INT 0
90864: PPUSH
90865: CALL_OW 48
// end ;
90869: LD_VAR 0 5
90873: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
90874: LD_INT 0
90876: PPUSH
90877: PPUSH
90878: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
90879: LD_ADDR_VAR 0 2
90883: PUSH
90884: LD_INT 0
90886: PUSH
90887: LD_INT 0
90889: PUSH
90890: LD_INT 0
90892: PUSH
90893: LD_INT 0
90895: PUSH
90896: EMPTY
90897: LIST
90898: LIST
90899: LIST
90900: LIST
90901: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
90902: LD_VAR 0 1
90906: NOT
90907: PUSH
90908: LD_VAR 0 1
90912: PPUSH
90913: CALL_OW 264
90917: PUSH
90918: LD_INT 12
90920: PUSH
90921: LD_INT 51
90923: PUSH
90924: LD_INT 32
90926: PUSH
90927: LD_INT 89
90929: PUSH
90930: EMPTY
90931: LIST
90932: LIST
90933: LIST
90934: LIST
90935: IN
90936: NOT
90937: OR
90938: IFFALSE 90942
// exit ;
90940: GO 91040
// for i := 1 to 3 do
90942: LD_ADDR_VAR 0 3
90946: PUSH
90947: DOUBLE
90948: LD_INT 1
90950: DEC
90951: ST_TO_ADDR
90952: LD_INT 3
90954: PUSH
90955: FOR_TO
90956: IFFALSE 91038
// begin tmp := GetCargo ( cargo , i ) ;
90958: LD_ADDR_VAR 0 4
90962: PUSH
90963: LD_VAR 0 1
90967: PPUSH
90968: LD_VAR 0 3
90972: PPUSH
90973: CALL_OW 289
90977: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
90978: LD_ADDR_VAR 0 2
90982: PUSH
90983: LD_VAR 0 2
90987: PPUSH
90988: LD_VAR 0 3
90992: PPUSH
90993: LD_VAR 0 4
90997: PPUSH
90998: CALL_OW 1
91002: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
91003: LD_ADDR_VAR 0 2
91007: PUSH
91008: LD_VAR 0 2
91012: PPUSH
91013: LD_INT 4
91015: PPUSH
91016: LD_VAR 0 2
91020: PUSH
91021: LD_INT 4
91023: ARRAY
91024: PUSH
91025: LD_VAR 0 4
91029: PLUS
91030: PPUSH
91031: CALL_OW 1
91035: ST_TO_ADDR
// end ;
91036: GO 90955
91038: POP
91039: POP
// end ;
91040: LD_VAR 0 2
91044: RET
// export function Length ( array ) ; begin
91045: LD_INT 0
91047: PPUSH
// result := array + 0 ;
91048: LD_ADDR_VAR 0 2
91052: PUSH
91053: LD_VAR 0 1
91057: PUSH
91058: LD_INT 0
91060: PLUS
91061: ST_TO_ADDR
// end ;
91062: LD_VAR 0 2
91066: RET
// export function PrepareArray ( array ) ; begin
91067: LD_INT 0
91069: PPUSH
// result := array diff 0 ;
91070: LD_ADDR_VAR 0 2
91074: PUSH
91075: LD_VAR 0 1
91079: PUSH
91080: LD_INT 0
91082: DIFF
91083: ST_TO_ADDR
// if not result [ 1 ] then
91084: LD_VAR 0 2
91088: PUSH
91089: LD_INT 1
91091: ARRAY
91092: NOT
91093: IFFALSE 91113
// result := Delete ( result , 1 ) ;
91095: LD_ADDR_VAR 0 2
91099: PUSH
91100: LD_VAR 0 2
91104: PPUSH
91105: LD_INT 1
91107: PPUSH
91108: CALL_OW 3
91112: ST_TO_ADDR
// end ; end_of_file
91113: LD_VAR 0 2
91117: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
91118: LD_VAR 0 1
91122: PUSH
91123: LD_INT 200
91125: DOUBLE
91126: GREATEREQUAL
91127: IFFALSE 91135
91129: LD_INT 299
91131: DOUBLE
91132: LESSEQUAL
91133: IFTRUE 91137
91135: GO 91169
91137: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
91138: LD_VAR 0 1
91142: PPUSH
91143: LD_VAR 0 2
91147: PPUSH
91148: LD_VAR 0 3
91152: PPUSH
91153: LD_VAR 0 4
91157: PPUSH
91158: LD_VAR 0 5
91162: PPUSH
91163: CALL 46020 0 5
91167: GO 91246
91169: LD_INT 300
91171: DOUBLE
91172: GREATEREQUAL
91173: IFFALSE 91181
91175: LD_INT 399
91177: DOUBLE
91178: LESSEQUAL
91179: IFTRUE 91183
91181: GO 91245
91183: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
91184: LD_VAR 0 1
91188: PPUSH
91189: LD_VAR 0 2
91193: PPUSH
91194: LD_VAR 0 3
91198: PPUSH
91199: LD_VAR 0 4
91203: PPUSH
91204: LD_VAR 0 5
91208: PPUSH
91209: LD_VAR 0 6
91213: PPUSH
91214: LD_VAR 0 7
91218: PPUSH
91219: LD_VAR 0 8
91223: PPUSH
91224: LD_VAR 0 9
91228: PPUSH
91229: LD_VAR 0 10
91233: PPUSH
91234: LD_VAR 0 11
91238: PPUSH
91239: CALL 42353 0 11
91243: GO 91246
91245: POP
// end ;
91246: PPOPN 11
91248: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
91249: LD_VAR 0 1
91253: PPUSH
91254: LD_VAR 0 2
91258: PPUSH
91259: LD_VAR 0 3
91263: PPUSH
91264: LD_VAR 0 4
91268: PPUSH
91269: LD_VAR 0 5
91273: PPUSH
91274: CALL 45756 0 5
// end ; end_of_file
91278: PPOPN 5
91280: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
91281: LD_VAR 0 1
91285: PPUSH
91286: LD_VAR 0 2
91290: PPUSH
91291: LD_VAR 0 3
91295: PPUSH
91296: LD_VAR 0 4
91300: PPUSH
91301: LD_VAR 0 5
91305: PPUSH
91306: LD_VAR 0 6
91310: PPUSH
91311: CALL 30046 0 6
// end ;
91315: PPOPN 6
91317: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
91318: LD_INT 0
91320: PPUSH
// begin if not units then
91321: LD_VAR 0 1
91325: NOT
91326: IFFALSE 91330
// exit ;
91328: GO 91330
// end ;
91330: PPOPN 7
91332: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
91333: CALL 30017 0 0
// end ;
91337: PPOPN 1
91339: END
