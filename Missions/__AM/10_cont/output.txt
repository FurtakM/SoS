// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout ; export Cornell ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 28
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 20
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 29
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 38
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 39
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 40
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 41
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 42
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 50
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 47
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 46
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 48
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 49
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 58
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// eventVar1 = 0 ;
 123: LD_ADDR_EXP 61
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// eventVar2 = 0 ;
 131: LD_ADDR_EXP 62
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// fastEnd = 0 ;
 139: LD_ADDR_EXP 59
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// KhatamStatus = 0 ;
 147: LD_ADDR_EXP 52
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// GensherStatus = 0 ;
 155: LD_ADDR_EXP 51
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// cratesSpawned = 0 ;
 163: LD_ADDR_EXP 55
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 ] [ Difficulty ] ;
 171: LD_ADDR_EXP 56
 175: PUSH
 176: LD_INT 1
 178: PUSH
 179: LD_INT 2
 181: PUSH
 182: LD_INT 2
 184: PUSH
 185: EMPTY
 186: LIST
 187: LIST
 188: LIST
 189: PUSH
 190: LD_OWVAR 67
 194: ARRAY
 195: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 ] [ Difficulty ] ;
 196: LD_ADDR_EXP 57
 200: PUSH
 201: LD_INT 2
 203: PUSH
 204: LD_INT 4
 206: PUSH
 207: LD_INT 4
 209: PUSH
 210: EMPTY
 211: LIST
 212: LIST
 213: LIST
 214: PUSH
 215: LD_OWVAR 67
 219: ARRAY
 220: ST_TO_ADDR
// attackAvalaible = 1 ;
 221: LD_ADDR_EXP 60
 225: PUSH
 226: LD_INT 1
 228: ST_TO_ADDR
// mission_prefix := 10c_ ;
 229: LD_ADDR_EXP 53
 233: PUSH
 234: LD_STRING 10c_
 236: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 237: LD_ADDR_EXP 54
 241: PUSH
 242: LD_STRING 10_
 244: ST_TO_ADDR
// debugMode = 0 ;
 245: LD_ADDR_EXP 63
 249: PUSH
 250: LD_INT 0
 252: ST_TO_ADDR
// PrepareNature ;
 253: CALL 24931 0 0
// PrepareDifficulty ;
 257: CALL 9979 0 0
// PrepareJMMTeam ;
 261: CALL 671 0 0
// PrepareCathyTeam ;
 265: CALL 1746 0 0
// PlaceMines ( MineField1 , 3 + Difficulty ) ;
 269: LD_INT 24
 271: PPUSH
 272: LD_INT 3
 274: PUSH
 275: LD_OWVAR 67
 279: PLUS
 280: PPUSH
 281: CALL 19853 0 2
// if Difficulty > 1 then
 285: LD_OWVAR 67
 289: PUSH
 290: LD_INT 1
 292: GREATER
 293: IFFALSE 311
// PlaceMines ( MineField2 , 3 + Difficulty ) ;
 295: LD_INT 25
 297: PPUSH
 298: LD_INT 3
 300: PUSH
 301: LD_OWVAR 67
 305: PLUS
 306: PPUSH
 307: CALL 19853 0 2
// if Difficulty > 2 then
 311: LD_OWVAR 67
 315: PUSH
 316: LD_INT 2
 318: GREATER
 319: IFFALSE 337
// PlaceMines ( MineField3 , 3 + Difficulty ) ;
 321: LD_INT 26
 323: PPUSH
 324: LD_INT 3
 326: PUSH
 327: LD_OWVAR 67
 331: PLUS
 332: PPUSH
 333: CALL 19853 0 2
// PrepareArabianCommander ;
 337: CALL 3184 0 0
// PrepareArabian ;
 341: CALL 3236 0 0
// BuildArabianBase ;
 345: CALL 12794 0 0
// TameApemans ;
 349: CALL 18658 0 0
// end ;
 353: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 354: LD_EXP 63
 358: PUSH
 359: LD_INT 1
 361: EQUAL
 362: IFFALSE 668
 364: GO 366
 366: DISABLE
 367: LD_INT 0
 369: PPUSH
// begin enable ;
 370: ENABLE
// fogoff ( true ) ;
 371: LD_INT 1
 373: PPUSH
 374: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 378: LD_ADDR_VAR 0 1
 382: PUSH
 383: LD_INT 22
 385: PUSH
 386: LD_INT 1
 388: PUSH
 389: EMPTY
 390: LIST
 391: LIST
 392: PUSH
 393: LD_INT 21
 395: PUSH
 396: LD_INT 1
 398: PUSH
 399: EMPTY
 400: LIST
 401: LIST
 402: PUSH
 403: EMPTY
 404: LIST
 405: LIST
 406: PPUSH
 407: CALL_OW 69
 411: PUSH
 412: FOR_IN
 413: IFFALSE 429
// SetLives ( i , 1000 ) ;
 415: LD_VAR 0 1
 419: PPUSH
 420: LD_INT 1000
 422: PPUSH
 423: CALL_OW 234
 427: GO 412
 429: POP
 430: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 431: LD_ADDR_VAR 0 1
 435: PUSH
 436: LD_INT 22
 438: PUSH
 439: LD_INT 1
 441: PUSH
 442: EMPTY
 443: LIST
 444: LIST
 445: PUSH
 446: LD_INT 2
 448: PUSH
 449: LD_INT 30
 451: PUSH
 452: LD_INT 0
 454: PUSH
 455: EMPTY
 456: LIST
 457: LIST
 458: PUSH
 459: LD_INT 30
 461: PUSH
 462: LD_INT 1
 464: PUSH
 465: EMPTY
 466: LIST
 467: LIST
 468: PUSH
 469: EMPTY
 470: LIST
 471: LIST
 472: LIST
 473: PUSH
 474: EMPTY
 475: LIST
 476: LIST
 477: PPUSH
 478: CALL_OW 69
 482: PUSH
 483: FOR_IN
 484: IFFALSE 508
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 486: LD_VAR 0 1
 490: PPUSH
 491: CALL_OW 274
 495: PPUSH
 496: LD_INT 1
 498: PPUSH
 499: LD_INT 9999
 501: PPUSH
 502: CALL_OW 277
 506: GO 483
 508: POP
 509: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 510: LD_ADDR_VAR 0 1
 514: PUSH
 515: LD_INT 22
 517: PUSH
 518: LD_INT 1
 520: PUSH
 521: EMPTY
 522: LIST
 523: LIST
 524: PUSH
 525: LD_INT 2
 527: PUSH
 528: LD_INT 30
 530: PUSH
 531: LD_INT 0
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PUSH
 538: LD_INT 30
 540: PUSH
 541: LD_INT 1
 543: PUSH
 544: EMPTY
 545: LIST
 546: LIST
 547: PUSH
 548: EMPTY
 549: LIST
 550: LIST
 551: LIST
 552: PUSH
 553: EMPTY
 554: LIST
 555: LIST
 556: PPUSH
 557: CALL_OW 69
 561: PUSH
 562: FOR_IN
 563: IFFALSE 587
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 565: LD_VAR 0 1
 569: PPUSH
 570: CALL_OW 274
 574: PPUSH
 575: LD_INT 2
 577: PPUSH
 578: LD_INT 9999
 580: PPUSH
 581: CALL_OW 277
 585: GO 562
 587: POP
 588: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 589: LD_ADDR_VAR 0 1
 593: PUSH
 594: LD_INT 22
 596: PUSH
 597: LD_INT 1
 599: PUSH
 600: EMPTY
 601: LIST
 602: LIST
 603: PUSH
 604: LD_INT 2
 606: PUSH
 607: LD_INT 30
 609: PUSH
 610: LD_INT 0
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PUSH
 617: LD_INT 30
 619: PUSH
 620: LD_INT 1
 622: PUSH
 623: EMPTY
 624: LIST
 625: LIST
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: LIST
 631: PUSH
 632: EMPTY
 633: LIST
 634: LIST
 635: PPUSH
 636: CALL_OW 69
 640: PUSH
 641: FOR_IN
 642: IFFALSE 666
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 644: LD_VAR 0 1
 648: PPUSH
 649: CALL_OW 274
 653: PPUSH
 654: LD_INT 3
 656: PPUSH
 657: LD_INT 9999
 659: PPUSH
 660: CALL_OW 277
 664: GO 641
 666: POP
 667: POP
// end ; end_of_file
 668: PPOPN 1
 670: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
 671: LD_INT 0
 673: PPUSH
 674: PPUSH
 675: PPUSH
 676: PPUSH
 677: PPUSH
 678: PPUSH
// uc_side = 1 ;
 679: LD_ADDR_OWVAR 20
 683: PUSH
 684: LD_INT 1
 686: ST_TO_ADDR
// uc_nation = 1 ;
 687: LD_ADDR_OWVAR 21
 691: PUSH
 692: LD_INT 1
 694: ST_TO_ADDR
// count = 0 ;
 695: LD_ADDR_VAR 0 6
 699: PUSH
 700: LD_INT 0
 702: ST_TO_ADDR
// JMM = PrepareUnit ( 10_JMM , true ) ;
 703: LD_ADDR_EXP 1
 707: PUSH
 708: LD_STRING 10_JMM
 710: PPUSH
 711: LD_INT 1
 713: PPUSH
 714: CALL 9584 0 2
 718: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
 719: LD_ADDR_EXP 20
 723: PUSH
 724: LD_EXP 20
 728: PUSH
 729: LD_EXP 1
 733: ADD
 734: ST_TO_ADDR
// Gary = PrepareUnit ( 10_Gary , true ) ;
 735: LD_ADDR_EXP 10
 739: PUSH
 740: LD_STRING 10_Gary
 742: PPUSH
 743: LD_INT 1
 745: PPUSH
 746: CALL 9584 0 2
 750: ST_TO_ADDR
// if Gary then
 751: LD_EXP 10
 755: IFFALSE 773
// JMMSquad = JMMSquad ^ Gary ;
 757: LD_ADDR_EXP 20
 761: PUSH
 762: LD_EXP 20
 766: PUSH
 767: LD_EXP 10
 771: ADD
 772: ST_TO_ADDR
// Cyrus = PrepareUnit ( 10_Cyrus , true ) ;
 773: LD_ADDR_EXP 5
 777: PUSH
 778: LD_STRING 10_Cyrus
 780: PPUSH
 781: LD_INT 1
 783: PPUSH
 784: CALL 9584 0 2
 788: ST_TO_ADDR
// if Cyrus then
 789: LD_EXP 5
 793: IFFALSE 811
// JMMSquad = JMMSquad ^ Cyrus ;
 795: LD_ADDR_EXP 20
 799: PUSH
 800: LD_EXP 20
 804: PUSH
 805: LD_EXP 5
 809: ADD
 810: ST_TO_ADDR
// Bobby = PrepareUnit ( 10_Bobby , true ) ;
 811: LD_ADDR_EXP 4
 815: PUSH
 816: LD_STRING 10_Bobby
 818: PPUSH
 819: LD_INT 1
 821: PPUSH
 822: CALL 9584 0 2
 826: ST_TO_ADDR
// if Bobby then
 827: LD_EXP 4
 831: IFFALSE 849
// JMMSquad = JMMSquad ^ Bobby ;
 833: LD_ADDR_EXP 20
 837: PUSH
 838: LD_EXP 20
 842: PUSH
 843: LD_EXP 4
 847: ADD
 848: ST_TO_ADDR
// Lisa = PrepareUnit ( 10_Lisa , true ) ;
 849: LD_ADDR_EXP 6
 853: PUSH
 854: LD_STRING 10_Lisa
 856: PPUSH
 857: LD_INT 1
 859: PPUSH
 860: CALL 9584 0 2
 864: ST_TO_ADDR
// if Lisa then
 865: LD_EXP 6
 869: IFFALSE 887
// JMMSquad = JMMSquad ^ Lisa ;
 871: LD_ADDR_EXP 20
 875: PUSH
 876: LD_EXP 20
 880: PUSH
 881: LD_EXP 6
 885: ADD
 886: ST_TO_ADDR
// Brown = PrepareUnit ( 10_Brown , true ) ;
 887: LD_ADDR_EXP 2
 891: PUSH
 892: LD_STRING 10_Brown
 894: PPUSH
 895: LD_INT 1
 897: PPUSH
 898: CALL 9584 0 2
 902: ST_TO_ADDR
// if Brown then
 903: LD_EXP 2
 907: IFFALSE 925
// JMMSquad = JMMSquad ^ Brown ;
 909: LD_ADDR_EXP 20
 913: PUSH
 914: LD_EXP 20
 918: PUSH
 919: LD_EXP 2
 923: ADD
 924: ST_TO_ADDR
// Donaldson = PrepareUnit ( 10_Donaldson , true ) ;
 925: LD_ADDR_EXP 3
 929: PUSH
 930: LD_STRING 10_Donaldson
 932: PPUSH
 933: LD_INT 1
 935: PPUSH
 936: CALL 9584 0 2
 940: ST_TO_ADDR
// if Donaldson then
 941: LD_EXP 3
 945: IFFALSE 963
// JMMSquad = JMMSquad ^ Donaldson ;
 947: LD_ADDR_EXP 20
 951: PUSH
 952: LD_EXP 20
 956: PUSH
 957: LD_EXP 3
 961: ADD
 962: ST_TO_ADDR
// Frank = PrepareUnit ( 10_Frank , true ) ;
 963: LD_ADDR_EXP 7
 967: PUSH
 968: LD_STRING 10_Frank
 970: PPUSH
 971: LD_INT 1
 973: PPUSH
 974: CALL 9584 0 2
 978: ST_TO_ADDR
// if Frank then
 979: LD_EXP 7
 983: IFFALSE 1001
// JMMSquad = JMMSquad ^ Frank ;
 985: LD_ADDR_EXP 20
 989: PUSH
 990: LD_EXP 20
 994: PUSH
 995: LD_EXP 7
 999: ADD
1000: ST_TO_ADDR
// Houten = PrepareUnit ( 10_Houten , true ) ;
1001: LD_ADDR_EXP 9
1005: PUSH
1006: LD_STRING 10_Houten
1008: PPUSH
1009: LD_INT 1
1011: PPUSH
1012: CALL 9584 0 2
1016: ST_TO_ADDR
// if Houten then
1017: LD_EXP 9
1021: IFFALSE 1039
// JMMSquad = JMMSquad ^ Houten ;
1023: LD_ADDR_EXP 20
1027: PUSH
1028: LD_EXP 20
1032: PUSH
1033: LD_EXP 9
1037: ADD
1038: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1039: LD_ADDR_EXP 21
1043: PUSH
1044: LD_STRING OthersIn10
1046: PPUSH
1047: CALL_OW 31
1051: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ) ;
1052: LD_ADDR_EXP 24
1056: PUSH
1057: LD_STRING Powell
1059: PPUSH
1060: LD_INT 0
1062: PPUSH
1063: CALL 9584 0 2
1067: ST_TO_ADDR
// for i in JMMSquad do
1068: LD_ADDR_VAR 0 2
1072: PUSH
1073: LD_EXP 20
1077: PUSH
1078: FOR_IN
1079: IFFALSE 1338
// begin if count < 3 then
1081: LD_VAR 0 6
1085: PUSH
1086: LD_INT 3
1088: LESS
1089: IFFALSE 1206
// begin vc_engine = 1 ;
1091: LD_ADDR_OWVAR 39
1095: PUSH
1096: LD_INT 1
1098: ST_TO_ADDR
// vc_control = 1 ;
1099: LD_ADDR_OWVAR 38
1103: PUSH
1104: LD_INT 1
1106: ST_TO_ADDR
// vc_weapon = 12 ;
1107: LD_ADDR_OWVAR 40
1111: PUSH
1112: LD_INT 12
1114: ST_TO_ADDR
// vc_chassis = 3 ;
1115: LD_ADDR_OWVAR 37
1119: PUSH
1120: LD_INT 3
1122: ST_TO_ADDR
// veh = CreateVehicle ;
1123: LD_ADDR_VAR 0 4
1127: PUSH
1128: CALL_OW 45
1132: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1133: LD_VAR 0 4
1137: PPUSH
1138: LD_INT 1
1140: PPUSH
1141: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1145: LD_VAR 0 4
1149: PPUSH
1150: LD_INT 2
1152: PPUSH
1153: LD_INT 0
1155: PPUSH
1156: CALL_OW 49
// if count mod 2 = 0 then
1160: LD_VAR 0 6
1164: PUSH
1165: LD_INT 2
1167: MOD
1168: PUSH
1169: LD_INT 0
1171: EQUAL
1172: IFFALSE 1191
// AddCargo ( veh , 1 , 100 ) else
1174: LD_VAR 0 4
1178: PPUSH
1179: LD_INT 1
1181: PPUSH
1182: LD_INT 100
1184: PPUSH
1185: CALL_OW 291
1189: GO 1206
// AddCargo ( veh , 3 , 100 ) end ;
1191: LD_VAR 0 4
1195: PPUSH
1196: LD_INT 3
1198: PPUSH
1199: LD_INT 100
1201: PPUSH
1202: CALL_OW 291
// if count >= 3 then
1206: LD_VAR 0 6
1210: PUSH
1211: LD_INT 3
1213: GREATEREQUAL
1214: IFFALSE 1308
// begin vc_engine = 1 ;
1216: LD_ADDR_OWVAR 39
1220: PUSH
1221: LD_INT 1
1223: ST_TO_ADDR
// vc_control = 1 ;
1224: LD_ADDR_OWVAR 38
1228: PUSH
1229: LD_INT 1
1231: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1232: LD_ADDR_OWVAR 40
1236: PUSH
1237: LD_INT 3
1239: PUSH
1240: LD_INT 4
1242: PUSH
1243: LD_INT 5
1245: PUSH
1246: EMPTY
1247: LIST
1248: LIST
1249: LIST
1250: PUSH
1251: LD_INT 1
1253: PPUSH
1254: LD_INT 3
1256: PPUSH
1257: CALL_OW 12
1261: ARRAY
1262: ST_TO_ADDR
// vc_chassis = 3 ;
1263: LD_ADDR_OWVAR 37
1267: PUSH
1268: LD_INT 3
1270: ST_TO_ADDR
// veh = CreateVehicle ;
1271: LD_ADDR_VAR 0 4
1275: PUSH
1276: CALL_OW 45
1280: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1281: LD_VAR 0 4
1285: PPUSH
1286: LD_INT 1
1288: PPUSH
1289: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1293: LD_VAR 0 4
1297: PPUSH
1298: LD_INT 2
1300: PPUSH
1301: LD_INT 0
1303: PPUSH
1304: CALL_OW 49
// end ; count = count + 1 ;
1308: LD_ADDR_VAR 0 6
1312: PUSH
1313: LD_VAR 0 6
1317: PUSH
1318: LD_INT 1
1320: PLUS
1321: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1322: LD_VAR 0 2
1326: PPUSH
1327: LD_VAR 0 4
1331: PPUSH
1332: CALL_OW 52
// end ;
1336: GO 1078
1338: POP
1339: POP
// for i in others10 do
1340: LD_ADDR_VAR 0 2
1344: PUSH
1345: LD_EXP 21
1349: PUSH
1350: FOR_IN
1351: IFFALSE 1477
// begin vc_engine = 1 ;
1353: LD_ADDR_OWVAR 39
1357: PUSH
1358: LD_INT 1
1360: ST_TO_ADDR
// vc_control = 1 ;
1361: LD_ADDR_OWVAR 38
1365: PUSH
1366: LD_INT 1
1368: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1369: LD_ADDR_OWVAR 40
1373: PUSH
1374: LD_INT 3
1376: PUSH
1377: LD_INT 4
1379: PUSH
1380: LD_INT 5
1382: PUSH
1383: EMPTY
1384: LIST
1385: LIST
1386: LIST
1387: PUSH
1388: LD_INT 1
1390: PPUSH
1391: LD_INT 3
1393: PPUSH
1394: CALL_OW 12
1398: ARRAY
1399: ST_TO_ADDR
// vc_chassis = 3 ;
1400: LD_ADDR_OWVAR 37
1404: PUSH
1405: LD_INT 3
1407: ST_TO_ADDR
// veh = CreateVehicle ;
1408: LD_ADDR_VAR 0 4
1412: PUSH
1413: CALL_OW 45
1417: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1418: LD_VAR 0 4
1422: PPUSH
1423: LD_INT 1
1425: PPUSH
1426: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1430: LD_VAR 0 4
1434: PPUSH
1435: LD_INT 2
1437: PPUSH
1438: LD_INT 0
1440: PPUSH
1441: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1445: LD_ADDR_EXP 28
1449: PUSH
1450: LD_EXP 28
1454: PUSH
1455: LD_VAR 0 4
1459: ADD
1460: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
1461: LD_VAR 0 2
1465: PPUSH
1466: LD_VAR 0 4
1470: PPUSH
1471: CALL_OW 52
// end ;
1475: GO 1350
1477: POP
1478: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
1479: LD_INT 22
1481: PUSH
1482: LD_INT 1
1484: PUSH
1485: EMPTY
1486: LIST
1487: LIST
1488: PUSH
1489: LD_INT 21
1491: PUSH
1492: LD_INT 1
1494: PUSH
1495: EMPTY
1496: LIST
1497: LIST
1498: PUSH
1499: EMPTY
1500: LIST
1501: LIST
1502: PPUSH
1503: CALL_OW 69
1507: PPUSH
1508: LD_INT 1
1510: PPUSH
1511: CALL_OW 336
// end ;
1515: LD_VAR 0 1
1519: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
1520: LD_INT 0
1522: PPUSH
1523: PPUSH
1524: PPUSH
1525: PPUSH
1526: PPUSH
// uc_side = 1 ;
1527: LD_ADDR_OWVAR 20
1531: PUSH
1532: LD_INT 1
1534: ST_TO_ADDR
// uc_nation = 1 ;
1535: LD_ADDR_OWVAR 21
1539: PUSH
1540: LD_INT 1
1542: ST_TO_ADDR
// for i := 1 to 10 do
1543: LD_ADDR_VAR 0 2
1547: PUSH
1548: DOUBLE
1549: LD_INT 1
1551: DEC
1552: ST_TO_ADDR
1553: LD_INT 10
1555: PUSH
1556: FOR_TO
1557: IFFALSE 1739
// begin vc_engine = 1 ;
1559: LD_ADDR_OWVAR 39
1563: PUSH
1564: LD_INT 1
1566: ST_TO_ADDR
// vc_control = 1 ;
1567: LD_ADDR_OWVAR 38
1571: PUSH
1572: LD_INT 1
1574: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
1575: LD_ADDR_OWVAR 40
1579: PUSH
1580: LD_INT 3
1582: PUSH
1583: LD_INT 4
1585: PUSH
1586: LD_INT 5
1588: PUSH
1589: LD_INT 12
1591: PUSH
1592: EMPTY
1593: LIST
1594: LIST
1595: LIST
1596: LIST
1597: PUSH
1598: LD_INT 1
1600: PPUSH
1601: LD_INT 4
1603: PPUSH
1604: CALL_OW 12
1608: ARRAY
1609: ST_TO_ADDR
// vc_chassis = 3 ;
1610: LD_ADDR_OWVAR 37
1614: PUSH
1615: LD_INT 3
1617: ST_TO_ADDR
// veh = CreateVehicle ;
1618: LD_ADDR_VAR 0 3
1622: PUSH
1623: CALL_OW 45
1627: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1628: LD_VAR 0 3
1632: PPUSH
1633: LD_INT 1
1635: PPUSH
1636: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1640: LD_VAR 0 3
1644: PPUSH
1645: LD_INT 2
1647: PPUSH
1648: LD_INT 0
1650: PPUSH
1651: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
1655: LD_ADDR_EXP 28
1659: PUSH
1660: LD_EXP 28
1664: PUSH
1665: LD_VAR 0 3
1669: ADD
1670: ST_TO_ADDR
// if vc_weapon = 12 then
1671: LD_OWVAR 40
1675: PUSH
1676: LD_INT 12
1678: EQUAL
1679: IFFALSE 1737
// begin rnd = Rand ( 5 , 10 ) * 10 ;
1681: LD_ADDR_VAR 0 4
1685: PUSH
1686: LD_INT 5
1688: PPUSH
1689: LD_INT 10
1691: PPUSH
1692: CALL_OW 12
1696: PUSH
1697: LD_INT 10
1699: MUL
1700: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
1701: LD_VAR 0 3
1705: PPUSH
1706: LD_INT 1
1708: PUSH
1709: LD_INT 3
1711: PUSH
1712: EMPTY
1713: LIST
1714: LIST
1715: PUSH
1716: LD_INT 1
1718: PPUSH
1719: LD_INT 2
1721: PPUSH
1722: CALL_OW 12
1726: ARRAY
1727: PPUSH
1728: LD_VAR 0 4
1732: PPUSH
1733: CALL_OW 291
// end ; end ;
1737: GO 1556
1739: POP
1740: POP
// end ;
1741: LD_VAR 0 1
1745: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
1746: LD_INT 0
1748: PPUSH
1749: PPUSH
1750: PPUSH
// uc_side = 4 ;
1751: LD_ADDR_OWVAR 20
1755: PUSH
1756: LD_INT 4
1758: ST_TO_ADDR
// uc_nation = 1 ;
1759: LD_ADDR_OWVAR 21
1763: PUSH
1764: LD_INT 1
1766: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ) ;
1767: LD_ADDR_EXP 11
1771: PUSH
1772: LD_STRING Simms
1774: PPUSH
1775: LD_INT 0
1777: PPUSH
1778: CALL 9584 0 2
1782: ST_TO_ADDR
// Denis = PrepareUnit ( 08_Denis , true ) ;
1783: LD_ADDR_EXP 12
1787: PUSH
1788: LD_STRING 08_Denis
1790: PPUSH
1791: LD_INT 1
1793: PPUSH
1794: CALL 9584 0 2
1798: ST_TO_ADDR
// Joan = PrepareUnit ( 08_Joan , true ) ;
1799: LD_ADDR_EXP 13
1803: PUSH
1804: LD_STRING 08_Joan
1806: PPUSH
1807: LD_INT 1
1809: PPUSH
1810: CALL 9584 0 2
1814: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
1815: LD_STRING 08_Khatam
1817: PPUSH
1818: CALL_OW 28
1822: IFFALSE 1842
// Khatam = PrepareUnit ( 08_Khatam , true ) else
1824: LD_ADDR_EXP 14
1828: PUSH
1829: LD_STRING 08_Khatam
1831: PPUSH
1832: LD_INT 1
1834: PPUSH
1835: CALL 9584 0 2
1839: ST_TO_ADDR
1840: GO 1867
// if TestCharacters ( 03_Khatam ) then
1842: LD_STRING 03_Khatam
1844: PPUSH
1845: CALL_OW 28
1849: IFFALSE 1867
// Khatam = PrepareUnit ( 03_Khatam , true ) ;
1851: LD_ADDR_EXP 14
1855: PUSH
1856: LD_STRING 03_Khatam
1858: PPUSH
1859: LD_INT 1
1861: PPUSH
1862: CALL 9584 0 2
1866: ST_TO_ADDR
// Gladstone = PrepareUnit ( 08_Gladstone , true ) ;
1867: LD_ADDR_EXP 15
1871: PUSH
1872: LD_STRING 08_Gladstone
1874: PPUSH
1875: LD_INT 1
1877: PPUSH
1878: CALL 9584 0 2
1882: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ) ;
1883: LD_ADDR_EXP 17
1887: PUSH
1888: LD_STRING DeltaDoctor
1890: PPUSH
1891: LD_INT 1
1893: PPUSH
1894: CALL 9584 0 2
1898: ST_TO_ADDR
// if TestCharacters ( 08_Frank ) = 1 then
1899: LD_STRING 08_Frank
1901: PPUSH
1902: CALL_OW 28
1906: PUSH
1907: LD_INT 1
1909: EQUAL
1910: IFFALSE 1928
// Kikuchi = PrepareUnit ( Yamoko , true ) ;
1912: LD_ADDR_EXP 8
1916: PUSH
1917: LD_STRING Yamoko
1919: PPUSH
1920: LD_INT 1
1922: PPUSH
1923: CALL 9584 0 2
1927: ST_TO_ADDR
// if TestCharacters ( 08_Kikuchi ) then
1928: LD_STRING 08_Kikuchi
1930: PPUSH
1931: CALL_OW 28
1935: IFFALSE 1953
// Kikuchi = PrepareUnit ( 08_Kikuchi , true ) ;
1937: LD_ADDR_EXP 8
1941: PUSH
1942: LD_STRING 08_Kikuchi
1944: PPUSH
1945: LD_INT 1
1947: PPUSH
1948: CALL 9584 0 2
1952: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
1953: LD_ADDR_EXP 22
1957: PUSH
1958: LD_STRING 09_others
1960: PPUSH
1961: CALL_OW 31
1965: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
1966: LD_ADDR_EXP 23
1970: PUSH
1971: LD_STRING 09_apes
1973: PPUSH
1974: CALL_OW 31
1978: ST_TO_ADDR
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
1979: LD_EXP 11
1983: PPUSH
1984: LD_INT 1
1986: PPUSH
1987: LD_INT 0
1989: PPUSH
1990: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
1994: LD_EXP 12
1998: PPUSH
1999: LD_INT 1
2001: PPUSH
2002: LD_INT 0
2004: PPUSH
2005: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2009: LD_EXP 13
2013: PPUSH
2014: LD_INT 1
2016: PPUSH
2017: LD_INT 0
2019: PPUSH
2020: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2024: LD_EXP 14
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: LD_INT 0
2034: PPUSH
2035: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
2039: LD_EXP 15
2043: PPUSH
2044: LD_INT 1
2046: PPUSH
2047: LD_INT 0
2049: PPUSH
2050: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
2054: LD_EXP 17
2058: PPUSH
2059: LD_INT 1
2061: PPUSH
2062: LD_INT 0
2064: PPUSH
2065: CALL_OW 49
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
2069: LD_EXP 8
2073: PPUSH
2074: LD_INT 1
2076: PPUSH
2077: LD_INT 0
2079: PPUSH
2080: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
2084: LD_EXP 11
2088: PUSH
2089: LD_EXP 14
2093: PUSH
2094: LD_EXP 12
2098: PUSH
2099: LD_EXP 15
2103: PUSH
2104: LD_EXP 17
2108: PUSH
2109: LD_EXP 13
2113: PUSH
2114: EMPTY
2115: LIST
2116: LIST
2117: LIST
2118: LIST
2119: LIST
2120: LIST
2121: PPUSH
2122: LD_INT 4
2124: PPUSH
2125: CALL_OW 336
// if others09 > 2 then
2129: LD_EXP 22
2133: PUSH
2134: LD_INT 2
2136: GREATER
2137: IFFALSE 2218
// begin for i := 1 to 3 do
2139: LD_ADDR_VAR 0 2
2143: PUSH
2144: DOUBLE
2145: LD_INT 1
2147: DEC
2148: ST_TO_ADDR
2149: LD_INT 3
2151: PUSH
2152: FOR_TO
2153: IFFALSE 2214
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
2155: LD_EXP 22
2159: PUSH
2160: LD_VAR 0 2
2164: ARRAY
2165: PPUSH
2166: LD_INT 1
2168: PPUSH
2169: LD_INT 0
2171: PPUSH
2172: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
2176: LD_ADDR_EXP 22
2180: PUSH
2181: LD_EXP 22
2185: PPUSH
2186: LD_INT 1
2188: PPUSH
2189: CALL_OW 3
2193: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
2194: LD_EXP 22
2198: PUSH
2199: LD_VAR 0 2
2203: ARRAY
2204: PPUSH
2205: LD_INT 2
2207: PPUSH
2208: CALL_OW 336
// end ;
2212: GO 2152
2214: POP
2215: POP
// end else
2216: GO 2278
// begin for i in others09 do
2218: LD_ADDR_VAR 0 2
2222: PUSH
2223: LD_EXP 22
2227: PUSH
2228: FOR_IN
2229: IFFALSE 2276
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2231: LD_VAR 0 2
2235: PPUSH
2236: LD_INT 1
2238: PPUSH
2239: LD_INT 0
2241: PPUSH
2242: CALL_OW 49
// others09 = others09 diff i ;
2246: LD_ADDR_EXP 22
2250: PUSH
2251: LD_EXP 22
2255: PUSH
2256: LD_VAR 0 2
2260: DIFF
2261: ST_TO_ADDR
// SetClass ( i , 2 ) ;
2262: LD_VAR 0 2
2266: PPUSH
2267: LD_INT 2
2269: PPUSH
2270: CALL_OW 336
// end ;
2274: GO 2228
2276: POP
2277: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
2278: LD_INT 22
2280: PUSH
2281: LD_INT 4
2283: PUSH
2284: EMPTY
2285: LIST
2286: LIST
2287: PUSH
2288: LD_INT 25
2290: PUSH
2291: LD_INT 2
2293: PUSH
2294: EMPTY
2295: LIST
2296: LIST
2297: PUSH
2298: EMPTY
2299: LIST
2300: LIST
2301: PPUSH
2302: CALL_OW 69
2306: PUSH
2307: LD_INT 0
2309: EQUAL
2310: IFFALSE 2442
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2312: LD_ADDR_VAR 0 3
2316: PUSH
2317: LD_INT 22
2319: PUSH
2320: LD_INT 4
2322: PUSH
2323: EMPTY
2324: LIST
2325: LIST
2326: PUSH
2327: LD_INT 25
2329: PUSH
2330: LD_INT 2
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: PPUSH
2341: CALL_OW 69
2345: PUSH
2346: LD_EXP 11
2350: PUSH
2351: LD_EXP 14
2355: PUSH
2356: LD_EXP 12
2360: PUSH
2361: LD_EXP 15
2365: PUSH
2366: LD_EXP 17
2370: PUSH
2371: LD_EXP 13
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: LIST
2381: LIST
2382: LIST
2383: DIFF
2384: ST_TO_ADDR
// if not tmp then
2385: LD_VAR 0 3
2389: NOT
2390: IFFALSE 2426
// begin if Denis then
2392: LD_EXP 12
2396: IFFALSE 2412
// SetClass ( Denis , 2 ) else
2398: LD_EXP 12
2402: PPUSH
2403: LD_INT 2
2405: PPUSH
2406: CALL_OW 336
2410: GO 2424
// SetClass ( DeltaDoctor , 2 ) ;
2412: LD_EXP 17
2416: PPUSH
2417: LD_INT 2
2419: PPUSH
2420: CALL_OW 336
// end else
2424: GO 2442
// begin SetClass ( tmp [ 1 ] , 2 ) ;
2426: LD_VAR 0 3
2430: PUSH
2431: LD_INT 1
2433: ARRAY
2434: PPUSH
2435: LD_INT 2
2437: PPUSH
2438: CALL_OW 336
// end ; end ; for i in ape09 do
2442: LD_ADDR_VAR 0 2
2446: PUSH
2447: LD_EXP 23
2451: PUSH
2452: FOR_IN
2453: IFFALSE 2472
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
2455: LD_VAR 0 2
2459: PPUSH
2460: LD_INT 1
2462: PPUSH
2463: LD_INT 0
2465: PPUSH
2466: CALL_OW 49
2470: GO 2452
2472: POP
2473: POP
// uc_side = 4 ;
2474: LD_ADDR_OWVAR 20
2478: PUSH
2479: LD_INT 4
2481: ST_TO_ADDR
// hc_class := 1 ;
2482: LD_ADDR_OWVAR 28
2486: PUSH
2487: LD_INT 1
2489: ST_TO_ADDR
// hc_sex := sex_female ;
2490: LD_ADDR_OWVAR 27
2494: PUSH
2495: LD_INT 2
2497: ST_TO_ADDR
// hc_gallery :=  ;
2498: LD_ADDR_OWVAR 33
2502: PUSH
2503: LD_STRING 
2505: ST_TO_ADDR
// hc_name :=  ;
2506: LD_ADDR_OWVAR 26
2510: PUSH
2511: LD_STRING 
2513: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
2514: LD_ADDR_OWVAR 31
2518: PUSH
2519: LD_INT 1
2521: PUSH
2522: LD_INT 7
2524: PUSH
2525: LD_INT 1
2527: PUSH
2528: LD_INT 0
2530: PUSH
2531: EMPTY
2532: LIST
2533: LIST
2534: LIST
2535: LIST
2536: ST_TO_ADDR
// AmScout = CreateHuman ;
2537: LD_ADDR_EXP 18
2541: PUSH
2542: CALL_OW 44
2546: ST_TO_ADDR
// end ;
2547: LD_VAR 0 1
2551: RET
// export function PrepareCornell ; begin
2552: LD_INT 0
2554: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
2555: LD_INT 4
2557: PPUSH
2558: LD_INT 4
2560: PPUSH
2561: CALL_OW 343
// uc_side = 4 ;
2565: LD_ADDR_OWVAR 20
2569: PUSH
2570: LD_INT 4
2572: ST_TO_ADDR
// uc_nation = 1 ;
2573: LD_ADDR_OWVAR 21
2577: PUSH
2578: LD_INT 1
2580: ST_TO_ADDR
// Cornell = PrepareUnit ( 03_Cornel , true ) ;
2581: LD_ADDR_EXP 19
2585: PUSH
2586: LD_STRING 03_Cornel
2588: PPUSH
2589: LD_INT 1
2591: PPUSH
2592: CALL 9584 0 2
2596: ST_TO_ADDR
// if not Cornell then
2597: LD_EXP 19
2601: NOT
2602: IFFALSE 2606
// exit ;
2604: GO 2714
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
2606: LD_EXP 19
2610: PPUSH
2611: LD_INT 8
2613: PPUSH
2614: LD_INT 0
2616: PPUSH
2617: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
2621: LD_EXP 19
2625: PPUSH
2626: LD_INT 350
2628: PPUSH
2629: CALL_OW 234
// if IsInUnit ( JMM ) then
2633: LD_EXP 1
2637: PPUSH
2638: CALL_OW 310
2642: IFFALSE 2685
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
2644: LD_EXP 19
2648: PPUSH
2649: LD_EXP 1
2653: PPUSH
2654: CALL_OW 310
2658: PPUSH
2659: CALL_OW 250
2663: PPUSH
2664: LD_EXP 1
2668: PPUSH
2669: CALL_OW 310
2673: PPUSH
2674: CALL_OW 251
2678: PPUSH
2679: CALL_OW 111
2683: GO 2714
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
2685: LD_EXP 19
2689: PPUSH
2690: LD_EXP 1
2694: PPUSH
2695: CALL_OW 250
2699: PPUSH
2700: LD_EXP 1
2704: PPUSH
2705: CALL_OW 251
2709: PPUSH
2710: CALL_OW 111
// end ; end_of_file
2714: LD_VAR 0 1
2718: RET
// export function PrepareRussians ; var i , un ; begin
2719: LD_INT 0
2721: PPUSH
2722: PPUSH
2723: PPUSH
// uc_side = 3 ;
2724: LD_ADDR_OWVAR 20
2728: PUSH
2729: LD_INT 3
2731: ST_TO_ADDR
// uc_nation = 3 ;
2732: LD_ADDR_OWVAR 21
2736: PUSH
2737: LD_INT 3
2739: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ) ;
2740: LD_ADDR_EXP 25
2744: PUSH
2745: LD_STRING Tsaritsyn
2747: PPUSH
2748: LD_INT 0
2750: PPUSH
2751: CALL 9584 0 2
2755: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
2756: LD_EXP 25
2760: PPUSH
2761: LD_INT 3
2763: PPUSH
2764: LD_INT 0
2766: PPUSH
2767: CALL_OW 49
// for i = 1 to 14 do
2771: LD_ADDR_VAR 0 2
2775: PUSH
2776: DOUBLE
2777: LD_INT 1
2779: DEC
2780: ST_TO_ADDR
2781: LD_INT 14
2783: PUSH
2784: FOR_TO
2785: IFFALSE 2871
// begin uc_side = 3 ;
2787: LD_ADDR_OWVAR 20
2791: PUSH
2792: LD_INT 3
2794: ST_TO_ADDR
// uc_nation = 3 ;
2795: LD_ADDR_OWVAR 21
2799: PUSH
2800: LD_INT 3
2802: ST_TO_ADDR
// hc_gallery =  ;
2803: LD_ADDR_OWVAR 33
2807: PUSH
2808: LD_STRING 
2810: ST_TO_ADDR
// hc_name =  ;
2811: LD_ADDR_OWVAR 26
2815: PUSH
2816: LD_STRING 
2818: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2819: LD_INT 0
2821: PPUSH
2822: LD_INT 1
2824: PPUSH
2825: LD_EXP 36
2829: PPUSH
2830: LD_EXP 37
2834: PPUSH
2835: CALL_OW 12
2839: PPUSH
2840: CALL_OW 380
// un = CreateHuman ;
2844: LD_ADDR_VAR 0 3
2848: PUSH
2849: CALL_OW 44
2853: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2854: LD_VAR 0 3
2858: PPUSH
2859: LD_INT 3
2861: PPUSH
2862: LD_INT 0
2864: PPUSH
2865: CALL_OW 49
// end ;
2869: GO 2784
2871: POP
2872: POP
// for i = 1 to 6 do
2873: LD_ADDR_VAR 0 2
2877: PUSH
2878: DOUBLE
2879: LD_INT 1
2881: DEC
2882: ST_TO_ADDR
2883: LD_INT 6
2885: PUSH
2886: FOR_TO
2887: IFFALSE 2973
// begin uc_side = 3 ;
2889: LD_ADDR_OWVAR 20
2893: PUSH
2894: LD_INT 3
2896: ST_TO_ADDR
// uc_nation = 3 ;
2897: LD_ADDR_OWVAR 21
2901: PUSH
2902: LD_INT 3
2904: ST_TO_ADDR
// hc_gallery =  ;
2905: LD_ADDR_OWVAR 33
2909: PUSH
2910: LD_STRING 
2912: ST_TO_ADDR
// hc_name =  ;
2913: LD_ADDR_OWVAR 26
2917: PUSH
2918: LD_STRING 
2920: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
2921: LD_INT 0
2923: PPUSH
2924: LD_INT 2
2926: PPUSH
2927: LD_EXP 36
2931: PPUSH
2932: LD_EXP 37
2936: PPUSH
2937: CALL_OW 12
2941: PPUSH
2942: CALL_OW 380
// un = CreateHuman ;
2946: LD_ADDR_VAR 0 3
2950: PUSH
2951: CALL_OW 44
2955: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
2956: LD_VAR 0 3
2960: PPUSH
2961: LD_INT 3
2963: PPUSH
2964: LD_INT 0
2966: PPUSH
2967: CALL_OW 49
// end ;
2971: GO 2886
2973: POP
2974: POP
// for i = 1 to 6 do
2975: LD_ADDR_VAR 0 2
2979: PUSH
2980: DOUBLE
2981: LD_INT 1
2983: DEC
2984: ST_TO_ADDR
2985: LD_INT 6
2987: PUSH
2988: FOR_TO
2989: IFFALSE 3075
// begin uc_side = 3 ;
2991: LD_ADDR_OWVAR 20
2995: PUSH
2996: LD_INT 3
2998: ST_TO_ADDR
// uc_nation = 3 ;
2999: LD_ADDR_OWVAR 21
3003: PUSH
3004: LD_INT 3
3006: ST_TO_ADDR
// hc_gallery =  ;
3007: LD_ADDR_OWVAR 33
3011: PUSH
3012: LD_STRING 
3014: ST_TO_ADDR
// hc_name =  ;
3015: LD_ADDR_OWVAR 26
3019: PUSH
3020: LD_STRING 
3022: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3023: LD_INT 0
3025: PPUSH
3026: LD_INT 3
3028: PPUSH
3029: LD_EXP 36
3033: PPUSH
3034: LD_EXP 37
3038: PPUSH
3039: CALL_OW 12
3043: PPUSH
3044: CALL_OW 380
// un = CreateHuman ;
3048: LD_ADDR_VAR 0 3
3052: PUSH
3053: CALL_OW 44
3057: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3058: LD_VAR 0 3
3062: PPUSH
3063: LD_INT 3
3065: PPUSH
3066: LD_INT 0
3068: PPUSH
3069: CALL_OW 49
// end ;
3073: GO 2988
3075: POP
3076: POP
// for i = 1 to 4 do
3077: LD_ADDR_VAR 0 2
3081: PUSH
3082: DOUBLE
3083: LD_INT 1
3085: DEC
3086: ST_TO_ADDR
3087: LD_INT 4
3089: PUSH
3090: FOR_TO
3091: IFFALSE 3177
// begin uc_side = 3 ;
3093: LD_ADDR_OWVAR 20
3097: PUSH
3098: LD_INT 3
3100: ST_TO_ADDR
// uc_nation = 3 ;
3101: LD_ADDR_OWVAR 21
3105: PUSH
3106: LD_INT 3
3108: ST_TO_ADDR
// hc_gallery =  ;
3109: LD_ADDR_OWVAR 33
3113: PUSH
3114: LD_STRING 
3116: ST_TO_ADDR
// hc_name =  ;
3117: LD_ADDR_OWVAR 26
3121: PUSH
3122: LD_STRING 
3124: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3125: LD_INT 0
3127: PPUSH
3128: LD_INT 4
3130: PPUSH
3131: LD_EXP 36
3135: PPUSH
3136: LD_EXP 37
3140: PPUSH
3141: CALL_OW 12
3145: PPUSH
3146: CALL_OW 380
// un = CreateHuman ;
3150: LD_ADDR_VAR 0 3
3154: PUSH
3155: CALL_OW 44
3159: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3160: LD_VAR 0 3
3164: PPUSH
3165: LD_INT 3
3167: PPUSH
3168: LD_INT 0
3170: PPUSH
3171: CALL_OW 49
// end ;
3175: GO 3090
3177: POP
3178: POP
// end ; end_of_file
3179: LD_VAR 0 1
3183: RET
// export function PrepareArabianCommander ; begin
3184: LD_INT 0
3186: PPUSH
// uc_side = 2 ;
3187: LD_ADDR_OWVAR 20
3191: PUSH
3192: LD_INT 2
3194: ST_TO_ADDR
// uc_nation = 2 ;
3195: LD_ADDR_OWVAR 21
3199: PUSH
3200: LD_INT 2
3202: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
3203: LD_ADDR_EXP 26
3207: PUSH
3208: LD_STRING Dietrich
3210: PPUSH
3211: CALL_OW 25
3215: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
3216: LD_EXP 26
3220: PPUSH
3221: LD_INT 4
3223: PPUSH
3224: LD_INT 0
3226: PPUSH
3227: CALL_OW 49
// end ;
3231: LD_VAR 0 1
3235: RET
// export function PrepareArabian ; var i , un , veh ; begin
3236: LD_INT 0
3238: PPUSH
3239: PPUSH
3240: PPUSH
3241: PPUSH
// uc_side := 2 ;
3242: LD_ADDR_OWVAR 20
3246: PUSH
3247: LD_INT 2
3249: ST_TO_ADDR
// uc_nation := 2 ;
3250: LD_ADDR_OWVAR 21
3254: PUSH
3255: LD_INT 2
3257: ST_TO_ADDR
// if not Ahmed then
3258: LD_EXP 27
3262: NOT
3263: IFFALSE 3331
// begin InitHc ;
3265: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
3269: LD_INT 1
3271: PPUSH
3272: LD_INT 1
3274: PPUSH
3275: LD_EXP 36
3279: PPUSH
3280: LD_EXP 37
3284: PUSH
3285: LD_INT 1
3287: PLUS
3288: PPUSH
3289: CALL_OW 12
3293: PPUSH
3294: CALL_OW 380
// hc_name := Ahmed Abbasid ;
3298: LD_ADDR_OWVAR 26
3302: PUSH
3303: LD_STRING Ahmed Abbasid
3305: ST_TO_ADDR
// Ahmed := CreateHuman ;
3306: LD_ADDR_EXP 27
3310: PUSH
3311: CALL_OW 44
3315: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
3316: LD_EXP 27
3320: PPUSH
3321: LD_INT 4
3323: PPUSH
3324: LD_INT 0
3326: PPUSH
3327: CALL_OW 49
// end ; for i = 1 to 4 do
3331: LD_ADDR_VAR 0 2
3335: PUSH
3336: DOUBLE
3337: LD_INT 1
3339: DEC
3340: ST_TO_ADDR
3341: LD_INT 4
3343: PUSH
3344: FOR_TO
3345: IFFALSE 3431
// begin uc_side = 2 ;
3347: LD_ADDR_OWVAR 20
3351: PUSH
3352: LD_INT 2
3354: ST_TO_ADDR
// uc_nation = 2 ;
3355: LD_ADDR_OWVAR 21
3359: PUSH
3360: LD_INT 2
3362: ST_TO_ADDR
// hc_gallery =  ;
3363: LD_ADDR_OWVAR 33
3367: PUSH
3368: LD_STRING 
3370: ST_TO_ADDR
// hc_name =  ;
3371: LD_ADDR_OWVAR 26
3375: PUSH
3376: LD_STRING 
3378: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3379: LD_INT 0
3381: PPUSH
3382: LD_INT 2
3384: PPUSH
3385: LD_EXP 36
3389: PPUSH
3390: LD_EXP 37
3394: PPUSH
3395: CALL_OW 12
3399: PPUSH
3400: CALL_OW 380
// un = CreateHuman ;
3404: LD_ADDR_VAR 0 3
3408: PUSH
3409: CALL_OW 44
3413: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3414: LD_VAR 0 3
3418: PPUSH
3419: LD_INT 4
3421: PPUSH
3422: LD_INT 0
3424: PPUSH
3425: CALL_OW 49
// end ;
3429: GO 3344
3431: POP
3432: POP
// for i = 1 to 5 do
3433: LD_ADDR_VAR 0 2
3437: PUSH
3438: DOUBLE
3439: LD_INT 1
3441: DEC
3442: ST_TO_ADDR
3443: LD_INT 5
3445: PUSH
3446: FOR_TO
3447: IFFALSE 3533
// begin uc_side = 2 ;
3449: LD_ADDR_OWVAR 20
3453: PUSH
3454: LD_INT 2
3456: ST_TO_ADDR
// uc_nation = 2 ;
3457: LD_ADDR_OWVAR 21
3461: PUSH
3462: LD_INT 2
3464: ST_TO_ADDR
// hc_gallery =  ;
3465: LD_ADDR_OWVAR 33
3469: PUSH
3470: LD_STRING 
3472: ST_TO_ADDR
// hc_name =  ;
3473: LD_ADDR_OWVAR 26
3477: PUSH
3478: LD_STRING 
3480: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3481: LD_INT 0
3483: PPUSH
3484: LD_INT 1
3486: PPUSH
3487: LD_EXP 36
3491: PPUSH
3492: LD_EXP 37
3496: PPUSH
3497: CALL_OW 12
3501: PPUSH
3502: CALL_OW 380
// un = CreateHuman ;
3506: LD_ADDR_VAR 0 3
3510: PUSH
3511: CALL_OW 44
3515: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3516: LD_VAR 0 3
3520: PPUSH
3521: LD_INT 4
3523: PPUSH
3524: LD_INT 0
3526: PPUSH
3527: CALL_OW 49
// end ;
3531: GO 3446
3533: POP
3534: POP
// for i = 1 to 4 do
3535: LD_ADDR_VAR 0 2
3539: PUSH
3540: DOUBLE
3541: LD_INT 1
3543: DEC
3544: ST_TO_ADDR
3545: LD_INT 4
3547: PUSH
3548: FOR_TO
3549: IFFALSE 3635
// begin uc_side = 2 ;
3551: LD_ADDR_OWVAR 20
3555: PUSH
3556: LD_INT 2
3558: ST_TO_ADDR
// uc_nation = 2 ;
3559: LD_ADDR_OWVAR 21
3563: PUSH
3564: LD_INT 2
3566: ST_TO_ADDR
// hc_gallery =  ;
3567: LD_ADDR_OWVAR 33
3571: PUSH
3572: LD_STRING 
3574: ST_TO_ADDR
// hc_name =  ;
3575: LD_ADDR_OWVAR 26
3579: PUSH
3580: LD_STRING 
3582: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3583: LD_INT 0
3585: PPUSH
3586: LD_INT 4
3588: PPUSH
3589: LD_EXP 36
3593: PPUSH
3594: LD_EXP 37
3598: PPUSH
3599: CALL_OW 12
3603: PPUSH
3604: CALL_OW 380
// un = CreateHuman ;
3608: LD_ADDR_VAR 0 3
3612: PUSH
3613: CALL_OW 44
3617: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
3618: LD_VAR 0 3
3622: PPUSH
3623: LD_INT 4
3625: PPUSH
3626: LD_INT 0
3628: PPUSH
3629: CALL_OW 49
// end ;
3633: GO 3548
3635: POP
3636: POP
// for i = 1 to 2 do
3637: LD_ADDR_VAR 0 2
3641: PUSH
3642: DOUBLE
3643: LD_INT 1
3645: DEC
3646: ST_TO_ADDR
3647: LD_INT 2
3649: PUSH
3650: FOR_TO
3651: IFFALSE 3781
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
3653: LD_ADDR_VAR 0 4
3657: PUSH
3658: LD_INT 22
3660: PUSH
3661: LD_INT 2
3663: PUSH
3664: EMPTY
3665: LIST
3666: LIST
3667: PUSH
3668: LD_INT 21
3670: PUSH
3671: LD_INT 2
3673: PUSH
3674: EMPTY
3675: LIST
3676: LIST
3677: PUSH
3678: LD_INT 58
3680: PUSH
3681: EMPTY
3682: LIST
3683: PUSH
3684: EMPTY
3685: LIST
3686: LIST
3687: LIST
3688: PPUSH
3689: CALL_OW 69
3693: ST_TO_ADDR
// uc_side = 2 ;
3694: LD_ADDR_OWVAR 20
3698: PUSH
3699: LD_INT 2
3701: ST_TO_ADDR
// uc_nation = 2 ;
3702: LD_ADDR_OWVAR 21
3706: PUSH
3707: LD_INT 2
3709: ST_TO_ADDR
// hc_gallery =  ;
3710: LD_ADDR_OWVAR 33
3714: PUSH
3715: LD_STRING 
3717: ST_TO_ADDR
// hc_name =  ;
3718: LD_ADDR_OWVAR 26
3722: PUSH
3723: LD_STRING 
3725: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3726: LD_INT 0
3728: PPUSH
3729: LD_INT 3
3731: PPUSH
3732: LD_EXP 36
3736: PPUSH
3737: LD_EXP 37
3741: PPUSH
3742: CALL_OW 12
3746: PPUSH
3747: CALL_OW 380
// un = CreateHuman ;
3751: LD_ADDR_VAR 0 3
3755: PUSH
3756: CALL_OW 44
3760: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
3761: LD_VAR 0 3
3765: PPUSH
3766: LD_VAR 0 4
3770: PUSH
3771: LD_INT 1
3773: ARRAY
3774: PPUSH
3775: CALL_OW 52
// end ;
3779: GO 3650
3781: POP
3782: POP
// end ;
3783: LD_VAR 0 1
3787: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
3788: LD_INT 0
3790: PPUSH
3791: PPUSH
3792: PPUSH
3793: PPUSH
3794: PPUSH
3795: PPUSH
// for i := 1 to 2 do
3796: LD_ADDR_VAR 0 2
3800: PUSH
3801: DOUBLE
3802: LD_INT 1
3804: DEC
3805: ST_TO_ADDR
3806: LD_INT 2
3808: PUSH
3809: FOR_TO
3810: IFFALSE 3936
// begin uc_side = 5 ;
3812: LD_ADDR_OWVAR 20
3816: PUSH
3817: LD_INT 5
3819: ST_TO_ADDR
// uc_nation = 2 ;
3820: LD_ADDR_OWVAR 21
3824: PUSH
3825: LD_INT 2
3827: ST_TO_ADDR
// vc_chassis := 31 ;
3828: LD_ADDR_OWVAR 37
3832: PUSH
3833: LD_INT 31
3835: ST_TO_ADDR
// vc_control := control_rider ;
3836: LD_ADDR_OWVAR 38
3840: PUSH
3841: LD_INT 4
3843: ST_TO_ADDR
// animal := CreateVehicle ;
3844: LD_ADDR_VAR 0 3
3848: PUSH
3849: CALL_OW 45
3853: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
3854: LD_VAR 0 3
3858: PPUSH
3859: LD_INT 7
3861: PPUSH
3862: LD_INT 0
3864: PPUSH
3865: CALL_OW 49
// hc_gallery =  ;
3869: LD_ADDR_OWVAR 33
3873: PUSH
3874: LD_STRING 
3876: ST_TO_ADDR
// hc_name =  ;
3877: LD_ADDR_OWVAR 26
3881: PUSH
3882: LD_STRING 
3884: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3885: LD_INT 0
3887: PPUSH
3888: LD_INT 11
3890: PPUSH
3891: LD_EXP 36
3895: PPUSH
3896: LD_EXP 37
3900: PPUSH
3901: CALL_OW 12
3905: PPUSH
3906: CALL_OW 380
// un = CreateHuman ;
3910: LD_ADDR_VAR 0 4
3914: PUSH
3915: CALL_OW 44
3919: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
3920: LD_VAR 0 4
3924: PPUSH
3925: LD_VAR 0 3
3929: PPUSH
3930: CALL_OW 52
// end ;
3934: GO 3809
3936: POP
3937: POP
// repeat wait ( 0 0$1 ) ;
3938: LD_INT 35
3940: PPUSH
3941: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
3945: LD_ADDR_VAR 0 5
3949: PUSH
3950: LD_INT 22
3952: PUSH
3953: LD_INT 1
3955: PUSH
3956: EMPTY
3957: LIST
3958: LIST
3959: PPUSH
3960: CALL_OW 69
3964: PPUSH
3965: LD_VAR 0 2
3969: PPUSH
3970: CALL_OW 74
3974: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
3975: LD_ADDR_VAR 0 6
3979: PUSH
3980: LD_INT 22
3982: PUSH
3983: LD_INT 1
3985: PUSH
3986: EMPTY
3987: LIST
3988: LIST
3989: PUSH
3990: LD_INT 2
3992: PUSH
3993: LD_INT 59
3995: PUSH
3996: EMPTY
3997: LIST
3998: PUSH
3999: LD_INT 21
4001: PUSH
4002: LD_INT 1
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 21
4011: PUSH
4012: LD_INT 2
4014: PUSH
4015: EMPTY
4016: LIST
4017: LIST
4018: PUSH
4019: EMPTY
4020: LIST
4021: LIST
4022: LIST
4023: LIST
4024: PUSH
4025: EMPTY
4026: LIST
4027: LIST
4028: PUSH
4029: EMPTY
4030: LIST
4031: PPUSH
4032: CALL_OW 69
4036: PPUSH
4037: LD_VAR 0 2
4041: PPUSH
4042: CALL_OW 74
4046: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
4047: LD_ADDR_VAR 0 2
4051: PUSH
4052: LD_INT 22
4054: PUSH
4055: LD_INT 5
4057: PUSH
4058: EMPTY
4059: LIST
4060: LIST
4061: PUSH
4062: LD_INT 25
4064: PUSH
4065: LD_INT 11
4067: PUSH
4068: EMPTY
4069: LIST
4070: LIST
4071: PUSH
4072: EMPTY
4073: LIST
4074: LIST
4075: PPUSH
4076: CALL_OW 69
4080: PUSH
4081: FOR_IN
4082: IFFALSE 4152
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
4084: LD_VAR 0 2
4088: PPUSH
4089: LD_VAR 0 5
4093: PPUSH
4094: CALL_OW 296
4098: PUSH
4099: LD_INT 8
4101: PLUS
4102: PUSH
4103: LD_VAR 0 2
4107: PPUSH
4108: LD_VAR 0 6
4112: PPUSH
4113: CALL_OW 296
4117: LESS
4118: IFFALSE 4136
// ComAttackUnit ( i , target1 ) else
4120: LD_VAR 0 2
4124: PPUSH
4125: LD_VAR 0 5
4129: PPUSH
4130: CALL_OW 115
4134: GO 4150
// ComAttackUnit ( i , target2 ) ;
4136: LD_VAR 0 2
4140: PPUSH
4141: LD_VAR 0 6
4145: PPUSH
4146: CALL_OW 115
// end ;
4150: GO 4081
4152: POP
4153: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 or FilterAllUnits ( [ f_side , 1 ] ) = 0 ;
4154: LD_INT 22
4156: PUSH
4157: LD_INT 5
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: PUSH
4164: LD_INT 25
4166: PUSH
4167: LD_INT 11
4169: PUSH
4170: EMPTY
4171: LIST
4172: LIST
4173: PUSH
4174: EMPTY
4175: LIST
4176: LIST
4177: PPUSH
4178: CALL_OW 69
4182: PUSH
4183: LD_INT 0
4185: EQUAL
4186: PUSH
4187: LD_INT 22
4189: PUSH
4190: LD_INT 1
4192: PUSH
4193: EMPTY
4194: LIST
4195: LIST
4196: PPUSH
4197: CALL_OW 69
4201: PUSH
4202: LD_INT 0
4204: EQUAL
4205: OR
4206: IFFALSE 3938
// end ; end_of_file
4208: LD_VAR 0 1
4212: RET
// every 1 do
4213: GO 4215
4215: DISABLE
// begin InGameOn ;
4216: CALL_OW 8
// RevealFogArea ( 1 , EpsilonTerrain ) ;
4220: LD_INT 1
4222: PPUSH
4223: LD_INT 19
4225: PPUSH
4226: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
4230: LD_EXP 11
4234: PPUSH
4235: CALL_OW 87
// wait ( 0 0$3 ) ;
4239: LD_INT 105
4241: PPUSH
4242: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
4246: LD_EXP 1
4250: PPUSH
4251: CALL_OW 310
4255: PPUSH
4256: CALL_OW 85
// Wait ( 0 0$1 ) ;
4260: LD_INT 35
4262: PPUSH
4263: CALL_OW 67
// if IsOk ( Gary ) then
4267: LD_EXP 10
4271: PPUSH
4272: CALL_OW 302
4276: IFFALSE 4314
// begin Say ( Gary , D2-Gary-1 ) ;
4278: LD_EXP 10
4282: PPUSH
4283: LD_STRING D2-Gary-1
4285: PPUSH
4286: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
4290: LD_EXP 1
4294: PPUSH
4295: LD_STRING D2-JMM-1
4297: PPUSH
4298: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
4302: LD_EXP 10
4306: PPUSH
4307: LD_STRING D2-Gary-2
4309: PPUSH
4310: CALL_OW 88
// end ; InGameOff ;
4314: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
4318: LD_STRING M1
4320: PPUSH
4321: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
4325: LD_INT 38
4327: PPUSH
4328: LD_INT 1
4330: PPUSH
4331: LD_INT 100
4333: PPUSH
4334: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
4338: LD_INT 47
4340: PPUSH
4341: LD_INT 1
4343: PPUSH
4344: LD_INT 50
4346: PPUSH
4347: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
4351: LD_INT 47
4353: PPUSH
4354: LD_INT 3
4356: PPUSH
4357: LD_INT 50
4359: PPUSH
4360: CALL_OW 291
// SaveForQuickRestart ;
4364: CALL_OW 22
// end ;
4368: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do
4369: LD_EXP 1
4373: PPUSH
4374: LD_EXP 11
4378: PPUSH
4379: CALL_OW 296
4383: PUSH
4384: LD_INT 15
4386: LESS
4387: IFFALSE 4863
4389: GO 4391
4391: DISABLE
// begin InGameOn ;
4392: CALL_OW 8
// ComExitVehicle ( JMM ) ;
4396: LD_EXP 1
4400: PPUSH
4401: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
4405: LD_EXP 1
4409: PPUSH
4410: CALL_OW 87
// AddComTurnUnit ( JMM , Simms ) ;
4414: LD_EXP 1
4418: PPUSH
4419: LD_EXP 11
4423: PPUSH
4424: CALL_OW 179
// repeat wait ( 0 0$1 ) ;
4428: LD_INT 35
4430: PPUSH
4431: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
4435: LD_EXP 11
4439: PUSH
4440: LD_EXP 13
4444: PUSH
4445: LD_EXP 12
4449: PUSH
4450: LD_EXP 14
4454: PUSH
4455: LD_EXP 8
4459: PUSH
4460: EMPTY
4461: LIST
4462: LIST
4463: LIST
4464: LIST
4465: LIST
4466: PPUSH
4467: LD_EXP 1
4471: PPUSH
4472: CALL_OW 112
// until GetDistUnits ( JMM , Simms ) < 5 ;
4476: LD_EXP 1
4480: PPUSH
4481: LD_EXP 11
4485: PPUSH
4486: CALL_OW 296
4490: PUSH
4491: LD_INT 5
4493: LESS
4494: IFFALSE 4428
// ComTurnUnit ( JMM , Simms ) ;
4496: LD_EXP 1
4500: PPUSH
4501: LD_EXP 11
4505: PPUSH
4506: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
4510: LD_EXP 11
4514: PUSH
4515: LD_EXP 13
4519: PUSH
4520: LD_EXP 12
4524: PUSH
4525: LD_EXP 14
4529: PUSH
4530: EMPTY
4531: LIST
4532: LIST
4533: LIST
4534: LIST
4535: PPUSH
4536: LD_EXP 1
4540: PPUSH
4541: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
4545: LD_EXP 1
4549: PUSH
4550: LD_EXP 11
4554: PUSH
4555: EMPTY
4556: LIST
4557: LIST
4558: PPUSH
4559: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
4563: LD_EXP 11
4567: PPUSH
4568: LD_STRING D2a-Sim-1
4570: PPUSH
4571: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
4575: LD_EXP 1
4579: PPUSH
4580: LD_STRING D2a-JMM-1
4582: PPUSH
4583: CALL_OW 88
// if IsOk ( Joan ) then
4587: LD_EXP 13
4591: PPUSH
4592: CALL_OW 302
4596: IFFALSE 4648
// begin ComTurnUnit ( JMM , Joan ) ;
4598: LD_EXP 1
4602: PPUSH
4603: LD_EXP 13
4607: PPUSH
4608: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
4612: LD_EXP 13
4616: PPUSH
4617: LD_STRING D2b-Joan-1
4619: PPUSH
4620: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
4624: LD_EXP 1
4628: PPUSH
4629: LD_STRING D2b-JMM-1
4631: PPUSH
4632: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
4636: LD_EXP 13
4640: PPUSH
4641: LD_STRING D2b-Joan-2
4643: PPUSH
4644: CALL_OW 88
// end ; if IsOk ( Denis ) then
4648: LD_EXP 12
4652: PPUSH
4653: CALL_OW 302
4657: IFFALSE 4685
// begin ComTurnUnit ( JMM , Denis ) ;
4659: LD_EXP 1
4663: PPUSH
4664: LD_EXP 12
4668: PPUSH
4669: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
4673: LD_EXP 12
4677: PPUSH
4678: LD_STRING D2c-Den-1
4680: PPUSH
4681: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
4685: LD_EXP 8
4689: PPUSH
4690: CALL_OW 302
4694: PUSH
4695: LD_STRING 08_Kikuchi
4697: PPUSH
4698: CALL_OW 28
4702: NOT
4703: AND
4704: IFFALSE 4773
// begin repeat wait ( 0 0$1 ) ;
4706: LD_INT 35
4708: PPUSH
4709: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
4713: LD_EXP 8
4717: PPUSH
4718: LD_EXP 1
4722: PPUSH
4723: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
4727: LD_EXP 1
4731: PPUSH
4732: LD_EXP 8
4736: PPUSH
4737: CALL_OW 296
4741: PUSH
4742: LD_INT 5
4744: LESS
4745: IFFALSE 4706
// ComTurnUnit ( JMM , Kikuchi ) ;
4747: LD_EXP 1
4751: PPUSH
4752: LD_EXP 8
4756: PPUSH
4757: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
4761: LD_EXP 8
4765: PPUSH
4766: LD_STRING D3b-Yam-1
4768: PPUSH
4769: CALL_OW 88
// end ; if IsOk ( Khatam ) then
4773: LD_EXP 14
4777: PPUSH
4778: CALL_OW 302
4782: IFFALSE 4822
// begin ComTurnUnit ( JMM , Khatam ) ;
4784: LD_EXP 1
4788: PPUSH
4789: LD_EXP 14
4793: PPUSH
4794: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
4798: LD_EXP 1
4802: PPUSH
4803: LD_STRING D2c-JMM-1
4805: PPUSH
4806: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
4810: LD_EXP 14
4814: PPUSH
4815: LD_STRING D2c-Khat-1
4817: PPUSH
4818: CALL_OW 88
// end ; InGameOff ;
4822: CALL_OW 9
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) , 1 ) ;
4826: LD_INT 22
4828: PUSH
4829: LD_INT 4
4831: PUSH
4832: EMPTY
4833: LIST
4834: LIST
4835: PPUSH
4836: CALL_OW 69
4840: PPUSH
4841: LD_INT 1
4843: PPUSH
4844: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
4848: LD_STRING M1a
4850: PPUSH
4851: CALL_OW 337
// joinEpsilon = 1 ;
4855: LD_ADDR_EXP 29
4859: PUSH
4860: LD_INT 1
4862: ST_TO_ADDR
// end ;
4863: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do
4864: LD_INT 38
4866: PPUSH
4867: LD_INT 1
4869: PPUSH
4870: CALL_OW 289
4874: PUSH
4875: LD_INT 0
4877: EQUAL
4878: PUSH
4879: LD_INT 47
4881: PPUSH
4882: LD_INT 1
4884: PPUSH
4885: CALL_OW 289
4889: PUSH
4890: LD_INT 0
4892: EQUAL
4893: AND
4894: PUSH
4895: LD_INT 47
4897: PPUSH
4898: LD_INT 2
4900: PPUSH
4901: CALL_OW 289
4905: PUSH
4906: LD_INT 0
4908: EQUAL
4909: AND
4910: IFFALSE 4935
4912: GO 4914
4914: DISABLE
// ComMoveXY ( [ cargo1 , cargo2 ] , 62 , 6 ) ;
4915: LD_INT 38
4917: PUSH
4918: LD_INT 47
4920: PUSH
4921: EMPTY
4922: LIST
4923: LIST
4924: PPUSH
4925: LD_INT 62
4927: PPUSH
4928: LD_INT 6
4930: PPUSH
4931: CALL_OW 111
4935: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
4936: LD_EXP 61
4940: PUSH
4941: LD_INT 1
4943: EQUAL
4944: IFFALSE 6076
4946: GO 4948
4948: DISABLE
4949: LD_INT 0
4951: PPUSH
4952: PPUSH
4953: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
4954: LD_ADDR_VAR 0 1
4958: PUSH
4959: LD_INT 22
4961: PUSH
4962: LD_INT 1
4964: PUSH
4965: EMPTY
4966: LIST
4967: LIST
4968: PUSH
4969: LD_INT 25
4971: PUSH
4972: LD_INT 4
4974: PUSH
4975: EMPTY
4976: LIST
4977: LIST
4978: PUSH
4979: LD_INT 26
4981: PUSH
4982: LD_INT 1
4984: PUSH
4985: EMPTY
4986: LIST
4987: LIST
4988: PUSH
4989: EMPTY
4990: LIST
4991: LIST
4992: LIST
4993: PPUSH
4994: CALL_OW 69
4998: PUSH
4999: LD_EXP 1
5003: PUSH
5004: LD_EXP 2
5008: PUSH
5009: LD_EXP 3
5013: PUSH
5014: LD_EXP 4
5018: PUSH
5019: LD_EXP 5
5023: PUSH
5024: LD_EXP 6
5028: PUSH
5029: LD_EXP 7
5033: PUSH
5034: LD_EXP 8
5038: PUSH
5039: LD_EXP 9
5043: PUSH
5044: LD_EXP 10
5048: PUSH
5049: LD_EXP 11
5053: PUSH
5054: LD_EXP 12
5058: PUSH
5059: LD_EXP 13
5063: PUSH
5064: LD_EXP 14
5068: PUSH
5069: LD_EXP 15
5073: PUSH
5074: LD_EXP 16
5078: PUSH
5079: LD_EXP 17
5083: PUSH
5084: LD_EXP 18
5088: PUSH
5089: LD_EXP 19
5093: PUSH
5094: LD_EXP 24
5098: PUSH
5099: EMPTY
5100: LIST
5101: LIST
5102: LIST
5103: LIST
5104: LIST
5105: LIST
5106: LIST
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: LIST
5112: LIST
5113: LIST
5114: LIST
5115: LIST
5116: LIST
5117: LIST
5118: LIST
5119: LIST
5120: DIFF
5121: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
5122: LD_ADDR_VAR 0 2
5126: PUSH
5127: LD_INT 22
5129: PUSH
5130: LD_INT 1
5132: PUSH
5133: EMPTY
5134: LIST
5135: LIST
5136: PUSH
5137: LD_INT 26
5139: PUSH
5140: LD_INT 1
5142: PUSH
5143: EMPTY
5144: LIST
5145: LIST
5146: PUSH
5147: LD_INT 2
5149: PUSH
5150: LD_INT 25
5152: PUSH
5153: LD_INT 1
5155: PUSH
5156: EMPTY
5157: LIST
5158: LIST
5159: PUSH
5160: LD_INT 25
5162: PUSH
5163: LD_INT 2
5165: PUSH
5166: EMPTY
5167: LIST
5168: LIST
5169: PUSH
5170: LD_INT 25
5172: PUSH
5173: LD_INT 3
5175: PUSH
5176: EMPTY
5177: LIST
5178: LIST
5179: PUSH
5180: EMPTY
5181: LIST
5182: LIST
5183: LIST
5184: LIST
5185: PUSH
5186: EMPTY
5187: LIST
5188: LIST
5189: LIST
5190: PPUSH
5191: CALL_OW 69
5195: PUSH
5196: LD_EXP 1
5200: PUSH
5201: LD_EXP 2
5205: PUSH
5206: LD_EXP 3
5210: PUSH
5211: LD_EXP 4
5215: PUSH
5216: LD_EXP 5
5220: PUSH
5221: LD_EXP 6
5225: PUSH
5226: LD_EXP 7
5230: PUSH
5231: LD_EXP 8
5235: PUSH
5236: LD_EXP 9
5240: PUSH
5241: LD_EXP 10
5245: PUSH
5246: LD_EXP 11
5250: PUSH
5251: LD_EXP 12
5255: PUSH
5256: LD_EXP 13
5260: PUSH
5261: LD_EXP 14
5265: PUSH
5266: LD_EXP 15
5270: PUSH
5271: LD_EXP 16
5275: PUSH
5276: LD_EXP 17
5280: PUSH
5281: LD_EXP 18
5285: PUSH
5286: LD_EXP 19
5290: PUSH
5291: LD_EXP 24
5295: PUSH
5296: EMPTY
5297: LIST
5298: LIST
5299: LIST
5300: LIST
5301: LIST
5302: LIST
5303: LIST
5304: LIST
5305: LIST
5306: LIST
5307: LIST
5308: LIST
5309: LIST
5310: LIST
5311: LIST
5312: LIST
5313: LIST
5314: LIST
5315: LIST
5316: LIST
5317: DIFF
5318: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
5319: LD_EXP 10
5323: PUSH
5324: LD_VAR 0 2
5328: OR
5329: PUSH
5330: LD_EXP 17
5334: PUSH
5335: LD_VAR 0 1
5339: OR
5340: AND
5341: IFFALSE 5560
// begin DialogueOn ;
5343: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
5347: LD_EXP 17
5351: PPUSH
5352: CALL_OW 302
5356: IFFALSE 5372
// Say ( DeltaDoctor , D3-Sci1-1 ) else
5358: LD_EXP 17
5362: PPUSH
5363: LD_STRING D3-Sci1-1
5365: PPUSH
5366: CALL_OW 88
5370: GO 5384
// Say ( tmp1 , D3-Sci1-1 ) ;
5372: LD_VAR 0 1
5376: PPUSH
5377: LD_STRING D3-Sci1-1
5379: PPUSH
5380: CALL_OW 88
// if IsOk ( Gary ) then
5384: LD_EXP 10
5388: PPUSH
5389: CALL_OW 302
5393: IFFALSE 5409
// Say ( Gary , D3-Gary-1 ) else
5395: LD_EXP 10
5399: PPUSH
5400: LD_STRING D3-Gary-1
5402: PPUSH
5403: CALL_OW 88
5407: GO 5421
// Say ( tmp2 , D3-Gary-1 ) ;
5409: LD_VAR 0 2
5413: PPUSH
5414: LD_STRING D3-Gary-1
5416: PPUSH
5417: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5421: LD_EXP 17
5425: PPUSH
5426: CALL_OW 302
5430: IFFALSE 5446
// Say ( DeltaDoctor , D3-Sci1-2 ) else
5432: LD_EXP 17
5436: PPUSH
5437: LD_STRING D3-Sci1-2
5439: PPUSH
5440: CALL_OW 88
5444: GO 5458
// Say ( tmp1 , D3-Sci1-2 ) ;
5446: LD_VAR 0 1
5450: PPUSH
5451: LD_STRING D3-Sci1-2
5453: PPUSH
5454: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
5458: LD_EXP 1
5462: PPUSH
5463: LD_STRING D3-JMM-2
5465: PPUSH
5466: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5470: LD_EXP 17
5474: PPUSH
5475: CALL_OW 302
5479: IFFALSE 5495
// Say ( DeltaDoctor , D3-Sci1-3 ) else
5481: LD_EXP 17
5485: PPUSH
5486: LD_STRING D3-Sci1-3
5488: PPUSH
5489: CALL_OW 88
5493: GO 5507
// Say ( tmp1 , D3-Sci1-3 ) ;
5495: LD_VAR 0 1
5499: PPUSH
5500: LD_STRING D3-Sci1-3
5502: PPUSH
5503: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
5507: LD_EXP 1
5511: PPUSH
5512: LD_STRING D3-JMM-3
5514: PPUSH
5515: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
5519: LD_EXP 17
5523: PPUSH
5524: CALL_OW 302
5528: IFFALSE 5544
// Say ( DeltaDoctor , D3-Sci1-4 ) else
5530: LD_EXP 17
5534: PPUSH
5535: LD_STRING D3-Sci1-4
5537: PPUSH
5538: CALL_OW 88
5542: GO 5556
// Say ( tmp1 , D3-Sci1-4 ) ;
5544: LD_VAR 0 1
5548: PPUSH
5549: LD_STRING D3-Sci1-4
5551: PPUSH
5552: CALL_OW 88
// DialogueOff ;
5556: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
5560: LD_INT 12
5562: PPUSH
5563: LD_INT 1
5565: PPUSH
5566: LD_INT 1
5568: PPUSH
5569: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
5573: LD_INT 32
5575: PPUSH
5576: LD_INT 1
5578: PPUSH
5579: LD_INT 1
5581: PPUSH
5582: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
5586: LD_INT 12
5588: PPUSH
5589: LD_INT 1
5591: PPUSH
5592: LD_INT 1
5594: PPUSH
5595: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
5599: LD_INT 33
5601: PPUSH
5602: LD_INT 1
5604: PPUSH
5605: LD_INT 1
5607: PPUSH
5608: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
5612: LD_STRING M2
5614: PPUSH
5615: CALL_OW 337
// wait ( 3 3$0 ) ;
5619: LD_INT 6300
5621: PPUSH
5622: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
5626: LD_INT 35
5628: PPUSH
5629: CALL_OW 67
// until not InBattle ( 1 ) ;
5633: LD_INT 1
5635: PPUSH
5636: CALL_OW 463
5640: NOT
5641: IFFALSE 5626
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
5643: LD_EXP 11
5647: PPUSH
5648: CALL_OW 302
5652: PUSH
5653: LD_EXP 17
5657: PPUSH
5658: CALL_OW 302
5662: AND
5663: IFFALSE 5832
// begin DialogueOn ;
5665: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5669: LD_EXP 11
5673: PPUSH
5674: LD_STRING D3a-Sim-1
5676: PPUSH
5677: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
5681: LD_EXP 17
5685: PPUSH
5686: LD_STRING D3a-Sci1-1
5688: PPUSH
5689: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5693: LD_EXP 11
5697: PPUSH
5698: LD_STRING D3a-Sim-2
5700: PPUSH
5701: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
5705: LD_EXP 17
5709: PPUSH
5710: LD_STRING D3a-Sci1-2
5712: PPUSH
5713: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5717: LD_EXP 11
5721: PPUSH
5722: LD_STRING D3a-Sim-3
5724: PPUSH
5725: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
5729: LD_EXP 17
5733: PPUSH
5734: LD_STRING D3a-Sci1-3
5736: PPUSH
5737: CALL_OW 88
// if IsOK ( Joan ) then
5741: LD_EXP 13
5745: PPUSH
5746: CALL_OW 302
5750: IFFALSE 5766
// Say ( Simms , D3a-Sim-4 ) else
5752: LD_EXP 11
5756: PPUSH
5757: LD_STRING D3a-Sim-4
5759: PPUSH
5760: CALL_OW 88
5764: GO 5778
// Say ( Simms , D3a-Sim-4a ) ;
5766: LD_EXP 11
5770: PPUSH
5771: LD_STRING D3a-Sim-4a
5773: PPUSH
5774: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
5778: LD_EXP 17
5782: PPUSH
5783: LD_STRING D3a-Sci1-4
5785: PPUSH
5786: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
5790: LD_EXP 11
5794: PPUSH
5795: LD_STRING D3a-Sim-5
5797: PPUSH
5798: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
5802: LD_EXP 17
5806: PPUSH
5807: LD_STRING D3a-Sci1-5
5809: PPUSH
5810: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
5814: LD_EXP 11
5818: PPUSH
5819: LD_STRING D3a-Sim-6
5821: PPUSH
5822: CALL_OW 88
// DialogueOff ;
5826: CALL_OW 7
// end else
5830: GO 6076
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] ] ) diff [ Simms , Khatam ] ;
5832: LD_ADDR_VAR 0 3
5836: PUSH
5837: LD_INT 22
5839: PUSH
5840: LD_INT 1
5842: PUSH
5843: EMPTY
5844: LIST
5845: LIST
5846: PUSH
5847: LD_INT 25
5849: PUSH
5850: LD_INT 4
5852: PUSH
5853: EMPTY
5854: LIST
5855: LIST
5856: PUSH
5857: EMPTY
5858: LIST
5859: LIST
5860: PPUSH
5861: CALL_OW 69
5865: PUSH
5866: LD_EXP 11
5870: PUSH
5871: LD_EXP 14
5875: PUSH
5876: EMPTY
5877: LIST
5878: LIST
5879: DIFF
5880: ST_TO_ADDR
// if tmp3 > 0 then
5881: LD_VAR 0 3
5885: PUSH
5886: LD_INT 0
5888: GREATER
5889: IFFALSE 6076
// begin DialogueOn ;
5891: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
5895: LD_EXP 11
5899: PPUSH
5900: LD_STRING D3a-Sim-1
5902: PPUSH
5903: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
5907: LD_VAR 0 3
5911: PUSH
5912: LD_INT 1
5914: ARRAY
5915: PPUSH
5916: LD_STRING D3a-Sci1-1
5918: PPUSH
5919: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
5923: LD_EXP 11
5927: PPUSH
5928: LD_STRING D3a-Sim-2
5930: PPUSH
5931: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
5935: LD_VAR 0 3
5939: PUSH
5940: LD_INT 1
5942: ARRAY
5943: PPUSH
5944: LD_STRING D3a-Sci1-2
5946: PPUSH
5947: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
5951: LD_EXP 11
5955: PPUSH
5956: LD_STRING D3a-Sim-3
5958: PPUSH
5959: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
5963: LD_VAR 0 3
5967: PUSH
5968: LD_INT 1
5970: ARRAY
5971: PPUSH
5972: LD_STRING D3a-Sci1-3
5974: PPUSH
5975: CALL_OW 88
// if IsOK ( Joan ) then
5979: LD_EXP 13
5983: PPUSH
5984: CALL_OW 302
5988: IFFALSE 6004
// Say ( Simms , D3a-Sim-4 ) else
5990: LD_EXP 11
5994: PPUSH
5995: LD_STRING D3a-Sim-4
5997: PPUSH
5998: CALL_OW 88
6002: GO 6016
// Say ( Simms , D3a-Sim-4a ) ;
6004: LD_EXP 11
6008: PPUSH
6009: LD_STRING D3a-Sim-4a
6011: PPUSH
6012: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
6016: LD_VAR 0 3
6020: PUSH
6021: LD_INT 1
6023: ARRAY
6024: PPUSH
6025: LD_STRING D3a-Sci1-4
6027: PPUSH
6028: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
6032: LD_EXP 11
6036: PPUSH
6037: LD_STRING D3a-Sim-5
6039: PPUSH
6040: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
6044: LD_VAR 0 3
6048: PUSH
6049: LD_INT 1
6051: ARRAY
6052: PPUSH
6053: LD_STRING D3a-Sci1-5
6055: PPUSH
6056: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
6060: LD_EXP 11
6064: PPUSH
6065: LD_STRING D3a-Sim-6
6067: PPUSH
6068: CALL_OW 88
// DialogueOff ;
6072: CALL_OW 7
// end ; end ; end ;
6076: PPOPN 3
6078: END
// every 2 2$1 trigger joinEpsilon = 1 do var rnd ;
6079: LD_EXP 29
6083: PUSH
6084: LD_INT 1
6086: EQUAL
6087: IFFALSE 6407
6089: GO 6091
6091: DISABLE
6092: LD_INT 0
6094: PPUSH
// begin SayRadio ( AmScout , D4-FSol1-1 ) ;
6095: LD_EXP 18
6099: PPUSH
6100: LD_STRING D4-FSol1-1
6102: PPUSH
6103: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
6107: LD_STRING M3
6109: PPUSH
6110: CALL_OW 337
// PrepareRussians ;
6114: CALL 2719 0 0
// rnd = Rand ( 1 , 100 ) ;
6118: LD_ADDR_VAR 0 1
6122: PUSH
6123: LD_INT 1
6125: PPUSH
6126: LD_INT 100
6128: PPUSH
6129: CALL_OW 12
6133: ST_TO_ADDR
// if difficulty = 1 then
6134: LD_OWVAR 67
6138: PUSH
6139: LD_INT 1
6141: EQUAL
6142: IFFALSE 6225
// begin if rnd > 0 and rnd < 51 then
6144: LD_VAR 0 1
6148: PUSH
6149: LD_INT 0
6151: GREATER
6152: PUSH
6153: LD_VAR 0 1
6157: PUSH
6158: LD_INT 51
6160: LESS
6161: AND
6162: IFFALSE 6171
// BuildRussianBase ( 2 ) ;
6164: LD_INT 2
6166: PPUSH
6167: CALL 10299 0 1
// if rnd > 50 and rnd < 81 then
6171: LD_VAR 0 1
6175: PUSH
6176: LD_INT 50
6178: GREATER
6179: PUSH
6180: LD_VAR 0 1
6184: PUSH
6185: LD_INT 81
6187: LESS
6188: AND
6189: IFFALSE 6198
// BuildRussianBase ( 1 ) ;
6191: LD_INT 1
6193: PPUSH
6194: CALL 10299 0 1
// if rnd > 80 and rnd < 101 then
6198: LD_VAR 0 1
6202: PUSH
6203: LD_INT 80
6205: GREATER
6206: PUSH
6207: LD_VAR 0 1
6211: PUSH
6212: LD_INT 101
6214: LESS
6215: AND
6216: IFFALSE 6225
// BuildRussianBase ( 3 ) ;
6218: LD_INT 3
6220: PPUSH
6221: CALL 10299 0 1
// end ; if difficulty = 2 then
6225: LD_OWVAR 67
6229: PUSH
6230: LD_INT 2
6232: EQUAL
6233: IFFALSE 6316
// begin if rnd > 0 and rnd < 61 then
6235: LD_VAR 0 1
6239: PUSH
6240: LD_INT 0
6242: GREATER
6243: PUSH
6244: LD_VAR 0 1
6248: PUSH
6249: LD_INT 61
6251: LESS
6252: AND
6253: IFFALSE 6262
// BuildRussianBase ( 2 ) ;
6255: LD_INT 2
6257: PPUSH
6258: CALL 10299 0 1
// if rnd > 60 and rnd < 81 then
6262: LD_VAR 0 1
6266: PUSH
6267: LD_INT 60
6269: GREATER
6270: PUSH
6271: LD_VAR 0 1
6275: PUSH
6276: LD_INT 81
6278: LESS
6279: AND
6280: IFFALSE 6289
// BuildRussianBase ( 1 ) ;
6282: LD_INT 1
6284: PPUSH
6285: CALL 10299 0 1
// if rnd > 80 and rnd < 101 then
6289: LD_VAR 0 1
6293: PUSH
6294: LD_INT 80
6296: GREATER
6297: PUSH
6298: LD_VAR 0 1
6302: PUSH
6303: LD_INT 101
6305: LESS
6306: AND
6307: IFFALSE 6316
// BuildRussianBase ( 3 ) ;
6309: LD_INT 3
6311: PPUSH
6312: CALL 10299 0 1
// end ; if difficulty = 3 then
6316: LD_OWVAR 67
6320: PUSH
6321: LD_INT 3
6323: EQUAL
6324: IFFALSE 6407
// begin if rnd > 0 and rnd < 71 then
6326: LD_VAR 0 1
6330: PUSH
6331: LD_INT 0
6333: GREATER
6334: PUSH
6335: LD_VAR 0 1
6339: PUSH
6340: LD_INT 71
6342: LESS
6343: AND
6344: IFFALSE 6353
// BuildRussianBase ( 3 ) ;
6346: LD_INT 3
6348: PPUSH
6349: CALL 10299 0 1
// if rnd > 70 and rnd < 81 then
6353: LD_VAR 0 1
6357: PUSH
6358: LD_INT 70
6360: GREATER
6361: PUSH
6362: LD_VAR 0 1
6366: PUSH
6367: LD_INT 81
6369: LESS
6370: AND
6371: IFFALSE 6380
// BuildRussianBase ( 2 ) ;
6373: LD_INT 2
6375: PPUSH
6376: CALL 10299 0 1
// if rnd > 80 and rnd < 101 then
6380: LD_VAR 0 1
6384: PUSH
6385: LD_INT 80
6387: GREATER
6388: PUSH
6389: LD_VAR 0 1
6393: PUSH
6394: LD_INT 101
6396: LESS
6397: AND
6398: IFFALSE 6407
// BuildRussianBase ( 1 ) ;
6400: LD_INT 1
6402: PPUSH
6403: CALL 10299 0 1
// end ; end ;
6407: PPOPN 1
6409: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
6410: LD_INT 54
6412: PPUSH
6413: LD_INT 1
6415: PPUSH
6416: CALL_OW 321
6420: PUSH
6421: LD_INT 2
6423: EQUAL
6424: PUSH
6425: LD_INT 21
6427: PPUSH
6428: LD_INT 1
6430: PPUSH
6431: CALL_OW 321
6435: PUSH
6436: LD_INT 2
6438: EQUAL
6439: OR
6440: PUSH
6441: LD_INT 22
6443: PPUSH
6444: LD_INT 1
6446: PPUSH
6447: CALL_OW 321
6451: PUSH
6452: LD_INT 2
6454: EQUAL
6455: OR
6456: IFFALSE 6768
6458: GO 6460
6460: DISABLE
6461: LD_INT 0
6463: PPUSH
6464: PPUSH
// begin if IsOk ( DeltaDoctor ) then
6465: LD_EXP 17
6469: PPUSH
6470: CALL_OW 302
6474: IFFALSE 6488
// tmp := DeltaDoctor else
6476: LD_ADDR_VAR 0 2
6480: PUSH
6481: LD_EXP 17
6485: ST_TO_ADDR
6486: GO 6498
// tmp := Denis ;
6488: LD_ADDR_VAR 0 2
6492: PUSH
6493: LD_EXP 12
6497: ST_TO_ADDR
// if tmp then
6498: LD_VAR 0 2
6502: IFFALSE 6596
// begin DialogueOn ;
6504: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
6508: LD_EXP 1
6512: PPUSH
6513: LD_STRING D6-JMM-1
6515: PPUSH
6516: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
6520: LD_VAR 0 2
6524: PPUSH
6525: LD_STRING D6-Sci1-1
6527: PPUSH
6528: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
6532: LD_EXP 1
6536: PPUSH
6537: LD_STRING D6-JMM-2
6539: PPUSH
6540: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
6544: LD_VAR 0 2
6548: PPUSH
6549: LD_STRING D6-Sci1-2
6551: PPUSH
6552: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
6556: LD_EXP 1
6560: PPUSH
6561: LD_STRING D6-JMM-3
6563: PPUSH
6564: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
6568: LD_VAR 0 2
6572: PPUSH
6573: LD_STRING D6-Sci1-3
6575: PPUSH
6576: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
6580: LD_EXP 1
6584: PPUSH
6585: LD_STRING D6-JMM-4
6587: PPUSH
6588: CALL_OW 88
// DialogueOff ;
6592: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
6596: LD_INT 1050
6598: PPUSH
6599: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
6603: LD_EXP 49
6607: PUSH
6608: LD_INT 0
6610: EQUAL
6611: PUSH
6612: LD_EXP 14
6616: PPUSH
6617: CALL_OW 302
6621: AND
6622: IFFALSE 6680
// begin DialogueOn ;
6624: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
6628: LD_EXP 27
6632: PPUSH
6633: LD_STRING D5-Ar1-1
6635: PPUSH
6636: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
6640: LD_EXP 26
6644: PPUSH
6645: LD_STRING D5-Diet-1
6647: PPUSH
6648: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
6652: LD_EXP 27
6656: PPUSH
6657: LD_STRING D5-Ar1-2
6659: PPUSH
6660: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
6664: LD_EXP 26
6668: PPUSH
6669: LD_STRING D5-Diet-2
6671: PPUSH
6672: CALL_OW 88
// DialogueOff ;
6676: CALL_OW 7
// end ; wait ( [ 1 1$0 , 1 1$30 , 2 2$0 , 2 2$30 ] [ Rand ( 1 , 4 ) ] ) ;
6680: LD_INT 2100
6682: PUSH
6683: LD_INT 3150
6685: PUSH
6686: LD_INT 4200
6688: PUSH
6689: LD_INT 5250
6691: PUSH
6692: EMPTY
6693: LIST
6694: LIST
6695: LIST
6696: LIST
6697: PUSH
6698: LD_INT 1
6700: PPUSH
6701: LD_INT 4
6703: PPUSH
6704: CALL_OW 12
6708: ARRAY
6709: PPUSH
6710: CALL_OW 67
// if arabianTrait = 0 then
6714: LD_EXP 49
6718: PUSH
6719: LD_INT 0
6721: EQUAL
6722: IFFALSE 6768
// begin arabianTrait = 1 ;
6724: LD_ADDR_EXP 49
6728: PUSH
6729: LD_INT 1
6731: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
6732: LD_INT 2
6734: PPUSH
6735: LD_INT 3
6737: PPUSH
6738: LD_INT 1
6740: PPUSH
6741: LD_INT 1
6743: PPUSH
6744: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
6748: LD_INT 2
6750: PPUSH
6751: LD_INT 6
6753: PPUSH
6754: LD_INT 1
6756: PPUSH
6757: LD_INT 1
6759: PPUSH
6760: CALL_OW 80
// PrepareArabianTrait ;
6764: CALL 6771 0 0
// end ; end ;
6768: PPOPN 2
6770: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian ; begin
6771: LD_INT 0
6773: PPUSH
6774: PPUSH
6775: PPUSH
6776: PPUSH
6777: PPUSH
6778: PPUSH
// ComExitBuilding ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) ) ;
6779: LD_INT 22
6781: PUSH
6782: LD_INT 2
6784: PUSH
6785: EMPTY
6786: LIST
6787: LIST
6788: PUSH
6789: LD_INT 25
6791: PUSH
6792: LD_INT 4
6794: PUSH
6795: EMPTY
6796: LIST
6797: LIST
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: PPUSH
6803: CALL_OW 69
6807: PPUSH
6808: CALL_OW 122
// ComExitVehicle ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 3 ] ] ) ) ;
6812: LD_INT 22
6814: PUSH
6815: LD_INT 2
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: PUSH
6822: LD_INT 25
6824: PUSH
6825: LD_INT 3
6827: PUSH
6828: EMPTY
6829: LIST
6830: LIST
6831: PUSH
6832: EMPTY
6833: LIST
6834: LIST
6835: PPUSH
6836: CALL_OW 69
6840: PPUSH
6841: CALL_OW 121
// SetClass ( Dietrich , 8 ) ;
6845: LD_EXP 26
6849: PPUSH
6850: LD_INT 8
6852: PPUSH
6853: CALL_OW 336
// wait ( 0 0$3 ) ;
6857: LD_INT 105
6859: PPUSH
6860: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
6864: LD_INT 76
6866: PPUSH
6867: LD_INT 19
6869: PPUSH
6870: CALL_OW 84
// DialogueOn ;
6874: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
6878: LD_INT 22
6880: PUSH
6881: LD_INT 1
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PUSH
6888: LD_INT 26
6890: PUSH
6891: LD_INT 1
6893: PUSH
6894: EMPTY
6895: LIST
6896: LIST
6897: PUSH
6898: LD_INT 2
6900: PUSH
6901: LD_INT 25
6903: PUSH
6904: LD_INT 1
6906: PUSH
6907: EMPTY
6908: LIST
6909: LIST
6910: PUSH
6911: LD_INT 25
6913: PUSH
6914: LD_INT 2
6916: PUSH
6917: EMPTY
6918: LIST
6919: LIST
6920: PUSH
6921: LD_INT 25
6923: PUSH
6924: LD_INT 3
6926: PUSH
6927: EMPTY
6928: LIST
6929: LIST
6930: PUSH
6931: LD_INT 25
6933: PUSH
6934: LD_INT 4
6936: PUSH
6937: EMPTY
6938: LIST
6939: LIST
6940: PUSH
6941: LD_INT 25
6943: PUSH
6944: LD_INT 5
6946: PUSH
6947: EMPTY
6948: LIST
6949: LIST
6950: PUSH
6951: EMPTY
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: PUSH
6959: EMPTY
6960: LIST
6961: LIST
6962: LIST
6963: PPUSH
6964: CALL_OW 69
6968: PPUSH
6969: LD_STRING D8-Sol1-1
6971: PPUSH
6972: LD_STRING D8-Sol1-1
6974: PPUSH
6975: CALL 9641 0 3
// if IsOK ( DeltaDoctor ) then
6979: LD_EXP 17
6983: PPUSH
6984: CALL_OW 302
6988: IFFALSE 7004
// Say ( DeltaDoctor , D8-Sci1-1 ) else
6990: LD_EXP 17
6994: PPUSH
6995: LD_STRING D8-Sci1-1
6997: PPUSH
6998: CALL_OW 88
7002: GO 7105
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
7004: LD_INT 22
7006: PUSH
7007: LD_INT 1
7009: PUSH
7010: EMPTY
7011: LIST
7012: LIST
7013: PUSH
7014: LD_INT 26
7016: PUSH
7017: LD_INT 1
7019: PUSH
7020: EMPTY
7021: LIST
7022: LIST
7023: PUSH
7024: LD_INT 2
7026: PUSH
7027: LD_INT 25
7029: PUSH
7030: LD_INT 1
7032: PUSH
7033: EMPTY
7034: LIST
7035: LIST
7036: PUSH
7037: LD_INT 25
7039: PUSH
7040: LD_INT 2
7042: PUSH
7043: EMPTY
7044: LIST
7045: LIST
7046: PUSH
7047: LD_INT 25
7049: PUSH
7050: LD_INT 3
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: PUSH
7057: LD_INT 25
7059: PUSH
7060: LD_INT 4
7062: PUSH
7063: EMPTY
7064: LIST
7065: LIST
7066: PUSH
7067: LD_INT 25
7069: PUSH
7070: LD_INT 5
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: PUSH
7077: EMPTY
7078: LIST
7079: LIST
7080: LIST
7081: LIST
7082: LIST
7083: LIST
7084: PUSH
7085: EMPTY
7086: LIST
7087: LIST
7088: LIST
7089: PPUSH
7090: CALL_OW 69
7094: PPUSH
7095: LD_STRING D8-Sol1-1
7097: PPUSH
7098: LD_STRING D8-Sol1-1
7100: PPUSH
7101: CALL 9641 0 3
// Say ( JMM , D8-JMM-1 ) ;
7105: LD_EXP 1
7109: PPUSH
7110: LD_STRING D8-JMM-1
7112: PPUSH
7113: CALL_OW 88
// DialogueOff ;
7117: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
7121: LD_INT 2
7123: PPUSH
7124: LD_INT 2
7126: PPUSH
7127: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
7131: LD_INT 1
7133: PPUSH
7134: LD_INT 2
7136: PPUSH
7137: LD_INT 2
7139: PPUSH
7140: LD_INT 1
7142: PPUSH
7143: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
7147: LD_INT 3
7149: PPUSH
7150: LD_INT 2
7152: PPUSH
7153: LD_INT 1
7155: PPUSH
7156: LD_INT 1
7158: PPUSH
7159: CALL_OW 80
// SetClass ( Dietrich , 1 ) ;
7163: LD_EXP 26
7167: PPUSH
7168: LD_INT 1
7170: PPUSH
7171: CALL_OW 336
// ChangeMissionObjectives ( M4 ) ;
7175: LD_STRING M4
7177: PPUSH
7178: CALL_OW 337
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
7182: LD_ADDR_VAR 0 5
7186: PUSH
7187: LD_INT 22
7189: PUSH
7190: LD_INT 2
7192: PUSH
7193: EMPTY
7194: LIST
7195: LIST
7196: PUSH
7197: LD_INT 21
7199: PUSH
7200: LD_INT 1
7202: PUSH
7203: EMPTY
7204: LIST
7205: LIST
7206: PUSH
7207: LD_INT 2
7209: PUSH
7210: LD_INT 25
7212: PUSH
7213: LD_INT 1
7215: PUSH
7216: EMPTY
7217: LIST
7218: LIST
7219: PUSH
7220: LD_INT 25
7222: PUSH
7223: LD_INT 8
7225: PUSH
7226: EMPTY
7227: LIST
7228: LIST
7229: PUSH
7230: LD_INT 25
7232: PUSH
7233: LD_INT 15
7235: PUSH
7236: EMPTY
7237: LIST
7238: LIST
7239: PUSH
7240: EMPTY
7241: LIST
7242: LIST
7243: LIST
7244: LIST
7245: PUSH
7246: EMPTY
7247: LIST
7248: LIST
7249: LIST
7250: PPUSH
7251: CALL_OW 69
7255: PUSH
7256: LD_EXP 26
7260: PUSH
7261: EMPTY
7262: LIST
7263: DIFF
7264: ST_TO_ADDR
// if IsLive ( Khatam ) then
7265: LD_EXP 14
7269: PPUSH
7270: CALL_OW 300
7274: IFFALSE 7288
// DoNotAttack ( 2 , Khatam ) ;
7276: LD_INT 2
7278: PPUSH
7279: LD_EXP 14
7283: PPUSH
7284: CALL_OW 471
// ComExitBuilding ( arSoldiers ) ;
7288: LD_VAR 0 5
7292: PPUSH
7293: CALL_OW 122
// wait ( 0 0$1 ) ;
7297: LD_INT 35
7299: PPUSH
7300: CALL_OW 67
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
7304: LD_VAR 0 5
7308: PPUSH
7309: LD_INT 84
7311: PPUSH
7312: LD_INT 22
7314: PPUSH
7315: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
7319: LD_VAR 0 5
7323: PPUSH
7324: LD_INT 82
7326: PPUSH
7327: LD_INT 5
7329: PPUSH
7330: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
7334: LD_VAR 0 5
7338: PPUSH
7339: LD_INT 95
7341: PPUSH
7342: LD_INT 12
7344: PPUSH
7345: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
7349: LD_VAR 0 5
7353: PPUSH
7354: LD_INT 102
7356: PPUSH
7357: LD_INT 11
7359: PPUSH
7360: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
7364: LD_VAR 0 5
7368: PPUSH
7369: LD_INT 116
7371: PPUSH
7372: LD_INT 15
7374: PPUSH
7375: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
7379: LD_VAR 0 5
7383: PPUSH
7384: LD_INT 140
7386: PPUSH
7387: LD_INT 25
7389: PPUSH
7390: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
7394: LD_VAR 0 5
7398: PPUSH
7399: LD_INT 160
7401: PPUSH
7402: LD_INT 56
7404: PPUSH
7405: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
7409: LD_VAR 0 5
7413: PPUSH
7414: LD_INT 189
7416: PPUSH
7417: LD_INT 79
7419: PPUSH
7420: CALL_OW 174
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
7424: LD_ADDR_VAR 0 6
7428: PUSH
7429: LD_INT 22
7431: PUSH
7432: LD_INT 2
7434: PUSH
7435: EMPTY
7436: LIST
7437: LIST
7438: PUSH
7439: LD_INT 21
7441: PUSH
7442: LD_INT 1
7444: PUSH
7445: EMPTY
7446: LIST
7447: LIST
7448: PUSH
7449: LD_INT 2
7451: PUSH
7452: LD_INT 25
7454: PUSH
7455: LD_INT 2
7457: PUSH
7458: EMPTY
7459: LIST
7460: LIST
7461: PUSH
7462: LD_INT 25
7464: PUSH
7465: LD_INT 3
7467: PUSH
7468: EMPTY
7469: LIST
7470: LIST
7471: PUSH
7472: LD_INT 25
7474: PUSH
7475: LD_INT 4
7477: PUSH
7478: EMPTY
7479: LIST
7480: LIST
7481: PUSH
7482: LD_INT 25
7484: PUSH
7485: LD_INT 12
7487: PUSH
7488: EMPTY
7489: LIST
7490: LIST
7491: PUSH
7492: LD_INT 25
7494: PUSH
7495: LD_INT 16
7497: PUSH
7498: EMPTY
7499: LIST
7500: LIST
7501: PUSH
7502: EMPTY
7503: LIST
7504: LIST
7505: LIST
7506: LIST
7507: LIST
7508: LIST
7509: PUSH
7510: EMPTY
7511: LIST
7512: LIST
7513: LIST
7514: PPUSH
7515: CALL_OW 69
7519: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
7520: LD_ADDR_VAR 0 6
7524: PUSH
7525: LD_VAR 0 6
7529: PUSH
7530: LD_EXP 26
7534: ADD
7535: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7536: LD_INT 350
7538: PPUSH
7539: CALL_OW 67
// ComExitBuilding ( arCivilian ) ;
7543: LD_VAR 0 6
7547: PPUSH
7548: CALL_OW 122
// wait ( 0 0$1 ) ;
7552: LD_INT 35
7554: PPUSH
7555: CALL_OW 67
// AddComMoveXY ( arCivilian , 81 , 5 ) ;
7559: LD_VAR 0 6
7563: PPUSH
7564: LD_INT 81
7566: PPUSH
7567: LD_INT 5
7569: PPUSH
7570: CALL_OW 171
// AddComMoveXY ( arCivilian , 82 , 5 ) ;
7574: LD_VAR 0 6
7578: PPUSH
7579: LD_INT 82
7581: PPUSH
7582: LD_INT 5
7584: PPUSH
7585: CALL_OW 171
// AddComMoveXY ( arCivilian , 95 , 12 ) ;
7589: LD_VAR 0 6
7593: PPUSH
7594: LD_INT 95
7596: PPUSH
7597: LD_INT 12
7599: PPUSH
7600: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 11 ) ;
7604: LD_VAR 0 6
7608: PPUSH
7609: LD_INT 102
7611: PPUSH
7612: LD_INT 11
7614: PPUSH
7615: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
7619: LD_VAR 0 6
7623: PPUSH
7624: LD_INT 116
7626: PPUSH
7627: LD_INT 15
7629: PPUSH
7630: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
7634: LD_VAR 0 6
7638: PPUSH
7639: LD_INT 140
7641: PPUSH
7642: LD_INT 25
7644: PPUSH
7645: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
7649: LD_VAR 0 6
7653: PPUSH
7654: LD_INT 160
7656: PPUSH
7657: LD_INT 56
7659: PPUSH
7660: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
7664: LD_VAR 0 6
7668: PPUSH
7669: LD_INT 189
7671: PPUSH
7672: LD_INT 79
7674: PPUSH
7675: CALL_OW 171
// arabianAttackersAI = 1 ;
7679: LD_ADDR_EXP 46
7683: PUSH
7684: LD_INT 1
7686: ST_TO_ADDR
// wait ( 0 0$10 ) ;
7687: LD_INT 350
7689: PPUSH
7690: CALL_OW 67
// if IsOk ( Gary ) then
7694: LD_EXP 10
7698: PPUSH
7699: CALL_OW 302
7703: IFFALSE 7717
// Say ( Gary , D8a-Gary-1 ) ;
7705: LD_EXP 10
7709: PPUSH
7710: LD_STRING D8a-Gary-1
7712: PPUSH
7713: CALL_OW 88
// wait ( 0 0$5 ) ;
7717: LD_INT 175
7719: PPUSH
7720: CALL_OW 67
// if IsOK ( Khatam ) then
7724: LD_EXP 14
7728: PPUSH
7729: CALL_OW 302
7733: IFFALSE 8269
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
7735: LD_ADDR_VAR 0 3
7739: PUSH
7740: LD_INT 22
7742: PUSH
7743: LD_INT 1
7745: PUSH
7746: EMPTY
7747: LIST
7748: LIST
7749: PUSH
7750: LD_INT 2
7752: PUSH
7753: LD_INT 25
7755: PUSH
7756: LD_INT 1
7758: PUSH
7759: EMPTY
7760: LIST
7761: LIST
7762: PUSH
7763: LD_INT 25
7765: PUSH
7766: LD_INT 2
7768: PUSH
7769: EMPTY
7770: LIST
7771: LIST
7772: PUSH
7773: LD_INT 25
7775: PUSH
7776: LD_INT 3
7778: PUSH
7779: EMPTY
7780: LIST
7781: LIST
7782: PUSH
7783: LD_INT 25
7785: PUSH
7786: LD_INT 4
7788: PUSH
7789: EMPTY
7790: LIST
7791: LIST
7792: PUSH
7793: LD_INT 25
7795: PUSH
7796: LD_INT 5
7798: PUSH
7799: EMPTY
7800: LIST
7801: LIST
7802: PUSH
7803: LD_INT 25
7805: PUSH
7806: LD_INT 8
7808: PUSH
7809: EMPTY
7810: LIST
7811: LIST
7812: PUSH
7813: EMPTY
7814: LIST
7815: LIST
7816: LIST
7817: LIST
7818: LIST
7819: LIST
7820: LIST
7821: PUSH
7822: EMPTY
7823: LIST
7824: LIST
7825: PPUSH
7826: CALL_OW 69
7830: PUSH
7831: LD_EXP 1
7835: PUSH
7836: LD_EXP 2
7840: PUSH
7841: LD_EXP 3
7845: PUSH
7846: LD_EXP 4
7850: PUSH
7851: LD_EXP 5
7855: PUSH
7856: LD_EXP 6
7860: PUSH
7861: LD_EXP 7
7865: PUSH
7866: LD_EXP 8
7870: PUSH
7871: LD_EXP 9
7875: PUSH
7876: LD_EXP 10
7880: PUSH
7881: LD_EXP 11
7885: PUSH
7886: LD_EXP 12
7890: PUSH
7891: LD_EXP 13
7895: PUSH
7896: LD_EXP 14
7900: PUSH
7901: LD_EXP 15
7905: PUSH
7906: LD_EXP 16
7910: PUSH
7911: LD_EXP 17
7915: PUSH
7916: LD_EXP 19
7920: PUSH
7921: LD_EXP 24
7925: PUSH
7926: EMPTY
7927: LIST
7928: LIST
7929: LIST
7930: LIST
7931: LIST
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: DIFF
7947: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
7948: LD_EXP 14
7952: PPUSH
7953: LD_INT 8
7955: PPUSH
7956: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
7960: LD_EXP 14
7964: PPUSH
7965: CALL_OW 122
// wait ( 0 0$1 ) ;
7969: LD_INT 35
7971: PPUSH
7972: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
7976: LD_EXP 14
7980: PPUSH
7981: CALL_OW 121
// wait ( 0 0$1 ) ;
7985: LD_INT 35
7987: PPUSH
7988: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
7992: LD_EXP 14
7996: PPUSH
7997: LD_INT 7
7999: PPUSH
8000: CALL_OW 113
// if not tmp then
8004: LD_VAR 0 3
8008: NOT
8009: IFFALSE 8013
// exit ;
8011: GO 8269
// DialogueOn ;
8013: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
8017: LD_VAR 0 3
8021: PUSH
8022: LD_INT 1
8024: ARRAY
8025: PPUSH
8026: CALL_OW 258
8030: PUSH
8031: LD_INT 1
8033: EQUAL
8034: IFFALSE 8054
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
8036: LD_VAR 0 3
8040: PUSH
8041: LD_INT 1
8043: ARRAY
8044: PPUSH
8045: LD_STRING D8b-Sol1-1
8047: PPUSH
8048: CALL_OW 88
8052: GO 8070
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
8054: LD_VAR 0 3
8058: PUSH
8059: LD_INT 1
8061: ARRAY
8062: PPUSH
8063: LD_STRING D8b-FSol1-1
8065: PPUSH
8066: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
8070: LD_EXP 14
8074: PPUSH
8075: LD_STRING D8b-Khat-1
8077: PPUSH
8078: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8082: LD_VAR 0 3
8086: PUSH
8087: LD_INT 1
8089: ARRAY
8090: PPUSH
8091: CALL_OW 258
8095: PUSH
8096: LD_INT 1
8098: EQUAL
8099: IFFALSE 8119
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
8101: LD_VAR 0 3
8105: PUSH
8106: LD_INT 1
8108: ARRAY
8109: PPUSH
8110: LD_STRING D8b-Sol1-2
8112: PPUSH
8113: CALL_OW 88
8117: GO 8135
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
8119: LD_VAR 0 3
8123: PUSH
8124: LD_INT 1
8126: ARRAY
8127: PPUSH
8128: LD_STRING D8b-FSol1-2
8130: PPUSH
8131: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
8135: LD_EXP 14
8139: PPUSH
8140: LD_STRING D8b-Khat-2
8142: PPUSH
8143: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8147: LD_VAR 0 3
8151: PUSH
8152: LD_INT 1
8154: ARRAY
8155: PPUSH
8156: CALL_OW 258
8160: PUSH
8161: LD_INT 1
8163: EQUAL
8164: IFFALSE 8184
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
8166: LD_VAR 0 3
8170: PUSH
8171: LD_INT 1
8173: ARRAY
8174: PPUSH
8175: LD_STRING D8b-Sol1-3
8177: PPUSH
8178: CALL_OW 88
8182: GO 8200
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
8184: LD_VAR 0 3
8188: PUSH
8189: LD_INT 1
8191: ARRAY
8192: PPUSH
8193: LD_STRING D8b-FSol1-3
8195: PPUSH
8196: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
8200: LD_EXP 14
8204: PPUSH
8205: LD_STRING D8b-Khat-3
8207: PPUSH
8208: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
8212: LD_VAR 0 3
8216: PUSH
8217: LD_INT 1
8219: ARRAY
8220: PPUSH
8221: CALL_OW 258
8225: PUSH
8226: LD_INT 1
8228: EQUAL
8229: IFFALSE 8249
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
8231: LD_VAR 0 3
8235: PUSH
8236: LD_INT 1
8238: ARRAY
8239: PPUSH
8240: LD_STRING D8b-Sol1-4
8242: PPUSH
8243: CALL_OW 88
8247: GO 8265
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
8249: LD_VAR 0 3
8253: PUSH
8254: LD_INT 1
8256: ARRAY
8257: PPUSH
8258: LD_STRING D8b-FSol1-4
8260: PPUSH
8261: CALL_OW 88
// DialogueOff ;
8265: CALL_OW 7
// end ; end ;
8269: LD_VAR 0 1
8273: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
8274: LD_INT 7
8276: PPUSH
8277: LD_INT 22
8279: PUSH
8280: LD_INT 2
8282: PUSH
8283: EMPTY
8284: LIST
8285: LIST
8286: PPUSH
8287: CALL_OW 70
8291: PUSH
8292: LD_INT 0
8294: GREATER
8295: PUSH
8296: LD_EXP 14
8300: PPUSH
8301: LD_INT 7
8303: PPUSH
8304: CALL_OW 308
8308: OR
8309: IFFALSE 8516
8311: GO 8313
8313: DISABLE
8314: LD_INT 0
8316: PPUSH
// begin enable ;
8317: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
8318: LD_ADDR_VAR 0 1
8322: PUSH
8323: LD_INT 7
8325: PPUSH
8326: LD_INT 22
8328: PUSH
8329: LD_INT 2
8331: PUSH
8332: EMPTY
8333: LIST
8334: LIST
8335: PPUSH
8336: CALL_OW 70
8340: PUSH
8341: FOR_IN
8342: IFFALSE 8483
// begin if GetClass ( i ) = 4 then
8344: LD_VAR 0 1
8348: PPUSH
8349: CALL_OW 257
8353: PUSH
8354: LD_INT 4
8356: EQUAL
8357: IFFALSE 8369
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
8359: LD_INT 1
8361: PPUSH
8362: LD_STRING 10_ScientistsEscape_1
8364: PPUSH
8365: CALL_OW 39
// if i = Dietrich then
8369: LD_VAR 0 1
8373: PUSH
8374: LD_EXP 26
8378: EQUAL
8379: IFFALSE 8389
// GensherStatus = 1 ;
8381: LD_ADDR_EXP 51
8385: PUSH
8386: LD_INT 1
8388: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
8389: LD_VAR 0 1
8393: PPUSH
8394: CALL_OW 257
8398: PUSH
8399: LD_INT 1
8401: EQUAL
8402: PUSH
8403: LD_VAR 0 1
8407: PPUSH
8408: CALL_OW 257
8412: PUSH
8413: LD_INT 2
8415: EQUAL
8416: OR
8417: PUSH
8418: LD_VAR 0 1
8422: PPUSH
8423: CALL_OW 257
8427: PUSH
8428: LD_INT 3
8430: EQUAL
8431: OR
8432: PUSH
8433: LD_VAR 0 1
8437: PPUSH
8438: CALL_OW 257
8442: PUSH
8443: LD_INT 4
8445: EQUAL
8446: OR
8447: PUSH
8448: LD_VAR 0 1
8452: PPUSH
8453: CALL_OW 257
8457: PUSH
8458: LD_INT 8
8460: EQUAL
8461: OR
8462: IFFALSE 8472
// arabianEscape = 1 ;
8464: LD_ADDR_EXP 47
8468: PUSH
8469: LD_INT 1
8471: ST_TO_ADDR
// RemoveUnit ( i ) ;
8472: LD_VAR 0 1
8476: PPUSH
8477: CALL_OW 64
// end ;
8481: GO 8341
8483: POP
8484: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
8485: LD_EXP 14
8489: PPUSH
8490: LD_INT 7
8492: PPUSH
8493: CALL_OW 308
8497: IFFALSE 8516
// begin KhatamStatus = 1 ;
8499: LD_ADDR_EXP 52
8503: PUSH
8504: LD_INT 1
8506: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
8507: LD_EXP 14
8511: PPUSH
8512: CALL_OW 64
// end ; end ;
8516: PPOPN 1
8518: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
8519: LD_INT 22
8521: PUSH
8522: LD_INT 2
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: PUSH
8529: LD_INT 21
8531: PUSH
8532: LD_INT 1
8534: PUSH
8535: EMPTY
8536: LIST
8537: LIST
8538: PUSH
8539: EMPTY
8540: LIST
8541: LIST
8542: PPUSH
8543: CALL_OW 69
8547: PUSH
8548: LD_INT 0
8550: EQUAL
8551: PUSH
8552: LD_INT 22
8554: PUSH
8555: LD_INT 4
8557: PUSH
8558: EMPTY
8559: LIST
8560: LIST
8561: PUSH
8562: LD_INT 21
8564: PUSH
8565: LD_INT 1
8567: PUSH
8568: EMPTY
8569: LIST
8570: LIST
8571: PUSH
8572: EMPTY
8573: LIST
8574: LIST
8575: PPUSH
8576: CALL_OW 69
8580: PUSH
8581: LD_INT 0
8583: EQUAL
8584: AND
8585: IFFALSE 8598
8587: GO 8589
8589: DISABLE
// arabianDefeated = 1 ;
8590: LD_ADDR_EXP 48
8594: PUSH
8595: LD_INT 1
8597: ST_TO_ADDR
8598: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
8599: LD_INT 54
8601: PPUSH
8602: LD_INT 1
8604: PPUSH
8605: CALL_OW 321
8609: PUSH
8610: LD_INT 2
8612: EQUAL
8613: PUSH
8614: LD_INT 55
8616: PPUSH
8617: LD_INT 1
8619: PPUSH
8620: CALL_OW 321
8624: PUSH
8625: LD_INT 2
8627: EQUAL
8628: AND
8629: PUSH
8630: LD_INT 21
8632: PPUSH
8633: LD_INT 1
8635: PPUSH
8636: CALL_OW 321
8640: PUSH
8641: LD_INT 2
8643: EQUAL
8644: AND
8645: PUSH
8646: LD_INT 22
8648: PPUSH
8649: LD_INT 1
8651: PPUSH
8652: CALL_OW 321
8656: PUSH
8657: LD_INT 2
8659: EQUAL
8660: AND
8661: PUSH
8662: LD_INT 12
8664: PPUSH
8665: LD_INT 1
8667: PPUSH
8668: CALL_OW 321
8672: PUSH
8673: LD_INT 2
8675: EQUAL
8676: AND
8677: PUSH
8678: LD_INT 32
8680: PPUSH
8681: LD_INT 1
8683: PPUSH
8684: CALL_OW 321
8688: PUSH
8689: LD_INT 2
8691: EQUAL
8692: AND
8693: PUSH
8694: LD_EXP 59
8698: PUSH
8699: LD_INT 0
8701: EQUAL
8702: AND
8703: PUSH
8704: LD_EXP 49
8708: PUSH
8709: LD_INT 0
8711: EQUAL
8712: AND
8713: PUSH
8714: LD_OWVAR 1
8718: PUSH
8719: LD_INT 31500
8721: GREATEREQUAL
8722: AND
8723: IFFALSE 8740
8725: GO 8727
8727: DISABLE
// begin arabianTrait = 1 ;
8728: LD_ADDR_EXP 49
8732: PUSH
8733: LD_INT 1
8735: ST_TO_ADDR
// PrepareArabianTrait ;
8736: CALL 6771 0 0
// end ;
8740: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
8741: LD_EXP 29
8745: PUSH
8746: LD_STRING 02_mikhailStatus_1
8748: PPUSH
8749: LD_INT 0
8751: PPUSH
8752: CALL_OW 30
8756: PUSH
8757: LD_INT 1
8759: EQUAL
8760: AND
8761: PUSH
8762: LD_INT 22
8764: PUSH
8765: LD_INT 5
8767: PUSH
8768: EMPTY
8769: LIST
8770: LIST
8771: PPUSH
8772: CALL_OW 69
8776: PUSH
8777: LD_INT 0
8779: EQUAL
8780: AND
8781: PUSH
8782: LD_INT 22
8784: PUSH
8785: LD_INT 2
8787: PUSH
8788: EMPTY
8789: LIST
8790: LIST
8791: PUSH
8792: LD_INT 21
8794: PUSH
8795: LD_INT 1
8797: PUSH
8798: EMPTY
8799: LIST
8800: LIST
8801: PUSH
8802: EMPTY
8803: LIST
8804: LIST
8805: PPUSH
8806: CALL_OW 69
8810: PUSH
8811: LD_INT 0
8813: EQUAL
8814: PUSH
8815: LD_EXP 49
8819: PUSH
8820: LD_INT 0
8822: EQUAL
8823: OR
8824: AND
8825: IFFALSE 8834
8827: GO 8829
8829: DISABLE
// PrepareCornell ;
8830: CALL 2552 0 0
8834: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
8835: LD_INT 22
8837: PUSH
8838: LD_INT 1
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: PPUSH
8845: CALL_OW 69
8849: PPUSH
8850: LD_EXP 19
8854: PPUSH
8855: CALL_OW 74
8859: PPUSH
8860: LD_EXP 19
8864: PPUSH
8865: CALL_OW 296
8869: PUSH
8870: LD_INT 9
8872: LESS
8873: IFFALSE 9094
8875: GO 8877
8877: DISABLE
// begin InGameOn ;
8878: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
8882: LD_EXP 19
8886: PPUSH
8887: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
8891: LD_EXP 19
8895: PPUSH
8896: LD_STRING D7-Corn-1
8898: PPUSH
8899: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
8903: LD_INT 22
8905: PUSH
8906: LD_INT 1
8908: PUSH
8909: EMPTY
8910: LIST
8911: LIST
8912: PUSH
8913: LD_INT 2
8915: PUSH
8916: LD_INT 25
8918: PUSH
8919: LD_INT 1
8921: PUSH
8922: EMPTY
8923: LIST
8924: LIST
8925: PUSH
8926: LD_INT 25
8928: PUSH
8929: LD_INT 2
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: PUSH
8936: LD_INT 25
8938: PUSH
8939: LD_INT 3
8941: PUSH
8942: EMPTY
8943: LIST
8944: LIST
8945: PUSH
8946: LD_INT 25
8948: PUSH
8949: LD_INT 4
8951: PUSH
8952: EMPTY
8953: LIST
8954: LIST
8955: PUSH
8956: LD_INT 25
8958: PUSH
8959: LD_INT 5
8961: PUSH
8962: EMPTY
8963: LIST
8964: LIST
8965: PUSH
8966: EMPTY
8967: LIST
8968: LIST
8969: LIST
8970: LIST
8971: LIST
8972: LIST
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PPUSH
8978: CALL_OW 69
8982: PPUSH
8983: LD_STRING D7-Sol1-1
8985: PPUSH
8986: LD_STRING D7-FSol1-1
8988: PPUSH
8989: CALL 9641 0 3
// CenterNowOnUnits ( Cornell ) ;
8993: LD_EXP 19
8997: PPUSH
8998: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
9002: LD_EXP 19
9006: PPUSH
9007: LD_STRING D7-Corn-2
9009: PPUSH
9010: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
9014: LD_EXP 1
9018: PPUSH
9019: LD_STRING D7-JMM-2
9021: PPUSH
9022: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
9026: LD_EXP 19
9030: PPUSH
9031: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
9035: LD_EXP 19
9039: PPUSH
9040: LD_STRING D7-Corn-3
9042: PPUSH
9043: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
9047: LD_EXP 19
9051: PPUSH
9052: LD_INT 250
9054: PPUSH
9055: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
9059: LD_EXP 19
9063: PPUSH
9064: LD_INT 1
9066: PPUSH
9067: CALL_OW 235
// wait ( 0 0$1 ) ;
9071: LD_INT 35
9073: PPUSH
9074: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
9078: LD_EXP 1
9082: PPUSH
9083: LD_STRING D7-JMM-3
9085: PPUSH
9086: CALL_OW 88
// InGameOff ;
9090: CALL_OW 9
// end ;
9094: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
9095: LD_EXP 19
9099: PPUSH
9100: CALL_OW 255
9104: PUSH
9105: LD_INT 1
9107: EQUAL
9108: PUSH
9109: LD_EXP 19
9113: PPUSH
9114: CALL_OW 256
9118: PUSH
9119: LD_INT 350
9121: GREATER
9122: AND
9123: IFFALSE 9316
9125: GO 9127
9127: DISABLE
// begin DialogueOn ;
9128: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
9132: LD_EXP 1
9136: PPUSH
9137: LD_STRING D7a-JMM-1
9139: PPUSH
9140: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
9144: LD_EXP 19
9148: PPUSH
9149: LD_STRING D7a-Corn-1
9151: PPUSH
9152: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
9156: LD_EXP 1
9160: PPUSH
9161: LD_STRING D7a-JMM-2
9163: PPUSH
9164: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
9168: LD_EXP 19
9172: PPUSH
9173: LD_STRING D7a-Corn-2
9175: PPUSH
9176: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
9180: LD_EXP 1
9184: PPUSH
9185: LD_STRING D7a-JMM-3
9187: PPUSH
9188: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
9192: LD_EXP 19
9196: PPUSH
9197: LD_STRING D7a-Corn-3
9199: PPUSH
9200: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
9204: LD_EXP 1
9208: PPUSH
9209: LD_STRING D7a-JMM-4
9211: PPUSH
9212: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
9216: LD_EXP 19
9220: PPUSH
9221: LD_STRING D7a-Corn-4
9223: PPUSH
9224: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
9228: LD_EXP 1
9232: PPUSH
9233: LD_STRING D7a-JMM-5
9235: PPUSH
9236: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
9240: LD_EXP 19
9244: PPUSH
9245: LD_STRING D7a-Corn-5
9247: PPUSH
9248: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
9252: LD_EXP 1
9256: PPUSH
9257: LD_STRING D7a-JMM-6
9259: PPUSH
9260: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
9264: LD_EXP 19
9268: PPUSH
9269: LD_STRING D7a-Corn-6
9271: PPUSH
9272: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
9276: LD_EXP 1
9280: PPUSH
9281: LD_STRING D7a-JMM-7
9283: PPUSH
9284: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
9288: LD_EXP 19
9292: PPUSH
9293: LD_STRING D7a-Corn-7
9295: PPUSH
9296: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
9300: LD_EXP 1
9304: PPUSH
9305: LD_STRING D7a-JMM-8
9307: PPUSH
9308: CALL_OW 88
// DialogueOff ;
9312: CALL_OW 7
// end ;
9316: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
9317: LD_EXP 58
9321: PUSH
9322: LD_EXP 1
9326: PPUSH
9327: CALL_OW 302
9331: PUSH
9332: LD_EXP 5
9336: PPUSH
9337: CALL_OW 302
9341: OR
9342: AND
9343: IFFALSE 9433
9345: GO 9347
9347: DISABLE
// begin Wait ( 0 0$2 ) ;
9348: LD_INT 70
9350: PPUSH
9351: CALL_OW 67
// DialogueOn ;
9355: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
9359: LD_EXP 58
9363: PUSH
9364: LD_INT 1
9366: ARRAY
9367: PPUSH
9368: LD_EXP 58
9372: PUSH
9373: LD_INT 2
9375: ARRAY
9376: PPUSH
9377: CALL_OW 86
// if IsOk ( Cyrus ) then
9381: LD_EXP 5
9385: PPUSH
9386: CALL_OW 302
9390: IFFALSE 9406
// Say ( Cyrus , D10-Cyrus-1 ) else
9392: LD_EXP 5
9396: PPUSH
9397: LD_STRING D10-Cyrus-1
9399: PPUSH
9400: CALL_OW 88
9404: GO 9429
// if IsOk ( JMM ) then
9406: LD_EXP 1
9410: PPUSH
9411: CALL_OW 302
9415: IFFALSE 9429
// Say ( JMM , D10-JMM-1 ) ;
9417: LD_EXP 1
9421: PPUSH
9422: LD_STRING D10-JMM-1
9424: PPUSH
9425: CALL_OW 88
// DialogueOff ;
9429: CALL_OW 7
// end ;
9433: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
9434: LD_INT 12
9436: PPUSH
9437: LD_INT 1
9439: PPUSH
9440: CALL_OW 321
9444: PUSH
9445: LD_INT 2
9447: EQUAL
9448: IFFALSE 9460
9450: GO 9452
9452: DISABLE
// ChangeMissionObjectives ( M2b ) ;
9453: LD_STRING M2b
9455: PPUSH
9456: CALL_OW 337
9460: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
9461: LD_INT 32
9463: PPUSH
9464: LD_INT 1
9466: PPUSH
9467: CALL_OW 321
9471: PUSH
9472: LD_INT 2
9474: EQUAL
9475: IFFALSE 9487
9477: GO 9479
9479: DISABLE
// ChangeMissionObjectives ( M2c ) ;
9480: LD_STRING M2c
9482: PPUSH
9483: CALL_OW 337
9487: END
// every 0 0$1 trigger arabianDefeated = 1 do
9488: LD_EXP 48
9492: PUSH
9493: LD_INT 1
9495: EQUAL
9496: IFFALSE 9508
9498: GO 9500
9500: DISABLE
// ChangeMissionObjectives ( M4a ) ;
9501: LD_STRING M4a
9503: PPUSH
9504: CALL_OW 337
9508: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
9509: LD_INT 54
9511: PPUSH
9512: LD_INT 1
9514: PPUSH
9515: CALL_OW 321
9519: PUSH
9520: LD_INT 2
9522: EQUAL
9523: PUSH
9524: LD_INT 55
9526: PPUSH
9527: LD_INT 1
9529: PPUSH
9530: CALL_OW 321
9534: PUSH
9535: LD_INT 2
9537: EQUAL
9538: AND
9539: PUSH
9540: LD_INT 21
9542: PPUSH
9543: LD_INT 1
9545: PPUSH
9546: CALL_OW 321
9550: PUSH
9551: LD_INT 2
9553: EQUAL
9554: AND
9555: PUSH
9556: LD_INT 22
9558: PPUSH
9559: LD_INT 1
9561: PPUSH
9562: CALL_OW 321
9566: PUSH
9567: LD_INT 2
9569: EQUAL
9570: AND
9571: IFFALSE 9583
9573: GO 9575
9575: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
9576: LD_STRING M2a
9578: PPUSH
9579: CALL_OW 337
9583: END
// export function PrepareUnit ( ident , exist_mode ) ; var unit ; begin
9584: LD_INT 0
9586: PPUSH
9587: PPUSH
// if exist_mode then
9588: LD_VAR 0 2
9592: IFFALSE 9611
// unit := CreateCharacter ( ident ) else
9594: LD_ADDR_VAR 0 4
9598: PUSH
9599: LD_VAR 0 1
9603: PPUSH
9604: CALL_OW 34
9608: ST_TO_ADDR
9609: GO 9626
// unit := NewCharacter ( ident ) ;
9611: LD_ADDR_VAR 0 4
9615: PUSH
9616: LD_VAR 0 1
9620: PPUSH
9621: CALL_OW 25
9625: ST_TO_ADDR
// result := unit ;
9626: LD_ADDR_VAR 0 3
9630: PUSH
9631: LD_VAR 0 4
9635: ST_TO_ADDR
// end ;
9636: LD_VAR 0 3
9640: RET
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
9641: LD_INT 0
9643: PPUSH
9644: PPUSH
9645: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
9646: LD_ADDR_VAR 0 1
9650: PUSH
9651: LD_VAR 0 1
9655: PUSH
9656: LD_EXP 1
9660: PUSH
9661: LD_EXP 2
9665: PUSH
9666: LD_EXP 3
9670: PUSH
9671: LD_EXP 4
9675: PUSH
9676: LD_EXP 5
9680: PUSH
9681: LD_EXP 6
9685: PUSH
9686: LD_EXP 7
9690: PUSH
9691: LD_EXP 8
9695: PUSH
9696: LD_EXP 9
9700: PUSH
9701: LD_EXP 10
9705: PUSH
9706: LD_EXP 11
9710: PUSH
9711: LD_EXP 12
9715: PUSH
9716: LD_EXP 13
9720: PUSH
9721: LD_EXP 14
9725: PUSH
9726: LD_EXP 15
9730: PUSH
9731: LD_EXP 16
9735: PUSH
9736: LD_EXP 17
9740: PUSH
9741: LD_EXP 18
9745: PUSH
9746: LD_EXP 19
9750: PUSH
9751: LD_EXP 24
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: DIFF
9778: ST_TO_ADDR
// if not characters then
9779: LD_VAR 0 1
9783: NOT
9784: IFFALSE 9788
// exit ;
9786: GO 9934
// rnd = rand ( 1 , characters ) ;
9788: LD_ADDR_VAR 0 6
9792: PUSH
9793: LD_INT 1
9795: PPUSH
9796: LD_VAR 0 1
9800: PPUSH
9801: CALL_OW 12
9805: ST_TO_ADDR
// for i = 1 to characters do
9806: LD_ADDR_VAR 0 5
9810: PUSH
9811: DOUBLE
9812: LD_INT 1
9814: DEC
9815: ST_TO_ADDR
9816: LD_VAR 0 1
9820: PUSH
9821: FOR_TO
9822: IFFALSE 9932
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
9824: LD_VAR 0 5
9828: PUSH
9829: LD_VAR 0 6
9833: EQUAL
9834: PUSH
9835: LD_VAR 0 1
9839: PUSH
9840: LD_VAR 0 5
9844: ARRAY
9845: PPUSH
9846: CALL_OW 258
9850: PUSH
9851: LD_INT 1
9853: EQUAL
9854: AND
9855: IFFALSE 9877
// Say ( characters [ i ] , dialogMID ) ;
9857: LD_VAR 0 1
9861: PUSH
9862: LD_VAR 0 5
9866: ARRAY
9867: PPUSH
9868: LD_VAR 0 2
9872: PPUSH
9873: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
9877: LD_VAR 0 5
9881: PUSH
9882: LD_VAR 0 6
9886: EQUAL
9887: PUSH
9888: LD_VAR 0 1
9892: PUSH
9893: LD_VAR 0 5
9897: ARRAY
9898: PPUSH
9899: CALL_OW 258
9903: PUSH
9904: LD_INT 2
9906: EQUAL
9907: AND
9908: IFFALSE 9930
// Say ( characters [ i ] , dialogFID ) ;
9910: LD_VAR 0 1
9914: PUSH
9915: LD_VAR 0 5
9919: ARRAY
9920: PPUSH
9921: LD_VAR 0 3
9925: PPUSH
9926: CALL_OW 88
// end ;
9930: GO 9821
9932: POP
9933: POP
// end ;
9934: LD_VAR 0 4
9938: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
9939: LD_INT 0
9941: PPUSH
9942: PPUSH
// for i in charactersList do
9943: LD_ADDR_VAR 0 4
9947: PUSH
9948: LD_VAR 0 1
9952: PUSH
9953: FOR_IN
9954: IFFALSE 9972
// SaveCharacters ( i , ident ) ;
9956: LD_VAR 0 4
9960: PPUSH
9961: LD_VAR 0 2
9965: PPUSH
9966: CALL_OW 38
9970: GO 9953
9972: POP
9973: POP
// end ;
9974: LD_VAR 0 3
9978: RET
// export function PrepareDifficulty ; begin
9979: LD_INT 0
9981: PPUSH
// if difficulty = 1 then
9982: LD_OWVAR 67
9986: PUSH
9987: LD_INT 1
9989: EQUAL
9990: IFFALSE 10034
// begin RuSolMinLevel = 3 ;
9992: LD_ADDR_EXP 36
9996: PUSH
9997: LD_INT 3
9999: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
10000: LD_ADDR_EXP 37
10004: PUSH
10005: LD_INT 5
10007: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10008: LD_INT 51
10010: PPUSH
10011: LD_INT 6
10013: PPUSH
10014: LD_INT 2
10016: PPUSH
10017: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10021: LD_INT 51
10023: PPUSH
10024: LD_INT 5
10026: PPUSH
10027: LD_INT 2
10029: PPUSH
10030: CALL_OW 322
// end ; if difficulty = 2 then
10034: LD_OWVAR 67
10038: PUSH
10039: LD_INT 2
10041: EQUAL
10042: IFFALSE 10138
// begin RuSolMinLevel = 5 ;
10044: LD_ADDR_EXP 36
10048: PUSH
10049: LD_INT 5
10051: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
10052: LD_ADDR_EXP 37
10056: PUSH
10057: LD_INT 7
10059: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10060: LD_INT 51
10062: PPUSH
10063: LD_INT 6
10065: PPUSH
10066: LD_INT 2
10068: PPUSH
10069: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10073: LD_INT 57
10075: PPUSH
10076: LD_INT 6
10078: PPUSH
10079: LD_INT 2
10081: PPUSH
10082: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10086: LD_INT 63
10088: PPUSH
10089: LD_INT 6
10091: PPUSH
10092: LD_INT 2
10094: PPUSH
10095: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10099: LD_INT 51
10101: PPUSH
10102: LD_INT 5
10104: PPUSH
10105: LD_INT 2
10107: PPUSH
10108: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
10112: LD_INT 5
10114: PPUSH
10115: LD_INT 2
10117: PPUSH
10118: LD_INT 2
10120: PPUSH
10121: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
10125: LD_INT 5
10127: PPUSH
10128: LD_INT 5
10130: PPUSH
10131: LD_INT 2
10133: PPUSH
10134: CALL_OW 322
// end ; if difficulty = 3 then
10138: LD_OWVAR 67
10142: PUSH
10143: LD_INT 3
10145: EQUAL
10146: IFFALSE 10294
// begin RuSolMinLevel = 6 ;
10148: LD_ADDR_EXP 36
10152: PUSH
10153: LD_INT 6
10155: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
10156: LD_ADDR_EXP 37
10160: PUSH
10161: LD_INT 8
10163: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
10164: LD_INT 51
10166: PPUSH
10167: LD_INT 6
10169: PPUSH
10170: LD_INT 2
10172: PPUSH
10173: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
10177: LD_INT 57
10179: PPUSH
10180: LD_INT 6
10182: PPUSH
10183: LD_INT 2
10185: PPUSH
10186: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
10190: LD_INT 52
10192: PPUSH
10193: LD_INT 6
10195: PPUSH
10196: LD_INT 2
10198: PPUSH
10199: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
10203: LD_INT 58
10205: PPUSH
10206: LD_INT 6
10208: PPUSH
10209: LD_INT 2
10211: PPUSH
10212: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
10216: LD_INT 63
10218: PPUSH
10219: LD_INT 6
10221: PPUSH
10222: LD_INT 2
10224: PPUSH
10225: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
10229: LD_INT 64
10231: PPUSH
10232: LD_INT 6
10234: PPUSH
10235: LD_INT 2
10237: PPUSH
10238: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
10242: LD_INT 51
10244: PPUSH
10245: LD_INT 5
10247: PPUSH
10248: LD_INT 2
10250: PPUSH
10251: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
10255: LD_INT 52
10257: PPUSH
10258: LD_INT 5
10260: PPUSH
10261: LD_INT 2
10263: PPUSH
10264: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
10268: LD_INT 66
10270: PPUSH
10271: LD_INT 2
10273: PPUSH
10274: LD_INT 2
10276: PPUSH
10277: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
10281: LD_INT 66
10283: PPUSH
10284: LD_INT 5
10286: PPUSH
10287: LD_INT 2
10289: PPUSH
10290: CALL_OW 322
// end ; end ;
10294: LD_VAR 0 1
10298: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
10299: LD_INT 0
10301: PPUSH
10302: PPUSH
10303: PPUSH
10304: PPUSH
10305: PPUSH
10306: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
10307: LD_ADDR_VAR 0 7
10311: PUSH
10312: LD_INT 43
10314: PUSH
10315: LD_INT 68
10317: PUSH
10318: EMPTY
10319: LIST
10320: LIST
10321: PUSH
10322: LD_INT 43
10324: PUSH
10325: LD_INT 79
10327: PUSH
10328: EMPTY
10329: LIST
10330: LIST
10331: PUSH
10332: LD_INT 99
10334: PUSH
10335: LD_INT 114
10337: PUSH
10338: EMPTY
10339: LIST
10340: LIST
10341: PUSH
10342: LD_INT 103
10344: PUSH
10345: LD_INT 114
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: PUSH
10352: LD_INT 156
10354: PUSH
10355: LD_INT 92
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: PUSH
10362: LD_INT 152
10364: PUSH
10365: LD_INT 85
10367: PUSH
10368: EMPTY
10369: LIST
10370: LIST
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: ST_TO_ADDR
// for i in sources do
10380: LD_ADDR_VAR 0 3
10384: PUSH
10385: LD_VAR 0 7
10389: PUSH
10390: FOR_IN
10391: IFFALSE 10420
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
10393: LD_VAR 0 3
10397: PUSH
10398: LD_INT 1
10400: ARRAY
10401: PPUSH
10402: LD_VAR 0 3
10406: PUSH
10407: LD_INT 2
10409: ARRAY
10410: PPUSH
10411: LD_INT 3
10413: PPUSH
10414: CALL_OW 441
10418: GO 10390
10420: POP
10421: POP
// case position of 1 :
10422: LD_VAR 0 1
10426: PUSH
10427: LD_INT 1
10429: DOUBLE
10430: EQUAL
10431: IFTRUE 10435
10433: GO 10446
10435: POP
// area := westConv ; 2 :
10436: LD_ADDR_VAR 0 6
10440: PUSH
10441: LD_INT 20
10443: ST_TO_ADDR
10444: GO 10485
10446: LD_INT 2
10448: DOUBLE
10449: EQUAL
10450: IFTRUE 10454
10452: GO 10465
10454: POP
// area := midConv ; 3 :
10455: LD_ADDR_VAR 0 6
10459: PUSH
10460: LD_INT 21
10462: ST_TO_ADDR
10463: GO 10485
10465: LD_INT 3
10467: DOUBLE
10468: EQUAL
10469: IFTRUE 10473
10471: GO 10484
10473: POP
// area := eastConv ; end ;
10474: LD_ADDR_VAR 0 6
10478: PUSH
10479: LD_INT 22
10481: ST_TO_ADDR
10482: GO 10485
10484: POP
// area := AreaToList ( area , 0 ) ;
10485: LD_ADDR_VAR 0 6
10489: PUSH
10490: LD_VAR 0 6
10494: PPUSH
10495: LD_INT 0
10497: PPUSH
10498: CALL_OW 517
10502: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
10503: LD_ADDR_VAR 0 3
10507: PUSH
10508: DOUBLE
10509: LD_INT 1
10511: DEC
10512: ST_TO_ADDR
10513: LD_VAR 0 6
10517: PUSH
10518: LD_INT 1
10520: ARRAY
10521: PUSH
10522: FOR_TO
10523: IFFALSE 10604
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
10525: LD_VAR 0 6
10529: PUSH
10530: LD_INT 1
10532: ARRAY
10533: PUSH
10534: LD_VAR 0 3
10538: ARRAY
10539: PPUSH
10540: LD_VAR 0 6
10544: PUSH
10545: LD_INT 2
10547: ARRAY
10548: PUSH
10549: LD_VAR 0 3
10553: ARRAY
10554: PPUSH
10555: LD_INT 1
10557: PPUSH
10558: LD_INT 1
10560: PPUSH
10561: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
10565: LD_VAR 0 6
10569: PUSH
10570: LD_INT 1
10572: ARRAY
10573: PUSH
10574: LD_VAR 0 3
10578: ARRAY
10579: PPUSH
10580: LD_VAR 0 6
10584: PUSH
10585: LD_INT 2
10587: ARRAY
10588: PUSH
10589: LD_VAR 0 3
10593: ARRAY
10594: PPUSH
10595: LD_INT 1
10597: PPUSH
10598: CALL_OW 331
// end ;
10602: GO 10522
10604: POP
10605: POP
// ruPossition = position ;
10606: LD_ADDR_EXP 41
10610: PUSH
10611: LD_VAR 0 1
10615: ST_TO_ADDR
// if position = 1 then
10616: LD_VAR 0 1
10620: PUSH
10621: LD_INT 1
10623: EQUAL
10624: IFFALSE 11372
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
10626: LD_ADDR_VAR 0 4
10630: PUSH
10631: LD_INT 22
10633: PUSH
10634: LD_INT 3
10636: PUSH
10637: EMPTY
10638: LIST
10639: LIST
10640: PUSH
10641: LD_INT 25
10643: PUSH
10644: LD_INT 2
10646: PUSH
10647: EMPTY
10648: LIST
10649: LIST
10650: PUSH
10651: EMPTY
10652: LIST
10653: LIST
10654: PPUSH
10655: CALL_OW 69
10659: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
10660: LD_ADDR_VAR 0 5
10664: PUSH
10665: LD_INT 0
10667: PUSH
10668: LD_INT 49
10670: PUSH
10671: LD_INT 74
10673: PUSH
10674: LD_INT 3
10676: PUSH
10677: EMPTY
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: PUSH
10683: LD_INT 4
10685: PUSH
10686: LD_INT 73
10688: PUSH
10689: LD_INT 88
10691: PUSH
10692: LD_INT 5
10694: PUSH
10695: EMPTY
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: PUSH
10701: LD_INT 4
10703: PUSH
10704: LD_INT 56
10706: PUSH
10707: LD_INT 62
10709: PUSH
10710: LD_INT 3
10712: PUSH
10713: EMPTY
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: PUSH
10719: LD_INT 29
10721: PUSH
10722: LD_INT 43
10724: PUSH
10725: LD_INT 68
10727: PUSH
10728: LD_INT 2
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: PUSH
10737: LD_INT 30
10739: PUSH
10740: LD_INT 43
10742: PUSH
10743: LD_INT 79
10745: PUSH
10746: LD_INT 5
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: PUSH
10755: LD_INT 28
10757: PUSH
10758: LD_INT 60
10760: PUSH
10761: LD_INT 75
10763: PUSH
10764: LD_INT 1
10766: PUSH
10767: EMPTY
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: PUSH
10773: LD_INT 2
10775: PUSH
10776: LD_INT 50
10778: PUSH
10779: LD_INT 87
10781: PUSH
10782: LD_INT 1
10784: PUSH
10785: EMPTY
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: PUSH
10791: LD_INT 28
10793: PUSH
10794: LD_INT 45
10796: PUSH
10797: LD_INT 67
10799: PUSH
10800: LD_INT 2
10802: PUSH
10803: EMPTY
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: PUSH
10809: LD_INT 17
10811: PUSH
10812: LD_INT 47
10814: PUSH
10815: LD_INT 84
10817: PUSH
10818: LD_INT 2
10820: PUSH
10821: EMPTY
10822: LIST
10823: LIST
10824: LIST
10825: LIST
10826: PUSH
10827: LD_INT 18
10829: PUSH
10830: LD_INT 46
10832: PUSH
10833: LD_INT 87
10835: PUSH
10836: LD_INT 1
10838: PUSH
10839: EMPTY
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: PUSH
10845: LD_INT 28
10847: PUSH
10848: LD_INT 41
10850: PUSH
10851: LD_INT 64
10853: PUSH
10854: LD_INT 5
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: PUSH
10863: LD_INT 32
10865: PUSH
10866: LD_INT 75
10868: PUSH
10869: LD_INT 76
10871: PUSH
10872: LD_INT 5
10874: PUSH
10875: EMPTY
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: PUSH
10881: LD_INT 32
10883: PUSH
10884: LD_INT 77
10886: PUSH
10887: LD_INT 75
10889: PUSH
10890: LD_INT 5
10892: PUSH
10893: EMPTY
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: PUSH
10899: LD_INT 32
10901: PUSH
10902: LD_INT 69
10904: PUSH
10905: LD_INT 68
10907: PUSH
10908: LD_INT 3
10910: PUSH
10911: EMPTY
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: PUSH
10917: LD_INT 32
10919: PUSH
10920: LD_INT 59
10922: PUSH
10923: LD_INT 96
10925: PUSH
10926: LD_INT 5
10928: PUSH
10929: EMPTY
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 32
10937: PUSH
10938: LD_INT 56
10940: PUSH
10941: LD_INT 96
10943: PUSH
10944: LD_INT 0
10946: PUSH
10947: EMPTY
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: PUSH
10953: LD_INT 32
10955: PUSH
10956: LD_INT 51
10958: PUSH
10959: LD_INT 61
10961: PUSH
10962: LD_INT 3
10964: PUSH
10965: EMPTY
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: PUSH
10971: LD_INT 32
10973: PUSH
10974: LD_INT 42
10976: PUSH
10977: LD_INT 60
10979: PUSH
10980: LD_INT 3
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: PUSH
10989: LD_INT 32
10991: PUSH
10992: LD_INT 36
10994: PUSH
10995: LD_INT 58
10997: PUSH
10998: LD_INT 3
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: PUSH
11007: LD_INT 32
11009: PUSH
11010: LD_INT 39
11012: PUSH
11013: LD_INT 59
11015: PUSH
11016: LD_INT 3
11018: PUSH
11019: EMPTY
11020: LIST
11021: LIST
11022: LIST
11023: LIST
11024: PUSH
11025: LD_INT 32
11027: PUSH
11028: LD_INT 61
11030: PUSH
11031: LD_INT 64
11033: PUSH
11034: LD_INT 3
11036: PUSH
11037: EMPTY
11038: LIST
11039: LIST
11040: LIST
11041: LIST
11042: PUSH
11043: LD_INT 33
11045: PUSH
11046: LD_INT 63
11048: PUSH
11049: LD_INT 90
11051: PUSH
11052: LD_INT 5
11054: PUSH
11055: EMPTY
11056: LIST
11057: LIST
11058: LIST
11059: LIST
11060: PUSH
11061: LD_INT 33
11063: PUSH
11064: LD_INT 64
11066: PUSH
11067: LD_INT 88
11069: PUSH
11070: LD_INT 5
11072: PUSH
11073: EMPTY
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: PUSH
11079: LD_INT 33
11081: PUSH
11082: LD_INT 72
11084: PUSH
11085: LD_INT 82
11087: PUSH
11088: LD_INT 5
11090: PUSH
11091: EMPTY
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: PUSH
11097: LD_INT 6
11099: PUSH
11100: LD_INT 42
11102: PUSH
11103: LD_INT 74
11105: PUSH
11106: LD_INT 1
11108: PUSH
11109: EMPTY
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: PUSH
11115: LD_INT 6
11117: PUSH
11118: LD_INT 56
11120: PUSH
11121: LD_INT 77
11123: PUSH
11124: LD_INT 2
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: PUSH
11133: LD_INT 21
11135: PUSH
11136: LD_INT 54
11138: PUSH
11139: LD_INT 91
11141: PUSH
11142: LD_INT 5
11144: PUSH
11145: EMPTY
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: PUSH
11151: LD_INT 16
11153: PUSH
11154: LD_INT 50
11156: PUSH
11157: LD_INT 83
11159: PUSH
11160: LD_INT 3
11162: PUSH
11163: EMPTY
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: PUSH
11169: LD_INT 24
11171: PUSH
11172: LD_INT 50
11174: PUSH
11175: LD_INT 90
11177: PUSH
11178: LD_INT 0
11180: PUSH
11181: EMPTY
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: PUSH
11187: EMPTY
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11218: LD_ADDR_VAR 0 3
11222: PUSH
11223: LD_INT 22
11225: PUSH
11226: LD_INT 3
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: PUSH
11233: LD_INT 3
11235: PUSH
11236: LD_INT 25
11238: PUSH
11239: LD_INT 2
11241: PUSH
11242: EMPTY
11243: LIST
11244: LIST
11245: PUSH
11246: EMPTY
11247: LIST
11248: LIST
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PPUSH
11254: CALL_OW 69
11258: PUSH
11259: FOR_IN
11260: IFFALSE 11279
// AddComAgressiveMove ( i , 53 , 82 ) ;
11262: LD_VAR 0 3
11266: PPUSH
11267: LD_INT 53
11269: PPUSH
11270: LD_INT 82
11272: PPUSH
11273: CALL_OW 174
11277: GO 11259
11279: POP
11280: POP
// for i := 1 to buildingsTab do
11281: LD_ADDR_VAR 0 3
11285: PUSH
11286: DOUBLE
11287: LD_INT 1
11289: DEC
11290: ST_TO_ADDR
11291: LD_VAR 0 5
11295: PUSH
11296: FOR_TO
11297: IFFALSE 11370
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11299: LD_VAR 0 4
11303: PPUSH
11304: LD_VAR 0 5
11308: PUSH
11309: LD_VAR 0 3
11313: ARRAY
11314: PUSH
11315: LD_INT 1
11317: ARRAY
11318: PPUSH
11319: LD_VAR 0 5
11323: PUSH
11324: LD_VAR 0 3
11328: ARRAY
11329: PUSH
11330: LD_INT 2
11332: ARRAY
11333: PPUSH
11334: LD_VAR 0 5
11338: PUSH
11339: LD_VAR 0 3
11343: ARRAY
11344: PUSH
11345: LD_INT 3
11347: ARRAY
11348: PPUSH
11349: LD_VAR 0 5
11353: PUSH
11354: LD_VAR 0 3
11358: ARRAY
11359: PUSH
11360: LD_INT 4
11362: ARRAY
11363: PPUSH
11364: CALL_OW 205
11368: GO 11296
11370: POP
11371: POP
// end ; if position = 2 then
11372: LD_VAR 0 1
11376: PUSH
11377: LD_INT 2
11379: EQUAL
11380: IFFALSE 11995
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
11382: LD_ADDR_VAR 0 4
11386: PUSH
11387: LD_INT 22
11389: PUSH
11390: LD_INT 3
11392: PUSH
11393: EMPTY
11394: LIST
11395: LIST
11396: PUSH
11397: LD_INT 25
11399: PUSH
11400: LD_INT 2
11402: PUSH
11403: EMPTY
11404: LIST
11405: LIST
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: PPUSH
11411: CALL_OW 69
11415: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
11416: LD_ADDR_VAR 0 5
11420: PUSH
11421: LD_INT 0
11423: PUSH
11424: LD_INT 104
11426: PUSH
11427: LD_INT 110
11429: PUSH
11430: LD_INT 5
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: PUSH
11439: LD_INT 4
11441: PUSH
11442: LD_INT 98
11444: PUSH
11445: LD_INT 90
11447: PUSH
11448: LD_INT 3
11450: PUSH
11451: EMPTY
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: PUSH
11457: LD_INT 29
11459: PUSH
11460: LD_INT 103
11462: PUSH
11463: LD_INT 114
11465: PUSH
11466: LD_INT 2
11468: PUSH
11469: EMPTY
11470: LIST
11471: LIST
11472: LIST
11473: LIST
11474: PUSH
11475: LD_INT 30
11477: PUSH
11478: LD_INT 99
11480: PUSH
11481: LD_INT 114
11483: PUSH
11484: LD_INT 3
11486: PUSH
11487: EMPTY
11488: LIST
11489: LIST
11490: LIST
11491: LIST
11492: PUSH
11493: LD_INT 28
11495: PUSH
11496: LD_INT 100
11498: PUSH
11499: LD_INT 112
11501: PUSH
11502: LD_INT 1
11504: PUSH
11505: EMPTY
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: PUSH
11511: LD_INT 2
11513: PUSH
11514: LD_INT 92
11516: PUSH
11517: LD_INT 101
11519: PUSH
11520: LD_INT 0
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: PUSH
11529: LD_INT 28
11531: PUSH
11532: LD_INT 97
11534: PUSH
11535: LD_INT 116
11537: PUSH
11538: LD_INT 5
11540: PUSH
11541: EMPTY
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: PUSH
11547: LD_INT 17
11549: PUSH
11550: LD_INT 96
11552: PUSH
11553: LD_INT 101
11555: PUSH
11556: LD_INT 4
11558: PUSH
11559: EMPTY
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: PUSH
11565: LD_INT 18
11567: PUSH
11568: LD_INT 88
11570: PUSH
11571: LD_INT 97
11573: PUSH
11574: LD_INT 2
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: PUSH
11583: LD_INT 28
11585: PUSH
11586: LD_INT 106
11588: PUSH
11589: LD_INT 92
11591: PUSH
11592: LD_INT 2
11594: PUSH
11595: EMPTY
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: PUSH
11601: LD_INT 32
11603: PUSH
11604: LD_INT 88
11606: PUSH
11607: LD_INT 89
11609: PUSH
11610: LD_INT 2
11612: PUSH
11613: EMPTY
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: PUSH
11619: LD_INT 32
11621: PUSH
11622: LD_INT 86
11624: PUSH
11625: LD_INT 90
11627: PUSH
11628: LD_INT 2
11630: PUSH
11631: EMPTY
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: PUSH
11637: LD_INT 32
11639: PUSH
11640: LD_INT 85
11642: PUSH
11643: LD_INT 99
11645: PUSH
11646: LD_INT 2
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: PUSH
11655: LD_INT 32
11657: PUSH
11658: LD_INT 85
11660: PUSH
11661: LD_INT 107
11663: PUSH
11664: LD_INT 1
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: PUSH
11673: LD_INT 33
11675: PUSH
11676: LD_INT 105
11678: PUSH
11679: LD_INT 99
11681: PUSH
11682: LD_INT 1
11684: PUSH
11685: EMPTY
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: PUSH
11691: LD_INT 33
11693: PUSH
11694: LD_INT 102
11696: PUSH
11697: LD_INT 92
11699: PUSH
11700: LD_INT 3
11702: PUSH
11703: EMPTY
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: PUSH
11709: LD_INT 33
11711: PUSH
11712: LD_INT 105
11714: PUSH
11715: LD_INT 92
11717: PUSH
11718: LD_INT 2
11720: PUSH
11721: EMPTY
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: PUSH
11727: LD_INT 6
11729: PUSH
11730: LD_INT 92
11732: PUSH
11733: LD_INT 110
11735: PUSH
11736: LD_INT 0
11738: PUSH
11739: EMPTY
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: PUSH
11745: LD_INT 6
11747: PUSH
11748: LD_INT 103
11750: PUSH
11751: LD_INT 103
11753: PUSH
11754: LD_INT 5
11756: PUSH
11757: EMPTY
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: PUSH
11763: LD_INT 21
11765: PUSH
11766: LD_INT 89
11768: PUSH
11769: LD_INT 101
11771: PUSH
11772: LD_INT 1
11774: PUSH
11775: EMPTY
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: PUSH
11781: LD_INT 16
11783: PUSH
11784: LD_INT 95
11786: PUSH
11787: LD_INT 104
11789: PUSH
11790: LD_INT 4
11792: PUSH
11793: EMPTY
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: PUSH
11799: LD_INT 24
11801: PUSH
11802: LD_INT 92
11804: PUSH
11805: LD_INT 105
11807: PUSH
11808: LD_INT 0
11810: PUSH
11811: EMPTY
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: PUSH
11817: EMPTY
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
11841: LD_ADDR_VAR 0 3
11845: PUSH
11846: LD_INT 22
11848: PUSH
11849: LD_INT 3
11851: PUSH
11852: EMPTY
11853: LIST
11854: LIST
11855: PUSH
11856: LD_INT 3
11858: PUSH
11859: LD_INT 25
11861: PUSH
11862: LD_INT 2
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: PUSH
11869: EMPTY
11870: LIST
11871: LIST
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PPUSH
11877: CALL_OW 69
11881: PUSH
11882: FOR_IN
11883: IFFALSE 11902
// AddComAgressiveMove ( i , 96 , 99 ) ;
11885: LD_VAR 0 3
11889: PPUSH
11890: LD_INT 96
11892: PPUSH
11893: LD_INT 99
11895: PPUSH
11896: CALL_OW 174
11900: GO 11882
11902: POP
11903: POP
// for i := 1 to buildingsTab do
11904: LD_ADDR_VAR 0 3
11908: PUSH
11909: DOUBLE
11910: LD_INT 1
11912: DEC
11913: ST_TO_ADDR
11914: LD_VAR 0 5
11918: PUSH
11919: FOR_TO
11920: IFFALSE 11993
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
11922: LD_VAR 0 4
11926: PPUSH
11927: LD_VAR 0 5
11931: PUSH
11932: LD_VAR 0 3
11936: ARRAY
11937: PUSH
11938: LD_INT 1
11940: ARRAY
11941: PPUSH
11942: LD_VAR 0 5
11946: PUSH
11947: LD_VAR 0 3
11951: ARRAY
11952: PUSH
11953: LD_INT 2
11955: ARRAY
11956: PPUSH
11957: LD_VAR 0 5
11961: PUSH
11962: LD_VAR 0 3
11966: ARRAY
11967: PUSH
11968: LD_INT 3
11970: ARRAY
11971: PPUSH
11972: LD_VAR 0 5
11976: PUSH
11977: LD_VAR 0 3
11981: ARRAY
11982: PUSH
11983: LD_INT 4
11985: ARRAY
11986: PPUSH
11987: CALL_OW 205
11991: GO 11919
11993: POP
11994: POP
// end ; if position = 3 then
11995: LD_VAR 0 1
11999: PUSH
12000: LD_INT 3
12002: EQUAL
12003: IFFALSE 12789
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12005: LD_ADDR_VAR 0 4
12009: PUSH
12010: LD_INT 22
12012: PUSH
12013: LD_INT 3
12015: PUSH
12016: EMPTY
12017: LIST
12018: LIST
12019: PUSH
12020: LD_INT 25
12022: PUSH
12023: LD_INT 2
12025: PUSH
12026: EMPTY
12027: LIST
12028: LIST
12029: PUSH
12030: EMPTY
12031: LIST
12032: LIST
12033: PPUSH
12034: CALL_OW 69
12038: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
12039: LD_ADDR_VAR 0 5
12043: PUSH
12044: LD_INT 0
12046: PUSH
12047: LD_INT 151
12049: PUSH
12050: LD_INT 71
12052: PUSH
12053: LD_INT 4
12055: PUSH
12056: EMPTY
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: PUSH
12062: LD_INT 4
12064: PUSH
12065: LD_INT 145
12067: PUSH
12068: LD_INT 53
12070: PUSH
12071: LD_INT 3
12073: PUSH
12074: EMPTY
12075: LIST
12076: LIST
12077: LIST
12078: LIST
12079: PUSH
12080: LD_INT 4
12082: PUSH
12083: LD_INT 172
12085: PUSH
12086: LD_INT 102
12088: PUSH
12089: LD_INT 5
12091: PUSH
12092: EMPTY
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: PUSH
12098: LD_INT 29
12100: PUSH
12101: LD_INT 152
12103: PUSH
12104: LD_INT 85
12106: PUSH
12107: LD_INT 3
12109: PUSH
12110: EMPTY
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: PUSH
12116: LD_INT 30
12118: PUSH
12119: LD_INT 156
12121: PUSH
12122: LD_INT 92
12124: PUSH
12125: LD_INT 3
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: PUSH
12134: LD_INT 28
12136: PUSH
12137: LD_INT 151
12139: PUSH
12140: LD_INT 66
12142: PUSH
12143: LD_INT 4
12145: PUSH
12146: EMPTY
12147: LIST
12148: LIST
12149: LIST
12150: LIST
12151: PUSH
12152: LD_INT 2
12154: PUSH
12155: LD_INT 163
12157: PUSH
12158: LD_INT 95
12160: PUSH
12161: LD_INT 5
12163: PUSH
12164: EMPTY
12165: LIST
12166: LIST
12167: LIST
12168: LIST
12169: PUSH
12170: LD_INT 28
12172: PUSH
12173: LD_INT 149
12175: PUSH
12176: LD_INT 63
12178: PUSH
12179: LD_INT 4
12181: PUSH
12182: EMPTY
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: PUSH
12188: LD_INT 17
12190: PUSH
12191: LD_INT 167
12193: PUSH
12194: LD_INT 99
12196: PUSH
12197: LD_INT 5
12199: PUSH
12200: EMPTY
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: PUSH
12206: LD_INT 18
12208: PUSH
12209: LD_INT 163
12211: PUSH
12212: LD_INT 98
12214: PUSH
12215: LD_INT 0
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: LIST
12222: LIST
12223: PUSH
12224: LD_INT 28
12226: PUSH
12227: LD_INT 154
12229: PUSH
12230: LD_INT 70
12232: PUSH
12233: LD_INT 4
12235: PUSH
12236: EMPTY
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: PUSH
12242: LD_INT 32
12244: PUSH
12245: LD_INT 155
12247: PUSH
12248: LD_INT 62
12250: PUSH
12251: LD_INT 4
12253: PUSH
12254: EMPTY
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: PUSH
12260: LD_INT 32
12262: PUSH
12263: LD_INT 161
12265: PUSH
12266: LD_INT 69
12268: PUSH
12269: LD_INT 4
12271: PUSH
12272: EMPTY
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: PUSH
12278: LD_INT 32
12280: PUSH
12281: LD_INT 168
12283: PUSH
12284: LD_INT 78
12286: PUSH
12287: LD_INT 4
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: PUSH
12296: LD_INT 32
12298: PUSH
12299: LD_INT 163
12301: PUSH
12302: LD_INT 80
12304: PUSH
12305: LD_INT 5
12307: PUSH
12308: EMPTY
12309: LIST
12310: LIST
12311: LIST
12312: LIST
12313: PUSH
12314: LD_INT 32
12316: PUSH
12317: LD_INT 136
12319: PUSH
12320: LD_INT 73
12322: PUSH
12323: LD_INT 0
12325: PUSH
12326: EMPTY
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: PUSH
12332: LD_INT 32
12334: PUSH
12335: LD_INT 157
12337: PUSH
12338: LD_INT 98
12340: PUSH
12341: LD_INT 0
12343: PUSH
12344: EMPTY
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: PUSH
12350: LD_INT 32
12352: PUSH
12353: LD_INT 150
12355: PUSH
12356: LD_INT 87
12358: PUSH
12359: LD_INT 1
12361: PUSH
12362: EMPTY
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: PUSH
12368: LD_INT 33
12370: PUSH
12371: LD_INT 171
12373: PUSH
12374: LD_INT 97
12376: PUSH
12377: LD_INT 4
12379: PUSH
12380: EMPTY
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: PUSH
12386: LD_INT 33
12388: PUSH
12389: LD_INT 168
12391: PUSH
12392: LD_INT 92
12394: PUSH
12395: LD_INT 4
12397: PUSH
12398: EMPTY
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: PUSH
12404: LD_INT 33
12406: PUSH
12407: LD_INT 166
12409: PUSH
12410: LD_INT 80
12412: PUSH
12413: LD_INT 5
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: PUSH
12422: LD_INT 33
12424: PUSH
12425: LD_INT 141
12427: PUSH
12428: LD_INT 54
12430: PUSH
12431: LD_INT 2
12433: PUSH
12434: EMPTY
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: PUSH
12440: LD_INT 33
12442: PUSH
12443: LD_INT 133
12445: PUSH
12446: LD_INT 57
12448: PUSH
12449: LD_INT 2
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: PUSH
12458: LD_INT 33
12460: PUSH
12461: LD_INT 132
12463: PUSH
12464: LD_INT 61
12466: PUSH
12467: LD_INT 2
12469: PUSH
12470: EMPTY
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: PUSH
12476: LD_INT 33
12478: PUSH
12479: LD_INT 150
12481: PUSH
12482: LD_INT 82
12484: PUSH
12485: LD_INT 0
12487: PUSH
12488: EMPTY
12489: LIST
12490: LIST
12491: LIST
12492: LIST
12493: PUSH
12494: LD_INT 33
12496: PUSH
12497: LD_INT 132
12499: PUSH
12500: LD_INT 72
12502: PUSH
12503: LD_INT 0
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: PUSH
12512: LD_INT 6
12514: PUSH
12515: LD_INT 146
12517: PUSH
12518: LD_INT 64
12520: PUSH
12521: LD_INT 4
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 6
12532: PUSH
12533: LD_INT 159
12535: PUSH
12536: LD_INT 85
12538: PUSH
12539: LD_INT 4
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: PUSH
12548: LD_INT 21
12550: PUSH
12551: LD_INT 163
12553: PUSH
12554: LD_INT 91
12556: PUSH
12557: LD_INT 3
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 16
12568: PUSH
12569: LD_INT 166
12571: PUSH
12572: LD_INT 95
12574: PUSH
12575: LD_INT 4
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: PUSH
12584: LD_INT 24
12586: PUSH
12587: LD_INT 159
12589: PUSH
12590: LD_INT 95
12592: PUSH
12593: LD_INT 1
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: PUSH
12602: EMPTY
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: LIST
12613: LIST
12614: LIST
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
12635: LD_ADDR_VAR 0 3
12639: PUSH
12640: LD_INT 22
12642: PUSH
12643: LD_INT 3
12645: PUSH
12646: EMPTY
12647: LIST
12648: LIST
12649: PUSH
12650: LD_INT 3
12652: PUSH
12653: LD_INT 25
12655: PUSH
12656: LD_INT 2
12658: PUSH
12659: EMPTY
12660: LIST
12661: LIST
12662: PUSH
12663: EMPTY
12664: LIST
12665: LIST
12666: PUSH
12667: EMPTY
12668: LIST
12669: LIST
12670: PPUSH
12671: CALL_OW 69
12675: PUSH
12676: FOR_IN
12677: IFFALSE 12696
// AddComAgressiveMove ( i , 141 , 65 ) ;
12679: LD_VAR 0 3
12683: PPUSH
12684: LD_INT 141
12686: PPUSH
12687: LD_INT 65
12689: PPUSH
12690: CALL_OW 174
12694: GO 12676
12696: POP
12697: POP
// for i := 1 to buildingsTab do
12698: LD_ADDR_VAR 0 3
12702: PUSH
12703: DOUBLE
12704: LD_INT 1
12706: DEC
12707: ST_TO_ADDR
12708: LD_VAR 0 5
12712: PUSH
12713: FOR_TO
12714: IFFALSE 12787
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
12716: LD_VAR 0 4
12720: PPUSH
12721: LD_VAR 0 5
12725: PUSH
12726: LD_VAR 0 3
12730: ARRAY
12731: PUSH
12732: LD_INT 1
12734: ARRAY
12735: PPUSH
12736: LD_VAR 0 5
12740: PUSH
12741: LD_VAR 0 3
12745: ARRAY
12746: PUSH
12747: LD_INT 2
12749: ARRAY
12750: PPUSH
12751: LD_VAR 0 5
12755: PUSH
12756: LD_VAR 0 3
12760: ARRAY
12761: PUSH
12762: LD_INT 3
12764: ARRAY
12765: PPUSH
12766: LD_VAR 0 5
12770: PUSH
12771: LD_VAR 0 3
12775: ARRAY
12776: PUSH
12777: LD_INT 4
12779: ARRAY
12780: PPUSH
12781: CALL_OW 205
12785: GO 12713
12787: POP
12788: POP
// end ; end ;
12789: LD_VAR 0 2
12793: RET
// export function BuildArabianBase ; var i , engineers , buildingsTab ; begin
12794: LD_INT 0
12796: PPUSH
12797: PPUSH
12798: PPUSH
12799: PPUSH
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
12800: LD_ADDR_VAR 0 3
12804: PUSH
12805: LD_INT 22
12807: PUSH
12808: LD_INT 2
12810: PUSH
12811: EMPTY
12812: LIST
12813: LIST
12814: PUSH
12815: LD_INT 25
12817: PUSH
12818: LD_INT 2
12820: PUSH
12821: EMPTY
12822: LIST
12823: LIST
12824: PUSH
12825: EMPTY
12826: LIST
12827: LIST
12828: PPUSH
12829: CALL_OW 69
12833: ST_TO_ADDR
// AddComBuild ( engineers , b_depot , 71 , 15 , 3 ) ;
12834: LD_VAR 0 3
12838: PPUSH
12839: LD_INT 0
12841: PPUSH
12842: LD_INT 71
12844: PPUSH
12845: LD_INT 15
12847: PPUSH
12848: LD_INT 3
12850: PPUSH
12851: CALL_OW 205
// buildingsTab = [ [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
12855: LD_ADDR_VAR 0 4
12859: PUSH
12860: LD_INT 6
12862: PUSH
12863: LD_INT 77
12865: PUSH
12866: LD_INT 18
12868: PUSH
12869: LD_INT 3
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: PUSH
12878: LD_INT 4
12880: PUSH
12881: LD_INT 77
12883: PUSH
12884: LD_INT 26
12886: PUSH
12887: LD_INT 0
12889: PUSH
12890: EMPTY
12891: LIST
12892: LIST
12893: LIST
12894: LIST
12895: PUSH
12896: LD_INT 31
12898: PUSH
12899: LD_INT 82
12901: PUSH
12902: LD_INT 28
12904: PUSH
12905: LD_INT 0
12907: PUSH
12908: EMPTY
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: PUSH
12914: LD_INT 31
12916: PUSH
12917: LD_INT 84
12919: PUSH
12920: LD_INT 21
12922: PUSH
12923: LD_INT 3
12925: PUSH
12926: EMPTY
12927: LIST
12928: LIST
12929: LIST
12930: LIST
12931: PUSH
12932: LD_INT 31
12934: PUSH
12935: LD_INT 66
12937: PUSH
12938: LD_INT 14
12940: PUSH
12941: LD_INT 2
12943: PUSH
12944: EMPTY
12945: LIST
12946: LIST
12947: LIST
12948: LIST
12949: PUSH
12950: LD_INT 27
12952: PUSH
12953: LD_INT 67
12955: PUSH
12956: LD_INT 18
12958: PUSH
12959: LD_INT 5
12961: PUSH
12962: EMPTY
12963: LIST
12964: LIST
12965: LIST
12966: LIST
12967: PUSH
12968: LD_INT 27
12970: PUSH
12971: LD_INT 69
12973: PUSH
12974: LD_INT 23
12976: PUSH
12977: LD_INT 2
12979: PUSH
12980: EMPTY
12981: LIST
12982: LIST
12983: LIST
12984: LIST
12985: PUSH
12986: EMPTY
12987: LIST
12988: LIST
12989: LIST
12990: LIST
12991: LIST
12992: LIST
12993: LIST
12994: ST_TO_ADDR
// for i := 1 to buildingsTab do
12995: LD_ADDR_VAR 0 2
12999: PUSH
13000: DOUBLE
13001: LD_INT 1
13003: DEC
13004: ST_TO_ADDR
13005: LD_VAR 0 4
13009: PUSH
13010: FOR_TO
13011: IFFALSE 13084
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13013: LD_VAR 0 3
13017: PPUSH
13018: LD_VAR 0 4
13022: PUSH
13023: LD_VAR 0 2
13027: ARRAY
13028: PUSH
13029: LD_INT 1
13031: ARRAY
13032: PPUSH
13033: LD_VAR 0 4
13037: PUSH
13038: LD_VAR 0 2
13042: ARRAY
13043: PUSH
13044: LD_INT 2
13046: ARRAY
13047: PPUSH
13048: LD_VAR 0 4
13052: PUSH
13053: LD_VAR 0 2
13057: ARRAY
13058: PUSH
13059: LD_INT 3
13061: ARRAY
13062: PPUSH
13063: LD_VAR 0 4
13067: PUSH
13068: LD_VAR 0 2
13072: ARRAY
13073: PUSH
13074: LD_INT 4
13076: ARRAY
13077: PPUSH
13078: CALL_OW 205
13082: GO 13010
13084: POP
13085: POP
// end ;
13086: LD_VAR 0 1
13090: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
13091: LD_INT 0
13093: PPUSH
13094: PPUSH
13095: PPUSH
13096: PPUSH
13097: PPUSH
13098: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
13099: LD_ADDR_VAR 0 7
13103: PUSH
13104: LD_INT 22
13106: PUSH
13107: LD_VAR 0 1
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: PUSH
13116: LD_INT 25
13118: PUSH
13119: LD_INT 9
13121: PUSH
13122: EMPTY
13123: LIST
13124: LIST
13125: PUSH
13126: EMPTY
13127: LIST
13128: LIST
13129: PPUSH
13130: CALL_OW 69
13134: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
13135: LD_ADDR_VAR 0 8
13139: PUSH
13140: LD_INT 22
13142: PUSH
13143: LD_VAR 0 2
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PUSH
13152: LD_INT 3
13154: PUSH
13155: LD_INT 21
13157: PUSH
13158: LD_INT 3
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PUSH
13165: EMPTY
13166: LIST
13167: LIST
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PPUSH
13173: CALL_OW 69
13177: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
13178: LD_ADDR_VAR 0 5
13182: PUSH
13183: LD_INT 1
13185: PPUSH
13186: LD_INT 3
13188: PPUSH
13189: CALL_OW 12
13193: ST_TO_ADDR
// for i = 1 to list do
13194: LD_ADDR_VAR 0 6
13198: PUSH
13199: DOUBLE
13200: LD_INT 1
13202: DEC
13203: ST_TO_ADDR
13204: LD_VAR 0 7
13208: PUSH
13209: FOR_TO
13210: IFFALSE 14200
// for ta in filter do
13212: LD_ADDR_VAR 0 4
13216: PUSH
13217: LD_VAR 0 8
13221: PUSH
13222: FOR_IN
13223: IFFALSE 14196
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
13225: LD_VAR 0 7
13229: PUSH
13230: LD_VAR 0 6
13234: ARRAY
13235: PPUSH
13236: LD_VAR 0 4
13240: PPUSH
13241: CALL_OW 296
13245: PUSH
13246: LD_INT 15
13248: LESSEQUAL
13249: IFFALSE 14194
// begin case c of 1 :
13251: LD_VAR 0 5
13255: PUSH
13256: LD_INT 1
13258: DOUBLE
13259: EQUAL
13260: IFTRUE 13264
13262: GO 13696
13264: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
13265: LD_VAR 0 7
13269: PUSH
13270: LD_VAR 0 6
13274: ARRAY
13275: PPUSH
13276: LD_VAR 0 4
13280: PPUSH
13281: CALL_OW 250
13285: PPUSH
13286: LD_VAR 0 4
13290: PPUSH
13291: CALL_OW 251
13295: PPUSH
13296: CALL_OW 154
// if eventVar2 = 0 then
13300: LD_EXP 62
13304: PUSH
13305: LD_INT 0
13307: EQUAL
13308: IFFALSE 13694
// begin eventVar2 = 1 ;
13310: LD_ADDR_EXP 62
13314: PUSH
13315: LD_INT 1
13317: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13318: LD_INT 245
13320: PPUSH
13321: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13325: LD_VAR 0 4
13329: PPUSH
13330: CALL_OW 250
13334: PPUSH
13335: LD_VAR 0 4
13339: PPUSH
13340: CALL_OW 251
13344: PPUSH
13345: CALL_OW 84
// DialogueOn ;
13349: CALL_OW 6
// if IsOK ( Cyrus ) then
13353: LD_EXP 5
13357: PPUSH
13358: CALL_OW 302
13362: IFFALSE 13378
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13364: LD_EXP 5
13368: PPUSH
13369: LD_STRING D9a-Cyrus-1
13371: PPUSH
13372: CALL_OW 88
// end else
13376: GO 13500
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13378: LD_INT 22
13380: PUSH
13381: LD_INT 1
13383: PUSH
13384: EMPTY
13385: LIST
13386: LIST
13387: PUSH
13388: LD_INT 26
13390: PUSH
13391: LD_INT 1
13393: PUSH
13394: EMPTY
13395: LIST
13396: LIST
13397: PUSH
13398: LD_INT 2
13400: PUSH
13401: LD_INT 25
13403: PUSH
13404: LD_INT 1
13406: PUSH
13407: EMPTY
13408: LIST
13409: LIST
13410: PUSH
13411: LD_INT 25
13413: PUSH
13414: LD_INT 2
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: PUSH
13421: LD_INT 25
13423: PUSH
13424: LD_INT 3
13426: PUSH
13427: EMPTY
13428: LIST
13429: LIST
13430: PUSH
13431: LD_INT 25
13433: PUSH
13434: LD_INT 4
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: LD_INT 25
13443: PUSH
13444: LD_INT 5
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: LIST
13455: LIST
13456: LIST
13457: LIST
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: LIST
13463: PPUSH
13464: CALL_OW 69
13468: PUSH
13469: LD_EXP 1
13473: PUSH
13474: LD_EXP 14
13478: PUSH
13479: LD_EXP 5
13483: PUSH
13484: EMPTY
13485: LIST
13486: LIST
13487: LIST
13488: DIFF
13489: PPUSH
13490: LD_STRING D9a-Sol1-1
13492: PPUSH
13493: LD_STRING D9a-Sol1-1
13495: PPUSH
13496: CALL 9641 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13500: LD_INT 22
13502: PUSH
13503: LD_INT 1
13505: PUSH
13506: EMPTY
13507: LIST
13508: LIST
13509: PUSH
13510: LD_INT 26
13512: PUSH
13513: LD_INT 1
13515: PUSH
13516: EMPTY
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 2
13522: PUSH
13523: LD_INT 25
13525: PUSH
13526: LD_INT 1
13528: PUSH
13529: EMPTY
13530: LIST
13531: LIST
13532: PUSH
13533: LD_INT 25
13535: PUSH
13536: LD_INT 2
13538: PUSH
13539: EMPTY
13540: LIST
13541: LIST
13542: PUSH
13543: LD_INT 25
13545: PUSH
13546: LD_INT 3
13548: PUSH
13549: EMPTY
13550: LIST
13551: LIST
13552: PUSH
13553: LD_INT 25
13555: PUSH
13556: LD_INT 4
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: PUSH
13563: LD_INT 25
13565: PUSH
13566: LD_INT 5
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: PUSH
13573: EMPTY
13574: LIST
13575: LIST
13576: LIST
13577: LIST
13578: LIST
13579: LIST
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: LIST
13585: PPUSH
13586: CALL_OW 69
13590: PUSH
13591: LD_EXP 1
13595: PUSH
13596: LD_EXP 14
13600: PUSH
13601: LD_EXP 5
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: LIST
13610: DIFF
13611: PPUSH
13612: LD_STRING D9b-Sol1-1
13614: PPUSH
13615: LD_STRING D9b-Sol1-1
13617: PPUSH
13618: CALL 9641 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
13622: LD_STRING 09_arInfo
13624: PPUSH
13625: LD_INT 0
13627: PPUSH
13628: CALL_OW 30
13632: PUSH
13633: LD_INT 1
13635: EQUAL
13636: IFFALSE 13650
// Say ( JMM , D9a-JMM-1 ) ;
13638: LD_EXP 1
13642: PPUSH
13643: LD_STRING D9a-JMM-1
13645: PPUSH
13646: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
13650: LD_EXP 1
13654: PPUSH
13655: LD_STRING D9c-JMM-1
13657: PPUSH
13658: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
13662: LD_INT 12
13664: PPUSH
13665: LD_INT 1
13667: PPUSH
13668: CALL_OW 321
13672: PUSH
13673: LD_INT 2
13675: EQUAL
13676: IFFALSE 13690
// Say ( JMM , D9c-JMM-1a ) ;
13678: LD_EXP 1
13682: PPUSH
13683: LD_STRING D9c-JMM-1a
13685: PPUSH
13686: CALL_OW 88
// DialogueOff ;
13690: CALL_OW 7
// end ; end ; 2 :
13694: GO 14194
13696: LD_INT 2
13698: DOUBLE
13699: EQUAL
13700: IFTRUE 13704
13702: GO 14162
13704: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
13705: LD_VAR 0 7
13709: PUSH
13710: LD_VAR 0 6
13714: ARRAY
13715: PPUSH
13716: LD_VAR 0 4
13720: PPUSH
13721: CALL_OW 250
13725: PUSH
13726: LD_INT 1
13728: NEG
13729: PPUSH
13730: LD_INT 1
13732: PPUSH
13733: CALL_OW 12
13737: PLUS
13738: PPUSH
13739: LD_VAR 0 4
13743: PPUSH
13744: CALL_OW 251
13748: PUSH
13749: LD_INT 1
13751: NEG
13752: PPUSH
13753: LD_INT 1
13755: PPUSH
13756: CALL_OW 12
13760: PLUS
13761: PPUSH
13762: CALL_OW 153
// if eventVar2 = 0 then
13766: LD_EXP 62
13770: PUSH
13771: LD_INT 0
13773: EQUAL
13774: IFFALSE 14160
// begin eventVar2 = 1 ;
13776: LD_ADDR_EXP 62
13780: PUSH
13781: LD_INT 1
13783: ST_TO_ADDR
// wait ( 0 0$7 ) ;
13784: LD_INT 245
13786: PPUSH
13787: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
13791: LD_VAR 0 4
13795: PPUSH
13796: CALL_OW 250
13800: PPUSH
13801: LD_VAR 0 4
13805: PPUSH
13806: CALL_OW 251
13810: PPUSH
13811: CALL_OW 84
// DialogueOn ;
13815: CALL_OW 6
// if IsOK ( Cyrus ) then
13819: LD_EXP 5
13823: PPUSH
13824: CALL_OW 302
13828: IFFALSE 13844
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
13830: LD_EXP 5
13834: PPUSH
13835: LD_STRING D9a-Cyrus-1
13837: PPUSH
13838: CALL_OW 88
// end else
13842: GO 13966
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
13844: LD_INT 22
13846: PUSH
13847: LD_INT 1
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: PUSH
13854: LD_INT 26
13856: PUSH
13857: LD_INT 1
13859: PUSH
13860: EMPTY
13861: LIST
13862: LIST
13863: PUSH
13864: LD_INT 2
13866: PUSH
13867: LD_INT 25
13869: PUSH
13870: LD_INT 1
13872: PUSH
13873: EMPTY
13874: LIST
13875: LIST
13876: PUSH
13877: LD_INT 25
13879: PUSH
13880: LD_INT 2
13882: PUSH
13883: EMPTY
13884: LIST
13885: LIST
13886: PUSH
13887: LD_INT 25
13889: PUSH
13890: LD_INT 3
13892: PUSH
13893: EMPTY
13894: LIST
13895: LIST
13896: PUSH
13897: LD_INT 25
13899: PUSH
13900: LD_INT 4
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: PUSH
13907: LD_INT 25
13909: PUSH
13910: LD_INT 5
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PUSH
13917: EMPTY
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: PUSH
13925: EMPTY
13926: LIST
13927: LIST
13928: LIST
13929: PPUSH
13930: CALL_OW 69
13934: PUSH
13935: LD_EXP 1
13939: PUSH
13940: LD_EXP 14
13944: PUSH
13945: LD_EXP 5
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: LIST
13954: DIFF
13955: PPUSH
13956: LD_STRING D9a-Sol1-1
13958: PPUSH
13959: LD_STRING D9a-Sol1-1
13961: PPUSH
13962: CALL 9641 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
13966: LD_INT 22
13968: PUSH
13969: LD_INT 1
13971: PUSH
13972: EMPTY
13973: LIST
13974: LIST
13975: PUSH
13976: LD_INT 26
13978: PUSH
13979: LD_INT 1
13981: PUSH
13982: EMPTY
13983: LIST
13984: LIST
13985: PUSH
13986: LD_INT 2
13988: PUSH
13989: LD_INT 25
13991: PUSH
13992: LD_INT 1
13994: PUSH
13995: EMPTY
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 25
14001: PUSH
14002: LD_INT 2
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: LD_INT 25
14011: PUSH
14012: LD_INT 3
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: LD_INT 25
14021: PUSH
14022: LD_INT 4
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: LD_INT 25
14031: PUSH
14032: LD_INT 5
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PUSH
14039: EMPTY
14040: LIST
14041: LIST
14042: LIST
14043: LIST
14044: LIST
14045: LIST
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: LIST
14051: PPUSH
14052: CALL_OW 69
14056: PUSH
14057: LD_EXP 1
14061: PUSH
14062: LD_EXP 14
14066: PUSH
14067: LD_EXP 5
14071: PUSH
14072: EMPTY
14073: LIST
14074: LIST
14075: LIST
14076: DIFF
14077: PPUSH
14078: LD_STRING D9b-Sol1-1
14080: PPUSH
14081: LD_STRING D9b-Sol1-1
14083: PPUSH
14084: CALL 9641 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
14088: LD_STRING 09_arInfo
14090: PPUSH
14091: LD_INT 0
14093: PPUSH
14094: CALL_OW 30
14098: PUSH
14099: LD_INT 1
14101: EQUAL
14102: IFFALSE 14116
// Say ( JMM , D9a-JMM-1 ) ;
14104: LD_EXP 1
14108: PPUSH
14109: LD_STRING D9a-JMM-1
14111: PPUSH
14112: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
14116: LD_EXP 1
14120: PPUSH
14121: LD_STRING D9c-JMM-1
14123: PPUSH
14124: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
14128: LD_INT 12
14130: PPUSH
14131: LD_INT 1
14133: PPUSH
14134: CALL_OW 321
14138: PUSH
14139: LD_INT 2
14141: EQUAL
14142: IFFALSE 14156
// Say ( JMM , D9c-JMM-1a ) ;
14144: LD_EXP 1
14148: PPUSH
14149: LD_STRING D9c-JMM-1a
14151: PPUSH
14152: CALL_OW 88
// DialogueOff ;
14156: CALL_OW 7
// end ; end ; 3 :
14160: GO 14194
14162: LD_INT 3
14164: DOUBLE
14165: EQUAL
14166: IFTRUE 14170
14168: GO 14193
14170: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
14171: LD_VAR 0 7
14175: PUSH
14176: LD_VAR 0 6
14180: ARRAY
14181: PPUSH
14182: LD_VAR 0 4
14186: PPUSH
14187: CALL_OW 115
14191: GO 14194
14193: POP
// end ; end ;
14194: GO 13222
14196: POP
14197: POP
14198: GO 13209
14200: POP
14201: POP
// end ;
14202: LD_VAR 0 3
14206: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
14207: LD_INT 0
14209: PPUSH
14210: PPUSH
14211: PPUSH
14212: PPUSH
// for i = 1 to 72 do
14213: LD_ADDR_VAR 0 5
14217: PUSH
14218: DOUBLE
14219: LD_INT 1
14221: DEC
14222: ST_TO_ADDR
14223: LD_INT 72
14225: PUSH
14226: FOR_TO
14227: IFFALSE 14285
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
14229: LD_VAR 0 5
14233: PPUSH
14234: LD_VAR 0 1
14238: PPUSH
14239: CALL_OW 321
14243: PUSH
14244: LD_INT 1
14246: EQUAL
14247: PUSH
14248: LD_VAR 0 5
14252: PPUSH
14253: LD_VAR 0 3
14257: PPUSH
14258: CALL_OW 482
14262: PUSH
14263: LD_INT 1
14265: EQUAL
14266: AND
14267: IFFALSE 14283
// AddComResearch ( lab , i ) ;
14269: LD_VAR 0 2
14273: PPUSH
14274: LD_VAR 0 5
14278: PPUSH
14279: CALL_OW 184
14283: GO 14226
14285: POP
14286: POP
// end ;
14287: LD_VAR 0 4
14291: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
14292: LD_INT 0
14294: PPUSH
14295: PPUSH
14296: PPUSH
14297: PPUSH
14298: PPUSH
14299: PPUSH
14300: PPUSH
14301: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
14302: LD_ADDR_VAR 0 6
14306: PUSH
14307: LD_INT 22
14309: PUSH
14310: LD_VAR 0 1
14314: PUSH
14315: EMPTY
14316: LIST
14317: LIST
14318: PUSH
14319: LD_INT 56
14321: PUSH
14322: EMPTY
14323: LIST
14324: PUSH
14325: LD_INT 24
14327: PUSH
14328: LD_INT 700
14330: PUSH
14331: EMPTY
14332: LIST
14333: LIST
14334: PUSH
14335: LD_INT 3
14337: PUSH
14338: LD_INT 60
14340: PUSH
14341: EMPTY
14342: LIST
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PUSH
14348: LD_INT 2
14350: PUSH
14351: LD_INT 25
14353: PUSH
14354: LD_INT 1
14356: PUSH
14357: EMPTY
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 25
14363: PUSH
14364: LD_INT 9
14366: PUSH
14367: EMPTY
14368: LIST
14369: LIST
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: LIST
14375: PUSH
14376: EMPTY
14377: LIST
14378: LIST
14379: LIST
14380: LIST
14381: LIST
14382: PPUSH
14383: CALL_OW 69
14387: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
14388: LD_ADDR_VAR 0 7
14392: PUSH
14393: LD_INT 22
14395: PUSH
14396: LD_VAR 0 1
14400: PUSH
14401: EMPTY
14402: LIST
14403: LIST
14404: PUSH
14405: LD_INT 30
14407: PUSH
14408: LD_INT 32
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: PUSH
14415: LD_INT 58
14417: PUSH
14418: EMPTY
14419: LIST
14420: PUSH
14421: LD_INT 24
14423: PUSH
14424: LD_INT 251
14426: PUSH
14427: EMPTY
14428: LIST
14429: LIST
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: PPUSH
14437: CALL_OW 69
14441: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
14442: LD_ADDR_VAR 0 9
14446: PUSH
14447: LD_INT 22
14449: PUSH
14450: LD_VAR 0 1
14454: PUSH
14455: EMPTY
14456: LIST
14457: LIST
14458: PUSH
14459: LD_INT 2
14461: PUSH
14462: LD_INT 30
14464: PUSH
14465: LD_INT 4
14467: PUSH
14468: EMPTY
14469: LIST
14470: LIST
14471: PUSH
14472: LD_INT 30
14474: PUSH
14475: LD_INT 5
14477: PUSH
14478: EMPTY
14479: LIST
14480: LIST
14481: PUSH
14482: EMPTY
14483: LIST
14484: LIST
14485: LIST
14486: PUSH
14487: LD_INT 24
14489: PUSH
14490: LD_INT 251
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: PUSH
14497: EMPTY
14498: LIST
14499: LIST
14500: LIST
14501: PPUSH
14502: CALL_OW 69
14506: ST_TO_ADDR
// if barrackList > 0 then
14507: LD_VAR 0 9
14511: PUSH
14512: LD_INT 0
14514: GREATER
14515: IFFALSE 14650
// begin if turretList = 0 then
14517: LD_VAR 0 7
14521: PUSH
14522: LD_INT 0
14524: EQUAL
14525: IFFALSE 14574
// begin for i in soldiers_list do
14527: LD_ADDR_VAR 0 4
14531: PUSH
14532: LD_VAR 0 6
14536: PUSH
14537: FOR_IN
14538: IFFALSE 14570
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
14540: LD_VAR 0 4
14544: PPUSH
14545: LD_VAR 0 9
14549: PUSH
14550: LD_INT 1
14552: PPUSH
14553: LD_VAR 0 9
14557: PPUSH
14558: CALL_OW 12
14562: ARRAY
14563: PPUSH
14564: CALL_OW 120
14568: GO 14537
14570: POP
14571: POP
// end else
14572: GO 14650
// begin for i in barrackList do
14574: LD_ADDR_VAR 0 4
14578: PUSH
14579: LD_VAR 0 9
14583: PUSH
14584: FOR_IN
14585: IFFALSE 14648
// begin insideUnits = UnitsInside ( i ) ;
14587: LD_ADDR_VAR 0 10
14591: PUSH
14592: LD_VAR 0 4
14596: PPUSH
14597: CALL_OW 313
14601: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
14602: LD_VAR 0 10
14606: PUSH
14607: LD_INT 1
14609: ARRAY
14610: PPUSH
14611: LD_VAR 0 7
14615: PUSH
14616: LD_INT 1
14618: ARRAY
14619: PPUSH
14620: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
14624: LD_VAR 0 6
14628: PUSH
14629: LD_INT 1
14631: ARRAY
14632: PPUSH
14633: LD_VAR 0 7
14637: PUSH
14638: LD_INT 1
14640: ARRAY
14641: PPUSH
14642: CALL_OW 120
// end ;
14646: GO 14584
14648: POP
14649: POP
// end ; end ; end ;
14650: LD_VAR 0 3
14654: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
14655: LD_INT 0
14657: PPUSH
14658: PPUSH
14659: PPUSH
14660: PPUSH
14661: PPUSH
14662: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
14663: LD_ADDR_VAR 0 6
14667: PUSH
14668: LD_VAR 0 2
14672: PPUSH
14673: CALL_OW 313
14677: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
14678: LD_ADDR_VAR 0 7
14682: PUSH
14683: LD_INT 22
14685: PUSH
14686: LD_VAR 0 1
14690: PUSH
14691: EMPTY
14692: LIST
14693: LIST
14694: PUSH
14695: LD_INT 25
14697: PUSH
14698: LD_INT 2
14700: PUSH
14701: EMPTY
14702: LIST
14703: LIST
14704: PUSH
14705: LD_INT 24
14707: PUSH
14708: LD_INT 1000
14710: PUSH
14711: EMPTY
14712: LIST
14713: LIST
14714: PUSH
14715: LD_INT 3
14717: PUSH
14718: LD_INT 54
14720: PUSH
14721: EMPTY
14722: LIST
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: PUSH
14728: EMPTY
14729: LIST
14730: LIST
14731: LIST
14732: LIST
14733: PPUSH
14734: CALL_OW 69
14738: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
14739: LD_ADDR_VAR 0 4
14743: PUSH
14744: LD_INT 22
14746: PUSH
14747: LD_VAR 0 1
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: PUSH
14756: LD_INT 21
14758: PUSH
14759: LD_INT 3
14761: PUSH
14762: EMPTY
14763: LIST
14764: LIST
14765: PUSH
14766: LD_INT 3
14768: PUSH
14769: LD_INT 24
14771: PUSH
14772: LD_INT 1000
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: PUSH
14779: EMPTY
14780: LIST
14781: LIST
14782: PUSH
14783: EMPTY
14784: LIST
14785: LIST
14786: LIST
14787: PUSH
14788: EMPTY
14789: LIST
14790: PPUSH
14791: CALL_OW 69
14795: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
14796: LD_VAR 0 4
14800: NOT
14801: PUSH
14802: LD_VAR 0 7
14806: NOT
14807: AND
14808: PUSH
14809: LD_EXP 42
14813: NOT
14814: AND
14815: IFFALSE 14819
// exit ;
14817: GO 15010
// if buildings_list > 0 and engineerOkInside then
14819: LD_VAR 0 4
14823: PUSH
14824: LD_INT 0
14826: GREATER
14827: PUSH
14828: LD_VAR 0 6
14832: AND
14833: IFFALSE 14887
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
14835: LD_ADDR_VAR 0 5
14839: PUSH
14840: LD_INT 22
14842: PUSH
14843: LD_VAR 0 1
14847: PUSH
14848: EMPTY
14849: LIST
14850: LIST
14851: PUSH
14852: LD_INT 25
14854: PUSH
14855: LD_INT 2
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: PUSH
14862: EMPTY
14863: LIST
14864: LIST
14865: PPUSH
14866: CALL_OW 69
14870: PUSH
14871: FOR_IN
14872: IFFALSE 14885
// ComExitBuilding ( i ) ;
14874: LD_VAR 0 5
14878: PPUSH
14879: CALL_OW 122
14883: GO 14871
14885: POP
14886: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
14887: LD_VAR 0 4
14891: PUSH
14892: LD_INT 0
14894: GREATER
14895: PUSH
14896: LD_VAR 0 7
14900: PUSH
14901: LD_INT 0
14903: GREATER
14904: AND
14905: IFFALSE 14959
// begin for i in engineerOkOutside do
14907: LD_ADDR_VAR 0 5
14911: PUSH
14912: LD_VAR 0 7
14916: PUSH
14917: FOR_IN
14918: IFFALSE 14957
// for j in buildings_list do
14920: LD_ADDR_VAR 0 8
14924: PUSH
14925: LD_VAR 0 4
14929: PUSH
14930: FOR_IN
14931: IFFALSE 14953
// ComRepairBuilding ( i , j [ 1 ] ) ;
14933: LD_VAR 0 5
14937: PPUSH
14938: LD_VAR 0 8
14942: PUSH
14943: LD_INT 1
14945: ARRAY
14946: PPUSH
14947: CALL_OW 130
14951: GO 14930
14953: POP
14954: POP
14955: GO 14917
14957: POP
14958: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
14959: LD_VAR 0 4
14963: PUSH
14964: LD_INT 0
14966: EQUAL
14967: PUSH
14968: LD_VAR 0 7
14972: PUSH
14973: LD_INT 0
14975: GREATER
14976: AND
14977: IFFALSE 15010
// for i in engineerOkOutside do
14979: LD_ADDR_VAR 0 5
14983: PUSH
14984: LD_VAR 0 7
14988: PUSH
14989: FOR_IN
14990: IFFALSE 15008
// ComEnterUnit ( i , building ) ;
14992: LD_VAR 0 5
14996: PPUSH
14997: LD_VAR 0 2
15001: PPUSH
15002: CALL_OW 120
15006: GO 14989
15008: POP
15009: POP
// end ;
15010: LD_VAR 0 3
15014: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
15015: LD_INT 0
15017: PPUSH
15018: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
15019: LD_INT 22
15021: PUSH
15022: LD_VAR 0 1
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PUSH
15031: LD_INT 25
15033: PUSH
15034: LD_INT 2
15036: PUSH
15037: EMPTY
15038: LIST
15039: LIST
15040: PUSH
15041: EMPTY
15042: LIST
15043: LIST
15044: PPUSH
15045: CALL_OW 69
15049: PUSH
15050: LD_INT 0
15052: GREATER
15053: PUSH
15054: LD_INT 22
15056: PUSH
15057: LD_VAR 0 1
15061: PUSH
15062: EMPTY
15063: LIST
15064: LIST
15065: PUSH
15066: LD_INT 21
15068: PUSH
15069: LD_INT 3
15071: PUSH
15072: EMPTY
15073: LIST
15074: LIST
15075: PUSH
15076: LD_INT 3
15078: PUSH
15079: LD_INT 24
15081: PUSH
15082: LD_INT 1000
15084: PUSH
15085: EMPTY
15086: LIST
15087: LIST
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: LIST
15097: PPUSH
15098: CALL_OW 69
15102: PUSH
15103: LD_INT 0
15105: EQUAL
15106: AND
15107: PUSH
15108: LD_VAR 0 2
15112: PUSH
15113: LD_INT 0
15115: GREATER
15116: AND
15117: IFFALSE 15216
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
15119: LD_ADDR_VAR 0 4
15123: PUSH
15124: LD_INT 22
15126: PUSH
15127: LD_VAR 0 1
15131: PUSH
15132: EMPTY
15133: LIST
15134: LIST
15135: PUSH
15136: LD_INT 25
15138: PUSH
15139: LD_INT 2
15141: PUSH
15142: EMPTY
15143: LIST
15144: LIST
15145: PUSH
15146: EMPTY
15147: LIST
15148: LIST
15149: PPUSH
15150: CALL_OW 69
15154: PUSH
15155: FOR_IN
15156: IFFALSE 15214
// begin AddComExitBuilding ( i ) ;
15158: LD_VAR 0 4
15162: PPUSH
15163: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
15167: LD_VAR 0 4
15171: PPUSH
15172: LD_VAR 0 2
15176: PUSH
15177: LD_INT 1
15179: ARRAY
15180: PPUSH
15181: LD_VAR 0 2
15185: PUSH
15186: LD_INT 2
15188: ARRAY
15189: PPUSH
15190: LD_VAR 0 2
15194: PUSH
15195: LD_INT 3
15197: ARRAY
15198: PPUSH
15199: LD_VAR 0 2
15203: PUSH
15204: LD_INT 4
15206: ARRAY
15207: PPUSH
15208: CALL_OW 205
// end ;
15212: GO 15155
15214: POP
15215: POP
// end ; end ;
15216: LD_VAR 0 3
15220: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
15221: LD_INT 0
15223: PPUSH
15224: PPUSH
15225: PPUSH
15226: PPUSH
15227: PPUSH
15228: PPUSH
15229: PPUSH
15230: PPUSH
15231: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
15232: LD_ADDR_VAR 0 6
15236: PUSH
15237: LD_INT 22
15239: PUSH
15240: LD_VAR 0 1
15244: PUSH
15245: EMPTY
15246: LIST
15247: LIST
15248: PUSH
15249: LD_INT 25
15251: PUSH
15252: LD_INT 4
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: PUSH
15259: LD_INT 24
15261: PUSH
15262: LD_INT 251
15264: PUSH
15265: EMPTY
15266: LIST
15267: LIST
15268: PUSH
15269: EMPTY
15270: LIST
15271: LIST
15272: LIST
15273: PPUSH
15274: CALL_OW 69
15278: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
15279: LD_ADDR_VAR 0 7
15283: PUSH
15284: LD_VAR 0 3
15288: PPUSH
15289: LD_INT 22
15291: PUSH
15292: LD_VAR 0 1
15296: PUSH
15297: EMPTY
15298: LIST
15299: LIST
15300: PUSH
15301: LD_INT 25
15303: PUSH
15304: LD_INT 4
15306: PUSH
15307: EMPTY
15308: LIST
15309: LIST
15310: PUSH
15311: LD_INT 50
15313: PUSH
15314: EMPTY
15315: LIST
15316: PUSH
15317: EMPTY
15318: LIST
15319: LIST
15320: LIST
15321: PPUSH
15322: CALL_OW 70
15326: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
15327: LD_ADDR_VAR 0 10
15331: PUSH
15332: LD_VAR 0 3
15336: PPUSH
15337: LD_INT 22
15339: PUSH
15340: LD_VAR 0 1
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: LD_INT 21
15351: PUSH
15352: LD_INT 1
15354: PUSH
15355: EMPTY
15356: LIST
15357: LIST
15358: PUSH
15359: LD_INT 3
15361: PUSH
15362: LD_INT 25
15364: PUSH
15365: LD_INT 3
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: PUSH
15376: LD_INT 3
15378: PUSH
15379: LD_INT 24
15381: PUSH
15382: LD_INT 750
15384: PUSH
15385: EMPTY
15386: LIST
15387: LIST
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: EMPTY
15394: LIST
15395: LIST
15396: LIST
15397: LIST
15398: PPUSH
15399: CALL_OW 70
15403: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15404: LD_ADDR_VAR 0 11
15408: PUSH
15409: LD_VAR 0 2
15413: PPUSH
15414: LD_INT 22
15416: PUSH
15417: LD_VAR 0 1
15421: PUSH
15422: EMPTY
15423: LIST
15424: LIST
15425: PUSH
15426: LD_INT 21
15428: PUSH
15429: LD_INT 1
15431: PUSH
15432: EMPTY
15433: LIST
15434: LIST
15435: PUSH
15436: LD_INT 3
15438: PUSH
15439: LD_INT 25
15441: PUSH
15442: LD_INT 3
15444: PUSH
15445: EMPTY
15446: LIST
15447: LIST
15448: PUSH
15449: EMPTY
15450: LIST
15451: LIST
15452: PUSH
15453: LD_INT 3
15455: PUSH
15456: LD_INT 24
15458: PUSH
15459: LD_INT 1000
15461: PUSH
15462: EMPTY
15463: LIST
15464: LIST
15465: PUSH
15466: EMPTY
15467: LIST
15468: LIST
15469: PUSH
15470: EMPTY
15471: LIST
15472: LIST
15473: LIST
15474: LIST
15475: PPUSH
15476: CALL_OW 70
15480: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
15481: LD_VAR 0 10
15485: NOT
15486: PUSH
15487: LD_VAR 0 7
15491: NOT
15492: AND
15493: PUSH
15494: LD_VAR 0 11
15498: NOT
15499: AND
15500: IFFALSE 15504
// exit ;
15502: GO 15764
// if damageUnits > 0 and sci_list > 0 then
15504: LD_VAR 0 10
15508: PUSH
15509: LD_INT 0
15511: GREATER
15512: PUSH
15513: LD_VAR 0 6
15517: PUSH
15518: LD_INT 0
15520: GREATER
15521: AND
15522: IFFALSE 15555
// for i in damageUnits do
15524: LD_ADDR_VAR 0 8
15528: PUSH
15529: LD_VAR 0 10
15533: PUSH
15534: FOR_IN
15535: IFFALSE 15553
// ComMoveToArea ( i , healArea ) ;
15537: LD_VAR 0 8
15541: PPUSH
15542: LD_VAR 0 2
15546: PPUSH
15547: CALL_OW 113
15551: GO 15534
15553: POP
15554: POP
// if unitsToHeal > 0 and sci_list > 0 then
15555: LD_VAR 0 11
15559: PUSH
15560: LD_INT 0
15562: GREATER
15563: PUSH
15564: LD_VAR 0 6
15568: PUSH
15569: LD_INT 0
15571: GREATER
15572: AND
15573: IFFALSE 15632
// begin for i in sci_list do
15575: LD_ADDR_VAR 0 8
15579: PUSH
15580: LD_VAR 0 6
15584: PUSH
15585: FOR_IN
15586: IFFALSE 15630
// begin ComExitBuilding ( i ) ;
15588: LD_VAR 0 8
15592: PPUSH
15593: CALL_OW 122
// for j in unitsToHeal do
15597: LD_ADDR_VAR 0 9
15601: PUSH
15602: LD_VAR 0 11
15606: PUSH
15607: FOR_IN
15608: IFFALSE 15626
// AddComHeal ( i , j ) ;
15610: LD_VAR 0 8
15614: PPUSH
15615: LD_VAR 0 9
15619: PPUSH
15620: CALL_OW 188
15624: GO 15607
15626: POP
15627: POP
// end ;
15628: GO 15585
15630: POP
15631: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
15632: LD_VAR 0 10
15636: PUSH
15637: LD_INT 0
15639: EQUAL
15640: PUSH
15641: LD_VAR 0 11
15645: PUSH
15646: LD_INT 0
15648: EQUAL
15649: AND
15650: PUSH
15651: LD_VAR 0 7
15655: PUSH
15656: LD_INT 0
15658: GREATER
15659: AND
15660: IFFALSE 15764
// for i in sci_listOutside do
15662: LD_ADDR_VAR 0 8
15666: PUSH
15667: LD_VAR 0 7
15671: PUSH
15672: FOR_IN
15673: IFFALSE 15762
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
15675: LD_ADDR_VAR 0 12
15679: PUSH
15680: LD_INT 22
15682: PUSH
15683: LD_VAR 0 1
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: LD_INT 21
15694: PUSH
15695: LD_INT 3
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: LD_INT 30
15704: PUSH
15705: LD_INT 8
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: PUSH
15712: EMPTY
15713: LIST
15714: LIST
15715: LIST
15716: PPUSH
15717: CALL_OW 69
15721: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
15722: LD_ADDR_VAR 0 13
15726: PUSH
15727: LD_INT 1
15729: PPUSH
15730: LD_VAR 0 12
15734: PPUSH
15735: CALL_OW 12
15739: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
15740: LD_VAR 0 8
15744: PPUSH
15745: LD_VAR 0 12
15749: PUSH
15750: LD_VAR 0 13
15754: ARRAY
15755: PPUSH
15756: CALL_OW 120
// end ;
15760: GO 15672
15762: POP
15763: POP
// end ;
15764: LD_VAR 0 5
15768: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
15769: LD_INT 0
15771: PPUSH
15772: PPUSH
15773: PPUSH
15774: PPUSH
15775: PPUSH
15776: PPUSH
15777: PPUSH
15778: PPUSH
15779: PPUSH
15780: PPUSH
15781: PPUSH
// amChassisTab = [ ] ;
15782: LD_ADDR_VAR 0 19
15786: PUSH
15787: EMPTY
15788: ST_TO_ADDR
// arChassisTab = [ ] ;
15789: LD_ADDR_VAR 0 18
15793: PUSH
15794: EMPTY
15795: ST_TO_ADDR
// ruChassisTab = [ ] ;
15796: LD_ADDR_VAR 0 17
15800: PUSH
15801: EMPTY
15802: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
15803: LD_INT 35
15805: PPUSH
15806: CALL_OW 67
// if nation = 1 then
15810: LD_VAR 0 5
15814: PUSH
15815: LD_INT 1
15817: EQUAL
15818: IFFALSE 16323
// begin uc_side = side ;
15820: LD_ADDR_OWVAR 20
15824: PUSH
15825: LD_VAR 0 2
15829: ST_TO_ADDR
// uc_nation = nation ;
15830: LD_ADDR_OWVAR 21
15834: PUSH
15835: LD_VAR 0 5
15839: ST_TO_ADDR
// vc_engine = vehengine ;
15840: LD_ADDR_OWVAR 39
15844: PUSH
15845: LD_VAR 0 6
15849: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
15850: LD_ADDR_OWVAR 38
15854: PUSH
15855: LD_VAR 0 7
15859: PUSH
15860: LD_INT 1
15862: PPUSH
15863: LD_VAR 0 7
15867: PPUSH
15868: CALL_OW 12
15872: ARRAY
15873: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
15874: LD_ADDR_OWVAR 40
15878: PUSH
15879: LD_VAR 0 10
15883: PUSH
15884: LD_INT 1
15886: PPUSH
15887: LD_VAR 0 10
15891: PPUSH
15892: CALL_OW 12
15896: ARRAY
15897: ST_TO_ADDR
// for j = 1 to AMWeapon do
15898: LD_ADDR_VAR 0 14
15902: PUSH
15903: DOUBLE
15904: LD_INT 1
15906: DEC
15907: ST_TO_ADDR
15908: LD_VAR 0 10
15912: PUSH
15913: FOR_TO
15914: IFFALSE 16215
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
15916: LD_VAR 0 10
15920: PUSH
15921: LD_VAR 0 14
15925: ARRAY
15926: PUSH
15927: LD_INT 2
15929: EQUAL
15930: PUSH
15931: LD_VAR 0 10
15935: PUSH
15936: LD_VAR 0 14
15940: ARRAY
15941: PUSH
15942: LD_INT 3
15944: EQUAL
15945: OR
15946: IFFALSE 15999
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
15948: LD_ADDR_VAR 0 19
15952: PUSH
15953: LD_INT 1
15955: PUSH
15956: LD_INT 2
15958: PUSH
15959: LD_INT 3
15961: PUSH
15962: LD_INT 4
15964: PUSH
15965: LD_INT 5
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: LIST
15972: LIST
15973: LIST
15974: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
15975: LD_ADDR_OWVAR 37
15979: PUSH
15980: LD_VAR 0 19
15984: PUSH
15985: LD_INT 1
15987: PPUSH
15988: LD_VAR 0 19
15992: PPUSH
15993: CALL_OW 12
15997: ARRAY
15998: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
15999: LD_VAR 0 10
16003: PUSH
16004: LD_VAR 0 14
16008: ARRAY
16009: PUSH
16010: LD_INT 4
16012: EQUAL
16013: PUSH
16014: LD_VAR 0 10
16018: PUSH
16019: LD_VAR 0 14
16023: ARRAY
16024: PUSH
16025: LD_INT 5
16027: EQUAL
16028: OR
16029: PUSH
16030: LD_VAR 0 10
16034: PUSH
16035: LD_VAR 0 14
16039: ARRAY
16040: PUSH
16041: LD_INT 9
16043: EQUAL
16044: OR
16045: PUSH
16046: LD_VAR 0 10
16050: PUSH
16051: LD_VAR 0 14
16055: ARRAY
16056: PUSH
16057: LD_INT 11
16059: EQUAL
16060: OR
16061: PUSH
16062: LD_VAR 0 10
16066: PUSH
16067: LD_VAR 0 14
16071: ARRAY
16072: PUSH
16073: LD_INT 7
16075: EQUAL
16076: OR
16077: IFFALSE 16126
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
16079: LD_ADDR_VAR 0 19
16083: PUSH
16084: LD_INT 2
16086: PUSH
16087: LD_INT 3
16089: PUSH
16090: LD_INT 4
16092: PUSH
16093: LD_INT 5
16095: PUSH
16096: EMPTY
16097: LIST
16098: LIST
16099: LIST
16100: LIST
16101: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16102: LD_ADDR_OWVAR 37
16106: PUSH
16107: LD_VAR 0 19
16111: PUSH
16112: LD_INT 1
16114: PPUSH
16115: LD_VAR 0 19
16119: PPUSH
16120: CALL_OW 12
16124: ARRAY
16125: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
16126: LD_VAR 0 10
16130: PUSH
16131: LD_VAR 0 14
16135: ARRAY
16136: PUSH
16137: LD_INT 8
16139: EQUAL
16140: PUSH
16141: LD_VAR 0 10
16145: PUSH
16146: LD_VAR 0 14
16150: ARRAY
16151: PUSH
16152: LD_INT 6
16154: EQUAL
16155: OR
16156: PUSH
16157: LD_VAR 0 10
16161: PUSH
16162: LD_VAR 0 14
16166: ARRAY
16167: PUSH
16168: LD_INT 10
16170: EQUAL
16171: OR
16172: IFFALSE 16213
// begin amChassisTab = [ 4 , 5 ] ;
16174: LD_ADDR_VAR 0 19
16178: PUSH
16179: LD_INT 4
16181: PUSH
16182: LD_INT 5
16184: PUSH
16185: EMPTY
16186: LIST
16187: LIST
16188: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
16189: LD_ADDR_OWVAR 37
16193: PUSH
16194: LD_VAR 0 19
16198: PUSH
16199: LD_INT 1
16201: PPUSH
16202: LD_VAR 0 19
16206: PPUSH
16207: CALL_OW 12
16211: ARRAY
16212: ST_TO_ADDR
// end ; end ;
16213: GO 15913
16215: POP
16216: POP
// veh = CreateVehicle ;
16217: LD_ADDR_VAR 0 16
16221: PUSH
16222: CALL_OW 45
16226: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16227: LD_VAR 0 16
16231: PPUSH
16232: LD_VAR 0 1
16236: PPUSH
16237: LD_INT 0
16239: PPUSH
16240: CALL_OW 49
// if vc_control = 1 then
16244: LD_OWVAR 38
16248: PUSH
16249: LD_INT 1
16251: EQUAL
16252: IFFALSE 16309
// begin hc_gallery =  ;
16254: LD_ADDR_OWVAR 33
16258: PUSH
16259: LD_STRING 
16261: ST_TO_ADDR
// hc_name =  ;
16262: LD_ADDR_OWVAR 26
16266: PUSH
16267: LD_STRING 
16269: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16270: LD_INT 0
16272: PPUSH
16273: LD_INT 3
16275: PPUSH
16276: LD_VAR 0 4
16280: PPUSH
16281: CALL_OW 380
// un = CreateHuman ;
16285: LD_ADDR_VAR 0 15
16289: PUSH
16290: CALL_OW 44
16294: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16295: LD_VAR 0 15
16299: PPUSH
16300: LD_VAR 0 16
16304: PPUSH
16305: CALL_OW 52
// end ; i = i + 1 ;
16309: LD_ADDR_VAR 0 13
16313: PUSH
16314: LD_VAR 0 13
16318: PUSH
16319: LD_INT 1
16321: PLUS
16322: ST_TO_ADDR
// end ; if nation = 2 then
16323: LD_VAR 0 5
16327: PUSH
16328: LD_INT 2
16330: EQUAL
16331: IFFALSE 16753
// begin uc_side = side ;
16333: LD_ADDR_OWVAR 20
16337: PUSH
16338: LD_VAR 0 2
16342: ST_TO_ADDR
// uc_nation = nation ;
16343: LD_ADDR_OWVAR 21
16347: PUSH
16348: LD_VAR 0 5
16352: ST_TO_ADDR
// vc_engine = vehengine ;
16353: LD_ADDR_OWVAR 39
16357: PUSH
16358: LD_VAR 0 6
16362: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16363: LD_ADDR_OWVAR 38
16367: PUSH
16368: LD_VAR 0 7
16372: PUSH
16373: LD_INT 1
16375: PPUSH
16376: LD_VAR 0 7
16380: PPUSH
16381: CALL_OW 12
16385: ARRAY
16386: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
16387: LD_ADDR_OWVAR 40
16391: PUSH
16392: LD_VAR 0 9
16396: PUSH
16397: LD_INT 1
16399: PPUSH
16400: LD_VAR 0 9
16404: PPUSH
16405: CALL_OW 12
16409: ARRAY
16410: ST_TO_ADDR
// for j = 1 to ARWeapons do
16411: LD_ADDR_VAR 0 14
16415: PUSH
16416: DOUBLE
16417: LD_INT 1
16419: DEC
16420: ST_TO_ADDR
16421: LD_VAR 0 9
16425: PUSH
16426: FOR_TO
16427: IFFALSE 16645
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
16429: LD_VAR 0 9
16433: PUSH
16434: LD_VAR 0 14
16438: ARRAY
16439: PUSH
16440: LD_INT 24
16442: EQUAL
16443: PUSH
16444: LD_VAR 0 9
16448: PUSH
16449: LD_VAR 0 14
16453: ARRAY
16454: PUSH
16455: LD_INT 22
16457: EQUAL
16458: OR
16459: PUSH
16460: LD_VAR 0 9
16464: PUSH
16465: LD_VAR 0 14
16469: ARRAY
16470: PUSH
16471: LD_INT 23
16473: EQUAL
16474: OR
16475: PUSH
16476: LD_VAR 0 9
16480: PUSH
16481: LD_VAR 0 14
16485: ARRAY
16486: PUSH
16487: LD_INT 30
16489: EQUAL
16490: OR
16491: IFFALSE 16528
// begin arChassisTab = [ 14 ] ;
16493: LD_ADDR_VAR 0 18
16497: PUSH
16498: LD_INT 14
16500: PUSH
16501: EMPTY
16502: LIST
16503: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16504: LD_ADDR_OWVAR 37
16508: PUSH
16509: LD_VAR 0 18
16513: PUSH
16514: LD_INT 1
16516: PPUSH
16517: LD_VAR 0 18
16521: PPUSH
16522: CALL_OW 12
16526: ARRAY
16527: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
16528: LD_VAR 0 9
16532: PUSH
16533: LD_VAR 0 14
16537: ARRAY
16538: PUSH
16539: LD_INT 29
16541: EQUAL
16542: PUSH
16543: LD_VAR 0 9
16547: PUSH
16548: LD_VAR 0 14
16552: ARRAY
16553: PUSH
16554: LD_INT 28
16556: EQUAL
16557: OR
16558: PUSH
16559: LD_VAR 0 9
16563: PUSH
16564: LD_VAR 0 14
16568: ARRAY
16569: PUSH
16570: LD_INT 27
16572: EQUAL
16573: OR
16574: PUSH
16575: LD_VAR 0 9
16579: PUSH
16580: LD_VAR 0 14
16584: ARRAY
16585: PUSH
16586: LD_INT 26
16588: EQUAL
16589: OR
16590: PUSH
16591: LD_VAR 0 9
16595: PUSH
16596: LD_VAR 0 14
16600: ARRAY
16601: PUSH
16602: LD_INT 25
16604: EQUAL
16605: OR
16606: IFFALSE 16643
// begin arChassisTab = [ 14 ] ;
16608: LD_ADDR_VAR 0 18
16612: PUSH
16613: LD_INT 14
16615: PUSH
16616: EMPTY
16617: LIST
16618: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
16619: LD_ADDR_OWVAR 37
16623: PUSH
16624: LD_VAR 0 18
16628: PUSH
16629: LD_INT 1
16631: PPUSH
16632: LD_VAR 0 18
16636: PPUSH
16637: CALL_OW 12
16641: ARRAY
16642: ST_TO_ADDR
// end ; end ;
16643: GO 16426
16645: POP
16646: POP
// veh = CreateVehicle ;
16647: LD_ADDR_VAR 0 16
16651: PUSH
16652: CALL_OW 45
16656: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
16657: LD_VAR 0 16
16661: PPUSH
16662: LD_VAR 0 1
16666: PPUSH
16667: LD_INT 0
16669: PPUSH
16670: CALL_OW 49
// if vc_control = 1 then
16674: LD_OWVAR 38
16678: PUSH
16679: LD_INT 1
16681: EQUAL
16682: IFFALSE 16739
// begin hc_gallery =  ;
16684: LD_ADDR_OWVAR 33
16688: PUSH
16689: LD_STRING 
16691: ST_TO_ADDR
// hc_name =  ;
16692: LD_ADDR_OWVAR 26
16696: PUSH
16697: LD_STRING 
16699: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
16700: LD_INT 0
16702: PPUSH
16703: LD_INT 3
16705: PPUSH
16706: LD_VAR 0 4
16710: PPUSH
16711: CALL_OW 380
// un = CreateHuman ;
16715: LD_ADDR_VAR 0 15
16719: PUSH
16720: CALL_OW 44
16724: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
16725: LD_VAR 0 15
16729: PPUSH
16730: LD_VAR 0 16
16734: PPUSH
16735: CALL_OW 52
// end ; i = i + 1 ;
16739: LD_ADDR_VAR 0 13
16743: PUSH
16744: LD_VAR 0 13
16748: PUSH
16749: LD_INT 1
16751: PLUS
16752: ST_TO_ADDR
// end ; if nation = 3 then
16753: LD_VAR 0 5
16757: PUSH
16758: LD_INT 3
16760: EQUAL
16761: IFFALSE 17167
// begin uc_side = side ;
16763: LD_ADDR_OWVAR 20
16767: PUSH
16768: LD_VAR 0 2
16772: ST_TO_ADDR
// uc_nation = nation ;
16773: LD_ADDR_OWVAR 21
16777: PUSH
16778: LD_VAR 0 5
16782: ST_TO_ADDR
// vc_engine = vehengine ;
16783: LD_ADDR_OWVAR 39
16787: PUSH
16788: LD_VAR 0 6
16792: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
16793: LD_ADDR_OWVAR 38
16797: PUSH
16798: LD_VAR 0 7
16802: PUSH
16803: LD_INT 1
16805: PPUSH
16806: LD_VAR 0 7
16810: PPUSH
16811: CALL_OW 12
16815: ARRAY
16816: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
16817: LD_ADDR_OWVAR 40
16821: PUSH
16822: LD_VAR 0 8
16826: PUSH
16827: LD_INT 1
16829: PPUSH
16830: LD_VAR 0 8
16834: PPUSH
16835: CALL_OW 12
16839: ARRAY
16840: ST_TO_ADDR
// for j = 1 to RuWeapons do
16841: LD_ADDR_VAR 0 14
16845: PUSH
16846: DOUBLE
16847: LD_INT 1
16849: DEC
16850: ST_TO_ADDR
16851: LD_VAR 0 8
16855: PUSH
16856: FOR_TO
16857: IFFALSE 17059
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
16859: LD_VAR 0 8
16863: PUSH
16864: LD_VAR 0 14
16868: ARRAY
16869: PUSH
16870: LD_INT 42
16872: EQUAL
16873: PUSH
16874: LD_VAR 0 8
16878: PUSH
16879: LD_VAR 0 14
16883: ARRAY
16884: PUSH
16885: LD_INT 43
16887: EQUAL
16888: OR
16889: PUSH
16890: LD_VAR 0 8
16894: PUSH
16895: LD_VAR 0 14
16899: ARRAY
16900: PUSH
16901: LD_INT 44
16903: EQUAL
16904: OR
16905: PUSH
16906: LD_VAR 0 8
16910: PUSH
16911: LD_VAR 0 14
16915: ARRAY
16916: PUSH
16917: LD_INT 45
16919: EQUAL
16920: OR
16921: PUSH
16922: LD_VAR 0 8
16926: PUSH
16927: LD_VAR 0 14
16931: ARRAY
16932: PUSH
16933: LD_INT 49
16935: EQUAL
16936: OR
16937: IFFALSE 16986
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
16939: LD_ADDR_VAR 0 17
16943: PUSH
16944: LD_INT 21
16946: PUSH
16947: LD_INT 22
16949: PUSH
16950: LD_INT 23
16952: PUSH
16953: LD_INT 24
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: LIST
16960: LIST
16961: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
16962: LD_ADDR_OWVAR 37
16966: PUSH
16967: LD_VAR 0 17
16971: PUSH
16972: LD_INT 1
16974: PPUSH
16975: LD_VAR 0 17
16979: PPUSH
16980: CALL_OW 12
16984: ARRAY
16985: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
16986: LD_VAR 0 8
16990: PUSH
16991: LD_VAR 0 14
16995: ARRAY
16996: PUSH
16997: LD_INT 46
16999: EQUAL
17000: PUSH
17001: LD_VAR 0 8
17005: PUSH
17006: LD_VAR 0 14
17010: ARRAY
17011: PUSH
17012: LD_INT 47
17014: EQUAL
17015: OR
17016: IFFALSE 17057
// begin ruChassisTab = [ 23 , 24 ] ;
17018: LD_ADDR_VAR 0 17
17022: PUSH
17023: LD_INT 23
17025: PUSH
17026: LD_INT 24
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
17033: LD_ADDR_OWVAR 37
17037: PUSH
17038: LD_VAR 0 17
17042: PUSH
17043: LD_INT 1
17045: PPUSH
17046: LD_VAR 0 17
17050: PPUSH
17051: CALL_OW 12
17055: ARRAY
17056: ST_TO_ADDR
// end ; end ;
17057: GO 16856
17059: POP
17060: POP
// veh = CreateVehicle ;
17061: LD_ADDR_VAR 0 16
17065: PUSH
17066: CALL_OW 45
17070: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
17071: LD_VAR 0 16
17075: PPUSH
17076: LD_VAR 0 1
17080: PPUSH
17081: LD_INT 0
17083: PPUSH
17084: CALL_OW 49
// if vc_control = 1 then
17088: LD_OWVAR 38
17092: PUSH
17093: LD_INT 1
17095: EQUAL
17096: IFFALSE 17153
// begin hc_gallery =  ;
17098: LD_ADDR_OWVAR 33
17102: PUSH
17103: LD_STRING 
17105: ST_TO_ADDR
// hc_name =  ;
17106: LD_ADDR_OWVAR 26
17110: PUSH
17111: LD_STRING 
17113: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
17114: LD_INT 0
17116: PPUSH
17117: LD_INT 3
17119: PPUSH
17120: LD_VAR 0 4
17124: PPUSH
17125: CALL_OW 380
// un = CreateHuman ;
17129: LD_ADDR_VAR 0 15
17133: PUSH
17134: CALL_OW 44
17138: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
17139: LD_VAR 0 15
17143: PPUSH
17144: LD_VAR 0 16
17148: PPUSH
17149: CALL_OW 52
// end ; i = i + 1 ;
17153: LD_ADDR_VAR 0 13
17157: PUSH
17158: LD_VAR 0 13
17162: PUSH
17163: LD_INT 1
17165: PLUS
17166: ST_TO_ADDR
// end ; until i = vehCount ;
17167: LD_VAR 0 13
17171: PUSH
17172: LD_VAR 0 3
17176: EQUAL
17177: IFFALSE 15803
// repeat wait ( 0 0$1 ) ;
17179: LD_INT 35
17181: PPUSH
17182: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
17186: LD_ADDR_VAR 0 20
17190: PUSH
17191: LD_INT 22
17193: PUSH
17194: LD_VAR 0 2
17198: PUSH
17199: EMPTY
17200: LIST
17201: LIST
17202: PUSH
17203: LD_INT 21
17205: PUSH
17206: LD_INT 2
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 24
17215: PUSH
17216: LD_INT 650
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: LIST
17227: PPUSH
17228: CALL_OW 69
17232: ST_TO_ADDR
// if vehicleOK_list > 0 then
17233: LD_VAR 0 20
17237: PUSH
17238: LD_INT 0
17240: GREATER
17241: IFFALSE 17432
// begin for i in vehicleOK_list do
17243: LD_ADDR_VAR 0 13
17247: PUSH
17248: LD_VAR 0 20
17252: PUSH
17253: FOR_IN
17254: IFFALSE 17430
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
17256: LD_ADDR_VAR 0 21
17260: PUSH
17261: LD_INT 22
17263: PUSH
17264: LD_VAR 0 11
17268: PUSH
17269: EMPTY
17270: LIST
17271: LIST
17272: PPUSH
17273: CALL_OW 69
17277: PPUSH
17278: LD_VAR 0 13
17282: PPUSH
17283: CALL_OW 74
17287: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
17288: LD_ADDR_VAR 0 22
17292: PUSH
17293: LD_INT 22
17295: PUSH
17296: LD_VAR 0 11
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: LD_INT 2
17307: PUSH
17308: LD_INT 59
17310: PUSH
17311: EMPTY
17312: LIST
17313: PUSH
17314: LD_INT 21
17316: PUSH
17317: LD_INT 1
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PUSH
17324: LD_INT 21
17326: PUSH
17327: LD_INT 2
17329: PUSH
17330: EMPTY
17331: LIST
17332: LIST
17333: PUSH
17334: EMPTY
17335: LIST
17336: LIST
17337: LIST
17338: LIST
17339: PUSH
17340: EMPTY
17341: LIST
17342: LIST
17343: PUSH
17344: EMPTY
17345: LIST
17346: PPUSH
17347: CALL_OW 69
17351: PPUSH
17352: LD_VAR 0 13
17356: PPUSH
17357: CALL_OW 74
17361: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
17362: LD_VAR 0 13
17366: PPUSH
17367: LD_VAR 0 21
17371: PPUSH
17372: CALL_OW 296
17376: PUSH
17377: LD_INT 8
17379: PLUS
17380: PUSH
17381: LD_VAR 0 13
17385: PPUSH
17386: LD_VAR 0 22
17390: PPUSH
17391: CALL_OW 296
17395: LESS
17396: IFFALSE 17414
// begin ComAttackUnit ( i , target1 ) ;
17398: LD_VAR 0 13
17402: PPUSH
17403: LD_VAR 0 21
17407: PPUSH
17408: CALL_OW 115
// end else
17412: GO 17428
// begin ComAttackUnit ( i , target2 ) ;
17414: LD_VAR 0 13
17418: PPUSH
17419: LD_VAR 0 22
17423: PPUSH
17424: CALL_OW 115
// end ; end ;
17428: GO 17253
17430: POP
17431: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
17432: LD_INT 22
17434: PUSH
17435: LD_VAR 0 2
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: LD_INT 21
17446: PUSH
17447: LD_INT 2
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: EMPTY
17455: LIST
17456: LIST
17457: PPUSH
17458: CALL_OW 69
17462: PUSH
17463: LD_INT 0
17465: EQUAL
17466: IFFALSE 17179
// end ;
17468: LD_VAR 0 12
17472: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
17473: LD_INT 0
17475: PPUSH
17476: PPUSH
17477: PPUSH
17478: PPUSH
17479: PPUSH
17480: PPUSH
17481: PPUSH
17482: PPUSH
17483: PPUSH
17484: PPUSH
17485: PPUSH
// for i = 1 to soldierCount do
17486: LD_ADDR_VAR 0 13
17490: PUSH
17491: DOUBLE
17492: LD_INT 1
17494: DEC
17495: ST_TO_ADDR
17496: LD_VAR 0 3
17500: PUSH
17501: FOR_TO
17502: IFFALSE 17584
// begin uc_side = side ;
17504: LD_ADDR_OWVAR 20
17508: PUSH
17509: LD_VAR 0 1
17513: ST_TO_ADDR
// uc_nation = nation ;
17514: LD_ADDR_OWVAR 21
17518: PUSH
17519: LD_VAR 0 2
17523: ST_TO_ADDR
// hc_name =  ;
17524: LD_ADDR_OWVAR 26
17528: PUSH
17529: LD_STRING 
17531: ST_TO_ADDR
// hc_gallery =  ;
17532: LD_ADDR_OWVAR 33
17536: PUSH
17537: LD_STRING 
17539: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
17540: LD_INT 0
17542: PPUSH
17543: LD_INT 1
17545: PPUSH
17546: LD_VAR 0 8
17550: PPUSH
17551: CALL_OW 380
// un = CreateHuman ;
17555: LD_ADDR_VAR 0 15
17559: PUSH
17560: CALL_OW 44
17564: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17565: LD_VAR 0 15
17569: PPUSH
17570: LD_VAR 0 9
17574: PPUSH
17575: LD_INT 0
17577: PPUSH
17578: CALL_OW 49
// end ;
17582: GO 17501
17584: POP
17585: POP
// for i = 1 to sniperCount do
17586: LD_ADDR_VAR 0 13
17590: PUSH
17591: DOUBLE
17592: LD_INT 1
17594: DEC
17595: ST_TO_ADDR
17596: LD_VAR 0 4
17600: PUSH
17601: FOR_TO
17602: IFFALSE 17684
// begin uc_side = side ;
17604: LD_ADDR_OWVAR 20
17608: PUSH
17609: LD_VAR 0 1
17613: ST_TO_ADDR
// uc_nation = nation ;
17614: LD_ADDR_OWVAR 21
17618: PUSH
17619: LD_VAR 0 2
17623: ST_TO_ADDR
// hc_name =  ;
17624: LD_ADDR_OWVAR 26
17628: PUSH
17629: LD_STRING 
17631: ST_TO_ADDR
// hc_gallery =  ;
17632: LD_ADDR_OWVAR 33
17636: PUSH
17637: LD_STRING 
17639: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
17640: LD_INT 0
17642: PPUSH
17643: LD_INT 5
17645: PPUSH
17646: LD_VAR 0 8
17650: PPUSH
17651: CALL_OW 380
// un = CreateHuman ;
17655: LD_ADDR_VAR 0 15
17659: PUSH
17660: CALL_OW 44
17664: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17665: LD_VAR 0 15
17669: PPUSH
17670: LD_VAR 0 9
17674: PPUSH
17675: LD_INT 0
17677: PPUSH
17678: CALL_OW 49
// end ;
17682: GO 17601
17684: POP
17685: POP
// for i = 1 to bazookCount do
17686: LD_ADDR_VAR 0 13
17690: PUSH
17691: DOUBLE
17692: LD_INT 1
17694: DEC
17695: ST_TO_ADDR
17696: LD_VAR 0 5
17700: PUSH
17701: FOR_TO
17702: IFFALSE 17784
// begin uc_side = side ;
17704: LD_ADDR_OWVAR 20
17708: PUSH
17709: LD_VAR 0 1
17713: ST_TO_ADDR
// uc_nation = nation ;
17714: LD_ADDR_OWVAR 21
17718: PUSH
17719: LD_VAR 0 2
17723: ST_TO_ADDR
// hc_name =  ;
17724: LD_ADDR_OWVAR 26
17728: PUSH
17729: LD_STRING 
17731: ST_TO_ADDR
// hc_gallery =  ;
17732: LD_ADDR_OWVAR 33
17736: PUSH
17737: LD_STRING 
17739: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
17740: LD_INT 0
17742: PPUSH
17743: LD_INT 9
17745: PPUSH
17746: LD_VAR 0 8
17750: PPUSH
17751: CALL_OW 380
// un = CreateHuman ;
17755: LD_ADDR_VAR 0 15
17759: PUSH
17760: CALL_OW 44
17764: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17765: LD_VAR 0 15
17769: PPUSH
17770: LD_VAR 0 9
17774: PPUSH
17775: LD_INT 0
17777: PPUSH
17778: CALL_OW 49
// end ;
17782: GO 17701
17784: POP
17785: POP
// for i = 1 to mortalCount do
17786: LD_ADDR_VAR 0 13
17790: PUSH
17791: DOUBLE
17792: LD_INT 1
17794: DEC
17795: ST_TO_ADDR
17796: LD_VAR 0 6
17800: PUSH
17801: FOR_TO
17802: IFFALSE 17884
// begin uc_side = side ;
17804: LD_ADDR_OWVAR 20
17808: PUSH
17809: LD_VAR 0 1
17813: ST_TO_ADDR
// uc_nation = nation ;
17814: LD_ADDR_OWVAR 21
17818: PUSH
17819: LD_VAR 0 2
17823: ST_TO_ADDR
// hc_name =  ;
17824: LD_ADDR_OWVAR 26
17828: PUSH
17829: LD_STRING 
17831: ST_TO_ADDR
// hc_gallery =  ;
17832: LD_ADDR_OWVAR 33
17836: PUSH
17837: LD_STRING 
17839: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
17840: LD_INT 0
17842: PPUSH
17843: LD_INT 8
17845: PPUSH
17846: LD_VAR 0 8
17850: PPUSH
17851: CALL_OW 380
// un = CreateHuman ;
17855: LD_ADDR_VAR 0 15
17859: PUSH
17860: CALL_OW 44
17864: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
17865: LD_VAR 0 15
17869: PPUSH
17870: LD_VAR 0 9
17874: PPUSH
17875: LD_INT 0
17877: PPUSH
17878: CALL_OW 49
// end ;
17882: GO 17801
17884: POP
17885: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
17886: LD_ADDR_VAR 0 18
17890: PUSH
17891: LD_INT 22
17893: PUSH
17894: LD_VAR 0 1
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PUSH
17903: LD_INT 2
17905: PUSH
17906: LD_INT 25
17908: PUSH
17909: LD_INT 1
17911: PUSH
17912: EMPTY
17913: LIST
17914: LIST
17915: PUSH
17916: LD_INT 25
17918: PUSH
17919: LD_INT 5
17921: PUSH
17922: EMPTY
17923: LIST
17924: LIST
17925: PUSH
17926: LD_INT 25
17928: PUSH
17929: LD_INT 8
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: PUSH
17936: LD_INT 25
17938: PUSH
17939: LD_INT 9
17941: PUSH
17942: EMPTY
17943: LIST
17944: LIST
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: LIST
17950: LIST
17951: LIST
17952: PUSH
17953: EMPTY
17954: LIST
17955: LIST
17956: PPUSH
17957: CALL_OW 69
17961: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
17962: LD_ADDR_VAR 0 17
17966: PUSH
17967: LD_INT 22
17969: PUSH
17970: LD_VAR 0 1
17974: PUSH
17975: EMPTY
17976: LIST
17977: LIST
17978: PUSH
17979: LD_INT 25
17981: PUSH
17982: LD_INT 4
17984: PUSH
17985: EMPTY
17986: LIST
17987: LIST
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PPUSH
17993: CALL_OW 69
17997: ST_TO_ADDR
// for i in medic_list do
17998: LD_ADDR_VAR 0 13
18002: PUSH
18003: LD_VAR 0 17
18007: PUSH
18008: FOR_IN
18009: IFFALSE 18027
// ComMoveToArea ( i , healArea ) ;
18011: LD_VAR 0 13
18015: PPUSH
18016: LD_VAR 0 10
18020: PPUSH
18021: CALL_OW 113
18025: GO 18008
18027: POP
18028: POP
// repeat wait ( 0 0$1 ) ;
18029: LD_INT 35
18031: PPUSH
18032: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
18036: LD_ADDR_VAR 0 16
18040: PUSH
18041: LD_INT 22
18043: PUSH
18044: LD_VAR 0 1
18048: PUSH
18049: EMPTY
18050: LIST
18051: LIST
18052: PUSH
18053: LD_INT 1
18055: PUSH
18056: LD_INT 3
18058: PUSH
18059: LD_INT 24
18061: PUSH
18062: LD_INT 550
18064: PUSH
18065: EMPTY
18066: LIST
18067: LIST
18068: PUSH
18069: EMPTY
18070: LIST
18071: LIST
18072: PUSH
18073: LD_INT 24
18075: PUSH
18076: LD_INT 250
18078: PUSH
18079: EMPTY
18080: LIST
18081: LIST
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: LIST
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PPUSH
18092: CALL_OW 69
18096: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
18097: LD_ADDR_VAR 0 18
18101: PUSH
18102: LD_INT 22
18104: PUSH
18105: LD_VAR 0 1
18109: PUSH
18110: EMPTY
18111: LIST
18112: LIST
18113: PUSH
18114: LD_INT 2
18116: PUSH
18117: LD_INT 25
18119: PUSH
18120: LD_INT 1
18122: PUSH
18123: EMPTY
18124: LIST
18125: LIST
18126: PUSH
18127: LD_INT 25
18129: PUSH
18130: LD_INT 5
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PUSH
18137: LD_INT 25
18139: PUSH
18140: LD_INT 8
18142: PUSH
18143: EMPTY
18144: LIST
18145: LIST
18146: PUSH
18147: LD_INT 25
18149: PUSH
18150: LD_INT 9
18152: PUSH
18153: EMPTY
18154: LIST
18155: LIST
18156: PUSH
18157: EMPTY
18158: LIST
18159: LIST
18160: LIST
18161: LIST
18162: LIST
18163: PUSH
18164: LD_INT 24
18166: PUSH
18167: LD_INT 1000
18169: PUSH
18170: EMPTY
18171: LIST
18172: LIST
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: LIST
18178: PPUSH
18179: CALL_OW 69
18183: ST_TO_ADDR
// if medicCount > 0 then
18184: LD_VAR 0 7
18188: PUSH
18189: LD_INT 0
18191: GREATER
18192: IFFALSE 18266
// begin if damageUnit_list > 0 then
18194: LD_VAR 0 16
18198: PUSH
18199: LD_INT 0
18201: GREATER
18202: IFFALSE 18266
// begin for i in damageUnit_list do
18204: LD_ADDR_VAR 0 13
18208: PUSH
18209: LD_VAR 0 16
18213: PUSH
18214: FOR_IN
18215: IFFALSE 18264
// begin ComMoveToArea ( i , healArea ) ;
18217: LD_VAR 0 13
18221: PPUSH
18222: LD_VAR 0 10
18226: PPUSH
18227: CALL_OW 113
// for j in medic_list do
18231: LD_ADDR_VAR 0 14
18235: PUSH
18236: LD_VAR 0 17
18240: PUSH
18241: FOR_IN
18242: IFFALSE 18260
// AddComHeal ( j , i ) ;
18244: LD_VAR 0 14
18248: PPUSH
18249: LD_VAR 0 13
18253: PPUSH
18254: CALL_OW 188
18258: GO 18241
18260: POP
18261: POP
// end ;
18262: GO 18214
18264: POP
18265: POP
// end ; end ; for i in soldiersOK_list do
18266: LD_ADDR_VAR 0 13
18270: PUSH
18271: LD_VAR 0 18
18275: PUSH
18276: FOR_IN
18277: IFFALSE 18453
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18279: LD_ADDR_VAR 0 21
18283: PUSH
18284: LD_INT 22
18286: PUSH
18287: LD_VAR 0 11
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PPUSH
18296: CALL_OW 69
18300: PPUSH
18301: LD_VAR 0 13
18305: PPUSH
18306: CALL_OW 74
18310: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18311: LD_ADDR_VAR 0 22
18315: PUSH
18316: LD_INT 22
18318: PUSH
18319: LD_VAR 0 11
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PUSH
18328: LD_INT 2
18330: PUSH
18331: LD_INT 59
18333: PUSH
18334: EMPTY
18335: LIST
18336: PUSH
18337: LD_INT 21
18339: PUSH
18340: LD_INT 1
18342: PUSH
18343: EMPTY
18344: LIST
18345: LIST
18346: PUSH
18347: LD_INT 21
18349: PUSH
18350: LD_INT 2
18352: PUSH
18353: EMPTY
18354: LIST
18355: LIST
18356: PUSH
18357: EMPTY
18358: LIST
18359: LIST
18360: LIST
18361: LIST
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: EMPTY
18368: LIST
18369: PPUSH
18370: CALL_OW 69
18374: PPUSH
18375: LD_VAR 0 13
18379: PPUSH
18380: CALL_OW 74
18384: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18385: LD_VAR 0 13
18389: PPUSH
18390: LD_VAR 0 21
18394: PPUSH
18395: CALL_OW 296
18399: PUSH
18400: LD_INT 8
18402: PLUS
18403: PUSH
18404: LD_VAR 0 13
18408: PPUSH
18409: LD_VAR 0 22
18413: PPUSH
18414: CALL_OW 296
18418: LESS
18419: IFFALSE 18437
// begin ComAttackUnit ( i , target1 ) ;
18421: LD_VAR 0 13
18425: PPUSH
18426: LD_VAR 0 21
18430: PPUSH
18431: CALL_OW 115
// end else
18435: GO 18451
// begin ComAttackUnit ( i , target2 ) ;
18437: LD_VAR 0 13
18441: PPUSH
18442: LD_VAR 0 22
18446: PPUSH
18447: CALL_OW 115
// end ; end ;
18451: GO 18276
18453: POP
18454: POP
// for i in soldiersOK_list do
18455: LD_ADDR_VAR 0 13
18459: PUSH
18460: LD_VAR 0 18
18464: PUSH
18465: FOR_IN
18466: IFFALSE 18642
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
18468: LD_ADDR_VAR 0 21
18472: PUSH
18473: LD_INT 22
18475: PUSH
18476: LD_VAR 0 11
18480: PUSH
18481: EMPTY
18482: LIST
18483: LIST
18484: PPUSH
18485: CALL_OW 69
18489: PPUSH
18490: LD_VAR 0 13
18494: PPUSH
18495: CALL_OW 74
18499: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
18500: LD_ADDR_VAR 0 22
18504: PUSH
18505: LD_INT 22
18507: PUSH
18508: LD_VAR 0 11
18512: PUSH
18513: EMPTY
18514: LIST
18515: LIST
18516: PUSH
18517: LD_INT 2
18519: PUSH
18520: LD_INT 59
18522: PUSH
18523: EMPTY
18524: LIST
18525: PUSH
18526: LD_INT 21
18528: PUSH
18529: LD_INT 1
18531: PUSH
18532: EMPTY
18533: LIST
18534: LIST
18535: PUSH
18536: LD_INT 21
18538: PUSH
18539: LD_INT 2
18541: PUSH
18542: EMPTY
18543: LIST
18544: LIST
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: LIST
18550: LIST
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: EMPTY
18557: LIST
18558: PPUSH
18559: CALL_OW 69
18563: PPUSH
18564: LD_VAR 0 13
18568: PPUSH
18569: CALL_OW 74
18573: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
18574: LD_VAR 0 13
18578: PPUSH
18579: LD_VAR 0 21
18583: PPUSH
18584: CALL_OW 296
18588: PUSH
18589: LD_INT 8
18591: PLUS
18592: PUSH
18593: LD_VAR 0 13
18597: PPUSH
18598: LD_VAR 0 22
18602: PPUSH
18603: CALL_OW 296
18607: LESS
18608: IFFALSE 18626
// begin ComAttackUnit ( i , target1 ) ;
18610: LD_VAR 0 13
18614: PPUSH
18615: LD_VAR 0 21
18619: PPUSH
18620: CALL_OW 115
// end else
18624: GO 18640
// begin ComAttackUnit ( i , target2 ) ;
18626: LD_VAR 0 13
18630: PPUSH
18631: LD_VAR 0 22
18635: PPUSH
18636: CALL_OW 115
// end ; end ;
18640: GO 18465
18642: POP
18643: POP
// until soldiersOK_list = [ ] ;
18644: LD_VAR 0 18
18648: PUSH
18649: EMPTY
18650: EQUAL
18651: IFFALSE 18029
// end ;
18653: LD_VAR 0 12
18657: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
18658: LD_INT 0
18660: PPUSH
18661: PPUSH
18662: PPUSH
18663: PPUSH
18664: PPUSH
18665: PPUSH
18666: PPUSH
// repeat wait ( 0 0$1 ) ;
18667: LD_INT 35
18669: PPUSH
18670: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
18674: LD_ADDR_VAR 0 7
18678: PUSH
18679: LD_INT 22
18681: PUSH
18682: LD_INT 2
18684: PUSH
18685: EMPTY
18686: LIST
18687: LIST
18688: PUSH
18689: LD_INT 25
18691: PUSH
18692: LD_INT 4
18694: PUSH
18695: EMPTY
18696: LIST
18697: LIST
18698: PUSH
18699: LD_INT 3
18701: PUSH
18702: LD_INT 60
18704: PUSH
18705: EMPTY
18706: LIST
18707: PUSH
18708: EMPTY
18709: LIST
18710: LIST
18711: PUSH
18712: EMPTY
18713: LIST
18714: LIST
18715: LIST
18716: PPUSH
18717: CALL_OW 69
18721: ST_TO_ADDR
// if not tmp then
18722: LD_VAR 0 7
18726: NOT
18727: IFFALSE 18731
// continue ;
18729: GO 18667
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
18731: LD_ADDR_VAR 0 3
18735: PUSH
18736: LD_INT 5
18738: PPUSH
18739: LD_INT 22
18741: PUSH
18742: LD_INT 0
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: LD_INT 25
18751: PUSH
18752: LD_INT 12
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: EMPTY
18760: LIST
18761: LIST
18762: PPUSH
18763: CALL_OW 70
18767: PUSH
18768: FOR_IN
18769: IFFALSE 18802
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
18771: LD_VAR 0 7
18775: PPUSH
18776: LD_VAR 0 3
18780: PPUSH
18781: CALL_OW 250
18785: PPUSH
18786: LD_VAR 0 3
18790: PPUSH
18791: CALL_OW 251
18795: PPUSH
18796: CALL_OW 131
18800: GO 18768
18802: POP
18803: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
18804: LD_INT 22
18806: PUSH
18807: LD_INT 2
18809: PUSH
18810: EMPTY
18811: LIST
18812: LIST
18813: PUSH
18814: LD_INT 25
18816: PUSH
18817: LD_INT 4
18819: PUSH
18820: EMPTY
18821: LIST
18822: LIST
18823: PUSH
18824: EMPTY
18825: LIST
18826: LIST
18827: PPUSH
18828: CALL_OW 69
18832: PUSH
18833: LD_INT 0
18835: EQUAL
18836: PUSH
18837: LD_INT 5
18839: PPUSH
18840: LD_INT 22
18842: PUSH
18843: LD_INT 0
18845: PUSH
18846: EMPTY
18847: LIST
18848: LIST
18849: PUSH
18850: LD_INT 25
18852: PUSH
18853: LD_INT 12
18855: PUSH
18856: EMPTY
18857: LIST
18858: LIST
18859: PUSH
18860: EMPTY
18861: LIST
18862: LIST
18863: PPUSH
18864: CALL_OW 70
18868: PUSH
18869: LD_INT 2
18871: LESS
18872: OR
18873: PUSH
18874: LD_OWVAR 1
18878: PUSH
18879: LD_INT 7000
18881: GREATEREQUAL
18882: OR
18883: IFFALSE 18667
// repeat wait ( 0 0$1 ) ;
18885: LD_INT 35
18887: PPUSH
18888: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
18892: LD_ADDR_VAR 0 5
18896: PUSH
18897: LD_INT 22
18899: PUSH
18900: LD_INT 2
18902: PUSH
18903: EMPTY
18904: LIST
18905: LIST
18906: PUSH
18907: LD_INT 30
18909: PUSH
18910: LD_INT 5
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PUSH
18917: EMPTY
18918: LIST
18919: LIST
18920: PPUSH
18921: CALL_OW 69
18925: ST_TO_ADDR
// until arm ;
18926: LD_VAR 0 5
18930: IFFALSE 18885
// wait ( 0 0$25 ) ;
18932: LD_INT 875
18934: PPUSH
18935: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
18939: LD_ADDR_VAR 0 6
18943: PUSH
18944: LD_INT 22
18946: PUSH
18947: LD_INT 2
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PUSH
18954: LD_INT 2
18956: PUSH
18957: LD_INT 30
18959: PUSH
18960: LD_INT 0
18962: PUSH
18963: EMPTY
18964: LIST
18965: LIST
18966: PUSH
18967: LD_INT 30
18969: PUSH
18970: LD_INT 1
18972: PUSH
18973: EMPTY
18974: LIST
18975: LIST
18976: PUSH
18977: EMPTY
18978: LIST
18979: LIST
18980: LIST
18981: PUSH
18982: EMPTY
18983: LIST
18984: LIST
18985: PPUSH
18986: CALL_OW 69
18990: ST_TO_ADDR
// j := 0 ;
18991: LD_ADDR_VAR 0 3
18995: PUSH
18996: LD_INT 0
18998: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
18999: LD_ADDR_VAR 0 2
19003: PUSH
19004: LD_INT 22
19006: PUSH
19007: LD_INT 2
19009: PUSH
19010: EMPTY
19011: LIST
19012: LIST
19013: PUSH
19014: LD_INT 25
19016: PUSH
19017: LD_INT 12
19019: PUSH
19020: EMPTY
19021: LIST
19022: LIST
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PPUSH
19028: CALL_OW 69
19032: PUSH
19033: FOR_IN
19034: IFFALSE 19121
// begin ComMoveXY ( i , 63 , 16 ) ;
19036: LD_VAR 0 2
19040: PPUSH
19041: LD_INT 63
19043: PPUSH
19044: LD_INT 16
19046: PPUSH
19047: CALL_OW 111
// j := j + 1 ;
19051: LD_ADDR_VAR 0 3
19055: PUSH
19056: LD_VAR 0 3
19060: PUSH
19061: LD_INT 1
19063: PLUS
19064: ST_TO_ADDR
// if j < 5 then
19065: LD_VAR 0 3
19069: PUSH
19070: LD_INT 5
19072: LESS
19073: IFFALSE 19091
// b := arm [ 1 ] else
19075: LD_ADDR_VAR 0 4
19079: PUSH
19080: LD_VAR 0 5
19084: PUSH
19085: LD_INT 1
19087: ARRAY
19088: ST_TO_ADDR
19089: GO 19105
// b := dep [ 1 ] ;
19091: LD_ADDR_VAR 0 4
19095: PUSH
19096: LD_VAR 0 6
19100: PUSH
19101: LD_INT 1
19103: ARRAY
19104: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
19105: LD_VAR 0 2
19109: PPUSH
19110: LD_VAR 0 4
19114: PPUSH
19115: CALL_OW 180
// end ;
19119: GO 19033
19121: POP
19122: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
19123: LD_ADDR_VAR 0 2
19127: PUSH
19128: LD_INT 22
19130: PUSH
19131: LD_INT 2
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PUSH
19138: LD_INT 25
19140: PUSH
19141: LD_INT 4
19143: PUSH
19144: EMPTY
19145: LIST
19146: LIST
19147: PUSH
19148: EMPTY
19149: LIST
19150: LIST
19151: PPUSH
19152: CALL_OW 69
19156: PUSH
19157: FOR_IN
19158: IFFALSE 19204
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
19160: LD_VAR 0 2
19164: PPUSH
19165: LD_INT 22
19167: PUSH
19168: LD_INT 2
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: LD_INT 30
19177: PUSH
19178: LD_INT 8
19180: PUSH
19181: EMPTY
19182: LIST
19183: LIST
19184: PUSH
19185: EMPTY
19186: LIST
19187: LIST
19188: PPUSH
19189: CALL_OW 69
19193: PUSH
19194: LD_INT 1
19196: ARRAY
19197: PPUSH
19198: CALL_OW 120
19202: GO 19157
19204: POP
19205: POP
// end ;
19206: LD_VAR 0 1
19210: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
19211: LD_INT 0
19213: PPUSH
19214: PPUSH
19215: PPUSH
19216: PPUSH
19217: PPUSH
19218: PPUSH
19219: PPUSH
19220: PPUSH
19221: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
19222: LD_INT 22
19224: PUSH
19225: LD_VAR 0 1
19229: PUSH
19230: EMPTY
19231: LIST
19232: LIST
19233: PUSH
19234: LD_INT 21
19236: PUSH
19237: LD_INT 2
19239: PUSH
19240: EMPTY
19241: LIST
19242: LIST
19243: PUSH
19244: EMPTY
19245: LIST
19246: LIST
19247: PPUSH
19248: CALL_OW 69
19252: PUSH
19253: LD_VAR 0 3
19257: LESSEQUAL
19258: IFFALSE 19402
// for i = 1 to vehCount do
19260: LD_ADDR_VAR 0 10
19264: PUSH
19265: DOUBLE
19266: LD_INT 1
19268: DEC
19269: ST_TO_ADDR
19270: LD_VAR 0 3
19274: PUSH
19275: FOR_TO
19276: IFFALSE 19400
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
19278: LD_ADDR_VAR 0 12
19282: PUSH
19283: LD_VAR 0 5
19287: PUSH
19288: LD_INT 1
19290: PPUSH
19291: LD_VAR 0 5
19295: PPUSH
19296: CALL_OW 12
19300: ARRAY
19301: ST_TO_ADDR
// if randWeapon = 46 then
19302: LD_VAR 0 12
19306: PUSH
19307: LD_INT 46
19309: EQUAL
19310: IFFALSE 19355
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
19312: LD_VAR 0 2
19316: PPUSH
19317: LD_INT 24
19319: PPUSH
19320: LD_VAR 0 6
19324: PPUSH
19325: LD_VAR 0 7
19329: PUSH
19330: LD_INT 1
19332: PPUSH
19333: LD_VAR 0 7
19337: PPUSH
19338: CALL_OW 12
19342: ARRAY
19343: PPUSH
19344: LD_VAR 0 12
19348: PPUSH
19349: CALL_OW 185
19353: GO 19398
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
19355: LD_VAR 0 2
19359: PPUSH
19360: LD_VAR 0 8
19364: PPUSH
19365: LD_VAR 0 6
19369: PPUSH
19370: LD_VAR 0 7
19374: PUSH
19375: LD_INT 1
19377: PPUSH
19378: LD_VAR 0 7
19382: PPUSH
19383: CALL_OW 12
19387: ARRAY
19388: PPUSH
19389: LD_VAR 0 12
19393: PPUSH
19394: CALL_OW 185
// end ;
19398: GO 19275
19400: POP
19401: POP
// repeat wait ( 0 0$1 ) ;
19402: LD_INT 35
19404: PPUSH
19405: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
19409: LD_INT 22
19411: PUSH
19412: LD_VAR 0 1
19416: PUSH
19417: EMPTY
19418: LIST
19419: LIST
19420: PUSH
19421: LD_INT 21
19423: PUSH
19424: LD_INT 2
19426: PUSH
19427: EMPTY
19428: LIST
19429: LIST
19430: PUSH
19431: LD_INT 24
19433: PUSH
19434: LD_INT 250
19436: PUSH
19437: EMPTY
19438: LIST
19439: LIST
19440: PUSH
19441: EMPTY
19442: LIST
19443: LIST
19444: LIST
19445: PPUSH
19446: CALL_OW 69
19450: PUSH
19451: LD_VAR 0 3
19455: GREATEREQUAL
19456: IFFALSE 19402
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
19458: LD_INT 22
19460: PUSH
19461: LD_VAR 0 1
19465: PUSH
19466: EMPTY
19467: LIST
19468: LIST
19469: PUSH
19470: LD_INT 21
19472: PUSH
19473: LD_INT 2
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PUSH
19480: LD_INT 24
19482: PUSH
19483: LD_INT 250
19485: PUSH
19486: EMPTY
19487: LIST
19488: LIST
19489: PUSH
19490: EMPTY
19491: LIST
19492: LIST
19493: LIST
19494: PPUSH
19495: CALL_OW 69
19499: PUSH
19500: LD_VAR 0 3
19504: GREATEREQUAL
19505: IFFALSE 19848
// begin repeat begin wait ( 0 0$1 ) ;
19507: LD_INT 35
19509: PPUSH
19510: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
19514: LD_INT 22
19516: PUSH
19517: LD_VAR 0 1
19521: PUSH
19522: EMPTY
19523: LIST
19524: LIST
19525: PUSH
19526: LD_INT 21
19528: PUSH
19529: LD_INT 2
19531: PUSH
19532: EMPTY
19533: LIST
19534: LIST
19535: PUSH
19536: LD_INT 24
19538: PUSH
19539: LD_INT 651
19541: PUSH
19542: EMPTY
19543: LIST
19544: LIST
19545: PUSH
19546: EMPTY
19547: LIST
19548: LIST
19549: LIST
19550: PPUSH
19551: CALL_OW 69
19555: PUSH
19556: LD_INT 0
19558: GREATER
19559: IFFALSE 19787
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
19561: LD_ADDR_VAR 0 10
19565: PUSH
19566: LD_INT 22
19568: PUSH
19569: LD_VAR 0 1
19573: PUSH
19574: EMPTY
19575: LIST
19576: LIST
19577: PUSH
19578: LD_INT 21
19580: PUSH
19581: LD_INT 2
19583: PUSH
19584: EMPTY
19585: LIST
19586: LIST
19587: PUSH
19588: LD_INT 24
19590: PUSH
19591: LD_INT 651
19593: PUSH
19594: EMPTY
19595: LIST
19596: LIST
19597: PUSH
19598: EMPTY
19599: LIST
19600: LIST
19601: LIST
19602: PPUSH
19603: CALL_OW 69
19607: PUSH
19608: FOR_IN
19609: IFFALSE 19785
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19611: LD_ADDR_VAR 0 16
19615: PUSH
19616: LD_INT 22
19618: PUSH
19619: LD_VAR 0 4
19623: PUSH
19624: EMPTY
19625: LIST
19626: LIST
19627: PPUSH
19628: CALL_OW 69
19632: PPUSH
19633: LD_VAR 0 10
19637: PPUSH
19638: CALL_OW 74
19642: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19643: LD_ADDR_VAR 0 17
19647: PUSH
19648: LD_INT 22
19650: PUSH
19651: LD_VAR 0 4
19655: PUSH
19656: EMPTY
19657: LIST
19658: LIST
19659: PUSH
19660: LD_INT 2
19662: PUSH
19663: LD_INT 59
19665: PUSH
19666: EMPTY
19667: LIST
19668: PUSH
19669: LD_INT 21
19671: PUSH
19672: LD_INT 1
19674: PUSH
19675: EMPTY
19676: LIST
19677: LIST
19678: PUSH
19679: LD_INT 21
19681: PUSH
19682: LD_INT 2
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: EMPTY
19690: LIST
19691: LIST
19692: LIST
19693: LIST
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: EMPTY
19700: LIST
19701: PPUSH
19702: CALL_OW 69
19706: PPUSH
19707: LD_VAR 0 10
19711: PPUSH
19712: CALL_OW 74
19716: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19717: LD_VAR 0 10
19721: PPUSH
19722: LD_VAR 0 16
19726: PPUSH
19727: CALL_OW 296
19731: PUSH
19732: LD_INT 8
19734: PLUS
19735: PUSH
19736: LD_VAR 0 10
19740: PPUSH
19741: LD_VAR 0 17
19745: PPUSH
19746: CALL_OW 296
19750: LESS
19751: IFFALSE 19769
// begin ComAttackUnit ( i , target1 ) ;
19753: LD_VAR 0 10
19757: PPUSH
19758: LD_VAR 0 16
19762: PPUSH
19763: CALL_OW 115
// end else
19767: GO 19783
// begin ComAttackUnit ( i , target2 ) ;
19769: LD_VAR 0 10
19773: PPUSH
19774: LD_VAR 0 17
19778: PPUSH
19779: CALL_OW 115
// end ; end ;
19783: GO 19608
19785: POP
19786: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
19787: LD_INT 22
19789: PUSH
19790: LD_VAR 0 1
19794: PUSH
19795: EMPTY
19796: LIST
19797: LIST
19798: PUSH
19799: LD_INT 21
19801: PUSH
19802: LD_INT 2
19804: PUSH
19805: EMPTY
19806: LIST
19807: LIST
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PPUSH
19813: CALL_OW 69
19817: PUSH
19818: LD_INT 0
19820: EQUAL
19821: PUSH
19822: LD_INT 22
19824: PUSH
19825: LD_VAR 0 4
19829: PUSH
19830: EMPTY
19831: LIST
19832: LIST
19833: PUSH
19834: EMPTY
19835: LIST
19836: PPUSH
19837: CALL_OW 69
19841: PUSH
19842: LD_INT 0
19844: EQUAL
19845: OR
19846: IFFALSE 19507
// end ; end ;
19848: LD_VAR 0 9
19852: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
19853: LD_INT 0
19855: PPUSH
19856: PPUSH
19857: PPUSH
19858: PPUSH
// r := 100 ;
19859: LD_ADDR_VAR 0 5
19863: PUSH
19864: LD_INT 100
19866: ST_TO_ADDR
// x := 0 ;
19867: LD_ADDR_VAR 0 6
19871: PUSH
19872: LD_INT 0
19874: ST_TO_ADDR
// while ( x < n ) do
19875: LD_VAR 0 6
19879: PUSH
19880: LD_VAR 0 2
19884: LESS
19885: IFFALSE 20172
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
19887: LD_ADDR_VAR 0 4
19891: PUSH
19892: DOUBLE
19893: LD_INT 1
19895: DEC
19896: ST_TO_ADDR
19897: LD_VAR 0 1
19901: PPUSH
19902: LD_INT 0
19904: PPUSH
19905: CALL_OW 517
19909: PUSH
19910: LD_INT 1
19912: ARRAY
19913: PUSH
19914: FOR_TO
19915: IFFALSE 20168
// begin if r > 50 then
19917: LD_VAR 0 5
19921: PUSH
19922: LD_INT 50
19924: GREATER
19925: IFFALSE 20144
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
19927: LD_VAR 0 1
19931: PPUSH
19932: LD_INT 0
19934: PPUSH
19935: CALL_OW 517
19939: PUSH
19940: LD_INT 1
19942: ARRAY
19943: PUSH
19944: LD_VAR 0 4
19948: ARRAY
19949: PPUSH
19950: LD_VAR 0 1
19954: PPUSH
19955: LD_INT 0
19957: PPUSH
19958: CALL_OW 517
19962: PUSH
19963: LD_INT 2
19965: ARRAY
19966: PUSH
19967: LD_VAR 0 4
19971: ARRAY
19972: PPUSH
19973: CALL_OW 458
19977: NOT
19978: IFFALSE 20128
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
19980: LD_VAR 0 1
19984: PPUSH
19985: LD_INT 0
19987: PPUSH
19988: CALL_OW 517
19992: PUSH
19993: LD_INT 1
19995: ARRAY
19996: PUSH
19997: LD_VAR 0 4
20001: ARRAY
20002: PPUSH
20003: LD_VAR 0 1
20007: PPUSH
20008: LD_INT 0
20010: PPUSH
20011: CALL_OW 517
20015: PUSH
20016: LD_INT 2
20018: ARRAY
20019: PUSH
20020: LD_VAR 0 4
20024: ARRAY
20025: PPUSH
20026: LD_INT 5
20028: PPUSH
20029: LD_INT 0
20031: PPUSH
20032: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
20036: LD_ADDR_EXP 50
20040: PUSH
20041: LD_EXP 50
20045: PPUSH
20046: LD_INT 1
20048: PPUSH
20049: LD_VAR 0 1
20053: PPUSH
20054: LD_INT 0
20056: PPUSH
20057: CALL_OW 517
20061: PUSH
20062: LD_INT 1
20064: ARRAY
20065: PUSH
20066: LD_VAR 0 4
20070: ARRAY
20071: PUSH
20072: LD_VAR 0 1
20076: PPUSH
20077: LD_INT 0
20079: PPUSH
20080: CALL_OW 517
20084: PUSH
20085: LD_INT 2
20087: ARRAY
20088: PUSH
20089: LD_VAR 0 4
20093: ARRAY
20094: PUSH
20095: EMPTY
20096: LIST
20097: LIST
20098: PPUSH
20099: CALL_OW 2
20103: ST_TO_ADDR
// r := 0 ;
20104: LD_ADDR_VAR 0 5
20108: PUSH
20109: LD_INT 0
20111: ST_TO_ADDR
// x := x + 1 ;
20112: LD_ADDR_VAR 0 6
20116: PUSH
20117: LD_VAR 0 6
20121: PUSH
20122: LD_INT 1
20124: PLUS
20125: ST_TO_ADDR
// end else
20126: GO 20142
// r := r + 35 ;
20128: LD_ADDR_VAR 0 5
20132: PUSH
20133: LD_VAR 0 5
20137: PUSH
20138: LD_INT 35
20140: PLUS
20141: ST_TO_ADDR
// end else
20142: GO 20166
// r := r + rand ( 10 , 25 ) ;
20144: LD_ADDR_VAR 0 5
20148: PUSH
20149: LD_VAR 0 5
20153: PUSH
20154: LD_INT 10
20156: PPUSH
20157: LD_INT 25
20159: PPUSH
20160: CALL_OW 12
20164: PLUS
20165: ST_TO_ADDR
// end ;
20166: GO 19914
20168: POP
20169: POP
20170: GO 19875
// end ; end_of_file
20172: LD_VAR 0 3
20176: RET
// every 0 0$1 trigger russianAI = 1 do
20177: LD_EXP 39
20181: PUSH
20182: LD_INT 1
20184: EQUAL
20185: IFFALSE 20404
20187: GO 20189
20189: DISABLE
// begin enable ;
20190: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
20191: LD_INT 3
20193: PPUSH
20194: LD_EXP 30
20198: PPUSH
20199: CALL 14655 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
20203: LD_INT 3
20205: PPUSH
20206: LD_EXP 42
20210: PPUSH
20211: CALL 15015 0 2
// if ruPossition = 1 then
20215: LD_EXP 41
20219: PUSH
20220: LD_INT 1
20222: EQUAL
20223: IFFALSE 20278
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20225: LD_INT 3
20227: PPUSH
20228: LD_INT 13
20230: PPUSH
20231: LD_INT 10
20233: PPUSH
20234: LD_INT 22
20236: PUSH
20237: LD_INT 3
20239: PUSH
20240: EMPTY
20241: LIST
20242: LIST
20243: PUSH
20244: LD_INT 21
20246: PUSH
20247: LD_INT 3
20249: PUSH
20250: EMPTY
20251: LIST
20252: LIST
20253: PUSH
20254: LD_INT 30
20256: PUSH
20257: LD_INT 8
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: PUSH
20264: EMPTY
20265: LIST
20266: LIST
20267: LIST
20268: PPUSH
20269: CALL_OW 69
20273: PPUSH
20274: CALL 15221 0 4
// if ruPossition = 2 then
20278: LD_EXP 41
20282: PUSH
20283: LD_INT 2
20285: EQUAL
20286: IFFALSE 20341
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20288: LD_INT 3
20290: PPUSH
20291: LD_INT 14
20293: PPUSH
20294: LD_INT 11
20296: PPUSH
20297: LD_INT 22
20299: PUSH
20300: LD_INT 3
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: PUSH
20307: LD_INT 21
20309: PUSH
20310: LD_INT 3
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PUSH
20317: LD_INT 30
20319: PUSH
20320: LD_INT 8
20322: PUSH
20323: EMPTY
20324: LIST
20325: LIST
20326: PUSH
20327: EMPTY
20328: LIST
20329: LIST
20330: LIST
20331: PPUSH
20332: CALL_OW 69
20336: PPUSH
20337: CALL 15221 0 4
// if ruPossition = 3 then
20341: LD_EXP 41
20345: PUSH
20346: LD_INT 3
20348: EQUAL
20349: IFFALSE 20404
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
20351: LD_INT 3
20353: PPUSH
20354: LD_INT 15
20356: PPUSH
20357: LD_INT 12
20359: PPUSH
20360: LD_INT 22
20362: PUSH
20363: LD_INT 3
20365: PUSH
20366: EMPTY
20367: LIST
20368: LIST
20369: PUSH
20370: LD_INT 21
20372: PUSH
20373: LD_INT 3
20375: PUSH
20376: EMPTY
20377: LIST
20378: LIST
20379: PUSH
20380: LD_INT 30
20382: PUSH
20383: LD_INT 8
20385: PUSH
20386: EMPTY
20387: LIST
20388: LIST
20389: PUSH
20390: EMPTY
20391: LIST
20392: LIST
20393: LIST
20394: PPUSH
20395: CALL_OW 69
20399: PPUSH
20400: CALL 15221 0 4
// end ;
20404: END
// every 0 0$1 do
20405: GO 20407
20407: DISABLE
// begin enable ;
20408: ENABLE
// if ruPossition = 1 then
20409: LD_EXP 41
20413: PUSH
20414: LD_INT 1
20416: EQUAL
20417: IFFALSE 20429
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
20419: LD_INT 3
20421: PPUSH
20422: LD_INT 10
20424: PPUSH
20425: CALL 14292 0 2
// if ruPossition = 2 then
20429: LD_EXP 41
20433: PUSH
20434: LD_INT 2
20436: EQUAL
20437: IFFALSE 20449
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
20439: LD_INT 3
20441: PPUSH
20442: LD_INT 11
20444: PPUSH
20445: CALL 14292 0 2
// if ruPossition = 3 then
20449: LD_EXP 41
20453: PUSH
20454: LD_INT 3
20456: EQUAL
20457: IFFALSE 20469
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
20459: LD_INT 3
20461: PPUSH
20462: LD_INT 12
20464: PPUSH
20465: CALL 14292 0 2
// IntBazooka ( 3 , 1 ) ;
20469: LD_INT 3
20471: PPUSH
20472: LD_INT 1
20474: PPUSH
20475: CALL 13091 0 2
// IntBazooka ( 6 , 1 ) ;
20479: LD_INT 6
20481: PPUSH
20482: LD_INT 1
20484: PPUSH
20485: CALL 13091 0 2
// end ;
20489: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
20490: LD_EXP 39
20494: PUSH
20495: LD_INT 1
20497: EQUAL
20498: PUSH
20499: LD_EXP 35
20503: PPUSH
20504: CALL_OW 302
20508: AND
20509: PUSH
20510: LD_EXP 35
20514: PPUSH
20515: CALL_OW 255
20519: PUSH
20520: LD_INT 3
20522: EQUAL
20523: AND
20524: PUSH
20525: LD_INT 22
20527: PUSH
20528: LD_INT 3
20530: PUSH
20531: EMPTY
20532: LIST
20533: LIST
20534: PUSH
20535: LD_INT 21
20537: PUSH
20538: LD_INT 2
20540: PUSH
20541: EMPTY
20542: LIST
20543: LIST
20544: PUSH
20545: LD_INT 33
20547: PUSH
20548: LD_INT 3
20550: PUSH
20551: EMPTY
20552: LIST
20553: LIST
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: LIST
20559: PPUSH
20560: CALL_OW 69
20564: PUSH
20565: LD_INT 0
20567: EQUAL
20568: AND
20569: IFFALSE 20777
20571: GO 20573
20573: DISABLE
// begin enable ;
20574: ENABLE
// if Difficulty = 1 then
20575: LD_OWVAR 67
20579: PUSH
20580: LD_INT 1
20582: EQUAL
20583: IFFALSE 20645
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
20585: LD_INT 3
20587: PPUSH
20588: LD_EXP 35
20592: PPUSH
20593: LD_INT 5
20595: PPUSH
20596: LD_INT 8
20598: PPUSH
20599: CALL_OW 12
20603: PPUSH
20604: LD_INT 1
20606: PPUSH
20607: LD_INT 43
20609: PUSH
20610: LD_INT 44
20612: PUSH
20613: LD_INT 45
20615: PUSH
20616: LD_INT 46
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: PPUSH
20625: LD_INT 1
20627: PPUSH
20628: LD_INT 3
20630: PUSH
20631: LD_INT 3
20633: PUSH
20634: EMPTY
20635: LIST
20636: LIST
20637: PPUSH
20638: LD_INT 22
20640: PPUSH
20641: CALL 19211 0 8
// if Difficulty = 2 then
20645: LD_OWVAR 67
20649: PUSH
20650: LD_INT 2
20652: EQUAL
20653: IFFALSE 20711
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
20655: LD_INT 3
20657: PPUSH
20658: LD_EXP 35
20662: PPUSH
20663: LD_INT 6
20665: PPUSH
20666: LD_INT 8
20668: PPUSH
20669: CALL_OW 12
20673: PPUSH
20674: LD_INT 1
20676: PPUSH
20677: LD_INT 44
20679: PUSH
20680: LD_INT 45
20682: PUSH
20683: LD_INT 46
20685: PUSH
20686: EMPTY
20687: LIST
20688: LIST
20689: LIST
20690: PPUSH
20691: LD_INT 1
20693: PPUSH
20694: LD_INT 3
20696: PUSH
20697: LD_INT 3
20699: PUSH
20700: EMPTY
20701: LIST
20702: LIST
20703: PPUSH
20704: LD_INT 22
20706: PPUSH
20707: CALL 19211 0 8
// if Difficulty = 3 then
20711: LD_OWVAR 67
20715: PUSH
20716: LD_INT 3
20718: EQUAL
20719: IFFALSE 20777
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
20721: LD_INT 3
20723: PPUSH
20724: LD_EXP 35
20728: PPUSH
20729: LD_INT 7
20731: PPUSH
20732: LD_INT 8
20734: PPUSH
20735: CALL_OW 12
20739: PPUSH
20740: LD_INT 1
20742: PPUSH
20743: LD_INT 44
20745: PUSH
20746: LD_INT 45
20748: PUSH
20749: LD_INT 46
20751: PUSH
20752: EMPTY
20753: LIST
20754: LIST
20755: LIST
20756: PPUSH
20757: LD_INT 1
20759: PPUSH
20760: LD_INT 3
20762: PUSH
20763: LD_INT 3
20765: PUSH
20766: EMPTY
20767: LIST
20768: LIST
20769: PPUSH
20770: LD_INT 22
20772: PPUSH
20773: CALL 19211 0 8
// end ;
20777: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
20778: LD_EXP 50
20782: PUSH
20783: LD_EXP 49
20787: AND
20788: IFFALSE 20909
20790: GO 20792
20792: DISABLE
20793: LD_INT 0
20795: PPUSH
// begin enable ;
20796: ENABLE
// for i in arabianMines do
20797: LD_ADDR_VAR 0 1
20801: PUSH
20802: LD_EXP 50
20806: PUSH
20807: FOR_IN
20808: IFFALSE 20907
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
20810: LD_INT 22
20812: PUSH
20813: LD_INT 1
20815: PUSH
20816: EMPTY
20817: LIST
20818: LIST
20819: PUSH
20820: LD_INT 92
20822: PUSH
20823: LD_VAR 0 1
20827: PUSH
20828: LD_INT 1
20830: ARRAY
20831: PUSH
20832: LD_VAR 0 1
20836: PUSH
20837: LD_INT 2
20839: ARRAY
20840: PUSH
20841: LD_INT 3
20843: PUSH
20844: EMPTY
20845: LIST
20846: LIST
20847: LIST
20848: LIST
20849: PUSH
20850: EMPTY
20851: LIST
20852: LIST
20853: PPUSH
20854: CALL_OW 69
20858: IFFALSE 20905
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
20860: LD_VAR 0 1
20864: PUSH
20865: LD_INT 1
20867: ARRAY
20868: PPUSH
20869: LD_VAR 0 1
20873: PUSH
20874: LD_INT 2
20876: ARRAY
20877: PPUSH
20878: LD_INT 5
20880: PPUSH
20881: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
20885: LD_ADDR_EXP 50
20889: PUSH
20890: LD_EXP 50
20894: PPUSH
20895: LD_VAR 0 1
20899: PPUSH
20900: CALL_OW 3
20904: ST_TO_ADDR
// end ; end ;
20905: GO 20807
20907: POP
20908: POP
// end ; end_of_file
20909: PPOPN 1
20911: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
20912: LD_VAR 0 1
20916: PPUSH
20917: CALL_OW 255
20921: PUSH
20922: LD_INT 4
20924: EQUAL
20925: IFFALSE 20939
// SetBName ( building , epsilon ) ;
20927: LD_VAR 0 1
20931: PPUSH
20932: LD_STRING epsilon
20934: PPUSH
20935: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
20939: LD_VAR 0 1
20943: PPUSH
20944: CALL_OW 255
20948: PUSH
20949: LD_INT 1
20951: EQUAL
20952: PUSH
20953: LD_VAR 0 1
20957: PPUSH
20958: CALL_OW 266
20962: PUSH
20963: LD_INT 0
20965: EQUAL
20966: AND
20967: IFFALSE 20981
// SetBName ( building , epsilon ) ;
20969: LD_VAR 0 1
20973: PPUSH
20974: LD_STRING epsilon
20976: PPUSH
20977: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
20981: LD_VAR 0 1
20985: PPUSH
20986: CALL_OW 255
20990: PUSH
20991: LD_INT 3
20993: EQUAL
20994: PUSH
20995: LD_VAR 0 1
20999: PPUSH
21000: CALL_OW 266
21004: PUSH
21005: LD_INT 0
21007: EQUAL
21008: AND
21009: IFFALSE 21023
// SetBName ( building , chuikov ) ;
21011: LD_VAR 0 1
21015: PPUSH
21016: LD_STRING chuikov
21018: PPUSH
21019: CALL_OW 500
// if GetSide ( building ) = 2 then
21023: LD_VAR 0 1
21027: PPUSH
21028: CALL_OW 255
21032: PUSH
21033: LD_INT 2
21035: EQUAL
21036: IFFALSE 21092
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
21038: LD_VAR 0 1
21042: PPUSH
21043: CALL_OW 266
21047: PUSH
21048: LD_INT 6
21050: EQUAL
21051: PUSH
21052: LD_VAR 0 1
21056: PPUSH
21057: CALL_OW 266
21061: PUSH
21062: LD_INT 9
21064: EQUAL
21065: OR
21066: IFFALSE 21092
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21068: LD_VAR 0 1
21072: PPUSH
21073: LD_INT 10
21075: PPUSH
21076: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
21080: LD_VAR 0 1
21084: PPUSH
21085: LD_INT 11
21087: PPUSH
21088: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
21092: LD_VAR 0 1
21096: PPUSH
21097: CALL_OW 255
21101: PUSH
21102: LD_INT 3
21104: EQUAL
21105: IFFALSE 21131
// begin if GetBType ( building ) = 2 then
21107: LD_VAR 0 1
21111: PPUSH
21112: CALL_OW 266
21116: PUSH
21117: LD_INT 2
21119: EQUAL
21120: IFFALSE 21131
// AddComUpgrade ( building ) ;
21122: LD_VAR 0 1
21126: PPUSH
21127: CALL_OW 206
// end ; end ;
21131: PPOPN 2
21133: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
21134: LD_INT 0
21136: PPUSH
21137: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
21138: LD_VAR 0 1
21142: PUSH
21143: LD_INT 22
21145: PUSH
21146: LD_INT 3
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: LD_INT 23
21155: PUSH
21156: LD_INT 3
21158: PUSH
21159: EMPTY
21160: LIST
21161: LIST
21162: PUSH
21163: LD_INT 21
21165: PUSH
21166: LD_INT 2
21168: PUSH
21169: EMPTY
21170: LIST
21171: LIST
21172: PUSH
21173: EMPTY
21174: LIST
21175: LIST
21176: LIST
21177: PPUSH
21178: CALL_OW 69
21182: IN
21183: PUSH
21184: LD_EXP 58
21188: NOT
21189: AND
21190: IFFALSE 21221
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
21192: LD_ADDR_EXP 58
21196: PUSH
21197: LD_VAR 0 1
21201: PPUSH
21202: CALL_OW 250
21206: PUSH
21207: LD_VAR 0 1
21211: PPUSH
21212: CALL_OW 251
21216: PUSH
21217: EMPTY
21218: LIST
21219: LIST
21220: ST_TO_ADDR
// end ;
21221: PPOPN 3
21223: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
21224: LD_VAR 0 2
21228: PPUSH
21229: CALL_OW 255
21233: PUSH
21234: LD_INT 3
21236: EQUAL
21237: PUSH
21238: LD_EXP 35
21242: PPUSH
21243: CALL_OW 255
21247: PUSH
21248: LD_INT 3
21250: EQUAL
21251: AND
21252: PUSH
21253: LD_EXP 35
21257: PPUSH
21258: CALL_OW 302
21262: AND
21263: IFFALSE 21279
// ComEnterUnit ( human , ruFab ) ;
21265: LD_VAR 0 2
21269: PPUSH
21270: LD_EXP 35
21274: PPUSH
21275: CALL_OW 120
// end ;
21279: PPOPN 2
21281: END
// on BuildingComplete ( building ) do var i , sol , tmp ;
21282: LD_INT 0
21284: PPUSH
21285: PPUSH
21286: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
21287: LD_VAR 0 1
21291: PPUSH
21292: CALL_OW 255
21296: PUSH
21297: LD_INT 1
21299: EQUAL
21300: PUSH
21301: LD_EXP 61
21305: PUSH
21306: LD_INT 0
21308: EQUAL
21309: AND
21310: IFFALSE 21512
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
21312: LD_VAR 0 1
21316: PPUSH
21317: CALL_OW 266
21321: PUSH
21322: LD_INT 26
21324: EQUAL
21325: PUSH
21326: LD_VAR 0 1
21330: PPUSH
21331: CALL_OW 266
21335: PUSH
21336: LD_INT 27
21338: EQUAL
21339: OR
21340: PUSH
21341: LD_VAR 0 1
21345: PPUSH
21346: CALL_OW 266
21350: PUSH
21351: LD_INT 28
21353: EQUAL
21354: OR
21355: IFFALSE 21512
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
21357: LD_INT 22
21359: PUSH
21360: LD_INT 1
21362: PUSH
21363: EMPTY
21364: LIST
21365: LIST
21366: PUSH
21367: LD_INT 2
21369: PUSH
21370: LD_INT 30
21372: PUSH
21373: LD_INT 7
21375: PUSH
21376: EMPTY
21377: LIST
21378: LIST
21379: PUSH
21380: LD_INT 30
21382: PUSH
21383: LD_INT 8
21385: PUSH
21386: EMPTY
21387: LIST
21388: LIST
21389: PUSH
21390: EMPTY
21391: LIST
21392: LIST
21393: LIST
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: PPUSH
21399: CALL_OW 69
21403: PUSH
21404: LD_INT 0
21406: GREATER
21407: IFFALSE 21512
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
21409: LD_ADDR_VAR 0 2
21413: PUSH
21414: LD_INT 22
21416: PUSH
21417: LD_INT 1
21419: PUSH
21420: EMPTY
21421: LIST
21422: LIST
21423: PUSH
21424: LD_INT 2
21426: PUSH
21427: LD_INT 30
21429: PUSH
21430: LD_INT 7
21432: PUSH
21433: EMPTY
21434: LIST
21435: LIST
21436: PUSH
21437: LD_INT 30
21439: PUSH
21440: LD_INT 8
21442: PUSH
21443: EMPTY
21444: LIST
21445: LIST
21446: PUSH
21447: EMPTY
21448: LIST
21449: LIST
21450: LIST
21451: PUSH
21452: EMPTY
21453: LIST
21454: LIST
21455: PPUSH
21456: CALL_OW 69
21460: PUSH
21461: FOR_IN
21462: IFFALSE 21510
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
21464: LD_VAR 0 2
21468: PPUSH
21469: LD_INT 1
21471: PPUSH
21472: CALL_OW 268
21476: PUSH
21477: LD_INT 11
21479: EQUAL
21480: PUSH
21481: LD_VAR 0 2
21485: PPUSH
21486: LD_INT 2
21488: PPUSH
21489: CALL_OW 268
21493: PUSH
21494: LD_INT 11
21496: EQUAL
21497: OR
21498: IFFALSE 21508
// eventVar1 = 1 ;
21500: LD_ADDR_EXP 61
21504: PUSH
21505: LD_INT 1
21507: ST_TO_ADDR
21508: GO 21461
21510: POP
21511: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
21512: LD_VAR 0 1
21516: PPUSH
21517: CALL_OW 255
21521: PUSH
21522: LD_INT 3
21524: EQUAL
21525: IFFALSE 22005
// begin if GetBType ( building ) = b_depot then
21527: LD_VAR 0 1
21531: PPUSH
21532: CALL_OW 266
21536: PUSH
21537: LD_INT 0
21539: EQUAL
21540: IFFALSE 21612
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
21542: LD_VAR 0 1
21546: PPUSH
21547: CALL_OW 274
21551: PPUSH
21552: LD_INT 1
21554: PPUSH
21555: LD_INT 5000
21557: PPUSH
21558: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
21562: LD_VAR 0 1
21566: PPUSH
21567: CALL_OW 274
21571: PPUSH
21572: LD_INT 2
21574: PPUSH
21575: LD_INT 300
21577: PPUSH
21578: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
21582: LD_VAR 0 1
21586: PPUSH
21587: CALL_OW 274
21591: PPUSH
21592: LD_INT 3
21594: PPUSH
21595: LD_INT 100
21597: PPUSH
21598: CALL_OW 277
// ruDepot = building ;
21602: LD_ADDR_EXP 30
21606: PUSH
21607: LD_VAR 0 1
21611: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
21612: LD_VAR 0 1
21616: PPUSH
21617: CALL_OW 266
21621: PUSH
21622: LD_INT 0
21624: EQUAL
21625: PUSH
21626: LD_VAR 0 1
21630: PPUSH
21631: CALL_OW 266
21635: PUSH
21636: LD_INT 2
21638: EQUAL
21639: OR
21640: PUSH
21641: LD_VAR 0 1
21645: PPUSH
21646: CALL_OW 266
21650: PUSH
21651: LD_INT 4
21653: EQUAL
21654: OR
21655: IFFALSE 21666
// ComUpgrade ( building ) ;
21657: LD_VAR 0 1
21661: PPUSH
21662: CALL_OW 146
// if GetBType ( building ) = b_lab then
21666: LD_VAR 0 1
21670: PPUSH
21671: CALL_OW 266
21675: PUSH
21676: LD_INT 6
21678: EQUAL
21679: IFFALSE 21882
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
21681: LD_INT 22
21683: PUSH
21684: LD_INT 3
21686: PUSH
21687: EMPTY
21688: LIST
21689: LIST
21690: PUSH
21691: LD_INT 30
21693: PUSH
21694: LD_INT 8
21696: PUSH
21697: EMPTY
21698: LIST
21699: LIST
21700: PUSH
21701: EMPTY
21702: LIST
21703: LIST
21704: PPUSH
21705: CALL_OW 69
21709: PUSH
21710: LD_INT 0
21712: EQUAL
21713: IFFALSE 21751
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
21715: LD_VAR 0 1
21719: PPUSH
21720: LD_INT 10
21722: PPUSH
21723: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
21727: LD_VAR 0 1
21731: PPUSH
21732: LD_INT 12
21734: PPUSH
21735: CALL_OW 207
// ruLab1 = building ;
21739: LD_ADDR_EXP 31
21743: PUSH
21744: LD_VAR 0 1
21748: ST_TO_ADDR
// end else
21749: GO 21785
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
21751: LD_VAR 0 1
21755: PPUSH
21756: LD_INT 11
21758: PPUSH
21759: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
21763: LD_VAR 0 1
21767: PPUSH
21768: LD_INT 14
21770: PPUSH
21771: CALL_OW 207
// ruLab2 = building ;
21775: LD_ADDR_EXP 32
21779: PUSH
21780: LD_VAR 0 1
21784: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
21785: LD_INT 3
21787: PPUSH
21788: LD_VAR 0 1
21792: PPUSH
21793: LD_INT 3
21795: PPUSH
21796: CALL 14207 0 3
// if ruDestroyedBuildings > 0 then
21800: LD_EXP 42
21804: PUSH
21805: LD_INT 0
21807: GREATER
21808: IFFALSE 21882
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21810: LD_ADDR_EXP 42
21814: PUSH
21815: LD_EXP 42
21819: PPUSH
21820: LD_INT 1
21822: PPUSH
21823: CALL_OW 3
21827: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21828: LD_ADDR_EXP 42
21832: PUSH
21833: LD_EXP 42
21837: PPUSH
21838: LD_INT 1
21840: PPUSH
21841: CALL_OW 3
21845: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21846: LD_ADDR_EXP 42
21850: PUSH
21851: LD_EXP 42
21855: PPUSH
21856: LD_INT 1
21858: PPUSH
21859: CALL_OW 3
21863: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
21864: LD_ADDR_EXP 42
21868: PUSH
21869: LD_EXP 42
21873: PPUSH
21874: LD_INT 1
21876: PPUSH
21877: CALL_OW 3
21881: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
21882: LD_VAR 0 1
21886: PPUSH
21887: CALL_OW 266
21891: PUSH
21892: LD_INT 32
21894: EQUAL
21895: IFFALSE 21932
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21897: LD_VAR 0 1
21901: PPUSH
21902: LD_INT 44
21904: PUSH
21905: LD_INT 45
21907: PUSH
21908: LD_INT 46
21910: PUSH
21911: EMPTY
21912: LIST
21913: LIST
21914: LIST
21915: PUSH
21916: LD_INT 1
21918: PPUSH
21919: LD_INT 3
21921: PPUSH
21922: CALL_OW 12
21926: ARRAY
21927: PPUSH
21928: CALL_OW 208
// if GetBType ( building ) = b_turret then
21932: LD_VAR 0 1
21936: PPUSH
21937: CALL_OW 266
21941: PUSH
21942: LD_INT 33
21944: EQUAL
21945: IFFALSE 21982
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
21947: LD_VAR 0 1
21951: PPUSH
21952: LD_INT 44
21954: PUSH
21955: LD_INT 45
21957: PUSH
21958: LD_INT 46
21960: PUSH
21961: EMPTY
21962: LIST
21963: LIST
21964: LIST
21965: PUSH
21966: LD_INT 1
21968: PPUSH
21969: LD_INT 3
21971: PPUSH
21972: CALL_OW 12
21976: ARRAY
21977: PPUSH
21978: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
21982: LD_VAR 0 1
21986: PPUSH
21987: CALL_OW 266
21991: PUSH
21992: LD_INT 24
21994: EQUAL
21995: IFFALSE 22005
// russianAI = 1 ;
21997: LD_ADDR_EXP 39
22001: PUSH
22002: LD_INT 1
22004: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
22005: LD_VAR 0 1
22009: PPUSH
22010: CALL_OW 255
22014: PUSH
22015: LD_INT 2
22017: EQUAL
22018: IFFALSE 22642
// begin if GetBType ( building ) = b_breastwork then
22020: LD_VAR 0 1
22024: PPUSH
22025: CALL_OW 266
22029: PUSH
22030: LD_INT 31
22032: EQUAL
22033: IFFALSE 22179
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
22035: LD_ADDR_VAR 0 3
22039: PUSH
22040: LD_INT 22
22042: PUSH
22043: LD_INT 2
22045: PUSH
22046: EMPTY
22047: LIST
22048: LIST
22049: PUSH
22050: LD_INT 2
22052: PUSH
22053: LD_INT 25
22055: PUSH
22056: LD_INT 1
22058: PUSH
22059: EMPTY
22060: LIST
22061: LIST
22062: PUSH
22063: LD_INT 25
22065: PUSH
22066: LD_INT 8
22068: PUSH
22069: EMPTY
22070: LIST
22071: LIST
22072: PUSH
22073: EMPTY
22074: LIST
22075: LIST
22076: LIST
22077: PUSH
22078: EMPTY
22079: LIST
22080: LIST
22081: PPUSH
22082: CALL_OW 69
22086: PUSH
22087: LD_EXP 26
22091: DIFF
22092: ST_TO_ADDR
// if not sol then
22093: LD_VAR 0 3
22097: NOT
22098: IFFALSE 22102
// exit ;
22100: GO 22642
// for i in sol do
22102: LD_ADDR_VAR 0 2
22106: PUSH
22107: LD_VAR 0 3
22111: PUSH
22112: FOR_IN
22113: IFFALSE 22177
// if not GetTag ( i ) then
22115: LD_VAR 0 2
22119: PPUSH
22120: CALL_OW 110
22124: NOT
22125: IFFALSE 22175
// begin if IsInUnit ( i ) then
22127: LD_VAR 0 2
22131: PPUSH
22132: CALL_OW 310
22136: IFFALSE 22147
// ComExitBuilding ( i ) ;
22138: LD_VAR 0 2
22142: PPUSH
22143: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
22147: LD_VAR 0 2
22151: PPUSH
22152: LD_VAR 0 1
22156: PPUSH
22157: CALL_OW 180
// SetTag ( i , 11 ) ;
22161: LD_VAR 0 2
22165: PPUSH
22166: LD_INT 11
22168: PPUSH
22169: CALL_OW 109
// break ;
22173: GO 22177
// end ;
22175: GO 22112
22177: POP
22178: POP
// end ; if GetBType ( building ) = b_depot then
22179: LD_VAR 0 1
22183: PPUSH
22184: CALL_OW 266
22188: PUSH
22189: LD_INT 0
22191: EQUAL
22192: IFFALSE 22278
// begin arDepot = building ;
22194: LD_ADDR_EXP 43
22198: PUSH
22199: LD_VAR 0 1
22203: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
22204: LD_INT 38
22206: PUSH
22207: LD_INT 47
22209: PUSH
22210: EMPTY
22211: LIST
22212: LIST
22213: PPUSH
22214: LD_INT 71
22216: PPUSH
22217: LD_INT 19
22219: PPUSH
22220: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
22224: LD_VAR 0 1
22228: PPUSH
22229: CALL_OW 274
22233: PPUSH
22234: LD_INT 1
22236: PPUSH
22237: LD_INT 500
22239: PPUSH
22240: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
22244: LD_VAR 0 1
22248: PPUSH
22249: CALL_OW 274
22253: PPUSH
22254: LD_INT 3
22256: PPUSH
22257: LD_INT 30
22259: PPUSH
22260: CALL_OW 277
// ComEnterUnit ( Dietrich , arDepot ) ;
22264: LD_EXP 26
22268: PPUSH
22269: LD_EXP 43
22273: PPUSH
22274: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22278: LD_VAR 0 1
22282: PPUSH
22283: CALL_OW 266
22287: PUSH
22288: LD_INT 6
22290: EQUAL
22291: PUSH
22292: LD_VAR 0 1
22296: PPUSH
22297: CALL_OW 266
22301: PUSH
22302: LD_INT 9
22304: EQUAL
22305: OR
22306: IFFALSE 22357
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22308: LD_VAR 0 1
22312: PPUSH
22313: LD_INT 10
22315: PPUSH
22316: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22320: LD_VAR 0 1
22324: PPUSH
22325: LD_INT 11
22327: PPUSH
22328: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
22332: LD_INT 2
22334: PPUSH
22335: LD_VAR 0 1
22339: PPUSH
22340: LD_INT 2
22342: PPUSH
22343: CALL 14207 0 3
// arLab = building ;
22347: LD_ADDR_EXP 44
22351: PUSH
22352: LD_VAR 0 1
22356: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
22357: LD_VAR 0 1
22361: PPUSH
22362: CALL_OW 266
22366: PUSH
22367: LD_INT 2
22369: EQUAL
22370: PUSH
22371: LD_VAR 0 1
22375: PPUSH
22376: CALL_OW 266
22380: PUSH
22381: LD_INT 4
22383: EQUAL
22384: OR
22385: IFFALSE 22450
// begin ComUpgrade ( building ) ;
22387: LD_VAR 0 1
22391: PPUSH
22392: CALL_OW 146
// if GetBType ( building ) = b_armoury then
22396: LD_VAR 0 1
22400: PPUSH
22401: CALL_OW 266
22405: PUSH
22406: LD_INT 4
22408: EQUAL
22409: IFFALSE 22450
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) , 75 , 21 ) ;
22411: LD_INT 22
22413: PUSH
22414: LD_INT 2
22416: PUSH
22417: EMPTY
22418: LIST
22419: LIST
22420: PUSH
22421: LD_INT 25
22423: PUSH
22424: LD_INT 1
22426: PUSH
22427: EMPTY
22428: LIST
22429: LIST
22430: PUSH
22431: EMPTY
22432: LIST
22433: LIST
22434: PPUSH
22435: CALL_OW 69
22439: PPUSH
22440: LD_INT 75
22442: PPUSH
22443: LD_INT 21
22445: PPUSH
22446: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
22450: LD_VAR 0 1
22454: PPUSH
22455: CALL_OW 266
22459: PUSH
22460: LD_INT 27
22462: EQUAL
22463: IFFALSE 22642
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
22465: LD_INT 22
22467: PUSH
22468: LD_INT 2
22470: PUSH
22471: EMPTY
22472: LIST
22473: LIST
22474: PUSH
22475: LD_INT 30
22477: PUSH
22478: LD_INT 27
22480: PUSH
22481: EMPTY
22482: LIST
22483: LIST
22484: PUSH
22485: EMPTY
22486: LIST
22487: LIST
22488: PPUSH
22489: CALL_OW 69
22493: PUSH
22494: LD_INT 2
22496: EQUAL
22497: IFFALSE 22642
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
22499: LD_ADDR_VAR 0 2
22503: PUSH
22504: LD_INT 22
22506: PUSH
22507: LD_INT 2
22509: PUSH
22510: EMPTY
22511: LIST
22512: LIST
22513: PUSH
22514: LD_INT 21
22516: PUSH
22517: LD_INT 1
22519: PUSH
22520: EMPTY
22521: LIST
22522: LIST
22523: PUSH
22524: LD_INT 25
22526: PUSH
22527: LD_INT 2
22529: PUSH
22530: EMPTY
22531: LIST
22532: LIST
22533: PUSH
22534: EMPTY
22535: LIST
22536: LIST
22537: LIST
22538: PPUSH
22539: CALL_OW 69
22543: PUSH
22544: LD_INT 1
22546: ARRAY
22547: ST_TO_ADDR
// AddComMoveXY ( i , 92 , 34 ) ;
22548: LD_VAR 0 2
22552: PPUSH
22553: LD_INT 92
22555: PPUSH
22556: LD_INT 34
22558: PPUSH
22559: CALL_OW 171
// AddComMoveXY ( i , 82 , 57 ) ;
22563: LD_VAR 0 2
22567: PPUSH
22568: LD_INT 82
22570: PPUSH
22571: LD_INT 57
22573: PPUSH
22574: CALL_OW 171
// AddComMoveXY ( i , 36 , 28 ) ;
22578: LD_VAR 0 2
22582: PPUSH
22583: LD_INT 36
22585: PPUSH
22586: LD_INT 28
22588: PPUSH
22589: CALL_OW 171
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
22593: LD_INT 22
22595: PUSH
22596: LD_INT 2
22598: PUSH
22599: EMPTY
22600: LIST
22601: LIST
22602: PUSH
22603: LD_INT 21
22605: PUSH
22606: LD_INT 1
22608: PUSH
22609: EMPTY
22610: LIST
22611: LIST
22612: PUSH
22613: LD_INT 25
22615: PUSH
22616: LD_INT 2
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: PUSH
22623: EMPTY
22624: LIST
22625: LIST
22626: LIST
22627: PPUSH
22628: CALL_OW 69
22632: PPUSH
22633: LD_EXP 43
22637: PPUSH
22638: CALL_OW 180
// end ; end ; end ;
22642: PPOPN 4
22644: END
// on UpgradeComplete ( building ) do var i ;
22645: LD_INT 0
22647: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
22648: LD_VAR 0 1
22652: PPUSH
22653: CALL_OW 255
22657: PUSH
22658: LD_INT 1
22660: EQUAL
22661: PUSH
22662: LD_EXP 61
22666: PUSH
22667: LD_INT 0
22669: EQUAL
22670: AND
22671: IFFALSE 22869
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
22673: LD_VAR 0 1
22677: PPUSH
22678: CALL_OW 266
22682: PUSH
22683: LD_INT 7
22685: EQUAL
22686: PUSH
22687: LD_VAR 0 1
22691: PPUSH
22692: CALL_OW 266
22696: PUSH
22697: LD_INT 8
22699: EQUAL
22700: OR
22701: IFFALSE 22869
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
22703: LD_INT 22
22705: PUSH
22706: LD_INT 1
22708: PUSH
22709: EMPTY
22710: LIST
22711: LIST
22712: PUSH
22713: LD_INT 2
22715: PUSH
22716: LD_INT 30
22718: PUSH
22719: LD_INT 26
22721: PUSH
22722: EMPTY
22723: LIST
22724: LIST
22725: PUSH
22726: LD_INT 30
22728: PUSH
22729: LD_INT 27
22731: PUSH
22732: EMPTY
22733: LIST
22734: LIST
22735: PUSH
22736: LD_INT 30
22738: PUSH
22739: LD_INT 28
22741: PUSH
22742: EMPTY
22743: LIST
22744: LIST
22745: PUSH
22746: EMPTY
22747: LIST
22748: LIST
22749: LIST
22750: LIST
22751: PUSH
22752: EMPTY
22753: LIST
22754: LIST
22755: PPUSH
22756: CALL_OW 69
22760: PUSH
22761: LD_INT 0
22763: GREATER
22764: IFFALSE 22869
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
22766: LD_ADDR_VAR 0 2
22770: PUSH
22771: LD_INT 22
22773: PUSH
22774: LD_INT 1
22776: PUSH
22777: EMPTY
22778: LIST
22779: LIST
22780: PUSH
22781: LD_INT 2
22783: PUSH
22784: LD_INT 30
22786: PUSH
22787: LD_INT 7
22789: PUSH
22790: EMPTY
22791: LIST
22792: LIST
22793: PUSH
22794: LD_INT 30
22796: PUSH
22797: LD_INT 8
22799: PUSH
22800: EMPTY
22801: LIST
22802: LIST
22803: PUSH
22804: EMPTY
22805: LIST
22806: LIST
22807: LIST
22808: PUSH
22809: EMPTY
22810: LIST
22811: LIST
22812: PPUSH
22813: CALL_OW 69
22817: PUSH
22818: FOR_IN
22819: IFFALSE 22867
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
22821: LD_VAR 0 2
22825: PPUSH
22826: LD_INT 1
22828: PPUSH
22829: CALL_OW 268
22833: PUSH
22834: LD_INT 11
22836: EQUAL
22837: PUSH
22838: LD_VAR 0 2
22842: PPUSH
22843: LD_INT 2
22845: PPUSH
22846: CALL_OW 268
22850: PUSH
22851: LD_INT 11
22853: EQUAL
22854: OR
22855: IFFALSE 22865
// eventVar1 = 1 ;
22857: LD_ADDR_EXP 61
22861: PUSH
22862: LD_INT 1
22864: ST_TO_ADDR
22865: GO 22818
22867: POP
22868: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
22869: LD_VAR 0 1
22873: PPUSH
22874: CALL_OW 255
22878: PUSH
22879: LD_INT 2
22881: EQUAL
22882: IFFALSE 22987
// begin if GetBType ( building ) = b_barracks then
22884: LD_VAR 0 1
22888: PPUSH
22889: CALL_OW 266
22893: PUSH
22894: LD_INT 5
22896: EQUAL
22897: IFFALSE 22987
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
22899: LD_ADDR_VAR 0 2
22903: PUSH
22904: LD_INT 22
22906: PUSH
22907: LD_INT 2
22909: PUSH
22910: EMPTY
22911: LIST
22912: LIST
22913: PUSH
22914: LD_INT 25
22916: PUSH
22917: LD_INT 1
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 3
22926: PUSH
22927: LD_INT 54
22929: PUSH
22930: EMPTY
22931: LIST
22932: PUSH
22933: EMPTY
22934: LIST
22935: LIST
22936: PUSH
22937: EMPTY
22938: LIST
22939: LIST
22940: LIST
22941: PPUSH
22942: CALL_OW 69
22946: PUSH
22947: LD_EXP 26
22951: PUSH
22952: EMPTY
22953: LIST
22954: DIFF
22955: PUSH
22956: FOR_IN
22957: IFFALSE 22975
// ComEnterUnit ( i , building ) ;
22959: LD_VAR 0 2
22963: PPUSH
22964: LD_VAR 0 1
22968: PPUSH
22969: CALL_OW 120
22973: GO 22956
22975: POP
22976: POP
// arArm = building ;
22977: LD_ADDR_EXP 45
22981: PUSH
22982: LD_VAR 0 1
22986: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
22987: LD_VAR 0 1
22991: PPUSH
22992: CALL_OW 255
22996: PUSH
22997: LD_INT 3
22999: EQUAL
23000: IFFALSE 23473
// begin if GetBType ( building ) = b_factory then
23002: LD_VAR 0 1
23006: PPUSH
23007: CALL_OW 266
23011: PUSH
23012: LD_INT 3
23014: EQUAL
23015: IFFALSE 23082
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
23017: LD_ADDR_VAR 0 2
23021: PUSH
23022: LD_INT 22
23024: PUSH
23025: LD_INT 3
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 25
23034: PUSH
23035: LD_INT 3
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: PUSH
23042: EMPTY
23043: LIST
23044: LIST
23045: PPUSH
23046: CALL_OW 69
23050: PUSH
23051: FOR_IN
23052: IFFALSE 23070
// ComEnterUnit ( i , building ) ;
23054: LD_VAR 0 2
23058: PPUSH
23059: LD_VAR 0 1
23063: PPUSH
23064: CALL_OW 120
23068: GO 23051
23070: POP
23071: POP
// ruFab = building ;
23072: LD_ADDR_EXP 35
23076: PUSH
23077: LD_VAR 0 1
23081: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
23082: LD_INT 22
23084: PUSH
23085: LD_INT 3
23087: PUSH
23088: EMPTY
23089: LIST
23090: LIST
23091: PUSH
23092: LD_INT 21
23094: PUSH
23095: LD_INT 3
23097: PUSH
23098: EMPTY
23099: LIST
23100: LIST
23101: PUSH
23102: LD_INT 30
23104: PUSH
23105: LD_INT 8
23107: PUSH
23108: EMPTY
23109: LIST
23110: LIST
23111: PUSH
23112: EMPTY
23113: LIST
23114: LIST
23115: LIST
23116: PPUSH
23117: CALL_OW 69
23121: PUSH
23122: LD_INT 2
23124: EQUAL
23125: IFFALSE 23333
// begin for i = 1 to 2 do
23127: LD_ADDR_VAR 0 2
23131: PUSH
23132: DOUBLE
23133: LD_INT 1
23135: DEC
23136: ST_TO_ADDR
23137: LD_INT 2
23139: PUSH
23140: FOR_TO
23141: IFFALSE 23228
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
23143: LD_INT 22
23145: PUSH
23146: LD_INT 3
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: PUSH
23153: LD_INT 25
23155: PUSH
23156: LD_INT 4
23158: PUSH
23159: EMPTY
23160: LIST
23161: LIST
23162: PUSH
23163: EMPTY
23164: LIST
23165: LIST
23166: PPUSH
23167: CALL_OW 69
23171: PUSH
23172: LD_VAR 0 2
23176: ARRAY
23177: PPUSH
23178: LD_INT 22
23180: PUSH
23181: LD_INT 3
23183: PUSH
23184: EMPTY
23185: LIST
23186: LIST
23187: PUSH
23188: LD_INT 21
23190: PUSH
23191: LD_INT 3
23193: PUSH
23194: EMPTY
23195: LIST
23196: LIST
23197: PUSH
23198: LD_INT 30
23200: PUSH
23201: LD_INT 8
23203: PUSH
23204: EMPTY
23205: LIST
23206: LIST
23207: PUSH
23208: EMPTY
23209: LIST
23210: LIST
23211: LIST
23212: PPUSH
23213: CALL_OW 69
23217: PUSH
23218: LD_INT 1
23220: ARRAY
23221: PPUSH
23222: CALL_OW 120
23226: GO 23140
23228: POP
23229: POP
// for i = 3 to 4 do
23230: LD_ADDR_VAR 0 2
23234: PUSH
23235: DOUBLE
23236: LD_INT 3
23238: DEC
23239: ST_TO_ADDR
23240: LD_INT 4
23242: PUSH
23243: FOR_TO
23244: IFFALSE 23331
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
23246: LD_INT 22
23248: PUSH
23249: LD_INT 3
23251: PUSH
23252: EMPTY
23253: LIST
23254: LIST
23255: PUSH
23256: LD_INT 25
23258: PUSH
23259: LD_INT 4
23261: PUSH
23262: EMPTY
23263: LIST
23264: LIST
23265: PUSH
23266: EMPTY
23267: LIST
23268: LIST
23269: PPUSH
23270: CALL_OW 69
23274: PUSH
23275: LD_VAR 0 2
23279: ARRAY
23280: PPUSH
23281: LD_INT 22
23283: PUSH
23284: LD_INT 3
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: LD_INT 21
23293: PUSH
23294: LD_INT 3
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 30
23303: PUSH
23304: LD_INT 8
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: LIST
23315: PPUSH
23316: CALL_OW 69
23320: PUSH
23321: LD_INT 2
23323: ARRAY
23324: PPUSH
23325: CALL_OW 120
23329: GO 23243
23331: POP
23332: POP
// end ; if GetBType ( building ) = b_barracks then
23333: LD_VAR 0 1
23337: PPUSH
23338: CALL_OW 266
23342: PUSH
23343: LD_INT 5
23345: EQUAL
23346: IFFALSE 23473
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
23348: LD_ADDR_VAR 0 2
23352: PUSH
23353: LD_INT 22
23355: PUSH
23356: LD_INT 3
23358: PUSH
23359: EMPTY
23360: LIST
23361: LIST
23362: PUSH
23363: LD_INT 25
23365: PUSH
23366: LD_INT 1
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: PUSH
23373: LD_INT 3
23375: PUSH
23376: LD_INT 54
23378: PUSH
23379: EMPTY
23380: LIST
23381: PUSH
23382: EMPTY
23383: LIST
23384: LIST
23385: PUSH
23386: EMPTY
23387: LIST
23388: LIST
23389: LIST
23390: PPUSH
23391: CALL_OW 69
23395: PUSH
23396: FOR_IN
23397: IFFALSE 23415
// ComEnterUnit ( i , building ) ;
23399: LD_VAR 0 2
23403: PPUSH
23404: LD_VAR 0 1
23408: PPUSH
23409: CALL_OW 120
23413: GO 23396
23415: POP
23416: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
23417: LD_INT 22
23419: PUSH
23420: LD_INT 3
23422: PUSH
23423: EMPTY
23424: LIST
23425: LIST
23426: PUSH
23427: LD_INT 30
23429: PUSH
23430: LD_INT 5
23432: PUSH
23433: EMPTY
23434: LIST
23435: LIST
23436: PUSH
23437: EMPTY
23438: LIST
23439: LIST
23440: PPUSH
23441: CALL_OW 69
23445: PUSH
23446: LD_INT 0
23448: EQUAL
23449: IFFALSE 23463
// ruArm1 = building else
23451: LD_ADDR_EXP 33
23455: PUSH
23456: LD_VAR 0 1
23460: ST_TO_ADDR
23461: GO 23473
// ruArm2 = building ;
23463: LD_ADDR_EXP 34
23467: PUSH
23468: LD_VAR 0 1
23472: ST_TO_ADDR
// end ; end ; end ;
23473: PPOPN 2
23475: END
// on EnterBuilding ( building , human ) do var rnd ;
23476: LD_INT 0
23478: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
23479: LD_VAR 0 2
23483: PPUSH
23484: CALL_OW 255
23488: PUSH
23489: LD_INT 2
23491: EQUAL
23492: PUSH
23493: LD_VAR 0 2
23497: PPUSH
23498: CALL_OW 257
23502: PUSH
23503: LD_INT 1
23505: EQUAL
23506: AND
23507: PUSH
23508: LD_VAR 0 1
23512: PUSH
23513: LD_EXP 45
23517: EQUAL
23518: AND
23519: IFFALSE 23566
// begin wait ( 0 0$1 ) ;
23521: LD_INT 35
23523: PPUSH
23524: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
23528: LD_ADDR_VAR 0 3
23532: PUSH
23533: LD_INT 1
23535: PPUSH
23536: LD_INT 100
23538: PPUSH
23539: CALL_OW 12
23543: ST_TO_ADDR
// if rnd > 50 then
23544: LD_VAR 0 3
23548: PUSH
23549: LD_INT 50
23551: GREATER
23552: IFFALSE 23566
// SetClass ( human , class_mortar ) ;
23554: LD_VAR 0 2
23558: PPUSH
23559: LD_INT 8
23561: PPUSH
23562: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
23566: LD_VAR 0 2
23570: PUSH
23571: LD_INT 22
23573: PUSH
23574: LD_INT 2
23576: PUSH
23577: EMPTY
23578: LIST
23579: LIST
23580: PUSH
23581: LD_INT 25
23583: PUSH
23584: LD_INT 12
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: EMPTY
23592: LIST
23593: LIST
23594: PPUSH
23595: CALL_OW 69
23599: IN
23600: IFFALSE 23650
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
23602: LD_VAR 0 1
23606: PPUSH
23607: CALL_OW 266
23611: PUSH
23612: LD_INT 0
23614: PUSH
23615: LD_INT 1
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: IN
23622: IFFALSE 23638
// SetClass ( human , class_apeman_engineer ) else
23624: LD_VAR 0 2
23628: PPUSH
23629: LD_INT 16
23631: PPUSH
23632: CALL_OW 336
23636: GO 23650
// SetClass ( human , class_apeman_soldier ) ;
23638: LD_VAR 0 2
23642: PPUSH
23643: LD_INT 15
23645: PPUSH
23646: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
23650: LD_VAR 0 2
23654: PPUSH
23655: CALL_OW 255
23659: PUSH
23660: LD_INT 3
23662: EQUAL
23663: PUSH
23664: LD_VAR 0 2
23668: PPUSH
23669: CALL_OW 257
23673: PUSH
23674: LD_INT 1
23676: EQUAL
23677: AND
23678: PUSH
23679: LD_VAR 0 1
23683: PUSH
23684: LD_EXP 33
23688: EQUAL
23689: PUSH
23690: LD_VAR 0 1
23694: PUSH
23695: LD_EXP 34
23699: EQUAL
23700: OR
23701: PUSH
23702: EMPTY
23703: LIST
23704: AND
23705: IFFALSE 23726
// begin wait ( 0 0$1 ) ;
23707: LD_INT 35
23709: PPUSH
23710: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
23714: LD_VAR 0 2
23718: PPUSH
23719: LD_INT 9
23721: PPUSH
23722: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
23726: LD_VAR 0 2
23730: PPUSH
23731: CALL_OW 255
23735: PUSH
23736: LD_INT 3
23738: EQUAL
23739: PUSH
23740: LD_VAR 0 2
23744: PPUSH
23745: CALL_OW 257
23749: PUSH
23750: LD_INT 9
23752: EQUAL
23753: AND
23754: PUSH
23755: LD_VAR 0 1
23759: PPUSH
23760: CALL_OW 266
23764: PUSH
23765: LD_INT 32
23767: EQUAL
23768: AND
23769: IFFALSE 23790
// begin wait ( 0 0$1 ) ;
23771: LD_INT 35
23773: PPUSH
23774: CALL_OW 67
// SetClass ( human , 1 ) ;
23778: LD_VAR 0 2
23782: PPUSH
23783: LD_INT 1
23785: PPUSH
23786: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
23790: LD_VAR 0 2
23794: PPUSH
23795: CALL_OW 255
23799: PUSH
23800: LD_INT 3
23802: EQUAL
23803: PUSH
23804: LD_VAR 0 2
23808: PPUSH
23809: CALL_OW 257
23813: PUSH
23814: LD_INT 3
23816: EQUAL
23817: AND
23818: PUSH
23819: LD_VAR 0 1
23823: PUSH
23824: LD_EXP 35
23828: EQUAL
23829: AND
23830: IFFALSE 23844
// SetLives ( human , 1000 ) ;
23832: LD_VAR 0 2
23836: PPUSH
23837: LD_INT 1000
23839: PPUSH
23840: CALL_OW 234
// end ;
23844: PPOPN 3
23846: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
23847: LD_VAR 0 1
23851: PUSH
23852: LD_INT 1
23854: EQUAL
23855: PUSH
23856: LD_VAR 0 2
23860: PUSH
23861: LD_INT 2
23863: EQUAL
23864: AND
23865: PUSH
23866: LD_INT 1
23868: PPUSH
23869: LD_INT 2
23871: PPUSH
23872: CALL_OW 81
23876: PUSH
23877: LD_INT 1
23879: EQUAL
23880: AND
23881: IFFALSE 23902
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23883: LD_EXP 24
23887: PPUSH
23888: LD_STRING D6b-Pow-1
23890: PPUSH
23891: CALL_OW 94
// YouLost ( Powell ) ;
23895: LD_STRING Powell
23897: PPUSH
23898: CALL_OW 104
// end ; end ;
23902: PPOPN 2
23904: END
// every 0 0$3 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
23905: LD_INT 23
23907: PPUSH
23908: LD_INT 22
23910: PUSH
23911: LD_INT 1
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: LD_INT 21
23920: PUSH
23921: LD_INT 3
23923: PUSH
23924: EMPTY
23925: LIST
23926: LIST
23927: PUSH
23928: EMPTY
23929: LIST
23930: LIST
23931: PPUSH
23932: CALL_OW 70
23936: PUSH
23937: LD_INT 23
23939: PPUSH
23940: LD_INT 22
23942: PUSH
23943: LD_INT 1
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 21
23952: PUSH
23953: LD_INT 2
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PUSH
23960: EMPTY
23961: LIST
23962: LIST
23963: PPUSH
23964: CALL_OW 70
23968: OR
23969: PUSH
23970: LD_INT 1
23972: PPUSH
23973: LD_INT 2
23975: PPUSH
23976: CALL_OW 81
23980: PUSH
23981: LD_INT 1
23983: EQUAL
23984: AND
23985: IFFALSE 24009
23987: GO 23989
23989: DISABLE
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
23990: LD_EXP 24
23994: PPUSH
23995: LD_STRING D6b-Pow-1
23997: PPUSH
23998: CALL_OW 94
// YouLost ( Powell ) ;
24002: LD_STRING Powell
24004: PPUSH
24005: CALL_OW 104
// end ;
24009: END
// on UnitDestroyed ( unit ) do begin if unit = JMM then
24010: LD_VAR 0 1
24014: PUSH
24015: LD_EXP 1
24019: EQUAL
24020: IFFALSE 24029
// YouLost ( JMM ) ;
24022: LD_STRING JMM
24024: PPUSH
24025: CALL_OW 104
// if unit = Khatam then
24029: LD_VAR 0 1
24033: PUSH
24034: LD_EXP 14
24038: EQUAL
24039: IFFALSE 24049
// KhatamStatus = 0 ;
24041: LD_ADDR_EXP 52
24045: PUSH
24046: LD_INT 0
24048: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
24049: LD_VAR 0 1
24053: PPUSH
24054: CALL_OW 255
24058: PUSH
24059: LD_INT 3
24061: EQUAL
24062: PUSH
24063: LD_VAR 0 1
24067: PPUSH
24068: CALL_OW 247
24072: PUSH
24073: LD_INT 3
24075: EQUAL
24076: AND
24077: IFFALSE 24769
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
24079: LD_VAR 0 1
24083: PPUSH
24084: CALL_OW 266
24088: PUSH
24089: LD_INT 31
24091: EQUAL
24092: PUSH
24093: LD_VAR 0 1
24097: PPUSH
24098: CALL_OW 266
24102: PUSH
24103: LD_INT 32
24105: EQUAL
24106: OR
24107: PUSH
24108: LD_VAR 0 1
24112: PPUSH
24113: CALL_OW 266
24117: PUSH
24118: LD_INT 36
24120: EQUAL
24121: OR
24122: PUSH
24123: LD_VAR 0 1
24127: PPUSH
24128: CALL_OW 266
24132: PUSH
24133: LD_INT 0
24135: EQUAL
24136: OR
24137: PUSH
24138: LD_VAR 0 1
24142: PPUSH
24143: CALL_OW 266
24147: PUSH
24148: LD_INT 24
24150: EQUAL
24151: OR
24152: PUSH
24153: LD_VAR 0 1
24157: PPUSH
24158: CALL_OW 266
24162: PUSH
24163: LD_INT 17
24165: EQUAL
24166: OR
24167: PUSH
24168: LD_VAR 0 1
24172: PPUSH
24173: CALL_OW 266
24177: PUSH
24178: LD_INT 25
24180: EQUAL
24181: OR
24182: PUSH
24183: LD_VAR 0 1
24187: PPUSH
24188: CALL_OW 266
24192: PUSH
24193: LD_INT 19
24195: EQUAL
24196: OR
24197: PUSH
24198: LD_VAR 0 1
24202: PPUSH
24203: CALL_OW 266
24207: PUSH
24208: LD_INT 20
24210: EQUAL
24211: OR
24212: PUSH
24213: LD_VAR 0 1
24217: PPUSH
24218: CALL_OW 266
24222: PUSH
24223: LD_INT 18
24225: EQUAL
24226: OR
24227: PUSH
24228: LD_VAR 0 1
24232: PPUSH
24233: CALL_OW 266
24237: PUSH
24238: LD_INT 21
24240: EQUAL
24241: OR
24242: PUSH
24243: LD_VAR 0 1
24247: PPUSH
24248: CALL_OW 266
24252: PUSH
24253: LD_INT 23
24255: EQUAL
24256: OR
24257: PUSH
24258: LD_VAR 0 1
24262: PPUSH
24263: CALL_OW 266
24267: PUSH
24268: LD_INT 16
24270: EQUAL
24271: OR
24272: PUSH
24273: LD_VAR 0 1
24277: PPUSH
24278: CALL_OW 266
24282: PUSH
24283: LD_INT 6
24285: EQUAL
24286: OR
24287: PUSH
24288: LD_VAR 0 1
24292: PPUSH
24293: CALL_OW 266
24297: PUSH
24298: LD_INT 29
24300: EQUAL
24301: OR
24302: PUSH
24303: LD_VAR 0 1
24307: PPUSH
24308: CALL_OW 266
24312: PUSH
24313: LD_INT 26
24315: EQUAL
24316: OR
24317: PUSH
24318: LD_VAR 0 1
24322: PPUSH
24323: CALL_OW 266
24327: PUSH
24328: LD_INT 30
24330: EQUAL
24331: OR
24332: PUSH
24333: LD_VAR 0 1
24337: PPUSH
24338: CALL_OW 266
24342: PUSH
24343: LD_INT 28
24345: EQUAL
24346: OR
24347: PUSH
24348: LD_VAR 0 1
24352: PPUSH
24353: CALL_OW 266
24357: PUSH
24358: LD_INT 27
24360: EQUAL
24361: OR
24362: PUSH
24363: LD_VAR 0 1
24367: PPUSH
24368: CALL_OW 266
24372: PUSH
24373: LD_INT 33
24375: EQUAL
24376: OR
24377: PUSH
24378: LD_VAR 0 1
24382: PPUSH
24383: CALL_OW 266
24387: PUSH
24388: LD_INT 2
24390: EQUAL
24391: OR
24392: PUSH
24393: LD_VAR 0 1
24397: PPUSH
24398: CALL_OW 266
24402: PUSH
24403: LD_INT 4
24405: EQUAL
24406: OR
24407: IFFALSE 24493
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
24409: LD_ADDR_EXP 42
24413: PUSH
24414: LD_EXP 42
24418: PUSH
24419: LD_VAR 0 1
24423: PPUSH
24424: CALL_OW 266
24428: ADD
24429: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24430: LD_ADDR_EXP 42
24434: PUSH
24435: LD_EXP 42
24439: PUSH
24440: LD_VAR 0 1
24444: PPUSH
24445: CALL_OW 250
24449: ADD
24450: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24451: LD_ADDR_EXP 42
24455: PUSH
24456: LD_EXP 42
24460: PUSH
24461: LD_VAR 0 1
24465: PPUSH
24466: CALL_OW 251
24470: ADD
24471: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24472: LD_ADDR_EXP 42
24476: PUSH
24477: LD_EXP 42
24481: PUSH
24482: LD_VAR 0 1
24486: PPUSH
24487: CALL_OW 254
24491: ADD
24492: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
24493: LD_VAR 0 1
24497: PPUSH
24498: CALL_OW 266
24502: PUSH
24503: LD_INT 1
24505: EQUAL
24506: IFFALSE 24585
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
24508: LD_ADDR_EXP 42
24512: PUSH
24513: LD_EXP 42
24517: PUSH
24518: LD_INT 0
24520: ADD
24521: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24522: LD_ADDR_EXP 42
24526: PUSH
24527: LD_EXP 42
24531: PUSH
24532: LD_VAR 0 1
24536: PPUSH
24537: CALL_OW 250
24541: ADD
24542: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24543: LD_ADDR_EXP 42
24547: PUSH
24548: LD_EXP 42
24552: PUSH
24553: LD_VAR 0 1
24557: PPUSH
24558: CALL_OW 251
24562: ADD
24563: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24564: LD_ADDR_EXP 42
24568: PUSH
24569: LD_EXP 42
24573: PUSH
24574: LD_VAR 0 1
24578: PPUSH
24579: CALL_OW 254
24583: ADD
24584: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
24585: LD_VAR 0 1
24589: PPUSH
24590: CALL_OW 266
24594: PUSH
24595: LD_INT 3
24597: EQUAL
24598: IFFALSE 24677
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
24600: LD_ADDR_EXP 42
24604: PUSH
24605: LD_EXP 42
24609: PUSH
24610: LD_INT 2
24612: ADD
24613: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24614: LD_ADDR_EXP 42
24618: PUSH
24619: LD_EXP 42
24623: PUSH
24624: LD_VAR 0 1
24628: PPUSH
24629: CALL_OW 250
24633: ADD
24634: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24635: LD_ADDR_EXP 42
24639: PUSH
24640: LD_EXP 42
24644: PUSH
24645: LD_VAR 0 1
24649: PPUSH
24650: CALL_OW 251
24654: ADD
24655: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24656: LD_ADDR_EXP 42
24660: PUSH
24661: LD_EXP 42
24665: PUSH
24666: LD_VAR 0 1
24670: PPUSH
24671: CALL_OW 254
24675: ADD
24676: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
24677: LD_VAR 0 1
24681: PPUSH
24682: CALL_OW 266
24686: PUSH
24687: LD_INT 5
24689: EQUAL
24690: IFFALSE 24769
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
24692: LD_ADDR_EXP 42
24696: PUSH
24697: LD_EXP 42
24701: PUSH
24702: LD_INT 4
24704: ADD
24705: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
24706: LD_ADDR_EXP 42
24710: PUSH
24711: LD_EXP 42
24715: PUSH
24716: LD_VAR 0 1
24720: PPUSH
24721: CALL_OW 250
24725: ADD
24726: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
24727: LD_ADDR_EXP 42
24731: PUSH
24732: LD_EXP 42
24736: PUSH
24737: LD_VAR 0 1
24741: PPUSH
24742: CALL_OW 251
24746: ADD
24747: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
24748: LD_ADDR_EXP 42
24752: PUSH
24753: LD_EXP 42
24757: PUSH
24758: LD_VAR 0 1
24762: PPUSH
24763: CALL_OW 254
24767: ADD
24768: ST_TO_ADDR
// end ; end ; if GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
24769: LD_VAR 0 1
24773: PPUSH
24774: CALL_OW 257
24778: PUSH
24779: LD_INT 3
24781: EQUAL
24782: PUSH
24783: LD_VAR 0 1
24787: PPUSH
24788: CALL_OW 255
24792: PUSH
24793: LD_INT 3
24795: EQUAL
24796: AND
24797: PUSH
24798: LD_EXP 35
24802: PPUSH
24803: CALL_OW 302
24807: AND
24808: PUSH
24809: LD_EXP 35
24813: PPUSH
24814: CALL_OW 255
24818: PUSH
24819: LD_INT 3
24821: EQUAL
24822: AND
24823: IFFALSE 24893
// begin uc_side = 3 ;
24825: LD_ADDR_OWVAR 20
24829: PUSH
24830: LD_INT 3
24832: ST_TO_ADDR
// uc_nation = 3 ;
24833: LD_ADDR_OWVAR 21
24837: PUSH
24838: LD_INT 3
24840: ST_TO_ADDR
// hc_gallery :=  ;
24841: LD_ADDR_OWVAR 33
24845: PUSH
24846: LD_STRING 
24848: ST_TO_ADDR
// hc_name :=  ;
24849: LD_ADDR_OWVAR 26
24853: PUSH
24854: LD_STRING 
24856: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
24857: LD_INT 0
24859: PPUSH
24860: LD_EXP 36
24864: PPUSH
24865: LD_EXP 37
24869: PPUSH
24870: CALL_OW 12
24874: PPUSH
24875: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
24879: CALL_OW 44
24883: PPUSH
24884: LD_EXP 35
24888: PPUSH
24889: CALL_OW 52
// end ; end ;
24893: PPOPN 1
24895: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
24896: LD_ADDR_OWVAR 57
24900: PUSH
24901: LD_INT 0
24903: ST_TO_ADDR
// fastEnd = 1 ;
24904: LD_ADDR_EXP 59
24908: PUSH
24909: LD_INT 1
24911: ST_TO_ADDR
// FinishMission ;
24912: CALL 26028 0 0
// end ;
24916: PPOPN 1
24918: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
24919: LD_VAR 0 1
24923: PPUSH
24924: CALL 27819 0 1
// end ; end_of_file
24928: PPOPN 1
24930: END
// export function PrepareNature ; var i , un ; begin
24931: LD_INT 0
24933: PPUSH
24934: PPUSH
24935: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
24936: LD_ADDR_VAR 0 2
24940: PUSH
24941: DOUBLE
24942: LD_INT 1
24944: DEC
24945: ST_TO_ADDR
24946: LD_OWVAR 67
24950: PUSH
24951: LD_INT 1
24953: PPUSH
24954: LD_INT 5
24956: PPUSH
24957: CALL_OW 12
24961: PLUS
24962: PUSH
24963: FOR_TO
24964: IFFALSE 25109
// begin hc_sex = sex_male ;
24966: LD_ADDR_OWVAR 27
24970: PUSH
24971: LD_INT 1
24973: ST_TO_ADDR
// uc_side = 0 ;
24974: LD_ADDR_OWVAR 20
24978: PUSH
24979: LD_INT 0
24981: ST_TO_ADDR
// uc_nation = nation_nature ;
24982: LD_ADDR_OWVAR 21
24986: PUSH
24987: LD_INT 0
24989: ST_TO_ADDR
// hc_class = class_apeman ;
24990: LD_ADDR_OWVAR 28
24994: PUSH
24995: LD_INT 12
24997: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
24998: LD_ADDR_OWVAR 31
25002: PUSH
25003: LD_INT 2
25005: PPUSH
25006: LD_INT 7
25008: PPUSH
25009: CALL_OW 12
25013: PUSH
25014: LD_OWVAR 67
25018: PLUS
25019: PUSH
25020: LD_INT 2
25022: PPUSH
25023: LD_INT 10
25025: PPUSH
25026: CALL_OW 12
25030: PUSH
25031: LD_INT 2
25033: PPUSH
25034: LD_INT 10
25036: PPUSH
25037: CALL_OW 12
25041: PUSH
25042: LD_INT 2
25044: PPUSH
25045: LD_INT 10
25047: PPUSH
25048: CALL_OW 12
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: LIST
25057: LIST
25058: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
25059: LD_ADDR_OWVAR 35
25063: PUSH
25064: LD_INT 5
25066: NEG
25067: PPUSH
25068: LD_INT 5
25070: PPUSH
25071: CALL_OW 12
25075: PUSH
25076: LD_OWVAR 67
25080: MUL
25081: ST_TO_ADDR
// un = CreateHuman ;
25082: LD_ADDR_VAR 0 3
25086: PUSH
25087: CALL_OW 44
25091: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
25092: LD_VAR 0 3
25096: PPUSH
25097: LD_INT 5
25099: PPUSH
25100: LD_INT 0
25102: PPUSH
25103: CALL_OW 49
// end ;
25107: GO 24963
25109: POP
25110: POP
// for i = 1 to Difficulty + 2 do
25111: LD_ADDR_VAR 0 2
25115: PUSH
25116: DOUBLE
25117: LD_INT 1
25119: DEC
25120: ST_TO_ADDR
25121: LD_OWVAR 67
25125: PUSH
25126: LD_INT 2
25128: PLUS
25129: PUSH
25130: FOR_TO
25131: IFFALSE 25240
// begin hc_sex = sex_male ;
25133: LD_ADDR_OWVAR 27
25137: PUSH
25138: LD_INT 1
25140: ST_TO_ADDR
// uc_side = 0 ;
25141: LD_ADDR_OWVAR 20
25145: PUSH
25146: LD_INT 0
25148: ST_TO_ADDR
// uc_nation = nation_nature ;
25149: LD_ADDR_OWVAR 21
25153: PUSH
25154: LD_INT 0
25156: ST_TO_ADDR
// hc_class = class_tiger ;
25157: LD_ADDR_OWVAR 28
25161: PUSH
25162: LD_INT 14
25164: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
25165: LD_ADDR_OWVAR 31
25169: PUSH
25170: LD_EXP 37
25174: PUSH
25175: LD_INT 0
25177: PUSH
25178: LD_INT 0
25180: PUSH
25181: LD_INT 0
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
25190: LD_ADDR_OWVAR 35
25194: PUSH
25195: LD_INT 5
25197: NEG
25198: PPUSH
25199: LD_INT 5
25201: PPUSH
25202: CALL_OW 12
25206: PUSH
25207: LD_OWVAR 67
25211: MUL
25212: ST_TO_ADDR
// un = CreateHuman ;
25213: LD_ADDR_VAR 0 3
25217: PUSH
25218: CALL_OW 44
25222: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
25223: LD_VAR 0 3
25227: PPUSH
25228: LD_INT 6
25230: PPUSH
25231: LD_INT 0
25233: PPUSH
25234: CALL_OW 49
// end ;
25238: GO 25130
25240: POP
25241: POP
// for i = 1 to rand ( 3 , 4 ) do
25242: LD_ADDR_VAR 0 2
25246: PUSH
25247: DOUBLE
25248: LD_INT 1
25250: DEC
25251: ST_TO_ADDR
25252: LD_INT 3
25254: PPUSH
25255: LD_INT 4
25257: PPUSH
25258: CALL_OW 12
25262: PUSH
25263: FOR_TO
25264: IFFALSE 25358
// begin hc_sex = sex_male ;
25266: LD_ADDR_OWVAR 27
25270: PUSH
25271: LD_INT 1
25273: ST_TO_ADDR
// uc_side = 0 ;
25274: LD_ADDR_OWVAR 20
25278: PUSH
25279: LD_INT 0
25281: ST_TO_ADDR
// uc_nation = nation_nature ;
25282: LD_ADDR_OWVAR 21
25286: PUSH
25287: LD_INT 0
25289: ST_TO_ADDR
// hc_class = 18 ;
25290: LD_ADDR_OWVAR 28
25294: PUSH
25295: LD_INT 18
25297: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
25298: LD_ADDR_OWVAR 31
25302: PUSH
25303: LD_EXP 37
25307: PUSH
25308: LD_INT 0
25310: PUSH
25311: LD_INT 0
25313: PUSH
25314: LD_INT 0
25316: PUSH
25317: EMPTY
25318: LIST
25319: LIST
25320: LIST
25321: LIST
25322: ST_TO_ADDR
// hc_agressivity = 0 ;
25323: LD_ADDR_OWVAR 35
25327: PUSH
25328: LD_INT 0
25330: ST_TO_ADDR
// un = CreateHuman ;
25331: LD_ADDR_VAR 0 3
25335: PUSH
25336: CALL_OW 44
25340: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
25341: LD_VAR 0 3
25345: PPUSH
25346: LD_INT 6
25348: PPUSH
25349: LD_INT 0
25351: PPUSH
25352: CALL_OW 49
// end ;
25356: GO 25263
25358: POP
25359: POP
// end ; end_of_file
25360: LD_VAR 0 1
25364: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
25365: LD_EXP 46
25369: PUSH
25370: LD_INT 1
25372: EQUAL
25373: IFFALSE 25457
25375: GO 25377
25377: DISABLE
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
25378: LD_INT 7
25380: PPUSH
25381: LD_INT 5
25383: PPUSH
25384: LD_INT 4
25386: PUSH
25387: LD_INT 5
25389: PUSH
25390: LD_INT 6
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: LIST
25397: PUSH
25398: LD_OWVAR 67
25402: ARRAY
25403: PPUSH
25404: LD_EXP 36
25408: PPUSH
25409: LD_EXP 37
25413: PPUSH
25414: CALL_OW 12
25418: PPUSH
25419: LD_INT 2
25421: PPUSH
25422: LD_INT 1
25424: PPUSH
25425: LD_INT 1
25427: PPUSH
25428: EMPTY
25429: PPUSH
25430: LD_INT 25
25432: PUSH
25433: LD_INT 26
25435: PUSH
25436: LD_INT 27
25438: PUSH
25439: LD_INT 28
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: LIST
25446: LIST
25447: PPUSH
25448: EMPTY
25449: PPUSH
25450: LD_INT 1
25452: PPUSH
25453: CALL 15769 0 11
25457: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25458: LD_EXP 46
25462: PUSH
25463: LD_INT 1
25465: EQUAL
25466: IFFALSE 25554
25468: GO 25470
25470: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
25471: LD_INT 5
25473: PPUSH
25474: LD_INT 2
25476: PPUSH
25477: LD_INT 5
25479: PUSH
25480: LD_INT 6
25482: PUSH
25483: LD_INT 8
25485: PUSH
25486: EMPTY
25487: LIST
25488: LIST
25489: LIST
25490: PUSH
25491: LD_OWVAR 67
25495: ARRAY
25496: PPUSH
25497: LD_INT 0
25499: PPUSH
25500: LD_INT 0
25502: PPUSH
25503: LD_INT 2
25505: PUSH
25506: LD_INT 4
25508: PUSH
25509: LD_INT 5
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: LIST
25516: PUSH
25517: LD_OWVAR 67
25521: ARRAY
25522: PPUSH
25523: LD_INT 0
25525: PPUSH
25526: LD_EXP 36
25530: PPUSH
25531: LD_EXP 37
25535: PPUSH
25536: CALL_OW 12
25540: PPUSH
25541: LD_INT 7
25543: PPUSH
25544: LD_INT 9
25546: PPUSH
25547: LD_INT 1
25549: PPUSH
25550: CALL 17473 0 11
25554: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
25555: LD_EXP 46
25559: PUSH
25560: LD_INT 1
25562: EQUAL
25563: IFFALSE 25572
25565: GO 25567
25567: DISABLE
// PrepareArabianSheik ;
25568: CALL 3788 0 0
25572: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25573: LD_EXP 29
25577: PUSH
25578: LD_EXP 60
25582: PUSH
25583: LD_INT 1
25585: EQUAL
25586: AND
25587: IFFALSE 25656
25589: GO 25591
25591: DISABLE
// begin enable ;
25592: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
25593: LD_INT 6
25595: PPUSH
25596: LD_INT 3
25598: PPUSH
25599: LD_EXP 57
25603: PPUSH
25604: LD_INT 0
25606: PPUSH
25607: LD_OWVAR 67
25611: PPUSH
25612: LD_INT 0
25614: PPUSH
25615: LD_EXP 57
25619: PUSH
25620: LD_INT 3
25622: DIV
25623: PUSH
25624: LD_INT 1
25626: PLUS
25627: PPUSH
25628: LD_EXP 36
25632: PPUSH
25633: LD_EXP 37
25637: PPUSH
25638: CALL_OW 12
25642: PPUSH
25643: LD_INT 17
25645: PPUSH
25646: LD_INT 18
25648: PPUSH
25649: LD_INT 1
25651: PPUSH
25652: CALL 17473 0 11
// end ;
25656: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
25657: LD_EXP 29
25661: PUSH
25662: LD_EXP 60
25666: PUSH
25667: LD_INT 1
25669: EQUAL
25670: AND
25671: IFFALSE 25748
25673: GO 25675
25675: DISABLE
// begin enable ;
25676: ENABLE
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
25677: LD_INT 17
25679: PPUSH
25680: LD_INT 6
25682: PPUSH
25683: LD_EXP 56
25687: PPUSH
25688: LD_EXP 36
25692: PPUSH
25693: LD_EXP 37
25697: PPUSH
25698: CALL_OW 12
25702: PPUSH
25703: LD_INT 3
25705: PPUSH
25706: LD_INT 1
25708: PPUSH
25709: LD_INT 3
25711: PUSH
25712: LD_INT 3
25714: PUSH
25715: EMPTY
25716: LIST
25717: LIST
25718: PPUSH
25719: LD_INT 43
25721: PUSH
25722: LD_INT 44
25724: PUSH
25725: LD_INT 45
25727: PUSH
25728: LD_INT 46
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: LIST
25735: LIST
25736: PPUSH
25737: EMPTY
25738: PPUSH
25739: EMPTY
25740: PPUSH
25741: LD_INT 1
25743: PPUSH
25744: CALL 15769 0 11
// end ;
25748: END
// every 10 10$00 trigger joinEpsilon do
25749: LD_EXP 29
25753: IFFALSE 25807
25755: GO 25757
25757: DISABLE
// begin enable ;
25758: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
25759: LD_ADDR_EXP 56
25763: PUSH
25764: LD_EXP 56
25768: PUSH
25769: LD_INT 1
25771: PPUSH
25772: LD_OWVAR 67
25776: PPUSH
25777: CALL_OW 12
25781: PLUS
25782: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
25783: LD_ADDR_EXP 57
25787: PUSH
25788: LD_EXP 57
25792: PUSH
25793: LD_INT 1
25795: PPUSH
25796: LD_OWVAR 67
25800: PPUSH
25801: CALL_OW 12
25805: PLUS
25806: ST_TO_ADDR
// end ;
25807: END
// every 21 21$0 trigger attackAvalaible = 1 do
25808: LD_EXP 60
25812: PUSH
25813: LD_INT 1
25815: EQUAL
25816: IFFALSE 25829
25818: GO 25820
25820: DISABLE
// attackAvalaible = 0 ; end_of_file
25821: LD_ADDR_EXP 60
25825: PUSH
25826: LD_INT 0
25828: ST_TO_ADDR
25829: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
25830: LD_INT 54
25832: PPUSH
25833: LD_INT 1
25835: PPUSH
25836: CALL_OW 321
25840: PUSH
25841: LD_INT 2
25843: EQUAL
25844: PUSH
25845: LD_INT 55
25847: PPUSH
25848: LD_INT 1
25850: PPUSH
25851: CALL_OW 321
25855: PUSH
25856: LD_INT 2
25858: EQUAL
25859: AND
25860: PUSH
25861: LD_INT 21
25863: PPUSH
25864: LD_INT 1
25866: PPUSH
25867: CALL_OW 321
25871: PUSH
25872: LD_INT 2
25874: EQUAL
25875: AND
25876: PUSH
25877: LD_INT 22
25879: PPUSH
25880: LD_INT 1
25882: PPUSH
25883: CALL_OW 321
25887: PUSH
25888: LD_INT 2
25890: EQUAL
25891: AND
25892: PUSH
25893: LD_INT 12
25895: PPUSH
25896: LD_INT 1
25898: PPUSH
25899: CALL_OW 321
25903: PUSH
25904: LD_INT 1
25906: EQUAL
25907: PUSH
25908: LD_INT 32
25910: PPUSH
25911: LD_INT 1
25913: PPUSH
25914: CALL_OW 321
25918: PUSH
25919: LD_INT 1
25921: EQUAL
25922: OR
25923: PUSH
25924: EMPTY
25925: LIST
25926: AND
25927: PUSH
25928: LD_EXP 48
25932: PUSH
25933: LD_INT 1
25935: EQUAL
25936: AND
25937: PUSH
25938: LD_INT 22
25940: PUSH
25941: LD_INT 3
25943: PUSH
25944: EMPTY
25945: LIST
25946: LIST
25947: PUSH
25948: LD_INT 21
25950: PUSH
25951: LD_INT 1
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: PPUSH
25962: CALL_OW 69
25966: PUSH
25967: LD_INT 0
25969: EQUAL
25970: AND
25971: IFFALSE 26027
25973: GO 25975
25975: DISABLE
// begin case query ( QEndMission ) of 1 :
25976: LD_STRING QEndMission
25978: PPUSH
25979: CALL_OW 97
25983: PUSH
25984: LD_INT 1
25986: DOUBLE
25987: EQUAL
25988: IFTRUE 25992
25990: GO 26003
25992: POP
// begin end_the_mission_allowed = true ;
25993: LD_ADDR_OWVAR 57
25997: PUSH
25998: LD_INT 1
26000: ST_TO_ADDR
// end ; 2 :
26001: GO 26027
26003: LD_INT 2
26005: DOUBLE
26006: EQUAL
26007: IFTRUE 26011
26009: GO 26026
26011: POP
// begin fastEnd = 1 ;
26012: LD_ADDR_EXP 59
26016: PUSH
26017: LD_INT 1
26019: ST_TO_ADDR
// FinishMission ;
26020: CALL 26028 0 0
// end ; end ;
26024: GO 26027
26026: POP
// end ;
26027: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
26028: LD_INT 0
26030: PPUSH
26031: PPUSH
26032: PPUSH
26033: PPUSH
// m1 := false ;
26034: LD_ADDR_VAR 0 2
26038: PUSH
26039: LD_INT 0
26041: ST_TO_ADDR
// m2 := false ;
26042: LD_ADDR_VAR 0 3
26046: PUSH
26047: LD_INT 0
26049: ST_TO_ADDR
// m3 := false ;
26050: LD_ADDR_VAR 0 4
26054: PUSH
26055: LD_INT 0
26057: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
26058: LD_EXP 52
26062: PPUSH
26063: LD_STRING 10_KhatamStatus_1
26065: PPUSH
26066: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
26070: LD_EXP 51
26074: PPUSH
26075: LD_STRING 10_GensherEscape_1
26077: PPUSH
26078: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
26082: LD_INT 12
26084: PPUSH
26085: LD_INT 1
26087: PPUSH
26088: CALL_OW 321
26092: PUSH
26093: LD_INT 2
26095: EQUAL
26096: IFFALSE 26118
// begin AddMedal ( sights , 1 ) ;
26098: LD_STRING sights
26100: PPUSH
26101: LD_INT 1
26103: PPUSH
26104: CALL_OW 101
// m1 := true ;
26108: LD_ADDR_VAR 0 2
26112: PUSH
26113: LD_INT 1
26115: ST_TO_ADDR
// end else
26116: GO 26129
// begin AddMedal ( sights , - 1 ) ;
26118: LD_STRING sights
26120: PPUSH
26121: LD_INT 1
26123: NEG
26124: PPUSH
26125: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
26129: LD_INT 32
26131: PPUSH
26132: LD_INT 1
26134: PPUSH
26135: CALL_OW 321
26139: PUSH
26140: LD_INT 2
26142: EQUAL
26143: IFFALSE 26165
// begin AddMedal ( computers , 1 ) ;
26145: LD_STRING computers
26147: PPUSH
26148: LD_INT 1
26150: PPUSH
26151: CALL_OW 101
// m2 := true ;
26155: LD_ADDR_VAR 0 3
26159: PUSH
26160: LD_INT 1
26162: ST_TO_ADDR
// end else
26163: GO 26176
// begin AddMedal ( computers , - 1 ) ;
26165: LD_STRING computers
26167: PPUSH
26168: LD_INT 1
26170: NEG
26171: PPUSH
26172: CALL_OW 101
// end ; if arabianEscape = 0 then
26176: LD_EXP 47
26180: PUSH
26181: LD_INT 0
26183: EQUAL
26184: IFFALSE 26216
// begin AddMedal ( renegades , 2 ) ;
26186: LD_STRING renegades
26188: PPUSH
26189: LD_INT 2
26191: PPUSH
26192: CALL_OW 101
// m3 := true ;
26196: LD_ADDR_VAR 0 4
26200: PUSH
26201: LD_INT 1
26203: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
26204: LD_INT 0
26206: PPUSH
26207: LD_STRING 10_ScientistsEscape_1
26209: PPUSH
26210: CALL_OW 39
// end else
26214: GO 26227
// begin AddMedal ( renegades , - 1 ) ;
26216: LD_STRING renegades
26218: PPUSH
26219: LD_INT 1
26221: NEG
26222: PPUSH
26223: CALL_OW 101
// end ; SaveEpsilonBase ;
26227: CALL 26989 0 0
// if m1 and m2 and m3 and Difficulty = 3 then
26231: LD_VAR 0 2
26235: PUSH
26236: LD_VAR 0 3
26240: AND
26241: PUSH
26242: LD_VAR 0 4
26246: AND
26247: PUSH
26248: LD_OWVAR 67
26252: PUSH
26253: LD_INT 3
26255: EQUAL
26256: AND
26257: IFFALSE 26269
// SetAchievementEX ( ACH_AMER , 10 ) ;
26259: LD_STRING ACH_AMER
26261: PPUSH
26262: LD_INT 10
26264: PPUSH
26265: CALL_OW 564
// GiveMedals ( Main ) ;
26269: LD_STRING Main
26271: PPUSH
26272: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
26276: LD_INT 22
26278: PUSH
26279: LD_INT 1
26281: PUSH
26282: EMPTY
26283: LIST
26284: LIST
26285: PUSH
26286: LD_INT 23
26288: PUSH
26289: LD_INT 1
26291: PUSH
26292: EMPTY
26293: LIST
26294: LIST
26295: PUSH
26296: LD_INT 21
26298: PUSH
26299: LD_INT 1
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: PUSH
26306: LD_INT 2
26308: PUSH
26309: LD_INT 25
26311: PUSH
26312: LD_INT 1
26314: PUSH
26315: EMPTY
26316: LIST
26317: LIST
26318: PUSH
26319: LD_INT 25
26321: PUSH
26322: LD_INT 2
26324: PUSH
26325: EMPTY
26326: LIST
26327: LIST
26328: PUSH
26329: LD_INT 25
26331: PUSH
26332: LD_INT 3
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: PUSH
26339: LD_INT 25
26341: PUSH
26342: LD_INT 4
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PUSH
26349: LD_INT 25
26351: PUSH
26352: LD_INT 5
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 25
26361: PUSH
26362: LD_INT 8
26364: PUSH
26365: EMPTY
26366: LIST
26367: LIST
26368: PUSH
26369: EMPTY
26370: LIST
26371: LIST
26372: LIST
26373: LIST
26374: LIST
26375: LIST
26376: LIST
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: PPUSH
26384: CALL_OW 69
26388: PPUSH
26389: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
26393: LD_EXP 1
26397: PPUSH
26398: LD_EXP 53
26402: PUSH
26403: LD_STRING JMM
26405: STR
26406: PPUSH
26407: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
26411: LD_EXP 2
26415: PPUSH
26416: LD_EXP 53
26420: PUSH
26421: LD_STRING Brown
26423: STR
26424: PPUSH
26425: CALL 9939 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
26429: LD_EXP 3
26433: PPUSH
26434: LD_EXP 53
26438: PUSH
26439: LD_STRING Donaldson
26441: STR
26442: PPUSH
26443: CALL 9939 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
26447: LD_EXP 4
26451: PPUSH
26452: LD_EXP 53
26456: PUSH
26457: LD_STRING Bobby
26459: STR
26460: PPUSH
26461: CALL 9939 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
26465: LD_EXP 5
26469: PPUSH
26470: LD_EXP 53
26474: PUSH
26475: LD_STRING Cyrus
26477: STR
26478: PPUSH
26479: CALL 9939 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
26483: LD_EXP 6
26487: PPUSH
26488: LD_EXP 53
26492: PUSH
26493: LD_STRING Lisa
26495: STR
26496: PPUSH
26497: CALL 9939 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
26501: LD_EXP 7
26505: PPUSH
26506: LD_EXP 53
26510: PUSH
26511: LD_STRING Frank
26513: STR
26514: PPUSH
26515: CALL 9939 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
26519: LD_EXP 8
26523: PPUSH
26524: LD_EXP 53
26528: PUSH
26529: LD_STRING Kikuchi
26531: STR
26532: PPUSH
26533: CALL 9939 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
26537: LD_EXP 9
26541: PPUSH
26542: LD_EXP 53
26546: PUSH
26547: LD_STRING Houten
26549: STR
26550: PPUSH
26551: CALL 9939 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
26555: LD_EXP 10
26559: PPUSH
26560: LD_EXP 53
26564: PUSH
26565: LD_STRING Gary
26567: STR
26568: PPUSH
26569: CALL 9939 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
26573: LD_EXP 19
26577: PPUSH
26578: LD_EXP 53
26582: PUSH
26583: LD_STRING Cornell
26585: STR
26586: PPUSH
26587: CALL 9939 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
26591: LD_EXP 11
26595: PPUSH
26596: LD_EXP 53
26600: PUSH
26601: LD_STRING Simms
26603: STR
26604: PPUSH
26605: CALL 9939 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
26609: LD_EXP 12
26613: PPUSH
26614: LD_EXP 53
26618: PUSH
26619: LD_STRING Denis
26621: STR
26622: PPUSH
26623: CALL 9939 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
26627: LD_EXP 13
26631: PPUSH
26632: LD_EXP 53
26636: PUSH
26637: LD_STRING Joan
26639: STR
26640: PPUSH
26641: CALL 9939 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
26645: LD_EXP 15
26649: PPUSH
26650: LD_EXP 53
26654: PUSH
26655: LD_STRING Gladstone
26657: STR
26658: PPUSH
26659: CALL 9939 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
26663: LD_EXP 17
26667: PPUSH
26668: LD_EXP 53
26672: PUSH
26673: LD_STRING DeltaDoctor
26675: STR
26676: PPUSH
26677: CALL 9939 0 2
// SaveCharacters ( others09 , 10c_lock ) ;
26681: LD_EXP 22
26685: PPUSH
26686: LD_STRING 10c_lock
26688: PPUSH
26689: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
26693: LD_INT 50
26695: PUSH
26696: EMPTY
26697: LIST
26698: PUSH
26699: LD_INT 22
26701: PUSH
26702: LD_INT 1
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: PUSH
26709: LD_INT 21
26711: PUSH
26712: LD_INT 1
26714: PUSH
26715: EMPTY
26716: LIST
26717: LIST
26718: PUSH
26719: LD_INT 2
26721: PUSH
26722: LD_INT 25
26724: PUSH
26725: LD_INT 1
26727: PUSH
26728: EMPTY
26729: LIST
26730: LIST
26731: PUSH
26732: LD_INT 25
26734: PUSH
26735: LD_INT 2
26737: PUSH
26738: EMPTY
26739: LIST
26740: LIST
26741: PUSH
26742: LD_INT 25
26744: PUSH
26745: LD_INT 3
26747: PUSH
26748: EMPTY
26749: LIST
26750: LIST
26751: PUSH
26752: LD_INT 25
26754: PUSH
26755: LD_INT 4
26757: PUSH
26758: EMPTY
26759: LIST
26760: LIST
26761: PUSH
26762: LD_INT 25
26764: PUSH
26765: LD_INT 5
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: PUSH
26772: LD_INT 25
26774: PUSH
26775: LD_INT 8
26777: PUSH
26778: EMPTY
26779: LIST
26780: LIST
26781: PUSH
26782: EMPTY
26783: LIST
26784: LIST
26785: LIST
26786: LIST
26787: LIST
26788: LIST
26789: LIST
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: LIST
26795: LIST
26796: PPUSH
26797: CALL_OW 69
26801: PUSH
26802: LD_EXP 1
26806: PUSH
26807: LD_EXP 2
26811: PUSH
26812: LD_EXP 3
26816: PUSH
26817: LD_EXP 4
26821: PUSH
26822: LD_EXP 5
26826: PUSH
26827: LD_EXP 6
26831: PUSH
26832: LD_EXP 7
26836: PUSH
26837: LD_EXP 15
26841: PUSH
26842: LD_EXP 8
26846: PUSH
26847: LD_EXP 12
26851: PUSH
26852: LD_EXP 13
26856: PUSH
26857: LD_EXP 9
26861: PUSH
26862: LD_EXP 11
26866: PUSH
26867: LD_EXP 10
26871: PUSH
26872: LD_EXP 17
26876: PUSH
26877: LD_EXP 19
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: LIST
26886: LIST
26887: LIST
26888: LIST
26889: LIST
26890: LIST
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: DIFF
26900: PPUSH
26901: LD_STRING 10_other_survivors
26903: PPUSH
26904: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
26908: LD_INT 50
26910: PUSH
26911: EMPTY
26912: LIST
26913: PUSH
26914: LD_INT 22
26916: PUSH
26917: LD_INT 1
26919: PUSH
26920: EMPTY
26921: LIST
26922: LIST
26923: PUSH
26924: LD_INT 21
26926: PUSH
26927: LD_INT 1
26929: PUSH
26930: EMPTY
26931: LIST
26932: LIST
26933: PUSH
26934: LD_INT 2
26936: PUSH
26937: LD_INT 25
26939: PUSH
26940: LD_INT 16
26942: PUSH
26943: EMPTY
26944: LIST
26945: LIST
26946: PUSH
26947: LD_INT 25
26949: PUSH
26950: LD_INT 12
26952: PUSH
26953: EMPTY
26954: LIST
26955: LIST
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: LIST
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: LIST
26966: LIST
26967: PPUSH
26968: CALL_OW 69
26972: PPUSH
26973: LD_STRING 10_ape
26975: PPUSH
26976: CALL_OW 38
// YouWin ;
26980: CALL_OW 103
// end ;
26984: LD_VAR 0 1
26988: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
26989: LD_INT 0
26991: PPUSH
26992: PPUSH
26993: PPUSH
26994: PPUSH
// epsilonBase = [ ] ;
26995: LD_ADDR_VAR 0 2
26999: PUSH
27000: EMPTY
27001: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
27002: LD_ADDR_VAR 0 3
27006: PUSH
27007: LD_INT 22
27009: PUSH
27010: LD_INT 1
27012: PUSH
27013: EMPTY
27014: LIST
27015: LIST
27016: PUSH
27017: LD_INT 23
27019: PUSH
27020: LD_INT 1
27022: PUSH
27023: EMPTY
27024: LIST
27025: LIST
27026: PUSH
27027: LD_INT 21
27029: PUSH
27030: LD_INT 3
27032: PUSH
27033: EMPTY
27034: LIST
27035: LIST
27036: PUSH
27037: LD_INT 50
27039: PUSH
27040: EMPTY
27041: LIST
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: LIST
27047: LIST
27048: PPUSH
27049: CALL_OW 69
27053: ST_TO_ADDR
// for i in buildings do
27054: LD_ADDR_VAR 0 4
27058: PUSH
27059: LD_VAR 0 3
27063: PUSH
27064: FOR_IN
27065: IFFALSE 27517
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
27067: LD_VAR 0 4
27071: PPUSH
27072: CALL_OW 266
27076: PUSH
27077: LD_INT 6
27079: PUSH
27080: LD_INT 7
27082: PUSH
27083: LD_INT 8
27085: PUSH
27086: EMPTY
27087: LIST
27088: LIST
27089: LIST
27090: IN
27091: IFFALSE 27205
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
27093: LD_ADDR_VAR 0 2
27097: PUSH
27098: LD_VAR 0 2
27102: PUSH
27103: LD_VAR 0 4
27107: PPUSH
27108: CALL_OW 266
27112: PUSH
27113: LD_VAR 0 4
27117: PPUSH
27118: CALL_OW 250
27122: PUSH
27123: LD_VAR 0 4
27127: PPUSH
27128: CALL_OW 251
27132: PUSH
27133: LD_VAR 0 4
27137: PPUSH
27138: CALL_OW 254
27142: PUSH
27143: LD_VAR 0 4
27147: PPUSH
27148: CALL_OW 267
27152: PUSH
27153: LD_VAR 0 4
27157: PPUSH
27158: CALL_OW 248
27162: PUSH
27163: LD_VAR 0 4
27167: PPUSH
27168: LD_INT 1
27170: PPUSH
27171: CALL_OW 268
27175: PUSH
27176: LD_VAR 0 4
27180: PPUSH
27181: LD_INT 2
27183: PPUSH
27184: CALL_OW 268
27188: PUSH
27189: EMPTY
27190: LIST
27191: LIST
27192: LIST
27193: LIST
27194: LIST
27195: LIST
27196: LIST
27197: LIST
27198: PUSH
27199: EMPTY
27200: LIST
27201: ADD
27202: ST_TO_ADDR
27203: GO 27515
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
27205: LD_VAR 0 4
27209: PPUSH
27210: CALL_OW 266
27214: PUSH
27215: LD_INT 32
27217: EQUAL
27218: PUSH
27219: LD_VAR 0 4
27223: PPUSH
27224: CALL_OW 266
27228: PUSH
27229: LD_INT 33
27231: EQUAL
27232: OR
27233: IFFALSE 27330
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
27235: LD_ADDR_VAR 0 2
27239: PUSH
27240: LD_VAR 0 2
27244: PUSH
27245: LD_VAR 0 4
27249: PPUSH
27250: CALL_OW 266
27254: PUSH
27255: LD_VAR 0 4
27259: PPUSH
27260: CALL_OW 250
27264: PUSH
27265: LD_VAR 0 4
27269: PPUSH
27270: CALL_OW 251
27274: PUSH
27275: LD_VAR 0 4
27279: PPUSH
27280: CALL_OW 254
27284: PUSH
27285: LD_VAR 0 4
27289: PPUSH
27290: CALL_OW 267
27294: PUSH
27295: LD_VAR 0 4
27299: PPUSH
27300: CALL_OW 248
27304: PUSH
27305: LD_VAR 0 4
27309: PPUSH
27310: CALL_OW 269
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: LIST
27319: LIST
27320: LIST
27321: LIST
27322: LIST
27323: PUSH
27324: EMPTY
27325: LIST
27326: ADD
27327: ST_TO_ADDR
27328: GO 27515
// if GetBType ( i ) = b_factory then
27330: LD_VAR 0 4
27334: PPUSH
27335: CALL_OW 266
27339: PUSH
27340: LD_INT 3
27342: EQUAL
27343: IFFALSE 27433
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
27345: LD_ADDR_VAR 0 2
27349: PUSH
27350: LD_VAR 0 2
27354: PPUSH
27355: LD_INT 1
27357: PPUSH
27358: LD_VAR 0 4
27362: PPUSH
27363: CALL_OW 266
27367: PUSH
27368: LD_VAR 0 4
27372: PPUSH
27373: CALL_OW 250
27377: PUSH
27378: LD_VAR 0 4
27382: PPUSH
27383: CALL_OW 251
27387: PUSH
27388: LD_VAR 0 4
27392: PPUSH
27393: CALL_OW 254
27397: PUSH
27398: LD_VAR 0 4
27402: PPUSH
27403: CALL_OW 267
27407: PUSH
27408: LD_VAR 0 4
27412: PPUSH
27413: CALL_OW 248
27417: PUSH
27418: EMPTY
27419: LIST
27420: LIST
27421: LIST
27422: LIST
27423: LIST
27424: LIST
27425: PPUSH
27426: CALL_OW 2
27430: ST_TO_ADDR
27431: GO 27515
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
27433: LD_ADDR_VAR 0 2
27437: PUSH
27438: LD_VAR 0 2
27442: PUSH
27443: LD_VAR 0 4
27447: PPUSH
27448: CALL_OW 266
27452: PUSH
27453: LD_VAR 0 4
27457: PPUSH
27458: CALL_OW 250
27462: PUSH
27463: LD_VAR 0 4
27467: PPUSH
27468: CALL_OW 251
27472: PUSH
27473: LD_VAR 0 4
27477: PPUSH
27478: CALL_OW 254
27482: PUSH
27483: LD_VAR 0 4
27487: PPUSH
27488: CALL_OW 267
27492: PUSH
27493: LD_VAR 0 4
27497: PPUSH
27498: CALL_OW 248
27502: PUSH
27503: EMPTY
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: PUSH
27511: EMPTY
27512: LIST
27513: ADD
27514: ST_TO_ADDR
// end ;
27515: GO 27064
27517: POP
27518: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
27519: LD_VAR 0 2
27523: PPUSH
27524: LD_STRING 10_EpsilonBase
27526: PPUSH
27527: CALL_OW 39
// end ; end_of_file
27531: LD_VAR 0 1
27535: RET
// every 0 0$01 do var timer ;
27536: GO 27538
27538: DISABLE
27539: LD_INT 0
27541: PPUSH
// begin timer := 0 0$30 ;
27542: LD_ADDR_VAR 0 1
27546: PUSH
27547: LD_INT 1050
27549: ST_TO_ADDR
// repeat wait ( timer ) ;
27550: LD_VAR 0 1
27554: PPUSH
27555: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 12 then
27559: LD_EXP 55
27563: PUSH
27564: LD_INT 6
27566: GREATEREQUAL
27567: PUSH
27568: LD_EXP 55
27572: PUSH
27573: LD_INT 12
27575: LESS
27576: AND
27577: IFFALSE 27593
// timer := timer + 0 0$3 ;
27579: LD_ADDR_VAR 0 1
27583: PUSH
27584: LD_VAR 0 1
27588: PUSH
27589: LD_INT 105
27591: PLUS
27592: ST_TO_ADDR
// if cratesSpawned >= 12 then
27593: LD_EXP 55
27597: PUSH
27598: LD_INT 12
27600: GREATEREQUAL
27601: IFFALSE 27617
// timer := timer + 0 0$9 ;
27603: LD_ADDR_VAR 0 1
27607: PUSH
27608: LD_VAR 0 1
27612: PUSH
27613: LD_INT 315
27615: PLUS
27616: ST_TO_ADDR
// if timer > 3 3$00 then
27617: LD_VAR 0 1
27621: PUSH
27622: LD_INT 6300
27624: GREATER
27625: IFFALSE 27635
// timer := 0 0$50 ;
27627: LD_ADDR_VAR 0 1
27631: PUSH
27632: LD_INT 1750
27634: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
27635: LD_INT 1
27637: PPUSH
27638: LD_INT 5
27640: PPUSH
27641: CALL_OW 12
27645: PPUSH
27646: LD_INT 16
27648: PPUSH
27649: LD_INT 1
27651: PPUSH
27652: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
27656: LD_ADDR_EXP 55
27660: PUSH
27661: LD_EXP 55
27665: PUSH
27666: LD_INT 1
27668: PLUS
27669: ST_TO_ADDR
// until false ;
27670: LD_INT 0
27672: IFFALSE 27550
// end ; end_of_file
27674: PPOPN 1
27676: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
27677: GO 27679
27679: DISABLE
// begin ru_radar := 98 ;
27680: LD_ADDR_EXP 64
27684: PUSH
27685: LD_INT 98
27687: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
27688: LD_ADDR_EXP 65
27692: PUSH
27693: LD_INT 89
27695: ST_TO_ADDR
// us_hack := 99 ;
27696: LD_ADDR_EXP 66
27700: PUSH
27701: LD_INT 99
27703: ST_TO_ADDR
// us_artillery := 97 ;
27704: LD_ADDR_EXP 67
27708: PUSH
27709: LD_INT 97
27711: ST_TO_ADDR
// ar_bio_bomb := 91 ;
27712: LD_ADDR_EXP 68
27716: PUSH
27717: LD_INT 91
27719: ST_TO_ADDR
// end ; end_of_file end_of_file end_of_file
27720: END
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; var i , eff , side ; begin
27721: LD_INT 0
27723: PPUSH
27724: PPUSH
27725: PPUSH
27726: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
27727: LD_VAR 0 1
27731: PPUSH
27732: CALL_OW 264
27736: PUSH
27737: LD_EXP 68
27741: EQUAL
27742: IFFALSE 27814
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
27744: LD_INT 68
27746: PPUSH
27747: LD_VAR 0 1
27751: PPUSH
27752: CALL_OW 255
27756: PPUSH
27757: CALL_OW 321
27761: PUSH
27762: LD_INT 2
27764: EQUAL
27765: IFFALSE 27777
// eff := 70 else
27767: LD_ADDR_VAR 0 6
27771: PUSH
27772: LD_INT 70
27774: ST_TO_ADDR
27775: GO 27785
// eff := 30 ;
27777: LD_ADDR_VAR 0 6
27781: PUSH
27782: LD_INT 30
27784: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
27785: LD_VAR 0 1
27789: PPUSH
27790: CALL_OW 250
27794: PPUSH
27795: LD_VAR 0 1
27799: PPUSH
27800: CALL_OW 251
27804: PPUSH
27805: LD_VAR 0 6
27809: PPUSH
27810: CALL_OW 495
// end ; end ;
27814: LD_VAR 0 4
27818: RET
// export function SOS_Command ( cmd ) ; var i , j , tmp , taskList , _taskList ; begin
27819: LD_INT 0
27821: PPUSH
27822: PPUSH
27823: PPUSH
27824: PPUSH
27825: PPUSH
27826: PPUSH
// if cmd = 124 then
27827: LD_VAR 0 1
27831: PUSH
27832: LD_INT 124
27834: EQUAL
27835: IFFALSE 28041
// begin tmp := FilterAllUnits ( [ f_or , [ f_weapon , ru_bulldozer ] , [ f_weapon , us_bulldozer ] ] ) ;
27837: LD_ADDR_VAR 0 5
27841: PUSH
27842: LD_INT 2
27844: PUSH
27845: LD_INT 34
27847: PUSH
27848: LD_INT 53
27850: PUSH
27851: EMPTY
27852: LIST
27853: LIST
27854: PUSH
27855: LD_INT 34
27857: PUSH
27858: LD_INT 14
27860: PUSH
27861: EMPTY
27862: LIST
27863: LIST
27864: PUSH
27865: EMPTY
27866: LIST
27867: LIST
27868: LIST
27869: PPUSH
27870: CALL_OW 69
27874: ST_TO_ADDR
// if not tmp then
27875: LD_VAR 0 5
27879: NOT
27880: IFFALSE 27884
// exit ;
27882: GO 28041
// for i in tmp do
27884: LD_ADDR_VAR 0 3
27888: PUSH
27889: LD_VAR 0 5
27893: PUSH
27894: FOR_IN
27895: IFFALSE 28039
// begin taskList := GetTaskList ( i ) ;
27897: LD_ADDR_VAR 0 6
27901: PUSH
27902: LD_VAR 0 3
27906: PPUSH
27907: CALL_OW 437
27911: ST_TO_ADDR
// if not taskList then
27912: LD_VAR 0 6
27916: NOT
27917: IFFALSE 27921
// continue ;
27919: GO 27894
// for j = 1 to taskList do
27921: LD_ADDR_VAR 0 4
27925: PUSH
27926: DOUBLE
27927: LD_INT 1
27929: DEC
27930: ST_TO_ADDR
27931: LD_VAR 0 6
27935: PUSH
27936: FOR_TO
27937: IFFALSE 28035
// if taskList [ j ] [ 1 ] = | then
27939: LD_VAR 0 6
27943: PUSH
27944: LD_VAR 0 4
27948: ARRAY
27949: PUSH
27950: LD_INT 1
27952: ARRAY
27953: PUSH
27954: LD_STRING |
27956: EQUAL
27957: IFFALSE 28033
// begin _taskList := Delete ( taskList , 1 ) ;
27959: LD_ADDR_VAR 0 7
27963: PUSH
27964: LD_VAR 0 6
27968: PPUSH
27969: LD_INT 1
27971: PPUSH
27972: CALL_OW 3
27976: ST_TO_ADDR
// SetTaskList ( i , _taskList ) ;
27977: LD_VAR 0 3
27981: PPUSH
27982: LD_VAR 0 7
27986: PPUSH
27987: CALL_OW 446
// CutTreeXYR ( i , taskList [ j ] [ 2 ] , taskList [ j ] [ 3 ] , 8 ) ;
27991: LD_VAR 0 3
27995: PPUSH
27996: LD_VAR 0 6
28000: PUSH
28001: LD_VAR 0 4
28005: ARRAY
28006: PUSH
28007: LD_INT 2
28009: ARRAY
28010: PPUSH
28011: LD_VAR 0 6
28015: PUSH
28016: LD_VAR 0 4
28020: ARRAY
28021: PUSH
28022: LD_INT 3
28024: ARRAY
28025: PPUSH
28026: LD_INT 8
28028: PPUSH
28029: CALL 28046 0 4
// end ;
28033: GO 27936
28035: POP
28036: POP
// end ;
28037: GO 27894
28039: POP
28040: POP
// end ; end ;
28041: LD_VAR 0 2
28045: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
28046: LD_INT 0
28048: PPUSH
28049: PPUSH
28050: PPUSH
28051: PPUSH
28052: PPUSH
28053: PPUSH
28054: PPUSH
28055: PPUSH
28056: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
28057: LD_VAR 0 1
28061: NOT
28062: PUSH
28063: LD_VAR 0 2
28067: PPUSH
28068: LD_VAR 0 3
28072: PPUSH
28073: CALL_OW 488
28077: NOT
28078: OR
28079: PUSH
28080: LD_VAR 0 4
28084: NOT
28085: OR
28086: IFFALSE 28090
// exit ;
28088: GO 28430
// list := [ ] ;
28090: LD_ADDR_VAR 0 13
28094: PUSH
28095: EMPTY
28096: ST_TO_ADDR
// if x - r < 0 then
28097: LD_VAR 0 2
28101: PUSH
28102: LD_VAR 0 4
28106: MINUS
28107: PUSH
28108: LD_INT 0
28110: LESS
28111: IFFALSE 28123
// min_x := 0 else
28113: LD_ADDR_VAR 0 7
28117: PUSH
28118: LD_INT 0
28120: ST_TO_ADDR
28121: GO 28139
// min_x := x - r ;
28123: LD_ADDR_VAR 0 7
28127: PUSH
28128: LD_VAR 0 2
28132: PUSH
28133: LD_VAR 0 4
28137: MINUS
28138: ST_TO_ADDR
// if y - r < 0 then
28139: LD_VAR 0 3
28143: PUSH
28144: LD_VAR 0 4
28148: MINUS
28149: PUSH
28150: LD_INT 0
28152: LESS
28153: IFFALSE 28165
// min_y := 0 else
28155: LD_ADDR_VAR 0 8
28159: PUSH
28160: LD_INT 0
28162: ST_TO_ADDR
28163: GO 28181
// min_y := y - r ;
28165: LD_ADDR_VAR 0 8
28169: PUSH
28170: LD_VAR 0 3
28174: PUSH
28175: LD_VAR 0 4
28179: MINUS
28180: ST_TO_ADDR
// max_x := x + r ;
28181: LD_ADDR_VAR 0 9
28185: PUSH
28186: LD_VAR 0 2
28190: PUSH
28191: LD_VAR 0 4
28195: PLUS
28196: ST_TO_ADDR
// max_y := y + r ;
28197: LD_ADDR_VAR 0 10
28201: PUSH
28202: LD_VAR 0 3
28206: PUSH
28207: LD_VAR 0 4
28211: PLUS
28212: ST_TO_ADDR
// for _x = min_x to max_x do
28213: LD_ADDR_VAR 0 11
28217: PUSH
28218: DOUBLE
28219: LD_VAR 0 7
28223: DEC
28224: ST_TO_ADDR
28225: LD_VAR 0 9
28229: PUSH
28230: FOR_TO
28231: IFFALSE 28348
// for _y = min_y to max_y do
28233: LD_ADDR_VAR 0 12
28237: PUSH
28238: DOUBLE
28239: LD_VAR 0 8
28243: DEC
28244: ST_TO_ADDR
28245: LD_VAR 0 10
28249: PUSH
28250: FOR_TO
28251: IFFALSE 28344
// begin if not ValidHex ( _x , _y ) then
28253: LD_VAR 0 11
28257: PPUSH
28258: LD_VAR 0 12
28262: PPUSH
28263: CALL_OW 488
28267: NOT
28268: IFFALSE 28272
// continue ;
28270: GO 28250
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
28272: LD_VAR 0 11
28276: PPUSH
28277: LD_VAR 0 12
28281: PPUSH
28282: CALL_OW 351
28286: PUSH
28287: LD_VAR 0 11
28291: PPUSH
28292: LD_VAR 0 12
28296: PPUSH
28297: CALL_OW 554
28301: AND
28302: IFFALSE 28342
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
28304: LD_ADDR_VAR 0 13
28308: PUSH
28309: LD_VAR 0 13
28313: PPUSH
28314: LD_VAR 0 13
28318: PUSH
28319: LD_INT 1
28321: PLUS
28322: PPUSH
28323: LD_VAR 0 11
28327: PUSH
28328: LD_VAR 0 12
28332: PUSH
28333: EMPTY
28334: LIST
28335: LIST
28336: PPUSH
28337: CALL_OW 2
28341: ST_TO_ADDR
// end ;
28342: GO 28250
28344: POP
28345: POP
28346: GO 28230
28348: POP
28349: POP
// if not list then
28350: LD_VAR 0 13
28354: NOT
28355: IFFALSE 28359
// exit ;
28357: GO 28430
// for i in list do
28359: LD_ADDR_VAR 0 6
28363: PUSH
28364: LD_VAR 0 13
28368: PUSH
28369: FOR_IN
28370: IFFALSE 28428
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
28372: LD_VAR 0 1
28376: PPUSH
28377: LD_STRING M
28379: PUSH
28380: LD_VAR 0 6
28384: PUSH
28385: LD_INT 1
28387: ARRAY
28388: PUSH
28389: LD_VAR 0 6
28393: PUSH
28394: LD_INT 2
28396: ARRAY
28397: PUSH
28398: LD_INT 0
28400: PUSH
28401: LD_INT 0
28403: PUSH
28404: LD_INT 0
28406: PUSH
28407: LD_INT 0
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: LIST
28414: LIST
28415: LIST
28416: LIST
28417: LIST
28418: PUSH
28419: EMPTY
28420: LIST
28421: PPUSH
28422: CALL_OW 447
28426: GO 28369
28428: POP
28429: POP
// end ;
28430: LD_VAR 0 5
28434: RET
