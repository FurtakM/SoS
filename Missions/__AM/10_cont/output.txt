// starting begin ResetFog ;
   0: CALL_OW 335
// RandomizeAll ;
   4: CALL_OW 11
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Init ;
  15: CALL 115 0 0
// if debug then
  19: LD_EXP 1
  23: IFFALSE 33
// Difficulty := 4 ;
  25: LD_ADDR_OWVAR 67
  29: PUSH
  30: LD_INT 4
  32: ST_TO_ADDR
// PrepareArabian ;
  33: CALL 3313 0 0
// PrepareAmerican ;
  37: CALL 953 0 0
// PrepareRussian ;
  41: CALL 8006 0 0
// PrepareNature ( 4 , 3 , [ 4 , 5 , 5 , 5 ] [ Difficulty ] , 2 , 1 , 0 , 2 , natureArea , riverArea ) ;
  45: LD_INT 4
  47: PPUSH
  48: LD_INT 3
  50: PPUSH
  51: LD_INT 4
  53: PUSH
  54: LD_INT 5
  56: PUSH
  57: LD_INT 5
  59: PUSH
  60: LD_INT 5
  62: PUSH
  63: EMPTY
  64: LIST
  65: LIST
  66: LIST
  67: LIST
  68: PUSH
  69: LD_OWVAR 67
  73: ARRAY
  74: PPUSH
  75: LD_INT 2
  77: PPUSH
  78: LD_INT 1
  80: PPUSH
  81: LD_INT 0
  83: PPUSH
  84: LD_INT 2
  86: PPUSH
  87: LD_INT 1
  89: PPUSH
  90: LD_INT 2
  92: PPUSH
  93: CALL 85346 0 9
// Action ;
  97: CALL 22991 0 0
// if debug then
 101: LD_EXP 1
 105: IFFALSE 114
// FogOff ( 1 ) ;
 107: LD_INT 1
 109: PPUSH
 110: CALL_OW 344
// end ;
 114: END
// export debug , mission_prefix , arBaseActive , arabianAttack , khatamStatus , seenRussianTeleport , joinedToEpsilon , arabianDefeated , hasBase , epsilon , escapeKhatam , arabianAttackSpawned , gensherEscaped , ruScriptActive , ruScriptActive2 , firstAttack , dialogRussianSpaceAmmo , russianWaveAttack , spawnedRussians , hasSniper , arabianEscapedCounter ; function Init ; begin
 115: LD_INT 0
 117: PPUSH
// debug := false ;
 118: LD_ADDR_EXP 1
 122: PUSH
 123: LD_INT 0
 125: ST_TO_ADDR
// mission_prefix := 08c_ ;
 126: LD_ADDR_EXP 2
 130: PUSH
 131: LD_STRING 08c_
 133: ST_TO_ADDR
// arBaseActive := true ;
 134: LD_ADDR_EXP 3
 138: PUSH
 139: LD_INT 1
 141: ST_TO_ADDR
// arabianAttack := false ;
 142: LD_ADDR_EXP 4
 146: PUSH
 147: LD_INT 0
 149: ST_TO_ADDR
// khatamStatus := false ;
 150: LD_ADDR_EXP 5
 154: PUSH
 155: LD_INT 0
 157: ST_TO_ADDR
// seenRussianTeleport := false ;
 158: LD_ADDR_EXP 6
 162: PUSH
 163: LD_INT 0
 165: ST_TO_ADDR
// joinedToEpsilon := false ;
 166: LD_ADDR_EXP 7
 170: PUSH
 171: LD_INT 0
 173: ST_TO_ADDR
// arabianDefeated := false ;
 174: LD_ADDR_EXP 8
 178: PUSH
 179: LD_INT 0
 181: ST_TO_ADDR
// arabianAttackSpawned := false ;
 182: LD_ADDR_EXP 12
 186: PUSH
 187: LD_INT 0
 189: ST_TO_ADDR
// gensherEscaped := false ;
 190: LD_ADDR_EXP 13
 194: PUSH
 195: LD_INT 0
 197: ST_TO_ADDR
// hasBase := false ;
 198: LD_ADDR_EXP 9
 202: PUSH
 203: LD_INT 0
 205: ST_TO_ADDR
// epsilon := 0 ;
 206: LD_ADDR_EXP 10
 210: PUSH
 211: LD_INT 0
 213: ST_TO_ADDR
// escapeKhatam := false ;
 214: LD_ADDR_EXP 11
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// ruScriptActive := false ;
 222: LD_ADDR_EXP 14
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// ruScriptActive2 := false ;
 230: LD_ADDR_EXP 15
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// firstAttack := false ;
 238: LD_ADDR_EXP 16
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// dialogRussianSpaceAmmo := false ;
 246: LD_ADDR_EXP 17
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// russianWaveAttack := 0 ;
 254: LD_ADDR_EXP 18
 258: PUSH
 259: LD_INT 0
 261: ST_TO_ADDR
// spawnedRussians := false ;
 262: LD_ADDR_EXP 19
 266: PUSH
 267: LD_INT 0
 269: ST_TO_ADDR
// hasSniper := false ;
 270: LD_ADDR_EXP 20
 274: PUSH
 275: LD_INT 0
 277: ST_TO_ADDR
// arabianEscapedCounter := 0 ;
 278: LD_ADDR_EXP 21
 282: PUSH
 283: LD_INT 0
 285: ST_TO_ADDR
// end ;
 286: LD_VAR 0 1
 290: RET
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and not arabianAttack and spawnedRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 291: LD_INT 1
 293: PPUSH
 294: LD_INT 2
 296: PPUSH
 297: CALL_OW 81
 301: PUSH
 302: LD_INT 1
 304: EQUAL
 305: PUSH
 306: LD_EXP 4
 310: NOT
 311: AND
 312: PUSH
 313: LD_EXP 19
 317: AND
 318: PUSH
 319: LD_INT 22
 321: PUSH
 322: LD_INT 3
 324: PUSH
 325: EMPTY
 326: LIST
 327: LIST
 328: PPUSH
 329: CALL_OW 69
 333: PUSH
 334: LD_INT 0
 336: EQUAL
 337: AND
 338: IFFALSE 350
 340: GO 342
 342: DISABLE
// SetAchievement ( ACH_POWER ) ;
 343: LD_STRING ACH_POWER
 345: PPUSH
 346: CALL_OW 543
 350: END
// every 0 0$1 trigger spawnedRussians and not ruBase and not ruBase2 and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 351: LD_EXP 19
 355: PUSH
 356: LD_EXP 67
 360: NOT
 361: AND
 362: PUSH
 363: LD_EXP 68
 367: NOT
 368: AND
 369: PUSH
 370: LD_INT 22
 372: PUSH
 373: LD_INT 3
 375: PUSH
 376: EMPTY
 377: LIST
 378: LIST
 379: PPUSH
 380: CALL_OW 69
 384: PUSH
 385: LD_INT 0
 387: EQUAL
 388: AND
 389: IFFALSE 401
 391: GO 393
 393: DISABLE
// SetAchievement ( ACH_TACT ) ;
 394: LD_STRING ACH_TACT
 396: PPUSH
 397: CALL_OW 543
 401: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 402: LD_INT 22
 404: PUSH
 405: LD_INT 1
 407: PUSH
 408: EMPTY
 409: LIST
 410: LIST
 411: PUSH
 412: LD_INT 30
 414: PUSH
 415: LD_INT 1
 417: PUSH
 418: EMPTY
 419: LIST
 420: LIST
 421: PUSH
 422: EMPTY
 423: LIST
 424: LIST
 425: PPUSH
 426: CALL_OW 69
 430: PUSH
 431: LD_INT 22
 433: PUSH
 434: LD_INT 1
 436: PUSH
 437: EMPTY
 438: LIST
 439: LIST
 440: PUSH
 441: LD_INT 30
 443: PUSH
 444: LD_INT 32
 446: PUSH
 447: EMPTY
 448: LIST
 449: LIST
 450: PUSH
 451: EMPTY
 452: LIST
 453: LIST
 454: PPUSH
 455: CALL_OW 69
 459: AND
 460: PUSH
 461: LD_INT 22
 463: PUSH
 464: LD_INT 1
 466: PUSH
 467: EMPTY
 468: LIST
 469: LIST
 470: PUSH
 471: LD_INT 30
 473: PUSH
 474: LD_INT 33
 476: PUSH
 477: EMPTY
 478: LIST
 479: LIST
 480: PUSH
 481: EMPTY
 482: LIST
 483: LIST
 484: PPUSH
 485: CALL_OW 69
 489: AND
 490: PUSH
 491: LD_INT 22
 493: PUSH
 494: LD_INT 1
 496: PUSH
 497: EMPTY
 498: LIST
 499: LIST
 500: PUSH
 501: LD_INT 30
 503: PUSH
 504: LD_INT 5
 506: PUSH
 507: EMPTY
 508: LIST
 509: LIST
 510: PUSH
 511: EMPTY
 512: LIST
 513: LIST
 514: PPUSH
 515: CALL_OW 69
 519: AND
 520: PUSH
 521: LD_INT 22
 523: PUSH
 524: LD_INT 1
 526: PUSH
 527: EMPTY
 528: LIST
 529: LIST
 530: PUSH
 531: LD_INT 30
 533: PUSH
 534: LD_INT 3
 536: PUSH
 537: EMPTY
 538: LIST
 539: LIST
 540: PUSH
 541: EMPTY
 542: LIST
 543: LIST
 544: PPUSH
 545: CALL_OW 69
 549: AND
 550: PUSH
 551: LD_INT 22
 553: PUSH
 554: LD_INT 1
 556: PUSH
 557: EMPTY
 558: LIST
 559: LIST
 560: PUSH
 561: LD_INT 30
 563: PUSH
 564: LD_INT 36
 566: PUSH
 567: EMPTY
 568: LIST
 569: LIST
 570: PUSH
 571: EMPTY
 572: LIST
 573: LIST
 574: PPUSH
 575: CALL_OW 69
 579: AND
 580: PUSH
 581: LD_INT 22
 583: PUSH
 584: LD_INT 1
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PUSH
 591: LD_INT 30
 593: PUSH
 594: LD_INT 31
 596: PUSH
 597: EMPTY
 598: LIST
 599: LIST
 600: PUSH
 601: EMPTY
 602: LIST
 603: LIST
 604: PPUSH
 605: CALL_OW 69
 609: AND
 610: PUSH
 611: LD_INT 22
 613: PUSH
 614: LD_INT 1
 616: PUSH
 617: EMPTY
 618: LIST
 619: LIST
 620: PUSH
 621: LD_INT 30
 623: PUSH
 624: LD_INT 22
 626: PUSH
 627: EMPTY
 628: LIST
 629: LIST
 630: PUSH
 631: EMPTY
 632: LIST
 633: LIST
 634: PPUSH
 635: CALL_OW 69
 639: AND
 640: PUSH
 641: LD_INT 22
 643: PUSH
 644: LD_INT 1
 646: PUSH
 647: EMPTY
 648: LIST
 649: LIST
 650: PUSH
 651: LD_INT 30
 653: PUSH
 654: LD_INT 20
 656: PUSH
 657: EMPTY
 658: LIST
 659: LIST
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: PPUSH
 665: CALL_OW 69
 669: AND
 670: PUSH
 671: LD_INT 22
 673: PUSH
 674: LD_INT 1
 676: PUSH
 677: EMPTY
 678: LIST
 679: LIST
 680: PUSH
 681: LD_INT 30
 683: PUSH
 684: LD_INT 19
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: PUSH
 691: EMPTY
 692: LIST
 693: LIST
 694: PPUSH
 695: CALL_OW 69
 699: AND
 700: PUSH
 701: LD_INT 22
 703: PUSH
 704: LD_INT 1
 706: PUSH
 707: EMPTY
 708: LIST
 709: LIST
 710: PUSH
 711: LD_INT 30
 713: PUSH
 714: LD_INT 16
 716: PUSH
 717: EMPTY
 718: LIST
 719: LIST
 720: PUSH
 721: EMPTY
 722: LIST
 723: LIST
 724: PPUSH
 725: CALL_OW 69
 729: AND
 730: PUSH
 731: LD_INT 22
 733: PUSH
 734: LD_INT 1
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PUSH
 741: LD_INT 30
 743: PUSH
 744: LD_INT 17
 746: PUSH
 747: EMPTY
 748: LIST
 749: LIST
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: PPUSH
 755: CALL_OW 69
 759: AND
 760: PUSH
 761: LD_INT 22
 763: PUSH
 764: LD_INT 1
 766: PUSH
 767: EMPTY
 768: LIST
 769: LIST
 770: PUSH
 771: LD_INT 30
 773: PUSH
 774: LD_INT 21
 776: PUSH
 777: EMPTY
 778: LIST
 779: LIST
 780: PUSH
 781: EMPTY
 782: LIST
 783: LIST
 784: PPUSH
 785: CALL_OW 69
 789: AND
 790: PUSH
 791: LD_INT 22
 793: PUSH
 794: LD_INT 1
 796: PUSH
 797: EMPTY
 798: LIST
 799: LIST
 800: PUSH
 801: LD_INT 30
 803: PUSH
 804: LD_INT 29
 806: PUSH
 807: EMPTY
 808: LIST
 809: LIST
 810: PUSH
 811: EMPTY
 812: LIST
 813: LIST
 814: PPUSH
 815: CALL_OW 69
 819: AND
 820: PUSH
 821: LD_INT 22
 823: PUSH
 824: LD_INT 1
 826: PUSH
 827: EMPTY
 828: LIST
 829: LIST
 830: PUSH
 831: LD_INT 30
 833: PUSH
 834: LD_INT 30
 836: PUSH
 837: EMPTY
 838: LIST
 839: LIST
 840: PUSH
 841: EMPTY
 842: LIST
 843: LIST
 844: PPUSH
 845: CALL_OW 69
 849: AND
 850: PUSH
 851: LD_INT 22
 853: PUSH
 854: LD_INT 1
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PUSH
 861: LD_INT 30
 863: PUSH
 864: LD_INT 27
 866: PUSH
 867: EMPTY
 868: LIST
 869: LIST
 870: PUSH
 871: EMPTY
 872: LIST
 873: LIST
 874: PPUSH
 875: CALL_OW 69
 879: AND
 880: PUSH
 881: LD_INT 22
 883: PUSH
 884: LD_INT 1
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: PUSH
 891: LD_INT 30
 893: PUSH
 894: LD_INT 26
 896: PUSH
 897: EMPTY
 898: LIST
 899: LIST
 900: PUSH
 901: EMPTY
 902: LIST
 903: LIST
 904: PPUSH
 905: CALL_OW 69
 909: AND
 910: PUSH
 911: LD_INT 22
 913: PUSH
 914: LD_INT 1
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: LD_INT 30
 923: PUSH
 924: LD_INT 28
 926: PUSH
 927: EMPTY
 928: LIST
 929: LIST
 930: PUSH
 931: EMPTY
 932: LIST
 933: LIST
 934: PPUSH
 935: CALL_OW 69
 939: AND
 940: IFFALSE 952
 942: GO 944
 944: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
 945: LD_STRING ACH_ARCH
 947: PPUSH
 948: CALL_OW 543
 952: END
// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Mike ; export Cornell , Truman , Powell ; export JMMSquad , others , others09 , ape09 ; export function PrepareAmerican ; var i , j , veh , vehs , sibRes , tmp , amount ; begin
 953: LD_INT 0
 955: PPUSH
 956: PPUSH
 957: PPUSH
 958: PPUSH
 959: PPUSH
 960: PPUSH
 961: PPUSH
 962: PPUSH
// uc_nation := nation_american ;
 963: LD_ADDR_OWVAR 21
 967: PUSH
 968: LD_INT 1
 970: ST_TO_ADDR
// uc_side := 4 ;
 971: LD_ADDR_OWVAR 20
 975: PUSH
 976: LD_INT 4
 978: ST_TO_ADDR
// Powell := PrepareUnit ( Powell , false ,  ) ;
 979: LD_ADDR_EXP 43
 983: PUSH
 984: LD_STRING Powell
 986: PPUSH
 987: LD_INT 0
 989: PPUSH
 990: LD_STRING 
 992: PPUSH
 993: CALL 51335 0 3
 997: ST_TO_ADDR
// uc_side := 1 ;
 998: LD_ADDR_OWVAR 20
1002: PUSH
1003: LD_INT 1
1005: ST_TO_ADDR
// JMMSquad := [ ] ;
1006: LD_ADDR_EXP 44
1010: PUSH
1011: EMPTY
1012: ST_TO_ADDR
// JMM := PrepareUnit ( JMM , ( not debug ) , 10_ ) ;
1013: LD_ADDR_EXP 22
1017: PUSH
1018: LD_STRING JMM
1020: PPUSH
1021: LD_EXP 1
1025: NOT
1026: PPUSH
1027: LD_STRING 10_
1029: PPUSH
1030: CALL 51335 0 3
1034: ST_TO_ADDR
// Gary := PrepareUnit ( Gary , ( not debug ) , 10_ ) ;
1035: LD_ADDR_EXP 31
1039: PUSH
1040: LD_STRING Gary
1042: PPUSH
1043: LD_EXP 1
1047: NOT
1048: PPUSH
1049: LD_STRING 10_
1051: PPUSH
1052: CALL 51335 0 3
1056: ST_TO_ADDR
// Cyrus := PrepareUnit ( Cyrus , ( not debug ) , 10_ ) ;
1057: LD_ADDR_EXP 26
1061: PUSH
1062: LD_STRING Cyrus
1064: PPUSH
1065: LD_EXP 1
1069: NOT
1070: PPUSH
1071: LD_STRING 10_
1073: PPUSH
1074: CALL 51335 0 3
1078: ST_TO_ADDR
// if Cyrus then
1079: LD_EXP 26
1083: IFFALSE 1101
// JMMSquad := JMMSquad ^ Cyrus ;
1085: LD_ADDR_EXP 44
1089: PUSH
1090: LD_EXP 44
1094: PUSH
1095: LD_EXP 26
1099: ADD
1100: ST_TO_ADDR
// Bobby := PrepareUnit ( Bobby , ( not debug ) , 10_ ) ;
1101: LD_ADDR_EXP 25
1105: PUSH
1106: LD_STRING Bobby
1108: PPUSH
1109: LD_EXP 1
1113: NOT
1114: PPUSH
1115: LD_STRING 10_
1117: PPUSH
1118: CALL 51335 0 3
1122: ST_TO_ADDR
// if Bobby then
1123: LD_EXP 25
1127: IFFALSE 1145
// JMMSquad := JMMSquad ^ Bobby ;
1129: LD_ADDR_EXP 44
1133: PUSH
1134: LD_EXP 44
1138: PUSH
1139: LD_EXP 25
1143: ADD
1144: ST_TO_ADDR
// Lisa := PrepareUnit ( Lisa , ( not debug ) , 10_ ) ;
1145: LD_ADDR_EXP 27
1149: PUSH
1150: LD_STRING Lisa
1152: PPUSH
1153: LD_EXP 1
1157: NOT
1158: PPUSH
1159: LD_STRING 10_
1161: PPUSH
1162: CALL 51335 0 3
1166: ST_TO_ADDR
// if Lisa then
1167: LD_EXP 27
1171: IFFALSE 1189
// JMMSquad := JMMSquad ^ Lisa ;
1173: LD_ADDR_EXP 44
1177: PUSH
1178: LD_EXP 44
1182: PUSH
1183: LD_EXP 27
1187: ADD
1188: ST_TO_ADDR
// Brown := PrepareUnit ( Brown , ( not debug ) , 10_ ) ;
1189: LD_ADDR_EXP 23
1193: PUSH
1194: LD_STRING Brown
1196: PPUSH
1197: LD_EXP 1
1201: NOT
1202: PPUSH
1203: LD_STRING 10_
1205: PPUSH
1206: CALL 51335 0 3
1210: ST_TO_ADDR
// if Brown then
1211: LD_EXP 23
1215: IFFALSE 1233
// JMMSquad := JMMSquad ^ Brown ;
1217: LD_ADDR_EXP 44
1221: PUSH
1222: LD_EXP 44
1226: PUSH
1227: LD_EXP 23
1231: ADD
1232: ST_TO_ADDR
// Donaldson := PrepareUnit ( Donaldson , ( not debug ) , 10_ ) ;
1233: LD_ADDR_EXP 24
1237: PUSH
1238: LD_STRING Donaldson
1240: PPUSH
1241: LD_EXP 1
1245: NOT
1246: PPUSH
1247: LD_STRING 10_
1249: PPUSH
1250: CALL 51335 0 3
1254: ST_TO_ADDR
// if Donaldson then
1255: LD_EXP 24
1259: IFFALSE 1277
// JMMSquad := JMMSquad ^ Donaldson ;
1261: LD_ADDR_EXP 44
1265: PUSH
1266: LD_EXP 44
1270: PUSH
1271: LD_EXP 24
1275: ADD
1276: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 10_ ) ;
1277: LD_ADDR_EXP 28
1281: PUSH
1282: LD_STRING Frank
1284: PPUSH
1285: LD_EXP 1
1289: NOT
1290: PPUSH
1291: LD_STRING 10_
1293: PPUSH
1294: CALL 51335 0 3
1298: ST_TO_ADDR
// if Frank then
1299: LD_EXP 28
1303: IFFALSE 1321
// JMMSquad := JMMSquad ^ Frank ;
1305: LD_ADDR_EXP 44
1309: PUSH
1310: LD_EXP 44
1314: PUSH
1315: LD_EXP 28
1319: ADD
1320: ST_TO_ADDR
// Houten := PrepareUnit ( Houten , ( not debug ) , 10_ ) ;
1321: LD_ADDR_EXP 30
1325: PUSH
1326: LD_STRING Houten
1328: PPUSH
1329: LD_EXP 1
1333: NOT
1334: PPUSH
1335: LD_STRING 10_
1337: PPUSH
1338: CALL 51335 0 3
1342: ST_TO_ADDR
// if Houten then
1343: LD_EXP 30
1347: IFFALSE 1365
// JMMSquad := JMMSquad ^ Houten ;
1349: LD_ADDR_EXP 44
1353: PUSH
1354: LD_EXP 44
1358: PUSH
1359: LD_EXP 30
1363: ADD
1364: ST_TO_ADDR
// others := CreateCharacterSet ( OthersIn10 ) ;
1365: LD_ADDR_EXP 45
1369: PUSH
1370: LD_STRING OthersIn10
1372: PPUSH
1373: CALL_OW 31
1377: ST_TO_ADDR
// if Count ( JMMSquad ) + Count ( others ) < 9 then
1378: LD_EXP 44
1382: PPUSH
1383: CALL 53437 0 1
1387: PUSH
1388: LD_EXP 45
1392: PPUSH
1393: CALL 53437 0 1
1397: PLUS
1398: PUSH
1399: LD_INT 9
1401: LESS
1402: IFFALSE 1489
// begin InitHC_All ( ) ;
1404: CALL_OW 584
// for i := 9 downto Count ( JMMSquad ) + Count ( others ) do
1408: LD_ADDR_VAR 0 2
1412: PUSH
1413: DOUBLE
1414: LD_INT 9
1416: INC
1417: ST_TO_ADDR
1418: LD_EXP 44
1422: PPUSH
1423: CALL 53437 0 1
1427: PUSH
1428: LD_EXP 45
1432: PPUSH
1433: CALL 53437 0 1
1437: PLUS
1438: PUSH
1439: FOR_DOWNTO
1440: IFFALSE 1487
// begin PrepareHuman ( false , i mod 4 + 1 , 5 ) ;
1442: LD_INT 0
1444: PPUSH
1445: LD_VAR 0 2
1449: PUSH
1450: LD_INT 4
1452: MOD
1453: PUSH
1454: LD_INT 1
1456: PLUS
1457: PPUSH
1458: LD_INT 5
1460: PPUSH
1461: CALL_OW 380
// others := Join ( others , CreateHuman ) ;
1465: LD_ADDR_EXP 45
1469: PUSH
1470: LD_EXP 45
1474: PPUSH
1475: CALL_OW 44
1479: PPUSH
1480: CALL 88656 0 2
1484: ST_TO_ADDR
// end ;
1485: GO 1439
1487: POP
1488: POP
// end ; if debug then
1489: LD_EXP 1
1493: IFFALSE 1534
// result := [ Cyrus , Bobby , Lisa , Donaldson , Brown ] else
1495: LD_ADDR_VAR 0 1
1499: PUSH
1500: LD_EXP 26
1504: PUSH
1505: LD_EXP 25
1509: PUSH
1510: LD_EXP 27
1514: PUSH
1515: LD_EXP 24
1519: PUSH
1520: LD_EXP 23
1524: PUSH
1525: EMPTY
1526: LIST
1527: LIST
1528: LIST
1529: LIST
1530: LIST
1531: ST_TO_ADDR
1532: GO 1697
// result := CharacterSelection ( 1 , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ 6 , 5 , 4 , 4 ] [ Difficulty ] , [ sel_not_changeable , sel_hired , sel_change_class ] ^ JMM ^ Gary ^ [ sel_not_hired , sel_changeable , sel_change_class ] ^ JMMSquad ^ others ^ [ sel_not_changeable , sel_not_hired ] ^ Powell , [ class_soldier , [ class_mechanic , 1 ] , [ class_engineer , 1 ] , class_scientistic ] ) ;
1534: LD_ADDR_VAR 0 1
1538: PUSH
1539: LD_STRING 1
1541: PPUSH
1542: LD_INT 6
1544: PUSH
1545: LD_INT 5
1547: PUSH
1548: LD_INT 4
1550: PUSH
1551: LD_INT 4
1553: PUSH
1554: EMPTY
1555: LIST
1556: LIST
1557: LIST
1558: LIST
1559: PUSH
1560: LD_OWVAR 67
1564: ARRAY
1565: PPUSH
1566: LD_INT 6
1568: PUSH
1569: LD_INT 5
1571: PUSH
1572: LD_INT 4
1574: PUSH
1575: LD_INT 4
1577: PUSH
1578: EMPTY
1579: LIST
1580: LIST
1581: LIST
1582: LIST
1583: PUSH
1584: LD_OWVAR 67
1588: ARRAY
1589: PPUSH
1590: LD_INT -4
1592: PUSH
1593: LD_INT -1
1595: PUSH
1596: LD_INT -5
1598: PUSH
1599: EMPTY
1600: LIST
1601: LIST
1602: LIST
1603: PUSH
1604: LD_EXP 22
1608: ADD
1609: PUSH
1610: LD_EXP 31
1614: ADD
1615: PUSH
1616: LD_INT -2
1618: PUSH
1619: LD_INT -3
1621: PUSH
1622: LD_INT -5
1624: PUSH
1625: EMPTY
1626: LIST
1627: LIST
1628: LIST
1629: ADD
1630: PUSH
1631: LD_EXP 44
1635: ADD
1636: PUSH
1637: LD_EXP 45
1641: ADD
1642: PUSH
1643: LD_INT -4
1645: PUSH
1646: LD_INT -2
1648: PUSH
1649: EMPTY
1650: LIST
1651: LIST
1652: ADD
1653: PUSH
1654: LD_EXP 43
1658: ADD
1659: PPUSH
1660: LD_INT 1
1662: PUSH
1663: LD_INT 3
1665: PUSH
1666: LD_INT 1
1668: PUSH
1669: EMPTY
1670: LIST
1671: LIST
1672: PUSH
1673: LD_INT 2
1675: PUSH
1676: LD_INT 1
1678: PUSH
1679: EMPTY
1680: LIST
1681: LIST
1682: PUSH
1683: LD_INT 4
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: PPUSH
1692: CALL_OW 42
1696: ST_TO_ADDR
// result := JoinUnion ( result , JMM ) ;
1697: LD_ADDR_VAR 0 1
1701: PUSH
1702: LD_VAR 0 1
1706: PPUSH
1707: LD_EXP 22
1711: PPUSH
1712: CALL 88693 0 2
1716: ST_TO_ADDR
// if Gary then
1717: LD_EXP 31
1721: IFFALSE 1743
// result := JoinUnion ( result , Gary ) ;
1723: LD_ADDR_VAR 0 1
1727: PUSH
1728: LD_VAR 0 1
1732: PPUSH
1733: LD_EXP 31
1737: PPUSH
1738: CALL 88693 0 2
1742: ST_TO_ADDR
// if Count ( others ) then
1743: LD_EXP 45
1747: PPUSH
1748: CALL 53437 0 1
1752: IFFALSE 1770
// others := others diff result ;
1754: LD_ADDR_EXP 45
1758: PUSH
1759: LD_EXP 45
1763: PUSH
1764: LD_VAR 0 1
1768: DIFF
1769: ST_TO_ADDR
// vehs := [ ] ;
1770: LD_ADDR_VAR 0 5
1774: PUSH
1775: EMPTY
1776: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1777: LD_INT 2
1779: PPUSH
1780: LD_INT 1
1782: PPUSH
1783: LD_INT 1
1785: PPUSH
1786: LD_INT 12
1788: PPUSH
1789: LD_INT 50
1791: PPUSH
1792: CALL 56175 0 5
// veh := CreateVehicle ;
1796: LD_ADDR_VAR 0 4
1800: PUSH
1801: CALL_OW 45
1805: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1806: LD_ADDR_VAR 0 5
1810: PUSH
1811: LD_VAR 0 5
1815: PPUSH
1816: LD_VAR 0 4
1820: PPUSH
1821: CALL 88656 0 2
1825: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1826: LD_VAR 0 4
1830: PPUSH
1831: LD_INT 1
1833: PPUSH
1834: CALL_OW 233
// sibRes := LoadVariable ( 09_sibRes , 100 ) - 20 ;
1838: LD_ADDR_VAR 0 6
1842: PUSH
1843: LD_STRING 09_sibRes
1845: PPUSH
1846: LD_INT 100
1848: PPUSH
1849: CALL_OW 30
1853: PUSH
1854: LD_INT 20
1856: MINUS
1857: ST_TO_ADDR
// if sibRes >= 100 then
1858: LD_VAR 0 6
1862: PUSH
1863: LD_INT 100
1865: GREATEREQUAL
1866: IFFALSE 1885
// SetCargo ( veh , mat_siberit , 100 ) else
1868: LD_VAR 0 4
1872: PPUSH
1873: LD_INT 3
1875: PPUSH
1876: LD_INT 100
1878: PPUSH
1879: CALL_OW 290
1883: GO 1902
// SetCargo ( veh , mat_siberit , sibRes ) ;
1885: LD_VAR 0 4
1889: PPUSH
1890: LD_INT 3
1892: PPUSH
1893: LD_VAR 0 6
1897: PPUSH
1898: CALL_OW 290
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , us_cargo_bay , 50 ) ;
1902: LD_INT 2
1904: PPUSH
1905: LD_INT 1
1907: PPUSH
1908: LD_INT 1
1910: PPUSH
1911: LD_INT 12
1913: PPUSH
1914: LD_INT 50
1916: PPUSH
1917: CALL 56175 0 5
// veh := CreateVehicle ;
1921: LD_ADDR_VAR 0 4
1925: PUSH
1926: CALL_OW 45
1930: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
1931: LD_ADDR_VAR 0 5
1935: PUSH
1936: LD_VAR 0 5
1940: PPUSH
1941: LD_VAR 0 4
1945: PPUSH
1946: CALL 88656 0 2
1950: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1951: LD_VAR 0 4
1955: PPUSH
1956: LD_INT 1
1958: PPUSH
1959: CALL_OW 233
// SetCargo ( veh , mat_cans , 100 ) ;
1963: LD_VAR 0 4
1967: PPUSH
1968: LD_INT 1
1970: PPUSH
1971: LD_INT 100
1973: PPUSH
1974: CALL_OW 290
// for i := 1 to Count ( result ) - 2 do
1978: LD_ADDR_VAR 0 2
1982: PUSH
1983: DOUBLE
1984: LD_INT 1
1986: DEC
1987: ST_TO_ADDR
1988: LD_VAR 0 1
1992: PPUSH
1993: CALL 53437 0 1
1997: PUSH
1998: LD_INT 2
2000: MINUS
2001: PUSH
2002: FOR_TO
2003: IFFALSE 2109
// begin PrepareVehicle ( us_medium_wheeled , engine_combustion , control_manual , [ us_light_gun , us_gatling_gun , us_double_gun , us_radar , us_light_gun ] [ i mod 5 + 1 ] , rand ( 45 , 55 ) ) ;
2005: LD_INT 2
2007: PPUSH
2008: LD_INT 1
2010: PPUSH
2011: LD_INT 1
2013: PPUSH
2014: LD_INT 3
2016: PUSH
2017: LD_INT 4
2019: PUSH
2020: LD_INT 5
2022: PUSH
2023: LD_INT 11
2025: PUSH
2026: LD_INT 3
2028: PUSH
2029: EMPTY
2030: LIST
2031: LIST
2032: LIST
2033: LIST
2034: LIST
2035: PUSH
2036: LD_VAR 0 2
2040: PUSH
2041: LD_INT 5
2043: MOD
2044: PUSH
2045: LD_INT 1
2047: PLUS
2048: ARRAY
2049: PPUSH
2050: LD_INT 45
2052: PPUSH
2053: LD_INT 55
2055: PPUSH
2056: CALL_OW 12
2060: PPUSH
2061: CALL 56175 0 5
// veh := CreateVehicle ;
2065: LD_ADDR_VAR 0 4
2069: PUSH
2070: CALL_OW 45
2074: ST_TO_ADDR
// vehs := Join ( vehs , veh ) ;
2075: LD_ADDR_VAR 0 5
2079: PUSH
2080: LD_VAR 0 5
2084: PPUSH
2085: LD_VAR 0 4
2089: PPUSH
2090: CALL 88656 0 2
2094: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2095: LD_VAR 0 4
2099: PPUSH
2100: LD_INT 1
2102: PPUSH
2103: CALL_OW 233
// end ;
2107: GO 2002
2109: POP
2110: POP
// for i in vehs do
2111: LD_ADDR_VAR 0 2
2115: PUSH
2116: LD_VAR 0 5
2120: PUSH
2121: FOR_IN
2122: IFFALSE 2177
// begin PlaceUnitArea ( i , startArea , false ) ;
2124: LD_VAR 0 2
2128: PPUSH
2129: LD_INT 3
2131: PPUSH
2132: LD_INT 0
2134: PPUSH
2135: CALL_OW 49
// PlaceHumanInUnit ( result [ 1 ] , i ) ;
2139: LD_VAR 0 1
2143: PUSH
2144: LD_INT 1
2146: ARRAY
2147: PPUSH
2148: LD_VAR 0 2
2152: PPUSH
2153: CALL_OW 52
// result := Delete ( result , 1 ) ;
2157: LD_ADDR_VAR 0 1
2161: PUSH
2162: LD_VAR 0 1
2166: PPUSH
2167: LD_INT 1
2169: PPUSH
2170: CALL_OW 3
2174: ST_TO_ADDR
// end ;
2175: GO 2121
2177: POP
2178: POP
// uc_side := 4 ;
2179: LD_ADDR_OWVAR 20
2183: PUSH
2184: LD_INT 4
2186: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , debug ) then
2187: LD_STRING 08_SikorskiStatus
2189: PPUSH
2190: LD_EXP 1
2194: PPUSH
2195: CALL_OW 30
2199: IFFALSE 2220
// Truman := PrepareUnit ( Truman , false ,  ) ;
2201: LD_ADDR_EXP 42
2205: PUSH
2206: LD_STRING Truman
2208: PPUSH
2209: LD_INT 0
2211: PPUSH
2212: LD_STRING 
2214: PPUSH
2215: CALL 51335 0 3
2219: ST_TO_ADDR
// Simms := PrepareUnit ( Simms , false ,  ) ;
2220: LD_ADDR_EXP 32
2224: PUSH
2225: LD_STRING Simms
2227: PPUSH
2228: LD_INT 0
2230: PPUSH
2231: LD_STRING 
2233: PPUSH
2234: CALL 51335 0 3
2238: ST_TO_ADDR
// Denis := PrepareUnit ( Denis , ( not debug ) , 08_ ) ;
2239: LD_ADDR_EXP 33
2243: PUSH
2244: LD_STRING Denis
2246: PPUSH
2247: LD_EXP 1
2251: NOT
2252: PPUSH
2253: LD_STRING 08_
2255: PPUSH
2256: CALL 51335 0 3
2260: ST_TO_ADDR
// Joan := PrepareUnit ( Joan , ( not debug ) , 08_ ) ;
2261: LD_ADDR_EXP 34
2265: PUSH
2266: LD_STRING Joan
2268: PPUSH
2269: LD_EXP 1
2273: NOT
2274: PPUSH
2275: LD_STRING 08_
2277: PPUSH
2278: CALL 51335 0 3
2282: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , ( not debug ) , 08_ ) ;
2283: LD_ADDR_EXP 40
2287: PUSH
2288: LD_STRING Mike
2290: PPUSH
2291: LD_EXP 1
2295: NOT
2296: PPUSH
2297: LD_STRING 08_
2299: PPUSH
2300: CALL 51335 0 3
2304: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2305: LD_STRING 08_Khatam
2307: PPUSH
2308: CALL_OW 28
2312: IFFALSE 2335
// Khatam := PrepareUnit ( Khatam , true , 08_ ) else
2314: LD_ADDR_EXP 35
2318: PUSH
2319: LD_STRING Khatam
2321: PPUSH
2322: LD_INT 1
2324: PPUSH
2325: LD_STRING 08_
2327: PPUSH
2328: CALL 51335 0 3
2332: ST_TO_ADDR
2333: GO 2363
// if TestCharacters ( 03_Khatam ) then
2335: LD_STRING 03_Khatam
2337: PPUSH
2338: CALL_OW 28
2342: IFFALSE 2363
// Khatam := PrepareUnit ( Khatam , true , 03_ ) ;
2344: LD_ADDR_EXP 35
2348: PUSH
2349: LD_STRING Khatam
2351: PPUSH
2352: LD_INT 1
2354: PPUSH
2355: LD_STRING 03_
2357: PPUSH
2358: CALL 51335 0 3
2362: ST_TO_ADDR
// Gladstone := PrepareUnit ( Gladstone , ( not debug ) , 08_ ) ;
2363: LD_ADDR_EXP 36
2367: PUSH
2368: LD_STRING Gladstone
2370: PPUSH
2371: LD_EXP 1
2375: NOT
2376: PPUSH
2377: LD_STRING 08_
2379: PPUSH
2380: CALL 51335 0 3
2384: ST_TO_ADDR
// DeltaDoctor := PrepareUnit ( DeltaDoctor , ( not debug ) ,  ) ;
2385: LD_ADDR_EXP 38
2389: PUSH
2390: LD_STRING DeltaDoctor
2392: PPUSH
2393: LD_EXP 1
2397: NOT
2398: PPUSH
2399: LD_STRING 
2401: PPUSH
2402: CALL 51335 0 3
2406: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , ( not debug ) , 08_ ) ;
2407: LD_ADDR_EXP 28
2411: PUSH
2412: LD_STRING Frank
2414: PPUSH
2415: LD_EXP 1
2419: NOT
2420: PPUSH
2421: LD_STRING 08_
2423: PPUSH
2424: CALL 51335 0 3
2428: ST_TO_ADDR
// if Frank then
2429: LD_EXP 28
2433: IFFALSE 2456
// Kikuchi := PrepareUnit ( Yamoko , false ,  ) else
2435: LD_ADDR_EXP 29
2439: PUSH
2440: LD_STRING Yamoko
2442: PPUSH
2443: LD_INT 0
2445: PPUSH
2446: LD_STRING 
2448: PPUSH
2449: CALL 51335 0 3
2453: ST_TO_ADDR
2454: GO 2478
// Kikuchi := PrepareUnit ( Kikuchi , ( not debug ) , 08_ ) ;
2456: LD_ADDR_EXP 29
2460: PUSH
2461: LD_STRING Kikuchi
2463: PPUSH
2464: LD_EXP 1
2468: NOT
2469: PPUSH
2470: LD_STRING 08_
2472: PPUSH
2473: CALL 51335 0 3
2477: ST_TO_ADDR
// others09 := CreateCharacterSet ( 09_others ) ;
2478: LD_ADDR_EXP 46
2482: PUSH
2483: LD_STRING 09_others
2485: PPUSH
2486: CALL_OW 31
2490: ST_TO_ADDR
// ape09 := CreateCharacterSet ( 09_apes ) ;
2491: LD_ADDR_EXP 47
2495: PUSH
2496: LD_STRING 09_apes
2498: PPUSH
2499: CALL_OW 31
2503: ST_TO_ADDR
// if Truman then
2504: LD_EXP 42
2508: IFFALSE 2525
// PlaceUnitArea ( Truman , epsilonSpawnArea , false ) ;
2510: LD_EXP 42
2514: PPUSH
2515: LD_INT 4
2517: PPUSH
2518: LD_INT 0
2520: PPUSH
2521: CALL_OW 49
// if Mike then
2525: LD_EXP 40
2529: IFFALSE 2546
// PlaceUnitArea ( Mike , epsilonSpawnArea , false ) ;
2531: LD_EXP 40
2535: PPUSH
2536: LD_INT 4
2538: PPUSH
2539: LD_INT 0
2541: PPUSH
2542: CALL_OW 49
// if Simms then
2546: LD_EXP 32
2550: IFFALSE 2567
// PlaceUnitArea ( Simms , epsilonSpawnArea , false ) ;
2552: LD_EXP 32
2556: PPUSH
2557: LD_INT 4
2559: PPUSH
2560: LD_INT 0
2562: PPUSH
2563: CALL_OW 49
// if Denis then
2567: LD_EXP 33
2571: IFFALSE 2588
// PlaceUnitArea ( Denis , epsilonSpawnArea , false ) ;
2573: LD_EXP 33
2577: PPUSH
2578: LD_INT 4
2580: PPUSH
2581: LD_INT 0
2583: PPUSH
2584: CALL_OW 49
// if Joan then
2588: LD_EXP 34
2592: IFFALSE 2609
// PlaceUnitArea ( Joan , epsilonSpawnArea , false ) ;
2594: LD_EXP 34
2598: PPUSH
2599: LD_INT 4
2601: PPUSH
2602: LD_INT 0
2604: PPUSH
2605: CALL_OW 49
// if Khatam then
2609: LD_EXP 35
2613: IFFALSE 2630
// PlaceUnitArea ( Khatam , epsilonSpawnArea , false ) ;
2615: LD_EXP 35
2619: PPUSH
2620: LD_INT 4
2622: PPUSH
2623: LD_INT 0
2625: PPUSH
2626: CALL_OW 49
// if Gladstone then
2630: LD_EXP 36
2634: IFFALSE 2651
// PlaceUnitArea ( Gladstone , epsilonSpawnArea , false ) ;
2636: LD_EXP 36
2640: PPUSH
2641: LD_INT 4
2643: PPUSH
2644: LD_INT 0
2646: PPUSH
2647: CALL_OW 49
// if DeltaDoctor then
2651: LD_EXP 38
2655: IFFALSE 2672
// PlaceUnitArea ( DeltaDoctor , epsilonSpawnArea , false ) ;
2657: LD_EXP 38
2661: PPUSH
2662: LD_INT 4
2664: PPUSH
2665: LD_INT 0
2667: PPUSH
2668: CALL_OW 49
// if Kikuchi then
2672: LD_EXP 29
2676: IFFALSE 2693
// PlaceUnitArea ( Kikuchi , epsilonSpawnArea , false ) ;
2678: LD_EXP 29
2682: PPUSH
2683: LD_INT 4
2685: PPUSH
2686: LD_INT 0
2688: PPUSH
2689: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , class_scientistic ) ;
2693: LD_EXP 32
2697: PUSH
2698: LD_EXP 35
2702: PUSH
2703: LD_EXP 33
2707: PUSH
2708: LD_EXP 36
2712: PUSH
2713: LD_EXP 38
2717: PUSH
2718: LD_EXP 34
2722: PUSH
2723: EMPTY
2724: LIST
2725: LIST
2726: LIST
2727: LIST
2728: LIST
2729: LIST
2730: PPUSH
2731: LD_INT 4
2733: PPUSH
2734: CALL_OW 336
// amount := Count ( others09 ) ;
2738: LD_ADDR_VAR 0 8
2742: PUSH
2743: LD_EXP 46
2747: PPUSH
2748: CALL 53437 0 1
2752: ST_TO_ADDR
// if amount then
2753: LD_VAR 0 8
2757: IFFALSE 2905
// begin if amount > [ 6 , 5 , 4 , 4 ] [ Difficulty ] then
2759: LD_VAR 0 8
2763: PUSH
2764: LD_INT 6
2766: PUSH
2767: LD_INT 5
2769: PUSH
2770: LD_INT 4
2772: PUSH
2773: LD_INT 4
2775: PUSH
2776: EMPTY
2777: LIST
2778: LIST
2779: LIST
2780: LIST
2781: PUSH
2782: LD_OWVAR 67
2786: ARRAY
2787: GREATER
2788: IFFALSE 2819
// amount := [ 6 , 5 , 4 , 4 ] [ Difficulty ] ;
2790: LD_ADDR_VAR 0 8
2794: PUSH
2795: LD_INT 6
2797: PUSH
2798: LD_INT 5
2800: PUSH
2801: LD_INT 4
2803: PUSH
2804: LD_INT 4
2806: PUSH
2807: EMPTY
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: PUSH
2813: LD_OWVAR 67
2817: ARRAY
2818: ST_TO_ADDR
// for i := 1 to amount do
2819: LD_ADDR_VAR 0 2
2823: PUSH
2824: DOUBLE
2825: LD_INT 1
2827: DEC
2828: ST_TO_ADDR
2829: LD_VAR 0 8
2833: PUSH
2834: FOR_TO
2835: IFFALSE 2876
// begin PlaceUnitArea ( others09 [ 1 ] , epsilonSpawnArea , false ) ;
2837: LD_EXP 46
2841: PUSH
2842: LD_INT 1
2844: ARRAY
2845: PPUSH
2846: LD_INT 4
2848: PPUSH
2849: LD_INT 0
2851: PPUSH
2852: CALL_OW 49
// others09 := Delete ( others09 , 1 ) ;
2856: LD_ADDR_EXP 46
2860: PUSH
2861: LD_EXP 46
2865: PPUSH
2866: LD_INT 1
2868: PPUSH
2869: CALL_OW 3
2873: ST_TO_ADDR
// end ;
2874: GO 2834
2876: POP
2877: POP
// if Count ( others09 ) then
2878: LD_EXP 46
2882: PPUSH
2883: CALL 53437 0 1
2887: IFFALSE 2905
// others := others union others09 ;
2889: LD_ADDR_EXP 45
2893: PUSH
2894: LD_EXP 45
2898: PUSH
2899: LD_EXP 46
2903: UNION
2904: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) = 0 then
2905: LD_INT 22
2907: PUSH
2908: LD_INT 4
2910: PUSH
2911: EMPTY
2912: LIST
2913: LIST
2914: PUSH
2915: LD_INT 50
2917: PUSH
2918: EMPTY
2919: LIST
2920: PUSH
2921: LD_INT 25
2923: PUSH
2924: LD_INT 2
2926: PUSH
2927: EMPTY
2928: LIST
2929: LIST
2930: PUSH
2931: EMPTY
2932: LIST
2933: LIST
2934: LIST
2935: PPUSH
2936: CALL_OW 69
2940: PUSH
2941: LD_INT 0
2943: EQUAL
2944: IFFALSE 3083
// begin tmp := FilterAllUnits ( [ [ f_side , 4 ] , [ f_ok ] , [ f_class , class_engineer ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
2946: LD_ADDR_VAR 0 7
2950: PUSH
2951: LD_INT 22
2953: PUSH
2954: LD_INT 4
2956: PUSH
2957: EMPTY
2958: LIST
2959: LIST
2960: PUSH
2961: LD_INT 50
2963: PUSH
2964: EMPTY
2965: LIST
2966: PUSH
2967: LD_INT 25
2969: PUSH
2970: LD_INT 2
2972: PUSH
2973: EMPTY
2974: LIST
2975: LIST
2976: PUSH
2977: EMPTY
2978: LIST
2979: LIST
2980: LIST
2981: PPUSH
2982: CALL_OW 69
2986: PUSH
2987: LD_EXP 32
2991: PUSH
2992: LD_EXP 35
2996: PUSH
2997: LD_EXP 33
3001: PUSH
3002: LD_EXP 36
3006: PUSH
3007: LD_EXP 38
3011: PUSH
3012: LD_EXP 34
3016: PUSH
3017: EMPTY
3018: LIST
3019: LIST
3020: LIST
3021: LIST
3022: LIST
3023: LIST
3024: DIFF
3025: ST_TO_ADDR
// if not tmp then
3026: LD_VAR 0 7
3030: NOT
3031: IFFALSE 3067
// begin if Denis then
3033: LD_EXP 33
3037: IFFALSE 3053
// SetClass ( Denis , class_engineer ) else
3039: LD_EXP 33
3043: PPUSH
3044: LD_INT 2
3046: PPUSH
3047: CALL_OW 336
3051: GO 3065
// SetClass ( DeltaDoctor , class_engineer ) ;
3053: LD_EXP 38
3057: PPUSH
3058: LD_INT 2
3060: PPUSH
3061: CALL_OW 336
// end else
3065: GO 3083
// SetClass ( tmp [ 1 ] , class_engineer ) ;
3067: LD_VAR 0 7
3071: PUSH
3072: LD_INT 1
3074: ARRAY
3075: PPUSH
3076: LD_INT 2
3078: PPUSH
3079: CALL_OW 336
// end ; for i in ape09 do
3083: LD_ADDR_VAR 0 2
3087: PUSH
3088: LD_EXP 47
3092: PUSH
3093: FOR_IN
3094: IFFALSE 3113
// PlaceUnitArea ( i , epsilonSpawnArea , false ) ;
3096: LD_VAR 0 2
3100: PPUSH
3101: LD_INT 4
3103: PPUSH
3104: LD_INT 0
3106: PPUSH
3107: CALL_OW 49
3111: GO 3093
3113: POP
3114: POP
// PrepareSoldier ( sex_female , 6 ) ;
3115: LD_INT 2
3117: PPUSH
3118: LD_INT 6
3120: PPUSH
3121: CALL_OW 381
// AmScout := CreateHuman ;
3125: LD_ADDR_EXP 39
3129: PUSH
3130: CALL_OW 44
3134: ST_TO_ADDR
// end ;
3135: LD_VAR 0 1
3139: RET
// export function PrepareCornell ; begin
3140: LD_INT 0
3142: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3143: LD_INT 4
3145: PPUSH
3146: LD_INT 4
3148: PPUSH
3149: CALL_OW 343
// uc_side := 4 ;
3153: LD_ADDR_OWVAR 20
3157: PUSH
3158: LD_INT 4
3160: ST_TO_ADDR
// uc_nation := nation_american ;
3161: LD_ADDR_OWVAR 21
3165: PUSH
3166: LD_INT 1
3168: ST_TO_ADDR
// Cornell := PrepareUnit ( Cornel , ( not debug ) , 03_ ) ;
3169: LD_ADDR_EXP 41
3173: PUSH
3174: LD_STRING Cornel
3176: PPUSH
3177: LD_EXP 1
3181: NOT
3182: PPUSH
3183: LD_STRING 03_
3185: PPUSH
3186: CALL 51335 0 3
3190: ST_TO_ADDR
// if not Cornell then
3191: LD_EXP 41
3195: NOT
3196: IFFALSE 3200
// exit ;
3198: GO 3308
// PlaceUnitArea ( Cornell , cornelSpawnArea , false ) ;
3200: LD_EXP 41
3204: PPUSH
3205: LD_INT 12
3207: PPUSH
3208: LD_INT 0
3210: PPUSH
3211: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3215: LD_EXP 41
3219: PPUSH
3220: LD_INT 350
3222: PPUSH
3223: CALL_OW 234
// if IsInUnit ( JMM ) then
3227: LD_EXP 22
3231: PPUSH
3232: CALL_OW 310
3236: IFFALSE 3279
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3238: LD_EXP 41
3242: PPUSH
3243: LD_EXP 22
3247: PPUSH
3248: CALL_OW 310
3252: PPUSH
3253: CALL_OW 250
3257: PPUSH
3258: LD_EXP 22
3262: PPUSH
3263: CALL_OW 310
3267: PPUSH
3268: CALL_OW 251
3272: PPUSH
3273: CALL_OW 111
3277: GO 3308
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3279: LD_EXP 41
3283: PPUSH
3284: LD_EXP 22
3288: PPUSH
3289: CALL_OW 250
3293: PPUSH
3294: LD_EXP 22
3298: PPUSH
3299: CALL_OW 251
3303: PPUSH
3304: CALL_OW 111
// end ; end_of_file
3308: LD_VAR 0 1
3312: RET
// export arForces , Dietrich , Ahmed ; export arTech , arBuildings , arMines , arCameras , arEscapist ; export function PrepareArabian ; var i , j , un , tmp , skill ; begin
3313: LD_INT 0
3315: PPUSH
3316: PPUSH
3317: PPUSH
3318: PPUSH
3319: PPUSH
3320: PPUSH
// uc_side := 2 ;
3321: LD_ADDR_OWVAR 20
3325: PUSH
3326: LD_INT 2
3328: ST_TO_ADDR
// uc_nation := nation_arabian ;
3329: LD_ADDR_OWVAR 21
3333: PUSH
3334: LD_INT 2
3336: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
3337: LD_ADDR_VAR 0 6
3341: PUSH
3342: LD_INT 4
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: LD_INT 6
3350: PUSH
3351: LD_INT 7
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: PUSH
3360: LD_OWVAR 67
3364: ARRAY
3365: ST_TO_ADDR
// arForces := [ ] ;
3366: LD_ADDR_EXP 48
3370: PUSH
3371: EMPTY
3372: ST_TO_ADDR
// arTech := [ ] ;
3373: LD_ADDR_EXP 51
3377: PUSH
3378: EMPTY
3379: ST_TO_ADDR
// arBuildings := [ ] ;
3380: LD_ADDR_EXP 52
3384: PUSH
3385: EMPTY
3386: ST_TO_ADDR
// arCameras := [ [ 94 , 19 ] , [ 92 , 34 ] , [ 109 , 67 ] , [ 120 , 38 ] , [ 116 , 30 ] , [ 102 , 20 ] ] ;
3387: LD_ADDR_EXP 54
3391: PUSH
3392: LD_INT 94
3394: PUSH
3395: LD_INT 19
3397: PUSH
3398: EMPTY
3399: LIST
3400: LIST
3401: PUSH
3402: LD_INT 92
3404: PUSH
3405: LD_INT 34
3407: PUSH
3408: EMPTY
3409: LIST
3410: LIST
3411: PUSH
3412: LD_INT 109
3414: PUSH
3415: LD_INT 67
3417: PUSH
3418: EMPTY
3419: LIST
3420: LIST
3421: PUSH
3422: LD_INT 120
3424: PUSH
3425: LD_INT 38
3427: PUSH
3428: EMPTY
3429: LIST
3430: LIST
3431: PUSH
3432: LD_INT 116
3434: PUSH
3435: LD_INT 30
3437: PUSH
3438: EMPTY
3439: LIST
3440: LIST
3441: PUSH
3442: LD_INT 102
3444: PUSH
3445: LD_INT 20
3447: PUSH
3448: EMPTY
3449: LIST
3450: LIST
3451: PUSH
3452: EMPTY
3453: LIST
3454: LIST
3455: LIST
3456: LIST
3457: LIST
3458: LIST
3459: ST_TO_ADDR
// arMines := [ [ 73 , 36 ] , [ 76 , 38 ] , [ 79 , 39 ] ] ;
3460: LD_ADDR_EXP 53
3464: PUSH
3465: LD_INT 73
3467: PUSH
3468: LD_INT 36
3470: PUSH
3471: EMPTY
3472: LIST
3473: LIST
3474: PUSH
3475: LD_INT 76
3477: PUSH
3478: LD_INT 38
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: PUSH
3485: LD_INT 79
3487: PUSH
3488: LD_INT 39
3490: PUSH
3491: EMPTY
3492: LIST
3493: LIST
3494: PUSH
3495: EMPTY
3496: LIST
3497: LIST
3498: LIST
3499: ST_TO_ADDR
// arEscapist := [ ] ;
3500: LD_ADDR_EXP 55
3504: PUSH
3505: EMPTY
3506: ST_TO_ADDR
// SetResourceType ( GetBase ( arDep ) , mat_cans , 150 ) ;
3507: LD_INT 35
3509: PPUSH
3510: CALL_OW 274
3514: PPUSH
3515: LD_INT 1
3517: PPUSH
3518: LD_INT 150
3520: PPUSH
3521: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_oil , 60 ) ;
3525: LD_INT 35
3527: PPUSH
3528: CALL_OW 274
3532: PPUSH
3533: LD_INT 2
3535: PPUSH
3536: LD_INT 60
3538: PPUSH
3539: CALL_OW 277
// SetResourceType ( GetBase ( arDep ) , mat_siberit , 10 ) ;
3543: LD_INT 35
3545: PPUSH
3546: CALL_OW 274
3550: PPUSH
3551: LD_INT 3
3553: PPUSH
3554: LD_INT 10
3556: PPUSH
3557: CALL_OW 277
// HiddenCamera ( 36 , 22 , 2 ) ;
3561: LD_INT 36
3563: PPUSH
3564: LD_INT 22
3566: PPUSH
3567: LD_INT 2
3569: PPUSH
3570: CALL_OW 244
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_building ] ] ) do
3574: LD_ADDR_VAR 0 2
3578: PUSH
3579: LD_INT 22
3581: PUSH
3582: LD_INT 2
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: PUSH
3589: LD_INT 21
3591: PUSH
3592: LD_INT 3
3594: PUSH
3595: EMPTY
3596: LIST
3597: LIST
3598: PUSH
3599: EMPTY
3600: LIST
3601: LIST
3602: PPUSH
3603: CALL_OW 69
3607: PUSH
3608: FOR_IN
3609: IFFALSE 3625
// SetBLevel ( i , 6 ) ;
3611: LD_VAR 0 2
3615: PPUSH
3616: LD_INT 6
3618: PPUSH
3619: CALL_OW 241
3623: GO 3608
3625: POP
3626: POP
// Dietrich := NewCharacter ( Dietrich ) ;
3627: LD_ADDR_EXP 49
3631: PUSH
3632: LD_STRING Dietrich
3634: PPUSH
3635: CALL_OW 25
3639: ST_TO_ADDR
// PlaceHumanInUnit ( Dietrich , arDep ) ;
3640: LD_EXP 49
3644: PPUSH
3645: LD_INT 35
3647: PPUSH
3648: CALL_OW 52
// InitHC_All ( ) ;
3652: CALL_OW 584
// for i := 1 to 3 do
3656: LD_ADDR_VAR 0 2
3660: PUSH
3661: DOUBLE
3662: LD_INT 1
3664: DEC
3665: ST_TO_ADDR
3666: LD_INT 3
3668: PUSH
3669: FOR_TO
3670: IFFALSE 3776
// begin PrepareEngineer ( sex_male , skill ) ;
3672: LD_INT 1
3674: PPUSH
3675: LD_VAR 0 6
3679: PPUSH
3680: CALL_OW 382
// if i = 1 then
3684: LD_VAR 0 2
3688: PUSH
3689: LD_INT 1
3691: EQUAL
3692: IFFALSE 3704
// hc_name := Ahmed Abbasid else
3694: LD_ADDR_OWVAR 26
3698: PUSH
3699: LD_STRING Ahmed Abbasid
3701: ST_TO_ADDR
3702: GO 3712
// hc_name :=  ;
3704: LD_ADDR_OWVAR 26
3708: PUSH
3709: LD_STRING 
3711: ST_TO_ADDR
// un := CreateHuman ;
3712: LD_ADDR_VAR 0 4
3716: PUSH
3717: CALL_OW 44
3721: ST_TO_ADDR
// if i = 1 then
3722: LD_VAR 0 2
3726: PUSH
3727: LD_INT 1
3729: EQUAL
3730: IFFALSE 3742
// Ahmed := un ;
3732: LD_ADDR_EXP 50
3736: PUSH
3737: LD_VAR 0 4
3741: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
3742: LD_ADDR_EXP 48
3746: PUSH
3747: LD_EXP 48
3751: PPUSH
3752: LD_VAR 0 4
3756: PPUSH
3757: CALL 88656 0 2
3761: ST_TO_ADDR
// PlaceHumanInUnit ( un , arDep ) ;
3762: LD_VAR 0 4
3766: PPUSH
3767: LD_INT 35
3769: PPUSH
3770: CALL_OW 52
// end ;
3774: GO 3669
3776: POP
3777: POP
// for i := 1 to [ 2 , 3 , 4 , 5 ] [ Difficulty ] do
3778: LD_ADDR_VAR 0 2
3782: PUSH
3783: DOUBLE
3784: LD_INT 1
3786: DEC
3787: ST_TO_ADDR
3788: LD_INT 2
3790: PUSH
3791: LD_INT 3
3793: PUSH
3794: LD_INT 4
3796: PUSH
3797: LD_INT 5
3799: PUSH
3800: EMPTY
3801: LIST
3802: LIST
3803: LIST
3804: LIST
3805: PUSH
3806: LD_OWVAR 67
3810: ARRAY
3811: PUSH
3812: FOR_TO
3813: IFFALSE 3888
// begin PrepareScientist ( false , skill ) ;
3815: LD_INT 0
3817: PPUSH
3818: LD_VAR 0 6
3822: PPUSH
3823: CALL_OW 384
// un := CreateHuman ;
3827: LD_ADDR_VAR 0 4
3831: PUSH
3832: CALL_OW 44
3836: ST_TO_ADDR
// SetSkill ( un , skill_combat , skill ) ;
3837: LD_VAR 0 4
3841: PPUSH
3842: LD_INT 1
3844: PPUSH
3845: LD_VAR 0 6
3849: PPUSH
3850: CALL_OW 237
// arForces := Join ( arForces , un ) ;
3854: LD_ADDR_EXP 48
3858: PUSH
3859: LD_EXP 48
3863: PPUSH
3864: LD_VAR 0 4
3868: PPUSH
3869: CALL 88656 0 2
3873: ST_TO_ADDR
// PlaceHumanInUnit ( un , arLab ) ;
3874: LD_VAR 0 4
3878: PPUSH
3879: LD_INT 36
3881: PPUSH
3882: CALL_OW 52
// end ;
3886: GO 3812
3888: POP
3889: POP
// for j in [ arBar1 , arBar2 ] do
3890: LD_ADDR_VAR 0 3
3894: PUSH
3895: LD_INT 37
3897: PUSH
3898: LD_INT 38
3900: PUSH
3901: EMPTY
3902: LIST
3903: LIST
3904: PUSH
3905: FOR_IN
3906: IFFALSE 3986
// for i := 1 to 3 do
3908: LD_ADDR_VAR 0 2
3912: PUSH
3913: DOUBLE
3914: LD_INT 1
3916: DEC
3917: ST_TO_ADDR
3918: LD_INT 3
3920: PUSH
3921: FOR_TO
3922: IFFALSE 3982
// begin PrepareSoldier ( false , skill ) ;
3924: LD_INT 0
3926: PPUSH
3927: LD_VAR 0 6
3931: PPUSH
3932: CALL_OW 381
// un := CreateHuman ;
3936: LD_ADDR_VAR 0 4
3940: PUSH
3941: CALL_OW 44
3945: ST_TO_ADDR
// arForces := Join ( arForces , un ) ;
3946: LD_ADDR_EXP 48
3950: PUSH
3951: LD_EXP 48
3955: PPUSH
3956: LD_VAR 0 4
3960: PPUSH
3961: CALL 88656 0 2
3965: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
3966: LD_VAR 0 4
3970: PPUSH
3971: LD_VAR 0 3
3975: PPUSH
3976: CALL_OW 52
// end ;
3980: GO 3921
3982: POP
3983: POP
3984: GO 3905
3986: POP
3987: POP
// for i := 1 to 2 do
3988: LD_ADDR_VAR 0 2
3992: PUSH
3993: DOUBLE
3994: LD_INT 1
3996: DEC
3997: ST_TO_ADDR
3998: LD_INT 2
4000: PUSH
4001: FOR_TO
4002: IFFALSE 4081
// begin un := arForces [ arForces - i ] ;
4004: LD_ADDR_VAR 0 4
4008: PUSH
4009: LD_EXP 48
4013: PUSH
4014: LD_EXP 48
4018: PUSH
4019: LD_VAR 0 2
4023: MINUS
4024: ARRAY
4025: ST_TO_ADDR
// ComExitBuilding ( un ) ;
4026: LD_VAR 0 4
4030: PPUSH
4031: CALL_OW 122
// AddComEnterUnit ( un , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_breastwork ] ] ) [ i ] ) ;
4035: LD_VAR 0 4
4039: PPUSH
4040: LD_INT 22
4042: PUSH
4043: LD_INT 2
4045: PUSH
4046: EMPTY
4047: LIST
4048: LIST
4049: PUSH
4050: LD_INT 30
4052: PUSH
4053: LD_INT 31
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: PUSH
4060: EMPTY
4061: LIST
4062: LIST
4063: PPUSH
4064: CALL_OW 69
4068: PUSH
4069: LD_VAR 0 2
4073: ARRAY
4074: PPUSH
4075: CALL_OW 180
// end ;
4079: GO 4001
4081: POP
4082: POP
// for i := 1 to 3 do
4083: LD_ADDR_VAR 0 2
4087: PUSH
4088: DOUBLE
4089: LD_INT 1
4091: DEC
4092: ST_TO_ADDR
4093: LD_INT 3
4095: PUSH
4096: FOR_TO
4097: IFFALSE 4139
// begin un := arForces [ arForces - 2 - i ] ;
4099: LD_ADDR_VAR 0 4
4103: PUSH
4104: LD_EXP 48
4108: PUSH
4109: LD_EXP 48
4113: PUSH
4114: LD_INT 2
4116: MINUS
4117: PUSH
4118: LD_VAR 0 2
4122: MINUS
4123: ARRAY
4124: ST_TO_ADDR
// SetTag ( un , tMine ) ;
4125: LD_VAR 0 4
4129: PPUSH
4130: LD_INT 6
4132: PPUSH
4133: CALL_OW 109
// end ;
4137: GO 4096
4139: POP
4140: POP
// for i in UnitsInside ( arBar2 ) do
4141: LD_ADDR_VAR 0 2
4145: PUSH
4146: LD_INT 38
4148: PPUSH
4149: CALL_OW 313
4153: PUSH
4154: FOR_IN
4155: IFFALSE 4171
// SetClass ( i , class_mortar ) ;
4157: LD_VAR 0 2
4161: PPUSH
4162: LD_INT 8
4164: PPUSH
4165: CALL_OW 336
4169: GO 4154
4171: POP
4172: POP
// end ;
4173: LD_VAR 0 1
4177: RET
// every 0 0$2 trigger joinedToEpsilon do var i , eng ;
4178: LD_EXP 7
4182: IFFALSE 4554
4184: GO 4186
4186: DISABLE
4187: LD_INT 0
4189: PPUSH
4190: PPUSH
// begin ComUpgradeLab ( arLab , b_lab_siberium ) ;
4191: LD_INT 36
4193: PPUSH
4194: LD_INT 11
4196: PPUSH
4197: CALL_OW 147
// wait ( 0 0$10 ) ;
4201: LD_INT 350
4203: PPUSH
4204: CALL_OW 67
// arBuildings := [ [ b_solar_power , 69 , 4 , 2 ] , [ b_solar_power , 67 , 6 , 3 ] ] ;
4208: LD_ADDR_EXP 52
4212: PUSH
4213: LD_INT 27
4215: PUSH
4216: LD_INT 69
4218: PUSH
4219: LD_INT 4
4221: PUSH
4222: LD_INT 2
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: LIST
4229: LIST
4230: PUSH
4231: LD_INT 27
4233: PUSH
4234: LD_INT 67
4236: PUSH
4237: LD_INT 6
4239: PUSH
4240: LD_INT 3
4242: PUSH
4243: EMPTY
4244: LIST
4245: LIST
4246: LIST
4247: LIST
4248: PUSH
4249: EMPTY
4250: LIST
4251: LIST
4252: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4253: LD_INT 35
4255: PPUSH
4256: CALL_OW 67
// until not arBuildings ;
4260: LD_EXP 52
4264: NOT
4265: IFFALSE 4253
// eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
4267: LD_ADDR_VAR 0 2
4271: PUSH
4272: LD_EXP 48
4276: PPUSH
4277: LD_INT 25
4279: PUSH
4280: LD_INT 2
4282: PUSH
4283: EMPTY
4284: LIST
4285: LIST
4286: PPUSH
4287: CALL_OW 72
4291: ST_TO_ADDR
// if eng then
4292: LD_VAR 0 2
4296: IFFALSE 4433
// begin eng := eng [ 1 ] ;
4298: LD_ADDR_VAR 0 2
4302: PUSH
4303: LD_VAR 0 2
4307: PUSH
4308: LD_INT 1
4310: ARRAY
4311: ST_TO_ADDR
// SetTag ( eng , tCamera ) ;
4312: LD_VAR 0 2
4316: PPUSH
4317: LD_INT 4
4319: PPUSH
4320: CALL_OW 109
// for i in arCameras do
4324: LD_ADDR_VAR 0 1
4328: PUSH
4329: LD_EXP 54
4333: PUSH
4334: FOR_IN
4335: IFFALSE 4366
// AddComHiddenCamera ( eng , i [ 1 ] , i [ 2 ] ) ;
4337: LD_VAR 0 2
4341: PPUSH
4342: LD_VAR 0 1
4346: PUSH
4347: LD_INT 1
4349: ARRAY
4350: PPUSH
4351: LD_VAR 0 1
4355: PUSH
4356: LD_INT 2
4358: ARRAY
4359: PPUSH
4360: CALL_OW 217
4364: GO 4334
4366: POP
4367: POP
// repeat wait ( 0 0$1 ) ;
4368: LD_INT 35
4370: PPUSH
4371: CALL_OW 67
// until not HasTask ( eng ) or IsDead ( eng ) ;
4375: LD_VAR 0 2
4379: PPUSH
4380: CALL_OW 314
4384: NOT
4385: PUSH
4386: LD_VAR 0 2
4390: PPUSH
4391: CALL_OW 301
4395: OR
4396: IFFALSE 4368
// if IsOk ( eng ) then
4398: LD_VAR 0 2
4402: PPUSH
4403: CALL_OW 302
4407: IFFALSE 4433
// begin SetTag ( eng , 0 ) ;
4409: LD_VAR 0 2
4413: PPUSH
4414: LD_INT 0
4416: PPUSH
4417: CALL_OW 109
// ComEnterUnit ( eng , arDep ) ;
4421: LD_VAR 0 2
4425: PPUSH
4426: LD_INT 35
4428: PPUSH
4429: CALL_OW 120
// end ; end ; repeat wait ( 0 0$1 ) ;
4433: LD_INT 35
4435: PPUSH
4436: CALL_OW 67
// if tick mod 4200 = 0 then
4440: LD_OWVAR 1
4444: PUSH
4445: LD_INT 4200
4447: MOD
4448: PUSH
4449: LD_INT 0
4451: EQUAL
4452: IFFALSE 4475
// CreateCratesArea ( rand ( 1 , 5 ) , arCratesArea , true ) ;
4454: LD_INT 1
4456: PPUSH
4457: LD_INT 5
4459: PPUSH
4460: CALL_OW 12
4464: PPUSH
4465: LD_INT 9
4467: PPUSH
4468: LD_INT 1
4470: PPUSH
4471: CALL_OW 55
// until FilterAllUnits ( [ [ f_side , 1 ] , [ f_lab , b_lab_siberium ] ] ) ;
4475: LD_INT 22
4477: PUSH
4478: LD_INT 1
4480: PUSH
4481: EMPTY
4482: LIST
4483: LIST
4484: PUSH
4485: LD_INT 63
4487: PUSH
4488: LD_INT 11
4490: PUSH
4491: EMPTY
4492: LIST
4493: LIST
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: PPUSH
4499: CALL_OW 69
4503: IFFALSE 4433
// arTech := [ tech_sibPow , tech_sibEng , tech_sib1 ] ;
4505: LD_ADDR_EXP 51
4509: PUSH
4510: LD_INT 21
4512: PUSH
4513: LD_INT 22
4515: PUSH
4516: LD_INT 54
4518: PUSH
4519: EMPTY
4520: LIST
4521: LIST
4522: LIST
4523: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
4524: LD_INT 35
4526: PPUSH
4527: CALL_OW 67
// until not arTech ;
4531: LD_EXP 51
4535: NOT
4536: IFFALSE 4524
// arabianAttack := true ;
4538: LD_ADDR_EXP 4
4542: PUSH
4543: LD_INT 1
4545: ST_TO_ADDR
// arBaseActive := false ;
4546: LD_ADDR_EXP 3
4550: PUSH
4551: LD_INT 0
4553: ST_TO_ADDR
// end ;
4554: PPOPN 2
4556: END
// every 0 0$0.3 trigger arBaseActive and arMines do
4557: LD_EXP 3
4561: PUSH
4562: LD_EXP 53
4566: AND
4567: IFFALSE 4590
4569: GO 4571
4571: DISABLE
// begin enable ;
4572: ENABLE
// CheckMinesInArea ( arMinesArea , [ f_enemy , 2 ] ) ;
4573: LD_INT 8
4575: PPUSH
4576: LD_INT 81
4578: PUSH
4579: LD_INT 2
4581: PUSH
4582: EMPTY
4583: LIST
4584: LIST
4585: PPUSH
4586: CALL_OW 512
// end ;
4590: END
// every 0 0$2 trigger arBaseActive do var i , un , b , side , tmp , lab , eng , tag , cr , tw , sci , sol , hurtUnits , enemyInBase , empty , fac ;
4591: LD_EXP 3
4595: IFFALSE 6424
4597: GO 4599
4599: DISABLE
4600: LD_INT 0
4602: PPUSH
4603: PPUSH
4604: PPUSH
4605: PPUSH
4606: PPUSH
4607: PPUSH
4608: PPUSH
4609: PPUSH
4610: PPUSH
4611: PPUSH
4612: PPUSH
4613: PPUSH
4614: PPUSH
4615: PPUSH
4616: PPUSH
4617: PPUSH
// begin enable ;
4618: ENABLE
// side := 2 ;
4619: LD_ADDR_VAR 0 4
4623: PUSH
4624: LD_INT 2
4626: ST_TO_ADDR
// if arTech then
4627: LD_EXP 51
4631: IFFALSE 4787
// begin lab := FilterAllUnits ( [ [ f_side , side ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
4633: LD_ADDR_VAR 0 6
4637: PUSH
4638: LD_INT 22
4640: PUSH
4641: LD_VAR 0 4
4645: PUSH
4646: EMPTY
4647: LIST
4648: LIST
4649: PUSH
4650: LD_INT 50
4652: PUSH
4653: EMPTY
4654: LIST
4655: PUSH
4656: LD_INT 2
4658: PUSH
4659: LD_INT 30
4661: PUSH
4662: LD_INT 6
4664: PUSH
4665: EMPTY
4666: LIST
4667: LIST
4668: PUSH
4669: LD_INT 30
4671: PUSH
4672: LD_INT 7
4674: PUSH
4675: EMPTY
4676: LIST
4677: LIST
4678: PUSH
4679: LD_INT 30
4681: PUSH
4682: LD_INT 8
4684: PUSH
4685: EMPTY
4686: LIST
4687: LIST
4688: PUSH
4689: EMPTY
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: PUSH
4695: EMPTY
4696: LIST
4697: LIST
4698: LIST
4699: PPUSH
4700: CALL_OW 69
4704: ST_TO_ADDR
// if lab then
4705: LD_VAR 0 6
4709: IFFALSE 4787
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
4711: LD_VAR 0 6
4715: PUSH
4716: LD_INT 1
4718: ARRAY
4719: PPUSH
4720: CALL_OW 461
4724: PUSH
4725: LD_INT 2
4727: EQUAL
4728: IFFALSE 4787
// begin for i in arTech do
4730: LD_ADDR_VAR 0 1
4734: PUSH
4735: LD_EXP 51
4739: PUSH
4740: FOR_IN
4741: IFFALSE 4785
// if CanBeResearched ( lab [ 1 ] , i ) then
4743: LD_VAR 0 6
4747: PUSH
4748: LD_INT 1
4750: ARRAY
4751: PPUSH
4752: LD_VAR 0 1
4756: PPUSH
4757: CALL_OW 430
4761: IFFALSE 4783
// begin ComResearch ( lab [ 1 ] , i ) ;
4763: LD_VAR 0 6
4767: PUSH
4768: LD_INT 1
4770: ARRAY
4771: PPUSH
4772: LD_VAR 0 1
4776: PPUSH
4777: CALL_OW 124
// break ;
4781: GO 4785
// end ;
4783: GO 4740
4785: POP
4786: POP
// end ; end ; end ; tmp := FilterUnitsInArea ( arBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
4787: LD_ADDR_VAR 0 5
4791: PUSH
4792: LD_INT 5
4794: PPUSH
4795: LD_INT 21
4797: PUSH
4798: LD_INT 3
4800: PUSH
4801: EMPTY
4802: LIST
4803: LIST
4804: PUSH
4805: LD_INT 3
4807: PUSH
4808: LD_INT 24
4810: PUSH
4811: LD_INT 1000
4813: PUSH
4814: EMPTY
4815: LIST
4816: LIST
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: PUSH
4822: EMPTY
4823: LIST
4824: LIST
4825: PPUSH
4826: CALL_OW 70
4830: ST_TO_ADDR
// cr := GetListOfCratesInArea ( arCratesArea ) ;
4831: LD_ADDR_VAR 0 9
4835: PUSH
4836: LD_INT 9
4838: PPUSH
4839: CALL_OW 435
4843: ST_TO_ADDR
// sci := UnitFilter ( arForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
4844: LD_ADDR_VAR 0 11
4848: PUSH
4849: LD_EXP 48
4853: PPUSH
4854: LD_INT 25
4856: PUSH
4857: LD_INT 4
4859: PUSH
4860: EMPTY
4861: LIST
4862: LIST
4863: PUSH
4864: LD_INT 50
4866: PUSH
4867: EMPTY
4868: LIST
4869: PUSH
4870: EMPTY
4871: LIST
4872: LIST
4873: PPUSH
4874: CALL_OW 72
4878: ST_TO_ADDR
// if sci then
4879: LD_VAR 0 11
4883: IFFALSE 5042
// begin hurtUnits := UnitFilter ( arForces , [ [ f_inarea , arBaseArea ] , [ f_tag , tHeal ] ] ) ;
4885: LD_ADDR_VAR 0 13
4889: PUSH
4890: LD_EXP 48
4894: PPUSH
4895: LD_INT 95
4897: PUSH
4898: LD_INT 5
4900: PUSH
4901: EMPTY
4902: LIST
4903: LIST
4904: PUSH
4905: LD_INT 120
4907: PUSH
4908: LD_INT 1
4910: PUSH
4911: EMPTY
4912: LIST
4913: LIST
4914: PUSH
4915: EMPTY
4916: LIST
4917: LIST
4918: PPUSH
4919: CALL_OW 72
4923: ST_TO_ADDR
// if hurtUnits then
4924: LD_VAR 0 13
4928: IFFALSE 4989
// begin for i in sci do
4930: LD_ADDR_VAR 0 1
4934: PUSH
4935: LD_VAR 0 11
4939: PUSH
4940: FOR_IN
4941: IFFALSE 4985
// if IsInUnit ( i ) then
4943: LD_VAR 0 1
4947: PPUSH
4948: CALL_OW 310
4952: IFFALSE 4965
// ComExitBuilding ( i ) else
4954: LD_VAR 0 1
4958: PPUSH
4959: CALL_OW 122
4963: GO 4983
// ComHeal ( i , hurtUnits [ 1 ] ) ;
4965: LD_VAR 0 1
4969: PPUSH
4970: LD_VAR 0 13
4974: PUSH
4975: LD_INT 1
4977: ARRAY
4978: PPUSH
4979: CALL_OW 128
4983: GO 4940
4985: POP
4986: POP
// end else
4987: GO 5042
// if lab then
4989: LD_VAR 0 6
4993: IFFALSE 5042
// begin for i in sci do
4995: LD_ADDR_VAR 0 1
4999: PUSH
5000: LD_VAR 0 11
5004: PUSH
5005: FOR_IN
5006: IFFALSE 5040
// if not IsInUnit ( i ) then
5008: LD_VAR 0 1
5012: PPUSH
5013: CALL_OW 310
5017: NOT
5018: IFFALSE 5038
// ComEnterUnit ( i , lab [ 1 ] ) ;
5020: LD_VAR 0 1
5024: PPUSH
5025: LD_VAR 0 6
5029: PUSH
5030: LD_INT 1
5032: ARRAY
5033: PPUSH
5034: CALL_OW 120
5038: GO 5005
5040: POP
5041: POP
// end ; end ; eng := UnitFilter ( arForces , [ f_class , 2 ] ) ;
5042: LD_ADDR_VAR 0 7
5046: PUSH
5047: LD_EXP 48
5051: PPUSH
5052: LD_INT 25
5054: PUSH
5055: LD_INT 2
5057: PUSH
5058: EMPTY
5059: LIST
5060: LIST
5061: PPUSH
5062: CALL_OW 72
5066: ST_TO_ADDR
// if eng then
5067: LD_VAR 0 7
5071: IFFALSE 5651
// begin for i in eng do
5073: LD_ADDR_VAR 0 1
5077: PUSH
5078: LD_VAR 0 7
5082: PUSH
5083: FOR_IN
5084: IFFALSE 5649
// begin tag := GetTag ( i ) ;
5086: LD_ADDR_VAR 0 8
5090: PUSH
5091: LD_VAR 0 1
5095: PPUSH
5096: CALL_OW 110
5100: ST_TO_ADDR
// if tag = tCamera then
5101: LD_VAR 0 8
5105: PUSH
5106: LD_INT 4
5108: EQUAL
5109: IFFALSE 5113
// continue ;
5111: GO 5083
// if GetLives ( i ) < 800 and tag <> tHeal then
5113: LD_VAR 0 1
5117: PPUSH
5118: CALL_OW 256
5122: PUSH
5123: LD_INT 800
5125: LESS
5126: PUSH
5127: LD_VAR 0 8
5131: PUSH
5132: LD_INT 1
5134: NONEQUAL
5135: AND
5136: IFFALSE 5174
// begin SetTag ( i , tHeal ) ;
5138: LD_VAR 0 1
5142: PPUSH
5143: LD_INT 1
5145: PPUSH
5146: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
5150: LD_VAR 0 1
5154: PPUSH
5155: LD_INT 72
5157: PPUSH
5158: LD_INT 15
5160: PPUSH
5161: CALL_OW 111
// AddComHold ( i ) ;
5165: LD_VAR 0 1
5169: PPUSH
5170: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
5174: LD_VAR 0 8
5178: PUSH
5179: LD_INT 1
5181: EQUAL
5182: PUSH
5183: LD_VAR 0 1
5187: PPUSH
5188: CALL_OW 256
5192: PUSH
5193: LD_INT 1000
5195: EQUAL
5196: AND
5197: IFFALSE 5211
// SetTag ( i , 0 ) ;
5199: LD_VAR 0 1
5203: PPUSH
5204: LD_INT 0
5206: PPUSH
5207: CALL_OW 109
// if not tag then
5211: LD_VAR 0 8
5215: NOT
5216: IFFALSE 5339
// begin if cr or tmp or Count ( arBuildings ) then
5218: LD_VAR 0 9
5222: PUSH
5223: LD_VAR 0 5
5227: OR
5228: PUSH
5229: LD_EXP 52
5233: PPUSH
5234: CALL 53437 0 1
5238: OR
5239: IFFALSE 5315
// begin if IsInUnit ( i ) then
5241: LD_VAR 0 1
5245: PPUSH
5246: CALL_OW 310
5250: IFFALSE 5261
// ComExitBuilding ( i ) ;
5252: LD_VAR 0 1
5256: PPUSH
5257: CALL_OW 122
// if tmp then
5261: LD_VAR 0 5
5265: IFFALSE 5281
// SetTag ( i , tRepair ) else
5267: LD_VAR 0 1
5271: PPUSH
5272: LD_INT 3
5274: PPUSH
5275: CALL_OW 109
5279: GO 5313
// if cr then
5281: LD_VAR 0 9
5285: IFFALSE 5301
// SetTag ( i , tCrates ) else
5287: LD_VAR 0 1
5291: PPUSH
5292: LD_INT 2
5294: PPUSH
5295: CALL_OW 109
5299: GO 5313
// SetTag ( i , tBuild ) ;
5301: LD_VAR 0 1
5305: PPUSH
5306: LD_INT 5
5308: PPUSH
5309: CALL_OW 109
// end else
5313: GO 5339
// if not IsInUnit ( i ) then
5315: LD_VAR 0 1
5319: PPUSH
5320: CALL_OW 310
5324: NOT
5325: IFFALSE 5339
// ComEnterUnit ( i , arDep ) ;
5327: LD_VAR 0 1
5331: PPUSH
5332: LD_INT 35
5334: PPUSH
5335: CALL_OW 120
// end ; if tag = tRepair then
5339: LD_VAR 0 8
5343: PUSH
5344: LD_INT 3
5346: EQUAL
5347: IFFALSE 5427
// begin if not tmp then
5349: LD_VAR 0 5
5353: NOT
5354: IFFALSE 5370
// begin SetTag ( i , 0 ) ;
5356: LD_VAR 0 1
5360: PPUSH
5361: LD_INT 0
5363: PPUSH
5364: CALL_OW 109
// continue ;
5368: GO 5083
// end ; if not HasTask ( i ) then
5370: LD_VAR 0 1
5374: PPUSH
5375: CALL_OW 314
5379: NOT
5380: IFFALSE 5400
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
5382: LD_VAR 0 1
5386: PPUSH
5387: LD_VAR 0 5
5391: PUSH
5392: LD_INT 1
5394: ARRAY
5395: PPUSH
5396: CALL_OW 130
// if not IsInArea ( i , arBaseArea ) then
5400: LD_VAR 0 1
5404: PPUSH
5405: LD_INT 5
5407: PPUSH
5408: CALL_OW 308
5412: NOT
5413: IFFALSE 5427
// ComMoveToArea ( i , arBaseArea ) ;
5415: LD_VAR 0 1
5419: PPUSH
5420: LD_INT 5
5422: PPUSH
5423: CALL_OW 113
// end ; if tag = tBuild then
5427: LD_VAR 0 8
5431: PUSH
5432: LD_INT 5
5434: EQUAL
5435: IFFALSE 5524
// begin if not Count ( arBuildings ) then
5437: LD_EXP 52
5441: PPUSH
5442: CALL 53437 0 1
5446: NOT
5447: IFFALSE 5463
// begin SetTag ( i , 0 ) ;
5449: LD_VAR 0 1
5453: PPUSH
5454: LD_INT 0
5456: PPUSH
5457: CALL_OW 109
// continue ;
5461: GO 5083
// end ; ComBuild ( i , arBuildings [ 1 ] [ 1 ] , arBuildings [ 1 ] [ 2 ] , arBuildings [ 1 ] [ 3 ] , arBuildings [ 1 ] [ 4 ] ) ;
5463: LD_VAR 0 1
5467: PPUSH
5468: LD_EXP 52
5472: PUSH
5473: LD_INT 1
5475: ARRAY
5476: PUSH
5477: LD_INT 1
5479: ARRAY
5480: PPUSH
5481: LD_EXP 52
5485: PUSH
5486: LD_INT 1
5488: ARRAY
5489: PUSH
5490: LD_INT 2
5492: ARRAY
5493: PPUSH
5494: LD_EXP 52
5498: PUSH
5499: LD_INT 1
5501: ARRAY
5502: PUSH
5503: LD_INT 3
5505: ARRAY
5506: PPUSH
5507: LD_EXP 52
5511: PUSH
5512: LD_INT 1
5514: ARRAY
5515: PUSH
5516: LD_INT 4
5518: ARRAY
5519: PPUSH
5520: CALL_OW 145
// end ; if tag = tCrates then
5524: LD_VAR 0 8
5528: PUSH
5529: LD_INT 2
5531: EQUAL
5532: IFFALSE 5647
// begin if not cr then
5534: LD_VAR 0 9
5538: NOT
5539: IFFALSE 5555
// begin SetTag ( i , 0 ) ;
5541: LD_VAR 0 1
5545: PPUSH
5546: LD_INT 0
5548: PPUSH
5549: CALL_OW 109
// continue ;
5553: GO 5083
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
5555: LD_VAR 0 1
5559: PPUSH
5560: CALL_OW 314
5564: NOT
5565: PUSH
5566: LD_INT 81
5568: PUSH
5569: LD_VAR 0 4
5573: PUSH
5574: EMPTY
5575: LIST
5576: LIST
5577: PUSH
5578: LD_INT 92
5580: PUSH
5581: LD_VAR 0 9
5585: PUSH
5586: LD_INT 1
5588: ARRAY
5589: PUSH
5590: LD_VAR 0 9
5594: PUSH
5595: LD_INT 2
5597: ARRAY
5598: PUSH
5599: LD_INT 12
5601: PUSH
5602: EMPTY
5603: LIST
5604: LIST
5605: LIST
5606: LIST
5607: PUSH
5608: EMPTY
5609: LIST
5610: LIST
5611: PPUSH
5612: CALL_OW 69
5616: NOT
5617: AND
5618: IFFALSE 5647
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
5620: LD_VAR 0 1
5624: PPUSH
5625: LD_VAR 0 9
5629: PUSH
5630: LD_INT 1
5632: ARRAY
5633: PPUSH
5634: LD_VAR 0 9
5638: PUSH
5639: LD_INT 2
5641: ARRAY
5642: PPUSH
5643: CALL_OW 117
// end ; end ;
5647: GO 5083
5649: POP
5650: POP
// end ; sol := UnitFilter ( arForces , [ [ f_class , 1 ] , [ f_ok ] ] ) ;
5651: LD_ADDR_VAR 0 12
5655: PUSH
5656: LD_EXP 48
5660: PPUSH
5661: LD_INT 25
5663: PUSH
5664: LD_INT 1
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: LD_INT 50
5673: PUSH
5674: EMPTY
5675: LIST
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PPUSH
5681: CALL_OW 72
5685: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( arBaseArea , [ f_enemy , side ] ) ;
5686: LD_ADDR_VAR 0 14
5690: PUSH
5691: LD_INT 5
5693: PPUSH
5694: LD_INT 81
5696: PUSH
5697: LD_VAR 0 4
5701: PUSH
5702: EMPTY
5703: LIST
5704: LIST
5705: PPUSH
5706: CALL_OW 70
5710: ST_TO_ADDR
// if sol then
5711: LD_VAR 0 12
5715: IFFALSE 6424
// begin tmp := UnitFilter ( sol , [ [ f_ok ] , [ f_tag , tMine ] ] ) ;
5717: LD_ADDR_VAR 0 5
5721: PUSH
5722: LD_VAR 0 12
5726: PPUSH
5727: LD_INT 50
5729: PUSH
5730: EMPTY
5731: LIST
5732: PUSH
5733: LD_INT 120
5735: PUSH
5736: LD_INT 6
5738: PUSH
5739: EMPTY
5740: LIST
5741: LIST
5742: PUSH
5743: EMPTY
5744: LIST
5745: LIST
5746: PPUSH
5747: CALL_OW 72
5751: ST_TO_ADDR
// if tmp and not FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , 76 , 38 , 12 ] ] ) then
5752: LD_VAR 0 5
5756: PUSH
5757: LD_INT 81
5759: PUSH
5760: LD_VAR 0 4
5764: PUSH
5765: EMPTY
5766: LIST
5767: LIST
5768: PUSH
5769: LD_INT 92
5771: PUSH
5772: LD_INT 76
5774: PUSH
5775: LD_INT 38
5777: PUSH
5778: LD_INT 12
5780: PUSH
5781: EMPTY
5782: LIST
5783: LIST
5784: LIST
5785: LIST
5786: PUSH
5787: EMPTY
5788: LIST
5789: LIST
5790: PPUSH
5791: CALL_OW 69
5795: NOT
5796: AND
5797: IFFALSE 5967
// for i := 1 to Count ( tmp ) do
5799: LD_ADDR_VAR 0 1
5803: PUSH
5804: DOUBLE
5805: LD_INT 1
5807: DEC
5808: ST_TO_ADDR
5809: LD_VAR 0 5
5813: PPUSH
5814: CALL 53437 0 1
5818: PUSH
5819: FOR_TO
5820: IFFALSE 5965
// begin un := tmp [ i ] ;
5822: LD_ADDR_VAR 0 2
5826: PUSH
5827: LD_VAR 0 5
5831: PUSH
5832: LD_VAR 0 1
5836: ARRAY
5837: ST_TO_ADDR
// b := IsInUnit ( un ) ;
5838: LD_ADDR_VAR 0 3
5842: PUSH
5843: LD_VAR 0 2
5847: PPUSH
5848: CALL_OW 310
5852: ST_TO_ADDR
// if not MineOfUnit ( un ) then
5853: LD_VAR 0 2
5857: PPUSH
5858: CALL_OW 459
5862: NOT
5863: IFFALSE 5932
// begin ComExitBuilding ( un ) ;
5865: LD_VAR 0 2
5869: PPUSH
5870: CALL_OW 122
// AddComPlaceRemoteCharge ( un , arMines [ i ] [ 1 ] , arMines [ i ] [ 2 ] , 0 ) ;
5874: LD_VAR 0 2
5878: PPUSH
5879: LD_EXP 53
5883: PUSH
5884: LD_VAR 0 1
5888: ARRAY
5889: PUSH
5890: LD_INT 1
5892: ARRAY
5893: PPUSH
5894: LD_EXP 53
5898: PUSH
5899: LD_VAR 0 1
5903: ARRAY
5904: PUSH
5905: LD_INT 2
5907: ARRAY
5908: PPUSH
5909: LD_INT 0
5911: PPUSH
5912: CALL_OW 193
// AddComEnterUnit ( un , b ) ;
5916: LD_VAR 0 2
5920: PPUSH
5921: LD_VAR 0 3
5925: PPUSH
5926: CALL_OW 180
// end else
5930: GO 5963
// if not b and not HasTask ( un ) then
5932: LD_VAR 0 3
5936: NOT
5937: PUSH
5938: LD_VAR 0 2
5942: PPUSH
5943: CALL_OW 314
5947: NOT
5948: AND
5949: IFFALSE 5963
// ComEnterUnit ( un , arBar1 ) ;
5951: LD_VAR 0 2
5955: PPUSH
5956: LD_INT 37
5958: PPUSH
5959: CALL_OW 120
// end ;
5963: GO 5819
5965: POP
5966: POP
// if enemyInBase then
5967: LD_VAR 0 14
5971: IFFALSE 6116
// begin for i in sol do
5973: LD_ADDR_VAR 0 1
5977: PUSH
5978: LD_VAR 0 12
5982: PUSH
5983: FOR_IN
5984: IFFALSE 6112
// begin tw := IsInUnit ( i ) ;
5986: LD_ADDR_VAR 0 10
5990: PUSH
5991: LD_VAR 0 1
5995: PPUSH
5996: CALL_OW 310
6000: ST_TO_ADDR
// if tw then
6001: LD_VAR 0 10
6005: IFFALSE 6086
// begin if not tw in FilterAllUnits ( [ [ f_side , side ] , [ f_see , 2 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
6007: LD_VAR 0 10
6011: PUSH
6012: LD_INT 22
6014: PUSH
6015: LD_VAR 0 4
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PUSH
6024: LD_INT 101
6026: PUSH
6027: LD_INT 2
6029: PUSH
6030: EMPTY
6031: LIST
6032: LIST
6033: PUSH
6034: LD_INT 2
6036: PUSH
6037: LD_INT 30
6039: PUSH
6040: LD_INT 32
6042: PUSH
6043: EMPTY
6044: LIST
6045: LIST
6046: PUSH
6047: LD_INT 30
6049: PUSH
6050: LD_INT 31
6052: PUSH
6053: EMPTY
6054: LIST
6055: LIST
6056: PUSH
6057: EMPTY
6058: LIST
6059: LIST
6060: LIST
6061: PUSH
6062: EMPTY
6063: LIST
6064: LIST
6065: LIST
6066: PPUSH
6067: CALL_OW 69
6071: IN
6072: NOT
6073: IFFALSE 6084
// ComExitBuilding ( i ) ;
6075: LD_VAR 0 1
6079: PPUSH
6080: CALL_OW 122
// end else
6084: GO 6110
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
6086: LD_VAR 0 1
6090: PPUSH
6091: LD_VAR 0 14
6095: PPUSH
6096: LD_VAR 0 1
6100: PPUSH
6101: CALL_OW 74
6105: PPUSH
6106: CALL_OW 115
// end ;
6110: GO 5983
6112: POP
6113: POP
// end else
6114: GO 6424
// begin empty := FilterUnitsInArea ( arBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_breastwork ] ] ] ) ;
6116: LD_ADDR_VAR 0 15
6120: PUSH
6121: LD_INT 5
6123: PPUSH
6124: LD_INT 3
6126: PUSH
6127: LD_INT 62
6129: PUSH
6130: EMPTY
6131: LIST
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: PUSH
6137: LD_INT 2
6139: PUSH
6140: LD_INT 30
6142: PUSH
6143: LD_INT 32
6145: PUSH
6146: EMPTY
6147: LIST
6148: LIST
6149: PUSH
6150: LD_INT 30
6152: PUSH
6153: LD_INT 4
6155: PUSH
6156: EMPTY
6157: LIST
6158: LIST
6159: PUSH
6160: LD_INT 30
6162: PUSH
6163: LD_INT 31
6165: PUSH
6166: EMPTY
6167: LIST
6168: LIST
6169: PUSH
6170: EMPTY
6171: LIST
6172: LIST
6173: LIST
6174: LIST
6175: PUSH
6176: EMPTY
6177: LIST
6178: LIST
6179: PPUSH
6180: CALL_OW 70
6184: ST_TO_ADDR
// if empty then
6185: LD_VAR 0 15
6189: IFFALSE 6206
// empty := ReverseArray ( empty ) ;
6191: LD_ADDR_VAR 0 15
6195: PUSH
6196: LD_VAR 0 15
6200: PPUSH
6201: CALL 83945 0 1
6205: ST_TO_ADDR
// for i in sol do
6206: LD_ADDR_VAR 0 1
6210: PUSH
6211: LD_VAR 0 12
6215: PUSH
6216: FOR_IN
6217: IFFALSE 6422
// begin tag := GetTag ( i ) ;
6219: LD_ADDR_VAR 0 8
6223: PUSH
6224: LD_VAR 0 1
6228: PPUSH
6229: CALL_OW 110
6233: ST_TO_ADDR
// if GetLives ( i ) < 1000 and tag <> tHeal then
6234: LD_VAR 0 1
6238: PPUSH
6239: CALL_OW 256
6243: PUSH
6244: LD_INT 1000
6246: LESS
6247: PUSH
6248: LD_VAR 0 8
6252: PUSH
6253: LD_INT 1
6255: NONEQUAL
6256: AND
6257: IFFALSE 6297
// begin SetTag ( i , tHeal ) ;
6259: LD_VAR 0 1
6263: PPUSH
6264: LD_INT 1
6266: PPUSH
6267: CALL_OW 109
// ComMoveXY ( i , 72 , 15 ) ;
6271: LD_VAR 0 1
6275: PPUSH
6276: LD_INT 72
6278: PPUSH
6279: LD_INT 15
6281: PPUSH
6282: CALL_OW 111
// AddComHold ( i ) ;
6286: LD_VAR 0 1
6290: PPUSH
6291: CALL_OW 200
// continue ;
6295: GO 6216
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
6297: LD_VAR 0 1
6301: PPUSH
6302: CALL_OW 256
6306: PUSH
6307: LD_INT 1000
6309: EQUAL
6310: PUSH
6311: LD_VAR 0 8
6315: PUSH
6316: LD_INT 1
6318: EQUAL
6319: AND
6320: IFFALSE 6336
// begin SetTag ( i , 0 ) ;
6322: LD_VAR 0 1
6326: PPUSH
6327: LD_INT 0
6329: PPUSH
6330: CALL_OW 109
// continue ;
6334: GO 6216
// end ; if HasTask ( i ) or tag = tMine then
6336: LD_VAR 0 1
6340: PPUSH
6341: CALL_OW 314
6345: PUSH
6346: LD_VAR 0 8
6350: PUSH
6351: LD_INT 6
6353: EQUAL
6354: OR
6355: IFFALSE 6359
// continue ;
6357: GO 6216
// if not IsInUnit ( i ) and not tag and empty then
6359: LD_VAR 0 1
6363: PPUSH
6364: CALL_OW 310
6368: NOT
6369: PUSH
6370: LD_VAR 0 8
6374: NOT
6375: AND
6376: PUSH
6377: LD_VAR 0 15
6381: AND
6382: IFFALSE 6420
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
6384: LD_VAR 0 1
6388: PPUSH
6389: LD_VAR 0 15
6393: PUSH
6394: LD_INT 1
6396: ARRAY
6397: PPUSH
6398: CALL_OW 120
// empty := Delete ( empty , 1 ) ;
6402: LD_ADDR_VAR 0 15
6406: PUSH
6407: LD_VAR 0 15
6411: PPUSH
6412: LD_INT 1
6414: PPUSH
6415: CALL_OW 3
6419: ST_TO_ADDR
// end ; end ;
6420: GO 6216
6422: POP
6423: POP
// end ; end ; end ;
6424: PPOPN 16
6426: END
// every 0 0$1 trigger Count ( arEscapist ) do var i ;
6427: LD_EXP 55
6431: PPUSH
6432: CALL 53437 0 1
6436: IFFALSE 6566
6438: GO 6440
6440: DISABLE
6441: LD_INT 0
6443: PPUSH
// begin enable ;
6444: ENABLE
// for i in UnitFilter ( arEscapist , [ f_ok ] ) do
6445: LD_ADDR_VAR 0 1
6449: PUSH
6450: LD_EXP 55
6454: PPUSH
6455: LD_INT 50
6457: PUSH
6458: EMPTY
6459: LIST
6460: PPUSH
6461: CALL_OW 72
6465: PUSH
6466: FOR_IN
6467: IFFALSE 6564
// begin if not HasTask ( i ) then
6469: LD_VAR 0 1
6473: PPUSH
6474: CALL_OW 314
6478: NOT
6479: IFFALSE 6493
// ComMoveToArea ( i , khatamArea ) ;
6481: LD_VAR 0 1
6485: PPUSH
6486: LD_INT 11
6488: PPUSH
6489: CALL_OW 113
// if IsInArea ( i , khatamArea ) then
6493: LD_VAR 0 1
6497: PPUSH
6498: LD_INT 11
6500: PPUSH
6501: CALL_OW 308
6505: IFFALSE 6562
// begin RemoveUnit ( i ) ;
6507: LD_VAR 0 1
6511: PPUSH
6512: CALL_OW 64
// arEscapist := arEscapist diff i ;
6516: LD_ADDR_EXP 55
6520: PUSH
6521: LD_EXP 55
6525: PUSH
6526: LD_VAR 0 1
6530: DIFF
6531: ST_TO_ADDR
// if i = Dietrich then
6532: LD_VAR 0 1
6536: PUSH
6537: LD_EXP 49
6541: EQUAL
6542: IFFALSE 6562
// begin gensherEscaped := true ;
6544: LD_ADDR_EXP 13
6548: PUSH
6549: LD_INT 1
6551: ST_TO_ADDR
// SaveVariable ( 1 , 10_GensherEscape_1 ) ;
6552: LD_INT 1
6554: PPUSH
6555: LD_STRING 10_GensherEscape_1
6557: PPUSH
6558: CALL_OW 39
// end ; end ; end ;
6562: GO 6466
6564: POP
6565: POP
// end ;
6566: PPOPN 1
6568: END
// export arAttackersInf , arAttackersVeh ; export function ArabAttack ; var i , skill , un , veh ; begin
6569: LD_INT 0
6571: PPUSH
6572: PPUSH
6573: PPUSH
6574: PPUSH
6575: PPUSH
// uc_side := 5 ;
6576: LD_ADDR_OWVAR 20
6580: PUSH
6581: LD_INT 5
6583: ST_TO_ADDR
// uc_nation := nation_arabian ;
6584: LD_ADDR_OWVAR 21
6588: PUSH
6589: LD_INT 2
6591: ST_TO_ADDR
// skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
6592: LD_ADDR_VAR 0 3
6596: PUSH
6597: LD_INT 5
6599: PUSH
6600: LD_INT 6
6602: PUSH
6603: LD_INT 7
6605: PUSH
6606: LD_INT 8
6608: PUSH
6609: EMPTY
6610: LIST
6611: LIST
6612: LIST
6613: LIST
6614: PUSH
6615: LD_OWVAR 67
6619: ARRAY
6620: ST_TO_ADDR
// arAttackersInf := [ ] ;
6621: LD_ADDR_EXP 56
6625: PUSH
6626: EMPTY
6627: ST_TO_ADDR
// arAttackersVeh := [ ] ;
6628: LD_ADDR_EXP 57
6632: PUSH
6633: EMPTY
6634: ST_TO_ADDR
// InitHC_All ( ) ;
6635: CALL_OW 584
// for i := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
6639: LD_ADDR_VAR 0 2
6643: PUSH
6644: DOUBLE
6645: LD_INT 1
6647: DEC
6648: ST_TO_ADDR
6649: LD_INT 3
6651: PUSH
6652: LD_INT 4
6654: PUSH
6655: LD_INT 5
6657: PUSH
6658: LD_INT 6
6660: PUSH
6661: EMPTY
6662: LIST
6663: LIST
6664: LIST
6665: LIST
6666: PUSH
6667: LD_OWVAR 67
6671: ARRAY
6672: PUSH
6673: FOR_TO
6674: IFFALSE 6776
// begin PrepareSoldier ( false , skill ) ;
6676: LD_INT 0
6678: PPUSH
6679: LD_VAR 0 3
6683: PPUSH
6684: CALL_OW 381
// un := CreateHuman ;
6688: LD_ADDR_VAR 0 4
6692: PUSH
6693: CALL_OW 44
6697: ST_TO_ADDR
// if i mod 2 = 0 then
6698: LD_VAR 0 2
6702: PUSH
6703: LD_INT 2
6705: MOD
6706: PUSH
6707: LD_INT 0
6709: EQUAL
6710: IFFALSE 6724
// SetClass ( un , class_mortar ) ;
6712: LD_VAR 0 4
6716: PPUSH
6717: LD_INT 8
6719: PPUSH
6720: CALL_OW 336
// PlaceUnitArea ( un , arAttackSpawn2Area , false ) ;
6724: LD_VAR 0 4
6728: PPUSH
6729: LD_INT 19
6731: PPUSH
6732: LD_INT 0
6734: PPUSH
6735: CALL_OW 49
// arAttackersInf := Join ( arAttackersInf , un ) ;
6739: LD_ADDR_EXP 56
6743: PUSH
6744: LD_EXP 56
6748: PPUSH
6749: LD_VAR 0 4
6753: PPUSH
6754: CALL 88656 0 2
6758: ST_TO_ADDR
// ComAgressiveMove ( un , 104 , 60 ) ;
6759: LD_VAR 0 4
6763: PPUSH
6764: LD_INT 104
6766: PPUSH
6767: LD_INT 60
6769: PPUSH
6770: CALL_OW 114
// end ;
6774: GO 6673
6776: POP
6777: POP
// for i := 1 to 3 do
6778: LD_ADDR_VAR 0 2
6782: PUSH
6783: DOUBLE
6784: LD_INT 1
6786: DEC
6787: ST_TO_ADDR
6788: LD_INT 3
6790: PUSH
6791: FOR_TO
6792: IFFALSE 6944
// begin PrepareMechanic ( false , skill ) ;
6794: LD_INT 0
6796: PPUSH
6797: LD_VAR 0 3
6801: PPUSH
6802: CALL_OW 383
// un := CreateHuman ;
6806: LD_ADDR_VAR 0 4
6810: PUSH
6811: CALL_OW 44
6815: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , [ ar_gun , ar_gatling_gun ] [ i mod 2 + 1 ] , 80 ) ;
6816: LD_INT 14
6818: PPUSH
6819: LD_INT 1
6821: PPUSH
6822: LD_INT 1
6824: PPUSH
6825: LD_INT 27
6827: PUSH
6828: LD_INT 25
6830: PUSH
6831: EMPTY
6832: LIST
6833: LIST
6834: PUSH
6835: LD_VAR 0 2
6839: PUSH
6840: LD_INT 2
6842: MOD
6843: PUSH
6844: LD_INT 1
6846: PLUS
6847: ARRAY
6848: PPUSH
6849: LD_INT 80
6851: PPUSH
6852: CALL 56175 0 5
// veh := CreateVehicle ;
6856: LD_ADDR_VAR 0 5
6860: PUSH
6861: CALL_OW 45
6865: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
6866: LD_VAR 0 5
6870: PPUSH
6871: LD_INT 4
6873: PPUSH
6874: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
6878: LD_VAR 0 5
6882: PPUSH
6883: LD_INT 18
6885: PPUSH
6886: LD_INT 0
6888: PPUSH
6889: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
6893: LD_VAR 0 4
6897: PPUSH
6898: LD_VAR 0 5
6902: PPUSH
6903: CALL_OW 52
// ComMoveXY ( un , 129 , 20 ) ;
6907: LD_VAR 0 4
6911: PPUSH
6912: LD_INT 129
6914: PPUSH
6915: LD_INT 20
6917: PPUSH
6918: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , un ) ;
6922: LD_ADDR_EXP 57
6926: PUSH
6927: LD_EXP 57
6931: PPUSH
6932: LD_VAR 0 4
6936: PPUSH
6937: CALL 88656 0 2
6941: ST_TO_ADDR
// end ;
6942: GO 6791
6944: POP
6945: POP
// wait ( 0 0$2 ) ;
6946: LD_INT 70
6948: PPUSH
6949: CALL_OW 67
// for i := 1 to [ 1 , 2 , 2 , 3 ] [ Difficulty ] do
6953: LD_ADDR_VAR 0 2
6957: PUSH
6958: DOUBLE
6959: LD_INT 1
6961: DEC
6962: ST_TO_ADDR
6963: LD_INT 1
6965: PUSH
6966: LD_INT 2
6968: PUSH
6969: LD_INT 2
6971: PUSH
6972: LD_INT 3
6974: PUSH
6975: EMPTY
6976: LIST
6977: LIST
6978: LIST
6979: LIST
6980: PUSH
6981: LD_OWVAR 67
6985: ARRAY
6986: PUSH
6987: FOR_TO
6988: IFFALSE 7119
// begin PrepareMechanic ( false , skill ) ;
6990: LD_INT 0
6992: PPUSH
6993: LD_VAR 0 3
6997: PPUSH
6998: CALL_OW 383
// un := CreateHuman ;
7002: LD_ADDR_VAR 0 4
7006: PUSH
7007: CALL_OW 44
7011: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_flame_thrower , 80 ) ;
7012: LD_INT 14
7014: PPUSH
7015: LD_INT 1
7017: PPUSH
7018: LD_INT 1
7020: PPUSH
7021: LD_INT 26
7023: PPUSH
7024: LD_INT 80
7026: PPUSH
7027: CALL 56175 0 5
// veh := CreateVehicle ;
7031: LD_ADDR_VAR 0 5
7035: PUSH
7036: CALL_OW 45
7040: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7041: LD_VAR 0 5
7045: PPUSH
7046: LD_INT 4
7048: PPUSH
7049: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7053: LD_VAR 0 5
7057: PPUSH
7058: LD_INT 18
7060: PPUSH
7061: LD_INT 0
7063: PPUSH
7064: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7068: LD_VAR 0 4
7072: PPUSH
7073: LD_VAR 0 5
7077: PPUSH
7078: CALL_OW 52
// ComMoveXY ( un , 133 , 40 ) ;
7082: LD_VAR 0 4
7086: PPUSH
7087: LD_INT 133
7089: PPUSH
7090: LD_INT 40
7092: PPUSH
7093: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , un ) ;
7097: LD_ADDR_EXP 57
7101: PUSH
7102: LD_EXP 57
7106: PPUSH
7107: LD_VAR 0 4
7111: PPUSH
7112: CALL 88656 0 2
7116: ST_TO_ADDR
// end ;
7117: GO 6987
7119: POP
7120: POP
// wait ( 0 0$2 ) ;
7121: LD_INT 70
7123: PPUSH
7124: CALL_OW 67
// for i := 1 to [ 1 , 2 , 3 , 4 ] [ Difficulty ] do
7128: LD_ADDR_VAR 0 2
7132: PUSH
7133: DOUBLE
7134: LD_INT 1
7136: DEC
7137: ST_TO_ADDR
7138: LD_INT 1
7140: PUSH
7141: LD_INT 2
7143: PUSH
7144: LD_INT 3
7146: PUSH
7147: LD_INT 4
7149: PUSH
7150: EMPTY
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: PUSH
7156: LD_OWVAR 67
7160: ARRAY
7161: PUSH
7162: FOR_TO
7163: IFFALSE 7325
// begin PrepareMechanic ( false , skill ) ;
7165: LD_INT 0
7167: PPUSH
7168: LD_VAR 0 3
7172: PPUSH
7173: CALL_OW 383
// un := CreateHuman ;
7177: LD_ADDR_VAR 0 4
7181: PUSH
7182: CALL_OW 44
7186: ST_TO_ADDR
// PrepareVehicle ( ar_half_tracked , engine_combustion , control_manual , ar_rocket_launcher , 80 ) ;
7187: LD_INT 14
7189: PPUSH
7190: LD_INT 1
7192: PPUSH
7193: LD_INT 1
7195: PPUSH
7196: LD_INT 28
7198: PPUSH
7199: LD_INT 80
7201: PPUSH
7202: CALL 56175 0 5
// veh := CreateVehicle ;
7206: LD_ADDR_VAR 0 5
7210: PUSH
7211: CALL_OW 45
7215: ST_TO_ADDR
// SetDir ( veh , 4 ) ;
7216: LD_VAR 0 5
7220: PPUSH
7221: LD_INT 4
7223: PPUSH
7224: CALL_OW 233
// PlaceUnitArea ( veh , arAttackSpawnArea , false ) ;
7228: LD_VAR 0 5
7232: PPUSH
7233: LD_INT 18
7235: PPUSH
7236: LD_INT 0
7238: PPUSH
7239: CALL_OW 49
// PlaceHumanInUnit ( un , veh ) ;
7243: LD_VAR 0 4
7247: PPUSH
7248: LD_VAR 0 5
7252: PPUSH
7253: CALL_OW 52
// if i mod 2 = 0 then
7257: LD_VAR 0 2
7261: PUSH
7262: LD_INT 2
7264: MOD
7265: PUSH
7266: LD_INT 0
7268: EQUAL
7269: IFFALSE 7288
// ComMoveXY ( un , 136 , 61 ) else
7271: LD_VAR 0 4
7275: PPUSH
7276: LD_INT 136
7278: PPUSH
7279: LD_INT 61
7281: PPUSH
7282: CALL_OW 111
7286: GO 7303
// ComMoveXY ( un , 137 , 41 ) ;
7288: LD_VAR 0 4
7292: PPUSH
7293: LD_INT 137
7295: PPUSH
7296: LD_INT 41
7298: PPUSH
7299: CALL_OW 111
// arAttackersVeh := Join ( arAttackersVeh , un ) ;
7303: LD_ADDR_EXP 57
7307: PUSH
7308: LD_EXP 57
7312: PPUSH
7313: LD_VAR 0 4
7317: PPUSH
7318: CALL 88656 0 2
7322: ST_TO_ADDR
// end ;
7323: GO 7162
7325: POP
7326: POP
// arabianAttackSpawned := true ;
7327: LD_ADDR_EXP 12
7331: PUSH
7332: LD_INT 1
7334: ST_TO_ADDR
// end ;
7335: LD_VAR 0 1
7339: RET
// every 0 0$2 trigger arAttackersInf do var i , tmp , nearest ;
7340: LD_EXP 56
7344: IFFALSE 7757
7346: GO 7348
7348: DISABLE
7349: LD_INT 0
7351: PPUSH
7352: PPUSH
7353: PPUSH
// begin wait ( 0 0$10 ) ;
7354: LD_INT 350
7356: PPUSH
7357: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ [ f_class , class_soldier ] , [ f_ok ] ] ) ;
7361: LD_ADDR_VAR 0 2
7365: PUSH
7366: LD_EXP 56
7370: PPUSH
7371: LD_INT 25
7373: PUSH
7374: LD_INT 1
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: PUSH
7381: LD_INT 50
7383: PUSH
7384: EMPTY
7385: LIST
7386: PUSH
7387: EMPTY
7388: LIST
7389: LIST
7390: PPUSH
7391: CALL_OW 72
7395: ST_TO_ADDR
// for i in tmp do
7396: LD_ADDR_VAR 0 1
7400: PUSH
7401: LD_VAR 0 2
7405: PUSH
7406: FOR_IN
7407: IFFALSE 7532
// begin nearest := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_not , [ f_tag , tMined ] ] , [ f_or , [ f_type , unit_vehicle ] , [ f_type , unit_building ] ] ] ) , i ) ;
7409: LD_ADDR_VAR 0 3
7413: PUSH
7414: LD_INT 22
7416: PUSH
7417: LD_INT 1
7419: PUSH
7420: EMPTY
7421: LIST
7422: LIST
7423: PUSH
7424: LD_INT 3
7426: PUSH
7427: LD_INT 120
7429: PUSH
7430: LD_INT 11
7432: PUSH
7433: EMPTY
7434: LIST
7435: LIST
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: PUSH
7441: LD_INT 2
7443: PUSH
7444: LD_INT 21
7446: PUSH
7447: LD_INT 2
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_INT 21
7456: PUSH
7457: LD_INT 3
7459: PUSH
7460: EMPTY
7461: LIST
7462: LIST
7463: PUSH
7464: EMPTY
7465: LIST
7466: LIST
7467: LIST
7468: PUSH
7469: EMPTY
7470: LIST
7471: LIST
7472: LIST
7473: PPUSH
7474: CALL_OW 69
7478: PPUSH
7479: LD_VAR 0 1
7483: PPUSH
7484: CALL_OW 74
7488: ST_TO_ADDR
// if not nearest then
7489: LD_VAR 0 3
7493: NOT
7494: IFFALSE 7498
// break ;
7496: GO 7532
// SetTag ( nearest , tMined ) ;
7498: LD_VAR 0 3
7502: PPUSH
7503: LD_INT 11
7505: PPUSH
7506: CALL_OW 109
// ComPlaceDelayedCharge ( i , 0 , 0 , nearest ) ;
7510: LD_VAR 0 1
7514: PPUSH
7515: LD_INT 0
7517: PPUSH
7518: LD_INT 0
7520: PPUSH
7521: LD_VAR 0 3
7525: PPUSH
7526: CALL_OW 132
// end ;
7530: GO 7406
7532: POP
7533: POP
// if hasBase and epsilon then
7534: LD_EXP 9
7538: PUSH
7539: LD_EXP 10
7543: AND
7544: IFFALSE 7568
// AddComPlaceDelayedCharge ( tmp , 0 , 0 , epsilon ) else
7546: LD_VAR 0 2
7550: PPUSH
7551: LD_INT 0
7553: PPUSH
7554: LD_INT 0
7556: PPUSH
7557: LD_EXP 10
7561: PPUSH
7562: CALL_OW 192
7566: GO 7583
// AddComMoveXY ( tmp , 107 , 59 ) ;
7568: LD_VAR 0 2
7572: PPUSH
7573: LD_INT 107
7575: PPUSH
7576: LD_INT 59
7578: PPUSH
7579: CALL_OW 171
// repeat wait ( 0 0$1 ) ;
7583: LD_INT 35
7585: PPUSH
7586: CALL_OW 67
// until IsDead ( Dietrich ) or gensherEscaped ;
7590: LD_EXP 49
7594: PPUSH
7595: CALL_OW 301
7599: PUSH
7600: LD_EXP 13
7604: OR
7605: IFFALSE 7583
// if not gensherEscaped then
7607: LD_EXP 13
7611: NOT
7612: IFFALSE 7621
// wait ( 1 1$20 ) ;
7614: LD_INT 2800
7616: PPUSH
7617: CALL_OW 67
// tmp := UnitFilter ( arAttackersInf , [ f_ok ] ) ;
7621: LD_ADDR_VAR 0 2
7625: PUSH
7626: LD_EXP 56
7630: PPUSH
7631: LD_INT 50
7633: PUSH
7634: EMPTY
7635: LIST
7636: PPUSH
7637: CALL_OW 72
7641: ST_TO_ADDR
// ComMoveXY ( tmp , 143 , 117 ) ;
7642: LD_VAR 0 2
7646: PPUSH
7647: LD_INT 143
7649: PPUSH
7650: LD_INT 117
7652: PPUSH
7653: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7657: LD_INT 35
7659: PPUSH
7660: CALL_OW 67
// for i in tmp do
7664: LD_ADDR_VAR 0 1
7668: PUSH
7669: LD_VAR 0 2
7673: PUSH
7674: FOR_IN
7675: IFFALSE 7748
// if IsInArea ( i , arAttackSpawn2Area ) then
7677: LD_VAR 0 1
7681: PPUSH
7682: LD_INT 19
7684: PPUSH
7685: CALL_OW 308
7689: IFFALSE 7734
// begin tmp := tmp diff i ;
7691: LD_ADDR_VAR 0 2
7695: PUSH
7696: LD_VAR 0 2
7700: PUSH
7701: LD_VAR 0 1
7705: DIFF
7706: ST_TO_ADDR
// arAttackersInf := arAttackersInf diff i ;
7707: LD_ADDR_EXP 56
7711: PUSH
7712: LD_EXP 56
7716: PUSH
7717: LD_VAR 0 1
7721: DIFF
7722: ST_TO_ADDR
// RemoveUnit ( i ) ;
7723: LD_VAR 0 1
7727: PPUSH
7728: CALL_OW 64
// end else
7732: GO 7746
// ComMoveToArea ( i , arAttackSpawn2Area ) ;
7734: LD_VAR 0 1
7738: PPUSH
7739: LD_INT 19
7741: PPUSH
7742: CALL_OW 113
7746: GO 7674
7748: POP
7749: POP
// until not tmp ;
7750: LD_VAR 0 2
7754: NOT
7755: IFFALSE 7657
// end ;
7757: PPOPN 3
7759: END
// every 0 0$2 trigger arAttackersVeh do var i , tmp ;
7760: LD_EXP 57
7764: IFFALSE 8003
7766: GO 7768
7768: DISABLE
7769: LD_INT 0
7771: PPUSH
7772: PPUSH
// begin repeat wait ( 0 0$1 ) ;
7773: LD_INT 35
7775: PPUSH
7776: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
7780: LD_ADDR_VAR 0 2
7784: PUSH
7785: LD_EXP 57
7789: PPUSH
7790: LD_INT 50
7792: PUSH
7793: EMPTY
7794: LIST
7795: PPUSH
7796: CALL_OW 72
7800: ST_TO_ADDR
// for i in tmp do
7801: LD_ADDR_VAR 0 1
7805: PUSH
7806: LD_VAR 0 2
7810: PUSH
7811: FOR_IN
7812: IFFALSE 7838
// AgressiveMove ( i , [ [ 110 , 40 ] ] ) ;
7814: LD_VAR 0 1
7818: PPUSH
7819: LD_INT 110
7821: PUSH
7822: LD_INT 40
7824: PUSH
7825: EMPTY
7826: LIST
7827: LIST
7828: PUSH
7829: EMPTY
7830: LIST
7831: PPUSH
7832: CALL 91260 0 2
7836: GO 7811
7838: POP
7839: POP
// until not arAttackersVeh or gensherEscaped or IsDead ( Dietrich ) ;
7840: LD_EXP 57
7844: NOT
7845: PUSH
7846: LD_EXP 13
7850: OR
7851: PUSH
7852: LD_EXP 49
7856: PPUSH
7857: CALL_OW 301
7861: OR
7862: IFFALSE 7773
// if not arAttackersVeh then
7864: LD_EXP 57
7868: NOT
7869: IFFALSE 7873
// exit ;
7871: GO 8003
// repeat wait ( 0 0$1 ) ;
7873: LD_INT 35
7875: PPUSH
7876: CALL_OW 67
// tmp := UnitFilter ( arAttackersVeh , [ f_ok ] ) ;
7880: LD_ADDR_VAR 0 2
7884: PUSH
7885: LD_EXP 57
7889: PPUSH
7890: LD_INT 50
7892: PUSH
7893: EMPTY
7894: LIST
7895: PPUSH
7896: CALL_OW 72
7900: ST_TO_ADDR
// for i in tmp do
7901: LD_ADDR_VAR 0 1
7905: PUSH
7906: LD_VAR 0 2
7910: PUSH
7911: FOR_IN
7912: IFFALSE 7994
// if IsInArea ( i , arAttackSpawnArea ) then
7914: LD_VAR 0 1
7918: PPUSH
7919: LD_INT 18
7921: PPUSH
7922: CALL_OW 308
7926: IFFALSE 7980
// begin if IsInUnit ( i ) then
7928: LD_VAR 0 1
7932: PPUSH
7933: CALL_OW 310
7937: IFFALSE 7953
// RemoveUnit ( IsInUnit ( i ) ) ;
7939: LD_VAR 0 1
7943: PPUSH
7944: CALL_OW 310
7948: PPUSH
7949: CALL_OW 64
// RemoveUnit ( i ) ;
7953: LD_VAR 0 1
7957: PPUSH
7958: CALL_OW 64
// arAttackersVeh := arAttackersVeh diff i ;
7962: LD_ADDR_EXP 57
7966: PUSH
7967: LD_EXP 57
7971: PUSH
7972: LD_VAR 0 1
7976: DIFF
7977: ST_TO_ADDR
// end else
7978: GO 7992
// ComMoveToArea ( i , arAttackSpawnArea ) ;
7980: LD_VAR 0 1
7984: PPUSH
7985: LD_INT 18
7987: PPUSH
7988: CALL_OW 113
7992: GO 7911
7994: POP
7995: POP
// until not tmp ;
7996: LD_VAR 0 2
8000: NOT
8001: IFFALSE 7873
// end ; end_of_file
8003: PPOPN 2
8005: END
// export ruForces , ruForces2 , ruCommander , ruCommander2 , ruMech , ruMech2 ; export ruTech , ruBaseArea , ruBaseArea2 , ruBase , ruBase2 , ruConstructList , ruConstructList2 , ruCratesArea , ruCratesArea2 , ruHealPoint , ruHealPoint2 , ruBuildings , ruBuildings2 , ruTanks , ruTanks2 , ruExtraTanks , ruParkingArea , ruParkingArea2 ; export function PrepareRussian ; var i , j , un , skill , sources ; begin
8006: LD_INT 0
8008: PPUSH
8009: PPUSH
8010: PPUSH
8011: PPUSH
8012: PPUSH
8013: PPUSH
// uc_side := 3 ;
8014: LD_ADDR_OWVAR 20
8018: PUSH
8019: LD_INT 3
8021: ST_TO_ADDR
// uc_nation := nation_russian ;
8022: LD_ADDR_OWVAR 21
8026: PUSH
8027: LD_INT 3
8029: ST_TO_ADDR
// ruForces := [ ] ;
8030: LD_ADDR_EXP 58
8034: PUSH
8035: EMPTY
8036: ST_TO_ADDR
// ruForces2 := [ ] ;
8037: LD_ADDR_EXP 59
8041: PUSH
8042: EMPTY
8043: ST_TO_ADDR
// ruMech := [ ] ;
8044: LD_ADDR_EXP 62
8048: PUSH
8049: EMPTY
8050: ST_TO_ADDR
// ruMech2 := [ ] ;
8051: LD_ADDR_EXP 63
8055: PUSH
8056: EMPTY
8057: ST_TO_ADDR
// ruTech := [ tech_LimTeleport , tech_ST1 , tech_Weap2 , tech_Sib1 ] ;
8058: LD_ADDR_EXP 64
8062: PUSH
8063: LD_INT 37
8065: PUSH
8066: LD_INT 63
8068: PUSH
8069: LD_INT 52
8071: PUSH
8072: LD_INT 54
8074: PUSH
8075: EMPTY
8076: LIST
8077: LIST
8078: LIST
8079: LIST
8080: ST_TO_ADDR
// ruBaseArea := 0 ;
8081: LD_ADDR_EXP 65
8085: PUSH
8086: LD_INT 0
8088: ST_TO_ADDR
// ruBaseArea2 := 0 ;
8089: LD_ADDR_EXP 66
8093: PUSH
8094: LD_INT 0
8096: ST_TO_ADDR
// ruBase := 0 ;
8097: LD_ADDR_EXP 67
8101: PUSH
8102: LD_INT 0
8104: ST_TO_ADDR
// ruBase2 := 0 ;
8105: LD_ADDR_EXP 68
8109: PUSH
8110: LD_INT 0
8112: ST_TO_ADDR
// ruConstructList := [ ] ;
8113: LD_ADDR_EXP 69
8117: PUSH
8118: EMPTY
8119: ST_TO_ADDR
// ruConstructList2 := [ [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ] ;
8120: LD_ADDR_EXP 70
8124: PUSH
8125: LD_INT 22
8127: PUSH
8128: LD_INT 3
8130: PUSH
8131: LD_INT 1
8133: PUSH
8134: LD_INT 43
8136: PUSH
8137: LD_INT 44
8139: PUSH
8140: LD_INT 45
8142: PUSH
8143: EMPTY
8144: LIST
8145: LIST
8146: LIST
8147: PUSH
8148: LD_INT 1
8150: PPUSH
8151: LD_INT 3
8153: PPUSH
8154: CALL_OW 12
8158: ARRAY
8159: PUSH
8160: EMPTY
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: PUSH
8166: LD_INT 22
8168: PUSH
8169: LD_INT 3
8171: PUSH
8172: LD_INT 1
8174: PUSH
8175: LD_INT 43
8177: PUSH
8178: LD_INT 44
8180: PUSH
8181: LD_INT 45
8183: PUSH
8184: EMPTY
8185: LIST
8186: LIST
8187: LIST
8188: PUSH
8189: LD_INT 1
8191: PPUSH
8192: LD_INT 3
8194: PPUSH
8195: CALL_OW 12
8199: ARRAY
8200: PUSH
8201: EMPTY
8202: LIST
8203: LIST
8204: LIST
8205: LIST
8206: PUSH
8207: LD_INT 22
8209: PUSH
8210: LD_INT 3
8212: PUSH
8213: LD_INT 1
8215: PUSH
8216: LD_INT 43
8218: PUSH
8219: LD_INT 44
8221: PUSH
8222: LD_INT 45
8224: PUSH
8225: EMPTY
8226: LIST
8227: LIST
8228: LIST
8229: PUSH
8230: LD_INT 1
8232: PPUSH
8233: LD_INT 3
8235: PPUSH
8236: CALL_OW 12
8240: ARRAY
8241: PUSH
8242: EMPTY
8243: LIST
8244: LIST
8245: LIST
8246: LIST
8247: PUSH
8248: EMPTY
8249: LIST
8250: LIST
8251: LIST
8252: ST_TO_ADDR
// ruCratesArea := 0 ;
8253: LD_ADDR_EXP 71
8257: PUSH
8258: LD_INT 0
8260: ST_TO_ADDR
// ruCratesArea2 := 0 ;
8261: LD_ADDR_EXP 72
8265: PUSH
8266: LD_INT 0
8268: ST_TO_ADDR
// ruHealPoint := [ ] ;
8269: LD_ADDR_EXP 73
8273: PUSH
8274: EMPTY
8275: ST_TO_ADDR
// ruHealPoint2 := [ ] ;
8276: LD_ADDR_EXP 74
8280: PUSH
8281: EMPTY
8282: ST_TO_ADDR
// ruBuildings := [ ] ;
8283: LD_ADDR_EXP 75
8287: PUSH
8288: EMPTY
8289: ST_TO_ADDR
// ruBuildings2 := [ ] ;
8290: LD_ADDR_EXP 76
8294: PUSH
8295: EMPTY
8296: ST_TO_ADDR
// ruTanks := [ ] ;
8297: LD_ADDR_EXP 77
8301: PUSH
8302: EMPTY
8303: ST_TO_ADDR
// ruTanks2 := [ ] ;
8304: LD_ADDR_EXP 78
8308: PUSH
8309: EMPTY
8310: ST_TO_ADDR
// ruParkingArea := 0 ;
8311: LD_ADDR_EXP 80
8315: PUSH
8316: LD_INT 0
8318: ST_TO_ADDR
// ruParkingArea2 := 0 ;
8319: LD_ADDR_EXP 81
8323: PUSH
8324: LD_INT 0
8326: ST_TO_ADDR
// for i := 1 to [ 2 , 3 , 4 , 4 ] [ Difficulty ] do
8327: LD_ADDR_VAR 0 2
8331: PUSH
8332: DOUBLE
8333: LD_INT 1
8335: DEC
8336: ST_TO_ADDR
8337: LD_INT 2
8339: PUSH
8340: LD_INT 3
8342: PUSH
8343: LD_INT 4
8345: PUSH
8346: LD_INT 4
8348: PUSH
8349: EMPTY
8350: LIST
8351: LIST
8352: LIST
8353: LIST
8354: PUSH
8355: LD_OWVAR 67
8359: ARRAY
8360: PUSH
8361: FOR_TO
8362: IFFALSE 8422
// ruConstructList := Join ( ruConstructList , [ ru_medium_tracked , engine_siberite , control_manual , [ ru_gatling_gun , ru_gun , ru_rocket_launcher ] [ rand ( 1 , 3 ) ] ] ) ;
8364: LD_ADDR_EXP 69
8368: PUSH
8369: LD_EXP 69
8373: PPUSH
8374: LD_INT 22
8376: PUSH
8377: LD_INT 3
8379: PUSH
8380: LD_INT 1
8382: PUSH
8383: LD_INT 43
8385: PUSH
8386: LD_INT 44
8388: PUSH
8389: LD_INT 45
8391: PUSH
8392: EMPTY
8393: LIST
8394: LIST
8395: LIST
8396: PUSH
8397: LD_INT 1
8399: PPUSH
8400: LD_INT 3
8402: PPUSH
8403: CALL_OW 12
8407: ARRAY
8408: PUSH
8409: EMPTY
8410: LIST
8411: LIST
8412: LIST
8413: LIST
8414: PPUSH
8415: CALL 88656 0 2
8419: ST_TO_ADDR
8420: GO 8361
8422: POP
8423: POP
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
8424: LD_ADDR_VAR 0 6
8428: PUSH
8429: LD_INT 43
8431: PUSH
8432: LD_INT 68
8434: PUSH
8435: EMPTY
8436: LIST
8437: LIST
8438: PUSH
8439: LD_INT 43
8441: PUSH
8442: LD_INT 79
8444: PUSH
8445: EMPTY
8446: LIST
8447: LIST
8448: PUSH
8449: LD_INT 99
8451: PUSH
8452: LD_INT 114
8454: PUSH
8455: EMPTY
8456: LIST
8457: LIST
8458: PUSH
8459: LD_INT 103
8461: PUSH
8462: LD_INT 114
8464: PUSH
8465: EMPTY
8466: LIST
8467: LIST
8468: PUSH
8469: LD_INT 156
8471: PUSH
8472: LD_INT 92
8474: PUSH
8475: EMPTY
8476: LIST
8477: LIST
8478: PUSH
8479: LD_INT 152
8481: PUSH
8482: LD_INT 85
8484: PUSH
8485: EMPTY
8486: LIST
8487: LIST
8488: PUSH
8489: EMPTY
8490: LIST
8491: LIST
8492: LIST
8493: LIST
8494: LIST
8495: LIST
8496: ST_TO_ADDR
// for i in sources do
8497: LD_ADDR_VAR 0 2
8501: PUSH
8502: LD_VAR 0 6
8506: PUSH
8507: FOR_IN
8508: IFFALSE 8537
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
8510: LD_VAR 0 2
8514: PUSH
8515: LD_INT 1
8517: ARRAY
8518: PPUSH
8519: LD_VAR 0 2
8523: PUSH
8524: LD_INT 2
8526: ARRAY
8527: PPUSH
8528: LD_INT 3
8530: PPUSH
8531: CALL_OW 441
8535: GO 8507
8537: POP
8538: POP
// skill := [ 5 , 6 , 7 , 8 ] [ Difficulty ] ;
8539: LD_ADDR_VAR 0 5
8543: PUSH
8544: LD_INT 5
8546: PUSH
8547: LD_INT 6
8549: PUSH
8550: LD_INT 7
8552: PUSH
8553: LD_INT 8
8555: PUSH
8556: EMPTY
8557: LIST
8558: LIST
8559: LIST
8560: LIST
8561: PUSH
8562: LD_OWVAR 67
8566: ARRAY
8567: ST_TO_ADDR
// ruCommander := PrepareUnit ( Tsaritsyn , false ,  ) ;
8568: LD_ADDR_EXP 60
8572: PUSH
8573: LD_STRING Tsaritsyn
8575: PPUSH
8576: LD_INT 0
8578: PPUSH
8579: LD_STRING 
8581: PPUSH
8582: CALL 51335 0 3
8586: ST_TO_ADDR
// for j := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
8587: LD_ADDR_VAR 0 3
8591: PUSH
8592: DOUBLE
8593: LD_INT 1
8595: DEC
8596: ST_TO_ADDR
8597: LD_INT 3
8599: PUSH
8600: LD_INT 4
8602: PUSH
8603: LD_INT 5
8605: PUSH
8606: LD_INT 6
8608: PUSH
8609: EMPTY
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: PUSH
8615: LD_OWVAR 67
8619: ARRAY
8620: PUSH
8621: FOR_TO
8622: IFFALSE 8735
// for i := 1 to 4 do
8624: LD_ADDR_VAR 0 2
8628: PUSH
8629: DOUBLE
8630: LD_INT 1
8632: DEC
8633: ST_TO_ADDR
8634: LD_INT 4
8636: PUSH
8637: FOR_TO
8638: IFFALSE 8731
// begin PrepareHuman ( false , i , skill ) ;
8640: LD_INT 0
8642: PPUSH
8643: LD_VAR 0 2
8647: PPUSH
8648: LD_VAR 0 5
8652: PPUSH
8653: CALL_OW 380
// un := CreateHuman ;
8657: LD_ADDR_VAR 0 4
8661: PUSH
8662: CALL_OW 44
8666: ST_TO_ADDR
// ruForces := Join ( ruForces , un ) ;
8667: LD_ADDR_EXP 58
8671: PUSH
8672: LD_EXP 58
8676: PPUSH
8677: LD_VAR 0 4
8681: PPUSH
8682: CALL 88656 0 2
8686: ST_TO_ADDR
// if i = 3 then
8687: LD_VAR 0 2
8691: PUSH
8692: LD_INT 3
8694: EQUAL
8695: IFFALSE 8729
// begin ruMech := Join ( ruMech , un ) ;
8697: LD_ADDR_EXP 62
8701: PUSH
8702: LD_EXP 62
8706: PPUSH
8707: LD_VAR 0 4
8711: PPUSH
8712: CALL 88656 0 2
8716: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
8717: LD_VAR 0 4
8721: PPUSH
8722: LD_INT 1
8724: PPUSH
8725: CALL_OW 336
// end ; end ;
8729: GO 8637
8731: POP
8732: POP
8733: GO 8621
8735: POP
8736: POP
// if Difficulty < 4 then
8737: LD_OWVAR 67
8741: PUSH
8742: LD_INT 4
8744: LESS
8745: IFFALSE 8749
// exit ;
8747: GO 8937
// PrepareSoldier ( sex_male , skill + 1 ) ;
8749: LD_INT 1
8751: PPUSH
8752: LD_VAR 0 5
8756: PUSH
8757: LD_INT 1
8759: PLUS
8760: PPUSH
8761: CALL_OW 381
// hc_importance := 100 ;
8765: LD_ADDR_OWVAR 32
8769: PUSH
8770: LD_INT 100
8772: ST_TO_ADDR
// ruCommander2 := CreateHuman ;
8773: LD_ADDR_EXP 61
8777: PUSH
8778: CALL_OW 44
8782: ST_TO_ADDR
// InitHc_All ( ) ;
8783: CALL_OW 584
// for j := 1 to [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
8787: LD_ADDR_VAR 0 3
8791: PUSH
8792: DOUBLE
8793: LD_INT 1
8795: DEC
8796: ST_TO_ADDR
8797: LD_INT 3
8799: PUSH
8800: LD_INT 4
8802: PUSH
8803: LD_INT 5
8805: PUSH
8806: LD_INT 6
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: LIST
8813: LIST
8814: PUSH
8815: LD_OWVAR 67
8819: ARRAY
8820: PUSH
8821: FOR_TO
8822: IFFALSE 8935
// for i := 1 to 4 do
8824: LD_ADDR_VAR 0 2
8828: PUSH
8829: DOUBLE
8830: LD_INT 1
8832: DEC
8833: ST_TO_ADDR
8834: LD_INT 4
8836: PUSH
8837: FOR_TO
8838: IFFALSE 8931
// begin PrepareHuman ( false , i , skill ) ;
8840: LD_INT 0
8842: PPUSH
8843: LD_VAR 0 2
8847: PPUSH
8848: LD_VAR 0 5
8852: PPUSH
8853: CALL_OW 380
// un := CreateHuman ;
8857: LD_ADDR_VAR 0 4
8861: PUSH
8862: CALL_OW 44
8866: ST_TO_ADDR
// ruForces2 := Join ( ruForces2 , un ) ;
8867: LD_ADDR_EXP 59
8871: PUSH
8872: LD_EXP 59
8876: PPUSH
8877: LD_VAR 0 4
8881: PPUSH
8882: CALL 88656 0 2
8886: ST_TO_ADDR
// if i = 3 then
8887: LD_VAR 0 2
8891: PUSH
8892: LD_INT 3
8894: EQUAL
8895: IFFALSE 8929
// begin ruMech2 := Join ( ruMech2 , un ) ;
8897: LD_ADDR_EXP 63
8901: PUSH
8902: LD_EXP 63
8906: PPUSH
8907: LD_VAR 0 4
8911: PPUSH
8912: CALL 88656 0 2
8916: ST_TO_ADDR
// SetClass ( un , class_soldier ) ;
8917: LD_VAR 0 4
8921: PPUSH
8922: LD_INT 1
8924: PPUSH
8925: CALL_OW 336
// end ; end ;
8929: GO 8837
8931: POP
8932: POP
8933: GO 8821
8935: POP
8936: POP
// end ;
8937: LD_VAR 0 1
8941: RET
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea , [ [ f_btype , b_factory ] , [ f_ok ] ] ) do var i ;
8942: LD_EXP 65
8946: PPUSH
8947: LD_INT 30
8949: PUSH
8950: LD_INT 3
8952: PUSH
8953: EMPTY
8954: LIST
8955: LIST
8956: PUSH
8957: LD_INT 50
8959: PUSH
8960: EMPTY
8961: LIST
8962: PUSH
8963: EMPTY
8964: LIST
8965: LIST
8966: PPUSH
8967: CALL_OW 70
8971: IFFALSE 9235
8973: GO 8975
8975: DISABLE
8976: LD_INT 0
8978: PPUSH
// begin enable ;
8979: ENABLE
// ruConstructList := ruConstructList ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , ru_rocket_launcher ] ] ;
8980: LD_ADDR_EXP 69
8984: PUSH
8985: LD_EXP 69
8989: PUSH
8990: LD_INT 22
8992: PUSH
8993: LD_INT 22
8995: PUSH
8996: LD_INT 24
8998: PUSH
8999: LD_INT 24
9001: PUSH
9002: EMPTY
9003: LIST
9004: LIST
9005: LIST
9006: LIST
9007: PUSH
9008: LD_OWVAR 67
9012: ARRAY
9013: PUSH
9014: LD_INT 1
9016: PUSH
9017: LD_INT 3
9019: PUSH
9020: LD_INT 44
9022: PUSH
9023: LD_INT 45
9025: PUSH
9026: EMPTY
9027: LIST
9028: LIST
9029: PUSH
9030: LD_INT 1
9032: PPUSH
9033: LD_INT 2
9035: PPUSH
9036: CALL_OW 12
9040: ARRAY
9041: PUSH
9042: EMPTY
9043: LIST
9044: LIST
9045: LIST
9046: LIST
9047: PUSH
9048: LD_INT 22
9050: PUSH
9051: LD_INT 22
9053: PUSH
9054: LD_INT 24
9056: PUSH
9057: LD_INT 24
9059: PUSH
9060: EMPTY
9061: LIST
9062: LIST
9063: LIST
9064: LIST
9065: PUSH
9066: LD_OWVAR 67
9070: ARRAY
9071: PUSH
9072: LD_INT 1
9074: PUSH
9075: LD_INT 3
9077: PUSH
9078: LD_INT 45
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: PUSH
9087: LD_INT 22
9089: PUSH
9090: LD_INT 22
9092: PUSH
9093: LD_INT 24
9095: PUSH
9096: LD_INT 24
9098: PUSH
9099: EMPTY
9100: LIST
9101: LIST
9102: LIST
9103: LIST
9104: PUSH
9105: LD_OWVAR 67
9109: ARRAY
9110: PUSH
9111: LD_INT 1
9113: PUSH
9114: LD_INT 3
9116: PUSH
9117: LD_INT 45
9119: PUSH
9120: EMPTY
9121: LIST
9122: LIST
9123: LIST
9124: LIST
9125: PUSH
9126: EMPTY
9127: LIST
9128: LIST
9129: LIST
9130: ADD
9131: ST_TO_ADDR
// for i := Difficulty downto 1 do
9132: LD_ADDR_VAR 0 1
9136: PUSH
9137: DOUBLE
9138: LD_OWVAR 67
9142: INC
9143: ST_TO_ADDR
9144: LD_INT 1
9146: PUSH
9147: FOR_DOWNTO
9148: IFFALSE 9233
// ruConstructList := Join ( ruConstructList , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ Difficulty ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher , ru_rocket_launcher , ru_gatling_gun ] [ rand ( 1 , 4 ) ] ] ) ;
9150: LD_ADDR_EXP 69
9154: PUSH
9155: LD_EXP 69
9159: PPUSH
9160: LD_INT 22
9162: PUSH
9163: LD_INT 22
9165: PUSH
9166: LD_INT 24
9168: PUSH
9169: LD_INT 24
9171: PUSH
9172: EMPTY
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: PUSH
9178: LD_OWVAR 67
9182: ARRAY
9183: PUSH
9184: LD_INT 1
9186: PUSH
9187: LD_INT 3
9189: PUSH
9190: LD_INT 44
9192: PUSH
9193: LD_INT 45
9195: PUSH
9196: LD_INT 45
9198: PUSH
9199: LD_INT 43
9201: PUSH
9202: EMPTY
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: PUSH
9208: LD_INT 1
9210: PPUSH
9211: LD_INT 4
9213: PPUSH
9214: CALL_OW 12
9218: ARRAY
9219: PUSH
9220: EMPTY
9221: LIST
9222: LIST
9223: LIST
9224: LIST
9225: PPUSH
9226: CALL 88656 0 2
9230: ST_TO_ADDR
9231: GO 9147
9233: POP
9234: POP
// end ;
9235: PPOPN 1
9237: END
// every 3 3$00 trigger FilterUnitsInArea ( ruBaseArea2 , [ [ f_btype , b_factory ] , [ f_ok ] ] ) do
9238: LD_EXP 66
9242: PPUSH
9243: LD_INT 30
9245: PUSH
9246: LD_INT 3
9248: PUSH
9249: EMPTY
9250: LIST
9251: LIST
9252: PUSH
9253: LD_INT 50
9255: PUSH
9256: EMPTY
9257: LIST
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: PPUSH
9263: CALL_OW 70
9267: IFFALSE 9462
9269: GO 9271
9271: DISABLE
// begin enable ;
9272: ENABLE
// ruConstructList2 := ruConstructList2 ^ [ [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , [ ru_gun , ru_rocket_launcher ] [ rand ( 1 , 2 ) ] ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ [ ru_medium_tracked , ru_medium_tracked , ru_heavy_tracked , ru_heavy_tracked ] [ rand ( 1 , 4 ) ] , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_gatling_gun ] ] ;
9273: LD_ADDR_EXP 70
9277: PUSH
9278: LD_EXP 70
9282: PUSH
9283: LD_INT 22
9285: PUSH
9286: LD_INT 22
9288: PUSH
9289: LD_INT 24
9291: PUSH
9292: LD_INT 24
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: LIST
9299: LIST
9300: PUSH
9301: LD_INT 1
9303: PPUSH
9304: LD_INT 4
9306: PPUSH
9307: CALL_OW 12
9311: ARRAY
9312: PUSH
9313: LD_INT 1
9315: PUSH
9316: LD_INT 3
9318: PUSH
9319: LD_INT 44
9321: PUSH
9322: LD_INT 45
9324: PUSH
9325: EMPTY
9326: LIST
9327: LIST
9328: PUSH
9329: LD_INT 1
9331: PPUSH
9332: LD_INT 2
9334: PPUSH
9335: CALL_OW 12
9339: ARRAY
9340: PUSH
9341: EMPTY
9342: LIST
9343: LIST
9344: LIST
9345: LIST
9346: PUSH
9347: LD_INT 22
9349: PUSH
9350: LD_INT 22
9352: PUSH
9353: LD_INT 24
9355: PUSH
9356: LD_INT 24
9358: PUSH
9359: EMPTY
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: PUSH
9365: LD_INT 1
9367: PPUSH
9368: LD_INT 4
9370: PPUSH
9371: CALL_OW 12
9375: ARRAY
9376: PUSH
9377: LD_INT 1
9379: PUSH
9380: LD_INT 3
9382: PUSH
9383: LD_INT 45
9385: PUSH
9386: EMPTY
9387: LIST
9388: LIST
9389: LIST
9390: LIST
9391: PUSH
9392: LD_INT 22
9394: PUSH
9395: LD_INT 22
9397: PUSH
9398: LD_INT 24
9400: PUSH
9401: LD_INT 24
9403: PUSH
9404: EMPTY
9405: LIST
9406: LIST
9407: LIST
9408: LIST
9409: PUSH
9410: LD_INT 1
9412: PPUSH
9413: LD_INT 4
9415: PPUSH
9416: CALL_OW 12
9420: ARRAY
9421: PUSH
9422: LD_INT 1
9424: PUSH
9425: LD_INT 3
9427: PUSH
9428: LD_INT 45
9430: PUSH
9431: EMPTY
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: PUSH
9437: LD_INT 22
9439: PUSH
9440: LD_INT 1
9442: PUSH
9443: LD_INT 3
9445: PUSH
9446: LD_INT 43
9448: PUSH
9449: EMPTY
9450: LIST
9451: LIST
9452: LIST
9453: LIST
9454: PUSH
9455: EMPTY
9456: LIST
9457: LIST
9458: LIST
9459: LIST
9460: ADD
9461: ST_TO_ADDR
// end ;
9462: END
// export function SpawnConvoy ; var i , tmp , spawn , area , path , place , point ; begin
9463: LD_INT 0
9465: PPUSH
9466: PPUSH
9467: PPUSH
9468: PPUSH
9469: PPUSH
9470: PPUSH
9471: PPUSH
9472: PPUSH
// case Difficulty of 1 :
9473: LD_OWVAR 67
9477: PUSH
9478: LD_INT 1
9480: DOUBLE
9481: EQUAL
9482: IFTRUE 9486
9484: GO 9505
9486: POP
// spawn := rand ( 1 , 2 ) ; 2 :
9487: LD_ADDR_VAR 0 4
9491: PUSH
9492: LD_INT 1
9494: PPUSH
9495: LD_INT 2
9497: PPUSH
9498: CALL_OW 12
9502: ST_TO_ADDR
9503: GO 9579
9505: LD_INT 2
9507: DOUBLE
9508: EQUAL
9509: IFTRUE 9513
9511: GO 9532
9513: POP
// spawn := rand ( 1 , 3 ) ; 3 :
9514: LD_ADDR_VAR 0 4
9518: PUSH
9519: LD_INT 1
9521: PPUSH
9522: LD_INT 3
9524: PPUSH
9525: CALL_OW 12
9529: ST_TO_ADDR
9530: GO 9579
9532: LD_INT 3
9534: DOUBLE
9535: EQUAL
9536: IFTRUE 9540
9538: GO 9559
9540: POP
// spawn := rand ( 2 , 3 ) ; 4 :
9541: LD_ADDR_VAR 0 4
9545: PUSH
9546: LD_INT 2
9548: PPUSH
9549: LD_INT 3
9551: PPUSH
9552: CALL_OW 12
9556: ST_TO_ADDR
9557: GO 9579
9559: LD_INT 4
9561: DOUBLE
9562: EQUAL
9563: IFTRUE 9567
9565: GO 9578
9567: POP
// spawn := 3 ; end ;
9568: LD_ADDR_VAR 0 4
9572: PUSH
9573: LD_INT 3
9575: ST_TO_ADDR
9576: GO 9579
9578: POP
// path := [ centerPathArea , westPathArea , eastPathArea ] [ spawn ] ;
9579: LD_ADDR_VAR 0 6
9583: PUSH
9584: LD_INT 24
9586: PUSH
9587: LD_INT 25
9589: PUSH
9590: LD_INT 23
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: LIST
9597: PUSH
9598: LD_VAR 0 4
9602: ARRAY
9603: ST_TO_ADDR
// area := [ ruSpawnCenterArea , ruSpawnWestArea , ruSpawnEastArea ] [ spawn ] ;
9604: LD_ADDR_VAR 0 5
9608: PUSH
9609: LD_INT 21
9611: PUSH
9612: LD_INT 22
9614: PUSH
9615: LD_INT 20
9617: PUSH
9618: EMPTY
9619: LIST
9620: LIST
9621: LIST
9622: PUSH
9623: LD_VAR 0 4
9627: ARRAY
9628: ST_TO_ADDR
// point := [ [ 96 , 102 ] , [ 54 , 85 ] , [ 146 , 67 ] ] [ spawn ] ;
9629: LD_ADDR_VAR 0 8
9633: PUSH
9634: LD_INT 96
9636: PUSH
9637: LD_INT 102
9639: PUSH
9640: EMPTY
9641: LIST
9642: LIST
9643: PUSH
9644: LD_INT 54
9646: PUSH
9647: LD_INT 85
9649: PUSH
9650: EMPTY
9651: LIST
9652: LIST
9653: PUSH
9654: LD_INT 146
9656: PUSH
9657: LD_INT 67
9659: PUSH
9660: EMPTY
9661: LIST
9662: LIST
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: LIST
9668: PUSH
9669: LD_VAR 0 4
9673: ARRAY
9674: ST_TO_ADDR
// for i in ruForces union ruCommander do
9675: LD_ADDR_VAR 0 2
9679: PUSH
9680: LD_EXP 58
9684: PUSH
9685: LD_EXP 60
9689: UNION
9690: PUSH
9691: FOR_IN
9692: IFFALSE 9747
// begin PlaceUnitArea ( i , area , false ) ;
9694: LD_VAR 0 2
9698: PPUSH
9699: LD_VAR 0 5
9703: PPUSH
9704: LD_INT 0
9706: PPUSH
9707: CALL_OW 49
// ComMoveXY ( i , point [ 1 ] , point [ 2 ] ) ;
9711: LD_VAR 0 2
9715: PPUSH
9716: LD_VAR 0 8
9720: PUSH
9721: LD_INT 1
9723: ARRAY
9724: PPUSH
9725: LD_VAR 0 8
9729: PUSH
9730: LD_INT 2
9732: ARRAY
9733: PPUSH
9734: CALL_OW 111
// wait ( 0 0$0.1 ) ;
9738: LD_INT 4
9740: PPUSH
9741: CALL_OW 67
// end ;
9745: GO 9691
9747: POP
9748: POP
// DRussianConvoy ;
9749: CALL 26128 0 0
// spawnedRussians := true ;
9753: LD_ADDR_EXP 19
9757: PUSH
9758: LD_INT 1
9760: ST_TO_ADDR
// RevealFogArea ( 1 , path ) ;
9761: LD_INT 1
9763: PPUSH
9764: LD_VAR 0 6
9768: PPUSH
9769: CALL_OW 332
// case spawn of 1 :
9773: LD_VAR 0 4
9777: PUSH
9778: LD_INT 1
9780: DOUBLE
9781: EQUAL
9782: IFTRUE 9786
9784: GO 9796
9786: POP
// RaiseSailEvent ( ERussianBaseC ) ; 2 :
9787: LD_INT 102
9789: PPUSH
9790: CALL_OW 427
9794: GO 9833
9796: LD_INT 2
9798: DOUBLE
9799: EQUAL
9800: IFTRUE 9804
9802: GO 9814
9804: POP
// RaiseSailEvent ( ERussianBaseW ) ; 3 :
9805: LD_INT 103
9807: PPUSH
9808: CALL_OW 427
9812: GO 9833
9814: LD_INT 3
9816: DOUBLE
9817: EQUAL
9818: IFTRUE 9822
9820: GO 9832
9822: POP
// RaiseSailEvent ( ERussianBaseE ) ; end ;
9823: LD_INT 104
9825: PPUSH
9826: CALL_OW 427
9830: GO 9833
9832: POP
// if Difficulty < 4 then
9833: LD_OWVAR 67
9837: PUSH
9838: LD_INT 4
9840: LESS
9841: IFFALSE 9845
// exit ;
9843: GO 9922
// RevealFogArea ( 1 , ruSpawnWestArea ) ;
9845: LD_INT 1
9847: PPUSH
9848: LD_INT 22
9850: PPUSH
9851: CALL_OW 332
// for i in ruForces2 union ruCommander2 do
9855: LD_ADDR_VAR 0 2
9859: PUSH
9860: LD_EXP 59
9864: PUSH
9865: LD_EXP 61
9869: UNION
9870: PUSH
9871: FOR_IN
9872: IFFALSE 9913
// begin PlaceUnitArea ( i , ruSpawnWestArea , false ) ;
9874: LD_VAR 0 2
9878: PPUSH
9879: LD_INT 22
9881: PPUSH
9882: LD_INT 0
9884: PPUSH
9885: CALL_OW 49
// ComAgressiveMove ( i , 54 , 85 ) ;
9889: LD_VAR 0 2
9893: PPUSH
9894: LD_INT 54
9896: PPUSH
9897: LD_INT 85
9899: PPUSH
9900: CALL_OW 114
// wait ( 0 0$0.2 ) ;
9904: LD_INT 7
9906: PPUSH
9907: CALL_OW 67
// end ;
9911: GO 9871
9913: POP
9914: POP
// RaiseSailEvent ( ERussianBaseW2 ) ;
9915: LD_INT 105
9917: PPUSH
9918: CALL_OW 427
// end ;
9922: LD_VAR 0 1
9926: RET
// export function RussianBase ( group , option ) ; begin
9927: LD_INT 0
9929: PPUSH
// case option of 1 :
9930: LD_VAR 0 2
9934: PUSH
9935: LD_INT 1
9937: DOUBLE
9938: EQUAL
9939: IFTRUE 9943
9941: GO 10391
9943: POP
// begin ruBaseArea := ruBaseCenterArea ;
9944: LD_ADDR_EXP 65
9948: PUSH
9949: LD_INT 26
9951: ST_TO_ADDR
// ruCratesArea := ruBaseCenterArea ;
9952: LD_ADDR_EXP 71
9956: PUSH
9957: LD_INT 26
9959: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
9960: LD_ADDR_EXP 75
9964: PUSH
9965: LD_INT 0
9967: PUSH
9968: LD_INT 104
9970: PUSH
9971: LD_INT 110
9973: PUSH
9974: LD_INT 5
9976: PUSH
9977: EMPTY
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: PUSH
9983: LD_INT 4
9985: PUSH
9986: LD_INT 98
9988: PUSH
9989: LD_INT 90
9991: PUSH
9992: LD_INT 3
9994: PUSH
9995: EMPTY
9996: LIST
9997: LIST
9998: LIST
9999: LIST
10000: PUSH
10001: LD_INT 29
10003: PUSH
10004: LD_INT 103
10006: PUSH
10007: LD_INT 114
10009: PUSH
10010: LD_INT 2
10012: PUSH
10013: EMPTY
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: PUSH
10019: LD_INT 30
10021: PUSH
10022: LD_INT 99
10024: PUSH
10025: LD_INT 114
10027: PUSH
10028: LD_INT 3
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: PUSH
10037: LD_INT 28
10039: PUSH
10040: LD_INT 100
10042: PUSH
10043: LD_INT 112
10045: PUSH
10046: LD_INT 1
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: PUSH
10055: LD_INT 2
10057: PUSH
10058: LD_INT 92
10060: PUSH
10061: LD_INT 101
10063: PUSH
10064: LD_INT 0
10066: PUSH
10067: EMPTY
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: PUSH
10073: LD_INT 26
10075: PUSH
10076: LD_INT 97
10078: PUSH
10079: LD_INT 116
10081: PUSH
10082: LD_INT 5
10084: PUSH
10085: EMPTY
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: PUSH
10091: LD_INT 17
10093: PUSH
10094: LD_INT 96
10096: PUSH
10097: LD_INT 101
10099: PUSH
10100: LD_INT 4
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: PUSH
10109: LD_INT 18
10111: PUSH
10112: LD_INT 88
10114: PUSH
10115: LD_INT 97
10117: PUSH
10118: LD_INT 2
10120: PUSH
10121: EMPTY
10122: LIST
10123: LIST
10124: LIST
10125: LIST
10126: PUSH
10127: LD_INT 26
10129: PUSH
10130: LD_INT 106
10132: PUSH
10133: LD_INT 92
10135: PUSH
10136: LD_INT 2
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: LIST
10143: LIST
10144: PUSH
10145: LD_INT 6
10147: PUSH
10148: LD_INT 93
10150: PUSH
10151: LD_INT 110
10153: PUSH
10154: LD_INT 0
10156: PUSH
10157: EMPTY
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: PUSH
10163: LD_INT 21
10165: PUSH
10166: LD_INT 89
10168: PUSH
10169: LD_INT 101
10171: PUSH
10172: LD_INT 1
10174: PUSH
10175: EMPTY
10176: LIST
10177: LIST
10178: LIST
10179: LIST
10180: PUSH
10181: LD_INT 16
10183: PUSH
10184: LD_INT 95
10186: PUSH
10187: LD_INT 104
10189: PUSH
10190: LD_INT 4
10192: PUSH
10193: EMPTY
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: PUSH
10199: LD_INT 24
10201: PUSH
10202: LD_INT 92
10204: PUSH
10205: LD_INT 105
10207: PUSH
10208: LD_INT 0
10210: PUSH
10211: EMPTY
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: PUSH
10217: LD_INT 33
10219: PUSH
10220: LD_INT 88
10222: PUSH
10223: LD_INT 89
10225: PUSH
10226: LD_INT 2
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: PUSH
10235: LD_INT 33
10237: PUSH
10238: LD_INT 86
10240: PUSH
10241: LD_INT 90
10243: PUSH
10244: LD_INT 2
10246: PUSH
10247: EMPTY
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: PUSH
10253: LD_INT 33
10255: PUSH
10256: LD_INT 85
10258: PUSH
10259: LD_INT 99
10261: PUSH
10262: LD_INT 2
10264: PUSH
10265: EMPTY
10266: LIST
10267: LIST
10268: LIST
10269: LIST
10270: PUSH
10271: LD_INT 33
10273: PUSH
10274: LD_INT 85
10276: PUSH
10277: LD_INT 107
10279: PUSH
10280: LD_INT 1
10282: PUSH
10283: EMPTY
10284: LIST
10285: LIST
10286: LIST
10287: LIST
10288: PUSH
10289: LD_INT 33
10291: PUSH
10292: LD_INT 105
10294: PUSH
10295: LD_INT 99
10297: PUSH
10298: LD_INT 1
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: PUSH
10307: LD_INT 33
10309: PUSH
10310: LD_INT 102
10312: PUSH
10313: LD_INT 92
10315: PUSH
10316: LD_INT 3
10318: PUSH
10319: EMPTY
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: PUSH
10325: LD_INT 33
10327: PUSH
10328: LD_INT 105
10330: PUSH
10331: LD_INT 92
10333: PUSH
10334: LD_INT 2
10336: PUSH
10337: EMPTY
10338: LIST
10339: LIST
10340: LIST
10341: LIST
10342: PUSH
10343: EMPTY
10344: LIST
10345: LIST
10346: LIST
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: LIST
10358: LIST
10359: LIST
10360: LIST
10361: LIST
10362: LIST
10363: LIST
10364: LIST
10365: ST_TO_ADDR
// ruHealPoint := [ 98 , 107 ] ;
10366: LD_ADDR_EXP 73
10370: PUSH
10371: LD_INT 98
10373: PUSH
10374: LD_INT 107
10376: PUSH
10377: EMPTY
10378: LIST
10379: LIST
10380: ST_TO_ADDR
// ruParkingArea := ruParkingCenterArea ;
10381: LD_ADDR_EXP 80
10385: PUSH
10386: LD_INT 30
10388: ST_TO_ADDR
// end ; 2 :
10389: GO 11342
10391: LD_INT 2
10393: DOUBLE
10394: EQUAL
10395: IFTRUE 10399
10397: GO 10885
10399: POP
// begin ruBaseArea := ruBaseWestArea ;
10400: LD_ADDR_EXP 65
10404: PUSH
10405: LD_INT 28
10407: ST_TO_ADDR
// ruCratesArea := ruBaseWestArea ;
10408: LD_ADDR_EXP 71
10412: PUSH
10413: LD_INT 28
10415: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
10416: LD_ADDR_EXP 75
10420: PUSH
10421: LD_INT 0
10423: PUSH
10424: LD_INT 49
10426: PUSH
10427: LD_INT 74
10429: PUSH
10430: LD_INT 3
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: PUSH
10439: LD_INT 4
10441: PUSH
10442: LD_INT 73
10444: PUSH
10445: LD_INT 88
10447: PUSH
10448: LD_INT 5
10450: PUSH
10451: EMPTY
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: PUSH
10457: LD_INT 4
10459: PUSH
10460: LD_INT 56
10462: PUSH
10463: LD_INT 62
10465: PUSH
10466: LD_INT 3
10468: PUSH
10469: EMPTY
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: PUSH
10475: LD_INT 29
10477: PUSH
10478: LD_INT 43
10480: PUSH
10481: LD_INT 68
10483: PUSH
10484: LD_INT 2
10486: PUSH
10487: EMPTY
10488: LIST
10489: LIST
10490: LIST
10491: LIST
10492: PUSH
10493: LD_INT 30
10495: PUSH
10496: LD_INT 43
10498: PUSH
10499: LD_INT 79
10501: PUSH
10502: LD_INT 5
10504: PUSH
10505: EMPTY
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: PUSH
10511: LD_INT 28
10513: PUSH
10514: LD_INT 60
10516: PUSH
10517: LD_INT 75
10519: PUSH
10520: LD_INT 1
10522: PUSH
10523: EMPTY
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: PUSH
10529: LD_INT 2
10531: PUSH
10532: LD_INT 50
10534: PUSH
10535: LD_INT 87
10537: PUSH
10538: LD_INT 1
10540: PUSH
10541: EMPTY
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: PUSH
10547: LD_INT 26
10549: PUSH
10550: LD_INT 45
10552: PUSH
10553: LD_INT 67
10555: PUSH
10556: LD_INT 2
10558: PUSH
10559: EMPTY
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: PUSH
10565: LD_INT 17
10567: PUSH
10568: LD_INT 47
10570: PUSH
10571: LD_INT 84
10573: PUSH
10574: LD_INT 2
10576: PUSH
10577: EMPTY
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: PUSH
10583: LD_INT 18
10585: PUSH
10586: LD_INT 46
10588: PUSH
10589: LD_INT 87
10591: PUSH
10592: LD_INT 1
10594: PUSH
10595: EMPTY
10596: LIST
10597: LIST
10598: LIST
10599: LIST
10600: PUSH
10601: LD_INT 26
10603: PUSH
10604: LD_INT 41
10606: PUSH
10607: LD_INT 64
10609: PUSH
10610: LD_INT 5
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: PUSH
10619: LD_INT 6
10621: PUSH
10622: LD_INT 42
10624: PUSH
10625: LD_INT 74
10627: PUSH
10628: LD_INT 1
10630: PUSH
10631: EMPTY
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: PUSH
10637: LD_INT 21
10639: PUSH
10640: LD_INT 54
10642: PUSH
10643: LD_INT 91
10645: PUSH
10646: LD_INT 5
10648: PUSH
10649: EMPTY
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: PUSH
10655: LD_INT 16
10657: PUSH
10658: LD_INT 50
10660: PUSH
10661: LD_INT 83
10663: PUSH
10664: LD_INT 3
10666: PUSH
10667: EMPTY
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: PUSH
10673: LD_INT 24
10675: PUSH
10676: LD_INT 50
10678: PUSH
10679: LD_INT 90
10681: PUSH
10682: LD_INT 0
10684: PUSH
10685: EMPTY
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: PUSH
10691: LD_INT 33
10693: PUSH
10694: LD_INT 51
10696: PUSH
10697: LD_INT 61
10699: PUSH
10700: LD_INT 3
10702: PUSH
10703: EMPTY
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: PUSH
10709: LD_INT 33
10711: PUSH
10712: LD_INT 42
10714: PUSH
10715: LD_INT 60
10717: PUSH
10718: LD_INT 3
10720: PUSH
10721: EMPTY
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: PUSH
10727: LD_INT 33
10729: PUSH
10730: LD_INT 36
10732: PUSH
10733: LD_INT 58
10735: PUSH
10736: LD_INT 3
10738: PUSH
10739: EMPTY
10740: LIST
10741: LIST
10742: LIST
10743: LIST
10744: PUSH
10745: LD_INT 33
10747: PUSH
10748: LD_INT 39
10750: PUSH
10751: LD_INT 59
10753: PUSH
10754: LD_INT 3
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: PUSH
10763: LD_INT 33
10765: PUSH
10766: LD_INT 61
10768: PUSH
10769: LD_INT 64
10771: PUSH
10772: LD_INT 3
10774: PUSH
10775: EMPTY
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: PUSH
10781: LD_INT 33
10783: PUSH
10784: LD_INT 63
10786: PUSH
10787: LD_INT 90
10789: PUSH
10790: LD_INT 5
10792: PUSH
10793: EMPTY
10794: LIST
10795: LIST
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 33
10801: PUSH
10802: LD_INT 64
10804: PUSH
10805: LD_INT 88
10807: PUSH
10808: LD_INT 5
10810: PUSH
10811: EMPTY
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: PUSH
10817: LD_INT 33
10819: PUSH
10820: LD_INT 72
10822: PUSH
10823: LD_INT 82
10825: PUSH
10826: LD_INT 5
10828: PUSH
10829: EMPTY
10830: LIST
10831: LIST
10832: LIST
10833: LIST
10834: PUSH
10835: EMPTY
10836: LIST
10837: LIST
10838: LIST
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
10860: LD_ADDR_EXP 73
10864: PUSH
10865: LD_INT 45
10867: PUSH
10868: LD_INT 75
10870: PUSH
10871: EMPTY
10872: LIST
10873: LIST
10874: ST_TO_ADDR
// ruParkingArea := ruParkingWestArea ;
10875: LD_ADDR_EXP 80
10879: PUSH
10880: LD_INT 31
10882: ST_TO_ADDR
// end ; 3 :
10883: GO 11342
10885: LD_INT 3
10887: DOUBLE
10888: EQUAL
10889: IFTRUE 10893
10891: GO 11341
10893: POP
// begin ruBaseArea := ruBaseEastArea ;
10894: LD_ADDR_EXP 65
10898: PUSH
10899: LD_INT 27
10901: ST_TO_ADDR
// ruCratesArea := ruBaseEastArea ;
10902: LD_ADDR_EXP 71
10906: PUSH
10907: LD_INT 27
10909: ST_TO_ADDR
// ruBuildings := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] ] ;
10910: LD_ADDR_EXP 75
10914: PUSH
10915: LD_INT 0
10917: PUSH
10918: LD_INT 152
10920: PUSH
10921: LD_INT 72
10923: PUSH
10924: LD_INT 4
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: PUSH
10933: LD_INT 4
10935: PUSH
10936: LD_INT 139
10938: PUSH
10939: LD_INT 69
10941: PUSH
10942: LD_INT 1
10944: PUSH
10945: EMPTY
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: PUSH
10951: LD_INT 4
10953: PUSH
10954: LD_INT 142
10956: PUSH
10957: LD_INT 56
10959: PUSH
10960: LD_INT 2
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: PUSH
10969: LD_INT 29
10971: PUSH
10972: LD_INT 152
10974: PUSH
10975: LD_INT 85
10977: PUSH
10978: LD_INT 3
10980: PUSH
10981: EMPTY
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: PUSH
10987: LD_INT 30
10989: PUSH
10990: LD_INT 156
10992: PUSH
10993: LD_INT 92
10995: PUSH
10996: LD_INT 3
10998: PUSH
10999: EMPTY
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: PUSH
11005: LD_INT 28
11007: PUSH
11008: LD_INT 157
11010: PUSH
11011: LD_INT 96
11013: PUSH
11014: LD_INT 4
11016: PUSH
11017: EMPTY
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: PUSH
11023: LD_INT 2
11025: PUSH
11026: LD_INT 161
11028: PUSH
11029: LD_INT 74
11031: PUSH
11032: LD_INT 5
11034: PUSH
11035: EMPTY
11036: LIST
11037: LIST
11038: LIST
11039: LIST
11040: PUSH
11041: LD_INT 21
11043: PUSH
11044: LD_INT 157
11046: PUSH
11047: LD_INT 74
11049: PUSH
11050: LD_INT 1
11052: PUSH
11053: EMPTY
11054: LIST
11055: LIST
11056: LIST
11057: LIST
11058: PUSH
11059: LD_INT 16
11061: PUSH
11062: LD_INT 161
11064: PUSH
11065: LD_INT 77
11067: PUSH
11068: LD_INT 0
11070: PUSH
11071: EMPTY
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: PUSH
11077: LD_INT 24
11079: PUSH
11080: LD_INT 165
11082: PUSH
11083: LD_INT 78
11085: PUSH
11086: LD_INT 5
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: PUSH
11095: LD_INT 17
11097: PUSH
11098: LD_INT 164
11100: PUSH
11101: LD_INT 74
11103: PUSH
11104: LD_INT 4
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: PUSH
11113: LD_INT 6
11115: PUSH
11116: LD_INT 164
11118: PUSH
11119: LD_INT 95
11121: PUSH
11122: LD_INT 5
11124: PUSH
11125: EMPTY
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: PUSH
11131: LD_INT 18
11133: PUSH
11134: LD_INT 161
11136: PUSH
11137: LD_INT 70
11139: PUSH
11140: LD_INT 3
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: PUSH
11149: LD_INT 26
11151: PUSH
11152: LD_INT 155
11154: PUSH
11155: LD_INT 87
11157: PUSH
11158: LD_INT 0
11160: PUSH
11161: EMPTY
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: PUSH
11167: LD_INT 26
11169: PUSH
11170: LD_INT 159
11172: PUSH
11173: LD_INT 95
11175: PUSH
11176: LD_INT 3
11178: PUSH
11179: EMPTY
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: PUSH
11185: LD_INT 26
11187: PUSH
11188: LD_INT 167
11190: PUSH
11191: LD_INT 98
11193: PUSH
11194: LD_INT 1
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: PUSH
11203: LD_INT 33
11205: PUSH
11206: LD_INT 152
11208: PUSH
11209: LD_INT 89
11211: PUSH
11212: LD_INT 1
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: PUSH
11221: LD_INT 33
11223: PUSH
11224: LD_INT 134
11226: PUSH
11227: LD_INT 61
11229: PUSH
11230: LD_INT 2
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: LIST
11237: LIST
11238: PUSH
11239: LD_INT 33
11241: PUSH
11242: LD_INT 156
11244: PUSH
11245: LD_INT 62
11247: PUSH
11248: LD_INT 3
11250: PUSH
11251: EMPTY
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: PUSH
11257: LD_INT 33
11259: PUSH
11260: LD_INT 171
11262: PUSH
11263: LD_INT 97
11265: PUSH
11266: LD_INT 5
11268: PUSH
11269: EMPTY
11270: LIST
11271: LIST
11272: LIST
11273: LIST
11274: PUSH
11275: LD_INT 33
11277: PUSH
11278: LD_INT 169
11280: PUSH
11281: LD_INT 103
11283: PUSH
11284: LD_INT 5
11286: PUSH
11287: EMPTY
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: LIST
11308: LIST
11309: LIST
11310: LIST
11311: LIST
11312: LIST
11313: LIST
11314: LIST
11315: ST_TO_ADDR
// ruHealPoint := [ 145 , 71 ] ;
11316: LD_ADDR_EXP 73
11320: PUSH
11321: LD_INT 145
11323: PUSH
11324: LD_INT 71
11326: PUSH
11327: EMPTY
11328: LIST
11329: LIST
11330: ST_TO_ADDR
// ruParkingArea := ruParkingEastArea ;
11331: LD_ADDR_EXP 80
11335: PUSH
11336: LD_INT 29
11338: ST_TO_ADDR
// end ; end ;
11339: GO 11342
11341: POP
// ruScriptActive := true ;
11342: LD_ADDR_EXP 14
11346: PUSH
11347: LD_INT 1
11349: ST_TO_ADDR
// end ;
11350: LD_VAR 0 3
11354: RET
// export function RussianBase2 ( group , option ) ; begin
11355: LD_INT 0
11357: PPUSH
// case option of 1 :
11358: LD_VAR 0 2
11362: PUSH
11363: LD_INT 1
11365: DOUBLE
11366: EQUAL
11367: IFTRUE 11371
11369: GO 11819
11371: POP
// begin ruBaseArea2 := ruBaseCenterArea ;
11372: LD_ADDR_EXP 66
11376: PUSH
11377: LD_INT 26
11379: ST_TO_ADDR
// ruCratesArea2 := ruBaseCenterArea ;
11380: LD_ADDR_EXP 72
11384: PUSH
11385: LD_INT 26
11387: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_oil_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_oil_power , 106 , 92 , 2 ] , [ b_lab , 93 , 110 , 0 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] , [ b_turret , 88 , 89 , 2 ] , [ b_turret , 86 , 90 , 2 ] , [ b_turret , 85 , 99 , 2 ] , [ b_turret , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] ] ;
11388: LD_ADDR_EXP 76
11392: PUSH
11393: LD_INT 0
11395: PUSH
11396: LD_INT 104
11398: PUSH
11399: LD_INT 110
11401: PUSH
11402: LD_INT 5
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: PUSH
11411: LD_INT 4
11413: PUSH
11414: LD_INT 98
11416: PUSH
11417: LD_INT 90
11419: PUSH
11420: LD_INT 3
11422: PUSH
11423: EMPTY
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: PUSH
11429: LD_INT 29
11431: PUSH
11432: LD_INT 103
11434: PUSH
11435: LD_INT 114
11437: PUSH
11438: LD_INT 2
11440: PUSH
11441: EMPTY
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: PUSH
11447: LD_INT 30
11449: PUSH
11450: LD_INT 99
11452: PUSH
11453: LD_INT 114
11455: PUSH
11456: LD_INT 3
11458: PUSH
11459: EMPTY
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 28
11467: PUSH
11468: LD_INT 100
11470: PUSH
11471: LD_INT 112
11473: PUSH
11474: LD_INT 1
11476: PUSH
11477: EMPTY
11478: LIST
11479: LIST
11480: LIST
11481: LIST
11482: PUSH
11483: LD_INT 2
11485: PUSH
11486: LD_INT 92
11488: PUSH
11489: LD_INT 101
11491: PUSH
11492: LD_INT 0
11494: PUSH
11495: EMPTY
11496: LIST
11497: LIST
11498: LIST
11499: LIST
11500: PUSH
11501: LD_INT 26
11503: PUSH
11504: LD_INT 97
11506: PUSH
11507: LD_INT 116
11509: PUSH
11510: LD_INT 5
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: PUSH
11519: LD_INT 17
11521: PUSH
11522: LD_INT 96
11524: PUSH
11525: LD_INT 101
11527: PUSH
11528: LD_INT 4
11530: PUSH
11531: EMPTY
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: PUSH
11537: LD_INT 18
11539: PUSH
11540: LD_INT 88
11542: PUSH
11543: LD_INT 97
11545: PUSH
11546: LD_INT 2
11548: PUSH
11549: EMPTY
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: PUSH
11555: LD_INT 26
11557: PUSH
11558: LD_INT 106
11560: PUSH
11561: LD_INT 92
11563: PUSH
11564: LD_INT 2
11566: PUSH
11567: EMPTY
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: PUSH
11573: LD_INT 6
11575: PUSH
11576: LD_INT 93
11578: PUSH
11579: LD_INT 110
11581: PUSH
11582: LD_INT 0
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: PUSH
11591: LD_INT 21
11593: PUSH
11594: LD_INT 89
11596: PUSH
11597: LD_INT 101
11599: PUSH
11600: LD_INT 1
11602: PUSH
11603: EMPTY
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: PUSH
11609: LD_INT 16
11611: PUSH
11612: LD_INT 95
11614: PUSH
11615: LD_INT 104
11617: PUSH
11618: LD_INT 4
11620: PUSH
11621: EMPTY
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: PUSH
11627: LD_INT 24
11629: PUSH
11630: LD_INT 92
11632: PUSH
11633: LD_INT 105
11635: PUSH
11636: LD_INT 0
11638: PUSH
11639: EMPTY
11640: LIST
11641: LIST
11642: LIST
11643: LIST
11644: PUSH
11645: LD_INT 33
11647: PUSH
11648: LD_INT 88
11650: PUSH
11651: LD_INT 89
11653: PUSH
11654: LD_INT 2
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: PUSH
11663: LD_INT 33
11665: PUSH
11666: LD_INT 86
11668: PUSH
11669: LD_INT 90
11671: PUSH
11672: LD_INT 2
11674: PUSH
11675: EMPTY
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: PUSH
11681: LD_INT 33
11683: PUSH
11684: LD_INT 85
11686: PUSH
11687: LD_INT 99
11689: PUSH
11690: LD_INT 2
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: PUSH
11699: LD_INT 33
11701: PUSH
11702: LD_INT 85
11704: PUSH
11705: LD_INT 107
11707: PUSH
11708: LD_INT 1
11710: PUSH
11711: EMPTY
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: PUSH
11717: LD_INT 33
11719: PUSH
11720: LD_INT 105
11722: PUSH
11723: LD_INT 99
11725: PUSH
11726: LD_INT 1
11728: PUSH
11729: EMPTY
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: PUSH
11735: LD_INT 33
11737: PUSH
11738: LD_INT 102
11740: PUSH
11741: LD_INT 92
11743: PUSH
11744: LD_INT 3
11746: PUSH
11747: EMPTY
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: PUSH
11753: LD_INT 33
11755: PUSH
11756: LD_INT 105
11758: PUSH
11759: LD_INT 92
11761: PUSH
11762: LD_INT 2
11764: PUSH
11765: EMPTY
11766: LIST
11767: LIST
11768: LIST
11769: LIST
11770: PUSH
11771: EMPTY
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: ST_TO_ADDR
// ruHealPoint2 := [ 98 , 107 ] ;
11794: LD_ADDR_EXP 74
11798: PUSH
11799: LD_INT 98
11801: PUSH
11802: LD_INT 107
11804: PUSH
11805: EMPTY
11806: LIST
11807: LIST
11808: ST_TO_ADDR
// ruParkingArea2 := ruParkingCenterArea ;
11809: LD_ADDR_EXP 81
11813: PUSH
11814: LD_INT 30
11816: ST_TO_ADDR
// end ; 2 :
11817: GO 12770
11819: LD_INT 2
11821: DOUBLE
11822: EQUAL
11823: IFTRUE 11827
11825: GO 12313
11827: POP
// begin ruBaseArea2 := ruBaseWestArea ;
11828: LD_ADDR_EXP 66
11832: PUSH
11833: LD_INT 28
11835: ST_TO_ADDR
// ruCratesArea2 := ruBaseWestArea ;
11836: LD_ADDR_EXP 72
11840: PUSH
11841: LD_INT 28
11843: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_oil_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_oil_power , 41 , 64 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] , [ b_turret , 51 , 61 , 3 ] , [ b_turret , 42 , 60 , 3 ] , [ b_turret , 36 , 58 , 3 ] , [ b_turret , 39 , 59 , 3 ] , [ b_turret , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] ] ;
11844: LD_ADDR_EXP 76
11848: PUSH
11849: LD_INT 0
11851: PUSH
11852: LD_INT 49
11854: PUSH
11855: LD_INT 74
11857: PUSH
11858: LD_INT 3
11860: PUSH
11861: EMPTY
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: PUSH
11867: LD_INT 4
11869: PUSH
11870: LD_INT 73
11872: PUSH
11873: LD_INT 88
11875: PUSH
11876: LD_INT 5
11878: PUSH
11879: EMPTY
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: PUSH
11885: LD_INT 4
11887: PUSH
11888: LD_INT 56
11890: PUSH
11891: LD_INT 62
11893: PUSH
11894: LD_INT 3
11896: PUSH
11897: EMPTY
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: PUSH
11903: LD_INT 29
11905: PUSH
11906: LD_INT 43
11908: PUSH
11909: LD_INT 68
11911: PUSH
11912: LD_INT 2
11914: PUSH
11915: EMPTY
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: PUSH
11921: LD_INT 30
11923: PUSH
11924: LD_INT 43
11926: PUSH
11927: LD_INT 79
11929: PUSH
11930: LD_INT 5
11932: PUSH
11933: EMPTY
11934: LIST
11935: LIST
11936: LIST
11937: LIST
11938: PUSH
11939: LD_INT 28
11941: PUSH
11942: LD_INT 60
11944: PUSH
11945: LD_INT 75
11947: PUSH
11948: LD_INT 1
11950: PUSH
11951: EMPTY
11952: LIST
11953: LIST
11954: LIST
11955: LIST
11956: PUSH
11957: LD_INT 2
11959: PUSH
11960: LD_INT 50
11962: PUSH
11963: LD_INT 87
11965: PUSH
11966: LD_INT 1
11968: PUSH
11969: EMPTY
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: PUSH
11975: LD_INT 26
11977: PUSH
11978: LD_INT 45
11980: PUSH
11981: LD_INT 67
11983: PUSH
11984: LD_INT 2
11986: PUSH
11987: EMPTY
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: PUSH
11993: LD_INT 17
11995: PUSH
11996: LD_INT 47
11998: PUSH
11999: LD_INT 84
12001: PUSH
12002: LD_INT 2
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: PUSH
12011: LD_INT 18
12013: PUSH
12014: LD_INT 46
12016: PUSH
12017: LD_INT 87
12019: PUSH
12020: LD_INT 1
12022: PUSH
12023: EMPTY
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: PUSH
12029: LD_INT 26
12031: PUSH
12032: LD_INT 41
12034: PUSH
12035: LD_INT 64
12037: PUSH
12038: LD_INT 5
12040: PUSH
12041: EMPTY
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: PUSH
12047: LD_INT 6
12049: PUSH
12050: LD_INT 42
12052: PUSH
12053: LD_INT 74
12055: PUSH
12056: LD_INT 1
12058: PUSH
12059: EMPTY
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: PUSH
12065: LD_INT 21
12067: PUSH
12068: LD_INT 54
12070: PUSH
12071: LD_INT 91
12073: PUSH
12074: LD_INT 5
12076: PUSH
12077: EMPTY
12078: LIST
12079: LIST
12080: LIST
12081: LIST
12082: PUSH
12083: LD_INT 16
12085: PUSH
12086: LD_INT 50
12088: PUSH
12089: LD_INT 83
12091: PUSH
12092: LD_INT 3
12094: PUSH
12095: EMPTY
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: PUSH
12101: LD_INT 24
12103: PUSH
12104: LD_INT 50
12106: PUSH
12107: LD_INT 90
12109: PUSH
12110: LD_INT 0
12112: PUSH
12113: EMPTY
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: PUSH
12119: LD_INT 33
12121: PUSH
12122: LD_INT 51
12124: PUSH
12125: LD_INT 61
12127: PUSH
12128: LD_INT 3
12130: PUSH
12131: EMPTY
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: PUSH
12137: LD_INT 33
12139: PUSH
12140: LD_INT 42
12142: PUSH
12143: LD_INT 60
12145: PUSH
12146: LD_INT 3
12148: PUSH
12149: EMPTY
12150: LIST
12151: LIST
12152: LIST
12153: LIST
12154: PUSH
12155: LD_INT 33
12157: PUSH
12158: LD_INT 36
12160: PUSH
12161: LD_INT 58
12163: PUSH
12164: LD_INT 3
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: LIST
12171: LIST
12172: PUSH
12173: LD_INT 33
12175: PUSH
12176: LD_INT 39
12178: PUSH
12179: LD_INT 59
12181: PUSH
12182: LD_INT 3
12184: PUSH
12185: EMPTY
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 33
12193: PUSH
12194: LD_INT 61
12196: PUSH
12197: LD_INT 64
12199: PUSH
12200: LD_INT 3
12202: PUSH
12203: EMPTY
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: PUSH
12209: LD_INT 33
12211: PUSH
12212: LD_INT 63
12214: PUSH
12215: LD_INT 90
12217: PUSH
12218: LD_INT 5
12220: PUSH
12221: EMPTY
12222: LIST
12223: LIST
12224: LIST
12225: LIST
12226: PUSH
12227: LD_INT 33
12229: PUSH
12230: LD_INT 64
12232: PUSH
12233: LD_INT 88
12235: PUSH
12236: LD_INT 5
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: PUSH
12245: LD_INT 33
12247: PUSH
12248: LD_INT 72
12250: PUSH
12251: LD_INT 82
12253: PUSH
12254: LD_INT 5
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: PUSH
12263: EMPTY
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: ST_TO_ADDR
// ruHealPoint := [ 45 , 75 ] ;
12288: LD_ADDR_EXP 73
12292: PUSH
12293: LD_INT 45
12295: PUSH
12296: LD_INT 75
12298: PUSH
12299: EMPTY
12300: LIST
12301: LIST
12302: ST_TO_ADDR
// ruParkingArea2 := ruParkingWestArea ;
12303: LD_ADDR_EXP 81
12307: PUSH
12308: LD_INT 31
12310: ST_TO_ADDR
// end ; 3 :
12311: GO 12770
12313: LD_INT 3
12315: DOUBLE
12316: EQUAL
12317: IFTRUE 12321
12319: GO 12769
12321: POP
// begin ruBaseArea2 := ruBaseEastArea ;
12322: LD_ADDR_EXP 66
12326: PUSH
12327: LD_INT 27
12329: ST_TO_ADDR
// ruCratesArea2 := ruBaseEastArea ;
12330: LD_ADDR_EXP 72
12334: PUSH
12335: LD_INT 27
12337: ST_TO_ADDR
// ruBuildings2 := [ [ b_depot , 152 , 72 , 4 ] , [ b_armoury , 139 , 69 , 1 ] , [ b_armoury , 142 , 56 , 2 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 157 , 96 , 4 ] , [ b_workshop , 161 , 74 , 5 ] , [ b_ext_siberium , 157 , 74 , 1 ] , [ b_ext_track , 161 , 77 , 0 ] , [ b_ext_computer , 165 , 78 , 5 ] , [ b_ext_gun , 164 , 74 , 4 ] , [ b_lab , 164 , 95 , 5 ] , [ b_ext_rocket , 161 , 70 , 3 ] , [ b_oil_power , 155 , 87 , 0 ] , [ b_oil_power , 159 , 95 , 3 ] , [ b_oil_power , 167 , 98 , 1 ] , [ b_turret , 152 , 89 , 1 ] , [ b_turret , 134 , 61 , 2 ] , [ b_turret , 156 , 62 , 3 ] , [ b_turret , 171 , 97 , 5 ] , [ b_turret , 169 , 103 , 5 ] ] ;
12338: LD_ADDR_EXP 76
12342: PUSH
12343: LD_INT 0
12345: PUSH
12346: LD_INT 152
12348: PUSH
12349: LD_INT 72
12351: PUSH
12352: LD_INT 4
12354: PUSH
12355: EMPTY
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: PUSH
12361: LD_INT 4
12363: PUSH
12364: LD_INT 139
12366: PUSH
12367: LD_INT 69
12369: PUSH
12370: LD_INT 1
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: PUSH
12379: LD_INT 4
12381: PUSH
12382: LD_INT 142
12384: PUSH
12385: LD_INT 56
12387: PUSH
12388: LD_INT 2
12390: PUSH
12391: EMPTY
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: PUSH
12397: LD_INT 29
12399: PUSH
12400: LD_INT 152
12402: PUSH
12403: LD_INT 85
12405: PUSH
12406: LD_INT 3
12408: PUSH
12409: EMPTY
12410: LIST
12411: LIST
12412: LIST
12413: LIST
12414: PUSH
12415: LD_INT 30
12417: PUSH
12418: LD_INT 156
12420: PUSH
12421: LD_INT 92
12423: PUSH
12424: LD_INT 3
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: PUSH
12433: LD_INT 28
12435: PUSH
12436: LD_INT 157
12438: PUSH
12439: LD_INT 96
12441: PUSH
12442: LD_INT 4
12444: PUSH
12445: EMPTY
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: PUSH
12451: LD_INT 2
12453: PUSH
12454: LD_INT 161
12456: PUSH
12457: LD_INT 74
12459: PUSH
12460: LD_INT 5
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: PUSH
12469: LD_INT 21
12471: PUSH
12472: LD_INT 157
12474: PUSH
12475: LD_INT 74
12477: PUSH
12478: LD_INT 1
12480: PUSH
12481: EMPTY
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: PUSH
12487: LD_INT 16
12489: PUSH
12490: LD_INT 161
12492: PUSH
12493: LD_INT 77
12495: PUSH
12496: LD_INT 0
12498: PUSH
12499: EMPTY
12500: LIST
12501: LIST
12502: LIST
12503: LIST
12504: PUSH
12505: LD_INT 24
12507: PUSH
12508: LD_INT 165
12510: PUSH
12511: LD_INT 78
12513: PUSH
12514: LD_INT 5
12516: PUSH
12517: EMPTY
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: PUSH
12523: LD_INT 17
12525: PUSH
12526: LD_INT 164
12528: PUSH
12529: LD_INT 74
12531: PUSH
12532: LD_INT 4
12534: PUSH
12535: EMPTY
12536: LIST
12537: LIST
12538: LIST
12539: LIST
12540: PUSH
12541: LD_INT 6
12543: PUSH
12544: LD_INT 164
12546: PUSH
12547: LD_INT 95
12549: PUSH
12550: LD_INT 5
12552: PUSH
12553: EMPTY
12554: LIST
12555: LIST
12556: LIST
12557: LIST
12558: PUSH
12559: LD_INT 18
12561: PUSH
12562: LD_INT 161
12564: PUSH
12565: LD_INT 70
12567: PUSH
12568: LD_INT 3
12570: PUSH
12571: EMPTY
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: PUSH
12577: LD_INT 26
12579: PUSH
12580: LD_INT 155
12582: PUSH
12583: LD_INT 87
12585: PUSH
12586: LD_INT 0
12588: PUSH
12589: EMPTY
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: PUSH
12595: LD_INT 26
12597: PUSH
12598: LD_INT 159
12600: PUSH
12601: LD_INT 95
12603: PUSH
12604: LD_INT 3
12606: PUSH
12607: EMPTY
12608: LIST
12609: LIST
12610: LIST
12611: LIST
12612: PUSH
12613: LD_INT 26
12615: PUSH
12616: LD_INT 167
12618: PUSH
12619: LD_INT 98
12621: PUSH
12622: LD_INT 1
12624: PUSH
12625: EMPTY
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: PUSH
12631: LD_INT 33
12633: PUSH
12634: LD_INT 152
12636: PUSH
12637: LD_INT 89
12639: PUSH
12640: LD_INT 1
12642: PUSH
12643: EMPTY
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: PUSH
12649: LD_INT 33
12651: PUSH
12652: LD_INT 134
12654: PUSH
12655: LD_INT 61
12657: PUSH
12658: LD_INT 2
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: PUSH
12667: LD_INT 33
12669: PUSH
12670: LD_INT 156
12672: PUSH
12673: LD_INT 62
12675: PUSH
12676: LD_INT 3
12678: PUSH
12679: EMPTY
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: PUSH
12685: LD_INT 33
12687: PUSH
12688: LD_INT 171
12690: PUSH
12691: LD_INT 97
12693: PUSH
12694: LD_INT 5
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: LIST
12701: LIST
12702: PUSH
12703: LD_INT 33
12705: PUSH
12706: LD_INT 169
12708: PUSH
12709: LD_INT 103
12711: PUSH
12712: LD_INT 5
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: LIST
12728: LIST
12729: LIST
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: LIST
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: LIST
12740: LIST
12741: LIST
12742: LIST
12743: ST_TO_ADDR
// ruHealPoint2 := [ 145 , 71 ] ;
12744: LD_ADDR_EXP 74
12748: PUSH
12749: LD_INT 145
12751: PUSH
12752: LD_INT 71
12754: PUSH
12755: EMPTY
12756: LIST
12757: LIST
12758: ST_TO_ADDR
// ruParkingArea2 := ruParkingEastArea ;
12759: LD_ADDR_EXP 81
12763: PUSH
12764: LD_INT 29
12766: ST_TO_ADDR
// end ; end ;
12767: GO 12770
12769: POP
// ruScriptActive2 := true ;
12770: LD_ADDR_EXP 15
12774: PUSH
12775: LD_INT 1
12777: ST_TO_ADDR
// end ;
12778: LD_VAR 0 3
12782: RET
// every 0 0$2 trigger ruScriptActive and Count ( ruForces ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
12783: LD_EXP 14
12787: PUSH
12788: LD_EXP 58
12792: PPUSH
12793: CALL 53437 0 1
12797: AND
12798: IFFALSE 15173
12800: GO 12802
12802: DISABLE
12803: LD_INT 0
12805: PPUSH
12806: PPUSH
12807: PPUSH
12808: PPUSH
12809: PPUSH
12810: PPUSH
12811: PPUSH
12812: PPUSH
12813: PPUSH
12814: PPUSH
12815: PPUSH
12816: PPUSH
12817: PPUSH
12818: PPUSH
12819: PPUSH
12820: PPUSH
// begin enable ;
12821: ENABLE
// if ruTech then
12822: LD_EXP 64
12826: IFFALSE 12980
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
12828: LD_ADDR_VAR 0 4
12832: PUSH
12833: LD_INT 22
12835: PUSH
12836: LD_INT 3
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: PUSH
12843: LD_INT 50
12845: PUSH
12846: EMPTY
12847: LIST
12848: PUSH
12849: LD_INT 2
12851: PUSH
12852: LD_INT 30
12854: PUSH
12855: LD_INT 6
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: PUSH
12862: LD_INT 30
12864: PUSH
12865: LD_INT 7
12867: PUSH
12868: EMPTY
12869: LIST
12870: LIST
12871: PUSH
12872: LD_INT 30
12874: PUSH
12875: LD_INT 8
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: PUSH
12882: EMPTY
12883: LIST
12884: LIST
12885: LIST
12886: LIST
12887: PUSH
12888: EMPTY
12889: LIST
12890: LIST
12891: LIST
12892: PPUSH
12893: CALL_OW 69
12897: ST_TO_ADDR
// if lab then
12898: LD_VAR 0 4
12902: IFFALSE 12980
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
12904: LD_VAR 0 4
12908: PUSH
12909: LD_INT 1
12911: ARRAY
12912: PPUSH
12913: CALL_OW 461
12917: PUSH
12918: LD_INT 2
12920: EQUAL
12921: IFFALSE 12980
// begin for i in ruTech do
12923: LD_ADDR_VAR 0 1
12927: PUSH
12928: LD_EXP 64
12932: PUSH
12933: FOR_IN
12934: IFFALSE 12978
// if CanBeResearched ( lab [ 1 ] , i ) then
12936: LD_VAR 0 4
12940: PUSH
12941: LD_INT 1
12943: ARRAY
12944: PPUSH
12945: LD_VAR 0 1
12949: PPUSH
12950: CALL_OW 430
12954: IFFALSE 12976
// begin ComResearch ( lab [ 1 ] , i ) ;
12956: LD_VAR 0 4
12960: PUSH
12961: LD_INT 1
12963: ARRAY
12964: PPUSH
12965: LD_VAR 0 1
12969: PPUSH
12970: CALL_OW 124
// break ;
12974: GO 12978
// end ;
12976: GO 12933
12978: POP
12979: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
12980: LD_ADDR_VAR 0 14
12984: PUSH
12985: LD_EXP 65
12989: PPUSH
12990: LD_INT 22
12992: PUSH
12993: LD_INT 3
12995: PUSH
12996: EMPTY
12997: LIST
12998: LIST
12999: PUSH
13000: LD_INT 30
13002: PUSH
13003: LD_INT 3
13005: PUSH
13006: EMPTY
13007: LIST
13008: LIST
13009: PUSH
13010: LD_INT 50
13012: PUSH
13013: EMPTY
13014: LIST
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: LIST
13020: PPUSH
13021: CALL_OW 70
13025: ST_TO_ADDR
// if fac then
13026: LD_VAR 0 14
13030: IFFALSE 13484
// begin if UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
13032: LD_EXP 62
13036: PPUSH
13037: LD_INT 3
13039: PUSH
13040: LD_INT 60
13042: PUSH
13043: EMPTY
13044: LIST
13045: PUSH
13046: EMPTY
13047: LIST
13048: LIST
13049: PUSH
13050: LD_INT 3
13052: PUSH
13053: LD_INT 25
13055: PUSH
13056: LD_INT 3
13058: PUSH
13059: EMPTY
13060: LIST
13061: LIST
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: PUSH
13067: EMPTY
13068: LIST
13069: LIST
13070: PPUSH
13071: CALL_OW 72
13075: IFFALSE 13216
// begin for i in UnitFilter ( ruMech , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
13077: LD_ADDR_VAR 0 1
13081: PUSH
13082: LD_EXP 62
13086: PPUSH
13087: LD_INT 3
13089: PUSH
13090: LD_INT 60
13092: PUSH
13093: EMPTY
13094: LIST
13095: PUSH
13096: EMPTY
13097: LIST
13098: LIST
13099: PUSH
13100: LD_INT 3
13102: PUSH
13103: LD_INT 25
13105: PUSH
13106: LD_INT 3
13108: PUSH
13109: EMPTY
13110: LIST
13111: LIST
13112: PUSH
13113: EMPTY
13114: LIST
13115: LIST
13116: PUSH
13117: EMPTY
13118: LIST
13119: LIST
13120: PPUSH
13121: CALL_OW 72
13125: PUSH
13126: FOR_IN
13127: IFFALSE 13214
// begin SetTag ( i , tMech ) ;
13129: LD_VAR 0 1
13133: PPUSH
13134: LD_INT 7
13136: PPUSH
13137: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
13141: LD_VAR 0 1
13145: PPUSH
13146: CALL_OW 310
13150: PUSH
13151: LD_VAR 0 1
13155: PPUSH
13156: CALL_OW 310
13160: PUSH
13161: LD_VAR 0 14
13165: PUSH
13166: LD_INT 1
13168: ARRAY
13169: NONEQUAL
13170: AND
13171: IFFALSE 13182
// ComExitBuilding ( i ) ;
13173: LD_VAR 0 1
13177: PPUSH
13178: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
13182: LD_VAR 0 1
13186: PPUSH
13187: LD_VAR 0 14
13191: PUSH
13192: LD_INT 1
13194: ARRAY
13195: PPUSH
13196: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
13200: LD_VAR 0 1
13204: PPUSH
13205: LD_INT 3
13207: PPUSH
13208: CALL_OW 183
// end ;
13212: GO 13126
13214: POP
13215: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
13216: LD_VAR 0 14
13220: PUSH
13221: LD_INT 1
13223: ARRAY
13224: PPUSH
13225: CALL_OW 461
13229: PUSH
13230: LD_INT 2
13232: EQUAL
13233: IFFALSE 13484
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
13235: LD_ADDR_VAR 0 15
13239: PUSH
13240: LD_EXP 65
13244: PPUSH
13245: LD_INT 2
13247: PUSH
13248: LD_INT 30
13250: PUSH
13251: LD_INT 32
13253: PUSH
13254: EMPTY
13255: LIST
13256: LIST
13257: PUSH
13258: LD_INT 30
13260: PUSH
13261: LD_INT 33
13263: PUSH
13264: EMPTY
13265: LIST
13266: LIST
13267: PUSH
13268: EMPTY
13269: LIST
13270: LIST
13271: LIST
13272: PUSH
13273: LD_INT 35
13275: PUSH
13276: LD_INT 0
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: PUSH
13283: EMPTY
13284: LIST
13285: LIST
13286: PPUSH
13287: CALL_OW 70
13291: ST_TO_ADDR
// if emptyTowers then
13292: LD_VAR 0 15
13296: IFFALSE 13346
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea ) ;
13298: LD_ADDR_VAR 0 16
13302: PUSH
13303: LD_VAR 0 15
13307: PUSH
13308: LD_INT 1
13310: ARRAY
13311: PPUSH
13312: LD_EXP 65
13316: PPUSH
13317: CALL 61314 0 2
13321: ST_TO_ADDR
// if weapon then
13322: LD_VAR 0 16
13326: IFFALSE 13346
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
13328: LD_VAR 0 15
13332: PUSH
13333: LD_INT 1
13335: ARRAY
13336: PPUSH
13337: LD_VAR 0 16
13341: PPUSH
13342: CALL_OW 148
// end ; if ruConstructList then
13346: LD_EXP 69
13350: IFFALSE 13484
// if CanBeConstructed ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) then
13352: LD_VAR 0 14
13356: PUSH
13357: LD_INT 1
13359: ARRAY
13360: PPUSH
13361: LD_EXP 69
13365: PUSH
13366: LD_INT 1
13368: ARRAY
13369: PUSH
13370: LD_INT 1
13372: ARRAY
13373: PPUSH
13374: LD_EXP 69
13378: PUSH
13379: LD_INT 1
13381: ARRAY
13382: PUSH
13383: LD_INT 2
13385: ARRAY
13386: PPUSH
13387: LD_EXP 69
13391: PUSH
13392: LD_INT 1
13394: ARRAY
13395: PUSH
13396: LD_INT 3
13398: ARRAY
13399: PPUSH
13400: LD_EXP 69
13404: PUSH
13405: LD_INT 1
13407: ARRAY
13408: PUSH
13409: LD_INT 4
13411: ARRAY
13412: PPUSH
13413: CALL_OW 448
13417: IFFALSE 13484
// ComConstruct ( fac [ 1 ] , ruConstructList [ 1 ] [ 1 ] , ruConstructList [ 1 ] [ 2 ] , ruConstructList [ 1 ] [ 3 ] , ruConstructList [ 1 ] [ 4 ] ) ;
13419: LD_VAR 0 14
13423: PUSH
13424: LD_INT 1
13426: ARRAY
13427: PPUSH
13428: LD_EXP 69
13432: PUSH
13433: LD_INT 1
13435: ARRAY
13436: PUSH
13437: LD_INT 1
13439: ARRAY
13440: PPUSH
13441: LD_EXP 69
13445: PUSH
13446: LD_INT 1
13448: ARRAY
13449: PUSH
13450: LD_INT 2
13452: ARRAY
13453: PPUSH
13454: LD_EXP 69
13458: PUSH
13459: LD_INT 1
13461: ARRAY
13462: PUSH
13463: LD_INT 3
13465: ARRAY
13466: PPUSH
13467: LD_EXP 69
13471: PUSH
13472: LD_INT 1
13474: ARRAY
13475: PUSH
13476: LD_INT 4
13478: ARRAY
13479: PPUSH
13480: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
13484: LD_ADDR_VAR 0 2
13488: PUSH
13489: LD_EXP 65
13493: PPUSH
13494: LD_INT 21
13496: PUSH
13497: LD_INT 3
13499: PUSH
13500: EMPTY
13501: LIST
13502: LIST
13503: PUSH
13504: LD_INT 3
13506: PUSH
13507: LD_INT 57
13509: PUSH
13510: EMPTY
13511: LIST
13512: PUSH
13513: EMPTY
13514: LIST
13515: LIST
13516: PUSH
13517: LD_INT 3
13519: PUSH
13520: LD_INT 24
13522: PUSH
13523: LD_INT 1000
13525: PUSH
13526: EMPTY
13527: LIST
13528: LIST
13529: PUSH
13530: EMPTY
13531: LIST
13532: LIST
13533: PUSH
13534: EMPTY
13535: LIST
13536: LIST
13537: LIST
13538: PPUSH
13539: CALL_OW 70
13543: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea ) ;
13544: LD_ADDR_VAR 0 8
13548: PUSH
13549: LD_EXP 71
13553: PPUSH
13554: CALL_OW 435
13558: ST_TO_ADDR
// sci := UnitFilter ( ruForces , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
13559: LD_ADDR_VAR 0 9
13563: PUSH
13564: LD_EXP 58
13568: PPUSH
13569: LD_INT 25
13571: PUSH
13572: LD_INT 4
13574: PUSH
13575: EMPTY
13576: LIST
13577: LIST
13578: PUSH
13579: LD_INT 50
13581: PUSH
13582: EMPTY
13583: LIST
13584: PUSH
13585: EMPTY
13586: LIST
13587: LIST
13588: PPUSH
13589: CALL_OW 72
13593: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
13594: LD_ADDR_VAR 0 4
13598: PUSH
13599: LD_EXP 65
13603: PPUSH
13604: LD_INT 2
13606: PUSH
13607: LD_INT 30
13609: PUSH
13610: LD_INT 6
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: LD_INT 30
13619: PUSH
13620: LD_INT 7
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PUSH
13627: LD_INT 30
13629: PUSH
13630: LD_INT 8
13632: PUSH
13633: EMPTY
13634: LIST
13635: LIST
13636: PUSH
13637: EMPTY
13638: LIST
13639: LIST
13640: LIST
13641: LIST
13642: PPUSH
13643: CALL_OW 70
13647: ST_TO_ADDR
// if sci then
13648: LD_VAR 0 9
13652: IFFALSE 13813
// begin hurtUnits := UnitFilter ( ruForces , [ [ f_inarea , ruBaseArea ] , [ f_tag , tHeal ] ] ) ;
13654: LD_ADDR_VAR 0 11
13658: PUSH
13659: LD_EXP 58
13663: PPUSH
13664: LD_INT 95
13666: PUSH
13667: LD_EXP 65
13671: PUSH
13672: EMPTY
13673: LIST
13674: LIST
13675: PUSH
13676: LD_INT 120
13678: PUSH
13679: LD_INT 1
13681: PUSH
13682: EMPTY
13683: LIST
13684: LIST
13685: PUSH
13686: EMPTY
13687: LIST
13688: LIST
13689: PPUSH
13690: CALL_OW 72
13694: ST_TO_ADDR
// if hurtUnits then
13695: LD_VAR 0 11
13699: IFFALSE 13760
// begin for i in sci do
13701: LD_ADDR_VAR 0 1
13705: PUSH
13706: LD_VAR 0 9
13710: PUSH
13711: FOR_IN
13712: IFFALSE 13756
// if IsInUnit ( i ) then
13714: LD_VAR 0 1
13718: PPUSH
13719: CALL_OW 310
13723: IFFALSE 13736
// ComExitBuilding ( i ) else
13725: LD_VAR 0 1
13729: PPUSH
13730: CALL_OW 122
13734: GO 13754
// ComHeal ( i , hurtUnits [ 1 ] ) ;
13736: LD_VAR 0 1
13740: PPUSH
13741: LD_VAR 0 11
13745: PUSH
13746: LD_INT 1
13748: ARRAY
13749: PPUSH
13750: CALL_OW 128
13754: GO 13711
13756: POP
13757: POP
// end else
13758: GO 13813
// if lab then
13760: LD_VAR 0 4
13764: IFFALSE 13813
// begin for i in sci do
13766: LD_ADDR_VAR 0 1
13770: PUSH
13771: LD_VAR 0 9
13775: PUSH
13776: FOR_IN
13777: IFFALSE 13811
// if not IsInUnit ( i ) then
13779: LD_VAR 0 1
13783: PPUSH
13784: CALL_OW 310
13788: NOT
13789: IFFALSE 13809
// ComEnterUnit ( i , lab [ 1 ] ) ;
13791: LD_VAR 0 1
13795: PPUSH
13796: LD_VAR 0 4
13800: PUSH
13801: LD_INT 1
13803: ARRAY
13804: PPUSH
13805: CALL_OW 120
13809: GO 13776
13811: POP
13812: POP
// end ; end ; eng := UnitFilter ( ruForces , [ f_class , 2 ] ) ;
13813: LD_ADDR_VAR 0 5
13817: PUSH
13818: LD_EXP 58
13822: PPUSH
13823: LD_INT 25
13825: PUSH
13826: LD_INT 2
13828: PUSH
13829: EMPTY
13830: LIST
13831: LIST
13832: PPUSH
13833: CALL_OW 72
13837: ST_TO_ADDR
// if eng then
13838: LD_VAR 0 5
13842: IFFALSE 14561
// begin for i in eng do
13844: LD_ADDR_VAR 0 1
13848: PUSH
13849: LD_VAR 0 5
13853: PUSH
13854: FOR_IN
13855: IFFALSE 14559
// begin tag := GetTag ( i ) ;
13857: LD_ADDR_VAR 0 6
13861: PUSH
13862: LD_VAR 0 1
13866: PPUSH
13867: CALL_OW 110
13871: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
13872: LD_VAR 0 1
13876: PPUSH
13877: CALL_OW 256
13881: PUSH
13882: LD_INT 800
13884: LESS
13885: PUSH
13886: LD_VAR 0 6
13890: PUSH
13891: LD_INT 1
13893: NONEQUAL
13894: AND
13895: IFFALSE 13945
// begin SetTag ( i , tHeal ) ;
13897: LD_VAR 0 1
13901: PPUSH
13902: LD_INT 1
13904: PPUSH
13905: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
13909: LD_VAR 0 1
13913: PPUSH
13914: LD_EXP 73
13918: PUSH
13919: LD_INT 1
13921: ARRAY
13922: PPUSH
13923: LD_EXP 73
13927: PUSH
13928: LD_INT 2
13930: ARRAY
13931: PPUSH
13932: CALL_OW 111
// AddComHold ( i ) ;
13936: LD_VAR 0 1
13940: PPUSH
13941: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
13945: LD_VAR 0 6
13949: PUSH
13950: LD_INT 1
13952: EQUAL
13953: PUSH
13954: LD_VAR 0 1
13958: PPUSH
13959: CALL_OW 256
13963: PUSH
13964: LD_INT 1000
13966: EQUAL
13967: AND
13968: IFFALSE 13982
// SetTag ( i , 0 ) ;
13970: LD_VAR 0 1
13974: PPUSH
13975: LD_INT 0
13977: PPUSH
13978: CALL_OW 109
// if not tag then
13982: LD_VAR 0 6
13986: NOT
13987: IFFALSE 14159
// begin undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
13989: LD_ADDR_VAR 0 3
13993: PUSH
13994: LD_EXP 65
13998: PPUSH
13999: LD_INT 57
14001: PUSH
14002: EMPTY
14003: LIST
14004: PPUSH
14005: CALL_OW 70
14009: ST_TO_ADDR
// if undone then
14010: LD_VAR 0 3
14014: IFFALSE 14036
// begin ComComplete ( i , undone [ 1 ] ) ;
14016: LD_VAR 0 1
14020: PPUSH
14021: LD_VAR 0 3
14025: PUSH
14026: LD_INT 1
14028: ARRAY
14029: PPUSH
14030: CALL 59167 0 2
// continue ;
14034: GO 13854
// end ; if cr or tmp or Count ( ruBuildings ) then
14036: LD_VAR 0 8
14040: PUSH
14041: LD_VAR 0 2
14045: OR
14046: PUSH
14047: LD_EXP 75
14051: PPUSH
14052: CALL 53437 0 1
14056: OR
14057: IFFALSE 14133
// begin if IsInUnit ( i ) then
14059: LD_VAR 0 1
14063: PPUSH
14064: CALL_OW 310
14068: IFFALSE 14079
// ComExitBuilding ( i ) ;
14070: LD_VAR 0 1
14074: PPUSH
14075: CALL_OW 122
// if tmp then
14079: LD_VAR 0 2
14083: IFFALSE 14099
// SetTag ( i , tRepair ) else
14085: LD_VAR 0 1
14089: PPUSH
14090: LD_INT 3
14092: PPUSH
14093: CALL_OW 109
14097: GO 14131
// if cr then
14099: LD_VAR 0 8
14103: IFFALSE 14119
// SetTag ( i , tCrates ) else
14105: LD_VAR 0 1
14109: PPUSH
14110: LD_INT 2
14112: PPUSH
14113: CALL_OW 109
14117: GO 14131
// SetTag ( i , tBuild ) ;
14119: LD_VAR 0 1
14123: PPUSH
14124: LD_INT 5
14126: PPUSH
14127: CALL_OW 109
// end else
14131: GO 14159
// if not IsInUnit ( i ) then
14133: LD_VAR 0 1
14137: PPUSH
14138: CALL_OW 310
14142: NOT
14143: IFFALSE 14159
// ComEnterUnit ( i , ruBase ) ;
14145: LD_VAR 0 1
14149: PPUSH
14150: LD_EXP 67
14154: PPUSH
14155: CALL_OW 120
// end ; if tag = tRepair then
14159: LD_VAR 0 6
14163: PUSH
14164: LD_INT 3
14166: EQUAL
14167: IFFALSE 14251
// begin if not tmp then
14169: LD_VAR 0 2
14173: NOT
14174: IFFALSE 14190
// begin SetTag ( i , 0 ) ;
14176: LD_VAR 0 1
14180: PPUSH
14181: LD_INT 0
14183: PPUSH
14184: CALL_OW 109
// continue ;
14188: GO 13854
// end ; if not HasTask ( i ) then
14190: LD_VAR 0 1
14194: PPUSH
14195: CALL_OW 314
14199: NOT
14200: IFFALSE 14220
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
14202: LD_VAR 0 1
14206: PPUSH
14207: LD_VAR 0 2
14211: PUSH
14212: LD_INT 1
14214: ARRAY
14215: PPUSH
14216: CALL_OW 130
// if not IsInArea ( i , ruBaseArea ) then
14220: LD_VAR 0 1
14224: PPUSH
14225: LD_EXP 65
14229: PPUSH
14230: CALL_OW 308
14234: NOT
14235: IFFALSE 14251
// ComMoveToArea ( i , ruBaseArea ) ;
14237: LD_VAR 0 1
14241: PPUSH
14242: LD_EXP 65
14246: PPUSH
14247: CALL_OW 113
// end ; if tag = tBuild then
14251: LD_VAR 0 6
14255: PUSH
14256: LD_INT 5
14258: EQUAL
14259: IFFALSE 14436
// begin if not Count ( ruBuildings ) then
14261: LD_EXP 75
14265: PPUSH
14266: CALL 53437 0 1
14270: NOT
14271: IFFALSE 14289
// begin SetTag ( i , 0 ) ;
14273: LD_VAR 0 1
14277: PPUSH
14278: LD_INT 0
14280: PPUSH
14281: CALL_OW 109
// continue ;
14285: GO 13854
// end else
14287: GO 14328
// if not CanBeBuiltOnlyResources ( ruBase , ruBuildings [ 1 ] [ 1 ] ) then
14289: LD_EXP 67
14293: PPUSH
14294: LD_EXP 75
14298: PUSH
14299: LD_INT 1
14301: ARRAY
14302: PUSH
14303: LD_INT 1
14305: ARRAY
14306: PPUSH
14307: CALL 22845 0 2
14311: NOT
14312: IFFALSE 14328
// begin SetTag ( i , 0 ) ;
14314: LD_VAR 0 1
14318: PPUSH
14319: LD_INT 0
14321: PPUSH
14322: CALL_OW 109
// continue ;
14326: GO 13854
// end ; undone := FilterUnitsInArea ( ruBaseArea , [ f_constructed ] ) ;
14328: LD_ADDR_VAR 0 3
14332: PUSH
14333: LD_EXP 65
14337: PPUSH
14338: LD_INT 57
14340: PUSH
14341: EMPTY
14342: LIST
14343: PPUSH
14344: CALL_OW 70
14348: ST_TO_ADDR
// if undone then
14349: LD_VAR 0 3
14353: IFFALSE 14375
// begin ComComplete ( i , undone [ 1 ] ) ;
14355: LD_VAR 0 1
14359: PPUSH
14360: LD_VAR 0 3
14364: PUSH
14365: LD_INT 1
14367: ARRAY
14368: PPUSH
14369: CALL 59167 0 2
// continue ;
14373: GO 13854
// end ; ComBuild ( i , ruBuildings [ 1 ] [ 1 ] , ruBuildings [ 1 ] [ 2 ] , ruBuildings [ 1 ] [ 3 ] , ruBuildings [ 1 ] [ 4 ] ) ;
14375: LD_VAR 0 1
14379: PPUSH
14380: LD_EXP 75
14384: PUSH
14385: LD_INT 1
14387: ARRAY
14388: PUSH
14389: LD_INT 1
14391: ARRAY
14392: PPUSH
14393: LD_EXP 75
14397: PUSH
14398: LD_INT 1
14400: ARRAY
14401: PUSH
14402: LD_INT 2
14404: ARRAY
14405: PPUSH
14406: LD_EXP 75
14410: PUSH
14411: LD_INT 1
14413: ARRAY
14414: PUSH
14415: LD_INT 3
14417: ARRAY
14418: PPUSH
14419: LD_EXP 75
14423: PUSH
14424: LD_INT 1
14426: ARRAY
14427: PUSH
14428: LD_INT 4
14430: ARRAY
14431: PPUSH
14432: CALL_OW 145
// end ; if tag = tCrates then
14436: LD_VAR 0 6
14440: PUSH
14441: LD_INT 2
14443: EQUAL
14444: IFFALSE 14557
// begin if not cr then
14446: LD_VAR 0 8
14450: NOT
14451: IFFALSE 14467
// begin SetTag ( i , 0 ) ;
14453: LD_VAR 0 1
14457: PPUSH
14458: LD_INT 0
14460: PPUSH
14461: CALL_OW 109
// continue ;
14465: GO 13854
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
14467: LD_VAR 0 1
14471: PPUSH
14472: CALL_OW 314
14476: NOT
14477: PUSH
14478: LD_INT 81
14480: PUSH
14481: LD_INT 3
14483: PUSH
14484: EMPTY
14485: LIST
14486: LIST
14487: PUSH
14488: LD_INT 92
14490: PUSH
14491: LD_VAR 0 8
14495: PUSH
14496: LD_INT 1
14498: ARRAY
14499: PUSH
14500: LD_VAR 0 8
14504: PUSH
14505: LD_INT 2
14507: ARRAY
14508: PUSH
14509: LD_INT 12
14511: PUSH
14512: EMPTY
14513: LIST
14514: LIST
14515: LIST
14516: LIST
14517: PUSH
14518: EMPTY
14519: LIST
14520: LIST
14521: PPUSH
14522: CALL_OW 69
14526: NOT
14527: AND
14528: IFFALSE 14557
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
14530: LD_VAR 0 1
14534: PPUSH
14535: LD_VAR 0 8
14539: PUSH
14540: LD_INT 1
14542: ARRAY
14543: PPUSH
14544: LD_VAR 0 8
14548: PUSH
14549: LD_INT 2
14551: ARRAY
14552: PPUSH
14553: CALL_OW 117
// end ; end ;
14557: GO 13854
14559: POP
14560: POP
// end ; sol := UnitFilter ( ruForces , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander ;
14561: LD_ADDR_VAR 0 10
14565: PUSH
14566: LD_EXP 58
14570: PPUSH
14571: LD_INT 2
14573: PUSH
14574: LD_INT 25
14576: PUSH
14577: LD_INT 1
14579: PUSH
14580: EMPTY
14581: LIST
14582: LIST
14583: PUSH
14584: LD_INT 25
14586: PUSH
14587: LD_INT 9
14589: PUSH
14590: EMPTY
14591: LIST
14592: LIST
14593: PUSH
14594: EMPTY
14595: LIST
14596: LIST
14597: LIST
14598: PUSH
14599: LD_INT 50
14601: PUSH
14602: EMPTY
14603: LIST
14604: PUSH
14605: EMPTY
14606: LIST
14607: LIST
14608: PPUSH
14609: CALL_OW 72
14613: PUSH
14614: LD_EXP 60
14618: UNION
14619: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
14620: LD_ADDR_VAR 0 12
14624: PUSH
14625: LD_EXP 65
14629: PPUSH
14630: LD_INT 81
14632: PUSH
14633: LD_INT 3
14635: PUSH
14636: EMPTY
14637: LIST
14638: LIST
14639: PPUSH
14640: CALL_OW 70
14644: ST_TO_ADDR
// if sol then
14645: LD_VAR 0 10
14649: IFFALSE 15173
// begin if enemyInBase then
14651: LD_VAR 0 12
14655: IFFALSE 14798
// begin for i in sol do
14657: LD_ADDR_VAR 0 1
14661: PUSH
14662: LD_VAR 0 10
14666: PUSH
14667: FOR_IN
14668: IFFALSE 14794
// begin tw := IsInUnit ( i ) ;
14670: LD_ADDR_VAR 0 7
14674: PUSH
14675: LD_VAR 0 1
14679: PPUSH
14680: CALL_OW 310
14684: ST_TO_ADDR
// if tw then
14685: LD_VAR 0 7
14689: IFFALSE 14768
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
14691: LD_VAR 0 7
14695: PUSH
14696: LD_INT 22
14698: PUSH
14699: LD_INT 3
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: PUSH
14706: LD_INT 101
14708: PUSH
14709: LD_INT 1
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: PUSH
14716: LD_INT 2
14718: PUSH
14719: LD_INT 30
14721: PUSH
14722: LD_INT 32
14724: PUSH
14725: EMPTY
14726: LIST
14727: LIST
14728: PUSH
14729: LD_INT 30
14731: PUSH
14732: LD_INT 31
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: PUSH
14739: EMPTY
14740: LIST
14741: LIST
14742: LIST
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: LIST
14748: PPUSH
14749: CALL_OW 69
14753: IN
14754: NOT
14755: IFFALSE 14766
// ComExitBuilding ( i ) ;
14757: LD_VAR 0 1
14761: PPUSH
14762: CALL_OW 122
// end else
14766: GO 14792
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
14768: LD_VAR 0 1
14772: PPUSH
14773: LD_VAR 0 12
14777: PPUSH
14778: LD_VAR 0 1
14782: PPUSH
14783: CALL_OW 74
14787: PPUSH
14788: CALL_OW 115
// end ;
14792: GO 14667
14794: POP
14795: POP
// end else
14796: GO 15173
// begin empty := FilterUnitsInArea ( ruBaseArea , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
14798: LD_ADDR_VAR 0 13
14802: PUSH
14803: LD_EXP 65
14807: PPUSH
14808: LD_INT 3
14810: PUSH
14811: LD_INT 62
14813: PUSH
14814: EMPTY
14815: LIST
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PUSH
14821: LD_INT 2
14823: PUSH
14824: LD_INT 30
14826: PUSH
14827: LD_INT 32
14829: PUSH
14830: EMPTY
14831: LIST
14832: LIST
14833: PUSH
14834: LD_INT 30
14836: PUSH
14837: LD_INT 4
14839: PUSH
14840: EMPTY
14841: LIST
14842: LIST
14843: PUSH
14844: LD_INT 30
14846: PUSH
14847: LD_INT 5
14849: PUSH
14850: EMPTY
14851: LIST
14852: LIST
14853: PUSH
14854: LD_INT 30
14856: PUSH
14857: LD_INT 31
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: PUSH
14864: EMPTY
14865: LIST
14866: LIST
14867: LIST
14868: LIST
14869: LIST
14870: PUSH
14871: EMPTY
14872: LIST
14873: LIST
14874: PPUSH
14875: CALL_OW 70
14879: ST_TO_ADDR
// if empty then
14880: LD_VAR 0 13
14884: IFFALSE 14901
// empty := ReverseArray ( empty ) ;
14886: LD_ADDR_VAR 0 13
14890: PUSH
14891: LD_VAR 0 13
14895: PPUSH
14896: CALL 83945 0 1
14900: ST_TO_ADDR
// for i in sol do
14901: LD_ADDR_VAR 0 1
14905: PUSH
14906: LD_VAR 0 10
14910: PUSH
14911: FOR_IN
14912: IFFALSE 15171
// begin tag := GetTag ( i ) ;
14914: LD_ADDR_VAR 0 6
14918: PUSH
14919: LD_VAR 0 1
14923: PPUSH
14924: CALL_OW 110
14928: ST_TO_ADDR
// if tag = tMech then
14929: LD_VAR 0 6
14933: PUSH
14934: LD_INT 7
14936: EQUAL
14937: IFFALSE 14941
// continue ;
14939: GO 14911
// if GetLives ( i ) < 1000 and tag <> tHeal then
14941: LD_VAR 0 1
14945: PPUSH
14946: CALL_OW 256
14950: PUSH
14951: LD_INT 1000
14953: LESS
14954: PUSH
14955: LD_VAR 0 6
14959: PUSH
14960: LD_INT 1
14962: NONEQUAL
14963: AND
14964: IFFALSE 15016
// begin SetTag ( i , tHeal ) ;
14966: LD_VAR 0 1
14970: PPUSH
14971: LD_INT 1
14973: PPUSH
14974: CALL_OW 109
// ComMoveXY ( i , ruHealPoint [ 1 ] , ruHealPoint [ 2 ] ) ;
14978: LD_VAR 0 1
14982: PPUSH
14983: LD_EXP 73
14987: PUSH
14988: LD_INT 1
14990: ARRAY
14991: PPUSH
14992: LD_EXP 73
14996: PUSH
14997: LD_INT 2
14999: ARRAY
15000: PPUSH
15001: CALL_OW 111
// AddComHold ( i ) ;
15005: LD_VAR 0 1
15009: PPUSH
15010: CALL_OW 200
// continue ;
15014: GO 14911
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
15016: LD_VAR 0 1
15020: PPUSH
15021: CALL_OW 256
15025: PUSH
15026: LD_INT 1000
15028: EQUAL
15029: PUSH
15030: LD_VAR 0 6
15034: PUSH
15035: LD_INT 1
15037: EQUAL
15038: AND
15039: IFFALSE 15055
// begin SetTag ( i , 0 ) ;
15041: LD_VAR 0 1
15045: PPUSH
15046: LD_INT 0
15048: PPUSH
15049: CALL_OW 109
// continue ;
15053: GO 14911
// end ; if HasTask ( i ) then
15055: LD_VAR 0 1
15059: PPUSH
15060: CALL_OW 314
15064: IFFALSE 15068
// continue ;
15066: GO 14911
// if not IsInUnit ( i ) and not tag and empty then
15068: LD_VAR 0 1
15072: PPUSH
15073: CALL_OW 310
15077: NOT
15078: PUSH
15079: LD_VAR 0 6
15083: NOT
15084: AND
15085: PUSH
15086: LD_VAR 0 13
15090: AND
15091: IFFALSE 15169
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
15093: LD_VAR 0 1
15097: PPUSH
15098: LD_VAR 0 13
15102: PUSH
15103: LD_INT 1
15105: ARRAY
15106: PPUSH
15107: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
15111: LD_VAR 0 13
15115: PUSH
15116: LD_INT 1
15118: ARRAY
15119: PPUSH
15120: CALL_OW 266
15124: PUSH
15125: LD_INT 5
15127: EQUAL
15128: PUSH
15129: LD_INT 50
15131: PPUSH
15132: CALL_OW 13
15136: AND
15137: IFFALSE 15151
// AddComChangeProfession ( i , class_bazooker ) ;
15139: LD_VAR 0 1
15143: PPUSH
15144: LD_INT 9
15146: PPUSH
15147: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
15151: LD_ADDR_VAR 0 13
15155: PUSH
15156: LD_VAR 0 13
15160: PPUSH
15161: LD_INT 1
15163: PPUSH
15164: CALL_OW 3
15168: ST_TO_ADDR
// end ; end ;
15169: GO 14911
15171: POP
15172: POP
// end ; end ; end ;
15173: PPOPN 16
15175: END
// every 0 0$2 trigger ruScriptActive2 and Count ( ruForces2 ) do var i , tmp , undone , lab , eng , tag , tw , cr , sci , sol , hurtUnits , enemyInBase , empty , fac , emptyTowers , weapon ;
15176: LD_EXP 15
15180: PUSH
15181: LD_EXP 59
15185: PPUSH
15186: CALL 53437 0 1
15190: AND
15191: IFFALSE 17566
15193: GO 15195
15195: DISABLE
15196: LD_INT 0
15198: PPUSH
15199: PPUSH
15200: PPUSH
15201: PPUSH
15202: PPUSH
15203: PPUSH
15204: PPUSH
15205: PPUSH
15206: PPUSH
15207: PPUSH
15208: PPUSH
15209: PPUSH
15210: PPUSH
15211: PPUSH
15212: PPUSH
15213: PPUSH
// begin enable ;
15214: ENABLE
// if ruTech then
15215: LD_EXP 64
15219: IFFALSE 15373
// begin lab := FilterAllUnits ( [ [ f_side , 3 ] , [ f_ok ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ;
15221: LD_ADDR_VAR 0 4
15225: PUSH
15226: LD_INT 22
15228: PUSH
15229: LD_INT 3
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: PUSH
15236: LD_INT 50
15238: PUSH
15239: EMPTY
15240: LIST
15241: PUSH
15242: LD_INT 2
15244: PUSH
15245: LD_INT 30
15247: PUSH
15248: LD_INT 6
15250: PUSH
15251: EMPTY
15252: LIST
15253: LIST
15254: PUSH
15255: LD_INT 30
15257: PUSH
15258: LD_INT 7
15260: PUSH
15261: EMPTY
15262: LIST
15263: LIST
15264: PUSH
15265: LD_INT 30
15267: PUSH
15268: LD_INT 8
15270: PUSH
15271: EMPTY
15272: LIST
15273: LIST
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: PUSH
15281: EMPTY
15282: LIST
15283: LIST
15284: LIST
15285: PPUSH
15286: CALL_OW 69
15290: ST_TO_ADDR
// if lab then
15291: LD_VAR 0 4
15295: IFFALSE 15373
// begin if BuildingStatus ( lab [ 1 ] ) = bs_idle then
15297: LD_VAR 0 4
15301: PUSH
15302: LD_INT 1
15304: ARRAY
15305: PPUSH
15306: CALL_OW 461
15310: PUSH
15311: LD_INT 2
15313: EQUAL
15314: IFFALSE 15373
// begin for i in ruTech do
15316: LD_ADDR_VAR 0 1
15320: PUSH
15321: LD_EXP 64
15325: PUSH
15326: FOR_IN
15327: IFFALSE 15371
// if CanBeResearched ( lab [ 1 ] , i ) then
15329: LD_VAR 0 4
15333: PUSH
15334: LD_INT 1
15336: ARRAY
15337: PPUSH
15338: LD_VAR 0 1
15342: PPUSH
15343: CALL_OW 430
15347: IFFALSE 15369
// begin ComResearch ( lab [ 1 ] , i ) ;
15349: LD_VAR 0 4
15353: PUSH
15354: LD_INT 1
15356: ARRAY
15357: PPUSH
15358: LD_VAR 0 1
15362: PPUSH
15363: CALL_OW 124
// break ;
15367: GO 15371
// end ;
15369: GO 15326
15371: POP
15372: POP
// end ; end ; end ; fac := FilterUnitsInArea ( ruBaseArea2 , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
15373: LD_ADDR_VAR 0 14
15377: PUSH
15378: LD_EXP 66
15382: PPUSH
15383: LD_INT 22
15385: PUSH
15386: LD_INT 3
15388: PUSH
15389: EMPTY
15390: LIST
15391: LIST
15392: PUSH
15393: LD_INT 30
15395: PUSH
15396: LD_INT 3
15398: PUSH
15399: EMPTY
15400: LIST
15401: LIST
15402: PUSH
15403: LD_INT 50
15405: PUSH
15406: EMPTY
15407: LIST
15408: PUSH
15409: EMPTY
15410: LIST
15411: LIST
15412: LIST
15413: PPUSH
15414: CALL_OW 70
15418: ST_TO_ADDR
// if fac then
15419: LD_VAR 0 14
15423: IFFALSE 15877
// begin if UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) then
15425: LD_EXP 63
15429: PPUSH
15430: LD_INT 3
15432: PUSH
15433: LD_INT 60
15435: PUSH
15436: EMPTY
15437: LIST
15438: PUSH
15439: EMPTY
15440: LIST
15441: LIST
15442: PUSH
15443: LD_INT 3
15445: PUSH
15446: LD_INT 25
15448: PUSH
15449: LD_INT 3
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PPUSH
15464: CALL_OW 72
15468: IFFALSE 15609
// begin for i in UnitFilter ( ruMech2 , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_class , class_mechanic ] ] ] ) do
15470: LD_ADDR_VAR 0 1
15474: PUSH
15475: LD_EXP 63
15479: PPUSH
15480: LD_INT 3
15482: PUSH
15483: LD_INT 60
15485: PUSH
15486: EMPTY
15487: LIST
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: PUSH
15493: LD_INT 3
15495: PUSH
15496: LD_INT 25
15498: PUSH
15499: LD_INT 3
15501: PUSH
15502: EMPTY
15503: LIST
15504: LIST
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PPUSH
15514: CALL_OW 72
15518: PUSH
15519: FOR_IN
15520: IFFALSE 15607
// begin SetTag ( i , tMech ) ;
15522: LD_VAR 0 1
15526: PPUSH
15527: LD_INT 7
15529: PPUSH
15530: CALL_OW 109
// if IsInUnit ( i ) and IsInUnit ( i ) <> fac [ 1 ] then
15534: LD_VAR 0 1
15538: PPUSH
15539: CALL_OW 310
15543: PUSH
15544: LD_VAR 0 1
15548: PPUSH
15549: CALL_OW 310
15553: PUSH
15554: LD_VAR 0 14
15558: PUSH
15559: LD_INT 1
15561: ARRAY
15562: NONEQUAL
15563: AND
15564: IFFALSE 15575
// ComExitBuilding ( i ) ;
15566: LD_VAR 0 1
15570: PPUSH
15571: CALL_OW 122
// AddComEnterUnit ( i , fac [ 1 ] ) ;
15575: LD_VAR 0 1
15579: PPUSH
15580: LD_VAR 0 14
15584: PUSH
15585: LD_INT 1
15587: ARRAY
15588: PPUSH
15589: CALL_OW 180
// AddComChangeProfession ( i , class_mechanic ) ;
15593: LD_VAR 0 1
15597: PPUSH
15598: LD_INT 3
15600: PPUSH
15601: CALL_OW 183
// end ;
15605: GO 15519
15607: POP
15608: POP
// end ; if BuildingStatus ( fac [ 1 ] ) = bs_idle then
15609: LD_VAR 0 14
15613: PUSH
15614: LD_INT 1
15616: ARRAY
15617: PPUSH
15618: CALL_OW 461
15622: PUSH
15623: LD_INT 2
15625: EQUAL
15626: IFFALSE 15877
// begin emptyTowers := FilterUnitsInArea ( ruBaseArea2 , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_bweapon , 0 ] ] ) ;
15628: LD_ADDR_VAR 0 15
15632: PUSH
15633: LD_EXP 66
15637: PPUSH
15638: LD_INT 2
15640: PUSH
15641: LD_INT 30
15643: PUSH
15644: LD_INT 32
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 30
15653: PUSH
15654: LD_INT 33
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: LIST
15665: PUSH
15666: LD_INT 35
15668: PUSH
15669: LD_INT 0
15671: PUSH
15672: EMPTY
15673: LIST
15674: LIST
15675: PUSH
15676: EMPTY
15677: LIST
15678: LIST
15679: PPUSH
15680: CALL_OW 70
15684: ST_TO_ADDR
// if emptyTowers then
15685: LD_VAR 0 15
15689: IFFALSE 15739
// begin weapon := GetTurretWeapon ( emptyTowers [ 1 ] , ruBaseArea2 ) ;
15691: LD_ADDR_VAR 0 16
15695: PUSH
15696: LD_VAR 0 15
15700: PUSH
15701: LD_INT 1
15703: ARRAY
15704: PPUSH
15705: LD_EXP 66
15709: PPUSH
15710: CALL 61314 0 2
15714: ST_TO_ADDR
// if weapon then
15715: LD_VAR 0 16
15719: IFFALSE 15739
// ComPlaceWeapon ( emptyTowers [ 1 ] , weapon ) ;
15721: LD_VAR 0 15
15725: PUSH
15726: LD_INT 1
15728: ARRAY
15729: PPUSH
15730: LD_VAR 0 16
15734: PPUSH
15735: CALL_OW 148
// end ; if ruConstructList2 then
15739: LD_EXP 70
15743: IFFALSE 15877
// if CanBeConstructed ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) then
15745: LD_VAR 0 14
15749: PUSH
15750: LD_INT 1
15752: ARRAY
15753: PPUSH
15754: LD_EXP 70
15758: PUSH
15759: LD_INT 1
15761: ARRAY
15762: PUSH
15763: LD_INT 1
15765: ARRAY
15766: PPUSH
15767: LD_EXP 70
15771: PUSH
15772: LD_INT 1
15774: ARRAY
15775: PUSH
15776: LD_INT 2
15778: ARRAY
15779: PPUSH
15780: LD_EXP 70
15784: PUSH
15785: LD_INT 1
15787: ARRAY
15788: PUSH
15789: LD_INT 3
15791: ARRAY
15792: PPUSH
15793: LD_EXP 70
15797: PUSH
15798: LD_INT 1
15800: ARRAY
15801: PUSH
15802: LD_INT 4
15804: ARRAY
15805: PPUSH
15806: CALL_OW 448
15810: IFFALSE 15877
// ComConstruct ( fac [ 1 ] , ruConstructList2 [ 1 ] [ 1 ] , ruConstructList2 [ 1 ] [ 2 ] , ruConstructList2 [ 1 ] [ 3 ] , ruConstructList2 [ 1 ] [ 4 ] ) ;
15812: LD_VAR 0 14
15816: PUSH
15817: LD_INT 1
15819: ARRAY
15820: PPUSH
15821: LD_EXP 70
15825: PUSH
15826: LD_INT 1
15828: ARRAY
15829: PUSH
15830: LD_INT 1
15832: ARRAY
15833: PPUSH
15834: LD_EXP 70
15838: PUSH
15839: LD_INT 1
15841: ARRAY
15842: PUSH
15843: LD_INT 2
15845: ARRAY
15846: PPUSH
15847: LD_EXP 70
15851: PUSH
15852: LD_INT 1
15854: ARRAY
15855: PUSH
15856: LD_INT 3
15858: ARRAY
15859: PPUSH
15860: LD_EXP 70
15864: PUSH
15865: LD_INT 1
15867: ARRAY
15868: PUSH
15869: LD_INT 4
15871: ARRAY
15872: PPUSH
15873: CALL_OW 125
// end ; end ; tmp := FilterUnitsInArea ( ruBaseArea2 , [ [ f_type , unit_building ] , [ f_not , [ f_constructed ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
15877: LD_ADDR_VAR 0 2
15881: PUSH
15882: LD_EXP 66
15886: PPUSH
15887: LD_INT 21
15889: PUSH
15890: LD_INT 3
15892: PUSH
15893: EMPTY
15894: LIST
15895: LIST
15896: PUSH
15897: LD_INT 3
15899: PUSH
15900: LD_INT 57
15902: PUSH
15903: EMPTY
15904: LIST
15905: PUSH
15906: EMPTY
15907: LIST
15908: LIST
15909: PUSH
15910: LD_INT 3
15912: PUSH
15913: LD_INT 24
15915: PUSH
15916: LD_INT 1000
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: EMPTY
15924: LIST
15925: LIST
15926: PUSH
15927: EMPTY
15928: LIST
15929: LIST
15930: LIST
15931: PPUSH
15932: CALL_OW 70
15936: ST_TO_ADDR
// cr := GetListOfCratesInArea ( ruCratesArea2 ) ;
15937: LD_ADDR_VAR 0 8
15941: PUSH
15942: LD_EXP 72
15946: PPUSH
15947: CALL_OW 435
15951: ST_TO_ADDR
// sci := UnitFilter ( ruForces2 , [ [ f_class , 4 ] , [ f_ok ] ] ) ;
15952: LD_ADDR_VAR 0 9
15956: PUSH
15957: LD_EXP 59
15961: PPUSH
15962: LD_INT 25
15964: PUSH
15965: LD_INT 4
15967: PUSH
15968: EMPTY
15969: LIST
15970: LIST
15971: PUSH
15972: LD_INT 50
15974: PUSH
15975: EMPTY
15976: LIST
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PPUSH
15982: CALL_OW 72
15986: ST_TO_ADDR
// lab := FilterUnitsInArea ( ruBaseArea2 , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ;
15987: LD_ADDR_VAR 0 4
15991: PUSH
15992: LD_EXP 66
15996: PPUSH
15997: LD_INT 2
15999: PUSH
16000: LD_INT 30
16002: PUSH
16003: LD_INT 6
16005: PUSH
16006: EMPTY
16007: LIST
16008: LIST
16009: PUSH
16010: LD_INT 30
16012: PUSH
16013: LD_INT 7
16015: PUSH
16016: EMPTY
16017: LIST
16018: LIST
16019: PUSH
16020: LD_INT 30
16022: PUSH
16023: LD_INT 8
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: PUSH
16030: EMPTY
16031: LIST
16032: LIST
16033: LIST
16034: LIST
16035: PPUSH
16036: CALL_OW 70
16040: ST_TO_ADDR
// if sci then
16041: LD_VAR 0 9
16045: IFFALSE 16206
// begin hurtUnits := UnitFilter ( ruForces2 , [ [ f_inarea , ruBaseArea2 ] , [ f_tag , tHeal ] ] ) ;
16047: LD_ADDR_VAR 0 11
16051: PUSH
16052: LD_EXP 59
16056: PPUSH
16057: LD_INT 95
16059: PUSH
16060: LD_EXP 66
16064: PUSH
16065: EMPTY
16066: LIST
16067: LIST
16068: PUSH
16069: LD_INT 120
16071: PUSH
16072: LD_INT 1
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PUSH
16079: EMPTY
16080: LIST
16081: LIST
16082: PPUSH
16083: CALL_OW 72
16087: ST_TO_ADDR
// if hurtUnits then
16088: LD_VAR 0 11
16092: IFFALSE 16153
// begin for i in sci do
16094: LD_ADDR_VAR 0 1
16098: PUSH
16099: LD_VAR 0 9
16103: PUSH
16104: FOR_IN
16105: IFFALSE 16149
// if IsInUnit ( i ) then
16107: LD_VAR 0 1
16111: PPUSH
16112: CALL_OW 310
16116: IFFALSE 16129
// ComExitBuilding ( i ) else
16118: LD_VAR 0 1
16122: PPUSH
16123: CALL_OW 122
16127: GO 16147
// ComHeal ( i , hurtUnits [ 1 ] ) ;
16129: LD_VAR 0 1
16133: PPUSH
16134: LD_VAR 0 11
16138: PUSH
16139: LD_INT 1
16141: ARRAY
16142: PPUSH
16143: CALL_OW 128
16147: GO 16104
16149: POP
16150: POP
// end else
16151: GO 16206
// if lab then
16153: LD_VAR 0 4
16157: IFFALSE 16206
// begin for i in sci do
16159: LD_ADDR_VAR 0 1
16163: PUSH
16164: LD_VAR 0 9
16168: PUSH
16169: FOR_IN
16170: IFFALSE 16204
// if not IsInUnit ( i ) then
16172: LD_VAR 0 1
16176: PPUSH
16177: CALL_OW 310
16181: NOT
16182: IFFALSE 16202
// ComEnterUnit ( i , lab [ 1 ] ) ;
16184: LD_VAR 0 1
16188: PPUSH
16189: LD_VAR 0 4
16193: PUSH
16194: LD_INT 1
16196: ARRAY
16197: PPUSH
16198: CALL_OW 120
16202: GO 16169
16204: POP
16205: POP
// end ; end ; eng := UnitFilter ( ruForces2 , [ f_class , 2 ] ) ;
16206: LD_ADDR_VAR 0 5
16210: PUSH
16211: LD_EXP 59
16215: PPUSH
16216: LD_INT 25
16218: PUSH
16219: LD_INT 2
16221: PUSH
16222: EMPTY
16223: LIST
16224: LIST
16225: PPUSH
16226: CALL_OW 72
16230: ST_TO_ADDR
// if eng then
16231: LD_VAR 0 5
16235: IFFALSE 16954
// begin for i in eng do
16237: LD_ADDR_VAR 0 1
16241: PUSH
16242: LD_VAR 0 5
16246: PUSH
16247: FOR_IN
16248: IFFALSE 16952
// begin tag := GetTag ( i ) ;
16250: LD_ADDR_VAR 0 6
16254: PUSH
16255: LD_VAR 0 1
16259: PPUSH
16260: CALL_OW 110
16264: ST_TO_ADDR
// if GetLives ( i ) < 800 and tag <> tHeal then
16265: LD_VAR 0 1
16269: PPUSH
16270: CALL_OW 256
16274: PUSH
16275: LD_INT 800
16277: LESS
16278: PUSH
16279: LD_VAR 0 6
16283: PUSH
16284: LD_INT 1
16286: NONEQUAL
16287: AND
16288: IFFALSE 16338
// begin SetTag ( i , tHeal ) ;
16290: LD_VAR 0 1
16294: PPUSH
16295: LD_INT 1
16297: PPUSH
16298: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
16302: LD_VAR 0 1
16306: PPUSH
16307: LD_EXP 74
16311: PUSH
16312: LD_INT 1
16314: ARRAY
16315: PPUSH
16316: LD_EXP 74
16320: PUSH
16321: LD_INT 2
16323: ARRAY
16324: PPUSH
16325: CALL_OW 111
// AddComHold ( i ) ;
16329: LD_VAR 0 1
16333: PPUSH
16334: CALL_OW 200
// end ; if tag = tHeal and GetLives ( i ) = 1000 then
16338: LD_VAR 0 6
16342: PUSH
16343: LD_INT 1
16345: EQUAL
16346: PUSH
16347: LD_VAR 0 1
16351: PPUSH
16352: CALL_OW 256
16356: PUSH
16357: LD_INT 1000
16359: EQUAL
16360: AND
16361: IFFALSE 16375
// SetTag ( i , 0 ) ;
16363: LD_VAR 0 1
16367: PPUSH
16368: LD_INT 0
16370: PPUSH
16371: CALL_OW 109
// if not tag then
16375: LD_VAR 0 6
16379: NOT
16380: IFFALSE 16552
// begin undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
16382: LD_ADDR_VAR 0 3
16386: PUSH
16387: LD_EXP 66
16391: PPUSH
16392: LD_INT 57
16394: PUSH
16395: EMPTY
16396: LIST
16397: PPUSH
16398: CALL_OW 70
16402: ST_TO_ADDR
// if undone then
16403: LD_VAR 0 3
16407: IFFALSE 16429
// begin ComComplete ( i , undone [ 1 ] ) ;
16409: LD_VAR 0 1
16413: PPUSH
16414: LD_VAR 0 3
16418: PUSH
16419: LD_INT 1
16421: ARRAY
16422: PPUSH
16423: CALL 59167 0 2
// continue ;
16427: GO 16247
// end ; if cr or tmp or Count ( ruBuildings2 ) then
16429: LD_VAR 0 8
16433: PUSH
16434: LD_VAR 0 2
16438: OR
16439: PUSH
16440: LD_EXP 76
16444: PPUSH
16445: CALL 53437 0 1
16449: OR
16450: IFFALSE 16526
// begin if IsInUnit ( i ) then
16452: LD_VAR 0 1
16456: PPUSH
16457: CALL_OW 310
16461: IFFALSE 16472
// ComExitBuilding ( i ) ;
16463: LD_VAR 0 1
16467: PPUSH
16468: CALL_OW 122
// if tmp then
16472: LD_VAR 0 2
16476: IFFALSE 16492
// SetTag ( i , tRepair ) else
16478: LD_VAR 0 1
16482: PPUSH
16483: LD_INT 3
16485: PPUSH
16486: CALL_OW 109
16490: GO 16524
// if cr then
16492: LD_VAR 0 8
16496: IFFALSE 16512
// SetTag ( i , tCrates ) else
16498: LD_VAR 0 1
16502: PPUSH
16503: LD_INT 2
16505: PPUSH
16506: CALL_OW 109
16510: GO 16524
// SetTag ( i , tBuild ) ;
16512: LD_VAR 0 1
16516: PPUSH
16517: LD_INT 5
16519: PPUSH
16520: CALL_OW 109
// end else
16524: GO 16552
// if not IsInUnit ( i ) then
16526: LD_VAR 0 1
16530: PPUSH
16531: CALL_OW 310
16535: NOT
16536: IFFALSE 16552
// ComEnterUnit ( i , ruBase2 ) ;
16538: LD_VAR 0 1
16542: PPUSH
16543: LD_EXP 68
16547: PPUSH
16548: CALL_OW 120
// end ; if tag = tRepair then
16552: LD_VAR 0 6
16556: PUSH
16557: LD_INT 3
16559: EQUAL
16560: IFFALSE 16644
// begin if not tmp then
16562: LD_VAR 0 2
16566: NOT
16567: IFFALSE 16583
// begin SetTag ( i , 0 ) ;
16569: LD_VAR 0 1
16573: PPUSH
16574: LD_INT 0
16576: PPUSH
16577: CALL_OW 109
// continue ;
16581: GO 16247
// end ; if not HasTask ( i ) then
16583: LD_VAR 0 1
16587: PPUSH
16588: CALL_OW 314
16592: NOT
16593: IFFALSE 16613
// ComRepairBuilding ( i , tmp [ 1 ] ) ;
16595: LD_VAR 0 1
16599: PPUSH
16600: LD_VAR 0 2
16604: PUSH
16605: LD_INT 1
16607: ARRAY
16608: PPUSH
16609: CALL_OW 130
// if not IsInArea ( i , ruBaseArea2 ) then
16613: LD_VAR 0 1
16617: PPUSH
16618: LD_EXP 66
16622: PPUSH
16623: CALL_OW 308
16627: NOT
16628: IFFALSE 16644
// ComMoveToArea ( i , ruBaseArea2 ) ;
16630: LD_VAR 0 1
16634: PPUSH
16635: LD_EXP 66
16639: PPUSH
16640: CALL_OW 113
// end ; if tag = tBuild then
16644: LD_VAR 0 6
16648: PUSH
16649: LD_INT 5
16651: EQUAL
16652: IFFALSE 16829
// begin if not Count ( ruBuildings2 ) then
16654: LD_EXP 76
16658: PPUSH
16659: CALL 53437 0 1
16663: NOT
16664: IFFALSE 16682
// begin SetTag ( i , 0 ) ;
16666: LD_VAR 0 1
16670: PPUSH
16671: LD_INT 0
16673: PPUSH
16674: CALL_OW 109
// continue ;
16678: GO 16247
// end else
16680: GO 16721
// if not CanBeBuiltOnlyResources ( ruBase2 , ruBuildings2 [ 1 ] [ 1 ] ) then
16682: LD_EXP 68
16686: PPUSH
16687: LD_EXP 76
16691: PUSH
16692: LD_INT 1
16694: ARRAY
16695: PUSH
16696: LD_INT 1
16698: ARRAY
16699: PPUSH
16700: CALL 22845 0 2
16704: NOT
16705: IFFALSE 16721
// begin SetTag ( i , 0 ) ;
16707: LD_VAR 0 1
16711: PPUSH
16712: LD_INT 0
16714: PPUSH
16715: CALL_OW 109
// continue ;
16719: GO 16247
// end ; undone := FilterUnitsInArea ( ruBaseArea2 , [ f_constructed ] ) ;
16721: LD_ADDR_VAR 0 3
16725: PUSH
16726: LD_EXP 66
16730: PPUSH
16731: LD_INT 57
16733: PUSH
16734: EMPTY
16735: LIST
16736: PPUSH
16737: CALL_OW 70
16741: ST_TO_ADDR
// if undone then
16742: LD_VAR 0 3
16746: IFFALSE 16768
// begin ComComplete ( i , undone [ 1 ] ) ;
16748: LD_VAR 0 1
16752: PPUSH
16753: LD_VAR 0 3
16757: PUSH
16758: LD_INT 1
16760: ARRAY
16761: PPUSH
16762: CALL 59167 0 2
// continue ;
16766: GO 16247
// end ; ComBuild ( i , ruBuildings2 [ 1 ] [ 1 ] , ruBuildings2 [ 1 ] [ 2 ] , ruBuildings2 [ 1 ] [ 3 ] , ruBuildings2 [ 1 ] [ 4 ] ) ;
16768: LD_VAR 0 1
16772: PPUSH
16773: LD_EXP 76
16777: PUSH
16778: LD_INT 1
16780: ARRAY
16781: PUSH
16782: LD_INT 1
16784: ARRAY
16785: PPUSH
16786: LD_EXP 76
16790: PUSH
16791: LD_INT 1
16793: ARRAY
16794: PUSH
16795: LD_INT 2
16797: ARRAY
16798: PPUSH
16799: LD_EXP 76
16803: PUSH
16804: LD_INT 1
16806: ARRAY
16807: PUSH
16808: LD_INT 3
16810: ARRAY
16811: PPUSH
16812: LD_EXP 76
16816: PUSH
16817: LD_INT 1
16819: ARRAY
16820: PUSH
16821: LD_INT 4
16823: ARRAY
16824: PPUSH
16825: CALL_OW 145
// end ; if tag = tCrates then
16829: LD_VAR 0 6
16833: PUSH
16834: LD_INT 2
16836: EQUAL
16837: IFFALSE 16950
// begin if not cr then
16839: LD_VAR 0 8
16843: NOT
16844: IFFALSE 16860
// begin SetTag ( i , 0 ) ;
16846: LD_VAR 0 1
16850: PPUSH
16851: LD_INT 0
16853: PPUSH
16854: CALL_OW 109
// continue ;
16858: GO 16247
// end ; if not HasTask ( i ) and not FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_distxy , cr [ 1 ] , cr [ 2 ] , 12 ] ] ) then
16860: LD_VAR 0 1
16864: PPUSH
16865: CALL_OW 314
16869: NOT
16870: PUSH
16871: LD_INT 81
16873: PUSH
16874: LD_INT 3
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 92
16883: PUSH
16884: LD_VAR 0 8
16888: PUSH
16889: LD_INT 1
16891: ARRAY
16892: PUSH
16893: LD_VAR 0 8
16897: PUSH
16898: LD_INT 2
16900: ARRAY
16901: PUSH
16902: LD_INT 12
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PPUSH
16915: CALL_OW 69
16919: NOT
16920: AND
16921: IFFALSE 16950
// ComCollect ( i , cr [ 1 ] , cr [ 2 ] ) ;
16923: LD_VAR 0 1
16927: PPUSH
16928: LD_VAR 0 8
16932: PUSH
16933: LD_INT 1
16935: ARRAY
16936: PPUSH
16937: LD_VAR 0 8
16941: PUSH
16942: LD_INT 2
16944: ARRAY
16945: PPUSH
16946: CALL_OW 117
// end ; end ;
16950: GO 16247
16952: POP
16953: POP
// end ; sol := UnitFilter ( ruForces2 , [ [ f_or , [ f_class , class_soldier ] , [ f_class , class_bazooker ] ] , [ f_ok ] ] ) union ruCommander2 ;
16954: LD_ADDR_VAR 0 10
16958: PUSH
16959: LD_EXP 59
16963: PPUSH
16964: LD_INT 2
16966: PUSH
16967: LD_INT 25
16969: PUSH
16970: LD_INT 1
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: PUSH
16977: LD_INT 25
16979: PUSH
16980: LD_INT 9
16982: PUSH
16983: EMPTY
16984: LIST
16985: LIST
16986: PUSH
16987: EMPTY
16988: LIST
16989: LIST
16990: LIST
16991: PUSH
16992: LD_INT 50
16994: PUSH
16995: EMPTY
16996: LIST
16997: PUSH
16998: EMPTY
16999: LIST
17000: LIST
17001: PPUSH
17002: CALL_OW 72
17006: PUSH
17007: LD_EXP 61
17011: UNION
17012: ST_TO_ADDR
// enemyInBase := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
17013: LD_ADDR_VAR 0 12
17017: PUSH
17018: LD_EXP 66
17022: PPUSH
17023: LD_INT 81
17025: PUSH
17026: LD_INT 3
17028: PUSH
17029: EMPTY
17030: LIST
17031: LIST
17032: PPUSH
17033: CALL_OW 70
17037: ST_TO_ADDR
// if sol then
17038: LD_VAR 0 10
17042: IFFALSE 17566
// begin if enemyInBase then
17044: LD_VAR 0 12
17048: IFFALSE 17191
// begin for i in sol do
17050: LD_ADDR_VAR 0 1
17054: PUSH
17055: LD_VAR 0 10
17059: PUSH
17060: FOR_IN
17061: IFFALSE 17187
// begin tw := IsInUnit ( i ) ;
17063: LD_ADDR_VAR 0 7
17067: PUSH
17068: LD_VAR 0 1
17072: PPUSH
17073: CALL_OW 310
17077: ST_TO_ADDR
// if tw then
17078: LD_VAR 0 7
17082: IFFALSE 17161
// begin if not tw in FilterAllUnits ( [ [ f_side , 3 ] , [ f_see , 1 ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ] ) then
17084: LD_VAR 0 7
17088: PUSH
17089: LD_INT 22
17091: PUSH
17092: LD_INT 3
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: LD_INT 101
17101: PUSH
17102: LD_INT 1
17104: PUSH
17105: EMPTY
17106: LIST
17107: LIST
17108: PUSH
17109: LD_INT 2
17111: PUSH
17112: LD_INT 30
17114: PUSH
17115: LD_INT 32
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: PUSH
17122: LD_INT 30
17124: PUSH
17125: LD_INT 31
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: LIST
17136: PUSH
17137: EMPTY
17138: LIST
17139: LIST
17140: LIST
17141: PPUSH
17142: CALL_OW 69
17146: IN
17147: NOT
17148: IFFALSE 17159
// ComExitBuilding ( i ) ;
17150: LD_VAR 0 1
17154: PPUSH
17155: CALL_OW 122
// end else
17159: GO 17185
// ComAttackUnit ( i , NearestUnitToUnit ( enemyInBase , i ) ) ;
17161: LD_VAR 0 1
17165: PPUSH
17166: LD_VAR 0 12
17170: PPUSH
17171: LD_VAR 0 1
17175: PPUSH
17176: CALL_OW 74
17180: PPUSH
17181: CALL_OW 115
// end ;
17185: GO 17060
17187: POP
17188: POP
// end else
17189: GO 17566
// begin empty := FilterUnitsInArea ( ruBaseArea2 , [ [ f_not , [ f_full ] ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_breastwork ] ] ] ) ;
17191: LD_ADDR_VAR 0 13
17195: PUSH
17196: LD_EXP 66
17200: PPUSH
17201: LD_INT 3
17203: PUSH
17204: LD_INT 62
17206: PUSH
17207: EMPTY
17208: LIST
17209: PUSH
17210: EMPTY
17211: LIST
17212: LIST
17213: PUSH
17214: LD_INT 2
17216: PUSH
17217: LD_INT 30
17219: PUSH
17220: LD_INT 32
17222: PUSH
17223: EMPTY
17224: LIST
17225: LIST
17226: PUSH
17227: LD_INT 30
17229: PUSH
17230: LD_INT 4
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PUSH
17237: LD_INT 30
17239: PUSH
17240: LD_INT 5
17242: PUSH
17243: EMPTY
17244: LIST
17245: LIST
17246: PUSH
17247: LD_INT 30
17249: PUSH
17250: LD_INT 31
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: LIST
17261: LIST
17262: LIST
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PPUSH
17268: CALL_OW 70
17272: ST_TO_ADDR
// if empty then
17273: LD_VAR 0 13
17277: IFFALSE 17294
// empty := ReverseArray ( empty ) ;
17279: LD_ADDR_VAR 0 13
17283: PUSH
17284: LD_VAR 0 13
17288: PPUSH
17289: CALL 83945 0 1
17293: ST_TO_ADDR
// for i in sol do
17294: LD_ADDR_VAR 0 1
17298: PUSH
17299: LD_VAR 0 10
17303: PUSH
17304: FOR_IN
17305: IFFALSE 17564
// begin tag := GetTag ( i ) ;
17307: LD_ADDR_VAR 0 6
17311: PUSH
17312: LD_VAR 0 1
17316: PPUSH
17317: CALL_OW 110
17321: ST_TO_ADDR
// if tag = tMech then
17322: LD_VAR 0 6
17326: PUSH
17327: LD_INT 7
17329: EQUAL
17330: IFFALSE 17334
// continue ;
17332: GO 17304
// if GetLives ( i ) < 1000 and tag <> tHeal then
17334: LD_VAR 0 1
17338: PPUSH
17339: CALL_OW 256
17343: PUSH
17344: LD_INT 1000
17346: LESS
17347: PUSH
17348: LD_VAR 0 6
17352: PUSH
17353: LD_INT 1
17355: NONEQUAL
17356: AND
17357: IFFALSE 17409
// begin SetTag ( i , tHeal ) ;
17359: LD_VAR 0 1
17363: PPUSH
17364: LD_INT 1
17366: PPUSH
17367: CALL_OW 109
// ComMoveXY ( i , ruHealPoint2 [ 1 ] , ruHealPoint2 [ 2 ] ) ;
17371: LD_VAR 0 1
17375: PPUSH
17376: LD_EXP 74
17380: PUSH
17381: LD_INT 1
17383: ARRAY
17384: PPUSH
17385: LD_EXP 74
17389: PUSH
17390: LD_INT 2
17392: ARRAY
17393: PPUSH
17394: CALL_OW 111
// AddComHold ( i ) ;
17398: LD_VAR 0 1
17402: PPUSH
17403: CALL_OW 200
// continue ;
17407: GO 17304
// end ; if GetLives ( i ) = 1000 and tag = tHeal then
17409: LD_VAR 0 1
17413: PPUSH
17414: CALL_OW 256
17418: PUSH
17419: LD_INT 1000
17421: EQUAL
17422: PUSH
17423: LD_VAR 0 6
17427: PUSH
17428: LD_INT 1
17430: EQUAL
17431: AND
17432: IFFALSE 17448
// begin SetTag ( i , 0 ) ;
17434: LD_VAR 0 1
17438: PPUSH
17439: LD_INT 0
17441: PPUSH
17442: CALL_OW 109
// continue ;
17446: GO 17304
// end ; if HasTask ( i ) then
17448: LD_VAR 0 1
17452: PPUSH
17453: CALL_OW 314
17457: IFFALSE 17461
// continue ;
17459: GO 17304
// if not IsInUnit ( i ) and not tag and empty then
17461: LD_VAR 0 1
17465: PPUSH
17466: CALL_OW 310
17470: NOT
17471: PUSH
17472: LD_VAR 0 6
17476: NOT
17477: AND
17478: PUSH
17479: LD_VAR 0 13
17483: AND
17484: IFFALSE 17562
// begin ComEnterUnit ( i , empty [ 1 ] ) ;
17486: LD_VAR 0 1
17490: PPUSH
17491: LD_VAR 0 13
17495: PUSH
17496: LD_INT 1
17498: ARRAY
17499: PPUSH
17500: CALL_OW 120
// if GetBType ( empty [ 1 ] ) = b_barracks and Prob ( 50 ) then
17504: LD_VAR 0 13
17508: PUSH
17509: LD_INT 1
17511: ARRAY
17512: PPUSH
17513: CALL_OW 266
17517: PUSH
17518: LD_INT 5
17520: EQUAL
17521: PUSH
17522: LD_INT 50
17524: PPUSH
17525: CALL_OW 13
17529: AND
17530: IFFALSE 17544
// AddComChangeProfession ( i , class_bazooker ) ;
17532: LD_VAR 0 1
17536: PPUSH
17537: LD_INT 9
17539: PPUSH
17540: CALL_OW 183
// empty := Delete ( empty , 1 ) ;
17544: LD_ADDR_VAR 0 13
17548: PUSH
17549: LD_VAR 0 13
17553: PPUSH
17554: LD_INT 1
17556: PPUSH
17557: CALL_OW 3
17561: ST_TO_ADDR
// end ; end ;
17562: GO 17304
17564: POP
17565: POP
// end ; end ; end ;
17566: PPOPN 16
17568: END
// every 0 0$1 trigger ruTanks do var i , mech , enemy ;
17569: LD_EXP 77
17573: IFFALSE 18176
17575: GO 17577
17577: DISABLE
17578: LD_INT 0
17580: PPUSH
17581: PPUSH
17582: PPUSH
// begin enable ;
17583: ENABLE
// if not ruTanks then
17584: LD_EXP 77
17588: NOT
17589: IFFALSE 17593
// exit ;
17591: GO 18176
// for i in ruTanks do
17593: LD_ADDR_VAR 0 1
17597: PUSH
17598: LD_EXP 77
17602: PUSH
17603: FOR_IN
17604: IFFALSE 18174
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
17606: LD_VAR 0 1
17610: PPUSH
17611: CALL_OW 302
17615: NOT
17616: PUSH
17617: LD_VAR 0 1
17621: PPUSH
17622: CALL_OW 255
17626: PUSH
17627: LD_INT 3
17629: NONEQUAL
17630: OR
17631: IFFALSE 17651
// begin ruTanks := ruTanks diff i ;
17633: LD_ADDR_EXP 77
17637: PUSH
17638: LD_EXP 77
17642: PUSH
17643: LD_VAR 0 1
17647: DIFF
17648: ST_TO_ADDR
// continue ;
17649: GO 17603
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
17651: LD_VAR 0 1
17655: PPUSH
17656: CALL_OW 110
17660: NOT
17661: PUSH
17662: LD_VAR 0 1
17666: PPUSH
17667: CALL_OW 110
17671: PUSH
17672: LD_INT 0
17674: EQUAL
17675: OR
17676: IFFALSE 17849
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase ) then
17678: LD_VAR 0 1
17682: PPUSH
17683: CALL_OW 262
17687: PUSH
17688: LD_INT 1
17690: EQUAL
17691: PUSH
17692: LD_VAR 0 1
17696: PPUSH
17697: CALL_OW 261
17701: PUSH
17702: LD_INT 50
17704: LESS
17705: AND
17706: PUSH
17707: LD_EXP 67
17711: PPUSH
17712: CALL_OW 302
17716: AND
17717: IFFALSE 17804
// begin ComMoveXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) ;
17719: LD_VAR 0 1
17723: PPUSH
17724: LD_EXP 67
17728: PPUSH
17729: CALL_OW 250
17733: PPUSH
17734: LD_EXP 67
17738: PPUSH
17739: CALL_OW 251
17743: PPUSH
17744: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
17748: LD_INT 35
17750: PPUSH
17751: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase ) , GetY ( ruBase ) ) < 6 ;
17755: LD_VAR 0 1
17759: PPUSH
17760: LD_EXP 67
17764: PPUSH
17765: CALL_OW 250
17769: PPUSH
17770: LD_EXP 67
17774: PPUSH
17775: CALL_OW 251
17779: PPUSH
17780: CALL_OW 297
17784: PUSH
17785: LD_INT 6
17787: LESS
17788: IFFALSE 17748
// SetFuel ( i , 100 ) ;
17790: LD_VAR 0 1
17794: PPUSH
17795: LD_INT 100
17797: PPUSH
17798: CALL_OW 240
// end else
17802: GO 17849
// if not IsInArea ( i , ruParkingArea ) then
17804: LD_VAR 0 1
17808: PPUSH
17809: LD_EXP 80
17813: PPUSH
17814: CALL_OW 308
17818: NOT
17819: IFFALSE 17837
// ComMoveToArea ( i , ruParkingArea ) else
17821: LD_VAR 0 1
17825: PPUSH
17826: LD_EXP 80
17830: PPUSH
17831: CALL_OW 113
17835: GO 17849
// SetTag ( i , tParking ) ;
17837: LD_VAR 0 1
17841: PPUSH
17842: LD_INT 12
17844: PPUSH
17845: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
17849: LD_VAR 0 1
17853: PPUSH
17854: CALL_OW 110
17858: PUSH
17859: LD_INT 12
17861: EQUAL
17862: IFFALSE 17992
// begin if GetLives ( i ) < 650 then
17864: LD_VAR 0 1
17868: PPUSH
17869: CALL_OW 256
17873: PUSH
17874: LD_INT 650
17876: LESS
17877: IFFALSE 17969
// begin if not IsDrivenBy ( i ) then
17879: LD_VAR 0 1
17883: PPUSH
17884: CALL_OW 311
17888: NOT
17889: IFFALSE 17893
// continue ;
17891: GO 17603
// mech := IsDrivenBy ( i ) ;
17893: LD_ADDR_VAR 0 2
17897: PUSH
17898: LD_VAR 0 1
17902: PPUSH
17903: CALL_OW 311
17907: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
17908: LD_VAR 0 2
17912: PPUSH
17913: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
17917: LD_VAR 0 2
17921: PPUSH
17922: LD_VAR 0 1
17926: PPUSH
17927: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
17931: LD_INT 35
17933: PPUSH
17934: CALL_OW 67
// until GetLives ( i ) = 1000 ;
17938: LD_VAR 0 1
17942: PPUSH
17943: CALL_OW 256
17947: PUSH
17948: LD_INT 1000
17950: EQUAL
17951: IFFALSE 17931
// ComEnterUnit ( mech , i ) ;
17953: LD_VAR 0 2
17957: PPUSH
17958: LD_VAR 0 1
17962: PPUSH
17963: CALL_OW 120
// end else
17967: GO 17992
// if IsDrivenBy ( i ) then
17969: LD_VAR 0 1
17973: PPUSH
17974: CALL_OW 311
17978: IFFALSE 17992
// SetTag ( i , tAttack ) ;
17980: LD_VAR 0 1
17984: PPUSH
17985: LD_INT 13
17987: PPUSH
17988: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
17992: LD_VAR 0 1
17996: PPUSH
17997: CALL_OW 110
18001: PUSH
18002: LD_INT 13
18004: EQUAL
18005: IFFALSE 18172
// begin enemy := FilterUnitsInArea ( ruBaseArea , [ f_enemy , 3 ] ) ;
18007: LD_ADDR_VAR 0 3
18011: PUSH
18012: LD_EXP 65
18016: PPUSH
18017: LD_INT 81
18019: PUSH
18020: LD_INT 3
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PPUSH
18027: CALL_OW 70
18031: ST_TO_ADDR
// if GetLives ( i ) < 650 then
18032: LD_VAR 0 1
18036: PPUSH
18037: CALL_OW 256
18041: PUSH
18042: LD_INT 650
18044: LESS
18045: IFFALSE 18070
// begin ComStop ( i ) ;
18047: LD_VAR 0 1
18051: PPUSH
18052: CALL_OW 141
// SetTag ( i , 0 ) ;
18056: LD_VAR 0 1
18060: PPUSH
18061: LD_INT 0
18063: PPUSH
18064: CALL_OW 109
// continue ;
18068: GO 17603
// end ; if enemy then
18070: LD_VAR 0 3
18074: IFFALSE 18114
// begin if not HasTask ( i ) then
18076: LD_VAR 0 1
18080: PPUSH
18081: CALL_OW 314
18085: NOT
18086: IFFALSE 18112
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
18088: LD_VAR 0 1
18092: PPUSH
18093: LD_VAR 0 3
18097: PPUSH
18098: LD_VAR 0 1
18102: PPUSH
18103: CALL_OW 74
18107: PPUSH
18108: CALL_OW 115
// end else
18112: GO 18172
// if ruTanks > 1 then
18114: LD_EXP 77
18118: PUSH
18119: LD_INT 1
18121: GREATER
18122: IFFALSE 18172
// begin enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
18124: LD_ADDR_VAR 0 3
18128: PUSH
18129: LD_INT 22
18131: PUSH
18132: LD_INT 1
18134: PUSH
18135: EMPTY
18136: LIST
18137: LIST
18138: PPUSH
18139: CALL_OW 69
18143: ST_TO_ADDR
// if enemy then
18144: LD_VAR 0 3
18148: IFFALSE 18172
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
18150: LD_VAR 0 1
18154: PPUSH
18155: LD_INT 105
18157: PUSH
18158: LD_INT 35
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: EMPTY
18166: LIST
18167: PPUSH
18168: CALL 91260 0 2
// end ; end ; end ;
18172: GO 17603
18174: POP
18175: POP
// end ;
18176: PPOPN 3
18178: END
// every 0 0$1 trigger ruTanks2 do var i , mech , enemy ;
18179: LD_EXP 78
18183: IFFALSE 18786
18185: GO 18187
18187: DISABLE
18188: LD_INT 0
18190: PPUSH
18191: PPUSH
18192: PPUSH
// begin enable ;
18193: ENABLE
// if not ruTanks2 then
18194: LD_EXP 78
18198: NOT
18199: IFFALSE 18203
// exit ;
18201: GO 18786
// for i in ruTanks2 do
18203: LD_ADDR_VAR 0 1
18207: PUSH
18208: LD_EXP 78
18212: PUSH
18213: FOR_IN
18214: IFFALSE 18784
// begin if not IsOk ( i ) or GetSide ( i ) <> 3 then
18216: LD_VAR 0 1
18220: PPUSH
18221: CALL_OW 302
18225: NOT
18226: PUSH
18227: LD_VAR 0 1
18231: PPUSH
18232: CALL_OW 255
18236: PUSH
18237: LD_INT 3
18239: NONEQUAL
18240: OR
18241: IFFALSE 18261
// begin ruTanks := ruTanks diff i ;
18243: LD_ADDR_EXP 77
18247: PUSH
18248: LD_EXP 77
18252: PUSH
18253: LD_VAR 0 1
18257: DIFF
18258: ST_TO_ADDR
// continue ;
18259: GO 18213
// end ; if not GetTag ( i ) or GetTag ( i ) = 0 then
18261: LD_VAR 0 1
18265: PPUSH
18266: CALL_OW 110
18270: NOT
18271: PUSH
18272: LD_VAR 0 1
18276: PPUSH
18277: CALL_OW 110
18281: PUSH
18282: LD_INT 0
18284: EQUAL
18285: OR
18286: IFFALSE 18459
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 50 and IsOk ( ruBase2 ) then
18288: LD_VAR 0 1
18292: PPUSH
18293: CALL_OW 262
18297: PUSH
18298: LD_INT 1
18300: EQUAL
18301: PUSH
18302: LD_VAR 0 1
18306: PPUSH
18307: CALL_OW 261
18311: PUSH
18312: LD_INT 50
18314: LESS
18315: AND
18316: PUSH
18317: LD_EXP 68
18321: PPUSH
18322: CALL_OW 302
18326: AND
18327: IFFALSE 18414
// begin ComMoveXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) ;
18329: LD_VAR 0 1
18333: PPUSH
18334: LD_EXP 68
18338: PPUSH
18339: CALL_OW 250
18343: PPUSH
18344: LD_EXP 68
18348: PPUSH
18349: CALL_OW 251
18353: PPUSH
18354: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
18358: LD_INT 35
18360: PPUSH
18361: CALL_OW 67
// until GetDistUnitXY ( i , GetX ( ruBase2 ) , GetY ( ruBase2 ) ) < 6 ;
18365: LD_VAR 0 1
18369: PPUSH
18370: LD_EXP 68
18374: PPUSH
18375: CALL_OW 250
18379: PPUSH
18380: LD_EXP 68
18384: PPUSH
18385: CALL_OW 251
18389: PPUSH
18390: CALL_OW 297
18394: PUSH
18395: LD_INT 6
18397: LESS
18398: IFFALSE 18358
// SetFuel ( i , 100 ) ;
18400: LD_VAR 0 1
18404: PPUSH
18405: LD_INT 100
18407: PPUSH
18408: CALL_OW 240
// end else
18412: GO 18459
// if not IsInArea ( i , ruParkingArea2 ) then
18414: LD_VAR 0 1
18418: PPUSH
18419: LD_EXP 81
18423: PPUSH
18424: CALL_OW 308
18428: NOT
18429: IFFALSE 18447
// ComMoveToArea ( i , ruParkingArea2 ) else
18431: LD_VAR 0 1
18435: PPUSH
18436: LD_EXP 81
18440: PPUSH
18441: CALL_OW 113
18445: GO 18459
// SetTag ( i , tParking ) ;
18447: LD_VAR 0 1
18451: PPUSH
18452: LD_INT 12
18454: PPUSH
18455: CALL_OW 109
// end ; if GetTag ( i ) = tParking then
18459: LD_VAR 0 1
18463: PPUSH
18464: CALL_OW 110
18468: PUSH
18469: LD_INT 12
18471: EQUAL
18472: IFFALSE 18602
// begin if GetLives ( i ) < 650 then
18474: LD_VAR 0 1
18478: PPUSH
18479: CALL_OW 256
18483: PUSH
18484: LD_INT 650
18486: LESS
18487: IFFALSE 18579
// begin if not IsDrivenBy ( i ) then
18489: LD_VAR 0 1
18493: PPUSH
18494: CALL_OW 311
18498: NOT
18499: IFFALSE 18503
// continue ;
18501: GO 18213
// mech := IsDrivenBy ( i ) ;
18503: LD_ADDR_VAR 0 2
18507: PUSH
18508: LD_VAR 0 1
18512: PPUSH
18513: CALL_OW 311
18517: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
18518: LD_VAR 0 2
18522: PPUSH
18523: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
18527: LD_VAR 0 2
18531: PPUSH
18532: LD_VAR 0 1
18536: PPUSH
18537: CALL_OW 189
// repeat wait ( 0 0$1 ) ;
18541: LD_INT 35
18543: PPUSH
18544: CALL_OW 67
// until GetLives ( i ) = 1000 ;
18548: LD_VAR 0 1
18552: PPUSH
18553: CALL_OW 256
18557: PUSH
18558: LD_INT 1000
18560: EQUAL
18561: IFFALSE 18541
// ComEnterUnit ( mech , i ) ;
18563: LD_VAR 0 2
18567: PPUSH
18568: LD_VAR 0 1
18572: PPUSH
18573: CALL_OW 120
// end else
18577: GO 18602
// if IsDrivenBy ( i ) then
18579: LD_VAR 0 1
18583: PPUSH
18584: CALL_OW 311
18588: IFFALSE 18602
// SetTag ( i , tAttack ) ;
18590: LD_VAR 0 1
18594: PPUSH
18595: LD_INT 13
18597: PPUSH
18598: CALL_OW 109
// end ; if GetTag ( i ) = tAttack then
18602: LD_VAR 0 1
18606: PPUSH
18607: CALL_OW 110
18611: PUSH
18612: LD_INT 13
18614: EQUAL
18615: IFFALSE 18782
// begin enemy := FilterUnitsInArea ( ruBaseArea2 , [ f_enemy , 3 ] ) ;
18617: LD_ADDR_VAR 0 3
18621: PUSH
18622: LD_EXP 66
18626: PPUSH
18627: LD_INT 81
18629: PUSH
18630: LD_INT 3
18632: PUSH
18633: EMPTY
18634: LIST
18635: LIST
18636: PPUSH
18637: CALL_OW 70
18641: ST_TO_ADDR
// if GetLives ( i ) < 650 then
18642: LD_VAR 0 1
18646: PPUSH
18647: CALL_OW 256
18651: PUSH
18652: LD_INT 650
18654: LESS
18655: IFFALSE 18680
// begin ComStop ( i ) ;
18657: LD_VAR 0 1
18661: PPUSH
18662: CALL_OW 141
// SetTag ( i , 0 ) ;
18666: LD_VAR 0 1
18670: PPUSH
18671: LD_INT 0
18673: PPUSH
18674: CALL_OW 109
// continue ;
18678: GO 18213
// end ; if enemy then
18680: LD_VAR 0 3
18684: IFFALSE 18724
// begin if not HasTask ( i ) then
18686: LD_VAR 0 1
18690: PPUSH
18691: CALL_OW 314
18695: NOT
18696: IFFALSE 18722
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
18698: LD_VAR 0 1
18702: PPUSH
18703: LD_VAR 0 3
18707: PPUSH
18708: LD_VAR 0 1
18712: PPUSH
18713: CALL_OW 74
18717: PPUSH
18718: CALL_OW 115
// end else
18722: GO 18782
// if ruTanks2 > 1 then
18724: LD_EXP 78
18728: PUSH
18729: LD_INT 1
18731: GREATER
18732: IFFALSE 18782
// begin enemy := FilterAllUnits ( [ f_side , 1 ] ) ;
18734: LD_ADDR_VAR 0 3
18738: PUSH
18739: LD_INT 22
18741: PUSH
18742: LD_INT 1
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PPUSH
18749: CALL_OW 69
18753: ST_TO_ADDR
// if enemy then
18754: LD_VAR 0 3
18758: IFFALSE 18782
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
18760: LD_VAR 0 1
18764: PPUSH
18765: LD_INT 105
18767: PUSH
18768: LD_INT 35
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: PUSH
18775: EMPTY
18776: LIST
18777: PPUSH
18778: CALL 91260 0 2
// end ; end ; end ;
18782: GO 18213
18784: POP
18785: POP
// end ;
18786: PPOPN 3
18788: END
// every 5 5$00 trigger Count ( ruExtraTanks ) >= [ 3 , 4 , 5 , 6 ] [ Difficulty ] do
18789: LD_EXP 79
18793: PPUSH
18794: CALL 53437 0 1
18798: PUSH
18799: LD_INT 3
18801: PUSH
18802: LD_INT 4
18804: PUSH
18805: LD_INT 5
18807: PUSH
18808: LD_INT 6
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: PUSH
18817: LD_OWVAR 67
18821: ARRAY
18822: GREATEREQUAL
18823: IFFALSE 18836
18825: GO 18827
18827: DISABLE
// begin enable ;
18828: ENABLE
// RaiseSailEvent ( EExtraAttack ) ;
18829: LD_INT 106
18831: PPUSH
18832: CALL_OW 427
// end ;
18836: END
// export function RussianExtraAttack ; var i , tmp ; begin
18837: LD_INT 0
18839: PPUSH
18840: PPUSH
18841: PPUSH
// tmp := UnitFilter ( ruExtraTanks , [ f_ok ] ) ;
18842: LD_ADDR_VAR 0 3
18846: PUSH
18847: LD_EXP 79
18851: PPUSH
18852: LD_INT 50
18854: PUSH
18855: EMPTY
18856: LIST
18857: PPUSH
18858: CALL_OW 72
18862: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18863: LD_INT 35
18865: PPUSH
18866: CALL_OW 67
// tmp := UnitFilter ( tmp , [ f_ok ] ) ;
18870: LD_ADDR_VAR 0 3
18874: PUSH
18875: LD_VAR 0 3
18879: PPUSH
18880: LD_INT 50
18882: PUSH
18883: EMPTY
18884: LIST
18885: PPUSH
18886: CALL_OW 72
18890: ST_TO_ADDR
// for i in UnitFilter ( tmp , [ f_ok ] ) do
18891: LD_ADDR_VAR 0 2
18895: PUSH
18896: LD_VAR 0 3
18900: PPUSH
18901: LD_INT 50
18903: PUSH
18904: EMPTY
18905: LIST
18906: PPUSH
18907: CALL_OW 72
18911: PUSH
18912: FOR_IN
18913: IFFALSE 18939
// AgressiveMove ( i , [ [ 105 , 35 ] ] ) ;
18915: LD_VAR 0 2
18919: PPUSH
18920: LD_INT 105
18922: PUSH
18923: LD_INT 35
18925: PUSH
18926: EMPTY
18927: LIST
18928: LIST
18929: PUSH
18930: EMPTY
18931: LIST
18932: PPUSH
18933: CALL 91260 0 2
18937: GO 18912
18939: POP
18940: POP
// until not tmp ;
18941: LD_VAR 0 3
18945: NOT
18946: IFFALSE 18863
// end ;
18948: LD_VAR 0 1
18952: RET
// export function PrepareRussianAttack ( strength ) ; var i , tmp , un , veh , skill , area , parking , dir , control ; begin
18953: LD_INT 0
18955: PPUSH
18956: PPUSH
18957: PPUSH
18958: PPUSH
18959: PPUSH
18960: PPUSH
18961: PPUSH
18962: PPUSH
18963: PPUSH
18964: PPUSH
// result := [ ] ;
18965: LD_ADDR_VAR 0 2
18969: PUSH
18970: EMPTY
18971: ST_TO_ADDR
// skill := [ 4 , 5 , 6 , 7 ] [ Difficulty ] ;
18972: LD_ADDR_VAR 0 7
18976: PUSH
18977: LD_INT 4
18979: PUSH
18980: LD_INT 5
18982: PUSH
18983: LD_INT 6
18985: PUSH
18986: LD_INT 7
18988: PUSH
18989: EMPTY
18990: LIST
18991: LIST
18992: LIST
18993: LIST
18994: PUSH
18995: LD_OWVAR 67
18999: ARRAY
19000: ST_TO_ADDR
// area := arAttackSpawn2Area ;
19001: LD_ADDR_VAR 0 8
19005: PUSH
19006: LD_INT 19
19008: ST_TO_ADDR
// parking := ruGatPointArea ;
19009: LD_ADDR_VAR 0 9
19013: PUSH
19014: LD_INT 32
19016: ST_TO_ADDR
// dir := 5 ;
19017: LD_ADDR_VAR 0 10
19021: PUSH
19022: LD_INT 5
19024: ST_TO_ADDR
// if FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) then
19025: LD_VAR 0 8
19029: PPUSH
19030: LD_INT 2
19032: PUSH
19033: LD_INT 22
19035: PUSH
19036: LD_INT 0
19038: PUSH
19039: EMPTY
19040: LIST
19041: LIST
19042: PUSH
19043: LD_INT 22
19045: PUSH
19046: LD_INT 6
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: EMPTY
19054: LIST
19055: LIST
19056: LIST
19057: PPUSH
19058: CALL_OW 70
19062: IFFALSE 19123
// for i in FilterUnitsInArea ( area , [ f_or , [ f_side , 0 ] , [ f_side , 6 ] ] ) do
19064: LD_ADDR_VAR 0 3
19068: PUSH
19069: LD_VAR 0 8
19073: PPUSH
19074: LD_INT 2
19076: PUSH
19077: LD_INT 22
19079: PUSH
19080: LD_INT 0
19082: PUSH
19083: EMPTY
19084: LIST
19085: LIST
19086: PUSH
19087: LD_INT 22
19089: PUSH
19090: LD_INT 6
19092: PUSH
19093: EMPTY
19094: LIST
19095: LIST
19096: PUSH
19097: EMPTY
19098: LIST
19099: LIST
19100: LIST
19101: PPUSH
19102: CALL_OW 70
19106: PUSH
19107: FOR_IN
19108: IFFALSE 19121
// RemoveUnit ( i ) ;
19110: LD_VAR 0 3
19114: PPUSH
19115: CALL_OW 64
19119: GO 19107
19121: POP
19122: POP
// if FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) then
19123: LD_VAR 0 8
19127: PPUSH
19128: LD_INT 3
19130: PUSH
19131: LD_INT 21
19133: PUSH
19134: LD_INT 1
19136: PUSH
19137: EMPTY
19138: LIST
19139: LIST
19140: PUSH
19141: EMPTY
19142: LIST
19143: LIST
19144: PUSH
19145: LD_INT 22
19147: PUSH
19148: LD_INT 1
19150: PUSH
19151: EMPTY
19152: LIST
19153: LIST
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PPUSH
19159: CALL_OW 70
19163: IFFALSE 19227
// for i in FilterUnitsInArea ( area , [ [ f_not , [ f_type , unit_human ] ] , [ f_side , 1 ] ] ) do
19165: LD_ADDR_VAR 0 3
19169: PUSH
19170: LD_VAR 0 8
19174: PPUSH
19175: LD_INT 3
19177: PUSH
19178: LD_INT 21
19180: PUSH
19181: LD_INT 1
19183: PUSH
19184: EMPTY
19185: LIST
19186: LIST
19187: PUSH
19188: EMPTY
19189: LIST
19190: LIST
19191: PUSH
19192: LD_INT 22
19194: PUSH
19195: LD_INT 1
19197: PUSH
19198: EMPTY
19199: LIST
19200: LIST
19201: PUSH
19202: EMPTY
19203: LIST
19204: LIST
19205: PPUSH
19206: CALL_OW 70
19210: PUSH
19211: FOR_IN
19212: IFFALSE 19225
// KillUnit ( i ) ;
19214: LD_VAR 0 3
19218: PPUSH
19219: CALL_OW 66
19223: GO 19211
19225: POP
19226: POP
// if FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) then
19227: LD_VAR 0 8
19231: PPUSH
19232: LD_INT 21
19234: PUSH
19235: LD_INT 1
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 22
19244: PUSH
19245: LD_INT 1
19247: PUSH
19248: EMPTY
19249: LIST
19250: LIST
19251: PUSH
19252: EMPTY
19253: LIST
19254: LIST
19255: PPUSH
19256: CALL_OW 70
19260: IFFALSE 19323
// for i in FilterUnitsInArea ( area , [ [ f_type , unit_human ] , [ f_side , 1 ] ] ) do
19262: LD_ADDR_VAR 0 3
19266: PUSH
19267: LD_VAR 0 8
19271: PPUSH
19272: LD_INT 21
19274: PUSH
19275: LD_INT 1
19277: PUSH
19278: EMPTY
19279: LIST
19280: LIST
19281: PUSH
19282: LD_INT 22
19284: PUSH
19285: LD_INT 1
19287: PUSH
19288: EMPTY
19289: LIST
19290: LIST
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PPUSH
19296: CALL_OW 70
19300: PUSH
19301: FOR_IN
19302: IFFALSE 19321
// ComMoveXY ( i , 92 , 92 ) ;
19304: LD_VAR 0 3
19308: PPUSH
19309: LD_INT 92
19311: PPUSH
19312: LD_INT 92
19314: PPUSH
19315: CALL_OW 111
19319: GO 19301
19321: POP
19322: POP
// repeat wait ( 0 0$1 ) ;
19323: LD_INT 35
19325: PPUSH
19326: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
19330: LD_VAR 0 8
19334: PPUSH
19335: LD_INT 50
19337: PUSH
19338: EMPTY
19339: LIST
19340: PPUSH
19341: CALL_OW 70
19345: NOT
19346: IFFALSE 19323
// InitHC_All ( ) ;
19348: CALL_OW 584
// InitVc ;
19352: CALL_OW 20
// for i := 1 to [ 4 , 5 , 5 , 6 ] [ Difficulty ] + strength do
19356: LD_ADDR_VAR 0 3
19360: PUSH
19361: DOUBLE
19362: LD_INT 1
19364: DEC
19365: ST_TO_ADDR
19366: LD_INT 4
19368: PUSH
19369: LD_INT 5
19371: PUSH
19372: LD_INT 5
19374: PUSH
19375: LD_INT 6
19377: PUSH
19378: EMPTY
19379: LIST
19380: LIST
19381: LIST
19382: LIST
19383: PUSH
19384: LD_OWVAR 67
19388: ARRAY
19389: PUSH
19390: LD_VAR 0 1
19394: PLUS
19395: PUSH
19396: FOR_TO
19397: IFFALSE 19704
// begin uc_side := 6 ;
19399: LD_ADDR_OWVAR 20
19403: PUSH
19404: LD_INT 6
19406: ST_TO_ADDR
// uc_nation := nation_russian ;
19407: LD_ADDR_OWVAR 21
19411: PUSH
19412: LD_INT 3
19414: ST_TO_ADDR
// control := [ control_manual , control_computer , control_computer , control_computer ] [ rand ( 1 , 4 ) ] ;
19415: LD_ADDR_VAR 0 11
19419: PUSH
19420: LD_INT 1
19422: PUSH
19423: LD_INT 3
19425: PUSH
19426: LD_INT 3
19428: PUSH
19429: LD_INT 3
19431: PUSH
19432: EMPTY
19433: LIST
19434: LIST
19435: LIST
19436: LIST
19437: PUSH
19438: LD_INT 1
19440: PPUSH
19441: LD_INT 4
19443: PPUSH
19444: CALL_OW 12
19448: ARRAY
19449: ST_TO_ADDR
// PrepareVehicle ( [ ru_medium_tracked , ru_heavy_tracked , ru_heavy_wheeled ] [ i mod 3 + 1 ] , [ engine_siberite , engine_combustion ] [ rand ( 1 , 2 ) ] , control , [ ru_rocket_launcher , ru_heavy_gun , ru_gatling_gun ] [ i mod 3 + 1 ] , 100 ) ;
19450: LD_INT 22
19452: PUSH
19453: LD_INT 24
19455: PUSH
19456: LD_INT 23
19458: PUSH
19459: EMPTY
19460: LIST
19461: LIST
19462: LIST
19463: PUSH
19464: LD_VAR 0 3
19468: PUSH
19469: LD_INT 3
19471: MOD
19472: PUSH
19473: LD_INT 1
19475: PLUS
19476: ARRAY
19477: PPUSH
19478: LD_INT 3
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 1
19490: PPUSH
19491: LD_INT 2
19493: PPUSH
19494: CALL_OW 12
19498: ARRAY
19499: PPUSH
19500: LD_VAR 0 11
19504: PPUSH
19505: LD_INT 45
19507: PUSH
19508: LD_INT 46
19510: PUSH
19511: LD_INT 43
19513: PUSH
19514: EMPTY
19515: LIST
19516: LIST
19517: LIST
19518: PUSH
19519: LD_VAR 0 3
19523: PUSH
19524: LD_INT 3
19526: MOD
19527: PUSH
19528: LD_INT 1
19530: PLUS
19531: ARRAY
19532: PPUSH
19533: LD_INT 100
19535: PPUSH
19536: CALL 56175 0 5
// veh := CreateVehicle ;
19540: LD_ADDR_VAR 0 6
19544: PUSH
19545: CALL_OW 45
19549: ST_TO_ADDR
// SetDir ( veh , dir ) ;
19550: LD_VAR 0 6
19554: PPUSH
19555: LD_VAR 0 10
19559: PPUSH
19560: CALL_OW 233
// PlaceUnitArea ( veh , area , false ) ;
19564: LD_VAR 0 6
19568: PPUSH
19569: LD_VAR 0 8
19573: PPUSH
19574: LD_INT 0
19576: PPUSH
19577: CALL_OW 49
// if control = control_manual then
19581: LD_VAR 0 11
19585: PUSH
19586: LD_INT 1
19588: EQUAL
19589: IFFALSE 19643
// begin uc_side := 6 ;
19591: LD_ADDR_OWVAR 20
19595: PUSH
19596: LD_INT 6
19598: ST_TO_ADDR
// uc_nation := nation_russian ;
19599: LD_ADDR_OWVAR 21
19603: PUSH
19604: LD_INT 3
19606: ST_TO_ADDR
// PrepareMechanic ( false , skill ) ;
19607: LD_INT 0
19609: PPUSH
19610: LD_VAR 0 7
19614: PPUSH
19615: CALL_OW 383
// un := CreateHuman ;
19619: LD_ADDR_VAR 0 5
19623: PUSH
19624: CALL_OW 44
19628: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
19629: LD_VAR 0 5
19633: PPUSH
19634: LD_VAR 0 6
19638: PPUSH
19639: CALL_OW 52
// end ; repeat ComMoveToArea ( veh , parking ) ;
19643: LD_VAR 0 6
19647: PPUSH
19648: LD_VAR 0 9
19652: PPUSH
19653: CALL_OW 113
// wait ( 0 0$3 ) ;
19657: LD_INT 105
19659: PPUSH
19660: CALL_OW 67
// until not FilterUnitsInArea ( area , [ f_ok ] ) ;
19664: LD_VAR 0 8
19668: PPUSH
19669: LD_INT 50
19671: PUSH
19672: EMPTY
19673: LIST
19674: PPUSH
19675: CALL_OW 70
19679: NOT
19680: IFFALSE 19643
// result := Join ( result , veh ) ;
19682: LD_ADDR_VAR 0 2
19686: PUSH
19687: LD_VAR 0 2
19691: PPUSH
19692: LD_VAR 0 6
19696: PPUSH
19697: CALL 88656 0 2
19701: ST_TO_ADDR
// end ;
19702: GO 19396
19704: POP
19705: POP
// for i := 1 to [ 2 , 2 , 3 , 4 ] [ Difficulty ] do
19706: LD_ADDR_VAR 0 3
19710: PUSH
19711: DOUBLE
19712: LD_INT 1
19714: DEC
19715: ST_TO_ADDR
19716: LD_INT 2
19718: PUSH
19719: LD_INT 2
19721: PUSH
19722: LD_INT 3
19724: PUSH
19725: LD_INT 4
19727: PUSH
19728: EMPTY
19729: LIST
19730: LIST
19731: LIST
19732: LIST
19733: PUSH
19734: LD_OWVAR 67
19738: ARRAY
19739: PUSH
19740: FOR_TO
19741: IFFALSE 19897
// begin uc_side := 6 ;
19743: LD_ADDR_OWVAR 20
19747: PUSH
19748: LD_INT 6
19750: ST_TO_ADDR
// uc_nation := nation_russian ;
19751: LD_ADDR_OWVAR 21
19755: PUSH
19756: LD_INT 3
19758: ST_TO_ADDR
// PrepareSoldier ( false , skill ) ;
19759: LD_INT 0
19761: PPUSH
19762: LD_VAR 0 7
19766: PPUSH
19767: CALL_OW 381
// un := CreateHuman ;
19771: LD_ADDR_VAR 0 5
19775: PUSH
19776: CALL_OW 44
19780: ST_TO_ADDR
// if Prob ( [ 30 , 40 , 50 , 50 ] [ Difficulty ] ) then
19781: LD_INT 30
19783: PUSH
19784: LD_INT 40
19786: PUSH
19787: LD_INT 50
19789: PUSH
19790: LD_INT 50
19792: PUSH
19793: EMPTY
19794: LIST
19795: LIST
19796: LIST
19797: LIST
19798: PUSH
19799: LD_OWVAR 67
19803: ARRAY
19804: PPUSH
19805: CALL_OW 13
19809: IFFALSE 19823
// SetClass ( un , class_bazooker ) ;
19811: LD_VAR 0 5
19815: PPUSH
19816: LD_INT 9
19818: PPUSH
19819: CALL_OW 336
// SetDir ( un , dir ) ;
19823: LD_VAR 0 5
19827: PPUSH
19828: LD_VAR 0 10
19832: PPUSH
19833: CALL_OW 233
// PlaceUnitArea ( un , area , false ) ;
19837: LD_VAR 0 5
19841: PPUSH
19842: LD_VAR 0 8
19846: PPUSH
19847: LD_INT 0
19849: PPUSH
19850: CALL_OW 49
// ComMoveToArea ( un , parking ) ;
19854: LD_VAR 0 5
19858: PPUSH
19859: LD_VAR 0 9
19863: PPUSH
19864: CALL_OW 113
// wait ( 0 0$1 ) ;
19868: LD_INT 35
19870: PPUSH
19871: CALL_OW 67
// result := Join ( result , un ) ;
19875: LD_ADDR_VAR 0 2
19879: PUSH
19880: LD_VAR 0 2
19884: PPUSH
19885: LD_VAR 0 5
19889: PPUSH
19890: CALL 88656 0 2
19894: ST_TO_ADDR
// end ;
19895: GO 19740
19897: POP
19898: POP
// end ;
19899: LD_VAR 0 2
19903: RET
// export function SendRussianAttack ( wave ) ; var path , attackers , e , i , enemy ; begin
19904: LD_INT 0
19906: PPUSH
19907: PPUSH
19908: PPUSH
19909: PPUSH
19910: PPUSH
19911: PPUSH
// russianWaveAttack := Inc ( russianWaveAttack ) ;
19912: LD_ADDR_EXP 18
19916: PUSH
19917: LD_EXP 18
19921: PPUSH
19922: CALL 90017 0 1
19926: ST_TO_ADDR
// path := [ [ 99 , 91 ] , [ 78 , 50 ] , [ 91 , 45 ] ] ;
19927: LD_ADDR_VAR 0 3
19931: PUSH
19932: LD_INT 99
19934: PUSH
19935: LD_INT 91
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 78
19944: PUSH
19945: LD_INT 50
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 91
19954: PUSH
19955: LD_INT 45
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: EMPTY
19963: LIST
19964: LIST
19965: LIST
19966: ST_TO_ADDR
// attackers := PrepareRussianAttack ( wave ) ;
19967: LD_ADDR_VAR 0 4
19971: PUSH
19972: LD_VAR 0 1
19976: PPUSH
19977: CALL 18953 0 1
19981: ST_TO_ADDR
// ComAgressiveMove ( UnitFilter ( attackers , [ f_type , unit_human ] ) , 108 , 60 ) ;
19982: LD_VAR 0 4
19986: PPUSH
19987: LD_INT 21
19989: PUSH
19990: LD_INT 1
19992: PUSH
19993: EMPTY
19994: LIST
19995: LIST
19996: PPUSH
19997: CALL_OW 72
20001: PPUSH
20002: LD_INT 108
20004: PPUSH
20005: LD_INT 60
20007: PPUSH
20008: CALL_OW 114
// DRussianNextAttack ;
20012: CALL 26108 0 0
// repeat wait ( 0 0$2 ) ;
20016: LD_INT 70
20018: PPUSH
20019: CALL_OW 67
// enemy := FilterAllUnits ( [ f_enemy , 6 ] ) ;
20023: LD_ADDR_VAR 0 7
20027: PUSH
20028: LD_INT 81
20030: PUSH
20031: LD_INT 6
20033: PUSH
20034: EMPTY
20035: LIST
20036: LIST
20037: PPUSH
20038: CALL_OW 69
20042: ST_TO_ADDR
// attackers := UnitFilter ( attackers , [ f_ok ] ) ;
20043: LD_ADDR_VAR 0 4
20047: PUSH
20048: LD_VAR 0 4
20052: PPUSH
20053: LD_INT 50
20055: PUSH
20056: EMPTY
20057: LIST
20058: PPUSH
20059: CALL_OW 72
20063: ST_TO_ADDR
// for i in attackers do
20064: LD_ADDR_VAR 0 6
20068: PUSH
20069: LD_VAR 0 4
20073: PUSH
20074: FOR_IN
20075: IFFALSE 20451
// begin if not IsOk ( i ) then
20077: LD_VAR 0 6
20081: PPUSH
20082: CALL_OW 302
20086: NOT
20087: IFFALSE 20107
// begin attackers := attackers diff i ;
20089: LD_ADDR_VAR 0 4
20093: PUSH
20094: LD_VAR 0 4
20098: PUSH
20099: LD_VAR 0 6
20103: DIFF
20104: ST_TO_ADDR
// continue ;
20105: GO 20074
// end ; if GetType ( i ) = unit_vehicle then
20107: LD_VAR 0 6
20111: PPUSH
20112: CALL_OW 247
20116: PUSH
20117: LD_INT 2
20119: EQUAL
20120: IFFALSE 20138
// AgressiveMove ( i , path ) else
20122: LD_VAR 0 6
20126: PPUSH
20127: LD_VAR 0 3
20131: PPUSH
20132: CALL 91260 0 2
20136: GO 20449
// begin if GetClass ( i ) = class_bazooker then
20138: LD_VAR 0 6
20142: PPUSH
20143: CALL_OW 257
20147: PUSH
20148: LD_INT 9
20150: EQUAL
20151: IFFALSE 20425
// begin if GetDistUnits ( i , NearestUnitToUnit ( enemy , i ) ) > 9 then
20153: LD_VAR 0 6
20157: PPUSH
20158: LD_VAR 0 7
20162: PPUSH
20163: LD_VAR 0 6
20167: PPUSH
20168: CALL_OW 74
20172: PPUSH
20173: CALL_OW 296
20177: PUSH
20178: LD_INT 9
20180: GREATER
20181: IFFALSE 20209
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
20183: LD_VAR 0 6
20187: PPUSH
20188: LD_VAR 0 7
20192: PPUSH
20193: LD_VAR 0 6
20197: PPUSH
20198: CALL_OW 74
20202: PPUSH
20203: CALL 92728 0 2
20207: GO 20423
// begin e := NearestUnitToUnit ( enemy , i ) ;
20209: LD_ADDR_VAR 0 5
20213: PUSH
20214: LD_VAR 0 7
20218: PPUSH
20219: LD_VAR 0 6
20223: PPUSH
20224: CALL_OW 74
20228: ST_TO_ADDR
// case rand ( 1 , 3 ) of 1 :
20229: LD_INT 1
20231: PPUSH
20232: LD_INT 3
20234: PPUSH
20235: CALL_OW 12
20239: PUSH
20240: LD_INT 1
20242: DOUBLE
20243: EQUAL
20244: IFTRUE 20248
20246: GO 20265
20248: POP
// ComAttackUnit ( i , e ) ; 2 :
20249: LD_VAR 0 6
20253: PPUSH
20254: LD_VAR 0 5
20258: PPUSH
20259: CALL_OW 115
20263: GO 20423
20265: LD_INT 2
20267: DOUBLE
20268: EQUAL
20269: IFTRUE 20273
20271: GO 20351
20273: POP
// begin ComSpaceShift ( i , GetX ( e ) , GetY ( e ) ) ;
20274: LD_VAR 0 6
20278: PPUSH
20279: LD_VAR 0 5
20283: PPUSH
20284: CALL_OW 250
20288: PPUSH
20289: LD_VAR 0 5
20293: PPUSH
20294: CALL_OW 251
20298: PPUSH
20299: CALL_OW 153
// if GetType ( e ) <> unit_building and not dialogRussianSpaceAmmo then
20303: LD_VAR 0 5
20307: PPUSH
20308: CALL_OW 247
20312: PUSH
20313: LD_INT 3
20315: NONEQUAL
20316: PUSH
20317: LD_EXP 17
20321: NOT
20322: AND
20323: IFFALSE 20349
// begin dialogRussianSpaceAmmo := true ;
20325: LD_ADDR_EXP 17
20329: PUSH
20330: LD_INT 1
20332: ST_TO_ADDR
// wait ( 0 0$2 ) ;
20333: LD_INT 70
20335: PPUSH
20336: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
20340: LD_VAR 0 5
20344: PPUSH
20345: CALL 26155 0 1
// end ; end ; 3 :
20349: GO 20423
20351: LD_INT 3
20353: DOUBLE
20354: EQUAL
20355: IFTRUE 20359
20357: GO 20422
20359: POP
// begin ComTimeShift ( i , GetX ( e ) , GetY ( e ) ) ;
20360: LD_VAR 0 6
20364: PPUSH
20365: LD_VAR 0 5
20369: PPUSH
20370: CALL_OW 250
20374: PPUSH
20375: LD_VAR 0 5
20379: PPUSH
20380: CALL_OW 251
20384: PPUSH
20385: CALL_OW 154
// if not dialogRussianSpaceAmmo then
20389: LD_EXP 17
20393: NOT
20394: IFFALSE 20420
// begin dialogRussianSpaceAmmo := true ;
20396: LD_ADDR_EXP 17
20400: PUSH
20401: LD_INT 1
20403: ST_TO_ADDR
// wait ( 0 0$2 ) ;
20404: LD_INT 70
20406: PPUSH
20407: CALL_OW 67
// DRussianSpaceAmmo ( e ) ;
20411: LD_VAR 0 5
20415: PPUSH
20416: CALL 26155 0 1
// end ; end ; end ;
20420: GO 20423
20422: POP
// end ; end else
20423: GO 20449
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
20425: LD_VAR 0 6
20429: PPUSH
20430: LD_VAR 0 7
20434: PPUSH
20435: LD_VAR 0 6
20439: PPUSH
20440: CALL_OW 74
20444: PPUSH
20445: CALL 92728 0 2
// end ; end ;
20449: GO 20074
20451: POP
20452: POP
// until not attackers ;
20453: LD_VAR 0 4
20457: NOT
20458: IFFALSE 20016
// end ;
20460: LD_VAR 0 2
20464: RET
// every 6 6$30 trigger epsilon and firstAttack do var i , un , tmp ;
20465: LD_EXP 10
20469: PUSH
20470: LD_EXP 16
20474: AND
20475: IFFALSE 20587
20477: GO 20479
20479: DISABLE
20480: LD_INT 0
20482: PPUSH
20483: PPUSH
20484: PPUSH
// begin InitHC_All ( ) ;
20485: CALL_OW 584
// for i := 1 to 3 do
20489: LD_ADDR_VAR 0 1
20493: PUSH
20494: DOUBLE
20495: LD_INT 1
20497: DEC
20498: ST_TO_ADDR
20499: LD_INT 3
20501: PUSH
20502: FOR_TO
20503: IFFALSE 20585
// begin uc_side := 6 ;
20505: LD_ADDR_OWVAR 20
20509: PUSH
20510: LD_INT 6
20512: ST_TO_ADDR
// uc_nation := nation_russian ;
20513: LD_ADDR_OWVAR 21
20517: PUSH
20518: LD_INT 3
20520: ST_TO_ADDR
// PrepareSoldier ( false , 3 ) ;
20521: LD_INT 0
20523: PPUSH
20524: LD_INT 3
20526: PPUSH
20527: CALL_OW 381
// un := CreateHuman ;
20531: LD_ADDR_VAR 0 2
20535: PUSH
20536: CALL_OW 44
20540: ST_TO_ADDR
// SetDir ( un , 2 ) ;
20541: LD_VAR 0 2
20545: PPUSH
20546: LD_INT 2
20548: PPUSH
20549: CALL_OW 233
// PlaceUnitArea ( un , ruNorthSpawnArea , false ) ;
20553: LD_VAR 0 2
20557: PPUSH
20558: LD_INT 33
20560: PPUSH
20561: LD_INT 0
20563: PPUSH
20564: CALL_OW 49
// ComAgressiveMove ( un , 52 , 16 ) ;
20568: LD_VAR 0 2
20572: PPUSH
20573: LD_INT 52
20575: PPUSH
20576: LD_INT 16
20578: PPUSH
20579: CALL_OW 114
// end ;
20583: GO 20502
20585: POP
20586: POP
// end ; end_of_file
20587: PPOPN 3
20589: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
20590: LD_VAR 0 1
20594: PPUSH
20595: CALL 47046 0 1
// if unit in JMMSquad then
20599: LD_VAR 0 1
20603: PUSH
20604: LD_EXP 44
20608: IN
20609: IFFALSE 20627
// JMMSquad := JMMSquad diff unit ;
20611: LD_ADDR_EXP 44
20615: PUSH
20616: LD_EXP 44
20620: PUSH
20621: LD_VAR 0 1
20625: DIFF
20626: ST_TO_ADDR
// if unit = Truman then
20627: LD_VAR 0 1
20631: PUSH
20632: LD_EXP 42
20636: EQUAL
20637: IFFALSE 20646
// YouLost ( Powell ) ;
20639: LD_STRING Powell
20641: PPUSH
20642: CALL_OW 104
// if unit = JMM then
20646: LD_VAR 0 1
20650: PUSH
20651: LD_EXP 22
20655: EQUAL
20656: IFFALSE 20665
// YouLost ( JMM ) ;
20658: LD_STRING JMM
20660: PPUSH
20661: CALL_OW 104
// if unit in arEscapist then
20665: LD_VAR 0 1
20669: PUSH
20670: LD_EXP 55
20674: IN
20675: IFFALSE 20693
// arEscapist := arEscapist diff unit ;
20677: LD_ADDR_EXP 55
20681: PUSH
20682: LD_EXP 55
20686: PUSH
20687: LD_VAR 0 1
20691: DIFF
20692: ST_TO_ADDR
// if unit in arAttackersInf then
20693: LD_VAR 0 1
20697: PUSH
20698: LD_EXP 56
20702: IN
20703: IFFALSE 20721
// arAttackersInf := arAttackersInf diff unit ;
20705: LD_ADDR_EXP 56
20709: PUSH
20710: LD_EXP 56
20714: PUSH
20715: LD_VAR 0 1
20719: DIFF
20720: ST_TO_ADDR
// if unit in arAttackersVeh then
20721: LD_VAR 0 1
20725: PUSH
20726: LD_EXP 57
20730: IN
20731: IFFALSE 20749
// arAttackersVeh := arAttackersVeh diff unit ;
20733: LD_ADDR_EXP 57
20737: PUSH
20738: LD_EXP 57
20742: PUSH
20743: LD_VAR 0 1
20747: DIFF
20748: ST_TO_ADDR
// if unit = Khatam then
20749: LD_VAR 0 1
20753: PUSH
20754: LD_EXP 35
20758: EQUAL
20759: IFFALSE 20769
// khatamStatus := false ;
20761: LD_ADDR_EXP 5
20765: PUSH
20766: LD_INT 0
20768: ST_TO_ADDR
// if unit = epsilon then
20769: LD_VAR 0 1
20773: PUSH
20774: LD_EXP 10
20778: EQUAL
20779: IFFALSE 20810
// begin hasBase := false ;
20781: LD_ADDR_EXP 9
20785: PUSH
20786: LD_INT 0
20788: ST_TO_ADDR
// epsilon := 0 ;
20789: LD_ADDR_EXP 10
20793: PUSH
20794: LD_INT 0
20796: ST_TO_ADDR
// SetRestrict ( b_depot , 1 , true ) ;
20797: LD_INT 0
20799: PPUSH
20800: LD_INT 1
20802: PPUSH
20803: LD_INT 1
20805: PPUSH
20806: CALL_OW 324
// end ; if unit = Khatam then
20810: LD_VAR 0 1
20814: PUSH
20815: LD_EXP 35
20819: EQUAL
20820: IFFALSE 20832
// SaveVariable ( 0 , 10_KhatamStatus_1 ) ;
20822: LD_INT 0
20824: PPUSH
20825: LD_STRING 10_KhatamStatus_1
20827: PPUSH
20828: CALL_OW 39
// if unit in ruForces then
20832: LD_VAR 0 1
20836: PUSH
20837: LD_EXP 58
20841: IN
20842: IFFALSE 20860
// ruForces := ruForces diff unit ;
20844: LD_ADDR_EXP 58
20848: PUSH
20849: LD_EXP 58
20853: PUSH
20854: LD_VAR 0 1
20858: DIFF
20859: ST_TO_ADDR
// if unit in ruForces2 then
20860: LD_VAR 0 1
20864: PUSH
20865: LD_EXP 59
20869: IN
20870: IFFALSE 20888
// ruForces2 := ruForces2 diff unit ;
20872: LD_ADDR_EXP 59
20876: PUSH
20877: LD_EXP 59
20881: PUSH
20882: LD_VAR 0 1
20886: DIFF
20887: ST_TO_ADDR
// if unit in ruTanks then
20888: LD_VAR 0 1
20892: PUSH
20893: LD_EXP 77
20897: IN
20898: IFFALSE 20916
// ruTanks := ruTanks diff unit ;
20900: LD_ADDR_EXP 77
20904: PUSH
20905: LD_EXP 77
20909: PUSH
20910: LD_VAR 0 1
20914: DIFF
20915: ST_TO_ADDR
// if unit in ruTanks2 then
20916: LD_VAR 0 1
20920: PUSH
20921: LD_EXP 78
20925: IN
20926: IFFALSE 20944
// ruTanks2 := ruTanks2 diff unit ;
20928: LD_ADDR_EXP 78
20932: PUSH
20933: LD_EXP 78
20937: PUSH
20938: LD_VAR 0 1
20942: DIFF
20943: ST_TO_ADDR
// if unit in ruExtraTanks then
20944: LD_VAR 0 1
20948: PUSH
20949: LD_EXP 79
20953: IN
20954: IFFALSE 20972
// ruExtraTanks := ruExtraTanks diff unit ;
20956: LD_ADDR_EXP 79
20960: PUSH
20961: LD_EXP 79
20965: PUSH
20966: LD_VAR 0 1
20970: DIFF
20971: ST_TO_ADDR
// end ;
20972: PPOPN 1
20974: END
// on UnitGoesToRed ( un ) do var i ;
20975: LD_INT 0
20977: PPUSH
// begin if un = Khatam and GetSide ( Khatam ) = 8 then
20978: LD_VAR 0 1
20982: PUSH
20983: LD_EXP 35
20987: EQUAL
20988: PUSH
20989: LD_EXP 35
20993: PPUSH
20994: CALL_OW 255
20998: PUSH
20999: LD_INT 8
21001: EQUAL
21002: AND
21003: IFFALSE 21014
// KillUnit ( Khatam ) ;
21005: LD_EXP 35
21009: PPUSH
21010: CALL_OW 66
// end ;
21014: PPOPN 2
21016: END
// on SpontaneousTeleported ( un ) do begin if not seenRussianTeleport then
21017: LD_EXP 6
21021: NOT
21022: IFFALSE 21056
// begin seenRussianTeleport := true ;
21024: LD_ADDR_EXP 6
21028: PUSH
21029: LD_INT 1
21031: ST_TO_ADDR
// DTankTeleport ( GetX ( un ) , GetY ( un ) ) ;
21032: LD_VAR 0 1
21036: PPUSH
21037: CALL_OW 250
21041: PPUSH
21042: LD_VAR 0 1
21046: PPUSH
21047: CALL_OW 251
21051: PPUSH
21052: CALL 24192 0 2
// end ; end ;
21056: PPOPN 1
21058: END
// on VehicleConstructed ( veh , fac ) do var side ;
21059: LD_INT 0
21061: PPUSH
// begin SOS_VehicleConstructed ( veh , fac ) ;
21062: LD_VAR 0 1
21066: PPUSH
21067: LD_VAR 0 2
21071: PPUSH
21072: CALL 47166 0 2
// side := GetSide ( fac ) ;
21076: LD_ADDR_VAR 0 3
21080: PUSH
21081: LD_VAR 0 2
21085: PPUSH
21086: CALL_OW 255
21090: ST_TO_ADDR
// if side = 3 then
21091: LD_VAR 0 3
21095: PUSH
21096: LD_INT 3
21098: EQUAL
21099: IFFALSE 21283
// begin if IsInArea ( fac , ruBaseArea ) then
21101: LD_VAR 0 2
21105: PPUSH
21106: LD_EXP 65
21110: PPUSH
21111: CALL_OW 308
21115: IFFALSE 21192
// begin ruConstructList := Delete ( ruConstructList , 1 ) ;
21117: LD_ADDR_EXP 69
21121: PUSH
21122: LD_EXP 69
21126: PPUSH
21127: LD_INT 1
21129: PPUSH
21130: CALL_OW 3
21134: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
21135: LD_VAR 0 1
21139: PPUSH
21140: CALL_OW 263
21144: PUSH
21145: LD_INT 1
21147: EQUAL
21148: IFFALSE 21172
// ruTanks := Join ( ruTanks , veh ) else
21150: LD_ADDR_EXP 77
21154: PUSH
21155: LD_EXP 77
21159: PPUSH
21160: LD_VAR 0 1
21164: PPUSH
21165: CALL 88656 0 2
21169: ST_TO_ADDR
21170: GO 21192
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
21172: LD_ADDR_EXP 79
21176: PUSH
21177: LD_EXP 79
21181: PPUSH
21182: LD_VAR 0 1
21186: PPUSH
21187: CALL 88656 0 2
21191: ST_TO_ADDR
// end ; if IsInArea ( fac , ruBaseArea2 ) then
21192: LD_VAR 0 2
21196: PPUSH
21197: LD_EXP 66
21201: PPUSH
21202: CALL_OW 308
21206: IFFALSE 21283
// begin ruConstructList2 := Delete ( ruConstructList2 , 1 ) ;
21208: LD_ADDR_EXP 70
21212: PUSH
21213: LD_EXP 70
21217: PPUSH
21218: LD_INT 1
21220: PPUSH
21221: CALL_OW 3
21225: ST_TO_ADDR
// if GetControl ( veh ) = control_manual then
21226: LD_VAR 0 1
21230: PPUSH
21231: CALL_OW 263
21235: PUSH
21236: LD_INT 1
21238: EQUAL
21239: IFFALSE 21263
// ruTanks2 := Join ( ruTanks2 , veh ) else
21241: LD_ADDR_EXP 78
21245: PUSH
21246: LD_EXP 78
21250: PPUSH
21251: LD_VAR 0 1
21255: PPUSH
21256: CALL 88656 0 2
21260: ST_TO_ADDR
21261: GO 21283
// ruExtraTanks := Join ( ruExtraTanks , veh ) ;
21263: LD_ADDR_EXP 79
21267: PUSH
21268: LD_EXP 79
21272: PPUSH
21273: LD_VAR 0 1
21277: PPUSH
21278: CALL 88656 0 2
21282: ST_TO_ADDR
// end ; end ; end ;
21283: PPOPN 3
21285: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do var arm , fac , side ;
21286: LD_INT 0
21288: PPUSH
21289: PPUSH
21290: PPUSH
// begin side := GetSide ( driver ) ;
21291: LD_ADDR_VAR 0 7
21295: PUSH
21296: LD_VAR 0 1
21300: PPUSH
21301: CALL_OW 255
21305: ST_TO_ADDR
// if side = 5 then
21306: LD_VAR 0 7
21310: PUSH
21311: LD_INT 5
21313: EQUAL
21314: IFFALSE 21394
// begin arAttackersVeh := arAttackersVeh diff driver ;
21316: LD_ADDR_EXP 57
21320: PUSH
21321: LD_EXP 57
21325: PUSH
21326: LD_VAR 0 1
21330: DIFF
21331: ST_TO_ADDR
// ComMoveXY ( driver , 189 , 80 ) ;
21332: LD_VAR 0 1
21336: PPUSH
21337: LD_INT 189
21339: PPUSH
21340: LD_INT 80
21342: PPUSH
21343: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
21347: LD_INT 35
21349: PPUSH
21350: CALL_OW 67
// if not IsOk ( driver ) then
21354: LD_VAR 0 1
21358: PPUSH
21359: CALL_OW 302
21363: NOT
21364: IFFALSE 21368
// exit ;
21366: GO 21756
// until IsAt ( driver , 189 , 80 ) ;
21368: LD_VAR 0 1
21372: PPUSH
21373: LD_INT 189
21375: PPUSH
21376: LD_INT 80
21378: PPUSH
21379: CALL_OW 307
21383: IFFALSE 21347
// RemoveUnit ( driver ) ;
21385: LD_VAR 0 1
21389: PPUSH
21390: CALL_OW 64
// end ; if side = 6 then
21394: LD_VAR 0 7
21398: PUSH
21399: LD_INT 6
21401: EQUAL
21402: IFFALSE 21460
// begin repeat ComMoveToArea ( driver , arAttackSpawn2Area ) ;
21404: LD_VAR 0 1
21408: PPUSH
21409: LD_INT 19
21411: PPUSH
21412: CALL_OW 113
// wait ( 0 0$3 ) ;
21416: LD_INT 105
21418: PPUSH
21419: CALL_OW 67
// if not IsOk ( driver ) then
21423: LD_VAR 0 1
21427: PPUSH
21428: CALL_OW 302
21432: NOT
21433: IFFALSE 21437
// exit ;
21435: GO 21756
// until IsInArea ( driver , arAttackSpawn2Area ) ;
21437: LD_VAR 0 1
21441: PPUSH
21442: LD_INT 19
21444: PPUSH
21445: CALL_OW 308
21449: IFFALSE 21404
// RemoveUnit ( driver ) ;
21451: LD_VAR 0 1
21455: PPUSH
21456: CALL_OW 64
// end ; if side = 3 then
21460: LD_VAR 0 7
21464: PUSH
21465: LD_INT 3
21467: EQUAL
21468: IFFALSE 21756
// begin if driver in ruMech then
21470: LD_VAR 0 1
21474: PUSH
21475: LD_EXP 62
21479: IN
21480: IFFALSE 21756
// begin ComMoveToArea ( driver , ruBaseArea ) ;
21482: LD_VAR 0 1
21486: PPUSH
21487: LD_EXP 65
21491: PPUSH
21492: CALL_OW 113
// if GetLives ( driver ) < 1000 then
21496: LD_VAR 0 1
21500: PPUSH
21501: CALL_OW 256
21505: PUSH
21506: LD_INT 1000
21508: LESS
21509: IFFALSE 21523
// SetTag ( driver , tHeal ) ;
21511: LD_VAR 0 1
21515: PPUSH
21516: LD_INT 1
21518: PPUSH
21519: CALL_OW 109
// repeat wait ( 0 0$1 ) ;
21523: LD_INT 35
21525: PPUSH
21526: CALL_OW 67
// if IsDead ( driver ) then
21530: LD_VAR 0 1
21534: PPUSH
21535: CALL_OW 301
21539: IFFALSE 21543
// exit ;
21541: GO 21756
// until GetLives ( driver ) = 1000 ;
21543: LD_VAR 0 1
21547: PPUSH
21548: CALL_OW 256
21552: PUSH
21553: LD_INT 1000
21555: EQUAL
21556: IFFALSE 21523
// SetTag ( driver , 0 ) ;
21558: LD_VAR 0 1
21562: PPUSH
21563: LD_INT 0
21565: PPUSH
21566: CALL_OW 109
// fac := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_btype , b_factory ] , [ f_ok ] ] ) ;
21570: LD_ADDR_VAR 0 6
21574: PUSH
21575: LD_EXP 65
21579: PPUSH
21580: LD_INT 22
21582: PUSH
21583: LD_INT 3
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: LD_INT 30
21592: PUSH
21593: LD_INT 3
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: LD_INT 50
21602: PUSH
21603: EMPTY
21604: LIST
21605: PUSH
21606: EMPTY
21607: LIST
21608: LIST
21609: LIST
21610: PPUSH
21611: CALL_OW 70
21615: ST_TO_ADDR
// if fac then
21616: LD_VAR 0 6
21620: IFFALSE 21642
// begin ComEnterUnit ( driver , fac [ 1 ] ) ;
21622: LD_VAR 0 1
21626: PPUSH
21627: LD_VAR 0 6
21631: PUSH
21632: LD_INT 1
21634: ARRAY
21635: PPUSH
21636: CALL_OW 120
// exit ;
21640: GO 21756
// end ; arm := FilterUnitsInArea ( ruBaseArea , [ [ f_side , 3 ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] , [ f_not , [ f_full ] ] , [ f_ok ] ] ) ;
21642: LD_ADDR_VAR 0 5
21646: PUSH
21647: LD_EXP 65
21651: PPUSH
21652: LD_INT 22
21654: PUSH
21655: LD_INT 3
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PUSH
21662: LD_INT 2
21664: PUSH
21665: LD_INT 30
21667: PUSH
21668: LD_INT 4
21670: PUSH
21671: EMPTY
21672: LIST
21673: LIST
21674: PUSH
21675: LD_INT 30
21677: PUSH
21678: LD_INT 5
21680: PUSH
21681: EMPTY
21682: LIST
21683: LIST
21684: PUSH
21685: EMPTY
21686: LIST
21687: LIST
21688: LIST
21689: PUSH
21690: LD_INT 3
21692: PUSH
21693: LD_INT 62
21695: PUSH
21696: EMPTY
21697: LIST
21698: PUSH
21699: EMPTY
21700: LIST
21701: LIST
21702: PUSH
21703: LD_INT 50
21705: PUSH
21706: EMPTY
21707: LIST
21708: PUSH
21709: EMPTY
21710: LIST
21711: LIST
21712: LIST
21713: LIST
21714: PPUSH
21715: CALL_OW 70
21719: ST_TO_ADDR
// if arm then
21720: LD_VAR 0 5
21724: IFFALSE 21756
// begin ComEnterUnit ( driver , arm [ 1 ] ) ;
21726: LD_VAR 0 1
21730: PPUSH
21731: LD_VAR 0 5
21735: PUSH
21736: LD_INT 1
21738: ARRAY
21739: PPUSH
21740: CALL_OW 120
// AddComChangeProfession ( driver , class_soldier ) ;
21744: LD_VAR 0 1
21748: PPUSH
21749: LD_INT 1
21751: PPUSH
21752: CALL_OW 183
// end ; end ; end ; end ;
21756: PPOPN 7
21758: END
// on EndTheMissionRaised ( ev ) do begin end_the_mission_allowed = false ;
21759: LD_ADDR_OWVAR 57
21763: PUSH
21764: LD_INT 0
21766: ST_TO_ADDR
// FinishMission ;
21767: CALL 29462 0 0
// end ;
21771: PPOPN 1
21773: END
// on BuildingComplete ( b ) do var side , type ;
21774: LD_INT 0
21776: PPUSH
21777: PPUSH
// begin side := GetSide ( b ) ;
21778: LD_ADDR_VAR 0 2
21782: PUSH
21783: LD_VAR 0 1
21787: PPUSH
21788: CALL_OW 255
21792: ST_TO_ADDR
// type := GetBType ( b ) ;
21793: LD_ADDR_VAR 0 3
21797: PUSH
21798: LD_VAR 0 1
21802: PPUSH
21803: CALL_OW 266
21807: ST_TO_ADDR
// if side = 2 then
21808: LD_VAR 0 2
21812: PUSH
21813: LD_INT 2
21815: EQUAL
21816: IFFALSE 21836
// arBuildings := Delete ( arBuildings , 1 ) ;
21818: LD_ADDR_EXP 52
21822: PUSH
21823: LD_EXP 52
21827: PPUSH
21828: LD_INT 1
21830: PPUSH
21831: CALL_OW 3
21835: ST_TO_ADDR
// if side = 1 then
21836: LD_VAR 0 2
21840: PUSH
21841: LD_INT 1
21843: EQUAL
21844: IFFALSE 21906
// if type = b_depot and not hasBase then
21846: LD_VAR 0 3
21850: PUSH
21851: LD_INT 0
21853: EQUAL
21854: PUSH
21855: LD_EXP 9
21859: NOT
21860: AND
21861: IFFALSE 21906
// begin hasBase := true ;
21863: LD_ADDR_EXP 9
21867: PUSH
21868: LD_INT 1
21870: ST_TO_ADDR
// epsilon := b ;
21871: LD_ADDR_EXP 10
21875: PUSH
21876: LD_VAR 0 1
21880: ST_TO_ADDR
// SetBName ( b , epsilon ) ;
21881: LD_VAR 0 1
21885: PPUSH
21886: LD_STRING epsilon
21888: PPUSH
21889: CALL_OW 500
// SetRestrict ( b_depot , 1 , false ) ;
21893: LD_INT 0
21895: PPUSH
21896: LD_INT 1
21898: PPUSH
21899: LD_INT 0
21901: PPUSH
21902: CALL_OW 324
// end ; if side = 3 then
21906: LD_VAR 0 2
21910: PUSH
21911: LD_INT 3
21913: EQUAL
21914: IFFALSE 22200
// begin if IsInArea ( b , ruBaseArea ) then
21916: LD_VAR 0 1
21920: PPUSH
21921: LD_EXP 65
21925: PPUSH
21926: CALL_OW 308
21930: IFFALSE 21950
// ruBuildings := Delete ( ruBuildings , 1 ) ;
21932: LD_ADDR_EXP 75
21936: PUSH
21937: LD_EXP 75
21941: PPUSH
21942: LD_INT 1
21944: PPUSH
21945: CALL_OW 3
21949: ST_TO_ADDR
// if IsInArea ( b , ruBaseArea2 ) then
21950: LD_VAR 0 1
21954: PPUSH
21955: LD_EXP 66
21959: PPUSH
21960: CALL_OW 308
21964: IFFALSE 21984
// ruBuildings2 := Delete ( ruBuildings2 , 1 ) ;
21966: LD_ADDR_EXP 76
21970: PUSH
21971: LD_EXP 76
21975: PPUSH
21976: LD_INT 1
21978: PPUSH
21979: CALL_OW 3
21983: ST_TO_ADDR
// if type in [ b_depot , b_armoury , b_workshop ] then
21984: LD_VAR 0 3
21988: PUSH
21989: LD_INT 0
21991: PUSH
21992: LD_INT 4
21994: PUSH
21995: LD_INT 2
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: LIST
22002: IN
22003: IFFALSE 22014
// ComUpgrade ( b ) ;
22005: LD_VAR 0 1
22009: PPUSH
22010: CALL_OW 146
// if type = b_lab then
22014: LD_VAR 0 3
22018: PUSH
22019: LD_INT 6
22021: EQUAL
22022: IFFALSE 22066
// if IsInArea ( b , ruBaseArea ) then
22024: LD_VAR 0 1
22028: PPUSH
22029: LD_EXP 65
22033: PPUSH
22034: CALL_OW 308
22038: IFFALSE 22054
// ComUpgradeLab ( b , b_lab_weapon ) else
22040: LD_VAR 0 1
22044: PPUSH
22045: LD_INT 10
22047: PPUSH
22048: CALL_OW 147
22052: GO 22066
// ComUpgradeLab ( b , b_lab_computer ) ;
22054: LD_VAR 0 1
22058: PPUSH
22059: LD_INT 12
22061: PPUSH
22062: CALL_OW 147
// if type = b_depot then
22066: LD_VAR 0 3
22070: PUSH
22071: LD_INT 0
22073: EQUAL
22074: IFFALSE 22200
// begin SetResourceType ( GetBase ( b ) , mat_cans , 750 ) ;
22076: LD_VAR 0 1
22080: PPUSH
22081: CALL_OW 274
22085: PPUSH
22086: LD_INT 1
22088: PPUSH
22089: LD_INT 750
22091: PPUSH
22092: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_oil , 100 ) ;
22096: LD_VAR 0 1
22100: PPUSH
22101: CALL_OW 274
22105: PPUSH
22106: LD_INT 2
22108: PPUSH
22109: LD_INT 100
22111: PPUSH
22112: CALL_OW 277
// SetResourceType ( GetBase ( b ) , mat_siberit , 100 ) ;
22116: LD_VAR 0 1
22120: PPUSH
22121: CALL_OW 274
22125: PPUSH
22126: LD_INT 3
22128: PPUSH
22129: LD_INT 100
22131: PPUSH
22132: CALL_OW 277
// if IsInArea ( b , ruBaseArea ) then
22136: LD_VAR 0 1
22140: PPUSH
22141: LD_EXP 65
22145: PPUSH
22146: CALL_OW 308
22150: IFFALSE 22174
// begin ruBase := b ;
22152: LD_ADDR_EXP 67
22156: PUSH
22157: LD_VAR 0 1
22161: ST_TO_ADDR
// SetBName ( b , chuikov ) ;
22162: LD_VAR 0 1
22166: PPUSH
22167: LD_STRING chuikov
22169: PPUSH
22170: CALL_OW 500
// end ; if IsInArea ( b , ruBaseArea2 ) then
22174: LD_VAR 0 1
22178: PPUSH
22179: LD_EXP 66
22183: PPUSH
22184: CALL_OW 308
22188: IFFALSE 22200
// begin ruBase2 := b ;
22190: LD_ADDR_EXP 68
22194: PUSH
22195: LD_VAR 0 1
22199: ST_TO_ADDR
// end ; end ; end ; end ;
22200: PPOPN 3
22202: END
// on UpgradeComplete ( b ) do var side , type ;
22203: LD_INT 0
22205: PPUSH
22206: PPUSH
// begin side := GetSide ( b ) ;
22207: LD_ADDR_VAR 0 2
22211: PUSH
22212: LD_VAR 0 1
22216: PPUSH
22217: CALL_OW 255
22221: ST_TO_ADDR
// type := GetBType ( b ) ;
22222: LD_ADDR_VAR 0 3
22226: PUSH
22227: LD_VAR 0 1
22231: PPUSH
22232: CALL_OW 266
22236: ST_TO_ADDR
// if side = 3 then
22237: LD_VAR 0 2
22241: PUSH
22242: LD_INT 3
22244: EQUAL
22245: IFFALSE 22299
// if type = b_lab_half then
22247: LD_VAR 0 3
22251: PUSH
22252: LD_INT 7
22254: EQUAL
22255: IFFALSE 22299
// if IsInArea ( b , ruBaseArea ) then
22257: LD_VAR 0 1
22261: PPUSH
22262: LD_EXP 65
22266: PPUSH
22267: CALL_OW 308
22271: IFFALSE 22287
// ComUpgradeLab ( b , b_lab_spacetime ) else
22273: LD_VAR 0 1
22277: PPUSH
22278: LD_INT 14
22280: PPUSH
22281: CALL_OW 147
22285: GO 22299
// ComUpgradeLab ( b , b_lab_siberium ) ;
22287: LD_VAR 0 1
22291: PPUSH
22292: LD_INT 11
22294: PPUSH
22295: CALL_OW 147
// end ;
22299: PPOPN 3
22301: END
// on ResearchComplete ( tech , lab ) do var side ;
22302: LD_INT 0
22304: PPUSH
// begin side := GetSide ( lab ) ;
22305: LD_ADDR_VAR 0 3
22309: PUSH
22310: LD_VAR 0 2
22314: PPUSH
22315: CALL_OW 255
22319: ST_TO_ADDR
// if side = 2 then
22320: LD_VAR 0 3
22324: PUSH
22325: LD_INT 2
22327: EQUAL
22328: IFFALSE 22376
// begin arTech := Delete ( arTech , 1 ) ;
22330: LD_ADDR_EXP 51
22334: PUSH
22335: LD_EXP 51
22339: PPUSH
22340: LD_INT 1
22342: PPUSH
22343: CALL_OW 3
22347: ST_TO_ADDR
// if tech = tech_sibPow then
22348: LD_VAR 0 1
22352: PUSH
22353: LD_INT 21
22355: EQUAL
22356: IFFALSE 22362
// DArabTrait1 ;
22358: CALL 26563 0 0
// if tech = tech_sibEng then
22362: LD_VAR 0 1
22366: PUSH
22367: LD_INT 22
22369: EQUAL
22370: IFFALSE 22376
// DArabTrait2 ;
22372: CALL 26894 0 0
// end ; end ;
22376: PPOPN 3
22378: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
22379: LD_VAR 0 1
22383: PPUSH
22384: CALL 47150 0 1
// end ;
22388: PPOPN 1
22390: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
22391: LD_VAR 0 1
22395: PUSH
22396: LD_INT 1
22398: EQUAL
22399: PUSH
22400: LD_VAR 0 2
22404: PUSH
22405: LD_INT 2
22407: EQUAL
22408: AND
22409: PUSH
22410: LD_INT 1
22412: PPUSH
22413: LD_INT 2
22415: PPUSH
22416: CALL_OW 81
22420: PUSH
22421: LD_INT 1
22423: EQUAL
22424: AND
22425: IFFALSE 22431
// DAttackOnAlly ;
22427: CALL 24270 0 0
// end ;
22431: PPOPN 2
22433: END
// on SailEvent ( event ) do begin case event of EArabAttack :
22434: LD_VAR 0 1
22438: PUSH
22439: LD_INT 101
22441: DOUBLE
22442: EQUAL
22443: IFTRUE 22447
22445: GO 22454
22447: POP
// ArabAttack ; ERussianBaseC :
22448: CALL 6569 0 0
22452: GO 22606
22454: LD_INT 102
22456: DOUBLE
22457: EQUAL
22458: IFTRUE 22462
22460: GO 22483
22462: POP
// RussianBase ( ruForces union ruCommander , 1 ) ; ERussianBaseW :
22463: LD_EXP 58
22467: PUSH
22468: LD_EXP 60
22472: UNION
22473: PPUSH
22474: LD_INT 1
22476: PPUSH
22477: CALL 9927 0 2
22481: GO 22606
22483: LD_INT 103
22485: DOUBLE
22486: EQUAL
22487: IFTRUE 22491
22489: GO 22512
22491: POP
// RussianBase ( ruForces union ruCommander , 2 ) ; ERussianBaseE :
22492: LD_EXP 58
22496: PUSH
22497: LD_EXP 60
22501: UNION
22502: PPUSH
22503: LD_INT 2
22505: PPUSH
22506: CALL 9927 0 2
22510: GO 22606
22512: LD_INT 104
22514: DOUBLE
22515: EQUAL
22516: IFTRUE 22520
22518: GO 22541
22520: POP
// RussianBase ( ruForces union ruCommander , 3 ) ; ERussianBaseW2 :
22521: LD_EXP 58
22525: PUSH
22526: LD_EXP 60
22530: UNION
22531: PPUSH
22532: LD_INT 3
22534: PPUSH
22535: CALL 9927 0 2
22539: GO 22606
22541: LD_INT 105
22543: DOUBLE
22544: EQUAL
22545: IFTRUE 22549
22547: GO 22570
22549: POP
// RussianBase2 ( ruForces2 union ruCommander2 , 2 ) ; EExtraAttack :
22550: LD_EXP 59
22554: PUSH
22555: LD_EXP 61
22559: UNION
22560: PPUSH
22561: LD_INT 2
22563: PPUSH
22564: CALL 11355 0 2
22568: GO 22606
22570: LD_INT 106
22572: DOUBLE
22573: EQUAL
22574: IFTRUE 22578
22576: GO 22585
22578: POP
// RussianExtraAttack ; ESendRussianAttack :
22579: CALL 18837 0 0
22583: GO 22606
22585: LD_INT 107
22587: DOUBLE
22588: EQUAL
22589: IFTRUE 22593
22591: GO 22605
22593: POP
// SendRussianAttack ( russianWaveAttack ) ; end ;
22594: LD_EXP 18
22598: PPUSH
22599: CALL 19904 0 1
22603: GO 22606
22605: POP
// end ; end_of_file
22606: PPOPN 1
22608: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , speaker ; begin
22609: LD_INT 0
22611: PPUSH
22612: PPUSH
22613: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
22614: LD_ADDR_VAR 0 1
22618: PUSH
22619: LD_VAR 0 1
22623: PUSH
22624: LD_EXP 22
22628: PUSH
22629: LD_EXP 23
22633: PUSH
22634: LD_EXP 24
22638: PUSH
22639: LD_EXP 25
22643: PUSH
22644: LD_EXP 26
22648: PUSH
22649: LD_EXP 27
22653: PUSH
22654: LD_EXP 28
22658: PUSH
22659: LD_EXP 29
22663: PUSH
22664: LD_EXP 30
22668: PUSH
22669: LD_EXP 31
22673: PUSH
22674: LD_EXP 32
22678: PUSH
22679: LD_EXP 33
22683: PUSH
22684: LD_EXP 34
22688: PUSH
22689: LD_EXP 35
22693: PUSH
22694: LD_EXP 36
22698: PUSH
22699: LD_EXP 37
22703: PUSH
22704: LD_EXP 38
22708: PUSH
22709: LD_EXP 39
22713: PUSH
22714: LD_EXP 41
22718: PUSH
22719: LD_EXP 43
22723: PUSH
22724: EMPTY
22725: LIST
22726: LIST
22727: LIST
22728: LIST
22729: LIST
22730: LIST
22731: LIST
22732: LIST
22733: LIST
22734: LIST
22735: LIST
22736: LIST
22737: LIST
22738: LIST
22739: LIST
22740: LIST
22741: LIST
22742: LIST
22743: LIST
22744: LIST
22745: DIFF
22746: ST_TO_ADDR
// if not characters then
22747: LD_VAR 0 1
22751: NOT
22752: IFFALSE 22756
// exit ;
22754: GO 22840
// speaker := characters [ rand ( 1 , Count ( characters ) ) ] ;
22756: LD_ADDR_VAR 0 6
22760: PUSH
22761: LD_VAR 0 1
22765: PUSH
22766: LD_INT 1
22768: PPUSH
22769: LD_VAR 0 1
22773: PPUSH
22774: CALL 53437 0 1
22778: PPUSH
22779: CALL_OW 12
22783: ARRAY
22784: ST_TO_ADDR
// if GetSex ( speaker ) = sex_male then
22785: LD_VAR 0 6
22789: PPUSH
22790: CALL_OW 258
22794: PUSH
22795: LD_INT 1
22797: EQUAL
22798: IFFALSE 22816
// Say ( speaker , dialogMID ) else
22800: LD_VAR 0 6
22804: PPUSH
22805: LD_VAR 0 2
22809: PPUSH
22810: CALL_OW 88
22814: GO 22830
// Say ( speaker , dialogFID ) ;
22816: LD_VAR 0 6
22820: PPUSH
22821: LD_VAR 0 3
22825: PPUSH
22826: CALL_OW 88
// result := speaker ;
22830: LD_ADDR_VAR 0 4
22834: PUSH
22835: LD_VAR 0 6
22839: ST_TO_ADDR
// end ;
22840: LD_VAR 0 4
22844: RET
// export function CanBeBuiltOnlyResources ( depot , btype ) ; var pom , cost ; begin
22845: LD_INT 0
22847: PPUSH
22848: PPUSH
22849: PPUSH
// if btype = b_depot then
22850: LD_VAR 0 2
22854: PUSH
22855: LD_INT 0
22857: EQUAL
22858: IFFALSE 22870
// begin result := true ;
22860: LD_ADDR_VAR 0 3
22864: PUSH
22865: LD_INT 1
22867: ST_TO_ADDR
// exit ;
22868: GO 22986
// end ; pom := GetBase ( depot ) ;
22870: LD_ADDR_VAR 0 4
22874: PUSH
22875: LD_VAR 0 1
22879: PPUSH
22880: CALL_OW 274
22884: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22885: LD_ADDR_VAR 0 5
22889: PUSH
22890: LD_VAR 0 2
22894: PPUSH
22895: LD_VAR 0 1
22899: PPUSH
22900: CALL_OW 248
22904: PPUSH
22905: CALL_OW 450
22909: ST_TO_ADDR
// result := ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) ;
22910: LD_ADDR_VAR 0 3
22914: PUSH
22915: LD_VAR 0 4
22919: PPUSH
22920: LD_INT 1
22922: PPUSH
22923: CALL_OW 275
22927: PUSH
22928: LD_VAR 0 5
22932: PUSH
22933: LD_INT 1
22935: ARRAY
22936: GREATEREQUAL
22937: PUSH
22938: LD_VAR 0 4
22942: PPUSH
22943: LD_INT 2
22945: PPUSH
22946: CALL_OW 275
22950: PUSH
22951: LD_VAR 0 5
22955: PUSH
22956: LD_INT 2
22958: ARRAY
22959: GREATEREQUAL
22960: AND
22961: PUSH
22962: LD_VAR 0 4
22966: PPUSH
22967: LD_INT 3
22969: PPUSH
22970: CALL_OW 275
22974: PUSH
22975: LD_VAR 0 5
22979: PUSH
22980: LD_INT 3
22982: ARRAY
22983: GREATEREQUAL
22984: AND
22985: ST_TO_ADDR
// end ; end_of_file
22986: LD_VAR 0 3
22990: RET
// export function Action ; begin
22991: LD_INT 0
22993: PPUSH
// InGameOn ;
22994: CALL_OW 8
// CenterNowOnXY ( 25 , 35 ) ;
22998: LD_INT 25
23000: PPUSH
23001: LD_INT 35
23003: PPUSH
23004: CALL_OW 86
// RevealFogArea ( 1 , arBaseArea ) ;
23008: LD_INT 1
23010: PPUSH
23011: LD_INT 5
23013: PPUSH
23014: CALL_OW 332
// RevealFogArea ( 1 , epsilonSpawnArea ) ;
23018: LD_INT 1
23020: PPUSH
23021: LD_INT 4
23023: PPUSH
23024: CALL_OW 332
// wait ( 0 0$1.5 ) ;
23028: LD_INT 52
23030: PPUSH
23031: CALL_OW 67
// CenterNowOnUnits ( Simms ) ;
23035: LD_EXP 32
23039: PPUSH
23040: CALL_OW 87
// wait ( 0 0$3 ) ;
23044: LD_INT 105
23046: PPUSH
23047: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
23051: LD_EXP 22
23055: PPUSH
23056: CALL_OW 310
23060: PPUSH
23061: CALL_OW 85
// wait ( 0 0$1 ) ;
23065: LD_INT 35
23067: PPUSH
23068: CALL_OW 67
// if IsOk ( Gary ) then
23072: LD_EXP 31
23076: PPUSH
23077: CALL_OW 302
23081: IFFALSE 23119
// begin Say ( Gary , D2-Gary-1 ) ;
23083: LD_EXP 31
23087: PPUSH
23088: LD_STRING D2-Gary-1
23090: PPUSH
23091: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
23095: LD_EXP 22
23099: PPUSH
23100: LD_STRING D2-JMM-1
23102: PPUSH
23103: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
23107: LD_EXP 31
23111: PPUSH
23112: LD_STRING D2-Gary-2
23114: PPUSH
23115: CALL_OW 88
// end ; InGameOff ;
23119: CALL_OW 9
// ChangeMissionObjectives ( M1 ) ;
23123: LD_STRING M1
23125: PPUSH
23126: CALL_OW 337
// SaveForQuickRestart ;
23130: CALL_OW 22
// end ;
23134: LD_VAR 0 1
23138: RET
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var i , p ;
23139: LD_EXP 22
23143: PPUSH
23144: LD_EXP 32
23148: PPUSH
23149: CALL_OW 296
23153: PUSH
23154: LD_INT 15
23156: LESS
23157: IFFALSE 24102
23159: GO 23161
23161: DISABLE
23162: LD_INT 0
23164: PPUSH
23165: PPUSH
// begin wait ( 0 0$3 ) ;
23166: LD_INT 105
23168: PPUSH
23169: CALL_OW 67
// Video ( true ) ;
23173: LD_INT 1
23175: PPUSH
23176: CALL 88628 0 1
// ComExitVehicle ( JMM ) ;
23180: LD_EXP 22
23184: PPUSH
23185: CALL_OW 121
// AddComMoveUnit ( JMM , Simms ) ;
23189: LD_EXP 22
23193: PPUSH
23194: LD_EXP 32
23198: PPUSH
23199: CALL_OW 172
// CenterNowOnUnits ( JMM ) ;
23203: LD_EXP 22
23207: PPUSH
23208: CALL_OW 87
// if Truman then
23212: LD_EXP 42
23216: IFFALSE 23353
// begin ComMoveUnit ( Truman , JMM ) ;
23218: LD_EXP 42
23222: PPUSH
23223: LD_EXP 22
23227: PPUSH
23228: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
23232: LD_INT 35
23234: PPUSH
23235: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
23239: LD_EXP 42
23243: PPUSH
23244: LD_EXP 22
23248: PPUSH
23249: CALL_OW 296
23253: PUSH
23254: LD_INT 6
23256: LESS
23257: IFFALSE 23232
// ComTurnUnit ( Truman , JMM ) ;
23259: LD_EXP 42
23263: PPUSH
23264: LD_EXP 22
23268: PPUSH
23269: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
23273: LD_EXP 22
23277: PPUSH
23278: LD_EXP 42
23282: PPUSH
23283: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
23287: LD_EXP 42
23291: PPUSH
23292: LD_STRING D2-Tru-1
23294: PPUSH
23295: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
23299: LD_EXP 22
23303: PPUSH
23304: LD_STRING D2-JMM-Tru-1
23306: PPUSH
23307: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
23311: LD_EXP 42
23315: PPUSH
23316: LD_STRING D2-Tru-2
23318: PPUSH
23319: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
23323: LD_EXP 42
23327: PPUSH
23328: LD_INT 79
23330: PPUSH
23331: LD_INT 41
23333: PPUSH
23334: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
23338: LD_EXP 42
23342: PPUSH
23343: LD_INT 17
23345: PPUSH
23346: LD_INT 31
23348: PPUSH
23349: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
23353: LD_EXP 22
23357: PPUSH
23358: LD_EXP 32
23362: PPUSH
23363: CALL_OW 179
// p := 15 ;
23367: LD_ADDR_VAR 0 2
23371: PUSH
23372: LD_INT 15
23374: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
23375: LD_INT 35
23377: PPUSH
23378: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
23382: LD_EXP 32
23386: PUSH
23387: LD_EXP 34
23391: PUSH
23392: LD_EXP 33
23396: PUSH
23397: LD_EXP 35
23401: PUSH
23402: LD_EXP 29
23406: PUSH
23407: EMPTY
23408: LIST
23409: LIST
23410: LIST
23411: LIST
23412: LIST
23413: PPUSH
23414: LD_EXP 22
23418: PPUSH
23419: CALL_OW 112
// p := p - 1 ;
23423: LD_ADDR_VAR 0 2
23427: PUSH
23428: LD_VAR 0 2
23432: PUSH
23433: LD_INT 1
23435: MINUS
23436: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
23437: LD_EXP 22
23441: PPUSH
23442: LD_EXP 32
23446: PPUSH
23447: CALL_OW 296
23451: PUSH
23452: LD_INT 5
23454: LESS
23455: PUSH
23456: LD_VAR 0 2
23460: PUSH
23461: LD_INT 0
23463: LESSEQUAL
23464: OR
23465: IFFALSE 23375
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
23467: LD_EXP 32
23471: PUSH
23472: LD_EXP 34
23476: PUSH
23477: LD_EXP 33
23481: PUSH
23482: LD_EXP 35
23486: PUSH
23487: LD_EXP 29
23491: PUSH
23492: EMPTY
23493: LIST
23494: LIST
23495: LIST
23496: LIST
23497: LIST
23498: PPUSH
23499: LD_EXP 22
23503: PPUSH
23504: CALL_OW 119
// if not IsInUnit ( JMM ) then
23508: LD_EXP 22
23512: PPUSH
23513: CALL_OW 310
23517: NOT
23518: IFFALSE 23534
// ComTurnUnit ( JMM , Simms ) ;
23520: LD_EXP 22
23524: PPUSH
23525: LD_EXP 32
23529: PPUSH
23530: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
23534: LD_EXP 32
23538: PUSH
23539: LD_EXP 34
23543: PUSH
23544: LD_EXP 33
23548: PUSH
23549: LD_EXP 35
23553: PUSH
23554: EMPTY
23555: LIST
23556: LIST
23557: LIST
23558: LIST
23559: PPUSH
23560: LD_EXP 22
23564: PPUSH
23565: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
23569: LD_EXP 22
23573: PUSH
23574: LD_EXP 32
23578: PUSH
23579: EMPTY
23580: LIST
23581: LIST
23582: PPUSH
23583: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
23587: LD_EXP 32
23591: PPUSH
23592: LD_STRING D2a-Sim-1
23594: PPUSH
23595: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
23599: LD_EXP 22
23603: PPUSH
23604: LD_STRING D2a-JMM-1
23606: PPUSH
23607: CALL_OW 88
// if IsOk ( Joan ) then
23611: LD_EXP 34
23615: PPUSH
23616: CALL_OW 302
23620: IFFALSE 23698
// begin if not IsInUnit ( JMM ) then
23622: LD_EXP 22
23626: PPUSH
23627: CALL_OW 310
23631: NOT
23632: IFFALSE 23648
// ComTurnUnit ( JMM , Joan ) ;
23634: LD_EXP 22
23638: PPUSH
23639: LD_EXP 34
23643: PPUSH
23644: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
23648: LD_EXP 34
23652: PPUSH
23653: LD_EXP 22
23657: PPUSH
23658: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
23662: LD_EXP 34
23666: PPUSH
23667: LD_STRING D2b-Joan-1
23669: PPUSH
23670: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
23674: LD_EXP 22
23678: PPUSH
23679: LD_STRING D2b-JMM-1
23681: PPUSH
23682: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
23686: LD_EXP 34
23690: PPUSH
23691: LD_STRING D2b-Joan-2
23693: PPUSH
23694: CALL_OW 88
// end ; if IsOk ( Denis ) then
23698: LD_EXP 33
23702: PPUSH
23703: CALL_OW 302
23707: IFFALSE 23761
// begin if not IsInUnit ( JMM ) then
23709: LD_EXP 22
23713: PPUSH
23714: CALL_OW 310
23718: NOT
23719: IFFALSE 23735
// ComTurnUnit ( JMM , Denis ) ;
23721: LD_EXP 22
23725: PPUSH
23726: LD_EXP 33
23730: PPUSH
23731: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
23735: LD_EXP 33
23739: PPUSH
23740: LD_EXP 22
23744: PPUSH
23745: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
23749: LD_EXP 33
23753: PPUSH
23754: LD_STRING D2c-Den-1
23756: PPUSH
23757: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
23761: LD_EXP 29
23765: PPUSH
23766: CALL_OW 302
23770: PUSH
23771: LD_STRING 08_Kikuchi
23773: PPUSH
23774: CALL_OW 28
23778: NOT
23779: AND
23780: IFFALSE 23875
// begin repeat wait ( 0 0$1 ) ;
23782: LD_INT 35
23784: PPUSH
23785: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
23789: LD_EXP 29
23793: PPUSH
23794: LD_EXP 22
23798: PPUSH
23799: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
23803: LD_EXP 22
23807: PPUSH
23808: LD_EXP 29
23812: PPUSH
23813: CALL_OW 296
23817: PUSH
23818: LD_INT 5
23820: LESS
23821: IFFALSE 23782
// ComTurnUnit ( Kikuchi , JMM ) ;
23823: LD_EXP 29
23827: PPUSH
23828: LD_EXP 22
23832: PPUSH
23833: CALL_OW 119
// if not IsInUnit ( JMM ) then
23837: LD_EXP 22
23841: PPUSH
23842: CALL_OW 310
23846: NOT
23847: IFFALSE 23863
// ComTurnUnit ( JMM , Kikuchi ) ;
23849: LD_EXP 22
23853: PPUSH
23854: LD_EXP 29
23858: PPUSH
23859: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
23863: LD_EXP 29
23867: PPUSH
23868: LD_STRING D3b-Yam-1
23870: PPUSH
23871: CALL_OW 88
// end ; if IsOk ( Khatam ) then
23875: LD_EXP 35
23879: PPUSH
23880: CALL_OW 302
23884: IFFALSE 23950
// begin if not IsInUnit ( JMM ) then
23886: LD_EXP 22
23890: PPUSH
23891: CALL_OW 310
23895: NOT
23896: IFFALSE 23912
// ComTurnUnit ( JMM , Khatam ) ;
23898: LD_EXP 22
23902: PPUSH
23903: LD_EXP 35
23907: PPUSH
23908: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
23912: LD_EXP 35
23916: PPUSH
23917: LD_EXP 22
23921: PPUSH
23922: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
23926: LD_EXP 22
23930: PPUSH
23931: LD_STRING D2c-JMM-1
23933: PPUSH
23934: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
23938: LD_EXP 35
23942: PPUSH
23943: LD_STRING D2c-Khat-1
23945: PPUSH
23946: CALL_OW 88
// end ; Video ( false ) ;
23950: LD_INT 0
23952: PPUSH
23953: CALL 88628 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
23957: LD_INT 22
23959: PUSH
23960: LD_INT 4
23962: PUSH
23963: EMPTY
23964: LIST
23965: LIST
23966: PPUSH
23967: CALL_OW 69
23971: PUSH
23972: LD_EXP 42
23976: DIFF
23977: PPUSH
23978: LD_INT 1
23980: PPUSH
23981: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
23985: LD_STRING M1a
23987: PPUSH
23988: CALL_OW 337
// SetRestrict ( b_depot , 1 , true ) ;
23992: LD_INT 0
23994: PPUSH
23995: LD_INT 1
23997: PPUSH
23998: LD_INT 1
24000: PPUSH
24001: CALL_OW 324
// joinedToEpsilon := true ;
24005: LD_ADDR_EXP 7
24009: PUSH
24010: LD_INT 1
24012: ST_TO_ADDR
// wait ( 0 0$30 ) ;
24013: LD_INT 1050
24015: PPUSH
24016: CALL_OW 67
// SpawnConvoy ;
24020: CALL 9463 0 0
// wait ( 10 10$00 - ( 1 1$00 * Difficulty ) ) ;
24024: LD_INT 21000
24026: PUSH
24027: LD_INT 2100
24029: PUSH
24030: LD_OWVAR 67
24034: MUL
24035: MINUS
24036: PPUSH
24037: CALL_OW 67
// firstAttack := true ;
24041: LD_ADDR_EXP 16
24045: PUSH
24046: LD_INT 1
24048: ST_TO_ADDR
// RaiseSailEvent ( ESendRussianAttack ) ;
24049: LD_INT 107
24051: PPUSH
24052: CALL_OW 427
// for i := 1 to Difficulty do
24056: LD_ADDR_VAR 0 1
24060: PUSH
24061: DOUBLE
24062: LD_INT 1
24064: DEC
24065: ST_TO_ADDR
24066: LD_OWVAR 67
24070: PUSH
24071: FOR_TO
24072: IFFALSE 24100
// begin wait ( 12 12$00 - ( 1 1$00 * Difficulty ) ) ;
24074: LD_INT 25200
24076: PUSH
24077: LD_INT 2100
24079: PUSH
24080: LD_OWVAR 67
24084: MUL
24085: MINUS
24086: PPUSH
24087: CALL_OW 67
// RaiseSailEvent ( ESendRussianAttack ) ;
24091: LD_INT 107
24093: PPUSH
24094: CALL_OW 427
// end ;
24098: GO 24071
24100: POP
24101: POP
// end ;
24102: PPOPN 2
24104: END
// every 0 0$1 trigger IsOk ( Truman ) and joinedToEpsilon do
24105: LD_EXP 42
24109: PPUSH
24110: CALL_OW 302
24114: PUSH
24115: LD_EXP 7
24119: AND
24120: IFFALSE 24191
24122: GO 24124
24124: DISABLE
// begin enable ;
24125: ENABLE
// if not HasTask ( Truman ) then
24126: LD_EXP 42
24130: PPUSH
24131: CALL_OW 314
24135: NOT
24136: IFFALSE 24150
// ComMoveToArea ( Truman , removeArea ) ;
24138: LD_EXP 42
24142: PPUSH
24143: LD_INT 10
24145: PPUSH
24146: CALL_OW 113
// if IsAt ( Truman , 17 , 32 ) or IsInArea ( Truman , removeArea ) then
24150: LD_EXP 42
24154: PPUSH
24155: LD_INT 17
24157: PPUSH
24158: LD_INT 32
24160: PPUSH
24161: CALL_OW 307
24165: PUSH
24166: LD_EXP 42
24170: PPUSH
24171: LD_INT 10
24173: PPUSH
24174: CALL_OW 308
24178: OR
24179: IFFALSE 24191
// begin RemoveUnit ( Truman ) ;
24181: LD_EXP 42
24185: PPUSH
24186: CALL_OW 64
// disable ;
24190: DISABLE
// end ; end ;
24191: END
// export function DTankTeleport ( x , y ) ; begin
24192: LD_INT 0
24194: PPUSH
// DialogueOn ;
24195: CALL_OW 6
// CenterNowOnXY ( x , y ) ;
24199: LD_VAR 0 1
24203: PPUSH
24204: LD_VAR 0 2
24208: PPUSH
24209: CALL_OW 86
// if IsOk ( Cyrus ) then
24213: LD_EXP 26
24217: PPUSH
24218: CALL_OW 302
24222: IFFALSE 24238
// Say ( Cyrus , D10-Cyrus-1 ) else
24224: LD_EXP 26
24228: PPUSH
24229: LD_STRING D10-Cyrus-1
24231: PPUSH
24232: CALL_OW 88
24236: GO 24261
// if IsOk ( JMM ) then
24238: LD_EXP 22
24242: PPUSH
24243: CALL_OW 302
24247: IFFALSE 24261
// Say ( JMM , D10-JMM-1 ) ;
24249: LD_EXP 22
24253: PPUSH
24254: LD_STRING D10-JMM-1
24256: PPUSH
24257: CALL_OW 88
// DialogueOff ;
24261: CALL_OW 7
// end ;
24265: LD_VAR 0 3
24269: RET
// export function DAttackOnAlly ; begin
24270: LD_INT 0
24272: PPUSH
// DialogueOn ;
24273: CALL_OW 6
// dwait ( 0 0$0.3 ) ;
24277: LD_INT 10
24279: PPUSH
24280: CALL_OW 68
// SayRadio ( Powell , D6b-Pow-1 ) ;
24284: LD_EXP 43
24288: PPUSH
24289: LD_STRING D6b-Pow-1
24291: PPUSH
24292: CALL_OW 94
// YouLost ( Powell ) ;
24296: LD_STRING Powell
24298: PPUSH
24299: CALL_OW 104
// DialogueOff ;
24303: CALL_OW 7
// end ;
24307: LD_VAR 0 1
24311: RET
// every 0 0$5 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
24312: LD_INT 5
24314: PPUSH
24315: LD_INT 22
24317: PUSH
24318: LD_INT 1
24320: PUSH
24321: EMPTY
24322: LIST
24323: LIST
24324: PUSH
24325: LD_INT 21
24327: PUSH
24328: LD_INT 3
24330: PUSH
24331: EMPTY
24332: LIST
24333: LIST
24334: PUSH
24335: EMPTY
24336: LIST
24337: LIST
24338: PPUSH
24339: CALL_OW 70
24343: PUSH
24344: LD_INT 5
24346: PPUSH
24347: LD_INT 22
24349: PUSH
24350: LD_INT 1
24352: PUSH
24353: EMPTY
24354: LIST
24355: LIST
24356: PUSH
24357: LD_INT 21
24359: PUSH
24360: LD_INT 2
24362: PUSH
24363: EMPTY
24364: LIST
24365: LIST
24366: PUSH
24367: EMPTY
24368: LIST
24369: LIST
24370: PPUSH
24371: CALL_OW 70
24375: OR
24376: PUSH
24377: LD_INT 1
24379: PPUSH
24380: LD_INT 2
24382: PPUSH
24383: CALL_OW 81
24387: PUSH
24388: LD_INT 1
24390: EQUAL
24391: AND
24392: IFFALSE 24627
24394: GO 24396
24396: DISABLE
// begin if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
24397: LD_INT 5
24399: PPUSH
24400: LD_INT 22
24402: PUSH
24403: LD_INT 1
24405: PUSH
24406: EMPTY
24407: LIST
24408: LIST
24409: PUSH
24410: LD_INT 21
24412: PUSH
24413: LD_INT 3
24415: PUSH
24416: EMPTY
24417: LIST
24418: LIST
24419: PUSH
24420: EMPTY
24421: LIST
24422: LIST
24423: PPUSH
24424: CALL_OW 70
24428: PUSH
24429: LD_INT 5
24431: PPUSH
24432: LD_INT 22
24434: PUSH
24435: LD_INT 1
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: PUSH
24442: LD_INT 21
24444: PUSH
24445: LD_INT 2
24447: PUSH
24448: EMPTY
24449: LIST
24450: LIST
24451: PUSH
24452: EMPTY
24453: LIST
24454: LIST
24455: PPUSH
24456: CALL_OW 70
24460: OR
24461: PUSH
24462: LD_INT 1
24464: PPUSH
24465: LD_INT 2
24467: PPUSH
24468: CALL_OW 81
24472: PUSH
24473: LD_INT 1
24475: EQUAL
24476: AND
24477: IFFALSE 24486
// Query ( QAttack ) ;
24479: LD_STRING QAttack
24481: PPUSH
24482: CALL_OW 97
// wait ( 0 0$20 ) ;
24486: LD_INT 700
24488: PPUSH
24489: CALL_OW 67
// repeat wait ( 0 0$10 ) ;
24493: LD_INT 350
24495: PPUSH
24496: CALL_OW 67
// if arabianAttack then
24500: LD_EXP 4
24504: IFFALSE 24508
// exit ;
24506: GO 24627
// until ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend ;
24508: LD_INT 5
24510: PPUSH
24511: LD_INT 22
24513: PUSH
24514: LD_INT 1
24516: PUSH
24517: EMPTY
24518: LIST
24519: LIST
24520: PUSH
24521: LD_INT 21
24523: PUSH
24524: LD_INT 3
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PPUSH
24535: CALL_OW 70
24539: PUSH
24540: LD_INT 5
24542: PPUSH
24543: LD_INT 22
24545: PUSH
24546: LD_INT 1
24548: PUSH
24549: EMPTY
24550: LIST
24551: LIST
24552: PUSH
24553: LD_INT 21
24555: PUSH
24556: LD_INT 2
24558: PUSH
24559: EMPTY
24560: LIST
24561: LIST
24562: PUSH
24563: EMPTY
24564: LIST
24565: LIST
24566: PPUSH
24567: CALL_OW 70
24571: OR
24572: PUSH
24573: LD_INT 1
24575: PPUSH
24576: LD_INT 2
24578: PPUSH
24579: CALL_OW 81
24583: PUSH
24584: LD_INT 1
24586: EQUAL
24587: AND
24588: IFFALSE 24493
// InGameOn ;
24590: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
24594: LD_INT 73
24596: PPUSH
24597: LD_INT 18
24599: PPUSH
24600: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
24604: LD_EXP 43
24608: PPUSH
24609: LD_STRING D6b-Pow-1
24611: PPUSH
24612: CALL_OW 94
// YouLost ( Powell ) ;
24616: LD_STRING Powell
24618: PPUSH
24619: CALL_OW 104
// InGameOff ;
24623: CALL_OW 9
// end ;
24627: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
24628: LD_INT 12
24630: PPUSH
24631: LD_INT 1
24633: PPUSH
24634: CALL_OW 321
24638: PUSH
24639: LD_INT 2
24641: EQUAL
24642: IFFALSE 24654
24644: GO 24646
24646: DISABLE
// ChangeMissionObjectives ( M2b ) ;
24647: LD_STRING M2b
24649: PPUSH
24650: CALL_OW 337
24654: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
24655: LD_INT 32
24657: PPUSH
24658: LD_INT 1
24660: PPUSH
24661: CALL_OW 321
24665: PUSH
24666: LD_INT 2
24668: EQUAL
24669: IFFALSE 24681
24671: GO 24673
24673: DISABLE
// ChangeMissionObjectives ( M2c ) ;
24674: LD_STRING M2c
24676: PPUSH
24677: CALL_OW 337
24681: END
// every 0 0$1 trigger arabianAttack and arabianAttackSpawned and FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and UnitFilter ( arAttackersVeh , [ f_ok ] ) = 0 and UnitFilter ( arAttackersInf , [ f_ok ] ) = 0 do
24682: LD_EXP 4
24686: PUSH
24687: LD_EXP 12
24691: AND
24692: PUSH
24693: LD_INT 22
24695: PUSH
24696: LD_INT 2
24698: PUSH
24699: EMPTY
24700: LIST
24701: LIST
24702: PUSH
24703: LD_INT 21
24705: PUSH
24706: LD_INT 1
24708: PUSH
24709: EMPTY
24710: LIST
24711: LIST
24712: PUSH
24713: EMPTY
24714: LIST
24715: LIST
24716: PPUSH
24717: CALL_OW 69
24721: PUSH
24722: LD_INT 0
24724: EQUAL
24725: AND
24726: PUSH
24727: LD_EXP 57
24731: PPUSH
24732: LD_INT 50
24734: PUSH
24735: EMPTY
24736: LIST
24737: PPUSH
24738: CALL_OW 72
24742: PUSH
24743: LD_INT 0
24745: EQUAL
24746: AND
24747: PUSH
24748: LD_EXP 56
24752: PPUSH
24753: LD_INT 50
24755: PUSH
24756: EMPTY
24757: LIST
24758: PPUSH
24759: CALL_OW 72
24763: PUSH
24764: LD_INT 0
24766: EQUAL
24767: AND
24768: IFFALSE 24788
24770: GO 24772
24772: DISABLE
// begin arabianDefeated := true ;
24773: LD_ADDR_EXP 8
24777: PUSH
24778: LD_INT 1
24780: ST_TO_ADDR
// ChangeMissionObjectives ( M4a ) ;
24781: LD_STRING M4a
24783: PPUSH
24784: CALL_OW 337
// end ;
24788: END
// every 0 0$1 trigger GetTech ( tech_Sib1 , 1 ) = state_researched and GetTech ( tech_Sib2 , 1 ) = state_researched and GetTech ( tech_SibPow , 1 ) = state_researched and GetTech ( tech_SibEng , 1 ) = state_researched do
24789: LD_INT 54
24791: PPUSH
24792: LD_INT 1
24794: PPUSH
24795: CALL_OW 321
24799: PUSH
24800: LD_INT 2
24802: EQUAL
24803: PUSH
24804: LD_INT 55
24806: PPUSH
24807: LD_INT 1
24809: PPUSH
24810: CALL_OW 321
24814: PUSH
24815: LD_INT 2
24817: EQUAL
24818: AND
24819: PUSH
24820: LD_INT 21
24822: PPUSH
24823: LD_INT 1
24825: PPUSH
24826: CALL_OW 321
24830: PUSH
24831: LD_INT 2
24833: EQUAL
24834: AND
24835: PUSH
24836: LD_INT 22
24838: PPUSH
24839: LD_INT 1
24841: PPUSH
24842: CALL_OW 321
24846: PUSH
24847: LD_INT 2
24849: EQUAL
24850: AND
24851: IFFALSE 24863
24853: GO 24855
24855: DISABLE
// ChangeMissionObjectives ( M2a ) ;
24856: LD_STRING M2a
24858: PPUSH
24859: CALL_OW 337
24863: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_lab , b_lab_siberium ] ] ) do var garySpeaker , deltaSpeaker , tmp1 , tmp2 , tmp3 ;
24864: LD_INT 22
24866: PUSH
24867: LD_INT 1
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 63
24876: PUSH
24877: LD_INT 11
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: EMPTY
24885: LIST
24886: LIST
24887: PPUSH
24888: CALL_OW 69
24892: IFFALSE 26105
24894: GO 24896
24896: DISABLE
24897: LD_INT 0
24899: PPUSH
24900: PPUSH
24901: PPUSH
24902: PPUSH
24903: PPUSH
// begin garySpeaker := IsOk ( Gary ) ;
24904: LD_ADDR_VAR 0 1
24908: PUSH
24909: LD_EXP 31
24913: PPUSH
24914: CALL_OW 302
24918: ST_TO_ADDR
// deltaSpeaker := IsOk ( DeltaDoctor ) ;
24919: LD_ADDR_VAR 0 2
24923: PUSH
24924: LD_EXP 38
24928: PPUSH
24929: CALL_OW 302
24933: ST_TO_ADDR
// tmp1 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
24934: LD_ADDR_VAR 0 3
24938: PUSH
24939: LD_INT 22
24941: PUSH
24942: LD_INT 1
24944: PUSH
24945: EMPTY
24946: LIST
24947: LIST
24948: PUSH
24949: LD_INT 50
24951: PUSH
24952: EMPTY
24953: LIST
24954: PUSH
24955: LD_INT 25
24957: PUSH
24958: LD_INT 4
24960: PUSH
24961: EMPTY
24962: LIST
24963: LIST
24964: PUSH
24965: LD_INT 26
24967: PUSH
24968: LD_INT 1
24970: PUSH
24971: EMPTY
24972: LIST
24973: LIST
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: PPUSH
24981: CALL_OW 69
24985: PUSH
24986: LD_EXP 22
24990: PUSH
24991: LD_EXP 23
24995: PUSH
24996: LD_EXP 24
25000: PUSH
25001: LD_EXP 25
25005: PUSH
25006: LD_EXP 26
25010: PUSH
25011: LD_EXP 27
25015: PUSH
25016: LD_EXP 28
25020: PUSH
25021: LD_EXP 29
25025: PUSH
25026: LD_EXP 30
25030: PUSH
25031: LD_EXP 31
25035: PUSH
25036: LD_EXP 32
25040: PUSH
25041: LD_EXP 33
25045: PUSH
25046: LD_EXP 34
25050: PUSH
25051: LD_EXP 35
25055: PUSH
25056: LD_EXP 36
25060: PUSH
25061: LD_EXP 37
25065: PUSH
25066: LD_EXP 38
25070: PUSH
25071: LD_EXP 39
25075: PUSH
25076: LD_EXP 41
25080: PUSH
25081: LD_EXP 43
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: LIST
25090: LIST
25091: LIST
25092: LIST
25093: LIST
25094: LIST
25095: LIST
25096: LIST
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: LIST
25103: LIST
25104: LIST
25105: LIST
25106: LIST
25107: DIFF
25108: ST_TO_ADDR
// tmp2 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
25109: LD_ADDR_VAR 0 4
25113: PUSH
25114: LD_INT 22
25116: PUSH
25117: LD_INT 1
25119: PUSH
25120: EMPTY
25121: LIST
25122: LIST
25123: PUSH
25124: LD_INT 50
25126: PUSH
25127: EMPTY
25128: LIST
25129: PUSH
25130: LD_INT 26
25132: PUSH
25133: LD_INT 1
25135: PUSH
25136: EMPTY
25137: LIST
25138: LIST
25139: PUSH
25140: LD_INT 2
25142: PUSH
25143: LD_INT 25
25145: PUSH
25146: LD_INT 1
25148: PUSH
25149: EMPTY
25150: LIST
25151: LIST
25152: PUSH
25153: LD_INT 25
25155: PUSH
25156: LD_INT 2
25158: PUSH
25159: EMPTY
25160: LIST
25161: LIST
25162: PUSH
25163: LD_INT 25
25165: PUSH
25166: LD_INT 3
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: EMPTY
25174: LIST
25175: LIST
25176: LIST
25177: LIST
25178: PUSH
25179: EMPTY
25180: LIST
25181: LIST
25182: LIST
25183: LIST
25184: PPUSH
25185: CALL_OW 69
25189: PUSH
25190: LD_EXP 22
25194: PUSH
25195: LD_EXP 23
25199: PUSH
25200: LD_EXP 24
25204: PUSH
25205: LD_EXP 25
25209: PUSH
25210: LD_EXP 26
25214: PUSH
25215: LD_EXP 27
25219: PUSH
25220: LD_EXP 28
25224: PUSH
25225: LD_EXP 29
25229: PUSH
25230: LD_EXP 30
25234: PUSH
25235: LD_EXP 31
25239: PUSH
25240: LD_EXP 32
25244: PUSH
25245: LD_EXP 33
25249: PUSH
25250: LD_EXP 34
25254: PUSH
25255: LD_EXP 35
25259: PUSH
25260: LD_EXP 36
25264: PUSH
25265: LD_EXP 37
25269: PUSH
25270: LD_EXP 38
25274: PUSH
25275: LD_EXP 39
25279: PUSH
25280: LD_EXP 41
25284: PUSH
25285: LD_EXP 43
25289: PUSH
25290: EMPTY
25291: LIST
25292: LIST
25293: LIST
25294: LIST
25295: LIST
25296: LIST
25297: LIST
25298: LIST
25299: LIST
25300: LIST
25301: LIST
25302: LIST
25303: LIST
25304: LIST
25305: LIST
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: LIST
25311: DIFF
25312: ST_TO_ADDR
// if tmp1 then
25313: LD_VAR 0 3
25317: IFFALSE 25333
// tmp1 := tmp1 [ 1 ] ;
25319: LD_ADDR_VAR 0 3
25323: PUSH
25324: LD_VAR 0 3
25328: PUSH
25329: LD_INT 1
25331: ARRAY
25332: ST_TO_ADDR
// if tmp2 then
25333: LD_VAR 0 4
25337: IFFALSE 25353
// tmp2 := tmp2 [ 1 ] ;
25339: LD_ADDR_VAR 0 4
25343: PUSH
25344: LD_VAR 0 4
25348: PUSH
25349: LD_INT 1
25351: ARRAY
25352: ST_TO_ADDR
// if ( garySpeaker or tmp2 ) and ( deltaSpeaker or tmp1 ) then
25353: LD_VAR 0 1
25357: PUSH
25358: LD_VAR 0 4
25362: OR
25363: PUSH
25364: LD_VAR 0 2
25368: PUSH
25369: LD_VAR 0 3
25373: OR
25374: AND
25375: IFFALSE 25569
// begin DialogueOn ;
25377: CALL_OW 6
// if deltaSpeaker then
25381: LD_VAR 0 2
25385: IFFALSE 25401
// Say ( DeltaDoctor , D3-Sci1-1 ) else
25387: LD_EXP 38
25391: PPUSH
25392: LD_STRING D3-Sci1-1
25394: PPUSH
25395: CALL_OW 88
25399: GO 25413
// Say ( tmp1 , D3-Sci1-1 ) ;
25401: LD_VAR 0 3
25405: PPUSH
25406: LD_STRING D3-Sci1-1
25408: PPUSH
25409: CALL_OW 88
// if garySpeaker then
25413: LD_VAR 0 1
25417: IFFALSE 25433
// Say ( Gary , D3-Gary-1 ) else
25419: LD_EXP 31
25423: PPUSH
25424: LD_STRING D3-Gary-1
25426: PPUSH
25427: CALL_OW 88
25431: GO 25445
// Say ( tmp2 , D3-Gary-1 ) ;
25433: LD_VAR 0 4
25437: PPUSH
25438: LD_STRING D3-Gary-1
25440: PPUSH
25441: CALL_OW 88
// if deltaSpeaker then
25445: LD_VAR 0 2
25449: IFFALSE 25465
// Say ( DeltaDoctor , D3-Sci1-2 ) else
25451: LD_EXP 38
25455: PPUSH
25456: LD_STRING D3-Sci1-2
25458: PPUSH
25459: CALL_OW 88
25463: GO 25477
// Say ( tmp1 , D3-Sci1-2 ) ;
25465: LD_VAR 0 3
25469: PPUSH
25470: LD_STRING D3-Sci1-2
25472: PPUSH
25473: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
25477: LD_EXP 22
25481: PPUSH
25482: LD_STRING D3-JMM-2
25484: PPUSH
25485: CALL_OW 88
// if deltaSpeaker then
25489: LD_VAR 0 2
25493: IFFALSE 25509
// Say ( DeltaDoctor , D3-Sci1-3 ) else
25495: LD_EXP 38
25499: PPUSH
25500: LD_STRING D3-Sci1-3
25502: PPUSH
25503: CALL_OW 88
25507: GO 25521
// Say ( tmp1 , D3-Sci1-3 ) ;
25509: LD_VAR 0 3
25513: PPUSH
25514: LD_STRING D3-Sci1-3
25516: PPUSH
25517: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
25521: LD_EXP 22
25525: PPUSH
25526: LD_STRING D3-JMM-3
25528: PPUSH
25529: CALL_OW 88
// if deltaSpeaker then
25533: LD_VAR 0 2
25537: IFFALSE 25553
// Say ( DeltaDoctor , D3-Sci1-4 ) else
25539: LD_EXP 38
25543: PPUSH
25544: LD_STRING D3-Sci1-4
25546: PPUSH
25547: CALL_OW 88
25551: GO 25565
// Say ( tmp1 , D3-Sci1-4 ) ;
25553: LD_VAR 0 3
25557: PPUSH
25558: LD_STRING D3-Sci1-4
25560: PPUSH
25561: CALL_OW 88
// DialogueOff ;
25565: CALL_OW 7
// end ; SetTech ( tech_LasSight , 1 , state_enabled ) ;
25569: LD_INT 12
25571: PPUSH
25572: LD_INT 1
25574: PPUSH
25575: LD_INT 1
25577: PPUSH
25578: CALL_OW 322
// SetTech ( tech_Rocket , 1 , state_enabled ) ;
25582: LD_INT 40
25584: PPUSH
25585: LD_INT 1
25587: PPUSH
25588: LD_INT 1
25590: PPUSH
25591: CALL_OW 322
// SetTech ( tech_AI , 1 , state_enabled ) ;
25595: LD_INT 32
25597: PPUSH
25598: LD_INT 1
25600: PPUSH
25601: LD_INT 1
25603: PPUSH
25604: CALL_OW 322
// SetRestrict ( b_turret , 1 , true ) ;
25608: LD_INT 33
25610: PPUSH
25611: LD_INT 1
25613: PPUSH
25614: LD_INT 1
25616: PPUSH
25617: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
25621: LD_STRING M2
25623: PPUSH
25624: CALL_OW 337
// wait ( 3 3$0 ) ;
25628: LD_INT 6300
25630: PPUSH
25631: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
25635: LD_INT 35
25637: PPUSH
25638: CALL_OW 67
// until not InBattle ( 1 ) ;
25642: LD_INT 1
25644: PPUSH
25645: CALL_OW 463
25649: NOT
25650: IFFALSE 25635
// if IsOk ( Simms ) and deltaSpeaker then
25652: LD_EXP 32
25656: PPUSH
25657: CALL_OW 302
25661: PUSH
25662: LD_VAR 0 2
25666: AND
25667: IFFALSE 25836
// begin DialogueOn ;
25669: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
25673: LD_EXP 32
25677: PPUSH
25678: LD_STRING D3a-Sim-1
25680: PPUSH
25681: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
25685: LD_EXP 38
25689: PPUSH
25690: LD_STRING D3a-Sci1-1
25692: PPUSH
25693: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
25697: LD_EXP 32
25701: PPUSH
25702: LD_STRING D3a-Sim-2
25704: PPUSH
25705: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
25709: LD_EXP 38
25713: PPUSH
25714: LD_STRING D3a-Sci1-2
25716: PPUSH
25717: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
25721: LD_EXP 32
25725: PPUSH
25726: LD_STRING D3a-Sim-3
25728: PPUSH
25729: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
25733: LD_EXP 38
25737: PPUSH
25738: LD_STRING D3a-Sci1-3
25740: PPUSH
25741: CALL_OW 88
// if IsOK ( Joan ) then
25745: LD_EXP 34
25749: PPUSH
25750: CALL_OW 302
25754: IFFALSE 25770
// Say ( Simms , D3a-Sim-4 ) else
25756: LD_EXP 32
25760: PPUSH
25761: LD_STRING D3a-Sim-4
25763: PPUSH
25764: CALL_OW 88
25768: GO 25782
// Say ( Simms , D3a-Sim-4a ) ;
25770: LD_EXP 32
25774: PPUSH
25775: LD_STRING D3a-Sim-4a
25777: PPUSH
25778: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
25782: LD_EXP 38
25786: PPUSH
25787: LD_STRING D3a-Sci1-4
25789: PPUSH
25790: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
25794: LD_EXP 32
25798: PPUSH
25799: LD_STRING D3a-Sim-5
25801: PPUSH
25802: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
25806: LD_EXP 38
25810: PPUSH
25811: LD_STRING D3a-Sci1-5
25813: PPUSH
25814: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
25818: LD_EXP 32
25822: PPUSH
25823: LD_STRING D3a-Sim-6
25825: PPUSH
25826: CALL_OW 88
// DialogueOff ;
25830: CALL_OW 7
// end else
25834: GO 26105
// begin tmp3 := FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
25836: LD_ADDR_VAR 0 5
25840: PUSH
25841: LD_INT 22
25843: PUSH
25844: LD_INT 1
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 26
25853: PUSH
25854: LD_INT 1
25856: PUSH
25857: EMPTY
25858: LIST
25859: LIST
25860: PUSH
25861: LD_INT 25
25863: PUSH
25864: LD_INT 4
25866: PUSH
25867: EMPTY
25868: LIST
25869: LIST
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: LIST
25875: PPUSH
25876: CALL_OW 69
25880: PUSH
25881: LD_EXP 22
25885: PUSH
25886: LD_EXP 28
25890: PUSH
25891: LD_EXP 27
25895: PUSH
25896: LD_EXP 32
25900: PUSH
25901: LD_EXP 35
25905: PUSH
25906: EMPTY
25907: LIST
25908: LIST
25909: LIST
25910: LIST
25911: LIST
25912: DIFF
25913: ST_TO_ADDR
// if tmp3 then
25914: LD_VAR 0 5
25918: IFFALSE 26105
// begin DialogueOn ;
25920: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
25924: LD_EXP 32
25928: PPUSH
25929: LD_STRING D3a-Sim-1
25931: PPUSH
25932: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
25936: LD_VAR 0 5
25940: PUSH
25941: LD_INT 1
25943: ARRAY
25944: PPUSH
25945: LD_STRING D3a-Sci1-1
25947: PPUSH
25948: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
25952: LD_EXP 32
25956: PPUSH
25957: LD_STRING D3a-Sim-2
25959: PPUSH
25960: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
25964: LD_VAR 0 5
25968: PUSH
25969: LD_INT 1
25971: ARRAY
25972: PPUSH
25973: LD_STRING D3a-Sci1-2
25975: PPUSH
25976: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
25980: LD_EXP 32
25984: PPUSH
25985: LD_STRING D3a-Sim-3
25987: PPUSH
25988: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
25992: LD_VAR 0 5
25996: PUSH
25997: LD_INT 1
25999: ARRAY
26000: PPUSH
26001: LD_STRING D3a-Sci1-3
26003: PPUSH
26004: CALL_OW 88
// if IsOK ( Joan ) then
26008: LD_EXP 34
26012: PPUSH
26013: CALL_OW 302
26017: IFFALSE 26033
// Say ( Simms , D3a-Sim-4 ) else
26019: LD_EXP 32
26023: PPUSH
26024: LD_STRING D3a-Sim-4
26026: PPUSH
26027: CALL_OW 88
26031: GO 26045
// Say ( Simms , D3a-Sim-4a ) ;
26033: LD_EXP 32
26037: PPUSH
26038: LD_STRING D3a-Sim-4a
26040: PPUSH
26041: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
26045: LD_VAR 0 5
26049: PUSH
26050: LD_INT 1
26052: ARRAY
26053: PPUSH
26054: LD_STRING D3a-Sci1-4
26056: PPUSH
26057: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
26061: LD_EXP 32
26065: PPUSH
26066: LD_STRING D3a-Sim-5
26068: PPUSH
26069: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
26073: LD_VAR 0 5
26077: PUSH
26078: LD_INT 1
26080: ARRAY
26081: PPUSH
26082: LD_STRING D3a-Sci1-5
26084: PPUSH
26085: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
26089: LD_EXP 32
26093: PPUSH
26094: LD_STRING D3a-Sim-6
26096: PPUSH
26097: CALL_OW 88
// DialogueOff ;
26101: CALL_OW 7
// end ; end ; end ;
26105: PPOPN 5
26107: END
// export function DRussianNextAttack ; begin
26108: LD_INT 0
26110: PPUSH
// SayRadio ( AmScout , D4-FSol1-2 ) ;
26111: LD_EXP 39
26115: PPUSH
26116: LD_STRING D4-FSol1-2
26118: PPUSH
26119: CALL_OW 94
// end ;
26123: LD_VAR 0 1
26127: RET
// export function DRussianConvoy ; begin
26128: LD_INT 0
26130: PPUSH
// SayRadio ( AmScout , D4-FSol1-1 ) ;
26131: LD_EXP 39
26135: PPUSH
26136: LD_STRING D4-FSol1-1
26138: PPUSH
26139: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
26143: LD_STRING M3
26145: PPUSH
26146: CALL_OW 337
// end ;
26150: LD_VAR 0 1
26154: RET
// export function DRussianSpaceAmmo ( unit ) ; begin
26155: LD_INT 0
26157: PPUSH
// CenterNowOnUnits ( unit ) ;
26158: LD_VAR 0 1
26162: PPUSH
26163: CALL_OW 87
// DialogueOn ;
26167: CALL_OW 6
// if IsOK ( Cyrus ) then
26171: LD_EXP 26
26175: PPUSH
26176: CALL_OW 302
26180: IFFALSE 26196
// Say ( Cyrus , D9a-Cyrus-1 ) else
26182: LD_EXP 26
26186: PPUSH
26187: LD_STRING D9a-Cyrus-1
26189: PPUSH
26190: CALL_OW 88
26194: GO 26318
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
26196: LD_INT 22
26198: PUSH
26199: LD_INT 1
26201: PUSH
26202: EMPTY
26203: LIST
26204: LIST
26205: PUSH
26206: LD_INT 26
26208: PUSH
26209: LD_INT 1
26211: PUSH
26212: EMPTY
26213: LIST
26214: LIST
26215: PUSH
26216: LD_INT 2
26218: PUSH
26219: LD_INT 25
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 25
26231: PUSH
26232: LD_INT 2
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 25
26241: PUSH
26242: LD_INT 3
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 25
26251: PUSH
26252: LD_INT 4
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 25
26261: PUSH
26262: LD_INT 5
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: EMPTY
26270: LIST
26271: LIST
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: PUSH
26277: EMPTY
26278: LIST
26279: LIST
26280: LIST
26281: PPUSH
26282: CALL_OW 69
26286: PUSH
26287: LD_EXP 22
26291: PUSH
26292: LD_EXP 35
26296: PUSH
26297: LD_EXP 26
26301: PUSH
26302: EMPTY
26303: LIST
26304: LIST
26305: LIST
26306: DIFF
26307: PPUSH
26308: LD_STRING D9a-Sol1-1
26310: PPUSH
26311: LD_STRING D9a-Sol1-1
26313: PPUSH
26314: CALL 22609 0 3
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
26318: LD_INT 22
26320: PUSH
26321: LD_INT 1
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 26
26330: PUSH
26331: LD_INT 1
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 2
26340: PUSH
26341: LD_INT 25
26343: PUSH
26344: LD_INT 1
26346: PUSH
26347: EMPTY
26348: LIST
26349: LIST
26350: PUSH
26351: LD_INT 25
26353: PUSH
26354: LD_INT 2
26356: PUSH
26357: EMPTY
26358: LIST
26359: LIST
26360: PUSH
26361: LD_INT 25
26363: PUSH
26364: LD_INT 3
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 25
26373: PUSH
26374: LD_INT 4
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 25
26383: PUSH
26384: LD_INT 5
26386: PUSH
26387: EMPTY
26388: LIST
26389: LIST
26390: PUSH
26391: EMPTY
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: LIST
26403: PPUSH
26404: CALL_OW 69
26408: PUSH
26409: LD_EXP 22
26413: PUSH
26414: LD_EXP 35
26418: PUSH
26419: LD_EXP 26
26423: PUSH
26424: EMPTY
26425: LIST
26426: LIST
26427: LIST
26428: DIFF
26429: PPUSH
26430: LD_STRING D9b-Sol1-1
26432: PPUSH
26433: LD_STRING D9b-Sol1-1
26435: PPUSH
26436: CALL 22609 0 3
// if LoadVariable ( 09_arInfo , 0 ) then
26440: LD_STRING 09_arInfo
26442: PPUSH
26443: LD_INT 0
26445: PPUSH
26446: CALL_OW 30
26450: IFFALSE 26464
// Say ( JMM , D9a-JMM-1 ) ;
26452: LD_EXP 22
26456: PPUSH
26457: LD_STRING D9a-JMM-1
26459: PPUSH
26460: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
26464: LD_EXP 22
26468: PPUSH
26469: LD_STRING D9c-JMM-1
26471: PPUSH
26472: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , class_sniper ] ] ) then
26476: LD_INT 22
26478: PUSH
26479: LD_INT 1
26481: PUSH
26482: EMPTY
26483: LIST
26484: LIST
26485: PUSH
26486: LD_INT 25
26488: PUSH
26489: LD_INT 5
26491: PUSH
26492: EMPTY
26493: LIST
26494: LIST
26495: PUSH
26496: EMPTY
26497: LIST
26498: LIST
26499: PPUSH
26500: CALL_OW 69
26504: IFFALSE 26518
// Say ( JMM , D9c-JMM-1a ) ;
26506: LD_EXP 22
26510: PPUSH
26511: LD_STRING D9c-JMM-1a
26513: PPUSH
26514: CALL_OW 88
// DialogueOff ;
26518: CALL_OW 7
// end ;
26522: LD_VAR 0 2
26526: RET
// every 0 0$3 trigger FilterAllUnits ( [ f_side , 5 ] ) > 3 do
26527: LD_INT 22
26529: PUSH
26530: LD_INT 5
26532: PUSH
26533: EMPTY
26534: LIST
26535: LIST
26536: PPUSH
26537: CALL_OW 69
26541: PUSH
26542: LD_INT 3
26544: GREATER
26545: IFFALSE 26562
26547: GO 26549
26549: DISABLE
// SayRadio ( AmScout , D4-FSol1-3 ) ;
26550: LD_EXP 39
26554: PPUSH
26555: LD_STRING D4-FSol1-3
26557: PPUSH
26558: CALL_OW 94
26562: END
// export function DArabTrait1 ; var tmp ; begin
26563: LD_INT 0
26565: PPUSH
26566: PPUSH
// if IsOk ( DeltaDoctor ) then
26567: LD_EXP 38
26571: PPUSH
26572: CALL_OW 302
26576: IFFALSE 26590
// tmp := DeltaDoctor else
26578: LD_ADDR_VAR 0 2
26582: PUSH
26583: LD_EXP 38
26587: ST_TO_ADDR
26588: GO 26788
// if IsOk ( Denis ) then
26590: LD_EXP 33
26594: PPUSH
26595: CALL_OW 302
26599: IFFALSE 26613
// tmp := Denis else
26601: LD_ADDR_VAR 0 2
26605: PUSH
26606: LD_EXP 33
26610: ST_TO_ADDR
26611: GO 26788
// tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_ok ] , [ f_class , 4 ] , [ f_sex , sex_male ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
26613: LD_ADDR_VAR 0 2
26617: PUSH
26618: LD_INT 22
26620: PUSH
26621: LD_INT 1
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 50
26630: PUSH
26631: EMPTY
26632: LIST
26633: PUSH
26634: LD_INT 25
26636: PUSH
26637: LD_INT 4
26639: PUSH
26640: EMPTY
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 26
26646: PUSH
26647: LD_INT 1
26649: PUSH
26650: EMPTY
26651: LIST
26652: LIST
26653: PUSH
26654: EMPTY
26655: LIST
26656: LIST
26657: LIST
26658: LIST
26659: PPUSH
26660: CALL_OW 69
26664: PUSH
26665: LD_EXP 22
26669: PUSH
26670: LD_EXP 23
26674: PUSH
26675: LD_EXP 24
26679: PUSH
26680: LD_EXP 25
26684: PUSH
26685: LD_EXP 26
26689: PUSH
26690: LD_EXP 27
26694: PUSH
26695: LD_EXP 28
26699: PUSH
26700: LD_EXP 29
26704: PUSH
26705: LD_EXP 30
26709: PUSH
26710: LD_EXP 31
26714: PUSH
26715: LD_EXP 32
26719: PUSH
26720: LD_EXP 33
26724: PUSH
26725: LD_EXP 34
26729: PUSH
26730: LD_EXP 35
26734: PUSH
26735: LD_EXP 36
26739: PUSH
26740: LD_EXP 37
26744: PUSH
26745: LD_EXP 38
26749: PUSH
26750: LD_EXP 39
26754: PUSH
26755: LD_EXP 41
26759: PUSH
26760: LD_EXP 43
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: LIST
26781: LIST
26782: LIST
26783: LIST
26784: LIST
26785: LIST
26786: DIFF
26787: ST_TO_ADDR
// if not tmp then
26788: LD_VAR 0 2
26792: NOT
26793: IFFALSE 26797
// exit ;
26795: GO 26889
// DialogueOn ;
26797: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
26801: LD_EXP 22
26805: PPUSH
26806: LD_STRING D6-JMM-1
26808: PPUSH
26809: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
26813: LD_VAR 0 2
26817: PPUSH
26818: LD_STRING D6-Sci1-1
26820: PPUSH
26821: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
26825: LD_EXP 22
26829: PPUSH
26830: LD_STRING D6-JMM-2
26832: PPUSH
26833: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
26837: LD_VAR 0 2
26841: PPUSH
26842: LD_STRING D6-Sci1-2
26844: PPUSH
26845: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
26849: LD_EXP 22
26853: PPUSH
26854: LD_STRING D6-JMM-3
26856: PPUSH
26857: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
26861: LD_VAR 0 2
26865: PPUSH
26866: LD_STRING D6-Sci1-3
26868: PPUSH
26869: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
26873: LD_EXP 22
26877: PPUSH
26878: LD_STRING D6-JMM-4
26880: PPUSH
26881: CALL_OW 88
// DialogueOff ;
26885: CALL_OW 7
// end ;
26889: LD_VAR 0 1
26893: RET
// export function DArabTrait2 ; begin
26894: LD_INT 0
26896: PPUSH
// if not IsPlaced ( Khatam ) or not IsOk ( Ahmed ) or not IsOk ( Dietrich ) then
26897: LD_EXP 35
26901: PPUSH
26902: CALL_OW 305
26906: NOT
26907: PUSH
26908: LD_EXP 50
26912: PPUSH
26913: CALL_OW 302
26917: NOT
26918: OR
26919: PUSH
26920: LD_EXP 49
26924: PPUSH
26925: CALL_OW 302
26929: NOT
26930: OR
26931: IFFALSE 26935
// exit ;
26933: GO 26991
// DialogueOn ;
26935: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
26939: LD_EXP 50
26943: PPUSH
26944: LD_STRING D5-Ar1-1
26946: PPUSH
26947: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
26951: LD_EXP 49
26955: PPUSH
26956: LD_STRING D5-Diet-1
26958: PPUSH
26959: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
26963: LD_EXP 50
26967: PPUSH
26968: LD_STRING D5-Ar1-2
26970: PPUSH
26971: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
26975: LD_EXP 49
26979: PPUSH
26980: LD_STRING D5-Diet-2
26982: PPUSH
26983: CALL_OW 88
// DialogueOff ;
26987: CALL_OW 7
// end ;
26991: LD_VAR 0 1
26995: RET
// every 0 0$2 trigger arabianAttack do var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding , speaker ;
26996: LD_EXP 4
27000: IFFALSE 28729
27002: GO 27004
27004: DISABLE
27005: LD_INT 0
27007: PPUSH
27008: PPUSH
27009: PPUSH
27010: PPUSH
27011: PPUSH
27012: PPUSH
27013: PPUSH
27014: PPUSH
// begin SetAttitude ( 2 , 3 , att_friend , true ) ;
27015: LD_INT 2
27017: PPUSH
27018: LD_INT 3
27020: PPUSH
27021: LD_INT 1
27023: PPUSH
27024: LD_INT 1
27026: PPUSH
27027: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
27031: LD_INT 2
27033: PPUSH
27034: LD_INT 6
27036: PPUSH
27037: LD_INT 1
27039: PPUSH
27040: LD_INT 1
27042: PPUSH
27043: CALL_OW 80
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
27047: LD_ADDR_VAR 0 5
27051: PUSH
27052: LD_INT 22
27054: PUSH
27055: LD_INT 2
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: PUSH
27062: LD_INT 2
27064: PUSH
27065: LD_INT 25
27067: PUSH
27068: LD_INT 4
27070: PUSH
27071: EMPTY
27072: LIST
27073: LIST
27074: PUSH
27075: LD_INT 25
27077: PUSH
27078: LD_INT 2
27080: PUSH
27081: EMPTY
27082: LIST
27083: LIST
27084: PUSH
27085: LD_INT 25
27087: PUSH
27088: LD_INT 3
27090: PUSH
27091: EMPTY
27092: LIST
27093: LIST
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: PUSH
27101: EMPTY
27102: LIST
27103: LIST
27104: PPUSH
27105: CALL_OW 69
27109: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
27110: LD_ADDR_VAR 0 4
27114: PUSH
27115: LD_INT 22
27117: PUSH
27118: LD_INT 2
27120: PUSH
27121: EMPTY
27122: LIST
27123: LIST
27124: PUSH
27125: LD_INT 21
27127: PUSH
27128: LD_INT 1
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: PUSH
27135: LD_INT 2
27137: PUSH
27138: LD_INT 25
27140: PUSH
27141: LD_INT 1
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 25
27150: PUSH
27151: LD_INT 8
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 25
27160: PUSH
27161: LD_INT 15
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: EMPTY
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: LIST
27178: PPUSH
27179: CALL_OW 69
27183: PUSH
27184: LD_EXP 49
27188: PUSH
27189: EMPTY
27190: LIST
27191: DIFF
27192: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
27193: LD_ADDR_VAR 0 6
27197: PUSH
27198: LD_INT 22
27200: PUSH
27201: LD_INT 2
27203: PUSH
27204: EMPTY
27205: LIST
27206: LIST
27207: PUSH
27208: LD_INT 30
27210: PUSH
27211: LD_INT 5
27213: PUSH
27214: EMPTY
27215: LIST
27216: LIST
27217: PUSH
27218: EMPTY
27219: LIST
27220: LIST
27221: PPUSH
27222: CALL_OW 69
27226: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
27227: LD_VAR 0 5
27231: PPUSH
27232: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
27236: LD_VAR 0 4
27240: PPUSH
27241: CALL_OW 122
// RaiseSailEvent ( EArabAttack ) ;
27245: LD_INT 101
27247: PPUSH
27248: CALL_OW 427
// wait ( 0 0$3 ) ;
27252: LD_INT 105
27254: PPUSH
27255: CALL_OW 67
// for i in arCivilian do
27259: LD_ADDR_VAR 0 1
27263: PUSH
27264: LD_VAR 0 5
27268: PUSH
27269: FOR_IN
27270: IFFALSE 27302
// AddComEnterUnit ( arCivilian , barracks [ i mod 2 + 1 ] ) ;
27272: LD_VAR 0 5
27276: PPUSH
27277: LD_VAR 0 6
27281: PUSH
27282: LD_VAR 0 1
27286: PUSH
27287: LD_INT 2
27289: MOD
27290: PUSH
27291: LD_INT 1
27293: PLUS
27294: ARRAY
27295: PPUSH
27296: CALL_OW 180
27300: GO 27269
27302: POP
27303: POP
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
27304: LD_VAR 0 5
27308: PPUSH
27309: LD_INT 1
27311: PUSH
27312: LD_INT 8
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 1
27321: PPUSH
27322: LD_INT 2
27324: PPUSH
27325: CALL_OW 12
27329: ARRAY
27330: PPUSH
27331: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
27335: LD_VAR 0 5
27339: PPUSH
27340: CALL_OW 182
// wait ( 0 0$1 ) ;
27344: LD_INT 35
27346: PPUSH
27347: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
27351: LD_INT 76
27353: PPUSH
27354: LD_INT 19
27356: PPUSH
27357: CALL_OW 84
// DialogueOn ;
27361: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
27365: LD_INT 22
27367: PUSH
27368: LD_INT 1
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 26
27377: PUSH
27378: LD_INT 1
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 2
27387: PUSH
27388: LD_INT 25
27390: PUSH
27391: LD_INT 1
27393: PUSH
27394: EMPTY
27395: LIST
27396: LIST
27397: PUSH
27398: LD_INT 25
27400: PUSH
27401: LD_INT 2
27403: PUSH
27404: EMPTY
27405: LIST
27406: LIST
27407: PUSH
27408: LD_INT 25
27410: PUSH
27411: LD_INT 3
27413: PUSH
27414: EMPTY
27415: LIST
27416: LIST
27417: PUSH
27418: LD_INT 25
27420: PUSH
27421: LD_INT 4
27423: PUSH
27424: EMPTY
27425: LIST
27426: LIST
27427: PUSH
27428: LD_INT 25
27430: PUSH
27431: LD_INT 5
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: PUSH
27438: EMPTY
27439: LIST
27440: LIST
27441: LIST
27442: LIST
27443: LIST
27444: LIST
27445: PUSH
27446: EMPTY
27447: LIST
27448: LIST
27449: LIST
27450: PPUSH
27451: CALL_OW 69
27455: PPUSH
27456: LD_STRING D8-Sol1-1
27458: PPUSH
27459: LD_STRING D8-Sol1-1
27461: PPUSH
27462: CALL 22609 0 3
// if IsOk ( DeltaDoctor ) then
27466: LD_EXP 38
27470: PPUSH
27471: CALL_OW 302
27475: IFFALSE 27491
// Say ( DeltaDoctor , D8-Sci1-1 ) else
27477: LD_EXP 38
27481: PPUSH
27482: LD_STRING D8-Sci1-1
27484: PPUSH
27485: CALL_OW 88
27489: GO 27592
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
27491: LD_INT 22
27493: PUSH
27494: LD_INT 1
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: PUSH
27501: LD_INT 26
27503: PUSH
27504: LD_INT 1
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 2
27513: PUSH
27514: LD_INT 25
27516: PUSH
27517: LD_INT 1
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: PUSH
27524: LD_INT 25
27526: PUSH
27527: LD_INT 2
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: PUSH
27534: LD_INT 25
27536: PUSH
27537: LD_INT 3
27539: PUSH
27540: EMPTY
27541: LIST
27542: LIST
27543: PUSH
27544: LD_INT 25
27546: PUSH
27547: LD_INT 4
27549: PUSH
27550: EMPTY
27551: LIST
27552: LIST
27553: PUSH
27554: LD_INT 25
27556: PUSH
27557: LD_INT 5
27559: PUSH
27560: EMPTY
27561: LIST
27562: LIST
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: LIST
27568: LIST
27569: LIST
27570: LIST
27571: PUSH
27572: EMPTY
27573: LIST
27574: LIST
27575: LIST
27576: PPUSH
27577: CALL_OW 69
27581: PPUSH
27582: LD_STRING D8-Sol1-1
27584: PPUSH
27585: LD_STRING D8-Sol1-1
27587: PPUSH
27588: CALL 22609 0 3
// Say ( JMM , D8-JMM-1 ) ;
27592: LD_EXP 22
27596: PPUSH
27597: LD_STRING D8-JMM-1
27599: PPUSH
27600: CALL_OW 88
// DialogueOff ;
27604: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
27608: LD_INT 2
27610: PPUSH
27611: LD_INT 2
27613: PPUSH
27614: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
27618: LD_INT 1
27620: PPUSH
27621: LD_INT 2
27623: PPUSH
27624: LD_INT 2
27626: PPUSH
27627: LD_INT 1
27629: PPUSH
27630: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
27634: LD_INT 3
27636: PPUSH
27637: LD_INT 2
27639: PPUSH
27640: LD_INT 1
27642: PPUSH
27643: LD_INT 1
27645: PPUSH
27646: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
27650: LD_STRING M4
27652: PPUSH
27653: CALL_OW 337
// wait ( 0 0$1 ) ;
27657: LD_INT 35
27659: PPUSH
27660: CALL_OW 67
// if IsLive ( Khatam ) then
27664: LD_EXP 35
27668: PPUSH
27669: CALL_OW 300
27673: IFFALSE 27687
// DoNotAttack ( 2 , Khatam ) ;
27675: LD_INT 2
27677: PPUSH
27678: LD_EXP 35
27682: PPUSH
27683: CALL_OW 471
// wait ( 0 0$1 ) ;
27687: LD_INT 35
27689: PPUSH
27690: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
27694: LD_ADDR_VAR 0 7
27698: PUSH
27699: LD_INT 22
27701: PUSH
27702: LD_INT 1
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 21
27711: PUSH
27712: LD_INT 3
27714: PUSH
27715: EMPTY
27716: LIST
27717: LIST
27718: PUSH
27719: EMPTY
27720: LIST
27721: LIST
27722: PPUSH
27723: CALL_OW 69
27727: PPUSH
27728: LD_VAR 0 4
27732: PUSH
27733: LD_INT 1
27735: ARRAY
27736: PPUSH
27737: CALL_OW 74
27741: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
27742: LD_VAR 0 4
27746: PPUSH
27747: LD_INT 25
27749: PUSH
27750: LD_INT 1
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PPUSH
27757: CALL_OW 72
27761: PUSH
27762: LD_INT 1
27764: ARRAY
27765: PPUSH
27766: LD_VAR 0 7
27770: PPUSH
27771: CALL_OW 250
27775: PPUSH
27776: LD_VAR 0 7
27780: PPUSH
27781: CALL_OW 251
27785: PPUSH
27786: LD_VAR 0 7
27790: PPUSH
27791: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
27795: LD_VAR 0 4
27799: PPUSH
27800: LD_INT 84
27802: PPUSH
27803: LD_INT 22
27805: PPUSH
27806: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
27810: LD_VAR 0 4
27814: PPUSH
27815: LD_INT 82
27817: PPUSH
27818: LD_INT 5
27820: PPUSH
27821: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
27825: LD_VAR 0 4
27829: PPUSH
27830: LD_INT 95
27832: PPUSH
27833: LD_INT 12
27835: PPUSH
27836: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
27840: LD_VAR 0 4
27844: PPUSH
27845: LD_INT 102
27847: PPUSH
27848: LD_INT 11
27850: PPUSH
27851: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
27855: LD_VAR 0 4
27859: PPUSH
27860: LD_INT 116
27862: PPUSH
27863: LD_INT 15
27865: PPUSH
27866: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
27870: LD_VAR 0 4
27874: PPUSH
27875: LD_INT 140
27877: PPUSH
27878: LD_INT 25
27880: PPUSH
27881: CALL_OW 174
// arSoldiers := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
27885: LD_ADDR_VAR 0 4
27889: PUSH
27890: LD_INT 22
27892: PUSH
27893: LD_INT 2
27895: PUSH
27896: EMPTY
27897: LIST
27898: LIST
27899: PUSH
27900: LD_INT 21
27902: PUSH
27903: LD_INT 1
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 2
27912: PUSH
27913: LD_INT 25
27915: PUSH
27916: LD_INT 1
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 25
27925: PUSH
27926: LD_INT 8
27928: PUSH
27929: EMPTY
27930: LIST
27931: LIST
27932: PUSH
27933: LD_INT 25
27935: PUSH
27936: LD_INT 15
27938: PUSH
27939: EMPTY
27940: LIST
27941: LIST
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: PUSH
27949: EMPTY
27950: LIST
27951: LIST
27952: LIST
27953: PPUSH
27954: CALL_OW 69
27958: PUSH
27959: LD_EXP 49
27963: PUSH
27964: EMPTY
27965: LIST
27966: DIFF
27967: ST_TO_ADDR
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
27968: LD_ADDR_VAR 0 5
27972: PUSH
27973: LD_INT 22
27975: PUSH
27976: LD_INT 2
27978: PUSH
27979: EMPTY
27980: LIST
27981: LIST
27982: PUSH
27983: LD_INT 21
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: PUSH
27993: LD_INT 2
27995: PUSH
27996: LD_INT 25
27998: PUSH
27999: LD_INT 2
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 25
28008: PUSH
28009: LD_INT 3
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 25
28018: PUSH
28019: LD_INT 4
28021: PUSH
28022: EMPTY
28023: LIST
28024: LIST
28025: PUSH
28026: LD_INT 25
28028: PUSH
28029: LD_INT 12
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 25
28038: PUSH
28039: LD_INT 16
28041: PUSH
28042: EMPTY
28043: LIST
28044: LIST
28045: PUSH
28046: EMPTY
28047: LIST
28048: LIST
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: PUSH
28054: EMPTY
28055: LIST
28056: LIST
28057: LIST
28058: PPUSH
28059: CALL_OW 69
28063: ST_TO_ADDR
// arCivilian := arCivilian ^ Dietrich ;
28064: LD_ADDR_VAR 0 5
28068: PUSH
28069: LD_VAR 0 5
28073: PUSH
28074: LD_EXP 49
28078: ADD
28079: ST_TO_ADDR
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
28080: LD_VAR 0 4
28084: PPUSH
28085: LD_INT 25
28087: PUSH
28088: LD_INT 15
28090: PUSH
28091: EMPTY
28092: LIST
28093: LIST
28094: PPUSH
28095: CALL_OW 72
28099: IFFALSE 28140
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
28101: LD_VAR 0 4
28105: PPUSH
28106: LD_INT 25
28108: PUSH
28109: LD_INT 15
28111: PUSH
28112: EMPTY
28113: LIST
28114: LIST
28115: PPUSH
28116: CALL_OW 72
28120: PUSH
28121: LD_INT 1
28123: ARRAY
28124: PPUSH
28125: LD_INT 84
28127: PPUSH
28128: LD_INT 21
28130: PPUSH
28131: CALL_OW 428
28135: PPUSH
28136: CALL_OW 120
// wait ( 0 0$2 ) ;
28140: LD_INT 70
28142: PPUSH
28143: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
28147: LD_VAR 0 5
28151: PPUSH
28152: LD_INT 88
28154: PPUSH
28155: LD_INT 8
28157: PPUSH
28158: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
28162: LD_VAR 0 5
28166: PPUSH
28167: LD_INT 102
28169: PPUSH
28170: LD_INT 10
28172: PPUSH
28173: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
28177: LD_VAR 0 5
28181: PPUSH
28182: LD_INT 116
28184: PPUSH
28185: LD_INT 15
28187: PPUSH
28188: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
28192: LD_VAR 0 5
28196: PPUSH
28197: LD_INT 140
28199: PPUSH
28200: LD_INT 25
28202: PPUSH
28203: CALL_OW 171
// arEscapist := arCivilian union arSoldiers ;
28207: LD_ADDR_EXP 55
28211: PUSH
28212: LD_VAR 0 5
28216: PUSH
28217: LD_VAR 0 4
28221: UNION
28222: ST_TO_ADDR
// if IsOk ( Gary ) then
28223: LD_EXP 31
28227: PPUSH
28228: CALL_OW 302
28232: IFFALSE 28246
// Say ( Gary , D8a-Gary-1 ) ;
28234: LD_EXP 31
28238: PPUSH
28239: LD_STRING D8a-Gary-1
28241: PPUSH
28242: CALL_OW 88
// wait ( 0 0$5 ) ;
28246: LD_INT 175
28248: PPUSH
28249: CALL_OW 67
// if IsOK ( Khatam ) then
28253: LD_EXP 35
28257: PPUSH
28258: CALL_OW 302
28262: IFFALSE 28729
// begin tmp := FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
28264: LD_ADDR_VAR 0 2
28268: PUSH
28269: LD_INT 22
28271: PUSH
28272: LD_INT 1
28274: PUSH
28275: EMPTY
28276: LIST
28277: LIST
28278: PUSH
28279: LD_INT 2
28281: PUSH
28282: LD_INT 25
28284: PUSH
28285: LD_INT 1
28287: PUSH
28288: EMPTY
28289: LIST
28290: LIST
28291: PUSH
28292: LD_INT 25
28294: PUSH
28295: LD_INT 2
28297: PUSH
28298: EMPTY
28299: LIST
28300: LIST
28301: PUSH
28302: LD_INT 25
28304: PUSH
28305: LD_INT 3
28307: PUSH
28308: EMPTY
28309: LIST
28310: LIST
28311: PUSH
28312: LD_INT 25
28314: PUSH
28315: LD_INT 4
28317: PUSH
28318: EMPTY
28319: LIST
28320: LIST
28321: PUSH
28322: LD_INT 25
28324: PUSH
28325: LD_INT 5
28327: PUSH
28328: EMPTY
28329: LIST
28330: LIST
28331: PUSH
28332: LD_INT 25
28334: PUSH
28335: LD_INT 8
28337: PUSH
28338: EMPTY
28339: LIST
28340: LIST
28341: PUSH
28342: EMPTY
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: PUSH
28351: EMPTY
28352: LIST
28353: LIST
28354: PPUSH
28355: CALL_OW 69
28359: PUSH
28360: LD_EXP 22
28364: PUSH
28365: LD_EXP 23
28369: PUSH
28370: LD_EXP 24
28374: PUSH
28375: LD_EXP 25
28379: PUSH
28380: LD_EXP 26
28384: PUSH
28385: LD_EXP 27
28389: PUSH
28390: LD_EXP 28
28394: PUSH
28395: LD_EXP 29
28399: PUSH
28400: LD_EXP 30
28404: PUSH
28405: LD_EXP 31
28409: PUSH
28410: LD_EXP 32
28414: PUSH
28415: LD_EXP 33
28419: PUSH
28420: LD_EXP 34
28424: PUSH
28425: LD_EXP 35
28429: PUSH
28430: LD_EXP 36
28434: PUSH
28435: LD_EXP 37
28439: PUSH
28440: LD_EXP 38
28444: PUSH
28445: LD_EXP 41
28449: PUSH
28450: LD_EXP 43
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: LIST
28459: LIST
28460: LIST
28461: LIST
28462: LIST
28463: LIST
28464: LIST
28465: LIST
28466: LIST
28467: LIST
28468: LIST
28469: LIST
28470: LIST
28471: LIST
28472: LIST
28473: LIST
28474: LIST
28475: DIFF
28476: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
28477: LD_EXP 35
28481: PPUSH
28482: LD_INT 8
28484: PPUSH
28485: CALL_OW 235
// ComExit ( Khatam ) ;
28489: LD_EXP 35
28493: PPUSH
28494: CALL 89054 0 1
// wait ( 0 0$1 ) ;
28498: LD_INT 35
28500: PPUSH
28501: CALL_OW 67
// ComMoveToArea ( Khatam , khatamArea ) ;
28505: LD_EXP 35
28509: PPUSH
28510: LD_INT 11
28512: PPUSH
28513: CALL_OW 113
// escapeKhatam := true ;
28517: LD_ADDR_EXP 11
28521: PUSH
28522: LD_INT 1
28524: ST_TO_ADDR
// if not tmp then
28525: LD_VAR 0 2
28529: NOT
28530: IFFALSE 28534
// exit ;
28532: GO 28729
// wait ( 0 0$2 ) ;
28534: LD_INT 70
28536: PPUSH
28537: CALL_OW 67
// DialogueOn ;
28541: CALL_OW 6
// speaker := DialogRandom ( tmp , D8b-Sol1-1 , D8b-FSol1-1 ) ;
28545: LD_ADDR_VAR 0 8
28549: PUSH
28550: LD_VAR 0 2
28554: PPUSH
28555: LD_STRING D8b-Sol1-1
28557: PPUSH
28558: LD_STRING D8b-FSol1-1
28560: PPUSH
28561: CALL 22609 0 3
28565: ST_TO_ADDR
// Say ( Khatam , D8b-Khat-1 ) ;
28566: LD_EXP 35
28570: PPUSH
28571: LD_STRING D8b-Khat-1
28573: PPUSH
28574: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
28578: LD_VAR 0 8
28582: PPUSH
28583: CALL_OW 258
28587: PUSH
28588: LD_INT 1
28590: EQUAL
28591: IFFALSE 28607
// Say ( speaker , D8b-Sol1-2 ) else
28593: LD_VAR 0 8
28597: PPUSH
28598: LD_STRING D8b-Sol1-2
28600: PPUSH
28601: CALL_OW 88
28605: GO 28619
// Say ( speaker , D8b-FSol1-2 ) ;
28607: LD_VAR 0 8
28611: PPUSH
28612: LD_STRING D8b-FSol1-2
28614: PPUSH
28615: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
28619: LD_EXP 35
28623: PPUSH
28624: LD_STRING D8b-Khat-2
28626: PPUSH
28627: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
28631: LD_VAR 0 8
28635: PPUSH
28636: CALL_OW 258
28640: PUSH
28641: LD_INT 1
28643: EQUAL
28644: IFFALSE 28660
// Say ( speaker , D8b-Sol1-3 ) else
28646: LD_VAR 0 8
28650: PPUSH
28651: LD_STRING D8b-Sol1-3
28653: PPUSH
28654: CALL_OW 88
28658: GO 28672
// Say ( speaker , D8b-FSol1-3 ) ;
28660: LD_VAR 0 8
28664: PPUSH
28665: LD_STRING D8b-FSol1-3
28667: PPUSH
28668: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
28672: LD_EXP 35
28676: PPUSH
28677: LD_STRING D8b-Khat-3
28679: PPUSH
28680: CALL_OW 88
// if GetSex ( speaker ) = sex_male then
28684: LD_VAR 0 8
28688: PPUSH
28689: CALL_OW 258
28693: PUSH
28694: LD_INT 1
28696: EQUAL
28697: IFFALSE 28713
// Say ( speaker , D8b-Sol1-4 ) else
28699: LD_VAR 0 8
28703: PPUSH
28704: LD_STRING D8b-Sol1-4
28706: PPUSH
28707: CALL_OW 88
28711: GO 28725
// Say ( speaker , D8b-FSol1-4 ) ;
28713: LD_VAR 0 8
28717: PPUSH
28718: LD_STRING D8b-FSol1-4
28720: PPUSH
28721: CALL_OW 88
// DialogueOff ;
28725: CALL_OW 7
// end ; end ;
28729: PPOPN 8
28731: END
// every 0 0$1 trigger escapeKhatam and IsOk ( Khatam ) do
28732: LD_EXP 11
28736: PUSH
28737: LD_EXP 35
28741: PPUSH
28742: CALL_OW 302
28746: AND
28747: IFFALSE 28822
28749: GO 28751
28751: DISABLE
// begin enable ;
28752: ENABLE
// if IsOk ( Khatam ) and not HasTask ( Khatam ) then
28753: LD_EXP 35
28757: PPUSH
28758: CALL_OW 302
28762: PUSH
28763: LD_EXP 35
28767: PPUSH
28768: CALL_OW 314
28772: NOT
28773: AND
28774: IFFALSE 28788
// ComMoveToArea ( Khatam , khatamArea ) ;
28776: LD_EXP 35
28780: PPUSH
28781: LD_INT 11
28783: PPUSH
28784: CALL_OW 113
// if IsInArea ( Khatam , khatamArea ) then
28788: LD_EXP 35
28792: PPUSH
28793: LD_INT 11
28795: PPUSH
28796: CALL_OW 308
28800: IFFALSE 28822
// begin SaveVariable ( 1 , 10_KhatamStatus_1 ) ;
28802: LD_INT 1
28804: PPUSH
28805: LD_STRING 10_KhatamStatus_1
28807: PPUSH
28808: CALL_OW 39
// RemoveUnit ( Khatam ) ;
28812: LD_EXP 35
28816: PPUSH
28817: CALL_OW 64
// disable ;
28821: DISABLE
// end ; end ;
28822: END
// every 0 0$30 trigger joinedToEpsilon and hasBase and LoadVariable ( 02_mikhailStatus_1 , 0 ) and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or not arabianAttack ) do
28823: LD_EXP 7
28827: PUSH
28828: LD_EXP 9
28832: AND
28833: PUSH
28834: LD_STRING 02_mikhailStatus_1
28836: PPUSH
28837: LD_INT 0
28839: PPUSH
28840: CALL_OW 30
28844: AND
28845: PUSH
28846: LD_INT 22
28848: PUSH
28849: LD_INT 5
28851: PUSH
28852: EMPTY
28853: LIST
28854: LIST
28855: PPUSH
28856: CALL_OW 69
28860: PUSH
28861: LD_INT 0
28863: EQUAL
28864: AND
28865: PUSH
28866: LD_INT 22
28868: PUSH
28869: LD_INT 2
28871: PUSH
28872: EMPTY
28873: LIST
28874: LIST
28875: PUSH
28876: LD_INT 21
28878: PUSH
28879: LD_INT 1
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: EMPTY
28887: LIST
28888: LIST
28889: PPUSH
28890: CALL_OW 69
28894: PUSH
28895: LD_INT 0
28897: EQUAL
28898: PUSH
28899: LD_EXP 4
28903: NOT
28904: OR
28905: AND
28906: IFFALSE 28922
28908: GO 28910
28910: DISABLE
// begin wait ( 5 5$00 ) ;
28911: LD_INT 10500
28913: PPUSH
28914: CALL_OW 67
// PrepareCornell ;
28918: CALL 3140 0 0
// end ;
28922: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 and IsOk ( Cornell ) do
28923: LD_INT 22
28925: PUSH
28926: LD_INT 1
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PPUSH
28933: CALL_OW 69
28937: PPUSH
28938: LD_EXP 41
28942: PPUSH
28943: CALL_OW 74
28947: PPUSH
28948: LD_EXP 41
28952: PPUSH
28953: CALL_OW 296
28957: PUSH
28958: LD_INT 9
28960: LESS
28961: PUSH
28962: LD_EXP 41
28966: PPUSH
28967: CALL_OW 302
28971: AND
28972: IFFALSE 29416
28974: GO 28976
28976: DISABLE
// begin InGameOn ;
28977: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
28981: LD_EXP 41
28985: PPUSH
28986: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
28990: LD_EXP 41
28994: PPUSH
28995: LD_STRING D7-Corn-1
28997: PPUSH
28998: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
29002: LD_INT 22
29004: PUSH
29005: LD_INT 1
29007: PUSH
29008: EMPTY
29009: LIST
29010: LIST
29011: PUSH
29012: LD_INT 2
29014: PUSH
29015: LD_INT 25
29017: PUSH
29018: LD_INT 1
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 25
29027: PUSH
29028: LD_INT 2
29030: PUSH
29031: EMPTY
29032: LIST
29033: LIST
29034: PUSH
29035: LD_INT 25
29037: PUSH
29038: LD_INT 3
29040: PUSH
29041: EMPTY
29042: LIST
29043: LIST
29044: PUSH
29045: LD_INT 25
29047: PUSH
29048: LD_INT 4
29050: PUSH
29051: EMPTY
29052: LIST
29053: LIST
29054: PUSH
29055: LD_INT 25
29057: PUSH
29058: LD_INT 5
29060: PUSH
29061: EMPTY
29062: LIST
29063: LIST
29064: PUSH
29065: EMPTY
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: PUSH
29073: EMPTY
29074: LIST
29075: LIST
29076: PPUSH
29077: CALL_OW 69
29081: PPUSH
29082: LD_STRING D7-Sol1-1
29084: PPUSH
29085: LD_STRING D7-FSol1-1
29087: PPUSH
29088: CALL 22609 0 3
// CenterNowOnUnits ( Cornell ) ;
29092: LD_EXP 41
29096: PPUSH
29097: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
29101: LD_EXP 41
29105: PPUSH
29106: LD_STRING D7-Corn-2
29108: PPUSH
29109: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
29113: LD_EXP 22
29117: PPUSH
29118: LD_STRING D7-JMM-2
29120: PPUSH
29121: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
29125: LD_EXP 41
29129: PPUSH
29130: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
29134: LD_EXP 41
29138: PPUSH
29139: LD_STRING D7-Corn-3
29141: PPUSH
29142: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
29146: LD_EXP 41
29150: PPUSH
29151: LD_INT 250
29153: PPUSH
29154: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
29158: LD_EXP 41
29162: PPUSH
29163: LD_INT 1
29165: PPUSH
29166: CALL_OW 235
// wait ( 0 0$1 ) ;
29170: LD_INT 35
29172: PPUSH
29173: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
29177: LD_EXP 22
29181: PPUSH
29182: LD_STRING D7-JMM-3
29184: PPUSH
29185: CALL_OW 88
// InGameOff ;
29189: CALL_OW 9
// repeat wait ( 0 0$1 ) ;
29193: LD_INT 35
29195: PPUSH
29196: CALL_OW 67
// if IsDead ( Cornell ) then
29200: LD_EXP 41
29204: PPUSH
29205: CALL_OW 301
29209: IFFALSE 29213
// exit ;
29211: GO 29416
// until GetLives ( Cornell ) > 350 ;
29213: LD_EXP 41
29217: PPUSH
29218: CALL_OW 256
29222: PUSH
29223: LD_INT 350
29225: GREATER
29226: IFFALSE 29193
// DialogueOn ;
29228: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
29232: LD_EXP 22
29236: PPUSH
29237: LD_STRING D7a-JMM-1
29239: PPUSH
29240: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
29244: LD_EXP 41
29248: PPUSH
29249: LD_STRING D7a-Corn-1
29251: PPUSH
29252: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
29256: LD_EXP 22
29260: PPUSH
29261: LD_STRING D7a-JMM-2
29263: PPUSH
29264: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
29268: LD_EXP 41
29272: PPUSH
29273: LD_STRING D7a-Corn-2
29275: PPUSH
29276: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
29280: LD_EXP 22
29284: PPUSH
29285: LD_STRING D7a-JMM-3
29287: PPUSH
29288: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
29292: LD_EXP 41
29296: PPUSH
29297: LD_STRING D7a-Corn-3
29299: PPUSH
29300: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
29304: LD_EXP 22
29308: PPUSH
29309: LD_STRING D7a-JMM-4
29311: PPUSH
29312: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
29316: LD_EXP 41
29320: PPUSH
29321: LD_STRING D7a-Corn-4
29323: PPUSH
29324: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
29328: LD_EXP 22
29332: PPUSH
29333: LD_STRING D7a-JMM-5
29335: PPUSH
29336: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
29340: LD_EXP 41
29344: PPUSH
29345: LD_STRING D7a-Corn-5
29347: PPUSH
29348: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
29352: LD_EXP 22
29356: PPUSH
29357: LD_STRING D7a-JMM-6
29359: PPUSH
29360: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
29364: LD_EXP 41
29368: PPUSH
29369: LD_STRING D7a-Corn-6
29371: PPUSH
29372: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
29376: LD_EXP 22
29380: PPUSH
29381: LD_STRING D7a-JMM-7
29383: PPUSH
29384: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
29388: LD_EXP 41
29392: PPUSH
29393: LD_STRING D7a-Corn-7
29395: PPUSH
29396: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
29400: LD_EXP 22
29404: PPUSH
29405: LD_STRING D7a-JMM-8
29407: PPUSH
29408: CALL_OW 88
// DialogueOff ;
29412: CALL_OW 7
// end ;
29416: END
// function EnchancedSaveCharacters ( unit , id ) ; begin
29417: LD_INT 0
29419: PPUSH
// if IsLive ( unit ) or unit in JMMSquad then
29420: LD_VAR 0 1
29424: PPUSH
29425: CALL_OW 300
29429: PUSH
29430: LD_VAR 0 1
29434: PUSH
29435: LD_EXP 44
29439: IN
29440: OR
29441: IFFALSE 29457
// SaveCharacters ( unit , id ) ;
29443: LD_VAR 0 1
29447: PPUSH
29448: LD_VAR 0 2
29452: PPUSH
29453: CALL_OW 38
// end ;
29457: LD_VAR 0 3
29461: RET
// export function FinishMission ; var m1 , m2 , m3 ; begin
29462: LD_INT 0
29464: PPUSH
29465: PPUSH
29466: PPUSH
29467: PPUSH
// if not hasSniper then
29468: LD_EXP 20
29472: NOT
29473: IFFALSE 29482
// SetAchievement ( ACH_SNIPER ) ;
29475: LD_STRING ACH_SNIPER
29477: PPUSH
29478: CALL_OW 543
// m1 := false ;
29482: LD_ADDR_VAR 0 2
29486: PUSH
29487: LD_INT 0
29489: ST_TO_ADDR
// m2 := false ;
29490: LD_ADDR_VAR 0 3
29494: PUSH
29495: LD_INT 0
29497: ST_TO_ADDR
// m3 := false ;
29498: LD_ADDR_VAR 0 4
29502: PUSH
29503: LD_INT 0
29505: ST_TO_ADDR
// if GetTech ( tech_LasSight , 1 ) = state_researched then
29506: LD_INT 12
29508: PPUSH
29509: LD_INT 1
29511: PPUSH
29512: CALL_OW 321
29516: PUSH
29517: LD_INT 2
29519: EQUAL
29520: IFFALSE 29542
// begin AddMedal ( sights , 1 ) ;
29522: LD_STRING sights
29524: PPUSH
29525: LD_INT 1
29527: PPUSH
29528: CALL_OW 101
// m1 := true ;
29532: LD_ADDR_VAR 0 2
29536: PUSH
29537: LD_INT 1
29539: ST_TO_ADDR
// end else
29540: GO 29553
// AddMedal ( sights , - 1 ) ;
29542: LD_STRING sights
29544: PPUSH
29545: LD_INT 1
29547: NEG
29548: PPUSH
29549: CALL_OW 101
// if GetTech ( tech_AI , 1 ) = state_researched then
29553: LD_INT 32
29555: PPUSH
29556: LD_INT 1
29558: PPUSH
29559: CALL_OW 321
29563: PUSH
29564: LD_INT 2
29566: EQUAL
29567: IFFALSE 29589
// begin AddMedal ( computers , 1 ) ;
29569: LD_STRING computers
29571: PPUSH
29572: LD_INT 1
29574: PPUSH
29575: CALL_OW 101
// m2 := true ;
29579: LD_ADDR_VAR 0 3
29583: PUSH
29584: LD_INT 1
29586: ST_TO_ADDR
// end else
29587: GO 29600
// AddMedal ( computers , - 1 ) ;
29589: LD_STRING computers
29591: PPUSH
29592: LD_INT 1
29594: NEG
29595: PPUSH
29596: CALL_OW 101
// if arabianEscapedCounter = 0 then
29600: LD_EXP 21
29604: PUSH
29605: LD_INT 0
29607: EQUAL
29608: IFFALSE 29640
// begin AddMedal ( renegades , 2 ) ;
29610: LD_STRING renegades
29612: PPUSH
29613: LD_INT 2
29615: PPUSH
29616: CALL_OW 101
// m3 := true ;
29620: LD_ADDR_VAR 0 4
29624: PUSH
29625: LD_INT 1
29627: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
29628: LD_INT 0
29630: PPUSH
29631: LD_STRING 10_ScientistsEscape_1
29633: PPUSH
29634: CALL_OW 39
// end else
29638: GO 29651
// AddMedal ( renegades , - 1 ) ;
29640: LD_STRING renegades
29642: PPUSH
29643: LD_INT 1
29645: NEG
29646: PPUSH
29647: CALL_OW 101
// SaveEpsilonBase ;
29651: CALL 30472 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
29655: LD_VAR 0 2
29659: PUSH
29660: LD_VAR 0 3
29664: AND
29665: PUSH
29666: LD_VAR 0 4
29670: AND
29671: PUSH
29672: LD_OWVAR 67
29676: PUSH
29677: LD_INT 3
29679: GREATEREQUAL
29680: AND
29681: IFFALSE 29693
// SetAchievementEX ( ACH_AMER , 10 ) ;
29683: LD_STRING ACH_AMER
29685: PPUSH
29686: LD_INT 10
29688: PPUSH
29689: CALL_OW 564
// if tick <= 40 40$00 then
29693: LD_OWVAR 1
29697: PUSH
29698: LD_INT 84000
29700: LESSEQUAL
29701: IFFALSE 29717
// begin wait ( 3 ) ;
29703: LD_INT 3
29705: PPUSH
29706: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
29710: LD_STRING ACH_ASPEED_10
29712: PPUSH
29713: CALL_OW 543
// end ; GiveMedals ( Main ) ;
29717: LD_STRING Main
29719: PPUSH
29720: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
29724: LD_INT 22
29726: PUSH
29727: LD_INT 1
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 23
29736: PUSH
29737: LD_INT 1
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 21
29746: PUSH
29747: LD_INT 1
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 2
29756: PUSH
29757: LD_INT 25
29759: PUSH
29760: LD_INT 1
29762: PUSH
29763: EMPTY
29764: LIST
29765: LIST
29766: PUSH
29767: LD_INT 25
29769: PUSH
29770: LD_INT 2
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 25
29779: PUSH
29780: LD_INT 3
29782: PUSH
29783: EMPTY
29784: LIST
29785: LIST
29786: PUSH
29787: LD_INT 25
29789: PUSH
29790: LD_INT 4
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: PUSH
29797: LD_INT 25
29799: PUSH
29800: LD_INT 5
29802: PUSH
29803: EMPTY
29804: LIST
29805: LIST
29806: PUSH
29807: LD_INT 25
29809: PUSH
29810: LD_INT 8
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: LIST
29821: LIST
29822: LIST
29823: LIST
29824: LIST
29825: PUSH
29826: EMPTY
29827: LIST
29828: LIST
29829: LIST
29830: LIST
29831: PPUSH
29832: CALL_OW 69
29836: PPUSH
29837: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
29841: LD_EXP 22
29845: PPUSH
29846: LD_EXP 2
29850: PUSH
29851: LD_STRING JMM
29853: STR
29854: PPUSH
29855: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
29859: LD_EXP 23
29863: PPUSH
29864: LD_EXP 2
29868: PUSH
29869: LD_STRING Brown
29871: STR
29872: PPUSH
29873: CALL 29417 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
29877: LD_EXP 24
29881: PPUSH
29882: LD_EXP 2
29886: PUSH
29887: LD_STRING Donaldson
29889: STR
29890: PPUSH
29891: CALL 29417 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
29895: LD_EXP 25
29899: PPUSH
29900: LD_EXP 2
29904: PUSH
29905: LD_STRING Bobby
29907: STR
29908: PPUSH
29909: CALL 29417 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
29913: LD_EXP 26
29917: PPUSH
29918: LD_EXP 2
29922: PUSH
29923: LD_STRING Cyrus
29925: STR
29926: PPUSH
29927: CALL 29417 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
29931: LD_EXP 27
29935: PPUSH
29936: LD_EXP 2
29940: PUSH
29941: LD_STRING Lisa
29943: STR
29944: PPUSH
29945: CALL 29417 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
29949: LD_EXP 28
29953: PPUSH
29954: LD_EXP 2
29958: PUSH
29959: LD_STRING Frank
29961: STR
29962: PPUSH
29963: CALL 29417 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
29967: LD_EXP 29
29971: PPUSH
29972: LD_EXP 2
29976: PUSH
29977: LD_STRING Kikuchi
29979: STR
29980: PPUSH
29981: CALL 29417 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
29985: LD_EXP 30
29989: PPUSH
29990: LD_EXP 2
29994: PUSH
29995: LD_STRING Houten
29997: STR
29998: PPUSH
29999: CALL 29417 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
30003: LD_EXP 31
30007: PPUSH
30008: LD_EXP 2
30012: PUSH
30013: LD_STRING Gary
30015: STR
30016: PPUSH
30017: CALL 29417 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
30021: LD_EXP 41
30025: PPUSH
30026: LD_EXP 2
30030: PUSH
30031: LD_STRING Cornell
30033: STR
30034: PPUSH
30035: CALL 29417 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
30039: LD_EXP 32
30043: PPUSH
30044: LD_EXP 2
30048: PUSH
30049: LD_STRING Simms
30051: STR
30052: PPUSH
30053: CALL 29417 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
30057: LD_EXP 33
30061: PPUSH
30062: LD_EXP 2
30066: PUSH
30067: LD_STRING Denis
30069: STR
30070: PPUSH
30071: CALL 29417 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
30075: LD_EXP 34
30079: PPUSH
30080: LD_EXP 2
30084: PUSH
30085: LD_STRING Joan
30087: STR
30088: PPUSH
30089: CALL 29417 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
30093: LD_EXP 36
30097: PPUSH
30098: LD_EXP 2
30102: PUSH
30103: LD_STRING Gladstone
30105: STR
30106: PPUSH
30107: CALL 29417 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
30111: LD_EXP 38
30115: PPUSH
30116: LD_EXP 2
30120: PUSH
30121: LD_STRING DeltaDoctor
30123: STR
30124: PPUSH
30125: CALL 29417 0 2
// if IsLive ( Mike ) then
30129: LD_EXP 40
30133: PPUSH
30134: CALL_OW 300
30138: IFFALSE 30158
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
30140: LD_EXP 40
30144: PPUSH
30145: LD_EXP 2
30149: PUSH
30150: LD_STRING Mike
30152: STR
30153: PPUSH
30154: CALL_OW 38
// SaveCharacters ( others , 10c_lock ) ;
30158: LD_EXP 45
30162: PPUSH
30163: LD_STRING 10c_lock
30165: PPUSH
30166: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
30170: LD_INT 50
30172: PUSH
30173: EMPTY
30174: LIST
30175: PUSH
30176: LD_INT 22
30178: PUSH
30179: LD_INT 1
30181: PUSH
30182: EMPTY
30183: LIST
30184: LIST
30185: PUSH
30186: LD_INT 21
30188: PUSH
30189: LD_INT 1
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: PUSH
30196: LD_INT 2
30198: PUSH
30199: LD_INT 25
30201: PUSH
30202: LD_INT 1
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: LD_INT 25
30211: PUSH
30212: LD_INT 2
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: PUSH
30219: LD_INT 25
30221: PUSH
30222: LD_INT 3
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 25
30231: PUSH
30232: LD_INT 4
30234: PUSH
30235: EMPTY
30236: LIST
30237: LIST
30238: PUSH
30239: LD_INT 25
30241: PUSH
30242: LD_INT 5
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 25
30251: PUSH
30252: LD_INT 8
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: LIST
30263: LIST
30264: LIST
30265: LIST
30266: LIST
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: PPUSH
30274: CALL_OW 69
30278: PUSH
30279: LD_EXP 22
30283: PUSH
30284: LD_EXP 23
30288: PUSH
30289: LD_EXP 24
30293: PUSH
30294: LD_EXP 25
30298: PUSH
30299: LD_EXP 26
30303: PUSH
30304: LD_EXP 27
30308: PUSH
30309: LD_EXP 28
30313: PUSH
30314: LD_EXP 36
30318: PUSH
30319: LD_EXP 29
30323: PUSH
30324: LD_EXP 33
30328: PUSH
30329: LD_EXP 34
30333: PUSH
30334: LD_EXP 30
30338: PUSH
30339: LD_EXP 32
30343: PUSH
30344: LD_EXP 31
30348: PUSH
30349: LD_EXP 38
30353: PUSH
30354: LD_EXP 41
30358: PUSH
30359: EMPTY
30360: LIST
30361: LIST
30362: LIST
30363: LIST
30364: LIST
30365: LIST
30366: LIST
30367: LIST
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: LIST
30373: LIST
30374: LIST
30375: LIST
30376: DIFF
30377: PPUSH
30378: LD_STRING 10_other_survivors
30380: PPUSH
30381: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) diff Mike , 10_ape ) ;
30385: LD_INT 50
30387: PUSH
30388: EMPTY
30389: LIST
30390: PUSH
30391: LD_INT 22
30393: PUSH
30394: LD_INT 1
30396: PUSH
30397: EMPTY
30398: LIST
30399: LIST
30400: PUSH
30401: LD_INT 21
30403: PUSH
30404: LD_INT 1
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 2
30413: PUSH
30414: LD_INT 25
30416: PUSH
30417: LD_INT 16
30419: PUSH
30420: EMPTY
30421: LIST
30422: LIST
30423: PUSH
30424: LD_INT 25
30426: PUSH
30427: LD_INT 12
30429: PUSH
30430: EMPTY
30431: LIST
30432: LIST
30433: PUSH
30434: EMPTY
30435: LIST
30436: LIST
30437: LIST
30438: PUSH
30439: EMPTY
30440: LIST
30441: LIST
30442: LIST
30443: LIST
30444: PPUSH
30445: CALL_OW 69
30449: PUSH
30450: LD_EXP 40
30454: DIFF
30455: PPUSH
30456: LD_STRING 10_ape
30458: PPUSH
30459: CALL_OW 38
// YouWin ;
30463: CALL_OW 103
// end ;
30467: LD_VAR 0 1
30471: RET
// function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
30472: LD_INT 0
30474: PPUSH
30475: PPUSH
30476: PPUSH
30477: PPUSH
// epsilonBase := [ ] ;
30478: LD_ADDR_VAR 0 2
30482: PUSH
30483: EMPTY
30484: ST_TO_ADDR
// buildings := FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
30485: LD_ADDR_VAR 0 3
30489: PUSH
30490: LD_INT 22
30492: PUSH
30493: LD_INT 1
30495: PUSH
30496: EMPTY
30497: LIST
30498: LIST
30499: PUSH
30500: LD_INT 21
30502: PUSH
30503: LD_INT 3
30505: PUSH
30506: EMPTY
30507: LIST
30508: LIST
30509: PUSH
30510: LD_INT 50
30512: PUSH
30513: EMPTY
30514: LIST
30515: PUSH
30516: EMPTY
30517: LIST
30518: LIST
30519: LIST
30520: PPUSH
30521: CALL_OW 69
30525: ST_TO_ADDR
// for i in buildings do
30526: LD_ADDR_VAR 0 4
30530: PUSH
30531: LD_VAR 0 3
30535: PUSH
30536: FOR_IN
30537: IFFALSE 30989
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
30539: LD_VAR 0 4
30543: PPUSH
30544: CALL_OW 266
30548: PUSH
30549: LD_INT 6
30551: PUSH
30552: LD_INT 7
30554: PUSH
30555: LD_INT 8
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: LIST
30562: IN
30563: IFFALSE 30677
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
30565: LD_ADDR_VAR 0 2
30569: PUSH
30570: LD_VAR 0 2
30574: PUSH
30575: LD_VAR 0 4
30579: PPUSH
30580: CALL_OW 266
30584: PUSH
30585: LD_VAR 0 4
30589: PPUSH
30590: CALL_OW 250
30594: PUSH
30595: LD_VAR 0 4
30599: PPUSH
30600: CALL_OW 251
30604: PUSH
30605: LD_VAR 0 4
30609: PPUSH
30610: CALL_OW 254
30614: PUSH
30615: LD_VAR 0 4
30619: PPUSH
30620: CALL_OW 267
30624: PUSH
30625: LD_VAR 0 4
30629: PPUSH
30630: CALL_OW 248
30634: PUSH
30635: LD_VAR 0 4
30639: PPUSH
30640: LD_INT 1
30642: PPUSH
30643: CALL_OW 268
30647: PUSH
30648: LD_VAR 0 4
30652: PPUSH
30653: LD_INT 2
30655: PPUSH
30656: CALL_OW 268
30660: PUSH
30661: EMPTY
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: PUSH
30671: EMPTY
30672: LIST
30673: ADD
30674: ST_TO_ADDR
30675: GO 30987
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
30677: LD_VAR 0 4
30681: PPUSH
30682: CALL_OW 266
30686: PUSH
30687: LD_INT 32
30689: EQUAL
30690: PUSH
30691: LD_VAR 0 4
30695: PPUSH
30696: CALL_OW 266
30700: PUSH
30701: LD_INT 33
30703: EQUAL
30704: OR
30705: IFFALSE 30802
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
30707: LD_ADDR_VAR 0 2
30711: PUSH
30712: LD_VAR 0 2
30716: PUSH
30717: LD_VAR 0 4
30721: PPUSH
30722: CALL_OW 266
30726: PUSH
30727: LD_VAR 0 4
30731: PPUSH
30732: CALL_OW 250
30736: PUSH
30737: LD_VAR 0 4
30741: PPUSH
30742: CALL_OW 251
30746: PUSH
30747: LD_VAR 0 4
30751: PPUSH
30752: CALL_OW 254
30756: PUSH
30757: LD_VAR 0 4
30761: PPUSH
30762: CALL_OW 267
30766: PUSH
30767: LD_VAR 0 4
30771: PPUSH
30772: CALL_OW 248
30776: PUSH
30777: LD_VAR 0 4
30781: PPUSH
30782: CALL_OW 269
30786: PUSH
30787: EMPTY
30788: LIST
30789: LIST
30790: LIST
30791: LIST
30792: LIST
30793: LIST
30794: LIST
30795: PUSH
30796: EMPTY
30797: LIST
30798: ADD
30799: ST_TO_ADDR
30800: GO 30987
// if GetBType ( i ) = b_factory then
30802: LD_VAR 0 4
30806: PPUSH
30807: CALL_OW 266
30811: PUSH
30812: LD_INT 3
30814: EQUAL
30815: IFFALSE 30905
// epsilonBase := Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
30817: LD_ADDR_VAR 0 2
30821: PUSH
30822: LD_VAR 0 2
30826: PPUSH
30827: LD_INT 1
30829: PPUSH
30830: LD_VAR 0 4
30834: PPUSH
30835: CALL_OW 266
30839: PUSH
30840: LD_VAR 0 4
30844: PPUSH
30845: CALL_OW 250
30849: PUSH
30850: LD_VAR 0 4
30854: PPUSH
30855: CALL_OW 251
30859: PUSH
30860: LD_VAR 0 4
30864: PPUSH
30865: CALL_OW 254
30869: PUSH
30870: LD_VAR 0 4
30874: PPUSH
30875: CALL_OW 267
30879: PUSH
30880: LD_VAR 0 4
30884: PPUSH
30885: CALL_OW 248
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: LIST
30894: LIST
30895: LIST
30896: LIST
30897: PPUSH
30898: CALL_OW 2
30902: ST_TO_ADDR
30903: GO 30987
// epsilonBase := epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
30905: LD_ADDR_VAR 0 2
30909: PUSH
30910: LD_VAR 0 2
30914: PUSH
30915: LD_VAR 0 4
30919: PPUSH
30920: CALL_OW 266
30924: PUSH
30925: LD_VAR 0 4
30929: PPUSH
30930: CALL_OW 250
30934: PUSH
30935: LD_VAR 0 4
30939: PPUSH
30940: CALL_OW 251
30944: PUSH
30945: LD_VAR 0 4
30949: PPUSH
30950: CALL_OW 254
30954: PUSH
30955: LD_VAR 0 4
30959: PPUSH
30960: CALL_OW 267
30964: PUSH
30965: LD_VAR 0 4
30969: PPUSH
30970: CALL_OW 248
30974: PUSH
30975: EMPTY
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: PUSH
30983: EMPTY
30984: LIST
30985: ADD
30986: ST_TO_ADDR
// end ;
30987: GO 30536
30989: POP
30990: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
30991: LD_VAR 0 2
30995: PPUSH
30996: LD_STRING 10_EpsilonBase
30998: PPUSH
30999: CALL_OW 39
// SaveVariable ( ListEnvironmentArea ( epsilonBaseArea ) , 10_EpsilonEnv ) ;
31003: LD_INT 34
31005: PPUSH
31006: CALL_OW 353
31010: PPUSH
31011: LD_STRING 10_EpsilonEnv
31013: PPUSH
31014: CALL_OW 39
// end ; end_of_file
31018: LD_VAR 0 1
31022: RET
// every 0 0$35 + 0 0$20 trigger joinedToEpsilon do var i , tmp ;
31023: LD_EXP 7
31027: IFFALSE 31131
31029: GO 31031
31031: DISABLE
31032: LD_INT 0
31034: PPUSH
31035: PPUSH
// begin enable ;
31036: ENABLE
// tmp := [ cratesSpawn1Area , cratesSpawn2Area , cratesSpawn3Area , cratesSpawn4Area , cratesSpawn5Area ] ;
31037: LD_ADDR_VAR 0 2
31041: PUSH
31042: LD_INT 13
31044: PUSH
31045: LD_INT 14
31047: PUSH
31048: LD_INT 15
31050: PUSH
31051: LD_INT 16
31053: PUSH
31054: LD_INT 17
31056: PUSH
31057: EMPTY
31058: LIST
31059: LIST
31060: LIST
31061: LIST
31062: LIST
31063: ST_TO_ADDR
// i := tmp [ rand ( 1 , Count ( tmp ) ) ] ;
31064: LD_ADDR_VAR 0 1
31068: PUSH
31069: LD_VAR 0 2
31073: PUSH
31074: LD_INT 1
31076: PPUSH
31077: LD_VAR 0 2
31081: PPUSH
31082: CALL 53437 0 1
31086: PPUSH
31087: CALL_OW 12
31091: ARRAY
31092: ST_TO_ADDR
// if GetListOfCratesInArea ( i ) < 12 then
31093: LD_VAR 0 1
31097: PPUSH
31098: CALL_OW 435
31102: PUSH
31103: LD_INT 12
31105: LESS
31106: IFFALSE 31131
// CreateCratesArea ( rand ( 1 , 5 ) , i , true ) ;
31108: LD_INT 1
31110: PPUSH
31111: LD_INT 5
31113: PPUSH
31114: CALL_OW 12
31118: PPUSH
31119: LD_VAR 0 1
31123: PPUSH
31124: LD_INT 1
31126: PPUSH
31127: CALL_OW 55
// end ;
31131: PPOPN 2
31133: END
// every 0 0$20 trigger tick < 4 4$00 and hasBase do
31134: LD_OWVAR 1
31138: PUSH
31139: LD_INT 8400
31141: LESS
31142: PUSH
31143: LD_EXP 9
31147: AND
31148: IFFALSE 31175
31150: GO 31152
31152: DISABLE
// begin enable ;
31153: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , cratesSpawn3Area , true ) ;
31154: LD_INT 1
31156: PPUSH
31157: LD_INT 5
31159: PPUSH
31160: CALL_OW 12
31164: PPUSH
31165: LD_INT 15
31167: PPUSH
31168: LD_INT 1
31170: PPUSH
31171: CALL_OW 55
// end ;
31175: END
// every 0 0$55 trigger ruBase do
31176: LD_EXP 67
31180: IFFALSE 31209
31182: GO 31184
31184: DISABLE
// begin enable ;
31185: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , ruBaseArea , true ) ;
31186: LD_INT 1
31188: PPUSH
31189: LD_INT 5
31191: PPUSH
31192: CALL_OW 12
31196: PPUSH
31197: LD_EXP 65
31201: PPUSH
31202: LD_INT 1
31204: PPUSH
31205: CALL_OW 55
// end ;
31209: END
// every 1 1$05 trigger ruBase2 do
31210: LD_EXP 68
31214: IFFALSE 31243
31216: GO 31218
31218: DISABLE
// begin enable ;
31219: ENABLE
// CreateCratesArea ( rand ( 1 , 5 ) , ruBaseArea2 , true ) ;
31220: LD_INT 1
31222: PPUSH
31223: LD_INT 5
31225: PPUSH
31226: CALL_OW 12
31230: PPUSH
31231: LD_EXP 66
31235: PPUSH
31236: LD_INT 1
31238: PPUSH
31239: CALL_OW 55
// end ; end_of_file end_of_file
31243: END
// export globalGameSaveCounter ; every 0 0$1 do
31244: GO 31246
31246: DISABLE
// begin enable ;
31247: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
31248: LD_STRING updateTimer(
31250: PUSH
31251: LD_OWVAR 1
31255: STR
31256: PUSH
31257: LD_STRING );
31259: STR
31260: PPUSH
31261: CALL_OW 559
// end ;
31265: END
// every 0 0$1 do
31266: GO 31268
31268: DISABLE
// begin globalGameSaveCounter := 0 ;
31269: LD_ADDR_EXP 82
31273: PUSH
31274: LD_INT 0
31276: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
31277: LD_STRING setGameSaveCounter(0)
31279: PPUSH
31280: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
31284: LD_STRING initStreamRollete();
31286: PPUSH
31287: CALL_OW 559
// InitStreamMode ;
31291: CALL 32617 0 0
// DefineStreamItems ( false ) ;
31295: LD_INT 0
31297: PPUSH
31298: CALL 33081 0 1
// end ;
31302: END
// export function SOS_MapStart ( ) ; begin
31303: LD_INT 0
31305: PPUSH
// if streamModeActive then
31306: LD_EXP 83
31310: IFFALSE 31319
// DefineStreamItems ( true ) ;
31312: LD_INT 1
31314: PPUSH
31315: CALL 33081 0 1
// UpdateLuaVariables ( ) ;
31319: CALL 31336 0 0
// UpdateFactoryWaypoints ( ) ;
31323: CALL 45950 0 0
// UpdateWarehouseGatheringPoints ( ) ;
31327: CALL 46207 0 0
// end ;
31331: LD_VAR 0 1
31335: RET
// function UpdateLuaVariables ( ) ; begin
31336: LD_INT 0
31338: PPUSH
// if globalGameSaveCounter then
31339: LD_EXP 82
31343: IFFALSE 31377
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
31345: LD_ADDR_EXP 82
31349: PUSH
31350: LD_EXP 82
31354: PPUSH
31355: CALL 90017 0 1
31359: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
31360: LD_STRING setGameSaveCounter(
31362: PUSH
31363: LD_EXP 82
31367: STR
31368: PUSH
31369: LD_STRING )
31371: STR
31372: PPUSH
31373: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
31377: LD_STRING setGameDifficulty(
31379: PUSH
31380: LD_OWVAR 67
31384: STR
31385: PUSH
31386: LD_STRING )
31388: STR
31389: PPUSH
31390: CALL_OW 559
// end ;
31394: LD_VAR 0 1
31398: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
31399: LD_INT 0
31401: PPUSH
// if p2 = stream_mode then
31402: LD_VAR 0 2
31406: PUSH
31407: LD_INT 100
31409: EQUAL
31410: IFFALSE 32413
// begin if not StreamModeActive then
31412: LD_EXP 83
31416: NOT
31417: IFFALSE 31427
// StreamModeActive := true ;
31419: LD_ADDR_EXP 83
31423: PUSH
31424: LD_INT 1
31426: ST_TO_ADDR
// if p3 = 0 then
31427: LD_VAR 0 3
31431: PUSH
31432: LD_INT 0
31434: EQUAL
31435: IFFALSE 31441
// InitStreamMode ;
31437: CALL 32617 0 0
// if p3 = 1 then
31441: LD_VAR 0 3
31445: PUSH
31446: LD_INT 1
31448: EQUAL
31449: IFFALSE 31459
// sRocket := true ;
31451: LD_ADDR_EXP 88
31455: PUSH
31456: LD_INT 1
31458: ST_TO_ADDR
// if p3 = 2 then
31459: LD_VAR 0 3
31463: PUSH
31464: LD_INT 2
31466: EQUAL
31467: IFFALSE 31477
// sSpeed := true ;
31469: LD_ADDR_EXP 87
31473: PUSH
31474: LD_INT 1
31476: ST_TO_ADDR
// if p3 = 3 then
31477: LD_VAR 0 3
31481: PUSH
31482: LD_INT 3
31484: EQUAL
31485: IFFALSE 31495
// sEngine := true ;
31487: LD_ADDR_EXP 89
31491: PUSH
31492: LD_INT 1
31494: ST_TO_ADDR
// if p3 = 4 then
31495: LD_VAR 0 3
31499: PUSH
31500: LD_INT 4
31502: EQUAL
31503: IFFALSE 31513
// sSpec := true ;
31505: LD_ADDR_EXP 86
31509: PUSH
31510: LD_INT 1
31512: ST_TO_ADDR
// if p3 = 5 then
31513: LD_VAR 0 3
31517: PUSH
31518: LD_INT 5
31520: EQUAL
31521: IFFALSE 31531
// sLevel := true ;
31523: LD_ADDR_EXP 90
31527: PUSH
31528: LD_INT 1
31530: ST_TO_ADDR
// if p3 = 6 then
31531: LD_VAR 0 3
31535: PUSH
31536: LD_INT 6
31538: EQUAL
31539: IFFALSE 31549
// sArmoury := true ;
31541: LD_ADDR_EXP 91
31545: PUSH
31546: LD_INT 1
31548: ST_TO_ADDR
// if p3 = 7 then
31549: LD_VAR 0 3
31553: PUSH
31554: LD_INT 7
31556: EQUAL
31557: IFFALSE 31567
// sRadar := true ;
31559: LD_ADDR_EXP 92
31563: PUSH
31564: LD_INT 1
31566: ST_TO_ADDR
// if p3 = 8 then
31567: LD_VAR 0 3
31571: PUSH
31572: LD_INT 8
31574: EQUAL
31575: IFFALSE 31585
// sBunker := true ;
31577: LD_ADDR_EXP 93
31581: PUSH
31582: LD_INT 1
31584: ST_TO_ADDR
// if p3 = 9 then
31585: LD_VAR 0 3
31589: PUSH
31590: LD_INT 9
31592: EQUAL
31593: IFFALSE 31603
// sHack := true ;
31595: LD_ADDR_EXP 94
31599: PUSH
31600: LD_INT 1
31602: ST_TO_ADDR
// if p3 = 10 then
31603: LD_VAR 0 3
31607: PUSH
31608: LD_INT 10
31610: EQUAL
31611: IFFALSE 31621
// sFire := true ;
31613: LD_ADDR_EXP 95
31617: PUSH
31618: LD_INT 1
31620: ST_TO_ADDR
// if p3 = 11 then
31621: LD_VAR 0 3
31625: PUSH
31626: LD_INT 11
31628: EQUAL
31629: IFFALSE 31639
// sRefresh := true ;
31631: LD_ADDR_EXP 96
31635: PUSH
31636: LD_INT 1
31638: ST_TO_ADDR
// if p3 = 12 then
31639: LD_VAR 0 3
31643: PUSH
31644: LD_INT 12
31646: EQUAL
31647: IFFALSE 31657
// sExp := true ;
31649: LD_ADDR_EXP 97
31653: PUSH
31654: LD_INT 1
31656: ST_TO_ADDR
// if p3 = 13 then
31657: LD_VAR 0 3
31661: PUSH
31662: LD_INT 13
31664: EQUAL
31665: IFFALSE 31675
// sDepot := true ;
31667: LD_ADDR_EXP 98
31671: PUSH
31672: LD_INT 1
31674: ST_TO_ADDR
// if p3 = 14 then
31675: LD_VAR 0 3
31679: PUSH
31680: LD_INT 14
31682: EQUAL
31683: IFFALSE 31693
// sFlag := true ;
31685: LD_ADDR_EXP 99
31689: PUSH
31690: LD_INT 1
31692: ST_TO_ADDR
// if p3 = 15 then
31693: LD_VAR 0 3
31697: PUSH
31698: LD_INT 15
31700: EQUAL
31701: IFFALSE 31711
// sKamikadze := true ;
31703: LD_ADDR_EXP 107
31707: PUSH
31708: LD_INT 1
31710: ST_TO_ADDR
// if p3 = 16 then
31711: LD_VAR 0 3
31715: PUSH
31716: LD_INT 16
31718: EQUAL
31719: IFFALSE 31729
// sTroll := true ;
31721: LD_ADDR_EXP 108
31725: PUSH
31726: LD_INT 1
31728: ST_TO_ADDR
// if p3 = 17 then
31729: LD_VAR 0 3
31733: PUSH
31734: LD_INT 17
31736: EQUAL
31737: IFFALSE 31747
// sSlow := true ;
31739: LD_ADDR_EXP 109
31743: PUSH
31744: LD_INT 1
31746: ST_TO_ADDR
// if p3 = 18 then
31747: LD_VAR 0 3
31751: PUSH
31752: LD_INT 18
31754: EQUAL
31755: IFFALSE 31765
// sLack := true ;
31757: LD_ADDR_EXP 110
31761: PUSH
31762: LD_INT 1
31764: ST_TO_ADDR
// if p3 = 19 then
31765: LD_VAR 0 3
31769: PUSH
31770: LD_INT 19
31772: EQUAL
31773: IFFALSE 31783
// sTank := true ;
31775: LD_ADDR_EXP 112
31779: PUSH
31780: LD_INT 1
31782: ST_TO_ADDR
// if p3 = 20 then
31783: LD_VAR 0 3
31787: PUSH
31788: LD_INT 20
31790: EQUAL
31791: IFFALSE 31801
// sRemote := true ;
31793: LD_ADDR_EXP 113
31797: PUSH
31798: LD_INT 1
31800: ST_TO_ADDR
// if p3 = 21 then
31801: LD_VAR 0 3
31805: PUSH
31806: LD_INT 21
31808: EQUAL
31809: IFFALSE 31819
// sPowell := true ;
31811: LD_ADDR_EXP 114
31815: PUSH
31816: LD_INT 1
31818: ST_TO_ADDR
// if p3 = 22 then
31819: LD_VAR 0 3
31823: PUSH
31824: LD_INT 22
31826: EQUAL
31827: IFFALSE 31837
// sTeleport := true ;
31829: LD_ADDR_EXP 117
31833: PUSH
31834: LD_INT 1
31836: ST_TO_ADDR
// if p3 = 23 then
31837: LD_VAR 0 3
31841: PUSH
31842: LD_INT 23
31844: EQUAL
31845: IFFALSE 31855
// sOilTower := true ;
31847: LD_ADDR_EXP 119
31851: PUSH
31852: LD_INT 1
31854: ST_TO_ADDR
// if p3 = 24 then
31855: LD_VAR 0 3
31859: PUSH
31860: LD_INT 24
31862: EQUAL
31863: IFFALSE 31873
// sShovel := true ;
31865: LD_ADDR_EXP 120
31869: PUSH
31870: LD_INT 1
31872: ST_TO_ADDR
// if p3 = 25 then
31873: LD_VAR 0 3
31877: PUSH
31878: LD_INT 25
31880: EQUAL
31881: IFFALSE 31891
// sSheik := true ;
31883: LD_ADDR_EXP 121
31887: PUSH
31888: LD_INT 1
31890: ST_TO_ADDR
// if p3 = 26 then
31891: LD_VAR 0 3
31895: PUSH
31896: LD_INT 26
31898: EQUAL
31899: IFFALSE 31909
// sEarthquake := true ;
31901: LD_ADDR_EXP 123
31905: PUSH
31906: LD_INT 1
31908: ST_TO_ADDR
// if p3 = 27 then
31909: LD_VAR 0 3
31913: PUSH
31914: LD_INT 27
31916: EQUAL
31917: IFFALSE 31927
// sAI := true ;
31919: LD_ADDR_EXP 124
31923: PUSH
31924: LD_INT 1
31926: ST_TO_ADDR
// if p3 = 28 then
31927: LD_VAR 0 3
31931: PUSH
31932: LD_INT 28
31934: EQUAL
31935: IFFALSE 31945
// sCargo := true ;
31937: LD_ADDR_EXP 127
31941: PUSH
31942: LD_INT 1
31944: ST_TO_ADDR
// if p3 = 29 then
31945: LD_VAR 0 3
31949: PUSH
31950: LD_INT 29
31952: EQUAL
31953: IFFALSE 31963
// sDLaser := true ;
31955: LD_ADDR_EXP 128
31959: PUSH
31960: LD_INT 1
31962: ST_TO_ADDR
// if p3 = 30 then
31963: LD_VAR 0 3
31967: PUSH
31968: LD_INT 30
31970: EQUAL
31971: IFFALSE 31981
// sExchange := true ;
31973: LD_ADDR_EXP 129
31977: PUSH
31978: LD_INT 1
31980: ST_TO_ADDR
// if p3 = 31 then
31981: LD_VAR 0 3
31985: PUSH
31986: LD_INT 31
31988: EQUAL
31989: IFFALSE 31999
// sFac := true ;
31991: LD_ADDR_EXP 130
31995: PUSH
31996: LD_INT 1
31998: ST_TO_ADDR
// if p3 = 32 then
31999: LD_VAR 0 3
32003: PUSH
32004: LD_INT 32
32006: EQUAL
32007: IFFALSE 32017
// sPower := true ;
32009: LD_ADDR_EXP 131
32013: PUSH
32014: LD_INT 1
32016: ST_TO_ADDR
// if p3 = 33 then
32017: LD_VAR 0 3
32021: PUSH
32022: LD_INT 33
32024: EQUAL
32025: IFFALSE 32035
// sRandom := true ;
32027: LD_ADDR_EXP 132
32031: PUSH
32032: LD_INT 1
32034: ST_TO_ADDR
// if p3 = 34 then
32035: LD_VAR 0 3
32039: PUSH
32040: LD_INT 34
32042: EQUAL
32043: IFFALSE 32053
// sShield := true ;
32045: LD_ADDR_EXP 133
32049: PUSH
32050: LD_INT 1
32052: ST_TO_ADDR
// if p3 = 35 then
32053: LD_VAR 0 3
32057: PUSH
32058: LD_INT 35
32060: EQUAL
32061: IFFALSE 32071
// sTime := true ;
32063: LD_ADDR_EXP 134
32067: PUSH
32068: LD_INT 1
32070: ST_TO_ADDR
// if p3 = 36 then
32071: LD_VAR 0 3
32075: PUSH
32076: LD_INT 36
32078: EQUAL
32079: IFFALSE 32089
// sTools := true ;
32081: LD_ADDR_EXP 135
32085: PUSH
32086: LD_INT 1
32088: ST_TO_ADDR
// if p3 = 101 then
32089: LD_VAR 0 3
32093: PUSH
32094: LD_INT 101
32096: EQUAL
32097: IFFALSE 32107
// sSold := true ;
32099: LD_ADDR_EXP 100
32103: PUSH
32104: LD_INT 1
32106: ST_TO_ADDR
// if p3 = 102 then
32107: LD_VAR 0 3
32111: PUSH
32112: LD_INT 102
32114: EQUAL
32115: IFFALSE 32125
// sDiff := true ;
32117: LD_ADDR_EXP 101
32121: PUSH
32122: LD_INT 1
32124: ST_TO_ADDR
// if p3 = 103 then
32125: LD_VAR 0 3
32129: PUSH
32130: LD_INT 103
32132: EQUAL
32133: IFFALSE 32143
// sFog := true ;
32135: LD_ADDR_EXP 104
32139: PUSH
32140: LD_INT 1
32142: ST_TO_ADDR
// if p3 = 104 then
32143: LD_VAR 0 3
32147: PUSH
32148: LD_INT 104
32150: EQUAL
32151: IFFALSE 32161
// sReset := true ;
32153: LD_ADDR_EXP 105
32157: PUSH
32158: LD_INT 1
32160: ST_TO_ADDR
// if p3 = 105 then
32161: LD_VAR 0 3
32165: PUSH
32166: LD_INT 105
32168: EQUAL
32169: IFFALSE 32179
// sSun := true ;
32171: LD_ADDR_EXP 106
32175: PUSH
32176: LD_INT 1
32178: ST_TO_ADDR
// if p3 = 106 then
32179: LD_VAR 0 3
32183: PUSH
32184: LD_INT 106
32186: EQUAL
32187: IFFALSE 32197
// sTiger := true ;
32189: LD_ADDR_EXP 102
32193: PUSH
32194: LD_INT 1
32196: ST_TO_ADDR
// if p3 = 107 then
32197: LD_VAR 0 3
32201: PUSH
32202: LD_INT 107
32204: EQUAL
32205: IFFALSE 32215
// sBomb := true ;
32207: LD_ADDR_EXP 103
32211: PUSH
32212: LD_INT 1
32214: ST_TO_ADDR
// if p3 = 108 then
32215: LD_VAR 0 3
32219: PUSH
32220: LD_INT 108
32222: EQUAL
32223: IFFALSE 32233
// sWound := true ;
32225: LD_ADDR_EXP 111
32229: PUSH
32230: LD_INT 1
32232: ST_TO_ADDR
// if p3 = 109 then
32233: LD_VAR 0 3
32237: PUSH
32238: LD_INT 109
32240: EQUAL
32241: IFFALSE 32251
// sBetray := true ;
32243: LD_ADDR_EXP 115
32247: PUSH
32248: LD_INT 1
32250: ST_TO_ADDR
// if p3 = 110 then
32251: LD_VAR 0 3
32255: PUSH
32256: LD_INT 110
32258: EQUAL
32259: IFFALSE 32269
// sContamin := true ;
32261: LD_ADDR_EXP 116
32265: PUSH
32266: LD_INT 1
32268: ST_TO_ADDR
// if p3 = 111 then
32269: LD_VAR 0 3
32273: PUSH
32274: LD_INT 111
32276: EQUAL
32277: IFFALSE 32287
// sOil := true ;
32279: LD_ADDR_EXP 118
32283: PUSH
32284: LD_INT 1
32286: ST_TO_ADDR
// if p3 = 112 then
32287: LD_VAR 0 3
32291: PUSH
32292: LD_INT 112
32294: EQUAL
32295: IFFALSE 32305
// sStu := true ;
32297: LD_ADDR_EXP 122
32301: PUSH
32302: LD_INT 1
32304: ST_TO_ADDR
// if p3 = 113 then
32305: LD_VAR 0 3
32309: PUSH
32310: LD_INT 113
32312: EQUAL
32313: IFFALSE 32323
// sBazooka := true ;
32315: LD_ADDR_EXP 125
32319: PUSH
32320: LD_INT 1
32322: ST_TO_ADDR
// if p3 = 114 then
32323: LD_VAR 0 3
32327: PUSH
32328: LD_INT 114
32330: EQUAL
32331: IFFALSE 32341
// sMortar := true ;
32333: LD_ADDR_EXP 126
32337: PUSH
32338: LD_INT 1
32340: ST_TO_ADDR
// if p3 = 115 then
32341: LD_VAR 0 3
32345: PUSH
32346: LD_INT 115
32348: EQUAL
32349: IFFALSE 32359
// sRanger := true ;
32351: LD_ADDR_EXP 136
32355: PUSH
32356: LD_INT 1
32358: ST_TO_ADDR
// if p3 = 116 then
32359: LD_VAR 0 3
32363: PUSH
32364: LD_INT 116
32366: EQUAL
32367: IFFALSE 32377
// sComputer := true ;
32369: LD_ADDR_EXP 137
32373: PUSH
32374: LD_INT 1
32376: ST_TO_ADDR
// if p3 = 117 then
32377: LD_VAR 0 3
32381: PUSH
32382: LD_INT 117
32384: EQUAL
32385: IFFALSE 32395
// s30 := true ;
32387: LD_ADDR_EXP 138
32391: PUSH
32392: LD_INT 1
32394: ST_TO_ADDR
// if p3 = 118 then
32395: LD_VAR 0 3
32399: PUSH
32400: LD_INT 118
32402: EQUAL
32403: IFFALSE 32413
// s60 := true ;
32405: LD_ADDR_EXP 139
32409: PUSH
32410: LD_INT 1
32412: ST_TO_ADDR
// end ; if p2 = hack_mode then
32413: LD_VAR 0 2
32417: PUSH
32418: LD_INT 101
32420: EQUAL
32421: IFFALSE 32549
// begin case p3 of 1 :
32423: LD_VAR 0 3
32427: PUSH
32428: LD_INT 1
32430: DOUBLE
32431: EQUAL
32432: IFTRUE 32436
32434: GO 32443
32436: POP
// hHackUnlimitedResources ; 2 :
32437: CALL 44696 0 0
32441: GO 32549
32443: LD_INT 2
32445: DOUBLE
32446: EQUAL
32447: IFTRUE 32451
32449: GO 32458
32451: POP
// hHackSetLevel10 ; 3 :
32452: CALL 44829 0 0
32456: GO 32549
32458: LD_INT 3
32460: DOUBLE
32461: EQUAL
32462: IFTRUE 32466
32464: GO 32473
32466: POP
// hHackSetLevel10YourUnits ; 4 :
32467: CALL 44914 0 0
32471: GO 32549
32473: LD_INT 4
32475: DOUBLE
32476: EQUAL
32477: IFTRUE 32481
32479: GO 32488
32481: POP
// hHackInvincible ; 5 :
32482: CALL 45362 0 0
32486: GO 32549
32488: LD_INT 5
32490: DOUBLE
32491: EQUAL
32492: IFTRUE 32496
32494: GO 32503
32496: POP
// hHackInvisible ; 6 :
32497: CALL 45473 0 0
32501: GO 32549
32503: LD_INT 6
32505: DOUBLE
32506: EQUAL
32507: IFTRUE 32511
32509: GO 32518
32511: POP
// hHackChangeYourSide ; 7 :
32512: CALL 45530 0 0
32516: GO 32549
32518: LD_INT 7
32520: DOUBLE
32521: EQUAL
32522: IFTRUE 32526
32524: GO 32533
32526: POP
// hHackChangeUnitSide ; 8 :
32527: CALL 45572 0 0
32531: GO 32549
32533: LD_INT 8
32535: DOUBLE
32536: EQUAL
32537: IFTRUE 32541
32539: GO 32548
32541: POP
// hHackFog ; end ;
32542: CALL 45673 0 0
32546: GO 32549
32548: POP
// end ; if p2 = game_save_mode then
32549: LD_VAR 0 2
32553: PUSH
32554: LD_INT 102
32556: EQUAL
32557: IFFALSE 32612
// begin if p3 = 1 then
32559: LD_VAR 0 3
32563: PUSH
32564: LD_INT 1
32566: EQUAL
32567: IFFALSE 32579
// globalGameSaveCounter := p4 ;
32569: LD_ADDR_EXP 82
32573: PUSH
32574: LD_VAR 0 4
32578: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
32579: LD_VAR 0 3
32583: PUSH
32584: LD_INT 2
32586: EQUAL
32587: PUSH
32588: LD_EXP 82
32592: AND
32593: IFFALSE 32612
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
32595: LD_STRING setGameSaveCounter(
32597: PUSH
32598: LD_EXP 82
32602: STR
32603: PUSH
32604: LD_STRING )
32606: STR
32607: PPUSH
32608: CALL_OW 559
// end ; end ;
32612: LD_VAR 0 7
32616: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
32617: LD_INT 0
32619: PPUSH
// streamModeActive := false ;
32620: LD_ADDR_EXP 83
32624: PUSH
32625: LD_INT 0
32627: ST_TO_ADDR
// normalCounter := 36 ;
32628: LD_ADDR_EXP 84
32632: PUSH
32633: LD_INT 36
32635: ST_TO_ADDR
// hardcoreCounter := 18 ;
32636: LD_ADDR_EXP 85
32640: PUSH
32641: LD_INT 18
32643: ST_TO_ADDR
// sRocket := false ;
32644: LD_ADDR_EXP 88
32648: PUSH
32649: LD_INT 0
32651: ST_TO_ADDR
// sSpeed := false ;
32652: LD_ADDR_EXP 87
32656: PUSH
32657: LD_INT 0
32659: ST_TO_ADDR
// sEngine := false ;
32660: LD_ADDR_EXP 89
32664: PUSH
32665: LD_INT 0
32667: ST_TO_ADDR
// sSpec := false ;
32668: LD_ADDR_EXP 86
32672: PUSH
32673: LD_INT 0
32675: ST_TO_ADDR
// sLevel := false ;
32676: LD_ADDR_EXP 90
32680: PUSH
32681: LD_INT 0
32683: ST_TO_ADDR
// sArmoury := false ;
32684: LD_ADDR_EXP 91
32688: PUSH
32689: LD_INT 0
32691: ST_TO_ADDR
// sRadar := false ;
32692: LD_ADDR_EXP 92
32696: PUSH
32697: LD_INT 0
32699: ST_TO_ADDR
// sBunker := false ;
32700: LD_ADDR_EXP 93
32704: PUSH
32705: LD_INT 0
32707: ST_TO_ADDR
// sHack := false ;
32708: LD_ADDR_EXP 94
32712: PUSH
32713: LD_INT 0
32715: ST_TO_ADDR
// sFire := false ;
32716: LD_ADDR_EXP 95
32720: PUSH
32721: LD_INT 0
32723: ST_TO_ADDR
// sRefresh := false ;
32724: LD_ADDR_EXP 96
32728: PUSH
32729: LD_INT 0
32731: ST_TO_ADDR
// sExp := false ;
32732: LD_ADDR_EXP 97
32736: PUSH
32737: LD_INT 0
32739: ST_TO_ADDR
// sDepot := false ;
32740: LD_ADDR_EXP 98
32744: PUSH
32745: LD_INT 0
32747: ST_TO_ADDR
// sFlag := false ;
32748: LD_ADDR_EXP 99
32752: PUSH
32753: LD_INT 0
32755: ST_TO_ADDR
// sKamikadze := false ;
32756: LD_ADDR_EXP 107
32760: PUSH
32761: LD_INT 0
32763: ST_TO_ADDR
// sTroll := false ;
32764: LD_ADDR_EXP 108
32768: PUSH
32769: LD_INT 0
32771: ST_TO_ADDR
// sSlow := false ;
32772: LD_ADDR_EXP 109
32776: PUSH
32777: LD_INT 0
32779: ST_TO_ADDR
// sLack := false ;
32780: LD_ADDR_EXP 110
32784: PUSH
32785: LD_INT 0
32787: ST_TO_ADDR
// sTank := false ;
32788: LD_ADDR_EXP 112
32792: PUSH
32793: LD_INT 0
32795: ST_TO_ADDR
// sRemote := false ;
32796: LD_ADDR_EXP 113
32800: PUSH
32801: LD_INT 0
32803: ST_TO_ADDR
// sPowell := false ;
32804: LD_ADDR_EXP 114
32808: PUSH
32809: LD_INT 0
32811: ST_TO_ADDR
// sTeleport := false ;
32812: LD_ADDR_EXP 117
32816: PUSH
32817: LD_INT 0
32819: ST_TO_ADDR
// sOilTower := false ;
32820: LD_ADDR_EXP 119
32824: PUSH
32825: LD_INT 0
32827: ST_TO_ADDR
// sShovel := false ;
32828: LD_ADDR_EXP 120
32832: PUSH
32833: LD_INT 0
32835: ST_TO_ADDR
// sSheik := false ;
32836: LD_ADDR_EXP 121
32840: PUSH
32841: LD_INT 0
32843: ST_TO_ADDR
// sEarthquake := false ;
32844: LD_ADDR_EXP 123
32848: PUSH
32849: LD_INT 0
32851: ST_TO_ADDR
// sAI := false ;
32852: LD_ADDR_EXP 124
32856: PUSH
32857: LD_INT 0
32859: ST_TO_ADDR
// sCargo := false ;
32860: LD_ADDR_EXP 127
32864: PUSH
32865: LD_INT 0
32867: ST_TO_ADDR
// sDLaser := false ;
32868: LD_ADDR_EXP 128
32872: PUSH
32873: LD_INT 0
32875: ST_TO_ADDR
// sExchange := false ;
32876: LD_ADDR_EXP 129
32880: PUSH
32881: LD_INT 0
32883: ST_TO_ADDR
// sFac := false ;
32884: LD_ADDR_EXP 130
32888: PUSH
32889: LD_INT 0
32891: ST_TO_ADDR
// sPower := false ;
32892: LD_ADDR_EXP 131
32896: PUSH
32897: LD_INT 0
32899: ST_TO_ADDR
// sRandom := false ;
32900: LD_ADDR_EXP 132
32904: PUSH
32905: LD_INT 0
32907: ST_TO_ADDR
// sShield := false ;
32908: LD_ADDR_EXP 133
32912: PUSH
32913: LD_INT 0
32915: ST_TO_ADDR
// sTime := false ;
32916: LD_ADDR_EXP 134
32920: PUSH
32921: LD_INT 0
32923: ST_TO_ADDR
// sTools := false ;
32924: LD_ADDR_EXP 135
32928: PUSH
32929: LD_INT 0
32931: ST_TO_ADDR
// sSold := false ;
32932: LD_ADDR_EXP 100
32936: PUSH
32937: LD_INT 0
32939: ST_TO_ADDR
// sDiff := false ;
32940: LD_ADDR_EXP 101
32944: PUSH
32945: LD_INT 0
32947: ST_TO_ADDR
// sFog := false ;
32948: LD_ADDR_EXP 104
32952: PUSH
32953: LD_INT 0
32955: ST_TO_ADDR
// sReset := false ;
32956: LD_ADDR_EXP 105
32960: PUSH
32961: LD_INT 0
32963: ST_TO_ADDR
// sSun := false ;
32964: LD_ADDR_EXP 106
32968: PUSH
32969: LD_INT 0
32971: ST_TO_ADDR
// sTiger := false ;
32972: LD_ADDR_EXP 102
32976: PUSH
32977: LD_INT 0
32979: ST_TO_ADDR
// sBomb := false ;
32980: LD_ADDR_EXP 103
32984: PUSH
32985: LD_INT 0
32987: ST_TO_ADDR
// sWound := false ;
32988: LD_ADDR_EXP 111
32992: PUSH
32993: LD_INT 0
32995: ST_TO_ADDR
// sBetray := false ;
32996: LD_ADDR_EXP 115
33000: PUSH
33001: LD_INT 0
33003: ST_TO_ADDR
// sContamin := false ;
33004: LD_ADDR_EXP 116
33008: PUSH
33009: LD_INT 0
33011: ST_TO_ADDR
// sOil := false ;
33012: LD_ADDR_EXP 118
33016: PUSH
33017: LD_INT 0
33019: ST_TO_ADDR
// sStu := false ;
33020: LD_ADDR_EXP 122
33024: PUSH
33025: LD_INT 0
33027: ST_TO_ADDR
// sBazooka := false ;
33028: LD_ADDR_EXP 125
33032: PUSH
33033: LD_INT 0
33035: ST_TO_ADDR
// sMortar := false ;
33036: LD_ADDR_EXP 126
33040: PUSH
33041: LD_INT 0
33043: ST_TO_ADDR
// sRanger := false ;
33044: LD_ADDR_EXP 136
33048: PUSH
33049: LD_INT 0
33051: ST_TO_ADDR
// sComputer := false ;
33052: LD_ADDR_EXP 137
33056: PUSH
33057: LD_INT 0
33059: ST_TO_ADDR
// s30 := false ;
33060: LD_ADDR_EXP 138
33064: PUSH
33065: LD_INT 0
33067: ST_TO_ADDR
// s60 := false ;
33068: LD_ADDR_EXP 139
33072: PUSH
33073: LD_INT 0
33075: ST_TO_ADDR
// end ;
33076: LD_VAR 0 1
33080: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
33081: LD_INT 0
33083: PPUSH
33084: PPUSH
33085: PPUSH
33086: PPUSH
33087: PPUSH
33088: PPUSH
33089: PPUSH
// result := [ ] ;
33090: LD_ADDR_VAR 0 2
33094: PUSH
33095: EMPTY
33096: ST_TO_ADDR
// if campaign_id = 1 then
33097: LD_OWVAR 69
33101: PUSH
33102: LD_INT 1
33104: EQUAL
33105: IFFALSE 36271
// begin case mission_number of 1 :
33107: LD_OWVAR 70
33111: PUSH
33112: LD_INT 1
33114: DOUBLE
33115: EQUAL
33116: IFTRUE 33120
33118: GO 33196
33120: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
33121: LD_ADDR_VAR 0 2
33125: PUSH
33126: LD_INT 2
33128: PUSH
33129: LD_INT 4
33131: PUSH
33132: LD_INT 11
33134: PUSH
33135: LD_INT 12
33137: PUSH
33138: LD_INT 15
33140: PUSH
33141: LD_INT 16
33143: PUSH
33144: LD_INT 22
33146: PUSH
33147: LD_INT 23
33149: PUSH
33150: LD_INT 26
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: LIST
33157: LIST
33158: LIST
33159: LIST
33160: LIST
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 101
33166: PUSH
33167: LD_INT 102
33169: PUSH
33170: LD_INT 106
33172: PUSH
33173: LD_INT 116
33175: PUSH
33176: LD_INT 117
33178: PUSH
33179: LD_INT 118
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: LIST
33186: LIST
33187: LIST
33188: LIST
33189: PUSH
33190: EMPTY
33191: LIST
33192: LIST
33193: ST_TO_ADDR
33194: GO 36269
33196: LD_INT 2
33198: DOUBLE
33199: EQUAL
33200: IFTRUE 33204
33202: GO 33288
33204: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
33205: LD_ADDR_VAR 0 2
33209: PUSH
33210: LD_INT 2
33212: PUSH
33213: LD_INT 4
33215: PUSH
33216: LD_INT 11
33218: PUSH
33219: LD_INT 12
33221: PUSH
33222: LD_INT 15
33224: PUSH
33225: LD_INT 16
33227: PUSH
33228: LD_INT 22
33230: PUSH
33231: LD_INT 23
33233: PUSH
33234: LD_INT 26
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: LIST
33241: LIST
33242: LIST
33243: LIST
33244: LIST
33245: LIST
33246: LIST
33247: PUSH
33248: LD_INT 101
33250: PUSH
33251: LD_INT 102
33253: PUSH
33254: LD_INT 105
33256: PUSH
33257: LD_INT 106
33259: PUSH
33260: LD_INT 108
33262: PUSH
33263: LD_INT 116
33265: PUSH
33266: LD_INT 117
33268: PUSH
33269: LD_INT 118
33271: PUSH
33272: EMPTY
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: PUSH
33282: EMPTY
33283: LIST
33284: LIST
33285: ST_TO_ADDR
33286: GO 36269
33288: LD_INT 3
33290: DOUBLE
33291: EQUAL
33292: IFTRUE 33296
33294: GO 33384
33296: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
33297: LD_ADDR_VAR 0 2
33301: PUSH
33302: LD_INT 2
33304: PUSH
33305: LD_INT 4
33307: PUSH
33308: LD_INT 5
33310: PUSH
33311: LD_INT 11
33313: PUSH
33314: LD_INT 12
33316: PUSH
33317: LD_INT 15
33319: PUSH
33320: LD_INT 16
33322: PUSH
33323: LD_INT 22
33325: PUSH
33326: LD_INT 26
33328: PUSH
33329: LD_INT 36
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: PUSH
33344: LD_INT 101
33346: PUSH
33347: LD_INT 102
33349: PUSH
33350: LD_INT 105
33352: PUSH
33353: LD_INT 106
33355: PUSH
33356: LD_INT 108
33358: PUSH
33359: LD_INT 116
33361: PUSH
33362: LD_INT 117
33364: PUSH
33365: LD_INT 118
33367: PUSH
33368: EMPTY
33369: LIST
33370: LIST
33371: LIST
33372: LIST
33373: LIST
33374: LIST
33375: LIST
33376: LIST
33377: PUSH
33378: EMPTY
33379: LIST
33380: LIST
33381: ST_TO_ADDR
33382: GO 36269
33384: LD_INT 4
33386: DOUBLE
33387: EQUAL
33388: IFTRUE 33392
33390: GO 33488
33392: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
33393: LD_ADDR_VAR 0 2
33397: PUSH
33398: LD_INT 2
33400: PUSH
33401: LD_INT 4
33403: PUSH
33404: LD_INT 5
33406: PUSH
33407: LD_INT 8
33409: PUSH
33410: LD_INT 11
33412: PUSH
33413: LD_INT 12
33415: PUSH
33416: LD_INT 15
33418: PUSH
33419: LD_INT 16
33421: PUSH
33422: LD_INT 22
33424: PUSH
33425: LD_INT 23
33427: PUSH
33428: LD_INT 26
33430: PUSH
33431: LD_INT 36
33433: PUSH
33434: EMPTY
33435: LIST
33436: LIST
33437: LIST
33438: LIST
33439: LIST
33440: LIST
33441: LIST
33442: LIST
33443: LIST
33444: LIST
33445: LIST
33446: LIST
33447: PUSH
33448: LD_INT 101
33450: PUSH
33451: LD_INT 102
33453: PUSH
33454: LD_INT 105
33456: PUSH
33457: LD_INT 106
33459: PUSH
33460: LD_INT 108
33462: PUSH
33463: LD_INT 116
33465: PUSH
33466: LD_INT 117
33468: PUSH
33469: LD_INT 118
33471: PUSH
33472: EMPTY
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: PUSH
33482: EMPTY
33483: LIST
33484: LIST
33485: ST_TO_ADDR
33486: GO 36269
33488: LD_INT 5
33490: DOUBLE
33491: EQUAL
33492: IFTRUE 33496
33494: GO 33608
33496: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
33497: LD_ADDR_VAR 0 2
33501: PUSH
33502: LD_INT 2
33504: PUSH
33505: LD_INT 4
33507: PUSH
33508: LD_INT 5
33510: PUSH
33511: LD_INT 6
33513: PUSH
33514: LD_INT 8
33516: PUSH
33517: LD_INT 11
33519: PUSH
33520: LD_INT 12
33522: PUSH
33523: LD_INT 15
33525: PUSH
33526: LD_INT 16
33528: PUSH
33529: LD_INT 22
33531: PUSH
33532: LD_INT 23
33534: PUSH
33535: LD_INT 25
33537: PUSH
33538: LD_INT 26
33540: PUSH
33541: LD_INT 36
33543: PUSH
33544: EMPTY
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: LIST
33553: LIST
33554: LIST
33555: LIST
33556: LIST
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 101
33562: PUSH
33563: LD_INT 102
33565: PUSH
33566: LD_INT 105
33568: PUSH
33569: LD_INT 106
33571: PUSH
33572: LD_INT 108
33574: PUSH
33575: LD_INT 109
33577: PUSH
33578: LD_INT 112
33580: PUSH
33581: LD_INT 116
33583: PUSH
33584: LD_INT 117
33586: PUSH
33587: LD_INT 118
33589: PUSH
33590: EMPTY
33591: LIST
33592: LIST
33593: LIST
33594: LIST
33595: LIST
33596: LIST
33597: LIST
33598: LIST
33599: LIST
33600: LIST
33601: PUSH
33602: EMPTY
33603: LIST
33604: LIST
33605: ST_TO_ADDR
33606: GO 36269
33608: LD_INT 6
33610: DOUBLE
33611: EQUAL
33612: IFTRUE 33616
33614: GO 33748
33616: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
33617: LD_ADDR_VAR 0 2
33621: PUSH
33622: LD_INT 2
33624: PUSH
33625: LD_INT 4
33627: PUSH
33628: LD_INT 5
33630: PUSH
33631: LD_INT 6
33633: PUSH
33634: LD_INT 8
33636: PUSH
33637: LD_INT 11
33639: PUSH
33640: LD_INT 12
33642: PUSH
33643: LD_INT 15
33645: PUSH
33646: LD_INT 16
33648: PUSH
33649: LD_INT 20
33651: PUSH
33652: LD_INT 21
33654: PUSH
33655: LD_INT 22
33657: PUSH
33658: LD_INT 23
33660: PUSH
33661: LD_INT 25
33663: PUSH
33664: LD_INT 26
33666: PUSH
33667: LD_INT 30
33669: PUSH
33670: LD_INT 31
33672: PUSH
33673: LD_INT 32
33675: PUSH
33676: LD_INT 36
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: PUSH
33700: LD_INT 101
33702: PUSH
33703: LD_INT 102
33705: PUSH
33706: LD_INT 105
33708: PUSH
33709: LD_INT 106
33711: PUSH
33712: LD_INT 108
33714: PUSH
33715: LD_INT 109
33717: PUSH
33718: LD_INT 112
33720: PUSH
33721: LD_INT 116
33723: PUSH
33724: LD_INT 117
33726: PUSH
33727: LD_INT 118
33729: PUSH
33730: EMPTY
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: PUSH
33742: EMPTY
33743: LIST
33744: LIST
33745: ST_TO_ADDR
33746: GO 36269
33748: LD_INT 7
33750: DOUBLE
33751: EQUAL
33752: IFTRUE 33756
33754: GO 33868
33756: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
33757: LD_ADDR_VAR 0 2
33761: PUSH
33762: LD_INT 2
33764: PUSH
33765: LD_INT 4
33767: PUSH
33768: LD_INT 5
33770: PUSH
33771: LD_INT 7
33773: PUSH
33774: LD_INT 11
33776: PUSH
33777: LD_INT 12
33779: PUSH
33780: LD_INT 15
33782: PUSH
33783: LD_INT 16
33785: PUSH
33786: LD_INT 20
33788: PUSH
33789: LD_INT 21
33791: PUSH
33792: LD_INT 22
33794: PUSH
33795: LD_INT 23
33797: PUSH
33798: LD_INT 25
33800: PUSH
33801: LD_INT 26
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: LIST
33808: LIST
33809: LIST
33810: LIST
33811: LIST
33812: LIST
33813: LIST
33814: LIST
33815: LIST
33816: LIST
33817: LIST
33818: LIST
33819: PUSH
33820: LD_INT 101
33822: PUSH
33823: LD_INT 102
33825: PUSH
33826: LD_INT 103
33828: PUSH
33829: LD_INT 105
33831: PUSH
33832: LD_INT 106
33834: PUSH
33835: LD_INT 108
33837: PUSH
33838: LD_INT 112
33840: PUSH
33841: LD_INT 116
33843: PUSH
33844: LD_INT 117
33846: PUSH
33847: LD_INT 118
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: LIST
33854: LIST
33855: LIST
33856: LIST
33857: LIST
33858: LIST
33859: LIST
33860: LIST
33861: PUSH
33862: EMPTY
33863: LIST
33864: LIST
33865: ST_TO_ADDR
33866: GO 36269
33868: LD_INT 8
33870: DOUBLE
33871: EQUAL
33872: IFTRUE 33876
33874: GO 34016
33876: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
33877: LD_ADDR_VAR 0 2
33881: PUSH
33882: LD_INT 2
33884: PUSH
33885: LD_INT 4
33887: PUSH
33888: LD_INT 5
33890: PUSH
33891: LD_INT 6
33893: PUSH
33894: LD_INT 7
33896: PUSH
33897: LD_INT 8
33899: PUSH
33900: LD_INT 11
33902: PUSH
33903: LD_INT 12
33905: PUSH
33906: LD_INT 15
33908: PUSH
33909: LD_INT 16
33911: PUSH
33912: LD_INT 20
33914: PUSH
33915: LD_INT 21
33917: PUSH
33918: LD_INT 22
33920: PUSH
33921: LD_INT 23
33923: PUSH
33924: LD_INT 25
33926: PUSH
33927: LD_INT 26
33929: PUSH
33930: LD_INT 30
33932: PUSH
33933: LD_INT 31
33935: PUSH
33936: LD_INT 32
33938: PUSH
33939: LD_INT 36
33941: PUSH
33942: EMPTY
33943: LIST
33944: LIST
33945: LIST
33946: LIST
33947: LIST
33948: LIST
33949: LIST
33950: LIST
33951: LIST
33952: LIST
33953: LIST
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: PUSH
33964: LD_INT 101
33966: PUSH
33967: LD_INT 102
33969: PUSH
33970: LD_INT 103
33972: PUSH
33973: LD_INT 105
33975: PUSH
33976: LD_INT 106
33978: PUSH
33979: LD_INT 108
33981: PUSH
33982: LD_INT 109
33984: PUSH
33985: LD_INT 112
33987: PUSH
33988: LD_INT 116
33990: PUSH
33991: LD_INT 117
33993: PUSH
33994: LD_INT 118
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: LIST
34001: LIST
34002: LIST
34003: LIST
34004: LIST
34005: LIST
34006: LIST
34007: LIST
34008: LIST
34009: PUSH
34010: EMPTY
34011: LIST
34012: LIST
34013: ST_TO_ADDR
34014: GO 36269
34016: LD_INT 9
34018: DOUBLE
34019: EQUAL
34020: IFTRUE 34024
34022: GO 34172
34024: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
34025: LD_ADDR_VAR 0 2
34029: PUSH
34030: LD_INT 2
34032: PUSH
34033: LD_INT 4
34035: PUSH
34036: LD_INT 5
34038: PUSH
34039: LD_INT 6
34041: PUSH
34042: LD_INT 7
34044: PUSH
34045: LD_INT 8
34047: PUSH
34048: LD_INT 11
34050: PUSH
34051: LD_INT 12
34053: PUSH
34054: LD_INT 15
34056: PUSH
34057: LD_INT 16
34059: PUSH
34060: LD_INT 20
34062: PUSH
34063: LD_INT 21
34065: PUSH
34066: LD_INT 22
34068: PUSH
34069: LD_INT 23
34071: PUSH
34072: LD_INT 25
34074: PUSH
34075: LD_INT 26
34077: PUSH
34078: LD_INT 28
34080: PUSH
34081: LD_INT 30
34083: PUSH
34084: LD_INT 31
34086: PUSH
34087: LD_INT 32
34089: PUSH
34090: LD_INT 36
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: LIST
34101: LIST
34102: LIST
34103: LIST
34104: LIST
34105: LIST
34106: LIST
34107: LIST
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 101
34118: PUSH
34119: LD_INT 102
34121: PUSH
34122: LD_INT 103
34124: PUSH
34125: LD_INT 105
34127: PUSH
34128: LD_INT 106
34130: PUSH
34131: LD_INT 108
34133: PUSH
34134: LD_INT 109
34136: PUSH
34137: LD_INT 112
34139: PUSH
34140: LD_INT 114
34142: PUSH
34143: LD_INT 116
34145: PUSH
34146: LD_INT 117
34148: PUSH
34149: LD_INT 118
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: LIST
34159: LIST
34160: LIST
34161: LIST
34162: LIST
34163: LIST
34164: LIST
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: ST_TO_ADDR
34170: GO 36269
34172: LD_INT 10
34174: DOUBLE
34175: EQUAL
34176: IFTRUE 34180
34178: GO 34376
34180: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
34181: LD_ADDR_VAR 0 2
34185: PUSH
34186: LD_INT 2
34188: PUSH
34189: LD_INT 4
34191: PUSH
34192: LD_INT 5
34194: PUSH
34195: LD_INT 6
34197: PUSH
34198: LD_INT 7
34200: PUSH
34201: LD_INT 8
34203: PUSH
34204: LD_INT 9
34206: PUSH
34207: LD_INT 10
34209: PUSH
34210: LD_INT 11
34212: PUSH
34213: LD_INT 12
34215: PUSH
34216: LD_INT 13
34218: PUSH
34219: LD_INT 14
34221: PUSH
34222: LD_INT 15
34224: PUSH
34225: LD_INT 16
34227: PUSH
34228: LD_INT 17
34230: PUSH
34231: LD_INT 18
34233: PUSH
34234: LD_INT 19
34236: PUSH
34237: LD_INT 20
34239: PUSH
34240: LD_INT 21
34242: PUSH
34243: LD_INT 22
34245: PUSH
34246: LD_INT 23
34248: PUSH
34249: LD_INT 24
34251: PUSH
34252: LD_INT 25
34254: PUSH
34255: LD_INT 26
34257: PUSH
34258: LD_INT 28
34260: PUSH
34261: LD_INT 30
34263: PUSH
34264: LD_INT 31
34266: PUSH
34267: LD_INT 32
34269: PUSH
34270: LD_INT 36
34272: PUSH
34273: EMPTY
34274: LIST
34275: LIST
34276: LIST
34277: LIST
34278: LIST
34279: LIST
34280: LIST
34281: LIST
34282: LIST
34283: LIST
34284: LIST
34285: LIST
34286: LIST
34287: LIST
34288: LIST
34289: LIST
34290: LIST
34291: LIST
34292: LIST
34293: LIST
34294: LIST
34295: LIST
34296: LIST
34297: LIST
34298: LIST
34299: LIST
34300: LIST
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 101
34306: PUSH
34307: LD_INT 102
34309: PUSH
34310: LD_INT 103
34312: PUSH
34313: LD_INT 104
34315: PUSH
34316: LD_INT 105
34318: PUSH
34319: LD_INT 106
34321: PUSH
34322: LD_INT 107
34324: PUSH
34325: LD_INT 108
34327: PUSH
34328: LD_INT 109
34330: PUSH
34331: LD_INT 110
34333: PUSH
34334: LD_INT 111
34336: PUSH
34337: LD_INT 112
34339: PUSH
34340: LD_INT 114
34342: PUSH
34343: LD_INT 116
34345: PUSH
34346: LD_INT 117
34348: PUSH
34349: LD_INT 118
34351: PUSH
34352: EMPTY
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: PUSH
34370: EMPTY
34371: LIST
34372: LIST
34373: ST_TO_ADDR
34374: GO 36269
34376: LD_INT 11
34378: DOUBLE
34379: EQUAL
34380: IFTRUE 34384
34382: GO 34588
34384: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
34385: LD_ADDR_VAR 0 2
34389: PUSH
34390: LD_INT 2
34392: PUSH
34393: LD_INT 3
34395: PUSH
34396: LD_INT 4
34398: PUSH
34399: LD_INT 5
34401: PUSH
34402: LD_INT 6
34404: PUSH
34405: LD_INT 7
34407: PUSH
34408: LD_INT 8
34410: PUSH
34411: LD_INT 9
34413: PUSH
34414: LD_INT 10
34416: PUSH
34417: LD_INT 11
34419: PUSH
34420: LD_INT 12
34422: PUSH
34423: LD_INT 13
34425: PUSH
34426: LD_INT 14
34428: PUSH
34429: LD_INT 15
34431: PUSH
34432: LD_INT 16
34434: PUSH
34435: LD_INT 17
34437: PUSH
34438: LD_INT 18
34440: PUSH
34441: LD_INT 19
34443: PUSH
34444: LD_INT 20
34446: PUSH
34447: LD_INT 21
34449: PUSH
34450: LD_INT 22
34452: PUSH
34453: LD_INT 23
34455: PUSH
34456: LD_INT 24
34458: PUSH
34459: LD_INT 25
34461: PUSH
34462: LD_INT 26
34464: PUSH
34465: LD_INT 28
34467: PUSH
34468: LD_INT 30
34470: PUSH
34471: LD_INT 31
34473: PUSH
34474: LD_INT 32
34476: PUSH
34477: LD_INT 34
34479: PUSH
34480: LD_INT 36
34482: PUSH
34483: EMPTY
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: LIST
34500: LIST
34501: LIST
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: LIST
34509: LIST
34510: LIST
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: PUSH
34516: LD_INT 101
34518: PUSH
34519: LD_INT 102
34521: PUSH
34522: LD_INT 103
34524: PUSH
34525: LD_INT 104
34527: PUSH
34528: LD_INT 105
34530: PUSH
34531: LD_INT 106
34533: PUSH
34534: LD_INT 107
34536: PUSH
34537: LD_INT 108
34539: PUSH
34540: LD_INT 109
34542: PUSH
34543: LD_INT 110
34545: PUSH
34546: LD_INT 111
34548: PUSH
34549: LD_INT 112
34551: PUSH
34552: LD_INT 114
34554: PUSH
34555: LD_INT 116
34557: PUSH
34558: LD_INT 117
34560: PUSH
34561: LD_INT 118
34563: PUSH
34564: EMPTY
34565: LIST
34566: LIST
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: LIST
34578: LIST
34579: LIST
34580: LIST
34581: PUSH
34582: EMPTY
34583: LIST
34584: LIST
34585: ST_TO_ADDR
34586: GO 36269
34588: LD_INT 12
34590: DOUBLE
34591: EQUAL
34592: IFTRUE 34596
34594: GO 34816
34596: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
34597: LD_ADDR_VAR 0 2
34601: PUSH
34602: LD_INT 1
34604: PUSH
34605: LD_INT 2
34607: PUSH
34608: LD_INT 3
34610: PUSH
34611: LD_INT 4
34613: PUSH
34614: LD_INT 5
34616: PUSH
34617: LD_INT 6
34619: PUSH
34620: LD_INT 7
34622: PUSH
34623: LD_INT 8
34625: PUSH
34626: LD_INT 9
34628: PUSH
34629: LD_INT 10
34631: PUSH
34632: LD_INT 11
34634: PUSH
34635: LD_INT 12
34637: PUSH
34638: LD_INT 13
34640: PUSH
34641: LD_INT 14
34643: PUSH
34644: LD_INT 15
34646: PUSH
34647: LD_INT 16
34649: PUSH
34650: LD_INT 17
34652: PUSH
34653: LD_INT 18
34655: PUSH
34656: LD_INT 19
34658: PUSH
34659: LD_INT 20
34661: PUSH
34662: LD_INT 21
34664: PUSH
34665: LD_INT 22
34667: PUSH
34668: LD_INT 23
34670: PUSH
34671: LD_INT 24
34673: PUSH
34674: LD_INT 25
34676: PUSH
34677: LD_INT 26
34679: PUSH
34680: LD_INT 27
34682: PUSH
34683: LD_INT 28
34685: PUSH
34686: LD_INT 30
34688: PUSH
34689: LD_INT 31
34691: PUSH
34692: LD_INT 32
34694: PUSH
34695: LD_INT 33
34697: PUSH
34698: LD_INT 34
34700: PUSH
34701: LD_INT 36
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: LIST
34708: LIST
34709: LIST
34710: LIST
34711: LIST
34712: LIST
34713: LIST
34714: LIST
34715: LIST
34716: LIST
34717: LIST
34718: LIST
34719: LIST
34720: LIST
34721: LIST
34722: LIST
34723: LIST
34724: LIST
34725: LIST
34726: LIST
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: PUSH
34740: LD_INT 101
34742: PUSH
34743: LD_INT 102
34745: PUSH
34746: LD_INT 103
34748: PUSH
34749: LD_INT 104
34751: PUSH
34752: LD_INT 105
34754: PUSH
34755: LD_INT 106
34757: PUSH
34758: LD_INT 107
34760: PUSH
34761: LD_INT 108
34763: PUSH
34764: LD_INT 109
34766: PUSH
34767: LD_INT 110
34769: PUSH
34770: LD_INT 111
34772: PUSH
34773: LD_INT 112
34775: PUSH
34776: LD_INT 113
34778: PUSH
34779: LD_INT 114
34781: PUSH
34782: LD_INT 116
34784: PUSH
34785: LD_INT 117
34787: PUSH
34788: LD_INT 118
34790: PUSH
34791: EMPTY
34792: LIST
34793: LIST
34794: LIST
34795: LIST
34796: LIST
34797: LIST
34798: LIST
34799: LIST
34800: LIST
34801: LIST
34802: LIST
34803: LIST
34804: LIST
34805: LIST
34806: LIST
34807: LIST
34808: LIST
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: ST_TO_ADDR
34814: GO 36269
34816: LD_INT 13
34818: DOUBLE
34819: EQUAL
34820: IFTRUE 34824
34822: GO 35032
34824: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
34825: LD_ADDR_VAR 0 2
34829: PUSH
34830: LD_INT 1
34832: PUSH
34833: LD_INT 2
34835: PUSH
34836: LD_INT 3
34838: PUSH
34839: LD_INT 4
34841: PUSH
34842: LD_INT 5
34844: PUSH
34845: LD_INT 8
34847: PUSH
34848: LD_INT 9
34850: PUSH
34851: LD_INT 10
34853: PUSH
34854: LD_INT 11
34856: PUSH
34857: LD_INT 12
34859: PUSH
34860: LD_INT 14
34862: PUSH
34863: LD_INT 15
34865: PUSH
34866: LD_INT 16
34868: PUSH
34869: LD_INT 17
34871: PUSH
34872: LD_INT 18
34874: PUSH
34875: LD_INT 19
34877: PUSH
34878: LD_INT 20
34880: PUSH
34881: LD_INT 21
34883: PUSH
34884: LD_INT 22
34886: PUSH
34887: LD_INT 23
34889: PUSH
34890: LD_INT 24
34892: PUSH
34893: LD_INT 25
34895: PUSH
34896: LD_INT 26
34898: PUSH
34899: LD_INT 27
34901: PUSH
34902: LD_INT 28
34904: PUSH
34905: LD_INT 30
34907: PUSH
34908: LD_INT 31
34910: PUSH
34911: LD_INT 32
34913: PUSH
34914: LD_INT 33
34916: PUSH
34917: LD_INT 34
34919: PUSH
34920: LD_INT 36
34922: PUSH
34923: EMPTY
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: LIST
34953: LIST
34954: LIST
34955: PUSH
34956: LD_INT 101
34958: PUSH
34959: LD_INT 102
34961: PUSH
34962: LD_INT 103
34964: PUSH
34965: LD_INT 104
34967: PUSH
34968: LD_INT 105
34970: PUSH
34971: LD_INT 106
34973: PUSH
34974: LD_INT 107
34976: PUSH
34977: LD_INT 108
34979: PUSH
34980: LD_INT 109
34982: PUSH
34983: LD_INT 110
34985: PUSH
34986: LD_INT 111
34988: PUSH
34989: LD_INT 112
34991: PUSH
34992: LD_INT 113
34994: PUSH
34995: LD_INT 114
34997: PUSH
34998: LD_INT 116
35000: PUSH
35001: LD_INT 117
35003: PUSH
35004: LD_INT 118
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: PUSH
35026: EMPTY
35027: LIST
35028: LIST
35029: ST_TO_ADDR
35030: GO 36269
35032: LD_INT 14
35034: DOUBLE
35035: EQUAL
35036: IFTRUE 35040
35038: GO 35264
35040: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
35041: LD_ADDR_VAR 0 2
35045: PUSH
35046: LD_INT 1
35048: PUSH
35049: LD_INT 2
35051: PUSH
35052: LD_INT 3
35054: PUSH
35055: LD_INT 4
35057: PUSH
35058: LD_INT 5
35060: PUSH
35061: LD_INT 6
35063: PUSH
35064: LD_INT 7
35066: PUSH
35067: LD_INT 8
35069: PUSH
35070: LD_INT 9
35072: PUSH
35073: LD_INT 10
35075: PUSH
35076: LD_INT 11
35078: PUSH
35079: LD_INT 12
35081: PUSH
35082: LD_INT 13
35084: PUSH
35085: LD_INT 14
35087: PUSH
35088: LD_INT 15
35090: PUSH
35091: LD_INT 16
35093: PUSH
35094: LD_INT 17
35096: PUSH
35097: LD_INT 18
35099: PUSH
35100: LD_INT 19
35102: PUSH
35103: LD_INT 20
35105: PUSH
35106: LD_INT 21
35108: PUSH
35109: LD_INT 22
35111: PUSH
35112: LD_INT 23
35114: PUSH
35115: LD_INT 24
35117: PUSH
35118: LD_INT 25
35120: PUSH
35121: LD_INT 26
35123: PUSH
35124: LD_INT 27
35126: PUSH
35127: LD_INT 28
35129: PUSH
35130: LD_INT 29
35132: PUSH
35133: LD_INT 30
35135: PUSH
35136: LD_INT 31
35138: PUSH
35139: LD_INT 32
35141: PUSH
35142: LD_INT 33
35144: PUSH
35145: LD_INT 34
35147: PUSH
35148: LD_INT 36
35150: PUSH
35151: EMPTY
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: LIST
35159: LIST
35160: LIST
35161: LIST
35162: LIST
35163: LIST
35164: LIST
35165: LIST
35166: LIST
35167: LIST
35168: LIST
35169: LIST
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: LIST
35177: LIST
35178: LIST
35179: LIST
35180: LIST
35181: LIST
35182: LIST
35183: LIST
35184: LIST
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 101
35190: PUSH
35191: LD_INT 102
35193: PUSH
35194: LD_INT 103
35196: PUSH
35197: LD_INT 104
35199: PUSH
35200: LD_INT 105
35202: PUSH
35203: LD_INT 106
35205: PUSH
35206: LD_INT 107
35208: PUSH
35209: LD_INT 108
35211: PUSH
35212: LD_INT 109
35214: PUSH
35215: LD_INT 110
35217: PUSH
35218: LD_INT 111
35220: PUSH
35221: LD_INT 112
35223: PUSH
35224: LD_INT 113
35226: PUSH
35227: LD_INT 114
35229: PUSH
35230: LD_INT 116
35232: PUSH
35233: LD_INT 117
35235: PUSH
35236: LD_INT 118
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: LIST
35243: LIST
35244: LIST
35245: LIST
35246: LIST
35247: LIST
35248: LIST
35249: LIST
35250: LIST
35251: LIST
35252: LIST
35253: LIST
35254: LIST
35255: LIST
35256: LIST
35257: PUSH
35258: EMPTY
35259: LIST
35260: LIST
35261: ST_TO_ADDR
35262: GO 36269
35264: LD_INT 15
35266: DOUBLE
35267: EQUAL
35268: IFTRUE 35272
35270: GO 35496
35272: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
35273: LD_ADDR_VAR 0 2
35277: PUSH
35278: LD_INT 1
35280: PUSH
35281: LD_INT 2
35283: PUSH
35284: LD_INT 3
35286: PUSH
35287: LD_INT 4
35289: PUSH
35290: LD_INT 5
35292: PUSH
35293: LD_INT 6
35295: PUSH
35296: LD_INT 7
35298: PUSH
35299: LD_INT 8
35301: PUSH
35302: LD_INT 9
35304: PUSH
35305: LD_INT 10
35307: PUSH
35308: LD_INT 11
35310: PUSH
35311: LD_INT 12
35313: PUSH
35314: LD_INT 13
35316: PUSH
35317: LD_INT 14
35319: PUSH
35320: LD_INT 15
35322: PUSH
35323: LD_INT 16
35325: PUSH
35326: LD_INT 17
35328: PUSH
35329: LD_INT 18
35331: PUSH
35332: LD_INT 19
35334: PUSH
35335: LD_INT 20
35337: PUSH
35338: LD_INT 21
35340: PUSH
35341: LD_INT 22
35343: PUSH
35344: LD_INT 23
35346: PUSH
35347: LD_INT 24
35349: PUSH
35350: LD_INT 25
35352: PUSH
35353: LD_INT 26
35355: PUSH
35356: LD_INT 27
35358: PUSH
35359: LD_INT 28
35361: PUSH
35362: LD_INT 29
35364: PUSH
35365: LD_INT 30
35367: PUSH
35368: LD_INT 31
35370: PUSH
35371: LD_INT 32
35373: PUSH
35374: LD_INT 33
35376: PUSH
35377: LD_INT 34
35379: PUSH
35380: LD_INT 36
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: LIST
35400: LIST
35401: LIST
35402: LIST
35403: LIST
35404: LIST
35405: LIST
35406: LIST
35407: LIST
35408: LIST
35409: LIST
35410: LIST
35411: LIST
35412: LIST
35413: LIST
35414: LIST
35415: LIST
35416: LIST
35417: LIST
35418: LIST
35419: PUSH
35420: LD_INT 101
35422: PUSH
35423: LD_INT 102
35425: PUSH
35426: LD_INT 103
35428: PUSH
35429: LD_INT 104
35431: PUSH
35432: LD_INT 105
35434: PUSH
35435: LD_INT 106
35437: PUSH
35438: LD_INT 107
35440: PUSH
35441: LD_INT 108
35443: PUSH
35444: LD_INT 109
35446: PUSH
35447: LD_INT 110
35449: PUSH
35450: LD_INT 111
35452: PUSH
35453: LD_INT 112
35455: PUSH
35456: LD_INT 113
35458: PUSH
35459: LD_INT 114
35461: PUSH
35462: LD_INT 116
35464: PUSH
35465: LD_INT 117
35467: PUSH
35468: LD_INT 118
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: LIST
35475: LIST
35476: LIST
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: LIST
35487: LIST
35488: LIST
35489: PUSH
35490: EMPTY
35491: LIST
35492: LIST
35493: ST_TO_ADDR
35494: GO 36269
35496: LD_INT 16
35498: DOUBLE
35499: EQUAL
35500: IFTRUE 35504
35502: GO 35640
35504: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
35505: LD_ADDR_VAR 0 2
35509: PUSH
35510: LD_INT 2
35512: PUSH
35513: LD_INT 4
35515: PUSH
35516: LD_INT 5
35518: PUSH
35519: LD_INT 7
35521: PUSH
35522: LD_INT 11
35524: PUSH
35525: LD_INT 12
35527: PUSH
35528: LD_INT 15
35530: PUSH
35531: LD_INT 16
35533: PUSH
35534: LD_INT 20
35536: PUSH
35537: LD_INT 21
35539: PUSH
35540: LD_INT 22
35542: PUSH
35543: LD_INT 23
35545: PUSH
35546: LD_INT 25
35548: PUSH
35549: LD_INT 26
35551: PUSH
35552: LD_INT 30
35554: PUSH
35555: LD_INT 31
35557: PUSH
35558: LD_INT 32
35560: PUSH
35561: LD_INT 33
35563: PUSH
35564: LD_INT 34
35566: PUSH
35567: EMPTY
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: PUSH
35588: LD_INT 101
35590: PUSH
35591: LD_INT 102
35593: PUSH
35594: LD_INT 103
35596: PUSH
35597: LD_INT 106
35599: PUSH
35600: LD_INT 108
35602: PUSH
35603: LD_INT 112
35605: PUSH
35606: LD_INT 113
35608: PUSH
35609: LD_INT 114
35611: PUSH
35612: LD_INT 116
35614: PUSH
35615: LD_INT 117
35617: PUSH
35618: LD_INT 118
35620: PUSH
35621: EMPTY
35622: LIST
35623: LIST
35624: LIST
35625: LIST
35626: LIST
35627: LIST
35628: LIST
35629: LIST
35630: LIST
35631: LIST
35632: LIST
35633: PUSH
35634: EMPTY
35635: LIST
35636: LIST
35637: ST_TO_ADDR
35638: GO 36269
35640: LD_INT 17
35642: DOUBLE
35643: EQUAL
35644: IFTRUE 35648
35646: GO 35872
35648: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
35649: LD_ADDR_VAR 0 2
35653: PUSH
35654: LD_INT 1
35656: PUSH
35657: LD_INT 2
35659: PUSH
35660: LD_INT 3
35662: PUSH
35663: LD_INT 4
35665: PUSH
35666: LD_INT 5
35668: PUSH
35669: LD_INT 6
35671: PUSH
35672: LD_INT 7
35674: PUSH
35675: LD_INT 8
35677: PUSH
35678: LD_INT 9
35680: PUSH
35681: LD_INT 10
35683: PUSH
35684: LD_INT 11
35686: PUSH
35687: LD_INT 12
35689: PUSH
35690: LD_INT 13
35692: PUSH
35693: LD_INT 14
35695: PUSH
35696: LD_INT 15
35698: PUSH
35699: LD_INT 16
35701: PUSH
35702: LD_INT 17
35704: PUSH
35705: LD_INT 18
35707: PUSH
35708: LD_INT 19
35710: PUSH
35711: LD_INT 20
35713: PUSH
35714: LD_INT 21
35716: PUSH
35717: LD_INT 22
35719: PUSH
35720: LD_INT 23
35722: PUSH
35723: LD_INT 24
35725: PUSH
35726: LD_INT 25
35728: PUSH
35729: LD_INT 26
35731: PUSH
35732: LD_INT 27
35734: PUSH
35735: LD_INT 28
35737: PUSH
35738: LD_INT 29
35740: PUSH
35741: LD_INT 30
35743: PUSH
35744: LD_INT 31
35746: PUSH
35747: LD_INT 32
35749: PUSH
35750: LD_INT 33
35752: PUSH
35753: LD_INT 34
35755: PUSH
35756: LD_INT 36
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: LIST
35763: LIST
35764: LIST
35765: LIST
35766: LIST
35767: LIST
35768: LIST
35769: LIST
35770: LIST
35771: LIST
35772: LIST
35773: LIST
35774: LIST
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: PUSH
35796: LD_INT 101
35798: PUSH
35799: LD_INT 102
35801: PUSH
35802: LD_INT 103
35804: PUSH
35805: LD_INT 104
35807: PUSH
35808: LD_INT 105
35810: PUSH
35811: LD_INT 106
35813: PUSH
35814: LD_INT 107
35816: PUSH
35817: LD_INT 108
35819: PUSH
35820: LD_INT 109
35822: PUSH
35823: LD_INT 110
35825: PUSH
35826: LD_INT 111
35828: PUSH
35829: LD_INT 112
35831: PUSH
35832: LD_INT 113
35834: PUSH
35835: LD_INT 114
35837: PUSH
35838: LD_INT 116
35840: PUSH
35841: LD_INT 117
35843: PUSH
35844: LD_INT 118
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: LIST
35851: LIST
35852: LIST
35853: LIST
35854: LIST
35855: LIST
35856: LIST
35857: LIST
35858: LIST
35859: LIST
35860: LIST
35861: LIST
35862: LIST
35863: LIST
35864: LIST
35865: PUSH
35866: EMPTY
35867: LIST
35868: LIST
35869: ST_TO_ADDR
35870: GO 36269
35872: LD_INT 18
35874: DOUBLE
35875: EQUAL
35876: IFTRUE 35880
35878: GO 36028
35880: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
35881: LD_ADDR_VAR 0 2
35885: PUSH
35886: LD_INT 2
35888: PUSH
35889: LD_INT 4
35891: PUSH
35892: LD_INT 5
35894: PUSH
35895: LD_INT 7
35897: PUSH
35898: LD_INT 11
35900: PUSH
35901: LD_INT 12
35903: PUSH
35904: LD_INT 15
35906: PUSH
35907: LD_INT 16
35909: PUSH
35910: LD_INT 20
35912: PUSH
35913: LD_INT 21
35915: PUSH
35916: LD_INT 22
35918: PUSH
35919: LD_INT 23
35921: PUSH
35922: LD_INT 25
35924: PUSH
35925: LD_INT 26
35927: PUSH
35928: LD_INT 30
35930: PUSH
35931: LD_INT 31
35933: PUSH
35934: LD_INT 32
35936: PUSH
35937: LD_INT 33
35939: PUSH
35940: LD_INT 34
35942: PUSH
35943: LD_INT 35
35945: PUSH
35946: LD_INT 36
35948: PUSH
35949: EMPTY
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: LIST
35964: LIST
35965: LIST
35966: LIST
35967: LIST
35968: LIST
35969: LIST
35970: LIST
35971: PUSH
35972: LD_INT 101
35974: PUSH
35975: LD_INT 102
35977: PUSH
35978: LD_INT 103
35980: PUSH
35981: LD_INT 106
35983: PUSH
35984: LD_INT 108
35986: PUSH
35987: LD_INT 112
35989: PUSH
35990: LD_INT 113
35992: PUSH
35993: LD_INT 114
35995: PUSH
35996: LD_INT 115
35998: PUSH
35999: LD_INT 116
36001: PUSH
36002: LD_INT 117
36004: PUSH
36005: LD_INT 118
36007: PUSH
36008: EMPTY
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: ST_TO_ADDR
36026: GO 36269
36028: LD_INT 19
36030: DOUBLE
36031: EQUAL
36032: IFTRUE 36036
36034: GO 36268
36036: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
36037: LD_ADDR_VAR 0 2
36041: PUSH
36042: LD_INT 1
36044: PUSH
36045: LD_INT 2
36047: PUSH
36048: LD_INT 3
36050: PUSH
36051: LD_INT 4
36053: PUSH
36054: LD_INT 5
36056: PUSH
36057: LD_INT 6
36059: PUSH
36060: LD_INT 7
36062: PUSH
36063: LD_INT 8
36065: PUSH
36066: LD_INT 9
36068: PUSH
36069: LD_INT 10
36071: PUSH
36072: LD_INT 11
36074: PUSH
36075: LD_INT 12
36077: PUSH
36078: LD_INT 13
36080: PUSH
36081: LD_INT 14
36083: PUSH
36084: LD_INT 15
36086: PUSH
36087: LD_INT 16
36089: PUSH
36090: LD_INT 17
36092: PUSH
36093: LD_INT 18
36095: PUSH
36096: LD_INT 19
36098: PUSH
36099: LD_INT 20
36101: PUSH
36102: LD_INT 21
36104: PUSH
36105: LD_INT 22
36107: PUSH
36108: LD_INT 23
36110: PUSH
36111: LD_INT 24
36113: PUSH
36114: LD_INT 25
36116: PUSH
36117: LD_INT 26
36119: PUSH
36120: LD_INT 27
36122: PUSH
36123: LD_INT 28
36125: PUSH
36126: LD_INT 29
36128: PUSH
36129: LD_INT 30
36131: PUSH
36132: LD_INT 31
36134: PUSH
36135: LD_INT 32
36137: PUSH
36138: LD_INT 33
36140: PUSH
36141: LD_INT 34
36143: PUSH
36144: LD_INT 35
36146: PUSH
36147: LD_INT 36
36149: PUSH
36150: EMPTY
36151: LIST
36152: LIST
36153: LIST
36154: LIST
36155: LIST
36156: LIST
36157: LIST
36158: LIST
36159: LIST
36160: LIST
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 101
36190: PUSH
36191: LD_INT 102
36193: PUSH
36194: LD_INT 103
36196: PUSH
36197: LD_INT 104
36199: PUSH
36200: LD_INT 105
36202: PUSH
36203: LD_INT 106
36205: PUSH
36206: LD_INT 107
36208: PUSH
36209: LD_INT 108
36211: PUSH
36212: LD_INT 109
36214: PUSH
36215: LD_INT 110
36217: PUSH
36218: LD_INT 111
36220: PUSH
36221: LD_INT 112
36223: PUSH
36224: LD_INT 113
36226: PUSH
36227: LD_INT 114
36229: PUSH
36230: LD_INT 115
36232: PUSH
36233: LD_INT 116
36235: PUSH
36236: LD_INT 117
36238: PUSH
36239: LD_INT 118
36241: PUSH
36242: EMPTY
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: ST_TO_ADDR
36266: GO 36269
36268: POP
// end else
36269: GO 36500
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
36271: LD_ADDR_VAR 0 2
36275: PUSH
36276: LD_INT 1
36278: PUSH
36279: LD_INT 2
36281: PUSH
36282: LD_INT 3
36284: PUSH
36285: LD_INT 4
36287: PUSH
36288: LD_INT 5
36290: PUSH
36291: LD_INT 6
36293: PUSH
36294: LD_INT 7
36296: PUSH
36297: LD_INT 8
36299: PUSH
36300: LD_INT 9
36302: PUSH
36303: LD_INT 10
36305: PUSH
36306: LD_INT 11
36308: PUSH
36309: LD_INT 12
36311: PUSH
36312: LD_INT 13
36314: PUSH
36315: LD_INT 14
36317: PUSH
36318: LD_INT 15
36320: PUSH
36321: LD_INT 16
36323: PUSH
36324: LD_INT 17
36326: PUSH
36327: LD_INT 18
36329: PUSH
36330: LD_INT 19
36332: PUSH
36333: LD_INT 20
36335: PUSH
36336: LD_INT 21
36338: PUSH
36339: LD_INT 22
36341: PUSH
36342: LD_INT 23
36344: PUSH
36345: LD_INT 24
36347: PUSH
36348: LD_INT 25
36350: PUSH
36351: LD_INT 26
36353: PUSH
36354: LD_INT 27
36356: PUSH
36357: LD_INT 28
36359: PUSH
36360: LD_INT 29
36362: PUSH
36363: LD_INT 30
36365: PUSH
36366: LD_INT 31
36368: PUSH
36369: LD_INT 32
36371: PUSH
36372: LD_INT 33
36374: PUSH
36375: LD_INT 34
36377: PUSH
36378: LD_INT 35
36380: PUSH
36381: LD_INT 36
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: PUSH
36422: LD_INT 101
36424: PUSH
36425: LD_INT 102
36427: PUSH
36428: LD_INT 103
36430: PUSH
36431: LD_INT 104
36433: PUSH
36434: LD_INT 105
36436: PUSH
36437: LD_INT 106
36439: PUSH
36440: LD_INT 107
36442: PUSH
36443: LD_INT 108
36445: PUSH
36446: LD_INT 109
36448: PUSH
36449: LD_INT 110
36451: PUSH
36452: LD_INT 111
36454: PUSH
36455: LD_INT 112
36457: PUSH
36458: LD_INT 113
36460: PUSH
36461: LD_INT 114
36463: PUSH
36464: LD_INT 115
36466: PUSH
36467: LD_INT 116
36469: PUSH
36470: LD_INT 117
36472: PUSH
36473: LD_INT 118
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: LIST
36485: LIST
36486: LIST
36487: LIST
36488: LIST
36489: LIST
36490: LIST
36491: LIST
36492: LIST
36493: LIST
36494: LIST
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: ST_TO_ADDR
// if result then
36500: LD_VAR 0 2
36504: IFFALSE 37290
// begin normal :=  ;
36506: LD_ADDR_VAR 0 5
36510: PUSH
36511: LD_STRING 
36513: ST_TO_ADDR
// hardcore :=  ;
36514: LD_ADDR_VAR 0 6
36518: PUSH
36519: LD_STRING 
36521: ST_TO_ADDR
// active :=  ;
36522: LD_ADDR_VAR 0 7
36526: PUSH
36527: LD_STRING 
36529: ST_TO_ADDR
// for i = 1 to normalCounter do
36530: LD_ADDR_VAR 0 8
36534: PUSH
36535: DOUBLE
36536: LD_INT 1
36538: DEC
36539: ST_TO_ADDR
36540: LD_EXP 84
36544: PUSH
36545: FOR_TO
36546: IFFALSE 36647
// begin tmp := 0 ;
36548: LD_ADDR_VAR 0 3
36552: PUSH
36553: LD_STRING 0
36555: ST_TO_ADDR
// if result [ 1 ] then
36556: LD_VAR 0 2
36560: PUSH
36561: LD_INT 1
36563: ARRAY
36564: IFFALSE 36629
// if result [ 1 ] [ 1 ] = i then
36566: LD_VAR 0 2
36570: PUSH
36571: LD_INT 1
36573: ARRAY
36574: PUSH
36575: LD_INT 1
36577: ARRAY
36578: PUSH
36579: LD_VAR 0 8
36583: EQUAL
36584: IFFALSE 36629
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
36586: LD_ADDR_VAR 0 2
36590: PUSH
36591: LD_VAR 0 2
36595: PPUSH
36596: LD_INT 1
36598: PPUSH
36599: LD_VAR 0 2
36603: PUSH
36604: LD_INT 1
36606: ARRAY
36607: PPUSH
36608: LD_INT 1
36610: PPUSH
36611: CALL_OW 3
36615: PPUSH
36616: CALL_OW 1
36620: ST_TO_ADDR
// tmp := 1 ;
36621: LD_ADDR_VAR 0 3
36625: PUSH
36626: LD_STRING 1
36628: ST_TO_ADDR
// end ; normal := normal & tmp ;
36629: LD_ADDR_VAR 0 5
36633: PUSH
36634: LD_VAR 0 5
36638: PUSH
36639: LD_VAR 0 3
36643: STR
36644: ST_TO_ADDR
// end ;
36645: GO 36545
36647: POP
36648: POP
// for i = 1 to hardcoreCounter do
36649: LD_ADDR_VAR 0 8
36653: PUSH
36654: DOUBLE
36655: LD_INT 1
36657: DEC
36658: ST_TO_ADDR
36659: LD_EXP 85
36663: PUSH
36664: FOR_TO
36665: IFFALSE 36770
// begin tmp := 0 ;
36667: LD_ADDR_VAR 0 3
36671: PUSH
36672: LD_STRING 0
36674: ST_TO_ADDR
// if result [ 2 ] then
36675: LD_VAR 0 2
36679: PUSH
36680: LD_INT 2
36682: ARRAY
36683: IFFALSE 36752
// if result [ 2 ] [ 1 ] = 100 + i then
36685: LD_VAR 0 2
36689: PUSH
36690: LD_INT 2
36692: ARRAY
36693: PUSH
36694: LD_INT 1
36696: ARRAY
36697: PUSH
36698: LD_INT 100
36700: PUSH
36701: LD_VAR 0 8
36705: PLUS
36706: EQUAL
36707: IFFALSE 36752
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
36709: LD_ADDR_VAR 0 2
36713: PUSH
36714: LD_VAR 0 2
36718: PPUSH
36719: LD_INT 2
36721: PPUSH
36722: LD_VAR 0 2
36726: PUSH
36727: LD_INT 2
36729: ARRAY
36730: PPUSH
36731: LD_INT 1
36733: PPUSH
36734: CALL_OW 3
36738: PPUSH
36739: CALL_OW 1
36743: ST_TO_ADDR
// tmp := 1 ;
36744: LD_ADDR_VAR 0 3
36748: PUSH
36749: LD_STRING 1
36751: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
36752: LD_ADDR_VAR 0 6
36756: PUSH
36757: LD_VAR 0 6
36761: PUSH
36762: LD_VAR 0 3
36766: STR
36767: ST_TO_ADDR
// end ;
36768: GO 36664
36770: POP
36771: POP
// if isGameLoad then
36772: LD_VAR 0 1
36776: IFFALSE 37251
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
36778: LD_ADDR_VAR 0 4
36782: PUSH
36783: LD_EXP 88
36787: PUSH
36788: LD_EXP 87
36792: PUSH
36793: LD_EXP 89
36797: PUSH
36798: LD_EXP 86
36802: PUSH
36803: LD_EXP 90
36807: PUSH
36808: LD_EXP 91
36812: PUSH
36813: LD_EXP 92
36817: PUSH
36818: LD_EXP 93
36822: PUSH
36823: LD_EXP 94
36827: PUSH
36828: LD_EXP 95
36832: PUSH
36833: LD_EXP 96
36837: PUSH
36838: LD_EXP 97
36842: PUSH
36843: LD_EXP 98
36847: PUSH
36848: LD_EXP 99
36852: PUSH
36853: LD_EXP 107
36857: PUSH
36858: LD_EXP 108
36862: PUSH
36863: LD_EXP 109
36867: PUSH
36868: LD_EXP 110
36872: PUSH
36873: LD_EXP 112
36877: PUSH
36878: LD_EXP 113
36882: PUSH
36883: LD_EXP 114
36887: PUSH
36888: LD_EXP 117
36892: PUSH
36893: LD_EXP 119
36897: PUSH
36898: LD_EXP 120
36902: PUSH
36903: LD_EXP 121
36907: PUSH
36908: LD_EXP 123
36912: PUSH
36913: LD_EXP 124
36917: PUSH
36918: LD_EXP 127
36922: PUSH
36923: LD_EXP 128
36927: PUSH
36928: LD_EXP 129
36932: PUSH
36933: LD_EXP 130
36937: PUSH
36938: LD_EXP 131
36942: PUSH
36943: LD_EXP 132
36947: PUSH
36948: LD_EXP 133
36952: PUSH
36953: LD_EXP 134
36957: PUSH
36958: LD_EXP 135
36962: PUSH
36963: LD_EXP 100
36967: PUSH
36968: LD_EXP 101
36972: PUSH
36973: LD_EXP 104
36977: PUSH
36978: LD_EXP 105
36982: PUSH
36983: LD_EXP 106
36987: PUSH
36988: LD_EXP 102
36992: PUSH
36993: LD_EXP 103
36997: PUSH
36998: LD_EXP 111
37002: PUSH
37003: LD_EXP 115
37007: PUSH
37008: LD_EXP 116
37012: PUSH
37013: LD_EXP 118
37017: PUSH
37018: LD_EXP 122
37022: PUSH
37023: LD_EXP 125
37027: PUSH
37028: LD_EXP 126
37032: PUSH
37033: LD_EXP 136
37037: PUSH
37038: LD_EXP 137
37042: PUSH
37043: LD_EXP 138
37047: PUSH
37048: LD_EXP 139
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: LIST
37064: LIST
37065: LIST
37066: LIST
37067: LIST
37068: LIST
37069: LIST
37070: LIST
37071: LIST
37072: LIST
37073: LIST
37074: LIST
37075: LIST
37076: LIST
37077: LIST
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: ST_TO_ADDR
// tmp :=  ;
37109: LD_ADDR_VAR 0 3
37113: PUSH
37114: LD_STRING 
37116: ST_TO_ADDR
// for i = 1 to normalCounter do
37117: LD_ADDR_VAR 0 8
37121: PUSH
37122: DOUBLE
37123: LD_INT 1
37125: DEC
37126: ST_TO_ADDR
37127: LD_EXP 84
37131: PUSH
37132: FOR_TO
37133: IFFALSE 37169
// begin if flags [ i ] then
37135: LD_VAR 0 4
37139: PUSH
37140: LD_VAR 0 8
37144: ARRAY
37145: IFFALSE 37167
// tmp := tmp & i & ; ;
37147: LD_ADDR_VAR 0 3
37151: PUSH
37152: LD_VAR 0 3
37156: PUSH
37157: LD_VAR 0 8
37161: STR
37162: PUSH
37163: LD_STRING ;
37165: STR
37166: ST_TO_ADDR
// end ;
37167: GO 37132
37169: POP
37170: POP
// for i = 1 to hardcoreCounter do
37171: LD_ADDR_VAR 0 8
37175: PUSH
37176: DOUBLE
37177: LD_INT 1
37179: DEC
37180: ST_TO_ADDR
37181: LD_EXP 85
37185: PUSH
37186: FOR_TO
37187: IFFALSE 37233
// begin if flags [ normalCounter + i ] then
37189: LD_VAR 0 4
37193: PUSH
37194: LD_EXP 84
37198: PUSH
37199: LD_VAR 0 8
37203: PLUS
37204: ARRAY
37205: IFFALSE 37231
// tmp := tmp & ( 100 + i ) & ; ;
37207: LD_ADDR_VAR 0 3
37211: PUSH
37212: LD_VAR 0 3
37216: PUSH
37217: LD_INT 100
37219: PUSH
37220: LD_VAR 0 8
37224: PLUS
37225: STR
37226: PUSH
37227: LD_STRING ;
37229: STR
37230: ST_TO_ADDR
// end ;
37231: GO 37186
37233: POP
37234: POP
// if tmp then
37235: LD_VAR 0 3
37239: IFFALSE 37251
// active := tmp ;
37241: LD_ADDR_VAR 0 7
37245: PUSH
37246: LD_VAR 0 3
37250: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
37251: LD_STRING getStreamItemsFromMission("
37253: PUSH
37254: LD_VAR 0 5
37258: STR
37259: PUSH
37260: LD_STRING ","
37262: STR
37263: PUSH
37264: LD_VAR 0 6
37268: STR
37269: PUSH
37270: LD_STRING ","
37272: STR
37273: PUSH
37274: LD_VAR 0 7
37278: STR
37279: PUSH
37280: LD_STRING ")
37282: STR
37283: PPUSH
37284: CALL_OW 559
// end else
37288: GO 37297
// ToLua ( getStreamItemsFromMission("","","") ) ;
37290: LD_STRING getStreamItemsFromMission("","","")
37292: PPUSH
37293: CALL_OW 559
// end ;
37297: LD_VAR 0 2
37301: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
37302: LD_EXP 83
37306: PUSH
37307: LD_EXP 88
37311: AND
37312: IFFALSE 37436
37314: GO 37316
37316: DISABLE
37317: LD_INT 0
37319: PPUSH
37320: PPUSH
// begin enable ;
37321: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
37322: LD_ADDR_VAR 0 2
37326: PUSH
37327: LD_INT 22
37329: PUSH
37330: LD_OWVAR 2
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 2
37341: PUSH
37342: LD_INT 34
37344: PUSH
37345: LD_INT 7
37347: PUSH
37348: EMPTY
37349: LIST
37350: LIST
37351: PUSH
37352: LD_INT 34
37354: PUSH
37355: LD_INT 45
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 34
37364: PUSH
37365: LD_INT 28
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 34
37374: PUSH
37375: LD_INT 47
37377: PUSH
37378: EMPTY
37379: LIST
37380: LIST
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PPUSH
37393: CALL_OW 69
37397: ST_TO_ADDR
// if not tmp then
37398: LD_VAR 0 2
37402: NOT
37403: IFFALSE 37407
// exit ;
37405: GO 37436
// for i in tmp do
37407: LD_ADDR_VAR 0 1
37411: PUSH
37412: LD_VAR 0 2
37416: PUSH
37417: FOR_IN
37418: IFFALSE 37434
// begin SetLives ( i , 0 ) ;
37420: LD_VAR 0 1
37424: PPUSH
37425: LD_INT 0
37427: PPUSH
37428: CALL_OW 234
// end ;
37432: GO 37417
37434: POP
37435: POP
// end ;
37436: PPOPN 2
37438: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
37439: LD_EXP 83
37443: PUSH
37444: LD_EXP 89
37448: AND
37449: IFFALSE 37533
37451: GO 37453
37453: DISABLE
37454: LD_INT 0
37456: PPUSH
37457: PPUSH
// begin enable ;
37458: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
37459: LD_ADDR_VAR 0 2
37463: PUSH
37464: LD_INT 22
37466: PUSH
37467: LD_OWVAR 2
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: PUSH
37476: LD_INT 32
37478: PUSH
37479: LD_INT 3
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PPUSH
37490: CALL_OW 69
37494: ST_TO_ADDR
// if not tmp then
37495: LD_VAR 0 2
37499: NOT
37500: IFFALSE 37504
// exit ;
37502: GO 37533
// for i in tmp do
37504: LD_ADDR_VAR 0 1
37508: PUSH
37509: LD_VAR 0 2
37513: PUSH
37514: FOR_IN
37515: IFFALSE 37531
// begin SetLives ( i , 0 ) ;
37517: LD_VAR 0 1
37521: PPUSH
37522: LD_INT 0
37524: PPUSH
37525: CALL_OW 234
// end ;
37529: GO 37514
37531: POP
37532: POP
// end ;
37533: PPOPN 2
37535: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
37536: LD_EXP 83
37540: PUSH
37541: LD_EXP 86
37545: AND
37546: IFFALSE 37639
37548: GO 37550
37550: DISABLE
37551: LD_INT 0
37553: PPUSH
// begin enable ;
37554: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
37555: LD_ADDR_VAR 0 1
37559: PUSH
37560: LD_INT 22
37562: PUSH
37563: LD_OWVAR 2
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 2
37574: PUSH
37575: LD_INT 25
37577: PUSH
37578: LD_INT 5
37580: PUSH
37581: EMPTY
37582: LIST
37583: LIST
37584: PUSH
37585: LD_INT 25
37587: PUSH
37588: LD_INT 9
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 25
37597: PUSH
37598: LD_INT 8
37600: PUSH
37601: EMPTY
37602: LIST
37603: LIST
37604: PUSH
37605: EMPTY
37606: LIST
37607: LIST
37608: LIST
37609: LIST
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PPUSH
37615: CALL_OW 69
37619: PUSH
37620: FOR_IN
37621: IFFALSE 37637
// begin SetClass ( i , 1 ) ;
37623: LD_VAR 0 1
37627: PPUSH
37628: LD_INT 1
37630: PPUSH
37631: CALL_OW 336
// end ;
37635: GO 37620
37637: POP
37638: POP
// end ;
37639: PPOPN 1
37641: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
37642: LD_EXP 83
37646: PUSH
37647: LD_EXP 87
37651: AND
37652: PUSH
37653: LD_OWVAR 65
37657: PUSH
37658: LD_INT 7
37660: LESS
37661: AND
37662: IFFALSE 37676
37664: GO 37666
37666: DISABLE
// begin enable ;
37667: ENABLE
// game_speed := 7 ;
37668: LD_ADDR_OWVAR 65
37672: PUSH
37673: LD_INT 7
37675: ST_TO_ADDR
// end ;
37676: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
37677: LD_EXP 83
37681: PUSH
37682: LD_EXP 90
37686: AND
37687: IFFALSE 37889
37689: GO 37691
37691: DISABLE
37692: LD_INT 0
37694: PPUSH
37695: PPUSH
37696: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
37697: LD_ADDR_VAR 0 3
37701: PUSH
37702: LD_INT 81
37704: PUSH
37705: LD_OWVAR 2
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 21
37716: PUSH
37717: LD_INT 1
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PPUSH
37728: CALL_OW 69
37732: ST_TO_ADDR
// if not tmp then
37733: LD_VAR 0 3
37737: NOT
37738: IFFALSE 37742
// exit ;
37740: GO 37889
// if tmp > 5 then
37742: LD_VAR 0 3
37746: PUSH
37747: LD_INT 5
37749: GREATER
37750: IFFALSE 37762
// k := 5 else
37752: LD_ADDR_VAR 0 2
37756: PUSH
37757: LD_INT 5
37759: ST_TO_ADDR
37760: GO 37772
// k := tmp ;
37762: LD_ADDR_VAR 0 2
37766: PUSH
37767: LD_VAR 0 3
37771: ST_TO_ADDR
// for i := 1 to k do
37772: LD_ADDR_VAR 0 1
37776: PUSH
37777: DOUBLE
37778: LD_INT 1
37780: DEC
37781: ST_TO_ADDR
37782: LD_VAR 0 2
37786: PUSH
37787: FOR_TO
37788: IFFALSE 37887
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
37790: LD_VAR 0 3
37794: PUSH
37795: LD_VAR 0 1
37799: ARRAY
37800: PPUSH
37801: LD_VAR 0 1
37805: PUSH
37806: LD_INT 4
37808: MOD
37809: PUSH
37810: LD_INT 1
37812: PLUS
37813: PPUSH
37814: CALL_OW 259
37818: PUSH
37819: LD_INT 10
37821: LESS
37822: IFFALSE 37885
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
37824: LD_VAR 0 3
37828: PUSH
37829: LD_VAR 0 1
37833: ARRAY
37834: PPUSH
37835: LD_VAR 0 1
37839: PUSH
37840: LD_INT 4
37842: MOD
37843: PUSH
37844: LD_INT 1
37846: PLUS
37847: PPUSH
37848: LD_VAR 0 3
37852: PUSH
37853: LD_VAR 0 1
37857: ARRAY
37858: PPUSH
37859: LD_VAR 0 1
37863: PUSH
37864: LD_INT 4
37866: MOD
37867: PUSH
37868: LD_INT 1
37870: PLUS
37871: PPUSH
37872: CALL_OW 259
37876: PUSH
37877: LD_INT 1
37879: PLUS
37880: PPUSH
37881: CALL_OW 237
37885: GO 37787
37887: POP
37888: POP
// end ;
37889: PPOPN 3
37891: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
37892: LD_EXP 83
37896: PUSH
37897: LD_EXP 91
37901: AND
37902: IFFALSE 37922
37904: GO 37906
37906: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
37907: LD_INT 4
37909: PPUSH
37910: LD_OWVAR 2
37914: PPUSH
37915: LD_INT 0
37917: PPUSH
37918: CALL_OW 324
37922: END
// every 0 0$1 trigger StreamModeActive and sShovel do
37923: LD_EXP 83
37927: PUSH
37928: LD_EXP 120
37932: AND
37933: IFFALSE 37953
37935: GO 37937
37937: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
37938: LD_INT 19
37940: PPUSH
37941: LD_OWVAR 2
37945: PPUSH
37946: LD_INT 0
37948: PPUSH
37949: CALL_OW 324
37953: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
37954: LD_EXP 83
37958: PUSH
37959: LD_EXP 92
37963: AND
37964: IFFALSE 38066
37966: GO 37968
37968: DISABLE
37969: LD_INT 0
37971: PPUSH
37972: PPUSH
// begin enable ;
37973: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
37974: LD_ADDR_VAR 0 2
37978: PUSH
37979: LD_INT 22
37981: PUSH
37982: LD_OWVAR 2
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 2
37993: PUSH
37994: LD_INT 34
37996: PUSH
37997: LD_INT 11
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 34
38006: PUSH
38007: LD_INT 30
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: LIST
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PPUSH
38023: CALL_OW 69
38027: ST_TO_ADDR
// if not tmp then
38028: LD_VAR 0 2
38032: NOT
38033: IFFALSE 38037
// exit ;
38035: GO 38066
// for i in tmp do
38037: LD_ADDR_VAR 0 1
38041: PUSH
38042: LD_VAR 0 2
38046: PUSH
38047: FOR_IN
38048: IFFALSE 38064
// begin SetLives ( i , 0 ) ;
38050: LD_VAR 0 1
38054: PPUSH
38055: LD_INT 0
38057: PPUSH
38058: CALL_OW 234
// end ;
38062: GO 38047
38064: POP
38065: POP
// end ;
38066: PPOPN 2
38068: END
// every 0 0$1 trigger StreamModeActive and sBunker do
38069: LD_EXP 83
38073: PUSH
38074: LD_EXP 93
38078: AND
38079: IFFALSE 38099
38081: GO 38083
38083: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
38084: LD_INT 32
38086: PPUSH
38087: LD_OWVAR 2
38091: PPUSH
38092: LD_INT 0
38094: PPUSH
38095: CALL_OW 324
38099: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
38100: LD_EXP 83
38104: PUSH
38105: LD_EXP 94
38109: AND
38110: IFFALSE 38291
38112: GO 38114
38114: DISABLE
38115: LD_INT 0
38117: PPUSH
38118: PPUSH
38119: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
38120: LD_ADDR_VAR 0 2
38124: PUSH
38125: LD_INT 22
38127: PUSH
38128: LD_OWVAR 2
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 33
38139: PUSH
38140: LD_INT 3
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PPUSH
38151: CALL_OW 69
38155: ST_TO_ADDR
// if not tmp then
38156: LD_VAR 0 2
38160: NOT
38161: IFFALSE 38165
// exit ;
38163: GO 38291
// side := 0 ;
38165: LD_ADDR_VAR 0 3
38169: PUSH
38170: LD_INT 0
38172: ST_TO_ADDR
// for i := 1 to 8 do
38173: LD_ADDR_VAR 0 1
38177: PUSH
38178: DOUBLE
38179: LD_INT 1
38181: DEC
38182: ST_TO_ADDR
38183: LD_INT 8
38185: PUSH
38186: FOR_TO
38187: IFFALSE 38235
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
38189: LD_OWVAR 2
38193: PUSH
38194: LD_VAR 0 1
38198: NONEQUAL
38199: PUSH
38200: LD_OWVAR 2
38204: PPUSH
38205: LD_VAR 0 1
38209: PPUSH
38210: CALL_OW 81
38214: PUSH
38215: LD_INT 2
38217: EQUAL
38218: AND
38219: IFFALSE 38233
// begin side := i ;
38221: LD_ADDR_VAR 0 3
38225: PUSH
38226: LD_VAR 0 1
38230: ST_TO_ADDR
// break ;
38231: GO 38235
// end ;
38233: GO 38186
38235: POP
38236: POP
// if not side then
38237: LD_VAR 0 3
38241: NOT
38242: IFFALSE 38246
// exit ;
38244: GO 38291
// for i := 1 to tmp do
38246: LD_ADDR_VAR 0 1
38250: PUSH
38251: DOUBLE
38252: LD_INT 1
38254: DEC
38255: ST_TO_ADDR
38256: LD_VAR 0 2
38260: PUSH
38261: FOR_TO
38262: IFFALSE 38289
// if Prob ( 60 ) then
38264: LD_INT 60
38266: PPUSH
38267: CALL_OW 13
38271: IFFALSE 38287
// SetSide ( i , side ) ;
38273: LD_VAR 0 1
38277: PPUSH
38278: LD_VAR 0 3
38282: PPUSH
38283: CALL_OW 235
38287: GO 38261
38289: POP
38290: POP
// end ;
38291: PPOPN 3
38293: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
38294: LD_EXP 83
38298: PUSH
38299: LD_EXP 96
38303: AND
38304: IFFALSE 38423
38306: GO 38308
38308: DISABLE
38309: LD_INT 0
38311: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
38312: LD_ADDR_VAR 0 1
38316: PUSH
38317: LD_INT 22
38319: PUSH
38320: LD_OWVAR 2
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: PUSH
38329: LD_INT 21
38331: PUSH
38332: LD_INT 1
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 3
38341: PUSH
38342: LD_INT 23
38344: PUSH
38345: LD_INT 0
38347: PUSH
38348: EMPTY
38349: LIST
38350: LIST
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: LIST
38360: PPUSH
38361: CALL_OW 69
38365: PUSH
38366: FOR_IN
38367: IFFALSE 38421
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
38369: LD_VAR 0 1
38373: PPUSH
38374: CALL_OW 257
38378: PUSH
38379: LD_INT 1
38381: PUSH
38382: LD_INT 2
38384: PUSH
38385: LD_INT 3
38387: PUSH
38388: LD_INT 4
38390: PUSH
38391: EMPTY
38392: LIST
38393: LIST
38394: LIST
38395: LIST
38396: IN
38397: IFFALSE 38419
// SetClass ( un , rand ( 1 , 4 ) ) ;
38399: LD_VAR 0 1
38403: PPUSH
38404: LD_INT 1
38406: PPUSH
38407: LD_INT 4
38409: PPUSH
38410: CALL_OW 12
38414: PPUSH
38415: CALL_OW 336
38419: GO 38366
38421: POP
38422: POP
// end ;
38423: PPOPN 1
38425: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
38426: LD_EXP 83
38430: PUSH
38431: LD_EXP 95
38435: AND
38436: IFFALSE 38515
38438: GO 38440
38440: DISABLE
38441: LD_INT 0
38443: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
38444: LD_ADDR_VAR 0 1
38448: PUSH
38449: LD_INT 22
38451: PUSH
38452: LD_OWVAR 2
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 21
38463: PUSH
38464: LD_INT 3
38466: PUSH
38467: EMPTY
38468: LIST
38469: LIST
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PPUSH
38475: CALL_OW 69
38479: ST_TO_ADDR
// if not tmp then
38480: LD_VAR 0 1
38484: NOT
38485: IFFALSE 38489
// exit ;
38487: GO 38515
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
38489: LD_VAR 0 1
38493: PUSH
38494: LD_INT 1
38496: PPUSH
38497: LD_VAR 0 1
38501: PPUSH
38502: CALL_OW 12
38506: ARRAY
38507: PPUSH
38508: LD_INT 100
38510: PPUSH
38511: CALL_OW 234
// end ;
38515: PPOPN 1
38517: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
38518: LD_EXP 83
38522: PUSH
38523: LD_EXP 97
38527: AND
38528: IFFALSE 38626
38530: GO 38532
38532: DISABLE
38533: LD_INT 0
38535: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
38536: LD_ADDR_VAR 0 1
38540: PUSH
38541: LD_INT 22
38543: PUSH
38544: LD_OWVAR 2
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 21
38555: PUSH
38556: LD_INT 1
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PPUSH
38567: CALL_OW 69
38571: ST_TO_ADDR
// if not tmp then
38572: LD_VAR 0 1
38576: NOT
38577: IFFALSE 38581
// exit ;
38579: GO 38626
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
38581: LD_VAR 0 1
38585: PUSH
38586: LD_INT 1
38588: PPUSH
38589: LD_VAR 0 1
38593: PPUSH
38594: CALL_OW 12
38598: ARRAY
38599: PPUSH
38600: LD_INT 1
38602: PPUSH
38603: LD_INT 4
38605: PPUSH
38606: CALL_OW 12
38610: PPUSH
38611: LD_INT 3000
38613: PPUSH
38614: LD_INT 9000
38616: PPUSH
38617: CALL_OW 12
38621: PPUSH
38622: CALL_OW 492
// end ;
38626: PPOPN 1
38628: END
// every 0 0$1 trigger StreamModeActive and sDepot do
38629: LD_EXP 83
38633: PUSH
38634: LD_EXP 98
38638: AND
38639: IFFALSE 38659
38641: GO 38643
38643: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
38644: LD_INT 1
38646: PPUSH
38647: LD_OWVAR 2
38651: PPUSH
38652: LD_INT 0
38654: PPUSH
38655: CALL_OW 324
38659: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
38660: LD_EXP 83
38664: PUSH
38665: LD_EXP 99
38669: AND
38670: IFFALSE 38753
38672: GO 38674
38674: DISABLE
38675: LD_INT 0
38677: PPUSH
38678: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
38679: LD_ADDR_VAR 0 2
38683: PUSH
38684: LD_INT 22
38686: PUSH
38687: LD_OWVAR 2
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 21
38698: PUSH
38699: LD_INT 3
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PPUSH
38710: CALL_OW 69
38714: ST_TO_ADDR
// if not tmp then
38715: LD_VAR 0 2
38719: NOT
38720: IFFALSE 38724
// exit ;
38722: GO 38753
// for i in tmp do
38724: LD_ADDR_VAR 0 1
38728: PUSH
38729: LD_VAR 0 2
38733: PUSH
38734: FOR_IN
38735: IFFALSE 38751
// SetBLevel ( i , 10 ) ;
38737: LD_VAR 0 1
38741: PPUSH
38742: LD_INT 10
38744: PPUSH
38745: CALL_OW 241
38749: GO 38734
38751: POP
38752: POP
// end ;
38753: PPOPN 2
38755: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
38756: LD_EXP 83
38760: PUSH
38761: LD_EXP 100
38765: AND
38766: IFFALSE 38877
38768: GO 38770
38770: DISABLE
38771: LD_INT 0
38773: PPUSH
38774: PPUSH
38775: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
38776: LD_ADDR_VAR 0 3
38780: PUSH
38781: LD_INT 22
38783: PUSH
38784: LD_OWVAR 2
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 25
38795: PUSH
38796: LD_INT 1
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PPUSH
38807: CALL_OW 69
38811: ST_TO_ADDR
// if not tmp then
38812: LD_VAR 0 3
38816: NOT
38817: IFFALSE 38821
// exit ;
38819: GO 38877
// un := tmp [ rand ( 1 , tmp ) ] ;
38821: LD_ADDR_VAR 0 2
38825: PUSH
38826: LD_VAR 0 3
38830: PUSH
38831: LD_INT 1
38833: PPUSH
38834: LD_VAR 0 3
38838: PPUSH
38839: CALL_OW 12
38843: ARRAY
38844: ST_TO_ADDR
// if Crawls ( un ) then
38845: LD_VAR 0 2
38849: PPUSH
38850: CALL_OW 318
38854: IFFALSE 38865
// ComWalk ( un ) ;
38856: LD_VAR 0 2
38860: PPUSH
38861: CALL_OW 138
// SetClass ( un , class_sniper ) ;
38865: LD_VAR 0 2
38869: PPUSH
38870: LD_INT 5
38872: PPUSH
38873: CALL_OW 336
// end ;
38877: PPOPN 3
38879: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
38880: LD_EXP 83
38884: PUSH
38885: LD_EXP 101
38889: AND
38890: PUSH
38891: LD_OWVAR 67
38895: PUSH
38896: LD_INT 4
38898: LESS
38899: AND
38900: IFFALSE 38919
38902: GO 38904
38904: DISABLE
// begin Difficulty := Difficulty + 1 ;
38905: LD_ADDR_OWVAR 67
38909: PUSH
38910: LD_OWVAR 67
38914: PUSH
38915: LD_INT 1
38917: PLUS
38918: ST_TO_ADDR
// end ;
38919: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
38920: LD_EXP 83
38924: PUSH
38925: LD_EXP 102
38929: AND
38930: IFFALSE 39033
38932: GO 38934
38934: DISABLE
38935: LD_INT 0
38937: PPUSH
// begin for i := 1 to 5 do
38938: LD_ADDR_VAR 0 1
38942: PUSH
38943: DOUBLE
38944: LD_INT 1
38946: DEC
38947: ST_TO_ADDR
38948: LD_INT 5
38950: PUSH
38951: FOR_TO
38952: IFFALSE 39031
// begin uc_nation := nation_nature ;
38954: LD_ADDR_OWVAR 21
38958: PUSH
38959: LD_INT 0
38961: ST_TO_ADDR
// uc_side := 0 ;
38962: LD_ADDR_OWVAR 20
38966: PUSH
38967: LD_INT 0
38969: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
38970: LD_ADDR_OWVAR 29
38974: PUSH
38975: LD_INT 12
38977: PUSH
38978: LD_INT 12
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: ST_TO_ADDR
// hc_agressivity := 20 ;
38985: LD_ADDR_OWVAR 35
38989: PUSH
38990: LD_INT 20
38992: ST_TO_ADDR
// hc_class := class_tiger ;
38993: LD_ADDR_OWVAR 28
38997: PUSH
38998: LD_INT 14
39000: ST_TO_ADDR
// hc_gallery :=  ;
39001: LD_ADDR_OWVAR 33
39005: PUSH
39006: LD_STRING 
39008: ST_TO_ADDR
// hc_name :=  ;
39009: LD_ADDR_OWVAR 26
39013: PUSH
39014: LD_STRING 
39016: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
39017: CALL_OW 44
39021: PPUSH
39022: LD_INT 0
39024: PPUSH
39025: CALL_OW 51
// end ;
39029: GO 38951
39031: POP
39032: POP
// end ;
39033: PPOPN 1
39035: END
// every 0 0$1 trigger StreamModeActive and sBomb do
39036: LD_EXP 83
39040: PUSH
39041: LD_EXP 103
39045: AND
39046: IFFALSE 39055
39048: GO 39050
39050: DISABLE
// StreamSibBomb ;
39051: CALL 39056 0 0
39055: END
// export function StreamSibBomb ; var i , x , y ; begin
39056: LD_INT 0
39058: PPUSH
39059: PPUSH
39060: PPUSH
39061: PPUSH
// result := false ;
39062: LD_ADDR_VAR 0 1
39066: PUSH
39067: LD_INT 0
39069: ST_TO_ADDR
// for i := 1 to 16 do
39070: LD_ADDR_VAR 0 2
39074: PUSH
39075: DOUBLE
39076: LD_INT 1
39078: DEC
39079: ST_TO_ADDR
39080: LD_INT 16
39082: PUSH
39083: FOR_TO
39084: IFFALSE 39283
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
39086: LD_ADDR_VAR 0 3
39090: PUSH
39091: LD_INT 10
39093: PUSH
39094: LD_INT 20
39096: PUSH
39097: LD_INT 30
39099: PUSH
39100: LD_INT 40
39102: PUSH
39103: LD_INT 50
39105: PUSH
39106: LD_INT 60
39108: PUSH
39109: LD_INT 70
39111: PUSH
39112: LD_INT 80
39114: PUSH
39115: LD_INT 90
39117: PUSH
39118: LD_INT 100
39120: PUSH
39121: LD_INT 110
39123: PUSH
39124: LD_INT 120
39126: PUSH
39127: LD_INT 130
39129: PUSH
39130: LD_INT 140
39132: PUSH
39133: LD_INT 150
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: LIST
39143: LIST
39144: LIST
39145: LIST
39146: LIST
39147: LIST
39148: LIST
39149: LIST
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 1
39155: PPUSH
39156: LD_INT 15
39158: PPUSH
39159: CALL_OW 12
39163: ARRAY
39164: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
39165: LD_ADDR_VAR 0 4
39169: PUSH
39170: LD_INT 10
39172: PUSH
39173: LD_INT 20
39175: PUSH
39176: LD_INT 30
39178: PUSH
39179: LD_INT 40
39181: PUSH
39182: LD_INT 50
39184: PUSH
39185: LD_INT 60
39187: PUSH
39188: LD_INT 70
39190: PUSH
39191: LD_INT 80
39193: PUSH
39194: LD_INT 90
39196: PUSH
39197: LD_INT 100
39199: PUSH
39200: LD_INT 110
39202: PUSH
39203: LD_INT 120
39205: PUSH
39206: LD_INT 130
39208: PUSH
39209: LD_INT 140
39211: PUSH
39212: LD_INT 150
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: LIST
39226: LIST
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: PPUSH
39235: LD_INT 15
39237: PPUSH
39238: CALL_OW 12
39242: ARRAY
39243: ST_TO_ADDR
// if ValidHex ( x , y ) then
39244: LD_VAR 0 3
39248: PPUSH
39249: LD_VAR 0 4
39253: PPUSH
39254: CALL_OW 488
39258: IFFALSE 39281
// begin result := [ x , y ] ;
39260: LD_ADDR_VAR 0 1
39264: PUSH
39265: LD_VAR 0 3
39269: PUSH
39270: LD_VAR 0 4
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: ST_TO_ADDR
// break ;
39279: GO 39283
// end ; end ;
39281: GO 39083
39283: POP
39284: POP
// if result then
39285: LD_VAR 0 1
39289: IFFALSE 39349
// begin ToLua ( playSibBomb() ) ;
39291: LD_STRING playSibBomb()
39293: PPUSH
39294: CALL_OW 559
// wait ( 0 0$14 ) ;
39298: LD_INT 490
39300: PPUSH
39301: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
39305: LD_VAR 0 1
39309: PUSH
39310: LD_INT 1
39312: ARRAY
39313: PPUSH
39314: LD_VAR 0 1
39318: PUSH
39319: LD_INT 2
39321: ARRAY
39322: PPUSH
39323: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
39327: LD_VAR 0 1
39331: PUSH
39332: LD_INT 1
39334: ARRAY
39335: PPUSH
39336: LD_VAR 0 1
39340: PUSH
39341: LD_INT 2
39343: ARRAY
39344: PPUSH
39345: CALL_OW 429
// end ; end ;
39349: LD_VAR 0 1
39353: RET
// every 0 0$1 trigger StreamModeActive and sReset do
39354: LD_EXP 83
39358: PUSH
39359: LD_EXP 105
39363: AND
39364: IFFALSE 39376
39366: GO 39368
39368: DISABLE
// YouLost (  ) ;
39369: LD_STRING 
39371: PPUSH
39372: CALL_OW 104
39376: END
// every 0 0$1 trigger StreamModeActive and sFog do
39377: LD_EXP 83
39381: PUSH
39382: LD_EXP 104
39386: AND
39387: IFFALSE 39401
39389: GO 39391
39391: DISABLE
// FogOff ( your_side ) ;
39392: LD_OWVAR 2
39396: PPUSH
39397: CALL_OW 344
39401: END
// every 0 0$1 trigger StreamModeActive and sSun do
39402: LD_EXP 83
39406: PUSH
39407: LD_EXP 106
39411: AND
39412: IFFALSE 39440
39414: GO 39416
39416: DISABLE
// begin solar_recharge_percent := 0 ;
39417: LD_ADDR_OWVAR 79
39421: PUSH
39422: LD_INT 0
39424: ST_TO_ADDR
// wait ( 5 5$00 ) ;
39425: LD_INT 10500
39427: PPUSH
39428: CALL_OW 67
// solar_recharge_percent := 100 ;
39432: LD_ADDR_OWVAR 79
39436: PUSH
39437: LD_INT 100
39439: ST_TO_ADDR
// end ;
39440: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
39441: LD_EXP 83
39445: PUSH
39446: LD_EXP 107
39450: AND
39451: IFFALSE 39690
39453: GO 39455
39455: DISABLE
39456: LD_INT 0
39458: PPUSH
39459: PPUSH
39460: PPUSH
// begin tmp := [ ] ;
39461: LD_ADDR_VAR 0 3
39465: PUSH
39466: EMPTY
39467: ST_TO_ADDR
// for i := 1 to 6 do
39468: LD_ADDR_VAR 0 1
39472: PUSH
39473: DOUBLE
39474: LD_INT 1
39476: DEC
39477: ST_TO_ADDR
39478: LD_INT 6
39480: PUSH
39481: FOR_TO
39482: IFFALSE 39587
// begin uc_nation := nation_nature ;
39484: LD_ADDR_OWVAR 21
39488: PUSH
39489: LD_INT 0
39491: ST_TO_ADDR
// uc_side := 0 ;
39492: LD_ADDR_OWVAR 20
39496: PUSH
39497: LD_INT 0
39499: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
39500: LD_ADDR_OWVAR 29
39504: PUSH
39505: LD_INT 12
39507: PUSH
39508: LD_INT 12
39510: PUSH
39511: EMPTY
39512: LIST
39513: LIST
39514: ST_TO_ADDR
// hc_agressivity := 20 ;
39515: LD_ADDR_OWVAR 35
39519: PUSH
39520: LD_INT 20
39522: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
39523: LD_ADDR_OWVAR 28
39527: PUSH
39528: LD_INT 17
39530: ST_TO_ADDR
// hc_gallery :=  ;
39531: LD_ADDR_OWVAR 33
39535: PUSH
39536: LD_STRING 
39538: ST_TO_ADDR
// hc_name :=  ;
39539: LD_ADDR_OWVAR 26
39543: PUSH
39544: LD_STRING 
39546: ST_TO_ADDR
// un := CreateHuman ;
39547: LD_ADDR_VAR 0 2
39551: PUSH
39552: CALL_OW 44
39556: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
39557: LD_VAR 0 2
39561: PPUSH
39562: LD_INT 1
39564: PPUSH
39565: CALL_OW 51
// tmp := tmp ^ un ;
39569: LD_ADDR_VAR 0 3
39573: PUSH
39574: LD_VAR 0 3
39578: PUSH
39579: LD_VAR 0 2
39583: ADD
39584: ST_TO_ADDR
// end ;
39585: GO 39481
39587: POP
39588: POP
// repeat wait ( 0 0$1 ) ;
39589: LD_INT 35
39591: PPUSH
39592: CALL_OW 67
// for un in tmp do
39596: LD_ADDR_VAR 0 2
39600: PUSH
39601: LD_VAR 0 3
39605: PUSH
39606: FOR_IN
39607: IFFALSE 39681
// begin if IsDead ( un ) then
39609: LD_VAR 0 2
39613: PPUSH
39614: CALL_OW 301
39618: IFFALSE 39638
// begin tmp := tmp diff un ;
39620: LD_ADDR_VAR 0 3
39624: PUSH
39625: LD_VAR 0 3
39629: PUSH
39630: LD_VAR 0 2
39634: DIFF
39635: ST_TO_ADDR
// continue ;
39636: GO 39606
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
39638: LD_VAR 0 2
39642: PPUSH
39643: LD_INT 3
39645: PUSH
39646: LD_INT 22
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PPUSH
39660: CALL_OW 69
39664: PPUSH
39665: LD_VAR 0 2
39669: PPUSH
39670: CALL_OW 74
39674: PPUSH
39675: CALL_OW 115
// end ;
39679: GO 39606
39681: POP
39682: POP
// until not tmp ;
39683: LD_VAR 0 3
39687: NOT
39688: IFFALSE 39589
// end ;
39690: PPOPN 3
39692: END
// every 0 0$1 trigger StreamModeActive and sTroll do
39693: LD_EXP 83
39697: PUSH
39698: LD_EXP 108
39702: AND
39703: IFFALSE 39757
39705: GO 39707
39707: DISABLE
// begin ToLua ( displayTroll(); ) ;
39708: LD_STRING displayTroll();
39710: PPUSH
39711: CALL_OW 559
// wait ( 3 3$00 ) ;
39715: LD_INT 6300
39717: PPUSH
39718: CALL_OW 67
// ToLua ( hideTroll(); ) ;
39722: LD_STRING hideTroll();
39724: PPUSH
39725: CALL_OW 559
// wait ( 1 1$00 ) ;
39729: LD_INT 2100
39731: PPUSH
39732: CALL_OW 67
// ToLua ( displayTroll(); ) ;
39736: LD_STRING displayTroll();
39738: PPUSH
39739: CALL_OW 559
// wait ( 1 1$00 ) ;
39743: LD_INT 2100
39745: PPUSH
39746: CALL_OW 67
// ToLua ( hideTroll(); ) ;
39750: LD_STRING hideTroll();
39752: PPUSH
39753: CALL_OW 559
// end ;
39757: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
39758: LD_EXP 83
39762: PUSH
39763: LD_EXP 109
39767: AND
39768: IFFALSE 39831
39770: GO 39772
39772: DISABLE
39773: LD_INT 0
39775: PPUSH
// begin p := 0 ;
39776: LD_ADDR_VAR 0 1
39780: PUSH
39781: LD_INT 0
39783: ST_TO_ADDR
// repeat game_speed := 1 ;
39784: LD_ADDR_OWVAR 65
39788: PUSH
39789: LD_INT 1
39791: ST_TO_ADDR
// wait ( 0 0$1 ) ;
39792: LD_INT 35
39794: PPUSH
39795: CALL_OW 67
// p := p + 1 ;
39799: LD_ADDR_VAR 0 1
39803: PUSH
39804: LD_VAR 0 1
39808: PUSH
39809: LD_INT 1
39811: PLUS
39812: ST_TO_ADDR
// until p >= 60 ;
39813: LD_VAR 0 1
39817: PUSH
39818: LD_INT 60
39820: GREATEREQUAL
39821: IFFALSE 39784
// game_speed := 4 ;
39823: LD_ADDR_OWVAR 65
39827: PUSH
39828: LD_INT 4
39830: ST_TO_ADDR
// end ;
39831: PPOPN 1
39833: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
39834: LD_EXP 83
39838: PUSH
39839: LD_EXP 110
39843: AND
39844: IFFALSE 39990
39846: GO 39848
39848: DISABLE
39849: LD_INT 0
39851: PPUSH
39852: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39853: LD_ADDR_VAR 0 1
39857: PUSH
39858: LD_INT 22
39860: PUSH
39861: LD_OWVAR 2
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: LD_INT 2
39872: PUSH
39873: LD_INT 30
39875: PUSH
39876: LD_INT 0
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 30
39885: PUSH
39886: LD_INT 1
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: LIST
39897: PUSH
39898: EMPTY
39899: LIST
39900: LIST
39901: PPUSH
39902: CALL_OW 69
39906: ST_TO_ADDR
// if not depot then
39907: LD_VAR 0 1
39911: NOT
39912: IFFALSE 39916
// exit ;
39914: GO 39990
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
39916: LD_ADDR_VAR 0 2
39920: PUSH
39921: LD_VAR 0 1
39925: PUSH
39926: LD_INT 1
39928: PPUSH
39929: LD_VAR 0 1
39933: PPUSH
39934: CALL_OW 12
39938: ARRAY
39939: PPUSH
39940: CALL_OW 274
39944: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
39945: LD_VAR 0 2
39949: PPUSH
39950: LD_INT 1
39952: PPUSH
39953: LD_INT 0
39955: PPUSH
39956: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
39960: LD_VAR 0 2
39964: PPUSH
39965: LD_INT 2
39967: PPUSH
39968: LD_INT 0
39970: PPUSH
39971: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
39975: LD_VAR 0 2
39979: PPUSH
39980: LD_INT 3
39982: PPUSH
39983: LD_INT 0
39985: PPUSH
39986: CALL_OW 277
// end ;
39990: PPOPN 2
39992: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
39993: LD_EXP 83
39997: PUSH
39998: LD_EXP 111
40002: AND
40003: IFFALSE 40100
40005: GO 40007
40007: DISABLE
40008: LD_INT 0
40010: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
40011: LD_ADDR_VAR 0 1
40015: PUSH
40016: LD_INT 22
40018: PUSH
40019: LD_OWVAR 2
40023: PUSH
40024: EMPTY
40025: LIST
40026: LIST
40027: PUSH
40028: LD_INT 21
40030: PUSH
40031: LD_INT 1
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 3
40040: PUSH
40041: LD_INT 23
40043: PUSH
40044: LD_INT 0
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: LIST
40059: PPUSH
40060: CALL_OW 69
40064: ST_TO_ADDR
// if not tmp then
40065: LD_VAR 0 1
40069: NOT
40070: IFFALSE 40074
// exit ;
40072: GO 40100
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
40074: LD_VAR 0 1
40078: PUSH
40079: LD_INT 1
40081: PPUSH
40082: LD_VAR 0 1
40086: PPUSH
40087: CALL_OW 12
40091: ARRAY
40092: PPUSH
40093: LD_INT 200
40095: PPUSH
40096: CALL_OW 234
// end ;
40100: PPOPN 1
40102: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
40103: LD_EXP 83
40107: PUSH
40108: LD_EXP 112
40112: AND
40113: IFFALSE 40192
40115: GO 40117
40117: DISABLE
40118: LD_INT 0
40120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
40121: LD_ADDR_VAR 0 1
40125: PUSH
40126: LD_INT 22
40128: PUSH
40129: LD_OWVAR 2
40133: PUSH
40134: EMPTY
40135: LIST
40136: LIST
40137: PUSH
40138: LD_INT 21
40140: PUSH
40141: LD_INT 2
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PPUSH
40152: CALL_OW 69
40156: ST_TO_ADDR
// if not tmp then
40157: LD_VAR 0 1
40161: NOT
40162: IFFALSE 40166
// exit ;
40164: GO 40192
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
40166: LD_VAR 0 1
40170: PUSH
40171: LD_INT 1
40173: PPUSH
40174: LD_VAR 0 1
40178: PPUSH
40179: CALL_OW 12
40183: ARRAY
40184: PPUSH
40185: LD_INT 60
40187: PPUSH
40188: CALL_OW 234
// end ;
40192: PPOPN 1
40194: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
40195: LD_EXP 83
40199: PUSH
40200: LD_EXP 113
40204: AND
40205: IFFALSE 40304
40207: GO 40209
40209: DISABLE
40210: LD_INT 0
40212: PPUSH
40213: PPUSH
// begin enable ;
40214: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
40215: LD_ADDR_VAR 0 1
40219: PUSH
40220: LD_INT 22
40222: PUSH
40223: LD_OWVAR 2
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 61
40234: PUSH
40235: EMPTY
40236: LIST
40237: PUSH
40238: LD_INT 33
40240: PUSH
40241: LD_INT 2
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: LIST
40252: PPUSH
40253: CALL_OW 69
40257: ST_TO_ADDR
// if not tmp then
40258: LD_VAR 0 1
40262: NOT
40263: IFFALSE 40267
// exit ;
40265: GO 40304
// for i in tmp do
40267: LD_ADDR_VAR 0 2
40271: PUSH
40272: LD_VAR 0 1
40276: PUSH
40277: FOR_IN
40278: IFFALSE 40302
// if IsControledBy ( i ) then
40280: LD_VAR 0 2
40284: PPUSH
40285: CALL_OW 312
40289: IFFALSE 40300
// ComUnlink ( i ) ;
40291: LD_VAR 0 2
40295: PPUSH
40296: CALL_OW 136
40300: GO 40277
40302: POP
40303: POP
// end ;
40304: PPOPN 2
40306: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
40307: LD_EXP 83
40311: PUSH
40312: LD_EXP 114
40316: AND
40317: IFFALSE 40457
40319: GO 40321
40321: DISABLE
40322: LD_INT 0
40324: PPUSH
40325: PPUSH
// begin ToLua ( displayPowell(); ) ;
40326: LD_STRING displayPowell();
40328: PPUSH
40329: CALL_OW 559
// uc_side := 0 ;
40333: LD_ADDR_OWVAR 20
40337: PUSH
40338: LD_INT 0
40340: ST_TO_ADDR
// uc_nation := 2 ;
40341: LD_ADDR_OWVAR 21
40345: PUSH
40346: LD_INT 2
40348: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
40349: LD_ADDR_OWVAR 37
40353: PUSH
40354: LD_INT 14
40356: ST_TO_ADDR
// vc_engine := engine_siberite ;
40357: LD_ADDR_OWVAR 39
40361: PUSH
40362: LD_INT 3
40364: ST_TO_ADDR
// vc_control := control_apeman ;
40365: LD_ADDR_OWVAR 38
40369: PUSH
40370: LD_INT 5
40372: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
40373: LD_ADDR_OWVAR 40
40377: PUSH
40378: LD_INT 29
40380: ST_TO_ADDR
// un := CreateVehicle ;
40381: LD_ADDR_VAR 0 2
40385: PUSH
40386: CALL_OW 45
40390: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
40391: LD_VAR 0 2
40395: PPUSH
40396: LD_INT 1
40398: PPUSH
40399: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
40403: LD_INT 35
40405: PPUSH
40406: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
40410: LD_VAR 0 2
40414: PPUSH
40415: LD_INT 22
40417: PUSH
40418: LD_OWVAR 2
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PPUSH
40427: CALL_OW 69
40431: PPUSH
40432: LD_VAR 0 2
40436: PPUSH
40437: CALL_OW 74
40441: PPUSH
40442: CALL_OW 115
// until IsDead ( un ) ;
40446: LD_VAR 0 2
40450: PPUSH
40451: CALL_OW 301
40455: IFFALSE 40403
// end ;
40457: PPOPN 2
40459: END
// every 0 0$1 trigger StreamModeActive and sStu do
40460: LD_EXP 83
40464: PUSH
40465: LD_EXP 122
40469: AND
40470: IFFALSE 40486
40472: GO 40474
40474: DISABLE
// begin ToLua ( displayStucuk(); ) ;
40475: LD_STRING displayStucuk();
40477: PPUSH
40478: CALL_OW 559
// ResetFog ;
40482: CALL_OW 335
// end ;
40486: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
40487: LD_EXP 83
40491: PUSH
40492: LD_EXP 115
40496: AND
40497: IFFALSE 40638
40499: GO 40501
40501: DISABLE
40502: LD_INT 0
40504: PPUSH
40505: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
40506: LD_ADDR_VAR 0 2
40510: PUSH
40511: LD_INT 22
40513: PUSH
40514: LD_OWVAR 2
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 21
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PPUSH
40537: CALL_OW 69
40541: ST_TO_ADDR
// if not tmp then
40542: LD_VAR 0 2
40546: NOT
40547: IFFALSE 40551
// exit ;
40549: GO 40638
// un := tmp [ rand ( 1 , tmp ) ] ;
40551: LD_ADDR_VAR 0 1
40555: PUSH
40556: LD_VAR 0 2
40560: PUSH
40561: LD_INT 1
40563: PPUSH
40564: LD_VAR 0 2
40568: PPUSH
40569: CALL_OW 12
40573: ARRAY
40574: ST_TO_ADDR
// SetSide ( un , 0 ) ;
40575: LD_VAR 0 1
40579: PPUSH
40580: LD_INT 0
40582: PPUSH
40583: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
40587: LD_VAR 0 1
40591: PPUSH
40592: LD_OWVAR 3
40596: PUSH
40597: LD_VAR 0 1
40601: DIFF
40602: PPUSH
40603: LD_VAR 0 1
40607: PPUSH
40608: CALL_OW 74
40612: PPUSH
40613: CALL_OW 115
// wait ( 0 0$20 ) ;
40617: LD_INT 700
40619: PPUSH
40620: CALL_OW 67
// SetSide ( un , your_side ) ;
40624: LD_VAR 0 1
40628: PPUSH
40629: LD_OWVAR 2
40633: PPUSH
40634: CALL_OW 235
// end ;
40638: PPOPN 2
40640: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
40641: LD_EXP 83
40645: PUSH
40646: LD_EXP 116
40650: AND
40651: IFFALSE 40757
40653: GO 40655
40655: DISABLE
40656: LD_INT 0
40658: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
40659: LD_ADDR_VAR 0 1
40663: PUSH
40664: LD_INT 22
40666: PUSH
40667: LD_OWVAR 2
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 2
40678: PUSH
40679: LD_INT 30
40681: PUSH
40682: LD_INT 0
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 30
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: LIST
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PPUSH
40708: CALL_OW 69
40712: ST_TO_ADDR
// if not depot then
40713: LD_VAR 0 1
40717: NOT
40718: IFFALSE 40722
// exit ;
40720: GO 40757
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
40722: LD_VAR 0 1
40726: PUSH
40727: LD_INT 1
40729: ARRAY
40730: PPUSH
40731: CALL_OW 250
40735: PPUSH
40736: LD_VAR 0 1
40740: PUSH
40741: LD_INT 1
40743: ARRAY
40744: PPUSH
40745: CALL_OW 251
40749: PPUSH
40750: LD_INT 70
40752: PPUSH
40753: CALL_OW 495
// end ;
40757: PPOPN 1
40759: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
40760: LD_EXP 83
40764: PUSH
40765: LD_EXP 117
40769: AND
40770: IFFALSE 40981
40772: GO 40774
40774: DISABLE
40775: LD_INT 0
40777: PPUSH
40778: PPUSH
40779: PPUSH
40780: PPUSH
40781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
40782: LD_ADDR_VAR 0 5
40786: PUSH
40787: LD_INT 22
40789: PUSH
40790: LD_OWVAR 2
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 21
40801: PUSH
40802: LD_INT 1
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PPUSH
40813: CALL_OW 69
40817: ST_TO_ADDR
// if not tmp then
40818: LD_VAR 0 5
40822: NOT
40823: IFFALSE 40827
// exit ;
40825: GO 40981
// for i in tmp do
40827: LD_ADDR_VAR 0 1
40831: PUSH
40832: LD_VAR 0 5
40836: PUSH
40837: FOR_IN
40838: IFFALSE 40979
// begin d := rand ( 0 , 5 ) ;
40840: LD_ADDR_VAR 0 4
40844: PUSH
40845: LD_INT 0
40847: PPUSH
40848: LD_INT 5
40850: PPUSH
40851: CALL_OW 12
40855: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
40856: LD_ADDR_VAR 0 2
40860: PUSH
40861: LD_VAR 0 1
40865: PPUSH
40866: CALL_OW 250
40870: PPUSH
40871: LD_VAR 0 4
40875: PPUSH
40876: LD_INT 3
40878: PPUSH
40879: LD_INT 12
40881: PPUSH
40882: CALL_OW 12
40886: PPUSH
40887: CALL_OW 272
40891: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
40892: LD_ADDR_VAR 0 3
40896: PUSH
40897: LD_VAR 0 1
40901: PPUSH
40902: CALL_OW 251
40906: PPUSH
40907: LD_VAR 0 4
40911: PPUSH
40912: LD_INT 3
40914: PPUSH
40915: LD_INT 12
40917: PPUSH
40918: CALL_OW 12
40922: PPUSH
40923: CALL_OW 273
40927: ST_TO_ADDR
// if ValidHex ( x , y ) then
40928: LD_VAR 0 2
40932: PPUSH
40933: LD_VAR 0 3
40937: PPUSH
40938: CALL_OW 488
40942: IFFALSE 40977
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
40944: LD_VAR 0 1
40948: PPUSH
40949: LD_VAR 0 2
40953: PPUSH
40954: LD_VAR 0 3
40958: PPUSH
40959: LD_INT 3
40961: PPUSH
40962: LD_INT 6
40964: PPUSH
40965: CALL_OW 12
40969: PPUSH
40970: LD_INT 1
40972: PPUSH
40973: CALL_OW 483
// end ;
40977: GO 40837
40979: POP
40980: POP
// end ;
40981: PPOPN 5
40983: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
40984: LD_EXP 83
40988: PUSH
40989: LD_EXP 118
40993: AND
40994: IFFALSE 41088
40996: GO 40998
40998: DISABLE
40999: LD_INT 0
41001: PPUSH
41002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
41003: LD_ADDR_VAR 0 2
41007: PUSH
41008: LD_INT 22
41010: PUSH
41011: LD_OWVAR 2
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 32
41022: PUSH
41023: LD_INT 1
41025: PUSH
41026: EMPTY
41027: LIST
41028: LIST
41029: PUSH
41030: LD_INT 21
41032: PUSH
41033: LD_INT 2
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: LIST
41044: PPUSH
41045: CALL_OW 69
41049: ST_TO_ADDR
// if not tmp then
41050: LD_VAR 0 2
41054: NOT
41055: IFFALSE 41059
// exit ;
41057: GO 41088
// for i in tmp do
41059: LD_ADDR_VAR 0 1
41063: PUSH
41064: LD_VAR 0 2
41068: PUSH
41069: FOR_IN
41070: IFFALSE 41086
// SetFuel ( i , 0 ) ;
41072: LD_VAR 0 1
41076: PPUSH
41077: LD_INT 0
41079: PPUSH
41080: CALL_OW 240
41084: GO 41069
41086: POP
41087: POP
// end ;
41088: PPOPN 2
41090: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
41091: LD_EXP 83
41095: PUSH
41096: LD_EXP 119
41100: AND
41101: IFFALSE 41167
41103: GO 41105
41105: DISABLE
41106: LD_INT 0
41108: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
41109: LD_ADDR_VAR 0 1
41113: PUSH
41114: LD_INT 22
41116: PUSH
41117: LD_OWVAR 2
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 30
41128: PUSH
41129: LD_INT 29
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PPUSH
41140: CALL_OW 69
41144: ST_TO_ADDR
// if not tmp then
41145: LD_VAR 0 1
41149: NOT
41150: IFFALSE 41154
// exit ;
41152: GO 41167
// DestroyUnit ( tmp [ 1 ] ) ;
41154: LD_VAR 0 1
41158: PUSH
41159: LD_INT 1
41161: ARRAY
41162: PPUSH
41163: CALL_OW 65
// end ;
41167: PPOPN 1
41169: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
41170: LD_EXP 83
41174: PUSH
41175: LD_EXP 121
41179: AND
41180: IFFALSE 41309
41182: GO 41184
41184: DISABLE
41185: LD_INT 0
41187: PPUSH
// begin uc_side := 0 ;
41188: LD_ADDR_OWVAR 20
41192: PUSH
41193: LD_INT 0
41195: ST_TO_ADDR
// uc_nation := nation_arabian ;
41196: LD_ADDR_OWVAR 21
41200: PUSH
41201: LD_INT 2
41203: ST_TO_ADDR
// hc_gallery :=  ;
41204: LD_ADDR_OWVAR 33
41208: PUSH
41209: LD_STRING 
41211: ST_TO_ADDR
// hc_name :=  ;
41212: LD_ADDR_OWVAR 26
41216: PUSH
41217: LD_STRING 
41219: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
41220: LD_INT 1
41222: PPUSH
41223: LD_INT 11
41225: PPUSH
41226: LD_INT 10
41228: PPUSH
41229: CALL_OW 380
// un := CreateHuman ;
41233: LD_ADDR_VAR 0 1
41237: PUSH
41238: CALL_OW 44
41242: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
41243: LD_VAR 0 1
41247: PPUSH
41248: LD_INT 1
41250: PPUSH
41251: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
41255: LD_INT 35
41257: PPUSH
41258: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
41262: LD_VAR 0 1
41266: PPUSH
41267: LD_INT 22
41269: PUSH
41270: LD_OWVAR 2
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PPUSH
41279: CALL_OW 69
41283: PPUSH
41284: LD_VAR 0 1
41288: PPUSH
41289: CALL_OW 74
41293: PPUSH
41294: CALL_OW 115
// until IsDead ( un ) ;
41298: LD_VAR 0 1
41302: PPUSH
41303: CALL_OW 301
41307: IFFALSE 41255
// end ;
41309: PPOPN 1
41311: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
41312: LD_EXP 83
41316: PUSH
41317: LD_EXP 123
41321: AND
41322: IFFALSE 41334
41324: GO 41326
41326: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
41327: LD_STRING earthquake(getX(game), 0, 32)
41329: PPUSH
41330: CALL_OW 559
41334: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
41335: LD_EXP 83
41339: PUSH
41340: LD_EXP 124
41344: AND
41345: IFFALSE 41436
41347: GO 41349
41349: DISABLE
41350: LD_INT 0
41352: PPUSH
// begin enable ;
41353: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
41354: LD_ADDR_VAR 0 1
41358: PUSH
41359: LD_INT 22
41361: PUSH
41362: LD_OWVAR 2
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: PUSH
41371: LD_INT 21
41373: PUSH
41374: LD_INT 2
41376: PUSH
41377: EMPTY
41378: LIST
41379: LIST
41380: PUSH
41381: LD_INT 33
41383: PUSH
41384: LD_INT 3
41386: PUSH
41387: EMPTY
41388: LIST
41389: LIST
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: LIST
41395: PPUSH
41396: CALL_OW 69
41400: ST_TO_ADDR
// if not tmp then
41401: LD_VAR 0 1
41405: NOT
41406: IFFALSE 41410
// exit ;
41408: GO 41436
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
41410: LD_VAR 0 1
41414: PUSH
41415: LD_INT 1
41417: PPUSH
41418: LD_VAR 0 1
41422: PPUSH
41423: CALL_OW 12
41427: ARRAY
41428: PPUSH
41429: LD_INT 1
41431: PPUSH
41432: CALL_OW 234
// end ;
41436: PPOPN 1
41438: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
41439: LD_EXP 83
41443: PUSH
41444: LD_EXP 125
41448: AND
41449: IFFALSE 41590
41451: GO 41453
41453: DISABLE
41454: LD_INT 0
41456: PPUSH
41457: PPUSH
41458: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41459: LD_ADDR_VAR 0 3
41463: PUSH
41464: LD_INT 22
41466: PUSH
41467: LD_OWVAR 2
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 25
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PPUSH
41490: CALL_OW 69
41494: ST_TO_ADDR
// if not tmp then
41495: LD_VAR 0 3
41499: NOT
41500: IFFALSE 41504
// exit ;
41502: GO 41590
// un := tmp [ rand ( 1 , tmp ) ] ;
41504: LD_ADDR_VAR 0 2
41508: PUSH
41509: LD_VAR 0 3
41513: PUSH
41514: LD_INT 1
41516: PPUSH
41517: LD_VAR 0 3
41521: PPUSH
41522: CALL_OW 12
41526: ARRAY
41527: ST_TO_ADDR
// if Crawls ( un ) then
41528: LD_VAR 0 2
41532: PPUSH
41533: CALL_OW 318
41537: IFFALSE 41548
// ComWalk ( un ) ;
41539: LD_VAR 0 2
41543: PPUSH
41544: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
41548: LD_VAR 0 2
41552: PPUSH
41553: LD_INT 9
41555: PPUSH
41556: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
41560: LD_INT 28
41562: PPUSH
41563: LD_OWVAR 2
41567: PPUSH
41568: LD_INT 2
41570: PPUSH
41571: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
41575: LD_INT 29
41577: PPUSH
41578: LD_OWVAR 2
41582: PPUSH
41583: LD_INT 2
41585: PPUSH
41586: CALL_OW 322
// end ;
41590: PPOPN 3
41592: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
41593: LD_EXP 83
41597: PUSH
41598: LD_EXP 126
41602: AND
41603: IFFALSE 41714
41605: GO 41607
41607: DISABLE
41608: LD_INT 0
41610: PPUSH
41611: PPUSH
41612: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41613: LD_ADDR_VAR 0 3
41617: PUSH
41618: LD_INT 22
41620: PUSH
41621: LD_OWVAR 2
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 25
41632: PUSH
41633: LD_INT 1
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PPUSH
41644: CALL_OW 69
41648: ST_TO_ADDR
// if not tmp then
41649: LD_VAR 0 3
41653: NOT
41654: IFFALSE 41658
// exit ;
41656: GO 41714
// un := tmp [ rand ( 1 , tmp ) ] ;
41658: LD_ADDR_VAR 0 2
41662: PUSH
41663: LD_VAR 0 3
41667: PUSH
41668: LD_INT 1
41670: PPUSH
41671: LD_VAR 0 3
41675: PPUSH
41676: CALL_OW 12
41680: ARRAY
41681: ST_TO_ADDR
// if Crawls ( un ) then
41682: LD_VAR 0 2
41686: PPUSH
41687: CALL_OW 318
41691: IFFALSE 41702
// ComWalk ( un ) ;
41693: LD_VAR 0 2
41697: PPUSH
41698: CALL_OW 138
// SetClass ( un , class_mortar ) ;
41702: LD_VAR 0 2
41706: PPUSH
41707: LD_INT 8
41709: PPUSH
41710: CALL_OW 336
// end ;
41714: PPOPN 3
41716: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
41717: LD_EXP 83
41721: PUSH
41722: LD_EXP 127
41726: AND
41727: IFFALSE 41871
41729: GO 41731
41731: DISABLE
41732: LD_INT 0
41734: PPUSH
41735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
41736: LD_ADDR_VAR 0 2
41740: PUSH
41741: LD_INT 22
41743: PUSH
41744: LD_OWVAR 2
41748: PUSH
41749: EMPTY
41750: LIST
41751: LIST
41752: PUSH
41753: LD_INT 21
41755: PUSH
41756: LD_INT 2
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 2
41765: PUSH
41766: LD_INT 34
41768: PUSH
41769: LD_INT 12
41771: PUSH
41772: EMPTY
41773: LIST
41774: LIST
41775: PUSH
41776: LD_INT 34
41778: PUSH
41779: LD_INT 51
41781: PUSH
41782: EMPTY
41783: LIST
41784: LIST
41785: PUSH
41786: LD_INT 34
41788: PUSH
41789: LD_INT 32
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: PUSH
41796: EMPTY
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: LIST
41806: PPUSH
41807: CALL_OW 69
41811: ST_TO_ADDR
// if not tmp then
41812: LD_VAR 0 2
41816: NOT
41817: IFFALSE 41821
// exit ;
41819: GO 41871
// for i in tmp do
41821: LD_ADDR_VAR 0 1
41825: PUSH
41826: LD_VAR 0 2
41830: PUSH
41831: FOR_IN
41832: IFFALSE 41869
// if GetCargo ( i , mat_artifact ) = 0 then
41834: LD_VAR 0 1
41838: PPUSH
41839: LD_INT 4
41841: PPUSH
41842: CALL_OW 289
41846: PUSH
41847: LD_INT 0
41849: EQUAL
41850: IFFALSE 41867
// SetCargo ( i , mat_siberit , 100 ) ;
41852: LD_VAR 0 1
41856: PPUSH
41857: LD_INT 3
41859: PPUSH
41860: LD_INT 100
41862: PPUSH
41863: CALL_OW 290
41867: GO 41831
41869: POP
41870: POP
// end ;
41871: PPOPN 2
41873: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
41874: LD_EXP 83
41878: PUSH
41879: LD_EXP 128
41883: AND
41884: IFFALSE 42067
41886: GO 41888
41888: DISABLE
41889: LD_INT 0
41891: PPUSH
41892: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
41893: LD_ADDR_VAR 0 2
41897: PUSH
41898: LD_INT 22
41900: PUSH
41901: LD_OWVAR 2
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PPUSH
41910: CALL_OW 69
41914: ST_TO_ADDR
// if not tmp then
41915: LD_VAR 0 2
41919: NOT
41920: IFFALSE 41924
// exit ;
41922: GO 42067
// for i := 1 to 2 do
41924: LD_ADDR_VAR 0 1
41928: PUSH
41929: DOUBLE
41930: LD_INT 1
41932: DEC
41933: ST_TO_ADDR
41934: LD_INT 2
41936: PUSH
41937: FOR_TO
41938: IFFALSE 42065
// begin uc_side := your_side ;
41940: LD_ADDR_OWVAR 20
41944: PUSH
41945: LD_OWVAR 2
41949: ST_TO_ADDR
// uc_nation := nation_american ;
41950: LD_ADDR_OWVAR 21
41954: PUSH
41955: LD_INT 1
41957: ST_TO_ADDR
// vc_chassis := us_morphling ;
41958: LD_ADDR_OWVAR 37
41962: PUSH
41963: LD_INT 5
41965: ST_TO_ADDR
// vc_engine := engine_siberite ;
41966: LD_ADDR_OWVAR 39
41970: PUSH
41971: LD_INT 3
41973: ST_TO_ADDR
// vc_control := control_computer ;
41974: LD_ADDR_OWVAR 38
41978: PUSH
41979: LD_INT 3
41981: ST_TO_ADDR
// vc_weapon := us_double_laser ;
41982: LD_ADDR_OWVAR 40
41986: PUSH
41987: LD_INT 10
41989: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
41990: LD_VAR 0 2
41994: PUSH
41995: LD_INT 1
41997: ARRAY
41998: PPUSH
41999: CALL_OW 310
42003: NOT
42004: IFFALSE 42051
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
42006: CALL_OW 45
42010: PPUSH
42011: LD_VAR 0 2
42015: PUSH
42016: LD_INT 1
42018: ARRAY
42019: PPUSH
42020: CALL_OW 250
42024: PPUSH
42025: LD_VAR 0 2
42029: PUSH
42030: LD_INT 1
42032: ARRAY
42033: PPUSH
42034: CALL_OW 251
42038: PPUSH
42039: LD_INT 12
42041: PPUSH
42042: LD_INT 1
42044: PPUSH
42045: CALL_OW 50
42049: GO 42063
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
42051: CALL_OW 45
42055: PPUSH
42056: LD_INT 1
42058: PPUSH
42059: CALL_OW 51
// end ;
42063: GO 41937
42065: POP
42066: POP
// end ;
42067: PPOPN 2
42069: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
42070: LD_EXP 83
42074: PUSH
42075: LD_EXP 129
42079: AND
42080: IFFALSE 42302
42082: GO 42084
42084: DISABLE
42085: LD_INT 0
42087: PPUSH
42088: PPUSH
42089: PPUSH
42090: PPUSH
42091: PPUSH
42092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
42093: LD_ADDR_VAR 0 6
42097: PUSH
42098: LD_INT 22
42100: PUSH
42101: LD_OWVAR 2
42105: PUSH
42106: EMPTY
42107: LIST
42108: LIST
42109: PUSH
42110: LD_INT 21
42112: PUSH
42113: LD_INT 1
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 3
42122: PUSH
42123: LD_INT 23
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: EMPTY
42130: LIST
42131: LIST
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: EMPTY
42138: LIST
42139: LIST
42140: LIST
42141: PPUSH
42142: CALL_OW 69
42146: ST_TO_ADDR
// if not tmp then
42147: LD_VAR 0 6
42151: NOT
42152: IFFALSE 42156
// exit ;
42154: GO 42302
// s1 := rand ( 1 , 4 ) ;
42156: LD_ADDR_VAR 0 2
42160: PUSH
42161: LD_INT 1
42163: PPUSH
42164: LD_INT 4
42166: PPUSH
42167: CALL_OW 12
42171: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
42172: LD_ADDR_VAR 0 4
42176: PUSH
42177: LD_VAR 0 6
42181: PUSH
42182: LD_INT 1
42184: ARRAY
42185: PPUSH
42186: LD_VAR 0 2
42190: PPUSH
42191: CALL_OW 259
42195: ST_TO_ADDR
// if s1 = 1 then
42196: LD_VAR 0 2
42200: PUSH
42201: LD_INT 1
42203: EQUAL
42204: IFFALSE 42224
// s2 := rand ( 2 , 4 ) else
42206: LD_ADDR_VAR 0 3
42210: PUSH
42211: LD_INT 2
42213: PPUSH
42214: LD_INT 4
42216: PPUSH
42217: CALL_OW 12
42221: ST_TO_ADDR
42222: GO 42232
// s2 := 1 ;
42224: LD_ADDR_VAR 0 3
42228: PUSH
42229: LD_INT 1
42231: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
42232: LD_ADDR_VAR 0 5
42236: PUSH
42237: LD_VAR 0 6
42241: PUSH
42242: LD_INT 1
42244: ARRAY
42245: PPUSH
42246: LD_VAR 0 3
42250: PPUSH
42251: CALL_OW 259
42255: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
42256: LD_VAR 0 6
42260: PUSH
42261: LD_INT 1
42263: ARRAY
42264: PPUSH
42265: LD_VAR 0 2
42269: PPUSH
42270: LD_VAR 0 5
42274: PPUSH
42275: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
42279: LD_VAR 0 6
42283: PUSH
42284: LD_INT 1
42286: ARRAY
42287: PPUSH
42288: LD_VAR 0 3
42292: PPUSH
42293: LD_VAR 0 4
42297: PPUSH
42298: CALL_OW 237
// end ;
42302: PPOPN 6
42304: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
42305: LD_EXP 83
42309: PUSH
42310: LD_EXP 130
42314: AND
42315: IFFALSE 42394
42317: GO 42319
42319: DISABLE
42320: LD_INT 0
42322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
42323: LD_ADDR_VAR 0 1
42327: PUSH
42328: LD_INT 22
42330: PUSH
42331: LD_OWVAR 2
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 30
42342: PUSH
42343: LD_INT 3
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: PPUSH
42354: CALL_OW 69
42358: ST_TO_ADDR
// if not tmp then
42359: LD_VAR 0 1
42363: NOT
42364: IFFALSE 42368
// exit ;
42366: GO 42394
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
42368: LD_VAR 0 1
42372: PUSH
42373: LD_INT 1
42375: PPUSH
42376: LD_VAR 0 1
42380: PPUSH
42381: CALL_OW 12
42385: ARRAY
42386: PPUSH
42387: LD_INT 1
42389: PPUSH
42390: CALL_OW 234
// end ;
42394: PPOPN 1
42396: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
42397: LD_EXP 83
42401: PUSH
42402: LD_EXP 131
42406: AND
42407: IFFALSE 42519
42409: GO 42411
42411: DISABLE
42412: LD_INT 0
42414: PPUSH
42415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
42416: LD_ADDR_VAR 0 2
42420: PUSH
42421: LD_INT 22
42423: PUSH
42424: LD_OWVAR 2
42428: PUSH
42429: EMPTY
42430: LIST
42431: LIST
42432: PUSH
42433: LD_INT 2
42435: PUSH
42436: LD_INT 30
42438: PUSH
42439: LD_INT 27
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 30
42448: PUSH
42449: LD_INT 26
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 30
42458: PUSH
42459: LD_INT 28
42461: PUSH
42462: EMPTY
42463: LIST
42464: LIST
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: PUSH
42472: EMPTY
42473: LIST
42474: LIST
42475: PPUSH
42476: CALL_OW 69
42480: ST_TO_ADDR
// if not tmp then
42481: LD_VAR 0 2
42485: NOT
42486: IFFALSE 42490
// exit ;
42488: GO 42519
// for i in tmp do
42490: LD_ADDR_VAR 0 1
42494: PUSH
42495: LD_VAR 0 2
42499: PUSH
42500: FOR_IN
42501: IFFALSE 42517
// SetLives ( i , 1 ) ;
42503: LD_VAR 0 1
42507: PPUSH
42508: LD_INT 1
42510: PPUSH
42511: CALL_OW 234
42515: GO 42500
42517: POP
42518: POP
// end ;
42519: PPOPN 2
42521: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
42522: LD_EXP 83
42526: PUSH
42527: LD_EXP 132
42531: AND
42532: IFFALSE 42819
42534: GO 42536
42536: DISABLE
42537: LD_INT 0
42539: PPUSH
42540: PPUSH
42541: PPUSH
// begin i := rand ( 1 , 7 ) ;
42542: LD_ADDR_VAR 0 1
42546: PUSH
42547: LD_INT 1
42549: PPUSH
42550: LD_INT 7
42552: PPUSH
42553: CALL_OW 12
42557: ST_TO_ADDR
// case i of 1 :
42558: LD_VAR 0 1
42562: PUSH
42563: LD_INT 1
42565: DOUBLE
42566: EQUAL
42567: IFTRUE 42571
42569: GO 42581
42571: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
42572: LD_STRING earthquake(getX(game), 0, 32)
42574: PPUSH
42575: CALL_OW 559
42579: GO 42819
42581: LD_INT 2
42583: DOUBLE
42584: EQUAL
42585: IFTRUE 42589
42587: GO 42603
42589: POP
// begin ToLua ( displayStucuk(); ) ;
42590: LD_STRING displayStucuk();
42592: PPUSH
42593: CALL_OW 559
// ResetFog ;
42597: CALL_OW 335
// end ; 3 :
42601: GO 42819
42603: LD_INT 3
42605: DOUBLE
42606: EQUAL
42607: IFTRUE 42611
42609: GO 42715
42611: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
42612: LD_ADDR_VAR 0 2
42616: PUSH
42617: LD_INT 22
42619: PUSH
42620: LD_OWVAR 2
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 25
42631: PUSH
42632: LD_INT 1
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PPUSH
42643: CALL_OW 69
42647: ST_TO_ADDR
// if not tmp then
42648: LD_VAR 0 2
42652: NOT
42653: IFFALSE 42657
// exit ;
42655: GO 42819
// un := tmp [ rand ( 1 , tmp ) ] ;
42657: LD_ADDR_VAR 0 3
42661: PUSH
42662: LD_VAR 0 2
42666: PUSH
42667: LD_INT 1
42669: PPUSH
42670: LD_VAR 0 2
42674: PPUSH
42675: CALL_OW 12
42679: ARRAY
42680: ST_TO_ADDR
// if Crawls ( un ) then
42681: LD_VAR 0 3
42685: PPUSH
42686: CALL_OW 318
42690: IFFALSE 42701
// ComWalk ( un ) ;
42692: LD_VAR 0 3
42696: PPUSH
42697: CALL_OW 138
// SetClass ( un , class_mortar ) ;
42701: LD_VAR 0 3
42705: PPUSH
42706: LD_INT 8
42708: PPUSH
42709: CALL_OW 336
// end ; 4 :
42713: GO 42819
42715: LD_INT 4
42717: DOUBLE
42718: EQUAL
42719: IFTRUE 42723
42721: GO 42797
42723: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
42724: LD_ADDR_VAR 0 2
42728: PUSH
42729: LD_INT 22
42731: PUSH
42732: LD_OWVAR 2
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 30
42743: PUSH
42744: LD_INT 29
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: EMPTY
42752: LIST
42753: LIST
42754: PPUSH
42755: CALL_OW 69
42759: ST_TO_ADDR
// if not tmp then
42760: LD_VAR 0 2
42764: NOT
42765: IFFALSE 42769
// exit ;
42767: GO 42819
// CenterNowOnUnits ( tmp [ 1 ] ) ;
42769: LD_VAR 0 2
42773: PUSH
42774: LD_INT 1
42776: ARRAY
42777: PPUSH
42778: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
42782: LD_VAR 0 2
42786: PUSH
42787: LD_INT 1
42789: ARRAY
42790: PPUSH
42791: CALL_OW 65
// end ; 5 .. 7 :
42795: GO 42819
42797: LD_INT 5
42799: DOUBLE
42800: GREATEREQUAL
42801: IFFALSE 42809
42803: LD_INT 7
42805: DOUBLE
42806: LESSEQUAL
42807: IFTRUE 42811
42809: GO 42818
42811: POP
// StreamSibBomb ; end ;
42812: CALL 39056 0 0
42816: GO 42819
42818: POP
// end ;
42819: PPOPN 3
42821: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
42822: LD_EXP 83
42826: PUSH
42827: LD_EXP 133
42831: AND
42832: IFFALSE 42988
42834: GO 42836
42836: DISABLE
42837: LD_INT 0
42839: PPUSH
42840: PPUSH
42841: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
42842: LD_ADDR_VAR 0 2
42846: PUSH
42847: LD_INT 81
42849: PUSH
42850: LD_OWVAR 2
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 2
42861: PUSH
42862: LD_INT 21
42864: PUSH
42865: LD_INT 1
42867: PUSH
42868: EMPTY
42869: LIST
42870: LIST
42871: PUSH
42872: LD_INT 21
42874: PUSH
42875: LD_INT 2
42877: PUSH
42878: EMPTY
42879: LIST
42880: LIST
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: LIST
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PPUSH
42891: CALL_OW 69
42895: ST_TO_ADDR
// if not tmp then
42896: LD_VAR 0 2
42900: NOT
42901: IFFALSE 42905
// exit ;
42903: GO 42988
// p := 0 ;
42905: LD_ADDR_VAR 0 3
42909: PUSH
42910: LD_INT 0
42912: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
42913: LD_INT 35
42915: PPUSH
42916: CALL_OW 67
// p := p + 1 ;
42920: LD_ADDR_VAR 0 3
42924: PUSH
42925: LD_VAR 0 3
42929: PUSH
42930: LD_INT 1
42932: PLUS
42933: ST_TO_ADDR
// for i in tmp do
42934: LD_ADDR_VAR 0 1
42938: PUSH
42939: LD_VAR 0 2
42943: PUSH
42944: FOR_IN
42945: IFFALSE 42976
// if GetLives ( i ) < 1000 then
42947: LD_VAR 0 1
42951: PPUSH
42952: CALL_OW 256
42956: PUSH
42957: LD_INT 1000
42959: LESS
42960: IFFALSE 42974
// SetLives ( i , 1000 ) ;
42962: LD_VAR 0 1
42966: PPUSH
42967: LD_INT 1000
42969: PPUSH
42970: CALL_OW 234
42974: GO 42944
42976: POP
42977: POP
// until p > 20 ;
42978: LD_VAR 0 3
42982: PUSH
42983: LD_INT 20
42985: GREATER
42986: IFFALSE 42913
// end ;
42988: PPOPN 3
42990: END
// every 0 0$1 trigger StreamModeActive and sTime do
42991: LD_EXP 83
42995: PUSH
42996: LD_EXP 134
43000: AND
43001: IFFALSE 43036
43003: GO 43005
43005: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
43006: LD_INT 28
43008: PPUSH
43009: LD_OWVAR 2
43013: PPUSH
43014: LD_INT 2
43016: PPUSH
43017: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
43021: LD_INT 30
43023: PPUSH
43024: LD_OWVAR 2
43028: PPUSH
43029: LD_INT 2
43031: PPUSH
43032: CALL_OW 322
// end ;
43036: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
43037: LD_EXP 83
43041: PUSH
43042: LD_EXP 135
43046: AND
43047: IFFALSE 43168
43049: GO 43051
43051: DISABLE
43052: LD_INT 0
43054: PPUSH
43055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
43056: LD_ADDR_VAR 0 2
43060: PUSH
43061: LD_INT 22
43063: PUSH
43064: LD_OWVAR 2
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 21
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 3
43085: PUSH
43086: LD_INT 23
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: EMPTY
43093: LIST
43094: LIST
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: EMPTY
43101: LIST
43102: LIST
43103: LIST
43104: PPUSH
43105: CALL_OW 69
43109: ST_TO_ADDR
// if not tmp then
43110: LD_VAR 0 2
43114: NOT
43115: IFFALSE 43119
// exit ;
43117: GO 43168
// for i in tmp do
43119: LD_ADDR_VAR 0 1
43123: PUSH
43124: LD_VAR 0 2
43128: PUSH
43129: FOR_IN
43130: IFFALSE 43166
// begin if Crawls ( i ) then
43132: LD_VAR 0 1
43136: PPUSH
43137: CALL_OW 318
43141: IFFALSE 43152
// ComWalk ( i ) ;
43143: LD_VAR 0 1
43147: PPUSH
43148: CALL_OW 138
// SetClass ( i , 2 ) ;
43152: LD_VAR 0 1
43156: PPUSH
43157: LD_INT 2
43159: PPUSH
43160: CALL_OW 336
// end ;
43164: GO 43129
43166: POP
43167: POP
// end ;
43168: PPOPN 2
43170: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
43171: LD_EXP 83
43175: PUSH
43176: LD_EXP 136
43180: AND
43181: IFFALSE 43469
43183: GO 43185
43185: DISABLE
43186: LD_INT 0
43188: PPUSH
43189: PPUSH
43190: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
43191: LD_OWVAR 2
43195: PPUSH
43196: LD_INT 9
43198: PPUSH
43199: LD_INT 1
43201: PPUSH
43202: LD_INT 1
43204: PPUSH
43205: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
43209: LD_INT 9
43211: PPUSH
43212: LD_OWVAR 2
43216: PPUSH
43217: CALL_OW 343
// uc_side := 9 ;
43221: LD_ADDR_OWVAR 20
43225: PUSH
43226: LD_INT 9
43228: ST_TO_ADDR
// uc_nation := 2 ;
43229: LD_ADDR_OWVAR 21
43233: PUSH
43234: LD_INT 2
43236: ST_TO_ADDR
// hc_name := Dark Warrior ;
43237: LD_ADDR_OWVAR 26
43241: PUSH
43242: LD_STRING Dark Warrior
43244: ST_TO_ADDR
// hc_gallery :=  ;
43245: LD_ADDR_OWVAR 33
43249: PUSH
43250: LD_STRING 
43252: ST_TO_ADDR
// hc_noskilllimit := true ;
43253: LD_ADDR_OWVAR 76
43257: PUSH
43258: LD_INT 1
43260: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
43261: LD_ADDR_OWVAR 31
43265: PUSH
43266: LD_INT 30
43268: PUSH
43269: LD_INT 30
43271: PUSH
43272: LD_INT 30
43274: PUSH
43275: LD_INT 30
43277: PUSH
43278: EMPTY
43279: LIST
43280: LIST
43281: LIST
43282: LIST
43283: ST_TO_ADDR
// un := CreateHuman ;
43284: LD_ADDR_VAR 0 3
43288: PUSH
43289: CALL_OW 44
43293: ST_TO_ADDR
// hc_noskilllimit := false ;
43294: LD_ADDR_OWVAR 76
43298: PUSH
43299: LD_INT 0
43301: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
43302: LD_VAR 0 3
43306: PPUSH
43307: LD_INT 1
43309: PPUSH
43310: CALL_OW 51
// ToLua ( playRanger() ) ;
43314: LD_STRING playRanger()
43316: PPUSH
43317: CALL_OW 559
// p := 0 ;
43321: LD_ADDR_VAR 0 2
43325: PUSH
43326: LD_INT 0
43328: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
43329: LD_INT 35
43331: PPUSH
43332: CALL_OW 67
// p := p + 1 ;
43336: LD_ADDR_VAR 0 2
43340: PUSH
43341: LD_VAR 0 2
43345: PUSH
43346: LD_INT 1
43348: PLUS
43349: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
43350: LD_VAR 0 3
43354: PPUSH
43355: CALL_OW 256
43359: PUSH
43360: LD_INT 1000
43362: LESS
43363: IFFALSE 43377
// SetLives ( un , 1000 ) ;
43365: LD_VAR 0 3
43369: PPUSH
43370: LD_INT 1000
43372: PPUSH
43373: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
43377: LD_VAR 0 3
43381: PPUSH
43382: LD_INT 81
43384: PUSH
43385: LD_OWVAR 2
43389: PUSH
43390: EMPTY
43391: LIST
43392: LIST
43393: PUSH
43394: LD_INT 91
43396: PUSH
43397: LD_VAR 0 3
43401: PUSH
43402: LD_INT 30
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: LIST
43409: PUSH
43410: EMPTY
43411: LIST
43412: LIST
43413: PPUSH
43414: CALL_OW 69
43418: PPUSH
43419: LD_VAR 0 3
43423: PPUSH
43424: CALL_OW 74
43428: PPUSH
43429: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
43433: LD_VAR 0 2
43437: PUSH
43438: LD_INT 80
43440: GREATER
43441: PUSH
43442: LD_VAR 0 3
43446: PPUSH
43447: CALL_OW 301
43451: OR
43452: IFFALSE 43329
// if un then
43454: LD_VAR 0 3
43458: IFFALSE 43469
// RemoveUnit ( un ) ;
43460: LD_VAR 0 3
43464: PPUSH
43465: CALL_OW 64
// end ;
43469: PPOPN 3
43471: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
43472: LD_EXP 137
43476: IFFALSE 43592
43478: GO 43480
43480: DISABLE
43481: LD_INT 0
43483: PPUSH
43484: PPUSH
43485: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
43486: LD_ADDR_VAR 0 2
43490: PUSH
43491: LD_INT 81
43493: PUSH
43494: LD_OWVAR 2
43498: PUSH
43499: EMPTY
43500: LIST
43501: LIST
43502: PUSH
43503: LD_INT 21
43505: PUSH
43506: LD_INT 1
43508: PUSH
43509: EMPTY
43510: LIST
43511: LIST
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PPUSH
43517: CALL_OW 69
43521: ST_TO_ADDR
// ToLua ( playComputer() ) ;
43522: LD_STRING playComputer()
43524: PPUSH
43525: CALL_OW 559
// if not tmp then
43529: LD_VAR 0 2
43533: NOT
43534: IFFALSE 43538
// exit ;
43536: GO 43592
// for i in tmp do
43538: LD_ADDR_VAR 0 1
43542: PUSH
43543: LD_VAR 0 2
43547: PUSH
43548: FOR_IN
43549: IFFALSE 43590
// for j := 1 to 4 do
43551: LD_ADDR_VAR 0 3
43555: PUSH
43556: DOUBLE
43557: LD_INT 1
43559: DEC
43560: ST_TO_ADDR
43561: LD_INT 4
43563: PUSH
43564: FOR_TO
43565: IFFALSE 43586
// SetSkill ( i , j , 10 ) ;
43567: LD_VAR 0 1
43571: PPUSH
43572: LD_VAR 0 3
43576: PPUSH
43577: LD_INT 10
43579: PPUSH
43580: CALL_OW 237
43584: GO 43564
43586: POP
43587: POP
43588: GO 43548
43590: POP
43591: POP
// end ;
43592: PPOPN 3
43594: END
// every 0 0$1 trigger s30 do var i , tmp ;
43595: LD_EXP 138
43599: IFFALSE 43668
43601: GO 43603
43603: DISABLE
43604: LD_INT 0
43606: PPUSH
43607: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
43608: LD_ADDR_VAR 0 2
43612: PUSH
43613: LD_INT 22
43615: PUSH
43616: LD_OWVAR 2
43620: PUSH
43621: EMPTY
43622: LIST
43623: LIST
43624: PPUSH
43625: CALL_OW 69
43629: ST_TO_ADDR
// if not tmp then
43630: LD_VAR 0 2
43634: NOT
43635: IFFALSE 43639
// exit ;
43637: GO 43668
// for i in tmp do
43639: LD_ADDR_VAR 0 1
43643: PUSH
43644: LD_VAR 0 2
43648: PUSH
43649: FOR_IN
43650: IFFALSE 43666
// SetLives ( i , 300 ) ;
43652: LD_VAR 0 1
43656: PPUSH
43657: LD_INT 300
43659: PPUSH
43660: CALL_OW 234
43664: GO 43649
43666: POP
43667: POP
// end ;
43668: PPOPN 2
43670: END
// every 0 0$1 trigger s60 do var i , tmp ;
43671: LD_EXP 139
43675: IFFALSE 43744
43677: GO 43679
43679: DISABLE
43680: LD_INT 0
43682: PPUSH
43683: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
43684: LD_ADDR_VAR 0 2
43688: PUSH
43689: LD_INT 22
43691: PUSH
43692: LD_OWVAR 2
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PPUSH
43701: CALL_OW 69
43705: ST_TO_ADDR
// if not tmp then
43706: LD_VAR 0 2
43710: NOT
43711: IFFALSE 43715
// exit ;
43713: GO 43744
// for i in tmp do
43715: LD_ADDR_VAR 0 1
43719: PUSH
43720: LD_VAR 0 2
43724: PUSH
43725: FOR_IN
43726: IFFALSE 43742
// SetLives ( i , 600 ) ;
43728: LD_VAR 0 1
43732: PPUSH
43733: LD_INT 600
43735: PPUSH
43736: CALL_OW 234
43740: GO 43725
43742: POP
43743: POP
// end ;
43744: PPOPN 2
43746: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
43747: LD_INT 0
43749: PPUSH
// case cmd of 301 :
43750: LD_VAR 0 1
43754: PUSH
43755: LD_INT 301
43757: DOUBLE
43758: EQUAL
43759: IFTRUE 43763
43761: GO 43795
43763: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
43764: LD_VAR 0 6
43768: PPUSH
43769: LD_VAR 0 7
43773: PPUSH
43774: LD_VAR 0 8
43778: PPUSH
43779: LD_VAR 0 4
43783: PPUSH
43784: LD_VAR 0 5
43788: PPUSH
43789: CALL 45004 0 5
43793: GO 43916
43795: LD_INT 302
43797: DOUBLE
43798: EQUAL
43799: IFTRUE 43803
43801: GO 43840
43803: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
43804: LD_VAR 0 6
43808: PPUSH
43809: LD_VAR 0 7
43813: PPUSH
43814: LD_VAR 0 8
43818: PPUSH
43819: LD_VAR 0 9
43823: PPUSH
43824: LD_VAR 0 4
43828: PPUSH
43829: LD_VAR 0 5
43833: PPUSH
43834: CALL 45095 0 6
43838: GO 43916
43840: LD_INT 303
43842: DOUBLE
43843: EQUAL
43844: IFTRUE 43848
43846: GO 43885
43848: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
43849: LD_VAR 0 6
43853: PPUSH
43854: LD_VAR 0 7
43858: PPUSH
43859: LD_VAR 0 8
43863: PPUSH
43864: LD_VAR 0 9
43868: PPUSH
43869: LD_VAR 0 4
43873: PPUSH
43874: LD_VAR 0 5
43878: PPUSH
43879: CALL 43921 0 6
43883: GO 43916
43885: LD_INT 304
43887: DOUBLE
43888: EQUAL
43889: IFTRUE 43893
43891: GO 43915
43893: POP
// hHackTeleport ( unit , x , y ) ; end ;
43894: LD_VAR 0 2
43898: PPUSH
43899: LD_VAR 0 4
43903: PPUSH
43904: LD_VAR 0 5
43908: PPUSH
43909: CALL 45688 0 3
43913: GO 43916
43915: POP
// end ;
43916: LD_VAR 0 12
43920: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
43921: LD_INT 0
43923: PPUSH
43924: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
43925: LD_VAR 0 1
43929: PUSH
43930: LD_INT 1
43932: LESS
43933: PUSH
43934: LD_VAR 0 1
43938: PUSH
43939: LD_INT 3
43941: GREATER
43942: OR
43943: PUSH
43944: LD_VAR 0 5
43948: PPUSH
43949: LD_VAR 0 6
43953: PPUSH
43954: CALL_OW 428
43958: OR
43959: IFFALSE 43963
// exit ;
43961: GO 44691
// uc_side := your_side ;
43963: LD_ADDR_OWVAR 20
43967: PUSH
43968: LD_OWVAR 2
43972: ST_TO_ADDR
// uc_nation := nation ;
43973: LD_ADDR_OWVAR 21
43977: PUSH
43978: LD_VAR 0 1
43982: ST_TO_ADDR
// bc_level = 1 ;
43983: LD_ADDR_OWVAR 43
43987: PUSH
43988: LD_INT 1
43990: ST_TO_ADDR
// case btype of 1 :
43991: LD_VAR 0 2
43995: PUSH
43996: LD_INT 1
43998: DOUBLE
43999: EQUAL
44000: IFTRUE 44004
44002: GO 44015
44004: POP
// bc_type := b_depot ; 2 :
44005: LD_ADDR_OWVAR 42
44009: PUSH
44010: LD_INT 0
44012: ST_TO_ADDR
44013: GO 44635
44015: LD_INT 2
44017: DOUBLE
44018: EQUAL
44019: IFTRUE 44023
44021: GO 44034
44023: POP
// bc_type := b_warehouse ; 3 :
44024: LD_ADDR_OWVAR 42
44028: PUSH
44029: LD_INT 1
44031: ST_TO_ADDR
44032: GO 44635
44034: LD_INT 3
44036: DOUBLE
44037: EQUAL
44038: IFTRUE 44042
44040: GO 44053
44042: POP
// bc_type := b_lab ; 4 .. 9 :
44043: LD_ADDR_OWVAR 42
44047: PUSH
44048: LD_INT 6
44050: ST_TO_ADDR
44051: GO 44635
44053: LD_INT 4
44055: DOUBLE
44056: GREATEREQUAL
44057: IFFALSE 44065
44059: LD_INT 9
44061: DOUBLE
44062: LESSEQUAL
44063: IFTRUE 44067
44065: GO 44127
44067: POP
// begin bc_type := b_lab_half ;
44068: LD_ADDR_OWVAR 42
44072: PUSH
44073: LD_INT 7
44075: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
44076: LD_ADDR_OWVAR 44
44080: PUSH
44081: LD_INT 10
44083: PUSH
44084: LD_INT 11
44086: PUSH
44087: LD_INT 12
44089: PUSH
44090: LD_INT 15
44092: PUSH
44093: LD_INT 14
44095: PUSH
44096: LD_INT 13
44098: PUSH
44099: EMPTY
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: PUSH
44107: LD_VAR 0 2
44111: PUSH
44112: LD_INT 3
44114: MINUS
44115: ARRAY
44116: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
44117: LD_ADDR_OWVAR 45
44121: PUSH
44122: LD_INT 9
44124: ST_TO_ADDR
// end ; 10 .. 13 :
44125: GO 44635
44127: LD_INT 10
44129: DOUBLE
44130: GREATEREQUAL
44131: IFFALSE 44139
44133: LD_INT 13
44135: DOUBLE
44136: LESSEQUAL
44137: IFTRUE 44141
44139: GO 44218
44141: POP
// begin bc_type := b_lab_full ;
44142: LD_ADDR_OWVAR 42
44146: PUSH
44147: LD_INT 8
44149: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
44150: LD_ADDR_OWVAR 44
44154: PUSH
44155: LD_INT 10
44157: PUSH
44158: LD_INT 12
44160: PUSH
44161: LD_INT 14
44163: PUSH
44164: LD_INT 13
44166: PUSH
44167: EMPTY
44168: LIST
44169: LIST
44170: LIST
44171: LIST
44172: PUSH
44173: LD_VAR 0 2
44177: PUSH
44178: LD_INT 9
44180: MINUS
44181: ARRAY
44182: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
44183: LD_ADDR_OWVAR 45
44187: PUSH
44188: LD_INT 11
44190: PUSH
44191: LD_INT 15
44193: PUSH
44194: LD_INT 12
44196: PUSH
44197: LD_INT 15
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: LIST
44204: LIST
44205: PUSH
44206: LD_VAR 0 2
44210: PUSH
44211: LD_INT 9
44213: MINUS
44214: ARRAY
44215: ST_TO_ADDR
// end ; 14 :
44216: GO 44635
44218: LD_INT 14
44220: DOUBLE
44221: EQUAL
44222: IFTRUE 44226
44224: GO 44237
44226: POP
// bc_type := b_workshop ; 15 :
44227: LD_ADDR_OWVAR 42
44231: PUSH
44232: LD_INT 2
44234: ST_TO_ADDR
44235: GO 44635
44237: LD_INT 15
44239: DOUBLE
44240: EQUAL
44241: IFTRUE 44245
44243: GO 44256
44245: POP
// bc_type := b_factory ; 16 :
44246: LD_ADDR_OWVAR 42
44250: PUSH
44251: LD_INT 3
44253: ST_TO_ADDR
44254: GO 44635
44256: LD_INT 16
44258: DOUBLE
44259: EQUAL
44260: IFTRUE 44264
44262: GO 44275
44264: POP
// bc_type := b_ext_gun ; 17 :
44265: LD_ADDR_OWVAR 42
44269: PUSH
44270: LD_INT 17
44272: ST_TO_ADDR
44273: GO 44635
44275: LD_INT 17
44277: DOUBLE
44278: EQUAL
44279: IFTRUE 44283
44281: GO 44311
44283: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
44284: LD_ADDR_OWVAR 42
44288: PUSH
44289: LD_INT 19
44291: PUSH
44292: LD_INT 23
44294: PUSH
44295: LD_INT 19
44297: PUSH
44298: EMPTY
44299: LIST
44300: LIST
44301: LIST
44302: PUSH
44303: LD_VAR 0 1
44307: ARRAY
44308: ST_TO_ADDR
44309: GO 44635
44311: LD_INT 18
44313: DOUBLE
44314: EQUAL
44315: IFTRUE 44319
44317: GO 44330
44319: POP
// bc_type := b_ext_radar ; 19 :
44320: LD_ADDR_OWVAR 42
44324: PUSH
44325: LD_INT 20
44327: ST_TO_ADDR
44328: GO 44635
44330: LD_INT 19
44332: DOUBLE
44333: EQUAL
44334: IFTRUE 44338
44336: GO 44349
44338: POP
// bc_type := b_ext_radio ; 20 :
44339: LD_ADDR_OWVAR 42
44343: PUSH
44344: LD_INT 22
44346: ST_TO_ADDR
44347: GO 44635
44349: LD_INT 20
44351: DOUBLE
44352: EQUAL
44353: IFTRUE 44357
44355: GO 44368
44357: POP
// bc_type := b_ext_siberium ; 21 :
44358: LD_ADDR_OWVAR 42
44362: PUSH
44363: LD_INT 21
44365: ST_TO_ADDR
44366: GO 44635
44368: LD_INT 21
44370: DOUBLE
44371: EQUAL
44372: IFTRUE 44376
44374: GO 44387
44376: POP
// bc_type := b_ext_computer ; 22 :
44377: LD_ADDR_OWVAR 42
44381: PUSH
44382: LD_INT 24
44384: ST_TO_ADDR
44385: GO 44635
44387: LD_INT 22
44389: DOUBLE
44390: EQUAL
44391: IFTRUE 44395
44393: GO 44406
44395: POP
// bc_type := b_ext_track ; 23 :
44396: LD_ADDR_OWVAR 42
44400: PUSH
44401: LD_INT 16
44403: ST_TO_ADDR
44404: GO 44635
44406: LD_INT 23
44408: DOUBLE
44409: EQUAL
44410: IFTRUE 44414
44412: GO 44425
44414: POP
// bc_type := b_ext_laser ; 24 :
44415: LD_ADDR_OWVAR 42
44419: PUSH
44420: LD_INT 25
44422: ST_TO_ADDR
44423: GO 44635
44425: LD_INT 24
44427: DOUBLE
44428: EQUAL
44429: IFTRUE 44433
44431: GO 44444
44433: POP
// bc_type := b_control_tower ; 25 :
44434: LD_ADDR_OWVAR 42
44438: PUSH
44439: LD_INT 36
44441: ST_TO_ADDR
44442: GO 44635
44444: LD_INT 25
44446: DOUBLE
44447: EQUAL
44448: IFTRUE 44452
44450: GO 44463
44452: POP
// bc_type := b_breastwork ; 26 :
44453: LD_ADDR_OWVAR 42
44457: PUSH
44458: LD_INT 31
44460: ST_TO_ADDR
44461: GO 44635
44463: LD_INT 26
44465: DOUBLE
44466: EQUAL
44467: IFTRUE 44471
44469: GO 44482
44471: POP
// bc_type := b_bunker ; 27 :
44472: LD_ADDR_OWVAR 42
44476: PUSH
44477: LD_INT 32
44479: ST_TO_ADDR
44480: GO 44635
44482: LD_INT 27
44484: DOUBLE
44485: EQUAL
44486: IFTRUE 44490
44488: GO 44501
44490: POP
// bc_type := b_turret ; 28 :
44491: LD_ADDR_OWVAR 42
44495: PUSH
44496: LD_INT 33
44498: ST_TO_ADDR
44499: GO 44635
44501: LD_INT 28
44503: DOUBLE
44504: EQUAL
44505: IFTRUE 44509
44507: GO 44520
44509: POP
// bc_type := b_armoury ; 29 :
44510: LD_ADDR_OWVAR 42
44514: PUSH
44515: LD_INT 4
44517: ST_TO_ADDR
44518: GO 44635
44520: LD_INT 29
44522: DOUBLE
44523: EQUAL
44524: IFTRUE 44528
44526: GO 44539
44528: POP
// bc_type := b_barracks ; 30 :
44529: LD_ADDR_OWVAR 42
44533: PUSH
44534: LD_INT 5
44536: ST_TO_ADDR
44537: GO 44635
44539: LD_INT 30
44541: DOUBLE
44542: EQUAL
44543: IFTRUE 44547
44545: GO 44558
44547: POP
// bc_type := b_solar_power ; 31 :
44548: LD_ADDR_OWVAR 42
44552: PUSH
44553: LD_INT 27
44555: ST_TO_ADDR
44556: GO 44635
44558: LD_INT 31
44560: DOUBLE
44561: EQUAL
44562: IFTRUE 44566
44564: GO 44577
44566: POP
// bc_type := b_oil_power ; 32 :
44567: LD_ADDR_OWVAR 42
44571: PUSH
44572: LD_INT 26
44574: ST_TO_ADDR
44575: GO 44635
44577: LD_INT 32
44579: DOUBLE
44580: EQUAL
44581: IFTRUE 44585
44583: GO 44596
44585: POP
// bc_type := b_siberite_power ; 33 :
44586: LD_ADDR_OWVAR 42
44590: PUSH
44591: LD_INT 28
44593: ST_TO_ADDR
44594: GO 44635
44596: LD_INT 33
44598: DOUBLE
44599: EQUAL
44600: IFTRUE 44604
44602: GO 44615
44604: POP
// bc_type := b_oil_mine ; 34 :
44605: LD_ADDR_OWVAR 42
44609: PUSH
44610: LD_INT 29
44612: ST_TO_ADDR
44613: GO 44635
44615: LD_INT 34
44617: DOUBLE
44618: EQUAL
44619: IFTRUE 44623
44621: GO 44634
44623: POP
// bc_type := b_siberite_mine ; end ;
44624: LD_ADDR_OWVAR 42
44628: PUSH
44629: LD_INT 30
44631: ST_TO_ADDR
44632: GO 44635
44634: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
44635: LD_ADDR_VAR 0 8
44639: PUSH
44640: LD_VAR 0 5
44644: PPUSH
44645: LD_VAR 0 6
44649: PPUSH
44650: LD_VAR 0 3
44654: PPUSH
44655: CALL_OW 47
44659: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
44660: LD_OWVAR 42
44664: PUSH
44665: LD_INT 32
44667: PUSH
44668: LD_INT 33
44670: PUSH
44671: EMPTY
44672: LIST
44673: LIST
44674: IN
44675: IFFALSE 44691
// PlaceWeaponTurret ( b , weapon ) ;
44677: LD_VAR 0 8
44681: PPUSH
44682: LD_VAR 0 4
44686: PPUSH
44687: CALL_OW 431
// end ;
44691: LD_VAR 0 7
44695: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
44696: LD_INT 0
44698: PPUSH
44699: PPUSH
44700: PPUSH
44701: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
44702: LD_ADDR_VAR 0 4
44706: PUSH
44707: LD_INT 22
44709: PUSH
44710: LD_OWVAR 2
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 2
44721: PUSH
44722: LD_INT 30
44724: PUSH
44725: LD_INT 0
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: LD_INT 30
44734: PUSH
44735: LD_INT 1
44737: PUSH
44738: EMPTY
44739: LIST
44740: LIST
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: LIST
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PPUSH
44751: CALL_OW 69
44755: ST_TO_ADDR
// if not tmp then
44756: LD_VAR 0 4
44760: NOT
44761: IFFALSE 44765
// exit ;
44763: GO 44824
// for i in tmp do
44765: LD_ADDR_VAR 0 2
44769: PUSH
44770: LD_VAR 0 4
44774: PUSH
44775: FOR_IN
44776: IFFALSE 44822
// for j = 1 to 3 do
44778: LD_ADDR_VAR 0 3
44782: PUSH
44783: DOUBLE
44784: LD_INT 1
44786: DEC
44787: ST_TO_ADDR
44788: LD_INT 3
44790: PUSH
44791: FOR_TO
44792: IFFALSE 44818
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
44794: LD_VAR 0 2
44798: PPUSH
44799: CALL_OW 274
44803: PPUSH
44804: LD_VAR 0 3
44808: PPUSH
44809: LD_INT 99999
44811: PPUSH
44812: CALL_OW 277
44816: GO 44791
44818: POP
44819: POP
44820: GO 44775
44822: POP
44823: POP
// end ;
44824: LD_VAR 0 1
44828: RET
// export function hHackSetLevel10 ; var i , j ; begin
44829: LD_INT 0
44831: PPUSH
44832: PPUSH
44833: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
44834: LD_ADDR_VAR 0 2
44838: PUSH
44839: LD_INT 21
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PPUSH
44849: CALL_OW 69
44853: PUSH
44854: FOR_IN
44855: IFFALSE 44907
// if IsSelected ( i ) then
44857: LD_VAR 0 2
44861: PPUSH
44862: CALL_OW 306
44866: IFFALSE 44905
// begin for j := 1 to 4 do
44868: LD_ADDR_VAR 0 3
44872: PUSH
44873: DOUBLE
44874: LD_INT 1
44876: DEC
44877: ST_TO_ADDR
44878: LD_INT 4
44880: PUSH
44881: FOR_TO
44882: IFFALSE 44903
// SetSkill ( i , j , 10 ) ;
44884: LD_VAR 0 2
44888: PPUSH
44889: LD_VAR 0 3
44893: PPUSH
44894: LD_INT 10
44896: PPUSH
44897: CALL_OW 237
44901: GO 44881
44903: POP
44904: POP
// end ;
44905: GO 44854
44907: POP
44908: POP
// end ;
44909: LD_VAR 0 1
44913: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
44914: LD_INT 0
44916: PPUSH
44917: PPUSH
44918: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
44919: LD_ADDR_VAR 0 2
44923: PUSH
44924: LD_INT 22
44926: PUSH
44927: LD_OWVAR 2
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 21
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PPUSH
44950: CALL_OW 69
44954: PUSH
44955: FOR_IN
44956: IFFALSE 44997
// begin for j := 1 to 4 do
44958: LD_ADDR_VAR 0 3
44962: PUSH
44963: DOUBLE
44964: LD_INT 1
44966: DEC
44967: ST_TO_ADDR
44968: LD_INT 4
44970: PUSH
44971: FOR_TO
44972: IFFALSE 44993
// SetSkill ( i , j , 10 ) ;
44974: LD_VAR 0 2
44978: PPUSH
44979: LD_VAR 0 3
44983: PPUSH
44984: LD_INT 10
44986: PPUSH
44987: CALL_OW 237
44991: GO 44971
44993: POP
44994: POP
// end ;
44995: GO 44955
44997: POP
44998: POP
// end ;
44999: LD_VAR 0 1
45003: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
45004: LD_INT 0
45006: PPUSH
// uc_side := your_side ;
45007: LD_ADDR_OWVAR 20
45011: PUSH
45012: LD_OWVAR 2
45016: ST_TO_ADDR
// uc_nation := nation ;
45017: LD_ADDR_OWVAR 21
45021: PUSH
45022: LD_VAR 0 1
45026: ST_TO_ADDR
// InitHc ;
45027: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
45031: LD_INT 0
45033: PPUSH
45034: LD_VAR 0 2
45038: PPUSH
45039: LD_VAR 0 3
45043: PPUSH
45044: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
45048: LD_VAR 0 4
45052: PPUSH
45053: LD_VAR 0 5
45057: PPUSH
45058: CALL_OW 428
45062: PUSH
45063: LD_INT 0
45065: EQUAL
45066: IFFALSE 45090
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
45068: CALL_OW 44
45072: PPUSH
45073: LD_VAR 0 4
45077: PPUSH
45078: LD_VAR 0 5
45082: PPUSH
45083: LD_INT 1
45085: PPUSH
45086: CALL_OW 48
// end ;
45090: LD_VAR 0 6
45094: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
45095: LD_INT 0
45097: PPUSH
45098: PPUSH
// uc_side := your_side ;
45099: LD_ADDR_OWVAR 20
45103: PUSH
45104: LD_OWVAR 2
45108: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
45109: LD_VAR 0 1
45113: PUSH
45114: LD_INT 1
45116: PUSH
45117: LD_INT 2
45119: PUSH
45120: LD_INT 3
45122: PUSH
45123: LD_INT 4
45125: PUSH
45126: LD_INT 5
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: IN
45136: IFFALSE 45148
// uc_nation := nation_american else
45138: LD_ADDR_OWVAR 21
45142: PUSH
45143: LD_INT 1
45145: ST_TO_ADDR
45146: GO 45191
// if chassis in [ 11 , 12 , 13 , 14 ] then
45148: LD_VAR 0 1
45152: PUSH
45153: LD_INT 11
45155: PUSH
45156: LD_INT 12
45158: PUSH
45159: LD_INT 13
45161: PUSH
45162: LD_INT 14
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: IN
45171: IFFALSE 45183
// uc_nation := nation_arabian else
45173: LD_ADDR_OWVAR 21
45177: PUSH
45178: LD_INT 2
45180: ST_TO_ADDR
45181: GO 45191
// uc_nation := nation_russian ;
45183: LD_ADDR_OWVAR 21
45187: PUSH
45188: LD_INT 3
45190: ST_TO_ADDR
// vc_chassis := chassis ;
45191: LD_ADDR_OWVAR 37
45195: PUSH
45196: LD_VAR 0 1
45200: ST_TO_ADDR
// vc_engine := engine ;
45201: LD_ADDR_OWVAR 39
45205: PUSH
45206: LD_VAR 0 2
45210: ST_TO_ADDR
// vc_control := control ;
45211: LD_ADDR_OWVAR 38
45215: PUSH
45216: LD_VAR 0 3
45220: ST_TO_ADDR
// vc_weapon := weapon ;
45221: LD_ADDR_OWVAR 40
45225: PUSH
45226: LD_VAR 0 4
45230: ST_TO_ADDR
// un := CreateVehicle ;
45231: LD_ADDR_VAR 0 8
45235: PUSH
45236: CALL_OW 45
45240: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
45241: LD_VAR 0 8
45245: PPUSH
45246: LD_INT 0
45248: PPUSH
45249: LD_INT 5
45251: PPUSH
45252: CALL_OW 12
45256: PPUSH
45257: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
45261: LD_VAR 0 8
45265: PPUSH
45266: LD_VAR 0 5
45270: PPUSH
45271: LD_VAR 0 6
45275: PPUSH
45276: LD_INT 1
45278: PPUSH
45279: CALL_OW 48
// end ;
45283: LD_VAR 0 7
45287: RET
// export hInvincible ; every 1 do
45288: GO 45290
45290: DISABLE
// hInvincible := [ ] ;
45291: LD_ADDR_EXP 140
45295: PUSH
45296: EMPTY
45297: ST_TO_ADDR
45298: END
// every 10 do var i ;
45299: GO 45301
45301: DISABLE
45302: LD_INT 0
45304: PPUSH
// begin enable ;
45305: ENABLE
// if not hInvincible then
45306: LD_EXP 140
45310: NOT
45311: IFFALSE 45315
// exit ;
45313: GO 45359
// for i in hInvincible do
45315: LD_ADDR_VAR 0 1
45319: PUSH
45320: LD_EXP 140
45324: PUSH
45325: FOR_IN
45326: IFFALSE 45357
// if GetLives ( i ) < 1000 then
45328: LD_VAR 0 1
45332: PPUSH
45333: CALL_OW 256
45337: PUSH
45338: LD_INT 1000
45340: LESS
45341: IFFALSE 45355
// SetLives ( i , 1000 ) ;
45343: LD_VAR 0 1
45347: PPUSH
45348: LD_INT 1000
45350: PPUSH
45351: CALL_OW 234
45355: GO 45325
45357: POP
45358: POP
// end ;
45359: PPOPN 1
45361: END
// export function hHackInvincible ; var i ; begin
45362: LD_INT 0
45364: PPUSH
45365: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
45366: LD_ADDR_VAR 0 2
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: LD_INT 21
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 21
45386: PUSH
45387: LD_INT 2
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: LIST
45398: PPUSH
45399: CALL_OW 69
45403: PUSH
45404: FOR_IN
45405: IFFALSE 45466
// if IsSelected ( i ) then
45407: LD_VAR 0 2
45411: PPUSH
45412: CALL_OW 306
45416: IFFALSE 45464
// begin if i in hInvincible then
45418: LD_VAR 0 2
45422: PUSH
45423: LD_EXP 140
45427: IN
45428: IFFALSE 45448
// hInvincible := hInvincible diff i else
45430: LD_ADDR_EXP 140
45434: PUSH
45435: LD_EXP 140
45439: PUSH
45440: LD_VAR 0 2
45444: DIFF
45445: ST_TO_ADDR
45446: GO 45464
// hInvincible := hInvincible union i ;
45448: LD_ADDR_EXP 140
45452: PUSH
45453: LD_EXP 140
45457: PUSH
45458: LD_VAR 0 2
45462: UNION
45463: ST_TO_ADDR
// end ;
45464: GO 45404
45466: POP
45467: POP
// end ;
45468: LD_VAR 0 1
45472: RET
// export function hHackInvisible ; var i , j ; begin
45473: LD_INT 0
45475: PPUSH
45476: PPUSH
45477: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
45478: LD_ADDR_VAR 0 2
45482: PUSH
45483: LD_INT 21
45485: PUSH
45486: LD_INT 1
45488: PUSH
45489: EMPTY
45490: LIST
45491: LIST
45492: PPUSH
45493: CALL_OW 69
45497: PUSH
45498: FOR_IN
45499: IFFALSE 45523
// if IsSelected ( i ) then
45501: LD_VAR 0 2
45505: PPUSH
45506: CALL_OW 306
45510: IFFALSE 45521
// ComForceInvisible ( i ) ;
45512: LD_VAR 0 2
45516: PPUSH
45517: CALL_OW 496
45521: GO 45498
45523: POP
45524: POP
// end ;
45525: LD_VAR 0 1
45529: RET
// export function hHackChangeYourSide ; begin
45530: LD_INT 0
45532: PPUSH
// if your_side = 8 then
45533: LD_OWVAR 2
45537: PUSH
45538: LD_INT 8
45540: EQUAL
45541: IFFALSE 45553
// your_side := 0 else
45543: LD_ADDR_OWVAR 2
45547: PUSH
45548: LD_INT 0
45550: ST_TO_ADDR
45551: GO 45567
// your_side := your_side + 1 ;
45553: LD_ADDR_OWVAR 2
45557: PUSH
45558: LD_OWVAR 2
45562: PUSH
45563: LD_INT 1
45565: PLUS
45566: ST_TO_ADDR
// end ;
45567: LD_VAR 0 1
45571: RET
// export function hHackChangeUnitSide ; var i , j ; begin
45572: LD_INT 0
45574: PPUSH
45575: PPUSH
45576: PPUSH
// for i in all_units do
45577: LD_ADDR_VAR 0 2
45581: PUSH
45582: LD_OWVAR 3
45586: PUSH
45587: FOR_IN
45588: IFFALSE 45666
// if IsSelected ( i ) then
45590: LD_VAR 0 2
45594: PPUSH
45595: CALL_OW 306
45599: IFFALSE 45664
// begin j := GetSide ( i ) ;
45601: LD_ADDR_VAR 0 3
45605: PUSH
45606: LD_VAR 0 2
45610: PPUSH
45611: CALL_OW 255
45615: ST_TO_ADDR
// if j = 8 then
45616: LD_VAR 0 3
45620: PUSH
45621: LD_INT 8
45623: EQUAL
45624: IFFALSE 45636
// j := 0 else
45626: LD_ADDR_VAR 0 3
45630: PUSH
45631: LD_INT 0
45633: ST_TO_ADDR
45634: GO 45650
// j := j + 1 ;
45636: LD_ADDR_VAR 0 3
45640: PUSH
45641: LD_VAR 0 3
45645: PUSH
45646: LD_INT 1
45648: PLUS
45649: ST_TO_ADDR
// SetSide ( i , j ) ;
45650: LD_VAR 0 2
45654: PPUSH
45655: LD_VAR 0 3
45659: PPUSH
45660: CALL_OW 235
// end ;
45664: GO 45587
45666: POP
45667: POP
// end ;
45668: LD_VAR 0 1
45672: RET
// export function hHackFog ; begin
45673: LD_INT 0
45675: PPUSH
// FogOff ( true ) ;
45676: LD_INT 1
45678: PPUSH
45679: CALL_OW 344
// end ;
45683: LD_VAR 0 1
45687: RET
// export function hHackTeleport ( unit , x , y ) ; begin
45688: LD_INT 0
45690: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
45691: LD_VAR 0 1
45695: PPUSH
45696: LD_VAR 0 2
45700: PPUSH
45701: LD_VAR 0 3
45705: PPUSH
45706: LD_INT 1
45708: PPUSH
45709: LD_INT 1
45711: PPUSH
45712: CALL_OW 483
// CenterOnXY ( x , y ) ;
45716: LD_VAR 0 2
45720: PPUSH
45721: LD_VAR 0 3
45725: PPUSH
45726: CALL_OW 84
// end ;
45730: LD_VAR 0 4
45734: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
45735: LD_INT 0
45737: PPUSH
45738: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
45739: LD_VAR 0 1
45743: NOT
45744: PUSH
45745: LD_VAR 0 2
45749: PPUSH
45750: LD_VAR 0 3
45754: PPUSH
45755: CALL_OW 488
45759: NOT
45760: OR
45761: PUSH
45762: LD_VAR 0 1
45766: PPUSH
45767: CALL_OW 266
45771: PUSH
45772: LD_INT 3
45774: NONEQUAL
45775: PUSH
45776: LD_VAR 0 1
45780: PPUSH
45781: CALL_OW 247
45785: PUSH
45786: LD_INT 1
45788: EQUAL
45789: NOT
45790: AND
45791: OR
45792: IFFALSE 45796
// exit ;
45794: GO 45945
// if GetType ( factory ) = unit_human then
45796: LD_VAR 0 1
45800: PPUSH
45801: CALL_OW 247
45805: PUSH
45806: LD_INT 1
45808: EQUAL
45809: IFFALSE 45826
// factory := IsInUnit ( factory ) ;
45811: LD_ADDR_VAR 0 1
45815: PUSH
45816: LD_VAR 0 1
45820: PPUSH
45821: CALL_OW 310
45825: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
45826: LD_VAR 0 1
45830: PPUSH
45831: CALL_OW 266
45835: PUSH
45836: LD_INT 3
45838: NONEQUAL
45839: IFFALSE 45843
// exit ;
45841: GO 45945
// if HexInfo ( x , y ) = factory then
45843: LD_VAR 0 2
45847: PPUSH
45848: LD_VAR 0 3
45852: PPUSH
45853: CALL_OW 428
45857: PUSH
45858: LD_VAR 0 1
45862: EQUAL
45863: IFFALSE 45890
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
45865: LD_ADDR_EXP 141
45869: PUSH
45870: LD_EXP 141
45874: PPUSH
45875: LD_VAR 0 1
45879: PPUSH
45880: LD_INT 0
45882: PPUSH
45883: CALL_OW 1
45887: ST_TO_ADDR
45888: GO 45941
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
45890: LD_ADDR_EXP 141
45894: PUSH
45895: LD_EXP 141
45899: PPUSH
45900: LD_VAR 0 1
45904: PPUSH
45905: LD_VAR 0 1
45909: PPUSH
45910: CALL_OW 255
45914: PUSH
45915: LD_VAR 0 1
45919: PUSH
45920: LD_VAR 0 2
45924: PUSH
45925: LD_VAR 0 3
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: PPUSH
45936: CALL_OW 1
45940: ST_TO_ADDR
// UpdateFactoryWaypoints ;
45941: CALL 45950 0 0
// end ;
45945: LD_VAR 0 4
45949: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
45950: LD_INT 0
45952: PPUSH
45953: PPUSH
45954: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
45955: LD_STRING resetFactoryWaypoint();
45957: PPUSH
45958: CALL_OW 559
// if factoryWaypoints then
45962: LD_EXP 141
45966: IFFALSE 46092
// begin list := PrepareArray ( factoryWaypoints ) ;
45968: LD_ADDR_VAR 0 3
45972: PUSH
45973: LD_EXP 141
45977: PPUSH
45978: CALL 92414 0 1
45982: ST_TO_ADDR
// for i := 1 to list do
45983: LD_ADDR_VAR 0 2
45987: PUSH
45988: DOUBLE
45989: LD_INT 1
45991: DEC
45992: ST_TO_ADDR
45993: LD_VAR 0 3
45997: PUSH
45998: FOR_TO
45999: IFFALSE 46090
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
46001: LD_STRING setFactoryWaypointXY(
46003: PUSH
46004: LD_VAR 0 3
46008: PUSH
46009: LD_VAR 0 2
46013: ARRAY
46014: PUSH
46015: LD_INT 1
46017: ARRAY
46018: STR
46019: PUSH
46020: LD_STRING ,
46022: STR
46023: PUSH
46024: LD_VAR 0 3
46028: PUSH
46029: LD_VAR 0 2
46033: ARRAY
46034: PUSH
46035: LD_INT 2
46037: ARRAY
46038: STR
46039: PUSH
46040: LD_STRING ,
46042: STR
46043: PUSH
46044: LD_VAR 0 3
46048: PUSH
46049: LD_VAR 0 2
46053: ARRAY
46054: PUSH
46055: LD_INT 3
46057: ARRAY
46058: STR
46059: PUSH
46060: LD_STRING ,
46062: STR
46063: PUSH
46064: LD_VAR 0 3
46068: PUSH
46069: LD_VAR 0 2
46073: ARRAY
46074: PUSH
46075: LD_INT 4
46077: ARRAY
46078: STR
46079: PUSH
46080: LD_STRING )
46082: STR
46083: PPUSH
46084: CALL_OW 559
46088: GO 45998
46090: POP
46091: POP
// end ; end ;
46092: LD_VAR 0 1
46096: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
46097: LD_INT 0
46099: PPUSH
// if HexInfo ( x , y ) = warehouse then
46100: LD_VAR 0 2
46104: PPUSH
46105: LD_VAR 0 3
46109: PPUSH
46110: CALL_OW 428
46114: PUSH
46115: LD_VAR 0 1
46119: EQUAL
46120: IFFALSE 46147
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
46122: LD_ADDR_EXP 142
46126: PUSH
46127: LD_EXP 142
46131: PPUSH
46132: LD_VAR 0 1
46136: PPUSH
46137: LD_INT 0
46139: PPUSH
46140: CALL_OW 1
46144: ST_TO_ADDR
46145: GO 46198
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
46147: LD_ADDR_EXP 142
46151: PUSH
46152: LD_EXP 142
46156: PPUSH
46157: LD_VAR 0 1
46161: PPUSH
46162: LD_VAR 0 1
46166: PPUSH
46167: CALL_OW 255
46171: PUSH
46172: LD_VAR 0 1
46176: PUSH
46177: LD_VAR 0 2
46181: PUSH
46182: LD_VAR 0 3
46186: PUSH
46187: EMPTY
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: PPUSH
46193: CALL_OW 1
46197: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
46198: CALL 46207 0 0
// end ;
46202: LD_VAR 0 4
46206: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
46207: LD_INT 0
46209: PPUSH
46210: PPUSH
46211: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
46212: LD_STRING resetWarehouseGatheringPoints();
46214: PPUSH
46215: CALL_OW 559
// if warehouseGatheringPoints then
46219: LD_EXP 142
46223: IFFALSE 46349
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
46225: LD_ADDR_VAR 0 3
46229: PUSH
46230: LD_EXP 142
46234: PPUSH
46235: CALL 92414 0 1
46239: ST_TO_ADDR
// for i := 1 to list do
46240: LD_ADDR_VAR 0 2
46244: PUSH
46245: DOUBLE
46246: LD_INT 1
46248: DEC
46249: ST_TO_ADDR
46250: LD_VAR 0 3
46254: PUSH
46255: FOR_TO
46256: IFFALSE 46347
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
46258: LD_STRING setWarehouseGatheringPointXY(
46260: PUSH
46261: LD_VAR 0 3
46265: PUSH
46266: LD_VAR 0 2
46270: ARRAY
46271: PUSH
46272: LD_INT 1
46274: ARRAY
46275: STR
46276: PUSH
46277: LD_STRING ,
46279: STR
46280: PUSH
46281: LD_VAR 0 3
46285: PUSH
46286: LD_VAR 0 2
46290: ARRAY
46291: PUSH
46292: LD_INT 2
46294: ARRAY
46295: STR
46296: PUSH
46297: LD_STRING ,
46299: STR
46300: PUSH
46301: LD_VAR 0 3
46305: PUSH
46306: LD_VAR 0 2
46310: ARRAY
46311: PUSH
46312: LD_INT 3
46314: ARRAY
46315: STR
46316: PUSH
46317: LD_STRING ,
46319: STR
46320: PUSH
46321: LD_VAR 0 3
46325: PUSH
46326: LD_VAR 0 2
46330: ARRAY
46331: PUSH
46332: LD_INT 4
46334: ARRAY
46335: STR
46336: PUSH
46337: LD_STRING )
46339: STR
46340: PPUSH
46341: CALL_OW 559
46345: GO 46255
46347: POP
46348: POP
// end ; end ;
46349: LD_VAR 0 1
46353: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
46354: LD_EXP 142
46358: IFFALSE 47043
46360: GO 46362
46362: DISABLE
46363: LD_INT 0
46365: PPUSH
46366: PPUSH
46367: PPUSH
46368: PPUSH
46369: PPUSH
46370: PPUSH
46371: PPUSH
46372: PPUSH
46373: PPUSH
// begin enable ;
46374: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
46375: LD_ADDR_VAR 0 3
46379: PUSH
46380: LD_EXP 142
46384: PPUSH
46385: CALL 92414 0 1
46389: ST_TO_ADDR
// if not list then
46390: LD_VAR 0 3
46394: NOT
46395: IFFALSE 46399
// exit ;
46397: GO 47043
// for i := 1 to list do
46399: LD_ADDR_VAR 0 1
46403: PUSH
46404: DOUBLE
46405: LD_INT 1
46407: DEC
46408: ST_TO_ADDR
46409: LD_VAR 0 3
46413: PUSH
46414: FOR_TO
46415: IFFALSE 47041
// begin depot := list [ i ] [ 2 ] ;
46417: LD_ADDR_VAR 0 8
46421: PUSH
46422: LD_VAR 0 3
46426: PUSH
46427: LD_VAR 0 1
46431: ARRAY
46432: PUSH
46433: LD_INT 2
46435: ARRAY
46436: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
46437: LD_ADDR_VAR 0 5
46441: PUSH
46442: LD_VAR 0 3
46446: PUSH
46447: LD_VAR 0 1
46451: ARRAY
46452: PUSH
46453: LD_INT 1
46455: ARRAY
46456: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
46457: LD_VAR 0 8
46461: PPUSH
46462: CALL_OW 301
46466: PUSH
46467: LD_VAR 0 5
46471: PUSH
46472: LD_VAR 0 8
46476: PPUSH
46477: CALL_OW 255
46481: NONEQUAL
46482: OR
46483: IFFALSE 46512
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
46485: LD_ADDR_EXP 142
46489: PUSH
46490: LD_EXP 142
46494: PPUSH
46495: LD_VAR 0 8
46499: PPUSH
46500: LD_INT 0
46502: PPUSH
46503: CALL_OW 1
46507: ST_TO_ADDR
// exit ;
46508: POP
46509: POP
46510: GO 47043
// end ; x := list [ i ] [ 3 ] ;
46512: LD_ADDR_VAR 0 6
46516: PUSH
46517: LD_VAR 0 3
46521: PUSH
46522: LD_VAR 0 1
46526: ARRAY
46527: PUSH
46528: LD_INT 3
46530: ARRAY
46531: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
46532: LD_ADDR_VAR 0 7
46536: PUSH
46537: LD_VAR 0 3
46541: PUSH
46542: LD_VAR 0 1
46546: ARRAY
46547: PUSH
46548: LD_INT 4
46550: ARRAY
46551: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
46552: LD_ADDR_VAR 0 9
46556: PUSH
46557: LD_VAR 0 6
46561: PPUSH
46562: LD_VAR 0 7
46566: PPUSH
46567: LD_INT 16
46569: PPUSH
46570: CALL 91002 0 3
46574: ST_TO_ADDR
// if not cratesNearbyPoint then
46575: LD_VAR 0 9
46579: NOT
46580: IFFALSE 46586
// exit ;
46582: POP
46583: POP
46584: GO 47043
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
46586: LD_ADDR_VAR 0 4
46590: PUSH
46591: LD_INT 22
46593: PUSH
46594: LD_VAR 0 5
46598: PUSH
46599: EMPTY
46600: LIST
46601: LIST
46602: PUSH
46603: LD_INT 3
46605: PUSH
46606: LD_INT 60
46608: PUSH
46609: EMPTY
46610: LIST
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 91
46618: PUSH
46619: LD_VAR 0 8
46623: PUSH
46624: LD_INT 6
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: LIST
46631: PUSH
46632: LD_INT 2
46634: PUSH
46635: LD_INT 25
46637: PUSH
46638: LD_INT 2
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: LD_INT 25
46647: PUSH
46648: LD_INT 16
46650: PUSH
46651: EMPTY
46652: LIST
46653: LIST
46654: PUSH
46655: EMPTY
46656: LIST
46657: LIST
46658: LIST
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: LIST
46664: LIST
46665: PPUSH
46666: CALL_OW 69
46670: PUSH
46671: LD_VAR 0 8
46675: PPUSH
46676: CALL_OW 313
46680: PPUSH
46681: LD_INT 3
46683: PUSH
46684: LD_INT 60
46686: PUSH
46687: EMPTY
46688: LIST
46689: PUSH
46690: EMPTY
46691: LIST
46692: LIST
46693: PUSH
46694: LD_INT 2
46696: PUSH
46697: LD_INT 25
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 25
46709: PUSH
46710: LD_INT 16
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: LIST
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PPUSH
46726: CALL_OW 72
46730: UNION
46731: ST_TO_ADDR
// if tmp then
46732: LD_VAR 0 4
46736: IFFALSE 46816
// begin tmp := ShrinkArray ( tmp , 3 ) ;
46738: LD_ADDR_VAR 0 4
46742: PUSH
46743: LD_VAR 0 4
46747: PPUSH
46748: LD_INT 3
46750: PPUSH
46751: CALL 88971 0 2
46755: ST_TO_ADDR
// for j in tmp do
46756: LD_ADDR_VAR 0 2
46760: PUSH
46761: LD_VAR 0 4
46765: PUSH
46766: FOR_IN
46767: IFFALSE 46810
// begin if IsInUnit ( j ) then
46769: LD_VAR 0 2
46773: PPUSH
46774: CALL_OW 310
46778: IFFALSE 46789
// ComExit ( j ) ;
46780: LD_VAR 0 2
46784: PPUSH
46785: CALL 89054 0 1
// AddComCollect ( j , x , y ) ;
46789: LD_VAR 0 2
46793: PPUSH
46794: LD_VAR 0 6
46798: PPUSH
46799: LD_VAR 0 7
46803: PPUSH
46804: CALL_OW 177
// end ;
46808: GO 46766
46810: POP
46811: POP
// exit ;
46812: POP
46813: POP
46814: GO 47043
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
46816: LD_ADDR_VAR 0 4
46820: PUSH
46821: LD_INT 22
46823: PUSH
46824: LD_VAR 0 5
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 91
46835: PUSH
46836: LD_VAR 0 8
46840: PUSH
46841: LD_INT 8
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: LIST
46848: PUSH
46849: LD_INT 2
46851: PUSH
46852: LD_INT 34
46854: PUSH
46855: LD_INT 12
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 34
46864: PUSH
46865: LD_INT 51
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 34
46874: PUSH
46875: LD_INT 32
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 34
46884: PUSH
46885: LD_INT 89
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: LIST
46896: LIST
46897: LIST
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: LIST
46903: PPUSH
46904: CALL_OW 69
46908: ST_TO_ADDR
// if tmp then
46909: LD_VAR 0 4
46913: IFFALSE 47039
// begin for j in tmp do
46915: LD_ADDR_VAR 0 2
46919: PUSH
46920: LD_VAR 0 4
46924: PUSH
46925: FOR_IN
46926: IFFALSE 47037
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
46928: LD_VAR 0 2
46932: PPUSH
46933: CALL_OW 262
46937: PUSH
46938: LD_INT 3
46940: EQUAL
46941: PUSH
46942: LD_VAR 0 2
46946: PPUSH
46947: CALL_OW 261
46951: PUSH
46952: LD_INT 20
46954: GREATER
46955: OR
46956: PUSH
46957: LD_VAR 0 2
46961: PPUSH
46962: CALL_OW 314
46966: NOT
46967: AND
46968: PUSH
46969: LD_VAR 0 2
46973: PPUSH
46974: CALL_OW 263
46978: PUSH
46979: LD_INT 1
46981: NONEQUAL
46982: PUSH
46983: LD_VAR 0 2
46987: PPUSH
46988: CALL_OW 311
46992: OR
46993: AND
46994: IFFALSE 47035
// begin ComCollect ( j , x , y ) ;
46996: LD_VAR 0 2
47000: PPUSH
47001: LD_VAR 0 6
47005: PPUSH
47006: LD_VAR 0 7
47010: PPUSH
47011: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
47015: LD_VAR 0 2
47019: PPUSH
47020: LD_VAR 0 8
47024: PPUSH
47025: CALL_OW 172
// exit ;
47029: POP
47030: POP
47031: POP
47032: POP
47033: GO 47043
// end ;
47035: GO 46925
47037: POP
47038: POP
// end ; end ;
47039: GO 46414
47041: POP
47042: POP
// end ; end_of_file
47043: PPOPN 9
47045: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
47046: LD_INT 0
47048: PPUSH
47049: PPUSH
47050: PPUSH
47051: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
47052: LD_VAR 0 1
47056: PPUSH
47057: CALL_OW 264
47061: PUSH
47062: LD_INT 91
47064: EQUAL
47065: IFFALSE 47137
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
47067: LD_INT 68
47069: PPUSH
47070: LD_VAR 0 1
47074: PPUSH
47075: CALL_OW 255
47079: PPUSH
47080: CALL_OW 321
47084: PUSH
47085: LD_INT 2
47087: EQUAL
47088: IFFALSE 47100
// eff := 70 else
47090: LD_ADDR_VAR 0 4
47094: PUSH
47095: LD_INT 70
47097: ST_TO_ADDR
47098: GO 47108
// eff := 30 ;
47100: LD_ADDR_VAR 0 4
47104: PUSH
47105: LD_INT 30
47107: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
47108: LD_VAR 0 1
47112: PPUSH
47113: CALL_OW 250
47117: PPUSH
47118: LD_VAR 0 1
47122: PPUSH
47123: CALL_OW 251
47127: PPUSH
47128: LD_VAR 0 4
47132: PPUSH
47133: CALL_OW 495
// end ; end ;
47137: LD_VAR 0 2
47141: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
47142: LD_INT 0
47144: PPUSH
// end ;
47145: LD_VAR 0 4
47149: RET
// export function SOS_Command ( cmd ) ; begin
47150: LD_INT 0
47152: PPUSH
// end ;
47153: LD_VAR 0 2
47157: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
47158: LD_INT 0
47160: PPUSH
// end ;
47161: LD_VAR 0 6
47165: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
47166: LD_INT 0
47168: PPUSH
47169: PPUSH
// if not vehicle or not factory then
47170: LD_VAR 0 1
47174: NOT
47175: PUSH
47176: LD_VAR 0 2
47180: NOT
47181: OR
47182: IFFALSE 47186
// exit ;
47184: GO 47417
// if factoryWaypoints >= factory then
47186: LD_EXP 141
47190: PUSH
47191: LD_VAR 0 2
47195: GREATEREQUAL
47196: IFFALSE 47417
// if factoryWaypoints [ factory ] then
47198: LD_EXP 141
47202: PUSH
47203: LD_VAR 0 2
47207: ARRAY
47208: IFFALSE 47417
// begin if GetControl ( vehicle ) = control_manual then
47210: LD_VAR 0 1
47214: PPUSH
47215: CALL_OW 263
47219: PUSH
47220: LD_INT 1
47222: EQUAL
47223: IFFALSE 47304
// begin driver := IsDrivenBy ( vehicle ) ;
47225: LD_ADDR_VAR 0 4
47229: PUSH
47230: LD_VAR 0 1
47234: PPUSH
47235: CALL_OW 311
47239: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
47240: LD_VAR 0 4
47244: PPUSH
47245: LD_EXP 141
47249: PUSH
47250: LD_VAR 0 2
47254: ARRAY
47255: PUSH
47256: LD_INT 3
47258: ARRAY
47259: PPUSH
47260: LD_EXP 141
47264: PUSH
47265: LD_VAR 0 2
47269: ARRAY
47270: PUSH
47271: LD_INT 4
47273: ARRAY
47274: PPUSH
47275: CALL_OW 171
// AddComExitVehicle ( driver ) ;
47279: LD_VAR 0 4
47283: PPUSH
47284: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
47288: LD_VAR 0 4
47292: PPUSH
47293: LD_VAR 0 2
47297: PPUSH
47298: CALL_OW 180
// end else
47302: GO 47417
// if GetControl ( vehicle ) = control_remote then
47304: LD_VAR 0 1
47308: PPUSH
47309: CALL_OW 263
47313: PUSH
47314: LD_INT 2
47316: EQUAL
47317: IFFALSE 47378
// begin wait ( 0 0$2 ) ;
47319: LD_INT 70
47321: PPUSH
47322: CALL_OW 67
// if Connect ( vehicle ) then
47326: LD_VAR 0 1
47330: PPUSH
47331: CALL 59275 0 1
47335: IFFALSE 47376
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
47337: LD_VAR 0 1
47341: PPUSH
47342: LD_EXP 141
47346: PUSH
47347: LD_VAR 0 2
47351: ARRAY
47352: PUSH
47353: LD_INT 3
47355: ARRAY
47356: PPUSH
47357: LD_EXP 141
47361: PUSH
47362: LD_VAR 0 2
47366: ARRAY
47367: PUSH
47368: LD_INT 4
47370: ARRAY
47371: PPUSH
47372: CALL_OW 171
// end else
47376: GO 47417
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
47378: LD_VAR 0 1
47382: PPUSH
47383: LD_EXP 141
47387: PUSH
47388: LD_VAR 0 2
47392: ARRAY
47393: PUSH
47394: LD_INT 3
47396: ARRAY
47397: PPUSH
47398: LD_EXP 141
47402: PUSH
47403: LD_VAR 0 2
47407: ARRAY
47408: PUSH
47409: LD_INT 4
47411: ARRAY
47412: PPUSH
47413: CALL_OW 171
// end ; end ;
47417: LD_VAR 0 3
47421: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
47422: LD_INT 0
47424: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
47425: LD_VAR 0 1
47429: PUSH
47430: LD_INT 250
47432: EQUAL
47433: PUSH
47434: LD_VAR 0 2
47438: PPUSH
47439: CALL_OW 264
47443: PUSH
47444: LD_INT 81
47446: EQUAL
47447: AND
47448: IFFALSE 47469
// MinerPlaceMine ( unit , x , y ) ;
47450: LD_VAR 0 2
47454: PPUSH
47455: LD_VAR 0 4
47459: PPUSH
47460: LD_VAR 0 5
47464: PPUSH
47465: CALL 49854 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
47469: LD_VAR 0 1
47473: PUSH
47474: LD_INT 251
47476: EQUAL
47477: PUSH
47478: LD_VAR 0 2
47482: PPUSH
47483: CALL_OW 264
47487: PUSH
47488: LD_INT 81
47490: EQUAL
47491: AND
47492: IFFALSE 47513
// MinerDetonateMine ( unit , x , y ) ;
47494: LD_VAR 0 2
47498: PPUSH
47499: LD_VAR 0 4
47503: PPUSH
47504: LD_VAR 0 5
47508: PPUSH
47509: CALL 50129 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
47513: LD_VAR 0 1
47517: PUSH
47518: LD_INT 252
47520: EQUAL
47521: PUSH
47522: LD_VAR 0 2
47526: PPUSH
47527: CALL_OW 264
47531: PUSH
47532: LD_INT 81
47534: EQUAL
47535: AND
47536: IFFALSE 47557
// MinerCreateMinefield ( unit , x , y ) ;
47538: LD_VAR 0 2
47542: PPUSH
47543: LD_VAR 0 4
47547: PPUSH
47548: LD_VAR 0 5
47552: PPUSH
47553: CALL 50546 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
47557: LD_VAR 0 1
47561: PUSH
47562: LD_INT 253
47564: EQUAL
47565: PUSH
47566: LD_VAR 0 2
47570: PPUSH
47571: CALL_OW 257
47575: PUSH
47576: LD_INT 5
47578: EQUAL
47579: AND
47580: IFFALSE 47601
// ComBinocular ( unit , x , y ) ;
47582: LD_VAR 0 2
47586: PPUSH
47587: LD_VAR 0 4
47591: PPUSH
47592: LD_VAR 0 5
47596: PPUSH
47597: CALL 50915 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
47601: LD_VAR 0 1
47605: PUSH
47606: LD_INT 254
47608: EQUAL
47609: PUSH
47610: LD_VAR 0 2
47614: PPUSH
47615: CALL_OW 264
47619: PUSH
47620: LD_INT 99
47622: EQUAL
47623: AND
47624: PUSH
47625: LD_VAR 0 3
47629: PPUSH
47630: CALL_OW 263
47634: PUSH
47635: LD_INT 3
47637: EQUAL
47638: AND
47639: IFFALSE 47655
// HackDestroyVehicle ( unit , selectedUnit ) ;
47641: LD_VAR 0 2
47645: PPUSH
47646: LD_VAR 0 3
47650: PPUSH
47651: CALL 49218 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
47655: LD_VAR 0 1
47659: PUSH
47660: LD_INT 255
47662: EQUAL
47663: PUSH
47664: LD_VAR 0 2
47668: PPUSH
47669: CALL_OW 264
47673: PUSH
47674: LD_INT 14
47676: PUSH
47677: LD_INT 53
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: IN
47684: AND
47685: PUSH
47686: LD_VAR 0 4
47690: PPUSH
47691: LD_VAR 0 5
47695: PPUSH
47696: CALL_OW 488
47700: AND
47701: IFFALSE 47725
// CutTreeXYR ( unit , x , y , 12 ) ;
47703: LD_VAR 0 2
47707: PPUSH
47708: LD_VAR 0 4
47712: PPUSH
47713: LD_VAR 0 5
47717: PPUSH
47718: LD_INT 12
47720: PPUSH
47721: CALL 47788 0 4
// if cmd = 256 then
47725: LD_VAR 0 1
47729: PUSH
47730: LD_INT 256
47732: EQUAL
47733: IFFALSE 47754
// SetFactoryWaypoint ( unit , x , y ) ;
47735: LD_VAR 0 2
47739: PPUSH
47740: LD_VAR 0 4
47744: PPUSH
47745: LD_VAR 0 5
47749: PPUSH
47750: CALL 45735 0 3
// if cmd = 257 then
47754: LD_VAR 0 1
47758: PUSH
47759: LD_INT 257
47761: EQUAL
47762: IFFALSE 47783
// SetWarehouseGatheringPoint ( unit , x , y ) ;
47764: LD_VAR 0 2
47768: PPUSH
47769: LD_VAR 0 4
47773: PPUSH
47774: LD_VAR 0 5
47778: PPUSH
47779: CALL 46097 0 3
// end ;
47783: LD_VAR 0 6
47787: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
47788: LD_INT 0
47790: PPUSH
47791: PPUSH
47792: PPUSH
47793: PPUSH
47794: PPUSH
47795: PPUSH
47796: PPUSH
47797: PPUSH
47798: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
47799: LD_VAR 0 1
47803: NOT
47804: PUSH
47805: LD_VAR 0 2
47809: PPUSH
47810: LD_VAR 0 3
47814: PPUSH
47815: CALL_OW 488
47819: NOT
47820: OR
47821: PUSH
47822: LD_VAR 0 4
47826: NOT
47827: OR
47828: IFFALSE 47832
// exit ;
47830: GO 48172
// list := [ ] ;
47832: LD_ADDR_VAR 0 13
47836: PUSH
47837: EMPTY
47838: ST_TO_ADDR
// if x - r < 0 then
47839: LD_VAR 0 2
47843: PUSH
47844: LD_VAR 0 4
47848: MINUS
47849: PUSH
47850: LD_INT 0
47852: LESS
47853: IFFALSE 47865
// min_x := 0 else
47855: LD_ADDR_VAR 0 7
47859: PUSH
47860: LD_INT 0
47862: ST_TO_ADDR
47863: GO 47881
// min_x := x - r ;
47865: LD_ADDR_VAR 0 7
47869: PUSH
47870: LD_VAR 0 2
47874: PUSH
47875: LD_VAR 0 4
47879: MINUS
47880: ST_TO_ADDR
// if y - r < 0 then
47881: LD_VAR 0 3
47885: PUSH
47886: LD_VAR 0 4
47890: MINUS
47891: PUSH
47892: LD_INT 0
47894: LESS
47895: IFFALSE 47907
// min_y := 0 else
47897: LD_ADDR_VAR 0 8
47901: PUSH
47902: LD_INT 0
47904: ST_TO_ADDR
47905: GO 47923
// min_y := y - r ;
47907: LD_ADDR_VAR 0 8
47911: PUSH
47912: LD_VAR 0 3
47916: PUSH
47917: LD_VAR 0 4
47921: MINUS
47922: ST_TO_ADDR
// max_x := x + r ;
47923: LD_ADDR_VAR 0 9
47927: PUSH
47928: LD_VAR 0 2
47932: PUSH
47933: LD_VAR 0 4
47937: PLUS
47938: ST_TO_ADDR
// max_y := y + r ;
47939: LD_ADDR_VAR 0 10
47943: PUSH
47944: LD_VAR 0 3
47948: PUSH
47949: LD_VAR 0 4
47953: PLUS
47954: ST_TO_ADDR
// for _x = min_x to max_x do
47955: LD_ADDR_VAR 0 11
47959: PUSH
47960: DOUBLE
47961: LD_VAR 0 7
47965: DEC
47966: ST_TO_ADDR
47967: LD_VAR 0 9
47971: PUSH
47972: FOR_TO
47973: IFFALSE 48090
// for _y = min_y to max_y do
47975: LD_ADDR_VAR 0 12
47979: PUSH
47980: DOUBLE
47981: LD_VAR 0 8
47985: DEC
47986: ST_TO_ADDR
47987: LD_VAR 0 10
47991: PUSH
47992: FOR_TO
47993: IFFALSE 48086
// begin if not ValidHex ( _x , _y ) then
47995: LD_VAR 0 11
47999: PPUSH
48000: LD_VAR 0 12
48004: PPUSH
48005: CALL_OW 488
48009: NOT
48010: IFFALSE 48014
// continue ;
48012: GO 47992
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
48014: LD_VAR 0 11
48018: PPUSH
48019: LD_VAR 0 12
48023: PPUSH
48024: CALL_OW 351
48028: PUSH
48029: LD_VAR 0 11
48033: PPUSH
48034: LD_VAR 0 12
48038: PPUSH
48039: CALL_OW 554
48043: AND
48044: IFFALSE 48084
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
48046: LD_ADDR_VAR 0 13
48050: PUSH
48051: LD_VAR 0 13
48055: PPUSH
48056: LD_VAR 0 13
48060: PUSH
48061: LD_INT 1
48063: PLUS
48064: PPUSH
48065: LD_VAR 0 11
48069: PUSH
48070: LD_VAR 0 12
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PPUSH
48079: CALL_OW 2
48083: ST_TO_ADDR
// end ;
48084: GO 47992
48086: POP
48087: POP
48088: GO 47972
48090: POP
48091: POP
// if not list then
48092: LD_VAR 0 13
48096: NOT
48097: IFFALSE 48101
// exit ;
48099: GO 48172
// for i in list do
48101: LD_ADDR_VAR 0 6
48105: PUSH
48106: LD_VAR 0 13
48110: PUSH
48111: FOR_IN
48112: IFFALSE 48170
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
48114: LD_VAR 0 1
48118: PPUSH
48119: LD_STRING M
48121: PUSH
48122: LD_VAR 0 6
48126: PUSH
48127: LD_INT 1
48129: ARRAY
48130: PUSH
48131: LD_VAR 0 6
48135: PUSH
48136: LD_INT 2
48138: ARRAY
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 0
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: LD_INT 0
48151: PUSH
48152: EMPTY
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: PUSH
48161: EMPTY
48162: LIST
48163: PPUSH
48164: CALL_OW 447
48168: GO 48111
48170: POP
48171: POP
// end ;
48172: LD_VAR 0 5
48176: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
48177: LD_EXP 144
48181: NOT
48182: IFFALSE 48232
48184: GO 48186
48186: DISABLE
// begin initHack := true ;
48187: LD_ADDR_EXP 144
48191: PUSH
48192: LD_INT 1
48194: ST_TO_ADDR
// hackTanks := [ ] ;
48195: LD_ADDR_EXP 145
48199: PUSH
48200: EMPTY
48201: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
48202: LD_ADDR_EXP 146
48206: PUSH
48207: EMPTY
48208: ST_TO_ADDR
// hackLimit := 3 ;
48209: LD_ADDR_EXP 147
48213: PUSH
48214: LD_INT 3
48216: ST_TO_ADDR
// hackDist := 12 ;
48217: LD_ADDR_EXP 148
48221: PUSH
48222: LD_INT 12
48224: ST_TO_ADDR
// hackCounter := [ ] ;
48225: LD_ADDR_EXP 149
48229: PUSH
48230: EMPTY
48231: ST_TO_ADDR
// end ;
48232: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
48233: LD_EXP 144
48237: PUSH
48238: LD_INT 34
48240: PUSH
48241: LD_INT 99
48243: PUSH
48244: EMPTY
48245: LIST
48246: LIST
48247: PPUSH
48248: CALL_OW 69
48252: AND
48253: IFFALSE 48506
48255: GO 48257
48257: DISABLE
48258: LD_INT 0
48260: PPUSH
48261: PPUSH
// begin enable ;
48262: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
48263: LD_ADDR_VAR 0 1
48267: PUSH
48268: LD_INT 34
48270: PUSH
48271: LD_INT 99
48273: PUSH
48274: EMPTY
48275: LIST
48276: LIST
48277: PPUSH
48278: CALL_OW 69
48282: PUSH
48283: FOR_IN
48284: IFFALSE 48504
// begin if not i in hackTanks then
48286: LD_VAR 0 1
48290: PUSH
48291: LD_EXP 145
48295: IN
48296: NOT
48297: IFFALSE 48380
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
48299: LD_ADDR_EXP 145
48303: PUSH
48304: LD_EXP 145
48308: PPUSH
48309: LD_EXP 145
48313: PUSH
48314: LD_INT 1
48316: PLUS
48317: PPUSH
48318: LD_VAR 0 1
48322: PPUSH
48323: CALL_OW 1
48327: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
48328: LD_ADDR_EXP 146
48332: PUSH
48333: LD_EXP 146
48337: PPUSH
48338: LD_EXP 146
48342: PUSH
48343: LD_INT 1
48345: PLUS
48346: PPUSH
48347: EMPTY
48348: PPUSH
48349: CALL_OW 1
48353: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
48354: LD_ADDR_EXP 149
48358: PUSH
48359: LD_EXP 149
48363: PPUSH
48364: LD_EXP 149
48368: PUSH
48369: LD_INT 1
48371: PLUS
48372: PPUSH
48373: EMPTY
48374: PPUSH
48375: CALL_OW 1
48379: ST_TO_ADDR
// end ; if not IsOk ( i ) then
48380: LD_VAR 0 1
48384: PPUSH
48385: CALL_OW 302
48389: NOT
48390: IFFALSE 48403
// begin HackUnlinkAll ( i ) ;
48392: LD_VAR 0 1
48396: PPUSH
48397: CALL 48509 0 1
// continue ;
48401: GO 48283
// end ; HackCheckCapturedStatus ( i ) ;
48403: LD_VAR 0 1
48407: PPUSH
48408: CALL 48952 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
48412: LD_ADDR_VAR 0 2
48416: PUSH
48417: LD_INT 81
48419: PUSH
48420: LD_VAR 0 1
48424: PPUSH
48425: CALL_OW 255
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 33
48436: PUSH
48437: LD_INT 3
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 91
48446: PUSH
48447: LD_VAR 0 1
48451: PUSH
48452: LD_EXP 148
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: LIST
48461: PUSH
48462: LD_INT 50
48464: PUSH
48465: EMPTY
48466: LIST
48467: PUSH
48468: EMPTY
48469: LIST
48470: LIST
48471: LIST
48472: LIST
48473: PPUSH
48474: CALL_OW 69
48478: ST_TO_ADDR
// if not tmp then
48479: LD_VAR 0 2
48483: NOT
48484: IFFALSE 48488
// continue ;
48486: GO 48283
// HackLink ( i , tmp ) ;
48488: LD_VAR 0 1
48492: PPUSH
48493: LD_VAR 0 2
48497: PPUSH
48498: CALL 48645 0 2
// end ;
48502: GO 48283
48504: POP
48505: POP
// end ;
48506: PPOPN 2
48508: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
48509: LD_INT 0
48511: PPUSH
48512: PPUSH
48513: PPUSH
// if not hack in hackTanks then
48514: LD_VAR 0 1
48518: PUSH
48519: LD_EXP 145
48523: IN
48524: NOT
48525: IFFALSE 48529
// exit ;
48527: GO 48640
// index := GetElementIndex ( hackTanks , hack ) ;
48529: LD_ADDR_VAR 0 4
48533: PUSH
48534: LD_EXP 145
48538: PPUSH
48539: LD_VAR 0 1
48543: PPUSH
48544: CALL 56082 0 2
48548: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
48549: LD_EXP 146
48553: PUSH
48554: LD_VAR 0 4
48558: ARRAY
48559: IFFALSE 48640
// begin for i in hackTanksCaptured [ index ] do
48561: LD_ADDR_VAR 0 3
48565: PUSH
48566: LD_EXP 146
48570: PUSH
48571: LD_VAR 0 4
48575: ARRAY
48576: PUSH
48577: FOR_IN
48578: IFFALSE 48604
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
48580: LD_VAR 0 3
48584: PUSH
48585: LD_INT 1
48587: ARRAY
48588: PPUSH
48589: LD_VAR 0 3
48593: PUSH
48594: LD_INT 2
48596: ARRAY
48597: PPUSH
48598: CALL_OW 235
48602: GO 48577
48604: POP
48605: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
48606: LD_ADDR_EXP 146
48610: PUSH
48611: LD_EXP 146
48615: PPUSH
48616: LD_VAR 0 4
48620: PPUSH
48621: EMPTY
48622: PPUSH
48623: CALL_OW 1
48627: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
48628: LD_VAR 0 1
48632: PPUSH
48633: LD_INT 0
48635: PPUSH
48636: CALL_OW 505
// end ; end ;
48640: LD_VAR 0 2
48644: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
48645: LD_INT 0
48647: PPUSH
48648: PPUSH
48649: PPUSH
// if not hack in hackTanks or not vehicles then
48650: LD_VAR 0 1
48654: PUSH
48655: LD_EXP 145
48659: IN
48660: NOT
48661: PUSH
48662: LD_VAR 0 2
48666: NOT
48667: OR
48668: IFFALSE 48672
// exit ;
48670: GO 48947
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
48672: LD_ADDR_VAR 0 2
48676: PUSH
48677: LD_VAR 0 1
48681: PPUSH
48682: LD_VAR 0 2
48686: PPUSH
48687: LD_INT 1
48689: PPUSH
48690: LD_INT 1
48692: PPUSH
48693: CALL 56732 0 4
48697: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
48698: LD_ADDR_VAR 0 5
48702: PUSH
48703: LD_EXP 145
48707: PPUSH
48708: LD_VAR 0 1
48712: PPUSH
48713: CALL 56082 0 2
48717: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
48718: LD_EXP 146
48722: PUSH
48723: LD_VAR 0 5
48727: ARRAY
48728: PUSH
48729: LD_EXP 147
48733: LESS
48734: IFFALSE 48923
// begin for i := 1 to vehicles do
48736: LD_ADDR_VAR 0 4
48740: PUSH
48741: DOUBLE
48742: LD_INT 1
48744: DEC
48745: ST_TO_ADDR
48746: LD_VAR 0 2
48750: PUSH
48751: FOR_TO
48752: IFFALSE 48921
// begin if hackTanksCaptured [ index ] = hackLimit then
48754: LD_EXP 146
48758: PUSH
48759: LD_VAR 0 5
48763: ARRAY
48764: PUSH
48765: LD_EXP 147
48769: EQUAL
48770: IFFALSE 48774
// break ;
48772: GO 48921
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
48774: LD_ADDR_EXP 149
48778: PUSH
48779: LD_EXP 149
48783: PPUSH
48784: LD_VAR 0 5
48788: PPUSH
48789: LD_EXP 149
48793: PUSH
48794: LD_VAR 0 5
48798: ARRAY
48799: PUSH
48800: LD_INT 1
48802: PLUS
48803: PPUSH
48804: CALL_OW 1
48808: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
48809: LD_ADDR_EXP 146
48813: PUSH
48814: LD_EXP 146
48818: PPUSH
48819: LD_VAR 0 5
48823: PUSH
48824: LD_EXP 146
48828: PUSH
48829: LD_VAR 0 5
48833: ARRAY
48834: PUSH
48835: LD_INT 1
48837: PLUS
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PPUSH
48843: LD_VAR 0 2
48847: PUSH
48848: LD_VAR 0 4
48852: ARRAY
48853: PUSH
48854: LD_VAR 0 2
48858: PUSH
48859: LD_VAR 0 4
48863: ARRAY
48864: PPUSH
48865: CALL_OW 255
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PPUSH
48874: CALL 56297 0 3
48878: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
48879: LD_VAR 0 2
48883: PUSH
48884: LD_VAR 0 4
48888: ARRAY
48889: PPUSH
48890: LD_VAR 0 1
48894: PPUSH
48895: CALL_OW 255
48899: PPUSH
48900: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
48904: LD_VAR 0 2
48908: PUSH
48909: LD_VAR 0 4
48913: ARRAY
48914: PPUSH
48915: CALL_OW 141
// end ;
48919: GO 48751
48921: POP
48922: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
48923: LD_VAR 0 1
48927: PPUSH
48928: LD_EXP 146
48932: PUSH
48933: LD_VAR 0 5
48937: ARRAY
48938: PUSH
48939: LD_INT 0
48941: PLUS
48942: PPUSH
48943: CALL_OW 505
// end ;
48947: LD_VAR 0 3
48951: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
48952: LD_INT 0
48954: PPUSH
48955: PPUSH
48956: PPUSH
48957: PPUSH
// if not hack in hackTanks then
48958: LD_VAR 0 1
48962: PUSH
48963: LD_EXP 145
48967: IN
48968: NOT
48969: IFFALSE 48973
// exit ;
48971: GO 49213
// index := GetElementIndex ( hackTanks , hack ) ;
48973: LD_ADDR_VAR 0 4
48977: PUSH
48978: LD_EXP 145
48982: PPUSH
48983: LD_VAR 0 1
48987: PPUSH
48988: CALL 56082 0 2
48992: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
48993: LD_ADDR_VAR 0 3
48997: PUSH
48998: DOUBLE
48999: LD_EXP 146
49003: PUSH
49004: LD_VAR 0 4
49008: ARRAY
49009: INC
49010: ST_TO_ADDR
49011: LD_INT 1
49013: PUSH
49014: FOR_DOWNTO
49015: IFFALSE 49187
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
49017: LD_ADDR_VAR 0 5
49021: PUSH
49022: LD_EXP 146
49026: PUSH
49027: LD_VAR 0 4
49031: ARRAY
49032: PUSH
49033: LD_VAR 0 3
49037: ARRAY
49038: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
49039: LD_VAR 0 5
49043: PUSH
49044: LD_INT 1
49046: ARRAY
49047: PPUSH
49048: CALL_OW 302
49052: NOT
49053: PUSH
49054: LD_VAR 0 5
49058: PUSH
49059: LD_INT 1
49061: ARRAY
49062: PPUSH
49063: CALL_OW 255
49067: PUSH
49068: LD_VAR 0 1
49072: PPUSH
49073: CALL_OW 255
49077: NONEQUAL
49078: OR
49079: IFFALSE 49185
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
49081: LD_VAR 0 5
49085: PUSH
49086: LD_INT 1
49088: ARRAY
49089: PPUSH
49090: CALL_OW 305
49094: PUSH
49095: LD_VAR 0 5
49099: PUSH
49100: LD_INT 1
49102: ARRAY
49103: PPUSH
49104: CALL_OW 255
49108: PUSH
49109: LD_VAR 0 1
49113: PPUSH
49114: CALL_OW 255
49118: EQUAL
49119: AND
49120: IFFALSE 49144
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
49122: LD_VAR 0 5
49126: PUSH
49127: LD_INT 1
49129: ARRAY
49130: PPUSH
49131: LD_VAR 0 5
49135: PUSH
49136: LD_INT 2
49138: ARRAY
49139: PPUSH
49140: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
49144: LD_ADDR_EXP 146
49148: PUSH
49149: LD_EXP 146
49153: PPUSH
49154: LD_VAR 0 4
49158: PPUSH
49159: LD_EXP 146
49163: PUSH
49164: LD_VAR 0 4
49168: ARRAY
49169: PPUSH
49170: LD_VAR 0 3
49174: PPUSH
49175: CALL_OW 3
49179: PPUSH
49180: CALL_OW 1
49184: ST_TO_ADDR
// end ; end ;
49185: GO 49014
49187: POP
49188: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
49189: LD_VAR 0 1
49193: PPUSH
49194: LD_EXP 146
49198: PUSH
49199: LD_VAR 0 4
49203: ARRAY
49204: PUSH
49205: LD_INT 0
49207: PLUS
49208: PPUSH
49209: CALL_OW 505
// end ;
49213: LD_VAR 0 2
49217: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
49218: LD_INT 0
49220: PPUSH
49221: PPUSH
49222: PPUSH
49223: PPUSH
// if not hack in hackTanks then
49224: LD_VAR 0 1
49228: PUSH
49229: LD_EXP 145
49233: IN
49234: NOT
49235: IFFALSE 49239
// exit ;
49237: GO 49324
// index := GetElementIndex ( hackTanks , hack ) ;
49239: LD_ADDR_VAR 0 5
49243: PUSH
49244: LD_EXP 145
49248: PPUSH
49249: LD_VAR 0 1
49253: PPUSH
49254: CALL 56082 0 2
49258: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
49259: LD_ADDR_VAR 0 4
49263: PUSH
49264: DOUBLE
49265: LD_INT 1
49267: DEC
49268: ST_TO_ADDR
49269: LD_EXP 146
49273: PUSH
49274: LD_VAR 0 5
49278: ARRAY
49279: PUSH
49280: FOR_TO
49281: IFFALSE 49322
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
49283: LD_EXP 146
49287: PUSH
49288: LD_VAR 0 5
49292: ARRAY
49293: PUSH
49294: LD_VAR 0 4
49298: ARRAY
49299: PUSH
49300: LD_INT 1
49302: ARRAY
49303: PUSH
49304: LD_VAR 0 2
49308: EQUAL
49309: IFFALSE 49320
// KillUnit ( vehicle ) ;
49311: LD_VAR 0 2
49315: PPUSH
49316: CALL_OW 66
49320: GO 49280
49322: POP
49323: POP
// end ;
49324: LD_VAR 0 3
49328: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
49329: LD_EXP 150
49333: NOT
49334: IFFALSE 49369
49336: GO 49338
49338: DISABLE
// begin initMiner := true ;
49339: LD_ADDR_EXP 150
49343: PUSH
49344: LD_INT 1
49346: ST_TO_ADDR
// minersList := [ ] ;
49347: LD_ADDR_EXP 151
49351: PUSH
49352: EMPTY
49353: ST_TO_ADDR
// minerMinesList := [ ] ;
49354: LD_ADDR_EXP 152
49358: PUSH
49359: EMPTY
49360: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
49361: LD_ADDR_EXP 153
49365: PUSH
49366: LD_INT 5
49368: ST_TO_ADDR
// end ;
49369: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
49370: LD_EXP 150
49374: PUSH
49375: LD_INT 34
49377: PUSH
49378: LD_INT 81
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PPUSH
49385: CALL_OW 69
49389: AND
49390: IFFALSE 49851
49392: GO 49394
49394: DISABLE
49395: LD_INT 0
49397: PPUSH
49398: PPUSH
49399: PPUSH
49400: PPUSH
// begin enable ;
49401: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
49402: LD_ADDR_VAR 0 1
49406: PUSH
49407: LD_INT 34
49409: PUSH
49410: LD_INT 81
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PPUSH
49417: CALL_OW 69
49421: PUSH
49422: FOR_IN
49423: IFFALSE 49495
// begin if not i in minersList then
49425: LD_VAR 0 1
49429: PUSH
49430: LD_EXP 151
49434: IN
49435: NOT
49436: IFFALSE 49493
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
49438: LD_ADDR_EXP 151
49442: PUSH
49443: LD_EXP 151
49447: PPUSH
49448: LD_EXP 151
49452: PUSH
49453: LD_INT 1
49455: PLUS
49456: PPUSH
49457: LD_VAR 0 1
49461: PPUSH
49462: CALL_OW 1
49466: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
49467: LD_ADDR_EXP 152
49471: PUSH
49472: LD_EXP 152
49476: PPUSH
49477: LD_EXP 152
49481: PUSH
49482: LD_INT 1
49484: PLUS
49485: PPUSH
49486: EMPTY
49487: PPUSH
49488: CALL_OW 1
49492: ST_TO_ADDR
// end end ;
49493: GO 49422
49495: POP
49496: POP
// for i := minerMinesList downto 1 do
49497: LD_ADDR_VAR 0 1
49501: PUSH
49502: DOUBLE
49503: LD_EXP 152
49507: INC
49508: ST_TO_ADDR
49509: LD_INT 1
49511: PUSH
49512: FOR_DOWNTO
49513: IFFALSE 49849
// begin if IsLive ( minersList [ i ] ) then
49515: LD_EXP 151
49519: PUSH
49520: LD_VAR 0 1
49524: ARRAY
49525: PPUSH
49526: CALL_OW 300
49530: IFFALSE 49558
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
49532: LD_EXP 151
49536: PUSH
49537: LD_VAR 0 1
49541: ARRAY
49542: PPUSH
49543: LD_EXP 152
49547: PUSH
49548: LD_VAR 0 1
49552: ARRAY
49553: PPUSH
49554: CALL_OW 505
// if not minerMinesList [ i ] then
49558: LD_EXP 152
49562: PUSH
49563: LD_VAR 0 1
49567: ARRAY
49568: NOT
49569: IFFALSE 49573
// continue ;
49571: GO 49512
// for j := minerMinesList [ i ] downto 1 do
49573: LD_ADDR_VAR 0 2
49577: PUSH
49578: DOUBLE
49579: LD_EXP 152
49583: PUSH
49584: LD_VAR 0 1
49588: ARRAY
49589: INC
49590: ST_TO_ADDR
49591: LD_INT 1
49593: PUSH
49594: FOR_DOWNTO
49595: IFFALSE 49845
// begin side := GetSide ( minersList [ i ] ) ;
49597: LD_ADDR_VAR 0 3
49601: PUSH
49602: LD_EXP 151
49606: PUSH
49607: LD_VAR 0 1
49611: ARRAY
49612: PPUSH
49613: CALL_OW 255
49617: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
49618: LD_ADDR_VAR 0 4
49622: PUSH
49623: LD_EXP 152
49627: PUSH
49628: LD_VAR 0 1
49632: ARRAY
49633: PUSH
49634: LD_VAR 0 2
49638: ARRAY
49639: PUSH
49640: LD_INT 1
49642: ARRAY
49643: PPUSH
49644: LD_EXP 152
49648: PUSH
49649: LD_VAR 0 1
49653: ARRAY
49654: PUSH
49655: LD_VAR 0 2
49659: ARRAY
49660: PUSH
49661: LD_INT 2
49663: ARRAY
49664: PPUSH
49665: CALL_OW 428
49669: ST_TO_ADDR
// if not tmp then
49670: LD_VAR 0 4
49674: NOT
49675: IFFALSE 49679
// continue ;
49677: GO 49594
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
49679: LD_VAR 0 4
49683: PUSH
49684: LD_INT 81
49686: PUSH
49687: LD_VAR 0 3
49691: PUSH
49692: EMPTY
49693: LIST
49694: LIST
49695: PPUSH
49696: CALL_OW 69
49700: IN
49701: PUSH
49702: LD_EXP 152
49706: PUSH
49707: LD_VAR 0 1
49711: ARRAY
49712: PUSH
49713: LD_VAR 0 2
49717: ARRAY
49718: PUSH
49719: LD_INT 1
49721: ARRAY
49722: PPUSH
49723: LD_EXP 152
49727: PUSH
49728: LD_VAR 0 1
49732: ARRAY
49733: PUSH
49734: LD_VAR 0 2
49738: ARRAY
49739: PUSH
49740: LD_INT 2
49742: ARRAY
49743: PPUSH
49744: CALL_OW 458
49748: AND
49749: IFFALSE 49843
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
49751: LD_EXP 152
49755: PUSH
49756: LD_VAR 0 1
49760: ARRAY
49761: PUSH
49762: LD_VAR 0 2
49766: ARRAY
49767: PUSH
49768: LD_INT 1
49770: ARRAY
49771: PPUSH
49772: LD_EXP 152
49776: PUSH
49777: LD_VAR 0 1
49781: ARRAY
49782: PUSH
49783: LD_VAR 0 2
49787: ARRAY
49788: PUSH
49789: LD_INT 2
49791: ARRAY
49792: PPUSH
49793: LD_VAR 0 3
49797: PPUSH
49798: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
49802: LD_ADDR_EXP 152
49806: PUSH
49807: LD_EXP 152
49811: PPUSH
49812: LD_VAR 0 1
49816: PPUSH
49817: LD_EXP 152
49821: PUSH
49822: LD_VAR 0 1
49826: ARRAY
49827: PPUSH
49828: LD_VAR 0 2
49832: PPUSH
49833: CALL_OW 3
49837: PPUSH
49838: CALL_OW 1
49842: ST_TO_ADDR
// end ; end ;
49843: GO 49594
49845: POP
49846: POP
// end ;
49847: GO 49512
49849: POP
49850: POP
// end ;
49851: PPOPN 4
49853: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
49854: LD_INT 0
49856: PPUSH
49857: PPUSH
// result := false ;
49858: LD_ADDR_VAR 0 4
49862: PUSH
49863: LD_INT 0
49865: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
49866: LD_VAR 0 1
49870: PPUSH
49871: CALL_OW 264
49875: PUSH
49876: LD_INT 81
49878: EQUAL
49879: NOT
49880: IFFALSE 49884
// exit ;
49882: GO 50124
// index := GetElementIndex ( minersList , unit ) ;
49884: LD_ADDR_VAR 0 5
49888: PUSH
49889: LD_EXP 151
49893: PPUSH
49894: LD_VAR 0 1
49898: PPUSH
49899: CALL 56082 0 2
49903: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
49904: LD_EXP 152
49908: PUSH
49909: LD_VAR 0 5
49913: ARRAY
49914: PUSH
49915: LD_EXP 153
49919: GREATEREQUAL
49920: IFFALSE 49924
// exit ;
49922: GO 50124
// ComMoveXY ( unit , x , y ) ;
49924: LD_VAR 0 1
49928: PPUSH
49929: LD_VAR 0 2
49933: PPUSH
49934: LD_VAR 0 3
49938: PPUSH
49939: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
49943: LD_INT 35
49945: PPUSH
49946: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
49950: LD_VAR 0 1
49954: PPUSH
49955: LD_VAR 0 2
49959: PPUSH
49960: LD_VAR 0 3
49964: PPUSH
49965: CALL 87466 0 3
49969: NOT
49970: PUSH
49971: LD_VAR 0 1
49975: PPUSH
49976: CALL_OW 314
49980: AND
49981: IFFALSE 49985
// exit ;
49983: GO 50124
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
49985: LD_VAR 0 2
49989: PPUSH
49990: LD_VAR 0 3
49994: PPUSH
49995: CALL_OW 428
49999: PUSH
50000: LD_VAR 0 1
50004: EQUAL
50005: PUSH
50006: LD_VAR 0 1
50010: PPUSH
50011: CALL_OW 314
50015: NOT
50016: AND
50017: IFFALSE 49943
// PlaySoundXY ( x , y , PlantMine ) ;
50019: LD_VAR 0 2
50023: PPUSH
50024: LD_VAR 0 3
50028: PPUSH
50029: LD_STRING PlantMine
50031: PPUSH
50032: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
50036: LD_VAR 0 2
50040: PPUSH
50041: LD_VAR 0 3
50045: PPUSH
50046: LD_VAR 0 1
50050: PPUSH
50051: CALL_OW 255
50055: PPUSH
50056: LD_INT 0
50058: PPUSH
50059: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
50063: LD_ADDR_EXP 152
50067: PUSH
50068: LD_EXP 152
50072: PPUSH
50073: LD_VAR 0 5
50077: PUSH
50078: LD_EXP 152
50082: PUSH
50083: LD_VAR 0 5
50087: ARRAY
50088: PUSH
50089: LD_INT 1
50091: PLUS
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PPUSH
50097: LD_VAR 0 2
50101: PUSH
50102: LD_VAR 0 3
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PPUSH
50111: CALL 56297 0 3
50115: ST_TO_ADDR
// result := true ;
50116: LD_ADDR_VAR 0 4
50120: PUSH
50121: LD_INT 1
50123: ST_TO_ADDR
// end ;
50124: LD_VAR 0 4
50128: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
50129: LD_INT 0
50131: PPUSH
50132: PPUSH
50133: PPUSH
// if not unit in minersList then
50134: LD_VAR 0 1
50138: PUSH
50139: LD_EXP 151
50143: IN
50144: NOT
50145: IFFALSE 50149
// exit ;
50147: GO 50541
// index := GetElementIndex ( minersList , unit ) ;
50149: LD_ADDR_VAR 0 6
50153: PUSH
50154: LD_EXP 151
50158: PPUSH
50159: LD_VAR 0 1
50163: PPUSH
50164: CALL 56082 0 2
50168: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
50169: LD_ADDR_VAR 0 5
50173: PUSH
50174: DOUBLE
50175: LD_EXP 152
50179: PUSH
50180: LD_VAR 0 6
50184: ARRAY
50185: INC
50186: ST_TO_ADDR
50187: LD_INT 1
50189: PUSH
50190: FOR_DOWNTO
50191: IFFALSE 50352
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
50193: LD_EXP 152
50197: PUSH
50198: LD_VAR 0 6
50202: ARRAY
50203: PUSH
50204: LD_VAR 0 5
50208: ARRAY
50209: PUSH
50210: LD_INT 1
50212: ARRAY
50213: PUSH
50214: LD_VAR 0 2
50218: EQUAL
50219: PUSH
50220: LD_EXP 152
50224: PUSH
50225: LD_VAR 0 6
50229: ARRAY
50230: PUSH
50231: LD_VAR 0 5
50235: ARRAY
50236: PUSH
50237: LD_INT 2
50239: ARRAY
50240: PUSH
50241: LD_VAR 0 3
50245: EQUAL
50246: AND
50247: IFFALSE 50350
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
50249: LD_EXP 152
50253: PUSH
50254: LD_VAR 0 6
50258: ARRAY
50259: PUSH
50260: LD_VAR 0 5
50264: ARRAY
50265: PUSH
50266: LD_INT 1
50268: ARRAY
50269: PPUSH
50270: LD_EXP 152
50274: PUSH
50275: LD_VAR 0 6
50279: ARRAY
50280: PUSH
50281: LD_VAR 0 5
50285: ARRAY
50286: PUSH
50287: LD_INT 2
50289: ARRAY
50290: PPUSH
50291: LD_VAR 0 1
50295: PPUSH
50296: CALL_OW 255
50300: PPUSH
50301: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
50305: LD_ADDR_EXP 152
50309: PUSH
50310: LD_EXP 152
50314: PPUSH
50315: LD_VAR 0 6
50319: PPUSH
50320: LD_EXP 152
50324: PUSH
50325: LD_VAR 0 6
50329: ARRAY
50330: PPUSH
50331: LD_VAR 0 5
50335: PPUSH
50336: CALL_OW 3
50340: PPUSH
50341: CALL_OW 1
50345: ST_TO_ADDR
// exit ;
50346: POP
50347: POP
50348: GO 50541
// end ; end ;
50350: GO 50190
50352: POP
50353: POP
// for i := minerMinesList [ index ] downto 1 do
50354: LD_ADDR_VAR 0 5
50358: PUSH
50359: DOUBLE
50360: LD_EXP 152
50364: PUSH
50365: LD_VAR 0 6
50369: ARRAY
50370: INC
50371: ST_TO_ADDR
50372: LD_INT 1
50374: PUSH
50375: FOR_DOWNTO
50376: IFFALSE 50539
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
50378: LD_EXP 152
50382: PUSH
50383: LD_VAR 0 6
50387: ARRAY
50388: PUSH
50389: LD_VAR 0 5
50393: ARRAY
50394: PUSH
50395: LD_INT 1
50397: ARRAY
50398: PPUSH
50399: LD_EXP 152
50403: PUSH
50404: LD_VAR 0 6
50408: ARRAY
50409: PUSH
50410: LD_VAR 0 5
50414: ARRAY
50415: PUSH
50416: LD_INT 2
50418: ARRAY
50419: PPUSH
50420: LD_VAR 0 2
50424: PPUSH
50425: LD_VAR 0 3
50429: PPUSH
50430: CALL_OW 298
50434: PUSH
50435: LD_INT 6
50437: LESS
50438: IFFALSE 50537
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
50440: LD_EXP 152
50444: PUSH
50445: LD_VAR 0 6
50449: ARRAY
50450: PUSH
50451: LD_VAR 0 5
50455: ARRAY
50456: PUSH
50457: LD_INT 1
50459: ARRAY
50460: PPUSH
50461: LD_EXP 152
50465: PUSH
50466: LD_VAR 0 6
50470: ARRAY
50471: PUSH
50472: LD_VAR 0 5
50476: ARRAY
50477: PUSH
50478: LD_INT 2
50480: ARRAY
50481: PPUSH
50482: LD_VAR 0 1
50486: PPUSH
50487: CALL_OW 255
50491: PPUSH
50492: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
50496: LD_ADDR_EXP 152
50500: PUSH
50501: LD_EXP 152
50505: PPUSH
50506: LD_VAR 0 6
50510: PPUSH
50511: LD_EXP 152
50515: PUSH
50516: LD_VAR 0 6
50520: ARRAY
50521: PPUSH
50522: LD_VAR 0 5
50526: PPUSH
50527: CALL_OW 3
50531: PPUSH
50532: CALL_OW 1
50536: ST_TO_ADDR
// end ; end ;
50537: GO 50375
50539: POP
50540: POP
// end ;
50541: LD_VAR 0 4
50545: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
50546: LD_INT 0
50548: PPUSH
50549: PPUSH
50550: PPUSH
50551: PPUSH
50552: PPUSH
50553: PPUSH
50554: PPUSH
50555: PPUSH
50556: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
50557: LD_VAR 0 1
50561: PPUSH
50562: CALL_OW 264
50566: PUSH
50567: LD_INT 81
50569: EQUAL
50570: NOT
50571: PUSH
50572: LD_VAR 0 1
50576: PUSH
50577: LD_EXP 151
50581: IN
50582: NOT
50583: OR
50584: IFFALSE 50588
// exit ;
50586: GO 50910
// index := GetElementIndex ( minersList , unit ) ;
50588: LD_ADDR_VAR 0 6
50592: PUSH
50593: LD_EXP 151
50597: PPUSH
50598: LD_VAR 0 1
50602: PPUSH
50603: CALL 56082 0 2
50607: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
50608: LD_ADDR_VAR 0 8
50612: PUSH
50613: LD_EXP 153
50617: PUSH
50618: LD_EXP 152
50622: PUSH
50623: LD_VAR 0 6
50627: ARRAY
50628: MINUS
50629: ST_TO_ADDR
// if not minesFreeAmount then
50630: LD_VAR 0 8
50634: NOT
50635: IFFALSE 50639
// exit ;
50637: GO 50910
// tmp := [ ] ;
50639: LD_ADDR_VAR 0 7
50643: PUSH
50644: EMPTY
50645: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
50646: LD_ADDR_VAR 0 5
50650: PUSH
50651: DOUBLE
50652: LD_INT 1
50654: DEC
50655: ST_TO_ADDR
50656: LD_VAR 0 8
50660: PUSH
50661: FOR_TO
50662: IFFALSE 50857
// begin _d := rand ( 0 , 5 ) ;
50664: LD_ADDR_VAR 0 11
50668: PUSH
50669: LD_INT 0
50671: PPUSH
50672: LD_INT 5
50674: PPUSH
50675: CALL_OW 12
50679: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
50680: LD_ADDR_VAR 0 12
50684: PUSH
50685: LD_INT 2
50687: PPUSH
50688: LD_INT 6
50690: PPUSH
50691: CALL_OW 12
50695: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
50696: LD_ADDR_VAR 0 9
50700: PUSH
50701: LD_VAR 0 2
50705: PPUSH
50706: LD_VAR 0 11
50710: PPUSH
50711: LD_VAR 0 12
50715: PPUSH
50716: CALL_OW 272
50720: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
50721: LD_ADDR_VAR 0 10
50725: PUSH
50726: LD_VAR 0 3
50730: PPUSH
50731: LD_VAR 0 11
50735: PPUSH
50736: LD_VAR 0 12
50740: PPUSH
50741: CALL_OW 273
50745: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
50746: LD_VAR 0 9
50750: PPUSH
50751: LD_VAR 0 10
50755: PPUSH
50756: CALL_OW 488
50760: PUSH
50761: LD_VAR 0 9
50765: PUSH
50766: LD_VAR 0 10
50770: PUSH
50771: EMPTY
50772: LIST
50773: LIST
50774: PUSH
50775: LD_VAR 0 7
50779: IN
50780: NOT
50781: AND
50782: PUSH
50783: LD_VAR 0 9
50787: PPUSH
50788: LD_VAR 0 10
50792: PPUSH
50793: CALL_OW 458
50797: NOT
50798: AND
50799: IFFALSE 50841
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
50801: LD_ADDR_VAR 0 7
50805: PUSH
50806: LD_VAR 0 7
50810: PPUSH
50811: LD_VAR 0 7
50815: PUSH
50816: LD_INT 1
50818: PLUS
50819: PPUSH
50820: LD_VAR 0 9
50824: PUSH
50825: LD_VAR 0 10
50829: PUSH
50830: EMPTY
50831: LIST
50832: LIST
50833: PPUSH
50834: CALL_OW 1
50838: ST_TO_ADDR
50839: GO 50855
// i := i - 1 ;
50841: LD_ADDR_VAR 0 5
50845: PUSH
50846: LD_VAR 0 5
50850: PUSH
50851: LD_INT 1
50853: MINUS
50854: ST_TO_ADDR
// end ;
50855: GO 50661
50857: POP
50858: POP
// for i in tmp do
50859: LD_ADDR_VAR 0 5
50863: PUSH
50864: LD_VAR 0 7
50868: PUSH
50869: FOR_IN
50870: IFFALSE 50908
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
50872: LD_VAR 0 1
50876: PPUSH
50877: LD_VAR 0 5
50881: PUSH
50882: LD_INT 1
50884: ARRAY
50885: PPUSH
50886: LD_VAR 0 5
50890: PUSH
50891: LD_INT 2
50893: ARRAY
50894: PPUSH
50895: CALL 49854 0 3
50899: NOT
50900: IFFALSE 50906
// exit ;
50902: POP
50903: POP
50904: GO 50910
50906: GO 50869
50908: POP
50909: POP
// end ;
50910: LD_VAR 0 4
50914: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
50915: LD_INT 0
50917: PPUSH
50918: PPUSH
50919: PPUSH
50920: PPUSH
50921: PPUSH
50922: PPUSH
50923: PPUSH
// if not GetClass ( unit ) = class_sniper then
50924: LD_VAR 0 1
50928: PPUSH
50929: CALL_OW 257
50933: PUSH
50934: LD_INT 5
50936: EQUAL
50937: NOT
50938: IFFALSE 50942
// exit ;
50940: GO 51330
// dist := 8 ;
50942: LD_ADDR_VAR 0 5
50946: PUSH
50947: LD_INT 8
50949: ST_TO_ADDR
// viewRange := 12 ;
50950: LD_ADDR_VAR 0 7
50954: PUSH
50955: LD_INT 12
50957: ST_TO_ADDR
// side := GetSide ( unit ) ;
50958: LD_ADDR_VAR 0 6
50962: PUSH
50963: LD_VAR 0 1
50967: PPUSH
50968: CALL_OW 255
50972: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
50973: LD_INT 61
50975: PPUSH
50976: LD_VAR 0 6
50980: PPUSH
50981: CALL_OW 321
50985: PUSH
50986: LD_INT 2
50988: EQUAL
50989: IFFALSE 50999
// viewRange := 16 ;
50991: LD_ADDR_VAR 0 7
50995: PUSH
50996: LD_INT 16
50998: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
50999: LD_VAR 0 1
51003: PPUSH
51004: LD_VAR 0 2
51008: PPUSH
51009: LD_VAR 0 3
51013: PPUSH
51014: CALL_OW 297
51018: PUSH
51019: LD_VAR 0 5
51023: GREATER
51024: IFFALSE 51103
// begin ComMoveXY ( unit , x , y ) ;
51026: LD_VAR 0 1
51030: PPUSH
51031: LD_VAR 0 2
51035: PPUSH
51036: LD_VAR 0 3
51040: PPUSH
51041: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
51045: LD_INT 35
51047: PPUSH
51048: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
51052: LD_VAR 0 1
51056: PPUSH
51057: LD_VAR 0 2
51061: PPUSH
51062: LD_VAR 0 3
51066: PPUSH
51067: CALL 87466 0 3
51071: NOT
51072: IFFALSE 51076
// exit ;
51074: GO 51330
// until GetDistUnitXY ( unit , x , y ) < dist ;
51076: LD_VAR 0 1
51080: PPUSH
51081: LD_VAR 0 2
51085: PPUSH
51086: LD_VAR 0 3
51090: PPUSH
51091: CALL_OW 297
51095: PUSH
51096: LD_VAR 0 5
51100: LESS
51101: IFFALSE 51045
// end ; ComTurnXY ( unit , x , y ) ;
51103: LD_VAR 0 1
51107: PPUSH
51108: LD_VAR 0 2
51112: PPUSH
51113: LD_VAR 0 3
51117: PPUSH
51118: CALL_OW 118
// wait ( 5 ) ;
51122: LD_INT 5
51124: PPUSH
51125: CALL_OW 67
// _d := GetDir ( unit ) ;
51129: LD_ADDR_VAR 0 10
51133: PUSH
51134: LD_VAR 0 1
51138: PPUSH
51139: CALL_OW 254
51143: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
51144: LD_ADDR_VAR 0 8
51148: PUSH
51149: LD_VAR 0 1
51153: PPUSH
51154: CALL_OW 250
51158: PPUSH
51159: LD_VAR 0 10
51163: PPUSH
51164: LD_VAR 0 5
51168: PPUSH
51169: CALL_OW 272
51173: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
51174: LD_ADDR_VAR 0 9
51178: PUSH
51179: LD_VAR 0 1
51183: PPUSH
51184: CALL_OW 251
51188: PPUSH
51189: LD_VAR 0 10
51193: PPUSH
51194: LD_VAR 0 5
51198: PPUSH
51199: CALL_OW 273
51203: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51204: LD_VAR 0 8
51208: PPUSH
51209: LD_VAR 0 9
51213: PPUSH
51214: CALL_OW 488
51218: NOT
51219: IFFALSE 51223
// exit ;
51221: GO 51330
// ComAnimCustom ( unit , 1 ) ;
51223: LD_VAR 0 1
51227: PPUSH
51228: LD_INT 1
51230: PPUSH
51231: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
51235: LD_VAR 0 8
51239: PPUSH
51240: LD_VAR 0 9
51244: PPUSH
51245: LD_VAR 0 6
51249: PPUSH
51250: LD_VAR 0 7
51254: PPUSH
51255: CALL_OW 330
// repeat wait ( 1 ) ;
51259: LD_INT 1
51261: PPUSH
51262: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
51266: LD_VAR 0 1
51270: PPUSH
51271: CALL_OW 316
51275: PUSH
51276: LD_VAR 0 1
51280: PPUSH
51281: CALL_OW 314
51285: OR
51286: PUSH
51287: LD_VAR 0 1
51291: PPUSH
51292: CALL_OW 302
51296: NOT
51297: OR
51298: PUSH
51299: LD_VAR 0 1
51303: PPUSH
51304: CALL_OW 301
51308: OR
51309: IFFALSE 51259
// RemoveSeeing ( _x , _y , side ) ;
51311: LD_VAR 0 8
51315: PPUSH
51316: LD_VAR 0 9
51320: PPUSH
51321: LD_VAR 0 6
51325: PPUSH
51326: CALL_OW 331
// end ; end_of_file
51330: LD_VAR 0 4
51334: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
51335: LD_INT 0
51337: PPUSH
51338: PPUSH
// if exist_mode then
51339: LD_VAR 0 2
51343: IFFALSE 51368
// unit := CreateCharacter ( prefix & ident ) else
51345: LD_ADDR_VAR 0 5
51349: PUSH
51350: LD_VAR 0 3
51354: PUSH
51355: LD_VAR 0 1
51359: STR
51360: PPUSH
51361: CALL_OW 34
51365: ST_TO_ADDR
51366: GO 51383
// unit := NewCharacter ( ident ) ;
51368: LD_ADDR_VAR 0 5
51372: PUSH
51373: LD_VAR 0 1
51377: PPUSH
51378: CALL_OW 25
51382: ST_TO_ADDR
// result := unit ;
51383: LD_ADDR_VAR 0 4
51387: PUSH
51388: LD_VAR 0 5
51392: ST_TO_ADDR
// end ;
51393: LD_VAR 0 4
51397: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
51398: LD_INT 0
51400: PPUSH
51401: PPUSH
// if not side or not nation then
51402: LD_VAR 0 1
51406: NOT
51407: PUSH
51408: LD_VAR 0 2
51412: NOT
51413: OR
51414: IFFALSE 51418
// exit ;
51416: GO 52186
// case nation of nation_american :
51418: LD_VAR 0 2
51422: PUSH
51423: LD_INT 1
51425: DOUBLE
51426: EQUAL
51427: IFTRUE 51431
51429: GO 51645
51431: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
51432: LD_ADDR_VAR 0 4
51436: PUSH
51437: LD_INT 35
51439: PUSH
51440: LD_INT 45
51442: PUSH
51443: LD_INT 46
51445: PUSH
51446: LD_INT 47
51448: PUSH
51449: LD_INT 82
51451: PUSH
51452: LD_INT 83
51454: PUSH
51455: LD_INT 84
51457: PUSH
51458: LD_INT 85
51460: PUSH
51461: LD_INT 86
51463: PUSH
51464: LD_INT 1
51466: PUSH
51467: LD_INT 2
51469: PUSH
51470: LD_INT 6
51472: PUSH
51473: LD_INT 15
51475: PUSH
51476: LD_INT 16
51478: PUSH
51479: LD_INT 7
51481: PUSH
51482: LD_INT 12
51484: PUSH
51485: LD_INT 13
51487: PUSH
51488: LD_INT 10
51490: PUSH
51491: LD_INT 14
51493: PUSH
51494: LD_INT 20
51496: PUSH
51497: LD_INT 21
51499: PUSH
51500: LD_INT 22
51502: PUSH
51503: LD_INT 25
51505: PUSH
51506: LD_INT 32
51508: PUSH
51509: LD_INT 27
51511: PUSH
51512: LD_INT 36
51514: PUSH
51515: LD_INT 69
51517: PUSH
51518: LD_INT 39
51520: PUSH
51521: LD_INT 34
51523: PUSH
51524: LD_INT 40
51526: PUSH
51527: LD_INT 48
51529: PUSH
51530: LD_INT 49
51532: PUSH
51533: LD_INT 50
51535: PUSH
51536: LD_INT 51
51538: PUSH
51539: LD_INT 52
51541: PUSH
51542: LD_INT 53
51544: PUSH
51545: LD_INT 54
51547: PUSH
51548: LD_INT 55
51550: PUSH
51551: LD_INT 56
51553: PUSH
51554: LD_INT 57
51556: PUSH
51557: LD_INT 58
51559: PUSH
51560: LD_INT 59
51562: PUSH
51563: LD_INT 60
51565: PUSH
51566: LD_INT 61
51568: PUSH
51569: LD_INT 62
51571: PUSH
51572: LD_INT 80
51574: PUSH
51575: LD_INT 82
51577: PUSH
51578: LD_INT 83
51580: PUSH
51581: LD_INT 84
51583: PUSH
51584: LD_INT 85
51586: PUSH
51587: LD_INT 86
51589: PUSH
51590: EMPTY
51591: LIST
51592: LIST
51593: LIST
51594: LIST
51595: LIST
51596: LIST
51597: LIST
51598: LIST
51599: LIST
51600: LIST
51601: LIST
51602: LIST
51603: LIST
51604: LIST
51605: LIST
51606: LIST
51607: LIST
51608: LIST
51609: LIST
51610: LIST
51611: LIST
51612: LIST
51613: LIST
51614: LIST
51615: LIST
51616: LIST
51617: LIST
51618: LIST
51619: LIST
51620: LIST
51621: LIST
51622: LIST
51623: LIST
51624: LIST
51625: LIST
51626: LIST
51627: LIST
51628: LIST
51629: LIST
51630: LIST
51631: LIST
51632: LIST
51633: LIST
51634: LIST
51635: LIST
51636: LIST
51637: LIST
51638: LIST
51639: LIST
51640: LIST
51641: LIST
51642: ST_TO_ADDR
51643: GO 52110
51645: LD_INT 2
51647: DOUBLE
51648: EQUAL
51649: IFTRUE 51653
51651: GO 51879
51653: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
51654: LD_ADDR_VAR 0 4
51658: PUSH
51659: LD_INT 35
51661: PUSH
51662: LD_INT 45
51664: PUSH
51665: LD_INT 46
51667: PUSH
51668: LD_INT 47
51670: PUSH
51671: LD_INT 82
51673: PUSH
51674: LD_INT 83
51676: PUSH
51677: LD_INT 84
51679: PUSH
51680: LD_INT 85
51682: PUSH
51683: LD_INT 87
51685: PUSH
51686: LD_INT 70
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: LD_INT 11
51694: PUSH
51695: LD_INT 3
51697: PUSH
51698: LD_INT 4
51700: PUSH
51701: LD_INT 5
51703: PUSH
51704: LD_INT 6
51706: PUSH
51707: LD_INT 15
51709: PUSH
51710: LD_INT 18
51712: PUSH
51713: LD_INT 7
51715: PUSH
51716: LD_INT 17
51718: PUSH
51719: LD_INT 8
51721: PUSH
51722: LD_INT 20
51724: PUSH
51725: LD_INT 21
51727: PUSH
51728: LD_INT 22
51730: PUSH
51731: LD_INT 72
51733: PUSH
51734: LD_INT 26
51736: PUSH
51737: LD_INT 69
51739: PUSH
51740: LD_INT 39
51742: PUSH
51743: LD_INT 40
51745: PUSH
51746: LD_INT 41
51748: PUSH
51749: LD_INT 42
51751: PUSH
51752: LD_INT 43
51754: PUSH
51755: LD_INT 48
51757: PUSH
51758: LD_INT 49
51760: PUSH
51761: LD_INT 50
51763: PUSH
51764: LD_INT 51
51766: PUSH
51767: LD_INT 52
51769: PUSH
51770: LD_INT 53
51772: PUSH
51773: LD_INT 54
51775: PUSH
51776: LD_INT 55
51778: PUSH
51779: LD_INT 56
51781: PUSH
51782: LD_INT 60
51784: PUSH
51785: LD_INT 61
51787: PUSH
51788: LD_INT 62
51790: PUSH
51791: LD_INT 66
51793: PUSH
51794: LD_INT 67
51796: PUSH
51797: LD_INT 68
51799: PUSH
51800: LD_INT 81
51802: PUSH
51803: LD_INT 82
51805: PUSH
51806: LD_INT 83
51808: PUSH
51809: LD_INT 84
51811: PUSH
51812: LD_INT 85
51814: PUSH
51815: LD_INT 87
51817: PUSH
51818: LD_INT 88
51820: PUSH
51821: EMPTY
51822: LIST
51823: LIST
51824: LIST
51825: LIST
51826: LIST
51827: LIST
51828: LIST
51829: LIST
51830: LIST
51831: LIST
51832: LIST
51833: LIST
51834: LIST
51835: LIST
51836: LIST
51837: LIST
51838: LIST
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: ST_TO_ADDR
51877: GO 52110
51879: LD_INT 3
51881: DOUBLE
51882: EQUAL
51883: IFTRUE 51887
51885: GO 52109
51887: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
51888: LD_ADDR_VAR 0 4
51892: PUSH
51893: LD_INT 46
51895: PUSH
51896: LD_INT 47
51898: PUSH
51899: LD_INT 1
51901: PUSH
51902: LD_INT 2
51904: PUSH
51905: LD_INT 82
51907: PUSH
51908: LD_INT 83
51910: PUSH
51911: LD_INT 84
51913: PUSH
51914: LD_INT 85
51916: PUSH
51917: LD_INT 86
51919: PUSH
51920: LD_INT 11
51922: PUSH
51923: LD_INT 9
51925: PUSH
51926: LD_INT 20
51928: PUSH
51929: LD_INT 19
51931: PUSH
51932: LD_INT 21
51934: PUSH
51935: LD_INT 24
51937: PUSH
51938: LD_INT 22
51940: PUSH
51941: LD_INT 25
51943: PUSH
51944: LD_INT 28
51946: PUSH
51947: LD_INT 29
51949: PUSH
51950: LD_INT 30
51952: PUSH
51953: LD_INT 31
51955: PUSH
51956: LD_INT 37
51958: PUSH
51959: LD_INT 38
51961: PUSH
51962: LD_INT 32
51964: PUSH
51965: LD_INT 27
51967: PUSH
51968: LD_INT 33
51970: PUSH
51971: LD_INT 69
51973: PUSH
51974: LD_INT 39
51976: PUSH
51977: LD_INT 34
51979: PUSH
51980: LD_INT 40
51982: PUSH
51983: LD_INT 71
51985: PUSH
51986: LD_INT 23
51988: PUSH
51989: LD_INT 44
51991: PUSH
51992: LD_INT 48
51994: PUSH
51995: LD_INT 49
51997: PUSH
51998: LD_INT 50
52000: PUSH
52001: LD_INT 51
52003: PUSH
52004: LD_INT 52
52006: PUSH
52007: LD_INT 53
52009: PUSH
52010: LD_INT 54
52012: PUSH
52013: LD_INT 55
52015: PUSH
52016: LD_INT 56
52018: PUSH
52019: LD_INT 57
52021: PUSH
52022: LD_INT 58
52024: PUSH
52025: LD_INT 59
52027: PUSH
52028: LD_INT 63
52030: PUSH
52031: LD_INT 64
52033: PUSH
52034: LD_INT 65
52036: PUSH
52037: LD_INT 82
52039: PUSH
52040: LD_INT 83
52042: PUSH
52043: LD_INT 84
52045: PUSH
52046: LD_INT 85
52048: PUSH
52049: LD_INT 86
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: LIST
52056: LIST
52057: LIST
52058: LIST
52059: LIST
52060: LIST
52061: LIST
52062: LIST
52063: LIST
52064: LIST
52065: LIST
52066: LIST
52067: LIST
52068: LIST
52069: LIST
52070: LIST
52071: LIST
52072: LIST
52073: LIST
52074: LIST
52075: LIST
52076: LIST
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: LIST
52084: LIST
52085: LIST
52086: LIST
52087: LIST
52088: LIST
52089: LIST
52090: LIST
52091: LIST
52092: LIST
52093: LIST
52094: LIST
52095: LIST
52096: LIST
52097: LIST
52098: LIST
52099: LIST
52100: LIST
52101: LIST
52102: LIST
52103: LIST
52104: LIST
52105: LIST
52106: ST_TO_ADDR
52107: GO 52110
52109: POP
// if state > - 1 and state < 3 then
52110: LD_VAR 0 3
52114: PUSH
52115: LD_INT 1
52117: NEG
52118: GREATER
52119: PUSH
52120: LD_VAR 0 3
52124: PUSH
52125: LD_INT 3
52127: LESS
52128: AND
52129: IFFALSE 52186
// for i in result do
52131: LD_ADDR_VAR 0 5
52135: PUSH
52136: LD_VAR 0 4
52140: PUSH
52141: FOR_IN
52142: IFFALSE 52184
// if GetTech ( i , side ) <> state then
52144: LD_VAR 0 5
52148: PPUSH
52149: LD_VAR 0 1
52153: PPUSH
52154: CALL_OW 321
52158: PUSH
52159: LD_VAR 0 3
52163: NONEQUAL
52164: IFFALSE 52182
// result := result diff i ;
52166: LD_ADDR_VAR 0 4
52170: PUSH
52171: LD_VAR 0 4
52175: PUSH
52176: LD_VAR 0 5
52180: DIFF
52181: ST_TO_ADDR
52182: GO 52141
52184: POP
52185: POP
// end ;
52186: LD_VAR 0 4
52190: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
52191: LD_INT 0
52193: PPUSH
52194: PPUSH
52195: PPUSH
// result := true ;
52196: LD_ADDR_VAR 0 3
52200: PUSH
52201: LD_INT 1
52203: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
52204: LD_ADDR_VAR 0 5
52208: PUSH
52209: LD_VAR 0 2
52213: PPUSH
52214: CALL_OW 480
52218: ST_TO_ADDR
// if not tmp then
52219: LD_VAR 0 5
52223: NOT
52224: IFFALSE 52228
// exit ;
52226: GO 52277
// for i in tmp do
52228: LD_ADDR_VAR 0 4
52232: PUSH
52233: LD_VAR 0 5
52237: PUSH
52238: FOR_IN
52239: IFFALSE 52275
// if GetTech ( i , side ) <> state_researched then
52241: LD_VAR 0 4
52245: PPUSH
52246: LD_VAR 0 1
52250: PPUSH
52251: CALL_OW 321
52255: PUSH
52256: LD_INT 2
52258: NONEQUAL
52259: IFFALSE 52273
// begin result := false ;
52261: LD_ADDR_VAR 0 3
52265: PUSH
52266: LD_INT 0
52268: ST_TO_ADDR
// exit ;
52269: POP
52270: POP
52271: GO 52277
// end ;
52273: GO 52238
52275: POP
52276: POP
// end ;
52277: LD_VAR 0 3
52281: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
52282: LD_INT 0
52284: PPUSH
52285: PPUSH
52286: PPUSH
52287: PPUSH
52288: PPUSH
52289: PPUSH
52290: PPUSH
52291: PPUSH
52292: PPUSH
52293: PPUSH
52294: PPUSH
52295: PPUSH
52296: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
52297: LD_VAR 0 1
52301: NOT
52302: PUSH
52303: LD_VAR 0 1
52307: PPUSH
52308: CALL_OW 257
52312: PUSH
52313: LD_INT 9
52315: NONEQUAL
52316: OR
52317: IFFALSE 52321
// exit ;
52319: GO 52894
// side := GetSide ( unit ) ;
52321: LD_ADDR_VAR 0 9
52325: PUSH
52326: LD_VAR 0 1
52330: PPUSH
52331: CALL_OW 255
52335: ST_TO_ADDR
// tech_space := tech_spacanom ;
52336: LD_ADDR_VAR 0 12
52340: PUSH
52341: LD_INT 29
52343: ST_TO_ADDR
// tech_time := tech_taurad ;
52344: LD_ADDR_VAR 0 13
52348: PUSH
52349: LD_INT 28
52351: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
52352: LD_ADDR_VAR 0 11
52356: PUSH
52357: LD_VAR 0 1
52361: PPUSH
52362: CALL_OW 310
52366: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
52367: LD_VAR 0 11
52371: PPUSH
52372: CALL_OW 247
52376: PUSH
52377: LD_INT 2
52379: EQUAL
52380: IFFALSE 52384
// exit ;
52382: GO 52894
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
52384: LD_ADDR_VAR 0 8
52388: PUSH
52389: LD_INT 81
52391: PUSH
52392: LD_VAR 0 9
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 3
52403: PUSH
52404: LD_INT 21
52406: PUSH
52407: LD_INT 3
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PPUSH
52422: CALL_OW 69
52426: ST_TO_ADDR
// if not tmp then
52427: LD_VAR 0 8
52431: NOT
52432: IFFALSE 52436
// exit ;
52434: GO 52894
// if in_unit then
52436: LD_VAR 0 11
52440: IFFALSE 52464
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
52442: LD_ADDR_VAR 0 10
52446: PUSH
52447: LD_VAR 0 8
52451: PPUSH
52452: LD_VAR 0 11
52456: PPUSH
52457: CALL_OW 74
52461: ST_TO_ADDR
52462: GO 52484
// enemy := NearestUnitToUnit ( tmp , unit ) ;
52464: LD_ADDR_VAR 0 10
52468: PUSH
52469: LD_VAR 0 8
52473: PPUSH
52474: LD_VAR 0 1
52478: PPUSH
52479: CALL_OW 74
52483: ST_TO_ADDR
// if not enemy then
52484: LD_VAR 0 10
52488: NOT
52489: IFFALSE 52493
// exit ;
52491: GO 52894
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
52493: LD_VAR 0 11
52497: PUSH
52498: LD_VAR 0 11
52502: PPUSH
52503: LD_VAR 0 10
52507: PPUSH
52508: CALL_OW 296
52512: PUSH
52513: LD_INT 13
52515: GREATER
52516: AND
52517: PUSH
52518: LD_VAR 0 1
52522: PPUSH
52523: LD_VAR 0 10
52527: PPUSH
52528: CALL_OW 296
52532: PUSH
52533: LD_INT 12
52535: GREATER
52536: OR
52537: IFFALSE 52541
// exit ;
52539: GO 52894
// missile := [ 1 ] ;
52541: LD_ADDR_VAR 0 14
52545: PUSH
52546: LD_INT 1
52548: PUSH
52549: EMPTY
52550: LIST
52551: ST_TO_ADDR
// if Researched ( side , tech_space ) then
52552: LD_VAR 0 9
52556: PPUSH
52557: LD_VAR 0 12
52561: PPUSH
52562: CALL_OW 325
52566: IFFALSE 52595
// missile := Replace ( missile , missile + 1 , 2 ) ;
52568: LD_ADDR_VAR 0 14
52572: PUSH
52573: LD_VAR 0 14
52577: PPUSH
52578: LD_VAR 0 14
52582: PUSH
52583: LD_INT 1
52585: PLUS
52586: PPUSH
52587: LD_INT 2
52589: PPUSH
52590: CALL_OW 1
52594: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
52595: LD_VAR 0 9
52599: PPUSH
52600: LD_VAR 0 13
52604: PPUSH
52605: CALL_OW 325
52609: PUSH
52610: LD_VAR 0 10
52614: PPUSH
52615: CALL_OW 255
52619: PPUSH
52620: LD_VAR 0 13
52624: PPUSH
52625: CALL_OW 325
52629: NOT
52630: AND
52631: IFFALSE 52660
// missile := Replace ( missile , missile + 1 , 3 ) ;
52633: LD_ADDR_VAR 0 14
52637: PUSH
52638: LD_VAR 0 14
52642: PPUSH
52643: LD_VAR 0 14
52647: PUSH
52648: LD_INT 1
52650: PLUS
52651: PPUSH
52652: LD_INT 3
52654: PPUSH
52655: CALL_OW 1
52659: ST_TO_ADDR
// if missile < 2 then
52660: LD_VAR 0 14
52664: PUSH
52665: LD_INT 2
52667: LESS
52668: IFFALSE 52672
// exit ;
52670: GO 52894
// x := GetX ( enemy ) ;
52672: LD_ADDR_VAR 0 4
52676: PUSH
52677: LD_VAR 0 10
52681: PPUSH
52682: CALL_OW 250
52686: ST_TO_ADDR
// y := GetY ( enemy ) ;
52687: LD_ADDR_VAR 0 5
52691: PUSH
52692: LD_VAR 0 10
52696: PPUSH
52697: CALL_OW 251
52701: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
52702: LD_ADDR_VAR 0 6
52706: PUSH
52707: LD_VAR 0 4
52711: PUSH
52712: LD_INT 1
52714: NEG
52715: PPUSH
52716: LD_INT 1
52718: PPUSH
52719: CALL_OW 12
52723: PLUS
52724: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
52725: LD_ADDR_VAR 0 7
52729: PUSH
52730: LD_VAR 0 5
52734: PUSH
52735: LD_INT 1
52737: NEG
52738: PPUSH
52739: LD_INT 1
52741: PPUSH
52742: CALL_OW 12
52746: PLUS
52747: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
52748: LD_VAR 0 6
52752: PPUSH
52753: LD_VAR 0 7
52757: PPUSH
52758: CALL_OW 488
52762: NOT
52763: IFFALSE 52785
// begin _x := x ;
52765: LD_ADDR_VAR 0 6
52769: PUSH
52770: LD_VAR 0 4
52774: ST_TO_ADDR
// _y := y ;
52775: LD_ADDR_VAR 0 7
52779: PUSH
52780: LD_VAR 0 5
52784: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
52785: LD_ADDR_VAR 0 3
52789: PUSH
52790: LD_INT 1
52792: PPUSH
52793: LD_VAR 0 14
52797: PPUSH
52798: CALL_OW 12
52802: ST_TO_ADDR
// case i of 1 :
52803: LD_VAR 0 3
52807: PUSH
52808: LD_INT 1
52810: DOUBLE
52811: EQUAL
52812: IFTRUE 52816
52814: GO 52833
52816: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
52817: LD_VAR 0 1
52821: PPUSH
52822: LD_VAR 0 10
52826: PPUSH
52827: CALL_OW 115
52831: GO 52894
52833: LD_INT 2
52835: DOUBLE
52836: EQUAL
52837: IFTRUE 52841
52839: GO 52863
52841: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
52842: LD_VAR 0 1
52846: PPUSH
52847: LD_VAR 0 6
52851: PPUSH
52852: LD_VAR 0 7
52856: PPUSH
52857: CALL_OW 153
52861: GO 52894
52863: LD_INT 3
52865: DOUBLE
52866: EQUAL
52867: IFTRUE 52871
52869: GO 52893
52871: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
52872: LD_VAR 0 1
52876: PPUSH
52877: LD_VAR 0 6
52881: PPUSH
52882: LD_VAR 0 7
52886: PPUSH
52887: CALL_OW 154
52891: GO 52894
52893: POP
// end ;
52894: LD_VAR 0 2
52898: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
52899: LD_INT 0
52901: PPUSH
52902: PPUSH
52903: PPUSH
52904: PPUSH
52905: PPUSH
52906: PPUSH
// if not unit or not building then
52907: LD_VAR 0 1
52911: NOT
52912: PUSH
52913: LD_VAR 0 2
52917: NOT
52918: OR
52919: IFFALSE 52923
// exit ;
52921: GO 53081
// x := GetX ( building ) ;
52923: LD_ADDR_VAR 0 5
52927: PUSH
52928: LD_VAR 0 2
52932: PPUSH
52933: CALL_OW 250
52937: ST_TO_ADDR
// y := GetY ( building ) ;
52938: LD_ADDR_VAR 0 6
52942: PUSH
52943: LD_VAR 0 2
52947: PPUSH
52948: CALL_OW 251
52952: ST_TO_ADDR
// for i = 0 to 5 do
52953: LD_ADDR_VAR 0 4
52957: PUSH
52958: DOUBLE
52959: LD_INT 0
52961: DEC
52962: ST_TO_ADDR
52963: LD_INT 5
52965: PUSH
52966: FOR_TO
52967: IFFALSE 53079
// begin _x := ShiftX ( x , i , 3 ) ;
52969: LD_ADDR_VAR 0 7
52973: PUSH
52974: LD_VAR 0 5
52978: PPUSH
52979: LD_VAR 0 4
52983: PPUSH
52984: LD_INT 3
52986: PPUSH
52987: CALL_OW 272
52991: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
52992: LD_ADDR_VAR 0 8
52996: PUSH
52997: LD_VAR 0 6
53001: PPUSH
53002: LD_VAR 0 4
53006: PPUSH
53007: LD_INT 3
53009: PPUSH
53010: CALL_OW 273
53014: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
53015: LD_VAR 0 7
53019: PPUSH
53020: LD_VAR 0 8
53024: PPUSH
53025: CALL_OW 488
53029: NOT
53030: IFFALSE 53034
// continue ;
53032: GO 52966
// if HexInfo ( _x , _y ) = 0 then
53034: LD_VAR 0 7
53038: PPUSH
53039: LD_VAR 0 8
53043: PPUSH
53044: CALL_OW 428
53048: PUSH
53049: LD_INT 0
53051: EQUAL
53052: IFFALSE 53077
// begin ComMoveXY ( unit , _x , _y ) ;
53054: LD_VAR 0 1
53058: PPUSH
53059: LD_VAR 0 7
53063: PPUSH
53064: LD_VAR 0 8
53068: PPUSH
53069: CALL_OW 111
// exit ;
53073: POP
53074: POP
53075: GO 53081
// end ; end ;
53077: GO 52966
53079: POP
53080: POP
// end ;
53081: LD_VAR 0 3
53085: RET
// export function ScanBase ( side , base_area ) ; begin
53086: LD_INT 0
53088: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
53089: LD_ADDR_VAR 0 3
53093: PUSH
53094: LD_VAR 0 2
53098: PPUSH
53099: LD_INT 81
53101: PUSH
53102: LD_VAR 0 1
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: PPUSH
53111: CALL_OW 70
53115: ST_TO_ADDR
// end ;
53116: LD_VAR 0 3
53120: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
53121: LD_INT 0
53123: PPUSH
53124: PPUSH
53125: PPUSH
53126: PPUSH
// result := false ;
53127: LD_ADDR_VAR 0 2
53131: PUSH
53132: LD_INT 0
53134: ST_TO_ADDR
// side := GetSide ( unit ) ;
53135: LD_ADDR_VAR 0 3
53139: PUSH
53140: LD_VAR 0 1
53144: PPUSH
53145: CALL_OW 255
53149: ST_TO_ADDR
// nat := GetNation ( unit ) ;
53150: LD_ADDR_VAR 0 4
53154: PUSH
53155: LD_VAR 0 1
53159: PPUSH
53160: CALL_OW 248
53164: ST_TO_ADDR
// case nat of 1 :
53165: LD_VAR 0 4
53169: PUSH
53170: LD_INT 1
53172: DOUBLE
53173: EQUAL
53174: IFTRUE 53178
53176: GO 53189
53178: POP
// tech := tech_lassight ; 2 :
53179: LD_ADDR_VAR 0 5
53183: PUSH
53184: LD_INT 12
53186: ST_TO_ADDR
53187: GO 53228
53189: LD_INT 2
53191: DOUBLE
53192: EQUAL
53193: IFTRUE 53197
53195: GO 53208
53197: POP
// tech := tech_mortar ; 3 :
53198: LD_ADDR_VAR 0 5
53202: PUSH
53203: LD_INT 41
53205: ST_TO_ADDR
53206: GO 53228
53208: LD_INT 3
53210: DOUBLE
53211: EQUAL
53212: IFTRUE 53216
53214: GO 53227
53216: POP
// tech := tech_bazooka ; end ;
53217: LD_ADDR_VAR 0 5
53221: PUSH
53222: LD_INT 44
53224: ST_TO_ADDR
53225: GO 53228
53227: POP
// if Researched ( side , tech ) then
53228: LD_VAR 0 3
53232: PPUSH
53233: LD_VAR 0 5
53237: PPUSH
53238: CALL_OW 325
53242: IFFALSE 53269
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
53244: LD_ADDR_VAR 0 2
53248: PUSH
53249: LD_INT 5
53251: PUSH
53252: LD_INT 8
53254: PUSH
53255: LD_INT 9
53257: PUSH
53258: EMPTY
53259: LIST
53260: LIST
53261: LIST
53262: PUSH
53263: LD_VAR 0 4
53267: ARRAY
53268: ST_TO_ADDR
// end ;
53269: LD_VAR 0 2
53273: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
53274: LD_INT 0
53276: PPUSH
53277: PPUSH
53278: PPUSH
// if not mines then
53279: LD_VAR 0 2
53283: NOT
53284: IFFALSE 53288
// exit ;
53286: GO 53432
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
53288: LD_ADDR_VAR 0 5
53292: PUSH
53293: LD_INT 81
53295: PUSH
53296: LD_VAR 0 1
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 3
53307: PUSH
53308: LD_INT 21
53310: PUSH
53311: LD_INT 3
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: EMPTY
53319: LIST
53320: LIST
53321: PUSH
53322: EMPTY
53323: LIST
53324: LIST
53325: PPUSH
53326: CALL_OW 69
53330: ST_TO_ADDR
// for i in mines do
53331: LD_ADDR_VAR 0 4
53335: PUSH
53336: LD_VAR 0 2
53340: PUSH
53341: FOR_IN
53342: IFFALSE 53430
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
53344: LD_VAR 0 4
53348: PUSH
53349: LD_INT 1
53351: ARRAY
53352: PPUSH
53353: LD_VAR 0 4
53357: PUSH
53358: LD_INT 2
53360: ARRAY
53361: PPUSH
53362: CALL_OW 458
53366: NOT
53367: IFFALSE 53371
// continue ;
53369: GO 53341
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
53371: LD_VAR 0 4
53375: PUSH
53376: LD_INT 1
53378: ARRAY
53379: PPUSH
53380: LD_VAR 0 4
53384: PUSH
53385: LD_INT 2
53387: ARRAY
53388: PPUSH
53389: CALL_OW 428
53393: PUSH
53394: LD_VAR 0 5
53398: IN
53399: IFFALSE 53428
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
53401: LD_VAR 0 4
53405: PUSH
53406: LD_INT 1
53408: ARRAY
53409: PPUSH
53410: LD_VAR 0 4
53414: PUSH
53415: LD_INT 2
53417: ARRAY
53418: PPUSH
53419: LD_VAR 0 1
53423: PPUSH
53424: CALL_OW 456
// end ;
53428: GO 53341
53430: POP
53431: POP
// end ;
53432: LD_VAR 0 3
53436: RET
// export function Count ( array ) ; begin
53437: LD_INT 0
53439: PPUSH
// result := array + 0 ;
53440: LD_ADDR_VAR 0 2
53444: PUSH
53445: LD_VAR 0 1
53449: PUSH
53450: LD_INT 0
53452: PLUS
53453: ST_TO_ADDR
// end ;
53454: LD_VAR 0 2
53458: RET
// export function IsEmpty ( building ) ; begin
53459: LD_INT 0
53461: PPUSH
// if not building then
53462: LD_VAR 0 1
53466: NOT
53467: IFFALSE 53471
// exit ;
53469: GO 53514
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
53471: LD_ADDR_VAR 0 2
53475: PUSH
53476: LD_VAR 0 1
53480: PUSH
53481: LD_INT 22
53483: PUSH
53484: LD_VAR 0 1
53488: PPUSH
53489: CALL_OW 255
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 58
53500: PUSH
53501: EMPTY
53502: LIST
53503: PUSH
53504: EMPTY
53505: LIST
53506: LIST
53507: PPUSH
53508: CALL_OW 69
53512: IN
53513: ST_TO_ADDR
// end ;
53514: LD_VAR 0 2
53518: RET
// export function IsNotFull ( building ) ; var places ; begin
53519: LD_INT 0
53521: PPUSH
53522: PPUSH
// if not building then
53523: LD_VAR 0 1
53527: NOT
53528: IFFALSE 53532
// exit ;
53530: GO 53560
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
53532: LD_ADDR_VAR 0 2
53536: PUSH
53537: LD_VAR 0 1
53541: PPUSH
53542: LD_INT 3
53544: PUSH
53545: LD_INT 62
53547: PUSH
53548: EMPTY
53549: LIST
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PPUSH
53555: CALL_OW 72
53559: ST_TO_ADDR
// end ;
53560: LD_VAR 0 2
53564: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
53565: LD_INT 0
53567: PPUSH
53568: PPUSH
53569: PPUSH
53570: PPUSH
// tmp := [ ] ;
53571: LD_ADDR_VAR 0 3
53575: PUSH
53576: EMPTY
53577: ST_TO_ADDR
// list := [ ] ;
53578: LD_ADDR_VAR 0 5
53582: PUSH
53583: EMPTY
53584: ST_TO_ADDR
// for i = 16 to 25 do
53585: LD_ADDR_VAR 0 4
53589: PUSH
53590: DOUBLE
53591: LD_INT 16
53593: DEC
53594: ST_TO_ADDR
53595: LD_INT 25
53597: PUSH
53598: FOR_TO
53599: IFFALSE 53672
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
53601: LD_ADDR_VAR 0 3
53605: PUSH
53606: LD_VAR 0 3
53610: PUSH
53611: LD_INT 22
53613: PUSH
53614: LD_VAR 0 1
53618: PPUSH
53619: CALL_OW 255
53623: PUSH
53624: EMPTY
53625: LIST
53626: LIST
53627: PUSH
53628: LD_INT 91
53630: PUSH
53631: LD_VAR 0 1
53635: PUSH
53636: LD_INT 6
53638: PUSH
53639: EMPTY
53640: LIST
53641: LIST
53642: LIST
53643: PUSH
53644: LD_INT 30
53646: PUSH
53647: LD_VAR 0 4
53651: PUSH
53652: EMPTY
53653: LIST
53654: LIST
53655: PUSH
53656: EMPTY
53657: LIST
53658: LIST
53659: LIST
53660: PUSH
53661: EMPTY
53662: LIST
53663: PPUSH
53664: CALL_OW 69
53668: ADD
53669: ST_TO_ADDR
53670: GO 53598
53672: POP
53673: POP
// for i = 1 to tmp do
53674: LD_ADDR_VAR 0 4
53678: PUSH
53679: DOUBLE
53680: LD_INT 1
53682: DEC
53683: ST_TO_ADDR
53684: LD_VAR 0 3
53688: PUSH
53689: FOR_TO
53690: IFFALSE 53778
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
53692: LD_ADDR_VAR 0 5
53696: PUSH
53697: LD_VAR 0 5
53701: PUSH
53702: LD_VAR 0 3
53706: PUSH
53707: LD_VAR 0 4
53711: ARRAY
53712: PPUSH
53713: CALL_OW 266
53717: PUSH
53718: LD_VAR 0 3
53722: PUSH
53723: LD_VAR 0 4
53727: ARRAY
53728: PPUSH
53729: CALL_OW 250
53733: PUSH
53734: LD_VAR 0 3
53738: PUSH
53739: LD_VAR 0 4
53743: ARRAY
53744: PPUSH
53745: CALL_OW 251
53749: PUSH
53750: LD_VAR 0 3
53754: PUSH
53755: LD_VAR 0 4
53759: ARRAY
53760: PPUSH
53761: CALL_OW 254
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: LIST
53770: LIST
53771: PUSH
53772: EMPTY
53773: LIST
53774: ADD
53775: ST_TO_ADDR
53776: GO 53689
53778: POP
53779: POP
// result := list ;
53780: LD_ADDR_VAR 0 2
53784: PUSH
53785: LD_VAR 0 5
53789: ST_TO_ADDR
// end ;
53790: LD_VAR 0 2
53794: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
53795: LD_INT 0
53797: PPUSH
53798: PPUSH
53799: PPUSH
53800: PPUSH
53801: PPUSH
53802: PPUSH
53803: PPUSH
// if not factory then
53804: LD_VAR 0 1
53808: NOT
53809: IFFALSE 53813
// exit ;
53811: GO 54406
// if control = control_apeman then
53813: LD_VAR 0 4
53817: PUSH
53818: LD_INT 5
53820: EQUAL
53821: IFFALSE 53930
// begin tmp := UnitsInside ( factory ) ;
53823: LD_ADDR_VAR 0 8
53827: PUSH
53828: LD_VAR 0 1
53832: PPUSH
53833: CALL_OW 313
53837: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
53838: LD_VAR 0 8
53842: PPUSH
53843: LD_INT 25
53845: PUSH
53846: LD_INT 12
53848: PUSH
53849: EMPTY
53850: LIST
53851: LIST
53852: PPUSH
53853: CALL_OW 72
53857: NOT
53858: IFFALSE 53868
// control := control_manual ;
53860: LD_ADDR_VAR 0 4
53864: PUSH
53865: LD_INT 1
53867: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
53868: LD_ADDR_VAR 0 8
53872: PUSH
53873: LD_VAR 0 1
53877: PPUSH
53878: CALL 53565 0 1
53882: ST_TO_ADDR
// if tmp then
53883: LD_VAR 0 8
53887: IFFALSE 53930
// begin for i in tmp do
53889: LD_ADDR_VAR 0 7
53893: PUSH
53894: LD_VAR 0 8
53898: PUSH
53899: FOR_IN
53900: IFFALSE 53928
// if i [ 1 ] = b_ext_radio then
53902: LD_VAR 0 7
53906: PUSH
53907: LD_INT 1
53909: ARRAY
53910: PUSH
53911: LD_INT 22
53913: EQUAL
53914: IFFALSE 53926
// begin control := control_remote ;
53916: LD_ADDR_VAR 0 4
53920: PUSH
53921: LD_INT 2
53923: ST_TO_ADDR
// break ;
53924: GO 53928
// end ;
53926: GO 53899
53928: POP
53929: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
53930: LD_VAR 0 1
53934: PPUSH
53935: LD_VAR 0 2
53939: PPUSH
53940: LD_VAR 0 3
53944: PPUSH
53945: LD_VAR 0 4
53949: PPUSH
53950: LD_VAR 0 5
53954: PPUSH
53955: CALL_OW 448
53959: IFFALSE 53994
// begin result := [ chassis , engine , control , weapon ] ;
53961: LD_ADDR_VAR 0 6
53965: PUSH
53966: LD_VAR 0 2
53970: PUSH
53971: LD_VAR 0 3
53975: PUSH
53976: LD_VAR 0 4
53980: PUSH
53981: LD_VAR 0 5
53985: PUSH
53986: EMPTY
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: ST_TO_ADDR
// exit ;
53992: GO 54406
// end ; _chassis := AvailableChassisList ( factory ) ;
53994: LD_ADDR_VAR 0 9
53998: PUSH
53999: LD_VAR 0 1
54003: PPUSH
54004: CALL_OW 475
54008: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
54009: LD_ADDR_VAR 0 11
54013: PUSH
54014: LD_VAR 0 1
54018: PPUSH
54019: CALL_OW 476
54023: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
54024: LD_ADDR_VAR 0 12
54028: PUSH
54029: LD_VAR 0 1
54033: PPUSH
54034: CALL_OW 477
54038: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
54039: LD_ADDR_VAR 0 10
54043: PUSH
54044: LD_VAR 0 1
54048: PPUSH
54049: CALL_OW 478
54053: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
54054: LD_VAR 0 9
54058: NOT
54059: PUSH
54060: LD_VAR 0 11
54064: NOT
54065: OR
54066: PUSH
54067: LD_VAR 0 12
54071: NOT
54072: OR
54073: PUSH
54074: LD_VAR 0 10
54078: NOT
54079: OR
54080: IFFALSE 54115
// begin result := [ chassis , engine , control , weapon ] ;
54082: LD_ADDR_VAR 0 6
54086: PUSH
54087: LD_VAR 0 2
54091: PUSH
54092: LD_VAR 0 3
54096: PUSH
54097: LD_VAR 0 4
54101: PUSH
54102: LD_VAR 0 5
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: ST_TO_ADDR
// exit ;
54113: GO 54406
// end ; if not chassis in _chassis then
54115: LD_VAR 0 2
54119: PUSH
54120: LD_VAR 0 9
54124: IN
54125: NOT
54126: IFFALSE 54152
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
54128: LD_ADDR_VAR 0 2
54132: PUSH
54133: LD_VAR 0 9
54137: PUSH
54138: LD_INT 1
54140: PPUSH
54141: LD_VAR 0 9
54145: PPUSH
54146: CALL_OW 12
54150: ARRAY
54151: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
54152: LD_VAR 0 2
54156: PPUSH
54157: LD_VAR 0 3
54161: PPUSH
54162: CALL 54411 0 2
54166: NOT
54167: IFFALSE 54226
// repeat engine := _engine [ 1 ] ;
54169: LD_ADDR_VAR 0 3
54173: PUSH
54174: LD_VAR 0 11
54178: PUSH
54179: LD_INT 1
54181: ARRAY
54182: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
54183: LD_ADDR_VAR 0 11
54187: PUSH
54188: LD_VAR 0 11
54192: PPUSH
54193: LD_INT 1
54195: PPUSH
54196: CALL_OW 3
54200: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
54201: LD_VAR 0 2
54205: PPUSH
54206: LD_VAR 0 3
54210: PPUSH
54211: CALL 54411 0 2
54215: PUSH
54216: LD_VAR 0 11
54220: PUSH
54221: EMPTY
54222: EQUAL
54223: OR
54224: IFFALSE 54169
// if not control in _control then
54226: LD_VAR 0 4
54230: PUSH
54231: LD_VAR 0 12
54235: IN
54236: NOT
54237: IFFALSE 54263
// control := _control [ rand ( 1 , _control ) ] ;
54239: LD_ADDR_VAR 0 4
54243: PUSH
54244: LD_VAR 0 12
54248: PUSH
54249: LD_INT 1
54251: PPUSH
54252: LD_VAR 0 12
54256: PPUSH
54257: CALL_OW 12
54261: ARRAY
54262: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
54263: LD_VAR 0 2
54267: PPUSH
54268: LD_VAR 0 5
54272: PPUSH
54273: CALL 54631 0 2
54277: NOT
54278: IFFALSE 54337
// repeat weapon := _weapon [ 1 ] ;
54280: LD_ADDR_VAR 0 5
54284: PUSH
54285: LD_VAR 0 10
54289: PUSH
54290: LD_INT 1
54292: ARRAY
54293: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
54294: LD_ADDR_VAR 0 10
54298: PUSH
54299: LD_VAR 0 10
54303: PPUSH
54304: LD_INT 1
54306: PPUSH
54307: CALL_OW 3
54311: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
54312: LD_VAR 0 2
54316: PPUSH
54317: LD_VAR 0 5
54321: PPUSH
54322: CALL 54631 0 2
54326: PUSH
54327: LD_VAR 0 10
54331: PUSH
54332: EMPTY
54333: EQUAL
54334: OR
54335: IFFALSE 54280
// result := [ ] ;
54337: LD_ADDR_VAR 0 6
54341: PUSH
54342: EMPTY
54343: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
54344: LD_VAR 0 1
54348: PPUSH
54349: LD_VAR 0 2
54353: PPUSH
54354: LD_VAR 0 3
54358: PPUSH
54359: LD_VAR 0 4
54363: PPUSH
54364: LD_VAR 0 5
54368: PPUSH
54369: CALL_OW 448
54373: IFFALSE 54406
// result := [ chassis , engine , control , weapon ] ;
54375: LD_ADDR_VAR 0 6
54379: PUSH
54380: LD_VAR 0 2
54384: PUSH
54385: LD_VAR 0 3
54389: PUSH
54390: LD_VAR 0 4
54394: PUSH
54395: LD_VAR 0 5
54399: PUSH
54400: EMPTY
54401: LIST
54402: LIST
54403: LIST
54404: LIST
54405: ST_TO_ADDR
// end ;
54406: LD_VAR 0 6
54410: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
54411: LD_INT 0
54413: PPUSH
// if not chassis or not engine then
54414: LD_VAR 0 1
54418: NOT
54419: PUSH
54420: LD_VAR 0 2
54424: NOT
54425: OR
54426: IFFALSE 54430
// exit ;
54428: GO 54626
// case engine of engine_solar :
54430: LD_VAR 0 2
54434: PUSH
54435: LD_INT 2
54437: DOUBLE
54438: EQUAL
54439: IFTRUE 54443
54441: GO 54481
54443: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
54444: LD_ADDR_VAR 0 3
54448: PUSH
54449: LD_INT 11
54451: PUSH
54452: LD_INT 12
54454: PUSH
54455: LD_INT 13
54457: PUSH
54458: LD_INT 14
54460: PUSH
54461: LD_INT 1
54463: PUSH
54464: LD_INT 2
54466: PUSH
54467: LD_INT 3
54469: PUSH
54470: EMPTY
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: ST_TO_ADDR
54479: GO 54610
54481: LD_INT 1
54483: DOUBLE
54484: EQUAL
54485: IFTRUE 54489
54487: GO 54551
54489: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
54490: LD_ADDR_VAR 0 3
54494: PUSH
54495: LD_INT 11
54497: PUSH
54498: LD_INT 12
54500: PUSH
54501: LD_INT 13
54503: PUSH
54504: LD_INT 14
54506: PUSH
54507: LD_INT 1
54509: PUSH
54510: LD_INT 2
54512: PUSH
54513: LD_INT 3
54515: PUSH
54516: LD_INT 4
54518: PUSH
54519: LD_INT 5
54521: PUSH
54522: LD_INT 21
54524: PUSH
54525: LD_INT 23
54527: PUSH
54528: LD_INT 22
54530: PUSH
54531: LD_INT 24
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: ST_TO_ADDR
54549: GO 54610
54551: LD_INT 3
54553: DOUBLE
54554: EQUAL
54555: IFTRUE 54559
54557: GO 54609
54559: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
54560: LD_ADDR_VAR 0 3
54564: PUSH
54565: LD_INT 13
54567: PUSH
54568: LD_INT 14
54570: PUSH
54571: LD_INT 2
54573: PUSH
54574: LD_INT 3
54576: PUSH
54577: LD_INT 4
54579: PUSH
54580: LD_INT 5
54582: PUSH
54583: LD_INT 21
54585: PUSH
54586: LD_INT 22
54588: PUSH
54589: LD_INT 23
54591: PUSH
54592: LD_INT 24
54594: PUSH
54595: EMPTY
54596: LIST
54597: LIST
54598: LIST
54599: LIST
54600: LIST
54601: LIST
54602: LIST
54603: LIST
54604: LIST
54605: LIST
54606: ST_TO_ADDR
54607: GO 54610
54609: POP
// result := ( chassis in result ) ;
54610: LD_ADDR_VAR 0 3
54614: PUSH
54615: LD_VAR 0 1
54619: PUSH
54620: LD_VAR 0 3
54624: IN
54625: ST_TO_ADDR
// end ;
54626: LD_VAR 0 3
54630: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
54631: LD_INT 0
54633: PPUSH
// if not chassis or not weapon then
54634: LD_VAR 0 1
54638: NOT
54639: PUSH
54640: LD_VAR 0 2
54644: NOT
54645: OR
54646: IFFALSE 54650
// exit ;
54648: GO 55710
// case weapon of us_machine_gun :
54650: LD_VAR 0 2
54654: PUSH
54655: LD_INT 2
54657: DOUBLE
54658: EQUAL
54659: IFTRUE 54663
54661: GO 54693
54663: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
54664: LD_ADDR_VAR 0 3
54668: PUSH
54669: LD_INT 1
54671: PUSH
54672: LD_INT 2
54674: PUSH
54675: LD_INT 3
54677: PUSH
54678: LD_INT 4
54680: PUSH
54681: LD_INT 5
54683: PUSH
54684: EMPTY
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: ST_TO_ADDR
54691: GO 55694
54693: LD_INT 3
54695: DOUBLE
54696: EQUAL
54697: IFTRUE 54701
54699: GO 54731
54701: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
54702: LD_ADDR_VAR 0 3
54706: PUSH
54707: LD_INT 1
54709: PUSH
54710: LD_INT 2
54712: PUSH
54713: LD_INT 3
54715: PUSH
54716: LD_INT 4
54718: PUSH
54719: LD_INT 5
54721: PUSH
54722: EMPTY
54723: LIST
54724: LIST
54725: LIST
54726: LIST
54727: LIST
54728: ST_TO_ADDR
54729: GO 55694
54731: LD_INT 11
54733: DOUBLE
54734: EQUAL
54735: IFTRUE 54739
54737: GO 54769
54739: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
54740: LD_ADDR_VAR 0 3
54744: PUSH
54745: LD_INT 1
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: LD_INT 3
54753: PUSH
54754: LD_INT 4
54756: PUSH
54757: LD_INT 5
54759: PUSH
54760: EMPTY
54761: LIST
54762: LIST
54763: LIST
54764: LIST
54765: LIST
54766: ST_TO_ADDR
54767: GO 55694
54769: LD_INT 4
54771: DOUBLE
54772: EQUAL
54773: IFTRUE 54777
54775: GO 54803
54777: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
54778: LD_ADDR_VAR 0 3
54782: PUSH
54783: LD_INT 2
54785: PUSH
54786: LD_INT 3
54788: PUSH
54789: LD_INT 4
54791: PUSH
54792: LD_INT 5
54794: PUSH
54795: EMPTY
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: ST_TO_ADDR
54801: GO 55694
54803: LD_INT 5
54805: DOUBLE
54806: EQUAL
54807: IFTRUE 54811
54809: GO 54837
54811: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
54812: LD_ADDR_VAR 0 3
54816: PUSH
54817: LD_INT 2
54819: PUSH
54820: LD_INT 3
54822: PUSH
54823: LD_INT 4
54825: PUSH
54826: LD_INT 5
54828: PUSH
54829: EMPTY
54830: LIST
54831: LIST
54832: LIST
54833: LIST
54834: ST_TO_ADDR
54835: GO 55694
54837: LD_INT 9
54839: DOUBLE
54840: EQUAL
54841: IFTRUE 54845
54843: GO 54871
54845: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
54846: LD_ADDR_VAR 0 3
54850: PUSH
54851: LD_INT 2
54853: PUSH
54854: LD_INT 3
54856: PUSH
54857: LD_INT 4
54859: PUSH
54860: LD_INT 5
54862: PUSH
54863: EMPTY
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: ST_TO_ADDR
54869: GO 55694
54871: LD_INT 7
54873: DOUBLE
54874: EQUAL
54875: IFTRUE 54879
54877: GO 54905
54879: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
54880: LD_ADDR_VAR 0 3
54884: PUSH
54885: LD_INT 2
54887: PUSH
54888: LD_INT 3
54890: PUSH
54891: LD_INT 4
54893: PUSH
54894: LD_INT 5
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: LIST
54901: LIST
54902: ST_TO_ADDR
54903: GO 55694
54905: LD_INT 12
54907: DOUBLE
54908: EQUAL
54909: IFTRUE 54913
54911: GO 54939
54913: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
54914: LD_ADDR_VAR 0 3
54918: PUSH
54919: LD_INT 2
54921: PUSH
54922: LD_INT 3
54924: PUSH
54925: LD_INT 4
54927: PUSH
54928: LD_INT 5
54930: PUSH
54931: EMPTY
54932: LIST
54933: LIST
54934: LIST
54935: LIST
54936: ST_TO_ADDR
54937: GO 55694
54939: LD_INT 13
54941: DOUBLE
54942: EQUAL
54943: IFTRUE 54947
54945: GO 54973
54947: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
54948: LD_ADDR_VAR 0 3
54952: PUSH
54953: LD_INT 2
54955: PUSH
54956: LD_INT 3
54958: PUSH
54959: LD_INT 4
54961: PUSH
54962: LD_INT 5
54964: PUSH
54965: EMPTY
54966: LIST
54967: LIST
54968: LIST
54969: LIST
54970: ST_TO_ADDR
54971: GO 55694
54973: LD_INT 14
54975: DOUBLE
54976: EQUAL
54977: IFTRUE 54981
54979: GO 54999
54981: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
54982: LD_ADDR_VAR 0 3
54986: PUSH
54987: LD_INT 4
54989: PUSH
54990: LD_INT 5
54992: PUSH
54993: EMPTY
54994: LIST
54995: LIST
54996: ST_TO_ADDR
54997: GO 55694
54999: LD_INT 6
55001: DOUBLE
55002: EQUAL
55003: IFTRUE 55007
55005: GO 55025
55007: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
55008: LD_ADDR_VAR 0 3
55012: PUSH
55013: LD_INT 4
55015: PUSH
55016: LD_INT 5
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: ST_TO_ADDR
55023: GO 55694
55025: LD_INT 10
55027: DOUBLE
55028: EQUAL
55029: IFTRUE 55033
55031: GO 55051
55033: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
55034: LD_ADDR_VAR 0 3
55038: PUSH
55039: LD_INT 4
55041: PUSH
55042: LD_INT 5
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: ST_TO_ADDR
55049: GO 55694
55051: LD_INT 22
55053: DOUBLE
55054: EQUAL
55055: IFTRUE 55059
55057: GO 55085
55059: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
55060: LD_ADDR_VAR 0 3
55064: PUSH
55065: LD_INT 11
55067: PUSH
55068: LD_INT 12
55070: PUSH
55071: LD_INT 13
55073: PUSH
55074: LD_INT 14
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: ST_TO_ADDR
55083: GO 55694
55085: LD_INT 23
55087: DOUBLE
55088: EQUAL
55089: IFTRUE 55093
55091: GO 55119
55093: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
55094: LD_ADDR_VAR 0 3
55098: PUSH
55099: LD_INT 11
55101: PUSH
55102: LD_INT 12
55104: PUSH
55105: LD_INT 13
55107: PUSH
55108: LD_INT 14
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: LIST
55115: LIST
55116: ST_TO_ADDR
55117: GO 55694
55119: LD_INT 24
55121: DOUBLE
55122: EQUAL
55123: IFTRUE 55127
55125: GO 55153
55127: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
55128: LD_ADDR_VAR 0 3
55132: PUSH
55133: LD_INT 11
55135: PUSH
55136: LD_INT 12
55138: PUSH
55139: LD_INT 13
55141: PUSH
55142: LD_INT 14
55144: PUSH
55145: EMPTY
55146: LIST
55147: LIST
55148: LIST
55149: LIST
55150: ST_TO_ADDR
55151: GO 55694
55153: LD_INT 30
55155: DOUBLE
55156: EQUAL
55157: IFTRUE 55161
55159: GO 55187
55161: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
55162: LD_ADDR_VAR 0 3
55166: PUSH
55167: LD_INT 11
55169: PUSH
55170: LD_INT 12
55172: PUSH
55173: LD_INT 13
55175: PUSH
55176: LD_INT 14
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: ST_TO_ADDR
55185: GO 55694
55187: LD_INT 25
55189: DOUBLE
55190: EQUAL
55191: IFTRUE 55195
55193: GO 55213
55195: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
55196: LD_ADDR_VAR 0 3
55200: PUSH
55201: LD_INT 13
55203: PUSH
55204: LD_INT 14
55206: PUSH
55207: EMPTY
55208: LIST
55209: LIST
55210: ST_TO_ADDR
55211: GO 55694
55213: LD_INT 27
55215: DOUBLE
55216: EQUAL
55217: IFTRUE 55221
55219: GO 55239
55221: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
55222: LD_ADDR_VAR 0 3
55226: PUSH
55227: LD_INT 13
55229: PUSH
55230: LD_INT 14
55232: PUSH
55233: EMPTY
55234: LIST
55235: LIST
55236: ST_TO_ADDR
55237: GO 55694
55239: LD_INT 92
55241: DOUBLE
55242: EQUAL
55243: IFTRUE 55247
55245: GO 55273
55247: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
55248: LD_ADDR_VAR 0 3
55252: PUSH
55253: LD_INT 11
55255: PUSH
55256: LD_INT 12
55258: PUSH
55259: LD_INT 13
55261: PUSH
55262: LD_INT 14
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: ST_TO_ADDR
55271: GO 55694
55273: LD_INT 28
55275: DOUBLE
55276: EQUAL
55277: IFTRUE 55281
55279: GO 55299
55281: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
55282: LD_ADDR_VAR 0 3
55286: PUSH
55287: LD_INT 13
55289: PUSH
55290: LD_INT 14
55292: PUSH
55293: EMPTY
55294: LIST
55295: LIST
55296: ST_TO_ADDR
55297: GO 55694
55299: LD_INT 29
55301: DOUBLE
55302: EQUAL
55303: IFTRUE 55307
55305: GO 55325
55307: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
55308: LD_ADDR_VAR 0 3
55312: PUSH
55313: LD_INT 13
55315: PUSH
55316: LD_INT 14
55318: PUSH
55319: EMPTY
55320: LIST
55321: LIST
55322: ST_TO_ADDR
55323: GO 55694
55325: LD_INT 31
55327: DOUBLE
55328: EQUAL
55329: IFTRUE 55333
55331: GO 55351
55333: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
55334: LD_ADDR_VAR 0 3
55338: PUSH
55339: LD_INT 13
55341: PUSH
55342: LD_INT 14
55344: PUSH
55345: EMPTY
55346: LIST
55347: LIST
55348: ST_TO_ADDR
55349: GO 55694
55351: LD_INT 26
55353: DOUBLE
55354: EQUAL
55355: IFTRUE 55359
55357: GO 55377
55359: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
55360: LD_ADDR_VAR 0 3
55364: PUSH
55365: LD_INT 13
55367: PUSH
55368: LD_INT 14
55370: PUSH
55371: EMPTY
55372: LIST
55373: LIST
55374: ST_TO_ADDR
55375: GO 55694
55377: LD_INT 42
55379: DOUBLE
55380: EQUAL
55381: IFTRUE 55385
55383: GO 55411
55385: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
55386: LD_ADDR_VAR 0 3
55390: PUSH
55391: LD_INT 21
55393: PUSH
55394: LD_INT 22
55396: PUSH
55397: LD_INT 23
55399: PUSH
55400: LD_INT 24
55402: PUSH
55403: EMPTY
55404: LIST
55405: LIST
55406: LIST
55407: LIST
55408: ST_TO_ADDR
55409: GO 55694
55411: LD_INT 43
55413: DOUBLE
55414: EQUAL
55415: IFTRUE 55419
55417: GO 55445
55419: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
55420: LD_ADDR_VAR 0 3
55424: PUSH
55425: LD_INT 21
55427: PUSH
55428: LD_INT 22
55430: PUSH
55431: LD_INT 23
55433: PUSH
55434: LD_INT 24
55436: PUSH
55437: EMPTY
55438: LIST
55439: LIST
55440: LIST
55441: LIST
55442: ST_TO_ADDR
55443: GO 55694
55445: LD_INT 44
55447: DOUBLE
55448: EQUAL
55449: IFTRUE 55453
55451: GO 55479
55453: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
55454: LD_ADDR_VAR 0 3
55458: PUSH
55459: LD_INT 21
55461: PUSH
55462: LD_INT 22
55464: PUSH
55465: LD_INT 23
55467: PUSH
55468: LD_INT 24
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: ST_TO_ADDR
55477: GO 55694
55479: LD_INT 45
55481: DOUBLE
55482: EQUAL
55483: IFTRUE 55487
55485: GO 55513
55487: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
55488: LD_ADDR_VAR 0 3
55492: PUSH
55493: LD_INT 21
55495: PUSH
55496: LD_INT 22
55498: PUSH
55499: LD_INT 23
55501: PUSH
55502: LD_INT 24
55504: PUSH
55505: EMPTY
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: ST_TO_ADDR
55511: GO 55694
55513: LD_INT 49
55515: DOUBLE
55516: EQUAL
55517: IFTRUE 55521
55519: GO 55547
55521: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
55522: LD_ADDR_VAR 0 3
55526: PUSH
55527: LD_INT 21
55529: PUSH
55530: LD_INT 22
55532: PUSH
55533: LD_INT 23
55535: PUSH
55536: LD_INT 24
55538: PUSH
55539: EMPTY
55540: LIST
55541: LIST
55542: LIST
55543: LIST
55544: ST_TO_ADDR
55545: GO 55694
55547: LD_INT 51
55549: DOUBLE
55550: EQUAL
55551: IFTRUE 55555
55553: GO 55581
55555: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
55556: LD_ADDR_VAR 0 3
55560: PUSH
55561: LD_INT 21
55563: PUSH
55564: LD_INT 22
55566: PUSH
55567: LD_INT 23
55569: PUSH
55570: LD_INT 24
55572: PUSH
55573: EMPTY
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: ST_TO_ADDR
55579: GO 55694
55581: LD_INT 52
55583: DOUBLE
55584: EQUAL
55585: IFTRUE 55589
55587: GO 55615
55589: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
55590: LD_ADDR_VAR 0 3
55594: PUSH
55595: LD_INT 21
55597: PUSH
55598: LD_INT 22
55600: PUSH
55601: LD_INT 23
55603: PUSH
55604: LD_INT 24
55606: PUSH
55607: EMPTY
55608: LIST
55609: LIST
55610: LIST
55611: LIST
55612: ST_TO_ADDR
55613: GO 55694
55615: LD_INT 53
55617: DOUBLE
55618: EQUAL
55619: IFTRUE 55623
55621: GO 55641
55623: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
55624: LD_ADDR_VAR 0 3
55628: PUSH
55629: LD_INT 23
55631: PUSH
55632: LD_INT 24
55634: PUSH
55635: EMPTY
55636: LIST
55637: LIST
55638: ST_TO_ADDR
55639: GO 55694
55641: LD_INT 46
55643: DOUBLE
55644: EQUAL
55645: IFTRUE 55649
55647: GO 55667
55649: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
55650: LD_ADDR_VAR 0 3
55654: PUSH
55655: LD_INT 23
55657: PUSH
55658: LD_INT 24
55660: PUSH
55661: EMPTY
55662: LIST
55663: LIST
55664: ST_TO_ADDR
55665: GO 55694
55667: LD_INT 47
55669: DOUBLE
55670: EQUAL
55671: IFTRUE 55675
55673: GO 55693
55675: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
55676: LD_ADDR_VAR 0 3
55680: PUSH
55681: LD_INT 23
55683: PUSH
55684: LD_INT 24
55686: PUSH
55687: EMPTY
55688: LIST
55689: LIST
55690: ST_TO_ADDR
55691: GO 55694
55693: POP
// result := ( chassis in result ) ;
55694: LD_ADDR_VAR 0 3
55698: PUSH
55699: LD_VAR 0 1
55703: PUSH
55704: LD_VAR 0 3
55708: IN
55709: ST_TO_ADDR
// end ;
55710: LD_VAR 0 3
55714: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
55715: LD_INT 0
55717: PPUSH
55718: PPUSH
55719: PPUSH
55720: PPUSH
55721: PPUSH
55722: PPUSH
55723: PPUSH
// result := array ;
55724: LD_ADDR_VAR 0 5
55728: PUSH
55729: LD_VAR 0 1
55733: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
55734: LD_VAR 0 1
55738: NOT
55739: PUSH
55740: LD_VAR 0 2
55744: NOT
55745: OR
55746: PUSH
55747: LD_VAR 0 3
55751: NOT
55752: OR
55753: PUSH
55754: LD_VAR 0 2
55758: PUSH
55759: LD_VAR 0 1
55763: GREATER
55764: OR
55765: PUSH
55766: LD_VAR 0 3
55770: PUSH
55771: LD_VAR 0 1
55775: GREATER
55776: OR
55777: IFFALSE 55781
// exit ;
55779: GO 56077
// if direction then
55781: LD_VAR 0 4
55785: IFFALSE 55849
// begin d := 1 ;
55787: LD_ADDR_VAR 0 9
55791: PUSH
55792: LD_INT 1
55794: ST_TO_ADDR
// if i_from > i_to then
55795: LD_VAR 0 2
55799: PUSH
55800: LD_VAR 0 3
55804: GREATER
55805: IFFALSE 55831
// length := ( array - i_from ) + i_to else
55807: LD_ADDR_VAR 0 11
55811: PUSH
55812: LD_VAR 0 1
55816: PUSH
55817: LD_VAR 0 2
55821: MINUS
55822: PUSH
55823: LD_VAR 0 3
55827: PLUS
55828: ST_TO_ADDR
55829: GO 55847
// length := i_to - i_from ;
55831: LD_ADDR_VAR 0 11
55835: PUSH
55836: LD_VAR 0 3
55840: PUSH
55841: LD_VAR 0 2
55845: MINUS
55846: ST_TO_ADDR
// end else
55847: GO 55910
// begin d := - 1 ;
55849: LD_ADDR_VAR 0 9
55853: PUSH
55854: LD_INT 1
55856: NEG
55857: ST_TO_ADDR
// if i_from > i_to then
55858: LD_VAR 0 2
55862: PUSH
55863: LD_VAR 0 3
55867: GREATER
55868: IFFALSE 55888
// length := i_from - i_to else
55870: LD_ADDR_VAR 0 11
55874: PUSH
55875: LD_VAR 0 2
55879: PUSH
55880: LD_VAR 0 3
55884: MINUS
55885: ST_TO_ADDR
55886: GO 55910
// length := ( array - i_to ) + i_from ;
55888: LD_ADDR_VAR 0 11
55892: PUSH
55893: LD_VAR 0 1
55897: PUSH
55898: LD_VAR 0 3
55902: MINUS
55903: PUSH
55904: LD_VAR 0 2
55908: PLUS
55909: ST_TO_ADDR
// end ; if not length then
55910: LD_VAR 0 11
55914: NOT
55915: IFFALSE 55919
// exit ;
55917: GO 56077
// tmp := array ;
55919: LD_ADDR_VAR 0 10
55923: PUSH
55924: LD_VAR 0 1
55928: ST_TO_ADDR
// for i = 1 to length do
55929: LD_ADDR_VAR 0 6
55933: PUSH
55934: DOUBLE
55935: LD_INT 1
55937: DEC
55938: ST_TO_ADDR
55939: LD_VAR 0 11
55943: PUSH
55944: FOR_TO
55945: IFFALSE 56065
// begin for j = 1 to array do
55947: LD_ADDR_VAR 0 7
55951: PUSH
55952: DOUBLE
55953: LD_INT 1
55955: DEC
55956: ST_TO_ADDR
55957: LD_VAR 0 1
55961: PUSH
55962: FOR_TO
55963: IFFALSE 56051
// begin k := j + d ;
55965: LD_ADDR_VAR 0 8
55969: PUSH
55970: LD_VAR 0 7
55974: PUSH
55975: LD_VAR 0 9
55979: PLUS
55980: ST_TO_ADDR
// if k > array then
55981: LD_VAR 0 8
55985: PUSH
55986: LD_VAR 0 1
55990: GREATER
55991: IFFALSE 56001
// k := 1 ;
55993: LD_ADDR_VAR 0 8
55997: PUSH
55998: LD_INT 1
56000: ST_TO_ADDR
// if not k then
56001: LD_VAR 0 8
56005: NOT
56006: IFFALSE 56018
// k := array ;
56008: LD_ADDR_VAR 0 8
56012: PUSH
56013: LD_VAR 0 1
56017: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
56018: LD_ADDR_VAR 0 10
56022: PUSH
56023: LD_VAR 0 10
56027: PPUSH
56028: LD_VAR 0 8
56032: PPUSH
56033: LD_VAR 0 1
56037: PUSH
56038: LD_VAR 0 7
56042: ARRAY
56043: PPUSH
56044: CALL_OW 1
56048: ST_TO_ADDR
// end ;
56049: GO 55962
56051: POP
56052: POP
// array := tmp ;
56053: LD_ADDR_VAR 0 1
56057: PUSH
56058: LD_VAR 0 10
56062: ST_TO_ADDR
// end ;
56063: GO 55944
56065: POP
56066: POP
// result := array ;
56067: LD_ADDR_VAR 0 5
56071: PUSH
56072: LD_VAR 0 1
56076: ST_TO_ADDR
// end ;
56077: LD_VAR 0 5
56081: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
56082: LD_INT 0
56084: PPUSH
56085: PPUSH
// result := 0 ;
56086: LD_ADDR_VAR 0 3
56090: PUSH
56091: LD_INT 0
56093: ST_TO_ADDR
// if not array or not value in array then
56094: LD_VAR 0 1
56098: NOT
56099: PUSH
56100: LD_VAR 0 2
56104: PUSH
56105: LD_VAR 0 1
56109: IN
56110: NOT
56111: OR
56112: IFFALSE 56116
// exit ;
56114: GO 56170
// for i = 1 to array do
56116: LD_ADDR_VAR 0 4
56120: PUSH
56121: DOUBLE
56122: LD_INT 1
56124: DEC
56125: ST_TO_ADDR
56126: LD_VAR 0 1
56130: PUSH
56131: FOR_TO
56132: IFFALSE 56168
// if value = array [ i ] then
56134: LD_VAR 0 2
56138: PUSH
56139: LD_VAR 0 1
56143: PUSH
56144: LD_VAR 0 4
56148: ARRAY
56149: EQUAL
56150: IFFALSE 56166
// begin result := i ;
56152: LD_ADDR_VAR 0 3
56156: PUSH
56157: LD_VAR 0 4
56161: ST_TO_ADDR
// exit ;
56162: POP
56163: POP
56164: GO 56170
// end ;
56166: GO 56131
56168: POP
56169: POP
// end ;
56170: LD_VAR 0 3
56174: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
56175: LD_INT 0
56177: PPUSH
// vc_chassis := chassis ;
56178: LD_ADDR_OWVAR 37
56182: PUSH
56183: LD_VAR 0 1
56187: ST_TO_ADDR
// vc_engine := engine ;
56188: LD_ADDR_OWVAR 39
56192: PUSH
56193: LD_VAR 0 2
56197: ST_TO_ADDR
// vc_control := control ;
56198: LD_ADDR_OWVAR 38
56202: PUSH
56203: LD_VAR 0 3
56207: ST_TO_ADDR
// vc_weapon := weapon ;
56208: LD_ADDR_OWVAR 40
56212: PUSH
56213: LD_VAR 0 4
56217: ST_TO_ADDR
// vc_fuel_battery := fuel ;
56218: LD_ADDR_OWVAR 41
56222: PUSH
56223: LD_VAR 0 5
56227: ST_TO_ADDR
// end ;
56228: LD_VAR 0 6
56232: RET
// export function WantPlant ( unit ) ; var task ; begin
56233: LD_INT 0
56235: PPUSH
56236: PPUSH
// result := false ;
56237: LD_ADDR_VAR 0 2
56241: PUSH
56242: LD_INT 0
56244: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
56245: LD_ADDR_VAR 0 3
56249: PUSH
56250: LD_VAR 0 1
56254: PPUSH
56255: CALL_OW 437
56259: ST_TO_ADDR
// if task then
56260: LD_VAR 0 3
56264: IFFALSE 56292
// if task [ 1 ] [ 1 ] = p then
56266: LD_VAR 0 3
56270: PUSH
56271: LD_INT 1
56273: ARRAY
56274: PUSH
56275: LD_INT 1
56277: ARRAY
56278: PUSH
56279: LD_STRING p
56281: EQUAL
56282: IFFALSE 56292
// result := true ;
56284: LD_ADDR_VAR 0 2
56288: PUSH
56289: LD_INT 1
56291: ST_TO_ADDR
// end ;
56292: LD_VAR 0 2
56296: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
56297: LD_INT 0
56299: PPUSH
56300: PPUSH
56301: PPUSH
56302: PPUSH
// if pos < 1 then
56303: LD_VAR 0 2
56307: PUSH
56308: LD_INT 1
56310: LESS
56311: IFFALSE 56315
// exit ;
56313: GO 56618
// if pos = 1 then
56315: LD_VAR 0 2
56319: PUSH
56320: LD_INT 1
56322: EQUAL
56323: IFFALSE 56356
// result := Replace ( arr , pos [ 1 ] , value ) else
56325: LD_ADDR_VAR 0 4
56329: PUSH
56330: LD_VAR 0 1
56334: PPUSH
56335: LD_VAR 0 2
56339: PUSH
56340: LD_INT 1
56342: ARRAY
56343: PPUSH
56344: LD_VAR 0 3
56348: PPUSH
56349: CALL_OW 1
56353: ST_TO_ADDR
56354: GO 56618
// begin tmp := arr ;
56356: LD_ADDR_VAR 0 6
56360: PUSH
56361: LD_VAR 0 1
56365: ST_TO_ADDR
// s_arr := [ tmp ] ;
56366: LD_ADDR_VAR 0 7
56370: PUSH
56371: LD_VAR 0 6
56375: PUSH
56376: EMPTY
56377: LIST
56378: ST_TO_ADDR
// for i = 1 to pos - 1 do
56379: LD_ADDR_VAR 0 5
56383: PUSH
56384: DOUBLE
56385: LD_INT 1
56387: DEC
56388: ST_TO_ADDR
56389: LD_VAR 0 2
56393: PUSH
56394: LD_INT 1
56396: MINUS
56397: PUSH
56398: FOR_TO
56399: IFFALSE 56444
// begin tmp := tmp [ pos [ i ] ] ;
56401: LD_ADDR_VAR 0 6
56405: PUSH
56406: LD_VAR 0 6
56410: PUSH
56411: LD_VAR 0 2
56415: PUSH
56416: LD_VAR 0 5
56420: ARRAY
56421: ARRAY
56422: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
56423: LD_ADDR_VAR 0 7
56427: PUSH
56428: LD_VAR 0 7
56432: PUSH
56433: LD_VAR 0 6
56437: PUSH
56438: EMPTY
56439: LIST
56440: ADD
56441: ST_TO_ADDR
// end ;
56442: GO 56398
56444: POP
56445: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
56446: LD_ADDR_VAR 0 6
56450: PUSH
56451: LD_VAR 0 6
56455: PPUSH
56456: LD_VAR 0 2
56460: PUSH
56461: LD_VAR 0 2
56465: ARRAY
56466: PPUSH
56467: LD_VAR 0 3
56471: PPUSH
56472: CALL_OW 1
56476: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
56477: LD_ADDR_VAR 0 7
56481: PUSH
56482: LD_VAR 0 7
56486: PPUSH
56487: LD_VAR 0 7
56491: PPUSH
56492: LD_VAR 0 6
56496: PPUSH
56497: CALL_OW 1
56501: ST_TO_ADDR
// for i = s_arr downto 2 do
56502: LD_ADDR_VAR 0 5
56506: PUSH
56507: DOUBLE
56508: LD_VAR 0 7
56512: INC
56513: ST_TO_ADDR
56514: LD_INT 2
56516: PUSH
56517: FOR_DOWNTO
56518: IFFALSE 56602
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
56520: LD_ADDR_VAR 0 6
56524: PUSH
56525: LD_VAR 0 7
56529: PUSH
56530: LD_VAR 0 5
56534: PUSH
56535: LD_INT 1
56537: MINUS
56538: ARRAY
56539: PPUSH
56540: LD_VAR 0 2
56544: PUSH
56545: LD_VAR 0 5
56549: PUSH
56550: LD_INT 1
56552: MINUS
56553: ARRAY
56554: PPUSH
56555: LD_VAR 0 7
56559: PUSH
56560: LD_VAR 0 5
56564: ARRAY
56565: PPUSH
56566: CALL_OW 1
56570: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
56571: LD_ADDR_VAR 0 7
56575: PUSH
56576: LD_VAR 0 7
56580: PPUSH
56581: LD_VAR 0 5
56585: PUSH
56586: LD_INT 1
56588: MINUS
56589: PPUSH
56590: LD_VAR 0 6
56594: PPUSH
56595: CALL_OW 1
56599: ST_TO_ADDR
// end ;
56600: GO 56517
56602: POP
56603: POP
// result := s_arr [ 1 ] ;
56604: LD_ADDR_VAR 0 4
56608: PUSH
56609: LD_VAR 0 7
56613: PUSH
56614: LD_INT 1
56616: ARRAY
56617: ST_TO_ADDR
// end ; end ;
56618: LD_VAR 0 4
56622: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
56623: LD_INT 0
56625: PPUSH
56626: PPUSH
// if not list then
56627: LD_VAR 0 1
56631: NOT
56632: IFFALSE 56636
// exit ;
56634: GO 56727
// i := list [ pos1 ] ;
56636: LD_ADDR_VAR 0 5
56640: PUSH
56641: LD_VAR 0 1
56645: PUSH
56646: LD_VAR 0 2
56650: ARRAY
56651: ST_TO_ADDR
// if not i then
56652: LD_VAR 0 5
56656: NOT
56657: IFFALSE 56661
// exit ;
56659: GO 56727
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
56661: LD_ADDR_VAR 0 1
56665: PUSH
56666: LD_VAR 0 1
56670: PPUSH
56671: LD_VAR 0 2
56675: PPUSH
56676: LD_VAR 0 1
56680: PUSH
56681: LD_VAR 0 3
56685: ARRAY
56686: PPUSH
56687: CALL_OW 1
56691: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
56692: LD_ADDR_VAR 0 1
56696: PUSH
56697: LD_VAR 0 1
56701: PPUSH
56702: LD_VAR 0 3
56706: PPUSH
56707: LD_VAR 0 5
56711: PPUSH
56712: CALL_OW 1
56716: ST_TO_ADDR
// result := list ;
56717: LD_ADDR_VAR 0 4
56721: PUSH
56722: LD_VAR 0 1
56726: ST_TO_ADDR
// end ;
56727: LD_VAR 0 4
56731: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
56732: LD_INT 0
56734: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
56735: LD_ADDR_VAR 0 5
56739: PUSH
56740: LD_VAR 0 1
56744: PPUSH
56745: CALL_OW 250
56749: PPUSH
56750: LD_VAR 0 1
56754: PPUSH
56755: CALL_OW 251
56759: PPUSH
56760: LD_VAR 0 2
56764: PPUSH
56765: LD_VAR 0 3
56769: PPUSH
56770: LD_VAR 0 4
56774: PPUSH
56775: CALL 56785 0 5
56779: ST_TO_ADDR
// end ;
56780: LD_VAR 0 5
56784: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
56785: LD_INT 0
56787: PPUSH
56788: PPUSH
56789: PPUSH
56790: PPUSH
// if not list then
56791: LD_VAR 0 3
56795: NOT
56796: IFFALSE 56800
// exit ;
56798: GO 57188
// result := [ ] ;
56800: LD_ADDR_VAR 0 6
56804: PUSH
56805: EMPTY
56806: ST_TO_ADDR
// for i in list do
56807: LD_ADDR_VAR 0 7
56811: PUSH
56812: LD_VAR 0 3
56816: PUSH
56817: FOR_IN
56818: IFFALSE 57020
// begin tmp := GetDistUnitXY ( i , x , y ) ;
56820: LD_ADDR_VAR 0 9
56824: PUSH
56825: LD_VAR 0 7
56829: PPUSH
56830: LD_VAR 0 1
56834: PPUSH
56835: LD_VAR 0 2
56839: PPUSH
56840: CALL_OW 297
56844: ST_TO_ADDR
// if not result then
56845: LD_VAR 0 6
56849: NOT
56850: IFFALSE 56876
// result := [ [ i , tmp ] ] else
56852: LD_ADDR_VAR 0 6
56856: PUSH
56857: LD_VAR 0 7
56861: PUSH
56862: LD_VAR 0 9
56866: PUSH
56867: EMPTY
56868: LIST
56869: LIST
56870: PUSH
56871: EMPTY
56872: LIST
56873: ST_TO_ADDR
56874: GO 57018
// begin if result [ result ] [ 2 ] < tmp then
56876: LD_VAR 0 6
56880: PUSH
56881: LD_VAR 0 6
56885: ARRAY
56886: PUSH
56887: LD_INT 2
56889: ARRAY
56890: PUSH
56891: LD_VAR 0 9
56895: LESS
56896: IFFALSE 56938
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
56898: LD_ADDR_VAR 0 6
56902: PUSH
56903: LD_VAR 0 6
56907: PPUSH
56908: LD_VAR 0 6
56912: PUSH
56913: LD_INT 1
56915: PLUS
56916: PPUSH
56917: LD_VAR 0 7
56921: PUSH
56922: LD_VAR 0 9
56926: PUSH
56927: EMPTY
56928: LIST
56929: LIST
56930: PPUSH
56931: CALL_OW 2
56935: ST_TO_ADDR
56936: GO 57018
// for j = 1 to result do
56938: LD_ADDR_VAR 0 8
56942: PUSH
56943: DOUBLE
56944: LD_INT 1
56946: DEC
56947: ST_TO_ADDR
56948: LD_VAR 0 6
56952: PUSH
56953: FOR_TO
56954: IFFALSE 57016
// begin if tmp < result [ j ] [ 2 ] then
56956: LD_VAR 0 9
56960: PUSH
56961: LD_VAR 0 6
56965: PUSH
56966: LD_VAR 0 8
56970: ARRAY
56971: PUSH
56972: LD_INT 2
56974: ARRAY
56975: LESS
56976: IFFALSE 57014
// begin result := Insert ( result , j , [ i , tmp ] ) ;
56978: LD_ADDR_VAR 0 6
56982: PUSH
56983: LD_VAR 0 6
56987: PPUSH
56988: LD_VAR 0 8
56992: PPUSH
56993: LD_VAR 0 7
56997: PUSH
56998: LD_VAR 0 9
57002: PUSH
57003: EMPTY
57004: LIST
57005: LIST
57006: PPUSH
57007: CALL_OW 2
57011: ST_TO_ADDR
// break ;
57012: GO 57016
// end ; end ;
57014: GO 56953
57016: POP
57017: POP
// end ; end ;
57018: GO 56817
57020: POP
57021: POP
// if result and not asc then
57022: LD_VAR 0 6
57026: PUSH
57027: LD_VAR 0 4
57031: NOT
57032: AND
57033: IFFALSE 57108
// begin tmp := result ;
57035: LD_ADDR_VAR 0 9
57039: PUSH
57040: LD_VAR 0 6
57044: ST_TO_ADDR
// for i = tmp downto 1 do
57045: LD_ADDR_VAR 0 7
57049: PUSH
57050: DOUBLE
57051: LD_VAR 0 9
57055: INC
57056: ST_TO_ADDR
57057: LD_INT 1
57059: PUSH
57060: FOR_DOWNTO
57061: IFFALSE 57106
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
57063: LD_ADDR_VAR 0 6
57067: PUSH
57068: LD_VAR 0 6
57072: PPUSH
57073: LD_VAR 0 9
57077: PUSH
57078: LD_VAR 0 7
57082: MINUS
57083: PUSH
57084: LD_INT 1
57086: PLUS
57087: PPUSH
57088: LD_VAR 0 9
57092: PUSH
57093: LD_VAR 0 7
57097: ARRAY
57098: PPUSH
57099: CALL_OW 1
57103: ST_TO_ADDR
57104: GO 57060
57106: POP
57107: POP
// end ; tmp := [ ] ;
57108: LD_ADDR_VAR 0 9
57112: PUSH
57113: EMPTY
57114: ST_TO_ADDR
// if mode then
57115: LD_VAR 0 5
57119: IFFALSE 57188
// begin for i = 1 to result do
57121: LD_ADDR_VAR 0 7
57125: PUSH
57126: DOUBLE
57127: LD_INT 1
57129: DEC
57130: ST_TO_ADDR
57131: LD_VAR 0 6
57135: PUSH
57136: FOR_TO
57137: IFFALSE 57176
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
57139: LD_ADDR_VAR 0 9
57143: PUSH
57144: LD_VAR 0 9
57148: PPUSH
57149: LD_VAR 0 7
57153: PPUSH
57154: LD_VAR 0 6
57158: PUSH
57159: LD_VAR 0 7
57163: ARRAY
57164: PUSH
57165: LD_INT 1
57167: ARRAY
57168: PPUSH
57169: CALL_OW 1
57173: ST_TO_ADDR
57174: GO 57136
57176: POP
57177: POP
// result := tmp ;
57178: LD_ADDR_VAR 0 6
57182: PUSH
57183: LD_VAR 0 9
57187: ST_TO_ADDR
// end ; end ;
57188: LD_VAR 0 6
57192: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
57193: LD_INT 0
57195: PPUSH
57196: PPUSH
57197: PPUSH
57198: PPUSH
57199: PPUSH
57200: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
57201: LD_ADDR_VAR 0 5
57205: PUSH
57206: LD_INT 0
57208: PUSH
57209: LD_INT 0
57211: PUSH
57212: LD_INT 0
57214: PUSH
57215: EMPTY
57216: PUSH
57217: EMPTY
57218: LIST
57219: LIST
57220: LIST
57221: LIST
57222: ST_TO_ADDR
// if not x or not y then
57223: LD_VAR 0 2
57227: NOT
57228: PUSH
57229: LD_VAR 0 3
57233: NOT
57234: OR
57235: IFFALSE 57239
// exit ;
57237: GO 58889
// if not range then
57239: LD_VAR 0 4
57243: NOT
57244: IFFALSE 57254
// range := 10 ;
57246: LD_ADDR_VAR 0 4
57250: PUSH
57251: LD_INT 10
57253: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
57254: LD_ADDR_VAR 0 8
57258: PUSH
57259: LD_INT 81
57261: PUSH
57262: LD_VAR 0 1
57266: PUSH
57267: EMPTY
57268: LIST
57269: LIST
57270: PUSH
57271: LD_INT 92
57273: PUSH
57274: LD_VAR 0 2
57278: PUSH
57279: LD_VAR 0 3
57283: PUSH
57284: LD_VAR 0 4
57288: PUSH
57289: EMPTY
57290: LIST
57291: LIST
57292: LIST
57293: LIST
57294: PUSH
57295: LD_INT 3
57297: PUSH
57298: LD_INT 21
57300: PUSH
57301: LD_INT 3
57303: PUSH
57304: EMPTY
57305: LIST
57306: LIST
57307: PUSH
57308: EMPTY
57309: LIST
57310: LIST
57311: PUSH
57312: EMPTY
57313: LIST
57314: LIST
57315: LIST
57316: PPUSH
57317: CALL_OW 69
57321: ST_TO_ADDR
// if not tmp then
57322: LD_VAR 0 8
57326: NOT
57327: IFFALSE 57331
// exit ;
57329: GO 58889
// for i in tmp do
57331: LD_ADDR_VAR 0 6
57335: PUSH
57336: LD_VAR 0 8
57340: PUSH
57341: FOR_IN
57342: IFFALSE 58864
// begin points := [ 0 , 0 , 0 ] ;
57344: LD_ADDR_VAR 0 9
57348: PUSH
57349: LD_INT 0
57351: PUSH
57352: LD_INT 0
57354: PUSH
57355: LD_INT 0
57357: PUSH
57358: EMPTY
57359: LIST
57360: LIST
57361: LIST
57362: ST_TO_ADDR
// bpoints := 1 ;
57363: LD_ADDR_VAR 0 10
57367: PUSH
57368: LD_INT 1
57370: ST_TO_ADDR
// case GetType ( i ) of unit_human :
57371: LD_VAR 0 6
57375: PPUSH
57376: CALL_OW 247
57380: PUSH
57381: LD_INT 1
57383: DOUBLE
57384: EQUAL
57385: IFTRUE 57389
57387: GO 57967
57389: POP
// begin if GetClass ( i ) = 1 then
57390: LD_VAR 0 6
57394: PPUSH
57395: CALL_OW 257
57399: PUSH
57400: LD_INT 1
57402: EQUAL
57403: IFFALSE 57424
// points := [ 10 , 5 , 3 ] ;
57405: LD_ADDR_VAR 0 9
57409: PUSH
57410: LD_INT 10
57412: PUSH
57413: LD_INT 5
57415: PUSH
57416: LD_INT 3
57418: PUSH
57419: EMPTY
57420: LIST
57421: LIST
57422: LIST
57423: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
57424: LD_VAR 0 6
57428: PPUSH
57429: CALL_OW 257
57433: PUSH
57434: LD_INT 2
57436: PUSH
57437: LD_INT 3
57439: PUSH
57440: LD_INT 4
57442: PUSH
57443: EMPTY
57444: LIST
57445: LIST
57446: LIST
57447: IN
57448: IFFALSE 57469
// points := [ 3 , 2 , 1 ] ;
57450: LD_ADDR_VAR 0 9
57454: PUSH
57455: LD_INT 3
57457: PUSH
57458: LD_INT 2
57460: PUSH
57461: LD_INT 1
57463: PUSH
57464: EMPTY
57465: LIST
57466: LIST
57467: LIST
57468: ST_TO_ADDR
// if GetClass ( i ) = 5 then
57469: LD_VAR 0 6
57473: PPUSH
57474: CALL_OW 257
57478: PUSH
57479: LD_INT 5
57481: EQUAL
57482: IFFALSE 57503
// points := [ 130 , 5 , 2 ] ;
57484: LD_ADDR_VAR 0 9
57488: PUSH
57489: LD_INT 130
57491: PUSH
57492: LD_INT 5
57494: PUSH
57495: LD_INT 2
57497: PUSH
57498: EMPTY
57499: LIST
57500: LIST
57501: LIST
57502: ST_TO_ADDR
// if GetClass ( i ) = 8 then
57503: LD_VAR 0 6
57507: PPUSH
57508: CALL_OW 257
57512: PUSH
57513: LD_INT 8
57515: EQUAL
57516: IFFALSE 57537
// points := [ 35 , 35 , 30 ] ;
57518: LD_ADDR_VAR 0 9
57522: PUSH
57523: LD_INT 35
57525: PUSH
57526: LD_INT 35
57528: PUSH
57529: LD_INT 30
57531: PUSH
57532: EMPTY
57533: LIST
57534: LIST
57535: LIST
57536: ST_TO_ADDR
// if GetClass ( i ) = 9 then
57537: LD_VAR 0 6
57541: PPUSH
57542: CALL_OW 257
57546: PUSH
57547: LD_INT 9
57549: EQUAL
57550: IFFALSE 57571
// points := [ 20 , 55 , 40 ] ;
57552: LD_ADDR_VAR 0 9
57556: PUSH
57557: LD_INT 20
57559: PUSH
57560: LD_INT 55
57562: PUSH
57563: LD_INT 40
57565: PUSH
57566: EMPTY
57567: LIST
57568: LIST
57569: LIST
57570: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
57571: LD_VAR 0 6
57575: PPUSH
57576: CALL_OW 257
57580: PUSH
57581: LD_INT 12
57583: PUSH
57584: LD_INT 16
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: IN
57591: IFFALSE 57612
// points := [ 5 , 3 , 2 ] ;
57593: LD_ADDR_VAR 0 9
57597: PUSH
57598: LD_INT 5
57600: PUSH
57601: LD_INT 3
57603: PUSH
57604: LD_INT 2
57606: PUSH
57607: EMPTY
57608: LIST
57609: LIST
57610: LIST
57611: ST_TO_ADDR
// if GetClass ( i ) = 17 then
57612: LD_VAR 0 6
57616: PPUSH
57617: CALL_OW 257
57621: PUSH
57622: LD_INT 17
57624: EQUAL
57625: IFFALSE 57646
// points := [ 100 , 50 , 75 ] ;
57627: LD_ADDR_VAR 0 9
57631: PUSH
57632: LD_INT 100
57634: PUSH
57635: LD_INT 50
57637: PUSH
57638: LD_INT 75
57640: PUSH
57641: EMPTY
57642: LIST
57643: LIST
57644: LIST
57645: ST_TO_ADDR
// if GetClass ( i ) = 15 then
57646: LD_VAR 0 6
57650: PPUSH
57651: CALL_OW 257
57655: PUSH
57656: LD_INT 15
57658: EQUAL
57659: IFFALSE 57680
// points := [ 10 , 5 , 3 ] ;
57661: LD_ADDR_VAR 0 9
57665: PUSH
57666: LD_INT 10
57668: PUSH
57669: LD_INT 5
57671: PUSH
57672: LD_INT 3
57674: PUSH
57675: EMPTY
57676: LIST
57677: LIST
57678: LIST
57679: ST_TO_ADDR
// if GetClass ( i ) = 14 then
57680: LD_VAR 0 6
57684: PPUSH
57685: CALL_OW 257
57689: PUSH
57690: LD_INT 14
57692: EQUAL
57693: IFFALSE 57714
// points := [ 10 , 0 , 0 ] ;
57695: LD_ADDR_VAR 0 9
57699: PUSH
57700: LD_INT 10
57702: PUSH
57703: LD_INT 0
57705: PUSH
57706: LD_INT 0
57708: PUSH
57709: EMPTY
57710: LIST
57711: LIST
57712: LIST
57713: ST_TO_ADDR
// if GetClass ( i ) = 11 then
57714: LD_VAR 0 6
57718: PPUSH
57719: CALL_OW 257
57723: PUSH
57724: LD_INT 11
57726: EQUAL
57727: IFFALSE 57748
// points := [ 30 , 10 , 5 ] ;
57729: LD_ADDR_VAR 0 9
57733: PUSH
57734: LD_INT 30
57736: PUSH
57737: LD_INT 10
57739: PUSH
57740: LD_INT 5
57742: PUSH
57743: EMPTY
57744: LIST
57745: LIST
57746: LIST
57747: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
57748: LD_VAR 0 1
57752: PPUSH
57753: LD_INT 5
57755: PPUSH
57756: CALL_OW 321
57760: PUSH
57761: LD_INT 2
57763: EQUAL
57764: IFFALSE 57781
// bpoints := bpoints * 1.8 ;
57766: LD_ADDR_VAR 0 10
57770: PUSH
57771: LD_VAR 0 10
57775: PUSH
57776: LD_REAL  1.80000000000000E+0000
57779: MUL
57780: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
57781: LD_VAR 0 6
57785: PPUSH
57786: CALL_OW 257
57790: PUSH
57791: LD_INT 1
57793: PUSH
57794: LD_INT 2
57796: PUSH
57797: LD_INT 3
57799: PUSH
57800: LD_INT 4
57802: PUSH
57803: EMPTY
57804: LIST
57805: LIST
57806: LIST
57807: LIST
57808: IN
57809: PUSH
57810: LD_VAR 0 1
57814: PPUSH
57815: LD_INT 51
57817: PPUSH
57818: CALL_OW 321
57822: PUSH
57823: LD_INT 2
57825: EQUAL
57826: AND
57827: IFFALSE 57844
// bpoints := bpoints * 1.2 ;
57829: LD_ADDR_VAR 0 10
57833: PUSH
57834: LD_VAR 0 10
57838: PUSH
57839: LD_REAL  1.20000000000000E+0000
57842: MUL
57843: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
57844: LD_VAR 0 6
57848: PPUSH
57849: CALL_OW 257
57853: PUSH
57854: LD_INT 5
57856: PUSH
57857: LD_INT 7
57859: PUSH
57860: LD_INT 9
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: LIST
57867: IN
57868: PUSH
57869: LD_VAR 0 1
57873: PPUSH
57874: LD_INT 52
57876: PPUSH
57877: CALL_OW 321
57881: PUSH
57882: LD_INT 2
57884: EQUAL
57885: AND
57886: IFFALSE 57903
// bpoints := bpoints * 1.5 ;
57888: LD_ADDR_VAR 0 10
57892: PUSH
57893: LD_VAR 0 10
57897: PUSH
57898: LD_REAL  1.50000000000000E+0000
57901: MUL
57902: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
57903: LD_VAR 0 1
57907: PPUSH
57908: LD_INT 66
57910: PPUSH
57911: CALL_OW 321
57915: PUSH
57916: LD_INT 2
57918: EQUAL
57919: IFFALSE 57936
// bpoints := bpoints * 1.1 ;
57921: LD_ADDR_VAR 0 10
57925: PUSH
57926: LD_VAR 0 10
57930: PUSH
57931: LD_REAL  1.10000000000000E+0000
57934: MUL
57935: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
57936: LD_ADDR_VAR 0 10
57940: PUSH
57941: LD_VAR 0 10
57945: PUSH
57946: LD_VAR 0 6
57950: PPUSH
57951: LD_INT 1
57953: PPUSH
57954: CALL_OW 259
57958: PUSH
57959: LD_REAL  1.15000000000000E+0000
57962: MUL
57963: MUL
57964: ST_TO_ADDR
// end ; unit_vehicle :
57965: GO 58793
57967: LD_INT 2
57969: DOUBLE
57970: EQUAL
57971: IFTRUE 57975
57973: GO 58781
57975: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
57976: LD_VAR 0 6
57980: PPUSH
57981: CALL_OW 264
57985: PUSH
57986: LD_INT 2
57988: PUSH
57989: LD_INT 42
57991: PUSH
57992: LD_INT 24
57994: PUSH
57995: EMPTY
57996: LIST
57997: LIST
57998: LIST
57999: IN
58000: IFFALSE 58021
// points := [ 25 , 5 , 3 ] ;
58002: LD_ADDR_VAR 0 9
58006: PUSH
58007: LD_INT 25
58009: PUSH
58010: LD_INT 5
58012: PUSH
58013: LD_INT 3
58015: PUSH
58016: EMPTY
58017: LIST
58018: LIST
58019: LIST
58020: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
58021: LD_VAR 0 6
58025: PPUSH
58026: CALL_OW 264
58030: PUSH
58031: LD_INT 4
58033: PUSH
58034: LD_INT 43
58036: PUSH
58037: LD_INT 25
58039: PUSH
58040: EMPTY
58041: LIST
58042: LIST
58043: LIST
58044: IN
58045: IFFALSE 58066
// points := [ 40 , 15 , 5 ] ;
58047: LD_ADDR_VAR 0 9
58051: PUSH
58052: LD_INT 40
58054: PUSH
58055: LD_INT 15
58057: PUSH
58058: LD_INT 5
58060: PUSH
58061: EMPTY
58062: LIST
58063: LIST
58064: LIST
58065: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
58066: LD_VAR 0 6
58070: PPUSH
58071: CALL_OW 264
58075: PUSH
58076: LD_INT 3
58078: PUSH
58079: LD_INT 23
58081: PUSH
58082: EMPTY
58083: LIST
58084: LIST
58085: IN
58086: IFFALSE 58107
// points := [ 7 , 25 , 8 ] ;
58088: LD_ADDR_VAR 0 9
58092: PUSH
58093: LD_INT 7
58095: PUSH
58096: LD_INT 25
58098: PUSH
58099: LD_INT 8
58101: PUSH
58102: EMPTY
58103: LIST
58104: LIST
58105: LIST
58106: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
58107: LD_VAR 0 6
58111: PPUSH
58112: CALL_OW 264
58116: PUSH
58117: LD_INT 5
58119: PUSH
58120: LD_INT 27
58122: PUSH
58123: LD_INT 44
58125: PUSH
58126: EMPTY
58127: LIST
58128: LIST
58129: LIST
58130: IN
58131: IFFALSE 58152
// points := [ 14 , 50 , 16 ] ;
58133: LD_ADDR_VAR 0 9
58137: PUSH
58138: LD_INT 14
58140: PUSH
58141: LD_INT 50
58143: PUSH
58144: LD_INT 16
58146: PUSH
58147: EMPTY
58148: LIST
58149: LIST
58150: LIST
58151: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
58152: LD_VAR 0 6
58156: PPUSH
58157: CALL_OW 264
58161: PUSH
58162: LD_INT 6
58164: PUSH
58165: LD_INT 46
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: IN
58172: IFFALSE 58193
// points := [ 32 , 120 , 70 ] ;
58174: LD_ADDR_VAR 0 9
58178: PUSH
58179: LD_INT 32
58181: PUSH
58182: LD_INT 120
58184: PUSH
58185: LD_INT 70
58187: PUSH
58188: EMPTY
58189: LIST
58190: LIST
58191: LIST
58192: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
58193: LD_VAR 0 6
58197: PPUSH
58198: CALL_OW 264
58202: PUSH
58203: LD_INT 7
58205: PUSH
58206: LD_INT 28
58208: PUSH
58209: LD_INT 45
58211: PUSH
58212: LD_INT 92
58214: PUSH
58215: EMPTY
58216: LIST
58217: LIST
58218: LIST
58219: LIST
58220: IN
58221: IFFALSE 58242
// points := [ 35 , 20 , 45 ] ;
58223: LD_ADDR_VAR 0 9
58227: PUSH
58228: LD_INT 35
58230: PUSH
58231: LD_INT 20
58233: PUSH
58234: LD_INT 45
58236: PUSH
58237: EMPTY
58238: LIST
58239: LIST
58240: LIST
58241: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
58242: LD_VAR 0 6
58246: PPUSH
58247: CALL_OW 264
58251: PUSH
58252: LD_INT 47
58254: PUSH
58255: EMPTY
58256: LIST
58257: IN
58258: IFFALSE 58279
// points := [ 67 , 45 , 75 ] ;
58260: LD_ADDR_VAR 0 9
58264: PUSH
58265: LD_INT 67
58267: PUSH
58268: LD_INT 45
58270: PUSH
58271: LD_INT 75
58273: PUSH
58274: EMPTY
58275: LIST
58276: LIST
58277: LIST
58278: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
58279: LD_VAR 0 6
58283: PPUSH
58284: CALL_OW 264
58288: PUSH
58289: LD_INT 26
58291: PUSH
58292: EMPTY
58293: LIST
58294: IN
58295: IFFALSE 58316
// points := [ 120 , 30 , 80 ] ;
58297: LD_ADDR_VAR 0 9
58301: PUSH
58302: LD_INT 120
58304: PUSH
58305: LD_INT 30
58307: PUSH
58308: LD_INT 80
58310: PUSH
58311: EMPTY
58312: LIST
58313: LIST
58314: LIST
58315: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
58316: LD_VAR 0 6
58320: PPUSH
58321: CALL_OW 264
58325: PUSH
58326: LD_INT 22
58328: PUSH
58329: EMPTY
58330: LIST
58331: IN
58332: IFFALSE 58353
// points := [ 40 , 1 , 1 ] ;
58334: LD_ADDR_VAR 0 9
58338: PUSH
58339: LD_INT 40
58341: PUSH
58342: LD_INT 1
58344: PUSH
58345: LD_INT 1
58347: PUSH
58348: EMPTY
58349: LIST
58350: LIST
58351: LIST
58352: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
58353: LD_VAR 0 6
58357: PPUSH
58358: CALL_OW 264
58362: PUSH
58363: LD_INT 29
58365: PUSH
58366: EMPTY
58367: LIST
58368: IN
58369: IFFALSE 58390
// points := [ 70 , 200 , 400 ] ;
58371: LD_ADDR_VAR 0 9
58375: PUSH
58376: LD_INT 70
58378: PUSH
58379: LD_INT 200
58381: PUSH
58382: LD_INT 400
58384: PUSH
58385: EMPTY
58386: LIST
58387: LIST
58388: LIST
58389: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
58390: LD_VAR 0 6
58394: PPUSH
58395: CALL_OW 264
58399: PUSH
58400: LD_INT 14
58402: PUSH
58403: LD_INT 53
58405: PUSH
58406: EMPTY
58407: LIST
58408: LIST
58409: IN
58410: IFFALSE 58431
// points := [ 40 , 10 , 20 ] ;
58412: LD_ADDR_VAR 0 9
58416: PUSH
58417: LD_INT 40
58419: PUSH
58420: LD_INT 10
58422: PUSH
58423: LD_INT 20
58425: PUSH
58426: EMPTY
58427: LIST
58428: LIST
58429: LIST
58430: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
58431: LD_VAR 0 6
58435: PPUSH
58436: CALL_OW 264
58440: PUSH
58441: LD_INT 9
58443: PUSH
58444: EMPTY
58445: LIST
58446: IN
58447: IFFALSE 58468
// points := [ 5 , 70 , 20 ] ;
58449: LD_ADDR_VAR 0 9
58453: PUSH
58454: LD_INT 5
58456: PUSH
58457: LD_INT 70
58459: PUSH
58460: LD_INT 20
58462: PUSH
58463: EMPTY
58464: LIST
58465: LIST
58466: LIST
58467: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
58468: LD_VAR 0 6
58472: PPUSH
58473: CALL_OW 264
58477: PUSH
58478: LD_INT 10
58480: PUSH
58481: EMPTY
58482: LIST
58483: IN
58484: IFFALSE 58505
// points := [ 35 , 110 , 70 ] ;
58486: LD_ADDR_VAR 0 9
58490: PUSH
58491: LD_INT 35
58493: PUSH
58494: LD_INT 110
58496: PUSH
58497: LD_INT 70
58499: PUSH
58500: EMPTY
58501: LIST
58502: LIST
58503: LIST
58504: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
58505: LD_VAR 0 6
58509: PPUSH
58510: CALL_OW 265
58514: PUSH
58515: LD_INT 25
58517: EQUAL
58518: IFFALSE 58539
// points := [ 80 , 65 , 100 ] ;
58520: LD_ADDR_VAR 0 9
58524: PUSH
58525: LD_INT 80
58527: PUSH
58528: LD_INT 65
58530: PUSH
58531: LD_INT 100
58533: PUSH
58534: EMPTY
58535: LIST
58536: LIST
58537: LIST
58538: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
58539: LD_VAR 0 6
58543: PPUSH
58544: CALL_OW 263
58548: PUSH
58549: LD_INT 1
58551: EQUAL
58552: IFFALSE 58587
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
58554: LD_ADDR_VAR 0 10
58558: PUSH
58559: LD_VAR 0 10
58563: PUSH
58564: LD_VAR 0 6
58568: PPUSH
58569: CALL_OW 311
58573: PPUSH
58574: LD_INT 3
58576: PPUSH
58577: CALL_OW 259
58581: PUSH
58582: LD_INT 4
58584: MUL
58585: MUL
58586: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
58587: LD_VAR 0 6
58591: PPUSH
58592: CALL_OW 263
58596: PUSH
58597: LD_INT 2
58599: EQUAL
58600: IFFALSE 58651
// begin j := IsControledBy ( i ) ;
58602: LD_ADDR_VAR 0 7
58606: PUSH
58607: LD_VAR 0 6
58611: PPUSH
58612: CALL_OW 312
58616: ST_TO_ADDR
// if j then
58617: LD_VAR 0 7
58621: IFFALSE 58651
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
58623: LD_ADDR_VAR 0 10
58627: PUSH
58628: LD_VAR 0 10
58632: PUSH
58633: LD_VAR 0 7
58637: PPUSH
58638: LD_INT 3
58640: PPUSH
58641: CALL_OW 259
58645: PUSH
58646: LD_INT 3
58648: MUL
58649: MUL
58650: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
58651: LD_VAR 0 6
58655: PPUSH
58656: CALL_OW 264
58660: PUSH
58661: LD_INT 5
58663: PUSH
58664: LD_INT 6
58666: PUSH
58667: LD_INT 46
58669: PUSH
58670: LD_INT 44
58672: PUSH
58673: LD_INT 47
58675: PUSH
58676: LD_INT 45
58678: PUSH
58679: LD_INT 28
58681: PUSH
58682: LD_INT 7
58684: PUSH
58685: LD_INT 27
58687: PUSH
58688: LD_INT 29
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: LIST
58695: LIST
58696: LIST
58697: LIST
58698: LIST
58699: LIST
58700: LIST
58701: LIST
58702: IN
58703: PUSH
58704: LD_VAR 0 1
58708: PPUSH
58709: LD_INT 52
58711: PPUSH
58712: CALL_OW 321
58716: PUSH
58717: LD_INT 2
58719: EQUAL
58720: AND
58721: IFFALSE 58738
// bpoints := bpoints * 1.2 ;
58723: LD_ADDR_VAR 0 10
58727: PUSH
58728: LD_VAR 0 10
58732: PUSH
58733: LD_REAL  1.20000000000000E+0000
58736: MUL
58737: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
58738: LD_VAR 0 6
58742: PPUSH
58743: CALL_OW 264
58747: PUSH
58748: LD_INT 6
58750: PUSH
58751: LD_INT 46
58753: PUSH
58754: LD_INT 47
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: LIST
58761: IN
58762: IFFALSE 58779
// bpoints := bpoints * 1.2 ;
58764: LD_ADDR_VAR 0 10
58768: PUSH
58769: LD_VAR 0 10
58773: PUSH
58774: LD_REAL  1.20000000000000E+0000
58777: MUL
58778: ST_TO_ADDR
// end ; unit_building :
58779: GO 58793
58781: LD_INT 3
58783: DOUBLE
58784: EQUAL
58785: IFTRUE 58789
58787: GO 58792
58789: POP
// ; end ;
58790: GO 58793
58792: POP
// for j = 1 to 3 do
58793: LD_ADDR_VAR 0 7
58797: PUSH
58798: DOUBLE
58799: LD_INT 1
58801: DEC
58802: ST_TO_ADDR
58803: LD_INT 3
58805: PUSH
58806: FOR_TO
58807: IFFALSE 58860
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
58809: LD_ADDR_VAR 0 5
58813: PUSH
58814: LD_VAR 0 5
58818: PPUSH
58819: LD_VAR 0 7
58823: PPUSH
58824: LD_VAR 0 5
58828: PUSH
58829: LD_VAR 0 7
58833: ARRAY
58834: PUSH
58835: LD_VAR 0 9
58839: PUSH
58840: LD_VAR 0 7
58844: ARRAY
58845: PUSH
58846: LD_VAR 0 10
58850: MUL
58851: PLUS
58852: PPUSH
58853: CALL_OW 1
58857: ST_TO_ADDR
58858: GO 58806
58860: POP
58861: POP
// end ;
58862: GO 57341
58864: POP
58865: POP
// result := Replace ( result , 4 , tmp ) ;
58866: LD_ADDR_VAR 0 5
58870: PUSH
58871: LD_VAR 0 5
58875: PPUSH
58876: LD_INT 4
58878: PPUSH
58879: LD_VAR 0 8
58883: PPUSH
58884: CALL_OW 1
58888: ST_TO_ADDR
// end ;
58889: LD_VAR 0 5
58893: RET
// export function DangerAtRange ( unit , range ) ; begin
58894: LD_INT 0
58896: PPUSH
// if not unit then
58897: LD_VAR 0 1
58901: NOT
58902: IFFALSE 58906
// exit ;
58904: GO 58951
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
58906: LD_ADDR_VAR 0 3
58910: PUSH
58911: LD_VAR 0 1
58915: PPUSH
58916: CALL_OW 255
58920: PPUSH
58921: LD_VAR 0 1
58925: PPUSH
58926: CALL_OW 250
58930: PPUSH
58931: LD_VAR 0 1
58935: PPUSH
58936: CALL_OW 251
58940: PPUSH
58941: LD_VAR 0 2
58945: PPUSH
58946: CALL 57193 0 4
58950: ST_TO_ADDR
// end ;
58951: LD_VAR 0 3
58955: RET
// export function DangerInArea ( side , area ) ; begin
58956: LD_INT 0
58958: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
58959: LD_ADDR_VAR 0 3
58963: PUSH
58964: LD_VAR 0 2
58968: PPUSH
58969: LD_INT 81
58971: PUSH
58972: LD_VAR 0 1
58976: PUSH
58977: EMPTY
58978: LIST
58979: LIST
58980: PPUSH
58981: CALL_OW 70
58985: ST_TO_ADDR
// end ;
58986: LD_VAR 0 3
58990: RET
// export function IsExtension ( b ) ; begin
58991: LD_INT 0
58993: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
58994: LD_ADDR_VAR 0 2
58998: PUSH
58999: LD_VAR 0 1
59003: PUSH
59004: LD_INT 23
59006: PUSH
59007: LD_INT 20
59009: PUSH
59010: LD_INT 22
59012: PUSH
59013: LD_INT 17
59015: PUSH
59016: LD_INT 24
59018: PUSH
59019: LD_INT 21
59021: PUSH
59022: LD_INT 19
59024: PUSH
59025: LD_INT 16
59027: PUSH
59028: LD_INT 25
59030: PUSH
59031: LD_INT 18
59033: PUSH
59034: EMPTY
59035: LIST
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: LIST
59042: LIST
59043: LIST
59044: LIST
59045: IN
59046: ST_TO_ADDR
// end ;
59047: LD_VAR 0 2
59051: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
59052: LD_INT 0
59054: PPUSH
59055: PPUSH
59056: PPUSH
// result := [ ] ;
59057: LD_ADDR_VAR 0 4
59061: PUSH
59062: EMPTY
59063: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
59064: LD_ADDR_VAR 0 5
59068: PUSH
59069: LD_VAR 0 2
59073: PPUSH
59074: LD_INT 21
59076: PUSH
59077: LD_INT 3
59079: PUSH
59080: EMPTY
59081: LIST
59082: LIST
59083: PPUSH
59084: CALL_OW 70
59088: ST_TO_ADDR
// if not tmp then
59089: LD_VAR 0 5
59093: NOT
59094: IFFALSE 59098
// exit ;
59096: GO 59162
// if checkLink then
59098: LD_VAR 0 3
59102: IFFALSE 59152
// begin for i in tmp do
59104: LD_ADDR_VAR 0 6
59108: PUSH
59109: LD_VAR 0 5
59113: PUSH
59114: FOR_IN
59115: IFFALSE 59150
// if GetBase ( i ) <> base then
59117: LD_VAR 0 6
59121: PPUSH
59122: CALL_OW 274
59126: PUSH
59127: LD_VAR 0 1
59131: NONEQUAL
59132: IFFALSE 59148
// ComLinkToBase ( base , i ) ;
59134: LD_VAR 0 1
59138: PPUSH
59139: LD_VAR 0 6
59143: PPUSH
59144: CALL_OW 169
59148: GO 59114
59150: POP
59151: POP
// end ; result := tmp ;
59152: LD_ADDR_VAR 0 4
59156: PUSH
59157: LD_VAR 0 5
59161: ST_TO_ADDR
// end ;
59162: LD_VAR 0 4
59166: RET
// export function ComComplete ( units , b ) ; var i ; begin
59167: LD_INT 0
59169: PPUSH
59170: PPUSH
// if not units then
59171: LD_VAR 0 1
59175: NOT
59176: IFFALSE 59180
// exit ;
59178: GO 59270
// for i in units do
59180: LD_ADDR_VAR 0 4
59184: PUSH
59185: LD_VAR 0 1
59189: PUSH
59190: FOR_IN
59191: IFFALSE 59268
// if BuildingStatus ( b ) = bs_build then
59193: LD_VAR 0 2
59197: PPUSH
59198: CALL_OW 461
59202: PUSH
59203: LD_INT 1
59205: EQUAL
59206: IFFALSE 59266
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
59208: LD_VAR 0 4
59212: PPUSH
59213: LD_STRING h
59215: PUSH
59216: LD_VAR 0 2
59220: PPUSH
59221: CALL_OW 250
59225: PUSH
59226: LD_VAR 0 2
59230: PPUSH
59231: CALL_OW 251
59235: PUSH
59236: LD_VAR 0 2
59240: PUSH
59241: LD_INT 0
59243: PUSH
59244: LD_INT 0
59246: PUSH
59247: LD_INT 0
59249: PUSH
59250: EMPTY
59251: LIST
59252: LIST
59253: LIST
59254: LIST
59255: LIST
59256: LIST
59257: LIST
59258: PUSH
59259: EMPTY
59260: LIST
59261: PPUSH
59262: CALL_OW 446
59266: GO 59190
59268: POP
59269: POP
// end ;
59270: LD_VAR 0 3
59274: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
59275: LD_INT 0
59277: PPUSH
59278: PPUSH
59279: PPUSH
59280: PPUSH
59281: PPUSH
59282: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
59283: LD_VAR 0 1
59287: NOT
59288: PUSH
59289: LD_VAR 0 1
59293: PPUSH
59294: CALL_OW 263
59298: PUSH
59299: LD_INT 2
59301: NONEQUAL
59302: OR
59303: IFFALSE 59307
// exit ;
59305: GO 59623
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
59307: LD_ADDR_VAR 0 6
59311: PUSH
59312: LD_INT 22
59314: PUSH
59315: LD_VAR 0 1
59319: PPUSH
59320: CALL_OW 255
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 2
59331: PUSH
59332: LD_INT 30
59334: PUSH
59335: LD_INT 36
59337: PUSH
59338: EMPTY
59339: LIST
59340: LIST
59341: PUSH
59342: LD_INT 34
59344: PUSH
59345: LD_INT 31
59347: PUSH
59348: EMPTY
59349: LIST
59350: LIST
59351: PUSH
59352: EMPTY
59353: LIST
59354: LIST
59355: LIST
59356: PUSH
59357: EMPTY
59358: LIST
59359: LIST
59360: PPUSH
59361: CALL_OW 69
59365: ST_TO_ADDR
// if not tmp then
59366: LD_VAR 0 6
59370: NOT
59371: IFFALSE 59375
// exit ;
59373: GO 59623
// result := [ ] ;
59375: LD_ADDR_VAR 0 2
59379: PUSH
59380: EMPTY
59381: ST_TO_ADDR
// for i in tmp do
59382: LD_ADDR_VAR 0 3
59386: PUSH
59387: LD_VAR 0 6
59391: PUSH
59392: FOR_IN
59393: IFFALSE 59464
// begin t := UnitsInside ( i ) ;
59395: LD_ADDR_VAR 0 4
59399: PUSH
59400: LD_VAR 0 3
59404: PPUSH
59405: CALL_OW 313
59409: ST_TO_ADDR
// if t then
59410: LD_VAR 0 4
59414: IFFALSE 59462
// for j in t do
59416: LD_ADDR_VAR 0 7
59420: PUSH
59421: LD_VAR 0 4
59425: PUSH
59426: FOR_IN
59427: IFFALSE 59460
// result := Replace ( result , result + 1 , j ) ;
59429: LD_ADDR_VAR 0 2
59433: PUSH
59434: LD_VAR 0 2
59438: PPUSH
59439: LD_VAR 0 2
59443: PUSH
59444: LD_INT 1
59446: PLUS
59447: PPUSH
59448: LD_VAR 0 7
59452: PPUSH
59453: CALL_OW 1
59457: ST_TO_ADDR
59458: GO 59426
59460: POP
59461: POP
// end ;
59462: GO 59392
59464: POP
59465: POP
// if not result then
59466: LD_VAR 0 2
59470: NOT
59471: IFFALSE 59475
// exit ;
59473: GO 59623
// mech := result [ 1 ] ;
59475: LD_ADDR_VAR 0 5
59479: PUSH
59480: LD_VAR 0 2
59484: PUSH
59485: LD_INT 1
59487: ARRAY
59488: ST_TO_ADDR
// if result > 1 then
59489: LD_VAR 0 2
59493: PUSH
59494: LD_INT 1
59496: GREATER
59497: IFFALSE 59609
// begin for i = 2 to result do
59499: LD_ADDR_VAR 0 3
59503: PUSH
59504: DOUBLE
59505: LD_INT 2
59507: DEC
59508: ST_TO_ADDR
59509: LD_VAR 0 2
59513: PUSH
59514: FOR_TO
59515: IFFALSE 59607
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
59517: LD_ADDR_VAR 0 4
59521: PUSH
59522: LD_VAR 0 2
59526: PUSH
59527: LD_VAR 0 3
59531: ARRAY
59532: PPUSH
59533: LD_INT 3
59535: PPUSH
59536: CALL_OW 259
59540: PUSH
59541: LD_VAR 0 2
59545: PUSH
59546: LD_VAR 0 3
59550: ARRAY
59551: PPUSH
59552: CALL_OW 432
59556: MINUS
59557: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
59558: LD_VAR 0 4
59562: PUSH
59563: LD_VAR 0 5
59567: PPUSH
59568: LD_INT 3
59570: PPUSH
59571: CALL_OW 259
59575: PUSH
59576: LD_VAR 0 5
59580: PPUSH
59581: CALL_OW 432
59585: MINUS
59586: GREATEREQUAL
59587: IFFALSE 59605
// mech := result [ i ] ;
59589: LD_ADDR_VAR 0 5
59593: PUSH
59594: LD_VAR 0 2
59598: PUSH
59599: LD_VAR 0 3
59603: ARRAY
59604: ST_TO_ADDR
// end ;
59605: GO 59514
59607: POP
59608: POP
// end ; ComLinkTo ( vehicle , mech ) ;
59609: LD_VAR 0 1
59613: PPUSH
59614: LD_VAR 0 5
59618: PPUSH
59619: CALL_OW 135
// end ;
59623: LD_VAR 0 2
59627: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
59628: LD_INT 0
59630: PPUSH
59631: PPUSH
59632: PPUSH
59633: PPUSH
59634: PPUSH
59635: PPUSH
59636: PPUSH
59637: PPUSH
59638: PPUSH
59639: PPUSH
59640: PPUSH
59641: PPUSH
59642: PPUSH
// result := [ ] ;
59643: LD_ADDR_VAR 0 7
59647: PUSH
59648: EMPTY
59649: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
59650: LD_VAR 0 1
59654: PPUSH
59655: CALL_OW 266
59659: PUSH
59660: LD_INT 0
59662: PUSH
59663: LD_INT 1
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: IN
59670: NOT
59671: IFFALSE 59675
// exit ;
59673: GO 61309
// if name then
59675: LD_VAR 0 3
59679: IFFALSE 59695
// SetBName ( base_dep , name ) ;
59681: LD_VAR 0 1
59685: PPUSH
59686: LD_VAR 0 3
59690: PPUSH
59691: CALL_OW 500
// base := GetBase ( base_dep ) ;
59695: LD_ADDR_VAR 0 15
59699: PUSH
59700: LD_VAR 0 1
59704: PPUSH
59705: CALL_OW 274
59709: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
59710: LD_ADDR_VAR 0 16
59714: PUSH
59715: LD_VAR 0 1
59719: PPUSH
59720: CALL_OW 255
59724: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
59725: LD_ADDR_VAR 0 17
59729: PUSH
59730: LD_VAR 0 1
59734: PPUSH
59735: CALL_OW 248
59739: ST_TO_ADDR
// if sources then
59740: LD_VAR 0 5
59744: IFFALSE 59791
// for i = 1 to 3 do
59746: LD_ADDR_VAR 0 8
59750: PUSH
59751: DOUBLE
59752: LD_INT 1
59754: DEC
59755: ST_TO_ADDR
59756: LD_INT 3
59758: PUSH
59759: FOR_TO
59760: IFFALSE 59789
// AddResourceType ( base , i , sources [ i ] ) ;
59762: LD_VAR 0 15
59766: PPUSH
59767: LD_VAR 0 8
59771: PPUSH
59772: LD_VAR 0 5
59776: PUSH
59777: LD_VAR 0 8
59781: ARRAY
59782: PPUSH
59783: CALL_OW 276
59787: GO 59759
59789: POP
59790: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
59791: LD_ADDR_VAR 0 18
59795: PUSH
59796: LD_VAR 0 15
59800: PPUSH
59801: LD_VAR 0 2
59805: PPUSH
59806: LD_INT 1
59808: PPUSH
59809: CALL 59052 0 3
59813: ST_TO_ADDR
// InitHc ;
59814: CALL_OW 19
// InitUc ;
59818: CALL_OW 18
// uc_side := side ;
59822: LD_ADDR_OWVAR 20
59826: PUSH
59827: LD_VAR 0 16
59831: ST_TO_ADDR
// uc_nation := nation ;
59832: LD_ADDR_OWVAR 21
59836: PUSH
59837: LD_VAR 0 17
59841: ST_TO_ADDR
// if buildings then
59842: LD_VAR 0 18
59846: IFFALSE 61168
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
59848: LD_ADDR_VAR 0 19
59852: PUSH
59853: LD_VAR 0 18
59857: PPUSH
59858: LD_INT 2
59860: PUSH
59861: LD_INT 30
59863: PUSH
59864: LD_INT 29
59866: PUSH
59867: EMPTY
59868: LIST
59869: LIST
59870: PUSH
59871: LD_INT 30
59873: PUSH
59874: LD_INT 30
59876: PUSH
59877: EMPTY
59878: LIST
59879: LIST
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: LIST
59885: PPUSH
59886: CALL_OW 72
59890: ST_TO_ADDR
// if tmp then
59891: LD_VAR 0 19
59895: IFFALSE 59943
// for i in tmp do
59897: LD_ADDR_VAR 0 8
59901: PUSH
59902: LD_VAR 0 19
59906: PUSH
59907: FOR_IN
59908: IFFALSE 59941
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
59910: LD_VAR 0 8
59914: PPUSH
59915: CALL_OW 250
59919: PPUSH
59920: LD_VAR 0 8
59924: PPUSH
59925: CALL_OW 251
59929: PPUSH
59930: LD_VAR 0 16
59934: PPUSH
59935: CALL_OW 441
59939: GO 59907
59941: POP
59942: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
59943: LD_VAR 0 18
59947: PPUSH
59948: LD_INT 2
59950: PUSH
59951: LD_INT 30
59953: PUSH
59954: LD_INT 32
59956: PUSH
59957: EMPTY
59958: LIST
59959: LIST
59960: PUSH
59961: LD_INT 30
59963: PUSH
59964: LD_INT 33
59966: PUSH
59967: EMPTY
59968: LIST
59969: LIST
59970: PUSH
59971: EMPTY
59972: LIST
59973: LIST
59974: LIST
59975: PPUSH
59976: CALL_OW 72
59980: IFFALSE 60068
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
59982: LD_ADDR_VAR 0 8
59986: PUSH
59987: LD_VAR 0 18
59991: PPUSH
59992: LD_INT 2
59994: PUSH
59995: LD_INT 30
59997: PUSH
59998: LD_INT 32
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: PUSH
60005: LD_INT 30
60007: PUSH
60008: LD_INT 33
60010: PUSH
60011: EMPTY
60012: LIST
60013: LIST
60014: PUSH
60015: EMPTY
60016: LIST
60017: LIST
60018: LIST
60019: PPUSH
60020: CALL_OW 72
60024: PUSH
60025: FOR_IN
60026: IFFALSE 60066
// begin if not GetBWeapon ( i ) then
60028: LD_VAR 0 8
60032: PPUSH
60033: CALL_OW 269
60037: NOT
60038: IFFALSE 60064
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
60040: LD_VAR 0 8
60044: PPUSH
60045: LD_VAR 0 8
60049: PPUSH
60050: LD_VAR 0 2
60054: PPUSH
60055: CALL 61314 0 2
60059: PPUSH
60060: CALL_OW 431
// end ;
60064: GO 60025
60066: POP
60067: POP
// end ; for i = 1 to personel do
60068: LD_ADDR_VAR 0 8
60072: PUSH
60073: DOUBLE
60074: LD_INT 1
60076: DEC
60077: ST_TO_ADDR
60078: LD_VAR 0 6
60082: PUSH
60083: FOR_TO
60084: IFFALSE 61148
// begin if i > 4 then
60086: LD_VAR 0 8
60090: PUSH
60091: LD_INT 4
60093: GREATER
60094: IFFALSE 60098
// break ;
60096: GO 61148
// case i of 1 :
60098: LD_VAR 0 8
60102: PUSH
60103: LD_INT 1
60105: DOUBLE
60106: EQUAL
60107: IFTRUE 60111
60109: GO 60191
60111: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
60112: LD_ADDR_VAR 0 12
60116: PUSH
60117: LD_VAR 0 18
60121: PPUSH
60122: LD_INT 22
60124: PUSH
60125: LD_VAR 0 16
60129: PUSH
60130: EMPTY
60131: LIST
60132: LIST
60133: PUSH
60134: LD_INT 58
60136: PUSH
60137: EMPTY
60138: LIST
60139: PUSH
60140: LD_INT 2
60142: PUSH
60143: LD_INT 30
60145: PUSH
60146: LD_INT 32
60148: PUSH
60149: EMPTY
60150: LIST
60151: LIST
60152: PUSH
60153: LD_INT 30
60155: PUSH
60156: LD_INT 4
60158: PUSH
60159: EMPTY
60160: LIST
60161: LIST
60162: PUSH
60163: LD_INT 30
60165: PUSH
60166: LD_INT 5
60168: PUSH
60169: EMPTY
60170: LIST
60171: LIST
60172: PUSH
60173: EMPTY
60174: LIST
60175: LIST
60176: LIST
60177: LIST
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: LIST
60183: PPUSH
60184: CALL_OW 72
60188: ST_TO_ADDR
60189: GO 60413
60191: LD_INT 2
60193: DOUBLE
60194: EQUAL
60195: IFTRUE 60199
60197: GO 60261
60199: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
60200: LD_ADDR_VAR 0 12
60204: PUSH
60205: LD_VAR 0 18
60209: PPUSH
60210: LD_INT 22
60212: PUSH
60213: LD_VAR 0 16
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: LD_INT 2
60224: PUSH
60225: LD_INT 30
60227: PUSH
60228: LD_INT 0
60230: PUSH
60231: EMPTY
60232: LIST
60233: LIST
60234: PUSH
60235: LD_INT 30
60237: PUSH
60238: LD_INT 1
60240: PUSH
60241: EMPTY
60242: LIST
60243: LIST
60244: PUSH
60245: EMPTY
60246: LIST
60247: LIST
60248: LIST
60249: PUSH
60250: EMPTY
60251: LIST
60252: LIST
60253: PPUSH
60254: CALL_OW 72
60258: ST_TO_ADDR
60259: GO 60413
60261: LD_INT 3
60263: DOUBLE
60264: EQUAL
60265: IFTRUE 60269
60267: GO 60331
60269: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
60270: LD_ADDR_VAR 0 12
60274: PUSH
60275: LD_VAR 0 18
60279: PPUSH
60280: LD_INT 22
60282: PUSH
60283: LD_VAR 0 16
60287: PUSH
60288: EMPTY
60289: LIST
60290: LIST
60291: PUSH
60292: LD_INT 2
60294: PUSH
60295: LD_INT 30
60297: PUSH
60298: LD_INT 2
60300: PUSH
60301: EMPTY
60302: LIST
60303: LIST
60304: PUSH
60305: LD_INT 30
60307: PUSH
60308: LD_INT 3
60310: PUSH
60311: EMPTY
60312: LIST
60313: LIST
60314: PUSH
60315: EMPTY
60316: LIST
60317: LIST
60318: LIST
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: PPUSH
60324: CALL_OW 72
60328: ST_TO_ADDR
60329: GO 60413
60331: LD_INT 4
60333: DOUBLE
60334: EQUAL
60335: IFTRUE 60339
60337: GO 60412
60339: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
60340: LD_ADDR_VAR 0 12
60344: PUSH
60345: LD_VAR 0 18
60349: PPUSH
60350: LD_INT 22
60352: PUSH
60353: LD_VAR 0 16
60357: PUSH
60358: EMPTY
60359: LIST
60360: LIST
60361: PUSH
60362: LD_INT 2
60364: PUSH
60365: LD_INT 30
60367: PUSH
60368: LD_INT 6
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 30
60377: PUSH
60378: LD_INT 7
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 30
60387: PUSH
60388: LD_INT 8
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: LIST
60399: LIST
60400: PUSH
60401: EMPTY
60402: LIST
60403: LIST
60404: PPUSH
60405: CALL_OW 72
60409: ST_TO_ADDR
60410: GO 60413
60412: POP
// if i = 1 then
60413: LD_VAR 0 8
60417: PUSH
60418: LD_INT 1
60420: EQUAL
60421: IFFALSE 60532
// begin tmp := [ ] ;
60423: LD_ADDR_VAR 0 19
60427: PUSH
60428: EMPTY
60429: ST_TO_ADDR
// for j in f do
60430: LD_ADDR_VAR 0 9
60434: PUSH
60435: LD_VAR 0 12
60439: PUSH
60440: FOR_IN
60441: IFFALSE 60514
// if GetBType ( j ) = b_bunker then
60443: LD_VAR 0 9
60447: PPUSH
60448: CALL_OW 266
60452: PUSH
60453: LD_INT 32
60455: EQUAL
60456: IFFALSE 60483
// tmp := Insert ( tmp , 1 , j ) else
60458: LD_ADDR_VAR 0 19
60462: PUSH
60463: LD_VAR 0 19
60467: PPUSH
60468: LD_INT 1
60470: PPUSH
60471: LD_VAR 0 9
60475: PPUSH
60476: CALL_OW 2
60480: ST_TO_ADDR
60481: GO 60512
// tmp := Insert ( tmp , tmp + 1 , j ) ;
60483: LD_ADDR_VAR 0 19
60487: PUSH
60488: LD_VAR 0 19
60492: PPUSH
60493: LD_VAR 0 19
60497: PUSH
60498: LD_INT 1
60500: PLUS
60501: PPUSH
60502: LD_VAR 0 9
60506: PPUSH
60507: CALL_OW 2
60511: ST_TO_ADDR
60512: GO 60440
60514: POP
60515: POP
// if tmp then
60516: LD_VAR 0 19
60520: IFFALSE 60532
// f := tmp ;
60522: LD_ADDR_VAR 0 12
60526: PUSH
60527: LD_VAR 0 19
60531: ST_TO_ADDR
// end ; x := personel [ i ] ;
60532: LD_ADDR_VAR 0 13
60536: PUSH
60537: LD_VAR 0 6
60541: PUSH
60542: LD_VAR 0 8
60546: ARRAY
60547: ST_TO_ADDR
// if x = - 1 then
60548: LD_VAR 0 13
60552: PUSH
60553: LD_INT 1
60555: NEG
60556: EQUAL
60557: IFFALSE 60766
// begin for j in f do
60559: LD_ADDR_VAR 0 9
60563: PUSH
60564: LD_VAR 0 12
60568: PUSH
60569: FOR_IN
60570: IFFALSE 60762
// repeat InitHc ;
60572: CALL_OW 19
// if GetBType ( j ) = b_barracks then
60576: LD_VAR 0 9
60580: PPUSH
60581: CALL_OW 266
60585: PUSH
60586: LD_INT 5
60588: EQUAL
60589: IFFALSE 60659
// begin if UnitsInside ( j ) < 3 then
60591: LD_VAR 0 9
60595: PPUSH
60596: CALL_OW 313
60600: PUSH
60601: LD_INT 3
60603: LESS
60604: IFFALSE 60640
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
60606: LD_INT 0
60608: PPUSH
60609: LD_INT 5
60611: PUSH
60612: LD_INT 8
60614: PUSH
60615: LD_INT 9
60617: PUSH
60618: EMPTY
60619: LIST
60620: LIST
60621: LIST
60622: PUSH
60623: LD_VAR 0 17
60627: ARRAY
60628: PPUSH
60629: LD_VAR 0 4
60633: PPUSH
60634: CALL_OW 380
60638: GO 60657
// PrepareHuman ( false , i , skill ) ;
60640: LD_INT 0
60642: PPUSH
60643: LD_VAR 0 8
60647: PPUSH
60648: LD_VAR 0 4
60652: PPUSH
60653: CALL_OW 380
// end else
60657: GO 60676
// PrepareHuman ( false , i , skill ) ;
60659: LD_INT 0
60661: PPUSH
60662: LD_VAR 0 8
60666: PPUSH
60667: LD_VAR 0 4
60671: PPUSH
60672: CALL_OW 380
// un := CreateHuman ;
60676: LD_ADDR_VAR 0 14
60680: PUSH
60681: CALL_OW 44
60685: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
60686: LD_ADDR_VAR 0 7
60690: PUSH
60691: LD_VAR 0 7
60695: PPUSH
60696: LD_INT 1
60698: PPUSH
60699: LD_VAR 0 14
60703: PPUSH
60704: CALL_OW 2
60708: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
60709: LD_VAR 0 14
60713: PPUSH
60714: LD_VAR 0 9
60718: PPUSH
60719: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
60723: LD_VAR 0 9
60727: PPUSH
60728: CALL_OW 313
60732: PUSH
60733: LD_INT 6
60735: EQUAL
60736: PUSH
60737: LD_VAR 0 9
60741: PPUSH
60742: CALL_OW 266
60746: PUSH
60747: LD_INT 32
60749: PUSH
60750: LD_INT 31
60752: PUSH
60753: EMPTY
60754: LIST
60755: LIST
60756: IN
60757: OR
60758: IFFALSE 60572
60760: GO 60569
60762: POP
60763: POP
// end else
60764: GO 61146
// for j = 1 to x do
60766: LD_ADDR_VAR 0 9
60770: PUSH
60771: DOUBLE
60772: LD_INT 1
60774: DEC
60775: ST_TO_ADDR
60776: LD_VAR 0 13
60780: PUSH
60781: FOR_TO
60782: IFFALSE 61144
// begin InitHc ;
60784: CALL_OW 19
// if not f then
60788: LD_VAR 0 12
60792: NOT
60793: IFFALSE 60882
// begin PrepareHuman ( false , i , skill ) ;
60795: LD_INT 0
60797: PPUSH
60798: LD_VAR 0 8
60802: PPUSH
60803: LD_VAR 0 4
60807: PPUSH
60808: CALL_OW 380
// un := CreateHuman ;
60812: LD_ADDR_VAR 0 14
60816: PUSH
60817: CALL_OW 44
60821: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
60822: LD_ADDR_VAR 0 7
60826: PUSH
60827: LD_VAR 0 7
60831: PPUSH
60832: LD_INT 1
60834: PPUSH
60835: LD_VAR 0 14
60839: PPUSH
60840: CALL_OW 2
60844: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
60845: LD_VAR 0 14
60849: PPUSH
60850: LD_VAR 0 1
60854: PPUSH
60855: CALL_OW 250
60859: PPUSH
60860: LD_VAR 0 1
60864: PPUSH
60865: CALL_OW 251
60869: PPUSH
60870: LD_INT 10
60872: PPUSH
60873: LD_INT 0
60875: PPUSH
60876: CALL_OW 50
// continue ;
60880: GO 60781
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
60882: LD_VAR 0 12
60886: PUSH
60887: LD_INT 1
60889: ARRAY
60890: PPUSH
60891: CALL_OW 313
60895: PUSH
60896: LD_VAR 0 12
60900: PUSH
60901: LD_INT 1
60903: ARRAY
60904: PPUSH
60905: CALL_OW 266
60909: PUSH
60910: LD_INT 32
60912: PUSH
60913: LD_INT 31
60915: PUSH
60916: EMPTY
60917: LIST
60918: LIST
60919: IN
60920: AND
60921: PUSH
60922: LD_VAR 0 12
60926: PUSH
60927: LD_INT 1
60929: ARRAY
60930: PPUSH
60931: CALL_OW 313
60935: PUSH
60936: LD_INT 6
60938: EQUAL
60939: OR
60940: IFFALSE 60960
// f := Delete ( f , 1 ) ;
60942: LD_ADDR_VAR 0 12
60946: PUSH
60947: LD_VAR 0 12
60951: PPUSH
60952: LD_INT 1
60954: PPUSH
60955: CALL_OW 3
60959: ST_TO_ADDR
// if not f then
60960: LD_VAR 0 12
60964: NOT
60965: IFFALSE 60983
// begin x := x + 2 ;
60967: LD_ADDR_VAR 0 13
60971: PUSH
60972: LD_VAR 0 13
60976: PUSH
60977: LD_INT 2
60979: PLUS
60980: ST_TO_ADDR
// continue ;
60981: GO 60781
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
60983: LD_VAR 0 12
60987: PUSH
60988: LD_INT 1
60990: ARRAY
60991: PPUSH
60992: CALL_OW 266
60996: PUSH
60997: LD_INT 5
60999: EQUAL
61000: IFFALSE 61074
// begin if UnitsInside ( f [ 1 ] ) < 3 then
61002: LD_VAR 0 12
61006: PUSH
61007: LD_INT 1
61009: ARRAY
61010: PPUSH
61011: CALL_OW 313
61015: PUSH
61016: LD_INT 3
61018: LESS
61019: IFFALSE 61055
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
61021: LD_INT 0
61023: PPUSH
61024: LD_INT 5
61026: PUSH
61027: LD_INT 8
61029: PUSH
61030: LD_INT 9
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: LIST
61037: PUSH
61038: LD_VAR 0 17
61042: ARRAY
61043: PPUSH
61044: LD_VAR 0 4
61048: PPUSH
61049: CALL_OW 380
61053: GO 61072
// PrepareHuman ( false , i , skill ) ;
61055: LD_INT 0
61057: PPUSH
61058: LD_VAR 0 8
61062: PPUSH
61063: LD_VAR 0 4
61067: PPUSH
61068: CALL_OW 380
// end else
61072: GO 61091
// PrepareHuman ( false , i , skill ) ;
61074: LD_INT 0
61076: PPUSH
61077: LD_VAR 0 8
61081: PPUSH
61082: LD_VAR 0 4
61086: PPUSH
61087: CALL_OW 380
// un := CreateHuman ;
61091: LD_ADDR_VAR 0 14
61095: PUSH
61096: CALL_OW 44
61100: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
61101: LD_ADDR_VAR 0 7
61105: PUSH
61106: LD_VAR 0 7
61110: PPUSH
61111: LD_INT 1
61113: PPUSH
61114: LD_VAR 0 14
61118: PPUSH
61119: CALL_OW 2
61123: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
61124: LD_VAR 0 14
61128: PPUSH
61129: LD_VAR 0 12
61133: PUSH
61134: LD_INT 1
61136: ARRAY
61137: PPUSH
61138: CALL_OW 52
// end ;
61142: GO 60781
61144: POP
61145: POP
// end ;
61146: GO 60083
61148: POP
61149: POP
// result := result ^ buildings ;
61150: LD_ADDR_VAR 0 7
61154: PUSH
61155: LD_VAR 0 7
61159: PUSH
61160: LD_VAR 0 18
61164: ADD
61165: ST_TO_ADDR
// end else
61166: GO 61309
// begin for i = 1 to personel do
61168: LD_ADDR_VAR 0 8
61172: PUSH
61173: DOUBLE
61174: LD_INT 1
61176: DEC
61177: ST_TO_ADDR
61178: LD_VAR 0 6
61182: PUSH
61183: FOR_TO
61184: IFFALSE 61307
// begin if i > 4 then
61186: LD_VAR 0 8
61190: PUSH
61191: LD_INT 4
61193: GREATER
61194: IFFALSE 61198
// break ;
61196: GO 61307
// x := personel [ i ] ;
61198: LD_ADDR_VAR 0 13
61202: PUSH
61203: LD_VAR 0 6
61207: PUSH
61208: LD_VAR 0 8
61212: ARRAY
61213: ST_TO_ADDR
// if x = - 1 then
61214: LD_VAR 0 13
61218: PUSH
61219: LD_INT 1
61221: NEG
61222: EQUAL
61223: IFFALSE 61227
// continue ;
61225: GO 61183
// PrepareHuman ( false , i , skill ) ;
61227: LD_INT 0
61229: PPUSH
61230: LD_VAR 0 8
61234: PPUSH
61235: LD_VAR 0 4
61239: PPUSH
61240: CALL_OW 380
// un := CreateHuman ;
61244: LD_ADDR_VAR 0 14
61248: PUSH
61249: CALL_OW 44
61253: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
61254: LD_VAR 0 14
61258: PPUSH
61259: LD_VAR 0 1
61263: PPUSH
61264: CALL_OW 250
61268: PPUSH
61269: LD_VAR 0 1
61273: PPUSH
61274: CALL_OW 251
61278: PPUSH
61279: LD_INT 10
61281: PPUSH
61282: LD_INT 0
61284: PPUSH
61285: CALL_OW 50
// result := result ^ un ;
61289: LD_ADDR_VAR 0 7
61293: PUSH
61294: LD_VAR 0 7
61298: PUSH
61299: LD_VAR 0 14
61303: ADD
61304: ST_TO_ADDR
// end ;
61305: GO 61183
61307: POP
61308: POP
// end ; end ;
61309: LD_VAR 0 7
61313: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
61314: LD_INT 0
61316: PPUSH
61317: PPUSH
61318: PPUSH
61319: PPUSH
61320: PPUSH
61321: PPUSH
61322: PPUSH
61323: PPUSH
61324: PPUSH
61325: PPUSH
61326: PPUSH
61327: PPUSH
61328: PPUSH
61329: PPUSH
61330: PPUSH
61331: PPUSH
// result := false ;
61332: LD_ADDR_VAR 0 3
61336: PUSH
61337: LD_INT 0
61339: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
61340: LD_VAR 0 1
61344: NOT
61345: PUSH
61346: LD_VAR 0 1
61350: PPUSH
61351: CALL_OW 266
61355: PUSH
61356: LD_INT 32
61358: PUSH
61359: LD_INT 33
61361: PUSH
61362: EMPTY
61363: LIST
61364: LIST
61365: IN
61366: NOT
61367: OR
61368: IFFALSE 61372
// exit ;
61370: GO 62481
// nat := GetNation ( tower ) ;
61372: LD_ADDR_VAR 0 12
61376: PUSH
61377: LD_VAR 0 1
61381: PPUSH
61382: CALL_OW 248
61386: ST_TO_ADDR
// side := GetSide ( tower ) ;
61387: LD_ADDR_VAR 0 16
61391: PUSH
61392: LD_VAR 0 1
61396: PPUSH
61397: CALL_OW 255
61401: ST_TO_ADDR
// x := GetX ( tower ) ;
61402: LD_ADDR_VAR 0 10
61406: PUSH
61407: LD_VAR 0 1
61411: PPUSH
61412: CALL_OW 250
61416: ST_TO_ADDR
// y := GetY ( tower ) ;
61417: LD_ADDR_VAR 0 11
61421: PUSH
61422: LD_VAR 0 1
61426: PPUSH
61427: CALL_OW 251
61431: ST_TO_ADDR
// if not x or not y then
61432: LD_VAR 0 10
61436: NOT
61437: PUSH
61438: LD_VAR 0 11
61442: NOT
61443: OR
61444: IFFALSE 61448
// exit ;
61446: GO 62481
// weapon := 0 ;
61448: LD_ADDR_VAR 0 18
61452: PUSH
61453: LD_INT 0
61455: ST_TO_ADDR
// fac_list := [ ] ;
61456: LD_ADDR_VAR 0 17
61460: PUSH
61461: EMPTY
61462: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
61463: LD_ADDR_VAR 0 6
61467: PUSH
61468: LD_VAR 0 1
61472: PPUSH
61473: CALL_OW 274
61477: PPUSH
61478: LD_VAR 0 2
61482: PPUSH
61483: LD_INT 0
61485: PPUSH
61486: CALL 59052 0 3
61490: PPUSH
61491: LD_INT 30
61493: PUSH
61494: LD_INT 3
61496: PUSH
61497: EMPTY
61498: LIST
61499: LIST
61500: PPUSH
61501: CALL_OW 72
61505: ST_TO_ADDR
// if not factories then
61506: LD_VAR 0 6
61510: NOT
61511: IFFALSE 61515
// exit ;
61513: GO 62481
// for i in factories do
61515: LD_ADDR_VAR 0 8
61519: PUSH
61520: LD_VAR 0 6
61524: PUSH
61525: FOR_IN
61526: IFFALSE 61551
// fac_list := fac_list union AvailableWeaponList ( i ) ;
61528: LD_ADDR_VAR 0 17
61532: PUSH
61533: LD_VAR 0 17
61537: PUSH
61538: LD_VAR 0 8
61542: PPUSH
61543: CALL_OW 478
61547: UNION
61548: ST_TO_ADDR
61549: GO 61525
61551: POP
61552: POP
// if not fac_list then
61553: LD_VAR 0 17
61557: NOT
61558: IFFALSE 61562
// exit ;
61560: GO 62481
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
61562: LD_ADDR_VAR 0 5
61566: PUSH
61567: LD_INT 4
61569: PUSH
61570: LD_INT 5
61572: PUSH
61573: LD_INT 9
61575: PUSH
61576: LD_INT 10
61578: PUSH
61579: LD_INT 6
61581: PUSH
61582: LD_INT 7
61584: PUSH
61585: LD_INT 11
61587: PUSH
61588: EMPTY
61589: LIST
61590: LIST
61591: LIST
61592: LIST
61593: LIST
61594: LIST
61595: LIST
61596: PUSH
61597: LD_INT 27
61599: PUSH
61600: LD_INT 28
61602: PUSH
61603: LD_INT 26
61605: PUSH
61606: LD_INT 30
61608: PUSH
61609: EMPTY
61610: LIST
61611: LIST
61612: LIST
61613: LIST
61614: PUSH
61615: LD_INT 43
61617: PUSH
61618: LD_INT 44
61620: PUSH
61621: LD_INT 46
61623: PUSH
61624: LD_INT 45
61626: PUSH
61627: LD_INT 47
61629: PUSH
61630: LD_INT 49
61632: PUSH
61633: EMPTY
61634: LIST
61635: LIST
61636: LIST
61637: LIST
61638: LIST
61639: LIST
61640: PUSH
61641: EMPTY
61642: LIST
61643: LIST
61644: LIST
61645: PUSH
61646: LD_VAR 0 12
61650: ARRAY
61651: ST_TO_ADDR
// list := list isect fac_list ;
61652: LD_ADDR_VAR 0 5
61656: PUSH
61657: LD_VAR 0 5
61661: PUSH
61662: LD_VAR 0 17
61666: ISECT
61667: ST_TO_ADDR
// if not list then
61668: LD_VAR 0 5
61672: NOT
61673: IFFALSE 61677
// exit ;
61675: GO 62481
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
61677: LD_VAR 0 12
61681: PUSH
61682: LD_INT 3
61684: EQUAL
61685: PUSH
61686: LD_INT 49
61688: PUSH
61689: LD_VAR 0 5
61693: IN
61694: AND
61695: PUSH
61696: LD_INT 31
61698: PPUSH
61699: LD_VAR 0 16
61703: PPUSH
61704: CALL_OW 321
61708: PUSH
61709: LD_INT 2
61711: EQUAL
61712: AND
61713: IFFALSE 61773
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
61715: LD_INT 22
61717: PUSH
61718: LD_VAR 0 16
61722: PUSH
61723: EMPTY
61724: LIST
61725: LIST
61726: PUSH
61727: LD_INT 35
61729: PUSH
61730: LD_INT 49
61732: PUSH
61733: EMPTY
61734: LIST
61735: LIST
61736: PUSH
61737: LD_INT 91
61739: PUSH
61740: LD_VAR 0 1
61744: PUSH
61745: LD_INT 10
61747: PUSH
61748: EMPTY
61749: LIST
61750: LIST
61751: LIST
61752: PUSH
61753: EMPTY
61754: LIST
61755: LIST
61756: LIST
61757: PPUSH
61758: CALL_OW 69
61762: NOT
61763: IFFALSE 61773
// weapon := ru_time_lapser ;
61765: LD_ADDR_VAR 0 18
61769: PUSH
61770: LD_INT 49
61772: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
61773: LD_VAR 0 12
61777: PUSH
61778: LD_INT 1
61780: PUSH
61781: LD_INT 2
61783: PUSH
61784: EMPTY
61785: LIST
61786: LIST
61787: IN
61788: PUSH
61789: LD_INT 11
61791: PUSH
61792: LD_VAR 0 5
61796: IN
61797: PUSH
61798: LD_INT 30
61800: PUSH
61801: LD_VAR 0 5
61805: IN
61806: OR
61807: AND
61808: PUSH
61809: LD_INT 6
61811: PPUSH
61812: LD_VAR 0 16
61816: PPUSH
61817: CALL_OW 321
61821: PUSH
61822: LD_INT 2
61824: EQUAL
61825: AND
61826: IFFALSE 61991
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
61828: LD_INT 22
61830: PUSH
61831: LD_VAR 0 16
61835: PUSH
61836: EMPTY
61837: LIST
61838: LIST
61839: PUSH
61840: LD_INT 2
61842: PUSH
61843: LD_INT 35
61845: PUSH
61846: LD_INT 11
61848: PUSH
61849: EMPTY
61850: LIST
61851: LIST
61852: PUSH
61853: LD_INT 35
61855: PUSH
61856: LD_INT 30
61858: PUSH
61859: EMPTY
61860: LIST
61861: LIST
61862: PUSH
61863: EMPTY
61864: LIST
61865: LIST
61866: LIST
61867: PUSH
61868: LD_INT 91
61870: PUSH
61871: LD_VAR 0 1
61875: PUSH
61876: LD_INT 18
61878: PUSH
61879: EMPTY
61880: LIST
61881: LIST
61882: LIST
61883: PUSH
61884: EMPTY
61885: LIST
61886: LIST
61887: LIST
61888: PPUSH
61889: CALL_OW 69
61893: NOT
61894: PUSH
61895: LD_INT 22
61897: PUSH
61898: LD_VAR 0 16
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: PUSH
61907: LD_INT 2
61909: PUSH
61910: LD_INT 30
61912: PUSH
61913: LD_INT 32
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: PUSH
61920: LD_INT 30
61922: PUSH
61923: LD_INT 33
61925: PUSH
61926: EMPTY
61927: LIST
61928: LIST
61929: PUSH
61930: EMPTY
61931: LIST
61932: LIST
61933: LIST
61934: PUSH
61935: LD_INT 91
61937: PUSH
61938: LD_VAR 0 1
61942: PUSH
61943: LD_INT 12
61945: PUSH
61946: EMPTY
61947: LIST
61948: LIST
61949: LIST
61950: PUSH
61951: EMPTY
61952: LIST
61953: LIST
61954: LIST
61955: PUSH
61956: EMPTY
61957: LIST
61958: PPUSH
61959: CALL_OW 69
61963: PUSH
61964: LD_INT 2
61966: GREATER
61967: AND
61968: IFFALSE 61991
// weapon := [ us_radar , ar_radar ] [ nat ] ;
61970: LD_ADDR_VAR 0 18
61974: PUSH
61975: LD_INT 11
61977: PUSH
61978: LD_INT 30
61980: PUSH
61981: EMPTY
61982: LIST
61983: LIST
61984: PUSH
61985: LD_VAR 0 12
61989: ARRAY
61990: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
61991: LD_VAR 0 18
61995: NOT
61996: PUSH
61997: LD_INT 40
61999: PPUSH
62000: LD_VAR 0 16
62004: PPUSH
62005: CALL_OW 321
62009: PUSH
62010: LD_INT 2
62012: EQUAL
62013: AND
62014: PUSH
62015: LD_INT 7
62017: PUSH
62018: LD_VAR 0 5
62022: IN
62023: PUSH
62024: LD_INT 28
62026: PUSH
62027: LD_VAR 0 5
62031: IN
62032: OR
62033: PUSH
62034: LD_INT 45
62036: PUSH
62037: LD_VAR 0 5
62041: IN
62042: OR
62043: AND
62044: IFFALSE 62298
// begin hex := GetHexInfo ( x , y ) ;
62046: LD_ADDR_VAR 0 4
62050: PUSH
62051: LD_VAR 0 10
62055: PPUSH
62056: LD_VAR 0 11
62060: PPUSH
62061: CALL_OW 546
62065: ST_TO_ADDR
// if hex [ 1 ] then
62066: LD_VAR 0 4
62070: PUSH
62071: LD_INT 1
62073: ARRAY
62074: IFFALSE 62078
// exit ;
62076: GO 62481
// height := hex [ 2 ] ;
62078: LD_ADDR_VAR 0 15
62082: PUSH
62083: LD_VAR 0 4
62087: PUSH
62088: LD_INT 2
62090: ARRAY
62091: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
62092: LD_ADDR_VAR 0 14
62096: PUSH
62097: LD_INT 0
62099: PUSH
62100: LD_INT 2
62102: PUSH
62103: LD_INT 3
62105: PUSH
62106: LD_INT 5
62108: PUSH
62109: EMPTY
62110: LIST
62111: LIST
62112: LIST
62113: LIST
62114: ST_TO_ADDR
// for i in tmp do
62115: LD_ADDR_VAR 0 8
62119: PUSH
62120: LD_VAR 0 14
62124: PUSH
62125: FOR_IN
62126: IFFALSE 62296
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
62128: LD_ADDR_VAR 0 9
62132: PUSH
62133: LD_VAR 0 10
62137: PPUSH
62138: LD_VAR 0 8
62142: PPUSH
62143: LD_INT 5
62145: PPUSH
62146: CALL_OW 272
62150: PUSH
62151: LD_VAR 0 11
62155: PPUSH
62156: LD_VAR 0 8
62160: PPUSH
62161: LD_INT 5
62163: PPUSH
62164: CALL_OW 273
62168: PUSH
62169: EMPTY
62170: LIST
62171: LIST
62172: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
62173: LD_VAR 0 9
62177: PUSH
62178: LD_INT 1
62180: ARRAY
62181: PPUSH
62182: LD_VAR 0 9
62186: PUSH
62187: LD_INT 2
62189: ARRAY
62190: PPUSH
62191: CALL_OW 488
62195: IFFALSE 62294
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
62197: LD_ADDR_VAR 0 4
62201: PUSH
62202: LD_VAR 0 9
62206: PUSH
62207: LD_INT 1
62209: ARRAY
62210: PPUSH
62211: LD_VAR 0 9
62215: PUSH
62216: LD_INT 2
62218: ARRAY
62219: PPUSH
62220: CALL_OW 546
62224: ST_TO_ADDR
// if hex [ 1 ] then
62225: LD_VAR 0 4
62229: PUSH
62230: LD_INT 1
62232: ARRAY
62233: IFFALSE 62237
// continue ;
62235: GO 62125
// h := hex [ 2 ] ;
62237: LD_ADDR_VAR 0 13
62241: PUSH
62242: LD_VAR 0 4
62246: PUSH
62247: LD_INT 2
62249: ARRAY
62250: ST_TO_ADDR
// if h + 7 < height then
62251: LD_VAR 0 13
62255: PUSH
62256: LD_INT 7
62258: PLUS
62259: PUSH
62260: LD_VAR 0 15
62264: LESS
62265: IFFALSE 62294
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
62267: LD_ADDR_VAR 0 18
62271: PUSH
62272: LD_INT 7
62274: PUSH
62275: LD_INT 28
62277: PUSH
62278: LD_INT 45
62280: PUSH
62281: EMPTY
62282: LIST
62283: LIST
62284: LIST
62285: PUSH
62286: LD_VAR 0 12
62290: ARRAY
62291: ST_TO_ADDR
// break ;
62292: GO 62296
// end ; end ; end ;
62294: GO 62125
62296: POP
62297: POP
// end ; if not weapon then
62298: LD_VAR 0 18
62302: NOT
62303: IFFALSE 62363
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
62305: LD_ADDR_VAR 0 5
62309: PUSH
62310: LD_VAR 0 5
62314: PUSH
62315: LD_INT 11
62317: PUSH
62318: LD_INT 30
62320: PUSH
62321: LD_INT 49
62323: PUSH
62324: EMPTY
62325: LIST
62326: LIST
62327: LIST
62328: DIFF
62329: ST_TO_ADDR
// if not list then
62330: LD_VAR 0 5
62334: NOT
62335: IFFALSE 62339
// exit ;
62337: GO 62481
// weapon := list [ rand ( 1 , list ) ] ;
62339: LD_ADDR_VAR 0 18
62343: PUSH
62344: LD_VAR 0 5
62348: PUSH
62349: LD_INT 1
62351: PPUSH
62352: LD_VAR 0 5
62356: PPUSH
62357: CALL_OW 12
62361: ARRAY
62362: ST_TO_ADDR
// end ; if weapon then
62363: LD_VAR 0 18
62367: IFFALSE 62481
// begin tmp := CostOfWeapon ( weapon ) ;
62369: LD_ADDR_VAR 0 14
62373: PUSH
62374: LD_VAR 0 18
62378: PPUSH
62379: CALL_OW 451
62383: ST_TO_ADDR
// j := GetBase ( tower ) ;
62384: LD_ADDR_VAR 0 9
62388: PUSH
62389: LD_VAR 0 1
62393: PPUSH
62394: CALL_OW 274
62398: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
62399: LD_VAR 0 9
62403: PPUSH
62404: LD_INT 1
62406: PPUSH
62407: CALL_OW 275
62411: PUSH
62412: LD_VAR 0 14
62416: PUSH
62417: LD_INT 1
62419: ARRAY
62420: GREATEREQUAL
62421: PUSH
62422: LD_VAR 0 9
62426: PPUSH
62427: LD_INT 2
62429: PPUSH
62430: CALL_OW 275
62434: PUSH
62435: LD_VAR 0 14
62439: PUSH
62440: LD_INT 2
62442: ARRAY
62443: GREATEREQUAL
62444: AND
62445: PUSH
62446: LD_VAR 0 9
62450: PPUSH
62451: LD_INT 3
62453: PPUSH
62454: CALL_OW 275
62458: PUSH
62459: LD_VAR 0 14
62463: PUSH
62464: LD_INT 3
62466: ARRAY
62467: GREATEREQUAL
62468: AND
62469: IFFALSE 62481
// result := weapon ;
62471: LD_ADDR_VAR 0 3
62475: PUSH
62476: LD_VAR 0 18
62480: ST_TO_ADDR
// end ; end ;
62481: LD_VAR 0 3
62485: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
62486: LD_INT 0
62488: PPUSH
62489: PPUSH
// result := true ;
62490: LD_ADDR_VAR 0 3
62494: PUSH
62495: LD_INT 1
62497: ST_TO_ADDR
// if array1 = array2 then
62498: LD_VAR 0 1
62502: PUSH
62503: LD_VAR 0 2
62507: EQUAL
62508: IFFALSE 62568
// begin for i = 1 to array1 do
62510: LD_ADDR_VAR 0 4
62514: PUSH
62515: DOUBLE
62516: LD_INT 1
62518: DEC
62519: ST_TO_ADDR
62520: LD_VAR 0 1
62524: PUSH
62525: FOR_TO
62526: IFFALSE 62564
// if array1 [ i ] <> array2 [ i ] then
62528: LD_VAR 0 1
62532: PUSH
62533: LD_VAR 0 4
62537: ARRAY
62538: PUSH
62539: LD_VAR 0 2
62543: PUSH
62544: LD_VAR 0 4
62548: ARRAY
62549: NONEQUAL
62550: IFFALSE 62562
// begin result := false ;
62552: LD_ADDR_VAR 0 3
62556: PUSH
62557: LD_INT 0
62559: ST_TO_ADDR
// break ;
62560: GO 62564
// end ;
62562: GO 62525
62564: POP
62565: POP
// end else
62566: GO 62576
// result := false ;
62568: LD_ADDR_VAR 0 3
62572: PUSH
62573: LD_INT 0
62575: ST_TO_ADDR
// end ;
62576: LD_VAR 0 3
62580: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
62581: LD_INT 0
62583: PPUSH
62584: PPUSH
// if not array1 or not array2 then
62585: LD_VAR 0 1
62589: NOT
62590: PUSH
62591: LD_VAR 0 2
62595: NOT
62596: OR
62597: IFFALSE 62601
// exit ;
62599: GO 62665
// result := true ;
62601: LD_ADDR_VAR 0 3
62605: PUSH
62606: LD_INT 1
62608: ST_TO_ADDR
// for i = 1 to array1 do
62609: LD_ADDR_VAR 0 4
62613: PUSH
62614: DOUBLE
62615: LD_INT 1
62617: DEC
62618: ST_TO_ADDR
62619: LD_VAR 0 1
62623: PUSH
62624: FOR_TO
62625: IFFALSE 62663
// if array1 [ i ] <> array2 [ i ] then
62627: LD_VAR 0 1
62631: PUSH
62632: LD_VAR 0 4
62636: ARRAY
62637: PUSH
62638: LD_VAR 0 2
62642: PUSH
62643: LD_VAR 0 4
62647: ARRAY
62648: NONEQUAL
62649: IFFALSE 62661
// begin result := false ;
62651: LD_ADDR_VAR 0 3
62655: PUSH
62656: LD_INT 0
62658: ST_TO_ADDR
// break ;
62659: GO 62663
// end ;
62661: GO 62624
62663: POP
62664: POP
// end ;
62665: LD_VAR 0 3
62669: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
62670: LD_INT 0
62672: PPUSH
62673: PPUSH
62674: PPUSH
// pom := GetBase ( fac ) ;
62675: LD_ADDR_VAR 0 5
62679: PUSH
62680: LD_VAR 0 1
62684: PPUSH
62685: CALL_OW 274
62689: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
62690: LD_ADDR_VAR 0 4
62694: PUSH
62695: LD_VAR 0 2
62699: PUSH
62700: LD_INT 1
62702: ARRAY
62703: PPUSH
62704: LD_VAR 0 2
62708: PUSH
62709: LD_INT 2
62711: ARRAY
62712: PPUSH
62713: LD_VAR 0 2
62717: PUSH
62718: LD_INT 3
62720: ARRAY
62721: PPUSH
62722: LD_VAR 0 2
62726: PUSH
62727: LD_INT 4
62729: ARRAY
62730: PPUSH
62731: CALL_OW 449
62735: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
62736: LD_ADDR_VAR 0 3
62740: PUSH
62741: LD_VAR 0 5
62745: PPUSH
62746: LD_INT 1
62748: PPUSH
62749: CALL_OW 275
62753: PUSH
62754: LD_VAR 0 4
62758: PUSH
62759: LD_INT 1
62761: ARRAY
62762: GREATEREQUAL
62763: PUSH
62764: LD_VAR 0 5
62768: PPUSH
62769: LD_INT 2
62771: PPUSH
62772: CALL_OW 275
62776: PUSH
62777: LD_VAR 0 4
62781: PUSH
62782: LD_INT 2
62784: ARRAY
62785: GREATEREQUAL
62786: AND
62787: PUSH
62788: LD_VAR 0 5
62792: PPUSH
62793: LD_INT 3
62795: PPUSH
62796: CALL_OW 275
62800: PUSH
62801: LD_VAR 0 4
62805: PUSH
62806: LD_INT 3
62808: ARRAY
62809: GREATEREQUAL
62810: AND
62811: ST_TO_ADDR
// end ;
62812: LD_VAR 0 3
62816: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
62817: LD_INT 0
62819: PPUSH
62820: PPUSH
62821: PPUSH
62822: PPUSH
// pom := GetBase ( building ) ;
62823: LD_ADDR_VAR 0 3
62827: PUSH
62828: LD_VAR 0 1
62832: PPUSH
62833: CALL_OW 274
62837: ST_TO_ADDR
// if not pom then
62838: LD_VAR 0 3
62842: NOT
62843: IFFALSE 62847
// exit ;
62845: GO 63017
// btype := GetBType ( building ) ;
62847: LD_ADDR_VAR 0 5
62851: PUSH
62852: LD_VAR 0 1
62856: PPUSH
62857: CALL_OW 266
62861: ST_TO_ADDR
// if btype = b_armoury then
62862: LD_VAR 0 5
62866: PUSH
62867: LD_INT 4
62869: EQUAL
62870: IFFALSE 62880
// btype := b_barracks ;
62872: LD_ADDR_VAR 0 5
62876: PUSH
62877: LD_INT 5
62879: ST_TO_ADDR
// if btype = b_depot then
62880: LD_VAR 0 5
62884: PUSH
62885: LD_INT 0
62887: EQUAL
62888: IFFALSE 62898
// btype := b_warehouse ;
62890: LD_ADDR_VAR 0 5
62894: PUSH
62895: LD_INT 1
62897: ST_TO_ADDR
// if btype = b_workshop then
62898: LD_VAR 0 5
62902: PUSH
62903: LD_INT 2
62905: EQUAL
62906: IFFALSE 62916
// btype := b_factory ;
62908: LD_ADDR_VAR 0 5
62912: PUSH
62913: LD_INT 3
62915: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
62916: LD_ADDR_VAR 0 4
62920: PUSH
62921: LD_VAR 0 5
62925: PPUSH
62926: LD_VAR 0 1
62930: PPUSH
62931: CALL_OW 248
62935: PPUSH
62936: CALL_OW 450
62940: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
62941: LD_ADDR_VAR 0 2
62945: PUSH
62946: LD_VAR 0 3
62950: PPUSH
62951: LD_INT 1
62953: PPUSH
62954: CALL_OW 275
62958: PUSH
62959: LD_VAR 0 4
62963: PUSH
62964: LD_INT 1
62966: ARRAY
62967: GREATEREQUAL
62968: PUSH
62969: LD_VAR 0 3
62973: PPUSH
62974: LD_INT 2
62976: PPUSH
62977: CALL_OW 275
62981: PUSH
62982: LD_VAR 0 4
62986: PUSH
62987: LD_INT 2
62989: ARRAY
62990: GREATEREQUAL
62991: AND
62992: PUSH
62993: LD_VAR 0 3
62997: PPUSH
62998: LD_INT 3
63000: PPUSH
63001: CALL_OW 275
63005: PUSH
63006: LD_VAR 0 4
63010: PUSH
63011: LD_INT 3
63013: ARRAY
63014: GREATEREQUAL
63015: AND
63016: ST_TO_ADDR
// end ;
63017: LD_VAR 0 2
63021: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
63022: LD_INT 0
63024: PPUSH
63025: PPUSH
63026: PPUSH
// pom := GetBase ( building ) ;
63027: LD_ADDR_VAR 0 4
63031: PUSH
63032: LD_VAR 0 1
63036: PPUSH
63037: CALL_OW 274
63041: ST_TO_ADDR
// if not pom then
63042: LD_VAR 0 4
63046: NOT
63047: IFFALSE 63051
// exit ;
63049: GO 63152
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
63051: LD_ADDR_VAR 0 5
63055: PUSH
63056: LD_VAR 0 2
63060: PPUSH
63061: LD_VAR 0 1
63065: PPUSH
63066: CALL_OW 248
63070: PPUSH
63071: CALL_OW 450
63075: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
63076: LD_ADDR_VAR 0 3
63080: PUSH
63081: LD_VAR 0 4
63085: PPUSH
63086: LD_INT 1
63088: PPUSH
63089: CALL_OW 275
63093: PUSH
63094: LD_VAR 0 5
63098: PUSH
63099: LD_INT 1
63101: ARRAY
63102: GREATEREQUAL
63103: PUSH
63104: LD_VAR 0 4
63108: PPUSH
63109: LD_INT 2
63111: PPUSH
63112: CALL_OW 275
63116: PUSH
63117: LD_VAR 0 5
63121: PUSH
63122: LD_INT 2
63124: ARRAY
63125: GREATEREQUAL
63126: AND
63127: PUSH
63128: LD_VAR 0 4
63132: PPUSH
63133: LD_INT 3
63135: PPUSH
63136: CALL_OW 275
63140: PUSH
63141: LD_VAR 0 5
63145: PUSH
63146: LD_INT 3
63148: ARRAY
63149: GREATEREQUAL
63150: AND
63151: ST_TO_ADDR
// end ;
63152: LD_VAR 0 3
63156: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
63157: LD_INT 0
63159: PPUSH
63160: PPUSH
63161: PPUSH
63162: PPUSH
63163: PPUSH
63164: PPUSH
63165: PPUSH
63166: PPUSH
63167: PPUSH
63168: PPUSH
63169: PPUSH
// result := false ;
63170: LD_ADDR_VAR 0 8
63174: PUSH
63175: LD_INT 0
63177: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
63178: LD_VAR 0 5
63182: NOT
63183: PUSH
63184: LD_VAR 0 1
63188: NOT
63189: OR
63190: PUSH
63191: LD_VAR 0 2
63195: NOT
63196: OR
63197: PUSH
63198: LD_VAR 0 3
63202: NOT
63203: OR
63204: IFFALSE 63208
// exit ;
63206: GO 64022
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
63208: LD_ADDR_VAR 0 14
63212: PUSH
63213: LD_VAR 0 1
63217: PPUSH
63218: LD_VAR 0 2
63222: PPUSH
63223: LD_VAR 0 3
63227: PPUSH
63228: LD_VAR 0 4
63232: PPUSH
63233: LD_VAR 0 5
63237: PUSH
63238: LD_INT 1
63240: ARRAY
63241: PPUSH
63242: CALL_OW 248
63246: PPUSH
63247: LD_INT 0
63249: PPUSH
63250: CALL 65275 0 6
63254: ST_TO_ADDR
// if not hexes then
63255: LD_VAR 0 14
63259: NOT
63260: IFFALSE 63264
// exit ;
63262: GO 64022
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63264: LD_ADDR_VAR 0 17
63268: PUSH
63269: LD_VAR 0 5
63273: PPUSH
63274: LD_INT 22
63276: PUSH
63277: LD_VAR 0 13
63281: PPUSH
63282: CALL_OW 255
63286: PUSH
63287: EMPTY
63288: LIST
63289: LIST
63290: PUSH
63291: LD_INT 2
63293: PUSH
63294: LD_INT 30
63296: PUSH
63297: LD_INT 0
63299: PUSH
63300: EMPTY
63301: LIST
63302: LIST
63303: PUSH
63304: LD_INT 30
63306: PUSH
63307: LD_INT 1
63309: PUSH
63310: EMPTY
63311: LIST
63312: LIST
63313: PUSH
63314: EMPTY
63315: LIST
63316: LIST
63317: LIST
63318: PUSH
63319: EMPTY
63320: LIST
63321: LIST
63322: PPUSH
63323: CALL_OW 72
63327: ST_TO_ADDR
// for i = 1 to hexes do
63328: LD_ADDR_VAR 0 9
63332: PUSH
63333: DOUBLE
63334: LD_INT 1
63336: DEC
63337: ST_TO_ADDR
63338: LD_VAR 0 14
63342: PUSH
63343: FOR_TO
63344: IFFALSE 64020
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
63346: LD_ADDR_VAR 0 13
63350: PUSH
63351: LD_VAR 0 14
63355: PUSH
63356: LD_VAR 0 9
63360: ARRAY
63361: PUSH
63362: LD_INT 1
63364: ARRAY
63365: PPUSH
63366: LD_VAR 0 14
63370: PUSH
63371: LD_VAR 0 9
63375: ARRAY
63376: PUSH
63377: LD_INT 2
63379: ARRAY
63380: PPUSH
63381: CALL_OW 428
63385: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
63386: LD_VAR 0 14
63390: PUSH
63391: LD_VAR 0 9
63395: ARRAY
63396: PUSH
63397: LD_INT 1
63399: ARRAY
63400: PPUSH
63401: LD_VAR 0 14
63405: PUSH
63406: LD_VAR 0 9
63410: ARRAY
63411: PUSH
63412: LD_INT 2
63414: ARRAY
63415: PPUSH
63416: CALL_OW 351
63420: PUSH
63421: LD_VAR 0 14
63425: PUSH
63426: LD_VAR 0 9
63430: ARRAY
63431: PUSH
63432: LD_INT 1
63434: ARRAY
63435: PPUSH
63436: LD_VAR 0 14
63440: PUSH
63441: LD_VAR 0 9
63445: ARRAY
63446: PUSH
63447: LD_INT 2
63449: ARRAY
63450: PPUSH
63451: CALL_OW 488
63455: NOT
63456: OR
63457: PUSH
63458: LD_VAR 0 13
63462: PPUSH
63463: CALL_OW 247
63467: PUSH
63468: LD_INT 3
63470: EQUAL
63471: OR
63472: IFFALSE 63478
// exit ;
63474: POP
63475: POP
63476: GO 64022
// if not tmp then
63478: LD_VAR 0 13
63482: NOT
63483: IFFALSE 63487
// continue ;
63485: GO 63343
// result := true ;
63487: LD_ADDR_VAR 0 8
63491: PUSH
63492: LD_INT 1
63494: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
63495: LD_VAR 0 6
63499: PUSH
63500: LD_VAR 0 13
63504: PPUSH
63505: CALL_OW 247
63509: PUSH
63510: LD_INT 2
63512: EQUAL
63513: AND
63514: PUSH
63515: LD_VAR 0 13
63519: PPUSH
63520: CALL_OW 263
63524: PUSH
63525: LD_INT 1
63527: EQUAL
63528: AND
63529: IFFALSE 63693
// begin if IsDrivenBy ( tmp ) then
63531: LD_VAR 0 13
63535: PPUSH
63536: CALL_OW 311
63540: IFFALSE 63544
// continue ;
63542: GO 63343
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
63544: LD_VAR 0 6
63548: PPUSH
63549: LD_INT 3
63551: PUSH
63552: LD_INT 60
63554: PUSH
63555: EMPTY
63556: LIST
63557: PUSH
63558: EMPTY
63559: LIST
63560: LIST
63561: PUSH
63562: LD_INT 3
63564: PUSH
63565: LD_INT 55
63567: PUSH
63568: EMPTY
63569: LIST
63570: PUSH
63571: EMPTY
63572: LIST
63573: LIST
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: PPUSH
63579: CALL_OW 72
63583: IFFALSE 63691
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
63585: LD_ADDR_VAR 0 18
63589: PUSH
63590: LD_VAR 0 6
63594: PPUSH
63595: LD_INT 3
63597: PUSH
63598: LD_INT 60
63600: PUSH
63601: EMPTY
63602: LIST
63603: PUSH
63604: EMPTY
63605: LIST
63606: LIST
63607: PUSH
63608: LD_INT 3
63610: PUSH
63611: LD_INT 55
63613: PUSH
63614: EMPTY
63615: LIST
63616: PUSH
63617: EMPTY
63618: LIST
63619: LIST
63620: PUSH
63621: EMPTY
63622: LIST
63623: LIST
63624: PPUSH
63625: CALL_OW 72
63629: PUSH
63630: LD_INT 1
63632: ARRAY
63633: ST_TO_ADDR
// if IsInUnit ( driver ) then
63634: LD_VAR 0 18
63638: PPUSH
63639: CALL_OW 310
63643: IFFALSE 63654
// ComExit ( driver ) ;
63645: LD_VAR 0 18
63649: PPUSH
63650: CALL 89054 0 1
// AddComEnterUnit ( driver , tmp ) ;
63654: LD_VAR 0 18
63658: PPUSH
63659: LD_VAR 0 13
63663: PPUSH
63664: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
63668: LD_VAR 0 18
63672: PPUSH
63673: LD_VAR 0 7
63677: PPUSH
63678: CALL_OW 173
// AddComExitVehicle ( driver ) ;
63682: LD_VAR 0 18
63686: PPUSH
63687: CALL_OW 181
// end ; continue ;
63691: GO 63343
// end ; if not cleaners or not tmp in cleaners then
63693: LD_VAR 0 6
63697: NOT
63698: PUSH
63699: LD_VAR 0 13
63703: PUSH
63704: LD_VAR 0 6
63708: IN
63709: NOT
63710: OR
63711: IFFALSE 64018
// begin if dep then
63713: LD_VAR 0 17
63717: IFFALSE 63853
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
63719: LD_ADDR_VAR 0 16
63723: PUSH
63724: LD_VAR 0 17
63728: PUSH
63729: LD_INT 1
63731: ARRAY
63732: PPUSH
63733: CALL_OW 250
63737: PPUSH
63738: LD_VAR 0 17
63742: PUSH
63743: LD_INT 1
63745: ARRAY
63746: PPUSH
63747: CALL_OW 254
63751: PPUSH
63752: LD_INT 5
63754: PPUSH
63755: CALL_OW 272
63759: PUSH
63760: LD_VAR 0 17
63764: PUSH
63765: LD_INT 1
63767: ARRAY
63768: PPUSH
63769: CALL_OW 251
63773: PPUSH
63774: LD_VAR 0 17
63778: PUSH
63779: LD_INT 1
63781: ARRAY
63782: PPUSH
63783: CALL_OW 254
63787: PPUSH
63788: LD_INT 5
63790: PPUSH
63791: CALL_OW 273
63795: PUSH
63796: EMPTY
63797: LIST
63798: LIST
63799: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
63800: LD_VAR 0 16
63804: PUSH
63805: LD_INT 1
63807: ARRAY
63808: PPUSH
63809: LD_VAR 0 16
63813: PUSH
63814: LD_INT 2
63816: ARRAY
63817: PPUSH
63818: CALL_OW 488
63822: IFFALSE 63853
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
63824: LD_VAR 0 13
63828: PPUSH
63829: LD_VAR 0 16
63833: PUSH
63834: LD_INT 1
63836: ARRAY
63837: PPUSH
63838: LD_VAR 0 16
63842: PUSH
63843: LD_INT 2
63845: ARRAY
63846: PPUSH
63847: CALL_OW 111
// continue ;
63851: GO 63343
// end ; end ; r := GetDir ( tmp ) ;
63853: LD_ADDR_VAR 0 15
63857: PUSH
63858: LD_VAR 0 13
63862: PPUSH
63863: CALL_OW 254
63867: ST_TO_ADDR
// if r = 5 then
63868: LD_VAR 0 15
63872: PUSH
63873: LD_INT 5
63875: EQUAL
63876: IFFALSE 63886
// r := 0 ;
63878: LD_ADDR_VAR 0 15
63882: PUSH
63883: LD_INT 0
63885: ST_TO_ADDR
// for j = r to 5 do
63886: LD_ADDR_VAR 0 10
63890: PUSH
63891: DOUBLE
63892: LD_VAR 0 15
63896: DEC
63897: ST_TO_ADDR
63898: LD_INT 5
63900: PUSH
63901: FOR_TO
63902: IFFALSE 64016
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
63904: LD_ADDR_VAR 0 11
63908: PUSH
63909: LD_VAR 0 13
63913: PPUSH
63914: CALL_OW 250
63918: PPUSH
63919: LD_VAR 0 10
63923: PPUSH
63924: LD_INT 2
63926: PPUSH
63927: CALL_OW 272
63931: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
63932: LD_ADDR_VAR 0 12
63936: PUSH
63937: LD_VAR 0 13
63941: PPUSH
63942: CALL_OW 251
63946: PPUSH
63947: LD_VAR 0 10
63951: PPUSH
63952: LD_INT 2
63954: PPUSH
63955: CALL_OW 273
63959: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
63960: LD_VAR 0 11
63964: PPUSH
63965: LD_VAR 0 12
63969: PPUSH
63970: CALL_OW 488
63974: PUSH
63975: LD_VAR 0 11
63979: PPUSH
63980: LD_VAR 0 12
63984: PPUSH
63985: CALL_OW 428
63989: NOT
63990: AND
63991: IFFALSE 64014
// begin ComMoveXY ( tmp , _x , _y ) ;
63993: LD_VAR 0 13
63997: PPUSH
63998: LD_VAR 0 11
64002: PPUSH
64003: LD_VAR 0 12
64007: PPUSH
64008: CALL_OW 111
// break ;
64012: GO 64016
// end ; end ;
64014: GO 63901
64016: POP
64017: POP
// end ; end ;
64018: GO 63343
64020: POP
64021: POP
// end ;
64022: LD_VAR 0 8
64026: RET
// export function BuildingTechInvented ( side , btype ) ; begin
64027: LD_INT 0
64029: PPUSH
// result := true ;
64030: LD_ADDR_VAR 0 3
64034: PUSH
64035: LD_INT 1
64037: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
64038: LD_VAR 0 2
64042: PUSH
64043: LD_INT 24
64045: DOUBLE
64046: EQUAL
64047: IFTRUE 64057
64049: LD_INT 33
64051: DOUBLE
64052: EQUAL
64053: IFTRUE 64057
64055: GO 64082
64057: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
64058: LD_ADDR_VAR 0 3
64062: PUSH
64063: LD_INT 32
64065: PPUSH
64066: LD_VAR 0 1
64070: PPUSH
64071: CALL_OW 321
64075: PUSH
64076: LD_INT 2
64078: EQUAL
64079: ST_TO_ADDR
64080: GO 64398
64082: LD_INT 20
64084: DOUBLE
64085: EQUAL
64086: IFTRUE 64090
64088: GO 64115
64090: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
64091: LD_ADDR_VAR 0 3
64095: PUSH
64096: LD_INT 6
64098: PPUSH
64099: LD_VAR 0 1
64103: PPUSH
64104: CALL_OW 321
64108: PUSH
64109: LD_INT 2
64111: EQUAL
64112: ST_TO_ADDR
64113: GO 64398
64115: LD_INT 22
64117: DOUBLE
64118: EQUAL
64119: IFTRUE 64129
64121: LD_INT 36
64123: DOUBLE
64124: EQUAL
64125: IFTRUE 64129
64127: GO 64154
64129: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
64130: LD_ADDR_VAR 0 3
64134: PUSH
64135: LD_INT 15
64137: PPUSH
64138: LD_VAR 0 1
64142: PPUSH
64143: CALL_OW 321
64147: PUSH
64148: LD_INT 2
64150: EQUAL
64151: ST_TO_ADDR
64152: GO 64398
64154: LD_INT 30
64156: DOUBLE
64157: EQUAL
64158: IFTRUE 64162
64160: GO 64187
64162: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
64163: LD_ADDR_VAR 0 3
64167: PUSH
64168: LD_INT 20
64170: PPUSH
64171: LD_VAR 0 1
64175: PPUSH
64176: CALL_OW 321
64180: PUSH
64181: LD_INT 2
64183: EQUAL
64184: ST_TO_ADDR
64185: GO 64398
64187: LD_INT 28
64189: DOUBLE
64190: EQUAL
64191: IFTRUE 64201
64193: LD_INT 21
64195: DOUBLE
64196: EQUAL
64197: IFTRUE 64201
64199: GO 64226
64201: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
64202: LD_ADDR_VAR 0 3
64206: PUSH
64207: LD_INT 21
64209: PPUSH
64210: LD_VAR 0 1
64214: PPUSH
64215: CALL_OW 321
64219: PUSH
64220: LD_INT 2
64222: EQUAL
64223: ST_TO_ADDR
64224: GO 64398
64226: LD_INT 16
64228: DOUBLE
64229: EQUAL
64230: IFTRUE 64234
64232: GO 64259
64234: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
64235: LD_ADDR_VAR 0 3
64239: PUSH
64240: LD_INT 84
64242: PPUSH
64243: LD_VAR 0 1
64247: PPUSH
64248: CALL_OW 321
64252: PUSH
64253: LD_INT 2
64255: EQUAL
64256: ST_TO_ADDR
64257: GO 64398
64259: LD_INT 19
64261: DOUBLE
64262: EQUAL
64263: IFTRUE 64273
64265: LD_INT 23
64267: DOUBLE
64268: EQUAL
64269: IFTRUE 64273
64271: GO 64298
64273: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
64274: LD_ADDR_VAR 0 3
64278: PUSH
64279: LD_INT 83
64281: PPUSH
64282: LD_VAR 0 1
64286: PPUSH
64287: CALL_OW 321
64291: PUSH
64292: LD_INT 2
64294: EQUAL
64295: ST_TO_ADDR
64296: GO 64398
64298: LD_INT 17
64300: DOUBLE
64301: EQUAL
64302: IFTRUE 64306
64304: GO 64331
64306: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
64307: LD_ADDR_VAR 0 3
64311: PUSH
64312: LD_INT 39
64314: PPUSH
64315: LD_VAR 0 1
64319: PPUSH
64320: CALL_OW 321
64324: PUSH
64325: LD_INT 2
64327: EQUAL
64328: ST_TO_ADDR
64329: GO 64398
64331: LD_INT 18
64333: DOUBLE
64334: EQUAL
64335: IFTRUE 64339
64337: GO 64364
64339: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
64340: LD_ADDR_VAR 0 3
64344: PUSH
64345: LD_INT 40
64347: PPUSH
64348: LD_VAR 0 1
64352: PPUSH
64353: CALL_OW 321
64357: PUSH
64358: LD_INT 2
64360: EQUAL
64361: ST_TO_ADDR
64362: GO 64398
64364: LD_INT 27
64366: DOUBLE
64367: EQUAL
64368: IFTRUE 64372
64370: GO 64397
64372: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
64373: LD_ADDR_VAR 0 3
64377: PUSH
64378: LD_INT 35
64380: PPUSH
64381: LD_VAR 0 1
64385: PPUSH
64386: CALL_OW 321
64390: PUSH
64391: LD_INT 2
64393: EQUAL
64394: ST_TO_ADDR
64395: GO 64398
64397: POP
// end ;
64398: LD_VAR 0 3
64402: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
64403: LD_INT 0
64405: PPUSH
64406: PPUSH
64407: PPUSH
64408: PPUSH
64409: PPUSH
64410: PPUSH
64411: PPUSH
64412: PPUSH
64413: PPUSH
64414: PPUSH
64415: PPUSH
// result := false ;
64416: LD_ADDR_VAR 0 6
64420: PUSH
64421: LD_INT 0
64423: ST_TO_ADDR
// if btype = b_depot then
64424: LD_VAR 0 2
64428: PUSH
64429: LD_INT 0
64431: EQUAL
64432: IFFALSE 64444
// begin result := true ;
64434: LD_ADDR_VAR 0 6
64438: PUSH
64439: LD_INT 1
64441: ST_TO_ADDR
// exit ;
64442: GO 65270
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
64444: LD_VAR 0 1
64448: NOT
64449: PUSH
64450: LD_VAR 0 1
64454: PPUSH
64455: CALL_OW 266
64459: PUSH
64460: LD_INT 0
64462: PUSH
64463: LD_INT 1
64465: PUSH
64466: EMPTY
64467: LIST
64468: LIST
64469: IN
64470: NOT
64471: OR
64472: PUSH
64473: LD_VAR 0 2
64477: NOT
64478: OR
64479: PUSH
64480: LD_VAR 0 5
64484: PUSH
64485: LD_INT 0
64487: PUSH
64488: LD_INT 1
64490: PUSH
64491: LD_INT 2
64493: PUSH
64494: LD_INT 3
64496: PUSH
64497: LD_INT 4
64499: PUSH
64500: LD_INT 5
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: LIST
64507: LIST
64508: LIST
64509: LIST
64510: IN
64511: NOT
64512: OR
64513: PUSH
64514: LD_VAR 0 3
64518: PPUSH
64519: LD_VAR 0 4
64523: PPUSH
64524: CALL_OW 488
64528: NOT
64529: OR
64530: IFFALSE 64534
// exit ;
64532: GO 65270
// side := GetSide ( depot ) ;
64534: LD_ADDR_VAR 0 9
64538: PUSH
64539: LD_VAR 0 1
64543: PPUSH
64544: CALL_OW 255
64548: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
64549: LD_VAR 0 9
64553: PPUSH
64554: LD_VAR 0 2
64558: PPUSH
64559: CALL 64027 0 2
64563: NOT
64564: IFFALSE 64568
// exit ;
64566: GO 65270
// pom := GetBase ( depot ) ;
64568: LD_ADDR_VAR 0 10
64572: PUSH
64573: LD_VAR 0 1
64577: PPUSH
64578: CALL_OW 274
64582: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
64583: LD_ADDR_VAR 0 11
64587: PUSH
64588: LD_VAR 0 2
64592: PPUSH
64593: LD_VAR 0 1
64597: PPUSH
64598: CALL_OW 248
64602: PPUSH
64603: CALL_OW 450
64607: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
64608: LD_VAR 0 10
64612: PPUSH
64613: LD_INT 1
64615: PPUSH
64616: CALL_OW 275
64620: PUSH
64621: LD_VAR 0 11
64625: PUSH
64626: LD_INT 1
64628: ARRAY
64629: GREATEREQUAL
64630: PUSH
64631: LD_VAR 0 10
64635: PPUSH
64636: LD_INT 2
64638: PPUSH
64639: CALL_OW 275
64643: PUSH
64644: LD_VAR 0 11
64648: PUSH
64649: LD_INT 2
64651: ARRAY
64652: GREATEREQUAL
64653: AND
64654: PUSH
64655: LD_VAR 0 10
64659: PPUSH
64660: LD_INT 3
64662: PPUSH
64663: CALL_OW 275
64667: PUSH
64668: LD_VAR 0 11
64672: PUSH
64673: LD_INT 3
64675: ARRAY
64676: GREATEREQUAL
64677: AND
64678: NOT
64679: IFFALSE 64683
// exit ;
64681: GO 65270
// if GetBType ( depot ) = b_depot then
64683: LD_VAR 0 1
64687: PPUSH
64688: CALL_OW 266
64692: PUSH
64693: LD_INT 0
64695: EQUAL
64696: IFFALSE 64708
// dist := 28 else
64698: LD_ADDR_VAR 0 14
64702: PUSH
64703: LD_INT 28
64705: ST_TO_ADDR
64706: GO 64716
// dist := 36 ;
64708: LD_ADDR_VAR 0 14
64712: PUSH
64713: LD_INT 36
64715: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
64716: LD_VAR 0 1
64720: PPUSH
64721: LD_VAR 0 3
64725: PPUSH
64726: LD_VAR 0 4
64730: PPUSH
64731: CALL_OW 297
64735: PUSH
64736: LD_VAR 0 14
64740: GREATER
64741: IFFALSE 64745
// exit ;
64743: GO 65270
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
64745: LD_ADDR_VAR 0 12
64749: PUSH
64750: LD_VAR 0 2
64754: PPUSH
64755: LD_VAR 0 3
64759: PPUSH
64760: LD_VAR 0 4
64764: PPUSH
64765: LD_VAR 0 5
64769: PPUSH
64770: LD_VAR 0 1
64774: PPUSH
64775: CALL_OW 248
64779: PPUSH
64780: LD_INT 0
64782: PPUSH
64783: CALL 65275 0 6
64787: ST_TO_ADDR
// if not hexes then
64788: LD_VAR 0 12
64792: NOT
64793: IFFALSE 64797
// exit ;
64795: GO 65270
// hex := GetHexInfo ( x , y ) ;
64797: LD_ADDR_VAR 0 15
64801: PUSH
64802: LD_VAR 0 3
64806: PPUSH
64807: LD_VAR 0 4
64811: PPUSH
64812: CALL_OW 546
64816: ST_TO_ADDR
// if hex [ 1 ] then
64817: LD_VAR 0 15
64821: PUSH
64822: LD_INT 1
64824: ARRAY
64825: IFFALSE 64829
// exit ;
64827: GO 65270
// height := hex [ 2 ] ;
64829: LD_ADDR_VAR 0 13
64833: PUSH
64834: LD_VAR 0 15
64838: PUSH
64839: LD_INT 2
64841: ARRAY
64842: ST_TO_ADDR
// for i = 1 to hexes do
64843: LD_ADDR_VAR 0 7
64847: PUSH
64848: DOUBLE
64849: LD_INT 1
64851: DEC
64852: ST_TO_ADDR
64853: LD_VAR 0 12
64857: PUSH
64858: FOR_TO
64859: IFFALSE 65189
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
64861: LD_VAR 0 12
64865: PUSH
64866: LD_VAR 0 7
64870: ARRAY
64871: PUSH
64872: LD_INT 1
64874: ARRAY
64875: PPUSH
64876: LD_VAR 0 12
64880: PUSH
64881: LD_VAR 0 7
64885: ARRAY
64886: PUSH
64887: LD_INT 2
64889: ARRAY
64890: PPUSH
64891: CALL_OW 488
64895: NOT
64896: PUSH
64897: LD_VAR 0 12
64901: PUSH
64902: LD_VAR 0 7
64906: ARRAY
64907: PUSH
64908: LD_INT 1
64910: ARRAY
64911: PPUSH
64912: LD_VAR 0 12
64916: PUSH
64917: LD_VAR 0 7
64921: ARRAY
64922: PUSH
64923: LD_INT 2
64925: ARRAY
64926: PPUSH
64927: CALL_OW 428
64931: PUSH
64932: LD_INT 0
64934: GREATER
64935: OR
64936: PUSH
64937: LD_VAR 0 12
64941: PUSH
64942: LD_VAR 0 7
64946: ARRAY
64947: PUSH
64948: LD_INT 1
64950: ARRAY
64951: PPUSH
64952: LD_VAR 0 12
64956: PUSH
64957: LD_VAR 0 7
64961: ARRAY
64962: PUSH
64963: LD_INT 2
64965: ARRAY
64966: PPUSH
64967: CALL_OW 351
64971: OR
64972: IFFALSE 64978
// exit ;
64974: POP
64975: POP
64976: GO 65270
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64978: LD_ADDR_VAR 0 8
64982: PUSH
64983: LD_VAR 0 12
64987: PUSH
64988: LD_VAR 0 7
64992: ARRAY
64993: PUSH
64994: LD_INT 1
64996: ARRAY
64997: PPUSH
64998: LD_VAR 0 12
65002: PUSH
65003: LD_VAR 0 7
65007: ARRAY
65008: PUSH
65009: LD_INT 2
65011: ARRAY
65012: PPUSH
65013: CALL_OW 546
65017: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
65018: LD_VAR 0 8
65022: PUSH
65023: LD_INT 1
65025: ARRAY
65026: PUSH
65027: LD_VAR 0 8
65031: PUSH
65032: LD_INT 2
65034: ARRAY
65035: PUSH
65036: LD_VAR 0 13
65040: PUSH
65041: LD_INT 2
65043: PLUS
65044: GREATER
65045: OR
65046: PUSH
65047: LD_VAR 0 8
65051: PUSH
65052: LD_INT 2
65054: ARRAY
65055: PUSH
65056: LD_VAR 0 13
65060: PUSH
65061: LD_INT 2
65063: MINUS
65064: LESS
65065: OR
65066: PUSH
65067: LD_VAR 0 8
65071: PUSH
65072: LD_INT 3
65074: ARRAY
65075: PUSH
65076: LD_INT 0
65078: PUSH
65079: LD_INT 8
65081: PUSH
65082: LD_INT 9
65084: PUSH
65085: LD_INT 10
65087: PUSH
65088: LD_INT 11
65090: PUSH
65091: LD_INT 12
65093: PUSH
65094: LD_INT 13
65096: PUSH
65097: LD_INT 16
65099: PUSH
65100: LD_INT 17
65102: PUSH
65103: LD_INT 18
65105: PUSH
65106: LD_INT 19
65108: PUSH
65109: LD_INT 20
65111: PUSH
65112: LD_INT 21
65114: PUSH
65115: EMPTY
65116: LIST
65117: LIST
65118: LIST
65119: LIST
65120: LIST
65121: LIST
65122: LIST
65123: LIST
65124: LIST
65125: LIST
65126: LIST
65127: LIST
65128: LIST
65129: IN
65130: NOT
65131: OR
65132: PUSH
65133: LD_VAR 0 8
65137: PUSH
65138: LD_INT 5
65140: ARRAY
65141: NOT
65142: OR
65143: PUSH
65144: LD_VAR 0 8
65148: PUSH
65149: LD_INT 6
65151: ARRAY
65152: PUSH
65153: LD_INT 1
65155: PUSH
65156: LD_INT 2
65158: PUSH
65159: LD_INT 7
65161: PUSH
65162: LD_INT 9
65164: PUSH
65165: LD_INT 10
65167: PUSH
65168: LD_INT 11
65170: PUSH
65171: EMPTY
65172: LIST
65173: LIST
65174: LIST
65175: LIST
65176: LIST
65177: LIST
65178: IN
65179: NOT
65180: OR
65181: IFFALSE 65187
// exit ;
65183: POP
65184: POP
65185: GO 65270
// end ;
65187: GO 64858
65189: POP
65190: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
65191: LD_VAR 0 9
65195: PPUSH
65196: LD_VAR 0 3
65200: PPUSH
65201: LD_VAR 0 4
65205: PPUSH
65206: LD_INT 20
65208: PPUSH
65209: CALL 57193 0 4
65213: PUSH
65214: LD_INT 4
65216: ARRAY
65217: IFFALSE 65221
// exit ;
65219: GO 65270
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
65221: LD_VAR 0 2
65225: PUSH
65226: LD_INT 29
65228: PUSH
65229: LD_INT 30
65231: PUSH
65232: EMPTY
65233: LIST
65234: LIST
65235: IN
65236: PUSH
65237: LD_VAR 0 3
65241: PPUSH
65242: LD_VAR 0 4
65246: PPUSH
65247: LD_VAR 0 9
65251: PPUSH
65252: CALL_OW 440
65256: NOT
65257: AND
65258: IFFALSE 65262
// exit ;
65260: GO 65270
// result := true ;
65262: LD_ADDR_VAR 0 6
65266: PUSH
65267: LD_INT 1
65269: ST_TO_ADDR
// end ;
65270: LD_VAR 0 6
65274: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
65275: LD_INT 0
65277: PPUSH
65278: PPUSH
65279: PPUSH
65280: PPUSH
65281: PPUSH
65282: PPUSH
65283: PPUSH
65284: PPUSH
65285: PPUSH
65286: PPUSH
65287: PPUSH
65288: PPUSH
65289: PPUSH
65290: PPUSH
65291: PPUSH
65292: PPUSH
65293: PPUSH
65294: PPUSH
65295: PPUSH
65296: PPUSH
65297: PPUSH
65298: PPUSH
65299: PPUSH
65300: PPUSH
65301: PPUSH
65302: PPUSH
65303: PPUSH
65304: PPUSH
65305: PPUSH
65306: PPUSH
65307: PPUSH
65308: PPUSH
65309: PPUSH
65310: PPUSH
65311: PPUSH
65312: PPUSH
65313: PPUSH
65314: PPUSH
65315: PPUSH
65316: PPUSH
65317: PPUSH
65318: PPUSH
65319: PPUSH
65320: PPUSH
65321: PPUSH
65322: PPUSH
65323: PPUSH
65324: PPUSH
65325: PPUSH
65326: PPUSH
65327: PPUSH
65328: PPUSH
65329: PPUSH
65330: PPUSH
65331: PPUSH
65332: PPUSH
65333: PPUSH
65334: PPUSH
// result = [ ] ;
65335: LD_ADDR_VAR 0 7
65339: PUSH
65340: EMPTY
65341: ST_TO_ADDR
// temp_list = [ ] ;
65342: LD_ADDR_VAR 0 9
65346: PUSH
65347: EMPTY
65348: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
65349: LD_VAR 0 4
65353: PUSH
65354: LD_INT 0
65356: PUSH
65357: LD_INT 1
65359: PUSH
65360: LD_INT 2
65362: PUSH
65363: LD_INT 3
65365: PUSH
65366: LD_INT 4
65368: PUSH
65369: LD_INT 5
65371: PUSH
65372: EMPTY
65373: LIST
65374: LIST
65375: LIST
65376: LIST
65377: LIST
65378: LIST
65379: IN
65380: NOT
65381: PUSH
65382: LD_VAR 0 1
65386: PUSH
65387: LD_INT 0
65389: PUSH
65390: LD_INT 1
65392: PUSH
65393: EMPTY
65394: LIST
65395: LIST
65396: IN
65397: PUSH
65398: LD_VAR 0 5
65402: PUSH
65403: LD_INT 1
65405: PUSH
65406: LD_INT 2
65408: PUSH
65409: LD_INT 3
65411: PUSH
65412: EMPTY
65413: LIST
65414: LIST
65415: LIST
65416: IN
65417: NOT
65418: AND
65419: OR
65420: IFFALSE 65424
// exit ;
65422: GO 83815
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
65424: LD_VAR 0 1
65428: PUSH
65429: LD_INT 6
65431: PUSH
65432: LD_INT 7
65434: PUSH
65435: LD_INT 8
65437: PUSH
65438: LD_INT 13
65440: PUSH
65441: LD_INT 12
65443: PUSH
65444: LD_INT 15
65446: PUSH
65447: LD_INT 11
65449: PUSH
65450: LD_INT 14
65452: PUSH
65453: LD_INT 10
65455: PUSH
65456: EMPTY
65457: LIST
65458: LIST
65459: LIST
65460: LIST
65461: LIST
65462: LIST
65463: LIST
65464: LIST
65465: LIST
65466: IN
65467: IFFALSE 65477
// btype = b_lab ;
65469: LD_ADDR_VAR 0 1
65473: PUSH
65474: LD_INT 6
65476: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
65477: LD_VAR 0 6
65481: PUSH
65482: LD_INT 0
65484: PUSH
65485: LD_INT 1
65487: PUSH
65488: LD_INT 2
65490: PUSH
65491: EMPTY
65492: LIST
65493: LIST
65494: LIST
65495: IN
65496: NOT
65497: PUSH
65498: LD_VAR 0 1
65502: PUSH
65503: LD_INT 0
65505: PUSH
65506: LD_INT 1
65508: PUSH
65509: LD_INT 2
65511: PUSH
65512: LD_INT 3
65514: PUSH
65515: LD_INT 6
65517: PUSH
65518: LD_INT 36
65520: PUSH
65521: LD_INT 4
65523: PUSH
65524: LD_INT 5
65526: PUSH
65527: LD_INT 31
65529: PUSH
65530: LD_INT 32
65532: PUSH
65533: LD_INT 33
65535: PUSH
65536: EMPTY
65537: LIST
65538: LIST
65539: LIST
65540: LIST
65541: LIST
65542: LIST
65543: LIST
65544: LIST
65545: LIST
65546: LIST
65547: LIST
65548: IN
65549: NOT
65550: PUSH
65551: LD_VAR 0 6
65555: PUSH
65556: LD_INT 1
65558: EQUAL
65559: AND
65560: OR
65561: PUSH
65562: LD_VAR 0 1
65566: PUSH
65567: LD_INT 2
65569: PUSH
65570: LD_INT 3
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: IN
65577: NOT
65578: PUSH
65579: LD_VAR 0 6
65583: PUSH
65584: LD_INT 2
65586: EQUAL
65587: AND
65588: OR
65589: IFFALSE 65599
// mode = 0 ;
65591: LD_ADDR_VAR 0 6
65595: PUSH
65596: LD_INT 0
65598: ST_TO_ADDR
// case mode of 0 :
65599: LD_VAR 0 6
65603: PUSH
65604: LD_INT 0
65606: DOUBLE
65607: EQUAL
65608: IFTRUE 65612
65610: GO 77065
65612: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
65613: LD_ADDR_VAR 0 11
65617: PUSH
65618: LD_INT 0
65620: PUSH
65621: LD_INT 0
65623: PUSH
65624: EMPTY
65625: LIST
65626: LIST
65627: PUSH
65628: LD_INT 0
65630: PUSH
65631: LD_INT 1
65633: NEG
65634: PUSH
65635: EMPTY
65636: LIST
65637: LIST
65638: PUSH
65639: LD_INT 1
65641: PUSH
65642: LD_INT 0
65644: PUSH
65645: EMPTY
65646: LIST
65647: LIST
65648: PUSH
65649: LD_INT 1
65651: PUSH
65652: LD_INT 1
65654: PUSH
65655: EMPTY
65656: LIST
65657: LIST
65658: PUSH
65659: LD_INT 0
65661: PUSH
65662: LD_INT 1
65664: PUSH
65665: EMPTY
65666: LIST
65667: LIST
65668: PUSH
65669: LD_INT 1
65671: NEG
65672: PUSH
65673: LD_INT 0
65675: PUSH
65676: EMPTY
65677: LIST
65678: LIST
65679: PUSH
65680: LD_INT 1
65682: NEG
65683: PUSH
65684: LD_INT 1
65686: NEG
65687: PUSH
65688: EMPTY
65689: LIST
65690: LIST
65691: PUSH
65692: LD_INT 1
65694: NEG
65695: PUSH
65696: LD_INT 2
65698: NEG
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 0
65706: PUSH
65707: LD_INT 2
65709: NEG
65710: PUSH
65711: EMPTY
65712: LIST
65713: LIST
65714: PUSH
65715: LD_INT 1
65717: PUSH
65718: LD_INT 1
65720: NEG
65721: PUSH
65722: EMPTY
65723: LIST
65724: LIST
65725: PUSH
65726: LD_INT 1
65728: PUSH
65729: LD_INT 2
65731: PUSH
65732: EMPTY
65733: LIST
65734: LIST
65735: PUSH
65736: LD_INT 0
65738: PUSH
65739: LD_INT 2
65741: PUSH
65742: EMPTY
65743: LIST
65744: LIST
65745: PUSH
65746: LD_INT 1
65748: NEG
65749: PUSH
65750: LD_INT 1
65752: PUSH
65753: EMPTY
65754: LIST
65755: LIST
65756: PUSH
65757: LD_INT 1
65759: PUSH
65760: LD_INT 3
65762: PUSH
65763: EMPTY
65764: LIST
65765: LIST
65766: PUSH
65767: LD_INT 0
65769: PUSH
65770: LD_INT 3
65772: PUSH
65773: EMPTY
65774: LIST
65775: LIST
65776: PUSH
65777: LD_INT 1
65779: NEG
65780: PUSH
65781: LD_INT 2
65783: PUSH
65784: EMPTY
65785: LIST
65786: LIST
65787: PUSH
65788: EMPTY
65789: LIST
65790: LIST
65791: LIST
65792: LIST
65793: LIST
65794: LIST
65795: LIST
65796: LIST
65797: LIST
65798: LIST
65799: LIST
65800: LIST
65801: LIST
65802: LIST
65803: LIST
65804: LIST
65805: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
65806: LD_ADDR_VAR 0 12
65810: PUSH
65811: LD_INT 0
65813: PUSH
65814: LD_INT 0
65816: PUSH
65817: EMPTY
65818: LIST
65819: LIST
65820: PUSH
65821: LD_INT 0
65823: PUSH
65824: LD_INT 1
65826: NEG
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 1
65834: PUSH
65835: LD_INT 0
65837: PUSH
65838: EMPTY
65839: LIST
65840: LIST
65841: PUSH
65842: LD_INT 1
65844: PUSH
65845: LD_INT 1
65847: PUSH
65848: EMPTY
65849: LIST
65850: LIST
65851: PUSH
65852: LD_INT 0
65854: PUSH
65855: LD_INT 1
65857: PUSH
65858: EMPTY
65859: LIST
65860: LIST
65861: PUSH
65862: LD_INT 1
65864: NEG
65865: PUSH
65866: LD_INT 0
65868: PUSH
65869: EMPTY
65870: LIST
65871: LIST
65872: PUSH
65873: LD_INT 1
65875: NEG
65876: PUSH
65877: LD_INT 1
65879: NEG
65880: PUSH
65881: EMPTY
65882: LIST
65883: LIST
65884: PUSH
65885: LD_INT 1
65887: PUSH
65888: LD_INT 1
65890: NEG
65891: PUSH
65892: EMPTY
65893: LIST
65894: LIST
65895: PUSH
65896: LD_INT 2
65898: PUSH
65899: LD_INT 0
65901: PUSH
65902: EMPTY
65903: LIST
65904: LIST
65905: PUSH
65906: LD_INT 2
65908: PUSH
65909: LD_INT 1
65911: PUSH
65912: EMPTY
65913: LIST
65914: LIST
65915: PUSH
65916: LD_INT 1
65918: NEG
65919: PUSH
65920: LD_INT 1
65922: PUSH
65923: EMPTY
65924: LIST
65925: LIST
65926: PUSH
65927: LD_INT 2
65929: NEG
65930: PUSH
65931: LD_INT 0
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 2
65940: NEG
65941: PUSH
65942: LD_INT 1
65944: NEG
65945: PUSH
65946: EMPTY
65947: LIST
65948: LIST
65949: PUSH
65950: LD_INT 2
65952: NEG
65953: PUSH
65954: LD_INT 1
65956: PUSH
65957: EMPTY
65958: LIST
65959: LIST
65960: PUSH
65961: LD_INT 3
65963: NEG
65964: PUSH
65965: LD_INT 0
65967: PUSH
65968: EMPTY
65969: LIST
65970: LIST
65971: PUSH
65972: LD_INT 3
65974: NEG
65975: PUSH
65976: LD_INT 1
65978: NEG
65979: PUSH
65980: EMPTY
65981: LIST
65982: LIST
65983: PUSH
65984: EMPTY
65985: LIST
65986: LIST
65987: LIST
65988: LIST
65989: LIST
65990: LIST
65991: LIST
65992: LIST
65993: LIST
65994: LIST
65995: LIST
65996: LIST
65997: LIST
65998: LIST
65999: LIST
66000: LIST
66001: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
66002: LD_ADDR_VAR 0 13
66006: PUSH
66007: LD_INT 0
66009: PUSH
66010: LD_INT 0
66012: PUSH
66013: EMPTY
66014: LIST
66015: LIST
66016: PUSH
66017: LD_INT 0
66019: PUSH
66020: LD_INT 1
66022: NEG
66023: PUSH
66024: EMPTY
66025: LIST
66026: LIST
66027: PUSH
66028: LD_INT 1
66030: PUSH
66031: LD_INT 0
66033: PUSH
66034: EMPTY
66035: LIST
66036: LIST
66037: PUSH
66038: LD_INT 1
66040: PUSH
66041: LD_INT 1
66043: PUSH
66044: EMPTY
66045: LIST
66046: LIST
66047: PUSH
66048: LD_INT 0
66050: PUSH
66051: LD_INT 1
66053: PUSH
66054: EMPTY
66055: LIST
66056: LIST
66057: PUSH
66058: LD_INT 1
66060: NEG
66061: PUSH
66062: LD_INT 0
66064: PUSH
66065: EMPTY
66066: LIST
66067: LIST
66068: PUSH
66069: LD_INT 1
66071: NEG
66072: PUSH
66073: LD_INT 1
66075: NEG
66076: PUSH
66077: EMPTY
66078: LIST
66079: LIST
66080: PUSH
66081: LD_INT 1
66083: NEG
66084: PUSH
66085: LD_INT 2
66087: NEG
66088: PUSH
66089: EMPTY
66090: LIST
66091: LIST
66092: PUSH
66093: LD_INT 2
66095: PUSH
66096: LD_INT 1
66098: PUSH
66099: EMPTY
66100: LIST
66101: LIST
66102: PUSH
66103: LD_INT 2
66105: PUSH
66106: LD_INT 2
66108: PUSH
66109: EMPTY
66110: LIST
66111: LIST
66112: PUSH
66113: LD_INT 1
66115: PUSH
66116: LD_INT 2
66118: PUSH
66119: EMPTY
66120: LIST
66121: LIST
66122: PUSH
66123: LD_INT 2
66125: NEG
66126: PUSH
66127: LD_INT 1
66129: NEG
66130: PUSH
66131: EMPTY
66132: LIST
66133: LIST
66134: PUSH
66135: LD_INT 2
66137: NEG
66138: PUSH
66139: LD_INT 2
66141: NEG
66142: PUSH
66143: EMPTY
66144: LIST
66145: LIST
66146: PUSH
66147: LD_INT 2
66149: NEG
66150: PUSH
66151: LD_INT 3
66153: NEG
66154: PUSH
66155: EMPTY
66156: LIST
66157: LIST
66158: PUSH
66159: LD_INT 3
66161: NEG
66162: PUSH
66163: LD_INT 2
66165: NEG
66166: PUSH
66167: EMPTY
66168: LIST
66169: LIST
66170: PUSH
66171: LD_INT 3
66173: NEG
66174: PUSH
66175: LD_INT 3
66177: NEG
66178: PUSH
66179: EMPTY
66180: LIST
66181: LIST
66182: PUSH
66183: EMPTY
66184: LIST
66185: LIST
66186: LIST
66187: LIST
66188: LIST
66189: LIST
66190: LIST
66191: LIST
66192: LIST
66193: LIST
66194: LIST
66195: LIST
66196: LIST
66197: LIST
66198: LIST
66199: LIST
66200: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
66201: LD_ADDR_VAR 0 14
66205: PUSH
66206: LD_INT 0
66208: PUSH
66209: LD_INT 0
66211: PUSH
66212: EMPTY
66213: LIST
66214: LIST
66215: PUSH
66216: LD_INT 0
66218: PUSH
66219: LD_INT 1
66221: NEG
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 1
66229: PUSH
66230: LD_INT 0
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 1
66239: PUSH
66240: LD_INT 1
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: LD_INT 0
66249: PUSH
66250: LD_INT 1
66252: PUSH
66253: EMPTY
66254: LIST
66255: LIST
66256: PUSH
66257: LD_INT 1
66259: NEG
66260: PUSH
66261: LD_INT 0
66263: PUSH
66264: EMPTY
66265: LIST
66266: LIST
66267: PUSH
66268: LD_INT 1
66270: NEG
66271: PUSH
66272: LD_INT 1
66274: NEG
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PUSH
66280: LD_INT 1
66282: NEG
66283: PUSH
66284: LD_INT 2
66286: NEG
66287: PUSH
66288: EMPTY
66289: LIST
66290: LIST
66291: PUSH
66292: LD_INT 0
66294: PUSH
66295: LD_INT 2
66297: NEG
66298: PUSH
66299: EMPTY
66300: LIST
66301: LIST
66302: PUSH
66303: LD_INT 1
66305: PUSH
66306: LD_INT 1
66308: NEG
66309: PUSH
66310: EMPTY
66311: LIST
66312: LIST
66313: PUSH
66314: LD_INT 1
66316: PUSH
66317: LD_INT 2
66319: PUSH
66320: EMPTY
66321: LIST
66322: LIST
66323: PUSH
66324: LD_INT 0
66326: PUSH
66327: LD_INT 2
66329: PUSH
66330: EMPTY
66331: LIST
66332: LIST
66333: PUSH
66334: LD_INT 1
66336: NEG
66337: PUSH
66338: LD_INT 1
66340: PUSH
66341: EMPTY
66342: LIST
66343: LIST
66344: PUSH
66345: LD_INT 1
66347: NEG
66348: PUSH
66349: LD_INT 3
66351: NEG
66352: PUSH
66353: EMPTY
66354: LIST
66355: LIST
66356: PUSH
66357: LD_INT 0
66359: PUSH
66360: LD_INT 3
66362: NEG
66363: PUSH
66364: EMPTY
66365: LIST
66366: LIST
66367: PUSH
66368: LD_INT 1
66370: PUSH
66371: LD_INT 2
66373: NEG
66374: PUSH
66375: EMPTY
66376: LIST
66377: LIST
66378: PUSH
66379: EMPTY
66380: LIST
66381: LIST
66382: LIST
66383: LIST
66384: LIST
66385: LIST
66386: LIST
66387: LIST
66388: LIST
66389: LIST
66390: LIST
66391: LIST
66392: LIST
66393: LIST
66394: LIST
66395: LIST
66396: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
66397: LD_ADDR_VAR 0 15
66401: PUSH
66402: LD_INT 0
66404: PUSH
66405: LD_INT 0
66407: PUSH
66408: EMPTY
66409: LIST
66410: LIST
66411: PUSH
66412: LD_INT 0
66414: PUSH
66415: LD_INT 1
66417: NEG
66418: PUSH
66419: EMPTY
66420: LIST
66421: LIST
66422: PUSH
66423: LD_INT 1
66425: PUSH
66426: LD_INT 0
66428: PUSH
66429: EMPTY
66430: LIST
66431: LIST
66432: PUSH
66433: LD_INT 1
66435: PUSH
66436: LD_INT 1
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 0
66445: PUSH
66446: LD_INT 1
66448: PUSH
66449: EMPTY
66450: LIST
66451: LIST
66452: PUSH
66453: LD_INT 1
66455: NEG
66456: PUSH
66457: LD_INT 0
66459: PUSH
66460: EMPTY
66461: LIST
66462: LIST
66463: PUSH
66464: LD_INT 1
66466: NEG
66467: PUSH
66468: LD_INT 1
66470: NEG
66471: PUSH
66472: EMPTY
66473: LIST
66474: LIST
66475: PUSH
66476: LD_INT 1
66478: PUSH
66479: LD_INT 1
66481: NEG
66482: PUSH
66483: EMPTY
66484: LIST
66485: LIST
66486: PUSH
66487: LD_INT 2
66489: PUSH
66490: LD_INT 0
66492: PUSH
66493: EMPTY
66494: LIST
66495: LIST
66496: PUSH
66497: LD_INT 2
66499: PUSH
66500: LD_INT 1
66502: PUSH
66503: EMPTY
66504: LIST
66505: LIST
66506: PUSH
66507: LD_INT 1
66509: NEG
66510: PUSH
66511: LD_INT 1
66513: PUSH
66514: EMPTY
66515: LIST
66516: LIST
66517: PUSH
66518: LD_INT 2
66520: NEG
66521: PUSH
66522: LD_INT 0
66524: PUSH
66525: EMPTY
66526: LIST
66527: LIST
66528: PUSH
66529: LD_INT 2
66531: NEG
66532: PUSH
66533: LD_INT 1
66535: NEG
66536: PUSH
66537: EMPTY
66538: LIST
66539: LIST
66540: PUSH
66541: LD_INT 2
66543: PUSH
66544: LD_INT 1
66546: NEG
66547: PUSH
66548: EMPTY
66549: LIST
66550: LIST
66551: PUSH
66552: LD_INT 3
66554: PUSH
66555: LD_INT 0
66557: PUSH
66558: EMPTY
66559: LIST
66560: LIST
66561: PUSH
66562: LD_INT 3
66564: PUSH
66565: LD_INT 1
66567: PUSH
66568: EMPTY
66569: LIST
66570: LIST
66571: PUSH
66572: EMPTY
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: LIST
66582: LIST
66583: LIST
66584: LIST
66585: LIST
66586: LIST
66587: LIST
66588: LIST
66589: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
66590: LD_ADDR_VAR 0 16
66594: PUSH
66595: LD_INT 0
66597: PUSH
66598: LD_INT 0
66600: PUSH
66601: EMPTY
66602: LIST
66603: LIST
66604: PUSH
66605: LD_INT 0
66607: PUSH
66608: LD_INT 1
66610: NEG
66611: PUSH
66612: EMPTY
66613: LIST
66614: LIST
66615: PUSH
66616: LD_INT 1
66618: PUSH
66619: LD_INT 0
66621: PUSH
66622: EMPTY
66623: LIST
66624: LIST
66625: PUSH
66626: LD_INT 1
66628: PUSH
66629: LD_INT 1
66631: PUSH
66632: EMPTY
66633: LIST
66634: LIST
66635: PUSH
66636: LD_INT 0
66638: PUSH
66639: LD_INT 1
66641: PUSH
66642: EMPTY
66643: LIST
66644: LIST
66645: PUSH
66646: LD_INT 1
66648: NEG
66649: PUSH
66650: LD_INT 0
66652: PUSH
66653: EMPTY
66654: LIST
66655: LIST
66656: PUSH
66657: LD_INT 1
66659: NEG
66660: PUSH
66661: LD_INT 1
66663: NEG
66664: PUSH
66665: EMPTY
66666: LIST
66667: LIST
66668: PUSH
66669: LD_INT 1
66671: NEG
66672: PUSH
66673: LD_INT 2
66675: NEG
66676: PUSH
66677: EMPTY
66678: LIST
66679: LIST
66680: PUSH
66681: LD_INT 2
66683: PUSH
66684: LD_INT 1
66686: PUSH
66687: EMPTY
66688: LIST
66689: LIST
66690: PUSH
66691: LD_INT 2
66693: PUSH
66694: LD_INT 2
66696: PUSH
66697: EMPTY
66698: LIST
66699: LIST
66700: PUSH
66701: LD_INT 1
66703: PUSH
66704: LD_INT 2
66706: PUSH
66707: EMPTY
66708: LIST
66709: LIST
66710: PUSH
66711: LD_INT 2
66713: NEG
66714: PUSH
66715: LD_INT 1
66717: NEG
66718: PUSH
66719: EMPTY
66720: LIST
66721: LIST
66722: PUSH
66723: LD_INT 2
66725: NEG
66726: PUSH
66727: LD_INT 2
66729: NEG
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 3
66737: PUSH
66738: LD_INT 2
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 3
66747: PUSH
66748: LD_INT 3
66750: PUSH
66751: EMPTY
66752: LIST
66753: LIST
66754: PUSH
66755: LD_INT 2
66757: PUSH
66758: LD_INT 3
66760: PUSH
66761: EMPTY
66762: LIST
66763: LIST
66764: PUSH
66765: EMPTY
66766: LIST
66767: LIST
66768: LIST
66769: LIST
66770: LIST
66771: LIST
66772: LIST
66773: LIST
66774: LIST
66775: LIST
66776: LIST
66777: LIST
66778: LIST
66779: LIST
66780: LIST
66781: LIST
66782: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66783: LD_ADDR_VAR 0 17
66787: PUSH
66788: LD_INT 0
66790: PUSH
66791: LD_INT 0
66793: PUSH
66794: EMPTY
66795: LIST
66796: LIST
66797: PUSH
66798: LD_INT 0
66800: PUSH
66801: LD_INT 1
66803: NEG
66804: PUSH
66805: EMPTY
66806: LIST
66807: LIST
66808: PUSH
66809: LD_INT 1
66811: PUSH
66812: LD_INT 0
66814: PUSH
66815: EMPTY
66816: LIST
66817: LIST
66818: PUSH
66819: LD_INT 1
66821: PUSH
66822: LD_INT 1
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 0
66831: PUSH
66832: LD_INT 1
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: LD_INT 1
66841: NEG
66842: PUSH
66843: LD_INT 0
66845: PUSH
66846: EMPTY
66847: LIST
66848: LIST
66849: PUSH
66850: LD_INT 1
66852: NEG
66853: PUSH
66854: LD_INT 1
66856: NEG
66857: PUSH
66858: EMPTY
66859: LIST
66860: LIST
66861: PUSH
66862: LD_INT 1
66864: NEG
66865: PUSH
66866: LD_INT 2
66868: NEG
66869: PUSH
66870: EMPTY
66871: LIST
66872: LIST
66873: PUSH
66874: LD_INT 0
66876: PUSH
66877: LD_INT 2
66879: NEG
66880: PUSH
66881: EMPTY
66882: LIST
66883: LIST
66884: PUSH
66885: LD_INT 1
66887: PUSH
66888: LD_INT 1
66890: NEG
66891: PUSH
66892: EMPTY
66893: LIST
66894: LIST
66895: PUSH
66896: LD_INT 2
66898: PUSH
66899: LD_INT 0
66901: PUSH
66902: EMPTY
66903: LIST
66904: LIST
66905: PUSH
66906: LD_INT 2
66908: PUSH
66909: LD_INT 1
66911: PUSH
66912: EMPTY
66913: LIST
66914: LIST
66915: PUSH
66916: LD_INT 2
66918: PUSH
66919: LD_INT 2
66921: PUSH
66922: EMPTY
66923: LIST
66924: LIST
66925: PUSH
66926: LD_INT 1
66928: PUSH
66929: LD_INT 2
66931: PUSH
66932: EMPTY
66933: LIST
66934: LIST
66935: PUSH
66936: LD_INT 0
66938: PUSH
66939: LD_INT 2
66941: PUSH
66942: EMPTY
66943: LIST
66944: LIST
66945: PUSH
66946: LD_INT 1
66948: NEG
66949: PUSH
66950: LD_INT 1
66952: PUSH
66953: EMPTY
66954: LIST
66955: LIST
66956: PUSH
66957: LD_INT 2
66959: NEG
66960: PUSH
66961: LD_INT 0
66963: PUSH
66964: EMPTY
66965: LIST
66966: LIST
66967: PUSH
66968: LD_INT 2
66970: NEG
66971: PUSH
66972: LD_INT 1
66974: NEG
66975: PUSH
66976: EMPTY
66977: LIST
66978: LIST
66979: PUSH
66980: LD_INT 2
66982: NEG
66983: PUSH
66984: LD_INT 2
66986: NEG
66987: PUSH
66988: EMPTY
66989: LIST
66990: LIST
66991: PUSH
66992: EMPTY
66993: LIST
66994: LIST
66995: LIST
66996: LIST
66997: LIST
66998: LIST
66999: LIST
67000: LIST
67001: LIST
67002: LIST
67003: LIST
67004: LIST
67005: LIST
67006: LIST
67007: LIST
67008: LIST
67009: LIST
67010: LIST
67011: LIST
67012: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67013: LD_ADDR_VAR 0 18
67017: PUSH
67018: LD_INT 0
67020: PUSH
67021: LD_INT 0
67023: PUSH
67024: EMPTY
67025: LIST
67026: LIST
67027: PUSH
67028: LD_INT 0
67030: PUSH
67031: LD_INT 1
67033: NEG
67034: PUSH
67035: EMPTY
67036: LIST
67037: LIST
67038: PUSH
67039: LD_INT 1
67041: PUSH
67042: LD_INT 0
67044: PUSH
67045: EMPTY
67046: LIST
67047: LIST
67048: PUSH
67049: LD_INT 1
67051: PUSH
67052: LD_INT 1
67054: PUSH
67055: EMPTY
67056: LIST
67057: LIST
67058: PUSH
67059: LD_INT 0
67061: PUSH
67062: LD_INT 1
67064: PUSH
67065: EMPTY
67066: LIST
67067: LIST
67068: PUSH
67069: LD_INT 1
67071: NEG
67072: PUSH
67073: LD_INT 0
67075: PUSH
67076: EMPTY
67077: LIST
67078: LIST
67079: PUSH
67080: LD_INT 1
67082: NEG
67083: PUSH
67084: LD_INT 1
67086: NEG
67087: PUSH
67088: EMPTY
67089: LIST
67090: LIST
67091: PUSH
67092: LD_INT 1
67094: NEG
67095: PUSH
67096: LD_INT 2
67098: NEG
67099: PUSH
67100: EMPTY
67101: LIST
67102: LIST
67103: PUSH
67104: LD_INT 0
67106: PUSH
67107: LD_INT 2
67109: NEG
67110: PUSH
67111: EMPTY
67112: LIST
67113: LIST
67114: PUSH
67115: LD_INT 1
67117: PUSH
67118: LD_INT 1
67120: NEG
67121: PUSH
67122: EMPTY
67123: LIST
67124: LIST
67125: PUSH
67126: LD_INT 2
67128: PUSH
67129: LD_INT 0
67131: PUSH
67132: EMPTY
67133: LIST
67134: LIST
67135: PUSH
67136: LD_INT 2
67138: PUSH
67139: LD_INT 1
67141: PUSH
67142: EMPTY
67143: LIST
67144: LIST
67145: PUSH
67146: LD_INT 2
67148: PUSH
67149: LD_INT 2
67151: PUSH
67152: EMPTY
67153: LIST
67154: LIST
67155: PUSH
67156: LD_INT 1
67158: PUSH
67159: LD_INT 2
67161: PUSH
67162: EMPTY
67163: LIST
67164: LIST
67165: PUSH
67166: LD_INT 0
67168: PUSH
67169: LD_INT 2
67171: PUSH
67172: EMPTY
67173: LIST
67174: LIST
67175: PUSH
67176: LD_INT 1
67178: NEG
67179: PUSH
67180: LD_INT 1
67182: PUSH
67183: EMPTY
67184: LIST
67185: LIST
67186: PUSH
67187: LD_INT 2
67189: NEG
67190: PUSH
67191: LD_INT 0
67193: PUSH
67194: EMPTY
67195: LIST
67196: LIST
67197: PUSH
67198: LD_INT 2
67200: NEG
67201: PUSH
67202: LD_INT 1
67204: NEG
67205: PUSH
67206: EMPTY
67207: LIST
67208: LIST
67209: PUSH
67210: LD_INT 2
67212: NEG
67213: PUSH
67214: LD_INT 2
67216: NEG
67217: PUSH
67218: EMPTY
67219: LIST
67220: LIST
67221: PUSH
67222: EMPTY
67223: LIST
67224: LIST
67225: LIST
67226: LIST
67227: LIST
67228: LIST
67229: LIST
67230: LIST
67231: LIST
67232: LIST
67233: LIST
67234: LIST
67235: LIST
67236: LIST
67237: LIST
67238: LIST
67239: LIST
67240: LIST
67241: LIST
67242: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67243: LD_ADDR_VAR 0 19
67247: PUSH
67248: LD_INT 0
67250: PUSH
67251: LD_INT 0
67253: PUSH
67254: EMPTY
67255: LIST
67256: LIST
67257: PUSH
67258: LD_INT 0
67260: PUSH
67261: LD_INT 1
67263: NEG
67264: PUSH
67265: EMPTY
67266: LIST
67267: LIST
67268: PUSH
67269: LD_INT 1
67271: PUSH
67272: LD_INT 0
67274: PUSH
67275: EMPTY
67276: LIST
67277: LIST
67278: PUSH
67279: LD_INT 1
67281: PUSH
67282: LD_INT 1
67284: PUSH
67285: EMPTY
67286: LIST
67287: LIST
67288: PUSH
67289: LD_INT 0
67291: PUSH
67292: LD_INT 1
67294: PUSH
67295: EMPTY
67296: LIST
67297: LIST
67298: PUSH
67299: LD_INT 1
67301: NEG
67302: PUSH
67303: LD_INT 0
67305: PUSH
67306: EMPTY
67307: LIST
67308: LIST
67309: PUSH
67310: LD_INT 1
67312: NEG
67313: PUSH
67314: LD_INT 1
67316: NEG
67317: PUSH
67318: EMPTY
67319: LIST
67320: LIST
67321: PUSH
67322: LD_INT 1
67324: NEG
67325: PUSH
67326: LD_INT 2
67328: NEG
67329: PUSH
67330: EMPTY
67331: LIST
67332: LIST
67333: PUSH
67334: LD_INT 0
67336: PUSH
67337: LD_INT 2
67339: NEG
67340: PUSH
67341: EMPTY
67342: LIST
67343: LIST
67344: PUSH
67345: LD_INT 1
67347: PUSH
67348: LD_INT 1
67350: NEG
67351: PUSH
67352: EMPTY
67353: LIST
67354: LIST
67355: PUSH
67356: LD_INT 2
67358: PUSH
67359: LD_INT 0
67361: PUSH
67362: EMPTY
67363: LIST
67364: LIST
67365: PUSH
67366: LD_INT 2
67368: PUSH
67369: LD_INT 1
67371: PUSH
67372: EMPTY
67373: LIST
67374: LIST
67375: PUSH
67376: LD_INT 2
67378: PUSH
67379: LD_INT 2
67381: PUSH
67382: EMPTY
67383: LIST
67384: LIST
67385: PUSH
67386: LD_INT 1
67388: PUSH
67389: LD_INT 2
67391: PUSH
67392: EMPTY
67393: LIST
67394: LIST
67395: PUSH
67396: LD_INT 0
67398: PUSH
67399: LD_INT 2
67401: PUSH
67402: EMPTY
67403: LIST
67404: LIST
67405: PUSH
67406: LD_INT 1
67408: NEG
67409: PUSH
67410: LD_INT 1
67412: PUSH
67413: EMPTY
67414: LIST
67415: LIST
67416: PUSH
67417: LD_INT 2
67419: NEG
67420: PUSH
67421: LD_INT 0
67423: PUSH
67424: EMPTY
67425: LIST
67426: LIST
67427: PUSH
67428: LD_INT 2
67430: NEG
67431: PUSH
67432: LD_INT 1
67434: NEG
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 2
67442: NEG
67443: PUSH
67444: LD_INT 2
67446: NEG
67447: PUSH
67448: EMPTY
67449: LIST
67450: LIST
67451: PUSH
67452: EMPTY
67453: LIST
67454: LIST
67455: LIST
67456: LIST
67457: LIST
67458: LIST
67459: LIST
67460: LIST
67461: LIST
67462: LIST
67463: LIST
67464: LIST
67465: LIST
67466: LIST
67467: LIST
67468: LIST
67469: LIST
67470: LIST
67471: LIST
67472: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67473: LD_ADDR_VAR 0 20
67477: PUSH
67478: LD_INT 0
67480: PUSH
67481: LD_INT 0
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PUSH
67488: LD_INT 0
67490: PUSH
67491: LD_INT 1
67493: NEG
67494: PUSH
67495: EMPTY
67496: LIST
67497: LIST
67498: PUSH
67499: LD_INT 1
67501: PUSH
67502: LD_INT 0
67504: PUSH
67505: EMPTY
67506: LIST
67507: LIST
67508: PUSH
67509: LD_INT 1
67511: PUSH
67512: LD_INT 1
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PUSH
67519: LD_INT 0
67521: PUSH
67522: LD_INT 1
67524: PUSH
67525: EMPTY
67526: LIST
67527: LIST
67528: PUSH
67529: LD_INT 1
67531: NEG
67532: PUSH
67533: LD_INT 0
67535: PUSH
67536: EMPTY
67537: LIST
67538: LIST
67539: PUSH
67540: LD_INT 1
67542: NEG
67543: PUSH
67544: LD_INT 1
67546: NEG
67547: PUSH
67548: EMPTY
67549: LIST
67550: LIST
67551: PUSH
67552: LD_INT 1
67554: NEG
67555: PUSH
67556: LD_INT 2
67558: NEG
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PUSH
67564: LD_INT 0
67566: PUSH
67567: LD_INT 2
67569: NEG
67570: PUSH
67571: EMPTY
67572: LIST
67573: LIST
67574: PUSH
67575: LD_INT 1
67577: PUSH
67578: LD_INT 1
67580: NEG
67581: PUSH
67582: EMPTY
67583: LIST
67584: LIST
67585: PUSH
67586: LD_INT 2
67588: PUSH
67589: LD_INT 0
67591: PUSH
67592: EMPTY
67593: LIST
67594: LIST
67595: PUSH
67596: LD_INT 2
67598: PUSH
67599: LD_INT 1
67601: PUSH
67602: EMPTY
67603: LIST
67604: LIST
67605: PUSH
67606: LD_INT 2
67608: PUSH
67609: LD_INT 2
67611: PUSH
67612: EMPTY
67613: LIST
67614: LIST
67615: PUSH
67616: LD_INT 1
67618: PUSH
67619: LD_INT 2
67621: PUSH
67622: EMPTY
67623: LIST
67624: LIST
67625: PUSH
67626: LD_INT 0
67628: PUSH
67629: LD_INT 2
67631: PUSH
67632: EMPTY
67633: LIST
67634: LIST
67635: PUSH
67636: LD_INT 1
67638: NEG
67639: PUSH
67640: LD_INT 1
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: PUSH
67647: LD_INT 2
67649: NEG
67650: PUSH
67651: LD_INT 0
67653: PUSH
67654: EMPTY
67655: LIST
67656: LIST
67657: PUSH
67658: LD_INT 2
67660: NEG
67661: PUSH
67662: LD_INT 1
67664: NEG
67665: PUSH
67666: EMPTY
67667: LIST
67668: LIST
67669: PUSH
67670: LD_INT 2
67672: NEG
67673: PUSH
67674: LD_INT 2
67676: NEG
67677: PUSH
67678: EMPTY
67679: LIST
67680: LIST
67681: PUSH
67682: EMPTY
67683: LIST
67684: LIST
67685: LIST
67686: LIST
67687: LIST
67688: LIST
67689: LIST
67690: LIST
67691: LIST
67692: LIST
67693: LIST
67694: LIST
67695: LIST
67696: LIST
67697: LIST
67698: LIST
67699: LIST
67700: LIST
67701: LIST
67702: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67703: LD_ADDR_VAR 0 21
67707: PUSH
67708: LD_INT 0
67710: PUSH
67711: LD_INT 0
67713: PUSH
67714: EMPTY
67715: LIST
67716: LIST
67717: PUSH
67718: LD_INT 0
67720: PUSH
67721: LD_INT 1
67723: NEG
67724: PUSH
67725: EMPTY
67726: LIST
67727: LIST
67728: PUSH
67729: LD_INT 1
67731: PUSH
67732: LD_INT 0
67734: PUSH
67735: EMPTY
67736: LIST
67737: LIST
67738: PUSH
67739: LD_INT 1
67741: PUSH
67742: LD_INT 1
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 0
67751: PUSH
67752: LD_INT 1
67754: PUSH
67755: EMPTY
67756: LIST
67757: LIST
67758: PUSH
67759: LD_INT 1
67761: NEG
67762: PUSH
67763: LD_INT 0
67765: PUSH
67766: EMPTY
67767: LIST
67768: LIST
67769: PUSH
67770: LD_INT 1
67772: NEG
67773: PUSH
67774: LD_INT 1
67776: NEG
67777: PUSH
67778: EMPTY
67779: LIST
67780: LIST
67781: PUSH
67782: LD_INT 1
67784: NEG
67785: PUSH
67786: LD_INT 2
67788: NEG
67789: PUSH
67790: EMPTY
67791: LIST
67792: LIST
67793: PUSH
67794: LD_INT 0
67796: PUSH
67797: LD_INT 2
67799: NEG
67800: PUSH
67801: EMPTY
67802: LIST
67803: LIST
67804: PUSH
67805: LD_INT 1
67807: PUSH
67808: LD_INT 1
67810: NEG
67811: PUSH
67812: EMPTY
67813: LIST
67814: LIST
67815: PUSH
67816: LD_INT 2
67818: PUSH
67819: LD_INT 0
67821: PUSH
67822: EMPTY
67823: LIST
67824: LIST
67825: PUSH
67826: LD_INT 2
67828: PUSH
67829: LD_INT 1
67831: PUSH
67832: EMPTY
67833: LIST
67834: LIST
67835: PUSH
67836: LD_INT 2
67838: PUSH
67839: LD_INT 2
67841: PUSH
67842: EMPTY
67843: LIST
67844: LIST
67845: PUSH
67846: LD_INT 1
67848: PUSH
67849: LD_INT 2
67851: PUSH
67852: EMPTY
67853: LIST
67854: LIST
67855: PUSH
67856: LD_INT 0
67858: PUSH
67859: LD_INT 2
67861: PUSH
67862: EMPTY
67863: LIST
67864: LIST
67865: PUSH
67866: LD_INT 1
67868: NEG
67869: PUSH
67870: LD_INT 1
67872: PUSH
67873: EMPTY
67874: LIST
67875: LIST
67876: PUSH
67877: LD_INT 2
67879: NEG
67880: PUSH
67881: LD_INT 0
67883: PUSH
67884: EMPTY
67885: LIST
67886: LIST
67887: PUSH
67888: LD_INT 2
67890: NEG
67891: PUSH
67892: LD_INT 1
67894: NEG
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: PUSH
67900: LD_INT 2
67902: NEG
67903: PUSH
67904: LD_INT 2
67906: NEG
67907: PUSH
67908: EMPTY
67909: LIST
67910: LIST
67911: PUSH
67912: EMPTY
67913: LIST
67914: LIST
67915: LIST
67916: LIST
67917: LIST
67918: LIST
67919: LIST
67920: LIST
67921: LIST
67922: LIST
67923: LIST
67924: LIST
67925: LIST
67926: LIST
67927: LIST
67928: LIST
67929: LIST
67930: LIST
67931: LIST
67932: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67933: LD_ADDR_VAR 0 22
67937: PUSH
67938: LD_INT 0
67940: PUSH
67941: LD_INT 0
67943: PUSH
67944: EMPTY
67945: LIST
67946: LIST
67947: PUSH
67948: LD_INT 0
67950: PUSH
67951: LD_INT 1
67953: NEG
67954: PUSH
67955: EMPTY
67956: LIST
67957: LIST
67958: PUSH
67959: LD_INT 1
67961: PUSH
67962: LD_INT 0
67964: PUSH
67965: EMPTY
67966: LIST
67967: LIST
67968: PUSH
67969: LD_INT 1
67971: PUSH
67972: LD_INT 1
67974: PUSH
67975: EMPTY
67976: LIST
67977: LIST
67978: PUSH
67979: LD_INT 0
67981: PUSH
67982: LD_INT 1
67984: PUSH
67985: EMPTY
67986: LIST
67987: LIST
67988: PUSH
67989: LD_INT 1
67991: NEG
67992: PUSH
67993: LD_INT 0
67995: PUSH
67996: EMPTY
67997: LIST
67998: LIST
67999: PUSH
68000: LD_INT 1
68002: NEG
68003: PUSH
68004: LD_INT 1
68006: NEG
68007: PUSH
68008: EMPTY
68009: LIST
68010: LIST
68011: PUSH
68012: LD_INT 1
68014: NEG
68015: PUSH
68016: LD_INT 2
68018: NEG
68019: PUSH
68020: EMPTY
68021: LIST
68022: LIST
68023: PUSH
68024: LD_INT 0
68026: PUSH
68027: LD_INT 2
68029: NEG
68030: PUSH
68031: EMPTY
68032: LIST
68033: LIST
68034: PUSH
68035: LD_INT 1
68037: PUSH
68038: LD_INT 1
68040: NEG
68041: PUSH
68042: EMPTY
68043: LIST
68044: LIST
68045: PUSH
68046: LD_INT 2
68048: PUSH
68049: LD_INT 0
68051: PUSH
68052: EMPTY
68053: LIST
68054: LIST
68055: PUSH
68056: LD_INT 2
68058: PUSH
68059: LD_INT 1
68061: PUSH
68062: EMPTY
68063: LIST
68064: LIST
68065: PUSH
68066: LD_INT 2
68068: PUSH
68069: LD_INT 2
68071: PUSH
68072: EMPTY
68073: LIST
68074: LIST
68075: PUSH
68076: LD_INT 1
68078: PUSH
68079: LD_INT 2
68081: PUSH
68082: EMPTY
68083: LIST
68084: LIST
68085: PUSH
68086: LD_INT 0
68088: PUSH
68089: LD_INT 2
68091: PUSH
68092: EMPTY
68093: LIST
68094: LIST
68095: PUSH
68096: LD_INT 1
68098: NEG
68099: PUSH
68100: LD_INT 1
68102: PUSH
68103: EMPTY
68104: LIST
68105: LIST
68106: PUSH
68107: LD_INT 2
68109: NEG
68110: PUSH
68111: LD_INT 0
68113: PUSH
68114: EMPTY
68115: LIST
68116: LIST
68117: PUSH
68118: LD_INT 2
68120: NEG
68121: PUSH
68122: LD_INT 1
68124: NEG
68125: PUSH
68126: EMPTY
68127: LIST
68128: LIST
68129: PUSH
68130: LD_INT 2
68132: NEG
68133: PUSH
68134: LD_INT 2
68136: NEG
68137: PUSH
68138: EMPTY
68139: LIST
68140: LIST
68141: PUSH
68142: EMPTY
68143: LIST
68144: LIST
68145: LIST
68146: LIST
68147: LIST
68148: LIST
68149: LIST
68150: LIST
68151: LIST
68152: LIST
68153: LIST
68154: LIST
68155: LIST
68156: LIST
68157: LIST
68158: LIST
68159: LIST
68160: LIST
68161: LIST
68162: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
68163: LD_ADDR_VAR 0 23
68167: PUSH
68168: LD_INT 0
68170: PUSH
68171: LD_INT 0
68173: PUSH
68174: EMPTY
68175: LIST
68176: LIST
68177: PUSH
68178: LD_INT 0
68180: PUSH
68181: LD_INT 1
68183: NEG
68184: PUSH
68185: EMPTY
68186: LIST
68187: LIST
68188: PUSH
68189: LD_INT 1
68191: PUSH
68192: LD_INT 0
68194: PUSH
68195: EMPTY
68196: LIST
68197: LIST
68198: PUSH
68199: LD_INT 1
68201: PUSH
68202: LD_INT 1
68204: PUSH
68205: EMPTY
68206: LIST
68207: LIST
68208: PUSH
68209: LD_INT 0
68211: PUSH
68212: LD_INT 1
68214: PUSH
68215: EMPTY
68216: LIST
68217: LIST
68218: PUSH
68219: LD_INT 1
68221: NEG
68222: PUSH
68223: LD_INT 0
68225: PUSH
68226: EMPTY
68227: LIST
68228: LIST
68229: PUSH
68230: LD_INT 1
68232: NEG
68233: PUSH
68234: LD_INT 1
68236: NEG
68237: PUSH
68238: EMPTY
68239: LIST
68240: LIST
68241: PUSH
68242: LD_INT 1
68244: NEG
68245: PUSH
68246: LD_INT 2
68248: NEG
68249: PUSH
68250: EMPTY
68251: LIST
68252: LIST
68253: PUSH
68254: LD_INT 0
68256: PUSH
68257: LD_INT 2
68259: NEG
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 1
68267: PUSH
68268: LD_INT 1
68270: NEG
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 2
68278: PUSH
68279: LD_INT 0
68281: PUSH
68282: EMPTY
68283: LIST
68284: LIST
68285: PUSH
68286: LD_INT 2
68288: PUSH
68289: LD_INT 1
68291: PUSH
68292: EMPTY
68293: LIST
68294: LIST
68295: PUSH
68296: LD_INT 2
68298: PUSH
68299: LD_INT 2
68301: PUSH
68302: EMPTY
68303: LIST
68304: LIST
68305: PUSH
68306: LD_INT 1
68308: PUSH
68309: LD_INT 2
68311: PUSH
68312: EMPTY
68313: LIST
68314: LIST
68315: PUSH
68316: LD_INT 0
68318: PUSH
68319: LD_INT 2
68321: PUSH
68322: EMPTY
68323: LIST
68324: LIST
68325: PUSH
68326: LD_INT 1
68328: NEG
68329: PUSH
68330: LD_INT 1
68332: PUSH
68333: EMPTY
68334: LIST
68335: LIST
68336: PUSH
68337: LD_INT 2
68339: NEG
68340: PUSH
68341: LD_INT 0
68343: PUSH
68344: EMPTY
68345: LIST
68346: LIST
68347: PUSH
68348: LD_INT 2
68350: NEG
68351: PUSH
68352: LD_INT 1
68354: NEG
68355: PUSH
68356: EMPTY
68357: LIST
68358: LIST
68359: PUSH
68360: LD_INT 2
68362: NEG
68363: PUSH
68364: LD_INT 2
68366: NEG
68367: PUSH
68368: EMPTY
68369: LIST
68370: LIST
68371: PUSH
68372: LD_INT 2
68374: NEG
68375: PUSH
68376: LD_INT 3
68378: NEG
68379: PUSH
68380: EMPTY
68381: LIST
68382: LIST
68383: PUSH
68384: LD_INT 1
68386: NEG
68387: PUSH
68388: LD_INT 3
68390: NEG
68391: PUSH
68392: EMPTY
68393: LIST
68394: LIST
68395: PUSH
68396: LD_INT 1
68398: PUSH
68399: LD_INT 2
68401: NEG
68402: PUSH
68403: EMPTY
68404: LIST
68405: LIST
68406: PUSH
68407: LD_INT 2
68409: PUSH
68410: LD_INT 1
68412: NEG
68413: PUSH
68414: EMPTY
68415: LIST
68416: LIST
68417: PUSH
68418: EMPTY
68419: LIST
68420: LIST
68421: LIST
68422: LIST
68423: LIST
68424: LIST
68425: LIST
68426: LIST
68427: LIST
68428: LIST
68429: LIST
68430: LIST
68431: LIST
68432: LIST
68433: LIST
68434: LIST
68435: LIST
68436: LIST
68437: LIST
68438: LIST
68439: LIST
68440: LIST
68441: LIST
68442: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
68443: LD_ADDR_VAR 0 24
68447: PUSH
68448: LD_INT 0
68450: PUSH
68451: LD_INT 0
68453: PUSH
68454: EMPTY
68455: LIST
68456: LIST
68457: PUSH
68458: LD_INT 0
68460: PUSH
68461: LD_INT 1
68463: NEG
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 1
68471: PUSH
68472: LD_INT 0
68474: PUSH
68475: EMPTY
68476: LIST
68477: LIST
68478: PUSH
68479: LD_INT 1
68481: PUSH
68482: LD_INT 1
68484: PUSH
68485: EMPTY
68486: LIST
68487: LIST
68488: PUSH
68489: LD_INT 0
68491: PUSH
68492: LD_INT 1
68494: PUSH
68495: EMPTY
68496: LIST
68497: LIST
68498: PUSH
68499: LD_INT 1
68501: NEG
68502: PUSH
68503: LD_INT 0
68505: PUSH
68506: EMPTY
68507: LIST
68508: LIST
68509: PUSH
68510: LD_INT 1
68512: NEG
68513: PUSH
68514: LD_INT 1
68516: NEG
68517: PUSH
68518: EMPTY
68519: LIST
68520: LIST
68521: PUSH
68522: LD_INT 1
68524: NEG
68525: PUSH
68526: LD_INT 2
68528: NEG
68529: PUSH
68530: EMPTY
68531: LIST
68532: LIST
68533: PUSH
68534: LD_INT 0
68536: PUSH
68537: LD_INT 2
68539: NEG
68540: PUSH
68541: EMPTY
68542: LIST
68543: LIST
68544: PUSH
68545: LD_INT 1
68547: PUSH
68548: LD_INT 1
68550: NEG
68551: PUSH
68552: EMPTY
68553: LIST
68554: LIST
68555: PUSH
68556: LD_INT 2
68558: PUSH
68559: LD_INT 0
68561: PUSH
68562: EMPTY
68563: LIST
68564: LIST
68565: PUSH
68566: LD_INT 2
68568: PUSH
68569: LD_INT 1
68571: PUSH
68572: EMPTY
68573: LIST
68574: LIST
68575: PUSH
68576: LD_INT 2
68578: PUSH
68579: LD_INT 2
68581: PUSH
68582: EMPTY
68583: LIST
68584: LIST
68585: PUSH
68586: LD_INT 1
68588: PUSH
68589: LD_INT 2
68591: PUSH
68592: EMPTY
68593: LIST
68594: LIST
68595: PUSH
68596: LD_INT 0
68598: PUSH
68599: LD_INT 2
68601: PUSH
68602: EMPTY
68603: LIST
68604: LIST
68605: PUSH
68606: LD_INT 1
68608: NEG
68609: PUSH
68610: LD_INT 1
68612: PUSH
68613: EMPTY
68614: LIST
68615: LIST
68616: PUSH
68617: LD_INT 2
68619: NEG
68620: PUSH
68621: LD_INT 0
68623: PUSH
68624: EMPTY
68625: LIST
68626: LIST
68627: PUSH
68628: LD_INT 2
68630: NEG
68631: PUSH
68632: LD_INT 1
68634: NEG
68635: PUSH
68636: EMPTY
68637: LIST
68638: LIST
68639: PUSH
68640: LD_INT 2
68642: NEG
68643: PUSH
68644: LD_INT 2
68646: NEG
68647: PUSH
68648: EMPTY
68649: LIST
68650: LIST
68651: PUSH
68652: LD_INT 1
68654: PUSH
68655: LD_INT 2
68657: NEG
68658: PUSH
68659: EMPTY
68660: LIST
68661: LIST
68662: PUSH
68663: LD_INT 2
68665: PUSH
68666: LD_INT 1
68668: NEG
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: LD_INT 3
68676: PUSH
68677: LD_INT 1
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 3
68686: PUSH
68687: LD_INT 2
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: EMPTY
68695: LIST
68696: LIST
68697: LIST
68698: LIST
68699: LIST
68700: LIST
68701: LIST
68702: LIST
68703: LIST
68704: LIST
68705: LIST
68706: LIST
68707: LIST
68708: LIST
68709: LIST
68710: LIST
68711: LIST
68712: LIST
68713: LIST
68714: LIST
68715: LIST
68716: LIST
68717: LIST
68718: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
68719: LD_ADDR_VAR 0 25
68723: PUSH
68724: LD_INT 0
68726: PUSH
68727: LD_INT 0
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 0
68736: PUSH
68737: LD_INT 1
68739: NEG
68740: PUSH
68741: EMPTY
68742: LIST
68743: LIST
68744: PUSH
68745: LD_INT 1
68747: PUSH
68748: LD_INT 0
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: PUSH
68755: LD_INT 1
68757: PUSH
68758: LD_INT 1
68760: PUSH
68761: EMPTY
68762: LIST
68763: LIST
68764: PUSH
68765: LD_INT 0
68767: PUSH
68768: LD_INT 1
68770: PUSH
68771: EMPTY
68772: LIST
68773: LIST
68774: PUSH
68775: LD_INT 1
68777: NEG
68778: PUSH
68779: LD_INT 0
68781: PUSH
68782: EMPTY
68783: LIST
68784: LIST
68785: PUSH
68786: LD_INT 1
68788: NEG
68789: PUSH
68790: LD_INT 1
68792: NEG
68793: PUSH
68794: EMPTY
68795: LIST
68796: LIST
68797: PUSH
68798: LD_INT 1
68800: NEG
68801: PUSH
68802: LD_INT 2
68804: NEG
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PUSH
68810: LD_INT 0
68812: PUSH
68813: LD_INT 2
68815: NEG
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 1
68823: PUSH
68824: LD_INT 1
68826: NEG
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 2
68834: PUSH
68835: LD_INT 0
68837: PUSH
68838: EMPTY
68839: LIST
68840: LIST
68841: PUSH
68842: LD_INT 2
68844: PUSH
68845: LD_INT 1
68847: PUSH
68848: EMPTY
68849: LIST
68850: LIST
68851: PUSH
68852: LD_INT 2
68854: PUSH
68855: LD_INT 2
68857: PUSH
68858: EMPTY
68859: LIST
68860: LIST
68861: PUSH
68862: LD_INT 1
68864: PUSH
68865: LD_INT 2
68867: PUSH
68868: EMPTY
68869: LIST
68870: LIST
68871: PUSH
68872: LD_INT 0
68874: PUSH
68875: LD_INT 2
68877: PUSH
68878: EMPTY
68879: LIST
68880: LIST
68881: PUSH
68882: LD_INT 1
68884: NEG
68885: PUSH
68886: LD_INT 1
68888: PUSH
68889: EMPTY
68890: LIST
68891: LIST
68892: PUSH
68893: LD_INT 2
68895: NEG
68896: PUSH
68897: LD_INT 0
68899: PUSH
68900: EMPTY
68901: LIST
68902: LIST
68903: PUSH
68904: LD_INT 2
68906: NEG
68907: PUSH
68908: LD_INT 1
68910: NEG
68911: PUSH
68912: EMPTY
68913: LIST
68914: LIST
68915: PUSH
68916: LD_INT 2
68918: NEG
68919: PUSH
68920: LD_INT 2
68922: NEG
68923: PUSH
68924: EMPTY
68925: LIST
68926: LIST
68927: PUSH
68928: LD_INT 3
68930: PUSH
68931: LD_INT 1
68933: PUSH
68934: EMPTY
68935: LIST
68936: LIST
68937: PUSH
68938: LD_INT 3
68940: PUSH
68941: LD_INT 2
68943: PUSH
68944: EMPTY
68945: LIST
68946: LIST
68947: PUSH
68948: LD_INT 2
68950: PUSH
68951: LD_INT 3
68953: PUSH
68954: EMPTY
68955: LIST
68956: LIST
68957: PUSH
68958: LD_INT 1
68960: PUSH
68961: LD_INT 3
68963: PUSH
68964: EMPTY
68965: LIST
68966: LIST
68967: PUSH
68968: EMPTY
68969: LIST
68970: LIST
68971: LIST
68972: LIST
68973: LIST
68974: LIST
68975: LIST
68976: LIST
68977: LIST
68978: LIST
68979: LIST
68980: LIST
68981: LIST
68982: LIST
68983: LIST
68984: LIST
68985: LIST
68986: LIST
68987: LIST
68988: LIST
68989: LIST
68990: LIST
68991: LIST
68992: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68993: LD_ADDR_VAR 0 26
68997: PUSH
68998: LD_INT 0
69000: PUSH
69001: LD_INT 0
69003: PUSH
69004: EMPTY
69005: LIST
69006: LIST
69007: PUSH
69008: LD_INT 0
69010: PUSH
69011: LD_INT 1
69013: NEG
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 1
69021: PUSH
69022: LD_INT 0
69024: PUSH
69025: EMPTY
69026: LIST
69027: LIST
69028: PUSH
69029: LD_INT 1
69031: PUSH
69032: LD_INT 1
69034: PUSH
69035: EMPTY
69036: LIST
69037: LIST
69038: PUSH
69039: LD_INT 0
69041: PUSH
69042: LD_INT 1
69044: PUSH
69045: EMPTY
69046: LIST
69047: LIST
69048: PUSH
69049: LD_INT 1
69051: NEG
69052: PUSH
69053: LD_INT 0
69055: PUSH
69056: EMPTY
69057: LIST
69058: LIST
69059: PUSH
69060: LD_INT 1
69062: NEG
69063: PUSH
69064: LD_INT 1
69066: NEG
69067: PUSH
69068: EMPTY
69069: LIST
69070: LIST
69071: PUSH
69072: LD_INT 1
69074: NEG
69075: PUSH
69076: LD_INT 2
69078: NEG
69079: PUSH
69080: EMPTY
69081: LIST
69082: LIST
69083: PUSH
69084: LD_INT 0
69086: PUSH
69087: LD_INT 2
69089: NEG
69090: PUSH
69091: EMPTY
69092: LIST
69093: LIST
69094: PUSH
69095: LD_INT 1
69097: PUSH
69098: LD_INT 1
69100: NEG
69101: PUSH
69102: EMPTY
69103: LIST
69104: LIST
69105: PUSH
69106: LD_INT 2
69108: PUSH
69109: LD_INT 0
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 2
69118: PUSH
69119: LD_INT 1
69121: PUSH
69122: EMPTY
69123: LIST
69124: LIST
69125: PUSH
69126: LD_INT 2
69128: PUSH
69129: LD_INT 2
69131: PUSH
69132: EMPTY
69133: LIST
69134: LIST
69135: PUSH
69136: LD_INT 1
69138: PUSH
69139: LD_INT 2
69141: PUSH
69142: EMPTY
69143: LIST
69144: LIST
69145: PUSH
69146: LD_INT 0
69148: PUSH
69149: LD_INT 2
69151: PUSH
69152: EMPTY
69153: LIST
69154: LIST
69155: PUSH
69156: LD_INT 1
69158: NEG
69159: PUSH
69160: LD_INT 1
69162: PUSH
69163: EMPTY
69164: LIST
69165: LIST
69166: PUSH
69167: LD_INT 2
69169: NEG
69170: PUSH
69171: LD_INT 0
69173: PUSH
69174: EMPTY
69175: LIST
69176: LIST
69177: PUSH
69178: LD_INT 2
69180: NEG
69181: PUSH
69182: LD_INT 1
69184: NEG
69185: PUSH
69186: EMPTY
69187: LIST
69188: LIST
69189: PUSH
69190: LD_INT 2
69192: NEG
69193: PUSH
69194: LD_INT 2
69196: NEG
69197: PUSH
69198: EMPTY
69199: LIST
69200: LIST
69201: PUSH
69202: LD_INT 2
69204: PUSH
69205: LD_INT 3
69207: PUSH
69208: EMPTY
69209: LIST
69210: LIST
69211: PUSH
69212: LD_INT 1
69214: PUSH
69215: LD_INT 3
69217: PUSH
69218: EMPTY
69219: LIST
69220: LIST
69221: PUSH
69222: LD_INT 1
69224: NEG
69225: PUSH
69226: LD_INT 2
69228: PUSH
69229: EMPTY
69230: LIST
69231: LIST
69232: PUSH
69233: LD_INT 2
69235: NEG
69236: PUSH
69237: LD_INT 1
69239: PUSH
69240: EMPTY
69241: LIST
69242: LIST
69243: PUSH
69244: EMPTY
69245: LIST
69246: LIST
69247: LIST
69248: LIST
69249: LIST
69250: LIST
69251: LIST
69252: LIST
69253: LIST
69254: LIST
69255: LIST
69256: LIST
69257: LIST
69258: LIST
69259: LIST
69260: LIST
69261: LIST
69262: LIST
69263: LIST
69264: LIST
69265: LIST
69266: LIST
69267: LIST
69268: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69269: LD_ADDR_VAR 0 27
69273: PUSH
69274: LD_INT 0
69276: PUSH
69277: LD_INT 0
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PUSH
69284: LD_INT 0
69286: PUSH
69287: LD_INT 1
69289: NEG
69290: PUSH
69291: EMPTY
69292: LIST
69293: LIST
69294: PUSH
69295: LD_INT 1
69297: PUSH
69298: LD_INT 0
69300: PUSH
69301: EMPTY
69302: LIST
69303: LIST
69304: PUSH
69305: LD_INT 1
69307: PUSH
69308: LD_INT 1
69310: PUSH
69311: EMPTY
69312: LIST
69313: LIST
69314: PUSH
69315: LD_INT 0
69317: PUSH
69318: LD_INT 1
69320: PUSH
69321: EMPTY
69322: LIST
69323: LIST
69324: PUSH
69325: LD_INT 1
69327: NEG
69328: PUSH
69329: LD_INT 0
69331: PUSH
69332: EMPTY
69333: LIST
69334: LIST
69335: PUSH
69336: LD_INT 1
69338: NEG
69339: PUSH
69340: LD_INT 1
69342: NEG
69343: PUSH
69344: EMPTY
69345: LIST
69346: LIST
69347: PUSH
69348: LD_INT 1
69350: NEG
69351: PUSH
69352: LD_INT 2
69354: NEG
69355: PUSH
69356: EMPTY
69357: LIST
69358: LIST
69359: PUSH
69360: LD_INT 0
69362: PUSH
69363: LD_INT 2
69365: NEG
69366: PUSH
69367: EMPTY
69368: LIST
69369: LIST
69370: PUSH
69371: LD_INT 1
69373: PUSH
69374: LD_INT 1
69376: NEG
69377: PUSH
69378: EMPTY
69379: LIST
69380: LIST
69381: PUSH
69382: LD_INT 2
69384: PUSH
69385: LD_INT 0
69387: PUSH
69388: EMPTY
69389: LIST
69390: LIST
69391: PUSH
69392: LD_INT 2
69394: PUSH
69395: LD_INT 1
69397: PUSH
69398: EMPTY
69399: LIST
69400: LIST
69401: PUSH
69402: LD_INT 2
69404: PUSH
69405: LD_INT 2
69407: PUSH
69408: EMPTY
69409: LIST
69410: LIST
69411: PUSH
69412: LD_INT 1
69414: PUSH
69415: LD_INT 2
69417: PUSH
69418: EMPTY
69419: LIST
69420: LIST
69421: PUSH
69422: LD_INT 0
69424: PUSH
69425: LD_INT 2
69427: PUSH
69428: EMPTY
69429: LIST
69430: LIST
69431: PUSH
69432: LD_INT 1
69434: NEG
69435: PUSH
69436: LD_INT 1
69438: PUSH
69439: EMPTY
69440: LIST
69441: LIST
69442: PUSH
69443: LD_INT 2
69445: NEG
69446: PUSH
69447: LD_INT 0
69449: PUSH
69450: EMPTY
69451: LIST
69452: LIST
69453: PUSH
69454: LD_INT 2
69456: NEG
69457: PUSH
69458: LD_INT 1
69460: NEG
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 2
69468: NEG
69469: PUSH
69470: LD_INT 2
69472: NEG
69473: PUSH
69474: EMPTY
69475: LIST
69476: LIST
69477: PUSH
69478: LD_INT 1
69480: NEG
69481: PUSH
69482: LD_INT 2
69484: PUSH
69485: EMPTY
69486: LIST
69487: LIST
69488: PUSH
69489: LD_INT 2
69491: NEG
69492: PUSH
69493: LD_INT 1
69495: PUSH
69496: EMPTY
69497: LIST
69498: LIST
69499: PUSH
69500: LD_INT 3
69502: NEG
69503: PUSH
69504: LD_INT 1
69506: NEG
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: LD_INT 3
69514: NEG
69515: PUSH
69516: LD_INT 2
69518: NEG
69519: PUSH
69520: EMPTY
69521: LIST
69522: LIST
69523: PUSH
69524: EMPTY
69525: LIST
69526: LIST
69527: LIST
69528: LIST
69529: LIST
69530: LIST
69531: LIST
69532: LIST
69533: LIST
69534: LIST
69535: LIST
69536: LIST
69537: LIST
69538: LIST
69539: LIST
69540: LIST
69541: LIST
69542: LIST
69543: LIST
69544: LIST
69545: LIST
69546: LIST
69547: LIST
69548: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
69549: LD_ADDR_VAR 0 28
69553: PUSH
69554: LD_INT 0
69556: PUSH
69557: LD_INT 0
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: LD_INT 0
69566: PUSH
69567: LD_INT 1
69569: NEG
69570: PUSH
69571: EMPTY
69572: LIST
69573: LIST
69574: PUSH
69575: LD_INT 1
69577: PUSH
69578: LD_INT 0
69580: PUSH
69581: EMPTY
69582: LIST
69583: LIST
69584: PUSH
69585: LD_INT 1
69587: PUSH
69588: LD_INT 1
69590: PUSH
69591: EMPTY
69592: LIST
69593: LIST
69594: PUSH
69595: LD_INT 0
69597: PUSH
69598: LD_INT 1
69600: PUSH
69601: EMPTY
69602: LIST
69603: LIST
69604: PUSH
69605: LD_INT 1
69607: NEG
69608: PUSH
69609: LD_INT 0
69611: PUSH
69612: EMPTY
69613: LIST
69614: LIST
69615: PUSH
69616: LD_INT 1
69618: NEG
69619: PUSH
69620: LD_INT 1
69622: NEG
69623: PUSH
69624: EMPTY
69625: LIST
69626: LIST
69627: PUSH
69628: LD_INT 1
69630: NEG
69631: PUSH
69632: LD_INT 2
69634: NEG
69635: PUSH
69636: EMPTY
69637: LIST
69638: LIST
69639: PUSH
69640: LD_INT 0
69642: PUSH
69643: LD_INT 2
69645: NEG
69646: PUSH
69647: EMPTY
69648: LIST
69649: LIST
69650: PUSH
69651: LD_INT 1
69653: PUSH
69654: LD_INT 1
69656: NEG
69657: PUSH
69658: EMPTY
69659: LIST
69660: LIST
69661: PUSH
69662: LD_INT 2
69664: PUSH
69665: LD_INT 0
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 2
69674: PUSH
69675: LD_INT 1
69677: PUSH
69678: EMPTY
69679: LIST
69680: LIST
69681: PUSH
69682: LD_INT 2
69684: PUSH
69685: LD_INT 2
69687: PUSH
69688: EMPTY
69689: LIST
69690: LIST
69691: PUSH
69692: LD_INT 1
69694: PUSH
69695: LD_INT 2
69697: PUSH
69698: EMPTY
69699: LIST
69700: LIST
69701: PUSH
69702: LD_INT 0
69704: PUSH
69705: LD_INT 2
69707: PUSH
69708: EMPTY
69709: LIST
69710: LIST
69711: PUSH
69712: LD_INT 1
69714: NEG
69715: PUSH
69716: LD_INT 1
69718: PUSH
69719: EMPTY
69720: LIST
69721: LIST
69722: PUSH
69723: LD_INT 2
69725: NEG
69726: PUSH
69727: LD_INT 0
69729: PUSH
69730: EMPTY
69731: LIST
69732: LIST
69733: PUSH
69734: LD_INT 2
69736: NEG
69737: PUSH
69738: LD_INT 1
69740: NEG
69741: PUSH
69742: EMPTY
69743: LIST
69744: LIST
69745: PUSH
69746: LD_INT 2
69748: NEG
69749: PUSH
69750: LD_INT 2
69752: NEG
69753: PUSH
69754: EMPTY
69755: LIST
69756: LIST
69757: PUSH
69758: LD_INT 2
69760: NEG
69761: PUSH
69762: LD_INT 3
69764: NEG
69765: PUSH
69766: EMPTY
69767: LIST
69768: LIST
69769: PUSH
69770: LD_INT 1
69772: NEG
69773: PUSH
69774: LD_INT 3
69776: NEG
69777: PUSH
69778: EMPTY
69779: LIST
69780: LIST
69781: PUSH
69782: LD_INT 3
69784: NEG
69785: PUSH
69786: LD_INT 1
69788: NEG
69789: PUSH
69790: EMPTY
69791: LIST
69792: LIST
69793: PUSH
69794: LD_INT 3
69796: NEG
69797: PUSH
69798: LD_INT 2
69800: NEG
69801: PUSH
69802: EMPTY
69803: LIST
69804: LIST
69805: PUSH
69806: EMPTY
69807: LIST
69808: LIST
69809: LIST
69810: LIST
69811: LIST
69812: LIST
69813: LIST
69814: LIST
69815: LIST
69816: LIST
69817: LIST
69818: LIST
69819: LIST
69820: LIST
69821: LIST
69822: LIST
69823: LIST
69824: LIST
69825: LIST
69826: LIST
69827: LIST
69828: LIST
69829: LIST
69830: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
69831: LD_ADDR_VAR 0 29
69835: PUSH
69836: LD_INT 0
69838: PUSH
69839: LD_INT 0
69841: PUSH
69842: EMPTY
69843: LIST
69844: LIST
69845: PUSH
69846: LD_INT 0
69848: PUSH
69849: LD_INT 1
69851: NEG
69852: PUSH
69853: EMPTY
69854: LIST
69855: LIST
69856: PUSH
69857: LD_INT 1
69859: PUSH
69860: LD_INT 0
69862: PUSH
69863: EMPTY
69864: LIST
69865: LIST
69866: PUSH
69867: LD_INT 1
69869: PUSH
69870: LD_INT 1
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: PUSH
69877: LD_INT 0
69879: PUSH
69880: LD_INT 1
69882: PUSH
69883: EMPTY
69884: LIST
69885: LIST
69886: PUSH
69887: LD_INT 1
69889: NEG
69890: PUSH
69891: LD_INT 0
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 1
69900: NEG
69901: PUSH
69902: LD_INT 1
69904: NEG
69905: PUSH
69906: EMPTY
69907: LIST
69908: LIST
69909: PUSH
69910: LD_INT 1
69912: NEG
69913: PUSH
69914: LD_INT 2
69916: NEG
69917: PUSH
69918: EMPTY
69919: LIST
69920: LIST
69921: PUSH
69922: LD_INT 0
69924: PUSH
69925: LD_INT 2
69927: NEG
69928: PUSH
69929: EMPTY
69930: LIST
69931: LIST
69932: PUSH
69933: LD_INT 1
69935: PUSH
69936: LD_INT 1
69938: NEG
69939: PUSH
69940: EMPTY
69941: LIST
69942: LIST
69943: PUSH
69944: LD_INT 2
69946: PUSH
69947: LD_INT 0
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 2
69956: PUSH
69957: LD_INT 1
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 1
69966: PUSH
69967: LD_INT 2
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 0
69976: PUSH
69977: LD_INT 2
69979: PUSH
69980: EMPTY
69981: LIST
69982: LIST
69983: PUSH
69984: LD_INT 1
69986: NEG
69987: PUSH
69988: LD_INT 1
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 2
69997: NEG
69998: PUSH
69999: LD_INT 1
70001: NEG
70002: PUSH
70003: EMPTY
70004: LIST
70005: LIST
70006: PUSH
70007: LD_INT 2
70009: NEG
70010: PUSH
70011: LD_INT 2
70013: NEG
70014: PUSH
70015: EMPTY
70016: LIST
70017: LIST
70018: PUSH
70019: LD_INT 2
70021: NEG
70022: PUSH
70023: LD_INT 3
70025: NEG
70026: PUSH
70027: EMPTY
70028: LIST
70029: LIST
70030: PUSH
70031: LD_INT 2
70033: PUSH
70034: LD_INT 1
70036: NEG
70037: PUSH
70038: EMPTY
70039: LIST
70040: LIST
70041: PUSH
70042: LD_INT 3
70044: PUSH
70045: LD_INT 1
70047: PUSH
70048: EMPTY
70049: LIST
70050: LIST
70051: PUSH
70052: LD_INT 1
70054: PUSH
70055: LD_INT 3
70057: PUSH
70058: EMPTY
70059: LIST
70060: LIST
70061: PUSH
70062: LD_INT 1
70064: NEG
70065: PUSH
70066: LD_INT 2
70068: PUSH
70069: EMPTY
70070: LIST
70071: LIST
70072: PUSH
70073: LD_INT 3
70075: NEG
70076: PUSH
70077: LD_INT 2
70079: NEG
70080: PUSH
70081: EMPTY
70082: LIST
70083: LIST
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: LIST
70089: LIST
70090: LIST
70091: LIST
70092: LIST
70093: LIST
70094: LIST
70095: LIST
70096: LIST
70097: LIST
70098: LIST
70099: LIST
70100: LIST
70101: LIST
70102: LIST
70103: LIST
70104: LIST
70105: LIST
70106: LIST
70107: LIST
70108: LIST
70109: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70110: LD_ADDR_VAR 0 30
70114: PUSH
70115: LD_INT 0
70117: PUSH
70118: LD_INT 0
70120: PUSH
70121: EMPTY
70122: LIST
70123: LIST
70124: PUSH
70125: LD_INT 0
70127: PUSH
70128: LD_INT 1
70130: NEG
70131: PUSH
70132: EMPTY
70133: LIST
70134: LIST
70135: PUSH
70136: LD_INT 1
70138: PUSH
70139: LD_INT 0
70141: PUSH
70142: EMPTY
70143: LIST
70144: LIST
70145: PUSH
70146: LD_INT 1
70148: PUSH
70149: LD_INT 1
70151: PUSH
70152: EMPTY
70153: LIST
70154: LIST
70155: PUSH
70156: LD_INT 0
70158: PUSH
70159: LD_INT 1
70161: PUSH
70162: EMPTY
70163: LIST
70164: LIST
70165: PUSH
70166: LD_INT 1
70168: NEG
70169: PUSH
70170: LD_INT 0
70172: PUSH
70173: EMPTY
70174: LIST
70175: LIST
70176: PUSH
70177: LD_INT 1
70179: NEG
70180: PUSH
70181: LD_INT 1
70183: NEG
70184: PUSH
70185: EMPTY
70186: LIST
70187: LIST
70188: PUSH
70189: LD_INT 1
70191: NEG
70192: PUSH
70193: LD_INT 2
70195: NEG
70196: PUSH
70197: EMPTY
70198: LIST
70199: LIST
70200: PUSH
70201: LD_INT 0
70203: PUSH
70204: LD_INT 2
70206: NEG
70207: PUSH
70208: EMPTY
70209: LIST
70210: LIST
70211: PUSH
70212: LD_INT 1
70214: PUSH
70215: LD_INT 1
70217: NEG
70218: PUSH
70219: EMPTY
70220: LIST
70221: LIST
70222: PUSH
70223: LD_INT 2
70225: PUSH
70226: LD_INT 0
70228: PUSH
70229: EMPTY
70230: LIST
70231: LIST
70232: PUSH
70233: LD_INT 2
70235: PUSH
70236: LD_INT 1
70238: PUSH
70239: EMPTY
70240: LIST
70241: LIST
70242: PUSH
70243: LD_INT 2
70245: PUSH
70246: LD_INT 2
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 1
70255: PUSH
70256: LD_INT 2
70258: PUSH
70259: EMPTY
70260: LIST
70261: LIST
70262: PUSH
70263: LD_INT 1
70265: NEG
70266: PUSH
70267: LD_INT 1
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: LD_INT 2
70276: NEG
70277: PUSH
70278: LD_INT 0
70280: PUSH
70281: EMPTY
70282: LIST
70283: LIST
70284: PUSH
70285: LD_INT 2
70287: NEG
70288: PUSH
70289: LD_INT 1
70291: NEG
70292: PUSH
70293: EMPTY
70294: LIST
70295: LIST
70296: PUSH
70297: LD_INT 1
70299: NEG
70300: PUSH
70301: LD_INT 3
70303: NEG
70304: PUSH
70305: EMPTY
70306: LIST
70307: LIST
70308: PUSH
70309: LD_INT 1
70311: PUSH
70312: LD_INT 2
70314: NEG
70315: PUSH
70316: EMPTY
70317: LIST
70318: LIST
70319: PUSH
70320: LD_INT 3
70322: PUSH
70323: LD_INT 2
70325: PUSH
70326: EMPTY
70327: LIST
70328: LIST
70329: PUSH
70330: LD_INT 2
70332: PUSH
70333: LD_INT 3
70335: PUSH
70336: EMPTY
70337: LIST
70338: LIST
70339: PUSH
70340: LD_INT 2
70342: NEG
70343: PUSH
70344: LD_INT 1
70346: PUSH
70347: EMPTY
70348: LIST
70349: LIST
70350: PUSH
70351: LD_INT 3
70353: NEG
70354: PUSH
70355: LD_INT 1
70357: NEG
70358: PUSH
70359: EMPTY
70360: LIST
70361: LIST
70362: PUSH
70363: EMPTY
70364: LIST
70365: LIST
70366: LIST
70367: LIST
70368: LIST
70369: LIST
70370: LIST
70371: LIST
70372: LIST
70373: LIST
70374: LIST
70375: LIST
70376: LIST
70377: LIST
70378: LIST
70379: LIST
70380: LIST
70381: LIST
70382: LIST
70383: LIST
70384: LIST
70385: LIST
70386: LIST
70387: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
70388: LD_ADDR_VAR 0 31
70392: PUSH
70393: LD_INT 0
70395: PUSH
70396: LD_INT 0
70398: PUSH
70399: EMPTY
70400: LIST
70401: LIST
70402: PUSH
70403: LD_INT 0
70405: PUSH
70406: LD_INT 1
70408: NEG
70409: PUSH
70410: EMPTY
70411: LIST
70412: LIST
70413: PUSH
70414: LD_INT 1
70416: PUSH
70417: LD_INT 0
70419: PUSH
70420: EMPTY
70421: LIST
70422: LIST
70423: PUSH
70424: LD_INT 1
70426: PUSH
70427: LD_INT 1
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 0
70436: PUSH
70437: LD_INT 1
70439: PUSH
70440: EMPTY
70441: LIST
70442: LIST
70443: PUSH
70444: LD_INT 1
70446: NEG
70447: PUSH
70448: LD_INT 0
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 1
70457: NEG
70458: PUSH
70459: LD_INT 1
70461: NEG
70462: PUSH
70463: EMPTY
70464: LIST
70465: LIST
70466: PUSH
70467: LD_INT 1
70469: NEG
70470: PUSH
70471: LD_INT 2
70473: NEG
70474: PUSH
70475: EMPTY
70476: LIST
70477: LIST
70478: PUSH
70479: LD_INT 1
70481: PUSH
70482: LD_INT 1
70484: NEG
70485: PUSH
70486: EMPTY
70487: LIST
70488: LIST
70489: PUSH
70490: LD_INT 2
70492: PUSH
70493: LD_INT 0
70495: PUSH
70496: EMPTY
70497: LIST
70498: LIST
70499: PUSH
70500: LD_INT 2
70502: PUSH
70503: LD_INT 1
70505: PUSH
70506: EMPTY
70507: LIST
70508: LIST
70509: PUSH
70510: LD_INT 2
70512: PUSH
70513: LD_INT 2
70515: PUSH
70516: EMPTY
70517: LIST
70518: LIST
70519: PUSH
70520: LD_INT 1
70522: PUSH
70523: LD_INT 2
70525: PUSH
70526: EMPTY
70527: LIST
70528: LIST
70529: PUSH
70530: LD_INT 0
70532: PUSH
70533: LD_INT 2
70535: PUSH
70536: EMPTY
70537: LIST
70538: LIST
70539: PUSH
70540: LD_INT 1
70542: NEG
70543: PUSH
70544: LD_INT 1
70546: PUSH
70547: EMPTY
70548: LIST
70549: LIST
70550: PUSH
70551: LD_INT 2
70553: NEG
70554: PUSH
70555: LD_INT 1
70557: NEG
70558: PUSH
70559: EMPTY
70560: LIST
70561: LIST
70562: PUSH
70563: LD_INT 2
70565: NEG
70566: PUSH
70567: LD_INT 2
70569: NEG
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 2
70577: NEG
70578: PUSH
70579: LD_INT 3
70581: NEG
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PUSH
70587: LD_INT 2
70589: PUSH
70590: LD_INT 1
70592: NEG
70593: PUSH
70594: EMPTY
70595: LIST
70596: LIST
70597: PUSH
70598: LD_INT 3
70600: PUSH
70601: LD_INT 1
70603: PUSH
70604: EMPTY
70605: LIST
70606: LIST
70607: PUSH
70608: LD_INT 1
70610: PUSH
70611: LD_INT 3
70613: PUSH
70614: EMPTY
70615: LIST
70616: LIST
70617: PUSH
70618: LD_INT 1
70620: NEG
70621: PUSH
70622: LD_INT 2
70624: PUSH
70625: EMPTY
70626: LIST
70627: LIST
70628: PUSH
70629: LD_INT 3
70631: NEG
70632: PUSH
70633: LD_INT 2
70635: NEG
70636: PUSH
70637: EMPTY
70638: LIST
70639: LIST
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: LIST
70645: LIST
70646: LIST
70647: LIST
70648: LIST
70649: LIST
70650: LIST
70651: LIST
70652: LIST
70653: LIST
70654: LIST
70655: LIST
70656: LIST
70657: LIST
70658: LIST
70659: LIST
70660: LIST
70661: LIST
70662: LIST
70663: LIST
70664: LIST
70665: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70666: LD_ADDR_VAR 0 32
70670: PUSH
70671: LD_INT 0
70673: PUSH
70674: LD_INT 0
70676: PUSH
70677: EMPTY
70678: LIST
70679: LIST
70680: PUSH
70681: LD_INT 0
70683: PUSH
70684: LD_INT 1
70686: NEG
70687: PUSH
70688: EMPTY
70689: LIST
70690: LIST
70691: PUSH
70692: LD_INT 1
70694: PUSH
70695: LD_INT 0
70697: PUSH
70698: EMPTY
70699: LIST
70700: LIST
70701: PUSH
70702: LD_INT 1
70704: PUSH
70705: LD_INT 1
70707: PUSH
70708: EMPTY
70709: LIST
70710: LIST
70711: PUSH
70712: LD_INT 0
70714: PUSH
70715: LD_INT 1
70717: PUSH
70718: EMPTY
70719: LIST
70720: LIST
70721: PUSH
70722: LD_INT 1
70724: NEG
70725: PUSH
70726: LD_INT 0
70728: PUSH
70729: EMPTY
70730: LIST
70731: LIST
70732: PUSH
70733: LD_INT 1
70735: NEG
70736: PUSH
70737: LD_INT 1
70739: NEG
70740: PUSH
70741: EMPTY
70742: LIST
70743: LIST
70744: PUSH
70745: LD_INT 1
70747: NEG
70748: PUSH
70749: LD_INT 2
70751: NEG
70752: PUSH
70753: EMPTY
70754: LIST
70755: LIST
70756: PUSH
70757: LD_INT 0
70759: PUSH
70760: LD_INT 2
70762: NEG
70763: PUSH
70764: EMPTY
70765: LIST
70766: LIST
70767: PUSH
70768: LD_INT 1
70770: PUSH
70771: LD_INT 1
70773: NEG
70774: PUSH
70775: EMPTY
70776: LIST
70777: LIST
70778: PUSH
70779: LD_INT 2
70781: PUSH
70782: LD_INT 1
70784: PUSH
70785: EMPTY
70786: LIST
70787: LIST
70788: PUSH
70789: LD_INT 2
70791: PUSH
70792: LD_INT 2
70794: PUSH
70795: EMPTY
70796: LIST
70797: LIST
70798: PUSH
70799: LD_INT 1
70801: PUSH
70802: LD_INT 2
70804: PUSH
70805: EMPTY
70806: LIST
70807: LIST
70808: PUSH
70809: LD_INT 0
70811: PUSH
70812: LD_INT 2
70814: PUSH
70815: EMPTY
70816: LIST
70817: LIST
70818: PUSH
70819: LD_INT 1
70821: NEG
70822: PUSH
70823: LD_INT 1
70825: PUSH
70826: EMPTY
70827: LIST
70828: LIST
70829: PUSH
70830: LD_INT 2
70832: NEG
70833: PUSH
70834: LD_INT 0
70836: PUSH
70837: EMPTY
70838: LIST
70839: LIST
70840: PUSH
70841: LD_INT 2
70843: NEG
70844: PUSH
70845: LD_INT 1
70847: NEG
70848: PUSH
70849: EMPTY
70850: LIST
70851: LIST
70852: PUSH
70853: LD_INT 1
70855: NEG
70856: PUSH
70857: LD_INT 3
70859: NEG
70860: PUSH
70861: EMPTY
70862: LIST
70863: LIST
70864: PUSH
70865: LD_INT 1
70867: PUSH
70868: LD_INT 2
70870: NEG
70871: PUSH
70872: EMPTY
70873: LIST
70874: LIST
70875: PUSH
70876: LD_INT 3
70878: PUSH
70879: LD_INT 2
70881: PUSH
70882: EMPTY
70883: LIST
70884: LIST
70885: PUSH
70886: LD_INT 2
70888: PUSH
70889: LD_INT 3
70891: PUSH
70892: EMPTY
70893: LIST
70894: LIST
70895: PUSH
70896: LD_INT 2
70898: NEG
70899: PUSH
70900: LD_INT 1
70902: PUSH
70903: EMPTY
70904: LIST
70905: LIST
70906: PUSH
70907: LD_INT 3
70909: NEG
70910: PUSH
70911: LD_INT 1
70913: NEG
70914: PUSH
70915: EMPTY
70916: LIST
70917: LIST
70918: PUSH
70919: EMPTY
70920: LIST
70921: LIST
70922: LIST
70923: LIST
70924: LIST
70925: LIST
70926: LIST
70927: LIST
70928: LIST
70929: LIST
70930: LIST
70931: LIST
70932: LIST
70933: LIST
70934: LIST
70935: LIST
70936: LIST
70937: LIST
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
70944: LD_ADDR_VAR 0 33
70948: PUSH
70949: LD_INT 0
70951: PUSH
70952: LD_INT 0
70954: PUSH
70955: EMPTY
70956: LIST
70957: LIST
70958: PUSH
70959: LD_INT 0
70961: PUSH
70962: LD_INT 1
70964: NEG
70965: PUSH
70966: EMPTY
70967: LIST
70968: LIST
70969: PUSH
70970: LD_INT 1
70972: PUSH
70973: LD_INT 0
70975: PUSH
70976: EMPTY
70977: LIST
70978: LIST
70979: PUSH
70980: LD_INT 1
70982: PUSH
70983: LD_INT 1
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: PUSH
70990: LD_INT 0
70992: PUSH
70993: LD_INT 1
70995: PUSH
70996: EMPTY
70997: LIST
70998: LIST
70999: PUSH
71000: LD_INT 1
71002: NEG
71003: PUSH
71004: LD_INT 0
71006: PUSH
71007: EMPTY
71008: LIST
71009: LIST
71010: PUSH
71011: LD_INT 1
71013: NEG
71014: PUSH
71015: LD_INT 1
71017: NEG
71018: PUSH
71019: EMPTY
71020: LIST
71021: LIST
71022: PUSH
71023: LD_INT 1
71025: NEG
71026: PUSH
71027: LD_INT 2
71029: NEG
71030: PUSH
71031: EMPTY
71032: LIST
71033: LIST
71034: PUSH
71035: LD_INT 1
71037: PUSH
71038: LD_INT 1
71040: NEG
71041: PUSH
71042: EMPTY
71043: LIST
71044: LIST
71045: PUSH
71046: LD_INT 2
71048: PUSH
71049: LD_INT 0
71051: PUSH
71052: EMPTY
71053: LIST
71054: LIST
71055: PUSH
71056: LD_INT 2
71058: PUSH
71059: LD_INT 1
71061: PUSH
71062: EMPTY
71063: LIST
71064: LIST
71065: PUSH
71066: LD_INT 1
71068: PUSH
71069: LD_INT 2
71071: PUSH
71072: EMPTY
71073: LIST
71074: LIST
71075: PUSH
71076: LD_INT 0
71078: PUSH
71079: LD_INT 2
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: PUSH
71086: LD_INT 1
71088: NEG
71089: PUSH
71090: LD_INT 1
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PUSH
71097: LD_INT 2
71099: NEG
71100: PUSH
71101: LD_INT 0
71103: PUSH
71104: EMPTY
71105: LIST
71106: LIST
71107: PUSH
71108: LD_INT 2
71110: NEG
71111: PUSH
71112: LD_INT 1
71114: NEG
71115: PUSH
71116: EMPTY
71117: LIST
71118: LIST
71119: PUSH
71120: LD_INT 2
71122: NEG
71123: PUSH
71124: LD_INT 2
71126: NEG
71127: PUSH
71128: EMPTY
71129: LIST
71130: LIST
71131: PUSH
71132: LD_INT 2
71134: NEG
71135: PUSH
71136: LD_INT 3
71138: NEG
71139: PUSH
71140: EMPTY
71141: LIST
71142: LIST
71143: PUSH
71144: LD_INT 2
71146: PUSH
71147: LD_INT 1
71149: NEG
71150: PUSH
71151: EMPTY
71152: LIST
71153: LIST
71154: PUSH
71155: LD_INT 3
71157: PUSH
71158: LD_INT 1
71160: PUSH
71161: EMPTY
71162: LIST
71163: LIST
71164: PUSH
71165: LD_INT 1
71167: PUSH
71168: LD_INT 3
71170: PUSH
71171: EMPTY
71172: LIST
71173: LIST
71174: PUSH
71175: LD_INT 1
71177: NEG
71178: PUSH
71179: LD_INT 2
71181: PUSH
71182: EMPTY
71183: LIST
71184: LIST
71185: PUSH
71186: LD_INT 3
71188: NEG
71189: PUSH
71190: LD_INT 2
71192: NEG
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: EMPTY
71199: LIST
71200: LIST
71201: LIST
71202: LIST
71203: LIST
71204: LIST
71205: LIST
71206: LIST
71207: LIST
71208: LIST
71209: LIST
71210: LIST
71211: LIST
71212: LIST
71213: LIST
71214: LIST
71215: LIST
71216: LIST
71217: LIST
71218: LIST
71219: LIST
71220: LIST
71221: LIST
71222: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
71223: LD_ADDR_VAR 0 34
71227: PUSH
71228: LD_INT 0
71230: PUSH
71231: LD_INT 0
71233: PUSH
71234: EMPTY
71235: LIST
71236: LIST
71237: PUSH
71238: LD_INT 0
71240: PUSH
71241: LD_INT 1
71243: NEG
71244: PUSH
71245: EMPTY
71246: LIST
71247: LIST
71248: PUSH
71249: LD_INT 1
71251: PUSH
71252: LD_INT 0
71254: PUSH
71255: EMPTY
71256: LIST
71257: LIST
71258: PUSH
71259: LD_INT 1
71261: PUSH
71262: LD_INT 1
71264: PUSH
71265: EMPTY
71266: LIST
71267: LIST
71268: PUSH
71269: LD_INT 0
71271: PUSH
71272: LD_INT 1
71274: PUSH
71275: EMPTY
71276: LIST
71277: LIST
71278: PUSH
71279: LD_INT 1
71281: NEG
71282: PUSH
71283: LD_INT 0
71285: PUSH
71286: EMPTY
71287: LIST
71288: LIST
71289: PUSH
71290: LD_INT 1
71292: NEG
71293: PUSH
71294: LD_INT 1
71296: NEG
71297: PUSH
71298: EMPTY
71299: LIST
71300: LIST
71301: PUSH
71302: LD_INT 1
71304: NEG
71305: PUSH
71306: LD_INT 2
71308: NEG
71309: PUSH
71310: EMPTY
71311: LIST
71312: LIST
71313: PUSH
71314: LD_INT 0
71316: PUSH
71317: LD_INT 2
71319: NEG
71320: PUSH
71321: EMPTY
71322: LIST
71323: LIST
71324: PUSH
71325: LD_INT 1
71327: PUSH
71328: LD_INT 1
71330: NEG
71331: PUSH
71332: EMPTY
71333: LIST
71334: LIST
71335: PUSH
71336: LD_INT 2
71338: PUSH
71339: LD_INT 1
71341: PUSH
71342: EMPTY
71343: LIST
71344: LIST
71345: PUSH
71346: LD_INT 2
71348: PUSH
71349: LD_INT 2
71351: PUSH
71352: EMPTY
71353: LIST
71354: LIST
71355: PUSH
71356: LD_INT 1
71358: PUSH
71359: LD_INT 2
71361: PUSH
71362: EMPTY
71363: LIST
71364: LIST
71365: PUSH
71366: LD_INT 1
71368: NEG
71369: PUSH
71370: LD_INT 1
71372: PUSH
71373: EMPTY
71374: LIST
71375: LIST
71376: PUSH
71377: LD_INT 2
71379: NEG
71380: PUSH
71381: LD_INT 0
71383: PUSH
71384: EMPTY
71385: LIST
71386: LIST
71387: PUSH
71388: LD_INT 2
71390: NEG
71391: PUSH
71392: LD_INT 1
71394: NEG
71395: PUSH
71396: EMPTY
71397: LIST
71398: LIST
71399: PUSH
71400: LD_INT 2
71402: NEG
71403: PUSH
71404: LD_INT 2
71406: NEG
71407: PUSH
71408: EMPTY
71409: LIST
71410: LIST
71411: PUSH
71412: LD_INT 1
71414: NEG
71415: PUSH
71416: LD_INT 3
71418: NEG
71419: PUSH
71420: EMPTY
71421: LIST
71422: LIST
71423: PUSH
71424: LD_INT 1
71426: PUSH
71427: LD_INT 2
71429: NEG
71430: PUSH
71431: EMPTY
71432: LIST
71433: LIST
71434: PUSH
71435: LD_INT 3
71437: PUSH
71438: LD_INT 2
71440: PUSH
71441: EMPTY
71442: LIST
71443: LIST
71444: PUSH
71445: LD_INT 2
71447: PUSH
71448: LD_INT 3
71450: PUSH
71451: EMPTY
71452: LIST
71453: LIST
71454: PUSH
71455: LD_INT 2
71457: NEG
71458: PUSH
71459: LD_INT 1
71461: PUSH
71462: EMPTY
71463: LIST
71464: LIST
71465: PUSH
71466: LD_INT 3
71468: NEG
71469: PUSH
71470: LD_INT 1
71472: NEG
71473: PUSH
71474: EMPTY
71475: LIST
71476: LIST
71477: PUSH
71478: EMPTY
71479: LIST
71480: LIST
71481: LIST
71482: LIST
71483: LIST
71484: LIST
71485: LIST
71486: LIST
71487: LIST
71488: LIST
71489: LIST
71490: LIST
71491: LIST
71492: LIST
71493: LIST
71494: LIST
71495: LIST
71496: LIST
71497: LIST
71498: LIST
71499: LIST
71500: LIST
71501: LIST
71502: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
71503: LD_ADDR_VAR 0 35
71507: PUSH
71508: LD_INT 0
71510: PUSH
71511: LD_INT 0
71513: PUSH
71514: EMPTY
71515: LIST
71516: LIST
71517: PUSH
71518: LD_INT 0
71520: PUSH
71521: LD_INT 1
71523: NEG
71524: PUSH
71525: EMPTY
71526: LIST
71527: LIST
71528: PUSH
71529: LD_INT 1
71531: PUSH
71532: LD_INT 0
71534: PUSH
71535: EMPTY
71536: LIST
71537: LIST
71538: PUSH
71539: LD_INT 1
71541: PUSH
71542: LD_INT 1
71544: PUSH
71545: EMPTY
71546: LIST
71547: LIST
71548: PUSH
71549: LD_INT 0
71551: PUSH
71552: LD_INT 1
71554: PUSH
71555: EMPTY
71556: LIST
71557: LIST
71558: PUSH
71559: LD_INT 1
71561: NEG
71562: PUSH
71563: LD_INT 0
71565: PUSH
71566: EMPTY
71567: LIST
71568: LIST
71569: PUSH
71570: LD_INT 1
71572: NEG
71573: PUSH
71574: LD_INT 1
71576: NEG
71577: PUSH
71578: EMPTY
71579: LIST
71580: LIST
71581: PUSH
71582: LD_INT 2
71584: PUSH
71585: LD_INT 1
71587: PUSH
71588: EMPTY
71589: LIST
71590: LIST
71591: PUSH
71592: LD_INT 2
71594: NEG
71595: PUSH
71596: LD_INT 1
71598: NEG
71599: PUSH
71600: EMPTY
71601: LIST
71602: LIST
71603: PUSH
71604: EMPTY
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
71615: LD_ADDR_VAR 0 36
71619: PUSH
71620: LD_INT 0
71622: PUSH
71623: LD_INT 0
71625: PUSH
71626: EMPTY
71627: LIST
71628: LIST
71629: PUSH
71630: LD_INT 0
71632: PUSH
71633: LD_INT 1
71635: NEG
71636: PUSH
71637: EMPTY
71638: LIST
71639: LIST
71640: PUSH
71641: LD_INT 1
71643: PUSH
71644: LD_INT 0
71646: PUSH
71647: EMPTY
71648: LIST
71649: LIST
71650: PUSH
71651: LD_INT 1
71653: PUSH
71654: LD_INT 1
71656: PUSH
71657: EMPTY
71658: LIST
71659: LIST
71660: PUSH
71661: LD_INT 0
71663: PUSH
71664: LD_INT 1
71666: PUSH
71667: EMPTY
71668: LIST
71669: LIST
71670: PUSH
71671: LD_INT 1
71673: NEG
71674: PUSH
71675: LD_INT 0
71677: PUSH
71678: EMPTY
71679: LIST
71680: LIST
71681: PUSH
71682: LD_INT 1
71684: NEG
71685: PUSH
71686: LD_INT 1
71688: NEG
71689: PUSH
71690: EMPTY
71691: LIST
71692: LIST
71693: PUSH
71694: LD_INT 1
71696: NEG
71697: PUSH
71698: LD_INT 2
71700: NEG
71701: PUSH
71702: EMPTY
71703: LIST
71704: LIST
71705: PUSH
71706: LD_INT 1
71708: PUSH
71709: LD_INT 2
71711: PUSH
71712: EMPTY
71713: LIST
71714: LIST
71715: PUSH
71716: EMPTY
71717: LIST
71718: LIST
71719: LIST
71720: LIST
71721: LIST
71722: LIST
71723: LIST
71724: LIST
71725: LIST
71726: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
71727: LD_ADDR_VAR 0 37
71731: PUSH
71732: LD_INT 0
71734: PUSH
71735: LD_INT 0
71737: PUSH
71738: EMPTY
71739: LIST
71740: LIST
71741: PUSH
71742: LD_INT 0
71744: PUSH
71745: LD_INT 1
71747: NEG
71748: PUSH
71749: EMPTY
71750: LIST
71751: LIST
71752: PUSH
71753: LD_INT 1
71755: PUSH
71756: LD_INT 0
71758: PUSH
71759: EMPTY
71760: LIST
71761: LIST
71762: PUSH
71763: LD_INT 1
71765: PUSH
71766: LD_INT 1
71768: PUSH
71769: EMPTY
71770: LIST
71771: LIST
71772: PUSH
71773: LD_INT 0
71775: PUSH
71776: LD_INT 1
71778: PUSH
71779: EMPTY
71780: LIST
71781: LIST
71782: PUSH
71783: LD_INT 1
71785: NEG
71786: PUSH
71787: LD_INT 0
71789: PUSH
71790: EMPTY
71791: LIST
71792: LIST
71793: PUSH
71794: LD_INT 1
71796: NEG
71797: PUSH
71798: LD_INT 1
71800: NEG
71801: PUSH
71802: EMPTY
71803: LIST
71804: LIST
71805: PUSH
71806: LD_INT 1
71808: PUSH
71809: LD_INT 1
71811: NEG
71812: PUSH
71813: EMPTY
71814: LIST
71815: LIST
71816: PUSH
71817: LD_INT 1
71819: NEG
71820: PUSH
71821: LD_INT 1
71823: PUSH
71824: EMPTY
71825: LIST
71826: LIST
71827: PUSH
71828: EMPTY
71829: LIST
71830: LIST
71831: LIST
71832: LIST
71833: LIST
71834: LIST
71835: LIST
71836: LIST
71837: LIST
71838: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
71839: LD_ADDR_VAR 0 38
71843: PUSH
71844: LD_INT 0
71846: PUSH
71847: LD_INT 0
71849: PUSH
71850: EMPTY
71851: LIST
71852: LIST
71853: PUSH
71854: LD_INT 0
71856: PUSH
71857: LD_INT 1
71859: NEG
71860: PUSH
71861: EMPTY
71862: LIST
71863: LIST
71864: PUSH
71865: LD_INT 1
71867: PUSH
71868: LD_INT 0
71870: PUSH
71871: EMPTY
71872: LIST
71873: LIST
71874: PUSH
71875: LD_INT 1
71877: PUSH
71878: LD_INT 1
71880: PUSH
71881: EMPTY
71882: LIST
71883: LIST
71884: PUSH
71885: LD_INT 0
71887: PUSH
71888: LD_INT 1
71890: PUSH
71891: EMPTY
71892: LIST
71893: LIST
71894: PUSH
71895: LD_INT 1
71897: NEG
71898: PUSH
71899: LD_INT 0
71901: PUSH
71902: EMPTY
71903: LIST
71904: LIST
71905: PUSH
71906: LD_INT 1
71908: NEG
71909: PUSH
71910: LD_INT 1
71912: NEG
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: PUSH
71918: LD_INT 2
71920: PUSH
71921: LD_INT 1
71923: PUSH
71924: EMPTY
71925: LIST
71926: LIST
71927: PUSH
71928: LD_INT 2
71930: NEG
71931: PUSH
71932: LD_INT 1
71934: NEG
71935: PUSH
71936: EMPTY
71937: LIST
71938: LIST
71939: PUSH
71940: EMPTY
71941: LIST
71942: LIST
71943: LIST
71944: LIST
71945: LIST
71946: LIST
71947: LIST
71948: LIST
71949: LIST
71950: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
71951: LD_ADDR_VAR 0 39
71955: PUSH
71956: LD_INT 0
71958: PUSH
71959: LD_INT 0
71961: PUSH
71962: EMPTY
71963: LIST
71964: LIST
71965: PUSH
71966: LD_INT 0
71968: PUSH
71969: LD_INT 1
71971: NEG
71972: PUSH
71973: EMPTY
71974: LIST
71975: LIST
71976: PUSH
71977: LD_INT 1
71979: PUSH
71980: LD_INT 0
71982: PUSH
71983: EMPTY
71984: LIST
71985: LIST
71986: PUSH
71987: LD_INT 1
71989: PUSH
71990: LD_INT 1
71992: PUSH
71993: EMPTY
71994: LIST
71995: LIST
71996: PUSH
71997: LD_INT 0
71999: PUSH
72000: LD_INT 1
72002: PUSH
72003: EMPTY
72004: LIST
72005: LIST
72006: PUSH
72007: LD_INT 1
72009: NEG
72010: PUSH
72011: LD_INT 0
72013: PUSH
72014: EMPTY
72015: LIST
72016: LIST
72017: PUSH
72018: LD_INT 1
72020: NEG
72021: PUSH
72022: LD_INT 1
72024: NEG
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: PUSH
72030: LD_INT 1
72032: NEG
72033: PUSH
72034: LD_INT 2
72036: NEG
72037: PUSH
72038: EMPTY
72039: LIST
72040: LIST
72041: PUSH
72042: LD_INT 1
72044: PUSH
72045: LD_INT 2
72047: PUSH
72048: EMPTY
72049: LIST
72050: LIST
72051: PUSH
72052: EMPTY
72053: LIST
72054: LIST
72055: LIST
72056: LIST
72057: LIST
72058: LIST
72059: LIST
72060: LIST
72061: LIST
72062: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
72063: LD_ADDR_VAR 0 40
72067: PUSH
72068: LD_INT 0
72070: PUSH
72071: LD_INT 0
72073: PUSH
72074: EMPTY
72075: LIST
72076: LIST
72077: PUSH
72078: LD_INT 0
72080: PUSH
72081: LD_INT 1
72083: NEG
72084: PUSH
72085: EMPTY
72086: LIST
72087: LIST
72088: PUSH
72089: LD_INT 1
72091: PUSH
72092: LD_INT 0
72094: PUSH
72095: EMPTY
72096: LIST
72097: LIST
72098: PUSH
72099: LD_INT 1
72101: PUSH
72102: LD_INT 1
72104: PUSH
72105: EMPTY
72106: LIST
72107: LIST
72108: PUSH
72109: LD_INT 0
72111: PUSH
72112: LD_INT 1
72114: PUSH
72115: EMPTY
72116: LIST
72117: LIST
72118: PUSH
72119: LD_INT 1
72121: NEG
72122: PUSH
72123: LD_INT 0
72125: PUSH
72126: EMPTY
72127: LIST
72128: LIST
72129: PUSH
72130: LD_INT 1
72132: NEG
72133: PUSH
72134: LD_INT 1
72136: NEG
72137: PUSH
72138: EMPTY
72139: LIST
72140: LIST
72141: PUSH
72142: LD_INT 1
72144: PUSH
72145: LD_INT 1
72147: NEG
72148: PUSH
72149: EMPTY
72150: LIST
72151: LIST
72152: PUSH
72153: LD_INT 1
72155: NEG
72156: PUSH
72157: LD_INT 1
72159: PUSH
72160: EMPTY
72161: LIST
72162: LIST
72163: PUSH
72164: EMPTY
72165: LIST
72166: LIST
72167: LIST
72168: LIST
72169: LIST
72170: LIST
72171: LIST
72172: LIST
72173: LIST
72174: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72175: LD_ADDR_VAR 0 41
72179: PUSH
72180: LD_INT 0
72182: PUSH
72183: LD_INT 0
72185: PUSH
72186: EMPTY
72187: LIST
72188: LIST
72189: PUSH
72190: LD_INT 0
72192: PUSH
72193: LD_INT 1
72195: NEG
72196: PUSH
72197: EMPTY
72198: LIST
72199: LIST
72200: PUSH
72201: LD_INT 1
72203: PUSH
72204: LD_INT 0
72206: PUSH
72207: EMPTY
72208: LIST
72209: LIST
72210: PUSH
72211: LD_INT 1
72213: PUSH
72214: LD_INT 1
72216: PUSH
72217: EMPTY
72218: LIST
72219: LIST
72220: PUSH
72221: LD_INT 0
72223: PUSH
72224: LD_INT 1
72226: PUSH
72227: EMPTY
72228: LIST
72229: LIST
72230: PUSH
72231: LD_INT 1
72233: NEG
72234: PUSH
72235: LD_INT 0
72237: PUSH
72238: EMPTY
72239: LIST
72240: LIST
72241: PUSH
72242: LD_INT 1
72244: NEG
72245: PUSH
72246: LD_INT 1
72248: NEG
72249: PUSH
72250: EMPTY
72251: LIST
72252: LIST
72253: PUSH
72254: LD_INT 1
72256: NEG
72257: PUSH
72258: LD_INT 2
72260: NEG
72261: PUSH
72262: EMPTY
72263: LIST
72264: LIST
72265: PUSH
72266: LD_INT 1
72268: PUSH
72269: LD_INT 1
72271: NEG
72272: PUSH
72273: EMPTY
72274: LIST
72275: LIST
72276: PUSH
72277: LD_INT 2
72279: PUSH
72280: LD_INT 0
72282: PUSH
72283: EMPTY
72284: LIST
72285: LIST
72286: PUSH
72287: LD_INT 2
72289: PUSH
72290: LD_INT 1
72292: PUSH
72293: EMPTY
72294: LIST
72295: LIST
72296: PUSH
72297: LD_INT 2
72299: PUSH
72300: LD_INT 2
72302: PUSH
72303: EMPTY
72304: LIST
72305: LIST
72306: PUSH
72307: LD_INT 1
72309: PUSH
72310: LD_INT 2
72312: PUSH
72313: EMPTY
72314: LIST
72315: LIST
72316: PUSH
72317: LD_INT 1
72319: NEG
72320: PUSH
72321: LD_INT 1
72323: PUSH
72324: EMPTY
72325: LIST
72326: LIST
72327: PUSH
72328: LD_INT 2
72330: NEG
72331: PUSH
72332: LD_INT 0
72334: PUSH
72335: EMPTY
72336: LIST
72337: LIST
72338: PUSH
72339: LD_INT 2
72341: NEG
72342: PUSH
72343: LD_INT 1
72345: NEG
72346: PUSH
72347: EMPTY
72348: LIST
72349: LIST
72350: PUSH
72351: LD_INT 2
72353: NEG
72354: PUSH
72355: LD_INT 2
72357: NEG
72358: PUSH
72359: EMPTY
72360: LIST
72361: LIST
72362: PUSH
72363: LD_INT 2
72365: NEG
72366: PUSH
72367: LD_INT 3
72369: NEG
72370: PUSH
72371: EMPTY
72372: LIST
72373: LIST
72374: PUSH
72375: LD_INT 2
72377: PUSH
72378: LD_INT 1
72380: NEG
72381: PUSH
72382: EMPTY
72383: LIST
72384: LIST
72385: PUSH
72386: LD_INT 3
72388: PUSH
72389: LD_INT 0
72391: PUSH
72392: EMPTY
72393: LIST
72394: LIST
72395: PUSH
72396: LD_INT 3
72398: PUSH
72399: LD_INT 1
72401: PUSH
72402: EMPTY
72403: LIST
72404: LIST
72405: PUSH
72406: LD_INT 3
72408: PUSH
72409: LD_INT 2
72411: PUSH
72412: EMPTY
72413: LIST
72414: LIST
72415: PUSH
72416: LD_INT 3
72418: PUSH
72419: LD_INT 3
72421: PUSH
72422: EMPTY
72423: LIST
72424: LIST
72425: PUSH
72426: LD_INT 2
72428: PUSH
72429: LD_INT 3
72431: PUSH
72432: EMPTY
72433: LIST
72434: LIST
72435: PUSH
72436: LD_INT 2
72438: NEG
72439: PUSH
72440: LD_INT 1
72442: PUSH
72443: EMPTY
72444: LIST
72445: LIST
72446: PUSH
72447: LD_INT 3
72449: NEG
72450: PUSH
72451: LD_INT 0
72453: PUSH
72454: EMPTY
72455: LIST
72456: LIST
72457: PUSH
72458: LD_INT 3
72460: NEG
72461: PUSH
72462: LD_INT 1
72464: NEG
72465: PUSH
72466: EMPTY
72467: LIST
72468: LIST
72469: PUSH
72470: LD_INT 3
72472: NEG
72473: PUSH
72474: LD_INT 2
72476: NEG
72477: PUSH
72478: EMPTY
72479: LIST
72480: LIST
72481: PUSH
72482: LD_INT 3
72484: NEG
72485: PUSH
72486: LD_INT 3
72488: NEG
72489: PUSH
72490: EMPTY
72491: LIST
72492: LIST
72493: PUSH
72494: EMPTY
72495: LIST
72496: LIST
72497: LIST
72498: LIST
72499: LIST
72500: LIST
72501: LIST
72502: LIST
72503: LIST
72504: LIST
72505: LIST
72506: LIST
72507: LIST
72508: LIST
72509: LIST
72510: LIST
72511: LIST
72512: LIST
72513: LIST
72514: LIST
72515: LIST
72516: LIST
72517: LIST
72518: LIST
72519: LIST
72520: LIST
72521: LIST
72522: LIST
72523: LIST
72524: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72525: LD_ADDR_VAR 0 42
72529: PUSH
72530: LD_INT 0
72532: PUSH
72533: LD_INT 0
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PUSH
72540: LD_INT 0
72542: PUSH
72543: LD_INT 1
72545: NEG
72546: PUSH
72547: EMPTY
72548: LIST
72549: LIST
72550: PUSH
72551: LD_INT 1
72553: PUSH
72554: LD_INT 0
72556: PUSH
72557: EMPTY
72558: LIST
72559: LIST
72560: PUSH
72561: LD_INT 1
72563: PUSH
72564: LD_INT 1
72566: PUSH
72567: EMPTY
72568: LIST
72569: LIST
72570: PUSH
72571: LD_INT 0
72573: PUSH
72574: LD_INT 1
72576: PUSH
72577: EMPTY
72578: LIST
72579: LIST
72580: PUSH
72581: LD_INT 1
72583: NEG
72584: PUSH
72585: LD_INT 0
72587: PUSH
72588: EMPTY
72589: LIST
72590: LIST
72591: PUSH
72592: LD_INT 1
72594: NEG
72595: PUSH
72596: LD_INT 1
72598: NEG
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: PUSH
72604: LD_INT 1
72606: NEG
72607: PUSH
72608: LD_INT 2
72610: NEG
72611: PUSH
72612: EMPTY
72613: LIST
72614: LIST
72615: PUSH
72616: LD_INT 0
72618: PUSH
72619: LD_INT 2
72621: NEG
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PUSH
72627: LD_INT 1
72629: PUSH
72630: LD_INT 1
72632: NEG
72633: PUSH
72634: EMPTY
72635: LIST
72636: LIST
72637: PUSH
72638: LD_INT 2
72640: PUSH
72641: LD_INT 1
72643: PUSH
72644: EMPTY
72645: LIST
72646: LIST
72647: PUSH
72648: LD_INT 2
72650: PUSH
72651: LD_INT 2
72653: PUSH
72654: EMPTY
72655: LIST
72656: LIST
72657: PUSH
72658: LD_INT 1
72660: PUSH
72661: LD_INT 2
72663: PUSH
72664: EMPTY
72665: LIST
72666: LIST
72667: PUSH
72668: LD_INT 0
72670: PUSH
72671: LD_INT 2
72673: PUSH
72674: EMPTY
72675: LIST
72676: LIST
72677: PUSH
72678: LD_INT 1
72680: NEG
72681: PUSH
72682: LD_INT 1
72684: PUSH
72685: EMPTY
72686: LIST
72687: LIST
72688: PUSH
72689: LD_INT 2
72691: NEG
72692: PUSH
72693: LD_INT 1
72695: NEG
72696: PUSH
72697: EMPTY
72698: LIST
72699: LIST
72700: PUSH
72701: LD_INT 2
72703: NEG
72704: PUSH
72705: LD_INT 2
72707: NEG
72708: PUSH
72709: EMPTY
72710: LIST
72711: LIST
72712: PUSH
72713: LD_INT 2
72715: NEG
72716: PUSH
72717: LD_INT 3
72719: NEG
72720: PUSH
72721: EMPTY
72722: LIST
72723: LIST
72724: PUSH
72725: LD_INT 1
72727: NEG
72728: PUSH
72729: LD_INT 3
72731: NEG
72732: PUSH
72733: EMPTY
72734: LIST
72735: LIST
72736: PUSH
72737: LD_INT 0
72739: PUSH
72740: LD_INT 3
72742: NEG
72743: PUSH
72744: EMPTY
72745: LIST
72746: LIST
72747: PUSH
72748: LD_INT 1
72750: PUSH
72751: LD_INT 2
72753: NEG
72754: PUSH
72755: EMPTY
72756: LIST
72757: LIST
72758: PUSH
72759: LD_INT 3
72761: PUSH
72762: LD_INT 2
72764: PUSH
72765: EMPTY
72766: LIST
72767: LIST
72768: PUSH
72769: LD_INT 3
72771: PUSH
72772: LD_INT 3
72774: PUSH
72775: EMPTY
72776: LIST
72777: LIST
72778: PUSH
72779: LD_INT 2
72781: PUSH
72782: LD_INT 3
72784: PUSH
72785: EMPTY
72786: LIST
72787: LIST
72788: PUSH
72789: LD_INT 1
72791: PUSH
72792: LD_INT 3
72794: PUSH
72795: EMPTY
72796: LIST
72797: LIST
72798: PUSH
72799: LD_INT 0
72801: PUSH
72802: LD_INT 3
72804: PUSH
72805: EMPTY
72806: LIST
72807: LIST
72808: PUSH
72809: LD_INT 1
72811: NEG
72812: PUSH
72813: LD_INT 2
72815: PUSH
72816: EMPTY
72817: LIST
72818: LIST
72819: PUSH
72820: LD_INT 3
72822: NEG
72823: PUSH
72824: LD_INT 2
72826: NEG
72827: PUSH
72828: EMPTY
72829: LIST
72830: LIST
72831: PUSH
72832: LD_INT 3
72834: NEG
72835: PUSH
72836: LD_INT 3
72838: NEG
72839: PUSH
72840: EMPTY
72841: LIST
72842: LIST
72843: PUSH
72844: EMPTY
72845: LIST
72846: LIST
72847: LIST
72848: LIST
72849: LIST
72850: LIST
72851: LIST
72852: LIST
72853: LIST
72854: LIST
72855: LIST
72856: LIST
72857: LIST
72858: LIST
72859: LIST
72860: LIST
72861: LIST
72862: LIST
72863: LIST
72864: LIST
72865: LIST
72866: LIST
72867: LIST
72868: LIST
72869: LIST
72870: LIST
72871: LIST
72872: LIST
72873: LIST
72874: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
72875: LD_ADDR_VAR 0 43
72879: PUSH
72880: LD_INT 0
72882: PUSH
72883: LD_INT 0
72885: PUSH
72886: EMPTY
72887: LIST
72888: LIST
72889: PUSH
72890: LD_INT 0
72892: PUSH
72893: LD_INT 1
72895: NEG
72896: PUSH
72897: EMPTY
72898: LIST
72899: LIST
72900: PUSH
72901: LD_INT 1
72903: PUSH
72904: LD_INT 0
72906: PUSH
72907: EMPTY
72908: LIST
72909: LIST
72910: PUSH
72911: LD_INT 1
72913: PUSH
72914: LD_INT 1
72916: PUSH
72917: EMPTY
72918: LIST
72919: LIST
72920: PUSH
72921: LD_INT 0
72923: PUSH
72924: LD_INT 1
72926: PUSH
72927: EMPTY
72928: LIST
72929: LIST
72930: PUSH
72931: LD_INT 1
72933: NEG
72934: PUSH
72935: LD_INT 0
72937: PUSH
72938: EMPTY
72939: LIST
72940: LIST
72941: PUSH
72942: LD_INT 1
72944: NEG
72945: PUSH
72946: LD_INT 1
72948: NEG
72949: PUSH
72950: EMPTY
72951: LIST
72952: LIST
72953: PUSH
72954: LD_INT 1
72956: NEG
72957: PUSH
72958: LD_INT 2
72960: NEG
72961: PUSH
72962: EMPTY
72963: LIST
72964: LIST
72965: PUSH
72966: LD_INT 0
72968: PUSH
72969: LD_INT 2
72971: NEG
72972: PUSH
72973: EMPTY
72974: LIST
72975: LIST
72976: PUSH
72977: LD_INT 1
72979: PUSH
72980: LD_INT 1
72982: NEG
72983: PUSH
72984: EMPTY
72985: LIST
72986: LIST
72987: PUSH
72988: LD_INT 2
72990: PUSH
72991: LD_INT 0
72993: PUSH
72994: EMPTY
72995: LIST
72996: LIST
72997: PUSH
72998: LD_INT 2
73000: PUSH
73001: LD_INT 1
73003: PUSH
73004: EMPTY
73005: LIST
73006: LIST
73007: PUSH
73008: LD_INT 1
73010: PUSH
73011: LD_INT 2
73013: PUSH
73014: EMPTY
73015: LIST
73016: LIST
73017: PUSH
73018: LD_INT 0
73020: PUSH
73021: LD_INT 2
73023: PUSH
73024: EMPTY
73025: LIST
73026: LIST
73027: PUSH
73028: LD_INT 1
73030: NEG
73031: PUSH
73032: LD_INT 1
73034: PUSH
73035: EMPTY
73036: LIST
73037: LIST
73038: PUSH
73039: LD_INT 2
73041: NEG
73042: PUSH
73043: LD_INT 0
73045: PUSH
73046: EMPTY
73047: LIST
73048: LIST
73049: PUSH
73050: LD_INT 2
73052: NEG
73053: PUSH
73054: LD_INT 1
73056: NEG
73057: PUSH
73058: EMPTY
73059: LIST
73060: LIST
73061: PUSH
73062: LD_INT 1
73064: NEG
73065: PUSH
73066: LD_INT 3
73068: NEG
73069: PUSH
73070: EMPTY
73071: LIST
73072: LIST
73073: PUSH
73074: LD_INT 0
73076: PUSH
73077: LD_INT 3
73079: NEG
73080: PUSH
73081: EMPTY
73082: LIST
73083: LIST
73084: PUSH
73085: LD_INT 1
73087: PUSH
73088: LD_INT 2
73090: NEG
73091: PUSH
73092: EMPTY
73093: LIST
73094: LIST
73095: PUSH
73096: LD_INT 2
73098: PUSH
73099: LD_INT 1
73101: NEG
73102: PUSH
73103: EMPTY
73104: LIST
73105: LIST
73106: PUSH
73107: LD_INT 3
73109: PUSH
73110: LD_INT 0
73112: PUSH
73113: EMPTY
73114: LIST
73115: LIST
73116: PUSH
73117: LD_INT 3
73119: PUSH
73120: LD_INT 1
73122: PUSH
73123: EMPTY
73124: LIST
73125: LIST
73126: PUSH
73127: LD_INT 1
73129: PUSH
73130: LD_INT 3
73132: PUSH
73133: EMPTY
73134: LIST
73135: LIST
73136: PUSH
73137: LD_INT 0
73139: PUSH
73140: LD_INT 3
73142: PUSH
73143: EMPTY
73144: LIST
73145: LIST
73146: PUSH
73147: LD_INT 1
73149: NEG
73150: PUSH
73151: LD_INT 2
73153: PUSH
73154: EMPTY
73155: LIST
73156: LIST
73157: PUSH
73158: LD_INT 2
73160: NEG
73161: PUSH
73162: LD_INT 1
73164: PUSH
73165: EMPTY
73166: LIST
73167: LIST
73168: PUSH
73169: LD_INT 3
73171: NEG
73172: PUSH
73173: LD_INT 0
73175: PUSH
73176: EMPTY
73177: LIST
73178: LIST
73179: PUSH
73180: LD_INT 3
73182: NEG
73183: PUSH
73184: LD_INT 1
73186: NEG
73187: PUSH
73188: EMPTY
73189: LIST
73190: LIST
73191: PUSH
73192: EMPTY
73193: LIST
73194: LIST
73195: LIST
73196: LIST
73197: LIST
73198: LIST
73199: LIST
73200: LIST
73201: LIST
73202: LIST
73203: LIST
73204: LIST
73205: LIST
73206: LIST
73207: LIST
73208: LIST
73209: LIST
73210: LIST
73211: LIST
73212: LIST
73213: LIST
73214: LIST
73215: LIST
73216: LIST
73217: LIST
73218: LIST
73219: LIST
73220: LIST
73221: LIST
73222: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73223: LD_ADDR_VAR 0 44
73227: PUSH
73228: LD_INT 0
73230: PUSH
73231: LD_INT 0
73233: PUSH
73234: EMPTY
73235: LIST
73236: LIST
73237: PUSH
73238: LD_INT 0
73240: PUSH
73241: LD_INT 1
73243: NEG
73244: PUSH
73245: EMPTY
73246: LIST
73247: LIST
73248: PUSH
73249: LD_INT 1
73251: PUSH
73252: LD_INT 0
73254: PUSH
73255: EMPTY
73256: LIST
73257: LIST
73258: PUSH
73259: LD_INT 1
73261: PUSH
73262: LD_INT 1
73264: PUSH
73265: EMPTY
73266: LIST
73267: LIST
73268: PUSH
73269: LD_INT 0
73271: PUSH
73272: LD_INT 1
73274: PUSH
73275: EMPTY
73276: LIST
73277: LIST
73278: PUSH
73279: LD_INT 1
73281: NEG
73282: PUSH
73283: LD_INT 0
73285: PUSH
73286: EMPTY
73287: LIST
73288: LIST
73289: PUSH
73290: LD_INT 1
73292: NEG
73293: PUSH
73294: LD_INT 1
73296: NEG
73297: PUSH
73298: EMPTY
73299: LIST
73300: LIST
73301: PUSH
73302: LD_INT 1
73304: NEG
73305: PUSH
73306: LD_INT 2
73308: NEG
73309: PUSH
73310: EMPTY
73311: LIST
73312: LIST
73313: PUSH
73314: LD_INT 1
73316: PUSH
73317: LD_INT 1
73319: NEG
73320: PUSH
73321: EMPTY
73322: LIST
73323: LIST
73324: PUSH
73325: LD_INT 2
73327: PUSH
73328: LD_INT 0
73330: PUSH
73331: EMPTY
73332: LIST
73333: LIST
73334: PUSH
73335: LD_INT 2
73337: PUSH
73338: LD_INT 1
73340: PUSH
73341: EMPTY
73342: LIST
73343: LIST
73344: PUSH
73345: LD_INT 2
73347: PUSH
73348: LD_INT 2
73350: PUSH
73351: EMPTY
73352: LIST
73353: LIST
73354: PUSH
73355: LD_INT 1
73357: PUSH
73358: LD_INT 2
73360: PUSH
73361: EMPTY
73362: LIST
73363: LIST
73364: PUSH
73365: LD_INT 1
73367: NEG
73368: PUSH
73369: LD_INT 1
73371: PUSH
73372: EMPTY
73373: LIST
73374: LIST
73375: PUSH
73376: LD_INT 2
73378: NEG
73379: PUSH
73380: LD_INT 0
73382: PUSH
73383: EMPTY
73384: LIST
73385: LIST
73386: PUSH
73387: LD_INT 2
73389: NEG
73390: PUSH
73391: LD_INT 1
73393: NEG
73394: PUSH
73395: EMPTY
73396: LIST
73397: LIST
73398: PUSH
73399: LD_INT 2
73401: NEG
73402: PUSH
73403: LD_INT 2
73405: NEG
73406: PUSH
73407: EMPTY
73408: LIST
73409: LIST
73410: PUSH
73411: LD_INT 2
73413: NEG
73414: PUSH
73415: LD_INT 3
73417: NEG
73418: PUSH
73419: EMPTY
73420: LIST
73421: LIST
73422: PUSH
73423: LD_INT 2
73425: PUSH
73426: LD_INT 1
73428: NEG
73429: PUSH
73430: EMPTY
73431: LIST
73432: LIST
73433: PUSH
73434: LD_INT 3
73436: PUSH
73437: LD_INT 0
73439: PUSH
73440: EMPTY
73441: LIST
73442: LIST
73443: PUSH
73444: LD_INT 3
73446: PUSH
73447: LD_INT 1
73449: PUSH
73450: EMPTY
73451: LIST
73452: LIST
73453: PUSH
73454: LD_INT 3
73456: PUSH
73457: LD_INT 2
73459: PUSH
73460: EMPTY
73461: LIST
73462: LIST
73463: PUSH
73464: LD_INT 3
73466: PUSH
73467: LD_INT 3
73469: PUSH
73470: EMPTY
73471: LIST
73472: LIST
73473: PUSH
73474: LD_INT 2
73476: PUSH
73477: LD_INT 3
73479: PUSH
73480: EMPTY
73481: LIST
73482: LIST
73483: PUSH
73484: LD_INT 2
73486: NEG
73487: PUSH
73488: LD_INT 1
73490: PUSH
73491: EMPTY
73492: LIST
73493: LIST
73494: PUSH
73495: LD_INT 3
73497: NEG
73498: PUSH
73499: LD_INT 0
73501: PUSH
73502: EMPTY
73503: LIST
73504: LIST
73505: PUSH
73506: LD_INT 3
73508: NEG
73509: PUSH
73510: LD_INT 1
73512: NEG
73513: PUSH
73514: EMPTY
73515: LIST
73516: LIST
73517: PUSH
73518: LD_INT 3
73520: NEG
73521: PUSH
73522: LD_INT 2
73524: NEG
73525: PUSH
73526: EMPTY
73527: LIST
73528: LIST
73529: PUSH
73530: LD_INT 3
73532: NEG
73533: PUSH
73534: LD_INT 3
73536: NEG
73537: PUSH
73538: EMPTY
73539: LIST
73540: LIST
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: LIST
73546: LIST
73547: LIST
73548: LIST
73549: LIST
73550: LIST
73551: LIST
73552: LIST
73553: LIST
73554: LIST
73555: LIST
73556: LIST
73557: LIST
73558: LIST
73559: LIST
73560: LIST
73561: LIST
73562: LIST
73563: LIST
73564: LIST
73565: LIST
73566: LIST
73567: LIST
73568: LIST
73569: LIST
73570: LIST
73571: LIST
73572: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
73573: LD_ADDR_VAR 0 45
73577: PUSH
73578: LD_INT 0
73580: PUSH
73581: LD_INT 0
73583: PUSH
73584: EMPTY
73585: LIST
73586: LIST
73587: PUSH
73588: LD_INT 0
73590: PUSH
73591: LD_INT 1
73593: NEG
73594: PUSH
73595: EMPTY
73596: LIST
73597: LIST
73598: PUSH
73599: LD_INT 1
73601: PUSH
73602: LD_INT 0
73604: PUSH
73605: EMPTY
73606: LIST
73607: LIST
73608: PUSH
73609: LD_INT 1
73611: PUSH
73612: LD_INT 1
73614: PUSH
73615: EMPTY
73616: LIST
73617: LIST
73618: PUSH
73619: LD_INT 0
73621: PUSH
73622: LD_INT 1
73624: PUSH
73625: EMPTY
73626: LIST
73627: LIST
73628: PUSH
73629: LD_INT 1
73631: NEG
73632: PUSH
73633: LD_INT 0
73635: PUSH
73636: EMPTY
73637: LIST
73638: LIST
73639: PUSH
73640: LD_INT 1
73642: NEG
73643: PUSH
73644: LD_INT 1
73646: NEG
73647: PUSH
73648: EMPTY
73649: LIST
73650: LIST
73651: PUSH
73652: LD_INT 1
73654: NEG
73655: PUSH
73656: LD_INT 2
73658: NEG
73659: PUSH
73660: EMPTY
73661: LIST
73662: LIST
73663: PUSH
73664: LD_INT 0
73666: PUSH
73667: LD_INT 2
73669: NEG
73670: PUSH
73671: EMPTY
73672: LIST
73673: LIST
73674: PUSH
73675: LD_INT 1
73677: PUSH
73678: LD_INT 1
73680: NEG
73681: PUSH
73682: EMPTY
73683: LIST
73684: LIST
73685: PUSH
73686: LD_INT 2
73688: PUSH
73689: LD_INT 1
73691: PUSH
73692: EMPTY
73693: LIST
73694: LIST
73695: PUSH
73696: LD_INT 2
73698: PUSH
73699: LD_INT 2
73701: PUSH
73702: EMPTY
73703: LIST
73704: LIST
73705: PUSH
73706: LD_INT 1
73708: PUSH
73709: LD_INT 2
73711: PUSH
73712: EMPTY
73713: LIST
73714: LIST
73715: PUSH
73716: LD_INT 0
73718: PUSH
73719: LD_INT 2
73721: PUSH
73722: EMPTY
73723: LIST
73724: LIST
73725: PUSH
73726: LD_INT 1
73728: NEG
73729: PUSH
73730: LD_INT 1
73732: PUSH
73733: EMPTY
73734: LIST
73735: LIST
73736: PUSH
73737: LD_INT 2
73739: NEG
73740: PUSH
73741: LD_INT 1
73743: NEG
73744: PUSH
73745: EMPTY
73746: LIST
73747: LIST
73748: PUSH
73749: LD_INT 2
73751: NEG
73752: PUSH
73753: LD_INT 2
73755: NEG
73756: PUSH
73757: EMPTY
73758: LIST
73759: LIST
73760: PUSH
73761: LD_INT 2
73763: NEG
73764: PUSH
73765: LD_INT 3
73767: NEG
73768: PUSH
73769: EMPTY
73770: LIST
73771: LIST
73772: PUSH
73773: LD_INT 1
73775: NEG
73776: PUSH
73777: LD_INT 3
73779: NEG
73780: PUSH
73781: EMPTY
73782: LIST
73783: LIST
73784: PUSH
73785: LD_INT 0
73787: PUSH
73788: LD_INT 3
73790: NEG
73791: PUSH
73792: EMPTY
73793: LIST
73794: LIST
73795: PUSH
73796: LD_INT 1
73798: PUSH
73799: LD_INT 2
73801: NEG
73802: PUSH
73803: EMPTY
73804: LIST
73805: LIST
73806: PUSH
73807: LD_INT 3
73809: PUSH
73810: LD_INT 2
73812: PUSH
73813: EMPTY
73814: LIST
73815: LIST
73816: PUSH
73817: LD_INT 3
73819: PUSH
73820: LD_INT 3
73822: PUSH
73823: EMPTY
73824: LIST
73825: LIST
73826: PUSH
73827: LD_INT 2
73829: PUSH
73830: LD_INT 3
73832: PUSH
73833: EMPTY
73834: LIST
73835: LIST
73836: PUSH
73837: LD_INT 1
73839: PUSH
73840: LD_INT 3
73842: PUSH
73843: EMPTY
73844: LIST
73845: LIST
73846: PUSH
73847: LD_INT 0
73849: PUSH
73850: LD_INT 3
73852: PUSH
73853: EMPTY
73854: LIST
73855: LIST
73856: PUSH
73857: LD_INT 1
73859: NEG
73860: PUSH
73861: LD_INT 2
73863: PUSH
73864: EMPTY
73865: LIST
73866: LIST
73867: PUSH
73868: LD_INT 3
73870: NEG
73871: PUSH
73872: LD_INT 2
73874: NEG
73875: PUSH
73876: EMPTY
73877: LIST
73878: LIST
73879: PUSH
73880: LD_INT 3
73882: NEG
73883: PUSH
73884: LD_INT 3
73886: NEG
73887: PUSH
73888: EMPTY
73889: LIST
73890: LIST
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: LIST
73899: LIST
73900: LIST
73901: LIST
73902: LIST
73903: LIST
73904: LIST
73905: LIST
73906: LIST
73907: LIST
73908: LIST
73909: LIST
73910: LIST
73911: LIST
73912: LIST
73913: LIST
73914: LIST
73915: LIST
73916: LIST
73917: LIST
73918: LIST
73919: LIST
73920: LIST
73921: LIST
73922: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73923: LD_ADDR_VAR 0 46
73927: PUSH
73928: LD_INT 0
73930: PUSH
73931: LD_INT 0
73933: PUSH
73934: EMPTY
73935: LIST
73936: LIST
73937: PUSH
73938: LD_INT 0
73940: PUSH
73941: LD_INT 1
73943: NEG
73944: PUSH
73945: EMPTY
73946: LIST
73947: LIST
73948: PUSH
73949: LD_INT 1
73951: PUSH
73952: LD_INT 0
73954: PUSH
73955: EMPTY
73956: LIST
73957: LIST
73958: PUSH
73959: LD_INT 1
73961: PUSH
73962: LD_INT 1
73964: PUSH
73965: EMPTY
73966: LIST
73967: LIST
73968: PUSH
73969: LD_INT 0
73971: PUSH
73972: LD_INT 1
73974: PUSH
73975: EMPTY
73976: LIST
73977: LIST
73978: PUSH
73979: LD_INT 1
73981: NEG
73982: PUSH
73983: LD_INT 0
73985: PUSH
73986: EMPTY
73987: LIST
73988: LIST
73989: PUSH
73990: LD_INT 1
73992: NEG
73993: PUSH
73994: LD_INT 1
73996: NEG
73997: PUSH
73998: EMPTY
73999: LIST
74000: LIST
74001: PUSH
74002: LD_INT 1
74004: NEG
74005: PUSH
74006: LD_INT 2
74008: NEG
74009: PUSH
74010: EMPTY
74011: LIST
74012: LIST
74013: PUSH
74014: LD_INT 0
74016: PUSH
74017: LD_INT 2
74019: NEG
74020: PUSH
74021: EMPTY
74022: LIST
74023: LIST
74024: PUSH
74025: LD_INT 1
74027: PUSH
74028: LD_INT 1
74030: NEG
74031: PUSH
74032: EMPTY
74033: LIST
74034: LIST
74035: PUSH
74036: LD_INT 2
74038: PUSH
74039: LD_INT 0
74041: PUSH
74042: EMPTY
74043: LIST
74044: LIST
74045: PUSH
74046: LD_INT 2
74048: PUSH
74049: LD_INT 1
74051: PUSH
74052: EMPTY
74053: LIST
74054: LIST
74055: PUSH
74056: LD_INT 1
74058: PUSH
74059: LD_INT 2
74061: PUSH
74062: EMPTY
74063: LIST
74064: LIST
74065: PUSH
74066: LD_INT 0
74068: PUSH
74069: LD_INT 2
74071: PUSH
74072: EMPTY
74073: LIST
74074: LIST
74075: PUSH
74076: LD_INT 1
74078: NEG
74079: PUSH
74080: LD_INT 1
74082: PUSH
74083: EMPTY
74084: LIST
74085: LIST
74086: PUSH
74087: LD_INT 2
74089: NEG
74090: PUSH
74091: LD_INT 0
74093: PUSH
74094: EMPTY
74095: LIST
74096: LIST
74097: PUSH
74098: LD_INT 2
74100: NEG
74101: PUSH
74102: LD_INT 1
74104: NEG
74105: PUSH
74106: EMPTY
74107: LIST
74108: LIST
74109: PUSH
74110: LD_INT 1
74112: NEG
74113: PUSH
74114: LD_INT 3
74116: NEG
74117: PUSH
74118: EMPTY
74119: LIST
74120: LIST
74121: PUSH
74122: LD_INT 0
74124: PUSH
74125: LD_INT 3
74127: NEG
74128: PUSH
74129: EMPTY
74130: LIST
74131: LIST
74132: PUSH
74133: LD_INT 1
74135: PUSH
74136: LD_INT 2
74138: NEG
74139: PUSH
74140: EMPTY
74141: LIST
74142: LIST
74143: PUSH
74144: LD_INT 2
74146: PUSH
74147: LD_INT 1
74149: NEG
74150: PUSH
74151: EMPTY
74152: LIST
74153: LIST
74154: PUSH
74155: LD_INT 3
74157: PUSH
74158: LD_INT 0
74160: PUSH
74161: EMPTY
74162: LIST
74163: LIST
74164: PUSH
74165: LD_INT 3
74167: PUSH
74168: LD_INT 1
74170: PUSH
74171: EMPTY
74172: LIST
74173: LIST
74174: PUSH
74175: LD_INT 1
74177: PUSH
74178: LD_INT 3
74180: PUSH
74181: EMPTY
74182: LIST
74183: LIST
74184: PUSH
74185: LD_INT 0
74187: PUSH
74188: LD_INT 3
74190: PUSH
74191: EMPTY
74192: LIST
74193: LIST
74194: PUSH
74195: LD_INT 1
74197: NEG
74198: PUSH
74199: LD_INT 2
74201: PUSH
74202: EMPTY
74203: LIST
74204: LIST
74205: PUSH
74206: LD_INT 2
74208: NEG
74209: PUSH
74210: LD_INT 1
74212: PUSH
74213: EMPTY
74214: LIST
74215: LIST
74216: PUSH
74217: LD_INT 3
74219: NEG
74220: PUSH
74221: LD_INT 0
74223: PUSH
74224: EMPTY
74225: LIST
74226: LIST
74227: PUSH
74228: LD_INT 3
74230: NEG
74231: PUSH
74232: LD_INT 1
74234: NEG
74235: PUSH
74236: EMPTY
74237: LIST
74238: LIST
74239: PUSH
74240: EMPTY
74241: LIST
74242: LIST
74243: LIST
74244: LIST
74245: LIST
74246: LIST
74247: LIST
74248: LIST
74249: LIST
74250: LIST
74251: LIST
74252: LIST
74253: LIST
74254: LIST
74255: LIST
74256: LIST
74257: LIST
74258: LIST
74259: LIST
74260: LIST
74261: LIST
74262: LIST
74263: LIST
74264: LIST
74265: LIST
74266: LIST
74267: LIST
74268: LIST
74269: LIST
74270: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74271: LD_ADDR_VAR 0 47
74275: PUSH
74276: LD_INT 0
74278: PUSH
74279: LD_INT 0
74281: PUSH
74282: EMPTY
74283: LIST
74284: LIST
74285: PUSH
74286: LD_INT 0
74288: PUSH
74289: LD_INT 1
74291: NEG
74292: PUSH
74293: EMPTY
74294: LIST
74295: LIST
74296: PUSH
74297: LD_INT 1
74299: PUSH
74300: LD_INT 0
74302: PUSH
74303: EMPTY
74304: LIST
74305: LIST
74306: PUSH
74307: LD_INT 1
74309: PUSH
74310: LD_INT 1
74312: PUSH
74313: EMPTY
74314: LIST
74315: LIST
74316: PUSH
74317: LD_INT 0
74319: PUSH
74320: LD_INT 1
74322: PUSH
74323: EMPTY
74324: LIST
74325: LIST
74326: PUSH
74327: LD_INT 1
74329: NEG
74330: PUSH
74331: LD_INT 0
74333: PUSH
74334: EMPTY
74335: LIST
74336: LIST
74337: PUSH
74338: LD_INT 1
74340: NEG
74341: PUSH
74342: LD_INT 1
74344: NEG
74345: PUSH
74346: EMPTY
74347: LIST
74348: LIST
74349: PUSH
74350: LD_INT 1
74352: NEG
74353: PUSH
74354: LD_INT 2
74356: NEG
74357: PUSH
74358: EMPTY
74359: LIST
74360: LIST
74361: PUSH
74362: LD_INT 0
74364: PUSH
74365: LD_INT 2
74367: NEG
74368: PUSH
74369: EMPTY
74370: LIST
74371: LIST
74372: PUSH
74373: LD_INT 1
74375: PUSH
74376: LD_INT 1
74378: NEG
74379: PUSH
74380: EMPTY
74381: LIST
74382: LIST
74383: PUSH
74384: LD_INT 2
74386: NEG
74387: PUSH
74388: LD_INT 1
74390: NEG
74391: PUSH
74392: EMPTY
74393: LIST
74394: LIST
74395: PUSH
74396: LD_INT 2
74398: NEG
74399: PUSH
74400: LD_INT 2
74402: NEG
74403: PUSH
74404: EMPTY
74405: LIST
74406: LIST
74407: PUSH
74408: EMPTY
74409: LIST
74410: LIST
74411: LIST
74412: LIST
74413: LIST
74414: LIST
74415: LIST
74416: LIST
74417: LIST
74418: LIST
74419: LIST
74420: LIST
74421: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
74422: LD_ADDR_VAR 0 48
74426: PUSH
74427: LD_INT 0
74429: PUSH
74430: LD_INT 0
74432: PUSH
74433: EMPTY
74434: LIST
74435: LIST
74436: PUSH
74437: LD_INT 0
74439: PUSH
74440: LD_INT 1
74442: NEG
74443: PUSH
74444: EMPTY
74445: LIST
74446: LIST
74447: PUSH
74448: LD_INT 1
74450: PUSH
74451: LD_INT 0
74453: PUSH
74454: EMPTY
74455: LIST
74456: LIST
74457: PUSH
74458: LD_INT 1
74460: PUSH
74461: LD_INT 1
74463: PUSH
74464: EMPTY
74465: LIST
74466: LIST
74467: PUSH
74468: LD_INT 0
74470: PUSH
74471: LD_INT 1
74473: PUSH
74474: EMPTY
74475: LIST
74476: LIST
74477: PUSH
74478: LD_INT 1
74480: NEG
74481: PUSH
74482: LD_INT 0
74484: PUSH
74485: EMPTY
74486: LIST
74487: LIST
74488: PUSH
74489: LD_INT 1
74491: NEG
74492: PUSH
74493: LD_INT 1
74495: NEG
74496: PUSH
74497: EMPTY
74498: LIST
74499: LIST
74500: PUSH
74501: LD_INT 1
74503: NEG
74504: PUSH
74505: LD_INT 2
74507: NEG
74508: PUSH
74509: EMPTY
74510: LIST
74511: LIST
74512: PUSH
74513: LD_INT 0
74515: PUSH
74516: LD_INT 2
74518: NEG
74519: PUSH
74520: EMPTY
74521: LIST
74522: LIST
74523: PUSH
74524: LD_INT 1
74526: PUSH
74527: LD_INT 1
74529: NEG
74530: PUSH
74531: EMPTY
74532: LIST
74533: LIST
74534: PUSH
74535: LD_INT 2
74537: PUSH
74538: LD_INT 0
74540: PUSH
74541: EMPTY
74542: LIST
74543: LIST
74544: PUSH
74545: LD_INT 2
74547: PUSH
74548: LD_INT 1
74550: PUSH
74551: EMPTY
74552: LIST
74553: LIST
74554: PUSH
74555: EMPTY
74556: LIST
74557: LIST
74558: LIST
74559: LIST
74560: LIST
74561: LIST
74562: LIST
74563: LIST
74564: LIST
74565: LIST
74566: LIST
74567: LIST
74568: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
74569: LD_ADDR_VAR 0 49
74573: PUSH
74574: LD_INT 0
74576: PUSH
74577: LD_INT 0
74579: PUSH
74580: EMPTY
74581: LIST
74582: LIST
74583: PUSH
74584: LD_INT 0
74586: PUSH
74587: LD_INT 1
74589: NEG
74590: PUSH
74591: EMPTY
74592: LIST
74593: LIST
74594: PUSH
74595: LD_INT 1
74597: PUSH
74598: LD_INT 0
74600: PUSH
74601: EMPTY
74602: LIST
74603: LIST
74604: PUSH
74605: LD_INT 1
74607: PUSH
74608: LD_INT 1
74610: PUSH
74611: EMPTY
74612: LIST
74613: LIST
74614: PUSH
74615: LD_INT 0
74617: PUSH
74618: LD_INT 1
74620: PUSH
74621: EMPTY
74622: LIST
74623: LIST
74624: PUSH
74625: LD_INT 1
74627: NEG
74628: PUSH
74629: LD_INT 0
74631: PUSH
74632: EMPTY
74633: LIST
74634: LIST
74635: PUSH
74636: LD_INT 1
74638: NEG
74639: PUSH
74640: LD_INT 1
74642: NEG
74643: PUSH
74644: EMPTY
74645: LIST
74646: LIST
74647: PUSH
74648: LD_INT 1
74650: PUSH
74651: LD_INT 1
74653: NEG
74654: PUSH
74655: EMPTY
74656: LIST
74657: LIST
74658: PUSH
74659: LD_INT 2
74661: PUSH
74662: LD_INT 0
74664: PUSH
74665: EMPTY
74666: LIST
74667: LIST
74668: PUSH
74669: LD_INT 2
74671: PUSH
74672: LD_INT 1
74674: PUSH
74675: EMPTY
74676: LIST
74677: LIST
74678: PUSH
74679: LD_INT 2
74681: PUSH
74682: LD_INT 2
74684: PUSH
74685: EMPTY
74686: LIST
74687: LIST
74688: PUSH
74689: LD_INT 1
74691: PUSH
74692: LD_INT 2
74694: PUSH
74695: EMPTY
74696: LIST
74697: LIST
74698: PUSH
74699: EMPTY
74700: LIST
74701: LIST
74702: LIST
74703: LIST
74704: LIST
74705: LIST
74706: LIST
74707: LIST
74708: LIST
74709: LIST
74710: LIST
74711: LIST
74712: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
74713: LD_ADDR_VAR 0 50
74717: PUSH
74718: LD_INT 0
74720: PUSH
74721: LD_INT 0
74723: PUSH
74724: EMPTY
74725: LIST
74726: LIST
74727: PUSH
74728: LD_INT 0
74730: PUSH
74731: LD_INT 1
74733: NEG
74734: PUSH
74735: EMPTY
74736: LIST
74737: LIST
74738: PUSH
74739: LD_INT 1
74741: PUSH
74742: LD_INT 0
74744: PUSH
74745: EMPTY
74746: LIST
74747: LIST
74748: PUSH
74749: LD_INT 1
74751: PUSH
74752: LD_INT 1
74754: PUSH
74755: EMPTY
74756: LIST
74757: LIST
74758: PUSH
74759: LD_INT 0
74761: PUSH
74762: LD_INT 1
74764: PUSH
74765: EMPTY
74766: LIST
74767: LIST
74768: PUSH
74769: LD_INT 1
74771: NEG
74772: PUSH
74773: LD_INT 0
74775: PUSH
74776: EMPTY
74777: LIST
74778: LIST
74779: PUSH
74780: LD_INT 1
74782: NEG
74783: PUSH
74784: LD_INT 1
74786: NEG
74787: PUSH
74788: EMPTY
74789: LIST
74790: LIST
74791: PUSH
74792: LD_INT 2
74794: PUSH
74795: LD_INT 1
74797: PUSH
74798: EMPTY
74799: LIST
74800: LIST
74801: PUSH
74802: LD_INT 2
74804: PUSH
74805: LD_INT 2
74807: PUSH
74808: EMPTY
74809: LIST
74810: LIST
74811: PUSH
74812: LD_INT 1
74814: PUSH
74815: LD_INT 2
74817: PUSH
74818: EMPTY
74819: LIST
74820: LIST
74821: PUSH
74822: LD_INT 0
74824: PUSH
74825: LD_INT 2
74827: PUSH
74828: EMPTY
74829: LIST
74830: LIST
74831: PUSH
74832: LD_INT 1
74834: NEG
74835: PUSH
74836: LD_INT 1
74838: PUSH
74839: EMPTY
74840: LIST
74841: LIST
74842: PUSH
74843: EMPTY
74844: LIST
74845: LIST
74846: LIST
74847: LIST
74848: LIST
74849: LIST
74850: LIST
74851: LIST
74852: LIST
74853: LIST
74854: LIST
74855: LIST
74856: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
74857: LD_ADDR_VAR 0 51
74861: PUSH
74862: LD_INT 0
74864: PUSH
74865: LD_INT 0
74867: PUSH
74868: EMPTY
74869: LIST
74870: LIST
74871: PUSH
74872: LD_INT 0
74874: PUSH
74875: LD_INT 1
74877: NEG
74878: PUSH
74879: EMPTY
74880: LIST
74881: LIST
74882: PUSH
74883: LD_INT 1
74885: PUSH
74886: LD_INT 0
74888: PUSH
74889: EMPTY
74890: LIST
74891: LIST
74892: PUSH
74893: LD_INT 1
74895: PUSH
74896: LD_INT 1
74898: PUSH
74899: EMPTY
74900: LIST
74901: LIST
74902: PUSH
74903: LD_INT 0
74905: PUSH
74906: LD_INT 1
74908: PUSH
74909: EMPTY
74910: LIST
74911: LIST
74912: PUSH
74913: LD_INT 1
74915: NEG
74916: PUSH
74917: LD_INT 0
74919: PUSH
74920: EMPTY
74921: LIST
74922: LIST
74923: PUSH
74924: LD_INT 1
74926: NEG
74927: PUSH
74928: LD_INT 1
74930: NEG
74931: PUSH
74932: EMPTY
74933: LIST
74934: LIST
74935: PUSH
74936: LD_INT 1
74938: PUSH
74939: LD_INT 2
74941: PUSH
74942: EMPTY
74943: LIST
74944: LIST
74945: PUSH
74946: LD_INT 0
74948: PUSH
74949: LD_INT 2
74951: PUSH
74952: EMPTY
74953: LIST
74954: LIST
74955: PUSH
74956: LD_INT 1
74958: NEG
74959: PUSH
74960: LD_INT 1
74962: PUSH
74963: EMPTY
74964: LIST
74965: LIST
74966: PUSH
74967: LD_INT 2
74969: NEG
74970: PUSH
74971: LD_INT 0
74973: PUSH
74974: EMPTY
74975: LIST
74976: LIST
74977: PUSH
74978: LD_INT 2
74980: NEG
74981: PUSH
74982: LD_INT 1
74984: NEG
74985: PUSH
74986: EMPTY
74987: LIST
74988: LIST
74989: PUSH
74990: EMPTY
74991: LIST
74992: LIST
74993: LIST
74994: LIST
74995: LIST
74996: LIST
74997: LIST
74998: LIST
74999: LIST
75000: LIST
75001: LIST
75002: LIST
75003: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75004: LD_ADDR_VAR 0 52
75008: PUSH
75009: LD_INT 0
75011: PUSH
75012: LD_INT 0
75014: PUSH
75015: EMPTY
75016: LIST
75017: LIST
75018: PUSH
75019: LD_INT 0
75021: PUSH
75022: LD_INT 1
75024: NEG
75025: PUSH
75026: EMPTY
75027: LIST
75028: LIST
75029: PUSH
75030: LD_INT 1
75032: PUSH
75033: LD_INT 0
75035: PUSH
75036: EMPTY
75037: LIST
75038: LIST
75039: PUSH
75040: LD_INT 1
75042: PUSH
75043: LD_INT 1
75045: PUSH
75046: EMPTY
75047: LIST
75048: LIST
75049: PUSH
75050: LD_INT 0
75052: PUSH
75053: LD_INT 1
75055: PUSH
75056: EMPTY
75057: LIST
75058: LIST
75059: PUSH
75060: LD_INT 1
75062: NEG
75063: PUSH
75064: LD_INT 0
75066: PUSH
75067: EMPTY
75068: LIST
75069: LIST
75070: PUSH
75071: LD_INT 1
75073: NEG
75074: PUSH
75075: LD_INT 1
75077: NEG
75078: PUSH
75079: EMPTY
75080: LIST
75081: LIST
75082: PUSH
75083: LD_INT 1
75085: NEG
75086: PUSH
75087: LD_INT 2
75089: NEG
75090: PUSH
75091: EMPTY
75092: LIST
75093: LIST
75094: PUSH
75095: LD_INT 1
75097: NEG
75098: PUSH
75099: LD_INT 1
75101: PUSH
75102: EMPTY
75103: LIST
75104: LIST
75105: PUSH
75106: LD_INT 2
75108: NEG
75109: PUSH
75110: LD_INT 0
75112: PUSH
75113: EMPTY
75114: LIST
75115: LIST
75116: PUSH
75117: LD_INT 2
75119: NEG
75120: PUSH
75121: LD_INT 1
75123: NEG
75124: PUSH
75125: EMPTY
75126: LIST
75127: LIST
75128: PUSH
75129: LD_INT 2
75131: NEG
75132: PUSH
75133: LD_INT 2
75135: NEG
75136: PUSH
75137: EMPTY
75138: LIST
75139: LIST
75140: PUSH
75141: EMPTY
75142: LIST
75143: LIST
75144: LIST
75145: LIST
75146: LIST
75147: LIST
75148: LIST
75149: LIST
75150: LIST
75151: LIST
75152: LIST
75153: LIST
75154: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75155: LD_ADDR_VAR 0 53
75159: PUSH
75160: LD_INT 0
75162: PUSH
75163: LD_INT 0
75165: PUSH
75166: EMPTY
75167: LIST
75168: LIST
75169: PUSH
75170: LD_INT 0
75172: PUSH
75173: LD_INT 1
75175: NEG
75176: PUSH
75177: EMPTY
75178: LIST
75179: LIST
75180: PUSH
75181: LD_INT 1
75183: PUSH
75184: LD_INT 0
75186: PUSH
75187: EMPTY
75188: LIST
75189: LIST
75190: PUSH
75191: LD_INT 1
75193: PUSH
75194: LD_INT 1
75196: PUSH
75197: EMPTY
75198: LIST
75199: LIST
75200: PUSH
75201: LD_INT 0
75203: PUSH
75204: LD_INT 1
75206: PUSH
75207: EMPTY
75208: LIST
75209: LIST
75210: PUSH
75211: LD_INT 1
75213: NEG
75214: PUSH
75215: LD_INT 0
75217: PUSH
75218: EMPTY
75219: LIST
75220: LIST
75221: PUSH
75222: LD_INT 1
75224: NEG
75225: PUSH
75226: LD_INT 1
75228: NEG
75229: PUSH
75230: EMPTY
75231: LIST
75232: LIST
75233: PUSH
75234: LD_INT 1
75236: NEG
75237: PUSH
75238: LD_INT 2
75240: NEG
75241: PUSH
75242: EMPTY
75243: LIST
75244: LIST
75245: PUSH
75246: LD_INT 0
75248: PUSH
75249: LD_INT 2
75251: NEG
75252: PUSH
75253: EMPTY
75254: LIST
75255: LIST
75256: PUSH
75257: LD_INT 1
75259: PUSH
75260: LD_INT 1
75262: NEG
75263: PUSH
75264: EMPTY
75265: LIST
75266: LIST
75267: PUSH
75268: LD_INT 2
75270: PUSH
75271: LD_INT 0
75273: PUSH
75274: EMPTY
75275: LIST
75276: LIST
75277: PUSH
75278: LD_INT 2
75280: PUSH
75281: LD_INT 1
75283: PUSH
75284: EMPTY
75285: LIST
75286: LIST
75287: PUSH
75288: LD_INT 2
75290: PUSH
75291: LD_INT 2
75293: PUSH
75294: EMPTY
75295: LIST
75296: LIST
75297: PUSH
75298: LD_INT 1
75300: PUSH
75301: LD_INT 2
75303: PUSH
75304: EMPTY
75305: LIST
75306: LIST
75307: PUSH
75308: LD_INT 0
75310: PUSH
75311: LD_INT 2
75313: PUSH
75314: EMPTY
75315: LIST
75316: LIST
75317: PUSH
75318: LD_INT 1
75320: NEG
75321: PUSH
75322: LD_INT 1
75324: PUSH
75325: EMPTY
75326: LIST
75327: LIST
75328: PUSH
75329: LD_INT 2
75331: NEG
75332: PUSH
75333: LD_INT 0
75335: PUSH
75336: EMPTY
75337: LIST
75338: LIST
75339: PUSH
75340: LD_INT 2
75342: NEG
75343: PUSH
75344: LD_INT 1
75346: NEG
75347: PUSH
75348: EMPTY
75349: LIST
75350: LIST
75351: PUSH
75352: LD_INT 2
75354: NEG
75355: PUSH
75356: LD_INT 2
75358: NEG
75359: PUSH
75360: EMPTY
75361: LIST
75362: LIST
75363: PUSH
75364: EMPTY
75365: LIST
75366: LIST
75367: LIST
75368: LIST
75369: LIST
75370: LIST
75371: LIST
75372: LIST
75373: LIST
75374: LIST
75375: LIST
75376: LIST
75377: LIST
75378: LIST
75379: LIST
75380: LIST
75381: LIST
75382: LIST
75383: LIST
75384: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75385: LD_ADDR_VAR 0 54
75389: PUSH
75390: LD_INT 0
75392: PUSH
75393: LD_INT 0
75395: PUSH
75396: EMPTY
75397: LIST
75398: LIST
75399: PUSH
75400: LD_INT 0
75402: PUSH
75403: LD_INT 1
75405: NEG
75406: PUSH
75407: EMPTY
75408: LIST
75409: LIST
75410: PUSH
75411: LD_INT 1
75413: PUSH
75414: LD_INT 0
75416: PUSH
75417: EMPTY
75418: LIST
75419: LIST
75420: PUSH
75421: LD_INT 1
75423: PUSH
75424: LD_INT 1
75426: PUSH
75427: EMPTY
75428: LIST
75429: LIST
75430: PUSH
75431: LD_INT 0
75433: PUSH
75434: LD_INT 1
75436: PUSH
75437: EMPTY
75438: LIST
75439: LIST
75440: PUSH
75441: LD_INT 1
75443: NEG
75444: PUSH
75445: LD_INT 0
75447: PUSH
75448: EMPTY
75449: LIST
75450: LIST
75451: PUSH
75452: LD_INT 1
75454: NEG
75455: PUSH
75456: LD_INT 1
75458: NEG
75459: PUSH
75460: EMPTY
75461: LIST
75462: LIST
75463: PUSH
75464: LD_INT 1
75466: NEG
75467: PUSH
75468: LD_INT 2
75470: NEG
75471: PUSH
75472: EMPTY
75473: LIST
75474: LIST
75475: PUSH
75476: LD_INT 0
75478: PUSH
75479: LD_INT 2
75481: NEG
75482: PUSH
75483: EMPTY
75484: LIST
75485: LIST
75486: PUSH
75487: LD_INT 1
75489: PUSH
75490: LD_INT 1
75492: NEG
75493: PUSH
75494: EMPTY
75495: LIST
75496: LIST
75497: PUSH
75498: LD_INT 2
75500: PUSH
75501: LD_INT 0
75503: PUSH
75504: EMPTY
75505: LIST
75506: LIST
75507: PUSH
75508: LD_INT 2
75510: PUSH
75511: LD_INT 1
75513: PUSH
75514: EMPTY
75515: LIST
75516: LIST
75517: PUSH
75518: LD_INT 2
75520: PUSH
75521: LD_INT 2
75523: PUSH
75524: EMPTY
75525: LIST
75526: LIST
75527: PUSH
75528: LD_INT 1
75530: PUSH
75531: LD_INT 2
75533: PUSH
75534: EMPTY
75535: LIST
75536: LIST
75537: PUSH
75538: LD_INT 0
75540: PUSH
75541: LD_INT 2
75543: PUSH
75544: EMPTY
75545: LIST
75546: LIST
75547: PUSH
75548: LD_INT 1
75550: NEG
75551: PUSH
75552: LD_INT 1
75554: PUSH
75555: EMPTY
75556: LIST
75557: LIST
75558: PUSH
75559: LD_INT 2
75561: NEG
75562: PUSH
75563: LD_INT 0
75565: PUSH
75566: EMPTY
75567: LIST
75568: LIST
75569: PUSH
75570: LD_INT 2
75572: NEG
75573: PUSH
75574: LD_INT 1
75576: NEG
75577: PUSH
75578: EMPTY
75579: LIST
75580: LIST
75581: PUSH
75582: LD_INT 2
75584: NEG
75585: PUSH
75586: LD_INT 2
75588: NEG
75589: PUSH
75590: EMPTY
75591: LIST
75592: LIST
75593: PUSH
75594: EMPTY
75595: LIST
75596: LIST
75597: LIST
75598: LIST
75599: LIST
75600: LIST
75601: LIST
75602: LIST
75603: LIST
75604: LIST
75605: LIST
75606: LIST
75607: LIST
75608: LIST
75609: LIST
75610: LIST
75611: LIST
75612: LIST
75613: LIST
75614: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75615: LD_ADDR_VAR 0 55
75619: PUSH
75620: LD_INT 0
75622: PUSH
75623: LD_INT 0
75625: PUSH
75626: EMPTY
75627: LIST
75628: LIST
75629: PUSH
75630: LD_INT 0
75632: PUSH
75633: LD_INT 1
75635: NEG
75636: PUSH
75637: EMPTY
75638: LIST
75639: LIST
75640: PUSH
75641: LD_INT 1
75643: PUSH
75644: LD_INT 0
75646: PUSH
75647: EMPTY
75648: LIST
75649: LIST
75650: PUSH
75651: LD_INT 1
75653: PUSH
75654: LD_INT 1
75656: PUSH
75657: EMPTY
75658: LIST
75659: LIST
75660: PUSH
75661: LD_INT 0
75663: PUSH
75664: LD_INT 1
75666: PUSH
75667: EMPTY
75668: LIST
75669: LIST
75670: PUSH
75671: LD_INT 1
75673: NEG
75674: PUSH
75675: LD_INT 0
75677: PUSH
75678: EMPTY
75679: LIST
75680: LIST
75681: PUSH
75682: LD_INT 1
75684: NEG
75685: PUSH
75686: LD_INT 1
75688: NEG
75689: PUSH
75690: EMPTY
75691: LIST
75692: LIST
75693: PUSH
75694: LD_INT 1
75696: NEG
75697: PUSH
75698: LD_INT 2
75700: NEG
75701: PUSH
75702: EMPTY
75703: LIST
75704: LIST
75705: PUSH
75706: LD_INT 0
75708: PUSH
75709: LD_INT 2
75711: NEG
75712: PUSH
75713: EMPTY
75714: LIST
75715: LIST
75716: PUSH
75717: LD_INT 1
75719: PUSH
75720: LD_INT 1
75722: NEG
75723: PUSH
75724: EMPTY
75725: LIST
75726: LIST
75727: PUSH
75728: LD_INT 2
75730: PUSH
75731: LD_INT 0
75733: PUSH
75734: EMPTY
75735: LIST
75736: LIST
75737: PUSH
75738: LD_INT 2
75740: PUSH
75741: LD_INT 1
75743: PUSH
75744: EMPTY
75745: LIST
75746: LIST
75747: PUSH
75748: LD_INT 2
75750: PUSH
75751: LD_INT 2
75753: PUSH
75754: EMPTY
75755: LIST
75756: LIST
75757: PUSH
75758: LD_INT 1
75760: PUSH
75761: LD_INT 2
75763: PUSH
75764: EMPTY
75765: LIST
75766: LIST
75767: PUSH
75768: LD_INT 0
75770: PUSH
75771: LD_INT 2
75773: PUSH
75774: EMPTY
75775: LIST
75776: LIST
75777: PUSH
75778: LD_INT 1
75780: NEG
75781: PUSH
75782: LD_INT 1
75784: PUSH
75785: EMPTY
75786: LIST
75787: LIST
75788: PUSH
75789: LD_INT 2
75791: NEG
75792: PUSH
75793: LD_INT 0
75795: PUSH
75796: EMPTY
75797: LIST
75798: LIST
75799: PUSH
75800: LD_INT 2
75802: NEG
75803: PUSH
75804: LD_INT 1
75806: NEG
75807: PUSH
75808: EMPTY
75809: LIST
75810: LIST
75811: PUSH
75812: LD_INT 2
75814: NEG
75815: PUSH
75816: LD_INT 2
75818: NEG
75819: PUSH
75820: EMPTY
75821: LIST
75822: LIST
75823: PUSH
75824: EMPTY
75825: LIST
75826: LIST
75827: LIST
75828: LIST
75829: LIST
75830: LIST
75831: LIST
75832: LIST
75833: LIST
75834: LIST
75835: LIST
75836: LIST
75837: LIST
75838: LIST
75839: LIST
75840: LIST
75841: LIST
75842: LIST
75843: LIST
75844: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75845: LD_ADDR_VAR 0 56
75849: PUSH
75850: LD_INT 0
75852: PUSH
75853: LD_INT 0
75855: PUSH
75856: EMPTY
75857: LIST
75858: LIST
75859: PUSH
75860: LD_INT 0
75862: PUSH
75863: LD_INT 1
75865: NEG
75866: PUSH
75867: EMPTY
75868: LIST
75869: LIST
75870: PUSH
75871: LD_INT 1
75873: PUSH
75874: LD_INT 0
75876: PUSH
75877: EMPTY
75878: LIST
75879: LIST
75880: PUSH
75881: LD_INT 1
75883: PUSH
75884: LD_INT 1
75886: PUSH
75887: EMPTY
75888: LIST
75889: LIST
75890: PUSH
75891: LD_INT 0
75893: PUSH
75894: LD_INT 1
75896: PUSH
75897: EMPTY
75898: LIST
75899: LIST
75900: PUSH
75901: LD_INT 1
75903: NEG
75904: PUSH
75905: LD_INT 0
75907: PUSH
75908: EMPTY
75909: LIST
75910: LIST
75911: PUSH
75912: LD_INT 1
75914: NEG
75915: PUSH
75916: LD_INT 1
75918: NEG
75919: PUSH
75920: EMPTY
75921: LIST
75922: LIST
75923: PUSH
75924: LD_INT 1
75926: NEG
75927: PUSH
75928: LD_INT 2
75930: NEG
75931: PUSH
75932: EMPTY
75933: LIST
75934: LIST
75935: PUSH
75936: LD_INT 0
75938: PUSH
75939: LD_INT 2
75941: NEG
75942: PUSH
75943: EMPTY
75944: LIST
75945: LIST
75946: PUSH
75947: LD_INT 1
75949: PUSH
75950: LD_INT 1
75952: NEG
75953: PUSH
75954: EMPTY
75955: LIST
75956: LIST
75957: PUSH
75958: LD_INT 2
75960: PUSH
75961: LD_INT 0
75963: PUSH
75964: EMPTY
75965: LIST
75966: LIST
75967: PUSH
75968: LD_INT 2
75970: PUSH
75971: LD_INT 1
75973: PUSH
75974: EMPTY
75975: LIST
75976: LIST
75977: PUSH
75978: LD_INT 2
75980: PUSH
75981: LD_INT 2
75983: PUSH
75984: EMPTY
75985: LIST
75986: LIST
75987: PUSH
75988: LD_INT 1
75990: PUSH
75991: LD_INT 2
75993: PUSH
75994: EMPTY
75995: LIST
75996: LIST
75997: PUSH
75998: LD_INT 0
76000: PUSH
76001: LD_INT 2
76003: PUSH
76004: EMPTY
76005: LIST
76006: LIST
76007: PUSH
76008: LD_INT 1
76010: NEG
76011: PUSH
76012: LD_INT 1
76014: PUSH
76015: EMPTY
76016: LIST
76017: LIST
76018: PUSH
76019: LD_INT 2
76021: NEG
76022: PUSH
76023: LD_INT 0
76025: PUSH
76026: EMPTY
76027: LIST
76028: LIST
76029: PUSH
76030: LD_INT 2
76032: NEG
76033: PUSH
76034: LD_INT 1
76036: NEG
76037: PUSH
76038: EMPTY
76039: LIST
76040: LIST
76041: PUSH
76042: LD_INT 2
76044: NEG
76045: PUSH
76046: LD_INT 2
76048: NEG
76049: PUSH
76050: EMPTY
76051: LIST
76052: LIST
76053: PUSH
76054: EMPTY
76055: LIST
76056: LIST
76057: LIST
76058: LIST
76059: LIST
76060: LIST
76061: LIST
76062: LIST
76063: LIST
76064: LIST
76065: LIST
76066: LIST
76067: LIST
76068: LIST
76069: LIST
76070: LIST
76071: LIST
76072: LIST
76073: LIST
76074: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
76075: LD_ADDR_VAR 0 57
76079: PUSH
76080: LD_INT 0
76082: PUSH
76083: LD_INT 0
76085: PUSH
76086: EMPTY
76087: LIST
76088: LIST
76089: PUSH
76090: LD_INT 0
76092: PUSH
76093: LD_INT 1
76095: NEG
76096: PUSH
76097: EMPTY
76098: LIST
76099: LIST
76100: PUSH
76101: LD_INT 1
76103: PUSH
76104: LD_INT 0
76106: PUSH
76107: EMPTY
76108: LIST
76109: LIST
76110: PUSH
76111: LD_INT 1
76113: PUSH
76114: LD_INT 1
76116: PUSH
76117: EMPTY
76118: LIST
76119: LIST
76120: PUSH
76121: LD_INT 0
76123: PUSH
76124: LD_INT 1
76126: PUSH
76127: EMPTY
76128: LIST
76129: LIST
76130: PUSH
76131: LD_INT 1
76133: NEG
76134: PUSH
76135: LD_INT 0
76137: PUSH
76138: EMPTY
76139: LIST
76140: LIST
76141: PUSH
76142: LD_INT 1
76144: NEG
76145: PUSH
76146: LD_INT 1
76148: NEG
76149: PUSH
76150: EMPTY
76151: LIST
76152: LIST
76153: PUSH
76154: LD_INT 1
76156: NEG
76157: PUSH
76158: LD_INT 2
76160: NEG
76161: PUSH
76162: EMPTY
76163: LIST
76164: LIST
76165: PUSH
76166: LD_INT 0
76168: PUSH
76169: LD_INT 2
76171: NEG
76172: PUSH
76173: EMPTY
76174: LIST
76175: LIST
76176: PUSH
76177: LD_INT 1
76179: PUSH
76180: LD_INT 1
76182: NEG
76183: PUSH
76184: EMPTY
76185: LIST
76186: LIST
76187: PUSH
76188: LD_INT 2
76190: PUSH
76191: LD_INT 0
76193: PUSH
76194: EMPTY
76195: LIST
76196: LIST
76197: PUSH
76198: LD_INT 2
76200: PUSH
76201: LD_INT 1
76203: PUSH
76204: EMPTY
76205: LIST
76206: LIST
76207: PUSH
76208: LD_INT 2
76210: PUSH
76211: LD_INT 2
76213: PUSH
76214: EMPTY
76215: LIST
76216: LIST
76217: PUSH
76218: LD_INT 1
76220: PUSH
76221: LD_INT 2
76223: PUSH
76224: EMPTY
76225: LIST
76226: LIST
76227: PUSH
76228: LD_INT 0
76230: PUSH
76231: LD_INT 2
76233: PUSH
76234: EMPTY
76235: LIST
76236: LIST
76237: PUSH
76238: LD_INT 1
76240: NEG
76241: PUSH
76242: LD_INT 1
76244: PUSH
76245: EMPTY
76246: LIST
76247: LIST
76248: PUSH
76249: LD_INT 2
76251: NEG
76252: PUSH
76253: LD_INT 0
76255: PUSH
76256: EMPTY
76257: LIST
76258: LIST
76259: PUSH
76260: LD_INT 2
76262: NEG
76263: PUSH
76264: LD_INT 1
76266: NEG
76267: PUSH
76268: EMPTY
76269: LIST
76270: LIST
76271: PUSH
76272: LD_INT 2
76274: NEG
76275: PUSH
76276: LD_INT 2
76278: NEG
76279: PUSH
76280: EMPTY
76281: LIST
76282: LIST
76283: PUSH
76284: EMPTY
76285: LIST
76286: LIST
76287: LIST
76288: LIST
76289: LIST
76290: LIST
76291: LIST
76292: LIST
76293: LIST
76294: LIST
76295: LIST
76296: LIST
76297: LIST
76298: LIST
76299: LIST
76300: LIST
76301: LIST
76302: LIST
76303: LIST
76304: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
76305: LD_ADDR_VAR 0 58
76309: PUSH
76310: LD_INT 0
76312: PUSH
76313: LD_INT 0
76315: PUSH
76316: EMPTY
76317: LIST
76318: LIST
76319: PUSH
76320: LD_INT 0
76322: PUSH
76323: LD_INT 1
76325: NEG
76326: PUSH
76327: EMPTY
76328: LIST
76329: LIST
76330: PUSH
76331: LD_INT 1
76333: PUSH
76334: LD_INT 0
76336: PUSH
76337: EMPTY
76338: LIST
76339: LIST
76340: PUSH
76341: LD_INT 1
76343: PUSH
76344: LD_INT 1
76346: PUSH
76347: EMPTY
76348: LIST
76349: LIST
76350: PUSH
76351: LD_INT 0
76353: PUSH
76354: LD_INT 1
76356: PUSH
76357: EMPTY
76358: LIST
76359: LIST
76360: PUSH
76361: LD_INT 1
76363: NEG
76364: PUSH
76365: LD_INT 0
76367: PUSH
76368: EMPTY
76369: LIST
76370: LIST
76371: PUSH
76372: LD_INT 1
76374: NEG
76375: PUSH
76376: LD_INT 1
76378: NEG
76379: PUSH
76380: EMPTY
76381: LIST
76382: LIST
76383: PUSH
76384: LD_INT 1
76386: NEG
76387: PUSH
76388: LD_INT 2
76390: NEG
76391: PUSH
76392: EMPTY
76393: LIST
76394: LIST
76395: PUSH
76396: LD_INT 0
76398: PUSH
76399: LD_INT 2
76401: NEG
76402: PUSH
76403: EMPTY
76404: LIST
76405: LIST
76406: PUSH
76407: LD_INT 1
76409: PUSH
76410: LD_INT 1
76412: NEG
76413: PUSH
76414: EMPTY
76415: LIST
76416: LIST
76417: PUSH
76418: LD_INT 2
76420: PUSH
76421: LD_INT 0
76423: PUSH
76424: EMPTY
76425: LIST
76426: LIST
76427: PUSH
76428: LD_INT 2
76430: PUSH
76431: LD_INT 1
76433: PUSH
76434: EMPTY
76435: LIST
76436: LIST
76437: PUSH
76438: LD_INT 2
76440: PUSH
76441: LD_INT 2
76443: PUSH
76444: EMPTY
76445: LIST
76446: LIST
76447: PUSH
76448: LD_INT 1
76450: PUSH
76451: LD_INT 2
76453: PUSH
76454: EMPTY
76455: LIST
76456: LIST
76457: PUSH
76458: LD_INT 0
76460: PUSH
76461: LD_INT 2
76463: PUSH
76464: EMPTY
76465: LIST
76466: LIST
76467: PUSH
76468: LD_INT 1
76470: NEG
76471: PUSH
76472: LD_INT 1
76474: PUSH
76475: EMPTY
76476: LIST
76477: LIST
76478: PUSH
76479: LD_INT 2
76481: NEG
76482: PUSH
76483: LD_INT 0
76485: PUSH
76486: EMPTY
76487: LIST
76488: LIST
76489: PUSH
76490: LD_INT 2
76492: NEG
76493: PUSH
76494: LD_INT 1
76496: NEG
76497: PUSH
76498: EMPTY
76499: LIST
76500: LIST
76501: PUSH
76502: LD_INT 2
76504: NEG
76505: PUSH
76506: LD_INT 2
76508: NEG
76509: PUSH
76510: EMPTY
76511: LIST
76512: LIST
76513: PUSH
76514: EMPTY
76515: LIST
76516: LIST
76517: LIST
76518: LIST
76519: LIST
76520: LIST
76521: LIST
76522: LIST
76523: LIST
76524: LIST
76525: LIST
76526: LIST
76527: LIST
76528: LIST
76529: LIST
76530: LIST
76531: LIST
76532: LIST
76533: LIST
76534: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
76535: LD_ADDR_VAR 0 59
76539: PUSH
76540: LD_INT 0
76542: PUSH
76543: LD_INT 0
76545: PUSH
76546: EMPTY
76547: LIST
76548: LIST
76549: PUSH
76550: LD_INT 0
76552: PUSH
76553: LD_INT 1
76555: NEG
76556: PUSH
76557: EMPTY
76558: LIST
76559: LIST
76560: PUSH
76561: LD_INT 1
76563: PUSH
76564: LD_INT 0
76566: PUSH
76567: EMPTY
76568: LIST
76569: LIST
76570: PUSH
76571: LD_INT 1
76573: PUSH
76574: LD_INT 1
76576: PUSH
76577: EMPTY
76578: LIST
76579: LIST
76580: PUSH
76581: LD_INT 0
76583: PUSH
76584: LD_INT 1
76586: PUSH
76587: EMPTY
76588: LIST
76589: LIST
76590: PUSH
76591: LD_INT 1
76593: NEG
76594: PUSH
76595: LD_INT 0
76597: PUSH
76598: EMPTY
76599: LIST
76600: LIST
76601: PUSH
76602: LD_INT 1
76604: NEG
76605: PUSH
76606: LD_INT 1
76608: NEG
76609: PUSH
76610: EMPTY
76611: LIST
76612: LIST
76613: PUSH
76614: EMPTY
76615: LIST
76616: LIST
76617: LIST
76618: LIST
76619: LIST
76620: LIST
76621: LIST
76622: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
76623: LD_ADDR_VAR 0 60
76627: PUSH
76628: LD_INT 0
76630: PUSH
76631: LD_INT 0
76633: PUSH
76634: EMPTY
76635: LIST
76636: LIST
76637: PUSH
76638: LD_INT 0
76640: PUSH
76641: LD_INT 1
76643: NEG
76644: PUSH
76645: EMPTY
76646: LIST
76647: LIST
76648: PUSH
76649: LD_INT 1
76651: PUSH
76652: LD_INT 0
76654: PUSH
76655: EMPTY
76656: LIST
76657: LIST
76658: PUSH
76659: LD_INT 1
76661: PUSH
76662: LD_INT 1
76664: PUSH
76665: EMPTY
76666: LIST
76667: LIST
76668: PUSH
76669: LD_INT 0
76671: PUSH
76672: LD_INT 1
76674: PUSH
76675: EMPTY
76676: LIST
76677: LIST
76678: PUSH
76679: LD_INT 1
76681: NEG
76682: PUSH
76683: LD_INT 0
76685: PUSH
76686: EMPTY
76687: LIST
76688: LIST
76689: PUSH
76690: LD_INT 1
76692: NEG
76693: PUSH
76694: LD_INT 1
76696: NEG
76697: PUSH
76698: EMPTY
76699: LIST
76700: LIST
76701: PUSH
76702: EMPTY
76703: LIST
76704: LIST
76705: LIST
76706: LIST
76707: LIST
76708: LIST
76709: LIST
76710: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
76711: LD_ADDR_VAR 0 61
76715: PUSH
76716: LD_INT 0
76718: PUSH
76719: LD_INT 0
76721: PUSH
76722: EMPTY
76723: LIST
76724: LIST
76725: PUSH
76726: LD_INT 0
76728: PUSH
76729: LD_INT 1
76731: NEG
76732: PUSH
76733: EMPTY
76734: LIST
76735: LIST
76736: PUSH
76737: LD_INT 1
76739: PUSH
76740: LD_INT 0
76742: PUSH
76743: EMPTY
76744: LIST
76745: LIST
76746: PUSH
76747: LD_INT 1
76749: PUSH
76750: LD_INT 1
76752: PUSH
76753: EMPTY
76754: LIST
76755: LIST
76756: PUSH
76757: LD_INT 0
76759: PUSH
76760: LD_INT 1
76762: PUSH
76763: EMPTY
76764: LIST
76765: LIST
76766: PUSH
76767: LD_INT 1
76769: NEG
76770: PUSH
76771: LD_INT 0
76773: PUSH
76774: EMPTY
76775: LIST
76776: LIST
76777: PUSH
76778: LD_INT 1
76780: NEG
76781: PUSH
76782: LD_INT 1
76784: NEG
76785: PUSH
76786: EMPTY
76787: LIST
76788: LIST
76789: PUSH
76790: EMPTY
76791: LIST
76792: LIST
76793: LIST
76794: LIST
76795: LIST
76796: LIST
76797: LIST
76798: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
76799: LD_ADDR_VAR 0 62
76803: PUSH
76804: LD_INT 0
76806: PUSH
76807: LD_INT 0
76809: PUSH
76810: EMPTY
76811: LIST
76812: LIST
76813: PUSH
76814: LD_INT 0
76816: PUSH
76817: LD_INT 1
76819: NEG
76820: PUSH
76821: EMPTY
76822: LIST
76823: LIST
76824: PUSH
76825: LD_INT 1
76827: PUSH
76828: LD_INT 0
76830: PUSH
76831: EMPTY
76832: LIST
76833: LIST
76834: PUSH
76835: LD_INT 1
76837: PUSH
76838: LD_INT 1
76840: PUSH
76841: EMPTY
76842: LIST
76843: LIST
76844: PUSH
76845: LD_INT 0
76847: PUSH
76848: LD_INT 1
76850: PUSH
76851: EMPTY
76852: LIST
76853: LIST
76854: PUSH
76855: LD_INT 1
76857: NEG
76858: PUSH
76859: LD_INT 0
76861: PUSH
76862: EMPTY
76863: LIST
76864: LIST
76865: PUSH
76866: LD_INT 1
76868: NEG
76869: PUSH
76870: LD_INT 1
76872: NEG
76873: PUSH
76874: EMPTY
76875: LIST
76876: LIST
76877: PUSH
76878: EMPTY
76879: LIST
76880: LIST
76881: LIST
76882: LIST
76883: LIST
76884: LIST
76885: LIST
76886: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
76887: LD_ADDR_VAR 0 63
76891: PUSH
76892: LD_INT 0
76894: PUSH
76895: LD_INT 0
76897: PUSH
76898: EMPTY
76899: LIST
76900: LIST
76901: PUSH
76902: LD_INT 0
76904: PUSH
76905: LD_INT 1
76907: NEG
76908: PUSH
76909: EMPTY
76910: LIST
76911: LIST
76912: PUSH
76913: LD_INT 1
76915: PUSH
76916: LD_INT 0
76918: PUSH
76919: EMPTY
76920: LIST
76921: LIST
76922: PUSH
76923: LD_INT 1
76925: PUSH
76926: LD_INT 1
76928: PUSH
76929: EMPTY
76930: LIST
76931: LIST
76932: PUSH
76933: LD_INT 0
76935: PUSH
76936: LD_INT 1
76938: PUSH
76939: EMPTY
76940: LIST
76941: LIST
76942: PUSH
76943: LD_INT 1
76945: NEG
76946: PUSH
76947: LD_INT 0
76949: PUSH
76950: EMPTY
76951: LIST
76952: LIST
76953: PUSH
76954: LD_INT 1
76956: NEG
76957: PUSH
76958: LD_INT 1
76960: NEG
76961: PUSH
76962: EMPTY
76963: LIST
76964: LIST
76965: PUSH
76966: EMPTY
76967: LIST
76968: LIST
76969: LIST
76970: LIST
76971: LIST
76972: LIST
76973: LIST
76974: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
76975: LD_ADDR_VAR 0 64
76979: PUSH
76980: LD_INT 0
76982: PUSH
76983: LD_INT 0
76985: PUSH
76986: EMPTY
76987: LIST
76988: LIST
76989: PUSH
76990: LD_INT 0
76992: PUSH
76993: LD_INT 1
76995: NEG
76996: PUSH
76997: EMPTY
76998: LIST
76999: LIST
77000: PUSH
77001: LD_INT 1
77003: PUSH
77004: LD_INT 0
77006: PUSH
77007: EMPTY
77008: LIST
77009: LIST
77010: PUSH
77011: LD_INT 1
77013: PUSH
77014: LD_INT 1
77016: PUSH
77017: EMPTY
77018: LIST
77019: LIST
77020: PUSH
77021: LD_INT 0
77023: PUSH
77024: LD_INT 1
77026: PUSH
77027: EMPTY
77028: LIST
77029: LIST
77030: PUSH
77031: LD_INT 1
77033: NEG
77034: PUSH
77035: LD_INT 0
77037: PUSH
77038: EMPTY
77039: LIST
77040: LIST
77041: PUSH
77042: LD_INT 1
77044: NEG
77045: PUSH
77046: LD_INT 1
77048: NEG
77049: PUSH
77050: EMPTY
77051: LIST
77052: LIST
77053: PUSH
77054: EMPTY
77055: LIST
77056: LIST
77057: LIST
77058: LIST
77059: LIST
77060: LIST
77061: LIST
77062: ST_TO_ADDR
// end ; 1 :
77063: GO 82960
77065: LD_INT 1
77067: DOUBLE
77068: EQUAL
77069: IFTRUE 77073
77071: GO 79696
77073: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
77074: LD_ADDR_VAR 0 11
77078: PUSH
77079: LD_INT 1
77081: NEG
77082: PUSH
77083: LD_INT 3
77085: NEG
77086: PUSH
77087: EMPTY
77088: LIST
77089: LIST
77090: PUSH
77091: LD_INT 0
77093: PUSH
77094: LD_INT 3
77096: NEG
77097: PUSH
77098: EMPTY
77099: LIST
77100: LIST
77101: PUSH
77102: LD_INT 1
77104: PUSH
77105: LD_INT 2
77107: NEG
77108: PUSH
77109: EMPTY
77110: LIST
77111: LIST
77112: PUSH
77113: EMPTY
77114: LIST
77115: LIST
77116: LIST
77117: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
77118: LD_ADDR_VAR 0 12
77122: PUSH
77123: LD_INT 2
77125: PUSH
77126: LD_INT 1
77128: NEG
77129: PUSH
77130: EMPTY
77131: LIST
77132: LIST
77133: PUSH
77134: LD_INT 3
77136: PUSH
77137: LD_INT 0
77139: PUSH
77140: EMPTY
77141: LIST
77142: LIST
77143: PUSH
77144: LD_INT 3
77146: PUSH
77147: LD_INT 1
77149: PUSH
77150: EMPTY
77151: LIST
77152: LIST
77153: PUSH
77154: EMPTY
77155: LIST
77156: LIST
77157: LIST
77158: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
77159: LD_ADDR_VAR 0 13
77163: PUSH
77164: LD_INT 3
77166: PUSH
77167: LD_INT 2
77169: PUSH
77170: EMPTY
77171: LIST
77172: LIST
77173: PUSH
77174: LD_INT 3
77176: PUSH
77177: LD_INT 3
77179: PUSH
77180: EMPTY
77181: LIST
77182: LIST
77183: PUSH
77184: LD_INT 2
77186: PUSH
77187: LD_INT 3
77189: PUSH
77190: EMPTY
77191: LIST
77192: LIST
77193: PUSH
77194: EMPTY
77195: LIST
77196: LIST
77197: LIST
77198: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
77199: LD_ADDR_VAR 0 14
77203: PUSH
77204: LD_INT 1
77206: PUSH
77207: LD_INT 3
77209: PUSH
77210: EMPTY
77211: LIST
77212: LIST
77213: PUSH
77214: LD_INT 0
77216: PUSH
77217: LD_INT 3
77219: PUSH
77220: EMPTY
77221: LIST
77222: LIST
77223: PUSH
77224: LD_INT 1
77226: NEG
77227: PUSH
77228: LD_INT 2
77230: PUSH
77231: EMPTY
77232: LIST
77233: LIST
77234: PUSH
77235: EMPTY
77236: LIST
77237: LIST
77238: LIST
77239: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
77240: LD_ADDR_VAR 0 15
77244: PUSH
77245: LD_INT 2
77247: NEG
77248: PUSH
77249: LD_INT 1
77251: PUSH
77252: EMPTY
77253: LIST
77254: LIST
77255: PUSH
77256: LD_INT 3
77258: NEG
77259: PUSH
77260: LD_INT 0
77262: PUSH
77263: EMPTY
77264: LIST
77265: LIST
77266: PUSH
77267: LD_INT 3
77269: NEG
77270: PUSH
77271: LD_INT 1
77273: NEG
77274: PUSH
77275: EMPTY
77276: LIST
77277: LIST
77278: PUSH
77279: EMPTY
77280: LIST
77281: LIST
77282: LIST
77283: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77284: LD_ADDR_VAR 0 16
77288: PUSH
77289: LD_INT 2
77291: NEG
77292: PUSH
77293: LD_INT 3
77295: NEG
77296: PUSH
77297: EMPTY
77298: LIST
77299: LIST
77300: PUSH
77301: LD_INT 3
77303: NEG
77304: PUSH
77305: LD_INT 2
77307: NEG
77308: PUSH
77309: EMPTY
77310: LIST
77311: LIST
77312: PUSH
77313: LD_INT 3
77315: NEG
77316: PUSH
77317: LD_INT 3
77319: NEG
77320: PUSH
77321: EMPTY
77322: LIST
77323: LIST
77324: PUSH
77325: EMPTY
77326: LIST
77327: LIST
77328: LIST
77329: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
77330: LD_ADDR_VAR 0 17
77334: PUSH
77335: LD_INT 1
77337: NEG
77338: PUSH
77339: LD_INT 3
77341: NEG
77342: PUSH
77343: EMPTY
77344: LIST
77345: LIST
77346: PUSH
77347: LD_INT 0
77349: PUSH
77350: LD_INT 3
77352: NEG
77353: PUSH
77354: EMPTY
77355: LIST
77356: LIST
77357: PUSH
77358: LD_INT 1
77360: PUSH
77361: LD_INT 2
77363: NEG
77364: PUSH
77365: EMPTY
77366: LIST
77367: LIST
77368: PUSH
77369: EMPTY
77370: LIST
77371: LIST
77372: LIST
77373: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
77374: LD_ADDR_VAR 0 18
77378: PUSH
77379: LD_INT 2
77381: PUSH
77382: LD_INT 1
77384: NEG
77385: PUSH
77386: EMPTY
77387: LIST
77388: LIST
77389: PUSH
77390: LD_INT 3
77392: PUSH
77393: LD_INT 0
77395: PUSH
77396: EMPTY
77397: LIST
77398: LIST
77399: PUSH
77400: LD_INT 3
77402: PUSH
77403: LD_INT 1
77405: PUSH
77406: EMPTY
77407: LIST
77408: LIST
77409: PUSH
77410: EMPTY
77411: LIST
77412: LIST
77413: LIST
77414: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
77415: LD_ADDR_VAR 0 19
77419: PUSH
77420: LD_INT 3
77422: PUSH
77423: LD_INT 2
77425: PUSH
77426: EMPTY
77427: LIST
77428: LIST
77429: PUSH
77430: LD_INT 3
77432: PUSH
77433: LD_INT 3
77435: PUSH
77436: EMPTY
77437: LIST
77438: LIST
77439: PUSH
77440: LD_INT 2
77442: PUSH
77443: LD_INT 3
77445: PUSH
77446: EMPTY
77447: LIST
77448: LIST
77449: PUSH
77450: EMPTY
77451: LIST
77452: LIST
77453: LIST
77454: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
77455: LD_ADDR_VAR 0 20
77459: PUSH
77460: LD_INT 1
77462: PUSH
77463: LD_INT 3
77465: PUSH
77466: EMPTY
77467: LIST
77468: LIST
77469: PUSH
77470: LD_INT 0
77472: PUSH
77473: LD_INT 3
77475: PUSH
77476: EMPTY
77477: LIST
77478: LIST
77479: PUSH
77480: LD_INT 1
77482: NEG
77483: PUSH
77484: LD_INT 2
77486: PUSH
77487: EMPTY
77488: LIST
77489: LIST
77490: PUSH
77491: EMPTY
77492: LIST
77493: LIST
77494: LIST
77495: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
77496: LD_ADDR_VAR 0 21
77500: PUSH
77501: LD_INT 2
77503: NEG
77504: PUSH
77505: LD_INT 1
77507: PUSH
77508: EMPTY
77509: LIST
77510: LIST
77511: PUSH
77512: LD_INT 3
77514: NEG
77515: PUSH
77516: LD_INT 0
77518: PUSH
77519: EMPTY
77520: LIST
77521: LIST
77522: PUSH
77523: LD_INT 3
77525: NEG
77526: PUSH
77527: LD_INT 1
77529: NEG
77530: PUSH
77531: EMPTY
77532: LIST
77533: LIST
77534: PUSH
77535: EMPTY
77536: LIST
77537: LIST
77538: LIST
77539: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
77540: LD_ADDR_VAR 0 22
77544: PUSH
77545: LD_INT 2
77547: NEG
77548: PUSH
77549: LD_INT 3
77551: NEG
77552: PUSH
77553: EMPTY
77554: LIST
77555: LIST
77556: PUSH
77557: LD_INT 3
77559: NEG
77560: PUSH
77561: LD_INT 2
77563: NEG
77564: PUSH
77565: EMPTY
77566: LIST
77567: LIST
77568: PUSH
77569: LD_INT 3
77571: NEG
77572: PUSH
77573: LD_INT 3
77575: NEG
77576: PUSH
77577: EMPTY
77578: LIST
77579: LIST
77580: PUSH
77581: EMPTY
77582: LIST
77583: LIST
77584: LIST
77585: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
77586: LD_ADDR_VAR 0 23
77590: PUSH
77591: LD_INT 0
77593: PUSH
77594: LD_INT 3
77596: NEG
77597: PUSH
77598: EMPTY
77599: LIST
77600: LIST
77601: PUSH
77602: LD_INT 1
77604: NEG
77605: PUSH
77606: LD_INT 4
77608: NEG
77609: PUSH
77610: EMPTY
77611: LIST
77612: LIST
77613: PUSH
77614: LD_INT 1
77616: PUSH
77617: LD_INT 3
77619: NEG
77620: PUSH
77621: EMPTY
77622: LIST
77623: LIST
77624: PUSH
77625: EMPTY
77626: LIST
77627: LIST
77628: LIST
77629: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
77630: LD_ADDR_VAR 0 24
77634: PUSH
77635: LD_INT 3
77637: PUSH
77638: LD_INT 0
77640: PUSH
77641: EMPTY
77642: LIST
77643: LIST
77644: PUSH
77645: LD_INT 3
77647: PUSH
77648: LD_INT 1
77650: NEG
77651: PUSH
77652: EMPTY
77653: LIST
77654: LIST
77655: PUSH
77656: LD_INT 4
77658: PUSH
77659: LD_INT 1
77661: PUSH
77662: EMPTY
77663: LIST
77664: LIST
77665: PUSH
77666: EMPTY
77667: LIST
77668: LIST
77669: LIST
77670: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
77671: LD_ADDR_VAR 0 25
77675: PUSH
77676: LD_INT 3
77678: PUSH
77679: LD_INT 3
77681: PUSH
77682: EMPTY
77683: LIST
77684: LIST
77685: PUSH
77686: LD_INT 4
77688: PUSH
77689: LD_INT 3
77691: PUSH
77692: EMPTY
77693: LIST
77694: LIST
77695: PUSH
77696: LD_INT 3
77698: PUSH
77699: LD_INT 4
77701: PUSH
77702: EMPTY
77703: LIST
77704: LIST
77705: PUSH
77706: EMPTY
77707: LIST
77708: LIST
77709: LIST
77710: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
77711: LD_ADDR_VAR 0 26
77715: PUSH
77716: LD_INT 0
77718: PUSH
77719: LD_INT 3
77721: PUSH
77722: EMPTY
77723: LIST
77724: LIST
77725: PUSH
77726: LD_INT 1
77728: PUSH
77729: LD_INT 4
77731: PUSH
77732: EMPTY
77733: LIST
77734: LIST
77735: PUSH
77736: LD_INT 1
77738: NEG
77739: PUSH
77740: LD_INT 3
77742: PUSH
77743: EMPTY
77744: LIST
77745: LIST
77746: PUSH
77747: EMPTY
77748: LIST
77749: LIST
77750: LIST
77751: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
77752: LD_ADDR_VAR 0 27
77756: PUSH
77757: LD_INT 3
77759: NEG
77760: PUSH
77761: LD_INT 0
77763: PUSH
77764: EMPTY
77765: LIST
77766: LIST
77767: PUSH
77768: LD_INT 3
77770: NEG
77771: PUSH
77772: LD_INT 1
77774: PUSH
77775: EMPTY
77776: LIST
77777: LIST
77778: PUSH
77779: LD_INT 4
77781: NEG
77782: PUSH
77783: LD_INT 1
77785: NEG
77786: PUSH
77787: EMPTY
77788: LIST
77789: LIST
77790: PUSH
77791: EMPTY
77792: LIST
77793: LIST
77794: LIST
77795: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
77796: LD_ADDR_VAR 0 28
77800: PUSH
77801: LD_INT 3
77803: NEG
77804: PUSH
77805: LD_INT 3
77807: NEG
77808: PUSH
77809: EMPTY
77810: LIST
77811: LIST
77812: PUSH
77813: LD_INT 3
77815: NEG
77816: PUSH
77817: LD_INT 4
77819: NEG
77820: PUSH
77821: EMPTY
77822: LIST
77823: LIST
77824: PUSH
77825: LD_INT 4
77827: NEG
77828: PUSH
77829: LD_INT 3
77831: NEG
77832: PUSH
77833: EMPTY
77834: LIST
77835: LIST
77836: PUSH
77837: EMPTY
77838: LIST
77839: LIST
77840: LIST
77841: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
77842: LD_ADDR_VAR 0 29
77846: PUSH
77847: LD_INT 1
77849: NEG
77850: PUSH
77851: LD_INT 3
77853: NEG
77854: PUSH
77855: EMPTY
77856: LIST
77857: LIST
77858: PUSH
77859: LD_INT 0
77861: PUSH
77862: LD_INT 3
77864: NEG
77865: PUSH
77866: EMPTY
77867: LIST
77868: LIST
77869: PUSH
77870: LD_INT 1
77872: PUSH
77873: LD_INT 2
77875: NEG
77876: PUSH
77877: EMPTY
77878: LIST
77879: LIST
77880: PUSH
77881: LD_INT 1
77883: NEG
77884: PUSH
77885: LD_INT 4
77887: NEG
77888: PUSH
77889: EMPTY
77890: LIST
77891: LIST
77892: PUSH
77893: LD_INT 0
77895: PUSH
77896: LD_INT 4
77898: NEG
77899: PUSH
77900: EMPTY
77901: LIST
77902: LIST
77903: PUSH
77904: LD_INT 1
77906: PUSH
77907: LD_INT 3
77909: NEG
77910: PUSH
77911: EMPTY
77912: LIST
77913: LIST
77914: PUSH
77915: LD_INT 1
77917: NEG
77918: PUSH
77919: LD_INT 5
77921: NEG
77922: PUSH
77923: EMPTY
77924: LIST
77925: LIST
77926: PUSH
77927: LD_INT 0
77929: PUSH
77930: LD_INT 5
77932: NEG
77933: PUSH
77934: EMPTY
77935: LIST
77936: LIST
77937: PUSH
77938: LD_INT 1
77940: PUSH
77941: LD_INT 4
77943: NEG
77944: PUSH
77945: EMPTY
77946: LIST
77947: LIST
77948: PUSH
77949: LD_INT 1
77951: NEG
77952: PUSH
77953: LD_INT 6
77955: NEG
77956: PUSH
77957: EMPTY
77958: LIST
77959: LIST
77960: PUSH
77961: LD_INT 0
77963: PUSH
77964: LD_INT 6
77966: NEG
77967: PUSH
77968: EMPTY
77969: LIST
77970: LIST
77971: PUSH
77972: LD_INT 1
77974: PUSH
77975: LD_INT 5
77977: NEG
77978: PUSH
77979: EMPTY
77980: LIST
77981: LIST
77982: PUSH
77983: EMPTY
77984: LIST
77985: LIST
77986: LIST
77987: LIST
77988: LIST
77989: LIST
77990: LIST
77991: LIST
77992: LIST
77993: LIST
77994: LIST
77995: LIST
77996: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
77997: LD_ADDR_VAR 0 30
78001: PUSH
78002: LD_INT 2
78004: PUSH
78005: LD_INT 1
78007: NEG
78008: PUSH
78009: EMPTY
78010: LIST
78011: LIST
78012: PUSH
78013: LD_INT 3
78015: PUSH
78016: LD_INT 0
78018: PUSH
78019: EMPTY
78020: LIST
78021: LIST
78022: PUSH
78023: LD_INT 3
78025: PUSH
78026: LD_INT 1
78028: PUSH
78029: EMPTY
78030: LIST
78031: LIST
78032: PUSH
78033: LD_INT 3
78035: PUSH
78036: LD_INT 1
78038: NEG
78039: PUSH
78040: EMPTY
78041: LIST
78042: LIST
78043: PUSH
78044: LD_INT 4
78046: PUSH
78047: LD_INT 0
78049: PUSH
78050: EMPTY
78051: LIST
78052: LIST
78053: PUSH
78054: LD_INT 4
78056: PUSH
78057: LD_INT 1
78059: PUSH
78060: EMPTY
78061: LIST
78062: LIST
78063: PUSH
78064: LD_INT 4
78066: PUSH
78067: LD_INT 1
78069: NEG
78070: PUSH
78071: EMPTY
78072: LIST
78073: LIST
78074: PUSH
78075: LD_INT 5
78077: PUSH
78078: LD_INT 0
78080: PUSH
78081: EMPTY
78082: LIST
78083: LIST
78084: PUSH
78085: LD_INT 5
78087: PUSH
78088: LD_INT 1
78090: PUSH
78091: EMPTY
78092: LIST
78093: LIST
78094: PUSH
78095: LD_INT 5
78097: PUSH
78098: LD_INT 1
78100: NEG
78101: PUSH
78102: EMPTY
78103: LIST
78104: LIST
78105: PUSH
78106: LD_INT 6
78108: PUSH
78109: LD_INT 0
78111: PUSH
78112: EMPTY
78113: LIST
78114: LIST
78115: PUSH
78116: LD_INT 6
78118: PUSH
78119: LD_INT 1
78121: PUSH
78122: EMPTY
78123: LIST
78124: LIST
78125: PUSH
78126: EMPTY
78127: LIST
78128: LIST
78129: LIST
78130: LIST
78131: LIST
78132: LIST
78133: LIST
78134: LIST
78135: LIST
78136: LIST
78137: LIST
78138: LIST
78139: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
78140: LD_ADDR_VAR 0 31
78144: PUSH
78145: LD_INT 3
78147: PUSH
78148: LD_INT 2
78150: PUSH
78151: EMPTY
78152: LIST
78153: LIST
78154: PUSH
78155: LD_INT 3
78157: PUSH
78158: LD_INT 3
78160: PUSH
78161: EMPTY
78162: LIST
78163: LIST
78164: PUSH
78165: LD_INT 2
78167: PUSH
78168: LD_INT 3
78170: PUSH
78171: EMPTY
78172: LIST
78173: LIST
78174: PUSH
78175: LD_INT 4
78177: PUSH
78178: LD_INT 3
78180: PUSH
78181: EMPTY
78182: LIST
78183: LIST
78184: PUSH
78185: LD_INT 4
78187: PUSH
78188: LD_INT 4
78190: PUSH
78191: EMPTY
78192: LIST
78193: LIST
78194: PUSH
78195: LD_INT 3
78197: PUSH
78198: LD_INT 4
78200: PUSH
78201: EMPTY
78202: LIST
78203: LIST
78204: PUSH
78205: LD_INT 5
78207: PUSH
78208: LD_INT 4
78210: PUSH
78211: EMPTY
78212: LIST
78213: LIST
78214: PUSH
78215: LD_INT 5
78217: PUSH
78218: LD_INT 5
78220: PUSH
78221: EMPTY
78222: LIST
78223: LIST
78224: PUSH
78225: LD_INT 4
78227: PUSH
78228: LD_INT 5
78230: PUSH
78231: EMPTY
78232: LIST
78233: LIST
78234: PUSH
78235: LD_INT 6
78237: PUSH
78238: LD_INT 5
78240: PUSH
78241: EMPTY
78242: LIST
78243: LIST
78244: PUSH
78245: LD_INT 6
78247: PUSH
78248: LD_INT 6
78250: PUSH
78251: EMPTY
78252: LIST
78253: LIST
78254: PUSH
78255: LD_INT 5
78257: PUSH
78258: LD_INT 6
78260: PUSH
78261: EMPTY
78262: LIST
78263: LIST
78264: PUSH
78265: EMPTY
78266: LIST
78267: LIST
78268: LIST
78269: LIST
78270: LIST
78271: LIST
78272: LIST
78273: LIST
78274: LIST
78275: LIST
78276: LIST
78277: LIST
78278: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
78279: LD_ADDR_VAR 0 32
78283: PUSH
78284: LD_INT 1
78286: PUSH
78287: LD_INT 3
78289: PUSH
78290: EMPTY
78291: LIST
78292: LIST
78293: PUSH
78294: LD_INT 0
78296: PUSH
78297: LD_INT 3
78299: PUSH
78300: EMPTY
78301: LIST
78302: LIST
78303: PUSH
78304: LD_INT 1
78306: NEG
78307: PUSH
78308: LD_INT 2
78310: PUSH
78311: EMPTY
78312: LIST
78313: LIST
78314: PUSH
78315: LD_INT 1
78317: PUSH
78318: LD_INT 4
78320: PUSH
78321: EMPTY
78322: LIST
78323: LIST
78324: PUSH
78325: LD_INT 0
78327: PUSH
78328: LD_INT 4
78330: PUSH
78331: EMPTY
78332: LIST
78333: LIST
78334: PUSH
78335: LD_INT 1
78337: NEG
78338: PUSH
78339: LD_INT 3
78341: PUSH
78342: EMPTY
78343: LIST
78344: LIST
78345: PUSH
78346: LD_INT 1
78348: PUSH
78349: LD_INT 5
78351: PUSH
78352: EMPTY
78353: LIST
78354: LIST
78355: PUSH
78356: LD_INT 0
78358: PUSH
78359: LD_INT 5
78361: PUSH
78362: EMPTY
78363: LIST
78364: LIST
78365: PUSH
78366: LD_INT 1
78368: NEG
78369: PUSH
78370: LD_INT 4
78372: PUSH
78373: EMPTY
78374: LIST
78375: LIST
78376: PUSH
78377: LD_INT 1
78379: PUSH
78380: LD_INT 6
78382: PUSH
78383: EMPTY
78384: LIST
78385: LIST
78386: PUSH
78387: LD_INT 0
78389: PUSH
78390: LD_INT 6
78392: PUSH
78393: EMPTY
78394: LIST
78395: LIST
78396: PUSH
78397: LD_INT 1
78399: NEG
78400: PUSH
78401: LD_INT 5
78403: PUSH
78404: EMPTY
78405: LIST
78406: LIST
78407: PUSH
78408: EMPTY
78409: LIST
78410: LIST
78411: LIST
78412: LIST
78413: LIST
78414: LIST
78415: LIST
78416: LIST
78417: LIST
78418: LIST
78419: LIST
78420: LIST
78421: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
78422: LD_ADDR_VAR 0 33
78426: PUSH
78427: LD_INT 2
78429: NEG
78430: PUSH
78431: LD_INT 1
78433: PUSH
78434: EMPTY
78435: LIST
78436: LIST
78437: PUSH
78438: LD_INT 3
78440: NEG
78441: PUSH
78442: LD_INT 0
78444: PUSH
78445: EMPTY
78446: LIST
78447: LIST
78448: PUSH
78449: LD_INT 3
78451: NEG
78452: PUSH
78453: LD_INT 1
78455: NEG
78456: PUSH
78457: EMPTY
78458: LIST
78459: LIST
78460: PUSH
78461: LD_INT 3
78463: NEG
78464: PUSH
78465: LD_INT 1
78467: PUSH
78468: EMPTY
78469: LIST
78470: LIST
78471: PUSH
78472: LD_INT 4
78474: NEG
78475: PUSH
78476: LD_INT 0
78478: PUSH
78479: EMPTY
78480: LIST
78481: LIST
78482: PUSH
78483: LD_INT 4
78485: NEG
78486: PUSH
78487: LD_INT 1
78489: NEG
78490: PUSH
78491: EMPTY
78492: LIST
78493: LIST
78494: PUSH
78495: LD_INT 4
78497: NEG
78498: PUSH
78499: LD_INT 1
78501: PUSH
78502: EMPTY
78503: LIST
78504: LIST
78505: PUSH
78506: LD_INT 5
78508: NEG
78509: PUSH
78510: LD_INT 0
78512: PUSH
78513: EMPTY
78514: LIST
78515: LIST
78516: PUSH
78517: LD_INT 5
78519: NEG
78520: PUSH
78521: LD_INT 1
78523: NEG
78524: PUSH
78525: EMPTY
78526: LIST
78527: LIST
78528: PUSH
78529: LD_INT 5
78531: NEG
78532: PUSH
78533: LD_INT 1
78535: PUSH
78536: EMPTY
78537: LIST
78538: LIST
78539: PUSH
78540: LD_INT 6
78542: NEG
78543: PUSH
78544: LD_INT 0
78546: PUSH
78547: EMPTY
78548: LIST
78549: LIST
78550: PUSH
78551: LD_INT 6
78553: NEG
78554: PUSH
78555: LD_INT 1
78557: NEG
78558: PUSH
78559: EMPTY
78560: LIST
78561: LIST
78562: PUSH
78563: EMPTY
78564: LIST
78565: LIST
78566: LIST
78567: LIST
78568: LIST
78569: LIST
78570: LIST
78571: LIST
78572: LIST
78573: LIST
78574: LIST
78575: LIST
78576: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
78577: LD_ADDR_VAR 0 34
78581: PUSH
78582: LD_INT 2
78584: NEG
78585: PUSH
78586: LD_INT 3
78588: NEG
78589: PUSH
78590: EMPTY
78591: LIST
78592: LIST
78593: PUSH
78594: LD_INT 3
78596: NEG
78597: PUSH
78598: LD_INT 2
78600: NEG
78601: PUSH
78602: EMPTY
78603: LIST
78604: LIST
78605: PUSH
78606: LD_INT 3
78608: NEG
78609: PUSH
78610: LD_INT 3
78612: NEG
78613: PUSH
78614: EMPTY
78615: LIST
78616: LIST
78617: PUSH
78618: LD_INT 3
78620: NEG
78621: PUSH
78622: LD_INT 4
78624: NEG
78625: PUSH
78626: EMPTY
78627: LIST
78628: LIST
78629: PUSH
78630: LD_INT 4
78632: NEG
78633: PUSH
78634: LD_INT 3
78636: NEG
78637: PUSH
78638: EMPTY
78639: LIST
78640: LIST
78641: PUSH
78642: LD_INT 4
78644: NEG
78645: PUSH
78646: LD_INT 4
78648: NEG
78649: PUSH
78650: EMPTY
78651: LIST
78652: LIST
78653: PUSH
78654: LD_INT 4
78656: NEG
78657: PUSH
78658: LD_INT 5
78660: NEG
78661: PUSH
78662: EMPTY
78663: LIST
78664: LIST
78665: PUSH
78666: LD_INT 5
78668: NEG
78669: PUSH
78670: LD_INT 4
78672: NEG
78673: PUSH
78674: EMPTY
78675: LIST
78676: LIST
78677: PUSH
78678: LD_INT 5
78680: NEG
78681: PUSH
78682: LD_INT 5
78684: NEG
78685: PUSH
78686: EMPTY
78687: LIST
78688: LIST
78689: PUSH
78690: LD_INT 5
78692: NEG
78693: PUSH
78694: LD_INT 6
78696: NEG
78697: PUSH
78698: EMPTY
78699: LIST
78700: LIST
78701: PUSH
78702: LD_INT 6
78704: NEG
78705: PUSH
78706: LD_INT 5
78708: NEG
78709: PUSH
78710: EMPTY
78711: LIST
78712: LIST
78713: PUSH
78714: LD_INT 6
78716: NEG
78717: PUSH
78718: LD_INT 6
78720: NEG
78721: PUSH
78722: EMPTY
78723: LIST
78724: LIST
78725: PUSH
78726: EMPTY
78727: LIST
78728: LIST
78729: LIST
78730: LIST
78731: LIST
78732: LIST
78733: LIST
78734: LIST
78735: LIST
78736: LIST
78737: LIST
78738: LIST
78739: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
78740: LD_ADDR_VAR 0 41
78744: PUSH
78745: LD_INT 0
78747: PUSH
78748: LD_INT 2
78750: NEG
78751: PUSH
78752: EMPTY
78753: LIST
78754: LIST
78755: PUSH
78756: LD_INT 1
78758: NEG
78759: PUSH
78760: LD_INT 3
78762: NEG
78763: PUSH
78764: EMPTY
78765: LIST
78766: LIST
78767: PUSH
78768: LD_INT 1
78770: PUSH
78771: LD_INT 2
78773: NEG
78774: PUSH
78775: EMPTY
78776: LIST
78777: LIST
78778: PUSH
78779: EMPTY
78780: LIST
78781: LIST
78782: LIST
78783: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
78784: LD_ADDR_VAR 0 42
78788: PUSH
78789: LD_INT 2
78791: PUSH
78792: LD_INT 0
78794: PUSH
78795: EMPTY
78796: LIST
78797: LIST
78798: PUSH
78799: LD_INT 2
78801: PUSH
78802: LD_INT 1
78804: NEG
78805: PUSH
78806: EMPTY
78807: LIST
78808: LIST
78809: PUSH
78810: LD_INT 3
78812: PUSH
78813: LD_INT 1
78815: PUSH
78816: EMPTY
78817: LIST
78818: LIST
78819: PUSH
78820: EMPTY
78821: LIST
78822: LIST
78823: LIST
78824: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
78825: LD_ADDR_VAR 0 43
78829: PUSH
78830: LD_INT 2
78832: PUSH
78833: LD_INT 2
78835: PUSH
78836: EMPTY
78837: LIST
78838: LIST
78839: PUSH
78840: LD_INT 3
78842: PUSH
78843: LD_INT 2
78845: PUSH
78846: EMPTY
78847: LIST
78848: LIST
78849: PUSH
78850: LD_INT 2
78852: PUSH
78853: LD_INT 3
78855: PUSH
78856: EMPTY
78857: LIST
78858: LIST
78859: PUSH
78860: EMPTY
78861: LIST
78862: LIST
78863: LIST
78864: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
78865: LD_ADDR_VAR 0 44
78869: PUSH
78870: LD_INT 0
78872: PUSH
78873: LD_INT 2
78875: PUSH
78876: EMPTY
78877: LIST
78878: LIST
78879: PUSH
78880: LD_INT 1
78882: PUSH
78883: LD_INT 3
78885: PUSH
78886: EMPTY
78887: LIST
78888: LIST
78889: PUSH
78890: LD_INT 1
78892: NEG
78893: PUSH
78894: LD_INT 2
78896: PUSH
78897: EMPTY
78898: LIST
78899: LIST
78900: PUSH
78901: EMPTY
78902: LIST
78903: LIST
78904: LIST
78905: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
78906: LD_ADDR_VAR 0 45
78910: PUSH
78911: LD_INT 2
78913: NEG
78914: PUSH
78915: LD_INT 0
78917: PUSH
78918: EMPTY
78919: LIST
78920: LIST
78921: PUSH
78922: LD_INT 2
78924: NEG
78925: PUSH
78926: LD_INT 1
78928: PUSH
78929: EMPTY
78930: LIST
78931: LIST
78932: PUSH
78933: LD_INT 3
78935: NEG
78936: PUSH
78937: LD_INT 1
78939: NEG
78940: PUSH
78941: EMPTY
78942: LIST
78943: LIST
78944: PUSH
78945: EMPTY
78946: LIST
78947: LIST
78948: LIST
78949: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
78950: LD_ADDR_VAR 0 46
78954: PUSH
78955: LD_INT 2
78957: NEG
78958: PUSH
78959: LD_INT 2
78961: NEG
78962: PUSH
78963: EMPTY
78964: LIST
78965: LIST
78966: PUSH
78967: LD_INT 2
78969: NEG
78970: PUSH
78971: LD_INT 3
78973: NEG
78974: PUSH
78975: EMPTY
78976: LIST
78977: LIST
78978: PUSH
78979: LD_INT 3
78981: NEG
78982: PUSH
78983: LD_INT 2
78985: NEG
78986: PUSH
78987: EMPTY
78988: LIST
78989: LIST
78990: PUSH
78991: EMPTY
78992: LIST
78993: LIST
78994: LIST
78995: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
78996: LD_ADDR_VAR 0 47
79000: PUSH
79001: LD_INT 2
79003: NEG
79004: PUSH
79005: LD_INT 3
79007: NEG
79008: PUSH
79009: EMPTY
79010: LIST
79011: LIST
79012: PUSH
79013: LD_INT 1
79015: NEG
79016: PUSH
79017: LD_INT 3
79019: NEG
79020: PUSH
79021: EMPTY
79022: LIST
79023: LIST
79024: PUSH
79025: EMPTY
79026: LIST
79027: LIST
79028: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
79029: LD_ADDR_VAR 0 48
79033: PUSH
79034: LD_INT 1
79036: PUSH
79037: LD_INT 2
79039: NEG
79040: PUSH
79041: EMPTY
79042: LIST
79043: LIST
79044: PUSH
79045: LD_INT 2
79047: PUSH
79048: LD_INT 1
79050: NEG
79051: PUSH
79052: EMPTY
79053: LIST
79054: LIST
79055: PUSH
79056: EMPTY
79057: LIST
79058: LIST
79059: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
79060: LD_ADDR_VAR 0 49
79064: PUSH
79065: LD_INT 3
79067: PUSH
79068: LD_INT 1
79070: PUSH
79071: EMPTY
79072: LIST
79073: LIST
79074: PUSH
79075: LD_INT 3
79077: PUSH
79078: LD_INT 2
79080: PUSH
79081: EMPTY
79082: LIST
79083: LIST
79084: PUSH
79085: EMPTY
79086: LIST
79087: LIST
79088: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
79089: LD_ADDR_VAR 0 50
79093: PUSH
79094: LD_INT 2
79096: PUSH
79097: LD_INT 3
79099: PUSH
79100: EMPTY
79101: LIST
79102: LIST
79103: PUSH
79104: LD_INT 1
79106: PUSH
79107: LD_INT 3
79109: PUSH
79110: EMPTY
79111: LIST
79112: LIST
79113: PUSH
79114: EMPTY
79115: LIST
79116: LIST
79117: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
79118: LD_ADDR_VAR 0 51
79122: PUSH
79123: LD_INT 1
79125: NEG
79126: PUSH
79127: LD_INT 2
79129: PUSH
79130: EMPTY
79131: LIST
79132: LIST
79133: PUSH
79134: LD_INT 2
79136: NEG
79137: PUSH
79138: LD_INT 1
79140: PUSH
79141: EMPTY
79142: LIST
79143: LIST
79144: PUSH
79145: EMPTY
79146: LIST
79147: LIST
79148: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
79149: LD_ADDR_VAR 0 52
79153: PUSH
79154: LD_INT 3
79156: NEG
79157: PUSH
79158: LD_INT 1
79160: NEG
79161: PUSH
79162: EMPTY
79163: LIST
79164: LIST
79165: PUSH
79166: LD_INT 3
79168: NEG
79169: PUSH
79170: LD_INT 2
79172: NEG
79173: PUSH
79174: EMPTY
79175: LIST
79176: LIST
79177: PUSH
79178: EMPTY
79179: LIST
79180: LIST
79181: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
79182: LD_ADDR_VAR 0 53
79186: PUSH
79187: LD_INT 1
79189: NEG
79190: PUSH
79191: LD_INT 3
79193: NEG
79194: PUSH
79195: EMPTY
79196: LIST
79197: LIST
79198: PUSH
79199: LD_INT 0
79201: PUSH
79202: LD_INT 3
79204: NEG
79205: PUSH
79206: EMPTY
79207: LIST
79208: LIST
79209: PUSH
79210: LD_INT 1
79212: PUSH
79213: LD_INT 2
79215: NEG
79216: PUSH
79217: EMPTY
79218: LIST
79219: LIST
79220: PUSH
79221: EMPTY
79222: LIST
79223: LIST
79224: LIST
79225: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
79226: LD_ADDR_VAR 0 54
79230: PUSH
79231: LD_INT 2
79233: PUSH
79234: LD_INT 1
79236: NEG
79237: PUSH
79238: EMPTY
79239: LIST
79240: LIST
79241: PUSH
79242: LD_INT 3
79244: PUSH
79245: LD_INT 0
79247: PUSH
79248: EMPTY
79249: LIST
79250: LIST
79251: PUSH
79252: LD_INT 3
79254: PUSH
79255: LD_INT 1
79257: PUSH
79258: EMPTY
79259: LIST
79260: LIST
79261: PUSH
79262: EMPTY
79263: LIST
79264: LIST
79265: LIST
79266: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
79267: LD_ADDR_VAR 0 55
79271: PUSH
79272: LD_INT 3
79274: PUSH
79275: LD_INT 2
79277: PUSH
79278: EMPTY
79279: LIST
79280: LIST
79281: PUSH
79282: LD_INT 3
79284: PUSH
79285: LD_INT 3
79287: PUSH
79288: EMPTY
79289: LIST
79290: LIST
79291: PUSH
79292: LD_INT 2
79294: PUSH
79295: LD_INT 3
79297: PUSH
79298: EMPTY
79299: LIST
79300: LIST
79301: PUSH
79302: EMPTY
79303: LIST
79304: LIST
79305: LIST
79306: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
79307: LD_ADDR_VAR 0 56
79311: PUSH
79312: LD_INT 1
79314: PUSH
79315: LD_INT 3
79317: PUSH
79318: EMPTY
79319: LIST
79320: LIST
79321: PUSH
79322: LD_INT 0
79324: PUSH
79325: LD_INT 3
79327: PUSH
79328: EMPTY
79329: LIST
79330: LIST
79331: PUSH
79332: LD_INT 1
79334: NEG
79335: PUSH
79336: LD_INT 2
79338: PUSH
79339: EMPTY
79340: LIST
79341: LIST
79342: PUSH
79343: EMPTY
79344: LIST
79345: LIST
79346: LIST
79347: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
79348: LD_ADDR_VAR 0 57
79352: PUSH
79353: LD_INT 2
79355: NEG
79356: PUSH
79357: LD_INT 1
79359: PUSH
79360: EMPTY
79361: LIST
79362: LIST
79363: PUSH
79364: LD_INT 3
79366: NEG
79367: PUSH
79368: LD_INT 0
79370: PUSH
79371: EMPTY
79372: LIST
79373: LIST
79374: PUSH
79375: LD_INT 3
79377: NEG
79378: PUSH
79379: LD_INT 1
79381: NEG
79382: PUSH
79383: EMPTY
79384: LIST
79385: LIST
79386: PUSH
79387: EMPTY
79388: LIST
79389: LIST
79390: LIST
79391: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
79392: LD_ADDR_VAR 0 58
79396: PUSH
79397: LD_INT 2
79399: NEG
79400: PUSH
79401: LD_INT 3
79403: NEG
79404: PUSH
79405: EMPTY
79406: LIST
79407: LIST
79408: PUSH
79409: LD_INT 3
79411: NEG
79412: PUSH
79413: LD_INT 2
79415: NEG
79416: PUSH
79417: EMPTY
79418: LIST
79419: LIST
79420: PUSH
79421: LD_INT 3
79423: NEG
79424: PUSH
79425: LD_INT 3
79427: NEG
79428: PUSH
79429: EMPTY
79430: LIST
79431: LIST
79432: PUSH
79433: EMPTY
79434: LIST
79435: LIST
79436: LIST
79437: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
79438: LD_ADDR_VAR 0 59
79442: PUSH
79443: LD_INT 1
79445: NEG
79446: PUSH
79447: LD_INT 2
79449: NEG
79450: PUSH
79451: EMPTY
79452: LIST
79453: LIST
79454: PUSH
79455: LD_INT 0
79457: PUSH
79458: LD_INT 2
79460: NEG
79461: PUSH
79462: EMPTY
79463: LIST
79464: LIST
79465: PUSH
79466: LD_INT 1
79468: PUSH
79469: LD_INT 1
79471: NEG
79472: PUSH
79473: EMPTY
79474: LIST
79475: LIST
79476: PUSH
79477: EMPTY
79478: LIST
79479: LIST
79480: LIST
79481: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
79482: LD_ADDR_VAR 0 60
79486: PUSH
79487: LD_INT 1
79489: PUSH
79490: LD_INT 1
79492: NEG
79493: PUSH
79494: EMPTY
79495: LIST
79496: LIST
79497: PUSH
79498: LD_INT 2
79500: PUSH
79501: LD_INT 0
79503: PUSH
79504: EMPTY
79505: LIST
79506: LIST
79507: PUSH
79508: LD_INT 2
79510: PUSH
79511: LD_INT 1
79513: PUSH
79514: EMPTY
79515: LIST
79516: LIST
79517: PUSH
79518: EMPTY
79519: LIST
79520: LIST
79521: LIST
79522: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
79523: LD_ADDR_VAR 0 61
79527: PUSH
79528: LD_INT 2
79530: PUSH
79531: LD_INT 1
79533: PUSH
79534: EMPTY
79535: LIST
79536: LIST
79537: PUSH
79538: LD_INT 2
79540: PUSH
79541: LD_INT 2
79543: PUSH
79544: EMPTY
79545: LIST
79546: LIST
79547: PUSH
79548: LD_INT 1
79550: PUSH
79551: LD_INT 2
79553: PUSH
79554: EMPTY
79555: LIST
79556: LIST
79557: PUSH
79558: EMPTY
79559: LIST
79560: LIST
79561: LIST
79562: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
79563: LD_ADDR_VAR 0 62
79567: PUSH
79568: LD_INT 1
79570: PUSH
79571: LD_INT 2
79573: PUSH
79574: EMPTY
79575: LIST
79576: LIST
79577: PUSH
79578: LD_INT 0
79580: PUSH
79581: LD_INT 2
79583: PUSH
79584: EMPTY
79585: LIST
79586: LIST
79587: PUSH
79588: LD_INT 1
79590: NEG
79591: PUSH
79592: LD_INT 1
79594: PUSH
79595: EMPTY
79596: LIST
79597: LIST
79598: PUSH
79599: EMPTY
79600: LIST
79601: LIST
79602: LIST
79603: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
79604: LD_ADDR_VAR 0 63
79608: PUSH
79609: LD_INT 1
79611: NEG
79612: PUSH
79613: LD_INT 1
79615: PUSH
79616: EMPTY
79617: LIST
79618: LIST
79619: PUSH
79620: LD_INT 2
79622: NEG
79623: PUSH
79624: LD_INT 0
79626: PUSH
79627: EMPTY
79628: LIST
79629: LIST
79630: PUSH
79631: LD_INT 2
79633: NEG
79634: PUSH
79635: LD_INT 1
79637: NEG
79638: PUSH
79639: EMPTY
79640: LIST
79641: LIST
79642: PUSH
79643: EMPTY
79644: LIST
79645: LIST
79646: LIST
79647: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
79648: LD_ADDR_VAR 0 64
79652: PUSH
79653: LD_INT 1
79655: NEG
79656: PUSH
79657: LD_INT 2
79659: NEG
79660: PUSH
79661: EMPTY
79662: LIST
79663: LIST
79664: PUSH
79665: LD_INT 2
79667: NEG
79668: PUSH
79669: LD_INT 1
79671: NEG
79672: PUSH
79673: EMPTY
79674: LIST
79675: LIST
79676: PUSH
79677: LD_INT 2
79679: NEG
79680: PUSH
79681: LD_INT 2
79683: NEG
79684: PUSH
79685: EMPTY
79686: LIST
79687: LIST
79688: PUSH
79689: EMPTY
79690: LIST
79691: LIST
79692: LIST
79693: ST_TO_ADDR
// end ; 2 :
79694: GO 82960
79696: LD_INT 2
79698: DOUBLE
79699: EQUAL
79700: IFTRUE 79704
79702: GO 82959
79704: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
79705: LD_ADDR_VAR 0 29
79709: PUSH
79710: LD_INT 4
79712: PUSH
79713: LD_INT 0
79715: PUSH
79716: EMPTY
79717: LIST
79718: LIST
79719: PUSH
79720: LD_INT 4
79722: PUSH
79723: LD_INT 1
79725: NEG
79726: PUSH
79727: EMPTY
79728: LIST
79729: LIST
79730: PUSH
79731: LD_INT 5
79733: PUSH
79734: LD_INT 0
79736: PUSH
79737: EMPTY
79738: LIST
79739: LIST
79740: PUSH
79741: LD_INT 5
79743: PUSH
79744: LD_INT 1
79746: PUSH
79747: EMPTY
79748: LIST
79749: LIST
79750: PUSH
79751: LD_INT 4
79753: PUSH
79754: LD_INT 1
79756: PUSH
79757: EMPTY
79758: LIST
79759: LIST
79760: PUSH
79761: LD_INT 3
79763: PUSH
79764: LD_INT 0
79766: PUSH
79767: EMPTY
79768: LIST
79769: LIST
79770: PUSH
79771: LD_INT 3
79773: PUSH
79774: LD_INT 1
79776: NEG
79777: PUSH
79778: EMPTY
79779: LIST
79780: LIST
79781: PUSH
79782: LD_INT 3
79784: PUSH
79785: LD_INT 2
79787: NEG
79788: PUSH
79789: EMPTY
79790: LIST
79791: LIST
79792: PUSH
79793: LD_INT 5
79795: PUSH
79796: LD_INT 2
79798: PUSH
79799: EMPTY
79800: LIST
79801: LIST
79802: PUSH
79803: LD_INT 3
79805: PUSH
79806: LD_INT 3
79808: PUSH
79809: EMPTY
79810: LIST
79811: LIST
79812: PUSH
79813: LD_INT 3
79815: PUSH
79816: LD_INT 2
79818: PUSH
79819: EMPTY
79820: LIST
79821: LIST
79822: PUSH
79823: LD_INT 4
79825: PUSH
79826: LD_INT 3
79828: PUSH
79829: EMPTY
79830: LIST
79831: LIST
79832: PUSH
79833: LD_INT 4
79835: PUSH
79836: LD_INT 4
79838: PUSH
79839: EMPTY
79840: LIST
79841: LIST
79842: PUSH
79843: LD_INT 3
79845: PUSH
79846: LD_INT 4
79848: PUSH
79849: EMPTY
79850: LIST
79851: LIST
79852: PUSH
79853: LD_INT 2
79855: PUSH
79856: LD_INT 3
79858: PUSH
79859: EMPTY
79860: LIST
79861: LIST
79862: PUSH
79863: LD_INT 2
79865: PUSH
79866: LD_INT 2
79868: PUSH
79869: EMPTY
79870: LIST
79871: LIST
79872: PUSH
79873: LD_INT 4
79875: PUSH
79876: LD_INT 2
79878: PUSH
79879: EMPTY
79880: LIST
79881: LIST
79882: PUSH
79883: LD_INT 2
79885: PUSH
79886: LD_INT 4
79888: PUSH
79889: EMPTY
79890: LIST
79891: LIST
79892: PUSH
79893: LD_INT 0
79895: PUSH
79896: LD_INT 4
79898: PUSH
79899: EMPTY
79900: LIST
79901: LIST
79902: PUSH
79903: LD_INT 0
79905: PUSH
79906: LD_INT 3
79908: PUSH
79909: EMPTY
79910: LIST
79911: LIST
79912: PUSH
79913: LD_INT 1
79915: PUSH
79916: LD_INT 4
79918: PUSH
79919: EMPTY
79920: LIST
79921: LIST
79922: PUSH
79923: LD_INT 1
79925: PUSH
79926: LD_INT 5
79928: PUSH
79929: EMPTY
79930: LIST
79931: LIST
79932: PUSH
79933: LD_INT 0
79935: PUSH
79936: LD_INT 5
79938: PUSH
79939: EMPTY
79940: LIST
79941: LIST
79942: PUSH
79943: LD_INT 1
79945: NEG
79946: PUSH
79947: LD_INT 4
79949: PUSH
79950: EMPTY
79951: LIST
79952: LIST
79953: PUSH
79954: LD_INT 1
79956: NEG
79957: PUSH
79958: LD_INT 3
79960: PUSH
79961: EMPTY
79962: LIST
79963: LIST
79964: PUSH
79965: LD_INT 2
79967: PUSH
79968: LD_INT 5
79970: PUSH
79971: EMPTY
79972: LIST
79973: LIST
79974: PUSH
79975: LD_INT 2
79977: NEG
79978: PUSH
79979: LD_INT 3
79981: PUSH
79982: EMPTY
79983: LIST
79984: LIST
79985: PUSH
79986: LD_INT 3
79988: NEG
79989: PUSH
79990: LD_INT 0
79992: PUSH
79993: EMPTY
79994: LIST
79995: LIST
79996: PUSH
79997: LD_INT 3
79999: NEG
80000: PUSH
80001: LD_INT 1
80003: NEG
80004: PUSH
80005: EMPTY
80006: LIST
80007: LIST
80008: PUSH
80009: LD_INT 2
80011: NEG
80012: PUSH
80013: LD_INT 0
80015: PUSH
80016: EMPTY
80017: LIST
80018: LIST
80019: PUSH
80020: LD_INT 2
80022: NEG
80023: PUSH
80024: LD_INT 1
80026: PUSH
80027: EMPTY
80028: LIST
80029: LIST
80030: PUSH
80031: LD_INT 3
80033: NEG
80034: PUSH
80035: LD_INT 1
80037: PUSH
80038: EMPTY
80039: LIST
80040: LIST
80041: PUSH
80042: LD_INT 4
80044: NEG
80045: PUSH
80046: LD_INT 0
80048: PUSH
80049: EMPTY
80050: LIST
80051: LIST
80052: PUSH
80053: LD_INT 4
80055: NEG
80056: PUSH
80057: LD_INT 1
80059: NEG
80060: PUSH
80061: EMPTY
80062: LIST
80063: LIST
80064: PUSH
80065: LD_INT 4
80067: NEG
80068: PUSH
80069: LD_INT 2
80071: NEG
80072: PUSH
80073: EMPTY
80074: LIST
80075: LIST
80076: PUSH
80077: LD_INT 2
80079: NEG
80080: PUSH
80081: LD_INT 2
80083: PUSH
80084: EMPTY
80085: LIST
80086: LIST
80087: PUSH
80088: LD_INT 4
80090: NEG
80091: PUSH
80092: LD_INT 4
80094: NEG
80095: PUSH
80096: EMPTY
80097: LIST
80098: LIST
80099: PUSH
80100: LD_INT 4
80102: NEG
80103: PUSH
80104: LD_INT 5
80106: NEG
80107: PUSH
80108: EMPTY
80109: LIST
80110: LIST
80111: PUSH
80112: LD_INT 3
80114: NEG
80115: PUSH
80116: LD_INT 4
80118: NEG
80119: PUSH
80120: EMPTY
80121: LIST
80122: LIST
80123: PUSH
80124: LD_INT 3
80126: NEG
80127: PUSH
80128: LD_INT 3
80130: NEG
80131: PUSH
80132: EMPTY
80133: LIST
80134: LIST
80135: PUSH
80136: LD_INT 4
80138: NEG
80139: PUSH
80140: LD_INT 3
80142: NEG
80143: PUSH
80144: EMPTY
80145: LIST
80146: LIST
80147: PUSH
80148: LD_INT 5
80150: NEG
80151: PUSH
80152: LD_INT 4
80154: NEG
80155: PUSH
80156: EMPTY
80157: LIST
80158: LIST
80159: PUSH
80160: LD_INT 5
80162: NEG
80163: PUSH
80164: LD_INT 5
80166: NEG
80167: PUSH
80168: EMPTY
80169: LIST
80170: LIST
80171: PUSH
80172: LD_INT 3
80174: NEG
80175: PUSH
80176: LD_INT 5
80178: NEG
80179: PUSH
80180: EMPTY
80181: LIST
80182: LIST
80183: PUSH
80184: LD_INT 5
80186: NEG
80187: PUSH
80188: LD_INT 3
80190: NEG
80191: PUSH
80192: EMPTY
80193: LIST
80194: LIST
80195: PUSH
80196: EMPTY
80197: LIST
80198: LIST
80199: LIST
80200: LIST
80201: LIST
80202: LIST
80203: LIST
80204: LIST
80205: LIST
80206: LIST
80207: LIST
80208: LIST
80209: LIST
80210: LIST
80211: LIST
80212: LIST
80213: LIST
80214: LIST
80215: LIST
80216: LIST
80217: LIST
80218: LIST
80219: LIST
80220: LIST
80221: LIST
80222: LIST
80223: LIST
80224: LIST
80225: LIST
80226: LIST
80227: LIST
80228: LIST
80229: LIST
80230: LIST
80231: LIST
80232: LIST
80233: LIST
80234: LIST
80235: LIST
80236: LIST
80237: LIST
80238: LIST
80239: LIST
80240: LIST
80241: LIST
80242: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
80243: LD_ADDR_VAR 0 30
80247: PUSH
80248: LD_INT 4
80250: PUSH
80251: LD_INT 4
80253: PUSH
80254: EMPTY
80255: LIST
80256: LIST
80257: PUSH
80258: LD_INT 4
80260: PUSH
80261: LD_INT 3
80263: PUSH
80264: EMPTY
80265: LIST
80266: LIST
80267: PUSH
80268: LD_INT 5
80270: PUSH
80271: LD_INT 4
80273: PUSH
80274: EMPTY
80275: LIST
80276: LIST
80277: PUSH
80278: LD_INT 5
80280: PUSH
80281: LD_INT 5
80283: PUSH
80284: EMPTY
80285: LIST
80286: LIST
80287: PUSH
80288: LD_INT 4
80290: PUSH
80291: LD_INT 5
80293: PUSH
80294: EMPTY
80295: LIST
80296: LIST
80297: PUSH
80298: LD_INT 3
80300: PUSH
80301: LD_INT 4
80303: PUSH
80304: EMPTY
80305: LIST
80306: LIST
80307: PUSH
80308: LD_INT 3
80310: PUSH
80311: LD_INT 3
80313: PUSH
80314: EMPTY
80315: LIST
80316: LIST
80317: PUSH
80318: LD_INT 5
80320: PUSH
80321: LD_INT 3
80323: PUSH
80324: EMPTY
80325: LIST
80326: LIST
80327: PUSH
80328: LD_INT 3
80330: PUSH
80331: LD_INT 5
80333: PUSH
80334: EMPTY
80335: LIST
80336: LIST
80337: PUSH
80338: LD_INT 0
80340: PUSH
80341: LD_INT 3
80343: PUSH
80344: EMPTY
80345: LIST
80346: LIST
80347: PUSH
80348: LD_INT 0
80350: PUSH
80351: LD_INT 2
80353: PUSH
80354: EMPTY
80355: LIST
80356: LIST
80357: PUSH
80358: LD_INT 1
80360: PUSH
80361: LD_INT 3
80363: PUSH
80364: EMPTY
80365: LIST
80366: LIST
80367: PUSH
80368: LD_INT 1
80370: PUSH
80371: LD_INT 4
80373: PUSH
80374: EMPTY
80375: LIST
80376: LIST
80377: PUSH
80378: LD_INT 0
80380: PUSH
80381: LD_INT 4
80383: PUSH
80384: EMPTY
80385: LIST
80386: LIST
80387: PUSH
80388: LD_INT 1
80390: NEG
80391: PUSH
80392: LD_INT 3
80394: PUSH
80395: EMPTY
80396: LIST
80397: LIST
80398: PUSH
80399: LD_INT 1
80401: NEG
80402: PUSH
80403: LD_INT 2
80405: PUSH
80406: EMPTY
80407: LIST
80408: LIST
80409: PUSH
80410: LD_INT 2
80412: PUSH
80413: LD_INT 4
80415: PUSH
80416: EMPTY
80417: LIST
80418: LIST
80419: PUSH
80420: LD_INT 2
80422: NEG
80423: PUSH
80424: LD_INT 2
80426: PUSH
80427: EMPTY
80428: LIST
80429: LIST
80430: PUSH
80431: LD_INT 4
80433: NEG
80434: PUSH
80435: LD_INT 0
80437: PUSH
80438: EMPTY
80439: LIST
80440: LIST
80441: PUSH
80442: LD_INT 4
80444: NEG
80445: PUSH
80446: LD_INT 1
80448: NEG
80449: PUSH
80450: EMPTY
80451: LIST
80452: LIST
80453: PUSH
80454: LD_INT 3
80456: NEG
80457: PUSH
80458: LD_INT 0
80460: PUSH
80461: EMPTY
80462: LIST
80463: LIST
80464: PUSH
80465: LD_INT 3
80467: NEG
80468: PUSH
80469: LD_INT 1
80471: PUSH
80472: EMPTY
80473: LIST
80474: LIST
80475: PUSH
80476: LD_INT 4
80478: NEG
80479: PUSH
80480: LD_INT 1
80482: PUSH
80483: EMPTY
80484: LIST
80485: LIST
80486: PUSH
80487: LD_INT 5
80489: NEG
80490: PUSH
80491: LD_INT 0
80493: PUSH
80494: EMPTY
80495: LIST
80496: LIST
80497: PUSH
80498: LD_INT 5
80500: NEG
80501: PUSH
80502: LD_INT 1
80504: NEG
80505: PUSH
80506: EMPTY
80507: LIST
80508: LIST
80509: PUSH
80510: LD_INT 5
80512: NEG
80513: PUSH
80514: LD_INT 2
80516: NEG
80517: PUSH
80518: EMPTY
80519: LIST
80520: LIST
80521: PUSH
80522: LD_INT 3
80524: NEG
80525: PUSH
80526: LD_INT 2
80528: PUSH
80529: EMPTY
80530: LIST
80531: LIST
80532: PUSH
80533: LD_INT 3
80535: NEG
80536: PUSH
80537: LD_INT 3
80539: NEG
80540: PUSH
80541: EMPTY
80542: LIST
80543: LIST
80544: PUSH
80545: LD_INT 3
80547: NEG
80548: PUSH
80549: LD_INT 4
80551: NEG
80552: PUSH
80553: EMPTY
80554: LIST
80555: LIST
80556: PUSH
80557: LD_INT 2
80559: NEG
80560: PUSH
80561: LD_INT 3
80563: NEG
80564: PUSH
80565: EMPTY
80566: LIST
80567: LIST
80568: PUSH
80569: LD_INT 2
80571: NEG
80572: PUSH
80573: LD_INT 2
80575: NEG
80576: PUSH
80577: EMPTY
80578: LIST
80579: LIST
80580: PUSH
80581: LD_INT 3
80583: NEG
80584: PUSH
80585: LD_INT 2
80587: NEG
80588: PUSH
80589: EMPTY
80590: LIST
80591: LIST
80592: PUSH
80593: LD_INT 4
80595: NEG
80596: PUSH
80597: LD_INT 3
80599: NEG
80600: PUSH
80601: EMPTY
80602: LIST
80603: LIST
80604: PUSH
80605: LD_INT 4
80607: NEG
80608: PUSH
80609: LD_INT 4
80611: NEG
80612: PUSH
80613: EMPTY
80614: LIST
80615: LIST
80616: PUSH
80617: LD_INT 2
80619: NEG
80620: PUSH
80621: LD_INT 4
80623: NEG
80624: PUSH
80625: EMPTY
80626: LIST
80627: LIST
80628: PUSH
80629: LD_INT 4
80631: NEG
80632: PUSH
80633: LD_INT 2
80635: NEG
80636: PUSH
80637: EMPTY
80638: LIST
80639: LIST
80640: PUSH
80641: LD_INT 0
80643: PUSH
80644: LD_INT 4
80646: NEG
80647: PUSH
80648: EMPTY
80649: LIST
80650: LIST
80651: PUSH
80652: LD_INT 0
80654: PUSH
80655: LD_INT 5
80657: NEG
80658: PUSH
80659: EMPTY
80660: LIST
80661: LIST
80662: PUSH
80663: LD_INT 1
80665: PUSH
80666: LD_INT 4
80668: NEG
80669: PUSH
80670: EMPTY
80671: LIST
80672: LIST
80673: PUSH
80674: LD_INT 1
80676: PUSH
80677: LD_INT 3
80679: NEG
80680: PUSH
80681: EMPTY
80682: LIST
80683: LIST
80684: PUSH
80685: LD_INT 0
80687: PUSH
80688: LD_INT 3
80690: NEG
80691: PUSH
80692: EMPTY
80693: LIST
80694: LIST
80695: PUSH
80696: LD_INT 1
80698: NEG
80699: PUSH
80700: LD_INT 4
80702: NEG
80703: PUSH
80704: EMPTY
80705: LIST
80706: LIST
80707: PUSH
80708: LD_INT 1
80710: NEG
80711: PUSH
80712: LD_INT 5
80714: NEG
80715: PUSH
80716: EMPTY
80717: LIST
80718: LIST
80719: PUSH
80720: LD_INT 2
80722: PUSH
80723: LD_INT 3
80725: NEG
80726: PUSH
80727: EMPTY
80728: LIST
80729: LIST
80730: PUSH
80731: LD_INT 2
80733: NEG
80734: PUSH
80735: LD_INT 5
80737: NEG
80738: PUSH
80739: EMPTY
80740: LIST
80741: LIST
80742: PUSH
80743: EMPTY
80744: LIST
80745: LIST
80746: LIST
80747: LIST
80748: LIST
80749: LIST
80750: LIST
80751: LIST
80752: LIST
80753: LIST
80754: LIST
80755: LIST
80756: LIST
80757: LIST
80758: LIST
80759: LIST
80760: LIST
80761: LIST
80762: LIST
80763: LIST
80764: LIST
80765: LIST
80766: LIST
80767: LIST
80768: LIST
80769: LIST
80770: LIST
80771: LIST
80772: LIST
80773: LIST
80774: LIST
80775: LIST
80776: LIST
80777: LIST
80778: LIST
80779: LIST
80780: LIST
80781: LIST
80782: LIST
80783: LIST
80784: LIST
80785: LIST
80786: LIST
80787: LIST
80788: LIST
80789: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
80790: LD_ADDR_VAR 0 31
80794: PUSH
80795: LD_INT 0
80797: PUSH
80798: LD_INT 4
80800: PUSH
80801: EMPTY
80802: LIST
80803: LIST
80804: PUSH
80805: LD_INT 0
80807: PUSH
80808: LD_INT 3
80810: PUSH
80811: EMPTY
80812: LIST
80813: LIST
80814: PUSH
80815: LD_INT 1
80817: PUSH
80818: LD_INT 4
80820: PUSH
80821: EMPTY
80822: LIST
80823: LIST
80824: PUSH
80825: LD_INT 1
80827: PUSH
80828: LD_INT 5
80830: PUSH
80831: EMPTY
80832: LIST
80833: LIST
80834: PUSH
80835: LD_INT 0
80837: PUSH
80838: LD_INT 5
80840: PUSH
80841: EMPTY
80842: LIST
80843: LIST
80844: PUSH
80845: LD_INT 1
80847: NEG
80848: PUSH
80849: LD_INT 4
80851: PUSH
80852: EMPTY
80853: LIST
80854: LIST
80855: PUSH
80856: LD_INT 1
80858: NEG
80859: PUSH
80860: LD_INT 3
80862: PUSH
80863: EMPTY
80864: LIST
80865: LIST
80866: PUSH
80867: LD_INT 2
80869: PUSH
80870: LD_INT 5
80872: PUSH
80873: EMPTY
80874: LIST
80875: LIST
80876: PUSH
80877: LD_INT 2
80879: NEG
80880: PUSH
80881: LD_INT 3
80883: PUSH
80884: EMPTY
80885: LIST
80886: LIST
80887: PUSH
80888: LD_INT 3
80890: NEG
80891: PUSH
80892: LD_INT 0
80894: PUSH
80895: EMPTY
80896: LIST
80897: LIST
80898: PUSH
80899: LD_INT 3
80901: NEG
80902: PUSH
80903: LD_INT 1
80905: NEG
80906: PUSH
80907: EMPTY
80908: LIST
80909: LIST
80910: PUSH
80911: LD_INT 2
80913: NEG
80914: PUSH
80915: LD_INT 0
80917: PUSH
80918: EMPTY
80919: LIST
80920: LIST
80921: PUSH
80922: LD_INT 2
80924: NEG
80925: PUSH
80926: LD_INT 1
80928: PUSH
80929: EMPTY
80930: LIST
80931: LIST
80932: PUSH
80933: LD_INT 3
80935: NEG
80936: PUSH
80937: LD_INT 1
80939: PUSH
80940: EMPTY
80941: LIST
80942: LIST
80943: PUSH
80944: LD_INT 4
80946: NEG
80947: PUSH
80948: LD_INT 0
80950: PUSH
80951: EMPTY
80952: LIST
80953: LIST
80954: PUSH
80955: LD_INT 4
80957: NEG
80958: PUSH
80959: LD_INT 1
80961: NEG
80962: PUSH
80963: EMPTY
80964: LIST
80965: LIST
80966: PUSH
80967: LD_INT 4
80969: NEG
80970: PUSH
80971: LD_INT 2
80973: NEG
80974: PUSH
80975: EMPTY
80976: LIST
80977: LIST
80978: PUSH
80979: LD_INT 2
80981: NEG
80982: PUSH
80983: LD_INT 2
80985: PUSH
80986: EMPTY
80987: LIST
80988: LIST
80989: PUSH
80990: LD_INT 4
80992: NEG
80993: PUSH
80994: LD_INT 4
80996: NEG
80997: PUSH
80998: EMPTY
80999: LIST
81000: LIST
81001: PUSH
81002: LD_INT 4
81004: NEG
81005: PUSH
81006: LD_INT 5
81008: NEG
81009: PUSH
81010: EMPTY
81011: LIST
81012: LIST
81013: PUSH
81014: LD_INT 3
81016: NEG
81017: PUSH
81018: LD_INT 4
81020: NEG
81021: PUSH
81022: EMPTY
81023: LIST
81024: LIST
81025: PUSH
81026: LD_INT 3
81028: NEG
81029: PUSH
81030: LD_INT 3
81032: NEG
81033: PUSH
81034: EMPTY
81035: LIST
81036: LIST
81037: PUSH
81038: LD_INT 4
81040: NEG
81041: PUSH
81042: LD_INT 3
81044: NEG
81045: PUSH
81046: EMPTY
81047: LIST
81048: LIST
81049: PUSH
81050: LD_INT 5
81052: NEG
81053: PUSH
81054: LD_INT 4
81056: NEG
81057: PUSH
81058: EMPTY
81059: LIST
81060: LIST
81061: PUSH
81062: LD_INT 5
81064: NEG
81065: PUSH
81066: LD_INT 5
81068: NEG
81069: PUSH
81070: EMPTY
81071: LIST
81072: LIST
81073: PUSH
81074: LD_INT 3
81076: NEG
81077: PUSH
81078: LD_INT 5
81080: NEG
81081: PUSH
81082: EMPTY
81083: LIST
81084: LIST
81085: PUSH
81086: LD_INT 5
81088: NEG
81089: PUSH
81090: LD_INT 3
81092: NEG
81093: PUSH
81094: EMPTY
81095: LIST
81096: LIST
81097: PUSH
81098: LD_INT 0
81100: PUSH
81101: LD_INT 3
81103: NEG
81104: PUSH
81105: EMPTY
81106: LIST
81107: LIST
81108: PUSH
81109: LD_INT 0
81111: PUSH
81112: LD_INT 4
81114: NEG
81115: PUSH
81116: EMPTY
81117: LIST
81118: LIST
81119: PUSH
81120: LD_INT 1
81122: PUSH
81123: LD_INT 3
81125: NEG
81126: PUSH
81127: EMPTY
81128: LIST
81129: LIST
81130: PUSH
81131: LD_INT 1
81133: PUSH
81134: LD_INT 2
81136: NEG
81137: PUSH
81138: EMPTY
81139: LIST
81140: LIST
81141: PUSH
81142: LD_INT 0
81144: PUSH
81145: LD_INT 2
81147: NEG
81148: PUSH
81149: EMPTY
81150: LIST
81151: LIST
81152: PUSH
81153: LD_INT 1
81155: NEG
81156: PUSH
81157: LD_INT 3
81159: NEG
81160: PUSH
81161: EMPTY
81162: LIST
81163: LIST
81164: PUSH
81165: LD_INT 1
81167: NEG
81168: PUSH
81169: LD_INT 4
81171: NEG
81172: PUSH
81173: EMPTY
81174: LIST
81175: LIST
81176: PUSH
81177: LD_INT 2
81179: PUSH
81180: LD_INT 2
81182: NEG
81183: PUSH
81184: EMPTY
81185: LIST
81186: LIST
81187: PUSH
81188: LD_INT 2
81190: NEG
81191: PUSH
81192: LD_INT 4
81194: NEG
81195: PUSH
81196: EMPTY
81197: LIST
81198: LIST
81199: PUSH
81200: LD_INT 4
81202: PUSH
81203: LD_INT 0
81205: PUSH
81206: EMPTY
81207: LIST
81208: LIST
81209: PUSH
81210: LD_INT 4
81212: PUSH
81213: LD_INT 1
81215: NEG
81216: PUSH
81217: EMPTY
81218: LIST
81219: LIST
81220: PUSH
81221: LD_INT 5
81223: PUSH
81224: LD_INT 0
81226: PUSH
81227: EMPTY
81228: LIST
81229: LIST
81230: PUSH
81231: LD_INT 5
81233: PUSH
81234: LD_INT 1
81236: PUSH
81237: EMPTY
81238: LIST
81239: LIST
81240: PUSH
81241: LD_INT 4
81243: PUSH
81244: LD_INT 1
81246: PUSH
81247: EMPTY
81248: LIST
81249: LIST
81250: PUSH
81251: LD_INT 3
81253: PUSH
81254: LD_INT 0
81256: PUSH
81257: EMPTY
81258: LIST
81259: LIST
81260: PUSH
81261: LD_INT 3
81263: PUSH
81264: LD_INT 1
81266: NEG
81267: PUSH
81268: EMPTY
81269: LIST
81270: LIST
81271: PUSH
81272: LD_INT 3
81274: PUSH
81275: LD_INT 2
81277: NEG
81278: PUSH
81279: EMPTY
81280: LIST
81281: LIST
81282: PUSH
81283: LD_INT 5
81285: PUSH
81286: LD_INT 2
81288: PUSH
81289: EMPTY
81290: LIST
81291: LIST
81292: PUSH
81293: EMPTY
81294: LIST
81295: LIST
81296: LIST
81297: LIST
81298: LIST
81299: LIST
81300: LIST
81301: LIST
81302: LIST
81303: LIST
81304: LIST
81305: LIST
81306: LIST
81307: LIST
81308: LIST
81309: LIST
81310: LIST
81311: LIST
81312: LIST
81313: LIST
81314: LIST
81315: LIST
81316: LIST
81317: LIST
81318: LIST
81319: LIST
81320: LIST
81321: LIST
81322: LIST
81323: LIST
81324: LIST
81325: LIST
81326: LIST
81327: LIST
81328: LIST
81329: LIST
81330: LIST
81331: LIST
81332: LIST
81333: LIST
81334: LIST
81335: LIST
81336: LIST
81337: LIST
81338: LIST
81339: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
81340: LD_ADDR_VAR 0 32
81344: PUSH
81345: LD_INT 4
81347: NEG
81348: PUSH
81349: LD_INT 0
81351: PUSH
81352: EMPTY
81353: LIST
81354: LIST
81355: PUSH
81356: LD_INT 4
81358: NEG
81359: PUSH
81360: LD_INT 1
81362: NEG
81363: PUSH
81364: EMPTY
81365: LIST
81366: LIST
81367: PUSH
81368: LD_INT 3
81370: NEG
81371: PUSH
81372: LD_INT 0
81374: PUSH
81375: EMPTY
81376: LIST
81377: LIST
81378: PUSH
81379: LD_INT 3
81381: NEG
81382: PUSH
81383: LD_INT 1
81385: PUSH
81386: EMPTY
81387: LIST
81388: LIST
81389: PUSH
81390: LD_INT 4
81392: NEG
81393: PUSH
81394: LD_INT 1
81396: PUSH
81397: EMPTY
81398: LIST
81399: LIST
81400: PUSH
81401: LD_INT 5
81403: NEG
81404: PUSH
81405: LD_INT 0
81407: PUSH
81408: EMPTY
81409: LIST
81410: LIST
81411: PUSH
81412: LD_INT 5
81414: NEG
81415: PUSH
81416: LD_INT 1
81418: NEG
81419: PUSH
81420: EMPTY
81421: LIST
81422: LIST
81423: PUSH
81424: LD_INT 5
81426: NEG
81427: PUSH
81428: LD_INT 2
81430: NEG
81431: PUSH
81432: EMPTY
81433: LIST
81434: LIST
81435: PUSH
81436: LD_INT 3
81438: NEG
81439: PUSH
81440: LD_INT 2
81442: PUSH
81443: EMPTY
81444: LIST
81445: LIST
81446: PUSH
81447: LD_INT 3
81449: NEG
81450: PUSH
81451: LD_INT 3
81453: NEG
81454: PUSH
81455: EMPTY
81456: LIST
81457: LIST
81458: PUSH
81459: LD_INT 3
81461: NEG
81462: PUSH
81463: LD_INT 4
81465: NEG
81466: PUSH
81467: EMPTY
81468: LIST
81469: LIST
81470: PUSH
81471: LD_INT 2
81473: NEG
81474: PUSH
81475: LD_INT 3
81477: NEG
81478: PUSH
81479: EMPTY
81480: LIST
81481: LIST
81482: PUSH
81483: LD_INT 2
81485: NEG
81486: PUSH
81487: LD_INT 2
81489: NEG
81490: PUSH
81491: EMPTY
81492: LIST
81493: LIST
81494: PUSH
81495: LD_INT 3
81497: NEG
81498: PUSH
81499: LD_INT 2
81501: NEG
81502: PUSH
81503: EMPTY
81504: LIST
81505: LIST
81506: PUSH
81507: LD_INT 4
81509: NEG
81510: PUSH
81511: LD_INT 3
81513: NEG
81514: PUSH
81515: EMPTY
81516: LIST
81517: LIST
81518: PUSH
81519: LD_INT 4
81521: NEG
81522: PUSH
81523: LD_INT 4
81525: NEG
81526: PUSH
81527: EMPTY
81528: LIST
81529: LIST
81530: PUSH
81531: LD_INT 2
81533: NEG
81534: PUSH
81535: LD_INT 4
81537: NEG
81538: PUSH
81539: EMPTY
81540: LIST
81541: LIST
81542: PUSH
81543: LD_INT 4
81545: NEG
81546: PUSH
81547: LD_INT 2
81549: NEG
81550: PUSH
81551: EMPTY
81552: LIST
81553: LIST
81554: PUSH
81555: LD_INT 0
81557: PUSH
81558: LD_INT 4
81560: NEG
81561: PUSH
81562: EMPTY
81563: LIST
81564: LIST
81565: PUSH
81566: LD_INT 0
81568: PUSH
81569: LD_INT 5
81571: NEG
81572: PUSH
81573: EMPTY
81574: LIST
81575: LIST
81576: PUSH
81577: LD_INT 1
81579: PUSH
81580: LD_INT 4
81582: NEG
81583: PUSH
81584: EMPTY
81585: LIST
81586: LIST
81587: PUSH
81588: LD_INT 1
81590: PUSH
81591: LD_INT 3
81593: NEG
81594: PUSH
81595: EMPTY
81596: LIST
81597: LIST
81598: PUSH
81599: LD_INT 0
81601: PUSH
81602: LD_INT 3
81604: NEG
81605: PUSH
81606: EMPTY
81607: LIST
81608: LIST
81609: PUSH
81610: LD_INT 1
81612: NEG
81613: PUSH
81614: LD_INT 4
81616: NEG
81617: PUSH
81618: EMPTY
81619: LIST
81620: LIST
81621: PUSH
81622: LD_INT 1
81624: NEG
81625: PUSH
81626: LD_INT 5
81628: NEG
81629: PUSH
81630: EMPTY
81631: LIST
81632: LIST
81633: PUSH
81634: LD_INT 2
81636: PUSH
81637: LD_INT 3
81639: NEG
81640: PUSH
81641: EMPTY
81642: LIST
81643: LIST
81644: PUSH
81645: LD_INT 2
81647: NEG
81648: PUSH
81649: LD_INT 5
81651: NEG
81652: PUSH
81653: EMPTY
81654: LIST
81655: LIST
81656: PUSH
81657: LD_INT 3
81659: PUSH
81660: LD_INT 0
81662: PUSH
81663: EMPTY
81664: LIST
81665: LIST
81666: PUSH
81667: LD_INT 3
81669: PUSH
81670: LD_INT 1
81672: NEG
81673: PUSH
81674: EMPTY
81675: LIST
81676: LIST
81677: PUSH
81678: LD_INT 4
81680: PUSH
81681: LD_INT 0
81683: PUSH
81684: EMPTY
81685: LIST
81686: LIST
81687: PUSH
81688: LD_INT 4
81690: PUSH
81691: LD_INT 1
81693: PUSH
81694: EMPTY
81695: LIST
81696: LIST
81697: PUSH
81698: LD_INT 3
81700: PUSH
81701: LD_INT 1
81703: PUSH
81704: EMPTY
81705: LIST
81706: LIST
81707: PUSH
81708: LD_INT 2
81710: PUSH
81711: LD_INT 0
81713: PUSH
81714: EMPTY
81715: LIST
81716: LIST
81717: PUSH
81718: LD_INT 2
81720: PUSH
81721: LD_INT 1
81723: NEG
81724: PUSH
81725: EMPTY
81726: LIST
81727: LIST
81728: PUSH
81729: LD_INT 2
81731: PUSH
81732: LD_INT 2
81734: NEG
81735: PUSH
81736: EMPTY
81737: LIST
81738: LIST
81739: PUSH
81740: LD_INT 4
81742: PUSH
81743: LD_INT 2
81745: PUSH
81746: EMPTY
81747: LIST
81748: LIST
81749: PUSH
81750: LD_INT 4
81752: PUSH
81753: LD_INT 4
81755: PUSH
81756: EMPTY
81757: LIST
81758: LIST
81759: PUSH
81760: LD_INT 4
81762: PUSH
81763: LD_INT 3
81765: PUSH
81766: EMPTY
81767: LIST
81768: LIST
81769: PUSH
81770: LD_INT 5
81772: PUSH
81773: LD_INT 4
81775: PUSH
81776: EMPTY
81777: LIST
81778: LIST
81779: PUSH
81780: LD_INT 5
81782: PUSH
81783: LD_INT 5
81785: PUSH
81786: EMPTY
81787: LIST
81788: LIST
81789: PUSH
81790: LD_INT 4
81792: PUSH
81793: LD_INT 5
81795: PUSH
81796: EMPTY
81797: LIST
81798: LIST
81799: PUSH
81800: LD_INT 3
81802: PUSH
81803: LD_INT 4
81805: PUSH
81806: EMPTY
81807: LIST
81808: LIST
81809: PUSH
81810: LD_INT 3
81812: PUSH
81813: LD_INT 3
81815: PUSH
81816: EMPTY
81817: LIST
81818: LIST
81819: PUSH
81820: LD_INT 5
81822: PUSH
81823: LD_INT 3
81825: PUSH
81826: EMPTY
81827: LIST
81828: LIST
81829: PUSH
81830: LD_INT 3
81832: PUSH
81833: LD_INT 5
81835: PUSH
81836: EMPTY
81837: LIST
81838: LIST
81839: PUSH
81840: EMPTY
81841: LIST
81842: LIST
81843: LIST
81844: LIST
81845: LIST
81846: LIST
81847: LIST
81848: LIST
81849: LIST
81850: LIST
81851: LIST
81852: LIST
81853: LIST
81854: LIST
81855: LIST
81856: LIST
81857: LIST
81858: LIST
81859: LIST
81860: LIST
81861: LIST
81862: LIST
81863: LIST
81864: LIST
81865: LIST
81866: LIST
81867: LIST
81868: LIST
81869: LIST
81870: LIST
81871: LIST
81872: LIST
81873: LIST
81874: LIST
81875: LIST
81876: LIST
81877: LIST
81878: LIST
81879: LIST
81880: LIST
81881: LIST
81882: LIST
81883: LIST
81884: LIST
81885: LIST
81886: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
81887: LD_ADDR_VAR 0 33
81891: PUSH
81892: LD_INT 4
81894: NEG
81895: PUSH
81896: LD_INT 4
81898: NEG
81899: PUSH
81900: EMPTY
81901: LIST
81902: LIST
81903: PUSH
81904: LD_INT 4
81906: NEG
81907: PUSH
81908: LD_INT 5
81910: NEG
81911: PUSH
81912: EMPTY
81913: LIST
81914: LIST
81915: PUSH
81916: LD_INT 3
81918: NEG
81919: PUSH
81920: LD_INT 4
81922: NEG
81923: PUSH
81924: EMPTY
81925: LIST
81926: LIST
81927: PUSH
81928: LD_INT 3
81930: NEG
81931: PUSH
81932: LD_INT 3
81934: NEG
81935: PUSH
81936: EMPTY
81937: LIST
81938: LIST
81939: PUSH
81940: LD_INT 4
81942: NEG
81943: PUSH
81944: LD_INT 3
81946: NEG
81947: PUSH
81948: EMPTY
81949: LIST
81950: LIST
81951: PUSH
81952: LD_INT 5
81954: NEG
81955: PUSH
81956: LD_INT 4
81958: NEG
81959: PUSH
81960: EMPTY
81961: LIST
81962: LIST
81963: PUSH
81964: LD_INT 5
81966: NEG
81967: PUSH
81968: LD_INT 5
81970: NEG
81971: PUSH
81972: EMPTY
81973: LIST
81974: LIST
81975: PUSH
81976: LD_INT 3
81978: NEG
81979: PUSH
81980: LD_INT 5
81982: NEG
81983: PUSH
81984: EMPTY
81985: LIST
81986: LIST
81987: PUSH
81988: LD_INT 5
81990: NEG
81991: PUSH
81992: LD_INT 3
81994: NEG
81995: PUSH
81996: EMPTY
81997: LIST
81998: LIST
81999: PUSH
82000: LD_INT 0
82002: PUSH
82003: LD_INT 3
82005: NEG
82006: PUSH
82007: EMPTY
82008: LIST
82009: LIST
82010: PUSH
82011: LD_INT 0
82013: PUSH
82014: LD_INT 4
82016: NEG
82017: PUSH
82018: EMPTY
82019: LIST
82020: LIST
82021: PUSH
82022: LD_INT 1
82024: PUSH
82025: LD_INT 3
82027: NEG
82028: PUSH
82029: EMPTY
82030: LIST
82031: LIST
82032: PUSH
82033: LD_INT 1
82035: PUSH
82036: LD_INT 2
82038: NEG
82039: PUSH
82040: EMPTY
82041: LIST
82042: LIST
82043: PUSH
82044: LD_INT 0
82046: PUSH
82047: LD_INT 2
82049: NEG
82050: PUSH
82051: EMPTY
82052: LIST
82053: LIST
82054: PUSH
82055: LD_INT 1
82057: NEG
82058: PUSH
82059: LD_INT 3
82061: NEG
82062: PUSH
82063: EMPTY
82064: LIST
82065: LIST
82066: PUSH
82067: LD_INT 1
82069: NEG
82070: PUSH
82071: LD_INT 4
82073: NEG
82074: PUSH
82075: EMPTY
82076: LIST
82077: LIST
82078: PUSH
82079: LD_INT 2
82081: PUSH
82082: LD_INT 2
82084: NEG
82085: PUSH
82086: EMPTY
82087: LIST
82088: LIST
82089: PUSH
82090: LD_INT 2
82092: NEG
82093: PUSH
82094: LD_INT 4
82096: NEG
82097: PUSH
82098: EMPTY
82099: LIST
82100: LIST
82101: PUSH
82102: LD_INT 4
82104: PUSH
82105: LD_INT 0
82107: PUSH
82108: EMPTY
82109: LIST
82110: LIST
82111: PUSH
82112: LD_INT 4
82114: PUSH
82115: LD_INT 1
82117: NEG
82118: PUSH
82119: EMPTY
82120: LIST
82121: LIST
82122: PUSH
82123: LD_INT 5
82125: PUSH
82126: LD_INT 0
82128: PUSH
82129: EMPTY
82130: LIST
82131: LIST
82132: PUSH
82133: LD_INT 5
82135: PUSH
82136: LD_INT 1
82138: PUSH
82139: EMPTY
82140: LIST
82141: LIST
82142: PUSH
82143: LD_INT 4
82145: PUSH
82146: LD_INT 1
82148: PUSH
82149: EMPTY
82150: LIST
82151: LIST
82152: PUSH
82153: LD_INT 3
82155: PUSH
82156: LD_INT 0
82158: PUSH
82159: EMPTY
82160: LIST
82161: LIST
82162: PUSH
82163: LD_INT 3
82165: PUSH
82166: LD_INT 1
82168: NEG
82169: PUSH
82170: EMPTY
82171: LIST
82172: LIST
82173: PUSH
82174: LD_INT 3
82176: PUSH
82177: LD_INT 2
82179: NEG
82180: PUSH
82181: EMPTY
82182: LIST
82183: LIST
82184: PUSH
82185: LD_INT 5
82187: PUSH
82188: LD_INT 2
82190: PUSH
82191: EMPTY
82192: LIST
82193: LIST
82194: PUSH
82195: LD_INT 3
82197: PUSH
82198: LD_INT 3
82200: PUSH
82201: EMPTY
82202: LIST
82203: LIST
82204: PUSH
82205: LD_INT 3
82207: PUSH
82208: LD_INT 2
82210: PUSH
82211: EMPTY
82212: LIST
82213: LIST
82214: PUSH
82215: LD_INT 4
82217: PUSH
82218: LD_INT 3
82220: PUSH
82221: EMPTY
82222: LIST
82223: LIST
82224: PUSH
82225: LD_INT 4
82227: PUSH
82228: LD_INT 4
82230: PUSH
82231: EMPTY
82232: LIST
82233: LIST
82234: PUSH
82235: LD_INT 3
82237: PUSH
82238: LD_INT 4
82240: PUSH
82241: EMPTY
82242: LIST
82243: LIST
82244: PUSH
82245: LD_INT 2
82247: PUSH
82248: LD_INT 3
82250: PUSH
82251: EMPTY
82252: LIST
82253: LIST
82254: PUSH
82255: LD_INT 2
82257: PUSH
82258: LD_INT 2
82260: PUSH
82261: EMPTY
82262: LIST
82263: LIST
82264: PUSH
82265: LD_INT 4
82267: PUSH
82268: LD_INT 2
82270: PUSH
82271: EMPTY
82272: LIST
82273: LIST
82274: PUSH
82275: LD_INT 2
82277: PUSH
82278: LD_INT 4
82280: PUSH
82281: EMPTY
82282: LIST
82283: LIST
82284: PUSH
82285: LD_INT 0
82287: PUSH
82288: LD_INT 4
82290: PUSH
82291: EMPTY
82292: LIST
82293: LIST
82294: PUSH
82295: LD_INT 0
82297: PUSH
82298: LD_INT 3
82300: PUSH
82301: EMPTY
82302: LIST
82303: LIST
82304: PUSH
82305: LD_INT 1
82307: PUSH
82308: LD_INT 4
82310: PUSH
82311: EMPTY
82312: LIST
82313: LIST
82314: PUSH
82315: LD_INT 1
82317: PUSH
82318: LD_INT 5
82320: PUSH
82321: EMPTY
82322: LIST
82323: LIST
82324: PUSH
82325: LD_INT 0
82327: PUSH
82328: LD_INT 5
82330: PUSH
82331: EMPTY
82332: LIST
82333: LIST
82334: PUSH
82335: LD_INT 1
82337: NEG
82338: PUSH
82339: LD_INT 4
82341: PUSH
82342: EMPTY
82343: LIST
82344: LIST
82345: PUSH
82346: LD_INT 1
82348: NEG
82349: PUSH
82350: LD_INT 3
82352: PUSH
82353: EMPTY
82354: LIST
82355: LIST
82356: PUSH
82357: LD_INT 2
82359: PUSH
82360: LD_INT 5
82362: PUSH
82363: EMPTY
82364: LIST
82365: LIST
82366: PUSH
82367: LD_INT 2
82369: NEG
82370: PUSH
82371: LD_INT 3
82373: PUSH
82374: EMPTY
82375: LIST
82376: LIST
82377: PUSH
82378: EMPTY
82379: LIST
82380: LIST
82381: LIST
82382: LIST
82383: LIST
82384: LIST
82385: LIST
82386: LIST
82387: LIST
82388: LIST
82389: LIST
82390: LIST
82391: LIST
82392: LIST
82393: LIST
82394: LIST
82395: LIST
82396: LIST
82397: LIST
82398: LIST
82399: LIST
82400: LIST
82401: LIST
82402: LIST
82403: LIST
82404: LIST
82405: LIST
82406: LIST
82407: LIST
82408: LIST
82409: LIST
82410: LIST
82411: LIST
82412: LIST
82413: LIST
82414: LIST
82415: LIST
82416: LIST
82417: LIST
82418: LIST
82419: LIST
82420: LIST
82421: LIST
82422: LIST
82423: LIST
82424: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
82425: LD_ADDR_VAR 0 34
82429: PUSH
82430: LD_INT 0
82432: PUSH
82433: LD_INT 4
82435: NEG
82436: PUSH
82437: EMPTY
82438: LIST
82439: LIST
82440: PUSH
82441: LD_INT 0
82443: PUSH
82444: LD_INT 5
82446: NEG
82447: PUSH
82448: EMPTY
82449: LIST
82450: LIST
82451: PUSH
82452: LD_INT 1
82454: PUSH
82455: LD_INT 4
82457: NEG
82458: PUSH
82459: EMPTY
82460: LIST
82461: LIST
82462: PUSH
82463: LD_INT 1
82465: PUSH
82466: LD_INT 3
82468: NEG
82469: PUSH
82470: EMPTY
82471: LIST
82472: LIST
82473: PUSH
82474: LD_INT 0
82476: PUSH
82477: LD_INT 3
82479: NEG
82480: PUSH
82481: EMPTY
82482: LIST
82483: LIST
82484: PUSH
82485: LD_INT 1
82487: NEG
82488: PUSH
82489: LD_INT 4
82491: NEG
82492: PUSH
82493: EMPTY
82494: LIST
82495: LIST
82496: PUSH
82497: LD_INT 1
82499: NEG
82500: PUSH
82501: LD_INT 5
82503: NEG
82504: PUSH
82505: EMPTY
82506: LIST
82507: LIST
82508: PUSH
82509: LD_INT 2
82511: PUSH
82512: LD_INT 3
82514: NEG
82515: PUSH
82516: EMPTY
82517: LIST
82518: LIST
82519: PUSH
82520: LD_INT 2
82522: NEG
82523: PUSH
82524: LD_INT 5
82526: NEG
82527: PUSH
82528: EMPTY
82529: LIST
82530: LIST
82531: PUSH
82532: LD_INT 3
82534: PUSH
82535: LD_INT 0
82537: PUSH
82538: EMPTY
82539: LIST
82540: LIST
82541: PUSH
82542: LD_INT 3
82544: PUSH
82545: LD_INT 1
82547: NEG
82548: PUSH
82549: EMPTY
82550: LIST
82551: LIST
82552: PUSH
82553: LD_INT 4
82555: PUSH
82556: LD_INT 0
82558: PUSH
82559: EMPTY
82560: LIST
82561: LIST
82562: PUSH
82563: LD_INT 4
82565: PUSH
82566: LD_INT 1
82568: PUSH
82569: EMPTY
82570: LIST
82571: LIST
82572: PUSH
82573: LD_INT 3
82575: PUSH
82576: LD_INT 1
82578: PUSH
82579: EMPTY
82580: LIST
82581: LIST
82582: PUSH
82583: LD_INT 2
82585: PUSH
82586: LD_INT 0
82588: PUSH
82589: EMPTY
82590: LIST
82591: LIST
82592: PUSH
82593: LD_INT 2
82595: PUSH
82596: LD_INT 1
82598: NEG
82599: PUSH
82600: EMPTY
82601: LIST
82602: LIST
82603: PUSH
82604: LD_INT 2
82606: PUSH
82607: LD_INT 2
82609: NEG
82610: PUSH
82611: EMPTY
82612: LIST
82613: LIST
82614: PUSH
82615: LD_INT 4
82617: PUSH
82618: LD_INT 2
82620: PUSH
82621: EMPTY
82622: LIST
82623: LIST
82624: PUSH
82625: LD_INT 4
82627: PUSH
82628: LD_INT 4
82630: PUSH
82631: EMPTY
82632: LIST
82633: LIST
82634: PUSH
82635: LD_INT 4
82637: PUSH
82638: LD_INT 3
82640: PUSH
82641: EMPTY
82642: LIST
82643: LIST
82644: PUSH
82645: LD_INT 5
82647: PUSH
82648: LD_INT 4
82650: PUSH
82651: EMPTY
82652: LIST
82653: LIST
82654: PUSH
82655: LD_INT 5
82657: PUSH
82658: LD_INT 5
82660: PUSH
82661: EMPTY
82662: LIST
82663: LIST
82664: PUSH
82665: LD_INT 4
82667: PUSH
82668: LD_INT 5
82670: PUSH
82671: EMPTY
82672: LIST
82673: LIST
82674: PUSH
82675: LD_INT 3
82677: PUSH
82678: LD_INT 4
82680: PUSH
82681: EMPTY
82682: LIST
82683: LIST
82684: PUSH
82685: LD_INT 3
82687: PUSH
82688: LD_INT 3
82690: PUSH
82691: EMPTY
82692: LIST
82693: LIST
82694: PUSH
82695: LD_INT 5
82697: PUSH
82698: LD_INT 3
82700: PUSH
82701: EMPTY
82702: LIST
82703: LIST
82704: PUSH
82705: LD_INT 3
82707: PUSH
82708: LD_INT 5
82710: PUSH
82711: EMPTY
82712: LIST
82713: LIST
82714: PUSH
82715: LD_INT 0
82717: PUSH
82718: LD_INT 3
82720: PUSH
82721: EMPTY
82722: LIST
82723: LIST
82724: PUSH
82725: LD_INT 0
82727: PUSH
82728: LD_INT 2
82730: PUSH
82731: EMPTY
82732: LIST
82733: LIST
82734: PUSH
82735: LD_INT 1
82737: PUSH
82738: LD_INT 3
82740: PUSH
82741: EMPTY
82742: LIST
82743: LIST
82744: PUSH
82745: LD_INT 1
82747: PUSH
82748: LD_INT 4
82750: PUSH
82751: EMPTY
82752: LIST
82753: LIST
82754: PUSH
82755: LD_INT 0
82757: PUSH
82758: LD_INT 4
82760: PUSH
82761: EMPTY
82762: LIST
82763: LIST
82764: PUSH
82765: LD_INT 1
82767: NEG
82768: PUSH
82769: LD_INT 3
82771: PUSH
82772: EMPTY
82773: LIST
82774: LIST
82775: PUSH
82776: LD_INT 1
82778: NEG
82779: PUSH
82780: LD_INT 2
82782: PUSH
82783: EMPTY
82784: LIST
82785: LIST
82786: PUSH
82787: LD_INT 2
82789: PUSH
82790: LD_INT 4
82792: PUSH
82793: EMPTY
82794: LIST
82795: LIST
82796: PUSH
82797: LD_INT 2
82799: NEG
82800: PUSH
82801: LD_INT 2
82803: PUSH
82804: EMPTY
82805: LIST
82806: LIST
82807: PUSH
82808: LD_INT 4
82810: NEG
82811: PUSH
82812: LD_INT 0
82814: PUSH
82815: EMPTY
82816: LIST
82817: LIST
82818: PUSH
82819: LD_INT 4
82821: NEG
82822: PUSH
82823: LD_INT 1
82825: NEG
82826: PUSH
82827: EMPTY
82828: LIST
82829: LIST
82830: PUSH
82831: LD_INT 3
82833: NEG
82834: PUSH
82835: LD_INT 0
82837: PUSH
82838: EMPTY
82839: LIST
82840: LIST
82841: PUSH
82842: LD_INT 3
82844: NEG
82845: PUSH
82846: LD_INT 1
82848: PUSH
82849: EMPTY
82850: LIST
82851: LIST
82852: PUSH
82853: LD_INT 4
82855: NEG
82856: PUSH
82857: LD_INT 1
82859: PUSH
82860: EMPTY
82861: LIST
82862: LIST
82863: PUSH
82864: LD_INT 5
82866: NEG
82867: PUSH
82868: LD_INT 0
82870: PUSH
82871: EMPTY
82872: LIST
82873: LIST
82874: PUSH
82875: LD_INT 5
82877: NEG
82878: PUSH
82879: LD_INT 1
82881: NEG
82882: PUSH
82883: EMPTY
82884: LIST
82885: LIST
82886: PUSH
82887: LD_INT 5
82889: NEG
82890: PUSH
82891: LD_INT 2
82893: NEG
82894: PUSH
82895: EMPTY
82896: LIST
82897: LIST
82898: PUSH
82899: LD_INT 3
82901: NEG
82902: PUSH
82903: LD_INT 2
82905: PUSH
82906: EMPTY
82907: LIST
82908: LIST
82909: PUSH
82910: EMPTY
82911: LIST
82912: LIST
82913: LIST
82914: LIST
82915: LIST
82916: LIST
82917: LIST
82918: LIST
82919: LIST
82920: LIST
82921: LIST
82922: LIST
82923: LIST
82924: LIST
82925: LIST
82926: LIST
82927: LIST
82928: LIST
82929: LIST
82930: LIST
82931: LIST
82932: LIST
82933: LIST
82934: LIST
82935: LIST
82936: LIST
82937: LIST
82938: LIST
82939: LIST
82940: LIST
82941: LIST
82942: LIST
82943: LIST
82944: LIST
82945: LIST
82946: LIST
82947: LIST
82948: LIST
82949: LIST
82950: LIST
82951: LIST
82952: LIST
82953: LIST
82954: LIST
82955: LIST
82956: ST_TO_ADDR
// end ; end ;
82957: GO 82960
82959: POP
// case btype of b_depot , b_warehouse :
82960: LD_VAR 0 1
82964: PUSH
82965: LD_INT 0
82967: DOUBLE
82968: EQUAL
82969: IFTRUE 82979
82971: LD_INT 1
82973: DOUBLE
82974: EQUAL
82975: IFTRUE 82979
82977: GO 83180
82979: POP
// case nation of nation_american :
82980: LD_VAR 0 5
82984: PUSH
82985: LD_INT 1
82987: DOUBLE
82988: EQUAL
82989: IFTRUE 82993
82991: GO 83049
82993: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
82994: LD_ADDR_VAR 0 9
82998: PUSH
82999: LD_VAR 0 11
83003: PUSH
83004: LD_VAR 0 12
83008: PUSH
83009: LD_VAR 0 13
83013: PUSH
83014: LD_VAR 0 14
83018: PUSH
83019: LD_VAR 0 15
83023: PUSH
83024: LD_VAR 0 16
83028: PUSH
83029: EMPTY
83030: LIST
83031: LIST
83032: LIST
83033: LIST
83034: LIST
83035: LIST
83036: PUSH
83037: LD_VAR 0 4
83041: PUSH
83042: LD_INT 1
83044: PLUS
83045: ARRAY
83046: ST_TO_ADDR
83047: GO 83178
83049: LD_INT 2
83051: DOUBLE
83052: EQUAL
83053: IFTRUE 83057
83055: GO 83113
83057: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
83058: LD_ADDR_VAR 0 9
83062: PUSH
83063: LD_VAR 0 17
83067: PUSH
83068: LD_VAR 0 18
83072: PUSH
83073: LD_VAR 0 19
83077: PUSH
83078: LD_VAR 0 20
83082: PUSH
83083: LD_VAR 0 21
83087: PUSH
83088: LD_VAR 0 22
83092: PUSH
83093: EMPTY
83094: LIST
83095: LIST
83096: LIST
83097: LIST
83098: LIST
83099: LIST
83100: PUSH
83101: LD_VAR 0 4
83105: PUSH
83106: LD_INT 1
83108: PLUS
83109: ARRAY
83110: ST_TO_ADDR
83111: GO 83178
83113: LD_INT 3
83115: DOUBLE
83116: EQUAL
83117: IFTRUE 83121
83119: GO 83177
83121: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
83122: LD_ADDR_VAR 0 9
83126: PUSH
83127: LD_VAR 0 23
83131: PUSH
83132: LD_VAR 0 24
83136: PUSH
83137: LD_VAR 0 25
83141: PUSH
83142: LD_VAR 0 26
83146: PUSH
83147: LD_VAR 0 27
83151: PUSH
83152: LD_VAR 0 28
83156: PUSH
83157: EMPTY
83158: LIST
83159: LIST
83160: LIST
83161: LIST
83162: LIST
83163: LIST
83164: PUSH
83165: LD_VAR 0 4
83169: PUSH
83170: LD_INT 1
83172: PLUS
83173: ARRAY
83174: ST_TO_ADDR
83175: GO 83178
83177: POP
83178: GO 83733
83180: LD_INT 2
83182: DOUBLE
83183: EQUAL
83184: IFTRUE 83194
83186: LD_INT 3
83188: DOUBLE
83189: EQUAL
83190: IFTRUE 83194
83192: GO 83250
83194: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
83195: LD_ADDR_VAR 0 9
83199: PUSH
83200: LD_VAR 0 29
83204: PUSH
83205: LD_VAR 0 30
83209: PUSH
83210: LD_VAR 0 31
83214: PUSH
83215: LD_VAR 0 32
83219: PUSH
83220: LD_VAR 0 33
83224: PUSH
83225: LD_VAR 0 34
83229: PUSH
83230: EMPTY
83231: LIST
83232: LIST
83233: LIST
83234: LIST
83235: LIST
83236: LIST
83237: PUSH
83238: LD_VAR 0 4
83242: PUSH
83243: LD_INT 1
83245: PLUS
83246: ARRAY
83247: ST_TO_ADDR
83248: GO 83733
83250: LD_INT 16
83252: DOUBLE
83253: EQUAL
83254: IFTRUE 83312
83256: LD_INT 17
83258: DOUBLE
83259: EQUAL
83260: IFTRUE 83312
83262: LD_INT 18
83264: DOUBLE
83265: EQUAL
83266: IFTRUE 83312
83268: LD_INT 19
83270: DOUBLE
83271: EQUAL
83272: IFTRUE 83312
83274: LD_INT 22
83276: DOUBLE
83277: EQUAL
83278: IFTRUE 83312
83280: LD_INT 20
83282: DOUBLE
83283: EQUAL
83284: IFTRUE 83312
83286: LD_INT 21
83288: DOUBLE
83289: EQUAL
83290: IFTRUE 83312
83292: LD_INT 23
83294: DOUBLE
83295: EQUAL
83296: IFTRUE 83312
83298: LD_INT 24
83300: DOUBLE
83301: EQUAL
83302: IFTRUE 83312
83304: LD_INT 25
83306: DOUBLE
83307: EQUAL
83308: IFTRUE 83312
83310: GO 83368
83312: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
83313: LD_ADDR_VAR 0 9
83317: PUSH
83318: LD_VAR 0 35
83322: PUSH
83323: LD_VAR 0 36
83327: PUSH
83328: LD_VAR 0 37
83332: PUSH
83333: LD_VAR 0 38
83337: PUSH
83338: LD_VAR 0 39
83342: PUSH
83343: LD_VAR 0 40
83347: PUSH
83348: EMPTY
83349: LIST
83350: LIST
83351: LIST
83352: LIST
83353: LIST
83354: LIST
83355: PUSH
83356: LD_VAR 0 4
83360: PUSH
83361: LD_INT 1
83363: PLUS
83364: ARRAY
83365: ST_TO_ADDR
83366: GO 83733
83368: LD_INT 6
83370: DOUBLE
83371: EQUAL
83372: IFTRUE 83424
83374: LD_INT 7
83376: DOUBLE
83377: EQUAL
83378: IFTRUE 83424
83380: LD_INT 8
83382: DOUBLE
83383: EQUAL
83384: IFTRUE 83424
83386: LD_INT 13
83388: DOUBLE
83389: EQUAL
83390: IFTRUE 83424
83392: LD_INT 12
83394: DOUBLE
83395: EQUAL
83396: IFTRUE 83424
83398: LD_INT 15
83400: DOUBLE
83401: EQUAL
83402: IFTRUE 83424
83404: LD_INT 11
83406: DOUBLE
83407: EQUAL
83408: IFTRUE 83424
83410: LD_INT 14
83412: DOUBLE
83413: EQUAL
83414: IFTRUE 83424
83416: LD_INT 10
83418: DOUBLE
83419: EQUAL
83420: IFTRUE 83424
83422: GO 83480
83424: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
83425: LD_ADDR_VAR 0 9
83429: PUSH
83430: LD_VAR 0 41
83434: PUSH
83435: LD_VAR 0 42
83439: PUSH
83440: LD_VAR 0 43
83444: PUSH
83445: LD_VAR 0 44
83449: PUSH
83450: LD_VAR 0 45
83454: PUSH
83455: LD_VAR 0 46
83459: PUSH
83460: EMPTY
83461: LIST
83462: LIST
83463: LIST
83464: LIST
83465: LIST
83466: LIST
83467: PUSH
83468: LD_VAR 0 4
83472: PUSH
83473: LD_INT 1
83475: PLUS
83476: ARRAY
83477: ST_TO_ADDR
83478: GO 83733
83480: LD_INT 36
83482: DOUBLE
83483: EQUAL
83484: IFTRUE 83488
83486: GO 83544
83488: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
83489: LD_ADDR_VAR 0 9
83493: PUSH
83494: LD_VAR 0 47
83498: PUSH
83499: LD_VAR 0 48
83503: PUSH
83504: LD_VAR 0 49
83508: PUSH
83509: LD_VAR 0 50
83513: PUSH
83514: LD_VAR 0 51
83518: PUSH
83519: LD_VAR 0 52
83523: PUSH
83524: EMPTY
83525: LIST
83526: LIST
83527: LIST
83528: LIST
83529: LIST
83530: LIST
83531: PUSH
83532: LD_VAR 0 4
83536: PUSH
83537: LD_INT 1
83539: PLUS
83540: ARRAY
83541: ST_TO_ADDR
83542: GO 83733
83544: LD_INT 4
83546: DOUBLE
83547: EQUAL
83548: IFTRUE 83570
83550: LD_INT 5
83552: DOUBLE
83553: EQUAL
83554: IFTRUE 83570
83556: LD_INT 34
83558: DOUBLE
83559: EQUAL
83560: IFTRUE 83570
83562: LD_INT 37
83564: DOUBLE
83565: EQUAL
83566: IFTRUE 83570
83568: GO 83626
83570: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
83571: LD_ADDR_VAR 0 9
83575: PUSH
83576: LD_VAR 0 53
83580: PUSH
83581: LD_VAR 0 54
83585: PUSH
83586: LD_VAR 0 55
83590: PUSH
83591: LD_VAR 0 56
83595: PUSH
83596: LD_VAR 0 57
83600: PUSH
83601: LD_VAR 0 58
83605: PUSH
83606: EMPTY
83607: LIST
83608: LIST
83609: LIST
83610: LIST
83611: LIST
83612: LIST
83613: PUSH
83614: LD_VAR 0 4
83618: PUSH
83619: LD_INT 1
83621: PLUS
83622: ARRAY
83623: ST_TO_ADDR
83624: GO 83733
83626: LD_INT 31
83628: DOUBLE
83629: EQUAL
83630: IFTRUE 83676
83632: LD_INT 32
83634: DOUBLE
83635: EQUAL
83636: IFTRUE 83676
83638: LD_INT 33
83640: DOUBLE
83641: EQUAL
83642: IFTRUE 83676
83644: LD_INT 27
83646: DOUBLE
83647: EQUAL
83648: IFTRUE 83676
83650: LD_INT 26
83652: DOUBLE
83653: EQUAL
83654: IFTRUE 83676
83656: LD_INT 28
83658: DOUBLE
83659: EQUAL
83660: IFTRUE 83676
83662: LD_INT 29
83664: DOUBLE
83665: EQUAL
83666: IFTRUE 83676
83668: LD_INT 30
83670: DOUBLE
83671: EQUAL
83672: IFTRUE 83676
83674: GO 83732
83676: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
83677: LD_ADDR_VAR 0 9
83681: PUSH
83682: LD_VAR 0 59
83686: PUSH
83687: LD_VAR 0 60
83691: PUSH
83692: LD_VAR 0 61
83696: PUSH
83697: LD_VAR 0 62
83701: PUSH
83702: LD_VAR 0 63
83706: PUSH
83707: LD_VAR 0 64
83711: PUSH
83712: EMPTY
83713: LIST
83714: LIST
83715: LIST
83716: LIST
83717: LIST
83718: LIST
83719: PUSH
83720: LD_VAR 0 4
83724: PUSH
83725: LD_INT 1
83727: PLUS
83728: ARRAY
83729: ST_TO_ADDR
83730: GO 83733
83732: POP
// temp_list2 = [ ] ;
83733: LD_ADDR_VAR 0 10
83737: PUSH
83738: EMPTY
83739: ST_TO_ADDR
// for i in temp_list do
83740: LD_ADDR_VAR 0 8
83744: PUSH
83745: LD_VAR 0 9
83749: PUSH
83750: FOR_IN
83751: IFFALSE 83803
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
83753: LD_ADDR_VAR 0 10
83757: PUSH
83758: LD_VAR 0 10
83762: PUSH
83763: LD_VAR 0 8
83767: PUSH
83768: LD_INT 1
83770: ARRAY
83771: PUSH
83772: LD_VAR 0 2
83776: PLUS
83777: PUSH
83778: LD_VAR 0 8
83782: PUSH
83783: LD_INT 2
83785: ARRAY
83786: PUSH
83787: LD_VAR 0 3
83791: PLUS
83792: PUSH
83793: EMPTY
83794: LIST
83795: LIST
83796: PUSH
83797: EMPTY
83798: LIST
83799: ADD
83800: ST_TO_ADDR
83801: GO 83750
83803: POP
83804: POP
// result = temp_list2 ;
83805: LD_ADDR_VAR 0 7
83809: PUSH
83810: LD_VAR 0 10
83814: ST_TO_ADDR
// end ;
83815: LD_VAR 0 7
83819: RET
// export function EnemyInRange ( unit , dist ) ; begin
83820: LD_INT 0
83822: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
83823: LD_ADDR_VAR 0 3
83827: PUSH
83828: LD_VAR 0 1
83832: PPUSH
83833: CALL_OW 255
83837: PPUSH
83838: LD_VAR 0 1
83842: PPUSH
83843: CALL_OW 250
83847: PPUSH
83848: LD_VAR 0 1
83852: PPUSH
83853: CALL_OW 251
83857: PPUSH
83858: LD_VAR 0 2
83862: PPUSH
83863: CALL 57193 0 4
83867: PUSH
83868: LD_INT 4
83870: ARRAY
83871: ST_TO_ADDR
// end ;
83872: LD_VAR 0 3
83876: RET
// export function PlayerSeeMe ( unit ) ; begin
83877: LD_INT 0
83879: PPUSH
// result := See ( your_side , unit ) ;
83880: LD_ADDR_VAR 0 2
83884: PUSH
83885: LD_OWVAR 2
83889: PPUSH
83890: LD_VAR 0 1
83894: PPUSH
83895: CALL_OW 292
83899: ST_TO_ADDR
// end ;
83900: LD_VAR 0 2
83904: RET
// export function ReverseDir ( unit ) ; begin
83905: LD_INT 0
83907: PPUSH
// if not unit then
83908: LD_VAR 0 1
83912: NOT
83913: IFFALSE 83917
// exit ;
83915: GO 83940
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
83917: LD_ADDR_VAR 0 2
83921: PUSH
83922: LD_VAR 0 1
83926: PPUSH
83927: CALL_OW 254
83931: PUSH
83932: LD_INT 3
83934: PLUS
83935: PUSH
83936: LD_INT 6
83938: MOD
83939: ST_TO_ADDR
// end ;
83940: LD_VAR 0 2
83944: RET
// export function ReverseArray ( array ) ; var i ; begin
83945: LD_INT 0
83947: PPUSH
83948: PPUSH
// if not array then
83949: LD_VAR 0 1
83953: NOT
83954: IFFALSE 83958
// exit ;
83956: GO 84013
// result := [ ] ;
83958: LD_ADDR_VAR 0 2
83962: PUSH
83963: EMPTY
83964: ST_TO_ADDR
// for i := array downto 1 do
83965: LD_ADDR_VAR 0 3
83969: PUSH
83970: DOUBLE
83971: LD_VAR 0 1
83975: INC
83976: ST_TO_ADDR
83977: LD_INT 1
83979: PUSH
83980: FOR_DOWNTO
83981: IFFALSE 84011
// result := Join ( result , array [ i ] ) ;
83983: LD_ADDR_VAR 0 2
83987: PUSH
83988: LD_VAR 0 2
83992: PPUSH
83993: LD_VAR 0 1
83997: PUSH
83998: LD_VAR 0 3
84002: ARRAY
84003: PPUSH
84004: CALL 88656 0 2
84008: ST_TO_ADDR
84009: GO 83980
84011: POP
84012: POP
// end ;
84013: LD_VAR 0 2
84017: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
84018: LD_INT 0
84020: PPUSH
84021: PPUSH
84022: PPUSH
84023: PPUSH
84024: PPUSH
84025: PPUSH
// if not unit or not hexes then
84026: LD_VAR 0 1
84030: NOT
84031: PUSH
84032: LD_VAR 0 2
84036: NOT
84037: OR
84038: IFFALSE 84042
// exit ;
84040: GO 84165
// dist := 9999 ;
84042: LD_ADDR_VAR 0 5
84046: PUSH
84047: LD_INT 9999
84049: ST_TO_ADDR
// for i = 1 to hexes do
84050: LD_ADDR_VAR 0 4
84054: PUSH
84055: DOUBLE
84056: LD_INT 1
84058: DEC
84059: ST_TO_ADDR
84060: LD_VAR 0 2
84064: PUSH
84065: FOR_TO
84066: IFFALSE 84153
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
84068: LD_ADDR_VAR 0 6
84072: PUSH
84073: LD_VAR 0 1
84077: PPUSH
84078: LD_VAR 0 2
84082: PUSH
84083: LD_VAR 0 4
84087: ARRAY
84088: PUSH
84089: LD_INT 1
84091: ARRAY
84092: PPUSH
84093: LD_VAR 0 2
84097: PUSH
84098: LD_VAR 0 4
84102: ARRAY
84103: PUSH
84104: LD_INT 2
84106: ARRAY
84107: PPUSH
84108: CALL_OW 297
84112: ST_TO_ADDR
// if tdist < dist then
84113: LD_VAR 0 6
84117: PUSH
84118: LD_VAR 0 5
84122: LESS
84123: IFFALSE 84151
// begin hex := hexes [ i ] ;
84125: LD_ADDR_VAR 0 8
84129: PUSH
84130: LD_VAR 0 2
84134: PUSH
84135: LD_VAR 0 4
84139: ARRAY
84140: ST_TO_ADDR
// dist := tdist ;
84141: LD_ADDR_VAR 0 5
84145: PUSH
84146: LD_VAR 0 6
84150: ST_TO_ADDR
// end ; end ;
84151: GO 84065
84153: POP
84154: POP
// result := hex ;
84155: LD_ADDR_VAR 0 3
84159: PUSH
84160: LD_VAR 0 8
84164: ST_TO_ADDR
// end ;
84165: LD_VAR 0 3
84169: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
84170: LD_INT 0
84172: PPUSH
84173: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
84174: LD_VAR 0 1
84178: NOT
84179: PUSH
84180: LD_VAR 0 1
84184: PUSH
84185: LD_INT 21
84187: PUSH
84188: LD_INT 2
84190: PUSH
84191: EMPTY
84192: LIST
84193: LIST
84194: PUSH
84195: LD_INT 23
84197: PUSH
84198: LD_INT 2
84200: PUSH
84201: EMPTY
84202: LIST
84203: LIST
84204: PUSH
84205: EMPTY
84206: LIST
84207: LIST
84208: PPUSH
84209: CALL_OW 69
84213: IN
84214: NOT
84215: OR
84216: IFFALSE 84220
// exit ;
84218: GO 84267
// for i = 1 to 3 do
84220: LD_ADDR_VAR 0 3
84224: PUSH
84225: DOUBLE
84226: LD_INT 1
84228: DEC
84229: ST_TO_ADDR
84230: LD_INT 3
84232: PUSH
84233: FOR_TO
84234: IFFALSE 84265
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
84236: LD_VAR 0 1
84240: PPUSH
84241: CALL_OW 250
84245: PPUSH
84246: LD_VAR 0 1
84250: PPUSH
84251: CALL_OW 251
84255: PPUSH
84256: LD_INT 1
84258: PPUSH
84259: CALL_OW 453
84263: GO 84233
84265: POP
84266: POP
// end ;
84267: LD_VAR 0 2
84271: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
84272: LD_INT 0
84274: PPUSH
84275: PPUSH
84276: PPUSH
84277: PPUSH
84278: PPUSH
84279: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
84280: LD_VAR 0 1
84284: NOT
84285: PUSH
84286: LD_VAR 0 2
84290: NOT
84291: OR
84292: PUSH
84293: LD_VAR 0 1
84297: PPUSH
84298: CALL_OW 314
84302: OR
84303: IFFALSE 84307
// exit ;
84305: GO 84774
// if GetLives ( i ) < 250 then
84307: LD_VAR 0 4
84311: PPUSH
84312: CALL_OW 256
84316: PUSH
84317: LD_INT 250
84319: LESS
84320: IFFALSE 84333
// begin ComAutodestruct ( i ) ;
84322: LD_VAR 0 4
84326: PPUSH
84327: CALL 84170 0 1
// exit ;
84331: GO 84774
// end ; x := GetX ( enemy_unit ) ;
84333: LD_ADDR_VAR 0 7
84337: PUSH
84338: LD_VAR 0 2
84342: PPUSH
84343: CALL_OW 250
84347: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
84348: LD_ADDR_VAR 0 8
84352: PUSH
84353: LD_VAR 0 2
84357: PPUSH
84358: CALL_OW 251
84362: ST_TO_ADDR
// if not x or not y then
84363: LD_VAR 0 7
84367: NOT
84368: PUSH
84369: LD_VAR 0 8
84373: NOT
84374: OR
84375: IFFALSE 84379
// exit ;
84377: GO 84774
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
84379: LD_ADDR_VAR 0 6
84383: PUSH
84384: LD_VAR 0 7
84388: PPUSH
84389: LD_INT 0
84391: PPUSH
84392: LD_INT 4
84394: PPUSH
84395: CALL_OW 272
84399: PUSH
84400: LD_VAR 0 8
84404: PPUSH
84405: LD_INT 0
84407: PPUSH
84408: LD_INT 4
84410: PPUSH
84411: CALL_OW 273
84415: PUSH
84416: EMPTY
84417: LIST
84418: LIST
84419: PUSH
84420: LD_VAR 0 7
84424: PPUSH
84425: LD_INT 1
84427: PPUSH
84428: LD_INT 4
84430: PPUSH
84431: CALL_OW 272
84435: PUSH
84436: LD_VAR 0 8
84440: PPUSH
84441: LD_INT 1
84443: PPUSH
84444: LD_INT 4
84446: PPUSH
84447: CALL_OW 273
84451: PUSH
84452: EMPTY
84453: LIST
84454: LIST
84455: PUSH
84456: LD_VAR 0 7
84460: PPUSH
84461: LD_INT 2
84463: PPUSH
84464: LD_INT 4
84466: PPUSH
84467: CALL_OW 272
84471: PUSH
84472: LD_VAR 0 8
84476: PPUSH
84477: LD_INT 2
84479: PPUSH
84480: LD_INT 4
84482: PPUSH
84483: CALL_OW 273
84487: PUSH
84488: EMPTY
84489: LIST
84490: LIST
84491: PUSH
84492: LD_VAR 0 7
84496: PPUSH
84497: LD_INT 3
84499: PPUSH
84500: LD_INT 4
84502: PPUSH
84503: CALL_OW 272
84507: PUSH
84508: LD_VAR 0 8
84512: PPUSH
84513: LD_INT 3
84515: PPUSH
84516: LD_INT 4
84518: PPUSH
84519: CALL_OW 273
84523: PUSH
84524: EMPTY
84525: LIST
84526: LIST
84527: PUSH
84528: LD_VAR 0 7
84532: PPUSH
84533: LD_INT 4
84535: PPUSH
84536: LD_INT 4
84538: PPUSH
84539: CALL_OW 272
84543: PUSH
84544: LD_VAR 0 8
84548: PPUSH
84549: LD_INT 4
84551: PPUSH
84552: LD_INT 4
84554: PPUSH
84555: CALL_OW 273
84559: PUSH
84560: EMPTY
84561: LIST
84562: LIST
84563: PUSH
84564: LD_VAR 0 7
84568: PPUSH
84569: LD_INT 5
84571: PPUSH
84572: LD_INT 4
84574: PPUSH
84575: CALL_OW 272
84579: PUSH
84580: LD_VAR 0 8
84584: PPUSH
84585: LD_INT 5
84587: PPUSH
84588: LD_INT 4
84590: PPUSH
84591: CALL_OW 273
84595: PUSH
84596: EMPTY
84597: LIST
84598: LIST
84599: PUSH
84600: EMPTY
84601: LIST
84602: LIST
84603: LIST
84604: LIST
84605: LIST
84606: LIST
84607: ST_TO_ADDR
// for i = tmp downto 1 do
84608: LD_ADDR_VAR 0 4
84612: PUSH
84613: DOUBLE
84614: LD_VAR 0 6
84618: INC
84619: ST_TO_ADDR
84620: LD_INT 1
84622: PUSH
84623: FOR_DOWNTO
84624: IFFALSE 84725
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
84626: LD_VAR 0 6
84630: PUSH
84631: LD_VAR 0 4
84635: ARRAY
84636: PUSH
84637: LD_INT 1
84639: ARRAY
84640: PPUSH
84641: LD_VAR 0 6
84645: PUSH
84646: LD_VAR 0 4
84650: ARRAY
84651: PUSH
84652: LD_INT 2
84654: ARRAY
84655: PPUSH
84656: CALL_OW 488
84660: NOT
84661: PUSH
84662: LD_VAR 0 6
84666: PUSH
84667: LD_VAR 0 4
84671: ARRAY
84672: PUSH
84673: LD_INT 1
84675: ARRAY
84676: PPUSH
84677: LD_VAR 0 6
84681: PUSH
84682: LD_VAR 0 4
84686: ARRAY
84687: PUSH
84688: LD_INT 2
84690: ARRAY
84691: PPUSH
84692: CALL_OW 428
84696: PUSH
84697: LD_INT 0
84699: NONEQUAL
84700: OR
84701: IFFALSE 84723
// tmp := Delete ( tmp , i ) ;
84703: LD_ADDR_VAR 0 6
84707: PUSH
84708: LD_VAR 0 6
84712: PPUSH
84713: LD_VAR 0 4
84717: PPUSH
84718: CALL_OW 3
84722: ST_TO_ADDR
84723: GO 84623
84725: POP
84726: POP
// j := GetClosestHex ( unit , tmp ) ;
84727: LD_ADDR_VAR 0 5
84731: PUSH
84732: LD_VAR 0 1
84736: PPUSH
84737: LD_VAR 0 6
84741: PPUSH
84742: CALL 84018 0 2
84746: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
84747: LD_VAR 0 1
84751: PPUSH
84752: LD_VAR 0 5
84756: PUSH
84757: LD_INT 1
84759: ARRAY
84760: PPUSH
84761: LD_VAR 0 5
84765: PUSH
84766: LD_INT 2
84768: ARRAY
84769: PPUSH
84770: CALL_OW 111
// end ;
84774: LD_VAR 0 3
84778: RET
// export function PrepareApemanSoldier ( ) ; begin
84779: LD_INT 0
84781: PPUSH
// uc_nation := 0 ;
84782: LD_ADDR_OWVAR 21
84786: PUSH
84787: LD_INT 0
84789: ST_TO_ADDR
// hc_sex := sex_male ;
84790: LD_ADDR_OWVAR 27
84794: PUSH
84795: LD_INT 1
84797: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
84798: LD_ADDR_OWVAR 28
84802: PUSH
84803: LD_INT 15
84805: ST_TO_ADDR
// hc_gallery :=  ;
84806: LD_ADDR_OWVAR 33
84810: PUSH
84811: LD_STRING 
84813: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
84814: LD_ADDR_OWVAR 31
84818: PUSH
84819: LD_INT 0
84821: PPUSH
84822: LD_INT 3
84824: PPUSH
84825: CALL_OW 12
84829: PUSH
84830: LD_INT 0
84832: PPUSH
84833: LD_INT 3
84835: PPUSH
84836: CALL_OW 12
84840: PUSH
84841: LD_INT 0
84843: PUSH
84844: LD_INT 0
84846: PUSH
84847: EMPTY
84848: LIST
84849: LIST
84850: LIST
84851: LIST
84852: ST_TO_ADDR
// end ;
84853: LD_VAR 0 1
84857: RET
// export function PrepareApemanEngineer ( ) ; begin
84858: LD_INT 0
84860: PPUSH
// uc_nation := 0 ;
84861: LD_ADDR_OWVAR 21
84865: PUSH
84866: LD_INT 0
84868: ST_TO_ADDR
// hc_sex := sex_male ;
84869: LD_ADDR_OWVAR 27
84873: PUSH
84874: LD_INT 1
84876: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
84877: LD_ADDR_OWVAR 28
84881: PUSH
84882: LD_INT 16
84884: ST_TO_ADDR
// hc_gallery :=  ;
84885: LD_ADDR_OWVAR 33
84889: PUSH
84890: LD_STRING 
84892: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
84893: LD_ADDR_OWVAR 31
84897: PUSH
84898: LD_INT 0
84900: PPUSH
84901: LD_INT 3
84903: PPUSH
84904: CALL_OW 12
84908: PUSH
84909: LD_INT 0
84911: PPUSH
84912: LD_INT 3
84914: PPUSH
84915: CALL_OW 12
84919: PUSH
84920: LD_INT 0
84922: PUSH
84923: LD_INT 0
84925: PUSH
84926: EMPTY
84927: LIST
84928: LIST
84929: LIST
84930: LIST
84931: ST_TO_ADDR
// end ;
84932: LD_VAR 0 1
84936: RET
// export function PrepareApeman ( agressivity ) ; begin
84937: LD_INT 0
84939: PPUSH
// uc_side := 0 ;
84940: LD_ADDR_OWVAR 20
84944: PUSH
84945: LD_INT 0
84947: ST_TO_ADDR
// uc_nation := 0 ;
84948: LD_ADDR_OWVAR 21
84952: PUSH
84953: LD_INT 0
84955: ST_TO_ADDR
// hc_sex := sex_male ;
84956: LD_ADDR_OWVAR 27
84960: PUSH
84961: LD_INT 1
84963: ST_TO_ADDR
// hc_class := class_apeman ;
84964: LD_ADDR_OWVAR 28
84968: PUSH
84969: LD_INT 12
84971: ST_TO_ADDR
// hc_gallery :=  ;
84972: LD_ADDR_OWVAR 33
84976: PUSH
84977: LD_STRING 
84979: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
84980: LD_ADDR_OWVAR 35
84984: PUSH
84985: LD_VAR 0 1
84989: NEG
84990: PPUSH
84991: LD_VAR 0 1
84995: PPUSH
84996: CALL_OW 12
85000: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
85001: LD_ADDR_OWVAR 31
85005: PUSH
85006: LD_INT 0
85008: PPUSH
85009: LD_INT 3
85011: PPUSH
85012: CALL_OW 12
85016: PUSH
85017: LD_INT 0
85019: PPUSH
85020: LD_INT 3
85022: PPUSH
85023: CALL_OW 12
85027: PUSH
85028: LD_INT 0
85030: PUSH
85031: LD_INT 0
85033: PUSH
85034: EMPTY
85035: LIST
85036: LIST
85037: LIST
85038: LIST
85039: ST_TO_ADDR
// end ;
85040: LD_VAR 0 2
85044: RET
// export function PrepareTiger ( agressivity ) ; begin
85045: LD_INT 0
85047: PPUSH
// uc_side := 0 ;
85048: LD_ADDR_OWVAR 20
85052: PUSH
85053: LD_INT 0
85055: ST_TO_ADDR
// uc_nation := 0 ;
85056: LD_ADDR_OWVAR 21
85060: PUSH
85061: LD_INT 0
85063: ST_TO_ADDR
// hc_class := class_tiger ;
85064: LD_ADDR_OWVAR 28
85068: PUSH
85069: LD_INT 14
85071: ST_TO_ADDR
// hc_gallery :=  ;
85072: LD_ADDR_OWVAR 33
85076: PUSH
85077: LD_STRING 
85079: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
85080: LD_ADDR_OWVAR 35
85084: PUSH
85085: LD_VAR 0 1
85089: NEG
85090: PPUSH
85091: LD_VAR 0 1
85095: PPUSH
85096: CALL_OW 12
85100: ST_TO_ADDR
// end ;
85101: LD_VAR 0 2
85105: RET
// export function PrepareEnchidna ( ) ; begin
85106: LD_INT 0
85108: PPUSH
// uc_side := 0 ;
85109: LD_ADDR_OWVAR 20
85113: PUSH
85114: LD_INT 0
85116: ST_TO_ADDR
// uc_nation := 0 ;
85117: LD_ADDR_OWVAR 21
85121: PUSH
85122: LD_INT 0
85124: ST_TO_ADDR
// hc_class := class_baggie ;
85125: LD_ADDR_OWVAR 28
85129: PUSH
85130: LD_INT 13
85132: ST_TO_ADDR
// hc_gallery :=  ;
85133: LD_ADDR_OWVAR 33
85137: PUSH
85138: LD_STRING 
85140: ST_TO_ADDR
// end ;
85141: LD_VAR 0 1
85145: RET
// export function PrepareFrog ( ) ; begin
85146: LD_INT 0
85148: PPUSH
// uc_side := 0 ;
85149: LD_ADDR_OWVAR 20
85153: PUSH
85154: LD_INT 0
85156: ST_TO_ADDR
// uc_nation := 0 ;
85157: LD_ADDR_OWVAR 21
85161: PUSH
85162: LD_INT 0
85164: ST_TO_ADDR
// hc_class := class_frog ;
85165: LD_ADDR_OWVAR 28
85169: PUSH
85170: LD_INT 19
85172: ST_TO_ADDR
// hc_gallery :=  ;
85173: LD_ADDR_OWVAR 33
85177: PUSH
85178: LD_STRING 
85180: ST_TO_ADDR
// end ;
85181: LD_VAR 0 1
85185: RET
// export function PrepareFish ( ) ; begin
85186: LD_INT 0
85188: PPUSH
// uc_side := 0 ;
85189: LD_ADDR_OWVAR 20
85193: PUSH
85194: LD_INT 0
85196: ST_TO_ADDR
// uc_nation := 0 ;
85197: LD_ADDR_OWVAR 21
85201: PUSH
85202: LD_INT 0
85204: ST_TO_ADDR
// hc_class := class_fish ;
85205: LD_ADDR_OWVAR 28
85209: PUSH
85210: LD_INT 20
85212: ST_TO_ADDR
// hc_gallery :=  ;
85213: LD_ADDR_OWVAR 33
85217: PUSH
85218: LD_STRING 
85220: ST_TO_ADDR
// end ;
85221: LD_VAR 0 1
85225: RET
// export function PrepareBird ( ) ; begin
85226: LD_INT 0
85228: PPUSH
// uc_side := 0 ;
85229: LD_ADDR_OWVAR 20
85233: PUSH
85234: LD_INT 0
85236: ST_TO_ADDR
// uc_nation := 0 ;
85237: LD_ADDR_OWVAR 21
85241: PUSH
85242: LD_INT 0
85244: ST_TO_ADDR
// hc_class := class_phororhacos ;
85245: LD_ADDR_OWVAR 28
85249: PUSH
85250: LD_INT 18
85252: ST_TO_ADDR
// hc_gallery :=  ;
85253: LD_ADDR_OWVAR 33
85257: PUSH
85258: LD_STRING 
85260: ST_TO_ADDR
// end ;
85261: LD_VAR 0 1
85265: RET
// export function PrepareHorse ( ) ; begin
85266: LD_INT 0
85268: PPUSH
// uc_side := 0 ;
85269: LD_ADDR_OWVAR 20
85273: PUSH
85274: LD_INT 0
85276: ST_TO_ADDR
// uc_nation := 0 ;
85277: LD_ADDR_OWVAR 21
85281: PUSH
85282: LD_INT 0
85284: ST_TO_ADDR
// hc_class := class_horse ;
85285: LD_ADDR_OWVAR 28
85289: PUSH
85290: LD_INT 21
85292: ST_TO_ADDR
// hc_gallery :=  ;
85293: LD_ADDR_OWVAR 33
85297: PUSH
85298: LD_STRING 
85300: ST_TO_ADDR
// end ;
85301: LD_VAR 0 1
85305: RET
// export function PrepareMastodont ( ) ; begin
85306: LD_INT 0
85308: PPUSH
// uc_side := 0 ;
85309: LD_ADDR_OWVAR 20
85313: PUSH
85314: LD_INT 0
85316: ST_TO_ADDR
// uc_nation := 0 ;
85317: LD_ADDR_OWVAR 21
85321: PUSH
85322: LD_INT 0
85324: ST_TO_ADDR
// vc_chassis := class_mastodont ;
85325: LD_ADDR_OWVAR 37
85329: PUSH
85330: LD_INT 31
85332: ST_TO_ADDR
// vc_control := control_rider ;
85333: LD_ADDR_OWVAR 38
85337: PUSH
85338: LD_INT 4
85340: ST_TO_ADDR
// end ;
85341: LD_VAR 0 1
85345: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
85346: LD_INT 0
85348: PPUSH
85349: PPUSH
85350: PPUSH
// uc_side = 0 ;
85351: LD_ADDR_OWVAR 20
85355: PUSH
85356: LD_INT 0
85358: ST_TO_ADDR
// uc_nation = 0 ;
85359: LD_ADDR_OWVAR 21
85363: PUSH
85364: LD_INT 0
85366: ST_TO_ADDR
// InitHc_All ( ) ;
85367: CALL_OW 584
// InitVc ;
85371: CALL_OW 20
// if mastodonts then
85375: LD_VAR 0 6
85379: IFFALSE 85446
// for i = 1 to mastodonts do
85381: LD_ADDR_VAR 0 11
85385: PUSH
85386: DOUBLE
85387: LD_INT 1
85389: DEC
85390: ST_TO_ADDR
85391: LD_VAR 0 6
85395: PUSH
85396: FOR_TO
85397: IFFALSE 85444
// begin vc_chassis := 31 ;
85399: LD_ADDR_OWVAR 37
85403: PUSH
85404: LD_INT 31
85406: ST_TO_ADDR
// vc_control := control_rider ;
85407: LD_ADDR_OWVAR 38
85411: PUSH
85412: LD_INT 4
85414: ST_TO_ADDR
// animal := CreateVehicle ;
85415: LD_ADDR_VAR 0 12
85419: PUSH
85420: CALL_OW 45
85424: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
85425: LD_VAR 0 12
85429: PPUSH
85430: LD_VAR 0 8
85434: PPUSH
85435: LD_INT 0
85437: PPUSH
85438: CALL 87574 0 3
// end ;
85442: GO 85396
85444: POP
85445: POP
// if horses then
85446: LD_VAR 0 5
85450: IFFALSE 85517
// for i = 1 to horses do
85452: LD_ADDR_VAR 0 11
85456: PUSH
85457: DOUBLE
85458: LD_INT 1
85460: DEC
85461: ST_TO_ADDR
85462: LD_VAR 0 5
85466: PUSH
85467: FOR_TO
85468: IFFALSE 85515
// begin hc_class := 21 ;
85470: LD_ADDR_OWVAR 28
85474: PUSH
85475: LD_INT 21
85477: ST_TO_ADDR
// hc_gallery :=  ;
85478: LD_ADDR_OWVAR 33
85482: PUSH
85483: LD_STRING 
85485: ST_TO_ADDR
// animal := CreateHuman ;
85486: LD_ADDR_VAR 0 12
85490: PUSH
85491: CALL_OW 44
85495: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
85496: LD_VAR 0 12
85500: PPUSH
85501: LD_VAR 0 8
85505: PPUSH
85506: LD_INT 0
85508: PPUSH
85509: CALL 87574 0 3
// end ;
85513: GO 85467
85515: POP
85516: POP
// if birds then
85517: LD_VAR 0 1
85521: IFFALSE 85588
// for i = 1 to birds do
85523: LD_ADDR_VAR 0 11
85527: PUSH
85528: DOUBLE
85529: LD_INT 1
85531: DEC
85532: ST_TO_ADDR
85533: LD_VAR 0 1
85537: PUSH
85538: FOR_TO
85539: IFFALSE 85586
// begin hc_class := 18 ;
85541: LD_ADDR_OWVAR 28
85545: PUSH
85546: LD_INT 18
85548: ST_TO_ADDR
// hc_gallery =  ;
85549: LD_ADDR_OWVAR 33
85553: PUSH
85554: LD_STRING 
85556: ST_TO_ADDR
// animal := CreateHuman ;
85557: LD_ADDR_VAR 0 12
85561: PUSH
85562: CALL_OW 44
85566: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
85567: LD_VAR 0 12
85571: PPUSH
85572: LD_VAR 0 8
85576: PPUSH
85577: LD_INT 0
85579: PPUSH
85580: CALL 87574 0 3
// end ;
85584: GO 85538
85586: POP
85587: POP
// if tigers then
85588: LD_VAR 0 2
85592: IFFALSE 85676
// for i = 1 to tigers do
85594: LD_ADDR_VAR 0 11
85598: PUSH
85599: DOUBLE
85600: LD_INT 1
85602: DEC
85603: ST_TO_ADDR
85604: LD_VAR 0 2
85608: PUSH
85609: FOR_TO
85610: IFFALSE 85674
// begin hc_class = class_tiger ;
85612: LD_ADDR_OWVAR 28
85616: PUSH
85617: LD_INT 14
85619: ST_TO_ADDR
// hc_gallery =  ;
85620: LD_ADDR_OWVAR 33
85624: PUSH
85625: LD_STRING 
85627: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
85628: LD_ADDR_OWVAR 35
85632: PUSH
85633: LD_INT 7
85635: NEG
85636: PPUSH
85637: LD_INT 7
85639: PPUSH
85640: CALL_OW 12
85644: ST_TO_ADDR
// animal := CreateHuman ;
85645: LD_ADDR_VAR 0 12
85649: PUSH
85650: CALL_OW 44
85654: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
85655: LD_VAR 0 12
85659: PPUSH
85660: LD_VAR 0 8
85664: PPUSH
85665: LD_INT 0
85667: PPUSH
85668: CALL 87574 0 3
// end ;
85672: GO 85609
85674: POP
85675: POP
// if apemans then
85676: LD_VAR 0 3
85680: IFFALSE 85803
// for i = 1 to apemans do
85682: LD_ADDR_VAR 0 11
85686: PUSH
85687: DOUBLE
85688: LD_INT 1
85690: DEC
85691: ST_TO_ADDR
85692: LD_VAR 0 3
85696: PUSH
85697: FOR_TO
85698: IFFALSE 85801
// begin hc_class = class_apeman ;
85700: LD_ADDR_OWVAR 28
85704: PUSH
85705: LD_INT 12
85707: ST_TO_ADDR
// hc_gallery =  ;
85708: LD_ADDR_OWVAR 33
85712: PUSH
85713: LD_STRING 
85715: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
85716: LD_ADDR_OWVAR 35
85720: PUSH
85721: LD_INT 2
85723: NEG
85724: PPUSH
85725: LD_INT 2
85727: PPUSH
85728: CALL_OW 12
85732: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
85733: LD_ADDR_OWVAR 31
85737: PUSH
85738: LD_INT 1
85740: PPUSH
85741: LD_INT 3
85743: PPUSH
85744: CALL_OW 12
85748: PUSH
85749: LD_INT 1
85751: PPUSH
85752: LD_INT 3
85754: PPUSH
85755: CALL_OW 12
85759: PUSH
85760: LD_INT 0
85762: PUSH
85763: LD_INT 0
85765: PUSH
85766: EMPTY
85767: LIST
85768: LIST
85769: LIST
85770: LIST
85771: ST_TO_ADDR
// animal := CreateHuman ;
85772: LD_ADDR_VAR 0 12
85776: PUSH
85777: CALL_OW 44
85781: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
85782: LD_VAR 0 12
85786: PPUSH
85787: LD_VAR 0 8
85791: PPUSH
85792: LD_INT 0
85794: PPUSH
85795: CALL 87574 0 3
// end ;
85799: GO 85697
85801: POP
85802: POP
// if enchidnas then
85803: LD_VAR 0 4
85807: IFFALSE 85874
// for i = 1 to enchidnas do
85809: LD_ADDR_VAR 0 11
85813: PUSH
85814: DOUBLE
85815: LD_INT 1
85817: DEC
85818: ST_TO_ADDR
85819: LD_VAR 0 4
85823: PUSH
85824: FOR_TO
85825: IFFALSE 85872
// begin hc_class = 13 ;
85827: LD_ADDR_OWVAR 28
85831: PUSH
85832: LD_INT 13
85834: ST_TO_ADDR
// hc_gallery =  ;
85835: LD_ADDR_OWVAR 33
85839: PUSH
85840: LD_STRING 
85842: ST_TO_ADDR
// animal := CreateHuman ;
85843: LD_ADDR_VAR 0 12
85847: PUSH
85848: CALL_OW 44
85852: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
85853: LD_VAR 0 12
85857: PPUSH
85858: LD_VAR 0 8
85862: PPUSH
85863: LD_INT 0
85865: PPUSH
85866: CALL 87574 0 3
// end ;
85870: GO 85824
85872: POP
85873: POP
// if fishes then
85874: LD_VAR 0 7
85878: IFFALSE 85945
// for i = 1 to fishes do
85880: LD_ADDR_VAR 0 11
85884: PUSH
85885: DOUBLE
85886: LD_INT 1
85888: DEC
85889: ST_TO_ADDR
85890: LD_VAR 0 7
85894: PUSH
85895: FOR_TO
85896: IFFALSE 85943
// begin hc_class = 20 ;
85898: LD_ADDR_OWVAR 28
85902: PUSH
85903: LD_INT 20
85905: ST_TO_ADDR
// hc_gallery =  ;
85906: LD_ADDR_OWVAR 33
85910: PUSH
85911: LD_STRING 
85913: ST_TO_ADDR
// animal := CreateHuman ;
85914: LD_ADDR_VAR 0 12
85918: PUSH
85919: CALL_OW 44
85923: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
85924: LD_VAR 0 12
85928: PPUSH
85929: LD_VAR 0 9
85933: PPUSH
85934: LD_INT 0
85936: PPUSH
85937: CALL 87574 0 3
// end ;
85941: GO 85895
85943: POP
85944: POP
// end ;
85945: LD_VAR 0 10
85949: RET
// export function WantHeal ( sci , unit ) ; begin
85950: LD_INT 0
85952: PPUSH
// if GetTaskList ( sci ) > 0 then
85953: LD_VAR 0 1
85957: PPUSH
85958: CALL_OW 437
85962: PUSH
85963: LD_INT 0
85965: GREATER
85966: IFFALSE 86036
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
85968: LD_VAR 0 1
85972: PPUSH
85973: CALL_OW 437
85977: PUSH
85978: LD_INT 1
85980: ARRAY
85981: PUSH
85982: LD_INT 1
85984: ARRAY
85985: PUSH
85986: LD_STRING l
85988: EQUAL
85989: PUSH
85990: LD_VAR 0 1
85994: PPUSH
85995: CALL_OW 437
85999: PUSH
86000: LD_INT 1
86002: ARRAY
86003: PUSH
86004: LD_INT 4
86006: ARRAY
86007: PUSH
86008: LD_VAR 0 2
86012: EQUAL
86013: AND
86014: IFFALSE 86026
// result := true else
86016: LD_ADDR_VAR 0 3
86020: PUSH
86021: LD_INT 1
86023: ST_TO_ADDR
86024: GO 86034
// result := false ;
86026: LD_ADDR_VAR 0 3
86030: PUSH
86031: LD_INT 0
86033: ST_TO_ADDR
// end else
86034: GO 86044
// result := false ;
86036: LD_ADDR_VAR 0 3
86040: PUSH
86041: LD_INT 0
86043: ST_TO_ADDR
// end ;
86044: LD_VAR 0 3
86048: RET
// export function HealTarget ( sci ) ; begin
86049: LD_INT 0
86051: PPUSH
// if not sci then
86052: LD_VAR 0 1
86056: NOT
86057: IFFALSE 86061
// exit ;
86059: GO 86126
// result := 0 ;
86061: LD_ADDR_VAR 0 2
86065: PUSH
86066: LD_INT 0
86068: ST_TO_ADDR
// if GetTaskList ( sci ) then
86069: LD_VAR 0 1
86073: PPUSH
86074: CALL_OW 437
86078: IFFALSE 86126
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
86080: LD_VAR 0 1
86084: PPUSH
86085: CALL_OW 437
86089: PUSH
86090: LD_INT 1
86092: ARRAY
86093: PUSH
86094: LD_INT 1
86096: ARRAY
86097: PUSH
86098: LD_STRING l
86100: EQUAL
86101: IFFALSE 86126
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
86103: LD_ADDR_VAR 0 2
86107: PUSH
86108: LD_VAR 0 1
86112: PPUSH
86113: CALL_OW 437
86117: PUSH
86118: LD_INT 1
86120: ARRAY
86121: PUSH
86122: LD_INT 4
86124: ARRAY
86125: ST_TO_ADDR
// end ;
86126: LD_VAR 0 2
86130: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
86131: LD_INT 0
86133: PPUSH
86134: PPUSH
86135: PPUSH
86136: PPUSH
// if not base_units then
86137: LD_VAR 0 1
86141: NOT
86142: IFFALSE 86146
// exit ;
86144: GO 86233
// result := false ;
86146: LD_ADDR_VAR 0 2
86150: PUSH
86151: LD_INT 0
86153: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
86154: LD_ADDR_VAR 0 5
86158: PUSH
86159: LD_VAR 0 1
86163: PPUSH
86164: LD_INT 21
86166: PUSH
86167: LD_INT 3
86169: PUSH
86170: EMPTY
86171: LIST
86172: LIST
86173: PPUSH
86174: CALL_OW 72
86178: ST_TO_ADDR
// if not tmp then
86179: LD_VAR 0 5
86183: NOT
86184: IFFALSE 86188
// exit ;
86186: GO 86233
// for i in tmp do
86188: LD_ADDR_VAR 0 3
86192: PUSH
86193: LD_VAR 0 5
86197: PUSH
86198: FOR_IN
86199: IFFALSE 86231
// begin result := EnemyInRange ( i , 22 ) ;
86201: LD_ADDR_VAR 0 2
86205: PUSH
86206: LD_VAR 0 3
86210: PPUSH
86211: LD_INT 22
86213: PPUSH
86214: CALL 83820 0 2
86218: ST_TO_ADDR
// if result then
86219: LD_VAR 0 2
86223: IFFALSE 86229
// exit ;
86225: POP
86226: POP
86227: GO 86233
// end ;
86229: GO 86198
86231: POP
86232: POP
// end ;
86233: LD_VAR 0 2
86237: RET
// export function FilterByTag ( units , tag ) ; begin
86238: LD_INT 0
86240: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
86241: LD_ADDR_VAR 0 3
86245: PUSH
86246: LD_VAR 0 1
86250: PPUSH
86251: LD_INT 120
86253: PUSH
86254: LD_VAR 0 2
86258: PUSH
86259: EMPTY
86260: LIST
86261: LIST
86262: PPUSH
86263: CALL_OW 72
86267: ST_TO_ADDR
// end ;
86268: LD_VAR 0 3
86272: RET
// export function IsDriver ( un ) ; begin
86273: LD_INT 0
86275: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
86276: LD_ADDR_VAR 0 2
86280: PUSH
86281: LD_VAR 0 1
86285: PUSH
86286: LD_INT 55
86288: PUSH
86289: EMPTY
86290: LIST
86291: PPUSH
86292: CALL_OW 69
86296: IN
86297: ST_TO_ADDR
// end ;
86298: LD_VAR 0 2
86302: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
86303: LD_INT 0
86305: PPUSH
86306: PPUSH
// list := [ ] ;
86307: LD_ADDR_VAR 0 5
86311: PUSH
86312: EMPTY
86313: ST_TO_ADDR
// case d of 0 :
86314: LD_VAR 0 3
86318: PUSH
86319: LD_INT 0
86321: DOUBLE
86322: EQUAL
86323: IFTRUE 86327
86325: GO 86460
86327: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
86328: LD_ADDR_VAR 0 5
86332: PUSH
86333: LD_VAR 0 1
86337: PUSH
86338: LD_INT 4
86340: MINUS
86341: PUSH
86342: LD_VAR 0 2
86346: PUSH
86347: LD_INT 4
86349: MINUS
86350: PUSH
86351: LD_INT 2
86353: PUSH
86354: EMPTY
86355: LIST
86356: LIST
86357: LIST
86358: PUSH
86359: LD_VAR 0 1
86363: PUSH
86364: LD_INT 3
86366: MINUS
86367: PUSH
86368: LD_VAR 0 2
86372: PUSH
86373: LD_INT 1
86375: PUSH
86376: EMPTY
86377: LIST
86378: LIST
86379: LIST
86380: PUSH
86381: LD_VAR 0 1
86385: PUSH
86386: LD_INT 4
86388: PLUS
86389: PUSH
86390: LD_VAR 0 2
86394: PUSH
86395: LD_INT 4
86397: PUSH
86398: EMPTY
86399: LIST
86400: LIST
86401: LIST
86402: PUSH
86403: LD_VAR 0 1
86407: PUSH
86408: LD_INT 3
86410: PLUS
86411: PUSH
86412: LD_VAR 0 2
86416: PUSH
86417: LD_INT 3
86419: PLUS
86420: PUSH
86421: LD_INT 5
86423: PUSH
86424: EMPTY
86425: LIST
86426: LIST
86427: LIST
86428: PUSH
86429: LD_VAR 0 1
86433: PUSH
86434: LD_VAR 0 2
86438: PUSH
86439: LD_INT 4
86441: PLUS
86442: PUSH
86443: LD_INT 0
86445: PUSH
86446: EMPTY
86447: LIST
86448: LIST
86449: LIST
86450: PUSH
86451: EMPTY
86452: LIST
86453: LIST
86454: LIST
86455: LIST
86456: LIST
86457: ST_TO_ADDR
// end ; 1 :
86458: GO 87158
86460: LD_INT 1
86462: DOUBLE
86463: EQUAL
86464: IFTRUE 86468
86466: GO 86601
86468: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
86469: LD_ADDR_VAR 0 5
86473: PUSH
86474: LD_VAR 0 1
86478: PUSH
86479: LD_VAR 0 2
86483: PUSH
86484: LD_INT 4
86486: MINUS
86487: PUSH
86488: LD_INT 3
86490: PUSH
86491: EMPTY
86492: LIST
86493: LIST
86494: LIST
86495: PUSH
86496: LD_VAR 0 1
86500: PUSH
86501: LD_INT 3
86503: MINUS
86504: PUSH
86505: LD_VAR 0 2
86509: PUSH
86510: LD_INT 3
86512: MINUS
86513: PUSH
86514: LD_INT 2
86516: PUSH
86517: EMPTY
86518: LIST
86519: LIST
86520: LIST
86521: PUSH
86522: LD_VAR 0 1
86526: PUSH
86527: LD_INT 4
86529: MINUS
86530: PUSH
86531: LD_VAR 0 2
86535: PUSH
86536: LD_INT 1
86538: PUSH
86539: EMPTY
86540: LIST
86541: LIST
86542: LIST
86543: PUSH
86544: LD_VAR 0 1
86548: PUSH
86549: LD_VAR 0 2
86553: PUSH
86554: LD_INT 3
86556: PLUS
86557: PUSH
86558: LD_INT 0
86560: PUSH
86561: EMPTY
86562: LIST
86563: LIST
86564: LIST
86565: PUSH
86566: LD_VAR 0 1
86570: PUSH
86571: LD_INT 4
86573: PLUS
86574: PUSH
86575: LD_VAR 0 2
86579: PUSH
86580: LD_INT 4
86582: PLUS
86583: PUSH
86584: LD_INT 5
86586: PUSH
86587: EMPTY
86588: LIST
86589: LIST
86590: LIST
86591: PUSH
86592: EMPTY
86593: LIST
86594: LIST
86595: LIST
86596: LIST
86597: LIST
86598: ST_TO_ADDR
// end ; 2 :
86599: GO 87158
86601: LD_INT 2
86603: DOUBLE
86604: EQUAL
86605: IFTRUE 86609
86607: GO 86738
86609: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
86610: LD_ADDR_VAR 0 5
86614: PUSH
86615: LD_VAR 0 1
86619: PUSH
86620: LD_VAR 0 2
86624: PUSH
86625: LD_INT 3
86627: MINUS
86628: PUSH
86629: LD_INT 3
86631: PUSH
86632: EMPTY
86633: LIST
86634: LIST
86635: LIST
86636: PUSH
86637: LD_VAR 0 1
86641: PUSH
86642: LD_INT 4
86644: PLUS
86645: PUSH
86646: LD_VAR 0 2
86650: PUSH
86651: LD_INT 4
86653: PUSH
86654: EMPTY
86655: LIST
86656: LIST
86657: LIST
86658: PUSH
86659: LD_VAR 0 1
86663: PUSH
86664: LD_VAR 0 2
86668: PUSH
86669: LD_INT 4
86671: PLUS
86672: PUSH
86673: LD_INT 0
86675: PUSH
86676: EMPTY
86677: LIST
86678: LIST
86679: LIST
86680: PUSH
86681: LD_VAR 0 1
86685: PUSH
86686: LD_INT 3
86688: MINUS
86689: PUSH
86690: LD_VAR 0 2
86694: PUSH
86695: LD_INT 1
86697: PUSH
86698: EMPTY
86699: LIST
86700: LIST
86701: LIST
86702: PUSH
86703: LD_VAR 0 1
86707: PUSH
86708: LD_INT 4
86710: MINUS
86711: PUSH
86712: LD_VAR 0 2
86716: PUSH
86717: LD_INT 4
86719: MINUS
86720: PUSH
86721: LD_INT 2
86723: PUSH
86724: EMPTY
86725: LIST
86726: LIST
86727: LIST
86728: PUSH
86729: EMPTY
86730: LIST
86731: LIST
86732: LIST
86733: LIST
86734: LIST
86735: ST_TO_ADDR
// end ; 3 :
86736: GO 87158
86738: LD_INT 3
86740: DOUBLE
86741: EQUAL
86742: IFTRUE 86746
86744: GO 86879
86746: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
86747: LD_ADDR_VAR 0 5
86751: PUSH
86752: LD_VAR 0 1
86756: PUSH
86757: LD_INT 3
86759: PLUS
86760: PUSH
86761: LD_VAR 0 2
86765: PUSH
86766: LD_INT 4
86768: PUSH
86769: EMPTY
86770: LIST
86771: LIST
86772: LIST
86773: PUSH
86774: LD_VAR 0 1
86778: PUSH
86779: LD_INT 4
86781: PLUS
86782: PUSH
86783: LD_VAR 0 2
86787: PUSH
86788: LD_INT 4
86790: PLUS
86791: PUSH
86792: LD_INT 5
86794: PUSH
86795: EMPTY
86796: LIST
86797: LIST
86798: LIST
86799: PUSH
86800: LD_VAR 0 1
86804: PUSH
86805: LD_INT 4
86807: MINUS
86808: PUSH
86809: LD_VAR 0 2
86813: PUSH
86814: LD_INT 1
86816: PUSH
86817: EMPTY
86818: LIST
86819: LIST
86820: LIST
86821: PUSH
86822: LD_VAR 0 1
86826: PUSH
86827: LD_VAR 0 2
86831: PUSH
86832: LD_INT 4
86834: MINUS
86835: PUSH
86836: LD_INT 3
86838: PUSH
86839: EMPTY
86840: LIST
86841: LIST
86842: LIST
86843: PUSH
86844: LD_VAR 0 1
86848: PUSH
86849: LD_INT 3
86851: MINUS
86852: PUSH
86853: LD_VAR 0 2
86857: PUSH
86858: LD_INT 3
86860: MINUS
86861: PUSH
86862: LD_INT 2
86864: PUSH
86865: EMPTY
86866: LIST
86867: LIST
86868: LIST
86869: PUSH
86870: EMPTY
86871: LIST
86872: LIST
86873: LIST
86874: LIST
86875: LIST
86876: ST_TO_ADDR
// end ; 4 :
86877: GO 87158
86879: LD_INT 4
86881: DOUBLE
86882: EQUAL
86883: IFTRUE 86887
86885: GO 87020
86887: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
86888: LD_ADDR_VAR 0 5
86892: PUSH
86893: LD_VAR 0 1
86897: PUSH
86898: LD_VAR 0 2
86902: PUSH
86903: LD_INT 4
86905: PLUS
86906: PUSH
86907: LD_INT 0
86909: PUSH
86910: EMPTY
86911: LIST
86912: LIST
86913: LIST
86914: PUSH
86915: LD_VAR 0 1
86919: PUSH
86920: LD_INT 3
86922: PLUS
86923: PUSH
86924: LD_VAR 0 2
86928: PUSH
86929: LD_INT 3
86931: PLUS
86932: PUSH
86933: LD_INT 5
86935: PUSH
86936: EMPTY
86937: LIST
86938: LIST
86939: LIST
86940: PUSH
86941: LD_VAR 0 1
86945: PUSH
86946: LD_INT 4
86948: PLUS
86949: PUSH
86950: LD_VAR 0 2
86954: PUSH
86955: LD_INT 4
86957: PUSH
86958: EMPTY
86959: LIST
86960: LIST
86961: LIST
86962: PUSH
86963: LD_VAR 0 1
86967: PUSH
86968: LD_VAR 0 2
86972: PUSH
86973: LD_INT 3
86975: MINUS
86976: PUSH
86977: LD_INT 3
86979: PUSH
86980: EMPTY
86981: LIST
86982: LIST
86983: LIST
86984: PUSH
86985: LD_VAR 0 1
86989: PUSH
86990: LD_INT 4
86992: MINUS
86993: PUSH
86994: LD_VAR 0 2
86998: PUSH
86999: LD_INT 4
87001: MINUS
87002: PUSH
87003: LD_INT 2
87005: PUSH
87006: EMPTY
87007: LIST
87008: LIST
87009: LIST
87010: PUSH
87011: EMPTY
87012: LIST
87013: LIST
87014: LIST
87015: LIST
87016: LIST
87017: ST_TO_ADDR
// end ; 5 :
87018: GO 87158
87020: LD_INT 5
87022: DOUBLE
87023: EQUAL
87024: IFTRUE 87028
87026: GO 87157
87028: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
87029: LD_ADDR_VAR 0 5
87033: PUSH
87034: LD_VAR 0 1
87038: PUSH
87039: LD_INT 4
87041: MINUS
87042: PUSH
87043: LD_VAR 0 2
87047: PUSH
87048: LD_INT 1
87050: PUSH
87051: EMPTY
87052: LIST
87053: LIST
87054: LIST
87055: PUSH
87056: LD_VAR 0 1
87060: PUSH
87061: LD_VAR 0 2
87065: PUSH
87066: LD_INT 4
87068: MINUS
87069: PUSH
87070: LD_INT 3
87072: PUSH
87073: EMPTY
87074: LIST
87075: LIST
87076: LIST
87077: PUSH
87078: LD_VAR 0 1
87082: PUSH
87083: LD_INT 4
87085: PLUS
87086: PUSH
87087: LD_VAR 0 2
87091: PUSH
87092: LD_INT 4
87094: PLUS
87095: PUSH
87096: LD_INT 5
87098: PUSH
87099: EMPTY
87100: LIST
87101: LIST
87102: LIST
87103: PUSH
87104: LD_VAR 0 1
87108: PUSH
87109: LD_INT 3
87111: PLUS
87112: PUSH
87113: LD_VAR 0 2
87117: PUSH
87118: LD_INT 4
87120: PUSH
87121: EMPTY
87122: LIST
87123: LIST
87124: LIST
87125: PUSH
87126: LD_VAR 0 1
87130: PUSH
87131: LD_VAR 0 2
87135: PUSH
87136: LD_INT 3
87138: PLUS
87139: PUSH
87140: LD_INT 0
87142: PUSH
87143: EMPTY
87144: LIST
87145: LIST
87146: LIST
87147: PUSH
87148: EMPTY
87149: LIST
87150: LIST
87151: LIST
87152: LIST
87153: LIST
87154: ST_TO_ADDR
// end ; end ;
87155: GO 87158
87157: POP
// result := list ;
87158: LD_ADDR_VAR 0 4
87162: PUSH
87163: LD_VAR 0 5
87167: ST_TO_ADDR
// end ;
87168: LD_VAR 0 4
87172: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
87173: LD_INT 0
87175: PPUSH
87176: PPUSH
87177: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
87178: LD_VAR 0 1
87182: NOT
87183: PUSH
87184: LD_VAR 0 2
87188: PUSH
87189: LD_INT 1
87191: PUSH
87192: LD_INT 2
87194: PUSH
87195: LD_INT 3
87197: PUSH
87198: LD_INT 4
87200: PUSH
87201: EMPTY
87202: LIST
87203: LIST
87204: LIST
87205: LIST
87206: IN
87207: NOT
87208: OR
87209: IFFALSE 87213
// exit ;
87211: GO 87296
// tmp := [ ] ;
87213: LD_ADDR_VAR 0 5
87217: PUSH
87218: EMPTY
87219: ST_TO_ADDR
// for i in units do
87220: LD_ADDR_VAR 0 4
87224: PUSH
87225: LD_VAR 0 1
87229: PUSH
87230: FOR_IN
87231: IFFALSE 87265
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
87233: LD_ADDR_VAR 0 5
87237: PUSH
87238: LD_VAR 0 5
87242: PPUSH
87243: LD_VAR 0 4
87247: PPUSH
87248: LD_VAR 0 2
87252: PPUSH
87253: CALL_OW 259
87257: PPUSH
87258: CALL 88656 0 2
87262: ST_TO_ADDR
87263: GO 87230
87265: POP
87266: POP
// if not tmp then
87267: LD_VAR 0 5
87271: NOT
87272: IFFALSE 87276
// exit ;
87274: GO 87296
// result := SortListByListDesc ( units , tmp ) ;
87276: LD_ADDR_VAR 0 3
87280: PUSH
87281: LD_VAR 0 1
87285: PPUSH
87286: LD_VAR 0 5
87290: PPUSH
87291: CALL_OW 77
87295: ST_TO_ADDR
// end ;
87296: LD_VAR 0 3
87300: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
87301: LD_INT 0
87303: PPUSH
87304: PPUSH
87305: PPUSH
// result := false ;
87306: LD_ADDR_VAR 0 3
87310: PUSH
87311: LD_INT 0
87313: ST_TO_ADDR
// if not building then
87314: LD_VAR 0 2
87318: NOT
87319: IFFALSE 87323
// exit ;
87321: GO 87461
// x := GetX ( building ) ;
87323: LD_ADDR_VAR 0 4
87327: PUSH
87328: LD_VAR 0 2
87332: PPUSH
87333: CALL_OW 250
87337: ST_TO_ADDR
// y := GetY ( building ) ;
87338: LD_ADDR_VAR 0 5
87342: PUSH
87343: LD_VAR 0 2
87347: PPUSH
87348: CALL_OW 251
87352: ST_TO_ADDR
// if not x or not y then
87353: LD_VAR 0 4
87357: NOT
87358: PUSH
87359: LD_VAR 0 5
87363: NOT
87364: OR
87365: IFFALSE 87369
// exit ;
87367: GO 87461
// if GetTaskList ( unit ) then
87369: LD_VAR 0 1
87373: PPUSH
87374: CALL_OW 437
87378: IFFALSE 87461
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
87380: LD_STRING e
87382: PUSH
87383: LD_VAR 0 1
87387: PPUSH
87388: CALL_OW 437
87392: PUSH
87393: LD_INT 1
87395: ARRAY
87396: PUSH
87397: LD_INT 1
87399: ARRAY
87400: EQUAL
87401: PUSH
87402: LD_VAR 0 4
87406: PUSH
87407: LD_VAR 0 1
87411: PPUSH
87412: CALL_OW 437
87416: PUSH
87417: LD_INT 1
87419: ARRAY
87420: PUSH
87421: LD_INT 2
87423: ARRAY
87424: EQUAL
87425: AND
87426: PUSH
87427: LD_VAR 0 5
87431: PUSH
87432: LD_VAR 0 1
87436: PPUSH
87437: CALL_OW 437
87441: PUSH
87442: LD_INT 1
87444: ARRAY
87445: PUSH
87446: LD_INT 3
87448: ARRAY
87449: EQUAL
87450: AND
87451: IFFALSE 87461
// result := true end ;
87453: LD_ADDR_VAR 0 3
87457: PUSH
87458: LD_INT 1
87460: ST_TO_ADDR
// end ;
87461: LD_VAR 0 3
87465: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
87466: LD_INT 0
87468: PPUSH
// result := false ;
87469: LD_ADDR_VAR 0 4
87473: PUSH
87474: LD_INT 0
87476: ST_TO_ADDR
// if GetTaskList ( unit ) then
87477: LD_VAR 0 1
87481: PPUSH
87482: CALL_OW 437
87486: IFFALSE 87569
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
87488: LD_STRING M
87490: PUSH
87491: LD_VAR 0 1
87495: PPUSH
87496: CALL_OW 437
87500: PUSH
87501: LD_INT 1
87503: ARRAY
87504: PUSH
87505: LD_INT 1
87507: ARRAY
87508: EQUAL
87509: PUSH
87510: LD_VAR 0 2
87514: PUSH
87515: LD_VAR 0 1
87519: PPUSH
87520: CALL_OW 437
87524: PUSH
87525: LD_INT 1
87527: ARRAY
87528: PUSH
87529: LD_INT 2
87531: ARRAY
87532: EQUAL
87533: AND
87534: PUSH
87535: LD_VAR 0 3
87539: PUSH
87540: LD_VAR 0 1
87544: PPUSH
87545: CALL_OW 437
87549: PUSH
87550: LD_INT 1
87552: ARRAY
87553: PUSH
87554: LD_INT 3
87556: ARRAY
87557: EQUAL
87558: AND
87559: IFFALSE 87569
// result := true ;
87561: LD_ADDR_VAR 0 4
87565: PUSH
87566: LD_INT 1
87568: ST_TO_ADDR
// end ; end ;
87569: LD_VAR 0 4
87573: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
87574: LD_INT 0
87576: PPUSH
87577: PPUSH
87578: PPUSH
87579: PPUSH
// if not unit or not area then
87580: LD_VAR 0 1
87584: NOT
87585: PUSH
87586: LD_VAR 0 2
87590: NOT
87591: OR
87592: IFFALSE 87596
// exit ;
87594: GO 87759
// tmp := AreaToList ( area , i ) ;
87596: LD_ADDR_VAR 0 6
87600: PUSH
87601: LD_VAR 0 2
87605: PPUSH
87606: LD_VAR 0 5
87610: PPUSH
87611: CALL_OW 517
87615: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
87616: LD_ADDR_VAR 0 5
87620: PUSH
87621: DOUBLE
87622: LD_INT 1
87624: DEC
87625: ST_TO_ADDR
87626: LD_VAR 0 6
87630: PUSH
87631: LD_INT 1
87633: ARRAY
87634: PUSH
87635: FOR_TO
87636: IFFALSE 87757
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
87638: LD_ADDR_VAR 0 7
87642: PUSH
87643: LD_VAR 0 6
87647: PUSH
87648: LD_INT 1
87650: ARRAY
87651: PUSH
87652: LD_VAR 0 5
87656: ARRAY
87657: PUSH
87658: LD_VAR 0 6
87662: PUSH
87663: LD_INT 2
87665: ARRAY
87666: PUSH
87667: LD_VAR 0 5
87671: ARRAY
87672: PUSH
87673: EMPTY
87674: LIST
87675: LIST
87676: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
87677: LD_INT 92
87679: PUSH
87680: LD_VAR 0 7
87684: PUSH
87685: LD_INT 1
87687: ARRAY
87688: PUSH
87689: LD_VAR 0 7
87693: PUSH
87694: LD_INT 2
87696: ARRAY
87697: PUSH
87698: LD_INT 3
87700: PUSH
87701: EMPTY
87702: LIST
87703: LIST
87704: LIST
87705: LIST
87706: PPUSH
87707: CALL_OW 69
87711: PUSH
87712: LD_INT 0
87714: EQUAL
87715: IFFALSE 87755
// begin PlaceUnitArea ( unit , area , mode ) ;
87717: LD_VAR 0 1
87721: PPUSH
87722: LD_VAR 0 2
87726: PPUSH
87727: LD_VAR 0 3
87731: PPUSH
87732: CALL_OW 49
// result := IsPlaced ( unit ) ;
87736: LD_ADDR_VAR 0 4
87740: PUSH
87741: LD_VAR 0 1
87745: PPUSH
87746: CALL_OW 305
87750: ST_TO_ADDR
// exit ;
87751: POP
87752: POP
87753: GO 87759
// end ; end ;
87755: GO 87635
87757: POP
87758: POP
// end ;
87759: LD_VAR 0 4
87763: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
87764: LD_INT 0
87766: PPUSH
87767: PPUSH
87768: PPUSH
// if not side or side > 8 then
87769: LD_VAR 0 1
87773: NOT
87774: PUSH
87775: LD_VAR 0 1
87779: PUSH
87780: LD_INT 8
87782: GREATER
87783: OR
87784: IFFALSE 87788
// exit ;
87786: GO 87975
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
87788: LD_ADDR_VAR 0 4
87792: PUSH
87793: LD_INT 22
87795: PUSH
87796: LD_VAR 0 1
87800: PUSH
87801: EMPTY
87802: LIST
87803: LIST
87804: PUSH
87805: LD_INT 21
87807: PUSH
87808: LD_INT 3
87810: PUSH
87811: EMPTY
87812: LIST
87813: LIST
87814: PUSH
87815: EMPTY
87816: LIST
87817: LIST
87818: PPUSH
87819: CALL_OW 69
87823: ST_TO_ADDR
// if not tmp then
87824: LD_VAR 0 4
87828: NOT
87829: IFFALSE 87833
// exit ;
87831: GO 87975
// enable_addtolog := true ;
87833: LD_ADDR_OWVAR 81
87837: PUSH
87838: LD_INT 1
87840: ST_TO_ADDR
// AddToLog ( [ ) ;
87841: LD_STRING [
87843: PPUSH
87844: CALL_OW 561
// for i in tmp do
87848: LD_ADDR_VAR 0 3
87852: PUSH
87853: LD_VAR 0 4
87857: PUSH
87858: FOR_IN
87859: IFFALSE 87966
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
87861: LD_STRING [
87863: PUSH
87864: LD_VAR 0 3
87868: PPUSH
87869: CALL_OW 266
87873: STR
87874: PUSH
87875: LD_STRING , 
87877: STR
87878: PUSH
87879: LD_VAR 0 3
87883: PPUSH
87884: CALL_OW 250
87888: STR
87889: PUSH
87890: LD_STRING , 
87892: STR
87893: PUSH
87894: LD_VAR 0 3
87898: PPUSH
87899: CALL_OW 251
87903: STR
87904: PUSH
87905: LD_STRING , 
87907: STR
87908: PUSH
87909: LD_VAR 0 3
87913: PPUSH
87914: CALL_OW 254
87918: STR
87919: PUSH
87920: LD_STRING , 
87922: STR
87923: PUSH
87924: LD_VAR 0 3
87928: PPUSH
87929: LD_INT 1
87931: PPUSH
87932: CALL_OW 268
87936: STR
87937: PUSH
87938: LD_STRING , 
87940: STR
87941: PUSH
87942: LD_VAR 0 3
87946: PPUSH
87947: LD_INT 2
87949: PPUSH
87950: CALL_OW 268
87954: STR
87955: PUSH
87956: LD_STRING ],
87958: STR
87959: PPUSH
87960: CALL_OW 561
// end ;
87964: GO 87858
87966: POP
87967: POP
// AddToLog ( ]; ) ;
87968: LD_STRING ];
87970: PPUSH
87971: CALL_OW 561
// end ;
87975: LD_VAR 0 2
87979: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
87980: LD_INT 0
87982: PPUSH
87983: PPUSH
87984: PPUSH
87985: PPUSH
87986: PPUSH
// if not area or not rate or not max then
87987: LD_VAR 0 1
87991: NOT
87992: PUSH
87993: LD_VAR 0 2
87997: NOT
87998: OR
87999: PUSH
88000: LD_VAR 0 4
88004: NOT
88005: OR
88006: IFFALSE 88010
// exit ;
88008: GO 88199
// while 1 do
88010: LD_INT 1
88012: IFFALSE 88199
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
88014: LD_ADDR_VAR 0 9
88018: PUSH
88019: LD_VAR 0 1
88023: PPUSH
88024: LD_INT 1
88026: PPUSH
88027: CALL_OW 287
88031: PUSH
88032: LD_INT 10
88034: MUL
88035: ST_TO_ADDR
// r := rate / 10 ;
88036: LD_ADDR_VAR 0 7
88040: PUSH
88041: LD_VAR 0 2
88045: PUSH
88046: LD_INT 10
88048: DIVREAL
88049: ST_TO_ADDR
// time := 1 1$00 ;
88050: LD_ADDR_VAR 0 8
88054: PUSH
88055: LD_INT 2100
88057: ST_TO_ADDR
// if amount < min then
88058: LD_VAR 0 9
88062: PUSH
88063: LD_VAR 0 3
88067: LESS
88068: IFFALSE 88086
// r := r * 2 else
88070: LD_ADDR_VAR 0 7
88074: PUSH
88075: LD_VAR 0 7
88079: PUSH
88080: LD_INT 2
88082: MUL
88083: ST_TO_ADDR
88084: GO 88112
// if amount > max then
88086: LD_VAR 0 9
88090: PUSH
88091: LD_VAR 0 4
88095: GREATER
88096: IFFALSE 88112
// r := r / 2 ;
88098: LD_ADDR_VAR 0 7
88102: PUSH
88103: LD_VAR 0 7
88107: PUSH
88108: LD_INT 2
88110: DIVREAL
88111: ST_TO_ADDR
// time := time / r ;
88112: LD_ADDR_VAR 0 8
88116: PUSH
88117: LD_VAR 0 8
88121: PUSH
88122: LD_VAR 0 7
88126: DIVREAL
88127: ST_TO_ADDR
// if time < 0 then
88128: LD_VAR 0 8
88132: PUSH
88133: LD_INT 0
88135: LESS
88136: IFFALSE 88153
// time := time * - 1 ;
88138: LD_ADDR_VAR 0 8
88142: PUSH
88143: LD_VAR 0 8
88147: PUSH
88148: LD_INT 1
88150: NEG
88151: MUL
88152: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
88153: LD_VAR 0 8
88157: PUSH
88158: LD_INT 35
88160: PPUSH
88161: LD_INT 875
88163: PPUSH
88164: CALL_OW 12
88168: PLUS
88169: PPUSH
88170: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
88174: LD_INT 1
88176: PPUSH
88177: LD_INT 5
88179: PPUSH
88180: CALL_OW 12
88184: PPUSH
88185: LD_VAR 0 1
88189: PPUSH
88190: LD_INT 1
88192: PPUSH
88193: CALL_OW 55
// end ;
88197: GO 88010
// end ;
88199: LD_VAR 0 5
88203: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
88204: LD_INT 0
88206: PPUSH
88207: PPUSH
88208: PPUSH
88209: PPUSH
88210: PPUSH
88211: PPUSH
88212: PPUSH
88213: PPUSH
// if not turrets or not factories then
88214: LD_VAR 0 1
88218: NOT
88219: PUSH
88220: LD_VAR 0 2
88224: NOT
88225: OR
88226: IFFALSE 88230
// exit ;
88228: GO 88537
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
88230: LD_ADDR_VAR 0 10
88234: PUSH
88235: LD_INT 5
88237: PUSH
88238: LD_INT 6
88240: PUSH
88241: EMPTY
88242: LIST
88243: LIST
88244: PUSH
88245: LD_INT 2
88247: PUSH
88248: LD_INT 4
88250: PUSH
88251: EMPTY
88252: LIST
88253: LIST
88254: PUSH
88255: LD_INT 3
88257: PUSH
88258: LD_INT 5
88260: PUSH
88261: EMPTY
88262: LIST
88263: LIST
88264: PUSH
88265: EMPTY
88266: LIST
88267: LIST
88268: LIST
88269: PUSH
88270: LD_INT 24
88272: PUSH
88273: LD_INT 25
88275: PUSH
88276: EMPTY
88277: LIST
88278: LIST
88279: PUSH
88280: LD_INT 23
88282: PUSH
88283: LD_INT 27
88285: PUSH
88286: EMPTY
88287: LIST
88288: LIST
88289: PUSH
88290: EMPTY
88291: LIST
88292: LIST
88293: PUSH
88294: LD_INT 42
88296: PUSH
88297: LD_INT 43
88299: PUSH
88300: EMPTY
88301: LIST
88302: LIST
88303: PUSH
88304: LD_INT 44
88306: PUSH
88307: LD_INT 46
88309: PUSH
88310: EMPTY
88311: LIST
88312: LIST
88313: PUSH
88314: LD_INT 45
88316: PUSH
88317: LD_INT 47
88319: PUSH
88320: EMPTY
88321: LIST
88322: LIST
88323: PUSH
88324: EMPTY
88325: LIST
88326: LIST
88327: LIST
88328: PUSH
88329: EMPTY
88330: LIST
88331: LIST
88332: LIST
88333: ST_TO_ADDR
// result := [ ] ;
88334: LD_ADDR_VAR 0 3
88338: PUSH
88339: EMPTY
88340: ST_TO_ADDR
// for i in turrets do
88341: LD_ADDR_VAR 0 4
88345: PUSH
88346: LD_VAR 0 1
88350: PUSH
88351: FOR_IN
88352: IFFALSE 88535
// begin nat := GetNation ( i ) ;
88354: LD_ADDR_VAR 0 7
88358: PUSH
88359: LD_VAR 0 4
88363: PPUSH
88364: CALL_OW 248
88368: ST_TO_ADDR
// weapon := 0 ;
88369: LD_ADDR_VAR 0 8
88373: PUSH
88374: LD_INT 0
88376: ST_TO_ADDR
// if not nat then
88377: LD_VAR 0 7
88381: NOT
88382: IFFALSE 88386
// continue ;
88384: GO 88351
// for j in list [ nat ] do
88386: LD_ADDR_VAR 0 5
88390: PUSH
88391: LD_VAR 0 10
88395: PUSH
88396: LD_VAR 0 7
88400: ARRAY
88401: PUSH
88402: FOR_IN
88403: IFFALSE 88444
// if GetBWeapon ( i ) = j [ 1 ] then
88405: LD_VAR 0 4
88409: PPUSH
88410: CALL_OW 269
88414: PUSH
88415: LD_VAR 0 5
88419: PUSH
88420: LD_INT 1
88422: ARRAY
88423: EQUAL
88424: IFFALSE 88442
// begin weapon := j [ 2 ] ;
88426: LD_ADDR_VAR 0 8
88430: PUSH
88431: LD_VAR 0 5
88435: PUSH
88436: LD_INT 2
88438: ARRAY
88439: ST_TO_ADDR
// break ;
88440: GO 88444
// end ;
88442: GO 88402
88444: POP
88445: POP
// if not weapon then
88446: LD_VAR 0 8
88450: NOT
88451: IFFALSE 88455
// continue ;
88453: GO 88351
// for k in factories do
88455: LD_ADDR_VAR 0 6
88459: PUSH
88460: LD_VAR 0 2
88464: PUSH
88465: FOR_IN
88466: IFFALSE 88531
// begin weapons := AvailableWeaponList ( k ) ;
88468: LD_ADDR_VAR 0 9
88472: PUSH
88473: LD_VAR 0 6
88477: PPUSH
88478: CALL_OW 478
88482: ST_TO_ADDR
// if not weapons then
88483: LD_VAR 0 9
88487: NOT
88488: IFFALSE 88492
// continue ;
88490: GO 88465
// if weapon in weapons then
88492: LD_VAR 0 8
88496: PUSH
88497: LD_VAR 0 9
88501: IN
88502: IFFALSE 88529
// begin result := [ i , weapon ] ;
88504: LD_ADDR_VAR 0 3
88508: PUSH
88509: LD_VAR 0 4
88513: PUSH
88514: LD_VAR 0 8
88518: PUSH
88519: EMPTY
88520: LIST
88521: LIST
88522: ST_TO_ADDR
// exit ;
88523: POP
88524: POP
88525: POP
88526: POP
88527: GO 88537
// end ; end ;
88529: GO 88465
88531: POP
88532: POP
// end ;
88533: GO 88351
88535: POP
88536: POP
// end ;
88537: LD_VAR 0 3
88541: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
88542: LD_INT 0
88544: PPUSH
// if not side or side > 8 then
88545: LD_VAR 0 3
88549: NOT
88550: PUSH
88551: LD_VAR 0 3
88555: PUSH
88556: LD_INT 8
88558: GREATER
88559: OR
88560: IFFALSE 88564
// exit ;
88562: GO 88623
// if not range then
88564: LD_VAR 0 4
88568: NOT
88569: IFFALSE 88580
// range := - 12 ;
88571: LD_ADDR_VAR 0 4
88575: PUSH
88576: LD_INT 12
88578: NEG
88579: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
88580: LD_VAR 0 1
88584: PPUSH
88585: LD_VAR 0 2
88589: PPUSH
88590: LD_VAR 0 3
88594: PPUSH
88595: LD_VAR 0 4
88599: PPUSH
88600: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
88604: LD_VAR 0 1
88608: PPUSH
88609: LD_VAR 0 2
88613: PPUSH
88614: LD_VAR 0 3
88618: PPUSH
88619: CALL_OW 331
// end ;
88623: LD_VAR 0 5
88627: RET
// export function Video ( mode ) ; begin
88628: LD_INT 0
88630: PPUSH
// ingame_video = mode ;
88631: LD_ADDR_OWVAR 52
88635: PUSH
88636: LD_VAR 0 1
88640: ST_TO_ADDR
// interface_hidden = mode ;
88641: LD_ADDR_OWVAR 54
88645: PUSH
88646: LD_VAR 0 1
88650: ST_TO_ADDR
// end ;
88651: LD_VAR 0 2
88655: RET
// export function Join ( array , element ) ; begin
88656: LD_INT 0
88658: PPUSH
// result := Replace ( array , array + 1 , element ) ;
88659: LD_ADDR_VAR 0 3
88663: PUSH
88664: LD_VAR 0 1
88668: PPUSH
88669: LD_VAR 0 1
88673: PUSH
88674: LD_INT 1
88676: PLUS
88677: PPUSH
88678: LD_VAR 0 2
88682: PPUSH
88683: CALL_OW 1
88687: ST_TO_ADDR
// end ;
88688: LD_VAR 0 3
88692: RET
// export function JoinUnion ( array , element ) ; begin
88693: LD_INT 0
88695: PPUSH
// result := array union element ;
88696: LD_ADDR_VAR 0 3
88700: PUSH
88701: LD_VAR 0 1
88705: PUSH
88706: LD_VAR 0 2
88710: UNION
88711: ST_TO_ADDR
// end ;
88712: LD_VAR 0 3
88716: RET
// export function GetBehemoths ( side ) ; begin
88717: LD_INT 0
88719: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
88720: LD_ADDR_VAR 0 2
88724: PUSH
88725: LD_INT 22
88727: PUSH
88728: LD_VAR 0 1
88732: PUSH
88733: EMPTY
88734: LIST
88735: LIST
88736: PUSH
88737: LD_INT 31
88739: PUSH
88740: LD_INT 25
88742: PUSH
88743: EMPTY
88744: LIST
88745: LIST
88746: PUSH
88747: EMPTY
88748: LIST
88749: LIST
88750: PPUSH
88751: CALL_OW 69
88755: ST_TO_ADDR
// end ;
88756: LD_VAR 0 2
88760: RET
// export function Shuffle ( array ) ; var i , index ; begin
88761: LD_INT 0
88763: PPUSH
88764: PPUSH
88765: PPUSH
// result := [ ] ;
88766: LD_ADDR_VAR 0 2
88770: PUSH
88771: EMPTY
88772: ST_TO_ADDR
// if not array then
88773: LD_VAR 0 1
88777: NOT
88778: IFFALSE 88782
// exit ;
88780: GO 88881
// Randomize ;
88782: CALL_OW 10
// for i = array downto 1 do
88786: LD_ADDR_VAR 0 3
88790: PUSH
88791: DOUBLE
88792: LD_VAR 0 1
88796: INC
88797: ST_TO_ADDR
88798: LD_INT 1
88800: PUSH
88801: FOR_DOWNTO
88802: IFFALSE 88879
// begin index := rand ( 1 , array ) ;
88804: LD_ADDR_VAR 0 4
88808: PUSH
88809: LD_INT 1
88811: PPUSH
88812: LD_VAR 0 1
88816: PPUSH
88817: CALL_OW 12
88821: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
88822: LD_ADDR_VAR 0 2
88826: PUSH
88827: LD_VAR 0 2
88831: PPUSH
88832: LD_VAR 0 2
88836: PUSH
88837: LD_INT 1
88839: PLUS
88840: PPUSH
88841: LD_VAR 0 1
88845: PUSH
88846: LD_VAR 0 4
88850: ARRAY
88851: PPUSH
88852: CALL_OW 2
88856: ST_TO_ADDR
// array := Delete ( array , index ) ;
88857: LD_ADDR_VAR 0 1
88861: PUSH
88862: LD_VAR 0 1
88866: PPUSH
88867: LD_VAR 0 4
88871: PPUSH
88872: CALL_OW 3
88876: ST_TO_ADDR
// end ;
88877: GO 88801
88879: POP
88880: POP
// end ;
88881: LD_VAR 0 2
88885: RET
// export function GetBaseMaterials ( base ) ; begin
88886: LD_INT 0
88888: PPUSH
// result := [ 0 , 0 , 0 ] ;
88889: LD_ADDR_VAR 0 2
88893: PUSH
88894: LD_INT 0
88896: PUSH
88897: LD_INT 0
88899: PUSH
88900: LD_INT 0
88902: PUSH
88903: EMPTY
88904: LIST
88905: LIST
88906: LIST
88907: ST_TO_ADDR
// if not base then
88908: LD_VAR 0 1
88912: NOT
88913: IFFALSE 88917
// exit ;
88915: GO 88966
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
88917: LD_ADDR_VAR 0 2
88921: PUSH
88922: LD_VAR 0 1
88926: PPUSH
88927: LD_INT 1
88929: PPUSH
88930: CALL_OW 275
88934: PUSH
88935: LD_VAR 0 1
88939: PPUSH
88940: LD_INT 2
88942: PPUSH
88943: CALL_OW 275
88947: PUSH
88948: LD_VAR 0 1
88952: PPUSH
88953: LD_INT 3
88955: PPUSH
88956: CALL_OW 275
88960: PUSH
88961: EMPTY
88962: LIST
88963: LIST
88964: LIST
88965: ST_TO_ADDR
// end ;
88966: LD_VAR 0 2
88970: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
88971: LD_INT 0
88973: PPUSH
88974: PPUSH
// result := array ;
88975: LD_ADDR_VAR 0 3
88979: PUSH
88980: LD_VAR 0 1
88984: ST_TO_ADDR
// if size >= result then
88985: LD_VAR 0 2
88989: PUSH
88990: LD_VAR 0 3
88994: GREATEREQUAL
88995: IFFALSE 88999
// exit ;
88997: GO 89049
// if size then
88999: LD_VAR 0 2
89003: IFFALSE 89049
// for i := array downto size do
89005: LD_ADDR_VAR 0 4
89009: PUSH
89010: DOUBLE
89011: LD_VAR 0 1
89015: INC
89016: ST_TO_ADDR
89017: LD_VAR 0 2
89021: PUSH
89022: FOR_DOWNTO
89023: IFFALSE 89047
// result := Delete ( result , result ) ;
89025: LD_ADDR_VAR 0 3
89029: PUSH
89030: LD_VAR 0 3
89034: PPUSH
89035: LD_VAR 0 3
89039: PPUSH
89040: CALL_OW 3
89044: ST_TO_ADDR
89045: GO 89022
89047: POP
89048: POP
// end ;
89049: LD_VAR 0 3
89053: RET
// export function ComExit ( unit ) ; var tmp ; begin
89054: LD_INT 0
89056: PPUSH
89057: PPUSH
// if not IsInUnit ( unit ) then
89058: LD_VAR 0 1
89062: PPUSH
89063: CALL_OW 310
89067: NOT
89068: IFFALSE 89072
// exit ;
89070: GO 89132
// tmp := IsInUnit ( unit ) ;
89072: LD_ADDR_VAR 0 3
89076: PUSH
89077: LD_VAR 0 1
89081: PPUSH
89082: CALL_OW 310
89086: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
89087: LD_VAR 0 3
89091: PPUSH
89092: CALL_OW 247
89096: PUSH
89097: LD_INT 2
89099: EQUAL
89100: IFFALSE 89113
// ComExitVehicle ( unit ) else
89102: LD_VAR 0 1
89106: PPUSH
89107: CALL_OW 121
89111: GO 89122
// ComExitBuilding ( unit ) ;
89113: LD_VAR 0 1
89117: PPUSH
89118: CALL_OW 122
// result := tmp ;
89122: LD_ADDR_VAR 0 2
89126: PUSH
89127: LD_VAR 0 3
89131: ST_TO_ADDR
// end ;
89132: LD_VAR 0 2
89136: RET
// export function ComExitAll ( units ) ; var i ; begin
89137: LD_INT 0
89139: PPUSH
89140: PPUSH
// if not units then
89141: LD_VAR 0 1
89145: NOT
89146: IFFALSE 89150
// exit ;
89148: GO 89176
// for i in units do
89150: LD_ADDR_VAR 0 3
89154: PUSH
89155: LD_VAR 0 1
89159: PUSH
89160: FOR_IN
89161: IFFALSE 89174
// ComExit ( i ) ;
89163: LD_VAR 0 3
89167: PPUSH
89168: CALL 89054 0 1
89172: GO 89160
89174: POP
89175: POP
// end ;
89176: LD_VAR 0 2
89180: RET
// export function ResetHc ; begin
89181: LD_INT 0
89183: PPUSH
// InitHc ;
89184: CALL_OW 19
// hc_importance := 0 ;
89188: LD_ADDR_OWVAR 32
89192: PUSH
89193: LD_INT 0
89195: ST_TO_ADDR
// end ;
89196: LD_VAR 0 1
89200: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
89201: LD_INT 0
89203: PPUSH
89204: PPUSH
89205: PPUSH
// _x := ( x1 + x2 ) div 2 ;
89206: LD_ADDR_VAR 0 6
89210: PUSH
89211: LD_VAR 0 1
89215: PUSH
89216: LD_VAR 0 3
89220: PLUS
89221: PUSH
89222: LD_INT 2
89224: DIV
89225: ST_TO_ADDR
// if _x < 0 then
89226: LD_VAR 0 6
89230: PUSH
89231: LD_INT 0
89233: LESS
89234: IFFALSE 89251
// _x := _x * - 1 ;
89236: LD_ADDR_VAR 0 6
89240: PUSH
89241: LD_VAR 0 6
89245: PUSH
89246: LD_INT 1
89248: NEG
89249: MUL
89250: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
89251: LD_ADDR_VAR 0 7
89255: PUSH
89256: LD_VAR 0 2
89260: PUSH
89261: LD_VAR 0 4
89265: PLUS
89266: PUSH
89267: LD_INT 2
89269: DIV
89270: ST_TO_ADDR
// if _y < 0 then
89271: LD_VAR 0 7
89275: PUSH
89276: LD_INT 0
89278: LESS
89279: IFFALSE 89296
// _y := _y * - 1 ;
89281: LD_ADDR_VAR 0 7
89285: PUSH
89286: LD_VAR 0 7
89290: PUSH
89291: LD_INT 1
89293: NEG
89294: MUL
89295: ST_TO_ADDR
// result := [ _x , _y ] ;
89296: LD_ADDR_VAR 0 5
89300: PUSH
89301: LD_VAR 0 6
89305: PUSH
89306: LD_VAR 0 7
89310: PUSH
89311: EMPTY
89312: LIST
89313: LIST
89314: ST_TO_ADDR
// end ;
89315: LD_VAR 0 5
89319: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
89320: LD_INT 0
89322: PPUSH
89323: PPUSH
89324: PPUSH
89325: PPUSH
// task := GetTaskList ( unit ) ;
89326: LD_ADDR_VAR 0 7
89330: PUSH
89331: LD_VAR 0 1
89335: PPUSH
89336: CALL_OW 437
89340: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
89341: LD_VAR 0 7
89345: NOT
89346: PUSH
89347: LD_VAR 0 1
89351: PPUSH
89352: LD_VAR 0 2
89356: PPUSH
89357: CALL_OW 308
89361: NOT
89362: AND
89363: IFFALSE 89367
// exit ;
89365: GO 89485
// if IsInArea ( unit , area ) then
89367: LD_VAR 0 1
89371: PPUSH
89372: LD_VAR 0 2
89376: PPUSH
89377: CALL_OW 308
89381: IFFALSE 89399
// begin ComMoveToArea ( unit , goAway ) ;
89383: LD_VAR 0 1
89387: PPUSH
89388: LD_VAR 0 3
89392: PPUSH
89393: CALL_OW 113
// exit ;
89397: GO 89485
// end ; if task [ 1 ] [ 1 ] <> M then
89399: LD_VAR 0 7
89403: PUSH
89404: LD_INT 1
89406: ARRAY
89407: PUSH
89408: LD_INT 1
89410: ARRAY
89411: PUSH
89412: LD_STRING M
89414: NONEQUAL
89415: IFFALSE 89419
// exit ;
89417: GO 89485
// x := task [ 1 ] [ 2 ] ;
89419: LD_ADDR_VAR 0 5
89423: PUSH
89424: LD_VAR 0 7
89428: PUSH
89429: LD_INT 1
89431: ARRAY
89432: PUSH
89433: LD_INT 2
89435: ARRAY
89436: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
89437: LD_ADDR_VAR 0 6
89441: PUSH
89442: LD_VAR 0 7
89446: PUSH
89447: LD_INT 1
89449: ARRAY
89450: PUSH
89451: LD_INT 3
89453: ARRAY
89454: ST_TO_ADDR
// if InArea ( x , y , area ) then
89455: LD_VAR 0 5
89459: PPUSH
89460: LD_VAR 0 6
89464: PPUSH
89465: LD_VAR 0 2
89469: PPUSH
89470: CALL_OW 309
89474: IFFALSE 89485
// ComStop ( unit ) ;
89476: LD_VAR 0 1
89480: PPUSH
89481: CALL_OW 141
// end ;
89485: LD_VAR 0 4
89489: RET
// export function Abs ( value ) ; begin
89490: LD_INT 0
89492: PPUSH
// result := value ;
89493: LD_ADDR_VAR 0 2
89497: PUSH
89498: LD_VAR 0 1
89502: ST_TO_ADDR
// if value < 0 then
89503: LD_VAR 0 1
89507: PUSH
89508: LD_INT 0
89510: LESS
89511: IFFALSE 89528
// result := value * - 1 ;
89513: LD_ADDR_VAR 0 2
89517: PUSH
89518: LD_VAR 0 1
89522: PUSH
89523: LD_INT 1
89525: NEG
89526: MUL
89527: ST_TO_ADDR
// end ;
89528: LD_VAR 0 2
89532: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
89533: LD_INT 0
89535: PPUSH
89536: PPUSH
89537: PPUSH
89538: PPUSH
89539: PPUSH
89540: PPUSH
89541: PPUSH
89542: PPUSH
// if not unit or not building then
89543: LD_VAR 0 1
89547: NOT
89548: PUSH
89549: LD_VAR 0 2
89553: NOT
89554: OR
89555: IFFALSE 89559
// exit ;
89557: GO 89785
// x := GetX ( building ) ;
89559: LD_ADDR_VAR 0 4
89563: PUSH
89564: LD_VAR 0 2
89568: PPUSH
89569: CALL_OW 250
89573: ST_TO_ADDR
// y := GetY ( building ) ;
89574: LD_ADDR_VAR 0 6
89578: PUSH
89579: LD_VAR 0 2
89583: PPUSH
89584: CALL_OW 251
89588: ST_TO_ADDR
// d := GetDir ( building ) ;
89589: LD_ADDR_VAR 0 8
89593: PUSH
89594: LD_VAR 0 2
89598: PPUSH
89599: CALL_OW 254
89603: ST_TO_ADDR
// r := 4 ;
89604: LD_ADDR_VAR 0 9
89608: PUSH
89609: LD_INT 4
89611: ST_TO_ADDR
// for i := 1 to 5 do
89612: LD_ADDR_VAR 0 10
89616: PUSH
89617: DOUBLE
89618: LD_INT 1
89620: DEC
89621: ST_TO_ADDR
89622: LD_INT 5
89624: PUSH
89625: FOR_TO
89626: IFFALSE 89783
// begin _x := ShiftX ( x , d , r + i ) ;
89628: LD_ADDR_VAR 0 5
89632: PUSH
89633: LD_VAR 0 4
89637: PPUSH
89638: LD_VAR 0 8
89642: PPUSH
89643: LD_VAR 0 9
89647: PUSH
89648: LD_VAR 0 10
89652: PLUS
89653: PPUSH
89654: CALL_OW 272
89658: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
89659: LD_ADDR_VAR 0 7
89663: PUSH
89664: LD_VAR 0 6
89668: PPUSH
89669: LD_VAR 0 8
89673: PPUSH
89674: LD_VAR 0 9
89678: PUSH
89679: LD_VAR 0 10
89683: PLUS
89684: PPUSH
89685: CALL_OW 273
89689: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
89690: LD_VAR 0 5
89694: PPUSH
89695: LD_VAR 0 7
89699: PPUSH
89700: CALL_OW 488
89704: PUSH
89705: LD_VAR 0 5
89709: PPUSH
89710: LD_VAR 0 7
89714: PPUSH
89715: CALL_OW 428
89719: PPUSH
89720: CALL_OW 247
89724: PUSH
89725: LD_INT 3
89727: PUSH
89728: LD_INT 2
89730: PUSH
89731: EMPTY
89732: LIST
89733: LIST
89734: IN
89735: NOT
89736: AND
89737: IFFALSE 89781
// begin ComMoveXY ( unit , _x , _y ) ;
89739: LD_VAR 0 1
89743: PPUSH
89744: LD_VAR 0 5
89748: PPUSH
89749: LD_VAR 0 7
89753: PPUSH
89754: CALL_OW 111
// result := [ _x , _y ] ;
89758: LD_ADDR_VAR 0 3
89762: PUSH
89763: LD_VAR 0 5
89767: PUSH
89768: LD_VAR 0 7
89772: PUSH
89773: EMPTY
89774: LIST
89775: LIST
89776: ST_TO_ADDR
// exit ;
89777: POP
89778: POP
89779: GO 89785
// end ; end ;
89781: GO 89625
89783: POP
89784: POP
// end ;
89785: LD_VAR 0 3
89789: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
89790: LD_INT 0
89792: PPUSH
89793: PPUSH
89794: PPUSH
// result := 0 ;
89795: LD_ADDR_VAR 0 3
89799: PUSH
89800: LD_INT 0
89802: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
89803: LD_VAR 0 1
89807: PUSH
89808: LD_INT 0
89810: LESS
89811: PUSH
89812: LD_VAR 0 1
89816: PUSH
89817: LD_INT 8
89819: GREATER
89820: OR
89821: PUSH
89822: LD_VAR 0 2
89826: PUSH
89827: LD_INT 0
89829: LESS
89830: OR
89831: PUSH
89832: LD_VAR 0 2
89836: PUSH
89837: LD_INT 8
89839: GREATER
89840: OR
89841: IFFALSE 89845
// exit ;
89843: GO 89920
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
89845: LD_ADDR_VAR 0 4
89849: PUSH
89850: LD_INT 22
89852: PUSH
89853: LD_VAR 0 2
89857: PUSH
89858: EMPTY
89859: LIST
89860: LIST
89861: PPUSH
89862: CALL_OW 69
89866: PUSH
89867: FOR_IN
89868: IFFALSE 89918
// begin un := UnitShoot ( i ) ;
89870: LD_ADDR_VAR 0 5
89874: PUSH
89875: LD_VAR 0 4
89879: PPUSH
89880: CALL_OW 504
89884: ST_TO_ADDR
// if GetSide ( un ) = side1 then
89885: LD_VAR 0 5
89889: PPUSH
89890: CALL_OW 255
89894: PUSH
89895: LD_VAR 0 1
89899: EQUAL
89900: IFFALSE 89916
// begin result := un ;
89902: LD_ADDR_VAR 0 3
89906: PUSH
89907: LD_VAR 0 5
89911: ST_TO_ADDR
// exit ;
89912: POP
89913: POP
89914: GO 89920
// end ; end ;
89916: GO 89867
89918: POP
89919: POP
// end ;
89920: LD_VAR 0 3
89924: RET
// export function GetCargoBay ( units ) ; begin
89925: LD_INT 0
89927: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
89928: LD_ADDR_VAR 0 2
89932: PUSH
89933: LD_VAR 0 1
89937: PPUSH
89938: LD_INT 2
89940: PUSH
89941: LD_INT 34
89943: PUSH
89944: LD_INT 12
89946: PUSH
89947: EMPTY
89948: LIST
89949: LIST
89950: PUSH
89951: LD_INT 34
89953: PUSH
89954: LD_INT 51
89956: PUSH
89957: EMPTY
89958: LIST
89959: LIST
89960: PUSH
89961: LD_INT 34
89963: PUSH
89964: LD_INT 32
89966: PUSH
89967: EMPTY
89968: LIST
89969: LIST
89970: PUSH
89971: LD_INT 34
89973: PUSH
89974: LD_INT 89
89976: PUSH
89977: EMPTY
89978: LIST
89979: LIST
89980: PUSH
89981: EMPTY
89982: LIST
89983: LIST
89984: LIST
89985: LIST
89986: LIST
89987: PPUSH
89988: CALL_OW 72
89992: ST_TO_ADDR
// end ;
89993: LD_VAR 0 2
89997: RET
// export function Negate ( value ) ; begin
89998: LD_INT 0
90000: PPUSH
// result := not value ;
90001: LD_ADDR_VAR 0 2
90005: PUSH
90006: LD_VAR 0 1
90010: NOT
90011: ST_TO_ADDR
// end ;
90012: LD_VAR 0 2
90016: RET
// export function Inc ( value ) ; begin
90017: LD_INT 0
90019: PPUSH
// result := value + 1 ;
90020: LD_ADDR_VAR 0 2
90024: PUSH
90025: LD_VAR 0 1
90029: PUSH
90030: LD_INT 1
90032: PLUS
90033: ST_TO_ADDR
// end ;
90034: LD_VAR 0 2
90038: RET
// export function Dec ( value ) ; begin
90039: LD_INT 0
90041: PPUSH
// result := value - 1 ;
90042: LD_ADDR_VAR 0 2
90046: PUSH
90047: LD_VAR 0 1
90051: PUSH
90052: LD_INT 1
90054: MINUS
90055: ST_TO_ADDR
// end ;
90056: LD_VAR 0 2
90060: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
90061: LD_INT 0
90063: PPUSH
90064: PPUSH
90065: PPUSH
90066: PPUSH
90067: PPUSH
90068: PPUSH
90069: PPUSH
90070: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
90071: LD_VAR 0 1
90075: PPUSH
90076: LD_VAR 0 2
90080: PPUSH
90081: CALL_OW 488
90085: NOT
90086: PUSH
90087: LD_VAR 0 3
90091: PPUSH
90092: LD_VAR 0 4
90096: PPUSH
90097: CALL_OW 488
90101: NOT
90102: OR
90103: IFFALSE 90116
// begin result := - 1 ;
90105: LD_ADDR_VAR 0 5
90109: PUSH
90110: LD_INT 1
90112: NEG
90113: ST_TO_ADDR
// exit ;
90114: GO 90351
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
90116: LD_ADDR_VAR 0 12
90120: PUSH
90121: LD_VAR 0 1
90125: PPUSH
90126: LD_VAR 0 2
90130: PPUSH
90131: LD_VAR 0 3
90135: PPUSH
90136: LD_VAR 0 4
90140: PPUSH
90141: CALL 89201 0 4
90145: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
90146: LD_ADDR_VAR 0 11
90150: PUSH
90151: LD_VAR 0 1
90155: PPUSH
90156: LD_VAR 0 2
90160: PPUSH
90161: LD_VAR 0 12
90165: PUSH
90166: LD_INT 1
90168: ARRAY
90169: PPUSH
90170: LD_VAR 0 12
90174: PUSH
90175: LD_INT 2
90177: ARRAY
90178: PPUSH
90179: CALL_OW 298
90183: ST_TO_ADDR
// distance := 9999 ;
90184: LD_ADDR_VAR 0 10
90188: PUSH
90189: LD_INT 9999
90191: ST_TO_ADDR
// for i := 0 to 5 do
90192: LD_ADDR_VAR 0 6
90196: PUSH
90197: DOUBLE
90198: LD_INT 0
90200: DEC
90201: ST_TO_ADDR
90202: LD_INT 5
90204: PUSH
90205: FOR_TO
90206: IFFALSE 90349
// begin _x := ShiftX ( x1 , i , centerDist ) ;
90208: LD_ADDR_VAR 0 7
90212: PUSH
90213: LD_VAR 0 1
90217: PPUSH
90218: LD_VAR 0 6
90222: PPUSH
90223: LD_VAR 0 11
90227: PPUSH
90228: CALL_OW 272
90232: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
90233: LD_ADDR_VAR 0 8
90237: PUSH
90238: LD_VAR 0 2
90242: PPUSH
90243: LD_VAR 0 6
90247: PPUSH
90248: LD_VAR 0 11
90252: PPUSH
90253: CALL_OW 273
90257: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
90258: LD_VAR 0 7
90262: PPUSH
90263: LD_VAR 0 8
90267: PPUSH
90268: CALL_OW 488
90272: NOT
90273: IFFALSE 90277
// continue ;
90275: GO 90205
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
90277: LD_ADDR_VAR 0 9
90281: PUSH
90282: LD_VAR 0 12
90286: PUSH
90287: LD_INT 1
90289: ARRAY
90290: PPUSH
90291: LD_VAR 0 12
90295: PUSH
90296: LD_INT 2
90298: ARRAY
90299: PPUSH
90300: LD_VAR 0 7
90304: PPUSH
90305: LD_VAR 0 8
90309: PPUSH
90310: CALL_OW 298
90314: ST_TO_ADDR
// if tmp < distance then
90315: LD_VAR 0 9
90319: PUSH
90320: LD_VAR 0 10
90324: LESS
90325: IFFALSE 90347
// begin result := i ;
90327: LD_ADDR_VAR 0 5
90331: PUSH
90332: LD_VAR 0 6
90336: ST_TO_ADDR
// distance := tmp ;
90337: LD_ADDR_VAR 0 10
90341: PUSH
90342: LD_VAR 0 9
90346: ST_TO_ADDR
// end ; end ;
90347: GO 90205
90349: POP
90350: POP
// end ;
90351: LD_VAR 0 5
90355: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
90356: LD_INT 0
90358: PPUSH
90359: PPUSH
// if not driver or not IsInUnit ( driver ) then
90360: LD_VAR 0 1
90364: NOT
90365: PUSH
90366: LD_VAR 0 1
90370: PPUSH
90371: CALL_OW 310
90375: NOT
90376: OR
90377: IFFALSE 90381
// exit ;
90379: GO 90471
// vehicle := IsInUnit ( driver ) ;
90381: LD_ADDR_VAR 0 3
90385: PUSH
90386: LD_VAR 0 1
90390: PPUSH
90391: CALL_OW 310
90395: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
90396: LD_VAR 0 1
90400: PPUSH
90401: LD_STRING \
90403: PUSH
90404: LD_INT 0
90406: PUSH
90407: LD_INT 0
90409: PUSH
90410: LD_INT 0
90412: PUSH
90413: LD_INT 0
90415: PUSH
90416: LD_INT 0
90418: PUSH
90419: LD_INT 0
90421: PUSH
90422: EMPTY
90423: LIST
90424: LIST
90425: LIST
90426: LIST
90427: LIST
90428: LIST
90429: LIST
90430: PUSH
90431: LD_STRING E
90433: PUSH
90434: LD_INT 0
90436: PUSH
90437: LD_INT 0
90439: PUSH
90440: LD_VAR 0 3
90444: PUSH
90445: LD_INT 0
90447: PUSH
90448: LD_INT 0
90450: PUSH
90451: LD_INT 0
90453: PUSH
90454: EMPTY
90455: LIST
90456: LIST
90457: LIST
90458: LIST
90459: LIST
90460: LIST
90461: LIST
90462: PUSH
90463: EMPTY
90464: LIST
90465: LIST
90466: PPUSH
90467: CALL_OW 446
// end ;
90471: LD_VAR 0 2
90475: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
90476: LD_INT 0
90478: PPUSH
90479: PPUSH
// if not driver or not IsInUnit ( driver ) then
90480: LD_VAR 0 1
90484: NOT
90485: PUSH
90486: LD_VAR 0 1
90490: PPUSH
90491: CALL_OW 310
90495: NOT
90496: OR
90497: IFFALSE 90501
// exit ;
90499: GO 90591
// vehicle := IsInUnit ( driver ) ;
90501: LD_ADDR_VAR 0 3
90505: PUSH
90506: LD_VAR 0 1
90510: PPUSH
90511: CALL_OW 310
90515: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
90516: LD_VAR 0 1
90520: PPUSH
90521: LD_STRING \
90523: PUSH
90524: LD_INT 0
90526: PUSH
90527: LD_INT 0
90529: PUSH
90530: LD_INT 0
90532: PUSH
90533: LD_INT 0
90535: PUSH
90536: LD_INT 0
90538: PUSH
90539: LD_INT 0
90541: PUSH
90542: EMPTY
90543: LIST
90544: LIST
90545: LIST
90546: LIST
90547: LIST
90548: LIST
90549: LIST
90550: PUSH
90551: LD_STRING E
90553: PUSH
90554: LD_INT 0
90556: PUSH
90557: LD_INT 0
90559: PUSH
90560: LD_VAR 0 3
90564: PUSH
90565: LD_INT 0
90567: PUSH
90568: LD_INT 0
90570: PUSH
90571: LD_INT 0
90573: PUSH
90574: EMPTY
90575: LIST
90576: LIST
90577: LIST
90578: LIST
90579: LIST
90580: LIST
90581: LIST
90582: PUSH
90583: EMPTY
90584: LIST
90585: LIST
90586: PPUSH
90587: CALL_OW 447
// end ;
90591: LD_VAR 0 2
90595: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
90596: LD_INT 0
90598: PPUSH
90599: PPUSH
90600: PPUSH
// tmp := [ ] ;
90601: LD_ADDR_VAR 0 5
90605: PUSH
90606: EMPTY
90607: ST_TO_ADDR
// for i in units do
90608: LD_ADDR_VAR 0 4
90612: PUSH
90613: LD_VAR 0 1
90617: PUSH
90618: FOR_IN
90619: IFFALSE 90657
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
90621: LD_ADDR_VAR 0 5
90625: PUSH
90626: LD_VAR 0 5
90630: PPUSH
90631: LD_VAR 0 5
90635: PUSH
90636: LD_INT 1
90638: PLUS
90639: PPUSH
90640: LD_VAR 0 4
90644: PPUSH
90645: CALL_OW 256
90649: PPUSH
90650: CALL_OW 2
90654: ST_TO_ADDR
90655: GO 90618
90657: POP
90658: POP
// if not tmp then
90659: LD_VAR 0 5
90663: NOT
90664: IFFALSE 90668
// exit ;
90666: GO 90716
// if asc then
90668: LD_VAR 0 2
90672: IFFALSE 90696
// result := SortListByListAsc ( units , tmp ) else
90674: LD_ADDR_VAR 0 3
90678: PUSH
90679: LD_VAR 0 1
90683: PPUSH
90684: LD_VAR 0 5
90688: PPUSH
90689: CALL_OW 76
90693: ST_TO_ADDR
90694: GO 90716
// result := SortListByListDesc ( units , tmp ) ;
90696: LD_ADDR_VAR 0 3
90700: PUSH
90701: LD_VAR 0 1
90705: PPUSH
90706: LD_VAR 0 5
90710: PPUSH
90711: CALL_OW 77
90715: ST_TO_ADDR
// end ;
90716: LD_VAR 0 3
90720: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
90721: LD_INT 0
90723: PPUSH
90724: PPUSH
// task := GetTaskList ( mech ) ;
90725: LD_ADDR_VAR 0 4
90729: PUSH
90730: LD_VAR 0 1
90734: PPUSH
90735: CALL_OW 437
90739: ST_TO_ADDR
// if not task then
90740: LD_VAR 0 4
90744: NOT
90745: IFFALSE 90749
// exit ;
90747: GO 90791
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
90749: LD_ADDR_VAR 0 3
90753: PUSH
90754: LD_VAR 0 4
90758: PUSH
90759: LD_INT 1
90761: ARRAY
90762: PUSH
90763: LD_INT 1
90765: ARRAY
90766: PUSH
90767: LD_STRING r
90769: EQUAL
90770: PUSH
90771: LD_VAR 0 4
90775: PUSH
90776: LD_INT 1
90778: ARRAY
90779: PUSH
90780: LD_INT 4
90782: ARRAY
90783: PUSH
90784: LD_VAR 0 2
90788: EQUAL
90789: AND
90790: ST_TO_ADDR
// end ;
90791: LD_VAR 0 3
90795: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
90796: LD_INT 0
90798: PPUSH
// SetDir ( unit , d ) ;
90799: LD_VAR 0 1
90803: PPUSH
90804: LD_VAR 0 4
90808: PPUSH
90809: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
90813: LD_VAR 0 1
90817: PPUSH
90818: LD_VAR 0 2
90822: PPUSH
90823: LD_VAR 0 3
90827: PPUSH
90828: LD_VAR 0 5
90832: PPUSH
90833: CALL_OW 48
// end ;
90837: LD_VAR 0 6
90841: RET
// export function ToNaturalNumber ( number ) ; begin
90842: LD_INT 0
90844: PPUSH
// result := number div 1 ;
90845: LD_ADDR_VAR 0 2
90849: PUSH
90850: LD_VAR 0 1
90854: PUSH
90855: LD_INT 1
90857: DIV
90858: ST_TO_ADDR
// if number < 0 then
90859: LD_VAR 0 1
90863: PUSH
90864: LD_INT 0
90866: LESS
90867: IFFALSE 90877
// result := 0 ;
90869: LD_ADDR_VAR 0 2
90873: PUSH
90874: LD_INT 0
90876: ST_TO_ADDR
// end ;
90877: LD_VAR 0 2
90881: RET
// export function SortByClass ( units , class ) ; var un ; begin
90882: LD_INT 0
90884: PPUSH
90885: PPUSH
// if not units or not class then
90886: LD_VAR 0 1
90890: NOT
90891: PUSH
90892: LD_VAR 0 2
90896: NOT
90897: OR
90898: IFFALSE 90902
// exit ;
90900: GO 90997
// result := [ ] ;
90902: LD_ADDR_VAR 0 3
90906: PUSH
90907: EMPTY
90908: ST_TO_ADDR
// for un in units do
90909: LD_ADDR_VAR 0 4
90913: PUSH
90914: LD_VAR 0 1
90918: PUSH
90919: FOR_IN
90920: IFFALSE 90995
// if GetClass ( un ) = class then
90922: LD_VAR 0 4
90926: PPUSH
90927: CALL_OW 257
90931: PUSH
90932: LD_VAR 0 2
90936: EQUAL
90937: IFFALSE 90964
// result := Insert ( result , 1 , un ) else
90939: LD_ADDR_VAR 0 3
90943: PUSH
90944: LD_VAR 0 3
90948: PPUSH
90949: LD_INT 1
90951: PPUSH
90952: LD_VAR 0 4
90956: PPUSH
90957: CALL_OW 2
90961: ST_TO_ADDR
90962: GO 90993
// result := Replace ( result , result + 1 , un ) ;
90964: LD_ADDR_VAR 0 3
90968: PUSH
90969: LD_VAR 0 3
90973: PPUSH
90974: LD_VAR 0 3
90978: PUSH
90979: LD_INT 1
90981: PLUS
90982: PPUSH
90983: LD_VAR 0 4
90987: PPUSH
90988: CALL_OW 1
90992: ST_TO_ADDR
90993: GO 90919
90995: POP
90996: POP
// end ;
90997: LD_VAR 0 3
91001: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
91002: LD_INT 0
91004: PPUSH
91005: PPUSH
91006: PPUSH
91007: PPUSH
91008: PPUSH
91009: PPUSH
91010: PPUSH
// result := [ ] ;
91011: LD_ADDR_VAR 0 4
91015: PUSH
91016: EMPTY
91017: ST_TO_ADDR
// if x - r < 0 then
91018: LD_VAR 0 1
91022: PUSH
91023: LD_VAR 0 3
91027: MINUS
91028: PUSH
91029: LD_INT 0
91031: LESS
91032: IFFALSE 91044
// min_x := 0 else
91034: LD_ADDR_VAR 0 8
91038: PUSH
91039: LD_INT 0
91041: ST_TO_ADDR
91042: GO 91060
// min_x := x - r ;
91044: LD_ADDR_VAR 0 8
91048: PUSH
91049: LD_VAR 0 1
91053: PUSH
91054: LD_VAR 0 3
91058: MINUS
91059: ST_TO_ADDR
// if y - r < 0 then
91060: LD_VAR 0 2
91064: PUSH
91065: LD_VAR 0 3
91069: MINUS
91070: PUSH
91071: LD_INT 0
91073: LESS
91074: IFFALSE 91086
// min_y := 0 else
91076: LD_ADDR_VAR 0 7
91080: PUSH
91081: LD_INT 0
91083: ST_TO_ADDR
91084: GO 91102
// min_y := y - r ;
91086: LD_ADDR_VAR 0 7
91090: PUSH
91091: LD_VAR 0 2
91095: PUSH
91096: LD_VAR 0 3
91100: MINUS
91101: ST_TO_ADDR
// max_x := x + r ;
91102: LD_ADDR_VAR 0 9
91106: PUSH
91107: LD_VAR 0 1
91111: PUSH
91112: LD_VAR 0 3
91116: PLUS
91117: ST_TO_ADDR
// max_y := y + r ;
91118: LD_ADDR_VAR 0 10
91122: PUSH
91123: LD_VAR 0 2
91127: PUSH
91128: LD_VAR 0 3
91132: PLUS
91133: ST_TO_ADDR
// for _x = min_x to max_x do
91134: LD_ADDR_VAR 0 5
91138: PUSH
91139: DOUBLE
91140: LD_VAR 0 8
91144: DEC
91145: ST_TO_ADDR
91146: LD_VAR 0 9
91150: PUSH
91151: FOR_TO
91152: IFFALSE 91253
// for _y = min_y to max_y do
91154: LD_ADDR_VAR 0 6
91158: PUSH
91159: DOUBLE
91160: LD_VAR 0 7
91164: DEC
91165: ST_TO_ADDR
91166: LD_VAR 0 10
91170: PUSH
91171: FOR_TO
91172: IFFALSE 91249
// begin if not ValidHex ( _x , _y ) then
91174: LD_VAR 0 5
91178: PPUSH
91179: LD_VAR 0 6
91183: PPUSH
91184: CALL_OW 488
91188: NOT
91189: IFFALSE 91193
// continue ;
91191: GO 91171
// if GetResourceTypeXY ( _x , _y ) then
91193: LD_VAR 0 5
91197: PPUSH
91198: LD_VAR 0 6
91202: PPUSH
91203: CALL_OW 283
91207: IFFALSE 91247
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
91209: LD_ADDR_VAR 0 4
91213: PUSH
91214: LD_VAR 0 4
91218: PPUSH
91219: LD_VAR 0 4
91223: PUSH
91224: LD_INT 1
91226: PLUS
91227: PPUSH
91228: LD_VAR 0 5
91232: PUSH
91233: LD_VAR 0 6
91237: PUSH
91238: EMPTY
91239: LIST
91240: LIST
91241: PPUSH
91242: CALL_OW 1
91246: ST_TO_ADDR
// end ;
91247: GO 91171
91249: POP
91250: POP
91251: GO 91151
91253: POP
91254: POP
// end ;
91255: LD_VAR 0 4
91259: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
91260: LD_INT 0
91262: PPUSH
91263: PPUSH
91264: PPUSH
91265: PPUSH
91266: PPUSH
91267: PPUSH
91268: PPUSH
91269: PPUSH
// if not units then
91270: LD_VAR 0 1
91274: NOT
91275: IFFALSE 91279
// exit ;
91277: GO 91803
// result := UnitFilter ( units , [ f_ok ] ) ;
91279: LD_ADDR_VAR 0 3
91283: PUSH
91284: LD_VAR 0 1
91288: PPUSH
91289: LD_INT 50
91291: PUSH
91292: EMPTY
91293: LIST
91294: PPUSH
91295: CALL_OW 72
91299: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
91300: LD_ADDR_VAR 0 8
91304: PUSH
91305: LD_VAR 0 1
91309: PUSH
91310: LD_INT 1
91312: ARRAY
91313: PPUSH
91314: CALL_OW 255
91318: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
91319: LD_ADDR_VAR 0 10
91323: PUSH
91324: LD_INT 29
91326: PUSH
91327: LD_INT 91
91329: PUSH
91330: LD_INT 49
91332: PUSH
91333: EMPTY
91334: LIST
91335: LIST
91336: LIST
91337: ST_TO_ADDR
// if not result then
91338: LD_VAR 0 3
91342: NOT
91343: IFFALSE 91347
// exit ;
91345: GO 91803
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
91347: LD_ADDR_VAR 0 5
91351: PUSH
91352: LD_INT 81
91354: PUSH
91355: LD_VAR 0 8
91359: PUSH
91360: EMPTY
91361: LIST
91362: LIST
91363: PPUSH
91364: CALL_OW 69
91368: ST_TO_ADDR
// for i in result do
91369: LD_ADDR_VAR 0 4
91373: PUSH
91374: LD_VAR 0 3
91378: PUSH
91379: FOR_IN
91380: IFFALSE 91801
// begin tag := GetTag ( i ) + 1 ;
91382: LD_ADDR_VAR 0 9
91386: PUSH
91387: LD_VAR 0 4
91391: PPUSH
91392: CALL_OW 110
91396: PUSH
91397: LD_INT 1
91399: PLUS
91400: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
91401: LD_ADDR_VAR 0 7
91405: PUSH
91406: LD_VAR 0 4
91410: PPUSH
91411: CALL_OW 250
91415: PPUSH
91416: LD_VAR 0 4
91420: PPUSH
91421: CALL_OW 251
91425: PPUSH
91426: LD_INT 6
91428: PPUSH
91429: CALL 91002 0 3
91433: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
91434: LD_VAR 0 4
91438: PPUSH
91439: CALL_OW 247
91443: PUSH
91444: LD_INT 2
91446: EQUAL
91447: PUSH
91448: LD_VAR 0 7
91452: AND
91453: PUSH
91454: LD_VAR 0 4
91458: PPUSH
91459: CALL_OW 264
91463: PUSH
91464: LD_VAR 0 10
91468: IN
91469: NOT
91470: AND
91471: IFFALSE 91510
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
91473: LD_VAR 0 4
91477: PPUSH
91478: LD_VAR 0 7
91482: PUSH
91483: LD_INT 1
91485: ARRAY
91486: PUSH
91487: LD_INT 1
91489: ARRAY
91490: PPUSH
91491: LD_VAR 0 7
91495: PUSH
91496: LD_INT 1
91498: ARRAY
91499: PUSH
91500: LD_INT 2
91502: ARRAY
91503: PPUSH
91504: CALL_OW 116
91508: GO 91799
// if path > tag then
91510: LD_VAR 0 2
91514: PUSH
91515: LD_VAR 0 9
91519: GREATER
91520: IFFALSE 91728
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
91522: LD_ADDR_VAR 0 6
91526: PUSH
91527: LD_VAR 0 5
91531: PPUSH
91532: LD_INT 91
91534: PUSH
91535: LD_VAR 0 4
91539: PUSH
91540: LD_INT 8
91542: PUSH
91543: EMPTY
91544: LIST
91545: LIST
91546: LIST
91547: PPUSH
91548: CALL_OW 72
91552: ST_TO_ADDR
// if nearEnemy then
91553: LD_VAR 0 6
91557: IFFALSE 91626
// begin if GetWeapon ( i ) = ru_time_lapser then
91559: LD_VAR 0 4
91563: PPUSH
91564: CALL_OW 264
91568: PUSH
91569: LD_INT 49
91571: EQUAL
91572: IFFALSE 91600
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
91574: LD_VAR 0 4
91578: PPUSH
91579: LD_VAR 0 6
91583: PPUSH
91584: LD_VAR 0 4
91588: PPUSH
91589: CALL_OW 74
91593: PPUSH
91594: CALL_OW 112
91598: GO 91624
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
91600: LD_VAR 0 4
91604: PPUSH
91605: LD_VAR 0 6
91609: PPUSH
91610: LD_VAR 0 4
91614: PPUSH
91615: CALL_OW 74
91619: PPUSH
91620: CALL 92728 0 2
// end else
91624: GO 91726
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
91626: LD_VAR 0 4
91630: PPUSH
91631: LD_VAR 0 2
91635: PUSH
91636: LD_VAR 0 9
91640: ARRAY
91641: PUSH
91642: LD_INT 1
91644: ARRAY
91645: PPUSH
91646: LD_VAR 0 2
91650: PUSH
91651: LD_VAR 0 9
91655: ARRAY
91656: PUSH
91657: LD_INT 2
91659: ARRAY
91660: PPUSH
91661: CALL_OW 297
91665: PUSH
91666: LD_INT 6
91668: GREATER
91669: IFFALSE 91712
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
91671: LD_VAR 0 4
91675: PPUSH
91676: LD_VAR 0 2
91680: PUSH
91681: LD_VAR 0 9
91685: ARRAY
91686: PUSH
91687: LD_INT 1
91689: ARRAY
91690: PPUSH
91691: LD_VAR 0 2
91695: PUSH
91696: LD_VAR 0 9
91700: ARRAY
91701: PUSH
91702: LD_INT 2
91704: ARRAY
91705: PPUSH
91706: CALL_OW 114
91710: GO 91726
// SetTag ( i , tag ) ;
91712: LD_VAR 0 4
91716: PPUSH
91717: LD_VAR 0 9
91721: PPUSH
91722: CALL_OW 109
// end else
91726: GO 91799
// if enemy then
91728: LD_VAR 0 5
91732: IFFALSE 91799
// begin if GetWeapon ( i ) = ru_time_lapser then
91734: LD_VAR 0 4
91738: PPUSH
91739: CALL_OW 264
91743: PUSH
91744: LD_INT 49
91746: EQUAL
91747: IFFALSE 91775
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
91749: LD_VAR 0 4
91753: PPUSH
91754: LD_VAR 0 5
91758: PPUSH
91759: LD_VAR 0 4
91763: PPUSH
91764: CALL_OW 74
91768: PPUSH
91769: CALL_OW 112
91773: GO 91799
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
91775: LD_VAR 0 4
91779: PPUSH
91780: LD_VAR 0 5
91784: PPUSH
91785: LD_VAR 0 4
91789: PPUSH
91790: CALL_OW 74
91794: PPUSH
91795: CALL 92728 0 2
// end ; end ;
91799: GO 91379
91801: POP
91802: POP
// end ;
91803: LD_VAR 0 3
91807: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
91808: LD_INT 0
91810: PPUSH
91811: PPUSH
91812: PPUSH
// if not unit or IsInUnit ( unit ) then
91813: LD_VAR 0 1
91817: NOT
91818: PUSH
91819: LD_VAR 0 1
91823: PPUSH
91824: CALL_OW 310
91828: OR
91829: IFFALSE 91833
// exit ;
91831: GO 91924
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
91833: LD_ADDR_VAR 0 4
91837: PUSH
91838: LD_VAR 0 1
91842: PPUSH
91843: CALL_OW 250
91847: PPUSH
91848: LD_VAR 0 2
91852: PPUSH
91853: LD_INT 1
91855: PPUSH
91856: CALL_OW 272
91860: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
91861: LD_ADDR_VAR 0 5
91865: PUSH
91866: LD_VAR 0 1
91870: PPUSH
91871: CALL_OW 251
91875: PPUSH
91876: LD_VAR 0 2
91880: PPUSH
91881: LD_INT 1
91883: PPUSH
91884: CALL_OW 273
91888: ST_TO_ADDR
// if ValidHex ( x , y ) then
91889: LD_VAR 0 4
91893: PPUSH
91894: LD_VAR 0 5
91898: PPUSH
91899: CALL_OW 488
91903: IFFALSE 91924
// ComTurnXY ( unit , x , y ) ;
91905: LD_VAR 0 1
91909: PPUSH
91910: LD_VAR 0 4
91914: PPUSH
91915: LD_VAR 0 5
91919: PPUSH
91920: CALL_OW 118
// end ;
91924: LD_VAR 0 3
91928: RET
// export function SeeUnits ( side , units ) ; var i ; begin
91929: LD_INT 0
91931: PPUSH
91932: PPUSH
// result := false ;
91933: LD_ADDR_VAR 0 3
91937: PUSH
91938: LD_INT 0
91940: ST_TO_ADDR
// if not units then
91941: LD_VAR 0 2
91945: NOT
91946: IFFALSE 91950
// exit ;
91948: GO 91995
// for i in units do
91950: LD_ADDR_VAR 0 4
91954: PUSH
91955: LD_VAR 0 2
91959: PUSH
91960: FOR_IN
91961: IFFALSE 91993
// if See ( side , i ) then
91963: LD_VAR 0 1
91967: PPUSH
91968: LD_VAR 0 4
91972: PPUSH
91973: CALL_OW 292
91977: IFFALSE 91991
// begin result := true ;
91979: LD_ADDR_VAR 0 3
91983: PUSH
91984: LD_INT 1
91986: ST_TO_ADDR
// exit ;
91987: POP
91988: POP
91989: GO 91995
// end ;
91991: GO 91960
91993: POP
91994: POP
// end ;
91995: LD_VAR 0 3
91999: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
92000: LD_INT 0
92002: PPUSH
92003: PPUSH
92004: PPUSH
92005: PPUSH
// if not unit or not points then
92006: LD_VAR 0 1
92010: NOT
92011: PUSH
92012: LD_VAR 0 2
92016: NOT
92017: OR
92018: IFFALSE 92022
// exit ;
92020: GO 92112
// dist := 99999 ;
92022: LD_ADDR_VAR 0 5
92026: PUSH
92027: LD_INT 99999
92029: ST_TO_ADDR
// for i in points do
92030: LD_ADDR_VAR 0 4
92034: PUSH
92035: LD_VAR 0 2
92039: PUSH
92040: FOR_IN
92041: IFFALSE 92110
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
92043: LD_ADDR_VAR 0 6
92047: PUSH
92048: LD_VAR 0 1
92052: PPUSH
92053: LD_VAR 0 4
92057: PUSH
92058: LD_INT 1
92060: ARRAY
92061: PPUSH
92062: LD_VAR 0 4
92066: PUSH
92067: LD_INT 2
92069: ARRAY
92070: PPUSH
92071: CALL_OW 297
92075: ST_TO_ADDR
// if tmpDist < dist then
92076: LD_VAR 0 6
92080: PUSH
92081: LD_VAR 0 5
92085: LESS
92086: IFFALSE 92108
// begin result := i ;
92088: LD_ADDR_VAR 0 3
92092: PUSH
92093: LD_VAR 0 4
92097: ST_TO_ADDR
// dist := tmpDist ;
92098: LD_ADDR_VAR 0 5
92102: PUSH
92103: LD_VAR 0 6
92107: ST_TO_ADDR
// end ; end ;
92108: GO 92040
92110: POP
92111: POP
// end ;
92112: LD_VAR 0 3
92116: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
92117: LD_INT 0
92119: PPUSH
// uc_side := side ;
92120: LD_ADDR_OWVAR 20
92124: PUSH
92125: LD_VAR 0 1
92129: ST_TO_ADDR
// uc_nation := 3 ;
92130: LD_ADDR_OWVAR 21
92134: PUSH
92135: LD_INT 3
92137: ST_TO_ADDR
// vc_chassis := 25 ;
92138: LD_ADDR_OWVAR 37
92142: PUSH
92143: LD_INT 25
92145: ST_TO_ADDR
// vc_engine := engine_siberite ;
92146: LD_ADDR_OWVAR 39
92150: PUSH
92151: LD_INT 3
92153: ST_TO_ADDR
// vc_control := control_computer ;
92154: LD_ADDR_OWVAR 38
92158: PUSH
92159: LD_INT 3
92161: ST_TO_ADDR
// vc_weapon := 59 ;
92162: LD_ADDR_OWVAR 40
92166: PUSH
92167: LD_INT 59
92169: ST_TO_ADDR
// result := CreateVehicle ;
92170: LD_ADDR_VAR 0 5
92174: PUSH
92175: CALL_OW 45
92179: ST_TO_ADDR
// SetDir ( result , d ) ;
92180: LD_VAR 0 5
92184: PPUSH
92185: LD_VAR 0 4
92189: PPUSH
92190: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
92194: LD_VAR 0 5
92198: PPUSH
92199: LD_VAR 0 2
92203: PPUSH
92204: LD_VAR 0 3
92208: PPUSH
92209: LD_INT 0
92211: PPUSH
92212: CALL_OW 48
// end ;
92216: LD_VAR 0 5
92220: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
92221: LD_INT 0
92223: PPUSH
92224: PPUSH
92225: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
92226: LD_ADDR_VAR 0 2
92230: PUSH
92231: LD_INT 0
92233: PUSH
92234: LD_INT 0
92236: PUSH
92237: LD_INT 0
92239: PUSH
92240: LD_INT 0
92242: PUSH
92243: EMPTY
92244: LIST
92245: LIST
92246: LIST
92247: LIST
92248: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
92249: LD_VAR 0 1
92253: NOT
92254: PUSH
92255: LD_VAR 0 1
92259: PPUSH
92260: CALL_OW 264
92264: PUSH
92265: LD_INT 12
92267: PUSH
92268: LD_INT 51
92270: PUSH
92271: LD_INT 32
92273: PUSH
92274: LD_INT 89
92276: PUSH
92277: EMPTY
92278: LIST
92279: LIST
92280: LIST
92281: LIST
92282: IN
92283: NOT
92284: OR
92285: IFFALSE 92289
// exit ;
92287: GO 92387
// for i := 1 to 3 do
92289: LD_ADDR_VAR 0 3
92293: PUSH
92294: DOUBLE
92295: LD_INT 1
92297: DEC
92298: ST_TO_ADDR
92299: LD_INT 3
92301: PUSH
92302: FOR_TO
92303: IFFALSE 92385
// begin tmp := GetCargo ( cargo , i ) ;
92305: LD_ADDR_VAR 0 4
92309: PUSH
92310: LD_VAR 0 1
92314: PPUSH
92315: LD_VAR 0 3
92319: PPUSH
92320: CALL_OW 289
92324: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
92325: LD_ADDR_VAR 0 2
92329: PUSH
92330: LD_VAR 0 2
92334: PPUSH
92335: LD_VAR 0 3
92339: PPUSH
92340: LD_VAR 0 4
92344: PPUSH
92345: CALL_OW 1
92349: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
92350: LD_ADDR_VAR 0 2
92354: PUSH
92355: LD_VAR 0 2
92359: PPUSH
92360: LD_INT 4
92362: PPUSH
92363: LD_VAR 0 2
92367: PUSH
92368: LD_INT 4
92370: ARRAY
92371: PUSH
92372: LD_VAR 0 4
92376: PLUS
92377: PPUSH
92378: CALL_OW 1
92382: ST_TO_ADDR
// end ;
92383: GO 92302
92385: POP
92386: POP
// end ;
92387: LD_VAR 0 2
92391: RET
// export function Length ( array ) ; begin
92392: LD_INT 0
92394: PPUSH
// result := array + 0 ;
92395: LD_ADDR_VAR 0 2
92399: PUSH
92400: LD_VAR 0 1
92404: PUSH
92405: LD_INT 0
92407: PLUS
92408: ST_TO_ADDR
// end ;
92409: LD_VAR 0 2
92413: RET
// export function PrepareArray ( array ) ; begin
92414: LD_INT 0
92416: PPUSH
// result := array diff 0 ;
92417: LD_ADDR_VAR 0 2
92421: PUSH
92422: LD_VAR 0 1
92426: PUSH
92427: LD_INT 0
92429: DIFF
92430: ST_TO_ADDR
// if not result [ 1 ] then
92431: LD_VAR 0 2
92435: PUSH
92436: LD_INT 1
92438: ARRAY
92439: NOT
92440: IFFALSE 92460
// result := Delete ( result , 1 ) ;
92442: LD_ADDR_VAR 0 2
92446: PUSH
92447: LD_VAR 0 2
92451: PPUSH
92452: LD_INT 1
92454: PPUSH
92455: CALL_OW 3
92459: ST_TO_ADDR
// end ;
92460: LD_VAR 0 2
92464: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
92465: LD_INT 0
92467: PPUSH
92468: PPUSH
92469: PPUSH
92470: PPUSH
// sibRocketRange := 25 ;
92471: LD_ADDR_VAR 0 6
92475: PUSH
92476: LD_INT 25
92478: ST_TO_ADDR
// result := false ;
92479: LD_ADDR_VAR 0 4
92483: PUSH
92484: LD_INT 0
92486: ST_TO_ADDR
// for i := 0 to 5 do
92487: LD_ADDR_VAR 0 5
92491: PUSH
92492: DOUBLE
92493: LD_INT 0
92495: DEC
92496: ST_TO_ADDR
92497: LD_INT 5
92499: PUSH
92500: FOR_TO
92501: IFFALSE 92568
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
92503: LD_VAR 0 1
92507: PPUSH
92508: LD_VAR 0 5
92512: PPUSH
92513: LD_VAR 0 6
92517: PPUSH
92518: CALL_OW 272
92522: PPUSH
92523: LD_VAR 0 2
92527: PPUSH
92528: LD_VAR 0 5
92532: PPUSH
92533: LD_VAR 0 6
92537: PPUSH
92538: CALL_OW 273
92542: PPUSH
92543: LD_VAR 0 3
92547: PPUSH
92548: CALL_OW 309
92552: IFFALSE 92566
// begin result := true ;
92554: LD_ADDR_VAR 0 4
92558: PUSH
92559: LD_INT 1
92561: ST_TO_ADDR
// exit ;
92562: POP
92563: POP
92564: GO 92570
// end ;
92566: GO 92500
92568: POP
92569: POP
// end ;
92570: LD_VAR 0 4
92574: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
92575: LD_INT 0
92577: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
92578: LD_VAR 0 1
92582: PPUSH
92583: LD_VAR 0 2
92587: PPUSH
92588: LD_INT 0
92590: PPUSH
92591: LD_INT 0
92593: PPUSH
92594: LD_INT 1
92596: PPUSH
92597: LD_INT 0
92599: PPUSH
92600: CALL_OW 587
// end ;
92604: LD_VAR 0 3
92608: RET
// export function CenterOnNow ( unit ) ; begin
92609: LD_INT 0
92611: PPUSH
// result := IsInUnit ( unit ) ;
92612: LD_ADDR_VAR 0 2
92616: PUSH
92617: LD_VAR 0 1
92621: PPUSH
92622: CALL_OW 310
92626: ST_TO_ADDR
// if not result then
92627: LD_VAR 0 2
92631: NOT
92632: IFFALSE 92644
// result := unit ;
92634: LD_ADDR_VAR 0 2
92638: PUSH
92639: LD_VAR 0 1
92643: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
92644: LD_VAR 0 1
92648: PPUSH
92649: CALL_OW 87
// end ;
92653: LD_VAR 0 2
92657: RET
// export function ComMoveHex ( unit , hex ) ; begin
92658: LD_INT 0
92660: PPUSH
// if not hex then
92661: LD_VAR 0 2
92665: NOT
92666: IFFALSE 92670
// exit ;
92668: GO 92723
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
92670: LD_VAR 0 2
92674: PUSH
92675: LD_INT 1
92677: ARRAY
92678: PPUSH
92679: LD_VAR 0 2
92683: PUSH
92684: LD_INT 2
92686: ARRAY
92687: PPUSH
92688: CALL_OW 428
92692: IFFALSE 92696
// exit ;
92694: GO 92723
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
92696: LD_VAR 0 1
92700: PPUSH
92701: LD_VAR 0 2
92705: PUSH
92706: LD_INT 1
92708: ARRAY
92709: PPUSH
92710: LD_VAR 0 2
92714: PUSH
92715: LD_INT 2
92717: ARRAY
92718: PPUSH
92719: CALL_OW 111
// end ;
92723: LD_VAR 0 3
92727: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
92728: LD_INT 0
92730: PPUSH
92731: PPUSH
92732: PPUSH
// if not unit or not enemy then
92733: LD_VAR 0 1
92737: NOT
92738: PUSH
92739: LD_VAR 0 2
92743: NOT
92744: OR
92745: IFFALSE 92749
// exit ;
92747: GO 92873
// x := GetX ( enemy ) ;
92749: LD_ADDR_VAR 0 4
92753: PUSH
92754: LD_VAR 0 2
92758: PPUSH
92759: CALL_OW 250
92763: ST_TO_ADDR
// y := GetY ( enemy ) ;
92764: LD_ADDR_VAR 0 5
92768: PUSH
92769: LD_VAR 0 2
92773: PPUSH
92774: CALL_OW 251
92778: ST_TO_ADDR
// if ValidHex ( x , y ) then
92779: LD_VAR 0 4
92783: PPUSH
92784: LD_VAR 0 5
92788: PPUSH
92789: CALL_OW 488
92793: IFFALSE 92873
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
92795: LD_VAR 0 2
92799: PPUSH
92800: CALL_OW 247
92804: PUSH
92805: LD_INT 3
92807: PUSH
92808: LD_INT 2
92810: PUSH
92811: EMPTY
92812: LIST
92813: LIST
92814: IN
92815: PUSH
92816: LD_VAR 0 1
92820: PPUSH
92821: CALL_OW 255
92825: PPUSH
92826: LD_VAR 0 2
92830: PPUSH
92831: CALL_OW 292
92835: AND
92836: IFFALSE 92854
// ComAttackUnit ( unit , enemy ) else
92838: LD_VAR 0 1
92842: PPUSH
92843: LD_VAR 0 2
92847: PPUSH
92848: CALL_OW 115
92852: GO 92873
// ComAgressiveMove ( unit , x , y ) ;
92854: LD_VAR 0 1
92858: PPUSH
92859: LD_VAR 0 4
92863: PPUSH
92864: LD_VAR 0 5
92868: PPUSH
92869: CALL_OW 114
// end ; end_of_file
92873: LD_VAR 0 3
92877: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
92878: LD_VAR 0 1
92882: PUSH
92883: LD_INT 200
92885: DOUBLE
92886: GREATEREQUAL
92887: IFFALSE 92895
92889: LD_INT 299
92891: DOUBLE
92892: LESSEQUAL
92893: IFTRUE 92897
92895: GO 92929
92897: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
92898: LD_VAR 0 1
92902: PPUSH
92903: LD_VAR 0 2
92907: PPUSH
92908: LD_VAR 0 3
92912: PPUSH
92913: LD_VAR 0 4
92917: PPUSH
92918: LD_VAR 0 5
92922: PPUSH
92923: CALL 47422 0 5
92927: GO 93006
92929: LD_INT 300
92931: DOUBLE
92932: GREATEREQUAL
92933: IFFALSE 92941
92935: LD_INT 399
92937: DOUBLE
92938: LESSEQUAL
92939: IFTRUE 92943
92941: GO 93005
92943: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
92944: LD_VAR 0 1
92948: PPUSH
92949: LD_VAR 0 2
92953: PPUSH
92954: LD_VAR 0 3
92958: PPUSH
92959: LD_VAR 0 4
92963: PPUSH
92964: LD_VAR 0 5
92968: PPUSH
92969: LD_VAR 0 6
92973: PPUSH
92974: LD_VAR 0 7
92978: PPUSH
92979: LD_VAR 0 8
92983: PPUSH
92984: LD_VAR 0 9
92988: PPUSH
92989: LD_VAR 0 10
92993: PPUSH
92994: LD_VAR 0 11
92998: PPUSH
92999: CALL 43747 0 11
93003: GO 93006
93005: POP
// end ;
93006: PPOPN 11
93008: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
93009: LD_VAR 0 1
93013: PPUSH
93014: LD_VAR 0 2
93018: PPUSH
93019: LD_VAR 0 3
93023: PPUSH
93024: LD_VAR 0 4
93028: PPUSH
93029: LD_VAR 0 5
93033: PPUSH
93034: CALL 47158 0 5
// end ; end_of_file
93038: PPOPN 5
93040: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
93041: LD_VAR 0 1
93045: PPUSH
93046: LD_VAR 0 2
93050: PPUSH
93051: LD_VAR 0 3
93055: PPUSH
93056: LD_VAR 0 4
93060: PPUSH
93061: LD_VAR 0 5
93065: PPUSH
93066: LD_VAR 0 6
93070: PPUSH
93071: CALL 31399 0 6
// end ;
93075: PPOPN 6
93077: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
93078: LD_INT 0
93080: PPUSH
// begin if not units then
93081: LD_VAR 0 1
93085: NOT
93086: IFFALSE 93090
// exit ;
93088: GO 93090
// end ;
93090: PPOPN 7
93092: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
93093: CALL 31303 0 0
// end ;
93097: PPOPN 1
93099: END
