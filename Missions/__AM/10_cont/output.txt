// export JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary ; export Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Mike ; export Cornell ; export Truman ; export JMMSquad ; export others10 , others09 , ape09 ; export Powell ; export Tsaritsyn ; export Dietrich ; export Ahmed ; export playerVehs ; export joinEpsilon ; export ruDepot , ruLab1 , ruLab2 , ruArm1 , ruArm2 , ruFab ; export ruSolMinLevel , ruSolMaxLevel ; export ruBaseReady , russianAI ; export activateRUAI ; export ruPossition ; export ruDestroyedBuildings ; export arDepot , arLab , arArm ; export arabianAttackersAI ; export arabianEscape ; export arabianDefeated ; export arabianTrait ; export arabianMines ; export ruMech ; export GensherStatus ; export KhatamStatus ; export mission_prefix , mission_prefix_prev ; export cratesSpawned , ruDepotConstructed , spawnRussians ; export ru_vehs_counter , ru_sold_counter ; export telep_ru_dialog , snipersTrained ; export fastEnd ; export attackAvalaible ; export eventVar1 , eventVar2 ; export debugMode ; starting begin Resetfog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// RandomizeAll ;
  11: CALL_OW 11
// playerVehs = [ ] ;
  15: LD_ADDR_EXP 30
  19: PUSH
  20: EMPTY
  21: ST_TO_ADDR
// JMMSquad = [ ] ;
  22: LD_ADDR_EXP 22
  26: PUSH
  27: EMPTY
  28: ST_TO_ADDR
// joinEpsilon = 0 ;
  29: LD_ADDR_EXP 31
  33: PUSH
  34: LD_INT 0
  36: ST_TO_ADDR
// ruBaseReady = 0 ;
  37: LD_ADDR_EXP 40
  41: PUSH
  42: LD_INT 0
  44: ST_TO_ADDR
// russianAI = 0 ;
  45: LD_ADDR_EXP 41
  49: PUSH
  50: LD_INT 0
  52: ST_TO_ADDR
// activateRUAI = 0 ;
  53: LD_ADDR_EXP 42
  57: PUSH
  58: LD_INT 0
  60: ST_TO_ADDR
// ruPossition = 0 ;
  61: LD_ADDR_EXP 43
  65: PUSH
  66: LD_INT 0
  68: ST_TO_ADDR
// ruDestroyedBuildings = [ ] ;
  69: LD_ADDR_EXP 44
  73: PUSH
  74: EMPTY
  75: ST_TO_ADDR
// arabianMines = [ ] ;
  76: LD_ADDR_EXP 52
  80: PUSH
  81: EMPTY
  82: ST_TO_ADDR
// arabianEscape = 0 ;
  83: LD_ADDR_EXP 49
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// arabianAttackersAI = 0 ;
  91: LD_ADDR_EXP 48
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// arabianDefeated = 0 ;
  99: LD_ADDR_EXP 50
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// arabianTrait = 0 ;
 107: LD_ADDR_EXP 51
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// telep_ru_dialog := false ;
 115: LD_ADDR_EXP 63
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// ruMech := [ 4 , 5 , 6 , 6 ] [ Difficulty ] ;
 123: LD_ADDR_EXP 53
 127: PUSH
 128: LD_INT 4
 130: PUSH
 131: LD_INT 5
 133: PUSH
 134: LD_INT 6
 136: PUSH
 137: LD_INT 6
 139: PUSH
 140: EMPTY
 141: LIST
 142: LIST
 143: LIST
 144: LIST
 145: PUSH
 146: LD_OWVAR 67
 150: ARRAY
 151: ST_TO_ADDR
// eventVar1 = 0 ;
 152: LD_ADDR_EXP 67
 156: PUSH
 157: LD_INT 0
 159: ST_TO_ADDR
// eventVar2 = 0 ;
 160: LD_ADDR_EXP 68
 164: PUSH
 165: LD_INT 0
 167: ST_TO_ADDR
// fastEnd = 0 ;
 168: LD_ADDR_EXP 65
 172: PUSH
 173: LD_INT 0
 175: ST_TO_ADDR
// KhatamStatus = 0 ;
 176: LD_ADDR_EXP 55
 180: PUSH
 181: LD_INT 0
 183: ST_TO_ADDR
// GensherStatus = 0 ;
 184: LD_ADDR_EXP 54
 188: PUSH
 189: LD_INT 0
 191: ST_TO_ADDR
// cratesSpawned = 0 ;
 192: LD_ADDR_EXP 58
 196: PUSH
 197: LD_INT 0
 199: ST_TO_ADDR
// ru_vehs_counter := [ 1 , 2 , 2 , 2 ] [ Difficulty ] ;
 200: LD_ADDR_EXP 61
 204: PUSH
 205: LD_INT 1
 207: PUSH
 208: LD_INT 2
 210: PUSH
 211: LD_INT 2
 213: PUSH
 214: LD_INT 2
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: PUSH
 223: LD_OWVAR 67
 227: ARRAY
 228: ST_TO_ADDR
// ru_sold_counter := [ 2 , 4 , 4 , 4 ] [ Difficulty ] ;
 229: LD_ADDR_EXP 62
 233: PUSH
 234: LD_INT 2
 236: PUSH
 237: LD_INT 4
 239: PUSH
 240: LD_INT 4
 242: PUSH
 243: LD_INT 4
 245: PUSH
 246: EMPTY
 247: LIST
 248: LIST
 249: LIST
 250: LIST
 251: PUSH
 252: LD_OWVAR 67
 256: ARRAY
 257: ST_TO_ADDR
// snipersTrained := false ;
 258: LD_ADDR_EXP 64
 262: PUSH
 263: LD_INT 0
 265: ST_TO_ADDR
// ruDepotConstructed := false ;
 266: LD_ADDR_EXP 59
 270: PUSH
 271: LD_INT 0
 273: ST_TO_ADDR
// spawnRussians := false ;
 274: LD_ADDR_EXP 60
 278: PUSH
 279: LD_INT 0
 281: ST_TO_ADDR
// attackAvalaible = 1 ;
 282: LD_ADDR_EXP 66
 286: PUSH
 287: LD_INT 1
 289: ST_TO_ADDR
// mission_prefix := 10c_ ;
 290: LD_ADDR_EXP 56
 294: PUSH
 295: LD_STRING 10c_
 297: ST_TO_ADDR
// mission_prefix_prev := 10_ ;
 298: LD_ADDR_EXP 57
 302: PUSH
 303: LD_STRING 10_
 305: ST_TO_ADDR
// debugMode = 0 ;
 306: LD_ADDR_EXP 69
 310: PUSH
 311: LD_INT 0
 313: ST_TO_ADDR
// Video ( true ) ;
 314: LD_INT 1
 316: PPUSH
 317: CALL 87738 0 1
// CreateNature ;
 321: CALL 27290 0 0
// PrepareDifficulty ;
 325: CALL 11808 0 0
// PrepareJMMTeam ;
 329: CALL 1363 0 0
// PrepareCathyTeam ;
 333: CALL 2599 0 0
// PlaceMines ( MineField1 , 1 + Difficulty ) ;
 337: LD_INT 24
 339: PPUSH
 340: LD_INT 1
 342: PUSH
 343: LD_OWVAR 67
 347: PLUS
 348: PPUSH
 349: CALL 21668 0 2
// if Difficulty > 1 then
 353: LD_OWVAR 67
 357: PUSH
 358: LD_INT 1
 360: GREATER
 361: IFFALSE 375
// PlaceMines ( MineField2 , Difficulty ) ;
 363: LD_INT 25
 365: PPUSH
 366: LD_OWVAR 67
 370: PPUSH
 371: CALL 21668 0 2
// if Difficulty > 2 then
 375: LD_OWVAR 67
 379: PUSH
 380: LD_INT 2
 382: GREATER
 383: IFFALSE 397
// PlaceMines ( MineField3 , Difficulty ) ;
 385: LD_INT 26
 387: PPUSH
 388: LD_OWVAR 67
 392: PPUSH
 393: CALL 21668 0 2
// PrepareArabianCommander ;
 397: CALL 4250 0 0
// PrepareArabian ;
 401: CALL 4302 0 0
// BuildArabianBase ;
 405: CALL 14623 0 0
// TameApemans ;
 409: CALL 20473 0 0
// end ;
 413: END
// every 0 0$1 trigger debugMode = 1 do var i ;
 414: LD_EXP 69
 418: PUSH
 419: LD_INT 1
 421: EQUAL
 422: IFFALSE 728
 424: GO 426
 426: DISABLE
 427: LD_INT 0
 429: PPUSH
// begin enable ;
 430: ENABLE
// fogoff ( true ) ;
 431: LD_INT 1
 433: PPUSH
 434: CALL_OW 344
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) do
 438: LD_ADDR_VAR 0 1
 442: PUSH
 443: LD_INT 22
 445: PUSH
 446: LD_INT 1
 448: PUSH
 449: EMPTY
 450: LIST
 451: LIST
 452: PUSH
 453: LD_INT 21
 455: PUSH
 456: LD_INT 1
 458: PUSH
 459: EMPTY
 460: LIST
 461: LIST
 462: PUSH
 463: EMPTY
 464: LIST
 465: LIST
 466: PPUSH
 467: CALL_OW 69
 471: PUSH
 472: FOR_IN
 473: IFFALSE 489
// SetLives ( i , 1000 ) ;
 475: LD_VAR 0 1
 479: PPUSH
 480: LD_INT 1000
 482: PPUSH
 483: CALL_OW 234
 487: GO 472
 489: POP
 490: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 491: LD_ADDR_VAR 0 1
 495: PUSH
 496: LD_INT 22
 498: PUSH
 499: LD_INT 1
 501: PUSH
 502: EMPTY
 503: LIST
 504: LIST
 505: PUSH
 506: LD_INT 2
 508: PUSH
 509: LD_INT 30
 511: PUSH
 512: LD_INT 0
 514: PUSH
 515: EMPTY
 516: LIST
 517: LIST
 518: PUSH
 519: LD_INT 30
 521: PUSH
 522: LD_INT 1
 524: PUSH
 525: EMPTY
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: LIST
 532: LIST
 533: PUSH
 534: EMPTY
 535: LIST
 536: LIST
 537: PPUSH
 538: CALL_OW 69
 542: PUSH
 543: FOR_IN
 544: IFFALSE 568
// SetResourceType ( GetBase ( i ) , 1 , 9999 ) ;
 546: LD_VAR 0 1
 550: PPUSH
 551: CALL_OW 274
 555: PPUSH
 556: LD_INT 1
 558: PPUSH
 559: LD_INT 9999
 561: PPUSH
 562: CALL_OW 277
 566: GO 543
 568: POP
 569: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 570: LD_ADDR_VAR 0 1
 574: PUSH
 575: LD_INT 22
 577: PUSH
 578: LD_INT 1
 580: PUSH
 581: EMPTY
 582: LIST
 583: LIST
 584: PUSH
 585: LD_INT 2
 587: PUSH
 588: LD_INT 30
 590: PUSH
 591: LD_INT 0
 593: PUSH
 594: EMPTY
 595: LIST
 596: LIST
 597: PUSH
 598: LD_INT 30
 600: PUSH
 601: LD_INT 1
 603: PUSH
 604: EMPTY
 605: LIST
 606: LIST
 607: PUSH
 608: EMPTY
 609: LIST
 610: LIST
 611: LIST
 612: PUSH
 613: EMPTY
 614: LIST
 615: LIST
 616: PPUSH
 617: CALL_OW 69
 621: PUSH
 622: FOR_IN
 623: IFFALSE 647
// SetResourceType ( GetBase ( i ) , 2 , 9999 ) ;
 625: LD_VAR 0 1
 629: PPUSH
 630: CALL_OW 274
 634: PPUSH
 635: LD_INT 2
 637: PPUSH
 638: LD_INT 9999
 640: PPUSH
 641: CALL_OW 277
 645: GO 622
 647: POP
 648: POP
// for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 0 ] , [ f_btype , 1 ] ] ] ) do
 649: LD_ADDR_VAR 0 1
 653: PUSH
 654: LD_INT 22
 656: PUSH
 657: LD_INT 1
 659: PUSH
 660: EMPTY
 661: LIST
 662: LIST
 663: PUSH
 664: LD_INT 2
 666: PUSH
 667: LD_INT 30
 669: PUSH
 670: LD_INT 0
 672: PUSH
 673: EMPTY
 674: LIST
 675: LIST
 676: PUSH
 677: LD_INT 30
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PUSH
 687: EMPTY
 688: LIST
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: PPUSH
 696: CALL_OW 69
 700: PUSH
 701: FOR_IN
 702: IFFALSE 726
// SetResourceType ( GetBase ( i ) , 3 , 9999 ) ;
 704: LD_VAR 0 1
 708: PPUSH
 709: CALL_OW 274
 713: PPUSH
 714: LD_INT 3
 716: PPUSH
 717: LD_INT 9999
 719: PPUSH
 720: CALL_OW 277
 724: GO 701
 726: POP
 727: POP
// end ;
 728: PPOPN 1
 730: END
// every 0 0$1 trigger FilterAllUnits ( [ f_class , class_sniper ] ) do
 731: LD_INT 25
 733: PUSH
 734: LD_INT 5
 736: PUSH
 737: EMPTY
 738: LIST
 739: LIST
 740: PPUSH
 741: CALL_OW 69
 745: IFFALSE 758
 747: GO 749
 749: DISABLE
// snipersTrained := true ;
 750: LD_ADDR_EXP 64
 754: PUSH
 755: LD_INT 1
 757: ST_TO_ADDR
 758: END
// every 0 0$3 trigger GetAttitude ( 1 , 2 ) = att_friend and spawnRussians and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
 759: LD_INT 1
 761: PPUSH
 762: LD_INT 2
 764: PPUSH
 765: CALL_OW 81
 769: PUSH
 770: LD_INT 1
 772: EQUAL
 773: PUSH
 774: LD_EXP 60
 778: AND
 779: PUSH
 780: LD_INT 22
 782: PUSH
 783: LD_INT 3
 785: PUSH
 786: EMPTY
 787: LIST
 788: LIST
 789: PPUSH
 790: CALL_OW 69
 794: PUSH
 795: LD_INT 0
 797: EQUAL
 798: AND
 799: IFFALSE 811
 801: GO 803
 803: DISABLE
// SetAchievement ( ACH_POWER ) ;
 804: LD_STRING ACH_POWER
 806: PPUSH
 807: CALL_OW 543
 811: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_bunker ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_turret ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_barracks ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_factory ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_control_tower ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_breastwork ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radio ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_radar ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_noncombat ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_track ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_gun ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_ext_siberium ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_mine ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_solar_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_oil_power ] ] ) and FilterAllUnits ( [ [ f_side , 1 ] , [ f_btype , b_siberite_power ] ] ) do
 812: LD_INT 22
 814: PUSH
 815: LD_INT 1
 817: PUSH
 818: EMPTY
 819: LIST
 820: LIST
 821: PUSH
 822: LD_INT 30
 824: PUSH
 825: LD_INT 1
 827: PUSH
 828: EMPTY
 829: LIST
 830: LIST
 831: PUSH
 832: EMPTY
 833: LIST
 834: LIST
 835: PPUSH
 836: CALL_OW 69
 840: PUSH
 841: LD_INT 22
 843: PUSH
 844: LD_INT 1
 846: PUSH
 847: EMPTY
 848: LIST
 849: LIST
 850: PUSH
 851: LD_INT 30
 853: PUSH
 854: LD_INT 32
 856: PUSH
 857: EMPTY
 858: LIST
 859: LIST
 860: PUSH
 861: EMPTY
 862: LIST
 863: LIST
 864: PPUSH
 865: CALL_OW 69
 869: AND
 870: PUSH
 871: LD_INT 22
 873: PUSH
 874: LD_INT 1
 876: PUSH
 877: EMPTY
 878: LIST
 879: LIST
 880: PUSH
 881: LD_INT 30
 883: PUSH
 884: LD_INT 33
 886: PUSH
 887: EMPTY
 888: LIST
 889: LIST
 890: PUSH
 891: EMPTY
 892: LIST
 893: LIST
 894: PPUSH
 895: CALL_OW 69
 899: AND
 900: PUSH
 901: LD_INT 22
 903: PUSH
 904: LD_INT 1
 906: PUSH
 907: EMPTY
 908: LIST
 909: LIST
 910: PUSH
 911: LD_INT 30
 913: PUSH
 914: LD_INT 5
 916: PUSH
 917: EMPTY
 918: LIST
 919: LIST
 920: PUSH
 921: EMPTY
 922: LIST
 923: LIST
 924: PPUSH
 925: CALL_OW 69
 929: AND
 930: PUSH
 931: LD_INT 22
 933: PUSH
 934: LD_INT 1
 936: PUSH
 937: EMPTY
 938: LIST
 939: LIST
 940: PUSH
 941: LD_INT 30
 943: PUSH
 944: LD_INT 3
 946: PUSH
 947: EMPTY
 948: LIST
 949: LIST
 950: PUSH
 951: EMPTY
 952: LIST
 953: LIST
 954: PPUSH
 955: CALL_OW 69
 959: AND
 960: PUSH
 961: LD_INT 22
 963: PUSH
 964: LD_INT 1
 966: PUSH
 967: EMPTY
 968: LIST
 969: LIST
 970: PUSH
 971: LD_INT 30
 973: PUSH
 974: LD_INT 36
 976: PUSH
 977: EMPTY
 978: LIST
 979: LIST
 980: PUSH
 981: EMPTY
 982: LIST
 983: LIST
 984: PPUSH
 985: CALL_OW 69
 989: AND
 990: PUSH
 991: LD_INT 22
 993: PUSH
 994: LD_INT 1
 996: PUSH
 997: EMPTY
 998: LIST
 999: LIST
1000: PUSH
1001: LD_INT 30
1003: PUSH
1004: LD_INT 31
1006: PUSH
1007: EMPTY
1008: LIST
1009: LIST
1010: PUSH
1011: EMPTY
1012: LIST
1013: LIST
1014: PPUSH
1015: CALL_OW 69
1019: AND
1020: PUSH
1021: LD_INT 22
1023: PUSH
1024: LD_INT 1
1026: PUSH
1027: EMPTY
1028: LIST
1029: LIST
1030: PUSH
1031: LD_INT 30
1033: PUSH
1034: LD_INT 22
1036: PUSH
1037: EMPTY
1038: LIST
1039: LIST
1040: PUSH
1041: EMPTY
1042: LIST
1043: LIST
1044: PPUSH
1045: CALL_OW 69
1049: AND
1050: PUSH
1051: LD_INT 22
1053: PUSH
1054: LD_INT 1
1056: PUSH
1057: EMPTY
1058: LIST
1059: LIST
1060: PUSH
1061: LD_INT 30
1063: PUSH
1064: LD_INT 20
1066: PUSH
1067: EMPTY
1068: LIST
1069: LIST
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: PPUSH
1075: CALL_OW 69
1079: AND
1080: PUSH
1081: LD_INT 22
1083: PUSH
1084: LD_INT 1
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 30
1093: PUSH
1094: LD_INT 19
1096: PUSH
1097: EMPTY
1098: LIST
1099: LIST
1100: PUSH
1101: EMPTY
1102: LIST
1103: LIST
1104: PPUSH
1105: CALL_OW 69
1109: AND
1110: PUSH
1111: LD_INT 22
1113: PUSH
1114: LD_INT 1
1116: PUSH
1117: EMPTY
1118: LIST
1119: LIST
1120: PUSH
1121: LD_INT 30
1123: PUSH
1124: LD_INT 16
1126: PUSH
1127: EMPTY
1128: LIST
1129: LIST
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: PPUSH
1135: CALL_OW 69
1139: AND
1140: PUSH
1141: LD_INT 22
1143: PUSH
1144: LD_INT 1
1146: PUSH
1147: EMPTY
1148: LIST
1149: LIST
1150: PUSH
1151: LD_INT 30
1153: PUSH
1154: LD_INT 17
1156: PUSH
1157: EMPTY
1158: LIST
1159: LIST
1160: PUSH
1161: EMPTY
1162: LIST
1163: LIST
1164: PPUSH
1165: CALL_OW 69
1169: AND
1170: PUSH
1171: LD_INT 22
1173: PUSH
1174: LD_INT 1
1176: PUSH
1177: EMPTY
1178: LIST
1179: LIST
1180: PUSH
1181: LD_INT 30
1183: PUSH
1184: LD_INT 21
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: PUSH
1191: EMPTY
1192: LIST
1193: LIST
1194: PPUSH
1195: CALL_OW 69
1199: AND
1200: PUSH
1201: LD_INT 22
1203: PUSH
1204: LD_INT 1
1206: PUSH
1207: EMPTY
1208: LIST
1209: LIST
1210: PUSH
1211: LD_INT 30
1213: PUSH
1214: LD_INT 29
1216: PUSH
1217: EMPTY
1218: LIST
1219: LIST
1220: PUSH
1221: EMPTY
1222: LIST
1223: LIST
1224: PPUSH
1225: CALL_OW 69
1229: AND
1230: PUSH
1231: LD_INT 22
1233: PUSH
1234: LD_INT 1
1236: PUSH
1237: EMPTY
1238: LIST
1239: LIST
1240: PUSH
1241: LD_INT 30
1243: PUSH
1244: LD_INT 30
1246: PUSH
1247: EMPTY
1248: LIST
1249: LIST
1250: PUSH
1251: EMPTY
1252: LIST
1253: LIST
1254: PPUSH
1255: CALL_OW 69
1259: AND
1260: PUSH
1261: LD_INT 22
1263: PUSH
1264: LD_INT 1
1266: PUSH
1267: EMPTY
1268: LIST
1269: LIST
1270: PUSH
1271: LD_INT 30
1273: PUSH
1274: LD_INT 27
1276: PUSH
1277: EMPTY
1278: LIST
1279: LIST
1280: PUSH
1281: EMPTY
1282: LIST
1283: LIST
1284: PPUSH
1285: CALL_OW 69
1289: AND
1290: PUSH
1291: LD_INT 22
1293: PUSH
1294: LD_INT 1
1296: PUSH
1297: EMPTY
1298: LIST
1299: LIST
1300: PUSH
1301: LD_INT 30
1303: PUSH
1304: LD_INT 26
1306: PUSH
1307: EMPTY
1308: LIST
1309: LIST
1310: PUSH
1311: EMPTY
1312: LIST
1313: LIST
1314: PPUSH
1315: CALL_OW 69
1319: AND
1320: PUSH
1321: LD_INT 22
1323: PUSH
1324: LD_INT 1
1326: PUSH
1327: EMPTY
1328: LIST
1329: LIST
1330: PUSH
1331: LD_INT 30
1333: PUSH
1334: LD_INT 28
1336: PUSH
1337: EMPTY
1338: LIST
1339: LIST
1340: PUSH
1341: EMPTY
1342: LIST
1343: LIST
1344: PPUSH
1345: CALL_OW 69
1349: AND
1350: IFFALSE 1362
1352: GO 1354
1354: DISABLE
// SetAchievement ( ACH_ARCH ) ; end_of_file
1355: LD_STRING ACH_ARCH
1357: PPUSH
1358: CALL_OW 543
1362: END
// export function PrepareJMMTeam ; var i , j , veh , rnd , count ; begin
1363: LD_INT 0
1365: PPUSH
1366: PPUSH
1367: PPUSH
1368: PPUSH
1369: PPUSH
1370: PPUSH
// uc_side = 1 ;
1371: LD_ADDR_OWVAR 20
1375: PUSH
1376: LD_INT 1
1378: ST_TO_ADDR
// uc_nation = 1 ;
1379: LD_ADDR_OWVAR 21
1383: PUSH
1384: LD_INT 1
1386: ST_TO_ADDR
// count = 0 ;
1387: LD_ADDR_VAR 0 6
1391: PUSH
1392: LD_INT 0
1394: ST_TO_ADDR
// JMM = PrepareUnit ( JMM , true , 10_ ) ;
1395: LD_ADDR_EXP 1
1399: PUSH
1400: LD_STRING JMM
1402: PPUSH
1403: LD_INT 1
1405: PPUSH
1406: LD_STRING 10_
1408: PPUSH
1409: CALL 50298 0 3
1413: ST_TO_ADDR
// JMMSquad = JMMSquad ^ JMM ;
1414: LD_ADDR_EXP 22
1418: PUSH
1419: LD_EXP 22
1423: PUSH
1424: LD_EXP 1
1428: ADD
1429: ST_TO_ADDR
// Gary = PrepareUnit ( Gary , true , 10_ ) ;
1430: LD_ADDR_EXP 10
1434: PUSH
1435: LD_STRING Gary
1437: PPUSH
1438: LD_INT 1
1440: PPUSH
1441: LD_STRING 10_
1443: PPUSH
1444: CALL 50298 0 3
1448: ST_TO_ADDR
// if Gary then
1449: LD_EXP 10
1453: IFFALSE 1471
// JMMSquad = JMMSquad ^ Gary ;
1455: LD_ADDR_EXP 22
1459: PUSH
1460: LD_EXP 22
1464: PUSH
1465: LD_EXP 10
1469: ADD
1470: ST_TO_ADDR
// Cyrus = PrepareUnit ( Cyrus , true , 10_ ) ;
1471: LD_ADDR_EXP 5
1475: PUSH
1476: LD_STRING Cyrus
1478: PPUSH
1479: LD_INT 1
1481: PPUSH
1482: LD_STRING 10_
1484: PPUSH
1485: CALL 50298 0 3
1489: ST_TO_ADDR
// if Cyrus then
1490: LD_EXP 5
1494: IFFALSE 1512
// JMMSquad = JMMSquad ^ Cyrus ;
1496: LD_ADDR_EXP 22
1500: PUSH
1501: LD_EXP 22
1505: PUSH
1506: LD_EXP 5
1510: ADD
1511: ST_TO_ADDR
// Bobby = PrepareUnit ( Bobby , true , 10_ ) ;
1512: LD_ADDR_EXP 4
1516: PUSH
1517: LD_STRING Bobby
1519: PPUSH
1520: LD_INT 1
1522: PPUSH
1523: LD_STRING 10_
1525: PPUSH
1526: CALL 50298 0 3
1530: ST_TO_ADDR
// if Bobby then
1531: LD_EXP 4
1535: IFFALSE 1553
// JMMSquad = JMMSquad ^ Bobby ;
1537: LD_ADDR_EXP 22
1541: PUSH
1542: LD_EXP 22
1546: PUSH
1547: LD_EXP 4
1551: ADD
1552: ST_TO_ADDR
// Lisa = PrepareUnit ( Lisa , true , 10_ ) ;
1553: LD_ADDR_EXP 6
1557: PUSH
1558: LD_STRING Lisa
1560: PPUSH
1561: LD_INT 1
1563: PPUSH
1564: LD_STRING 10_
1566: PPUSH
1567: CALL 50298 0 3
1571: ST_TO_ADDR
// if Lisa then
1572: LD_EXP 6
1576: IFFALSE 1594
// JMMSquad = JMMSquad ^ Lisa ;
1578: LD_ADDR_EXP 22
1582: PUSH
1583: LD_EXP 22
1587: PUSH
1588: LD_EXP 6
1592: ADD
1593: ST_TO_ADDR
// Brown = PrepareUnit ( Brown , true , 10_ ) ;
1594: LD_ADDR_EXP 2
1598: PUSH
1599: LD_STRING Brown
1601: PPUSH
1602: LD_INT 1
1604: PPUSH
1605: LD_STRING 10_
1607: PPUSH
1608: CALL 50298 0 3
1612: ST_TO_ADDR
// if Brown then
1613: LD_EXP 2
1617: IFFALSE 1635
// JMMSquad = JMMSquad ^ Brown ;
1619: LD_ADDR_EXP 22
1623: PUSH
1624: LD_EXP 22
1628: PUSH
1629: LD_EXP 2
1633: ADD
1634: ST_TO_ADDR
// Donaldson = PrepareUnit ( Donaldson , true , 10_ ) ;
1635: LD_ADDR_EXP 3
1639: PUSH
1640: LD_STRING Donaldson
1642: PPUSH
1643: LD_INT 1
1645: PPUSH
1646: LD_STRING 10_
1648: PPUSH
1649: CALL 50298 0 3
1653: ST_TO_ADDR
// if Donaldson then
1654: LD_EXP 3
1658: IFFALSE 1676
// JMMSquad = JMMSquad ^ Donaldson ;
1660: LD_ADDR_EXP 22
1664: PUSH
1665: LD_EXP 22
1669: PUSH
1670: LD_EXP 3
1674: ADD
1675: ST_TO_ADDR
// Frank = PrepareUnit ( Frank , true , 10_ ) ;
1676: LD_ADDR_EXP 7
1680: PUSH
1681: LD_STRING Frank
1683: PPUSH
1684: LD_INT 1
1686: PPUSH
1687: LD_STRING 10_
1689: PPUSH
1690: CALL 50298 0 3
1694: ST_TO_ADDR
// if Frank then
1695: LD_EXP 7
1699: IFFALSE 1717
// JMMSquad = JMMSquad ^ Frank ;
1701: LD_ADDR_EXP 22
1705: PUSH
1706: LD_EXP 22
1710: PUSH
1711: LD_EXP 7
1715: ADD
1716: ST_TO_ADDR
// Houten = PrepareUnit ( Houten , true , 10_ ) ;
1717: LD_ADDR_EXP 9
1721: PUSH
1722: LD_STRING Houten
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: LD_STRING 10_
1730: PPUSH
1731: CALL 50298 0 3
1735: ST_TO_ADDR
// if Houten then
1736: LD_EXP 9
1740: IFFALSE 1758
// JMMSquad = JMMSquad ^ Houten ;
1742: LD_ADDR_EXP 22
1746: PUSH
1747: LD_EXP 22
1751: PUSH
1752: LD_EXP 9
1756: ADD
1757: ST_TO_ADDR
// others10 = CreateCharacterSet ( OthersIn10 ) ;
1758: LD_ADDR_EXP 23
1762: PUSH
1763: LD_STRING OthersIn10
1765: PPUSH
1766: CALL_OW 31
1770: ST_TO_ADDR
// Powell = PrepareUnit ( Powell , false ,  ) ;
1771: LD_ADDR_EXP 26
1775: PUSH
1776: LD_STRING Powell
1778: PPUSH
1779: LD_INT 0
1781: PPUSH
1782: LD_STRING 
1784: PPUSH
1785: CALL 50298 0 3
1789: ST_TO_ADDR
// for i in JMMSquad do
1790: LD_ADDR_VAR 0 2
1794: PUSH
1795: LD_EXP 22
1799: PUSH
1800: FOR_IN
1801: IFFALSE 2081
// begin if count < 3 then
1803: LD_VAR 0 6
1807: PUSH
1808: LD_INT 3
1810: LESS
1811: IFFALSE 1928
// begin vc_engine = 1 ;
1813: LD_ADDR_OWVAR 39
1817: PUSH
1818: LD_INT 1
1820: ST_TO_ADDR
// vc_control = 1 ;
1821: LD_ADDR_OWVAR 38
1825: PUSH
1826: LD_INT 1
1828: ST_TO_ADDR
// vc_weapon = 12 ;
1829: LD_ADDR_OWVAR 40
1833: PUSH
1834: LD_INT 12
1836: ST_TO_ADDR
// vc_chassis = 3 ;
1837: LD_ADDR_OWVAR 37
1841: PUSH
1842: LD_INT 3
1844: ST_TO_ADDR
// veh = CreateVehicle ;
1845: LD_ADDR_VAR 0 4
1849: PUSH
1850: CALL_OW 45
1854: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
1855: LD_VAR 0 4
1859: PPUSH
1860: LD_INT 1
1862: PPUSH
1863: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
1867: LD_VAR 0 4
1871: PPUSH
1872: LD_INT 2
1874: PPUSH
1875: LD_INT 0
1877: PPUSH
1878: CALL_OW 49
// if count mod 2 = 0 then
1882: LD_VAR 0 6
1886: PUSH
1887: LD_INT 2
1889: MOD
1890: PUSH
1891: LD_INT 0
1893: EQUAL
1894: IFFALSE 1913
// AddCargo ( veh , 1 , 100 ) else
1896: LD_VAR 0 4
1900: PPUSH
1901: LD_INT 1
1903: PPUSH
1904: LD_INT 100
1906: PPUSH
1907: CALL_OW 291
1911: GO 1928
// AddCargo ( veh , 3 , 100 ) end ;
1913: LD_VAR 0 4
1917: PPUSH
1918: LD_INT 3
1920: PPUSH
1921: LD_INT 100
1923: PPUSH
1924: CALL_OW 291
// if count >= 3 then
1928: LD_VAR 0 6
1932: PUSH
1933: LD_INT 3
1935: GREATEREQUAL
1936: IFFALSE 2051
// begin vc_engine = 1 ;
1938: LD_ADDR_OWVAR 39
1942: PUSH
1943: LD_INT 1
1945: ST_TO_ADDR
// vc_control = 1 ;
1946: LD_ADDR_OWVAR 38
1950: PUSH
1951: LD_INT 1
1953: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
1954: LD_ADDR_OWVAR 40
1958: PUSH
1959: LD_INT 3
1961: PUSH
1962: LD_INT 4
1964: PUSH
1965: LD_INT 5
1967: PUSH
1968: EMPTY
1969: LIST
1970: LIST
1971: LIST
1972: PUSH
1973: LD_INT 1
1975: PPUSH
1976: LD_INT 3
1978: PPUSH
1979: CALL_OW 12
1983: ARRAY
1984: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
1985: LD_ADDR_OWVAR 37
1989: PUSH
1990: LD_INT 2
1992: PUSH
1993: LD_INT 3
1995: PUSH
1996: EMPTY
1997: LIST
1998: LIST
1999: PUSH
2000: LD_VAR 0 2
2004: PUSH
2005: LD_INT 2
2007: MOD
2008: PUSH
2009: LD_INT 1
2011: PLUS
2012: ARRAY
2013: ST_TO_ADDR
// veh = CreateVehicle ;
2014: LD_ADDR_VAR 0 4
2018: PUSH
2019: CALL_OW 45
2023: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2024: LD_VAR 0 4
2028: PPUSH
2029: LD_INT 1
2031: PPUSH
2032: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2036: LD_VAR 0 4
2040: PPUSH
2041: LD_INT 2
2043: PPUSH
2044: LD_INT 0
2046: PPUSH
2047: CALL_OW 49
// end ; count = count + 1 ;
2051: LD_ADDR_VAR 0 6
2055: PUSH
2056: LD_VAR 0 6
2060: PUSH
2061: LD_INT 1
2063: PLUS
2064: ST_TO_ADDR
// PlaceHumanInUnit ( i , veh ) ;
2065: LD_VAR 0 2
2069: PPUSH
2070: LD_VAR 0 4
2074: PPUSH
2075: CALL_OW 52
// end ;
2079: GO 1800
2081: POP
2082: POP
// for i := 1 to others10 do
2083: LD_ADDR_VAR 0 2
2087: PUSH
2088: DOUBLE
2089: LD_INT 1
2091: DEC
2092: ST_TO_ADDR
2093: LD_EXP 23
2097: PUSH
2098: FOR_TO
2099: IFFALSE 2330
// begin if i < [ 5 , 4 , 3 , 3 ] [ Difficulty ] then
2101: LD_VAR 0 2
2105: PUSH
2106: LD_INT 5
2108: PUSH
2109: LD_INT 4
2111: PUSH
2112: LD_INT 3
2114: PUSH
2115: LD_INT 3
2117: PUSH
2118: EMPTY
2119: LIST
2120: LIST
2121: LIST
2122: LIST
2123: PUSH
2124: LD_OWVAR 67
2128: ARRAY
2129: LESS
2130: IFFALSE 2283
// begin vc_engine = 1 ;
2132: LD_ADDR_OWVAR 39
2136: PUSH
2137: LD_INT 1
2139: ST_TO_ADDR
// vc_control = 1 ;
2140: LD_ADDR_OWVAR 38
2144: PUSH
2145: LD_INT 1
2147: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 ] [ Rand ( 1 , 3 ) ] ;
2148: LD_ADDR_OWVAR 40
2152: PUSH
2153: LD_INT 3
2155: PUSH
2156: LD_INT 4
2158: PUSH
2159: LD_INT 5
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: LD_INT 1
2169: PPUSH
2170: LD_INT 3
2172: PPUSH
2173: CALL_OW 12
2177: ARRAY
2178: ST_TO_ADDR
// vc_chassis = [ us_medium_wheeled , us_medium_tracked ] [ i mod 2 + 1 ] ;
2179: LD_ADDR_OWVAR 37
2183: PUSH
2184: LD_INT 2
2186: PUSH
2187: LD_INT 3
2189: PUSH
2190: EMPTY
2191: LIST
2192: LIST
2193: PUSH
2194: LD_VAR 0 2
2198: PUSH
2199: LD_INT 2
2201: MOD
2202: PUSH
2203: LD_INT 1
2205: PLUS
2206: ARRAY
2207: ST_TO_ADDR
// veh = CreateVehicle ;
2208: LD_ADDR_VAR 0 4
2212: PUSH
2213: CALL_OW 45
2217: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2218: LD_VAR 0 4
2222: PPUSH
2223: LD_INT 1
2225: PPUSH
2226: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2230: LD_VAR 0 4
2234: PPUSH
2235: LD_INT 2
2237: PPUSH
2238: LD_INT 0
2240: PPUSH
2241: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2245: LD_ADDR_EXP 30
2249: PUSH
2250: LD_EXP 30
2254: PUSH
2255: LD_VAR 0 4
2259: ADD
2260: ST_TO_ADDR
// PlaceHumanInUnit ( others10 [ i ] , veh ) ;
2261: LD_EXP 23
2265: PUSH
2266: LD_VAR 0 2
2270: ARRAY
2271: PPUSH
2272: LD_VAR 0 4
2276: PPUSH
2277: CALL_OW 52
// end else
2281: GO 2328
// begin PlaceUnitXYR ( others10 [ i ] , 106 , 33 , 6 , false ) ;
2283: LD_EXP 23
2287: PUSH
2288: LD_VAR 0 2
2292: ARRAY
2293: PPUSH
2294: LD_INT 106
2296: PPUSH
2297: LD_INT 33
2299: PPUSH
2300: LD_INT 6
2302: PPUSH
2303: LD_INT 0
2305: PPUSH
2306: CALL_OW 50
// SetSide ( others10 [ i ] , 4 ) ;
2310: LD_EXP 23
2314: PUSH
2315: LD_VAR 0 2
2319: ARRAY
2320: PPUSH
2321: LD_INT 4
2323: PPUSH
2324: CALL_OW 235
// end ; end ;
2328: GO 2098
2330: POP
2331: POP
// SetClass ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) , 1 ) ;
2332: LD_INT 22
2334: PUSH
2335: LD_INT 1
2337: PUSH
2338: EMPTY
2339: LIST
2340: LIST
2341: PUSH
2342: LD_INT 21
2344: PUSH
2345: LD_INT 1
2347: PUSH
2348: EMPTY
2349: LIST
2350: LIST
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PPUSH
2356: CALL_OW 69
2360: PPUSH
2361: LD_INT 1
2363: PPUSH
2364: CALL_OW 336
// end ;
2368: LD_VAR 0 1
2372: RET
// export function PrepareVehicles ; var i , veh , rnd , cargoAmmount ; begin
2373: LD_INT 0
2375: PPUSH
2376: PPUSH
2377: PPUSH
2378: PPUSH
2379: PPUSH
// uc_side = 1 ;
2380: LD_ADDR_OWVAR 20
2384: PUSH
2385: LD_INT 1
2387: ST_TO_ADDR
// uc_nation = 1 ;
2388: LD_ADDR_OWVAR 21
2392: PUSH
2393: LD_INT 1
2395: ST_TO_ADDR
// for i := 1 to 10 do
2396: LD_ADDR_VAR 0 2
2400: PUSH
2401: DOUBLE
2402: LD_INT 1
2404: DEC
2405: ST_TO_ADDR
2406: LD_INT 10
2408: PUSH
2409: FOR_TO
2410: IFFALSE 2592
// begin vc_engine = 1 ;
2412: LD_ADDR_OWVAR 39
2416: PUSH
2417: LD_INT 1
2419: ST_TO_ADDR
// vc_control = 1 ;
2420: LD_ADDR_OWVAR 38
2424: PUSH
2425: LD_INT 1
2427: ST_TO_ADDR
// vc_weapon = [ 3 , 4 , 5 , 12 ] [ Rand ( 1 , 4 ) ] ;
2428: LD_ADDR_OWVAR 40
2432: PUSH
2433: LD_INT 3
2435: PUSH
2436: LD_INT 4
2438: PUSH
2439: LD_INT 5
2441: PUSH
2442: LD_INT 12
2444: PUSH
2445: EMPTY
2446: LIST
2447: LIST
2448: LIST
2449: LIST
2450: PUSH
2451: LD_INT 1
2453: PPUSH
2454: LD_INT 4
2456: PPUSH
2457: CALL_OW 12
2461: ARRAY
2462: ST_TO_ADDR
// vc_chassis = 3 ;
2463: LD_ADDR_OWVAR 37
2467: PUSH
2468: LD_INT 3
2470: ST_TO_ADDR
// veh = CreateVehicle ;
2471: LD_ADDR_VAR 0 3
2475: PUSH
2476: CALL_OW 45
2480: ST_TO_ADDR
// SetDir ( veh , 1 ) ;
2481: LD_VAR 0 3
2485: PPUSH
2486: LD_INT 1
2488: PPUSH
2489: CALL_OW 233
// PlaceUnitArea ( veh , PlayerSpawn , false ) ;
2493: LD_VAR 0 3
2497: PPUSH
2498: LD_INT 2
2500: PPUSH
2501: LD_INT 0
2503: PPUSH
2504: CALL_OW 49
// playerVehs = playerVehs ^ veh ;
2508: LD_ADDR_EXP 30
2512: PUSH
2513: LD_EXP 30
2517: PUSH
2518: LD_VAR 0 3
2522: ADD
2523: ST_TO_ADDR
// if vc_weapon = 12 then
2524: LD_OWVAR 40
2528: PUSH
2529: LD_INT 12
2531: EQUAL
2532: IFFALSE 2590
// begin rnd = Rand ( 5 , 10 ) * 10 ;
2534: LD_ADDR_VAR 0 4
2538: PUSH
2539: LD_INT 5
2541: PPUSH
2542: LD_INT 10
2544: PPUSH
2545: CALL_OW 12
2549: PUSH
2550: LD_INT 10
2552: MUL
2553: ST_TO_ADDR
// AddCargo ( veh , [ 1 , 3 ] [ Rand ( 1 , 2 ) ] , rnd ) ;
2554: LD_VAR 0 3
2558: PPUSH
2559: LD_INT 1
2561: PUSH
2562: LD_INT 3
2564: PUSH
2565: EMPTY
2566: LIST
2567: LIST
2568: PUSH
2569: LD_INT 1
2571: PPUSH
2572: LD_INT 2
2574: PPUSH
2575: CALL_OW 12
2579: ARRAY
2580: PPUSH
2581: LD_VAR 0 4
2585: PPUSH
2586: CALL_OW 291
// end ; end ;
2590: GO 2409
2592: POP
2593: POP
// end ;
2594: LD_VAR 0 1
2598: RET
// export function PrepareCathyTeam ; var i , tmp ; begin
2599: LD_INT 0
2601: PPUSH
2602: PPUSH
2603: PPUSH
// uc_side = 4 ;
2604: LD_ADDR_OWVAR 20
2608: PUSH
2609: LD_INT 4
2611: ST_TO_ADDR
// uc_nation = 1 ;
2612: LD_ADDR_OWVAR 21
2616: PUSH
2617: LD_INT 1
2619: ST_TO_ADDR
// if LoadVariable ( 08_SikorskiStatus , false ) then
2620: LD_STRING 08_SikorskiStatus
2622: PPUSH
2623: LD_INT 0
2625: PPUSH
2626: CALL_OW 30
2630: IFFALSE 2651
// Truman := PrepareUnit ( Truman , false ,  ) ;
2632: LD_ADDR_EXP 21
2636: PUSH
2637: LD_STRING Truman
2639: PPUSH
2640: LD_INT 0
2642: PPUSH
2643: LD_STRING 
2645: PPUSH
2646: CALL 50298 0 3
2650: ST_TO_ADDR
// Simms = PrepareUnit ( Simms , false ,  ) ;
2651: LD_ADDR_EXP 11
2655: PUSH
2656: LD_STRING Simms
2658: PPUSH
2659: LD_INT 0
2661: PPUSH
2662: LD_STRING 
2664: PPUSH
2665: CALL 50298 0 3
2669: ST_TO_ADDR
// Denis = PrepareUnit ( Denis , true , 08_ ) ;
2670: LD_ADDR_EXP 12
2674: PUSH
2675: LD_STRING Denis
2677: PPUSH
2678: LD_INT 1
2680: PPUSH
2681: LD_STRING 08_
2683: PPUSH
2684: CALL 50298 0 3
2688: ST_TO_ADDR
// Joan = PrepareUnit ( Joan , true , 08_ ) ;
2689: LD_ADDR_EXP 13
2693: PUSH
2694: LD_STRING Joan
2696: PPUSH
2697: LD_INT 1
2699: PPUSH
2700: LD_STRING 08_
2702: PPUSH
2703: CALL 50298 0 3
2707: ST_TO_ADDR
// Mike := PrepareUnit ( Mike , true , 08_ ) ;
2708: LD_ADDR_EXP 19
2712: PUSH
2713: LD_STRING Mike
2715: PPUSH
2716: LD_INT 1
2718: PPUSH
2719: LD_STRING 08_
2721: PPUSH
2722: CALL 50298 0 3
2726: ST_TO_ADDR
// if TestCharacters ( 08_Khatam ) then
2727: LD_STRING 08_Khatam
2729: PPUSH
2730: CALL_OW 28
2734: IFFALSE 2757
// Khatam = PrepareUnit ( Khatam , true , 08_ ) else
2736: LD_ADDR_EXP 14
2740: PUSH
2741: LD_STRING Khatam
2743: PPUSH
2744: LD_INT 1
2746: PPUSH
2747: LD_STRING 08_
2749: PPUSH
2750: CALL 50298 0 3
2754: ST_TO_ADDR
2755: GO 2785
// if TestCharacters ( 03_Khatam ) then
2757: LD_STRING 03_Khatam
2759: PPUSH
2760: CALL_OW 28
2764: IFFALSE 2785
// Khatam = PrepareUnit ( Khatam , true , 03_ ) ;
2766: LD_ADDR_EXP 14
2770: PUSH
2771: LD_STRING Khatam
2773: PPUSH
2774: LD_INT 1
2776: PPUSH
2777: LD_STRING 03_
2779: PPUSH
2780: CALL 50298 0 3
2784: ST_TO_ADDR
// Gladstone = PrepareUnit ( Gladstone , true , 08_ ) ;
2785: LD_ADDR_EXP 15
2789: PUSH
2790: LD_STRING Gladstone
2792: PPUSH
2793: LD_INT 1
2795: PPUSH
2796: LD_STRING 08_
2798: PPUSH
2799: CALL 50298 0 3
2803: ST_TO_ADDR
// DeltaDoctor = PrepareUnit ( DeltaDoctor , true ,  ) ;
2804: LD_ADDR_EXP 17
2808: PUSH
2809: LD_STRING DeltaDoctor
2811: PPUSH
2812: LD_INT 1
2814: PPUSH
2815: LD_STRING 
2817: PPUSH
2818: CALL 50298 0 3
2822: ST_TO_ADDR
// Frank := PrepareUnit ( Frank , true , 08_ ) ;
2823: LD_ADDR_EXP 7
2827: PUSH
2828: LD_STRING Frank
2830: PPUSH
2831: LD_INT 1
2833: PPUSH
2834: LD_STRING 08_
2836: PPUSH
2837: CALL 50298 0 3
2841: ST_TO_ADDR
// if Frank then
2842: LD_EXP 7
2846: IFFALSE 2869
// Kikuchi = PrepareUnit ( Yamoko , false ,  ) else
2848: LD_ADDR_EXP 8
2852: PUSH
2853: LD_STRING Yamoko
2855: PPUSH
2856: LD_INT 0
2858: PPUSH
2859: LD_STRING 
2861: PPUSH
2862: CALL 50298 0 3
2866: ST_TO_ADDR
2867: GO 2888
// Kikuchi = PrepareUnit ( Kikuchi , true , 08_ ) ;
2869: LD_ADDR_EXP 8
2873: PUSH
2874: LD_STRING Kikuchi
2876: PPUSH
2877: LD_INT 1
2879: PPUSH
2880: LD_STRING 08_
2882: PPUSH
2883: CALL 50298 0 3
2887: ST_TO_ADDR
// others09 = CreateCharacterSet ( 09_others ) ;
2888: LD_ADDR_EXP 24
2892: PUSH
2893: LD_STRING 09_others
2895: PPUSH
2896: CALL_OW 31
2900: ST_TO_ADDR
// ape09 = CreateCharacterSet ( 09_apes ) ;
2901: LD_ADDR_EXP 25
2905: PUSH
2906: LD_STRING 09_apes
2908: PPUSH
2909: CALL_OW 31
2913: ST_TO_ADDR
// if Truman then
2914: LD_EXP 21
2918: IFFALSE 2935
// PlaceUnitArea ( Truman , CathyTeamSpawn , false ) ;
2920: LD_EXP 21
2924: PPUSH
2925: LD_INT 1
2927: PPUSH
2928: LD_INT 0
2930: PPUSH
2931: CALL_OW 49
// PlaceUnitArea ( Mike , CathyTeamSpawn , false ) ;
2935: LD_EXP 19
2939: PPUSH
2940: LD_INT 1
2942: PPUSH
2943: LD_INT 0
2945: PPUSH
2946: CALL_OW 49
// PlaceUnitArea ( Simms , CathyTeamSpawn , false ) ;
2950: LD_EXP 11
2954: PPUSH
2955: LD_INT 1
2957: PPUSH
2958: LD_INT 0
2960: PPUSH
2961: CALL_OW 49
// PlaceUnitArea ( Denis , CathyTeamSpawn , false ) ;
2965: LD_EXP 12
2969: PPUSH
2970: LD_INT 1
2972: PPUSH
2973: LD_INT 0
2975: PPUSH
2976: CALL_OW 49
// PlaceUnitArea ( Joan , CathyTeamSpawn , false ) ;
2980: LD_EXP 13
2984: PPUSH
2985: LD_INT 1
2987: PPUSH
2988: LD_INT 0
2990: PPUSH
2991: CALL_OW 49
// PlaceUnitArea ( Khatam , CathyTeamSpawn , false ) ;
2995: LD_EXP 14
2999: PPUSH
3000: LD_INT 1
3002: PPUSH
3003: LD_INT 0
3005: PPUSH
3006: CALL_OW 49
// PlaceUnitArea ( Gladstone , CathyTeamSpawn , false ) ;
3010: LD_EXP 15
3014: PPUSH
3015: LD_INT 1
3017: PPUSH
3018: LD_INT 0
3020: PPUSH
3021: CALL_OW 49
// PlaceUnitArea ( DeltaDoctor , CathyTeamSpawn , false ) ;
3025: LD_EXP 17
3029: PPUSH
3030: LD_INT 1
3032: PPUSH
3033: LD_INT 0
3035: PPUSH
3036: CALL_OW 49
// if Kikuchi then
3040: LD_EXP 8
3044: IFFALSE 3061
// PlaceUnitArea ( Kikuchi , CathyTeamSpawn , false ) ;
3046: LD_EXP 8
3050: PPUSH
3051: LD_INT 1
3053: PPUSH
3054: LD_INT 0
3056: PPUSH
3057: CALL_OW 49
// SetClass ( [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] , 4 ) ;
3061: LD_EXP 11
3065: PUSH
3066: LD_EXP 14
3070: PUSH
3071: LD_EXP 12
3075: PUSH
3076: LD_EXP 15
3080: PUSH
3081: LD_EXP 17
3085: PUSH
3086: LD_EXP 13
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: PPUSH
3099: LD_INT 4
3101: PPUSH
3102: CALL_OW 336
// if others09 > 2 then
3106: LD_EXP 24
3110: PUSH
3111: LD_INT 2
3113: GREATER
3114: IFFALSE 3195
// begin for i := 1 to 3 do
3116: LD_ADDR_VAR 0 2
3120: PUSH
3121: DOUBLE
3122: LD_INT 1
3124: DEC
3125: ST_TO_ADDR
3126: LD_INT 3
3128: PUSH
3129: FOR_TO
3130: IFFALSE 3191
// begin PlaceUnitArea ( others09 [ i ] , CathyTeamSpawn , false ) ;
3132: LD_EXP 24
3136: PUSH
3137: LD_VAR 0 2
3141: ARRAY
3142: PPUSH
3143: LD_INT 1
3145: PPUSH
3146: LD_INT 0
3148: PPUSH
3149: CALL_OW 49
// others09 = Delete ( others09 , 1 ) ;
3153: LD_ADDR_EXP 24
3157: PUSH
3158: LD_EXP 24
3162: PPUSH
3163: LD_INT 1
3165: PPUSH
3166: CALL_OW 3
3170: ST_TO_ADDR
// SetClass ( others09 [ i ] , 2 ) ;
3171: LD_EXP 24
3175: PUSH
3176: LD_VAR 0 2
3180: ARRAY
3181: PPUSH
3182: LD_INT 2
3184: PPUSH
3185: CALL_OW 336
// end ;
3189: GO 3129
3191: POP
3192: POP
// end else
3193: GO 3255
// begin for i in others09 do
3195: LD_ADDR_VAR 0 2
3199: PUSH
3200: LD_EXP 24
3204: PUSH
3205: FOR_IN
3206: IFFALSE 3253
// begin PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3208: LD_VAR 0 2
3212: PPUSH
3213: LD_INT 1
3215: PPUSH
3216: LD_INT 0
3218: PPUSH
3219: CALL_OW 49
// others09 = others09 diff i ;
3223: LD_ADDR_EXP 24
3227: PUSH
3228: LD_EXP 24
3232: PUSH
3233: LD_VAR 0 2
3237: DIFF
3238: ST_TO_ADDR
// SetClass ( i , 2 ) ;
3239: LD_VAR 0 2
3243: PPUSH
3244: LD_INT 2
3246: PPUSH
3247: CALL_OW 336
// end ;
3251: GO 3205
3253: POP
3254: POP
// end ; if FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) = 0 then
3255: LD_INT 22
3257: PUSH
3258: LD_INT 4
3260: PUSH
3261: EMPTY
3262: LIST
3263: LIST
3264: PUSH
3265: LD_INT 25
3267: PUSH
3268: LD_INT 2
3270: PUSH
3271: EMPTY
3272: LIST
3273: LIST
3274: PUSH
3275: EMPTY
3276: LIST
3277: LIST
3278: PPUSH
3279: CALL_OW 69
3283: PUSH
3284: LD_INT 0
3286: EQUAL
3287: IFFALSE 3419
// begin tmp = FilterAllUnits ( [ [ f_side , 4 ] , [ f_class , 2 ] ] ) diff [ Simms , Khatam , Denis , Gladstone , DeltaDoctor , Joan ] ;
3289: LD_ADDR_VAR 0 3
3293: PUSH
3294: LD_INT 22
3296: PUSH
3297: LD_INT 4
3299: PUSH
3300: EMPTY
3301: LIST
3302: LIST
3303: PUSH
3304: LD_INT 25
3306: PUSH
3307: LD_INT 2
3309: PUSH
3310: EMPTY
3311: LIST
3312: LIST
3313: PUSH
3314: EMPTY
3315: LIST
3316: LIST
3317: PPUSH
3318: CALL_OW 69
3322: PUSH
3323: LD_EXP 11
3327: PUSH
3328: LD_EXP 14
3332: PUSH
3333: LD_EXP 12
3337: PUSH
3338: LD_EXP 15
3342: PUSH
3343: LD_EXP 17
3347: PUSH
3348: LD_EXP 13
3352: PUSH
3353: EMPTY
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: DIFF
3361: ST_TO_ADDR
// if not tmp then
3362: LD_VAR 0 3
3366: NOT
3367: IFFALSE 3403
// begin if Denis then
3369: LD_EXP 12
3373: IFFALSE 3389
// SetClass ( Denis , 2 ) else
3375: LD_EXP 12
3379: PPUSH
3380: LD_INT 2
3382: PPUSH
3383: CALL_OW 336
3387: GO 3401
// SetClass ( DeltaDoctor , 2 ) ;
3389: LD_EXP 17
3393: PPUSH
3394: LD_INT 2
3396: PPUSH
3397: CALL_OW 336
// end else
3401: GO 3419
// begin SetClass ( tmp [ 1 ] , 2 ) ;
3403: LD_VAR 0 3
3407: PUSH
3408: LD_INT 1
3410: ARRAY
3411: PPUSH
3412: LD_INT 2
3414: PPUSH
3415: CALL_OW 336
// end ; end ; for i in ape09 do
3419: LD_ADDR_VAR 0 2
3423: PUSH
3424: LD_EXP 25
3428: PUSH
3429: FOR_IN
3430: IFFALSE 3449
// PlaceUnitArea ( i , CathyTeamSpawn , false ) ;
3432: LD_VAR 0 2
3436: PPUSH
3437: LD_INT 1
3439: PPUSH
3440: LD_INT 0
3442: PPUSH
3443: CALL_OW 49
3447: GO 3429
3449: POP
3450: POP
// uc_side = 4 ;
3451: LD_ADDR_OWVAR 20
3455: PUSH
3456: LD_INT 4
3458: ST_TO_ADDR
// hc_class := 1 ;
3459: LD_ADDR_OWVAR 28
3463: PUSH
3464: LD_INT 1
3466: ST_TO_ADDR
// hc_sex := sex_female ;
3467: LD_ADDR_OWVAR 27
3471: PUSH
3472: LD_INT 2
3474: ST_TO_ADDR
// hc_gallery :=  ;
3475: LD_ADDR_OWVAR 33
3479: PUSH
3480: LD_STRING 
3482: ST_TO_ADDR
// hc_name :=  ;
3483: LD_ADDR_OWVAR 26
3487: PUSH
3488: LD_STRING 
3490: ST_TO_ADDR
// hc_skills := [ 1 , 7 , 1 , 0 ] ;
3491: LD_ADDR_OWVAR 31
3495: PUSH
3496: LD_INT 1
3498: PUSH
3499: LD_INT 7
3501: PUSH
3502: LD_INT 1
3504: PUSH
3505: LD_INT 0
3507: PUSH
3508: EMPTY
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: ST_TO_ADDR
// AmScout = CreateHuman ;
3514: LD_ADDR_EXP 18
3518: PUSH
3519: CALL_OW 44
3523: ST_TO_ADDR
// end ;
3524: LD_VAR 0 1
3528: RET
// export function PrepareCornell ; begin
3529: LD_INT 0
3531: PPUSH
// ChangeSideFog ( 4 , 4 ) ;
3532: LD_INT 4
3534: PPUSH
3535: LD_INT 4
3537: PPUSH
3538: CALL_OW 343
// uc_side = 4 ;
3542: LD_ADDR_OWVAR 20
3546: PUSH
3547: LD_INT 4
3549: ST_TO_ADDR
// uc_nation = 1 ;
3550: LD_ADDR_OWVAR 21
3554: PUSH
3555: LD_INT 1
3557: ST_TO_ADDR
// Cornell = PrepareUnit ( Cornel , true , 03_ ) ;
3558: LD_ADDR_EXP 20
3562: PUSH
3563: LD_STRING Cornel
3565: PPUSH
3566: LD_INT 1
3568: PPUSH
3569: LD_STRING 03_
3571: PPUSH
3572: CALL 50298 0 3
3576: ST_TO_ADDR
// if not Cornell then
3577: LD_EXP 20
3581: NOT
3582: IFFALSE 3586
// exit ;
3584: GO 3694
// PlaceUnitArea ( Cornell , CornellSpawn , false ) ;
3586: LD_EXP 20
3590: PPUSH
3591: LD_INT 8
3593: PPUSH
3594: LD_INT 0
3596: PPUSH
3597: CALL_OW 49
// SetLives ( Cornell , 350 ) ;
3601: LD_EXP 20
3605: PPUSH
3606: LD_INT 350
3608: PPUSH
3609: CALL_OW 234
// if IsInUnit ( JMM ) then
3613: LD_EXP 1
3617: PPUSH
3618: CALL_OW 310
3622: IFFALSE 3665
// ComMoveXY ( Cornell , GetX ( IsInUnit ( JMM ) ) , GetY ( IsInUnit ( JMM ) ) ) else
3624: LD_EXP 20
3628: PPUSH
3629: LD_EXP 1
3633: PPUSH
3634: CALL_OW 310
3638: PPUSH
3639: CALL_OW 250
3643: PPUSH
3644: LD_EXP 1
3648: PPUSH
3649: CALL_OW 310
3653: PPUSH
3654: CALL_OW 251
3658: PPUSH
3659: CALL_OW 111
3663: GO 3694
// ComMoveXY ( Cornell , GetX ( JMM ) , GetY ( JMM ) ) ;
3665: LD_EXP 20
3669: PPUSH
3670: LD_EXP 1
3674: PPUSH
3675: CALL_OW 250
3679: PPUSH
3680: LD_EXP 1
3684: PPUSH
3685: CALL_OW 251
3689: PPUSH
3690: CALL_OW 111
// end ;
3694: LD_VAR 0 1
3698: RET
// every 0 0$1 trigger IsAt ( Truman , 17 , 31 ) do
3699: LD_EXP 21
3703: PPUSH
3704: LD_INT 17
3706: PPUSH
3707: LD_INT 31
3709: PPUSH
3710: CALL_OW 307
3714: IFFALSE 3728
3716: GO 3718
3718: DISABLE
// RemoveUnit ( Truman ) ;
3719: LD_EXP 21
3723: PPUSH
3724: CALL_OW 64
3728: END
// every 0 0$2 trigger joinEpsilon = 1 and IsOk ( Truman ) and not HasTask ( Truman ) do
3729: LD_EXP 31
3733: PUSH
3734: LD_INT 1
3736: EQUAL
3737: PUSH
3738: LD_EXP 21
3742: PPUSH
3743: CALL_OW 302
3747: AND
3748: PUSH
3749: LD_EXP 21
3753: PPUSH
3754: CALL_OW 314
3758: NOT
3759: AND
3760: IFFALSE 3781
3762: GO 3764
3764: DISABLE
// begin enable ;
3765: ENABLE
// ComMoveXY ( Truman , 17 , 31 ) ;
3766: LD_EXP 21
3770: PPUSH
3771: LD_INT 17
3773: PPUSH
3774: LD_INT 31
3776: PPUSH
3777: CALL_OW 111
// end ; end_of_file
3781: END
// export function PrepareRussians ; var i , un ; begin
3782: LD_INT 0
3784: PPUSH
3785: PPUSH
3786: PPUSH
// uc_side = 3 ;
3787: LD_ADDR_OWVAR 20
3791: PUSH
3792: LD_INT 3
3794: ST_TO_ADDR
// uc_nation = 3 ;
3795: LD_ADDR_OWVAR 21
3799: PUSH
3800: LD_INT 3
3802: ST_TO_ADDR
// Tsaritsyn = PrepareUnit ( Tsaritsyn , false ,  ) ;
3803: LD_ADDR_EXP 27
3807: PUSH
3808: LD_STRING Tsaritsyn
3810: PPUSH
3811: LD_INT 0
3813: PPUSH
3814: LD_STRING 
3816: PPUSH
3817: CALL 50298 0 3
3821: ST_TO_ADDR
// PlaceUnitArea ( Tsaritsyn , RussianSpawn , false ) ;
3822: LD_EXP 27
3826: PPUSH
3827: LD_INT 3
3829: PPUSH
3830: LD_INT 0
3832: PPUSH
3833: CALL_OW 49
// for i = 1 to 14 do
3837: LD_ADDR_VAR 0 2
3841: PUSH
3842: DOUBLE
3843: LD_INT 1
3845: DEC
3846: ST_TO_ADDR
3847: LD_INT 14
3849: PUSH
3850: FOR_TO
3851: IFFALSE 3937
// begin uc_side = 3 ;
3853: LD_ADDR_OWVAR 20
3857: PUSH
3858: LD_INT 3
3860: ST_TO_ADDR
// uc_nation = 3 ;
3861: LD_ADDR_OWVAR 21
3865: PUSH
3866: LD_INT 3
3868: ST_TO_ADDR
// hc_gallery =  ;
3869: LD_ADDR_OWVAR 33
3873: PUSH
3874: LD_STRING 
3876: ST_TO_ADDR
// hc_name =  ;
3877: LD_ADDR_OWVAR 26
3881: PUSH
3882: LD_STRING 
3884: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3885: LD_INT 0
3887: PPUSH
3888: LD_INT 1
3890: PPUSH
3891: LD_EXP 38
3895: PPUSH
3896: LD_EXP 39
3900: PPUSH
3901: CALL_OW 12
3905: PPUSH
3906: CALL_OW 380
// un = CreateHuman ;
3910: LD_ADDR_VAR 0 3
3914: PUSH
3915: CALL_OW 44
3919: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
3920: LD_VAR 0 3
3924: PPUSH
3925: LD_INT 3
3927: PPUSH
3928: LD_INT 0
3930: PPUSH
3931: CALL_OW 49
// end ;
3935: GO 3850
3937: POP
3938: POP
// for i = 1 to 6 do
3939: LD_ADDR_VAR 0 2
3943: PUSH
3944: DOUBLE
3945: LD_INT 1
3947: DEC
3948: ST_TO_ADDR
3949: LD_INT 6
3951: PUSH
3952: FOR_TO
3953: IFFALSE 4039
// begin uc_side = 3 ;
3955: LD_ADDR_OWVAR 20
3959: PUSH
3960: LD_INT 3
3962: ST_TO_ADDR
// uc_nation = 3 ;
3963: LD_ADDR_OWVAR 21
3967: PUSH
3968: LD_INT 3
3970: ST_TO_ADDR
// hc_gallery =  ;
3971: LD_ADDR_OWVAR 33
3975: PUSH
3976: LD_STRING 
3978: ST_TO_ADDR
// hc_name =  ;
3979: LD_ADDR_OWVAR 26
3983: PUSH
3984: LD_STRING 
3986: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
3987: LD_INT 0
3989: PPUSH
3990: LD_INT 2
3992: PPUSH
3993: LD_EXP 38
3997: PPUSH
3998: LD_EXP 39
4002: PPUSH
4003: CALL_OW 12
4007: PPUSH
4008: CALL_OW 380
// un = CreateHuman ;
4012: LD_ADDR_VAR 0 3
4016: PUSH
4017: CALL_OW 44
4021: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4022: LD_VAR 0 3
4026: PPUSH
4027: LD_INT 3
4029: PPUSH
4030: LD_INT 0
4032: PPUSH
4033: CALL_OW 49
// end ;
4037: GO 3952
4039: POP
4040: POP
// for i = 1 to 6 do
4041: LD_ADDR_VAR 0 2
4045: PUSH
4046: DOUBLE
4047: LD_INT 1
4049: DEC
4050: ST_TO_ADDR
4051: LD_INT 6
4053: PUSH
4054: FOR_TO
4055: IFFALSE 4141
// begin uc_side = 3 ;
4057: LD_ADDR_OWVAR 20
4061: PUSH
4062: LD_INT 3
4064: ST_TO_ADDR
// uc_nation = 3 ;
4065: LD_ADDR_OWVAR 21
4069: PUSH
4070: LD_INT 3
4072: ST_TO_ADDR
// hc_gallery =  ;
4073: LD_ADDR_OWVAR 33
4077: PUSH
4078: LD_STRING 
4080: ST_TO_ADDR
// hc_name =  ;
4081: LD_ADDR_OWVAR 26
4085: PUSH
4086: LD_STRING 
4088: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4089: LD_INT 0
4091: PPUSH
4092: LD_INT 3
4094: PPUSH
4095: LD_EXP 38
4099: PPUSH
4100: LD_EXP 39
4104: PPUSH
4105: CALL_OW 12
4109: PPUSH
4110: CALL_OW 380
// un = CreateHuman ;
4114: LD_ADDR_VAR 0 3
4118: PUSH
4119: CALL_OW 44
4123: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4124: LD_VAR 0 3
4128: PPUSH
4129: LD_INT 3
4131: PPUSH
4132: LD_INT 0
4134: PPUSH
4135: CALL_OW 49
// end ;
4139: GO 4054
4141: POP
4142: POP
// for i = 1 to 4 do
4143: LD_ADDR_VAR 0 2
4147: PUSH
4148: DOUBLE
4149: LD_INT 1
4151: DEC
4152: ST_TO_ADDR
4153: LD_INT 4
4155: PUSH
4156: FOR_TO
4157: IFFALSE 4243
// begin uc_side = 3 ;
4159: LD_ADDR_OWVAR 20
4163: PUSH
4164: LD_INT 3
4166: ST_TO_ADDR
// uc_nation = 3 ;
4167: LD_ADDR_OWVAR 21
4171: PUSH
4172: LD_INT 3
4174: ST_TO_ADDR
// hc_gallery =  ;
4175: LD_ADDR_OWVAR 33
4179: PUSH
4180: LD_STRING 
4182: ST_TO_ADDR
// hc_name =  ;
4183: LD_ADDR_OWVAR 26
4187: PUSH
4188: LD_STRING 
4190: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4191: LD_INT 0
4193: PPUSH
4194: LD_INT 4
4196: PPUSH
4197: LD_EXP 38
4201: PPUSH
4202: LD_EXP 39
4206: PPUSH
4207: CALL_OW 12
4211: PPUSH
4212: CALL_OW 380
// un = CreateHuman ;
4216: LD_ADDR_VAR 0 3
4220: PUSH
4221: CALL_OW 44
4225: ST_TO_ADDR
// PlaceUnitArea ( un , RussianSpawn , false ) ;
4226: LD_VAR 0 3
4230: PPUSH
4231: LD_INT 3
4233: PPUSH
4234: LD_INT 0
4236: PPUSH
4237: CALL_OW 49
// end ;
4241: GO 4156
4243: POP
4244: POP
// end ; end_of_file
4245: LD_VAR 0 1
4249: RET
// export function PrepareArabianCommander ; begin
4250: LD_INT 0
4252: PPUSH
// uc_side = 2 ;
4253: LD_ADDR_OWVAR 20
4257: PUSH
4258: LD_INT 2
4260: ST_TO_ADDR
// uc_nation = 2 ;
4261: LD_ADDR_OWVAR 21
4265: PUSH
4266: LD_INT 2
4268: ST_TO_ADDR
// Dietrich = NewCharacter ( Dietrich ) ;
4269: LD_ADDR_EXP 28
4273: PUSH
4274: LD_STRING Dietrich
4276: PPUSH
4277: CALL_OW 25
4281: ST_TO_ADDR
// PlaceUnitArea ( Dietrich , ArabianSpawn , false ) ;
4282: LD_EXP 28
4286: PPUSH
4287: LD_INT 4
4289: PPUSH
4290: LD_INT 0
4292: PPUSH
4293: CALL_OW 49
// end ;
4297: LD_VAR 0 1
4301: RET
// export function PrepareArabian ; var i , un , veh ; begin
4302: LD_INT 0
4304: PPUSH
4305: PPUSH
4306: PPUSH
4307: PPUSH
// uc_side := 2 ;
4308: LD_ADDR_OWVAR 20
4312: PUSH
4313: LD_INT 2
4315: ST_TO_ADDR
// uc_nation := 2 ;
4316: LD_ADDR_OWVAR 21
4320: PUSH
4321: LD_INT 2
4323: ST_TO_ADDR
// if not Ahmed then
4324: LD_EXP 29
4328: NOT
4329: IFFALSE 4397
// begin InitHc ;
4331: CALL_OW 19
// PrepareHuman ( sex_male , 1 , rand ( RuSolMinLevel , RuSolMaxLevel + 1 ) ) ;
4335: LD_INT 1
4337: PPUSH
4338: LD_INT 1
4340: PPUSH
4341: LD_EXP 38
4345: PPUSH
4346: LD_EXP 39
4350: PUSH
4351: LD_INT 1
4353: PLUS
4354: PPUSH
4355: CALL_OW 12
4359: PPUSH
4360: CALL_OW 380
// hc_name := Ahmed Abbasid ;
4364: LD_ADDR_OWVAR 26
4368: PUSH
4369: LD_STRING Ahmed Abbasid
4371: ST_TO_ADDR
// Ahmed := CreateHuman ;
4372: LD_ADDR_EXP 29
4376: PUSH
4377: CALL_OW 44
4381: ST_TO_ADDR
// PlaceUnitArea ( Ahmed , ArabianSpawn , false ) ;
4382: LD_EXP 29
4386: PPUSH
4387: LD_INT 4
4389: PPUSH
4390: LD_INT 0
4392: PPUSH
4393: CALL_OW 49
// end ; for i = 1 to 4 do
4397: LD_ADDR_VAR 0 2
4401: PUSH
4402: DOUBLE
4403: LD_INT 1
4405: DEC
4406: ST_TO_ADDR
4407: LD_INT 4
4409: PUSH
4410: FOR_TO
4411: IFFALSE 4497
// begin uc_side = 2 ;
4413: LD_ADDR_OWVAR 20
4417: PUSH
4418: LD_INT 2
4420: ST_TO_ADDR
// uc_nation = 2 ;
4421: LD_ADDR_OWVAR 21
4425: PUSH
4426: LD_INT 2
4428: ST_TO_ADDR
// hc_gallery =  ;
4429: LD_ADDR_OWVAR 33
4433: PUSH
4434: LD_STRING 
4436: ST_TO_ADDR
// hc_name =  ;
4437: LD_ADDR_OWVAR 26
4441: PUSH
4442: LD_STRING 
4444: ST_TO_ADDR
// PrepareHuman ( false , 2 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4445: LD_INT 0
4447: PPUSH
4448: LD_INT 2
4450: PPUSH
4451: LD_EXP 38
4455: PPUSH
4456: LD_EXP 39
4460: PPUSH
4461: CALL_OW 12
4465: PPUSH
4466: CALL_OW 380
// un = CreateHuman ;
4470: LD_ADDR_VAR 0 3
4474: PUSH
4475: CALL_OW 44
4479: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4480: LD_VAR 0 3
4484: PPUSH
4485: LD_INT 4
4487: PPUSH
4488: LD_INT 0
4490: PPUSH
4491: CALL_OW 49
// end ;
4495: GO 4410
4497: POP
4498: POP
// for i = 1 to 5 do
4499: LD_ADDR_VAR 0 2
4503: PUSH
4504: DOUBLE
4505: LD_INT 1
4507: DEC
4508: ST_TO_ADDR
4509: LD_INT 5
4511: PUSH
4512: FOR_TO
4513: IFFALSE 4599
// begin uc_side = 2 ;
4515: LD_ADDR_OWVAR 20
4519: PUSH
4520: LD_INT 2
4522: ST_TO_ADDR
// uc_nation = 2 ;
4523: LD_ADDR_OWVAR 21
4527: PUSH
4528: LD_INT 2
4530: ST_TO_ADDR
// hc_gallery =  ;
4531: LD_ADDR_OWVAR 33
4535: PUSH
4536: LD_STRING 
4538: ST_TO_ADDR
// hc_name =  ;
4539: LD_ADDR_OWVAR 26
4543: PUSH
4544: LD_STRING 
4546: ST_TO_ADDR
// PrepareHuman ( false , 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4547: LD_INT 0
4549: PPUSH
4550: LD_INT 1
4552: PPUSH
4553: LD_EXP 38
4557: PPUSH
4558: LD_EXP 39
4562: PPUSH
4563: CALL_OW 12
4567: PPUSH
4568: CALL_OW 380
// un = CreateHuman ;
4572: LD_ADDR_VAR 0 3
4576: PUSH
4577: CALL_OW 44
4581: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4582: LD_VAR 0 3
4586: PPUSH
4587: LD_INT 4
4589: PPUSH
4590: LD_INT 0
4592: PPUSH
4593: CALL_OW 49
// end ;
4597: GO 4512
4599: POP
4600: POP
// for i = 1 to [ 3 , 4 , 4 , 4 ] [ Difficulty ] do
4601: LD_ADDR_VAR 0 2
4605: PUSH
4606: DOUBLE
4607: LD_INT 1
4609: DEC
4610: ST_TO_ADDR
4611: LD_INT 3
4613: PUSH
4614: LD_INT 4
4616: PUSH
4617: LD_INT 4
4619: PUSH
4620: LD_INT 4
4622: PUSH
4623: EMPTY
4624: LIST
4625: LIST
4626: LIST
4627: LIST
4628: PUSH
4629: LD_OWVAR 67
4633: ARRAY
4634: PUSH
4635: FOR_TO
4636: IFFALSE 4722
// begin uc_side = 2 ;
4638: LD_ADDR_OWVAR 20
4642: PUSH
4643: LD_INT 2
4645: ST_TO_ADDR
// uc_nation = 2 ;
4646: LD_ADDR_OWVAR 21
4650: PUSH
4651: LD_INT 2
4653: ST_TO_ADDR
// hc_gallery =  ;
4654: LD_ADDR_OWVAR 33
4658: PUSH
4659: LD_STRING 
4661: ST_TO_ADDR
// hc_name =  ;
4662: LD_ADDR_OWVAR 26
4666: PUSH
4667: LD_STRING 
4669: ST_TO_ADDR
// PrepareHuman ( false , 4 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4670: LD_INT 0
4672: PPUSH
4673: LD_INT 4
4675: PPUSH
4676: LD_EXP 38
4680: PPUSH
4681: LD_EXP 39
4685: PPUSH
4686: CALL_OW 12
4690: PPUSH
4691: CALL_OW 380
// un = CreateHuman ;
4695: LD_ADDR_VAR 0 3
4699: PUSH
4700: CALL_OW 44
4704: ST_TO_ADDR
// PlaceUnitArea ( un , ArabianSpawn , false ) ;
4705: LD_VAR 0 3
4709: PPUSH
4710: LD_INT 4
4712: PPUSH
4713: LD_INT 0
4715: PPUSH
4716: CALL_OW 49
// end ;
4720: GO 4635
4722: POP
4723: POP
// for i = 1 to 2 do
4724: LD_ADDR_VAR 0 2
4728: PUSH
4729: DOUBLE
4730: LD_INT 1
4732: DEC
4733: ST_TO_ADDR
4734: LD_INT 2
4736: PUSH
4737: FOR_TO
4738: IFFALSE 4868
// begin veh = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
4740: LD_ADDR_VAR 0 4
4744: PUSH
4745: LD_INT 22
4747: PUSH
4748: LD_INT 2
4750: PUSH
4751: EMPTY
4752: LIST
4753: LIST
4754: PUSH
4755: LD_INT 21
4757: PUSH
4758: LD_INT 2
4760: PUSH
4761: EMPTY
4762: LIST
4763: LIST
4764: PUSH
4765: LD_INT 58
4767: PUSH
4768: EMPTY
4769: LIST
4770: PUSH
4771: EMPTY
4772: LIST
4773: LIST
4774: LIST
4775: PPUSH
4776: CALL_OW 69
4780: ST_TO_ADDR
// uc_side = 2 ;
4781: LD_ADDR_OWVAR 20
4785: PUSH
4786: LD_INT 2
4788: ST_TO_ADDR
// uc_nation = 2 ;
4789: LD_ADDR_OWVAR 21
4793: PUSH
4794: LD_INT 2
4796: ST_TO_ADDR
// hc_gallery =  ;
4797: LD_ADDR_OWVAR 33
4801: PUSH
4802: LD_STRING 
4804: ST_TO_ADDR
// hc_name =  ;
4805: LD_ADDR_OWVAR 26
4809: PUSH
4810: LD_STRING 
4812: ST_TO_ADDR
// PrepareHuman ( false , 3 , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4813: LD_INT 0
4815: PPUSH
4816: LD_INT 3
4818: PPUSH
4819: LD_EXP 38
4823: PPUSH
4824: LD_EXP 39
4828: PPUSH
4829: CALL_OW 12
4833: PPUSH
4834: CALL_OW 380
// un = CreateHuman ;
4838: LD_ADDR_VAR 0 3
4842: PUSH
4843: CALL_OW 44
4847: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh [ 1 ] ) ;
4848: LD_VAR 0 3
4852: PPUSH
4853: LD_VAR 0 4
4857: PUSH
4858: LD_INT 1
4860: ARRAY
4861: PPUSH
4862: CALL_OW 52
// end ;
4866: GO 4737
4868: POP
4869: POP
// end ;
4870: LD_VAR 0 1
4874: RET
// export function PrepareArabianSheik ; var i , animal , un , target1 , target2 ; begin
4875: LD_INT 0
4877: PPUSH
4878: PPUSH
4879: PPUSH
4880: PPUSH
4881: PPUSH
4882: PPUSH
// for i := 1 to 2 do
4883: LD_ADDR_VAR 0 2
4887: PUSH
4888: DOUBLE
4889: LD_INT 1
4891: DEC
4892: ST_TO_ADDR
4893: LD_INT 2
4895: PUSH
4896: FOR_TO
4897: IFFALSE 5023
// begin uc_side = 5 ;
4899: LD_ADDR_OWVAR 20
4903: PUSH
4904: LD_INT 5
4906: ST_TO_ADDR
// uc_nation = 2 ;
4907: LD_ADDR_OWVAR 21
4911: PUSH
4912: LD_INT 2
4914: ST_TO_ADDR
// vc_chassis := 31 ;
4915: LD_ADDR_OWVAR 37
4919: PUSH
4920: LD_INT 31
4922: ST_TO_ADDR
// vc_control := control_rider ;
4923: LD_ADDR_OWVAR 38
4927: PUSH
4928: LD_INT 4
4930: ST_TO_ADDR
// animal := CreateVehicle ;
4931: LD_ADDR_VAR 0 3
4935: PUSH
4936: CALL_OW 45
4940: ST_TO_ADDR
// PlaceUnitArea ( animal , ArabianSpawn2 , false ) ;
4941: LD_VAR 0 3
4945: PPUSH
4946: LD_INT 7
4948: PPUSH
4949: LD_INT 0
4951: PPUSH
4952: CALL_OW 49
// hc_gallery =  ;
4956: LD_ADDR_OWVAR 33
4960: PUSH
4961: LD_STRING 
4963: ST_TO_ADDR
// hc_name =  ;
4964: LD_ADDR_OWVAR 26
4968: PUSH
4969: LD_STRING 
4971: ST_TO_ADDR
// PrepareHuman ( false , class_desert_warior , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
4972: LD_INT 0
4974: PPUSH
4975: LD_INT 11
4977: PPUSH
4978: LD_EXP 38
4982: PPUSH
4983: LD_EXP 39
4987: PPUSH
4988: CALL_OW 12
4992: PPUSH
4993: CALL_OW 380
// un = CreateHuman ;
4997: LD_ADDR_VAR 0 4
5001: PUSH
5002: CALL_OW 44
5006: ST_TO_ADDR
// PlaceHumanInUnit ( un , animal ) ;
5007: LD_VAR 0 4
5011: PPUSH
5012: LD_VAR 0 3
5016: PPUSH
5017: CALL_OW 52
// end ;
5021: GO 4896
5023: POP
5024: POP
// repeat wait ( 0 0$1 ) ;
5025: LD_INT 35
5027: PPUSH
5028: CALL_OW 67
// target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , i ) ;
5032: LD_ADDR_VAR 0 5
5036: PUSH
5037: LD_INT 22
5039: PUSH
5040: LD_INT 1
5042: PUSH
5043: EMPTY
5044: LIST
5045: LIST
5046: PPUSH
5047: CALL_OW 69
5051: PPUSH
5052: LD_VAR 0 2
5056: PPUSH
5057: CALL_OW 74
5061: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , 1 ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
5062: LD_ADDR_VAR 0 6
5066: PUSH
5067: LD_INT 22
5069: PUSH
5070: LD_INT 1
5072: PUSH
5073: EMPTY
5074: LIST
5075: LIST
5076: PUSH
5077: LD_INT 2
5079: PUSH
5080: LD_INT 59
5082: PUSH
5083: EMPTY
5084: LIST
5085: PUSH
5086: LD_INT 21
5088: PUSH
5089: LD_INT 1
5091: PUSH
5092: EMPTY
5093: LIST
5094: LIST
5095: PUSH
5096: LD_INT 21
5098: PUSH
5099: LD_INT 2
5101: PUSH
5102: EMPTY
5103: LIST
5104: LIST
5105: PUSH
5106: EMPTY
5107: LIST
5108: LIST
5109: LIST
5110: LIST
5111: PUSH
5112: EMPTY
5113: LIST
5114: LIST
5115: PUSH
5116: EMPTY
5117: LIST
5118: PPUSH
5119: CALL_OW 69
5123: PPUSH
5124: LD_VAR 0 2
5128: PPUSH
5129: CALL_OW 74
5133: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) do
5134: LD_ADDR_VAR 0 2
5138: PUSH
5139: LD_INT 22
5141: PUSH
5142: LD_INT 5
5144: PUSH
5145: EMPTY
5146: LIST
5147: LIST
5148: PUSH
5149: LD_INT 25
5151: PUSH
5152: LD_INT 11
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PPUSH
5163: CALL_OW 69
5167: PUSH
5168: FOR_IN
5169: IFFALSE 5239
// begin if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
5171: LD_VAR 0 2
5175: PPUSH
5176: LD_VAR 0 5
5180: PPUSH
5181: CALL_OW 296
5185: PUSH
5186: LD_INT 8
5188: PLUS
5189: PUSH
5190: LD_VAR 0 2
5194: PPUSH
5195: LD_VAR 0 6
5199: PPUSH
5200: CALL_OW 296
5204: LESS
5205: IFFALSE 5223
// ComAttackUnit ( i , target1 ) else
5207: LD_VAR 0 2
5211: PPUSH
5212: LD_VAR 0 5
5216: PPUSH
5217: CALL_OW 115
5221: GO 5237
// ComAttackUnit ( i , target2 ) ;
5223: LD_VAR 0 2
5227: PPUSH
5228: LD_VAR 0 6
5232: PPUSH
5233: CALL_OW 115
// end ;
5237: GO 5168
5239: POP
5240: POP
// until FilterAllUnits ( [ [ f_side , 5 ] , [ f_class , class_desert_warior ] ] ) = 0 ;
5241: LD_INT 22
5243: PUSH
5244: LD_INT 5
5246: PUSH
5247: EMPTY
5248: LIST
5249: LIST
5250: PUSH
5251: LD_INT 25
5253: PUSH
5254: LD_INT 11
5256: PUSH
5257: EMPTY
5258: LIST
5259: LIST
5260: PUSH
5261: EMPTY
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL_OW 69
5269: PUSH
5270: LD_INT 0
5272: EQUAL
5273: IFFALSE 5025
// end ; end_of_file
5275: LD_VAR 0 1
5279: RET
// every 0 0$1 do
5280: GO 5282
5282: DISABLE
// begin RevealFogArea ( 1 , EpsilonTerrain ) ;
5283: LD_INT 1
5285: PPUSH
5286: LD_INT 19
5288: PPUSH
5289: CALL_OW 332
// CenterNowOnUnits ( Simms ) ;
5293: LD_EXP 11
5297: PPUSH
5298: CALL_OW 87
// wait ( 0 0$3 ) ;
5302: LD_INT 105
5304: PPUSH
5305: CALL_OW 67
// CenterOnUnits ( IsInUnit ( JMM ) ) ;
5309: LD_EXP 1
5313: PPUSH
5314: CALL_OW 310
5318: PPUSH
5319: CALL_OW 85
// Wait ( 0 0$1 ) ;
5323: LD_INT 35
5325: PPUSH
5326: CALL_OW 67
// if IsOk ( Gary ) then
5330: LD_EXP 10
5334: PPUSH
5335: CALL_OW 302
5339: IFFALSE 5377
// begin Say ( Gary , D2-Gary-1 ) ;
5341: LD_EXP 10
5345: PPUSH
5346: LD_STRING D2-Gary-1
5348: PPUSH
5349: CALL_OW 88
// Say ( JMM , D2-JMM-1 ) ;
5353: LD_EXP 1
5357: PPUSH
5358: LD_STRING D2-JMM-1
5360: PPUSH
5361: CALL_OW 88
// Say ( Gary , D2-Gary-2 ) ;
5365: LD_EXP 10
5369: PPUSH
5370: LD_STRING D2-Gary-2
5372: PPUSH
5373: CALL_OW 88
// end ; Video ( false ) ;
5377: LD_INT 0
5379: PPUSH
5380: CALL 87738 0 1
// ChangeMissionObjectives ( M1 ) ;
5384: LD_STRING M1
5386: PPUSH
5387: CALL_OW 337
// AddCargo ( cargo1 , 1 , 100 ) ;
5391: LD_INT 38
5393: PPUSH
5394: LD_INT 1
5396: PPUSH
5397: LD_INT 100
5399: PPUSH
5400: CALL_OW 291
// AddCargo ( cargo2 , 1 , 50 ) ;
5404: LD_INT 47
5406: PPUSH
5407: LD_INT 1
5409: PPUSH
5410: LD_INT 50
5412: PPUSH
5413: CALL_OW 291
// AddCargo ( cargo2 , 3 , 50 ) ;
5417: LD_INT 47
5419: PPUSH
5420: LD_INT 3
5422: PPUSH
5423: LD_INT 50
5425: PPUSH
5426: CALL_OW 291
// SaveForQuickRestart ;
5430: CALL_OW 22
// end ;
5434: END
// every 0 0$1 trigger GetDistUnits ( JMM , Simms ) < 15 do var p ;
5435: LD_EXP 1
5439: PPUSH
5440: LD_EXP 11
5444: PPUSH
5445: CALL_OW 296
5449: PUSH
5450: LD_INT 15
5452: LESS
5453: IFFALSE 6281
5455: GO 5457
5457: DISABLE
5458: LD_INT 0
5460: PPUSH
// begin wait ( 0 0$3 ) ;
5461: LD_INT 105
5463: PPUSH
5464: CALL_OW 67
// Video ( true ) ;
5468: LD_INT 1
5470: PPUSH
5471: CALL 87738 0 1
// ComExitVehicle ( JMM ) ;
5475: LD_EXP 1
5479: PPUSH
5480: CALL_OW 121
// CenterNowOnUnits ( JMM ) ;
5484: LD_EXP 1
5488: PPUSH
5489: CALL_OW 87
// if Truman then
5493: LD_EXP 21
5497: IFFALSE 5634
// begin ComMoveUnit ( Truman , JMM ) ;
5499: LD_EXP 21
5503: PPUSH
5504: LD_EXP 1
5508: PPUSH
5509: CALL_OW 112
// repeat wait ( 0 0$1 ) ;
5513: LD_INT 35
5515: PPUSH
5516: CALL_OW 67
// until GetDistUnits ( Truman , JMM ) < 6 ;
5520: LD_EXP 21
5524: PPUSH
5525: LD_EXP 1
5529: PPUSH
5530: CALL_OW 296
5534: PUSH
5535: LD_INT 6
5537: LESS
5538: IFFALSE 5513
// ComTurnUnit ( Truman , JMM ) ;
5540: LD_EXP 21
5544: PPUSH
5545: LD_EXP 1
5549: PPUSH
5550: CALL_OW 119
// ComTurnUnit ( JMM , Truman ) ;
5554: LD_EXP 1
5558: PPUSH
5559: LD_EXP 21
5563: PPUSH
5564: CALL_OW 119
// Say ( Truman , D2-Tru-1 ) ;
5568: LD_EXP 21
5572: PPUSH
5573: LD_STRING D2-Tru-1
5575: PPUSH
5576: CALL_OW 88
// Say ( JMM , D2-JMM-Tru-1 ) ;
5580: LD_EXP 1
5584: PPUSH
5585: LD_STRING D2-JMM-Tru-1
5587: PPUSH
5588: CALL_OW 88
// Say ( Truman , D2-Tru-2 ) ;
5592: LD_EXP 21
5596: PPUSH
5597: LD_STRING D2-Tru-2
5599: PPUSH
5600: CALL_OW 88
// ComMoveXY ( Truman , 79 , 41 ) ;
5604: LD_EXP 21
5608: PPUSH
5609: LD_INT 79
5611: PPUSH
5612: LD_INT 41
5614: PPUSH
5615: CALL_OW 111
// AddComMoveXY ( Truman , 17 , 31 ) ;
5619: LD_EXP 21
5623: PPUSH
5624: LD_INT 17
5626: PPUSH
5627: LD_INT 31
5629: PPUSH
5630: CALL_OW 171
// end ; AddComTurnUnit ( JMM , Simms ) ;
5634: LD_EXP 1
5638: PPUSH
5639: LD_EXP 11
5643: PPUSH
5644: CALL_OW 179
// p := 15 ;
5648: LD_ADDR_VAR 0 1
5652: PUSH
5653: LD_INT 15
5655: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
5656: LD_INT 35
5658: PPUSH
5659: CALL_OW 67
// ComMoveUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5663: LD_EXP 11
5667: PUSH
5668: LD_EXP 13
5672: PUSH
5673: LD_EXP 12
5677: PUSH
5678: LD_EXP 14
5682: PUSH
5683: LD_EXP 8
5687: PUSH
5688: EMPTY
5689: LIST
5690: LIST
5691: LIST
5692: LIST
5693: LIST
5694: PPUSH
5695: LD_EXP 1
5699: PPUSH
5700: CALL_OW 112
// p := p - 1 ;
5704: LD_ADDR_VAR 0 1
5708: PUSH
5709: LD_VAR 0 1
5713: PUSH
5714: LD_INT 1
5716: MINUS
5717: ST_TO_ADDR
// until GetDistUnits ( JMM , Simms ) < 5 or p <= 0 ;
5718: LD_EXP 1
5722: PPUSH
5723: LD_EXP 11
5727: PPUSH
5728: CALL_OW 296
5732: PUSH
5733: LD_INT 5
5735: LESS
5736: PUSH
5737: LD_VAR 0 1
5741: PUSH
5742: LD_INT 0
5744: LESSEQUAL
5745: OR
5746: IFFALSE 5656
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam , Kikuchi ] , JMM ) ;
5748: LD_EXP 11
5752: PUSH
5753: LD_EXP 13
5757: PUSH
5758: LD_EXP 12
5762: PUSH
5763: LD_EXP 14
5767: PUSH
5768: LD_EXP 8
5772: PUSH
5773: EMPTY
5774: LIST
5775: LIST
5776: LIST
5777: LIST
5778: LIST
5779: PPUSH
5780: LD_EXP 1
5784: PPUSH
5785: CALL_OW 119
// if not IsInUnit ( JMM ) then
5789: LD_EXP 1
5793: PPUSH
5794: CALL_OW 310
5798: NOT
5799: IFFALSE 5815
// ComTurnUnit ( JMM , Simms ) ;
5801: LD_EXP 1
5805: PPUSH
5806: LD_EXP 11
5810: PPUSH
5811: CALL_OW 119
// ComTurnUnit ( [ Simms , Joan , Denis , Khatam ] , JMM ) ;
5815: LD_EXP 11
5819: PUSH
5820: LD_EXP 13
5824: PUSH
5825: LD_EXP 12
5829: PUSH
5830: LD_EXP 14
5834: PUSH
5835: EMPTY
5836: LIST
5837: LIST
5838: LIST
5839: LIST
5840: PPUSH
5841: LD_EXP 1
5845: PPUSH
5846: CALL_OW 119
// CenterNowOnUnits ( [ JMM , Simms ] ) ;
5850: LD_EXP 1
5854: PUSH
5855: LD_EXP 11
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: PPUSH
5864: CALL_OW 87
// Say ( Simms , D2a-Sim-1 ) ;
5868: LD_EXP 11
5872: PPUSH
5873: LD_STRING D2a-Sim-1
5875: PPUSH
5876: CALL_OW 88
// Say ( JMM , D2a-JMM-1 ) ;
5880: LD_EXP 1
5884: PPUSH
5885: LD_STRING D2a-JMM-1
5887: PPUSH
5888: CALL_OW 88
// if IsOk ( Joan ) then
5892: LD_EXP 13
5896: PPUSH
5897: CALL_OW 302
5901: IFFALSE 5979
// begin if not IsInUnit ( JMM ) then
5903: LD_EXP 1
5907: PPUSH
5908: CALL_OW 310
5912: NOT
5913: IFFALSE 5929
// ComTurnUnit ( JMM , Joan ) ;
5915: LD_EXP 1
5919: PPUSH
5920: LD_EXP 13
5924: PPUSH
5925: CALL_OW 119
// ComTurnUnit ( Joan , JMM ) ;
5929: LD_EXP 13
5933: PPUSH
5934: LD_EXP 1
5938: PPUSH
5939: CALL_OW 119
// Say ( Joan , D2b-Joan-1 ) ;
5943: LD_EXP 13
5947: PPUSH
5948: LD_STRING D2b-Joan-1
5950: PPUSH
5951: CALL_OW 88
// Say ( JMM , D2b-JMM-1 ) ;
5955: LD_EXP 1
5959: PPUSH
5960: LD_STRING D2b-JMM-1
5962: PPUSH
5963: CALL_OW 88
// Say ( Joan , D2b-Joan-2 ) ;
5967: LD_EXP 13
5971: PPUSH
5972: LD_STRING D2b-Joan-2
5974: PPUSH
5975: CALL_OW 88
// end ; if IsOk ( Denis ) then
5979: LD_EXP 12
5983: PPUSH
5984: CALL_OW 302
5988: IFFALSE 6042
// begin if not IsInUnit ( JMM ) then
5990: LD_EXP 1
5994: PPUSH
5995: CALL_OW 310
5999: NOT
6000: IFFALSE 6016
// ComTurnUnit ( JMM , Denis ) ;
6002: LD_EXP 1
6006: PPUSH
6007: LD_EXP 12
6011: PPUSH
6012: CALL_OW 119
// ComTurnUnit ( Denis , JMM ) ;
6016: LD_EXP 12
6020: PPUSH
6021: LD_EXP 1
6025: PPUSH
6026: CALL_OW 119
// Say ( Denis , D2c-Den-1 ) ;
6030: LD_EXP 12
6034: PPUSH
6035: LD_STRING D2c-Den-1
6037: PPUSH
6038: CALL_OW 88
// end ; if IsOK ( Kikuchi ) and not TestCharacters ( 08_Kikuchi ) then
6042: LD_EXP 8
6046: PPUSH
6047: CALL_OW 302
6051: PUSH
6052: LD_STRING 08_Kikuchi
6054: PPUSH
6055: CALL_OW 28
6059: NOT
6060: AND
6061: IFFALSE 6156
// begin repeat wait ( 0 0$1 ) ;
6063: LD_INT 35
6065: PPUSH
6066: CALL_OW 67
// ComMoveUnit ( Kikuchi , JMM ) ;
6070: LD_EXP 8
6074: PPUSH
6075: LD_EXP 1
6079: PPUSH
6080: CALL_OW 112
// until GetDistUnits ( JMM , Kikuchi ) < 5 ;
6084: LD_EXP 1
6088: PPUSH
6089: LD_EXP 8
6093: PPUSH
6094: CALL_OW 296
6098: PUSH
6099: LD_INT 5
6101: LESS
6102: IFFALSE 6063
// ComTurnUnit ( Kikuchi , JMM ) ;
6104: LD_EXP 8
6108: PPUSH
6109: LD_EXP 1
6113: PPUSH
6114: CALL_OW 119
// if not IsInUnit ( JMM ) then
6118: LD_EXP 1
6122: PPUSH
6123: CALL_OW 310
6127: NOT
6128: IFFALSE 6144
// ComTurnUnit ( JMM , Kikuchi ) ;
6130: LD_EXP 1
6134: PPUSH
6135: LD_EXP 8
6139: PPUSH
6140: CALL_OW 119
// Say ( Kikuchi , D3b-Yam-1 ) ;
6144: LD_EXP 8
6148: PPUSH
6149: LD_STRING D3b-Yam-1
6151: PPUSH
6152: CALL_OW 88
// end ; if IsOk ( Khatam ) then
6156: LD_EXP 14
6160: PPUSH
6161: CALL_OW 302
6165: IFFALSE 6231
// begin if not IsInUnit ( JMM ) then
6167: LD_EXP 1
6171: PPUSH
6172: CALL_OW 310
6176: NOT
6177: IFFALSE 6193
// ComTurnUnit ( JMM , Khatam ) ;
6179: LD_EXP 1
6183: PPUSH
6184: LD_EXP 14
6188: PPUSH
6189: CALL_OW 119
// ComTurnUnit ( Khatam , JMM ) ;
6193: LD_EXP 14
6197: PPUSH
6198: LD_EXP 1
6202: PPUSH
6203: CALL_OW 119
// Say ( JMM , D2c-JMM-1 ) ;
6207: LD_EXP 1
6211: PPUSH
6212: LD_STRING D2c-JMM-1
6214: PPUSH
6215: CALL_OW 88
// Say ( Khatam , D2c-Khat-1 ) ;
6219: LD_EXP 14
6223: PPUSH
6224: LD_STRING D2c-Khat-1
6226: PPUSH
6227: CALL_OW 88
// end ; Video ( false ) ;
6231: LD_INT 0
6233: PPUSH
6234: CALL 87738 0 1
// SetSide ( FilterAllUnits ( [ f_side , 4 ] ) diff Truman , 1 ) ;
6238: LD_INT 22
6240: PUSH
6241: LD_INT 4
6243: PUSH
6244: EMPTY
6245: LIST
6246: LIST
6247: PPUSH
6248: CALL_OW 69
6252: PUSH
6253: LD_EXP 21
6257: DIFF
6258: PPUSH
6259: LD_INT 1
6261: PPUSH
6262: CALL_OW 235
// ChangeMissionObjectives ( M1a ) ;
6266: LD_STRING M1a
6268: PPUSH
6269: CALL_OW 337
// joinEpsilon := 1 ;
6273: LD_ADDR_EXP 31
6277: PUSH
6278: LD_INT 1
6280: ST_TO_ADDR
// end ;
6281: PPOPN 1
6283: END
// every 0 0$1 trigger GetCargo ( cargo1 , 1 ) = 0 and GetCargo ( cargo2 , 1 ) = 0 and GetCargo ( cargo2 , 2 ) = 0 do var p ;
6284: LD_INT 38
6286: PPUSH
6287: LD_INT 1
6289: PPUSH
6290: CALL_OW 289
6294: PUSH
6295: LD_INT 0
6297: EQUAL
6298: PUSH
6299: LD_INT 47
6301: PPUSH
6302: LD_INT 1
6304: PPUSH
6305: CALL_OW 289
6309: PUSH
6310: LD_INT 0
6312: EQUAL
6313: AND
6314: PUSH
6315: LD_INT 47
6317: PPUSH
6318: LD_INT 2
6320: PPUSH
6321: CALL_OW 289
6325: PUSH
6326: LD_INT 0
6328: EQUAL
6329: AND
6330: IFFALSE 6455
6332: GO 6334
6334: DISABLE
6335: LD_INT 0
6337: PPUSH
// begin p := 0 ;
6338: LD_ADDR_VAR 0 1
6342: PUSH
6343: LD_INT 0
6345: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6346: LD_INT 38
6348: PUSH
6349: LD_INT 47
6351: PUSH
6352: EMPTY
6353: LIST
6354: LIST
6355: PPUSH
6356: LD_INT 56
6358: PPUSH
6359: LD_INT 0
6361: PPUSH
6362: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6366: LD_INT 35
6368: PPUSH
6369: CALL_OW 67
// p := p + 1 ;
6373: LD_ADDR_VAR 0 1
6377: PUSH
6378: LD_VAR 0 1
6382: PUSH
6383: LD_INT 1
6385: PLUS
6386: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 56 , 0 ) ;
6387: LD_INT 38
6389: PUSH
6390: LD_INT 47
6392: PUSH
6393: EMPTY
6394: LIST
6395: LIST
6396: PPUSH
6397: LD_INT 56
6399: PPUSH
6400: LD_INT 0
6402: PPUSH
6403: CALL_OW 111
// if IsInArea ( cargo1 , RemArea ) then
6407: LD_INT 38
6409: PPUSH
6410: LD_INT 27
6412: PPUSH
6413: CALL_OW 308
6417: IFFALSE 6426
// RemoveUnit ( cargo1 ) ;
6419: LD_INT 38
6421: PPUSH
6422: CALL_OW 64
// if IsInArea ( cargo2 , RemArea ) then
6426: LD_INT 47
6428: PPUSH
6429: LD_INT 27
6431: PPUSH
6432: CALL_OW 308
6436: IFFALSE 6445
// RemoveUnit ( cargo2 ) ;
6438: LD_INT 47
6440: PPUSH
6441: CALL_OW 64
// until p > 30 ;
6445: LD_VAR 0 1
6449: PUSH
6450: LD_INT 30
6452: GREATER
6453: IFFALSE 6366
// end ;
6455: PPOPN 1
6457: END
// every 0 0$1 trigger eventVar1 = 1 do var tmp1 , tmp2 , tmp3 ;
6458: LD_EXP 67
6462: PUSH
6463: LD_INT 1
6465: EQUAL
6466: IFFALSE 7640
6468: GO 6470
6470: DISABLE
6471: LD_INT 0
6473: PPUSH
6474: PPUSH
6475: PPUSH
// begin tmp1 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_class , 4 ] , [ f_sex , 1 ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6476: LD_ADDR_VAR 0 1
6480: PUSH
6481: LD_INT 22
6483: PUSH
6484: LD_INT 1
6486: PUSH
6487: EMPTY
6488: LIST
6489: LIST
6490: PUSH
6491: LD_INT 25
6493: PUSH
6494: LD_INT 4
6496: PUSH
6497: EMPTY
6498: LIST
6499: LIST
6500: PUSH
6501: LD_INT 26
6503: PUSH
6504: LD_INT 1
6506: PUSH
6507: EMPTY
6508: LIST
6509: LIST
6510: PUSH
6511: EMPTY
6512: LIST
6513: LIST
6514: LIST
6515: PPUSH
6516: CALL_OW 69
6520: PUSH
6521: LD_EXP 1
6525: PUSH
6526: LD_EXP 2
6530: PUSH
6531: LD_EXP 3
6535: PUSH
6536: LD_EXP 4
6540: PUSH
6541: LD_EXP 5
6545: PUSH
6546: LD_EXP 6
6550: PUSH
6551: LD_EXP 7
6555: PUSH
6556: LD_EXP 8
6560: PUSH
6561: LD_EXP 9
6565: PUSH
6566: LD_EXP 10
6570: PUSH
6571: LD_EXP 11
6575: PUSH
6576: LD_EXP 12
6580: PUSH
6581: LD_EXP 13
6585: PUSH
6586: LD_EXP 14
6590: PUSH
6591: LD_EXP 15
6595: PUSH
6596: LD_EXP 16
6600: PUSH
6601: LD_EXP 17
6605: PUSH
6606: LD_EXP 18
6610: PUSH
6611: LD_EXP 20
6615: PUSH
6616: LD_EXP 26
6620: PUSH
6621: EMPTY
6622: LIST
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: LIST
6630: LIST
6631: LIST
6632: LIST
6633: LIST
6634: LIST
6635: LIST
6636: LIST
6637: LIST
6638: LIST
6639: LIST
6640: LIST
6641: LIST
6642: DIFF
6643: ST_TO_ADDR
// tmp2 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
6644: LD_ADDR_VAR 0 2
6648: PUSH
6649: LD_INT 22
6651: PUSH
6652: LD_INT 1
6654: PUSH
6655: EMPTY
6656: LIST
6657: LIST
6658: PUSH
6659: LD_INT 26
6661: PUSH
6662: LD_INT 1
6664: PUSH
6665: EMPTY
6666: LIST
6667: LIST
6668: PUSH
6669: LD_INT 2
6671: PUSH
6672: LD_INT 25
6674: PUSH
6675: LD_INT 1
6677: PUSH
6678: EMPTY
6679: LIST
6680: LIST
6681: PUSH
6682: LD_INT 25
6684: PUSH
6685: LD_INT 2
6687: PUSH
6688: EMPTY
6689: LIST
6690: LIST
6691: PUSH
6692: LD_INT 25
6694: PUSH
6695: LD_INT 3
6697: PUSH
6698: EMPTY
6699: LIST
6700: LIST
6701: PUSH
6702: EMPTY
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: LIST
6712: PPUSH
6713: CALL_OW 69
6717: PUSH
6718: LD_EXP 1
6722: PUSH
6723: LD_EXP 2
6727: PUSH
6728: LD_EXP 3
6732: PUSH
6733: LD_EXP 4
6737: PUSH
6738: LD_EXP 5
6742: PUSH
6743: LD_EXP 6
6747: PUSH
6748: LD_EXP 7
6752: PUSH
6753: LD_EXP 8
6757: PUSH
6758: LD_EXP 9
6762: PUSH
6763: LD_EXP 10
6767: PUSH
6768: LD_EXP 11
6772: PUSH
6773: LD_EXP 12
6777: PUSH
6778: LD_EXP 13
6782: PUSH
6783: LD_EXP 14
6787: PUSH
6788: LD_EXP 15
6792: PUSH
6793: LD_EXP 16
6797: PUSH
6798: LD_EXP 17
6802: PUSH
6803: LD_EXP 18
6807: PUSH
6808: LD_EXP 20
6812: PUSH
6813: LD_EXP 26
6817: PUSH
6818: EMPTY
6819: LIST
6820: LIST
6821: LIST
6822: LIST
6823: LIST
6824: LIST
6825: LIST
6826: LIST
6827: LIST
6828: LIST
6829: LIST
6830: LIST
6831: LIST
6832: LIST
6833: LIST
6834: LIST
6835: LIST
6836: LIST
6837: LIST
6838: LIST
6839: DIFF
6840: ST_TO_ADDR
// if ( Gary or tmp2 ) and ( DeltaDoctor or tmp1 ) then
6841: LD_EXP 10
6845: PUSH
6846: LD_VAR 0 2
6850: OR
6851: PUSH
6852: LD_EXP 17
6856: PUSH
6857: LD_VAR 0 1
6861: OR
6862: AND
6863: IFFALSE 7082
// begin DialogueOn ;
6865: CALL_OW 6
// if IsOk ( DeltaDoctor ) then
6869: LD_EXP 17
6873: PPUSH
6874: CALL_OW 302
6878: IFFALSE 6894
// Say ( DeltaDoctor , D3-Sci1-1 ) else
6880: LD_EXP 17
6884: PPUSH
6885: LD_STRING D3-Sci1-1
6887: PPUSH
6888: CALL_OW 88
6892: GO 6906
// Say ( tmp1 , D3-Sci1-1 ) ;
6894: LD_VAR 0 1
6898: PPUSH
6899: LD_STRING D3-Sci1-1
6901: PPUSH
6902: CALL_OW 88
// if IsOk ( Gary ) then
6906: LD_EXP 10
6910: PPUSH
6911: CALL_OW 302
6915: IFFALSE 6931
// Say ( Gary , D3-Gary-1 ) else
6917: LD_EXP 10
6921: PPUSH
6922: LD_STRING D3-Gary-1
6924: PPUSH
6925: CALL_OW 88
6929: GO 6943
// Say ( tmp2 , D3-Gary-1 ) ;
6931: LD_VAR 0 2
6935: PPUSH
6936: LD_STRING D3-Gary-1
6938: PPUSH
6939: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6943: LD_EXP 17
6947: PPUSH
6948: CALL_OW 302
6952: IFFALSE 6968
// Say ( DeltaDoctor , D3-Sci1-2 ) else
6954: LD_EXP 17
6958: PPUSH
6959: LD_STRING D3-Sci1-2
6961: PPUSH
6962: CALL_OW 88
6966: GO 6980
// Say ( tmp1 , D3-Sci1-2 ) ;
6968: LD_VAR 0 1
6972: PPUSH
6973: LD_STRING D3-Sci1-2
6975: PPUSH
6976: CALL_OW 88
// Say ( JMM , D3-JMM-2 ) ;
6980: LD_EXP 1
6984: PPUSH
6985: LD_STRING D3-JMM-2
6987: PPUSH
6988: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
6992: LD_EXP 17
6996: PPUSH
6997: CALL_OW 302
7001: IFFALSE 7017
// Say ( DeltaDoctor , D3-Sci1-3 ) else
7003: LD_EXP 17
7007: PPUSH
7008: LD_STRING D3-Sci1-3
7010: PPUSH
7011: CALL_OW 88
7015: GO 7029
// Say ( tmp1 , D3-Sci1-3 ) ;
7017: LD_VAR 0 1
7021: PPUSH
7022: LD_STRING D3-Sci1-3
7024: PPUSH
7025: CALL_OW 88
// Say ( JMM , D3-JMM-3 ) ;
7029: LD_EXP 1
7033: PPUSH
7034: LD_STRING D3-JMM-3
7036: PPUSH
7037: CALL_OW 88
// if IsOk ( DeltaDoctor ) then
7041: LD_EXP 17
7045: PPUSH
7046: CALL_OW 302
7050: IFFALSE 7066
// Say ( DeltaDoctor , D3-Sci1-4 ) else
7052: LD_EXP 17
7056: PPUSH
7057: LD_STRING D3-Sci1-4
7059: PPUSH
7060: CALL_OW 88
7064: GO 7078
// Say ( tmp1 , D3-Sci1-4 ) ;
7066: LD_VAR 0 1
7070: PPUSH
7071: LD_STRING D3-Sci1-4
7073: PPUSH
7074: CALL_OW 88
// DialogueOff ;
7078: CALL_OW 7
// end ; SetTech ( 12 , 1 , state_enabled ) ;
7082: LD_INT 12
7084: PPUSH
7085: LD_INT 1
7087: PPUSH
7088: LD_INT 1
7090: PPUSH
7091: CALL_OW 322
// SetTech ( tech_rocket , 1 , state_enabled ) ;
7095: LD_INT 40
7097: PPUSH
7098: LD_INT 1
7100: PPUSH
7101: LD_INT 1
7103: PPUSH
7104: CALL_OW 322
// SetTech ( 32 , 1 , state_enabled ) ;
7108: LD_INT 32
7110: PPUSH
7111: LD_INT 1
7113: PPUSH
7114: LD_INT 1
7116: PPUSH
7117: CALL_OW 322
// SetRestrict ( 12 , 1 , true ) ;
7121: LD_INT 12
7123: PPUSH
7124: LD_INT 1
7126: PPUSH
7127: LD_INT 1
7129: PPUSH
7130: CALL_OW 324
// SetRestrict ( 33 , 1 , true ) ;
7134: LD_INT 33
7136: PPUSH
7137: LD_INT 1
7139: PPUSH
7140: LD_INT 1
7142: PPUSH
7143: CALL_OW 324
// ChangeMissionObjectives ( M2 ) ;
7147: LD_STRING M2
7149: PPUSH
7150: CALL_OW 337
// wait ( 3 3$0 ) ;
7154: LD_INT 6300
7156: PPUSH
7157: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
7161: LD_INT 35
7163: PPUSH
7164: CALL_OW 67
// until not InBattle ( 1 ) ;
7168: LD_INT 1
7170: PPUSH
7171: CALL_OW 463
7175: NOT
7176: IFFALSE 7161
// if IsOK ( Simms ) and IsOk ( DeltaDoctor ) then
7178: LD_EXP 11
7182: PPUSH
7183: CALL_OW 302
7187: PUSH
7188: LD_EXP 17
7192: PPUSH
7193: CALL_OW 302
7197: AND
7198: IFFALSE 7367
// begin DialogueOn ;
7200: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7204: LD_EXP 11
7208: PPUSH
7209: LD_STRING D3a-Sim-1
7211: PPUSH
7212: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-1 ) ;
7216: LD_EXP 17
7220: PPUSH
7221: LD_STRING D3a-Sci1-1
7223: PPUSH
7224: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7228: LD_EXP 11
7232: PPUSH
7233: LD_STRING D3a-Sim-2
7235: PPUSH
7236: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-2 ) ;
7240: LD_EXP 17
7244: PPUSH
7245: LD_STRING D3a-Sci1-2
7247: PPUSH
7248: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7252: LD_EXP 11
7256: PPUSH
7257: LD_STRING D3a-Sim-3
7259: PPUSH
7260: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-3 ) ;
7264: LD_EXP 17
7268: PPUSH
7269: LD_STRING D3a-Sci1-3
7271: PPUSH
7272: CALL_OW 88
// if IsOK ( Joan ) then
7276: LD_EXP 13
7280: PPUSH
7281: CALL_OW 302
7285: IFFALSE 7301
// Say ( Simms , D3a-Sim-4 ) else
7287: LD_EXP 11
7291: PPUSH
7292: LD_STRING D3a-Sim-4
7294: PPUSH
7295: CALL_OW 88
7299: GO 7313
// Say ( Simms , D3a-Sim-4a ) ;
7301: LD_EXP 11
7305: PPUSH
7306: LD_STRING D3a-Sim-4a
7308: PPUSH
7309: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-4 ) ;
7313: LD_EXP 17
7317: PPUSH
7318: LD_STRING D3a-Sci1-4
7320: PPUSH
7321: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7325: LD_EXP 11
7329: PPUSH
7330: LD_STRING D3a-Sim-5
7332: PPUSH
7333: CALL_OW 88
// Say ( DeltaDoctor , D3a-Sci1-5 ) ;
7337: LD_EXP 17
7341: PPUSH
7342: LD_STRING D3a-Sci1-5
7344: PPUSH
7345: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7349: LD_EXP 11
7353: PPUSH
7354: LD_STRING D3a-Sim-6
7356: PPUSH
7357: CALL_OW 88
// DialogueOff ;
7361: CALL_OW 7
// end else
7365: GO 7640
// begin tmp3 = FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , sex_male ] , [ f_class , 4 ] ] ) diff [ JMM , Frank , Lisa , Simms , Khatam ] ;
7367: LD_ADDR_VAR 0 3
7371: PUSH
7372: LD_INT 22
7374: PUSH
7375: LD_INT 1
7377: PUSH
7378: EMPTY
7379: LIST
7380: LIST
7381: PUSH
7382: LD_INT 26
7384: PUSH
7385: LD_INT 1
7387: PUSH
7388: EMPTY
7389: LIST
7390: LIST
7391: PUSH
7392: LD_INT 25
7394: PUSH
7395: LD_INT 4
7397: PUSH
7398: EMPTY
7399: LIST
7400: LIST
7401: PUSH
7402: EMPTY
7403: LIST
7404: LIST
7405: LIST
7406: PPUSH
7407: CALL_OW 69
7411: PUSH
7412: LD_EXP 1
7416: PUSH
7417: LD_EXP 7
7421: PUSH
7422: LD_EXP 6
7426: PUSH
7427: LD_EXP 11
7431: PUSH
7432: LD_EXP 14
7436: PUSH
7437: EMPTY
7438: LIST
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: DIFF
7444: ST_TO_ADDR
// if tmp3 > 0 then
7445: LD_VAR 0 3
7449: PUSH
7450: LD_INT 0
7452: GREATER
7453: IFFALSE 7640
// begin DialogueOn ;
7455: CALL_OW 6
// Say ( Simms , D3a-Sim-1 ) ;
7459: LD_EXP 11
7463: PPUSH
7464: LD_STRING D3a-Sim-1
7466: PPUSH
7467: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-1 ) ;
7471: LD_VAR 0 3
7475: PUSH
7476: LD_INT 1
7478: ARRAY
7479: PPUSH
7480: LD_STRING D3a-Sci1-1
7482: PPUSH
7483: CALL_OW 88
// Say ( Simms , D3a-Sim-2 ) ;
7487: LD_EXP 11
7491: PPUSH
7492: LD_STRING D3a-Sim-2
7494: PPUSH
7495: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-2 ) ;
7499: LD_VAR 0 3
7503: PUSH
7504: LD_INT 1
7506: ARRAY
7507: PPUSH
7508: LD_STRING D3a-Sci1-2
7510: PPUSH
7511: CALL_OW 88
// Say ( Simms , D3a-Sim-3 ) ;
7515: LD_EXP 11
7519: PPUSH
7520: LD_STRING D3a-Sim-3
7522: PPUSH
7523: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-3 ) ;
7527: LD_VAR 0 3
7531: PUSH
7532: LD_INT 1
7534: ARRAY
7535: PPUSH
7536: LD_STRING D3a-Sci1-3
7538: PPUSH
7539: CALL_OW 88
// if IsOK ( Joan ) then
7543: LD_EXP 13
7547: PPUSH
7548: CALL_OW 302
7552: IFFALSE 7568
// Say ( Simms , D3a-Sim-4 ) else
7554: LD_EXP 11
7558: PPUSH
7559: LD_STRING D3a-Sim-4
7561: PPUSH
7562: CALL_OW 88
7566: GO 7580
// Say ( Simms , D3a-Sim-4a ) ;
7568: LD_EXP 11
7572: PPUSH
7573: LD_STRING D3a-Sim-4a
7575: PPUSH
7576: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-4 ) ;
7580: LD_VAR 0 3
7584: PUSH
7585: LD_INT 1
7587: ARRAY
7588: PPUSH
7589: LD_STRING D3a-Sci1-4
7591: PPUSH
7592: CALL_OW 88
// Say ( Simms , D3a-Sim-5 ) ;
7596: LD_EXP 11
7600: PPUSH
7601: LD_STRING D3a-Sim-5
7603: PPUSH
7604: CALL_OW 88
// Say ( tmp3 [ 1 ] , D3a-Sci1-5 ) ;
7608: LD_VAR 0 3
7612: PUSH
7613: LD_INT 1
7615: ARRAY
7616: PPUSH
7617: LD_STRING D3a-Sci1-5
7619: PPUSH
7620: CALL_OW 88
// Say ( Simms , D3a-Sim-6 ) ;
7624: LD_EXP 11
7628: PPUSH
7629: LD_STRING D3a-Sim-6
7631: PPUSH
7632: CALL_OW 88
// DialogueOff ;
7636: CALL_OW 7
// end ; end ; end ;
7640: PPOPN 3
7642: END
// every 0 0$2 trigger joinEpsilon = 1 do var rnd ;
7643: LD_EXP 31
7647: PUSH
7648: LD_INT 1
7650: EQUAL
7651: IFFALSE 7986
7653: GO 7655
7655: DISABLE
7656: LD_INT 0
7658: PPUSH
// begin wait ( 2 2$00 ) ;
7659: LD_INT 4200
7661: PPUSH
7662: CALL_OW 67
// SayRadio ( AmScout , D4-FSol1-1 ) ;
7666: LD_EXP 18
7670: PPUSH
7671: LD_STRING D4-FSol1-1
7673: PPUSH
7674: CALL_OW 94
// ChangeMissionObjectives ( M3 ) ;
7678: LD_STRING M3
7680: PPUSH
7681: CALL_OW 337
// PrepareRussians ;
7685: CALL 3782 0 0
// spawnRussians := true ;
7689: LD_ADDR_EXP 60
7693: PUSH
7694: LD_INT 1
7696: ST_TO_ADDR
// rnd = Rand ( 1 , 100 ) ;
7697: LD_ADDR_VAR 0 1
7701: PUSH
7702: LD_INT 1
7704: PPUSH
7705: LD_INT 100
7707: PPUSH
7708: CALL_OW 12
7712: ST_TO_ADDR
// if difficulty = 1 then
7713: LD_OWVAR 67
7717: PUSH
7718: LD_INT 1
7720: EQUAL
7721: IFFALSE 7804
// begin if rnd > 0 and rnd < 51 then
7723: LD_VAR 0 1
7727: PUSH
7728: LD_INT 0
7730: GREATER
7731: PUSH
7732: LD_VAR 0 1
7736: PUSH
7737: LD_INT 51
7739: LESS
7740: AND
7741: IFFALSE 7750
// BuildRussianBase ( 2 ) ;
7743: LD_INT 2
7745: PPUSH
7746: CALL 12128 0 1
// if rnd > 50 and rnd < 81 then
7750: LD_VAR 0 1
7754: PUSH
7755: LD_INT 50
7757: GREATER
7758: PUSH
7759: LD_VAR 0 1
7763: PUSH
7764: LD_INT 81
7766: LESS
7767: AND
7768: IFFALSE 7777
// BuildRussianBase ( 1 ) ;
7770: LD_INT 1
7772: PPUSH
7773: CALL 12128 0 1
// if rnd > 80 and rnd < 101 then
7777: LD_VAR 0 1
7781: PUSH
7782: LD_INT 80
7784: GREATER
7785: PUSH
7786: LD_VAR 0 1
7790: PUSH
7791: LD_INT 101
7793: LESS
7794: AND
7795: IFFALSE 7804
// BuildRussianBase ( 3 ) ;
7797: LD_INT 3
7799: PPUSH
7800: CALL 12128 0 1
// end ; if difficulty = 2 then
7804: LD_OWVAR 67
7808: PUSH
7809: LD_INT 2
7811: EQUAL
7812: IFFALSE 7895
// begin if rnd > 0 and rnd < 61 then
7814: LD_VAR 0 1
7818: PUSH
7819: LD_INT 0
7821: GREATER
7822: PUSH
7823: LD_VAR 0 1
7827: PUSH
7828: LD_INT 61
7830: LESS
7831: AND
7832: IFFALSE 7841
// BuildRussianBase ( 2 ) ;
7834: LD_INT 2
7836: PPUSH
7837: CALL 12128 0 1
// if rnd > 60 and rnd < 81 then
7841: LD_VAR 0 1
7845: PUSH
7846: LD_INT 60
7848: GREATER
7849: PUSH
7850: LD_VAR 0 1
7854: PUSH
7855: LD_INT 81
7857: LESS
7858: AND
7859: IFFALSE 7868
// BuildRussianBase ( 1 ) ;
7861: LD_INT 1
7863: PPUSH
7864: CALL 12128 0 1
// if rnd > 80 and rnd < 101 then
7868: LD_VAR 0 1
7872: PUSH
7873: LD_INT 80
7875: GREATER
7876: PUSH
7877: LD_VAR 0 1
7881: PUSH
7882: LD_INT 101
7884: LESS
7885: AND
7886: IFFALSE 7895
// BuildRussianBase ( 3 ) ;
7888: LD_INT 3
7890: PPUSH
7891: CALL 12128 0 1
// end ; if difficulty >= 3 then
7895: LD_OWVAR 67
7899: PUSH
7900: LD_INT 3
7902: GREATEREQUAL
7903: IFFALSE 7986
// begin if rnd > 0 and rnd < 71 then
7905: LD_VAR 0 1
7909: PUSH
7910: LD_INT 0
7912: GREATER
7913: PUSH
7914: LD_VAR 0 1
7918: PUSH
7919: LD_INT 71
7921: LESS
7922: AND
7923: IFFALSE 7932
// BuildRussianBase ( 3 ) ;
7925: LD_INT 3
7927: PPUSH
7928: CALL 12128 0 1
// if rnd > 70 and rnd < 81 then
7932: LD_VAR 0 1
7936: PUSH
7937: LD_INT 70
7939: GREATER
7940: PUSH
7941: LD_VAR 0 1
7945: PUSH
7946: LD_INT 81
7948: LESS
7949: AND
7950: IFFALSE 7959
// BuildRussianBase ( 2 ) ;
7952: LD_INT 2
7954: PPUSH
7955: CALL 12128 0 1
// if rnd > 80 and rnd < 101 then
7959: LD_VAR 0 1
7963: PUSH
7964: LD_INT 80
7966: GREATER
7967: PUSH
7968: LD_VAR 0 1
7972: PUSH
7973: LD_INT 101
7975: LESS
7976: AND
7977: IFFALSE 7986
// BuildRussianBase ( 1 ) ;
7979: LD_INT 1
7981: PPUSH
7982: CALL 12128 0 1
// end ; end ;
7986: PPOPN 1
7988: END
// every 0 0$40 trigger GetTech ( 54 , 1 ) = state_researched or GetTech ( 21 , 1 ) = state_researched or GetTech ( 22 , 1 ) = state_researched do var i , tmp ;
7989: LD_INT 54
7991: PPUSH
7992: LD_INT 1
7994: PPUSH
7995: CALL_OW 321
7999: PUSH
8000: LD_INT 2
8002: EQUAL
8003: PUSH
8004: LD_INT 21
8006: PPUSH
8007: LD_INT 1
8009: PPUSH
8010: CALL_OW 321
8014: PUSH
8015: LD_INT 2
8017: EQUAL
8018: OR
8019: PUSH
8020: LD_INT 22
8022: PPUSH
8023: LD_INT 1
8025: PPUSH
8026: CALL_OW 321
8030: PUSH
8031: LD_INT 2
8033: EQUAL
8034: OR
8035: IFFALSE 8337
8037: GO 8039
8039: DISABLE
8040: LD_INT 0
8042: PPUSH
8043: PPUSH
// begin if IsOk ( DeltaDoctor ) then
8044: LD_EXP 17
8048: PPUSH
8049: CALL_OW 302
8053: IFFALSE 8067
// tmp := DeltaDoctor else
8055: LD_ADDR_VAR 0 2
8059: PUSH
8060: LD_EXP 17
8064: ST_TO_ADDR
8065: GO 8077
// tmp := Denis ;
8067: LD_ADDR_VAR 0 2
8071: PUSH
8072: LD_EXP 12
8076: ST_TO_ADDR
// if tmp then
8077: LD_VAR 0 2
8081: IFFALSE 8175
// begin DialogueOn ;
8083: CALL_OW 6
// Say ( JMM , D6-JMM-1 ) ;
8087: LD_EXP 1
8091: PPUSH
8092: LD_STRING D6-JMM-1
8094: PPUSH
8095: CALL_OW 88
// Say ( tmp , D6-Sci1-1 ) ;
8099: LD_VAR 0 2
8103: PPUSH
8104: LD_STRING D6-Sci1-1
8106: PPUSH
8107: CALL_OW 88
// Say ( JMM , D6-JMM-2 ) ;
8111: LD_EXP 1
8115: PPUSH
8116: LD_STRING D6-JMM-2
8118: PPUSH
8119: CALL_OW 88
// Say ( tmp , D6-Sci1-2 ) ;
8123: LD_VAR 0 2
8127: PPUSH
8128: LD_STRING D6-Sci1-2
8130: PPUSH
8131: CALL_OW 88
// Say ( JMM , D6-JMM-3 ) ;
8135: LD_EXP 1
8139: PPUSH
8140: LD_STRING D6-JMM-3
8142: PPUSH
8143: CALL_OW 88
// Say ( tmp , D6-Sci1-3 ) ;
8147: LD_VAR 0 2
8151: PPUSH
8152: LD_STRING D6-Sci1-3
8154: PPUSH
8155: CALL_OW 88
// Say ( JMM , D6-JMM-4 ) ;
8159: LD_EXP 1
8163: PPUSH
8164: LD_STRING D6-JMM-4
8166: PPUSH
8167: CALL_OW 88
// DialogueOff ;
8171: CALL_OW 7
// end ; wait ( 0 0$30 ) ;
8175: LD_INT 1050
8177: PPUSH
8178: CALL_OW 67
// if arabianTrait = 0 and IsOk ( Khatam ) then
8182: LD_EXP 51
8186: PUSH
8187: LD_INT 0
8189: EQUAL
8190: PUSH
8191: LD_EXP 14
8195: PPUSH
8196: CALL_OW 302
8200: AND
8201: IFFALSE 8259
// begin DialogueOn ;
8203: CALL_OW 6
// Say ( Ahmed , D5-Ar1-1 ) ;
8207: LD_EXP 29
8211: PPUSH
8212: LD_STRING D5-Ar1-1
8214: PPUSH
8215: CALL_OW 88
// Say ( Dietrich , D5-Diet-1 ) ;
8219: LD_EXP 28
8223: PPUSH
8224: LD_STRING D5-Diet-1
8226: PPUSH
8227: CALL_OW 88
// Say ( Ahmed , D5-Ar1-2 ) ;
8231: LD_EXP 29
8235: PPUSH
8236: LD_STRING D5-Ar1-2
8238: PPUSH
8239: CALL_OW 88
// Say ( Dietrich , D5-Diet-2 ) ;
8243: LD_EXP 28
8247: PPUSH
8248: LD_STRING D5-Diet-2
8250: PPUSH
8251: CALL_OW 88
// DialogueOff ;
8255: CALL_OW 7
// end ; repeat wait ( 0 0$1 ) ;
8259: LD_INT 35
8261: PPUSH
8262: CALL_OW 67
// until tick > 10 10$00 ;
8266: LD_OWVAR 1
8270: PUSH
8271: LD_INT 21000
8273: GREATER
8274: IFFALSE 8259
// wait ( 1 1$30 ) ;
8276: LD_INT 3150
8278: PPUSH
8279: CALL_OW 67
// if arabianTrait = 0 then
8283: LD_EXP 51
8287: PUSH
8288: LD_INT 0
8290: EQUAL
8291: IFFALSE 8337
// begin arabianTrait = 1 ;
8293: LD_ADDR_EXP 51
8297: PUSH
8298: LD_INT 1
8300: ST_TO_ADDR
// SetAttitude ( 2 , 3 , att_friend , true ) ;
8301: LD_INT 2
8303: PPUSH
8304: LD_INT 3
8306: PPUSH
8307: LD_INT 1
8309: PPUSH
8310: LD_INT 1
8312: PPUSH
8313: CALL_OW 80
// SetAttitude ( 2 , 6 , att_friend , true ) ;
8317: LD_INT 2
8319: PPUSH
8320: LD_INT 6
8322: PPUSH
8323: LD_INT 1
8325: PPUSH
8326: LD_INT 1
8328: PPUSH
8329: CALL_OW 80
// PrepareArabianTrait ;
8333: CALL 8340 0 0
// end ; end ;
8337: PPOPN 2
8339: END
// export function PrepareArabianTrait ; var i , tmp , un , arSoldiers , arCivilian , barracks , nearestBuilding ; begin
8340: LD_INT 0
8342: PPUSH
8343: PPUSH
8344: PPUSH
8345: PPUSH
8346: PPUSH
8347: PPUSH
8348: PPUSH
8349: PPUSH
// arCivilian := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 4 ] , [ f_class , 2 ] , [ f_class , 3 ] ] ] ) ;
8350: LD_ADDR_VAR 0 6
8354: PUSH
8355: LD_INT 22
8357: PUSH
8358: LD_INT 2
8360: PUSH
8361: EMPTY
8362: LIST
8363: LIST
8364: PUSH
8365: LD_INT 2
8367: PUSH
8368: LD_INT 25
8370: PUSH
8371: LD_INT 4
8373: PUSH
8374: EMPTY
8375: LIST
8376: LIST
8377: PUSH
8378: LD_INT 25
8380: PUSH
8381: LD_INT 2
8383: PUSH
8384: EMPTY
8385: LIST
8386: LIST
8387: PUSH
8388: LD_INT 25
8390: PUSH
8391: LD_INT 3
8393: PUSH
8394: EMPTY
8395: LIST
8396: LIST
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: LIST
8402: LIST
8403: PUSH
8404: EMPTY
8405: LIST
8406: LIST
8407: PPUSH
8408: CALL_OW 69
8412: ST_TO_ADDR
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
8413: LD_ADDR_VAR 0 5
8417: PUSH
8418: LD_INT 22
8420: PUSH
8421: LD_INT 2
8423: PUSH
8424: EMPTY
8425: LIST
8426: LIST
8427: PUSH
8428: LD_INT 21
8430: PUSH
8431: LD_INT 1
8433: PUSH
8434: EMPTY
8435: LIST
8436: LIST
8437: PUSH
8438: LD_INT 2
8440: PUSH
8441: LD_INT 25
8443: PUSH
8444: LD_INT 1
8446: PUSH
8447: EMPTY
8448: LIST
8449: LIST
8450: PUSH
8451: LD_INT 25
8453: PUSH
8454: LD_INT 8
8456: PUSH
8457: EMPTY
8458: LIST
8459: LIST
8460: PUSH
8461: LD_INT 25
8463: PUSH
8464: LD_INT 15
8466: PUSH
8467: EMPTY
8468: LIST
8469: LIST
8470: PUSH
8471: EMPTY
8472: LIST
8473: LIST
8474: LIST
8475: LIST
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: LIST
8481: PPUSH
8482: CALL_OW 69
8486: PUSH
8487: LD_EXP 28
8491: PUSH
8492: EMPTY
8493: LIST
8494: DIFF
8495: ST_TO_ADDR
// barracks := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) [ 1 ] ;
8496: LD_ADDR_VAR 0 7
8500: PUSH
8501: LD_INT 22
8503: PUSH
8504: LD_INT 2
8506: PUSH
8507: EMPTY
8508: LIST
8509: LIST
8510: PUSH
8511: LD_INT 30
8513: PUSH
8514: LD_INT 5
8516: PUSH
8517: EMPTY
8518: LIST
8519: LIST
8520: PUSH
8521: EMPTY
8522: LIST
8523: LIST
8524: PPUSH
8525: CALL_OW 69
8529: PUSH
8530: LD_INT 1
8532: ARRAY
8533: ST_TO_ADDR
// ComExitBuilding ( arCivilian ) ;
8534: LD_VAR 0 6
8538: PPUSH
8539: CALL_OW 122
// ComExitBuilding ( arSoldiers ) ;
8543: LD_VAR 0 5
8547: PPUSH
8548: CALL_OW 122
// wait ( 0 0$3 ) ;
8552: LD_INT 105
8554: PPUSH
8555: CALL_OW 67
// AddComEnterUnit ( arCivilian , barracks ) ;
8559: LD_VAR 0 6
8563: PPUSH
8564: LD_VAR 0 7
8568: PPUSH
8569: CALL_OW 180
// AddComChangeProfession ( arCivilian , [ class_soldier , class_mortar ] [ rand ( 1 , 2 ) ] ) ;
8573: LD_VAR 0 6
8577: PPUSH
8578: LD_INT 1
8580: PUSH
8581: LD_INT 8
8583: PUSH
8584: EMPTY
8585: LIST
8586: LIST
8587: PUSH
8588: LD_INT 1
8590: PPUSH
8591: LD_INT 2
8593: PPUSH
8594: CALL_OW 12
8598: ARRAY
8599: PPUSH
8600: CALL_OW 183
// AddComExitBuilding ( arCivilian ) ;
8604: LD_VAR 0 6
8608: PPUSH
8609: CALL_OW 182
// wait ( 0 0$1 ) ;
8613: LD_INT 35
8615: PPUSH
8616: CALL_OW 67
// CenterOnXY ( 76 , 19 ) ;
8620: LD_INT 76
8622: PPUSH
8623: LD_INT 19
8625: PPUSH
8626: CALL_OW 84
// DialogueOn ;
8630: CALL_OW 6
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8634: LD_INT 22
8636: PUSH
8637: LD_INT 1
8639: PUSH
8640: EMPTY
8641: LIST
8642: LIST
8643: PUSH
8644: LD_INT 26
8646: PUSH
8647: LD_INT 1
8649: PUSH
8650: EMPTY
8651: LIST
8652: LIST
8653: PUSH
8654: LD_INT 2
8656: PUSH
8657: LD_INT 25
8659: PUSH
8660: LD_INT 1
8662: PUSH
8663: EMPTY
8664: LIST
8665: LIST
8666: PUSH
8667: LD_INT 25
8669: PUSH
8670: LD_INT 2
8672: PUSH
8673: EMPTY
8674: LIST
8675: LIST
8676: PUSH
8677: LD_INT 25
8679: PUSH
8680: LD_INT 3
8682: PUSH
8683: EMPTY
8684: LIST
8685: LIST
8686: PUSH
8687: LD_INT 25
8689: PUSH
8690: LD_INT 4
8692: PUSH
8693: EMPTY
8694: LIST
8695: LIST
8696: PUSH
8697: LD_INT 25
8699: PUSH
8700: LD_INT 5
8702: PUSH
8703: EMPTY
8704: LIST
8705: LIST
8706: PUSH
8707: EMPTY
8708: LIST
8709: LIST
8710: LIST
8711: LIST
8712: LIST
8713: LIST
8714: PUSH
8715: EMPTY
8716: LIST
8717: LIST
8718: LIST
8719: PPUSH
8720: CALL_OW 69
8724: PPUSH
8725: LD_STRING D8-Sol1-1
8727: PPUSH
8728: LD_STRING D8-Sol1-1
8730: PPUSH
8731: CALL 11470 0 3
// if IsOK ( DeltaDoctor ) then
8735: LD_EXP 17
8739: PPUSH
8740: CALL_OW 302
8744: IFFALSE 8760
// Say ( DeltaDoctor , D8-Sci1-1 ) else
8746: LD_EXP 17
8750: PPUSH
8751: LD_STRING D8-Sci1-1
8753: PPUSH
8754: CALL_OW 88
8758: GO 8861
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D8-Sol1-1 , D8-Sol1-1 ) ;
8760: LD_INT 22
8762: PUSH
8763: LD_INT 1
8765: PUSH
8766: EMPTY
8767: LIST
8768: LIST
8769: PUSH
8770: LD_INT 26
8772: PUSH
8773: LD_INT 1
8775: PUSH
8776: EMPTY
8777: LIST
8778: LIST
8779: PUSH
8780: LD_INT 2
8782: PUSH
8783: LD_INT 25
8785: PUSH
8786: LD_INT 1
8788: PUSH
8789: EMPTY
8790: LIST
8791: LIST
8792: PUSH
8793: LD_INT 25
8795: PUSH
8796: LD_INT 2
8798: PUSH
8799: EMPTY
8800: LIST
8801: LIST
8802: PUSH
8803: LD_INT 25
8805: PUSH
8806: LD_INT 3
8808: PUSH
8809: EMPTY
8810: LIST
8811: LIST
8812: PUSH
8813: LD_INT 25
8815: PUSH
8816: LD_INT 4
8818: PUSH
8819: EMPTY
8820: LIST
8821: LIST
8822: PUSH
8823: LD_INT 25
8825: PUSH
8826: LD_INT 5
8828: PUSH
8829: EMPTY
8830: LIST
8831: LIST
8832: PUSH
8833: EMPTY
8834: LIST
8835: LIST
8836: LIST
8837: LIST
8838: LIST
8839: LIST
8840: PUSH
8841: EMPTY
8842: LIST
8843: LIST
8844: LIST
8845: PPUSH
8846: CALL_OW 69
8850: PPUSH
8851: LD_STRING D8-Sol1-1
8853: PPUSH
8854: LD_STRING D8-Sol1-1
8856: PPUSH
8857: CALL 11470 0 3
// Say ( JMM , D8-JMM-1 ) ;
8861: LD_EXP 1
8865: PPUSH
8866: LD_STRING D8-JMM-1
8868: PPUSH
8869: CALL_OW 88
// DialogueOff ;
8873: CALL_OW 7
// ChangeSideFog ( 2 , 2 ) ;
8877: LD_INT 2
8879: PPUSH
8880: LD_INT 2
8882: PPUSH
8883: CALL_OW 343
// SetAttitude ( 1 , 2 , att_enemy , true ) ;
8887: LD_INT 1
8889: PPUSH
8890: LD_INT 2
8892: PPUSH
8893: LD_INT 2
8895: PPUSH
8896: LD_INT 1
8898: PPUSH
8899: CALL_OW 80
// SetAttitude ( 3 , 2 , att_friend , true ) ;
8903: LD_INT 3
8905: PPUSH
8906: LD_INT 2
8908: PPUSH
8909: LD_INT 1
8911: PPUSH
8912: LD_INT 1
8914: PPUSH
8915: CALL_OW 80
// ChangeMissionObjectives ( M4 ) ;
8919: LD_STRING M4
8921: PPUSH
8922: CALL_OW 337
// wait ( 0 0$1 ) ;
8926: LD_INT 35
8928: PPUSH
8929: CALL_OW 67
// if IsLive ( Khatam ) then
8933: LD_EXP 14
8937: PPUSH
8938: CALL_OW 300
8942: IFFALSE 8956
// DoNotAttack ( 2 , Khatam ) ;
8944: LD_INT 2
8946: PPUSH
8947: LD_EXP 14
8951: PPUSH
8952: CALL_OW 471
// wait ( 0 0$1 ) ;
8956: LD_INT 35
8958: PPUSH
8959: CALL_OW 67
// nearestBuilding := NearestUnitToUnit ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) , arSoldiers [ 1 ] ) ;
8963: LD_ADDR_VAR 0 8
8967: PUSH
8968: LD_INT 22
8970: PUSH
8971: LD_INT 1
8973: PUSH
8974: EMPTY
8975: LIST
8976: LIST
8977: PUSH
8978: LD_INT 21
8980: PUSH
8981: LD_INT 3
8983: PUSH
8984: EMPTY
8985: LIST
8986: LIST
8987: PUSH
8988: EMPTY
8989: LIST
8990: LIST
8991: PPUSH
8992: CALL_OW 69
8996: PPUSH
8997: LD_VAR 0 5
9001: PUSH
9002: LD_INT 1
9004: ARRAY
9005: PPUSH
9006: CALL_OW 74
9010: ST_TO_ADDR
// AddComPlaceDelayedCharge ( UnitFilter ( arSoldiers , [ f_class , 1 ] ) [ 1 ] , GetX ( nearestBuilding ) , GetY ( nearestBuilding ) , nearestBuilding ) ;
9011: LD_VAR 0 5
9015: PPUSH
9016: LD_INT 25
9018: PUSH
9019: LD_INT 1
9021: PUSH
9022: EMPTY
9023: LIST
9024: LIST
9025: PPUSH
9026: CALL_OW 72
9030: PUSH
9031: LD_INT 1
9033: ARRAY
9034: PPUSH
9035: LD_VAR 0 8
9039: PPUSH
9040: CALL_OW 250
9044: PPUSH
9045: LD_VAR 0 8
9049: PPUSH
9050: CALL_OW 251
9054: PPUSH
9055: LD_VAR 0 8
9059: PPUSH
9060: CALL_OW 192
// AddComAgressiveMove ( arSoldiers , 84 , 22 ) ;
9064: LD_VAR 0 5
9068: PPUSH
9069: LD_INT 84
9071: PPUSH
9072: LD_INT 22
9074: PPUSH
9075: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 82 , 5 ) ;
9079: LD_VAR 0 5
9083: PPUSH
9084: LD_INT 82
9086: PPUSH
9087: LD_INT 5
9089: PPUSH
9090: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 95 , 12 ) ;
9094: LD_VAR 0 5
9098: PPUSH
9099: LD_INT 95
9101: PPUSH
9102: LD_INT 12
9104: PPUSH
9105: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 102 , 11 ) ;
9109: LD_VAR 0 5
9113: PPUSH
9114: LD_INT 102
9116: PPUSH
9117: LD_INT 11
9119: PPUSH
9120: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 116 , 15 ) ;
9124: LD_VAR 0 5
9128: PPUSH
9129: LD_INT 116
9131: PPUSH
9132: LD_INT 15
9134: PPUSH
9135: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 140 , 25 ) ;
9139: LD_VAR 0 5
9143: PPUSH
9144: LD_INT 140
9146: PPUSH
9147: LD_INT 25
9149: PPUSH
9150: CALL_OW 174
// AddComAgressiveMove ( arSoldiers , 160 , 56 ) ;
9154: LD_VAR 0 5
9158: PPUSH
9159: LD_INT 160
9161: PPUSH
9162: LD_INT 56
9164: PPUSH
9165: CALL_OW 174
// arSoldiers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] , [ f_class , 15 ] ] ] ) diff [ Dietrich ] ;
9169: LD_ADDR_VAR 0 5
9173: PUSH
9174: LD_INT 22
9176: PUSH
9177: LD_INT 2
9179: PUSH
9180: EMPTY
9181: LIST
9182: LIST
9183: PUSH
9184: LD_INT 21
9186: PUSH
9187: LD_INT 1
9189: PUSH
9190: EMPTY
9191: LIST
9192: LIST
9193: PUSH
9194: LD_INT 2
9196: PUSH
9197: LD_INT 25
9199: PUSH
9200: LD_INT 1
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: PUSH
9207: LD_INT 25
9209: PUSH
9210: LD_INT 8
9212: PUSH
9213: EMPTY
9214: LIST
9215: LIST
9216: PUSH
9217: LD_INT 25
9219: PUSH
9220: LD_INT 15
9222: PUSH
9223: EMPTY
9224: LIST
9225: LIST
9226: PUSH
9227: EMPTY
9228: LIST
9229: LIST
9230: LIST
9231: LIST
9232: PUSH
9233: EMPTY
9234: LIST
9235: LIST
9236: LIST
9237: PPUSH
9238: CALL_OW 69
9242: PUSH
9243: LD_EXP 28
9247: PUSH
9248: EMPTY
9249: LIST
9250: DIFF
9251: ST_TO_ADDR
// arCivilian = FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 12 ] , [ f_class , 16 ] ] ] ) ;
9252: LD_ADDR_VAR 0 6
9256: PUSH
9257: LD_INT 22
9259: PUSH
9260: LD_INT 2
9262: PUSH
9263: EMPTY
9264: LIST
9265: LIST
9266: PUSH
9267: LD_INT 21
9269: PUSH
9270: LD_INT 1
9272: PUSH
9273: EMPTY
9274: LIST
9275: LIST
9276: PUSH
9277: LD_INT 2
9279: PUSH
9280: LD_INT 25
9282: PUSH
9283: LD_INT 2
9285: PUSH
9286: EMPTY
9287: LIST
9288: LIST
9289: PUSH
9290: LD_INT 25
9292: PUSH
9293: LD_INT 3
9295: PUSH
9296: EMPTY
9297: LIST
9298: LIST
9299: PUSH
9300: LD_INT 25
9302: PUSH
9303: LD_INT 4
9305: PUSH
9306: EMPTY
9307: LIST
9308: LIST
9309: PUSH
9310: LD_INT 25
9312: PUSH
9313: LD_INT 12
9315: PUSH
9316: EMPTY
9317: LIST
9318: LIST
9319: PUSH
9320: LD_INT 25
9322: PUSH
9323: LD_INT 16
9325: PUSH
9326: EMPTY
9327: LIST
9328: LIST
9329: PUSH
9330: EMPTY
9331: LIST
9332: LIST
9333: LIST
9334: LIST
9335: LIST
9336: LIST
9337: PUSH
9338: EMPTY
9339: LIST
9340: LIST
9341: LIST
9342: PPUSH
9343: CALL_OW 69
9347: ST_TO_ADDR
// arCivilian = arCivilian ^ Dietrich ;
9348: LD_ADDR_VAR 0 6
9352: PUSH
9353: LD_VAR 0 6
9357: PUSH
9358: LD_EXP 28
9362: ADD
9363: ST_TO_ADDR
// AddComAgressiveMove ( arSoldiers , 189 , 79 ) ;
9364: LD_VAR 0 5
9368: PPUSH
9369: LD_INT 189
9371: PPUSH
9372: LD_INT 79
9374: PPUSH
9375: CALL_OW 174
// if UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) then
9379: LD_VAR 0 5
9383: PPUSH
9384: LD_INT 25
9386: PUSH
9387: LD_INT 15
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: PPUSH
9394: CALL_OW 72
9398: IFFALSE 9439
// ComEnterUnit ( UnitFilter ( arSoldiers , [ f_class , class_apeman_soldier ] ) [ 1 ] , HexInfo ( 84 , 21 ) ) ;
9400: LD_VAR 0 5
9404: PPUSH
9405: LD_INT 25
9407: PUSH
9408: LD_INT 15
9410: PUSH
9411: EMPTY
9412: LIST
9413: LIST
9414: PPUSH
9415: CALL_OW 72
9419: PUSH
9420: LD_INT 1
9422: ARRAY
9423: PPUSH
9424: LD_INT 84
9426: PPUSH
9427: LD_INT 21
9429: PPUSH
9430: CALL_OW 428
9434: PPUSH
9435: CALL_OW 120
// wait ( 0 0$4 ) ;
9439: LD_INT 140
9441: PPUSH
9442: CALL_OW 67
// AddComMoveXY ( arCivilian , 88 , 8 ) ;
9446: LD_VAR 0 6
9450: PPUSH
9451: LD_INT 88
9453: PPUSH
9454: LD_INT 8
9456: PPUSH
9457: CALL_OW 171
// AddComMoveXY ( arCivilian , 102 , 10 ) ;
9461: LD_VAR 0 6
9465: PPUSH
9466: LD_INT 102
9468: PPUSH
9469: LD_INT 10
9471: PPUSH
9472: CALL_OW 171
// AddComMoveXY ( arCivilian , 116 , 15 ) ;
9476: LD_VAR 0 6
9480: PPUSH
9481: LD_INT 116
9483: PPUSH
9484: LD_INT 15
9486: PPUSH
9487: CALL_OW 171
// AddComMoveXY ( arCivilian , 140 , 25 ) ;
9491: LD_VAR 0 6
9495: PPUSH
9496: LD_INT 140
9498: PPUSH
9499: LD_INT 25
9501: PPUSH
9502: CALL_OW 171
// AddComMoveXY ( arCivilian , 160 , 56 ) ;
9506: LD_VAR 0 6
9510: PPUSH
9511: LD_INT 160
9513: PPUSH
9514: LD_INT 56
9516: PPUSH
9517: CALL_OW 171
// AddComMoveXY ( arCivilian , 189 , 79 ) ;
9521: LD_VAR 0 6
9525: PPUSH
9526: LD_INT 189
9528: PPUSH
9529: LD_INT 79
9531: PPUSH
9532: CALL_OW 171
// arabianAttackersAI = 1 ;
9536: LD_ADDR_EXP 48
9540: PUSH
9541: LD_INT 1
9543: ST_TO_ADDR
// if IsOk ( Gary ) then
9544: LD_EXP 10
9548: PPUSH
9549: CALL_OW 302
9553: IFFALSE 9567
// Say ( Gary , D8a-Gary-1 ) ;
9555: LD_EXP 10
9559: PPUSH
9560: LD_STRING D8a-Gary-1
9562: PPUSH
9563: CALL_OW 88
// wait ( 0 0$5 ) ;
9567: LD_INT 175
9569: PPUSH
9570: CALL_OW 67
// if IsOK ( Khatam ) then
9574: LD_EXP 14
9578: PPUSH
9579: CALL_OW 302
9583: IFFALSE 10119
// begin tmp = FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , Cornell , Powell ] ;
9585: LD_ADDR_VAR 0 3
9589: PUSH
9590: LD_INT 22
9592: PUSH
9593: LD_INT 1
9595: PUSH
9596: EMPTY
9597: LIST
9598: LIST
9599: PUSH
9600: LD_INT 2
9602: PUSH
9603: LD_INT 25
9605: PUSH
9606: LD_INT 1
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: PUSH
9613: LD_INT 25
9615: PUSH
9616: LD_INT 2
9618: PUSH
9619: EMPTY
9620: LIST
9621: LIST
9622: PUSH
9623: LD_INT 25
9625: PUSH
9626: LD_INT 3
9628: PUSH
9629: EMPTY
9630: LIST
9631: LIST
9632: PUSH
9633: LD_INT 25
9635: PUSH
9636: LD_INT 4
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: PUSH
9643: LD_INT 25
9645: PUSH
9646: LD_INT 5
9648: PUSH
9649: EMPTY
9650: LIST
9651: LIST
9652: PUSH
9653: LD_INT 25
9655: PUSH
9656: LD_INT 8
9658: PUSH
9659: EMPTY
9660: LIST
9661: LIST
9662: PUSH
9663: EMPTY
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: PUSH
9672: EMPTY
9673: LIST
9674: LIST
9675: PPUSH
9676: CALL_OW 69
9680: PUSH
9681: LD_EXP 1
9685: PUSH
9686: LD_EXP 2
9690: PUSH
9691: LD_EXP 3
9695: PUSH
9696: LD_EXP 4
9700: PUSH
9701: LD_EXP 5
9705: PUSH
9706: LD_EXP 6
9710: PUSH
9711: LD_EXP 7
9715: PUSH
9716: LD_EXP 8
9720: PUSH
9721: LD_EXP 9
9725: PUSH
9726: LD_EXP 10
9730: PUSH
9731: LD_EXP 11
9735: PUSH
9736: LD_EXP 12
9740: PUSH
9741: LD_EXP 13
9745: PUSH
9746: LD_EXP 14
9750: PUSH
9751: LD_EXP 15
9755: PUSH
9756: LD_EXP 16
9760: PUSH
9761: LD_EXP 17
9765: PUSH
9766: LD_EXP 20
9770: PUSH
9771: LD_EXP 26
9775: PUSH
9776: EMPTY
9777: LIST
9778: LIST
9779: LIST
9780: LIST
9781: LIST
9782: LIST
9783: LIST
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: DIFF
9797: ST_TO_ADDR
// SetSide ( Khatam , 8 ) ;
9798: LD_EXP 14
9802: PPUSH
9803: LD_INT 8
9805: PPUSH
9806: CALL_OW 235
// ComExitBuilding ( Khatam ) ;
9810: LD_EXP 14
9814: PPUSH
9815: CALL_OW 122
// wait ( 0 0$1 ) ;
9819: LD_INT 35
9821: PPUSH
9822: CALL_OW 67
// ComExitVehicle ( Khatam ) ;
9826: LD_EXP 14
9830: PPUSH
9831: CALL_OW 121
// wait ( 0 0$1 ) ;
9835: LD_INT 35
9837: PPUSH
9838: CALL_OW 67
// ComMoveToArea ( Khatam , ArabianSpawn2 ) ;
9842: LD_EXP 14
9846: PPUSH
9847: LD_INT 7
9849: PPUSH
9850: CALL_OW 113
// if not tmp then
9854: LD_VAR 0 3
9858: NOT
9859: IFFALSE 9863
// exit ;
9861: GO 10119
// DialogueOn ;
9863: CALL_OW 6
// if GetSex ( tmp [ 1 ] ) = sex_male then
9867: LD_VAR 0 3
9871: PUSH
9872: LD_INT 1
9874: ARRAY
9875: PPUSH
9876: CALL_OW 258
9880: PUSH
9881: LD_INT 1
9883: EQUAL
9884: IFFALSE 9904
// Say ( tmp [ 1 ] , D8b-Sol1-1 ) else
9886: LD_VAR 0 3
9890: PUSH
9891: LD_INT 1
9893: ARRAY
9894: PPUSH
9895: LD_STRING D8b-Sol1-1
9897: PPUSH
9898: CALL_OW 88
9902: GO 9920
// Say ( tmp [ 1 ] , D8b-FSol1-1 ) ;
9904: LD_VAR 0 3
9908: PUSH
9909: LD_INT 1
9911: ARRAY
9912: PPUSH
9913: LD_STRING D8b-FSol1-1
9915: PPUSH
9916: CALL_OW 88
// Say ( Khatam , D8b-Khat-1 ) ;
9920: LD_EXP 14
9924: PPUSH
9925: LD_STRING D8b-Khat-1
9927: PPUSH
9928: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9932: LD_VAR 0 3
9936: PUSH
9937: LD_INT 1
9939: ARRAY
9940: PPUSH
9941: CALL_OW 258
9945: PUSH
9946: LD_INT 1
9948: EQUAL
9949: IFFALSE 9969
// Say ( tmp [ 1 ] , D8b-Sol1-2 ) else
9951: LD_VAR 0 3
9955: PUSH
9956: LD_INT 1
9958: ARRAY
9959: PPUSH
9960: LD_STRING D8b-Sol1-2
9962: PPUSH
9963: CALL_OW 88
9967: GO 9985
// Say ( tmp [ 1 ] , D8b-FSol1-2 ) ;
9969: LD_VAR 0 3
9973: PUSH
9974: LD_INT 1
9976: ARRAY
9977: PPUSH
9978: LD_STRING D8b-FSol1-2
9980: PPUSH
9981: CALL_OW 88
// Say ( Khatam , D8b-Khat-2 ) ;
9985: LD_EXP 14
9989: PPUSH
9990: LD_STRING D8b-Khat-2
9992: PPUSH
9993: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
9997: LD_VAR 0 3
10001: PUSH
10002: LD_INT 1
10004: ARRAY
10005: PPUSH
10006: CALL_OW 258
10010: PUSH
10011: LD_INT 1
10013: EQUAL
10014: IFFALSE 10034
// Say ( tmp [ 1 ] , D8b-Sol1-3 ) else
10016: LD_VAR 0 3
10020: PUSH
10021: LD_INT 1
10023: ARRAY
10024: PPUSH
10025: LD_STRING D8b-Sol1-3
10027: PPUSH
10028: CALL_OW 88
10032: GO 10050
// Say ( tmp [ 1 ] , D8b-FSol1-3 ) ;
10034: LD_VAR 0 3
10038: PUSH
10039: LD_INT 1
10041: ARRAY
10042: PPUSH
10043: LD_STRING D8b-FSol1-3
10045: PPUSH
10046: CALL_OW 88
// Say ( Khatam , D8b-Khat-3 ) ;
10050: LD_EXP 14
10054: PPUSH
10055: LD_STRING D8b-Khat-3
10057: PPUSH
10058: CALL_OW 88
// if GetSex ( tmp [ 1 ] ) = sex_male then
10062: LD_VAR 0 3
10066: PUSH
10067: LD_INT 1
10069: ARRAY
10070: PPUSH
10071: CALL_OW 258
10075: PUSH
10076: LD_INT 1
10078: EQUAL
10079: IFFALSE 10099
// Say ( tmp [ 1 ] , D8b-Sol1-4 ) else
10081: LD_VAR 0 3
10085: PUSH
10086: LD_INT 1
10088: ARRAY
10089: PPUSH
10090: LD_STRING D8b-Sol1-4
10092: PPUSH
10093: CALL_OW 88
10097: GO 10115
// Say ( tmp [ 1 ] , D8b-FSol1-4 ) ;
10099: LD_VAR 0 3
10103: PUSH
10104: LD_INT 1
10106: ARRAY
10107: PPUSH
10108: LD_STRING D8b-FSol1-4
10110: PPUSH
10111: CALL_OW 88
// DialogueOff ;
10115: CALL_OW 7
// end ; end ;
10119: LD_VAR 0 1
10123: RET
// every 0 0$1 trigger FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) > 0 or IsInArea ( Khatam , ArabianSpawn2 ) do var i ;
10124: LD_INT 7
10126: PPUSH
10127: LD_INT 22
10129: PUSH
10130: LD_INT 2
10132: PUSH
10133: EMPTY
10134: LIST
10135: LIST
10136: PPUSH
10137: CALL_OW 70
10141: PUSH
10142: LD_INT 0
10144: GREATER
10145: PUSH
10146: LD_EXP 14
10150: PPUSH
10151: LD_INT 7
10153: PPUSH
10154: CALL_OW 308
10158: OR
10159: IFFALSE 10366
10161: GO 10163
10163: DISABLE
10164: LD_INT 0
10166: PPUSH
// begin enable ;
10167: ENABLE
// for i in FilterUnitsInArea ( ArabianSpawn2 , [ f_side , 2 ] ) do
10168: LD_ADDR_VAR 0 1
10172: PUSH
10173: LD_INT 7
10175: PPUSH
10176: LD_INT 22
10178: PUSH
10179: LD_INT 2
10181: PUSH
10182: EMPTY
10183: LIST
10184: LIST
10185: PPUSH
10186: CALL_OW 70
10190: PUSH
10191: FOR_IN
10192: IFFALSE 10333
// begin if GetClass ( i ) = 4 then
10194: LD_VAR 0 1
10198: PPUSH
10199: CALL_OW 257
10203: PUSH
10204: LD_INT 4
10206: EQUAL
10207: IFFALSE 10219
// SaveVariable ( 1 , 10_ScientistsEscape_1 ) ;
10209: LD_INT 1
10211: PPUSH
10212: LD_STRING 10_ScientistsEscape_1
10214: PPUSH
10215: CALL_OW 39
// if i = Dietrich then
10219: LD_VAR 0 1
10223: PUSH
10224: LD_EXP 28
10228: EQUAL
10229: IFFALSE 10239
// GensherStatus = 1 ;
10231: LD_ADDR_EXP 54
10235: PUSH
10236: LD_INT 1
10238: ST_TO_ADDR
// if GetClass ( i ) = 1 or GetClass ( i ) = 2 or GetClass ( i ) = 3 or GetClass ( i ) = 4 or GetClass ( i ) = 8 then
10239: LD_VAR 0 1
10243: PPUSH
10244: CALL_OW 257
10248: PUSH
10249: LD_INT 1
10251: EQUAL
10252: PUSH
10253: LD_VAR 0 1
10257: PPUSH
10258: CALL_OW 257
10262: PUSH
10263: LD_INT 2
10265: EQUAL
10266: OR
10267: PUSH
10268: LD_VAR 0 1
10272: PPUSH
10273: CALL_OW 257
10277: PUSH
10278: LD_INT 3
10280: EQUAL
10281: OR
10282: PUSH
10283: LD_VAR 0 1
10287: PPUSH
10288: CALL_OW 257
10292: PUSH
10293: LD_INT 4
10295: EQUAL
10296: OR
10297: PUSH
10298: LD_VAR 0 1
10302: PPUSH
10303: CALL_OW 257
10307: PUSH
10308: LD_INT 8
10310: EQUAL
10311: OR
10312: IFFALSE 10322
// arabianEscape = 1 ;
10314: LD_ADDR_EXP 49
10318: PUSH
10319: LD_INT 1
10321: ST_TO_ADDR
// RemoveUnit ( i ) ;
10322: LD_VAR 0 1
10326: PPUSH
10327: CALL_OW 64
// end ;
10331: GO 10191
10333: POP
10334: POP
// if IsInArea ( Khatam , ArabianSpawn2 ) then
10335: LD_EXP 14
10339: PPUSH
10340: LD_INT 7
10342: PPUSH
10343: CALL_OW 308
10347: IFFALSE 10366
// begin KhatamStatus = 1 ;
10349: LD_ADDR_EXP 55
10353: PUSH
10354: LD_INT 1
10356: ST_TO_ADDR
// RemoveUnit ( Khatam ) ;
10357: LD_EXP 14
10361: PPUSH
10362: CALL_OW 64
// end ; end ;
10366: PPOPN 1
10368: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 4 ] , [ f_type , unit_human ] ] ) = 0 do
10369: LD_INT 22
10371: PUSH
10372: LD_INT 2
10374: PUSH
10375: EMPTY
10376: LIST
10377: LIST
10378: PUSH
10379: LD_INT 21
10381: PUSH
10382: LD_INT 1
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PPUSH
10393: CALL_OW 69
10397: PUSH
10398: LD_INT 0
10400: EQUAL
10401: PUSH
10402: LD_INT 22
10404: PUSH
10405: LD_INT 4
10407: PUSH
10408: EMPTY
10409: LIST
10410: LIST
10411: PUSH
10412: LD_INT 21
10414: PUSH
10415: LD_INT 1
10417: PUSH
10418: EMPTY
10419: LIST
10420: LIST
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: PPUSH
10426: CALL_OW 69
10430: PUSH
10431: LD_INT 0
10433: EQUAL
10434: AND
10435: IFFALSE 10448
10437: GO 10439
10439: DISABLE
// arabianDefeated = 1 ;
10440: LD_ADDR_EXP 50
10444: PUSH
10445: LD_INT 1
10447: ST_TO_ADDR
10448: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and GetTech ( tech_LasSight , 1 ) = state_researched and GetTech ( tech_AI , 1 ) = state_researched and fastEnd = 0 and arabianTrait = 0 and tick >= 15 15$00 do
10449: LD_INT 54
10451: PPUSH
10452: LD_INT 1
10454: PPUSH
10455: CALL_OW 321
10459: PUSH
10460: LD_INT 2
10462: EQUAL
10463: PUSH
10464: LD_INT 55
10466: PPUSH
10467: LD_INT 1
10469: PPUSH
10470: CALL_OW 321
10474: PUSH
10475: LD_INT 2
10477: EQUAL
10478: AND
10479: PUSH
10480: LD_INT 21
10482: PPUSH
10483: LD_INT 1
10485: PPUSH
10486: CALL_OW 321
10490: PUSH
10491: LD_INT 2
10493: EQUAL
10494: AND
10495: PUSH
10496: LD_INT 22
10498: PPUSH
10499: LD_INT 1
10501: PPUSH
10502: CALL_OW 321
10506: PUSH
10507: LD_INT 2
10509: EQUAL
10510: AND
10511: PUSH
10512: LD_INT 12
10514: PPUSH
10515: LD_INT 1
10517: PPUSH
10518: CALL_OW 321
10522: PUSH
10523: LD_INT 2
10525: EQUAL
10526: AND
10527: PUSH
10528: LD_INT 32
10530: PPUSH
10531: LD_INT 1
10533: PPUSH
10534: CALL_OW 321
10538: PUSH
10539: LD_INT 2
10541: EQUAL
10542: AND
10543: PUSH
10544: LD_EXP 65
10548: PUSH
10549: LD_INT 0
10551: EQUAL
10552: AND
10553: PUSH
10554: LD_EXP 51
10558: PUSH
10559: LD_INT 0
10561: EQUAL
10562: AND
10563: PUSH
10564: LD_OWVAR 1
10568: PUSH
10569: LD_INT 31500
10571: GREATEREQUAL
10572: AND
10573: IFFALSE 10590
10575: GO 10577
10577: DISABLE
// begin arabianTrait = 1 ;
10578: LD_ADDR_EXP 51
10582: PUSH
10583: LD_INT 1
10585: ST_TO_ADDR
// PrepareArabianTrait ;
10586: CALL 8340 0 0
// end ;
10590: END
// every 0 0$1 trigger FilterAllUnits ( [ f_side , 5 ] ) > 3 do
10591: LD_INT 22
10593: PUSH
10594: LD_INT 5
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PPUSH
10601: CALL_OW 69
10605: PUSH
10606: LD_INT 3
10608: GREATER
10609: IFFALSE 10626
10611: GO 10613
10613: DISABLE
// SayRadio ( AmScout , D4-FSol1-3 ) ;
10614: LD_EXP 18
10618: PPUSH
10619: LD_STRING D4-FSol1-3
10621: PPUSH
10622: CALL_OW 94
10626: END
// every 6 6$30 trigger joinEpsilon and LoadVariable ( 02_mikhailStatus_1 , 0 ) = 1 and FilterAllUnits ( [ f_side , 5 ] ) = 0 and ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] ] ) = 0 or arabianTrait = 0 ) do
10627: LD_EXP 31
10631: PUSH
10632: LD_STRING 02_mikhailStatus_1
10634: PPUSH
10635: LD_INT 0
10637: PPUSH
10638: CALL_OW 30
10642: PUSH
10643: LD_INT 1
10645: EQUAL
10646: AND
10647: PUSH
10648: LD_INT 22
10650: PUSH
10651: LD_INT 5
10653: PUSH
10654: EMPTY
10655: LIST
10656: LIST
10657: PPUSH
10658: CALL_OW 69
10662: PUSH
10663: LD_INT 0
10665: EQUAL
10666: AND
10667: PUSH
10668: LD_INT 22
10670: PUSH
10671: LD_INT 2
10673: PUSH
10674: EMPTY
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 21
10680: PUSH
10681: LD_INT 1
10683: PUSH
10684: EMPTY
10685: LIST
10686: LIST
10687: PUSH
10688: EMPTY
10689: LIST
10690: LIST
10691: PPUSH
10692: CALL_OW 69
10696: PUSH
10697: LD_INT 0
10699: EQUAL
10700: PUSH
10701: LD_EXP 51
10705: PUSH
10706: LD_INT 0
10708: EQUAL
10709: OR
10710: AND
10711: IFFALSE 10720
10713: GO 10715
10715: DISABLE
// PrepareCornell ;
10716: CALL 3529 0 0
10720: END
// every 0 0$1 trigger GetDistUnits ( NearestUnitToUnit ( FilterAllUnits ( [ f_side , 1 ] ) , Cornell ) , Cornell ) < 9 do
10721: LD_INT 22
10723: PUSH
10724: LD_INT 1
10726: PUSH
10727: EMPTY
10728: LIST
10729: LIST
10730: PPUSH
10731: CALL_OW 69
10735: PPUSH
10736: LD_EXP 20
10740: PPUSH
10741: CALL_OW 74
10745: PPUSH
10746: LD_EXP 20
10750: PPUSH
10751: CALL_OW 296
10755: PUSH
10756: LD_INT 9
10758: LESS
10759: IFFALSE 10980
10761: GO 10763
10763: DISABLE
// begin InGameOn ;
10764: CALL_OW 8
// CenterNowOnUnits ( Cornell ) ;
10768: LD_EXP 20
10772: PPUSH
10773: CALL_OW 87
// Say ( Cornell , D7-Corn-1 ) ;
10777: LD_EXP 20
10781: PPUSH
10782: LD_STRING D7-Corn-1
10784: PPUSH
10785: CALL_OW 88
// DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) , D7-Sol1-1 , D7-FSol1-1 ) ;
10789: LD_INT 22
10791: PUSH
10792: LD_INT 1
10794: PUSH
10795: EMPTY
10796: LIST
10797: LIST
10798: PUSH
10799: LD_INT 2
10801: PUSH
10802: LD_INT 25
10804: PUSH
10805: LD_INT 1
10807: PUSH
10808: EMPTY
10809: LIST
10810: LIST
10811: PUSH
10812: LD_INT 25
10814: PUSH
10815: LD_INT 2
10817: PUSH
10818: EMPTY
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 25
10824: PUSH
10825: LD_INT 3
10827: PUSH
10828: EMPTY
10829: LIST
10830: LIST
10831: PUSH
10832: LD_INT 25
10834: PUSH
10835: LD_INT 4
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: PUSH
10842: LD_INT 25
10844: PUSH
10845: LD_INT 5
10847: PUSH
10848: EMPTY
10849: LIST
10850: LIST
10851: PUSH
10852: EMPTY
10853: LIST
10854: LIST
10855: LIST
10856: LIST
10857: LIST
10858: LIST
10859: PUSH
10860: EMPTY
10861: LIST
10862: LIST
10863: PPUSH
10864: CALL_OW 69
10868: PPUSH
10869: LD_STRING D7-Sol1-1
10871: PPUSH
10872: LD_STRING D7-FSol1-1
10874: PPUSH
10875: CALL 11470 0 3
// CenterNowOnUnits ( Cornell ) ;
10879: LD_EXP 20
10883: PPUSH
10884: CALL_OW 87
// Say ( Cornell , D7-Corn-2 ) ;
10888: LD_EXP 20
10892: PPUSH
10893: LD_STRING D7-Corn-2
10895: PPUSH
10896: CALL_OW 88
// Say ( JMM , D7-JMM-2 ) ;
10900: LD_EXP 1
10904: PPUSH
10905: LD_STRING D7-JMM-2
10907: PPUSH
10908: CALL_OW 88
// CenterNowOnUnits ( Cornell ) ;
10912: LD_EXP 20
10916: PPUSH
10917: CALL_OW 87
// Say ( Cornell , D7-Corn-3 ) ;
10921: LD_EXP 20
10925: PPUSH
10926: LD_STRING D7-Corn-3
10928: PPUSH
10929: CALL_OW 88
// SetLives ( Cornell , 250 ) ;
10933: LD_EXP 20
10937: PPUSH
10938: LD_INT 250
10940: PPUSH
10941: CALL_OW 234
// SetSide ( Cornell , 1 ) ;
10945: LD_EXP 20
10949: PPUSH
10950: LD_INT 1
10952: PPUSH
10953: CALL_OW 235
// wait ( 0 0$1 ) ;
10957: LD_INT 35
10959: PPUSH
10960: CALL_OW 67
// Say ( JMM , D7-JMM-3 ) ;
10964: LD_EXP 1
10968: PPUSH
10969: LD_STRING D7-JMM-3
10971: PPUSH
10972: CALL_OW 88
// InGameOff ;
10976: CALL_OW 9
// end ;
10980: END
// every 0 0$05 trigger GetSide ( Cornell ) = 1 and GetLives ( Cornell ) > 350 do
10981: LD_EXP 20
10985: PPUSH
10986: CALL_OW 255
10990: PUSH
10991: LD_INT 1
10993: EQUAL
10994: PUSH
10995: LD_EXP 20
10999: PPUSH
11000: CALL_OW 256
11004: PUSH
11005: LD_INT 350
11007: GREATER
11008: AND
11009: IFFALSE 11202
11011: GO 11013
11013: DISABLE
// begin DialogueOn ;
11014: CALL_OW 6
// Say ( JMM , D7a-JMM-1 ) ;
11018: LD_EXP 1
11022: PPUSH
11023: LD_STRING D7a-JMM-1
11025: PPUSH
11026: CALL_OW 88
// Say ( Cornell , D7a-Corn-1 ) ;
11030: LD_EXP 20
11034: PPUSH
11035: LD_STRING D7a-Corn-1
11037: PPUSH
11038: CALL_OW 88
// Say ( JMM , D7a-JMM-2 ) ;
11042: LD_EXP 1
11046: PPUSH
11047: LD_STRING D7a-JMM-2
11049: PPUSH
11050: CALL_OW 88
// Say ( Cornell , D7a-Corn-2 ) ;
11054: LD_EXP 20
11058: PPUSH
11059: LD_STRING D7a-Corn-2
11061: PPUSH
11062: CALL_OW 88
// Say ( JMM , D7a-JMM-3 ) ;
11066: LD_EXP 1
11070: PPUSH
11071: LD_STRING D7a-JMM-3
11073: PPUSH
11074: CALL_OW 88
// Say ( Cornell , D7a-Corn-3 ) ;
11078: LD_EXP 20
11082: PPUSH
11083: LD_STRING D7a-Corn-3
11085: PPUSH
11086: CALL_OW 88
// Say ( JMM , D7a-JMM-4 ) ;
11090: LD_EXP 1
11094: PPUSH
11095: LD_STRING D7a-JMM-4
11097: PPUSH
11098: CALL_OW 88
// Say ( Cornell , D7a-Corn-4 ) ;
11102: LD_EXP 20
11106: PPUSH
11107: LD_STRING D7a-Corn-4
11109: PPUSH
11110: CALL_OW 88
// Say ( JMM , D7a-JMM-5 ) ;
11114: LD_EXP 1
11118: PPUSH
11119: LD_STRING D7a-JMM-5
11121: PPUSH
11122: CALL_OW 88
// Say ( Cornell , D7a-Corn-5 ) ;
11126: LD_EXP 20
11130: PPUSH
11131: LD_STRING D7a-Corn-5
11133: PPUSH
11134: CALL_OW 88
// Say ( JMM , D7a-JMM-6 ) ;
11138: LD_EXP 1
11142: PPUSH
11143: LD_STRING D7a-JMM-6
11145: PPUSH
11146: CALL_OW 88
// Say ( Cornell , D7a-Corn-6 ) ;
11150: LD_EXP 20
11154: PPUSH
11155: LD_STRING D7a-Corn-6
11157: PPUSH
11158: CALL_OW 88
// Say ( JMM , D7a-JMM-7 ) ;
11162: LD_EXP 1
11166: PPUSH
11167: LD_STRING D7a-JMM-7
11169: PPUSH
11170: CALL_OW 88
// Say ( Cornell , D7a-Corn-7 ) ;
11174: LD_EXP 20
11178: PPUSH
11179: LD_STRING D7a-Corn-7
11181: PPUSH
11182: CALL_OW 88
// Say ( JMM , D7a-JMM-8 ) ;
11186: LD_EXP 1
11190: PPUSH
11191: LD_STRING D7a-JMM-8
11193: PPUSH
11194: CALL_OW 88
// DialogueOff ;
11198: CALL_OW 7
// end ;
11202: END
// every 0 0$1 trigger telep_ru_dialog and ( IsOk ( JMM ) or IsOk ( Cyrus ) ) do
11203: LD_EXP 63
11207: PUSH
11208: LD_EXP 1
11212: PPUSH
11213: CALL_OW 302
11217: PUSH
11218: LD_EXP 5
11222: PPUSH
11223: CALL_OW 302
11227: OR
11228: AND
11229: IFFALSE 11319
11231: GO 11233
11233: DISABLE
// begin Wait ( 0 0$2 ) ;
11234: LD_INT 70
11236: PPUSH
11237: CALL_OW 67
// DialogueOn ;
11241: CALL_OW 6
// CenterNowOnXY ( telep_ru_dialog [ 1 ] , telep_ru_dialog [ 2 ] ) ;
11245: LD_EXP 63
11249: PUSH
11250: LD_INT 1
11252: ARRAY
11253: PPUSH
11254: LD_EXP 63
11258: PUSH
11259: LD_INT 2
11261: ARRAY
11262: PPUSH
11263: CALL_OW 86
// if IsOk ( Cyrus ) then
11267: LD_EXP 5
11271: PPUSH
11272: CALL_OW 302
11276: IFFALSE 11292
// Say ( Cyrus , D10-Cyrus-1 ) else
11278: LD_EXP 5
11282: PPUSH
11283: LD_STRING D10-Cyrus-1
11285: PPUSH
11286: CALL_OW 88
11290: GO 11315
// if IsOk ( JMM ) then
11292: LD_EXP 1
11296: PPUSH
11297: CALL_OW 302
11301: IFFALSE 11315
// Say ( JMM , D10-JMM-1 ) ;
11303: LD_EXP 1
11307: PPUSH
11308: LD_STRING D10-JMM-1
11310: PPUSH
11311: CALL_OW 88
// DialogueOff ;
11315: CALL_OW 7
// end ;
11319: END
// every 0 0$1 trigger GetTech ( tech_LasSight , 1 ) = state_researched do
11320: LD_INT 12
11322: PPUSH
11323: LD_INT 1
11325: PPUSH
11326: CALL_OW 321
11330: PUSH
11331: LD_INT 2
11333: EQUAL
11334: IFFALSE 11346
11336: GO 11338
11338: DISABLE
// ChangeMissionObjectives ( M2b ) ;
11339: LD_STRING M2b
11341: PPUSH
11342: CALL_OW 337
11346: END
// every 0 0$1 trigger GetTech ( tech_AI , 1 ) = state_researched do
11347: LD_INT 32
11349: PPUSH
11350: LD_INT 1
11352: PPUSH
11353: CALL_OW 321
11357: PUSH
11358: LD_INT 2
11360: EQUAL
11361: IFFALSE 11373
11363: GO 11365
11365: DISABLE
// ChangeMissionObjectives ( M2c ) ;
11366: LD_STRING M2c
11368: PPUSH
11369: CALL_OW 337
11373: END
// every 0 0$1 trigger arabianDefeated = 1 do
11374: LD_EXP 50
11378: PUSH
11379: LD_INT 1
11381: EQUAL
11382: IFFALSE 11394
11384: GO 11386
11386: DISABLE
// ChangeMissionObjectives ( M4a ) ;
11387: LD_STRING M4a
11389: PPUSH
11390: CALL_OW 337
11394: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched do
11395: LD_INT 54
11397: PPUSH
11398: LD_INT 1
11400: PPUSH
11401: CALL_OW 321
11405: PUSH
11406: LD_INT 2
11408: EQUAL
11409: PUSH
11410: LD_INT 55
11412: PPUSH
11413: LD_INT 1
11415: PPUSH
11416: CALL_OW 321
11420: PUSH
11421: LD_INT 2
11423: EQUAL
11424: AND
11425: PUSH
11426: LD_INT 21
11428: PPUSH
11429: LD_INT 1
11431: PPUSH
11432: CALL_OW 321
11436: PUSH
11437: LD_INT 2
11439: EQUAL
11440: AND
11441: PUSH
11442: LD_INT 22
11444: PPUSH
11445: LD_INT 1
11447: PPUSH
11448: CALL_OW 321
11452: PUSH
11453: LD_INT 2
11455: EQUAL
11456: AND
11457: IFFALSE 11469
11459: GO 11461
11461: DISABLE
// ChangeMissionObjectives ( M2a ) ; end_of_file
11462: LD_STRING M2a
11464: PPUSH
11465: CALL_OW 337
11469: END
// export function DialogRandom ( characters , dialogMID , dialogFID ) ; var i , rnd ; begin
11470: LD_INT 0
11472: PPUSH
11473: PPUSH
11474: PPUSH
// characters := characters diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Kikuchi , Houten , Gary , Simms , Denis , Joan , Khatam , Gladstone , Steve , DeltaDoctor , AmScout , Cornell , Powell ] ;
11475: LD_ADDR_VAR 0 1
11479: PUSH
11480: LD_VAR 0 1
11484: PUSH
11485: LD_EXP 1
11489: PUSH
11490: LD_EXP 2
11494: PUSH
11495: LD_EXP 3
11499: PUSH
11500: LD_EXP 4
11504: PUSH
11505: LD_EXP 5
11509: PUSH
11510: LD_EXP 6
11514: PUSH
11515: LD_EXP 7
11519: PUSH
11520: LD_EXP 8
11524: PUSH
11525: LD_EXP 9
11529: PUSH
11530: LD_EXP 10
11534: PUSH
11535: LD_EXP 11
11539: PUSH
11540: LD_EXP 12
11544: PUSH
11545: LD_EXP 13
11549: PUSH
11550: LD_EXP 14
11554: PUSH
11555: LD_EXP 15
11559: PUSH
11560: LD_EXP 16
11564: PUSH
11565: LD_EXP 17
11569: PUSH
11570: LD_EXP 18
11574: PUSH
11575: LD_EXP 20
11579: PUSH
11580: LD_EXP 26
11584: PUSH
11585: EMPTY
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: DIFF
11607: ST_TO_ADDR
// if not characters then
11608: LD_VAR 0 1
11612: NOT
11613: IFFALSE 11617
// exit ;
11615: GO 11763
// rnd = rand ( 1 , characters ) ;
11617: LD_ADDR_VAR 0 6
11621: PUSH
11622: LD_INT 1
11624: PPUSH
11625: LD_VAR 0 1
11629: PPUSH
11630: CALL_OW 12
11634: ST_TO_ADDR
// for i = 1 to characters do
11635: LD_ADDR_VAR 0 5
11639: PUSH
11640: DOUBLE
11641: LD_INT 1
11643: DEC
11644: ST_TO_ADDR
11645: LD_VAR 0 1
11649: PUSH
11650: FOR_TO
11651: IFFALSE 11761
// begin if i = rnd and GetSex ( characters [ i ] ) = 1 then
11653: LD_VAR 0 5
11657: PUSH
11658: LD_VAR 0 6
11662: EQUAL
11663: PUSH
11664: LD_VAR 0 1
11668: PUSH
11669: LD_VAR 0 5
11673: ARRAY
11674: PPUSH
11675: CALL_OW 258
11679: PUSH
11680: LD_INT 1
11682: EQUAL
11683: AND
11684: IFFALSE 11706
// Say ( characters [ i ] , dialogMID ) ;
11686: LD_VAR 0 1
11690: PUSH
11691: LD_VAR 0 5
11695: ARRAY
11696: PPUSH
11697: LD_VAR 0 2
11701: PPUSH
11702: CALL_OW 88
// if i = rnd and GetSex ( characters [ i ] ) = 2 then
11706: LD_VAR 0 5
11710: PUSH
11711: LD_VAR 0 6
11715: EQUAL
11716: PUSH
11717: LD_VAR 0 1
11721: PUSH
11722: LD_VAR 0 5
11726: ARRAY
11727: PPUSH
11728: CALL_OW 258
11732: PUSH
11733: LD_INT 2
11735: EQUAL
11736: AND
11737: IFFALSE 11759
// Say ( characters [ i ] , dialogFID ) ;
11739: LD_VAR 0 1
11743: PUSH
11744: LD_VAR 0 5
11748: ARRAY
11749: PPUSH
11750: LD_VAR 0 3
11754: PPUSH
11755: CALL_OW 88
// end ;
11759: GO 11650
11761: POP
11762: POP
// end ;
11763: LD_VAR 0 4
11767: RET
// export function EnchancedSaveCharacters ( charactersList , ident ) ; var i ; begin
11768: LD_INT 0
11770: PPUSH
11771: PPUSH
// for i in charactersList do
11772: LD_ADDR_VAR 0 4
11776: PUSH
11777: LD_VAR 0 1
11781: PUSH
11782: FOR_IN
11783: IFFALSE 11801
// SaveCharacters ( i , ident ) ;
11785: LD_VAR 0 4
11789: PPUSH
11790: LD_VAR 0 2
11794: PPUSH
11795: CALL_OW 38
11799: GO 11782
11801: POP
11802: POP
// end ;
11803: LD_VAR 0 3
11807: RET
// export function PrepareDifficulty ; begin
11808: LD_INT 0
11810: PPUSH
// if difficulty = 1 then
11811: LD_OWVAR 67
11815: PUSH
11816: LD_INT 1
11818: EQUAL
11819: IFFALSE 11863
// begin RuSolMinLevel = 3 ;
11821: LD_ADDR_EXP 38
11825: PUSH
11826: LD_INT 3
11828: ST_TO_ADDR
// RuSolMaxLevel = 5 ;
11829: LD_ADDR_EXP 39
11833: PUSH
11834: LD_INT 5
11836: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11837: LD_INT 51
11839: PPUSH
11840: LD_INT 6
11842: PPUSH
11843: LD_INT 2
11845: PPUSH
11846: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11850: LD_INT 51
11852: PPUSH
11853: LD_INT 5
11855: PPUSH
11856: LD_INT 2
11858: PPUSH
11859: CALL_OW 322
// end ; if difficulty = 2 then
11863: LD_OWVAR 67
11867: PUSH
11868: LD_INT 2
11870: EQUAL
11871: IFFALSE 11967
// begin RuSolMinLevel = 5 ;
11873: LD_ADDR_EXP 38
11877: PUSH
11878: LD_INT 5
11880: ST_TO_ADDR
// RuSolMaxLevel = 7 ;
11881: LD_ADDR_EXP 39
11885: PUSH
11886: LD_INT 7
11888: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11889: LD_INT 51
11891: PPUSH
11892: LD_INT 6
11894: PPUSH
11895: LD_INT 2
11897: PPUSH
11898: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
11902: LD_INT 57
11904: PPUSH
11905: LD_INT 6
11907: PPUSH
11908: LD_INT 2
11910: PPUSH
11911: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
11915: LD_INT 63
11917: PPUSH
11918: LD_INT 6
11920: PPUSH
11921: LD_INT 2
11923: PPUSH
11924: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
11928: LD_INT 51
11930: PPUSH
11931: LD_INT 5
11933: PPUSH
11934: LD_INT 2
11936: PPUSH
11937: CALL_OW 322
// SetTech ( tech_StimDrugs , 2 , state_researched ) ;
11941: LD_INT 5
11943: PPUSH
11944: LD_INT 2
11946: PPUSH
11947: LD_INT 2
11949: PPUSH
11950: CALL_OW 322
// SetTech ( tech_StimDrugs , 5 , state_researched ) ;
11954: LD_INT 5
11956: PPUSH
11957: LD_INT 5
11959: PPUSH
11960: LD_INT 2
11962: PPUSH
11963: CALL_OW 322
// end ; if difficulty >= 3 then
11967: LD_OWVAR 67
11971: PUSH
11972: LD_INT 3
11974: GREATEREQUAL
11975: IFFALSE 12123
// begin RuSolMinLevel = 6 ;
11977: LD_ADDR_EXP 38
11981: PUSH
11982: LD_INT 6
11984: ST_TO_ADDR
// RuSolMaxLevel = 8 ;
11985: LD_ADDR_EXP 39
11989: PUSH
11990: LD_INT 8
11992: ST_TO_ADDR
// SetTech ( tech_Weap1 , 6 , state_researched ) ;
11993: LD_INT 51
11995: PPUSH
11996: LD_INT 6
11998: PPUSH
11999: LD_INT 2
12001: PPUSH
12002: CALL_OW 322
// SetTech ( tech_Comp1 , 6 , state_researched ) ;
12006: LD_INT 57
12008: PPUSH
12009: LD_INT 6
12011: PPUSH
12012: LD_INT 2
12014: PPUSH
12015: CALL_OW 322
// SetTech ( tech_Weap2 , 6 , state_researched ) ;
12019: LD_INT 52
12021: PPUSH
12022: LD_INT 6
12024: PPUSH
12025: LD_INT 2
12027: PPUSH
12028: CALL_OW 322
// SetTech ( tech_Comp2 , 6 , state_researched ) ;
12032: LD_INT 58
12034: PPUSH
12035: LD_INT 6
12037: PPUSH
12038: LD_INT 2
12040: PPUSH
12041: CALL_OW 322
// SetTech ( tech_ST1 , 6 , state_researched ) ;
12045: LD_INT 63
12047: PPUSH
12048: LD_INT 6
12050: PPUSH
12051: LD_INT 2
12053: PPUSH
12054: CALL_OW 322
// SetTech ( tech_ST2 , 6 , state_researched ) ;
12058: LD_INT 64
12060: PPUSH
12061: LD_INT 6
12063: PPUSH
12064: LD_INT 2
12066: PPUSH
12067: CALL_OW 322
// SetTech ( tech_Weap1 , 5 , state_researched ) ;
12071: LD_INT 51
12073: PPUSH
12074: LD_INT 5
12076: PPUSH
12077: LD_INT 2
12079: PPUSH
12080: CALL_OW 322
// SetTech ( tech_Weap2 , 5 , state_researched ) ;
12084: LD_INT 52
12086: PPUSH
12087: LD_INT 5
12089: PPUSH
12090: LD_INT 2
12092: PPUSH
12093: CALL_OW 322
// SetTech ( tech_Bio1 , 2 , state_researched ) ;
12097: LD_INT 66
12099: PPUSH
12100: LD_INT 2
12102: PPUSH
12103: LD_INT 2
12105: PPUSH
12106: CALL_OW 322
// SetTech ( tech_Bio1 , 5 , state_researched ) ;
12110: LD_INT 66
12112: PPUSH
12113: LD_INT 5
12115: PPUSH
12116: LD_INT 2
12118: PPUSH
12119: CALL_OW 322
// end ; end ;
12123: LD_VAR 0 1
12127: RET
// export function BuildRussianBase ( position ) ; var i , engineers , buildingsTab , area , sources ; begin
12128: LD_INT 0
12130: PPUSH
12131: PPUSH
12132: PPUSH
12133: PPUSH
12134: PPUSH
12135: PPUSH
// sources := [ [ 43 , 68 ] , [ 43 , 79 ] , [ 99 , 114 ] , [ 103 , 114 ] , [ 156 , 92 ] , [ 152 , 85 ] ] ;
12136: LD_ADDR_VAR 0 7
12140: PUSH
12141: LD_INT 43
12143: PUSH
12144: LD_INT 68
12146: PUSH
12147: EMPTY
12148: LIST
12149: LIST
12150: PUSH
12151: LD_INT 43
12153: PUSH
12154: LD_INT 79
12156: PUSH
12157: EMPTY
12158: LIST
12159: LIST
12160: PUSH
12161: LD_INT 99
12163: PUSH
12164: LD_INT 114
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 103
12173: PUSH
12174: LD_INT 114
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: LD_INT 156
12183: PUSH
12184: LD_INT 92
12186: PUSH
12187: EMPTY
12188: LIST
12189: LIST
12190: PUSH
12191: LD_INT 152
12193: PUSH
12194: LD_INT 85
12196: PUSH
12197: EMPTY
12198: LIST
12199: LIST
12200: PUSH
12201: EMPTY
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: ST_TO_ADDR
// for i in sources do
12209: LD_ADDR_VAR 0 3
12213: PUSH
12214: LD_VAR 0 7
12218: PUSH
12219: FOR_IN
12220: IFFALSE 12249
// SetResourceVisibility ( i [ 1 ] , i [ 2 ] , 3 ) ;
12222: LD_VAR 0 3
12226: PUSH
12227: LD_INT 1
12229: ARRAY
12230: PPUSH
12231: LD_VAR 0 3
12235: PUSH
12236: LD_INT 2
12238: ARRAY
12239: PPUSH
12240: LD_INT 3
12242: PPUSH
12243: CALL_OW 441
12247: GO 12219
12249: POP
12250: POP
// case position of 1 :
12251: LD_VAR 0 1
12255: PUSH
12256: LD_INT 1
12258: DOUBLE
12259: EQUAL
12260: IFTRUE 12264
12262: GO 12275
12264: POP
// area := westConv ; 2 :
12265: LD_ADDR_VAR 0 6
12269: PUSH
12270: LD_INT 20
12272: ST_TO_ADDR
12273: GO 12314
12275: LD_INT 2
12277: DOUBLE
12278: EQUAL
12279: IFTRUE 12283
12281: GO 12294
12283: POP
// area := midConv ; 3 :
12284: LD_ADDR_VAR 0 6
12288: PUSH
12289: LD_INT 21
12291: ST_TO_ADDR
12292: GO 12314
12294: LD_INT 3
12296: DOUBLE
12297: EQUAL
12298: IFTRUE 12302
12300: GO 12313
12302: POP
// area := eastConv ; end ;
12303: LD_ADDR_VAR 0 6
12307: PUSH
12308: LD_INT 22
12310: ST_TO_ADDR
12311: GO 12314
12313: POP
// area := AreaToList ( area , 0 ) ;
12314: LD_ADDR_VAR 0 6
12318: PUSH
12319: LD_VAR 0 6
12323: PPUSH
12324: LD_INT 0
12326: PPUSH
12327: CALL_OW 517
12331: ST_TO_ADDR
// for i = 1 to area [ 1 ] do
12332: LD_ADDR_VAR 0 3
12336: PUSH
12337: DOUBLE
12338: LD_INT 1
12340: DEC
12341: ST_TO_ADDR
12342: LD_VAR 0 6
12346: PUSH
12347: LD_INT 1
12349: ARRAY
12350: PUSH
12351: FOR_TO
12352: IFFALSE 12433
// begin PlaceSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 , 1 ) ;
12354: LD_VAR 0 6
12358: PUSH
12359: LD_INT 1
12361: ARRAY
12362: PUSH
12363: LD_VAR 0 3
12367: ARRAY
12368: PPUSH
12369: LD_VAR 0 6
12373: PUSH
12374: LD_INT 2
12376: ARRAY
12377: PUSH
12378: LD_VAR 0 3
12382: ARRAY
12383: PPUSH
12384: LD_INT 1
12386: PPUSH
12387: LD_INT 1
12389: PPUSH
12390: CALL_OW 330
// RemoveSeeing ( area [ 1 ] [ i ] , area [ 2 ] [ i ] , 1 ) ;
12394: LD_VAR 0 6
12398: PUSH
12399: LD_INT 1
12401: ARRAY
12402: PUSH
12403: LD_VAR 0 3
12407: ARRAY
12408: PPUSH
12409: LD_VAR 0 6
12413: PUSH
12414: LD_INT 2
12416: ARRAY
12417: PUSH
12418: LD_VAR 0 3
12422: ARRAY
12423: PPUSH
12424: LD_INT 1
12426: PPUSH
12427: CALL_OW 331
// end ;
12431: GO 12351
12433: POP
12434: POP
// ruPossition = position ;
12435: LD_ADDR_EXP 43
12439: PUSH
12440: LD_VAR 0 1
12444: ST_TO_ADDR
// if position = 1 then
12445: LD_VAR 0 1
12449: PUSH
12450: LD_INT 1
12452: EQUAL
12453: IFFALSE 13201
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12455: LD_ADDR_VAR 0 4
12459: PUSH
12460: LD_INT 22
12462: PUSH
12463: LD_INT 3
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: LD_INT 25
12472: PUSH
12473: LD_INT 2
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: PPUSH
12484: CALL_OW 69
12488: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 49 , 74 , 3 ] , [ b_armoury , 73 , 88 , 5 ] , [ b_armoury , 56 , 62 , 3 ] , [ b_oil_mine , 43 , 68 , 2 ] , [ b_siberite_mine , 43 , 79 , 5 ] , [ b_siberite_power , 60 , 75 , 1 ] , [ b_workshop , 50 , 87 , 1 ] , [ b_siberite_power , 45 , 67 , 2 ] , [ b_ext_gun , 47 , 84 , 2 ] , [ b_ext_rocket , 46 , 87 , 1 ] , [ b_siberite_power , 41 , 64 , 5 ] , [ b_bunker , 75 , 76 , 5 ] , [ b_bunker , 77 , 75 , 5 ] , [ b_bunker , 69 , 68 , 3 ] , [ b_bunker , 59 , 96 , 5 ] , [ b_bunker , 56 , 96 , 0 ] , [ b_bunker , 51 , 61 , 3 ] , [ b_bunker , 42 , 60 , 3 ] , [ b_bunker , 36 , 58 , 3 ] , [ b_bunker , 39 , 59 , 3 ] , [ b_bunker , 61 , 64 , 3 ] , [ b_turret , 63 , 90 , 5 ] , [ b_turret , 64 , 88 , 5 ] , [ b_turret , 72 , 82 , 5 ] , [ b_lab , 42 , 74 , 1 ] , [ b_lab , 56 , 77 , 2 ] , [ b_ext_siberium , 54 , 91 , 5 ] , [ b_ext_track , 50 , 83 , 3 ] , [ b_ext_computer , 50 , 90 , 0 ] ] ;
12489: LD_ADDR_VAR 0 5
12493: PUSH
12494: LD_INT 0
12496: PUSH
12497: LD_INT 49
12499: PUSH
12500: LD_INT 74
12502: PUSH
12503: LD_INT 3
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: PUSH
12512: LD_INT 4
12514: PUSH
12515: LD_INT 73
12517: PUSH
12518: LD_INT 88
12520: PUSH
12521: LD_INT 5
12523: PUSH
12524: EMPTY
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: PUSH
12530: LD_INT 4
12532: PUSH
12533: LD_INT 56
12535: PUSH
12536: LD_INT 62
12538: PUSH
12539: LD_INT 3
12541: PUSH
12542: EMPTY
12543: LIST
12544: LIST
12545: LIST
12546: LIST
12547: PUSH
12548: LD_INT 29
12550: PUSH
12551: LD_INT 43
12553: PUSH
12554: LD_INT 68
12556: PUSH
12557: LD_INT 2
12559: PUSH
12560: EMPTY
12561: LIST
12562: LIST
12563: LIST
12564: LIST
12565: PUSH
12566: LD_INT 30
12568: PUSH
12569: LD_INT 43
12571: PUSH
12572: LD_INT 79
12574: PUSH
12575: LD_INT 5
12577: PUSH
12578: EMPTY
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: PUSH
12584: LD_INT 28
12586: PUSH
12587: LD_INT 60
12589: PUSH
12590: LD_INT 75
12592: PUSH
12593: LD_INT 1
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: PUSH
12602: LD_INT 2
12604: PUSH
12605: LD_INT 50
12607: PUSH
12608: LD_INT 87
12610: PUSH
12611: LD_INT 1
12613: PUSH
12614: EMPTY
12615: LIST
12616: LIST
12617: LIST
12618: LIST
12619: PUSH
12620: LD_INT 28
12622: PUSH
12623: LD_INT 45
12625: PUSH
12626: LD_INT 67
12628: PUSH
12629: LD_INT 2
12631: PUSH
12632: EMPTY
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: PUSH
12638: LD_INT 17
12640: PUSH
12641: LD_INT 47
12643: PUSH
12644: LD_INT 84
12646: PUSH
12647: LD_INT 2
12649: PUSH
12650: EMPTY
12651: LIST
12652: LIST
12653: LIST
12654: LIST
12655: PUSH
12656: LD_INT 18
12658: PUSH
12659: LD_INT 46
12661: PUSH
12662: LD_INT 87
12664: PUSH
12665: LD_INT 1
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: PUSH
12674: LD_INT 28
12676: PUSH
12677: LD_INT 41
12679: PUSH
12680: LD_INT 64
12682: PUSH
12683: LD_INT 5
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: PUSH
12692: LD_INT 32
12694: PUSH
12695: LD_INT 75
12697: PUSH
12698: LD_INT 76
12700: PUSH
12701: LD_INT 5
12703: PUSH
12704: EMPTY
12705: LIST
12706: LIST
12707: LIST
12708: LIST
12709: PUSH
12710: LD_INT 32
12712: PUSH
12713: LD_INT 77
12715: PUSH
12716: LD_INT 75
12718: PUSH
12719: LD_INT 5
12721: PUSH
12722: EMPTY
12723: LIST
12724: LIST
12725: LIST
12726: LIST
12727: PUSH
12728: LD_INT 32
12730: PUSH
12731: LD_INT 69
12733: PUSH
12734: LD_INT 68
12736: PUSH
12737: LD_INT 3
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: LIST
12744: LIST
12745: PUSH
12746: LD_INT 32
12748: PUSH
12749: LD_INT 59
12751: PUSH
12752: LD_INT 96
12754: PUSH
12755: LD_INT 5
12757: PUSH
12758: EMPTY
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: PUSH
12764: LD_INT 32
12766: PUSH
12767: LD_INT 56
12769: PUSH
12770: LD_INT 96
12772: PUSH
12773: LD_INT 0
12775: PUSH
12776: EMPTY
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: PUSH
12782: LD_INT 32
12784: PUSH
12785: LD_INT 51
12787: PUSH
12788: LD_INT 61
12790: PUSH
12791: LD_INT 3
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: PUSH
12800: LD_INT 32
12802: PUSH
12803: LD_INT 42
12805: PUSH
12806: LD_INT 60
12808: PUSH
12809: LD_INT 3
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: PUSH
12818: LD_INT 32
12820: PUSH
12821: LD_INT 36
12823: PUSH
12824: LD_INT 58
12826: PUSH
12827: LD_INT 3
12829: PUSH
12830: EMPTY
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: PUSH
12836: LD_INT 32
12838: PUSH
12839: LD_INT 39
12841: PUSH
12842: LD_INT 59
12844: PUSH
12845: LD_INT 3
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: LIST
12852: LIST
12853: PUSH
12854: LD_INT 32
12856: PUSH
12857: LD_INT 61
12859: PUSH
12860: LD_INT 64
12862: PUSH
12863: LD_INT 3
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: PUSH
12872: LD_INT 33
12874: PUSH
12875: LD_INT 63
12877: PUSH
12878: LD_INT 90
12880: PUSH
12881: LD_INT 5
12883: PUSH
12884: EMPTY
12885: LIST
12886: LIST
12887: LIST
12888: LIST
12889: PUSH
12890: LD_INT 33
12892: PUSH
12893: LD_INT 64
12895: PUSH
12896: LD_INT 88
12898: PUSH
12899: LD_INT 5
12901: PUSH
12902: EMPTY
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: PUSH
12908: LD_INT 33
12910: PUSH
12911: LD_INT 72
12913: PUSH
12914: LD_INT 82
12916: PUSH
12917: LD_INT 5
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: LIST
12924: LIST
12925: PUSH
12926: LD_INT 6
12928: PUSH
12929: LD_INT 42
12931: PUSH
12932: LD_INT 74
12934: PUSH
12935: LD_INT 1
12937: PUSH
12938: EMPTY
12939: LIST
12940: LIST
12941: LIST
12942: LIST
12943: PUSH
12944: LD_INT 6
12946: PUSH
12947: LD_INT 56
12949: PUSH
12950: LD_INT 77
12952: PUSH
12953: LD_INT 2
12955: PUSH
12956: EMPTY
12957: LIST
12958: LIST
12959: LIST
12960: LIST
12961: PUSH
12962: LD_INT 21
12964: PUSH
12965: LD_INT 54
12967: PUSH
12968: LD_INT 91
12970: PUSH
12971: LD_INT 5
12973: PUSH
12974: EMPTY
12975: LIST
12976: LIST
12977: LIST
12978: LIST
12979: PUSH
12980: LD_INT 16
12982: PUSH
12983: LD_INT 50
12985: PUSH
12986: LD_INT 83
12988: PUSH
12989: LD_INT 3
12991: PUSH
12992: EMPTY
12993: LIST
12994: LIST
12995: LIST
12996: LIST
12997: PUSH
12998: LD_INT 24
13000: PUSH
13001: LD_INT 50
13003: PUSH
13004: LD_INT 90
13006: PUSH
13007: LD_INT 0
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: PUSH
13016: EMPTY
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: LIST
13046: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13047: LD_ADDR_VAR 0 3
13051: PUSH
13052: LD_INT 22
13054: PUSH
13055: LD_INT 3
13057: PUSH
13058: EMPTY
13059: LIST
13060: LIST
13061: PUSH
13062: LD_INT 3
13064: PUSH
13065: LD_INT 25
13067: PUSH
13068: LD_INT 2
13070: PUSH
13071: EMPTY
13072: LIST
13073: LIST
13074: PUSH
13075: EMPTY
13076: LIST
13077: LIST
13078: PUSH
13079: EMPTY
13080: LIST
13081: LIST
13082: PPUSH
13083: CALL_OW 69
13087: PUSH
13088: FOR_IN
13089: IFFALSE 13108
// AddComAgressiveMove ( i , 53 , 82 ) ;
13091: LD_VAR 0 3
13095: PPUSH
13096: LD_INT 53
13098: PPUSH
13099: LD_INT 82
13101: PPUSH
13102: CALL_OW 174
13106: GO 13088
13108: POP
13109: POP
// for i := 1 to buildingsTab do
13110: LD_ADDR_VAR 0 3
13114: PUSH
13115: DOUBLE
13116: LD_INT 1
13118: DEC
13119: ST_TO_ADDR
13120: LD_VAR 0 5
13124: PUSH
13125: FOR_TO
13126: IFFALSE 13199
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13128: LD_VAR 0 4
13132: PPUSH
13133: LD_VAR 0 5
13137: PUSH
13138: LD_VAR 0 3
13142: ARRAY
13143: PUSH
13144: LD_INT 1
13146: ARRAY
13147: PPUSH
13148: LD_VAR 0 5
13152: PUSH
13153: LD_VAR 0 3
13157: ARRAY
13158: PUSH
13159: LD_INT 2
13161: ARRAY
13162: PPUSH
13163: LD_VAR 0 5
13167: PUSH
13168: LD_VAR 0 3
13172: ARRAY
13173: PUSH
13174: LD_INT 3
13176: ARRAY
13177: PPUSH
13178: LD_VAR 0 5
13182: PUSH
13183: LD_VAR 0 3
13187: ARRAY
13188: PUSH
13189: LD_INT 4
13191: ARRAY
13192: PPUSH
13193: CALL_OW 205
13197: GO 13125
13199: POP
13200: POP
// end ; if position = 2 then
13201: LD_VAR 0 1
13205: PUSH
13206: LD_INT 2
13208: EQUAL
13209: IFFALSE 13824
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13211: LD_ADDR_VAR 0 4
13215: PUSH
13216: LD_INT 22
13218: PUSH
13219: LD_INT 3
13221: PUSH
13222: EMPTY
13223: LIST
13224: LIST
13225: PUSH
13226: LD_INT 25
13228: PUSH
13229: LD_INT 2
13231: PUSH
13232: EMPTY
13233: LIST
13234: LIST
13235: PUSH
13236: EMPTY
13237: LIST
13238: LIST
13239: PPUSH
13240: CALL_OW 69
13244: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 104 , 110 , 5 ] , [ b_armoury , 98 , 90 , 3 ] , [ b_oil_mine , 103 , 114 , 2 ] , [ b_siberite_mine , 99 , 114 , 3 ] , [ b_siberite_power , 100 , 112 , 1 ] , [ b_workshop , 92 , 101 , 0 ] , [ b_siberite_power , 97 , 116 , 5 ] , [ b_ext_gun , 96 , 101 , 4 ] , [ b_ext_rocket , 88 , 97 , 2 ] , [ b_siberite_power , 106 , 92 , 2 ] , [ b_bunker , 88 , 89 , 2 ] , [ b_bunker , 86 , 90 , 2 ] , [ b_bunker , 85 , 99 , 2 ] , [ b_bunker , 85 , 107 , 1 ] , [ b_turret , 105 , 99 , 1 ] , [ b_turret , 102 , 92 , 3 ] , [ b_turret , 105 , 92 , 2 ] , [ b_lab , 92 , 110 , 0 ] , [ b_lab , 103 , 103 , 5 ] , [ b_ext_siberium , 89 , 101 , 1 ] , [ b_ext_track , 95 , 104 , 4 ] , [ b_ext_computer , 92 , 105 , 0 ] ] ;
13245: LD_ADDR_VAR 0 5
13249: PUSH
13250: LD_INT 0
13252: PUSH
13253: LD_INT 104
13255: PUSH
13256: LD_INT 110
13258: PUSH
13259: LD_INT 5
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: PUSH
13268: LD_INT 4
13270: PUSH
13271: LD_INT 98
13273: PUSH
13274: LD_INT 90
13276: PUSH
13277: LD_INT 3
13279: PUSH
13280: EMPTY
13281: LIST
13282: LIST
13283: LIST
13284: LIST
13285: PUSH
13286: LD_INT 29
13288: PUSH
13289: LD_INT 103
13291: PUSH
13292: LD_INT 114
13294: PUSH
13295: LD_INT 2
13297: PUSH
13298: EMPTY
13299: LIST
13300: LIST
13301: LIST
13302: LIST
13303: PUSH
13304: LD_INT 30
13306: PUSH
13307: LD_INT 99
13309: PUSH
13310: LD_INT 114
13312: PUSH
13313: LD_INT 3
13315: PUSH
13316: EMPTY
13317: LIST
13318: LIST
13319: LIST
13320: LIST
13321: PUSH
13322: LD_INT 28
13324: PUSH
13325: LD_INT 100
13327: PUSH
13328: LD_INT 112
13330: PUSH
13331: LD_INT 1
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: PUSH
13340: LD_INT 2
13342: PUSH
13343: LD_INT 92
13345: PUSH
13346: LD_INT 101
13348: PUSH
13349: LD_INT 0
13351: PUSH
13352: EMPTY
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: PUSH
13358: LD_INT 28
13360: PUSH
13361: LD_INT 97
13363: PUSH
13364: LD_INT 116
13366: PUSH
13367: LD_INT 5
13369: PUSH
13370: EMPTY
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: PUSH
13376: LD_INT 17
13378: PUSH
13379: LD_INT 96
13381: PUSH
13382: LD_INT 101
13384: PUSH
13385: LD_INT 4
13387: PUSH
13388: EMPTY
13389: LIST
13390: LIST
13391: LIST
13392: LIST
13393: PUSH
13394: LD_INT 18
13396: PUSH
13397: LD_INT 88
13399: PUSH
13400: LD_INT 97
13402: PUSH
13403: LD_INT 2
13405: PUSH
13406: EMPTY
13407: LIST
13408: LIST
13409: LIST
13410: LIST
13411: PUSH
13412: LD_INT 28
13414: PUSH
13415: LD_INT 106
13417: PUSH
13418: LD_INT 92
13420: PUSH
13421: LD_INT 2
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: LIST
13428: LIST
13429: PUSH
13430: LD_INT 32
13432: PUSH
13433: LD_INT 88
13435: PUSH
13436: LD_INT 89
13438: PUSH
13439: LD_INT 2
13441: PUSH
13442: EMPTY
13443: LIST
13444: LIST
13445: LIST
13446: LIST
13447: PUSH
13448: LD_INT 32
13450: PUSH
13451: LD_INT 86
13453: PUSH
13454: LD_INT 90
13456: PUSH
13457: LD_INT 2
13459: PUSH
13460: EMPTY
13461: LIST
13462: LIST
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 32
13468: PUSH
13469: LD_INT 85
13471: PUSH
13472: LD_INT 99
13474: PUSH
13475: LD_INT 2
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: PUSH
13484: LD_INT 32
13486: PUSH
13487: LD_INT 85
13489: PUSH
13490: LD_INT 107
13492: PUSH
13493: LD_INT 1
13495: PUSH
13496: EMPTY
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: PUSH
13502: LD_INT 33
13504: PUSH
13505: LD_INT 105
13507: PUSH
13508: LD_INT 99
13510: PUSH
13511: LD_INT 1
13513: PUSH
13514: EMPTY
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: PUSH
13520: LD_INT 33
13522: PUSH
13523: LD_INT 102
13525: PUSH
13526: LD_INT 92
13528: PUSH
13529: LD_INT 3
13531: PUSH
13532: EMPTY
13533: LIST
13534: LIST
13535: LIST
13536: LIST
13537: PUSH
13538: LD_INT 33
13540: PUSH
13541: LD_INT 105
13543: PUSH
13544: LD_INT 92
13546: PUSH
13547: LD_INT 2
13549: PUSH
13550: EMPTY
13551: LIST
13552: LIST
13553: LIST
13554: LIST
13555: PUSH
13556: LD_INT 6
13558: PUSH
13559: LD_INT 92
13561: PUSH
13562: LD_INT 110
13564: PUSH
13565: LD_INT 0
13567: PUSH
13568: EMPTY
13569: LIST
13570: LIST
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 6
13576: PUSH
13577: LD_INT 103
13579: PUSH
13580: LD_INT 103
13582: PUSH
13583: LD_INT 5
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: LIST
13590: LIST
13591: PUSH
13592: LD_INT 21
13594: PUSH
13595: LD_INT 89
13597: PUSH
13598: LD_INT 101
13600: PUSH
13601: LD_INT 1
13603: PUSH
13604: EMPTY
13605: LIST
13606: LIST
13607: LIST
13608: LIST
13609: PUSH
13610: LD_INT 16
13612: PUSH
13613: LD_INT 95
13615: PUSH
13616: LD_INT 104
13618: PUSH
13619: LD_INT 4
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: LIST
13626: LIST
13627: PUSH
13628: LD_INT 24
13630: PUSH
13631: LD_INT 92
13633: PUSH
13634: LD_INT 105
13636: PUSH
13637: LD_INT 0
13639: PUSH
13640: EMPTY
13641: LIST
13642: LIST
13643: LIST
13644: LIST
13645: PUSH
13646: EMPTY
13647: LIST
13648: LIST
13649: LIST
13650: LIST
13651: LIST
13652: LIST
13653: LIST
13654: LIST
13655: LIST
13656: LIST
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: LIST
13663: LIST
13664: LIST
13665: LIST
13666: LIST
13667: LIST
13668: LIST
13669: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
13670: LD_ADDR_VAR 0 3
13674: PUSH
13675: LD_INT 22
13677: PUSH
13678: LD_INT 3
13680: PUSH
13681: EMPTY
13682: LIST
13683: LIST
13684: PUSH
13685: LD_INT 3
13687: PUSH
13688: LD_INT 25
13690: PUSH
13691: LD_INT 2
13693: PUSH
13694: EMPTY
13695: LIST
13696: LIST
13697: PUSH
13698: EMPTY
13699: LIST
13700: LIST
13701: PUSH
13702: EMPTY
13703: LIST
13704: LIST
13705: PPUSH
13706: CALL_OW 69
13710: PUSH
13711: FOR_IN
13712: IFFALSE 13731
// AddComAgressiveMove ( i , 96 , 99 ) ;
13714: LD_VAR 0 3
13718: PPUSH
13719: LD_INT 96
13721: PPUSH
13722: LD_INT 99
13724: PPUSH
13725: CALL_OW 174
13729: GO 13711
13731: POP
13732: POP
// for i := 1 to buildingsTab do
13733: LD_ADDR_VAR 0 3
13737: PUSH
13738: DOUBLE
13739: LD_INT 1
13741: DEC
13742: ST_TO_ADDR
13743: LD_VAR 0 5
13747: PUSH
13748: FOR_TO
13749: IFFALSE 13822
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
13751: LD_VAR 0 4
13755: PPUSH
13756: LD_VAR 0 5
13760: PUSH
13761: LD_VAR 0 3
13765: ARRAY
13766: PUSH
13767: LD_INT 1
13769: ARRAY
13770: PPUSH
13771: LD_VAR 0 5
13775: PUSH
13776: LD_VAR 0 3
13780: ARRAY
13781: PUSH
13782: LD_INT 2
13784: ARRAY
13785: PPUSH
13786: LD_VAR 0 5
13790: PUSH
13791: LD_VAR 0 3
13795: ARRAY
13796: PUSH
13797: LD_INT 3
13799: ARRAY
13800: PPUSH
13801: LD_VAR 0 5
13805: PUSH
13806: LD_VAR 0 3
13810: ARRAY
13811: PUSH
13812: LD_INT 4
13814: ARRAY
13815: PPUSH
13816: CALL_OW 205
13820: GO 13748
13822: POP
13823: POP
// end ; if position = 3 then
13824: LD_VAR 0 1
13828: PUSH
13829: LD_INT 3
13831: EQUAL
13832: IFFALSE 14618
// begin engineers = FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
13834: LD_ADDR_VAR 0 4
13838: PUSH
13839: LD_INT 22
13841: PUSH
13842: LD_INT 3
13844: PUSH
13845: EMPTY
13846: LIST
13847: LIST
13848: PUSH
13849: LD_INT 25
13851: PUSH
13852: LD_INT 2
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PUSH
13859: EMPTY
13860: LIST
13861: LIST
13862: PPUSH
13863: CALL_OW 69
13867: ST_TO_ADDR
// buildingsTab = [ [ b_depot , 151 , 71 , 4 ] , [ b_armoury , 145 , 53 , 3 ] , [ b_armoury , 172 , 102 , 5 ] , [ b_oil_mine , 152 , 85 , 3 ] , [ b_siberite_mine , 156 , 92 , 3 ] , [ b_siberite_power , 151 , 66 , 4 ] , [ b_workshop , 163 , 95 , 5 ] , [ b_siberite_power , 149 , 63 , 4 ] , [ b_ext_gun , 167 , 99 , 5 ] , [ b_ext_rocket , 163 , 98 , 0 ] , [ b_siberite_power , 154 , 70 , 4 ] , [ b_bunker , 155 , 62 , 4 ] , [ b_bunker , 161 , 69 , 4 ] , [ b_bunker , 168 , 78 , 4 ] , [ b_bunker , 163 , 80 , 5 ] , [ b_bunker , 136 , 73 , 0 ] , [ b_bunker , 157 , 98 , 0 ] , [ b_bunker , 150 , 87 , 1 ] , [ b_turret , 171 , 97 , 4 ] , [ b_turret , 168 , 92 , 4 ] , [ b_turret , 166 , 80 , 5 ] , [ b_turret , 141 , 54 , 2 ] , [ b_turret , 133 , 57 , 2 ] , [ b_turret , 132 , 61 , 2 ] , [ b_turret , 150 , 82 , 0 ] , [ b_turret , 132 , 72 , 0 ] , [ b_lab , 146 , 64 , 4 ] , [ b_lab , 159 , 85 , 4 ] , [ b_ext_siberium , 163 , 91 , 3 ] , [ b_ext_track , 166 , 95 , 4 ] , [ b_ext_computer , 159 , 95 , 1 ] ] ;
13868: LD_ADDR_VAR 0 5
13872: PUSH
13873: LD_INT 0
13875: PUSH
13876: LD_INT 151
13878: PUSH
13879: LD_INT 71
13881: PUSH
13882: LD_INT 4
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: LIST
13889: LIST
13890: PUSH
13891: LD_INT 4
13893: PUSH
13894: LD_INT 145
13896: PUSH
13897: LD_INT 53
13899: PUSH
13900: LD_INT 3
13902: PUSH
13903: EMPTY
13904: LIST
13905: LIST
13906: LIST
13907: LIST
13908: PUSH
13909: LD_INT 4
13911: PUSH
13912: LD_INT 172
13914: PUSH
13915: LD_INT 102
13917: PUSH
13918: LD_INT 5
13920: PUSH
13921: EMPTY
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: PUSH
13927: LD_INT 29
13929: PUSH
13930: LD_INT 152
13932: PUSH
13933: LD_INT 85
13935: PUSH
13936: LD_INT 3
13938: PUSH
13939: EMPTY
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: PUSH
13945: LD_INT 30
13947: PUSH
13948: LD_INT 156
13950: PUSH
13951: LD_INT 92
13953: PUSH
13954: LD_INT 3
13956: PUSH
13957: EMPTY
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: PUSH
13963: LD_INT 28
13965: PUSH
13966: LD_INT 151
13968: PUSH
13969: LD_INT 66
13971: PUSH
13972: LD_INT 4
13974: PUSH
13975: EMPTY
13976: LIST
13977: LIST
13978: LIST
13979: LIST
13980: PUSH
13981: LD_INT 2
13983: PUSH
13984: LD_INT 163
13986: PUSH
13987: LD_INT 95
13989: PUSH
13990: LD_INT 5
13992: PUSH
13993: EMPTY
13994: LIST
13995: LIST
13996: LIST
13997: LIST
13998: PUSH
13999: LD_INT 28
14001: PUSH
14002: LD_INT 149
14004: PUSH
14005: LD_INT 63
14007: PUSH
14008: LD_INT 4
14010: PUSH
14011: EMPTY
14012: LIST
14013: LIST
14014: LIST
14015: LIST
14016: PUSH
14017: LD_INT 17
14019: PUSH
14020: LD_INT 167
14022: PUSH
14023: LD_INT 99
14025: PUSH
14026: LD_INT 5
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: PUSH
14035: LD_INT 18
14037: PUSH
14038: LD_INT 163
14040: PUSH
14041: LD_INT 98
14043: PUSH
14044: LD_INT 0
14046: PUSH
14047: EMPTY
14048: LIST
14049: LIST
14050: LIST
14051: LIST
14052: PUSH
14053: LD_INT 28
14055: PUSH
14056: LD_INT 154
14058: PUSH
14059: LD_INT 70
14061: PUSH
14062: LD_INT 4
14064: PUSH
14065: EMPTY
14066: LIST
14067: LIST
14068: LIST
14069: LIST
14070: PUSH
14071: LD_INT 32
14073: PUSH
14074: LD_INT 155
14076: PUSH
14077: LD_INT 62
14079: PUSH
14080: LD_INT 4
14082: PUSH
14083: EMPTY
14084: LIST
14085: LIST
14086: LIST
14087: LIST
14088: PUSH
14089: LD_INT 32
14091: PUSH
14092: LD_INT 161
14094: PUSH
14095: LD_INT 69
14097: PUSH
14098: LD_INT 4
14100: PUSH
14101: EMPTY
14102: LIST
14103: LIST
14104: LIST
14105: LIST
14106: PUSH
14107: LD_INT 32
14109: PUSH
14110: LD_INT 168
14112: PUSH
14113: LD_INT 78
14115: PUSH
14116: LD_INT 4
14118: PUSH
14119: EMPTY
14120: LIST
14121: LIST
14122: LIST
14123: LIST
14124: PUSH
14125: LD_INT 32
14127: PUSH
14128: LD_INT 163
14130: PUSH
14131: LD_INT 80
14133: PUSH
14134: LD_INT 5
14136: PUSH
14137: EMPTY
14138: LIST
14139: LIST
14140: LIST
14141: LIST
14142: PUSH
14143: LD_INT 32
14145: PUSH
14146: LD_INT 136
14148: PUSH
14149: LD_INT 73
14151: PUSH
14152: LD_INT 0
14154: PUSH
14155: EMPTY
14156: LIST
14157: LIST
14158: LIST
14159: LIST
14160: PUSH
14161: LD_INT 32
14163: PUSH
14164: LD_INT 157
14166: PUSH
14167: LD_INT 98
14169: PUSH
14170: LD_INT 0
14172: PUSH
14173: EMPTY
14174: LIST
14175: LIST
14176: LIST
14177: LIST
14178: PUSH
14179: LD_INT 32
14181: PUSH
14182: LD_INT 150
14184: PUSH
14185: LD_INT 87
14187: PUSH
14188: LD_INT 1
14190: PUSH
14191: EMPTY
14192: LIST
14193: LIST
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 33
14199: PUSH
14200: LD_INT 171
14202: PUSH
14203: LD_INT 97
14205: PUSH
14206: LD_INT 4
14208: PUSH
14209: EMPTY
14210: LIST
14211: LIST
14212: LIST
14213: LIST
14214: PUSH
14215: LD_INT 33
14217: PUSH
14218: LD_INT 168
14220: PUSH
14221: LD_INT 92
14223: PUSH
14224: LD_INT 4
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: LIST
14231: LIST
14232: PUSH
14233: LD_INT 33
14235: PUSH
14236: LD_INT 166
14238: PUSH
14239: LD_INT 80
14241: PUSH
14242: LD_INT 5
14244: PUSH
14245: EMPTY
14246: LIST
14247: LIST
14248: LIST
14249: LIST
14250: PUSH
14251: LD_INT 33
14253: PUSH
14254: LD_INT 141
14256: PUSH
14257: LD_INT 54
14259: PUSH
14260: LD_INT 2
14262: PUSH
14263: EMPTY
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: PUSH
14269: LD_INT 33
14271: PUSH
14272: LD_INT 133
14274: PUSH
14275: LD_INT 57
14277: PUSH
14278: LD_INT 2
14280: PUSH
14281: EMPTY
14282: LIST
14283: LIST
14284: LIST
14285: LIST
14286: PUSH
14287: LD_INT 33
14289: PUSH
14290: LD_INT 132
14292: PUSH
14293: LD_INT 61
14295: PUSH
14296: LD_INT 2
14298: PUSH
14299: EMPTY
14300: LIST
14301: LIST
14302: LIST
14303: LIST
14304: PUSH
14305: LD_INT 33
14307: PUSH
14308: LD_INT 150
14310: PUSH
14311: LD_INT 82
14313: PUSH
14314: LD_INT 0
14316: PUSH
14317: EMPTY
14318: LIST
14319: LIST
14320: LIST
14321: LIST
14322: PUSH
14323: LD_INT 33
14325: PUSH
14326: LD_INT 132
14328: PUSH
14329: LD_INT 72
14331: PUSH
14332: LD_INT 0
14334: PUSH
14335: EMPTY
14336: LIST
14337: LIST
14338: LIST
14339: LIST
14340: PUSH
14341: LD_INT 6
14343: PUSH
14344: LD_INT 146
14346: PUSH
14347: LD_INT 64
14349: PUSH
14350: LD_INT 4
14352: PUSH
14353: EMPTY
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: PUSH
14359: LD_INT 6
14361: PUSH
14362: LD_INT 159
14364: PUSH
14365: LD_INT 85
14367: PUSH
14368: LD_INT 4
14370: PUSH
14371: EMPTY
14372: LIST
14373: LIST
14374: LIST
14375: LIST
14376: PUSH
14377: LD_INT 21
14379: PUSH
14380: LD_INT 163
14382: PUSH
14383: LD_INT 91
14385: PUSH
14386: LD_INT 3
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: LIST
14393: LIST
14394: PUSH
14395: LD_INT 16
14397: PUSH
14398: LD_INT 166
14400: PUSH
14401: LD_INT 95
14403: PUSH
14404: LD_INT 4
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: LIST
14411: LIST
14412: PUSH
14413: LD_INT 24
14415: PUSH
14416: LD_INT 159
14418: PUSH
14419: LD_INT 95
14421: PUSH
14422: LD_INT 1
14424: PUSH
14425: EMPTY
14426: LIST
14427: LIST
14428: LIST
14429: LIST
14430: PUSH
14431: EMPTY
14432: LIST
14433: LIST
14434: LIST
14435: LIST
14436: LIST
14437: LIST
14438: LIST
14439: LIST
14440: LIST
14441: LIST
14442: LIST
14443: LIST
14444: LIST
14445: LIST
14446: LIST
14447: LIST
14448: LIST
14449: LIST
14450: LIST
14451: LIST
14452: LIST
14453: LIST
14454: LIST
14455: LIST
14456: LIST
14457: LIST
14458: LIST
14459: LIST
14460: LIST
14461: LIST
14462: LIST
14463: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_class , 2 ] ] ] ) do
14464: LD_ADDR_VAR 0 3
14468: PUSH
14469: LD_INT 22
14471: PUSH
14472: LD_INT 3
14474: PUSH
14475: EMPTY
14476: LIST
14477: LIST
14478: PUSH
14479: LD_INT 3
14481: PUSH
14482: LD_INT 25
14484: PUSH
14485: LD_INT 2
14487: PUSH
14488: EMPTY
14489: LIST
14490: LIST
14491: PUSH
14492: EMPTY
14493: LIST
14494: LIST
14495: PUSH
14496: EMPTY
14497: LIST
14498: LIST
14499: PPUSH
14500: CALL_OW 69
14504: PUSH
14505: FOR_IN
14506: IFFALSE 14525
// AddComAgressiveMove ( i , 141 , 65 ) ;
14508: LD_VAR 0 3
14512: PPUSH
14513: LD_INT 141
14515: PPUSH
14516: LD_INT 65
14518: PPUSH
14519: CALL_OW 174
14523: GO 14505
14525: POP
14526: POP
// for i := 1 to buildingsTab do
14527: LD_ADDR_VAR 0 3
14531: PUSH
14532: DOUBLE
14533: LD_INT 1
14535: DEC
14536: ST_TO_ADDR
14537: LD_VAR 0 5
14541: PUSH
14542: FOR_TO
14543: IFFALSE 14616
// AddComBuild ( engineers , buildingsTab [ i ] [ 1 ] , buildingsTab [ i ] [ 2 ] , buildingsTab [ i ] [ 3 ] , buildingsTab [ i ] [ 4 ] ) ;
14545: LD_VAR 0 4
14549: PPUSH
14550: LD_VAR 0 5
14554: PUSH
14555: LD_VAR 0 3
14559: ARRAY
14560: PUSH
14561: LD_INT 1
14563: ARRAY
14564: PPUSH
14565: LD_VAR 0 5
14569: PUSH
14570: LD_VAR 0 3
14574: ARRAY
14575: PUSH
14576: LD_INT 2
14578: ARRAY
14579: PPUSH
14580: LD_VAR 0 5
14584: PUSH
14585: LD_VAR 0 3
14589: ARRAY
14590: PUSH
14591: LD_INT 3
14593: ARRAY
14594: PPUSH
14595: LD_VAR 0 5
14599: PUSH
14600: LD_VAR 0 3
14604: ARRAY
14605: PUSH
14606: LD_INT 4
14608: ARRAY
14609: PPUSH
14610: CALL_OW 205
14614: GO 14542
14616: POP
14617: POP
// end ; end ;
14618: LD_VAR 0 2
14622: RET
// export arBuildingsTab ; export function BuildArabianBase ; var i , engineers ; begin
14623: LD_INT 0
14625: PPUSH
14626: PPUSH
14627: PPUSH
// arBuildingsTab = [ [ b_depot , 71 , 15 , 3 ] , [ b_lab , 77 , 18 , 3 ] , [ b_armoury , 77 , 26 , 0 ] , [ b_breastwork , 72 , 24 , 0 ] , [ b_breastwork , 82 , 28 , 0 ] , [ b_breastwork , 84 , 21 , 3 ] , [ b_breastwork , 66 , 14 , 2 ] , [ b_solar_power , 67 , 18 , 5 ] , [ b_solar_power , 69 , 23 , 2 ] , ] ;
14628: LD_ADDR_EXP 70
14632: PUSH
14633: LD_INT 0
14635: PUSH
14636: LD_INT 71
14638: PUSH
14639: LD_INT 15
14641: PUSH
14642: LD_INT 3
14644: PUSH
14645: EMPTY
14646: LIST
14647: LIST
14648: LIST
14649: LIST
14650: PUSH
14651: LD_INT 6
14653: PUSH
14654: LD_INT 77
14656: PUSH
14657: LD_INT 18
14659: PUSH
14660: LD_INT 3
14662: PUSH
14663: EMPTY
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: PUSH
14669: LD_INT 4
14671: PUSH
14672: LD_INT 77
14674: PUSH
14675: LD_INT 26
14677: PUSH
14678: LD_INT 0
14680: PUSH
14681: EMPTY
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: PUSH
14687: LD_INT 31
14689: PUSH
14690: LD_INT 72
14692: PUSH
14693: LD_INT 24
14695: PUSH
14696: LD_INT 0
14698: PUSH
14699: EMPTY
14700: LIST
14701: LIST
14702: LIST
14703: LIST
14704: PUSH
14705: LD_INT 31
14707: PUSH
14708: LD_INT 82
14710: PUSH
14711: LD_INT 28
14713: PUSH
14714: LD_INT 0
14716: PUSH
14717: EMPTY
14718: LIST
14719: LIST
14720: LIST
14721: LIST
14722: PUSH
14723: LD_INT 31
14725: PUSH
14726: LD_INT 84
14728: PUSH
14729: LD_INT 21
14731: PUSH
14732: LD_INT 3
14734: PUSH
14735: EMPTY
14736: LIST
14737: LIST
14738: LIST
14739: LIST
14740: PUSH
14741: LD_INT 31
14743: PUSH
14744: LD_INT 66
14746: PUSH
14747: LD_INT 14
14749: PUSH
14750: LD_INT 2
14752: PUSH
14753: EMPTY
14754: LIST
14755: LIST
14756: LIST
14757: LIST
14758: PUSH
14759: LD_INT 27
14761: PUSH
14762: LD_INT 67
14764: PUSH
14765: LD_INT 18
14767: PUSH
14768: LD_INT 5
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: LIST
14775: LIST
14776: PUSH
14777: LD_INT 27
14779: PUSH
14780: LD_INT 69
14782: PUSH
14783: LD_INT 23
14785: PUSH
14786: LD_INT 2
14788: PUSH
14789: EMPTY
14790: LIST
14791: LIST
14792: LIST
14793: LIST
14794: PUSH
14795: EMPTY
14796: LIST
14797: LIST
14798: LIST
14799: LIST
14800: LIST
14801: LIST
14802: LIST
14803: LIST
14804: LIST
14805: ST_TO_ADDR
// engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
14806: LD_ADDR_VAR 0 3
14810: PUSH
14811: LD_INT 22
14813: PUSH
14814: LD_INT 2
14816: PUSH
14817: EMPTY
14818: LIST
14819: LIST
14820: PUSH
14821: LD_INT 25
14823: PUSH
14824: LD_INT 2
14826: PUSH
14827: EMPTY
14828: LIST
14829: LIST
14830: PUSH
14831: EMPTY
14832: LIST
14833: LIST
14834: PPUSH
14835: CALL_OW 69
14839: ST_TO_ADDR
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
14840: LD_VAR 0 3
14844: PPUSH
14845: LD_EXP 70
14849: PUSH
14850: LD_INT 1
14852: ARRAY
14853: PUSH
14854: LD_INT 1
14856: ARRAY
14857: PPUSH
14858: LD_EXP 70
14862: PUSH
14863: LD_INT 1
14865: ARRAY
14866: PUSH
14867: LD_INT 2
14869: ARRAY
14870: PPUSH
14871: LD_EXP 70
14875: PUSH
14876: LD_INT 1
14878: ARRAY
14879: PUSH
14880: LD_INT 3
14882: ARRAY
14883: PPUSH
14884: LD_EXP 70
14888: PUSH
14889: LD_INT 1
14891: ARRAY
14892: PUSH
14893: LD_INT 4
14895: ARRAY
14896: PPUSH
14897: CALL_OW 205
// end ;
14901: LD_VAR 0 1
14905: RET
// export function IntBazooka ( side , targetSide ) ; var ta , c , i , list , filter ; begin
14906: LD_INT 0
14908: PPUSH
14909: PPUSH
14910: PPUSH
14911: PPUSH
14912: PPUSH
14913: PPUSH
// list := FilterAllUnits ( [ [ f_side , side ] , [ f_class , class_bazooker ] ] ) ;
14914: LD_ADDR_VAR 0 7
14918: PUSH
14919: LD_INT 22
14921: PUSH
14922: LD_VAR 0 1
14926: PUSH
14927: EMPTY
14928: LIST
14929: LIST
14930: PUSH
14931: LD_INT 25
14933: PUSH
14934: LD_INT 9
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PPUSH
14945: CALL_OW 69
14949: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_side , targetSide ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
14950: LD_ADDR_VAR 0 8
14954: PUSH
14955: LD_INT 22
14957: PUSH
14958: LD_VAR 0 2
14962: PUSH
14963: EMPTY
14964: LIST
14965: LIST
14966: PUSH
14967: LD_INT 3
14969: PUSH
14970: LD_INT 21
14972: PUSH
14973: LD_INT 3
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PUSH
14984: EMPTY
14985: LIST
14986: LIST
14987: PPUSH
14988: CALL_OW 69
14992: ST_TO_ADDR
// c := Rand ( 1 , 3 ) ;
14993: LD_ADDR_VAR 0 5
14997: PUSH
14998: LD_INT 1
15000: PPUSH
15001: LD_INT 3
15003: PPUSH
15004: CALL_OW 12
15008: ST_TO_ADDR
// for i = 1 to list do
15009: LD_ADDR_VAR 0 6
15013: PUSH
15014: DOUBLE
15015: LD_INT 1
15017: DEC
15018: ST_TO_ADDR
15019: LD_VAR 0 7
15023: PUSH
15024: FOR_TO
15025: IFFALSE 16015
// for ta in filter do
15027: LD_ADDR_VAR 0 4
15031: PUSH
15032: LD_VAR 0 8
15036: PUSH
15037: FOR_IN
15038: IFFALSE 16011
// begin if GetDistUnits ( list [ i ] , ta ) <= 15 then
15040: LD_VAR 0 7
15044: PUSH
15045: LD_VAR 0 6
15049: ARRAY
15050: PPUSH
15051: LD_VAR 0 4
15055: PPUSH
15056: CALL_OW 296
15060: PUSH
15061: LD_INT 15
15063: LESSEQUAL
15064: IFFALSE 16009
// begin case c of 1 :
15066: LD_VAR 0 5
15070: PUSH
15071: LD_INT 1
15073: DOUBLE
15074: EQUAL
15075: IFTRUE 15079
15077: GO 15511
15079: POP
// begin ComTimeShift ( list [ i ] , GetX ( ta ) , GetY ( ta ) ) ;
15080: LD_VAR 0 7
15084: PUSH
15085: LD_VAR 0 6
15089: ARRAY
15090: PPUSH
15091: LD_VAR 0 4
15095: PPUSH
15096: CALL_OW 250
15100: PPUSH
15101: LD_VAR 0 4
15105: PPUSH
15106: CALL_OW 251
15110: PPUSH
15111: CALL_OW 154
// if eventVar2 = 0 then
15115: LD_EXP 68
15119: PUSH
15120: LD_INT 0
15122: EQUAL
15123: IFFALSE 15509
// begin eventVar2 = 1 ;
15125: LD_ADDR_EXP 68
15129: PUSH
15130: LD_INT 1
15132: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15133: LD_INT 245
15135: PPUSH
15136: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15140: LD_VAR 0 4
15144: PPUSH
15145: CALL_OW 250
15149: PPUSH
15150: LD_VAR 0 4
15154: PPUSH
15155: CALL_OW 251
15159: PPUSH
15160: CALL_OW 84
// DialogueOn ;
15164: CALL_OW 6
// if IsOK ( Cyrus ) then
15168: LD_EXP 5
15172: PPUSH
15173: CALL_OW 302
15177: IFFALSE 15193
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15179: LD_EXP 5
15183: PPUSH
15184: LD_STRING D9a-Cyrus-1
15186: PPUSH
15187: CALL_OW 88
// end else
15191: GO 15315
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15193: LD_INT 22
15195: PUSH
15196: LD_INT 1
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PUSH
15203: LD_INT 26
15205: PUSH
15206: LD_INT 1
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: LD_INT 2
15215: PUSH
15216: LD_INT 25
15218: PUSH
15219: LD_INT 1
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PUSH
15226: LD_INT 25
15228: PUSH
15229: LD_INT 2
15231: PUSH
15232: EMPTY
15233: LIST
15234: LIST
15235: PUSH
15236: LD_INT 25
15238: PUSH
15239: LD_INT 3
15241: PUSH
15242: EMPTY
15243: LIST
15244: LIST
15245: PUSH
15246: LD_INT 25
15248: PUSH
15249: LD_INT 4
15251: PUSH
15252: EMPTY
15253: LIST
15254: LIST
15255: PUSH
15256: LD_INT 25
15258: PUSH
15259: LD_INT 5
15261: PUSH
15262: EMPTY
15263: LIST
15264: LIST
15265: PUSH
15266: EMPTY
15267: LIST
15268: LIST
15269: LIST
15270: LIST
15271: LIST
15272: LIST
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: LIST
15278: PPUSH
15279: CALL_OW 69
15283: PUSH
15284: LD_EXP 1
15288: PUSH
15289: LD_EXP 14
15293: PUSH
15294: LD_EXP 5
15298: PUSH
15299: EMPTY
15300: LIST
15301: LIST
15302: LIST
15303: DIFF
15304: PPUSH
15305: LD_STRING D9a-Sol1-1
15307: PPUSH
15308: LD_STRING D9a-Sol1-1
15310: PPUSH
15311: CALL 11470 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15315: LD_INT 22
15317: PUSH
15318: LD_INT 1
15320: PUSH
15321: EMPTY
15322: LIST
15323: LIST
15324: PUSH
15325: LD_INT 26
15327: PUSH
15328: LD_INT 1
15330: PUSH
15331: EMPTY
15332: LIST
15333: LIST
15334: PUSH
15335: LD_INT 2
15337: PUSH
15338: LD_INT 25
15340: PUSH
15341: LD_INT 1
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: PUSH
15348: LD_INT 25
15350: PUSH
15351: LD_INT 2
15353: PUSH
15354: EMPTY
15355: LIST
15356: LIST
15357: PUSH
15358: LD_INT 25
15360: PUSH
15361: LD_INT 3
15363: PUSH
15364: EMPTY
15365: LIST
15366: LIST
15367: PUSH
15368: LD_INT 25
15370: PUSH
15371: LD_INT 4
15373: PUSH
15374: EMPTY
15375: LIST
15376: LIST
15377: PUSH
15378: LD_INT 25
15380: PUSH
15381: LD_INT 5
15383: PUSH
15384: EMPTY
15385: LIST
15386: LIST
15387: PUSH
15388: EMPTY
15389: LIST
15390: LIST
15391: LIST
15392: LIST
15393: LIST
15394: LIST
15395: PUSH
15396: EMPTY
15397: LIST
15398: LIST
15399: LIST
15400: PPUSH
15401: CALL_OW 69
15405: PUSH
15406: LD_EXP 1
15410: PUSH
15411: LD_EXP 14
15415: PUSH
15416: LD_EXP 5
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: LIST
15425: DIFF
15426: PPUSH
15427: LD_STRING D9b-Sol1-1
15429: PPUSH
15430: LD_STRING D9b-Sol1-1
15432: PPUSH
15433: CALL 11470 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15437: LD_STRING 09_arInfo
15439: PPUSH
15440: LD_INT 0
15442: PPUSH
15443: CALL_OW 30
15447: PUSH
15448: LD_INT 1
15450: EQUAL
15451: IFFALSE 15465
// Say ( JMM , D9a-JMM-1 ) ;
15453: LD_EXP 1
15457: PPUSH
15458: LD_STRING D9a-JMM-1
15460: PPUSH
15461: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15465: LD_EXP 1
15469: PPUSH
15470: LD_STRING D9c-JMM-1
15472: PPUSH
15473: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15477: LD_INT 12
15479: PPUSH
15480: LD_INT 1
15482: PPUSH
15483: CALL_OW 321
15487: PUSH
15488: LD_INT 2
15490: EQUAL
15491: IFFALSE 15505
// Say ( JMM , D9c-JMM-1a ) ;
15493: LD_EXP 1
15497: PPUSH
15498: LD_STRING D9c-JMM-1a
15500: PPUSH
15501: CALL_OW 88
// DialogueOff ;
15505: CALL_OW 7
// end ; end ; 2 :
15509: GO 16009
15511: LD_INT 2
15513: DOUBLE
15514: EQUAL
15515: IFTRUE 15519
15517: GO 15977
15519: POP
// begin ComSpaceShift ( list [ i ] , GetX ( ta ) + Rand ( - 1 , 1 ) , GetY ( ta ) + Rand ( - 1 , 1 ) ) ;
15520: LD_VAR 0 7
15524: PUSH
15525: LD_VAR 0 6
15529: ARRAY
15530: PPUSH
15531: LD_VAR 0 4
15535: PPUSH
15536: CALL_OW 250
15540: PUSH
15541: LD_INT 1
15543: NEG
15544: PPUSH
15545: LD_INT 1
15547: PPUSH
15548: CALL_OW 12
15552: PLUS
15553: PPUSH
15554: LD_VAR 0 4
15558: PPUSH
15559: CALL_OW 251
15563: PUSH
15564: LD_INT 1
15566: NEG
15567: PPUSH
15568: LD_INT 1
15570: PPUSH
15571: CALL_OW 12
15575: PLUS
15576: PPUSH
15577: CALL_OW 153
// if eventVar2 = 0 then
15581: LD_EXP 68
15585: PUSH
15586: LD_INT 0
15588: EQUAL
15589: IFFALSE 15975
// begin eventVar2 = 1 ;
15591: LD_ADDR_EXP 68
15595: PUSH
15596: LD_INT 1
15598: ST_TO_ADDR
// wait ( 0 0$7 ) ;
15599: LD_INT 245
15601: PPUSH
15602: CALL_OW 67
// CenterOnXY ( GetX ( ta ) , GetY ( ta ) ) ;
15606: LD_VAR 0 4
15610: PPUSH
15611: CALL_OW 250
15615: PPUSH
15616: LD_VAR 0 4
15620: PPUSH
15621: CALL_OW 251
15625: PPUSH
15626: CALL_OW 84
// DialogueOn ;
15630: CALL_OW 6
// if IsOK ( Cyrus ) then
15634: LD_EXP 5
15638: PPUSH
15639: CALL_OW 302
15643: IFFALSE 15659
// begin Say ( Cyrus , D9a-Cyrus-1 ) ;
15645: LD_EXP 5
15649: PPUSH
15650: LD_STRING D9a-Cyrus-1
15652: PPUSH
15653: CALL_OW 88
// end else
15657: GO 15781
// begin DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9a-Sol1-1 , D9a-Sol1-1 ) ;
15659: LD_INT 22
15661: PUSH
15662: LD_INT 1
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 26
15671: PUSH
15672: LD_INT 1
15674: PUSH
15675: EMPTY
15676: LIST
15677: LIST
15678: PUSH
15679: LD_INT 2
15681: PUSH
15682: LD_INT 25
15684: PUSH
15685: LD_INT 1
15687: PUSH
15688: EMPTY
15689: LIST
15690: LIST
15691: PUSH
15692: LD_INT 25
15694: PUSH
15695: LD_INT 2
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PUSH
15702: LD_INT 25
15704: PUSH
15705: LD_INT 3
15707: PUSH
15708: EMPTY
15709: LIST
15710: LIST
15711: PUSH
15712: LD_INT 25
15714: PUSH
15715: LD_INT 4
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: PUSH
15722: LD_INT 25
15724: PUSH
15725: LD_INT 5
15727: PUSH
15728: EMPTY
15729: LIST
15730: LIST
15731: PUSH
15732: EMPTY
15733: LIST
15734: LIST
15735: LIST
15736: LIST
15737: LIST
15738: LIST
15739: PUSH
15740: EMPTY
15741: LIST
15742: LIST
15743: LIST
15744: PPUSH
15745: CALL_OW 69
15749: PUSH
15750: LD_EXP 1
15754: PUSH
15755: LD_EXP 14
15759: PUSH
15760: LD_EXP 5
15764: PUSH
15765: EMPTY
15766: LIST
15767: LIST
15768: LIST
15769: DIFF
15770: PPUSH
15771: LD_STRING D9a-Sol1-1
15773: PPUSH
15774: LD_STRING D9a-Sol1-1
15776: PPUSH
15777: CALL 11470 0 3
// end ; DialogRandom ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_sex , 1 ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] ] ] ) diff [ JMM , Khatam , Cyrus ] , D9b-Sol1-1 , D9b-Sol1-1 ) ;
15781: LD_INT 22
15783: PUSH
15784: LD_INT 1
15786: PUSH
15787: EMPTY
15788: LIST
15789: LIST
15790: PUSH
15791: LD_INT 26
15793: PUSH
15794: LD_INT 1
15796: PUSH
15797: EMPTY
15798: LIST
15799: LIST
15800: PUSH
15801: LD_INT 2
15803: PUSH
15804: LD_INT 25
15806: PUSH
15807: LD_INT 1
15809: PUSH
15810: EMPTY
15811: LIST
15812: LIST
15813: PUSH
15814: LD_INT 25
15816: PUSH
15817: LD_INT 2
15819: PUSH
15820: EMPTY
15821: LIST
15822: LIST
15823: PUSH
15824: LD_INT 25
15826: PUSH
15827: LD_INT 3
15829: PUSH
15830: EMPTY
15831: LIST
15832: LIST
15833: PUSH
15834: LD_INT 25
15836: PUSH
15837: LD_INT 4
15839: PUSH
15840: EMPTY
15841: LIST
15842: LIST
15843: PUSH
15844: LD_INT 25
15846: PUSH
15847: LD_INT 5
15849: PUSH
15850: EMPTY
15851: LIST
15852: LIST
15853: PUSH
15854: EMPTY
15855: LIST
15856: LIST
15857: LIST
15858: LIST
15859: LIST
15860: LIST
15861: PUSH
15862: EMPTY
15863: LIST
15864: LIST
15865: LIST
15866: PPUSH
15867: CALL_OW 69
15871: PUSH
15872: LD_EXP 1
15876: PUSH
15877: LD_EXP 14
15881: PUSH
15882: LD_EXP 5
15886: PUSH
15887: EMPTY
15888: LIST
15889: LIST
15890: LIST
15891: DIFF
15892: PPUSH
15893: LD_STRING D9b-Sol1-1
15895: PPUSH
15896: LD_STRING D9b-Sol1-1
15898: PPUSH
15899: CALL 11470 0 3
// if LoadVariable ( 09_arInfo , 0 ) = 1 then
15903: LD_STRING 09_arInfo
15905: PPUSH
15906: LD_INT 0
15908: PPUSH
15909: CALL_OW 30
15913: PUSH
15914: LD_INT 1
15916: EQUAL
15917: IFFALSE 15931
// Say ( JMM , D9a-JMM-1 ) ;
15919: LD_EXP 1
15923: PPUSH
15924: LD_STRING D9a-JMM-1
15926: PPUSH
15927: CALL_OW 88
// Say ( JMM , D9c-JMM-1 ) ;
15931: LD_EXP 1
15935: PPUSH
15936: LD_STRING D9c-JMM-1
15938: PPUSH
15939: CALL_OW 88
// if GetTech ( tech_LasSight , 1 ) = state_researched then
15943: LD_INT 12
15945: PPUSH
15946: LD_INT 1
15948: PPUSH
15949: CALL_OW 321
15953: PUSH
15954: LD_INT 2
15956: EQUAL
15957: IFFALSE 15971
// Say ( JMM , D9c-JMM-1a ) ;
15959: LD_EXP 1
15963: PPUSH
15964: LD_STRING D9c-JMM-1a
15966: PPUSH
15967: CALL_OW 88
// DialogueOff ;
15971: CALL_OW 7
// end ; end ; 3 :
15975: GO 16009
15977: LD_INT 3
15979: DOUBLE
15980: EQUAL
15981: IFTRUE 15985
15983: GO 16008
15985: POP
// ComAttackUnit ( list [ i ] , ta ) ; end ;
15986: LD_VAR 0 7
15990: PUSH
15991: LD_VAR 0 6
15995: ARRAY
15996: PPUSH
15997: LD_VAR 0 4
16001: PPUSH
16002: CALL_OW 115
16006: GO 16009
16008: POP
// end ; end ;
16009: GO 15037
16011: POP
16012: POP
16013: GO 15024
16015: POP
16016: POP
// end ;
16017: LD_VAR 0 3
16021: RET
// export function ResAllTechs ( side , lab , nation ) ; var i , tech , cout ; begin
16022: LD_INT 0
16024: PPUSH
16025: PPUSH
16026: PPUSH
16027: PPUSH
// for i = 1 to 72 do
16028: LD_ADDR_VAR 0 5
16032: PUSH
16033: DOUBLE
16034: LD_INT 1
16036: DEC
16037: ST_TO_ADDR
16038: LD_INT 72
16040: PUSH
16041: FOR_TO
16042: IFFALSE 16100
// if GetTech ( i , side ) = state_enabled and TechNationAvailable ( i , nation ) = true then
16044: LD_VAR 0 5
16048: PPUSH
16049: LD_VAR 0 1
16053: PPUSH
16054: CALL_OW 321
16058: PUSH
16059: LD_INT 1
16061: EQUAL
16062: PUSH
16063: LD_VAR 0 5
16067: PPUSH
16068: LD_VAR 0 3
16072: PPUSH
16073: CALL_OW 482
16077: PUSH
16078: LD_INT 1
16080: EQUAL
16081: AND
16082: IFFALSE 16098
// AddComResearch ( lab , i ) ;
16084: LD_VAR 0 2
16088: PPUSH
16089: LD_VAR 0 5
16093: PPUSH
16094: CALL_OW 184
16098: GO 16041
16100: POP
16101: POP
// end ;
16102: LD_VAR 0 4
16106: RET
// export function EnterBunkerOrBarrack ( side , area ) ; var i , j , soldiers_list , turretList , temp , barrackList , insideUnits ; begin
16107: LD_INT 0
16109: PPUSH
16110: PPUSH
16111: PPUSH
16112: PPUSH
16113: PPUSH
16114: PPUSH
16115: PPUSH
16116: PPUSH
// soldiers_list = FilterAllUnits ( [ [ f_side , side ] , [ f_outside ] , [ f_lives , 700 ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , 1 ] , [ f_class , 9 ] ] ] ) ;
16117: LD_ADDR_VAR 0 6
16121: PUSH
16122: LD_INT 22
16124: PUSH
16125: LD_VAR 0 1
16129: PUSH
16130: EMPTY
16131: LIST
16132: LIST
16133: PUSH
16134: LD_INT 56
16136: PUSH
16137: EMPTY
16138: LIST
16139: PUSH
16140: LD_INT 24
16142: PUSH
16143: LD_INT 700
16145: PUSH
16146: EMPTY
16147: LIST
16148: LIST
16149: PUSH
16150: LD_INT 3
16152: PUSH
16153: LD_INT 60
16155: PUSH
16156: EMPTY
16157: LIST
16158: PUSH
16159: EMPTY
16160: LIST
16161: LIST
16162: PUSH
16163: LD_INT 2
16165: PUSH
16166: LD_INT 25
16168: PUSH
16169: LD_INT 1
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: PUSH
16176: LD_INT 25
16178: PUSH
16179: LD_INT 9
16181: PUSH
16182: EMPTY
16183: LIST
16184: LIST
16185: PUSH
16186: EMPTY
16187: LIST
16188: LIST
16189: LIST
16190: PUSH
16191: EMPTY
16192: LIST
16193: LIST
16194: LIST
16195: LIST
16196: LIST
16197: PPUSH
16198: CALL_OW 69
16202: ST_TO_ADDR
// turretList = FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_bunker ] , [ f_empty ] , [ f_lives , 251 ] ] ) ;
16203: LD_ADDR_VAR 0 7
16207: PUSH
16208: LD_INT 22
16210: PUSH
16211: LD_VAR 0 1
16215: PUSH
16216: EMPTY
16217: LIST
16218: LIST
16219: PUSH
16220: LD_INT 30
16222: PUSH
16223: LD_INT 32
16225: PUSH
16226: EMPTY
16227: LIST
16228: LIST
16229: PUSH
16230: LD_INT 58
16232: PUSH
16233: EMPTY
16234: LIST
16235: PUSH
16236: LD_INT 24
16238: PUSH
16239: LD_INT 251
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: LIST
16250: LIST
16251: PPUSH
16252: CALL_OW 69
16256: ST_TO_ADDR
// barrackList = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_btype , 4 ] , [ f_btype , 5 ] ] , [ f_lives , 251 ] ] ) ;
16257: LD_ADDR_VAR 0 9
16261: PUSH
16262: LD_INT 22
16264: PUSH
16265: LD_VAR 0 1
16269: PUSH
16270: EMPTY
16271: LIST
16272: LIST
16273: PUSH
16274: LD_INT 2
16276: PUSH
16277: LD_INT 30
16279: PUSH
16280: LD_INT 4
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PUSH
16287: LD_INT 30
16289: PUSH
16290: LD_INT 5
16292: PUSH
16293: EMPTY
16294: LIST
16295: LIST
16296: PUSH
16297: EMPTY
16298: LIST
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 24
16304: PUSH
16305: LD_INT 251
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: LIST
16316: PPUSH
16317: CALL_OW 69
16321: ST_TO_ADDR
// if barrackList > 0 then
16322: LD_VAR 0 9
16326: PUSH
16327: LD_INT 0
16329: GREATER
16330: IFFALSE 16465
// begin if turretList = 0 then
16332: LD_VAR 0 7
16336: PUSH
16337: LD_INT 0
16339: EQUAL
16340: IFFALSE 16389
// begin for i in soldiers_list do
16342: LD_ADDR_VAR 0 4
16346: PUSH
16347: LD_VAR 0 6
16351: PUSH
16352: FOR_IN
16353: IFFALSE 16385
// ComEnterUnit ( i , barrackList [ Rand ( 1 , barrackList ) ] ) ;
16355: LD_VAR 0 4
16359: PPUSH
16360: LD_VAR 0 9
16364: PUSH
16365: LD_INT 1
16367: PPUSH
16368: LD_VAR 0 9
16372: PPUSH
16373: CALL_OW 12
16377: ARRAY
16378: PPUSH
16379: CALL_OW 120
16383: GO 16352
16385: POP
16386: POP
// end else
16387: GO 16465
// begin for i in barrackList do
16389: LD_ADDR_VAR 0 4
16393: PUSH
16394: LD_VAR 0 9
16398: PUSH
16399: FOR_IN
16400: IFFALSE 16463
// begin insideUnits = UnitsInside ( i ) ;
16402: LD_ADDR_VAR 0 10
16406: PUSH
16407: LD_VAR 0 4
16411: PPUSH
16412: CALL_OW 313
16416: ST_TO_ADDR
// ComEnterUnit ( insideUnits [ 1 ] , turretList [ 1 ] ) ;
16417: LD_VAR 0 10
16421: PUSH
16422: LD_INT 1
16424: ARRAY
16425: PPUSH
16426: LD_VAR 0 7
16430: PUSH
16431: LD_INT 1
16433: ARRAY
16434: PPUSH
16435: CALL_OW 120
// ComEnterUnit ( soldiers_list [ 1 ] , turretList [ 1 ] ) ;
16439: LD_VAR 0 6
16443: PUSH
16444: LD_INT 1
16446: ARRAY
16447: PPUSH
16448: LD_VAR 0 7
16452: PUSH
16453: LD_INT 1
16455: ARRAY
16456: PPUSH
16457: CALL_OW 120
// end ;
16461: GO 16399
16463: POP
16464: POP
// end ; end ; end ;
16465: LD_VAR 0 3
16469: RET
// export function RepairBuilding ( side , building ) ; var buildings_list , i , engineerOkInside , engineerOkOutside , j ; begin
16470: LD_INT 0
16472: PPUSH
16473: PPUSH
16474: PPUSH
16475: PPUSH
16476: PPUSH
16477: PPUSH
// engineerOkInside = UnitsInside ( building ) ;
16478: LD_ADDR_VAR 0 6
16482: PUSH
16483: LD_VAR 0 2
16487: PPUSH
16488: CALL_OW 313
16492: ST_TO_ADDR
// engineerOkOutside = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] , [ f_lives , 1000 ] , [ f_not , [ f_inside ] ] ] ) ;
16493: LD_ADDR_VAR 0 7
16497: PUSH
16498: LD_INT 22
16500: PUSH
16501: LD_VAR 0 1
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 25
16512: PUSH
16513: LD_INT 2
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: LD_INT 24
16522: PUSH
16523: LD_INT 1000
16525: PUSH
16526: EMPTY
16527: LIST
16528: LIST
16529: PUSH
16530: LD_INT 3
16532: PUSH
16533: LD_INT 54
16535: PUSH
16536: EMPTY
16537: LIST
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: PUSH
16543: EMPTY
16544: LIST
16545: LIST
16546: LIST
16547: LIST
16548: PPUSH
16549: CALL_OW 69
16553: ST_TO_ADDR
// buildings_list = FilterAllUnits ( [ [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
16554: LD_ADDR_VAR 0 4
16558: PUSH
16559: LD_INT 22
16561: PUSH
16562: LD_VAR 0 1
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PUSH
16571: LD_INT 21
16573: PUSH
16574: LD_INT 3
16576: PUSH
16577: EMPTY
16578: LIST
16579: LIST
16580: PUSH
16581: LD_INT 3
16583: PUSH
16584: LD_INT 24
16586: PUSH
16587: LD_INT 1000
16589: PUSH
16590: EMPTY
16591: LIST
16592: LIST
16593: PUSH
16594: EMPTY
16595: LIST
16596: LIST
16597: PUSH
16598: EMPTY
16599: LIST
16600: LIST
16601: LIST
16602: PUSH
16603: EMPTY
16604: LIST
16605: PPUSH
16606: CALL_OW 69
16610: ST_TO_ADDR
// if not buildings_list and not engineerOkOutside and not rudestroyedBuildings then
16611: LD_VAR 0 4
16615: NOT
16616: PUSH
16617: LD_VAR 0 7
16621: NOT
16622: AND
16623: PUSH
16624: LD_EXP 44
16628: NOT
16629: AND
16630: IFFALSE 16634
// exit ;
16632: GO 16825
// if buildings_list > 0 and engineerOkInside then
16634: LD_VAR 0 4
16638: PUSH
16639: LD_INT 0
16641: GREATER
16642: PUSH
16643: LD_VAR 0 6
16647: AND
16648: IFFALSE 16702
// for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16650: LD_ADDR_VAR 0 5
16654: PUSH
16655: LD_INT 22
16657: PUSH
16658: LD_VAR 0 1
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: LD_INT 25
16669: PUSH
16670: LD_INT 2
16672: PUSH
16673: EMPTY
16674: LIST
16675: LIST
16676: PUSH
16677: EMPTY
16678: LIST
16679: LIST
16680: PPUSH
16681: CALL_OW 69
16685: PUSH
16686: FOR_IN
16687: IFFALSE 16700
// ComExitBuilding ( i ) ;
16689: LD_VAR 0 5
16693: PPUSH
16694: CALL_OW 122
16698: GO 16686
16700: POP
16701: POP
// if buildings_list > 0 and engineerOkOutside > 0 then
16702: LD_VAR 0 4
16706: PUSH
16707: LD_INT 0
16709: GREATER
16710: PUSH
16711: LD_VAR 0 7
16715: PUSH
16716: LD_INT 0
16718: GREATER
16719: AND
16720: IFFALSE 16774
// begin for i in engineerOkOutside do
16722: LD_ADDR_VAR 0 5
16726: PUSH
16727: LD_VAR 0 7
16731: PUSH
16732: FOR_IN
16733: IFFALSE 16772
// for j in buildings_list do
16735: LD_ADDR_VAR 0 8
16739: PUSH
16740: LD_VAR 0 4
16744: PUSH
16745: FOR_IN
16746: IFFALSE 16768
// ComRepairBuilding ( i , j [ 1 ] ) ;
16748: LD_VAR 0 5
16752: PPUSH
16753: LD_VAR 0 8
16757: PUSH
16758: LD_INT 1
16760: ARRAY
16761: PPUSH
16762: CALL_OW 130
16766: GO 16745
16768: POP
16769: POP
16770: GO 16732
16772: POP
16773: POP
// end ; if buildings_list = 0 and engineerOkOutside > 0 then
16774: LD_VAR 0 4
16778: PUSH
16779: LD_INT 0
16781: EQUAL
16782: PUSH
16783: LD_VAR 0 7
16787: PUSH
16788: LD_INT 0
16790: GREATER
16791: AND
16792: IFFALSE 16825
// for i in engineerOkOutside do
16794: LD_ADDR_VAR 0 5
16798: PUSH
16799: LD_VAR 0 7
16803: PUSH
16804: FOR_IN
16805: IFFALSE 16823
// ComEnterUnit ( i , building ) ;
16807: LD_VAR 0 5
16811: PPUSH
16812: LD_VAR 0 2
16816: PPUSH
16817: CALL_OW 120
16821: GO 16804
16823: POP
16824: POP
// end ;
16825: LD_VAR 0 3
16829: RET
// export function RebuildBuildings ( side , destroyedBuildings ) ; var i ; begin
16830: LD_INT 0
16832: PPUSH
16833: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) > 0 and FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) = 0 and destroyedBuildings > 0 then
16834: LD_INT 22
16836: PUSH
16837: LD_VAR 0 1
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PUSH
16846: LD_INT 25
16848: PUSH
16849: LD_INT 2
16851: PUSH
16852: EMPTY
16853: LIST
16854: LIST
16855: PUSH
16856: EMPTY
16857: LIST
16858: LIST
16859: PPUSH
16860: CALL_OW 69
16864: PUSH
16865: LD_INT 0
16867: GREATER
16868: PUSH
16869: LD_INT 22
16871: PUSH
16872: LD_VAR 0 1
16876: PUSH
16877: EMPTY
16878: LIST
16879: LIST
16880: PUSH
16881: LD_INT 21
16883: PUSH
16884: LD_INT 3
16886: PUSH
16887: EMPTY
16888: LIST
16889: LIST
16890: PUSH
16891: LD_INT 3
16893: PUSH
16894: LD_INT 24
16896: PUSH
16897: LD_INT 1000
16899: PUSH
16900: EMPTY
16901: LIST
16902: LIST
16903: PUSH
16904: EMPTY
16905: LIST
16906: LIST
16907: PUSH
16908: EMPTY
16909: LIST
16910: LIST
16911: LIST
16912: PPUSH
16913: CALL_OW 69
16917: PUSH
16918: LD_INT 0
16920: EQUAL
16921: AND
16922: PUSH
16923: LD_VAR 0 2
16927: PUSH
16928: LD_INT 0
16930: GREATER
16931: AND
16932: IFFALSE 17031
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_class , 2 ] ] ) do
16934: LD_ADDR_VAR 0 4
16938: PUSH
16939: LD_INT 22
16941: PUSH
16942: LD_VAR 0 1
16946: PUSH
16947: EMPTY
16948: LIST
16949: LIST
16950: PUSH
16951: LD_INT 25
16953: PUSH
16954: LD_INT 2
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: PPUSH
16965: CALL_OW 69
16969: PUSH
16970: FOR_IN
16971: IFFALSE 17029
// begin AddComExitBuilding ( i ) ;
16973: LD_VAR 0 4
16977: PPUSH
16978: CALL_OW 182
// AddComBuild ( i , destroyedBuildings [ 1 ] , destroyedBuildings [ 2 ] , destroyedBuildings [ 3 ] , destroyedBuildings [ 4 ] ) ;
16982: LD_VAR 0 4
16986: PPUSH
16987: LD_VAR 0 2
16991: PUSH
16992: LD_INT 1
16994: ARRAY
16995: PPUSH
16996: LD_VAR 0 2
17000: PUSH
17001: LD_INT 2
17003: ARRAY
17004: PPUSH
17005: LD_VAR 0 2
17009: PUSH
17010: LD_INT 3
17012: ARRAY
17013: PPUSH
17014: LD_VAR 0 2
17018: PUSH
17019: LD_INT 4
17021: ARRAY
17022: PPUSH
17023: CALL_OW 205
// end ;
17027: GO 16970
17029: POP
17030: POP
// end ; end ;
17031: LD_VAR 0 3
17035: RET
// export function HealUnitInBase ( side , healArea , baseArea , build ) ; var sci_list , sci_listOutside , i , j , damageUnits , unitsToHeal , tmp , rnd ; begin
17036: LD_INT 0
17038: PPUSH
17039: PPUSH
17040: PPUSH
17041: PPUSH
17042: PPUSH
17043: PPUSH
17044: PPUSH
17045: PPUSH
17046: PPUSH
// sci_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
17047: LD_ADDR_VAR 0 6
17051: PUSH
17052: LD_INT 22
17054: PUSH
17055: LD_VAR 0 1
17059: PUSH
17060: EMPTY
17061: LIST
17062: LIST
17063: PUSH
17064: LD_INT 25
17066: PUSH
17067: LD_INT 4
17069: PUSH
17070: EMPTY
17071: LIST
17072: LIST
17073: PUSH
17074: LD_INT 24
17076: PUSH
17077: LD_INT 251
17079: PUSH
17080: EMPTY
17081: LIST
17082: LIST
17083: PUSH
17084: EMPTY
17085: LIST
17086: LIST
17087: LIST
17088: PPUSH
17089: CALL_OW 69
17093: ST_TO_ADDR
// sci_listOutside = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_class , 4 ] , [ f_ok ] ] ) ;
17094: LD_ADDR_VAR 0 7
17098: PUSH
17099: LD_VAR 0 3
17103: PPUSH
17104: LD_INT 22
17106: PUSH
17107: LD_VAR 0 1
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PUSH
17116: LD_INT 25
17118: PUSH
17119: LD_INT 4
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PUSH
17126: LD_INT 50
17128: PUSH
17129: EMPTY
17130: LIST
17131: PUSH
17132: EMPTY
17133: LIST
17134: LIST
17135: LIST
17136: PPUSH
17137: CALL_OW 70
17141: ST_TO_ADDR
// damageUnits = FilterUnitsInArea ( baseArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 750 ] ] ] ) ;
17142: LD_ADDR_VAR 0 10
17146: PUSH
17147: LD_VAR 0 3
17151: PPUSH
17152: LD_INT 22
17154: PUSH
17155: LD_VAR 0 1
17159: PUSH
17160: EMPTY
17161: LIST
17162: LIST
17163: PUSH
17164: LD_INT 21
17166: PUSH
17167: LD_INT 1
17169: PUSH
17170: EMPTY
17171: LIST
17172: LIST
17173: PUSH
17174: LD_INT 3
17176: PUSH
17177: LD_INT 25
17179: PUSH
17180: LD_INT 3
17182: PUSH
17183: EMPTY
17184: LIST
17185: LIST
17186: PUSH
17187: EMPTY
17188: LIST
17189: LIST
17190: PUSH
17191: LD_INT 3
17193: PUSH
17194: LD_INT 24
17196: PUSH
17197: LD_INT 750
17199: PUSH
17200: EMPTY
17201: LIST
17202: LIST
17203: PUSH
17204: EMPTY
17205: LIST
17206: LIST
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: PPUSH
17214: CALL_OW 70
17218: ST_TO_ADDR
// unitsToHeal = FilterUnitsInArea ( healArea , [ [ f_side , side ] , [ f_type , unit_human ] , [ f_not , [ f_class , 3 ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
17219: LD_ADDR_VAR 0 11
17223: PUSH
17224: LD_VAR 0 2
17228: PPUSH
17229: LD_INT 22
17231: PUSH
17232: LD_VAR 0 1
17236: PUSH
17237: EMPTY
17238: LIST
17239: LIST
17240: PUSH
17241: LD_INT 21
17243: PUSH
17244: LD_INT 1
17246: PUSH
17247: EMPTY
17248: LIST
17249: LIST
17250: PUSH
17251: LD_INT 3
17253: PUSH
17254: LD_INT 25
17256: PUSH
17257: LD_INT 3
17259: PUSH
17260: EMPTY
17261: LIST
17262: LIST
17263: PUSH
17264: EMPTY
17265: LIST
17266: LIST
17267: PUSH
17268: LD_INT 3
17270: PUSH
17271: LD_INT 24
17273: PUSH
17274: LD_INT 1000
17276: PUSH
17277: EMPTY
17278: LIST
17279: LIST
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PUSH
17285: EMPTY
17286: LIST
17287: LIST
17288: LIST
17289: LIST
17290: PPUSH
17291: CALL_OW 70
17295: ST_TO_ADDR
// if not damageUnits and not sci_listOutside and not unitsToHeal then
17296: LD_VAR 0 10
17300: NOT
17301: PUSH
17302: LD_VAR 0 7
17306: NOT
17307: AND
17308: PUSH
17309: LD_VAR 0 11
17313: NOT
17314: AND
17315: IFFALSE 17319
// exit ;
17317: GO 17579
// if damageUnits > 0 and sci_list > 0 then
17319: LD_VAR 0 10
17323: PUSH
17324: LD_INT 0
17326: GREATER
17327: PUSH
17328: LD_VAR 0 6
17332: PUSH
17333: LD_INT 0
17335: GREATER
17336: AND
17337: IFFALSE 17370
// for i in damageUnits do
17339: LD_ADDR_VAR 0 8
17343: PUSH
17344: LD_VAR 0 10
17348: PUSH
17349: FOR_IN
17350: IFFALSE 17368
// ComMoveToArea ( i , healArea ) ;
17352: LD_VAR 0 8
17356: PPUSH
17357: LD_VAR 0 2
17361: PPUSH
17362: CALL_OW 113
17366: GO 17349
17368: POP
17369: POP
// if unitsToHeal > 0 and sci_list > 0 then
17370: LD_VAR 0 11
17374: PUSH
17375: LD_INT 0
17377: GREATER
17378: PUSH
17379: LD_VAR 0 6
17383: PUSH
17384: LD_INT 0
17386: GREATER
17387: AND
17388: IFFALSE 17447
// begin for i in sci_list do
17390: LD_ADDR_VAR 0 8
17394: PUSH
17395: LD_VAR 0 6
17399: PUSH
17400: FOR_IN
17401: IFFALSE 17445
// begin ComExitBuilding ( i ) ;
17403: LD_VAR 0 8
17407: PPUSH
17408: CALL_OW 122
// for j in unitsToHeal do
17412: LD_ADDR_VAR 0 9
17416: PUSH
17417: LD_VAR 0 11
17421: PUSH
17422: FOR_IN
17423: IFFALSE 17441
// AddComHeal ( i , j ) ;
17425: LD_VAR 0 8
17429: PPUSH
17430: LD_VAR 0 9
17434: PPUSH
17435: CALL_OW 188
17439: GO 17422
17441: POP
17442: POP
// end ;
17443: GO 17400
17445: POP
17446: POP
// end ; if damageUnits = 0 and unitsToHeal = 0 and sci_listOutside > 0 then
17447: LD_VAR 0 10
17451: PUSH
17452: LD_INT 0
17454: EQUAL
17455: PUSH
17456: LD_VAR 0 11
17460: PUSH
17461: LD_INT 0
17463: EQUAL
17464: AND
17465: PUSH
17466: LD_VAR 0 7
17470: PUSH
17471: LD_INT 0
17473: GREATER
17474: AND
17475: IFFALSE 17579
// for i in sci_listOutside do
17477: LD_ADDR_VAR 0 8
17481: PUSH
17482: LD_VAR 0 7
17486: PUSH
17487: FOR_IN
17488: IFFALSE 17577
// begin tmp = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ;
17490: LD_ADDR_VAR 0 12
17494: PUSH
17495: LD_INT 22
17497: PUSH
17498: LD_VAR 0 1
17502: PUSH
17503: EMPTY
17504: LIST
17505: LIST
17506: PUSH
17507: LD_INT 21
17509: PUSH
17510: LD_INT 3
17512: PUSH
17513: EMPTY
17514: LIST
17515: LIST
17516: PUSH
17517: LD_INT 30
17519: PUSH
17520: LD_INT 8
17522: PUSH
17523: EMPTY
17524: LIST
17525: LIST
17526: PUSH
17527: EMPTY
17528: LIST
17529: LIST
17530: LIST
17531: PPUSH
17532: CALL_OW 69
17536: ST_TO_ADDR
// rnd = rand ( 1 , tmp ) ;
17537: LD_ADDR_VAR 0 13
17541: PUSH
17542: LD_INT 1
17544: PPUSH
17545: LD_VAR 0 12
17549: PPUSH
17550: CALL_OW 12
17554: ST_TO_ADDR
// ComEnterUnit ( i , tmp [ rnd ] ) ;
17555: LD_VAR 0 8
17559: PPUSH
17560: LD_VAR 0 12
17564: PUSH
17565: LD_VAR 0 13
17569: ARRAY
17570: PPUSH
17571: CALL_OW 120
// end ;
17575: GO 17487
17577: POP
17578: POP
// end ;
17579: LD_VAR 0 5
17583: RET
// export function RespawnAttackVehicle ( area , side , vehCount , mehskill , nation , vehEngine , vehControl , RUWeapons , ARWeapons , AMWeapon , targetSide ) ; var i , j , un , veh , ruChassisTab , arChassisTab , amChassisTab , vehicleOK_list , target1 , target2 ; begin
17584: LD_INT 0
17586: PPUSH
17587: PPUSH
17588: PPUSH
17589: PPUSH
17590: PPUSH
17591: PPUSH
17592: PPUSH
17593: PPUSH
17594: PPUSH
17595: PPUSH
17596: PPUSH
// amChassisTab = [ ] ;
17597: LD_ADDR_VAR 0 19
17601: PUSH
17602: EMPTY
17603: ST_TO_ADDR
// arChassisTab = [ ] ;
17604: LD_ADDR_VAR 0 18
17608: PUSH
17609: EMPTY
17610: ST_TO_ADDR
// ruChassisTab = [ ] ;
17611: LD_ADDR_VAR 0 17
17615: PUSH
17616: EMPTY
17617: ST_TO_ADDR
// repeat wait ( 0 0$01 ) ;
17618: LD_INT 35
17620: PPUSH
17621: CALL_OW 67
// if nation = 1 then
17625: LD_VAR 0 5
17629: PUSH
17630: LD_INT 1
17632: EQUAL
17633: IFFALSE 18138
// begin uc_side = side ;
17635: LD_ADDR_OWVAR 20
17639: PUSH
17640: LD_VAR 0 2
17644: ST_TO_ADDR
// uc_nation = nation ;
17645: LD_ADDR_OWVAR 21
17649: PUSH
17650: LD_VAR 0 5
17654: ST_TO_ADDR
// vc_engine = vehengine ;
17655: LD_ADDR_OWVAR 39
17659: PUSH
17660: LD_VAR 0 6
17664: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
17665: LD_ADDR_OWVAR 38
17669: PUSH
17670: LD_VAR 0 7
17674: PUSH
17675: LD_INT 1
17677: PPUSH
17678: LD_VAR 0 7
17682: PPUSH
17683: CALL_OW 12
17687: ARRAY
17688: ST_TO_ADDR
// vc_weapon = AMWeapon [ Rand ( 1 , AMWeapon ) ] ;
17689: LD_ADDR_OWVAR 40
17693: PUSH
17694: LD_VAR 0 10
17698: PUSH
17699: LD_INT 1
17701: PPUSH
17702: LD_VAR 0 10
17706: PPUSH
17707: CALL_OW 12
17711: ARRAY
17712: ST_TO_ADDR
// for j = 1 to AMWeapon do
17713: LD_ADDR_VAR 0 14
17717: PUSH
17718: DOUBLE
17719: LD_INT 1
17721: DEC
17722: ST_TO_ADDR
17723: LD_VAR 0 10
17727: PUSH
17728: FOR_TO
17729: IFFALSE 18030
// begin if AMWeapon [ j ] = 2 or AMWeapon [ j ] = 3 then
17731: LD_VAR 0 10
17735: PUSH
17736: LD_VAR 0 14
17740: ARRAY
17741: PUSH
17742: LD_INT 2
17744: EQUAL
17745: PUSH
17746: LD_VAR 0 10
17750: PUSH
17751: LD_VAR 0 14
17755: ARRAY
17756: PUSH
17757: LD_INT 3
17759: EQUAL
17760: OR
17761: IFFALSE 17814
// begin amChassisTab = [ 1 , 2 , 3 , 4 , 5 ] ;
17763: LD_ADDR_VAR 0 19
17767: PUSH
17768: LD_INT 1
17770: PUSH
17771: LD_INT 2
17773: PUSH
17774: LD_INT 3
17776: PUSH
17777: LD_INT 4
17779: PUSH
17780: LD_INT 5
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: LIST
17787: LIST
17788: LIST
17789: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17790: LD_ADDR_OWVAR 37
17794: PUSH
17795: LD_VAR 0 19
17799: PUSH
17800: LD_INT 1
17802: PPUSH
17803: LD_VAR 0 19
17807: PPUSH
17808: CALL_OW 12
17812: ARRAY
17813: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 4 or AMWeapon [ j ] = 5 or AMWeapon [ j ] = 9 or AMWeapon [ j ] = 11 or AMWeapon [ j ] = 7 then
17814: LD_VAR 0 10
17818: PUSH
17819: LD_VAR 0 14
17823: ARRAY
17824: PUSH
17825: LD_INT 4
17827: EQUAL
17828: PUSH
17829: LD_VAR 0 10
17833: PUSH
17834: LD_VAR 0 14
17838: ARRAY
17839: PUSH
17840: LD_INT 5
17842: EQUAL
17843: OR
17844: PUSH
17845: LD_VAR 0 10
17849: PUSH
17850: LD_VAR 0 14
17854: ARRAY
17855: PUSH
17856: LD_INT 9
17858: EQUAL
17859: OR
17860: PUSH
17861: LD_VAR 0 10
17865: PUSH
17866: LD_VAR 0 14
17870: ARRAY
17871: PUSH
17872: LD_INT 11
17874: EQUAL
17875: OR
17876: PUSH
17877: LD_VAR 0 10
17881: PUSH
17882: LD_VAR 0 14
17886: ARRAY
17887: PUSH
17888: LD_INT 7
17890: EQUAL
17891: OR
17892: IFFALSE 17941
// begin amChassisTab = [ 2 , 3 , 4 , 5 ] ;
17894: LD_ADDR_VAR 0 19
17898: PUSH
17899: LD_INT 2
17901: PUSH
17902: LD_INT 3
17904: PUSH
17905: LD_INT 4
17907: PUSH
17908: LD_INT 5
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: LIST
17915: LIST
17916: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
17917: LD_ADDR_OWVAR 37
17921: PUSH
17922: LD_VAR 0 19
17926: PUSH
17927: LD_INT 1
17929: PPUSH
17930: LD_VAR 0 19
17934: PPUSH
17935: CALL_OW 12
17939: ARRAY
17940: ST_TO_ADDR
// end ; if AMWeapon [ j ] = 8 or AMWeapon [ j ] = 6 or AMWeapon [ j ] = 10 then
17941: LD_VAR 0 10
17945: PUSH
17946: LD_VAR 0 14
17950: ARRAY
17951: PUSH
17952: LD_INT 8
17954: EQUAL
17955: PUSH
17956: LD_VAR 0 10
17960: PUSH
17961: LD_VAR 0 14
17965: ARRAY
17966: PUSH
17967: LD_INT 6
17969: EQUAL
17970: OR
17971: PUSH
17972: LD_VAR 0 10
17976: PUSH
17977: LD_VAR 0 14
17981: ARRAY
17982: PUSH
17983: LD_INT 10
17985: EQUAL
17986: OR
17987: IFFALSE 18028
// begin amChassisTab = [ 4 , 5 ] ;
17989: LD_ADDR_VAR 0 19
17993: PUSH
17994: LD_INT 4
17996: PUSH
17997: LD_INT 5
17999: PUSH
18000: EMPTY
18001: LIST
18002: LIST
18003: ST_TO_ADDR
// vc_chassis = amChassisTab [ Rand ( 1 , amChassisTab ) ] ;
18004: LD_ADDR_OWVAR 37
18008: PUSH
18009: LD_VAR 0 19
18013: PUSH
18014: LD_INT 1
18016: PPUSH
18017: LD_VAR 0 19
18021: PPUSH
18022: CALL_OW 12
18026: ARRAY
18027: ST_TO_ADDR
// end ; end ;
18028: GO 17728
18030: POP
18031: POP
// veh = CreateVehicle ;
18032: LD_ADDR_VAR 0 16
18036: PUSH
18037: CALL_OW 45
18041: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18042: LD_VAR 0 16
18046: PPUSH
18047: LD_VAR 0 1
18051: PPUSH
18052: LD_INT 0
18054: PPUSH
18055: CALL_OW 49
// if vc_control = 1 then
18059: LD_OWVAR 38
18063: PUSH
18064: LD_INT 1
18066: EQUAL
18067: IFFALSE 18124
// begin hc_gallery =  ;
18069: LD_ADDR_OWVAR 33
18073: PUSH
18074: LD_STRING 
18076: ST_TO_ADDR
// hc_name =  ;
18077: LD_ADDR_OWVAR 26
18081: PUSH
18082: LD_STRING 
18084: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18085: LD_INT 0
18087: PPUSH
18088: LD_INT 3
18090: PPUSH
18091: LD_VAR 0 4
18095: PPUSH
18096: CALL_OW 380
// un = CreateHuman ;
18100: LD_ADDR_VAR 0 15
18104: PUSH
18105: CALL_OW 44
18109: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18110: LD_VAR 0 15
18114: PPUSH
18115: LD_VAR 0 16
18119: PPUSH
18120: CALL_OW 52
// end ; i = i + 1 ;
18124: LD_ADDR_VAR 0 13
18128: PUSH
18129: LD_VAR 0 13
18133: PUSH
18134: LD_INT 1
18136: PLUS
18137: ST_TO_ADDR
// end ; if nation = 2 then
18138: LD_VAR 0 5
18142: PUSH
18143: LD_INT 2
18145: EQUAL
18146: IFFALSE 18568
// begin uc_side = side ;
18148: LD_ADDR_OWVAR 20
18152: PUSH
18153: LD_VAR 0 2
18157: ST_TO_ADDR
// uc_nation = nation ;
18158: LD_ADDR_OWVAR 21
18162: PUSH
18163: LD_VAR 0 5
18167: ST_TO_ADDR
// vc_engine = vehengine ;
18168: LD_ADDR_OWVAR 39
18172: PUSH
18173: LD_VAR 0 6
18177: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18178: LD_ADDR_OWVAR 38
18182: PUSH
18183: LD_VAR 0 7
18187: PUSH
18188: LD_INT 1
18190: PPUSH
18191: LD_VAR 0 7
18195: PPUSH
18196: CALL_OW 12
18200: ARRAY
18201: ST_TO_ADDR
// vc_weapon = ARWeapons [ Rand ( 1 , ARWeapons ) ] ;
18202: LD_ADDR_OWVAR 40
18206: PUSH
18207: LD_VAR 0 9
18211: PUSH
18212: LD_INT 1
18214: PPUSH
18215: LD_VAR 0 9
18219: PPUSH
18220: CALL_OW 12
18224: ARRAY
18225: ST_TO_ADDR
// for j = 1 to ARWeapons do
18226: LD_ADDR_VAR 0 14
18230: PUSH
18231: DOUBLE
18232: LD_INT 1
18234: DEC
18235: ST_TO_ADDR
18236: LD_VAR 0 9
18240: PUSH
18241: FOR_TO
18242: IFFALSE 18460
// begin if ARWeapons [ j ] = 24 or ARWeapons [ j ] = 22 or ARWeapons [ j ] = 23 or ARWeapons [ j ] = 30 then
18244: LD_VAR 0 9
18248: PUSH
18249: LD_VAR 0 14
18253: ARRAY
18254: PUSH
18255: LD_INT 24
18257: EQUAL
18258: PUSH
18259: LD_VAR 0 9
18263: PUSH
18264: LD_VAR 0 14
18268: ARRAY
18269: PUSH
18270: LD_INT 22
18272: EQUAL
18273: OR
18274: PUSH
18275: LD_VAR 0 9
18279: PUSH
18280: LD_VAR 0 14
18284: ARRAY
18285: PUSH
18286: LD_INT 23
18288: EQUAL
18289: OR
18290: PUSH
18291: LD_VAR 0 9
18295: PUSH
18296: LD_VAR 0 14
18300: ARRAY
18301: PUSH
18302: LD_INT 30
18304: EQUAL
18305: OR
18306: IFFALSE 18343
// begin arChassisTab = [ 14 ] ;
18308: LD_ADDR_VAR 0 18
18312: PUSH
18313: LD_INT 14
18315: PUSH
18316: EMPTY
18317: LIST
18318: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18319: LD_ADDR_OWVAR 37
18323: PUSH
18324: LD_VAR 0 18
18328: PUSH
18329: LD_INT 1
18331: PPUSH
18332: LD_VAR 0 18
18336: PPUSH
18337: CALL_OW 12
18341: ARRAY
18342: ST_TO_ADDR
// end ; if ARWeapons [ j ] = 29 or ARWeapons [ j ] = 28 or ARWeapons [ j ] = 27 or ARWeapons [ j ] = 26 or ARWeapons [ j ] = 25 then
18343: LD_VAR 0 9
18347: PUSH
18348: LD_VAR 0 14
18352: ARRAY
18353: PUSH
18354: LD_INT 29
18356: EQUAL
18357: PUSH
18358: LD_VAR 0 9
18362: PUSH
18363: LD_VAR 0 14
18367: ARRAY
18368: PUSH
18369: LD_INT 28
18371: EQUAL
18372: OR
18373: PUSH
18374: LD_VAR 0 9
18378: PUSH
18379: LD_VAR 0 14
18383: ARRAY
18384: PUSH
18385: LD_INT 27
18387: EQUAL
18388: OR
18389: PUSH
18390: LD_VAR 0 9
18394: PUSH
18395: LD_VAR 0 14
18399: ARRAY
18400: PUSH
18401: LD_INT 26
18403: EQUAL
18404: OR
18405: PUSH
18406: LD_VAR 0 9
18410: PUSH
18411: LD_VAR 0 14
18415: ARRAY
18416: PUSH
18417: LD_INT 25
18419: EQUAL
18420: OR
18421: IFFALSE 18458
// begin arChassisTab = [ 14 ] ;
18423: LD_ADDR_VAR 0 18
18427: PUSH
18428: LD_INT 14
18430: PUSH
18431: EMPTY
18432: LIST
18433: ST_TO_ADDR
// vc_chassis = arChassisTab [ Rand ( 1 , arChassisTab ) ] ;
18434: LD_ADDR_OWVAR 37
18438: PUSH
18439: LD_VAR 0 18
18443: PUSH
18444: LD_INT 1
18446: PPUSH
18447: LD_VAR 0 18
18451: PPUSH
18452: CALL_OW 12
18456: ARRAY
18457: ST_TO_ADDR
// end ; end ;
18458: GO 18241
18460: POP
18461: POP
// veh = CreateVehicle ;
18462: LD_ADDR_VAR 0 16
18466: PUSH
18467: CALL_OW 45
18471: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18472: LD_VAR 0 16
18476: PPUSH
18477: LD_VAR 0 1
18481: PPUSH
18482: LD_INT 0
18484: PPUSH
18485: CALL_OW 49
// if vc_control = 1 then
18489: LD_OWVAR 38
18493: PUSH
18494: LD_INT 1
18496: EQUAL
18497: IFFALSE 18554
// begin hc_gallery =  ;
18499: LD_ADDR_OWVAR 33
18503: PUSH
18504: LD_STRING 
18506: ST_TO_ADDR
// hc_name =  ;
18507: LD_ADDR_OWVAR 26
18511: PUSH
18512: LD_STRING 
18514: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18515: LD_INT 0
18517: PPUSH
18518: LD_INT 3
18520: PPUSH
18521: LD_VAR 0 4
18525: PPUSH
18526: CALL_OW 380
// un = CreateHuman ;
18530: LD_ADDR_VAR 0 15
18534: PUSH
18535: CALL_OW 44
18539: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18540: LD_VAR 0 15
18544: PPUSH
18545: LD_VAR 0 16
18549: PPUSH
18550: CALL_OW 52
// end ; i = i + 1 ;
18554: LD_ADDR_VAR 0 13
18558: PUSH
18559: LD_VAR 0 13
18563: PUSH
18564: LD_INT 1
18566: PLUS
18567: ST_TO_ADDR
// end ; if nation = 3 then
18568: LD_VAR 0 5
18572: PUSH
18573: LD_INT 3
18575: EQUAL
18576: IFFALSE 18982
// begin uc_side = side ;
18578: LD_ADDR_OWVAR 20
18582: PUSH
18583: LD_VAR 0 2
18587: ST_TO_ADDR
// uc_nation = nation ;
18588: LD_ADDR_OWVAR 21
18592: PUSH
18593: LD_VAR 0 5
18597: ST_TO_ADDR
// vc_engine = vehengine ;
18598: LD_ADDR_OWVAR 39
18602: PUSH
18603: LD_VAR 0 6
18607: ST_TO_ADDR
// vc_control = vehControl [ Rand ( 1 , vehControl ) ] ;
18608: LD_ADDR_OWVAR 38
18612: PUSH
18613: LD_VAR 0 7
18617: PUSH
18618: LD_INT 1
18620: PPUSH
18621: LD_VAR 0 7
18625: PPUSH
18626: CALL_OW 12
18630: ARRAY
18631: ST_TO_ADDR
// vc_weapon = RUWeapons [ Rand ( 1 , RUWeapons ) ] ;
18632: LD_ADDR_OWVAR 40
18636: PUSH
18637: LD_VAR 0 8
18641: PUSH
18642: LD_INT 1
18644: PPUSH
18645: LD_VAR 0 8
18649: PPUSH
18650: CALL_OW 12
18654: ARRAY
18655: ST_TO_ADDR
// for j = 1 to RuWeapons do
18656: LD_ADDR_VAR 0 14
18660: PUSH
18661: DOUBLE
18662: LD_INT 1
18664: DEC
18665: ST_TO_ADDR
18666: LD_VAR 0 8
18670: PUSH
18671: FOR_TO
18672: IFFALSE 18874
// begin if RUWeapons [ j ] = 42 or RUWeapons [ j ] = 43 or RUWeapons [ j ] = 44 or RUWeapons [ j ] = 45 or RUWeapons [ j ] = 49 then
18674: LD_VAR 0 8
18678: PUSH
18679: LD_VAR 0 14
18683: ARRAY
18684: PUSH
18685: LD_INT 42
18687: EQUAL
18688: PUSH
18689: LD_VAR 0 8
18693: PUSH
18694: LD_VAR 0 14
18698: ARRAY
18699: PUSH
18700: LD_INT 43
18702: EQUAL
18703: OR
18704: PUSH
18705: LD_VAR 0 8
18709: PUSH
18710: LD_VAR 0 14
18714: ARRAY
18715: PUSH
18716: LD_INT 44
18718: EQUAL
18719: OR
18720: PUSH
18721: LD_VAR 0 8
18725: PUSH
18726: LD_VAR 0 14
18730: ARRAY
18731: PUSH
18732: LD_INT 45
18734: EQUAL
18735: OR
18736: PUSH
18737: LD_VAR 0 8
18741: PUSH
18742: LD_VAR 0 14
18746: ARRAY
18747: PUSH
18748: LD_INT 49
18750: EQUAL
18751: OR
18752: IFFALSE 18801
// begin ruChassisTab = [ 21 , 22 , 23 , 24 ] ;
18754: LD_ADDR_VAR 0 17
18758: PUSH
18759: LD_INT 21
18761: PUSH
18762: LD_INT 22
18764: PUSH
18765: LD_INT 23
18767: PUSH
18768: LD_INT 24
18770: PUSH
18771: EMPTY
18772: LIST
18773: LIST
18774: LIST
18775: LIST
18776: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18777: LD_ADDR_OWVAR 37
18781: PUSH
18782: LD_VAR 0 17
18786: PUSH
18787: LD_INT 1
18789: PPUSH
18790: LD_VAR 0 17
18794: PPUSH
18795: CALL_OW 12
18799: ARRAY
18800: ST_TO_ADDR
// end ; if RUWeapons [ j ] = 46 or RUWeapons [ j ] = 47 then
18801: LD_VAR 0 8
18805: PUSH
18806: LD_VAR 0 14
18810: ARRAY
18811: PUSH
18812: LD_INT 46
18814: EQUAL
18815: PUSH
18816: LD_VAR 0 8
18820: PUSH
18821: LD_VAR 0 14
18825: ARRAY
18826: PUSH
18827: LD_INT 47
18829: EQUAL
18830: OR
18831: IFFALSE 18872
// begin ruChassisTab = [ 23 , 24 ] ;
18833: LD_ADDR_VAR 0 17
18837: PUSH
18838: LD_INT 23
18840: PUSH
18841: LD_INT 24
18843: PUSH
18844: EMPTY
18845: LIST
18846: LIST
18847: ST_TO_ADDR
// vc_chassis = ruChassisTab [ Rand ( 1 , ruChassisTab ) ] ;
18848: LD_ADDR_OWVAR 37
18852: PUSH
18853: LD_VAR 0 17
18857: PUSH
18858: LD_INT 1
18860: PPUSH
18861: LD_VAR 0 17
18865: PPUSH
18866: CALL_OW 12
18870: ARRAY
18871: ST_TO_ADDR
// end ; end ;
18872: GO 18671
18874: POP
18875: POP
// veh = CreateVehicle ;
18876: LD_ADDR_VAR 0 16
18880: PUSH
18881: CALL_OW 45
18885: ST_TO_ADDR
// PlaceUnitArea ( veh , area , false ) ;
18886: LD_VAR 0 16
18890: PPUSH
18891: LD_VAR 0 1
18895: PPUSH
18896: LD_INT 0
18898: PPUSH
18899: CALL_OW 49
// if vc_control = 1 then
18903: LD_OWVAR 38
18907: PUSH
18908: LD_INT 1
18910: EQUAL
18911: IFFALSE 18968
// begin hc_gallery =  ;
18913: LD_ADDR_OWVAR 33
18917: PUSH
18918: LD_STRING 
18920: ST_TO_ADDR
// hc_name =  ;
18921: LD_ADDR_OWVAR 26
18925: PUSH
18926: LD_STRING 
18928: ST_TO_ADDR
// PrepareHuman ( false , 3 , mehskill ) ;
18929: LD_INT 0
18931: PPUSH
18932: LD_INT 3
18934: PPUSH
18935: LD_VAR 0 4
18939: PPUSH
18940: CALL_OW 380
// un = CreateHuman ;
18944: LD_ADDR_VAR 0 15
18948: PUSH
18949: CALL_OW 44
18953: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
18954: LD_VAR 0 15
18958: PPUSH
18959: LD_VAR 0 16
18963: PPUSH
18964: CALL_OW 52
// end ; i = i + 1 ;
18968: LD_ADDR_VAR 0 13
18972: PUSH
18973: LD_VAR 0 13
18977: PUSH
18978: LD_INT 1
18980: PLUS
18981: ST_TO_ADDR
// end ; until i = vehCount ;
18982: LD_VAR 0 13
18986: PUSH
18987: LD_VAR 0 3
18991: EQUAL
18992: IFFALSE 17618
// repeat wait ( 0 0$1 ) ;
18994: LD_INT 35
18996: PPUSH
18997: CALL_OW 67
// vehicleOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 650 ] ] ) ;
19001: LD_ADDR_VAR 0 20
19005: PUSH
19006: LD_INT 22
19008: PUSH
19009: LD_VAR 0 2
19013: PUSH
19014: EMPTY
19015: LIST
19016: LIST
19017: PUSH
19018: LD_INT 21
19020: PUSH
19021: LD_INT 2
19023: PUSH
19024: EMPTY
19025: LIST
19026: LIST
19027: PUSH
19028: LD_INT 24
19030: PUSH
19031: LD_INT 650
19033: PUSH
19034: EMPTY
19035: LIST
19036: LIST
19037: PUSH
19038: EMPTY
19039: LIST
19040: LIST
19041: LIST
19042: PPUSH
19043: CALL_OW 69
19047: ST_TO_ADDR
// if vehicleOK_list > 0 then
19048: LD_VAR 0 20
19052: PUSH
19053: LD_INT 0
19055: GREATER
19056: IFFALSE 19247
// begin for i in vehicleOK_list do
19058: LD_ADDR_VAR 0 13
19062: PUSH
19063: LD_VAR 0 20
19067: PUSH
19068: FOR_IN
19069: IFFALSE 19245
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
19071: LD_ADDR_VAR 0 21
19075: PUSH
19076: LD_INT 22
19078: PUSH
19079: LD_VAR 0 11
19083: PUSH
19084: EMPTY
19085: LIST
19086: LIST
19087: PPUSH
19088: CALL_OW 69
19092: PPUSH
19093: LD_VAR 0 13
19097: PPUSH
19098: CALL_OW 74
19102: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
19103: LD_ADDR_VAR 0 22
19107: PUSH
19108: LD_INT 22
19110: PUSH
19111: LD_VAR 0 11
19115: PUSH
19116: EMPTY
19117: LIST
19118: LIST
19119: PUSH
19120: LD_INT 2
19122: PUSH
19123: LD_INT 59
19125: PUSH
19126: EMPTY
19127: LIST
19128: PUSH
19129: LD_INT 21
19131: PUSH
19132: LD_INT 1
19134: PUSH
19135: EMPTY
19136: LIST
19137: LIST
19138: PUSH
19139: LD_INT 21
19141: PUSH
19142: LD_INT 2
19144: PUSH
19145: EMPTY
19146: LIST
19147: LIST
19148: PUSH
19149: EMPTY
19150: LIST
19151: LIST
19152: LIST
19153: LIST
19154: PUSH
19155: EMPTY
19156: LIST
19157: LIST
19158: PUSH
19159: EMPTY
19160: LIST
19161: PPUSH
19162: CALL_OW 69
19166: PPUSH
19167: LD_VAR 0 13
19171: PPUSH
19172: CALL_OW 74
19176: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
19177: LD_VAR 0 13
19181: PPUSH
19182: LD_VAR 0 21
19186: PPUSH
19187: CALL_OW 296
19191: PUSH
19192: LD_INT 8
19194: PLUS
19195: PUSH
19196: LD_VAR 0 13
19200: PPUSH
19201: LD_VAR 0 22
19205: PPUSH
19206: CALL_OW 296
19210: LESS
19211: IFFALSE 19229
// begin ComAttackUnit ( i , target1 ) ;
19213: LD_VAR 0 13
19217: PPUSH
19218: LD_VAR 0 21
19222: PPUSH
19223: CALL_OW 115
// end else
19227: GO 19243
// begin ComAttackUnit ( i , target2 ) ;
19229: LD_VAR 0 13
19233: PPUSH
19234: LD_VAR 0 22
19238: PPUSH
19239: CALL_OW 115
// end ; end ;
19243: GO 19068
19245: POP
19246: POP
// end ; until ( FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) ) = 0 ;
19247: LD_INT 22
19249: PUSH
19250: LD_VAR 0 2
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PUSH
19259: LD_INT 21
19261: PUSH
19262: LD_INT 2
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: PUSH
19269: EMPTY
19270: LIST
19271: LIST
19272: PPUSH
19273: CALL_OW 69
19277: PUSH
19278: LD_INT 0
19280: EQUAL
19281: IFFALSE 18994
// end ;
19283: LD_VAR 0 12
19287: RET
// export function RespawnAttackInfantry ( side , nation , soldierCount , sniperCount , bazookCount , mortalCount , medicCount , skil , spawnArea , healArea , targetSide ) ; var i , j , un , damageUnit_list , medic_list , soldiersOK_list , enemyUnits , und , target1 , target2 ; begin
19288: LD_INT 0
19290: PPUSH
19291: PPUSH
19292: PPUSH
19293: PPUSH
19294: PPUSH
19295: PPUSH
19296: PPUSH
19297: PPUSH
19298: PPUSH
19299: PPUSH
19300: PPUSH
// for i = 1 to soldierCount do
19301: LD_ADDR_VAR 0 13
19305: PUSH
19306: DOUBLE
19307: LD_INT 1
19309: DEC
19310: ST_TO_ADDR
19311: LD_VAR 0 3
19315: PUSH
19316: FOR_TO
19317: IFFALSE 19399
// begin uc_side = side ;
19319: LD_ADDR_OWVAR 20
19323: PUSH
19324: LD_VAR 0 1
19328: ST_TO_ADDR
// uc_nation = nation ;
19329: LD_ADDR_OWVAR 21
19333: PUSH
19334: LD_VAR 0 2
19338: ST_TO_ADDR
// hc_name =  ;
19339: LD_ADDR_OWVAR 26
19343: PUSH
19344: LD_STRING 
19346: ST_TO_ADDR
// hc_gallery =  ;
19347: LD_ADDR_OWVAR 33
19351: PUSH
19352: LD_STRING 
19354: ST_TO_ADDR
// PrepareHuman ( false , 1 , skil ) ;
19355: LD_INT 0
19357: PPUSH
19358: LD_INT 1
19360: PPUSH
19361: LD_VAR 0 8
19365: PPUSH
19366: CALL_OW 380
// un = CreateHuman ;
19370: LD_ADDR_VAR 0 15
19374: PUSH
19375: CALL_OW 44
19379: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19380: LD_VAR 0 15
19384: PPUSH
19385: LD_VAR 0 9
19389: PPUSH
19390: LD_INT 0
19392: PPUSH
19393: CALL_OW 49
// end ;
19397: GO 19316
19399: POP
19400: POP
// for i = 1 to sniperCount do
19401: LD_ADDR_VAR 0 13
19405: PUSH
19406: DOUBLE
19407: LD_INT 1
19409: DEC
19410: ST_TO_ADDR
19411: LD_VAR 0 4
19415: PUSH
19416: FOR_TO
19417: IFFALSE 19499
// begin uc_side = side ;
19419: LD_ADDR_OWVAR 20
19423: PUSH
19424: LD_VAR 0 1
19428: ST_TO_ADDR
// uc_nation = nation ;
19429: LD_ADDR_OWVAR 21
19433: PUSH
19434: LD_VAR 0 2
19438: ST_TO_ADDR
// hc_name =  ;
19439: LD_ADDR_OWVAR 26
19443: PUSH
19444: LD_STRING 
19446: ST_TO_ADDR
// hc_gallery =  ;
19447: LD_ADDR_OWVAR 33
19451: PUSH
19452: LD_STRING 
19454: ST_TO_ADDR
// PrepareHuman ( false , 5 , skil ) ;
19455: LD_INT 0
19457: PPUSH
19458: LD_INT 5
19460: PPUSH
19461: LD_VAR 0 8
19465: PPUSH
19466: CALL_OW 380
// un = CreateHuman ;
19470: LD_ADDR_VAR 0 15
19474: PUSH
19475: CALL_OW 44
19479: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19480: LD_VAR 0 15
19484: PPUSH
19485: LD_VAR 0 9
19489: PPUSH
19490: LD_INT 0
19492: PPUSH
19493: CALL_OW 49
// end ;
19497: GO 19416
19499: POP
19500: POP
// for i = 1 to bazookCount do
19501: LD_ADDR_VAR 0 13
19505: PUSH
19506: DOUBLE
19507: LD_INT 1
19509: DEC
19510: ST_TO_ADDR
19511: LD_VAR 0 5
19515: PUSH
19516: FOR_TO
19517: IFFALSE 19599
// begin uc_side = side ;
19519: LD_ADDR_OWVAR 20
19523: PUSH
19524: LD_VAR 0 1
19528: ST_TO_ADDR
// uc_nation = nation ;
19529: LD_ADDR_OWVAR 21
19533: PUSH
19534: LD_VAR 0 2
19538: ST_TO_ADDR
// hc_name =  ;
19539: LD_ADDR_OWVAR 26
19543: PUSH
19544: LD_STRING 
19546: ST_TO_ADDR
// hc_gallery =  ;
19547: LD_ADDR_OWVAR 33
19551: PUSH
19552: LD_STRING 
19554: ST_TO_ADDR
// PrepareHuman ( false , 9 , skil ) ;
19555: LD_INT 0
19557: PPUSH
19558: LD_INT 9
19560: PPUSH
19561: LD_VAR 0 8
19565: PPUSH
19566: CALL_OW 380
// un = CreateHuman ;
19570: LD_ADDR_VAR 0 15
19574: PUSH
19575: CALL_OW 44
19579: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19580: LD_VAR 0 15
19584: PPUSH
19585: LD_VAR 0 9
19589: PPUSH
19590: LD_INT 0
19592: PPUSH
19593: CALL_OW 49
// end ;
19597: GO 19516
19599: POP
19600: POP
// for i = 1 to mortalCount do
19601: LD_ADDR_VAR 0 13
19605: PUSH
19606: DOUBLE
19607: LD_INT 1
19609: DEC
19610: ST_TO_ADDR
19611: LD_VAR 0 6
19615: PUSH
19616: FOR_TO
19617: IFFALSE 19699
// begin uc_side = side ;
19619: LD_ADDR_OWVAR 20
19623: PUSH
19624: LD_VAR 0 1
19628: ST_TO_ADDR
// uc_nation = nation ;
19629: LD_ADDR_OWVAR 21
19633: PUSH
19634: LD_VAR 0 2
19638: ST_TO_ADDR
// hc_name =  ;
19639: LD_ADDR_OWVAR 26
19643: PUSH
19644: LD_STRING 
19646: ST_TO_ADDR
// hc_gallery =  ;
19647: LD_ADDR_OWVAR 33
19651: PUSH
19652: LD_STRING 
19654: ST_TO_ADDR
// PrepareHuman ( false , 8 , skil ) ;
19655: LD_INT 0
19657: PPUSH
19658: LD_INT 8
19660: PPUSH
19661: LD_VAR 0 8
19665: PPUSH
19666: CALL_OW 380
// un = CreateHuman ;
19670: LD_ADDR_VAR 0 15
19674: PUSH
19675: CALL_OW 44
19679: ST_TO_ADDR
// PlaceUnitArea ( un , spawnArea , false ) ;
19680: LD_VAR 0 15
19684: PPUSH
19685: LD_VAR 0 9
19689: PPUSH
19690: LD_INT 0
19692: PPUSH
19693: CALL_OW 49
// end ;
19697: GO 19616
19699: POP
19700: POP
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ] ) ;
19701: LD_ADDR_VAR 0 18
19705: PUSH
19706: LD_INT 22
19708: PUSH
19709: LD_VAR 0 1
19713: PUSH
19714: EMPTY
19715: LIST
19716: LIST
19717: PUSH
19718: LD_INT 2
19720: PUSH
19721: LD_INT 25
19723: PUSH
19724: LD_INT 1
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: PUSH
19731: LD_INT 25
19733: PUSH
19734: LD_INT 5
19736: PUSH
19737: EMPTY
19738: LIST
19739: LIST
19740: PUSH
19741: LD_INT 25
19743: PUSH
19744: LD_INT 8
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: PUSH
19751: LD_INT 25
19753: PUSH
19754: LD_INT 9
19756: PUSH
19757: EMPTY
19758: LIST
19759: LIST
19760: PUSH
19761: EMPTY
19762: LIST
19763: LIST
19764: LIST
19765: LIST
19766: LIST
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PPUSH
19772: CALL_OW 69
19776: ST_TO_ADDR
// medic_list = FilterAllUnits ( [ [ f_side , side ] , [ f_class , 4 ] ] ) ;
19777: LD_ADDR_VAR 0 17
19781: PUSH
19782: LD_INT 22
19784: PUSH
19785: LD_VAR 0 1
19789: PUSH
19790: EMPTY
19791: LIST
19792: LIST
19793: PUSH
19794: LD_INT 25
19796: PUSH
19797: LD_INT 4
19799: PUSH
19800: EMPTY
19801: LIST
19802: LIST
19803: PUSH
19804: EMPTY
19805: LIST
19806: LIST
19807: PPUSH
19808: CALL_OW 69
19812: ST_TO_ADDR
// for i in medic_list do
19813: LD_ADDR_VAR 0 13
19817: PUSH
19818: LD_VAR 0 17
19822: PUSH
19823: FOR_IN
19824: IFFALSE 19842
// ComMoveToArea ( i , healArea ) ;
19826: LD_VAR 0 13
19830: PPUSH
19831: LD_VAR 0 10
19835: PPUSH
19836: CALL_OW 113
19840: GO 19823
19842: POP
19843: POP
// repeat wait ( 0 0$1 ) ;
19844: LD_INT 35
19846: PPUSH
19847: CALL_OW 67
// damageUnit_list = FilterAllUnits ( [ [ f_side , side ] , [ f_and , [ f_not , [ f_lives , 550 ] ] , [ f_lives , 250 ] ] ] ) ;
19851: LD_ADDR_VAR 0 16
19855: PUSH
19856: LD_INT 22
19858: PUSH
19859: LD_VAR 0 1
19863: PUSH
19864: EMPTY
19865: LIST
19866: LIST
19867: PUSH
19868: LD_INT 1
19870: PUSH
19871: LD_INT 3
19873: PUSH
19874: LD_INT 24
19876: PUSH
19877: LD_INT 550
19879: PUSH
19880: EMPTY
19881: LIST
19882: LIST
19883: PUSH
19884: EMPTY
19885: LIST
19886: LIST
19887: PUSH
19888: LD_INT 24
19890: PUSH
19891: LD_INT 250
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: LIST
19902: PUSH
19903: EMPTY
19904: LIST
19905: LIST
19906: PPUSH
19907: CALL_OW 69
19911: ST_TO_ADDR
// soldiersOK_list = FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] , [ f_lives , 1000 ] ] ) ;
19912: LD_ADDR_VAR 0 18
19916: PUSH
19917: LD_INT 22
19919: PUSH
19920: LD_VAR 0 1
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: PUSH
19929: LD_INT 2
19931: PUSH
19932: LD_INT 25
19934: PUSH
19935: LD_INT 1
19937: PUSH
19938: EMPTY
19939: LIST
19940: LIST
19941: PUSH
19942: LD_INT 25
19944: PUSH
19945: LD_INT 5
19947: PUSH
19948: EMPTY
19949: LIST
19950: LIST
19951: PUSH
19952: LD_INT 25
19954: PUSH
19955: LD_INT 8
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: PUSH
19962: LD_INT 25
19964: PUSH
19965: LD_INT 9
19967: PUSH
19968: EMPTY
19969: LIST
19970: LIST
19971: PUSH
19972: EMPTY
19973: LIST
19974: LIST
19975: LIST
19976: LIST
19977: LIST
19978: PUSH
19979: LD_INT 24
19981: PUSH
19982: LD_INT 1000
19984: PUSH
19985: EMPTY
19986: LIST
19987: LIST
19988: PUSH
19989: EMPTY
19990: LIST
19991: LIST
19992: LIST
19993: PPUSH
19994: CALL_OW 69
19998: ST_TO_ADDR
// if medicCount > 0 then
19999: LD_VAR 0 7
20003: PUSH
20004: LD_INT 0
20006: GREATER
20007: IFFALSE 20081
// begin if damageUnit_list > 0 then
20009: LD_VAR 0 16
20013: PUSH
20014: LD_INT 0
20016: GREATER
20017: IFFALSE 20081
// begin for i in damageUnit_list do
20019: LD_ADDR_VAR 0 13
20023: PUSH
20024: LD_VAR 0 16
20028: PUSH
20029: FOR_IN
20030: IFFALSE 20079
// begin ComMoveToArea ( i , healArea ) ;
20032: LD_VAR 0 13
20036: PPUSH
20037: LD_VAR 0 10
20041: PPUSH
20042: CALL_OW 113
// for j in medic_list do
20046: LD_ADDR_VAR 0 14
20050: PUSH
20051: LD_VAR 0 17
20055: PUSH
20056: FOR_IN
20057: IFFALSE 20075
// AddComHeal ( j , i ) ;
20059: LD_VAR 0 14
20063: PPUSH
20064: LD_VAR 0 13
20068: PPUSH
20069: CALL_OW 188
20073: GO 20056
20075: POP
20076: POP
// end ;
20077: GO 20029
20079: POP
20080: POP
// end ; end ; for i in soldiersOK_list do
20081: LD_ADDR_VAR 0 13
20085: PUSH
20086: LD_VAR 0 18
20090: PUSH
20091: FOR_IN
20092: IFFALSE 20268
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20094: LD_ADDR_VAR 0 21
20098: PUSH
20099: LD_INT 22
20101: PUSH
20102: LD_VAR 0 11
20106: PUSH
20107: EMPTY
20108: LIST
20109: LIST
20110: PPUSH
20111: CALL_OW 69
20115: PPUSH
20116: LD_VAR 0 13
20120: PPUSH
20121: CALL_OW 74
20125: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20126: LD_ADDR_VAR 0 22
20130: PUSH
20131: LD_INT 22
20133: PUSH
20134: LD_VAR 0 11
20138: PUSH
20139: EMPTY
20140: LIST
20141: LIST
20142: PUSH
20143: LD_INT 2
20145: PUSH
20146: LD_INT 59
20148: PUSH
20149: EMPTY
20150: LIST
20151: PUSH
20152: LD_INT 21
20154: PUSH
20155: LD_INT 1
20157: PUSH
20158: EMPTY
20159: LIST
20160: LIST
20161: PUSH
20162: LD_INT 21
20164: PUSH
20165: LD_INT 2
20167: PUSH
20168: EMPTY
20169: LIST
20170: LIST
20171: PUSH
20172: EMPTY
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: PUSH
20178: EMPTY
20179: LIST
20180: LIST
20181: PUSH
20182: EMPTY
20183: LIST
20184: PPUSH
20185: CALL_OW 69
20189: PPUSH
20190: LD_VAR 0 13
20194: PPUSH
20195: CALL_OW 74
20199: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20200: LD_VAR 0 13
20204: PPUSH
20205: LD_VAR 0 21
20209: PPUSH
20210: CALL_OW 296
20214: PUSH
20215: LD_INT 8
20217: PLUS
20218: PUSH
20219: LD_VAR 0 13
20223: PPUSH
20224: LD_VAR 0 22
20228: PPUSH
20229: CALL_OW 296
20233: LESS
20234: IFFALSE 20252
// begin ComAttackUnit ( i , target1 ) ;
20236: LD_VAR 0 13
20240: PPUSH
20241: LD_VAR 0 21
20245: PPUSH
20246: CALL_OW 115
// end else
20250: GO 20266
// begin ComAttackUnit ( i , target2 ) ;
20252: LD_VAR 0 13
20256: PPUSH
20257: LD_VAR 0 22
20261: PPUSH
20262: CALL_OW 115
// end ; end ;
20266: GO 20091
20268: POP
20269: POP
// for i in soldiersOK_list do
20270: LD_ADDR_VAR 0 13
20274: PUSH
20275: LD_VAR 0 18
20279: PUSH
20280: FOR_IN
20281: IFFALSE 20457
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
20283: LD_ADDR_VAR 0 21
20287: PUSH
20288: LD_INT 22
20290: PUSH
20291: LD_VAR 0 11
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PPUSH
20300: CALL_OW 69
20304: PPUSH
20305: LD_VAR 0 13
20309: PPUSH
20310: CALL_OW 74
20314: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
20315: LD_ADDR_VAR 0 22
20319: PUSH
20320: LD_INT 22
20322: PUSH
20323: LD_VAR 0 11
20327: PUSH
20328: EMPTY
20329: LIST
20330: LIST
20331: PUSH
20332: LD_INT 2
20334: PUSH
20335: LD_INT 59
20337: PUSH
20338: EMPTY
20339: LIST
20340: PUSH
20341: LD_INT 21
20343: PUSH
20344: LD_INT 1
20346: PUSH
20347: EMPTY
20348: LIST
20349: LIST
20350: PUSH
20351: LD_INT 21
20353: PUSH
20354: LD_INT 2
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: LIST
20365: LIST
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: EMPTY
20372: LIST
20373: PPUSH
20374: CALL_OW 69
20378: PPUSH
20379: LD_VAR 0 13
20383: PPUSH
20384: CALL_OW 74
20388: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
20389: LD_VAR 0 13
20393: PPUSH
20394: LD_VAR 0 21
20398: PPUSH
20399: CALL_OW 296
20403: PUSH
20404: LD_INT 8
20406: PLUS
20407: PUSH
20408: LD_VAR 0 13
20412: PPUSH
20413: LD_VAR 0 22
20417: PPUSH
20418: CALL_OW 296
20422: LESS
20423: IFFALSE 20441
// begin ComAttackUnit ( i , target1 ) ;
20425: LD_VAR 0 13
20429: PPUSH
20430: LD_VAR 0 21
20434: PPUSH
20435: CALL_OW 115
// end else
20439: GO 20455
// begin ComAttackUnit ( i , target2 ) ;
20441: LD_VAR 0 13
20445: PPUSH
20446: LD_VAR 0 22
20450: PPUSH
20451: CALL_OW 115
// end ; end ;
20455: GO 20280
20457: POP
20458: POP
// until soldiersOK_list = [ ] ;
20459: LD_VAR 0 18
20463: PUSH
20464: EMPTY
20465: EQUAL
20466: IFFALSE 19844
// end ;
20468: LD_VAR 0 12
20472: RET
// export function TameApemans ; var i , j , b , arm , dep , tmp ; begin
20473: LD_INT 0
20475: PPUSH
20476: PPUSH
20477: PPUSH
20478: PPUSH
20479: PPUSH
20480: PPUSH
20481: PPUSH
// repeat wait ( 0 0$1 ) ;
20482: LD_INT 35
20484: PPUSH
20485: CALL_OW 67
// tmp := FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] , [ f_not , [ f_hastask ] ] ] ) ;
20489: LD_ADDR_VAR 0 7
20493: PUSH
20494: LD_INT 22
20496: PUSH
20497: LD_INT 2
20499: PUSH
20500: EMPTY
20501: LIST
20502: LIST
20503: PUSH
20504: LD_INT 25
20506: PUSH
20507: LD_INT 4
20509: PUSH
20510: EMPTY
20511: LIST
20512: LIST
20513: PUSH
20514: LD_INT 3
20516: PUSH
20517: LD_INT 60
20519: PUSH
20520: EMPTY
20521: LIST
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: PUSH
20527: EMPTY
20528: LIST
20529: LIST
20530: LIST
20531: PPUSH
20532: CALL_OW 69
20536: ST_TO_ADDR
// if not tmp then
20537: LD_VAR 0 7
20541: NOT
20542: IFFALSE 20546
// continue ;
20544: GO 20482
// for j in FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) do
20546: LD_ADDR_VAR 0 3
20550: PUSH
20551: LD_INT 5
20553: PPUSH
20554: LD_INT 22
20556: PUSH
20557: LD_INT 0
20559: PUSH
20560: EMPTY
20561: LIST
20562: LIST
20563: PUSH
20564: LD_INT 25
20566: PUSH
20567: LD_INT 12
20569: PUSH
20570: EMPTY
20571: LIST
20572: LIST
20573: PUSH
20574: EMPTY
20575: LIST
20576: LIST
20577: PPUSH
20578: CALL_OW 70
20582: PUSH
20583: FOR_IN
20584: IFFALSE 20617
// ComTameXY ( tmp , GetX ( j ) , GetY ( j ) ) ;
20586: LD_VAR 0 7
20590: PPUSH
20591: LD_VAR 0 3
20595: PPUSH
20596: CALL_OW 250
20600: PPUSH
20601: LD_VAR 0 3
20605: PPUSH
20606: CALL_OW 251
20610: PPUSH
20611: CALL_OW 131
20615: GO 20583
20617: POP
20618: POP
// until FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) = 0 or FilterUnitsInArea ( NatureArea1 , [ [ f_side , 0 ] , [ f_class , 12 ] ] ) < 2 or tick >= 3 3$20 ;
20619: LD_INT 22
20621: PUSH
20622: LD_INT 2
20624: PUSH
20625: EMPTY
20626: LIST
20627: LIST
20628: PUSH
20629: LD_INT 25
20631: PUSH
20632: LD_INT 4
20634: PUSH
20635: EMPTY
20636: LIST
20637: LIST
20638: PUSH
20639: EMPTY
20640: LIST
20641: LIST
20642: PPUSH
20643: CALL_OW 69
20647: PUSH
20648: LD_INT 0
20650: EQUAL
20651: PUSH
20652: LD_INT 5
20654: PPUSH
20655: LD_INT 22
20657: PUSH
20658: LD_INT 0
20660: PUSH
20661: EMPTY
20662: LIST
20663: LIST
20664: PUSH
20665: LD_INT 25
20667: PUSH
20668: LD_INT 12
20670: PUSH
20671: EMPTY
20672: LIST
20673: LIST
20674: PUSH
20675: EMPTY
20676: LIST
20677: LIST
20678: PPUSH
20679: CALL_OW 70
20683: PUSH
20684: LD_INT 2
20686: LESS
20687: OR
20688: PUSH
20689: LD_OWVAR 1
20693: PUSH
20694: LD_INT 7000
20696: GREATEREQUAL
20697: OR
20698: IFFALSE 20482
// repeat wait ( 0 0$1 ) ;
20700: LD_INT 35
20702: PPUSH
20703: CALL_OW 67
// arm := FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_barracks ] ] ) ;
20707: LD_ADDR_VAR 0 5
20711: PUSH
20712: LD_INT 22
20714: PUSH
20715: LD_INT 2
20717: PUSH
20718: EMPTY
20719: LIST
20720: LIST
20721: PUSH
20722: LD_INT 30
20724: PUSH
20725: LD_INT 5
20727: PUSH
20728: EMPTY
20729: LIST
20730: LIST
20731: PUSH
20732: EMPTY
20733: LIST
20734: LIST
20735: PPUSH
20736: CALL_OW 69
20740: ST_TO_ADDR
// until arm ;
20741: LD_VAR 0 5
20745: IFFALSE 20700
// wait ( 0 0$25 ) ;
20747: LD_INT 875
20749: PPUSH
20750: CALL_OW 67
// dep := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20754: LD_ADDR_VAR 0 6
20758: PUSH
20759: LD_INT 22
20761: PUSH
20762: LD_INT 2
20764: PUSH
20765: EMPTY
20766: LIST
20767: LIST
20768: PUSH
20769: LD_INT 2
20771: PUSH
20772: LD_INT 30
20774: PUSH
20775: LD_INT 0
20777: PUSH
20778: EMPTY
20779: LIST
20780: LIST
20781: PUSH
20782: LD_INT 30
20784: PUSH
20785: LD_INT 1
20787: PUSH
20788: EMPTY
20789: LIST
20790: LIST
20791: PUSH
20792: EMPTY
20793: LIST
20794: LIST
20795: LIST
20796: PUSH
20797: EMPTY
20798: LIST
20799: LIST
20800: PPUSH
20801: CALL_OW 69
20805: ST_TO_ADDR
// j := 0 ;
20806: LD_ADDR_VAR 0 3
20810: PUSH
20811: LD_INT 0
20813: ST_TO_ADDR
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 12 ] ] ) do
20814: LD_ADDR_VAR 0 2
20818: PUSH
20819: LD_INT 22
20821: PUSH
20822: LD_INT 2
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: LD_INT 25
20831: PUSH
20832: LD_INT 12
20834: PUSH
20835: EMPTY
20836: LIST
20837: LIST
20838: PUSH
20839: EMPTY
20840: LIST
20841: LIST
20842: PPUSH
20843: CALL_OW 69
20847: PUSH
20848: FOR_IN
20849: IFFALSE 20936
// begin ComMoveXY ( i , 63 , 16 ) ;
20851: LD_VAR 0 2
20855: PPUSH
20856: LD_INT 63
20858: PPUSH
20859: LD_INT 16
20861: PPUSH
20862: CALL_OW 111
// j := j + 1 ;
20866: LD_ADDR_VAR 0 3
20870: PUSH
20871: LD_VAR 0 3
20875: PUSH
20876: LD_INT 1
20878: PLUS
20879: ST_TO_ADDR
// if j < 5 then
20880: LD_VAR 0 3
20884: PUSH
20885: LD_INT 5
20887: LESS
20888: IFFALSE 20906
// b := arm [ 1 ] else
20890: LD_ADDR_VAR 0 4
20894: PUSH
20895: LD_VAR 0 5
20899: PUSH
20900: LD_INT 1
20902: ARRAY
20903: ST_TO_ADDR
20904: GO 20920
// b := dep [ 1 ] ;
20906: LD_ADDR_VAR 0 4
20910: PUSH
20911: LD_VAR 0 6
20915: PUSH
20916: LD_INT 1
20918: ARRAY
20919: ST_TO_ADDR
// AddComEnterUnit ( i , b ) ;
20920: LD_VAR 0 2
20924: PPUSH
20925: LD_VAR 0 4
20929: PPUSH
20930: CALL_OW 180
// end ;
20934: GO 20848
20936: POP
20937: POP
// for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 4 ] ] ) do
20938: LD_ADDR_VAR 0 2
20942: PUSH
20943: LD_INT 22
20945: PUSH
20946: LD_INT 2
20948: PUSH
20949: EMPTY
20950: LIST
20951: LIST
20952: PUSH
20953: LD_INT 25
20955: PUSH
20956: LD_INT 4
20958: PUSH
20959: EMPTY
20960: LIST
20961: LIST
20962: PUSH
20963: EMPTY
20964: LIST
20965: LIST
20966: PPUSH
20967: CALL_OW 69
20971: PUSH
20972: FOR_IN
20973: IFFALSE 21019
// ComEnterUnit ( i , FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
20975: LD_VAR 0 2
20979: PPUSH
20980: LD_INT 22
20982: PUSH
20983: LD_INT 2
20985: PUSH
20986: EMPTY
20987: LIST
20988: LIST
20989: PUSH
20990: LD_INT 30
20992: PUSH
20993: LD_INT 8
20995: PUSH
20996: EMPTY
20997: LIST
20998: LIST
20999: PUSH
21000: EMPTY
21001: LIST
21002: LIST
21003: PPUSH
21004: CALL_OW 69
21008: PUSH
21009: LD_INT 1
21011: ARRAY
21012: PPUSH
21013: CALL_OW 120
21017: GO 20972
21019: POP
21020: POP
// end ;
21021: LD_VAR 0 1
21025: RET
// export function BuildingVehicleAndAttackEnemy ( side , fabric , vehCount , targetSide , weaponTab , engine , control , chassis ) ; var i , j , randWeapon , lastIndex , weaponTabTemp , temp , target1 , target2 ; begin
21026: LD_INT 0
21028: PPUSH
21029: PPUSH
21030: PPUSH
21031: PPUSH
21032: PPUSH
21033: PPUSH
21034: PPUSH
21035: PPUSH
21036: PPUSH
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) <= vehCount then
21037: LD_INT 22
21039: PUSH
21040: LD_VAR 0 1
21044: PUSH
21045: EMPTY
21046: LIST
21047: LIST
21048: PUSH
21049: LD_INT 21
21051: PUSH
21052: LD_INT 2
21054: PUSH
21055: EMPTY
21056: LIST
21057: LIST
21058: PUSH
21059: EMPTY
21060: LIST
21061: LIST
21062: PPUSH
21063: CALL_OW 69
21067: PUSH
21068: LD_VAR 0 3
21072: LESSEQUAL
21073: IFFALSE 21217
// for i = 1 to vehCount do
21075: LD_ADDR_VAR 0 10
21079: PUSH
21080: DOUBLE
21081: LD_INT 1
21083: DEC
21084: ST_TO_ADDR
21085: LD_VAR 0 3
21089: PUSH
21090: FOR_TO
21091: IFFALSE 21215
// begin randWeapon = weaponTab [ Rand ( 1 , weaponTab ) ] ;
21093: LD_ADDR_VAR 0 12
21097: PUSH
21098: LD_VAR 0 5
21102: PUSH
21103: LD_INT 1
21105: PPUSH
21106: LD_VAR 0 5
21110: PPUSH
21111: CALL_OW 12
21115: ARRAY
21116: ST_TO_ADDR
// if randWeapon = 46 then
21117: LD_VAR 0 12
21121: PUSH
21122: LD_INT 46
21124: EQUAL
21125: IFFALSE 21170
// AddComConstruct ( fabric , 24 , engine , control [ Rand ( 1 , control ) ] , randWeapon ) else
21127: LD_VAR 0 2
21131: PPUSH
21132: LD_INT 24
21134: PPUSH
21135: LD_VAR 0 6
21139: PPUSH
21140: LD_VAR 0 7
21144: PUSH
21145: LD_INT 1
21147: PPUSH
21148: LD_VAR 0 7
21152: PPUSH
21153: CALL_OW 12
21157: ARRAY
21158: PPUSH
21159: LD_VAR 0 12
21163: PPUSH
21164: CALL_OW 185
21168: GO 21213
// AddComConstruct ( fabric , chassis , engine , control [ Rand ( 1 , control ) ] , randWeapon ) ;
21170: LD_VAR 0 2
21174: PPUSH
21175: LD_VAR 0 8
21179: PPUSH
21180: LD_VAR 0 6
21184: PPUSH
21185: LD_VAR 0 7
21189: PUSH
21190: LD_INT 1
21192: PPUSH
21193: LD_VAR 0 7
21197: PPUSH
21198: CALL_OW 12
21202: ARRAY
21203: PPUSH
21204: LD_VAR 0 12
21208: PPUSH
21209: CALL_OW 185
// end ;
21213: GO 21090
21215: POP
21216: POP
// repeat wait ( 0 0$1 ) ;
21217: LD_INT 35
21219: PPUSH
21220: CALL_OW 67
// ; until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount ;
21224: LD_INT 22
21226: PUSH
21227: LD_VAR 0 1
21231: PUSH
21232: EMPTY
21233: LIST
21234: LIST
21235: PUSH
21236: LD_INT 21
21238: PUSH
21239: LD_INT 2
21241: PUSH
21242: EMPTY
21243: LIST
21244: LIST
21245: PUSH
21246: LD_INT 24
21248: PUSH
21249: LD_INT 250
21251: PUSH
21252: EMPTY
21253: LIST
21254: LIST
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: LIST
21260: PPUSH
21261: CALL_OW 69
21265: PUSH
21266: LD_VAR 0 3
21270: GREATEREQUAL
21271: IFFALSE 21217
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 250 ] ] ) >= vehCount then
21273: LD_INT 22
21275: PUSH
21276: LD_VAR 0 1
21280: PUSH
21281: EMPTY
21282: LIST
21283: LIST
21284: PUSH
21285: LD_INT 21
21287: PUSH
21288: LD_INT 2
21290: PUSH
21291: EMPTY
21292: LIST
21293: LIST
21294: PUSH
21295: LD_INT 24
21297: PUSH
21298: LD_INT 250
21300: PUSH
21301: EMPTY
21302: LIST
21303: LIST
21304: PUSH
21305: EMPTY
21306: LIST
21307: LIST
21308: LIST
21309: PPUSH
21310: CALL_OW 69
21314: PUSH
21315: LD_VAR 0 3
21319: GREATEREQUAL
21320: IFFALSE 21663
// begin repeat begin wait ( 0 0$1 ) ;
21322: LD_INT 35
21324: PPUSH
21325: CALL_OW 67
// if FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) > 0 then
21329: LD_INT 22
21331: PUSH
21332: LD_VAR 0 1
21336: PUSH
21337: EMPTY
21338: LIST
21339: LIST
21340: PUSH
21341: LD_INT 21
21343: PUSH
21344: LD_INT 2
21346: PUSH
21347: EMPTY
21348: LIST
21349: LIST
21350: PUSH
21351: LD_INT 24
21353: PUSH
21354: LD_INT 651
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: LIST
21365: PPUSH
21366: CALL_OW 69
21370: PUSH
21371: LD_INT 0
21373: GREATER
21374: IFFALSE 21602
// begin for i in FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_lives , 651 ] ] ) do
21376: LD_ADDR_VAR 0 10
21380: PUSH
21381: LD_INT 22
21383: PUSH
21384: LD_VAR 0 1
21388: PUSH
21389: EMPTY
21390: LIST
21391: LIST
21392: PUSH
21393: LD_INT 21
21395: PUSH
21396: LD_INT 2
21398: PUSH
21399: EMPTY
21400: LIST
21401: LIST
21402: PUSH
21403: LD_INT 24
21405: PUSH
21406: LD_INT 651
21408: PUSH
21409: EMPTY
21410: LIST
21411: LIST
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: LIST
21417: PPUSH
21418: CALL_OW 69
21422: PUSH
21423: FOR_IN
21424: IFFALSE 21600
// begin target1 := NearestUnitToUnit ( FilterAllUnits ( [ f_side , targetSide ] ) , i ) ;
21426: LD_ADDR_VAR 0 16
21430: PUSH
21431: LD_INT 22
21433: PUSH
21434: LD_VAR 0 4
21438: PUSH
21439: EMPTY
21440: LIST
21441: LIST
21442: PPUSH
21443: CALL_OW 69
21447: PPUSH
21448: LD_VAR 0 10
21452: PPUSH
21453: CALL_OW 74
21457: ST_TO_ADDR
// target2 := NearestUnitToUnit ( FilterAllUnits ( [ [ [ f_side , targetSide ] , [ f_or , [ f_occupied ] , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ] ) , i ) ;
21458: LD_ADDR_VAR 0 17
21462: PUSH
21463: LD_INT 22
21465: PUSH
21466: LD_VAR 0 4
21470: PUSH
21471: EMPTY
21472: LIST
21473: LIST
21474: PUSH
21475: LD_INT 2
21477: PUSH
21478: LD_INT 59
21480: PUSH
21481: EMPTY
21482: LIST
21483: PUSH
21484: LD_INT 21
21486: PUSH
21487: LD_INT 1
21489: PUSH
21490: EMPTY
21491: LIST
21492: LIST
21493: PUSH
21494: LD_INT 21
21496: PUSH
21497: LD_INT 2
21499: PUSH
21500: EMPTY
21501: LIST
21502: LIST
21503: PUSH
21504: EMPTY
21505: LIST
21506: LIST
21507: LIST
21508: LIST
21509: PUSH
21510: EMPTY
21511: LIST
21512: LIST
21513: PUSH
21514: EMPTY
21515: LIST
21516: PPUSH
21517: CALL_OW 69
21521: PPUSH
21522: LD_VAR 0 10
21526: PPUSH
21527: CALL_OW 74
21531: ST_TO_ADDR
// if GetDistUnits ( i , target1 ) + 8 < GetDistUnits ( i , target2 ) then
21532: LD_VAR 0 10
21536: PPUSH
21537: LD_VAR 0 16
21541: PPUSH
21542: CALL_OW 296
21546: PUSH
21547: LD_INT 8
21549: PLUS
21550: PUSH
21551: LD_VAR 0 10
21555: PPUSH
21556: LD_VAR 0 17
21560: PPUSH
21561: CALL_OW 296
21565: LESS
21566: IFFALSE 21584
// begin ComAttackUnit ( i , target1 ) ;
21568: LD_VAR 0 10
21572: PPUSH
21573: LD_VAR 0 16
21577: PPUSH
21578: CALL_OW 115
// end else
21582: GO 21598
// begin ComAttackUnit ( i , target2 ) ;
21584: LD_VAR 0 10
21588: PPUSH
21589: LD_VAR 0 17
21593: PPUSH
21594: CALL_OW 115
// end ; end ;
21598: GO 21423
21600: POP
21601: POP
// end ; end until FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_vehicle ] ] ) = 0 or FilterAllUnits ( [ [ f_side , targetSide ] ] ) = 0 ;
21602: LD_INT 22
21604: PUSH
21605: LD_VAR 0 1
21609: PUSH
21610: EMPTY
21611: LIST
21612: LIST
21613: PUSH
21614: LD_INT 21
21616: PUSH
21617: LD_INT 2
21619: PUSH
21620: EMPTY
21621: LIST
21622: LIST
21623: PUSH
21624: EMPTY
21625: LIST
21626: LIST
21627: PPUSH
21628: CALL_OW 69
21632: PUSH
21633: LD_INT 0
21635: EQUAL
21636: PUSH
21637: LD_INT 22
21639: PUSH
21640: LD_VAR 0 4
21644: PUSH
21645: EMPTY
21646: LIST
21647: LIST
21648: PUSH
21649: EMPTY
21650: LIST
21651: PPUSH
21652: CALL_OW 69
21656: PUSH
21657: LD_INT 0
21659: EQUAL
21660: OR
21661: IFFALSE 21322
// end ; end ;
21663: LD_VAR 0 9
21667: RET
// export function PlaceMines ( area , n ) ; var i , r , x ; begin
21668: LD_INT 0
21670: PPUSH
21671: PPUSH
21672: PPUSH
21673: PPUSH
// r := 100 ;
21674: LD_ADDR_VAR 0 5
21678: PUSH
21679: LD_INT 100
21681: ST_TO_ADDR
// x := 0 ;
21682: LD_ADDR_VAR 0 6
21686: PUSH
21687: LD_INT 0
21689: ST_TO_ADDR
// while ( x < n ) do
21690: LD_VAR 0 6
21694: PUSH
21695: LD_VAR 0 2
21699: LESS
21700: IFFALSE 21987
// for i = 1 to AreaToList ( area , 0 ) [ 1 ] do
21702: LD_ADDR_VAR 0 4
21706: PUSH
21707: DOUBLE
21708: LD_INT 1
21710: DEC
21711: ST_TO_ADDR
21712: LD_VAR 0 1
21716: PPUSH
21717: LD_INT 0
21719: PPUSH
21720: CALL_OW 517
21724: PUSH
21725: LD_INT 1
21727: ARRAY
21728: PUSH
21729: FOR_TO
21730: IFFALSE 21983
// begin if r > 50 then
21732: LD_VAR 0 5
21736: PUSH
21737: LD_INT 50
21739: GREATER
21740: IFFALSE 21959
// begin if not MineAtPos ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ) then
21742: LD_VAR 0 1
21746: PPUSH
21747: LD_INT 0
21749: PPUSH
21750: CALL_OW 517
21754: PUSH
21755: LD_INT 1
21757: ARRAY
21758: PUSH
21759: LD_VAR 0 4
21763: ARRAY
21764: PPUSH
21765: LD_VAR 0 1
21769: PPUSH
21770: LD_INT 0
21772: PPUSH
21773: CALL_OW 517
21777: PUSH
21778: LD_INT 2
21780: ARRAY
21781: PUSH
21782: LD_VAR 0 4
21786: ARRAY
21787: PPUSH
21788: CALL_OW 458
21792: NOT
21793: IFFALSE 21943
// begin PlaceMine ( AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] , 5 , 0 ) ;
21795: LD_VAR 0 1
21799: PPUSH
21800: LD_INT 0
21802: PPUSH
21803: CALL_OW 517
21807: PUSH
21808: LD_INT 1
21810: ARRAY
21811: PUSH
21812: LD_VAR 0 4
21816: ARRAY
21817: PPUSH
21818: LD_VAR 0 1
21822: PPUSH
21823: LD_INT 0
21825: PPUSH
21826: CALL_OW 517
21830: PUSH
21831: LD_INT 2
21833: ARRAY
21834: PUSH
21835: LD_VAR 0 4
21839: ARRAY
21840: PPUSH
21841: LD_INT 5
21843: PPUSH
21844: LD_INT 0
21846: PPUSH
21847: CALL_OW 454
// arabianMines := Insert ( arabianMines , 1 , [ AreaToList ( area , 0 ) [ 1 ] [ i ] , AreaToList ( area , 0 ) [ 2 ] [ i ] ] ) ;
21851: LD_ADDR_EXP 52
21855: PUSH
21856: LD_EXP 52
21860: PPUSH
21861: LD_INT 1
21863: PPUSH
21864: LD_VAR 0 1
21868: PPUSH
21869: LD_INT 0
21871: PPUSH
21872: CALL_OW 517
21876: PUSH
21877: LD_INT 1
21879: ARRAY
21880: PUSH
21881: LD_VAR 0 4
21885: ARRAY
21886: PUSH
21887: LD_VAR 0 1
21891: PPUSH
21892: LD_INT 0
21894: PPUSH
21895: CALL_OW 517
21899: PUSH
21900: LD_INT 2
21902: ARRAY
21903: PUSH
21904: LD_VAR 0 4
21908: ARRAY
21909: PUSH
21910: EMPTY
21911: LIST
21912: LIST
21913: PPUSH
21914: CALL_OW 2
21918: ST_TO_ADDR
// r := 0 ;
21919: LD_ADDR_VAR 0 5
21923: PUSH
21924: LD_INT 0
21926: ST_TO_ADDR
// x := x + 1 ;
21927: LD_ADDR_VAR 0 6
21931: PUSH
21932: LD_VAR 0 6
21936: PUSH
21937: LD_INT 1
21939: PLUS
21940: ST_TO_ADDR
// end else
21941: GO 21957
// r := r + 35 ;
21943: LD_ADDR_VAR 0 5
21947: PUSH
21948: LD_VAR 0 5
21952: PUSH
21953: LD_INT 35
21955: PLUS
21956: ST_TO_ADDR
// end else
21957: GO 21981
// r := r + rand ( 10 , 25 ) ;
21959: LD_ADDR_VAR 0 5
21963: PUSH
21964: LD_VAR 0 5
21968: PUSH
21969: LD_INT 10
21971: PPUSH
21972: LD_INT 25
21974: PPUSH
21975: CALL_OW 12
21979: PLUS
21980: ST_TO_ADDR
// end ;
21981: GO 21729
21983: POP
21984: POP
21985: GO 21690
// end ; end_of_file
21987: LD_VAR 0 3
21991: RET
// every 0 0$1 trigger russianAI = 1 do
21992: LD_EXP 41
21996: PUSH
21997: LD_INT 1
21999: EQUAL
22000: IFFALSE 22219
22002: GO 22004
22004: DISABLE
// begin enable ;
22005: ENABLE
// RepairBuilding ( 3 , ruDepot ) ;
22006: LD_INT 3
22008: PPUSH
22009: LD_EXP 32
22013: PPUSH
22014: CALL 16470 0 2
// RebuildBuildings ( 3 , ruDestroyedBuildings ) ;
22018: LD_INT 3
22020: PPUSH
22021: LD_EXP 44
22025: PPUSH
22026: CALL 16830 0 2
// if ruPossition = 1 then
22030: LD_EXP 43
22034: PUSH
22035: LD_INT 1
22037: EQUAL
22038: IFFALSE 22093
// HealUnitInBase ( 3 , RussianHealArea1 , WestRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22040: LD_INT 3
22042: PPUSH
22043: LD_INT 13
22045: PPUSH
22046: LD_INT 10
22048: PPUSH
22049: LD_INT 22
22051: PUSH
22052: LD_INT 3
22054: PUSH
22055: EMPTY
22056: LIST
22057: LIST
22058: PUSH
22059: LD_INT 21
22061: PUSH
22062: LD_INT 3
22064: PUSH
22065: EMPTY
22066: LIST
22067: LIST
22068: PUSH
22069: LD_INT 30
22071: PUSH
22072: LD_INT 8
22074: PUSH
22075: EMPTY
22076: LIST
22077: LIST
22078: PUSH
22079: EMPTY
22080: LIST
22081: LIST
22082: LIST
22083: PPUSH
22084: CALL_OW 69
22088: PPUSH
22089: CALL 17036 0 4
// if ruPossition = 2 then
22093: LD_EXP 43
22097: PUSH
22098: LD_INT 2
22100: EQUAL
22101: IFFALSE 22156
// HealUnitInBase ( 3 , RussianHealArea2 , MiddleRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22103: LD_INT 3
22105: PPUSH
22106: LD_INT 14
22108: PPUSH
22109: LD_INT 11
22111: PPUSH
22112: LD_INT 22
22114: PUSH
22115: LD_INT 3
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 21
22124: PUSH
22125: LD_INT 3
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 30
22134: PUSH
22135: LD_INT 8
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: LIST
22146: PPUSH
22147: CALL_OW 69
22151: PPUSH
22152: CALL 17036 0 4
// if ruPossition = 3 then
22156: LD_EXP 43
22160: PUSH
22161: LD_INT 3
22163: EQUAL
22164: IFFALSE 22219
// HealUnitInBase ( 3 , RussianHealArea3 , EastRussianBase , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) ) ;
22166: LD_INT 3
22168: PPUSH
22169: LD_INT 15
22171: PPUSH
22172: LD_INT 12
22174: PPUSH
22175: LD_INT 22
22177: PUSH
22178: LD_INT 3
22180: PUSH
22181: EMPTY
22182: LIST
22183: LIST
22184: PUSH
22185: LD_INT 21
22187: PUSH
22188: LD_INT 3
22190: PUSH
22191: EMPTY
22192: LIST
22193: LIST
22194: PUSH
22195: LD_INT 30
22197: PUSH
22198: LD_INT 8
22200: PUSH
22201: EMPTY
22202: LIST
22203: LIST
22204: PUSH
22205: EMPTY
22206: LIST
22207: LIST
22208: LIST
22209: PPUSH
22210: CALL_OW 69
22214: PPUSH
22215: CALL 17036 0 4
// end ;
22219: END
// every 0 0$1 do
22220: GO 22222
22222: DISABLE
// begin enable ;
22223: ENABLE
// if ruPossition = 1 then
22224: LD_EXP 43
22228: PUSH
22229: LD_INT 1
22231: EQUAL
22232: IFFALSE 22244
// EnterBunkerOrBarrack ( 3 , WestRussianBase ) ;
22234: LD_INT 3
22236: PPUSH
22237: LD_INT 10
22239: PPUSH
22240: CALL 16107 0 2
// if ruPossition = 2 then
22244: LD_EXP 43
22248: PUSH
22249: LD_INT 2
22251: EQUAL
22252: IFFALSE 22264
// EnterBunkerOrBarrack ( 3 , MiddleRussianBase ) ;
22254: LD_INT 3
22256: PPUSH
22257: LD_INT 11
22259: PPUSH
22260: CALL 16107 0 2
// if ruPossition = 3 then
22264: LD_EXP 43
22268: PUSH
22269: LD_INT 3
22271: EQUAL
22272: IFFALSE 22284
// EnterBunkerOrBarrack ( 3 , EastRussianBase ) ;
22274: LD_INT 3
22276: PPUSH
22277: LD_INT 12
22279: PPUSH
22280: CALL 16107 0 2
// IntBazooka ( 3 , 1 ) ;
22284: LD_INT 3
22286: PPUSH
22287: LD_INT 1
22289: PPUSH
22290: CALL 14906 0 2
// IntBazooka ( 6 , 1 ) ;
22294: LD_INT 6
22296: PPUSH
22297: LD_INT 1
22299: PPUSH
22300: CALL 14906 0 2
// end ;
22304: END
// every 5 5$0 trigger russianAI = 1 and IsOk ( ruFab ) and GetSide ( ruFab ) = 3 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) = 0 do
22305: LD_EXP 41
22309: PUSH
22310: LD_INT 1
22312: EQUAL
22313: PUSH
22314: LD_EXP 37
22318: PPUSH
22319: CALL_OW 302
22323: AND
22324: PUSH
22325: LD_EXP 37
22329: PPUSH
22330: CALL_OW 255
22334: PUSH
22335: LD_INT 3
22337: EQUAL
22338: AND
22339: PUSH
22340: LD_INT 22
22342: PUSH
22343: LD_INT 3
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: PUSH
22350: LD_INT 21
22352: PUSH
22353: LD_INT 2
22355: PUSH
22356: EMPTY
22357: LIST
22358: LIST
22359: PUSH
22360: LD_INT 33
22362: PUSH
22363: LD_INT 3
22365: PUSH
22366: EMPTY
22367: LIST
22368: LIST
22369: PUSH
22370: EMPTY
22371: LIST
22372: LIST
22373: LIST
22374: PPUSH
22375: CALL_OW 69
22379: PUSH
22380: LD_INT 0
22382: EQUAL
22383: AND
22384: IFFALSE 22592
22386: GO 22388
22388: DISABLE
// begin enable ;
22389: ENABLE
// if Difficulty = 1 then
22390: LD_OWVAR 67
22394: PUSH
22395: LD_INT 1
22397: EQUAL
22398: IFFALSE 22460
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 5 , 8 ) , 1 , [ 43 , 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22400: LD_INT 3
22402: PPUSH
22403: LD_EXP 37
22407: PPUSH
22408: LD_INT 5
22410: PPUSH
22411: LD_INT 8
22413: PPUSH
22414: CALL_OW 12
22418: PPUSH
22419: LD_INT 1
22421: PPUSH
22422: LD_INT 43
22424: PUSH
22425: LD_INT 44
22427: PUSH
22428: LD_INT 45
22430: PUSH
22431: LD_INT 46
22433: PUSH
22434: EMPTY
22435: LIST
22436: LIST
22437: LIST
22438: LIST
22439: PPUSH
22440: LD_INT 1
22442: PPUSH
22443: LD_INT 3
22445: PUSH
22446: LD_INT 3
22448: PUSH
22449: EMPTY
22450: LIST
22451: LIST
22452: PPUSH
22453: LD_INT 22
22455: PPUSH
22456: CALL 21026 0 8
// if Difficulty = 2 then
22460: LD_OWVAR 67
22464: PUSH
22465: LD_INT 2
22467: EQUAL
22468: IFFALSE 22526
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 6 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22470: LD_INT 3
22472: PPUSH
22473: LD_EXP 37
22477: PPUSH
22478: LD_INT 6
22480: PPUSH
22481: LD_INT 8
22483: PPUSH
22484: CALL_OW 12
22488: PPUSH
22489: LD_INT 1
22491: PPUSH
22492: LD_INT 44
22494: PUSH
22495: LD_INT 45
22497: PUSH
22498: LD_INT 46
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: LIST
22505: PPUSH
22506: LD_INT 1
22508: PPUSH
22509: LD_INT 3
22511: PUSH
22512: LD_INT 3
22514: PUSH
22515: EMPTY
22516: LIST
22517: LIST
22518: PPUSH
22519: LD_INT 22
22521: PPUSH
22522: CALL 21026 0 8
// if Difficulty >= 3 then
22526: LD_OWVAR 67
22530: PUSH
22531: LD_INT 3
22533: GREATEREQUAL
22534: IFFALSE 22592
// BuildingVehicleAndAttackEnemy ( 3 , ruFab , rand ( 7 , 8 ) , 1 , [ 44 , 45 , 46 ] , 1 , [ 3 , 3 ] , 22 ) ;
22536: LD_INT 3
22538: PPUSH
22539: LD_EXP 37
22543: PPUSH
22544: LD_INT 7
22546: PPUSH
22547: LD_INT 8
22549: PPUSH
22550: CALL_OW 12
22554: PPUSH
22555: LD_INT 1
22557: PPUSH
22558: LD_INT 44
22560: PUSH
22561: LD_INT 45
22563: PUSH
22564: LD_INT 46
22566: PUSH
22567: EMPTY
22568: LIST
22569: LIST
22570: LIST
22571: PPUSH
22572: LD_INT 1
22574: PPUSH
22575: LD_INT 3
22577: PUSH
22578: LD_INT 3
22580: PUSH
22581: EMPTY
22582: LIST
22583: LIST
22584: PPUSH
22585: LD_INT 22
22587: PPUSH
22588: CALL 21026 0 8
// end ;
22592: END
// every 0 0$1 trigger arabianMines and arabianTrait do var i ;
22593: LD_EXP 52
22597: PUSH
22598: LD_EXP 51
22602: AND
22603: IFFALSE 22724
22605: GO 22607
22607: DISABLE
22608: LD_INT 0
22610: PPUSH
// begin enable ;
22611: ENABLE
// for i in arabianMines do
22612: LD_ADDR_VAR 0 1
22616: PUSH
22617: LD_EXP 52
22621: PUSH
22622: FOR_IN
22623: IFFALSE 22722
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , i [ 1 ] , i [ 2 ] , 3 ] ] ) then
22625: LD_INT 22
22627: PUSH
22628: LD_INT 1
22630: PUSH
22631: EMPTY
22632: LIST
22633: LIST
22634: PUSH
22635: LD_INT 92
22637: PUSH
22638: LD_VAR 0 1
22642: PUSH
22643: LD_INT 1
22645: ARRAY
22646: PUSH
22647: LD_VAR 0 1
22651: PUSH
22652: LD_INT 2
22654: ARRAY
22655: PUSH
22656: LD_INT 3
22658: PUSH
22659: EMPTY
22660: LIST
22661: LIST
22662: LIST
22663: LIST
22664: PUSH
22665: EMPTY
22666: LIST
22667: LIST
22668: PPUSH
22669: CALL_OW 69
22673: IFFALSE 22720
// begin LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , 5 ) ;
22675: LD_VAR 0 1
22679: PUSH
22680: LD_INT 1
22682: ARRAY
22683: PPUSH
22684: LD_VAR 0 1
22688: PUSH
22689: LD_INT 2
22691: ARRAY
22692: PPUSH
22693: LD_INT 5
22695: PPUSH
22696: CALL_OW 456
// arabianMines := Delete ( arabianMines , i ) ;
22700: LD_ADDR_EXP 52
22704: PUSH
22705: LD_EXP 52
22709: PPUSH
22710: LD_VAR 0 1
22714: PPUSH
22715: CALL_OW 3
22719: ST_TO_ADDR
// end ; end ;
22720: GO 22622
22722: POP
22723: POP
// end ; end_of_file
22724: PPOPN 1
22726: END
// on BuildingStarted ( building , unit ) do begin if GetSide ( building ) = 4 then
22727: LD_VAR 0 1
22731: PPUSH
22732: CALL_OW 255
22736: PUSH
22737: LD_INT 4
22739: EQUAL
22740: IFFALSE 22754
// SetBName ( building , epsilon ) ;
22742: LD_VAR 0 1
22746: PPUSH
22747: LD_STRING epsilon
22749: PPUSH
22750: CALL_OW 500
// if GetSide ( building ) = 1 and GetBType ( building ) = b_depot then
22754: LD_VAR 0 1
22758: PPUSH
22759: CALL_OW 255
22763: PUSH
22764: LD_INT 1
22766: EQUAL
22767: PUSH
22768: LD_VAR 0 1
22772: PPUSH
22773: CALL_OW 266
22777: PUSH
22778: LD_INT 0
22780: EQUAL
22781: AND
22782: IFFALSE 22796
// SetBName ( building , epsilon ) ;
22784: LD_VAR 0 1
22788: PPUSH
22789: LD_STRING epsilon
22791: PPUSH
22792: CALL_OW 500
// if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
22796: LD_VAR 0 1
22800: PPUSH
22801: CALL_OW 255
22805: PUSH
22806: LD_INT 3
22808: EQUAL
22809: PUSH
22810: LD_VAR 0 1
22814: PPUSH
22815: CALL_OW 266
22819: PUSH
22820: LD_INT 0
22822: EQUAL
22823: AND
22824: IFFALSE 22838
// SetBName ( building , chuikov ) ;
22826: LD_VAR 0 1
22830: PPUSH
22831: LD_STRING chuikov
22833: PPUSH
22834: CALL_OW 500
// if GetSide ( building ) = 2 then
22838: LD_VAR 0 1
22842: PPUSH
22843: CALL_OW 255
22847: PUSH
22848: LD_INT 2
22850: EQUAL
22851: IFFALSE 22907
// begin if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
22853: LD_VAR 0 1
22857: PPUSH
22858: CALL_OW 266
22862: PUSH
22863: LD_INT 6
22865: EQUAL
22866: PUSH
22867: LD_VAR 0 1
22871: PPUSH
22872: CALL_OW 266
22876: PUSH
22877: LD_INT 9
22879: EQUAL
22880: OR
22881: IFFALSE 22907
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
22883: LD_VAR 0 1
22887: PPUSH
22888: LD_INT 10
22890: PPUSH
22891: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
22895: LD_VAR 0 1
22899: PPUSH
22900: LD_INT 11
22902: PPUSH
22903: CALL_OW 207
// end ; end ; if GetSide ( building ) = 3 then
22907: LD_VAR 0 1
22911: PPUSH
22912: CALL_OW 255
22916: PUSH
22917: LD_INT 3
22919: EQUAL
22920: IFFALSE 22954
// begin ruDepotConstructed := true ;
22922: LD_ADDR_EXP 59
22926: PUSH
22927: LD_INT 1
22929: ST_TO_ADDR
// if GetBType ( building ) = 2 then
22930: LD_VAR 0 1
22934: PPUSH
22935: CALL_OW 266
22939: PUSH
22940: LD_INT 2
22942: EQUAL
22943: IFFALSE 22954
// AddComUpgrade ( building ) ;
22945: LD_VAR 0 1
22949: PPUSH
22950: CALL_OW 206
// end ; end ;
22954: PPOPN 2
22956: END
// on UnitGoesToRed ( un ) do var i , tmpMeh ;
22957: LD_INT 0
22959: PPUSH
22960: PPUSH
// begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_vehicle ] ] ) and not telep_ru_dialog then
22961: LD_VAR 0 1
22965: PUSH
22966: LD_INT 22
22968: PUSH
22969: LD_INT 3
22971: PUSH
22972: EMPTY
22973: LIST
22974: LIST
22975: PUSH
22976: LD_INT 23
22978: PUSH
22979: LD_INT 3
22981: PUSH
22982: EMPTY
22983: LIST
22984: LIST
22985: PUSH
22986: LD_INT 21
22988: PUSH
22989: LD_INT 2
22991: PUSH
22992: EMPTY
22993: LIST
22994: LIST
22995: PUSH
22996: EMPTY
22997: LIST
22998: LIST
22999: LIST
23000: PPUSH
23001: CALL_OW 69
23005: IN
23006: PUSH
23007: LD_EXP 63
23011: NOT
23012: AND
23013: IFFALSE 23044
// telep_ru_dialog := [ GetX ( un ) , GetY ( un ) ] ;
23015: LD_ADDR_EXP 63
23019: PUSH
23020: LD_VAR 0 1
23024: PPUSH
23025: CALL_OW 250
23029: PUSH
23030: LD_VAR 0 1
23034: PPUSH
23035: CALL_OW 251
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: ST_TO_ADDR
// end ;
23044: PPOPN 3
23046: END
// on LeaveVehicle ( vehicle , human ) do begin if GetSide ( human ) = 3 and GetSide ( ruFab ) = 3 and IsOk ( rufab ) then
23047: LD_VAR 0 2
23051: PPUSH
23052: CALL_OW 255
23056: PUSH
23057: LD_INT 3
23059: EQUAL
23060: PUSH
23061: LD_EXP 37
23065: PPUSH
23066: CALL_OW 255
23070: PUSH
23071: LD_INT 3
23073: EQUAL
23074: AND
23075: PUSH
23076: LD_EXP 37
23080: PPUSH
23081: CALL_OW 302
23085: AND
23086: IFFALSE 23102
// ComEnterUnit ( human , ruFab ) ;
23088: LD_VAR 0 2
23092: PPUSH
23093: LD_EXP 37
23097: PPUSH
23098: CALL_OW 120
// end ;
23102: PPOPN 2
23104: END
// on BuildingComplete ( building ) do var i , engineers , sol , tmp ;
23105: LD_INT 0
23107: PPUSH
23108: PPUSH
23109: PPUSH
23110: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
23111: LD_VAR 0 1
23115: PPUSH
23116: CALL_OW 255
23120: PUSH
23121: LD_INT 1
23123: EQUAL
23124: PUSH
23125: LD_EXP 67
23129: PUSH
23130: LD_INT 0
23132: EQUAL
23133: AND
23134: IFFALSE 23336
// begin if GetBType ( building ) = 26 or GetBType ( building ) = 27 or GetBType ( building ) = 28 then
23136: LD_VAR 0 1
23140: PPUSH
23141: CALL_OW 266
23145: PUSH
23146: LD_INT 26
23148: EQUAL
23149: PUSH
23150: LD_VAR 0 1
23154: PPUSH
23155: CALL_OW 266
23159: PUSH
23160: LD_INT 27
23162: EQUAL
23163: OR
23164: PUSH
23165: LD_VAR 0 1
23169: PPUSH
23170: CALL_OW 266
23174: PUSH
23175: LD_INT 28
23177: EQUAL
23178: OR
23179: IFFALSE 23336
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) > 0 then
23181: LD_INT 22
23183: PUSH
23184: LD_INT 1
23186: PUSH
23187: EMPTY
23188: LIST
23189: LIST
23190: PUSH
23191: LD_INT 2
23193: PUSH
23194: LD_INT 30
23196: PUSH
23197: LD_INT 7
23199: PUSH
23200: EMPTY
23201: LIST
23202: LIST
23203: PUSH
23204: LD_INT 30
23206: PUSH
23207: LD_INT 8
23209: PUSH
23210: EMPTY
23211: LIST
23212: LIST
23213: PUSH
23214: EMPTY
23215: LIST
23216: LIST
23217: LIST
23218: PUSH
23219: EMPTY
23220: LIST
23221: LIST
23222: PPUSH
23223: CALL_OW 69
23227: PUSH
23228: LD_INT 0
23230: GREATER
23231: IFFALSE 23336
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
23233: LD_ADDR_VAR 0 2
23237: PUSH
23238: LD_INT 22
23240: PUSH
23241: LD_INT 1
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: PUSH
23248: LD_INT 2
23250: PUSH
23251: LD_INT 30
23253: PUSH
23254: LD_INT 7
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: PUSH
23261: LD_INT 30
23263: PUSH
23264: LD_INT 8
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PUSH
23271: EMPTY
23272: LIST
23273: LIST
23274: LIST
23275: PUSH
23276: EMPTY
23277: LIST
23278: LIST
23279: PPUSH
23280: CALL_OW 69
23284: PUSH
23285: FOR_IN
23286: IFFALSE 23334
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
23288: LD_VAR 0 2
23292: PPUSH
23293: LD_INT 1
23295: PPUSH
23296: CALL_OW 268
23300: PUSH
23301: LD_INT 11
23303: EQUAL
23304: PUSH
23305: LD_VAR 0 2
23309: PPUSH
23310: LD_INT 2
23312: PPUSH
23313: CALL_OW 268
23317: PUSH
23318: LD_INT 11
23320: EQUAL
23321: OR
23322: IFFALSE 23332
// eventVar1 = 1 ;
23324: LD_ADDR_EXP 67
23328: PUSH
23329: LD_INT 1
23331: ST_TO_ADDR
23332: GO 23285
23334: POP
23335: POP
// end ; end ; end ; if GetSide ( building ) = 3 then
23336: LD_VAR 0 1
23340: PPUSH
23341: CALL_OW 255
23345: PUSH
23346: LD_INT 3
23348: EQUAL
23349: IFFALSE 23829
// begin if GetBType ( building ) = b_depot then
23351: LD_VAR 0 1
23355: PPUSH
23356: CALL_OW 266
23360: PUSH
23361: LD_INT 0
23363: EQUAL
23364: IFFALSE 23436
// begin SetResourceType ( GetBase ( building ) , 1 , 5000 ) ;
23366: LD_VAR 0 1
23370: PPUSH
23371: CALL_OW 274
23375: PPUSH
23376: LD_INT 1
23378: PPUSH
23379: LD_INT 5000
23381: PPUSH
23382: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 2 , 300 ) ;
23386: LD_VAR 0 1
23390: PPUSH
23391: CALL_OW 274
23395: PPUSH
23396: LD_INT 2
23398: PPUSH
23399: LD_INT 300
23401: PPUSH
23402: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 100 ) ;
23406: LD_VAR 0 1
23410: PPUSH
23411: CALL_OW 274
23415: PPUSH
23416: LD_INT 3
23418: PPUSH
23419: LD_INT 100
23421: PPUSH
23422: CALL_OW 277
// ruDepot = building ;
23426: LD_ADDR_EXP 32
23430: PUSH
23431: LD_VAR 0 1
23435: ST_TO_ADDR
// end ; if GetBType ( building ) = 0 or GetBType ( building ) = 2 or GetBType ( building ) = 4 then
23436: LD_VAR 0 1
23440: PPUSH
23441: CALL_OW 266
23445: PUSH
23446: LD_INT 0
23448: EQUAL
23449: PUSH
23450: LD_VAR 0 1
23454: PPUSH
23455: CALL_OW 266
23459: PUSH
23460: LD_INT 2
23462: EQUAL
23463: OR
23464: PUSH
23465: LD_VAR 0 1
23469: PPUSH
23470: CALL_OW 266
23474: PUSH
23475: LD_INT 4
23477: EQUAL
23478: OR
23479: IFFALSE 23490
// ComUpgrade ( building ) ;
23481: LD_VAR 0 1
23485: PPUSH
23486: CALL_OW 146
// if GetBType ( building ) = b_lab then
23490: LD_VAR 0 1
23494: PPUSH
23495: CALL_OW 266
23499: PUSH
23500: LD_INT 6
23502: EQUAL
23503: IFFALSE 23706
// begin if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_lab_full ] ] ) = 0 then
23505: LD_INT 22
23507: PUSH
23508: LD_INT 3
23510: PUSH
23511: EMPTY
23512: LIST
23513: LIST
23514: PUSH
23515: LD_INT 30
23517: PUSH
23518: LD_INT 8
23520: PUSH
23521: EMPTY
23522: LIST
23523: LIST
23524: PUSH
23525: EMPTY
23526: LIST
23527: LIST
23528: PPUSH
23529: CALL_OW 69
23533: PUSH
23534: LD_INT 0
23536: EQUAL
23537: IFFALSE 23575
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
23539: LD_VAR 0 1
23543: PPUSH
23544: LD_INT 10
23546: PPUSH
23547: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_computer ) ;
23551: LD_VAR 0 1
23555: PPUSH
23556: LD_INT 12
23558: PPUSH
23559: CALL_OW 207
// ruLab1 = building ;
23563: LD_ADDR_EXP 33
23567: PUSH
23568: LD_VAR 0 1
23572: ST_TO_ADDR
// end else
23573: GO 23609
// begin AddComUpgradeLab ( building , b_lab_siberium ) ;
23575: LD_VAR 0 1
23579: PPUSH
23580: LD_INT 11
23582: PPUSH
23583: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_spacetime ) ;
23587: LD_VAR 0 1
23591: PPUSH
23592: LD_INT 14
23594: PPUSH
23595: CALL_OW 207
// ruLab2 = building ;
23599: LD_ADDR_EXP 34
23603: PUSH
23604: LD_VAR 0 1
23608: ST_TO_ADDR
// end ; ResAllTechs ( 3 , building , 3 ) ;
23609: LD_INT 3
23611: PPUSH
23612: LD_VAR 0 1
23616: PPUSH
23617: LD_INT 3
23619: PPUSH
23620: CALL 16022 0 3
// if ruDestroyedBuildings > 0 then
23624: LD_EXP 44
23628: PUSH
23629: LD_INT 0
23631: GREATER
23632: IFFALSE 23706
// begin ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23634: LD_ADDR_EXP 44
23638: PUSH
23639: LD_EXP 44
23643: PPUSH
23644: LD_INT 1
23646: PPUSH
23647: CALL_OW 3
23651: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23652: LD_ADDR_EXP 44
23656: PUSH
23657: LD_EXP 44
23661: PPUSH
23662: LD_INT 1
23664: PPUSH
23665: CALL_OW 3
23669: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23670: LD_ADDR_EXP 44
23674: PUSH
23675: LD_EXP 44
23679: PPUSH
23680: LD_INT 1
23682: PPUSH
23683: CALL_OW 3
23687: ST_TO_ADDR
// ruDestroyedBuildings := Delete ( ruDestroyedBuildings , 1 ) ;
23688: LD_ADDR_EXP 44
23692: PUSH
23693: LD_EXP 44
23697: PPUSH
23698: LD_INT 1
23700: PPUSH
23701: CALL_OW 3
23705: ST_TO_ADDR
// end ; end ; if GetBType ( building ) = b_bunker then
23706: LD_VAR 0 1
23710: PPUSH
23711: CALL_OW 266
23715: PUSH
23716: LD_INT 32
23718: EQUAL
23719: IFFALSE 23756
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23721: LD_VAR 0 1
23725: PPUSH
23726: LD_INT 44
23728: PUSH
23729: LD_INT 45
23731: PUSH
23732: LD_INT 46
23734: PUSH
23735: EMPTY
23736: LIST
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 1
23742: PPUSH
23743: LD_INT 3
23745: PPUSH
23746: CALL_OW 12
23750: ARRAY
23751: PPUSH
23752: CALL_OW 208
// if GetBType ( building ) = b_turret then
23756: LD_VAR 0 1
23760: PPUSH
23761: CALL_OW 266
23765: PUSH
23766: LD_INT 33
23768: EQUAL
23769: IFFALSE 23806
// AddComPlaceWeapon ( building , [ 44 , 45 , 46 ] [ Rand ( 1 , 3 ) ] ) ;
23771: LD_VAR 0 1
23775: PPUSH
23776: LD_INT 44
23778: PUSH
23779: LD_INT 45
23781: PUSH
23782: LD_INT 46
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: LIST
23789: PUSH
23790: LD_INT 1
23792: PPUSH
23793: LD_INT 3
23795: PPUSH
23796: CALL_OW 12
23800: ARRAY
23801: PPUSH
23802: CALL_OW 208
// if GetBType ( building ) = b_ext_computer then
23806: LD_VAR 0 1
23810: PPUSH
23811: CALL_OW 266
23815: PUSH
23816: LD_INT 24
23818: EQUAL
23819: IFFALSE 23829
// russianAI = 1 ;
23821: LD_ADDR_EXP 41
23825: PUSH
23826: LD_INT 1
23828: ST_TO_ADDR
// end ; if GetSide ( building ) = 2 then
23829: LD_VAR 0 1
23833: PPUSH
23834: CALL_OW 255
23838: PUSH
23839: LD_INT 2
23841: EQUAL
23842: IFFALSE 24721
// begin if GetBType ( building ) = arBuildingsTab [ 1 ] [ 1 ] then
23844: LD_VAR 0 1
23848: PPUSH
23849: CALL_OW 266
23853: PUSH
23854: LD_EXP 70
23858: PUSH
23859: LD_INT 1
23861: ARRAY
23862: PUSH
23863: LD_INT 1
23865: ARRAY
23866: EQUAL
23867: IFFALSE 23994
// begin arBuildingsTab := Delete ( arBuildingsTab , 1 ) ;
23869: LD_ADDR_EXP 70
23873: PUSH
23874: LD_EXP 70
23878: PPUSH
23879: LD_INT 1
23881: PPUSH
23882: CALL_OW 3
23886: ST_TO_ADDR
// if arBuildingsTab then
23887: LD_EXP 70
23891: IFFALSE 23994
// begin engineers = FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 2 ] ] ) ;
23893: LD_ADDR_VAR 0 3
23897: PUSH
23898: LD_INT 22
23900: PUSH
23901: LD_INT 2
23903: PUSH
23904: EMPTY
23905: LIST
23906: LIST
23907: PUSH
23908: LD_INT 25
23910: PUSH
23911: LD_INT 2
23913: PUSH
23914: EMPTY
23915: LIST
23916: LIST
23917: PUSH
23918: EMPTY
23919: LIST
23920: LIST
23921: PPUSH
23922: CALL_OW 69
23926: ST_TO_ADDR
// if engineers then
23927: LD_VAR 0 3
23931: IFFALSE 23994
// AddComBuild ( engineers , arBuildingsTab [ 1 ] [ 1 ] , arBuildingsTab [ 1 ] [ 2 ] , arBuildingsTab [ 1 ] [ 3 ] , arBuildingsTab [ 1 ] [ 4 ] ) ;
23933: LD_VAR 0 3
23937: PPUSH
23938: LD_EXP 70
23942: PUSH
23943: LD_INT 1
23945: ARRAY
23946: PUSH
23947: LD_INT 1
23949: ARRAY
23950: PPUSH
23951: LD_EXP 70
23955: PUSH
23956: LD_INT 1
23958: ARRAY
23959: PUSH
23960: LD_INT 2
23962: ARRAY
23963: PPUSH
23964: LD_EXP 70
23968: PUSH
23969: LD_INT 1
23971: ARRAY
23972: PUSH
23973: LD_INT 3
23975: ARRAY
23976: PPUSH
23977: LD_EXP 70
23981: PUSH
23982: LD_INT 1
23984: ARRAY
23985: PUSH
23986: LD_INT 4
23988: ARRAY
23989: PPUSH
23990: CALL_OW 205
// end ; end ; if GetBType ( building ) = b_breastwork then
23994: LD_VAR 0 1
23998: PPUSH
23999: CALL_OW 266
24003: PUSH
24004: LD_INT 31
24006: EQUAL
24007: IFFALSE 24153
// begin sol := FilterAllUnits ( [ [ f_side , 2 ] , [ f_or , [ f_class , 1 ] , [ f_class , 8 ] ] ] ) diff Dietrich ;
24009: LD_ADDR_VAR 0 4
24013: PUSH
24014: LD_INT 22
24016: PUSH
24017: LD_INT 2
24019: PUSH
24020: EMPTY
24021: LIST
24022: LIST
24023: PUSH
24024: LD_INT 2
24026: PUSH
24027: LD_INT 25
24029: PUSH
24030: LD_INT 1
24032: PUSH
24033: EMPTY
24034: LIST
24035: LIST
24036: PUSH
24037: LD_INT 25
24039: PUSH
24040: LD_INT 8
24042: PUSH
24043: EMPTY
24044: LIST
24045: LIST
24046: PUSH
24047: EMPTY
24048: LIST
24049: LIST
24050: LIST
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PPUSH
24056: CALL_OW 69
24060: PUSH
24061: LD_EXP 28
24065: DIFF
24066: ST_TO_ADDR
// if not sol then
24067: LD_VAR 0 4
24071: NOT
24072: IFFALSE 24076
// exit ;
24074: GO 24721
// for i in sol do
24076: LD_ADDR_VAR 0 2
24080: PUSH
24081: LD_VAR 0 4
24085: PUSH
24086: FOR_IN
24087: IFFALSE 24151
// if not GetTag ( i ) then
24089: LD_VAR 0 2
24093: PPUSH
24094: CALL_OW 110
24098: NOT
24099: IFFALSE 24149
// begin if IsInUnit ( i ) then
24101: LD_VAR 0 2
24105: PPUSH
24106: CALL_OW 310
24110: IFFALSE 24121
// ComExitBuilding ( i ) ;
24112: LD_VAR 0 2
24116: PPUSH
24117: CALL_OW 122
// AddComEnterUnit ( i , building ) ;
24121: LD_VAR 0 2
24125: PPUSH
24126: LD_VAR 0 1
24130: PPUSH
24131: CALL_OW 180
// SetTag ( i , 11 ) ;
24135: LD_VAR 0 2
24139: PPUSH
24140: LD_INT 11
24142: PPUSH
24143: CALL_OW 109
// break ;
24147: GO 24151
// end ;
24149: GO 24086
24151: POP
24152: POP
// end ; if GetBType ( building ) = b_depot then
24153: LD_VAR 0 1
24157: PPUSH
24158: CALL_OW 266
24162: PUSH
24163: LD_INT 0
24165: EQUAL
24166: IFFALSE 24252
// begin arDepot = building ;
24168: LD_ADDR_EXP 45
24172: PUSH
24173: LD_VAR 0 1
24177: ST_TO_ADDR
// ComMoveXY ( [ cargo1 , cargo2 ] , 71 , 19 ) ;
24178: LD_INT 38
24180: PUSH
24181: LD_INT 47
24183: PUSH
24184: EMPTY
24185: LIST
24186: LIST
24187: PPUSH
24188: LD_INT 71
24190: PPUSH
24191: LD_INT 19
24193: PPUSH
24194: CALL_OW 111
// SetResourceType ( GetBase ( building ) , 1 , 500 ) ;
24198: LD_VAR 0 1
24202: PPUSH
24203: CALL_OW 274
24207: PPUSH
24208: LD_INT 1
24210: PPUSH
24211: LD_INT 500
24213: PPUSH
24214: CALL_OW 277
// SetResourceType ( GetBase ( building ) , 3 , 30 ) ;
24218: LD_VAR 0 1
24222: PPUSH
24223: CALL_OW 274
24227: PPUSH
24228: LD_INT 3
24230: PPUSH
24231: LD_INT 30
24233: PPUSH
24234: CALL_OW 277
// ComEnterUnit ( Dietrich , building ) ;
24238: LD_EXP 28
24242: PPUSH
24243: LD_VAR 0 1
24247: PPUSH
24248: CALL_OW 120
// end ; if GetBType ( building ) = b_lab or GetBType ( building ) = b_lab_basic then
24252: LD_VAR 0 1
24256: PPUSH
24257: CALL_OW 266
24261: PUSH
24262: LD_INT 6
24264: EQUAL
24265: PUSH
24266: LD_VAR 0 1
24270: PPUSH
24271: CALL_OW 266
24275: PUSH
24276: LD_INT 9
24278: EQUAL
24279: OR
24280: IFFALSE 24331
// begin AddComUpgradeLab ( building , b_lab_weapon ) ;
24282: LD_VAR 0 1
24286: PPUSH
24287: LD_INT 10
24289: PPUSH
24290: CALL_OW 207
// AddComUpgradeLab ( building , b_lab_siberium ) ;
24294: LD_VAR 0 1
24298: PPUSH
24299: LD_INT 11
24301: PPUSH
24302: CALL_OW 207
// ResAllTechs ( 2 , building , 2 ) ;
24306: LD_INT 2
24308: PPUSH
24309: LD_VAR 0 1
24313: PPUSH
24314: LD_INT 2
24316: PPUSH
24317: CALL 16022 0 3
// arLab = building ;
24321: LD_ADDR_EXP 46
24325: PUSH
24326: LD_VAR 0 1
24330: ST_TO_ADDR
// end ; if GetBType ( building ) = 2 or GetBType ( building ) = 4 then
24331: LD_VAR 0 1
24335: PPUSH
24336: CALL_OW 266
24340: PUSH
24341: LD_INT 2
24343: EQUAL
24344: PUSH
24345: LD_VAR 0 1
24349: PPUSH
24350: CALL_OW 266
24354: PUSH
24355: LD_INT 4
24357: EQUAL
24358: OR
24359: IFFALSE 24430
// begin ComUpgrade ( building ) ;
24361: LD_VAR 0 1
24365: PPUSH
24366: CALL_OW 146
// if GetBType ( building ) = b_armoury then
24370: LD_VAR 0 1
24374: PPUSH
24375: CALL_OW 266
24379: PUSH
24380: LD_INT 4
24382: EQUAL
24383: IFFALSE 24430
// ComMoveXY ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] ] ) diff Dietrich , 75 , 21 ) ;
24385: LD_INT 22
24387: PUSH
24388: LD_INT 2
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: LD_INT 25
24397: PUSH
24398: LD_INT 1
24400: PUSH
24401: EMPTY
24402: LIST
24403: LIST
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PPUSH
24409: CALL_OW 69
24413: PUSH
24414: LD_EXP 28
24418: DIFF
24419: PPUSH
24420: LD_INT 75
24422: PPUSH
24423: LD_INT 21
24425: PPUSH
24426: CALL_OW 111
// end ; if GetBType ( building ) = b_solar_power then
24430: LD_VAR 0 1
24434: PPUSH
24435: CALL_OW 266
24439: PUSH
24440: LD_INT 27
24442: EQUAL
24443: IFFALSE 24721
// if FilterAllUnits ( [ [ f_side , 2 ] , [ f_btype , b_solar_power ] ] ) = 2 then
24445: LD_INT 22
24447: PUSH
24448: LD_INT 2
24450: PUSH
24451: EMPTY
24452: LIST
24453: LIST
24454: PUSH
24455: LD_INT 30
24457: PUSH
24458: LD_INT 27
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: PUSH
24465: EMPTY
24466: LIST
24467: LIST
24468: PPUSH
24469: CALL_OW 69
24473: PUSH
24474: LD_INT 2
24476: EQUAL
24477: IFFALSE 24721
// begin i := FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) [ 1 ] ;
24479: LD_ADDR_VAR 0 2
24483: PUSH
24484: LD_INT 22
24486: PUSH
24487: LD_INT 2
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: LD_INT 21
24496: PUSH
24497: LD_INT 1
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 25
24506: PUSH
24507: LD_INT 2
24509: PUSH
24510: EMPTY
24511: LIST
24512: LIST
24513: PUSH
24514: EMPTY
24515: LIST
24516: LIST
24517: LIST
24518: PPUSH
24519: CALL_OW 69
24523: PUSH
24524: LD_INT 1
24526: ARRAY
24527: ST_TO_ADDR
// if not i then
24528: LD_VAR 0 2
24532: NOT
24533: IFFALSE 24537
// exit ;
24535: GO 24721
// AddComMoveXY ( i , 92 , 34 ) ;
24537: LD_VAR 0 2
24541: PPUSH
24542: LD_INT 92
24544: PPUSH
24545: LD_INT 34
24547: PPUSH
24548: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24552: LD_VAR 0 2
24556: PPUSH
24557: LD_INT 35
24559: PPUSH
24560: CALL_OW 202
// AddComMoveXY ( i , 101 , 20 ) ;
24564: LD_VAR 0 2
24568: PPUSH
24569: LD_INT 101
24571: PPUSH
24572: LD_INT 20
24574: PPUSH
24575: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24579: LD_VAR 0 2
24583: PPUSH
24584: LD_INT 35
24586: PPUSH
24587: CALL_OW 202
// AddComMoveXY ( i , 115 , 30 ) ;
24591: LD_VAR 0 2
24595: PPUSH
24596: LD_INT 115
24598: PPUSH
24599: LD_INT 30
24601: PPUSH
24602: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24606: LD_VAR 0 2
24610: PPUSH
24611: LD_INT 35
24613: PPUSH
24614: CALL_OW 202
// AddComMoveXY ( i , 82 , 57 ) ;
24618: LD_VAR 0 2
24622: PPUSH
24623: LD_INT 82
24625: PPUSH
24626: LD_INT 57
24628: PPUSH
24629: CALL_OW 171
// AddComWait ( i , 0 0$1 ) ;
24633: LD_VAR 0 2
24637: PPUSH
24638: LD_INT 35
24640: PPUSH
24641: CALL_OW 202
// AddComMoveXY ( i , 36 , 28 ) ;
24645: LD_VAR 0 2
24649: PPUSH
24650: LD_INT 36
24652: PPUSH
24653: LD_INT 28
24655: PPUSH
24656: CALL_OW 171
// AddComWait ( i , 0 0$2 ) ;
24660: LD_VAR 0 2
24664: PPUSH
24665: LD_INT 70
24667: PPUSH
24668: CALL_OW 202
// AddComEnterUnit ( FilterAllUnits ( [ [ f_side , 2 ] , [ f_type , unit_human ] , [ f_class , 2 ] ] ) , arDepot ) ;
24672: LD_INT 22
24674: PUSH
24675: LD_INT 2
24677: PUSH
24678: EMPTY
24679: LIST
24680: LIST
24681: PUSH
24682: LD_INT 21
24684: PUSH
24685: LD_INT 1
24687: PUSH
24688: EMPTY
24689: LIST
24690: LIST
24691: PUSH
24692: LD_INT 25
24694: PUSH
24695: LD_INT 2
24697: PUSH
24698: EMPTY
24699: LIST
24700: LIST
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: LIST
24706: PPUSH
24707: CALL_OW 69
24711: PPUSH
24712: LD_EXP 45
24716: PPUSH
24717: CALL_OW 180
// end ; end ; end ;
24721: PPOPN 5
24723: END
// on UpgradeComplete ( building ) do var i ;
24724: LD_INT 0
24726: PPUSH
// begin if GetSide ( building ) = 1 and eventVar1 = 0 then
24727: LD_VAR 0 1
24731: PPUSH
24732: CALL_OW 255
24736: PUSH
24737: LD_INT 1
24739: EQUAL
24740: PUSH
24741: LD_EXP 67
24745: PUSH
24746: LD_INT 0
24748: EQUAL
24749: AND
24750: IFFALSE 24948
// begin if GetBType ( building ) = b_lab_half or GetBType ( building ) = b_lab_full then
24752: LD_VAR 0 1
24756: PPUSH
24757: CALL_OW 266
24761: PUSH
24762: LD_INT 7
24764: EQUAL
24765: PUSH
24766: LD_VAR 0 1
24770: PPUSH
24771: CALL_OW 266
24775: PUSH
24776: LD_INT 8
24778: EQUAL
24779: OR
24780: IFFALSE 24948
// begin if FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , 26 ] , [ f_btype , 27 ] , [ f_btype , 28 ] ] ] ) > 0 then
24782: LD_INT 22
24784: PUSH
24785: LD_INT 1
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 2
24794: PUSH
24795: LD_INT 30
24797: PUSH
24798: LD_INT 26
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: PUSH
24805: LD_INT 30
24807: PUSH
24808: LD_INT 27
24810: PUSH
24811: EMPTY
24812: LIST
24813: LIST
24814: PUSH
24815: LD_INT 30
24817: PUSH
24818: LD_INT 28
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: EMPTY
24826: LIST
24827: LIST
24828: LIST
24829: LIST
24830: PUSH
24831: EMPTY
24832: LIST
24833: LIST
24834: PPUSH
24835: CALL_OW 69
24839: PUSH
24840: LD_INT 0
24842: GREATER
24843: IFFALSE 24948
// begin for i in FilterAllUnits ( [ [ f_side , 1 ] , [ f_or , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) do
24845: LD_ADDR_VAR 0 2
24849: PUSH
24850: LD_INT 22
24852: PUSH
24853: LD_INT 1
24855: PUSH
24856: EMPTY
24857: LIST
24858: LIST
24859: PUSH
24860: LD_INT 2
24862: PUSH
24863: LD_INT 30
24865: PUSH
24866: LD_INT 7
24868: PUSH
24869: EMPTY
24870: LIST
24871: LIST
24872: PUSH
24873: LD_INT 30
24875: PUSH
24876: LD_INT 8
24878: PUSH
24879: EMPTY
24880: LIST
24881: LIST
24882: PUSH
24883: EMPTY
24884: LIST
24885: LIST
24886: LIST
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: PPUSH
24892: CALL_OW 69
24896: PUSH
24897: FOR_IN
24898: IFFALSE 24946
// if GetLabKind ( i , 1 ) = b_lab_siberium or GetLabKind ( i , 2 ) = b_lab_siberium then
24900: LD_VAR 0 2
24904: PPUSH
24905: LD_INT 1
24907: PPUSH
24908: CALL_OW 268
24912: PUSH
24913: LD_INT 11
24915: EQUAL
24916: PUSH
24917: LD_VAR 0 2
24921: PPUSH
24922: LD_INT 2
24924: PPUSH
24925: CALL_OW 268
24929: PUSH
24930: LD_INT 11
24932: EQUAL
24933: OR
24934: IFFALSE 24944
// eventVar1 = 1 ;
24936: LD_ADDR_EXP 67
24940: PUSH
24941: LD_INT 1
24943: ST_TO_ADDR
24944: GO 24897
24946: POP
24947: POP
// end ; end ; end ; if GetSide ( building ) = 2 then
24948: LD_VAR 0 1
24952: PPUSH
24953: CALL_OW 255
24957: PUSH
24958: LD_INT 2
24960: EQUAL
24961: IFFALSE 25066
// begin if GetBType ( building ) = b_barracks then
24963: LD_VAR 0 1
24967: PPUSH
24968: CALL_OW 266
24972: PUSH
24973: LD_INT 5
24975: EQUAL
24976: IFFALSE 25066
// begin for i in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) diff [ Dietrich ] do
24978: LD_ADDR_VAR 0 2
24982: PUSH
24983: LD_INT 22
24985: PUSH
24986: LD_INT 2
24988: PUSH
24989: EMPTY
24990: LIST
24991: LIST
24992: PUSH
24993: LD_INT 25
24995: PUSH
24996: LD_INT 1
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 3
25005: PUSH
25006: LD_INT 54
25008: PUSH
25009: EMPTY
25010: LIST
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: PUSH
25016: EMPTY
25017: LIST
25018: LIST
25019: LIST
25020: PPUSH
25021: CALL_OW 69
25025: PUSH
25026: LD_EXP 28
25030: PUSH
25031: EMPTY
25032: LIST
25033: DIFF
25034: PUSH
25035: FOR_IN
25036: IFFALSE 25054
// ComEnterUnit ( i , building ) ;
25038: LD_VAR 0 2
25042: PPUSH
25043: LD_VAR 0 1
25047: PPUSH
25048: CALL_OW 120
25052: GO 25035
25054: POP
25055: POP
// arArm = building ;
25056: LD_ADDR_EXP 47
25060: PUSH
25061: LD_VAR 0 1
25065: ST_TO_ADDR
// end ; end ; if GetSide ( building ) = 3 then
25066: LD_VAR 0 1
25070: PPUSH
25071: CALL_OW 255
25075: PUSH
25076: LD_INT 3
25078: EQUAL
25079: IFFALSE 25552
// begin if GetBType ( building ) = b_factory then
25081: LD_VAR 0 1
25085: PPUSH
25086: CALL_OW 266
25090: PUSH
25091: LD_INT 3
25093: EQUAL
25094: IFFALSE 25161
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 3 ] ] ) do
25096: LD_ADDR_VAR 0 2
25100: PUSH
25101: LD_INT 22
25103: PUSH
25104: LD_INT 3
25106: PUSH
25107: EMPTY
25108: LIST
25109: LIST
25110: PUSH
25111: LD_INT 25
25113: PUSH
25114: LD_INT 3
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: PPUSH
25125: CALL_OW 69
25129: PUSH
25130: FOR_IN
25131: IFFALSE 25149
// ComEnterUnit ( i , building ) ;
25133: LD_VAR 0 2
25137: PPUSH
25138: LD_VAR 0 1
25142: PPUSH
25143: CALL_OW 120
25147: GO 25130
25149: POP
25150: POP
// ruFab = building ;
25151: LD_ADDR_EXP 37
25155: PUSH
25156: LD_VAR 0 1
25160: ST_TO_ADDR
// end ; if FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) = 2 then
25161: LD_INT 22
25163: PUSH
25164: LD_INT 3
25166: PUSH
25167: EMPTY
25168: LIST
25169: LIST
25170: PUSH
25171: LD_INT 21
25173: PUSH
25174: LD_INT 3
25176: PUSH
25177: EMPTY
25178: LIST
25179: LIST
25180: PUSH
25181: LD_INT 30
25183: PUSH
25184: LD_INT 8
25186: PUSH
25187: EMPTY
25188: LIST
25189: LIST
25190: PUSH
25191: EMPTY
25192: LIST
25193: LIST
25194: LIST
25195: PPUSH
25196: CALL_OW 69
25200: PUSH
25201: LD_INT 2
25203: EQUAL
25204: IFFALSE 25412
// begin for i = 1 to 2 do
25206: LD_ADDR_VAR 0 2
25210: PUSH
25211: DOUBLE
25212: LD_INT 1
25214: DEC
25215: ST_TO_ADDR
25216: LD_INT 2
25218: PUSH
25219: FOR_TO
25220: IFFALSE 25307
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 1 ] ) ;
25222: LD_INT 22
25224: PUSH
25225: LD_INT 3
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 25
25234: PUSH
25235: LD_INT 4
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: EMPTY
25243: LIST
25244: LIST
25245: PPUSH
25246: CALL_OW 69
25250: PUSH
25251: LD_VAR 0 2
25255: ARRAY
25256: PPUSH
25257: LD_INT 22
25259: PUSH
25260: LD_INT 3
25262: PUSH
25263: EMPTY
25264: LIST
25265: LIST
25266: PUSH
25267: LD_INT 21
25269: PUSH
25270: LD_INT 3
25272: PUSH
25273: EMPTY
25274: LIST
25275: LIST
25276: PUSH
25277: LD_INT 30
25279: PUSH
25280: LD_INT 8
25282: PUSH
25283: EMPTY
25284: LIST
25285: LIST
25286: PUSH
25287: EMPTY
25288: LIST
25289: LIST
25290: LIST
25291: PPUSH
25292: CALL_OW 69
25296: PUSH
25297: LD_INT 1
25299: ARRAY
25300: PPUSH
25301: CALL_OW 120
25305: GO 25219
25307: POP
25308: POP
// for i = 3 to 4 do
25309: LD_ADDR_VAR 0 2
25313: PUSH
25314: DOUBLE
25315: LD_INT 3
25317: DEC
25318: ST_TO_ADDR
25319: LD_INT 4
25321: PUSH
25322: FOR_TO
25323: IFFALSE 25410
// ComEnterUnit ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 4 ] ] ) [ i ] , FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_btype , b_lab_full ] ] ) [ 2 ] ) ;
25325: LD_INT 22
25327: PUSH
25328: LD_INT 3
25330: PUSH
25331: EMPTY
25332: LIST
25333: LIST
25334: PUSH
25335: LD_INT 25
25337: PUSH
25338: LD_INT 4
25340: PUSH
25341: EMPTY
25342: LIST
25343: LIST
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PPUSH
25349: CALL_OW 69
25353: PUSH
25354: LD_VAR 0 2
25358: ARRAY
25359: PPUSH
25360: LD_INT 22
25362: PUSH
25363: LD_INT 3
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: PUSH
25370: LD_INT 21
25372: PUSH
25373: LD_INT 3
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 30
25382: PUSH
25383: LD_INT 8
25385: PUSH
25386: EMPTY
25387: LIST
25388: LIST
25389: PUSH
25390: EMPTY
25391: LIST
25392: LIST
25393: LIST
25394: PPUSH
25395: CALL_OW 69
25399: PUSH
25400: LD_INT 2
25402: ARRAY
25403: PPUSH
25404: CALL_OW 120
25408: GO 25322
25410: POP
25411: POP
// end ; if GetBType ( building ) = b_barracks then
25412: LD_VAR 0 1
25416: PPUSH
25417: CALL_OW 266
25421: PUSH
25422: LD_INT 5
25424: EQUAL
25425: IFFALSE 25552
// begin for i in FilterAllUnits ( [ [ f_side , 3 ] , [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) do
25427: LD_ADDR_VAR 0 2
25431: PUSH
25432: LD_INT 22
25434: PUSH
25435: LD_INT 3
25437: PUSH
25438: EMPTY
25439: LIST
25440: LIST
25441: PUSH
25442: LD_INT 25
25444: PUSH
25445: LD_INT 1
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: LD_INT 3
25454: PUSH
25455: LD_INT 54
25457: PUSH
25458: EMPTY
25459: LIST
25460: PUSH
25461: EMPTY
25462: LIST
25463: LIST
25464: PUSH
25465: EMPTY
25466: LIST
25467: LIST
25468: LIST
25469: PPUSH
25470: CALL_OW 69
25474: PUSH
25475: FOR_IN
25476: IFFALSE 25494
// ComEnterUnit ( i , building ) ;
25478: LD_VAR 0 2
25482: PPUSH
25483: LD_VAR 0 1
25487: PPUSH
25488: CALL_OW 120
25492: GO 25475
25494: POP
25495: POP
// if FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_barracks ] ] ) = 0 then
25496: LD_INT 22
25498: PUSH
25499: LD_INT 3
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PUSH
25506: LD_INT 30
25508: PUSH
25509: LD_INT 5
25511: PUSH
25512: EMPTY
25513: LIST
25514: LIST
25515: PUSH
25516: EMPTY
25517: LIST
25518: LIST
25519: PPUSH
25520: CALL_OW 69
25524: PUSH
25525: LD_INT 0
25527: EQUAL
25528: IFFALSE 25542
// ruArm1 = building else
25530: LD_ADDR_EXP 35
25534: PUSH
25535: LD_VAR 0 1
25539: ST_TO_ADDR
25540: GO 25552
// ruArm2 = building ;
25542: LD_ADDR_EXP 36
25546: PUSH
25547: LD_VAR 0 1
25551: ST_TO_ADDR
// end ; end ; end ;
25552: PPOPN 2
25554: END
// on EnterBuilding ( building , human ) do var rnd ;
25555: LD_INT 0
25557: PPUSH
// begin if GetSide ( human ) = 2 and GetClass ( human ) = 1 and building = arArm then
25558: LD_VAR 0 2
25562: PPUSH
25563: CALL_OW 255
25567: PUSH
25568: LD_INT 2
25570: EQUAL
25571: PUSH
25572: LD_VAR 0 2
25576: PPUSH
25577: CALL_OW 257
25581: PUSH
25582: LD_INT 1
25584: EQUAL
25585: AND
25586: PUSH
25587: LD_VAR 0 1
25591: PUSH
25592: LD_EXP 47
25596: EQUAL
25597: AND
25598: IFFALSE 25645
// begin wait ( 0 0$1 ) ;
25600: LD_INT 35
25602: PPUSH
25603: CALL_OW 67
// rnd = rand ( 1 , 100 ) ;
25607: LD_ADDR_VAR 0 3
25611: PUSH
25612: LD_INT 1
25614: PPUSH
25615: LD_INT 100
25617: PPUSH
25618: CALL_OW 12
25622: ST_TO_ADDR
// if rnd > 50 then
25623: LD_VAR 0 3
25627: PUSH
25628: LD_INT 50
25630: GREATER
25631: IFFALSE 25645
// SetClass ( human , class_mortar ) ;
25633: LD_VAR 0 2
25637: PPUSH
25638: LD_INT 8
25640: PPUSH
25641: CALL_OW 336
// end ; if human in FilterAllUnits ( [ [ f_side , 2 ] , [ f_class , class_apeman ] ] ) then
25645: LD_VAR 0 2
25649: PUSH
25650: LD_INT 22
25652: PUSH
25653: LD_INT 2
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: PUSH
25660: LD_INT 25
25662: PUSH
25663: LD_INT 12
25665: PUSH
25666: EMPTY
25667: LIST
25668: LIST
25669: PUSH
25670: EMPTY
25671: LIST
25672: LIST
25673: PPUSH
25674: CALL_OW 69
25678: IN
25679: IFFALSE 25729
// begin if GetBType ( building ) in [ b_depot , b_warehouse ] then
25681: LD_VAR 0 1
25685: PPUSH
25686: CALL_OW 266
25690: PUSH
25691: LD_INT 0
25693: PUSH
25694: LD_INT 1
25696: PUSH
25697: EMPTY
25698: LIST
25699: LIST
25700: IN
25701: IFFALSE 25717
// SetClass ( human , class_apeman_engineer ) else
25703: LD_VAR 0 2
25707: PPUSH
25708: LD_INT 16
25710: PPUSH
25711: CALL_OW 336
25715: GO 25729
// SetClass ( human , class_apeman_soldier ) ;
25717: LD_VAR 0 2
25721: PPUSH
25722: LD_INT 15
25724: PPUSH
25725: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 1 and [ building = ruArm1 or building = ruArm2 ] then
25729: LD_VAR 0 2
25733: PPUSH
25734: CALL_OW 255
25738: PUSH
25739: LD_INT 3
25741: EQUAL
25742: PUSH
25743: LD_VAR 0 2
25747: PPUSH
25748: CALL_OW 257
25752: PUSH
25753: LD_INT 1
25755: EQUAL
25756: AND
25757: PUSH
25758: LD_VAR 0 1
25762: PUSH
25763: LD_EXP 35
25767: EQUAL
25768: PUSH
25769: LD_VAR 0 1
25773: PUSH
25774: LD_EXP 36
25778: EQUAL
25779: OR
25780: PUSH
25781: EMPTY
25782: LIST
25783: AND
25784: IFFALSE 25805
// begin wait ( 0 0$1 ) ;
25786: LD_INT 35
25788: PPUSH
25789: CALL_OW 67
// SetClass ( human , class_bazooker ) ;
25793: LD_VAR 0 2
25797: PPUSH
25798: LD_INT 9
25800: PPUSH
25801: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 9 and GetBType ( building ) = b_bunker then
25805: LD_VAR 0 2
25809: PPUSH
25810: CALL_OW 255
25814: PUSH
25815: LD_INT 3
25817: EQUAL
25818: PUSH
25819: LD_VAR 0 2
25823: PPUSH
25824: CALL_OW 257
25828: PUSH
25829: LD_INT 9
25831: EQUAL
25832: AND
25833: PUSH
25834: LD_VAR 0 1
25838: PPUSH
25839: CALL_OW 266
25843: PUSH
25844: LD_INT 32
25846: EQUAL
25847: AND
25848: IFFALSE 25869
// begin wait ( 0 0$1 ) ;
25850: LD_INT 35
25852: PPUSH
25853: CALL_OW 67
// SetClass ( human , 1 ) ;
25857: LD_VAR 0 2
25861: PPUSH
25862: LD_INT 1
25864: PPUSH
25865: CALL_OW 336
// end ; if GetSide ( human ) = 3 and GetClass ( human ) = 3 and building = rufab then
25869: LD_VAR 0 2
25873: PPUSH
25874: CALL_OW 255
25878: PUSH
25879: LD_INT 3
25881: EQUAL
25882: PUSH
25883: LD_VAR 0 2
25887: PPUSH
25888: CALL_OW 257
25892: PUSH
25893: LD_INT 3
25895: EQUAL
25896: AND
25897: PUSH
25898: LD_VAR 0 1
25902: PUSH
25903: LD_EXP 37
25907: EQUAL
25908: AND
25909: IFFALSE 25923
// SetLives ( human , 1000 ) ;
25911: LD_VAR 0 2
25915: PPUSH
25916: LD_INT 1000
25918: PPUSH
25919: CALL_OW 234
// end ;
25923: PPOPN 3
25925: END
// on Contact ( side1 , side2 ) do begin if side1 = 1 and side2 = 2 and GetAttitude ( 1 , 2 ) = att_friend then
25926: LD_VAR 0 1
25930: PUSH
25931: LD_INT 1
25933: EQUAL
25934: PUSH
25935: LD_VAR 0 2
25939: PUSH
25940: LD_INT 2
25942: EQUAL
25943: AND
25944: PUSH
25945: LD_INT 1
25947: PPUSH
25948: LD_INT 2
25950: PPUSH
25951: CALL_OW 81
25955: PUSH
25956: LD_INT 1
25958: EQUAL
25959: AND
25960: IFFALSE 25981
// begin SayRadio ( Powell , D6b-Pow-1 ) ;
25962: LD_EXP 26
25966: PPUSH
25967: LD_STRING D6b-Pow-1
25969: PPUSH
25970: CALL_OW 94
// YouLost ( Powell ) ;
25974: LD_STRING Powell
25976: PPUSH
25977: CALL_OW 104
// end ; end ;
25981: PPOPN 2
25983: END
// every 0 0$5 trigger ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend do
25984: LD_INT 23
25986: PPUSH
25987: LD_INT 22
25989: PUSH
25990: LD_INT 1
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: PUSH
25997: LD_INT 21
25999: PUSH
26000: LD_INT 3
26002: PUSH
26003: EMPTY
26004: LIST
26005: LIST
26006: PUSH
26007: EMPTY
26008: LIST
26009: LIST
26010: PPUSH
26011: CALL_OW 70
26015: PUSH
26016: LD_INT 23
26018: PPUSH
26019: LD_INT 22
26021: PUSH
26022: LD_INT 1
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 21
26031: PUSH
26032: LD_INT 2
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: PPUSH
26043: CALL_OW 70
26047: OR
26048: PUSH
26049: LD_INT 1
26051: PPUSH
26052: LD_INT 2
26054: PPUSH
26055: CALL_OW 81
26059: PUSH
26060: LD_INT 1
26062: EQUAL
26063: AND
26064: IFFALSE 26303
26066: GO 26068
26068: DISABLE
// begin if ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend then
26069: LD_INT 23
26071: PPUSH
26072: LD_INT 22
26074: PUSH
26075: LD_INT 1
26077: PUSH
26078: EMPTY
26079: LIST
26080: LIST
26081: PUSH
26082: LD_INT 21
26084: PUSH
26085: LD_INT 3
26087: PUSH
26088: EMPTY
26089: LIST
26090: LIST
26091: PUSH
26092: EMPTY
26093: LIST
26094: LIST
26095: PPUSH
26096: CALL_OW 70
26100: PUSH
26101: LD_INT 23
26103: PPUSH
26104: LD_INT 22
26106: PUSH
26107: LD_INT 1
26109: PUSH
26110: EMPTY
26111: LIST
26112: LIST
26113: PUSH
26114: LD_INT 21
26116: PUSH
26117: LD_INT 2
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PUSH
26124: EMPTY
26125: LIST
26126: LIST
26127: PPUSH
26128: CALL_OW 70
26132: OR
26133: PUSH
26134: LD_INT 1
26136: PPUSH
26137: LD_INT 2
26139: PPUSH
26140: CALL_OW 81
26144: PUSH
26145: LD_INT 1
26147: EQUAL
26148: AND
26149: IFFALSE 26158
// Query ( QAttack ) ;
26151: LD_STRING QAttack
26153: PPUSH
26154: CALL_OW 97
// wait ( 0 0$20 ) ;
26158: LD_INT 700
26160: PPUSH
26161: CALL_OW 67
// repeat wait ( 0 0$10 ) ;
26165: LD_INT 350
26167: PPUSH
26168: CALL_OW 67
// if arabianTrait = 1 then
26172: LD_EXP 51
26176: PUSH
26177: LD_INT 1
26179: EQUAL
26180: IFFALSE 26184
// exit ;
26182: GO 26303
// until ( FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_building ] ] ) or FilterUnitsInArea ( arBaseArea , [ [ f_side , 1 ] , [ f_type , unit_vehicle ] ] ) ) and GetAttitude ( 1 , 2 ) = att_friend ;
26184: LD_INT 23
26186: PPUSH
26187: LD_INT 22
26189: PUSH
26190: LD_INT 1
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 21
26199: PUSH
26200: LD_INT 3
26202: PUSH
26203: EMPTY
26204: LIST
26205: LIST
26206: PUSH
26207: EMPTY
26208: LIST
26209: LIST
26210: PPUSH
26211: CALL_OW 70
26215: PUSH
26216: LD_INT 23
26218: PPUSH
26219: LD_INT 22
26221: PUSH
26222: LD_INT 1
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: PUSH
26229: LD_INT 21
26231: PUSH
26232: LD_INT 2
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: EMPTY
26240: LIST
26241: LIST
26242: PPUSH
26243: CALL_OW 70
26247: OR
26248: PUSH
26249: LD_INT 1
26251: PPUSH
26252: LD_INT 2
26254: PPUSH
26255: CALL_OW 81
26259: PUSH
26260: LD_INT 1
26262: EQUAL
26263: AND
26264: IFFALSE 26165
// InGameOn ;
26266: CALL_OW 8
// CenterNowOnXY ( 73 , 18 ) ;
26270: LD_INT 73
26272: PPUSH
26273: LD_INT 18
26275: PPUSH
26276: CALL_OW 86
// SayRadio ( Powell , D6b-Pow-1 ) ;
26280: LD_EXP 26
26284: PPUSH
26285: LD_STRING D6b-Pow-1
26287: PPUSH
26288: CALL_OW 94
// YouLost ( Powell ) ;
26292: LD_STRING Powell
26294: PPUSH
26295: CALL_OW 104
// InGameOff ;
26299: CALL_OW 9
// end ;
26303: END
// on UnitDestroyed ( unit ) do begin SOS_UnitDestroyed ( unit ) ;
26304: LD_VAR 0 1
26308: PPUSH
26309: CALL 46009 0 1
// if unit = Truman then
26313: LD_VAR 0 1
26317: PUSH
26318: LD_EXP 21
26322: EQUAL
26323: IFFALSE 26332
// YouLost ( Powell ) ;
26325: LD_STRING Powell
26327: PPUSH
26328: CALL_OW 104
// if unit = JMM then
26332: LD_VAR 0 1
26336: PUSH
26337: LD_EXP 1
26341: EQUAL
26342: IFFALSE 26351
// YouLost ( JMM ) ;
26344: LD_STRING JMM
26346: PPUSH
26347: CALL_OW 104
// if unit = Khatam then
26351: LD_VAR 0 1
26355: PUSH
26356: LD_EXP 14
26360: EQUAL
26361: IFFALSE 26371
// KhatamStatus = 0 ;
26363: LD_ADDR_EXP 55
26367: PUSH
26368: LD_INT 0
26370: ST_TO_ADDR
// if GetSide ( unit ) = 3 and GetType ( unit ) = unit_building then
26371: LD_VAR 0 1
26375: PPUSH
26376: CALL_OW 255
26380: PUSH
26381: LD_INT 3
26383: EQUAL
26384: PUSH
26385: LD_VAR 0 1
26389: PPUSH
26390: CALL_OW 247
26394: PUSH
26395: LD_INT 3
26397: EQUAL
26398: AND
26399: IFFALSE 27091
// begin if GetBType ( unit ) = 31 or GetBType ( unit ) = 32 or GetBType ( unit ) = 36 or GetBType ( unit ) = 0 or GetBType ( unit ) = 24 or GetBType ( unit ) = 17 or GetBType ( unit ) = 25 or GetBType ( unit ) = 19 or GetBType ( unit ) = 20 or GetBType ( unit ) = 18 or GetBType ( unit ) = 21 or GetBType ( unit ) = 23 or GetBType ( unit ) = 16 or GetBType ( unit ) = 6 or GetBType ( unit ) = 29 or GetBType ( unit ) = 26 or GetBType ( unit ) = 30 or GetBType ( unit ) = 28 or GetBType ( unit ) = 27 or GetBType ( unit ) = 33 or GetBType ( unit ) = 2 or GetBType ( unit ) = 4 then
26401: LD_VAR 0 1
26405: PPUSH
26406: CALL_OW 266
26410: PUSH
26411: LD_INT 31
26413: EQUAL
26414: PUSH
26415: LD_VAR 0 1
26419: PPUSH
26420: CALL_OW 266
26424: PUSH
26425: LD_INT 32
26427: EQUAL
26428: OR
26429: PUSH
26430: LD_VAR 0 1
26434: PPUSH
26435: CALL_OW 266
26439: PUSH
26440: LD_INT 36
26442: EQUAL
26443: OR
26444: PUSH
26445: LD_VAR 0 1
26449: PPUSH
26450: CALL_OW 266
26454: PUSH
26455: LD_INT 0
26457: EQUAL
26458: OR
26459: PUSH
26460: LD_VAR 0 1
26464: PPUSH
26465: CALL_OW 266
26469: PUSH
26470: LD_INT 24
26472: EQUAL
26473: OR
26474: PUSH
26475: LD_VAR 0 1
26479: PPUSH
26480: CALL_OW 266
26484: PUSH
26485: LD_INT 17
26487: EQUAL
26488: OR
26489: PUSH
26490: LD_VAR 0 1
26494: PPUSH
26495: CALL_OW 266
26499: PUSH
26500: LD_INT 25
26502: EQUAL
26503: OR
26504: PUSH
26505: LD_VAR 0 1
26509: PPUSH
26510: CALL_OW 266
26514: PUSH
26515: LD_INT 19
26517: EQUAL
26518: OR
26519: PUSH
26520: LD_VAR 0 1
26524: PPUSH
26525: CALL_OW 266
26529: PUSH
26530: LD_INT 20
26532: EQUAL
26533: OR
26534: PUSH
26535: LD_VAR 0 1
26539: PPUSH
26540: CALL_OW 266
26544: PUSH
26545: LD_INT 18
26547: EQUAL
26548: OR
26549: PUSH
26550: LD_VAR 0 1
26554: PPUSH
26555: CALL_OW 266
26559: PUSH
26560: LD_INT 21
26562: EQUAL
26563: OR
26564: PUSH
26565: LD_VAR 0 1
26569: PPUSH
26570: CALL_OW 266
26574: PUSH
26575: LD_INT 23
26577: EQUAL
26578: OR
26579: PUSH
26580: LD_VAR 0 1
26584: PPUSH
26585: CALL_OW 266
26589: PUSH
26590: LD_INT 16
26592: EQUAL
26593: OR
26594: PUSH
26595: LD_VAR 0 1
26599: PPUSH
26600: CALL_OW 266
26604: PUSH
26605: LD_INT 6
26607: EQUAL
26608: OR
26609: PUSH
26610: LD_VAR 0 1
26614: PPUSH
26615: CALL_OW 266
26619: PUSH
26620: LD_INT 29
26622: EQUAL
26623: OR
26624: PUSH
26625: LD_VAR 0 1
26629: PPUSH
26630: CALL_OW 266
26634: PUSH
26635: LD_INT 26
26637: EQUAL
26638: OR
26639: PUSH
26640: LD_VAR 0 1
26644: PPUSH
26645: CALL_OW 266
26649: PUSH
26650: LD_INT 30
26652: EQUAL
26653: OR
26654: PUSH
26655: LD_VAR 0 1
26659: PPUSH
26660: CALL_OW 266
26664: PUSH
26665: LD_INT 28
26667: EQUAL
26668: OR
26669: PUSH
26670: LD_VAR 0 1
26674: PPUSH
26675: CALL_OW 266
26679: PUSH
26680: LD_INT 27
26682: EQUAL
26683: OR
26684: PUSH
26685: LD_VAR 0 1
26689: PPUSH
26690: CALL_OW 266
26694: PUSH
26695: LD_INT 33
26697: EQUAL
26698: OR
26699: PUSH
26700: LD_VAR 0 1
26704: PPUSH
26705: CALL_OW 266
26709: PUSH
26710: LD_INT 2
26712: EQUAL
26713: OR
26714: PUSH
26715: LD_VAR 0 1
26719: PPUSH
26720: CALL_OW 266
26724: PUSH
26725: LD_INT 4
26727: EQUAL
26728: OR
26729: IFFALSE 26815
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ GetBType ( unit ) ;
26731: LD_ADDR_EXP 44
26735: PUSH
26736: LD_EXP 44
26740: PUSH
26741: LD_VAR 0 1
26745: PPUSH
26746: CALL_OW 266
26750: ADD
26751: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26752: LD_ADDR_EXP 44
26756: PUSH
26757: LD_EXP 44
26761: PUSH
26762: LD_VAR 0 1
26766: PPUSH
26767: CALL_OW 250
26771: ADD
26772: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26773: LD_ADDR_EXP 44
26777: PUSH
26778: LD_EXP 44
26782: PUSH
26783: LD_VAR 0 1
26787: PPUSH
26788: CALL_OW 251
26792: ADD
26793: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26794: LD_ADDR_EXP 44
26798: PUSH
26799: LD_EXP 44
26803: PUSH
26804: LD_VAR 0 1
26808: PPUSH
26809: CALL_OW 254
26813: ADD
26814: ST_TO_ADDR
// end ; if GetBType ( unit ) = 1 then
26815: LD_VAR 0 1
26819: PPUSH
26820: CALL_OW 266
26824: PUSH
26825: LD_INT 1
26827: EQUAL
26828: IFFALSE 26907
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 0 ;
26830: LD_ADDR_EXP 44
26834: PUSH
26835: LD_EXP 44
26839: PUSH
26840: LD_INT 0
26842: ADD
26843: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26844: LD_ADDR_EXP 44
26848: PUSH
26849: LD_EXP 44
26853: PUSH
26854: LD_VAR 0 1
26858: PPUSH
26859: CALL_OW 250
26863: ADD
26864: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26865: LD_ADDR_EXP 44
26869: PUSH
26870: LD_EXP 44
26874: PUSH
26875: LD_VAR 0 1
26879: PPUSH
26880: CALL_OW 251
26884: ADD
26885: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26886: LD_ADDR_EXP 44
26890: PUSH
26891: LD_EXP 44
26895: PUSH
26896: LD_VAR 0 1
26900: PPUSH
26901: CALL_OW 254
26905: ADD
26906: ST_TO_ADDR
// end ; if GetBType ( unit ) = 3 then
26907: LD_VAR 0 1
26911: PPUSH
26912: CALL_OW 266
26916: PUSH
26917: LD_INT 3
26919: EQUAL
26920: IFFALSE 26999
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 2 ;
26922: LD_ADDR_EXP 44
26926: PUSH
26927: LD_EXP 44
26931: PUSH
26932: LD_INT 2
26934: ADD
26935: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
26936: LD_ADDR_EXP 44
26940: PUSH
26941: LD_EXP 44
26945: PUSH
26946: LD_VAR 0 1
26950: PPUSH
26951: CALL_OW 250
26955: ADD
26956: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
26957: LD_ADDR_EXP 44
26961: PUSH
26962: LD_EXP 44
26966: PUSH
26967: LD_VAR 0 1
26971: PPUSH
26972: CALL_OW 251
26976: ADD
26977: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
26978: LD_ADDR_EXP 44
26982: PUSH
26983: LD_EXP 44
26987: PUSH
26988: LD_VAR 0 1
26992: PPUSH
26993: CALL_OW 254
26997: ADD
26998: ST_TO_ADDR
// end ; if GetBType ( unit ) = 5 then
26999: LD_VAR 0 1
27003: PPUSH
27004: CALL_OW 266
27008: PUSH
27009: LD_INT 5
27011: EQUAL
27012: IFFALSE 27091
// begin ruDestroyedBuildings = ruDestroyedBuildings ^ 4 ;
27014: LD_ADDR_EXP 44
27018: PUSH
27019: LD_EXP 44
27023: PUSH
27024: LD_INT 4
27026: ADD
27027: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetX ( unit ) ;
27028: LD_ADDR_EXP 44
27032: PUSH
27033: LD_EXP 44
27037: PUSH
27038: LD_VAR 0 1
27042: PPUSH
27043: CALL_OW 250
27047: ADD
27048: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetY ( unit ) ;
27049: LD_ADDR_EXP 44
27053: PUSH
27054: LD_EXP 44
27058: PUSH
27059: LD_VAR 0 1
27063: PPUSH
27064: CALL_OW 251
27068: ADD
27069: ST_TO_ADDR
// ruDestroyedBuildings = ruDestroyedBuildings ^ GetDir ( unit ) ;
27070: LD_ADDR_EXP 44
27074: PUSH
27075: LD_EXP 44
27079: PUSH
27080: LD_VAR 0 1
27084: PPUSH
27085: CALL_OW 254
27089: ADD
27090: ST_TO_ADDR
// end ; end ; if ruMech and GetClass ( unit ) = 3 and GetSide ( unit ) = 3 and IsOK ( ruFab ) and GetSide ( ruFab ) = 3 then
27091: LD_EXP 53
27095: PUSH
27096: LD_VAR 0 1
27100: PPUSH
27101: CALL_OW 257
27105: PUSH
27106: LD_INT 3
27108: EQUAL
27109: AND
27110: PUSH
27111: LD_VAR 0 1
27115: PPUSH
27116: CALL_OW 255
27120: PUSH
27121: LD_INT 3
27123: EQUAL
27124: AND
27125: PUSH
27126: LD_EXP 37
27130: PPUSH
27131: CALL_OW 302
27135: AND
27136: PUSH
27137: LD_EXP 37
27141: PPUSH
27142: CALL_OW 255
27146: PUSH
27147: LD_INT 3
27149: EQUAL
27150: AND
27151: IFFALSE 27235
// begin ruMech := ruMech - 1 ;
27153: LD_ADDR_EXP 53
27157: PUSH
27158: LD_EXP 53
27162: PUSH
27163: LD_INT 1
27165: MINUS
27166: ST_TO_ADDR
// uc_side = 3 ;
27167: LD_ADDR_OWVAR 20
27171: PUSH
27172: LD_INT 3
27174: ST_TO_ADDR
// uc_nation = 3 ;
27175: LD_ADDR_OWVAR 21
27179: PUSH
27180: LD_INT 3
27182: ST_TO_ADDR
// hc_gallery :=  ;
27183: LD_ADDR_OWVAR 33
27187: PUSH
27188: LD_STRING 
27190: ST_TO_ADDR
// hc_name :=  ;
27191: LD_ADDR_OWVAR 26
27195: PUSH
27196: LD_STRING 
27198: ST_TO_ADDR
// PrepareMechanic ( false , rand ( RuSolMinLevel , RuSolMaxLevel ) ) ;
27199: LD_INT 0
27201: PPUSH
27202: LD_EXP 38
27206: PPUSH
27207: LD_EXP 39
27211: PPUSH
27212: CALL_OW 12
27216: PPUSH
27217: CALL_OW 383
// PlaceHumanInUnit ( CreateHuman , ruFab ) ;
27221: CALL_OW 44
27225: PPUSH
27226: LD_EXP 37
27230: PPUSH
27231: CALL_OW 52
// end ; end ;
27235: PPOPN 1
27237: END
// on VehicleConstructed ( veh , fac ) do begin SOS_VehicleConstructed ( veh , fac ) ;
27238: LD_VAR 0 1
27242: PPUSH
27243: LD_VAR 0 2
27247: PPUSH
27248: CALL 46129 0 2
// end ;
27252: PPOPN 2
27254: END
// on EndTheMissionRaised ( bla ) do begin end_the_mission_allowed = false ;
27255: LD_ADDR_OWVAR 57
27259: PUSH
27260: LD_INT 0
27262: ST_TO_ADDR
// fastEnd = 1 ;
27263: LD_ADDR_EXP 65
27267: PUSH
27268: LD_INT 1
27270: ST_TO_ADDR
// FinishMission ;
27271: CALL 28458 0 0
// end ;
27275: PPOPN 1
27277: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
27278: LD_VAR 0 1
27282: PPUSH
27283: CALL 46113 0 1
// end ; end_of_file
27287: PPOPN 1
27289: END
// export function CreateNature ; var i , un ; begin
27290: LD_INT 0
27292: PPUSH
27293: PPUSH
27294: PPUSH
// for i = 1 to Difficulty + rand ( 1 , 5 ) do
27295: LD_ADDR_VAR 0 2
27299: PUSH
27300: DOUBLE
27301: LD_INT 1
27303: DEC
27304: ST_TO_ADDR
27305: LD_OWVAR 67
27309: PUSH
27310: LD_INT 1
27312: PPUSH
27313: LD_INT 5
27315: PPUSH
27316: CALL_OW 12
27320: PLUS
27321: PUSH
27322: FOR_TO
27323: IFFALSE 27468
// begin hc_sex = sex_male ;
27325: LD_ADDR_OWVAR 27
27329: PUSH
27330: LD_INT 1
27332: ST_TO_ADDR
// uc_side = 0 ;
27333: LD_ADDR_OWVAR 20
27337: PUSH
27338: LD_INT 0
27340: ST_TO_ADDR
// uc_nation = nation_nature ;
27341: LD_ADDR_OWVAR 21
27345: PUSH
27346: LD_INT 0
27348: ST_TO_ADDR
// hc_class = class_apeman ;
27349: LD_ADDR_OWVAR 28
27353: PUSH
27354: LD_INT 12
27356: ST_TO_ADDR
// hc_skills = [ rand ( 2 , 7 ) + Difficulty , rand ( 2 , 10 ) , rand ( 2 , 10 ) , rand ( 2 , 10 ) ] ;
27357: LD_ADDR_OWVAR 31
27361: PUSH
27362: LD_INT 2
27364: PPUSH
27365: LD_INT 7
27367: PPUSH
27368: CALL_OW 12
27372: PUSH
27373: LD_OWVAR 67
27377: PLUS
27378: PUSH
27379: LD_INT 2
27381: PPUSH
27382: LD_INT 10
27384: PPUSH
27385: CALL_OW 12
27389: PUSH
27390: LD_INT 2
27392: PPUSH
27393: LD_INT 10
27395: PPUSH
27396: CALL_OW 12
27400: PUSH
27401: LD_INT 2
27403: PPUSH
27404: LD_INT 10
27406: PPUSH
27407: CALL_OW 12
27411: PUSH
27412: EMPTY
27413: LIST
27414: LIST
27415: LIST
27416: LIST
27417: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27418: LD_ADDR_OWVAR 35
27422: PUSH
27423: LD_INT 5
27425: NEG
27426: PPUSH
27427: LD_INT 5
27429: PPUSH
27430: CALL_OW 12
27434: PUSH
27435: LD_OWVAR 67
27439: MUL
27440: ST_TO_ADDR
// un = CreateHuman ;
27441: LD_ADDR_VAR 0 3
27445: PUSH
27446: CALL_OW 44
27450: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea1 , false ) ;
27451: LD_VAR 0 3
27455: PPUSH
27456: LD_INT 5
27458: PPUSH
27459: LD_INT 0
27461: PPUSH
27462: CALL_OW 49
// end ;
27466: GO 27322
27468: POP
27469: POP
// for i = 1 to Difficulty + 2 do
27470: LD_ADDR_VAR 0 2
27474: PUSH
27475: DOUBLE
27476: LD_INT 1
27478: DEC
27479: ST_TO_ADDR
27480: LD_OWVAR 67
27484: PUSH
27485: LD_INT 2
27487: PLUS
27488: PUSH
27489: FOR_TO
27490: IFFALSE 27599
// begin hc_sex = sex_male ;
27492: LD_ADDR_OWVAR 27
27496: PUSH
27497: LD_INT 1
27499: ST_TO_ADDR
// uc_side = 0 ;
27500: LD_ADDR_OWVAR 20
27504: PUSH
27505: LD_INT 0
27507: ST_TO_ADDR
// uc_nation = nation_nature ;
27508: LD_ADDR_OWVAR 21
27512: PUSH
27513: LD_INT 0
27515: ST_TO_ADDR
// hc_class = class_tiger ;
27516: LD_ADDR_OWVAR 28
27520: PUSH
27521: LD_INT 14
27523: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27524: LD_ADDR_OWVAR 31
27528: PUSH
27529: LD_EXP 39
27533: PUSH
27534: LD_INT 0
27536: PUSH
27537: LD_INT 0
27539: PUSH
27540: LD_INT 0
27542: PUSH
27543: EMPTY
27544: LIST
27545: LIST
27546: LIST
27547: LIST
27548: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) * Difficulty ;
27549: LD_ADDR_OWVAR 35
27553: PUSH
27554: LD_INT 5
27556: NEG
27557: PPUSH
27558: LD_INT 5
27560: PPUSH
27561: CALL_OW 12
27565: PUSH
27566: LD_OWVAR 67
27570: MUL
27571: ST_TO_ADDR
// un = CreateHuman ;
27572: LD_ADDR_VAR 0 3
27576: PUSH
27577: CALL_OW 44
27581: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27582: LD_VAR 0 3
27586: PPUSH
27587: LD_INT 6
27589: PPUSH
27590: LD_INT 0
27592: PPUSH
27593: CALL_OW 49
// end ;
27597: GO 27489
27599: POP
27600: POP
// for i = 1 to rand ( 3 , 4 ) do
27601: LD_ADDR_VAR 0 2
27605: PUSH
27606: DOUBLE
27607: LD_INT 1
27609: DEC
27610: ST_TO_ADDR
27611: LD_INT 3
27613: PPUSH
27614: LD_INT 4
27616: PPUSH
27617: CALL_OW 12
27621: PUSH
27622: FOR_TO
27623: IFFALSE 27717
// begin hc_sex = sex_male ;
27625: LD_ADDR_OWVAR 27
27629: PUSH
27630: LD_INT 1
27632: ST_TO_ADDR
// uc_side = 0 ;
27633: LD_ADDR_OWVAR 20
27637: PUSH
27638: LD_INT 0
27640: ST_TO_ADDR
// uc_nation = nation_nature ;
27641: LD_ADDR_OWVAR 21
27645: PUSH
27646: LD_INT 0
27648: ST_TO_ADDR
// hc_class = 18 ;
27649: LD_ADDR_OWVAR 28
27653: PUSH
27654: LD_INT 18
27656: ST_TO_ADDR
// hc_skills = [ RuSolMaxLevel , 0 , 0 , 0 ] ;
27657: LD_ADDR_OWVAR 31
27661: PUSH
27662: LD_EXP 39
27666: PUSH
27667: LD_INT 0
27669: PUSH
27670: LD_INT 0
27672: PUSH
27673: LD_INT 0
27675: PUSH
27676: EMPTY
27677: LIST
27678: LIST
27679: LIST
27680: LIST
27681: ST_TO_ADDR
// hc_agressivity = 0 ;
27682: LD_ADDR_OWVAR 35
27686: PUSH
27687: LD_INT 0
27689: ST_TO_ADDR
// un = CreateHuman ;
27690: LD_ADDR_VAR 0 3
27694: PUSH
27695: CALL_OW 44
27699: ST_TO_ADDR
// PlaceUnitArea ( un , NatureArea2 , false ) ;
27700: LD_VAR 0 3
27704: PPUSH
27705: LD_INT 6
27707: PPUSH
27708: LD_INT 0
27710: PPUSH
27711: CALL_OW 49
// end ;
27715: GO 27622
27717: POP
27718: POP
// end ; end_of_file
27719: LD_VAR 0 1
27723: RET
// every 0 0$1 trigger arabianAttackersAI = 1 do
27724: LD_EXP 48
27728: PUSH
27729: LD_INT 1
27731: EQUAL
27732: IFFALSE 27827
27734: GO 27736
27736: DISABLE
// begin wait ( 0 0$10 ) ;
27737: LD_INT 350
27739: PPUSH
27740: CALL_OW 67
// RespawnAttackVehicle ( ArabianSpawn2 , 5 , [ 4 , 5 , 6 , 8 ] [ Difficulty ] , rand ( RuSolMinLevel , RuSolMaxLevel ) , 2 , 1 , 1 , [ ] , [ 25 , 26 , 27 , 28 ] , [ ] , 1 ) ;
27744: LD_INT 7
27746: PPUSH
27747: LD_INT 5
27749: PPUSH
27750: LD_INT 4
27752: PUSH
27753: LD_INT 5
27755: PUSH
27756: LD_INT 6
27758: PUSH
27759: LD_INT 8
27761: PUSH
27762: EMPTY
27763: LIST
27764: LIST
27765: LIST
27766: LIST
27767: PUSH
27768: LD_OWVAR 67
27772: ARRAY
27773: PPUSH
27774: LD_EXP 38
27778: PPUSH
27779: LD_EXP 39
27783: PPUSH
27784: CALL_OW 12
27788: PPUSH
27789: LD_INT 2
27791: PPUSH
27792: LD_INT 1
27794: PPUSH
27795: LD_INT 1
27797: PPUSH
27798: EMPTY
27799: PPUSH
27800: LD_INT 25
27802: PUSH
27803: LD_INT 26
27805: PUSH
27806: LD_INT 27
27808: PUSH
27809: LD_INT 28
27811: PUSH
27812: EMPTY
27813: LIST
27814: LIST
27815: LIST
27816: LIST
27817: PPUSH
27818: EMPTY
27819: PPUSH
27820: LD_INT 1
27822: PPUSH
27823: CALL 17584 0 11
// end ;
27827: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27828: LD_EXP 48
27832: PUSH
27833: LD_INT 1
27835: EQUAL
27836: IFFALSE 27928
27838: GO 27840
27840: DISABLE
// RespawnAttackInfantry ( 5 , 2 , [ 5 , 6 , 8 , 9 ] [ Difficulty ] , 0 , 0 , [ 2 , 4 , 5 ] [ Difficulty ] , 0 , rand ( RuSolMinLevel , RuSolMaxLevel ) , ArabianSpawn2 , ArabianHealArea , 1 ) ;
27841: LD_INT 5
27843: PPUSH
27844: LD_INT 2
27846: PPUSH
27847: LD_INT 5
27849: PUSH
27850: LD_INT 6
27852: PUSH
27853: LD_INT 8
27855: PUSH
27856: LD_INT 9
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: LIST
27863: LIST
27864: PUSH
27865: LD_OWVAR 67
27869: ARRAY
27870: PPUSH
27871: LD_INT 0
27873: PPUSH
27874: LD_INT 0
27876: PPUSH
27877: LD_INT 2
27879: PUSH
27880: LD_INT 4
27882: PUSH
27883: LD_INT 5
27885: PUSH
27886: EMPTY
27887: LIST
27888: LIST
27889: LIST
27890: PUSH
27891: LD_OWVAR 67
27895: ARRAY
27896: PPUSH
27897: LD_INT 0
27899: PPUSH
27900: LD_EXP 38
27904: PPUSH
27905: LD_EXP 39
27909: PPUSH
27910: CALL_OW 12
27914: PPUSH
27915: LD_INT 7
27917: PPUSH
27918: LD_INT 9
27920: PPUSH
27921: LD_INT 1
27923: PPUSH
27924: CALL 19288 0 11
27928: END
// every 0 0$1 trigger arabianAttackersAI = 1 do
27929: LD_EXP 48
27933: PUSH
27934: LD_INT 1
27936: EQUAL
27937: IFFALSE 27946
27939: GO 27941
27941: DISABLE
// PrepareArabianSheik ;
27942: CALL 4875 0 0
27946: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
27947: LD_EXP 31
27951: PUSH
27952: LD_EXP 66
27956: PUSH
27957: LD_INT 1
27959: EQUAL
27960: AND
27961: IFFALSE 28030
27963: GO 27965
27965: DISABLE
// begin enable ;
27966: ENABLE
// RespawnAttackInfantry ( 6 , 3 , ru_sold_counter , 0 , Difficulty , 0 , ru_sold_counter div 3 + 1 , rand ( RuSolMinLevel , RuSolMaxLevel ) , RussianAttackSpawn , RussianHealArea4 , 1 ) ;
27967: LD_INT 6
27969: PPUSH
27970: LD_INT 3
27972: PPUSH
27973: LD_EXP 62
27977: PPUSH
27978: LD_INT 0
27980: PPUSH
27981: LD_OWVAR 67
27985: PPUSH
27986: LD_INT 0
27988: PPUSH
27989: LD_EXP 62
27993: PUSH
27994: LD_INT 3
27996: DIV
27997: PUSH
27998: LD_INT 1
28000: PLUS
28001: PPUSH
28002: LD_EXP 38
28006: PPUSH
28007: LD_EXP 39
28011: PPUSH
28012: CALL_OW 12
28016: PPUSH
28017: LD_INT 17
28019: PPUSH
28020: LD_INT 18
28022: PPUSH
28023: LD_INT 1
28025: PPUSH
28026: CALL 19288 0 11
// end ;
28030: END
// every 6 6$30 + 2 2$0 trigger joinEpsilon and attackAvalaible = 1 do
28031: LD_EXP 31
28035: PUSH
28036: LD_EXP 66
28040: PUSH
28041: LD_INT 1
28043: EQUAL
28044: AND
28045: IFFALSE 28134
28047: GO 28049
28049: DISABLE
// begin enable ;
28050: ENABLE
// SayRadio ( AmScout , D4-FSol1-2 ) ;
28051: LD_EXP 18
28055: PPUSH
28056: LD_STRING D4-FSol1-2
28058: PPUSH
28059: CALL_OW 94
// RespawnAttackVehicle ( RussianAttackSpawn , 6 , ru_vehs_counter , rand ( RuSolMinLevel , RuSolMaxLevel ) , 3 , engine_combustion , [ 3 , 3 ] , [ 43 , 44 , 45 , 46 ] , [ ] , [ ] , 1 ) ;
28063: LD_INT 17
28065: PPUSH
28066: LD_INT 6
28068: PPUSH
28069: LD_EXP 61
28073: PPUSH
28074: LD_EXP 38
28078: PPUSH
28079: LD_EXP 39
28083: PPUSH
28084: CALL_OW 12
28088: PPUSH
28089: LD_INT 3
28091: PPUSH
28092: LD_INT 1
28094: PPUSH
28095: LD_INT 3
28097: PUSH
28098: LD_INT 3
28100: PUSH
28101: EMPTY
28102: LIST
28103: LIST
28104: PPUSH
28105: LD_INT 43
28107: PUSH
28108: LD_INT 44
28110: PUSH
28111: LD_INT 45
28113: PUSH
28114: LD_INT 46
28116: PUSH
28117: EMPTY
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: PPUSH
28123: EMPTY
28124: PPUSH
28125: EMPTY
28126: PPUSH
28127: LD_INT 1
28129: PPUSH
28130: CALL 17584 0 11
// end ;
28134: END
// every 10 10$00 trigger joinEpsilon do
28135: LD_EXP 31
28139: IFFALSE 28193
28141: GO 28143
28143: DISABLE
// begin enable ;
28144: ENABLE
// ru_vehs_counter := ru_vehs_counter + rand ( 1 , Difficulty ) ;
28145: LD_ADDR_EXP 61
28149: PUSH
28150: LD_EXP 61
28154: PUSH
28155: LD_INT 1
28157: PPUSH
28158: LD_OWVAR 67
28162: PPUSH
28163: CALL_OW 12
28167: PLUS
28168: ST_TO_ADDR
// ru_sold_counter := ru_sold_counter + rand ( 1 , Difficulty ) ;
28169: LD_ADDR_EXP 62
28173: PUSH
28174: LD_EXP 62
28178: PUSH
28179: LD_INT 1
28181: PPUSH
28182: LD_OWVAR 67
28186: PPUSH
28187: CALL_OW 12
28191: PLUS
28192: ST_TO_ADDR
// end ;
28193: END
// every 21 21$0 trigger attackAvalaible = 1 do
28194: LD_EXP 66
28198: PUSH
28199: LD_INT 1
28201: EQUAL
28202: IFFALSE 28215
28204: GO 28206
28206: DISABLE
// attackAvalaible = 0 ; end_of_file
28207: LD_ADDR_EXP 66
28211: PUSH
28212: LD_INT 0
28214: ST_TO_ADDR
28215: END
// every 0 0$1 trigger GetTech ( 54 , 1 ) = state_researched and GetTech ( 55 , 1 ) = state_researched and GetTech ( 21 , 1 ) = state_researched and GetTech ( 22 , 1 ) = state_researched and [ GetTech ( tech_LasSight , 1 ) = state_enabled or GetTech ( tech_AI , 1 ) = state_enabled ] and arabianDefeated = 1 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 do
28216: LD_INT 54
28218: PPUSH
28219: LD_INT 1
28221: PPUSH
28222: CALL_OW 321
28226: PUSH
28227: LD_INT 2
28229: EQUAL
28230: PUSH
28231: LD_INT 55
28233: PPUSH
28234: LD_INT 1
28236: PPUSH
28237: CALL_OW 321
28241: PUSH
28242: LD_INT 2
28244: EQUAL
28245: AND
28246: PUSH
28247: LD_INT 21
28249: PPUSH
28250: LD_INT 1
28252: PPUSH
28253: CALL_OW 321
28257: PUSH
28258: LD_INT 2
28260: EQUAL
28261: AND
28262: PUSH
28263: LD_INT 22
28265: PPUSH
28266: LD_INT 1
28268: PPUSH
28269: CALL_OW 321
28273: PUSH
28274: LD_INT 2
28276: EQUAL
28277: AND
28278: PUSH
28279: LD_INT 12
28281: PPUSH
28282: LD_INT 1
28284: PPUSH
28285: CALL_OW 321
28289: PUSH
28290: LD_INT 1
28292: EQUAL
28293: PUSH
28294: LD_INT 32
28296: PPUSH
28297: LD_INT 1
28299: PPUSH
28300: CALL_OW 321
28304: PUSH
28305: LD_INT 1
28307: EQUAL
28308: OR
28309: PUSH
28310: EMPTY
28311: LIST
28312: AND
28313: PUSH
28314: LD_EXP 50
28318: PUSH
28319: LD_INT 1
28321: EQUAL
28322: AND
28323: PUSH
28324: LD_INT 22
28326: PUSH
28327: LD_INT 3
28329: PUSH
28330: EMPTY
28331: LIST
28332: LIST
28333: PUSH
28334: LD_INT 21
28336: PUSH
28337: LD_INT 1
28339: PUSH
28340: EMPTY
28341: LIST
28342: LIST
28343: PUSH
28344: EMPTY
28345: LIST
28346: LIST
28347: PPUSH
28348: CALL_OW 69
28352: PUSH
28353: LD_INT 0
28355: EQUAL
28356: AND
28357: IFFALSE 28413
28359: GO 28361
28361: DISABLE
// begin case query ( QEndMission ) of 1 :
28362: LD_STRING QEndMission
28364: PPUSH
28365: CALL_OW 97
28369: PUSH
28370: LD_INT 1
28372: DOUBLE
28373: EQUAL
28374: IFTRUE 28378
28376: GO 28389
28378: POP
// begin end_the_mission_allowed = true ;
28379: LD_ADDR_OWVAR 57
28383: PUSH
28384: LD_INT 1
28386: ST_TO_ADDR
// end ; 2 :
28387: GO 28413
28389: LD_INT 2
28391: DOUBLE
28392: EQUAL
28393: IFTRUE 28397
28395: GO 28412
28397: POP
// begin fastEnd = 1 ;
28398: LD_ADDR_EXP 65
28402: PUSH
28403: LD_INT 1
28405: ST_TO_ADDR
// FinishMission ;
28406: CALL 28458 0 0
// end ; end ;
28410: GO 28413
28412: POP
// end ;
28413: END
// every 0 0$1 trigger spawnRussians and not ruDepotConstructed and FilterAllUnits ( [ f_side , 3 ] ) = 0 do
28414: LD_EXP 60
28418: PUSH
28419: LD_EXP 59
28423: NOT
28424: AND
28425: PUSH
28426: LD_INT 22
28428: PUSH
28429: LD_INT 3
28431: PUSH
28432: EMPTY
28433: LIST
28434: LIST
28435: PPUSH
28436: CALL_OW 69
28440: PUSH
28441: LD_INT 0
28443: EQUAL
28444: AND
28445: IFFALSE 28457
28447: GO 28449
28449: DISABLE
// SetAchievement ( ACH_TACT ) ;
28450: LD_STRING ACH_TACT
28452: PPUSH
28453: CALL_OW 543
28457: END
// export function FinishMission ; var m1 , m2 , m3 ; begin
28458: LD_INT 0
28460: PPUSH
28461: PPUSH
28462: PPUSH
28463: PPUSH
// if not snipersTrained then
28464: LD_EXP 64
28468: NOT
28469: IFFALSE 28478
// SetAchievement ( ACH_SNIPER ) ;
28471: LD_STRING ACH_SNIPER
28473: PPUSH
28474: CALL_OW 543
// m1 := false ;
28478: LD_ADDR_VAR 0 2
28482: PUSH
28483: LD_INT 0
28485: ST_TO_ADDR
// m2 := false ;
28486: LD_ADDR_VAR 0 3
28490: PUSH
28491: LD_INT 0
28493: ST_TO_ADDR
// m3 := false ;
28494: LD_ADDR_VAR 0 4
28498: PUSH
28499: LD_INT 0
28501: ST_TO_ADDR
// SaveVariable ( KhatamStatus , 10_KhatamStatus_1 ) ;
28502: LD_EXP 55
28506: PPUSH
28507: LD_STRING 10_KhatamStatus_1
28509: PPUSH
28510: CALL_OW 39
// SaveVariable ( GensherStatus , 10_GensherEscape_1 ) ;
28514: LD_EXP 54
28518: PPUSH
28519: LD_STRING 10_GensherEscape_1
28521: PPUSH
28522: CALL_OW 39
// if GetTech ( tech_LasSight , 1 ) = state_researched then
28526: LD_INT 12
28528: PPUSH
28529: LD_INT 1
28531: PPUSH
28532: CALL_OW 321
28536: PUSH
28537: LD_INT 2
28539: EQUAL
28540: IFFALSE 28562
// begin AddMedal ( sights , 1 ) ;
28542: LD_STRING sights
28544: PPUSH
28545: LD_INT 1
28547: PPUSH
28548: CALL_OW 101
// m1 := true ;
28552: LD_ADDR_VAR 0 2
28556: PUSH
28557: LD_INT 1
28559: ST_TO_ADDR
// end else
28560: GO 28573
// begin AddMedal ( sights , - 1 ) ;
28562: LD_STRING sights
28564: PPUSH
28565: LD_INT 1
28567: NEG
28568: PPUSH
28569: CALL_OW 101
// end ; if GetTech ( tech_AI , 1 ) = state_researched then
28573: LD_INT 32
28575: PPUSH
28576: LD_INT 1
28578: PPUSH
28579: CALL_OW 321
28583: PUSH
28584: LD_INT 2
28586: EQUAL
28587: IFFALSE 28609
// begin AddMedal ( computers , 1 ) ;
28589: LD_STRING computers
28591: PPUSH
28592: LD_INT 1
28594: PPUSH
28595: CALL_OW 101
// m2 := true ;
28599: LD_ADDR_VAR 0 3
28603: PUSH
28604: LD_INT 1
28606: ST_TO_ADDR
// end else
28607: GO 28620
// begin AddMedal ( computers , - 1 ) ;
28609: LD_STRING computers
28611: PPUSH
28612: LD_INT 1
28614: NEG
28615: PPUSH
28616: CALL_OW 101
// end ; if arabianEscape = 0 then
28620: LD_EXP 49
28624: PUSH
28625: LD_INT 0
28627: EQUAL
28628: IFFALSE 28660
// begin AddMedal ( renegades , 2 ) ;
28630: LD_STRING renegades
28632: PPUSH
28633: LD_INT 2
28635: PPUSH
28636: CALL_OW 101
// m3 := true ;
28640: LD_ADDR_VAR 0 4
28644: PUSH
28645: LD_INT 1
28647: ST_TO_ADDR
// SaveVariable ( 0 , 10_ScientistsEscape_1 ) ;
28648: LD_INT 0
28650: PPUSH
28651: LD_STRING 10_ScientistsEscape_1
28653: PPUSH
28654: CALL_OW 39
// end else
28658: GO 28671
// begin AddMedal ( renegades , - 1 ) ;
28660: LD_STRING renegades
28662: PPUSH
28663: LD_INT 1
28665: NEG
28666: PPUSH
28667: CALL_OW 101
// end ; SaveEpsilonBase ;
28671: CALL 29486 0 0
// if m1 and m2 and m3 and Difficulty >= 3 then
28675: LD_VAR 0 2
28679: PUSH
28680: LD_VAR 0 3
28684: AND
28685: PUSH
28686: LD_VAR 0 4
28690: AND
28691: PUSH
28692: LD_OWVAR 67
28696: PUSH
28697: LD_INT 3
28699: GREATEREQUAL
28700: AND
28701: IFFALSE 28713
// SetAchievementEX ( ACH_AMER , 10 ) ;
28703: LD_STRING ACH_AMER
28705: PPUSH
28706: LD_INT 10
28708: PPUSH
28709: CALL_OW 564
// if tick <= 40 40$00 then
28713: LD_OWVAR 1
28717: PUSH
28718: LD_INT 84000
28720: LESSEQUAL
28721: IFFALSE 28737
// begin wait ( 3 ) ;
28723: LD_INT 3
28725: PPUSH
28726: CALL_OW 67
// SetAchievement ( ACH_ASPEED_10 ) ;
28730: LD_STRING ACH_ASPEED_10
28732: PPUSH
28733: CALL_OW 543
// end ; GiveMedals ( Main ) ;
28737: LD_STRING Main
28739: PPUSH
28740: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 1 ] , [ f_nation , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) ) ;
28744: LD_INT 22
28746: PUSH
28747: LD_INT 1
28749: PUSH
28750: EMPTY
28751: LIST
28752: LIST
28753: PUSH
28754: LD_INT 23
28756: PUSH
28757: LD_INT 1
28759: PUSH
28760: EMPTY
28761: LIST
28762: LIST
28763: PUSH
28764: LD_INT 21
28766: PUSH
28767: LD_INT 1
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: PUSH
28774: LD_INT 2
28776: PUSH
28777: LD_INT 25
28779: PUSH
28780: LD_INT 1
28782: PUSH
28783: EMPTY
28784: LIST
28785: LIST
28786: PUSH
28787: LD_INT 25
28789: PUSH
28790: LD_INT 2
28792: PUSH
28793: EMPTY
28794: LIST
28795: LIST
28796: PUSH
28797: LD_INT 25
28799: PUSH
28800: LD_INT 3
28802: PUSH
28803: EMPTY
28804: LIST
28805: LIST
28806: PUSH
28807: LD_INT 25
28809: PUSH
28810: LD_INT 4
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: PUSH
28817: LD_INT 25
28819: PUSH
28820: LD_INT 5
28822: PUSH
28823: EMPTY
28824: LIST
28825: LIST
28826: PUSH
28827: LD_INT 25
28829: PUSH
28830: LD_INT 8
28832: PUSH
28833: EMPTY
28834: LIST
28835: LIST
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: LIST
28841: LIST
28842: LIST
28843: LIST
28844: LIST
28845: PUSH
28846: EMPTY
28847: LIST
28848: LIST
28849: LIST
28850: LIST
28851: PPUSH
28852: CALL_OW 69
28856: PPUSH
28857: CALL_OW 43
// SaveCharacters ( JMM , mission_prefix & JMM ) ;
28861: LD_EXP 1
28865: PPUSH
28866: LD_EXP 56
28870: PUSH
28871: LD_STRING JMM
28873: STR
28874: PPUSH
28875: CALL_OW 38
// EnchancedSaveCharacters ( Brown , mission_prefix & Brown ) ;
28879: LD_EXP 2
28883: PPUSH
28884: LD_EXP 56
28888: PUSH
28889: LD_STRING Brown
28891: STR
28892: PPUSH
28893: CALL 11768 0 2
// EnchancedSaveCharacters ( Donaldson , mission_prefix & Donaldson ) ;
28897: LD_EXP 3
28901: PPUSH
28902: LD_EXP 56
28906: PUSH
28907: LD_STRING Donaldson
28909: STR
28910: PPUSH
28911: CALL 11768 0 2
// EnchancedSaveCharacters ( Bobby , mission_prefix & Bobby ) ;
28915: LD_EXP 4
28919: PPUSH
28920: LD_EXP 56
28924: PUSH
28925: LD_STRING Bobby
28927: STR
28928: PPUSH
28929: CALL 11768 0 2
// EnchancedSaveCharacters ( Cyrus , mission_prefix & Cyrus ) ;
28933: LD_EXP 5
28937: PPUSH
28938: LD_EXP 56
28942: PUSH
28943: LD_STRING Cyrus
28945: STR
28946: PPUSH
28947: CALL 11768 0 2
// EnchancedSaveCharacters ( Lisa , mission_prefix & Lisa ) ;
28951: LD_EXP 6
28955: PPUSH
28956: LD_EXP 56
28960: PUSH
28961: LD_STRING Lisa
28963: STR
28964: PPUSH
28965: CALL 11768 0 2
// EnchancedSaveCharacters ( Frank , mission_prefix & Frank ) ;
28969: LD_EXP 7
28973: PPUSH
28974: LD_EXP 56
28978: PUSH
28979: LD_STRING Frank
28981: STR
28982: PPUSH
28983: CALL 11768 0 2
// EnchancedSaveCharacters ( Kikuchi , mission_prefix & Kikuchi ) ;
28987: LD_EXP 8
28991: PPUSH
28992: LD_EXP 56
28996: PUSH
28997: LD_STRING Kikuchi
28999: STR
29000: PPUSH
29001: CALL 11768 0 2
// EnchancedSaveCharacters ( Houten , mission_prefix & Houten ) ;
29005: LD_EXP 9
29009: PPUSH
29010: LD_EXP 56
29014: PUSH
29015: LD_STRING Houten
29017: STR
29018: PPUSH
29019: CALL 11768 0 2
// EnchancedSaveCharacters ( Gary , mission_prefix & Gary ) ;
29023: LD_EXP 10
29027: PPUSH
29028: LD_EXP 56
29032: PUSH
29033: LD_STRING Gary
29035: STR
29036: PPUSH
29037: CALL 11768 0 2
// EnchancedSaveCharacters ( Cornell , mission_prefix & Cornell ) ;
29041: LD_EXP 20
29045: PPUSH
29046: LD_EXP 56
29050: PUSH
29051: LD_STRING Cornell
29053: STR
29054: PPUSH
29055: CALL 11768 0 2
// EnchancedSaveCharacters ( Simms , mission_prefix & Simms ) ;
29059: LD_EXP 11
29063: PPUSH
29064: LD_EXP 56
29068: PUSH
29069: LD_STRING Simms
29071: STR
29072: PPUSH
29073: CALL 11768 0 2
// EnchancedSaveCharacters ( Denis , mission_prefix & Denis ) ;
29077: LD_EXP 12
29081: PPUSH
29082: LD_EXP 56
29086: PUSH
29087: LD_STRING Denis
29089: STR
29090: PPUSH
29091: CALL 11768 0 2
// EnchancedSaveCharacters ( Joan , mission_prefix & Joan ) ;
29095: LD_EXP 13
29099: PPUSH
29100: LD_EXP 56
29104: PUSH
29105: LD_STRING Joan
29107: STR
29108: PPUSH
29109: CALL 11768 0 2
// EnchancedSaveCharacters ( Gladstone , mission_prefix & Gladstone ) ;
29113: LD_EXP 15
29117: PPUSH
29118: LD_EXP 56
29122: PUSH
29123: LD_STRING Gladstone
29125: STR
29126: PPUSH
29127: CALL 11768 0 2
// EnchancedSaveCharacters ( DeltaDoctor , mission_prefix & DeltaDoctor ) ;
29131: LD_EXP 17
29135: PPUSH
29136: LD_EXP 56
29140: PUSH
29141: LD_STRING DeltaDoctor
29143: STR
29144: PPUSH
29145: CALL 11768 0 2
// if IsLive ( Mike ) then
29149: LD_EXP 19
29153: PPUSH
29154: CALL_OW 300
29158: IFFALSE 29178
// SaveCharacters ( Mike , mission_prefix & Mike ) ;
29160: LD_EXP 19
29164: PPUSH
29165: LD_EXP 56
29169: PUSH
29170: LD_STRING Mike
29172: STR
29173: PPUSH
29174: CALL_OW 38
// SaveCharacters ( others09 , 10c_lock ) ;
29178: LD_EXP 24
29182: PPUSH
29183: LD_STRING 10c_lock
29185: PPUSH
29186: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] ] ] ) diff [ JMM , Brown , Donaldson , Bobby , Cyrus , Lisa , Frank , Gladstone , Kikuchi , Denis , Joan , Houten , Simms , Gary , DeltaDoctor , Cornell ] , 10_other_survivors ) ;
29190: LD_INT 50
29192: PUSH
29193: EMPTY
29194: LIST
29195: PUSH
29196: LD_INT 22
29198: PUSH
29199: LD_INT 1
29201: PUSH
29202: EMPTY
29203: LIST
29204: LIST
29205: PUSH
29206: LD_INT 21
29208: PUSH
29209: LD_INT 1
29211: PUSH
29212: EMPTY
29213: LIST
29214: LIST
29215: PUSH
29216: LD_INT 2
29218: PUSH
29219: LD_INT 25
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: EMPTY
29226: LIST
29227: LIST
29228: PUSH
29229: LD_INT 25
29231: PUSH
29232: LD_INT 2
29234: PUSH
29235: EMPTY
29236: LIST
29237: LIST
29238: PUSH
29239: LD_INT 25
29241: PUSH
29242: LD_INT 3
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 25
29251: PUSH
29252: LD_INT 4
29254: PUSH
29255: EMPTY
29256: LIST
29257: LIST
29258: PUSH
29259: LD_INT 25
29261: PUSH
29262: LD_INT 5
29264: PUSH
29265: EMPTY
29266: LIST
29267: LIST
29268: PUSH
29269: LD_INT 25
29271: PUSH
29272: LD_INT 8
29274: PUSH
29275: EMPTY
29276: LIST
29277: LIST
29278: PUSH
29279: EMPTY
29280: LIST
29281: LIST
29282: LIST
29283: LIST
29284: LIST
29285: LIST
29286: LIST
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: PPUSH
29294: CALL_OW 69
29298: PUSH
29299: LD_EXP 1
29303: PUSH
29304: LD_EXP 2
29308: PUSH
29309: LD_EXP 3
29313: PUSH
29314: LD_EXP 4
29318: PUSH
29319: LD_EXP 5
29323: PUSH
29324: LD_EXP 6
29328: PUSH
29329: LD_EXP 7
29333: PUSH
29334: LD_EXP 15
29338: PUSH
29339: LD_EXP 8
29343: PUSH
29344: LD_EXP 12
29348: PUSH
29349: LD_EXP 13
29353: PUSH
29354: LD_EXP 9
29358: PUSH
29359: LD_EXP 11
29363: PUSH
29364: LD_EXP 10
29368: PUSH
29369: LD_EXP 17
29373: PUSH
29374: LD_EXP 20
29378: PUSH
29379: EMPTY
29380: LIST
29381: LIST
29382: LIST
29383: LIST
29384: LIST
29385: LIST
29386: LIST
29387: LIST
29388: LIST
29389: LIST
29390: LIST
29391: LIST
29392: LIST
29393: LIST
29394: LIST
29395: LIST
29396: DIFF
29397: PPUSH
29398: LD_STRING 10_other_survivors
29400: PPUSH
29401: CALL_OW 38
// SaveCharacters ( FilterAllUnits ( [ [ f_ok ] , [ f_side , 1 ] , [ f_type , unit_human ] , [ f_or , [ f_class , 16 ] , [ f_class , 12 ] ] ] ) , 10_ape ) ;
29405: LD_INT 50
29407: PUSH
29408: EMPTY
29409: LIST
29410: PUSH
29411: LD_INT 22
29413: PUSH
29414: LD_INT 1
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: PUSH
29421: LD_INT 21
29423: PUSH
29424: LD_INT 1
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 2
29433: PUSH
29434: LD_INT 25
29436: PUSH
29437: LD_INT 16
29439: PUSH
29440: EMPTY
29441: LIST
29442: LIST
29443: PUSH
29444: LD_INT 25
29446: PUSH
29447: LD_INT 12
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: EMPTY
29455: LIST
29456: LIST
29457: LIST
29458: PUSH
29459: EMPTY
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: PPUSH
29465: CALL_OW 69
29469: PPUSH
29470: LD_STRING 10_ape
29472: PPUSH
29473: CALL_OW 38
// YouWin ;
29477: CALL_OW 103
// end ;
29481: LD_VAR 0 1
29485: RET
// export function SaveEpsilonBase ; var epsilonBase , buildings , i ; begin
29486: LD_INT 0
29488: PPUSH
29489: PPUSH
29490: PPUSH
29491: PPUSH
// epsilonBase = [ ] ;
29492: LD_ADDR_VAR 0 2
29496: PUSH
29497: EMPTY
29498: ST_TO_ADDR
// buildings = FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_building ] , [ f_ok ] ] ) ;
29499: LD_ADDR_VAR 0 3
29503: PUSH
29504: LD_INT 22
29506: PUSH
29507: LD_INT 1
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: PUSH
29514: LD_INT 21
29516: PUSH
29517: LD_INT 3
29519: PUSH
29520: EMPTY
29521: LIST
29522: LIST
29523: PUSH
29524: LD_INT 50
29526: PUSH
29527: EMPTY
29528: LIST
29529: PUSH
29530: EMPTY
29531: LIST
29532: LIST
29533: LIST
29534: PPUSH
29535: CALL_OW 69
29539: ST_TO_ADDR
// for i in buildings do
29540: LD_ADDR_VAR 0 4
29544: PUSH
29545: LD_VAR 0 3
29549: PUSH
29550: FOR_IN
29551: IFFALSE 30003
// begin if GetBType ( i ) in [ b_lab , b_lab_half , b_lab_full ] then
29553: LD_VAR 0 4
29557: PPUSH
29558: CALL_OW 266
29562: PUSH
29563: LD_INT 6
29565: PUSH
29566: LD_INT 7
29568: PUSH
29569: LD_INT 8
29571: PUSH
29572: EMPTY
29573: LIST
29574: LIST
29575: LIST
29576: IN
29577: IFFALSE 29691
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetLabKind ( i , 1 ) , GetLabKind ( i , 2 ) ] ] else
29579: LD_ADDR_VAR 0 2
29583: PUSH
29584: LD_VAR 0 2
29588: PUSH
29589: LD_VAR 0 4
29593: PPUSH
29594: CALL_OW 266
29598: PUSH
29599: LD_VAR 0 4
29603: PPUSH
29604: CALL_OW 250
29608: PUSH
29609: LD_VAR 0 4
29613: PPUSH
29614: CALL_OW 251
29618: PUSH
29619: LD_VAR 0 4
29623: PPUSH
29624: CALL_OW 254
29628: PUSH
29629: LD_VAR 0 4
29633: PPUSH
29634: CALL_OW 267
29638: PUSH
29639: LD_VAR 0 4
29643: PPUSH
29644: CALL_OW 248
29648: PUSH
29649: LD_VAR 0 4
29653: PPUSH
29654: LD_INT 1
29656: PPUSH
29657: CALL_OW 268
29661: PUSH
29662: LD_VAR 0 4
29666: PPUSH
29667: LD_INT 2
29669: PPUSH
29670: CALL_OW 268
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: LIST
29679: LIST
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: PUSH
29685: EMPTY
29686: LIST
29687: ADD
29688: ST_TO_ADDR
29689: GO 30001
// if GetBType ( i ) = b_bunker or GetBType ( i ) = b_turret then
29691: LD_VAR 0 4
29695: PPUSH
29696: CALL_OW 266
29700: PUSH
29701: LD_INT 32
29703: EQUAL
29704: PUSH
29705: LD_VAR 0 4
29709: PPUSH
29710: CALL_OW 266
29714: PUSH
29715: LD_INT 33
29717: EQUAL
29718: OR
29719: IFFALSE 29816
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) , GetBWeapon ( i ) ] ] else
29721: LD_ADDR_VAR 0 2
29725: PUSH
29726: LD_VAR 0 2
29730: PUSH
29731: LD_VAR 0 4
29735: PPUSH
29736: CALL_OW 266
29740: PUSH
29741: LD_VAR 0 4
29745: PPUSH
29746: CALL_OW 250
29750: PUSH
29751: LD_VAR 0 4
29755: PPUSH
29756: CALL_OW 251
29760: PUSH
29761: LD_VAR 0 4
29765: PPUSH
29766: CALL_OW 254
29770: PUSH
29771: LD_VAR 0 4
29775: PPUSH
29776: CALL_OW 267
29780: PUSH
29781: LD_VAR 0 4
29785: PPUSH
29786: CALL_OW 248
29790: PUSH
29791: LD_VAR 0 4
29795: PPUSH
29796: CALL_OW 269
29800: PUSH
29801: EMPTY
29802: LIST
29803: LIST
29804: LIST
29805: LIST
29806: LIST
29807: LIST
29808: LIST
29809: PUSH
29810: EMPTY
29811: LIST
29812: ADD
29813: ST_TO_ADDR
29814: GO 30001
// if GetBType ( i ) = b_factory then
29816: LD_VAR 0 4
29820: PPUSH
29821: CALL_OW 266
29825: PUSH
29826: LD_INT 3
29828: EQUAL
29829: IFFALSE 29919
// epsilonBase = Insert ( epsilonBase , 1 , [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ) else
29831: LD_ADDR_VAR 0 2
29835: PUSH
29836: LD_VAR 0 2
29840: PPUSH
29841: LD_INT 1
29843: PPUSH
29844: LD_VAR 0 4
29848: PPUSH
29849: CALL_OW 266
29853: PUSH
29854: LD_VAR 0 4
29858: PPUSH
29859: CALL_OW 250
29863: PUSH
29864: LD_VAR 0 4
29868: PPUSH
29869: CALL_OW 251
29873: PUSH
29874: LD_VAR 0 4
29878: PPUSH
29879: CALL_OW 254
29883: PUSH
29884: LD_VAR 0 4
29888: PPUSH
29889: CALL_OW 267
29893: PUSH
29894: LD_VAR 0 4
29898: PPUSH
29899: CALL_OW 248
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: PPUSH
29912: CALL_OW 2
29916: ST_TO_ADDR
29917: GO 30001
// epsilonBase = epsilonBase ^ [ [ GetBType ( i ) , GetX ( i ) , GetY ( i ) , GetDir ( i ) , GetBLevel ( i ) , GetNation ( i ) ] ] ;
29919: LD_ADDR_VAR 0 2
29923: PUSH
29924: LD_VAR 0 2
29928: PUSH
29929: LD_VAR 0 4
29933: PPUSH
29934: CALL_OW 266
29938: PUSH
29939: LD_VAR 0 4
29943: PPUSH
29944: CALL_OW 250
29948: PUSH
29949: LD_VAR 0 4
29953: PPUSH
29954: CALL_OW 251
29958: PUSH
29959: LD_VAR 0 4
29963: PPUSH
29964: CALL_OW 254
29968: PUSH
29969: LD_VAR 0 4
29973: PPUSH
29974: CALL_OW 267
29978: PUSH
29979: LD_VAR 0 4
29983: PPUSH
29984: CALL_OW 248
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: LIST
29993: LIST
29994: LIST
29995: LIST
29996: PUSH
29997: EMPTY
29998: LIST
29999: ADD
30000: ST_TO_ADDR
// end ;
30001: GO 29550
30003: POP
30004: POP
// SaveVariable ( epsilonBase , 10_EpsilonBase ) ;
30005: LD_VAR 0 2
30009: PPUSH
30010: LD_STRING 10_EpsilonBase
30012: PPUSH
30013: CALL_OW 39
// SaveEnvironment ( epsilonTerrain , 10_EpsilonEnv ) ;
30017: LD_INT 19
30019: PPUSH
30020: LD_STRING 10_EpsilonEnv
30022: PPUSH
30023: CALL 30032 0 2
// end ;
30027: LD_VAR 0 1
30031: RET
// export function SaveEnvironment ( area , saveId ) ; begin
30032: LD_INT 0
30034: PPUSH
// result := ListEnvironmentArea ( area ) ;
30035: LD_ADDR_VAR 0 3
30039: PUSH
30040: LD_VAR 0 1
30044: PPUSH
30045: CALL_OW 353
30049: ST_TO_ADDR
// SaveVariable ( result , saveId ) ;
30050: LD_VAR 0 3
30054: PPUSH
30055: LD_VAR 0 2
30059: PPUSH
30060: CALL_OW 39
// end ; end_of_file
30064: LD_VAR 0 3
30068: RET
// every 0 0$01 do var timer ;
30069: GO 30071
30071: DISABLE
30072: LD_INT 0
30074: PPUSH
// begin timer := 0 0$20 ;
30075: LD_ADDR_VAR 0 1
30079: PUSH
30080: LD_INT 700
30082: ST_TO_ADDR
// repeat wait ( timer ) ;
30083: LD_VAR 0 1
30087: PPUSH
30088: CALL_OW 67
// if cratesSpawned >= 6 and cratesSpawned < 14 then
30092: LD_EXP 58
30096: PUSH
30097: LD_INT 6
30099: GREATEREQUAL
30100: PUSH
30101: LD_EXP 58
30105: PUSH
30106: LD_INT 14
30108: LESS
30109: AND
30110: IFFALSE 30126
// timer := timer + 0 0$3 ;
30112: LD_ADDR_VAR 0 1
30116: PUSH
30117: LD_VAR 0 1
30121: PUSH
30122: LD_INT 105
30124: PLUS
30125: ST_TO_ADDR
// if cratesSpawned >= 14 then
30126: LD_EXP 58
30130: PUSH
30131: LD_INT 14
30133: GREATEREQUAL
30134: IFFALSE 30150
// timer := timer + 0 0$6 ;
30136: LD_ADDR_VAR 0 1
30140: PUSH
30141: LD_VAR 0 1
30145: PUSH
30146: LD_INT 210
30148: PLUS
30149: ST_TO_ADDR
// if timer > 2 2$00 then
30150: LD_VAR 0 1
30154: PUSH
30155: LD_INT 4200
30157: GREATER
30158: IFFALSE 30168
// timer := 0 0$45 ;
30160: LD_ADDR_VAR 0 1
30164: PUSH
30165: LD_INT 1575
30167: ST_TO_ADDR
// CreateCratesArea ( rand ( 1 , 5 ) , CratesArea , true ) ;
30168: LD_INT 1
30170: PPUSH
30171: LD_INT 5
30173: PPUSH
30174: CALL_OW 12
30178: PPUSH
30179: LD_INT 16
30181: PPUSH
30182: LD_INT 1
30184: PPUSH
30185: CALL_OW 55
// cratesSpawned = cratesSpawned + 1 ;
30189: LD_ADDR_EXP 58
30193: PUSH
30194: LD_EXP 58
30198: PUSH
30199: LD_INT 1
30201: PLUS
30202: ST_TO_ADDR
// until false ;
30203: LD_INT 0
30205: IFFALSE 30083
// end ; end_of_file end_of_file
30207: PPOPN 1
30209: END
// every 0 0$1 do
30210: GO 30212
30212: DISABLE
// begin enable ;
30213: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
30214: LD_STRING updateTimer(
30216: PUSH
30217: LD_OWVAR 1
30221: STR
30222: PUSH
30223: LD_STRING );
30225: STR
30226: PPUSH
30227: CALL_OW 559
// end ;
30231: END
// export function SOS_MapStart ( ) ; begin
30232: LD_INT 0
30234: PPUSH
// if streamModeActive then
30235: LD_EXP 72
30239: IFFALSE 30248
// DefineStreamItems ( true ) ;
30241: LD_INT 1
30243: PPUSH
30244: CALL 32052 0 1
// UpdateLuaVariables ( ) ;
30248: CALL 30265 0 0
// UpdateFactoryWaypoints ( ) ;
30252: CALL 44913 0 0
// UpdateWarehouseGatheringPoints ( ) ;
30256: CALL 45170 0 0
// end ;
30260: LD_VAR 0 1
30264: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
30265: LD_INT 0
30267: PPUSH
// if not globalGameSaveCounter then
30268: LD_EXP 71
30272: NOT
30273: IFFALSE 30284
// ToLua ( setGameSaveCounter(0) ) else
30275: LD_STRING setGameSaveCounter(0)
30277: PPUSH
30278: CALL_OW 559
30282: GO 30316
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
30284: LD_ADDR_EXP 71
30288: PUSH
30289: LD_EXP 71
30293: PPUSH
30294: CALL 89127 0 1
30298: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
30299: LD_STRING setGameSaveCounter(
30301: PUSH
30302: LD_EXP 71
30306: STR
30307: PUSH
30308: LD_STRING )
30310: STR
30311: PPUSH
30312: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
30316: LD_STRING setGameDifficulty(
30318: PUSH
30319: LD_OWVAR 67
30323: STR
30324: PUSH
30325: LD_STRING )
30327: STR
30328: PPUSH
30329: CALL_OW 559
// end ;
30333: LD_VAR 0 1
30337: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
30338: LD_INT 0
30340: PPUSH
// if p2 = stream_mode then
30341: LD_VAR 0 2
30345: PUSH
30346: LD_INT 100
30348: EQUAL
30349: IFFALSE 31352
// begin if not StreamModeActive then
30351: LD_EXP 72
30355: NOT
30356: IFFALSE 30366
// StreamModeActive := true ;
30358: LD_ADDR_EXP 72
30362: PUSH
30363: LD_INT 1
30365: ST_TO_ADDR
// if p3 = 0 then
30366: LD_VAR 0 3
30370: PUSH
30371: LD_INT 0
30373: EQUAL
30374: IFFALSE 30380
// InitStreamMode ;
30376: CALL 31588 0 0
// if p3 = 1 then
30380: LD_VAR 0 3
30384: PUSH
30385: LD_INT 1
30387: EQUAL
30388: IFFALSE 30398
// sRocket := true ;
30390: LD_ADDR_EXP 77
30394: PUSH
30395: LD_INT 1
30397: ST_TO_ADDR
// if p3 = 2 then
30398: LD_VAR 0 3
30402: PUSH
30403: LD_INT 2
30405: EQUAL
30406: IFFALSE 30416
// sSpeed := true ;
30408: LD_ADDR_EXP 76
30412: PUSH
30413: LD_INT 1
30415: ST_TO_ADDR
// if p3 = 3 then
30416: LD_VAR 0 3
30420: PUSH
30421: LD_INT 3
30423: EQUAL
30424: IFFALSE 30434
// sEngine := true ;
30426: LD_ADDR_EXP 78
30430: PUSH
30431: LD_INT 1
30433: ST_TO_ADDR
// if p3 = 4 then
30434: LD_VAR 0 3
30438: PUSH
30439: LD_INT 4
30441: EQUAL
30442: IFFALSE 30452
// sSpec := true ;
30444: LD_ADDR_EXP 75
30448: PUSH
30449: LD_INT 1
30451: ST_TO_ADDR
// if p3 = 5 then
30452: LD_VAR 0 3
30456: PUSH
30457: LD_INT 5
30459: EQUAL
30460: IFFALSE 30470
// sLevel := true ;
30462: LD_ADDR_EXP 79
30466: PUSH
30467: LD_INT 1
30469: ST_TO_ADDR
// if p3 = 6 then
30470: LD_VAR 0 3
30474: PUSH
30475: LD_INT 6
30477: EQUAL
30478: IFFALSE 30488
// sArmoury := true ;
30480: LD_ADDR_EXP 80
30484: PUSH
30485: LD_INT 1
30487: ST_TO_ADDR
// if p3 = 7 then
30488: LD_VAR 0 3
30492: PUSH
30493: LD_INT 7
30495: EQUAL
30496: IFFALSE 30506
// sRadar := true ;
30498: LD_ADDR_EXP 81
30502: PUSH
30503: LD_INT 1
30505: ST_TO_ADDR
// if p3 = 8 then
30506: LD_VAR 0 3
30510: PUSH
30511: LD_INT 8
30513: EQUAL
30514: IFFALSE 30524
// sBunker := true ;
30516: LD_ADDR_EXP 82
30520: PUSH
30521: LD_INT 1
30523: ST_TO_ADDR
// if p3 = 9 then
30524: LD_VAR 0 3
30528: PUSH
30529: LD_INT 9
30531: EQUAL
30532: IFFALSE 30542
// sHack := true ;
30534: LD_ADDR_EXP 83
30538: PUSH
30539: LD_INT 1
30541: ST_TO_ADDR
// if p3 = 10 then
30542: LD_VAR 0 3
30546: PUSH
30547: LD_INT 10
30549: EQUAL
30550: IFFALSE 30560
// sFire := true ;
30552: LD_ADDR_EXP 84
30556: PUSH
30557: LD_INT 1
30559: ST_TO_ADDR
// if p3 = 11 then
30560: LD_VAR 0 3
30564: PUSH
30565: LD_INT 11
30567: EQUAL
30568: IFFALSE 30578
// sRefresh := true ;
30570: LD_ADDR_EXP 85
30574: PUSH
30575: LD_INT 1
30577: ST_TO_ADDR
// if p3 = 12 then
30578: LD_VAR 0 3
30582: PUSH
30583: LD_INT 12
30585: EQUAL
30586: IFFALSE 30596
// sExp := true ;
30588: LD_ADDR_EXP 86
30592: PUSH
30593: LD_INT 1
30595: ST_TO_ADDR
// if p3 = 13 then
30596: LD_VAR 0 3
30600: PUSH
30601: LD_INT 13
30603: EQUAL
30604: IFFALSE 30614
// sDepot := true ;
30606: LD_ADDR_EXP 87
30610: PUSH
30611: LD_INT 1
30613: ST_TO_ADDR
// if p3 = 14 then
30614: LD_VAR 0 3
30618: PUSH
30619: LD_INT 14
30621: EQUAL
30622: IFFALSE 30632
// sFlag := true ;
30624: LD_ADDR_EXP 88
30628: PUSH
30629: LD_INT 1
30631: ST_TO_ADDR
// if p3 = 15 then
30632: LD_VAR 0 3
30636: PUSH
30637: LD_INT 15
30639: EQUAL
30640: IFFALSE 30650
// sKamikadze := true ;
30642: LD_ADDR_EXP 96
30646: PUSH
30647: LD_INT 1
30649: ST_TO_ADDR
// if p3 = 16 then
30650: LD_VAR 0 3
30654: PUSH
30655: LD_INT 16
30657: EQUAL
30658: IFFALSE 30668
// sTroll := true ;
30660: LD_ADDR_EXP 97
30664: PUSH
30665: LD_INT 1
30667: ST_TO_ADDR
// if p3 = 17 then
30668: LD_VAR 0 3
30672: PUSH
30673: LD_INT 17
30675: EQUAL
30676: IFFALSE 30686
// sSlow := true ;
30678: LD_ADDR_EXP 98
30682: PUSH
30683: LD_INT 1
30685: ST_TO_ADDR
// if p3 = 18 then
30686: LD_VAR 0 3
30690: PUSH
30691: LD_INT 18
30693: EQUAL
30694: IFFALSE 30704
// sLack := true ;
30696: LD_ADDR_EXP 99
30700: PUSH
30701: LD_INT 1
30703: ST_TO_ADDR
// if p3 = 19 then
30704: LD_VAR 0 3
30708: PUSH
30709: LD_INT 19
30711: EQUAL
30712: IFFALSE 30722
// sTank := true ;
30714: LD_ADDR_EXP 101
30718: PUSH
30719: LD_INT 1
30721: ST_TO_ADDR
// if p3 = 20 then
30722: LD_VAR 0 3
30726: PUSH
30727: LD_INT 20
30729: EQUAL
30730: IFFALSE 30740
// sRemote := true ;
30732: LD_ADDR_EXP 102
30736: PUSH
30737: LD_INT 1
30739: ST_TO_ADDR
// if p3 = 21 then
30740: LD_VAR 0 3
30744: PUSH
30745: LD_INT 21
30747: EQUAL
30748: IFFALSE 30758
// sPowell := true ;
30750: LD_ADDR_EXP 103
30754: PUSH
30755: LD_INT 1
30757: ST_TO_ADDR
// if p3 = 22 then
30758: LD_VAR 0 3
30762: PUSH
30763: LD_INT 22
30765: EQUAL
30766: IFFALSE 30776
// sTeleport := true ;
30768: LD_ADDR_EXP 106
30772: PUSH
30773: LD_INT 1
30775: ST_TO_ADDR
// if p3 = 23 then
30776: LD_VAR 0 3
30780: PUSH
30781: LD_INT 23
30783: EQUAL
30784: IFFALSE 30794
// sOilTower := true ;
30786: LD_ADDR_EXP 108
30790: PUSH
30791: LD_INT 1
30793: ST_TO_ADDR
// if p3 = 24 then
30794: LD_VAR 0 3
30798: PUSH
30799: LD_INT 24
30801: EQUAL
30802: IFFALSE 30812
// sShovel := true ;
30804: LD_ADDR_EXP 109
30808: PUSH
30809: LD_INT 1
30811: ST_TO_ADDR
// if p3 = 25 then
30812: LD_VAR 0 3
30816: PUSH
30817: LD_INT 25
30819: EQUAL
30820: IFFALSE 30830
// sSheik := true ;
30822: LD_ADDR_EXP 110
30826: PUSH
30827: LD_INT 1
30829: ST_TO_ADDR
// if p3 = 26 then
30830: LD_VAR 0 3
30834: PUSH
30835: LD_INT 26
30837: EQUAL
30838: IFFALSE 30848
// sEarthquake := true ;
30840: LD_ADDR_EXP 112
30844: PUSH
30845: LD_INT 1
30847: ST_TO_ADDR
// if p3 = 27 then
30848: LD_VAR 0 3
30852: PUSH
30853: LD_INT 27
30855: EQUAL
30856: IFFALSE 30866
// sAI := true ;
30858: LD_ADDR_EXP 113
30862: PUSH
30863: LD_INT 1
30865: ST_TO_ADDR
// if p3 = 28 then
30866: LD_VAR 0 3
30870: PUSH
30871: LD_INT 28
30873: EQUAL
30874: IFFALSE 30884
// sCargo := true ;
30876: LD_ADDR_EXP 116
30880: PUSH
30881: LD_INT 1
30883: ST_TO_ADDR
// if p3 = 29 then
30884: LD_VAR 0 3
30888: PUSH
30889: LD_INT 29
30891: EQUAL
30892: IFFALSE 30902
// sDLaser := true ;
30894: LD_ADDR_EXP 117
30898: PUSH
30899: LD_INT 1
30901: ST_TO_ADDR
// if p3 = 30 then
30902: LD_VAR 0 3
30906: PUSH
30907: LD_INT 30
30909: EQUAL
30910: IFFALSE 30920
// sExchange := true ;
30912: LD_ADDR_EXP 118
30916: PUSH
30917: LD_INT 1
30919: ST_TO_ADDR
// if p3 = 31 then
30920: LD_VAR 0 3
30924: PUSH
30925: LD_INT 31
30927: EQUAL
30928: IFFALSE 30938
// sFac := true ;
30930: LD_ADDR_EXP 119
30934: PUSH
30935: LD_INT 1
30937: ST_TO_ADDR
// if p3 = 32 then
30938: LD_VAR 0 3
30942: PUSH
30943: LD_INT 32
30945: EQUAL
30946: IFFALSE 30956
// sPower := true ;
30948: LD_ADDR_EXP 120
30952: PUSH
30953: LD_INT 1
30955: ST_TO_ADDR
// if p3 = 33 then
30956: LD_VAR 0 3
30960: PUSH
30961: LD_INT 33
30963: EQUAL
30964: IFFALSE 30974
// sRandom := true ;
30966: LD_ADDR_EXP 121
30970: PUSH
30971: LD_INT 1
30973: ST_TO_ADDR
// if p3 = 34 then
30974: LD_VAR 0 3
30978: PUSH
30979: LD_INT 34
30981: EQUAL
30982: IFFALSE 30992
// sShield := true ;
30984: LD_ADDR_EXP 122
30988: PUSH
30989: LD_INT 1
30991: ST_TO_ADDR
// if p3 = 35 then
30992: LD_VAR 0 3
30996: PUSH
30997: LD_INT 35
30999: EQUAL
31000: IFFALSE 31010
// sTime := true ;
31002: LD_ADDR_EXP 123
31006: PUSH
31007: LD_INT 1
31009: ST_TO_ADDR
// if p3 = 36 then
31010: LD_VAR 0 3
31014: PUSH
31015: LD_INT 36
31017: EQUAL
31018: IFFALSE 31028
// sTools := true ;
31020: LD_ADDR_EXP 124
31024: PUSH
31025: LD_INT 1
31027: ST_TO_ADDR
// if p3 = 101 then
31028: LD_VAR 0 3
31032: PUSH
31033: LD_INT 101
31035: EQUAL
31036: IFFALSE 31046
// sSold := true ;
31038: LD_ADDR_EXP 89
31042: PUSH
31043: LD_INT 1
31045: ST_TO_ADDR
// if p3 = 102 then
31046: LD_VAR 0 3
31050: PUSH
31051: LD_INT 102
31053: EQUAL
31054: IFFALSE 31064
// sDiff := true ;
31056: LD_ADDR_EXP 90
31060: PUSH
31061: LD_INT 1
31063: ST_TO_ADDR
// if p3 = 103 then
31064: LD_VAR 0 3
31068: PUSH
31069: LD_INT 103
31071: EQUAL
31072: IFFALSE 31082
// sFog := true ;
31074: LD_ADDR_EXP 93
31078: PUSH
31079: LD_INT 1
31081: ST_TO_ADDR
// if p3 = 104 then
31082: LD_VAR 0 3
31086: PUSH
31087: LD_INT 104
31089: EQUAL
31090: IFFALSE 31100
// sReset := true ;
31092: LD_ADDR_EXP 94
31096: PUSH
31097: LD_INT 1
31099: ST_TO_ADDR
// if p3 = 105 then
31100: LD_VAR 0 3
31104: PUSH
31105: LD_INT 105
31107: EQUAL
31108: IFFALSE 31118
// sSun := true ;
31110: LD_ADDR_EXP 95
31114: PUSH
31115: LD_INT 1
31117: ST_TO_ADDR
// if p3 = 106 then
31118: LD_VAR 0 3
31122: PUSH
31123: LD_INT 106
31125: EQUAL
31126: IFFALSE 31136
// sTiger := true ;
31128: LD_ADDR_EXP 91
31132: PUSH
31133: LD_INT 1
31135: ST_TO_ADDR
// if p3 = 107 then
31136: LD_VAR 0 3
31140: PUSH
31141: LD_INT 107
31143: EQUAL
31144: IFFALSE 31154
// sBomb := true ;
31146: LD_ADDR_EXP 92
31150: PUSH
31151: LD_INT 1
31153: ST_TO_ADDR
// if p3 = 108 then
31154: LD_VAR 0 3
31158: PUSH
31159: LD_INT 108
31161: EQUAL
31162: IFFALSE 31172
// sWound := true ;
31164: LD_ADDR_EXP 100
31168: PUSH
31169: LD_INT 1
31171: ST_TO_ADDR
// if p3 = 109 then
31172: LD_VAR 0 3
31176: PUSH
31177: LD_INT 109
31179: EQUAL
31180: IFFALSE 31190
// sBetray := true ;
31182: LD_ADDR_EXP 104
31186: PUSH
31187: LD_INT 1
31189: ST_TO_ADDR
// if p3 = 110 then
31190: LD_VAR 0 3
31194: PUSH
31195: LD_INT 110
31197: EQUAL
31198: IFFALSE 31208
// sContamin := true ;
31200: LD_ADDR_EXP 105
31204: PUSH
31205: LD_INT 1
31207: ST_TO_ADDR
// if p3 = 111 then
31208: LD_VAR 0 3
31212: PUSH
31213: LD_INT 111
31215: EQUAL
31216: IFFALSE 31226
// sOil := true ;
31218: LD_ADDR_EXP 107
31222: PUSH
31223: LD_INT 1
31225: ST_TO_ADDR
// if p3 = 112 then
31226: LD_VAR 0 3
31230: PUSH
31231: LD_INT 112
31233: EQUAL
31234: IFFALSE 31244
// sStu := true ;
31236: LD_ADDR_EXP 111
31240: PUSH
31241: LD_INT 1
31243: ST_TO_ADDR
// if p3 = 113 then
31244: LD_VAR 0 3
31248: PUSH
31249: LD_INT 113
31251: EQUAL
31252: IFFALSE 31262
// sBazooka := true ;
31254: LD_ADDR_EXP 114
31258: PUSH
31259: LD_INT 1
31261: ST_TO_ADDR
// if p3 = 114 then
31262: LD_VAR 0 3
31266: PUSH
31267: LD_INT 114
31269: EQUAL
31270: IFFALSE 31280
// sMortar := true ;
31272: LD_ADDR_EXP 115
31276: PUSH
31277: LD_INT 1
31279: ST_TO_ADDR
// if p3 = 115 then
31280: LD_VAR 0 3
31284: PUSH
31285: LD_INT 115
31287: EQUAL
31288: IFFALSE 31298
// sRanger := true ;
31290: LD_ADDR_EXP 125
31294: PUSH
31295: LD_INT 1
31297: ST_TO_ADDR
// if p3 = 116 then
31298: LD_VAR 0 3
31302: PUSH
31303: LD_INT 116
31305: EQUAL
31306: IFFALSE 31316
// sComputer := true ;
31308: LD_ADDR_EXP 126
31312: PUSH
31313: LD_INT 1
31315: ST_TO_ADDR
// if p3 = 117 then
31316: LD_VAR 0 3
31320: PUSH
31321: LD_INT 117
31323: EQUAL
31324: IFFALSE 31334
// s30 := true ;
31326: LD_ADDR_EXP 127
31330: PUSH
31331: LD_INT 1
31333: ST_TO_ADDR
// if p3 = 118 then
31334: LD_VAR 0 3
31338: PUSH
31339: LD_INT 118
31341: EQUAL
31342: IFFALSE 31352
// s60 := true ;
31344: LD_ADDR_EXP 128
31348: PUSH
31349: LD_INT 1
31351: ST_TO_ADDR
// end ; if p2 = hack_mode then
31352: LD_VAR 0 2
31356: PUSH
31357: LD_INT 101
31359: EQUAL
31360: IFFALSE 31488
// begin case p3 of 1 :
31362: LD_VAR 0 3
31366: PUSH
31367: LD_INT 1
31369: DOUBLE
31370: EQUAL
31371: IFTRUE 31375
31373: GO 31382
31375: POP
// hHackUnlimitedResources ; 2 :
31376: CALL 43659 0 0
31380: GO 31488
31382: LD_INT 2
31384: DOUBLE
31385: EQUAL
31386: IFTRUE 31390
31388: GO 31397
31390: POP
// hHackSetLevel10 ; 3 :
31391: CALL 43792 0 0
31395: GO 31488
31397: LD_INT 3
31399: DOUBLE
31400: EQUAL
31401: IFTRUE 31405
31403: GO 31412
31405: POP
// hHackSetLevel10YourUnits ; 4 :
31406: CALL 43877 0 0
31410: GO 31488
31412: LD_INT 4
31414: DOUBLE
31415: EQUAL
31416: IFTRUE 31420
31418: GO 31427
31420: POP
// hHackInvincible ; 5 :
31421: CALL 44325 0 0
31425: GO 31488
31427: LD_INT 5
31429: DOUBLE
31430: EQUAL
31431: IFTRUE 31435
31433: GO 31442
31435: POP
// hHackInvisible ; 6 :
31436: CALL 44436 0 0
31440: GO 31488
31442: LD_INT 6
31444: DOUBLE
31445: EQUAL
31446: IFTRUE 31450
31448: GO 31457
31450: POP
// hHackChangeYourSide ; 7 :
31451: CALL 44493 0 0
31455: GO 31488
31457: LD_INT 7
31459: DOUBLE
31460: EQUAL
31461: IFTRUE 31465
31463: GO 31472
31465: POP
// hHackChangeUnitSide ; 8 :
31466: CALL 44535 0 0
31470: GO 31488
31472: LD_INT 8
31474: DOUBLE
31475: EQUAL
31476: IFTRUE 31480
31478: GO 31487
31480: POP
// hHackFog ; end ;
31481: CALL 44636 0 0
31485: GO 31488
31487: POP
// end ; if p2 = game_save_mode then
31488: LD_VAR 0 2
31492: PUSH
31493: LD_INT 102
31495: EQUAL
31496: IFFALSE 31561
// begin if p3 = 1 then
31498: LD_VAR 0 3
31502: PUSH
31503: LD_INT 1
31505: EQUAL
31506: IFFALSE 31518
// globalGameSaveCounter := p4 ;
31508: LD_ADDR_EXP 71
31512: PUSH
31513: LD_VAR 0 4
31517: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
31518: LD_VAR 0 3
31522: PUSH
31523: LD_INT 2
31525: EQUAL
31526: PUSH
31527: LD_EXP 71
31531: AND
31532: IFFALSE 31551
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
31534: LD_STRING setGameSaveCounter(
31536: PUSH
31537: LD_EXP 71
31541: STR
31542: PUSH
31543: LD_STRING )
31545: STR
31546: PPUSH
31547: CALL_OW 559
// display_strings := globalGameSaveCounter ;
31551: LD_ADDR_OWVAR 47
31555: PUSH
31556: LD_EXP 71
31560: ST_TO_ADDR
// end ; end ;
31561: LD_VAR 0 7
31565: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
31566: GO 31568
31568: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
31569: LD_STRING initStreamRollete();
31571: PPUSH
31572: CALL_OW 559
// InitStreamMode ;
31576: CALL 31588 0 0
// DefineStreamItems ( false ) ;
31580: LD_INT 0
31582: PPUSH
31583: CALL 32052 0 1
// end ;
31587: END
// function InitStreamMode ; begin
31588: LD_INT 0
31590: PPUSH
// streamModeActive := false ;
31591: LD_ADDR_EXP 72
31595: PUSH
31596: LD_INT 0
31598: ST_TO_ADDR
// normalCounter := 36 ;
31599: LD_ADDR_EXP 73
31603: PUSH
31604: LD_INT 36
31606: ST_TO_ADDR
// hardcoreCounter := 18 ;
31607: LD_ADDR_EXP 74
31611: PUSH
31612: LD_INT 18
31614: ST_TO_ADDR
// sRocket := false ;
31615: LD_ADDR_EXP 77
31619: PUSH
31620: LD_INT 0
31622: ST_TO_ADDR
// sSpeed := false ;
31623: LD_ADDR_EXP 76
31627: PUSH
31628: LD_INT 0
31630: ST_TO_ADDR
// sEngine := false ;
31631: LD_ADDR_EXP 78
31635: PUSH
31636: LD_INT 0
31638: ST_TO_ADDR
// sSpec := false ;
31639: LD_ADDR_EXP 75
31643: PUSH
31644: LD_INT 0
31646: ST_TO_ADDR
// sLevel := false ;
31647: LD_ADDR_EXP 79
31651: PUSH
31652: LD_INT 0
31654: ST_TO_ADDR
// sArmoury := false ;
31655: LD_ADDR_EXP 80
31659: PUSH
31660: LD_INT 0
31662: ST_TO_ADDR
// sRadar := false ;
31663: LD_ADDR_EXP 81
31667: PUSH
31668: LD_INT 0
31670: ST_TO_ADDR
// sBunker := false ;
31671: LD_ADDR_EXP 82
31675: PUSH
31676: LD_INT 0
31678: ST_TO_ADDR
// sHack := false ;
31679: LD_ADDR_EXP 83
31683: PUSH
31684: LD_INT 0
31686: ST_TO_ADDR
// sFire := false ;
31687: LD_ADDR_EXP 84
31691: PUSH
31692: LD_INT 0
31694: ST_TO_ADDR
// sRefresh := false ;
31695: LD_ADDR_EXP 85
31699: PUSH
31700: LD_INT 0
31702: ST_TO_ADDR
// sExp := false ;
31703: LD_ADDR_EXP 86
31707: PUSH
31708: LD_INT 0
31710: ST_TO_ADDR
// sDepot := false ;
31711: LD_ADDR_EXP 87
31715: PUSH
31716: LD_INT 0
31718: ST_TO_ADDR
// sFlag := false ;
31719: LD_ADDR_EXP 88
31723: PUSH
31724: LD_INT 0
31726: ST_TO_ADDR
// sKamikadze := false ;
31727: LD_ADDR_EXP 96
31731: PUSH
31732: LD_INT 0
31734: ST_TO_ADDR
// sTroll := false ;
31735: LD_ADDR_EXP 97
31739: PUSH
31740: LD_INT 0
31742: ST_TO_ADDR
// sSlow := false ;
31743: LD_ADDR_EXP 98
31747: PUSH
31748: LD_INT 0
31750: ST_TO_ADDR
// sLack := false ;
31751: LD_ADDR_EXP 99
31755: PUSH
31756: LD_INT 0
31758: ST_TO_ADDR
// sTank := false ;
31759: LD_ADDR_EXP 101
31763: PUSH
31764: LD_INT 0
31766: ST_TO_ADDR
// sRemote := false ;
31767: LD_ADDR_EXP 102
31771: PUSH
31772: LD_INT 0
31774: ST_TO_ADDR
// sPowell := false ;
31775: LD_ADDR_EXP 103
31779: PUSH
31780: LD_INT 0
31782: ST_TO_ADDR
// sTeleport := false ;
31783: LD_ADDR_EXP 106
31787: PUSH
31788: LD_INT 0
31790: ST_TO_ADDR
// sOilTower := false ;
31791: LD_ADDR_EXP 108
31795: PUSH
31796: LD_INT 0
31798: ST_TO_ADDR
// sShovel := false ;
31799: LD_ADDR_EXP 109
31803: PUSH
31804: LD_INT 0
31806: ST_TO_ADDR
// sSheik := false ;
31807: LD_ADDR_EXP 110
31811: PUSH
31812: LD_INT 0
31814: ST_TO_ADDR
// sEarthquake := false ;
31815: LD_ADDR_EXP 112
31819: PUSH
31820: LD_INT 0
31822: ST_TO_ADDR
// sAI := false ;
31823: LD_ADDR_EXP 113
31827: PUSH
31828: LD_INT 0
31830: ST_TO_ADDR
// sCargo := false ;
31831: LD_ADDR_EXP 116
31835: PUSH
31836: LD_INT 0
31838: ST_TO_ADDR
// sDLaser := false ;
31839: LD_ADDR_EXP 117
31843: PUSH
31844: LD_INT 0
31846: ST_TO_ADDR
// sExchange := false ;
31847: LD_ADDR_EXP 118
31851: PUSH
31852: LD_INT 0
31854: ST_TO_ADDR
// sFac := false ;
31855: LD_ADDR_EXP 119
31859: PUSH
31860: LD_INT 0
31862: ST_TO_ADDR
// sPower := false ;
31863: LD_ADDR_EXP 120
31867: PUSH
31868: LD_INT 0
31870: ST_TO_ADDR
// sRandom := false ;
31871: LD_ADDR_EXP 121
31875: PUSH
31876: LD_INT 0
31878: ST_TO_ADDR
// sShield := false ;
31879: LD_ADDR_EXP 122
31883: PUSH
31884: LD_INT 0
31886: ST_TO_ADDR
// sTime := false ;
31887: LD_ADDR_EXP 123
31891: PUSH
31892: LD_INT 0
31894: ST_TO_ADDR
// sTools := false ;
31895: LD_ADDR_EXP 124
31899: PUSH
31900: LD_INT 0
31902: ST_TO_ADDR
// sSold := false ;
31903: LD_ADDR_EXP 89
31907: PUSH
31908: LD_INT 0
31910: ST_TO_ADDR
// sDiff := false ;
31911: LD_ADDR_EXP 90
31915: PUSH
31916: LD_INT 0
31918: ST_TO_ADDR
// sFog := false ;
31919: LD_ADDR_EXP 93
31923: PUSH
31924: LD_INT 0
31926: ST_TO_ADDR
// sReset := false ;
31927: LD_ADDR_EXP 94
31931: PUSH
31932: LD_INT 0
31934: ST_TO_ADDR
// sSun := false ;
31935: LD_ADDR_EXP 95
31939: PUSH
31940: LD_INT 0
31942: ST_TO_ADDR
// sTiger := false ;
31943: LD_ADDR_EXP 91
31947: PUSH
31948: LD_INT 0
31950: ST_TO_ADDR
// sBomb := false ;
31951: LD_ADDR_EXP 92
31955: PUSH
31956: LD_INT 0
31958: ST_TO_ADDR
// sWound := false ;
31959: LD_ADDR_EXP 100
31963: PUSH
31964: LD_INT 0
31966: ST_TO_ADDR
// sBetray := false ;
31967: LD_ADDR_EXP 104
31971: PUSH
31972: LD_INT 0
31974: ST_TO_ADDR
// sContamin := false ;
31975: LD_ADDR_EXP 105
31979: PUSH
31980: LD_INT 0
31982: ST_TO_ADDR
// sOil := false ;
31983: LD_ADDR_EXP 107
31987: PUSH
31988: LD_INT 0
31990: ST_TO_ADDR
// sStu := false ;
31991: LD_ADDR_EXP 111
31995: PUSH
31996: LD_INT 0
31998: ST_TO_ADDR
// sBazooka := false ;
31999: LD_ADDR_EXP 114
32003: PUSH
32004: LD_INT 0
32006: ST_TO_ADDR
// sMortar := false ;
32007: LD_ADDR_EXP 115
32011: PUSH
32012: LD_INT 0
32014: ST_TO_ADDR
// sRanger := false ;
32015: LD_ADDR_EXP 125
32019: PUSH
32020: LD_INT 0
32022: ST_TO_ADDR
// sComputer := false ;
32023: LD_ADDR_EXP 126
32027: PUSH
32028: LD_INT 0
32030: ST_TO_ADDR
// s30 := false ;
32031: LD_ADDR_EXP 127
32035: PUSH
32036: LD_INT 0
32038: ST_TO_ADDR
// s60 := false ;
32039: LD_ADDR_EXP 128
32043: PUSH
32044: LD_INT 0
32046: ST_TO_ADDR
// end ;
32047: LD_VAR 0 1
32051: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
32052: LD_INT 0
32054: PPUSH
32055: PPUSH
32056: PPUSH
32057: PPUSH
32058: PPUSH
32059: PPUSH
32060: PPUSH
// result := [ ] ;
32061: LD_ADDR_VAR 0 2
32065: PUSH
32066: EMPTY
32067: ST_TO_ADDR
// if campaign_id = 1 then
32068: LD_OWVAR 69
32072: PUSH
32073: LD_INT 1
32075: EQUAL
32076: IFFALSE 35242
// begin case mission_number of 1 :
32078: LD_OWVAR 70
32082: PUSH
32083: LD_INT 1
32085: DOUBLE
32086: EQUAL
32087: IFTRUE 32091
32089: GO 32167
32091: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
32092: LD_ADDR_VAR 0 2
32096: PUSH
32097: LD_INT 2
32099: PUSH
32100: LD_INT 4
32102: PUSH
32103: LD_INT 11
32105: PUSH
32106: LD_INT 12
32108: PUSH
32109: LD_INT 15
32111: PUSH
32112: LD_INT 16
32114: PUSH
32115: LD_INT 22
32117: PUSH
32118: LD_INT 23
32120: PUSH
32121: LD_INT 26
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: LIST
32128: LIST
32129: LIST
32130: LIST
32131: LIST
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 101
32137: PUSH
32138: LD_INT 102
32140: PUSH
32141: LD_INT 106
32143: PUSH
32144: LD_INT 116
32146: PUSH
32147: LD_INT 117
32149: PUSH
32150: LD_INT 118
32152: PUSH
32153: EMPTY
32154: LIST
32155: LIST
32156: LIST
32157: LIST
32158: LIST
32159: LIST
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: ST_TO_ADDR
32165: GO 35240
32167: LD_INT 2
32169: DOUBLE
32170: EQUAL
32171: IFTRUE 32175
32173: GO 32259
32175: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
32176: LD_ADDR_VAR 0 2
32180: PUSH
32181: LD_INT 2
32183: PUSH
32184: LD_INT 4
32186: PUSH
32187: LD_INT 11
32189: PUSH
32190: LD_INT 12
32192: PUSH
32193: LD_INT 15
32195: PUSH
32196: LD_INT 16
32198: PUSH
32199: LD_INT 22
32201: PUSH
32202: LD_INT 23
32204: PUSH
32205: LD_INT 26
32207: PUSH
32208: EMPTY
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: PUSH
32219: LD_INT 101
32221: PUSH
32222: LD_INT 102
32224: PUSH
32225: LD_INT 105
32227: PUSH
32228: LD_INT 106
32230: PUSH
32231: LD_INT 108
32233: PUSH
32234: LD_INT 116
32236: PUSH
32237: LD_INT 117
32239: PUSH
32240: LD_INT 118
32242: PUSH
32243: EMPTY
32244: LIST
32245: LIST
32246: LIST
32247: LIST
32248: LIST
32249: LIST
32250: LIST
32251: LIST
32252: PUSH
32253: EMPTY
32254: LIST
32255: LIST
32256: ST_TO_ADDR
32257: GO 35240
32259: LD_INT 3
32261: DOUBLE
32262: EQUAL
32263: IFTRUE 32267
32265: GO 32355
32267: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
32268: LD_ADDR_VAR 0 2
32272: PUSH
32273: LD_INT 2
32275: PUSH
32276: LD_INT 4
32278: PUSH
32279: LD_INT 5
32281: PUSH
32282: LD_INT 11
32284: PUSH
32285: LD_INT 12
32287: PUSH
32288: LD_INT 15
32290: PUSH
32291: LD_INT 16
32293: PUSH
32294: LD_INT 22
32296: PUSH
32297: LD_INT 26
32299: PUSH
32300: LD_INT 36
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: LIST
32309: LIST
32310: LIST
32311: LIST
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 101
32317: PUSH
32318: LD_INT 102
32320: PUSH
32321: LD_INT 105
32323: PUSH
32324: LD_INT 106
32326: PUSH
32327: LD_INT 108
32329: PUSH
32330: LD_INT 116
32332: PUSH
32333: LD_INT 117
32335: PUSH
32336: LD_INT 118
32338: PUSH
32339: EMPTY
32340: LIST
32341: LIST
32342: LIST
32343: LIST
32344: LIST
32345: LIST
32346: LIST
32347: LIST
32348: PUSH
32349: EMPTY
32350: LIST
32351: LIST
32352: ST_TO_ADDR
32353: GO 35240
32355: LD_INT 4
32357: DOUBLE
32358: EQUAL
32359: IFTRUE 32363
32361: GO 32459
32363: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
32364: LD_ADDR_VAR 0 2
32368: PUSH
32369: LD_INT 2
32371: PUSH
32372: LD_INT 4
32374: PUSH
32375: LD_INT 5
32377: PUSH
32378: LD_INT 8
32380: PUSH
32381: LD_INT 11
32383: PUSH
32384: LD_INT 12
32386: PUSH
32387: LD_INT 15
32389: PUSH
32390: LD_INT 16
32392: PUSH
32393: LD_INT 22
32395: PUSH
32396: LD_INT 23
32398: PUSH
32399: LD_INT 26
32401: PUSH
32402: LD_INT 36
32404: PUSH
32405: EMPTY
32406: LIST
32407: LIST
32408: LIST
32409: LIST
32410: LIST
32411: LIST
32412: LIST
32413: LIST
32414: LIST
32415: LIST
32416: LIST
32417: LIST
32418: PUSH
32419: LD_INT 101
32421: PUSH
32422: LD_INT 102
32424: PUSH
32425: LD_INT 105
32427: PUSH
32428: LD_INT 106
32430: PUSH
32431: LD_INT 108
32433: PUSH
32434: LD_INT 116
32436: PUSH
32437: LD_INT 117
32439: PUSH
32440: LD_INT 118
32442: PUSH
32443: EMPTY
32444: LIST
32445: LIST
32446: LIST
32447: LIST
32448: LIST
32449: LIST
32450: LIST
32451: LIST
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: ST_TO_ADDR
32457: GO 35240
32459: LD_INT 5
32461: DOUBLE
32462: EQUAL
32463: IFTRUE 32467
32465: GO 32579
32467: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
32468: LD_ADDR_VAR 0 2
32472: PUSH
32473: LD_INT 2
32475: PUSH
32476: LD_INT 4
32478: PUSH
32479: LD_INT 5
32481: PUSH
32482: LD_INT 6
32484: PUSH
32485: LD_INT 8
32487: PUSH
32488: LD_INT 11
32490: PUSH
32491: LD_INT 12
32493: PUSH
32494: LD_INT 15
32496: PUSH
32497: LD_INT 16
32499: PUSH
32500: LD_INT 22
32502: PUSH
32503: LD_INT 23
32505: PUSH
32506: LD_INT 25
32508: PUSH
32509: LD_INT 26
32511: PUSH
32512: LD_INT 36
32514: PUSH
32515: EMPTY
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: PUSH
32531: LD_INT 101
32533: PUSH
32534: LD_INT 102
32536: PUSH
32537: LD_INT 105
32539: PUSH
32540: LD_INT 106
32542: PUSH
32543: LD_INT 108
32545: PUSH
32546: LD_INT 109
32548: PUSH
32549: LD_INT 112
32551: PUSH
32552: LD_INT 116
32554: PUSH
32555: LD_INT 117
32557: PUSH
32558: LD_INT 118
32560: PUSH
32561: EMPTY
32562: LIST
32563: LIST
32564: LIST
32565: LIST
32566: LIST
32567: LIST
32568: LIST
32569: LIST
32570: LIST
32571: LIST
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: ST_TO_ADDR
32577: GO 35240
32579: LD_INT 6
32581: DOUBLE
32582: EQUAL
32583: IFTRUE 32587
32585: GO 32719
32587: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
32588: LD_ADDR_VAR 0 2
32592: PUSH
32593: LD_INT 2
32595: PUSH
32596: LD_INT 4
32598: PUSH
32599: LD_INT 5
32601: PUSH
32602: LD_INT 6
32604: PUSH
32605: LD_INT 8
32607: PUSH
32608: LD_INT 11
32610: PUSH
32611: LD_INT 12
32613: PUSH
32614: LD_INT 15
32616: PUSH
32617: LD_INT 16
32619: PUSH
32620: LD_INT 20
32622: PUSH
32623: LD_INT 21
32625: PUSH
32626: LD_INT 22
32628: PUSH
32629: LD_INT 23
32631: PUSH
32632: LD_INT 25
32634: PUSH
32635: LD_INT 26
32637: PUSH
32638: LD_INT 30
32640: PUSH
32641: LD_INT 31
32643: PUSH
32644: LD_INT 32
32646: PUSH
32647: LD_INT 36
32649: PUSH
32650: EMPTY
32651: LIST
32652: LIST
32653: LIST
32654: LIST
32655: LIST
32656: LIST
32657: LIST
32658: LIST
32659: LIST
32660: LIST
32661: LIST
32662: LIST
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 101
32673: PUSH
32674: LD_INT 102
32676: PUSH
32677: LD_INT 105
32679: PUSH
32680: LD_INT 106
32682: PUSH
32683: LD_INT 108
32685: PUSH
32686: LD_INT 109
32688: PUSH
32689: LD_INT 112
32691: PUSH
32692: LD_INT 116
32694: PUSH
32695: LD_INT 117
32697: PUSH
32698: LD_INT 118
32700: PUSH
32701: EMPTY
32702: LIST
32703: LIST
32704: LIST
32705: LIST
32706: LIST
32707: LIST
32708: LIST
32709: LIST
32710: LIST
32711: LIST
32712: PUSH
32713: EMPTY
32714: LIST
32715: LIST
32716: ST_TO_ADDR
32717: GO 35240
32719: LD_INT 7
32721: DOUBLE
32722: EQUAL
32723: IFTRUE 32727
32725: GO 32839
32727: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
32728: LD_ADDR_VAR 0 2
32732: PUSH
32733: LD_INT 2
32735: PUSH
32736: LD_INT 4
32738: PUSH
32739: LD_INT 5
32741: PUSH
32742: LD_INT 7
32744: PUSH
32745: LD_INT 11
32747: PUSH
32748: LD_INT 12
32750: PUSH
32751: LD_INT 15
32753: PUSH
32754: LD_INT 16
32756: PUSH
32757: LD_INT 20
32759: PUSH
32760: LD_INT 21
32762: PUSH
32763: LD_INT 22
32765: PUSH
32766: LD_INT 23
32768: PUSH
32769: LD_INT 25
32771: PUSH
32772: LD_INT 26
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: LIST
32779: LIST
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: PUSH
32791: LD_INT 101
32793: PUSH
32794: LD_INT 102
32796: PUSH
32797: LD_INT 103
32799: PUSH
32800: LD_INT 105
32802: PUSH
32803: LD_INT 106
32805: PUSH
32806: LD_INT 108
32808: PUSH
32809: LD_INT 112
32811: PUSH
32812: LD_INT 116
32814: PUSH
32815: LD_INT 117
32817: PUSH
32818: LD_INT 118
32820: PUSH
32821: EMPTY
32822: LIST
32823: LIST
32824: LIST
32825: LIST
32826: LIST
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: PUSH
32833: EMPTY
32834: LIST
32835: LIST
32836: ST_TO_ADDR
32837: GO 35240
32839: LD_INT 8
32841: DOUBLE
32842: EQUAL
32843: IFTRUE 32847
32845: GO 32987
32847: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
32848: LD_ADDR_VAR 0 2
32852: PUSH
32853: LD_INT 2
32855: PUSH
32856: LD_INT 4
32858: PUSH
32859: LD_INT 5
32861: PUSH
32862: LD_INT 6
32864: PUSH
32865: LD_INT 7
32867: PUSH
32868: LD_INT 8
32870: PUSH
32871: LD_INT 11
32873: PUSH
32874: LD_INT 12
32876: PUSH
32877: LD_INT 15
32879: PUSH
32880: LD_INT 16
32882: PUSH
32883: LD_INT 20
32885: PUSH
32886: LD_INT 21
32888: PUSH
32889: LD_INT 22
32891: PUSH
32892: LD_INT 23
32894: PUSH
32895: LD_INT 25
32897: PUSH
32898: LD_INT 26
32900: PUSH
32901: LD_INT 30
32903: PUSH
32904: LD_INT 31
32906: PUSH
32907: LD_INT 32
32909: PUSH
32910: LD_INT 36
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: LIST
32917: LIST
32918: LIST
32919: LIST
32920: LIST
32921: LIST
32922: LIST
32923: LIST
32924: LIST
32925: LIST
32926: LIST
32927: LIST
32928: LIST
32929: LIST
32930: LIST
32931: LIST
32932: LIST
32933: LIST
32934: PUSH
32935: LD_INT 101
32937: PUSH
32938: LD_INT 102
32940: PUSH
32941: LD_INT 103
32943: PUSH
32944: LD_INT 105
32946: PUSH
32947: LD_INT 106
32949: PUSH
32950: LD_INT 108
32952: PUSH
32953: LD_INT 109
32955: PUSH
32956: LD_INT 112
32958: PUSH
32959: LD_INT 116
32961: PUSH
32962: LD_INT 117
32964: PUSH
32965: LD_INT 118
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: LIST
32972: LIST
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: PUSH
32981: EMPTY
32982: LIST
32983: LIST
32984: ST_TO_ADDR
32985: GO 35240
32987: LD_INT 9
32989: DOUBLE
32990: EQUAL
32991: IFTRUE 32995
32993: GO 33143
32995: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
32996: LD_ADDR_VAR 0 2
33000: PUSH
33001: LD_INT 2
33003: PUSH
33004: LD_INT 4
33006: PUSH
33007: LD_INT 5
33009: PUSH
33010: LD_INT 6
33012: PUSH
33013: LD_INT 7
33015: PUSH
33016: LD_INT 8
33018: PUSH
33019: LD_INT 11
33021: PUSH
33022: LD_INT 12
33024: PUSH
33025: LD_INT 15
33027: PUSH
33028: LD_INT 16
33030: PUSH
33031: LD_INT 20
33033: PUSH
33034: LD_INT 21
33036: PUSH
33037: LD_INT 22
33039: PUSH
33040: LD_INT 23
33042: PUSH
33043: LD_INT 25
33045: PUSH
33046: LD_INT 26
33048: PUSH
33049: LD_INT 28
33051: PUSH
33052: LD_INT 30
33054: PUSH
33055: LD_INT 31
33057: PUSH
33058: LD_INT 32
33060: PUSH
33061: LD_INT 36
33063: PUSH
33064: EMPTY
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: LIST
33078: LIST
33079: LIST
33080: LIST
33081: LIST
33082: LIST
33083: LIST
33084: LIST
33085: LIST
33086: PUSH
33087: LD_INT 101
33089: PUSH
33090: LD_INT 102
33092: PUSH
33093: LD_INT 103
33095: PUSH
33096: LD_INT 105
33098: PUSH
33099: LD_INT 106
33101: PUSH
33102: LD_INT 108
33104: PUSH
33105: LD_INT 109
33107: PUSH
33108: LD_INT 112
33110: PUSH
33111: LD_INT 114
33113: PUSH
33114: LD_INT 116
33116: PUSH
33117: LD_INT 117
33119: PUSH
33120: LD_INT 118
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: LIST
33133: LIST
33134: LIST
33135: LIST
33136: PUSH
33137: EMPTY
33138: LIST
33139: LIST
33140: ST_TO_ADDR
33141: GO 35240
33143: LD_INT 10
33145: DOUBLE
33146: EQUAL
33147: IFTRUE 33151
33149: GO 33347
33151: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
33152: LD_ADDR_VAR 0 2
33156: PUSH
33157: LD_INT 2
33159: PUSH
33160: LD_INT 4
33162: PUSH
33163: LD_INT 5
33165: PUSH
33166: LD_INT 6
33168: PUSH
33169: LD_INT 7
33171: PUSH
33172: LD_INT 8
33174: PUSH
33175: LD_INT 9
33177: PUSH
33178: LD_INT 10
33180: PUSH
33181: LD_INT 11
33183: PUSH
33184: LD_INT 12
33186: PUSH
33187: LD_INT 13
33189: PUSH
33190: LD_INT 14
33192: PUSH
33193: LD_INT 15
33195: PUSH
33196: LD_INT 16
33198: PUSH
33199: LD_INT 17
33201: PUSH
33202: LD_INT 18
33204: PUSH
33205: LD_INT 19
33207: PUSH
33208: LD_INT 20
33210: PUSH
33211: LD_INT 21
33213: PUSH
33214: LD_INT 22
33216: PUSH
33217: LD_INT 23
33219: PUSH
33220: LD_INT 24
33222: PUSH
33223: LD_INT 25
33225: PUSH
33226: LD_INT 26
33228: PUSH
33229: LD_INT 28
33231: PUSH
33232: LD_INT 30
33234: PUSH
33235: LD_INT 31
33237: PUSH
33238: LD_INT 32
33240: PUSH
33241: LD_INT 36
33243: PUSH
33244: EMPTY
33245: LIST
33246: LIST
33247: LIST
33248: LIST
33249: LIST
33250: LIST
33251: LIST
33252: LIST
33253: LIST
33254: LIST
33255: LIST
33256: LIST
33257: LIST
33258: LIST
33259: LIST
33260: LIST
33261: LIST
33262: LIST
33263: LIST
33264: LIST
33265: LIST
33266: LIST
33267: LIST
33268: LIST
33269: LIST
33270: LIST
33271: LIST
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 101
33277: PUSH
33278: LD_INT 102
33280: PUSH
33281: LD_INT 103
33283: PUSH
33284: LD_INT 104
33286: PUSH
33287: LD_INT 105
33289: PUSH
33290: LD_INT 106
33292: PUSH
33293: LD_INT 107
33295: PUSH
33296: LD_INT 108
33298: PUSH
33299: LD_INT 109
33301: PUSH
33302: LD_INT 110
33304: PUSH
33305: LD_INT 111
33307: PUSH
33308: LD_INT 112
33310: PUSH
33311: LD_INT 114
33313: PUSH
33314: LD_INT 116
33316: PUSH
33317: LD_INT 117
33319: PUSH
33320: LD_INT 118
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: LIST
33327: LIST
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: PUSH
33341: EMPTY
33342: LIST
33343: LIST
33344: ST_TO_ADDR
33345: GO 35240
33347: LD_INT 11
33349: DOUBLE
33350: EQUAL
33351: IFTRUE 33355
33353: GO 33559
33355: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
33356: LD_ADDR_VAR 0 2
33360: PUSH
33361: LD_INT 2
33363: PUSH
33364: LD_INT 3
33366: PUSH
33367: LD_INT 4
33369: PUSH
33370: LD_INT 5
33372: PUSH
33373: LD_INT 6
33375: PUSH
33376: LD_INT 7
33378: PUSH
33379: LD_INT 8
33381: PUSH
33382: LD_INT 9
33384: PUSH
33385: LD_INT 10
33387: PUSH
33388: LD_INT 11
33390: PUSH
33391: LD_INT 12
33393: PUSH
33394: LD_INT 13
33396: PUSH
33397: LD_INT 14
33399: PUSH
33400: LD_INT 15
33402: PUSH
33403: LD_INT 16
33405: PUSH
33406: LD_INT 17
33408: PUSH
33409: LD_INT 18
33411: PUSH
33412: LD_INT 19
33414: PUSH
33415: LD_INT 20
33417: PUSH
33418: LD_INT 21
33420: PUSH
33421: LD_INT 22
33423: PUSH
33424: LD_INT 23
33426: PUSH
33427: LD_INT 24
33429: PUSH
33430: LD_INT 25
33432: PUSH
33433: LD_INT 26
33435: PUSH
33436: LD_INT 28
33438: PUSH
33439: LD_INT 30
33441: PUSH
33442: LD_INT 31
33444: PUSH
33445: LD_INT 32
33447: PUSH
33448: LD_INT 34
33450: PUSH
33451: LD_INT 36
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: LIST
33458: LIST
33459: LIST
33460: LIST
33461: LIST
33462: LIST
33463: LIST
33464: LIST
33465: LIST
33466: LIST
33467: LIST
33468: LIST
33469: LIST
33470: LIST
33471: LIST
33472: LIST
33473: LIST
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: LIST
33481: LIST
33482: LIST
33483: LIST
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 101
33489: PUSH
33490: LD_INT 102
33492: PUSH
33493: LD_INT 103
33495: PUSH
33496: LD_INT 104
33498: PUSH
33499: LD_INT 105
33501: PUSH
33502: LD_INT 106
33504: PUSH
33505: LD_INT 107
33507: PUSH
33508: LD_INT 108
33510: PUSH
33511: LD_INT 109
33513: PUSH
33514: LD_INT 110
33516: PUSH
33517: LD_INT 111
33519: PUSH
33520: LD_INT 112
33522: PUSH
33523: LD_INT 114
33525: PUSH
33526: LD_INT 116
33528: PUSH
33529: LD_INT 117
33531: PUSH
33532: LD_INT 118
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: LIST
33539: LIST
33540: LIST
33541: LIST
33542: LIST
33543: LIST
33544: LIST
33545: LIST
33546: LIST
33547: LIST
33548: LIST
33549: LIST
33550: LIST
33551: LIST
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: ST_TO_ADDR
33557: GO 35240
33559: LD_INT 12
33561: DOUBLE
33562: EQUAL
33563: IFTRUE 33567
33565: GO 33787
33567: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
33568: LD_ADDR_VAR 0 2
33572: PUSH
33573: LD_INT 1
33575: PUSH
33576: LD_INT 2
33578: PUSH
33579: LD_INT 3
33581: PUSH
33582: LD_INT 4
33584: PUSH
33585: LD_INT 5
33587: PUSH
33588: LD_INT 6
33590: PUSH
33591: LD_INT 7
33593: PUSH
33594: LD_INT 8
33596: PUSH
33597: LD_INT 9
33599: PUSH
33600: LD_INT 10
33602: PUSH
33603: LD_INT 11
33605: PUSH
33606: LD_INT 12
33608: PUSH
33609: LD_INT 13
33611: PUSH
33612: LD_INT 14
33614: PUSH
33615: LD_INT 15
33617: PUSH
33618: LD_INT 16
33620: PUSH
33621: LD_INT 17
33623: PUSH
33624: LD_INT 18
33626: PUSH
33627: LD_INT 19
33629: PUSH
33630: LD_INT 20
33632: PUSH
33633: LD_INT 21
33635: PUSH
33636: LD_INT 22
33638: PUSH
33639: LD_INT 23
33641: PUSH
33642: LD_INT 24
33644: PUSH
33645: LD_INT 25
33647: PUSH
33648: LD_INT 26
33650: PUSH
33651: LD_INT 27
33653: PUSH
33654: LD_INT 28
33656: PUSH
33657: LD_INT 30
33659: PUSH
33660: LD_INT 31
33662: PUSH
33663: LD_INT 32
33665: PUSH
33666: LD_INT 33
33668: PUSH
33669: LD_INT 34
33671: PUSH
33672: LD_INT 36
33674: PUSH
33675: EMPTY
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: LIST
33682: LIST
33683: LIST
33684: LIST
33685: LIST
33686: LIST
33687: LIST
33688: LIST
33689: LIST
33690: LIST
33691: LIST
33692: LIST
33693: LIST
33694: LIST
33695: LIST
33696: LIST
33697: LIST
33698: LIST
33699: LIST
33700: LIST
33701: LIST
33702: LIST
33703: LIST
33704: LIST
33705: LIST
33706: LIST
33707: LIST
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 101
33713: PUSH
33714: LD_INT 102
33716: PUSH
33717: LD_INT 103
33719: PUSH
33720: LD_INT 104
33722: PUSH
33723: LD_INT 105
33725: PUSH
33726: LD_INT 106
33728: PUSH
33729: LD_INT 107
33731: PUSH
33732: LD_INT 108
33734: PUSH
33735: LD_INT 109
33737: PUSH
33738: LD_INT 110
33740: PUSH
33741: LD_INT 111
33743: PUSH
33744: LD_INT 112
33746: PUSH
33747: LD_INT 113
33749: PUSH
33750: LD_INT 114
33752: PUSH
33753: LD_INT 116
33755: PUSH
33756: LD_INT 117
33758: PUSH
33759: LD_INT 118
33761: PUSH
33762: EMPTY
33763: LIST
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: LIST
33771: LIST
33772: LIST
33773: LIST
33774: LIST
33775: LIST
33776: LIST
33777: LIST
33778: LIST
33779: LIST
33780: PUSH
33781: EMPTY
33782: LIST
33783: LIST
33784: ST_TO_ADDR
33785: GO 35240
33787: LD_INT 13
33789: DOUBLE
33790: EQUAL
33791: IFTRUE 33795
33793: GO 34003
33795: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
33796: LD_ADDR_VAR 0 2
33800: PUSH
33801: LD_INT 1
33803: PUSH
33804: LD_INT 2
33806: PUSH
33807: LD_INT 3
33809: PUSH
33810: LD_INT 4
33812: PUSH
33813: LD_INT 5
33815: PUSH
33816: LD_INT 8
33818: PUSH
33819: LD_INT 9
33821: PUSH
33822: LD_INT 10
33824: PUSH
33825: LD_INT 11
33827: PUSH
33828: LD_INT 12
33830: PUSH
33831: LD_INT 14
33833: PUSH
33834: LD_INT 15
33836: PUSH
33837: LD_INT 16
33839: PUSH
33840: LD_INT 17
33842: PUSH
33843: LD_INT 18
33845: PUSH
33846: LD_INT 19
33848: PUSH
33849: LD_INT 20
33851: PUSH
33852: LD_INT 21
33854: PUSH
33855: LD_INT 22
33857: PUSH
33858: LD_INT 23
33860: PUSH
33861: LD_INT 24
33863: PUSH
33864: LD_INT 25
33866: PUSH
33867: LD_INT 26
33869: PUSH
33870: LD_INT 27
33872: PUSH
33873: LD_INT 28
33875: PUSH
33876: LD_INT 30
33878: PUSH
33879: LD_INT 31
33881: PUSH
33882: LD_INT 32
33884: PUSH
33885: LD_INT 33
33887: PUSH
33888: LD_INT 34
33890: PUSH
33891: LD_INT 36
33893: PUSH
33894: EMPTY
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: LIST
33916: LIST
33917: LIST
33918: LIST
33919: LIST
33920: LIST
33921: LIST
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: PUSH
33927: LD_INT 101
33929: PUSH
33930: LD_INT 102
33932: PUSH
33933: LD_INT 103
33935: PUSH
33936: LD_INT 104
33938: PUSH
33939: LD_INT 105
33941: PUSH
33942: LD_INT 106
33944: PUSH
33945: LD_INT 107
33947: PUSH
33948: LD_INT 108
33950: PUSH
33951: LD_INT 109
33953: PUSH
33954: LD_INT 110
33956: PUSH
33957: LD_INT 111
33959: PUSH
33960: LD_INT 112
33962: PUSH
33963: LD_INT 113
33965: PUSH
33966: LD_INT 114
33968: PUSH
33969: LD_INT 116
33971: PUSH
33972: LD_INT 117
33974: PUSH
33975: LD_INT 118
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: LIST
33982: LIST
33983: LIST
33984: LIST
33985: LIST
33986: LIST
33987: LIST
33988: LIST
33989: LIST
33990: LIST
33991: LIST
33992: LIST
33993: LIST
33994: LIST
33995: LIST
33996: PUSH
33997: EMPTY
33998: LIST
33999: LIST
34000: ST_TO_ADDR
34001: GO 35240
34003: LD_INT 14
34005: DOUBLE
34006: EQUAL
34007: IFTRUE 34011
34009: GO 34235
34011: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
34012: LD_ADDR_VAR 0 2
34016: PUSH
34017: LD_INT 1
34019: PUSH
34020: LD_INT 2
34022: PUSH
34023: LD_INT 3
34025: PUSH
34026: LD_INT 4
34028: PUSH
34029: LD_INT 5
34031: PUSH
34032: LD_INT 6
34034: PUSH
34035: LD_INT 7
34037: PUSH
34038: LD_INT 8
34040: PUSH
34041: LD_INT 9
34043: PUSH
34044: LD_INT 10
34046: PUSH
34047: LD_INT 11
34049: PUSH
34050: LD_INT 12
34052: PUSH
34053: LD_INT 13
34055: PUSH
34056: LD_INT 14
34058: PUSH
34059: LD_INT 15
34061: PUSH
34062: LD_INT 16
34064: PUSH
34065: LD_INT 17
34067: PUSH
34068: LD_INT 18
34070: PUSH
34071: LD_INT 19
34073: PUSH
34074: LD_INT 20
34076: PUSH
34077: LD_INT 21
34079: PUSH
34080: LD_INT 22
34082: PUSH
34083: LD_INT 23
34085: PUSH
34086: LD_INT 24
34088: PUSH
34089: LD_INT 25
34091: PUSH
34092: LD_INT 26
34094: PUSH
34095: LD_INT 27
34097: PUSH
34098: LD_INT 28
34100: PUSH
34101: LD_INT 29
34103: PUSH
34104: LD_INT 30
34106: PUSH
34107: LD_INT 31
34109: PUSH
34110: LD_INT 32
34112: PUSH
34113: LD_INT 33
34115: PUSH
34116: LD_INT 34
34118: PUSH
34119: LD_INT 36
34121: PUSH
34122: EMPTY
34123: LIST
34124: LIST
34125: LIST
34126: LIST
34127: LIST
34128: LIST
34129: LIST
34130: LIST
34131: LIST
34132: LIST
34133: LIST
34134: LIST
34135: LIST
34136: LIST
34137: LIST
34138: LIST
34139: LIST
34140: LIST
34141: LIST
34142: LIST
34143: LIST
34144: LIST
34145: LIST
34146: LIST
34147: LIST
34148: LIST
34149: LIST
34150: LIST
34151: LIST
34152: LIST
34153: LIST
34154: LIST
34155: LIST
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 101
34161: PUSH
34162: LD_INT 102
34164: PUSH
34165: LD_INT 103
34167: PUSH
34168: LD_INT 104
34170: PUSH
34171: LD_INT 105
34173: PUSH
34174: LD_INT 106
34176: PUSH
34177: LD_INT 107
34179: PUSH
34180: LD_INT 108
34182: PUSH
34183: LD_INT 109
34185: PUSH
34186: LD_INT 110
34188: PUSH
34189: LD_INT 111
34191: PUSH
34192: LD_INT 112
34194: PUSH
34195: LD_INT 113
34197: PUSH
34198: LD_INT 114
34200: PUSH
34201: LD_INT 116
34203: PUSH
34204: LD_INT 117
34206: PUSH
34207: LD_INT 118
34209: PUSH
34210: EMPTY
34211: LIST
34212: LIST
34213: LIST
34214: LIST
34215: LIST
34216: LIST
34217: LIST
34218: LIST
34219: LIST
34220: LIST
34221: LIST
34222: LIST
34223: LIST
34224: LIST
34225: LIST
34226: LIST
34227: LIST
34228: PUSH
34229: EMPTY
34230: LIST
34231: LIST
34232: ST_TO_ADDR
34233: GO 35240
34235: LD_INT 15
34237: DOUBLE
34238: EQUAL
34239: IFTRUE 34243
34241: GO 34467
34243: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
34244: LD_ADDR_VAR 0 2
34248: PUSH
34249: LD_INT 1
34251: PUSH
34252: LD_INT 2
34254: PUSH
34255: LD_INT 3
34257: PUSH
34258: LD_INT 4
34260: PUSH
34261: LD_INT 5
34263: PUSH
34264: LD_INT 6
34266: PUSH
34267: LD_INT 7
34269: PUSH
34270: LD_INT 8
34272: PUSH
34273: LD_INT 9
34275: PUSH
34276: LD_INT 10
34278: PUSH
34279: LD_INT 11
34281: PUSH
34282: LD_INT 12
34284: PUSH
34285: LD_INT 13
34287: PUSH
34288: LD_INT 14
34290: PUSH
34291: LD_INT 15
34293: PUSH
34294: LD_INT 16
34296: PUSH
34297: LD_INT 17
34299: PUSH
34300: LD_INT 18
34302: PUSH
34303: LD_INT 19
34305: PUSH
34306: LD_INT 20
34308: PUSH
34309: LD_INT 21
34311: PUSH
34312: LD_INT 22
34314: PUSH
34315: LD_INT 23
34317: PUSH
34318: LD_INT 24
34320: PUSH
34321: LD_INT 25
34323: PUSH
34324: LD_INT 26
34326: PUSH
34327: LD_INT 27
34329: PUSH
34330: LD_INT 28
34332: PUSH
34333: LD_INT 29
34335: PUSH
34336: LD_INT 30
34338: PUSH
34339: LD_INT 31
34341: PUSH
34342: LD_INT 32
34344: PUSH
34345: LD_INT 33
34347: PUSH
34348: LD_INT 34
34350: PUSH
34351: LD_INT 36
34353: PUSH
34354: EMPTY
34355: LIST
34356: LIST
34357: LIST
34358: LIST
34359: LIST
34360: LIST
34361: LIST
34362: LIST
34363: LIST
34364: LIST
34365: LIST
34366: LIST
34367: LIST
34368: LIST
34369: LIST
34370: LIST
34371: LIST
34372: LIST
34373: LIST
34374: LIST
34375: LIST
34376: LIST
34377: LIST
34378: LIST
34379: LIST
34380: LIST
34381: LIST
34382: LIST
34383: LIST
34384: LIST
34385: LIST
34386: LIST
34387: LIST
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 101
34393: PUSH
34394: LD_INT 102
34396: PUSH
34397: LD_INT 103
34399: PUSH
34400: LD_INT 104
34402: PUSH
34403: LD_INT 105
34405: PUSH
34406: LD_INT 106
34408: PUSH
34409: LD_INT 107
34411: PUSH
34412: LD_INT 108
34414: PUSH
34415: LD_INT 109
34417: PUSH
34418: LD_INT 110
34420: PUSH
34421: LD_INT 111
34423: PUSH
34424: LD_INT 112
34426: PUSH
34427: LD_INT 113
34429: PUSH
34430: LD_INT 114
34432: PUSH
34433: LD_INT 116
34435: PUSH
34436: LD_INT 117
34438: PUSH
34439: LD_INT 118
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: LIST
34446: LIST
34447: LIST
34448: LIST
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: ST_TO_ADDR
34465: GO 35240
34467: LD_INT 16
34469: DOUBLE
34470: EQUAL
34471: IFTRUE 34475
34473: GO 34611
34475: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
34476: LD_ADDR_VAR 0 2
34480: PUSH
34481: LD_INT 2
34483: PUSH
34484: LD_INT 4
34486: PUSH
34487: LD_INT 5
34489: PUSH
34490: LD_INT 7
34492: PUSH
34493: LD_INT 11
34495: PUSH
34496: LD_INT 12
34498: PUSH
34499: LD_INT 15
34501: PUSH
34502: LD_INT 16
34504: PUSH
34505: LD_INT 20
34507: PUSH
34508: LD_INT 21
34510: PUSH
34511: LD_INT 22
34513: PUSH
34514: LD_INT 23
34516: PUSH
34517: LD_INT 25
34519: PUSH
34520: LD_INT 26
34522: PUSH
34523: LD_INT 30
34525: PUSH
34526: LD_INT 31
34528: PUSH
34529: LD_INT 32
34531: PUSH
34532: LD_INT 33
34534: PUSH
34535: LD_INT 34
34537: PUSH
34538: EMPTY
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: LIST
34554: LIST
34555: LIST
34556: LIST
34557: LIST
34558: PUSH
34559: LD_INT 101
34561: PUSH
34562: LD_INT 102
34564: PUSH
34565: LD_INT 103
34567: PUSH
34568: LD_INT 106
34570: PUSH
34571: LD_INT 108
34573: PUSH
34574: LD_INT 112
34576: PUSH
34577: LD_INT 113
34579: PUSH
34580: LD_INT 114
34582: PUSH
34583: LD_INT 116
34585: PUSH
34586: LD_INT 117
34588: PUSH
34589: LD_INT 118
34591: PUSH
34592: EMPTY
34593: LIST
34594: LIST
34595: LIST
34596: LIST
34597: LIST
34598: LIST
34599: LIST
34600: LIST
34601: LIST
34602: LIST
34603: LIST
34604: PUSH
34605: EMPTY
34606: LIST
34607: LIST
34608: ST_TO_ADDR
34609: GO 35240
34611: LD_INT 17
34613: DOUBLE
34614: EQUAL
34615: IFTRUE 34619
34617: GO 34843
34619: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
34620: LD_ADDR_VAR 0 2
34624: PUSH
34625: LD_INT 1
34627: PUSH
34628: LD_INT 2
34630: PUSH
34631: LD_INT 3
34633: PUSH
34634: LD_INT 4
34636: PUSH
34637: LD_INT 5
34639: PUSH
34640: LD_INT 6
34642: PUSH
34643: LD_INT 7
34645: PUSH
34646: LD_INT 8
34648: PUSH
34649: LD_INT 9
34651: PUSH
34652: LD_INT 10
34654: PUSH
34655: LD_INT 11
34657: PUSH
34658: LD_INT 12
34660: PUSH
34661: LD_INT 13
34663: PUSH
34664: LD_INT 14
34666: PUSH
34667: LD_INT 15
34669: PUSH
34670: LD_INT 16
34672: PUSH
34673: LD_INT 17
34675: PUSH
34676: LD_INT 18
34678: PUSH
34679: LD_INT 19
34681: PUSH
34682: LD_INT 20
34684: PUSH
34685: LD_INT 21
34687: PUSH
34688: LD_INT 22
34690: PUSH
34691: LD_INT 23
34693: PUSH
34694: LD_INT 24
34696: PUSH
34697: LD_INT 25
34699: PUSH
34700: LD_INT 26
34702: PUSH
34703: LD_INT 27
34705: PUSH
34706: LD_INT 28
34708: PUSH
34709: LD_INT 29
34711: PUSH
34712: LD_INT 30
34714: PUSH
34715: LD_INT 31
34717: PUSH
34718: LD_INT 32
34720: PUSH
34721: LD_INT 33
34723: PUSH
34724: LD_INT 34
34726: PUSH
34727: LD_INT 36
34729: PUSH
34730: EMPTY
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: LIST
34762: LIST
34763: LIST
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 101
34769: PUSH
34770: LD_INT 102
34772: PUSH
34773: LD_INT 103
34775: PUSH
34776: LD_INT 104
34778: PUSH
34779: LD_INT 105
34781: PUSH
34782: LD_INT 106
34784: PUSH
34785: LD_INT 107
34787: PUSH
34788: LD_INT 108
34790: PUSH
34791: LD_INT 109
34793: PUSH
34794: LD_INT 110
34796: PUSH
34797: LD_INT 111
34799: PUSH
34800: LD_INT 112
34802: PUSH
34803: LD_INT 113
34805: PUSH
34806: LD_INT 114
34808: PUSH
34809: LD_INT 116
34811: PUSH
34812: LD_INT 117
34814: PUSH
34815: LD_INT 118
34817: PUSH
34818: EMPTY
34819: LIST
34820: LIST
34821: LIST
34822: LIST
34823: LIST
34824: LIST
34825: LIST
34826: LIST
34827: LIST
34828: LIST
34829: LIST
34830: LIST
34831: LIST
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: ST_TO_ADDR
34841: GO 35240
34843: LD_INT 18
34845: DOUBLE
34846: EQUAL
34847: IFTRUE 34851
34849: GO 34999
34851: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
34852: LD_ADDR_VAR 0 2
34856: PUSH
34857: LD_INT 2
34859: PUSH
34860: LD_INT 4
34862: PUSH
34863: LD_INT 5
34865: PUSH
34866: LD_INT 7
34868: PUSH
34869: LD_INT 11
34871: PUSH
34872: LD_INT 12
34874: PUSH
34875: LD_INT 15
34877: PUSH
34878: LD_INT 16
34880: PUSH
34881: LD_INT 20
34883: PUSH
34884: LD_INT 21
34886: PUSH
34887: LD_INT 22
34889: PUSH
34890: LD_INT 23
34892: PUSH
34893: LD_INT 25
34895: PUSH
34896: LD_INT 26
34898: PUSH
34899: LD_INT 30
34901: PUSH
34902: LD_INT 31
34904: PUSH
34905: LD_INT 32
34907: PUSH
34908: LD_INT 33
34910: PUSH
34911: LD_INT 34
34913: PUSH
34914: LD_INT 35
34916: PUSH
34917: LD_INT 36
34919: PUSH
34920: EMPTY
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: LIST
34928: LIST
34929: LIST
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 101
34945: PUSH
34946: LD_INT 102
34948: PUSH
34949: LD_INT 103
34951: PUSH
34952: LD_INT 106
34954: PUSH
34955: LD_INT 108
34957: PUSH
34958: LD_INT 112
34960: PUSH
34961: LD_INT 113
34963: PUSH
34964: LD_INT 114
34966: PUSH
34967: LD_INT 115
34969: PUSH
34970: LD_INT 116
34972: PUSH
34973: LD_INT 117
34975: PUSH
34976: LD_INT 118
34978: PUSH
34979: EMPTY
34980: LIST
34981: LIST
34982: LIST
34983: LIST
34984: LIST
34985: LIST
34986: LIST
34987: LIST
34988: LIST
34989: LIST
34990: LIST
34991: LIST
34992: PUSH
34993: EMPTY
34994: LIST
34995: LIST
34996: ST_TO_ADDR
34997: GO 35240
34999: LD_INT 19
35001: DOUBLE
35002: EQUAL
35003: IFTRUE 35007
35005: GO 35239
35007: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
35008: LD_ADDR_VAR 0 2
35012: PUSH
35013: LD_INT 1
35015: PUSH
35016: LD_INT 2
35018: PUSH
35019: LD_INT 3
35021: PUSH
35022: LD_INT 4
35024: PUSH
35025: LD_INT 5
35027: PUSH
35028: LD_INT 6
35030: PUSH
35031: LD_INT 7
35033: PUSH
35034: LD_INT 8
35036: PUSH
35037: LD_INT 9
35039: PUSH
35040: LD_INT 10
35042: PUSH
35043: LD_INT 11
35045: PUSH
35046: LD_INT 12
35048: PUSH
35049: LD_INT 13
35051: PUSH
35052: LD_INT 14
35054: PUSH
35055: LD_INT 15
35057: PUSH
35058: LD_INT 16
35060: PUSH
35061: LD_INT 17
35063: PUSH
35064: LD_INT 18
35066: PUSH
35067: LD_INT 19
35069: PUSH
35070: LD_INT 20
35072: PUSH
35073: LD_INT 21
35075: PUSH
35076: LD_INT 22
35078: PUSH
35079: LD_INT 23
35081: PUSH
35082: LD_INT 24
35084: PUSH
35085: LD_INT 25
35087: PUSH
35088: LD_INT 26
35090: PUSH
35091: LD_INT 27
35093: PUSH
35094: LD_INT 28
35096: PUSH
35097: LD_INT 29
35099: PUSH
35100: LD_INT 30
35102: PUSH
35103: LD_INT 31
35105: PUSH
35106: LD_INT 32
35108: PUSH
35109: LD_INT 33
35111: PUSH
35112: LD_INT 34
35114: PUSH
35115: LD_INT 35
35117: PUSH
35118: LD_INT 36
35120: PUSH
35121: EMPTY
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: LIST
35152: LIST
35153: LIST
35154: LIST
35155: LIST
35156: LIST
35157: LIST
35158: PUSH
35159: LD_INT 101
35161: PUSH
35162: LD_INT 102
35164: PUSH
35165: LD_INT 103
35167: PUSH
35168: LD_INT 104
35170: PUSH
35171: LD_INT 105
35173: PUSH
35174: LD_INT 106
35176: PUSH
35177: LD_INT 107
35179: PUSH
35180: LD_INT 108
35182: PUSH
35183: LD_INT 109
35185: PUSH
35186: LD_INT 110
35188: PUSH
35189: LD_INT 111
35191: PUSH
35192: LD_INT 112
35194: PUSH
35195: LD_INT 113
35197: PUSH
35198: LD_INT 114
35200: PUSH
35201: LD_INT 115
35203: PUSH
35204: LD_INT 116
35206: PUSH
35207: LD_INT 117
35209: PUSH
35210: LD_INT 118
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: LIST
35217: LIST
35218: LIST
35219: LIST
35220: LIST
35221: LIST
35222: LIST
35223: LIST
35224: LIST
35225: LIST
35226: LIST
35227: LIST
35228: LIST
35229: LIST
35230: LIST
35231: LIST
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: ST_TO_ADDR
35237: GO 35240
35239: POP
// end else
35240: GO 35471
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
35242: LD_ADDR_VAR 0 2
35246: PUSH
35247: LD_INT 1
35249: PUSH
35250: LD_INT 2
35252: PUSH
35253: LD_INT 3
35255: PUSH
35256: LD_INT 4
35258: PUSH
35259: LD_INT 5
35261: PUSH
35262: LD_INT 6
35264: PUSH
35265: LD_INT 7
35267: PUSH
35268: LD_INT 8
35270: PUSH
35271: LD_INT 9
35273: PUSH
35274: LD_INT 10
35276: PUSH
35277: LD_INT 11
35279: PUSH
35280: LD_INT 12
35282: PUSH
35283: LD_INT 13
35285: PUSH
35286: LD_INT 14
35288: PUSH
35289: LD_INT 15
35291: PUSH
35292: LD_INT 16
35294: PUSH
35295: LD_INT 17
35297: PUSH
35298: LD_INT 18
35300: PUSH
35301: LD_INT 19
35303: PUSH
35304: LD_INT 20
35306: PUSH
35307: LD_INT 21
35309: PUSH
35310: LD_INT 22
35312: PUSH
35313: LD_INT 23
35315: PUSH
35316: LD_INT 24
35318: PUSH
35319: LD_INT 25
35321: PUSH
35322: LD_INT 26
35324: PUSH
35325: LD_INT 27
35327: PUSH
35328: LD_INT 28
35330: PUSH
35331: LD_INT 29
35333: PUSH
35334: LD_INT 30
35336: PUSH
35337: LD_INT 31
35339: PUSH
35340: LD_INT 32
35342: PUSH
35343: LD_INT 33
35345: PUSH
35346: LD_INT 34
35348: PUSH
35349: LD_INT 35
35351: PUSH
35352: LD_INT 36
35354: PUSH
35355: EMPTY
35356: LIST
35357: LIST
35358: LIST
35359: LIST
35360: LIST
35361: LIST
35362: LIST
35363: LIST
35364: LIST
35365: LIST
35366: LIST
35367: LIST
35368: LIST
35369: LIST
35370: LIST
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: LIST
35378: LIST
35379: LIST
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 101
35395: PUSH
35396: LD_INT 102
35398: PUSH
35399: LD_INT 103
35401: PUSH
35402: LD_INT 104
35404: PUSH
35405: LD_INT 105
35407: PUSH
35408: LD_INT 106
35410: PUSH
35411: LD_INT 107
35413: PUSH
35414: LD_INT 108
35416: PUSH
35417: LD_INT 109
35419: PUSH
35420: LD_INT 110
35422: PUSH
35423: LD_INT 111
35425: PUSH
35426: LD_INT 112
35428: PUSH
35429: LD_INT 113
35431: PUSH
35432: LD_INT 114
35434: PUSH
35435: LD_INT 115
35437: PUSH
35438: LD_INT 116
35440: PUSH
35441: LD_INT 117
35443: PUSH
35444: LD_INT 118
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: LIST
35451: LIST
35452: LIST
35453: LIST
35454: LIST
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: LIST
35465: LIST
35466: PUSH
35467: EMPTY
35468: LIST
35469: LIST
35470: ST_TO_ADDR
// if result then
35471: LD_VAR 0 2
35475: IFFALSE 36261
// begin normal :=  ;
35477: LD_ADDR_VAR 0 5
35481: PUSH
35482: LD_STRING 
35484: ST_TO_ADDR
// hardcore :=  ;
35485: LD_ADDR_VAR 0 6
35489: PUSH
35490: LD_STRING 
35492: ST_TO_ADDR
// active :=  ;
35493: LD_ADDR_VAR 0 7
35497: PUSH
35498: LD_STRING 
35500: ST_TO_ADDR
// for i = 1 to normalCounter do
35501: LD_ADDR_VAR 0 8
35505: PUSH
35506: DOUBLE
35507: LD_INT 1
35509: DEC
35510: ST_TO_ADDR
35511: LD_EXP 73
35515: PUSH
35516: FOR_TO
35517: IFFALSE 35618
// begin tmp := 0 ;
35519: LD_ADDR_VAR 0 3
35523: PUSH
35524: LD_STRING 0
35526: ST_TO_ADDR
// if result [ 1 ] then
35527: LD_VAR 0 2
35531: PUSH
35532: LD_INT 1
35534: ARRAY
35535: IFFALSE 35600
// if result [ 1 ] [ 1 ] = i then
35537: LD_VAR 0 2
35541: PUSH
35542: LD_INT 1
35544: ARRAY
35545: PUSH
35546: LD_INT 1
35548: ARRAY
35549: PUSH
35550: LD_VAR 0 8
35554: EQUAL
35555: IFFALSE 35600
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
35557: LD_ADDR_VAR 0 2
35561: PUSH
35562: LD_VAR 0 2
35566: PPUSH
35567: LD_INT 1
35569: PPUSH
35570: LD_VAR 0 2
35574: PUSH
35575: LD_INT 1
35577: ARRAY
35578: PPUSH
35579: LD_INT 1
35581: PPUSH
35582: CALL_OW 3
35586: PPUSH
35587: CALL_OW 1
35591: ST_TO_ADDR
// tmp := 1 ;
35592: LD_ADDR_VAR 0 3
35596: PUSH
35597: LD_STRING 1
35599: ST_TO_ADDR
// end ; normal := normal & tmp ;
35600: LD_ADDR_VAR 0 5
35604: PUSH
35605: LD_VAR 0 5
35609: PUSH
35610: LD_VAR 0 3
35614: STR
35615: ST_TO_ADDR
// end ;
35616: GO 35516
35618: POP
35619: POP
// for i = 1 to hardcoreCounter do
35620: LD_ADDR_VAR 0 8
35624: PUSH
35625: DOUBLE
35626: LD_INT 1
35628: DEC
35629: ST_TO_ADDR
35630: LD_EXP 74
35634: PUSH
35635: FOR_TO
35636: IFFALSE 35741
// begin tmp := 0 ;
35638: LD_ADDR_VAR 0 3
35642: PUSH
35643: LD_STRING 0
35645: ST_TO_ADDR
// if result [ 2 ] then
35646: LD_VAR 0 2
35650: PUSH
35651: LD_INT 2
35653: ARRAY
35654: IFFALSE 35723
// if result [ 2 ] [ 1 ] = 100 + i then
35656: LD_VAR 0 2
35660: PUSH
35661: LD_INT 2
35663: ARRAY
35664: PUSH
35665: LD_INT 1
35667: ARRAY
35668: PUSH
35669: LD_INT 100
35671: PUSH
35672: LD_VAR 0 8
35676: PLUS
35677: EQUAL
35678: IFFALSE 35723
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
35680: LD_ADDR_VAR 0 2
35684: PUSH
35685: LD_VAR 0 2
35689: PPUSH
35690: LD_INT 2
35692: PPUSH
35693: LD_VAR 0 2
35697: PUSH
35698: LD_INT 2
35700: ARRAY
35701: PPUSH
35702: LD_INT 1
35704: PPUSH
35705: CALL_OW 3
35709: PPUSH
35710: CALL_OW 1
35714: ST_TO_ADDR
// tmp := 1 ;
35715: LD_ADDR_VAR 0 3
35719: PUSH
35720: LD_STRING 1
35722: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
35723: LD_ADDR_VAR 0 6
35727: PUSH
35728: LD_VAR 0 6
35732: PUSH
35733: LD_VAR 0 3
35737: STR
35738: ST_TO_ADDR
// end ;
35739: GO 35635
35741: POP
35742: POP
// if isGameLoad then
35743: LD_VAR 0 1
35747: IFFALSE 36222
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
35749: LD_ADDR_VAR 0 4
35753: PUSH
35754: LD_EXP 77
35758: PUSH
35759: LD_EXP 76
35763: PUSH
35764: LD_EXP 78
35768: PUSH
35769: LD_EXP 75
35773: PUSH
35774: LD_EXP 79
35778: PUSH
35779: LD_EXP 80
35783: PUSH
35784: LD_EXP 81
35788: PUSH
35789: LD_EXP 82
35793: PUSH
35794: LD_EXP 83
35798: PUSH
35799: LD_EXP 84
35803: PUSH
35804: LD_EXP 85
35808: PUSH
35809: LD_EXP 86
35813: PUSH
35814: LD_EXP 87
35818: PUSH
35819: LD_EXP 88
35823: PUSH
35824: LD_EXP 96
35828: PUSH
35829: LD_EXP 97
35833: PUSH
35834: LD_EXP 98
35838: PUSH
35839: LD_EXP 99
35843: PUSH
35844: LD_EXP 101
35848: PUSH
35849: LD_EXP 102
35853: PUSH
35854: LD_EXP 103
35858: PUSH
35859: LD_EXP 106
35863: PUSH
35864: LD_EXP 108
35868: PUSH
35869: LD_EXP 109
35873: PUSH
35874: LD_EXP 110
35878: PUSH
35879: LD_EXP 112
35883: PUSH
35884: LD_EXP 113
35888: PUSH
35889: LD_EXP 116
35893: PUSH
35894: LD_EXP 117
35898: PUSH
35899: LD_EXP 118
35903: PUSH
35904: LD_EXP 119
35908: PUSH
35909: LD_EXP 120
35913: PUSH
35914: LD_EXP 121
35918: PUSH
35919: LD_EXP 122
35923: PUSH
35924: LD_EXP 123
35928: PUSH
35929: LD_EXP 124
35933: PUSH
35934: LD_EXP 89
35938: PUSH
35939: LD_EXP 90
35943: PUSH
35944: LD_EXP 93
35948: PUSH
35949: LD_EXP 94
35953: PUSH
35954: LD_EXP 95
35958: PUSH
35959: LD_EXP 91
35963: PUSH
35964: LD_EXP 92
35968: PUSH
35969: LD_EXP 100
35973: PUSH
35974: LD_EXP 104
35978: PUSH
35979: LD_EXP 105
35983: PUSH
35984: LD_EXP 107
35988: PUSH
35989: LD_EXP 111
35993: PUSH
35994: LD_EXP 114
35998: PUSH
35999: LD_EXP 115
36003: PUSH
36004: LD_EXP 125
36008: PUSH
36009: LD_EXP 126
36013: PUSH
36014: LD_EXP 127
36018: PUSH
36019: LD_EXP 128
36023: PUSH
36024: EMPTY
36025: LIST
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: LIST
36036: LIST
36037: LIST
36038: LIST
36039: LIST
36040: LIST
36041: LIST
36042: LIST
36043: LIST
36044: LIST
36045: LIST
36046: LIST
36047: LIST
36048: LIST
36049: LIST
36050: LIST
36051: LIST
36052: LIST
36053: LIST
36054: LIST
36055: LIST
36056: LIST
36057: LIST
36058: LIST
36059: LIST
36060: LIST
36061: LIST
36062: LIST
36063: LIST
36064: LIST
36065: LIST
36066: LIST
36067: LIST
36068: LIST
36069: LIST
36070: LIST
36071: LIST
36072: LIST
36073: LIST
36074: LIST
36075: LIST
36076: LIST
36077: LIST
36078: LIST
36079: ST_TO_ADDR
// tmp :=  ;
36080: LD_ADDR_VAR 0 3
36084: PUSH
36085: LD_STRING 
36087: ST_TO_ADDR
// for i = 1 to normalCounter do
36088: LD_ADDR_VAR 0 8
36092: PUSH
36093: DOUBLE
36094: LD_INT 1
36096: DEC
36097: ST_TO_ADDR
36098: LD_EXP 73
36102: PUSH
36103: FOR_TO
36104: IFFALSE 36140
// begin if flags [ i ] then
36106: LD_VAR 0 4
36110: PUSH
36111: LD_VAR 0 8
36115: ARRAY
36116: IFFALSE 36138
// tmp := tmp & i & ; ;
36118: LD_ADDR_VAR 0 3
36122: PUSH
36123: LD_VAR 0 3
36127: PUSH
36128: LD_VAR 0 8
36132: STR
36133: PUSH
36134: LD_STRING ;
36136: STR
36137: ST_TO_ADDR
// end ;
36138: GO 36103
36140: POP
36141: POP
// for i = 1 to hardcoreCounter do
36142: LD_ADDR_VAR 0 8
36146: PUSH
36147: DOUBLE
36148: LD_INT 1
36150: DEC
36151: ST_TO_ADDR
36152: LD_EXP 74
36156: PUSH
36157: FOR_TO
36158: IFFALSE 36204
// begin if flags [ normalCounter + i ] then
36160: LD_VAR 0 4
36164: PUSH
36165: LD_EXP 73
36169: PUSH
36170: LD_VAR 0 8
36174: PLUS
36175: ARRAY
36176: IFFALSE 36202
// tmp := tmp & ( 100 + i ) & ; ;
36178: LD_ADDR_VAR 0 3
36182: PUSH
36183: LD_VAR 0 3
36187: PUSH
36188: LD_INT 100
36190: PUSH
36191: LD_VAR 0 8
36195: PLUS
36196: STR
36197: PUSH
36198: LD_STRING ;
36200: STR
36201: ST_TO_ADDR
// end ;
36202: GO 36157
36204: POP
36205: POP
// if tmp then
36206: LD_VAR 0 3
36210: IFFALSE 36222
// active := tmp ;
36212: LD_ADDR_VAR 0 7
36216: PUSH
36217: LD_VAR 0 3
36221: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
36222: LD_STRING getStreamItemsFromMission("
36224: PUSH
36225: LD_VAR 0 5
36229: STR
36230: PUSH
36231: LD_STRING ","
36233: STR
36234: PUSH
36235: LD_VAR 0 6
36239: STR
36240: PUSH
36241: LD_STRING ","
36243: STR
36244: PUSH
36245: LD_VAR 0 7
36249: STR
36250: PUSH
36251: LD_STRING ")
36253: STR
36254: PPUSH
36255: CALL_OW 559
// end else
36259: GO 36268
// ToLua ( getStreamItemsFromMission("","","") ) ;
36261: LD_STRING getStreamItemsFromMission("","","")
36263: PPUSH
36264: CALL_OW 559
// end ;
36268: LD_VAR 0 2
36272: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
36273: LD_EXP 72
36277: PUSH
36278: LD_EXP 77
36282: AND
36283: IFFALSE 36407
36285: GO 36287
36287: DISABLE
36288: LD_INT 0
36290: PPUSH
36291: PPUSH
// begin enable ;
36292: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
36293: LD_ADDR_VAR 0 2
36297: PUSH
36298: LD_INT 22
36300: PUSH
36301: LD_OWVAR 2
36305: PUSH
36306: EMPTY
36307: LIST
36308: LIST
36309: PUSH
36310: LD_INT 2
36312: PUSH
36313: LD_INT 34
36315: PUSH
36316: LD_INT 7
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 34
36325: PUSH
36326: LD_INT 45
36328: PUSH
36329: EMPTY
36330: LIST
36331: LIST
36332: PUSH
36333: LD_INT 34
36335: PUSH
36336: LD_INT 28
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 34
36345: PUSH
36346: LD_INT 47
36348: PUSH
36349: EMPTY
36350: LIST
36351: LIST
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: LIST
36357: LIST
36358: LIST
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PPUSH
36364: CALL_OW 69
36368: ST_TO_ADDR
// if not tmp then
36369: LD_VAR 0 2
36373: NOT
36374: IFFALSE 36378
// exit ;
36376: GO 36407
// for i in tmp do
36378: LD_ADDR_VAR 0 1
36382: PUSH
36383: LD_VAR 0 2
36387: PUSH
36388: FOR_IN
36389: IFFALSE 36405
// begin SetLives ( i , 0 ) ;
36391: LD_VAR 0 1
36395: PPUSH
36396: LD_INT 0
36398: PPUSH
36399: CALL_OW 234
// end ;
36403: GO 36388
36405: POP
36406: POP
// end ;
36407: PPOPN 2
36409: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
36410: LD_EXP 72
36414: PUSH
36415: LD_EXP 78
36419: AND
36420: IFFALSE 36504
36422: GO 36424
36424: DISABLE
36425: LD_INT 0
36427: PPUSH
36428: PPUSH
// begin enable ;
36429: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
36430: LD_ADDR_VAR 0 2
36434: PUSH
36435: LD_INT 22
36437: PUSH
36438: LD_OWVAR 2
36442: PUSH
36443: EMPTY
36444: LIST
36445: LIST
36446: PUSH
36447: LD_INT 32
36449: PUSH
36450: LD_INT 3
36452: PUSH
36453: EMPTY
36454: LIST
36455: LIST
36456: PUSH
36457: EMPTY
36458: LIST
36459: LIST
36460: PPUSH
36461: CALL_OW 69
36465: ST_TO_ADDR
// if not tmp then
36466: LD_VAR 0 2
36470: NOT
36471: IFFALSE 36475
// exit ;
36473: GO 36504
// for i in tmp do
36475: LD_ADDR_VAR 0 1
36479: PUSH
36480: LD_VAR 0 2
36484: PUSH
36485: FOR_IN
36486: IFFALSE 36502
// begin SetLives ( i , 0 ) ;
36488: LD_VAR 0 1
36492: PPUSH
36493: LD_INT 0
36495: PPUSH
36496: CALL_OW 234
// end ;
36500: GO 36485
36502: POP
36503: POP
// end ;
36504: PPOPN 2
36506: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
36507: LD_EXP 72
36511: PUSH
36512: LD_EXP 75
36516: AND
36517: IFFALSE 36610
36519: GO 36521
36521: DISABLE
36522: LD_INT 0
36524: PPUSH
// begin enable ;
36525: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
36526: LD_ADDR_VAR 0 1
36530: PUSH
36531: LD_INT 22
36533: PUSH
36534: LD_OWVAR 2
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 2
36545: PUSH
36546: LD_INT 25
36548: PUSH
36549: LD_INT 5
36551: PUSH
36552: EMPTY
36553: LIST
36554: LIST
36555: PUSH
36556: LD_INT 25
36558: PUSH
36559: LD_INT 9
36561: PUSH
36562: EMPTY
36563: LIST
36564: LIST
36565: PUSH
36566: LD_INT 25
36568: PUSH
36569: LD_INT 8
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: EMPTY
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: PUSH
36582: EMPTY
36583: LIST
36584: LIST
36585: PPUSH
36586: CALL_OW 69
36590: PUSH
36591: FOR_IN
36592: IFFALSE 36608
// begin SetClass ( i , 1 ) ;
36594: LD_VAR 0 1
36598: PPUSH
36599: LD_INT 1
36601: PPUSH
36602: CALL_OW 336
// end ;
36606: GO 36591
36608: POP
36609: POP
// end ;
36610: PPOPN 1
36612: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
36613: LD_EXP 72
36617: PUSH
36618: LD_EXP 76
36622: AND
36623: PUSH
36624: LD_OWVAR 65
36628: PUSH
36629: LD_INT 7
36631: LESS
36632: AND
36633: IFFALSE 36647
36635: GO 36637
36637: DISABLE
// begin enable ;
36638: ENABLE
// game_speed := 7 ;
36639: LD_ADDR_OWVAR 65
36643: PUSH
36644: LD_INT 7
36646: ST_TO_ADDR
// end ;
36647: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
36648: LD_EXP 72
36652: PUSH
36653: LD_EXP 79
36657: AND
36658: IFFALSE 36860
36660: GO 36662
36662: DISABLE
36663: LD_INT 0
36665: PPUSH
36666: PPUSH
36667: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
36668: LD_ADDR_VAR 0 3
36672: PUSH
36673: LD_INT 81
36675: PUSH
36676: LD_OWVAR 2
36680: PUSH
36681: EMPTY
36682: LIST
36683: LIST
36684: PUSH
36685: LD_INT 21
36687: PUSH
36688: LD_INT 1
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PPUSH
36699: CALL_OW 69
36703: ST_TO_ADDR
// if not tmp then
36704: LD_VAR 0 3
36708: NOT
36709: IFFALSE 36713
// exit ;
36711: GO 36860
// if tmp > 5 then
36713: LD_VAR 0 3
36717: PUSH
36718: LD_INT 5
36720: GREATER
36721: IFFALSE 36733
// k := 5 else
36723: LD_ADDR_VAR 0 2
36727: PUSH
36728: LD_INT 5
36730: ST_TO_ADDR
36731: GO 36743
// k := tmp ;
36733: LD_ADDR_VAR 0 2
36737: PUSH
36738: LD_VAR 0 3
36742: ST_TO_ADDR
// for i := 1 to k do
36743: LD_ADDR_VAR 0 1
36747: PUSH
36748: DOUBLE
36749: LD_INT 1
36751: DEC
36752: ST_TO_ADDR
36753: LD_VAR 0 2
36757: PUSH
36758: FOR_TO
36759: IFFALSE 36858
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
36761: LD_VAR 0 3
36765: PUSH
36766: LD_VAR 0 1
36770: ARRAY
36771: PPUSH
36772: LD_VAR 0 1
36776: PUSH
36777: LD_INT 4
36779: MOD
36780: PUSH
36781: LD_INT 1
36783: PLUS
36784: PPUSH
36785: CALL_OW 259
36789: PUSH
36790: LD_INT 10
36792: LESS
36793: IFFALSE 36856
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
36795: LD_VAR 0 3
36799: PUSH
36800: LD_VAR 0 1
36804: ARRAY
36805: PPUSH
36806: LD_VAR 0 1
36810: PUSH
36811: LD_INT 4
36813: MOD
36814: PUSH
36815: LD_INT 1
36817: PLUS
36818: PPUSH
36819: LD_VAR 0 3
36823: PUSH
36824: LD_VAR 0 1
36828: ARRAY
36829: PPUSH
36830: LD_VAR 0 1
36834: PUSH
36835: LD_INT 4
36837: MOD
36838: PUSH
36839: LD_INT 1
36841: PLUS
36842: PPUSH
36843: CALL_OW 259
36847: PUSH
36848: LD_INT 1
36850: PLUS
36851: PPUSH
36852: CALL_OW 237
36856: GO 36758
36858: POP
36859: POP
// end ;
36860: PPOPN 3
36862: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
36863: LD_EXP 72
36867: PUSH
36868: LD_EXP 80
36872: AND
36873: IFFALSE 36893
36875: GO 36877
36877: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
36878: LD_INT 4
36880: PPUSH
36881: LD_OWVAR 2
36885: PPUSH
36886: LD_INT 0
36888: PPUSH
36889: CALL_OW 324
36893: END
// every 0 0$1 trigger StreamModeActive and sShovel do
36894: LD_EXP 72
36898: PUSH
36899: LD_EXP 109
36903: AND
36904: IFFALSE 36924
36906: GO 36908
36908: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
36909: LD_INT 19
36911: PPUSH
36912: LD_OWVAR 2
36916: PPUSH
36917: LD_INT 0
36919: PPUSH
36920: CALL_OW 324
36924: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
36925: LD_EXP 72
36929: PUSH
36930: LD_EXP 81
36934: AND
36935: IFFALSE 37037
36937: GO 36939
36939: DISABLE
36940: LD_INT 0
36942: PPUSH
36943: PPUSH
// begin enable ;
36944: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
36945: LD_ADDR_VAR 0 2
36949: PUSH
36950: LD_INT 22
36952: PUSH
36953: LD_OWVAR 2
36957: PUSH
36958: EMPTY
36959: LIST
36960: LIST
36961: PUSH
36962: LD_INT 2
36964: PUSH
36965: LD_INT 34
36967: PUSH
36968: LD_INT 11
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 34
36977: PUSH
36978: LD_INT 30
36980: PUSH
36981: EMPTY
36982: LIST
36983: LIST
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: LIST
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: PPUSH
36994: CALL_OW 69
36998: ST_TO_ADDR
// if not tmp then
36999: LD_VAR 0 2
37003: NOT
37004: IFFALSE 37008
// exit ;
37006: GO 37037
// for i in tmp do
37008: LD_ADDR_VAR 0 1
37012: PUSH
37013: LD_VAR 0 2
37017: PUSH
37018: FOR_IN
37019: IFFALSE 37035
// begin SetLives ( i , 0 ) ;
37021: LD_VAR 0 1
37025: PPUSH
37026: LD_INT 0
37028: PPUSH
37029: CALL_OW 234
// end ;
37033: GO 37018
37035: POP
37036: POP
// end ;
37037: PPOPN 2
37039: END
// every 0 0$1 trigger StreamModeActive and sBunker do
37040: LD_EXP 72
37044: PUSH
37045: LD_EXP 82
37049: AND
37050: IFFALSE 37070
37052: GO 37054
37054: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
37055: LD_INT 32
37057: PPUSH
37058: LD_OWVAR 2
37062: PPUSH
37063: LD_INT 0
37065: PPUSH
37066: CALL_OW 324
37070: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
37071: LD_EXP 72
37075: PUSH
37076: LD_EXP 83
37080: AND
37081: IFFALSE 37262
37083: GO 37085
37085: DISABLE
37086: LD_INT 0
37088: PPUSH
37089: PPUSH
37090: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
37091: LD_ADDR_VAR 0 2
37095: PUSH
37096: LD_INT 22
37098: PUSH
37099: LD_OWVAR 2
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 33
37110: PUSH
37111: LD_INT 3
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: EMPTY
37119: LIST
37120: LIST
37121: PPUSH
37122: CALL_OW 69
37126: ST_TO_ADDR
// if not tmp then
37127: LD_VAR 0 2
37131: NOT
37132: IFFALSE 37136
// exit ;
37134: GO 37262
// side := 0 ;
37136: LD_ADDR_VAR 0 3
37140: PUSH
37141: LD_INT 0
37143: ST_TO_ADDR
// for i := 1 to 8 do
37144: LD_ADDR_VAR 0 1
37148: PUSH
37149: DOUBLE
37150: LD_INT 1
37152: DEC
37153: ST_TO_ADDR
37154: LD_INT 8
37156: PUSH
37157: FOR_TO
37158: IFFALSE 37206
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
37160: LD_OWVAR 2
37164: PUSH
37165: LD_VAR 0 1
37169: NONEQUAL
37170: PUSH
37171: LD_OWVAR 2
37175: PPUSH
37176: LD_VAR 0 1
37180: PPUSH
37181: CALL_OW 81
37185: PUSH
37186: LD_INT 2
37188: EQUAL
37189: AND
37190: IFFALSE 37204
// begin side := i ;
37192: LD_ADDR_VAR 0 3
37196: PUSH
37197: LD_VAR 0 1
37201: ST_TO_ADDR
// break ;
37202: GO 37206
// end ;
37204: GO 37157
37206: POP
37207: POP
// if not side then
37208: LD_VAR 0 3
37212: NOT
37213: IFFALSE 37217
// exit ;
37215: GO 37262
// for i := 1 to tmp do
37217: LD_ADDR_VAR 0 1
37221: PUSH
37222: DOUBLE
37223: LD_INT 1
37225: DEC
37226: ST_TO_ADDR
37227: LD_VAR 0 2
37231: PUSH
37232: FOR_TO
37233: IFFALSE 37260
// if Prob ( 60 ) then
37235: LD_INT 60
37237: PPUSH
37238: CALL_OW 13
37242: IFFALSE 37258
// SetSide ( i , side ) ;
37244: LD_VAR 0 1
37248: PPUSH
37249: LD_VAR 0 3
37253: PPUSH
37254: CALL_OW 235
37258: GO 37232
37260: POP
37261: POP
// end ;
37262: PPOPN 3
37264: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
37265: LD_EXP 72
37269: PUSH
37270: LD_EXP 85
37274: AND
37275: IFFALSE 37394
37277: GO 37279
37279: DISABLE
37280: LD_INT 0
37282: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
37283: LD_ADDR_VAR 0 1
37287: PUSH
37288: LD_INT 22
37290: PUSH
37291: LD_OWVAR 2
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 21
37302: PUSH
37303: LD_INT 1
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: PUSH
37310: LD_INT 3
37312: PUSH
37313: LD_INT 23
37315: PUSH
37316: LD_INT 0
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: EMPTY
37328: LIST
37329: LIST
37330: LIST
37331: PPUSH
37332: CALL_OW 69
37336: PUSH
37337: FOR_IN
37338: IFFALSE 37392
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
37340: LD_VAR 0 1
37344: PPUSH
37345: CALL_OW 257
37349: PUSH
37350: LD_INT 1
37352: PUSH
37353: LD_INT 2
37355: PUSH
37356: LD_INT 3
37358: PUSH
37359: LD_INT 4
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: IN
37368: IFFALSE 37390
// SetClass ( un , rand ( 1 , 4 ) ) ;
37370: LD_VAR 0 1
37374: PPUSH
37375: LD_INT 1
37377: PPUSH
37378: LD_INT 4
37380: PPUSH
37381: CALL_OW 12
37385: PPUSH
37386: CALL_OW 336
37390: GO 37337
37392: POP
37393: POP
// end ;
37394: PPOPN 1
37396: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
37397: LD_EXP 72
37401: PUSH
37402: LD_EXP 84
37406: AND
37407: IFFALSE 37486
37409: GO 37411
37411: DISABLE
37412: LD_INT 0
37414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37415: LD_ADDR_VAR 0 1
37419: PUSH
37420: LD_INT 22
37422: PUSH
37423: LD_OWVAR 2
37427: PUSH
37428: EMPTY
37429: LIST
37430: LIST
37431: PUSH
37432: LD_INT 21
37434: PUSH
37435: LD_INT 3
37437: PUSH
37438: EMPTY
37439: LIST
37440: LIST
37441: PUSH
37442: EMPTY
37443: LIST
37444: LIST
37445: PPUSH
37446: CALL_OW 69
37450: ST_TO_ADDR
// if not tmp then
37451: LD_VAR 0 1
37455: NOT
37456: IFFALSE 37460
// exit ;
37458: GO 37486
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
37460: LD_VAR 0 1
37464: PUSH
37465: LD_INT 1
37467: PPUSH
37468: LD_VAR 0 1
37472: PPUSH
37473: CALL_OW 12
37477: ARRAY
37478: PPUSH
37479: LD_INT 100
37481: PPUSH
37482: CALL_OW 234
// end ;
37486: PPOPN 1
37488: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
37489: LD_EXP 72
37493: PUSH
37494: LD_EXP 86
37498: AND
37499: IFFALSE 37597
37501: GO 37503
37503: DISABLE
37504: LD_INT 0
37506: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
37507: LD_ADDR_VAR 0 1
37511: PUSH
37512: LD_INT 22
37514: PUSH
37515: LD_OWVAR 2
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: PUSH
37524: LD_INT 21
37526: PUSH
37527: LD_INT 1
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PPUSH
37538: CALL_OW 69
37542: ST_TO_ADDR
// if not tmp then
37543: LD_VAR 0 1
37547: NOT
37548: IFFALSE 37552
// exit ;
37550: GO 37597
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
37552: LD_VAR 0 1
37556: PUSH
37557: LD_INT 1
37559: PPUSH
37560: LD_VAR 0 1
37564: PPUSH
37565: CALL_OW 12
37569: ARRAY
37570: PPUSH
37571: LD_INT 1
37573: PPUSH
37574: LD_INT 4
37576: PPUSH
37577: CALL_OW 12
37581: PPUSH
37582: LD_INT 3000
37584: PPUSH
37585: LD_INT 9000
37587: PPUSH
37588: CALL_OW 12
37592: PPUSH
37593: CALL_OW 492
// end ;
37597: PPOPN 1
37599: END
// every 0 0$1 trigger StreamModeActive and sDepot do
37600: LD_EXP 72
37604: PUSH
37605: LD_EXP 87
37609: AND
37610: IFFALSE 37630
37612: GO 37614
37614: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
37615: LD_INT 1
37617: PPUSH
37618: LD_OWVAR 2
37622: PPUSH
37623: LD_INT 0
37625: PPUSH
37626: CALL_OW 324
37630: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
37631: LD_EXP 72
37635: PUSH
37636: LD_EXP 88
37640: AND
37641: IFFALSE 37724
37643: GO 37645
37645: DISABLE
37646: LD_INT 0
37648: PPUSH
37649: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
37650: LD_ADDR_VAR 0 2
37654: PUSH
37655: LD_INT 22
37657: PUSH
37658: LD_OWVAR 2
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 21
37669: PUSH
37670: LD_INT 3
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PPUSH
37681: CALL_OW 69
37685: ST_TO_ADDR
// if not tmp then
37686: LD_VAR 0 2
37690: NOT
37691: IFFALSE 37695
// exit ;
37693: GO 37724
// for i in tmp do
37695: LD_ADDR_VAR 0 1
37699: PUSH
37700: LD_VAR 0 2
37704: PUSH
37705: FOR_IN
37706: IFFALSE 37722
// SetBLevel ( i , 10 ) ;
37708: LD_VAR 0 1
37712: PPUSH
37713: LD_INT 10
37715: PPUSH
37716: CALL_OW 241
37720: GO 37705
37722: POP
37723: POP
// end ;
37724: PPOPN 2
37726: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
37727: LD_EXP 72
37731: PUSH
37732: LD_EXP 89
37736: AND
37737: IFFALSE 37848
37739: GO 37741
37741: DISABLE
37742: LD_INT 0
37744: PPUSH
37745: PPUSH
37746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
37747: LD_ADDR_VAR 0 3
37751: PUSH
37752: LD_INT 22
37754: PUSH
37755: LD_OWVAR 2
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 25
37766: PUSH
37767: LD_INT 1
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: EMPTY
37775: LIST
37776: LIST
37777: PPUSH
37778: CALL_OW 69
37782: ST_TO_ADDR
// if not tmp then
37783: LD_VAR 0 3
37787: NOT
37788: IFFALSE 37792
// exit ;
37790: GO 37848
// un := tmp [ rand ( 1 , tmp ) ] ;
37792: LD_ADDR_VAR 0 2
37796: PUSH
37797: LD_VAR 0 3
37801: PUSH
37802: LD_INT 1
37804: PPUSH
37805: LD_VAR 0 3
37809: PPUSH
37810: CALL_OW 12
37814: ARRAY
37815: ST_TO_ADDR
// if Crawls ( un ) then
37816: LD_VAR 0 2
37820: PPUSH
37821: CALL_OW 318
37825: IFFALSE 37836
// ComWalk ( un ) ;
37827: LD_VAR 0 2
37831: PPUSH
37832: CALL_OW 138
// SetClass ( un , class_sniper ) ;
37836: LD_VAR 0 2
37840: PPUSH
37841: LD_INT 5
37843: PPUSH
37844: CALL_OW 336
// end ;
37848: PPOPN 3
37850: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
37851: LD_EXP 72
37855: PUSH
37856: LD_EXP 90
37860: AND
37861: PUSH
37862: LD_OWVAR 67
37866: PUSH
37867: LD_INT 4
37869: LESS
37870: AND
37871: IFFALSE 37890
37873: GO 37875
37875: DISABLE
// begin Difficulty := Difficulty + 1 ;
37876: LD_ADDR_OWVAR 67
37880: PUSH
37881: LD_OWVAR 67
37885: PUSH
37886: LD_INT 1
37888: PLUS
37889: ST_TO_ADDR
// end ;
37890: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
37891: LD_EXP 72
37895: PUSH
37896: LD_EXP 91
37900: AND
37901: IFFALSE 38004
37903: GO 37905
37905: DISABLE
37906: LD_INT 0
37908: PPUSH
// begin for i := 1 to 5 do
37909: LD_ADDR_VAR 0 1
37913: PUSH
37914: DOUBLE
37915: LD_INT 1
37917: DEC
37918: ST_TO_ADDR
37919: LD_INT 5
37921: PUSH
37922: FOR_TO
37923: IFFALSE 38002
// begin uc_nation := nation_nature ;
37925: LD_ADDR_OWVAR 21
37929: PUSH
37930: LD_INT 0
37932: ST_TO_ADDR
// uc_side := 0 ;
37933: LD_ADDR_OWVAR 20
37937: PUSH
37938: LD_INT 0
37940: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
37941: LD_ADDR_OWVAR 29
37945: PUSH
37946: LD_INT 12
37948: PUSH
37949: LD_INT 12
37951: PUSH
37952: EMPTY
37953: LIST
37954: LIST
37955: ST_TO_ADDR
// hc_agressivity := 20 ;
37956: LD_ADDR_OWVAR 35
37960: PUSH
37961: LD_INT 20
37963: ST_TO_ADDR
// hc_class := class_tiger ;
37964: LD_ADDR_OWVAR 28
37968: PUSH
37969: LD_INT 14
37971: ST_TO_ADDR
// hc_gallery :=  ;
37972: LD_ADDR_OWVAR 33
37976: PUSH
37977: LD_STRING 
37979: ST_TO_ADDR
// hc_name :=  ;
37980: LD_ADDR_OWVAR 26
37984: PUSH
37985: LD_STRING 
37987: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
37988: CALL_OW 44
37992: PPUSH
37993: LD_INT 0
37995: PPUSH
37996: CALL_OW 51
// end ;
38000: GO 37922
38002: POP
38003: POP
// end ;
38004: PPOPN 1
38006: END
// every 0 0$1 trigger StreamModeActive and sBomb do
38007: LD_EXP 72
38011: PUSH
38012: LD_EXP 92
38016: AND
38017: IFFALSE 38026
38019: GO 38021
38021: DISABLE
// StreamSibBomb ;
38022: CALL 38027 0 0
38026: END
// export function StreamSibBomb ; var i , x , y ; begin
38027: LD_INT 0
38029: PPUSH
38030: PPUSH
38031: PPUSH
38032: PPUSH
// result := false ;
38033: LD_ADDR_VAR 0 1
38037: PUSH
38038: LD_INT 0
38040: ST_TO_ADDR
// for i := 1 to 16 do
38041: LD_ADDR_VAR 0 2
38045: PUSH
38046: DOUBLE
38047: LD_INT 1
38049: DEC
38050: ST_TO_ADDR
38051: LD_INT 16
38053: PUSH
38054: FOR_TO
38055: IFFALSE 38254
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
38057: LD_ADDR_VAR 0 3
38061: PUSH
38062: LD_INT 10
38064: PUSH
38065: LD_INT 20
38067: PUSH
38068: LD_INT 30
38070: PUSH
38071: LD_INT 40
38073: PUSH
38074: LD_INT 50
38076: PUSH
38077: LD_INT 60
38079: PUSH
38080: LD_INT 70
38082: PUSH
38083: LD_INT 80
38085: PUSH
38086: LD_INT 90
38088: PUSH
38089: LD_INT 100
38091: PUSH
38092: LD_INT 110
38094: PUSH
38095: LD_INT 120
38097: PUSH
38098: LD_INT 130
38100: PUSH
38101: LD_INT 140
38103: PUSH
38104: LD_INT 150
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: PUSH
38124: LD_INT 1
38126: PPUSH
38127: LD_INT 15
38129: PPUSH
38130: CALL_OW 12
38134: ARRAY
38135: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
38136: LD_ADDR_VAR 0 4
38140: PUSH
38141: LD_INT 10
38143: PUSH
38144: LD_INT 20
38146: PUSH
38147: LD_INT 30
38149: PUSH
38150: LD_INT 40
38152: PUSH
38153: LD_INT 50
38155: PUSH
38156: LD_INT 60
38158: PUSH
38159: LD_INT 70
38161: PUSH
38162: LD_INT 80
38164: PUSH
38165: LD_INT 90
38167: PUSH
38168: LD_INT 100
38170: PUSH
38171: LD_INT 110
38173: PUSH
38174: LD_INT 120
38176: PUSH
38177: LD_INT 130
38179: PUSH
38180: LD_INT 140
38182: PUSH
38183: LD_INT 150
38185: PUSH
38186: EMPTY
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 1
38205: PPUSH
38206: LD_INT 15
38208: PPUSH
38209: CALL_OW 12
38213: ARRAY
38214: ST_TO_ADDR
// if ValidHex ( x , y ) then
38215: LD_VAR 0 3
38219: PPUSH
38220: LD_VAR 0 4
38224: PPUSH
38225: CALL_OW 488
38229: IFFALSE 38252
// begin result := [ x , y ] ;
38231: LD_ADDR_VAR 0 1
38235: PUSH
38236: LD_VAR 0 3
38240: PUSH
38241: LD_VAR 0 4
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: ST_TO_ADDR
// break ;
38250: GO 38254
// end ; end ;
38252: GO 38054
38254: POP
38255: POP
// if result then
38256: LD_VAR 0 1
38260: IFFALSE 38320
// begin ToLua ( playSibBomb() ) ;
38262: LD_STRING playSibBomb()
38264: PPUSH
38265: CALL_OW 559
// wait ( 0 0$14 ) ;
38269: LD_INT 490
38271: PPUSH
38272: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
38276: LD_VAR 0 1
38280: PUSH
38281: LD_INT 1
38283: ARRAY
38284: PPUSH
38285: LD_VAR 0 1
38289: PUSH
38290: LD_INT 2
38292: ARRAY
38293: PPUSH
38294: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
38298: LD_VAR 0 1
38302: PUSH
38303: LD_INT 1
38305: ARRAY
38306: PPUSH
38307: LD_VAR 0 1
38311: PUSH
38312: LD_INT 2
38314: ARRAY
38315: PPUSH
38316: CALL_OW 429
// end ; end ;
38320: LD_VAR 0 1
38324: RET
// every 0 0$1 trigger StreamModeActive and sReset do
38325: LD_EXP 72
38329: PUSH
38330: LD_EXP 94
38334: AND
38335: IFFALSE 38347
38337: GO 38339
38339: DISABLE
// YouLost (  ) ;
38340: LD_STRING 
38342: PPUSH
38343: CALL_OW 104
38347: END
// every 0 0$1 trigger StreamModeActive and sFog do
38348: LD_EXP 72
38352: PUSH
38353: LD_EXP 93
38357: AND
38358: IFFALSE 38372
38360: GO 38362
38362: DISABLE
// FogOff ( your_side ) ;
38363: LD_OWVAR 2
38367: PPUSH
38368: CALL_OW 344
38372: END
// every 0 0$1 trigger StreamModeActive and sSun do
38373: LD_EXP 72
38377: PUSH
38378: LD_EXP 95
38382: AND
38383: IFFALSE 38411
38385: GO 38387
38387: DISABLE
// begin solar_recharge_percent := 0 ;
38388: LD_ADDR_OWVAR 79
38392: PUSH
38393: LD_INT 0
38395: ST_TO_ADDR
// wait ( 5 5$00 ) ;
38396: LD_INT 10500
38398: PPUSH
38399: CALL_OW 67
// solar_recharge_percent := 100 ;
38403: LD_ADDR_OWVAR 79
38407: PUSH
38408: LD_INT 100
38410: ST_TO_ADDR
// end ;
38411: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
38412: LD_EXP 72
38416: PUSH
38417: LD_EXP 96
38421: AND
38422: IFFALSE 38661
38424: GO 38426
38426: DISABLE
38427: LD_INT 0
38429: PPUSH
38430: PPUSH
38431: PPUSH
// begin tmp := [ ] ;
38432: LD_ADDR_VAR 0 3
38436: PUSH
38437: EMPTY
38438: ST_TO_ADDR
// for i := 1 to 6 do
38439: LD_ADDR_VAR 0 1
38443: PUSH
38444: DOUBLE
38445: LD_INT 1
38447: DEC
38448: ST_TO_ADDR
38449: LD_INT 6
38451: PUSH
38452: FOR_TO
38453: IFFALSE 38558
// begin uc_nation := nation_nature ;
38455: LD_ADDR_OWVAR 21
38459: PUSH
38460: LD_INT 0
38462: ST_TO_ADDR
// uc_side := 0 ;
38463: LD_ADDR_OWVAR 20
38467: PUSH
38468: LD_INT 0
38470: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
38471: LD_ADDR_OWVAR 29
38475: PUSH
38476: LD_INT 12
38478: PUSH
38479: LD_INT 12
38481: PUSH
38482: EMPTY
38483: LIST
38484: LIST
38485: ST_TO_ADDR
// hc_agressivity := 20 ;
38486: LD_ADDR_OWVAR 35
38490: PUSH
38491: LD_INT 20
38493: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
38494: LD_ADDR_OWVAR 28
38498: PUSH
38499: LD_INT 17
38501: ST_TO_ADDR
// hc_gallery :=  ;
38502: LD_ADDR_OWVAR 33
38506: PUSH
38507: LD_STRING 
38509: ST_TO_ADDR
// hc_name :=  ;
38510: LD_ADDR_OWVAR 26
38514: PUSH
38515: LD_STRING 
38517: ST_TO_ADDR
// un := CreateHuman ;
38518: LD_ADDR_VAR 0 2
38522: PUSH
38523: CALL_OW 44
38527: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
38528: LD_VAR 0 2
38532: PPUSH
38533: LD_INT 1
38535: PPUSH
38536: CALL_OW 51
// tmp := tmp ^ un ;
38540: LD_ADDR_VAR 0 3
38544: PUSH
38545: LD_VAR 0 3
38549: PUSH
38550: LD_VAR 0 2
38554: ADD
38555: ST_TO_ADDR
// end ;
38556: GO 38452
38558: POP
38559: POP
// repeat wait ( 0 0$1 ) ;
38560: LD_INT 35
38562: PPUSH
38563: CALL_OW 67
// for un in tmp do
38567: LD_ADDR_VAR 0 2
38571: PUSH
38572: LD_VAR 0 3
38576: PUSH
38577: FOR_IN
38578: IFFALSE 38652
// begin if IsDead ( un ) then
38580: LD_VAR 0 2
38584: PPUSH
38585: CALL_OW 301
38589: IFFALSE 38609
// begin tmp := tmp diff un ;
38591: LD_ADDR_VAR 0 3
38595: PUSH
38596: LD_VAR 0 3
38600: PUSH
38601: LD_VAR 0 2
38605: DIFF
38606: ST_TO_ADDR
// continue ;
38607: GO 38577
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
38609: LD_VAR 0 2
38613: PPUSH
38614: LD_INT 3
38616: PUSH
38617: LD_INT 22
38619: PUSH
38620: LD_INT 0
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: EMPTY
38628: LIST
38629: LIST
38630: PPUSH
38631: CALL_OW 69
38635: PPUSH
38636: LD_VAR 0 2
38640: PPUSH
38641: CALL_OW 74
38645: PPUSH
38646: CALL_OW 115
// end ;
38650: GO 38577
38652: POP
38653: POP
// until not tmp ;
38654: LD_VAR 0 3
38658: NOT
38659: IFFALSE 38560
// end ;
38661: PPOPN 3
38663: END
// every 0 0$1 trigger StreamModeActive and sTroll do
38664: LD_EXP 72
38668: PUSH
38669: LD_EXP 97
38673: AND
38674: IFFALSE 38728
38676: GO 38678
38678: DISABLE
// begin ToLua ( displayTroll(); ) ;
38679: LD_STRING displayTroll();
38681: PPUSH
38682: CALL_OW 559
// wait ( 3 3$00 ) ;
38686: LD_INT 6300
38688: PPUSH
38689: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38693: LD_STRING hideTroll();
38695: PPUSH
38696: CALL_OW 559
// wait ( 1 1$00 ) ;
38700: LD_INT 2100
38702: PPUSH
38703: CALL_OW 67
// ToLua ( displayTroll(); ) ;
38707: LD_STRING displayTroll();
38709: PPUSH
38710: CALL_OW 559
// wait ( 1 1$00 ) ;
38714: LD_INT 2100
38716: PPUSH
38717: CALL_OW 67
// ToLua ( hideTroll(); ) ;
38721: LD_STRING hideTroll();
38723: PPUSH
38724: CALL_OW 559
// end ;
38728: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
38729: LD_EXP 72
38733: PUSH
38734: LD_EXP 98
38738: AND
38739: IFFALSE 38802
38741: GO 38743
38743: DISABLE
38744: LD_INT 0
38746: PPUSH
// begin p := 0 ;
38747: LD_ADDR_VAR 0 1
38751: PUSH
38752: LD_INT 0
38754: ST_TO_ADDR
// repeat game_speed := 1 ;
38755: LD_ADDR_OWVAR 65
38759: PUSH
38760: LD_INT 1
38762: ST_TO_ADDR
// wait ( 0 0$1 ) ;
38763: LD_INT 35
38765: PPUSH
38766: CALL_OW 67
// p := p + 1 ;
38770: LD_ADDR_VAR 0 1
38774: PUSH
38775: LD_VAR 0 1
38779: PUSH
38780: LD_INT 1
38782: PLUS
38783: ST_TO_ADDR
// until p >= 60 ;
38784: LD_VAR 0 1
38788: PUSH
38789: LD_INT 60
38791: GREATEREQUAL
38792: IFFALSE 38755
// game_speed := 4 ;
38794: LD_ADDR_OWVAR 65
38798: PUSH
38799: LD_INT 4
38801: ST_TO_ADDR
// end ;
38802: PPOPN 1
38804: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
38805: LD_EXP 72
38809: PUSH
38810: LD_EXP 99
38814: AND
38815: IFFALSE 38961
38817: GO 38819
38819: DISABLE
38820: LD_INT 0
38822: PPUSH
38823: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
38824: LD_ADDR_VAR 0 1
38828: PUSH
38829: LD_INT 22
38831: PUSH
38832: LD_OWVAR 2
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 2
38843: PUSH
38844: LD_INT 30
38846: PUSH
38847: LD_INT 0
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 30
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: LIST
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PPUSH
38873: CALL_OW 69
38877: ST_TO_ADDR
// if not depot then
38878: LD_VAR 0 1
38882: NOT
38883: IFFALSE 38887
// exit ;
38885: GO 38961
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
38887: LD_ADDR_VAR 0 2
38891: PUSH
38892: LD_VAR 0 1
38896: PUSH
38897: LD_INT 1
38899: PPUSH
38900: LD_VAR 0 1
38904: PPUSH
38905: CALL_OW 12
38909: ARRAY
38910: PPUSH
38911: CALL_OW 274
38915: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
38916: LD_VAR 0 2
38920: PPUSH
38921: LD_INT 1
38923: PPUSH
38924: LD_INT 0
38926: PPUSH
38927: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
38931: LD_VAR 0 2
38935: PPUSH
38936: LD_INT 2
38938: PPUSH
38939: LD_INT 0
38941: PPUSH
38942: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
38946: LD_VAR 0 2
38950: PPUSH
38951: LD_INT 3
38953: PPUSH
38954: LD_INT 0
38956: PPUSH
38957: CALL_OW 277
// end ;
38961: PPOPN 2
38963: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
38964: LD_EXP 72
38968: PUSH
38969: LD_EXP 100
38973: AND
38974: IFFALSE 39071
38976: GO 38978
38978: DISABLE
38979: LD_INT 0
38981: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
38982: LD_ADDR_VAR 0 1
38986: PUSH
38987: LD_INT 22
38989: PUSH
38990: LD_OWVAR 2
38994: PUSH
38995: EMPTY
38996: LIST
38997: LIST
38998: PUSH
38999: LD_INT 21
39001: PUSH
39002: LD_INT 1
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 3
39011: PUSH
39012: LD_INT 23
39014: PUSH
39015: LD_INT 0
39017: PUSH
39018: EMPTY
39019: LIST
39020: LIST
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: LIST
39030: PPUSH
39031: CALL_OW 69
39035: ST_TO_ADDR
// if not tmp then
39036: LD_VAR 0 1
39040: NOT
39041: IFFALSE 39045
// exit ;
39043: GO 39071
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
39045: LD_VAR 0 1
39049: PUSH
39050: LD_INT 1
39052: PPUSH
39053: LD_VAR 0 1
39057: PPUSH
39058: CALL_OW 12
39062: ARRAY
39063: PPUSH
39064: LD_INT 200
39066: PPUSH
39067: CALL_OW 234
// end ;
39071: PPOPN 1
39073: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
39074: LD_EXP 72
39078: PUSH
39079: LD_EXP 101
39083: AND
39084: IFFALSE 39163
39086: GO 39088
39088: DISABLE
39089: LD_INT 0
39091: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
39092: LD_ADDR_VAR 0 1
39096: PUSH
39097: LD_INT 22
39099: PUSH
39100: LD_OWVAR 2
39104: PUSH
39105: EMPTY
39106: LIST
39107: LIST
39108: PUSH
39109: LD_INT 21
39111: PUSH
39112: LD_INT 2
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PPUSH
39123: CALL_OW 69
39127: ST_TO_ADDR
// if not tmp then
39128: LD_VAR 0 1
39132: NOT
39133: IFFALSE 39137
// exit ;
39135: GO 39163
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
39137: LD_VAR 0 1
39141: PUSH
39142: LD_INT 1
39144: PPUSH
39145: LD_VAR 0 1
39149: PPUSH
39150: CALL_OW 12
39154: ARRAY
39155: PPUSH
39156: LD_INT 60
39158: PPUSH
39159: CALL_OW 234
// end ;
39163: PPOPN 1
39165: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
39166: LD_EXP 72
39170: PUSH
39171: LD_EXP 102
39175: AND
39176: IFFALSE 39275
39178: GO 39180
39180: DISABLE
39181: LD_INT 0
39183: PPUSH
39184: PPUSH
// begin enable ;
39185: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
39186: LD_ADDR_VAR 0 1
39190: PUSH
39191: LD_INT 22
39193: PUSH
39194: LD_OWVAR 2
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 61
39205: PUSH
39206: EMPTY
39207: LIST
39208: PUSH
39209: LD_INT 33
39211: PUSH
39212: LD_INT 2
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: LIST
39223: PPUSH
39224: CALL_OW 69
39228: ST_TO_ADDR
// if not tmp then
39229: LD_VAR 0 1
39233: NOT
39234: IFFALSE 39238
// exit ;
39236: GO 39275
// for i in tmp do
39238: LD_ADDR_VAR 0 2
39242: PUSH
39243: LD_VAR 0 1
39247: PUSH
39248: FOR_IN
39249: IFFALSE 39273
// if IsControledBy ( i ) then
39251: LD_VAR 0 2
39255: PPUSH
39256: CALL_OW 312
39260: IFFALSE 39271
// ComUnlink ( i ) ;
39262: LD_VAR 0 2
39266: PPUSH
39267: CALL_OW 136
39271: GO 39248
39273: POP
39274: POP
// end ;
39275: PPOPN 2
39277: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
39278: LD_EXP 72
39282: PUSH
39283: LD_EXP 103
39287: AND
39288: IFFALSE 39428
39290: GO 39292
39292: DISABLE
39293: LD_INT 0
39295: PPUSH
39296: PPUSH
// begin ToLua ( displayPowell(); ) ;
39297: LD_STRING displayPowell();
39299: PPUSH
39300: CALL_OW 559
// uc_side := 0 ;
39304: LD_ADDR_OWVAR 20
39308: PUSH
39309: LD_INT 0
39311: ST_TO_ADDR
// uc_nation := 2 ;
39312: LD_ADDR_OWVAR 21
39316: PUSH
39317: LD_INT 2
39319: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
39320: LD_ADDR_OWVAR 37
39324: PUSH
39325: LD_INT 14
39327: ST_TO_ADDR
// vc_engine := engine_siberite ;
39328: LD_ADDR_OWVAR 39
39332: PUSH
39333: LD_INT 3
39335: ST_TO_ADDR
// vc_control := control_apeman ;
39336: LD_ADDR_OWVAR 38
39340: PUSH
39341: LD_INT 5
39343: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
39344: LD_ADDR_OWVAR 40
39348: PUSH
39349: LD_INT 29
39351: ST_TO_ADDR
// un := CreateVehicle ;
39352: LD_ADDR_VAR 0 2
39356: PUSH
39357: CALL_OW 45
39361: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
39362: LD_VAR 0 2
39366: PPUSH
39367: LD_INT 1
39369: PPUSH
39370: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
39374: LD_INT 35
39376: PPUSH
39377: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
39381: LD_VAR 0 2
39385: PPUSH
39386: LD_INT 22
39388: PUSH
39389: LD_OWVAR 2
39393: PUSH
39394: EMPTY
39395: LIST
39396: LIST
39397: PPUSH
39398: CALL_OW 69
39402: PPUSH
39403: LD_VAR 0 2
39407: PPUSH
39408: CALL_OW 74
39412: PPUSH
39413: CALL_OW 115
// until IsDead ( un ) ;
39417: LD_VAR 0 2
39421: PPUSH
39422: CALL_OW 301
39426: IFFALSE 39374
// end ;
39428: PPOPN 2
39430: END
// every 0 0$1 trigger StreamModeActive and sStu do
39431: LD_EXP 72
39435: PUSH
39436: LD_EXP 111
39440: AND
39441: IFFALSE 39457
39443: GO 39445
39445: DISABLE
// begin ToLua ( displayStucuk(); ) ;
39446: LD_STRING displayStucuk();
39448: PPUSH
39449: CALL_OW 559
// ResetFog ;
39453: CALL_OW 335
// end ;
39457: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
39458: LD_EXP 72
39462: PUSH
39463: LD_EXP 104
39467: AND
39468: IFFALSE 39609
39470: GO 39472
39472: DISABLE
39473: LD_INT 0
39475: PPUSH
39476: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
39477: LD_ADDR_VAR 0 2
39481: PUSH
39482: LD_INT 22
39484: PUSH
39485: LD_OWVAR 2
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 21
39496: PUSH
39497: LD_INT 1
39499: PUSH
39500: EMPTY
39501: LIST
39502: LIST
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PPUSH
39508: CALL_OW 69
39512: ST_TO_ADDR
// if not tmp then
39513: LD_VAR 0 2
39517: NOT
39518: IFFALSE 39522
// exit ;
39520: GO 39609
// un := tmp [ rand ( 1 , tmp ) ] ;
39522: LD_ADDR_VAR 0 1
39526: PUSH
39527: LD_VAR 0 2
39531: PUSH
39532: LD_INT 1
39534: PPUSH
39535: LD_VAR 0 2
39539: PPUSH
39540: CALL_OW 12
39544: ARRAY
39545: ST_TO_ADDR
// SetSide ( un , 0 ) ;
39546: LD_VAR 0 1
39550: PPUSH
39551: LD_INT 0
39553: PPUSH
39554: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
39558: LD_VAR 0 1
39562: PPUSH
39563: LD_OWVAR 3
39567: PUSH
39568: LD_VAR 0 1
39572: DIFF
39573: PPUSH
39574: LD_VAR 0 1
39578: PPUSH
39579: CALL_OW 74
39583: PPUSH
39584: CALL_OW 115
// wait ( 0 0$20 ) ;
39588: LD_INT 700
39590: PPUSH
39591: CALL_OW 67
// SetSide ( un , your_side ) ;
39595: LD_VAR 0 1
39599: PPUSH
39600: LD_OWVAR 2
39604: PPUSH
39605: CALL_OW 235
// end ;
39609: PPOPN 2
39611: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
39612: LD_EXP 72
39616: PUSH
39617: LD_EXP 105
39621: AND
39622: IFFALSE 39728
39624: GO 39626
39626: DISABLE
39627: LD_INT 0
39629: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
39630: LD_ADDR_VAR 0 1
39634: PUSH
39635: LD_INT 22
39637: PUSH
39638: LD_OWVAR 2
39642: PUSH
39643: EMPTY
39644: LIST
39645: LIST
39646: PUSH
39647: LD_INT 2
39649: PUSH
39650: LD_INT 30
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 30
39662: PUSH
39663: LD_INT 1
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: LIST
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PPUSH
39679: CALL_OW 69
39683: ST_TO_ADDR
// if not depot then
39684: LD_VAR 0 1
39688: NOT
39689: IFFALSE 39693
// exit ;
39691: GO 39728
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
39693: LD_VAR 0 1
39697: PUSH
39698: LD_INT 1
39700: ARRAY
39701: PPUSH
39702: CALL_OW 250
39706: PPUSH
39707: LD_VAR 0 1
39711: PUSH
39712: LD_INT 1
39714: ARRAY
39715: PPUSH
39716: CALL_OW 251
39720: PPUSH
39721: LD_INT 70
39723: PPUSH
39724: CALL_OW 495
// end ;
39728: PPOPN 1
39730: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
39731: LD_EXP 72
39735: PUSH
39736: LD_EXP 106
39740: AND
39741: IFFALSE 39952
39743: GO 39745
39745: DISABLE
39746: LD_INT 0
39748: PPUSH
39749: PPUSH
39750: PPUSH
39751: PPUSH
39752: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
39753: LD_ADDR_VAR 0 5
39757: PUSH
39758: LD_INT 22
39760: PUSH
39761: LD_OWVAR 2
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 21
39772: PUSH
39773: LD_INT 1
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: EMPTY
39781: LIST
39782: LIST
39783: PPUSH
39784: CALL_OW 69
39788: ST_TO_ADDR
// if not tmp then
39789: LD_VAR 0 5
39793: NOT
39794: IFFALSE 39798
// exit ;
39796: GO 39952
// for i in tmp do
39798: LD_ADDR_VAR 0 1
39802: PUSH
39803: LD_VAR 0 5
39807: PUSH
39808: FOR_IN
39809: IFFALSE 39950
// begin d := rand ( 0 , 5 ) ;
39811: LD_ADDR_VAR 0 4
39815: PUSH
39816: LD_INT 0
39818: PPUSH
39819: LD_INT 5
39821: PPUSH
39822: CALL_OW 12
39826: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
39827: LD_ADDR_VAR 0 2
39831: PUSH
39832: LD_VAR 0 1
39836: PPUSH
39837: CALL_OW 250
39841: PPUSH
39842: LD_VAR 0 4
39846: PPUSH
39847: LD_INT 3
39849: PPUSH
39850: LD_INT 12
39852: PPUSH
39853: CALL_OW 12
39857: PPUSH
39858: CALL_OW 272
39862: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
39863: LD_ADDR_VAR 0 3
39867: PUSH
39868: LD_VAR 0 1
39872: PPUSH
39873: CALL_OW 251
39877: PPUSH
39878: LD_VAR 0 4
39882: PPUSH
39883: LD_INT 3
39885: PPUSH
39886: LD_INT 12
39888: PPUSH
39889: CALL_OW 12
39893: PPUSH
39894: CALL_OW 273
39898: ST_TO_ADDR
// if ValidHex ( x , y ) then
39899: LD_VAR 0 2
39903: PPUSH
39904: LD_VAR 0 3
39908: PPUSH
39909: CALL_OW 488
39913: IFFALSE 39948
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
39915: LD_VAR 0 1
39919: PPUSH
39920: LD_VAR 0 2
39924: PPUSH
39925: LD_VAR 0 3
39929: PPUSH
39930: LD_INT 3
39932: PPUSH
39933: LD_INT 6
39935: PPUSH
39936: CALL_OW 12
39940: PPUSH
39941: LD_INT 1
39943: PPUSH
39944: CALL_OW 483
// end ;
39948: GO 39808
39950: POP
39951: POP
// end ;
39952: PPOPN 5
39954: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
39955: LD_EXP 72
39959: PUSH
39960: LD_EXP 107
39964: AND
39965: IFFALSE 40059
39967: GO 39969
39969: DISABLE
39970: LD_INT 0
39972: PPUSH
39973: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
39974: LD_ADDR_VAR 0 2
39978: PUSH
39979: LD_INT 22
39981: PUSH
39982: LD_OWVAR 2
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 32
39993: PUSH
39994: LD_INT 1
39996: PUSH
39997: EMPTY
39998: LIST
39999: LIST
40000: PUSH
40001: LD_INT 21
40003: PUSH
40004: LD_INT 2
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: LIST
40015: PPUSH
40016: CALL_OW 69
40020: ST_TO_ADDR
// if not tmp then
40021: LD_VAR 0 2
40025: NOT
40026: IFFALSE 40030
// exit ;
40028: GO 40059
// for i in tmp do
40030: LD_ADDR_VAR 0 1
40034: PUSH
40035: LD_VAR 0 2
40039: PUSH
40040: FOR_IN
40041: IFFALSE 40057
// SetFuel ( i , 0 ) ;
40043: LD_VAR 0 1
40047: PPUSH
40048: LD_INT 0
40050: PPUSH
40051: CALL_OW 240
40055: GO 40040
40057: POP
40058: POP
// end ;
40059: PPOPN 2
40061: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
40062: LD_EXP 72
40066: PUSH
40067: LD_EXP 108
40071: AND
40072: IFFALSE 40138
40074: GO 40076
40076: DISABLE
40077: LD_INT 0
40079: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
40080: LD_ADDR_VAR 0 1
40084: PUSH
40085: LD_INT 22
40087: PUSH
40088: LD_OWVAR 2
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 30
40099: PUSH
40100: LD_INT 29
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PPUSH
40111: CALL_OW 69
40115: ST_TO_ADDR
// if not tmp then
40116: LD_VAR 0 1
40120: NOT
40121: IFFALSE 40125
// exit ;
40123: GO 40138
// DestroyUnit ( tmp [ 1 ] ) ;
40125: LD_VAR 0 1
40129: PUSH
40130: LD_INT 1
40132: ARRAY
40133: PPUSH
40134: CALL_OW 65
// end ;
40138: PPOPN 1
40140: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
40141: LD_EXP 72
40145: PUSH
40146: LD_EXP 110
40150: AND
40151: IFFALSE 40280
40153: GO 40155
40155: DISABLE
40156: LD_INT 0
40158: PPUSH
// begin uc_side := 0 ;
40159: LD_ADDR_OWVAR 20
40163: PUSH
40164: LD_INT 0
40166: ST_TO_ADDR
// uc_nation := nation_arabian ;
40167: LD_ADDR_OWVAR 21
40171: PUSH
40172: LD_INT 2
40174: ST_TO_ADDR
// hc_gallery :=  ;
40175: LD_ADDR_OWVAR 33
40179: PUSH
40180: LD_STRING 
40182: ST_TO_ADDR
// hc_name :=  ;
40183: LD_ADDR_OWVAR 26
40187: PUSH
40188: LD_STRING 
40190: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
40191: LD_INT 1
40193: PPUSH
40194: LD_INT 11
40196: PPUSH
40197: LD_INT 10
40199: PPUSH
40200: CALL_OW 380
// un := CreateHuman ;
40204: LD_ADDR_VAR 0 1
40208: PUSH
40209: CALL_OW 44
40213: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
40214: LD_VAR 0 1
40218: PPUSH
40219: LD_INT 1
40221: PPUSH
40222: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
40226: LD_INT 35
40228: PPUSH
40229: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
40233: LD_VAR 0 1
40237: PPUSH
40238: LD_INT 22
40240: PUSH
40241: LD_OWVAR 2
40245: PUSH
40246: EMPTY
40247: LIST
40248: LIST
40249: PPUSH
40250: CALL_OW 69
40254: PPUSH
40255: LD_VAR 0 1
40259: PPUSH
40260: CALL_OW 74
40264: PPUSH
40265: CALL_OW 115
// until IsDead ( un ) ;
40269: LD_VAR 0 1
40273: PPUSH
40274: CALL_OW 301
40278: IFFALSE 40226
// end ;
40280: PPOPN 1
40282: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
40283: LD_EXP 72
40287: PUSH
40288: LD_EXP 112
40292: AND
40293: IFFALSE 40305
40295: GO 40297
40297: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
40298: LD_STRING earthquake(getX(game), 0, 32)
40300: PPUSH
40301: CALL_OW 559
40305: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
40306: LD_EXP 72
40310: PUSH
40311: LD_EXP 113
40315: AND
40316: IFFALSE 40407
40318: GO 40320
40320: DISABLE
40321: LD_INT 0
40323: PPUSH
// begin enable ;
40324: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
40325: LD_ADDR_VAR 0 1
40329: PUSH
40330: LD_INT 22
40332: PUSH
40333: LD_OWVAR 2
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 21
40344: PUSH
40345: LD_INT 2
40347: PUSH
40348: EMPTY
40349: LIST
40350: LIST
40351: PUSH
40352: LD_INT 33
40354: PUSH
40355: LD_INT 3
40357: PUSH
40358: EMPTY
40359: LIST
40360: LIST
40361: PUSH
40362: EMPTY
40363: LIST
40364: LIST
40365: LIST
40366: PPUSH
40367: CALL_OW 69
40371: ST_TO_ADDR
// if not tmp then
40372: LD_VAR 0 1
40376: NOT
40377: IFFALSE 40381
// exit ;
40379: GO 40407
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
40381: LD_VAR 0 1
40385: PUSH
40386: LD_INT 1
40388: PPUSH
40389: LD_VAR 0 1
40393: PPUSH
40394: CALL_OW 12
40398: ARRAY
40399: PPUSH
40400: LD_INT 1
40402: PPUSH
40403: CALL_OW 234
// end ;
40407: PPOPN 1
40409: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
40410: LD_EXP 72
40414: PUSH
40415: LD_EXP 114
40419: AND
40420: IFFALSE 40561
40422: GO 40424
40424: DISABLE
40425: LD_INT 0
40427: PPUSH
40428: PPUSH
40429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40430: LD_ADDR_VAR 0 3
40434: PUSH
40435: LD_INT 22
40437: PUSH
40438: LD_OWVAR 2
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 25
40449: PUSH
40450: LD_INT 1
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PPUSH
40461: CALL_OW 69
40465: ST_TO_ADDR
// if not tmp then
40466: LD_VAR 0 3
40470: NOT
40471: IFFALSE 40475
// exit ;
40473: GO 40561
// un := tmp [ rand ( 1 , tmp ) ] ;
40475: LD_ADDR_VAR 0 2
40479: PUSH
40480: LD_VAR 0 3
40484: PUSH
40485: LD_INT 1
40487: PPUSH
40488: LD_VAR 0 3
40492: PPUSH
40493: CALL_OW 12
40497: ARRAY
40498: ST_TO_ADDR
// if Crawls ( un ) then
40499: LD_VAR 0 2
40503: PPUSH
40504: CALL_OW 318
40508: IFFALSE 40519
// ComWalk ( un ) ;
40510: LD_VAR 0 2
40514: PPUSH
40515: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
40519: LD_VAR 0 2
40523: PPUSH
40524: LD_INT 9
40526: PPUSH
40527: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
40531: LD_INT 28
40533: PPUSH
40534: LD_OWVAR 2
40538: PPUSH
40539: LD_INT 2
40541: PPUSH
40542: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
40546: LD_INT 29
40548: PPUSH
40549: LD_OWVAR 2
40553: PPUSH
40554: LD_INT 2
40556: PPUSH
40557: CALL_OW 322
// end ;
40561: PPOPN 3
40563: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
40564: LD_EXP 72
40568: PUSH
40569: LD_EXP 115
40573: AND
40574: IFFALSE 40685
40576: GO 40578
40578: DISABLE
40579: LD_INT 0
40581: PPUSH
40582: PPUSH
40583: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
40584: LD_ADDR_VAR 0 3
40588: PUSH
40589: LD_INT 22
40591: PUSH
40592: LD_OWVAR 2
40596: PUSH
40597: EMPTY
40598: LIST
40599: LIST
40600: PUSH
40601: LD_INT 25
40603: PUSH
40604: LD_INT 1
40606: PUSH
40607: EMPTY
40608: LIST
40609: LIST
40610: PUSH
40611: EMPTY
40612: LIST
40613: LIST
40614: PPUSH
40615: CALL_OW 69
40619: ST_TO_ADDR
// if not tmp then
40620: LD_VAR 0 3
40624: NOT
40625: IFFALSE 40629
// exit ;
40627: GO 40685
// un := tmp [ rand ( 1 , tmp ) ] ;
40629: LD_ADDR_VAR 0 2
40633: PUSH
40634: LD_VAR 0 3
40638: PUSH
40639: LD_INT 1
40641: PPUSH
40642: LD_VAR 0 3
40646: PPUSH
40647: CALL_OW 12
40651: ARRAY
40652: ST_TO_ADDR
// if Crawls ( un ) then
40653: LD_VAR 0 2
40657: PPUSH
40658: CALL_OW 318
40662: IFFALSE 40673
// ComWalk ( un ) ;
40664: LD_VAR 0 2
40668: PPUSH
40669: CALL_OW 138
// SetClass ( un , class_mortar ) ;
40673: LD_VAR 0 2
40677: PPUSH
40678: LD_INT 8
40680: PPUSH
40681: CALL_OW 336
// end ;
40685: PPOPN 3
40687: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
40688: LD_EXP 72
40692: PUSH
40693: LD_EXP 116
40697: AND
40698: IFFALSE 40842
40700: GO 40702
40702: DISABLE
40703: LD_INT 0
40705: PPUSH
40706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
40707: LD_ADDR_VAR 0 2
40711: PUSH
40712: LD_INT 22
40714: PUSH
40715: LD_OWVAR 2
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 21
40726: PUSH
40727: LD_INT 2
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 2
40736: PUSH
40737: LD_INT 34
40739: PUSH
40740: LD_INT 12
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 34
40749: PUSH
40750: LD_INT 51
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 34
40759: PUSH
40760: LD_INT 32
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: LIST
40771: LIST
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: LIST
40777: PPUSH
40778: CALL_OW 69
40782: ST_TO_ADDR
// if not tmp then
40783: LD_VAR 0 2
40787: NOT
40788: IFFALSE 40792
// exit ;
40790: GO 40842
// for i in tmp do
40792: LD_ADDR_VAR 0 1
40796: PUSH
40797: LD_VAR 0 2
40801: PUSH
40802: FOR_IN
40803: IFFALSE 40840
// if GetCargo ( i , mat_artifact ) = 0 then
40805: LD_VAR 0 1
40809: PPUSH
40810: LD_INT 4
40812: PPUSH
40813: CALL_OW 289
40817: PUSH
40818: LD_INT 0
40820: EQUAL
40821: IFFALSE 40838
// SetCargo ( i , mat_siberit , 100 ) ;
40823: LD_VAR 0 1
40827: PPUSH
40828: LD_INT 3
40830: PPUSH
40831: LD_INT 100
40833: PPUSH
40834: CALL_OW 290
40838: GO 40802
40840: POP
40841: POP
// end ;
40842: PPOPN 2
40844: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
40845: LD_EXP 72
40849: PUSH
40850: LD_EXP 117
40854: AND
40855: IFFALSE 41038
40857: GO 40859
40859: DISABLE
40860: LD_INT 0
40862: PPUSH
40863: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
40864: LD_ADDR_VAR 0 2
40868: PUSH
40869: LD_INT 22
40871: PUSH
40872: LD_OWVAR 2
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PPUSH
40881: CALL_OW 69
40885: ST_TO_ADDR
// if not tmp then
40886: LD_VAR 0 2
40890: NOT
40891: IFFALSE 40895
// exit ;
40893: GO 41038
// for i := 1 to 2 do
40895: LD_ADDR_VAR 0 1
40899: PUSH
40900: DOUBLE
40901: LD_INT 1
40903: DEC
40904: ST_TO_ADDR
40905: LD_INT 2
40907: PUSH
40908: FOR_TO
40909: IFFALSE 41036
// begin uc_side := your_side ;
40911: LD_ADDR_OWVAR 20
40915: PUSH
40916: LD_OWVAR 2
40920: ST_TO_ADDR
// uc_nation := nation_american ;
40921: LD_ADDR_OWVAR 21
40925: PUSH
40926: LD_INT 1
40928: ST_TO_ADDR
// vc_chassis := us_morphling ;
40929: LD_ADDR_OWVAR 37
40933: PUSH
40934: LD_INT 5
40936: ST_TO_ADDR
// vc_engine := engine_siberite ;
40937: LD_ADDR_OWVAR 39
40941: PUSH
40942: LD_INT 3
40944: ST_TO_ADDR
// vc_control := control_computer ;
40945: LD_ADDR_OWVAR 38
40949: PUSH
40950: LD_INT 3
40952: ST_TO_ADDR
// vc_weapon := us_double_laser ;
40953: LD_ADDR_OWVAR 40
40957: PUSH
40958: LD_INT 10
40960: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
40961: LD_VAR 0 2
40965: PUSH
40966: LD_INT 1
40968: ARRAY
40969: PPUSH
40970: CALL_OW 310
40974: NOT
40975: IFFALSE 41022
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
40977: CALL_OW 45
40981: PPUSH
40982: LD_VAR 0 2
40986: PUSH
40987: LD_INT 1
40989: ARRAY
40990: PPUSH
40991: CALL_OW 250
40995: PPUSH
40996: LD_VAR 0 2
41000: PUSH
41001: LD_INT 1
41003: ARRAY
41004: PPUSH
41005: CALL_OW 251
41009: PPUSH
41010: LD_INT 12
41012: PPUSH
41013: LD_INT 1
41015: PPUSH
41016: CALL_OW 50
41020: GO 41034
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
41022: CALL_OW 45
41026: PPUSH
41027: LD_INT 1
41029: PPUSH
41030: CALL_OW 51
// end ;
41034: GO 40908
41036: POP
41037: POP
// end ;
41038: PPOPN 2
41040: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
41041: LD_EXP 72
41045: PUSH
41046: LD_EXP 118
41050: AND
41051: IFFALSE 41273
41053: GO 41055
41055: DISABLE
41056: LD_INT 0
41058: PPUSH
41059: PPUSH
41060: PPUSH
41061: PPUSH
41062: PPUSH
41063: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
41064: LD_ADDR_VAR 0 6
41068: PUSH
41069: LD_INT 22
41071: PUSH
41072: LD_OWVAR 2
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 21
41083: PUSH
41084: LD_INT 1
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: LD_INT 3
41093: PUSH
41094: LD_INT 23
41096: PUSH
41097: LD_INT 0
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: EMPTY
41105: LIST
41106: LIST
41107: PUSH
41108: EMPTY
41109: LIST
41110: LIST
41111: LIST
41112: PPUSH
41113: CALL_OW 69
41117: ST_TO_ADDR
// if not tmp then
41118: LD_VAR 0 6
41122: NOT
41123: IFFALSE 41127
// exit ;
41125: GO 41273
// s1 := rand ( 1 , 4 ) ;
41127: LD_ADDR_VAR 0 2
41131: PUSH
41132: LD_INT 1
41134: PPUSH
41135: LD_INT 4
41137: PPUSH
41138: CALL_OW 12
41142: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
41143: LD_ADDR_VAR 0 4
41147: PUSH
41148: LD_VAR 0 6
41152: PUSH
41153: LD_INT 1
41155: ARRAY
41156: PPUSH
41157: LD_VAR 0 2
41161: PPUSH
41162: CALL_OW 259
41166: ST_TO_ADDR
// if s1 = 1 then
41167: LD_VAR 0 2
41171: PUSH
41172: LD_INT 1
41174: EQUAL
41175: IFFALSE 41195
// s2 := rand ( 2 , 4 ) else
41177: LD_ADDR_VAR 0 3
41181: PUSH
41182: LD_INT 2
41184: PPUSH
41185: LD_INT 4
41187: PPUSH
41188: CALL_OW 12
41192: ST_TO_ADDR
41193: GO 41203
// s2 := 1 ;
41195: LD_ADDR_VAR 0 3
41199: PUSH
41200: LD_INT 1
41202: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
41203: LD_ADDR_VAR 0 5
41207: PUSH
41208: LD_VAR 0 6
41212: PUSH
41213: LD_INT 1
41215: ARRAY
41216: PPUSH
41217: LD_VAR 0 3
41221: PPUSH
41222: CALL_OW 259
41226: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
41227: LD_VAR 0 6
41231: PUSH
41232: LD_INT 1
41234: ARRAY
41235: PPUSH
41236: LD_VAR 0 2
41240: PPUSH
41241: LD_VAR 0 5
41245: PPUSH
41246: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
41250: LD_VAR 0 6
41254: PUSH
41255: LD_INT 1
41257: ARRAY
41258: PPUSH
41259: LD_VAR 0 3
41263: PPUSH
41264: LD_VAR 0 4
41268: PPUSH
41269: CALL_OW 237
// end ;
41273: PPOPN 6
41275: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
41276: LD_EXP 72
41280: PUSH
41281: LD_EXP 119
41285: AND
41286: IFFALSE 41365
41288: GO 41290
41290: DISABLE
41291: LD_INT 0
41293: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
41294: LD_ADDR_VAR 0 1
41298: PUSH
41299: LD_INT 22
41301: PUSH
41302: LD_OWVAR 2
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 30
41313: PUSH
41314: LD_INT 3
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PPUSH
41325: CALL_OW 69
41329: ST_TO_ADDR
// if not tmp then
41330: LD_VAR 0 1
41334: NOT
41335: IFFALSE 41339
// exit ;
41337: GO 41365
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
41339: LD_VAR 0 1
41343: PUSH
41344: LD_INT 1
41346: PPUSH
41347: LD_VAR 0 1
41351: PPUSH
41352: CALL_OW 12
41356: ARRAY
41357: PPUSH
41358: LD_INT 1
41360: PPUSH
41361: CALL_OW 234
// end ;
41365: PPOPN 1
41367: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
41368: LD_EXP 72
41372: PUSH
41373: LD_EXP 120
41377: AND
41378: IFFALSE 41490
41380: GO 41382
41382: DISABLE
41383: LD_INT 0
41385: PPUSH
41386: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
41387: LD_ADDR_VAR 0 2
41391: PUSH
41392: LD_INT 22
41394: PUSH
41395: LD_OWVAR 2
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 2
41406: PUSH
41407: LD_INT 30
41409: PUSH
41410: LD_INT 27
41412: PUSH
41413: EMPTY
41414: LIST
41415: LIST
41416: PUSH
41417: LD_INT 30
41419: PUSH
41420: LD_INT 26
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: PUSH
41427: LD_INT 30
41429: PUSH
41430: LD_INT 28
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: EMPTY
41438: LIST
41439: LIST
41440: LIST
41441: LIST
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PPUSH
41447: CALL_OW 69
41451: ST_TO_ADDR
// if not tmp then
41452: LD_VAR 0 2
41456: NOT
41457: IFFALSE 41461
// exit ;
41459: GO 41490
// for i in tmp do
41461: LD_ADDR_VAR 0 1
41465: PUSH
41466: LD_VAR 0 2
41470: PUSH
41471: FOR_IN
41472: IFFALSE 41488
// SetLives ( i , 1 ) ;
41474: LD_VAR 0 1
41478: PPUSH
41479: LD_INT 1
41481: PPUSH
41482: CALL_OW 234
41486: GO 41471
41488: POP
41489: POP
// end ;
41490: PPOPN 2
41492: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
41493: LD_EXP 72
41497: PUSH
41498: LD_EXP 121
41502: AND
41503: IFFALSE 41790
41505: GO 41507
41507: DISABLE
41508: LD_INT 0
41510: PPUSH
41511: PPUSH
41512: PPUSH
// begin i := rand ( 1 , 7 ) ;
41513: LD_ADDR_VAR 0 1
41517: PUSH
41518: LD_INT 1
41520: PPUSH
41521: LD_INT 7
41523: PPUSH
41524: CALL_OW 12
41528: ST_TO_ADDR
// case i of 1 :
41529: LD_VAR 0 1
41533: PUSH
41534: LD_INT 1
41536: DOUBLE
41537: EQUAL
41538: IFTRUE 41542
41540: GO 41552
41542: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
41543: LD_STRING earthquake(getX(game), 0, 32)
41545: PPUSH
41546: CALL_OW 559
41550: GO 41790
41552: LD_INT 2
41554: DOUBLE
41555: EQUAL
41556: IFTRUE 41560
41558: GO 41574
41560: POP
// begin ToLua ( displayStucuk(); ) ;
41561: LD_STRING displayStucuk();
41563: PPUSH
41564: CALL_OW 559
// ResetFog ;
41568: CALL_OW 335
// end ; 3 :
41572: GO 41790
41574: LD_INT 3
41576: DOUBLE
41577: EQUAL
41578: IFTRUE 41582
41580: GO 41686
41582: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
41583: LD_ADDR_VAR 0 2
41587: PUSH
41588: LD_INT 22
41590: PUSH
41591: LD_OWVAR 2
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 25
41602: PUSH
41603: LD_INT 1
41605: PUSH
41606: EMPTY
41607: LIST
41608: LIST
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PPUSH
41614: CALL_OW 69
41618: ST_TO_ADDR
// if not tmp then
41619: LD_VAR 0 2
41623: NOT
41624: IFFALSE 41628
// exit ;
41626: GO 41790
// un := tmp [ rand ( 1 , tmp ) ] ;
41628: LD_ADDR_VAR 0 3
41632: PUSH
41633: LD_VAR 0 2
41637: PUSH
41638: LD_INT 1
41640: PPUSH
41641: LD_VAR 0 2
41645: PPUSH
41646: CALL_OW 12
41650: ARRAY
41651: ST_TO_ADDR
// if Crawls ( un ) then
41652: LD_VAR 0 3
41656: PPUSH
41657: CALL_OW 318
41661: IFFALSE 41672
// ComWalk ( un ) ;
41663: LD_VAR 0 3
41667: PPUSH
41668: CALL_OW 138
// SetClass ( un , class_mortar ) ;
41672: LD_VAR 0 3
41676: PPUSH
41677: LD_INT 8
41679: PPUSH
41680: CALL_OW 336
// end ; 4 :
41684: GO 41790
41686: LD_INT 4
41688: DOUBLE
41689: EQUAL
41690: IFTRUE 41694
41692: GO 41768
41694: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
41695: LD_ADDR_VAR 0 2
41699: PUSH
41700: LD_INT 22
41702: PUSH
41703: LD_OWVAR 2
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 30
41714: PUSH
41715: LD_INT 29
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PPUSH
41726: CALL_OW 69
41730: ST_TO_ADDR
// if not tmp then
41731: LD_VAR 0 2
41735: NOT
41736: IFFALSE 41740
// exit ;
41738: GO 41790
// CenterNowOnUnits ( tmp [ 1 ] ) ;
41740: LD_VAR 0 2
41744: PUSH
41745: LD_INT 1
41747: ARRAY
41748: PPUSH
41749: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
41753: LD_VAR 0 2
41757: PUSH
41758: LD_INT 1
41760: ARRAY
41761: PPUSH
41762: CALL_OW 65
// end ; 5 .. 7 :
41766: GO 41790
41768: LD_INT 5
41770: DOUBLE
41771: GREATEREQUAL
41772: IFFALSE 41780
41774: LD_INT 7
41776: DOUBLE
41777: LESSEQUAL
41778: IFTRUE 41782
41780: GO 41789
41782: POP
// StreamSibBomb ; end ;
41783: CALL 38027 0 0
41787: GO 41790
41789: POP
// end ;
41790: PPOPN 3
41792: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
41793: LD_EXP 72
41797: PUSH
41798: LD_EXP 122
41802: AND
41803: IFFALSE 41959
41805: GO 41807
41807: DISABLE
41808: LD_INT 0
41810: PPUSH
41811: PPUSH
41812: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
41813: LD_ADDR_VAR 0 2
41817: PUSH
41818: LD_INT 81
41820: PUSH
41821: LD_OWVAR 2
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 2
41832: PUSH
41833: LD_INT 21
41835: PUSH
41836: LD_INT 1
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 21
41845: PUSH
41846: LD_INT 2
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: LIST
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PPUSH
41862: CALL_OW 69
41866: ST_TO_ADDR
// if not tmp then
41867: LD_VAR 0 2
41871: NOT
41872: IFFALSE 41876
// exit ;
41874: GO 41959
// p := 0 ;
41876: LD_ADDR_VAR 0 3
41880: PUSH
41881: LD_INT 0
41883: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
41884: LD_INT 35
41886: PPUSH
41887: CALL_OW 67
// p := p + 1 ;
41891: LD_ADDR_VAR 0 3
41895: PUSH
41896: LD_VAR 0 3
41900: PUSH
41901: LD_INT 1
41903: PLUS
41904: ST_TO_ADDR
// for i in tmp do
41905: LD_ADDR_VAR 0 1
41909: PUSH
41910: LD_VAR 0 2
41914: PUSH
41915: FOR_IN
41916: IFFALSE 41947
// if GetLives ( i ) < 1000 then
41918: LD_VAR 0 1
41922: PPUSH
41923: CALL_OW 256
41927: PUSH
41928: LD_INT 1000
41930: LESS
41931: IFFALSE 41945
// SetLives ( i , 1000 ) ;
41933: LD_VAR 0 1
41937: PPUSH
41938: LD_INT 1000
41940: PPUSH
41941: CALL_OW 234
41945: GO 41915
41947: POP
41948: POP
// until p > 20 ;
41949: LD_VAR 0 3
41953: PUSH
41954: LD_INT 20
41956: GREATER
41957: IFFALSE 41884
// end ;
41959: PPOPN 3
41961: END
// every 0 0$1 trigger StreamModeActive and sTime do
41962: LD_EXP 72
41966: PUSH
41967: LD_EXP 123
41971: AND
41972: IFFALSE 42007
41974: GO 41976
41976: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
41977: LD_INT 28
41979: PPUSH
41980: LD_OWVAR 2
41984: PPUSH
41985: LD_INT 2
41987: PPUSH
41988: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
41992: LD_INT 30
41994: PPUSH
41995: LD_OWVAR 2
41999: PPUSH
42000: LD_INT 2
42002: PPUSH
42003: CALL_OW 322
// end ;
42007: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
42008: LD_EXP 72
42012: PUSH
42013: LD_EXP 124
42017: AND
42018: IFFALSE 42139
42020: GO 42022
42022: DISABLE
42023: LD_INT 0
42025: PPUSH
42026: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
42027: LD_ADDR_VAR 0 2
42031: PUSH
42032: LD_INT 22
42034: PUSH
42035: LD_OWVAR 2
42039: PUSH
42040: EMPTY
42041: LIST
42042: LIST
42043: PUSH
42044: LD_INT 21
42046: PUSH
42047: LD_INT 1
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: PUSH
42054: LD_INT 3
42056: PUSH
42057: LD_INT 23
42059: PUSH
42060: LD_INT 0
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: EMPTY
42068: LIST
42069: LIST
42070: PUSH
42071: EMPTY
42072: LIST
42073: LIST
42074: LIST
42075: PPUSH
42076: CALL_OW 69
42080: ST_TO_ADDR
// if not tmp then
42081: LD_VAR 0 2
42085: NOT
42086: IFFALSE 42090
// exit ;
42088: GO 42139
// for i in tmp do
42090: LD_ADDR_VAR 0 1
42094: PUSH
42095: LD_VAR 0 2
42099: PUSH
42100: FOR_IN
42101: IFFALSE 42137
// begin if Crawls ( i ) then
42103: LD_VAR 0 1
42107: PPUSH
42108: CALL_OW 318
42112: IFFALSE 42123
// ComWalk ( i ) ;
42114: LD_VAR 0 1
42118: PPUSH
42119: CALL_OW 138
// SetClass ( i , 2 ) ;
42123: LD_VAR 0 1
42127: PPUSH
42128: LD_INT 2
42130: PPUSH
42131: CALL_OW 336
// end ;
42135: GO 42100
42137: POP
42138: POP
// end ;
42139: PPOPN 2
42141: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
42142: LD_EXP 72
42146: PUSH
42147: LD_EXP 125
42151: AND
42152: IFFALSE 42440
42154: GO 42156
42156: DISABLE
42157: LD_INT 0
42159: PPUSH
42160: PPUSH
42161: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
42162: LD_OWVAR 2
42166: PPUSH
42167: LD_INT 9
42169: PPUSH
42170: LD_INT 1
42172: PPUSH
42173: LD_INT 1
42175: PPUSH
42176: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
42180: LD_INT 9
42182: PPUSH
42183: LD_OWVAR 2
42187: PPUSH
42188: CALL_OW 343
// uc_side := 9 ;
42192: LD_ADDR_OWVAR 20
42196: PUSH
42197: LD_INT 9
42199: ST_TO_ADDR
// uc_nation := 2 ;
42200: LD_ADDR_OWVAR 21
42204: PUSH
42205: LD_INT 2
42207: ST_TO_ADDR
// hc_name := Dark Warrior ;
42208: LD_ADDR_OWVAR 26
42212: PUSH
42213: LD_STRING Dark Warrior
42215: ST_TO_ADDR
// hc_gallery :=  ;
42216: LD_ADDR_OWVAR 33
42220: PUSH
42221: LD_STRING 
42223: ST_TO_ADDR
// hc_noskilllimit := true ;
42224: LD_ADDR_OWVAR 76
42228: PUSH
42229: LD_INT 1
42231: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
42232: LD_ADDR_OWVAR 31
42236: PUSH
42237: LD_INT 30
42239: PUSH
42240: LD_INT 30
42242: PUSH
42243: LD_INT 30
42245: PUSH
42246: LD_INT 30
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: ST_TO_ADDR
// un := CreateHuman ;
42255: LD_ADDR_VAR 0 3
42259: PUSH
42260: CALL_OW 44
42264: ST_TO_ADDR
// hc_noskilllimit := false ;
42265: LD_ADDR_OWVAR 76
42269: PUSH
42270: LD_INT 0
42272: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
42273: LD_VAR 0 3
42277: PPUSH
42278: LD_INT 1
42280: PPUSH
42281: CALL_OW 51
// ToLua ( playRanger() ) ;
42285: LD_STRING playRanger()
42287: PPUSH
42288: CALL_OW 559
// p := 0 ;
42292: LD_ADDR_VAR 0 2
42296: PUSH
42297: LD_INT 0
42299: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
42300: LD_INT 35
42302: PPUSH
42303: CALL_OW 67
// p := p + 1 ;
42307: LD_ADDR_VAR 0 2
42311: PUSH
42312: LD_VAR 0 2
42316: PUSH
42317: LD_INT 1
42319: PLUS
42320: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
42321: LD_VAR 0 3
42325: PPUSH
42326: CALL_OW 256
42330: PUSH
42331: LD_INT 1000
42333: LESS
42334: IFFALSE 42348
// SetLives ( un , 1000 ) ;
42336: LD_VAR 0 3
42340: PPUSH
42341: LD_INT 1000
42343: PPUSH
42344: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
42348: LD_VAR 0 3
42352: PPUSH
42353: LD_INT 81
42355: PUSH
42356: LD_OWVAR 2
42360: PUSH
42361: EMPTY
42362: LIST
42363: LIST
42364: PUSH
42365: LD_INT 91
42367: PUSH
42368: LD_VAR 0 3
42372: PUSH
42373: LD_INT 30
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: LIST
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PPUSH
42385: CALL_OW 69
42389: PPUSH
42390: LD_VAR 0 3
42394: PPUSH
42395: CALL_OW 74
42399: PPUSH
42400: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
42404: LD_VAR 0 2
42408: PUSH
42409: LD_INT 80
42411: GREATER
42412: PUSH
42413: LD_VAR 0 3
42417: PPUSH
42418: CALL_OW 301
42422: OR
42423: IFFALSE 42300
// if un then
42425: LD_VAR 0 3
42429: IFFALSE 42440
// RemoveUnit ( un ) ;
42431: LD_VAR 0 3
42435: PPUSH
42436: CALL_OW 64
// end ;
42440: PPOPN 3
42442: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
42443: LD_EXP 126
42447: IFFALSE 42563
42449: GO 42451
42451: DISABLE
42452: LD_INT 0
42454: PPUSH
42455: PPUSH
42456: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
42457: LD_ADDR_VAR 0 2
42461: PUSH
42462: LD_INT 81
42464: PUSH
42465: LD_OWVAR 2
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 21
42476: PUSH
42477: LD_INT 1
42479: PUSH
42480: EMPTY
42481: LIST
42482: LIST
42483: PUSH
42484: EMPTY
42485: LIST
42486: LIST
42487: PPUSH
42488: CALL_OW 69
42492: ST_TO_ADDR
// ToLua ( playComputer() ) ;
42493: LD_STRING playComputer()
42495: PPUSH
42496: CALL_OW 559
// if not tmp then
42500: LD_VAR 0 2
42504: NOT
42505: IFFALSE 42509
// exit ;
42507: GO 42563
// for i in tmp do
42509: LD_ADDR_VAR 0 1
42513: PUSH
42514: LD_VAR 0 2
42518: PUSH
42519: FOR_IN
42520: IFFALSE 42561
// for j := 1 to 4 do
42522: LD_ADDR_VAR 0 3
42526: PUSH
42527: DOUBLE
42528: LD_INT 1
42530: DEC
42531: ST_TO_ADDR
42532: LD_INT 4
42534: PUSH
42535: FOR_TO
42536: IFFALSE 42557
// SetSkill ( i , j , 10 ) ;
42538: LD_VAR 0 1
42542: PPUSH
42543: LD_VAR 0 3
42547: PPUSH
42548: LD_INT 10
42550: PPUSH
42551: CALL_OW 237
42555: GO 42535
42557: POP
42558: POP
42559: GO 42519
42561: POP
42562: POP
// end ;
42563: PPOPN 3
42565: END
// every 0 0$1 trigger s30 do var i , tmp ;
42566: LD_EXP 127
42570: IFFALSE 42639
42572: GO 42574
42574: DISABLE
42575: LD_INT 0
42577: PPUSH
42578: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42579: LD_ADDR_VAR 0 2
42583: PUSH
42584: LD_INT 22
42586: PUSH
42587: LD_OWVAR 2
42591: PUSH
42592: EMPTY
42593: LIST
42594: LIST
42595: PPUSH
42596: CALL_OW 69
42600: ST_TO_ADDR
// if not tmp then
42601: LD_VAR 0 2
42605: NOT
42606: IFFALSE 42610
// exit ;
42608: GO 42639
// for i in tmp do
42610: LD_ADDR_VAR 0 1
42614: PUSH
42615: LD_VAR 0 2
42619: PUSH
42620: FOR_IN
42621: IFFALSE 42637
// SetLives ( i , 300 ) ;
42623: LD_VAR 0 1
42627: PPUSH
42628: LD_INT 300
42630: PPUSH
42631: CALL_OW 234
42635: GO 42620
42637: POP
42638: POP
// end ;
42639: PPOPN 2
42641: END
// every 0 0$1 trigger s60 do var i , tmp ;
42642: LD_EXP 128
42646: IFFALSE 42715
42648: GO 42650
42650: DISABLE
42651: LD_INT 0
42653: PPUSH
42654: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
42655: LD_ADDR_VAR 0 2
42659: PUSH
42660: LD_INT 22
42662: PUSH
42663: LD_OWVAR 2
42667: PUSH
42668: EMPTY
42669: LIST
42670: LIST
42671: PPUSH
42672: CALL_OW 69
42676: ST_TO_ADDR
// if not tmp then
42677: LD_VAR 0 2
42681: NOT
42682: IFFALSE 42686
// exit ;
42684: GO 42715
// for i in tmp do
42686: LD_ADDR_VAR 0 1
42690: PUSH
42691: LD_VAR 0 2
42695: PUSH
42696: FOR_IN
42697: IFFALSE 42713
// SetLives ( i , 600 ) ;
42699: LD_VAR 0 1
42703: PPUSH
42704: LD_INT 600
42706: PPUSH
42707: CALL_OW 234
42711: GO 42696
42713: POP
42714: POP
// end ;
42715: PPOPN 2
42717: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
42718: LD_INT 0
42720: PPUSH
// case cmd of 301 :
42721: LD_VAR 0 1
42725: PUSH
42726: LD_INT 301
42728: DOUBLE
42729: EQUAL
42730: IFTRUE 42734
42732: GO 42766
42734: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
42735: LD_VAR 0 6
42739: PPUSH
42740: LD_VAR 0 7
42744: PPUSH
42745: LD_VAR 0 8
42749: PPUSH
42750: LD_VAR 0 4
42754: PPUSH
42755: LD_VAR 0 5
42759: PPUSH
42760: CALL 43967 0 5
42764: GO 42887
42766: LD_INT 302
42768: DOUBLE
42769: EQUAL
42770: IFTRUE 42774
42772: GO 42811
42774: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
42775: LD_VAR 0 6
42779: PPUSH
42780: LD_VAR 0 7
42784: PPUSH
42785: LD_VAR 0 8
42789: PPUSH
42790: LD_VAR 0 9
42794: PPUSH
42795: LD_VAR 0 4
42799: PPUSH
42800: LD_VAR 0 5
42804: PPUSH
42805: CALL 44058 0 6
42809: GO 42887
42811: LD_INT 303
42813: DOUBLE
42814: EQUAL
42815: IFTRUE 42819
42817: GO 42856
42819: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
42820: LD_VAR 0 6
42824: PPUSH
42825: LD_VAR 0 7
42829: PPUSH
42830: LD_VAR 0 8
42834: PPUSH
42835: LD_VAR 0 9
42839: PPUSH
42840: LD_VAR 0 4
42844: PPUSH
42845: LD_VAR 0 5
42849: PPUSH
42850: CALL 42892 0 6
42854: GO 42887
42856: LD_INT 304
42858: DOUBLE
42859: EQUAL
42860: IFTRUE 42864
42862: GO 42886
42864: POP
// hHackTeleport ( unit , x , y ) ; end ;
42865: LD_VAR 0 2
42869: PPUSH
42870: LD_VAR 0 4
42874: PPUSH
42875: LD_VAR 0 5
42879: PPUSH
42880: CALL 44651 0 3
42884: GO 42887
42886: POP
// end ;
42887: LD_VAR 0 12
42891: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
42892: LD_INT 0
42894: PPUSH
42895: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
42896: LD_VAR 0 1
42900: PUSH
42901: LD_INT 1
42903: LESS
42904: PUSH
42905: LD_VAR 0 1
42909: PUSH
42910: LD_INT 3
42912: GREATER
42913: OR
42914: PUSH
42915: LD_VAR 0 5
42919: PPUSH
42920: LD_VAR 0 6
42924: PPUSH
42925: CALL_OW 428
42929: OR
42930: IFFALSE 42934
// exit ;
42932: GO 43654
// uc_side := your_side ;
42934: LD_ADDR_OWVAR 20
42938: PUSH
42939: LD_OWVAR 2
42943: ST_TO_ADDR
// uc_nation := nation ;
42944: LD_ADDR_OWVAR 21
42948: PUSH
42949: LD_VAR 0 1
42953: ST_TO_ADDR
// bc_level = 1 ;
42954: LD_ADDR_OWVAR 43
42958: PUSH
42959: LD_INT 1
42961: ST_TO_ADDR
// case btype of 1 :
42962: LD_VAR 0 2
42966: PUSH
42967: LD_INT 1
42969: DOUBLE
42970: EQUAL
42971: IFTRUE 42975
42973: GO 42986
42975: POP
// bc_type := b_depot ; 2 :
42976: LD_ADDR_OWVAR 42
42980: PUSH
42981: LD_INT 0
42983: ST_TO_ADDR
42984: GO 43598
42986: LD_INT 2
42988: DOUBLE
42989: EQUAL
42990: IFTRUE 42994
42992: GO 43005
42994: POP
// bc_type := b_warehouse ; 3 :
42995: LD_ADDR_OWVAR 42
42999: PUSH
43000: LD_INT 1
43002: ST_TO_ADDR
43003: GO 43598
43005: LD_INT 3
43007: DOUBLE
43008: EQUAL
43009: IFTRUE 43013
43011: GO 43024
43013: POP
// bc_type := b_lab ; 4 .. 9 :
43014: LD_ADDR_OWVAR 42
43018: PUSH
43019: LD_INT 6
43021: ST_TO_ADDR
43022: GO 43598
43024: LD_INT 4
43026: DOUBLE
43027: GREATEREQUAL
43028: IFFALSE 43036
43030: LD_INT 9
43032: DOUBLE
43033: LESSEQUAL
43034: IFTRUE 43038
43036: GO 43090
43038: POP
// begin bc_type := b_lab_half ;
43039: LD_ADDR_OWVAR 42
43043: PUSH
43044: LD_INT 7
43046: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
43047: LD_ADDR_OWVAR 44
43051: PUSH
43052: LD_INT 10
43054: PUSH
43055: LD_INT 11
43057: PUSH
43058: LD_INT 12
43060: PUSH
43061: LD_INT 15
43063: PUSH
43064: LD_INT 14
43066: PUSH
43067: LD_INT 13
43069: PUSH
43070: EMPTY
43071: LIST
43072: LIST
43073: LIST
43074: LIST
43075: LIST
43076: LIST
43077: PUSH
43078: LD_VAR 0 2
43082: PUSH
43083: LD_INT 3
43085: MINUS
43086: ARRAY
43087: ST_TO_ADDR
// end ; 10 .. 13 :
43088: GO 43598
43090: LD_INT 10
43092: DOUBLE
43093: GREATEREQUAL
43094: IFFALSE 43102
43096: LD_INT 13
43098: DOUBLE
43099: LESSEQUAL
43100: IFTRUE 43104
43102: GO 43181
43104: POP
// begin bc_type := b_lab_full ;
43105: LD_ADDR_OWVAR 42
43109: PUSH
43110: LD_INT 8
43112: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
43113: LD_ADDR_OWVAR 44
43117: PUSH
43118: LD_INT 10
43120: PUSH
43121: LD_INT 12
43123: PUSH
43124: LD_INT 14
43126: PUSH
43127: LD_INT 13
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: LIST
43134: LIST
43135: PUSH
43136: LD_VAR 0 2
43140: PUSH
43141: LD_INT 9
43143: MINUS
43144: ARRAY
43145: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
43146: LD_ADDR_OWVAR 45
43150: PUSH
43151: LD_INT 11
43153: PUSH
43154: LD_INT 15
43156: PUSH
43157: LD_INT 12
43159: PUSH
43160: LD_INT 15
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: LIST
43167: LIST
43168: PUSH
43169: LD_VAR 0 2
43173: PUSH
43174: LD_INT 9
43176: MINUS
43177: ARRAY
43178: ST_TO_ADDR
// end ; 14 :
43179: GO 43598
43181: LD_INT 14
43183: DOUBLE
43184: EQUAL
43185: IFTRUE 43189
43187: GO 43200
43189: POP
// bc_type := b_workshop ; 15 :
43190: LD_ADDR_OWVAR 42
43194: PUSH
43195: LD_INT 2
43197: ST_TO_ADDR
43198: GO 43598
43200: LD_INT 15
43202: DOUBLE
43203: EQUAL
43204: IFTRUE 43208
43206: GO 43219
43208: POP
// bc_type := b_factory ; 16 :
43209: LD_ADDR_OWVAR 42
43213: PUSH
43214: LD_INT 3
43216: ST_TO_ADDR
43217: GO 43598
43219: LD_INT 16
43221: DOUBLE
43222: EQUAL
43223: IFTRUE 43227
43225: GO 43238
43227: POP
// bc_type := b_ext_gun ; 17 :
43228: LD_ADDR_OWVAR 42
43232: PUSH
43233: LD_INT 17
43235: ST_TO_ADDR
43236: GO 43598
43238: LD_INT 17
43240: DOUBLE
43241: EQUAL
43242: IFTRUE 43246
43244: GO 43274
43246: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
43247: LD_ADDR_OWVAR 42
43251: PUSH
43252: LD_INT 19
43254: PUSH
43255: LD_INT 23
43257: PUSH
43258: LD_INT 19
43260: PUSH
43261: EMPTY
43262: LIST
43263: LIST
43264: LIST
43265: PUSH
43266: LD_VAR 0 1
43270: ARRAY
43271: ST_TO_ADDR
43272: GO 43598
43274: LD_INT 18
43276: DOUBLE
43277: EQUAL
43278: IFTRUE 43282
43280: GO 43293
43282: POP
// bc_type := b_ext_radar ; 19 :
43283: LD_ADDR_OWVAR 42
43287: PUSH
43288: LD_INT 20
43290: ST_TO_ADDR
43291: GO 43598
43293: LD_INT 19
43295: DOUBLE
43296: EQUAL
43297: IFTRUE 43301
43299: GO 43312
43301: POP
// bc_type := b_ext_radio ; 20 :
43302: LD_ADDR_OWVAR 42
43306: PUSH
43307: LD_INT 22
43309: ST_TO_ADDR
43310: GO 43598
43312: LD_INT 20
43314: DOUBLE
43315: EQUAL
43316: IFTRUE 43320
43318: GO 43331
43320: POP
// bc_type := b_ext_siberium ; 21 :
43321: LD_ADDR_OWVAR 42
43325: PUSH
43326: LD_INT 21
43328: ST_TO_ADDR
43329: GO 43598
43331: LD_INT 21
43333: DOUBLE
43334: EQUAL
43335: IFTRUE 43339
43337: GO 43350
43339: POP
// bc_type := b_ext_computer ; 22 :
43340: LD_ADDR_OWVAR 42
43344: PUSH
43345: LD_INT 24
43347: ST_TO_ADDR
43348: GO 43598
43350: LD_INT 22
43352: DOUBLE
43353: EQUAL
43354: IFTRUE 43358
43356: GO 43369
43358: POP
// bc_type := b_ext_track ; 23 :
43359: LD_ADDR_OWVAR 42
43363: PUSH
43364: LD_INT 16
43366: ST_TO_ADDR
43367: GO 43598
43369: LD_INT 23
43371: DOUBLE
43372: EQUAL
43373: IFTRUE 43377
43375: GO 43388
43377: POP
// bc_type := b_ext_laser ; 24 :
43378: LD_ADDR_OWVAR 42
43382: PUSH
43383: LD_INT 25
43385: ST_TO_ADDR
43386: GO 43598
43388: LD_INT 24
43390: DOUBLE
43391: EQUAL
43392: IFTRUE 43396
43394: GO 43407
43396: POP
// bc_type := b_control_tower ; 25 :
43397: LD_ADDR_OWVAR 42
43401: PUSH
43402: LD_INT 36
43404: ST_TO_ADDR
43405: GO 43598
43407: LD_INT 25
43409: DOUBLE
43410: EQUAL
43411: IFTRUE 43415
43413: GO 43426
43415: POP
// bc_type := b_breastwork ; 26 :
43416: LD_ADDR_OWVAR 42
43420: PUSH
43421: LD_INT 31
43423: ST_TO_ADDR
43424: GO 43598
43426: LD_INT 26
43428: DOUBLE
43429: EQUAL
43430: IFTRUE 43434
43432: GO 43445
43434: POP
// bc_type := b_bunker ; 27 :
43435: LD_ADDR_OWVAR 42
43439: PUSH
43440: LD_INT 32
43442: ST_TO_ADDR
43443: GO 43598
43445: LD_INT 27
43447: DOUBLE
43448: EQUAL
43449: IFTRUE 43453
43451: GO 43464
43453: POP
// bc_type := b_turret ; 28 :
43454: LD_ADDR_OWVAR 42
43458: PUSH
43459: LD_INT 33
43461: ST_TO_ADDR
43462: GO 43598
43464: LD_INT 28
43466: DOUBLE
43467: EQUAL
43468: IFTRUE 43472
43470: GO 43483
43472: POP
// bc_type := b_armoury ; 29 :
43473: LD_ADDR_OWVAR 42
43477: PUSH
43478: LD_INT 4
43480: ST_TO_ADDR
43481: GO 43598
43483: LD_INT 29
43485: DOUBLE
43486: EQUAL
43487: IFTRUE 43491
43489: GO 43502
43491: POP
// bc_type := b_barracks ; 30 :
43492: LD_ADDR_OWVAR 42
43496: PUSH
43497: LD_INT 5
43499: ST_TO_ADDR
43500: GO 43598
43502: LD_INT 30
43504: DOUBLE
43505: EQUAL
43506: IFTRUE 43510
43508: GO 43521
43510: POP
// bc_type := b_solar_power ; 31 :
43511: LD_ADDR_OWVAR 42
43515: PUSH
43516: LD_INT 27
43518: ST_TO_ADDR
43519: GO 43598
43521: LD_INT 31
43523: DOUBLE
43524: EQUAL
43525: IFTRUE 43529
43527: GO 43540
43529: POP
// bc_type := b_oil_power ; 32 :
43530: LD_ADDR_OWVAR 42
43534: PUSH
43535: LD_INT 26
43537: ST_TO_ADDR
43538: GO 43598
43540: LD_INT 32
43542: DOUBLE
43543: EQUAL
43544: IFTRUE 43548
43546: GO 43559
43548: POP
// bc_type := b_siberite_power ; 33 :
43549: LD_ADDR_OWVAR 42
43553: PUSH
43554: LD_INT 28
43556: ST_TO_ADDR
43557: GO 43598
43559: LD_INT 33
43561: DOUBLE
43562: EQUAL
43563: IFTRUE 43567
43565: GO 43578
43567: POP
// bc_type := b_oil_mine ; 34 :
43568: LD_ADDR_OWVAR 42
43572: PUSH
43573: LD_INT 29
43575: ST_TO_ADDR
43576: GO 43598
43578: LD_INT 34
43580: DOUBLE
43581: EQUAL
43582: IFTRUE 43586
43584: GO 43597
43586: POP
// bc_type := b_siberite_mine ; end ;
43587: LD_ADDR_OWVAR 42
43591: PUSH
43592: LD_INT 30
43594: ST_TO_ADDR
43595: GO 43598
43597: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
43598: LD_ADDR_VAR 0 8
43602: PUSH
43603: LD_VAR 0 5
43607: PPUSH
43608: LD_VAR 0 6
43612: PPUSH
43613: LD_VAR 0 3
43617: PPUSH
43618: CALL_OW 47
43622: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
43623: LD_OWVAR 42
43627: PUSH
43628: LD_INT 32
43630: PUSH
43631: LD_INT 33
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: IN
43638: IFFALSE 43654
// PlaceWeaponTurret ( b , weapon ) ;
43640: LD_VAR 0 8
43644: PPUSH
43645: LD_VAR 0 4
43649: PPUSH
43650: CALL_OW 431
// end ;
43654: LD_VAR 0 7
43658: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
43659: LD_INT 0
43661: PPUSH
43662: PPUSH
43663: PPUSH
43664: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
43665: LD_ADDR_VAR 0 4
43669: PUSH
43670: LD_INT 22
43672: PUSH
43673: LD_OWVAR 2
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 2
43684: PUSH
43685: LD_INT 30
43687: PUSH
43688: LD_INT 0
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 30
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: EMPTY
43706: LIST
43707: LIST
43708: LIST
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PPUSH
43714: CALL_OW 69
43718: ST_TO_ADDR
// if not tmp then
43719: LD_VAR 0 4
43723: NOT
43724: IFFALSE 43728
// exit ;
43726: GO 43787
// for i in tmp do
43728: LD_ADDR_VAR 0 2
43732: PUSH
43733: LD_VAR 0 4
43737: PUSH
43738: FOR_IN
43739: IFFALSE 43785
// for j = 1 to 3 do
43741: LD_ADDR_VAR 0 3
43745: PUSH
43746: DOUBLE
43747: LD_INT 1
43749: DEC
43750: ST_TO_ADDR
43751: LD_INT 3
43753: PUSH
43754: FOR_TO
43755: IFFALSE 43781
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
43757: LD_VAR 0 2
43761: PPUSH
43762: CALL_OW 274
43766: PPUSH
43767: LD_VAR 0 3
43771: PPUSH
43772: LD_INT 99999
43774: PPUSH
43775: CALL_OW 277
43779: GO 43754
43781: POP
43782: POP
43783: GO 43738
43785: POP
43786: POP
// end ;
43787: LD_VAR 0 1
43791: RET
// export function hHackSetLevel10 ; var i , j ; begin
43792: LD_INT 0
43794: PPUSH
43795: PPUSH
43796: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
43797: LD_ADDR_VAR 0 2
43801: PUSH
43802: LD_INT 21
43804: PUSH
43805: LD_INT 1
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PPUSH
43812: CALL_OW 69
43816: PUSH
43817: FOR_IN
43818: IFFALSE 43870
// if IsSelected ( i ) then
43820: LD_VAR 0 2
43824: PPUSH
43825: CALL_OW 306
43829: IFFALSE 43868
// begin for j := 1 to 4 do
43831: LD_ADDR_VAR 0 3
43835: PUSH
43836: DOUBLE
43837: LD_INT 1
43839: DEC
43840: ST_TO_ADDR
43841: LD_INT 4
43843: PUSH
43844: FOR_TO
43845: IFFALSE 43866
// SetSkill ( i , j , 10 ) ;
43847: LD_VAR 0 2
43851: PPUSH
43852: LD_VAR 0 3
43856: PPUSH
43857: LD_INT 10
43859: PPUSH
43860: CALL_OW 237
43864: GO 43844
43866: POP
43867: POP
// end ;
43868: GO 43817
43870: POP
43871: POP
// end ;
43872: LD_VAR 0 1
43876: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
43877: LD_INT 0
43879: PPUSH
43880: PPUSH
43881: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
43882: LD_ADDR_VAR 0 2
43886: PUSH
43887: LD_INT 22
43889: PUSH
43890: LD_OWVAR 2
43894: PUSH
43895: EMPTY
43896: LIST
43897: LIST
43898: PUSH
43899: LD_INT 21
43901: PUSH
43902: LD_INT 1
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PPUSH
43913: CALL_OW 69
43917: PUSH
43918: FOR_IN
43919: IFFALSE 43960
// begin for j := 1 to 4 do
43921: LD_ADDR_VAR 0 3
43925: PUSH
43926: DOUBLE
43927: LD_INT 1
43929: DEC
43930: ST_TO_ADDR
43931: LD_INT 4
43933: PUSH
43934: FOR_TO
43935: IFFALSE 43956
// SetSkill ( i , j , 10 ) ;
43937: LD_VAR 0 2
43941: PPUSH
43942: LD_VAR 0 3
43946: PPUSH
43947: LD_INT 10
43949: PPUSH
43950: CALL_OW 237
43954: GO 43934
43956: POP
43957: POP
// end ;
43958: GO 43918
43960: POP
43961: POP
// end ;
43962: LD_VAR 0 1
43966: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
43967: LD_INT 0
43969: PPUSH
// uc_side := your_side ;
43970: LD_ADDR_OWVAR 20
43974: PUSH
43975: LD_OWVAR 2
43979: ST_TO_ADDR
// uc_nation := nation ;
43980: LD_ADDR_OWVAR 21
43984: PUSH
43985: LD_VAR 0 1
43989: ST_TO_ADDR
// InitHc ;
43990: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
43994: LD_INT 0
43996: PPUSH
43997: LD_VAR 0 2
44001: PPUSH
44002: LD_VAR 0 3
44006: PPUSH
44007: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
44011: LD_VAR 0 4
44015: PPUSH
44016: LD_VAR 0 5
44020: PPUSH
44021: CALL_OW 428
44025: PUSH
44026: LD_INT 0
44028: EQUAL
44029: IFFALSE 44053
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
44031: CALL_OW 44
44035: PPUSH
44036: LD_VAR 0 4
44040: PPUSH
44041: LD_VAR 0 5
44045: PPUSH
44046: LD_INT 1
44048: PPUSH
44049: CALL_OW 48
// end ;
44053: LD_VAR 0 6
44057: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
44058: LD_INT 0
44060: PPUSH
44061: PPUSH
// uc_side := your_side ;
44062: LD_ADDR_OWVAR 20
44066: PUSH
44067: LD_OWVAR 2
44071: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
44072: LD_VAR 0 1
44076: PUSH
44077: LD_INT 1
44079: PUSH
44080: LD_INT 2
44082: PUSH
44083: LD_INT 3
44085: PUSH
44086: LD_INT 4
44088: PUSH
44089: LD_INT 5
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: IN
44099: IFFALSE 44111
// uc_nation := nation_american else
44101: LD_ADDR_OWVAR 21
44105: PUSH
44106: LD_INT 1
44108: ST_TO_ADDR
44109: GO 44154
// if chassis in [ 11 , 12 , 13 , 14 ] then
44111: LD_VAR 0 1
44115: PUSH
44116: LD_INT 11
44118: PUSH
44119: LD_INT 12
44121: PUSH
44122: LD_INT 13
44124: PUSH
44125: LD_INT 14
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: LIST
44132: LIST
44133: IN
44134: IFFALSE 44146
// uc_nation := nation_arabian else
44136: LD_ADDR_OWVAR 21
44140: PUSH
44141: LD_INT 2
44143: ST_TO_ADDR
44144: GO 44154
// uc_nation := nation_russian ;
44146: LD_ADDR_OWVAR 21
44150: PUSH
44151: LD_INT 3
44153: ST_TO_ADDR
// vc_chassis := chassis ;
44154: LD_ADDR_OWVAR 37
44158: PUSH
44159: LD_VAR 0 1
44163: ST_TO_ADDR
// vc_engine := engine ;
44164: LD_ADDR_OWVAR 39
44168: PUSH
44169: LD_VAR 0 2
44173: ST_TO_ADDR
// vc_control := control ;
44174: LD_ADDR_OWVAR 38
44178: PUSH
44179: LD_VAR 0 3
44183: ST_TO_ADDR
// vc_weapon := weapon ;
44184: LD_ADDR_OWVAR 40
44188: PUSH
44189: LD_VAR 0 4
44193: ST_TO_ADDR
// un := CreateVehicle ;
44194: LD_ADDR_VAR 0 8
44198: PUSH
44199: CALL_OW 45
44203: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
44204: LD_VAR 0 8
44208: PPUSH
44209: LD_INT 0
44211: PPUSH
44212: LD_INT 5
44214: PPUSH
44215: CALL_OW 12
44219: PPUSH
44220: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
44224: LD_VAR 0 8
44228: PPUSH
44229: LD_VAR 0 5
44233: PPUSH
44234: LD_VAR 0 6
44238: PPUSH
44239: LD_INT 1
44241: PPUSH
44242: CALL_OW 48
// end ;
44246: LD_VAR 0 7
44250: RET
// export hInvincible ; every 1 do
44251: GO 44253
44253: DISABLE
// hInvincible := [ ] ;
44254: LD_ADDR_EXP 129
44258: PUSH
44259: EMPTY
44260: ST_TO_ADDR
44261: END
// every 10 do var i ;
44262: GO 44264
44264: DISABLE
44265: LD_INT 0
44267: PPUSH
// begin enable ;
44268: ENABLE
// if not hInvincible then
44269: LD_EXP 129
44273: NOT
44274: IFFALSE 44278
// exit ;
44276: GO 44322
// for i in hInvincible do
44278: LD_ADDR_VAR 0 1
44282: PUSH
44283: LD_EXP 129
44287: PUSH
44288: FOR_IN
44289: IFFALSE 44320
// if GetLives ( i ) < 1000 then
44291: LD_VAR 0 1
44295: PPUSH
44296: CALL_OW 256
44300: PUSH
44301: LD_INT 1000
44303: LESS
44304: IFFALSE 44318
// SetLives ( i , 1000 ) ;
44306: LD_VAR 0 1
44310: PPUSH
44311: LD_INT 1000
44313: PPUSH
44314: CALL_OW 234
44318: GO 44288
44320: POP
44321: POP
// end ;
44322: PPOPN 1
44324: END
// export function hHackInvincible ; var i ; begin
44325: LD_INT 0
44327: PPUSH
44328: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
44329: LD_ADDR_VAR 0 2
44333: PUSH
44334: LD_INT 2
44336: PUSH
44337: LD_INT 21
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 21
44349: PUSH
44350: LD_INT 2
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: LIST
44361: PPUSH
44362: CALL_OW 69
44366: PUSH
44367: FOR_IN
44368: IFFALSE 44429
// if IsSelected ( i ) then
44370: LD_VAR 0 2
44374: PPUSH
44375: CALL_OW 306
44379: IFFALSE 44427
// begin if i in hInvincible then
44381: LD_VAR 0 2
44385: PUSH
44386: LD_EXP 129
44390: IN
44391: IFFALSE 44411
// hInvincible := hInvincible diff i else
44393: LD_ADDR_EXP 129
44397: PUSH
44398: LD_EXP 129
44402: PUSH
44403: LD_VAR 0 2
44407: DIFF
44408: ST_TO_ADDR
44409: GO 44427
// hInvincible := hInvincible union i ;
44411: LD_ADDR_EXP 129
44415: PUSH
44416: LD_EXP 129
44420: PUSH
44421: LD_VAR 0 2
44425: UNION
44426: ST_TO_ADDR
// end ;
44427: GO 44367
44429: POP
44430: POP
// end ;
44431: LD_VAR 0 1
44435: RET
// export function hHackInvisible ; var i , j ; begin
44436: LD_INT 0
44438: PPUSH
44439: PPUSH
44440: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
44441: LD_ADDR_VAR 0 2
44445: PUSH
44446: LD_INT 21
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PPUSH
44456: CALL_OW 69
44460: PUSH
44461: FOR_IN
44462: IFFALSE 44486
// if IsSelected ( i ) then
44464: LD_VAR 0 2
44468: PPUSH
44469: CALL_OW 306
44473: IFFALSE 44484
// ComForceInvisible ( i ) ;
44475: LD_VAR 0 2
44479: PPUSH
44480: CALL_OW 496
44484: GO 44461
44486: POP
44487: POP
// end ;
44488: LD_VAR 0 1
44492: RET
// export function hHackChangeYourSide ; begin
44493: LD_INT 0
44495: PPUSH
// if your_side = 8 then
44496: LD_OWVAR 2
44500: PUSH
44501: LD_INT 8
44503: EQUAL
44504: IFFALSE 44516
// your_side := 0 else
44506: LD_ADDR_OWVAR 2
44510: PUSH
44511: LD_INT 0
44513: ST_TO_ADDR
44514: GO 44530
// your_side := your_side + 1 ;
44516: LD_ADDR_OWVAR 2
44520: PUSH
44521: LD_OWVAR 2
44525: PUSH
44526: LD_INT 1
44528: PLUS
44529: ST_TO_ADDR
// end ;
44530: LD_VAR 0 1
44534: RET
// export function hHackChangeUnitSide ; var i , j ; begin
44535: LD_INT 0
44537: PPUSH
44538: PPUSH
44539: PPUSH
// for i in all_units do
44540: LD_ADDR_VAR 0 2
44544: PUSH
44545: LD_OWVAR 3
44549: PUSH
44550: FOR_IN
44551: IFFALSE 44629
// if IsSelected ( i ) then
44553: LD_VAR 0 2
44557: PPUSH
44558: CALL_OW 306
44562: IFFALSE 44627
// begin j := GetSide ( i ) ;
44564: LD_ADDR_VAR 0 3
44568: PUSH
44569: LD_VAR 0 2
44573: PPUSH
44574: CALL_OW 255
44578: ST_TO_ADDR
// if j = 8 then
44579: LD_VAR 0 3
44583: PUSH
44584: LD_INT 8
44586: EQUAL
44587: IFFALSE 44599
// j := 0 else
44589: LD_ADDR_VAR 0 3
44593: PUSH
44594: LD_INT 0
44596: ST_TO_ADDR
44597: GO 44613
// j := j + 1 ;
44599: LD_ADDR_VAR 0 3
44603: PUSH
44604: LD_VAR 0 3
44608: PUSH
44609: LD_INT 1
44611: PLUS
44612: ST_TO_ADDR
// SetSide ( i , j ) ;
44613: LD_VAR 0 2
44617: PPUSH
44618: LD_VAR 0 3
44622: PPUSH
44623: CALL_OW 235
// end ;
44627: GO 44550
44629: POP
44630: POP
// end ;
44631: LD_VAR 0 1
44635: RET
// export function hHackFog ; begin
44636: LD_INT 0
44638: PPUSH
// FogOff ( true ) ;
44639: LD_INT 1
44641: PPUSH
44642: CALL_OW 344
// end ;
44646: LD_VAR 0 1
44650: RET
// export function hHackTeleport ( unit , x , y ) ; begin
44651: LD_INT 0
44653: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
44654: LD_VAR 0 1
44658: PPUSH
44659: LD_VAR 0 2
44663: PPUSH
44664: LD_VAR 0 3
44668: PPUSH
44669: LD_INT 1
44671: PPUSH
44672: LD_INT 1
44674: PPUSH
44675: CALL_OW 483
// CenterOnXY ( x , y ) ;
44679: LD_VAR 0 2
44683: PPUSH
44684: LD_VAR 0 3
44688: PPUSH
44689: CALL_OW 84
// end ;
44693: LD_VAR 0 4
44697: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
44698: LD_INT 0
44700: PPUSH
44701: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
44702: LD_VAR 0 1
44706: NOT
44707: PUSH
44708: LD_VAR 0 2
44712: PPUSH
44713: LD_VAR 0 3
44717: PPUSH
44718: CALL_OW 488
44722: NOT
44723: OR
44724: PUSH
44725: LD_VAR 0 1
44729: PPUSH
44730: CALL_OW 266
44734: PUSH
44735: LD_INT 3
44737: NONEQUAL
44738: PUSH
44739: LD_VAR 0 1
44743: PPUSH
44744: CALL_OW 247
44748: PUSH
44749: LD_INT 1
44751: EQUAL
44752: NOT
44753: AND
44754: OR
44755: IFFALSE 44759
// exit ;
44757: GO 44908
// if GetType ( factory ) = unit_human then
44759: LD_VAR 0 1
44763: PPUSH
44764: CALL_OW 247
44768: PUSH
44769: LD_INT 1
44771: EQUAL
44772: IFFALSE 44789
// factory := IsInUnit ( factory ) ;
44774: LD_ADDR_VAR 0 1
44778: PUSH
44779: LD_VAR 0 1
44783: PPUSH
44784: CALL_OW 310
44788: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
44789: LD_VAR 0 1
44793: PPUSH
44794: CALL_OW 266
44798: PUSH
44799: LD_INT 3
44801: NONEQUAL
44802: IFFALSE 44806
// exit ;
44804: GO 44908
// if HexInfo ( x , y ) = factory then
44806: LD_VAR 0 2
44810: PPUSH
44811: LD_VAR 0 3
44815: PPUSH
44816: CALL_OW 428
44820: PUSH
44821: LD_VAR 0 1
44825: EQUAL
44826: IFFALSE 44853
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
44828: LD_ADDR_EXP 130
44832: PUSH
44833: LD_EXP 130
44837: PPUSH
44838: LD_VAR 0 1
44842: PPUSH
44843: LD_INT 0
44845: PPUSH
44846: CALL_OW 1
44850: ST_TO_ADDR
44851: GO 44904
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
44853: LD_ADDR_EXP 130
44857: PUSH
44858: LD_EXP 130
44862: PPUSH
44863: LD_VAR 0 1
44867: PPUSH
44868: LD_VAR 0 1
44872: PPUSH
44873: CALL_OW 255
44877: PUSH
44878: LD_VAR 0 1
44882: PUSH
44883: LD_VAR 0 2
44887: PUSH
44888: LD_VAR 0 3
44892: PUSH
44893: EMPTY
44894: LIST
44895: LIST
44896: LIST
44897: LIST
44898: PPUSH
44899: CALL_OW 1
44903: ST_TO_ADDR
// UpdateFactoryWaypoints ;
44904: CALL 44913 0 0
// end ;
44908: LD_VAR 0 4
44912: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
44913: LD_INT 0
44915: PPUSH
44916: PPUSH
44917: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
44918: LD_STRING resetFactoryWaypoint();
44920: PPUSH
44921: CALL_OW 559
// if factoryWaypoints then
44925: LD_EXP 130
44929: IFFALSE 45055
// begin list := PrepareArray ( factoryWaypoints ) ;
44931: LD_ADDR_VAR 0 3
44935: PUSH
44936: LD_EXP 130
44940: PPUSH
44941: CALL 91524 0 1
44945: ST_TO_ADDR
// for i := 1 to list do
44946: LD_ADDR_VAR 0 2
44950: PUSH
44951: DOUBLE
44952: LD_INT 1
44954: DEC
44955: ST_TO_ADDR
44956: LD_VAR 0 3
44960: PUSH
44961: FOR_TO
44962: IFFALSE 45053
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
44964: LD_STRING setFactoryWaypointXY(
44966: PUSH
44967: LD_VAR 0 3
44971: PUSH
44972: LD_VAR 0 2
44976: ARRAY
44977: PUSH
44978: LD_INT 1
44980: ARRAY
44981: STR
44982: PUSH
44983: LD_STRING ,
44985: STR
44986: PUSH
44987: LD_VAR 0 3
44991: PUSH
44992: LD_VAR 0 2
44996: ARRAY
44997: PUSH
44998: LD_INT 2
45000: ARRAY
45001: STR
45002: PUSH
45003: LD_STRING ,
45005: STR
45006: PUSH
45007: LD_VAR 0 3
45011: PUSH
45012: LD_VAR 0 2
45016: ARRAY
45017: PUSH
45018: LD_INT 3
45020: ARRAY
45021: STR
45022: PUSH
45023: LD_STRING ,
45025: STR
45026: PUSH
45027: LD_VAR 0 3
45031: PUSH
45032: LD_VAR 0 2
45036: ARRAY
45037: PUSH
45038: LD_INT 4
45040: ARRAY
45041: STR
45042: PUSH
45043: LD_STRING )
45045: STR
45046: PPUSH
45047: CALL_OW 559
45051: GO 44961
45053: POP
45054: POP
// end ; end ;
45055: LD_VAR 0 1
45059: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
45060: LD_INT 0
45062: PPUSH
// if HexInfo ( x , y ) = warehouse then
45063: LD_VAR 0 2
45067: PPUSH
45068: LD_VAR 0 3
45072: PPUSH
45073: CALL_OW 428
45077: PUSH
45078: LD_VAR 0 1
45082: EQUAL
45083: IFFALSE 45110
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
45085: LD_ADDR_EXP 131
45089: PUSH
45090: LD_EXP 131
45094: PPUSH
45095: LD_VAR 0 1
45099: PPUSH
45100: LD_INT 0
45102: PPUSH
45103: CALL_OW 1
45107: ST_TO_ADDR
45108: GO 45161
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
45110: LD_ADDR_EXP 131
45114: PUSH
45115: LD_EXP 131
45119: PPUSH
45120: LD_VAR 0 1
45124: PPUSH
45125: LD_VAR 0 1
45129: PPUSH
45130: CALL_OW 255
45134: PUSH
45135: LD_VAR 0 1
45139: PUSH
45140: LD_VAR 0 2
45144: PUSH
45145: LD_VAR 0 3
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: LIST
45154: LIST
45155: PPUSH
45156: CALL_OW 1
45160: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
45161: CALL 45170 0 0
// end ;
45165: LD_VAR 0 4
45169: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
45170: LD_INT 0
45172: PPUSH
45173: PPUSH
45174: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
45175: LD_STRING resetWarehouseGatheringPoints();
45177: PPUSH
45178: CALL_OW 559
// if warehouseGatheringPoints then
45182: LD_EXP 131
45186: IFFALSE 45312
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
45188: LD_ADDR_VAR 0 3
45192: PUSH
45193: LD_EXP 131
45197: PPUSH
45198: CALL 91524 0 1
45202: ST_TO_ADDR
// for i := 1 to list do
45203: LD_ADDR_VAR 0 2
45207: PUSH
45208: DOUBLE
45209: LD_INT 1
45211: DEC
45212: ST_TO_ADDR
45213: LD_VAR 0 3
45217: PUSH
45218: FOR_TO
45219: IFFALSE 45310
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
45221: LD_STRING setWarehouseGatheringPointXY(
45223: PUSH
45224: LD_VAR 0 3
45228: PUSH
45229: LD_VAR 0 2
45233: ARRAY
45234: PUSH
45235: LD_INT 1
45237: ARRAY
45238: STR
45239: PUSH
45240: LD_STRING ,
45242: STR
45243: PUSH
45244: LD_VAR 0 3
45248: PUSH
45249: LD_VAR 0 2
45253: ARRAY
45254: PUSH
45255: LD_INT 2
45257: ARRAY
45258: STR
45259: PUSH
45260: LD_STRING ,
45262: STR
45263: PUSH
45264: LD_VAR 0 3
45268: PUSH
45269: LD_VAR 0 2
45273: ARRAY
45274: PUSH
45275: LD_INT 3
45277: ARRAY
45278: STR
45279: PUSH
45280: LD_STRING ,
45282: STR
45283: PUSH
45284: LD_VAR 0 3
45288: PUSH
45289: LD_VAR 0 2
45293: ARRAY
45294: PUSH
45295: LD_INT 4
45297: ARRAY
45298: STR
45299: PUSH
45300: LD_STRING )
45302: STR
45303: PPUSH
45304: CALL_OW 559
45308: GO 45218
45310: POP
45311: POP
// end ; end ;
45312: LD_VAR 0 1
45316: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
45317: LD_EXP 131
45321: IFFALSE 46006
45323: GO 45325
45325: DISABLE
45326: LD_INT 0
45328: PPUSH
45329: PPUSH
45330: PPUSH
45331: PPUSH
45332: PPUSH
45333: PPUSH
45334: PPUSH
45335: PPUSH
45336: PPUSH
// begin enable ;
45337: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
45338: LD_ADDR_VAR 0 3
45342: PUSH
45343: LD_EXP 131
45347: PPUSH
45348: CALL 91524 0 1
45352: ST_TO_ADDR
// if not list then
45353: LD_VAR 0 3
45357: NOT
45358: IFFALSE 45362
// exit ;
45360: GO 46006
// for i := 1 to list do
45362: LD_ADDR_VAR 0 1
45366: PUSH
45367: DOUBLE
45368: LD_INT 1
45370: DEC
45371: ST_TO_ADDR
45372: LD_VAR 0 3
45376: PUSH
45377: FOR_TO
45378: IFFALSE 46004
// begin depot := list [ i ] [ 2 ] ;
45380: LD_ADDR_VAR 0 8
45384: PUSH
45385: LD_VAR 0 3
45389: PUSH
45390: LD_VAR 0 1
45394: ARRAY
45395: PUSH
45396: LD_INT 2
45398: ARRAY
45399: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
45400: LD_ADDR_VAR 0 5
45404: PUSH
45405: LD_VAR 0 3
45409: PUSH
45410: LD_VAR 0 1
45414: ARRAY
45415: PUSH
45416: LD_INT 1
45418: ARRAY
45419: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
45420: LD_VAR 0 8
45424: PPUSH
45425: CALL_OW 301
45429: PUSH
45430: LD_VAR 0 5
45434: PUSH
45435: LD_VAR 0 8
45439: PPUSH
45440: CALL_OW 255
45444: NONEQUAL
45445: OR
45446: IFFALSE 45475
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
45448: LD_ADDR_EXP 131
45452: PUSH
45453: LD_EXP 131
45457: PPUSH
45458: LD_VAR 0 8
45462: PPUSH
45463: LD_INT 0
45465: PPUSH
45466: CALL_OW 1
45470: ST_TO_ADDR
// exit ;
45471: POP
45472: POP
45473: GO 46006
// end ; x := list [ i ] [ 3 ] ;
45475: LD_ADDR_VAR 0 6
45479: PUSH
45480: LD_VAR 0 3
45484: PUSH
45485: LD_VAR 0 1
45489: ARRAY
45490: PUSH
45491: LD_INT 3
45493: ARRAY
45494: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
45495: LD_ADDR_VAR 0 7
45499: PUSH
45500: LD_VAR 0 3
45504: PUSH
45505: LD_VAR 0 1
45509: ARRAY
45510: PUSH
45511: LD_INT 4
45513: ARRAY
45514: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
45515: LD_ADDR_VAR 0 9
45519: PUSH
45520: LD_VAR 0 6
45524: PPUSH
45525: LD_VAR 0 7
45529: PPUSH
45530: LD_INT 16
45532: PPUSH
45533: CALL 90112 0 3
45537: ST_TO_ADDR
// if not cratesNearbyPoint then
45538: LD_VAR 0 9
45542: NOT
45543: IFFALSE 45549
// exit ;
45545: POP
45546: POP
45547: GO 46006
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
45549: LD_ADDR_VAR 0 4
45553: PUSH
45554: LD_INT 22
45556: PUSH
45557: LD_VAR 0 5
45561: PUSH
45562: EMPTY
45563: LIST
45564: LIST
45565: PUSH
45566: LD_INT 3
45568: PUSH
45569: LD_INT 60
45571: PUSH
45572: EMPTY
45573: LIST
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 91
45581: PUSH
45582: LD_VAR 0 8
45586: PUSH
45587: LD_INT 6
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 2
45597: PUSH
45598: LD_INT 25
45600: PUSH
45601: LD_INT 2
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 25
45610: PUSH
45611: LD_INT 16
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: EMPTY
45619: LIST
45620: LIST
45621: LIST
45622: PUSH
45623: EMPTY
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: PPUSH
45629: CALL_OW 69
45633: PUSH
45634: LD_VAR 0 8
45638: PPUSH
45639: CALL_OW 313
45643: PPUSH
45644: LD_INT 3
45646: PUSH
45647: LD_INT 60
45649: PUSH
45650: EMPTY
45651: LIST
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: PUSH
45657: LD_INT 2
45659: PUSH
45660: LD_INT 25
45662: PUSH
45663: LD_INT 2
45665: PUSH
45666: EMPTY
45667: LIST
45668: LIST
45669: PUSH
45670: LD_INT 25
45672: PUSH
45673: LD_INT 16
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: LIST
45684: PUSH
45685: EMPTY
45686: LIST
45687: LIST
45688: PPUSH
45689: CALL_OW 72
45693: UNION
45694: ST_TO_ADDR
// if tmp then
45695: LD_VAR 0 4
45699: IFFALSE 45779
// begin tmp := ShrinkArray ( tmp , 3 ) ;
45701: LD_ADDR_VAR 0 4
45705: PUSH
45706: LD_VAR 0 4
45710: PPUSH
45711: LD_INT 3
45713: PPUSH
45714: CALL 88081 0 2
45718: ST_TO_ADDR
// for j in tmp do
45719: LD_ADDR_VAR 0 2
45723: PUSH
45724: LD_VAR 0 4
45728: PUSH
45729: FOR_IN
45730: IFFALSE 45773
// begin if IsInUnit ( j ) then
45732: LD_VAR 0 2
45736: PPUSH
45737: CALL_OW 310
45741: IFFALSE 45752
// ComExit ( j ) ;
45743: LD_VAR 0 2
45747: PPUSH
45748: CALL 88164 0 1
// AddComCollect ( j , x , y ) ;
45752: LD_VAR 0 2
45756: PPUSH
45757: LD_VAR 0 6
45761: PPUSH
45762: LD_VAR 0 7
45766: PPUSH
45767: CALL_OW 177
// end ;
45771: GO 45729
45773: POP
45774: POP
// exit ;
45775: POP
45776: POP
45777: GO 46006
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
45779: LD_ADDR_VAR 0 4
45783: PUSH
45784: LD_INT 22
45786: PUSH
45787: LD_VAR 0 5
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 91
45798: PUSH
45799: LD_VAR 0 8
45803: PUSH
45804: LD_INT 8
45806: PUSH
45807: EMPTY
45808: LIST
45809: LIST
45810: LIST
45811: PUSH
45812: LD_INT 2
45814: PUSH
45815: LD_INT 34
45817: PUSH
45818: LD_INT 12
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 34
45827: PUSH
45828: LD_INT 51
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 34
45837: PUSH
45838: LD_INT 32
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 34
45847: PUSH
45848: LD_INT 89
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: EMPTY
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: LIST
45866: PPUSH
45867: CALL_OW 69
45871: ST_TO_ADDR
// if tmp then
45872: LD_VAR 0 4
45876: IFFALSE 46002
// begin for j in tmp do
45878: LD_ADDR_VAR 0 2
45882: PUSH
45883: LD_VAR 0 4
45887: PUSH
45888: FOR_IN
45889: IFFALSE 46000
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
45891: LD_VAR 0 2
45895: PPUSH
45896: CALL_OW 262
45900: PUSH
45901: LD_INT 3
45903: EQUAL
45904: PUSH
45905: LD_VAR 0 2
45909: PPUSH
45910: CALL_OW 261
45914: PUSH
45915: LD_INT 20
45917: GREATER
45918: OR
45919: PUSH
45920: LD_VAR 0 2
45924: PPUSH
45925: CALL_OW 314
45929: NOT
45930: AND
45931: PUSH
45932: LD_VAR 0 2
45936: PPUSH
45937: CALL_OW 263
45941: PUSH
45942: LD_INT 1
45944: NONEQUAL
45945: PUSH
45946: LD_VAR 0 2
45950: PPUSH
45951: CALL_OW 311
45955: OR
45956: AND
45957: IFFALSE 45998
// begin ComCollect ( j , x , y ) ;
45959: LD_VAR 0 2
45963: PPUSH
45964: LD_VAR 0 6
45968: PPUSH
45969: LD_VAR 0 7
45973: PPUSH
45974: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
45978: LD_VAR 0 2
45982: PPUSH
45983: LD_VAR 0 8
45987: PPUSH
45988: CALL_OW 172
// exit ;
45992: POP
45993: POP
45994: POP
45995: POP
45996: GO 46006
// end ;
45998: GO 45888
46000: POP
46001: POP
// end ; end ;
46002: GO 45377
46004: POP
46005: POP
// end ; end_of_file
46006: PPOPN 9
46008: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
46009: LD_INT 0
46011: PPUSH
46012: PPUSH
46013: PPUSH
46014: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
46015: LD_VAR 0 1
46019: PPUSH
46020: CALL_OW 264
46024: PUSH
46025: LD_INT 91
46027: EQUAL
46028: IFFALSE 46100
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
46030: LD_INT 68
46032: PPUSH
46033: LD_VAR 0 1
46037: PPUSH
46038: CALL_OW 255
46042: PPUSH
46043: CALL_OW 321
46047: PUSH
46048: LD_INT 2
46050: EQUAL
46051: IFFALSE 46063
// eff := 70 else
46053: LD_ADDR_VAR 0 4
46057: PUSH
46058: LD_INT 70
46060: ST_TO_ADDR
46061: GO 46071
// eff := 30 ;
46063: LD_ADDR_VAR 0 4
46067: PUSH
46068: LD_INT 30
46070: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
46071: LD_VAR 0 1
46075: PPUSH
46076: CALL_OW 250
46080: PPUSH
46081: LD_VAR 0 1
46085: PPUSH
46086: CALL_OW 251
46090: PPUSH
46091: LD_VAR 0 4
46095: PPUSH
46096: CALL_OW 495
// end ; end ;
46100: LD_VAR 0 2
46104: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
46105: LD_INT 0
46107: PPUSH
// end ;
46108: LD_VAR 0 4
46112: RET
// export function SOS_Command ( cmd ) ; begin
46113: LD_INT 0
46115: PPUSH
// end ;
46116: LD_VAR 0 2
46120: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
46121: LD_INT 0
46123: PPUSH
// end ;
46124: LD_VAR 0 6
46128: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
46129: LD_INT 0
46131: PPUSH
46132: PPUSH
// if not vehicle or not factory then
46133: LD_VAR 0 1
46137: NOT
46138: PUSH
46139: LD_VAR 0 2
46143: NOT
46144: OR
46145: IFFALSE 46149
// exit ;
46147: GO 46380
// if factoryWaypoints >= factory then
46149: LD_EXP 130
46153: PUSH
46154: LD_VAR 0 2
46158: GREATEREQUAL
46159: IFFALSE 46380
// if factoryWaypoints [ factory ] then
46161: LD_EXP 130
46165: PUSH
46166: LD_VAR 0 2
46170: ARRAY
46171: IFFALSE 46380
// begin if GetControl ( vehicle ) = control_manual then
46173: LD_VAR 0 1
46177: PPUSH
46178: CALL_OW 263
46182: PUSH
46183: LD_INT 1
46185: EQUAL
46186: IFFALSE 46267
// begin driver := IsDrivenBy ( vehicle ) ;
46188: LD_ADDR_VAR 0 4
46192: PUSH
46193: LD_VAR 0 1
46197: PPUSH
46198: CALL_OW 311
46202: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
46203: LD_VAR 0 4
46207: PPUSH
46208: LD_EXP 130
46212: PUSH
46213: LD_VAR 0 2
46217: ARRAY
46218: PUSH
46219: LD_INT 3
46221: ARRAY
46222: PPUSH
46223: LD_EXP 130
46227: PUSH
46228: LD_VAR 0 2
46232: ARRAY
46233: PUSH
46234: LD_INT 4
46236: ARRAY
46237: PPUSH
46238: CALL_OW 171
// AddComExitVehicle ( driver ) ;
46242: LD_VAR 0 4
46246: PPUSH
46247: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
46251: LD_VAR 0 4
46255: PPUSH
46256: LD_VAR 0 2
46260: PPUSH
46261: CALL_OW 180
// end else
46265: GO 46380
// if GetControl ( vehicle ) = control_remote then
46267: LD_VAR 0 1
46271: PPUSH
46272: CALL_OW 263
46276: PUSH
46277: LD_INT 2
46279: EQUAL
46280: IFFALSE 46341
// begin wait ( 0 0$2 ) ;
46282: LD_INT 70
46284: PPUSH
46285: CALL_OW 67
// if Connect ( vehicle ) then
46289: LD_VAR 0 1
46293: PPUSH
46294: CALL 58404 0 1
46298: IFFALSE 46339
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
46300: LD_VAR 0 1
46304: PPUSH
46305: LD_EXP 130
46309: PUSH
46310: LD_VAR 0 2
46314: ARRAY
46315: PUSH
46316: LD_INT 3
46318: ARRAY
46319: PPUSH
46320: LD_EXP 130
46324: PUSH
46325: LD_VAR 0 2
46329: ARRAY
46330: PUSH
46331: LD_INT 4
46333: ARRAY
46334: PPUSH
46335: CALL_OW 171
// end else
46339: GO 46380
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
46341: LD_VAR 0 1
46345: PPUSH
46346: LD_EXP 130
46350: PUSH
46351: LD_VAR 0 2
46355: ARRAY
46356: PUSH
46357: LD_INT 3
46359: ARRAY
46360: PPUSH
46361: LD_EXP 130
46365: PUSH
46366: LD_VAR 0 2
46370: ARRAY
46371: PUSH
46372: LD_INT 4
46374: ARRAY
46375: PPUSH
46376: CALL_OW 171
// end ; end ;
46380: LD_VAR 0 3
46384: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
46385: LD_INT 0
46387: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
46388: LD_VAR 0 1
46392: PUSH
46393: LD_INT 250
46395: EQUAL
46396: PUSH
46397: LD_VAR 0 2
46401: PPUSH
46402: CALL_OW 264
46406: PUSH
46407: LD_INT 81
46409: EQUAL
46410: AND
46411: IFFALSE 46432
// MinerPlaceMine ( unit , x , y ) ;
46413: LD_VAR 0 2
46417: PPUSH
46418: LD_VAR 0 4
46422: PPUSH
46423: LD_VAR 0 5
46427: PPUSH
46428: CALL 48817 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
46432: LD_VAR 0 1
46436: PUSH
46437: LD_INT 251
46439: EQUAL
46440: PUSH
46441: LD_VAR 0 2
46445: PPUSH
46446: CALL_OW 264
46450: PUSH
46451: LD_INT 81
46453: EQUAL
46454: AND
46455: IFFALSE 46476
// MinerDetonateMine ( unit , x , y ) ;
46457: LD_VAR 0 2
46461: PPUSH
46462: LD_VAR 0 4
46466: PPUSH
46467: LD_VAR 0 5
46471: PPUSH
46472: CALL 49092 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
46476: LD_VAR 0 1
46480: PUSH
46481: LD_INT 252
46483: EQUAL
46484: PUSH
46485: LD_VAR 0 2
46489: PPUSH
46490: CALL_OW 264
46494: PUSH
46495: LD_INT 81
46497: EQUAL
46498: AND
46499: IFFALSE 46520
// MinerCreateMinefield ( unit , x , y ) ;
46501: LD_VAR 0 2
46505: PPUSH
46506: LD_VAR 0 4
46510: PPUSH
46511: LD_VAR 0 5
46515: PPUSH
46516: CALL 49509 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
46520: LD_VAR 0 1
46524: PUSH
46525: LD_INT 253
46527: EQUAL
46528: PUSH
46529: LD_VAR 0 2
46533: PPUSH
46534: CALL_OW 257
46538: PUSH
46539: LD_INT 5
46541: EQUAL
46542: AND
46543: IFFALSE 46564
// ComBinocular ( unit , x , y ) ;
46545: LD_VAR 0 2
46549: PPUSH
46550: LD_VAR 0 4
46554: PPUSH
46555: LD_VAR 0 5
46559: PPUSH
46560: CALL 49878 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
46564: LD_VAR 0 1
46568: PUSH
46569: LD_INT 254
46571: EQUAL
46572: PUSH
46573: LD_VAR 0 2
46577: PPUSH
46578: CALL_OW 264
46582: PUSH
46583: LD_INT 99
46585: EQUAL
46586: AND
46587: PUSH
46588: LD_VAR 0 3
46592: PPUSH
46593: CALL_OW 263
46597: PUSH
46598: LD_INT 3
46600: EQUAL
46601: AND
46602: IFFALSE 46618
// HackDestroyVehicle ( unit , selectedUnit ) ;
46604: LD_VAR 0 2
46608: PPUSH
46609: LD_VAR 0 3
46613: PPUSH
46614: CALL 48181 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
46618: LD_VAR 0 1
46622: PUSH
46623: LD_INT 255
46625: EQUAL
46626: PUSH
46627: LD_VAR 0 2
46631: PPUSH
46632: CALL_OW 264
46636: PUSH
46637: LD_INT 14
46639: PUSH
46640: LD_INT 53
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: IN
46647: AND
46648: PUSH
46649: LD_VAR 0 4
46653: PPUSH
46654: LD_VAR 0 5
46658: PPUSH
46659: CALL_OW 488
46663: AND
46664: IFFALSE 46688
// CutTreeXYR ( unit , x , y , 12 ) ;
46666: LD_VAR 0 2
46670: PPUSH
46671: LD_VAR 0 4
46675: PPUSH
46676: LD_VAR 0 5
46680: PPUSH
46681: LD_INT 12
46683: PPUSH
46684: CALL 46751 0 4
// if cmd = 256 then
46688: LD_VAR 0 1
46692: PUSH
46693: LD_INT 256
46695: EQUAL
46696: IFFALSE 46717
// SetFactoryWaypoint ( unit , x , y ) ;
46698: LD_VAR 0 2
46702: PPUSH
46703: LD_VAR 0 4
46707: PPUSH
46708: LD_VAR 0 5
46712: PPUSH
46713: CALL 44698 0 3
// if cmd = 257 then
46717: LD_VAR 0 1
46721: PUSH
46722: LD_INT 257
46724: EQUAL
46725: IFFALSE 46746
// SetWarehouseGatheringPoint ( unit , x , y ) ;
46727: LD_VAR 0 2
46731: PPUSH
46732: LD_VAR 0 4
46736: PPUSH
46737: LD_VAR 0 5
46741: PPUSH
46742: CALL 45060 0 3
// end ;
46746: LD_VAR 0 6
46750: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
46751: LD_INT 0
46753: PPUSH
46754: PPUSH
46755: PPUSH
46756: PPUSH
46757: PPUSH
46758: PPUSH
46759: PPUSH
46760: PPUSH
46761: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
46762: LD_VAR 0 1
46766: NOT
46767: PUSH
46768: LD_VAR 0 2
46772: PPUSH
46773: LD_VAR 0 3
46777: PPUSH
46778: CALL_OW 488
46782: NOT
46783: OR
46784: PUSH
46785: LD_VAR 0 4
46789: NOT
46790: OR
46791: IFFALSE 46795
// exit ;
46793: GO 47135
// list := [ ] ;
46795: LD_ADDR_VAR 0 13
46799: PUSH
46800: EMPTY
46801: ST_TO_ADDR
// if x - r < 0 then
46802: LD_VAR 0 2
46806: PUSH
46807: LD_VAR 0 4
46811: MINUS
46812: PUSH
46813: LD_INT 0
46815: LESS
46816: IFFALSE 46828
// min_x := 0 else
46818: LD_ADDR_VAR 0 7
46822: PUSH
46823: LD_INT 0
46825: ST_TO_ADDR
46826: GO 46844
// min_x := x - r ;
46828: LD_ADDR_VAR 0 7
46832: PUSH
46833: LD_VAR 0 2
46837: PUSH
46838: LD_VAR 0 4
46842: MINUS
46843: ST_TO_ADDR
// if y - r < 0 then
46844: LD_VAR 0 3
46848: PUSH
46849: LD_VAR 0 4
46853: MINUS
46854: PUSH
46855: LD_INT 0
46857: LESS
46858: IFFALSE 46870
// min_y := 0 else
46860: LD_ADDR_VAR 0 8
46864: PUSH
46865: LD_INT 0
46867: ST_TO_ADDR
46868: GO 46886
// min_y := y - r ;
46870: LD_ADDR_VAR 0 8
46874: PUSH
46875: LD_VAR 0 3
46879: PUSH
46880: LD_VAR 0 4
46884: MINUS
46885: ST_TO_ADDR
// max_x := x + r ;
46886: LD_ADDR_VAR 0 9
46890: PUSH
46891: LD_VAR 0 2
46895: PUSH
46896: LD_VAR 0 4
46900: PLUS
46901: ST_TO_ADDR
// max_y := y + r ;
46902: LD_ADDR_VAR 0 10
46906: PUSH
46907: LD_VAR 0 3
46911: PUSH
46912: LD_VAR 0 4
46916: PLUS
46917: ST_TO_ADDR
// for _x = min_x to max_x do
46918: LD_ADDR_VAR 0 11
46922: PUSH
46923: DOUBLE
46924: LD_VAR 0 7
46928: DEC
46929: ST_TO_ADDR
46930: LD_VAR 0 9
46934: PUSH
46935: FOR_TO
46936: IFFALSE 47053
// for _y = min_y to max_y do
46938: LD_ADDR_VAR 0 12
46942: PUSH
46943: DOUBLE
46944: LD_VAR 0 8
46948: DEC
46949: ST_TO_ADDR
46950: LD_VAR 0 10
46954: PUSH
46955: FOR_TO
46956: IFFALSE 47049
// begin if not ValidHex ( _x , _y ) then
46958: LD_VAR 0 11
46962: PPUSH
46963: LD_VAR 0 12
46967: PPUSH
46968: CALL_OW 488
46972: NOT
46973: IFFALSE 46977
// continue ;
46975: GO 46955
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
46977: LD_VAR 0 11
46981: PPUSH
46982: LD_VAR 0 12
46986: PPUSH
46987: CALL_OW 351
46991: PUSH
46992: LD_VAR 0 11
46996: PPUSH
46997: LD_VAR 0 12
47001: PPUSH
47002: CALL_OW 554
47006: AND
47007: IFFALSE 47047
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
47009: LD_ADDR_VAR 0 13
47013: PUSH
47014: LD_VAR 0 13
47018: PPUSH
47019: LD_VAR 0 13
47023: PUSH
47024: LD_INT 1
47026: PLUS
47027: PPUSH
47028: LD_VAR 0 11
47032: PUSH
47033: LD_VAR 0 12
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PPUSH
47042: CALL_OW 2
47046: ST_TO_ADDR
// end ;
47047: GO 46955
47049: POP
47050: POP
47051: GO 46935
47053: POP
47054: POP
// if not list then
47055: LD_VAR 0 13
47059: NOT
47060: IFFALSE 47064
// exit ;
47062: GO 47135
// for i in list do
47064: LD_ADDR_VAR 0 6
47068: PUSH
47069: LD_VAR 0 13
47073: PUSH
47074: FOR_IN
47075: IFFALSE 47133
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
47077: LD_VAR 0 1
47081: PPUSH
47082: LD_STRING M
47084: PUSH
47085: LD_VAR 0 6
47089: PUSH
47090: LD_INT 1
47092: ARRAY
47093: PUSH
47094: LD_VAR 0 6
47098: PUSH
47099: LD_INT 2
47101: ARRAY
47102: PUSH
47103: LD_INT 0
47105: PUSH
47106: LD_INT 0
47108: PUSH
47109: LD_INT 0
47111: PUSH
47112: LD_INT 0
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: PUSH
47124: EMPTY
47125: LIST
47126: PPUSH
47127: CALL_OW 447
47131: GO 47074
47133: POP
47134: POP
// end ;
47135: LD_VAR 0 5
47139: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
47140: LD_EXP 133
47144: NOT
47145: IFFALSE 47195
47147: GO 47149
47149: DISABLE
// begin initHack := true ;
47150: LD_ADDR_EXP 133
47154: PUSH
47155: LD_INT 1
47157: ST_TO_ADDR
// hackTanks := [ ] ;
47158: LD_ADDR_EXP 134
47162: PUSH
47163: EMPTY
47164: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
47165: LD_ADDR_EXP 135
47169: PUSH
47170: EMPTY
47171: ST_TO_ADDR
// hackLimit := 3 ;
47172: LD_ADDR_EXP 136
47176: PUSH
47177: LD_INT 3
47179: ST_TO_ADDR
// hackDist := 12 ;
47180: LD_ADDR_EXP 137
47184: PUSH
47185: LD_INT 12
47187: ST_TO_ADDR
// hackCounter := [ ] ;
47188: LD_ADDR_EXP 138
47192: PUSH
47193: EMPTY
47194: ST_TO_ADDR
// end ;
47195: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
47196: LD_EXP 133
47200: PUSH
47201: LD_INT 34
47203: PUSH
47204: LD_INT 99
47206: PUSH
47207: EMPTY
47208: LIST
47209: LIST
47210: PPUSH
47211: CALL_OW 69
47215: AND
47216: IFFALSE 47469
47218: GO 47220
47220: DISABLE
47221: LD_INT 0
47223: PPUSH
47224: PPUSH
// begin enable ;
47225: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
47226: LD_ADDR_VAR 0 1
47230: PUSH
47231: LD_INT 34
47233: PUSH
47234: LD_INT 99
47236: PUSH
47237: EMPTY
47238: LIST
47239: LIST
47240: PPUSH
47241: CALL_OW 69
47245: PUSH
47246: FOR_IN
47247: IFFALSE 47467
// begin if not i in hackTanks then
47249: LD_VAR 0 1
47253: PUSH
47254: LD_EXP 134
47258: IN
47259: NOT
47260: IFFALSE 47343
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
47262: LD_ADDR_EXP 134
47266: PUSH
47267: LD_EXP 134
47271: PPUSH
47272: LD_EXP 134
47276: PUSH
47277: LD_INT 1
47279: PLUS
47280: PPUSH
47281: LD_VAR 0 1
47285: PPUSH
47286: CALL_OW 1
47290: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
47291: LD_ADDR_EXP 135
47295: PUSH
47296: LD_EXP 135
47300: PPUSH
47301: LD_EXP 135
47305: PUSH
47306: LD_INT 1
47308: PLUS
47309: PPUSH
47310: EMPTY
47311: PPUSH
47312: CALL_OW 1
47316: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
47317: LD_ADDR_EXP 138
47321: PUSH
47322: LD_EXP 138
47326: PPUSH
47327: LD_EXP 138
47331: PUSH
47332: LD_INT 1
47334: PLUS
47335: PPUSH
47336: EMPTY
47337: PPUSH
47338: CALL_OW 1
47342: ST_TO_ADDR
// end ; if not IsOk ( i ) then
47343: LD_VAR 0 1
47347: PPUSH
47348: CALL_OW 302
47352: NOT
47353: IFFALSE 47366
// begin HackUnlinkAll ( i ) ;
47355: LD_VAR 0 1
47359: PPUSH
47360: CALL 47472 0 1
// continue ;
47364: GO 47246
// end ; HackCheckCapturedStatus ( i ) ;
47366: LD_VAR 0 1
47370: PPUSH
47371: CALL 47915 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
47375: LD_ADDR_VAR 0 2
47379: PUSH
47380: LD_INT 81
47382: PUSH
47383: LD_VAR 0 1
47387: PPUSH
47388: CALL_OW 255
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 33
47399: PUSH
47400: LD_INT 3
47402: PUSH
47403: EMPTY
47404: LIST
47405: LIST
47406: PUSH
47407: LD_INT 91
47409: PUSH
47410: LD_VAR 0 1
47414: PUSH
47415: LD_EXP 137
47419: PUSH
47420: EMPTY
47421: LIST
47422: LIST
47423: LIST
47424: PUSH
47425: LD_INT 50
47427: PUSH
47428: EMPTY
47429: LIST
47430: PUSH
47431: EMPTY
47432: LIST
47433: LIST
47434: LIST
47435: LIST
47436: PPUSH
47437: CALL_OW 69
47441: ST_TO_ADDR
// if not tmp then
47442: LD_VAR 0 2
47446: NOT
47447: IFFALSE 47451
// continue ;
47449: GO 47246
// HackLink ( i , tmp ) ;
47451: LD_VAR 0 1
47455: PPUSH
47456: LD_VAR 0 2
47460: PPUSH
47461: CALL 47608 0 2
// end ;
47465: GO 47246
47467: POP
47468: POP
// end ;
47469: PPOPN 2
47471: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
47472: LD_INT 0
47474: PPUSH
47475: PPUSH
47476: PPUSH
// if not hack in hackTanks then
47477: LD_VAR 0 1
47481: PUSH
47482: LD_EXP 134
47486: IN
47487: NOT
47488: IFFALSE 47492
// exit ;
47490: GO 47603
// index := GetElementIndex ( hackTanks , hack ) ;
47492: LD_ADDR_VAR 0 4
47496: PUSH
47497: LD_EXP 134
47501: PPUSH
47502: LD_VAR 0 1
47506: PPUSH
47507: CALL 55220 0 2
47511: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
47512: LD_EXP 135
47516: PUSH
47517: LD_VAR 0 4
47521: ARRAY
47522: IFFALSE 47603
// begin for i in hackTanksCaptured [ index ] do
47524: LD_ADDR_VAR 0 3
47528: PUSH
47529: LD_EXP 135
47533: PUSH
47534: LD_VAR 0 4
47538: ARRAY
47539: PUSH
47540: FOR_IN
47541: IFFALSE 47567
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
47543: LD_VAR 0 3
47547: PUSH
47548: LD_INT 1
47550: ARRAY
47551: PPUSH
47552: LD_VAR 0 3
47556: PUSH
47557: LD_INT 2
47559: ARRAY
47560: PPUSH
47561: CALL_OW 235
47565: GO 47540
47567: POP
47568: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
47569: LD_ADDR_EXP 135
47573: PUSH
47574: LD_EXP 135
47578: PPUSH
47579: LD_VAR 0 4
47583: PPUSH
47584: EMPTY
47585: PPUSH
47586: CALL_OW 1
47590: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
47591: LD_VAR 0 1
47595: PPUSH
47596: LD_INT 0
47598: PPUSH
47599: CALL_OW 505
// end ; end ;
47603: LD_VAR 0 2
47607: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
47608: LD_INT 0
47610: PPUSH
47611: PPUSH
47612: PPUSH
// if not hack in hackTanks or not vehicles then
47613: LD_VAR 0 1
47617: PUSH
47618: LD_EXP 134
47622: IN
47623: NOT
47624: PUSH
47625: LD_VAR 0 2
47629: NOT
47630: OR
47631: IFFALSE 47635
// exit ;
47633: GO 47910
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
47635: LD_ADDR_VAR 0 2
47639: PUSH
47640: LD_VAR 0 1
47644: PPUSH
47645: LD_VAR 0 2
47649: PPUSH
47650: LD_INT 1
47652: PPUSH
47653: LD_INT 1
47655: PPUSH
47656: CALL 55870 0 4
47660: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
47661: LD_ADDR_VAR 0 5
47665: PUSH
47666: LD_EXP 134
47670: PPUSH
47671: LD_VAR 0 1
47675: PPUSH
47676: CALL 55220 0 2
47680: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
47681: LD_EXP 135
47685: PUSH
47686: LD_VAR 0 5
47690: ARRAY
47691: PUSH
47692: LD_EXP 136
47696: LESS
47697: IFFALSE 47886
// begin for i := 1 to vehicles do
47699: LD_ADDR_VAR 0 4
47703: PUSH
47704: DOUBLE
47705: LD_INT 1
47707: DEC
47708: ST_TO_ADDR
47709: LD_VAR 0 2
47713: PUSH
47714: FOR_TO
47715: IFFALSE 47884
// begin if hackTanksCaptured [ index ] = hackLimit then
47717: LD_EXP 135
47721: PUSH
47722: LD_VAR 0 5
47726: ARRAY
47727: PUSH
47728: LD_EXP 136
47732: EQUAL
47733: IFFALSE 47737
// break ;
47735: GO 47884
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
47737: LD_ADDR_EXP 138
47741: PUSH
47742: LD_EXP 138
47746: PPUSH
47747: LD_VAR 0 5
47751: PPUSH
47752: LD_EXP 138
47756: PUSH
47757: LD_VAR 0 5
47761: ARRAY
47762: PUSH
47763: LD_INT 1
47765: PLUS
47766: PPUSH
47767: CALL_OW 1
47771: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
47772: LD_ADDR_EXP 135
47776: PUSH
47777: LD_EXP 135
47781: PPUSH
47782: LD_VAR 0 5
47786: PUSH
47787: LD_EXP 135
47791: PUSH
47792: LD_VAR 0 5
47796: ARRAY
47797: PUSH
47798: LD_INT 1
47800: PLUS
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PPUSH
47806: LD_VAR 0 2
47810: PUSH
47811: LD_VAR 0 4
47815: ARRAY
47816: PUSH
47817: LD_VAR 0 2
47821: PUSH
47822: LD_VAR 0 4
47826: ARRAY
47827: PPUSH
47828: CALL_OW 255
47832: PUSH
47833: EMPTY
47834: LIST
47835: LIST
47836: PPUSH
47837: CALL 55435 0 3
47841: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
47842: LD_VAR 0 2
47846: PUSH
47847: LD_VAR 0 4
47851: ARRAY
47852: PPUSH
47853: LD_VAR 0 1
47857: PPUSH
47858: CALL_OW 255
47862: PPUSH
47863: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
47867: LD_VAR 0 2
47871: PUSH
47872: LD_VAR 0 4
47876: ARRAY
47877: PPUSH
47878: CALL_OW 141
// end ;
47882: GO 47714
47884: POP
47885: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
47886: LD_VAR 0 1
47890: PPUSH
47891: LD_EXP 135
47895: PUSH
47896: LD_VAR 0 5
47900: ARRAY
47901: PUSH
47902: LD_INT 0
47904: PLUS
47905: PPUSH
47906: CALL_OW 505
// end ;
47910: LD_VAR 0 3
47914: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
47915: LD_INT 0
47917: PPUSH
47918: PPUSH
47919: PPUSH
47920: PPUSH
// if not hack in hackTanks then
47921: LD_VAR 0 1
47925: PUSH
47926: LD_EXP 134
47930: IN
47931: NOT
47932: IFFALSE 47936
// exit ;
47934: GO 48176
// index := GetElementIndex ( hackTanks , hack ) ;
47936: LD_ADDR_VAR 0 4
47940: PUSH
47941: LD_EXP 134
47945: PPUSH
47946: LD_VAR 0 1
47950: PPUSH
47951: CALL 55220 0 2
47955: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
47956: LD_ADDR_VAR 0 3
47960: PUSH
47961: DOUBLE
47962: LD_EXP 135
47966: PUSH
47967: LD_VAR 0 4
47971: ARRAY
47972: INC
47973: ST_TO_ADDR
47974: LD_INT 1
47976: PUSH
47977: FOR_DOWNTO
47978: IFFALSE 48150
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
47980: LD_ADDR_VAR 0 5
47984: PUSH
47985: LD_EXP 135
47989: PUSH
47990: LD_VAR 0 4
47994: ARRAY
47995: PUSH
47996: LD_VAR 0 3
48000: ARRAY
48001: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
48002: LD_VAR 0 5
48006: PUSH
48007: LD_INT 1
48009: ARRAY
48010: PPUSH
48011: CALL_OW 302
48015: NOT
48016: PUSH
48017: LD_VAR 0 5
48021: PUSH
48022: LD_INT 1
48024: ARRAY
48025: PPUSH
48026: CALL_OW 255
48030: PUSH
48031: LD_VAR 0 1
48035: PPUSH
48036: CALL_OW 255
48040: NONEQUAL
48041: OR
48042: IFFALSE 48148
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
48044: LD_VAR 0 5
48048: PUSH
48049: LD_INT 1
48051: ARRAY
48052: PPUSH
48053: CALL_OW 305
48057: PUSH
48058: LD_VAR 0 5
48062: PUSH
48063: LD_INT 1
48065: ARRAY
48066: PPUSH
48067: CALL_OW 255
48071: PUSH
48072: LD_VAR 0 1
48076: PPUSH
48077: CALL_OW 255
48081: EQUAL
48082: AND
48083: IFFALSE 48107
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
48085: LD_VAR 0 5
48089: PUSH
48090: LD_INT 1
48092: ARRAY
48093: PPUSH
48094: LD_VAR 0 5
48098: PUSH
48099: LD_INT 2
48101: ARRAY
48102: PPUSH
48103: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
48107: LD_ADDR_EXP 135
48111: PUSH
48112: LD_EXP 135
48116: PPUSH
48117: LD_VAR 0 4
48121: PPUSH
48122: LD_EXP 135
48126: PUSH
48127: LD_VAR 0 4
48131: ARRAY
48132: PPUSH
48133: LD_VAR 0 3
48137: PPUSH
48138: CALL_OW 3
48142: PPUSH
48143: CALL_OW 1
48147: ST_TO_ADDR
// end ; end ;
48148: GO 47977
48150: POP
48151: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
48152: LD_VAR 0 1
48156: PPUSH
48157: LD_EXP 135
48161: PUSH
48162: LD_VAR 0 4
48166: ARRAY
48167: PUSH
48168: LD_INT 0
48170: PLUS
48171: PPUSH
48172: CALL_OW 505
// end ;
48176: LD_VAR 0 2
48180: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
48181: LD_INT 0
48183: PPUSH
48184: PPUSH
48185: PPUSH
48186: PPUSH
// if not hack in hackTanks then
48187: LD_VAR 0 1
48191: PUSH
48192: LD_EXP 134
48196: IN
48197: NOT
48198: IFFALSE 48202
// exit ;
48200: GO 48287
// index := GetElementIndex ( hackTanks , hack ) ;
48202: LD_ADDR_VAR 0 5
48206: PUSH
48207: LD_EXP 134
48211: PPUSH
48212: LD_VAR 0 1
48216: PPUSH
48217: CALL 55220 0 2
48221: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
48222: LD_ADDR_VAR 0 4
48226: PUSH
48227: DOUBLE
48228: LD_INT 1
48230: DEC
48231: ST_TO_ADDR
48232: LD_EXP 135
48236: PUSH
48237: LD_VAR 0 5
48241: ARRAY
48242: PUSH
48243: FOR_TO
48244: IFFALSE 48285
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
48246: LD_EXP 135
48250: PUSH
48251: LD_VAR 0 5
48255: ARRAY
48256: PUSH
48257: LD_VAR 0 4
48261: ARRAY
48262: PUSH
48263: LD_INT 1
48265: ARRAY
48266: PUSH
48267: LD_VAR 0 2
48271: EQUAL
48272: IFFALSE 48283
// KillUnit ( vehicle ) ;
48274: LD_VAR 0 2
48278: PPUSH
48279: CALL_OW 66
48283: GO 48243
48285: POP
48286: POP
// end ;
48287: LD_VAR 0 3
48291: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
48292: LD_EXP 139
48296: NOT
48297: IFFALSE 48332
48299: GO 48301
48301: DISABLE
// begin initMiner := true ;
48302: LD_ADDR_EXP 139
48306: PUSH
48307: LD_INT 1
48309: ST_TO_ADDR
// minersList := [ ] ;
48310: LD_ADDR_EXP 140
48314: PUSH
48315: EMPTY
48316: ST_TO_ADDR
// minerMinesList := [ ] ;
48317: LD_ADDR_EXP 141
48321: PUSH
48322: EMPTY
48323: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
48324: LD_ADDR_EXP 142
48328: PUSH
48329: LD_INT 5
48331: ST_TO_ADDR
// end ;
48332: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
48333: LD_EXP 139
48337: PUSH
48338: LD_INT 34
48340: PUSH
48341: LD_INT 81
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PPUSH
48348: CALL_OW 69
48352: AND
48353: IFFALSE 48814
48355: GO 48357
48357: DISABLE
48358: LD_INT 0
48360: PPUSH
48361: PPUSH
48362: PPUSH
48363: PPUSH
// begin enable ;
48364: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
48365: LD_ADDR_VAR 0 1
48369: PUSH
48370: LD_INT 34
48372: PUSH
48373: LD_INT 81
48375: PUSH
48376: EMPTY
48377: LIST
48378: LIST
48379: PPUSH
48380: CALL_OW 69
48384: PUSH
48385: FOR_IN
48386: IFFALSE 48458
// begin if not i in minersList then
48388: LD_VAR 0 1
48392: PUSH
48393: LD_EXP 140
48397: IN
48398: NOT
48399: IFFALSE 48456
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
48401: LD_ADDR_EXP 140
48405: PUSH
48406: LD_EXP 140
48410: PPUSH
48411: LD_EXP 140
48415: PUSH
48416: LD_INT 1
48418: PLUS
48419: PPUSH
48420: LD_VAR 0 1
48424: PPUSH
48425: CALL_OW 1
48429: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
48430: LD_ADDR_EXP 141
48434: PUSH
48435: LD_EXP 141
48439: PPUSH
48440: LD_EXP 141
48444: PUSH
48445: LD_INT 1
48447: PLUS
48448: PPUSH
48449: EMPTY
48450: PPUSH
48451: CALL_OW 1
48455: ST_TO_ADDR
// end end ;
48456: GO 48385
48458: POP
48459: POP
// for i := minerMinesList downto 1 do
48460: LD_ADDR_VAR 0 1
48464: PUSH
48465: DOUBLE
48466: LD_EXP 141
48470: INC
48471: ST_TO_ADDR
48472: LD_INT 1
48474: PUSH
48475: FOR_DOWNTO
48476: IFFALSE 48812
// begin if IsLive ( minersList [ i ] ) then
48478: LD_EXP 140
48482: PUSH
48483: LD_VAR 0 1
48487: ARRAY
48488: PPUSH
48489: CALL_OW 300
48493: IFFALSE 48521
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
48495: LD_EXP 140
48499: PUSH
48500: LD_VAR 0 1
48504: ARRAY
48505: PPUSH
48506: LD_EXP 141
48510: PUSH
48511: LD_VAR 0 1
48515: ARRAY
48516: PPUSH
48517: CALL_OW 505
// if not minerMinesList [ i ] then
48521: LD_EXP 141
48525: PUSH
48526: LD_VAR 0 1
48530: ARRAY
48531: NOT
48532: IFFALSE 48536
// continue ;
48534: GO 48475
// for j := minerMinesList [ i ] downto 1 do
48536: LD_ADDR_VAR 0 2
48540: PUSH
48541: DOUBLE
48542: LD_EXP 141
48546: PUSH
48547: LD_VAR 0 1
48551: ARRAY
48552: INC
48553: ST_TO_ADDR
48554: LD_INT 1
48556: PUSH
48557: FOR_DOWNTO
48558: IFFALSE 48808
// begin side := GetSide ( minersList [ i ] ) ;
48560: LD_ADDR_VAR 0 3
48564: PUSH
48565: LD_EXP 140
48569: PUSH
48570: LD_VAR 0 1
48574: ARRAY
48575: PPUSH
48576: CALL_OW 255
48580: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
48581: LD_ADDR_VAR 0 4
48585: PUSH
48586: LD_EXP 141
48590: PUSH
48591: LD_VAR 0 1
48595: ARRAY
48596: PUSH
48597: LD_VAR 0 2
48601: ARRAY
48602: PUSH
48603: LD_INT 1
48605: ARRAY
48606: PPUSH
48607: LD_EXP 141
48611: PUSH
48612: LD_VAR 0 1
48616: ARRAY
48617: PUSH
48618: LD_VAR 0 2
48622: ARRAY
48623: PUSH
48624: LD_INT 2
48626: ARRAY
48627: PPUSH
48628: CALL_OW 428
48632: ST_TO_ADDR
// if not tmp then
48633: LD_VAR 0 4
48637: NOT
48638: IFFALSE 48642
// continue ;
48640: GO 48557
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
48642: LD_VAR 0 4
48646: PUSH
48647: LD_INT 81
48649: PUSH
48650: LD_VAR 0 3
48654: PUSH
48655: EMPTY
48656: LIST
48657: LIST
48658: PPUSH
48659: CALL_OW 69
48663: IN
48664: PUSH
48665: LD_EXP 141
48669: PUSH
48670: LD_VAR 0 1
48674: ARRAY
48675: PUSH
48676: LD_VAR 0 2
48680: ARRAY
48681: PUSH
48682: LD_INT 1
48684: ARRAY
48685: PPUSH
48686: LD_EXP 141
48690: PUSH
48691: LD_VAR 0 1
48695: ARRAY
48696: PUSH
48697: LD_VAR 0 2
48701: ARRAY
48702: PUSH
48703: LD_INT 2
48705: ARRAY
48706: PPUSH
48707: CALL_OW 458
48711: AND
48712: IFFALSE 48806
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
48714: LD_EXP 141
48718: PUSH
48719: LD_VAR 0 1
48723: ARRAY
48724: PUSH
48725: LD_VAR 0 2
48729: ARRAY
48730: PUSH
48731: LD_INT 1
48733: ARRAY
48734: PPUSH
48735: LD_EXP 141
48739: PUSH
48740: LD_VAR 0 1
48744: ARRAY
48745: PUSH
48746: LD_VAR 0 2
48750: ARRAY
48751: PUSH
48752: LD_INT 2
48754: ARRAY
48755: PPUSH
48756: LD_VAR 0 3
48760: PPUSH
48761: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
48765: LD_ADDR_EXP 141
48769: PUSH
48770: LD_EXP 141
48774: PPUSH
48775: LD_VAR 0 1
48779: PPUSH
48780: LD_EXP 141
48784: PUSH
48785: LD_VAR 0 1
48789: ARRAY
48790: PPUSH
48791: LD_VAR 0 2
48795: PPUSH
48796: CALL_OW 3
48800: PPUSH
48801: CALL_OW 1
48805: ST_TO_ADDR
// end ; end ;
48806: GO 48557
48808: POP
48809: POP
// end ;
48810: GO 48475
48812: POP
48813: POP
// end ;
48814: PPOPN 4
48816: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
48817: LD_INT 0
48819: PPUSH
48820: PPUSH
// result := false ;
48821: LD_ADDR_VAR 0 4
48825: PUSH
48826: LD_INT 0
48828: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
48829: LD_VAR 0 1
48833: PPUSH
48834: CALL_OW 264
48838: PUSH
48839: LD_INT 81
48841: EQUAL
48842: NOT
48843: IFFALSE 48847
// exit ;
48845: GO 49087
// index := GetElementIndex ( minersList , unit ) ;
48847: LD_ADDR_VAR 0 5
48851: PUSH
48852: LD_EXP 140
48856: PPUSH
48857: LD_VAR 0 1
48861: PPUSH
48862: CALL 55220 0 2
48866: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
48867: LD_EXP 141
48871: PUSH
48872: LD_VAR 0 5
48876: ARRAY
48877: PUSH
48878: LD_EXP 142
48882: GREATEREQUAL
48883: IFFALSE 48887
// exit ;
48885: GO 49087
// ComMoveXY ( unit , x , y ) ;
48887: LD_VAR 0 1
48891: PPUSH
48892: LD_VAR 0 2
48896: PPUSH
48897: LD_VAR 0 3
48901: PPUSH
48902: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
48906: LD_INT 35
48908: PPUSH
48909: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
48913: LD_VAR 0 1
48917: PPUSH
48918: LD_VAR 0 2
48922: PPUSH
48923: LD_VAR 0 3
48927: PPUSH
48928: CALL 86575 0 3
48932: NOT
48933: PUSH
48934: LD_VAR 0 1
48938: PPUSH
48939: CALL_OW 314
48943: AND
48944: IFFALSE 48948
// exit ;
48946: GO 49087
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
48948: LD_VAR 0 2
48952: PPUSH
48953: LD_VAR 0 3
48957: PPUSH
48958: CALL_OW 428
48962: PUSH
48963: LD_VAR 0 1
48967: EQUAL
48968: PUSH
48969: LD_VAR 0 1
48973: PPUSH
48974: CALL_OW 314
48978: NOT
48979: AND
48980: IFFALSE 48906
// PlaySoundXY ( x , y , PlantMine ) ;
48982: LD_VAR 0 2
48986: PPUSH
48987: LD_VAR 0 3
48991: PPUSH
48992: LD_STRING PlantMine
48994: PPUSH
48995: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
48999: LD_VAR 0 2
49003: PPUSH
49004: LD_VAR 0 3
49008: PPUSH
49009: LD_VAR 0 1
49013: PPUSH
49014: CALL_OW 255
49018: PPUSH
49019: LD_INT 0
49021: PPUSH
49022: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
49026: LD_ADDR_EXP 141
49030: PUSH
49031: LD_EXP 141
49035: PPUSH
49036: LD_VAR 0 5
49040: PUSH
49041: LD_EXP 141
49045: PUSH
49046: LD_VAR 0 5
49050: ARRAY
49051: PUSH
49052: LD_INT 1
49054: PLUS
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PPUSH
49060: LD_VAR 0 2
49064: PUSH
49065: LD_VAR 0 3
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PPUSH
49074: CALL 55435 0 3
49078: ST_TO_ADDR
// result := true ;
49079: LD_ADDR_VAR 0 4
49083: PUSH
49084: LD_INT 1
49086: ST_TO_ADDR
// end ;
49087: LD_VAR 0 4
49091: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
49092: LD_INT 0
49094: PPUSH
49095: PPUSH
49096: PPUSH
// if not unit in minersList then
49097: LD_VAR 0 1
49101: PUSH
49102: LD_EXP 140
49106: IN
49107: NOT
49108: IFFALSE 49112
// exit ;
49110: GO 49504
// index := GetElementIndex ( minersList , unit ) ;
49112: LD_ADDR_VAR 0 6
49116: PUSH
49117: LD_EXP 140
49121: PPUSH
49122: LD_VAR 0 1
49126: PPUSH
49127: CALL 55220 0 2
49131: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
49132: LD_ADDR_VAR 0 5
49136: PUSH
49137: DOUBLE
49138: LD_EXP 141
49142: PUSH
49143: LD_VAR 0 6
49147: ARRAY
49148: INC
49149: ST_TO_ADDR
49150: LD_INT 1
49152: PUSH
49153: FOR_DOWNTO
49154: IFFALSE 49315
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
49156: LD_EXP 141
49160: PUSH
49161: LD_VAR 0 6
49165: ARRAY
49166: PUSH
49167: LD_VAR 0 5
49171: ARRAY
49172: PUSH
49173: LD_INT 1
49175: ARRAY
49176: PUSH
49177: LD_VAR 0 2
49181: EQUAL
49182: PUSH
49183: LD_EXP 141
49187: PUSH
49188: LD_VAR 0 6
49192: ARRAY
49193: PUSH
49194: LD_VAR 0 5
49198: ARRAY
49199: PUSH
49200: LD_INT 2
49202: ARRAY
49203: PUSH
49204: LD_VAR 0 3
49208: EQUAL
49209: AND
49210: IFFALSE 49313
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
49212: LD_EXP 141
49216: PUSH
49217: LD_VAR 0 6
49221: ARRAY
49222: PUSH
49223: LD_VAR 0 5
49227: ARRAY
49228: PUSH
49229: LD_INT 1
49231: ARRAY
49232: PPUSH
49233: LD_EXP 141
49237: PUSH
49238: LD_VAR 0 6
49242: ARRAY
49243: PUSH
49244: LD_VAR 0 5
49248: ARRAY
49249: PUSH
49250: LD_INT 2
49252: ARRAY
49253: PPUSH
49254: LD_VAR 0 1
49258: PPUSH
49259: CALL_OW 255
49263: PPUSH
49264: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
49268: LD_ADDR_EXP 141
49272: PUSH
49273: LD_EXP 141
49277: PPUSH
49278: LD_VAR 0 6
49282: PPUSH
49283: LD_EXP 141
49287: PUSH
49288: LD_VAR 0 6
49292: ARRAY
49293: PPUSH
49294: LD_VAR 0 5
49298: PPUSH
49299: CALL_OW 3
49303: PPUSH
49304: CALL_OW 1
49308: ST_TO_ADDR
// exit ;
49309: POP
49310: POP
49311: GO 49504
// end ; end ;
49313: GO 49153
49315: POP
49316: POP
// for i := minerMinesList [ index ] downto 1 do
49317: LD_ADDR_VAR 0 5
49321: PUSH
49322: DOUBLE
49323: LD_EXP 141
49327: PUSH
49328: LD_VAR 0 6
49332: ARRAY
49333: INC
49334: ST_TO_ADDR
49335: LD_INT 1
49337: PUSH
49338: FOR_DOWNTO
49339: IFFALSE 49502
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
49341: LD_EXP 141
49345: PUSH
49346: LD_VAR 0 6
49350: ARRAY
49351: PUSH
49352: LD_VAR 0 5
49356: ARRAY
49357: PUSH
49358: LD_INT 1
49360: ARRAY
49361: PPUSH
49362: LD_EXP 141
49366: PUSH
49367: LD_VAR 0 6
49371: ARRAY
49372: PUSH
49373: LD_VAR 0 5
49377: ARRAY
49378: PUSH
49379: LD_INT 2
49381: ARRAY
49382: PPUSH
49383: LD_VAR 0 2
49387: PPUSH
49388: LD_VAR 0 3
49392: PPUSH
49393: CALL_OW 298
49397: PUSH
49398: LD_INT 6
49400: LESS
49401: IFFALSE 49500
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
49403: LD_EXP 141
49407: PUSH
49408: LD_VAR 0 6
49412: ARRAY
49413: PUSH
49414: LD_VAR 0 5
49418: ARRAY
49419: PUSH
49420: LD_INT 1
49422: ARRAY
49423: PPUSH
49424: LD_EXP 141
49428: PUSH
49429: LD_VAR 0 6
49433: ARRAY
49434: PUSH
49435: LD_VAR 0 5
49439: ARRAY
49440: PUSH
49441: LD_INT 2
49443: ARRAY
49444: PPUSH
49445: LD_VAR 0 1
49449: PPUSH
49450: CALL_OW 255
49454: PPUSH
49455: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
49459: LD_ADDR_EXP 141
49463: PUSH
49464: LD_EXP 141
49468: PPUSH
49469: LD_VAR 0 6
49473: PPUSH
49474: LD_EXP 141
49478: PUSH
49479: LD_VAR 0 6
49483: ARRAY
49484: PPUSH
49485: LD_VAR 0 5
49489: PPUSH
49490: CALL_OW 3
49494: PPUSH
49495: CALL_OW 1
49499: ST_TO_ADDR
// end ; end ;
49500: GO 49338
49502: POP
49503: POP
// end ;
49504: LD_VAR 0 4
49508: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
49509: LD_INT 0
49511: PPUSH
49512: PPUSH
49513: PPUSH
49514: PPUSH
49515: PPUSH
49516: PPUSH
49517: PPUSH
49518: PPUSH
49519: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
49520: LD_VAR 0 1
49524: PPUSH
49525: CALL_OW 264
49529: PUSH
49530: LD_INT 81
49532: EQUAL
49533: NOT
49534: PUSH
49535: LD_VAR 0 1
49539: PUSH
49540: LD_EXP 140
49544: IN
49545: NOT
49546: OR
49547: IFFALSE 49551
// exit ;
49549: GO 49873
// index := GetElementIndex ( minersList , unit ) ;
49551: LD_ADDR_VAR 0 6
49555: PUSH
49556: LD_EXP 140
49560: PPUSH
49561: LD_VAR 0 1
49565: PPUSH
49566: CALL 55220 0 2
49570: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
49571: LD_ADDR_VAR 0 8
49575: PUSH
49576: LD_EXP 142
49580: PUSH
49581: LD_EXP 141
49585: PUSH
49586: LD_VAR 0 6
49590: ARRAY
49591: MINUS
49592: ST_TO_ADDR
// if not minesFreeAmount then
49593: LD_VAR 0 8
49597: NOT
49598: IFFALSE 49602
// exit ;
49600: GO 49873
// tmp := [ ] ;
49602: LD_ADDR_VAR 0 7
49606: PUSH
49607: EMPTY
49608: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
49609: LD_ADDR_VAR 0 5
49613: PUSH
49614: DOUBLE
49615: LD_INT 1
49617: DEC
49618: ST_TO_ADDR
49619: LD_VAR 0 8
49623: PUSH
49624: FOR_TO
49625: IFFALSE 49820
// begin _d := rand ( 0 , 5 ) ;
49627: LD_ADDR_VAR 0 11
49631: PUSH
49632: LD_INT 0
49634: PPUSH
49635: LD_INT 5
49637: PPUSH
49638: CALL_OW 12
49642: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
49643: LD_ADDR_VAR 0 12
49647: PUSH
49648: LD_INT 2
49650: PPUSH
49651: LD_INT 6
49653: PPUSH
49654: CALL_OW 12
49658: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
49659: LD_ADDR_VAR 0 9
49663: PUSH
49664: LD_VAR 0 2
49668: PPUSH
49669: LD_VAR 0 11
49673: PPUSH
49674: LD_VAR 0 12
49678: PPUSH
49679: CALL_OW 272
49683: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
49684: LD_ADDR_VAR 0 10
49688: PUSH
49689: LD_VAR 0 3
49693: PPUSH
49694: LD_VAR 0 11
49698: PPUSH
49699: LD_VAR 0 12
49703: PPUSH
49704: CALL_OW 273
49708: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
49709: LD_VAR 0 9
49713: PPUSH
49714: LD_VAR 0 10
49718: PPUSH
49719: CALL_OW 488
49723: PUSH
49724: LD_VAR 0 9
49728: PUSH
49729: LD_VAR 0 10
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_VAR 0 7
49742: IN
49743: NOT
49744: AND
49745: PUSH
49746: LD_VAR 0 9
49750: PPUSH
49751: LD_VAR 0 10
49755: PPUSH
49756: CALL_OW 458
49760: NOT
49761: AND
49762: IFFALSE 49804
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
49764: LD_ADDR_VAR 0 7
49768: PUSH
49769: LD_VAR 0 7
49773: PPUSH
49774: LD_VAR 0 7
49778: PUSH
49779: LD_INT 1
49781: PLUS
49782: PPUSH
49783: LD_VAR 0 9
49787: PUSH
49788: LD_VAR 0 10
49792: PUSH
49793: EMPTY
49794: LIST
49795: LIST
49796: PPUSH
49797: CALL_OW 1
49801: ST_TO_ADDR
49802: GO 49818
// i := i - 1 ;
49804: LD_ADDR_VAR 0 5
49808: PUSH
49809: LD_VAR 0 5
49813: PUSH
49814: LD_INT 1
49816: MINUS
49817: ST_TO_ADDR
// end ;
49818: GO 49624
49820: POP
49821: POP
// for i in tmp do
49822: LD_ADDR_VAR 0 5
49826: PUSH
49827: LD_VAR 0 7
49831: PUSH
49832: FOR_IN
49833: IFFALSE 49871
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
49835: LD_VAR 0 1
49839: PPUSH
49840: LD_VAR 0 5
49844: PUSH
49845: LD_INT 1
49847: ARRAY
49848: PPUSH
49849: LD_VAR 0 5
49853: PUSH
49854: LD_INT 2
49856: ARRAY
49857: PPUSH
49858: CALL 48817 0 3
49862: NOT
49863: IFFALSE 49869
// exit ;
49865: POP
49866: POP
49867: GO 49873
49869: GO 49832
49871: POP
49872: POP
// end ;
49873: LD_VAR 0 4
49877: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
49878: LD_INT 0
49880: PPUSH
49881: PPUSH
49882: PPUSH
49883: PPUSH
49884: PPUSH
49885: PPUSH
49886: PPUSH
// if not GetClass ( unit ) = class_sniper then
49887: LD_VAR 0 1
49891: PPUSH
49892: CALL_OW 257
49896: PUSH
49897: LD_INT 5
49899: EQUAL
49900: NOT
49901: IFFALSE 49905
// exit ;
49903: GO 50293
// dist := 8 ;
49905: LD_ADDR_VAR 0 5
49909: PUSH
49910: LD_INT 8
49912: ST_TO_ADDR
// viewRange := 12 ;
49913: LD_ADDR_VAR 0 7
49917: PUSH
49918: LD_INT 12
49920: ST_TO_ADDR
// side := GetSide ( unit ) ;
49921: LD_ADDR_VAR 0 6
49925: PUSH
49926: LD_VAR 0 1
49930: PPUSH
49931: CALL_OW 255
49935: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
49936: LD_INT 61
49938: PPUSH
49939: LD_VAR 0 6
49943: PPUSH
49944: CALL_OW 321
49948: PUSH
49949: LD_INT 2
49951: EQUAL
49952: IFFALSE 49962
// viewRange := 16 ;
49954: LD_ADDR_VAR 0 7
49958: PUSH
49959: LD_INT 16
49961: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
49962: LD_VAR 0 1
49966: PPUSH
49967: LD_VAR 0 2
49971: PPUSH
49972: LD_VAR 0 3
49976: PPUSH
49977: CALL_OW 297
49981: PUSH
49982: LD_VAR 0 5
49986: GREATER
49987: IFFALSE 50066
// begin ComMoveXY ( unit , x , y ) ;
49989: LD_VAR 0 1
49993: PPUSH
49994: LD_VAR 0 2
49998: PPUSH
49999: LD_VAR 0 3
50003: PPUSH
50004: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
50008: LD_INT 35
50010: PPUSH
50011: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
50015: LD_VAR 0 1
50019: PPUSH
50020: LD_VAR 0 2
50024: PPUSH
50025: LD_VAR 0 3
50029: PPUSH
50030: CALL 86575 0 3
50034: NOT
50035: IFFALSE 50039
// exit ;
50037: GO 50293
// until GetDistUnitXY ( unit , x , y ) < dist ;
50039: LD_VAR 0 1
50043: PPUSH
50044: LD_VAR 0 2
50048: PPUSH
50049: LD_VAR 0 3
50053: PPUSH
50054: CALL_OW 297
50058: PUSH
50059: LD_VAR 0 5
50063: LESS
50064: IFFALSE 50008
// end ; ComTurnXY ( unit , x , y ) ;
50066: LD_VAR 0 1
50070: PPUSH
50071: LD_VAR 0 2
50075: PPUSH
50076: LD_VAR 0 3
50080: PPUSH
50081: CALL_OW 118
// wait ( 5 ) ;
50085: LD_INT 5
50087: PPUSH
50088: CALL_OW 67
// _d := GetDir ( unit ) ;
50092: LD_ADDR_VAR 0 10
50096: PUSH
50097: LD_VAR 0 1
50101: PPUSH
50102: CALL_OW 254
50106: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
50107: LD_ADDR_VAR 0 8
50111: PUSH
50112: LD_VAR 0 1
50116: PPUSH
50117: CALL_OW 250
50121: PPUSH
50122: LD_VAR 0 10
50126: PPUSH
50127: LD_VAR 0 5
50131: PPUSH
50132: CALL_OW 272
50136: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
50137: LD_ADDR_VAR 0 9
50141: PUSH
50142: LD_VAR 0 1
50146: PPUSH
50147: CALL_OW 251
50151: PPUSH
50152: LD_VAR 0 10
50156: PPUSH
50157: LD_VAR 0 5
50161: PPUSH
50162: CALL_OW 273
50166: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
50167: LD_VAR 0 8
50171: PPUSH
50172: LD_VAR 0 9
50176: PPUSH
50177: CALL_OW 488
50181: NOT
50182: IFFALSE 50186
// exit ;
50184: GO 50293
// ComAnimCustom ( unit , 1 ) ;
50186: LD_VAR 0 1
50190: PPUSH
50191: LD_INT 1
50193: PPUSH
50194: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
50198: LD_VAR 0 8
50202: PPUSH
50203: LD_VAR 0 9
50207: PPUSH
50208: LD_VAR 0 6
50212: PPUSH
50213: LD_VAR 0 7
50217: PPUSH
50218: CALL_OW 330
// repeat wait ( 1 ) ;
50222: LD_INT 1
50224: PPUSH
50225: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
50229: LD_VAR 0 1
50233: PPUSH
50234: CALL_OW 316
50238: PUSH
50239: LD_VAR 0 1
50243: PPUSH
50244: CALL_OW 314
50248: OR
50249: PUSH
50250: LD_VAR 0 1
50254: PPUSH
50255: CALL_OW 302
50259: NOT
50260: OR
50261: PUSH
50262: LD_VAR 0 1
50266: PPUSH
50267: CALL_OW 301
50271: OR
50272: IFFALSE 50222
// RemoveSeeing ( _x , _y , side ) ;
50274: LD_VAR 0 8
50278: PPUSH
50279: LD_VAR 0 9
50283: PPUSH
50284: LD_VAR 0 6
50288: PPUSH
50289: CALL_OW 331
// end ; end_of_file
50293: LD_VAR 0 4
50297: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
50298: LD_INT 0
50300: PPUSH
50301: PPUSH
// if exist_mode then
50302: LD_VAR 0 2
50306: IFFALSE 50331
// unit := CreateCharacter ( prefix & ident ) else
50308: LD_ADDR_VAR 0 5
50312: PUSH
50313: LD_VAR 0 3
50317: PUSH
50318: LD_VAR 0 1
50322: STR
50323: PPUSH
50324: CALL_OW 34
50328: ST_TO_ADDR
50329: GO 50346
// unit := NewCharacter ( ident ) ;
50331: LD_ADDR_VAR 0 5
50335: PUSH
50336: LD_VAR 0 1
50340: PPUSH
50341: CALL_OW 25
50345: ST_TO_ADDR
// result := unit ;
50346: LD_ADDR_VAR 0 4
50350: PUSH
50351: LD_VAR 0 5
50355: ST_TO_ADDR
// end ;
50356: LD_VAR 0 4
50360: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
50361: LD_INT 0
50363: PPUSH
50364: PPUSH
// if not side or not nation then
50365: LD_VAR 0 1
50369: NOT
50370: PUSH
50371: LD_VAR 0 2
50375: NOT
50376: OR
50377: IFFALSE 50381
// exit ;
50379: GO 51149
// case nation of nation_american :
50381: LD_VAR 0 2
50385: PUSH
50386: LD_INT 1
50388: DOUBLE
50389: EQUAL
50390: IFTRUE 50394
50392: GO 50608
50394: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
50395: LD_ADDR_VAR 0 4
50399: PUSH
50400: LD_INT 35
50402: PUSH
50403: LD_INT 45
50405: PUSH
50406: LD_INT 46
50408: PUSH
50409: LD_INT 47
50411: PUSH
50412: LD_INT 82
50414: PUSH
50415: LD_INT 83
50417: PUSH
50418: LD_INT 84
50420: PUSH
50421: LD_INT 85
50423: PUSH
50424: LD_INT 86
50426: PUSH
50427: LD_INT 1
50429: PUSH
50430: LD_INT 2
50432: PUSH
50433: LD_INT 6
50435: PUSH
50436: LD_INT 15
50438: PUSH
50439: LD_INT 16
50441: PUSH
50442: LD_INT 7
50444: PUSH
50445: LD_INT 12
50447: PUSH
50448: LD_INT 13
50450: PUSH
50451: LD_INT 10
50453: PUSH
50454: LD_INT 14
50456: PUSH
50457: LD_INT 20
50459: PUSH
50460: LD_INT 21
50462: PUSH
50463: LD_INT 22
50465: PUSH
50466: LD_INT 25
50468: PUSH
50469: LD_INT 32
50471: PUSH
50472: LD_INT 27
50474: PUSH
50475: LD_INT 36
50477: PUSH
50478: LD_INT 69
50480: PUSH
50481: LD_INT 39
50483: PUSH
50484: LD_INT 34
50486: PUSH
50487: LD_INT 40
50489: PUSH
50490: LD_INT 48
50492: PUSH
50493: LD_INT 49
50495: PUSH
50496: LD_INT 50
50498: PUSH
50499: LD_INT 51
50501: PUSH
50502: LD_INT 52
50504: PUSH
50505: LD_INT 53
50507: PUSH
50508: LD_INT 54
50510: PUSH
50511: LD_INT 55
50513: PUSH
50514: LD_INT 56
50516: PUSH
50517: LD_INT 57
50519: PUSH
50520: LD_INT 58
50522: PUSH
50523: LD_INT 59
50525: PUSH
50526: LD_INT 60
50528: PUSH
50529: LD_INT 61
50531: PUSH
50532: LD_INT 62
50534: PUSH
50535: LD_INT 80
50537: PUSH
50538: LD_INT 82
50540: PUSH
50541: LD_INT 83
50543: PUSH
50544: LD_INT 84
50546: PUSH
50547: LD_INT 85
50549: PUSH
50550: LD_INT 86
50552: PUSH
50553: EMPTY
50554: LIST
50555: LIST
50556: LIST
50557: LIST
50558: LIST
50559: LIST
50560: LIST
50561: LIST
50562: LIST
50563: LIST
50564: LIST
50565: LIST
50566: LIST
50567: LIST
50568: LIST
50569: LIST
50570: LIST
50571: LIST
50572: LIST
50573: LIST
50574: LIST
50575: LIST
50576: LIST
50577: LIST
50578: LIST
50579: LIST
50580: LIST
50581: LIST
50582: LIST
50583: LIST
50584: LIST
50585: LIST
50586: LIST
50587: LIST
50588: LIST
50589: LIST
50590: LIST
50591: LIST
50592: LIST
50593: LIST
50594: LIST
50595: LIST
50596: LIST
50597: LIST
50598: LIST
50599: LIST
50600: LIST
50601: LIST
50602: LIST
50603: LIST
50604: LIST
50605: ST_TO_ADDR
50606: GO 51073
50608: LD_INT 2
50610: DOUBLE
50611: EQUAL
50612: IFTRUE 50616
50614: GO 50842
50616: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
50617: LD_ADDR_VAR 0 4
50621: PUSH
50622: LD_INT 35
50624: PUSH
50625: LD_INT 45
50627: PUSH
50628: LD_INT 46
50630: PUSH
50631: LD_INT 47
50633: PUSH
50634: LD_INT 82
50636: PUSH
50637: LD_INT 83
50639: PUSH
50640: LD_INT 84
50642: PUSH
50643: LD_INT 85
50645: PUSH
50646: LD_INT 87
50648: PUSH
50649: LD_INT 70
50651: PUSH
50652: LD_INT 1
50654: PUSH
50655: LD_INT 11
50657: PUSH
50658: LD_INT 3
50660: PUSH
50661: LD_INT 4
50663: PUSH
50664: LD_INT 5
50666: PUSH
50667: LD_INT 6
50669: PUSH
50670: LD_INT 15
50672: PUSH
50673: LD_INT 18
50675: PUSH
50676: LD_INT 7
50678: PUSH
50679: LD_INT 17
50681: PUSH
50682: LD_INT 8
50684: PUSH
50685: LD_INT 20
50687: PUSH
50688: LD_INT 21
50690: PUSH
50691: LD_INT 22
50693: PUSH
50694: LD_INT 72
50696: PUSH
50697: LD_INT 26
50699: PUSH
50700: LD_INT 69
50702: PUSH
50703: LD_INT 39
50705: PUSH
50706: LD_INT 40
50708: PUSH
50709: LD_INT 41
50711: PUSH
50712: LD_INT 42
50714: PUSH
50715: LD_INT 43
50717: PUSH
50718: LD_INT 48
50720: PUSH
50721: LD_INT 49
50723: PUSH
50724: LD_INT 50
50726: PUSH
50727: LD_INT 51
50729: PUSH
50730: LD_INT 52
50732: PUSH
50733: LD_INT 53
50735: PUSH
50736: LD_INT 54
50738: PUSH
50739: LD_INT 55
50741: PUSH
50742: LD_INT 56
50744: PUSH
50745: LD_INT 60
50747: PUSH
50748: LD_INT 61
50750: PUSH
50751: LD_INT 62
50753: PUSH
50754: LD_INT 66
50756: PUSH
50757: LD_INT 67
50759: PUSH
50760: LD_INT 68
50762: PUSH
50763: LD_INT 81
50765: PUSH
50766: LD_INT 82
50768: PUSH
50769: LD_INT 83
50771: PUSH
50772: LD_INT 84
50774: PUSH
50775: LD_INT 85
50777: PUSH
50778: LD_INT 87
50780: PUSH
50781: LD_INT 88
50783: PUSH
50784: EMPTY
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: ST_TO_ADDR
50840: GO 51073
50842: LD_INT 3
50844: DOUBLE
50845: EQUAL
50846: IFTRUE 50850
50848: GO 51072
50850: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
50851: LD_ADDR_VAR 0 4
50855: PUSH
50856: LD_INT 46
50858: PUSH
50859: LD_INT 47
50861: PUSH
50862: LD_INT 1
50864: PUSH
50865: LD_INT 2
50867: PUSH
50868: LD_INT 82
50870: PUSH
50871: LD_INT 83
50873: PUSH
50874: LD_INT 84
50876: PUSH
50877: LD_INT 85
50879: PUSH
50880: LD_INT 86
50882: PUSH
50883: LD_INT 11
50885: PUSH
50886: LD_INT 9
50888: PUSH
50889: LD_INT 20
50891: PUSH
50892: LD_INT 19
50894: PUSH
50895: LD_INT 21
50897: PUSH
50898: LD_INT 24
50900: PUSH
50901: LD_INT 22
50903: PUSH
50904: LD_INT 25
50906: PUSH
50907: LD_INT 28
50909: PUSH
50910: LD_INT 29
50912: PUSH
50913: LD_INT 30
50915: PUSH
50916: LD_INT 31
50918: PUSH
50919: LD_INT 37
50921: PUSH
50922: LD_INT 38
50924: PUSH
50925: LD_INT 32
50927: PUSH
50928: LD_INT 27
50930: PUSH
50931: LD_INT 33
50933: PUSH
50934: LD_INT 69
50936: PUSH
50937: LD_INT 39
50939: PUSH
50940: LD_INT 34
50942: PUSH
50943: LD_INT 40
50945: PUSH
50946: LD_INT 71
50948: PUSH
50949: LD_INT 23
50951: PUSH
50952: LD_INT 44
50954: PUSH
50955: LD_INT 48
50957: PUSH
50958: LD_INT 49
50960: PUSH
50961: LD_INT 50
50963: PUSH
50964: LD_INT 51
50966: PUSH
50967: LD_INT 52
50969: PUSH
50970: LD_INT 53
50972: PUSH
50973: LD_INT 54
50975: PUSH
50976: LD_INT 55
50978: PUSH
50979: LD_INT 56
50981: PUSH
50982: LD_INT 57
50984: PUSH
50985: LD_INT 58
50987: PUSH
50988: LD_INT 59
50990: PUSH
50991: LD_INT 63
50993: PUSH
50994: LD_INT 64
50996: PUSH
50997: LD_INT 65
50999: PUSH
51000: LD_INT 82
51002: PUSH
51003: LD_INT 83
51005: PUSH
51006: LD_INT 84
51008: PUSH
51009: LD_INT 85
51011: PUSH
51012: LD_INT 86
51014: PUSH
51015: EMPTY
51016: LIST
51017: LIST
51018: LIST
51019: LIST
51020: LIST
51021: LIST
51022: LIST
51023: LIST
51024: LIST
51025: LIST
51026: LIST
51027: LIST
51028: LIST
51029: LIST
51030: LIST
51031: LIST
51032: LIST
51033: LIST
51034: LIST
51035: LIST
51036: LIST
51037: LIST
51038: LIST
51039: LIST
51040: LIST
51041: LIST
51042: LIST
51043: LIST
51044: LIST
51045: LIST
51046: LIST
51047: LIST
51048: LIST
51049: LIST
51050: LIST
51051: LIST
51052: LIST
51053: LIST
51054: LIST
51055: LIST
51056: LIST
51057: LIST
51058: LIST
51059: LIST
51060: LIST
51061: LIST
51062: LIST
51063: LIST
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: ST_TO_ADDR
51070: GO 51073
51072: POP
// if state > - 1 and state < 3 then
51073: LD_VAR 0 3
51077: PUSH
51078: LD_INT 1
51080: NEG
51081: GREATER
51082: PUSH
51083: LD_VAR 0 3
51087: PUSH
51088: LD_INT 3
51090: LESS
51091: AND
51092: IFFALSE 51149
// for i in result do
51094: LD_ADDR_VAR 0 5
51098: PUSH
51099: LD_VAR 0 4
51103: PUSH
51104: FOR_IN
51105: IFFALSE 51147
// if GetTech ( i , side ) <> state then
51107: LD_VAR 0 5
51111: PPUSH
51112: LD_VAR 0 1
51116: PPUSH
51117: CALL_OW 321
51121: PUSH
51122: LD_VAR 0 3
51126: NONEQUAL
51127: IFFALSE 51145
// result := result diff i ;
51129: LD_ADDR_VAR 0 4
51133: PUSH
51134: LD_VAR 0 4
51138: PUSH
51139: LD_VAR 0 5
51143: DIFF
51144: ST_TO_ADDR
51145: GO 51104
51147: POP
51148: POP
// end ;
51149: LD_VAR 0 4
51153: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
51154: LD_INT 0
51156: PPUSH
51157: PPUSH
51158: PPUSH
// result := true ;
51159: LD_ADDR_VAR 0 3
51163: PUSH
51164: LD_INT 1
51166: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
51167: LD_ADDR_VAR 0 5
51171: PUSH
51172: LD_VAR 0 2
51176: PPUSH
51177: CALL_OW 480
51181: ST_TO_ADDR
// if not tmp then
51182: LD_VAR 0 5
51186: NOT
51187: IFFALSE 51191
// exit ;
51189: GO 51240
// for i in tmp do
51191: LD_ADDR_VAR 0 4
51195: PUSH
51196: LD_VAR 0 5
51200: PUSH
51201: FOR_IN
51202: IFFALSE 51238
// if GetTech ( i , side ) <> state_researched then
51204: LD_VAR 0 4
51208: PPUSH
51209: LD_VAR 0 1
51213: PPUSH
51214: CALL_OW 321
51218: PUSH
51219: LD_INT 2
51221: NONEQUAL
51222: IFFALSE 51236
// begin result := false ;
51224: LD_ADDR_VAR 0 3
51228: PUSH
51229: LD_INT 0
51231: ST_TO_ADDR
// exit ;
51232: POP
51233: POP
51234: GO 51240
// end ;
51236: GO 51201
51238: POP
51239: POP
// end ;
51240: LD_VAR 0 3
51244: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
51245: LD_INT 0
51247: PPUSH
51248: PPUSH
51249: PPUSH
51250: PPUSH
51251: PPUSH
51252: PPUSH
51253: PPUSH
51254: PPUSH
51255: PPUSH
51256: PPUSH
51257: PPUSH
51258: PPUSH
51259: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
51260: LD_VAR 0 1
51264: NOT
51265: PUSH
51266: LD_VAR 0 1
51270: PPUSH
51271: CALL_OW 257
51275: PUSH
51276: LD_INT 9
51278: NONEQUAL
51279: OR
51280: IFFALSE 51284
// exit ;
51282: GO 51857
// side := GetSide ( unit ) ;
51284: LD_ADDR_VAR 0 9
51288: PUSH
51289: LD_VAR 0 1
51293: PPUSH
51294: CALL_OW 255
51298: ST_TO_ADDR
// tech_space := tech_spacanom ;
51299: LD_ADDR_VAR 0 12
51303: PUSH
51304: LD_INT 29
51306: ST_TO_ADDR
// tech_time := tech_taurad ;
51307: LD_ADDR_VAR 0 13
51311: PUSH
51312: LD_INT 28
51314: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
51315: LD_ADDR_VAR 0 11
51319: PUSH
51320: LD_VAR 0 1
51324: PPUSH
51325: CALL_OW 310
51329: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
51330: LD_VAR 0 11
51334: PPUSH
51335: CALL_OW 247
51339: PUSH
51340: LD_INT 2
51342: EQUAL
51343: IFFALSE 51347
// exit ;
51345: GO 51857
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
51347: LD_ADDR_VAR 0 8
51351: PUSH
51352: LD_INT 81
51354: PUSH
51355: LD_VAR 0 9
51359: PUSH
51360: EMPTY
51361: LIST
51362: LIST
51363: PUSH
51364: LD_INT 3
51366: PUSH
51367: LD_INT 21
51369: PUSH
51370: LD_INT 3
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PPUSH
51385: CALL_OW 69
51389: ST_TO_ADDR
// if not tmp then
51390: LD_VAR 0 8
51394: NOT
51395: IFFALSE 51399
// exit ;
51397: GO 51857
// if in_unit then
51399: LD_VAR 0 11
51403: IFFALSE 51427
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
51405: LD_ADDR_VAR 0 10
51409: PUSH
51410: LD_VAR 0 8
51414: PPUSH
51415: LD_VAR 0 11
51419: PPUSH
51420: CALL_OW 74
51424: ST_TO_ADDR
51425: GO 51447
// enemy := NearestUnitToUnit ( tmp , unit ) ;
51427: LD_ADDR_VAR 0 10
51431: PUSH
51432: LD_VAR 0 8
51436: PPUSH
51437: LD_VAR 0 1
51441: PPUSH
51442: CALL_OW 74
51446: ST_TO_ADDR
// if not enemy then
51447: LD_VAR 0 10
51451: NOT
51452: IFFALSE 51456
// exit ;
51454: GO 51857
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
51456: LD_VAR 0 11
51460: PUSH
51461: LD_VAR 0 11
51465: PPUSH
51466: LD_VAR 0 10
51470: PPUSH
51471: CALL_OW 296
51475: PUSH
51476: LD_INT 13
51478: GREATER
51479: AND
51480: PUSH
51481: LD_VAR 0 1
51485: PPUSH
51486: LD_VAR 0 10
51490: PPUSH
51491: CALL_OW 296
51495: PUSH
51496: LD_INT 12
51498: GREATER
51499: OR
51500: IFFALSE 51504
// exit ;
51502: GO 51857
// missile := [ 1 ] ;
51504: LD_ADDR_VAR 0 14
51508: PUSH
51509: LD_INT 1
51511: PUSH
51512: EMPTY
51513: LIST
51514: ST_TO_ADDR
// if Researched ( side , tech_space ) then
51515: LD_VAR 0 9
51519: PPUSH
51520: LD_VAR 0 12
51524: PPUSH
51525: CALL_OW 325
51529: IFFALSE 51558
// missile := Replace ( missile , missile + 1 , 2 ) ;
51531: LD_ADDR_VAR 0 14
51535: PUSH
51536: LD_VAR 0 14
51540: PPUSH
51541: LD_VAR 0 14
51545: PUSH
51546: LD_INT 1
51548: PLUS
51549: PPUSH
51550: LD_INT 2
51552: PPUSH
51553: CALL_OW 1
51557: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
51558: LD_VAR 0 9
51562: PPUSH
51563: LD_VAR 0 13
51567: PPUSH
51568: CALL_OW 325
51572: PUSH
51573: LD_VAR 0 10
51577: PPUSH
51578: CALL_OW 255
51582: PPUSH
51583: LD_VAR 0 13
51587: PPUSH
51588: CALL_OW 325
51592: NOT
51593: AND
51594: IFFALSE 51623
// missile := Replace ( missile , missile + 1 , 3 ) ;
51596: LD_ADDR_VAR 0 14
51600: PUSH
51601: LD_VAR 0 14
51605: PPUSH
51606: LD_VAR 0 14
51610: PUSH
51611: LD_INT 1
51613: PLUS
51614: PPUSH
51615: LD_INT 3
51617: PPUSH
51618: CALL_OW 1
51622: ST_TO_ADDR
// if missile < 2 then
51623: LD_VAR 0 14
51627: PUSH
51628: LD_INT 2
51630: LESS
51631: IFFALSE 51635
// exit ;
51633: GO 51857
// x := GetX ( enemy ) ;
51635: LD_ADDR_VAR 0 4
51639: PUSH
51640: LD_VAR 0 10
51644: PPUSH
51645: CALL_OW 250
51649: ST_TO_ADDR
// y := GetY ( enemy ) ;
51650: LD_ADDR_VAR 0 5
51654: PUSH
51655: LD_VAR 0 10
51659: PPUSH
51660: CALL_OW 251
51664: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
51665: LD_ADDR_VAR 0 6
51669: PUSH
51670: LD_VAR 0 4
51674: PUSH
51675: LD_INT 1
51677: NEG
51678: PPUSH
51679: LD_INT 1
51681: PPUSH
51682: CALL_OW 12
51686: PLUS
51687: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
51688: LD_ADDR_VAR 0 7
51692: PUSH
51693: LD_VAR 0 5
51697: PUSH
51698: LD_INT 1
51700: NEG
51701: PPUSH
51702: LD_INT 1
51704: PPUSH
51705: CALL_OW 12
51709: PLUS
51710: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51711: LD_VAR 0 6
51715: PPUSH
51716: LD_VAR 0 7
51720: PPUSH
51721: CALL_OW 488
51725: NOT
51726: IFFALSE 51748
// begin _x := x ;
51728: LD_ADDR_VAR 0 6
51732: PUSH
51733: LD_VAR 0 4
51737: ST_TO_ADDR
// _y := y ;
51738: LD_ADDR_VAR 0 7
51742: PUSH
51743: LD_VAR 0 5
51747: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
51748: LD_ADDR_VAR 0 3
51752: PUSH
51753: LD_INT 1
51755: PPUSH
51756: LD_VAR 0 14
51760: PPUSH
51761: CALL_OW 12
51765: ST_TO_ADDR
// case i of 1 :
51766: LD_VAR 0 3
51770: PUSH
51771: LD_INT 1
51773: DOUBLE
51774: EQUAL
51775: IFTRUE 51779
51777: GO 51796
51779: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
51780: LD_VAR 0 1
51784: PPUSH
51785: LD_VAR 0 10
51789: PPUSH
51790: CALL_OW 115
51794: GO 51857
51796: LD_INT 2
51798: DOUBLE
51799: EQUAL
51800: IFTRUE 51804
51802: GO 51826
51804: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
51805: LD_VAR 0 1
51809: PPUSH
51810: LD_VAR 0 6
51814: PPUSH
51815: LD_VAR 0 7
51819: PPUSH
51820: CALL_OW 153
51824: GO 51857
51826: LD_INT 3
51828: DOUBLE
51829: EQUAL
51830: IFTRUE 51834
51832: GO 51856
51834: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
51835: LD_VAR 0 1
51839: PPUSH
51840: LD_VAR 0 6
51844: PPUSH
51845: LD_VAR 0 7
51849: PPUSH
51850: CALL_OW 154
51854: GO 51857
51856: POP
// end ;
51857: LD_VAR 0 2
51861: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
51862: LD_INT 0
51864: PPUSH
51865: PPUSH
51866: PPUSH
51867: PPUSH
51868: PPUSH
51869: PPUSH
// if not unit or not building then
51870: LD_VAR 0 1
51874: NOT
51875: PUSH
51876: LD_VAR 0 2
51880: NOT
51881: OR
51882: IFFALSE 51886
// exit ;
51884: GO 52044
// x := GetX ( building ) ;
51886: LD_ADDR_VAR 0 5
51890: PUSH
51891: LD_VAR 0 2
51895: PPUSH
51896: CALL_OW 250
51900: ST_TO_ADDR
// y := GetY ( building ) ;
51901: LD_ADDR_VAR 0 6
51905: PUSH
51906: LD_VAR 0 2
51910: PPUSH
51911: CALL_OW 251
51915: ST_TO_ADDR
// for i = 0 to 5 do
51916: LD_ADDR_VAR 0 4
51920: PUSH
51921: DOUBLE
51922: LD_INT 0
51924: DEC
51925: ST_TO_ADDR
51926: LD_INT 5
51928: PUSH
51929: FOR_TO
51930: IFFALSE 52042
// begin _x := ShiftX ( x , i , 3 ) ;
51932: LD_ADDR_VAR 0 7
51936: PUSH
51937: LD_VAR 0 5
51941: PPUSH
51942: LD_VAR 0 4
51946: PPUSH
51947: LD_INT 3
51949: PPUSH
51950: CALL_OW 272
51954: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
51955: LD_ADDR_VAR 0 8
51959: PUSH
51960: LD_VAR 0 6
51964: PPUSH
51965: LD_VAR 0 4
51969: PPUSH
51970: LD_INT 3
51972: PPUSH
51973: CALL_OW 273
51977: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
51978: LD_VAR 0 7
51982: PPUSH
51983: LD_VAR 0 8
51987: PPUSH
51988: CALL_OW 488
51992: NOT
51993: IFFALSE 51997
// continue ;
51995: GO 51929
// if HexInfo ( _x , _y ) = 0 then
51997: LD_VAR 0 7
52001: PPUSH
52002: LD_VAR 0 8
52006: PPUSH
52007: CALL_OW 428
52011: PUSH
52012: LD_INT 0
52014: EQUAL
52015: IFFALSE 52040
// begin ComMoveXY ( unit , _x , _y ) ;
52017: LD_VAR 0 1
52021: PPUSH
52022: LD_VAR 0 7
52026: PPUSH
52027: LD_VAR 0 8
52031: PPUSH
52032: CALL_OW 111
// exit ;
52036: POP
52037: POP
52038: GO 52044
// end ; end ;
52040: GO 51929
52042: POP
52043: POP
// end ;
52044: LD_VAR 0 3
52048: RET
// export function ScanBase ( side , base_area ) ; begin
52049: LD_INT 0
52051: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
52052: LD_ADDR_VAR 0 3
52056: PUSH
52057: LD_VAR 0 2
52061: PPUSH
52062: LD_INT 81
52064: PUSH
52065: LD_VAR 0 1
52069: PUSH
52070: EMPTY
52071: LIST
52072: LIST
52073: PPUSH
52074: CALL_OW 70
52078: ST_TO_ADDR
// end ;
52079: LD_VAR 0 3
52083: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
52084: LD_INT 0
52086: PPUSH
52087: PPUSH
52088: PPUSH
52089: PPUSH
// result := false ;
52090: LD_ADDR_VAR 0 2
52094: PUSH
52095: LD_INT 0
52097: ST_TO_ADDR
// side := GetSide ( unit ) ;
52098: LD_ADDR_VAR 0 3
52102: PUSH
52103: LD_VAR 0 1
52107: PPUSH
52108: CALL_OW 255
52112: ST_TO_ADDR
// nat := GetNation ( unit ) ;
52113: LD_ADDR_VAR 0 4
52117: PUSH
52118: LD_VAR 0 1
52122: PPUSH
52123: CALL_OW 248
52127: ST_TO_ADDR
// case nat of 1 :
52128: LD_VAR 0 4
52132: PUSH
52133: LD_INT 1
52135: DOUBLE
52136: EQUAL
52137: IFTRUE 52141
52139: GO 52152
52141: POP
// tech := tech_lassight ; 2 :
52142: LD_ADDR_VAR 0 5
52146: PUSH
52147: LD_INT 12
52149: ST_TO_ADDR
52150: GO 52191
52152: LD_INT 2
52154: DOUBLE
52155: EQUAL
52156: IFTRUE 52160
52158: GO 52171
52160: POP
// tech := tech_mortar ; 3 :
52161: LD_ADDR_VAR 0 5
52165: PUSH
52166: LD_INT 41
52168: ST_TO_ADDR
52169: GO 52191
52171: LD_INT 3
52173: DOUBLE
52174: EQUAL
52175: IFTRUE 52179
52177: GO 52190
52179: POP
// tech := tech_bazooka ; end ;
52180: LD_ADDR_VAR 0 5
52184: PUSH
52185: LD_INT 44
52187: ST_TO_ADDR
52188: GO 52191
52190: POP
// if Researched ( side , tech ) then
52191: LD_VAR 0 3
52195: PPUSH
52196: LD_VAR 0 5
52200: PPUSH
52201: CALL_OW 325
52205: IFFALSE 52232
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
52207: LD_ADDR_VAR 0 2
52211: PUSH
52212: LD_INT 5
52214: PUSH
52215: LD_INT 8
52217: PUSH
52218: LD_INT 9
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: LIST
52225: PUSH
52226: LD_VAR 0 4
52230: ARRAY
52231: ST_TO_ADDR
// end ;
52232: LD_VAR 0 2
52236: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
52237: LD_INT 0
52239: PPUSH
52240: PPUSH
52241: PPUSH
// if not mines then
52242: LD_VAR 0 2
52246: NOT
52247: IFFALSE 52251
// exit ;
52249: GO 52395
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
52251: LD_ADDR_VAR 0 5
52255: PUSH
52256: LD_INT 81
52258: PUSH
52259: LD_VAR 0 1
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: PUSH
52268: LD_INT 3
52270: PUSH
52271: LD_INT 21
52273: PUSH
52274: LD_INT 3
52276: PUSH
52277: EMPTY
52278: LIST
52279: LIST
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: EMPTY
52286: LIST
52287: LIST
52288: PPUSH
52289: CALL_OW 69
52293: ST_TO_ADDR
// for i in mines do
52294: LD_ADDR_VAR 0 4
52298: PUSH
52299: LD_VAR 0 2
52303: PUSH
52304: FOR_IN
52305: IFFALSE 52393
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
52307: LD_VAR 0 4
52311: PUSH
52312: LD_INT 1
52314: ARRAY
52315: PPUSH
52316: LD_VAR 0 4
52320: PUSH
52321: LD_INT 2
52323: ARRAY
52324: PPUSH
52325: CALL_OW 458
52329: NOT
52330: IFFALSE 52334
// continue ;
52332: GO 52304
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
52334: LD_VAR 0 4
52338: PUSH
52339: LD_INT 1
52341: ARRAY
52342: PPUSH
52343: LD_VAR 0 4
52347: PUSH
52348: LD_INT 2
52350: ARRAY
52351: PPUSH
52352: CALL_OW 428
52356: PUSH
52357: LD_VAR 0 5
52361: IN
52362: IFFALSE 52391
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
52364: LD_VAR 0 4
52368: PUSH
52369: LD_INT 1
52371: ARRAY
52372: PPUSH
52373: LD_VAR 0 4
52377: PUSH
52378: LD_INT 2
52380: ARRAY
52381: PPUSH
52382: LD_VAR 0 1
52386: PPUSH
52387: CALL_OW 456
// end ;
52391: GO 52304
52393: POP
52394: POP
// end ;
52395: LD_VAR 0 3
52399: RET
// export function Count ( array ) ; var i ; begin
52400: LD_INT 0
52402: PPUSH
52403: PPUSH
// result := 0 ;
52404: LD_ADDR_VAR 0 2
52408: PUSH
52409: LD_INT 0
52411: ST_TO_ADDR
// for i in array do
52412: LD_ADDR_VAR 0 3
52416: PUSH
52417: LD_VAR 0 1
52421: PUSH
52422: FOR_IN
52423: IFFALSE 52447
// if i then
52425: LD_VAR 0 3
52429: IFFALSE 52445
// result := result + 1 ;
52431: LD_ADDR_VAR 0 2
52435: PUSH
52436: LD_VAR 0 2
52440: PUSH
52441: LD_INT 1
52443: PLUS
52444: ST_TO_ADDR
52445: GO 52422
52447: POP
52448: POP
// end ;
52449: LD_VAR 0 2
52453: RET
// export function IsEmpty ( building ) ; begin
52454: LD_INT 0
52456: PPUSH
// if not building then
52457: LD_VAR 0 1
52461: NOT
52462: IFFALSE 52466
// exit ;
52464: GO 52509
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
52466: LD_ADDR_VAR 0 2
52470: PUSH
52471: LD_VAR 0 1
52475: PUSH
52476: LD_INT 22
52478: PUSH
52479: LD_VAR 0 1
52483: PPUSH
52484: CALL_OW 255
52488: PUSH
52489: EMPTY
52490: LIST
52491: LIST
52492: PUSH
52493: LD_INT 58
52495: PUSH
52496: EMPTY
52497: LIST
52498: PUSH
52499: EMPTY
52500: LIST
52501: LIST
52502: PPUSH
52503: CALL_OW 69
52507: IN
52508: ST_TO_ADDR
// end ;
52509: LD_VAR 0 2
52513: RET
// export function IsNotFull ( building ) ; var places ; begin
52514: LD_INT 0
52516: PPUSH
52517: PPUSH
// if not building then
52518: LD_VAR 0 1
52522: NOT
52523: IFFALSE 52527
// exit ;
52525: GO 52698
// result := false ;
52527: LD_ADDR_VAR 0 2
52531: PUSH
52532: LD_INT 0
52534: ST_TO_ADDR
// places := 0 ;
52535: LD_ADDR_VAR 0 3
52539: PUSH
52540: LD_INT 0
52542: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
52543: LD_VAR 0 1
52547: PPUSH
52548: CALL_OW 266
52552: PUSH
52553: LD_INT 0
52555: DOUBLE
52556: EQUAL
52557: IFTRUE 52615
52559: LD_INT 1
52561: DOUBLE
52562: EQUAL
52563: IFTRUE 52615
52565: LD_INT 6
52567: DOUBLE
52568: EQUAL
52569: IFTRUE 52615
52571: LD_INT 7
52573: DOUBLE
52574: EQUAL
52575: IFTRUE 52615
52577: LD_INT 8
52579: DOUBLE
52580: EQUAL
52581: IFTRUE 52615
52583: LD_INT 4
52585: DOUBLE
52586: EQUAL
52587: IFTRUE 52615
52589: LD_INT 5
52591: DOUBLE
52592: EQUAL
52593: IFTRUE 52615
52595: LD_INT 2
52597: DOUBLE
52598: EQUAL
52599: IFTRUE 52615
52601: LD_INT 3
52603: DOUBLE
52604: EQUAL
52605: IFTRUE 52615
52607: LD_INT 35
52609: DOUBLE
52610: EQUAL
52611: IFTRUE 52615
52613: GO 52626
52615: POP
// places := 6 ; b_bunker , b_breastwork :
52616: LD_ADDR_VAR 0 3
52620: PUSH
52621: LD_INT 6
52623: ST_TO_ADDR
52624: GO 52671
52626: LD_INT 32
52628: DOUBLE
52629: EQUAL
52630: IFTRUE 52640
52632: LD_INT 31
52634: DOUBLE
52635: EQUAL
52636: IFTRUE 52640
52638: GO 52651
52640: POP
// places := 1 ; b_control_tower :
52641: LD_ADDR_VAR 0 3
52645: PUSH
52646: LD_INT 1
52648: ST_TO_ADDR
52649: GO 52671
52651: LD_INT 36
52653: DOUBLE
52654: EQUAL
52655: IFTRUE 52659
52657: GO 52670
52659: POP
// places := 3 ; end ;
52660: LD_ADDR_VAR 0 3
52664: PUSH
52665: LD_INT 3
52667: ST_TO_ADDR
52668: GO 52671
52670: POP
// if places then
52671: LD_VAR 0 3
52675: IFFALSE 52698
// result := UnitsInside ( building ) < places ;
52677: LD_ADDR_VAR 0 2
52681: PUSH
52682: LD_VAR 0 1
52686: PPUSH
52687: CALL_OW 313
52691: PUSH
52692: LD_VAR 0 3
52696: LESS
52697: ST_TO_ADDR
// end ;
52698: LD_VAR 0 2
52702: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
52703: LD_INT 0
52705: PPUSH
52706: PPUSH
52707: PPUSH
52708: PPUSH
// tmp := [ ] ;
52709: LD_ADDR_VAR 0 3
52713: PUSH
52714: EMPTY
52715: ST_TO_ADDR
// list := [ ] ;
52716: LD_ADDR_VAR 0 5
52720: PUSH
52721: EMPTY
52722: ST_TO_ADDR
// for i = 16 to 25 do
52723: LD_ADDR_VAR 0 4
52727: PUSH
52728: DOUBLE
52729: LD_INT 16
52731: DEC
52732: ST_TO_ADDR
52733: LD_INT 25
52735: PUSH
52736: FOR_TO
52737: IFFALSE 52810
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
52739: LD_ADDR_VAR 0 3
52743: PUSH
52744: LD_VAR 0 3
52748: PUSH
52749: LD_INT 22
52751: PUSH
52752: LD_VAR 0 1
52756: PPUSH
52757: CALL_OW 255
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 91
52768: PUSH
52769: LD_VAR 0 1
52773: PUSH
52774: LD_INT 6
52776: PUSH
52777: EMPTY
52778: LIST
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 30
52784: PUSH
52785: LD_VAR 0 4
52789: PUSH
52790: EMPTY
52791: LIST
52792: LIST
52793: PUSH
52794: EMPTY
52795: LIST
52796: LIST
52797: LIST
52798: PUSH
52799: EMPTY
52800: LIST
52801: PPUSH
52802: CALL_OW 69
52806: ADD
52807: ST_TO_ADDR
52808: GO 52736
52810: POP
52811: POP
// for i = 1 to tmp do
52812: LD_ADDR_VAR 0 4
52816: PUSH
52817: DOUBLE
52818: LD_INT 1
52820: DEC
52821: ST_TO_ADDR
52822: LD_VAR 0 3
52826: PUSH
52827: FOR_TO
52828: IFFALSE 52916
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
52830: LD_ADDR_VAR 0 5
52834: PUSH
52835: LD_VAR 0 5
52839: PUSH
52840: LD_VAR 0 3
52844: PUSH
52845: LD_VAR 0 4
52849: ARRAY
52850: PPUSH
52851: CALL_OW 266
52855: PUSH
52856: LD_VAR 0 3
52860: PUSH
52861: LD_VAR 0 4
52865: ARRAY
52866: PPUSH
52867: CALL_OW 250
52871: PUSH
52872: LD_VAR 0 3
52876: PUSH
52877: LD_VAR 0 4
52881: ARRAY
52882: PPUSH
52883: CALL_OW 251
52887: PUSH
52888: LD_VAR 0 3
52892: PUSH
52893: LD_VAR 0 4
52897: ARRAY
52898: PPUSH
52899: CALL_OW 254
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: PUSH
52910: EMPTY
52911: LIST
52912: ADD
52913: ST_TO_ADDR
52914: GO 52827
52916: POP
52917: POP
// result := list ;
52918: LD_ADDR_VAR 0 2
52922: PUSH
52923: LD_VAR 0 5
52927: ST_TO_ADDR
// end ;
52928: LD_VAR 0 2
52932: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
52933: LD_INT 0
52935: PPUSH
52936: PPUSH
52937: PPUSH
52938: PPUSH
52939: PPUSH
52940: PPUSH
52941: PPUSH
// if not factory then
52942: LD_VAR 0 1
52946: NOT
52947: IFFALSE 52951
// exit ;
52949: GO 53544
// if control = control_apeman then
52951: LD_VAR 0 4
52955: PUSH
52956: LD_INT 5
52958: EQUAL
52959: IFFALSE 53068
// begin tmp := UnitsInside ( factory ) ;
52961: LD_ADDR_VAR 0 8
52965: PUSH
52966: LD_VAR 0 1
52970: PPUSH
52971: CALL_OW 313
52975: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
52976: LD_VAR 0 8
52980: PPUSH
52981: LD_INT 25
52983: PUSH
52984: LD_INT 12
52986: PUSH
52987: EMPTY
52988: LIST
52989: LIST
52990: PPUSH
52991: CALL_OW 72
52995: NOT
52996: IFFALSE 53006
// control := control_manual ;
52998: LD_ADDR_VAR 0 4
53002: PUSH
53003: LD_INT 1
53005: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
53006: LD_ADDR_VAR 0 8
53010: PUSH
53011: LD_VAR 0 1
53015: PPUSH
53016: CALL 52703 0 1
53020: ST_TO_ADDR
// if tmp then
53021: LD_VAR 0 8
53025: IFFALSE 53068
// begin for i in tmp do
53027: LD_ADDR_VAR 0 7
53031: PUSH
53032: LD_VAR 0 8
53036: PUSH
53037: FOR_IN
53038: IFFALSE 53066
// if i [ 1 ] = b_ext_radio then
53040: LD_VAR 0 7
53044: PUSH
53045: LD_INT 1
53047: ARRAY
53048: PUSH
53049: LD_INT 22
53051: EQUAL
53052: IFFALSE 53064
// begin control := control_remote ;
53054: LD_ADDR_VAR 0 4
53058: PUSH
53059: LD_INT 2
53061: ST_TO_ADDR
// break ;
53062: GO 53066
// end ;
53064: GO 53037
53066: POP
53067: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
53068: LD_VAR 0 1
53072: PPUSH
53073: LD_VAR 0 2
53077: PPUSH
53078: LD_VAR 0 3
53082: PPUSH
53083: LD_VAR 0 4
53087: PPUSH
53088: LD_VAR 0 5
53092: PPUSH
53093: CALL_OW 448
53097: IFFALSE 53132
// begin result := [ chassis , engine , control , weapon ] ;
53099: LD_ADDR_VAR 0 6
53103: PUSH
53104: LD_VAR 0 2
53108: PUSH
53109: LD_VAR 0 3
53113: PUSH
53114: LD_VAR 0 4
53118: PUSH
53119: LD_VAR 0 5
53123: PUSH
53124: EMPTY
53125: LIST
53126: LIST
53127: LIST
53128: LIST
53129: ST_TO_ADDR
// exit ;
53130: GO 53544
// end ; _chassis := AvailableChassisList ( factory ) ;
53132: LD_ADDR_VAR 0 9
53136: PUSH
53137: LD_VAR 0 1
53141: PPUSH
53142: CALL_OW 475
53146: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
53147: LD_ADDR_VAR 0 11
53151: PUSH
53152: LD_VAR 0 1
53156: PPUSH
53157: CALL_OW 476
53161: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
53162: LD_ADDR_VAR 0 12
53166: PUSH
53167: LD_VAR 0 1
53171: PPUSH
53172: CALL_OW 477
53176: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
53177: LD_ADDR_VAR 0 10
53181: PUSH
53182: LD_VAR 0 1
53186: PPUSH
53187: CALL_OW 478
53191: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
53192: LD_VAR 0 9
53196: NOT
53197: PUSH
53198: LD_VAR 0 11
53202: NOT
53203: OR
53204: PUSH
53205: LD_VAR 0 12
53209: NOT
53210: OR
53211: PUSH
53212: LD_VAR 0 10
53216: NOT
53217: OR
53218: IFFALSE 53253
// begin result := [ chassis , engine , control , weapon ] ;
53220: LD_ADDR_VAR 0 6
53224: PUSH
53225: LD_VAR 0 2
53229: PUSH
53230: LD_VAR 0 3
53234: PUSH
53235: LD_VAR 0 4
53239: PUSH
53240: LD_VAR 0 5
53244: PUSH
53245: EMPTY
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: ST_TO_ADDR
// exit ;
53251: GO 53544
// end ; if not chassis in _chassis then
53253: LD_VAR 0 2
53257: PUSH
53258: LD_VAR 0 9
53262: IN
53263: NOT
53264: IFFALSE 53290
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
53266: LD_ADDR_VAR 0 2
53270: PUSH
53271: LD_VAR 0 9
53275: PUSH
53276: LD_INT 1
53278: PPUSH
53279: LD_VAR 0 9
53283: PPUSH
53284: CALL_OW 12
53288: ARRAY
53289: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
53290: LD_VAR 0 2
53294: PPUSH
53295: LD_VAR 0 3
53299: PPUSH
53300: CALL 53549 0 2
53304: NOT
53305: IFFALSE 53364
// repeat engine := _engine [ 1 ] ;
53307: LD_ADDR_VAR 0 3
53311: PUSH
53312: LD_VAR 0 11
53316: PUSH
53317: LD_INT 1
53319: ARRAY
53320: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
53321: LD_ADDR_VAR 0 11
53325: PUSH
53326: LD_VAR 0 11
53330: PPUSH
53331: LD_INT 1
53333: PPUSH
53334: CALL_OW 3
53338: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
53339: LD_VAR 0 2
53343: PPUSH
53344: LD_VAR 0 3
53348: PPUSH
53349: CALL 53549 0 2
53353: PUSH
53354: LD_VAR 0 11
53358: PUSH
53359: EMPTY
53360: EQUAL
53361: OR
53362: IFFALSE 53307
// if not control in _control then
53364: LD_VAR 0 4
53368: PUSH
53369: LD_VAR 0 12
53373: IN
53374: NOT
53375: IFFALSE 53401
// control := _control [ rand ( 1 , _control ) ] ;
53377: LD_ADDR_VAR 0 4
53381: PUSH
53382: LD_VAR 0 12
53386: PUSH
53387: LD_INT 1
53389: PPUSH
53390: LD_VAR 0 12
53394: PPUSH
53395: CALL_OW 12
53399: ARRAY
53400: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
53401: LD_VAR 0 2
53405: PPUSH
53406: LD_VAR 0 5
53410: PPUSH
53411: CALL 53769 0 2
53415: NOT
53416: IFFALSE 53475
// repeat weapon := _weapon [ 1 ] ;
53418: LD_ADDR_VAR 0 5
53422: PUSH
53423: LD_VAR 0 10
53427: PUSH
53428: LD_INT 1
53430: ARRAY
53431: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
53432: LD_ADDR_VAR 0 10
53436: PUSH
53437: LD_VAR 0 10
53441: PPUSH
53442: LD_INT 1
53444: PPUSH
53445: CALL_OW 3
53449: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
53450: LD_VAR 0 2
53454: PPUSH
53455: LD_VAR 0 5
53459: PPUSH
53460: CALL 53769 0 2
53464: PUSH
53465: LD_VAR 0 10
53469: PUSH
53470: EMPTY
53471: EQUAL
53472: OR
53473: IFFALSE 53418
// result := [ ] ;
53475: LD_ADDR_VAR 0 6
53479: PUSH
53480: EMPTY
53481: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
53482: LD_VAR 0 1
53486: PPUSH
53487: LD_VAR 0 2
53491: PPUSH
53492: LD_VAR 0 3
53496: PPUSH
53497: LD_VAR 0 4
53501: PPUSH
53502: LD_VAR 0 5
53506: PPUSH
53507: CALL_OW 448
53511: IFFALSE 53544
// result := [ chassis , engine , control , weapon ] ;
53513: LD_ADDR_VAR 0 6
53517: PUSH
53518: LD_VAR 0 2
53522: PUSH
53523: LD_VAR 0 3
53527: PUSH
53528: LD_VAR 0 4
53532: PUSH
53533: LD_VAR 0 5
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: LIST
53542: LIST
53543: ST_TO_ADDR
// end ;
53544: LD_VAR 0 6
53548: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
53549: LD_INT 0
53551: PPUSH
// if not chassis or not engine then
53552: LD_VAR 0 1
53556: NOT
53557: PUSH
53558: LD_VAR 0 2
53562: NOT
53563: OR
53564: IFFALSE 53568
// exit ;
53566: GO 53764
// case engine of engine_solar :
53568: LD_VAR 0 2
53572: PUSH
53573: LD_INT 2
53575: DOUBLE
53576: EQUAL
53577: IFTRUE 53581
53579: GO 53619
53581: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
53582: LD_ADDR_VAR 0 3
53586: PUSH
53587: LD_INT 11
53589: PUSH
53590: LD_INT 12
53592: PUSH
53593: LD_INT 13
53595: PUSH
53596: LD_INT 14
53598: PUSH
53599: LD_INT 1
53601: PUSH
53602: LD_INT 2
53604: PUSH
53605: LD_INT 3
53607: PUSH
53608: EMPTY
53609: LIST
53610: LIST
53611: LIST
53612: LIST
53613: LIST
53614: LIST
53615: LIST
53616: ST_TO_ADDR
53617: GO 53748
53619: LD_INT 1
53621: DOUBLE
53622: EQUAL
53623: IFTRUE 53627
53625: GO 53689
53627: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
53628: LD_ADDR_VAR 0 3
53632: PUSH
53633: LD_INT 11
53635: PUSH
53636: LD_INT 12
53638: PUSH
53639: LD_INT 13
53641: PUSH
53642: LD_INT 14
53644: PUSH
53645: LD_INT 1
53647: PUSH
53648: LD_INT 2
53650: PUSH
53651: LD_INT 3
53653: PUSH
53654: LD_INT 4
53656: PUSH
53657: LD_INT 5
53659: PUSH
53660: LD_INT 21
53662: PUSH
53663: LD_INT 23
53665: PUSH
53666: LD_INT 22
53668: PUSH
53669: LD_INT 24
53671: PUSH
53672: EMPTY
53673: LIST
53674: LIST
53675: LIST
53676: LIST
53677: LIST
53678: LIST
53679: LIST
53680: LIST
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: ST_TO_ADDR
53687: GO 53748
53689: LD_INT 3
53691: DOUBLE
53692: EQUAL
53693: IFTRUE 53697
53695: GO 53747
53697: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
53698: LD_ADDR_VAR 0 3
53702: PUSH
53703: LD_INT 13
53705: PUSH
53706: LD_INT 14
53708: PUSH
53709: LD_INT 2
53711: PUSH
53712: LD_INT 3
53714: PUSH
53715: LD_INT 4
53717: PUSH
53718: LD_INT 5
53720: PUSH
53721: LD_INT 21
53723: PUSH
53724: LD_INT 22
53726: PUSH
53727: LD_INT 23
53729: PUSH
53730: LD_INT 24
53732: PUSH
53733: EMPTY
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: LIST
53740: LIST
53741: LIST
53742: LIST
53743: LIST
53744: ST_TO_ADDR
53745: GO 53748
53747: POP
// result := ( chassis in result ) ;
53748: LD_ADDR_VAR 0 3
53752: PUSH
53753: LD_VAR 0 1
53757: PUSH
53758: LD_VAR 0 3
53762: IN
53763: ST_TO_ADDR
// end ;
53764: LD_VAR 0 3
53768: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
53769: LD_INT 0
53771: PPUSH
// if not chassis or not weapon then
53772: LD_VAR 0 1
53776: NOT
53777: PUSH
53778: LD_VAR 0 2
53782: NOT
53783: OR
53784: IFFALSE 53788
// exit ;
53786: GO 54848
// case weapon of us_machine_gun :
53788: LD_VAR 0 2
53792: PUSH
53793: LD_INT 2
53795: DOUBLE
53796: EQUAL
53797: IFTRUE 53801
53799: GO 53831
53801: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
53802: LD_ADDR_VAR 0 3
53806: PUSH
53807: LD_INT 1
53809: PUSH
53810: LD_INT 2
53812: PUSH
53813: LD_INT 3
53815: PUSH
53816: LD_INT 4
53818: PUSH
53819: LD_INT 5
53821: PUSH
53822: EMPTY
53823: LIST
53824: LIST
53825: LIST
53826: LIST
53827: LIST
53828: ST_TO_ADDR
53829: GO 54832
53831: LD_INT 3
53833: DOUBLE
53834: EQUAL
53835: IFTRUE 53839
53837: GO 53869
53839: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
53840: LD_ADDR_VAR 0 3
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: LD_INT 2
53850: PUSH
53851: LD_INT 3
53853: PUSH
53854: LD_INT 4
53856: PUSH
53857: LD_INT 5
53859: PUSH
53860: EMPTY
53861: LIST
53862: LIST
53863: LIST
53864: LIST
53865: LIST
53866: ST_TO_ADDR
53867: GO 54832
53869: LD_INT 11
53871: DOUBLE
53872: EQUAL
53873: IFTRUE 53877
53875: GO 53907
53877: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
53878: LD_ADDR_VAR 0 3
53882: PUSH
53883: LD_INT 1
53885: PUSH
53886: LD_INT 2
53888: PUSH
53889: LD_INT 3
53891: PUSH
53892: LD_INT 4
53894: PUSH
53895: LD_INT 5
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: LIST
53902: LIST
53903: LIST
53904: ST_TO_ADDR
53905: GO 54832
53907: LD_INT 4
53909: DOUBLE
53910: EQUAL
53911: IFTRUE 53915
53913: GO 53941
53915: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
53916: LD_ADDR_VAR 0 3
53920: PUSH
53921: LD_INT 2
53923: PUSH
53924: LD_INT 3
53926: PUSH
53927: LD_INT 4
53929: PUSH
53930: LD_INT 5
53932: PUSH
53933: EMPTY
53934: LIST
53935: LIST
53936: LIST
53937: LIST
53938: ST_TO_ADDR
53939: GO 54832
53941: LD_INT 5
53943: DOUBLE
53944: EQUAL
53945: IFTRUE 53949
53947: GO 53975
53949: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
53950: LD_ADDR_VAR 0 3
53954: PUSH
53955: LD_INT 2
53957: PUSH
53958: LD_INT 3
53960: PUSH
53961: LD_INT 4
53963: PUSH
53964: LD_INT 5
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: ST_TO_ADDR
53973: GO 54832
53975: LD_INT 9
53977: DOUBLE
53978: EQUAL
53979: IFTRUE 53983
53981: GO 54009
53983: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
53984: LD_ADDR_VAR 0 3
53988: PUSH
53989: LD_INT 2
53991: PUSH
53992: LD_INT 3
53994: PUSH
53995: LD_INT 4
53997: PUSH
53998: LD_INT 5
54000: PUSH
54001: EMPTY
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: ST_TO_ADDR
54007: GO 54832
54009: LD_INT 7
54011: DOUBLE
54012: EQUAL
54013: IFTRUE 54017
54015: GO 54043
54017: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
54018: LD_ADDR_VAR 0 3
54022: PUSH
54023: LD_INT 2
54025: PUSH
54026: LD_INT 3
54028: PUSH
54029: LD_INT 4
54031: PUSH
54032: LD_INT 5
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: ST_TO_ADDR
54041: GO 54832
54043: LD_INT 12
54045: DOUBLE
54046: EQUAL
54047: IFTRUE 54051
54049: GO 54077
54051: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
54052: LD_ADDR_VAR 0 3
54056: PUSH
54057: LD_INT 2
54059: PUSH
54060: LD_INT 3
54062: PUSH
54063: LD_INT 4
54065: PUSH
54066: LD_INT 5
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: LIST
54073: LIST
54074: ST_TO_ADDR
54075: GO 54832
54077: LD_INT 13
54079: DOUBLE
54080: EQUAL
54081: IFTRUE 54085
54083: GO 54111
54085: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
54086: LD_ADDR_VAR 0 3
54090: PUSH
54091: LD_INT 2
54093: PUSH
54094: LD_INT 3
54096: PUSH
54097: LD_INT 4
54099: PUSH
54100: LD_INT 5
54102: PUSH
54103: EMPTY
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: ST_TO_ADDR
54109: GO 54832
54111: LD_INT 14
54113: DOUBLE
54114: EQUAL
54115: IFTRUE 54119
54117: GO 54137
54119: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
54120: LD_ADDR_VAR 0 3
54124: PUSH
54125: LD_INT 4
54127: PUSH
54128: LD_INT 5
54130: PUSH
54131: EMPTY
54132: LIST
54133: LIST
54134: ST_TO_ADDR
54135: GO 54832
54137: LD_INT 6
54139: DOUBLE
54140: EQUAL
54141: IFTRUE 54145
54143: GO 54163
54145: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
54146: LD_ADDR_VAR 0 3
54150: PUSH
54151: LD_INT 4
54153: PUSH
54154: LD_INT 5
54156: PUSH
54157: EMPTY
54158: LIST
54159: LIST
54160: ST_TO_ADDR
54161: GO 54832
54163: LD_INT 10
54165: DOUBLE
54166: EQUAL
54167: IFTRUE 54171
54169: GO 54189
54171: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
54172: LD_ADDR_VAR 0 3
54176: PUSH
54177: LD_INT 4
54179: PUSH
54180: LD_INT 5
54182: PUSH
54183: EMPTY
54184: LIST
54185: LIST
54186: ST_TO_ADDR
54187: GO 54832
54189: LD_INT 22
54191: DOUBLE
54192: EQUAL
54193: IFTRUE 54197
54195: GO 54223
54197: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
54198: LD_ADDR_VAR 0 3
54202: PUSH
54203: LD_INT 11
54205: PUSH
54206: LD_INT 12
54208: PUSH
54209: LD_INT 13
54211: PUSH
54212: LD_INT 14
54214: PUSH
54215: EMPTY
54216: LIST
54217: LIST
54218: LIST
54219: LIST
54220: ST_TO_ADDR
54221: GO 54832
54223: LD_INT 23
54225: DOUBLE
54226: EQUAL
54227: IFTRUE 54231
54229: GO 54257
54231: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
54232: LD_ADDR_VAR 0 3
54236: PUSH
54237: LD_INT 11
54239: PUSH
54240: LD_INT 12
54242: PUSH
54243: LD_INT 13
54245: PUSH
54246: LD_INT 14
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: ST_TO_ADDR
54255: GO 54832
54257: LD_INT 24
54259: DOUBLE
54260: EQUAL
54261: IFTRUE 54265
54263: GO 54291
54265: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
54266: LD_ADDR_VAR 0 3
54270: PUSH
54271: LD_INT 11
54273: PUSH
54274: LD_INT 12
54276: PUSH
54277: LD_INT 13
54279: PUSH
54280: LD_INT 14
54282: PUSH
54283: EMPTY
54284: LIST
54285: LIST
54286: LIST
54287: LIST
54288: ST_TO_ADDR
54289: GO 54832
54291: LD_INT 30
54293: DOUBLE
54294: EQUAL
54295: IFTRUE 54299
54297: GO 54325
54299: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
54300: LD_ADDR_VAR 0 3
54304: PUSH
54305: LD_INT 11
54307: PUSH
54308: LD_INT 12
54310: PUSH
54311: LD_INT 13
54313: PUSH
54314: LD_INT 14
54316: PUSH
54317: EMPTY
54318: LIST
54319: LIST
54320: LIST
54321: LIST
54322: ST_TO_ADDR
54323: GO 54832
54325: LD_INT 25
54327: DOUBLE
54328: EQUAL
54329: IFTRUE 54333
54331: GO 54351
54333: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
54334: LD_ADDR_VAR 0 3
54338: PUSH
54339: LD_INT 13
54341: PUSH
54342: LD_INT 14
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: ST_TO_ADDR
54349: GO 54832
54351: LD_INT 27
54353: DOUBLE
54354: EQUAL
54355: IFTRUE 54359
54357: GO 54377
54359: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
54360: LD_ADDR_VAR 0 3
54364: PUSH
54365: LD_INT 13
54367: PUSH
54368: LD_INT 14
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: ST_TO_ADDR
54375: GO 54832
54377: LD_INT 92
54379: DOUBLE
54380: EQUAL
54381: IFTRUE 54385
54383: GO 54411
54385: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
54386: LD_ADDR_VAR 0 3
54390: PUSH
54391: LD_INT 11
54393: PUSH
54394: LD_INT 12
54396: PUSH
54397: LD_INT 13
54399: PUSH
54400: LD_INT 14
54402: PUSH
54403: EMPTY
54404: LIST
54405: LIST
54406: LIST
54407: LIST
54408: ST_TO_ADDR
54409: GO 54832
54411: LD_INT 28
54413: DOUBLE
54414: EQUAL
54415: IFTRUE 54419
54417: GO 54437
54419: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
54420: LD_ADDR_VAR 0 3
54424: PUSH
54425: LD_INT 13
54427: PUSH
54428: LD_INT 14
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: ST_TO_ADDR
54435: GO 54832
54437: LD_INT 29
54439: DOUBLE
54440: EQUAL
54441: IFTRUE 54445
54443: GO 54463
54445: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
54446: LD_ADDR_VAR 0 3
54450: PUSH
54451: LD_INT 13
54453: PUSH
54454: LD_INT 14
54456: PUSH
54457: EMPTY
54458: LIST
54459: LIST
54460: ST_TO_ADDR
54461: GO 54832
54463: LD_INT 31
54465: DOUBLE
54466: EQUAL
54467: IFTRUE 54471
54469: GO 54489
54471: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
54472: LD_ADDR_VAR 0 3
54476: PUSH
54477: LD_INT 13
54479: PUSH
54480: LD_INT 14
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: ST_TO_ADDR
54487: GO 54832
54489: LD_INT 26
54491: DOUBLE
54492: EQUAL
54493: IFTRUE 54497
54495: GO 54515
54497: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
54498: LD_ADDR_VAR 0 3
54502: PUSH
54503: LD_INT 13
54505: PUSH
54506: LD_INT 14
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: ST_TO_ADDR
54513: GO 54832
54515: LD_INT 42
54517: DOUBLE
54518: EQUAL
54519: IFTRUE 54523
54521: GO 54549
54523: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
54524: LD_ADDR_VAR 0 3
54528: PUSH
54529: LD_INT 21
54531: PUSH
54532: LD_INT 22
54534: PUSH
54535: LD_INT 23
54537: PUSH
54538: LD_INT 24
54540: PUSH
54541: EMPTY
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: ST_TO_ADDR
54547: GO 54832
54549: LD_INT 43
54551: DOUBLE
54552: EQUAL
54553: IFTRUE 54557
54555: GO 54583
54557: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
54558: LD_ADDR_VAR 0 3
54562: PUSH
54563: LD_INT 21
54565: PUSH
54566: LD_INT 22
54568: PUSH
54569: LD_INT 23
54571: PUSH
54572: LD_INT 24
54574: PUSH
54575: EMPTY
54576: LIST
54577: LIST
54578: LIST
54579: LIST
54580: ST_TO_ADDR
54581: GO 54832
54583: LD_INT 44
54585: DOUBLE
54586: EQUAL
54587: IFTRUE 54591
54589: GO 54617
54591: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
54592: LD_ADDR_VAR 0 3
54596: PUSH
54597: LD_INT 21
54599: PUSH
54600: LD_INT 22
54602: PUSH
54603: LD_INT 23
54605: PUSH
54606: LD_INT 24
54608: PUSH
54609: EMPTY
54610: LIST
54611: LIST
54612: LIST
54613: LIST
54614: ST_TO_ADDR
54615: GO 54832
54617: LD_INT 45
54619: DOUBLE
54620: EQUAL
54621: IFTRUE 54625
54623: GO 54651
54625: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
54626: LD_ADDR_VAR 0 3
54630: PUSH
54631: LD_INT 21
54633: PUSH
54634: LD_INT 22
54636: PUSH
54637: LD_INT 23
54639: PUSH
54640: LD_INT 24
54642: PUSH
54643: EMPTY
54644: LIST
54645: LIST
54646: LIST
54647: LIST
54648: ST_TO_ADDR
54649: GO 54832
54651: LD_INT 49
54653: DOUBLE
54654: EQUAL
54655: IFTRUE 54659
54657: GO 54685
54659: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
54660: LD_ADDR_VAR 0 3
54664: PUSH
54665: LD_INT 21
54667: PUSH
54668: LD_INT 22
54670: PUSH
54671: LD_INT 23
54673: PUSH
54674: LD_INT 24
54676: PUSH
54677: EMPTY
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: ST_TO_ADDR
54683: GO 54832
54685: LD_INT 51
54687: DOUBLE
54688: EQUAL
54689: IFTRUE 54693
54691: GO 54719
54693: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
54694: LD_ADDR_VAR 0 3
54698: PUSH
54699: LD_INT 21
54701: PUSH
54702: LD_INT 22
54704: PUSH
54705: LD_INT 23
54707: PUSH
54708: LD_INT 24
54710: PUSH
54711: EMPTY
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: ST_TO_ADDR
54717: GO 54832
54719: LD_INT 52
54721: DOUBLE
54722: EQUAL
54723: IFTRUE 54727
54725: GO 54753
54727: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
54728: LD_ADDR_VAR 0 3
54732: PUSH
54733: LD_INT 21
54735: PUSH
54736: LD_INT 22
54738: PUSH
54739: LD_INT 23
54741: PUSH
54742: LD_INT 24
54744: PUSH
54745: EMPTY
54746: LIST
54747: LIST
54748: LIST
54749: LIST
54750: ST_TO_ADDR
54751: GO 54832
54753: LD_INT 53
54755: DOUBLE
54756: EQUAL
54757: IFTRUE 54761
54759: GO 54779
54761: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
54762: LD_ADDR_VAR 0 3
54766: PUSH
54767: LD_INT 23
54769: PUSH
54770: LD_INT 24
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: ST_TO_ADDR
54777: GO 54832
54779: LD_INT 46
54781: DOUBLE
54782: EQUAL
54783: IFTRUE 54787
54785: GO 54805
54787: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
54788: LD_ADDR_VAR 0 3
54792: PUSH
54793: LD_INT 23
54795: PUSH
54796: LD_INT 24
54798: PUSH
54799: EMPTY
54800: LIST
54801: LIST
54802: ST_TO_ADDR
54803: GO 54832
54805: LD_INT 47
54807: DOUBLE
54808: EQUAL
54809: IFTRUE 54813
54811: GO 54831
54813: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
54814: LD_ADDR_VAR 0 3
54818: PUSH
54819: LD_INT 23
54821: PUSH
54822: LD_INT 24
54824: PUSH
54825: EMPTY
54826: LIST
54827: LIST
54828: ST_TO_ADDR
54829: GO 54832
54831: POP
// result := ( chassis in result ) ;
54832: LD_ADDR_VAR 0 3
54836: PUSH
54837: LD_VAR 0 1
54841: PUSH
54842: LD_VAR 0 3
54846: IN
54847: ST_TO_ADDR
// end ;
54848: LD_VAR 0 3
54852: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
54853: LD_INT 0
54855: PPUSH
54856: PPUSH
54857: PPUSH
54858: PPUSH
54859: PPUSH
54860: PPUSH
54861: PPUSH
// result := array ;
54862: LD_ADDR_VAR 0 5
54866: PUSH
54867: LD_VAR 0 1
54871: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
54872: LD_VAR 0 1
54876: NOT
54877: PUSH
54878: LD_VAR 0 2
54882: NOT
54883: OR
54884: PUSH
54885: LD_VAR 0 3
54889: NOT
54890: OR
54891: PUSH
54892: LD_VAR 0 2
54896: PUSH
54897: LD_VAR 0 1
54901: GREATER
54902: OR
54903: PUSH
54904: LD_VAR 0 3
54908: PUSH
54909: LD_VAR 0 1
54913: GREATER
54914: OR
54915: IFFALSE 54919
// exit ;
54917: GO 55215
// if direction then
54919: LD_VAR 0 4
54923: IFFALSE 54987
// begin d := 1 ;
54925: LD_ADDR_VAR 0 9
54929: PUSH
54930: LD_INT 1
54932: ST_TO_ADDR
// if i_from > i_to then
54933: LD_VAR 0 2
54937: PUSH
54938: LD_VAR 0 3
54942: GREATER
54943: IFFALSE 54969
// length := ( array - i_from ) + i_to else
54945: LD_ADDR_VAR 0 11
54949: PUSH
54950: LD_VAR 0 1
54954: PUSH
54955: LD_VAR 0 2
54959: MINUS
54960: PUSH
54961: LD_VAR 0 3
54965: PLUS
54966: ST_TO_ADDR
54967: GO 54985
// length := i_to - i_from ;
54969: LD_ADDR_VAR 0 11
54973: PUSH
54974: LD_VAR 0 3
54978: PUSH
54979: LD_VAR 0 2
54983: MINUS
54984: ST_TO_ADDR
// end else
54985: GO 55048
// begin d := - 1 ;
54987: LD_ADDR_VAR 0 9
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: ST_TO_ADDR
// if i_from > i_to then
54996: LD_VAR 0 2
55000: PUSH
55001: LD_VAR 0 3
55005: GREATER
55006: IFFALSE 55026
// length := i_from - i_to else
55008: LD_ADDR_VAR 0 11
55012: PUSH
55013: LD_VAR 0 2
55017: PUSH
55018: LD_VAR 0 3
55022: MINUS
55023: ST_TO_ADDR
55024: GO 55048
// length := ( array - i_to ) + i_from ;
55026: LD_ADDR_VAR 0 11
55030: PUSH
55031: LD_VAR 0 1
55035: PUSH
55036: LD_VAR 0 3
55040: MINUS
55041: PUSH
55042: LD_VAR 0 2
55046: PLUS
55047: ST_TO_ADDR
// end ; if not length then
55048: LD_VAR 0 11
55052: NOT
55053: IFFALSE 55057
// exit ;
55055: GO 55215
// tmp := array ;
55057: LD_ADDR_VAR 0 10
55061: PUSH
55062: LD_VAR 0 1
55066: ST_TO_ADDR
// for i = 1 to length do
55067: LD_ADDR_VAR 0 6
55071: PUSH
55072: DOUBLE
55073: LD_INT 1
55075: DEC
55076: ST_TO_ADDR
55077: LD_VAR 0 11
55081: PUSH
55082: FOR_TO
55083: IFFALSE 55203
// begin for j = 1 to array do
55085: LD_ADDR_VAR 0 7
55089: PUSH
55090: DOUBLE
55091: LD_INT 1
55093: DEC
55094: ST_TO_ADDR
55095: LD_VAR 0 1
55099: PUSH
55100: FOR_TO
55101: IFFALSE 55189
// begin k := j + d ;
55103: LD_ADDR_VAR 0 8
55107: PUSH
55108: LD_VAR 0 7
55112: PUSH
55113: LD_VAR 0 9
55117: PLUS
55118: ST_TO_ADDR
// if k > array then
55119: LD_VAR 0 8
55123: PUSH
55124: LD_VAR 0 1
55128: GREATER
55129: IFFALSE 55139
// k := 1 ;
55131: LD_ADDR_VAR 0 8
55135: PUSH
55136: LD_INT 1
55138: ST_TO_ADDR
// if not k then
55139: LD_VAR 0 8
55143: NOT
55144: IFFALSE 55156
// k := array ;
55146: LD_ADDR_VAR 0 8
55150: PUSH
55151: LD_VAR 0 1
55155: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
55156: LD_ADDR_VAR 0 10
55160: PUSH
55161: LD_VAR 0 10
55165: PPUSH
55166: LD_VAR 0 8
55170: PPUSH
55171: LD_VAR 0 1
55175: PUSH
55176: LD_VAR 0 7
55180: ARRAY
55181: PPUSH
55182: CALL_OW 1
55186: ST_TO_ADDR
// end ;
55187: GO 55100
55189: POP
55190: POP
// array := tmp ;
55191: LD_ADDR_VAR 0 1
55195: PUSH
55196: LD_VAR 0 10
55200: ST_TO_ADDR
// end ;
55201: GO 55082
55203: POP
55204: POP
// result := array ;
55205: LD_ADDR_VAR 0 5
55209: PUSH
55210: LD_VAR 0 1
55214: ST_TO_ADDR
// end ;
55215: LD_VAR 0 5
55219: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
55220: LD_INT 0
55222: PPUSH
55223: PPUSH
// result := 0 ;
55224: LD_ADDR_VAR 0 3
55228: PUSH
55229: LD_INT 0
55231: ST_TO_ADDR
// if not array or not value in array then
55232: LD_VAR 0 1
55236: NOT
55237: PUSH
55238: LD_VAR 0 2
55242: PUSH
55243: LD_VAR 0 1
55247: IN
55248: NOT
55249: OR
55250: IFFALSE 55254
// exit ;
55252: GO 55308
// for i = 1 to array do
55254: LD_ADDR_VAR 0 4
55258: PUSH
55259: DOUBLE
55260: LD_INT 1
55262: DEC
55263: ST_TO_ADDR
55264: LD_VAR 0 1
55268: PUSH
55269: FOR_TO
55270: IFFALSE 55306
// if value = array [ i ] then
55272: LD_VAR 0 2
55276: PUSH
55277: LD_VAR 0 1
55281: PUSH
55282: LD_VAR 0 4
55286: ARRAY
55287: EQUAL
55288: IFFALSE 55304
// begin result := i ;
55290: LD_ADDR_VAR 0 3
55294: PUSH
55295: LD_VAR 0 4
55299: ST_TO_ADDR
// exit ;
55300: POP
55301: POP
55302: GO 55308
// end ;
55304: GO 55269
55306: POP
55307: POP
// end ;
55308: LD_VAR 0 3
55312: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
55313: LD_INT 0
55315: PPUSH
// vc_chassis := chassis ;
55316: LD_ADDR_OWVAR 37
55320: PUSH
55321: LD_VAR 0 1
55325: ST_TO_ADDR
// vc_engine := engine ;
55326: LD_ADDR_OWVAR 39
55330: PUSH
55331: LD_VAR 0 2
55335: ST_TO_ADDR
// vc_control := control ;
55336: LD_ADDR_OWVAR 38
55340: PUSH
55341: LD_VAR 0 3
55345: ST_TO_ADDR
// vc_weapon := weapon ;
55346: LD_ADDR_OWVAR 40
55350: PUSH
55351: LD_VAR 0 4
55355: ST_TO_ADDR
// vc_fuel_battery := fuel ;
55356: LD_ADDR_OWVAR 41
55360: PUSH
55361: LD_VAR 0 5
55365: ST_TO_ADDR
// end ;
55366: LD_VAR 0 6
55370: RET
// export function WantPlant ( unit ) ; var task ; begin
55371: LD_INT 0
55373: PPUSH
55374: PPUSH
// result := false ;
55375: LD_ADDR_VAR 0 2
55379: PUSH
55380: LD_INT 0
55382: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
55383: LD_ADDR_VAR 0 3
55387: PUSH
55388: LD_VAR 0 1
55392: PPUSH
55393: CALL_OW 437
55397: ST_TO_ADDR
// if task then
55398: LD_VAR 0 3
55402: IFFALSE 55430
// if task [ 1 ] [ 1 ] = p then
55404: LD_VAR 0 3
55408: PUSH
55409: LD_INT 1
55411: ARRAY
55412: PUSH
55413: LD_INT 1
55415: ARRAY
55416: PUSH
55417: LD_STRING p
55419: EQUAL
55420: IFFALSE 55430
// result := true ;
55422: LD_ADDR_VAR 0 2
55426: PUSH
55427: LD_INT 1
55429: ST_TO_ADDR
// end ;
55430: LD_VAR 0 2
55434: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
55435: LD_INT 0
55437: PPUSH
55438: PPUSH
55439: PPUSH
55440: PPUSH
// if pos < 1 then
55441: LD_VAR 0 2
55445: PUSH
55446: LD_INT 1
55448: LESS
55449: IFFALSE 55453
// exit ;
55451: GO 55756
// if pos = 1 then
55453: LD_VAR 0 2
55457: PUSH
55458: LD_INT 1
55460: EQUAL
55461: IFFALSE 55494
// result := Replace ( arr , pos [ 1 ] , value ) else
55463: LD_ADDR_VAR 0 4
55467: PUSH
55468: LD_VAR 0 1
55472: PPUSH
55473: LD_VAR 0 2
55477: PUSH
55478: LD_INT 1
55480: ARRAY
55481: PPUSH
55482: LD_VAR 0 3
55486: PPUSH
55487: CALL_OW 1
55491: ST_TO_ADDR
55492: GO 55756
// begin tmp := arr ;
55494: LD_ADDR_VAR 0 6
55498: PUSH
55499: LD_VAR 0 1
55503: ST_TO_ADDR
// s_arr := [ tmp ] ;
55504: LD_ADDR_VAR 0 7
55508: PUSH
55509: LD_VAR 0 6
55513: PUSH
55514: EMPTY
55515: LIST
55516: ST_TO_ADDR
// for i = 1 to pos - 1 do
55517: LD_ADDR_VAR 0 5
55521: PUSH
55522: DOUBLE
55523: LD_INT 1
55525: DEC
55526: ST_TO_ADDR
55527: LD_VAR 0 2
55531: PUSH
55532: LD_INT 1
55534: MINUS
55535: PUSH
55536: FOR_TO
55537: IFFALSE 55582
// begin tmp := tmp [ pos [ i ] ] ;
55539: LD_ADDR_VAR 0 6
55543: PUSH
55544: LD_VAR 0 6
55548: PUSH
55549: LD_VAR 0 2
55553: PUSH
55554: LD_VAR 0 5
55558: ARRAY
55559: ARRAY
55560: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
55561: LD_ADDR_VAR 0 7
55565: PUSH
55566: LD_VAR 0 7
55570: PUSH
55571: LD_VAR 0 6
55575: PUSH
55576: EMPTY
55577: LIST
55578: ADD
55579: ST_TO_ADDR
// end ;
55580: GO 55536
55582: POP
55583: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
55584: LD_ADDR_VAR 0 6
55588: PUSH
55589: LD_VAR 0 6
55593: PPUSH
55594: LD_VAR 0 2
55598: PUSH
55599: LD_VAR 0 2
55603: ARRAY
55604: PPUSH
55605: LD_VAR 0 3
55609: PPUSH
55610: CALL_OW 1
55614: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
55615: LD_ADDR_VAR 0 7
55619: PUSH
55620: LD_VAR 0 7
55624: PPUSH
55625: LD_VAR 0 7
55629: PPUSH
55630: LD_VAR 0 6
55634: PPUSH
55635: CALL_OW 1
55639: ST_TO_ADDR
// for i = s_arr downto 2 do
55640: LD_ADDR_VAR 0 5
55644: PUSH
55645: DOUBLE
55646: LD_VAR 0 7
55650: INC
55651: ST_TO_ADDR
55652: LD_INT 2
55654: PUSH
55655: FOR_DOWNTO
55656: IFFALSE 55740
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
55658: LD_ADDR_VAR 0 6
55662: PUSH
55663: LD_VAR 0 7
55667: PUSH
55668: LD_VAR 0 5
55672: PUSH
55673: LD_INT 1
55675: MINUS
55676: ARRAY
55677: PPUSH
55678: LD_VAR 0 2
55682: PUSH
55683: LD_VAR 0 5
55687: PUSH
55688: LD_INT 1
55690: MINUS
55691: ARRAY
55692: PPUSH
55693: LD_VAR 0 7
55697: PUSH
55698: LD_VAR 0 5
55702: ARRAY
55703: PPUSH
55704: CALL_OW 1
55708: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
55709: LD_ADDR_VAR 0 7
55713: PUSH
55714: LD_VAR 0 7
55718: PPUSH
55719: LD_VAR 0 5
55723: PUSH
55724: LD_INT 1
55726: MINUS
55727: PPUSH
55728: LD_VAR 0 6
55732: PPUSH
55733: CALL_OW 1
55737: ST_TO_ADDR
// end ;
55738: GO 55655
55740: POP
55741: POP
// result := s_arr [ 1 ] ;
55742: LD_ADDR_VAR 0 4
55746: PUSH
55747: LD_VAR 0 7
55751: PUSH
55752: LD_INT 1
55754: ARRAY
55755: ST_TO_ADDR
// end ; end ;
55756: LD_VAR 0 4
55760: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
55761: LD_INT 0
55763: PPUSH
55764: PPUSH
// if not list then
55765: LD_VAR 0 1
55769: NOT
55770: IFFALSE 55774
// exit ;
55772: GO 55865
// i := list [ pos1 ] ;
55774: LD_ADDR_VAR 0 5
55778: PUSH
55779: LD_VAR 0 1
55783: PUSH
55784: LD_VAR 0 2
55788: ARRAY
55789: ST_TO_ADDR
// if not i then
55790: LD_VAR 0 5
55794: NOT
55795: IFFALSE 55799
// exit ;
55797: GO 55865
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
55799: LD_ADDR_VAR 0 1
55803: PUSH
55804: LD_VAR 0 1
55808: PPUSH
55809: LD_VAR 0 2
55813: PPUSH
55814: LD_VAR 0 1
55818: PUSH
55819: LD_VAR 0 3
55823: ARRAY
55824: PPUSH
55825: CALL_OW 1
55829: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
55830: LD_ADDR_VAR 0 1
55834: PUSH
55835: LD_VAR 0 1
55839: PPUSH
55840: LD_VAR 0 3
55844: PPUSH
55845: LD_VAR 0 5
55849: PPUSH
55850: CALL_OW 1
55854: ST_TO_ADDR
// result := list ;
55855: LD_ADDR_VAR 0 4
55859: PUSH
55860: LD_VAR 0 1
55864: ST_TO_ADDR
// end ;
55865: LD_VAR 0 4
55869: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
55870: LD_INT 0
55872: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
55873: LD_ADDR_VAR 0 5
55877: PUSH
55878: LD_VAR 0 1
55882: PPUSH
55883: CALL_OW 250
55887: PPUSH
55888: LD_VAR 0 1
55892: PPUSH
55893: CALL_OW 251
55897: PPUSH
55898: LD_VAR 0 2
55902: PPUSH
55903: LD_VAR 0 3
55907: PPUSH
55908: LD_VAR 0 4
55912: PPUSH
55913: CALL 55923 0 5
55917: ST_TO_ADDR
// end ;
55918: LD_VAR 0 5
55922: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
55923: LD_INT 0
55925: PPUSH
55926: PPUSH
55927: PPUSH
55928: PPUSH
// if not list then
55929: LD_VAR 0 3
55933: NOT
55934: IFFALSE 55938
// exit ;
55936: GO 56326
// result := [ ] ;
55938: LD_ADDR_VAR 0 6
55942: PUSH
55943: EMPTY
55944: ST_TO_ADDR
// for i in list do
55945: LD_ADDR_VAR 0 7
55949: PUSH
55950: LD_VAR 0 3
55954: PUSH
55955: FOR_IN
55956: IFFALSE 56158
// begin tmp := GetDistUnitXY ( i , x , y ) ;
55958: LD_ADDR_VAR 0 9
55962: PUSH
55963: LD_VAR 0 7
55967: PPUSH
55968: LD_VAR 0 1
55972: PPUSH
55973: LD_VAR 0 2
55977: PPUSH
55978: CALL_OW 297
55982: ST_TO_ADDR
// if not result then
55983: LD_VAR 0 6
55987: NOT
55988: IFFALSE 56014
// result := [ [ i , tmp ] ] else
55990: LD_ADDR_VAR 0 6
55994: PUSH
55995: LD_VAR 0 7
55999: PUSH
56000: LD_VAR 0 9
56004: PUSH
56005: EMPTY
56006: LIST
56007: LIST
56008: PUSH
56009: EMPTY
56010: LIST
56011: ST_TO_ADDR
56012: GO 56156
// begin if result [ result ] [ 2 ] < tmp then
56014: LD_VAR 0 6
56018: PUSH
56019: LD_VAR 0 6
56023: ARRAY
56024: PUSH
56025: LD_INT 2
56027: ARRAY
56028: PUSH
56029: LD_VAR 0 9
56033: LESS
56034: IFFALSE 56076
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
56036: LD_ADDR_VAR 0 6
56040: PUSH
56041: LD_VAR 0 6
56045: PPUSH
56046: LD_VAR 0 6
56050: PUSH
56051: LD_INT 1
56053: PLUS
56054: PPUSH
56055: LD_VAR 0 7
56059: PUSH
56060: LD_VAR 0 9
56064: PUSH
56065: EMPTY
56066: LIST
56067: LIST
56068: PPUSH
56069: CALL_OW 2
56073: ST_TO_ADDR
56074: GO 56156
// for j = 1 to result do
56076: LD_ADDR_VAR 0 8
56080: PUSH
56081: DOUBLE
56082: LD_INT 1
56084: DEC
56085: ST_TO_ADDR
56086: LD_VAR 0 6
56090: PUSH
56091: FOR_TO
56092: IFFALSE 56154
// begin if tmp < result [ j ] [ 2 ] then
56094: LD_VAR 0 9
56098: PUSH
56099: LD_VAR 0 6
56103: PUSH
56104: LD_VAR 0 8
56108: ARRAY
56109: PUSH
56110: LD_INT 2
56112: ARRAY
56113: LESS
56114: IFFALSE 56152
// begin result := Insert ( result , j , [ i , tmp ] ) ;
56116: LD_ADDR_VAR 0 6
56120: PUSH
56121: LD_VAR 0 6
56125: PPUSH
56126: LD_VAR 0 8
56130: PPUSH
56131: LD_VAR 0 7
56135: PUSH
56136: LD_VAR 0 9
56140: PUSH
56141: EMPTY
56142: LIST
56143: LIST
56144: PPUSH
56145: CALL_OW 2
56149: ST_TO_ADDR
// break ;
56150: GO 56154
// end ; end ;
56152: GO 56091
56154: POP
56155: POP
// end ; end ;
56156: GO 55955
56158: POP
56159: POP
// if result and not asc then
56160: LD_VAR 0 6
56164: PUSH
56165: LD_VAR 0 4
56169: NOT
56170: AND
56171: IFFALSE 56246
// begin tmp := result ;
56173: LD_ADDR_VAR 0 9
56177: PUSH
56178: LD_VAR 0 6
56182: ST_TO_ADDR
// for i = tmp downto 1 do
56183: LD_ADDR_VAR 0 7
56187: PUSH
56188: DOUBLE
56189: LD_VAR 0 9
56193: INC
56194: ST_TO_ADDR
56195: LD_INT 1
56197: PUSH
56198: FOR_DOWNTO
56199: IFFALSE 56244
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
56201: LD_ADDR_VAR 0 6
56205: PUSH
56206: LD_VAR 0 6
56210: PPUSH
56211: LD_VAR 0 9
56215: PUSH
56216: LD_VAR 0 7
56220: MINUS
56221: PUSH
56222: LD_INT 1
56224: PLUS
56225: PPUSH
56226: LD_VAR 0 9
56230: PUSH
56231: LD_VAR 0 7
56235: ARRAY
56236: PPUSH
56237: CALL_OW 1
56241: ST_TO_ADDR
56242: GO 56198
56244: POP
56245: POP
// end ; tmp := [ ] ;
56246: LD_ADDR_VAR 0 9
56250: PUSH
56251: EMPTY
56252: ST_TO_ADDR
// if mode then
56253: LD_VAR 0 5
56257: IFFALSE 56326
// begin for i = 1 to result do
56259: LD_ADDR_VAR 0 7
56263: PUSH
56264: DOUBLE
56265: LD_INT 1
56267: DEC
56268: ST_TO_ADDR
56269: LD_VAR 0 6
56273: PUSH
56274: FOR_TO
56275: IFFALSE 56314
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
56277: LD_ADDR_VAR 0 9
56281: PUSH
56282: LD_VAR 0 9
56286: PPUSH
56287: LD_VAR 0 7
56291: PPUSH
56292: LD_VAR 0 6
56296: PUSH
56297: LD_VAR 0 7
56301: ARRAY
56302: PUSH
56303: LD_INT 1
56305: ARRAY
56306: PPUSH
56307: CALL_OW 1
56311: ST_TO_ADDR
56312: GO 56274
56314: POP
56315: POP
// result := tmp ;
56316: LD_ADDR_VAR 0 6
56320: PUSH
56321: LD_VAR 0 9
56325: ST_TO_ADDR
// end ; end ;
56326: LD_VAR 0 6
56330: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
56331: LD_INT 0
56333: PPUSH
56334: PPUSH
56335: PPUSH
56336: PPUSH
56337: PPUSH
56338: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
56339: LD_ADDR_VAR 0 5
56343: PUSH
56344: LD_INT 0
56346: PUSH
56347: LD_INT 0
56349: PUSH
56350: LD_INT 0
56352: PUSH
56353: EMPTY
56354: PUSH
56355: EMPTY
56356: LIST
56357: LIST
56358: LIST
56359: LIST
56360: ST_TO_ADDR
// if not x or not y then
56361: LD_VAR 0 2
56365: NOT
56366: PUSH
56367: LD_VAR 0 3
56371: NOT
56372: OR
56373: IFFALSE 56377
// exit ;
56375: GO 58027
// if not range then
56377: LD_VAR 0 4
56381: NOT
56382: IFFALSE 56392
// range := 10 ;
56384: LD_ADDR_VAR 0 4
56388: PUSH
56389: LD_INT 10
56391: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
56392: LD_ADDR_VAR 0 8
56396: PUSH
56397: LD_INT 81
56399: PUSH
56400: LD_VAR 0 1
56404: PUSH
56405: EMPTY
56406: LIST
56407: LIST
56408: PUSH
56409: LD_INT 92
56411: PUSH
56412: LD_VAR 0 2
56416: PUSH
56417: LD_VAR 0 3
56421: PUSH
56422: LD_VAR 0 4
56426: PUSH
56427: EMPTY
56428: LIST
56429: LIST
56430: LIST
56431: LIST
56432: PUSH
56433: LD_INT 3
56435: PUSH
56436: LD_INT 21
56438: PUSH
56439: LD_INT 3
56441: PUSH
56442: EMPTY
56443: LIST
56444: LIST
56445: PUSH
56446: EMPTY
56447: LIST
56448: LIST
56449: PUSH
56450: EMPTY
56451: LIST
56452: LIST
56453: LIST
56454: PPUSH
56455: CALL_OW 69
56459: ST_TO_ADDR
// if not tmp then
56460: LD_VAR 0 8
56464: NOT
56465: IFFALSE 56469
// exit ;
56467: GO 58027
// for i in tmp do
56469: LD_ADDR_VAR 0 6
56473: PUSH
56474: LD_VAR 0 8
56478: PUSH
56479: FOR_IN
56480: IFFALSE 58002
// begin points := [ 0 , 0 , 0 ] ;
56482: LD_ADDR_VAR 0 9
56486: PUSH
56487: LD_INT 0
56489: PUSH
56490: LD_INT 0
56492: PUSH
56493: LD_INT 0
56495: PUSH
56496: EMPTY
56497: LIST
56498: LIST
56499: LIST
56500: ST_TO_ADDR
// bpoints := 1 ;
56501: LD_ADDR_VAR 0 10
56505: PUSH
56506: LD_INT 1
56508: ST_TO_ADDR
// case GetType ( i ) of unit_human :
56509: LD_VAR 0 6
56513: PPUSH
56514: CALL_OW 247
56518: PUSH
56519: LD_INT 1
56521: DOUBLE
56522: EQUAL
56523: IFTRUE 56527
56525: GO 57105
56527: POP
// begin if GetClass ( i ) = 1 then
56528: LD_VAR 0 6
56532: PPUSH
56533: CALL_OW 257
56537: PUSH
56538: LD_INT 1
56540: EQUAL
56541: IFFALSE 56562
// points := [ 10 , 5 , 3 ] ;
56543: LD_ADDR_VAR 0 9
56547: PUSH
56548: LD_INT 10
56550: PUSH
56551: LD_INT 5
56553: PUSH
56554: LD_INT 3
56556: PUSH
56557: EMPTY
56558: LIST
56559: LIST
56560: LIST
56561: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
56562: LD_VAR 0 6
56566: PPUSH
56567: CALL_OW 257
56571: PUSH
56572: LD_INT 2
56574: PUSH
56575: LD_INT 3
56577: PUSH
56578: LD_INT 4
56580: PUSH
56581: EMPTY
56582: LIST
56583: LIST
56584: LIST
56585: IN
56586: IFFALSE 56607
// points := [ 3 , 2 , 1 ] ;
56588: LD_ADDR_VAR 0 9
56592: PUSH
56593: LD_INT 3
56595: PUSH
56596: LD_INT 2
56598: PUSH
56599: LD_INT 1
56601: PUSH
56602: EMPTY
56603: LIST
56604: LIST
56605: LIST
56606: ST_TO_ADDR
// if GetClass ( i ) = 5 then
56607: LD_VAR 0 6
56611: PPUSH
56612: CALL_OW 257
56616: PUSH
56617: LD_INT 5
56619: EQUAL
56620: IFFALSE 56641
// points := [ 130 , 5 , 2 ] ;
56622: LD_ADDR_VAR 0 9
56626: PUSH
56627: LD_INT 130
56629: PUSH
56630: LD_INT 5
56632: PUSH
56633: LD_INT 2
56635: PUSH
56636: EMPTY
56637: LIST
56638: LIST
56639: LIST
56640: ST_TO_ADDR
// if GetClass ( i ) = 8 then
56641: LD_VAR 0 6
56645: PPUSH
56646: CALL_OW 257
56650: PUSH
56651: LD_INT 8
56653: EQUAL
56654: IFFALSE 56675
// points := [ 35 , 35 , 30 ] ;
56656: LD_ADDR_VAR 0 9
56660: PUSH
56661: LD_INT 35
56663: PUSH
56664: LD_INT 35
56666: PUSH
56667: LD_INT 30
56669: PUSH
56670: EMPTY
56671: LIST
56672: LIST
56673: LIST
56674: ST_TO_ADDR
// if GetClass ( i ) = 9 then
56675: LD_VAR 0 6
56679: PPUSH
56680: CALL_OW 257
56684: PUSH
56685: LD_INT 9
56687: EQUAL
56688: IFFALSE 56709
// points := [ 20 , 55 , 40 ] ;
56690: LD_ADDR_VAR 0 9
56694: PUSH
56695: LD_INT 20
56697: PUSH
56698: LD_INT 55
56700: PUSH
56701: LD_INT 40
56703: PUSH
56704: EMPTY
56705: LIST
56706: LIST
56707: LIST
56708: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
56709: LD_VAR 0 6
56713: PPUSH
56714: CALL_OW 257
56718: PUSH
56719: LD_INT 12
56721: PUSH
56722: LD_INT 16
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: IN
56729: IFFALSE 56750
// points := [ 5 , 3 , 2 ] ;
56731: LD_ADDR_VAR 0 9
56735: PUSH
56736: LD_INT 5
56738: PUSH
56739: LD_INT 3
56741: PUSH
56742: LD_INT 2
56744: PUSH
56745: EMPTY
56746: LIST
56747: LIST
56748: LIST
56749: ST_TO_ADDR
// if GetClass ( i ) = 17 then
56750: LD_VAR 0 6
56754: PPUSH
56755: CALL_OW 257
56759: PUSH
56760: LD_INT 17
56762: EQUAL
56763: IFFALSE 56784
// points := [ 100 , 50 , 75 ] ;
56765: LD_ADDR_VAR 0 9
56769: PUSH
56770: LD_INT 100
56772: PUSH
56773: LD_INT 50
56775: PUSH
56776: LD_INT 75
56778: PUSH
56779: EMPTY
56780: LIST
56781: LIST
56782: LIST
56783: ST_TO_ADDR
// if GetClass ( i ) = 15 then
56784: LD_VAR 0 6
56788: PPUSH
56789: CALL_OW 257
56793: PUSH
56794: LD_INT 15
56796: EQUAL
56797: IFFALSE 56818
// points := [ 10 , 5 , 3 ] ;
56799: LD_ADDR_VAR 0 9
56803: PUSH
56804: LD_INT 10
56806: PUSH
56807: LD_INT 5
56809: PUSH
56810: LD_INT 3
56812: PUSH
56813: EMPTY
56814: LIST
56815: LIST
56816: LIST
56817: ST_TO_ADDR
// if GetClass ( i ) = 14 then
56818: LD_VAR 0 6
56822: PPUSH
56823: CALL_OW 257
56827: PUSH
56828: LD_INT 14
56830: EQUAL
56831: IFFALSE 56852
// points := [ 10 , 0 , 0 ] ;
56833: LD_ADDR_VAR 0 9
56837: PUSH
56838: LD_INT 10
56840: PUSH
56841: LD_INT 0
56843: PUSH
56844: LD_INT 0
56846: PUSH
56847: EMPTY
56848: LIST
56849: LIST
56850: LIST
56851: ST_TO_ADDR
// if GetClass ( i ) = 11 then
56852: LD_VAR 0 6
56856: PPUSH
56857: CALL_OW 257
56861: PUSH
56862: LD_INT 11
56864: EQUAL
56865: IFFALSE 56886
// points := [ 30 , 10 , 5 ] ;
56867: LD_ADDR_VAR 0 9
56871: PUSH
56872: LD_INT 30
56874: PUSH
56875: LD_INT 10
56877: PUSH
56878: LD_INT 5
56880: PUSH
56881: EMPTY
56882: LIST
56883: LIST
56884: LIST
56885: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
56886: LD_VAR 0 1
56890: PPUSH
56891: LD_INT 5
56893: PPUSH
56894: CALL_OW 321
56898: PUSH
56899: LD_INT 2
56901: EQUAL
56902: IFFALSE 56919
// bpoints := bpoints * 1.8 ;
56904: LD_ADDR_VAR 0 10
56908: PUSH
56909: LD_VAR 0 10
56913: PUSH
56914: LD_REAL  1.80000000000000E+0000
56917: MUL
56918: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
56919: LD_VAR 0 6
56923: PPUSH
56924: CALL_OW 257
56928: PUSH
56929: LD_INT 1
56931: PUSH
56932: LD_INT 2
56934: PUSH
56935: LD_INT 3
56937: PUSH
56938: LD_INT 4
56940: PUSH
56941: EMPTY
56942: LIST
56943: LIST
56944: LIST
56945: LIST
56946: IN
56947: PUSH
56948: LD_VAR 0 1
56952: PPUSH
56953: LD_INT 51
56955: PPUSH
56956: CALL_OW 321
56960: PUSH
56961: LD_INT 2
56963: EQUAL
56964: AND
56965: IFFALSE 56982
// bpoints := bpoints * 1.2 ;
56967: LD_ADDR_VAR 0 10
56971: PUSH
56972: LD_VAR 0 10
56976: PUSH
56977: LD_REAL  1.20000000000000E+0000
56980: MUL
56981: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
56982: LD_VAR 0 6
56986: PPUSH
56987: CALL_OW 257
56991: PUSH
56992: LD_INT 5
56994: PUSH
56995: LD_INT 7
56997: PUSH
56998: LD_INT 9
57000: PUSH
57001: EMPTY
57002: LIST
57003: LIST
57004: LIST
57005: IN
57006: PUSH
57007: LD_VAR 0 1
57011: PPUSH
57012: LD_INT 52
57014: PPUSH
57015: CALL_OW 321
57019: PUSH
57020: LD_INT 2
57022: EQUAL
57023: AND
57024: IFFALSE 57041
// bpoints := bpoints * 1.5 ;
57026: LD_ADDR_VAR 0 10
57030: PUSH
57031: LD_VAR 0 10
57035: PUSH
57036: LD_REAL  1.50000000000000E+0000
57039: MUL
57040: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
57041: LD_VAR 0 1
57045: PPUSH
57046: LD_INT 66
57048: PPUSH
57049: CALL_OW 321
57053: PUSH
57054: LD_INT 2
57056: EQUAL
57057: IFFALSE 57074
// bpoints := bpoints * 1.1 ;
57059: LD_ADDR_VAR 0 10
57063: PUSH
57064: LD_VAR 0 10
57068: PUSH
57069: LD_REAL  1.10000000000000E+0000
57072: MUL
57073: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
57074: LD_ADDR_VAR 0 10
57078: PUSH
57079: LD_VAR 0 10
57083: PUSH
57084: LD_VAR 0 6
57088: PPUSH
57089: LD_INT 1
57091: PPUSH
57092: CALL_OW 259
57096: PUSH
57097: LD_REAL  1.15000000000000E+0000
57100: MUL
57101: MUL
57102: ST_TO_ADDR
// end ; unit_vehicle :
57103: GO 57931
57105: LD_INT 2
57107: DOUBLE
57108: EQUAL
57109: IFTRUE 57113
57111: GO 57919
57113: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
57114: LD_VAR 0 6
57118: PPUSH
57119: CALL_OW 264
57123: PUSH
57124: LD_INT 2
57126: PUSH
57127: LD_INT 42
57129: PUSH
57130: LD_INT 24
57132: PUSH
57133: EMPTY
57134: LIST
57135: LIST
57136: LIST
57137: IN
57138: IFFALSE 57159
// points := [ 25 , 5 , 3 ] ;
57140: LD_ADDR_VAR 0 9
57144: PUSH
57145: LD_INT 25
57147: PUSH
57148: LD_INT 5
57150: PUSH
57151: LD_INT 3
57153: PUSH
57154: EMPTY
57155: LIST
57156: LIST
57157: LIST
57158: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
57159: LD_VAR 0 6
57163: PPUSH
57164: CALL_OW 264
57168: PUSH
57169: LD_INT 4
57171: PUSH
57172: LD_INT 43
57174: PUSH
57175: LD_INT 25
57177: PUSH
57178: EMPTY
57179: LIST
57180: LIST
57181: LIST
57182: IN
57183: IFFALSE 57204
// points := [ 40 , 15 , 5 ] ;
57185: LD_ADDR_VAR 0 9
57189: PUSH
57190: LD_INT 40
57192: PUSH
57193: LD_INT 15
57195: PUSH
57196: LD_INT 5
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: LIST
57203: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
57204: LD_VAR 0 6
57208: PPUSH
57209: CALL_OW 264
57213: PUSH
57214: LD_INT 3
57216: PUSH
57217: LD_INT 23
57219: PUSH
57220: EMPTY
57221: LIST
57222: LIST
57223: IN
57224: IFFALSE 57245
// points := [ 7 , 25 , 8 ] ;
57226: LD_ADDR_VAR 0 9
57230: PUSH
57231: LD_INT 7
57233: PUSH
57234: LD_INT 25
57236: PUSH
57237: LD_INT 8
57239: PUSH
57240: EMPTY
57241: LIST
57242: LIST
57243: LIST
57244: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
57245: LD_VAR 0 6
57249: PPUSH
57250: CALL_OW 264
57254: PUSH
57255: LD_INT 5
57257: PUSH
57258: LD_INT 27
57260: PUSH
57261: LD_INT 44
57263: PUSH
57264: EMPTY
57265: LIST
57266: LIST
57267: LIST
57268: IN
57269: IFFALSE 57290
// points := [ 14 , 50 , 16 ] ;
57271: LD_ADDR_VAR 0 9
57275: PUSH
57276: LD_INT 14
57278: PUSH
57279: LD_INT 50
57281: PUSH
57282: LD_INT 16
57284: PUSH
57285: EMPTY
57286: LIST
57287: LIST
57288: LIST
57289: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
57290: LD_VAR 0 6
57294: PPUSH
57295: CALL_OW 264
57299: PUSH
57300: LD_INT 6
57302: PUSH
57303: LD_INT 46
57305: PUSH
57306: EMPTY
57307: LIST
57308: LIST
57309: IN
57310: IFFALSE 57331
// points := [ 32 , 120 , 70 ] ;
57312: LD_ADDR_VAR 0 9
57316: PUSH
57317: LD_INT 32
57319: PUSH
57320: LD_INT 120
57322: PUSH
57323: LD_INT 70
57325: PUSH
57326: EMPTY
57327: LIST
57328: LIST
57329: LIST
57330: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
57331: LD_VAR 0 6
57335: PPUSH
57336: CALL_OW 264
57340: PUSH
57341: LD_INT 7
57343: PUSH
57344: LD_INT 28
57346: PUSH
57347: LD_INT 45
57349: PUSH
57350: LD_INT 92
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: LIST
57357: LIST
57358: IN
57359: IFFALSE 57380
// points := [ 35 , 20 , 45 ] ;
57361: LD_ADDR_VAR 0 9
57365: PUSH
57366: LD_INT 35
57368: PUSH
57369: LD_INT 20
57371: PUSH
57372: LD_INT 45
57374: PUSH
57375: EMPTY
57376: LIST
57377: LIST
57378: LIST
57379: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
57380: LD_VAR 0 6
57384: PPUSH
57385: CALL_OW 264
57389: PUSH
57390: LD_INT 47
57392: PUSH
57393: EMPTY
57394: LIST
57395: IN
57396: IFFALSE 57417
// points := [ 67 , 45 , 75 ] ;
57398: LD_ADDR_VAR 0 9
57402: PUSH
57403: LD_INT 67
57405: PUSH
57406: LD_INT 45
57408: PUSH
57409: LD_INT 75
57411: PUSH
57412: EMPTY
57413: LIST
57414: LIST
57415: LIST
57416: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
57417: LD_VAR 0 6
57421: PPUSH
57422: CALL_OW 264
57426: PUSH
57427: LD_INT 26
57429: PUSH
57430: EMPTY
57431: LIST
57432: IN
57433: IFFALSE 57454
// points := [ 120 , 30 , 80 ] ;
57435: LD_ADDR_VAR 0 9
57439: PUSH
57440: LD_INT 120
57442: PUSH
57443: LD_INT 30
57445: PUSH
57446: LD_INT 80
57448: PUSH
57449: EMPTY
57450: LIST
57451: LIST
57452: LIST
57453: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
57454: LD_VAR 0 6
57458: PPUSH
57459: CALL_OW 264
57463: PUSH
57464: LD_INT 22
57466: PUSH
57467: EMPTY
57468: LIST
57469: IN
57470: IFFALSE 57491
// points := [ 40 , 1 , 1 ] ;
57472: LD_ADDR_VAR 0 9
57476: PUSH
57477: LD_INT 40
57479: PUSH
57480: LD_INT 1
57482: PUSH
57483: LD_INT 1
57485: PUSH
57486: EMPTY
57487: LIST
57488: LIST
57489: LIST
57490: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
57491: LD_VAR 0 6
57495: PPUSH
57496: CALL_OW 264
57500: PUSH
57501: LD_INT 29
57503: PUSH
57504: EMPTY
57505: LIST
57506: IN
57507: IFFALSE 57528
// points := [ 70 , 200 , 400 ] ;
57509: LD_ADDR_VAR 0 9
57513: PUSH
57514: LD_INT 70
57516: PUSH
57517: LD_INT 200
57519: PUSH
57520: LD_INT 400
57522: PUSH
57523: EMPTY
57524: LIST
57525: LIST
57526: LIST
57527: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
57528: LD_VAR 0 6
57532: PPUSH
57533: CALL_OW 264
57537: PUSH
57538: LD_INT 14
57540: PUSH
57541: LD_INT 53
57543: PUSH
57544: EMPTY
57545: LIST
57546: LIST
57547: IN
57548: IFFALSE 57569
// points := [ 40 , 10 , 20 ] ;
57550: LD_ADDR_VAR 0 9
57554: PUSH
57555: LD_INT 40
57557: PUSH
57558: LD_INT 10
57560: PUSH
57561: LD_INT 20
57563: PUSH
57564: EMPTY
57565: LIST
57566: LIST
57567: LIST
57568: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
57569: LD_VAR 0 6
57573: PPUSH
57574: CALL_OW 264
57578: PUSH
57579: LD_INT 9
57581: PUSH
57582: EMPTY
57583: LIST
57584: IN
57585: IFFALSE 57606
// points := [ 5 , 70 , 20 ] ;
57587: LD_ADDR_VAR 0 9
57591: PUSH
57592: LD_INT 5
57594: PUSH
57595: LD_INT 70
57597: PUSH
57598: LD_INT 20
57600: PUSH
57601: EMPTY
57602: LIST
57603: LIST
57604: LIST
57605: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
57606: LD_VAR 0 6
57610: PPUSH
57611: CALL_OW 264
57615: PUSH
57616: LD_INT 10
57618: PUSH
57619: EMPTY
57620: LIST
57621: IN
57622: IFFALSE 57643
// points := [ 35 , 110 , 70 ] ;
57624: LD_ADDR_VAR 0 9
57628: PUSH
57629: LD_INT 35
57631: PUSH
57632: LD_INT 110
57634: PUSH
57635: LD_INT 70
57637: PUSH
57638: EMPTY
57639: LIST
57640: LIST
57641: LIST
57642: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
57643: LD_VAR 0 6
57647: PPUSH
57648: CALL_OW 265
57652: PUSH
57653: LD_INT 25
57655: EQUAL
57656: IFFALSE 57677
// points := [ 80 , 65 , 100 ] ;
57658: LD_ADDR_VAR 0 9
57662: PUSH
57663: LD_INT 80
57665: PUSH
57666: LD_INT 65
57668: PUSH
57669: LD_INT 100
57671: PUSH
57672: EMPTY
57673: LIST
57674: LIST
57675: LIST
57676: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
57677: LD_VAR 0 6
57681: PPUSH
57682: CALL_OW 263
57686: PUSH
57687: LD_INT 1
57689: EQUAL
57690: IFFALSE 57725
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
57692: LD_ADDR_VAR 0 10
57696: PUSH
57697: LD_VAR 0 10
57701: PUSH
57702: LD_VAR 0 6
57706: PPUSH
57707: CALL_OW 311
57711: PPUSH
57712: LD_INT 3
57714: PPUSH
57715: CALL_OW 259
57719: PUSH
57720: LD_INT 4
57722: MUL
57723: MUL
57724: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
57725: LD_VAR 0 6
57729: PPUSH
57730: CALL_OW 263
57734: PUSH
57735: LD_INT 2
57737: EQUAL
57738: IFFALSE 57789
// begin j := IsControledBy ( i ) ;
57740: LD_ADDR_VAR 0 7
57744: PUSH
57745: LD_VAR 0 6
57749: PPUSH
57750: CALL_OW 312
57754: ST_TO_ADDR
// if j then
57755: LD_VAR 0 7
57759: IFFALSE 57789
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
57761: LD_ADDR_VAR 0 10
57765: PUSH
57766: LD_VAR 0 10
57770: PUSH
57771: LD_VAR 0 7
57775: PPUSH
57776: LD_INT 3
57778: PPUSH
57779: CALL_OW 259
57783: PUSH
57784: LD_INT 3
57786: MUL
57787: MUL
57788: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
57789: LD_VAR 0 6
57793: PPUSH
57794: CALL_OW 264
57798: PUSH
57799: LD_INT 5
57801: PUSH
57802: LD_INT 6
57804: PUSH
57805: LD_INT 46
57807: PUSH
57808: LD_INT 44
57810: PUSH
57811: LD_INT 47
57813: PUSH
57814: LD_INT 45
57816: PUSH
57817: LD_INT 28
57819: PUSH
57820: LD_INT 7
57822: PUSH
57823: LD_INT 27
57825: PUSH
57826: LD_INT 29
57828: PUSH
57829: EMPTY
57830: LIST
57831: LIST
57832: LIST
57833: LIST
57834: LIST
57835: LIST
57836: LIST
57837: LIST
57838: LIST
57839: LIST
57840: IN
57841: PUSH
57842: LD_VAR 0 1
57846: PPUSH
57847: LD_INT 52
57849: PPUSH
57850: CALL_OW 321
57854: PUSH
57855: LD_INT 2
57857: EQUAL
57858: AND
57859: IFFALSE 57876
// bpoints := bpoints * 1.2 ;
57861: LD_ADDR_VAR 0 10
57865: PUSH
57866: LD_VAR 0 10
57870: PUSH
57871: LD_REAL  1.20000000000000E+0000
57874: MUL
57875: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
57876: LD_VAR 0 6
57880: PPUSH
57881: CALL_OW 264
57885: PUSH
57886: LD_INT 6
57888: PUSH
57889: LD_INT 46
57891: PUSH
57892: LD_INT 47
57894: PUSH
57895: EMPTY
57896: LIST
57897: LIST
57898: LIST
57899: IN
57900: IFFALSE 57917
// bpoints := bpoints * 1.2 ;
57902: LD_ADDR_VAR 0 10
57906: PUSH
57907: LD_VAR 0 10
57911: PUSH
57912: LD_REAL  1.20000000000000E+0000
57915: MUL
57916: ST_TO_ADDR
// end ; unit_building :
57917: GO 57931
57919: LD_INT 3
57921: DOUBLE
57922: EQUAL
57923: IFTRUE 57927
57925: GO 57930
57927: POP
// ; end ;
57928: GO 57931
57930: POP
// for j = 1 to 3 do
57931: LD_ADDR_VAR 0 7
57935: PUSH
57936: DOUBLE
57937: LD_INT 1
57939: DEC
57940: ST_TO_ADDR
57941: LD_INT 3
57943: PUSH
57944: FOR_TO
57945: IFFALSE 57998
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
57947: LD_ADDR_VAR 0 5
57951: PUSH
57952: LD_VAR 0 5
57956: PPUSH
57957: LD_VAR 0 7
57961: PPUSH
57962: LD_VAR 0 5
57966: PUSH
57967: LD_VAR 0 7
57971: ARRAY
57972: PUSH
57973: LD_VAR 0 9
57977: PUSH
57978: LD_VAR 0 7
57982: ARRAY
57983: PUSH
57984: LD_VAR 0 10
57988: MUL
57989: PLUS
57990: PPUSH
57991: CALL_OW 1
57995: ST_TO_ADDR
57996: GO 57944
57998: POP
57999: POP
// end ;
58000: GO 56479
58002: POP
58003: POP
// result := Replace ( result , 4 , tmp ) ;
58004: LD_ADDR_VAR 0 5
58008: PUSH
58009: LD_VAR 0 5
58013: PPUSH
58014: LD_INT 4
58016: PPUSH
58017: LD_VAR 0 8
58021: PPUSH
58022: CALL_OW 1
58026: ST_TO_ADDR
// end ;
58027: LD_VAR 0 5
58031: RET
// export function DangerAtRange ( unit , range ) ; begin
58032: LD_INT 0
58034: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
58035: LD_ADDR_VAR 0 3
58039: PUSH
58040: LD_VAR 0 1
58044: PPUSH
58045: CALL_OW 255
58049: PPUSH
58050: LD_VAR 0 1
58054: PPUSH
58055: CALL_OW 250
58059: PPUSH
58060: LD_VAR 0 1
58064: PPUSH
58065: CALL_OW 251
58069: PPUSH
58070: LD_VAR 0 2
58074: PPUSH
58075: CALL 56331 0 4
58079: ST_TO_ADDR
// end ;
58080: LD_VAR 0 3
58084: RET
// export function DangerInArea ( side , area ) ; begin
58085: LD_INT 0
58087: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
58088: LD_ADDR_VAR 0 3
58092: PUSH
58093: LD_VAR 0 2
58097: PPUSH
58098: LD_INT 81
58100: PUSH
58101: LD_VAR 0 1
58105: PUSH
58106: EMPTY
58107: LIST
58108: LIST
58109: PPUSH
58110: CALL_OW 70
58114: ST_TO_ADDR
// end ;
58115: LD_VAR 0 3
58119: RET
// export function IsExtension ( b ) ; begin
58120: LD_INT 0
58122: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
58123: LD_ADDR_VAR 0 2
58127: PUSH
58128: LD_VAR 0 1
58132: PUSH
58133: LD_INT 23
58135: PUSH
58136: LD_INT 20
58138: PUSH
58139: LD_INT 22
58141: PUSH
58142: LD_INT 17
58144: PUSH
58145: LD_INT 24
58147: PUSH
58148: LD_INT 21
58150: PUSH
58151: LD_INT 19
58153: PUSH
58154: LD_INT 16
58156: PUSH
58157: LD_INT 25
58159: PUSH
58160: LD_INT 18
58162: PUSH
58163: EMPTY
58164: LIST
58165: LIST
58166: LIST
58167: LIST
58168: LIST
58169: LIST
58170: LIST
58171: LIST
58172: LIST
58173: LIST
58174: IN
58175: ST_TO_ADDR
// end ;
58176: LD_VAR 0 2
58180: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
58181: LD_INT 0
58183: PPUSH
58184: PPUSH
58185: PPUSH
// result := [ ] ;
58186: LD_ADDR_VAR 0 4
58190: PUSH
58191: EMPTY
58192: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
58193: LD_ADDR_VAR 0 5
58197: PUSH
58198: LD_VAR 0 2
58202: PPUSH
58203: LD_INT 21
58205: PUSH
58206: LD_INT 3
58208: PUSH
58209: EMPTY
58210: LIST
58211: LIST
58212: PPUSH
58213: CALL_OW 70
58217: ST_TO_ADDR
// if not tmp then
58218: LD_VAR 0 5
58222: NOT
58223: IFFALSE 58227
// exit ;
58225: GO 58291
// if checkLink then
58227: LD_VAR 0 3
58231: IFFALSE 58281
// begin for i in tmp do
58233: LD_ADDR_VAR 0 6
58237: PUSH
58238: LD_VAR 0 5
58242: PUSH
58243: FOR_IN
58244: IFFALSE 58279
// if GetBase ( i ) <> base then
58246: LD_VAR 0 6
58250: PPUSH
58251: CALL_OW 274
58255: PUSH
58256: LD_VAR 0 1
58260: NONEQUAL
58261: IFFALSE 58277
// ComLinkToBase ( base , i ) ;
58263: LD_VAR 0 1
58267: PPUSH
58268: LD_VAR 0 6
58272: PPUSH
58273: CALL_OW 169
58277: GO 58243
58279: POP
58280: POP
// end ; result := tmp ;
58281: LD_ADDR_VAR 0 4
58285: PUSH
58286: LD_VAR 0 5
58290: ST_TO_ADDR
// end ;
58291: LD_VAR 0 4
58295: RET
// export function ComComplete ( units , b ) ; var i ; begin
58296: LD_INT 0
58298: PPUSH
58299: PPUSH
// if not units then
58300: LD_VAR 0 1
58304: NOT
58305: IFFALSE 58309
// exit ;
58307: GO 58399
// for i in units do
58309: LD_ADDR_VAR 0 4
58313: PUSH
58314: LD_VAR 0 1
58318: PUSH
58319: FOR_IN
58320: IFFALSE 58397
// if BuildingStatus ( b ) = bs_build then
58322: LD_VAR 0 2
58326: PPUSH
58327: CALL_OW 461
58331: PUSH
58332: LD_INT 1
58334: EQUAL
58335: IFFALSE 58395
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
58337: LD_VAR 0 4
58341: PPUSH
58342: LD_STRING h
58344: PUSH
58345: LD_VAR 0 2
58349: PPUSH
58350: CALL_OW 250
58354: PUSH
58355: LD_VAR 0 2
58359: PPUSH
58360: CALL_OW 251
58364: PUSH
58365: LD_VAR 0 2
58369: PUSH
58370: LD_INT 0
58372: PUSH
58373: LD_INT 0
58375: PUSH
58376: LD_INT 0
58378: PUSH
58379: EMPTY
58380: LIST
58381: LIST
58382: LIST
58383: LIST
58384: LIST
58385: LIST
58386: LIST
58387: PUSH
58388: EMPTY
58389: LIST
58390: PPUSH
58391: CALL_OW 446
58395: GO 58319
58397: POP
58398: POP
// end ;
58399: LD_VAR 0 3
58403: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
58404: LD_INT 0
58406: PPUSH
58407: PPUSH
58408: PPUSH
58409: PPUSH
58410: PPUSH
58411: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
58412: LD_VAR 0 1
58416: NOT
58417: PUSH
58418: LD_VAR 0 1
58422: PPUSH
58423: CALL_OW 263
58427: PUSH
58428: LD_INT 2
58430: NONEQUAL
58431: OR
58432: IFFALSE 58436
// exit ;
58434: GO 58752
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
58436: LD_ADDR_VAR 0 6
58440: PUSH
58441: LD_INT 22
58443: PUSH
58444: LD_VAR 0 1
58448: PPUSH
58449: CALL_OW 255
58453: PUSH
58454: EMPTY
58455: LIST
58456: LIST
58457: PUSH
58458: LD_INT 2
58460: PUSH
58461: LD_INT 30
58463: PUSH
58464: LD_INT 36
58466: PUSH
58467: EMPTY
58468: LIST
58469: LIST
58470: PUSH
58471: LD_INT 34
58473: PUSH
58474: LD_INT 31
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: PUSH
58481: EMPTY
58482: LIST
58483: LIST
58484: LIST
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PPUSH
58490: CALL_OW 69
58494: ST_TO_ADDR
// if not tmp then
58495: LD_VAR 0 6
58499: NOT
58500: IFFALSE 58504
// exit ;
58502: GO 58752
// result := [ ] ;
58504: LD_ADDR_VAR 0 2
58508: PUSH
58509: EMPTY
58510: ST_TO_ADDR
// for i in tmp do
58511: LD_ADDR_VAR 0 3
58515: PUSH
58516: LD_VAR 0 6
58520: PUSH
58521: FOR_IN
58522: IFFALSE 58593
// begin t := UnitsInside ( i ) ;
58524: LD_ADDR_VAR 0 4
58528: PUSH
58529: LD_VAR 0 3
58533: PPUSH
58534: CALL_OW 313
58538: ST_TO_ADDR
// if t then
58539: LD_VAR 0 4
58543: IFFALSE 58591
// for j in t do
58545: LD_ADDR_VAR 0 7
58549: PUSH
58550: LD_VAR 0 4
58554: PUSH
58555: FOR_IN
58556: IFFALSE 58589
// result := Replace ( result , result + 1 , j ) ;
58558: LD_ADDR_VAR 0 2
58562: PUSH
58563: LD_VAR 0 2
58567: PPUSH
58568: LD_VAR 0 2
58572: PUSH
58573: LD_INT 1
58575: PLUS
58576: PPUSH
58577: LD_VAR 0 7
58581: PPUSH
58582: CALL_OW 1
58586: ST_TO_ADDR
58587: GO 58555
58589: POP
58590: POP
// end ;
58591: GO 58521
58593: POP
58594: POP
// if not result then
58595: LD_VAR 0 2
58599: NOT
58600: IFFALSE 58604
// exit ;
58602: GO 58752
// mech := result [ 1 ] ;
58604: LD_ADDR_VAR 0 5
58608: PUSH
58609: LD_VAR 0 2
58613: PUSH
58614: LD_INT 1
58616: ARRAY
58617: ST_TO_ADDR
// if result > 1 then
58618: LD_VAR 0 2
58622: PUSH
58623: LD_INT 1
58625: GREATER
58626: IFFALSE 58738
// begin for i = 2 to result do
58628: LD_ADDR_VAR 0 3
58632: PUSH
58633: DOUBLE
58634: LD_INT 2
58636: DEC
58637: ST_TO_ADDR
58638: LD_VAR 0 2
58642: PUSH
58643: FOR_TO
58644: IFFALSE 58736
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
58646: LD_ADDR_VAR 0 4
58650: PUSH
58651: LD_VAR 0 2
58655: PUSH
58656: LD_VAR 0 3
58660: ARRAY
58661: PPUSH
58662: LD_INT 3
58664: PPUSH
58665: CALL_OW 259
58669: PUSH
58670: LD_VAR 0 2
58674: PUSH
58675: LD_VAR 0 3
58679: ARRAY
58680: PPUSH
58681: CALL_OW 432
58685: MINUS
58686: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
58687: LD_VAR 0 4
58691: PUSH
58692: LD_VAR 0 5
58696: PPUSH
58697: LD_INT 3
58699: PPUSH
58700: CALL_OW 259
58704: PUSH
58705: LD_VAR 0 5
58709: PPUSH
58710: CALL_OW 432
58714: MINUS
58715: GREATEREQUAL
58716: IFFALSE 58734
// mech := result [ i ] ;
58718: LD_ADDR_VAR 0 5
58722: PUSH
58723: LD_VAR 0 2
58727: PUSH
58728: LD_VAR 0 3
58732: ARRAY
58733: ST_TO_ADDR
// end ;
58734: GO 58643
58736: POP
58737: POP
// end ; ComLinkTo ( vehicle , mech ) ;
58738: LD_VAR 0 1
58742: PPUSH
58743: LD_VAR 0 5
58747: PPUSH
58748: CALL_OW 135
// end ;
58752: LD_VAR 0 2
58756: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
58757: LD_INT 0
58759: PPUSH
58760: PPUSH
58761: PPUSH
58762: PPUSH
58763: PPUSH
58764: PPUSH
58765: PPUSH
58766: PPUSH
58767: PPUSH
58768: PPUSH
58769: PPUSH
58770: PPUSH
58771: PPUSH
// result := [ ] ;
58772: LD_ADDR_VAR 0 7
58776: PUSH
58777: EMPTY
58778: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
58779: LD_VAR 0 1
58783: PPUSH
58784: CALL_OW 266
58788: PUSH
58789: LD_INT 0
58791: PUSH
58792: LD_INT 1
58794: PUSH
58795: EMPTY
58796: LIST
58797: LIST
58798: IN
58799: NOT
58800: IFFALSE 58804
// exit ;
58802: GO 60438
// if name then
58804: LD_VAR 0 3
58808: IFFALSE 58824
// SetBName ( base_dep , name ) ;
58810: LD_VAR 0 1
58814: PPUSH
58815: LD_VAR 0 3
58819: PPUSH
58820: CALL_OW 500
// base := GetBase ( base_dep ) ;
58824: LD_ADDR_VAR 0 15
58828: PUSH
58829: LD_VAR 0 1
58833: PPUSH
58834: CALL_OW 274
58838: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
58839: LD_ADDR_VAR 0 16
58843: PUSH
58844: LD_VAR 0 1
58848: PPUSH
58849: CALL_OW 255
58853: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
58854: LD_ADDR_VAR 0 17
58858: PUSH
58859: LD_VAR 0 1
58863: PPUSH
58864: CALL_OW 248
58868: ST_TO_ADDR
// if sources then
58869: LD_VAR 0 5
58873: IFFALSE 58920
// for i = 1 to 3 do
58875: LD_ADDR_VAR 0 8
58879: PUSH
58880: DOUBLE
58881: LD_INT 1
58883: DEC
58884: ST_TO_ADDR
58885: LD_INT 3
58887: PUSH
58888: FOR_TO
58889: IFFALSE 58918
// AddResourceType ( base , i , sources [ i ] ) ;
58891: LD_VAR 0 15
58895: PPUSH
58896: LD_VAR 0 8
58900: PPUSH
58901: LD_VAR 0 5
58905: PUSH
58906: LD_VAR 0 8
58910: ARRAY
58911: PPUSH
58912: CALL_OW 276
58916: GO 58888
58918: POP
58919: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
58920: LD_ADDR_VAR 0 18
58924: PUSH
58925: LD_VAR 0 15
58929: PPUSH
58930: LD_VAR 0 2
58934: PPUSH
58935: LD_INT 1
58937: PPUSH
58938: CALL 58181 0 3
58942: ST_TO_ADDR
// InitHc ;
58943: CALL_OW 19
// InitUc ;
58947: CALL_OW 18
// uc_side := side ;
58951: LD_ADDR_OWVAR 20
58955: PUSH
58956: LD_VAR 0 16
58960: ST_TO_ADDR
// uc_nation := nation ;
58961: LD_ADDR_OWVAR 21
58965: PUSH
58966: LD_VAR 0 17
58970: ST_TO_ADDR
// if buildings then
58971: LD_VAR 0 18
58975: IFFALSE 60297
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
58977: LD_ADDR_VAR 0 19
58981: PUSH
58982: LD_VAR 0 18
58986: PPUSH
58987: LD_INT 2
58989: PUSH
58990: LD_INT 30
58992: PUSH
58993: LD_INT 29
58995: PUSH
58996: EMPTY
58997: LIST
58998: LIST
58999: PUSH
59000: LD_INT 30
59002: PUSH
59003: LD_INT 30
59005: PUSH
59006: EMPTY
59007: LIST
59008: LIST
59009: PUSH
59010: EMPTY
59011: LIST
59012: LIST
59013: LIST
59014: PPUSH
59015: CALL_OW 72
59019: ST_TO_ADDR
// if tmp then
59020: LD_VAR 0 19
59024: IFFALSE 59072
// for i in tmp do
59026: LD_ADDR_VAR 0 8
59030: PUSH
59031: LD_VAR 0 19
59035: PUSH
59036: FOR_IN
59037: IFFALSE 59070
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
59039: LD_VAR 0 8
59043: PPUSH
59044: CALL_OW 250
59048: PPUSH
59049: LD_VAR 0 8
59053: PPUSH
59054: CALL_OW 251
59058: PPUSH
59059: LD_VAR 0 16
59063: PPUSH
59064: CALL_OW 441
59068: GO 59036
59070: POP
59071: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
59072: LD_VAR 0 18
59076: PPUSH
59077: LD_INT 2
59079: PUSH
59080: LD_INT 30
59082: PUSH
59083: LD_INT 32
59085: PUSH
59086: EMPTY
59087: LIST
59088: LIST
59089: PUSH
59090: LD_INT 30
59092: PUSH
59093: LD_INT 33
59095: PUSH
59096: EMPTY
59097: LIST
59098: LIST
59099: PUSH
59100: EMPTY
59101: LIST
59102: LIST
59103: LIST
59104: PPUSH
59105: CALL_OW 72
59109: IFFALSE 59197
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
59111: LD_ADDR_VAR 0 8
59115: PUSH
59116: LD_VAR 0 18
59120: PPUSH
59121: LD_INT 2
59123: PUSH
59124: LD_INT 30
59126: PUSH
59127: LD_INT 32
59129: PUSH
59130: EMPTY
59131: LIST
59132: LIST
59133: PUSH
59134: LD_INT 30
59136: PUSH
59137: LD_INT 33
59139: PUSH
59140: EMPTY
59141: LIST
59142: LIST
59143: PUSH
59144: EMPTY
59145: LIST
59146: LIST
59147: LIST
59148: PPUSH
59149: CALL_OW 72
59153: PUSH
59154: FOR_IN
59155: IFFALSE 59195
// begin if not GetBWeapon ( i ) then
59157: LD_VAR 0 8
59161: PPUSH
59162: CALL_OW 269
59166: NOT
59167: IFFALSE 59193
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
59169: LD_VAR 0 8
59173: PPUSH
59174: LD_VAR 0 8
59178: PPUSH
59179: LD_VAR 0 2
59183: PPUSH
59184: CALL 60443 0 2
59188: PPUSH
59189: CALL_OW 431
// end ;
59193: GO 59154
59195: POP
59196: POP
// end ; for i = 1 to personel do
59197: LD_ADDR_VAR 0 8
59201: PUSH
59202: DOUBLE
59203: LD_INT 1
59205: DEC
59206: ST_TO_ADDR
59207: LD_VAR 0 6
59211: PUSH
59212: FOR_TO
59213: IFFALSE 60277
// begin if i > 4 then
59215: LD_VAR 0 8
59219: PUSH
59220: LD_INT 4
59222: GREATER
59223: IFFALSE 59227
// break ;
59225: GO 60277
// case i of 1 :
59227: LD_VAR 0 8
59231: PUSH
59232: LD_INT 1
59234: DOUBLE
59235: EQUAL
59236: IFTRUE 59240
59238: GO 59320
59240: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
59241: LD_ADDR_VAR 0 12
59245: PUSH
59246: LD_VAR 0 18
59250: PPUSH
59251: LD_INT 22
59253: PUSH
59254: LD_VAR 0 16
59258: PUSH
59259: EMPTY
59260: LIST
59261: LIST
59262: PUSH
59263: LD_INT 58
59265: PUSH
59266: EMPTY
59267: LIST
59268: PUSH
59269: LD_INT 2
59271: PUSH
59272: LD_INT 30
59274: PUSH
59275: LD_INT 32
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: PUSH
59282: LD_INT 30
59284: PUSH
59285: LD_INT 4
59287: PUSH
59288: EMPTY
59289: LIST
59290: LIST
59291: PUSH
59292: LD_INT 30
59294: PUSH
59295: LD_INT 5
59297: PUSH
59298: EMPTY
59299: LIST
59300: LIST
59301: PUSH
59302: EMPTY
59303: LIST
59304: LIST
59305: LIST
59306: LIST
59307: PUSH
59308: EMPTY
59309: LIST
59310: LIST
59311: LIST
59312: PPUSH
59313: CALL_OW 72
59317: ST_TO_ADDR
59318: GO 59542
59320: LD_INT 2
59322: DOUBLE
59323: EQUAL
59324: IFTRUE 59328
59326: GO 59390
59328: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
59329: LD_ADDR_VAR 0 12
59333: PUSH
59334: LD_VAR 0 18
59338: PPUSH
59339: LD_INT 22
59341: PUSH
59342: LD_VAR 0 16
59346: PUSH
59347: EMPTY
59348: LIST
59349: LIST
59350: PUSH
59351: LD_INT 2
59353: PUSH
59354: LD_INT 30
59356: PUSH
59357: LD_INT 0
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 30
59366: PUSH
59367: LD_INT 1
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: EMPTY
59375: LIST
59376: LIST
59377: LIST
59378: PUSH
59379: EMPTY
59380: LIST
59381: LIST
59382: PPUSH
59383: CALL_OW 72
59387: ST_TO_ADDR
59388: GO 59542
59390: LD_INT 3
59392: DOUBLE
59393: EQUAL
59394: IFTRUE 59398
59396: GO 59460
59398: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
59399: LD_ADDR_VAR 0 12
59403: PUSH
59404: LD_VAR 0 18
59408: PPUSH
59409: LD_INT 22
59411: PUSH
59412: LD_VAR 0 16
59416: PUSH
59417: EMPTY
59418: LIST
59419: LIST
59420: PUSH
59421: LD_INT 2
59423: PUSH
59424: LD_INT 30
59426: PUSH
59427: LD_INT 2
59429: PUSH
59430: EMPTY
59431: LIST
59432: LIST
59433: PUSH
59434: LD_INT 30
59436: PUSH
59437: LD_INT 3
59439: PUSH
59440: EMPTY
59441: LIST
59442: LIST
59443: PUSH
59444: EMPTY
59445: LIST
59446: LIST
59447: LIST
59448: PUSH
59449: EMPTY
59450: LIST
59451: LIST
59452: PPUSH
59453: CALL_OW 72
59457: ST_TO_ADDR
59458: GO 59542
59460: LD_INT 4
59462: DOUBLE
59463: EQUAL
59464: IFTRUE 59468
59466: GO 59541
59468: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
59469: LD_ADDR_VAR 0 12
59473: PUSH
59474: LD_VAR 0 18
59478: PPUSH
59479: LD_INT 22
59481: PUSH
59482: LD_VAR 0 16
59486: PUSH
59487: EMPTY
59488: LIST
59489: LIST
59490: PUSH
59491: LD_INT 2
59493: PUSH
59494: LD_INT 30
59496: PUSH
59497: LD_INT 6
59499: PUSH
59500: EMPTY
59501: LIST
59502: LIST
59503: PUSH
59504: LD_INT 30
59506: PUSH
59507: LD_INT 7
59509: PUSH
59510: EMPTY
59511: LIST
59512: LIST
59513: PUSH
59514: LD_INT 30
59516: PUSH
59517: LD_INT 8
59519: PUSH
59520: EMPTY
59521: LIST
59522: LIST
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: LIST
59528: LIST
59529: PUSH
59530: EMPTY
59531: LIST
59532: LIST
59533: PPUSH
59534: CALL_OW 72
59538: ST_TO_ADDR
59539: GO 59542
59541: POP
// if i = 1 then
59542: LD_VAR 0 8
59546: PUSH
59547: LD_INT 1
59549: EQUAL
59550: IFFALSE 59661
// begin tmp := [ ] ;
59552: LD_ADDR_VAR 0 19
59556: PUSH
59557: EMPTY
59558: ST_TO_ADDR
// for j in f do
59559: LD_ADDR_VAR 0 9
59563: PUSH
59564: LD_VAR 0 12
59568: PUSH
59569: FOR_IN
59570: IFFALSE 59643
// if GetBType ( j ) = b_bunker then
59572: LD_VAR 0 9
59576: PPUSH
59577: CALL_OW 266
59581: PUSH
59582: LD_INT 32
59584: EQUAL
59585: IFFALSE 59612
// tmp := Insert ( tmp , 1 , j ) else
59587: LD_ADDR_VAR 0 19
59591: PUSH
59592: LD_VAR 0 19
59596: PPUSH
59597: LD_INT 1
59599: PPUSH
59600: LD_VAR 0 9
59604: PPUSH
59605: CALL_OW 2
59609: ST_TO_ADDR
59610: GO 59641
// tmp := Insert ( tmp , tmp + 1 , j ) ;
59612: LD_ADDR_VAR 0 19
59616: PUSH
59617: LD_VAR 0 19
59621: PPUSH
59622: LD_VAR 0 19
59626: PUSH
59627: LD_INT 1
59629: PLUS
59630: PPUSH
59631: LD_VAR 0 9
59635: PPUSH
59636: CALL_OW 2
59640: ST_TO_ADDR
59641: GO 59569
59643: POP
59644: POP
// if tmp then
59645: LD_VAR 0 19
59649: IFFALSE 59661
// f := tmp ;
59651: LD_ADDR_VAR 0 12
59655: PUSH
59656: LD_VAR 0 19
59660: ST_TO_ADDR
// end ; x := personel [ i ] ;
59661: LD_ADDR_VAR 0 13
59665: PUSH
59666: LD_VAR 0 6
59670: PUSH
59671: LD_VAR 0 8
59675: ARRAY
59676: ST_TO_ADDR
// if x = - 1 then
59677: LD_VAR 0 13
59681: PUSH
59682: LD_INT 1
59684: NEG
59685: EQUAL
59686: IFFALSE 59895
// begin for j in f do
59688: LD_ADDR_VAR 0 9
59692: PUSH
59693: LD_VAR 0 12
59697: PUSH
59698: FOR_IN
59699: IFFALSE 59891
// repeat InitHc ;
59701: CALL_OW 19
// if GetBType ( j ) = b_barracks then
59705: LD_VAR 0 9
59709: PPUSH
59710: CALL_OW 266
59714: PUSH
59715: LD_INT 5
59717: EQUAL
59718: IFFALSE 59788
// begin if UnitsInside ( j ) < 3 then
59720: LD_VAR 0 9
59724: PPUSH
59725: CALL_OW 313
59729: PUSH
59730: LD_INT 3
59732: LESS
59733: IFFALSE 59769
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
59735: LD_INT 0
59737: PPUSH
59738: LD_INT 5
59740: PUSH
59741: LD_INT 8
59743: PUSH
59744: LD_INT 9
59746: PUSH
59747: EMPTY
59748: LIST
59749: LIST
59750: LIST
59751: PUSH
59752: LD_VAR 0 17
59756: ARRAY
59757: PPUSH
59758: LD_VAR 0 4
59762: PPUSH
59763: CALL_OW 380
59767: GO 59786
// PrepareHuman ( false , i , skill ) ;
59769: LD_INT 0
59771: PPUSH
59772: LD_VAR 0 8
59776: PPUSH
59777: LD_VAR 0 4
59781: PPUSH
59782: CALL_OW 380
// end else
59786: GO 59805
// PrepareHuman ( false , i , skill ) ;
59788: LD_INT 0
59790: PPUSH
59791: LD_VAR 0 8
59795: PPUSH
59796: LD_VAR 0 4
59800: PPUSH
59801: CALL_OW 380
// un := CreateHuman ;
59805: LD_ADDR_VAR 0 14
59809: PUSH
59810: CALL_OW 44
59814: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59815: LD_ADDR_VAR 0 7
59819: PUSH
59820: LD_VAR 0 7
59824: PPUSH
59825: LD_INT 1
59827: PPUSH
59828: LD_VAR 0 14
59832: PPUSH
59833: CALL_OW 2
59837: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
59838: LD_VAR 0 14
59842: PPUSH
59843: LD_VAR 0 9
59847: PPUSH
59848: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
59852: LD_VAR 0 9
59856: PPUSH
59857: CALL_OW 313
59861: PUSH
59862: LD_INT 6
59864: EQUAL
59865: PUSH
59866: LD_VAR 0 9
59870: PPUSH
59871: CALL_OW 266
59875: PUSH
59876: LD_INT 32
59878: PUSH
59879: LD_INT 31
59881: PUSH
59882: EMPTY
59883: LIST
59884: LIST
59885: IN
59886: OR
59887: IFFALSE 59701
59889: GO 59698
59891: POP
59892: POP
// end else
59893: GO 60275
// for j = 1 to x do
59895: LD_ADDR_VAR 0 9
59899: PUSH
59900: DOUBLE
59901: LD_INT 1
59903: DEC
59904: ST_TO_ADDR
59905: LD_VAR 0 13
59909: PUSH
59910: FOR_TO
59911: IFFALSE 60273
// begin InitHc ;
59913: CALL_OW 19
// if not f then
59917: LD_VAR 0 12
59921: NOT
59922: IFFALSE 60011
// begin PrepareHuman ( false , i , skill ) ;
59924: LD_INT 0
59926: PPUSH
59927: LD_VAR 0 8
59931: PPUSH
59932: LD_VAR 0 4
59936: PPUSH
59937: CALL_OW 380
// un := CreateHuman ;
59941: LD_ADDR_VAR 0 14
59945: PUSH
59946: CALL_OW 44
59950: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
59951: LD_ADDR_VAR 0 7
59955: PUSH
59956: LD_VAR 0 7
59960: PPUSH
59961: LD_INT 1
59963: PPUSH
59964: LD_VAR 0 14
59968: PPUSH
59969: CALL_OW 2
59973: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
59974: LD_VAR 0 14
59978: PPUSH
59979: LD_VAR 0 1
59983: PPUSH
59984: CALL_OW 250
59988: PPUSH
59989: LD_VAR 0 1
59993: PPUSH
59994: CALL_OW 251
59998: PPUSH
59999: LD_INT 10
60001: PPUSH
60002: LD_INT 0
60004: PPUSH
60005: CALL_OW 50
// continue ;
60009: GO 59910
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
60011: LD_VAR 0 12
60015: PUSH
60016: LD_INT 1
60018: ARRAY
60019: PPUSH
60020: CALL_OW 313
60024: PUSH
60025: LD_VAR 0 12
60029: PUSH
60030: LD_INT 1
60032: ARRAY
60033: PPUSH
60034: CALL_OW 266
60038: PUSH
60039: LD_INT 32
60041: PUSH
60042: LD_INT 31
60044: PUSH
60045: EMPTY
60046: LIST
60047: LIST
60048: IN
60049: AND
60050: PUSH
60051: LD_VAR 0 12
60055: PUSH
60056: LD_INT 1
60058: ARRAY
60059: PPUSH
60060: CALL_OW 313
60064: PUSH
60065: LD_INT 6
60067: EQUAL
60068: OR
60069: IFFALSE 60089
// f := Delete ( f , 1 ) ;
60071: LD_ADDR_VAR 0 12
60075: PUSH
60076: LD_VAR 0 12
60080: PPUSH
60081: LD_INT 1
60083: PPUSH
60084: CALL_OW 3
60088: ST_TO_ADDR
// if not f then
60089: LD_VAR 0 12
60093: NOT
60094: IFFALSE 60112
// begin x := x + 2 ;
60096: LD_ADDR_VAR 0 13
60100: PUSH
60101: LD_VAR 0 13
60105: PUSH
60106: LD_INT 2
60108: PLUS
60109: ST_TO_ADDR
// continue ;
60110: GO 59910
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
60112: LD_VAR 0 12
60116: PUSH
60117: LD_INT 1
60119: ARRAY
60120: PPUSH
60121: CALL_OW 266
60125: PUSH
60126: LD_INT 5
60128: EQUAL
60129: IFFALSE 60203
// begin if UnitsInside ( f [ 1 ] ) < 3 then
60131: LD_VAR 0 12
60135: PUSH
60136: LD_INT 1
60138: ARRAY
60139: PPUSH
60140: CALL_OW 313
60144: PUSH
60145: LD_INT 3
60147: LESS
60148: IFFALSE 60184
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
60150: LD_INT 0
60152: PPUSH
60153: LD_INT 5
60155: PUSH
60156: LD_INT 8
60158: PUSH
60159: LD_INT 9
60161: PUSH
60162: EMPTY
60163: LIST
60164: LIST
60165: LIST
60166: PUSH
60167: LD_VAR 0 17
60171: ARRAY
60172: PPUSH
60173: LD_VAR 0 4
60177: PPUSH
60178: CALL_OW 380
60182: GO 60201
// PrepareHuman ( false , i , skill ) ;
60184: LD_INT 0
60186: PPUSH
60187: LD_VAR 0 8
60191: PPUSH
60192: LD_VAR 0 4
60196: PPUSH
60197: CALL_OW 380
// end else
60201: GO 60220
// PrepareHuman ( false , i , skill ) ;
60203: LD_INT 0
60205: PPUSH
60206: LD_VAR 0 8
60210: PPUSH
60211: LD_VAR 0 4
60215: PPUSH
60216: CALL_OW 380
// un := CreateHuman ;
60220: LD_ADDR_VAR 0 14
60224: PUSH
60225: CALL_OW 44
60229: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
60230: LD_ADDR_VAR 0 7
60234: PUSH
60235: LD_VAR 0 7
60239: PPUSH
60240: LD_INT 1
60242: PPUSH
60243: LD_VAR 0 14
60247: PPUSH
60248: CALL_OW 2
60252: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
60253: LD_VAR 0 14
60257: PPUSH
60258: LD_VAR 0 12
60262: PUSH
60263: LD_INT 1
60265: ARRAY
60266: PPUSH
60267: CALL_OW 52
// end ;
60271: GO 59910
60273: POP
60274: POP
// end ;
60275: GO 59212
60277: POP
60278: POP
// result := result ^ buildings ;
60279: LD_ADDR_VAR 0 7
60283: PUSH
60284: LD_VAR 0 7
60288: PUSH
60289: LD_VAR 0 18
60293: ADD
60294: ST_TO_ADDR
// end else
60295: GO 60438
// begin for i = 1 to personel do
60297: LD_ADDR_VAR 0 8
60301: PUSH
60302: DOUBLE
60303: LD_INT 1
60305: DEC
60306: ST_TO_ADDR
60307: LD_VAR 0 6
60311: PUSH
60312: FOR_TO
60313: IFFALSE 60436
// begin if i > 4 then
60315: LD_VAR 0 8
60319: PUSH
60320: LD_INT 4
60322: GREATER
60323: IFFALSE 60327
// break ;
60325: GO 60436
// x := personel [ i ] ;
60327: LD_ADDR_VAR 0 13
60331: PUSH
60332: LD_VAR 0 6
60336: PUSH
60337: LD_VAR 0 8
60341: ARRAY
60342: ST_TO_ADDR
// if x = - 1 then
60343: LD_VAR 0 13
60347: PUSH
60348: LD_INT 1
60350: NEG
60351: EQUAL
60352: IFFALSE 60356
// continue ;
60354: GO 60312
// PrepareHuman ( false , i , skill ) ;
60356: LD_INT 0
60358: PPUSH
60359: LD_VAR 0 8
60363: PPUSH
60364: LD_VAR 0 4
60368: PPUSH
60369: CALL_OW 380
// un := CreateHuman ;
60373: LD_ADDR_VAR 0 14
60377: PUSH
60378: CALL_OW 44
60382: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
60383: LD_VAR 0 14
60387: PPUSH
60388: LD_VAR 0 1
60392: PPUSH
60393: CALL_OW 250
60397: PPUSH
60398: LD_VAR 0 1
60402: PPUSH
60403: CALL_OW 251
60407: PPUSH
60408: LD_INT 10
60410: PPUSH
60411: LD_INT 0
60413: PPUSH
60414: CALL_OW 50
// result := result ^ un ;
60418: LD_ADDR_VAR 0 7
60422: PUSH
60423: LD_VAR 0 7
60427: PUSH
60428: LD_VAR 0 14
60432: ADD
60433: ST_TO_ADDR
// end ;
60434: GO 60312
60436: POP
60437: POP
// end ; end ;
60438: LD_VAR 0 7
60442: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
60443: LD_INT 0
60445: PPUSH
60446: PPUSH
60447: PPUSH
60448: PPUSH
60449: PPUSH
60450: PPUSH
60451: PPUSH
60452: PPUSH
60453: PPUSH
60454: PPUSH
60455: PPUSH
60456: PPUSH
60457: PPUSH
60458: PPUSH
60459: PPUSH
60460: PPUSH
// result := false ;
60461: LD_ADDR_VAR 0 3
60465: PUSH
60466: LD_INT 0
60468: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
60469: LD_VAR 0 1
60473: NOT
60474: PUSH
60475: LD_VAR 0 1
60479: PPUSH
60480: CALL_OW 266
60484: PUSH
60485: LD_INT 32
60487: PUSH
60488: LD_INT 33
60490: PUSH
60491: EMPTY
60492: LIST
60493: LIST
60494: IN
60495: NOT
60496: OR
60497: IFFALSE 60501
// exit ;
60499: GO 61610
// nat := GetNation ( tower ) ;
60501: LD_ADDR_VAR 0 12
60505: PUSH
60506: LD_VAR 0 1
60510: PPUSH
60511: CALL_OW 248
60515: ST_TO_ADDR
// side := GetSide ( tower ) ;
60516: LD_ADDR_VAR 0 16
60520: PUSH
60521: LD_VAR 0 1
60525: PPUSH
60526: CALL_OW 255
60530: ST_TO_ADDR
// x := GetX ( tower ) ;
60531: LD_ADDR_VAR 0 10
60535: PUSH
60536: LD_VAR 0 1
60540: PPUSH
60541: CALL_OW 250
60545: ST_TO_ADDR
// y := GetY ( tower ) ;
60546: LD_ADDR_VAR 0 11
60550: PUSH
60551: LD_VAR 0 1
60555: PPUSH
60556: CALL_OW 251
60560: ST_TO_ADDR
// if not x or not y then
60561: LD_VAR 0 10
60565: NOT
60566: PUSH
60567: LD_VAR 0 11
60571: NOT
60572: OR
60573: IFFALSE 60577
// exit ;
60575: GO 61610
// weapon := 0 ;
60577: LD_ADDR_VAR 0 18
60581: PUSH
60582: LD_INT 0
60584: ST_TO_ADDR
// fac_list := [ ] ;
60585: LD_ADDR_VAR 0 17
60589: PUSH
60590: EMPTY
60591: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
60592: LD_ADDR_VAR 0 6
60596: PUSH
60597: LD_VAR 0 1
60601: PPUSH
60602: CALL_OW 274
60606: PPUSH
60607: LD_VAR 0 2
60611: PPUSH
60612: LD_INT 0
60614: PPUSH
60615: CALL 58181 0 3
60619: PPUSH
60620: LD_INT 30
60622: PUSH
60623: LD_INT 3
60625: PUSH
60626: EMPTY
60627: LIST
60628: LIST
60629: PPUSH
60630: CALL_OW 72
60634: ST_TO_ADDR
// if not factories then
60635: LD_VAR 0 6
60639: NOT
60640: IFFALSE 60644
// exit ;
60642: GO 61610
// for i in factories do
60644: LD_ADDR_VAR 0 8
60648: PUSH
60649: LD_VAR 0 6
60653: PUSH
60654: FOR_IN
60655: IFFALSE 60680
// fac_list := fac_list union AvailableWeaponList ( i ) ;
60657: LD_ADDR_VAR 0 17
60661: PUSH
60662: LD_VAR 0 17
60666: PUSH
60667: LD_VAR 0 8
60671: PPUSH
60672: CALL_OW 478
60676: UNION
60677: ST_TO_ADDR
60678: GO 60654
60680: POP
60681: POP
// if not fac_list then
60682: LD_VAR 0 17
60686: NOT
60687: IFFALSE 60691
// exit ;
60689: GO 61610
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
60691: LD_ADDR_VAR 0 5
60695: PUSH
60696: LD_INT 4
60698: PUSH
60699: LD_INT 5
60701: PUSH
60702: LD_INT 9
60704: PUSH
60705: LD_INT 10
60707: PUSH
60708: LD_INT 6
60710: PUSH
60711: LD_INT 7
60713: PUSH
60714: LD_INT 11
60716: PUSH
60717: EMPTY
60718: LIST
60719: LIST
60720: LIST
60721: LIST
60722: LIST
60723: LIST
60724: LIST
60725: PUSH
60726: LD_INT 27
60728: PUSH
60729: LD_INT 28
60731: PUSH
60732: LD_INT 26
60734: PUSH
60735: LD_INT 30
60737: PUSH
60738: EMPTY
60739: LIST
60740: LIST
60741: LIST
60742: LIST
60743: PUSH
60744: LD_INT 43
60746: PUSH
60747: LD_INT 44
60749: PUSH
60750: LD_INT 46
60752: PUSH
60753: LD_INT 45
60755: PUSH
60756: LD_INT 47
60758: PUSH
60759: LD_INT 49
60761: PUSH
60762: EMPTY
60763: LIST
60764: LIST
60765: LIST
60766: LIST
60767: LIST
60768: LIST
60769: PUSH
60770: EMPTY
60771: LIST
60772: LIST
60773: LIST
60774: PUSH
60775: LD_VAR 0 12
60779: ARRAY
60780: ST_TO_ADDR
// list := list isect fac_list ;
60781: LD_ADDR_VAR 0 5
60785: PUSH
60786: LD_VAR 0 5
60790: PUSH
60791: LD_VAR 0 17
60795: ISECT
60796: ST_TO_ADDR
// if not list then
60797: LD_VAR 0 5
60801: NOT
60802: IFFALSE 60806
// exit ;
60804: GO 61610
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
60806: LD_VAR 0 12
60810: PUSH
60811: LD_INT 3
60813: EQUAL
60814: PUSH
60815: LD_INT 49
60817: PUSH
60818: LD_VAR 0 5
60822: IN
60823: AND
60824: PUSH
60825: LD_INT 31
60827: PPUSH
60828: LD_VAR 0 16
60832: PPUSH
60833: CALL_OW 321
60837: PUSH
60838: LD_INT 2
60840: EQUAL
60841: AND
60842: IFFALSE 60902
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
60844: LD_INT 22
60846: PUSH
60847: LD_VAR 0 16
60851: PUSH
60852: EMPTY
60853: LIST
60854: LIST
60855: PUSH
60856: LD_INT 35
60858: PUSH
60859: LD_INT 49
60861: PUSH
60862: EMPTY
60863: LIST
60864: LIST
60865: PUSH
60866: LD_INT 91
60868: PUSH
60869: LD_VAR 0 1
60873: PUSH
60874: LD_INT 10
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: LIST
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: LIST
60886: PPUSH
60887: CALL_OW 69
60891: NOT
60892: IFFALSE 60902
// weapon := ru_time_lapser ;
60894: LD_ADDR_VAR 0 18
60898: PUSH
60899: LD_INT 49
60901: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
60902: LD_VAR 0 12
60906: PUSH
60907: LD_INT 1
60909: PUSH
60910: LD_INT 2
60912: PUSH
60913: EMPTY
60914: LIST
60915: LIST
60916: IN
60917: PUSH
60918: LD_INT 11
60920: PUSH
60921: LD_VAR 0 5
60925: IN
60926: PUSH
60927: LD_INT 30
60929: PUSH
60930: LD_VAR 0 5
60934: IN
60935: OR
60936: AND
60937: PUSH
60938: LD_INT 6
60940: PPUSH
60941: LD_VAR 0 16
60945: PPUSH
60946: CALL_OW 321
60950: PUSH
60951: LD_INT 2
60953: EQUAL
60954: AND
60955: IFFALSE 61120
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
60957: LD_INT 22
60959: PUSH
60960: LD_VAR 0 16
60964: PUSH
60965: EMPTY
60966: LIST
60967: LIST
60968: PUSH
60969: LD_INT 2
60971: PUSH
60972: LD_INT 35
60974: PUSH
60975: LD_INT 11
60977: PUSH
60978: EMPTY
60979: LIST
60980: LIST
60981: PUSH
60982: LD_INT 35
60984: PUSH
60985: LD_INT 30
60987: PUSH
60988: EMPTY
60989: LIST
60990: LIST
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: LIST
60996: PUSH
60997: LD_INT 91
60999: PUSH
61000: LD_VAR 0 1
61004: PUSH
61005: LD_INT 18
61007: PUSH
61008: EMPTY
61009: LIST
61010: LIST
61011: LIST
61012: PUSH
61013: EMPTY
61014: LIST
61015: LIST
61016: LIST
61017: PPUSH
61018: CALL_OW 69
61022: NOT
61023: PUSH
61024: LD_INT 22
61026: PUSH
61027: LD_VAR 0 16
61031: PUSH
61032: EMPTY
61033: LIST
61034: LIST
61035: PUSH
61036: LD_INT 2
61038: PUSH
61039: LD_INT 30
61041: PUSH
61042: LD_INT 32
61044: PUSH
61045: EMPTY
61046: LIST
61047: LIST
61048: PUSH
61049: LD_INT 30
61051: PUSH
61052: LD_INT 33
61054: PUSH
61055: EMPTY
61056: LIST
61057: LIST
61058: PUSH
61059: EMPTY
61060: LIST
61061: LIST
61062: LIST
61063: PUSH
61064: LD_INT 91
61066: PUSH
61067: LD_VAR 0 1
61071: PUSH
61072: LD_INT 12
61074: PUSH
61075: EMPTY
61076: LIST
61077: LIST
61078: LIST
61079: PUSH
61080: EMPTY
61081: LIST
61082: LIST
61083: LIST
61084: PUSH
61085: EMPTY
61086: LIST
61087: PPUSH
61088: CALL_OW 69
61092: PUSH
61093: LD_INT 2
61095: GREATER
61096: AND
61097: IFFALSE 61120
// weapon := [ us_radar , ar_radar ] [ nat ] ;
61099: LD_ADDR_VAR 0 18
61103: PUSH
61104: LD_INT 11
61106: PUSH
61107: LD_INT 30
61109: PUSH
61110: EMPTY
61111: LIST
61112: LIST
61113: PUSH
61114: LD_VAR 0 12
61118: ARRAY
61119: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
61120: LD_VAR 0 18
61124: NOT
61125: PUSH
61126: LD_INT 40
61128: PPUSH
61129: LD_VAR 0 16
61133: PPUSH
61134: CALL_OW 321
61138: PUSH
61139: LD_INT 2
61141: EQUAL
61142: AND
61143: PUSH
61144: LD_INT 7
61146: PUSH
61147: LD_VAR 0 5
61151: IN
61152: PUSH
61153: LD_INT 28
61155: PUSH
61156: LD_VAR 0 5
61160: IN
61161: OR
61162: PUSH
61163: LD_INT 45
61165: PUSH
61166: LD_VAR 0 5
61170: IN
61171: OR
61172: AND
61173: IFFALSE 61427
// begin hex := GetHexInfo ( x , y ) ;
61175: LD_ADDR_VAR 0 4
61179: PUSH
61180: LD_VAR 0 10
61184: PPUSH
61185: LD_VAR 0 11
61189: PPUSH
61190: CALL_OW 546
61194: ST_TO_ADDR
// if hex [ 1 ] then
61195: LD_VAR 0 4
61199: PUSH
61200: LD_INT 1
61202: ARRAY
61203: IFFALSE 61207
// exit ;
61205: GO 61610
// height := hex [ 2 ] ;
61207: LD_ADDR_VAR 0 15
61211: PUSH
61212: LD_VAR 0 4
61216: PUSH
61217: LD_INT 2
61219: ARRAY
61220: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
61221: LD_ADDR_VAR 0 14
61225: PUSH
61226: LD_INT 0
61228: PUSH
61229: LD_INT 2
61231: PUSH
61232: LD_INT 3
61234: PUSH
61235: LD_INT 5
61237: PUSH
61238: EMPTY
61239: LIST
61240: LIST
61241: LIST
61242: LIST
61243: ST_TO_ADDR
// for i in tmp do
61244: LD_ADDR_VAR 0 8
61248: PUSH
61249: LD_VAR 0 14
61253: PUSH
61254: FOR_IN
61255: IFFALSE 61425
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
61257: LD_ADDR_VAR 0 9
61261: PUSH
61262: LD_VAR 0 10
61266: PPUSH
61267: LD_VAR 0 8
61271: PPUSH
61272: LD_INT 5
61274: PPUSH
61275: CALL_OW 272
61279: PUSH
61280: LD_VAR 0 11
61284: PPUSH
61285: LD_VAR 0 8
61289: PPUSH
61290: LD_INT 5
61292: PPUSH
61293: CALL_OW 273
61297: PUSH
61298: EMPTY
61299: LIST
61300: LIST
61301: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
61302: LD_VAR 0 9
61306: PUSH
61307: LD_INT 1
61309: ARRAY
61310: PPUSH
61311: LD_VAR 0 9
61315: PUSH
61316: LD_INT 2
61318: ARRAY
61319: PPUSH
61320: CALL_OW 488
61324: IFFALSE 61423
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
61326: LD_ADDR_VAR 0 4
61330: PUSH
61331: LD_VAR 0 9
61335: PUSH
61336: LD_INT 1
61338: ARRAY
61339: PPUSH
61340: LD_VAR 0 9
61344: PUSH
61345: LD_INT 2
61347: ARRAY
61348: PPUSH
61349: CALL_OW 546
61353: ST_TO_ADDR
// if hex [ 1 ] then
61354: LD_VAR 0 4
61358: PUSH
61359: LD_INT 1
61361: ARRAY
61362: IFFALSE 61366
// continue ;
61364: GO 61254
// h := hex [ 2 ] ;
61366: LD_ADDR_VAR 0 13
61370: PUSH
61371: LD_VAR 0 4
61375: PUSH
61376: LD_INT 2
61378: ARRAY
61379: ST_TO_ADDR
// if h + 7 < height then
61380: LD_VAR 0 13
61384: PUSH
61385: LD_INT 7
61387: PLUS
61388: PUSH
61389: LD_VAR 0 15
61393: LESS
61394: IFFALSE 61423
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
61396: LD_ADDR_VAR 0 18
61400: PUSH
61401: LD_INT 7
61403: PUSH
61404: LD_INT 28
61406: PUSH
61407: LD_INT 45
61409: PUSH
61410: EMPTY
61411: LIST
61412: LIST
61413: LIST
61414: PUSH
61415: LD_VAR 0 12
61419: ARRAY
61420: ST_TO_ADDR
// break ;
61421: GO 61425
// end ; end ; end ;
61423: GO 61254
61425: POP
61426: POP
// end ; if not weapon then
61427: LD_VAR 0 18
61431: NOT
61432: IFFALSE 61492
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
61434: LD_ADDR_VAR 0 5
61438: PUSH
61439: LD_VAR 0 5
61443: PUSH
61444: LD_INT 11
61446: PUSH
61447: LD_INT 30
61449: PUSH
61450: LD_INT 49
61452: PUSH
61453: EMPTY
61454: LIST
61455: LIST
61456: LIST
61457: DIFF
61458: ST_TO_ADDR
// if not list then
61459: LD_VAR 0 5
61463: NOT
61464: IFFALSE 61468
// exit ;
61466: GO 61610
// weapon := list [ rand ( 1 , list ) ] ;
61468: LD_ADDR_VAR 0 18
61472: PUSH
61473: LD_VAR 0 5
61477: PUSH
61478: LD_INT 1
61480: PPUSH
61481: LD_VAR 0 5
61485: PPUSH
61486: CALL_OW 12
61490: ARRAY
61491: ST_TO_ADDR
// end ; if weapon then
61492: LD_VAR 0 18
61496: IFFALSE 61610
// begin tmp := CostOfWeapon ( weapon ) ;
61498: LD_ADDR_VAR 0 14
61502: PUSH
61503: LD_VAR 0 18
61507: PPUSH
61508: CALL_OW 451
61512: ST_TO_ADDR
// j := GetBase ( tower ) ;
61513: LD_ADDR_VAR 0 9
61517: PUSH
61518: LD_VAR 0 1
61522: PPUSH
61523: CALL_OW 274
61527: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
61528: LD_VAR 0 9
61532: PPUSH
61533: LD_INT 1
61535: PPUSH
61536: CALL_OW 275
61540: PUSH
61541: LD_VAR 0 14
61545: PUSH
61546: LD_INT 1
61548: ARRAY
61549: GREATEREQUAL
61550: PUSH
61551: LD_VAR 0 9
61555: PPUSH
61556: LD_INT 2
61558: PPUSH
61559: CALL_OW 275
61563: PUSH
61564: LD_VAR 0 14
61568: PUSH
61569: LD_INT 2
61571: ARRAY
61572: GREATEREQUAL
61573: AND
61574: PUSH
61575: LD_VAR 0 9
61579: PPUSH
61580: LD_INT 3
61582: PPUSH
61583: CALL_OW 275
61587: PUSH
61588: LD_VAR 0 14
61592: PUSH
61593: LD_INT 3
61595: ARRAY
61596: GREATEREQUAL
61597: AND
61598: IFFALSE 61610
// result := weapon ;
61600: LD_ADDR_VAR 0 3
61604: PUSH
61605: LD_VAR 0 18
61609: ST_TO_ADDR
// end ; end ;
61610: LD_VAR 0 3
61614: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
61615: LD_INT 0
61617: PPUSH
61618: PPUSH
// result := true ;
61619: LD_ADDR_VAR 0 3
61623: PUSH
61624: LD_INT 1
61626: ST_TO_ADDR
// if array1 = array2 then
61627: LD_VAR 0 1
61631: PUSH
61632: LD_VAR 0 2
61636: EQUAL
61637: IFFALSE 61697
// begin for i = 1 to array1 do
61639: LD_ADDR_VAR 0 4
61643: PUSH
61644: DOUBLE
61645: LD_INT 1
61647: DEC
61648: ST_TO_ADDR
61649: LD_VAR 0 1
61653: PUSH
61654: FOR_TO
61655: IFFALSE 61693
// if array1 [ i ] <> array2 [ i ] then
61657: LD_VAR 0 1
61661: PUSH
61662: LD_VAR 0 4
61666: ARRAY
61667: PUSH
61668: LD_VAR 0 2
61672: PUSH
61673: LD_VAR 0 4
61677: ARRAY
61678: NONEQUAL
61679: IFFALSE 61691
// begin result := false ;
61681: LD_ADDR_VAR 0 3
61685: PUSH
61686: LD_INT 0
61688: ST_TO_ADDR
// break ;
61689: GO 61693
// end ;
61691: GO 61654
61693: POP
61694: POP
// end else
61695: GO 61705
// result := false ;
61697: LD_ADDR_VAR 0 3
61701: PUSH
61702: LD_INT 0
61704: ST_TO_ADDR
// end ;
61705: LD_VAR 0 3
61709: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
61710: LD_INT 0
61712: PPUSH
61713: PPUSH
// if not array1 or not array2 then
61714: LD_VAR 0 1
61718: NOT
61719: PUSH
61720: LD_VAR 0 2
61724: NOT
61725: OR
61726: IFFALSE 61730
// exit ;
61728: GO 61794
// result := true ;
61730: LD_ADDR_VAR 0 3
61734: PUSH
61735: LD_INT 1
61737: ST_TO_ADDR
// for i = 1 to array1 do
61738: LD_ADDR_VAR 0 4
61742: PUSH
61743: DOUBLE
61744: LD_INT 1
61746: DEC
61747: ST_TO_ADDR
61748: LD_VAR 0 1
61752: PUSH
61753: FOR_TO
61754: IFFALSE 61792
// if array1 [ i ] <> array2 [ i ] then
61756: LD_VAR 0 1
61760: PUSH
61761: LD_VAR 0 4
61765: ARRAY
61766: PUSH
61767: LD_VAR 0 2
61771: PUSH
61772: LD_VAR 0 4
61776: ARRAY
61777: NONEQUAL
61778: IFFALSE 61790
// begin result := false ;
61780: LD_ADDR_VAR 0 3
61784: PUSH
61785: LD_INT 0
61787: ST_TO_ADDR
// break ;
61788: GO 61792
// end ;
61790: GO 61753
61792: POP
61793: POP
// end ;
61794: LD_VAR 0 3
61798: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
61799: LD_INT 0
61801: PPUSH
61802: PPUSH
61803: PPUSH
// pom := GetBase ( fac ) ;
61804: LD_ADDR_VAR 0 5
61808: PUSH
61809: LD_VAR 0 1
61813: PPUSH
61814: CALL_OW 274
61818: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
61819: LD_ADDR_VAR 0 4
61823: PUSH
61824: LD_VAR 0 2
61828: PUSH
61829: LD_INT 1
61831: ARRAY
61832: PPUSH
61833: LD_VAR 0 2
61837: PUSH
61838: LD_INT 2
61840: ARRAY
61841: PPUSH
61842: LD_VAR 0 2
61846: PUSH
61847: LD_INT 3
61849: ARRAY
61850: PPUSH
61851: LD_VAR 0 2
61855: PUSH
61856: LD_INT 4
61858: ARRAY
61859: PPUSH
61860: CALL_OW 449
61864: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
61865: LD_ADDR_VAR 0 3
61869: PUSH
61870: LD_VAR 0 5
61874: PPUSH
61875: LD_INT 1
61877: PPUSH
61878: CALL_OW 275
61882: PUSH
61883: LD_VAR 0 4
61887: PUSH
61888: LD_INT 1
61890: ARRAY
61891: GREATEREQUAL
61892: PUSH
61893: LD_VAR 0 5
61897: PPUSH
61898: LD_INT 2
61900: PPUSH
61901: CALL_OW 275
61905: PUSH
61906: LD_VAR 0 4
61910: PUSH
61911: LD_INT 2
61913: ARRAY
61914: GREATEREQUAL
61915: AND
61916: PUSH
61917: LD_VAR 0 5
61921: PPUSH
61922: LD_INT 3
61924: PPUSH
61925: CALL_OW 275
61929: PUSH
61930: LD_VAR 0 4
61934: PUSH
61935: LD_INT 3
61937: ARRAY
61938: GREATEREQUAL
61939: AND
61940: ST_TO_ADDR
// end ;
61941: LD_VAR 0 3
61945: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
61946: LD_INT 0
61948: PPUSH
61949: PPUSH
61950: PPUSH
61951: PPUSH
// pom := GetBase ( building ) ;
61952: LD_ADDR_VAR 0 3
61956: PUSH
61957: LD_VAR 0 1
61961: PPUSH
61962: CALL_OW 274
61966: ST_TO_ADDR
// if not pom then
61967: LD_VAR 0 3
61971: NOT
61972: IFFALSE 61976
// exit ;
61974: GO 62146
// btype := GetBType ( building ) ;
61976: LD_ADDR_VAR 0 5
61980: PUSH
61981: LD_VAR 0 1
61985: PPUSH
61986: CALL_OW 266
61990: ST_TO_ADDR
// if btype = b_armoury then
61991: LD_VAR 0 5
61995: PUSH
61996: LD_INT 4
61998: EQUAL
61999: IFFALSE 62009
// btype := b_barracks ;
62001: LD_ADDR_VAR 0 5
62005: PUSH
62006: LD_INT 5
62008: ST_TO_ADDR
// if btype = b_depot then
62009: LD_VAR 0 5
62013: PUSH
62014: LD_INT 0
62016: EQUAL
62017: IFFALSE 62027
// btype := b_warehouse ;
62019: LD_ADDR_VAR 0 5
62023: PUSH
62024: LD_INT 1
62026: ST_TO_ADDR
// if btype = b_workshop then
62027: LD_VAR 0 5
62031: PUSH
62032: LD_INT 2
62034: EQUAL
62035: IFFALSE 62045
// btype := b_factory ;
62037: LD_ADDR_VAR 0 5
62041: PUSH
62042: LD_INT 3
62044: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
62045: LD_ADDR_VAR 0 4
62049: PUSH
62050: LD_VAR 0 5
62054: PPUSH
62055: LD_VAR 0 1
62059: PPUSH
62060: CALL_OW 248
62064: PPUSH
62065: CALL_OW 450
62069: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
62070: LD_ADDR_VAR 0 2
62074: PUSH
62075: LD_VAR 0 3
62079: PPUSH
62080: LD_INT 1
62082: PPUSH
62083: CALL_OW 275
62087: PUSH
62088: LD_VAR 0 4
62092: PUSH
62093: LD_INT 1
62095: ARRAY
62096: GREATEREQUAL
62097: PUSH
62098: LD_VAR 0 3
62102: PPUSH
62103: LD_INT 2
62105: PPUSH
62106: CALL_OW 275
62110: PUSH
62111: LD_VAR 0 4
62115: PUSH
62116: LD_INT 2
62118: ARRAY
62119: GREATEREQUAL
62120: AND
62121: PUSH
62122: LD_VAR 0 3
62126: PPUSH
62127: LD_INT 3
62129: PPUSH
62130: CALL_OW 275
62134: PUSH
62135: LD_VAR 0 4
62139: PUSH
62140: LD_INT 3
62142: ARRAY
62143: GREATEREQUAL
62144: AND
62145: ST_TO_ADDR
// end ;
62146: LD_VAR 0 2
62150: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
62151: LD_INT 0
62153: PPUSH
62154: PPUSH
62155: PPUSH
// pom := GetBase ( building ) ;
62156: LD_ADDR_VAR 0 4
62160: PUSH
62161: LD_VAR 0 1
62165: PPUSH
62166: CALL_OW 274
62170: ST_TO_ADDR
// if not pom then
62171: LD_VAR 0 4
62175: NOT
62176: IFFALSE 62180
// exit ;
62178: GO 62281
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
62180: LD_ADDR_VAR 0 5
62184: PUSH
62185: LD_VAR 0 2
62189: PPUSH
62190: LD_VAR 0 1
62194: PPUSH
62195: CALL_OW 248
62199: PPUSH
62200: CALL_OW 450
62204: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
62205: LD_ADDR_VAR 0 3
62209: PUSH
62210: LD_VAR 0 4
62214: PPUSH
62215: LD_INT 1
62217: PPUSH
62218: CALL_OW 275
62222: PUSH
62223: LD_VAR 0 5
62227: PUSH
62228: LD_INT 1
62230: ARRAY
62231: GREATEREQUAL
62232: PUSH
62233: LD_VAR 0 4
62237: PPUSH
62238: LD_INT 2
62240: PPUSH
62241: CALL_OW 275
62245: PUSH
62246: LD_VAR 0 5
62250: PUSH
62251: LD_INT 2
62253: ARRAY
62254: GREATEREQUAL
62255: AND
62256: PUSH
62257: LD_VAR 0 4
62261: PPUSH
62262: LD_INT 3
62264: PPUSH
62265: CALL_OW 275
62269: PUSH
62270: LD_VAR 0 5
62274: PUSH
62275: LD_INT 3
62277: ARRAY
62278: GREATEREQUAL
62279: AND
62280: ST_TO_ADDR
// end ;
62281: LD_VAR 0 3
62285: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
62286: LD_INT 0
62288: PPUSH
62289: PPUSH
62290: PPUSH
62291: PPUSH
62292: PPUSH
62293: PPUSH
62294: PPUSH
62295: PPUSH
62296: PPUSH
62297: PPUSH
62298: PPUSH
// result := false ;
62299: LD_ADDR_VAR 0 8
62303: PUSH
62304: LD_INT 0
62306: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
62307: LD_VAR 0 5
62311: NOT
62312: PUSH
62313: LD_VAR 0 1
62317: NOT
62318: OR
62319: PUSH
62320: LD_VAR 0 2
62324: NOT
62325: OR
62326: PUSH
62327: LD_VAR 0 3
62331: NOT
62332: OR
62333: IFFALSE 62337
// exit ;
62335: GO 63151
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
62337: LD_ADDR_VAR 0 14
62341: PUSH
62342: LD_VAR 0 1
62346: PPUSH
62347: LD_VAR 0 2
62351: PPUSH
62352: LD_VAR 0 3
62356: PPUSH
62357: LD_VAR 0 4
62361: PPUSH
62362: LD_VAR 0 5
62366: PUSH
62367: LD_INT 1
62369: ARRAY
62370: PPUSH
62371: CALL_OW 248
62375: PPUSH
62376: LD_INT 0
62378: PPUSH
62379: CALL 64384 0 6
62383: ST_TO_ADDR
// if not hexes then
62384: LD_VAR 0 14
62388: NOT
62389: IFFALSE 62393
// exit ;
62391: GO 63151
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
62393: LD_ADDR_VAR 0 17
62397: PUSH
62398: LD_VAR 0 5
62402: PPUSH
62403: LD_INT 22
62405: PUSH
62406: LD_VAR 0 13
62410: PPUSH
62411: CALL_OW 255
62415: PUSH
62416: EMPTY
62417: LIST
62418: LIST
62419: PUSH
62420: LD_INT 2
62422: PUSH
62423: LD_INT 30
62425: PUSH
62426: LD_INT 0
62428: PUSH
62429: EMPTY
62430: LIST
62431: LIST
62432: PUSH
62433: LD_INT 30
62435: PUSH
62436: LD_INT 1
62438: PUSH
62439: EMPTY
62440: LIST
62441: LIST
62442: PUSH
62443: EMPTY
62444: LIST
62445: LIST
62446: LIST
62447: PUSH
62448: EMPTY
62449: LIST
62450: LIST
62451: PPUSH
62452: CALL_OW 72
62456: ST_TO_ADDR
// for i = 1 to hexes do
62457: LD_ADDR_VAR 0 9
62461: PUSH
62462: DOUBLE
62463: LD_INT 1
62465: DEC
62466: ST_TO_ADDR
62467: LD_VAR 0 14
62471: PUSH
62472: FOR_TO
62473: IFFALSE 63149
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
62475: LD_ADDR_VAR 0 13
62479: PUSH
62480: LD_VAR 0 14
62484: PUSH
62485: LD_VAR 0 9
62489: ARRAY
62490: PUSH
62491: LD_INT 1
62493: ARRAY
62494: PPUSH
62495: LD_VAR 0 14
62499: PUSH
62500: LD_VAR 0 9
62504: ARRAY
62505: PUSH
62506: LD_INT 2
62508: ARRAY
62509: PPUSH
62510: CALL_OW 428
62514: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
62515: LD_VAR 0 14
62519: PUSH
62520: LD_VAR 0 9
62524: ARRAY
62525: PUSH
62526: LD_INT 1
62528: ARRAY
62529: PPUSH
62530: LD_VAR 0 14
62534: PUSH
62535: LD_VAR 0 9
62539: ARRAY
62540: PUSH
62541: LD_INT 2
62543: ARRAY
62544: PPUSH
62545: CALL_OW 351
62549: PUSH
62550: LD_VAR 0 14
62554: PUSH
62555: LD_VAR 0 9
62559: ARRAY
62560: PUSH
62561: LD_INT 1
62563: ARRAY
62564: PPUSH
62565: LD_VAR 0 14
62569: PUSH
62570: LD_VAR 0 9
62574: ARRAY
62575: PUSH
62576: LD_INT 2
62578: ARRAY
62579: PPUSH
62580: CALL_OW 488
62584: NOT
62585: OR
62586: PUSH
62587: LD_VAR 0 13
62591: PPUSH
62592: CALL_OW 247
62596: PUSH
62597: LD_INT 3
62599: EQUAL
62600: OR
62601: IFFALSE 62607
// exit ;
62603: POP
62604: POP
62605: GO 63151
// if not tmp then
62607: LD_VAR 0 13
62611: NOT
62612: IFFALSE 62616
// continue ;
62614: GO 62472
// result := true ;
62616: LD_ADDR_VAR 0 8
62620: PUSH
62621: LD_INT 1
62623: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
62624: LD_VAR 0 6
62628: PUSH
62629: LD_VAR 0 13
62633: PPUSH
62634: CALL_OW 247
62638: PUSH
62639: LD_INT 2
62641: EQUAL
62642: AND
62643: PUSH
62644: LD_VAR 0 13
62648: PPUSH
62649: CALL_OW 263
62653: PUSH
62654: LD_INT 1
62656: EQUAL
62657: AND
62658: IFFALSE 62822
// begin if IsDrivenBy ( tmp ) then
62660: LD_VAR 0 13
62664: PPUSH
62665: CALL_OW 311
62669: IFFALSE 62673
// continue ;
62671: GO 62472
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
62673: LD_VAR 0 6
62677: PPUSH
62678: LD_INT 3
62680: PUSH
62681: LD_INT 60
62683: PUSH
62684: EMPTY
62685: LIST
62686: PUSH
62687: EMPTY
62688: LIST
62689: LIST
62690: PUSH
62691: LD_INT 3
62693: PUSH
62694: LD_INT 55
62696: PUSH
62697: EMPTY
62698: LIST
62699: PUSH
62700: EMPTY
62701: LIST
62702: LIST
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: PPUSH
62708: CALL_OW 72
62712: IFFALSE 62820
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
62714: LD_ADDR_VAR 0 18
62718: PUSH
62719: LD_VAR 0 6
62723: PPUSH
62724: LD_INT 3
62726: PUSH
62727: LD_INT 60
62729: PUSH
62730: EMPTY
62731: LIST
62732: PUSH
62733: EMPTY
62734: LIST
62735: LIST
62736: PUSH
62737: LD_INT 3
62739: PUSH
62740: LD_INT 55
62742: PUSH
62743: EMPTY
62744: LIST
62745: PUSH
62746: EMPTY
62747: LIST
62748: LIST
62749: PUSH
62750: EMPTY
62751: LIST
62752: LIST
62753: PPUSH
62754: CALL_OW 72
62758: PUSH
62759: LD_INT 1
62761: ARRAY
62762: ST_TO_ADDR
// if IsInUnit ( driver ) then
62763: LD_VAR 0 18
62767: PPUSH
62768: CALL_OW 310
62772: IFFALSE 62783
// ComExit ( driver ) ;
62774: LD_VAR 0 18
62778: PPUSH
62779: CALL 88164 0 1
// AddComEnterUnit ( driver , tmp ) ;
62783: LD_VAR 0 18
62787: PPUSH
62788: LD_VAR 0 13
62792: PPUSH
62793: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
62797: LD_VAR 0 18
62801: PPUSH
62802: LD_VAR 0 7
62806: PPUSH
62807: CALL_OW 173
// AddComExitVehicle ( driver ) ;
62811: LD_VAR 0 18
62815: PPUSH
62816: CALL_OW 181
// end ; continue ;
62820: GO 62472
// end ; if not cleaners or not tmp in cleaners then
62822: LD_VAR 0 6
62826: NOT
62827: PUSH
62828: LD_VAR 0 13
62832: PUSH
62833: LD_VAR 0 6
62837: IN
62838: NOT
62839: OR
62840: IFFALSE 63147
// begin if dep then
62842: LD_VAR 0 17
62846: IFFALSE 62982
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
62848: LD_ADDR_VAR 0 16
62852: PUSH
62853: LD_VAR 0 17
62857: PUSH
62858: LD_INT 1
62860: ARRAY
62861: PPUSH
62862: CALL_OW 250
62866: PPUSH
62867: LD_VAR 0 17
62871: PUSH
62872: LD_INT 1
62874: ARRAY
62875: PPUSH
62876: CALL_OW 254
62880: PPUSH
62881: LD_INT 5
62883: PPUSH
62884: CALL_OW 272
62888: PUSH
62889: LD_VAR 0 17
62893: PUSH
62894: LD_INT 1
62896: ARRAY
62897: PPUSH
62898: CALL_OW 251
62902: PPUSH
62903: LD_VAR 0 17
62907: PUSH
62908: LD_INT 1
62910: ARRAY
62911: PPUSH
62912: CALL_OW 254
62916: PPUSH
62917: LD_INT 5
62919: PPUSH
62920: CALL_OW 273
62924: PUSH
62925: EMPTY
62926: LIST
62927: LIST
62928: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
62929: LD_VAR 0 16
62933: PUSH
62934: LD_INT 1
62936: ARRAY
62937: PPUSH
62938: LD_VAR 0 16
62942: PUSH
62943: LD_INT 2
62945: ARRAY
62946: PPUSH
62947: CALL_OW 488
62951: IFFALSE 62982
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
62953: LD_VAR 0 13
62957: PPUSH
62958: LD_VAR 0 16
62962: PUSH
62963: LD_INT 1
62965: ARRAY
62966: PPUSH
62967: LD_VAR 0 16
62971: PUSH
62972: LD_INT 2
62974: ARRAY
62975: PPUSH
62976: CALL_OW 111
// continue ;
62980: GO 62472
// end ; end ; r := GetDir ( tmp ) ;
62982: LD_ADDR_VAR 0 15
62986: PUSH
62987: LD_VAR 0 13
62991: PPUSH
62992: CALL_OW 254
62996: ST_TO_ADDR
// if r = 5 then
62997: LD_VAR 0 15
63001: PUSH
63002: LD_INT 5
63004: EQUAL
63005: IFFALSE 63015
// r := 0 ;
63007: LD_ADDR_VAR 0 15
63011: PUSH
63012: LD_INT 0
63014: ST_TO_ADDR
// for j = r to 5 do
63015: LD_ADDR_VAR 0 10
63019: PUSH
63020: DOUBLE
63021: LD_VAR 0 15
63025: DEC
63026: ST_TO_ADDR
63027: LD_INT 5
63029: PUSH
63030: FOR_TO
63031: IFFALSE 63145
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
63033: LD_ADDR_VAR 0 11
63037: PUSH
63038: LD_VAR 0 13
63042: PPUSH
63043: CALL_OW 250
63047: PPUSH
63048: LD_VAR 0 10
63052: PPUSH
63053: LD_INT 2
63055: PPUSH
63056: CALL_OW 272
63060: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
63061: LD_ADDR_VAR 0 12
63065: PUSH
63066: LD_VAR 0 13
63070: PPUSH
63071: CALL_OW 251
63075: PPUSH
63076: LD_VAR 0 10
63080: PPUSH
63081: LD_INT 2
63083: PPUSH
63084: CALL_OW 273
63088: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
63089: LD_VAR 0 11
63093: PPUSH
63094: LD_VAR 0 12
63098: PPUSH
63099: CALL_OW 488
63103: PUSH
63104: LD_VAR 0 11
63108: PPUSH
63109: LD_VAR 0 12
63113: PPUSH
63114: CALL_OW 428
63118: NOT
63119: AND
63120: IFFALSE 63143
// begin ComMoveXY ( tmp , _x , _y ) ;
63122: LD_VAR 0 13
63126: PPUSH
63127: LD_VAR 0 11
63131: PPUSH
63132: LD_VAR 0 12
63136: PPUSH
63137: CALL_OW 111
// break ;
63141: GO 63145
// end ; end ;
63143: GO 63030
63145: POP
63146: POP
// end ; end ;
63147: GO 62472
63149: POP
63150: POP
// end ;
63151: LD_VAR 0 8
63155: RET
// export function BuildingTechInvented ( side , btype ) ; begin
63156: LD_INT 0
63158: PPUSH
// result := true ;
63159: LD_ADDR_VAR 0 3
63163: PUSH
63164: LD_INT 1
63166: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
63167: LD_VAR 0 2
63171: PUSH
63172: LD_INT 24
63174: DOUBLE
63175: EQUAL
63176: IFTRUE 63186
63178: LD_INT 33
63180: DOUBLE
63181: EQUAL
63182: IFTRUE 63186
63184: GO 63211
63186: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
63187: LD_ADDR_VAR 0 3
63191: PUSH
63192: LD_INT 32
63194: PPUSH
63195: LD_VAR 0 1
63199: PPUSH
63200: CALL_OW 321
63204: PUSH
63205: LD_INT 2
63207: EQUAL
63208: ST_TO_ADDR
63209: GO 63527
63211: LD_INT 20
63213: DOUBLE
63214: EQUAL
63215: IFTRUE 63219
63217: GO 63244
63219: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
63220: LD_ADDR_VAR 0 3
63224: PUSH
63225: LD_INT 6
63227: PPUSH
63228: LD_VAR 0 1
63232: PPUSH
63233: CALL_OW 321
63237: PUSH
63238: LD_INT 2
63240: EQUAL
63241: ST_TO_ADDR
63242: GO 63527
63244: LD_INT 22
63246: DOUBLE
63247: EQUAL
63248: IFTRUE 63258
63250: LD_INT 36
63252: DOUBLE
63253: EQUAL
63254: IFTRUE 63258
63256: GO 63283
63258: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
63259: LD_ADDR_VAR 0 3
63263: PUSH
63264: LD_INT 15
63266: PPUSH
63267: LD_VAR 0 1
63271: PPUSH
63272: CALL_OW 321
63276: PUSH
63277: LD_INT 2
63279: EQUAL
63280: ST_TO_ADDR
63281: GO 63527
63283: LD_INT 30
63285: DOUBLE
63286: EQUAL
63287: IFTRUE 63291
63289: GO 63316
63291: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
63292: LD_ADDR_VAR 0 3
63296: PUSH
63297: LD_INT 20
63299: PPUSH
63300: LD_VAR 0 1
63304: PPUSH
63305: CALL_OW 321
63309: PUSH
63310: LD_INT 2
63312: EQUAL
63313: ST_TO_ADDR
63314: GO 63527
63316: LD_INT 28
63318: DOUBLE
63319: EQUAL
63320: IFTRUE 63330
63322: LD_INT 21
63324: DOUBLE
63325: EQUAL
63326: IFTRUE 63330
63328: GO 63355
63330: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
63331: LD_ADDR_VAR 0 3
63335: PUSH
63336: LD_INT 21
63338: PPUSH
63339: LD_VAR 0 1
63343: PPUSH
63344: CALL_OW 321
63348: PUSH
63349: LD_INT 2
63351: EQUAL
63352: ST_TO_ADDR
63353: GO 63527
63355: LD_INT 16
63357: DOUBLE
63358: EQUAL
63359: IFTRUE 63363
63361: GO 63388
63363: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
63364: LD_ADDR_VAR 0 3
63368: PUSH
63369: LD_INT 84
63371: PPUSH
63372: LD_VAR 0 1
63376: PPUSH
63377: CALL_OW 321
63381: PUSH
63382: LD_INT 2
63384: EQUAL
63385: ST_TO_ADDR
63386: GO 63527
63388: LD_INT 19
63390: DOUBLE
63391: EQUAL
63392: IFTRUE 63402
63394: LD_INT 23
63396: DOUBLE
63397: EQUAL
63398: IFTRUE 63402
63400: GO 63427
63402: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
63403: LD_ADDR_VAR 0 3
63407: PUSH
63408: LD_INT 83
63410: PPUSH
63411: LD_VAR 0 1
63415: PPUSH
63416: CALL_OW 321
63420: PUSH
63421: LD_INT 2
63423: EQUAL
63424: ST_TO_ADDR
63425: GO 63527
63427: LD_INT 17
63429: DOUBLE
63430: EQUAL
63431: IFTRUE 63435
63433: GO 63460
63435: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
63436: LD_ADDR_VAR 0 3
63440: PUSH
63441: LD_INT 39
63443: PPUSH
63444: LD_VAR 0 1
63448: PPUSH
63449: CALL_OW 321
63453: PUSH
63454: LD_INT 2
63456: EQUAL
63457: ST_TO_ADDR
63458: GO 63527
63460: LD_INT 18
63462: DOUBLE
63463: EQUAL
63464: IFTRUE 63468
63466: GO 63493
63468: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
63469: LD_ADDR_VAR 0 3
63473: PUSH
63474: LD_INT 40
63476: PPUSH
63477: LD_VAR 0 1
63481: PPUSH
63482: CALL_OW 321
63486: PUSH
63487: LD_INT 2
63489: EQUAL
63490: ST_TO_ADDR
63491: GO 63527
63493: LD_INT 27
63495: DOUBLE
63496: EQUAL
63497: IFTRUE 63501
63499: GO 63526
63501: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
63502: LD_ADDR_VAR 0 3
63506: PUSH
63507: LD_INT 35
63509: PPUSH
63510: LD_VAR 0 1
63514: PPUSH
63515: CALL_OW 321
63519: PUSH
63520: LD_INT 2
63522: EQUAL
63523: ST_TO_ADDR
63524: GO 63527
63526: POP
// end ;
63527: LD_VAR 0 3
63531: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
63532: LD_INT 0
63534: PPUSH
63535: PPUSH
63536: PPUSH
63537: PPUSH
63538: PPUSH
63539: PPUSH
63540: PPUSH
63541: PPUSH
63542: PPUSH
63543: PPUSH
63544: PPUSH
// result := false ;
63545: LD_ADDR_VAR 0 6
63549: PUSH
63550: LD_INT 0
63552: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
63553: LD_VAR 0 1
63557: NOT
63558: PUSH
63559: LD_VAR 0 1
63563: PPUSH
63564: CALL_OW 266
63568: PUSH
63569: LD_INT 0
63571: PUSH
63572: LD_INT 1
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: IN
63579: NOT
63580: OR
63581: PUSH
63582: LD_VAR 0 2
63586: NOT
63587: OR
63588: PUSH
63589: LD_VAR 0 5
63593: PUSH
63594: LD_INT 0
63596: PUSH
63597: LD_INT 1
63599: PUSH
63600: LD_INT 2
63602: PUSH
63603: LD_INT 3
63605: PUSH
63606: LD_INT 4
63608: PUSH
63609: LD_INT 5
63611: PUSH
63612: EMPTY
63613: LIST
63614: LIST
63615: LIST
63616: LIST
63617: LIST
63618: LIST
63619: IN
63620: NOT
63621: OR
63622: PUSH
63623: LD_VAR 0 3
63627: PPUSH
63628: LD_VAR 0 4
63632: PPUSH
63633: CALL_OW 488
63637: NOT
63638: OR
63639: IFFALSE 63643
// exit ;
63641: GO 64379
// side := GetSide ( depot ) ;
63643: LD_ADDR_VAR 0 9
63647: PUSH
63648: LD_VAR 0 1
63652: PPUSH
63653: CALL_OW 255
63657: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
63658: LD_VAR 0 9
63662: PPUSH
63663: LD_VAR 0 2
63667: PPUSH
63668: CALL 63156 0 2
63672: NOT
63673: IFFALSE 63677
// exit ;
63675: GO 64379
// pom := GetBase ( depot ) ;
63677: LD_ADDR_VAR 0 10
63681: PUSH
63682: LD_VAR 0 1
63686: PPUSH
63687: CALL_OW 274
63691: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
63692: LD_ADDR_VAR 0 11
63696: PUSH
63697: LD_VAR 0 2
63701: PPUSH
63702: LD_VAR 0 1
63706: PPUSH
63707: CALL_OW 248
63711: PPUSH
63712: CALL_OW 450
63716: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
63717: LD_VAR 0 10
63721: PPUSH
63722: LD_INT 1
63724: PPUSH
63725: CALL_OW 275
63729: PUSH
63730: LD_VAR 0 11
63734: PUSH
63735: LD_INT 1
63737: ARRAY
63738: GREATEREQUAL
63739: PUSH
63740: LD_VAR 0 10
63744: PPUSH
63745: LD_INT 2
63747: PPUSH
63748: CALL_OW 275
63752: PUSH
63753: LD_VAR 0 11
63757: PUSH
63758: LD_INT 2
63760: ARRAY
63761: GREATEREQUAL
63762: AND
63763: PUSH
63764: LD_VAR 0 10
63768: PPUSH
63769: LD_INT 3
63771: PPUSH
63772: CALL_OW 275
63776: PUSH
63777: LD_VAR 0 11
63781: PUSH
63782: LD_INT 3
63784: ARRAY
63785: GREATEREQUAL
63786: AND
63787: NOT
63788: IFFALSE 63792
// exit ;
63790: GO 64379
// if GetBType ( depot ) = b_depot then
63792: LD_VAR 0 1
63796: PPUSH
63797: CALL_OW 266
63801: PUSH
63802: LD_INT 0
63804: EQUAL
63805: IFFALSE 63817
// dist := 28 else
63807: LD_ADDR_VAR 0 14
63811: PUSH
63812: LD_INT 28
63814: ST_TO_ADDR
63815: GO 63825
// dist := 36 ;
63817: LD_ADDR_VAR 0 14
63821: PUSH
63822: LD_INT 36
63824: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
63825: LD_VAR 0 1
63829: PPUSH
63830: LD_VAR 0 3
63834: PPUSH
63835: LD_VAR 0 4
63839: PPUSH
63840: CALL_OW 297
63844: PUSH
63845: LD_VAR 0 14
63849: GREATER
63850: IFFALSE 63854
// exit ;
63852: GO 64379
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
63854: LD_ADDR_VAR 0 12
63858: PUSH
63859: LD_VAR 0 2
63863: PPUSH
63864: LD_VAR 0 3
63868: PPUSH
63869: LD_VAR 0 4
63873: PPUSH
63874: LD_VAR 0 5
63878: PPUSH
63879: LD_VAR 0 1
63883: PPUSH
63884: CALL_OW 248
63888: PPUSH
63889: LD_INT 0
63891: PPUSH
63892: CALL 64384 0 6
63896: ST_TO_ADDR
// if not hexes then
63897: LD_VAR 0 12
63901: NOT
63902: IFFALSE 63906
// exit ;
63904: GO 64379
// hex := GetHexInfo ( x , y ) ;
63906: LD_ADDR_VAR 0 15
63910: PUSH
63911: LD_VAR 0 3
63915: PPUSH
63916: LD_VAR 0 4
63920: PPUSH
63921: CALL_OW 546
63925: ST_TO_ADDR
// if hex [ 1 ] then
63926: LD_VAR 0 15
63930: PUSH
63931: LD_INT 1
63933: ARRAY
63934: IFFALSE 63938
// exit ;
63936: GO 64379
// height := hex [ 2 ] ;
63938: LD_ADDR_VAR 0 13
63942: PUSH
63943: LD_VAR 0 15
63947: PUSH
63948: LD_INT 2
63950: ARRAY
63951: ST_TO_ADDR
// for i = 1 to hexes do
63952: LD_ADDR_VAR 0 7
63956: PUSH
63957: DOUBLE
63958: LD_INT 1
63960: DEC
63961: ST_TO_ADDR
63962: LD_VAR 0 12
63966: PUSH
63967: FOR_TO
63968: IFFALSE 64298
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
63970: LD_VAR 0 12
63974: PUSH
63975: LD_VAR 0 7
63979: ARRAY
63980: PUSH
63981: LD_INT 1
63983: ARRAY
63984: PPUSH
63985: LD_VAR 0 12
63989: PUSH
63990: LD_VAR 0 7
63994: ARRAY
63995: PUSH
63996: LD_INT 2
63998: ARRAY
63999: PPUSH
64000: CALL_OW 488
64004: NOT
64005: PUSH
64006: LD_VAR 0 12
64010: PUSH
64011: LD_VAR 0 7
64015: ARRAY
64016: PUSH
64017: LD_INT 1
64019: ARRAY
64020: PPUSH
64021: LD_VAR 0 12
64025: PUSH
64026: LD_VAR 0 7
64030: ARRAY
64031: PUSH
64032: LD_INT 2
64034: ARRAY
64035: PPUSH
64036: CALL_OW 428
64040: PUSH
64041: LD_INT 0
64043: GREATER
64044: OR
64045: PUSH
64046: LD_VAR 0 12
64050: PUSH
64051: LD_VAR 0 7
64055: ARRAY
64056: PUSH
64057: LD_INT 1
64059: ARRAY
64060: PPUSH
64061: LD_VAR 0 12
64065: PUSH
64066: LD_VAR 0 7
64070: ARRAY
64071: PUSH
64072: LD_INT 2
64074: ARRAY
64075: PPUSH
64076: CALL_OW 351
64080: OR
64081: IFFALSE 64087
// exit ;
64083: POP
64084: POP
64085: GO 64379
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
64087: LD_ADDR_VAR 0 8
64091: PUSH
64092: LD_VAR 0 12
64096: PUSH
64097: LD_VAR 0 7
64101: ARRAY
64102: PUSH
64103: LD_INT 1
64105: ARRAY
64106: PPUSH
64107: LD_VAR 0 12
64111: PUSH
64112: LD_VAR 0 7
64116: ARRAY
64117: PUSH
64118: LD_INT 2
64120: ARRAY
64121: PPUSH
64122: CALL_OW 546
64126: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
64127: LD_VAR 0 8
64131: PUSH
64132: LD_INT 1
64134: ARRAY
64135: PUSH
64136: LD_VAR 0 8
64140: PUSH
64141: LD_INT 2
64143: ARRAY
64144: PUSH
64145: LD_VAR 0 13
64149: PUSH
64150: LD_INT 2
64152: PLUS
64153: GREATER
64154: OR
64155: PUSH
64156: LD_VAR 0 8
64160: PUSH
64161: LD_INT 2
64163: ARRAY
64164: PUSH
64165: LD_VAR 0 13
64169: PUSH
64170: LD_INT 2
64172: MINUS
64173: LESS
64174: OR
64175: PUSH
64176: LD_VAR 0 8
64180: PUSH
64181: LD_INT 3
64183: ARRAY
64184: PUSH
64185: LD_INT 0
64187: PUSH
64188: LD_INT 8
64190: PUSH
64191: LD_INT 9
64193: PUSH
64194: LD_INT 10
64196: PUSH
64197: LD_INT 11
64199: PUSH
64200: LD_INT 12
64202: PUSH
64203: LD_INT 13
64205: PUSH
64206: LD_INT 16
64208: PUSH
64209: LD_INT 17
64211: PUSH
64212: LD_INT 18
64214: PUSH
64215: LD_INT 19
64217: PUSH
64218: LD_INT 20
64220: PUSH
64221: LD_INT 21
64223: PUSH
64224: EMPTY
64225: LIST
64226: LIST
64227: LIST
64228: LIST
64229: LIST
64230: LIST
64231: LIST
64232: LIST
64233: LIST
64234: LIST
64235: LIST
64236: LIST
64237: LIST
64238: IN
64239: NOT
64240: OR
64241: PUSH
64242: LD_VAR 0 8
64246: PUSH
64247: LD_INT 5
64249: ARRAY
64250: NOT
64251: OR
64252: PUSH
64253: LD_VAR 0 8
64257: PUSH
64258: LD_INT 6
64260: ARRAY
64261: PUSH
64262: LD_INT 1
64264: PUSH
64265: LD_INT 2
64267: PUSH
64268: LD_INT 7
64270: PUSH
64271: LD_INT 9
64273: PUSH
64274: LD_INT 10
64276: PUSH
64277: LD_INT 11
64279: PUSH
64280: EMPTY
64281: LIST
64282: LIST
64283: LIST
64284: LIST
64285: LIST
64286: LIST
64287: IN
64288: NOT
64289: OR
64290: IFFALSE 64296
// exit ;
64292: POP
64293: POP
64294: GO 64379
// end ;
64296: GO 63967
64298: POP
64299: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
64300: LD_VAR 0 9
64304: PPUSH
64305: LD_VAR 0 3
64309: PPUSH
64310: LD_VAR 0 4
64314: PPUSH
64315: LD_INT 20
64317: PPUSH
64318: CALL 56331 0 4
64322: PUSH
64323: LD_INT 4
64325: ARRAY
64326: IFFALSE 64330
// exit ;
64328: GO 64379
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
64330: LD_VAR 0 2
64334: PUSH
64335: LD_INT 29
64337: PUSH
64338: LD_INT 30
64340: PUSH
64341: EMPTY
64342: LIST
64343: LIST
64344: IN
64345: PUSH
64346: LD_VAR 0 3
64350: PPUSH
64351: LD_VAR 0 4
64355: PPUSH
64356: LD_VAR 0 9
64360: PPUSH
64361: CALL_OW 440
64365: NOT
64366: AND
64367: IFFALSE 64371
// exit ;
64369: GO 64379
// result := true ;
64371: LD_ADDR_VAR 0 6
64375: PUSH
64376: LD_INT 1
64378: ST_TO_ADDR
// end ;
64379: LD_VAR 0 6
64383: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
64384: LD_INT 0
64386: PPUSH
64387: PPUSH
64388: PPUSH
64389: PPUSH
64390: PPUSH
64391: PPUSH
64392: PPUSH
64393: PPUSH
64394: PPUSH
64395: PPUSH
64396: PPUSH
64397: PPUSH
64398: PPUSH
64399: PPUSH
64400: PPUSH
64401: PPUSH
64402: PPUSH
64403: PPUSH
64404: PPUSH
64405: PPUSH
64406: PPUSH
64407: PPUSH
64408: PPUSH
64409: PPUSH
64410: PPUSH
64411: PPUSH
64412: PPUSH
64413: PPUSH
64414: PPUSH
64415: PPUSH
64416: PPUSH
64417: PPUSH
64418: PPUSH
64419: PPUSH
64420: PPUSH
64421: PPUSH
64422: PPUSH
64423: PPUSH
64424: PPUSH
64425: PPUSH
64426: PPUSH
64427: PPUSH
64428: PPUSH
64429: PPUSH
64430: PPUSH
64431: PPUSH
64432: PPUSH
64433: PPUSH
64434: PPUSH
64435: PPUSH
64436: PPUSH
64437: PPUSH
64438: PPUSH
64439: PPUSH
64440: PPUSH
64441: PPUSH
64442: PPUSH
64443: PPUSH
// result = [ ] ;
64444: LD_ADDR_VAR 0 7
64448: PUSH
64449: EMPTY
64450: ST_TO_ADDR
// temp_list = [ ] ;
64451: LD_ADDR_VAR 0 9
64455: PUSH
64456: EMPTY
64457: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
64458: LD_VAR 0 4
64462: PUSH
64463: LD_INT 0
64465: PUSH
64466: LD_INT 1
64468: PUSH
64469: LD_INT 2
64471: PUSH
64472: LD_INT 3
64474: PUSH
64475: LD_INT 4
64477: PUSH
64478: LD_INT 5
64480: PUSH
64481: EMPTY
64482: LIST
64483: LIST
64484: LIST
64485: LIST
64486: LIST
64487: LIST
64488: IN
64489: NOT
64490: PUSH
64491: LD_VAR 0 1
64495: PUSH
64496: LD_INT 0
64498: PUSH
64499: LD_INT 1
64501: PUSH
64502: EMPTY
64503: LIST
64504: LIST
64505: IN
64506: PUSH
64507: LD_VAR 0 5
64511: PUSH
64512: LD_INT 1
64514: PUSH
64515: LD_INT 2
64517: PUSH
64518: LD_INT 3
64520: PUSH
64521: EMPTY
64522: LIST
64523: LIST
64524: LIST
64525: IN
64526: NOT
64527: AND
64528: OR
64529: IFFALSE 64533
// exit ;
64531: GO 82924
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
64533: LD_VAR 0 1
64537: PUSH
64538: LD_INT 6
64540: PUSH
64541: LD_INT 7
64543: PUSH
64544: LD_INT 8
64546: PUSH
64547: LD_INT 13
64549: PUSH
64550: LD_INT 12
64552: PUSH
64553: LD_INT 15
64555: PUSH
64556: LD_INT 11
64558: PUSH
64559: LD_INT 14
64561: PUSH
64562: LD_INT 10
64564: PUSH
64565: EMPTY
64566: LIST
64567: LIST
64568: LIST
64569: LIST
64570: LIST
64571: LIST
64572: LIST
64573: LIST
64574: LIST
64575: IN
64576: IFFALSE 64586
// btype = b_lab ;
64578: LD_ADDR_VAR 0 1
64582: PUSH
64583: LD_INT 6
64585: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
64586: LD_VAR 0 6
64590: PUSH
64591: LD_INT 0
64593: PUSH
64594: LD_INT 1
64596: PUSH
64597: LD_INT 2
64599: PUSH
64600: EMPTY
64601: LIST
64602: LIST
64603: LIST
64604: IN
64605: NOT
64606: PUSH
64607: LD_VAR 0 1
64611: PUSH
64612: LD_INT 0
64614: PUSH
64615: LD_INT 1
64617: PUSH
64618: LD_INT 2
64620: PUSH
64621: LD_INT 3
64623: PUSH
64624: LD_INT 6
64626: PUSH
64627: LD_INT 36
64629: PUSH
64630: LD_INT 4
64632: PUSH
64633: LD_INT 5
64635: PUSH
64636: LD_INT 31
64638: PUSH
64639: LD_INT 32
64641: PUSH
64642: LD_INT 33
64644: PUSH
64645: EMPTY
64646: LIST
64647: LIST
64648: LIST
64649: LIST
64650: LIST
64651: LIST
64652: LIST
64653: LIST
64654: LIST
64655: LIST
64656: LIST
64657: IN
64658: NOT
64659: PUSH
64660: LD_VAR 0 6
64664: PUSH
64665: LD_INT 1
64667: EQUAL
64668: AND
64669: OR
64670: PUSH
64671: LD_VAR 0 1
64675: PUSH
64676: LD_INT 2
64678: PUSH
64679: LD_INT 3
64681: PUSH
64682: EMPTY
64683: LIST
64684: LIST
64685: IN
64686: NOT
64687: PUSH
64688: LD_VAR 0 6
64692: PUSH
64693: LD_INT 2
64695: EQUAL
64696: AND
64697: OR
64698: IFFALSE 64708
// mode = 0 ;
64700: LD_ADDR_VAR 0 6
64704: PUSH
64705: LD_INT 0
64707: ST_TO_ADDR
// case mode of 0 :
64708: LD_VAR 0 6
64712: PUSH
64713: LD_INT 0
64715: DOUBLE
64716: EQUAL
64717: IFTRUE 64721
64719: GO 76174
64721: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
64722: LD_ADDR_VAR 0 11
64726: PUSH
64727: LD_INT 0
64729: PUSH
64730: LD_INT 0
64732: PUSH
64733: EMPTY
64734: LIST
64735: LIST
64736: PUSH
64737: LD_INT 0
64739: PUSH
64740: LD_INT 1
64742: NEG
64743: PUSH
64744: EMPTY
64745: LIST
64746: LIST
64747: PUSH
64748: LD_INT 1
64750: PUSH
64751: LD_INT 0
64753: PUSH
64754: EMPTY
64755: LIST
64756: LIST
64757: PUSH
64758: LD_INT 1
64760: PUSH
64761: LD_INT 1
64763: PUSH
64764: EMPTY
64765: LIST
64766: LIST
64767: PUSH
64768: LD_INT 0
64770: PUSH
64771: LD_INT 1
64773: PUSH
64774: EMPTY
64775: LIST
64776: LIST
64777: PUSH
64778: LD_INT 1
64780: NEG
64781: PUSH
64782: LD_INT 0
64784: PUSH
64785: EMPTY
64786: LIST
64787: LIST
64788: PUSH
64789: LD_INT 1
64791: NEG
64792: PUSH
64793: LD_INT 1
64795: NEG
64796: PUSH
64797: EMPTY
64798: LIST
64799: LIST
64800: PUSH
64801: LD_INT 1
64803: NEG
64804: PUSH
64805: LD_INT 2
64807: NEG
64808: PUSH
64809: EMPTY
64810: LIST
64811: LIST
64812: PUSH
64813: LD_INT 0
64815: PUSH
64816: LD_INT 2
64818: NEG
64819: PUSH
64820: EMPTY
64821: LIST
64822: LIST
64823: PUSH
64824: LD_INT 1
64826: PUSH
64827: LD_INT 1
64829: NEG
64830: PUSH
64831: EMPTY
64832: LIST
64833: LIST
64834: PUSH
64835: LD_INT 1
64837: PUSH
64838: LD_INT 2
64840: PUSH
64841: EMPTY
64842: LIST
64843: LIST
64844: PUSH
64845: LD_INT 0
64847: PUSH
64848: LD_INT 2
64850: PUSH
64851: EMPTY
64852: LIST
64853: LIST
64854: PUSH
64855: LD_INT 1
64857: NEG
64858: PUSH
64859: LD_INT 1
64861: PUSH
64862: EMPTY
64863: LIST
64864: LIST
64865: PUSH
64866: LD_INT 1
64868: PUSH
64869: LD_INT 3
64871: PUSH
64872: EMPTY
64873: LIST
64874: LIST
64875: PUSH
64876: LD_INT 0
64878: PUSH
64879: LD_INT 3
64881: PUSH
64882: EMPTY
64883: LIST
64884: LIST
64885: PUSH
64886: LD_INT 1
64888: NEG
64889: PUSH
64890: LD_INT 2
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: LIST
64901: LIST
64902: LIST
64903: LIST
64904: LIST
64905: LIST
64906: LIST
64907: LIST
64908: LIST
64909: LIST
64910: LIST
64911: LIST
64912: LIST
64913: LIST
64914: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
64915: LD_ADDR_VAR 0 12
64919: PUSH
64920: LD_INT 0
64922: PUSH
64923: LD_INT 0
64925: PUSH
64926: EMPTY
64927: LIST
64928: LIST
64929: PUSH
64930: LD_INT 0
64932: PUSH
64933: LD_INT 1
64935: NEG
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 1
64943: PUSH
64944: LD_INT 0
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 1
64953: PUSH
64954: LD_INT 1
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 0
64963: PUSH
64964: LD_INT 1
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 1
64973: NEG
64974: PUSH
64975: LD_INT 0
64977: PUSH
64978: EMPTY
64979: LIST
64980: LIST
64981: PUSH
64982: LD_INT 1
64984: NEG
64985: PUSH
64986: LD_INT 1
64988: NEG
64989: PUSH
64990: EMPTY
64991: LIST
64992: LIST
64993: PUSH
64994: LD_INT 1
64996: PUSH
64997: LD_INT 1
64999: NEG
65000: PUSH
65001: EMPTY
65002: LIST
65003: LIST
65004: PUSH
65005: LD_INT 2
65007: PUSH
65008: LD_INT 0
65010: PUSH
65011: EMPTY
65012: LIST
65013: LIST
65014: PUSH
65015: LD_INT 2
65017: PUSH
65018: LD_INT 1
65020: PUSH
65021: EMPTY
65022: LIST
65023: LIST
65024: PUSH
65025: LD_INT 1
65027: NEG
65028: PUSH
65029: LD_INT 1
65031: PUSH
65032: EMPTY
65033: LIST
65034: LIST
65035: PUSH
65036: LD_INT 2
65038: NEG
65039: PUSH
65040: LD_INT 0
65042: PUSH
65043: EMPTY
65044: LIST
65045: LIST
65046: PUSH
65047: LD_INT 2
65049: NEG
65050: PUSH
65051: LD_INT 1
65053: NEG
65054: PUSH
65055: EMPTY
65056: LIST
65057: LIST
65058: PUSH
65059: LD_INT 2
65061: NEG
65062: PUSH
65063: LD_INT 1
65065: PUSH
65066: EMPTY
65067: LIST
65068: LIST
65069: PUSH
65070: LD_INT 3
65072: NEG
65073: PUSH
65074: LD_INT 0
65076: PUSH
65077: EMPTY
65078: LIST
65079: LIST
65080: PUSH
65081: LD_INT 3
65083: NEG
65084: PUSH
65085: LD_INT 1
65087: NEG
65088: PUSH
65089: EMPTY
65090: LIST
65091: LIST
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: LIST
65097: LIST
65098: LIST
65099: LIST
65100: LIST
65101: LIST
65102: LIST
65103: LIST
65104: LIST
65105: LIST
65106: LIST
65107: LIST
65108: LIST
65109: LIST
65110: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
65111: LD_ADDR_VAR 0 13
65115: PUSH
65116: LD_INT 0
65118: PUSH
65119: LD_INT 0
65121: PUSH
65122: EMPTY
65123: LIST
65124: LIST
65125: PUSH
65126: LD_INT 0
65128: PUSH
65129: LD_INT 1
65131: NEG
65132: PUSH
65133: EMPTY
65134: LIST
65135: LIST
65136: PUSH
65137: LD_INT 1
65139: PUSH
65140: LD_INT 0
65142: PUSH
65143: EMPTY
65144: LIST
65145: LIST
65146: PUSH
65147: LD_INT 1
65149: PUSH
65150: LD_INT 1
65152: PUSH
65153: EMPTY
65154: LIST
65155: LIST
65156: PUSH
65157: LD_INT 0
65159: PUSH
65160: LD_INT 1
65162: PUSH
65163: EMPTY
65164: LIST
65165: LIST
65166: PUSH
65167: LD_INT 1
65169: NEG
65170: PUSH
65171: LD_INT 0
65173: PUSH
65174: EMPTY
65175: LIST
65176: LIST
65177: PUSH
65178: LD_INT 1
65180: NEG
65181: PUSH
65182: LD_INT 1
65184: NEG
65185: PUSH
65186: EMPTY
65187: LIST
65188: LIST
65189: PUSH
65190: LD_INT 1
65192: NEG
65193: PUSH
65194: LD_INT 2
65196: NEG
65197: PUSH
65198: EMPTY
65199: LIST
65200: LIST
65201: PUSH
65202: LD_INT 2
65204: PUSH
65205: LD_INT 1
65207: PUSH
65208: EMPTY
65209: LIST
65210: LIST
65211: PUSH
65212: LD_INT 2
65214: PUSH
65215: LD_INT 2
65217: PUSH
65218: EMPTY
65219: LIST
65220: LIST
65221: PUSH
65222: LD_INT 1
65224: PUSH
65225: LD_INT 2
65227: PUSH
65228: EMPTY
65229: LIST
65230: LIST
65231: PUSH
65232: LD_INT 2
65234: NEG
65235: PUSH
65236: LD_INT 1
65238: NEG
65239: PUSH
65240: EMPTY
65241: LIST
65242: LIST
65243: PUSH
65244: LD_INT 2
65246: NEG
65247: PUSH
65248: LD_INT 2
65250: NEG
65251: PUSH
65252: EMPTY
65253: LIST
65254: LIST
65255: PUSH
65256: LD_INT 2
65258: NEG
65259: PUSH
65260: LD_INT 3
65262: NEG
65263: PUSH
65264: EMPTY
65265: LIST
65266: LIST
65267: PUSH
65268: LD_INT 3
65270: NEG
65271: PUSH
65272: LD_INT 2
65274: NEG
65275: PUSH
65276: EMPTY
65277: LIST
65278: LIST
65279: PUSH
65280: LD_INT 3
65282: NEG
65283: PUSH
65284: LD_INT 3
65286: NEG
65287: PUSH
65288: EMPTY
65289: LIST
65290: LIST
65291: PUSH
65292: EMPTY
65293: LIST
65294: LIST
65295: LIST
65296: LIST
65297: LIST
65298: LIST
65299: LIST
65300: LIST
65301: LIST
65302: LIST
65303: LIST
65304: LIST
65305: LIST
65306: LIST
65307: LIST
65308: LIST
65309: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
65310: LD_ADDR_VAR 0 14
65314: PUSH
65315: LD_INT 0
65317: PUSH
65318: LD_INT 0
65320: PUSH
65321: EMPTY
65322: LIST
65323: LIST
65324: PUSH
65325: LD_INT 0
65327: PUSH
65328: LD_INT 1
65330: NEG
65331: PUSH
65332: EMPTY
65333: LIST
65334: LIST
65335: PUSH
65336: LD_INT 1
65338: PUSH
65339: LD_INT 0
65341: PUSH
65342: EMPTY
65343: LIST
65344: LIST
65345: PUSH
65346: LD_INT 1
65348: PUSH
65349: LD_INT 1
65351: PUSH
65352: EMPTY
65353: LIST
65354: LIST
65355: PUSH
65356: LD_INT 0
65358: PUSH
65359: LD_INT 1
65361: PUSH
65362: EMPTY
65363: LIST
65364: LIST
65365: PUSH
65366: LD_INT 1
65368: NEG
65369: PUSH
65370: LD_INT 0
65372: PUSH
65373: EMPTY
65374: LIST
65375: LIST
65376: PUSH
65377: LD_INT 1
65379: NEG
65380: PUSH
65381: LD_INT 1
65383: NEG
65384: PUSH
65385: EMPTY
65386: LIST
65387: LIST
65388: PUSH
65389: LD_INT 1
65391: NEG
65392: PUSH
65393: LD_INT 2
65395: NEG
65396: PUSH
65397: EMPTY
65398: LIST
65399: LIST
65400: PUSH
65401: LD_INT 0
65403: PUSH
65404: LD_INT 2
65406: NEG
65407: PUSH
65408: EMPTY
65409: LIST
65410: LIST
65411: PUSH
65412: LD_INT 1
65414: PUSH
65415: LD_INT 1
65417: NEG
65418: PUSH
65419: EMPTY
65420: LIST
65421: LIST
65422: PUSH
65423: LD_INT 1
65425: PUSH
65426: LD_INT 2
65428: PUSH
65429: EMPTY
65430: LIST
65431: LIST
65432: PUSH
65433: LD_INT 0
65435: PUSH
65436: LD_INT 2
65438: PUSH
65439: EMPTY
65440: LIST
65441: LIST
65442: PUSH
65443: LD_INT 1
65445: NEG
65446: PUSH
65447: LD_INT 1
65449: PUSH
65450: EMPTY
65451: LIST
65452: LIST
65453: PUSH
65454: LD_INT 1
65456: NEG
65457: PUSH
65458: LD_INT 3
65460: NEG
65461: PUSH
65462: EMPTY
65463: LIST
65464: LIST
65465: PUSH
65466: LD_INT 0
65468: PUSH
65469: LD_INT 3
65471: NEG
65472: PUSH
65473: EMPTY
65474: LIST
65475: LIST
65476: PUSH
65477: LD_INT 1
65479: PUSH
65480: LD_INT 2
65482: NEG
65483: PUSH
65484: EMPTY
65485: LIST
65486: LIST
65487: PUSH
65488: EMPTY
65489: LIST
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: LIST
65495: LIST
65496: LIST
65497: LIST
65498: LIST
65499: LIST
65500: LIST
65501: LIST
65502: LIST
65503: LIST
65504: LIST
65505: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
65506: LD_ADDR_VAR 0 15
65510: PUSH
65511: LD_INT 0
65513: PUSH
65514: LD_INT 0
65516: PUSH
65517: EMPTY
65518: LIST
65519: LIST
65520: PUSH
65521: LD_INT 0
65523: PUSH
65524: LD_INT 1
65526: NEG
65527: PUSH
65528: EMPTY
65529: LIST
65530: LIST
65531: PUSH
65532: LD_INT 1
65534: PUSH
65535: LD_INT 0
65537: PUSH
65538: EMPTY
65539: LIST
65540: LIST
65541: PUSH
65542: LD_INT 1
65544: PUSH
65545: LD_INT 1
65547: PUSH
65548: EMPTY
65549: LIST
65550: LIST
65551: PUSH
65552: LD_INT 0
65554: PUSH
65555: LD_INT 1
65557: PUSH
65558: EMPTY
65559: LIST
65560: LIST
65561: PUSH
65562: LD_INT 1
65564: NEG
65565: PUSH
65566: LD_INT 0
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: LD_INT 1
65575: NEG
65576: PUSH
65577: LD_INT 1
65579: NEG
65580: PUSH
65581: EMPTY
65582: LIST
65583: LIST
65584: PUSH
65585: LD_INT 1
65587: PUSH
65588: LD_INT 1
65590: NEG
65591: PUSH
65592: EMPTY
65593: LIST
65594: LIST
65595: PUSH
65596: LD_INT 2
65598: PUSH
65599: LD_INT 0
65601: PUSH
65602: EMPTY
65603: LIST
65604: LIST
65605: PUSH
65606: LD_INT 2
65608: PUSH
65609: LD_INT 1
65611: PUSH
65612: EMPTY
65613: LIST
65614: LIST
65615: PUSH
65616: LD_INT 1
65618: NEG
65619: PUSH
65620: LD_INT 1
65622: PUSH
65623: EMPTY
65624: LIST
65625: LIST
65626: PUSH
65627: LD_INT 2
65629: NEG
65630: PUSH
65631: LD_INT 0
65633: PUSH
65634: EMPTY
65635: LIST
65636: LIST
65637: PUSH
65638: LD_INT 2
65640: NEG
65641: PUSH
65642: LD_INT 1
65644: NEG
65645: PUSH
65646: EMPTY
65647: LIST
65648: LIST
65649: PUSH
65650: LD_INT 2
65652: PUSH
65653: LD_INT 1
65655: NEG
65656: PUSH
65657: EMPTY
65658: LIST
65659: LIST
65660: PUSH
65661: LD_INT 3
65663: PUSH
65664: LD_INT 0
65666: PUSH
65667: EMPTY
65668: LIST
65669: LIST
65670: PUSH
65671: LD_INT 3
65673: PUSH
65674: LD_INT 1
65676: PUSH
65677: EMPTY
65678: LIST
65679: LIST
65680: PUSH
65681: EMPTY
65682: LIST
65683: LIST
65684: LIST
65685: LIST
65686: LIST
65687: LIST
65688: LIST
65689: LIST
65690: LIST
65691: LIST
65692: LIST
65693: LIST
65694: LIST
65695: LIST
65696: LIST
65697: LIST
65698: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
65699: LD_ADDR_VAR 0 16
65703: PUSH
65704: LD_INT 0
65706: PUSH
65707: LD_INT 0
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: LD_INT 0
65716: PUSH
65717: LD_INT 1
65719: NEG
65720: PUSH
65721: EMPTY
65722: LIST
65723: LIST
65724: PUSH
65725: LD_INT 1
65727: PUSH
65728: LD_INT 0
65730: PUSH
65731: EMPTY
65732: LIST
65733: LIST
65734: PUSH
65735: LD_INT 1
65737: PUSH
65738: LD_INT 1
65740: PUSH
65741: EMPTY
65742: LIST
65743: LIST
65744: PUSH
65745: LD_INT 0
65747: PUSH
65748: LD_INT 1
65750: PUSH
65751: EMPTY
65752: LIST
65753: LIST
65754: PUSH
65755: LD_INT 1
65757: NEG
65758: PUSH
65759: LD_INT 0
65761: PUSH
65762: EMPTY
65763: LIST
65764: LIST
65765: PUSH
65766: LD_INT 1
65768: NEG
65769: PUSH
65770: LD_INT 1
65772: NEG
65773: PUSH
65774: EMPTY
65775: LIST
65776: LIST
65777: PUSH
65778: LD_INT 1
65780: NEG
65781: PUSH
65782: LD_INT 2
65784: NEG
65785: PUSH
65786: EMPTY
65787: LIST
65788: LIST
65789: PUSH
65790: LD_INT 2
65792: PUSH
65793: LD_INT 1
65795: PUSH
65796: EMPTY
65797: LIST
65798: LIST
65799: PUSH
65800: LD_INT 2
65802: PUSH
65803: LD_INT 2
65805: PUSH
65806: EMPTY
65807: LIST
65808: LIST
65809: PUSH
65810: LD_INT 1
65812: PUSH
65813: LD_INT 2
65815: PUSH
65816: EMPTY
65817: LIST
65818: LIST
65819: PUSH
65820: LD_INT 2
65822: NEG
65823: PUSH
65824: LD_INT 1
65826: NEG
65827: PUSH
65828: EMPTY
65829: LIST
65830: LIST
65831: PUSH
65832: LD_INT 2
65834: NEG
65835: PUSH
65836: LD_INT 2
65838: NEG
65839: PUSH
65840: EMPTY
65841: LIST
65842: LIST
65843: PUSH
65844: LD_INT 3
65846: PUSH
65847: LD_INT 2
65849: PUSH
65850: EMPTY
65851: LIST
65852: LIST
65853: PUSH
65854: LD_INT 3
65856: PUSH
65857: LD_INT 3
65859: PUSH
65860: EMPTY
65861: LIST
65862: LIST
65863: PUSH
65864: LD_INT 2
65866: PUSH
65867: LD_INT 3
65869: PUSH
65870: EMPTY
65871: LIST
65872: LIST
65873: PUSH
65874: EMPTY
65875: LIST
65876: LIST
65877: LIST
65878: LIST
65879: LIST
65880: LIST
65881: LIST
65882: LIST
65883: LIST
65884: LIST
65885: LIST
65886: LIST
65887: LIST
65888: LIST
65889: LIST
65890: LIST
65891: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
65892: LD_ADDR_VAR 0 17
65896: PUSH
65897: LD_INT 0
65899: PUSH
65900: LD_INT 0
65902: PUSH
65903: EMPTY
65904: LIST
65905: LIST
65906: PUSH
65907: LD_INT 0
65909: PUSH
65910: LD_INT 1
65912: NEG
65913: PUSH
65914: EMPTY
65915: LIST
65916: LIST
65917: PUSH
65918: LD_INT 1
65920: PUSH
65921: LD_INT 0
65923: PUSH
65924: EMPTY
65925: LIST
65926: LIST
65927: PUSH
65928: LD_INT 1
65930: PUSH
65931: LD_INT 1
65933: PUSH
65934: EMPTY
65935: LIST
65936: LIST
65937: PUSH
65938: LD_INT 0
65940: PUSH
65941: LD_INT 1
65943: PUSH
65944: EMPTY
65945: LIST
65946: LIST
65947: PUSH
65948: LD_INT 1
65950: NEG
65951: PUSH
65952: LD_INT 0
65954: PUSH
65955: EMPTY
65956: LIST
65957: LIST
65958: PUSH
65959: LD_INT 1
65961: NEG
65962: PUSH
65963: LD_INT 1
65965: NEG
65966: PUSH
65967: EMPTY
65968: LIST
65969: LIST
65970: PUSH
65971: LD_INT 1
65973: NEG
65974: PUSH
65975: LD_INT 2
65977: NEG
65978: PUSH
65979: EMPTY
65980: LIST
65981: LIST
65982: PUSH
65983: LD_INT 0
65985: PUSH
65986: LD_INT 2
65988: NEG
65989: PUSH
65990: EMPTY
65991: LIST
65992: LIST
65993: PUSH
65994: LD_INT 1
65996: PUSH
65997: LD_INT 1
65999: NEG
66000: PUSH
66001: EMPTY
66002: LIST
66003: LIST
66004: PUSH
66005: LD_INT 2
66007: PUSH
66008: LD_INT 0
66010: PUSH
66011: EMPTY
66012: LIST
66013: LIST
66014: PUSH
66015: LD_INT 2
66017: PUSH
66018: LD_INT 1
66020: PUSH
66021: EMPTY
66022: LIST
66023: LIST
66024: PUSH
66025: LD_INT 2
66027: PUSH
66028: LD_INT 2
66030: PUSH
66031: EMPTY
66032: LIST
66033: LIST
66034: PUSH
66035: LD_INT 1
66037: PUSH
66038: LD_INT 2
66040: PUSH
66041: EMPTY
66042: LIST
66043: LIST
66044: PUSH
66045: LD_INT 0
66047: PUSH
66048: LD_INT 2
66050: PUSH
66051: EMPTY
66052: LIST
66053: LIST
66054: PUSH
66055: LD_INT 1
66057: NEG
66058: PUSH
66059: LD_INT 1
66061: PUSH
66062: EMPTY
66063: LIST
66064: LIST
66065: PUSH
66066: LD_INT 2
66068: NEG
66069: PUSH
66070: LD_INT 0
66072: PUSH
66073: EMPTY
66074: LIST
66075: LIST
66076: PUSH
66077: LD_INT 2
66079: NEG
66080: PUSH
66081: LD_INT 1
66083: NEG
66084: PUSH
66085: EMPTY
66086: LIST
66087: LIST
66088: PUSH
66089: LD_INT 2
66091: NEG
66092: PUSH
66093: LD_INT 2
66095: NEG
66096: PUSH
66097: EMPTY
66098: LIST
66099: LIST
66100: PUSH
66101: EMPTY
66102: LIST
66103: LIST
66104: LIST
66105: LIST
66106: LIST
66107: LIST
66108: LIST
66109: LIST
66110: LIST
66111: LIST
66112: LIST
66113: LIST
66114: LIST
66115: LIST
66116: LIST
66117: LIST
66118: LIST
66119: LIST
66120: LIST
66121: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66122: LD_ADDR_VAR 0 18
66126: PUSH
66127: LD_INT 0
66129: PUSH
66130: LD_INT 0
66132: PUSH
66133: EMPTY
66134: LIST
66135: LIST
66136: PUSH
66137: LD_INT 0
66139: PUSH
66140: LD_INT 1
66142: NEG
66143: PUSH
66144: EMPTY
66145: LIST
66146: LIST
66147: PUSH
66148: LD_INT 1
66150: PUSH
66151: LD_INT 0
66153: PUSH
66154: EMPTY
66155: LIST
66156: LIST
66157: PUSH
66158: LD_INT 1
66160: PUSH
66161: LD_INT 1
66163: PUSH
66164: EMPTY
66165: LIST
66166: LIST
66167: PUSH
66168: LD_INT 0
66170: PUSH
66171: LD_INT 1
66173: PUSH
66174: EMPTY
66175: LIST
66176: LIST
66177: PUSH
66178: LD_INT 1
66180: NEG
66181: PUSH
66182: LD_INT 0
66184: PUSH
66185: EMPTY
66186: LIST
66187: LIST
66188: PUSH
66189: LD_INT 1
66191: NEG
66192: PUSH
66193: LD_INT 1
66195: NEG
66196: PUSH
66197: EMPTY
66198: LIST
66199: LIST
66200: PUSH
66201: LD_INT 1
66203: NEG
66204: PUSH
66205: LD_INT 2
66207: NEG
66208: PUSH
66209: EMPTY
66210: LIST
66211: LIST
66212: PUSH
66213: LD_INT 0
66215: PUSH
66216: LD_INT 2
66218: NEG
66219: PUSH
66220: EMPTY
66221: LIST
66222: LIST
66223: PUSH
66224: LD_INT 1
66226: PUSH
66227: LD_INT 1
66229: NEG
66230: PUSH
66231: EMPTY
66232: LIST
66233: LIST
66234: PUSH
66235: LD_INT 2
66237: PUSH
66238: LD_INT 0
66240: PUSH
66241: EMPTY
66242: LIST
66243: LIST
66244: PUSH
66245: LD_INT 2
66247: PUSH
66248: LD_INT 1
66250: PUSH
66251: EMPTY
66252: LIST
66253: LIST
66254: PUSH
66255: LD_INT 2
66257: PUSH
66258: LD_INT 2
66260: PUSH
66261: EMPTY
66262: LIST
66263: LIST
66264: PUSH
66265: LD_INT 1
66267: PUSH
66268: LD_INT 2
66270: PUSH
66271: EMPTY
66272: LIST
66273: LIST
66274: PUSH
66275: LD_INT 0
66277: PUSH
66278: LD_INT 2
66280: PUSH
66281: EMPTY
66282: LIST
66283: LIST
66284: PUSH
66285: LD_INT 1
66287: NEG
66288: PUSH
66289: LD_INT 1
66291: PUSH
66292: EMPTY
66293: LIST
66294: LIST
66295: PUSH
66296: LD_INT 2
66298: NEG
66299: PUSH
66300: LD_INT 0
66302: PUSH
66303: EMPTY
66304: LIST
66305: LIST
66306: PUSH
66307: LD_INT 2
66309: NEG
66310: PUSH
66311: LD_INT 1
66313: NEG
66314: PUSH
66315: EMPTY
66316: LIST
66317: LIST
66318: PUSH
66319: LD_INT 2
66321: NEG
66322: PUSH
66323: LD_INT 2
66325: NEG
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: PUSH
66331: EMPTY
66332: LIST
66333: LIST
66334: LIST
66335: LIST
66336: LIST
66337: LIST
66338: LIST
66339: LIST
66340: LIST
66341: LIST
66342: LIST
66343: LIST
66344: LIST
66345: LIST
66346: LIST
66347: LIST
66348: LIST
66349: LIST
66350: LIST
66351: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66352: LD_ADDR_VAR 0 19
66356: PUSH
66357: LD_INT 0
66359: PUSH
66360: LD_INT 0
66362: PUSH
66363: EMPTY
66364: LIST
66365: LIST
66366: PUSH
66367: LD_INT 0
66369: PUSH
66370: LD_INT 1
66372: NEG
66373: PUSH
66374: EMPTY
66375: LIST
66376: LIST
66377: PUSH
66378: LD_INT 1
66380: PUSH
66381: LD_INT 0
66383: PUSH
66384: EMPTY
66385: LIST
66386: LIST
66387: PUSH
66388: LD_INT 1
66390: PUSH
66391: LD_INT 1
66393: PUSH
66394: EMPTY
66395: LIST
66396: LIST
66397: PUSH
66398: LD_INT 0
66400: PUSH
66401: LD_INT 1
66403: PUSH
66404: EMPTY
66405: LIST
66406: LIST
66407: PUSH
66408: LD_INT 1
66410: NEG
66411: PUSH
66412: LD_INT 0
66414: PUSH
66415: EMPTY
66416: LIST
66417: LIST
66418: PUSH
66419: LD_INT 1
66421: NEG
66422: PUSH
66423: LD_INT 1
66425: NEG
66426: PUSH
66427: EMPTY
66428: LIST
66429: LIST
66430: PUSH
66431: LD_INT 1
66433: NEG
66434: PUSH
66435: LD_INT 2
66437: NEG
66438: PUSH
66439: EMPTY
66440: LIST
66441: LIST
66442: PUSH
66443: LD_INT 0
66445: PUSH
66446: LD_INT 2
66448: NEG
66449: PUSH
66450: EMPTY
66451: LIST
66452: LIST
66453: PUSH
66454: LD_INT 1
66456: PUSH
66457: LD_INT 1
66459: NEG
66460: PUSH
66461: EMPTY
66462: LIST
66463: LIST
66464: PUSH
66465: LD_INT 2
66467: PUSH
66468: LD_INT 0
66470: PUSH
66471: EMPTY
66472: LIST
66473: LIST
66474: PUSH
66475: LD_INT 2
66477: PUSH
66478: LD_INT 1
66480: PUSH
66481: EMPTY
66482: LIST
66483: LIST
66484: PUSH
66485: LD_INT 2
66487: PUSH
66488: LD_INT 2
66490: PUSH
66491: EMPTY
66492: LIST
66493: LIST
66494: PUSH
66495: LD_INT 1
66497: PUSH
66498: LD_INT 2
66500: PUSH
66501: EMPTY
66502: LIST
66503: LIST
66504: PUSH
66505: LD_INT 0
66507: PUSH
66508: LD_INT 2
66510: PUSH
66511: EMPTY
66512: LIST
66513: LIST
66514: PUSH
66515: LD_INT 1
66517: NEG
66518: PUSH
66519: LD_INT 1
66521: PUSH
66522: EMPTY
66523: LIST
66524: LIST
66525: PUSH
66526: LD_INT 2
66528: NEG
66529: PUSH
66530: LD_INT 0
66532: PUSH
66533: EMPTY
66534: LIST
66535: LIST
66536: PUSH
66537: LD_INT 2
66539: NEG
66540: PUSH
66541: LD_INT 1
66543: NEG
66544: PUSH
66545: EMPTY
66546: LIST
66547: LIST
66548: PUSH
66549: LD_INT 2
66551: NEG
66552: PUSH
66553: LD_INT 2
66555: NEG
66556: PUSH
66557: EMPTY
66558: LIST
66559: LIST
66560: PUSH
66561: EMPTY
66562: LIST
66563: LIST
66564: LIST
66565: LIST
66566: LIST
66567: LIST
66568: LIST
66569: LIST
66570: LIST
66571: LIST
66572: LIST
66573: LIST
66574: LIST
66575: LIST
66576: LIST
66577: LIST
66578: LIST
66579: LIST
66580: LIST
66581: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66582: LD_ADDR_VAR 0 20
66586: PUSH
66587: LD_INT 0
66589: PUSH
66590: LD_INT 0
66592: PUSH
66593: EMPTY
66594: LIST
66595: LIST
66596: PUSH
66597: LD_INT 0
66599: PUSH
66600: LD_INT 1
66602: NEG
66603: PUSH
66604: EMPTY
66605: LIST
66606: LIST
66607: PUSH
66608: LD_INT 1
66610: PUSH
66611: LD_INT 0
66613: PUSH
66614: EMPTY
66615: LIST
66616: LIST
66617: PUSH
66618: LD_INT 1
66620: PUSH
66621: LD_INT 1
66623: PUSH
66624: EMPTY
66625: LIST
66626: LIST
66627: PUSH
66628: LD_INT 0
66630: PUSH
66631: LD_INT 1
66633: PUSH
66634: EMPTY
66635: LIST
66636: LIST
66637: PUSH
66638: LD_INT 1
66640: NEG
66641: PUSH
66642: LD_INT 0
66644: PUSH
66645: EMPTY
66646: LIST
66647: LIST
66648: PUSH
66649: LD_INT 1
66651: NEG
66652: PUSH
66653: LD_INT 1
66655: NEG
66656: PUSH
66657: EMPTY
66658: LIST
66659: LIST
66660: PUSH
66661: LD_INT 1
66663: NEG
66664: PUSH
66665: LD_INT 2
66667: NEG
66668: PUSH
66669: EMPTY
66670: LIST
66671: LIST
66672: PUSH
66673: LD_INT 0
66675: PUSH
66676: LD_INT 2
66678: NEG
66679: PUSH
66680: EMPTY
66681: LIST
66682: LIST
66683: PUSH
66684: LD_INT 1
66686: PUSH
66687: LD_INT 1
66689: NEG
66690: PUSH
66691: EMPTY
66692: LIST
66693: LIST
66694: PUSH
66695: LD_INT 2
66697: PUSH
66698: LD_INT 0
66700: PUSH
66701: EMPTY
66702: LIST
66703: LIST
66704: PUSH
66705: LD_INT 2
66707: PUSH
66708: LD_INT 1
66710: PUSH
66711: EMPTY
66712: LIST
66713: LIST
66714: PUSH
66715: LD_INT 2
66717: PUSH
66718: LD_INT 2
66720: PUSH
66721: EMPTY
66722: LIST
66723: LIST
66724: PUSH
66725: LD_INT 1
66727: PUSH
66728: LD_INT 2
66730: PUSH
66731: EMPTY
66732: LIST
66733: LIST
66734: PUSH
66735: LD_INT 0
66737: PUSH
66738: LD_INT 2
66740: PUSH
66741: EMPTY
66742: LIST
66743: LIST
66744: PUSH
66745: LD_INT 1
66747: NEG
66748: PUSH
66749: LD_INT 1
66751: PUSH
66752: EMPTY
66753: LIST
66754: LIST
66755: PUSH
66756: LD_INT 2
66758: NEG
66759: PUSH
66760: LD_INT 0
66762: PUSH
66763: EMPTY
66764: LIST
66765: LIST
66766: PUSH
66767: LD_INT 2
66769: NEG
66770: PUSH
66771: LD_INT 1
66773: NEG
66774: PUSH
66775: EMPTY
66776: LIST
66777: LIST
66778: PUSH
66779: LD_INT 2
66781: NEG
66782: PUSH
66783: LD_INT 2
66785: NEG
66786: PUSH
66787: EMPTY
66788: LIST
66789: LIST
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: LIST
66795: LIST
66796: LIST
66797: LIST
66798: LIST
66799: LIST
66800: LIST
66801: LIST
66802: LIST
66803: LIST
66804: LIST
66805: LIST
66806: LIST
66807: LIST
66808: LIST
66809: LIST
66810: LIST
66811: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
66812: LD_ADDR_VAR 0 21
66816: PUSH
66817: LD_INT 0
66819: PUSH
66820: LD_INT 0
66822: PUSH
66823: EMPTY
66824: LIST
66825: LIST
66826: PUSH
66827: LD_INT 0
66829: PUSH
66830: LD_INT 1
66832: NEG
66833: PUSH
66834: EMPTY
66835: LIST
66836: LIST
66837: PUSH
66838: LD_INT 1
66840: PUSH
66841: LD_INT 0
66843: PUSH
66844: EMPTY
66845: LIST
66846: LIST
66847: PUSH
66848: LD_INT 1
66850: PUSH
66851: LD_INT 1
66853: PUSH
66854: EMPTY
66855: LIST
66856: LIST
66857: PUSH
66858: LD_INT 0
66860: PUSH
66861: LD_INT 1
66863: PUSH
66864: EMPTY
66865: LIST
66866: LIST
66867: PUSH
66868: LD_INT 1
66870: NEG
66871: PUSH
66872: LD_INT 0
66874: PUSH
66875: EMPTY
66876: LIST
66877: LIST
66878: PUSH
66879: LD_INT 1
66881: NEG
66882: PUSH
66883: LD_INT 1
66885: NEG
66886: PUSH
66887: EMPTY
66888: LIST
66889: LIST
66890: PUSH
66891: LD_INT 1
66893: NEG
66894: PUSH
66895: LD_INT 2
66897: NEG
66898: PUSH
66899: EMPTY
66900: LIST
66901: LIST
66902: PUSH
66903: LD_INT 0
66905: PUSH
66906: LD_INT 2
66908: NEG
66909: PUSH
66910: EMPTY
66911: LIST
66912: LIST
66913: PUSH
66914: LD_INT 1
66916: PUSH
66917: LD_INT 1
66919: NEG
66920: PUSH
66921: EMPTY
66922: LIST
66923: LIST
66924: PUSH
66925: LD_INT 2
66927: PUSH
66928: LD_INT 0
66930: PUSH
66931: EMPTY
66932: LIST
66933: LIST
66934: PUSH
66935: LD_INT 2
66937: PUSH
66938: LD_INT 1
66940: PUSH
66941: EMPTY
66942: LIST
66943: LIST
66944: PUSH
66945: LD_INT 2
66947: PUSH
66948: LD_INT 2
66950: PUSH
66951: EMPTY
66952: LIST
66953: LIST
66954: PUSH
66955: LD_INT 1
66957: PUSH
66958: LD_INT 2
66960: PUSH
66961: EMPTY
66962: LIST
66963: LIST
66964: PUSH
66965: LD_INT 0
66967: PUSH
66968: LD_INT 2
66970: PUSH
66971: EMPTY
66972: LIST
66973: LIST
66974: PUSH
66975: LD_INT 1
66977: NEG
66978: PUSH
66979: LD_INT 1
66981: PUSH
66982: EMPTY
66983: LIST
66984: LIST
66985: PUSH
66986: LD_INT 2
66988: NEG
66989: PUSH
66990: LD_INT 0
66992: PUSH
66993: EMPTY
66994: LIST
66995: LIST
66996: PUSH
66997: LD_INT 2
66999: NEG
67000: PUSH
67001: LD_INT 1
67003: NEG
67004: PUSH
67005: EMPTY
67006: LIST
67007: LIST
67008: PUSH
67009: LD_INT 2
67011: NEG
67012: PUSH
67013: LD_INT 2
67015: NEG
67016: PUSH
67017: EMPTY
67018: LIST
67019: LIST
67020: PUSH
67021: EMPTY
67022: LIST
67023: LIST
67024: LIST
67025: LIST
67026: LIST
67027: LIST
67028: LIST
67029: LIST
67030: LIST
67031: LIST
67032: LIST
67033: LIST
67034: LIST
67035: LIST
67036: LIST
67037: LIST
67038: LIST
67039: LIST
67040: LIST
67041: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
67042: LD_ADDR_VAR 0 22
67046: PUSH
67047: LD_INT 0
67049: PUSH
67050: LD_INT 0
67052: PUSH
67053: EMPTY
67054: LIST
67055: LIST
67056: PUSH
67057: LD_INT 0
67059: PUSH
67060: LD_INT 1
67062: NEG
67063: PUSH
67064: EMPTY
67065: LIST
67066: LIST
67067: PUSH
67068: LD_INT 1
67070: PUSH
67071: LD_INT 0
67073: PUSH
67074: EMPTY
67075: LIST
67076: LIST
67077: PUSH
67078: LD_INT 1
67080: PUSH
67081: LD_INT 1
67083: PUSH
67084: EMPTY
67085: LIST
67086: LIST
67087: PUSH
67088: LD_INT 0
67090: PUSH
67091: LD_INT 1
67093: PUSH
67094: EMPTY
67095: LIST
67096: LIST
67097: PUSH
67098: LD_INT 1
67100: NEG
67101: PUSH
67102: LD_INT 0
67104: PUSH
67105: EMPTY
67106: LIST
67107: LIST
67108: PUSH
67109: LD_INT 1
67111: NEG
67112: PUSH
67113: LD_INT 1
67115: NEG
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: PUSH
67121: LD_INT 1
67123: NEG
67124: PUSH
67125: LD_INT 2
67127: NEG
67128: PUSH
67129: EMPTY
67130: LIST
67131: LIST
67132: PUSH
67133: LD_INT 0
67135: PUSH
67136: LD_INT 2
67138: NEG
67139: PUSH
67140: EMPTY
67141: LIST
67142: LIST
67143: PUSH
67144: LD_INT 1
67146: PUSH
67147: LD_INT 1
67149: NEG
67150: PUSH
67151: EMPTY
67152: LIST
67153: LIST
67154: PUSH
67155: LD_INT 2
67157: PUSH
67158: LD_INT 0
67160: PUSH
67161: EMPTY
67162: LIST
67163: LIST
67164: PUSH
67165: LD_INT 2
67167: PUSH
67168: LD_INT 1
67170: PUSH
67171: EMPTY
67172: LIST
67173: LIST
67174: PUSH
67175: LD_INT 2
67177: PUSH
67178: LD_INT 2
67180: PUSH
67181: EMPTY
67182: LIST
67183: LIST
67184: PUSH
67185: LD_INT 1
67187: PUSH
67188: LD_INT 2
67190: PUSH
67191: EMPTY
67192: LIST
67193: LIST
67194: PUSH
67195: LD_INT 0
67197: PUSH
67198: LD_INT 2
67200: PUSH
67201: EMPTY
67202: LIST
67203: LIST
67204: PUSH
67205: LD_INT 1
67207: NEG
67208: PUSH
67209: LD_INT 1
67211: PUSH
67212: EMPTY
67213: LIST
67214: LIST
67215: PUSH
67216: LD_INT 2
67218: NEG
67219: PUSH
67220: LD_INT 0
67222: PUSH
67223: EMPTY
67224: LIST
67225: LIST
67226: PUSH
67227: LD_INT 2
67229: NEG
67230: PUSH
67231: LD_INT 1
67233: NEG
67234: PUSH
67235: EMPTY
67236: LIST
67237: LIST
67238: PUSH
67239: LD_INT 2
67241: NEG
67242: PUSH
67243: LD_INT 2
67245: NEG
67246: PUSH
67247: EMPTY
67248: LIST
67249: LIST
67250: PUSH
67251: EMPTY
67252: LIST
67253: LIST
67254: LIST
67255: LIST
67256: LIST
67257: LIST
67258: LIST
67259: LIST
67260: LIST
67261: LIST
67262: LIST
67263: LIST
67264: LIST
67265: LIST
67266: LIST
67267: LIST
67268: LIST
67269: LIST
67270: LIST
67271: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
67272: LD_ADDR_VAR 0 23
67276: PUSH
67277: LD_INT 0
67279: PUSH
67280: LD_INT 0
67282: PUSH
67283: EMPTY
67284: LIST
67285: LIST
67286: PUSH
67287: LD_INT 0
67289: PUSH
67290: LD_INT 1
67292: NEG
67293: PUSH
67294: EMPTY
67295: LIST
67296: LIST
67297: PUSH
67298: LD_INT 1
67300: PUSH
67301: LD_INT 0
67303: PUSH
67304: EMPTY
67305: LIST
67306: LIST
67307: PUSH
67308: LD_INT 1
67310: PUSH
67311: LD_INT 1
67313: PUSH
67314: EMPTY
67315: LIST
67316: LIST
67317: PUSH
67318: LD_INT 0
67320: PUSH
67321: LD_INT 1
67323: PUSH
67324: EMPTY
67325: LIST
67326: LIST
67327: PUSH
67328: LD_INT 1
67330: NEG
67331: PUSH
67332: LD_INT 0
67334: PUSH
67335: EMPTY
67336: LIST
67337: LIST
67338: PUSH
67339: LD_INT 1
67341: NEG
67342: PUSH
67343: LD_INT 1
67345: NEG
67346: PUSH
67347: EMPTY
67348: LIST
67349: LIST
67350: PUSH
67351: LD_INT 1
67353: NEG
67354: PUSH
67355: LD_INT 2
67357: NEG
67358: PUSH
67359: EMPTY
67360: LIST
67361: LIST
67362: PUSH
67363: LD_INT 0
67365: PUSH
67366: LD_INT 2
67368: NEG
67369: PUSH
67370: EMPTY
67371: LIST
67372: LIST
67373: PUSH
67374: LD_INT 1
67376: PUSH
67377: LD_INT 1
67379: NEG
67380: PUSH
67381: EMPTY
67382: LIST
67383: LIST
67384: PUSH
67385: LD_INT 2
67387: PUSH
67388: LD_INT 0
67390: PUSH
67391: EMPTY
67392: LIST
67393: LIST
67394: PUSH
67395: LD_INT 2
67397: PUSH
67398: LD_INT 1
67400: PUSH
67401: EMPTY
67402: LIST
67403: LIST
67404: PUSH
67405: LD_INT 2
67407: PUSH
67408: LD_INT 2
67410: PUSH
67411: EMPTY
67412: LIST
67413: LIST
67414: PUSH
67415: LD_INT 1
67417: PUSH
67418: LD_INT 2
67420: PUSH
67421: EMPTY
67422: LIST
67423: LIST
67424: PUSH
67425: LD_INT 0
67427: PUSH
67428: LD_INT 2
67430: PUSH
67431: EMPTY
67432: LIST
67433: LIST
67434: PUSH
67435: LD_INT 1
67437: NEG
67438: PUSH
67439: LD_INT 1
67441: PUSH
67442: EMPTY
67443: LIST
67444: LIST
67445: PUSH
67446: LD_INT 2
67448: NEG
67449: PUSH
67450: LD_INT 0
67452: PUSH
67453: EMPTY
67454: LIST
67455: LIST
67456: PUSH
67457: LD_INT 2
67459: NEG
67460: PUSH
67461: LD_INT 1
67463: NEG
67464: PUSH
67465: EMPTY
67466: LIST
67467: LIST
67468: PUSH
67469: LD_INT 2
67471: NEG
67472: PUSH
67473: LD_INT 2
67475: NEG
67476: PUSH
67477: EMPTY
67478: LIST
67479: LIST
67480: PUSH
67481: LD_INT 2
67483: NEG
67484: PUSH
67485: LD_INT 3
67487: NEG
67488: PUSH
67489: EMPTY
67490: LIST
67491: LIST
67492: PUSH
67493: LD_INT 1
67495: NEG
67496: PUSH
67497: LD_INT 3
67499: NEG
67500: PUSH
67501: EMPTY
67502: LIST
67503: LIST
67504: PUSH
67505: LD_INT 1
67507: PUSH
67508: LD_INT 2
67510: NEG
67511: PUSH
67512: EMPTY
67513: LIST
67514: LIST
67515: PUSH
67516: LD_INT 2
67518: PUSH
67519: LD_INT 1
67521: NEG
67522: PUSH
67523: EMPTY
67524: LIST
67525: LIST
67526: PUSH
67527: EMPTY
67528: LIST
67529: LIST
67530: LIST
67531: LIST
67532: LIST
67533: LIST
67534: LIST
67535: LIST
67536: LIST
67537: LIST
67538: LIST
67539: LIST
67540: LIST
67541: LIST
67542: LIST
67543: LIST
67544: LIST
67545: LIST
67546: LIST
67547: LIST
67548: LIST
67549: LIST
67550: LIST
67551: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
67552: LD_ADDR_VAR 0 24
67556: PUSH
67557: LD_INT 0
67559: PUSH
67560: LD_INT 0
67562: PUSH
67563: EMPTY
67564: LIST
67565: LIST
67566: PUSH
67567: LD_INT 0
67569: PUSH
67570: LD_INT 1
67572: NEG
67573: PUSH
67574: EMPTY
67575: LIST
67576: LIST
67577: PUSH
67578: LD_INT 1
67580: PUSH
67581: LD_INT 0
67583: PUSH
67584: EMPTY
67585: LIST
67586: LIST
67587: PUSH
67588: LD_INT 1
67590: PUSH
67591: LD_INT 1
67593: PUSH
67594: EMPTY
67595: LIST
67596: LIST
67597: PUSH
67598: LD_INT 0
67600: PUSH
67601: LD_INT 1
67603: PUSH
67604: EMPTY
67605: LIST
67606: LIST
67607: PUSH
67608: LD_INT 1
67610: NEG
67611: PUSH
67612: LD_INT 0
67614: PUSH
67615: EMPTY
67616: LIST
67617: LIST
67618: PUSH
67619: LD_INT 1
67621: NEG
67622: PUSH
67623: LD_INT 1
67625: NEG
67626: PUSH
67627: EMPTY
67628: LIST
67629: LIST
67630: PUSH
67631: LD_INT 1
67633: NEG
67634: PUSH
67635: LD_INT 2
67637: NEG
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: LD_INT 0
67645: PUSH
67646: LD_INT 2
67648: NEG
67649: PUSH
67650: EMPTY
67651: LIST
67652: LIST
67653: PUSH
67654: LD_INT 1
67656: PUSH
67657: LD_INT 1
67659: NEG
67660: PUSH
67661: EMPTY
67662: LIST
67663: LIST
67664: PUSH
67665: LD_INT 2
67667: PUSH
67668: LD_INT 0
67670: PUSH
67671: EMPTY
67672: LIST
67673: LIST
67674: PUSH
67675: LD_INT 2
67677: PUSH
67678: LD_INT 1
67680: PUSH
67681: EMPTY
67682: LIST
67683: LIST
67684: PUSH
67685: LD_INT 2
67687: PUSH
67688: LD_INT 2
67690: PUSH
67691: EMPTY
67692: LIST
67693: LIST
67694: PUSH
67695: LD_INT 1
67697: PUSH
67698: LD_INT 2
67700: PUSH
67701: EMPTY
67702: LIST
67703: LIST
67704: PUSH
67705: LD_INT 0
67707: PUSH
67708: LD_INT 2
67710: PUSH
67711: EMPTY
67712: LIST
67713: LIST
67714: PUSH
67715: LD_INT 1
67717: NEG
67718: PUSH
67719: LD_INT 1
67721: PUSH
67722: EMPTY
67723: LIST
67724: LIST
67725: PUSH
67726: LD_INT 2
67728: NEG
67729: PUSH
67730: LD_INT 0
67732: PUSH
67733: EMPTY
67734: LIST
67735: LIST
67736: PUSH
67737: LD_INT 2
67739: NEG
67740: PUSH
67741: LD_INT 1
67743: NEG
67744: PUSH
67745: EMPTY
67746: LIST
67747: LIST
67748: PUSH
67749: LD_INT 2
67751: NEG
67752: PUSH
67753: LD_INT 2
67755: NEG
67756: PUSH
67757: EMPTY
67758: LIST
67759: LIST
67760: PUSH
67761: LD_INT 1
67763: PUSH
67764: LD_INT 2
67766: NEG
67767: PUSH
67768: EMPTY
67769: LIST
67770: LIST
67771: PUSH
67772: LD_INT 2
67774: PUSH
67775: LD_INT 1
67777: NEG
67778: PUSH
67779: EMPTY
67780: LIST
67781: LIST
67782: PUSH
67783: LD_INT 3
67785: PUSH
67786: LD_INT 1
67788: PUSH
67789: EMPTY
67790: LIST
67791: LIST
67792: PUSH
67793: LD_INT 3
67795: PUSH
67796: LD_INT 2
67798: PUSH
67799: EMPTY
67800: LIST
67801: LIST
67802: PUSH
67803: EMPTY
67804: LIST
67805: LIST
67806: LIST
67807: LIST
67808: LIST
67809: LIST
67810: LIST
67811: LIST
67812: LIST
67813: LIST
67814: LIST
67815: LIST
67816: LIST
67817: LIST
67818: LIST
67819: LIST
67820: LIST
67821: LIST
67822: LIST
67823: LIST
67824: LIST
67825: LIST
67826: LIST
67827: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
67828: LD_ADDR_VAR 0 25
67832: PUSH
67833: LD_INT 0
67835: PUSH
67836: LD_INT 0
67838: PUSH
67839: EMPTY
67840: LIST
67841: LIST
67842: PUSH
67843: LD_INT 0
67845: PUSH
67846: LD_INT 1
67848: NEG
67849: PUSH
67850: EMPTY
67851: LIST
67852: LIST
67853: PUSH
67854: LD_INT 1
67856: PUSH
67857: LD_INT 0
67859: PUSH
67860: EMPTY
67861: LIST
67862: LIST
67863: PUSH
67864: LD_INT 1
67866: PUSH
67867: LD_INT 1
67869: PUSH
67870: EMPTY
67871: LIST
67872: LIST
67873: PUSH
67874: LD_INT 0
67876: PUSH
67877: LD_INT 1
67879: PUSH
67880: EMPTY
67881: LIST
67882: LIST
67883: PUSH
67884: LD_INT 1
67886: NEG
67887: PUSH
67888: LD_INT 0
67890: PUSH
67891: EMPTY
67892: LIST
67893: LIST
67894: PUSH
67895: LD_INT 1
67897: NEG
67898: PUSH
67899: LD_INT 1
67901: NEG
67902: PUSH
67903: EMPTY
67904: LIST
67905: LIST
67906: PUSH
67907: LD_INT 1
67909: NEG
67910: PUSH
67911: LD_INT 2
67913: NEG
67914: PUSH
67915: EMPTY
67916: LIST
67917: LIST
67918: PUSH
67919: LD_INT 0
67921: PUSH
67922: LD_INT 2
67924: NEG
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 1
67932: PUSH
67933: LD_INT 1
67935: NEG
67936: PUSH
67937: EMPTY
67938: LIST
67939: LIST
67940: PUSH
67941: LD_INT 2
67943: PUSH
67944: LD_INT 0
67946: PUSH
67947: EMPTY
67948: LIST
67949: LIST
67950: PUSH
67951: LD_INT 2
67953: PUSH
67954: LD_INT 1
67956: PUSH
67957: EMPTY
67958: LIST
67959: LIST
67960: PUSH
67961: LD_INT 2
67963: PUSH
67964: LD_INT 2
67966: PUSH
67967: EMPTY
67968: LIST
67969: LIST
67970: PUSH
67971: LD_INT 1
67973: PUSH
67974: LD_INT 2
67976: PUSH
67977: EMPTY
67978: LIST
67979: LIST
67980: PUSH
67981: LD_INT 0
67983: PUSH
67984: LD_INT 2
67986: PUSH
67987: EMPTY
67988: LIST
67989: LIST
67990: PUSH
67991: LD_INT 1
67993: NEG
67994: PUSH
67995: LD_INT 1
67997: PUSH
67998: EMPTY
67999: LIST
68000: LIST
68001: PUSH
68002: LD_INT 2
68004: NEG
68005: PUSH
68006: LD_INT 0
68008: PUSH
68009: EMPTY
68010: LIST
68011: LIST
68012: PUSH
68013: LD_INT 2
68015: NEG
68016: PUSH
68017: LD_INT 1
68019: NEG
68020: PUSH
68021: EMPTY
68022: LIST
68023: LIST
68024: PUSH
68025: LD_INT 2
68027: NEG
68028: PUSH
68029: LD_INT 2
68031: NEG
68032: PUSH
68033: EMPTY
68034: LIST
68035: LIST
68036: PUSH
68037: LD_INT 3
68039: PUSH
68040: LD_INT 1
68042: PUSH
68043: EMPTY
68044: LIST
68045: LIST
68046: PUSH
68047: LD_INT 3
68049: PUSH
68050: LD_INT 2
68052: PUSH
68053: EMPTY
68054: LIST
68055: LIST
68056: PUSH
68057: LD_INT 2
68059: PUSH
68060: LD_INT 3
68062: PUSH
68063: EMPTY
68064: LIST
68065: LIST
68066: PUSH
68067: LD_INT 1
68069: PUSH
68070: LD_INT 3
68072: PUSH
68073: EMPTY
68074: LIST
68075: LIST
68076: PUSH
68077: EMPTY
68078: LIST
68079: LIST
68080: LIST
68081: LIST
68082: LIST
68083: LIST
68084: LIST
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: LIST
68090: LIST
68091: LIST
68092: LIST
68093: LIST
68094: LIST
68095: LIST
68096: LIST
68097: LIST
68098: LIST
68099: LIST
68100: LIST
68101: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
68102: LD_ADDR_VAR 0 26
68106: PUSH
68107: LD_INT 0
68109: PUSH
68110: LD_INT 0
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PUSH
68117: LD_INT 0
68119: PUSH
68120: LD_INT 1
68122: NEG
68123: PUSH
68124: EMPTY
68125: LIST
68126: LIST
68127: PUSH
68128: LD_INT 1
68130: PUSH
68131: LD_INT 0
68133: PUSH
68134: EMPTY
68135: LIST
68136: LIST
68137: PUSH
68138: LD_INT 1
68140: PUSH
68141: LD_INT 1
68143: PUSH
68144: EMPTY
68145: LIST
68146: LIST
68147: PUSH
68148: LD_INT 0
68150: PUSH
68151: LD_INT 1
68153: PUSH
68154: EMPTY
68155: LIST
68156: LIST
68157: PUSH
68158: LD_INT 1
68160: NEG
68161: PUSH
68162: LD_INT 0
68164: PUSH
68165: EMPTY
68166: LIST
68167: LIST
68168: PUSH
68169: LD_INT 1
68171: NEG
68172: PUSH
68173: LD_INT 1
68175: NEG
68176: PUSH
68177: EMPTY
68178: LIST
68179: LIST
68180: PUSH
68181: LD_INT 1
68183: NEG
68184: PUSH
68185: LD_INT 2
68187: NEG
68188: PUSH
68189: EMPTY
68190: LIST
68191: LIST
68192: PUSH
68193: LD_INT 0
68195: PUSH
68196: LD_INT 2
68198: NEG
68199: PUSH
68200: EMPTY
68201: LIST
68202: LIST
68203: PUSH
68204: LD_INT 1
68206: PUSH
68207: LD_INT 1
68209: NEG
68210: PUSH
68211: EMPTY
68212: LIST
68213: LIST
68214: PUSH
68215: LD_INT 2
68217: PUSH
68218: LD_INT 0
68220: PUSH
68221: EMPTY
68222: LIST
68223: LIST
68224: PUSH
68225: LD_INT 2
68227: PUSH
68228: LD_INT 1
68230: PUSH
68231: EMPTY
68232: LIST
68233: LIST
68234: PUSH
68235: LD_INT 2
68237: PUSH
68238: LD_INT 2
68240: PUSH
68241: EMPTY
68242: LIST
68243: LIST
68244: PUSH
68245: LD_INT 1
68247: PUSH
68248: LD_INT 2
68250: PUSH
68251: EMPTY
68252: LIST
68253: LIST
68254: PUSH
68255: LD_INT 0
68257: PUSH
68258: LD_INT 2
68260: PUSH
68261: EMPTY
68262: LIST
68263: LIST
68264: PUSH
68265: LD_INT 1
68267: NEG
68268: PUSH
68269: LD_INT 1
68271: PUSH
68272: EMPTY
68273: LIST
68274: LIST
68275: PUSH
68276: LD_INT 2
68278: NEG
68279: PUSH
68280: LD_INT 0
68282: PUSH
68283: EMPTY
68284: LIST
68285: LIST
68286: PUSH
68287: LD_INT 2
68289: NEG
68290: PUSH
68291: LD_INT 1
68293: NEG
68294: PUSH
68295: EMPTY
68296: LIST
68297: LIST
68298: PUSH
68299: LD_INT 2
68301: NEG
68302: PUSH
68303: LD_INT 2
68305: NEG
68306: PUSH
68307: EMPTY
68308: LIST
68309: LIST
68310: PUSH
68311: LD_INT 2
68313: PUSH
68314: LD_INT 3
68316: PUSH
68317: EMPTY
68318: LIST
68319: LIST
68320: PUSH
68321: LD_INT 1
68323: PUSH
68324: LD_INT 3
68326: PUSH
68327: EMPTY
68328: LIST
68329: LIST
68330: PUSH
68331: LD_INT 1
68333: NEG
68334: PUSH
68335: LD_INT 2
68337: PUSH
68338: EMPTY
68339: LIST
68340: LIST
68341: PUSH
68342: LD_INT 2
68344: NEG
68345: PUSH
68346: LD_INT 1
68348: PUSH
68349: EMPTY
68350: LIST
68351: LIST
68352: PUSH
68353: EMPTY
68354: LIST
68355: LIST
68356: LIST
68357: LIST
68358: LIST
68359: LIST
68360: LIST
68361: LIST
68362: LIST
68363: LIST
68364: LIST
68365: LIST
68366: LIST
68367: LIST
68368: LIST
68369: LIST
68370: LIST
68371: LIST
68372: LIST
68373: LIST
68374: LIST
68375: LIST
68376: LIST
68377: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68378: LD_ADDR_VAR 0 27
68382: PUSH
68383: LD_INT 0
68385: PUSH
68386: LD_INT 0
68388: PUSH
68389: EMPTY
68390: LIST
68391: LIST
68392: PUSH
68393: LD_INT 0
68395: PUSH
68396: LD_INT 1
68398: NEG
68399: PUSH
68400: EMPTY
68401: LIST
68402: LIST
68403: PUSH
68404: LD_INT 1
68406: PUSH
68407: LD_INT 0
68409: PUSH
68410: EMPTY
68411: LIST
68412: LIST
68413: PUSH
68414: LD_INT 1
68416: PUSH
68417: LD_INT 1
68419: PUSH
68420: EMPTY
68421: LIST
68422: LIST
68423: PUSH
68424: LD_INT 0
68426: PUSH
68427: LD_INT 1
68429: PUSH
68430: EMPTY
68431: LIST
68432: LIST
68433: PUSH
68434: LD_INT 1
68436: NEG
68437: PUSH
68438: LD_INT 0
68440: PUSH
68441: EMPTY
68442: LIST
68443: LIST
68444: PUSH
68445: LD_INT 1
68447: NEG
68448: PUSH
68449: LD_INT 1
68451: NEG
68452: PUSH
68453: EMPTY
68454: LIST
68455: LIST
68456: PUSH
68457: LD_INT 1
68459: NEG
68460: PUSH
68461: LD_INT 2
68463: NEG
68464: PUSH
68465: EMPTY
68466: LIST
68467: LIST
68468: PUSH
68469: LD_INT 0
68471: PUSH
68472: LD_INT 2
68474: NEG
68475: PUSH
68476: EMPTY
68477: LIST
68478: LIST
68479: PUSH
68480: LD_INT 1
68482: PUSH
68483: LD_INT 1
68485: NEG
68486: PUSH
68487: EMPTY
68488: LIST
68489: LIST
68490: PUSH
68491: LD_INT 2
68493: PUSH
68494: LD_INT 0
68496: PUSH
68497: EMPTY
68498: LIST
68499: LIST
68500: PUSH
68501: LD_INT 2
68503: PUSH
68504: LD_INT 1
68506: PUSH
68507: EMPTY
68508: LIST
68509: LIST
68510: PUSH
68511: LD_INT 2
68513: PUSH
68514: LD_INT 2
68516: PUSH
68517: EMPTY
68518: LIST
68519: LIST
68520: PUSH
68521: LD_INT 1
68523: PUSH
68524: LD_INT 2
68526: PUSH
68527: EMPTY
68528: LIST
68529: LIST
68530: PUSH
68531: LD_INT 0
68533: PUSH
68534: LD_INT 2
68536: PUSH
68537: EMPTY
68538: LIST
68539: LIST
68540: PUSH
68541: LD_INT 1
68543: NEG
68544: PUSH
68545: LD_INT 1
68547: PUSH
68548: EMPTY
68549: LIST
68550: LIST
68551: PUSH
68552: LD_INT 2
68554: NEG
68555: PUSH
68556: LD_INT 0
68558: PUSH
68559: EMPTY
68560: LIST
68561: LIST
68562: PUSH
68563: LD_INT 2
68565: NEG
68566: PUSH
68567: LD_INT 1
68569: NEG
68570: PUSH
68571: EMPTY
68572: LIST
68573: LIST
68574: PUSH
68575: LD_INT 2
68577: NEG
68578: PUSH
68579: LD_INT 2
68581: NEG
68582: PUSH
68583: EMPTY
68584: LIST
68585: LIST
68586: PUSH
68587: LD_INT 1
68589: NEG
68590: PUSH
68591: LD_INT 2
68593: PUSH
68594: EMPTY
68595: LIST
68596: LIST
68597: PUSH
68598: LD_INT 2
68600: NEG
68601: PUSH
68602: LD_INT 1
68604: PUSH
68605: EMPTY
68606: LIST
68607: LIST
68608: PUSH
68609: LD_INT 3
68611: NEG
68612: PUSH
68613: LD_INT 1
68615: NEG
68616: PUSH
68617: EMPTY
68618: LIST
68619: LIST
68620: PUSH
68621: LD_INT 3
68623: NEG
68624: PUSH
68625: LD_INT 2
68627: NEG
68628: PUSH
68629: EMPTY
68630: LIST
68631: LIST
68632: PUSH
68633: EMPTY
68634: LIST
68635: LIST
68636: LIST
68637: LIST
68638: LIST
68639: LIST
68640: LIST
68641: LIST
68642: LIST
68643: LIST
68644: LIST
68645: LIST
68646: LIST
68647: LIST
68648: LIST
68649: LIST
68650: LIST
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: LIST
68656: LIST
68657: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
68658: LD_ADDR_VAR 0 28
68662: PUSH
68663: LD_INT 0
68665: PUSH
68666: LD_INT 0
68668: PUSH
68669: EMPTY
68670: LIST
68671: LIST
68672: PUSH
68673: LD_INT 0
68675: PUSH
68676: LD_INT 1
68678: NEG
68679: PUSH
68680: EMPTY
68681: LIST
68682: LIST
68683: PUSH
68684: LD_INT 1
68686: PUSH
68687: LD_INT 0
68689: PUSH
68690: EMPTY
68691: LIST
68692: LIST
68693: PUSH
68694: LD_INT 1
68696: PUSH
68697: LD_INT 1
68699: PUSH
68700: EMPTY
68701: LIST
68702: LIST
68703: PUSH
68704: LD_INT 0
68706: PUSH
68707: LD_INT 1
68709: PUSH
68710: EMPTY
68711: LIST
68712: LIST
68713: PUSH
68714: LD_INT 1
68716: NEG
68717: PUSH
68718: LD_INT 0
68720: PUSH
68721: EMPTY
68722: LIST
68723: LIST
68724: PUSH
68725: LD_INT 1
68727: NEG
68728: PUSH
68729: LD_INT 1
68731: NEG
68732: PUSH
68733: EMPTY
68734: LIST
68735: LIST
68736: PUSH
68737: LD_INT 1
68739: NEG
68740: PUSH
68741: LD_INT 2
68743: NEG
68744: PUSH
68745: EMPTY
68746: LIST
68747: LIST
68748: PUSH
68749: LD_INT 0
68751: PUSH
68752: LD_INT 2
68754: NEG
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PUSH
68760: LD_INT 1
68762: PUSH
68763: LD_INT 1
68765: NEG
68766: PUSH
68767: EMPTY
68768: LIST
68769: LIST
68770: PUSH
68771: LD_INT 2
68773: PUSH
68774: LD_INT 0
68776: PUSH
68777: EMPTY
68778: LIST
68779: LIST
68780: PUSH
68781: LD_INT 2
68783: PUSH
68784: LD_INT 1
68786: PUSH
68787: EMPTY
68788: LIST
68789: LIST
68790: PUSH
68791: LD_INT 2
68793: PUSH
68794: LD_INT 2
68796: PUSH
68797: EMPTY
68798: LIST
68799: LIST
68800: PUSH
68801: LD_INT 1
68803: PUSH
68804: LD_INT 2
68806: PUSH
68807: EMPTY
68808: LIST
68809: LIST
68810: PUSH
68811: LD_INT 0
68813: PUSH
68814: LD_INT 2
68816: PUSH
68817: EMPTY
68818: LIST
68819: LIST
68820: PUSH
68821: LD_INT 1
68823: NEG
68824: PUSH
68825: LD_INT 1
68827: PUSH
68828: EMPTY
68829: LIST
68830: LIST
68831: PUSH
68832: LD_INT 2
68834: NEG
68835: PUSH
68836: LD_INT 0
68838: PUSH
68839: EMPTY
68840: LIST
68841: LIST
68842: PUSH
68843: LD_INT 2
68845: NEG
68846: PUSH
68847: LD_INT 1
68849: NEG
68850: PUSH
68851: EMPTY
68852: LIST
68853: LIST
68854: PUSH
68855: LD_INT 2
68857: NEG
68858: PUSH
68859: LD_INT 2
68861: NEG
68862: PUSH
68863: EMPTY
68864: LIST
68865: LIST
68866: PUSH
68867: LD_INT 2
68869: NEG
68870: PUSH
68871: LD_INT 3
68873: NEG
68874: PUSH
68875: EMPTY
68876: LIST
68877: LIST
68878: PUSH
68879: LD_INT 1
68881: NEG
68882: PUSH
68883: LD_INT 3
68885: NEG
68886: PUSH
68887: EMPTY
68888: LIST
68889: LIST
68890: PUSH
68891: LD_INT 3
68893: NEG
68894: PUSH
68895: LD_INT 1
68897: NEG
68898: PUSH
68899: EMPTY
68900: LIST
68901: LIST
68902: PUSH
68903: LD_INT 3
68905: NEG
68906: PUSH
68907: LD_INT 2
68909: NEG
68910: PUSH
68911: EMPTY
68912: LIST
68913: LIST
68914: PUSH
68915: EMPTY
68916: LIST
68917: LIST
68918: LIST
68919: LIST
68920: LIST
68921: LIST
68922: LIST
68923: LIST
68924: LIST
68925: LIST
68926: LIST
68927: LIST
68928: LIST
68929: LIST
68930: LIST
68931: LIST
68932: LIST
68933: LIST
68934: LIST
68935: LIST
68936: LIST
68937: LIST
68938: LIST
68939: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
68940: LD_ADDR_VAR 0 29
68944: PUSH
68945: LD_INT 0
68947: PUSH
68948: LD_INT 0
68950: PUSH
68951: EMPTY
68952: LIST
68953: LIST
68954: PUSH
68955: LD_INT 0
68957: PUSH
68958: LD_INT 1
68960: NEG
68961: PUSH
68962: EMPTY
68963: LIST
68964: LIST
68965: PUSH
68966: LD_INT 1
68968: PUSH
68969: LD_INT 0
68971: PUSH
68972: EMPTY
68973: LIST
68974: LIST
68975: PUSH
68976: LD_INT 1
68978: PUSH
68979: LD_INT 1
68981: PUSH
68982: EMPTY
68983: LIST
68984: LIST
68985: PUSH
68986: LD_INT 0
68988: PUSH
68989: LD_INT 1
68991: PUSH
68992: EMPTY
68993: LIST
68994: LIST
68995: PUSH
68996: LD_INT 1
68998: NEG
68999: PUSH
69000: LD_INT 0
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 1
69009: NEG
69010: PUSH
69011: LD_INT 1
69013: NEG
69014: PUSH
69015: EMPTY
69016: LIST
69017: LIST
69018: PUSH
69019: LD_INT 1
69021: NEG
69022: PUSH
69023: LD_INT 2
69025: NEG
69026: PUSH
69027: EMPTY
69028: LIST
69029: LIST
69030: PUSH
69031: LD_INT 0
69033: PUSH
69034: LD_INT 2
69036: NEG
69037: PUSH
69038: EMPTY
69039: LIST
69040: LIST
69041: PUSH
69042: LD_INT 1
69044: PUSH
69045: LD_INT 1
69047: NEG
69048: PUSH
69049: EMPTY
69050: LIST
69051: LIST
69052: PUSH
69053: LD_INT 2
69055: PUSH
69056: LD_INT 0
69058: PUSH
69059: EMPTY
69060: LIST
69061: LIST
69062: PUSH
69063: LD_INT 2
69065: PUSH
69066: LD_INT 1
69068: PUSH
69069: EMPTY
69070: LIST
69071: LIST
69072: PUSH
69073: LD_INT 1
69075: PUSH
69076: LD_INT 2
69078: PUSH
69079: EMPTY
69080: LIST
69081: LIST
69082: PUSH
69083: LD_INT 0
69085: PUSH
69086: LD_INT 2
69088: PUSH
69089: EMPTY
69090: LIST
69091: LIST
69092: PUSH
69093: LD_INT 1
69095: NEG
69096: PUSH
69097: LD_INT 1
69099: PUSH
69100: EMPTY
69101: LIST
69102: LIST
69103: PUSH
69104: LD_INT 2
69106: NEG
69107: PUSH
69108: LD_INT 1
69110: NEG
69111: PUSH
69112: EMPTY
69113: LIST
69114: LIST
69115: PUSH
69116: LD_INT 2
69118: NEG
69119: PUSH
69120: LD_INT 2
69122: NEG
69123: PUSH
69124: EMPTY
69125: LIST
69126: LIST
69127: PUSH
69128: LD_INT 2
69130: NEG
69131: PUSH
69132: LD_INT 3
69134: NEG
69135: PUSH
69136: EMPTY
69137: LIST
69138: LIST
69139: PUSH
69140: LD_INT 2
69142: PUSH
69143: LD_INT 1
69145: NEG
69146: PUSH
69147: EMPTY
69148: LIST
69149: LIST
69150: PUSH
69151: LD_INT 3
69153: PUSH
69154: LD_INT 1
69156: PUSH
69157: EMPTY
69158: LIST
69159: LIST
69160: PUSH
69161: LD_INT 1
69163: PUSH
69164: LD_INT 3
69166: PUSH
69167: EMPTY
69168: LIST
69169: LIST
69170: PUSH
69171: LD_INT 1
69173: NEG
69174: PUSH
69175: LD_INT 2
69177: PUSH
69178: EMPTY
69179: LIST
69180: LIST
69181: PUSH
69182: LD_INT 3
69184: NEG
69185: PUSH
69186: LD_INT 2
69188: NEG
69189: PUSH
69190: EMPTY
69191: LIST
69192: LIST
69193: PUSH
69194: EMPTY
69195: LIST
69196: LIST
69197: LIST
69198: LIST
69199: LIST
69200: LIST
69201: LIST
69202: LIST
69203: LIST
69204: LIST
69205: LIST
69206: LIST
69207: LIST
69208: LIST
69209: LIST
69210: LIST
69211: LIST
69212: LIST
69213: LIST
69214: LIST
69215: LIST
69216: LIST
69217: LIST
69218: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69219: LD_ADDR_VAR 0 30
69223: PUSH
69224: LD_INT 0
69226: PUSH
69227: LD_INT 0
69229: PUSH
69230: EMPTY
69231: LIST
69232: LIST
69233: PUSH
69234: LD_INT 0
69236: PUSH
69237: LD_INT 1
69239: NEG
69240: PUSH
69241: EMPTY
69242: LIST
69243: LIST
69244: PUSH
69245: LD_INT 1
69247: PUSH
69248: LD_INT 0
69250: PUSH
69251: EMPTY
69252: LIST
69253: LIST
69254: PUSH
69255: LD_INT 1
69257: PUSH
69258: LD_INT 1
69260: PUSH
69261: EMPTY
69262: LIST
69263: LIST
69264: PUSH
69265: LD_INT 0
69267: PUSH
69268: LD_INT 1
69270: PUSH
69271: EMPTY
69272: LIST
69273: LIST
69274: PUSH
69275: LD_INT 1
69277: NEG
69278: PUSH
69279: LD_INT 0
69281: PUSH
69282: EMPTY
69283: LIST
69284: LIST
69285: PUSH
69286: LD_INT 1
69288: NEG
69289: PUSH
69290: LD_INT 1
69292: NEG
69293: PUSH
69294: EMPTY
69295: LIST
69296: LIST
69297: PUSH
69298: LD_INT 1
69300: NEG
69301: PUSH
69302: LD_INT 2
69304: NEG
69305: PUSH
69306: EMPTY
69307: LIST
69308: LIST
69309: PUSH
69310: LD_INT 0
69312: PUSH
69313: LD_INT 2
69315: NEG
69316: PUSH
69317: EMPTY
69318: LIST
69319: LIST
69320: PUSH
69321: LD_INT 1
69323: PUSH
69324: LD_INT 1
69326: NEG
69327: PUSH
69328: EMPTY
69329: LIST
69330: LIST
69331: PUSH
69332: LD_INT 2
69334: PUSH
69335: LD_INT 0
69337: PUSH
69338: EMPTY
69339: LIST
69340: LIST
69341: PUSH
69342: LD_INT 2
69344: PUSH
69345: LD_INT 1
69347: PUSH
69348: EMPTY
69349: LIST
69350: LIST
69351: PUSH
69352: LD_INT 2
69354: PUSH
69355: LD_INT 2
69357: PUSH
69358: EMPTY
69359: LIST
69360: LIST
69361: PUSH
69362: LD_INT 1
69364: PUSH
69365: LD_INT 2
69367: PUSH
69368: EMPTY
69369: LIST
69370: LIST
69371: PUSH
69372: LD_INT 1
69374: NEG
69375: PUSH
69376: LD_INT 1
69378: PUSH
69379: EMPTY
69380: LIST
69381: LIST
69382: PUSH
69383: LD_INT 2
69385: NEG
69386: PUSH
69387: LD_INT 0
69389: PUSH
69390: EMPTY
69391: LIST
69392: LIST
69393: PUSH
69394: LD_INT 2
69396: NEG
69397: PUSH
69398: LD_INT 1
69400: NEG
69401: PUSH
69402: EMPTY
69403: LIST
69404: LIST
69405: PUSH
69406: LD_INT 1
69408: NEG
69409: PUSH
69410: LD_INT 3
69412: NEG
69413: PUSH
69414: EMPTY
69415: LIST
69416: LIST
69417: PUSH
69418: LD_INT 1
69420: PUSH
69421: LD_INT 2
69423: NEG
69424: PUSH
69425: EMPTY
69426: LIST
69427: LIST
69428: PUSH
69429: LD_INT 3
69431: PUSH
69432: LD_INT 2
69434: PUSH
69435: EMPTY
69436: LIST
69437: LIST
69438: PUSH
69439: LD_INT 2
69441: PUSH
69442: LD_INT 3
69444: PUSH
69445: EMPTY
69446: LIST
69447: LIST
69448: PUSH
69449: LD_INT 2
69451: NEG
69452: PUSH
69453: LD_INT 1
69455: PUSH
69456: EMPTY
69457: LIST
69458: LIST
69459: PUSH
69460: LD_INT 3
69462: NEG
69463: PUSH
69464: LD_INT 1
69466: NEG
69467: PUSH
69468: EMPTY
69469: LIST
69470: LIST
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: LIST
69476: LIST
69477: LIST
69478: LIST
69479: LIST
69480: LIST
69481: LIST
69482: LIST
69483: LIST
69484: LIST
69485: LIST
69486: LIST
69487: LIST
69488: LIST
69489: LIST
69490: LIST
69491: LIST
69492: LIST
69493: LIST
69494: LIST
69495: LIST
69496: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
69497: LD_ADDR_VAR 0 31
69501: PUSH
69502: LD_INT 0
69504: PUSH
69505: LD_INT 0
69507: PUSH
69508: EMPTY
69509: LIST
69510: LIST
69511: PUSH
69512: LD_INT 0
69514: PUSH
69515: LD_INT 1
69517: NEG
69518: PUSH
69519: EMPTY
69520: LIST
69521: LIST
69522: PUSH
69523: LD_INT 1
69525: PUSH
69526: LD_INT 0
69528: PUSH
69529: EMPTY
69530: LIST
69531: LIST
69532: PUSH
69533: LD_INT 1
69535: PUSH
69536: LD_INT 1
69538: PUSH
69539: EMPTY
69540: LIST
69541: LIST
69542: PUSH
69543: LD_INT 0
69545: PUSH
69546: LD_INT 1
69548: PUSH
69549: EMPTY
69550: LIST
69551: LIST
69552: PUSH
69553: LD_INT 1
69555: NEG
69556: PUSH
69557: LD_INT 0
69559: PUSH
69560: EMPTY
69561: LIST
69562: LIST
69563: PUSH
69564: LD_INT 1
69566: NEG
69567: PUSH
69568: LD_INT 1
69570: NEG
69571: PUSH
69572: EMPTY
69573: LIST
69574: LIST
69575: PUSH
69576: LD_INT 1
69578: NEG
69579: PUSH
69580: LD_INT 2
69582: NEG
69583: PUSH
69584: EMPTY
69585: LIST
69586: LIST
69587: PUSH
69588: LD_INT 1
69590: PUSH
69591: LD_INT 1
69593: NEG
69594: PUSH
69595: EMPTY
69596: LIST
69597: LIST
69598: PUSH
69599: LD_INT 2
69601: PUSH
69602: LD_INT 0
69604: PUSH
69605: EMPTY
69606: LIST
69607: LIST
69608: PUSH
69609: LD_INT 2
69611: PUSH
69612: LD_INT 1
69614: PUSH
69615: EMPTY
69616: LIST
69617: LIST
69618: PUSH
69619: LD_INT 2
69621: PUSH
69622: LD_INT 2
69624: PUSH
69625: EMPTY
69626: LIST
69627: LIST
69628: PUSH
69629: LD_INT 1
69631: PUSH
69632: LD_INT 2
69634: PUSH
69635: EMPTY
69636: LIST
69637: LIST
69638: PUSH
69639: LD_INT 0
69641: PUSH
69642: LD_INT 2
69644: PUSH
69645: EMPTY
69646: LIST
69647: LIST
69648: PUSH
69649: LD_INT 1
69651: NEG
69652: PUSH
69653: LD_INT 1
69655: PUSH
69656: EMPTY
69657: LIST
69658: LIST
69659: PUSH
69660: LD_INT 2
69662: NEG
69663: PUSH
69664: LD_INT 1
69666: NEG
69667: PUSH
69668: EMPTY
69669: LIST
69670: LIST
69671: PUSH
69672: LD_INT 2
69674: NEG
69675: PUSH
69676: LD_INT 2
69678: NEG
69679: PUSH
69680: EMPTY
69681: LIST
69682: LIST
69683: PUSH
69684: LD_INT 2
69686: NEG
69687: PUSH
69688: LD_INT 3
69690: NEG
69691: PUSH
69692: EMPTY
69693: LIST
69694: LIST
69695: PUSH
69696: LD_INT 2
69698: PUSH
69699: LD_INT 1
69701: NEG
69702: PUSH
69703: EMPTY
69704: LIST
69705: LIST
69706: PUSH
69707: LD_INT 3
69709: PUSH
69710: LD_INT 1
69712: PUSH
69713: EMPTY
69714: LIST
69715: LIST
69716: PUSH
69717: LD_INT 1
69719: PUSH
69720: LD_INT 3
69722: PUSH
69723: EMPTY
69724: LIST
69725: LIST
69726: PUSH
69727: LD_INT 1
69729: NEG
69730: PUSH
69731: LD_INT 2
69733: PUSH
69734: EMPTY
69735: LIST
69736: LIST
69737: PUSH
69738: LD_INT 3
69740: NEG
69741: PUSH
69742: LD_INT 2
69744: NEG
69745: PUSH
69746: EMPTY
69747: LIST
69748: LIST
69749: PUSH
69750: EMPTY
69751: LIST
69752: LIST
69753: LIST
69754: LIST
69755: LIST
69756: LIST
69757: LIST
69758: LIST
69759: LIST
69760: LIST
69761: LIST
69762: LIST
69763: LIST
69764: LIST
69765: LIST
69766: LIST
69767: LIST
69768: LIST
69769: LIST
69770: LIST
69771: LIST
69772: LIST
69773: LIST
69774: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
69775: LD_ADDR_VAR 0 32
69779: PUSH
69780: LD_INT 0
69782: PUSH
69783: LD_INT 0
69785: PUSH
69786: EMPTY
69787: LIST
69788: LIST
69789: PUSH
69790: LD_INT 0
69792: PUSH
69793: LD_INT 1
69795: NEG
69796: PUSH
69797: EMPTY
69798: LIST
69799: LIST
69800: PUSH
69801: LD_INT 1
69803: PUSH
69804: LD_INT 0
69806: PUSH
69807: EMPTY
69808: LIST
69809: LIST
69810: PUSH
69811: LD_INT 1
69813: PUSH
69814: LD_INT 1
69816: PUSH
69817: EMPTY
69818: LIST
69819: LIST
69820: PUSH
69821: LD_INT 0
69823: PUSH
69824: LD_INT 1
69826: PUSH
69827: EMPTY
69828: LIST
69829: LIST
69830: PUSH
69831: LD_INT 1
69833: NEG
69834: PUSH
69835: LD_INT 0
69837: PUSH
69838: EMPTY
69839: LIST
69840: LIST
69841: PUSH
69842: LD_INT 1
69844: NEG
69845: PUSH
69846: LD_INT 1
69848: NEG
69849: PUSH
69850: EMPTY
69851: LIST
69852: LIST
69853: PUSH
69854: LD_INT 1
69856: NEG
69857: PUSH
69858: LD_INT 2
69860: NEG
69861: PUSH
69862: EMPTY
69863: LIST
69864: LIST
69865: PUSH
69866: LD_INT 0
69868: PUSH
69869: LD_INT 2
69871: NEG
69872: PUSH
69873: EMPTY
69874: LIST
69875: LIST
69876: PUSH
69877: LD_INT 1
69879: PUSH
69880: LD_INT 1
69882: NEG
69883: PUSH
69884: EMPTY
69885: LIST
69886: LIST
69887: PUSH
69888: LD_INT 2
69890: PUSH
69891: LD_INT 1
69893: PUSH
69894: EMPTY
69895: LIST
69896: LIST
69897: PUSH
69898: LD_INT 2
69900: PUSH
69901: LD_INT 2
69903: PUSH
69904: EMPTY
69905: LIST
69906: LIST
69907: PUSH
69908: LD_INT 1
69910: PUSH
69911: LD_INT 2
69913: PUSH
69914: EMPTY
69915: LIST
69916: LIST
69917: PUSH
69918: LD_INT 0
69920: PUSH
69921: LD_INT 2
69923: PUSH
69924: EMPTY
69925: LIST
69926: LIST
69927: PUSH
69928: LD_INT 1
69930: NEG
69931: PUSH
69932: LD_INT 1
69934: PUSH
69935: EMPTY
69936: LIST
69937: LIST
69938: PUSH
69939: LD_INT 2
69941: NEG
69942: PUSH
69943: LD_INT 0
69945: PUSH
69946: EMPTY
69947: LIST
69948: LIST
69949: PUSH
69950: LD_INT 2
69952: NEG
69953: PUSH
69954: LD_INT 1
69956: NEG
69957: PUSH
69958: EMPTY
69959: LIST
69960: LIST
69961: PUSH
69962: LD_INT 1
69964: NEG
69965: PUSH
69966: LD_INT 3
69968: NEG
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: LD_INT 1
69976: PUSH
69977: LD_INT 2
69979: NEG
69980: PUSH
69981: EMPTY
69982: LIST
69983: LIST
69984: PUSH
69985: LD_INT 3
69987: PUSH
69988: LD_INT 2
69990: PUSH
69991: EMPTY
69992: LIST
69993: LIST
69994: PUSH
69995: LD_INT 2
69997: PUSH
69998: LD_INT 3
70000: PUSH
70001: EMPTY
70002: LIST
70003: LIST
70004: PUSH
70005: LD_INT 2
70007: NEG
70008: PUSH
70009: LD_INT 1
70011: PUSH
70012: EMPTY
70013: LIST
70014: LIST
70015: PUSH
70016: LD_INT 3
70018: NEG
70019: PUSH
70020: LD_INT 1
70022: NEG
70023: PUSH
70024: EMPTY
70025: LIST
70026: LIST
70027: PUSH
70028: EMPTY
70029: LIST
70030: LIST
70031: LIST
70032: LIST
70033: LIST
70034: LIST
70035: LIST
70036: LIST
70037: LIST
70038: LIST
70039: LIST
70040: LIST
70041: LIST
70042: LIST
70043: LIST
70044: LIST
70045: LIST
70046: LIST
70047: LIST
70048: LIST
70049: LIST
70050: LIST
70051: LIST
70052: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
70053: LD_ADDR_VAR 0 33
70057: PUSH
70058: LD_INT 0
70060: PUSH
70061: LD_INT 0
70063: PUSH
70064: EMPTY
70065: LIST
70066: LIST
70067: PUSH
70068: LD_INT 0
70070: PUSH
70071: LD_INT 1
70073: NEG
70074: PUSH
70075: EMPTY
70076: LIST
70077: LIST
70078: PUSH
70079: LD_INT 1
70081: PUSH
70082: LD_INT 0
70084: PUSH
70085: EMPTY
70086: LIST
70087: LIST
70088: PUSH
70089: LD_INT 1
70091: PUSH
70092: LD_INT 1
70094: PUSH
70095: EMPTY
70096: LIST
70097: LIST
70098: PUSH
70099: LD_INT 0
70101: PUSH
70102: LD_INT 1
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: PUSH
70109: LD_INT 1
70111: NEG
70112: PUSH
70113: LD_INT 0
70115: PUSH
70116: EMPTY
70117: LIST
70118: LIST
70119: PUSH
70120: LD_INT 1
70122: NEG
70123: PUSH
70124: LD_INT 1
70126: NEG
70127: PUSH
70128: EMPTY
70129: LIST
70130: LIST
70131: PUSH
70132: LD_INT 1
70134: NEG
70135: PUSH
70136: LD_INT 2
70138: NEG
70139: PUSH
70140: EMPTY
70141: LIST
70142: LIST
70143: PUSH
70144: LD_INT 1
70146: PUSH
70147: LD_INT 1
70149: NEG
70150: PUSH
70151: EMPTY
70152: LIST
70153: LIST
70154: PUSH
70155: LD_INT 2
70157: PUSH
70158: LD_INT 0
70160: PUSH
70161: EMPTY
70162: LIST
70163: LIST
70164: PUSH
70165: LD_INT 2
70167: PUSH
70168: LD_INT 1
70170: PUSH
70171: EMPTY
70172: LIST
70173: LIST
70174: PUSH
70175: LD_INT 1
70177: PUSH
70178: LD_INT 2
70180: PUSH
70181: EMPTY
70182: LIST
70183: LIST
70184: PUSH
70185: LD_INT 0
70187: PUSH
70188: LD_INT 2
70190: PUSH
70191: EMPTY
70192: LIST
70193: LIST
70194: PUSH
70195: LD_INT 1
70197: NEG
70198: PUSH
70199: LD_INT 1
70201: PUSH
70202: EMPTY
70203: LIST
70204: LIST
70205: PUSH
70206: LD_INT 2
70208: NEG
70209: PUSH
70210: LD_INT 0
70212: PUSH
70213: EMPTY
70214: LIST
70215: LIST
70216: PUSH
70217: LD_INT 2
70219: NEG
70220: PUSH
70221: LD_INT 1
70223: NEG
70224: PUSH
70225: EMPTY
70226: LIST
70227: LIST
70228: PUSH
70229: LD_INT 2
70231: NEG
70232: PUSH
70233: LD_INT 2
70235: NEG
70236: PUSH
70237: EMPTY
70238: LIST
70239: LIST
70240: PUSH
70241: LD_INT 2
70243: NEG
70244: PUSH
70245: LD_INT 3
70247: NEG
70248: PUSH
70249: EMPTY
70250: LIST
70251: LIST
70252: PUSH
70253: LD_INT 2
70255: PUSH
70256: LD_INT 1
70258: NEG
70259: PUSH
70260: EMPTY
70261: LIST
70262: LIST
70263: PUSH
70264: LD_INT 3
70266: PUSH
70267: LD_INT 1
70269: PUSH
70270: EMPTY
70271: LIST
70272: LIST
70273: PUSH
70274: LD_INT 1
70276: PUSH
70277: LD_INT 3
70279: PUSH
70280: EMPTY
70281: LIST
70282: LIST
70283: PUSH
70284: LD_INT 1
70286: NEG
70287: PUSH
70288: LD_INT 2
70290: PUSH
70291: EMPTY
70292: LIST
70293: LIST
70294: PUSH
70295: LD_INT 3
70297: NEG
70298: PUSH
70299: LD_INT 2
70301: NEG
70302: PUSH
70303: EMPTY
70304: LIST
70305: LIST
70306: PUSH
70307: EMPTY
70308: LIST
70309: LIST
70310: LIST
70311: LIST
70312: LIST
70313: LIST
70314: LIST
70315: LIST
70316: LIST
70317: LIST
70318: LIST
70319: LIST
70320: LIST
70321: LIST
70322: LIST
70323: LIST
70324: LIST
70325: LIST
70326: LIST
70327: LIST
70328: LIST
70329: LIST
70330: LIST
70331: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
70332: LD_ADDR_VAR 0 34
70336: PUSH
70337: LD_INT 0
70339: PUSH
70340: LD_INT 0
70342: PUSH
70343: EMPTY
70344: LIST
70345: LIST
70346: PUSH
70347: LD_INT 0
70349: PUSH
70350: LD_INT 1
70352: NEG
70353: PUSH
70354: EMPTY
70355: LIST
70356: LIST
70357: PUSH
70358: LD_INT 1
70360: PUSH
70361: LD_INT 0
70363: PUSH
70364: EMPTY
70365: LIST
70366: LIST
70367: PUSH
70368: LD_INT 1
70370: PUSH
70371: LD_INT 1
70373: PUSH
70374: EMPTY
70375: LIST
70376: LIST
70377: PUSH
70378: LD_INT 0
70380: PUSH
70381: LD_INT 1
70383: PUSH
70384: EMPTY
70385: LIST
70386: LIST
70387: PUSH
70388: LD_INT 1
70390: NEG
70391: PUSH
70392: LD_INT 0
70394: PUSH
70395: EMPTY
70396: LIST
70397: LIST
70398: PUSH
70399: LD_INT 1
70401: NEG
70402: PUSH
70403: LD_INT 1
70405: NEG
70406: PUSH
70407: EMPTY
70408: LIST
70409: LIST
70410: PUSH
70411: LD_INT 1
70413: NEG
70414: PUSH
70415: LD_INT 2
70417: NEG
70418: PUSH
70419: EMPTY
70420: LIST
70421: LIST
70422: PUSH
70423: LD_INT 0
70425: PUSH
70426: LD_INT 2
70428: NEG
70429: PUSH
70430: EMPTY
70431: LIST
70432: LIST
70433: PUSH
70434: LD_INT 1
70436: PUSH
70437: LD_INT 1
70439: NEG
70440: PUSH
70441: EMPTY
70442: LIST
70443: LIST
70444: PUSH
70445: LD_INT 2
70447: PUSH
70448: LD_INT 1
70450: PUSH
70451: EMPTY
70452: LIST
70453: LIST
70454: PUSH
70455: LD_INT 2
70457: PUSH
70458: LD_INT 2
70460: PUSH
70461: EMPTY
70462: LIST
70463: LIST
70464: PUSH
70465: LD_INT 1
70467: PUSH
70468: LD_INT 2
70470: PUSH
70471: EMPTY
70472: LIST
70473: LIST
70474: PUSH
70475: LD_INT 1
70477: NEG
70478: PUSH
70479: LD_INT 1
70481: PUSH
70482: EMPTY
70483: LIST
70484: LIST
70485: PUSH
70486: LD_INT 2
70488: NEG
70489: PUSH
70490: LD_INT 0
70492: PUSH
70493: EMPTY
70494: LIST
70495: LIST
70496: PUSH
70497: LD_INT 2
70499: NEG
70500: PUSH
70501: LD_INT 1
70503: NEG
70504: PUSH
70505: EMPTY
70506: LIST
70507: LIST
70508: PUSH
70509: LD_INT 2
70511: NEG
70512: PUSH
70513: LD_INT 2
70515: NEG
70516: PUSH
70517: EMPTY
70518: LIST
70519: LIST
70520: PUSH
70521: LD_INT 1
70523: NEG
70524: PUSH
70525: LD_INT 3
70527: NEG
70528: PUSH
70529: EMPTY
70530: LIST
70531: LIST
70532: PUSH
70533: LD_INT 1
70535: PUSH
70536: LD_INT 2
70538: NEG
70539: PUSH
70540: EMPTY
70541: LIST
70542: LIST
70543: PUSH
70544: LD_INT 3
70546: PUSH
70547: LD_INT 2
70549: PUSH
70550: EMPTY
70551: LIST
70552: LIST
70553: PUSH
70554: LD_INT 2
70556: PUSH
70557: LD_INT 3
70559: PUSH
70560: EMPTY
70561: LIST
70562: LIST
70563: PUSH
70564: LD_INT 2
70566: NEG
70567: PUSH
70568: LD_INT 1
70570: PUSH
70571: EMPTY
70572: LIST
70573: LIST
70574: PUSH
70575: LD_INT 3
70577: NEG
70578: PUSH
70579: LD_INT 1
70581: NEG
70582: PUSH
70583: EMPTY
70584: LIST
70585: LIST
70586: PUSH
70587: EMPTY
70588: LIST
70589: LIST
70590: LIST
70591: LIST
70592: LIST
70593: LIST
70594: LIST
70595: LIST
70596: LIST
70597: LIST
70598: LIST
70599: LIST
70600: LIST
70601: LIST
70602: LIST
70603: LIST
70604: LIST
70605: LIST
70606: LIST
70607: LIST
70608: LIST
70609: LIST
70610: LIST
70611: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
70612: LD_ADDR_VAR 0 35
70616: PUSH
70617: LD_INT 0
70619: PUSH
70620: LD_INT 0
70622: PUSH
70623: EMPTY
70624: LIST
70625: LIST
70626: PUSH
70627: LD_INT 0
70629: PUSH
70630: LD_INT 1
70632: NEG
70633: PUSH
70634: EMPTY
70635: LIST
70636: LIST
70637: PUSH
70638: LD_INT 1
70640: PUSH
70641: LD_INT 0
70643: PUSH
70644: EMPTY
70645: LIST
70646: LIST
70647: PUSH
70648: LD_INT 1
70650: PUSH
70651: LD_INT 1
70653: PUSH
70654: EMPTY
70655: LIST
70656: LIST
70657: PUSH
70658: LD_INT 0
70660: PUSH
70661: LD_INT 1
70663: PUSH
70664: EMPTY
70665: LIST
70666: LIST
70667: PUSH
70668: LD_INT 1
70670: NEG
70671: PUSH
70672: LD_INT 0
70674: PUSH
70675: EMPTY
70676: LIST
70677: LIST
70678: PUSH
70679: LD_INT 1
70681: NEG
70682: PUSH
70683: LD_INT 1
70685: NEG
70686: PUSH
70687: EMPTY
70688: LIST
70689: LIST
70690: PUSH
70691: LD_INT 2
70693: PUSH
70694: LD_INT 1
70696: PUSH
70697: EMPTY
70698: LIST
70699: LIST
70700: PUSH
70701: LD_INT 2
70703: NEG
70704: PUSH
70705: LD_INT 1
70707: NEG
70708: PUSH
70709: EMPTY
70710: LIST
70711: LIST
70712: PUSH
70713: EMPTY
70714: LIST
70715: LIST
70716: LIST
70717: LIST
70718: LIST
70719: LIST
70720: LIST
70721: LIST
70722: LIST
70723: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
70724: LD_ADDR_VAR 0 36
70728: PUSH
70729: LD_INT 0
70731: PUSH
70732: LD_INT 0
70734: PUSH
70735: EMPTY
70736: LIST
70737: LIST
70738: PUSH
70739: LD_INT 0
70741: PUSH
70742: LD_INT 1
70744: NEG
70745: PUSH
70746: EMPTY
70747: LIST
70748: LIST
70749: PUSH
70750: LD_INT 1
70752: PUSH
70753: LD_INT 0
70755: PUSH
70756: EMPTY
70757: LIST
70758: LIST
70759: PUSH
70760: LD_INT 1
70762: PUSH
70763: LD_INT 1
70765: PUSH
70766: EMPTY
70767: LIST
70768: LIST
70769: PUSH
70770: LD_INT 0
70772: PUSH
70773: LD_INT 1
70775: PUSH
70776: EMPTY
70777: LIST
70778: LIST
70779: PUSH
70780: LD_INT 1
70782: NEG
70783: PUSH
70784: LD_INT 0
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 1
70793: NEG
70794: PUSH
70795: LD_INT 1
70797: NEG
70798: PUSH
70799: EMPTY
70800: LIST
70801: LIST
70802: PUSH
70803: LD_INT 1
70805: NEG
70806: PUSH
70807: LD_INT 2
70809: NEG
70810: PUSH
70811: EMPTY
70812: LIST
70813: LIST
70814: PUSH
70815: LD_INT 1
70817: PUSH
70818: LD_INT 2
70820: PUSH
70821: EMPTY
70822: LIST
70823: LIST
70824: PUSH
70825: EMPTY
70826: LIST
70827: LIST
70828: LIST
70829: LIST
70830: LIST
70831: LIST
70832: LIST
70833: LIST
70834: LIST
70835: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
70836: LD_ADDR_VAR 0 37
70840: PUSH
70841: LD_INT 0
70843: PUSH
70844: LD_INT 0
70846: PUSH
70847: EMPTY
70848: LIST
70849: LIST
70850: PUSH
70851: LD_INT 0
70853: PUSH
70854: LD_INT 1
70856: NEG
70857: PUSH
70858: EMPTY
70859: LIST
70860: LIST
70861: PUSH
70862: LD_INT 1
70864: PUSH
70865: LD_INT 0
70867: PUSH
70868: EMPTY
70869: LIST
70870: LIST
70871: PUSH
70872: LD_INT 1
70874: PUSH
70875: LD_INT 1
70877: PUSH
70878: EMPTY
70879: LIST
70880: LIST
70881: PUSH
70882: LD_INT 0
70884: PUSH
70885: LD_INT 1
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: PUSH
70892: LD_INT 1
70894: NEG
70895: PUSH
70896: LD_INT 0
70898: PUSH
70899: EMPTY
70900: LIST
70901: LIST
70902: PUSH
70903: LD_INT 1
70905: NEG
70906: PUSH
70907: LD_INT 1
70909: NEG
70910: PUSH
70911: EMPTY
70912: LIST
70913: LIST
70914: PUSH
70915: LD_INT 1
70917: PUSH
70918: LD_INT 1
70920: NEG
70921: PUSH
70922: EMPTY
70923: LIST
70924: LIST
70925: PUSH
70926: LD_INT 1
70928: NEG
70929: PUSH
70930: LD_INT 1
70932: PUSH
70933: EMPTY
70934: LIST
70935: LIST
70936: PUSH
70937: EMPTY
70938: LIST
70939: LIST
70940: LIST
70941: LIST
70942: LIST
70943: LIST
70944: LIST
70945: LIST
70946: LIST
70947: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
70948: LD_ADDR_VAR 0 38
70952: PUSH
70953: LD_INT 0
70955: PUSH
70956: LD_INT 0
70958: PUSH
70959: EMPTY
70960: LIST
70961: LIST
70962: PUSH
70963: LD_INT 0
70965: PUSH
70966: LD_INT 1
70968: NEG
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: PUSH
70974: LD_INT 1
70976: PUSH
70977: LD_INT 0
70979: PUSH
70980: EMPTY
70981: LIST
70982: LIST
70983: PUSH
70984: LD_INT 1
70986: PUSH
70987: LD_INT 1
70989: PUSH
70990: EMPTY
70991: LIST
70992: LIST
70993: PUSH
70994: LD_INT 0
70996: PUSH
70997: LD_INT 1
70999: PUSH
71000: EMPTY
71001: LIST
71002: LIST
71003: PUSH
71004: LD_INT 1
71006: NEG
71007: PUSH
71008: LD_INT 0
71010: PUSH
71011: EMPTY
71012: LIST
71013: LIST
71014: PUSH
71015: LD_INT 1
71017: NEG
71018: PUSH
71019: LD_INT 1
71021: NEG
71022: PUSH
71023: EMPTY
71024: LIST
71025: LIST
71026: PUSH
71027: LD_INT 2
71029: PUSH
71030: LD_INT 1
71032: PUSH
71033: EMPTY
71034: LIST
71035: LIST
71036: PUSH
71037: LD_INT 2
71039: NEG
71040: PUSH
71041: LD_INT 1
71043: NEG
71044: PUSH
71045: EMPTY
71046: LIST
71047: LIST
71048: PUSH
71049: EMPTY
71050: LIST
71051: LIST
71052: LIST
71053: LIST
71054: LIST
71055: LIST
71056: LIST
71057: LIST
71058: LIST
71059: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
71060: LD_ADDR_VAR 0 39
71064: PUSH
71065: LD_INT 0
71067: PUSH
71068: LD_INT 0
71070: PUSH
71071: EMPTY
71072: LIST
71073: LIST
71074: PUSH
71075: LD_INT 0
71077: PUSH
71078: LD_INT 1
71080: NEG
71081: PUSH
71082: EMPTY
71083: LIST
71084: LIST
71085: PUSH
71086: LD_INT 1
71088: PUSH
71089: LD_INT 0
71091: PUSH
71092: EMPTY
71093: LIST
71094: LIST
71095: PUSH
71096: LD_INT 1
71098: PUSH
71099: LD_INT 1
71101: PUSH
71102: EMPTY
71103: LIST
71104: LIST
71105: PUSH
71106: LD_INT 0
71108: PUSH
71109: LD_INT 1
71111: PUSH
71112: EMPTY
71113: LIST
71114: LIST
71115: PUSH
71116: LD_INT 1
71118: NEG
71119: PUSH
71120: LD_INT 0
71122: PUSH
71123: EMPTY
71124: LIST
71125: LIST
71126: PUSH
71127: LD_INT 1
71129: NEG
71130: PUSH
71131: LD_INT 1
71133: NEG
71134: PUSH
71135: EMPTY
71136: LIST
71137: LIST
71138: PUSH
71139: LD_INT 1
71141: NEG
71142: PUSH
71143: LD_INT 2
71145: NEG
71146: PUSH
71147: EMPTY
71148: LIST
71149: LIST
71150: PUSH
71151: LD_INT 1
71153: PUSH
71154: LD_INT 2
71156: PUSH
71157: EMPTY
71158: LIST
71159: LIST
71160: PUSH
71161: EMPTY
71162: LIST
71163: LIST
71164: LIST
71165: LIST
71166: LIST
71167: LIST
71168: LIST
71169: LIST
71170: LIST
71171: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
71172: LD_ADDR_VAR 0 40
71176: PUSH
71177: LD_INT 0
71179: PUSH
71180: LD_INT 0
71182: PUSH
71183: EMPTY
71184: LIST
71185: LIST
71186: PUSH
71187: LD_INT 0
71189: PUSH
71190: LD_INT 1
71192: NEG
71193: PUSH
71194: EMPTY
71195: LIST
71196: LIST
71197: PUSH
71198: LD_INT 1
71200: PUSH
71201: LD_INT 0
71203: PUSH
71204: EMPTY
71205: LIST
71206: LIST
71207: PUSH
71208: LD_INT 1
71210: PUSH
71211: LD_INT 1
71213: PUSH
71214: EMPTY
71215: LIST
71216: LIST
71217: PUSH
71218: LD_INT 0
71220: PUSH
71221: LD_INT 1
71223: PUSH
71224: EMPTY
71225: LIST
71226: LIST
71227: PUSH
71228: LD_INT 1
71230: NEG
71231: PUSH
71232: LD_INT 0
71234: PUSH
71235: EMPTY
71236: LIST
71237: LIST
71238: PUSH
71239: LD_INT 1
71241: NEG
71242: PUSH
71243: LD_INT 1
71245: NEG
71246: PUSH
71247: EMPTY
71248: LIST
71249: LIST
71250: PUSH
71251: LD_INT 1
71253: PUSH
71254: LD_INT 1
71256: NEG
71257: PUSH
71258: EMPTY
71259: LIST
71260: LIST
71261: PUSH
71262: LD_INT 1
71264: NEG
71265: PUSH
71266: LD_INT 1
71268: PUSH
71269: EMPTY
71270: LIST
71271: LIST
71272: PUSH
71273: EMPTY
71274: LIST
71275: LIST
71276: LIST
71277: LIST
71278: LIST
71279: LIST
71280: LIST
71281: LIST
71282: LIST
71283: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71284: LD_ADDR_VAR 0 41
71288: PUSH
71289: LD_INT 0
71291: PUSH
71292: LD_INT 0
71294: PUSH
71295: EMPTY
71296: LIST
71297: LIST
71298: PUSH
71299: LD_INT 0
71301: PUSH
71302: LD_INT 1
71304: NEG
71305: PUSH
71306: EMPTY
71307: LIST
71308: LIST
71309: PUSH
71310: LD_INT 1
71312: PUSH
71313: LD_INT 0
71315: PUSH
71316: EMPTY
71317: LIST
71318: LIST
71319: PUSH
71320: LD_INT 1
71322: PUSH
71323: LD_INT 1
71325: PUSH
71326: EMPTY
71327: LIST
71328: LIST
71329: PUSH
71330: LD_INT 0
71332: PUSH
71333: LD_INT 1
71335: PUSH
71336: EMPTY
71337: LIST
71338: LIST
71339: PUSH
71340: LD_INT 1
71342: NEG
71343: PUSH
71344: LD_INT 0
71346: PUSH
71347: EMPTY
71348: LIST
71349: LIST
71350: PUSH
71351: LD_INT 1
71353: NEG
71354: PUSH
71355: LD_INT 1
71357: NEG
71358: PUSH
71359: EMPTY
71360: LIST
71361: LIST
71362: PUSH
71363: LD_INT 1
71365: NEG
71366: PUSH
71367: LD_INT 2
71369: NEG
71370: PUSH
71371: EMPTY
71372: LIST
71373: LIST
71374: PUSH
71375: LD_INT 1
71377: PUSH
71378: LD_INT 1
71380: NEG
71381: PUSH
71382: EMPTY
71383: LIST
71384: LIST
71385: PUSH
71386: LD_INT 2
71388: PUSH
71389: LD_INT 0
71391: PUSH
71392: EMPTY
71393: LIST
71394: LIST
71395: PUSH
71396: LD_INT 2
71398: PUSH
71399: LD_INT 1
71401: PUSH
71402: EMPTY
71403: LIST
71404: LIST
71405: PUSH
71406: LD_INT 2
71408: PUSH
71409: LD_INT 2
71411: PUSH
71412: EMPTY
71413: LIST
71414: LIST
71415: PUSH
71416: LD_INT 1
71418: PUSH
71419: LD_INT 2
71421: PUSH
71422: EMPTY
71423: LIST
71424: LIST
71425: PUSH
71426: LD_INT 1
71428: NEG
71429: PUSH
71430: LD_INT 1
71432: PUSH
71433: EMPTY
71434: LIST
71435: LIST
71436: PUSH
71437: LD_INT 2
71439: NEG
71440: PUSH
71441: LD_INT 0
71443: PUSH
71444: EMPTY
71445: LIST
71446: LIST
71447: PUSH
71448: LD_INT 2
71450: NEG
71451: PUSH
71452: LD_INT 1
71454: NEG
71455: PUSH
71456: EMPTY
71457: LIST
71458: LIST
71459: PUSH
71460: LD_INT 2
71462: NEG
71463: PUSH
71464: LD_INT 2
71466: NEG
71467: PUSH
71468: EMPTY
71469: LIST
71470: LIST
71471: PUSH
71472: LD_INT 2
71474: NEG
71475: PUSH
71476: LD_INT 3
71478: NEG
71479: PUSH
71480: EMPTY
71481: LIST
71482: LIST
71483: PUSH
71484: LD_INT 2
71486: PUSH
71487: LD_INT 1
71489: NEG
71490: PUSH
71491: EMPTY
71492: LIST
71493: LIST
71494: PUSH
71495: LD_INT 3
71497: PUSH
71498: LD_INT 0
71500: PUSH
71501: EMPTY
71502: LIST
71503: LIST
71504: PUSH
71505: LD_INT 3
71507: PUSH
71508: LD_INT 1
71510: PUSH
71511: EMPTY
71512: LIST
71513: LIST
71514: PUSH
71515: LD_INT 3
71517: PUSH
71518: LD_INT 2
71520: PUSH
71521: EMPTY
71522: LIST
71523: LIST
71524: PUSH
71525: LD_INT 3
71527: PUSH
71528: LD_INT 3
71530: PUSH
71531: EMPTY
71532: LIST
71533: LIST
71534: PUSH
71535: LD_INT 2
71537: PUSH
71538: LD_INT 3
71540: PUSH
71541: EMPTY
71542: LIST
71543: LIST
71544: PUSH
71545: LD_INT 2
71547: NEG
71548: PUSH
71549: LD_INT 1
71551: PUSH
71552: EMPTY
71553: LIST
71554: LIST
71555: PUSH
71556: LD_INT 3
71558: NEG
71559: PUSH
71560: LD_INT 0
71562: PUSH
71563: EMPTY
71564: LIST
71565: LIST
71566: PUSH
71567: LD_INT 3
71569: NEG
71570: PUSH
71571: LD_INT 1
71573: NEG
71574: PUSH
71575: EMPTY
71576: LIST
71577: LIST
71578: PUSH
71579: LD_INT 3
71581: NEG
71582: PUSH
71583: LD_INT 2
71585: NEG
71586: PUSH
71587: EMPTY
71588: LIST
71589: LIST
71590: PUSH
71591: LD_INT 3
71593: NEG
71594: PUSH
71595: LD_INT 3
71597: NEG
71598: PUSH
71599: EMPTY
71600: LIST
71601: LIST
71602: PUSH
71603: EMPTY
71604: LIST
71605: LIST
71606: LIST
71607: LIST
71608: LIST
71609: LIST
71610: LIST
71611: LIST
71612: LIST
71613: LIST
71614: LIST
71615: LIST
71616: LIST
71617: LIST
71618: LIST
71619: LIST
71620: LIST
71621: LIST
71622: LIST
71623: LIST
71624: LIST
71625: LIST
71626: LIST
71627: LIST
71628: LIST
71629: LIST
71630: LIST
71631: LIST
71632: LIST
71633: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
71634: LD_ADDR_VAR 0 42
71638: PUSH
71639: LD_INT 0
71641: PUSH
71642: LD_INT 0
71644: PUSH
71645: EMPTY
71646: LIST
71647: LIST
71648: PUSH
71649: LD_INT 0
71651: PUSH
71652: LD_INT 1
71654: NEG
71655: PUSH
71656: EMPTY
71657: LIST
71658: LIST
71659: PUSH
71660: LD_INT 1
71662: PUSH
71663: LD_INT 0
71665: PUSH
71666: EMPTY
71667: LIST
71668: LIST
71669: PUSH
71670: LD_INT 1
71672: PUSH
71673: LD_INT 1
71675: PUSH
71676: EMPTY
71677: LIST
71678: LIST
71679: PUSH
71680: LD_INT 0
71682: PUSH
71683: LD_INT 1
71685: PUSH
71686: EMPTY
71687: LIST
71688: LIST
71689: PUSH
71690: LD_INT 1
71692: NEG
71693: PUSH
71694: LD_INT 0
71696: PUSH
71697: EMPTY
71698: LIST
71699: LIST
71700: PUSH
71701: LD_INT 1
71703: NEG
71704: PUSH
71705: LD_INT 1
71707: NEG
71708: PUSH
71709: EMPTY
71710: LIST
71711: LIST
71712: PUSH
71713: LD_INT 1
71715: NEG
71716: PUSH
71717: LD_INT 2
71719: NEG
71720: PUSH
71721: EMPTY
71722: LIST
71723: LIST
71724: PUSH
71725: LD_INT 0
71727: PUSH
71728: LD_INT 2
71730: NEG
71731: PUSH
71732: EMPTY
71733: LIST
71734: LIST
71735: PUSH
71736: LD_INT 1
71738: PUSH
71739: LD_INT 1
71741: NEG
71742: PUSH
71743: EMPTY
71744: LIST
71745: LIST
71746: PUSH
71747: LD_INT 2
71749: PUSH
71750: LD_INT 1
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: PUSH
71757: LD_INT 2
71759: PUSH
71760: LD_INT 2
71762: PUSH
71763: EMPTY
71764: LIST
71765: LIST
71766: PUSH
71767: LD_INT 1
71769: PUSH
71770: LD_INT 2
71772: PUSH
71773: EMPTY
71774: LIST
71775: LIST
71776: PUSH
71777: LD_INT 0
71779: PUSH
71780: LD_INT 2
71782: PUSH
71783: EMPTY
71784: LIST
71785: LIST
71786: PUSH
71787: LD_INT 1
71789: NEG
71790: PUSH
71791: LD_INT 1
71793: PUSH
71794: EMPTY
71795: LIST
71796: LIST
71797: PUSH
71798: LD_INT 2
71800: NEG
71801: PUSH
71802: LD_INT 1
71804: NEG
71805: PUSH
71806: EMPTY
71807: LIST
71808: LIST
71809: PUSH
71810: LD_INT 2
71812: NEG
71813: PUSH
71814: LD_INT 2
71816: NEG
71817: PUSH
71818: EMPTY
71819: LIST
71820: LIST
71821: PUSH
71822: LD_INT 2
71824: NEG
71825: PUSH
71826: LD_INT 3
71828: NEG
71829: PUSH
71830: EMPTY
71831: LIST
71832: LIST
71833: PUSH
71834: LD_INT 1
71836: NEG
71837: PUSH
71838: LD_INT 3
71840: NEG
71841: PUSH
71842: EMPTY
71843: LIST
71844: LIST
71845: PUSH
71846: LD_INT 0
71848: PUSH
71849: LD_INT 3
71851: NEG
71852: PUSH
71853: EMPTY
71854: LIST
71855: LIST
71856: PUSH
71857: LD_INT 1
71859: PUSH
71860: LD_INT 2
71862: NEG
71863: PUSH
71864: EMPTY
71865: LIST
71866: LIST
71867: PUSH
71868: LD_INT 3
71870: PUSH
71871: LD_INT 2
71873: PUSH
71874: EMPTY
71875: LIST
71876: LIST
71877: PUSH
71878: LD_INT 3
71880: PUSH
71881: LD_INT 3
71883: PUSH
71884: EMPTY
71885: LIST
71886: LIST
71887: PUSH
71888: LD_INT 2
71890: PUSH
71891: LD_INT 3
71893: PUSH
71894: EMPTY
71895: LIST
71896: LIST
71897: PUSH
71898: LD_INT 1
71900: PUSH
71901: LD_INT 3
71903: PUSH
71904: EMPTY
71905: LIST
71906: LIST
71907: PUSH
71908: LD_INT 0
71910: PUSH
71911: LD_INT 3
71913: PUSH
71914: EMPTY
71915: LIST
71916: LIST
71917: PUSH
71918: LD_INT 1
71920: NEG
71921: PUSH
71922: LD_INT 2
71924: PUSH
71925: EMPTY
71926: LIST
71927: LIST
71928: PUSH
71929: LD_INT 3
71931: NEG
71932: PUSH
71933: LD_INT 2
71935: NEG
71936: PUSH
71937: EMPTY
71938: LIST
71939: LIST
71940: PUSH
71941: LD_INT 3
71943: NEG
71944: PUSH
71945: LD_INT 3
71947: NEG
71948: PUSH
71949: EMPTY
71950: LIST
71951: LIST
71952: PUSH
71953: EMPTY
71954: LIST
71955: LIST
71956: LIST
71957: LIST
71958: LIST
71959: LIST
71960: LIST
71961: LIST
71962: LIST
71963: LIST
71964: LIST
71965: LIST
71966: LIST
71967: LIST
71968: LIST
71969: LIST
71970: LIST
71971: LIST
71972: LIST
71973: LIST
71974: LIST
71975: LIST
71976: LIST
71977: LIST
71978: LIST
71979: LIST
71980: LIST
71981: LIST
71982: LIST
71983: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
71984: LD_ADDR_VAR 0 43
71988: PUSH
71989: LD_INT 0
71991: PUSH
71992: LD_INT 0
71994: PUSH
71995: EMPTY
71996: LIST
71997: LIST
71998: PUSH
71999: LD_INT 0
72001: PUSH
72002: LD_INT 1
72004: NEG
72005: PUSH
72006: EMPTY
72007: LIST
72008: LIST
72009: PUSH
72010: LD_INT 1
72012: PUSH
72013: LD_INT 0
72015: PUSH
72016: EMPTY
72017: LIST
72018: LIST
72019: PUSH
72020: LD_INT 1
72022: PUSH
72023: LD_INT 1
72025: PUSH
72026: EMPTY
72027: LIST
72028: LIST
72029: PUSH
72030: LD_INT 0
72032: PUSH
72033: LD_INT 1
72035: PUSH
72036: EMPTY
72037: LIST
72038: LIST
72039: PUSH
72040: LD_INT 1
72042: NEG
72043: PUSH
72044: LD_INT 0
72046: PUSH
72047: EMPTY
72048: LIST
72049: LIST
72050: PUSH
72051: LD_INT 1
72053: NEG
72054: PUSH
72055: LD_INT 1
72057: NEG
72058: PUSH
72059: EMPTY
72060: LIST
72061: LIST
72062: PUSH
72063: LD_INT 1
72065: NEG
72066: PUSH
72067: LD_INT 2
72069: NEG
72070: PUSH
72071: EMPTY
72072: LIST
72073: LIST
72074: PUSH
72075: LD_INT 0
72077: PUSH
72078: LD_INT 2
72080: NEG
72081: PUSH
72082: EMPTY
72083: LIST
72084: LIST
72085: PUSH
72086: LD_INT 1
72088: PUSH
72089: LD_INT 1
72091: NEG
72092: PUSH
72093: EMPTY
72094: LIST
72095: LIST
72096: PUSH
72097: LD_INT 2
72099: PUSH
72100: LD_INT 0
72102: PUSH
72103: EMPTY
72104: LIST
72105: LIST
72106: PUSH
72107: LD_INT 2
72109: PUSH
72110: LD_INT 1
72112: PUSH
72113: EMPTY
72114: LIST
72115: LIST
72116: PUSH
72117: LD_INT 1
72119: PUSH
72120: LD_INT 2
72122: PUSH
72123: EMPTY
72124: LIST
72125: LIST
72126: PUSH
72127: LD_INT 0
72129: PUSH
72130: LD_INT 2
72132: PUSH
72133: EMPTY
72134: LIST
72135: LIST
72136: PUSH
72137: LD_INT 1
72139: NEG
72140: PUSH
72141: LD_INT 1
72143: PUSH
72144: EMPTY
72145: LIST
72146: LIST
72147: PUSH
72148: LD_INT 2
72150: NEG
72151: PUSH
72152: LD_INT 0
72154: PUSH
72155: EMPTY
72156: LIST
72157: LIST
72158: PUSH
72159: LD_INT 2
72161: NEG
72162: PUSH
72163: LD_INT 1
72165: NEG
72166: PUSH
72167: EMPTY
72168: LIST
72169: LIST
72170: PUSH
72171: LD_INT 1
72173: NEG
72174: PUSH
72175: LD_INT 3
72177: NEG
72178: PUSH
72179: EMPTY
72180: LIST
72181: LIST
72182: PUSH
72183: LD_INT 0
72185: PUSH
72186: LD_INT 3
72188: NEG
72189: PUSH
72190: EMPTY
72191: LIST
72192: LIST
72193: PUSH
72194: LD_INT 1
72196: PUSH
72197: LD_INT 2
72199: NEG
72200: PUSH
72201: EMPTY
72202: LIST
72203: LIST
72204: PUSH
72205: LD_INT 2
72207: PUSH
72208: LD_INT 1
72210: NEG
72211: PUSH
72212: EMPTY
72213: LIST
72214: LIST
72215: PUSH
72216: LD_INT 3
72218: PUSH
72219: LD_INT 0
72221: PUSH
72222: EMPTY
72223: LIST
72224: LIST
72225: PUSH
72226: LD_INT 3
72228: PUSH
72229: LD_INT 1
72231: PUSH
72232: EMPTY
72233: LIST
72234: LIST
72235: PUSH
72236: LD_INT 1
72238: PUSH
72239: LD_INT 3
72241: PUSH
72242: EMPTY
72243: LIST
72244: LIST
72245: PUSH
72246: LD_INT 0
72248: PUSH
72249: LD_INT 3
72251: PUSH
72252: EMPTY
72253: LIST
72254: LIST
72255: PUSH
72256: LD_INT 1
72258: NEG
72259: PUSH
72260: LD_INT 2
72262: PUSH
72263: EMPTY
72264: LIST
72265: LIST
72266: PUSH
72267: LD_INT 2
72269: NEG
72270: PUSH
72271: LD_INT 1
72273: PUSH
72274: EMPTY
72275: LIST
72276: LIST
72277: PUSH
72278: LD_INT 3
72280: NEG
72281: PUSH
72282: LD_INT 0
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: PUSH
72289: LD_INT 3
72291: NEG
72292: PUSH
72293: LD_INT 1
72295: NEG
72296: PUSH
72297: EMPTY
72298: LIST
72299: LIST
72300: PUSH
72301: EMPTY
72302: LIST
72303: LIST
72304: LIST
72305: LIST
72306: LIST
72307: LIST
72308: LIST
72309: LIST
72310: LIST
72311: LIST
72312: LIST
72313: LIST
72314: LIST
72315: LIST
72316: LIST
72317: LIST
72318: LIST
72319: LIST
72320: LIST
72321: LIST
72322: LIST
72323: LIST
72324: LIST
72325: LIST
72326: LIST
72327: LIST
72328: LIST
72329: LIST
72330: LIST
72331: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72332: LD_ADDR_VAR 0 44
72336: PUSH
72337: LD_INT 0
72339: PUSH
72340: LD_INT 0
72342: PUSH
72343: EMPTY
72344: LIST
72345: LIST
72346: PUSH
72347: LD_INT 0
72349: PUSH
72350: LD_INT 1
72352: NEG
72353: PUSH
72354: EMPTY
72355: LIST
72356: LIST
72357: PUSH
72358: LD_INT 1
72360: PUSH
72361: LD_INT 0
72363: PUSH
72364: EMPTY
72365: LIST
72366: LIST
72367: PUSH
72368: LD_INT 1
72370: PUSH
72371: LD_INT 1
72373: PUSH
72374: EMPTY
72375: LIST
72376: LIST
72377: PUSH
72378: LD_INT 0
72380: PUSH
72381: LD_INT 1
72383: PUSH
72384: EMPTY
72385: LIST
72386: LIST
72387: PUSH
72388: LD_INT 1
72390: NEG
72391: PUSH
72392: LD_INT 0
72394: PUSH
72395: EMPTY
72396: LIST
72397: LIST
72398: PUSH
72399: LD_INT 1
72401: NEG
72402: PUSH
72403: LD_INT 1
72405: NEG
72406: PUSH
72407: EMPTY
72408: LIST
72409: LIST
72410: PUSH
72411: LD_INT 1
72413: NEG
72414: PUSH
72415: LD_INT 2
72417: NEG
72418: PUSH
72419: EMPTY
72420: LIST
72421: LIST
72422: PUSH
72423: LD_INT 1
72425: PUSH
72426: LD_INT 1
72428: NEG
72429: PUSH
72430: EMPTY
72431: LIST
72432: LIST
72433: PUSH
72434: LD_INT 2
72436: PUSH
72437: LD_INT 0
72439: PUSH
72440: EMPTY
72441: LIST
72442: LIST
72443: PUSH
72444: LD_INT 2
72446: PUSH
72447: LD_INT 1
72449: PUSH
72450: EMPTY
72451: LIST
72452: LIST
72453: PUSH
72454: LD_INT 2
72456: PUSH
72457: LD_INT 2
72459: PUSH
72460: EMPTY
72461: LIST
72462: LIST
72463: PUSH
72464: LD_INT 1
72466: PUSH
72467: LD_INT 2
72469: PUSH
72470: EMPTY
72471: LIST
72472: LIST
72473: PUSH
72474: LD_INT 1
72476: NEG
72477: PUSH
72478: LD_INT 1
72480: PUSH
72481: EMPTY
72482: LIST
72483: LIST
72484: PUSH
72485: LD_INT 2
72487: NEG
72488: PUSH
72489: LD_INT 0
72491: PUSH
72492: EMPTY
72493: LIST
72494: LIST
72495: PUSH
72496: LD_INT 2
72498: NEG
72499: PUSH
72500: LD_INT 1
72502: NEG
72503: PUSH
72504: EMPTY
72505: LIST
72506: LIST
72507: PUSH
72508: LD_INT 2
72510: NEG
72511: PUSH
72512: LD_INT 2
72514: NEG
72515: PUSH
72516: EMPTY
72517: LIST
72518: LIST
72519: PUSH
72520: LD_INT 2
72522: NEG
72523: PUSH
72524: LD_INT 3
72526: NEG
72527: PUSH
72528: EMPTY
72529: LIST
72530: LIST
72531: PUSH
72532: LD_INT 2
72534: PUSH
72535: LD_INT 1
72537: NEG
72538: PUSH
72539: EMPTY
72540: LIST
72541: LIST
72542: PUSH
72543: LD_INT 3
72545: PUSH
72546: LD_INT 0
72548: PUSH
72549: EMPTY
72550: LIST
72551: LIST
72552: PUSH
72553: LD_INT 3
72555: PUSH
72556: LD_INT 1
72558: PUSH
72559: EMPTY
72560: LIST
72561: LIST
72562: PUSH
72563: LD_INT 3
72565: PUSH
72566: LD_INT 2
72568: PUSH
72569: EMPTY
72570: LIST
72571: LIST
72572: PUSH
72573: LD_INT 3
72575: PUSH
72576: LD_INT 3
72578: PUSH
72579: EMPTY
72580: LIST
72581: LIST
72582: PUSH
72583: LD_INT 2
72585: PUSH
72586: LD_INT 3
72588: PUSH
72589: EMPTY
72590: LIST
72591: LIST
72592: PUSH
72593: LD_INT 2
72595: NEG
72596: PUSH
72597: LD_INT 1
72599: PUSH
72600: EMPTY
72601: LIST
72602: LIST
72603: PUSH
72604: LD_INT 3
72606: NEG
72607: PUSH
72608: LD_INT 0
72610: PUSH
72611: EMPTY
72612: LIST
72613: LIST
72614: PUSH
72615: LD_INT 3
72617: NEG
72618: PUSH
72619: LD_INT 1
72621: NEG
72622: PUSH
72623: EMPTY
72624: LIST
72625: LIST
72626: PUSH
72627: LD_INT 3
72629: NEG
72630: PUSH
72631: LD_INT 2
72633: NEG
72634: PUSH
72635: EMPTY
72636: LIST
72637: LIST
72638: PUSH
72639: LD_INT 3
72641: NEG
72642: PUSH
72643: LD_INT 3
72645: NEG
72646: PUSH
72647: EMPTY
72648: LIST
72649: LIST
72650: PUSH
72651: EMPTY
72652: LIST
72653: LIST
72654: LIST
72655: LIST
72656: LIST
72657: LIST
72658: LIST
72659: LIST
72660: LIST
72661: LIST
72662: LIST
72663: LIST
72664: LIST
72665: LIST
72666: LIST
72667: LIST
72668: LIST
72669: LIST
72670: LIST
72671: LIST
72672: LIST
72673: LIST
72674: LIST
72675: LIST
72676: LIST
72677: LIST
72678: LIST
72679: LIST
72680: LIST
72681: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
72682: LD_ADDR_VAR 0 45
72686: PUSH
72687: LD_INT 0
72689: PUSH
72690: LD_INT 0
72692: PUSH
72693: EMPTY
72694: LIST
72695: LIST
72696: PUSH
72697: LD_INT 0
72699: PUSH
72700: LD_INT 1
72702: NEG
72703: PUSH
72704: EMPTY
72705: LIST
72706: LIST
72707: PUSH
72708: LD_INT 1
72710: PUSH
72711: LD_INT 0
72713: PUSH
72714: EMPTY
72715: LIST
72716: LIST
72717: PUSH
72718: LD_INT 1
72720: PUSH
72721: LD_INT 1
72723: PUSH
72724: EMPTY
72725: LIST
72726: LIST
72727: PUSH
72728: LD_INT 0
72730: PUSH
72731: LD_INT 1
72733: PUSH
72734: EMPTY
72735: LIST
72736: LIST
72737: PUSH
72738: LD_INT 1
72740: NEG
72741: PUSH
72742: LD_INT 0
72744: PUSH
72745: EMPTY
72746: LIST
72747: LIST
72748: PUSH
72749: LD_INT 1
72751: NEG
72752: PUSH
72753: LD_INT 1
72755: NEG
72756: PUSH
72757: EMPTY
72758: LIST
72759: LIST
72760: PUSH
72761: LD_INT 1
72763: NEG
72764: PUSH
72765: LD_INT 2
72767: NEG
72768: PUSH
72769: EMPTY
72770: LIST
72771: LIST
72772: PUSH
72773: LD_INT 0
72775: PUSH
72776: LD_INT 2
72778: NEG
72779: PUSH
72780: EMPTY
72781: LIST
72782: LIST
72783: PUSH
72784: LD_INT 1
72786: PUSH
72787: LD_INT 1
72789: NEG
72790: PUSH
72791: EMPTY
72792: LIST
72793: LIST
72794: PUSH
72795: LD_INT 2
72797: PUSH
72798: LD_INT 1
72800: PUSH
72801: EMPTY
72802: LIST
72803: LIST
72804: PUSH
72805: LD_INT 2
72807: PUSH
72808: LD_INT 2
72810: PUSH
72811: EMPTY
72812: LIST
72813: LIST
72814: PUSH
72815: LD_INT 1
72817: PUSH
72818: LD_INT 2
72820: PUSH
72821: EMPTY
72822: LIST
72823: LIST
72824: PUSH
72825: LD_INT 0
72827: PUSH
72828: LD_INT 2
72830: PUSH
72831: EMPTY
72832: LIST
72833: LIST
72834: PUSH
72835: LD_INT 1
72837: NEG
72838: PUSH
72839: LD_INT 1
72841: PUSH
72842: EMPTY
72843: LIST
72844: LIST
72845: PUSH
72846: LD_INT 2
72848: NEG
72849: PUSH
72850: LD_INT 1
72852: NEG
72853: PUSH
72854: EMPTY
72855: LIST
72856: LIST
72857: PUSH
72858: LD_INT 2
72860: NEG
72861: PUSH
72862: LD_INT 2
72864: NEG
72865: PUSH
72866: EMPTY
72867: LIST
72868: LIST
72869: PUSH
72870: LD_INT 2
72872: NEG
72873: PUSH
72874: LD_INT 3
72876: NEG
72877: PUSH
72878: EMPTY
72879: LIST
72880: LIST
72881: PUSH
72882: LD_INT 1
72884: NEG
72885: PUSH
72886: LD_INT 3
72888: NEG
72889: PUSH
72890: EMPTY
72891: LIST
72892: LIST
72893: PUSH
72894: LD_INT 0
72896: PUSH
72897: LD_INT 3
72899: NEG
72900: PUSH
72901: EMPTY
72902: LIST
72903: LIST
72904: PUSH
72905: LD_INT 1
72907: PUSH
72908: LD_INT 2
72910: NEG
72911: PUSH
72912: EMPTY
72913: LIST
72914: LIST
72915: PUSH
72916: LD_INT 3
72918: PUSH
72919: LD_INT 2
72921: PUSH
72922: EMPTY
72923: LIST
72924: LIST
72925: PUSH
72926: LD_INT 3
72928: PUSH
72929: LD_INT 3
72931: PUSH
72932: EMPTY
72933: LIST
72934: LIST
72935: PUSH
72936: LD_INT 2
72938: PUSH
72939: LD_INT 3
72941: PUSH
72942: EMPTY
72943: LIST
72944: LIST
72945: PUSH
72946: LD_INT 1
72948: PUSH
72949: LD_INT 3
72951: PUSH
72952: EMPTY
72953: LIST
72954: LIST
72955: PUSH
72956: LD_INT 0
72958: PUSH
72959: LD_INT 3
72961: PUSH
72962: EMPTY
72963: LIST
72964: LIST
72965: PUSH
72966: LD_INT 1
72968: NEG
72969: PUSH
72970: LD_INT 2
72972: PUSH
72973: EMPTY
72974: LIST
72975: LIST
72976: PUSH
72977: LD_INT 3
72979: NEG
72980: PUSH
72981: LD_INT 2
72983: NEG
72984: PUSH
72985: EMPTY
72986: LIST
72987: LIST
72988: PUSH
72989: LD_INT 3
72991: NEG
72992: PUSH
72993: LD_INT 3
72995: NEG
72996: PUSH
72997: EMPTY
72998: LIST
72999: LIST
73000: PUSH
73001: EMPTY
73002: LIST
73003: LIST
73004: LIST
73005: LIST
73006: LIST
73007: LIST
73008: LIST
73009: LIST
73010: LIST
73011: LIST
73012: LIST
73013: LIST
73014: LIST
73015: LIST
73016: LIST
73017: LIST
73018: LIST
73019: LIST
73020: LIST
73021: LIST
73022: LIST
73023: LIST
73024: LIST
73025: LIST
73026: LIST
73027: LIST
73028: LIST
73029: LIST
73030: LIST
73031: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
73032: LD_ADDR_VAR 0 46
73036: PUSH
73037: LD_INT 0
73039: PUSH
73040: LD_INT 0
73042: PUSH
73043: EMPTY
73044: LIST
73045: LIST
73046: PUSH
73047: LD_INT 0
73049: PUSH
73050: LD_INT 1
73052: NEG
73053: PUSH
73054: EMPTY
73055: LIST
73056: LIST
73057: PUSH
73058: LD_INT 1
73060: PUSH
73061: LD_INT 0
73063: PUSH
73064: EMPTY
73065: LIST
73066: LIST
73067: PUSH
73068: LD_INT 1
73070: PUSH
73071: LD_INT 1
73073: PUSH
73074: EMPTY
73075: LIST
73076: LIST
73077: PUSH
73078: LD_INT 0
73080: PUSH
73081: LD_INT 1
73083: PUSH
73084: EMPTY
73085: LIST
73086: LIST
73087: PUSH
73088: LD_INT 1
73090: NEG
73091: PUSH
73092: LD_INT 0
73094: PUSH
73095: EMPTY
73096: LIST
73097: LIST
73098: PUSH
73099: LD_INT 1
73101: NEG
73102: PUSH
73103: LD_INT 1
73105: NEG
73106: PUSH
73107: EMPTY
73108: LIST
73109: LIST
73110: PUSH
73111: LD_INT 1
73113: NEG
73114: PUSH
73115: LD_INT 2
73117: NEG
73118: PUSH
73119: EMPTY
73120: LIST
73121: LIST
73122: PUSH
73123: LD_INT 0
73125: PUSH
73126: LD_INT 2
73128: NEG
73129: PUSH
73130: EMPTY
73131: LIST
73132: LIST
73133: PUSH
73134: LD_INT 1
73136: PUSH
73137: LD_INT 1
73139: NEG
73140: PUSH
73141: EMPTY
73142: LIST
73143: LIST
73144: PUSH
73145: LD_INT 2
73147: PUSH
73148: LD_INT 0
73150: PUSH
73151: EMPTY
73152: LIST
73153: LIST
73154: PUSH
73155: LD_INT 2
73157: PUSH
73158: LD_INT 1
73160: PUSH
73161: EMPTY
73162: LIST
73163: LIST
73164: PUSH
73165: LD_INT 1
73167: PUSH
73168: LD_INT 2
73170: PUSH
73171: EMPTY
73172: LIST
73173: LIST
73174: PUSH
73175: LD_INT 0
73177: PUSH
73178: LD_INT 2
73180: PUSH
73181: EMPTY
73182: LIST
73183: LIST
73184: PUSH
73185: LD_INT 1
73187: NEG
73188: PUSH
73189: LD_INT 1
73191: PUSH
73192: EMPTY
73193: LIST
73194: LIST
73195: PUSH
73196: LD_INT 2
73198: NEG
73199: PUSH
73200: LD_INT 0
73202: PUSH
73203: EMPTY
73204: LIST
73205: LIST
73206: PUSH
73207: LD_INT 2
73209: NEG
73210: PUSH
73211: LD_INT 1
73213: NEG
73214: PUSH
73215: EMPTY
73216: LIST
73217: LIST
73218: PUSH
73219: LD_INT 1
73221: NEG
73222: PUSH
73223: LD_INT 3
73225: NEG
73226: PUSH
73227: EMPTY
73228: LIST
73229: LIST
73230: PUSH
73231: LD_INT 0
73233: PUSH
73234: LD_INT 3
73236: NEG
73237: PUSH
73238: EMPTY
73239: LIST
73240: LIST
73241: PUSH
73242: LD_INT 1
73244: PUSH
73245: LD_INT 2
73247: NEG
73248: PUSH
73249: EMPTY
73250: LIST
73251: LIST
73252: PUSH
73253: LD_INT 2
73255: PUSH
73256: LD_INT 1
73258: NEG
73259: PUSH
73260: EMPTY
73261: LIST
73262: LIST
73263: PUSH
73264: LD_INT 3
73266: PUSH
73267: LD_INT 0
73269: PUSH
73270: EMPTY
73271: LIST
73272: LIST
73273: PUSH
73274: LD_INT 3
73276: PUSH
73277: LD_INT 1
73279: PUSH
73280: EMPTY
73281: LIST
73282: LIST
73283: PUSH
73284: LD_INT 1
73286: PUSH
73287: LD_INT 3
73289: PUSH
73290: EMPTY
73291: LIST
73292: LIST
73293: PUSH
73294: LD_INT 0
73296: PUSH
73297: LD_INT 3
73299: PUSH
73300: EMPTY
73301: LIST
73302: LIST
73303: PUSH
73304: LD_INT 1
73306: NEG
73307: PUSH
73308: LD_INT 2
73310: PUSH
73311: EMPTY
73312: LIST
73313: LIST
73314: PUSH
73315: LD_INT 2
73317: NEG
73318: PUSH
73319: LD_INT 1
73321: PUSH
73322: EMPTY
73323: LIST
73324: LIST
73325: PUSH
73326: LD_INT 3
73328: NEG
73329: PUSH
73330: LD_INT 0
73332: PUSH
73333: EMPTY
73334: LIST
73335: LIST
73336: PUSH
73337: LD_INT 3
73339: NEG
73340: PUSH
73341: LD_INT 1
73343: NEG
73344: PUSH
73345: EMPTY
73346: LIST
73347: LIST
73348: PUSH
73349: EMPTY
73350: LIST
73351: LIST
73352: LIST
73353: LIST
73354: LIST
73355: LIST
73356: LIST
73357: LIST
73358: LIST
73359: LIST
73360: LIST
73361: LIST
73362: LIST
73363: LIST
73364: LIST
73365: LIST
73366: LIST
73367: LIST
73368: LIST
73369: LIST
73370: LIST
73371: LIST
73372: LIST
73373: LIST
73374: LIST
73375: LIST
73376: LIST
73377: LIST
73378: LIST
73379: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
73380: LD_ADDR_VAR 0 47
73384: PUSH
73385: LD_INT 0
73387: PUSH
73388: LD_INT 0
73390: PUSH
73391: EMPTY
73392: LIST
73393: LIST
73394: PUSH
73395: LD_INT 0
73397: PUSH
73398: LD_INT 1
73400: NEG
73401: PUSH
73402: EMPTY
73403: LIST
73404: LIST
73405: PUSH
73406: LD_INT 1
73408: PUSH
73409: LD_INT 0
73411: PUSH
73412: EMPTY
73413: LIST
73414: LIST
73415: PUSH
73416: LD_INT 1
73418: PUSH
73419: LD_INT 1
73421: PUSH
73422: EMPTY
73423: LIST
73424: LIST
73425: PUSH
73426: LD_INT 0
73428: PUSH
73429: LD_INT 1
73431: PUSH
73432: EMPTY
73433: LIST
73434: LIST
73435: PUSH
73436: LD_INT 1
73438: NEG
73439: PUSH
73440: LD_INT 0
73442: PUSH
73443: EMPTY
73444: LIST
73445: LIST
73446: PUSH
73447: LD_INT 1
73449: NEG
73450: PUSH
73451: LD_INT 1
73453: NEG
73454: PUSH
73455: EMPTY
73456: LIST
73457: LIST
73458: PUSH
73459: LD_INT 1
73461: NEG
73462: PUSH
73463: LD_INT 2
73465: NEG
73466: PUSH
73467: EMPTY
73468: LIST
73469: LIST
73470: PUSH
73471: LD_INT 0
73473: PUSH
73474: LD_INT 2
73476: NEG
73477: PUSH
73478: EMPTY
73479: LIST
73480: LIST
73481: PUSH
73482: LD_INT 1
73484: PUSH
73485: LD_INT 1
73487: NEG
73488: PUSH
73489: EMPTY
73490: LIST
73491: LIST
73492: PUSH
73493: LD_INT 2
73495: NEG
73496: PUSH
73497: LD_INT 1
73499: NEG
73500: PUSH
73501: EMPTY
73502: LIST
73503: LIST
73504: PUSH
73505: LD_INT 2
73507: NEG
73508: PUSH
73509: LD_INT 2
73511: NEG
73512: PUSH
73513: EMPTY
73514: LIST
73515: LIST
73516: PUSH
73517: EMPTY
73518: LIST
73519: LIST
73520: LIST
73521: LIST
73522: LIST
73523: LIST
73524: LIST
73525: LIST
73526: LIST
73527: LIST
73528: LIST
73529: LIST
73530: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
73531: LD_ADDR_VAR 0 48
73535: PUSH
73536: LD_INT 0
73538: PUSH
73539: LD_INT 0
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: PUSH
73546: LD_INT 0
73548: PUSH
73549: LD_INT 1
73551: NEG
73552: PUSH
73553: EMPTY
73554: LIST
73555: LIST
73556: PUSH
73557: LD_INT 1
73559: PUSH
73560: LD_INT 0
73562: PUSH
73563: EMPTY
73564: LIST
73565: LIST
73566: PUSH
73567: LD_INT 1
73569: PUSH
73570: LD_INT 1
73572: PUSH
73573: EMPTY
73574: LIST
73575: LIST
73576: PUSH
73577: LD_INT 0
73579: PUSH
73580: LD_INT 1
73582: PUSH
73583: EMPTY
73584: LIST
73585: LIST
73586: PUSH
73587: LD_INT 1
73589: NEG
73590: PUSH
73591: LD_INT 0
73593: PUSH
73594: EMPTY
73595: LIST
73596: LIST
73597: PUSH
73598: LD_INT 1
73600: NEG
73601: PUSH
73602: LD_INT 1
73604: NEG
73605: PUSH
73606: EMPTY
73607: LIST
73608: LIST
73609: PUSH
73610: LD_INT 1
73612: NEG
73613: PUSH
73614: LD_INT 2
73616: NEG
73617: PUSH
73618: EMPTY
73619: LIST
73620: LIST
73621: PUSH
73622: LD_INT 0
73624: PUSH
73625: LD_INT 2
73627: NEG
73628: PUSH
73629: EMPTY
73630: LIST
73631: LIST
73632: PUSH
73633: LD_INT 1
73635: PUSH
73636: LD_INT 1
73638: NEG
73639: PUSH
73640: EMPTY
73641: LIST
73642: LIST
73643: PUSH
73644: LD_INT 2
73646: PUSH
73647: LD_INT 0
73649: PUSH
73650: EMPTY
73651: LIST
73652: LIST
73653: PUSH
73654: LD_INT 2
73656: PUSH
73657: LD_INT 1
73659: PUSH
73660: EMPTY
73661: LIST
73662: LIST
73663: PUSH
73664: EMPTY
73665: LIST
73666: LIST
73667: LIST
73668: LIST
73669: LIST
73670: LIST
73671: LIST
73672: LIST
73673: LIST
73674: LIST
73675: LIST
73676: LIST
73677: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
73678: LD_ADDR_VAR 0 49
73682: PUSH
73683: LD_INT 0
73685: PUSH
73686: LD_INT 0
73688: PUSH
73689: EMPTY
73690: LIST
73691: LIST
73692: PUSH
73693: LD_INT 0
73695: PUSH
73696: LD_INT 1
73698: NEG
73699: PUSH
73700: EMPTY
73701: LIST
73702: LIST
73703: PUSH
73704: LD_INT 1
73706: PUSH
73707: LD_INT 0
73709: PUSH
73710: EMPTY
73711: LIST
73712: LIST
73713: PUSH
73714: LD_INT 1
73716: PUSH
73717: LD_INT 1
73719: PUSH
73720: EMPTY
73721: LIST
73722: LIST
73723: PUSH
73724: LD_INT 0
73726: PUSH
73727: LD_INT 1
73729: PUSH
73730: EMPTY
73731: LIST
73732: LIST
73733: PUSH
73734: LD_INT 1
73736: NEG
73737: PUSH
73738: LD_INT 0
73740: PUSH
73741: EMPTY
73742: LIST
73743: LIST
73744: PUSH
73745: LD_INT 1
73747: NEG
73748: PUSH
73749: LD_INT 1
73751: NEG
73752: PUSH
73753: EMPTY
73754: LIST
73755: LIST
73756: PUSH
73757: LD_INT 1
73759: PUSH
73760: LD_INT 1
73762: NEG
73763: PUSH
73764: EMPTY
73765: LIST
73766: LIST
73767: PUSH
73768: LD_INT 2
73770: PUSH
73771: LD_INT 0
73773: PUSH
73774: EMPTY
73775: LIST
73776: LIST
73777: PUSH
73778: LD_INT 2
73780: PUSH
73781: LD_INT 1
73783: PUSH
73784: EMPTY
73785: LIST
73786: LIST
73787: PUSH
73788: LD_INT 2
73790: PUSH
73791: LD_INT 2
73793: PUSH
73794: EMPTY
73795: LIST
73796: LIST
73797: PUSH
73798: LD_INT 1
73800: PUSH
73801: LD_INT 2
73803: PUSH
73804: EMPTY
73805: LIST
73806: LIST
73807: PUSH
73808: EMPTY
73809: LIST
73810: LIST
73811: LIST
73812: LIST
73813: LIST
73814: LIST
73815: LIST
73816: LIST
73817: LIST
73818: LIST
73819: LIST
73820: LIST
73821: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
73822: LD_ADDR_VAR 0 50
73826: PUSH
73827: LD_INT 0
73829: PUSH
73830: LD_INT 0
73832: PUSH
73833: EMPTY
73834: LIST
73835: LIST
73836: PUSH
73837: LD_INT 0
73839: PUSH
73840: LD_INT 1
73842: NEG
73843: PUSH
73844: EMPTY
73845: LIST
73846: LIST
73847: PUSH
73848: LD_INT 1
73850: PUSH
73851: LD_INT 0
73853: PUSH
73854: EMPTY
73855: LIST
73856: LIST
73857: PUSH
73858: LD_INT 1
73860: PUSH
73861: LD_INT 1
73863: PUSH
73864: EMPTY
73865: LIST
73866: LIST
73867: PUSH
73868: LD_INT 0
73870: PUSH
73871: LD_INT 1
73873: PUSH
73874: EMPTY
73875: LIST
73876: LIST
73877: PUSH
73878: LD_INT 1
73880: NEG
73881: PUSH
73882: LD_INT 0
73884: PUSH
73885: EMPTY
73886: LIST
73887: LIST
73888: PUSH
73889: LD_INT 1
73891: NEG
73892: PUSH
73893: LD_INT 1
73895: NEG
73896: PUSH
73897: EMPTY
73898: LIST
73899: LIST
73900: PUSH
73901: LD_INT 2
73903: PUSH
73904: LD_INT 1
73906: PUSH
73907: EMPTY
73908: LIST
73909: LIST
73910: PUSH
73911: LD_INT 2
73913: PUSH
73914: LD_INT 2
73916: PUSH
73917: EMPTY
73918: LIST
73919: LIST
73920: PUSH
73921: LD_INT 1
73923: PUSH
73924: LD_INT 2
73926: PUSH
73927: EMPTY
73928: LIST
73929: LIST
73930: PUSH
73931: LD_INT 0
73933: PUSH
73934: LD_INT 2
73936: PUSH
73937: EMPTY
73938: LIST
73939: LIST
73940: PUSH
73941: LD_INT 1
73943: NEG
73944: PUSH
73945: LD_INT 1
73947: PUSH
73948: EMPTY
73949: LIST
73950: LIST
73951: PUSH
73952: EMPTY
73953: LIST
73954: LIST
73955: LIST
73956: LIST
73957: LIST
73958: LIST
73959: LIST
73960: LIST
73961: LIST
73962: LIST
73963: LIST
73964: LIST
73965: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
73966: LD_ADDR_VAR 0 51
73970: PUSH
73971: LD_INT 0
73973: PUSH
73974: LD_INT 0
73976: PUSH
73977: EMPTY
73978: LIST
73979: LIST
73980: PUSH
73981: LD_INT 0
73983: PUSH
73984: LD_INT 1
73986: NEG
73987: PUSH
73988: EMPTY
73989: LIST
73990: LIST
73991: PUSH
73992: LD_INT 1
73994: PUSH
73995: LD_INT 0
73997: PUSH
73998: EMPTY
73999: LIST
74000: LIST
74001: PUSH
74002: LD_INT 1
74004: PUSH
74005: LD_INT 1
74007: PUSH
74008: EMPTY
74009: LIST
74010: LIST
74011: PUSH
74012: LD_INT 0
74014: PUSH
74015: LD_INT 1
74017: PUSH
74018: EMPTY
74019: LIST
74020: LIST
74021: PUSH
74022: LD_INT 1
74024: NEG
74025: PUSH
74026: LD_INT 0
74028: PUSH
74029: EMPTY
74030: LIST
74031: LIST
74032: PUSH
74033: LD_INT 1
74035: NEG
74036: PUSH
74037: LD_INT 1
74039: NEG
74040: PUSH
74041: EMPTY
74042: LIST
74043: LIST
74044: PUSH
74045: LD_INT 1
74047: PUSH
74048: LD_INT 2
74050: PUSH
74051: EMPTY
74052: LIST
74053: LIST
74054: PUSH
74055: LD_INT 0
74057: PUSH
74058: LD_INT 2
74060: PUSH
74061: EMPTY
74062: LIST
74063: LIST
74064: PUSH
74065: LD_INT 1
74067: NEG
74068: PUSH
74069: LD_INT 1
74071: PUSH
74072: EMPTY
74073: LIST
74074: LIST
74075: PUSH
74076: LD_INT 2
74078: NEG
74079: PUSH
74080: LD_INT 0
74082: PUSH
74083: EMPTY
74084: LIST
74085: LIST
74086: PUSH
74087: LD_INT 2
74089: NEG
74090: PUSH
74091: LD_INT 1
74093: NEG
74094: PUSH
74095: EMPTY
74096: LIST
74097: LIST
74098: PUSH
74099: EMPTY
74100: LIST
74101: LIST
74102: LIST
74103: LIST
74104: LIST
74105: LIST
74106: LIST
74107: LIST
74108: LIST
74109: LIST
74110: LIST
74111: LIST
74112: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74113: LD_ADDR_VAR 0 52
74117: PUSH
74118: LD_INT 0
74120: PUSH
74121: LD_INT 0
74123: PUSH
74124: EMPTY
74125: LIST
74126: LIST
74127: PUSH
74128: LD_INT 0
74130: PUSH
74131: LD_INT 1
74133: NEG
74134: PUSH
74135: EMPTY
74136: LIST
74137: LIST
74138: PUSH
74139: LD_INT 1
74141: PUSH
74142: LD_INT 0
74144: PUSH
74145: EMPTY
74146: LIST
74147: LIST
74148: PUSH
74149: LD_INT 1
74151: PUSH
74152: LD_INT 1
74154: PUSH
74155: EMPTY
74156: LIST
74157: LIST
74158: PUSH
74159: LD_INT 0
74161: PUSH
74162: LD_INT 1
74164: PUSH
74165: EMPTY
74166: LIST
74167: LIST
74168: PUSH
74169: LD_INT 1
74171: NEG
74172: PUSH
74173: LD_INT 0
74175: PUSH
74176: EMPTY
74177: LIST
74178: LIST
74179: PUSH
74180: LD_INT 1
74182: NEG
74183: PUSH
74184: LD_INT 1
74186: NEG
74187: PUSH
74188: EMPTY
74189: LIST
74190: LIST
74191: PUSH
74192: LD_INT 1
74194: NEG
74195: PUSH
74196: LD_INT 2
74198: NEG
74199: PUSH
74200: EMPTY
74201: LIST
74202: LIST
74203: PUSH
74204: LD_INT 1
74206: NEG
74207: PUSH
74208: LD_INT 1
74210: PUSH
74211: EMPTY
74212: LIST
74213: LIST
74214: PUSH
74215: LD_INT 2
74217: NEG
74218: PUSH
74219: LD_INT 0
74221: PUSH
74222: EMPTY
74223: LIST
74224: LIST
74225: PUSH
74226: LD_INT 2
74228: NEG
74229: PUSH
74230: LD_INT 1
74232: NEG
74233: PUSH
74234: EMPTY
74235: LIST
74236: LIST
74237: PUSH
74238: LD_INT 2
74240: NEG
74241: PUSH
74242: LD_INT 2
74244: NEG
74245: PUSH
74246: EMPTY
74247: LIST
74248: LIST
74249: PUSH
74250: EMPTY
74251: LIST
74252: LIST
74253: LIST
74254: LIST
74255: LIST
74256: LIST
74257: LIST
74258: LIST
74259: LIST
74260: LIST
74261: LIST
74262: LIST
74263: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74264: LD_ADDR_VAR 0 53
74268: PUSH
74269: LD_INT 0
74271: PUSH
74272: LD_INT 0
74274: PUSH
74275: EMPTY
74276: LIST
74277: LIST
74278: PUSH
74279: LD_INT 0
74281: PUSH
74282: LD_INT 1
74284: NEG
74285: PUSH
74286: EMPTY
74287: LIST
74288: LIST
74289: PUSH
74290: LD_INT 1
74292: PUSH
74293: LD_INT 0
74295: PUSH
74296: EMPTY
74297: LIST
74298: LIST
74299: PUSH
74300: LD_INT 1
74302: PUSH
74303: LD_INT 1
74305: PUSH
74306: EMPTY
74307: LIST
74308: LIST
74309: PUSH
74310: LD_INT 0
74312: PUSH
74313: LD_INT 1
74315: PUSH
74316: EMPTY
74317: LIST
74318: LIST
74319: PUSH
74320: LD_INT 1
74322: NEG
74323: PUSH
74324: LD_INT 0
74326: PUSH
74327: EMPTY
74328: LIST
74329: LIST
74330: PUSH
74331: LD_INT 1
74333: NEG
74334: PUSH
74335: LD_INT 1
74337: NEG
74338: PUSH
74339: EMPTY
74340: LIST
74341: LIST
74342: PUSH
74343: LD_INT 1
74345: NEG
74346: PUSH
74347: LD_INT 2
74349: NEG
74350: PUSH
74351: EMPTY
74352: LIST
74353: LIST
74354: PUSH
74355: LD_INT 0
74357: PUSH
74358: LD_INT 2
74360: NEG
74361: PUSH
74362: EMPTY
74363: LIST
74364: LIST
74365: PUSH
74366: LD_INT 1
74368: PUSH
74369: LD_INT 1
74371: NEG
74372: PUSH
74373: EMPTY
74374: LIST
74375: LIST
74376: PUSH
74377: LD_INT 2
74379: PUSH
74380: LD_INT 0
74382: PUSH
74383: EMPTY
74384: LIST
74385: LIST
74386: PUSH
74387: LD_INT 2
74389: PUSH
74390: LD_INT 1
74392: PUSH
74393: EMPTY
74394: LIST
74395: LIST
74396: PUSH
74397: LD_INT 2
74399: PUSH
74400: LD_INT 2
74402: PUSH
74403: EMPTY
74404: LIST
74405: LIST
74406: PUSH
74407: LD_INT 1
74409: PUSH
74410: LD_INT 2
74412: PUSH
74413: EMPTY
74414: LIST
74415: LIST
74416: PUSH
74417: LD_INT 0
74419: PUSH
74420: LD_INT 2
74422: PUSH
74423: EMPTY
74424: LIST
74425: LIST
74426: PUSH
74427: LD_INT 1
74429: NEG
74430: PUSH
74431: LD_INT 1
74433: PUSH
74434: EMPTY
74435: LIST
74436: LIST
74437: PUSH
74438: LD_INT 2
74440: NEG
74441: PUSH
74442: LD_INT 0
74444: PUSH
74445: EMPTY
74446: LIST
74447: LIST
74448: PUSH
74449: LD_INT 2
74451: NEG
74452: PUSH
74453: LD_INT 1
74455: NEG
74456: PUSH
74457: EMPTY
74458: LIST
74459: LIST
74460: PUSH
74461: LD_INT 2
74463: NEG
74464: PUSH
74465: LD_INT 2
74467: NEG
74468: PUSH
74469: EMPTY
74470: LIST
74471: LIST
74472: PUSH
74473: EMPTY
74474: LIST
74475: LIST
74476: LIST
74477: LIST
74478: LIST
74479: LIST
74480: LIST
74481: LIST
74482: LIST
74483: LIST
74484: LIST
74485: LIST
74486: LIST
74487: LIST
74488: LIST
74489: LIST
74490: LIST
74491: LIST
74492: LIST
74493: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74494: LD_ADDR_VAR 0 54
74498: PUSH
74499: LD_INT 0
74501: PUSH
74502: LD_INT 0
74504: PUSH
74505: EMPTY
74506: LIST
74507: LIST
74508: PUSH
74509: LD_INT 0
74511: PUSH
74512: LD_INT 1
74514: NEG
74515: PUSH
74516: EMPTY
74517: LIST
74518: LIST
74519: PUSH
74520: LD_INT 1
74522: PUSH
74523: LD_INT 0
74525: PUSH
74526: EMPTY
74527: LIST
74528: LIST
74529: PUSH
74530: LD_INT 1
74532: PUSH
74533: LD_INT 1
74535: PUSH
74536: EMPTY
74537: LIST
74538: LIST
74539: PUSH
74540: LD_INT 0
74542: PUSH
74543: LD_INT 1
74545: PUSH
74546: EMPTY
74547: LIST
74548: LIST
74549: PUSH
74550: LD_INT 1
74552: NEG
74553: PUSH
74554: LD_INT 0
74556: PUSH
74557: EMPTY
74558: LIST
74559: LIST
74560: PUSH
74561: LD_INT 1
74563: NEG
74564: PUSH
74565: LD_INT 1
74567: NEG
74568: PUSH
74569: EMPTY
74570: LIST
74571: LIST
74572: PUSH
74573: LD_INT 1
74575: NEG
74576: PUSH
74577: LD_INT 2
74579: NEG
74580: PUSH
74581: EMPTY
74582: LIST
74583: LIST
74584: PUSH
74585: LD_INT 0
74587: PUSH
74588: LD_INT 2
74590: NEG
74591: PUSH
74592: EMPTY
74593: LIST
74594: LIST
74595: PUSH
74596: LD_INT 1
74598: PUSH
74599: LD_INT 1
74601: NEG
74602: PUSH
74603: EMPTY
74604: LIST
74605: LIST
74606: PUSH
74607: LD_INT 2
74609: PUSH
74610: LD_INT 0
74612: PUSH
74613: EMPTY
74614: LIST
74615: LIST
74616: PUSH
74617: LD_INT 2
74619: PUSH
74620: LD_INT 1
74622: PUSH
74623: EMPTY
74624: LIST
74625: LIST
74626: PUSH
74627: LD_INT 2
74629: PUSH
74630: LD_INT 2
74632: PUSH
74633: EMPTY
74634: LIST
74635: LIST
74636: PUSH
74637: LD_INT 1
74639: PUSH
74640: LD_INT 2
74642: PUSH
74643: EMPTY
74644: LIST
74645: LIST
74646: PUSH
74647: LD_INT 0
74649: PUSH
74650: LD_INT 2
74652: PUSH
74653: EMPTY
74654: LIST
74655: LIST
74656: PUSH
74657: LD_INT 1
74659: NEG
74660: PUSH
74661: LD_INT 1
74663: PUSH
74664: EMPTY
74665: LIST
74666: LIST
74667: PUSH
74668: LD_INT 2
74670: NEG
74671: PUSH
74672: LD_INT 0
74674: PUSH
74675: EMPTY
74676: LIST
74677: LIST
74678: PUSH
74679: LD_INT 2
74681: NEG
74682: PUSH
74683: LD_INT 1
74685: NEG
74686: PUSH
74687: EMPTY
74688: LIST
74689: LIST
74690: PUSH
74691: LD_INT 2
74693: NEG
74694: PUSH
74695: LD_INT 2
74697: NEG
74698: PUSH
74699: EMPTY
74700: LIST
74701: LIST
74702: PUSH
74703: EMPTY
74704: LIST
74705: LIST
74706: LIST
74707: LIST
74708: LIST
74709: LIST
74710: LIST
74711: LIST
74712: LIST
74713: LIST
74714: LIST
74715: LIST
74716: LIST
74717: LIST
74718: LIST
74719: LIST
74720: LIST
74721: LIST
74722: LIST
74723: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74724: LD_ADDR_VAR 0 55
74728: PUSH
74729: LD_INT 0
74731: PUSH
74732: LD_INT 0
74734: PUSH
74735: EMPTY
74736: LIST
74737: LIST
74738: PUSH
74739: LD_INT 0
74741: PUSH
74742: LD_INT 1
74744: NEG
74745: PUSH
74746: EMPTY
74747: LIST
74748: LIST
74749: PUSH
74750: LD_INT 1
74752: PUSH
74753: LD_INT 0
74755: PUSH
74756: EMPTY
74757: LIST
74758: LIST
74759: PUSH
74760: LD_INT 1
74762: PUSH
74763: LD_INT 1
74765: PUSH
74766: EMPTY
74767: LIST
74768: LIST
74769: PUSH
74770: LD_INT 0
74772: PUSH
74773: LD_INT 1
74775: PUSH
74776: EMPTY
74777: LIST
74778: LIST
74779: PUSH
74780: LD_INT 1
74782: NEG
74783: PUSH
74784: LD_INT 0
74786: PUSH
74787: EMPTY
74788: LIST
74789: LIST
74790: PUSH
74791: LD_INT 1
74793: NEG
74794: PUSH
74795: LD_INT 1
74797: NEG
74798: PUSH
74799: EMPTY
74800: LIST
74801: LIST
74802: PUSH
74803: LD_INT 1
74805: NEG
74806: PUSH
74807: LD_INT 2
74809: NEG
74810: PUSH
74811: EMPTY
74812: LIST
74813: LIST
74814: PUSH
74815: LD_INT 0
74817: PUSH
74818: LD_INT 2
74820: NEG
74821: PUSH
74822: EMPTY
74823: LIST
74824: LIST
74825: PUSH
74826: LD_INT 1
74828: PUSH
74829: LD_INT 1
74831: NEG
74832: PUSH
74833: EMPTY
74834: LIST
74835: LIST
74836: PUSH
74837: LD_INT 2
74839: PUSH
74840: LD_INT 0
74842: PUSH
74843: EMPTY
74844: LIST
74845: LIST
74846: PUSH
74847: LD_INT 2
74849: PUSH
74850: LD_INT 1
74852: PUSH
74853: EMPTY
74854: LIST
74855: LIST
74856: PUSH
74857: LD_INT 2
74859: PUSH
74860: LD_INT 2
74862: PUSH
74863: EMPTY
74864: LIST
74865: LIST
74866: PUSH
74867: LD_INT 1
74869: PUSH
74870: LD_INT 2
74872: PUSH
74873: EMPTY
74874: LIST
74875: LIST
74876: PUSH
74877: LD_INT 0
74879: PUSH
74880: LD_INT 2
74882: PUSH
74883: EMPTY
74884: LIST
74885: LIST
74886: PUSH
74887: LD_INT 1
74889: NEG
74890: PUSH
74891: LD_INT 1
74893: PUSH
74894: EMPTY
74895: LIST
74896: LIST
74897: PUSH
74898: LD_INT 2
74900: NEG
74901: PUSH
74902: LD_INT 0
74904: PUSH
74905: EMPTY
74906: LIST
74907: LIST
74908: PUSH
74909: LD_INT 2
74911: NEG
74912: PUSH
74913: LD_INT 1
74915: NEG
74916: PUSH
74917: EMPTY
74918: LIST
74919: LIST
74920: PUSH
74921: LD_INT 2
74923: NEG
74924: PUSH
74925: LD_INT 2
74927: NEG
74928: PUSH
74929: EMPTY
74930: LIST
74931: LIST
74932: PUSH
74933: EMPTY
74934: LIST
74935: LIST
74936: LIST
74937: LIST
74938: LIST
74939: LIST
74940: LIST
74941: LIST
74942: LIST
74943: LIST
74944: LIST
74945: LIST
74946: LIST
74947: LIST
74948: LIST
74949: LIST
74950: LIST
74951: LIST
74952: LIST
74953: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
74954: LD_ADDR_VAR 0 56
74958: PUSH
74959: LD_INT 0
74961: PUSH
74962: LD_INT 0
74964: PUSH
74965: EMPTY
74966: LIST
74967: LIST
74968: PUSH
74969: LD_INT 0
74971: PUSH
74972: LD_INT 1
74974: NEG
74975: PUSH
74976: EMPTY
74977: LIST
74978: LIST
74979: PUSH
74980: LD_INT 1
74982: PUSH
74983: LD_INT 0
74985: PUSH
74986: EMPTY
74987: LIST
74988: LIST
74989: PUSH
74990: LD_INT 1
74992: PUSH
74993: LD_INT 1
74995: PUSH
74996: EMPTY
74997: LIST
74998: LIST
74999: PUSH
75000: LD_INT 0
75002: PUSH
75003: LD_INT 1
75005: PUSH
75006: EMPTY
75007: LIST
75008: LIST
75009: PUSH
75010: LD_INT 1
75012: NEG
75013: PUSH
75014: LD_INT 0
75016: PUSH
75017: EMPTY
75018: LIST
75019: LIST
75020: PUSH
75021: LD_INT 1
75023: NEG
75024: PUSH
75025: LD_INT 1
75027: NEG
75028: PUSH
75029: EMPTY
75030: LIST
75031: LIST
75032: PUSH
75033: LD_INT 1
75035: NEG
75036: PUSH
75037: LD_INT 2
75039: NEG
75040: PUSH
75041: EMPTY
75042: LIST
75043: LIST
75044: PUSH
75045: LD_INT 0
75047: PUSH
75048: LD_INT 2
75050: NEG
75051: PUSH
75052: EMPTY
75053: LIST
75054: LIST
75055: PUSH
75056: LD_INT 1
75058: PUSH
75059: LD_INT 1
75061: NEG
75062: PUSH
75063: EMPTY
75064: LIST
75065: LIST
75066: PUSH
75067: LD_INT 2
75069: PUSH
75070: LD_INT 0
75072: PUSH
75073: EMPTY
75074: LIST
75075: LIST
75076: PUSH
75077: LD_INT 2
75079: PUSH
75080: LD_INT 1
75082: PUSH
75083: EMPTY
75084: LIST
75085: LIST
75086: PUSH
75087: LD_INT 2
75089: PUSH
75090: LD_INT 2
75092: PUSH
75093: EMPTY
75094: LIST
75095: LIST
75096: PUSH
75097: LD_INT 1
75099: PUSH
75100: LD_INT 2
75102: PUSH
75103: EMPTY
75104: LIST
75105: LIST
75106: PUSH
75107: LD_INT 0
75109: PUSH
75110: LD_INT 2
75112: PUSH
75113: EMPTY
75114: LIST
75115: LIST
75116: PUSH
75117: LD_INT 1
75119: NEG
75120: PUSH
75121: LD_INT 1
75123: PUSH
75124: EMPTY
75125: LIST
75126: LIST
75127: PUSH
75128: LD_INT 2
75130: NEG
75131: PUSH
75132: LD_INT 0
75134: PUSH
75135: EMPTY
75136: LIST
75137: LIST
75138: PUSH
75139: LD_INT 2
75141: NEG
75142: PUSH
75143: LD_INT 1
75145: NEG
75146: PUSH
75147: EMPTY
75148: LIST
75149: LIST
75150: PUSH
75151: LD_INT 2
75153: NEG
75154: PUSH
75155: LD_INT 2
75157: NEG
75158: PUSH
75159: EMPTY
75160: LIST
75161: LIST
75162: PUSH
75163: EMPTY
75164: LIST
75165: LIST
75166: LIST
75167: LIST
75168: LIST
75169: LIST
75170: LIST
75171: LIST
75172: LIST
75173: LIST
75174: LIST
75175: LIST
75176: LIST
75177: LIST
75178: LIST
75179: LIST
75180: LIST
75181: LIST
75182: LIST
75183: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75184: LD_ADDR_VAR 0 57
75188: PUSH
75189: LD_INT 0
75191: PUSH
75192: LD_INT 0
75194: PUSH
75195: EMPTY
75196: LIST
75197: LIST
75198: PUSH
75199: LD_INT 0
75201: PUSH
75202: LD_INT 1
75204: NEG
75205: PUSH
75206: EMPTY
75207: LIST
75208: LIST
75209: PUSH
75210: LD_INT 1
75212: PUSH
75213: LD_INT 0
75215: PUSH
75216: EMPTY
75217: LIST
75218: LIST
75219: PUSH
75220: LD_INT 1
75222: PUSH
75223: LD_INT 1
75225: PUSH
75226: EMPTY
75227: LIST
75228: LIST
75229: PUSH
75230: LD_INT 0
75232: PUSH
75233: LD_INT 1
75235: PUSH
75236: EMPTY
75237: LIST
75238: LIST
75239: PUSH
75240: LD_INT 1
75242: NEG
75243: PUSH
75244: LD_INT 0
75246: PUSH
75247: EMPTY
75248: LIST
75249: LIST
75250: PUSH
75251: LD_INT 1
75253: NEG
75254: PUSH
75255: LD_INT 1
75257: NEG
75258: PUSH
75259: EMPTY
75260: LIST
75261: LIST
75262: PUSH
75263: LD_INT 1
75265: NEG
75266: PUSH
75267: LD_INT 2
75269: NEG
75270: PUSH
75271: EMPTY
75272: LIST
75273: LIST
75274: PUSH
75275: LD_INT 0
75277: PUSH
75278: LD_INT 2
75280: NEG
75281: PUSH
75282: EMPTY
75283: LIST
75284: LIST
75285: PUSH
75286: LD_INT 1
75288: PUSH
75289: LD_INT 1
75291: NEG
75292: PUSH
75293: EMPTY
75294: LIST
75295: LIST
75296: PUSH
75297: LD_INT 2
75299: PUSH
75300: LD_INT 0
75302: PUSH
75303: EMPTY
75304: LIST
75305: LIST
75306: PUSH
75307: LD_INT 2
75309: PUSH
75310: LD_INT 1
75312: PUSH
75313: EMPTY
75314: LIST
75315: LIST
75316: PUSH
75317: LD_INT 2
75319: PUSH
75320: LD_INT 2
75322: PUSH
75323: EMPTY
75324: LIST
75325: LIST
75326: PUSH
75327: LD_INT 1
75329: PUSH
75330: LD_INT 2
75332: PUSH
75333: EMPTY
75334: LIST
75335: LIST
75336: PUSH
75337: LD_INT 0
75339: PUSH
75340: LD_INT 2
75342: PUSH
75343: EMPTY
75344: LIST
75345: LIST
75346: PUSH
75347: LD_INT 1
75349: NEG
75350: PUSH
75351: LD_INT 1
75353: PUSH
75354: EMPTY
75355: LIST
75356: LIST
75357: PUSH
75358: LD_INT 2
75360: NEG
75361: PUSH
75362: LD_INT 0
75364: PUSH
75365: EMPTY
75366: LIST
75367: LIST
75368: PUSH
75369: LD_INT 2
75371: NEG
75372: PUSH
75373: LD_INT 1
75375: NEG
75376: PUSH
75377: EMPTY
75378: LIST
75379: LIST
75380: PUSH
75381: LD_INT 2
75383: NEG
75384: PUSH
75385: LD_INT 2
75387: NEG
75388: PUSH
75389: EMPTY
75390: LIST
75391: LIST
75392: PUSH
75393: EMPTY
75394: LIST
75395: LIST
75396: LIST
75397: LIST
75398: LIST
75399: LIST
75400: LIST
75401: LIST
75402: LIST
75403: LIST
75404: LIST
75405: LIST
75406: LIST
75407: LIST
75408: LIST
75409: LIST
75410: LIST
75411: LIST
75412: LIST
75413: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
75414: LD_ADDR_VAR 0 58
75418: PUSH
75419: LD_INT 0
75421: PUSH
75422: LD_INT 0
75424: PUSH
75425: EMPTY
75426: LIST
75427: LIST
75428: PUSH
75429: LD_INT 0
75431: PUSH
75432: LD_INT 1
75434: NEG
75435: PUSH
75436: EMPTY
75437: LIST
75438: LIST
75439: PUSH
75440: LD_INT 1
75442: PUSH
75443: LD_INT 0
75445: PUSH
75446: EMPTY
75447: LIST
75448: LIST
75449: PUSH
75450: LD_INT 1
75452: PUSH
75453: LD_INT 1
75455: PUSH
75456: EMPTY
75457: LIST
75458: LIST
75459: PUSH
75460: LD_INT 0
75462: PUSH
75463: LD_INT 1
75465: PUSH
75466: EMPTY
75467: LIST
75468: LIST
75469: PUSH
75470: LD_INT 1
75472: NEG
75473: PUSH
75474: LD_INT 0
75476: PUSH
75477: EMPTY
75478: LIST
75479: LIST
75480: PUSH
75481: LD_INT 1
75483: NEG
75484: PUSH
75485: LD_INT 1
75487: NEG
75488: PUSH
75489: EMPTY
75490: LIST
75491: LIST
75492: PUSH
75493: LD_INT 1
75495: NEG
75496: PUSH
75497: LD_INT 2
75499: NEG
75500: PUSH
75501: EMPTY
75502: LIST
75503: LIST
75504: PUSH
75505: LD_INT 0
75507: PUSH
75508: LD_INT 2
75510: NEG
75511: PUSH
75512: EMPTY
75513: LIST
75514: LIST
75515: PUSH
75516: LD_INT 1
75518: PUSH
75519: LD_INT 1
75521: NEG
75522: PUSH
75523: EMPTY
75524: LIST
75525: LIST
75526: PUSH
75527: LD_INT 2
75529: PUSH
75530: LD_INT 0
75532: PUSH
75533: EMPTY
75534: LIST
75535: LIST
75536: PUSH
75537: LD_INT 2
75539: PUSH
75540: LD_INT 1
75542: PUSH
75543: EMPTY
75544: LIST
75545: LIST
75546: PUSH
75547: LD_INT 2
75549: PUSH
75550: LD_INT 2
75552: PUSH
75553: EMPTY
75554: LIST
75555: LIST
75556: PUSH
75557: LD_INT 1
75559: PUSH
75560: LD_INT 2
75562: PUSH
75563: EMPTY
75564: LIST
75565: LIST
75566: PUSH
75567: LD_INT 0
75569: PUSH
75570: LD_INT 2
75572: PUSH
75573: EMPTY
75574: LIST
75575: LIST
75576: PUSH
75577: LD_INT 1
75579: NEG
75580: PUSH
75581: LD_INT 1
75583: PUSH
75584: EMPTY
75585: LIST
75586: LIST
75587: PUSH
75588: LD_INT 2
75590: NEG
75591: PUSH
75592: LD_INT 0
75594: PUSH
75595: EMPTY
75596: LIST
75597: LIST
75598: PUSH
75599: LD_INT 2
75601: NEG
75602: PUSH
75603: LD_INT 1
75605: NEG
75606: PUSH
75607: EMPTY
75608: LIST
75609: LIST
75610: PUSH
75611: LD_INT 2
75613: NEG
75614: PUSH
75615: LD_INT 2
75617: NEG
75618: PUSH
75619: EMPTY
75620: LIST
75621: LIST
75622: PUSH
75623: EMPTY
75624: LIST
75625: LIST
75626: LIST
75627: LIST
75628: LIST
75629: LIST
75630: LIST
75631: LIST
75632: LIST
75633: LIST
75634: LIST
75635: LIST
75636: LIST
75637: LIST
75638: LIST
75639: LIST
75640: LIST
75641: LIST
75642: LIST
75643: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75644: LD_ADDR_VAR 0 59
75648: PUSH
75649: LD_INT 0
75651: PUSH
75652: LD_INT 0
75654: PUSH
75655: EMPTY
75656: LIST
75657: LIST
75658: PUSH
75659: LD_INT 0
75661: PUSH
75662: LD_INT 1
75664: NEG
75665: PUSH
75666: EMPTY
75667: LIST
75668: LIST
75669: PUSH
75670: LD_INT 1
75672: PUSH
75673: LD_INT 0
75675: PUSH
75676: EMPTY
75677: LIST
75678: LIST
75679: PUSH
75680: LD_INT 1
75682: PUSH
75683: LD_INT 1
75685: PUSH
75686: EMPTY
75687: LIST
75688: LIST
75689: PUSH
75690: LD_INT 0
75692: PUSH
75693: LD_INT 1
75695: PUSH
75696: EMPTY
75697: LIST
75698: LIST
75699: PUSH
75700: LD_INT 1
75702: NEG
75703: PUSH
75704: LD_INT 0
75706: PUSH
75707: EMPTY
75708: LIST
75709: LIST
75710: PUSH
75711: LD_INT 1
75713: NEG
75714: PUSH
75715: LD_INT 1
75717: NEG
75718: PUSH
75719: EMPTY
75720: LIST
75721: LIST
75722: PUSH
75723: EMPTY
75724: LIST
75725: LIST
75726: LIST
75727: LIST
75728: LIST
75729: LIST
75730: LIST
75731: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75732: LD_ADDR_VAR 0 60
75736: PUSH
75737: LD_INT 0
75739: PUSH
75740: LD_INT 0
75742: PUSH
75743: EMPTY
75744: LIST
75745: LIST
75746: PUSH
75747: LD_INT 0
75749: PUSH
75750: LD_INT 1
75752: NEG
75753: PUSH
75754: EMPTY
75755: LIST
75756: LIST
75757: PUSH
75758: LD_INT 1
75760: PUSH
75761: LD_INT 0
75763: PUSH
75764: EMPTY
75765: LIST
75766: LIST
75767: PUSH
75768: LD_INT 1
75770: PUSH
75771: LD_INT 1
75773: PUSH
75774: EMPTY
75775: LIST
75776: LIST
75777: PUSH
75778: LD_INT 0
75780: PUSH
75781: LD_INT 1
75783: PUSH
75784: EMPTY
75785: LIST
75786: LIST
75787: PUSH
75788: LD_INT 1
75790: NEG
75791: PUSH
75792: LD_INT 0
75794: PUSH
75795: EMPTY
75796: LIST
75797: LIST
75798: PUSH
75799: LD_INT 1
75801: NEG
75802: PUSH
75803: LD_INT 1
75805: NEG
75806: PUSH
75807: EMPTY
75808: LIST
75809: LIST
75810: PUSH
75811: EMPTY
75812: LIST
75813: LIST
75814: LIST
75815: LIST
75816: LIST
75817: LIST
75818: LIST
75819: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75820: LD_ADDR_VAR 0 61
75824: PUSH
75825: LD_INT 0
75827: PUSH
75828: LD_INT 0
75830: PUSH
75831: EMPTY
75832: LIST
75833: LIST
75834: PUSH
75835: LD_INT 0
75837: PUSH
75838: LD_INT 1
75840: NEG
75841: PUSH
75842: EMPTY
75843: LIST
75844: LIST
75845: PUSH
75846: LD_INT 1
75848: PUSH
75849: LD_INT 0
75851: PUSH
75852: EMPTY
75853: LIST
75854: LIST
75855: PUSH
75856: LD_INT 1
75858: PUSH
75859: LD_INT 1
75861: PUSH
75862: EMPTY
75863: LIST
75864: LIST
75865: PUSH
75866: LD_INT 0
75868: PUSH
75869: LD_INT 1
75871: PUSH
75872: EMPTY
75873: LIST
75874: LIST
75875: PUSH
75876: LD_INT 1
75878: NEG
75879: PUSH
75880: LD_INT 0
75882: PUSH
75883: EMPTY
75884: LIST
75885: LIST
75886: PUSH
75887: LD_INT 1
75889: NEG
75890: PUSH
75891: LD_INT 1
75893: NEG
75894: PUSH
75895: EMPTY
75896: LIST
75897: LIST
75898: PUSH
75899: EMPTY
75900: LIST
75901: LIST
75902: LIST
75903: LIST
75904: LIST
75905: LIST
75906: LIST
75907: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75908: LD_ADDR_VAR 0 62
75912: PUSH
75913: LD_INT 0
75915: PUSH
75916: LD_INT 0
75918: PUSH
75919: EMPTY
75920: LIST
75921: LIST
75922: PUSH
75923: LD_INT 0
75925: PUSH
75926: LD_INT 1
75928: NEG
75929: PUSH
75930: EMPTY
75931: LIST
75932: LIST
75933: PUSH
75934: LD_INT 1
75936: PUSH
75937: LD_INT 0
75939: PUSH
75940: EMPTY
75941: LIST
75942: LIST
75943: PUSH
75944: LD_INT 1
75946: PUSH
75947: LD_INT 1
75949: PUSH
75950: EMPTY
75951: LIST
75952: LIST
75953: PUSH
75954: LD_INT 0
75956: PUSH
75957: LD_INT 1
75959: PUSH
75960: EMPTY
75961: LIST
75962: LIST
75963: PUSH
75964: LD_INT 1
75966: NEG
75967: PUSH
75968: LD_INT 0
75970: PUSH
75971: EMPTY
75972: LIST
75973: LIST
75974: PUSH
75975: LD_INT 1
75977: NEG
75978: PUSH
75979: LD_INT 1
75981: NEG
75982: PUSH
75983: EMPTY
75984: LIST
75985: LIST
75986: PUSH
75987: EMPTY
75988: LIST
75989: LIST
75990: LIST
75991: LIST
75992: LIST
75993: LIST
75994: LIST
75995: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
75996: LD_ADDR_VAR 0 63
76000: PUSH
76001: LD_INT 0
76003: PUSH
76004: LD_INT 0
76006: PUSH
76007: EMPTY
76008: LIST
76009: LIST
76010: PUSH
76011: LD_INT 0
76013: PUSH
76014: LD_INT 1
76016: NEG
76017: PUSH
76018: EMPTY
76019: LIST
76020: LIST
76021: PUSH
76022: LD_INT 1
76024: PUSH
76025: LD_INT 0
76027: PUSH
76028: EMPTY
76029: LIST
76030: LIST
76031: PUSH
76032: LD_INT 1
76034: PUSH
76035: LD_INT 1
76037: PUSH
76038: EMPTY
76039: LIST
76040: LIST
76041: PUSH
76042: LD_INT 0
76044: PUSH
76045: LD_INT 1
76047: PUSH
76048: EMPTY
76049: LIST
76050: LIST
76051: PUSH
76052: LD_INT 1
76054: NEG
76055: PUSH
76056: LD_INT 0
76058: PUSH
76059: EMPTY
76060: LIST
76061: LIST
76062: PUSH
76063: LD_INT 1
76065: NEG
76066: PUSH
76067: LD_INT 1
76069: NEG
76070: PUSH
76071: EMPTY
76072: LIST
76073: LIST
76074: PUSH
76075: EMPTY
76076: LIST
76077: LIST
76078: LIST
76079: LIST
76080: LIST
76081: LIST
76082: LIST
76083: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
76084: LD_ADDR_VAR 0 64
76088: PUSH
76089: LD_INT 0
76091: PUSH
76092: LD_INT 0
76094: PUSH
76095: EMPTY
76096: LIST
76097: LIST
76098: PUSH
76099: LD_INT 0
76101: PUSH
76102: LD_INT 1
76104: NEG
76105: PUSH
76106: EMPTY
76107: LIST
76108: LIST
76109: PUSH
76110: LD_INT 1
76112: PUSH
76113: LD_INT 0
76115: PUSH
76116: EMPTY
76117: LIST
76118: LIST
76119: PUSH
76120: LD_INT 1
76122: PUSH
76123: LD_INT 1
76125: PUSH
76126: EMPTY
76127: LIST
76128: LIST
76129: PUSH
76130: LD_INT 0
76132: PUSH
76133: LD_INT 1
76135: PUSH
76136: EMPTY
76137: LIST
76138: LIST
76139: PUSH
76140: LD_INT 1
76142: NEG
76143: PUSH
76144: LD_INT 0
76146: PUSH
76147: EMPTY
76148: LIST
76149: LIST
76150: PUSH
76151: LD_INT 1
76153: NEG
76154: PUSH
76155: LD_INT 1
76157: NEG
76158: PUSH
76159: EMPTY
76160: LIST
76161: LIST
76162: PUSH
76163: EMPTY
76164: LIST
76165: LIST
76166: LIST
76167: LIST
76168: LIST
76169: LIST
76170: LIST
76171: ST_TO_ADDR
// end ; 1 :
76172: GO 82069
76174: LD_INT 1
76176: DOUBLE
76177: EQUAL
76178: IFTRUE 76182
76180: GO 78805
76182: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
76183: LD_ADDR_VAR 0 11
76187: PUSH
76188: LD_INT 1
76190: NEG
76191: PUSH
76192: LD_INT 3
76194: NEG
76195: PUSH
76196: EMPTY
76197: LIST
76198: LIST
76199: PUSH
76200: LD_INT 0
76202: PUSH
76203: LD_INT 3
76205: NEG
76206: PUSH
76207: EMPTY
76208: LIST
76209: LIST
76210: PUSH
76211: LD_INT 1
76213: PUSH
76214: LD_INT 2
76216: NEG
76217: PUSH
76218: EMPTY
76219: LIST
76220: LIST
76221: PUSH
76222: EMPTY
76223: LIST
76224: LIST
76225: LIST
76226: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
76227: LD_ADDR_VAR 0 12
76231: PUSH
76232: LD_INT 2
76234: PUSH
76235: LD_INT 1
76237: NEG
76238: PUSH
76239: EMPTY
76240: LIST
76241: LIST
76242: PUSH
76243: LD_INT 3
76245: PUSH
76246: LD_INT 0
76248: PUSH
76249: EMPTY
76250: LIST
76251: LIST
76252: PUSH
76253: LD_INT 3
76255: PUSH
76256: LD_INT 1
76258: PUSH
76259: EMPTY
76260: LIST
76261: LIST
76262: PUSH
76263: EMPTY
76264: LIST
76265: LIST
76266: LIST
76267: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
76268: LD_ADDR_VAR 0 13
76272: PUSH
76273: LD_INT 3
76275: PUSH
76276: LD_INT 2
76278: PUSH
76279: EMPTY
76280: LIST
76281: LIST
76282: PUSH
76283: LD_INT 3
76285: PUSH
76286: LD_INT 3
76288: PUSH
76289: EMPTY
76290: LIST
76291: LIST
76292: PUSH
76293: LD_INT 2
76295: PUSH
76296: LD_INT 3
76298: PUSH
76299: EMPTY
76300: LIST
76301: LIST
76302: PUSH
76303: EMPTY
76304: LIST
76305: LIST
76306: LIST
76307: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
76308: LD_ADDR_VAR 0 14
76312: PUSH
76313: LD_INT 1
76315: PUSH
76316: LD_INT 3
76318: PUSH
76319: EMPTY
76320: LIST
76321: LIST
76322: PUSH
76323: LD_INT 0
76325: PUSH
76326: LD_INT 3
76328: PUSH
76329: EMPTY
76330: LIST
76331: LIST
76332: PUSH
76333: LD_INT 1
76335: NEG
76336: PUSH
76337: LD_INT 2
76339: PUSH
76340: EMPTY
76341: LIST
76342: LIST
76343: PUSH
76344: EMPTY
76345: LIST
76346: LIST
76347: LIST
76348: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76349: LD_ADDR_VAR 0 15
76353: PUSH
76354: LD_INT 2
76356: NEG
76357: PUSH
76358: LD_INT 1
76360: PUSH
76361: EMPTY
76362: LIST
76363: LIST
76364: PUSH
76365: LD_INT 3
76367: NEG
76368: PUSH
76369: LD_INT 0
76371: PUSH
76372: EMPTY
76373: LIST
76374: LIST
76375: PUSH
76376: LD_INT 3
76378: NEG
76379: PUSH
76380: LD_INT 1
76382: NEG
76383: PUSH
76384: EMPTY
76385: LIST
76386: LIST
76387: PUSH
76388: EMPTY
76389: LIST
76390: LIST
76391: LIST
76392: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76393: LD_ADDR_VAR 0 16
76397: PUSH
76398: LD_INT 2
76400: NEG
76401: PUSH
76402: LD_INT 3
76404: NEG
76405: PUSH
76406: EMPTY
76407: LIST
76408: LIST
76409: PUSH
76410: LD_INT 3
76412: NEG
76413: PUSH
76414: LD_INT 2
76416: NEG
76417: PUSH
76418: EMPTY
76419: LIST
76420: LIST
76421: PUSH
76422: LD_INT 3
76424: NEG
76425: PUSH
76426: LD_INT 3
76428: NEG
76429: PUSH
76430: EMPTY
76431: LIST
76432: LIST
76433: PUSH
76434: EMPTY
76435: LIST
76436: LIST
76437: LIST
76438: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
76439: LD_ADDR_VAR 0 17
76443: PUSH
76444: LD_INT 1
76446: NEG
76447: PUSH
76448: LD_INT 3
76450: NEG
76451: PUSH
76452: EMPTY
76453: LIST
76454: LIST
76455: PUSH
76456: LD_INT 0
76458: PUSH
76459: LD_INT 3
76461: NEG
76462: PUSH
76463: EMPTY
76464: LIST
76465: LIST
76466: PUSH
76467: LD_INT 1
76469: PUSH
76470: LD_INT 2
76472: NEG
76473: PUSH
76474: EMPTY
76475: LIST
76476: LIST
76477: PUSH
76478: EMPTY
76479: LIST
76480: LIST
76481: LIST
76482: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
76483: LD_ADDR_VAR 0 18
76487: PUSH
76488: LD_INT 2
76490: PUSH
76491: LD_INT 1
76493: NEG
76494: PUSH
76495: EMPTY
76496: LIST
76497: LIST
76498: PUSH
76499: LD_INT 3
76501: PUSH
76502: LD_INT 0
76504: PUSH
76505: EMPTY
76506: LIST
76507: LIST
76508: PUSH
76509: LD_INT 3
76511: PUSH
76512: LD_INT 1
76514: PUSH
76515: EMPTY
76516: LIST
76517: LIST
76518: PUSH
76519: EMPTY
76520: LIST
76521: LIST
76522: LIST
76523: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
76524: LD_ADDR_VAR 0 19
76528: PUSH
76529: LD_INT 3
76531: PUSH
76532: LD_INT 2
76534: PUSH
76535: EMPTY
76536: LIST
76537: LIST
76538: PUSH
76539: LD_INT 3
76541: PUSH
76542: LD_INT 3
76544: PUSH
76545: EMPTY
76546: LIST
76547: LIST
76548: PUSH
76549: LD_INT 2
76551: PUSH
76552: LD_INT 3
76554: PUSH
76555: EMPTY
76556: LIST
76557: LIST
76558: PUSH
76559: EMPTY
76560: LIST
76561: LIST
76562: LIST
76563: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
76564: LD_ADDR_VAR 0 20
76568: PUSH
76569: LD_INT 1
76571: PUSH
76572: LD_INT 3
76574: PUSH
76575: EMPTY
76576: LIST
76577: LIST
76578: PUSH
76579: LD_INT 0
76581: PUSH
76582: LD_INT 3
76584: PUSH
76585: EMPTY
76586: LIST
76587: LIST
76588: PUSH
76589: LD_INT 1
76591: NEG
76592: PUSH
76593: LD_INT 2
76595: PUSH
76596: EMPTY
76597: LIST
76598: LIST
76599: PUSH
76600: EMPTY
76601: LIST
76602: LIST
76603: LIST
76604: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
76605: LD_ADDR_VAR 0 21
76609: PUSH
76610: LD_INT 2
76612: NEG
76613: PUSH
76614: LD_INT 1
76616: PUSH
76617: EMPTY
76618: LIST
76619: LIST
76620: PUSH
76621: LD_INT 3
76623: NEG
76624: PUSH
76625: LD_INT 0
76627: PUSH
76628: EMPTY
76629: LIST
76630: LIST
76631: PUSH
76632: LD_INT 3
76634: NEG
76635: PUSH
76636: LD_INT 1
76638: NEG
76639: PUSH
76640: EMPTY
76641: LIST
76642: LIST
76643: PUSH
76644: EMPTY
76645: LIST
76646: LIST
76647: LIST
76648: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
76649: LD_ADDR_VAR 0 22
76653: PUSH
76654: LD_INT 2
76656: NEG
76657: PUSH
76658: LD_INT 3
76660: NEG
76661: PUSH
76662: EMPTY
76663: LIST
76664: LIST
76665: PUSH
76666: LD_INT 3
76668: NEG
76669: PUSH
76670: LD_INT 2
76672: NEG
76673: PUSH
76674: EMPTY
76675: LIST
76676: LIST
76677: PUSH
76678: LD_INT 3
76680: NEG
76681: PUSH
76682: LD_INT 3
76684: NEG
76685: PUSH
76686: EMPTY
76687: LIST
76688: LIST
76689: PUSH
76690: EMPTY
76691: LIST
76692: LIST
76693: LIST
76694: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
76695: LD_ADDR_VAR 0 23
76699: PUSH
76700: LD_INT 0
76702: PUSH
76703: LD_INT 3
76705: NEG
76706: PUSH
76707: EMPTY
76708: LIST
76709: LIST
76710: PUSH
76711: LD_INT 1
76713: NEG
76714: PUSH
76715: LD_INT 4
76717: NEG
76718: PUSH
76719: EMPTY
76720: LIST
76721: LIST
76722: PUSH
76723: LD_INT 1
76725: PUSH
76726: LD_INT 3
76728: NEG
76729: PUSH
76730: EMPTY
76731: LIST
76732: LIST
76733: PUSH
76734: EMPTY
76735: LIST
76736: LIST
76737: LIST
76738: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
76739: LD_ADDR_VAR 0 24
76743: PUSH
76744: LD_INT 3
76746: PUSH
76747: LD_INT 0
76749: PUSH
76750: EMPTY
76751: LIST
76752: LIST
76753: PUSH
76754: LD_INT 3
76756: PUSH
76757: LD_INT 1
76759: NEG
76760: PUSH
76761: EMPTY
76762: LIST
76763: LIST
76764: PUSH
76765: LD_INT 4
76767: PUSH
76768: LD_INT 1
76770: PUSH
76771: EMPTY
76772: LIST
76773: LIST
76774: PUSH
76775: EMPTY
76776: LIST
76777: LIST
76778: LIST
76779: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
76780: LD_ADDR_VAR 0 25
76784: PUSH
76785: LD_INT 3
76787: PUSH
76788: LD_INT 3
76790: PUSH
76791: EMPTY
76792: LIST
76793: LIST
76794: PUSH
76795: LD_INT 4
76797: PUSH
76798: LD_INT 3
76800: PUSH
76801: EMPTY
76802: LIST
76803: LIST
76804: PUSH
76805: LD_INT 3
76807: PUSH
76808: LD_INT 4
76810: PUSH
76811: EMPTY
76812: LIST
76813: LIST
76814: PUSH
76815: EMPTY
76816: LIST
76817: LIST
76818: LIST
76819: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
76820: LD_ADDR_VAR 0 26
76824: PUSH
76825: LD_INT 0
76827: PUSH
76828: LD_INT 3
76830: PUSH
76831: EMPTY
76832: LIST
76833: LIST
76834: PUSH
76835: LD_INT 1
76837: PUSH
76838: LD_INT 4
76840: PUSH
76841: EMPTY
76842: LIST
76843: LIST
76844: PUSH
76845: LD_INT 1
76847: NEG
76848: PUSH
76849: LD_INT 3
76851: PUSH
76852: EMPTY
76853: LIST
76854: LIST
76855: PUSH
76856: EMPTY
76857: LIST
76858: LIST
76859: LIST
76860: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
76861: LD_ADDR_VAR 0 27
76865: PUSH
76866: LD_INT 3
76868: NEG
76869: PUSH
76870: LD_INT 0
76872: PUSH
76873: EMPTY
76874: LIST
76875: LIST
76876: PUSH
76877: LD_INT 3
76879: NEG
76880: PUSH
76881: LD_INT 1
76883: PUSH
76884: EMPTY
76885: LIST
76886: LIST
76887: PUSH
76888: LD_INT 4
76890: NEG
76891: PUSH
76892: LD_INT 1
76894: NEG
76895: PUSH
76896: EMPTY
76897: LIST
76898: LIST
76899: PUSH
76900: EMPTY
76901: LIST
76902: LIST
76903: LIST
76904: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
76905: LD_ADDR_VAR 0 28
76909: PUSH
76910: LD_INT 3
76912: NEG
76913: PUSH
76914: LD_INT 3
76916: NEG
76917: PUSH
76918: EMPTY
76919: LIST
76920: LIST
76921: PUSH
76922: LD_INT 3
76924: NEG
76925: PUSH
76926: LD_INT 4
76928: NEG
76929: PUSH
76930: EMPTY
76931: LIST
76932: LIST
76933: PUSH
76934: LD_INT 4
76936: NEG
76937: PUSH
76938: LD_INT 3
76940: NEG
76941: PUSH
76942: EMPTY
76943: LIST
76944: LIST
76945: PUSH
76946: EMPTY
76947: LIST
76948: LIST
76949: LIST
76950: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
76951: LD_ADDR_VAR 0 29
76955: PUSH
76956: LD_INT 1
76958: NEG
76959: PUSH
76960: LD_INT 3
76962: NEG
76963: PUSH
76964: EMPTY
76965: LIST
76966: LIST
76967: PUSH
76968: LD_INT 0
76970: PUSH
76971: LD_INT 3
76973: NEG
76974: PUSH
76975: EMPTY
76976: LIST
76977: LIST
76978: PUSH
76979: LD_INT 1
76981: PUSH
76982: LD_INT 2
76984: NEG
76985: PUSH
76986: EMPTY
76987: LIST
76988: LIST
76989: PUSH
76990: LD_INT 1
76992: NEG
76993: PUSH
76994: LD_INT 4
76996: NEG
76997: PUSH
76998: EMPTY
76999: LIST
77000: LIST
77001: PUSH
77002: LD_INT 0
77004: PUSH
77005: LD_INT 4
77007: NEG
77008: PUSH
77009: EMPTY
77010: LIST
77011: LIST
77012: PUSH
77013: LD_INT 1
77015: PUSH
77016: LD_INT 3
77018: NEG
77019: PUSH
77020: EMPTY
77021: LIST
77022: LIST
77023: PUSH
77024: LD_INT 1
77026: NEG
77027: PUSH
77028: LD_INT 5
77030: NEG
77031: PUSH
77032: EMPTY
77033: LIST
77034: LIST
77035: PUSH
77036: LD_INT 0
77038: PUSH
77039: LD_INT 5
77041: NEG
77042: PUSH
77043: EMPTY
77044: LIST
77045: LIST
77046: PUSH
77047: LD_INT 1
77049: PUSH
77050: LD_INT 4
77052: NEG
77053: PUSH
77054: EMPTY
77055: LIST
77056: LIST
77057: PUSH
77058: LD_INT 1
77060: NEG
77061: PUSH
77062: LD_INT 6
77064: NEG
77065: PUSH
77066: EMPTY
77067: LIST
77068: LIST
77069: PUSH
77070: LD_INT 0
77072: PUSH
77073: LD_INT 6
77075: NEG
77076: PUSH
77077: EMPTY
77078: LIST
77079: LIST
77080: PUSH
77081: LD_INT 1
77083: PUSH
77084: LD_INT 5
77086: NEG
77087: PUSH
77088: EMPTY
77089: LIST
77090: LIST
77091: PUSH
77092: EMPTY
77093: LIST
77094: LIST
77095: LIST
77096: LIST
77097: LIST
77098: LIST
77099: LIST
77100: LIST
77101: LIST
77102: LIST
77103: LIST
77104: LIST
77105: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
77106: LD_ADDR_VAR 0 30
77110: PUSH
77111: LD_INT 2
77113: PUSH
77114: LD_INT 1
77116: NEG
77117: PUSH
77118: EMPTY
77119: LIST
77120: LIST
77121: PUSH
77122: LD_INT 3
77124: PUSH
77125: LD_INT 0
77127: PUSH
77128: EMPTY
77129: LIST
77130: LIST
77131: PUSH
77132: LD_INT 3
77134: PUSH
77135: LD_INT 1
77137: PUSH
77138: EMPTY
77139: LIST
77140: LIST
77141: PUSH
77142: LD_INT 3
77144: PUSH
77145: LD_INT 1
77147: NEG
77148: PUSH
77149: EMPTY
77150: LIST
77151: LIST
77152: PUSH
77153: LD_INT 4
77155: PUSH
77156: LD_INT 0
77158: PUSH
77159: EMPTY
77160: LIST
77161: LIST
77162: PUSH
77163: LD_INT 4
77165: PUSH
77166: LD_INT 1
77168: PUSH
77169: EMPTY
77170: LIST
77171: LIST
77172: PUSH
77173: LD_INT 4
77175: PUSH
77176: LD_INT 1
77178: NEG
77179: PUSH
77180: EMPTY
77181: LIST
77182: LIST
77183: PUSH
77184: LD_INT 5
77186: PUSH
77187: LD_INT 0
77189: PUSH
77190: EMPTY
77191: LIST
77192: LIST
77193: PUSH
77194: LD_INT 5
77196: PUSH
77197: LD_INT 1
77199: PUSH
77200: EMPTY
77201: LIST
77202: LIST
77203: PUSH
77204: LD_INT 5
77206: PUSH
77207: LD_INT 1
77209: NEG
77210: PUSH
77211: EMPTY
77212: LIST
77213: LIST
77214: PUSH
77215: LD_INT 6
77217: PUSH
77218: LD_INT 0
77220: PUSH
77221: EMPTY
77222: LIST
77223: LIST
77224: PUSH
77225: LD_INT 6
77227: PUSH
77228: LD_INT 1
77230: PUSH
77231: EMPTY
77232: LIST
77233: LIST
77234: PUSH
77235: EMPTY
77236: LIST
77237: LIST
77238: LIST
77239: LIST
77240: LIST
77241: LIST
77242: LIST
77243: LIST
77244: LIST
77245: LIST
77246: LIST
77247: LIST
77248: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
77249: LD_ADDR_VAR 0 31
77253: PUSH
77254: LD_INT 3
77256: PUSH
77257: LD_INT 2
77259: PUSH
77260: EMPTY
77261: LIST
77262: LIST
77263: PUSH
77264: LD_INT 3
77266: PUSH
77267: LD_INT 3
77269: PUSH
77270: EMPTY
77271: LIST
77272: LIST
77273: PUSH
77274: LD_INT 2
77276: PUSH
77277: LD_INT 3
77279: PUSH
77280: EMPTY
77281: LIST
77282: LIST
77283: PUSH
77284: LD_INT 4
77286: PUSH
77287: LD_INT 3
77289: PUSH
77290: EMPTY
77291: LIST
77292: LIST
77293: PUSH
77294: LD_INT 4
77296: PUSH
77297: LD_INT 4
77299: PUSH
77300: EMPTY
77301: LIST
77302: LIST
77303: PUSH
77304: LD_INT 3
77306: PUSH
77307: LD_INT 4
77309: PUSH
77310: EMPTY
77311: LIST
77312: LIST
77313: PUSH
77314: LD_INT 5
77316: PUSH
77317: LD_INT 4
77319: PUSH
77320: EMPTY
77321: LIST
77322: LIST
77323: PUSH
77324: LD_INT 5
77326: PUSH
77327: LD_INT 5
77329: PUSH
77330: EMPTY
77331: LIST
77332: LIST
77333: PUSH
77334: LD_INT 4
77336: PUSH
77337: LD_INT 5
77339: PUSH
77340: EMPTY
77341: LIST
77342: LIST
77343: PUSH
77344: LD_INT 6
77346: PUSH
77347: LD_INT 5
77349: PUSH
77350: EMPTY
77351: LIST
77352: LIST
77353: PUSH
77354: LD_INT 6
77356: PUSH
77357: LD_INT 6
77359: PUSH
77360: EMPTY
77361: LIST
77362: LIST
77363: PUSH
77364: LD_INT 5
77366: PUSH
77367: LD_INT 6
77369: PUSH
77370: EMPTY
77371: LIST
77372: LIST
77373: PUSH
77374: EMPTY
77375: LIST
77376: LIST
77377: LIST
77378: LIST
77379: LIST
77380: LIST
77381: LIST
77382: LIST
77383: LIST
77384: LIST
77385: LIST
77386: LIST
77387: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
77388: LD_ADDR_VAR 0 32
77392: PUSH
77393: LD_INT 1
77395: PUSH
77396: LD_INT 3
77398: PUSH
77399: EMPTY
77400: LIST
77401: LIST
77402: PUSH
77403: LD_INT 0
77405: PUSH
77406: LD_INT 3
77408: PUSH
77409: EMPTY
77410: LIST
77411: LIST
77412: PUSH
77413: LD_INT 1
77415: NEG
77416: PUSH
77417: LD_INT 2
77419: PUSH
77420: EMPTY
77421: LIST
77422: LIST
77423: PUSH
77424: LD_INT 1
77426: PUSH
77427: LD_INT 4
77429: PUSH
77430: EMPTY
77431: LIST
77432: LIST
77433: PUSH
77434: LD_INT 0
77436: PUSH
77437: LD_INT 4
77439: PUSH
77440: EMPTY
77441: LIST
77442: LIST
77443: PUSH
77444: LD_INT 1
77446: NEG
77447: PUSH
77448: LD_INT 3
77450: PUSH
77451: EMPTY
77452: LIST
77453: LIST
77454: PUSH
77455: LD_INT 1
77457: PUSH
77458: LD_INT 5
77460: PUSH
77461: EMPTY
77462: LIST
77463: LIST
77464: PUSH
77465: LD_INT 0
77467: PUSH
77468: LD_INT 5
77470: PUSH
77471: EMPTY
77472: LIST
77473: LIST
77474: PUSH
77475: LD_INT 1
77477: NEG
77478: PUSH
77479: LD_INT 4
77481: PUSH
77482: EMPTY
77483: LIST
77484: LIST
77485: PUSH
77486: LD_INT 1
77488: PUSH
77489: LD_INT 6
77491: PUSH
77492: EMPTY
77493: LIST
77494: LIST
77495: PUSH
77496: LD_INT 0
77498: PUSH
77499: LD_INT 6
77501: PUSH
77502: EMPTY
77503: LIST
77504: LIST
77505: PUSH
77506: LD_INT 1
77508: NEG
77509: PUSH
77510: LD_INT 5
77512: PUSH
77513: EMPTY
77514: LIST
77515: LIST
77516: PUSH
77517: EMPTY
77518: LIST
77519: LIST
77520: LIST
77521: LIST
77522: LIST
77523: LIST
77524: LIST
77525: LIST
77526: LIST
77527: LIST
77528: LIST
77529: LIST
77530: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
77531: LD_ADDR_VAR 0 33
77535: PUSH
77536: LD_INT 2
77538: NEG
77539: PUSH
77540: LD_INT 1
77542: PUSH
77543: EMPTY
77544: LIST
77545: LIST
77546: PUSH
77547: LD_INT 3
77549: NEG
77550: PUSH
77551: LD_INT 0
77553: PUSH
77554: EMPTY
77555: LIST
77556: LIST
77557: PUSH
77558: LD_INT 3
77560: NEG
77561: PUSH
77562: LD_INT 1
77564: NEG
77565: PUSH
77566: EMPTY
77567: LIST
77568: LIST
77569: PUSH
77570: LD_INT 3
77572: NEG
77573: PUSH
77574: LD_INT 1
77576: PUSH
77577: EMPTY
77578: LIST
77579: LIST
77580: PUSH
77581: LD_INT 4
77583: NEG
77584: PUSH
77585: LD_INT 0
77587: PUSH
77588: EMPTY
77589: LIST
77590: LIST
77591: PUSH
77592: LD_INT 4
77594: NEG
77595: PUSH
77596: LD_INT 1
77598: NEG
77599: PUSH
77600: EMPTY
77601: LIST
77602: LIST
77603: PUSH
77604: LD_INT 4
77606: NEG
77607: PUSH
77608: LD_INT 1
77610: PUSH
77611: EMPTY
77612: LIST
77613: LIST
77614: PUSH
77615: LD_INT 5
77617: NEG
77618: PUSH
77619: LD_INT 0
77621: PUSH
77622: EMPTY
77623: LIST
77624: LIST
77625: PUSH
77626: LD_INT 5
77628: NEG
77629: PUSH
77630: LD_INT 1
77632: NEG
77633: PUSH
77634: EMPTY
77635: LIST
77636: LIST
77637: PUSH
77638: LD_INT 5
77640: NEG
77641: PUSH
77642: LD_INT 1
77644: PUSH
77645: EMPTY
77646: LIST
77647: LIST
77648: PUSH
77649: LD_INT 6
77651: NEG
77652: PUSH
77653: LD_INT 0
77655: PUSH
77656: EMPTY
77657: LIST
77658: LIST
77659: PUSH
77660: LD_INT 6
77662: NEG
77663: PUSH
77664: LD_INT 1
77666: NEG
77667: PUSH
77668: EMPTY
77669: LIST
77670: LIST
77671: PUSH
77672: EMPTY
77673: LIST
77674: LIST
77675: LIST
77676: LIST
77677: LIST
77678: LIST
77679: LIST
77680: LIST
77681: LIST
77682: LIST
77683: LIST
77684: LIST
77685: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
77686: LD_ADDR_VAR 0 34
77690: PUSH
77691: LD_INT 2
77693: NEG
77694: PUSH
77695: LD_INT 3
77697: NEG
77698: PUSH
77699: EMPTY
77700: LIST
77701: LIST
77702: PUSH
77703: LD_INT 3
77705: NEG
77706: PUSH
77707: LD_INT 2
77709: NEG
77710: PUSH
77711: EMPTY
77712: LIST
77713: LIST
77714: PUSH
77715: LD_INT 3
77717: NEG
77718: PUSH
77719: LD_INT 3
77721: NEG
77722: PUSH
77723: EMPTY
77724: LIST
77725: LIST
77726: PUSH
77727: LD_INT 3
77729: NEG
77730: PUSH
77731: LD_INT 4
77733: NEG
77734: PUSH
77735: EMPTY
77736: LIST
77737: LIST
77738: PUSH
77739: LD_INT 4
77741: NEG
77742: PUSH
77743: LD_INT 3
77745: NEG
77746: PUSH
77747: EMPTY
77748: LIST
77749: LIST
77750: PUSH
77751: LD_INT 4
77753: NEG
77754: PUSH
77755: LD_INT 4
77757: NEG
77758: PUSH
77759: EMPTY
77760: LIST
77761: LIST
77762: PUSH
77763: LD_INT 4
77765: NEG
77766: PUSH
77767: LD_INT 5
77769: NEG
77770: PUSH
77771: EMPTY
77772: LIST
77773: LIST
77774: PUSH
77775: LD_INT 5
77777: NEG
77778: PUSH
77779: LD_INT 4
77781: NEG
77782: PUSH
77783: EMPTY
77784: LIST
77785: LIST
77786: PUSH
77787: LD_INT 5
77789: NEG
77790: PUSH
77791: LD_INT 5
77793: NEG
77794: PUSH
77795: EMPTY
77796: LIST
77797: LIST
77798: PUSH
77799: LD_INT 5
77801: NEG
77802: PUSH
77803: LD_INT 6
77805: NEG
77806: PUSH
77807: EMPTY
77808: LIST
77809: LIST
77810: PUSH
77811: LD_INT 6
77813: NEG
77814: PUSH
77815: LD_INT 5
77817: NEG
77818: PUSH
77819: EMPTY
77820: LIST
77821: LIST
77822: PUSH
77823: LD_INT 6
77825: NEG
77826: PUSH
77827: LD_INT 6
77829: NEG
77830: PUSH
77831: EMPTY
77832: LIST
77833: LIST
77834: PUSH
77835: EMPTY
77836: LIST
77837: LIST
77838: LIST
77839: LIST
77840: LIST
77841: LIST
77842: LIST
77843: LIST
77844: LIST
77845: LIST
77846: LIST
77847: LIST
77848: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
77849: LD_ADDR_VAR 0 41
77853: PUSH
77854: LD_INT 0
77856: PUSH
77857: LD_INT 2
77859: NEG
77860: PUSH
77861: EMPTY
77862: LIST
77863: LIST
77864: PUSH
77865: LD_INT 1
77867: NEG
77868: PUSH
77869: LD_INT 3
77871: NEG
77872: PUSH
77873: EMPTY
77874: LIST
77875: LIST
77876: PUSH
77877: LD_INT 1
77879: PUSH
77880: LD_INT 2
77882: NEG
77883: PUSH
77884: EMPTY
77885: LIST
77886: LIST
77887: PUSH
77888: EMPTY
77889: LIST
77890: LIST
77891: LIST
77892: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
77893: LD_ADDR_VAR 0 42
77897: PUSH
77898: LD_INT 2
77900: PUSH
77901: LD_INT 0
77903: PUSH
77904: EMPTY
77905: LIST
77906: LIST
77907: PUSH
77908: LD_INT 2
77910: PUSH
77911: LD_INT 1
77913: NEG
77914: PUSH
77915: EMPTY
77916: LIST
77917: LIST
77918: PUSH
77919: LD_INT 3
77921: PUSH
77922: LD_INT 1
77924: PUSH
77925: EMPTY
77926: LIST
77927: LIST
77928: PUSH
77929: EMPTY
77930: LIST
77931: LIST
77932: LIST
77933: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
77934: LD_ADDR_VAR 0 43
77938: PUSH
77939: LD_INT 2
77941: PUSH
77942: LD_INT 2
77944: PUSH
77945: EMPTY
77946: LIST
77947: LIST
77948: PUSH
77949: LD_INT 3
77951: PUSH
77952: LD_INT 2
77954: PUSH
77955: EMPTY
77956: LIST
77957: LIST
77958: PUSH
77959: LD_INT 2
77961: PUSH
77962: LD_INT 3
77964: PUSH
77965: EMPTY
77966: LIST
77967: LIST
77968: PUSH
77969: EMPTY
77970: LIST
77971: LIST
77972: LIST
77973: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
77974: LD_ADDR_VAR 0 44
77978: PUSH
77979: LD_INT 0
77981: PUSH
77982: LD_INT 2
77984: PUSH
77985: EMPTY
77986: LIST
77987: LIST
77988: PUSH
77989: LD_INT 1
77991: PUSH
77992: LD_INT 3
77994: PUSH
77995: EMPTY
77996: LIST
77997: LIST
77998: PUSH
77999: LD_INT 1
78001: NEG
78002: PUSH
78003: LD_INT 2
78005: PUSH
78006: EMPTY
78007: LIST
78008: LIST
78009: PUSH
78010: EMPTY
78011: LIST
78012: LIST
78013: LIST
78014: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
78015: LD_ADDR_VAR 0 45
78019: PUSH
78020: LD_INT 2
78022: NEG
78023: PUSH
78024: LD_INT 0
78026: PUSH
78027: EMPTY
78028: LIST
78029: LIST
78030: PUSH
78031: LD_INT 2
78033: NEG
78034: PUSH
78035: LD_INT 1
78037: PUSH
78038: EMPTY
78039: LIST
78040: LIST
78041: PUSH
78042: LD_INT 3
78044: NEG
78045: PUSH
78046: LD_INT 1
78048: NEG
78049: PUSH
78050: EMPTY
78051: LIST
78052: LIST
78053: PUSH
78054: EMPTY
78055: LIST
78056: LIST
78057: LIST
78058: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
78059: LD_ADDR_VAR 0 46
78063: PUSH
78064: LD_INT 2
78066: NEG
78067: PUSH
78068: LD_INT 2
78070: NEG
78071: PUSH
78072: EMPTY
78073: LIST
78074: LIST
78075: PUSH
78076: LD_INT 2
78078: NEG
78079: PUSH
78080: LD_INT 3
78082: NEG
78083: PUSH
78084: EMPTY
78085: LIST
78086: LIST
78087: PUSH
78088: LD_INT 3
78090: NEG
78091: PUSH
78092: LD_INT 2
78094: NEG
78095: PUSH
78096: EMPTY
78097: LIST
78098: LIST
78099: PUSH
78100: EMPTY
78101: LIST
78102: LIST
78103: LIST
78104: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
78105: LD_ADDR_VAR 0 47
78109: PUSH
78110: LD_INT 2
78112: NEG
78113: PUSH
78114: LD_INT 3
78116: NEG
78117: PUSH
78118: EMPTY
78119: LIST
78120: LIST
78121: PUSH
78122: LD_INT 1
78124: NEG
78125: PUSH
78126: LD_INT 3
78128: NEG
78129: PUSH
78130: EMPTY
78131: LIST
78132: LIST
78133: PUSH
78134: EMPTY
78135: LIST
78136: LIST
78137: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
78138: LD_ADDR_VAR 0 48
78142: PUSH
78143: LD_INT 1
78145: PUSH
78146: LD_INT 2
78148: NEG
78149: PUSH
78150: EMPTY
78151: LIST
78152: LIST
78153: PUSH
78154: LD_INT 2
78156: PUSH
78157: LD_INT 1
78159: NEG
78160: PUSH
78161: EMPTY
78162: LIST
78163: LIST
78164: PUSH
78165: EMPTY
78166: LIST
78167: LIST
78168: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
78169: LD_ADDR_VAR 0 49
78173: PUSH
78174: LD_INT 3
78176: PUSH
78177: LD_INT 1
78179: PUSH
78180: EMPTY
78181: LIST
78182: LIST
78183: PUSH
78184: LD_INT 3
78186: PUSH
78187: LD_INT 2
78189: PUSH
78190: EMPTY
78191: LIST
78192: LIST
78193: PUSH
78194: EMPTY
78195: LIST
78196: LIST
78197: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
78198: LD_ADDR_VAR 0 50
78202: PUSH
78203: LD_INT 2
78205: PUSH
78206: LD_INT 3
78208: PUSH
78209: EMPTY
78210: LIST
78211: LIST
78212: PUSH
78213: LD_INT 1
78215: PUSH
78216: LD_INT 3
78218: PUSH
78219: EMPTY
78220: LIST
78221: LIST
78222: PUSH
78223: EMPTY
78224: LIST
78225: LIST
78226: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
78227: LD_ADDR_VAR 0 51
78231: PUSH
78232: LD_INT 1
78234: NEG
78235: PUSH
78236: LD_INT 2
78238: PUSH
78239: EMPTY
78240: LIST
78241: LIST
78242: PUSH
78243: LD_INT 2
78245: NEG
78246: PUSH
78247: LD_INT 1
78249: PUSH
78250: EMPTY
78251: LIST
78252: LIST
78253: PUSH
78254: EMPTY
78255: LIST
78256: LIST
78257: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
78258: LD_ADDR_VAR 0 52
78262: PUSH
78263: LD_INT 3
78265: NEG
78266: PUSH
78267: LD_INT 1
78269: NEG
78270: PUSH
78271: EMPTY
78272: LIST
78273: LIST
78274: PUSH
78275: LD_INT 3
78277: NEG
78278: PUSH
78279: LD_INT 2
78281: NEG
78282: PUSH
78283: EMPTY
78284: LIST
78285: LIST
78286: PUSH
78287: EMPTY
78288: LIST
78289: LIST
78290: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
78291: LD_ADDR_VAR 0 53
78295: PUSH
78296: LD_INT 1
78298: NEG
78299: PUSH
78300: LD_INT 3
78302: NEG
78303: PUSH
78304: EMPTY
78305: LIST
78306: LIST
78307: PUSH
78308: LD_INT 0
78310: PUSH
78311: LD_INT 3
78313: NEG
78314: PUSH
78315: EMPTY
78316: LIST
78317: LIST
78318: PUSH
78319: LD_INT 1
78321: PUSH
78322: LD_INT 2
78324: NEG
78325: PUSH
78326: EMPTY
78327: LIST
78328: LIST
78329: PUSH
78330: EMPTY
78331: LIST
78332: LIST
78333: LIST
78334: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
78335: LD_ADDR_VAR 0 54
78339: PUSH
78340: LD_INT 2
78342: PUSH
78343: LD_INT 1
78345: NEG
78346: PUSH
78347: EMPTY
78348: LIST
78349: LIST
78350: PUSH
78351: LD_INT 3
78353: PUSH
78354: LD_INT 0
78356: PUSH
78357: EMPTY
78358: LIST
78359: LIST
78360: PUSH
78361: LD_INT 3
78363: PUSH
78364: LD_INT 1
78366: PUSH
78367: EMPTY
78368: LIST
78369: LIST
78370: PUSH
78371: EMPTY
78372: LIST
78373: LIST
78374: LIST
78375: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
78376: LD_ADDR_VAR 0 55
78380: PUSH
78381: LD_INT 3
78383: PUSH
78384: LD_INT 2
78386: PUSH
78387: EMPTY
78388: LIST
78389: LIST
78390: PUSH
78391: LD_INT 3
78393: PUSH
78394: LD_INT 3
78396: PUSH
78397: EMPTY
78398: LIST
78399: LIST
78400: PUSH
78401: LD_INT 2
78403: PUSH
78404: LD_INT 3
78406: PUSH
78407: EMPTY
78408: LIST
78409: LIST
78410: PUSH
78411: EMPTY
78412: LIST
78413: LIST
78414: LIST
78415: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
78416: LD_ADDR_VAR 0 56
78420: PUSH
78421: LD_INT 1
78423: PUSH
78424: LD_INT 3
78426: PUSH
78427: EMPTY
78428: LIST
78429: LIST
78430: PUSH
78431: LD_INT 0
78433: PUSH
78434: LD_INT 3
78436: PUSH
78437: EMPTY
78438: LIST
78439: LIST
78440: PUSH
78441: LD_INT 1
78443: NEG
78444: PUSH
78445: LD_INT 2
78447: PUSH
78448: EMPTY
78449: LIST
78450: LIST
78451: PUSH
78452: EMPTY
78453: LIST
78454: LIST
78455: LIST
78456: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
78457: LD_ADDR_VAR 0 57
78461: PUSH
78462: LD_INT 2
78464: NEG
78465: PUSH
78466: LD_INT 1
78468: PUSH
78469: EMPTY
78470: LIST
78471: LIST
78472: PUSH
78473: LD_INT 3
78475: NEG
78476: PUSH
78477: LD_INT 0
78479: PUSH
78480: EMPTY
78481: LIST
78482: LIST
78483: PUSH
78484: LD_INT 3
78486: NEG
78487: PUSH
78488: LD_INT 1
78490: NEG
78491: PUSH
78492: EMPTY
78493: LIST
78494: LIST
78495: PUSH
78496: EMPTY
78497: LIST
78498: LIST
78499: LIST
78500: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
78501: LD_ADDR_VAR 0 58
78505: PUSH
78506: LD_INT 2
78508: NEG
78509: PUSH
78510: LD_INT 3
78512: NEG
78513: PUSH
78514: EMPTY
78515: LIST
78516: LIST
78517: PUSH
78518: LD_INT 3
78520: NEG
78521: PUSH
78522: LD_INT 2
78524: NEG
78525: PUSH
78526: EMPTY
78527: LIST
78528: LIST
78529: PUSH
78530: LD_INT 3
78532: NEG
78533: PUSH
78534: LD_INT 3
78536: NEG
78537: PUSH
78538: EMPTY
78539: LIST
78540: LIST
78541: PUSH
78542: EMPTY
78543: LIST
78544: LIST
78545: LIST
78546: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
78547: LD_ADDR_VAR 0 59
78551: PUSH
78552: LD_INT 1
78554: NEG
78555: PUSH
78556: LD_INT 2
78558: NEG
78559: PUSH
78560: EMPTY
78561: LIST
78562: LIST
78563: PUSH
78564: LD_INT 0
78566: PUSH
78567: LD_INT 2
78569: NEG
78570: PUSH
78571: EMPTY
78572: LIST
78573: LIST
78574: PUSH
78575: LD_INT 1
78577: PUSH
78578: LD_INT 1
78580: NEG
78581: PUSH
78582: EMPTY
78583: LIST
78584: LIST
78585: PUSH
78586: EMPTY
78587: LIST
78588: LIST
78589: LIST
78590: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
78591: LD_ADDR_VAR 0 60
78595: PUSH
78596: LD_INT 1
78598: PUSH
78599: LD_INT 1
78601: NEG
78602: PUSH
78603: EMPTY
78604: LIST
78605: LIST
78606: PUSH
78607: LD_INT 2
78609: PUSH
78610: LD_INT 0
78612: PUSH
78613: EMPTY
78614: LIST
78615: LIST
78616: PUSH
78617: LD_INT 2
78619: PUSH
78620: LD_INT 1
78622: PUSH
78623: EMPTY
78624: LIST
78625: LIST
78626: PUSH
78627: EMPTY
78628: LIST
78629: LIST
78630: LIST
78631: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
78632: LD_ADDR_VAR 0 61
78636: PUSH
78637: LD_INT 2
78639: PUSH
78640: LD_INT 1
78642: PUSH
78643: EMPTY
78644: LIST
78645: LIST
78646: PUSH
78647: LD_INT 2
78649: PUSH
78650: LD_INT 2
78652: PUSH
78653: EMPTY
78654: LIST
78655: LIST
78656: PUSH
78657: LD_INT 1
78659: PUSH
78660: LD_INT 2
78662: PUSH
78663: EMPTY
78664: LIST
78665: LIST
78666: PUSH
78667: EMPTY
78668: LIST
78669: LIST
78670: LIST
78671: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
78672: LD_ADDR_VAR 0 62
78676: PUSH
78677: LD_INT 1
78679: PUSH
78680: LD_INT 2
78682: PUSH
78683: EMPTY
78684: LIST
78685: LIST
78686: PUSH
78687: LD_INT 0
78689: PUSH
78690: LD_INT 2
78692: PUSH
78693: EMPTY
78694: LIST
78695: LIST
78696: PUSH
78697: LD_INT 1
78699: NEG
78700: PUSH
78701: LD_INT 1
78703: PUSH
78704: EMPTY
78705: LIST
78706: LIST
78707: PUSH
78708: EMPTY
78709: LIST
78710: LIST
78711: LIST
78712: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
78713: LD_ADDR_VAR 0 63
78717: PUSH
78718: LD_INT 1
78720: NEG
78721: PUSH
78722: LD_INT 1
78724: PUSH
78725: EMPTY
78726: LIST
78727: LIST
78728: PUSH
78729: LD_INT 2
78731: NEG
78732: PUSH
78733: LD_INT 0
78735: PUSH
78736: EMPTY
78737: LIST
78738: LIST
78739: PUSH
78740: LD_INT 2
78742: NEG
78743: PUSH
78744: LD_INT 1
78746: NEG
78747: PUSH
78748: EMPTY
78749: LIST
78750: LIST
78751: PUSH
78752: EMPTY
78753: LIST
78754: LIST
78755: LIST
78756: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
78757: LD_ADDR_VAR 0 64
78761: PUSH
78762: LD_INT 1
78764: NEG
78765: PUSH
78766: LD_INT 2
78768: NEG
78769: PUSH
78770: EMPTY
78771: LIST
78772: LIST
78773: PUSH
78774: LD_INT 2
78776: NEG
78777: PUSH
78778: LD_INT 1
78780: NEG
78781: PUSH
78782: EMPTY
78783: LIST
78784: LIST
78785: PUSH
78786: LD_INT 2
78788: NEG
78789: PUSH
78790: LD_INT 2
78792: NEG
78793: PUSH
78794: EMPTY
78795: LIST
78796: LIST
78797: PUSH
78798: EMPTY
78799: LIST
78800: LIST
78801: LIST
78802: ST_TO_ADDR
// end ; 2 :
78803: GO 82069
78805: LD_INT 2
78807: DOUBLE
78808: EQUAL
78809: IFTRUE 78813
78811: GO 82068
78813: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
78814: LD_ADDR_VAR 0 29
78818: PUSH
78819: LD_INT 4
78821: PUSH
78822: LD_INT 0
78824: PUSH
78825: EMPTY
78826: LIST
78827: LIST
78828: PUSH
78829: LD_INT 4
78831: PUSH
78832: LD_INT 1
78834: NEG
78835: PUSH
78836: EMPTY
78837: LIST
78838: LIST
78839: PUSH
78840: LD_INT 5
78842: PUSH
78843: LD_INT 0
78845: PUSH
78846: EMPTY
78847: LIST
78848: LIST
78849: PUSH
78850: LD_INT 5
78852: PUSH
78853: LD_INT 1
78855: PUSH
78856: EMPTY
78857: LIST
78858: LIST
78859: PUSH
78860: LD_INT 4
78862: PUSH
78863: LD_INT 1
78865: PUSH
78866: EMPTY
78867: LIST
78868: LIST
78869: PUSH
78870: LD_INT 3
78872: PUSH
78873: LD_INT 0
78875: PUSH
78876: EMPTY
78877: LIST
78878: LIST
78879: PUSH
78880: LD_INT 3
78882: PUSH
78883: LD_INT 1
78885: NEG
78886: PUSH
78887: EMPTY
78888: LIST
78889: LIST
78890: PUSH
78891: LD_INT 3
78893: PUSH
78894: LD_INT 2
78896: NEG
78897: PUSH
78898: EMPTY
78899: LIST
78900: LIST
78901: PUSH
78902: LD_INT 5
78904: PUSH
78905: LD_INT 2
78907: PUSH
78908: EMPTY
78909: LIST
78910: LIST
78911: PUSH
78912: LD_INT 3
78914: PUSH
78915: LD_INT 3
78917: PUSH
78918: EMPTY
78919: LIST
78920: LIST
78921: PUSH
78922: LD_INT 3
78924: PUSH
78925: LD_INT 2
78927: PUSH
78928: EMPTY
78929: LIST
78930: LIST
78931: PUSH
78932: LD_INT 4
78934: PUSH
78935: LD_INT 3
78937: PUSH
78938: EMPTY
78939: LIST
78940: LIST
78941: PUSH
78942: LD_INT 4
78944: PUSH
78945: LD_INT 4
78947: PUSH
78948: EMPTY
78949: LIST
78950: LIST
78951: PUSH
78952: LD_INT 3
78954: PUSH
78955: LD_INT 4
78957: PUSH
78958: EMPTY
78959: LIST
78960: LIST
78961: PUSH
78962: LD_INT 2
78964: PUSH
78965: LD_INT 3
78967: PUSH
78968: EMPTY
78969: LIST
78970: LIST
78971: PUSH
78972: LD_INT 2
78974: PUSH
78975: LD_INT 2
78977: PUSH
78978: EMPTY
78979: LIST
78980: LIST
78981: PUSH
78982: LD_INT 4
78984: PUSH
78985: LD_INT 2
78987: PUSH
78988: EMPTY
78989: LIST
78990: LIST
78991: PUSH
78992: LD_INT 2
78994: PUSH
78995: LD_INT 4
78997: PUSH
78998: EMPTY
78999: LIST
79000: LIST
79001: PUSH
79002: LD_INT 0
79004: PUSH
79005: LD_INT 4
79007: PUSH
79008: EMPTY
79009: LIST
79010: LIST
79011: PUSH
79012: LD_INT 0
79014: PUSH
79015: LD_INT 3
79017: PUSH
79018: EMPTY
79019: LIST
79020: LIST
79021: PUSH
79022: LD_INT 1
79024: PUSH
79025: LD_INT 4
79027: PUSH
79028: EMPTY
79029: LIST
79030: LIST
79031: PUSH
79032: LD_INT 1
79034: PUSH
79035: LD_INT 5
79037: PUSH
79038: EMPTY
79039: LIST
79040: LIST
79041: PUSH
79042: LD_INT 0
79044: PUSH
79045: LD_INT 5
79047: PUSH
79048: EMPTY
79049: LIST
79050: LIST
79051: PUSH
79052: LD_INT 1
79054: NEG
79055: PUSH
79056: LD_INT 4
79058: PUSH
79059: EMPTY
79060: LIST
79061: LIST
79062: PUSH
79063: LD_INT 1
79065: NEG
79066: PUSH
79067: LD_INT 3
79069: PUSH
79070: EMPTY
79071: LIST
79072: LIST
79073: PUSH
79074: LD_INT 2
79076: PUSH
79077: LD_INT 5
79079: PUSH
79080: EMPTY
79081: LIST
79082: LIST
79083: PUSH
79084: LD_INT 2
79086: NEG
79087: PUSH
79088: LD_INT 3
79090: PUSH
79091: EMPTY
79092: LIST
79093: LIST
79094: PUSH
79095: LD_INT 3
79097: NEG
79098: PUSH
79099: LD_INT 0
79101: PUSH
79102: EMPTY
79103: LIST
79104: LIST
79105: PUSH
79106: LD_INT 3
79108: NEG
79109: PUSH
79110: LD_INT 1
79112: NEG
79113: PUSH
79114: EMPTY
79115: LIST
79116: LIST
79117: PUSH
79118: LD_INT 2
79120: NEG
79121: PUSH
79122: LD_INT 0
79124: PUSH
79125: EMPTY
79126: LIST
79127: LIST
79128: PUSH
79129: LD_INT 2
79131: NEG
79132: PUSH
79133: LD_INT 1
79135: PUSH
79136: EMPTY
79137: LIST
79138: LIST
79139: PUSH
79140: LD_INT 3
79142: NEG
79143: PUSH
79144: LD_INT 1
79146: PUSH
79147: EMPTY
79148: LIST
79149: LIST
79150: PUSH
79151: LD_INT 4
79153: NEG
79154: PUSH
79155: LD_INT 0
79157: PUSH
79158: EMPTY
79159: LIST
79160: LIST
79161: PUSH
79162: LD_INT 4
79164: NEG
79165: PUSH
79166: LD_INT 1
79168: NEG
79169: PUSH
79170: EMPTY
79171: LIST
79172: LIST
79173: PUSH
79174: LD_INT 4
79176: NEG
79177: PUSH
79178: LD_INT 2
79180: NEG
79181: PUSH
79182: EMPTY
79183: LIST
79184: LIST
79185: PUSH
79186: LD_INT 2
79188: NEG
79189: PUSH
79190: LD_INT 2
79192: PUSH
79193: EMPTY
79194: LIST
79195: LIST
79196: PUSH
79197: LD_INT 4
79199: NEG
79200: PUSH
79201: LD_INT 4
79203: NEG
79204: PUSH
79205: EMPTY
79206: LIST
79207: LIST
79208: PUSH
79209: LD_INT 4
79211: NEG
79212: PUSH
79213: LD_INT 5
79215: NEG
79216: PUSH
79217: EMPTY
79218: LIST
79219: LIST
79220: PUSH
79221: LD_INT 3
79223: NEG
79224: PUSH
79225: LD_INT 4
79227: NEG
79228: PUSH
79229: EMPTY
79230: LIST
79231: LIST
79232: PUSH
79233: LD_INT 3
79235: NEG
79236: PUSH
79237: LD_INT 3
79239: NEG
79240: PUSH
79241: EMPTY
79242: LIST
79243: LIST
79244: PUSH
79245: LD_INT 4
79247: NEG
79248: PUSH
79249: LD_INT 3
79251: NEG
79252: PUSH
79253: EMPTY
79254: LIST
79255: LIST
79256: PUSH
79257: LD_INT 5
79259: NEG
79260: PUSH
79261: LD_INT 4
79263: NEG
79264: PUSH
79265: EMPTY
79266: LIST
79267: LIST
79268: PUSH
79269: LD_INT 5
79271: NEG
79272: PUSH
79273: LD_INT 5
79275: NEG
79276: PUSH
79277: EMPTY
79278: LIST
79279: LIST
79280: PUSH
79281: LD_INT 3
79283: NEG
79284: PUSH
79285: LD_INT 5
79287: NEG
79288: PUSH
79289: EMPTY
79290: LIST
79291: LIST
79292: PUSH
79293: LD_INT 5
79295: NEG
79296: PUSH
79297: LD_INT 3
79299: NEG
79300: PUSH
79301: EMPTY
79302: LIST
79303: LIST
79304: PUSH
79305: EMPTY
79306: LIST
79307: LIST
79308: LIST
79309: LIST
79310: LIST
79311: LIST
79312: LIST
79313: LIST
79314: LIST
79315: LIST
79316: LIST
79317: LIST
79318: LIST
79319: LIST
79320: LIST
79321: LIST
79322: LIST
79323: LIST
79324: LIST
79325: LIST
79326: LIST
79327: LIST
79328: LIST
79329: LIST
79330: LIST
79331: LIST
79332: LIST
79333: LIST
79334: LIST
79335: LIST
79336: LIST
79337: LIST
79338: LIST
79339: LIST
79340: LIST
79341: LIST
79342: LIST
79343: LIST
79344: LIST
79345: LIST
79346: LIST
79347: LIST
79348: LIST
79349: LIST
79350: LIST
79351: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
79352: LD_ADDR_VAR 0 30
79356: PUSH
79357: LD_INT 4
79359: PUSH
79360: LD_INT 4
79362: PUSH
79363: EMPTY
79364: LIST
79365: LIST
79366: PUSH
79367: LD_INT 4
79369: PUSH
79370: LD_INT 3
79372: PUSH
79373: EMPTY
79374: LIST
79375: LIST
79376: PUSH
79377: LD_INT 5
79379: PUSH
79380: LD_INT 4
79382: PUSH
79383: EMPTY
79384: LIST
79385: LIST
79386: PUSH
79387: LD_INT 5
79389: PUSH
79390: LD_INT 5
79392: PUSH
79393: EMPTY
79394: LIST
79395: LIST
79396: PUSH
79397: LD_INT 4
79399: PUSH
79400: LD_INT 5
79402: PUSH
79403: EMPTY
79404: LIST
79405: LIST
79406: PUSH
79407: LD_INT 3
79409: PUSH
79410: LD_INT 4
79412: PUSH
79413: EMPTY
79414: LIST
79415: LIST
79416: PUSH
79417: LD_INT 3
79419: PUSH
79420: LD_INT 3
79422: PUSH
79423: EMPTY
79424: LIST
79425: LIST
79426: PUSH
79427: LD_INT 5
79429: PUSH
79430: LD_INT 3
79432: PUSH
79433: EMPTY
79434: LIST
79435: LIST
79436: PUSH
79437: LD_INT 3
79439: PUSH
79440: LD_INT 5
79442: PUSH
79443: EMPTY
79444: LIST
79445: LIST
79446: PUSH
79447: LD_INT 0
79449: PUSH
79450: LD_INT 3
79452: PUSH
79453: EMPTY
79454: LIST
79455: LIST
79456: PUSH
79457: LD_INT 0
79459: PUSH
79460: LD_INT 2
79462: PUSH
79463: EMPTY
79464: LIST
79465: LIST
79466: PUSH
79467: LD_INT 1
79469: PUSH
79470: LD_INT 3
79472: PUSH
79473: EMPTY
79474: LIST
79475: LIST
79476: PUSH
79477: LD_INT 1
79479: PUSH
79480: LD_INT 4
79482: PUSH
79483: EMPTY
79484: LIST
79485: LIST
79486: PUSH
79487: LD_INT 0
79489: PUSH
79490: LD_INT 4
79492: PUSH
79493: EMPTY
79494: LIST
79495: LIST
79496: PUSH
79497: LD_INT 1
79499: NEG
79500: PUSH
79501: LD_INT 3
79503: PUSH
79504: EMPTY
79505: LIST
79506: LIST
79507: PUSH
79508: LD_INT 1
79510: NEG
79511: PUSH
79512: LD_INT 2
79514: PUSH
79515: EMPTY
79516: LIST
79517: LIST
79518: PUSH
79519: LD_INT 2
79521: PUSH
79522: LD_INT 4
79524: PUSH
79525: EMPTY
79526: LIST
79527: LIST
79528: PUSH
79529: LD_INT 2
79531: NEG
79532: PUSH
79533: LD_INT 2
79535: PUSH
79536: EMPTY
79537: LIST
79538: LIST
79539: PUSH
79540: LD_INT 4
79542: NEG
79543: PUSH
79544: LD_INT 0
79546: PUSH
79547: EMPTY
79548: LIST
79549: LIST
79550: PUSH
79551: LD_INT 4
79553: NEG
79554: PUSH
79555: LD_INT 1
79557: NEG
79558: PUSH
79559: EMPTY
79560: LIST
79561: LIST
79562: PUSH
79563: LD_INT 3
79565: NEG
79566: PUSH
79567: LD_INT 0
79569: PUSH
79570: EMPTY
79571: LIST
79572: LIST
79573: PUSH
79574: LD_INT 3
79576: NEG
79577: PUSH
79578: LD_INT 1
79580: PUSH
79581: EMPTY
79582: LIST
79583: LIST
79584: PUSH
79585: LD_INT 4
79587: NEG
79588: PUSH
79589: LD_INT 1
79591: PUSH
79592: EMPTY
79593: LIST
79594: LIST
79595: PUSH
79596: LD_INT 5
79598: NEG
79599: PUSH
79600: LD_INT 0
79602: PUSH
79603: EMPTY
79604: LIST
79605: LIST
79606: PUSH
79607: LD_INT 5
79609: NEG
79610: PUSH
79611: LD_INT 1
79613: NEG
79614: PUSH
79615: EMPTY
79616: LIST
79617: LIST
79618: PUSH
79619: LD_INT 5
79621: NEG
79622: PUSH
79623: LD_INT 2
79625: NEG
79626: PUSH
79627: EMPTY
79628: LIST
79629: LIST
79630: PUSH
79631: LD_INT 3
79633: NEG
79634: PUSH
79635: LD_INT 2
79637: PUSH
79638: EMPTY
79639: LIST
79640: LIST
79641: PUSH
79642: LD_INT 3
79644: NEG
79645: PUSH
79646: LD_INT 3
79648: NEG
79649: PUSH
79650: EMPTY
79651: LIST
79652: LIST
79653: PUSH
79654: LD_INT 3
79656: NEG
79657: PUSH
79658: LD_INT 4
79660: NEG
79661: PUSH
79662: EMPTY
79663: LIST
79664: LIST
79665: PUSH
79666: LD_INT 2
79668: NEG
79669: PUSH
79670: LD_INT 3
79672: NEG
79673: PUSH
79674: EMPTY
79675: LIST
79676: LIST
79677: PUSH
79678: LD_INT 2
79680: NEG
79681: PUSH
79682: LD_INT 2
79684: NEG
79685: PUSH
79686: EMPTY
79687: LIST
79688: LIST
79689: PUSH
79690: LD_INT 3
79692: NEG
79693: PUSH
79694: LD_INT 2
79696: NEG
79697: PUSH
79698: EMPTY
79699: LIST
79700: LIST
79701: PUSH
79702: LD_INT 4
79704: NEG
79705: PUSH
79706: LD_INT 3
79708: NEG
79709: PUSH
79710: EMPTY
79711: LIST
79712: LIST
79713: PUSH
79714: LD_INT 4
79716: NEG
79717: PUSH
79718: LD_INT 4
79720: NEG
79721: PUSH
79722: EMPTY
79723: LIST
79724: LIST
79725: PUSH
79726: LD_INT 2
79728: NEG
79729: PUSH
79730: LD_INT 4
79732: NEG
79733: PUSH
79734: EMPTY
79735: LIST
79736: LIST
79737: PUSH
79738: LD_INT 4
79740: NEG
79741: PUSH
79742: LD_INT 2
79744: NEG
79745: PUSH
79746: EMPTY
79747: LIST
79748: LIST
79749: PUSH
79750: LD_INT 0
79752: PUSH
79753: LD_INT 4
79755: NEG
79756: PUSH
79757: EMPTY
79758: LIST
79759: LIST
79760: PUSH
79761: LD_INT 0
79763: PUSH
79764: LD_INT 5
79766: NEG
79767: PUSH
79768: EMPTY
79769: LIST
79770: LIST
79771: PUSH
79772: LD_INT 1
79774: PUSH
79775: LD_INT 4
79777: NEG
79778: PUSH
79779: EMPTY
79780: LIST
79781: LIST
79782: PUSH
79783: LD_INT 1
79785: PUSH
79786: LD_INT 3
79788: NEG
79789: PUSH
79790: EMPTY
79791: LIST
79792: LIST
79793: PUSH
79794: LD_INT 0
79796: PUSH
79797: LD_INT 3
79799: NEG
79800: PUSH
79801: EMPTY
79802: LIST
79803: LIST
79804: PUSH
79805: LD_INT 1
79807: NEG
79808: PUSH
79809: LD_INT 4
79811: NEG
79812: PUSH
79813: EMPTY
79814: LIST
79815: LIST
79816: PUSH
79817: LD_INT 1
79819: NEG
79820: PUSH
79821: LD_INT 5
79823: NEG
79824: PUSH
79825: EMPTY
79826: LIST
79827: LIST
79828: PUSH
79829: LD_INT 2
79831: PUSH
79832: LD_INT 3
79834: NEG
79835: PUSH
79836: EMPTY
79837: LIST
79838: LIST
79839: PUSH
79840: LD_INT 2
79842: NEG
79843: PUSH
79844: LD_INT 5
79846: NEG
79847: PUSH
79848: EMPTY
79849: LIST
79850: LIST
79851: PUSH
79852: EMPTY
79853: LIST
79854: LIST
79855: LIST
79856: LIST
79857: LIST
79858: LIST
79859: LIST
79860: LIST
79861: LIST
79862: LIST
79863: LIST
79864: LIST
79865: LIST
79866: LIST
79867: LIST
79868: LIST
79869: LIST
79870: LIST
79871: LIST
79872: LIST
79873: LIST
79874: LIST
79875: LIST
79876: LIST
79877: LIST
79878: LIST
79879: LIST
79880: LIST
79881: LIST
79882: LIST
79883: LIST
79884: LIST
79885: LIST
79886: LIST
79887: LIST
79888: LIST
79889: LIST
79890: LIST
79891: LIST
79892: LIST
79893: LIST
79894: LIST
79895: LIST
79896: LIST
79897: LIST
79898: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
79899: LD_ADDR_VAR 0 31
79903: PUSH
79904: LD_INT 0
79906: PUSH
79907: LD_INT 4
79909: PUSH
79910: EMPTY
79911: LIST
79912: LIST
79913: PUSH
79914: LD_INT 0
79916: PUSH
79917: LD_INT 3
79919: PUSH
79920: EMPTY
79921: LIST
79922: LIST
79923: PUSH
79924: LD_INT 1
79926: PUSH
79927: LD_INT 4
79929: PUSH
79930: EMPTY
79931: LIST
79932: LIST
79933: PUSH
79934: LD_INT 1
79936: PUSH
79937: LD_INT 5
79939: PUSH
79940: EMPTY
79941: LIST
79942: LIST
79943: PUSH
79944: LD_INT 0
79946: PUSH
79947: LD_INT 5
79949: PUSH
79950: EMPTY
79951: LIST
79952: LIST
79953: PUSH
79954: LD_INT 1
79956: NEG
79957: PUSH
79958: LD_INT 4
79960: PUSH
79961: EMPTY
79962: LIST
79963: LIST
79964: PUSH
79965: LD_INT 1
79967: NEG
79968: PUSH
79969: LD_INT 3
79971: PUSH
79972: EMPTY
79973: LIST
79974: LIST
79975: PUSH
79976: LD_INT 2
79978: PUSH
79979: LD_INT 5
79981: PUSH
79982: EMPTY
79983: LIST
79984: LIST
79985: PUSH
79986: LD_INT 2
79988: NEG
79989: PUSH
79990: LD_INT 3
79992: PUSH
79993: EMPTY
79994: LIST
79995: LIST
79996: PUSH
79997: LD_INT 3
79999: NEG
80000: PUSH
80001: LD_INT 0
80003: PUSH
80004: EMPTY
80005: LIST
80006: LIST
80007: PUSH
80008: LD_INT 3
80010: NEG
80011: PUSH
80012: LD_INT 1
80014: NEG
80015: PUSH
80016: EMPTY
80017: LIST
80018: LIST
80019: PUSH
80020: LD_INT 2
80022: NEG
80023: PUSH
80024: LD_INT 0
80026: PUSH
80027: EMPTY
80028: LIST
80029: LIST
80030: PUSH
80031: LD_INT 2
80033: NEG
80034: PUSH
80035: LD_INT 1
80037: PUSH
80038: EMPTY
80039: LIST
80040: LIST
80041: PUSH
80042: LD_INT 3
80044: NEG
80045: PUSH
80046: LD_INT 1
80048: PUSH
80049: EMPTY
80050: LIST
80051: LIST
80052: PUSH
80053: LD_INT 4
80055: NEG
80056: PUSH
80057: LD_INT 0
80059: PUSH
80060: EMPTY
80061: LIST
80062: LIST
80063: PUSH
80064: LD_INT 4
80066: NEG
80067: PUSH
80068: LD_INT 1
80070: NEG
80071: PUSH
80072: EMPTY
80073: LIST
80074: LIST
80075: PUSH
80076: LD_INT 4
80078: NEG
80079: PUSH
80080: LD_INT 2
80082: NEG
80083: PUSH
80084: EMPTY
80085: LIST
80086: LIST
80087: PUSH
80088: LD_INT 2
80090: NEG
80091: PUSH
80092: LD_INT 2
80094: PUSH
80095: EMPTY
80096: LIST
80097: LIST
80098: PUSH
80099: LD_INT 4
80101: NEG
80102: PUSH
80103: LD_INT 4
80105: NEG
80106: PUSH
80107: EMPTY
80108: LIST
80109: LIST
80110: PUSH
80111: LD_INT 4
80113: NEG
80114: PUSH
80115: LD_INT 5
80117: NEG
80118: PUSH
80119: EMPTY
80120: LIST
80121: LIST
80122: PUSH
80123: LD_INT 3
80125: NEG
80126: PUSH
80127: LD_INT 4
80129: NEG
80130: PUSH
80131: EMPTY
80132: LIST
80133: LIST
80134: PUSH
80135: LD_INT 3
80137: NEG
80138: PUSH
80139: LD_INT 3
80141: NEG
80142: PUSH
80143: EMPTY
80144: LIST
80145: LIST
80146: PUSH
80147: LD_INT 4
80149: NEG
80150: PUSH
80151: LD_INT 3
80153: NEG
80154: PUSH
80155: EMPTY
80156: LIST
80157: LIST
80158: PUSH
80159: LD_INT 5
80161: NEG
80162: PUSH
80163: LD_INT 4
80165: NEG
80166: PUSH
80167: EMPTY
80168: LIST
80169: LIST
80170: PUSH
80171: LD_INT 5
80173: NEG
80174: PUSH
80175: LD_INT 5
80177: NEG
80178: PUSH
80179: EMPTY
80180: LIST
80181: LIST
80182: PUSH
80183: LD_INT 3
80185: NEG
80186: PUSH
80187: LD_INT 5
80189: NEG
80190: PUSH
80191: EMPTY
80192: LIST
80193: LIST
80194: PUSH
80195: LD_INT 5
80197: NEG
80198: PUSH
80199: LD_INT 3
80201: NEG
80202: PUSH
80203: EMPTY
80204: LIST
80205: LIST
80206: PUSH
80207: LD_INT 0
80209: PUSH
80210: LD_INT 3
80212: NEG
80213: PUSH
80214: EMPTY
80215: LIST
80216: LIST
80217: PUSH
80218: LD_INT 0
80220: PUSH
80221: LD_INT 4
80223: NEG
80224: PUSH
80225: EMPTY
80226: LIST
80227: LIST
80228: PUSH
80229: LD_INT 1
80231: PUSH
80232: LD_INT 3
80234: NEG
80235: PUSH
80236: EMPTY
80237: LIST
80238: LIST
80239: PUSH
80240: LD_INT 1
80242: PUSH
80243: LD_INT 2
80245: NEG
80246: PUSH
80247: EMPTY
80248: LIST
80249: LIST
80250: PUSH
80251: LD_INT 0
80253: PUSH
80254: LD_INT 2
80256: NEG
80257: PUSH
80258: EMPTY
80259: LIST
80260: LIST
80261: PUSH
80262: LD_INT 1
80264: NEG
80265: PUSH
80266: LD_INT 3
80268: NEG
80269: PUSH
80270: EMPTY
80271: LIST
80272: LIST
80273: PUSH
80274: LD_INT 1
80276: NEG
80277: PUSH
80278: LD_INT 4
80280: NEG
80281: PUSH
80282: EMPTY
80283: LIST
80284: LIST
80285: PUSH
80286: LD_INT 2
80288: PUSH
80289: LD_INT 2
80291: NEG
80292: PUSH
80293: EMPTY
80294: LIST
80295: LIST
80296: PUSH
80297: LD_INT 2
80299: NEG
80300: PUSH
80301: LD_INT 4
80303: NEG
80304: PUSH
80305: EMPTY
80306: LIST
80307: LIST
80308: PUSH
80309: LD_INT 4
80311: PUSH
80312: LD_INT 0
80314: PUSH
80315: EMPTY
80316: LIST
80317: LIST
80318: PUSH
80319: LD_INT 4
80321: PUSH
80322: LD_INT 1
80324: NEG
80325: PUSH
80326: EMPTY
80327: LIST
80328: LIST
80329: PUSH
80330: LD_INT 5
80332: PUSH
80333: LD_INT 0
80335: PUSH
80336: EMPTY
80337: LIST
80338: LIST
80339: PUSH
80340: LD_INT 5
80342: PUSH
80343: LD_INT 1
80345: PUSH
80346: EMPTY
80347: LIST
80348: LIST
80349: PUSH
80350: LD_INT 4
80352: PUSH
80353: LD_INT 1
80355: PUSH
80356: EMPTY
80357: LIST
80358: LIST
80359: PUSH
80360: LD_INT 3
80362: PUSH
80363: LD_INT 0
80365: PUSH
80366: EMPTY
80367: LIST
80368: LIST
80369: PUSH
80370: LD_INT 3
80372: PUSH
80373: LD_INT 1
80375: NEG
80376: PUSH
80377: EMPTY
80378: LIST
80379: LIST
80380: PUSH
80381: LD_INT 3
80383: PUSH
80384: LD_INT 2
80386: NEG
80387: PUSH
80388: EMPTY
80389: LIST
80390: LIST
80391: PUSH
80392: LD_INT 5
80394: PUSH
80395: LD_INT 2
80397: PUSH
80398: EMPTY
80399: LIST
80400: LIST
80401: PUSH
80402: EMPTY
80403: LIST
80404: LIST
80405: LIST
80406: LIST
80407: LIST
80408: LIST
80409: LIST
80410: LIST
80411: LIST
80412: LIST
80413: LIST
80414: LIST
80415: LIST
80416: LIST
80417: LIST
80418: LIST
80419: LIST
80420: LIST
80421: LIST
80422: LIST
80423: LIST
80424: LIST
80425: LIST
80426: LIST
80427: LIST
80428: LIST
80429: LIST
80430: LIST
80431: LIST
80432: LIST
80433: LIST
80434: LIST
80435: LIST
80436: LIST
80437: LIST
80438: LIST
80439: LIST
80440: LIST
80441: LIST
80442: LIST
80443: LIST
80444: LIST
80445: LIST
80446: LIST
80447: LIST
80448: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
80449: LD_ADDR_VAR 0 32
80453: PUSH
80454: LD_INT 4
80456: NEG
80457: PUSH
80458: LD_INT 0
80460: PUSH
80461: EMPTY
80462: LIST
80463: LIST
80464: PUSH
80465: LD_INT 4
80467: NEG
80468: PUSH
80469: LD_INT 1
80471: NEG
80472: PUSH
80473: EMPTY
80474: LIST
80475: LIST
80476: PUSH
80477: LD_INT 3
80479: NEG
80480: PUSH
80481: LD_INT 0
80483: PUSH
80484: EMPTY
80485: LIST
80486: LIST
80487: PUSH
80488: LD_INT 3
80490: NEG
80491: PUSH
80492: LD_INT 1
80494: PUSH
80495: EMPTY
80496: LIST
80497: LIST
80498: PUSH
80499: LD_INT 4
80501: NEG
80502: PUSH
80503: LD_INT 1
80505: PUSH
80506: EMPTY
80507: LIST
80508: LIST
80509: PUSH
80510: LD_INT 5
80512: NEG
80513: PUSH
80514: LD_INT 0
80516: PUSH
80517: EMPTY
80518: LIST
80519: LIST
80520: PUSH
80521: LD_INT 5
80523: NEG
80524: PUSH
80525: LD_INT 1
80527: NEG
80528: PUSH
80529: EMPTY
80530: LIST
80531: LIST
80532: PUSH
80533: LD_INT 5
80535: NEG
80536: PUSH
80537: LD_INT 2
80539: NEG
80540: PUSH
80541: EMPTY
80542: LIST
80543: LIST
80544: PUSH
80545: LD_INT 3
80547: NEG
80548: PUSH
80549: LD_INT 2
80551: PUSH
80552: EMPTY
80553: LIST
80554: LIST
80555: PUSH
80556: LD_INT 3
80558: NEG
80559: PUSH
80560: LD_INT 3
80562: NEG
80563: PUSH
80564: EMPTY
80565: LIST
80566: LIST
80567: PUSH
80568: LD_INT 3
80570: NEG
80571: PUSH
80572: LD_INT 4
80574: NEG
80575: PUSH
80576: EMPTY
80577: LIST
80578: LIST
80579: PUSH
80580: LD_INT 2
80582: NEG
80583: PUSH
80584: LD_INT 3
80586: NEG
80587: PUSH
80588: EMPTY
80589: LIST
80590: LIST
80591: PUSH
80592: LD_INT 2
80594: NEG
80595: PUSH
80596: LD_INT 2
80598: NEG
80599: PUSH
80600: EMPTY
80601: LIST
80602: LIST
80603: PUSH
80604: LD_INT 3
80606: NEG
80607: PUSH
80608: LD_INT 2
80610: NEG
80611: PUSH
80612: EMPTY
80613: LIST
80614: LIST
80615: PUSH
80616: LD_INT 4
80618: NEG
80619: PUSH
80620: LD_INT 3
80622: NEG
80623: PUSH
80624: EMPTY
80625: LIST
80626: LIST
80627: PUSH
80628: LD_INT 4
80630: NEG
80631: PUSH
80632: LD_INT 4
80634: NEG
80635: PUSH
80636: EMPTY
80637: LIST
80638: LIST
80639: PUSH
80640: LD_INT 2
80642: NEG
80643: PUSH
80644: LD_INT 4
80646: NEG
80647: PUSH
80648: EMPTY
80649: LIST
80650: LIST
80651: PUSH
80652: LD_INT 4
80654: NEG
80655: PUSH
80656: LD_INT 2
80658: NEG
80659: PUSH
80660: EMPTY
80661: LIST
80662: LIST
80663: PUSH
80664: LD_INT 0
80666: PUSH
80667: LD_INT 4
80669: NEG
80670: PUSH
80671: EMPTY
80672: LIST
80673: LIST
80674: PUSH
80675: LD_INT 0
80677: PUSH
80678: LD_INT 5
80680: NEG
80681: PUSH
80682: EMPTY
80683: LIST
80684: LIST
80685: PUSH
80686: LD_INT 1
80688: PUSH
80689: LD_INT 4
80691: NEG
80692: PUSH
80693: EMPTY
80694: LIST
80695: LIST
80696: PUSH
80697: LD_INT 1
80699: PUSH
80700: LD_INT 3
80702: NEG
80703: PUSH
80704: EMPTY
80705: LIST
80706: LIST
80707: PUSH
80708: LD_INT 0
80710: PUSH
80711: LD_INT 3
80713: NEG
80714: PUSH
80715: EMPTY
80716: LIST
80717: LIST
80718: PUSH
80719: LD_INT 1
80721: NEG
80722: PUSH
80723: LD_INT 4
80725: NEG
80726: PUSH
80727: EMPTY
80728: LIST
80729: LIST
80730: PUSH
80731: LD_INT 1
80733: NEG
80734: PUSH
80735: LD_INT 5
80737: NEG
80738: PUSH
80739: EMPTY
80740: LIST
80741: LIST
80742: PUSH
80743: LD_INT 2
80745: PUSH
80746: LD_INT 3
80748: NEG
80749: PUSH
80750: EMPTY
80751: LIST
80752: LIST
80753: PUSH
80754: LD_INT 2
80756: NEG
80757: PUSH
80758: LD_INT 5
80760: NEG
80761: PUSH
80762: EMPTY
80763: LIST
80764: LIST
80765: PUSH
80766: LD_INT 3
80768: PUSH
80769: LD_INT 0
80771: PUSH
80772: EMPTY
80773: LIST
80774: LIST
80775: PUSH
80776: LD_INT 3
80778: PUSH
80779: LD_INT 1
80781: NEG
80782: PUSH
80783: EMPTY
80784: LIST
80785: LIST
80786: PUSH
80787: LD_INT 4
80789: PUSH
80790: LD_INT 0
80792: PUSH
80793: EMPTY
80794: LIST
80795: LIST
80796: PUSH
80797: LD_INT 4
80799: PUSH
80800: LD_INT 1
80802: PUSH
80803: EMPTY
80804: LIST
80805: LIST
80806: PUSH
80807: LD_INT 3
80809: PUSH
80810: LD_INT 1
80812: PUSH
80813: EMPTY
80814: LIST
80815: LIST
80816: PUSH
80817: LD_INT 2
80819: PUSH
80820: LD_INT 0
80822: PUSH
80823: EMPTY
80824: LIST
80825: LIST
80826: PUSH
80827: LD_INT 2
80829: PUSH
80830: LD_INT 1
80832: NEG
80833: PUSH
80834: EMPTY
80835: LIST
80836: LIST
80837: PUSH
80838: LD_INT 2
80840: PUSH
80841: LD_INT 2
80843: NEG
80844: PUSH
80845: EMPTY
80846: LIST
80847: LIST
80848: PUSH
80849: LD_INT 4
80851: PUSH
80852: LD_INT 2
80854: PUSH
80855: EMPTY
80856: LIST
80857: LIST
80858: PUSH
80859: LD_INT 4
80861: PUSH
80862: LD_INT 4
80864: PUSH
80865: EMPTY
80866: LIST
80867: LIST
80868: PUSH
80869: LD_INT 4
80871: PUSH
80872: LD_INT 3
80874: PUSH
80875: EMPTY
80876: LIST
80877: LIST
80878: PUSH
80879: LD_INT 5
80881: PUSH
80882: LD_INT 4
80884: PUSH
80885: EMPTY
80886: LIST
80887: LIST
80888: PUSH
80889: LD_INT 5
80891: PUSH
80892: LD_INT 5
80894: PUSH
80895: EMPTY
80896: LIST
80897: LIST
80898: PUSH
80899: LD_INT 4
80901: PUSH
80902: LD_INT 5
80904: PUSH
80905: EMPTY
80906: LIST
80907: LIST
80908: PUSH
80909: LD_INT 3
80911: PUSH
80912: LD_INT 4
80914: PUSH
80915: EMPTY
80916: LIST
80917: LIST
80918: PUSH
80919: LD_INT 3
80921: PUSH
80922: LD_INT 3
80924: PUSH
80925: EMPTY
80926: LIST
80927: LIST
80928: PUSH
80929: LD_INT 5
80931: PUSH
80932: LD_INT 3
80934: PUSH
80935: EMPTY
80936: LIST
80937: LIST
80938: PUSH
80939: LD_INT 3
80941: PUSH
80942: LD_INT 5
80944: PUSH
80945: EMPTY
80946: LIST
80947: LIST
80948: PUSH
80949: EMPTY
80950: LIST
80951: LIST
80952: LIST
80953: LIST
80954: LIST
80955: LIST
80956: LIST
80957: LIST
80958: LIST
80959: LIST
80960: LIST
80961: LIST
80962: LIST
80963: LIST
80964: LIST
80965: LIST
80966: LIST
80967: LIST
80968: LIST
80969: LIST
80970: LIST
80971: LIST
80972: LIST
80973: LIST
80974: LIST
80975: LIST
80976: LIST
80977: LIST
80978: LIST
80979: LIST
80980: LIST
80981: LIST
80982: LIST
80983: LIST
80984: LIST
80985: LIST
80986: LIST
80987: LIST
80988: LIST
80989: LIST
80990: LIST
80991: LIST
80992: LIST
80993: LIST
80994: LIST
80995: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
80996: LD_ADDR_VAR 0 33
81000: PUSH
81001: LD_INT 4
81003: NEG
81004: PUSH
81005: LD_INT 4
81007: NEG
81008: PUSH
81009: EMPTY
81010: LIST
81011: LIST
81012: PUSH
81013: LD_INT 4
81015: NEG
81016: PUSH
81017: LD_INT 5
81019: NEG
81020: PUSH
81021: EMPTY
81022: LIST
81023: LIST
81024: PUSH
81025: LD_INT 3
81027: NEG
81028: PUSH
81029: LD_INT 4
81031: NEG
81032: PUSH
81033: EMPTY
81034: LIST
81035: LIST
81036: PUSH
81037: LD_INT 3
81039: NEG
81040: PUSH
81041: LD_INT 3
81043: NEG
81044: PUSH
81045: EMPTY
81046: LIST
81047: LIST
81048: PUSH
81049: LD_INT 4
81051: NEG
81052: PUSH
81053: LD_INT 3
81055: NEG
81056: PUSH
81057: EMPTY
81058: LIST
81059: LIST
81060: PUSH
81061: LD_INT 5
81063: NEG
81064: PUSH
81065: LD_INT 4
81067: NEG
81068: PUSH
81069: EMPTY
81070: LIST
81071: LIST
81072: PUSH
81073: LD_INT 5
81075: NEG
81076: PUSH
81077: LD_INT 5
81079: NEG
81080: PUSH
81081: EMPTY
81082: LIST
81083: LIST
81084: PUSH
81085: LD_INT 3
81087: NEG
81088: PUSH
81089: LD_INT 5
81091: NEG
81092: PUSH
81093: EMPTY
81094: LIST
81095: LIST
81096: PUSH
81097: LD_INT 5
81099: NEG
81100: PUSH
81101: LD_INT 3
81103: NEG
81104: PUSH
81105: EMPTY
81106: LIST
81107: LIST
81108: PUSH
81109: LD_INT 0
81111: PUSH
81112: LD_INT 3
81114: NEG
81115: PUSH
81116: EMPTY
81117: LIST
81118: LIST
81119: PUSH
81120: LD_INT 0
81122: PUSH
81123: LD_INT 4
81125: NEG
81126: PUSH
81127: EMPTY
81128: LIST
81129: LIST
81130: PUSH
81131: LD_INT 1
81133: PUSH
81134: LD_INT 3
81136: NEG
81137: PUSH
81138: EMPTY
81139: LIST
81140: LIST
81141: PUSH
81142: LD_INT 1
81144: PUSH
81145: LD_INT 2
81147: NEG
81148: PUSH
81149: EMPTY
81150: LIST
81151: LIST
81152: PUSH
81153: LD_INT 0
81155: PUSH
81156: LD_INT 2
81158: NEG
81159: PUSH
81160: EMPTY
81161: LIST
81162: LIST
81163: PUSH
81164: LD_INT 1
81166: NEG
81167: PUSH
81168: LD_INT 3
81170: NEG
81171: PUSH
81172: EMPTY
81173: LIST
81174: LIST
81175: PUSH
81176: LD_INT 1
81178: NEG
81179: PUSH
81180: LD_INT 4
81182: NEG
81183: PUSH
81184: EMPTY
81185: LIST
81186: LIST
81187: PUSH
81188: LD_INT 2
81190: PUSH
81191: LD_INT 2
81193: NEG
81194: PUSH
81195: EMPTY
81196: LIST
81197: LIST
81198: PUSH
81199: LD_INT 2
81201: NEG
81202: PUSH
81203: LD_INT 4
81205: NEG
81206: PUSH
81207: EMPTY
81208: LIST
81209: LIST
81210: PUSH
81211: LD_INT 4
81213: PUSH
81214: LD_INT 0
81216: PUSH
81217: EMPTY
81218: LIST
81219: LIST
81220: PUSH
81221: LD_INT 4
81223: PUSH
81224: LD_INT 1
81226: NEG
81227: PUSH
81228: EMPTY
81229: LIST
81230: LIST
81231: PUSH
81232: LD_INT 5
81234: PUSH
81235: LD_INT 0
81237: PUSH
81238: EMPTY
81239: LIST
81240: LIST
81241: PUSH
81242: LD_INT 5
81244: PUSH
81245: LD_INT 1
81247: PUSH
81248: EMPTY
81249: LIST
81250: LIST
81251: PUSH
81252: LD_INT 4
81254: PUSH
81255: LD_INT 1
81257: PUSH
81258: EMPTY
81259: LIST
81260: LIST
81261: PUSH
81262: LD_INT 3
81264: PUSH
81265: LD_INT 0
81267: PUSH
81268: EMPTY
81269: LIST
81270: LIST
81271: PUSH
81272: LD_INT 3
81274: PUSH
81275: LD_INT 1
81277: NEG
81278: PUSH
81279: EMPTY
81280: LIST
81281: LIST
81282: PUSH
81283: LD_INT 3
81285: PUSH
81286: LD_INT 2
81288: NEG
81289: PUSH
81290: EMPTY
81291: LIST
81292: LIST
81293: PUSH
81294: LD_INT 5
81296: PUSH
81297: LD_INT 2
81299: PUSH
81300: EMPTY
81301: LIST
81302: LIST
81303: PUSH
81304: LD_INT 3
81306: PUSH
81307: LD_INT 3
81309: PUSH
81310: EMPTY
81311: LIST
81312: LIST
81313: PUSH
81314: LD_INT 3
81316: PUSH
81317: LD_INT 2
81319: PUSH
81320: EMPTY
81321: LIST
81322: LIST
81323: PUSH
81324: LD_INT 4
81326: PUSH
81327: LD_INT 3
81329: PUSH
81330: EMPTY
81331: LIST
81332: LIST
81333: PUSH
81334: LD_INT 4
81336: PUSH
81337: LD_INT 4
81339: PUSH
81340: EMPTY
81341: LIST
81342: LIST
81343: PUSH
81344: LD_INT 3
81346: PUSH
81347: LD_INT 4
81349: PUSH
81350: EMPTY
81351: LIST
81352: LIST
81353: PUSH
81354: LD_INT 2
81356: PUSH
81357: LD_INT 3
81359: PUSH
81360: EMPTY
81361: LIST
81362: LIST
81363: PUSH
81364: LD_INT 2
81366: PUSH
81367: LD_INT 2
81369: PUSH
81370: EMPTY
81371: LIST
81372: LIST
81373: PUSH
81374: LD_INT 4
81376: PUSH
81377: LD_INT 2
81379: PUSH
81380: EMPTY
81381: LIST
81382: LIST
81383: PUSH
81384: LD_INT 2
81386: PUSH
81387: LD_INT 4
81389: PUSH
81390: EMPTY
81391: LIST
81392: LIST
81393: PUSH
81394: LD_INT 0
81396: PUSH
81397: LD_INT 4
81399: PUSH
81400: EMPTY
81401: LIST
81402: LIST
81403: PUSH
81404: LD_INT 0
81406: PUSH
81407: LD_INT 3
81409: PUSH
81410: EMPTY
81411: LIST
81412: LIST
81413: PUSH
81414: LD_INT 1
81416: PUSH
81417: LD_INT 4
81419: PUSH
81420: EMPTY
81421: LIST
81422: LIST
81423: PUSH
81424: LD_INT 1
81426: PUSH
81427: LD_INT 5
81429: PUSH
81430: EMPTY
81431: LIST
81432: LIST
81433: PUSH
81434: LD_INT 0
81436: PUSH
81437: LD_INT 5
81439: PUSH
81440: EMPTY
81441: LIST
81442: LIST
81443: PUSH
81444: LD_INT 1
81446: NEG
81447: PUSH
81448: LD_INT 4
81450: PUSH
81451: EMPTY
81452: LIST
81453: LIST
81454: PUSH
81455: LD_INT 1
81457: NEG
81458: PUSH
81459: LD_INT 3
81461: PUSH
81462: EMPTY
81463: LIST
81464: LIST
81465: PUSH
81466: LD_INT 2
81468: PUSH
81469: LD_INT 5
81471: PUSH
81472: EMPTY
81473: LIST
81474: LIST
81475: PUSH
81476: LD_INT 2
81478: NEG
81479: PUSH
81480: LD_INT 3
81482: PUSH
81483: EMPTY
81484: LIST
81485: LIST
81486: PUSH
81487: EMPTY
81488: LIST
81489: LIST
81490: LIST
81491: LIST
81492: LIST
81493: LIST
81494: LIST
81495: LIST
81496: LIST
81497: LIST
81498: LIST
81499: LIST
81500: LIST
81501: LIST
81502: LIST
81503: LIST
81504: LIST
81505: LIST
81506: LIST
81507: LIST
81508: LIST
81509: LIST
81510: LIST
81511: LIST
81512: LIST
81513: LIST
81514: LIST
81515: LIST
81516: LIST
81517: LIST
81518: LIST
81519: LIST
81520: LIST
81521: LIST
81522: LIST
81523: LIST
81524: LIST
81525: LIST
81526: LIST
81527: LIST
81528: LIST
81529: LIST
81530: LIST
81531: LIST
81532: LIST
81533: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
81534: LD_ADDR_VAR 0 34
81538: PUSH
81539: LD_INT 0
81541: PUSH
81542: LD_INT 4
81544: NEG
81545: PUSH
81546: EMPTY
81547: LIST
81548: LIST
81549: PUSH
81550: LD_INT 0
81552: PUSH
81553: LD_INT 5
81555: NEG
81556: PUSH
81557: EMPTY
81558: LIST
81559: LIST
81560: PUSH
81561: LD_INT 1
81563: PUSH
81564: LD_INT 4
81566: NEG
81567: PUSH
81568: EMPTY
81569: LIST
81570: LIST
81571: PUSH
81572: LD_INT 1
81574: PUSH
81575: LD_INT 3
81577: NEG
81578: PUSH
81579: EMPTY
81580: LIST
81581: LIST
81582: PUSH
81583: LD_INT 0
81585: PUSH
81586: LD_INT 3
81588: NEG
81589: PUSH
81590: EMPTY
81591: LIST
81592: LIST
81593: PUSH
81594: LD_INT 1
81596: NEG
81597: PUSH
81598: LD_INT 4
81600: NEG
81601: PUSH
81602: EMPTY
81603: LIST
81604: LIST
81605: PUSH
81606: LD_INT 1
81608: NEG
81609: PUSH
81610: LD_INT 5
81612: NEG
81613: PUSH
81614: EMPTY
81615: LIST
81616: LIST
81617: PUSH
81618: LD_INT 2
81620: PUSH
81621: LD_INT 3
81623: NEG
81624: PUSH
81625: EMPTY
81626: LIST
81627: LIST
81628: PUSH
81629: LD_INT 2
81631: NEG
81632: PUSH
81633: LD_INT 5
81635: NEG
81636: PUSH
81637: EMPTY
81638: LIST
81639: LIST
81640: PUSH
81641: LD_INT 3
81643: PUSH
81644: LD_INT 0
81646: PUSH
81647: EMPTY
81648: LIST
81649: LIST
81650: PUSH
81651: LD_INT 3
81653: PUSH
81654: LD_INT 1
81656: NEG
81657: PUSH
81658: EMPTY
81659: LIST
81660: LIST
81661: PUSH
81662: LD_INT 4
81664: PUSH
81665: LD_INT 0
81667: PUSH
81668: EMPTY
81669: LIST
81670: LIST
81671: PUSH
81672: LD_INT 4
81674: PUSH
81675: LD_INT 1
81677: PUSH
81678: EMPTY
81679: LIST
81680: LIST
81681: PUSH
81682: LD_INT 3
81684: PUSH
81685: LD_INT 1
81687: PUSH
81688: EMPTY
81689: LIST
81690: LIST
81691: PUSH
81692: LD_INT 2
81694: PUSH
81695: LD_INT 0
81697: PUSH
81698: EMPTY
81699: LIST
81700: LIST
81701: PUSH
81702: LD_INT 2
81704: PUSH
81705: LD_INT 1
81707: NEG
81708: PUSH
81709: EMPTY
81710: LIST
81711: LIST
81712: PUSH
81713: LD_INT 2
81715: PUSH
81716: LD_INT 2
81718: NEG
81719: PUSH
81720: EMPTY
81721: LIST
81722: LIST
81723: PUSH
81724: LD_INT 4
81726: PUSH
81727: LD_INT 2
81729: PUSH
81730: EMPTY
81731: LIST
81732: LIST
81733: PUSH
81734: LD_INT 4
81736: PUSH
81737: LD_INT 4
81739: PUSH
81740: EMPTY
81741: LIST
81742: LIST
81743: PUSH
81744: LD_INT 4
81746: PUSH
81747: LD_INT 3
81749: PUSH
81750: EMPTY
81751: LIST
81752: LIST
81753: PUSH
81754: LD_INT 5
81756: PUSH
81757: LD_INT 4
81759: PUSH
81760: EMPTY
81761: LIST
81762: LIST
81763: PUSH
81764: LD_INT 5
81766: PUSH
81767: LD_INT 5
81769: PUSH
81770: EMPTY
81771: LIST
81772: LIST
81773: PUSH
81774: LD_INT 4
81776: PUSH
81777: LD_INT 5
81779: PUSH
81780: EMPTY
81781: LIST
81782: LIST
81783: PUSH
81784: LD_INT 3
81786: PUSH
81787: LD_INT 4
81789: PUSH
81790: EMPTY
81791: LIST
81792: LIST
81793: PUSH
81794: LD_INT 3
81796: PUSH
81797: LD_INT 3
81799: PUSH
81800: EMPTY
81801: LIST
81802: LIST
81803: PUSH
81804: LD_INT 5
81806: PUSH
81807: LD_INT 3
81809: PUSH
81810: EMPTY
81811: LIST
81812: LIST
81813: PUSH
81814: LD_INT 3
81816: PUSH
81817: LD_INT 5
81819: PUSH
81820: EMPTY
81821: LIST
81822: LIST
81823: PUSH
81824: LD_INT 0
81826: PUSH
81827: LD_INT 3
81829: PUSH
81830: EMPTY
81831: LIST
81832: LIST
81833: PUSH
81834: LD_INT 0
81836: PUSH
81837: LD_INT 2
81839: PUSH
81840: EMPTY
81841: LIST
81842: LIST
81843: PUSH
81844: LD_INT 1
81846: PUSH
81847: LD_INT 3
81849: PUSH
81850: EMPTY
81851: LIST
81852: LIST
81853: PUSH
81854: LD_INT 1
81856: PUSH
81857: LD_INT 4
81859: PUSH
81860: EMPTY
81861: LIST
81862: LIST
81863: PUSH
81864: LD_INT 0
81866: PUSH
81867: LD_INT 4
81869: PUSH
81870: EMPTY
81871: LIST
81872: LIST
81873: PUSH
81874: LD_INT 1
81876: NEG
81877: PUSH
81878: LD_INT 3
81880: PUSH
81881: EMPTY
81882: LIST
81883: LIST
81884: PUSH
81885: LD_INT 1
81887: NEG
81888: PUSH
81889: LD_INT 2
81891: PUSH
81892: EMPTY
81893: LIST
81894: LIST
81895: PUSH
81896: LD_INT 2
81898: PUSH
81899: LD_INT 4
81901: PUSH
81902: EMPTY
81903: LIST
81904: LIST
81905: PUSH
81906: LD_INT 2
81908: NEG
81909: PUSH
81910: LD_INT 2
81912: PUSH
81913: EMPTY
81914: LIST
81915: LIST
81916: PUSH
81917: LD_INT 4
81919: NEG
81920: PUSH
81921: LD_INT 0
81923: PUSH
81924: EMPTY
81925: LIST
81926: LIST
81927: PUSH
81928: LD_INT 4
81930: NEG
81931: PUSH
81932: LD_INT 1
81934: NEG
81935: PUSH
81936: EMPTY
81937: LIST
81938: LIST
81939: PUSH
81940: LD_INT 3
81942: NEG
81943: PUSH
81944: LD_INT 0
81946: PUSH
81947: EMPTY
81948: LIST
81949: LIST
81950: PUSH
81951: LD_INT 3
81953: NEG
81954: PUSH
81955: LD_INT 1
81957: PUSH
81958: EMPTY
81959: LIST
81960: LIST
81961: PUSH
81962: LD_INT 4
81964: NEG
81965: PUSH
81966: LD_INT 1
81968: PUSH
81969: EMPTY
81970: LIST
81971: LIST
81972: PUSH
81973: LD_INT 5
81975: NEG
81976: PUSH
81977: LD_INT 0
81979: PUSH
81980: EMPTY
81981: LIST
81982: LIST
81983: PUSH
81984: LD_INT 5
81986: NEG
81987: PUSH
81988: LD_INT 1
81990: NEG
81991: PUSH
81992: EMPTY
81993: LIST
81994: LIST
81995: PUSH
81996: LD_INT 5
81998: NEG
81999: PUSH
82000: LD_INT 2
82002: NEG
82003: PUSH
82004: EMPTY
82005: LIST
82006: LIST
82007: PUSH
82008: LD_INT 3
82010: NEG
82011: PUSH
82012: LD_INT 2
82014: PUSH
82015: EMPTY
82016: LIST
82017: LIST
82018: PUSH
82019: EMPTY
82020: LIST
82021: LIST
82022: LIST
82023: LIST
82024: LIST
82025: LIST
82026: LIST
82027: LIST
82028: LIST
82029: LIST
82030: LIST
82031: LIST
82032: LIST
82033: LIST
82034: LIST
82035: LIST
82036: LIST
82037: LIST
82038: LIST
82039: LIST
82040: LIST
82041: LIST
82042: LIST
82043: LIST
82044: LIST
82045: LIST
82046: LIST
82047: LIST
82048: LIST
82049: LIST
82050: LIST
82051: LIST
82052: LIST
82053: LIST
82054: LIST
82055: LIST
82056: LIST
82057: LIST
82058: LIST
82059: LIST
82060: LIST
82061: LIST
82062: LIST
82063: LIST
82064: LIST
82065: ST_TO_ADDR
// end ; end ;
82066: GO 82069
82068: POP
// case btype of b_depot , b_warehouse :
82069: LD_VAR 0 1
82073: PUSH
82074: LD_INT 0
82076: DOUBLE
82077: EQUAL
82078: IFTRUE 82088
82080: LD_INT 1
82082: DOUBLE
82083: EQUAL
82084: IFTRUE 82088
82086: GO 82289
82088: POP
// case nation of nation_american :
82089: LD_VAR 0 5
82093: PUSH
82094: LD_INT 1
82096: DOUBLE
82097: EQUAL
82098: IFTRUE 82102
82100: GO 82158
82102: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
82103: LD_ADDR_VAR 0 9
82107: PUSH
82108: LD_VAR 0 11
82112: PUSH
82113: LD_VAR 0 12
82117: PUSH
82118: LD_VAR 0 13
82122: PUSH
82123: LD_VAR 0 14
82127: PUSH
82128: LD_VAR 0 15
82132: PUSH
82133: LD_VAR 0 16
82137: PUSH
82138: EMPTY
82139: LIST
82140: LIST
82141: LIST
82142: LIST
82143: LIST
82144: LIST
82145: PUSH
82146: LD_VAR 0 4
82150: PUSH
82151: LD_INT 1
82153: PLUS
82154: ARRAY
82155: ST_TO_ADDR
82156: GO 82287
82158: LD_INT 2
82160: DOUBLE
82161: EQUAL
82162: IFTRUE 82166
82164: GO 82222
82166: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
82167: LD_ADDR_VAR 0 9
82171: PUSH
82172: LD_VAR 0 17
82176: PUSH
82177: LD_VAR 0 18
82181: PUSH
82182: LD_VAR 0 19
82186: PUSH
82187: LD_VAR 0 20
82191: PUSH
82192: LD_VAR 0 21
82196: PUSH
82197: LD_VAR 0 22
82201: PUSH
82202: EMPTY
82203: LIST
82204: LIST
82205: LIST
82206: LIST
82207: LIST
82208: LIST
82209: PUSH
82210: LD_VAR 0 4
82214: PUSH
82215: LD_INT 1
82217: PLUS
82218: ARRAY
82219: ST_TO_ADDR
82220: GO 82287
82222: LD_INT 3
82224: DOUBLE
82225: EQUAL
82226: IFTRUE 82230
82228: GO 82286
82230: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
82231: LD_ADDR_VAR 0 9
82235: PUSH
82236: LD_VAR 0 23
82240: PUSH
82241: LD_VAR 0 24
82245: PUSH
82246: LD_VAR 0 25
82250: PUSH
82251: LD_VAR 0 26
82255: PUSH
82256: LD_VAR 0 27
82260: PUSH
82261: LD_VAR 0 28
82265: PUSH
82266: EMPTY
82267: LIST
82268: LIST
82269: LIST
82270: LIST
82271: LIST
82272: LIST
82273: PUSH
82274: LD_VAR 0 4
82278: PUSH
82279: LD_INT 1
82281: PLUS
82282: ARRAY
82283: ST_TO_ADDR
82284: GO 82287
82286: POP
82287: GO 82842
82289: LD_INT 2
82291: DOUBLE
82292: EQUAL
82293: IFTRUE 82303
82295: LD_INT 3
82297: DOUBLE
82298: EQUAL
82299: IFTRUE 82303
82301: GO 82359
82303: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
82304: LD_ADDR_VAR 0 9
82308: PUSH
82309: LD_VAR 0 29
82313: PUSH
82314: LD_VAR 0 30
82318: PUSH
82319: LD_VAR 0 31
82323: PUSH
82324: LD_VAR 0 32
82328: PUSH
82329: LD_VAR 0 33
82333: PUSH
82334: LD_VAR 0 34
82338: PUSH
82339: EMPTY
82340: LIST
82341: LIST
82342: LIST
82343: LIST
82344: LIST
82345: LIST
82346: PUSH
82347: LD_VAR 0 4
82351: PUSH
82352: LD_INT 1
82354: PLUS
82355: ARRAY
82356: ST_TO_ADDR
82357: GO 82842
82359: LD_INT 16
82361: DOUBLE
82362: EQUAL
82363: IFTRUE 82421
82365: LD_INT 17
82367: DOUBLE
82368: EQUAL
82369: IFTRUE 82421
82371: LD_INT 18
82373: DOUBLE
82374: EQUAL
82375: IFTRUE 82421
82377: LD_INT 19
82379: DOUBLE
82380: EQUAL
82381: IFTRUE 82421
82383: LD_INT 22
82385: DOUBLE
82386: EQUAL
82387: IFTRUE 82421
82389: LD_INT 20
82391: DOUBLE
82392: EQUAL
82393: IFTRUE 82421
82395: LD_INT 21
82397: DOUBLE
82398: EQUAL
82399: IFTRUE 82421
82401: LD_INT 23
82403: DOUBLE
82404: EQUAL
82405: IFTRUE 82421
82407: LD_INT 24
82409: DOUBLE
82410: EQUAL
82411: IFTRUE 82421
82413: LD_INT 25
82415: DOUBLE
82416: EQUAL
82417: IFTRUE 82421
82419: GO 82477
82421: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
82422: LD_ADDR_VAR 0 9
82426: PUSH
82427: LD_VAR 0 35
82431: PUSH
82432: LD_VAR 0 36
82436: PUSH
82437: LD_VAR 0 37
82441: PUSH
82442: LD_VAR 0 38
82446: PUSH
82447: LD_VAR 0 39
82451: PUSH
82452: LD_VAR 0 40
82456: PUSH
82457: EMPTY
82458: LIST
82459: LIST
82460: LIST
82461: LIST
82462: LIST
82463: LIST
82464: PUSH
82465: LD_VAR 0 4
82469: PUSH
82470: LD_INT 1
82472: PLUS
82473: ARRAY
82474: ST_TO_ADDR
82475: GO 82842
82477: LD_INT 6
82479: DOUBLE
82480: EQUAL
82481: IFTRUE 82533
82483: LD_INT 7
82485: DOUBLE
82486: EQUAL
82487: IFTRUE 82533
82489: LD_INT 8
82491: DOUBLE
82492: EQUAL
82493: IFTRUE 82533
82495: LD_INT 13
82497: DOUBLE
82498: EQUAL
82499: IFTRUE 82533
82501: LD_INT 12
82503: DOUBLE
82504: EQUAL
82505: IFTRUE 82533
82507: LD_INT 15
82509: DOUBLE
82510: EQUAL
82511: IFTRUE 82533
82513: LD_INT 11
82515: DOUBLE
82516: EQUAL
82517: IFTRUE 82533
82519: LD_INT 14
82521: DOUBLE
82522: EQUAL
82523: IFTRUE 82533
82525: LD_INT 10
82527: DOUBLE
82528: EQUAL
82529: IFTRUE 82533
82531: GO 82589
82533: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
82534: LD_ADDR_VAR 0 9
82538: PUSH
82539: LD_VAR 0 41
82543: PUSH
82544: LD_VAR 0 42
82548: PUSH
82549: LD_VAR 0 43
82553: PUSH
82554: LD_VAR 0 44
82558: PUSH
82559: LD_VAR 0 45
82563: PUSH
82564: LD_VAR 0 46
82568: PUSH
82569: EMPTY
82570: LIST
82571: LIST
82572: LIST
82573: LIST
82574: LIST
82575: LIST
82576: PUSH
82577: LD_VAR 0 4
82581: PUSH
82582: LD_INT 1
82584: PLUS
82585: ARRAY
82586: ST_TO_ADDR
82587: GO 82842
82589: LD_INT 36
82591: DOUBLE
82592: EQUAL
82593: IFTRUE 82597
82595: GO 82653
82597: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
82598: LD_ADDR_VAR 0 9
82602: PUSH
82603: LD_VAR 0 47
82607: PUSH
82608: LD_VAR 0 48
82612: PUSH
82613: LD_VAR 0 49
82617: PUSH
82618: LD_VAR 0 50
82622: PUSH
82623: LD_VAR 0 51
82627: PUSH
82628: LD_VAR 0 52
82632: PUSH
82633: EMPTY
82634: LIST
82635: LIST
82636: LIST
82637: LIST
82638: LIST
82639: LIST
82640: PUSH
82641: LD_VAR 0 4
82645: PUSH
82646: LD_INT 1
82648: PLUS
82649: ARRAY
82650: ST_TO_ADDR
82651: GO 82842
82653: LD_INT 4
82655: DOUBLE
82656: EQUAL
82657: IFTRUE 82679
82659: LD_INT 5
82661: DOUBLE
82662: EQUAL
82663: IFTRUE 82679
82665: LD_INT 34
82667: DOUBLE
82668: EQUAL
82669: IFTRUE 82679
82671: LD_INT 37
82673: DOUBLE
82674: EQUAL
82675: IFTRUE 82679
82677: GO 82735
82679: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
82680: LD_ADDR_VAR 0 9
82684: PUSH
82685: LD_VAR 0 53
82689: PUSH
82690: LD_VAR 0 54
82694: PUSH
82695: LD_VAR 0 55
82699: PUSH
82700: LD_VAR 0 56
82704: PUSH
82705: LD_VAR 0 57
82709: PUSH
82710: LD_VAR 0 58
82714: PUSH
82715: EMPTY
82716: LIST
82717: LIST
82718: LIST
82719: LIST
82720: LIST
82721: LIST
82722: PUSH
82723: LD_VAR 0 4
82727: PUSH
82728: LD_INT 1
82730: PLUS
82731: ARRAY
82732: ST_TO_ADDR
82733: GO 82842
82735: LD_INT 31
82737: DOUBLE
82738: EQUAL
82739: IFTRUE 82785
82741: LD_INT 32
82743: DOUBLE
82744: EQUAL
82745: IFTRUE 82785
82747: LD_INT 33
82749: DOUBLE
82750: EQUAL
82751: IFTRUE 82785
82753: LD_INT 27
82755: DOUBLE
82756: EQUAL
82757: IFTRUE 82785
82759: LD_INT 26
82761: DOUBLE
82762: EQUAL
82763: IFTRUE 82785
82765: LD_INT 28
82767: DOUBLE
82768: EQUAL
82769: IFTRUE 82785
82771: LD_INT 29
82773: DOUBLE
82774: EQUAL
82775: IFTRUE 82785
82777: LD_INT 30
82779: DOUBLE
82780: EQUAL
82781: IFTRUE 82785
82783: GO 82841
82785: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
82786: LD_ADDR_VAR 0 9
82790: PUSH
82791: LD_VAR 0 59
82795: PUSH
82796: LD_VAR 0 60
82800: PUSH
82801: LD_VAR 0 61
82805: PUSH
82806: LD_VAR 0 62
82810: PUSH
82811: LD_VAR 0 63
82815: PUSH
82816: LD_VAR 0 64
82820: PUSH
82821: EMPTY
82822: LIST
82823: LIST
82824: LIST
82825: LIST
82826: LIST
82827: LIST
82828: PUSH
82829: LD_VAR 0 4
82833: PUSH
82834: LD_INT 1
82836: PLUS
82837: ARRAY
82838: ST_TO_ADDR
82839: GO 82842
82841: POP
// temp_list2 = [ ] ;
82842: LD_ADDR_VAR 0 10
82846: PUSH
82847: EMPTY
82848: ST_TO_ADDR
// for i in temp_list do
82849: LD_ADDR_VAR 0 8
82853: PUSH
82854: LD_VAR 0 9
82858: PUSH
82859: FOR_IN
82860: IFFALSE 82912
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
82862: LD_ADDR_VAR 0 10
82866: PUSH
82867: LD_VAR 0 10
82871: PUSH
82872: LD_VAR 0 8
82876: PUSH
82877: LD_INT 1
82879: ARRAY
82880: PUSH
82881: LD_VAR 0 2
82885: PLUS
82886: PUSH
82887: LD_VAR 0 8
82891: PUSH
82892: LD_INT 2
82894: ARRAY
82895: PUSH
82896: LD_VAR 0 3
82900: PLUS
82901: PUSH
82902: EMPTY
82903: LIST
82904: LIST
82905: PUSH
82906: EMPTY
82907: LIST
82908: ADD
82909: ST_TO_ADDR
82910: GO 82859
82912: POP
82913: POP
// result = temp_list2 ;
82914: LD_ADDR_VAR 0 7
82918: PUSH
82919: LD_VAR 0 10
82923: ST_TO_ADDR
// end ;
82924: LD_VAR 0 7
82928: RET
// export function EnemyInRange ( unit , dist ) ; begin
82929: LD_INT 0
82931: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
82932: LD_ADDR_VAR 0 3
82936: PUSH
82937: LD_VAR 0 1
82941: PPUSH
82942: CALL_OW 255
82946: PPUSH
82947: LD_VAR 0 1
82951: PPUSH
82952: CALL_OW 250
82956: PPUSH
82957: LD_VAR 0 1
82961: PPUSH
82962: CALL_OW 251
82966: PPUSH
82967: LD_VAR 0 2
82971: PPUSH
82972: CALL 56331 0 4
82976: PUSH
82977: LD_INT 4
82979: ARRAY
82980: ST_TO_ADDR
// end ;
82981: LD_VAR 0 3
82985: RET
// export function PlayerSeeMe ( unit ) ; begin
82986: LD_INT 0
82988: PPUSH
// result := See ( your_side , unit ) ;
82989: LD_ADDR_VAR 0 2
82993: PUSH
82994: LD_OWVAR 2
82998: PPUSH
82999: LD_VAR 0 1
83003: PPUSH
83004: CALL_OW 292
83008: ST_TO_ADDR
// end ;
83009: LD_VAR 0 2
83013: RET
// export function ReverseDir ( unit ) ; begin
83014: LD_INT 0
83016: PPUSH
// if not unit then
83017: LD_VAR 0 1
83021: NOT
83022: IFFALSE 83026
// exit ;
83024: GO 83049
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
83026: LD_ADDR_VAR 0 2
83030: PUSH
83031: LD_VAR 0 1
83035: PPUSH
83036: CALL_OW 254
83040: PUSH
83041: LD_INT 3
83043: PLUS
83044: PUSH
83045: LD_INT 6
83047: MOD
83048: ST_TO_ADDR
// end ;
83049: LD_VAR 0 2
83053: RET
// export function ReverseArray ( array ) ; var i ; begin
83054: LD_INT 0
83056: PPUSH
83057: PPUSH
// if not array then
83058: LD_VAR 0 1
83062: NOT
83063: IFFALSE 83067
// exit ;
83065: GO 83122
// result := [ ] ;
83067: LD_ADDR_VAR 0 2
83071: PUSH
83072: EMPTY
83073: ST_TO_ADDR
// for i := array downto 1 do
83074: LD_ADDR_VAR 0 3
83078: PUSH
83079: DOUBLE
83080: LD_VAR 0 1
83084: INC
83085: ST_TO_ADDR
83086: LD_INT 1
83088: PUSH
83089: FOR_DOWNTO
83090: IFFALSE 83120
// result := Join ( result , array [ i ] ) ;
83092: LD_ADDR_VAR 0 2
83096: PUSH
83097: LD_VAR 0 2
83101: PPUSH
83102: LD_VAR 0 1
83106: PUSH
83107: LD_VAR 0 3
83111: ARRAY
83112: PPUSH
83113: CALL 87766 0 2
83117: ST_TO_ADDR
83118: GO 83089
83120: POP
83121: POP
// end ;
83122: LD_VAR 0 2
83126: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
83127: LD_INT 0
83129: PPUSH
83130: PPUSH
83131: PPUSH
83132: PPUSH
83133: PPUSH
83134: PPUSH
// if not unit or not hexes then
83135: LD_VAR 0 1
83139: NOT
83140: PUSH
83141: LD_VAR 0 2
83145: NOT
83146: OR
83147: IFFALSE 83151
// exit ;
83149: GO 83274
// dist := 9999 ;
83151: LD_ADDR_VAR 0 5
83155: PUSH
83156: LD_INT 9999
83158: ST_TO_ADDR
// for i = 1 to hexes do
83159: LD_ADDR_VAR 0 4
83163: PUSH
83164: DOUBLE
83165: LD_INT 1
83167: DEC
83168: ST_TO_ADDR
83169: LD_VAR 0 2
83173: PUSH
83174: FOR_TO
83175: IFFALSE 83262
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
83177: LD_ADDR_VAR 0 6
83181: PUSH
83182: LD_VAR 0 1
83186: PPUSH
83187: LD_VAR 0 2
83191: PUSH
83192: LD_VAR 0 4
83196: ARRAY
83197: PUSH
83198: LD_INT 1
83200: ARRAY
83201: PPUSH
83202: LD_VAR 0 2
83206: PUSH
83207: LD_VAR 0 4
83211: ARRAY
83212: PUSH
83213: LD_INT 2
83215: ARRAY
83216: PPUSH
83217: CALL_OW 297
83221: ST_TO_ADDR
// if tdist < dist then
83222: LD_VAR 0 6
83226: PUSH
83227: LD_VAR 0 5
83231: LESS
83232: IFFALSE 83260
// begin hex := hexes [ i ] ;
83234: LD_ADDR_VAR 0 8
83238: PUSH
83239: LD_VAR 0 2
83243: PUSH
83244: LD_VAR 0 4
83248: ARRAY
83249: ST_TO_ADDR
// dist := tdist ;
83250: LD_ADDR_VAR 0 5
83254: PUSH
83255: LD_VAR 0 6
83259: ST_TO_ADDR
// end ; end ;
83260: GO 83174
83262: POP
83263: POP
// result := hex ;
83264: LD_ADDR_VAR 0 3
83268: PUSH
83269: LD_VAR 0 8
83273: ST_TO_ADDR
// end ;
83274: LD_VAR 0 3
83278: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
83279: LD_INT 0
83281: PPUSH
83282: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
83283: LD_VAR 0 1
83287: NOT
83288: PUSH
83289: LD_VAR 0 1
83293: PUSH
83294: LD_INT 21
83296: PUSH
83297: LD_INT 2
83299: PUSH
83300: EMPTY
83301: LIST
83302: LIST
83303: PUSH
83304: LD_INT 23
83306: PUSH
83307: LD_INT 2
83309: PUSH
83310: EMPTY
83311: LIST
83312: LIST
83313: PUSH
83314: EMPTY
83315: LIST
83316: LIST
83317: PPUSH
83318: CALL_OW 69
83322: IN
83323: NOT
83324: OR
83325: IFFALSE 83329
// exit ;
83327: GO 83376
// for i = 1 to 3 do
83329: LD_ADDR_VAR 0 3
83333: PUSH
83334: DOUBLE
83335: LD_INT 1
83337: DEC
83338: ST_TO_ADDR
83339: LD_INT 3
83341: PUSH
83342: FOR_TO
83343: IFFALSE 83374
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
83345: LD_VAR 0 1
83349: PPUSH
83350: CALL_OW 250
83354: PPUSH
83355: LD_VAR 0 1
83359: PPUSH
83360: CALL_OW 251
83364: PPUSH
83365: LD_INT 1
83367: PPUSH
83368: CALL_OW 453
83372: GO 83342
83374: POP
83375: POP
// end ;
83376: LD_VAR 0 2
83380: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
83381: LD_INT 0
83383: PPUSH
83384: PPUSH
83385: PPUSH
83386: PPUSH
83387: PPUSH
83388: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
83389: LD_VAR 0 1
83393: NOT
83394: PUSH
83395: LD_VAR 0 2
83399: NOT
83400: OR
83401: PUSH
83402: LD_VAR 0 1
83406: PPUSH
83407: CALL_OW 314
83411: OR
83412: IFFALSE 83416
// exit ;
83414: GO 83883
// if GetLives ( i ) < 250 then
83416: LD_VAR 0 4
83420: PPUSH
83421: CALL_OW 256
83425: PUSH
83426: LD_INT 250
83428: LESS
83429: IFFALSE 83442
// begin ComAutodestruct ( i ) ;
83431: LD_VAR 0 4
83435: PPUSH
83436: CALL 83279 0 1
// exit ;
83440: GO 83883
// end ; x := GetX ( enemy_unit ) ;
83442: LD_ADDR_VAR 0 7
83446: PUSH
83447: LD_VAR 0 2
83451: PPUSH
83452: CALL_OW 250
83456: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
83457: LD_ADDR_VAR 0 8
83461: PUSH
83462: LD_VAR 0 2
83466: PPUSH
83467: CALL_OW 251
83471: ST_TO_ADDR
// if not x or not y then
83472: LD_VAR 0 7
83476: NOT
83477: PUSH
83478: LD_VAR 0 8
83482: NOT
83483: OR
83484: IFFALSE 83488
// exit ;
83486: GO 83883
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
83488: LD_ADDR_VAR 0 6
83492: PUSH
83493: LD_VAR 0 7
83497: PPUSH
83498: LD_INT 0
83500: PPUSH
83501: LD_INT 4
83503: PPUSH
83504: CALL_OW 272
83508: PUSH
83509: LD_VAR 0 8
83513: PPUSH
83514: LD_INT 0
83516: PPUSH
83517: LD_INT 4
83519: PPUSH
83520: CALL_OW 273
83524: PUSH
83525: EMPTY
83526: LIST
83527: LIST
83528: PUSH
83529: LD_VAR 0 7
83533: PPUSH
83534: LD_INT 1
83536: PPUSH
83537: LD_INT 4
83539: PPUSH
83540: CALL_OW 272
83544: PUSH
83545: LD_VAR 0 8
83549: PPUSH
83550: LD_INT 1
83552: PPUSH
83553: LD_INT 4
83555: PPUSH
83556: CALL_OW 273
83560: PUSH
83561: EMPTY
83562: LIST
83563: LIST
83564: PUSH
83565: LD_VAR 0 7
83569: PPUSH
83570: LD_INT 2
83572: PPUSH
83573: LD_INT 4
83575: PPUSH
83576: CALL_OW 272
83580: PUSH
83581: LD_VAR 0 8
83585: PPUSH
83586: LD_INT 2
83588: PPUSH
83589: LD_INT 4
83591: PPUSH
83592: CALL_OW 273
83596: PUSH
83597: EMPTY
83598: LIST
83599: LIST
83600: PUSH
83601: LD_VAR 0 7
83605: PPUSH
83606: LD_INT 3
83608: PPUSH
83609: LD_INT 4
83611: PPUSH
83612: CALL_OW 272
83616: PUSH
83617: LD_VAR 0 8
83621: PPUSH
83622: LD_INT 3
83624: PPUSH
83625: LD_INT 4
83627: PPUSH
83628: CALL_OW 273
83632: PUSH
83633: EMPTY
83634: LIST
83635: LIST
83636: PUSH
83637: LD_VAR 0 7
83641: PPUSH
83642: LD_INT 4
83644: PPUSH
83645: LD_INT 4
83647: PPUSH
83648: CALL_OW 272
83652: PUSH
83653: LD_VAR 0 8
83657: PPUSH
83658: LD_INT 4
83660: PPUSH
83661: LD_INT 4
83663: PPUSH
83664: CALL_OW 273
83668: PUSH
83669: EMPTY
83670: LIST
83671: LIST
83672: PUSH
83673: LD_VAR 0 7
83677: PPUSH
83678: LD_INT 5
83680: PPUSH
83681: LD_INT 4
83683: PPUSH
83684: CALL_OW 272
83688: PUSH
83689: LD_VAR 0 8
83693: PPUSH
83694: LD_INT 5
83696: PPUSH
83697: LD_INT 4
83699: PPUSH
83700: CALL_OW 273
83704: PUSH
83705: EMPTY
83706: LIST
83707: LIST
83708: PUSH
83709: EMPTY
83710: LIST
83711: LIST
83712: LIST
83713: LIST
83714: LIST
83715: LIST
83716: ST_TO_ADDR
// for i = tmp downto 1 do
83717: LD_ADDR_VAR 0 4
83721: PUSH
83722: DOUBLE
83723: LD_VAR 0 6
83727: INC
83728: ST_TO_ADDR
83729: LD_INT 1
83731: PUSH
83732: FOR_DOWNTO
83733: IFFALSE 83834
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
83735: LD_VAR 0 6
83739: PUSH
83740: LD_VAR 0 4
83744: ARRAY
83745: PUSH
83746: LD_INT 1
83748: ARRAY
83749: PPUSH
83750: LD_VAR 0 6
83754: PUSH
83755: LD_VAR 0 4
83759: ARRAY
83760: PUSH
83761: LD_INT 2
83763: ARRAY
83764: PPUSH
83765: CALL_OW 488
83769: NOT
83770: PUSH
83771: LD_VAR 0 6
83775: PUSH
83776: LD_VAR 0 4
83780: ARRAY
83781: PUSH
83782: LD_INT 1
83784: ARRAY
83785: PPUSH
83786: LD_VAR 0 6
83790: PUSH
83791: LD_VAR 0 4
83795: ARRAY
83796: PUSH
83797: LD_INT 2
83799: ARRAY
83800: PPUSH
83801: CALL_OW 428
83805: PUSH
83806: LD_INT 0
83808: NONEQUAL
83809: OR
83810: IFFALSE 83832
// tmp := Delete ( tmp , i ) ;
83812: LD_ADDR_VAR 0 6
83816: PUSH
83817: LD_VAR 0 6
83821: PPUSH
83822: LD_VAR 0 4
83826: PPUSH
83827: CALL_OW 3
83831: ST_TO_ADDR
83832: GO 83732
83834: POP
83835: POP
// j := GetClosestHex ( unit , tmp ) ;
83836: LD_ADDR_VAR 0 5
83840: PUSH
83841: LD_VAR 0 1
83845: PPUSH
83846: LD_VAR 0 6
83850: PPUSH
83851: CALL 83127 0 2
83855: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
83856: LD_VAR 0 1
83860: PPUSH
83861: LD_VAR 0 5
83865: PUSH
83866: LD_INT 1
83868: ARRAY
83869: PPUSH
83870: LD_VAR 0 5
83874: PUSH
83875: LD_INT 2
83877: ARRAY
83878: PPUSH
83879: CALL_OW 111
// end ;
83883: LD_VAR 0 3
83887: RET
// export function PrepareApemanSoldier ( ) ; begin
83888: LD_INT 0
83890: PPUSH
// uc_nation := 0 ;
83891: LD_ADDR_OWVAR 21
83895: PUSH
83896: LD_INT 0
83898: ST_TO_ADDR
// hc_sex := sex_male ;
83899: LD_ADDR_OWVAR 27
83903: PUSH
83904: LD_INT 1
83906: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
83907: LD_ADDR_OWVAR 28
83911: PUSH
83912: LD_INT 15
83914: ST_TO_ADDR
// hc_gallery :=  ;
83915: LD_ADDR_OWVAR 33
83919: PUSH
83920: LD_STRING 
83922: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
83923: LD_ADDR_OWVAR 31
83927: PUSH
83928: LD_INT 0
83930: PPUSH
83931: LD_INT 3
83933: PPUSH
83934: CALL_OW 12
83938: PUSH
83939: LD_INT 0
83941: PPUSH
83942: LD_INT 3
83944: PPUSH
83945: CALL_OW 12
83949: PUSH
83950: LD_INT 0
83952: PUSH
83953: LD_INT 0
83955: PUSH
83956: EMPTY
83957: LIST
83958: LIST
83959: LIST
83960: LIST
83961: ST_TO_ADDR
// end ;
83962: LD_VAR 0 1
83966: RET
// export function PrepareApemanEngineer ( ) ; begin
83967: LD_INT 0
83969: PPUSH
// uc_nation := 0 ;
83970: LD_ADDR_OWVAR 21
83974: PUSH
83975: LD_INT 0
83977: ST_TO_ADDR
// hc_sex := sex_male ;
83978: LD_ADDR_OWVAR 27
83982: PUSH
83983: LD_INT 1
83985: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
83986: LD_ADDR_OWVAR 28
83990: PUSH
83991: LD_INT 16
83993: ST_TO_ADDR
// hc_gallery :=  ;
83994: LD_ADDR_OWVAR 33
83998: PUSH
83999: LD_STRING 
84001: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
84002: LD_ADDR_OWVAR 31
84006: PUSH
84007: LD_INT 0
84009: PPUSH
84010: LD_INT 3
84012: PPUSH
84013: CALL_OW 12
84017: PUSH
84018: LD_INT 0
84020: PPUSH
84021: LD_INT 3
84023: PPUSH
84024: CALL_OW 12
84028: PUSH
84029: LD_INT 0
84031: PUSH
84032: LD_INT 0
84034: PUSH
84035: EMPTY
84036: LIST
84037: LIST
84038: LIST
84039: LIST
84040: ST_TO_ADDR
// end ;
84041: LD_VAR 0 1
84045: RET
// export function PrepareApeman ( agressivity ) ; begin
84046: LD_INT 0
84048: PPUSH
// uc_side := 0 ;
84049: LD_ADDR_OWVAR 20
84053: PUSH
84054: LD_INT 0
84056: ST_TO_ADDR
// uc_nation := 0 ;
84057: LD_ADDR_OWVAR 21
84061: PUSH
84062: LD_INT 0
84064: ST_TO_ADDR
// hc_sex := sex_male ;
84065: LD_ADDR_OWVAR 27
84069: PUSH
84070: LD_INT 1
84072: ST_TO_ADDR
// hc_class := class_apeman ;
84073: LD_ADDR_OWVAR 28
84077: PUSH
84078: LD_INT 12
84080: ST_TO_ADDR
// hc_gallery :=  ;
84081: LD_ADDR_OWVAR 33
84085: PUSH
84086: LD_STRING 
84088: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
84089: LD_ADDR_OWVAR 35
84093: PUSH
84094: LD_VAR 0 1
84098: NEG
84099: PPUSH
84100: LD_VAR 0 1
84104: PPUSH
84105: CALL_OW 12
84109: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
84110: LD_ADDR_OWVAR 31
84114: PUSH
84115: LD_INT 0
84117: PPUSH
84118: LD_INT 3
84120: PPUSH
84121: CALL_OW 12
84125: PUSH
84126: LD_INT 0
84128: PPUSH
84129: LD_INT 3
84131: PPUSH
84132: CALL_OW 12
84136: PUSH
84137: LD_INT 0
84139: PUSH
84140: LD_INT 0
84142: PUSH
84143: EMPTY
84144: LIST
84145: LIST
84146: LIST
84147: LIST
84148: ST_TO_ADDR
// end ;
84149: LD_VAR 0 2
84153: RET
// export function PrepareTiger ( agressivity ) ; begin
84154: LD_INT 0
84156: PPUSH
// uc_side := 0 ;
84157: LD_ADDR_OWVAR 20
84161: PUSH
84162: LD_INT 0
84164: ST_TO_ADDR
// uc_nation := 0 ;
84165: LD_ADDR_OWVAR 21
84169: PUSH
84170: LD_INT 0
84172: ST_TO_ADDR
// hc_class := class_tiger ;
84173: LD_ADDR_OWVAR 28
84177: PUSH
84178: LD_INT 14
84180: ST_TO_ADDR
// hc_gallery :=  ;
84181: LD_ADDR_OWVAR 33
84185: PUSH
84186: LD_STRING 
84188: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
84189: LD_ADDR_OWVAR 35
84193: PUSH
84194: LD_VAR 0 1
84198: NEG
84199: PPUSH
84200: LD_VAR 0 1
84204: PPUSH
84205: CALL_OW 12
84209: ST_TO_ADDR
// end ;
84210: LD_VAR 0 2
84214: RET
// export function PrepareEnchidna ( ) ; begin
84215: LD_INT 0
84217: PPUSH
// uc_side := 0 ;
84218: LD_ADDR_OWVAR 20
84222: PUSH
84223: LD_INT 0
84225: ST_TO_ADDR
// uc_nation := 0 ;
84226: LD_ADDR_OWVAR 21
84230: PUSH
84231: LD_INT 0
84233: ST_TO_ADDR
// hc_class := class_baggie ;
84234: LD_ADDR_OWVAR 28
84238: PUSH
84239: LD_INT 13
84241: ST_TO_ADDR
// hc_gallery :=  ;
84242: LD_ADDR_OWVAR 33
84246: PUSH
84247: LD_STRING 
84249: ST_TO_ADDR
// end ;
84250: LD_VAR 0 1
84254: RET
// export function PrepareFrog ( ) ; begin
84255: LD_INT 0
84257: PPUSH
// uc_side := 0 ;
84258: LD_ADDR_OWVAR 20
84262: PUSH
84263: LD_INT 0
84265: ST_TO_ADDR
// uc_nation := 0 ;
84266: LD_ADDR_OWVAR 21
84270: PUSH
84271: LD_INT 0
84273: ST_TO_ADDR
// hc_class := class_frog ;
84274: LD_ADDR_OWVAR 28
84278: PUSH
84279: LD_INT 19
84281: ST_TO_ADDR
// hc_gallery :=  ;
84282: LD_ADDR_OWVAR 33
84286: PUSH
84287: LD_STRING 
84289: ST_TO_ADDR
// end ;
84290: LD_VAR 0 1
84294: RET
// export function PrepareFish ( ) ; begin
84295: LD_INT 0
84297: PPUSH
// uc_side := 0 ;
84298: LD_ADDR_OWVAR 20
84302: PUSH
84303: LD_INT 0
84305: ST_TO_ADDR
// uc_nation := 0 ;
84306: LD_ADDR_OWVAR 21
84310: PUSH
84311: LD_INT 0
84313: ST_TO_ADDR
// hc_class := class_fish ;
84314: LD_ADDR_OWVAR 28
84318: PUSH
84319: LD_INT 20
84321: ST_TO_ADDR
// hc_gallery :=  ;
84322: LD_ADDR_OWVAR 33
84326: PUSH
84327: LD_STRING 
84329: ST_TO_ADDR
// end ;
84330: LD_VAR 0 1
84334: RET
// export function PrepareBird ( ) ; begin
84335: LD_INT 0
84337: PPUSH
// uc_side := 0 ;
84338: LD_ADDR_OWVAR 20
84342: PUSH
84343: LD_INT 0
84345: ST_TO_ADDR
// uc_nation := 0 ;
84346: LD_ADDR_OWVAR 21
84350: PUSH
84351: LD_INT 0
84353: ST_TO_ADDR
// hc_class := class_phororhacos ;
84354: LD_ADDR_OWVAR 28
84358: PUSH
84359: LD_INT 18
84361: ST_TO_ADDR
// hc_gallery :=  ;
84362: LD_ADDR_OWVAR 33
84366: PUSH
84367: LD_STRING 
84369: ST_TO_ADDR
// end ;
84370: LD_VAR 0 1
84374: RET
// export function PrepareHorse ( ) ; begin
84375: LD_INT 0
84377: PPUSH
// uc_side := 0 ;
84378: LD_ADDR_OWVAR 20
84382: PUSH
84383: LD_INT 0
84385: ST_TO_ADDR
// uc_nation := 0 ;
84386: LD_ADDR_OWVAR 21
84390: PUSH
84391: LD_INT 0
84393: ST_TO_ADDR
// hc_class := class_horse ;
84394: LD_ADDR_OWVAR 28
84398: PUSH
84399: LD_INT 21
84401: ST_TO_ADDR
// hc_gallery :=  ;
84402: LD_ADDR_OWVAR 33
84406: PUSH
84407: LD_STRING 
84409: ST_TO_ADDR
// end ;
84410: LD_VAR 0 1
84414: RET
// export function PrepareMastodont ( ) ; begin
84415: LD_INT 0
84417: PPUSH
// uc_side := 0 ;
84418: LD_ADDR_OWVAR 20
84422: PUSH
84423: LD_INT 0
84425: ST_TO_ADDR
// uc_nation := 0 ;
84426: LD_ADDR_OWVAR 21
84430: PUSH
84431: LD_INT 0
84433: ST_TO_ADDR
// vc_chassis := class_mastodont ;
84434: LD_ADDR_OWVAR 37
84438: PUSH
84439: LD_INT 31
84441: ST_TO_ADDR
// vc_control := control_rider ;
84442: LD_ADDR_OWVAR 38
84446: PUSH
84447: LD_INT 4
84449: ST_TO_ADDR
// end ;
84450: LD_VAR 0 1
84454: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
84455: LD_INT 0
84457: PPUSH
84458: PPUSH
84459: PPUSH
// uc_side = 0 ;
84460: LD_ADDR_OWVAR 20
84464: PUSH
84465: LD_INT 0
84467: ST_TO_ADDR
// uc_nation = 0 ;
84468: LD_ADDR_OWVAR 21
84472: PUSH
84473: LD_INT 0
84475: ST_TO_ADDR
// InitHc_All ( ) ;
84476: CALL_OW 584
// InitVc ;
84480: CALL_OW 20
// if mastodonts then
84484: LD_VAR 0 6
84488: IFFALSE 84555
// for i = 1 to mastodonts do
84490: LD_ADDR_VAR 0 11
84494: PUSH
84495: DOUBLE
84496: LD_INT 1
84498: DEC
84499: ST_TO_ADDR
84500: LD_VAR 0 6
84504: PUSH
84505: FOR_TO
84506: IFFALSE 84553
// begin vc_chassis := 31 ;
84508: LD_ADDR_OWVAR 37
84512: PUSH
84513: LD_INT 31
84515: ST_TO_ADDR
// vc_control := control_rider ;
84516: LD_ADDR_OWVAR 38
84520: PUSH
84521: LD_INT 4
84523: ST_TO_ADDR
// animal := CreateVehicle ;
84524: LD_ADDR_VAR 0 12
84528: PUSH
84529: CALL_OW 45
84533: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84534: LD_VAR 0 12
84538: PPUSH
84539: LD_VAR 0 8
84543: PPUSH
84544: LD_INT 0
84546: PPUSH
84547: CALL 86683 0 3
// end ;
84551: GO 84505
84553: POP
84554: POP
// if horses then
84555: LD_VAR 0 5
84559: IFFALSE 84626
// for i = 1 to horses do
84561: LD_ADDR_VAR 0 11
84565: PUSH
84566: DOUBLE
84567: LD_INT 1
84569: DEC
84570: ST_TO_ADDR
84571: LD_VAR 0 5
84575: PUSH
84576: FOR_TO
84577: IFFALSE 84624
// begin hc_class := 21 ;
84579: LD_ADDR_OWVAR 28
84583: PUSH
84584: LD_INT 21
84586: ST_TO_ADDR
// hc_gallery :=  ;
84587: LD_ADDR_OWVAR 33
84591: PUSH
84592: LD_STRING 
84594: ST_TO_ADDR
// animal := CreateHuman ;
84595: LD_ADDR_VAR 0 12
84599: PUSH
84600: CALL_OW 44
84604: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84605: LD_VAR 0 12
84609: PPUSH
84610: LD_VAR 0 8
84614: PPUSH
84615: LD_INT 0
84617: PPUSH
84618: CALL 86683 0 3
// end ;
84622: GO 84576
84624: POP
84625: POP
// if birds then
84626: LD_VAR 0 1
84630: IFFALSE 84697
// for i = 1 to birds do
84632: LD_ADDR_VAR 0 11
84636: PUSH
84637: DOUBLE
84638: LD_INT 1
84640: DEC
84641: ST_TO_ADDR
84642: LD_VAR 0 1
84646: PUSH
84647: FOR_TO
84648: IFFALSE 84695
// begin hc_class = 18 ;
84650: LD_ADDR_OWVAR 28
84654: PUSH
84655: LD_INT 18
84657: ST_TO_ADDR
// hc_gallery =  ;
84658: LD_ADDR_OWVAR 33
84662: PUSH
84663: LD_STRING 
84665: ST_TO_ADDR
// animal := CreateHuman ;
84666: LD_ADDR_VAR 0 12
84670: PUSH
84671: CALL_OW 44
84675: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84676: LD_VAR 0 12
84680: PPUSH
84681: LD_VAR 0 8
84685: PPUSH
84686: LD_INT 0
84688: PPUSH
84689: CALL 86683 0 3
// end ;
84693: GO 84647
84695: POP
84696: POP
// if tigers then
84697: LD_VAR 0 2
84701: IFFALSE 84785
// for i = 1 to tigers do
84703: LD_ADDR_VAR 0 11
84707: PUSH
84708: DOUBLE
84709: LD_INT 1
84711: DEC
84712: ST_TO_ADDR
84713: LD_VAR 0 2
84717: PUSH
84718: FOR_TO
84719: IFFALSE 84783
// begin hc_class = class_tiger ;
84721: LD_ADDR_OWVAR 28
84725: PUSH
84726: LD_INT 14
84728: ST_TO_ADDR
// hc_gallery =  ;
84729: LD_ADDR_OWVAR 33
84733: PUSH
84734: LD_STRING 
84736: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
84737: LD_ADDR_OWVAR 35
84741: PUSH
84742: LD_INT 7
84744: NEG
84745: PPUSH
84746: LD_INT 7
84748: PPUSH
84749: CALL_OW 12
84753: ST_TO_ADDR
// animal := CreateHuman ;
84754: LD_ADDR_VAR 0 12
84758: PUSH
84759: CALL_OW 44
84763: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84764: LD_VAR 0 12
84768: PPUSH
84769: LD_VAR 0 8
84773: PPUSH
84774: LD_INT 0
84776: PPUSH
84777: CALL 86683 0 3
// end ;
84781: GO 84718
84783: POP
84784: POP
// if apemans then
84785: LD_VAR 0 3
84789: IFFALSE 84912
// for i = 1 to apemans do
84791: LD_ADDR_VAR 0 11
84795: PUSH
84796: DOUBLE
84797: LD_INT 1
84799: DEC
84800: ST_TO_ADDR
84801: LD_VAR 0 3
84805: PUSH
84806: FOR_TO
84807: IFFALSE 84910
// begin hc_class = class_apeman ;
84809: LD_ADDR_OWVAR 28
84813: PUSH
84814: LD_INT 12
84816: ST_TO_ADDR
// hc_gallery =  ;
84817: LD_ADDR_OWVAR 33
84821: PUSH
84822: LD_STRING 
84824: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
84825: LD_ADDR_OWVAR 35
84829: PUSH
84830: LD_INT 2
84832: NEG
84833: PPUSH
84834: LD_INT 2
84836: PPUSH
84837: CALL_OW 12
84841: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
84842: LD_ADDR_OWVAR 31
84846: PUSH
84847: LD_INT 1
84849: PPUSH
84850: LD_INT 3
84852: PPUSH
84853: CALL_OW 12
84857: PUSH
84858: LD_INT 1
84860: PPUSH
84861: LD_INT 3
84863: PPUSH
84864: CALL_OW 12
84868: PUSH
84869: LD_INT 0
84871: PUSH
84872: LD_INT 0
84874: PUSH
84875: EMPTY
84876: LIST
84877: LIST
84878: LIST
84879: LIST
84880: ST_TO_ADDR
// animal := CreateHuman ;
84881: LD_ADDR_VAR 0 12
84885: PUSH
84886: CALL_OW 44
84890: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84891: LD_VAR 0 12
84895: PPUSH
84896: LD_VAR 0 8
84900: PPUSH
84901: LD_INT 0
84903: PPUSH
84904: CALL 86683 0 3
// end ;
84908: GO 84806
84910: POP
84911: POP
// if enchidnas then
84912: LD_VAR 0 4
84916: IFFALSE 84983
// for i = 1 to enchidnas do
84918: LD_ADDR_VAR 0 11
84922: PUSH
84923: DOUBLE
84924: LD_INT 1
84926: DEC
84927: ST_TO_ADDR
84928: LD_VAR 0 4
84932: PUSH
84933: FOR_TO
84934: IFFALSE 84981
// begin hc_class = 13 ;
84936: LD_ADDR_OWVAR 28
84940: PUSH
84941: LD_INT 13
84943: ST_TO_ADDR
// hc_gallery =  ;
84944: LD_ADDR_OWVAR 33
84948: PUSH
84949: LD_STRING 
84951: ST_TO_ADDR
// animal := CreateHuman ;
84952: LD_ADDR_VAR 0 12
84956: PUSH
84957: CALL_OW 44
84961: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
84962: LD_VAR 0 12
84966: PPUSH
84967: LD_VAR 0 8
84971: PPUSH
84972: LD_INT 0
84974: PPUSH
84975: CALL 86683 0 3
// end ;
84979: GO 84933
84981: POP
84982: POP
// if fishes then
84983: LD_VAR 0 7
84987: IFFALSE 85054
// for i = 1 to fishes do
84989: LD_ADDR_VAR 0 11
84993: PUSH
84994: DOUBLE
84995: LD_INT 1
84997: DEC
84998: ST_TO_ADDR
84999: LD_VAR 0 7
85003: PUSH
85004: FOR_TO
85005: IFFALSE 85052
// begin hc_class = 20 ;
85007: LD_ADDR_OWVAR 28
85011: PUSH
85012: LD_INT 20
85014: ST_TO_ADDR
// hc_gallery =  ;
85015: LD_ADDR_OWVAR 33
85019: PUSH
85020: LD_STRING 
85022: ST_TO_ADDR
// animal := CreateHuman ;
85023: LD_ADDR_VAR 0 12
85027: PUSH
85028: CALL_OW 44
85032: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
85033: LD_VAR 0 12
85037: PPUSH
85038: LD_VAR 0 9
85042: PPUSH
85043: LD_INT 0
85045: PPUSH
85046: CALL 86683 0 3
// end ;
85050: GO 85004
85052: POP
85053: POP
// end ;
85054: LD_VAR 0 10
85058: RET
// export function WantHeal ( sci , unit ) ; begin
85059: LD_INT 0
85061: PPUSH
// if GetTaskList ( sci ) > 0 then
85062: LD_VAR 0 1
85066: PPUSH
85067: CALL_OW 437
85071: PUSH
85072: LD_INT 0
85074: GREATER
85075: IFFALSE 85145
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
85077: LD_VAR 0 1
85081: PPUSH
85082: CALL_OW 437
85086: PUSH
85087: LD_INT 1
85089: ARRAY
85090: PUSH
85091: LD_INT 1
85093: ARRAY
85094: PUSH
85095: LD_STRING l
85097: EQUAL
85098: PUSH
85099: LD_VAR 0 1
85103: PPUSH
85104: CALL_OW 437
85108: PUSH
85109: LD_INT 1
85111: ARRAY
85112: PUSH
85113: LD_INT 4
85115: ARRAY
85116: PUSH
85117: LD_VAR 0 2
85121: EQUAL
85122: AND
85123: IFFALSE 85135
// result := true else
85125: LD_ADDR_VAR 0 3
85129: PUSH
85130: LD_INT 1
85132: ST_TO_ADDR
85133: GO 85143
// result := false ;
85135: LD_ADDR_VAR 0 3
85139: PUSH
85140: LD_INT 0
85142: ST_TO_ADDR
// end else
85143: GO 85153
// result := false ;
85145: LD_ADDR_VAR 0 3
85149: PUSH
85150: LD_INT 0
85152: ST_TO_ADDR
// end ;
85153: LD_VAR 0 3
85157: RET
// export function HealTarget ( sci ) ; begin
85158: LD_INT 0
85160: PPUSH
// if not sci then
85161: LD_VAR 0 1
85165: NOT
85166: IFFALSE 85170
// exit ;
85168: GO 85235
// result := 0 ;
85170: LD_ADDR_VAR 0 2
85174: PUSH
85175: LD_INT 0
85177: ST_TO_ADDR
// if GetTaskList ( sci ) then
85178: LD_VAR 0 1
85182: PPUSH
85183: CALL_OW 437
85187: IFFALSE 85235
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
85189: LD_VAR 0 1
85193: PPUSH
85194: CALL_OW 437
85198: PUSH
85199: LD_INT 1
85201: ARRAY
85202: PUSH
85203: LD_INT 1
85205: ARRAY
85206: PUSH
85207: LD_STRING l
85209: EQUAL
85210: IFFALSE 85235
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
85212: LD_ADDR_VAR 0 2
85216: PUSH
85217: LD_VAR 0 1
85221: PPUSH
85222: CALL_OW 437
85226: PUSH
85227: LD_INT 1
85229: ARRAY
85230: PUSH
85231: LD_INT 4
85233: ARRAY
85234: ST_TO_ADDR
// end ;
85235: LD_VAR 0 2
85239: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
85240: LD_INT 0
85242: PPUSH
85243: PPUSH
85244: PPUSH
85245: PPUSH
// if not base_units then
85246: LD_VAR 0 1
85250: NOT
85251: IFFALSE 85255
// exit ;
85253: GO 85342
// result := false ;
85255: LD_ADDR_VAR 0 2
85259: PUSH
85260: LD_INT 0
85262: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
85263: LD_ADDR_VAR 0 5
85267: PUSH
85268: LD_VAR 0 1
85272: PPUSH
85273: LD_INT 21
85275: PUSH
85276: LD_INT 3
85278: PUSH
85279: EMPTY
85280: LIST
85281: LIST
85282: PPUSH
85283: CALL_OW 72
85287: ST_TO_ADDR
// if not tmp then
85288: LD_VAR 0 5
85292: NOT
85293: IFFALSE 85297
// exit ;
85295: GO 85342
// for i in tmp do
85297: LD_ADDR_VAR 0 3
85301: PUSH
85302: LD_VAR 0 5
85306: PUSH
85307: FOR_IN
85308: IFFALSE 85340
// begin result := EnemyInRange ( i , 22 ) ;
85310: LD_ADDR_VAR 0 2
85314: PUSH
85315: LD_VAR 0 3
85319: PPUSH
85320: LD_INT 22
85322: PPUSH
85323: CALL 82929 0 2
85327: ST_TO_ADDR
// if result then
85328: LD_VAR 0 2
85332: IFFALSE 85338
// exit ;
85334: POP
85335: POP
85336: GO 85342
// end ;
85338: GO 85307
85340: POP
85341: POP
// end ;
85342: LD_VAR 0 2
85346: RET
// export function FilterByTag ( units , tag ) ; begin
85347: LD_INT 0
85349: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
85350: LD_ADDR_VAR 0 3
85354: PUSH
85355: LD_VAR 0 1
85359: PPUSH
85360: LD_INT 120
85362: PUSH
85363: LD_VAR 0 2
85367: PUSH
85368: EMPTY
85369: LIST
85370: LIST
85371: PPUSH
85372: CALL_OW 72
85376: ST_TO_ADDR
// end ;
85377: LD_VAR 0 3
85381: RET
// export function IsDriver ( un ) ; begin
85382: LD_INT 0
85384: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
85385: LD_ADDR_VAR 0 2
85389: PUSH
85390: LD_VAR 0 1
85394: PUSH
85395: LD_INT 55
85397: PUSH
85398: EMPTY
85399: LIST
85400: PPUSH
85401: CALL_OW 69
85405: IN
85406: ST_TO_ADDR
// end ;
85407: LD_VAR 0 2
85411: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
85412: LD_INT 0
85414: PPUSH
85415: PPUSH
// list := [ ] ;
85416: LD_ADDR_VAR 0 5
85420: PUSH
85421: EMPTY
85422: ST_TO_ADDR
// case d of 0 :
85423: LD_VAR 0 3
85427: PUSH
85428: LD_INT 0
85430: DOUBLE
85431: EQUAL
85432: IFTRUE 85436
85434: GO 85569
85436: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
85437: LD_ADDR_VAR 0 5
85441: PUSH
85442: LD_VAR 0 1
85446: PUSH
85447: LD_INT 4
85449: MINUS
85450: PUSH
85451: LD_VAR 0 2
85455: PUSH
85456: LD_INT 4
85458: MINUS
85459: PUSH
85460: LD_INT 2
85462: PUSH
85463: EMPTY
85464: LIST
85465: LIST
85466: LIST
85467: PUSH
85468: LD_VAR 0 1
85472: PUSH
85473: LD_INT 3
85475: MINUS
85476: PUSH
85477: LD_VAR 0 2
85481: PUSH
85482: LD_INT 1
85484: PUSH
85485: EMPTY
85486: LIST
85487: LIST
85488: LIST
85489: PUSH
85490: LD_VAR 0 1
85494: PUSH
85495: LD_INT 4
85497: PLUS
85498: PUSH
85499: LD_VAR 0 2
85503: PUSH
85504: LD_INT 4
85506: PUSH
85507: EMPTY
85508: LIST
85509: LIST
85510: LIST
85511: PUSH
85512: LD_VAR 0 1
85516: PUSH
85517: LD_INT 3
85519: PLUS
85520: PUSH
85521: LD_VAR 0 2
85525: PUSH
85526: LD_INT 3
85528: PLUS
85529: PUSH
85530: LD_INT 5
85532: PUSH
85533: EMPTY
85534: LIST
85535: LIST
85536: LIST
85537: PUSH
85538: LD_VAR 0 1
85542: PUSH
85543: LD_VAR 0 2
85547: PUSH
85548: LD_INT 4
85550: PLUS
85551: PUSH
85552: LD_INT 0
85554: PUSH
85555: EMPTY
85556: LIST
85557: LIST
85558: LIST
85559: PUSH
85560: EMPTY
85561: LIST
85562: LIST
85563: LIST
85564: LIST
85565: LIST
85566: ST_TO_ADDR
// end ; 1 :
85567: GO 86267
85569: LD_INT 1
85571: DOUBLE
85572: EQUAL
85573: IFTRUE 85577
85575: GO 85710
85577: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
85578: LD_ADDR_VAR 0 5
85582: PUSH
85583: LD_VAR 0 1
85587: PUSH
85588: LD_VAR 0 2
85592: PUSH
85593: LD_INT 4
85595: MINUS
85596: PUSH
85597: LD_INT 3
85599: PUSH
85600: EMPTY
85601: LIST
85602: LIST
85603: LIST
85604: PUSH
85605: LD_VAR 0 1
85609: PUSH
85610: LD_INT 3
85612: MINUS
85613: PUSH
85614: LD_VAR 0 2
85618: PUSH
85619: LD_INT 3
85621: MINUS
85622: PUSH
85623: LD_INT 2
85625: PUSH
85626: EMPTY
85627: LIST
85628: LIST
85629: LIST
85630: PUSH
85631: LD_VAR 0 1
85635: PUSH
85636: LD_INT 4
85638: MINUS
85639: PUSH
85640: LD_VAR 0 2
85644: PUSH
85645: LD_INT 1
85647: PUSH
85648: EMPTY
85649: LIST
85650: LIST
85651: LIST
85652: PUSH
85653: LD_VAR 0 1
85657: PUSH
85658: LD_VAR 0 2
85662: PUSH
85663: LD_INT 3
85665: PLUS
85666: PUSH
85667: LD_INT 0
85669: PUSH
85670: EMPTY
85671: LIST
85672: LIST
85673: LIST
85674: PUSH
85675: LD_VAR 0 1
85679: PUSH
85680: LD_INT 4
85682: PLUS
85683: PUSH
85684: LD_VAR 0 2
85688: PUSH
85689: LD_INT 4
85691: PLUS
85692: PUSH
85693: LD_INT 5
85695: PUSH
85696: EMPTY
85697: LIST
85698: LIST
85699: LIST
85700: PUSH
85701: EMPTY
85702: LIST
85703: LIST
85704: LIST
85705: LIST
85706: LIST
85707: ST_TO_ADDR
// end ; 2 :
85708: GO 86267
85710: LD_INT 2
85712: DOUBLE
85713: EQUAL
85714: IFTRUE 85718
85716: GO 85847
85718: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
85719: LD_ADDR_VAR 0 5
85723: PUSH
85724: LD_VAR 0 1
85728: PUSH
85729: LD_VAR 0 2
85733: PUSH
85734: LD_INT 3
85736: MINUS
85737: PUSH
85738: LD_INT 3
85740: PUSH
85741: EMPTY
85742: LIST
85743: LIST
85744: LIST
85745: PUSH
85746: LD_VAR 0 1
85750: PUSH
85751: LD_INT 4
85753: PLUS
85754: PUSH
85755: LD_VAR 0 2
85759: PUSH
85760: LD_INT 4
85762: PUSH
85763: EMPTY
85764: LIST
85765: LIST
85766: LIST
85767: PUSH
85768: LD_VAR 0 1
85772: PUSH
85773: LD_VAR 0 2
85777: PUSH
85778: LD_INT 4
85780: PLUS
85781: PUSH
85782: LD_INT 0
85784: PUSH
85785: EMPTY
85786: LIST
85787: LIST
85788: LIST
85789: PUSH
85790: LD_VAR 0 1
85794: PUSH
85795: LD_INT 3
85797: MINUS
85798: PUSH
85799: LD_VAR 0 2
85803: PUSH
85804: LD_INT 1
85806: PUSH
85807: EMPTY
85808: LIST
85809: LIST
85810: LIST
85811: PUSH
85812: LD_VAR 0 1
85816: PUSH
85817: LD_INT 4
85819: MINUS
85820: PUSH
85821: LD_VAR 0 2
85825: PUSH
85826: LD_INT 4
85828: MINUS
85829: PUSH
85830: LD_INT 2
85832: PUSH
85833: EMPTY
85834: LIST
85835: LIST
85836: LIST
85837: PUSH
85838: EMPTY
85839: LIST
85840: LIST
85841: LIST
85842: LIST
85843: LIST
85844: ST_TO_ADDR
// end ; 3 :
85845: GO 86267
85847: LD_INT 3
85849: DOUBLE
85850: EQUAL
85851: IFTRUE 85855
85853: GO 85988
85855: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
85856: LD_ADDR_VAR 0 5
85860: PUSH
85861: LD_VAR 0 1
85865: PUSH
85866: LD_INT 3
85868: PLUS
85869: PUSH
85870: LD_VAR 0 2
85874: PUSH
85875: LD_INT 4
85877: PUSH
85878: EMPTY
85879: LIST
85880: LIST
85881: LIST
85882: PUSH
85883: LD_VAR 0 1
85887: PUSH
85888: LD_INT 4
85890: PLUS
85891: PUSH
85892: LD_VAR 0 2
85896: PUSH
85897: LD_INT 4
85899: PLUS
85900: PUSH
85901: LD_INT 5
85903: PUSH
85904: EMPTY
85905: LIST
85906: LIST
85907: LIST
85908: PUSH
85909: LD_VAR 0 1
85913: PUSH
85914: LD_INT 4
85916: MINUS
85917: PUSH
85918: LD_VAR 0 2
85922: PUSH
85923: LD_INT 1
85925: PUSH
85926: EMPTY
85927: LIST
85928: LIST
85929: LIST
85930: PUSH
85931: LD_VAR 0 1
85935: PUSH
85936: LD_VAR 0 2
85940: PUSH
85941: LD_INT 4
85943: MINUS
85944: PUSH
85945: LD_INT 3
85947: PUSH
85948: EMPTY
85949: LIST
85950: LIST
85951: LIST
85952: PUSH
85953: LD_VAR 0 1
85957: PUSH
85958: LD_INT 3
85960: MINUS
85961: PUSH
85962: LD_VAR 0 2
85966: PUSH
85967: LD_INT 3
85969: MINUS
85970: PUSH
85971: LD_INT 2
85973: PUSH
85974: EMPTY
85975: LIST
85976: LIST
85977: LIST
85978: PUSH
85979: EMPTY
85980: LIST
85981: LIST
85982: LIST
85983: LIST
85984: LIST
85985: ST_TO_ADDR
// end ; 4 :
85986: GO 86267
85988: LD_INT 4
85990: DOUBLE
85991: EQUAL
85992: IFTRUE 85996
85994: GO 86129
85996: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
85997: LD_ADDR_VAR 0 5
86001: PUSH
86002: LD_VAR 0 1
86006: PUSH
86007: LD_VAR 0 2
86011: PUSH
86012: LD_INT 4
86014: PLUS
86015: PUSH
86016: LD_INT 0
86018: PUSH
86019: EMPTY
86020: LIST
86021: LIST
86022: LIST
86023: PUSH
86024: LD_VAR 0 1
86028: PUSH
86029: LD_INT 3
86031: PLUS
86032: PUSH
86033: LD_VAR 0 2
86037: PUSH
86038: LD_INT 3
86040: PLUS
86041: PUSH
86042: LD_INT 5
86044: PUSH
86045: EMPTY
86046: LIST
86047: LIST
86048: LIST
86049: PUSH
86050: LD_VAR 0 1
86054: PUSH
86055: LD_INT 4
86057: PLUS
86058: PUSH
86059: LD_VAR 0 2
86063: PUSH
86064: LD_INT 4
86066: PUSH
86067: EMPTY
86068: LIST
86069: LIST
86070: LIST
86071: PUSH
86072: LD_VAR 0 1
86076: PUSH
86077: LD_VAR 0 2
86081: PUSH
86082: LD_INT 3
86084: MINUS
86085: PUSH
86086: LD_INT 3
86088: PUSH
86089: EMPTY
86090: LIST
86091: LIST
86092: LIST
86093: PUSH
86094: LD_VAR 0 1
86098: PUSH
86099: LD_INT 4
86101: MINUS
86102: PUSH
86103: LD_VAR 0 2
86107: PUSH
86108: LD_INT 4
86110: MINUS
86111: PUSH
86112: LD_INT 2
86114: PUSH
86115: EMPTY
86116: LIST
86117: LIST
86118: LIST
86119: PUSH
86120: EMPTY
86121: LIST
86122: LIST
86123: LIST
86124: LIST
86125: LIST
86126: ST_TO_ADDR
// end ; 5 :
86127: GO 86267
86129: LD_INT 5
86131: DOUBLE
86132: EQUAL
86133: IFTRUE 86137
86135: GO 86266
86137: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
86138: LD_ADDR_VAR 0 5
86142: PUSH
86143: LD_VAR 0 1
86147: PUSH
86148: LD_INT 4
86150: MINUS
86151: PUSH
86152: LD_VAR 0 2
86156: PUSH
86157: LD_INT 1
86159: PUSH
86160: EMPTY
86161: LIST
86162: LIST
86163: LIST
86164: PUSH
86165: LD_VAR 0 1
86169: PUSH
86170: LD_VAR 0 2
86174: PUSH
86175: LD_INT 4
86177: MINUS
86178: PUSH
86179: LD_INT 3
86181: PUSH
86182: EMPTY
86183: LIST
86184: LIST
86185: LIST
86186: PUSH
86187: LD_VAR 0 1
86191: PUSH
86192: LD_INT 4
86194: PLUS
86195: PUSH
86196: LD_VAR 0 2
86200: PUSH
86201: LD_INT 4
86203: PLUS
86204: PUSH
86205: LD_INT 5
86207: PUSH
86208: EMPTY
86209: LIST
86210: LIST
86211: LIST
86212: PUSH
86213: LD_VAR 0 1
86217: PUSH
86218: LD_INT 3
86220: PLUS
86221: PUSH
86222: LD_VAR 0 2
86226: PUSH
86227: LD_INT 4
86229: PUSH
86230: EMPTY
86231: LIST
86232: LIST
86233: LIST
86234: PUSH
86235: LD_VAR 0 1
86239: PUSH
86240: LD_VAR 0 2
86244: PUSH
86245: LD_INT 3
86247: PLUS
86248: PUSH
86249: LD_INT 0
86251: PUSH
86252: EMPTY
86253: LIST
86254: LIST
86255: LIST
86256: PUSH
86257: EMPTY
86258: LIST
86259: LIST
86260: LIST
86261: LIST
86262: LIST
86263: ST_TO_ADDR
// end ; end ;
86264: GO 86267
86266: POP
// result := list ;
86267: LD_ADDR_VAR 0 4
86271: PUSH
86272: LD_VAR 0 5
86276: ST_TO_ADDR
// end ;
86277: LD_VAR 0 4
86281: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
86282: LD_INT 0
86284: PPUSH
86285: PPUSH
86286: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
86287: LD_VAR 0 1
86291: NOT
86292: PUSH
86293: LD_VAR 0 2
86297: PUSH
86298: LD_INT 1
86300: PUSH
86301: LD_INT 2
86303: PUSH
86304: LD_INT 3
86306: PUSH
86307: LD_INT 4
86309: PUSH
86310: EMPTY
86311: LIST
86312: LIST
86313: LIST
86314: LIST
86315: IN
86316: NOT
86317: OR
86318: IFFALSE 86322
// exit ;
86320: GO 86405
// tmp := [ ] ;
86322: LD_ADDR_VAR 0 5
86326: PUSH
86327: EMPTY
86328: ST_TO_ADDR
// for i in units do
86329: LD_ADDR_VAR 0 4
86333: PUSH
86334: LD_VAR 0 1
86338: PUSH
86339: FOR_IN
86340: IFFALSE 86374
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
86342: LD_ADDR_VAR 0 5
86346: PUSH
86347: LD_VAR 0 5
86351: PPUSH
86352: LD_VAR 0 4
86356: PPUSH
86357: LD_VAR 0 2
86361: PPUSH
86362: CALL_OW 259
86366: PPUSH
86367: CALL 87766 0 2
86371: ST_TO_ADDR
86372: GO 86339
86374: POP
86375: POP
// if not tmp then
86376: LD_VAR 0 5
86380: NOT
86381: IFFALSE 86385
// exit ;
86383: GO 86405
// result := SortListByListDesc ( units , tmp ) ;
86385: LD_ADDR_VAR 0 3
86389: PUSH
86390: LD_VAR 0 1
86394: PPUSH
86395: LD_VAR 0 5
86399: PPUSH
86400: CALL_OW 77
86404: ST_TO_ADDR
// end ;
86405: LD_VAR 0 3
86409: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
86410: LD_INT 0
86412: PPUSH
86413: PPUSH
86414: PPUSH
// result := false ;
86415: LD_ADDR_VAR 0 3
86419: PUSH
86420: LD_INT 0
86422: ST_TO_ADDR
// if not building then
86423: LD_VAR 0 2
86427: NOT
86428: IFFALSE 86432
// exit ;
86430: GO 86570
// x := GetX ( building ) ;
86432: LD_ADDR_VAR 0 4
86436: PUSH
86437: LD_VAR 0 2
86441: PPUSH
86442: CALL_OW 250
86446: ST_TO_ADDR
// y := GetY ( building ) ;
86447: LD_ADDR_VAR 0 5
86451: PUSH
86452: LD_VAR 0 2
86456: PPUSH
86457: CALL_OW 251
86461: ST_TO_ADDR
// if not x or not y then
86462: LD_VAR 0 4
86466: NOT
86467: PUSH
86468: LD_VAR 0 5
86472: NOT
86473: OR
86474: IFFALSE 86478
// exit ;
86476: GO 86570
// if GetTaskList ( unit ) then
86478: LD_VAR 0 1
86482: PPUSH
86483: CALL_OW 437
86487: IFFALSE 86570
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
86489: LD_STRING e
86491: PUSH
86492: LD_VAR 0 1
86496: PPUSH
86497: CALL_OW 437
86501: PUSH
86502: LD_INT 1
86504: ARRAY
86505: PUSH
86506: LD_INT 1
86508: ARRAY
86509: EQUAL
86510: PUSH
86511: LD_VAR 0 4
86515: PUSH
86516: LD_VAR 0 1
86520: PPUSH
86521: CALL_OW 437
86525: PUSH
86526: LD_INT 1
86528: ARRAY
86529: PUSH
86530: LD_INT 2
86532: ARRAY
86533: EQUAL
86534: AND
86535: PUSH
86536: LD_VAR 0 5
86540: PUSH
86541: LD_VAR 0 1
86545: PPUSH
86546: CALL_OW 437
86550: PUSH
86551: LD_INT 1
86553: ARRAY
86554: PUSH
86555: LD_INT 3
86557: ARRAY
86558: EQUAL
86559: AND
86560: IFFALSE 86570
// result := true end ;
86562: LD_ADDR_VAR 0 3
86566: PUSH
86567: LD_INT 1
86569: ST_TO_ADDR
// end ;
86570: LD_VAR 0 3
86574: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
86575: LD_INT 0
86577: PPUSH
// result := false ;
86578: LD_ADDR_VAR 0 4
86582: PUSH
86583: LD_INT 0
86585: ST_TO_ADDR
// if GetTaskList ( unit ) then
86586: LD_VAR 0 1
86590: PPUSH
86591: CALL_OW 437
86595: IFFALSE 86678
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
86597: LD_STRING M
86599: PUSH
86600: LD_VAR 0 1
86604: PPUSH
86605: CALL_OW 437
86609: PUSH
86610: LD_INT 1
86612: ARRAY
86613: PUSH
86614: LD_INT 1
86616: ARRAY
86617: EQUAL
86618: PUSH
86619: LD_VAR 0 2
86623: PUSH
86624: LD_VAR 0 1
86628: PPUSH
86629: CALL_OW 437
86633: PUSH
86634: LD_INT 1
86636: ARRAY
86637: PUSH
86638: LD_INT 2
86640: ARRAY
86641: EQUAL
86642: AND
86643: PUSH
86644: LD_VAR 0 3
86648: PUSH
86649: LD_VAR 0 1
86653: PPUSH
86654: CALL_OW 437
86658: PUSH
86659: LD_INT 1
86661: ARRAY
86662: PUSH
86663: LD_INT 3
86665: ARRAY
86666: EQUAL
86667: AND
86668: IFFALSE 86678
// result := true ;
86670: LD_ADDR_VAR 0 4
86674: PUSH
86675: LD_INT 1
86677: ST_TO_ADDR
// end ; end ;
86678: LD_VAR 0 4
86682: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
86683: LD_INT 0
86685: PPUSH
86686: PPUSH
86687: PPUSH
86688: PPUSH
// if not unit or not area then
86689: LD_VAR 0 1
86693: NOT
86694: PUSH
86695: LD_VAR 0 2
86699: NOT
86700: OR
86701: IFFALSE 86705
// exit ;
86703: GO 86869
// tmp := AreaToList ( area , i ) ;
86705: LD_ADDR_VAR 0 6
86709: PUSH
86710: LD_VAR 0 2
86714: PPUSH
86715: LD_VAR 0 5
86719: PPUSH
86720: CALL_OW 517
86724: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
86725: LD_ADDR_VAR 0 5
86729: PUSH
86730: DOUBLE
86731: LD_INT 1
86733: DEC
86734: ST_TO_ADDR
86735: LD_VAR 0 6
86739: PUSH
86740: LD_INT 1
86742: ARRAY
86743: PUSH
86744: FOR_TO
86745: IFFALSE 86867
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
86747: LD_ADDR_VAR 0 7
86751: PUSH
86752: LD_VAR 0 6
86756: PUSH
86757: LD_INT 1
86759: ARRAY
86760: PUSH
86761: LD_VAR 0 5
86765: ARRAY
86766: PUSH
86767: LD_VAR 0 6
86771: PUSH
86772: LD_INT 2
86774: ARRAY
86775: PUSH
86776: LD_VAR 0 5
86780: ARRAY
86781: PUSH
86782: EMPTY
86783: LIST
86784: LIST
86785: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
86786: LD_VAR 0 7
86790: PUSH
86791: LD_INT 1
86793: ARRAY
86794: PPUSH
86795: LD_VAR 0 7
86799: PUSH
86800: LD_INT 2
86802: ARRAY
86803: PPUSH
86804: CALL_OW 428
86808: PUSH
86809: LD_INT 0
86811: EQUAL
86812: IFFALSE 86865
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
86814: LD_VAR 0 1
86818: PPUSH
86819: LD_VAR 0 7
86823: PUSH
86824: LD_INT 1
86826: ARRAY
86827: PPUSH
86828: LD_VAR 0 7
86832: PUSH
86833: LD_INT 2
86835: ARRAY
86836: PPUSH
86837: LD_VAR 0 3
86841: PPUSH
86842: CALL_OW 48
// result := IsPlaced ( unit ) ;
86846: LD_ADDR_VAR 0 4
86850: PUSH
86851: LD_VAR 0 1
86855: PPUSH
86856: CALL_OW 305
86860: ST_TO_ADDR
// exit ;
86861: POP
86862: POP
86863: GO 86869
// end ; end ;
86865: GO 86744
86867: POP
86868: POP
// end ;
86869: LD_VAR 0 4
86873: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
86874: LD_INT 0
86876: PPUSH
86877: PPUSH
86878: PPUSH
// if not side or side > 8 then
86879: LD_VAR 0 1
86883: NOT
86884: PUSH
86885: LD_VAR 0 1
86889: PUSH
86890: LD_INT 8
86892: GREATER
86893: OR
86894: IFFALSE 86898
// exit ;
86896: GO 87085
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
86898: LD_ADDR_VAR 0 4
86902: PUSH
86903: LD_INT 22
86905: PUSH
86906: LD_VAR 0 1
86910: PUSH
86911: EMPTY
86912: LIST
86913: LIST
86914: PUSH
86915: LD_INT 21
86917: PUSH
86918: LD_INT 3
86920: PUSH
86921: EMPTY
86922: LIST
86923: LIST
86924: PUSH
86925: EMPTY
86926: LIST
86927: LIST
86928: PPUSH
86929: CALL_OW 69
86933: ST_TO_ADDR
// if not tmp then
86934: LD_VAR 0 4
86938: NOT
86939: IFFALSE 86943
// exit ;
86941: GO 87085
// enable_addtolog := true ;
86943: LD_ADDR_OWVAR 81
86947: PUSH
86948: LD_INT 1
86950: ST_TO_ADDR
// AddToLog ( [ ) ;
86951: LD_STRING [
86953: PPUSH
86954: CALL_OW 561
// for i in tmp do
86958: LD_ADDR_VAR 0 3
86962: PUSH
86963: LD_VAR 0 4
86967: PUSH
86968: FOR_IN
86969: IFFALSE 87076
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
86971: LD_STRING [
86973: PUSH
86974: LD_VAR 0 3
86978: PPUSH
86979: CALL_OW 266
86983: STR
86984: PUSH
86985: LD_STRING , 
86987: STR
86988: PUSH
86989: LD_VAR 0 3
86993: PPUSH
86994: CALL_OW 250
86998: STR
86999: PUSH
87000: LD_STRING , 
87002: STR
87003: PUSH
87004: LD_VAR 0 3
87008: PPUSH
87009: CALL_OW 251
87013: STR
87014: PUSH
87015: LD_STRING , 
87017: STR
87018: PUSH
87019: LD_VAR 0 3
87023: PPUSH
87024: CALL_OW 254
87028: STR
87029: PUSH
87030: LD_STRING , 
87032: STR
87033: PUSH
87034: LD_VAR 0 3
87038: PPUSH
87039: LD_INT 1
87041: PPUSH
87042: CALL_OW 268
87046: STR
87047: PUSH
87048: LD_STRING , 
87050: STR
87051: PUSH
87052: LD_VAR 0 3
87056: PPUSH
87057: LD_INT 2
87059: PPUSH
87060: CALL_OW 268
87064: STR
87065: PUSH
87066: LD_STRING ],
87068: STR
87069: PPUSH
87070: CALL_OW 561
// end ;
87074: GO 86968
87076: POP
87077: POP
// AddToLog ( ]; ) ;
87078: LD_STRING ];
87080: PPUSH
87081: CALL_OW 561
// end ;
87085: LD_VAR 0 2
87089: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
87090: LD_INT 0
87092: PPUSH
87093: PPUSH
87094: PPUSH
87095: PPUSH
87096: PPUSH
// if not area or not rate or not max then
87097: LD_VAR 0 1
87101: NOT
87102: PUSH
87103: LD_VAR 0 2
87107: NOT
87108: OR
87109: PUSH
87110: LD_VAR 0 4
87114: NOT
87115: OR
87116: IFFALSE 87120
// exit ;
87118: GO 87309
// while 1 do
87120: LD_INT 1
87122: IFFALSE 87309
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
87124: LD_ADDR_VAR 0 9
87128: PUSH
87129: LD_VAR 0 1
87133: PPUSH
87134: LD_INT 1
87136: PPUSH
87137: CALL_OW 287
87141: PUSH
87142: LD_INT 10
87144: MUL
87145: ST_TO_ADDR
// r := rate / 10 ;
87146: LD_ADDR_VAR 0 7
87150: PUSH
87151: LD_VAR 0 2
87155: PUSH
87156: LD_INT 10
87158: DIVREAL
87159: ST_TO_ADDR
// time := 1 1$00 ;
87160: LD_ADDR_VAR 0 8
87164: PUSH
87165: LD_INT 2100
87167: ST_TO_ADDR
// if amount < min then
87168: LD_VAR 0 9
87172: PUSH
87173: LD_VAR 0 3
87177: LESS
87178: IFFALSE 87196
// r := r * 2 else
87180: LD_ADDR_VAR 0 7
87184: PUSH
87185: LD_VAR 0 7
87189: PUSH
87190: LD_INT 2
87192: MUL
87193: ST_TO_ADDR
87194: GO 87222
// if amount > max then
87196: LD_VAR 0 9
87200: PUSH
87201: LD_VAR 0 4
87205: GREATER
87206: IFFALSE 87222
// r := r / 2 ;
87208: LD_ADDR_VAR 0 7
87212: PUSH
87213: LD_VAR 0 7
87217: PUSH
87218: LD_INT 2
87220: DIVREAL
87221: ST_TO_ADDR
// time := time / r ;
87222: LD_ADDR_VAR 0 8
87226: PUSH
87227: LD_VAR 0 8
87231: PUSH
87232: LD_VAR 0 7
87236: DIVREAL
87237: ST_TO_ADDR
// if time < 0 then
87238: LD_VAR 0 8
87242: PUSH
87243: LD_INT 0
87245: LESS
87246: IFFALSE 87263
// time := time * - 1 ;
87248: LD_ADDR_VAR 0 8
87252: PUSH
87253: LD_VAR 0 8
87257: PUSH
87258: LD_INT 1
87260: NEG
87261: MUL
87262: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
87263: LD_VAR 0 8
87267: PUSH
87268: LD_INT 35
87270: PPUSH
87271: LD_INT 875
87273: PPUSH
87274: CALL_OW 12
87278: PLUS
87279: PPUSH
87280: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
87284: LD_INT 1
87286: PPUSH
87287: LD_INT 5
87289: PPUSH
87290: CALL_OW 12
87294: PPUSH
87295: LD_VAR 0 1
87299: PPUSH
87300: LD_INT 1
87302: PPUSH
87303: CALL_OW 55
// end ;
87307: GO 87120
// end ;
87309: LD_VAR 0 5
87313: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
87314: LD_INT 0
87316: PPUSH
87317: PPUSH
87318: PPUSH
87319: PPUSH
87320: PPUSH
87321: PPUSH
87322: PPUSH
87323: PPUSH
// if not turrets or not factories then
87324: LD_VAR 0 1
87328: NOT
87329: PUSH
87330: LD_VAR 0 2
87334: NOT
87335: OR
87336: IFFALSE 87340
// exit ;
87338: GO 87647
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
87340: LD_ADDR_VAR 0 10
87344: PUSH
87345: LD_INT 5
87347: PUSH
87348: LD_INT 6
87350: PUSH
87351: EMPTY
87352: LIST
87353: LIST
87354: PUSH
87355: LD_INT 2
87357: PUSH
87358: LD_INT 4
87360: PUSH
87361: EMPTY
87362: LIST
87363: LIST
87364: PUSH
87365: LD_INT 3
87367: PUSH
87368: LD_INT 5
87370: PUSH
87371: EMPTY
87372: LIST
87373: LIST
87374: PUSH
87375: EMPTY
87376: LIST
87377: LIST
87378: LIST
87379: PUSH
87380: LD_INT 24
87382: PUSH
87383: LD_INT 25
87385: PUSH
87386: EMPTY
87387: LIST
87388: LIST
87389: PUSH
87390: LD_INT 23
87392: PUSH
87393: LD_INT 27
87395: PUSH
87396: EMPTY
87397: LIST
87398: LIST
87399: PUSH
87400: EMPTY
87401: LIST
87402: LIST
87403: PUSH
87404: LD_INT 42
87406: PUSH
87407: LD_INT 43
87409: PUSH
87410: EMPTY
87411: LIST
87412: LIST
87413: PUSH
87414: LD_INT 44
87416: PUSH
87417: LD_INT 46
87419: PUSH
87420: EMPTY
87421: LIST
87422: LIST
87423: PUSH
87424: LD_INT 45
87426: PUSH
87427: LD_INT 47
87429: PUSH
87430: EMPTY
87431: LIST
87432: LIST
87433: PUSH
87434: EMPTY
87435: LIST
87436: LIST
87437: LIST
87438: PUSH
87439: EMPTY
87440: LIST
87441: LIST
87442: LIST
87443: ST_TO_ADDR
// result := [ ] ;
87444: LD_ADDR_VAR 0 3
87448: PUSH
87449: EMPTY
87450: ST_TO_ADDR
// for i in turrets do
87451: LD_ADDR_VAR 0 4
87455: PUSH
87456: LD_VAR 0 1
87460: PUSH
87461: FOR_IN
87462: IFFALSE 87645
// begin nat := GetNation ( i ) ;
87464: LD_ADDR_VAR 0 7
87468: PUSH
87469: LD_VAR 0 4
87473: PPUSH
87474: CALL_OW 248
87478: ST_TO_ADDR
// weapon := 0 ;
87479: LD_ADDR_VAR 0 8
87483: PUSH
87484: LD_INT 0
87486: ST_TO_ADDR
// if not nat then
87487: LD_VAR 0 7
87491: NOT
87492: IFFALSE 87496
// continue ;
87494: GO 87461
// for j in list [ nat ] do
87496: LD_ADDR_VAR 0 5
87500: PUSH
87501: LD_VAR 0 10
87505: PUSH
87506: LD_VAR 0 7
87510: ARRAY
87511: PUSH
87512: FOR_IN
87513: IFFALSE 87554
// if GetBWeapon ( i ) = j [ 1 ] then
87515: LD_VAR 0 4
87519: PPUSH
87520: CALL_OW 269
87524: PUSH
87525: LD_VAR 0 5
87529: PUSH
87530: LD_INT 1
87532: ARRAY
87533: EQUAL
87534: IFFALSE 87552
// begin weapon := j [ 2 ] ;
87536: LD_ADDR_VAR 0 8
87540: PUSH
87541: LD_VAR 0 5
87545: PUSH
87546: LD_INT 2
87548: ARRAY
87549: ST_TO_ADDR
// break ;
87550: GO 87554
// end ;
87552: GO 87512
87554: POP
87555: POP
// if not weapon then
87556: LD_VAR 0 8
87560: NOT
87561: IFFALSE 87565
// continue ;
87563: GO 87461
// for k in factories do
87565: LD_ADDR_VAR 0 6
87569: PUSH
87570: LD_VAR 0 2
87574: PUSH
87575: FOR_IN
87576: IFFALSE 87641
// begin weapons := AvailableWeaponList ( k ) ;
87578: LD_ADDR_VAR 0 9
87582: PUSH
87583: LD_VAR 0 6
87587: PPUSH
87588: CALL_OW 478
87592: ST_TO_ADDR
// if not weapons then
87593: LD_VAR 0 9
87597: NOT
87598: IFFALSE 87602
// continue ;
87600: GO 87575
// if weapon in weapons then
87602: LD_VAR 0 8
87606: PUSH
87607: LD_VAR 0 9
87611: IN
87612: IFFALSE 87639
// begin result := [ i , weapon ] ;
87614: LD_ADDR_VAR 0 3
87618: PUSH
87619: LD_VAR 0 4
87623: PUSH
87624: LD_VAR 0 8
87628: PUSH
87629: EMPTY
87630: LIST
87631: LIST
87632: ST_TO_ADDR
// exit ;
87633: POP
87634: POP
87635: POP
87636: POP
87637: GO 87647
// end ; end ;
87639: GO 87575
87641: POP
87642: POP
// end ;
87643: GO 87461
87645: POP
87646: POP
// end ;
87647: LD_VAR 0 3
87651: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
87652: LD_INT 0
87654: PPUSH
// if not side or side > 8 then
87655: LD_VAR 0 3
87659: NOT
87660: PUSH
87661: LD_VAR 0 3
87665: PUSH
87666: LD_INT 8
87668: GREATER
87669: OR
87670: IFFALSE 87674
// exit ;
87672: GO 87733
// if not range then
87674: LD_VAR 0 4
87678: NOT
87679: IFFALSE 87690
// range := - 12 ;
87681: LD_ADDR_VAR 0 4
87685: PUSH
87686: LD_INT 12
87688: NEG
87689: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
87690: LD_VAR 0 1
87694: PPUSH
87695: LD_VAR 0 2
87699: PPUSH
87700: LD_VAR 0 3
87704: PPUSH
87705: LD_VAR 0 4
87709: PPUSH
87710: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
87714: LD_VAR 0 1
87718: PPUSH
87719: LD_VAR 0 2
87723: PPUSH
87724: LD_VAR 0 3
87728: PPUSH
87729: CALL_OW 331
// end ;
87733: LD_VAR 0 5
87737: RET
// export function Video ( mode ) ; begin
87738: LD_INT 0
87740: PPUSH
// ingame_video = mode ;
87741: LD_ADDR_OWVAR 52
87745: PUSH
87746: LD_VAR 0 1
87750: ST_TO_ADDR
// interface_hidden = mode ;
87751: LD_ADDR_OWVAR 54
87755: PUSH
87756: LD_VAR 0 1
87760: ST_TO_ADDR
// end ;
87761: LD_VAR 0 2
87765: RET
// export function Join ( array , element ) ; begin
87766: LD_INT 0
87768: PPUSH
// result := Replace ( array , array + 1 , element ) ;
87769: LD_ADDR_VAR 0 3
87773: PUSH
87774: LD_VAR 0 1
87778: PPUSH
87779: LD_VAR 0 1
87783: PUSH
87784: LD_INT 1
87786: PLUS
87787: PPUSH
87788: LD_VAR 0 2
87792: PPUSH
87793: CALL_OW 1
87797: ST_TO_ADDR
// end ;
87798: LD_VAR 0 3
87802: RET
// export function JoinUnion ( array , element ) ; begin
87803: LD_INT 0
87805: PPUSH
// result := array union element ;
87806: LD_ADDR_VAR 0 3
87810: PUSH
87811: LD_VAR 0 1
87815: PUSH
87816: LD_VAR 0 2
87820: UNION
87821: ST_TO_ADDR
// end ;
87822: LD_VAR 0 3
87826: RET
// export function GetBehemoths ( side ) ; begin
87827: LD_INT 0
87829: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
87830: LD_ADDR_VAR 0 2
87834: PUSH
87835: LD_INT 22
87837: PUSH
87838: LD_VAR 0 1
87842: PUSH
87843: EMPTY
87844: LIST
87845: LIST
87846: PUSH
87847: LD_INT 31
87849: PUSH
87850: LD_INT 25
87852: PUSH
87853: EMPTY
87854: LIST
87855: LIST
87856: PUSH
87857: EMPTY
87858: LIST
87859: LIST
87860: PPUSH
87861: CALL_OW 69
87865: ST_TO_ADDR
// end ;
87866: LD_VAR 0 2
87870: RET
// export function Shuffle ( array ) ; var i , index ; begin
87871: LD_INT 0
87873: PPUSH
87874: PPUSH
87875: PPUSH
// result := [ ] ;
87876: LD_ADDR_VAR 0 2
87880: PUSH
87881: EMPTY
87882: ST_TO_ADDR
// if not array then
87883: LD_VAR 0 1
87887: NOT
87888: IFFALSE 87892
// exit ;
87890: GO 87991
// Randomize ;
87892: CALL_OW 10
// for i = array downto 1 do
87896: LD_ADDR_VAR 0 3
87900: PUSH
87901: DOUBLE
87902: LD_VAR 0 1
87906: INC
87907: ST_TO_ADDR
87908: LD_INT 1
87910: PUSH
87911: FOR_DOWNTO
87912: IFFALSE 87989
// begin index := rand ( 1 , array ) ;
87914: LD_ADDR_VAR 0 4
87918: PUSH
87919: LD_INT 1
87921: PPUSH
87922: LD_VAR 0 1
87926: PPUSH
87927: CALL_OW 12
87931: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
87932: LD_ADDR_VAR 0 2
87936: PUSH
87937: LD_VAR 0 2
87941: PPUSH
87942: LD_VAR 0 2
87946: PUSH
87947: LD_INT 1
87949: PLUS
87950: PPUSH
87951: LD_VAR 0 1
87955: PUSH
87956: LD_VAR 0 4
87960: ARRAY
87961: PPUSH
87962: CALL_OW 2
87966: ST_TO_ADDR
// array := Delete ( array , index ) ;
87967: LD_ADDR_VAR 0 1
87971: PUSH
87972: LD_VAR 0 1
87976: PPUSH
87977: LD_VAR 0 4
87981: PPUSH
87982: CALL_OW 3
87986: ST_TO_ADDR
// end ;
87987: GO 87911
87989: POP
87990: POP
// end ;
87991: LD_VAR 0 2
87995: RET
// export function GetBaseMaterials ( base ) ; begin
87996: LD_INT 0
87998: PPUSH
// result := [ 0 , 0 , 0 ] ;
87999: LD_ADDR_VAR 0 2
88003: PUSH
88004: LD_INT 0
88006: PUSH
88007: LD_INT 0
88009: PUSH
88010: LD_INT 0
88012: PUSH
88013: EMPTY
88014: LIST
88015: LIST
88016: LIST
88017: ST_TO_ADDR
// if not base then
88018: LD_VAR 0 1
88022: NOT
88023: IFFALSE 88027
// exit ;
88025: GO 88076
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
88027: LD_ADDR_VAR 0 2
88031: PUSH
88032: LD_VAR 0 1
88036: PPUSH
88037: LD_INT 1
88039: PPUSH
88040: CALL_OW 275
88044: PUSH
88045: LD_VAR 0 1
88049: PPUSH
88050: LD_INT 2
88052: PPUSH
88053: CALL_OW 275
88057: PUSH
88058: LD_VAR 0 1
88062: PPUSH
88063: LD_INT 3
88065: PPUSH
88066: CALL_OW 275
88070: PUSH
88071: EMPTY
88072: LIST
88073: LIST
88074: LIST
88075: ST_TO_ADDR
// end ;
88076: LD_VAR 0 2
88080: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
88081: LD_INT 0
88083: PPUSH
88084: PPUSH
// result := array ;
88085: LD_ADDR_VAR 0 3
88089: PUSH
88090: LD_VAR 0 1
88094: ST_TO_ADDR
// if size >= result then
88095: LD_VAR 0 2
88099: PUSH
88100: LD_VAR 0 3
88104: GREATEREQUAL
88105: IFFALSE 88109
// exit ;
88107: GO 88159
// if size then
88109: LD_VAR 0 2
88113: IFFALSE 88159
// for i := array downto size do
88115: LD_ADDR_VAR 0 4
88119: PUSH
88120: DOUBLE
88121: LD_VAR 0 1
88125: INC
88126: ST_TO_ADDR
88127: LD_VAR 0 2
88131: PUSH
88132: FOR_DOWNTO
88133: IFFALSE 88157
// result := Delete ( result , result ) ;
88135: LD_ADDR_VAR 0 3
88139: PUSH
88140: LD_VAR 0 3
88144: PPUSH
88145: LD_VAR 0 3
88149: PPUSH
88150: CALL_OW 3
88154: ST_TO_ADDR
88155: GO 88132
88157: POP
88158: POP
// end ;
88159: LD_VAR 0 3
88163: RET
// export function ComExit ( unit ) ; var tmp ; begin
88164: LD_INT 0
88166: PPUSH
88167: PPUSH
// if not IsInUnit ( unit ) then
88168: LD_VAR 0 1
88172: PPUSH
88173: CALL_OW 310
88177: NOT
88178: IFFALSE 88182
// exit ;
88180: GO 88242
// tmp := IsInUnit ( unit ) ;
88182: LD_ADDR_VAR 0 3
88186: PUSH
88187: LD_VAR 0 1
88191: PPUSH
88192: CALL_OW 310
88196: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
88197: LD_VAR 0 3
88201: PPUSH
88202: CALL_OW 247
88206: PUSH
88207: LD_INT 2
88209: EQUAL
88210: IFFALSE 88223
// ComExitVehicle ( unit ) else
88212: LD_VAR 0 1
88216: PPUSH
88217: CALL_OW 121
88221: GO 88232
// ComExitBuilding ( unit ) ;
88223: LD_VAR 0 1
88227: PPUSH
88228: CALL_OW 122
// result := tmp ;
88232: LD_ADDR_VAR 0 2
88236: PUSH
88237: LD_VAR 0 3
88241: ST_TO_ADDR
// end ;
88242: LD_VAR 0 2
88246: RET
// export function ComExitAll ( units ) ; var i ; begin
88247: LD_INT 0
88249: PPUSH
88250: PPUSH
// if not units then
88251: LD_VAR 0 1
88255: NOT
88256: IFFALSE 88260
// exit ;
88258: GO 88286
// for i in units do
88260: LD_ADDR_VAR 0 3
88264: PUSH
88265: LD_VAR 0 1
88269: PUSH
88270: FOR_IN
88271: IFFALSE 88284
// ComExit ( i ) ;
88273: LD_VAR 0 3
88277: PPUSH
88278: CALL 88164 0 1
88282: GO 88270
88284: POP
88285: POP
// end ;
88286: LD_VAR 0 2
88290: RET
// export function ResetHc ; begin
88291: LD_INT 0
88293: PPUSH
// InitHc ;
88294: CALL_OW 19
// hc_importance := 0 ;
88298: LD_ADDR_OWVAR 32
88302: PUSH
88303: LD_INT 0
88305: ST_TO_ADDR
// end ;
88306: LD_VAR 0 1
88310: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
88311: LD_INT 0
88313: PPUSH
88314: PPUSH
88315: PPUSH
// _x := ( x1 + x2 ) div 2 ;
88316: LD_ADDR_VAR 0 6
88320: PUSH
88321: LD_VAR 0 1
88325: PUSH
88326: LD_VAR 0 3
88330: PLUS
88331: PUSH
88332: LD_INT 2
88334: DIV
88335: ST_TO_ADDR
// if _x < 0 then
88336: LD_VAR 0 6
88340: PUSH
88341: LD_INT 0
88343: LESS
88344: IFFALSE 88361
// _x := _x * - 1 ;
88346: LD_ADDR_VAR 0 6
88350: PUSH
88351: LD_VAR 0 6
88355: PUSH
88356: LD_INT 1
88358: NEG
88359: MUL
88360: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
88361: LD_ADDR_VAR 0 7
88365: PUSH
88366: LD_VAR 0 2
88370: PUSH
88371: LD_VAR 0 4
88375: PLUS
88376: PUSH
88377: LD_INT 2
88379: DIV
88380: ST_TO_ADDR
// if _y < 0 then
88381: LD_VAR 0 7
88385: PUSH
88386: LD_INT 0
88388: LESS
88389: IFFALSE 88406
// _y := _y * - 1 ;
88391: LD_ADDR_VAR 0 7
88395: PUSH
88396: LD_VAR 0 7
88400: PUSH
88401: LD_INT 1
88403: NEG
88404: MUL
88405: ST_TO_ADDR
// result := [ _x , _y ] ;
88406: LD_ADDR_VAR 0 5
88410: PUSH
88411: LD_VAR 0 6
88415: PUSH
88416: LD_VAR 0 7
88420: PUSH
88421: EMPTY
88422: LIST
88423: LIST
88424: ST_TO_ADDR
// end ;
88425: LD_VAR 0 5
88429: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
88430: LD_INT 0
88432: PPUSH
88433: PPUSH
88434: PPUSH
88435: PPUSH
// task := GetTaskList ( unit ) ;
88436: LD_ADDR_VAR 0 7
88440: PUSH
88441: LD_VAR 0 1
88445: PPUSH
88446: CALL_OW 437
88450: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
88451: LD_VAR 0 7
88455: NOT
88456: PUSH
88457: LD_VAR 0 1
88461: PPUSH
88462: LD_VAR 0 2
88466: PPUSH
88467: CALL_OW 308
88471: NOT
88472: AND
88473: IFFALSE 88477
// exit ;
88475: GO 88595
// if IsInArea ( unit , area ) then
88477: LD_VAR 0 1
88481: PPUSH
88482: LD_VAR 0 2
88486: PPUSH
88487: CALL_OW 308
88491: IFFALSE 88509
// begin ComMoveToArea ( unit , goAway ) ;
88493: LD_VAR 0 1
88497: PPUSH
88498: LD_VAR 0 3
88502: PPUSH
88503: CALL_OW 113
// exit ;
88507: GO 88595
// end ; if task [ 1 ] [ 1 ] <> M then
88509: LD_VAR 0 7
88513: PUSH
88514: LD_INT 1
88516: ARRAY
88517: PUSH
88518: LD_INT 1
88520: ARRAY
88521: PUSH
88522: LD_STRING M
88524: NONEQUAL
88525: IFFALSE 88529
// exit ;
88527: GO 88595
// x := task [ 1 ] [ 2 ] ;
88529: LD_ADDR_VAR 0 5
88533: PUSH
88534: LD_VAR 0 7
88538: PUSH
88539: LD_INT 1
88541: ARRAY
88542: PUSH
88543: LD_INT 2
88545: ARRAY
88546: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
88547: LD_ADDR_VAR 0 6
88551: PUSH
88552: LD_VAR 0 7
88556: PUSH
88557: LD_INT 1
88559: ARRAY
88560: PUSH
88561: LD_INT 3
88563: ARRAY
88564: ST_TO_ADDR
// if InArea ( x , y , area ) then
88565: LD_VAR 0 5
88569: PPUSH
88570: LD_VAR 0 6
88574: PPUSH
88575: LD_VAR 0 2
88579: PPUSH
88580: CALL_OW 309
88584: IFFALSE 88595
// ComStop ( unit ) ;
88586: LD_VAR 0 1
88590: PPUSH
88591: CALL_OW 141
// end ;
88595: LD_VAR 0 4
88599: RET
// export function Abs ( value ) ; begin
88600: LD_INT 0
88602: PPUSH
// result := value ;
88603: LD_ADDR_VAR 0 2
88607: PUSH
88608: LD_VAR 0 1
88612: ST_TO_ADDR
// if value < 0 then
88613: LD_VAR 0 1
88617: PUSH
88618: LD_INT 0
88620: LESS
88621: IFFALSE 88638
// result := value * - 1 ;
88623: LD_ADDR_VAR 0 2
88627: PUSH
88628: LD_VAR 0 1
88632: PUSH
88633: LD_INT 1
88635: NEG
88636: MUL
88637: ST_TO_ADDR
// end ;
88638: LD_VAR 0 2
88642: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
88643: LD_INT 0
88645: PPUSH
88646: PPUSH
88647: PPUSH
88648: PPUSH
88649: PPUSH
88650: PPUSH
88651: PPUSH
88652: PPUSH
// if not unit or not building then
88653: LD_VAR 0 1
88657: NOT
88658: PUSH
88659: LD_VAR 0 2
88663: NOT
88664: OR
88665: IFFALSE 88669
// exit ;
88667: GO 88895
// x := GetX ( building ) ;
88669: LD_ADDR_VAR 0 4
88673: PUSH
88674: LD_VAR 0 2
88678: PPUSH
88679: CALL_OW 250
88683: ST_TO_ADDR
// y := GetY ( building ) ;
88684: LD_ADDR_VAR 0 6
88688: PUSH
88689: LD_VAR 0 2
88693: PPUSH
88694: CALL_OW 251
88698: ST_TO_ADDR
// d := GetDir ( building ) ;
88699: LD_ADDR_VAR 0 8
88703: PUSH
88704: LD_VAR 0 2
88708: PPUSH
88709: CALL_OW 254
88713: ST_TO_ADDR
// r := 4 ;
88714: LD_ADDR_VAR 0 9
88718: PUSH
88719: LD_INT 4
88721: ST_TO_ADDR
// for i := 1 to 5 do
88722: LD_ADDR_VAR 0 10
88726: PUSH
88727: DOUBLE
88728: LD_INT 1
88730: DEC
88731: ST_TO_ADDR
88732: LD_INT 5
88734: PUSH
88735: FOR_TO
88736: IFFALSE 88893
// begin _x := ShiftX ( x , d , r + i ) ;
88738: LD_ADDR_VAR 0 5
88742: PUSH
88743: LD_VAR 0 4
88747: PPUSH
88748: LD_VAR 0 8
88752: PPUSH
88753: LD_VAR 0 9
88757: PUSH
88758: LD_VAR 0 10
88762: PLUS
88763: PPUSH
88764: CALL_OW 272
88768: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
88769: LD_ADDR_VAR 0 7
88773: PUSH
88774: LD_VAR 0 6
88778: PPUSH
88779: LD_VAR 0 8
88783: PPUSH
88784: LD_VAR 0 9
88788: PUSH
88789: LD_VAR 0 10
88793: PLUS
88794: PPUSH
88795: CALL_OW 273
88799: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
88800: LD_VAR 0 5
88804: PPUSH
88805: LD_VAR 0 7
88809: PPUSH
88810: CALL_OW 488
88814: PUSH
88815: LD_VAR 0 5
88819: PPUSH
88820: LD_VAR 0 7
88824: PPUSH
88825: CALL_OW 428
88829: PPUSH
88830: CALL_OW 247
88834: PUSH
88835: LD_INT 3
88837: PUSH
88838: LD_INT 2
88840: PUSH
88841: EMPTY
88842: LIST
88843: LIST
88844: IN
88845: NOT
88846: AND
88847: IFFALSE 88891
// begin ComMoveXY ( unit , _x , _y ) ;
88849: LD_VAR 0 1
88853: PPUSH
88854: LD_VAR 0 5
88858: PPUSH
88859: LD_VAR 0 7
88863: PPUSH
88864: CALL_OW 111
// result := [ _x , _y ] ;
88868: LD_ADDR_VAR 0 3
88872: PUSH
88873: LD_VAR 0 5
88877: PUSH
88878: LD_VAR 0 7
88882: PUSH
88883: EMPTY
88884: LIST
88885: LIST
88886: ST_TO_ADDR
// exit ;
88887: POP
88888: POP
88889: GO 88895
// end ; end ;
88891: GO 88735
88893: POP
88894: POP
// end ;
88895: LD_VAR 0 3
88899: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
88900: LD_INT 0
88902: PPUSH
88903: PPUSH
88904: PPUSH
// result := 0 ;
88905: LD_ADDR_VAR 0 3
88909: PUSH
88910: LD_INT 0
88912: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
88913: LD_VAR 0 1
88917: PUSH
88918: LD_INT 0
88920: LESS
88921: PUSH
88922: LD_VAR 0 1
88926: PUSH
88927: LD_INT 8
88929: GREATER
88930: OR
88931: PUSH
88932: LD_VAR 0 2
88936: PUSH
88937: LD_INT 0
88939: LESS
88940: OR
88941: PUSH
88942: LD_VAR 0 2
88946: PUSH
88947: LD_INT 8
88949: GREATER
88950: OR
88951: IFFALSE 88955
// exit ;
88953: GO 89030
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
88955: LD_ADDR_VAR 0 4
88959: PUSH
88960: LD_INT 22
88962: PUSH
88963: LD_VAR 0 2
88967: PUSH
88968: EMPTY
88969: LIST
88970: LIST
88971: PPUSH
88972: CALL_OW 69
88976: PUSH
88977: FOR_IN
88978: IFFALSE 89028
// begin un := UnitShoot ( i ) ;
88980: LD_ADDR_VAR 0 5
88984: PUSH
88985: LD_VAR 0 4
88989: PPUSH
88990: CALL_OW 504
88994: ST_TO_ADDR
// if GetSide ( un ) = side1 then
88995: LD_VAR 0 5
88999: PPUSH
89000: CALL_OW 255
89004: PUSH
89005: LD_VAR 0 1
89009: EQUAL
89010: IFFALSE 89026
// begin result := un ;
89012: LD_ADDR_VAR 0 3
89016: PUSH
89017: LD_VAR 0 5
89021: ST_TO_ADDR
// exit ;
89022: POP
89023: POP
89024: GO 89030
// end ; end ;
89026: GO 88977
89028: POP
89029: POP
// end ;
89030: LD_VAR 0 3
89034: RET
// export function GetCargoBay ( units ) ; begin
89035: LD_INT 0
89037: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
89038: LD_ADDR_VAR 0 2
89042: PUSH
89043: LD_VAR 0 1
89047: PPUSH
89048: LD_INT 2
89050: PUSH
89051: LD_INT 34
89053: PUSH
89054: LD_INT 12
89056: PUSH
89057: EMPTY
89058: LIST
89059: LIST
89060: PUSH
89061: LD_INT 34
89063: PUSH
89064: LD_INT 51
89066: PUSH
89067: EMPTY
89068: LIST
89069: LIST
89070: PUSH
89071: LD_INT 34
89073: PUSH
89074: LD_INT 32
89076: PUSH
89077: EMPTY
89078: LIST
89079: LIST
89080: PUSH
89081: LD_INT 34
89083: PUSH
89084: LD_INT 89
89086: PUSH
89087: EMPTY
89088: LIST
89089: LIST
89090: PUSH
89091: EMPTY
89092: LIST
89093: LIST
89094: LIST
89095: LIST
89096: LIST
89097: PPUSH
89098: CALL_OW 72
89102: ST_TO_ADDR
// end ;
89103: LD_VAR 0 2
89107: RET
// export function Negate ( value ) ; begin
89108: LD_INT 0
89110: PPUSH
// result := not value ;
89111: LD_ADDR_VAR 0 2
89115: PUSH
89116: LD_VAR 0 1
89120: NOT
89121: ST_TO_ADDR
// end ;
89122: LD_VAR 0 2
89126: RET
// export function Inc ( value ) ; begin
89127: LD_INT 0
89129: PPUSH
// result := value + 1 ;
89130: LD_ADDR_VAR 0 2
89134: PUSH
89135: LD_VAR 0 1
89139: PUSH
89140: LD_INT 1
89142: PLUS
89143: ST_TO_ADDR
// end ;
89144: LD_VAR 0 2
89148: RET
// export function Dec ( value ) ; begin
89149: LD_INT 0
89151: PPUSH
// result := value - 1 ;
89152: LD_ADDR_VAR 0 2
89156: PUSH
89157: LD_VAR 0 1
89161: PUSH
89162: LD_INT 1
89164: MINUS
89165: ST_TO_ADDR
// end ;
89166: LD_VAR 0 2
89170: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
89171: LD_INT 0
89173: PPUSH
89174: PPUSH
89175: PPUSH
89176: PPUSH
89177: PPUSH
89178: PPUSH
89179: PPUSH
89180: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
89181: LD_VAR 0 1
89185: PPUSH
89186: LD_VAR 0 2
89190: PPUSH
89191: CALL_OW 488
89195: NOT
89196: PUSH
89197: LD_VAR 0 3
89201: PPUSH
89202: LD_VAR 0 4
89206: PPUSH
89207: CALL_OW 488
89211: NOT
89212: OR
89213: IFFALSE 89226
// begin result := - 1 ;
89215: LD_ADDR_VAR 0 5
89219: PUSH
89220: LD_INT 1
89222: NEG
89223: ST_TO_ADDR
// exit ;
89224: GO 89461
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
89226: LD_ADDR_VAR 0 12
89230: PUSH
89231: LD_VAR 0 1
89235: PPUSH
89236: LD_VAR 0 2
89240: PPUSH
89241: LD_VAR 0 3
89245: PPUSH
89246: LD_VAR 0 4
89250: PPUSH
89251: CALL 88311 0 4
89255: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
89256: LD_ADDR_VAR 0 11
89260: PUSH
89261: LD_VAR 0 1
89265: PPUSH
89266: LD_VAR 0 2
89270: PPUSH
89271: LD_VAR 0 12
89275: PUSH
89276: LD_INT 1
89278: ARRAY
89279: PPUSH
89280: LD_VAR 0 12
89284: PUSH
89285: LD_INT 2
89287: ARRAY
89288: PPUSH
89289: CALL_OW 298
89293: ST_TO_ADDR
// distance := 9999 ;
89294: LD_ADDR_VAR 0 10
89298: PUSH
89299: LD_INT 9999
89301: ST_TO_ADDR
// for i := 0 to 5 do
89302: LD_ADDR_VAR 0 6
89306: PUSH
89307: DOUBLE
89308: LD_INT 0
89310: DEC
89311: ST_TO_ADDR
89312: LD_INT 5
89314: PUSH
89315: FOR_TO
89316: IFFALSE 89459
// begin _x := ShiftX ( x1 , i , centerDist ) ;
89318: LD_ADDR_VAR 0 7
89322: PUSH
89323: LD_VAR 0 1
89327: PPUSH
89328: LD_VAR 0 6
89332: PPUSH
89333: LD_VAR 0 11
89337: PPUSH
89338: CALL_OW 272
89342: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
89343: LD_ADDR_VAR 0 8
89347: PUSH
89348: LD_VAR 0 2
89352: PPUSH
89353: LD_VAR 0 6
89357: PPUSH
89358: LD_VAR 0 11
89362: PPUSH
89363: CALL_OW 273
89367: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
89368: LD_VAR 0 7
89372: PPUSH
89373: LD_VAR 0 8
89377: PPUSH
89378: CALL_OW 488
89382: NOT
89383: IFFALSE 89387
// continue ;
89385: GO 89315
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
89387: LD_ADDR_VAR 0 9
89391: PUSH
89392: LD_VAR 0 12
89396: PUSH
89397: LD_INT 1
89399: ARRAY
89400: PPUSH
89401: LD_VAR 0 12
89405: PUSH
89406: LD_INT 2
89408: ARRAY
89409: PPUSH
89410: LD_VAR 0 7
89414: PPUSH
89415: LD_VAR 0 8
89419: PPUSH
89420: CALL_OW 298
89424: ST_TO_ADDR
// if tmp < distance then
89425: LD_VAR 0 9
89429: PUSH
89430: LD_VAR 0 10
89434: LESS
89435: IFFALSE 89457
// begin result := i ;
89437: LD_ADDR_VAR 0 5
89441: PUSH
89442: LD_VAR 0 6
89446: ST_TO_ADDR
// distance := tmp ;
89447: LD_ADDR_VAR 0 10
89451: PUSH
89452: LD_VAR 0 9
89456: ST_TO_ADDR
// end ; end ;
89457: GO 89315
89459: POP
89460: POP
// end ;
89461: LD_VAR 0 5
89465: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
89466: LD_INT 0
89468: PPUSH
89469: PPUSH
// if not driver or not IsInUnit ( driver ) then
89470: LD_VAR 0 1
89474: NOT
89475: PUSH
89476: LD_VAR 0 1
89480: PPUSH
89481: CALL_OW 310
89485: NOT
89486: OR
89487: IFFALSE 89491
// exit ;
89489: GO 89581
// vehicle := IsInUnit ( driver ) ;
89491: LD_ADDR_VAR 0 3
89495: PUSH
89496: LD_VAR 0 1
89500: PPUSH
89501: CALL_OW 310
89505: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
89506: LD_VAR 0 1
89510: PPUSH
89511: LD_STRING \
89513: PUSH
89514: LD_INT 0
89516: PUSH
89517: LD_INT 0
89519: PUSH
89520: LD_INT 0
89522: PUSH
89523: LD_INT 0
89525: PUSH
89526: LD_INT 0
89528: PUSH
89529: LD_INT 0
89531: PUSH
89532: EMPTY
89533: LIST
89534: LIST
89535: LIST
89536: LIST
89537: LIST
89538: LIST
89539: LIST
89540: PUSH
89541: LD_STRING E
89543: PUSH
89544: LD_INT 0
89546: PUSH
89547: LD_INT 0
89549: PUSH
89550: LD_VAR 0 3
89554: PUSH
89555: LD_INT 0
89557: PUSH
89558: LD_INT 0
89560: PUSH
89561: LD_INT 0
89563: PUSH
89564: EMPTY
89565: LIST
89566: LIST
89567: LIST
89568: LIST
89569: LIST
89570: LIST
89571: LIST
89572: PUSH
89573: EMPTY
89574: LIST
89575: LIST
89576: PPUSH
89577: CALL_OW 446
// end ;
89581: LD_VAR 0 2
89585: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
89586: LD_INT 0
89588: PPUSH
89589: PPUSH
// if not driver or not IsInUnit ( driver ) then
89590: LD_VAR 0 1
89594: NOT
89595: PUSH
89596: LD_VAR 0 1
89600: PPUSH
89601: CALL_OW 310
89605: NOT
89606: OR
89607: IFFALSE 89611
// exit ;
89609: GO 89701
// vehicle := IsInUnit ( driver ) ;
89611: LD_ADDR_VAR 0 3
89615: PUSH
89616: LD_VAR 0 1
89620: PPUSH
89621: CALL_OW 310
89625: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
89626: LD_VAR 0 1
89630: PPUSH
89631: LD_STRING \
89633: PUSH
89634: LD_INT 0
89636: PUSH
89637: LD_INT 0
89639: PUSH
89640: LD_INT 0
89642: PUSH
89643: LD_INT 0
89645: PUSH
89646: LD_INT 0
89648: PUSH
89649: LD_INT 0
89651: PUSH
89652: EMPTY
89653: LIST
89654: LIST
89655: LIST
89656: LIST
89657: LIST
89658: LIST
89659: LIST
89660: PUSH
89661: LD_STRING E
89663: PUSH
89664: LD_INT 0
89666: PUSH
89667: LD_INT 0
89669: PUSH
89670: LD_VAR 0 3
89674: PUSH
89675: LD_INT 0
89677: PUSH
89678: LD_INT 0
89680: PUSH
89681: LD_INT 0
89683: PUSH
89684: EMPTY
89685: LIST
89686: LIST
89687: LIST
89688: LIST
89689: LIST
89690: LIST
89691: LIST
89692: PUSH
89693: EMPTY
89694: LIST
89695: LIST
89696: PPUSH
89697: CALL_OW 447
// end ;
89701: LD_VAR 0 2
89705: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
89706: LD_INT 0
89708: PPUSH
89709: PPUSH
89710: PPUSH
// tmp := [ ] ;
89711: LD_ADDR_VAR 0 5
89715: PUSH
89716: EMPTY
89717: ST_TO_ADDR
// for i in units do
89718: LD_ADDR_VAR 0 4
89722: PUSH
89723: LD_VAR 0 1
89727: PUSH
89728: FOR_IN
89729: IFFALSE 89767
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
89731: LD_ADDR_VAR 0 5
89735: PUSH
89736: LD_VAR 0 5
89740: PPUSH
89741: LD_VAR 0 5
89745: PUSH
89746: LD_INT 1
89748: PLUS
89749: PPUSH
89750: LD_VAR 0 4
89754: PPUSH
89755: CALL_OW 256
89759: PPUSH
89760: CALL_OW 2
89764: ST_TO_ADDR
89765: GO 89728
89767: POP
89768: POP
// if not tmp then
89769: LD_VAR 0 5
89773: NOT
89774: IFFALSE 89778
// exit ;
89776: GO 89826
// if asc then
89778: LD_VAR 0 2
89782: IFFALSE 89806
// result := SortListByListAsc ( units , tmp ) else
89784: LD_ADDR_VAR 0 3
89788: PUSH
89789: LD_VAR 0 1
89793: PPUSH
89794: LD_VAR 0 5
89798: PPUSH
89799: CALL_OW 76
89803: ST_TO_ADDR
89804: GO 89826
// result := SortListByListDesc ( units , tmp ) ;
89806: LD_ADDR_VAR 0 3
89810: PUSH
89811: LD_VAR 0 1
89815: PPUSH
89816: LD_VAR 0 5
89820: PPUSH
89821: CALL_OW 77
89825: ST_TO_ADDR
// end ;
89826: LD_VAR 0 3
89830: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
89831: LD_INT 0
89833: PPUSH
89834: PPUSH
// task := GetTaskList ( mech ) ;
89835: LD_ADDR_VAR 0 4
89839: PUSH
89840: LD_VAR 0 1
89844: PPUSH
89845: CALL_OW 437
89849: ST_TO_ADDR
// if not task then
89850: LD_VAR 0 4
89854: NOT
89855: IFFALSE 89859
// exit ;
89857: GO 89901
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
89859: LD_ADDR_VAR 0 3
89863: PUSH
89864: LD_VAR 0 4
89868: PUSH
89869: LD_INT 1
89871: ARRAY
89872: PUSH
89873: LD_INT 1
89875: ARRAY
89876: PUSH
89877: LD_STRING r
89879: EQUAL
89880: PUSH
89881: LD_VAR 0 4
89885: PUSH
89886: LD_INT 1
89888: ARRAY
89889: PUSH
89890: LD_INT 4
89892: ARRAY
89893: PUSH
89894: LD_VAR 0 2
89898: EQUAL
89899: AND
89900: ST_TO_ADDR
// end ;
89901: LD_VAR 0 3
89905: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
89906: LD_INT 0
89908: PPUSH
// SetDir ( unit , d ) ;
89909: LD_VAR 0 1
89913: PPUSH
89914: LD_VAR 0 4
89918: PPUSH
89919: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
89923: LD_VAR 0 1
89927: PPUSH
89928: LD_VAR 0 2
89932: PPUSH
89933: LD_VAR 0 3
89937: PPUSH
89938: LD_VAR 0 5
89942: PPUSH
89943: CALL_OW 48
// end ;
89947: LD_VAR 0 6
89951: RET
// export function ToNaturalNumber ( number ) ; begin
89952: LD_INT 0
89954: PPUSH
// result := number div 1 ;
89955: LD_ADDR_VAR 0 2
89959: PUSH
89960: LD_VAR 0 1
89964: PUSH
89965: LD_INT 1
89967: DIV
89968: ST_TO_ADDR
// if number < 0 then
89969: LD_VAR 0 1
89973: PUSH
89974: LD_INT 0
89976: LESS
89977: IFFALSE 89987
// result := 0 ;
89979: LD_ADDR_VAR 0 2
89983: PUSH
89984: LD_INT 0
89986: ST_TO_ADDR
// end ;
89987: LD_VAR 0 2
89991: RET
// export function SortByClass ( units , class ) ; var un ; begin
89992: LD_INT 0
89994: PPUSH
89995: PPUSH
// if not units or not class then
89996: LD_VAR 0 1
90000: NOT
90001: PUSH
90002: LD_VAR 0 2
90006: NOT
90007: OR
90008: IFFALSE 90012
// exit ;
90010: GO 90107
// result := [ ] ;
90012: LD_ADDR_VAR 0 3
90016: PUSH
90017: EMPTY
90018: ST_TO_ADDR
// for un in units do
90019: LD_ADDR_VAR 0 4
90023: PUSH
90024: LD_VAR 0 1
90028: PUSH
90029: FOR_IN
90030: IFFALSE 90105
// if GetClass ( un ) = class then
90032: LD_VAR 0 4
90036: PPUSH
90037: CALL_OW 257
90041: PUSH
90042: LD_VAR 0 2
90046: EQUAL
90047: IFFALSE 90074
// result := Insert ( result , 1 , un ) else
90049: LD_ADDR_VAR 0 3
90053: PUSH
90054: LD_VAR 0 3
90058: PPUSH
90059: LD_INT 1
90061: PPUSH
90062: LD_VAR 0 4
90066: PPUSH
90067: CALL_OW 2
90071: ST_TO_ADDR
90072: GO 90103
// result := Replace ( result , result + 1 , un ) ;
90074: LD_ADDR_VAR 0 3
90078: PUSH
90079: LD_VAR 0 3
90083: PPUSH
90084: LD_VAR 0 3
90088: PUSH
90089: LD_INT 1
90091: PLUS
90092: PPUSH
90093: LD_VAR 0 4
90097: PPUSH
90098: CALL_OW 1
90102: ST_TO_ADDR
90103: GO 90029
90105: POP
90106: POP
// end ;
90107: LD_VAR 0 3
90111: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
90112: LD_INT 0
90114: PPUSH
90115: PPUSH
90116: PPUSH
90117: PPUSH
90118: PPUSH
90119: PPUSH
90120: PPUSH
// result := [ ] ;
90121: LD_ADDR_VAR 0 4
90125: PUSH
90126: EMPTY
90127: ST_TO_ADDR
// if x - r < 0 then
90128: LD_VAR 0 1
90132: PUSH
90133: LD_VAR 0 3
90137: MINUS
90138: PUSH
90139: LD_INT 0
90141: LESS
90142: IFFALSE 90154
// min_x := 0 else
90144: LD_ADDR_VAR 0 8
90148: PUSH
90149: LD_INT 0
90151: ST_TO_ADDR
90152: GO 90170
// min_x := x - r ;
90154: LD_ADDR_VAR 0 8
90158: PUSH
90159: LD_VAR 0 1
90163: PUSH
90164: LD_VAR 0 3
90168: MINUS
90169: ST_TO_ADDR
// if y - r < 0 then
90170: LD_VAR 0 2
90174: PUSH
90175: LD_VAR 0 3
90179: MINUS
90180: PUSH
90181: LD_INT 0
90183: LESS
90184: IFFALSE 90196
// min_y := 0 else
90186: LD_ADDR_VAR 0 7
90190: PUSH
90191: LD_INT 0
90193: ST_TO_ADDR
90194: GO 90212
// min_y := y - r ;
90196: LD_ADDR_VAR 0 7
90200: PUSH
90201: LD_VAR 0 2
90205: PUSH
90206: LD_VAR 0 3
90210: MINUS
90211: ST_TO_ADDR
// max_x := x + r ;
90212: LD_ADDR_VAR 0 9
90216: PUSH
90217: LD_VAR 0 1
90221: PUSH
90222: LD_VAR 0 3
90226: PLUS
90227: ST_TO_ADDR
// max_y := y + r ;
90228: LD_ADDR_VAR 0 10
90232: PUSH
90233: LD_VAR 0 2
90237: PUSH
90238: LD_VAR 0 3
90242: PLUS
90243: ST_TO_ADDR
// for _x = min_x to max_x do
90244: LD_ADDR_VAR 0 5
90248: PUSH
90249: DOUBLE
90250: LD_VAR 0 8
90254: DEC
90255: ST_TO_ADDR
90256: LD_VAR 0 9
90260: PUSH
90261: FOR_TO
90262: IFFALSE 90363
// for _y = min_y to max_y do
90264: LD_ADDR_VAR 0 6
90268: PUSH
90269: DOUBLE
90270: LD_VAR 0 7
90274: DEC
90275: ST_TO_ADDR
90276: LD_VAR 0 10
90280: PUSH
90281: FOR_TO
90282: IFFALSE 90359
// begin if not ValidHex ( _x , _y ) then
90284: LD_VAR 0 5
90288: PPUSH
90289: LD_VAR 0 6
90293: PPUSH
90294: CALL_OW 488
90298: NOT
90299: IFFALSE 90303
// continue ;
90301: GO 90281
// if GetResourceTypeXY ( _x , _y ) then
90303: LD_VAR 0 5
90307: PPUSH
90308: LD_VAR 0 6
90312: PPUSH
90313: CALL_OW 283
90317: IFFALSE 90357
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
90319: LD_ADDR_VAR 0 4
90323: PUSH
90324: LD_VAR 0 4
90328: PPUSH
90329: LD_VAR 0 4
90333: PUSH
90334: LD_INT 1
90336: PLUS
90337: PPUSH
90338: LD_VAR 0 5
90342: PUSH
90343: LD_VAR 0 6
90347: PUSH
90348: EMPTY
90349: LIST
90350: LIST
90351: PPUSH
90352: CALL_OW 1
90356: ST_TO_ADDR
// end ;
90357: GO 90281
90359: POP
90360: POP
90361: GO 90261
90363: POP
90364: POP
// end ;
90365: LD_VAR 0 4
90369: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
90370: LD_INT 0
90372: PPUSH
90373: PPUSH
90374: PPUSH
90375: PPUSH
90376: PPUSH
90377: PPUSH
90378: PPUSH
90379: PPUSH
// if not units then
90380: LD_VAR 0 1
90384: NOT
90385: IFFALSE 90389
// exit ;
90387: GO 90913
// result := UnitFilter ( units , [ f_ok ] ) ;
90389: LD_ADDR_VAR 0 3
90393: PUSH
90394: LD_VAR 0 1
90398: PPUSH
90399: LD_INT 50
90401: PUSH
90402: EMPTY
90403: LIST
90404: PPUSH
90405: CALL_OW 72
90409: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
90410: LD_ADDR_VAR 0 8
90414: PUSH
90415: LD_VAR 0 1
90419: PUSH
90420: LD_INT 1
90422: ARRAY
90423: PPUSH
90424: CALL_OW 255
90428: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
90429: LD_ADDR_VAR 0 10
90433: PUSH
90434: LD_INT 29
90436: PUSH
90437: LD_INT 91
90439: PUSH
90440: LD_INT 49
90442: PUSH
90443: EMPTY
90444: LIST
90445: LIST
90446: LIST
90447: ST_TO_ADDR
// if not result then
90448: LD_VAR 0 3
90452: NOT
90453: IFFALSE 90457
// exit ;
90455: GO 90913
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
90457: LD_ADDR_VAR 0 5
90461: PUSH
90462: LD_INT 81
90464: PUSH
90465: LD_VAR 0 8
90469: PUSH
90470: EMPTY
90471: LIST
90472: LIST
90473: PPUSH
90474: CALL_OW 69
90478: ST_TO_ADDR
// for i in result do
90479: LD_ADDR_VAR 0 4
90483: PUSH
90484: LD_VAR 0 3
90488: PUSH
90489: FOR_IN
90490: IFFALSE 90911
// begin tag := GetTag ( i ) + 1 ;
90492: LD_ADDR_VAR 0 9
90496: PUSH
90497: LD_VAR 0 4
90501: PPUSH
90502: CALL_OW 110
90506: PUSH
90507: LD_INT 1
90509: PLUS
90510: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
90511: LD_ADDR_VAR 0 7
90515: PUSH
90516: LD_VAR 0 4
90520: PPUSH
90521: CALL_OW 250
90525: PPUSH
90526: LD_VAR 0 4
90530: PPUSH
90531: CALL_OW 251
90535: PPUSH
90536: LD_INT 6
90538: PPUSH
90539: CALL 90112 0 3
90543: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
90544: LD_VAR 0 4
90548: PPUSH
90549: CALL_OW 247
90553: PUSH
90554: LD_INT 2
90556: EQUAL
90557: PUSH
90558: LD_VAR 0 7
90562: AND
90563: PUSH
90564: LD_VAR 0 4
90568: PPUSH
90569: CALL_OW 264
90573: PUSH
90574: LD_VAR 0 10
90578: IN
90579: NOT
90580: AND
90581: IFFALSE 90620
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
90583: LD_VAR 0 4
90587: PPUSH
90588: LD_VAR 0 7
90592: PUSH
90593: LD_INT 1
90595: ARRAY
90596: PUSH
90597: LD_INT 1
90599: ARRAY
90600: PPUSH
90601: LD_VAR 0 7
90605: PUSH
90606: LD_INT 1
90608: ARRAY
90609: PUSH
90610: LD_INT 2
90612: ARRAY
90613: PPUSH
90614: CALL_OW 116
90618: GO 90909
// if path > tag then
90620: LD_VAR 0 2
90624: PUSH
90625: LD_VAR 0 9
90629: GREATER
90630: IFFALSE 90838
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
90632: LD_ADDR_VAR 0 6
90636: PUSH
90637: LD_VAR 0 5
90641: PPUSH
90642: LD_INT 91
90644: PUSH
90645: LD_VAR 0 4
90649: PUSH
90650: LD_INT 8
90652: PUSH
90653: EMPTY
90654: LIST
90655: LIST
90656: LIST
90657: PPUSH
90658: CALL_OW 72
90662: ST_TO_ADDR
// if nearEnemy then
90663: LD_VAR 0 6
90667: IFFALSE 90736
// begin if GetWeapon ( i ) = ru_time_lapser then
90669: LD_VAR 0 4
90673: PPUSH
90674: CALL_OW 264
90678: PUSH
90679: LD_INT 49
90681: EQUAL
90682: IFFALSE 90710
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
90684: LD_VAR 0 4
90688: PPUSH
90689: LD_VAR 0 6
90693: PPUSH
90694: LD_VAR 0 4
90698: PPUSH
90699: CALL_OW 74
90703: PPUSH
90704: CALL_OW 112
90708: GO 90734
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
90710: LD_VAR 0 4
90714: PPUSH
90715: LD_VAR 0 6
90719: PPUSH
90720: LD_VAR 0 4
90724: PPUSH
90725: CALL_OW 74
90729: PPUSH
90730: CALL_OW 115
// end else
90734: GO 90836
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
90736: LD_VAR 0 4
90740: PPUSH
90741: LD_VAR 0 2
90745: PUSH
90746: LD_VAR 0 9
90750: ARRAY
90751: PUSH
90752: LD_INT 1
90754: ARRAY
90755: PPUSH
90756: LD_VAR 0 2
90760: PUSH
90761: LD_VAR 0 9
90765: ARRAY
90766: PUSH
90767: LD_INT 2
90769: ARRAY
90770: PPUSH
90771: CALL_OW 297
90775: PUSH
90776: LD_INT 6
90778: GREATER
90779: IFFALSE 90822
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
90781: LD_VAR 0 4
90785: PPUSH
90786: LD_VAR 0 2
90790: PUSH
90791: LD_VAR 0 9
90795: ARRAY
90796: PUSH
90797: LD_INT 1
90799: ARRAY
90800: PPUSH
90801: LD_VAR 0 2
90805: PUSH
90806: LD_VAR 0 9
90810: ARRAY
90811: PUSH
90812: LD_INT 2
90814: ARRAY
90815: PPUSH
90816: CALL_OW 114
90820: GO 90836
// SetTag ( i , tag ) ;
90822: LD_VAR 0 4
90826: PPUSH
90827: LD_VAR 0 9
90831: PPUSH
90832: CALL_OW 109
// end else
90836: GO 90909
// if enemy then
90838: LD_VAR 0 5
90842: IFFALSE 90909
// begin if GetWeapon ( i ) = ru_time_lapser then
90844: LD_VAR 0 4
90848: PPUSH
90849: CALL_OW 264
90853: PUSH
90854: LD_INT 49
90856: EQUAL
90857: IFFALSE 90885
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
90859: LD_VAR 0 4
90863: PPUSH
90864: LD_VAR 0 5
90868: PPUSH
90869: LD_VAR 0 4
90873: PPUSH
90874: CALL_OW 74
90878: PPUSH
90879: CALL_OW 112
90883: GO 90909
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
90885: LD_VAR 0 4
90889: PPUSH
90890: LD_VAR 0 5
90894: PPUSH
90895: LD_VAR 0 4
90899: PPUSH
90900: CALL_OW 74
90904: PPUSH
90905: CALL_OW 115
// end ; end ;
90909: GO 90489
90911: POP
90912: POP
// end ;
90913: LD_VAR 0 3
90917: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
90918: LD_INT 0
90920: PPUSH
90921: PPUSH
90922: PPUSH
// if not unit or IsInUnit ( unit ) then
90923: LD_VAR 0 1
90927: NOT
90928: PUSH
90929: LD_VAR 0 1
90933: PPUSH
90934: CALL_OW 310
90938: OR
90939: IFFALSE 90943
// exit ;
90941: GO 91034
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
90943: LD_ADDR_VAR 0 4
90947: PUSH
90948: LD_VAR 0 1
90952: PPUSH
90953: CALL_OW 250
90957: PPUSH
90958: LD_VAR 0 2
90962: PPUSH
90963: LD_INT 1
90965: PPUSH
90966: CALL_OW 272
90970: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
90971: LD_ADDR_VAR 0 5
90975: PUSH
90976: LD_VAR 0 1
90980: PPUSH
90981: CALL_OW 251
90985: PPUSH
90986: LD_VAR 0 2
90990: PPUSH
90991: LD_INT 1
90993: PPUSH
90994: CALL_OW 273
90998: ST_TO_ADDR
// if ValidHex ( x , y ) then
90999: LD_VAR 0 4
91003: PPUSH
91004: LD_VAR 0 5
91008: PPUSH
91009: CALL_OW 488
91013: IFFALSE 91034
// ComTurnXY ( unit , x , y ) ;
91015: LD_VAR 0 1
91019: PPUSH
91020: LD_VAR 0 4
91024: PPUSH
91025: LD_VAR 0 5
91029: PPUSH
91030: CALL_OW 118
// end ;
91034: LD_VAR 0 3
91038: RET
// export function SeeUnits ( side , units ) ; var i ; begin
91039: LD_INT 0
91041: PPUSH
91042: PPUSH
// result := false ;
91043: LD_ADDR_VAR 0 3
91047: PUSH
91048: LD_INT 0
91050: ST_TO_ADDR
// if not units then
91051: LD_VAR 0 2
91055: NOT
91056: IFFALSE 91060
// exit ;
91058: GO 91105
// for i in units do
91060: LD_ADDR_VAR 0 4
91064: PUSH
91065: LD_VAR 0 2
91069: PUSH
91070: FOR_IN
91071: IFFALSE 91103
// if See ( side , i ) then
91073: LD_VAR 0 1
91077: PPUSH
91078: LD_VAR 0 4
91082: PPUSH
91083: CALL_OW 292
91087: IFFALSE 91101
// begin result := true ;
91089: LD_ADDR_VAR 0 3
91093: PUSH
91094: LD_INT 1
91096: ST_TO_ADDR
// exit ;
91097: POP
91098: POP
91099: GO 91105
// end ;
91101: GO 91070
91103: POP
91104: POP
// end ;
91105: LD_VAR 0 3
91109: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
91110: LD_INT 0
91112: PPUSH
91113: PPUSH
91114: PPUSH
91115: PPUSH
// if not unit or not points then
91116: LD_VAR 0 1
91120: NOT
91121: PUSH
91122: LD_VAR 0 2
91126: NOT
91127: OR
91128: IFFALSE 91132
// exit ;
91130: GO 91222
// dist := 99999 ;
91132: LD_ADDR_VAR 0 5
91136: PUSH
91137: LD_INT 99999
91139: ST_TO_ADDR
// for i in points do
91140: LD_ADDR_VAR 0 4
91144: PUSH
91145: LD_VAR 0 2
91149: PUSH
91150: FOR_IN
91151: IFFALSE 91220
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
91153: LD_ADDR_VAR 0 6
91157: PUSH
91158: LD_VAR 0 1
91162: PPUSH
91163: LD_VAR 0 4
91167: PUSH
91168: LD_INT 1
91170: ARRAY
91171: PPUSH
91172: LD_VAR 0 4
91176: PUSH
91177: LD_INT 2
91179: ARRAY
91180: PPUSH
91181: CALL_OW 297
91185: ST_TO_ADDR
// if tmpDist < dist then
91186: LD_VAR 0 6
91190: PUSH
91191: LD_VAR 0 5
91195: LESS
91196: IFFALSE 91218
// begin result := i ;
91198: LD_ADDR_VAR 0 3
91202: PUSH
91203: LD_VAR 0 4
91207: ST_TO_ADDR
// dist := tmpDist ;
91208: LD_ADDR_VAR 0 5
91212: PUSH
91213: LD_VAR 0 6
91217: ST_TO_ADDR
// end ; end ;
91218: GO 91150
91220: POP
91221: POP
// end ;
91222: LD_VAR 0 3
91226: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
91227: LD_INT 0
91229: PPUSH
// uc_side := side ;
91230: LD_ADDR_OWVAR 20
91234: PUSH
91235: LD_VAR 0 1
91239: ST_TO_ADDR
// uc_nation := 3 ;
91240: LD_ADDR_OWVAR 21
91244: PUSH
91245: LD_INT 3
91247: ST_TO_ADDR
// vc_chassis := 25 ;
91248: LD_ADDR_OWVAR 37
91252: PUSH
91253: LD_INT 25
91255: ST_TO_ADDR
// vc_engine := engine_siberite ;
91256: LD_ADDR_OWVAR 39
91260: PUSH
91261: LD_INT 3
91263: ST_TO_ADDR
// vc_control := control_computer ;
91264: LD_ADDR_OWVAR 38
91268: PUSH
91269: LD_INT 3
91271: ST_TO_ADDR
// vc_weapon := 59 ;
91272: LD_ADDR_OWVAR 40
91276: PUSH
91277: LD_INT 59
91279: ST_TO_ADDR
// result := CreateVehicle ;
91280: LD_ADDR_VAR 0 5
91284: PUSH
91285: CALL_OW 45
91289: ST_TO_ADDR
// SetDir ( result , d ) ;
91290: LD_VAR 0 5
91294: PPUSH
91295: LD_VAR 0 4
91299: PPUSH
91300: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
91304: LD_VAR 0 5
91308: PPUSH
91309: LD_VAR 0 2
91313: PPUSH
91314: LD_VAR 0 3
91318: PPUSH
91319: LD_INT 0
91321: PPUSH
91322: CALL_OW 48
// end ;
91326: LD_VAR 0 5
91330: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
91331: LD_INT 0
91333: PPUSH
91334: PPUSH
91335: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
91336: LD_ADDR_VAR 0 2
91340: PUSH
91341: LD_INT 0
91343: PUSH
91344: LD_INT 0
91346: PUSH
91347: LD_INT 0
91349: PUSH
91350: LD_INT 0
91352: PUSH
91353: EMPTY
91354: LIST
91355: LIST
91356: LIST
91357: LIST
91358: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
91359: LD_VAR 0 1
91363: NOT
91364: PUSH
91365: LD_VAR 0 1
91369: PPUSH
91370: CALL_OW 264
91374: PUSH
91375: LD_INT 12
91377: PUSH
91378: LD_INT 51
91380: PUSH
91381: LD_INT 32
91383: PUSH
91384: LD_INT 89
91386: PUSH
91387: EMPTY
91388: LIST
91389: LIST
91390: LIST
91391: LIST
91392: IN
91393: NOT
91394: OR
91395: IFFALSE 91399
// exit ;
91397: GO 91497
// for i := 1 to 3 do
91399: LD_ADDR_VAR 0 3
91403: PUSH
91404: DOUBLE
91405: LD_INT 1
91407: DEC
91408: ST_TO_ADDR
91409: LD_INT 3
91411: PUSH
91412: FOR_TO
91413: IFFALSE 91495
// begin tmp := GetCargo ( cargo , i ) ;
91415: LD_ADDR_VAR 0 4
91419: PUSH
91420: LD_VAR 0 1
91424: PPUSH
91425: LD_VAR 0 3
91429: PPUSH
91430: CALL_OW 289
91434: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
91435: LD_ADDR_VAR 0 2
91439: PUSH
91440: LD_VAR 0 2
91444: PPUSH
91445: LD_VAR 0 3
91449: PPUSH
91450: LD_VAR 0 4
91454: PPUSH
91455: CALL_OW 1
91459: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
91460: LD_ADDR_VAR 0 2
91464: PUSH
91465: LD_VAR 0 2
91469: PPUSH
91470: LD_INT 4
91472: PPUSH
91473: LD_VAR 0 2
91477: PUSH
91478: LD_INT 4
91480: ARRAY
91481: PUSH
91482: LD_VAR 0 4
91486: PLUS
91487: PPUSH
91488: CALL_OW 1
91492: ST_TO_ADDR
// end ;
91493: GO 91412
91495: POP
91496: POP
// end ;
91497: LD_VAR 0 2
91501: RET
// export function Length ( array ) ; begin
91502: LD_INT 0
91504: PPUSH
// result := array + 0 ;
91505: LD_ADDR_VAR 0 2
91509: PUSH
91510: LD_VAR 0 1
91514: PUSH
91515: LD_INT 0
91517: PLUS
91518: ST_TO_ADDR
// end ;
91519: LD_VAR 0 2
91523: RET
// export function PrepareArray ( array ) ; begin
91524: LD_INT 0
91526: PPUSH
// result := array diff 0 ;
91527: LD_ADDR_VAR 0 2
91531: PUSH
91532: LD_VAR 0 1
91536: PUSH
91537: LD_INT 0
91539: DIFF
91540: ST_TO_ADDR
// if not result [ 1 ] then
91541: LD_VAR 0 2
91545: PUSH
91546: LD_INT 1
91548: ARRAY
91549: NOT
91550: IFFALSE 91570
// result := Delete ( result , 1 ) ;
91552: LD_ADDR_VAR 0 2
91556: PUSH
91557: LD_VAR 0 2
91561: PPUSH
91562: LD_INT 1
91564: PPUSH
91565: CALL_OW 3
91569: ST_TO_ADDR
// end ;
91570: LD_VAR 0 2
91574: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
91575: LD_INT 0
91577: PPUSH
91578: PPUSH
91579: PPUSH
91580: PPUSH
// sibRocketRange := 25 ;
91581: LD_ADDR_VAR 0 6
91585: PUSH
91586: LD_INT 25
91588: ST_TO_ADDR
// result := false ;
91589: LD_ADDR_VAR 0 4
91593: PUSH
91594: LD_INT 0
91596: ST_TO_ADDR
// for i := 0 to 5 do
91597: LD_ADDR_VAR 0 5
91601: PUSH
91602: DOUBLE
91603: LD_INT 0
91605: DEC
91606: ST_TO_ADDR
91607: LD_INT 5
91609: PUSH
91610: FOR_TO
91611: IFFALSE 91678
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
91613: LD_VAR 0 1
91617: PPUSH
91618: LD_VAR 0 5
91622: PPUSH
91623: LD_VAR 0 6
91627: PPUSH
91628: CALL_OW 272
91632: PPUSH
91633: LD_VAR 0 2
91637: PPUSH
91638: LD_VAR 0 5
91642: PPUSH
91643: LD_VAR 0 6
91647: PPUSH
91648: CALL_OW 273
91652: PPUSH
91653: LD_VAR 0 3
91657: PPUSH
91658: CALL_OW 309
91662: IFFALSE 91676
// begin result := true ;
91664: LD_ADDR_VAR 0 4
91668: PUSH
91669: LD_INT 1
91671: ST_TO_ADDR
// exit ;
91672: POP
91673: POP
91674: GO 91680
// end ;
91676: GO 91610
91678: POP
91679: POP
// end ;
91680: LD_VAR 0 4
91684: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
91685: LD_INT 0
91687: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
91688: LD_VAR 0 1
91692: PPUSH
91693: LD_VAR 0 2
91697: PPUSH
91698: LD_INT 0
91700: PPUSH
91701: LD_INT 0
91703: PPUSH
91704: LD_INT 1
91706: PPUSH
91707: LD_INT 0
91709: PPUSH
91710: CALL_OW 587
// end ; end_of_file
91714: LD_VAR 0 3
91718: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
91719: LD_VAR 0 1
91723: PUSH
91724: LD_INT 200
91726: DOUBLE
91727: GREATEREQUAL
91728: IFFALSE 91736
91730: LD_INT 299
91732: DOUBLE
91733: LESSEQUAL
91734: IFTRUE 91738
91736: GO 91770
91738: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
91739: LD_VAR 0 1
91743: PPUSH
91744: LD_VAR 0 2
91748: PPUSH
91749: LD_VAR 0 3
91753: PPUSH
91754: LD_VAR 0 4
91758: PPUSH
91759: LD_VAR 0 5
91763: PPUSH
91764: CALL 46385 0 5
91768: GO 91847
91770: LD_INT 300
91772: DOUBLE
91773: GREATEREQUAL
91774: IFFALSE 91782
91776: LD_INT 399
91778: DOUBLE
91779: LESSEQUAL
91780: IFTRUE 91784
91782: GO 91846
91784: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
91785: LD_VAR 0 1
91789: PPUSH
91790: LD_VAR 0 2
91794: PPUSH
91795: LD_VAR 0 3
91799: PPUSH
91800: LD_VAR 0 4
91804: PPUSH
91805: LD_VAR 0 5
91809: PPUSH
91810: LD_VAR 0 6
91814: PPUSH
91815: LD_VAR 0 7
91819: PPUSH
91820: LD_VAR 0 8
91824: PPUSH
91825: LD_VAR 0 9
91829: PPUSH
91830: LD_VAR 0 10
91834: PPUSH
91835: LD_VAR 0 11
91839: PPUSH
91840: CALL 42718 0 11
91844: GO 91847
91846: POP
// end ;
91847: PPOPN 11
91849: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
91850: LD_VAR 0 1
91854: PPUSH
91855: LD_VAR 0 2
91859: PPUSH
91860: LD_VAR 0 3
91864: PPUSH
91865: LD_VAR 0 4
91869: PPUSH
91870: LD_VAR 0 5
91874: PPUSH
91875: CALL 46121 0 5
// end ; end_of_file
91879: PPOPN 5
91881: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
91882: LD_VAR 0 1
91886: PPUSH
91887: LD_VAR 0 2
91891: PPUSH
91892: LD_VAR 0 3
91896: PPUSH
91897: LD_VAR 0 4
91901: PPUSH
91902: LD_VAR 0 5
91906: PPUSH
91907: LD_VAR 0 6
91911: PPUSH
91912: CALL 30338 0 6
// end ;
91916: PPOPN 6
91918: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
91919: LD_INT 0
91921: PPUSH
// begin if not units then
91922: LD_VAR 0 1
91926: NOT
91927: IFFALSE 91931
// exit ;
91929: GO 91931
// end ;
91931: PPOPN 7
91933: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
91934: CALL 30232 0 0
// end ;
91938: PPOPN 1
91940: END
